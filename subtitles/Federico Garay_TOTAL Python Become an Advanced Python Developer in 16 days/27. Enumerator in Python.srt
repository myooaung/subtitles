1
00:00:07,820 --> 00:00:15,140
Another small, yet very useful function is the enumerator, which in Python we call enumerate its function

2
00:00:15,140 --> 00:00:20,090
is to make our life easier when we need to access the indexes of a collection.

3
00:00:20,090 --> 00:00:26,420
For instance, if we are writing a for loop in which we need to access both the object and a list and

4
00:00:26,420 --> 00:00:30,110
their index numbers, then the enumerator will come in handy.

5
00:00:30,110 --> 00:00:36,500
While we already are able to access the indexes of a list or a string with the knowledge we already

6
00:00:36,500 --> 00:00:37,100
have.

7
00:00:37,130 --> 00:00:40,760
Enumerate will simplify this process significantly.

8
00:00:40,760 --> 00:00:43,460
Let us demonstrate it for you in Petrom.

9
00:00:44,190 --> 00:00:49,940
Right, let's start by creating a loop in which we need to access the indexes of the elements of a list

10
00:00:49,940 --> 00:00:51,950
with the elements we have so far.

11
00:00:51,980 --> 00:00:53,720
We would do it in the following way.

12
00:00:53,750 --> 00:00:58,910
We will first create a list, for example, one that has the letters A, B and C, and then we would

13
00:00:58,910 --> 00:01:04,100
need to create another variable that is called, for example, index with a value of zero.

14
00:01:05,270 --> 00:01:12,140
And now we go into the for loop and we say for each item in list, for example, print index, which

15
00:01:12,140 --> 00:01:13,700
right now is going to be zero.

16
00:01:13,700 --> 00:01:17,540
And the item itself, which is going to be each of the items in our list.

17
00:01:18,020 --> 00:01:23,750
And we should also make sure, of course, that each iteration of our loop index gets added one more

18
00:01:23,750 --> 00:01:25,340
value at a time.

19
00:01:25,340 --> 00:01:28,280
So it's changing along the whole for loop.

20
00:01:28,760 --> 00:01:36,020
So we run this, we come to run where we're going to see enumerator and here we have zero A, one B

21
00:01:36,020 --> 00:01:37,250
and two C.

22
00:01:37,250 --> 00:01:38,030
Perfect.

23
00:01:38,030 --> 00:01:43,130
We've been able to access both the index and the item, but this is not the best way to do it in Python

24
00:01:43,130 --> 00:01:47,000
because we have to learn how to use enumerator or enumerate.

25
00:01:47,030 --> 00:01:49,760
We're going to be able to do it in a much more elegant way.

26
00:01:50,360 --> 00:01:53,060
What we would have to do here is to remove the index.

27
00:01:53,060 --> 00:01:54,140
We don't need it.

28
00:01:54,140 --> 00:02:00,050
And let's say that instead of accessing list here, what it accesses, let's put this in parenthesis

29
00:02:00,080 --> 00:02:02,480
is an object of type enumerate.

30
00:02:02,660 --> 00:02:08,630
This contains list and then we don't need this last line either and we don't need to put the index here.

31
00:02:09,500 --> 00:02:14,000
So we're going to print each one of the complete items so that you can see what the numerator contains

32
00:02:14,000 --> 00:02:15,890
when we put our list inside of it.

33
00:02:16,430 --> 00:02:22,760
So we've run it and it has a series of tables that each contain first the index and then the object.

34
00:02:23,240 --> 00:02:26,150
So here we have where to extract the information we want.

35
00:02:26,430 --> 00:02:31,670
If we want it to print a certain element of these tables, as we saw before, we can separate here into

36
00:02:31,670 --> 00:02:37,160
two variables so that the first one contains the index comma and then the item.

37
00:02:37,160 --> 00:02:40,580
And here we also print index and print item.

38
00:02:40,790 --> 00:02:45,950
And what we see now is zero A, one B to C the way we had it before.

39
00:02:46,160 --> 00:02:47,390
But look at the code.

40
00:02:47,600 --> 00:02:50,810
It's much more synthetic and therefore much more efficient.

41
00:02:51,470 --> 00:02:56,510
With enumerate, you can not only work with strings or lists, you can also work with integers.

42
00:02:56,720 --> 00:03:02,180
If you want to create here, for example, instead of a list, a range from 50 to 55.

43
00:03:02,510 --> 00:03:04,220
Look what happens if we print this.

44
00:03:04,850 --> 00:03:10,160
We have index zero for 50, index one for 51, and so on.

45
00:03:10,160 --> 00:03:17,510
We have created our collection automatically enumerate super handy and we not only use this in loops,

46
00:03:17,510 --> 00:03:19,670
we can also use it outside of a loop.

47
00:03:20,090 --> 00:03:20,750
If we want.

48
00:03:20,750 --> 00:03:26,840
You can use it so that the list contains A, B, and C is transformed in a list of tables instead of

49
00:03:26,840 --> 00:03:28,010
a list of strings.

50
00:03:28,040 --> 00:03:32,720
A list of tables that contains in each table the object and the index.

51
00:03:33,350 --> 00:03:35,210
Well, it's all very simple.

52
00:03:35,300 --> 00:03:37,190
So let's go step by step.

53
00:03:37,550 --> 00:03:45,380
The enumerate would have list inside, but we have to make a casting with all of this so it is transformed

54
00:03:45,380 --> 00:03:46,280
into a list.

55
00:03:46,580 --> 00:03:52,370
So we put it all in the parentheses and at the beginning we put list and now we have our tables in a

56
00:03:52,370 --> 00:03:56,060
list, but we are going to store it in a variable that we can print.

57
00:03:56,810 --> 00:04:01,790
We're going to store it in my tables, and then we're going to print my tables and we're going to see

58
00:04:01,790 --> 00:04:02,780
it on the screen.

59
00:04:03,440 --> 00:04:05,060
And here we have the our list.

60
00:04:05,060 --> 00:04:11,090
ABC became a list that has three tables, zero A, one B to C.

61
00:04:11,950 --> 00:04:16,120
We already know how to unpack these tables if we want to access them.

62
00:04:16,600 --> 00:04:23,110
If, for example, I want to get to find index one here, I would have to go inside my table's access

63
00:04:23,110 --> 00:04:25,860
index one, which is where this table is located.

64
00:04:25,870 --> 00:04:31,060
And after that access index zero, which is where the first element of my table is located.

65
00:04:31,790 --> 00:04:36,350
I run it and here I have the one and we have managed to extract.

66
00:04:36,350 --> 00:04:38,690
We can get to any element in this way.

67
00:04:38,900 --> 00:04:45,950
So when you want to access the indexes of an iterable object, consider enumerate as it does in a simple

68
00:04:45,950 --> 00:04:47,390
and inexpensive way.

69
00:04:47,420 --> 00:04:49,760
Thanks again and see you in the next lecture.
