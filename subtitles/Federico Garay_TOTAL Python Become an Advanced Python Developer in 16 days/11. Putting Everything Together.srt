1
00:00:07,860 --> 00:00:13,800
So we're finally fit to write our whole code due to the fact that we're able to implement all the strategies

2
00:00:13,800 --> 00:00:20,310
necessary to find the elements we need to use in this loop, which will be more complex than everything

3
00:00:20,310 --> 00:00:21,510
we've done so far.

4
00:00:22,020 --> 00:00:26,070
So let's remove this and leave basic URL there.

5
00:00:26,100 --> 00:00:32,790
Since we're going to use it here, we'll clarify that this is intended to create a URL without page

6
00:00:32,790 --> 00:00:33,330
number.

7
00:00:33,690 --> 00:00:36,570
This way we know what's inside our code.

8
00:00:37,320 --> 00:00:41,520
Then we'll create an empty list in which we'll add all the title as we find them.

9
00:00:42,000 --> 00:00:50,970
So let's type list of four or five star titles, and it will be named high rated titles and we'll be

10
00:00:50,970 --> 00:00:52,800
equal to an empty list.

11
00:00:54,430 --> 00:00:56,190
Okay, let's start our loop.

12
00:00:56,430 --> 00:01:02,310
We need a loop that iterates over all the pages so that we can later check and select elements on each

13
00:01:02,310 --> 00:01:02,940
page.

14
00:01:03,540 --> 00:01:11,680
So we can type iterate pages for each page in a range from 1 to 50.

15
00:01:11,700 --> 00:01:13,380
So we type 51.

16
00:01:13,590 --> 00:01:14,670
What will happen?

17
00:01:15,600 --> 00:01:21,870
We'll create a soup for each of these pages, so a different soup will be generated for each iteration.

18
00:01:22,620 --> 00:01:25,830
So we enter create soup on each page.

19
00:01:27,030 --> 00:01:33,900
We indent once again and then we create a new variable named URL page, which will be equal to basic

20
00:01:33,930 --> 00:01:39,030
URL format so as to change the page number in each case.

21
00:01:40,200 --> 00:01:43,950
In each loop, the number we put here will be equal to page.

22
00:01:44,010 --> 00:01:50,040
Because remember that page is a number included in a range that is from 1 to 50.

23
00:01:50,050 --> 00:01:52,320
So page will be our first number.

24
00:01:53,160 --> 00:02:01,110
We now have the URL of all the pages, so let's create a new request and a variable named result which

25
00:02:01,110 --> 00:02:08,700
stores requests dot get which will contain anything that's inside the URL page, the one we just created.

26
00:02:09,330 --> 00:02:11,580
So we have the correct requests.

27
00:02:11,730 --> 00:02:19,020
Now we're going to create a soup with that two requests that is equal to BS for beautiful soup.

28
00:02:19,740 --> 00:02:27,540
Now it's time to add two fundamental elements which are results dot text and the HTML pass method.

29
00:02:28,350 --> 00:02:34,530
We have our soup and once we have it, we need to select all the books from each page.

30
00:02:35,130 --> 00:02:41,400
So we'll create a new variable that can select inside the soup all the data of the books.

31
00:02:41,640 --> 00:02:44,460
So here we select data of books.

32
00:02:45,930 --> 00:02:50,220
The variable will be books and will be equal to soup dot select.

33
00:02:51,030 --> 00:02:57,180
And remember that the books are inside a class named Product Pod and that's why we enter a dot.

34
00:02:57,690 --> 00:03:00,840
That class contains the data of all the books.

35
00:03:02,070 --> 00:03:07,440
So now that we have this variable, we can create a loop that can iterate over the books.

36
00:03:07,440 --> 00:03:09,780
That is each book of each page.

37
00:03:10,860 --> 00:03:16,830
So for each book in books, this loop will check if those books are rated four or five stars.

38
00:03:17,790 --> 00:03:26,160
So let's clarify by saying check if they are four or five star books and let's indent once more since

39
00:03:26,160 --> 00:03:33,360
we're going to check if the names Star Rating four or Star Rating five are present and we'll automatically

40
00:03:33,360 --> 00:03:35,580
store that search in a list.

41
00:03:36,870 --> 00:03:39,240
So let's verify the length of that list.

42
00:03:39,330 --> 00:03:44,880
If the list has a length of zero, it means there is neither four nor five star ratings.

43
00:03:45,420 --> 00:03:54,390
So we check if length of books select in the search of class DOT staff rating four, which is the first

44
00:03:54,390 --> 00:03:56,790
case is different from zero.

45
00:03:57,630 --> 00:04:01,140
If that's the case, it means we're talking about a four star book.

46
00:04:02,040 --> 00:04:07,470
We're also going to type R so as to take into account the five star books.

47
00:04:07,710 --> 00:04:11,340
So we copy and paste and replace four with five.

48
00:04:12,120 --> 00:04:15,990
So whether we're looking at a four or a five star book, it's irrelevant to us.

49
00:04:16,410 --> 00:04:21,930
In any case, we'll be able to access the code if the number of elements is different from zero.

50
00:04:22,410 --> 00:04:24,750
That is, there's at least one element.

51
00:04:26,460 --> 00:04:30,720
If it is different from zero, it means it is a four or five star book.

52
00:04:31,220 --> 00:04:37,050
If this condition is met, we will access the code which will store the title of the book in a variable.

53
00:04:37,530 --> 00:04:40,710
So store title in variable.

54
00:04:41,760 --> 00:04:47,250
Let's indent and now let's call book title which will be equal to book select.

55
00:04:48,180 --> 00:04:53,580
Remember that book in this element of the loop which represents all the elements we'll iterate over.

56
00:04:54,300 --> 00:05:00,870
So now we select the a tag in its index, one because we're going to receive to a tags.

57
00:05:00,960 --> 00:05:04,830
But we need the second one that is the one in index one.

58
00:05:05,850 --> 00:05:11,640
We want to take title from that tag so as to store the title of the book inside this variable.

59
00:05:12,060 --> 00:05:18,270
So now that we have a variable containing the title of a book, we can add book to list.

60
00:05:19,020 --> 00:05:21,630
That's why we created this list up here.

61
00:05:21,660 --> 00:05:24,000
The one named high rated titles.

62
00:05:24,600 --> 00:05:30,270
So we invoke it and apply the append method in order to add the book title.

63
00:05:31,290 --> 00:05:37,050
So now we should be able to access each page, access each book of those pages, and verify if those

64
00:05:37,050 --> 00:05:38,880
are four or five star books.

65
00:05:39,630 --> 00:05:44,790
If that's the case, we should then store the title of those books in a variable which we can add to

66
00:05:44,790 --> 00:05:45,870
the list up here.

67
00:05:46,620 --> 00:05:52,140
If I executed this, a list would be generated, but I wouldn't see it on the screen.

68
00:05:52,530 --> 00:06:00,510
So outside of these loops, we're going to create a code that can show four and five star books in console.

69
00:06:01,980 --> 00:06:06,390
And this is an extra line of code that can help us check if everything went well.

70
00:06:07,260 --> 00:06:09,810
So how can we see all of these books?

71
00:06:10,320 --> 00:06:16,620
We'll ask that for each be in high rated titles, BE is printed and displayed on the screen.

72
00:06:17,700 --> 00:06:19,140
So how did we do?

73
00:06:19,680 --> 00:06:20,880
I think we did great.

74
00:06:21,600 --> 00:06:24,120
Let's execute this and see what happens.

75
00:06:24,840 --> 00:06:26,970
So we have lots of books here.

76
00:06:27,000 --> 00:06:28,860
Look at this long list.

77
00:06:29,400 --> 00:06:32,110
Seems like there are several high rated books.

78
00:06:32,130 --> 00:06:40,710
And to verify if this list is correct, we'll check the first three books Sharp Objects, Sapiens and

79
00:06:40,710 --> 00:06:42,540
the Dirty Little Secrets.

80
00:06:43,260 --> 00:06:47,130
Let's go to our website to see which are the first three high rated books.

81
00:06:48,190 --> 00:06:50,060
The first one has three.

82
00:06:50,080 --> 00:06:52,720
The second one has one and the third has one.

83
00:06:53,500 --> 00:06:56,960
So the first four star book is Sharp Objects.

84
00:06:56,980 --> 00:06:57,850
That's right.

85
00:06:57,880 --> 00:07:00,820
The following is Sapiens, which has five stars.

86
00:07:00,910 --> 00:07:04,480
And this is followed by Requiem, which wasn't displayed.

87
00:07:04,690 --> 00:07:07,720
And The Dirty Little Secrets, which has four stars.

88
00:07:08,860 --> 00:07:14,590
So I reckon we did a pretty good job because we got four and five star books like we wanted.

89
00:07:15,380 --> 00:07:19,220
So this works properly and you can check if you want.

90
00:07:19,790 --> 00:07:24,260
So we managed to satisfy two specific conditions through web scraping.

91
00:07:24,410 --> 00:07:28,130
So let me emphasize that there are no formulas for you to scrape websites.

92
00:07:28,130 --> 00:07:32,210
This task will vary depending on the websites you want to work with.

93
00:07:32,390 --> 00:07:35,690
Remember to always obey copyright and privacy laws.

94
00:07:35,720 --> 00:07:41,720
In fact, your access may be restricted if you scrape websites excessively, so most websites are prepared

95
00:07:41,720 --> 00:07:43,400
to fight web scraping back.

96
00:07:43,640 --> 00:07:47,330
Nevertheless, I'm very happy with everything we've achieved so far.

97
00:07:47,570 --> 00:07:51,470
So let's rest and get ready for more exciting lessons.
