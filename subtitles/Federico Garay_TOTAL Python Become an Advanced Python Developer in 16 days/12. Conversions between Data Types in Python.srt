1
00:00:07,770 --> 00:00:13,470
One of the advantages of Python about variables is that you can store any kind of data in them.

2
00:00:13,950 --> 00:00:21,360
For example, the variable my data can contain an integer, then replace it with a float, then change

3
00:00:21,360 --> 00:00:25,440
it to a string and it would always be able to store whatever you put inside.

4
00:00:25,980 --> 00:00:32,130
In most other programming languages, when you declare a variable, you have to give it a name and assign

5
00:00:32,130 --> 00:00:35,610
it a specific data type, for example, integer.

6
00:00:36,450 --> 00:00:40,530
From then on, that variable will only hold integers.

7
00:00:40,860 --> 00:00:43,260
So that's what's great about variables and Python.

8
00:00:43,590 --> 00:00:47,700
They only get a name and you can store any kind of data type inside them.

9
00:00:48,570 --> 00:00:54,360
On the other hand, there may be situations where you need to convert the contents of a variable to

10
00:00:54,360 --> 00:00:55,940
a different data type.

11
00:00:55,950 --> 00:01:02,250
As we saw in the previous lecture, when we wanted to take a user input, which is a string data type

12
00:01:02,250 --> 00:01:08,550
by default, and treat it as an integer in order to perform a mathematical operation on it.

13
00:01:09,210 --> 00:01:16,560
The process of converting a specific data type into another is called casting, and there are two types

14
00:01:16,560 --> 00:01:19,650
of conversions implicit and explicit.

15
00:01:20,670 --> 00:01:24,600
Implicit conversion is done automatically by Python.

16
00:01:25,050 --> 00:01:32,700
It happens when we perform certain operations with two different types, and Python solves it by transforming

17
00:01:32,700 --> 00:01:35,370
the data type without us noticing.

18
00:01:35,790 --> 00:01:44,160
In contrast, explicit conversion is when we expressly ask through the code for a data type to be converted

19
00:01:44,160 --> 00:01:45,330
to another data type.

20
00:01:45,840 --> 00:01:46,770
And how do we do it?

21
00:01:47,220 --> 00:01:52,170
By expressing that we want to put a certain type of data into another.

22
00:01:52,560 --> 00:01:58,770
For example, if I have a variable called my value that contains an integer, let's say the number one,

23
00:01:59,040 --> 00:02:07,140
I can reassign it to another variable with a different data type, for example, a string.

24
00:02:07,950 --> 00:02:12,090
Now if I print this variable, I will see the same value one.

25
00:02:12,510 --> 00:02:16,620
But this time is no longer an integer, it is a string.

26
00:02:17,160 --> 00:02:20,820
So now I can do other things like concatenate it with other strings.

27
00:02:21,480 --> 00:02:25,830
Let's go over to Pi Charm and Federico is going to show all of this in action.

28
00:02:26,130 --> 00:02:26,850
Thank you, Phil.

29
00:02:27,210 --> 00:02:33,270
And let's see how these conversions behave within this file that I just created called conversions within

30
00:02:33,270 --> 00:02:33,930
the data.

31
00:02:34,170 --> 00:02:38,130
You can do the same and let's start learning how to make implicit conversions.

32
00:02:38,250 --> 00:02:43,230
Which are those that Python does automatically when it's possible without having to express.

33
00:02:43,500 --> 00:02:44,970
I want to make a conversion.

34
00:02:45,630 --> 00:02:46,980
Let's see it with an example.

35
00:02:47,760 --> 00:02:52,640
We're going to create the variable that is going to be called number one, and I'm going to give it

36
00:02:52,650 --> 00:02:54,120
a value of 20 initially.

37
00:02:54,750 --> 00:02:56,760
That is to say that it is an integer.

38
00:02:57,210 --> 00:03:03,420
I'm also going to create another variable called NUM two and it will have a value of 30.5.

39
00:03:03,810 --> 00:03:05,490
So known to as a float.

40
00:03:06,440 --> 00:03:13,880
And in fact, if I print the type of number one and then print type of number two, and now I run this.

41
00:03:14,960 --> 00:03:15,650
Wrong again.

42
00:03:16,590 --> 00:03:17,960
And we go to conversions.

43
00:03:19,040 --> 00:03:19,790
And there it is.

44
00:03:20,300 --> 00:03:24,650
It tells me that the first variable is an integer and that the second variable is a float.

45
00:03:25,220 --> 00:03:26,090
That's perfect.

46
00:03:26,600 --> 00:03:28,220
So far, no surprises.

47
00:03:29,060 --> 00:03:35,570
What I'm going to do now is here in the middle, before the data type is printed, I will do a rewrite

48
00:03:35,570 --> 00:03:36,230
of no one.

49
00:03:36,500 --> 00:03:38,330
I'm going to ask that now.

50
00:03:38,660 --> 00:03:47,780
No one is equal to the value of the one, i.e. 20 plus the value of number two, i.e. 30.5.

51
00:03:48,650 --> 00:03:52,220
So now no one is going to be 50.5.

52
00:03:53,150 --> 00:03:54,020
So let's run this.

53
00:03:54,960 --> 00:03:59,910
And now the funny thing is that the result of printing the two types of number one and number two is

54
00:03:59,910 --> 00:04:01,410
now a float for each one.

55
00:04:02,130 --> 00:04:08,670
Because in number one, when you did an addition that would now give you a value of 50.8 and how to

56
00:04:08,670 --> 00:04:11,820
automatically transform or convert to a float.

57
00:04:12,180 --> 00:04:14,000
Number one, stop the being in intake.

58
00:04:14,310 --> 00:04:18,180
It became a float at the moment of printing the data types.

59
00:04:18,450 --> 00:04:19,920
We already had to float.

60
00:04:20,280 --> 00:04:23,580
This is an implicit conversion because we didn't ask Python.

61
00:04:23,580 --> 00:04:26,640
Please convert and move on to a variable that we can support.

62
00:04:26,640 --> 00:04:27,030
Float.

63
00:04:27,600 --> 00:04:31,200
No Python automatically did it for us and saved some work for us.

64
00:04:31,560 --> 00:04:34,500
There are situations where we have to explicitly ask for it.

65
00:04:35,220 --> 00:04:38,700
Those are the explicit conversions and that's what we're going to look at next.

66
00:04:39,880 --> 00:04:44,140
Let's declare a variable, a type of float, for example, let's name it number one.

67
00:04:44,560 --> 00:04:48,190
And this variable is going to have a value of 5.8.

68
00:04:48,700 --> 00:04:53,540
We're going to print number one and we're going also to print the type of data that corresponds to number

69
00:04:53,540 --> 00:04:53,710
one.

70
00:04:55,310 --> 00:04:59,600
It's going to tell us that 5.8 is number one and that is a type of float.

71
00:04:59,750 --> 00:05:00,300
Perfect.

72
00:05:00,320 --> 00:05:01,110
We already knew that.

73
00:05:01,640 --> 00:05:07,700
But if I now want to transform this 5.8 value into an integer value, the way I have to do it is this.

74
00:05:07,910 --> 00:05:11,630
Well, we're going to launch it in a variable name, for example.

75
00:05:11,630 --> 00:05:16,640
Number two, and we're going to say that number to it is equal to the intrigue of number one.

76
00:05:17,480 --> 00:05:22,760
So we want to want it to be transformed into an entire and in brackets of no one.

77
00:05:24,230 --> 00:05:31,310
The reading of this would basically be I want them to to be equal to an intake confirmed by the number

78
00:05:31,310 --> 00:05:31,970
one value.

79
00:05:32,510 --> 00:05:36,650
If I want to print this, let me copy this first and paste it here.

80
00:05:37,550 --> 00:05:40,640
But I change it to number two and we execute it.

81
00:05:41,360 --> 00:05:43,640
It tells us first 5.8 float.

82
00:05:44,630 --> 00:05:47,690
It is what corresponds to the lines two and three of the code.

83
00:05:48,530 --> 00:05:52,310
Then we have created the NUM two and we have made the conversion.

84
00:05:52,760 --> 00:05:55,400
We see that the printing of number two is a five.

85
00:05:56,120 --> 00:06:03,950
What it did was necessarily to eliminate the decimals because number two only admits integers and notes

86
00:06:04,280 --> 00:06:09,200
that what it did was not round it because if it had rounded, it would have taken it to six.

87
00:06:09,830 --> 00:06:11,690
Since 5.8 is close to six.

88
00:06:12,530 --> 00:06:17,480
What it did was eliminating all the decimal points and it left nothing but the intake.

89
00:06:18,350 --> 00:06:21,980
Here we can see that the data type of number two is integer.

90
00:06:22,700 --> 00:06:24,470
So here I've done a conversion.

91
00:06:25,130 --> 00:06:32,000
I've transformed the value 5.8, which was lodged in number one into an intake using this approach,

92
00:06:32,210 --> 00:06:37,910
which is the first data type that you have that you want to have and then in brackets the value that

93
00:06:37,910 --> 00:06:39,860
you're going to transform into the data type.

94
00:06:41,530 --> 00:06:45,460
So now let's try to do what we wanted to do before with the variable age.

95
00:06:45,970 --> 00:06:47,320
Let's create that variable.

96
00:06:48,010 --> 00:06:51,580
We're going to say that it is going to be equal to an input with the prompt.

97
00:06:51,790 --> 00:06:52,690
Tell me your age.

98
00:06:53,530 --> 00:06:55,480
We're going to do it in the same way as before.

99
00:06:56,770 --> 00:06:59,080
But this time to be possible to succeed.

100
00:06:59,410 --> 00:07:03,940
We're going to say that the value of age, which comes in a string, because that's the value of the

101
00:07:03,940 --> 00:07:07,870
user enters, we're going to convert it as an intake of age.

102
00:07:08,560 --> 00:07:12,310
So now age is an Antigua and I can make operations with that.

103
00:07:13,210 --> 00:07:15,130
Then I want this variable new age.

104
00:07:15,160 --> 00:07:19,900
The one that I used before to try to do some unsuccessfully in the previous lecture.

105
00:07:20,820 --> 00:07:23,250
I want this to be equal to one plus eight.

106
00:07:23,790 --> 00:07:26,790
And now you can see that I'm not getting any errors in the code.

107
00:07:27,240 --> 00:07:28,380
It is allowing me to do it.

108
00:07:28,980 --> 00:07:34,530
And now if I print New Age and run the code, it says, Tell me your age.

109
00:07:35,420 --> 00:07:42,110
30 and 31 is the result of adding a value to age because age is now an integer.

110
00:07:42,170 --> 00:07:47,750
Thanks to this conversion we've done up here and actually to make this more interesting, we're going

111
00:07:47,750 --> 00:07:55,520
to put here after the user has given his answer, we're going to print the age type and we're going

112
00:07:55,520 --> 00:07:59,660
to copy this line and we're going to print it again after we've done the conversion.

113
00:08:00,890 --> 00:08:04,400
Notice how the program behaves now aged 30.

114
00:08:05,090 --> 00:08:08,830
It tells me it's a string and it converted it into an intake.

115
00:08:09,470 --> 00:08:11,390
And here we have our 31.

116
00:08:11,840 --> 00:08:12,230
Yes.

117
00:08:13,040 --> 00:08:18,830
The problem that we would have here is if what I want to do is to create the string in this, because

118
00:08:18,830 --> 00:08:20,960
it tells me the new age is a sentence.

119
00:08:21,680 --> 00:08:23,060
Because if I tried to do it.

120
00:08:24,150 --> 00:08:30,390
If I want to include in a sentence that say something like Your new age is going to be.

121
00:08:31,660 --> 00:08:33,270
Hey, we're going to leave the space.

122
00:08:33,280 --> 00:08:38,500
And I want to concatenate it with New Age, which is the value that I already have.

123
00:08:39,340 --> 00:08:40,090
Will this work?

124
00:08:40,360 --> 00:08:41,140
Will it not work?

125
00:08:41,680 --> 00:08:42,250
Let's see.

126
00:08:42,910 --> 00:08:43,840
Let's executed.

127
00:08:45,370 --> 00:08:46,870
My age is 30.

128
00:08:47,410 --> 00:08:48,340
It's a string.

129
00:08:48,700 --> 00:08:52,270
It says in Tiger and it tells me that there is an error here.

130
00:08:52,780 --> 00:08:53,650
What kind of error?

131
00:08:54,460 --> 00:08:59,260
It says that I can only concatenate strings, but not an integer with a string.

132
00:08:59,950 --> 00:09:06,130
Of course, now that I transformed age into an integer, New Age is also an integer.

133
00:09:06,800 --> 00:09:12,370
As you know already, I can't concatenate the string with an integer because this plus doesn't know

134
00:09:12,370 --> 00:09:14,380
whether to concatenate or add.

135
00:09:14,980 --> 00:09:18,340
And it can't really do either, because it has two different data types.

136
00:09:19,210 --> 00:09:20,260
What would we have to do?

137
00:09:21,200 --> 00:09:23,810
Do we have to transform New Age into a string now?

138
00:09:24,380 --> 00:09:30,710
Well, we could, but it's not the most practical thing to go back and forth with data types doing transformations

139
00:09:30,710 --> 00:09:31,300
all the time.

140
00:09:32,280 --> 00:09:36,450
So in the next lecture, we're going to learn something that is going to help us solve this, which

141
00:09:36,450 --> 00:09:40,350
is the print strings with values of any type by formatting the strings.

142
00:09:41,040 --> 00:09:42,360
So let's go to the next lecture.
