WEBVTT
1
00:00:07.970 --> 00:00:15.140
The Tuples are a collection of elements that is very similar to lists, but with one important difference

2
00:00:15.140 --> 00:00:16.580
they are immutable.

3
00:00:16.670 --> 00:00:21.990
Once an element is assigned to a tuple, it cannot be changed or reassigned.

4
00:00:22.010 --> 00:00:28.400
They are written almost the same way as LIST, but they have parentheses instead of brackets.

5
00:00:28.580 --> 00:00:32.540
And you can also write them without enclosing them in anything.

6
00:00:32.540 --> 00:00:34.510
And they work the same way.

7
00:00:34.610 --> 00:00:41.330
But if they are so similar to lists and even more limited than lists because tuples are immutable,

8
00:00:41.330 --> 00:00:43.940
why would we use tuples instead of lists?

9
00:00:43.940 --> 00:00:50.150
Mainly because they take up less memory space and therefore are faster to process than lists.

10
00:00:50.180 --> 00:00:54.830
Secondly, since they cannot be modified, we may use them to store structures.

11
00:00:54.830 --> 00:00:56.860
We do not want to be modified.

12
00:00:56.870 --> 00:00:58.600
They would be damage proof.

13
00:00:58.610 --> 00:01:02.780
Let's move on to PY Charm and Federico and see tuples in action.

14
00:01:03.410 --> 00:01:08.000
And to see the tuples in action we're going to come to py charm and we're going to start creating a

15
00:01:08.000 --> 00:01:10.550
first variable called my tuple.

16
00:01:11.870 --> 00:01:17.450
But it's going to have as a content a very simple tuple with the numbers one, two, three and four.

17
00:01:17.690 --> 00:01:21.140
Remember between parentheses and separated by a comma.

18
00:01:21.410 --> 00:01:28.190
And now, if I want to print to see the type of this object we're going to print here, type my tuple,

19
00:01:28.190 --> 00:01:29.840
and we're going to execute it.

20
00:01:30.320 --> 00:01:32.770
And going to run to the second run.

21
00:01:32.780 --> 00:01:34.220
And now we choose tuples.

22
00:01:35.450 --> 00:01:38.510
And we can already see that this is a tuple type class.

23
00:01:38.600 --> 00:01:43.940
And as Phil explained in the introductory video, we can also do it directly without the parentheses.

24
00:01:45.090 --> 00:01:48.210
If I do it this way, we still have an object of type tuple.

25
00:01:48.750 --> 00:01:51.270
However, the most common is that with the parentheses.

26
00:01:51.270 --> 00:01:52.980
But you can build them as you want.

27
00:01:53.190 --> 00:01:56.940
I also told you that we have tuples that contain all kinds of objects.

28
00:01:56.970 --> 00:02:02.580
Here I've built a tuple that has only integers, but tuples can also have any kind of object, even

29
00:02:02.580 --> 00:02:05.370
objects of different values mixed in a single tuple.

30
00:02:05.730 --> 00:02:12.150
Let's create a simple one called T, which will contain an integer, then a float, then a string,

31
00:02:12.150 --> 00:02:12.960
and so on.

32
00:02:13.940 --> 00:02:15.530
It could even have a dictionary.

33
00:02:15.620 --> 00:02:19.010
It could have a list or a tuple itself inside the tuples.

34
00:02:19.040 --> 00:02:21.260
In fact, we're going to see that in a moment.

35
00:02:21.560 --> 00:02:27.170
But now I want to show you that I can also query that what is in the given index, as we did with the

36
00:02:27.170 --> 00:02:27.760
strings.

37
00:02:27.770 --> 00:02:30.140
This can also be indexed and sliced.

38
00:02:30.620 --> 00:02:34.160
For example, my tuple at position number zero.

39
00:02:34.190 --> 00:02:39.110
I want to print that out to this is going to tell me that a position zero one is found.

40
00:02:39.200 --> 00:02:39.870
Right.

41
00:02:39.890 --> 00:02:41.690
That's the first element of my table.

42
00:02:42.050 --> 00:02:48.050
I can also search with negative numbers that just like strings makes it count from right to left, and

43
00:02:48.050 --> 00:02:50.990
the minus two position would be three.

44
00:02:51.110 --> 00:02:55.550
It should give me a three here, and it does indeed return a three.

45
00:02:57.000 --> 00:03:00.540
MANJOO Tools are immutable, just like strings.

46
00:03:00.630 --> 00:03:06.240
So we cannot do things like changing one of the elements inside the tuple that we already have.

47
00:03:06.720 --> 00:03:09.420
Of course, we could do it by creating a new variable.

48
00:03:10.250 --> 00:03:15.950
If what I want to do here, for example, is to say that now my tuple is in position zero.

49
00:03:15.980 --> 00:03:21.980
I want it to be equal to five and now I want it to print my tuple and I print it.

50
00:03:22.250 --> 00:03:25.730
Well, it's going to give me an error that says it's a type error.

51
00:03:26.620 --> 00:03:31.360
The tuple are objects that do not support item assignment the same as the strings.

52
00:03:31.360 --> 00:03:32.020
Remember?

53
00:03:32.500 --> 00:03:34.840
Well, since we saw this error, we eliminate it.

54
00:03:34.840 --> 00:03:37.060
Then we cannot continue this way.

55
00:03:37.600 --> 00:03:43.030
And we can do other things that can be done in the list and be done in the dictionaries, which is nesting.

56
00:03:43.420 --> 00:03:48.650
I can have, for example, inside my tuple one or more elements that are tuples themselves.

57
00:03:48.670 --> 00:03:53.980
Suppose that here, instead of having my integer at index two, I have a tuple that contains the numbers

58
00:03:53.980 --> 00:03:56.410
ten and 20, so to speak.

59
00:03:56.650 --> 00:03:57.640
Is that okay?

60
00:03:58.060 --> 00:04:02.770
Now if I want to query what's in my tuple at position two, let's print.

61
00:04:02.950 --> 00:04:07.330
It's going to tell me that that position I have at tuple containing ten and 20.

62
00:04:07.960 --> 00:04:13.600
And if I want to consult the first of the objects inside that tuple, then I have to look inside position

63
00:04:13.600 --> 00:04:14.170
two.

64
00:04:14.260 --> 00:04:18.670
And then in that position in the index zero of that tuple that I have there.

65
00:04:19.460 --> 00:04:21.410
And then it will turn only the ten.

66
00:04:22.040 --> 00:04:23.000
Is that understood?

67
00:04:23.720 --> 00:04:27.470
You can do it the same way as we've also seen with the lists and the dictionaries.

68
00:04:27.890 --> 00:04:31.960
The other thing that we can also do with tuples and lists is to do castings.

69
00:04:32.570 --> 00:04:35.630
If I want to transform my tuple, we're going to overwrite it.

70
00:04:35.660 --> 00:04:38.060
We're going to write again my temple.

71
00:04:38.090 --> 00:04:40.790
And I'm going to save it this time as a list.

72
00:04:41.390 --> 00:04:44.810
So I say list and in parenthesis I put my tuple.

73
00:04:45.350 --> 00:04:50.270
And now if I want to just print out the type of my tuple to see what's happened now with this.

74
00:04:50.900 --> 00:04:53.330
Let's close this in parentheses and print it out.

75
00:04:54.020 --> 00:04:56.180
It tells us that it's a list type class.

76
00:04:56.480 --> 00:04:58.310
Although I created a tuple.

77
00:04:58.340 --> 00:05:01.190
Then through a casting, I put it inside a list.

78
00:05:02.130 --> 00:05:08.340
And now if I come back to overwrite again, my turbo, my poor thing, and this time I put it inside

79
00:05:08.340 --> 00:05:10.620
a tuple that has a content.

80
00:05:10.680 --> 00:05:12.030
What is in my tuple?

81
00:05:12.680 --> 00:05:15.050
Now the class type is total again.

82
00:05:15.140 --> 00:05:17.090
We've gone around a couple of times.

83
00:05:17.390 --> 00:05:22.130
Well, you can also do things like assign the content of a topic to different variables.

84
00:05:22.400 --> 00:05:26.900
Let's say I have a tuple that's called T and it has one, two and three.

85
00:05:27.470 --> 00:05:29.750
It has three elements that are all integers.

86
00:05:29.900 --> 00:05:33.430
And now I want the variables X, Y, and Z to be equal.

87
00:05:33.440 --> 00:05:38.610
That is to have in their content whatever is in T so far.

88
00:05:38.630 --> 00:05:40.460
Notice that I don't get any errors.

89
00:05:40.490 --> 00:05:46.610
Let's see what happens if I print x, y and z that returns one, two and three.

90
00:05:47.030 --> 00:05:51.200
X contains the one, y has the two and Z has the three.

91
00:05:52.070 --> 00:05:55.430
This could be done because we have the same amount of values and variables.

92
00:05:55.430 --> 00:05:58.640
So they were assigned one by one with this simple process.

93
00:05:59.030 --> 00:06:03.920
And I did not show this before, but I could have done it with the lists and also with the dictionaries.

94
00:06:04.070 --> 00:06:07.520
Of course, the condition is that they are always the same number of elements.

95
00:06:07.760 --> 00:06:11.990
If I would put here that I also have the variable A and I want to print this.

96
00:06:12.440 --> 00:06:16.550
It will tell me that there is a value error because there are not enough values to unpack.

97
00:06:17.190 --> 00:06:24.660
We were expecting four because we have four variables, but I have three values and if I had one variable

98
00:06:24.660 --> 00:06:29.400
less, let's try it this way it would give me a similar error value error.

99
00:06:29.970 --> 00:06:33.690
It tells me that there are too many values this time to unpack.

100
00:06:33.690 --> 00:06:37.680
I was expecting two because I have X and Y and I have three values.

101
00:06:37.800 --> 00:06:39.030
Well, you can do this.

102
00:06:39.030 --> 00:06:43.650
We said with lists and with dictionaries as long as the number of values and variables match.

103
00:06:44.590 --> 00:06:49.060
Let's try one more thing we have here this tuple that has three elements.

104
00:06:49.060 --> 00:06:51.640
We're going to add one more this time a one.

105
00:06:51.700 --> 00:06:54.040
I'm intentionally adding a repeated value.

106
00:06:54.280 --> 00:06:55.930
We're going to do three things.

107
00:06:55.930 --> 00:06:58.780
First, I ask Python to tell me what is the length.

108
00:06:58.780 --> 00:07:01.570
That is the number of elements that our T has.

109
00:07:01.720 --> 00:07:05.230
So here in the impression we're going to ask it to print the length.

110
00:07:05.230 --> 00:07:06.760
Remember it is length.

111
00:07:06.790 --> 00:07:13.270
We used it with strings and lists and the length of t if we print it, it tells us that it's four because

112
00:07:13.270 --> 00:07:14.500
it has four elements.

113
00:07:15.040 --> 00:07:16.810
But now I'm going to ask a different thing.

114
00:07:17.200 --> 00:07:22.690
I'm going to use one of the two methods that tuples have we're going to put to the DOT so that it brings

115
00:07:22.690 --> 00:07:23.650
us the methods.

116
00:07:23.950 --> 00:07:26.860
These two are the methods that you have index and count.

117
00:07:26.860 --> 00:07:28.240
So let's start with count.

118
00:07:28.240 --> 00:07:33.340
I'm going to add it, but this method asks me for a parameter inside the parentheses, which is a value.

119
00:07:34.090 --> 00:07:39.760
What it's asking me is what value do I want to count inside the tuple to know how many times it appears?

120
00:07:40.090 --> 00:07:45.280
Well, I want to know how many times it pays the number one, and if I execute this it will tell me

121
00:07:45.280 --> 00:07:46.540
that it appears twice.

122
00:07:46.990 --> 00:07:51.670
So the count method allows you to count the number of occurrences of a value within your tuple.

123
00:07:52.180 --> 00:07:56.140
And if I use the other method that is index and here we have it.

124
00:07:56.290 --> 00:08:01.150
I will say inside the parentheses, which is the value on which I want to consult its index number.

125
00:08:01.840 --> 00:08:04.210
Well, let's look up the value of number two.

126
00:08:04.630 --> 00:08:06.100
In what index is it?

127
00:08:06.400 --> 00:08:07.780
It will tell me number one.

128
00:08:07.780 --> 00:08:08.680
And that's okay.

129
00:08:08.770 --> 00:08:12.280
Well, we can also do this with the lists and the count as well.

130
00:08:12.520 --> 00:08:12.910
Okay.

131
00:08:12.910 --> 00:08:15.220
This would be all the basics about tuple.

132
00:08:15.250 --> 00:08:19.600
Don't worry too much about it for now, because tuples are not a type of object that you're going to

133
00:08:19.600 --> 00:08:22.450
use very much or often at the beginning of your career.

134
00:08:22.750 --> 00:08:28.600
Even at the beginning of this course, they're going to get a little more prominent later on, but they're

135
00:08:28.600 --> 00:08:31.240
not one of the most popular data types out there.

136
00:08:31.480 --> 00:08:36.430
We're going to do a couple of exercises now to get these learnings locked in for you, and then we'll

137
00:08:36.430 --> 00:08:40.720
see you in the lecture about set, which is the last of the elements or collections of elements that

138
00:08:40.720 --> 00:08:42.010
we have yet to learn.

139
00:08:42.310 --> 00:08:43.180
See you there.
