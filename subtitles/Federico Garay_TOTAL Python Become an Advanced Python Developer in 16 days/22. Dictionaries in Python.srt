1
00:00:07,670 --> 00:00:12,110
To understand what the dictionary type objects are in Python.

2
00:00:12,110 --> 00:00:14,900
Let's think about real life dictionaries.

3
00:00:15,410 --> 00:00:19,970
Open a dictionary at home and you'll find a collection of unique concepts.

4
00:00:20,000 --> 00:00:22,460
For example, all the English words.

5
00:00:22,760 --> 00:00:26,000
Next to each concept there is a definition.

6
00:00:26,270 --> 00:00:34,010
So ultimately what you have is a bunch of pairs which are composed of a concept or keyword and a value

7
00:00:34,010 --> 00:00:35,870
associated with that key.

8
00:00:35,900 --> 00:00:38,630
In Python, it is more or less the same.

9
00:00:38,870 --> 00:00:46,550
A dictionary is a collection of pairs and each of those pairs has a key and a value associated to that

10
00:00:46,550 --> 00:00:47,120
key.

11
00:00:47,750 --> 00:00:52,710
Moreover, keys, just like in real world dictionaries cannot be repeated.

12
00:00:52,730 --> 00:00:53,900
They are unique.

13
00:00:53,930 --> 00:00:56,450
How do you write a dictionary in Python?

14
00:00:56,750 --> 00:01:04,040
Between braces and each pair of elements is going to be separated from each other by commas and within

15
00:01:04,040 --> 00:01:04,610
pairs.

16
00:01:04,610 --> 00:01:08,360
The key and its value are separated by colons.

17
00:01:09,140 --> 00:01:13,440
Unlike lists, dictionaries do not have a specific order.

18
00:01:13,460 --> 00:01:15,620
They do not have an index.

19
00:01:15,830 --> 00:01:22,070
Therefore, even when you create them by writing them in a certain order, that order will be irrelevant

20
00:01:22,070 --> 00:01:23,000
for Python.

21
00:01:23,030 --> 00:01:28,700
Dictionaries could well be written the other way around since you cannot look up a value based on its

22
00:01:28,700 --> 00:01:34,250
index as we did with lists, you can look up values based on its key.

23
00:01:34,340 --> 00:01:39,860
So when is it convenient to use lists and dictionaries for dictionaries?

24
00:01:39,860 --> 00:01:42,200
We said order does not matter.

25
00:01:42,650 --> 00:01:47,630
So you cannot sort with the sort or reverse methods.

26
00:01:48,470 --> 00:01:52,680
But the relationship between a key and its contents does matter.

27
00:01:52,700 --> 00:01:59,420
So a good occasion to use a dictionary is when you want to store values that you can access without

28
00:01:59,420 --> 00:02:01,610
knowing the exact location.

29
00:02:01,790 --> 00:02:05,180
But the relation with another concept.

30
00:02:05,750 --> 00:02:12,890
For example, when you want to store the characteristics of a person which you can then access by consulting

31
00:02:12,890 --> 00:02:18,730
their weight, size name regardless of the order they are stored in.

32
00:02:18,740 --> 00:02:22,340
In order to better understand this, let's see it in action.

33
00:02:22,730 --> 00:02:26,690
And we put ourselves in action right now to see these dictionaries in Python.

34
00:02:27,170 --> 00:02:29,440
We're going to begin declaring our variable.

35
00:02:29,450 --> 00:02:33,380
As always, that is the one that is going to contain our dictionary.

36
00:02:33,860 --> 00:02:36,670
Our variable is going to be called my dictionary.

37
00:02:36,680 --> 00:02:40,700
And remember, the dictionaries are written between braces.

38
00:02:41,300 --> 00:02:45,170
And what we do here is to declare first a key and then a value.

39
00:02:45,590 --> 00:02:48,350
For the first key, I'm going to say see one.

40
00:02:48,560 --> 00:02:52,100
Now, as I've chosen a string name, I have to put it in quotes.

41
00:02:52,250 --> 00:02:54,980
Then a colon to associate it to a value.

42
00:02:54,980 --> 00:02:58,070
And in this case, let's keep it simple with value one.

43
00:02:58,190 --> 00:03:02,030
And I also want to put this in quotes, because it is a string value.

44
00:03:03,350 --> 00:03:08,240
This is the first element of my dictionary, and this could be a complete dictionary.

45
00:03:08,240 --> 00:03:09,830
But let's add another one.

46
00:03:09,950 --> 00:03:15,110
We're going to add another key this time called See two, and we're going to associate this with an

47
00:03:15,110 --> 00:03:16,610
element called value one.

48
00:03:16,940 --> 00:03:18,830
So this is my first dictionary.

49
00:03:18,980 --> 00:03:22,460
Now let's print out the data type that corresponds to my dictionary.

50
00:03:22,910 --> 00:03:25,580
We're going to go up to run and run again.

51
00:03:25,880 --> 00:03:32,780
We choose the file dictionaries and it tells me that this dictionary element is a data type dict, which

52
00:03:32,780 --> 00:03:34,580
remember is short for dictionary.

53
00:03:34,580 --> 00:03:39,740
So, all right, we have a dictionary, but now we're going to print it out to see its contents, not

54
00:03:39,740 --> 00:03:40,460
its type.

55
00:03:41,000 --> 00:03:46,220
So we delete type and we run it again and we see all its contents.

56
00:03:46,550 --> 00:03:52,310
We see between braces there has c one with value, value one and C two with value one.

57
00:03:52,940 --> 00:03:53,810
I repeated it.

58
00:03:54,170 --> 00:03:56,240
I wanted this to be value to.

59
00:03:57,330 --> 00:04:01,920
By the way, I take this opportunity to show you that although the keys can not be repeated, they have

60
00:04:01,920 --> 00:04:02,790
to be unique.

61
00:04:02,820 --> 00:04:04,740
Otherwise it would be complicated.

62
00:04:04,740 --> 00:04:09,780
And when you want to find a key that is written twice, the values can be repeated as you just saw.

63
00:04:10,050 --> 00:04:14,910
The values can be all the same if you want, or they can be two or three that are the same.

64
00:04:14,910 --> 00:04:16,140
That is indistinct.

65
00:04:16,170 --> 00:04:18,480
The keys are the ones that can't be repeated.

66
00:04:18,720 --> 00:04:20,100
All right, let's move on.

67
00:04:20,370 --> 00:04:23,940
Now, let's see how we can query what's in one of those keys.

68
00:04:24,570 --> 00:04:27,750
Let's suppose that I need to fetch the contents of key one.

69
00:04:28,020 --> 00:04:33,930
In that case, let's create a variable called the result to store our dictionary for only whatever there

70
00:04:33,930 --> 00:04:35,070
is in C one.

71
00:04:35,760 --> 00:04:38,300
I'm no longer invoking an index number here.

72
00:04:38,310 --> 00:04:39,630
I'm invoking a key.

73
00:04:40,260 --> 00:04:47,580
And what this brings me, if I now print result is value one, which is the content of C one.

74
00:04:48,780 --> 00:04:53,730
If I had searched here for the contents of C two, what I get is value two.

75
00:04:54,330 --> 00:04:56,070
And that's how you do your searches.

76
00:04:56,100 --> 00:04:59,010
Now let's focus on some kind of real life case.

77
00:04:59,370 --> 00:05:05,460
Suppose I have a variable called customer and I want to store it in a dictionary with all the characteristics

78
00:05:05,460 --> 00:05:08,220
or categories that I have about this customer.

79
00:05:08,460 --> 00:05:14,640
Then a key could be a name, and a name is going to be associated to a value that can be John.

80
00:05:15,380 --> 00:05:22,070
We're going to have a second element that can be last name, but well written, that is and we are going

81
00:05:22,070 --> 00:05:24,110
to associate this to last name.

82
00:05:24,470 --> 00:05:29,180
John can be Lennon and we're going to give it more categories.

83
00:05:29,420 --> 00:05:31,520
We're also going to give it a weight.

84
00:05:31,850 --> 00:05:37,970
And a weight can easily be a value of or type of integer because dictionaries can have all kinds of

85
00:05:37,970 --> 00:05:38,610
data.

86
00:05:38,630 --> 00:05:40,700
So we're going to give it an integer.

87
00:05:41,060 --> 00:05:43,580
And here we don't need quotation marks.

88
00:05:43,640 --> 00:05:47,600
We're going to add one more value and we're going to put height here.

89
00:05:47,900 --> 00:05:50,660
This is allows us to incorporate a float value.

90
00:05:50,930 --> 00:05:54,280
Let's say 1.76 OC.

91
00:05:54,410 --> 00:05:58,040
Here we have a dictionary called customer and now I want to make a query.

92
00:05:58,460 --> 00:06:02,960
Let's make a variable called query, which contains a value that I want to look up.

93
00:06:03,580 --> 00:06:05,920
So I want to know the last name of my customer.

94
00:06:06,400 --> 00:06:10,900
So what I put here is customer in the location of whatever it is in the key.

95
00:06:10,900 --> 00:06:11,680
Last name.

96
00:06:12,850 --> 00:06:14,890
And then that's what I'm going to print.

97
00:06:15,100 --> 00:06:16,660
I'm going to print query.

98
00:06:17,170 --> 00:06:18,160
Let's look at it.

99
00:06:18,730 --> 00:06:19,850
Here we have Lenin.

100
00:06:19,870 --> 00:06:20,770
Perfect.

101
00:06:20,890 --> 00:06:23,030
When I ask the query, whatever is in the key.

102
00:06:23,050 --> 00:06:24,940
Last name I received Lenin.

103
00:06:25,210 --> 00:06:31,360
And if I'd asked to tell me whatever it is in the height key, I would have received 1.76, which is

104
00:06:31,360 --> 00:06:32,380
my client's height.

105
00:06:32,920 --> 00:06:38,950
Well, as you can see, dictionaries contain different types of data, not only in their keys, but

106
00:06:38,950 --> 00:06:40,180
also in their values.

107
00:06:40,600 --> 00:06:47,560
And they cannot be integral strings or float, but also all the data types that we have learned and

108
00:06:47,560 --> 00:06:48,820
that we have yet to learn.

109
00:06:49,000 --> 00:06:53,770
A dictionary can contain lists or it can contain dictionaries inside the dictionary.

110
00:06:54,740 --> 00:06:56,380
Let's create a new dictionary.

111
00:06:56,390 --> 00:07:01,010
We're going to call it Dick, and we're going to put a little bit of everything in it.

112
00:07:01,490 --> 00:07:06,170
The first Q will be one, and it will contain the integer 55.

113
00:07:07,310 --> 00:07:08,840
Then we're going to put a list.

114
00:07:09,230 --> 00:07:15,890
The key two is going to be equal to a list that has the numbers ten, 20 and 30 in it and it supports

115
00:07:15,890 --> 00:07:16,250
it.

116
00:07:16,490 --> 00:07:17,540
There's nothing wrong.

117
00:07:18,320 --> 00:07:20,450
Comma to come up with a third value.

118
00:07:21,210 --> 00:07:23,580
There actually will be another group of elements.

119
00:07:23,940 --> 00:07:25,350
It will have the key three.

120
00:07:25,350 --> 00:07:27,330
And we're going to write a dictionary here.

121
00:07:27,940 --> 00:07:29,590
So we make the dictionary keys.

122
00:07:29,590 --> 00:07:36,760
That is one that has the value 100 and a key as to that has the value of 200.

123
00:07:37,090 --> 00:07:42,490
And this dictionary is the value of the third key, which is a dictionary with two values in it.

124
00:07:42,520 --> 00:07:43,570
That's perfect.

125
00:07:43,780 --> 00:07:44,470
What a mess.

126
00:07:44,470 --> 00:07:47,200
When we want to query this, let's see how it would work.

127
00:07:48,040 --> 00:07:52,780
If I want to print my dictionary, but only what's in the key to which is a list.

128
00:07:52,780 --> 00:07:54,010
Key to is a list.

129
00:07:54,920 --> 00:07:57,470
Well, if we print it, we get the list.

130
00:07:58,040 --> 00:08:01,880
And let's suppose I want to query only what's in index one of this list.

131
00:08:02,240 --> 00:08:07,910
Then I have to add after I close the braces of the key, another bracket in which I'm going to put index

132
00:08:07,910 --> 00:08:10,970
one, which is the one I'm interested in searching.

133
00:08:10,970 --> 00:08:17,360
So here I'm saying please python print whatever it is in the dictionary in its key to and within that

134
00:08:17,360 --> 00:08:24,980
key to whatever is in an index one because I know it's a list, so if I print it, I only get 20.

135
00:08:25,130 --> 00:08:27,680
So my searches can be very specific.

136
00:08:29,070 --> 00:08:33,460
And now I want to search for what is in key three, which is a dictionary.

137
00:08:33,480 --> 00:08:34,860
Let's delete this key.

138
00:08:35,190 --> 00:08:41,430
We're going to obtain the dictionary that is inside my dictionary, which is this one that has two keys.

139
00:08:42,250 --> 00:08:46,060
And if I want to look for what is in the key as to then I add a bracket.

140
00:08:46,100 --> 00:08:49,300
I put S-2 here and I print it and have 200.

141
00:08:49,510 --> 00:08:53,320
That is, I can look up what is in the dictionary within any of the dictionary.

142
00:08:53,470 --> 00:08:55,960
Well, this would allow us to do an exercise.

143
00:08:56,620 --> 00:09:00,550
Here I have this dictionary prepared so you don't have to waste time watching me type.

144
00:09:01,360 --> 00:09:02,890
We're going to paste it in here.

145
00:09:03,160 --> 00:09:09,460
We have a dictionary that has a key one, which is a list A, B, C and a second key, which is key

146
00:09:09,460 --> 00:09:12,490
too, which has another list D, e, f.

147
00:09:12,850 --> 00:09:17,890
What I'm going to ask you now is that you try to make in a single line of code a command that allows

148
00:09:17,890 --> 00:09:22,150
the letter E to be printed on the screen but capitalized.

149
00:09:22,270 --> 00:09:26,320
So take your time, pause the video if you need to, and try to do it.

150
00:09:26,530 --> 00:09:27,850
If not, don't worry.

151
00:09:27,850 --> 00:09:28,870
We'll do it together.

152
00:09:30,410 --> 00:09:33,170
Well, if you're able to do it, congratulations.

153
00:09:33,170 --> 00:09:34,450
And if not, don't worry.

154
00:09:34,460 --> 00:09:37,550
Things can get messed up easily when you're learning something new.

155
00:09:37,550 --> 00:09:39,350
And we're going to do it together now.

156
00:09:39,740 --> 00:09:43,100
We're going to do it in steps so we can think it through easily.

157
00:09:43,430 --> 00:09:46,750
First, we're going to print our dictionary directly through the key.

158
00:09:46,760 --> 00:09:48,230
That's the one with the E.

159
00:09:48,710 --> 00:09:50,090
We said it's key, too.

160
00:09:50,390 --> 00:09:52,280
So we're going to print out key to.

161
00:09:53,140 --> 00:09:53,320
Okay.

162
00:09:53,440 --> 00:09:54,690
Let's go through the steps.

163
00:09:54,700 --> 00:09:57,640
So now we already have the list that contains the E.

164
00:09:58,430 --> 00:10:00,080
Now I want to print E.

165
00:10:00,110 --> 00:10:05,450
So I add a bracket that looks for the index that corresponds to E, which in this case is one because

166
00:10:05,450 --> 00:10:09,110
D is zero and E is one within this list.

167
00:10:09,440 --> 00:10:10,860
So we put one here.

168
00:10:10,880 --> 00:10:15,550
If we print it now, we get the E, and now I want it to be capitalized.

169
00:10:15,560 --> 00:10:18,710
Well, this is the part that may have cost you a little bit.

170
00:10:19,010 --> 00:10:21,260
Remember that the E is in a string.

171
00:10:21,260 --> 00:10:24,260
So we have a method to make a string become uppercase.

172
00:10:24,650 --> 00:10:30,440
So once we've built this whole statement, then we put the dot because we have a string and here comes

173
00:10:30,440 --> 00:10:31,520
the string methods.

174
00:10:32,240 --> 00:10:34,220
And what is the method that we use?

175
00:10:34,280 --> 00:10:35,660
Well, it's upper.

176
00:10:36,260 --> 00:10:38,810
Remember, it has to go with its own parenthesis.

177
00:10:38,930 --> 00:10:41,830
And if we run it here it is our uppercase.

178
00:10:42,140 --> 00:10:46,190
It was easy, but of course, knowing how to do it is what may cost you a little bit.

179
00:10:46,580 --> 00:10:52,610
If I wanted to print the uppercase A well, I would just choose key one and within key one, index zero.

180
00:10:52,940 --> 00:10:54,580
And then I print it here.

181
00:10:54,590 --> 00:10:56,420
I have my capital A here.

182
00:10:56,900 --> 00:10:58,670
Well, let's learn a few more things.

183
00:10:58,700 --> 00:11:03,080
I want you to learn how to add items to a dictionary that's already been created.

184
00:11:03,110 --> 00:11:06,980
So let's create a dictionary, and we're going to fill it with something simple.

185
00:11:07,460 --> 00:11:10,640
A key one with value A and then a key with value B.

186
00:11:11,430 --> 00:11:11,670
Okay.

187
00:11:11,780 --> 00:11:14,240
So we have a dictionary here with two elements.

188
00:11:14,690 --> 00:11:17,810
We're going to print it out and we have our two elements.

189
00:11:18,810 --> 00:11:21,480
Now I want to add key three that has a value of C.

190
00:11:21,840 --> 00:11:23,520
I simply invoke dictionary.

191
00:11:23,520 --> 00:11:28,260
I invoke here a key that doesn't really exist, but I create it at this moment.

192
00:11:28,590 --> 00:11:29,640
It's going to be three.

193
00:11:29,640 --> 00:11:35,790
And since it doesn't exist, what I put here in equals is what's going to be added as a value and what

194
00:11:35,790 --> 00:11:36,780
it's value to be.

195
00:11:36,780 --> 00:11:37,460
C.

196
00:11:37,470 --> 00:11:41,640
So now I go back to print to our dictionary and we are going to obtain that.

197
00:11:41,640 --> 00:11:45,240
Now we have one A to B and three C.

198
00:11:45,900 --> 00:11:49,800
A dictionary has been able to be modified in situ that is in place.

199
00:11:49,800 --> 00:11:56,190
We've not had to create a new variable to contain our modified dictionary, but the disk itself is now

200
00:11:56,190 --> 00:11:57,750
the one that has its modification.

201
00:11:58,410 --> 00:12:01,380
This like lists means that it is possible to modify them.

202
00:12:01,530 --> 00:12:06,180
Unlike strings, I can also overwrite a value that already exists.

203
00:12:06,600 --> 00:12:09,630
Suppose I now want my letter B to be uppercase.

204
00:12:10,290 --> 00:12:13,530
Well, the way to overwrite it is to invoke a key within the dictionary.

205
00:12:13,530 --> 00:12:15,930
In this case, the key of B, which is to.

206
00:12:16,740 --> 00:12:23,010
And what I do here is to assign it to a new value, which would be in this case, be as this key to

207
00:12:23,010 --> 00:12:23,770
already exists.

208
00:12:23,770 --> 00:12:28,170
This is not going to create a new key inside my dictionary, but it's going to overwrite the one that

209
00:12:28,170 --> 00:12:29,250
already exists.

210
00:12:29,250 --> 00:12:33,810
So we're going to create a print to be able to see this third instance of my dictionary.

211
00:12:34,380 --> 00:12:41,370
We run it and we have here one A to B and three C, that's the way to override.

212
00:12:41,460 --> 00:12:44,760
So a couple of other dictionary methods you might be interested in learning.

213
00:12:45,090 --> 00:12:48,450
Suppose you want to know all the keys that are in a certain dictionary?

214
00:12:48,960 --> 00:12:50,940
Well, let's print out our odyssey.

215
00:12:51,450 --> 00:12:54,330
Let's press Dot to bring up its methods.

216
00:12:54,870 --> 00:12:59,910
And the keys method is the one that is going to bring us all the keys that it has if we print it.

217
00:12:59,910 --> 00:13:03,570
We see here that dict keys is one, two and three.

218
00:13:04,050 --> 00:13:06,690
It did not bring us the values, only the keys.

219
00:13:07,280 --> 00:13:09,830
So if I wanted to know the values, then I print the.

220
00:13:09,830 --> 00:13:11,600
I see values.

221
00:13:12,560 --> 00:13:16,790
So here we get them ticked values A, capital B and C.

222
00:13:16,820 --> 00:13:19,190
These are the actual values in my dictionary.

223
00:13:19,470 --> 00:13:25,370
Now, if I want to know everything that is in a dictionary, then print thick dot items and this is

224
00:13:25,370 --> 00:13:27,200
going to bring everything that is here.

225
00:13:27,650 --> 00:13:33,920
Then dict items is in parentheses, one A in parentheses to B and in parentheses.

226
00:13:33,920 --> 00:13:34,760
Three C.

227
00:13:35,690 --> 00:13:40,760
The fact that they are in parenthesis gives us a guideline that what is inside the dictionaries is something

228
00:13:40,760 --> 00:13:42,500
that is called tuples.

229
00:13:42,920 --> 00:13:47,600
And tuples is what we are going to learn in the next lecture, or I'll wait for you after you've done

230
00:13:47,600 --> 00:13:49,760
the practical exercises that come next.

231
00:13:49,760 --> 00:13:51,320
So let's go to the next lecture.
