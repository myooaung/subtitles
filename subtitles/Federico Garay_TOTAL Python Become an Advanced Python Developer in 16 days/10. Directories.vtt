WEBVTT
1
00:00:08.030 --> 00:00:11.570
You already know how to open right and close files.

2
00:00:11.570 --> 00:00:18.410
But so far you have only worked with documents that are in the same location as the Python file you

3
00:00:18.410 --> 00:00:19.190
are working with.

4
00:00:19.220 --> 00:00:25.730
This means that if you don't specify any path when you open a file, as we have done so far, Python

5
00:00:25.730 --> 00:00:31.340
by default will look for your file in the same location where the program is currently running.

6
00:00:31.370 --> 00:00:32.970
The way to do this is simple.

7
00:00:32.990 --> 00:00:39.310
Instead of typing just the name and extension of your file, you type its entire path.

8
00:00:39.320 --> 00:00:41.310
But this presents two problems.

9
00:00:41.330 --> 00:00:48.500
The first problem is that if you work with windows, navigation in subdirectories is done with the backslash.

10
00:00:48.500 --> 00:00:55.490
But if you remember our lecture about strings, when you put a backslash inside a string, Python interprets

11
00:00:55.490 --> 00:00:57.200
it as a special character.

12
00:00:57.230 --> 00:01:00.680
For example, writing a line break or things like that.

13
00:01:00.680 --> 00:01:06.710
And the only way for it to read it literally as a backslash is to write it in duplicate.

14
00:01:06.710 --> 00:01:08.840
So you have to do that manually.

15
00:01:09.200 --> 00:01:15.680
And the second problem is that the directory separators are different on different systems, backslash

16
00:01:15.680 --> 00:01:19.940
on windows, but regular backslash on Unix and Mac.

17
00:01:20.090 --> 00:01:27.020
We are going to solve this with an object called PATH, which we are going to have to import from the

18
00:01:27.020 --> 00:01:29.960
Path Lib module in order to use it.

19
00:01:30.410 --> 00:01:36.350
And since we are importing modules, we are also going to meet the OS module which stands for operating

20
00:01:36.350 --> 00:01:37.130
system.

21
00:01:37.400 --> 00:01:43.130
This module offers us all the tools to interact with the directory of the computer.

22
00:01:43.160 --> 00:01:48.560
It has several methods and we're going to use them to master the navigation of our directories.

23
00:01:48.590 --> 00:01:52.280
Let's go over to Pie Charm to know how to use the most important ones.

24
00:01:52.610 --> 00:02:00.410
Let's start by remembering that I've stored our code in this PC in desktop python on the day six.

25
00:02:00.650 --> 00:02:02.570
Here you can see all the files.

26
00:02:03.020 --> 00:02:08.180
Some files contain code and others are text files we worked with during the last lecture.

27
00:02:08.660 --> 00:02:14.900
So now that we remembered this, let's go back to py charm and import the OS module by writing import

28
00:02:14.900 --> 00:02:15.470
OS.

29
00:02:15.980 --> 00:02:18.380
Here we have it along with all its methods.

30
00:02:18.620 --> 00:02:20.660
So now we can start doing the following.

31
00:02:20.990 --> 00:02:23.210
We'll create a variable named path.

32
00:02:23.330 --> 00:02:25.220
And what data will I store there?

33
00:02:25.460 --> 00:02:28.570
I'll store the OS module using the function.

34
00:02:28.580 --> 00:02:32.420
Get C, D, and here we have it.

35
00:02:32.450 --> 00:02:35.930
That name means get current working directory.

36
00:02:36.870 --> 00:02:39.120
So what is path storing?

37
00:02:40.020 --> 00:02:40.950
Let's find out.

38
00:02:40.950 --> 00:02:47.490
With print there will show path and let's execute to see what is displayed in the console.

39
00:02:47.940 --> 00:02:54.480
Here we have the current directory path in which I'm working with the one I showed you a couple of seconds

40
00:02:54.480 --> 00:02:54.930
ago.

41
00:02:55.810 --> 00:02:59.080
Here we have desktop python and basics.

42
00:02:59.590 --> 00:03:02.890
So OS has plenty of useful methods really.

43
00:03:03.220 --> 00:03:08.950
We will analyse some of them such as c hdr, which means change directory.

44
00:03:09.220 --> 00:03:14.620
With this method we can create a different path directory which we need to do in order to open files

45
00:03:14.620 --> 00:03:16.390
located in other folders.

46
00:03:17.080 --> 00:03:18.640
So we'll enter a different path.

47
00:03:18.640 --> 00:03:20.710
And I've created a new folder for this.

48
00:03:21.040 --> 00:03:22.930
It's located in my desktop.

49
00:03:23.350 --> 00:03:27.280
It's called Alternate Folder and it contains another file.

50
00:03:27.400 --> 00:03:30.790
So I'll copy this path to see if we're able to open this file.

51
00:03:31.660 --> 00:03:34.300
So now back in Python, we copy that here.

52
00:03:34.660 --> 00:03:37.900
So first of all, remember that we have to write it as a string.

53
00:03:37.900 --> 00:03:43.330
And in the case of Windows, which is the operating system I work with, we also need to always add

54
00:03:43.330 --> 00:03:44.680
a double backslash.

55
00:03:45.040 --> 00:03:48.670
We'll soon see how we can work if we have another operating system.

56
00:03:49.550 --> 00:03:55.640
If we execute this and see the new path will have a non object because we're not obtaining the current

57
00:03:55.640 --> 00:03:57.680
path but only modifying it.

58
00:03:57.890 --> 00:04:00.990
This object has nothing to show us but the path.

59
00:04:00.990 --> 00:04:07.130
The variable is now storing a different path and we'll verify that by opening a different file.

60
00:04:07.460 --> 00:04:13.130
If that's our new current path, will then create another version of file in which we'll type open.

61
00:04:13.130 --> 00:04:19.220
And here we'll enter another file dot text, which is the one we weren't able to open because we couldn't

62
00:04:19.220 --> 00:04:21.230
get out of our current directory.

63
00:04:21.230 --> 00:04:29.780
So let's print file and we'll now get a file named another file text and read only mode, it's encoding,

64
00:04:29.780 --> 00:04:30.530
etc..

65
00:04:31.490 --> 00:04:36.920
So the important part here is that we've been able to access this file and we could read it if we wanted

66
00:04:36.920 --> 00:04:44.780
to by typing file, dot read here and executing it again and here we're told that the file is located

67
00:04:44.780 --> 00:04:46.040
in a different folder.

68
00:04:46.370 --> 00:04:48.170
That's what's inside the file.

69
00:04:48.590 --> 00:04:55.370
This is how we can change directories with C HDR, which is an OHS function that allows us to access

70
00:04:55.370 --> 00:04:56.540
any folder we want.

71
00:04:56.810 --> 00:05:00.140
Not only can we access different folders, but we can also create them.

72
00:05:00.140 --> 00:05:05.060
Instead of using the c hdr here I can use another function.

73
00:05:05.060 --> 00:05:12.680
Let's type a dot and it's called make d iris with which we can create directories and set paths where

74
00:05:12.680 --> 00:05:14.660
we can create new folders.

75
00:05:14.660 --> 00:05:19.280
Suppose that I create a new folder inside alternate which is called another.

76
00:05:19.730 --> 00:05:25.460
Just like that I can execute it and I'll get an error message because I'm reading a file that is not

77
00:05:25.460 --> 00:05:26.600
located there.

78
00:05:27.050 --> 00:05:34.340
The interesting part is if I go inside alternate or see a new folder called another that I've created

79
00:05:34.340 --> 00:05:35.810
directly from Python.

80
00:05:36.230 --> 00:05:37.190
Are you following me?

81
00:05:38.050 --> 00:05:40.300
A path can basically have two elements.

82
00:05:40.330 --> 00:05:41.950
It's based name, which is all the way.

83
00:05:41.950 --> 00:05:47.050
You have to go through it to get to the folder containing your file and the file name.

84
00:05:47.500 --> 00:05:51.220
If you complete this with the name of a file, you'll have a full path.

85
00:05:51.400 --> 00:05:57.190
If we have a path formed by two elements, we can also use some OS functions to obtain both elements

86
00:05:57.190 --> 00:05:57.970
separately.

87
00:05:58.240 --> 00:06:05.530
These functions are base name and the I.R. name, and we'll try them like this again.

88
00:06:05.530 --> 00:06:08.560
We'll copy this path where we have the test file.

89
00:06:09.400 --> 00:06:15.220
We'll directly paste it in path type quotation marks, add backslash, and soon we'll figure out how

90
00:06:15.220 --> 00:06:17.410
we can work with backslash or forward slash.

91
00:06:17.770 --> 00:06:22.180
And we'll also need to read to the name of the file which is test dot text.

92
00:06:23.030 --> 00:06:29.060
So we'll delete this so as to see how we can obtain on one hand the first part of the path and then

93
00:06:29.060 --> 00:06:31.250
the second part, which is the name of the file.

94
00:06:31.460 --> 00:06:38.750
So let's create a variable named element which will store OS dot path, dot base name, and let's ask

95
00:06:38.750 --> 00:06:41.840
for the base name of our path, which is a full path.

96
00:06:42.620 --> 00:06:44.930
So if we execute this and show element.

97
00:06:46.490 --> 00:06:50.270
We obtained test text, which is the base name of our element.

98
00:06:50.420 --> 00:06:55.340
But instead of looking for the name of the file, we want to obtain the first element in our path,

99
00:06:55.430 --> 00:06:58.190
which is all this up to the DE six.

100
00:06:58.400 --> 00:07:04.970
So we'll type their name instead of base name, which will execute it and will obtain the first part

101
00:07:04.970 --> 00:07:05.720
of our path.

102
00:07:06.810 --> 00:07:12.570
In case you want to obtain both elements contained separately in a tuple, you could use the split function

103
00:07:12.570 --> 00:07:15.390
which we already worked with when analyzing strings.

104
00:07:15.840 --> 00:07:21.990
Split will provide us with a tuple containing the name of the path or directory and the base name.

105
00:07:22.880 --> 00:07:26.540
These are some ways to achieve this so we can also delete folders.

106
00:07:26.720 --> 00:07:30.740
Suppose that I want to delete the folder another and I've created inside alternate.

107
00:07:31.100 --> 00:07:32.330
I'll copy this path.

108
00:07:33.350 --> 00:07:39.680
We don't need to print anything now, so let's delete everything and call os and it's rmd eir function

109
00:07:39.680 --> 00:07:43.250
which means remove directory and we'll paste the path here.

110
00:07:43.250 --> 00:07:48.980
Add quotation marks, double backslash so it can be read properly and we'll say we want to delete the

111
00:07:48.980 --> 00:07:50.390
folder called another.

112
00:07:51.270 --> 00:07:55.230
So when I execute this, it won't display anything since there's nothing to show.

113
00:07:55.500 --> 00:07:59.970
But if we go to the alternate, we'll see that my folder doesn't exist anymore.

114
00:08:00.750 --> 00:08:05.010
OS has a wide variety of functions, so I advise you to give them a go.

115
00:08:05.430 --> 00:08:10.380
There's much more to learn, but remember some concepts before learning how to write paths.

116
00:08:10.520 --> 00:08:13.170
They're available for any operating system.

117
00:08:13.830 --> 00:08:19.440
We'll remember how to open a file accessing a different path, but without using OS like we did in the

118
00:08:19.440 --> 00:08:20.340
first lecture.

119
00:08:20.940 --> 00:08:26.760
But first, we're going to create a variable named another file, which is identical to a path that's

120
00:08:26.760 --> 00:08:28.170
different to the one we have.

121
00:08:28.470 --> 00:08:34.530
Remember that if I search for test text without adding anything else, but quotation marks of course

122
00:08:34.530 --> 00:08:38.490
will only be able to open it if it is located in my directory.

123
00:08:39.130 --> 00:08:41.410
So if I go to alternate, copy this.

124
00:08:41.410 --> 00:08:46.540
And now without O's I type my directory and the name of the file we're looking for, which is another

125
00:08:46.540 --> 00:08:47.020
file.

126
00:08:47.260 --> 00:08:54.280
Text between quotation marks, then add brackets that put it inside open and then I enter print and

127
00:08:54.280 --> 00:08:55.980
another file read.

128
00:08:55.990 --> 00:09:01.660
And finally I execute it and we'll see that we don't get the contents of another file through a different

129
00:09:01.660 --> 00:09:02.230
folder.

130
00:09:03.090 --> 00:09:08.310
Now let's see how we can create paths that are recognized properly by other operating systems.

131
00:09:08.310 --> 00:09:13.740
Because if we type paths this way in operating systems like Mac or Linux, we'll get errors since they

132
00:09:13.740 --> 00:09:15.480
won't be able to recognize those paths.

133
00:09:15.840 --> 00:09:18.870
So we're going to use a different module, which is PATH.

134
00:09:20.040 --> 00:09:23.420
Let's import from path lib this object called PATH.

135
00:09:23.430 --> 00:09:28.350
As you can see, I've typed path in uppercase because it's neither a module nor a function.

136
00:09:28.380 --> 00:09:29.790
Path is an object.

137
00:09:30.000 --> 00:09:34.440
But don't worry, we'll soon explain what objects are since they're very important.

138
00:09:34.740 --> 00:09:37.860
For now, I'm just highlighting why it is in uppercase.

139
00:09:38.930 --> 00:09:43.670
What happens here is that we've obtained a group of elements from path lib and they're going to help

140
00:09:43.670 --> 00:09:44.750
us solve a problem.

141
00:09:44.960 --> 00:09:46.370
So I'll show you how.

142
00:09:47.390 --> 00:09:53.180
Let's create a variable called folder in which will store path and the directory.

143
00:09:53.690 --> 00:09:59.600
We'll copy this once again and in order to change something and now we'll enter forward slashes the

144
00:09:59.600 --> 00:10:00.500
regular ones.

145
00:10:01.040 --> 00:10:04.400
This is how operating systems like Mac and Linux can read.

146
00:10:04.670 --> 00:10:07.040
So let's add quotation marks as well.

147
00:10:07.280 --> 00:10:08.570
And we have a path.

148
00:10:09.410 --> 00:10:14.450
So now I'll type the name of the file I want to import and I'll create the path to access that file

149
00:10:14.450 --> 00:10:21.770
by concatenating folder, which is the first part, the path inside path, and we'll incorporate this

150
00:10:21.770 --> 00:10:23.300
using a forward slash.

151
00:10:23.330 --> 00:10:26.270
This is a different concatenation to the ones we've seen.

152
00:10:26.690 --> 00:10:29.510
It's a concatenation we use to create paths.

153
00:10:29.690 --> 00:10:33.590
Basically, we're adding a slash here at the end of alternate.

154
00:10:34.640 --> 00:10:39.410
What follows is the name of the file, which is another file dot text.

155
00:10:39.980 --> 00:10:44.630
Of course it has to be between quotation marks in order to be concatenated properly.

156
00:10:44.870 --> 00:10:47.420
Now I have my full path with both elements.

157
00:10:47.570 --> 00:10:53.270
However, since the first element is in path, I'm allowing any system to recognize it Windows, Mac,

158
00:10:53.270 --> 00:10:54.050
or whatever.

159
00:10:54.890 --> 00:11:00.230
In order to demonstrate this will create a variable named my file and it's going to be equal to open

160
00:11:00.230 --> 00:11:02.380
file like we did before.

161
00:11:02.390 --> 00:11:05.030
But file was created in a different way.

162
00:11:05.330 --> 00:11:08.480
So now we'll print it to verify it through my file.

163
00:11:08.720 --> 00:11:09.290
Read.

164
00:11:09.710 --> 00:11:11.090
So let's see what happened.

165
00:11:11.870 --> 00:11:14.870
I didn't get an error and I could open it just fine.

166
00:11:15.140 --> 00:11:20.060
So I'm working with Windows, so I've been able to open a path identical to the ones from Mac.

167
00:11:20.390 --> 00:11:22.970
If I did this using a mac, the same would happen.

168
00:11:23.330 --> 00:11:25.610
I could read it without any problems.

169
00:11:25.700 --> 00:11:31.700
So this allows other users to open files with the same code every time you export, sell, share, or

170
00:11:31.700 --> 00:11:33.820
whatever it is you do with your programs.

171
00:11:34.910 --> 00:11:41.870
Even if you delete the C and colon which we use in windows and you leave the Mac mode like that, it

172
00:11:41.870 --> 00:11:42.890
will also work.

173
00:11:43.430 --> 00:11:48.200
So if I'd done this without the path object in Windows, I'd have gotten an error.

174
00:11:48.440 --> 00:11:55.130
So one way of simplifying this, but making it less readable is to directly type everything inside folder.

175
00:11:55.370 --> 00:12:01.400
So let's delete this previous stuff and here we can enter the folder, the slash, the name of the file,

176
00:12:01.400 --> 00:12:06.470
and instead of opening file, which I deleted, I can open folder and execute it.

177
00:12:07.770 --> 00:12:08.920
So it still works.

178
00:12:08.940 --> 00:12:12.840
It's a bit less readable, but we can save ourselves a line of code.

179
00:12:13.380 --> 00:12:16.260
To sum up, we're learning something about path lib.

180
00:12:16.680 --> 00:12:20.670
It is a module that was added to the 3.4 version of Python.

181
00:12:20.760 --> 00:12:23.700
If this was everything Path Live did, it'd be quite useful.

182
00:12:23.700 --> 00:12:26.130
But actually it does much more than that.

183
00:12:26.340 --> 00:12:30.870
Path Lib can do most of everything I've taught you in a more efficient way.

184
00:12:31.380 --> 00:12:35.700
So in the next lecture, we'll dig deeply into the tools of path lib.
