WEBVTT
1
00:00:07.850 --> 00:00:09.770
It is never easy to do something.

2
00:00:09.770 --> 00:00:12.040
You have just learned for the very first time.

3
00:00:12.050 --> 00:00:17.030
If you haven't tried it, I'm going to recommend that you pause this video and give it your best shot

4
00:00:17.030 --> 00:00:18.410
before continuing.

5
00:00:18.860 --> 00:00:21.950
If you manage to solve it, congratulations.

6
00:00:21.950 --> 00:00:25.700
And if you tried but you didn't manage to finish it, that's fine.

7
00:00:25.700 --> 00:00:26.630
Congratulations.

8
00:00:26.630 --> 00:00:30.410
Anyways, it's normal to not be able to do something on the first try.

9
00:00:30.560 --> 00:00:36.740
So let's go over to Pie Charm so that you can see our solution and say, But why didn't I think of that

10
00:00:36.740 --> 00:00:37.370
before?

11
00:00:37.700 --> 00:00:38.360
See you there.

12
00:00:38.990 --> 00:00:44.810
And to start creating the solution to our project, I have to create two classes because the instructions

13
00:00:44.810 --> 00:00:48.290
asked for two classes, one inheriting the other.

14
00:00:49.010 --> 00:00:55.100
So the first one is going to be person, which is going to be the base class or the parent class, which

15
00:00:55.100 --> 00:00:59.570
will contain some attributes that will be then transferred to the client.

16
00:01:00.080 --> 00:01:07.700
So we define it here with the init method self and make people have a first name and a last name.

17
00:01:08.480 --> 00:01:13.790
Then we enter it to make sure that the name of the person is always the same as the name that is passed

18
00:01:13.790 --> 00:01:19.640
when the object is instantiated and the same with the last name, which should be the same as the last

19
00:01:19.640 --> 00:01:21.020
name that is assigned.

20
00:01:21.020 --> 00:01:28.100
When instantiating the object, we have the class person and now we are going to create the class client

21
00:01:28.100 --> 00:01:33.560
which inherits from person, although it would not be necessary to do it this way for this program,

22
00:01:33.560 --> 00:01:36.290
the idea is that you can apply the inheritance.

23
00:01:36.290 --> 00:01:42.860
So we define here another method in it that allows us to add, in addition to what the previous one

24
00:01:42.860 --> 00:01:45.770
had, the account number and the balance.

25
00:01:46.550 --> 00:01:51.740
And remember that one way to do it, in order not to redefine everything that was done previously,

26
00:01:51.770 --> 00:01:59.450
is to add first name, last name, and the new attributes that are account, number and balance.

27
00:02:00.420 --> 00:02:05.580
Balance, actually, as all the accounts will start from zero, does not need to be an attribute that

28
00:02:05.580 --> 00:02:07.500
should be passed to the constructor.

29
00:02:07.920 --> 00:02:13.260
So here we're going to give it a value that is equal to zero because our accounts are always going to

30
00:02:13.260 --> 00:02:14.430
start empty.

31
00:02:15.630 --> 00:02:22.500
So as I don't want to redefine name and last name, I call super and create the init method with name

32
00:02:22.500 --> 00:02:27.180
and last name and they are now considered inherited from the previous one.

33
00:02:28.700 --> 00:02:34.790
We still have to make self account number be equal to the account number that we pass it to.

34
00:02:35.530 --> 00:02:41.350
And make self balance be equal to balance that we passed to it, which is passed with a value of zero.

35
00:02:42.460 --> 00:02:48.130
So we also have the attributes of the client class and we said that we're also going to add some methods

36
00:02:48.130 --> 00:02:49.120
to this class.

37
00:02:49.510 --> 00:02:56.380
First, a string method or STR that will allow us to show through this special method what our account

38
00:02:56.380 --> 00:02:59.350
contains when someone wants to print our client.

39
00:03:00.050 --> 00:03:02.690
Then we put to death Esther.

40
00:03:02.690 --> 00:03:04.430
And it brings us to self.

41
00:03:04.460 --> 00:03:06.460
It needs no other attributes.

42
00:03:06.470 --> 00:03:13.310
And here we add return, not a print, so as to get back a string literal that says something like client

43
00:03:13.310 --> 00:03:17.210
colon and the first and last name through self name.

44
00:03:17.330 --> 00:03:23.600
So we leave a space and type in self last name and we can do a line break to make for everything to

45
00:03:23.600 --> 00:03:24.950
be more organized.

46
00:03:25.100 --> 00:03:33.260
So here it says account balance and we include the account number with self dot account number colon

47
00:03:33.260 --> 00:03:40.370
equal to the currency sign and are called to whatever it is in the balance, which is going to be zero

48
00:03:40.370 --> 00:03:41.270
at the beginning.

49
00:03:42.770 --> 00:03:48.230
This is the STR method that is going to show this content to any method that asks our object client

50
00:03:48.230 --> 00:03:49.100
to be printed.

51
00:03:49.700 --> 00:03:56.450
So we also want to methods which are two very important methods, the deposit method and the withdrawal

52
00:03:56.450 --> 00:03:57.050
method.

53
00:03:57.890 --> 00:04:00.680
So we're going to create the first one as deposit.

54
00:04:00.860 --> 00:04:03.380
This method will ask self, of course.

55
00:04:03.380 --> 00:04:05.570
And the amount deposit.

56
00:04:06.900 --> 00:04:09.050
This is the amount to be deposited.

57
00:04:09.060 --> 00:04:12.570
Without this value, you would not be able to do any operations.

58
00:04:13.370 --> 00:04:20.240
So once this method has been called and passed and amount to deposit, we can say that self point balance.

59
00:04:20.240 --> 00:04:25.760
I mean the balance of this instance plus equals the amount passed as deposit.

60
00:04:27.070 --> 00:04:31.150
And we can print something that says deposit accepted.

61
00:04:32.050 --> 00:04:36.670
It is not necessary to put there the amount of the balance because the client will see it later when

62
00:04:36.670 --> 00:04:37.330
printed.

63
00:04:37.750 --> 00:04:41.770
So we will call this method to be able to show the result of each operation.

64
00:04:42.580 --> 00:04:49.750
And finally we need the withdrawal function that will have self and amount withdrawal so we can do almost

65
00:04:49.750 --> 00:04:50.680
the same thing.

66
00:04:50.950 --> 00:04:52.560
Self balance.

67
00:04:52.670 --> 00:04:53.620
Oh, no.

68
00:04:53.650 --> 00:04:54.940
Here we have a problem.

69
00:04:55.120 --> 00:04:57.140
We cannot withdraw at once.

70
00:04:57.160 --> 00:05:01.840
First, we have to check if the amount that the client wants to withdraw exists in the balance.

71
00:05:02.110 --> 00:05:06.070
Because if there is 100 left in the balance and the customer needs 500.

72
00:05:06.100 --> 00:05:08.360
Our banks should not let us do this.

73
00:05:08.380 --> 00:05:10.510
It would be a financial disaster.

74
00:05:11.260 --> 00:05:17.530
So we have to verify if self balance is higher than or equal to the amount that the customer wants to

75
00:05:17.530 --> 00:05:18.340
withdraw.

76
00:05:18.370 --> 00:05:25.510
Colon If that's so, we're going to say that self balance is now less equal to the withdrawal amount.

77
00:05:29.250 --> 00:05:30.690
That will modify our result.

78
00:05:30.690 --> 00:05:34.440
And we can make a printout that says something like withdrawal done.

79
00:05:34.590 --> 00:05:38.460
And in the case that this is not possible because the amount is not large enough.

80
00:05:38.490 --> 00:05:41.940
We put in else that prints to let the client know.

81
00:05:42.030 --> 00:05:43.710
Insufficient funds.

82
00:05:44.100 --> 00:05:47.250
That horrible phrase that you may have received at an ATM.

83
00:05:48.340 --> 00:05:55.000
Well, so far we have our classes and now we want to do is a function that is going to be separate from

84
00:05:55.000 --> 00:05:55.930
these classes.

85
00:05:56.230 --> 00:06:02.890
The function create client, which is the one we will call to instantiate a new client when executing

86
00:06:02.890 --> 00:06:06.220
the program, and it does not need to receive parameters.

87
00:06:06.580 --> 00:06:12.400
Here we create the three variables that we need to build our person with the customer constructor.

88
00:06:12.760 --> 00:06:20.500
Then we say first name c t for customer, which should be equal to an input entered by the user, which

89
00:06:20.500 --> 00:06:25.000
is enter your name, colon and space, then a last name.

90
00:06:25.030 --> 00:06:27.640
C t that has to be equal to the input.

91
00:06:27.640 --> 00:06:30.880
Enter your last name, colon and space.

92
00:06:31.950 --> 00:06:38.070
So we still require an account number which can be equal to an input that asks the customer to enter

93
00:06:38.070 --> 00:06:40.590
your account number, colon and space.

94
00:06:43.090 --> 00:06:44.530
So we have three values.

95
00:06:44.530 --> 00:06:49.240
We need to create a customer because these are the three elements it asks for up here.

96
00:06:49.720 --> 00:06:55.600
We don't need to enter the balance because it is already defined as zero, and now we're going to create

97
00:06:55.600 --> 00:07:02.620
a variable which can be client one and my client or whatever you want that will be equal to an instance

98
00:07:02.620 --> 00:07:05.620
of client and the three values that it asks here.

99
00:07:05.650 --> 00:07:06.910
That's our name.

100
00:07:06.910 --> 00:07:14.860
Last name and account number are simply going to be first name, C, T, last name, seat and account

101
00:07:14.890 --> 00:07:19.210
number, which are the three variables that we have created in this same function.

102
00:07:20.590 --> 00:07:22.090
So we're almost done.

103
00:07:22.090 --> 00:07:27.310
And for when I finish this function, I will need it to return to the code, the data that corresponds

104
00:07:27.310 --> 00:07:28.180
to customer.

105
00:07:28.240 --> 00:07:33.790
So I type return client one and now that function is completed.

106
00:07:34.690 --> 00:07:40.510
So let's create the function start, which is the one that executes the code, because until now, if

107
00:07:40.510 --> 00:07:45.880
we execute this, nothing will happen because all we have done is to create the class, then another

108
00:07:45.880 --> 00:07:49.510
one, then a function, and nothing is executable yet.

109
00:07:49.960 --> 00:07:53.050
So the start function doesn't need parameters.

110
00:07:53.050 --> 00:07:57.610
The first thing this function will need to do is call the function, create client.

111
00:07:57.610 --> 00:08:02.200
But remember that we'll return a customer that we need to store in a variable.

112
00:08:02.470 --> 00:08:04.600
So I name it my customer.

113
00:08:05.050 --> 00:08:08.650
This is then what start is going to perform when executed.

114
00:08:09.040 --> 00:08:14.050
Ask the user all this information and create the customer which will be passed to the variable.

115
00:08:14.050 --> 00:08:19.510
My customer, the one that operates inside the start function the follow me.

116
00:08:20.080 --> 00:08:25.210
So now we print my customer and what is going to happen when my customer is printed?

117
00:08:26.240 --> 00:08:33.260
What we have in the STR method here will be shown their first and last name and the account balance.

118
00:08:33.260 --> 00:08:38.090
So it is good for the customer to see a kind of summary once they've entered their data.

119
00:08:39.080 --> 00:08:44.630
So now we enter the menu that gives the user the possibility of depositing, withdrawing or exiting

120
00:08:44.630 --> 00:08:45.350
the code.

121
00:08:46.070 --> 00:08:51.350
As this menu is going to have three options and we need those options to be repeat until the client

122
00:08:51.350 --> 00:08:52.640
decides to exit.

123
00:08:53.000 --> 00:08:59.150
So we're going to first create an option that is incorrect value, like zero in order to create the

124
00:08:59.150 --> 00:08:59.970
while loop.

125
00:08:59.990 --> 00:09:06.380
We have already done this many times that has the condition that if the option is different to a for

126
00:09:06.380 --> 00:09:08.870
exit, the options will be displayed.

127
00:09:09.650 --> 00:09:15.440
So we do it this way because we know that if we start the program wrong, the program then enters the

128
00:09:15.440 --> 00:09:17.030
loop at least once.

129
00:09:17.540 --> 00:09:19.250
So what are we going to print here?

130
00:09:19.520 --> 00:09:27.080
We say choose colon space deposit, and in parentheses we show the user that they have to press.

131
00:09:27.080 --> 00:09:32.720
DD They can also choose withdrawal or w in brackets.

132
00:09:34.510 --> 00:09:39.250
Or the user can choose exit, which would be the letter E in brackets.

133
00:09:40.200 --> 00:09:45.510
So as I told you in the instructions, we won't devote time to checking if the user entered an incorrect

134
00:09:45.510 --> 00:09:49.260
number or letter all lowercase instead of uppercase.

135
00:09:49.800 --> 00:09:54.540
Here we assume that the user did everything right so that we don't pay too much attention to what you

136
00:09:54.540 --> 00:09:55.380
already know.

137
00:09:56.070 --> 00:09:58.770
If you want to add it to your code, go ahead.

138
00:09:59.040 --> 00:10:01.170
I will go on with the essential code.

139
00:10:01.790 --> 00:10:07.550
Well, the client made that choice, and now we are going to give him an option to store that choice

140
00:10:07.550 --> 00:10:08.240
with an input.

141
00:10:08.240 --> 00:10:13.400
And in that way, we are able to see whether we will continue entering the loop or not.

142
00:10:13.520 --> 00:10:16.370
Because if you exit, this will stop.

143
00:10:16.370 --> 00:10:19.970
But the other options have to call a deposit or a withdrawal.

144
00:10:20.900 --> 00:10:27.170
Then we check if the option the client has chosen is equal to D, which stands for deposit.

145
00:10:27.800 --> 00:10:30.050
Now we will make the debt amount.

146
00:10:30.050 --> 00:10:31.730
A name that stands for deposit.

147
00:10:31.730 --> 00:10:37.100
Amount will be the variable that contains an integer of what the user enters, which is going to be

148
00:10:37.100 --> 00:10:40.280
an input that asks for deposit amount.

149
00:10:41.840 --> 00:10:46.760
In this way, the client will choose an amount that will be transformed into an input and which will

150
00:10:46.760 --> 00:10:49.670
be loaded in a variable debt amount.

151
00:10:50.540 --> 00:10:51.320
Why?

152
00:10:51.530 --> 00:10:58.460
So that we can call my customer deposit, which is the method we have created and which our client instance

153
00:10:58.460 --> 00:10:58.910
has.

154
00:10:59.420 --> 00:11:04.940
The deposit method needs the debt amount variable and one we just created to be passed.

155
00:11:05.030 --> 00:11:08.660
We've already created the execution of this method deposit.

156
00:11:09.050 --> 00:11:11.300
This is so if the user chooses DD.

157
00:11:11.330 --> 00:11:13.070
But what if they chose W?

158
00:11:13.280 --> 00:11:21.260
Then we put elif to say that if the choice has been equal to W, in that case we will set a width,

159
00:11:21.260 --> 00:11:27.800
amount or withdrawal amount which should be equal to an integer of an input where the user is asked

160
00:11:27.800 --> 00:11:30.550
withdrawal amount, colon space.

161
00:11:30.560 --> 00:11:35.750
And once they do this we will execute my customer point withdrawal.

162
00:11:35.870 --> 00:11:41.540
And it also requires us to pass the amount to withdraw, which is in the variable width amount that

163
00:11:41.540 --> 00:11:42.710
we just created.

164
00:11:43.890 --> 00:11:49.950
So these are the only two options that the user can give to us, because if they press a, we will exit

165
00:11:49.950 --> 00:11:52.860
the loop and we will not be able to enter these two options.

166
00:11:53.340 --> 00:11:58.170
And once the user chooses D or W, we're going to print my customer.

167
00:11:58.170 --> 00:11:59.010
What for?

168
00:11:59.250 --> 00:12:04.380
To show us that there is a summary of the first and last name and of how the balance of the account

169
00:12:04.380 --> 00:12:07.410
is after carrying out any of these two operations.

170
00:12:08.280 --> 00:12:15.210
So then we exit the while loop and inside the start function we will greet our client who has decided

171
00:12:15.210 --> 00:12:20.970
to leave with a thank you for using Python bank, wallet bank.

172
00:12:21.720 --> 00:12:23.610
I would definitely deposit my money there.

173
00:12:24.180 --> 00:12:28.110
So we have our code or most of it, but we still need a line.

174
00:12:28.110 --> 00:12:29.040
And what is it?

175
00:12:29.310 --> 00:12:30.810
Let's see if you can guess.

176
00:12:30.960 --> 00:12:35.520
Well, if I execute this, nothing happens because there is no executable line.

177
00:12:35.970 --> 00:12:36.870
It has to call.

178
00:12:36.870 --> 00:12:38.820
Start for everything to happen.

179
00:12:39.660 --> 00:12:41.850
So let's check to see if we've done it right.

180
00:12:42.120 --> 00:12:43.640
So we execute.

181
00:12:43.650 --> 00:12:44.970
Enter your name.

182
00:12:45.000 --> 00:12:46.530
My name is Freddie.

183
00:12:46.830 --> 00:12:48.840
My last name is Gary.

184
00:12:48.930 --> 00:12:55.680
My account number is 00001, and it shows me all the information and options.

185
00:12:56.280 --> 00:12:59.190
I can't withdraw any money because my account is empty.

186
00:12:59.250 --> 00:13:03.300
So let's choose deposit and it asks me for an amount to deposit.

187
00:13:04.530 --> 00:13:06.750
I want to deposit 500.

188
00:13:07.500 --> 00:13:09.870
It says deposit accepted shows.

189
00:13:09.870 --> 00:13:14.580
My personal information tells me my balance and shows me my options.

190
00:13:14.670 --> 00:13:16.700
So now I want to withdraw.

191
00:13:16.950 --> 00:13:20.940
So I put W and I'm going to choose 400.

192
00:13:21.330 --> 00:13:23.700
So my balance is now 100.

193
00:13:23.910 --> 00:13:26.020
Everything seems to work perfectly.

194
00:13:26.040 --> 00:13:27.960
But suppose I want to withdraw again.

195
00:13:27.960 --> 00:13:32.730
And though I only have 100 left, I try to withdraw 300.

196
00:13:33.580 --> 00:13:39.130
It tells me insufficient funds and shows me again the balance and the options.

197
00:13:39.460 --> 00:13:42.130
So let's choose a this time.

198
00:13:42.520 --> 00:13:49.570
It tells me that the balance once again and thank you for using banco python and we get out of the code

199
00:13:49.570 --> 00:13:51.520
which has worked perfectly.

200
00:13:51.940 --> 00:13:57.310
So in this exercise we worked with inheritance which was not so necessary because we could have done

201
00:13:57.310 --> 00:14:01.540
all this with the classic customer without it inheriting from person.

202
00:14:01.630 --> 00:14:03.820
But we wanted to play with inheritance.

203
00:14:04.560 --> 00:14:11.670
So we have also integrated the use of functions with what we've learned about object oriented programming.

204
00:14:12.030 --> 00:14:18.000
And most importantly, our object had attributes of its own and inherited ones as well, and it also

205
00:14:18.000 --> 00:14:23.550
had methods in which it modified special methods, which in all classes we create have.

206
00:14:23.970 --> 00:14:29.700
So I think it has been a very rewarding day and I hope your bank account, once you start working as

207
00:14:29.700 --> 00:14:33.270
a python developer, will return much more than zero.

208
00:14:33.780 --> 00:14:35.510
So we're done for the day.

209
00:14:35.520 --> 00:14:40.200
So let's have a break and we'll see you in the next lesson after a good sleep.

210
00:14:40.560 --> 00:14:42.030
See you in the next lesson.
