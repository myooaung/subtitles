WEBVTT
1
00:00:08.070 --> 00:00:12.810
In the previous lesson, we learned a little bit about pandas, but now comes the good part, which

2
00:00:12.810 --> 00:00:18.450
is when we're going to connect this notebook to our drive so that we can extract from there any file

3
00:00:18.450 --> 00:00:20.040
we can bring to pandas.

4
00:00:20.430 --> 00:00:27.330
To do this, we're going to go from Google Dot CoLab and let's import drive.

5
00:00:28.050 --> 00:00:30.090
This step is very important.

6
00:00:30.690 --> 00:00:35.430
After this line, we're going to write drive, dot, mount.

7
00:00:35.820 --> 00:00:39.630
And here we're going to put the path that will connect us to our drive.

8
00:00:40.230 --> 00:00:46.500
And this, in inverted commas, is with slash content, slash drive.

9
00:00:47.280 --> 00:00:48.780
This is the first part.

10
00:00:48.780 --> 00:00:54.810
And we run this cell and this is going to load and it's going to say, permit this notebook to access

11
00:00:54.810 --> 00:00:56.910
your Google Drive files.

12
00:00:57.180 --> 00:01:00.180
And here we should choose connect to Google Drive.

13
00:01:00.840 --> 00:01:04.440
This opens a pop up window where we can select our account.

14
00:01:05.130 --> 00:01:09.180
Then we choose allow and our drive is mounted.

15
00:01:10.200 --> 00:01:14.490
Now I'm going to import a file that I have in this drive, which you can see here.

16
00:01:14.700 --> 00:01:20.520
It's called car sales, dot, CSV, and I have it in my drive.

17
00:01:21.090 --> 00:01:27.120
So in order to incorporate it, we're going to create a variable called car sales, which is going to

18
00:01:27.120 --> 00:01:33.750
be the variable that is going to contain our file and it's going to be the same as a panda object with

19
00:01:33.750 --> 00:01:36.060
the read CSV method.

20
00:01:37.110 --> 00:01:44.610
Well, now I have to put the path which is going to start with the slash, then content another slash

21
00:01:44.610 --> 00:01:47.580
and then drive and another slash.

22
00:01:48.300 --> 00:01:51.030
So far it's going to be the same for everybody.

23
00:01:51.570 --> 00:01:59.190
Then comes my drive, but I'm going to find it by pressing control and space, and it gives me the option

24
00:01:59.190 --> 00:02:03.060
to load the next option, which is my drive.

25
00:02:04.260 --> 00:02:12.270
If I press control and space again, it shows me all the folders I have in my drive and I choose CoLab

26
00:02:12.540 --> 00:02:13.530
notebooks.

27
00:02:13.710 --> 00:02:14.490
Perfect.

28
00:02:15.330 --> 00:02:21.000
And now I'm going to finally type the name of the file, which is car sales dot CSP.

29
00:02:22.530 --> 00:02:29.220
This is supposed to import into this file, but we're going to display it by invoking the variable car

30
00:02:29.250 --> 00:02:30.060
sales.

31
00:02:30.810 --> 00:02:37.350
We run this cell and here you can see the data frame that has the information from the file I was showing

32
00:02:37.350 --> 00:02:37.680
you.

33
00:02:38.010 --> 00:02:44.760
It has ten rows from 0 to 9 and it has five columns with the relevant categories.

34
00:02:46.110 --> 00:02:50.970
This will be the data frame that we're going to work with and we're going to do a lot of things with

35
00:02:50.970 --> 00:02:51.480
this.

36
00:02:51.750 --> 00:02:56.700
On the one hand, if you have a data frame, you can transform it back into a CSV file.

37
00:02:57.120 --> 00:03:01.650
Here you can see the folder I'm going to send it to through a very simple method.

38
00:03:01.860 --> 00:03:07.980
First, we call the data frame called car sales and we apply the method to CSV.

39
00:03:08.340 --> 00:03:13.440
We put in brackets the place where we want it to be saved and we copy this.

40
00:03:15.180 --> 00:03:21.030
We're going to give it a name that distinguishes it like this file dot csv.

41
00:03:22.470 --> 00:03:27.930
Then it will be saved inside the folder test inside colab notebooks.

42
00:03:28.500 --> 00:03:35.730
So if I run it and if I go down to my drive and I go to test, I will find this file dot csv.

43
00:03:36.030 --> 00:03:36.990
We made it.

44
00:03:37.530 --> 00:03:42.750
So now we're going to analyze the types of data available in the data frame called car sales.

45
00:03:42.900 --> 00:03:47.700
We call car sales, we assign it to the property DX types.

46
00:03:49.020 --> 00:03:51.240
And this brings up a little analysis.

47
00:03:51.690 --> 00:03:57.570
It shows us all the columns it has with the name and the data type of each one, which in this case

48
00:03:57.570 --> 00:03:59.460
are objects or integers.

49
00:03:59.730 --> 00:04:06.630
Now let's apply descriptive statistics to know our data frame to know it's number of values, the mean,

50
00:04:06.840 --> 00:04:12.300
the standard deviation, minimum and maximum values and the quartiles.

51
00:04:12.930 --> 00:04:16.680
But then we have to write a lot to achieve this.

52
00:04:16.710 --> 00:04:18.600
No, not at all.

53
00:04:18.630 --> 00:04:24.360
We call car sales, apply the described method and execute.

54
00:04:24.930 --> 00:04:30.480
And here we get a description only for the columns that have numbers of all the properties.

55
00:04:30.480 --> 00:04:38.820
For each of the columns, we see a count of the total mileage, the mean, the standard deviation,

56
00:04:38.820 --> 00:04:45.720
and here we have the minimum value, the quartiles and the maximum values for each of these two columns.

57
00:04:46.410 --> 00:04:51.210
If we had more columns with numerical values, we would have many more columns here.

58
00:04:51.570 --> 00:04:56.970
So now let's see how to get information from the dataframe using the info method.

59
00:04:57.750 --> 00:05:03.780
If we put Carsales and apply info, it's going to bring us another piece of information.

60
00:05:04.560 --> 00:05:07.950
It's going to tell us what kind of class this data frame is.

61
00:05:09.210 --> 00:05:17.010
It will tell us that it has ten entries ranging from 0 to 9, that it has a total of five columns.

62
00:05:17.370 --> 00:05:23.940
And in this table, it shows us the index, the name of the columns, the count of the values that are

63
00:05:23.940 --> 00:05:31.650
not null, and the type of data then some of the values according to their data type and memory usage.

64
00:05:33.120 --> 00:05:40.110
So if we want to list the column names of our data frame, we call Carsales columns, and this brings

65
00:05:40.110 --> 00:05:41.700
up all the columns it has.

66
00:05:42.900 --> 00:05:46.110
We can also know the length of our data frames by applying.

67
00:05:46.110 --> 00:05:46.710
Len.

68
00:05:47.160 --> 00:05:52.980
We already knew this when we worked with lists and we pass Carsales as an argument.

69
00:05:53.280 --> 00:05:56.610
We run it and it tells us that it has ten items.

70
00:05:57.570 --> 00:06:00.450
Now we're going to show the first rows of dataframe.

71
00:06:01.110 --> 00:06:09.420
In order to do this, we call Carsales and Apply Head, which will show us the first five rows.

72
00:06:10.290 --> 00:06:14.130
So that's the amount of rows that head shows by default.

73
00:06:14.670 --> 00:06:22.170
If we want a different amount, for example seven we call Carsales head and in parenthesis we put seven

74
00:06:22.170 --> 00:06:23.130
as a parameter.

75
00:06:23.790 --> 00:06:26.760
So now it's going to show us the first seven rows.

76
00:06:27.990 --> 00:06:34.110
And if we wanted to see the last rows instead of head, we call Carsales and we apply tail.

77
00:06:34.260 --> 00:06:35.640
And there it is.

78
00:06:37.200 --> 00:06:41.160
And just like head by default, it shows the last five records.

79
00:06:41.310 --> 00:06:45.420
But if you put three, you're going to see the last three and so on.

80
00:06:46.050 --> 00:06:54.510
We can also use the lock method to select a row that, for example, can be an index three of our dataframe.

81
00:06:54.900 --> 00:07:00.480
So let's see, I put Carsales again and we apply lock and there's a parameter.

82
00:07:00.480 --> 00:07:01.410
We put three.

83
00:07:02.100 --> 00:07:07.710
When we run it, it brings us the information that corresponds to that record for each of the columns.

84
00:07:09.090 --> 00:07:15.540
But if we want to ask for more than one record at a time, we have another very similar method, the

85
00:07:15.540 --> 00:07:17.520
one just now that was lock.

86
00:07:17.730 --> 00:07:21.000
But with this one, it is called eye lock.

87
00:07:21.780 --> 00:07:28.890
And we're going to use it to fetch rows three, seven and nine carsales eye lock.

88
00:07:29.400 --> 00:07:35.430
And in square brackets, we pass another group of square brackets containing three, seven and nine.

89
00:07:36.390 --> 00:07:41.250
We execute and we receive the data of those three rows in particular.

90
00:07:42.090 --> 00:07:47.700
Here are some links to the documentation for you to see some of the differences and additional resources

91
00:07:47.700 --> 00:07:49.710
you can find in these two methods.

92
00:07:50.430 --> 00:07:56.010
So now let's see how we can select a particular column, for example, the mileage column.

93
00:07:56.520 --> 00:08:03.150
We do it in the same way we call an index by first putting the name of our dataframe and then putting

94
00:08:03.150 --> 00:08:08.100
between braces the name of the column you want to extract, not to the index number.

95
00:08:09.150 --> 00:08:11.100
So here we have to choose the column.

96
00:08:11.730 --> 00:08:17.250
I'm going to choose mileage and I run it and it brings me all the values of that column.

97
00:08:18.180 --> 00:08:22.410
If I want to find the average value of the column mileage, I do the same.

98
00:08:23.010 --> 00:08:26.130
I put car sales I call mileage again.

99
00:08:26.430 --> 00:08:33.090
But after that I apply the mean method, which is going to bring us the average of all the miles that

100
00:08:33.090 --> 00:08:33.630
are here.

101
00:08:34.710 --> 00:08:41.390
Now we're going to select those columns that have only values greater than 100,000 miles in this column.

102
00:08:41.400 --> 00:08:43.980
Yes, we can do that as well.

103
00:08:44.730 --> 00:08:51.300
Not just bring up a particular column or calculate its average, but filter which ones we want to display

104
00:08:51.300 --> 00:08:53.430
and which ones we don't want to display.

105
00:08:53.850 --> 00:08:58.130
We do it pretty much the same way we call car sales.

106
00:08:58.140 --> 00:09:04.650
We open a key and now we have to invoke car sales again with the key mileage.

107
00:09:05.400 --> 00:09:06.480
We choose that key.

108
00:09:06.480 --> 00:09:13.830
And before we close the second key, we tell it that we only want the ones that are greater than 100,000.

109
00:09:15.060 --> 00:09:21.870
When we execute this, it will bring us only two records, which are Toyota and Nissan, which have

110
00:09:21.870 --> 00:09:23.730
exceeded that mileage.

111
00:09:24.450 --> 00:09:30.060
So now we're going to create a double entry cross table between manufacturer and doors.

112
00:09:30.660 --> 00:09:32.520
So let's see how we do this.

113
00:09:33.210 --> 00:09:37.260
We invoke a panda object cross tab.

114
00:09:37.860 --> 00:09:44.070
This method is allows us to generate a cross table and in its parameters we're going to put that we

115
00:09:44.070 --> 00:09:49.830
need to do it with car sales and that we need to do it with the column manufacturer.

116
00:09:50.850 --> 00:09:56.550
Then we call the second argument, which would be the second data series, which is going to be car

117
00:09:56.550 --> 00:09:59.700
sales, but with the series doors.

118
00:10:01.080 --> 00:10:01.920
So let's run.

119
00:10:01.920 --> 00:10:05.700
And it brings us the cross table where the manufacturers are.

120
00:10:06.120 --> 00:10:12.720
And here a series of columns for each value of the category doors, which are three, four and five.

121
00:10:13.560 --> 00:10:19.410
Then in the cross table we can see the distribution of the ten records, according to the coincidence

122
00:10:19.410 --> 00:10:21.960
between manufacturer and number of doors.

123
00:10:22.500 --> 00:10:28.020
For example, Toyota manufacturers one car with three doors and three cars with four doors.

124
00:10:29.040 --> 00:10:35.220
So the next task is to try to group the columns by manufacturer and look for the average value of the

125
00:10:35.220 --> 00:10:36.540
numerical columns.

126
00:10:36.540 --> 00:10:38.340
So let's see how we do this.

127
00:10:39.060 --> 00:10:46.050
We call car sales, and we apply a new method called Group B, and how are we going to group them?

128
00:10:46.770 --> 00:10:54.000
We're going to group them by manufacturer, which is what the prompt asks for, and that's not all it

129
00:10:54.000 --> 00:10:56.220
asks us for the average of manufacturer.

130
00:10:56.220 --> 00:11:02.340
So after the key and the parentheses we call the method mean and now we execute it.

131
00:11:02.880 --> 00:11:09.060
And we have these columns grouped by manufacturer and giving us the average of all the numerical columns.

132
00:11:09.780 --> 00:11:16.710
And the last thing that's missing is a sort of introduction to math plot lib, which is a tool that's

133
00:11:16.710 --> 00:11:18.600
really going to blow your mind.

134
00:11:19.050 --> 00:11:24.660
So we're going to leave that for the next lesson because it's the step that opens the door to a world

135
00:11:24.660 --> 00:11:26.790
of extremely rich resources.

136
00:11:27.090 --> 00:11:31.350
So we'll leave it for the next lesson so we can take it a little easy.
