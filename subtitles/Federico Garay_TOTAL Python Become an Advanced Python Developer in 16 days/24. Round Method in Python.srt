1
00:00:08,040 --> 00:00:13,290
As you know, floats can have a lot of digits after the dot, and that's very useful when you need to

2
00:00:13,290 --> 00:00:14,490
be very precise.

3
00:00:14,820 --> 00:00:17,430
But it's a bit much when you want to be clear.

4
00:00:17,880 --> 00:00:24,960
For example, if six friends and I spent $90 on a meal and they asked me to calculate how much each

5
00:00:24,960 --> 00:00:31,260
one of us should pay, it would not be very practical for me to ask them for $12 and $8.

6
00:00:31,260 --> 00:00:31,620
Trillion

7
00:00:31,620 --> 00:00:39,420
571,482,571,429

8
00:00:40,620 --> 00:00:41,220
of a set.

9
00:00:42,090 --> 00:00:44,190
They're never going to invite me again.

10
00:00:44,880 --> 00:00:47,220
That's why we use rounding.

11
00:00:47,460 --> 00:00:54,480
And Python has a method called round, which allows me to remove as many decimal places as I want so

12
00:00:54,480 --> 00:00:57,750
I can visualize and communicate my numbers much better.

13
00:00:58,170 --> 00:01:01,440
The rounding syntax is as simple as telling Python.

14
00:01:01,800 --> 00:01:04,470
Please round this number or round.

15
00:01:04,740 --> 00:01:06,780
And then in brackets two parameters.

16
00:01:06,900 --> 00:01:13,080
First, the number we want round here we can put a number in operation or even a variable.

17
00:01:13,350 --> 00:01:19,560
And as we will see later, also a function that is the first parameter, the number that we want to

18
00:01:19,560 --> 00:01:19,980
round.

19
00:01:20,280 --> 00:01:27,720
The second parameter which goes after the comma is the number of decibel digits we want our result to

20
00:01:27,720 --> 00:01:28,170
have.

21
00:01:28,710 --> 00:01:34,740
If you don't put anything here, Python will consider that you don't want any decimal numbers after

22
00:01:34,740 --> 00:01:36,300
the point by default.

23
00:01:37,170 --> 00:01:43,140
Please note that round can round up or round down depending on which number is the closest.

24
00:01:43,500 --> 00:01:48,240
So 5.3 will be rounded down because 5.3 is closer to five than six.

25
00:01:48,540 --> 00:01:51,570
5.8 will be rounded up because it's closer to six.

26
00:01:51,870 --> 00:01:54,360
5.5 is also going to round up.

27
00:01:54,780 --> 00:01:55,890
That's the tipping point.

28
00:01:56,190 --> 00:02:01,230
Let's take a look at this in practice in pie terms so we can really fully understand that and put it

29
00:02:01,230 --> 00:02:02,070
into practice.

30
00:02:02,850 --> 00:02:05,340
Let's see how this rounding thing behaves in Python.

31
00:02:06,300 --> 00:02:11,820
Let's start by trying to print this operation that we just talked about in the example, dividing 90

32
00:02:11,820 --> 00:02:13,230
books by seven people.

33
00:02:14,250 --> 00:02:21,750
And if I run this choosing the round module, we will get 12.85, seven one, etc..

34
00:02:22,290 --> 00:02:26,520
This is not really a number that we can socialize among our friends.

35
00:02:26,790 --> 00:02:30,300
So let's try to write our value inside the round function.

36
00:02:30,750 --> 00:02:34,710
So we open the brackets close to the end of the value and run it.

37
00:02:35,550 --> 00:02:41,850
And now we're going to get 13 because 12.8 is rounded up because it's close to 13 and 12.

38
00:02:43,020 --> 00:02:47,190
And the approach here was to apply the rounding function inside the print statement.

39
00:02:47,940 --> 00:02:49,440
But what if we do it differently?

40
00:02:49,590 --> 00:02:54,510
We also can we can store this value in a variable, for example, result.

41
00:02:54,930 --> 00:02:58,610
And let's say it's value, it's around 90 divided by seven.

42
00:02:59,340 --> 00:03:02,160
And inside the print statement, we only set result.

43
00:03:02,670 --> 00:03:05,460
And what we are going to get is exactly the same.

44
00:03:06,390 --> 00:03:11,310
Then we can do the rounding inside the variable or the printing time as we just saw.

45
00:03:11,970 --> 00:03:19,560
Or we can also generate another new variable that's called rounding and it's equal to round result.

46
00:03:20,310 --> 00:03:22,350
Well, there are a lot of ways to do it.

47
00:03:23,010 --> 00:03:27,570
As long as somewhere in your round operation it's getting the value that it has to round.

48
00:03:27,600 --> 00:03:29,700
It's going to work and it's going to be valid.

49
00:03:30,330 --> 00:03:32,280
And now let's look at a different example.

50
00:03:32,550 --> 00:03:37,020
We're going to eliminate all of this and we're going to write a new decimal number.

51
00:03:37,740 --> 00:03:40,290
We're going to put it inside a variable called value.

52
00:03:40,890 --> 00:03:49,560
And we're going to give it a content of 95.66, six, six, six, etc. a huge amount of stick.

53
00:03:50,250 --> 00:03:55,620
And now I want to round this value, but not to the point of losing all my decimal values.

54
00:03:55,710 --> 00:03:58,110
Let's say I want to see only two decimals.

55
00:03:58,470 --> 00:04:02,700
Well, for that, the round function allows us to pass an argument to ask for that.

56
00:04:03,270 --> 00:04:04,410
Let's type around.

57
00:04:05,190 --> 00:04:07,050
Let's open and close the brackets.

58
00:04:07,320 --> 00:04:12,600
And as Phil was telling you in the introduction of this lecture, round accepts two parameters.

59
00:04:13,140 --> 00:04:16,290
The first one is mandatory is the value we want to round.

60
00:04:16,320 --> 00:04:17,670
And the second one is optional.

61
00:04:18,000 --> 00:04:22,740
We can add after the comma the number of decimal places that we want to get in our result.

62
00:04:23,130 --> 00:04:29,580
If I say two and now I print it, we run it and it tells me 95.67.

63
00:04:29,970 --> 00:04:31,860
Rounded up the second six.

64
00:04:32,790 --> 00:04:38,580
If I put in here that I wanted three decimal places, it would show me three and so on.

65
00:04:39,630 --> 00:04:40,780
That is round.

66
00:04:40,800 --> 00:04:46,500
Always allows us not only to remove the decimals but also to choose how many you want to show.

67
00:04:46,890 --> 00:04:48,030
Let's see something more.

68
00:04:48,360 --> 00:04:56,100
Let's remove the number of decimals we're going to print again so that we can see only nine six is shown.

69
00:04:56,880 --> 00:05:01,830
And now I'm going to print not only the value, but also the type of data that belongs to the value.

70
00:05:03,170 --> 00:05:03,890
So what do you think?

71
00:05:04,460 --> 00:05:09,270
I'm printing without any decimals, so it's going to show me something that looks as in entrega.

72
00:05:09,290 --> 00:05:10,520
It will show 96.

73
00:05:10,670 --> 00:05:13,460
Do you think that 96 is an integer or a float?

74
00:05:14,090 --> 00:05:14,660
Let's see.

75
00:05:14,960 --> 00:05:15,500
Let's run it.

76
00:05:16,550 --> 00:05:19,120
And to your surprise, it's an intel.

77
00:05:20,300 --> 00:05:21,680
If we do it the way we did it.

78
00:05:21,890 --> 00:05:26,240
Notice I've created a variable that the content of the variable is the rounded number.

79
00:05:26,750 --> 00:05:31,220
This makes it therefore an integer because it doesn't have any decimal places in it.

80
00:05:31,550 --> 00:05:33,050
But now I'm going to do it differently.

81
00:05:33,860 --> 00:05:37,250
Now I'm going to remove the round from the value variable.

82
00:05:37,280 --> 00:05:42,980
Now the value of the value variable is in its number and I'm going to round it inside print.

83
00:05:43,790 --> 00:05:44,990
So here I write round.

84
00:05:45,860 --> 00:05:48,890
We're going to open the brackets and we're going to do it here.

85
00:05:50,240 --> 00:05:51,140
So let's run this.

86
00:05:51,980 --> 00:05:58,160
And now notice the result is the same as before 96 because we've rounded it in the print.

87
00:05:59,320 --> 00:06:05,450
This time it also looks as an integer, but data type is no longer an integer.

88
00:06:05,470 --> 00:06:06,220
It's a float.

89
00:06:06,760 --> 00:06:07,450
Why is that?

90
00:06:08,560 --> 00:06:14,470
Because when we do the rounding inside the variable, we're modifying the value itself, we're transforming

91
00:06:14,470 --> 00:06:16,960
it into an integer inside the variable.

92
00:06:17,620 --> 00:06:23,530
But when we do it outside the variable, like here where we are doing it at the same time of printing,

93
00:06:23,920 --> 00:06:28,030
we are not modifying the value itself, we are just modifying the way it looks.

94
00:06:28,360 --> 00:06:33,970
But we haven't changed the data type, which is still going to be a float because we've rounded it only

95
00:06:33,970 --> 00:06:35,050
in the print instance.

96
00:06:35,410 --> 00:06:36,610
How do you figure this out?

97
00:06:36,940 --> 00:06:41,230
Because if I print it here again, we're going to print back the value.

98
00:06:41,800 --> 00:06:49,150
But this time without rounding it is still appears to me is a number of type float but that if I ask

99
00:06:49,150 --> 00:06:53,170
you again to give me the type of value you notice, it is still a float.

100
00:06:53,440 --> 00:06:54,910
It never became an integer.

101
00:06:55,540 --> 00:07:01,090
It would only be an integer if I round it inside the declaration of the variable.

102
00:07:01,390 --> 00:07:04,210
I hope this helps you understand the dynamics in programming.

103
00:07:04,720 --> 00:07:08,140
Thank you very much for joining us and we look forward to the next lecture.
