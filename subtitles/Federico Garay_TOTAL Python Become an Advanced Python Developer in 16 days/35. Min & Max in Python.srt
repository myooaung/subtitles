1
00:00:07,880 --> 00:00:14,180
Personally, I love simple but useful functions, and that's the case of the min and max functions,

2
00:00:14,300 --> 00:00:20,060
which, as you may imagine, refer to minimum and maximum and serve to detect the lowest and highest

3
00:00:20,060 --> 00:00:21,680
values of a collection.

4
00:00:22,010 --> 00:00:27,920
They work with both numeric and alphabetic values, and there's no reason to put delaying them into

5
00:00:27,920 --> 00:00:28,670
action.

6
00:00:28,970 --> 00:00:29,780
Let's do it.

7
00:00:30,350 --> 00:00:35,390
And now that we're in Python, we can see that the syntax of Min and Max is very simple.

8
00:00:35,960 --> 00:00:38,220
It's just the keyword like min or max.

9
00:00:38,240 --> 00:00:43,820
Let's begin with Min and then in parenthesis we're going to put a series of values in which we're going

10
00:00:43,820 --> 00:00:45,530
to look for the minimum value.

11
00:00:45,590 --> 00:00:53,600
It can be either a series of values like put, for example, 58, 96, 72, 64, 35.

12
00:00:53,870 --> 00:00:56,270
I have here a collection of five numbers.

13
00:00:56,720 --> 00:00:59,480
It could also be a list or any other intermodal.

14
00:01:00,170 --> 00:01:04,610
We're going to start with this way and we're going to store this value inside a variable that's called

15
00:01:04,610 --> 00:01:05,210
minor.

16
00:01:05,600 --> 00:01:07,750
And now we're going to print minor.

17
00:01:07,760 --> 00:01:12,080
So we're going to run and we're going to look for our minimum and maximum file.

18
00:01:12,320 --> 00:01:15,950
And it's going to tell us that the least of these numbers is 35.

19
00:01:16,730 --> 00:01:21,710
If I were to look for the maximum, we can copy this to have the same collection of numbers, but this

20
00:01:21,710 --> 00:01:23,960
time it would be stored inside major.

21
00:01:24,320 --> 00:01:26,210
And the key word here is Max.

22
00:01:26,660 --> 00:01:29,390
Let's print this major variable and we're going to get that.

23
00:01:29,390 --> 00:01:32,390
The largest number is 96, and that's correct.

24
00:01:33,290 --> 00:01:34,880
So this is one way to do it.

25
00:01:35,180 --> 00:01:40,730
Another way to do it, we're going to eliminate all of this is to work directly with a list that we

26
00:01:40,730 --> 00:01:44,270
may have stored in a variable, for example, list.

27
00:01:44,480 --> 00:01:49,220
And let's say that list is equal to these same numbers, but in a list.

28
00:01:49,730 --> 00:01:54,650
So now we can ask to print the maximum of list and it's going to work exactly the same.

29
00:01:56,420 --> 00:02:03,170
Or we can even set up a little string with F and we're going to write here the least is and we call

30
00:02:03,170 --> 00:02:04,460
the minimum of list.

31
00:02:04,460 --> 00:02:12,050
Then we continue with the sentence saying comma space and the greatest is and here we call the maximum

32
00:02:12,050 --> 00:02:14,180
of list and we print this out.

33
00:02:14,930 --> 00:02:20,840
So we have a nice sentence that says the least is 35 and the greatest is 96.

34
00:02:21,680 --> 00:02:23,930
So you can interact with this in many ways.

35
00:02:24,200 --> 00:02:29,690
Remember, inside minimum and maximum, you can put a variable that appeals to a collectible, just

36
00:02:29,690 --> 00:02:33,200
like a list, like a dictionary, or like a table.

37
00:02:34,040 --> 00:02:39,290
Also, you can put the collectible directly in here or directly a series of numbers, as we did at the

38
00:02:39,290 --> 00:02:39,890
beginning.

39
00:02:40,640 --> 00:02:46,280
So we're going to see also that we can work with strings, really, strings organized around minimum

40
00:02:46,280 --> 00:02:47,510
and maximum values.

41
00:02:47,600 --> 00:02:48,380
Yes.

42
00:02:48,530 --> 00:02:52,440
You know that strings are sortable alphabetically, so you can do that, too.

43
00:02:52,460 --> 00:02:54,440
So let's write a list of names.

44
00:02:55,040 --> 00:02:58,940
We're going to be our friend, John, and it's going to be our friend Paul.

45
00:02:59,270 --> 00:03:01,310
We can incorporate our friend Alice.

46
00:03:01,310 --> 00:03:03,440
And finally, our dear friend Charles.

47
00:03:05,330 --> 00:03:06,310
There they all are.

48
00:03:06,320 --> 00:03:09,530
And I want you to know that this is a first in alphabetical order.

49
00:03:10,280 --> 00:03:13,250
So what I want to do is print the minimum of names.

50
00:03:13,340 --> 00:03:14,720
And this will bring me that.

51
00:03:14,730 --> 00:03:16,970
That is Alicia, of course.

52
00:03:17,840 --> 00:03:23,750
And what if I instead of working with a list of names, I work only with a single string like Carlos.

53
00:03:24,200 --> 00:03:28,310
What happens if I ask for the minimum or maximum of a string?

54
00:03:28,880 --> 00:03:32,450
Well, remember that strings are technically a collection, too.

55
00:03:32,920 --> 00:03:34,310
They're a string of characters.

56
00:03:34,310 --> 00:03:40,940
So it's going to look for some characters, and it's going to tell me that the lowest is C, and here

57
00:03:40,940 --> 00:03:45,140
you'll be saying this is wrong fitting the lowest character here is A.

58
00:03:46,310 --> 00:03:52,220
Well, actually, Men and Max will look first for the uppercase letters and then the lowercase letters.

59
00:03:52,520 --> 00:03:57,920
So if we actually take out the uppercase C and put it as lowercase, it's going to change everything.

60
00:03:57,920 --> 00:04:02,600
And it's going to tell us that the min is now equal to a notice.

61
00:04:02,600 --> 00:04:08,480
If we put this O as a capital letter, for example, now it will tell me that the min is O, because

62
00:04:08,480 --> 00:04:11,480
it goes first for the uppercase and then the lowercase.

63
00:04:12,350 --> 00:04:17,870
If you don't want any confusion, you should look for the minimum of the dot lower name.

64
00:04:17,900 --> 00:04:20,090
That's what we have this method for.

65
00:04:20,780 --> 00:04:25,550
And now, even if the O is uppercase, it will tell me that the A is the minimum letter.

66
00:04:25,550 --> 00:04:26,450
In this case.

67
00:04:27,230 --> 00:04:28,520
That's for the strings.

68
00:04:28,700 --> 00:04:31,340
And what if we see how it behaves with dictionaries?

69
00:04:32,210 --> 00:04:34,640
And here there is also some things to consider.

70
00:04:34,880 --> 00:04:39,290
So we have a dictionary that has a key one that has a value of 45.

71
00:04:39,500 --> 00:04:41,150
And let's add a second key.

72
00:04:41,180 --> 00:04:43,490
Key to it has a value of 11.

73
00:04:43,850 --> 00:04:50,840
Then notice this key one will be lower than key two, alphabetically speaking, but the lowest value

74
00:04:50,840 --> 00:04:54,710
is that of key two because 11 is lower than 45.

75
00:04:55,640 --> 00:05:01,430
So let's see what Python is going to look for if I ask it to print to the minimum dictionary the key

76
00:05:01,430 --> 00:05:02,270
or the value.

77
00:05:02,660 --> 00:05:04,490
Place your bets before I hit print.

78
00:05:04,910 --> 00:05:05,720
Here I go.

79
00:05:06,200 --> 00:05:12,230
And what it brought me is a key one, meaning it defaulted to the key that has the lowest value alphabetically.

80
00:05:13,760 --> 00:05:19,670
But if I wanted to return the lower value instead of the lower key, remember that we can ask here through

81
00:05:19,670 --> 00:05:25,130
the values method that what it brings is not the complete dictionary, but its values.

82
00:05:25,520 --> 00:05:28,820
And in that case, it will be the minimum value of this search.

83
00:05:29,720 --> 00:05:34,220
So I hope this lecture has helped you to know this method, that they're very simple.

84
00:05:34,580 --> 00:05:39,020
It has the variations, and it can be really useful when we have to manipulate information.

85
00:05:39,440 --> 00:05:42,920
As always, thanks for joining us and don't skip the practices.

86
00:05:43,010 --> 00:05:45,050
We'll be waiting for you in the next lecture.
