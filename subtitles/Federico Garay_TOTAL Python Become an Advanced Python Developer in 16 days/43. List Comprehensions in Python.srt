1
00:00:08,030 --> 00:00:13,790
In this short lecture, we are not going to learn a new concept, but a new way to do something we already

2
00:00:13,790 --> 00:00:15,460
know more efficiently.

3
00:00:15,470 --> 00:00:18,120
And by that I mean by using less code.

4
00:00:18,140 --> 00:00:22,030
List comprehension is a dynamic way to build lists.

5
00:00:22,040 --> 00:00:27,920
If you ever find yourself in a situation where you have to build a list through a loop that passes several

6
00:00:27,920 --> 00:00:31,900
times through the append method to add its elements.

7
00:00:31,910 --> 00:00:36,710
That's the moment where this list comprehension will be a good ally.

8
00:00:36,740 --> 00:00:41,990
Let's see it over in Petrom and let's start by doing this with what we know so far.

9
00:00:42,380 --> 00:00:47,720
Let's say I have a variable that's called word that contains the word python and I want to generate

10
00:00:47,720 --> 00:00:50,060
a list of each of the elements of my string.

11
00:00:50,660 --> 00:00:57,410
Then I create a list, an empty list, and I'm going to feed it through a loop for where I say for each

12
00:00:57,410 --> 00:01:05,240
letter in words colon we call list dot append, which is the method that adds a value to a list.

13
00:01:05,240 --> 00:01:11,600
And for this case, we'll append all the letters iteration by iteration that it finds in word.

14
00:01:12,490 --> 00:01:16,390
When we then print our list should be able to see here.

15
00:01:16,390 --> 00:01:19,120
pyth0n.

16
00:01:19,120 --> 00:01:20,020
Perfect.

17
00:01:20,600 --> 00:01:27,290
Now I have lists filled with all those elements as I wanted, but this is taking me all of these lines

18
00:01:27,290 --> 00:01:32,390
to accomplish something that maybe would be much simpler if I do it with list comprehension.

19
00:01:32,960 --> 00:01:36,740
The first thing I do is eliminate from colon to this whole second line.

20
00:01:36,740 --> 00:01:38,360
I'm not going to need it anymore.

21
00:01:38,750 --> 00:01:41,840
Now I add the word letter before the false statement.

22
00:01:42,260 --> 00:01:45,860
Now I have letter for each letter within word.

23
00:01:46,130 --> 00:01:52,580
I take all of this, cut it and paste it inside the empty list and you'll say, this is a kind this

24
00:01:52,580 --> 00:01:53,840
is kind of strange.

25
00:01:53,930 --> 00:02:00,020
And yes, it looks hard to read, but I think it's very readable because we're here telling Python I

26
00:02:00,020 --> 00:02:03,080
want the variable list to be equal to a composite list.

27
00:02:03,530 --> 00:02:07,460
Each element is going to be a letter of every letter that's in words.

28
00:02:07,460 --> 00:02:10,360
So we run it and we get exactly that.

29
00:02:11,690 --> 00:02:16,100
The reading would be then that one letter for every letter that's in word.

30
00:02:16,280 --> 00:02:22,040
And here actually the word letter is the internal variable that we use, but it could have been x x

31
00:02:22,040 --> 00:02:25,250
and it would work just the same or whatever we put in there.

32
00:02:25,340 --> 00:02:32,450
F f for f f and it's going to work fine as long as it's the same internal variable that we're using.

33
00:02:33,020 --> 00:02:39,110
It would also be the same if instead of putting a variable here that has the content python directly

34
00:02:39,110 --> 00:02:42,500
here, put Python because I'm replacing the variable usage.

35
00:02:42,500 --> 00:02:45,320
And now with just one line, I've already built my list.

36
00:02:45,950 --> 00:02:47,540
I'm printing it for you to see.

37
00:02:47,540 --> 00:02:52,520
But this one line is the only line that I need to build it thanks to the list comprehension.

38
00:02:53,870 --> 00:02:59,060
If this is a little more complex for you to read, it's fine to go back to the previous method and use

39
00:02:59,060 --> 00:02:59,810
the full.

40
00:02:59,840 --> 00:03:00,920
No problem.

41
00:03:01,040 --> 00:03:03,350
That is if it's comfortable for you.

42
00:03:04,040 --> 00:03:06,620
We can also work with numeric values here.

43
00:03:06,650 --> 00:03:12,710
Suppose I want my list to store one number for each number we have within a range that goes from zero

44
00:03:12,710 --> 00:03:15,140
to but not including 21.

45
00:03:15,590 --> 00:03:18,290
We can even choose to advance in pairs.

46
00:03:18,380 --> 00:03:23,120
So finally it will be the even numbers there are from 0 to 20.

47
00:03:24,010 --> 00:03:31,840
So if I run it, my list now has 0 to 4, six, eight, ten and so on, so it run perfectly.

48
00:03:32,470 --> 00:03:35,230
Another thing we can do is modify those numbers.

49
00:03:35,440 --> 00:03:41,170
If I, for example, want my list to be made up of every number but divided by two for every number

50
00:03:41,170 --> 00:03:42,130
in this range.

51
00:03:42,490 --> 00:03:47,290
Now, these numbers that we have here, I'm going to have them altered because they're going to be a

52
00:03:47,290 --> 00:03:50,380
division that's going to transform them into different numbers.

53
00:03:51,080 --> 00:03:56,140
Of course, this could have been end times two or n square root, whatever you want.

54
00:03:56,150 --> 00:03:59,270
I can also the number before I include it within my list.

55
00:03:59,960 --> 00:04:01,310
Other things I can do.

56
00:04:01,340 --> 00:04:07,370
I can incorporate an F to decide on every number if it will incorporate that number or not.

57
00:04:07,700 --> 00:04:08,690
Let me show you.

58
00:04:09,290 --> 00:04:13,580
At the beginning we left only this regular N without any modification.

59
00:04:13,580 --> 00:04:17,750
So we're saying add a number for every number that you find in this range.

60
00:04:17,870 --> 00:04:22,520
As long as the number multiplied by two is greater than ten.

61
00:04:23,850 --> 00:04:26,970
So not just any number is going to meet my condition here.

62
00:04:27,030 --> 00:04:31,140
And when we do this, see, not everybody enters here.

63
00:04:31,140 --> 00:04:34,110
We only have six, eight and ten Y.

64
00:04:34,110 --> 00:04:37,230
So the first number in this range is zero.

65
00:04:37,650 --> 00:04:41,250
If I multiply it by two, it's not greater than ten, it's zero.

66
00:04:41,730 --> 00:04:43,890
So that one didn't go in and so on.

67
00:04:44,490 --> 00:04:46,320
And if I want, I can add else.

68
00:04:46,350 --> 00:04:50,160
So we can have an alternative for the numbers that didn't meet the condition.

69
00:04:50,730 --> 00:04:53,280
I can do something else in those cases.

70
00:04:53,670 --> 00:04:56,220
Well, we're going to do this in two steps.

71
00:04:56,640 --> 00:05:02,460
I'm going to add the L's here, and I'm going to say that if the number is not greater than ten, then

72
00:05:02,460 --> 00:05:03,900
print the word no.

73
00:05:05,500 --> 00:05:10,330
But as you're saying, this is throwing me some errors here because once you incorporate the else,

74
00:05:10,330 --> 00:05:12,040
this doesn't go here anymore.

75
00:05:12,190 --> 00:05:14,590
So we're going to select it from the if.

76
00:05:14,620 --> 00:05:16,150
All the way to the end.

77
00:05:17,280 --> 00:05:20,750
And we're going to cut it and we're going to paste it after the first end.

78
00:05:20,760 --> 00:05:23,380
So now the reading looks a little bit less readable.

79
00:05:23,400 --> 00:05:25,950
In fact, it's less readable, but it's logical.

80
00:05:26,340 --> 00:05:33,090
It says that here where it will incorporate N as long as n times two is greater than ten.

81
00:05:33,600 --> 00:05:39,000
And if that's not the case, we'll put the word no for every NW that's in the range that we have here.

82
00:05:39,510 --> 00:05:42,900
And if I print it out, we have no, no, no.

83
00:05:42,900 --> 00:05:49,440
For the first ones they didn't meet the F condition and then six, eight, ten and so on.

84
00:05:50,270 --> 00:05:51,550
So I insist.

85
00:05:51,560 --> 00:05:57,620
The more complex this is and the more we economize in terms of code, the more efficient it becomes.

86
00:05:57,620 --> 00:06:00,320
But many times the cost is the readability.

87
00:06:00,860 --> 00:06:06,920
It's not easy to come here and read this and understand it when we can say that that's one of the most

88
00:06:06,920 --> 00:06:10,580
important values in Python readability.

89
00:06:11,540 --> 00:06:16,370
So if you're not comfortable with this, remember, you can always go back to the for approach.

90
00:06:16,940 --> 00:06:21,050
So let's look at a more practical example of real life usage.

91
00:06:21,350 --> 00:06:24,140
Suppose I have a list of measures in FTS.

92
00:06:25,310 --> 00:06:29,030
You know, it's a measure that it's not used in all countries, but in some.

93
00:06:29,030 --> 00:06:34,250
So I have a list with ten feet 20, 30, 40 and 50.

94
00:06:34,850 --> 00:06:38,720
Also suppose that I want to create a list that contains values in meters.

95
00:06:39,080 --> 00:06:40,580
So let's call it meters.

96
00:06:41,480 --> 00:06:42,650
It's an empty list.

97
00:06:42,890 --> 00:06:47,810
Finally, suppose that I want this meter's list to contain the same measures that we have in feet,

98
00:06:47,810 --> 00:06:50,660
but transformed into its equivalent in meters.

99
00:06:51,360 --> 00:06:57,450
So I do this by having to transform each number, by multiplying it by 3.281.

100
00:06:57,960 --> 00:06:59,190
That's the way we do it.

101
00:06:59,900 --> 00:07:01,850
Now try to think about it for a moment.

102
00:07:02,120 --> 00:07:05,150
Pause the video if you want and try to do it by yourself.

103
00:07:05,360 --> 00:07:07,850
Just using list comprehension.

104
00:07:08,510 --> 00:07:10,310
Let me show you how I would do it.

105
00:07:10,820 --> 00:07:19,760
What I want to have here is a list composed of F four feet multiplied by 0.3048 for each foot that I

106
00:07:19,760 --> 00:07:21,200
find in the feet list.

107
00:07:21,530 --> 00:07:26,960
And with that, I should now have my list of meters equivalent to the feet in my first list.

108
00:07:27,320 --> 00:07:29,900
So let's print it out so we can see it on the screen.

109
00:07:31,190 --> 00:07:34,030
What we print out here is meters, of course.

110
00:07:34,040 --> 00:07:38,540
And if we run it, we have the measurements that we wanted that match the feet in the first list.

111
00:07:38,540 --> 00:07:45,230
And we actually made a loop, but on a single line very handy and so far a little bit readable.

112
00:07:45,920 --> 00:07:50,240
The day is coming to an end now, and we've seen everything we needed to learn in order to meet the

113
00:07:50,240 --> 00:07:51,920
challenge for the next lecture.

114
00:07:52,310 --> 00:07:57,140
So I'll be waiting for you there and we can talk about it and you can start thinking about our next

115
00:07:57,140 --> 00:07:57,860
program.

116
00:07:58,190 --> 00:07:59,120
See you there.
