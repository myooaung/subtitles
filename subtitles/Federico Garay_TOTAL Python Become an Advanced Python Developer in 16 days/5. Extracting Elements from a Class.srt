1
00:00:08,000 --> 00:00:12,560
So in the previous lecture we learned how to extract a paragraph from a website.

2
00:00:12,710 --> 00:00:14,690
We use this code to do so.

3
00:00:15,110 --> 00:00:18,950
In today's lesson, we'll learn how to extract a whole class.

4
00:00:19,310 --> 00:00:24,260
In short, what we learned before can be applied to all the elements we want to extract, but we need

5
00:00:24,260 --> 00:00:27,560
to master the syntax used in web scraping.

6
00:00:27,800 --> 00:00:30,890
So that's why you'll find this chart attached to the lessons.

7
00:00:30,890 --> 00:00:36,980
You'll see different special characters that allow us to identify different elements in HTML or CSS

8
00:00:36,980 --> 00:00:37,520
code.

9
00:00:37,820 --> 00:00:40,850
We use quotes to write the names of specific tag.

10
00:00:41,240 --> 00:00:49,730
So if we put super select and we add in quotes and brackets, the word div will be able to extract all

11
00:00:49,730 --> 00:00:52,070
the elements containing the div tag.

12
00:00:53,030 --> 00:00:57,800
We use hash tag to inform the python syntax that we want to look for an ID.

13
00:00:58,040 --> 00:01:04,370
So if we add hash tag and an ID name between quotes will obtain all the elements containing the same

14
00:01:04,370 --> 00:01:06,260
ID as the text we wrote.

15
00:01:07,280 --> 00:01:13,700
If we add a dot instead of hash tag would be looking for a class, and so we'd receive all the elements

16
00:01:13,700 --> 00:01:15,980
containing a class with a specific name.

17
00:01:16,880 --> 00:01:23,540
If we use space to separate two words inside quotes followed by the word div as first word like the

18
00:01:23,540 --> 00:01:30,770
example in the chart and span, a second word will receive all the elements named span that are inside

19
00:01:30,770 --> 00:01:31,910
a div element.

20
00:01:33,260 --> 00:01:39,680
If we use the greater than symbol, it means we want all the elements named span that are inside a development

21
00:01:39,680 --> 00:01:41,390
without anything in between.

22
00:01:42,260 --> 00:01:46,940
These are the symbols that you'll learn to use in order to extract whatever you want to extract.

23
00:01:47,600 --> 00:01:49,100
So let's go back to the site.

24
00:01:49,100 --> 00:01:55,100
And for example, if I want to extract all the elements of the section, learn creative skills, which

25
00:01:55,100 --> 00:01:56,510
contains some texts.

26
00:01:56,510 --> 00:02:00,350
First I need to inspect so as to recognize this element.

27
00:02:01,370 --> 00:02:02,750
So here's the inspection.

28
00:02:02,750 --> 00:02:09,410
If I post myself on the code blocks, I'm able to check which element each code block corresponds to.

29
00:02:09,710 --> 00:02:15,500
There are single paragraphs which are titles of type H five, but if I scroll up, I get to the block

30
00:02:15,500 --> 00:02:17,300
that corresponds to this section.

31
00:02:17,930 --> 00:02:24,770
It seems like the name of this class is Fusion Text, Fusion Dash Text Dash one.

32
00:02:25,760 --> 00:02:29,570
So let's try to extract this class back in py charm.

33
00:02:29,570 --> 00:02:36,110
I already have got this website stored in the result variable and result text has been stored in the

34
00:02:36,110 --> 00:02:39,470
soup variable which contains a beautiful soup element.

35
00:02:40,340 --> 00:02:42,080
Here's why I have to start working.

36
00:02:42,470 --> 00:02:49,310
The variable I'm about to create won't be my underscore P anymore, but central underscore block.

37
00:02:49,850 --> 00:02:56,270
Central underscore block will be equal to soup dot select and will begin to use the syntax we just learned.

38
00:02:57,320 --> 00:03:02,420
If we want to obtain a whole class, the special character we have to use is the dot.

39
00:03:03,920 --> 00:03:05,630
If my memory serves me right.

40
00:03:05,630 --> 00:03:12,890
The name of the class containing all the texts is fusion dash text, dot fusion dash text, dash one.

41
00:03:13,700 --> 00:03:14,840
Let's use this then.

42
00:03:15,860 --> 00:03:21,200
So if we print central block, we should obtain everything that's inside that block.

43
00:03:21,710 --> 00:03:22,730
Will it work?

44
00:03:22,760 --> 00:03:23,750
Let's see.

45
00:03:24,620 --> 00:03:25,520
We execute.

46
00:03:25,520 --> 00:03:29,330
And here we have all this information which is needed inside that block.

47
00:03:29,600 --> 00:03:32,000
It can be text, images and so on.

48
00:03:32,720 --> 00:03:33,110
Why?

49
00:03:33,110 --> 00:03:34,250
This is marvelous.

50
00:03:34,280 --> 00:03:39,140
According to the chart, if we want to find all the elements that are inside another element, we should

51
00:03:39,140 --> 00:03:43,520
use the space in order to separate the block name from the element type.

52
00:03:43,940 --> 00:03:48,650
In this case, it is H five, which is the title that's inside our block.

53
00:03:49,720 --> 00:03:54,610
So if we look for this and execute it, we'll get a list of all the five titles that are present in

54
00:03:54,610 --> 00:03:55,240
our block.

55
00:03:56,170 --> 00:03:56,560
All right.

56
00:03:56,560 --> 00:03:58,270
So remember, this is a list.

57
00:03:58,630 --> 00:04:04,510
Therefore, if we want to find each element of the list, like the index, zero will only receive what's

58
00:04:04,510 --> 00:04:08,800
in the first element and that would be unlimited access, etc..

59
00:04:09,850 --> 00:04:14,530
So let's go back to the site where here it is and the element we have extracted.

60
00:04:15,430 --> 00:04:17,710
And yet we don't want this one element.

61
00:04:17,710 --> 00:04:18,970
We want all of them.

62
00:04:20,770 --> 00:04:23,860
So in order to extract them all, we'll need a loop.

63
00:04:24,220 --> 00:04:31,300
So let's delete this print and create a loop that for each h in central underscore block, it will only

64
00:04:31,300 --> 00:04:33,250
print h four now.

65
00:04:33,910 --> 00:04:36,610
And if we execute it, both elements are printed.

66
00:04:36,610 --> 00:04:42,040
And even though they're not inside a list, they still have tags and style instructions.

67
00:04:43,000 --> 00:04:45,070
However, we want only text.

68
00:04:45,670 --> 00:04:52,090
So in that case, instead of showing H, we have to make it show each dot get text which we previously

69
00:04:52,090 --> 00:04:54,430
learn to use in order to delete tags.

70
00:04:55,570 --> 00:05:01,900
So if we execute, it will receive nothing more than text unlimited access and then learn video.

71
00:05:02,710 --> 00:05:06,370
So this is how we traverse a class and obtain exactly what we want.

72
00:05:07,420 --> 00:05:09,070
These are just examples.

73
00:05:09,070 --> 00:05:14,860
And for our next lesson, we'll continue to illustrate since we're going to learn how to extract images.

74
00:05:14,860 --> 00:05:16,570
And that will be fascinating.

75
00:05:16,570 --> 00:05:18,580
So stay tuned for more of this.
