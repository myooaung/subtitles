1
00:00:07,940 --> 00:00:14,150
From this point on, when the daily projects aren't simple exercises, it is paramount that you try

2
00:00:14,150 --> 00:00:20,780
to draw a graph or a diagram of the type of problem you have and how you would divide it into small

3
00:00:20,780 --> 00:00:21,440
parts.

4
00:00:21,470 --> 00:00:24,710
All this before writing all the entire code.

5
00:00:25,130 --> 00:00:28,540
In this case, I'm going to show you how I've represented it.

6
00:00:28,550 --> 00:00:31,010
But you can do it whatever way you want.

7
00:00:31,370 --> 00:00:37,640
Once the game starts, we need the code to call a function that takes care of picking a random word.

8
00:00:38,180 --> 00:00:44,780
Then we need to show the player a hyphenated representation of how many letters our word has.

9
00:00:45,230 --> 00:00:48,380
Then we need to ask the user to choose a letter.

10
00:00:48,830 --> 00:00:51,710
We then need to check if that letter is valid.

11
00:00:51,770 --> 00:00:53,810
Make sure it's not a number.

12
00:00:53,810 --> 00:00:58,970
And if it is a letter, make sure no more than one letter has been entered.

13
00:00:59,180 --> 00:01:04,670
If the user's entry is not valid, we must ask the user to enter a letter again.

14
00:01:05,150 --> 00:01:10,670
If the input is valid, then the next code block will check to see if the letter is in the word.

15
00:01:11,420 --> 00:01:17,570
If the letter is not found, it will add that letter to the list of incorrect letters and show you how

16
00:01:17,570 --> 00:01:19,430
many wrong letters you have chosen.

17
00:01:19,850 --> 00:01:26,720
It will deduct one life and show you how many lives you have left, and then it will check to see if

18
00:01:26,720 --> 00:01:28,190
you have run out of lives.

19
00:01:28,670 --> 00:01:32,600
If there are no more lives left, the game is over and the player has lost.

20
00:01:32,600 --> 00:01:37,040
But if not, it will ask for the next letter and repeat the cycle again.

21
00:01:37,580 --> 00:01:44,330
If the letter is correct, the code will replace the corresponding dashes with the letter guest and

22
00:01:44,330 --> 00:01:47,540
it will check if the complete word has been guessed.

23
00:01:47,840 --> 00:01:52,640
If not, it will ask you to choose another letter to continue the cycle.

24
00:01:52,880 --> 00:01:58,220
But if there are no more letters left to guess, it will declare that the game is over and that you

25
00:01:58,220 --> 00:01:59,210
are the win there.

26
00:02:00,110 --> 00:02:00,470
Whew.

27
00:02:00,770 --> 00:02:03,440
Quite a job to do all this.

28
00:02:03,440 --> 00:02:07,970
You are going to need to refresh a lot of things that we've learned from the course.

29
00:02:08,000 --> 00:02:14,930
For example, we are going to need some functions that return something via return, but also some that

30
00:02:14,930 --> 00:02:22,850
simply display information like this one, which asks for a list to be passed as an argument and then

31
00:02:22,850 --> 00:02:25,430
displays that list via the print statement.

32
00:02:25,460 --> 00:02:31,400
Remember that you're also going to need to create functions that receive user input and check whether

33
00:02:31,400 --> 00:02:35,480
that input is correct or not before returning it with the return.

34
00:02:36,200 --> 00:02:37,690
I'd like to refresh that.

35
00:02:37,700 --> 00:02:45,350
Suppose we want the user to enter a letter, but we only want them to enter A, B or C to ask for a

36
00:02:45,350 --> 00:02:46,310
user input.

37
00:02:46,340 --> 00:02:51,050
We use the input statement and store that input in a variable.

38
00:02:51,590 --> 00:02:59,690
If we want this line to be placed inside a function, we must put the name of the variable next to return

39
00:02:59,690 --> 00:03:07,610
so that when it finishes executing, the function will return the value entered by the user to verify

40
00:03:07,610 --> 00:03:09,500
if the input is valid.

41
00:03:09,650 --> 00:03:16,550
For example, if they've entered only A, B or C, first, we can establish an incorrect value for the

42
00:03:16,550 --> 00:03:24,290
input and then a while loop that is going to continue executing while the input is incorrect.

43
00:03:24,950 --> 00:03:31,250
This way we make sure that the request is repeated over and over until the user enters a value.

44
00:03:31,250 --> 00:03:32,600
Valid value.

45
00:03:32,630 --> 00:03:34,370
The last recommendation.

46
00:03:34,400 --> 00:03:35,530
Be patient.

47
00:03:35,540 --> 00:03:38,190
Expect to be wrong at least 100 times.

48
00:03:38,210 --> 00:03:44,120
Have fun solving the problems you will encounter along the way and do not regret the hours you will

49
00:03:44,120 --> 00:03:47,510
spend putting this all together and trying.

50
00:03:47,540 --> 00:03:49,530
Don't forget, play some good music.

51
00:03:49,550 --> 00:03:51,260
Grab something nice to drink.

52
00:03:51,440 --> 00:03:52,280
Good luck.

53
00:03:52,370 --> 00:03:53,840
And we'll see you on the other side.
