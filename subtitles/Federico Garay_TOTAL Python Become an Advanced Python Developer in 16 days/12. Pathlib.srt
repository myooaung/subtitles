1
00:00:07,790 --> 00:00:14,930
The Pavilion module is an important component of the Python standard library that allows us to manipulate

2
00:00:14,930 --> 00:00:19,250
file system paths quickly on any operating system.

3
00:00:19,250 --> 00:00:25,430
In the first part of the day, we learn how to work with without path lib because it is a relatively

4
00:00:25,430 --> 00:00:30,470
new module and you are going to encounter a lot of code built in the old way.

5
00:00:30,710 --> 00:00:35,690
And it is important that in this course you learn to read all kinds of code you come across.

6
00:00:35,690 --> 00:00:40,880
But now we're going to incorporate this new feature to make file manipulation a lot easier.

7
00:00:41,060 --> 00:00:45,110
Let's see it in the code to know all the possibilities.

8
00:00:45,110 --> 00:00:48,440
Path Lib officers will start where we left off.

9
00:00:48,440 --> 00:00:54,410
We have this variable named folder that contains a path created with the path object which we imported

10
00:00:54,410 --> 00:00:55,190
properly.

11
00:00:56,320 --> 00:01:01,900
We created this path with forward slashes and we were able to put everything together, the path and

12
00:01:01,900 --> 00:01:03,700
the name of the file we want to open.

13
00:01:04,840 --> 00:01:07,030
So I imagine that I want to open a file.

14
00:01:07,120 --> 00:01:11,230
We already know how to do this, but we used to do it with the open function.

15
00:01:11,530 --> 00:01:18,160
In this case I'll print folder which we have here, but folder is not an object like we used to have

16
00:01:18,160 --> 00:01:21,490
before, which used functions for files or paths.

17
00:01:21,820 --> 00:01:28,360
When we type a dot will see some different methods because folder is now a path object and path contains

18
00:01:28,360 --> 00:01:29,380
other methods.

19
00:01:29,470 --> 00:01:35,860
So to read a file we use read text which is similar to read the one we used in the first lecture of

20
00:01:35,860 --> 00:01:36,400
the day.

21
00:01:37,620 --> 00:01:44,580
If we execute this run, then run and click on path lib will see the contents of this test file.

22
00:01:44,730 --> 00:01:46,290
It says Welcome.

23
00:01:46,800 --> 00:01:48,690
So something's missing here, right?

24
00:01:48,930 --> 00:01:52,230
Do you remember that we needed to do something that we're not doing now?

25
00:01:52,740 --> 00:01:53,590
Exactly.

26
00:01:53,610 --> 00:01:56,550
We neither have to open nor close our file.

27
00:01:56,700 --> 00:02:02,820
We don't use open and close, but we just use these two lines containing the variable and the print

28
00:02:02,820 --> 00:02:05,430
function in order to see what we're reading.

29
00:02:05,880 --> 00:02:11,940
So Path Lib allows us to carry out several tasks more efficiently using less lines.

30
00:02:12,510 --> 00:02:16,350
Actually, we're going to test another methods inside this print such as name.

31
00:02:17,610 --> 00:02:22,710
The name method, which, as you can see, doesn't have brackets, will send us back the name of the

32
00:02:22,710 --> 00:02:23,310
file.

33
00:02:23,700 --> 00:02:26,280
Test dot txt text.

34
00:02:26,790 --> 00:02:30,030
This method extracted the name from the path object.

35
00:02:30,780 --> 00:02:36,900
So another method we have here is suffix, which is actually a function, which is why it doesn't have

36
00:02:36,900 --> 00:02:37,680
brackets.

37
00:02:37,920 --> 00:02:40,470
Suffix refers to the file extension.

38
00:02:40,470 --> 00:02:42,260
That is the type of file.

39
00:02:42,270 --> 00:02:47,040
So suffix will send us back the type of our file, which is a text file.

40
00:02:47,370 --> 00:02:48,060
Text.

41
00:02:48,660 --> 00:02:54,690
And if we look for another function, for instance, STEM, it will send us back the file name without

42
00:02:54,690 --> 00:02:55,710
its extension.

43
00:02:56,710 --> 00:02:59,560
Here we have test as a basic element.

44
00:03:00,520 --> 00:03:02,260
So there's a lot of methods.

45
00:03:02,290 --> 00:03:04,780
Try them on your own and see what they can do.

46
00:03:05,230 --> 00:03:10,870
You can divide your path or file without opening and closing them, and you'll see that it's much faster.

47
00:03:11,320 --> 00:03:16,570
There is also a method that allows you to check if this file exists, and we'll do that using IFF in

48
00:03:16,570 --> 00:03:20,320
order to know what to do depending if it exists or not.

49
00:03:20,950 --> 00:03:30,310
So let's see if not folder dot exists, which is the method that will return true or false since it

50
00:03:30,310 --> 00:03:31,150
is a bowling.

51
00:03:31,480 --> 00:03:37,570
If the folder doesn't exist, will print something like this file doesn't exist and else that is if

52
00:03:37,570 --> 00:03:39,950
the file exists, will type print.

53
00:03:39,970 --> 00:03:41,500
Yes, it exists.

54
00:03:41,500 --> 00:03:42,640
And that's the message.

55
00:03:43,090 --> 00:03:44,500
And we execute it.

56
00:03:44,920 --> 00:03:48,460
Here it says the file exists because test is in my folder.

57
00:03:48,910 --> 00:03:52,660
So now let's type tests to call a file that doesn't exist.

58
00:03:52,660 --> 00:03:55,480
And now the system will say that the file doesn't exist.

59
00:03:56,890 --> 00:04:00,670
So you have many more elements to manipulate, find and divide your files.

60
00:04:00,820 --> 00:04:03,610
We also have a very nice method which will import.

61
00:04:03,610 --> 00:04:08,470
Besides, path will import one method called pure windows path.

62
00:04:09,820 --> 00:04:15,760
This method converts any path you have to a Windows path because this one here runs on Mac.

63
00:04:16,030 --> 00:04:21,520
But if you wanted to convert this path to a Windows path, you'd have to import it just like I did.

64
00:04:21,610 --> 00:04:25,090
And then you would create a new object named Windows Path.

65
00:04:25,720 --> 00:04:30,310
That's equal to pure Windows Path and what's inside folder.

66
00:04:31,390 --> 00:04:37,540
Now, we'll close all this and we'll print Windows Path, execute it, and we'll have the same path

67
00:04:37,540 --> 00:04:40,060
we see here, but with back slashes.

68
00:04:40,060 --> 00:04:42,430
So it'll adapt to the Windows format.

69
00:04:43,690 --> 00:04:46,450
So we've barely glanced at all the possibilities.

70
00:04:46,450 --> 00:04:47,770
Path live offices.

71
00:04:47,860 --> 00:04:52,000
It is another great option to manipulate files and directories.

72
00:04:52,570 --> 00:04:58,690
I advise you take a close look at this and check all the methods you can use the course and the documents.

73
00:04:59,050 --> 00:05:02,710
So thanks for being here with us and see you in the next lecture.
