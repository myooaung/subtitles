WEBVTT
1
00:00:07.730 --> 00:00:14.990
When we looked at method types yesterday, we looked at decorators, those words that start with the

2
00:00:14.990 --> 00:00:18.470
at symbol to indicate what type of method it is.

3
00:00:18.470 --> 00:00:24.260
Today, we're going to look at decorated more thoroughly because not only are there decorators that

4
00:00:24.260 --> 00:00:26.930
Python has created, but we can create.

5
00:00:26.930 --> 00:00:33.860
Our own decorators are actually functions that modify the behavior of other functions and help shorten

6
00:00:33.860 --> 00:00:34.670
our code.

7
00:00:35.300 --> 00:00:42.470
The simplest way to understand what a decorator does is as follows Suppose I have an uppercase function

8
00:00:42.470 --> 00:00:46.820
which is only responsible for printing any string in uppercase.

9
00:00:47.150 --> 00:00:52.700
Now suppose I have another function called lowercase, which is in charge of printing any string in

10
00:00:52.700 --> 00:00:53.630
lowercase.

11
00:00:53.630 --> 00:00:55.100
So far so easy.

12
00:00:55.100 --> 00:01:01.040
But now suppose sometimes I want these functions to just do their job and nothing else.

13
00:01:01.190 --> 00:01:07.610
But other times I want them not only to print what they have to print, but also greet the user with

14
00:01:07.610 --> 00:01:11.810
hello and goodbye before and after printing their results.

15
00:01:11.810 --> 00:01:13.040
What should I do?

16
00:01:13.040 --> 00:01:15.320
I think I basically have two options.

17
00:01:15.320 --> 00:01:20.720
One is to manually print those greetings before and after the call every time I want the functions to

18
00:01:20.720 --> 00:01:23.300
run them, which would be very inefficient.

19
00:01:23.510 --> 00:01:29.660
And another is to create new, duplicate, uppercase and lowercase functions that include greetings.

20
00:01:30.200 --> 00:01:36.230
This way you can call one or the other depending on whether or not you want the greeting to occur.

21
00:01:36.650 --> 00:01:42.770
Yet this would not be efficient either, since duplicating code is not a very Python strategy.

22
00:01:43.010 --> 00:01:49.880
Wouldn't it be great if our functions had an on off switch to enable or disable those extra functionalities?

23
00:01:50.090 --> 00:01:54.650
That's the idea of decorators and Federico will show you how they work.

24
00:01:54.650 --> 00:02:01.460
If you follow him over to Chart, we'll start to develop this concept by creating two basic functions.

25
00:02:01.790 --> 00:02:08.390
One will be uppercase and it will receive text as a parameter, and this function will just print that

26
00:02:08.390 --> 00:02:13.580
text, applying the upper string method so as to return an uppercase to text.

27
00:02:14.750 --> 00:02:18.290
This is one function and the other one will be named lowercase.

28
00:02:18.440 --> 00:02:24.170
It will receive a text and will only print it, applying the lower method so as to return a lowercase

29
00:02:24.180 --> 00:02:25.010
text.

30
00:02:25.970 --> 00:02:28.040
All right, we have our functions.

31
00:02:28.370 --> 00:02:35.000
And just like fill ask before what if I want the software to say hello before applying either method,

32
00:02:35.150 --> 00:02:38.120
then show the text and say goodbye.

33
00:02:38.690 --> 00:02:39.530
So let's find out.

34
00:02:39.530 --> 00:02:40.790
Using uppercase.

35
00:02:41.480 --> 00:02:43.580
Our first option is to make the software print.

36
00:02:43.610 --> 00:02:44.240
Hello.

37
00:02:44.240 --> 00:02:46.130
Before printing E the function.

38
00:02:46.610 --> 00:02:53.210
Then we can execute the uppercase function which can contain a message like today's Monday followed

39
00:02:53.210 --> 00:02:54.980
by print and goodbye.

40
00:02:56.270 --> 00:03:01.370
If we had to do this every time we want to add a greeting or farewell, it would be tedious.

41
00:03:01.490 --> 00:03:03.380
I think it wouldn't be practical.

42
00:03:04.550 --> 00:03:11.270
So our second option is to print hello here and goodbye here, inside the function itself.

43
00:03:12.200 --> 00:03:16.640
But we can no longer use this function without preventing these messages from appearing.

44
00:03:16.910 --> 00:03:23.060
In this case, we'd have to duplicate our function and create another one named uppercase without greeting

45
00:03:23.150 --> 00:03:24.950
and then delete the printings.

46
00:03:26.000 --> 00:03:30.710
We'd have to do the same with lowercase, which would mean to duplicate the whole code.

47
00:03:30.710 --> 00:03:32.630
So this isn't very smart.

48
00:03:33.530 --> 00:03:38.180
The best solution is to use decorators in order for you to learn how to use them correctly.

49
00:03:38.180 --> 00:03:40.880
I need to explain some other things first.

50
00:03:41.210 --> 00:03:45.560
First of all, everything in Python is an object, as we've already seen.

51
00:03:45.560 --> 00:03:49.100
The instances of your bird class are objects.

52
00:03:49.910 --> 00:03:51.710
Number 15 is an object.

53
00:03:51.710 --> 00:03:53.510
It is the instance of an integer.

54
00:03:54.200 --> 00:03:57.080
This string reading hello is also an object.

55
00:03:57.080 --> 00:03:58.730
It is an instance of a string.

56
00:03:59.600 --> 00:04:02.870
What I want you to understand is that even functions are objects.

57
00:04:02.870 --> 00:04:06.380
Therefore, uppercase in this case is also an object.

58
00:04:06.890 --> 00:04:12.320
So if uppercase is an object, it means we can assign a function to a variable.

59
00:04:12.590 --> 00:04:20.450
But now suppose I have a variable named my function and its contents are equal to the uppercase function.

60
00:04:20.960 --> 00:04:23.000
It's not necessary to add brackets.

61
00:04:23.870 --> 00:04:26.780
Now this variable is storing uppercase.

62
00:04:27.140 --> 00:04:31.640
Would this mean I can call uppercase through this variable named my function?

63
00:04:31.760 --> 00:04:32.870
Precisely.

64
00:04:33.260 --> 00:04:38.210
So look, let's call my function and pass the word python as parameter.

65
00:04:38.360 --> 00:04:40.520
And now let's execute it.

66
00:04:43.070 --> 00:04:50.960
We got Python upper cased and this could be done since upper case was assigned to my function, meaning

67
00:04:50.960 --> 00:04:54.230
that our variable can return uppercase to texts.

68
00:04:54.680 --> 00:04:57.320
Now that I've explained this, let's move on.

69
00:04:57.710 --> 00:05:03.740
Functions can be stored in variables and functions can be passed as arguments to other functions too.

70
00:05:04.160 --> 00:05:05.510
How can we do this?

71
00:05:05.870 --> 00:05:11.870
Let's delete this first, and here we have the uppercase function and we'll create a new function named

72
00:05:11.870 --> 00:05:19.880
one function as regards parameters will pass function colon and will make it return function.

73
00:05:21.800 --> 00:05:24.410
So what can we do when calling one function?

74
00:05:25.220 --> 00:05:31.250
Let's call it this way one function and we'll pass uppercase as argument which asks for a text that

75
00:05:31.250 --> 00:05:32.660
will read testing.

76
00:05:34.320 --> 00:05:39.960
So we're calling from one function and argument, which is the uppercase function, and it requires

77
00:05:39.960 --> 00:05:43.080
the text argument, which I'm passing right now.

78
00:05:43.290 --> 00:05:44.730
I hope you're following me.

79
00:05:45.150 --> 00:05:50.520
The main idea here is that this function is being passed as an argument to another function.

80
00:05:51.210 --> 00:05:58.370
If I execute this, I receive testing uppercase, and this would be some sort of brainteaser.

81
00:05:58.380 --> 00:06:02.940
I know, but you need to understand this in order to understand decorators.

82
00:06:03.450 --> 00:06:05.350
So let's analyze something else.

83
00:06:05.370 --> 00:06:12.210
In Python, we can define functions inside other functions, and we can do that using what we have just

84
00:06:12.210 --> 00:06:12.840
learned.

85
00:06:13.440 --> 00:06:15.900
So let's delete all of this and leave.

86
00:06:15.900 --> 00:06:21.990
Uppercase and lowercase will define these functions inside another one, which will bundle them up,

87
00:06:21.990 --> 00:06:22.860
so to speak.

88
00:06:23.250 --> 00:06:30.120
So def and let's name this function change letters since it will contain both functions, will pass

89
00:06:30.120 --> 00:06:35.310
the word type as an argument and will indent this so as to leave it inside the function.

90
00:06:35.610 --> 00:06:40.680
So the change letters function contains two functions which are uppercase and lowercase.

91
00:06:41.430 --> 00:06:47.880
In order for the software to know what to do when we call change letters will ask if type, which is

92
00:06:47.880 --> 00:06:51.120
a value we're going to pass is equal to up.

93
00:06:51.690 --> 00:06:53.040
That is uppercase.

94
00:06:53.430 --> 00:06:57.540
Then we'll return the uppercase function without brackets.

95
00:06:58.600 --> 00:07:03.940
We'll also add ELIF in case type is equal to lower case low.

96
00:07:04.180 --> 00:07:07.690
If so, it will return the lower case function.

97
00:07:08.290 --> 00:07:11.250
So our function is ready when calling it.

98
00:07:11.260 --> 00:07:17.590
All we have to do is ask for up or low so that the software decides which function it will carry out.

99
00:07:18.810 --> 00:07:22.890
So to perform this task, we'll put it into practice what we saw earlier.

100
00:07:23.100 --> 00:07:29.910
Inside, a variable named operation will open a call to change letters and pass the word up as argument.

101
00:07:31.480 --> 00:07:37.750
Now that I have the operation variable which contains a function, I'll execute it and then I'll pass

102
00:07:37.750 --> 00:07:41.080
the word word in lowercase as an argument.

103
00:07:41.530 --> 00:07:44.670
We'll see that the software returned it uppercase.

104
00:07:46.280 --> 00:07:47.270
This can be tricky.

105
00:07:47.270 --> 00:07:53.000
And so I advise that you to rewatch this video and follow it step by step if you haven't already understood

106
00:07:53.000 --> 00:07:53.480
this.

107
00:07:53.960 --> 00:07:55.280
It's not as hard as it looks.

108
00:07:55.280 --> 00:08:01.100
We're just playing with functions and objects, so we're just finding out that functions behave like

109
00:08:01.100 --> 00:08:02.150
any other objects.

110
00:08:02.150 --> 00:08:04.670
And as a result, we can store them in variables.

111
00:08:04.880 --> 00:08:08.720
We can create functions that execute other functions and so on.

112
00:08:09.230 --> 00:08:14.630
So if you understand it and take it into consideration, we'll be able to talk about decorators and

113
00:08:14.630 --> 00:08:16.940
find the answer to our previous problem.

114
00:08:17.240 --> 00:08:23.000
We need a decorator that allows us to add greetings and farewells or remove them if we no longer want

115
00:08:23.000 --> 00:08:23.390
them.

116
00:08:23.600 --> 00:08:26.300
So let's delete this and start from scratch.

117
00:08:26.540 --> 00:08:32.330
We'll create a function that can be named decorate greeting since it will decorate any function that

118
00:08:32.330 --> 00:08:33.230
we pass to it.

119
00:08:34.230 --> 00:08:37.270
This function will receive another function as argument.

120
00:08:37.290 --> 00:08:41.460
The same function that will be decorated with greeting and farewell messages.

121
00:08:41.730 --> 00:08:47.970
So once we are inside, the function will define another one which can just be named another function.

122
00:08:49.110 --> 00:08:53.310
And here we'll pass the word we want to change to uppercase, all lowercase.

123
00:08:53.640 --> 00:08:58.050
So inside this function, we'll type a greeting message that reads Hello.

124
00:08:58.500 --> 00:09:01.800
Then we'll call whatever function we need to pass.

125
00:09:02.580 --> 00:09:04.600
The one will assign word to.

126
00:09:04.620 --> 00:09:07.450
And then we'll print a farewell.

127
00:09:07.470 --> 00:09:08.400
Goodbye.

128
00:09:09.000 --> 00:09:10.440
And we're almost done.

129
00:09:11.540 --> 00:09:15.290
The last thing it will do is return another function.

130
00:09:15.950 --> 00:09:22.670
So this function will decorate any function that we pass to it with greeting and farewell messages.

131
00:09:23.120 --> 00:09:27.650
Now we can have all the functions we want and they can do whatever they want.

132
00:09:28.550 --> 00:09:30.660
In this case, we have uppercase.

133
00:09:30.680 --> 00:09:32.320
We'll pass text to it.

134
00:09:32.330 --> 00:09:39.050
And we said this function should print text dot upper so as to change that text to uppercase.

135
00:09:40.260 --> 00:09:46.680
The second function is lowercase, which will have the text as argument, and in this case we'll apply

136
00:09:46.680 --> 00:09:51.120
the lower method so that this function changes the text to lowercase.

137
00:09:52.530 --> 00:09:56.040
If we want to call one of these functions, we can do it easily.

138
00:09:56.280 --> 00:10:02.310
For instance, we'll call lowercase and pass a word containing uppercase and lowercase letters such

139
00:10:02.310 --> 00:10:03.030
as Python.

140
00:10:03.690 --> 00:10:07.340
If we execute, this will receive Python lowercase.

141
00:10:08.180 --> 00:10:13.160
And if we call uppercase, we'll receive Python uppercase and that's fine.

142
00:10:13.520 --> 00:10:19.460
In addition, if we want a function to be decorated with greetings and farewells, we have to add decorate

143
00:10:19.460 --> 00:10:21.230
greeting before the function.

144
00:10:21.470 --> 00:10:26.690
We're basically telling Python, look, when you execute this function, bundle it up with decorate

145
00:10:26.690 --> 00:10:27.350
greeting.

146
00:10:27.650 --> 00:10:31.460
So if we call uppercase again, we'll receive hello python.

147
00:10:31.850 --> 00:10:32.690
Goodbye.

148
00:10:33.140 --> 00:10:36.740
The same would happen with lowercase if we used our decorator.

149
00:10:36.770 --> 00:10:38.690
So let's execute it to receive.

150
00:10:38.690 --> 00:10:39.980
Hello Python.

151
00:10:39.980 --> 00:10:41.450
Goodbye once again.

152
00:10:42.920 --> 00:10:47.930
So although we managed to bundle a function up with another one, thanks to the decorator, we're not

153
00:10:47.930 --> 00:10:51.680
yet able to use either of these functions without the decorator.

154
00:10:52.070 --> 00:10:57.200
We can't execute them as to get something in return like we always do.

155
00:10:57.380 --> 00:10:59.720
So we can execute them as follows.

156
00:11:00.170 --> 00:11:07.250
Let's remove these decorators and create a new variable named decorated uppercase, which will be equal

157
00:11:07.250 --> 00:11:13.160
to the decorate greeting function and will pass the uppercase function as argument.

158
00:11:14.050 --> 00:11:20.050
Now, if we want to call the uppercase function without the messages, we do it like before we type

159
00:11:20.050 --> 00:11:22.300
uppercase and pass the word fedi.

160
00:11:22.840 --> 00:11:25.600
As a result, it will print this uppercase.

161
00:11:26.830 --> 00:11:33.790
However, if we want to call decorated uppercase and we pass the word fedi to it will receive a message

162
00:11:33.790 --> 00:11:36.670
that reads, Hello, fella, goodbye.

163
00:11:37.240 --> 00:11:43.330
To sum up, we can activate or not a decorator by using a function with its basic name, or using a

164
00:11:43.330 --> 00:11:47.380
variable containing a decorator so as to call a function from there.

165
00:11:47.710 --> 00:11:50.020
This is the basis of decorators.

166
00:11:50.410 --> 00:11:56.770
It's rather a complex and abstract concept, and it's quite convenient as to allow us to join functions

167
00:11:56.770 --> 00:11:59.200
and make them work together if we need them to.

168
00:11:59.230 --> 00:12:01.600
So I'll see you in the next lecture.
