WEBVTT
1
00:00:08.210 --> 00:00:14.090
Like every programming language in Python, there is a data type that is different from the others.

2
00:00:14.090 --> 00:00:21.110
And although it is perhaps the simplest of all, it is one of the most important booleans or boules.

3
00:00:21.140 --> 00:00:26.120
A boolean element can only have two values true or false.

4
00:00:26.360 --> 00:00:31.720
To declare a boolean, you simply write the name of a variable and assign it to the value.

5
00:00:31.730 --> 00:00:32.990
True or false?

6
00:00:33.200 --> 00:00:33.890
That's it.

7
00:00:33.890 --> 00:00:34.910
You have a boolean.

8
00:00:34.910 --> 00:00:40.970
You can also declare them indirectly if you assign a variable with a comparison either.

9
00:00:40.970 --> 00:00:46.250
True, for example, the expression five is greater than four or false.

10
00:00:46.340 --> 00:00:47.990
Five is less than four.

11
00:00:48.020 --> 00:00:55.520
This is also a boolean because what Python does here is to check if your comparison is true or false.

12
00:00:55.520 --> 00:01:04.430
The expressions that allow you to make comparisons are the symbols greater, less, greater, or equal,

13
00:01:04.460 --> 00:01:08.060
less or equal, equal or different.

14
00:01:08.060 --> 00:01:14.480
Whenever you construct a variable, use these operators, its result will be a boolean value.

15
00:01:14.510 --> 00:01:15.860
True or false?

16
00:01:15.860 --> 00:01:22.370
We have also seen that you can construct a boolean when you ask if a certain value is found inside a

17
00:01:22.370 --> 00:01:27.200
structure such as a list or dictionary, or if it is not found.

18
00:01:27.200 --> 00:01:32.360
So why do we say booleans are important while they're practically the basis of something exciting?

19
00:01:32.360 --> 00:01:35.480
We'll see later, which is artificial intelligence.

20
00:01:35.480 --> 00:01:41.510
Booleans are what will allow our programs to make logical decisions based on whether or not a condition

21
00:01:41.510 --> 00:01:42.140
is met.

22
00:01:42.290 --> 00:01:46.340
For example, true or false, such as is player one dead?

23
00:01:46.520 --> 00:01:47.210
True.

24
00:01:48.050 --> 00:01:49.480
So it's player two's turn.

25
00:01:49.490 --> 00:01:53.390
Let's go to the code because this needs to be seen in action right now.

26
00:01:53.510 --> 00:01:58.430
And let's go to the action and let's see how a Boolean looks directly in the code.

27
00:01:58.760 --> 00:02:03.470
We're going to write a variable that is a variable one and we're going to put it directly.

28
00:02:03.590 --> 00:02:08.390
We're going to declare it explicitly here that this one has a value of true.

29
00:02:09.290 --> 00:02:12.920
We're going to create another one that has the opposite value, which is false.

30
00:02:13.100 --> 00:02:15.830
These are the two values that are bowling admits.

31
00:02:16.310 --> 00:02:21.560
Of course, this is in the open way to create them because as Phil told you, there are indirect ways

32
00:02:21.560 --> 00:02:22.820
to generate booleans.

33
00:02:22.820 --> 00:02:27.320
Well, let's see what it looks like once we run this, and that's the data of a boolean.

34
00:02:27.440 --> 00:02:34.250
So let's do this for variable one and also let's print variable one itself so we can see its contents.

35
00:02:34.880 --> 00:02:40.970
Let's go to run and again to run we choose the file booleans and here it tells us that the type of variable

36
00:02:40.970 --> 00:02:42.260
one is bool.

37
00:02:42.650 --> 00:02:46.580
That is to say that this is a boolean and that its value is true.

38
00:02:46.910 --> 00:02:49.520
Remember, we did it here in the straight way.

39
00:02:50.090 --> 00:02:54.380
Notice that it will always be a capital letter when you put a false or true.

40
00:02:54.860 --> 00:02:59.450
But if I want it to be in lowercase, you're going to see what is going to happen and it's going to

41
00:02:59.450 --> 00:03:00.290
give us an error.

42
00:03:00.650 --> 00:03:02.660
It tells us that it has a name error.

43
00:03:02.930 --> 00:03:08.600
The name true is not defined in the same error that we could get if they had a string without quotation

44
00:03:08.600 --> 00:03:11.060
marks, because actually is what we did.

45
00:03:11.660 --> 00:03:17.090
Python recognized with uppercase as a special word, but on lowercase it means nothing for Python.

46
00:03:17.210 --> 00:03:23.150
And here pi is telling us, hey, I don't know this so true or false, it has to be capitalized.

47
00:03:23.900 --> 00:03:28.250
So we're going to eliminate this and we're going to start by trying some of the things now.

48
00:03:28.250 --> 00:03:30.110
We're going to create it indirectly.

49
00:03:30.350 --> 00:03:36.020
We're going to create a variable called number that we're going to give a value of five is greater than

50
00:03:36.020 --> 00:03:37.400
two plus three.

51
00:03:37.910 --> 00:03:39.530
We're doing an addition here.

52
00:03:40.010 --> 00:03:43.190
Here, I'm saying that five is greater than two plus three.

53
00:03:43.580 --> 00:03:47.030
And as we know, this is not true because two plus three is equal to five.

54
00:03:47.090 --> 00:03:51.830
So let's also print the type of number and also we're going to print the number itself.

55
00:03:52.220 --> 00:03:53.330
So let's run it.

56
00:03:53.330 --> 00:03:58.820
And it says that there is a bool, the type of variable number and its value is false because effectively

57
00:03:58.820 --> 00:04:01.580
five is not greater than five, it is equal.

58
00:04:02.000 --> 00:04:07.310
So as you see, even though we have not directly created the word false, we have created something

59
00:04:07.310 --> 00:04:08.360
that is false.

60
00:04:08.600 --> 00:04:10.700
A comparison that the code interprets.

61
00:04:10.700 --> 00:04:11.630
It is false.

62
00:04:12.300 --> 00:04:13.980
And here it gives us our result.

63
00:04:14.730 --> 00:04:17.410
As I told you, there are many ways to make comparisons.

64
00:04:17.430 --> 00:04:18.870
We have the greatest symbol.

65
00:04:18.870 --> 00:04:20.220
The smallest symbol.

66
00:04:20.760 --> 00:04:25.230
And let me show you this with two equal symbols, which stands for a comparison of equality.

67
00:04:25.890 --> 00:04:29.480
Here, this would give me a true because five is equal to five.

68
00:04:29.490 --> 00:04:31.530
In this case, two plus three.

69
00:04:31.590 --> 00:04:36.810
And as you see here, so you don't get confused, there are two ways to use the equal symbol when you

70
00:04:36.810 --> 00:04:37.650
use it alone.

71
00:04:37.650 --> 00:04:39.180
Just one equal symbol.

72
00:04:39.180 --> 00:04:42.060
What you're saying here is I want this to be equal to this.

73
00:04:42.270 --> 00:04:43.730
You're doing an action.

74
00:04:43.740 --> 00:04:45.180
You are changing things.

75
00:04:45.180 --> 00:04:47.040
You're creating an equality.

76
00:04:47.160 --> 00:04:51.240
We use one equal symbol, for example, to load values into variables.

77
00:04:51.970 --> 00:04:55.360
But two equal symbols together are actually a comparison value.

78
00:04:55.810 --> 00:04:58.810
It's like asking a question, is this equal to this?

79
00:04:59.050 --> 00:05:01.420
And it's going to give you a true or false answer.

80
00:05:01.690 --> 00:05:06.880
Please review in the introduction to this video where Phil mentioned all comparison options.

81
00:05:07.150 --> 00:05:13.210
But if we put greater than or equal to, for example, we are giving both alternatives.

82
00:05:13.600 --> 00:05:20.140
We want to ask if five is greater than two plus three, or if it is equal to two plus three and synthesis.

83
00:05:20.260 --> 00:05:27.010
Since it is actually equal, we get true, even though we've included the possibility that is greater.

84
00:05:27.580 --> 00:05:32.470
And we also have the possibility to see if they are different from the exclamation point and the equal

85
00:05:32.470 --> 00:05:33.040
sign.

86
00:05:33.310 --> 00:05:35.470
And since they're not different, they are equal.

87
00:05:35.470 --> 00:05:37.630
It tells us the expression is false.

88
00:05:38.310 --> 00:05:41.110
Well, there is also a chance to be much clearer.

89
00:05:41.130 --> 00:05:46.590
We have directly created here any comparison, and this is given as true or false.

90
00:05:47.100 --> 00:05:53.310
You can be much more explicit and create directly the ball function that in parenthesis asks us to put

91
00:05:53.310 --> 00:05:54.570
an expression here.

92
00:05:55.020 --> 00:05:57.810
Let's see, five is greater than six.

93
00:05:58.170 --> 00:06:01.320
We're going to execute it and it's going to tell us that it is false.

94
00:06:01.950 --> 00:06:05.880
If we put five is less than six, it's going to tell us that this is true.

95
00:06:06.300 --> 00:06:08.490
It's the same as what we did just now.

96
00:06:09.060 --> 00:06:14.250
You may be saying, well, we don't need to put bool, but I can explain it to you because we're going

97
00:06:14.250 --> 00:06:18.540
to see it in the code and we're going to see how others sometimes include it.

98
00:06:18.660 --> 00:06:21.030
When you're reviewing a code, you can find it.

99
00:06:21.030 --> 00:06:25.290
And I want you to know that this is exactly the same as putting the expression directly.

100
00:06:25.560 --> 00:06:29.940
And if you leave this empty, what you can have is a value of false, right?

101
00:06:30.240 --> 00:06:36.120
This also when you want to generate a false value, you don't want to make an unnecessary comparison.

102
00:06:36.510 --> 00:06:41.670
You put ball and already your variable is going to have the false value.

103
00:06:42.800 --> 00:06:47.900
We've also seen throughout the course that you can ask Python if there is a certain value inside a string

104
00:06:47.900 --> 00:06:52.040
or inside a dictionary, inside a list or inside any collectible.

105
00:06:52.190 --> 00:06:57.650
Well, let's do that so we can see also how to construct a bowling value.

106
00:06:57.680 --> 00:06:59.900
We're going to create a list directly.

107
00:07:00.380 --> 00:07:01.760
Let's name it list.

108
00:07:01.760 --> 00:07:05.390
And we're going to say that the list has values one, two, three and four.

109
00:07:06.530 --> 00:07:09.530
And now we're going to create a variable called control.

110
00:07:09.620 --> 00:07:15.020
And we're going to tell control to be equal to and to ask five if it is in the list.

111
00:07:16.540 --> 00:07:21.490
And then we're going to print the type of control and we're going to print control itself and we're

112
00:07:21.490 --> 00:07:22.510
going to run this.

113
00:07:23.170 --> 00:07:29.110
And it gives us back control as a Boolean type value, even though what you have here is a question

114
00:07:29.110 --> 00:07:32.830
and its value is false because five is not found in list.

115
00:07:33.400 --> 00:07:37.990
If I had asked here if five is not in list, the result would have been true.

116
00:07:38.470 --> 00:07:43.630
Well, this is the basics about booleans, and if you have any doubts, don't hesitate to ask in the

117
00:07:43.630 --> 00:07:49.360
questions and Q&amp;A area because booleans, as I told you, are the basis of the logical decisions that

118
00:07:49.360 --> 00:07:50.910
our code will make later on.

119
00:07:50.920 --> 00:07:55.690
So be sure to do the practical exercises that follow in the next step, and I'm looking forward to the

120
00:07:55.690 --> 00:08:00.190
next lecture so we can move forward with this day that is nearing to its end.
