1
00:00:08,090 --> 00:00:11,240
So up to now, Hazel knows how to do four things.

2
00:00:11,720 --> 00:00:15,740
This wouldn't be a very useful assistant, only knowing how to do four things.

3
00:00:16,250 --> 00:00:21,740
So we're going to add a few more so you can see everything she can do later.

4
00:00:21,740 --> 00:00:25,460
It's up to you and your creativity to continue adding more functions.

5
00:00:25,820 --> 00:00:34,070
So let's make another ELIF that this time is listening for the expression Do a Wikipedia search for

6
00:00:35,120 --> 00:00:38,000
if this expression is heard within my request.

7
00:00:38,180 --> 00:00:41,510
What it will do now is speak to tell us.

8
00:00:41,510 --> 00:00:42,930
I'm looking for it.

9
00:00:42,950 --> 00:00:44,060
I'm perfect.

10
00:00:44,060 --> 00:00:44,900
Just like that.

11
00:00:45,650 --> 00:00:52,310
Now we need to clean the expression that my request will receive to know what it is we must search for

12
00:00:52,310 --> 00:00:53,240
in Wikipedia.

13
00:00:54,020 --> 00:00:57,860
And remember that my request will contain a very long phrase.

14
00:00:58,070 --> 00:01:01,760
And we need to eliminate the words that aren't specific to the search.

15
00:01:01,940 --> 00:01:08,090
For example, if we say Do a Wikipedia search for Amsterdam, we don't want it to go to Wikipedia and

16
00:01:08,090 --> 00:01:11,450
search for do a Wikipedia search for Amsterdam.

17
00:01:11,960 --> 00:01:14,390
We want it to search only Amsterdam.

18
00:01:14,900 --> 00:01:19,190
So at this point in the code, my request will be equal to my request.

19
00:01:20,090 --> 00:01:28,010
But applying the method replace and what I'm going to replace is the expression do a Wikipedia search

20
00:01:28,010 --> 00:01:34,640
for and I'm going to replace it with nothing for an empty string.

21
00:01:35,060 --> 00:01:38,930
In this way, it leaves only the term we want to search.

22
00:01:40,400 --> 00:01:45,920
Then we're going to create a variable called answer that will perform the search on Wikipedia and store.

23
00:01:45,950 --> 00:01:53,480
The result answer will be equal to the object Wikipedia with the method summary, which asks for two

24
00:01:53,480 --> 00:01:54,380
parameters.

25
00:01:55,670 --> 00:01:58,850
First, it needs to know what we want to search for.

26
00:01:59,420 --> 00:02:01,250
So we put my request.

27
00:02:02,480 --> 00:02:06,890
Then it will ask how many sentences of the response we'd like it to show.

28
00:02:06,980 --> 00:02:13,520
For this, we put sentences equal to one so that it reads only the first sentence of the found article.

29
00:02:13,760 --> 00:02:20,660
So once we have the response, we call speak so that it tells us something like according to Wikipedia,

30
00:02:21,830 --> 00:02:23,690
and then we call speak again.

31
00:02:24,020 --> 00:02:32,600
But this time I'm only going to pronounce the contents of answer we put, continue and execute.

32
00:02:35,470 --> 00:02:35,860
Hello.

33
00:02:35,860 --> 00:02:36,820
I am Hazel.

34
00:02:37,240 --> 00:02:41,680
How can I help you do a Wikipedia search for David Bowie?

35
00:02:41,920 --> 00:02:43,270
I am looking for it.

36
00:02:43,840 --> 00:02:52,210
According to Wikipedia, David Robert Jones, the 8th of January 1947, the 10th of January 2006, known

37
00:02:52,210 --> 00:02:56,860
professionally as David Bowie, was an English singer, songwriter and actor, but had a significant

38
00:02:56,860 --> 00:02:58,540
impact on popular music.

39
00:02:59,110 --> 00:03:02,170
Okay, so I've advanced a little to save time.

40
00:03:02,500 --> 00:03:06,820
Don't miss out on looking up David Bowie to know more about that legend.

41
00:03:07,870 --> 00:03:10,810
So this has been searched in Wikipedia.

42
00:03:11,380 --> 00:03:15,010
We can also add a function that searches for something on the Internet.

43
00:03:15,190 --> 00:03:24,460
Let's put Elif again and if Hazel is listening, the expression, search the Internet for inside my

44
00:03:24,460 --> 00:03:25,330
request.

45
00:03:25,720 --> 00:03:29,110
So it's going to tell us, of course, right now.

46
00:03:30,760 --> 00:03:36,520
And so we call P what kit, which is for searching things on the Internet.

47
00:03:37,330 --> 00:03:41,410
We use the method search and it's going to search for my request.

48
00:03:43,310 --> 00:03:46,520
Once it is searched for it, it will you speak to tell us.

49
00:03:46,520 --> 00:03:48,980
This is what I found.

50
00:03:49,490 --> 00:03:50,780
So let's try it out.

51
00:03:54,030 --> 00:03:54,390
Hello.

52
00:03:54,390 --> 00:03:55,350
I am Hazel.

53
00:03:55,770 --> 00:03:57,250
How can I help you?

54
00:03:57,270 --> 00:03:59,550
Search the Internet for Breaking Bad.

55
00:03:59,880 --> 00:04:00,600
Of course.

56
00:04:00,600 --> 00:04:03,660
Right now, this is what I found.

57
00:04:04,470 --> 00:04:09,540
Okay, so, in fact, it searched the Internet for the expression search the Internet for Breaking Bad.

58
00:04:09,990 --> 00:04:15,420
But I only wanted it to search for Breaking Bad like we did with Wikipedia.

59
00:04:15,450 --> 00:04:17,040
Let's go to this part.

60
00:04:17,490 --> 00:04:24,930
After telling us it's going to take care of it to rewrite my request and that it's equal to my request.

61
00:04:25,230 --> 00:04:28,290
Replace the same as we did before.

62
00:04:28,620 --> 00:04:29,670
And now we replace.

63
00:04:29,670 --> 00:04:31,950
Search the internet for.

64
00:04:32,370 --> 00:04:35,970
And we change it for an empty string and we execute.

65
00:04:38,450 --> 00:04:38,810
Hello.

66
00:04:38,810 --> 00:04:39,770
I am Hazel.

67
00:04:40,220 --> 00:04:41,660
How can I help you?

68
00:04:41,690 --> 00:04:44,150
Search the Internet for Breaking Bad.

69
00:04:44,810 --> 00:04:45,500
Of course.

70
00:04:45,500 --> 00:04:48,620
Right now, this is what I found.

71
00:04:49,160 --> 00:04:52,850
And now, as you see, it searched exclusively Breaking Bad.

72
00:04:52,880 --> 00:04:55,490
Not the other words which had affected my result.

73
00:04:57,330 --> 00:04:59,430
So let's stop Hazel one more time.

74
00:04:59,430 --> 00:05:03,990
So she stops working, and we're going to enjoy ourselves a little more.

75
00:05:04,020 --> 00:05:06,440
We won't try what follows one by one.

76
00:05:06,450 --> 00:05:11,610
Instead, we're going to write the new functions, and later we can try them all together.

77
00:05:12,090 --> 00:05:13,170
So let's make it so.

78
00:05:13,170 --> 00:05:19,200
If it finds the word play inside my request, it will understand that I'm asking to play a video on

79
00:05:19,200 --> 00:05:19,980
YouTube.

80
00:05:20,160 --> 00:05:27,060
So speak and Hazel will hear this and say something like, Oh, what a great idea.

81
00:05:27,420 --> 00:05:29,280
I'll play it right now.

82
00:05:30,030 --> 00:05:37,130
So after telling me this, it will call pie what kit again and invoke a method called play on white,

83
00:05:37,980 --> 00:05:44,670
which means play on YouTube and it will search for my request on YouTube and reproduce it.

84
00:05:44,790 --> 00:05:50,130
So you put continue and I suppose that's enough, but we should try it in just a second.

85
00:05:50,700 --> 00:05:54,630
Let's make it so it hears the word joke within my request.

86
00:05:54,990 --> 00:05:55,680
Why?

87
00:05:56,400 --> 00:05:59,940
Because like this, we can make it execute pee jokes.

88
00:06:00,360 --> 00:06:01,680
So we call speak.

89
00:06:01,740 --> 00:06:04,470
So it tells us what's found in pee jokes.

90
00:06:04,830 --> 00:06:10,410
And we're going to call the method, get joke, continue, and we've got it.

91
00:06:12,290 --> 00:06:15,300
So let's make it give us information on the stock market.

92
00:06:15,320 --> 00:06:16,310
What do you think?

93
00:06:16,640 --> 00:06:21,680
Now Elif will check if it hears a say something like stock price.

94
00:06:22,580 --> 00:06:26,780
If it hears this within my request, it must generate a variable called share.

95
00:06:27,770 --> 00:06:30,230
And which share do we want to search for?

96
00:06:30,710 --> 00:06:33,200
This will be decided within my request.

97
00:06:33,500 --> 00:06:36,890
If we apply, split, it will divide it into two words.

98
00:06:37,460 --> 00:06:39,890
And let's take the index minus two.

99
00:06:40,370 --> 00:06:41,080
Why?

100
00:06:41,570 --> 00:06:48,920
Because if I say I want to know the price of Google shares, the word shares will be the index minus

101
00:06:48,920 --> 00:06:54,770
one because it's the last and the word Google will be in the index minus two.

102
00:06:55,490 --> 00:07:00,800
Finally, let's add the method strip so we can eliminate any prospective space in white.

103
00:07:02,390 --> 00:07:09,020
To clarify, this means when we pronounce the request in this way, that the title of share the interest

104
00:07:09,260 --> 00:07:10,670
will be in this position.

105
00:07:11,240 --> 00:07:16,550
So I'm sure you're saying that the user could pronounce their request in many distinct ways, effectively

106
00:07:16,550 --> 00:07:17,150
so.

107
00:07:17,450 --> 00:07:20,570
And this is a test, so you can understand how this works.

108
00:07:20,960 --> 00:07:26,600
If you want to contemplate all the possible alternatives, you would have to use logical operators to

109
00:07:26,600 --> 00:07:31,160
add other possibilities in order to implement certain ways to resolve the problem.

110
00:07:31,490 --> 00:07:36,980
So as you understand, we can't encompass all of this in video classes, and it wouldn't make much sense

111
00:07:36,980 --> 00:07:37,430
either.

112
00:07:37,820 --> 00:07:43,520
The most important is that you learn how to do it so that later you can get creative as to contemplate

113
00:07:43,520 --> 00:07:45,620
the alternatives of the real world.

114
00:07:46,340 --> 00:07:53,060
So returning to our project, we already have the name share that interests us stored within variable

115
00:07:53,060 --> 00:07:53,600
share.

116
00:07:53,630 --> 00:07:59,660
Now let's create the variable portfolio so that we have a dictionary where we can associate a stock

117
00:07:59,660 --> 00:08:01,760
with the ticker that corresponds.

118
00:08:02,900 --> 00:08:08,900
The ticker is the official initial that which will search for a determined company in the stock market.

119
00:08:09,770 --> 00:08:12,350
So, for example, let's put Apple stocks.

120
00:08:13,280 --> 00:08:21,590
If Hazel hears this word, we want her to to relate that a p p l is the name of the ticker of Apple.

121
00:08:22,760 --> 00:08:30,230
Another example is if she has Amazon that she relates with a m z n.

122
00:08:31,490 --> 00:08:38,570
So let's put one more example that can be Google whose initials are g0ol.

123
00:08:40,430 --> 00:08:42,240
You can try out as many as you want.

124
00:08:42,260 --> 00:08:47,630
I've only used these as an example, so as this could end up giving us an error, let's make it so.

125
00:08:47,630 --> 00:08:50,720
The following is all inside an error handling block.

126
00:08:52,190 --> 00:08:59,180
Let's create the variable search stock that's going to be equal to what is in portfolio within the index

127
00:08:59,180 --> 00:08:59,690
share.

128
00:08:59,900 --> 00:09:02,600
That is what it will receive when we talk.

129
00:09:03,950 --> 00:09:10,040
So once this variable is created, we're going to overwrite it so that it is equal to the object.

130
00:09:10,040 --> 00:09:19,070
Yahoo finance which we gave the abbreviation y, f, and here we will put ticker and within brackets

131
00:09:19,070 --> 00:09:20,450
the search stock.

132
00:09:21,320 --> 00:09:23,330
And thanks to the Library of Yahoo!

133
00:09:23,330 --> 00:09:27,800
Finance, this will search for our ticker within the dictionary.

134
00:09:28,430 --> 00:09:32,720
Let's save the response of this search inside a variable that can be called price.

135
00:09:33,080 --> 00:09:35,240
So later it gives us this information.

136
00:09:35,690 --> 00:09:43,520
Price will be equal to search stock info and as info will return a type of dictionary with lots of information.

137
00:09:43,760 --> 00:09:48,830
We're going to search only for the key, which is called regular market price.

138
00:09:50,480 --> 00:09:57,110
This key exists inside the dictionary that was created by Yahoo finance and will contain the search

139
00:09:57,110 --> 00:09:57,770
price.

140
00:09:58,220 --> 00:10:01,760
So up to now we have everything saved in variables.

141
00:10:01,760 --> 00:10:09,590
Now we need our assistant to inform us of this through speak with a literal string which can say I found

142
00:10:09,590 --> 00:10:16,370
it the price of and from here we call the variable share, which contains nothing more than the name

143
00:10:16,940 --> 00:10:23,630
and then we complement the phrase with is and finally called the variable which contains price.

144
00:10:23,630 --> 00:10:25,400
With this we shall have our answer.

145
00:10:26,090 --> 00:10:30,290
We just need to add a continue and we can leave try to go to accept.

146
00:10:31,100 --> 00:10:38,150
So in case there was an error which can happen, we want to receive a calm message like I am sorry but

147
00:10:38,150 --> 00:10:39,200
I didn't find it.

148
00:10:40,010 --> 00:10:46,880
We closed with a continue and well we have added many functions today and you can see the versatility

149
00:10:46,880 --> 00:10:50,810
of everything you can do with this virtual assistant in the next class.

150
00:10:50,810 --> 00:10:56,120
We'll put it to the test to see how it works and how it looks beyond this.

151
00:10:56,120 --> 00:10:58,820
It's up to you to add everything else you want.
