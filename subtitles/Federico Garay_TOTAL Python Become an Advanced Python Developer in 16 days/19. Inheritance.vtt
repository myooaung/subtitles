WEBVTT
1
00:00:07.880 --> 00:00:13.880
As we said at the beginning of the day, object oriented programming is based on six basic principles

2
00:00:13.880 --> 00:00:14.930
or pillars.

3
00:00:14.960 --> 00:00:21.890
Inheritance, polymorphism, cohesion, abstraction, coupling, and encapsulation.

4
00:00:22.010 --> 00:00:26.760
In this lecture, we are going to start explaining the concept of inheritance.

5
00:00:26.780 --> 00:00:34.520
Just like Brian can inherit some attributes from his father, Kevin, such as I color in programming.

6
00:00:34.520 --> 00:00:41.180
Inheritance is a process by which a child class can be created so that it inherits things from a parent

7
00:00:41.180 --> 00:00:44.360
class sharing the same methods and attributes.

8
00:00:44.390 --> 00:00:50.030
In addition to this, a child class can overwrite methods or attributes or even define new ones.

9
00:00:50.030 --> 00:00:51.710
But we're going to see that later.

10
00:00:52.220 --> 00:00:58.550
A child class can be created by simply passing the class we want to inherit from a parameter.

11
00:00:58.610 --> 00:01:05.360
For example, if we have a class animal and then a class bird and we want bird to inherit the methods

12
00:01:05.360 --> 00:01:11.510
and attributes of animal, we only have to pass the word animal in the parentheses of the declaration

13
00:01:11.510 --> 00:01:12.170
bird.

14
00:01:12.290 --> 00:01:15.050
And what do we want the inheritance for?

15
00:01:15.200 --> 00:01:20.630
Since the child class inherits the attributes and methods of the parent, it can be very useful when

16
00:01:20.630 --> 00:01:25.280
we have classes that resemble each other but have certain particularities.

17
00:01:25.550 --> 00:01:32.480
In this case, if we are going to have a mammal class and an insect class in addition to the bird class,

18
00:01:32.480 --> 00:01:39.890
it is likely that many of the methods of bird are repeated in the other classes, for example the born

19
00:01:39.890 --> 00:01:42.710
or die or breathe methods.

20
00:01:43.010 --> 00:01:48.950
So instead of defining a bunch of classes for each animal, we can take the common elements and create

21
00:01:48.950 --> 00:01:55.820
an animal class that contains methods and attributes in common and have others inherit those elements,

22
00:01:55.820 --> 00:02:01.370
thus respecting the dry philosophy, which is a programming mantra.

23
00:02:01.520 --> 00:02:06.350
Dry, dry, which stands for Don't Repeat Yourself.

24
00:02:06.980 --> 00:02:13.490
It consists of the philosophy of not repeating code unnecessarily, because the more duplicate code

25
00:02:13.490 --> 00:02:20.120
there is, the more difficult it will be to modify and the easier it will be to create inconsistencies,

26
00:02:20.570 --> 00:02:26.870
classes and inheritance help to avoid repeating code, making these abstractions and finding the common

27
00:02:26.870 --> 00:02:30.410
denominator to define a class from which the others inherit.

28
00:02:30.590 --> 00:02:35.750
It's a very complex but fundamental task in the world of programming.

29
00:02:35.750 --> 00:02:40.340
So let's go over to Pie Chart to learn about inheritance firsthand.

30
00:02:40.910 --> 00:02:46.520
So I believe the best way to learn about inheritance from scratch is to create two empty classes.

31
00:02:46.700 --> 00:02:49.970
One will be animal colon and will add pass.

32
00:02:49.970 --> 00:02:55.490
So it's pretty empty and the other one will be bird, which will receive animal in brackets.

33
00:02:57.330 --> 00:03:00.120
This means it will inherit from animal, which is empty.

34
00:03:00.120 --> 00:03:01.560
But this doesn't matter yet.

35
00:03:02.530 --> 00:03:07.810
So we have our two classes and we said that bird will inherit from animal.

36
00:03:08.050 --> 00:03:13.000
First, we'll learn how to verify if an inheritance has been created.

37
00:03:13.480 --> 00:03:20.050
So let's print bird dot and look for bases, which is a property of bird that will tell us where this

38
00:03:20.050 --> 00:03:21.590
class is inheriting from.

39
00:03:21.610 --> 00:03:24.160
It'll be quite useful if this wasn't visible.

40
00:03:25.060 --> 00:03:31.120
So if we execute this archive named Inheritance, we'll see that bird is a class that inherits from

41
00:03:31.120 --> 00:03:32.230
the animal class.

42
00:03:32.650 --> 00:03:34.630
So this gives us the answer.

43
00:03:35.110 --> 00:03:41.140
On the other hand, if I print the subclasses property of animal, which is this one, it has brackets

44
00:03:41.140 --> 00:03:43.300
at the end and I execute it.

45
00:03:43.330 --> 00:03:49.660
It tells me the animal leaves its inheritance to bird, just that single class for now.

46
00:03:50.110 --> 00:03:55.270
And if we had more classes inheriting from Animal, we'd have a list of all those classes.

47
00:03:55.630 --> 00:03:58.870
Now comes the most surprising feature of inheritance.

48
00:03:59.140 --> 00:04:05.590
So we'll create an animal, a method named born, which is characteristic of animals.

49
00:04:06.310 --> 00:04:08.440
And of course, there will be self.

50
00:04:08.440 --> 00:04:13.720
And the only task born will carry out is saying this animal has been born.

51
00:04:14.080 --> 00:04:15.310
What a great time.

52
00:04:16.270 --> 00:04:18.190
And so we have a method for animal.

53
00:04:18.190 --> 00:04:20.410
Yet bird doesn't have a method.

54
00:04:20.860 --> 00:04:23.280
So we'll create a bird instance.

55
00:04:23.290 --> 00:04:28.420
Let's create Tweetie once again and say that it is a bird there.

56
00:04:29.080 --> 00:04:33.760
Now I'll call Tweetie and type A dot to see its methods and properties.

57
00:04:34.270 --> 00:04:35.020
Oh, wow.

58
00:04:35.050 --> 00:04:37.420
Tweetie, which is a bird that is.

59
00:04:37.420 --> 00:04:39.880
It belongs to a class with no methods.

60
00:04:39.940 --> 00:04:43.660
Has the born method now which actually belongs to Animal?

61
00:04:43.960 --> 00:04:44.650
Yes.

62
00:04:44.650 --> 00:04:47.800
Tweetie has received that method through inheritance.

63
00:04:48.280 --> 00:04:51.910
So we choose born, print it and it reads.

64
00:04:51.910 --> 00:04:53.950
This animal has been born.

65
00:04:54.130 --> 00:04:57.340
Tweetie could be born thanks to inheritance.

66
00:04:58.130 --> 00:05:05.030
So if I created another class named mammals, reptiles, insects or fish which belonged to the animal,

67
00:05:05.060 --> 00:05:11.480
all those animals would be able to be born, i.e. they would call that method without me creating it

68
00:05:11.480 --> 00:05:12.860
for each class I had.

69
00:05:13.430 --> 00:05:14.240
This is great.

70
00:05:14.240 --> 00:05:20.750
As we adopt the dry philosophy, we don't repeat ourselves and if we have to modify the bond method,

71
00:05:20.750 --> 00:05:25.340
we'll just change it here and it will be set up for all the classes that inherit it.

72
00:05:25.990 --> 00:05:29.910
So now in animal we'll create some attributes besides the method.

73
00:05:29.920 --> 00:05:34.090
So let's type def and double underscore to enter in it.

74
00:05:35.290 --> 00:05:41.440
The first attribute which is mandatory will be self and we'll also add age and colour.

75
00:05:42.800 --> 00:05:49.490
Then we add self doubt age which will be equal to age and self colour will be equal to colour.

76
00:05:50.060 --> 00:05:53.180
So I repeat, this belongs to the animal class.

77
00:05:53.330 --> 00:06:00.590
So since all this is created in this class and bird inherits from animal, tweety starts complaining.

78
00:06:00.800 --> 00:06:01.890
So why so?

79
00:06:01.910 --> 00:06:05.090
Because I haven't passed any parameter in brackets.

80
00:06:05.090 --> 00:06:10.010
And it requires that I pass an age, say to and a color like yellow.

81
00:06:10.040 --> 00:06:12.110
And now it stops complaining.

82
00:06:12.860 --> 00:06:17.990
So if I print Tweetie through its color attribute and execute it, I'll have yellow.

83
00:06:18.110 --> 00:06:24.140
I was able to execute its color despite the fact that the bird class doesn't have an assigned attribute.

84
00:06:24.890 --> 00:06:31.220
So I think it's clear and we're ready to go on to the next lecture where we'll delve deeper into inheritance.

85
00:06:31.220 --> 00:06:38.360
Besides inheriting methods and attributes, we can also modify them or extend them to each of our animals,

86
00:06:38.360 --> 00:06:40.190
such as the birds.

87
00:06:40.640 --> 00:06:42.320
So let's go to the next lecture.

88
00:06:42.350 --> 00:06:44.120
This is getting exciting.
