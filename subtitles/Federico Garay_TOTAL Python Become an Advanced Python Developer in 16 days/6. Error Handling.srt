1
00:00:07,640 --> 00:00:09,690
Bugs are definitely going to happen.

2
00:00:09,710 --> 00:00:16,430
I don't want to be a prophet of doom, but nobody is perfect and bugs are definitely going to happen,

3
00:00:16,430 --> 00:00:21,530
especially when the user ends up using your code in an unexpected way.

4
00:00:21,560 --> 00:00:28,310
Although we cannot avoid errors, we can anticipate what the most common errors might be and prepare

5
00:00:28,310 --> 00:00:31,910
our code so that it does not break every time there is an error.

6
00:00:31,940 --> 00:00:39,300
On top of that, we can also pre establish how our program should behave when an unexpected error occurs.

7
00:00:39,320 --> 00:00:45,980
So far, every time an error occurs in your code, for example, you try to add an integer and a string.

8
00:00:46,100 --> 00:00:49,730
The program there is an error message and stops completely.

9
00:00:50,150 --> 00:00:55,820
Thanks to error handling, we can make the code continue executing the rest of the code without stopping.

10
00:00:55,850 --> 00:01:02,090
Error handling can be done thanks to three key words which are try exception.

11
00:01:02,090 --> 00:01:05,640
And finally we use try to tell Python.

12
00:01:05,660 --> 00:01:10,670
Try running the following code to see if it flows smoothly or if any problems occur.

13
00:01:11,210 --> 00:01:17,720
Then we use except to tell Python if an error occurs instead of interrupting the code and displaying

14
00:01:17,720 --> 00:01:20,990
your ugly red messages, please run this code.

15
00:01:20,990 --> 00:01:23,540
Which is the same thing as saying Python.

16
00:01:23,540 --> 00:01:28,520
Let me take care of informing the user about the problem and you go on with the rest of the code and

17
00:01:28,520 --> 00:01:33,310
then we can use finally to say it doesn't matter if there is an error or not.

18
00:01:33,320 --> 00:01:36,140
Whatever happens, always run this.

19
00:01:36,140 --> 00:01:41,990
Let's jump into the computer and see what this looks like in real life so it will understand error handling

20
00:01:41,990 --> 00:01:44,510
better will start by committing errors.

21
00:01:44,630 --> 00:01:50,360
So let's create a very simple function named addition which will print something like ten plus ten.

22
00:01:50,480 --> 00:01:54,140
Nothing can go wrong once the numbers were added up will print.

23
00:01:54,170 --> 00:01:56,240
Thanks for adding quite simple.

24
00:01:57,230 --> 00:02:01,160
Then we call it execute it and things couldn't get easier.

25
00:02:01,520 --> 00:02:05,360
It reads 20 and thanks for adding and the code has ended.

26
00:02:05,570 --> 00:02:07,880
This program contains no errors.

27
00:02:08,720 --> 00:02:12,440
However, we'll let the user decide which numbers to enter.

28
00:02:12,680 --> 00:02:19,670
So instead of typing, print ten plus ten will make the variable n one be equal to an input integer

29
00:02:19,670 --> 00:02:27,110
from the user which will be asked for the first number and we'll also create the variable and two that's

30
00:02:27,110 --> 00:02:32,210
equal to an input integer from the user who will be asked for the second number.

31
00:02:32,630 --> 00:02:33,920
So let's keep it simple.

32
00:02:34,970 --> 00:02:43,130
After this, we'll print n one plus n two and this can go wrong so everything is ready to be executed.

33
00:02:43,370 --> 00:02:47,210
We do it and now the user enter the number, say 15.

34
00:02:47,390 --> 00:02:53,330
But imagine that instead of entering number ten, they make a mistake and type ten with words.

35
00:02:53,780 --> 00:02:55,130
So what's going to happen?

36
00:02:56,000 --> 00:02:57,800
Well, that is obviously an error.

37
00:02:58,220 --> 00:03:04,010
It's a value error, which basically means that the software cannot convert our value to integer since

38
00:03:04,010 --> 00:03:06,110
it is not compatible with any number.

39
00:03:06,320 --> 00:03:07,870
So this is not possible.

40
00:03:07,880 --> 00:03:11,630
The software stopped processing and it didn't execute our line reading.

41
00:03:11,780 --> 00:03:12,920
Thanks for adding.

42
00:03:13,490 --> 00:03:19,010
Therefore it would be useful to have means for covering the possibilities of errors in programs where

43
00:03:19,010 --> 00:03:21,500
we depend on the user doing the right thing.

44
00:03:22,070 --> 00:03:24,350
So the structure try accept.

45
00:03:24,350 --> 00:03:31,370
And finally that Phil showed you in the video is written as follows first type try and colon then press

46
00:03:31,370 --> 00:03:37,790
enter and you'll go to the next line which is already indented, and then you'll enter the code you

47
00:03:37,790 --> 00:03:39,170
want to check.

48
00:03:40,070 --> 00:03:41,270
Secondly, type.

49
00:03:41,270 --> 00:03:47,540
Except in order to type the code that will be executed if there's an error.

50
00:03:49,180 --> 00:03:55,180
And third type, finally, which is the code that will be executed anyway.

51
00:03:56,830 --> 00:04:02,500
And there's one more word we can use here, which is else you can type it after, except because if

52
00:04:02,500 --> 00:04:06,280
you enter else, you'll be saying, this is the code I want to try.

53
00:04:06,310 --> 00:04:09,480
This is the code that will be executed if there's an error.

54
00:04:09,490 --> 00:04:13,600
And this is the code that will be executed if there's no error.

55
00:04:14,620 --> 00:04:21,340
So this means you can add extra code to try, since if there is no error, the try code will be executed.

56
00:04:21,820 --> 00:04:25,120
Then you can add extra code in case everything went fine.

57
00:04:25,510 --> 00:04:30,430
So in the case of addition, first will delete this call and open it inside.

58
00:04:30,430 --> 00:04:31,060
Try.

59
00:04:31,600 --> 00:04:34,030
I want this to be tested by the code.

60
00:04:34,540 --> 00:04:36,280
So we'll call addition here.

61
00:04:36,280 --> 00:04:42,580
And if our addition doesn't work, will want a print that says something went wrong.

62
00:04:43,300 --> 00:04:44,860
So we're not being very specific.

63
00:04:44,860 --> 00:04:47,290
We're just pointing out that something went wrong.

64
00:04:47,500 --> 00:04:51,910
So then else, what happens if the addition works just fine?

65
00:04:52,570 --> 00:04:57,550
Besides showing the result and giving thanks, the software could also show a message saying something

66
00:04:57,550 --> 00:04:59,600
like, You did great.

67
00:04:59,620 --> 00:05:00,550
That'd be nice.

68
00:05:00,970 --> 00:05:05,060
And finally, we'll be executed regardless of what happens.

69
00:05:05,080 --> 00:05:07,480
It won't matter whether there's an error or not.

70
00:05:07,540 --> 00:05:13,210
We can type something like that all to know that we've gotten to that point in our code.

71
00:05:13,540 --> 00:05:18,730
Well, we have everything ready to be tested, so let's execute this and we'll make an error intentionally

72
00:05:18,730 --> 00:05:23,380
by typing 13 first, then letter D, and we'll press enter.

73
00:05:23,560 --> 00:05:25,750
So something went wrong, that's all.

74
00:05:26,710 --> 00:05:31,510
In other words, our software tried to do this, and since there was an error, it printed accept and

75
00:05:31,510 --> 00:05:33,790
finally leaving else out.

76
00:05:34,090 --> 00:05:36,280
So let's do it again without errors.

77
00:05:36,430 --> 00:05:41,320
I'll type 23 and 12 and so it says 35.

78
00:05:41,350 --> 00:05:42,220
Thanks for adding.

79
00:05:42,490 --> 00:05:43,450
You did great.

80
00:05:44,050 --> 00:05:47,080
Else was executed because there wasn't any exception.

81
00:05:47,080 --> 00:05:51,550
And that's all which is the finally was executed regardless of the result.

82
00:05:52,240 --> 00:05:59,020
So in fact, when checking for errors you'll surely use try and accept but else and finally are not

83
00:05:59,020 --> 00:05:59,950
that necessary.

84
00:06:00,400 --> 00:06:02,050
You can even use one of them.

85
00:06:02,620 --> 00:06:07,840
You're most likely to use else more than finally, which is rarely applied, since it's not common that

86
00:06:07,840 --> 00:06:11,620
someone wants to write a code without taking its result into account.

87
00:06:11,920 --> 00:06:16,280
So I also want you to see that there are several types of exceptions that you can create.

88
00:06:16,300 --> 00:06:18,550
Let's comment out this so it's not executed.

89
00:06:18,550 --> 00:06:21,280
And now let's call addition and execute it.

90
00:06:21,490 --> 00:06:26,170
And if we enter a letter, we get a value error, which is a type of error.

91
00:06:26,770 --> 00:06:31,540
Now imagine that we want to concatenate this with an integer such as n one.

92
00:06:31,780 --> 00:06:39,160
We already know we'll get an error, so I'll execute and type something like 12 plus 12 and I'll get

93
00:06:39,160 --> 00:06:43,210
an error anyway because I cannot concatenate the string with an integer like this.

94
00:06:43,540 --> 00:06:46,660
Now I get a type error, which is another type of error.

95
00:06:46,750 --> 00:06:48,400
There are several types of them.

96
00:06:49,300 --> 00:06:55,510
So if you go to the documents and look for built in exceptions, you'll find large list of specific

97
00:06:55,510 --> 00:06:58,060
exceptions along with their descriptions.

98
00:06:58,300 --> 00:07:04,330
For instance, you can find type error and value error.

99
00:07:04,870 --> 00:07:10,240
So preparing your code so that it can handle several types of errors is something you can do easily.

100
00:07:10,870 --> 00:07:14,500
So let's delete this addition and uncomment this block of code.

101
00:07:15,760 --> 00:07:18,460
This is how you can prepare your code in.

102
00:07:18,460 --> 00:07:24,040
Except if you get the type error such as when concatenating incorrectly, you can type a message that

103
00:07:24,040 --> 00:07:27,760
reads you are trying to concatenate different types.

104
00:07:28,870 --> 00:07:30,700
And why would we add a second?

105
00:07:30,700 --> 00:07:37,240
Except because we want to handle a value error, which is the one we got when trying to convert a string

106
00:07:37,270 --> 00:07:44,110
to an integer without the proper value so we can return another message such as this is not a number

107
00:07:44,410 --> 00:07:46,420
and those are different messages.

108
00:07:46,570 --> 00:07:49,210
So let's execute this without errors.

109
00:07:49,210 --> 00:07:51,310
Let's type 12 and 15.

110
00:07:51,580 --> 00:07:55,120
We couldn't concatenate and we got a more specific message.

111
00:07:55,480 --> 00:07:58,150
It tells us we cannot concatenate different types.

112
00:07:58,600 --> 00:08:02,740
The software handled a specific error and returned a message according to that error.

113
00:08:03,160 --> 00:08:09,490
But if we make another error, such as entering 34 and then hello, it tells us that this is not a number

114
00:08:09,490 --> 00:08:14,950
because this is a value error and our code has been prepared to return a message according to value

115
00:08:14,950 --> 00:08:15,490
errors.

116
00:08:15,640 --> 00:08:20,410
So in this way, you can prepare your code so that it can handle each of the errors on the long list.

117
00:08:20,860 --> 00:08:24,940
And as you can see, our code can be prepared for any unexpected event.

118
00:08:25,210 --> 00:08:30,220
Now that we know how to do this, we can make sure the user has entered a number and nothing more without

119
00:08:30,220 --> 00:08:31,750
typing so much code.

120
00:08:31,930 --> 00:08:36,810
So let's create a function named ask number which won't require parameters.

121
00:08:36,820 --> 00:08:40,500
It will only require that the user enters a number through an input.

122
00:08:40,540 --> 00:08:46,930
So we used to do it using while, which iterated over several things and then we had to use break and

123
00:08:46,930 --> 00:08:47,710
continue.

124
00:08:47,920 --> 00:08:49,290
And type a lot of text.

125
00:08:49,320 --> 00:08:52,170
So now we can make this long story short.

126
00:08:52,560 --> 00:08:57,870
So let's type while true and be sure to enter some command to make this loop stop.

127
00:08:58,170 --> 00:09:02,730
This loop will verify if number is equal to the integer of the user's input.

128
00:09:03,750 --> 00:09:09,900
When we require the user to enter a number, we'll now create an except we don't have to point out the

129
00:09:09,900 --> 00:09:10,950
specific error.

130
00:09:10,950 --> 00:09:12,480
So let's keep it simple.

131
00:09:12,480 --> 00:09:20,280
This accept will be accompanied by a print that says that is not a number and we'll also create an else.

132
00:09:20,700 --> 00:09:27,210
If the user enters a number, the software will print a string literal that says you have entered number

133
00:09:27,360 --> 00:09:30,720
and it will return that number using the number variable.

134
00:09:31,290 --> 00:09:38,340
So we mustn't forget that after the user has answered correctly, we need to add a break and remember

135
00:09:38,340 --> 00:09:40,170
that break stops the loop.

136
00:09:40,170 --> 00:09:43,020
So it would be the only way to get out of there.

137
00:09:43,440 --> 00:09:49,350
In order to check if we're getting out correctly, we'll create a print outside the loop that says thanks.

138
00:09:50,040 --> 00:09:53,730
Then we call the function ask number and execute it.

139
00:09:53,880 --> 00:09:55,380
So it's asking for a number.

140
00:09:55,380 --> 00:09:57,720
So I'll try to commit all kinds of errors.

141
00:09:57,750 --> 00:09:58,830
I'll enter feed.

142
00:09:59,430 --> 00:10:00,750
That is not the number.

143
00:10:00,750 --> 00:10:01,740
Enter a number.

144
00:10:01,740 --> 00:10:03,210
So the loop started again.

145
00:10:04,140 --> 00:10:09,840
I'll enter Q W The same happens, I'll enter at It's not possible.

146
00:10:10,170 --> 00:10:15,270
Now I'm going to answer correctly by entering five and it says you have entered number five.

147
00:10:16,320 --> 00:10:19,530
Well, this was a way to take advantage of error handling.

148
00:10:19,740 --> 00:10:25,680
We can make sure the user enters what is expected and that we do not commit errors which can make our

149
00:10:25,680 --> 00:10:26,910
program crash.

150
00:10:26,910 --> 00:10:28,230
So that's all for now.

151
00:10:28,230 --> 00:10:32,760
And thanks so much for being here and we'll see you in the next lesson.
