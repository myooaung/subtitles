WEBVTT
1
00:00:07.820 --> 00:00:16.610
Although the expression double star acquired is very strange to pronounce quarks, it is very practical

2
00:00:16.610 --> 00:00:21.110
to use because it goes one step further to star args.

3
00:00:21.470 --> 00:00:25.670
Its correct pronunciation is key word args.

4
00:00:25.970 --> 00:00:30.770
This already gives us an idea of the type of data it works with.

5
00:00:31.130 --> 00:00:34.850
If we talk about keywords, we talk about dictionaries.

6
00:00:35.030 --> 00:00:36.680
Now let me explain it to you.

7
00:00:36.890 --> 00:00:43.850
The declaration of the key word args in functions is similar to that of the args.

8
00:00:44.180 --> 00:00:50.030
You write the word between parentheses and here the expression keyword.

9
00:00:50.030 --> 00:00:52.430
ARGs is also a convention.

10
00:00:52.880 --> 00:01:01.040
The system would accept that you write any word on the condition that is preceded by two stars together.

11
00:01:01.190 --> 00:01:06.860
Anyway, I recommend again that you use keyword args respecting conventions.

12
00:01:07.430 --> 00:01:14.990
If our function expects to receive keyword args, this means we can write as many arguments as we want

13
00:01:15.170 --> 00:01:16.460
as with the ARGs.

14
00:01:16.700 --> 00:01:22.850
But in addition, we can also give a name to the arguments that we enter when calling this function.

15
00:01:23.510 --> 00:01:29.690
Thus being able to access them inside the function through a dictionary and obtaining the complete item

16
00:01:29.690 --> 00:01:32.240
or only its key or its value.

17
00:01:32.270 --> 00:01:37.760
You will see this in practice as well as the way we mix args with keyword args.

18
00:01:38.090 --> 00:01:39.860
Let's go over to the code.

19
00:01:40.760 --> 00:01:46.040
So the first thing I'm going to do is demonstrate that the keyword args work with dictionaries.

20
00:01:46.310 --> 00:01:53.030
We'll do this by defining some again, but this time we'll be using two asterisks and the keyword keyword

21
00:01:53.030 --> 00:01:53.810
args.

22
00:01:53.930 --> 00:01:55.010
A colon.

23
00:01:55.340 --> 00:02:02.540
And what our function will do here is print the type or whatever thing we pass as keyword args.

24
00:02:03.640 --> 00:02:10.060
Then we'll name this function some in which we will pass three compound elements in the form of a dictionary.

25
00:02:10.150 --> 00:02:16.030
For instance, X equals three, y equals five and Z equals two.

26
00:02:17.380 --> 00:02:19.780
As you can see, this is not really a dictionary.

27
00:02:19.780 --> 00:02:21.350
It's between brackets.

28
00:02:21.370 --> 00:02:25.300
They are arguments passed with inequality value without a colon.

29
00:02:25.510 --> 00:02:28.750
The variable names are not between quotation marks.

30
00:02:28.750 --> 00:02:30.670
That is, they're not strings.

31
00:02:31.570 --> 00:02:35.500
Actually, they are pairs consisting of a name and a value.

32
00:02:35.830 --> 00:02:41.710
This is not a dictionary, but once I execute it, a function will convert it into a dictionary.

33
00:02:42.310 --> 00:02:45.910
As you can see, what I get is a thick data type.

34
00:02:46.030 --> 00:02:47.530
That is a dictionary.

35
00:02:47.530 --> 00:02:49.180
Although it wasn't that before.

36
00:02:49.270 --> 00:02:51.130
Now it is a dictionary.

37
00:02:51.520 --> 00:02:55.210
This is a way of explaining what we're doing with the keyword arguments.

38
00:02:55.690 --> 00:02:58.120
Now we're going to see how they really work.

39
00:02:58.270 --> 00:03:00.910
We'll keep this declaration and the list of items.

40
00:03:00.910 --> 00:03:06.340
And now we'll create a function that can go through each one of the values and keys we have here so

41
00:03:06.340 --> 00:03:08.410
as to see them printed on the screen.

42
00:03:09.130 --> 00:03:16.420
So what it's going to do is for each key and value of the group of elements that are inside the keyword

43
00:03:16.420 --> 00:03:18.370
args dot items.

44
00:03:18.370 --> 00:03:23.890
Remember, they're dictionaries now, so we can access to the elements, keys and values.

45
00:03:24.820 --> 00:03:29.200
For each, this function will print a string literal that says key.

46
00:03:29.620 --> 00:03:35.380
It's equal to value whatever there is in each iteration for the tuple we originally have here.

47
00:03:35.890 --> 00:03:43.510
So let's execute it and we'll see that we have x equals three, y equals five and z equals two.

48
00:03:43.600 --> 00:03:45.280
In a more organized way.

49
00:03:45.280 --> 00:03:46.540
So this worked.

50
00:03:47.400 --> 00:03:51.540
So what if I want to add up the values apart from showing the groups here?

51
00:03:52.050 --> 00:03:59.100
Well, I could add a variable named total to the beginning of my function starting at zero, then hereafter

52
00:03:59.100 --> 00:04:05.200
printing each line will make it so that the total is equal to its value, plus the number that's inside

53
00:04:05.200 --> 00:04:05.880
the value.

54
00:04:06.420 --> 00:04:11.910
And finally, we'll also need this function to return the total so as to see it on the screen.

55
00:04:12.330 --> 00:04:13.620
So I do so.

56
00:04:14.130 --> 00:04:20.310
And we'll also need for some to be inside the print so that the total is also printed.

57
00:04:21.260 --> 00:04:22.670
So let's execute it.

58
00:04:22.670 --> 00:04:30.230
And now we have the same as before plus ten, which is the result of adding three plus five plus two.

59
00:04:30.680 --> 00:04:32.150
So this is correct.

60
00:04:32.420 --> 00:04:35.330
So this is how we use keyword arguments.

61
00:04:35.900 --> 00:04:41.930
We use them to pass elements consisting of a key and a value so that they can determine what to do with

62
00:04:41.930 --> 00:04:42.770
each of them.

63
00:04:42.860 --> 00:04:47.580
Add them up, use them, show is the name of the variables that contain those values.

64
00:04:47.600 --> 00:04:49.220
There are many possibilities.

65
00:04:49.430 --> 00:04:57.230
So what follows now is to learn how to merge normal arguments args and keyword args into one function.

66
00:04:57.710 --> 00:05:03.560
In other words, a function that can have definite arguments, such as when we pass number one.

67
00:05:03.710 --> 00:05:04.520
Number two.

68
00:05:04.550 --> 00:05:12.830
You know, that kind of variables as well as receive asterisk args and double asterisk keyword args.

69
00:05:14.120 --> 00:05:16.590
Let me tell you, I've typed them in the right order.

70
00:05:16.610 --> 00:05:17.900
This is not random.

71
00:05:18.050 --> 00:05:21.770
First the normal values, then the args arguments.

72
00:05:21.770 --> 00:05:23.990
And lastly, the keyword args.

73
00:05:25.300 --> 00:05:27.360
And what will our function do with all of this?

74
00:05:27.370 --> 00:05:31.090
So let's change this a bit so we'll no longer need total.

75
00:05:31.180 --> 00:05:34.810
And first, let's make it print whatever there is in value, number one.

76
00:05:35.140 --> 00:05:42.760
So we type a string literal that says the first value is we call and then put number one, let's copy

77
00:05:42.760 --> 00:05:48.220
this line so as to do the same with the second normal argument, which will be number two.

78
00:05:48.520 --> 00:05:52.690
And here I'll say that the second value is number two.

79
00:05:54.210 --> 00:05:59.700
Then we want a full loop to show us that each of the arguments the user passes through the invocation

80
00:05:59.700 --> 00:06:00.810
of this function.

81
00:06:01.020 --> 00:06:08.910
We'll do this by using a for loop that for each argument in arguments prints a string literal that says

82
00:06:08.940 --> 00:06:11.370
arg equals arg.

83
00:06:12.840 --> 00:06:14.010
So this will work.

84
00:06:14.010 --> 00:06:19.710
And remember, the first arg is just a string since it's written between quotation marks and the second

85
00:06:19.710 --> 00:06:24.270
ARG is the invocation of the variable since it's written between curly brackets.

86
00:06:24.600 --> 00:06:27.900
So this will show us each argument the user has passed.

87
00:06:29.460 --> 00:06:34.290
Finally, we're going to use this second loop to show us what's in these keyword arguments here.

88
00:06:34.710 --> 00:06:40.260
We just need to delete this last line since we don't need total for this example and we'll make the

89
00:06:40.260 --> 00:06:42.000
user pass some here.

90
00:06:42.360 --> 00:06:46.650
Well, this name doesn't make sense anymore, but we'll leave it just as it was.

91
00:06:46.680 --> 00:06:47.400
Okay.

92
00:06:47.880 --> 00:06:50.060
Now we'd better do the right thing.

93
00:06:50.070 --> 00:06:54.630
We'll name this function test, and when calling it down here, we'll also name it.

94
00:06:54.660 --> 00:06:55.200
Test.

95
00:06:55.200 --> 00:06:57.990
Readability is paramount for Python lists.

96
00:06:59.550 --> 00:07:00.320
All right.

97
00:07:00.330 --> 00:07:06.240
First, we'll pass a couple of normal arguments to test these correspond with number one and number

98
00:07:06.240 --> 00:07:06.810
two.

99
00:07:06.870 --> 00:07:09.330
Let's put 15 and 50.

100
00:07:09.630 --> 00:07:13.400
Then we'll pass several arguments and the amount we want.

101
00:07:13.410 --> 00:07:17.610
So I'll pass one, two, three, four, ten.

102
00:07:17.610 --> 00:07:18.780
Whatever you want.

103
00:07:18.810 --> 00:07:24.630
The system will recognize them as asterisk args because it has already read the first two normal arguments

104
00:07:24.630 --> 00:07:25.470
we have here.

105
00:07:25.830 --> 00:07:31.590
So in order for the system to know what comes next, that is the keyword argument will start typing

106
00:07:31.590 --> 00:07:33.900
elements containing name and value.

107
00:07:34.050 --> 00:07:39.180
For example, x is equal to between quotation marks the word one.

108
00:07:39.300 --> 00:07:46.410
Then we'll have Y with value between quotation marks two and finally z with the value between quotation

109
00:07:46.410 --> 00:07:47.520
marks three.

110
00:07:47.910 --> 00:07:50.640
These are just strings to show variety.

111
00:07:50.910 --> 00:07:53.550
So what happens if I execute this?

112
00:07:54.120 --> 00:07:56.520
Well, the first value is 15.

113
00:07:56.550 --> 00:07:58.230
The second one is 50.

114
00:07:58.230 --> 00:08:01.890
Then 100, 200, 304 hundred.

115
00:08:01.890 --> 00:08:04.470
And finally, x equals one.

116
00:08:04.500 --> 00:08:08.100
Y equals two and Z equals three.

117
00:08:08.610 --> 00:08:11.700
Thanks to how I structured the parameters I passed.

118
00:08:11.730 --> 00:08:14.050
Normal arg or keyword args.

119
00:08:14.070 --> 00:08:18.300
The system has been able to determine their type and identify them perfectly.

120
00:08:19.050 --> 00:08:24.120
Another trick I want to teach you is the fact that you can also use the asterisk of args and keyword

121
00:08:24.120 --> 00:08:28.170
args to unpack tuples lists or dictionaries.

122
00:08:29.050 --> 00:08:36.340
Suppose that instead of having this invocation with so many values, I had a list of ARGs that contained

123
00:08:36.340 --> 00:08:37.780
all of these values.

124
00:08:37.780 --> 00:08:40.690
We put them here but will enclose them in a list.

125
00:08:40.960 --> 00:08:47.470
And also I have keyword args that contains a dictionary where we'll have x which we need to type between

126
00:08:47.470 --> 00:08:51.280
quotation marks this time colon the word one.

127
00:08:51.790 --> 00:08:59.230
And after this the second value also between quotation marks y colon two as a string.

128
00:09:00.460 --> 00:09:05.350
Then the third value which will be z colon the word three.

129
00:09:05.980 --> 00:09:10.440
And now we can delete all of this and just let test pass both normal arguments.

130
00:09:10.450 --> 00:09:11.830
So will this work?

131
00:09:11.860 --> 00:09:13.690
Let's execute it and see.

132
00:09:14.020 --> 00:09:18.130
So it didn't work because it only asked for the two normal arguments.

133
00:09:18.550 --> 00:09:25.180
What we should add here is that it also asks for asterisks args, which is the name of the first list.

134
00:09:25.180 --> 00:09:30.610
Comma, asterisk, asterisk, keyword args which is the name of this dictionary.

135
00:09:31.450 --> 00:09:36.550
So if we execute it now, it will show us everything we had because we were able to unpack them one

136
00:09:36.550 --> 00:09:37.240
by one.

137
00:09:37.480 --> 00:09:39.790
Thanks to the asterisk we put in the name.

138
00:09:40.060 --> 00:09:44.440
So here I could have put dogs, cats, books, anything I wanted.

139
00:09:44.800 --> 00:09:48.130
And it would have worked either way if I'd put the same word here.

140
00:09:49.390 --> 00:09:52.060
So I hope this doesn't get harder for you to understand.

141
00:09:52.180 --> 00:09:57.580
We have some exercises for you to practice, so I hope you can make the most of them and remember to

142
00:09:57.580 --> 00:09:58.520
ask questions.

143
00:09:58.540 --> 00:10:04.090
That's why we have the Q&amp;A section, as this may get a little complicated, but we're always here to

144
00:10:04.090 --> 00:10:04.750
help you.

145
00:10:04.840 --> 00:10:06.310
So let's keep going.

146
00:10:06.340 --> 00:10:07.930
This is getting harder yet.

147
00:10:07.930 --> 00:10:08.530
Funny.

148
00:10:08.740 --> 00:10:09.940
See you soon.
