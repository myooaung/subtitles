1
00:00:08,090 --> 00:00:12,190
Now we know how to make it so that only registered users can access this site.

2
00:00:12,200 --> 00:00:16,640
But for now, all the users who successfully log in will see the same information.

3
00:00:17,240 --> 00:00:20,870
Be it win ten, be it Peter, Mark, or whoever.

4
00:00:21,170 --> 00:00:22,640
And that's not the idea.

5
00:00:23,750 --> 00:00:29,870
In this lesson, we're going to see that the system only shows each user his own information, the task

6
00:00:29,870 --> 00:00:35,390
he or she is created, and not those of others, but as we have not yet created, a form that allows

7
00:00:35,390 --> 00:00:37,370
you to create new users from the site.

8
00:00:37,460 --> 00:00:40,010
We will learn how to do this in the next lesson.

9
00:00:40,430 --> 00:00:43,580
For now, we're going to create a new user through the admin panel.

10
00:00:43,580 --> 00:00:47,630
So let's go to admin and come to users and go to add.

11
00:00:48,370 --> 00:00:51,070
And the name this new user has is Alex.

12
00:00:51,370 --> 00:00:53,320
And assign him his own password.

13
00:00:54,010 --> 00:00:56,890
We save it and we already have a new user.

14
00:00:56,920 --> 00:00:59,550
Alex, So we can close here now.

15
00:00:59,560 --> 00:01:04,450
And now if I log out as 110 and log in as Alex with my own password.

16
00:01:04,780 --> 00:01:10,780
I can see for now the tasks that win ten has created, and this would be a huge security flaw.

17
00:01:10,810 --> 00:01:16,570
Alex can see the items in the Win ten list, but Win ten is supposed to be the owner of these tasks

18
00:01:16,750 --> 00:01:19,450
and therefore only win ten should be able to see them.

19
00:01:19,750 --> 00:01:26,290
This limitation that we want to set should be coded in views because as we're seeing here, when we

20
00:01:26,290 --> 00:01:31,240
display the pending list, what the program does is return it to everything in the model.

21
00:01:32,170 --> 00:01:37,720
It looks for all the objects which in this context are called tasks and displays them all.

22
00:01:38,710 --> 00:01:44,380
So we're going to modify this using a method called get context data, which will allow us to receive

23
00:01:44,380 --> 00:01:47,110
only certain data depending on the context.

24
00:01:47,320 --> 00:01:54,040
This way, if the context is Alex, we will only receive data from Alex and not from Wind ten or any

25
00:01:54,040 --> 00:01:54,790
other user.

26
00:01:55,180 --> 00:01:59,110
So let's override this method so that it behaves as we want it to.

27
00:01:59,530 --> 00:02:05,470
Inside the pending list class, we will generate the function putting death and the name of the method,

28
00:02:05,470 --> 00:02:11,350
which is get context data and we're going to remove almost all of its parameters.

29
00:02:11,890 --> 00:02:15,220
We only want to leave self and quads.

30
00:02:16,540 --> 00:02:21,790
And these are the two elements that this method is going to need so that we can overwrite it.

31
00:02:21,970 --> 00:02:23,920
So let's set the context value.

32
00:02:23,920 --> 00:02:30,250
So I say that context is going to be equal to super, which means super instance.

33
00:02:30,610 --> 00:02:36,460
And to that super we're going to apply the get context data method, meaning that we're going to make

34
00:02:36,460 --> 00:02:41,530
sure it's inherits from the original element and as an argument, we're going to tell it that we want

35
00:02:41,530 --> 00:02:43,600
all the cogs that it owns.

36
00:02:44,900 --> 00:02:47,120
So here we're going to start setting the values.

37
00:02:47,120 --> 00:02:50,360
And by default, we want it to return some context information.

38
00:02:51,130 --> 00:02:53,230
We want it to return the context.

39
00:02:53,650 --> 00:02:56,740
In a moment, we're going to configure what the context is.

40
00:02:57,070 --> 00:03:02,110
But now we've established where it's coming from and what it's going to return for.

41
00:03:02,110 --> 00:03:04,930
Now as it is, it would return everything.

42
00:03:06,250 --> 00:03:08,170
So let me show you this with an example.

43
00:03:09,220 --> 00:03:16,600
Let's put in here before return a determination that context in its argument city to make something

44
00:03:16,600 --> 00:03:18,580
up is equal to London.

45
00:03:18,670 --> 00:03:19,840
And leave it at that.

46
00:03:21,320 --> 00:03:23,160
Now let's go to our task list.

47
00:03:23,180 --> 00:03:27,590
And under the heading pending list, which is the one we have here in each one.

48
00:03:27,830 --> 00:03:29,720
Let's add the argument city.

49
00:03:30,780 --> 00:03:35,790
So if we come to the site now and we refresh, we're going to see pending list London.

50
00:03:37,580 --> 00:03:38,900
So what did we do here?

51
00:03:39,500 --> 00:03:42,650
We pass in a context which is city.

52
00:03:42,680 --> 00:03:46,160
I'm going to delete this, which we assign a value to.

53
00:03:46,640 --> 00:03:48,350
And we did it here in views.

54
00:03:49,310 --> 00:03:53,150
And that value is the one that was applied and could be displayed in the form.

55
00:03:53,720 --> 00:03:57,050
This, but in a more complex way, is what we're going to do next.

56
00:03:57,530 --> 00:04:00,050
In fact, we're going to set the context.

57
00:04:00,050 --> 00:04:01,940
We want to set in tasks.

58
00:04:02,390 --> 00:04:03,650
And what are we going to do?

59
00:04:03,680 --> 00:04:06,650
We're going to make the context equal to context.

60
00:04:06,920 --> 00:04:09,290
So far, we're not saying anything.

61
00:04:09,560 --> 00:04:10,850
It's a redundancy.

62
00:04:11,420 --> 00:04:13,730
But follow me on this and it will make sense.

63
00:04:14,600 --> 00:04:20,540
So the context task is going to be the same as the context task, but with a filter applied so that

64
00:04:20,540 --> 00:04:24,410
we can filter it to show only what corresponds to the user self.

65
00:04:24,440 --> 00:04:25,490
Dot request.

66
00:04:25,490 --> 00:04:26,450
Dot user.

67
00:04:27,650 --> 00:04:28,970
Do you remember this expression?

68
00:04:28,970 --> 00:04:30,050
Request user.

69
00:04:30,620 --> 00:04:37,670
We used it in the task list in the form here where it showed request user in this paragraph.

70
00:04:38,470 --> 00:04:44,650
So it could show Alex or Win ten or whatever name it is because this is where we filtered it out.

71
00:04:45,630 --> 00:04:50,940
Well, this same expression is the one we use to apply a filter so that it only allows the tasks of

72
00:04:50,940 --> 00:04:52,530
the currently logged in user.

73
00:04:53,520 --> 00:04:58,680
And one more thing we want to do here, and this may seem a little confusing, but it's very necessary

74
00:04:58,680 --> 00:05:00,750
to be able to see the tasks we want to see.

75
00:05:02,130 --> 00:05:04,950
Is that also inside the context count?

76
00:05:05,280 --> 00:05:12,450
Let's set it to be the same as context tasks, but now filtering by another of the fields that we have

77
00:05:12,450 --> 00:05:20,160
in our form, which is completed, we're going to filter only those where completed is equal to false,

78
00:05:20,160 --> 00:05:22,110
i.e. those that are not complete.

79
00:05:22,800 --> 00:05:25,590
And to do this, we're going to apply the count method.

80
00:05:26,720 --> 00:05:32,600
The reason why we do this is to be able to see only the tasks not completed and not absolutely all the

81
00:05:32,600 --> 00:05:35,810
tasks of the user that is registered at the moment.

82
00:05:37,300 --> 00:05:43,330
If we come now to our form being Alex, we refresh and it informs us that there are no tasks.

83
00:05:43,870 --> 00:05:45,160
This is correct.

84
00:05:45,220 --> 00:05:47,860
Alex doesn't have any items in his list yet.

85
00:05:48,250 --> 00:05:53,560
And as you remember, we've established that when the loop results in no tasks, it has to show this

86
00:05:53,560 --> 00:05:54,250
message.

87
00:05:56,320 --> 00:05:57,310
And that's what it does.

88
00:05:57,310 --> 00:05:59,950
Because Alex has no tasks of his own.

89
00:06:00,460 --> 00:06:03,390
Now, has win ten lost all its previous tasks?

90
00:06:03,400 --> 00:06:04,000
No.

91
00:06:04,700 --> 00:06:08,810
We're just not seeing them because we are the registered user is now Alex.

92
00:06:09,260 --> 00:06:13,700
So if I log out and log in is within ten here, I can see my tasks.

93
00:06:14,690 --> 00:06:18,090
But let's go back to Alex because that's where we're testing things.

94
00:06:18,110 --> 00:06:18,770
Okay.

95
00:06:18,920 --> 00:06:19,610
Here we are.

96
00:06:20,060 --> 00:06:22,850
And let's create a task of our own for Alex from here.

97
00:06:23,590 --> 00:06:28,270
Well, first of all, I don't want this field to appear anymore because this allows you to choose the

98
00:06:28,270 --> 00:06:29,680
user to load the task.

99
00:06:29,680 --> 00:06:31,090
And that's not the idea.

100
00:06:31,390 --> 00:06:33,250
We're going to remove it in a moment.

101
00:06:33,250 --> 00:06:36,790
But for now, let's create a task such as park the car.

102
00:06:37,680 --> 00:06:39,360
This is a task for Alex.

103
00:06:39,630 --> 00:06:42,420
We save it and we're not seeing it.

104
00:06:43,360 --> 00:06:46,360
And the reason is that we've not haven't chosen the user.

105
00:06:46,750 --> 00:06:48,460
So it doesn't show me anything.

106
00:06:48,940 --> 00:06:51,820
I need to override the method called form valid.

107
00:06:52,240 --> 00:06:59,980
So the new tasks are assigned to this user automatically and so he can see them as now I don't apply

108
00:06:59,980 --> 00:07:02,470
inside the form to whom it was assigned.

109
00:07:02,890 --> 00:07:06,100
The system understands that this task is not from Alex.

110
00:07:06,930 --> 00:07:08,430
So we go back to pie chart.

111
00:07:08,640 --> 00:07:12,600
We go back to views and look for the class called Create Task.

112
00:07:13,380 --> 00:07:15,420
This is the one we want to modify.

113
00:07:16,800 --> 00:07:20,820
We're going to overwrite with a function the form valid method.

114
00:07:21,180 --> 00:07:24,360
And this already includes self and form.

115
00:07:25,340 --> 00:07:32,000
How are we going to configure this override of the form valid method we're going to call form, dot

116
00:07:32,000 --> 00:07:33,950
instance, dot user.

117
00:07:35,000 --> 00:07:41,270
And what we want is that from now on, this instance, user in our form will be equal to self.

118
00:07:41,270 --> 00:07:42,200
Dot request.

119
00:07:42,200 --> 00:07:43,190
Dot user.

120
00:07:44,540 --> 00:07:49,940
This means that it will automatically assign the value of this instance to the logged in user.

121
00:07:49,970 --> 00:07:52,070
The system itself will figure it out.

122
00:07:52,550 --> 00:07:57,050
It's going to say, okay, if Alex is logged in, then the author of this task is Alex.

123
00:07:58,530 --> 00:08:04,020
And what this method has to return is super with the attributes, create, task and self.

124
00:08:06,090 --> 00:08:11,580
And to this we're going to apply form valid, which is going to receive the form as an argument.

125
00:08:13,380 --> 00:08:15,810
So with this I should have achieved that.

126
00:08:15,810 --> 00:08:19,020
The new tasks are automatically assigned to the registered user.

127
00:08:19,730 --> 00:08:24,710
But in addition to this, I want to make it so that the user field is no longer visible in the task

128
00:08:24,710 --> 00:08:27,800
form because it no longer makes sense to have it there.

129
00:08:28,190 --> 00:08:33,860
So here, where it says Fields equals all, we don't want to see all fields anymore.

130
00:08:34,430 --> 00:08:40,430
We want to create now is a list called fields that has the fields that we want to show which are going

131
00:08:40,430 --> 00:08:43,400
to be title description and completed.

132
00:08:45,090 --> 00:08:50,490
So we're going to copy these three fields and paste them also inside the edit task class because we

133
00:08:50,490 --> 00:08:54,750
want that when we edit tasks, we can't see the user field either.

134
00:08:55,350 --> 00:09:01,980
And now we go to the site and this time we create again a task for Alex and we don't see the user field

135
00:09:01,980 --> 00:09:02,490
anymore.

136
00:09:03,830 --> 00:09:07,370
I rewrite the task called Park the car we send.

137
00:09:07,370 --> 00:09:10,280
And now Alex has parked the car pending.

138
00:09:10,850 --> 00:09:14,900
If we go to win ten and create a new task such as bake the bread.

139
00:09:14,930 --> 00:09:19,070
I send it and now Win ten has a new task to accomplish.

140
00:09:20,110 --> 00:09:23,460
But if we go back to Alex, this task is not going to be found there.

141
00:09:23,470 --> 00:09:27,640
We see that Alex still has only one task created by him.

142
00:09:28,390 --> 00:09:32,560
So this is how we make the created tasks visible only to their authors.

143
00:09:33,190 --> 00:09:37,870
We have now made it so that each author can only see his or her information.

144
00:09:38,110 --> 00:09:43,630
In the next lesson, we're going to learn how to make it possible to register new users from the site.

145
00:09:44,260 --> 00:09:48,010
So I'm onto the next lesson and I'll be waiting for you there.
