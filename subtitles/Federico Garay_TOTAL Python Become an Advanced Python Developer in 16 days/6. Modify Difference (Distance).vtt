WEBVTT
1
00:00:07.890 --> 00:00:13.140
In the previous lesson, we learned that there is an internal measure used by face recognition to estimate

2
00:00:13.140 --> 00:00:16.140
the distance between faces in different images.

3
00:00:16.380 --> 00:00:22.860
If that distance is greater than 0.6, it will determine that it is false and that is not the same person.

4
00:00:23.160 --> 00:00:29.160
And if that distance is less than 0.6, it will determine that it is true that it is the same subject.

5
00:00:29.970 --> 00:00:33.000
This number 0.6 is the default value.

6
00:00:33.240 --> 00:00:39.360
But if we want the tolerance of the system to be wider or in the country stricter, we can modify this

7
00:00:39.360 --> 00:00:39.930
value.

8
00:00:40.590 --> 00:00:43.500
So let's see how it can be handled within the code.

9
00:00:44.190 --> 00:00:47.760
So we said the smaller the distance, the larger the match.

10
00:00:48.390 --> 00:00:52.980
So before we finish the code, let's apply a measurement of distance.

11
00:00:53.760 --> 00:01:00.150
We're going to create a variable called distance, which is going to be equal to an object of f r with

12
00:01:00.150 --> 00:01:02.100
the method face distance.

13
00:01:02.940 --> 00:01:08.910
This is going to ask us for two values face encoding and face to compare.

14
00:01:10.050 --> 00:01:13.260
Again, we have to pass the face encoding as a list.

15
00:01:13.560 --> 00:01:21.540
So we put braces and inside we put coded face A and then in the place of face to compare, we're going

16
00:01:21.540 --> 00:01:28.800
to put coded face B, this is going to store in distance the result of measuring the distance.

17
00:01:29.670 --> 00:01:35.850
Now we're going to print it so that we can see it on the screen with print distance.

18
00:01:36.390 --> 00:01:42.900
So now, in addition to true or false, we're also going to see what the distance is between two people.

19
00:01:43.950 --> 00:01:48.210
Well, I'm going to do it this time by comparing my own pictures.

20
00:01:48.630 --> 00:01:50.040
And if I run our code.

21
00:01:51.960 --> 00:01:58.320
We're going to see on screen that besides saying that the match is true, it also tells us that the

22
00:01:58.320 --> 00:02:06.900
distance between control picture and test picture is 0.418, so that it's less than 0.6.

23
00:02:07.350 --> 00:02:12.720
And that's why face recognition has come to the conclusion that there's enough of a match to make that

24
00:02:12.720 --> 00:02:15.240
these two bearded men are the same person.

25
00:02:16.460 --> 00:02:18.320
So now let's do an experiment.

26
00:02:18.350 --> 00:02:24.210
Let's modify that default value here in result where we apply compare faces.

27
00:02:24.230 --> 00:02:29.420
If we add one more comma in the parameters, we'll see that this method allows us to enter one more

28
00:02:29.420 --> 00:02:31.280
value, which is tolerance.

29
00:02:31.730 --> 00:02:37.370
Tolerance is a float value, which by default is set at 0.6.

30
00:02:38.030 --> 00:02:43.460
So as we saw, the comparison between my two photos were 0.41.

31
00:02:44.090 --> 00:02:48.730
So now let's decrease the tolerance to see if it stops recognizing the match.

32
00:02:48.740 --> 00:02:55.700
So we're now going to make the tolerance 0.3, i.e. the threshold is going to be less than the distance

33
00:02:55.700 --> 00:02:56.810
of my photos.

34
00:02:57.350 --> 00:03:02.270
Now, any value higher than 0.3 will mean that there is not enough match.

35
00:03:02.960 --> 00:03:04.280
So now we've run.

36
00:03:04.280 --> 00:03:10.460
And having manipulated this value, when the photos arrive, we will see that even though the distance

37
00:03:10.460 --> 00:03:18.620
is still 0.4, it now says that it is false and that Federico A and this Federico B are not the same

38
00:03:18.620 --> 00:03:21.890
person, even though I swear they are.

39
00:03:22.550 --> 00:03:24.500
Maybe this one is a little younger.

40
00:03:25.580 --> 00:03:28.070
So now let's do the reverse test.

41
00:03:28.250 --> 00:03:33.500
Let's raise the value of tolerance so that it emits matches more generously.

42
00:03:33.830 --> 00:03:37.670
So let me check what the distance is between me and Brad Pitt.

43
00:03:37.790 --> 00:03:39.890
We should be about 1 million.

44
00:03:40.370 --> 00:03:41.900
So we're going to run it.

45
00:03:46.060 --> 00:03:50.860
And now we see that the distance between me and Brad Pitt is 0.85.

46
00:03:51.400 --> 00:03:53.530
Well, not as much as I expected.

47
00:03:54.160 --> 00:03:59.380
So now we're going to modify the value of tolerance and we're going to set it to the 0.9.

48
00:04:00.250 --> 00:04:03.640
And we'll run it again to see what the result is.

49
00:04:06.690 --> 00:04:10.290
And now, to Brad Pitt's delight, the match is true.

50
00:04:10.830 --> 00:04:16.380
I can already imagine Brad telling his friends that he's more or less like his humble instructor.

51
00:04:17.100 --> 00:04:17.820
Great.

52
00:04:18.570 --> 00:04:24.180
This is how we manipulate the tolerance limit to make the matches more closely match what we want.

53
00:04:24.480 --> 00:04:30.240
In the next lesson, we're going to learn how we can also have the distance value printed on the image

54
00:04:30.240 --> 00:04:31.830
next to the rectangle.

55
00:04:32.010 --> 00:04:33.900
So see you in the next lesson.
