1
00:00:07,670 --> 00:00:11,570
We already know how to make comparisons between two values.

2
00:00:11,600 --> 00:00:17,580
Now we are going to go up one level and learn how to compare more than two values at the same time.

3
00:00:17,600 --> 00:00:23,480
For example, I have three variables that contain numbers, and I want to know if A is greater than

4
00:00:23,510 --> 00:00:28,880
B and at the same time, if it's less than C, that is.

5
00:00:28,880 --> 00:00:31,850
I want to know if it meets both conditions.

6
00:00:32,120 --> 00:00:37,190
Or maybe I want to know if A is greater than B or if it's greater than C.

7
00:00:37,520 --> 00:00:38,060
That is.

8
00:00:38,060 --> 00:00:40,790
I want to know if it meets even one of these conditions.

9
00:00:40,790 --> 00:00:47,480
While to do these and other combinations, I'm going to need how to use logical operators.

10
00:00:47,810 --> 00:00:58,640
The three logical operators are the first one is and you know, to say, I want a strawberry and vanilla

11
00:00:58,640 --> 00:01:01,970
ice cream, which means that both conditions must be met.

12
00:01:02,600 --> 00:01:10,040
Then the second value is, or as when you say, buy me a strawberry or vanilla ice cream, which means

13
00:01:10,040 --> 00:01:13,730
that if one of those two conditions is met, it's all right.

14
00:01:14,240 --> 00:01:19,220
Finally, the third one is not as when we say we want an ice cream.

15
00:01:19,220 --> 00:01:21,260
That is not chocolate.

16
00:01:21,530 --> 00:01:23,450
I know you want to see this in action.

17
00:01:23,450 --> 00:01:25,550
So let's go over to the code.

18
00:01:25,580 --> 00:01:31,940
So let's understand this thing about making combinations between comparison operators and logical operators.

19
00:01:32,090 --> 00:01:36,200
Suppose that I have only one variable to store the result of two comparisons.

20
00:01:36,620 --> 00:01:41,990
I want to compare whether four is less than five and at the same time I want to compare with a five

21
00:01:41,990 --> 00:01:43,100
is less than six.

22
00:01:43,490 --> 00:01:48,590
But as I said, I want a single variable to store the true or false value for these two comparisons.

23
00:01:48,590 --> 00:01:50,150
I don't want two variables.

24
00:01:50,150 --> 00:01:56,570
Well, one way to do it would be for me to have a variable here that is called my bool and it has to

25
00:01:56,570 --> 00:02:00,260
check if four is less than five and if it is less than six.

26
00:02:00,950 --> 00:02:06,560
This would be a direct comparison where I put the three values and actually if I print it, let's print

27
00:02:06,560 --> 00:02:13,430
my bool and it's going to tell me, let's run logical operators and it's going to tell me that this

28
00:02:13,430 --> 00:02:19,490
is true, because here I actually compare four, less than five and immediately the next operator compares

29
00:02:19,490 --> 00:02:20,990
five with six.

30
00:02:20,990 --> 00:02:21,980
And it works.

31
00:02:22,700 --> 00:02:25,100
But this is not always going to work well for me.

32
00:02:25,370 --> 00:02:31,040
I can also do this comparison changing this and it's going to give me false because four is less than

33
00:02:31,040 --> 00:02:33,740
five and five is not greater than six.

34
00:02:33,740 --> 00:02:38,840
Well, but there is a way to make this much more readable, first of all, and to adapt it to absolutely

35
00:02:38,840 --> 00:02:40,130
all situations.

36
00:02:40,400 --> 00:02:45,680
And this is through the logical operators, which, as we saw are and or and not.

37
00:02:46,370 --> 00:02:49,190
And the way we're going to do it here is with the following.

38
00:02:49,430 --> 00:02:56,450
So we have my ball that checks if four is less than five and also checks if five is greater than six

39
00:02:56,660 --> 00:03:02,690
the word and then it turns red as you see, because it is a key word and allows us to evaluate that

40
00:03:02,690 --> 00:03:03,710
this is false.

41
00:03:04,310 --> 00:03:05,300
So why?

42
00:03:05,480 --> 00:03:09,530
Because although four is less than five, five is not greater than six.

43
00:03:09,800 --> 00:03:13,610
And when the two conditions are not met, the value of my bool is false.

44
00:03:14,290 --> 00:03:17,020
For it to be true, the two conditions must be met.

45
00:03:17,560 --> 00:03:21,280
The keyword is here to be sure that both conditions are met.

46
00:03:22,400 --> 00:03:28,480
Then if the second comparison were that five is equal to two plus three, we print it.

47
00:03:28,490 --> 00:03:32,210
It will say true because now we have two operations that are true.

48
00:03:32,240 --> 00:03:37,700
For readability reasons, you will often find that this is very practical to put the operations in parentheses.

49
00:03:38,090 --> 00:03:43,010
Notice now how much clearer it is to see what I'm doing here and you can use them or not.

50
00:03:43,010 --> 00:03:48,470
The compiler will accept them either way, but sometimes it is convenient to make it easier to read.

51
00:03:48,470 --> 00:03:52,010
Well, we can also make two comparisons that are of different types.

52
00:03:52,370 --> 00:03:59,000
On one side, I check if 55 is equal to 55, and on the other side I check with strings if dog is equal

53
00:03:59,000 --> 00:03:59,690
to dog.

54
00:03:59,930 --> 00:04:05,420
And this will also give me that it is true because it does not matter that the operations that I'm comparing

55
00:04:05,420 --> 00:04:07,490
are one of the other nature.

56
00:04:07,670 --> 00:04:10,730
But now let's look at the operator that's called or.

57
00:04:11,560 --> 00:04:12,850
Let's erase all of this.

58
00:04:12,850 --> 00:04:17,350
And now I want to check if ten equals ten or if three equals three.

59
00:04:17,680 --> 00:04:21,400
This is going to tell me true, because both comparisons are true.

60
00:04:21,550 --> 00:04:27,010
But the interesting thing about this all is that if the first comparison were not true, let's say one

61
00:04:27,010 --> 00:04:28,810
equals ten, which is false.

62
00:04:29,050 --> 00:04:33,580
I printed out and it still tells me true because it doesn't care that both are true.

63
00:04:33,820 --> 00:04:35,590
It only needs one to be true.

64
00:04:35,620 --> 00:04:37,840
It wants to know of this one or this one is true.

65
00:04:37,870 --> 00:04:42,940
So since this is this one is true because three equals three is going to tell me that it's true.

66
00:04:43,150 --> 00:04:46,450
The only way for an or to give you false is for example.

67
00:04:46,450 --> 00:04:48,610
The second comparison is also false.

68
00:04:48,790 --> 00:04:52,390
Now, since neither is true, it can't be true in any way.

69
00:04:52,840 --> 00:04:54,690
So now let's try it with a text.

70
00:04:54,700 --> 00:04:57,840
Let's write some text here that is equal.

71
00:04:57,850 --> 00:05:01,270
This is a variable, of course, to the sentence is short.

72
00:05:01,300 --> 00:05:02,140
Very good.

73
00:05:02,320 --> 00:05:05,860
And now we're going to give my ball the value of a word search.

74
00:05:06,100 --> 00:05:09,400
I want to know if the word sentence is found in text.

75
00:05:10,090 --> 00:05:14,050
And since the word sentence is in text, it's going to tell me that it's true.

76
00:05:14,350 --> 00:05:16,860
But it can also search for two words at once.

77
00:05:16,870 --> 00:05:22,600
So let's enclose this in parenthesis and say that I also want to know if the word short is in text.

78
00:05:22,780 --> 00:05:26,860
And since these two comparisons are true, it's going to tell me that this is true.

79
00:05:27,400 --> 00:05:32,320
If I had searched here for another word, for example, Python, which is not in the text, it would

80
00:05:32,320 --> 00:05:38,530
tell me that it's false because the two conditions are not met unless I had put an or comparison value

81
00:05:38,530 --> 00:05:41,320
here that allows me to make only one of them true.

82
00:05:41,680 --> 00:05:42,340
So these are.

83
00:05:42,340 --> 00:05:45,910
And and or the two logical values that most frequently used.

84
00:05:46,060 --> 00:05:49,390
Now let's look at the not value and how does this work?

85
00:05:50,590 --> 00:05:52,180
So we don't need our text anymore.

86
00:05:52,180 --> 00:05:57,820
And we're going to look at a much simpler boolean that looks at whether A is equal to A and since it

87
00:05:57,820 --> 00:06:04,630
is, of course we'll have a value of true a can prefix the comparison with the expression not as is

88
00:06:04,630 --> 00:06:05,440
painted red.

89
00:06:05,440 --> 00:06:08,230
It is a keyword and that will give me false.

90
00:06:08,230 --> 00:06:08,920
Why?

91
00:06:09,160 --> 00:06:10,360
Because it checks.

92
00:06:10,360 --> 00:06:15,730
If it is not true that this comparison is correct, that we have a kind of double comparison.

93
00:06:15,730 --> 00:06:20,290
First, it checks if the comparison is true or false, and then it returns the information.

94
00:06:20,290 --> 00:06:25,750
If it is not, then here as this one is true, it returns that it is false.

95
00:06:26,140 --> 00:06:31,360
And if this, for example, had been different, the comparison now we would receive a true because

96
00:06:31,360 --> 00:06:36,670
it is a double negation a is not different from A, therefore this comparison is false.

97
00:06:36,910 --> 00:06:42,250
But since we want to know the opposite of whatever has this information, it is going to tell us that

98
00:06:42,250 --> 00:06:43,870
this is true here.

99
00:06:43,870 --> 00:06:49,030
It can get a little complicated because we start with the double negations, negations, affirmations,

100
00:06:49,030 --> 00:06:52,270
etc. Logic can get complicated for common sense.

101
00:06:52,360 --> 00:06:58,300
And you may be saying, Well, but why don't I just use the opposite sign to the one I had if I want

102
00:06:58,300 --> 00:07:00,610
to see if it is equal, I look for different.

103
00:07:00,610 --> 00:07:05,290
If it was greater, I put smaller, but you will see that in some programming flows.

104
00:07:05,290 --> 00:07:10,900
It will be much more practical to have a logical operator such as not, it serves to negate the original

105
00:07:10,900 --> 00:07:11,800
comparison.

106
00:07:11,950 --> 00:07:16,420
And we're going to see this very soon, I promise you, throughout this course, which continues in

107
00:07:16,420 --> 00:07:19,180
the next lecture where Fill is already waiting for you.
