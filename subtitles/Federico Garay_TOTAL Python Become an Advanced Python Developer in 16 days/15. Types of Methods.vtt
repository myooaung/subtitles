WEBVTT
1
00:00:07.790 --> 00:00:11.630
We have already seen how to create methods inside a class.

2
00:00:11.630 --> 00:00:17.930
So now we're able to receive parameters as input and modify the state of an instance.

3
00:00:17.930 --> 00:00:23.330
For example, there attributes in this lecture we are going to learn that there is something called

4
00:00:23.330 --> 00:00:30.950
decorators which will allow us to create different types of methods, instance methods or normal methods,

5
00:00:30.950 --> 00:00:32.900
which are the ones we have learned so far.

6
00:00:33.230 --> 00:00:40.580
We also have class methods which are created using the decorator at class method and static methods

7
00:00:40.580 --> 00:00:44.030
which are created using the decorator at Static Method.

8
00:00:44.510 --> 00:00:48.080
The instance methods are those that we have already learned.

9
00:00:48.200 --> 00:00:54.200
They can be created using death and passing self as an instance parameter.

10
00:00:55.040 --> 00:01:00.590
They are methods that once they have been created they can be called and they're able to do things like

11
00:01:00.590 --> 00:01:07.880
access and modify the attributes of the object, access other methods or modify the class state since

12
00:01:07.880 --> 00:01:10.670
the class can be accessed from each object.

13
00:01:10.670 --> 00:01:13.640
Secondly, we have the class methods.

14
00:01:13.640 --> 00:01:20.600
These are defined by placing before at class methods and in their parameters they would put CLS, which

15
00:01:20.600 --> 00:01:23.870
stands for class instead of putting self.

16
00:01:24.080 --> 00:01:30.950
These methods are not associated to the instances of our class, but to the class itself, the entire

17
00:01:30.950 --> 00:01:31.460
thing.

18
00:01:31.850 --> 00:01:37.700
Therefore, they can be called not only from an instance of our class, but also directly from that

19
00:01:37.700 --> 00:01:38.390
class.

20
00:01:39.110 --> 00:01:47.300
These methods, unlike instance methods, cannot access instance attributes, but they can modify the

21
00:01:47.300 --> 00:01:48.470
class attributes.

22
00:01:48.470 --> 00:01:51.230
And we're going to see this all in PY charm in just a moment.

23
00:01:52.220 --> 00:01:58.940
Finally, with static methods, these can be defined with the static method decorator decorator and

24
00:01:58.940 --> 00:02:03.440
do not accept either self or class as a parameter.

25
00:02:03.800 --> 00:02:13.100
That's why they can't modify cannot modify the state of neither the class nor the instance.

26
00:02:13.520 --> 00:02:16.970
But of course they can accept input parameters.

27
00:02:17.090 --> 00:02:23.180
Therefore the use of static methods can be very useful to indicate that a method will not be able to

28
00:02:23.180 --> 00:02:26.960
modify the state of the instance or that class.

29
00:02:26.960 --> 00:02:32.540
In other words, the static methods could be seen as normal functions of those that we would use outside

30
00:02:32.540 --> 00:02:37.280
of a class, with the exception that these are linked to a concrete class.

31
00:02:37.280 --> 00:02:42.950
This is the theoretical explanation, but I think it will be easier if we see these three types of method

32
00:02:42.950 --> 00:02:46.250
and their particularities over in PY charm.

33
00:02:46.670 --> 00:02:52.370
In order to put these three types of methods into practice, we'll keep using our bird class, which

34
00:02:52.370 --> 00:02:54.380
has its attributes and its methods.

35
00:02:54.920 --> 00:03:00.110
So we just saw in the introduction the methods we have here are instance methods because they affect

36
00:03:00.110 --> 00:03:00.740
self.

37
00:03:00.950 --> 00:03:04.190
That is, each of the instances we create for our BRD.

38
00:03:04.880 --> 00:03:09.800
For example, these methods can access and change the object attributes.

39
00:03:10.340 --> 00:03:15.620
So if we create a new method such as def paint black.

40
00:03:16.540 --> 00:03:19.540
It will be in charge of painting every bird black.

41
00:03:20.170 --> 00:03:24.490
In other words, this method will access and modify the instance attributes.

42
00:03:24.940 --> 00:03:31.780
This method will add the black value to self color regardless of the color it has in the moment.

43
00:03:33.360 --> 00:03:41.370
Will demonstrate by printing a string that says Now the bird is and we'll call self dot color.

44
00:03:42.600 --> 00:03:48.180
And after the declaration of Tweety, in spite of being yellow, will use the paint black method.

45
00:03:48.180 --> 00:03:50.550
So let's execute it and we'll read.

46
00:03:50.550 --> 00:03:53.010
Now the bird is black done.

47
00:03:53.040 --> 00:03:57.000
The instance method can access and change the object attributes.

48
00:03:57.600 --> 00:04:00.570
Instance methods can also access other methods.

49
00:04:00.570 --> 00:04:04.230
For example inside fly will call chirp as well.

50
00:04:04.380 --> 00:04:07.050
So there are bird tweets besides flying.

51
00:04:07.830 --> 00:04:13.950
So we type self here in order to access our instance and we call the method chirp, which doesn't require

52
00:04:13.950 --> 00:04:14.850
attributes.

53
00:04:15.810 --> 00:04:24.660
Now here Tweetie will call the method fly instead of paint black, and we'll pass 164 feet as value

54
00:04:24.660 --> 00:04:25.980
and execute it.

55
00:04:26.070 --> 00:04:31.350
Look, the bird flies 164 feet high and then it says Tweet.

56
00:04:31.500 --> 00:04:35.370
So instance methods can call other methods.

57
00:04:36.210 --> 00:04:41.580
Given that a class can be accessed from each object, the class state can also be modified.

58
00:04:41.700 --> 00:04:49.530
So suppose that in Tweety we call Wings, which is a property corresponding to the class, not the instance,

59
00:04:49.620 --> 00:04:51.120
and we change its value.

60
00:04:51.510 --> 00:04:54.630
Now wings will have false as value.

61
00:04:54.990 --> 00:04:57.480
We'll imagine Tweety doesn't have any wings.

62
00:04:57.480 --> 00:04:58.380
Poor thing.

63
00:04:58.740 --> 00:05:01.470
Okay, let's print this to see how it looks.

64
00:05:01.920 --> 00:05:06.630
I type Tweety Dot wings, and if I execute it, it will read false.

65
00:05:06.630 --> 00:05:12.180
Which means that from Tweety I could modify a value that corresponds to the whole class.

66
00:05:12.390 --> 00:05:17.790
These are instance methods we've already learned about them, but here we could delve a little deeper

67
00:05:17.790 --> 00:05:19.080
into their properties.

68
00:05:19.590 --> 00:05:22.110
So now we'll deal with class methods.

69
00:05:22.560 --> 00:05:23.880
Let's see what they are.

70
00:05:24.480 --> 00:05:30.720
So we said that class methods are declared with a decorator, which is the apt symbol.

71
00:05:31.230 --> 00:05:35.580
Now let's type class method and we'll create one of these methods.

72
00:05:36.690 --> 00:05:42.730
Declare it with the keyword def and imagine a method named lay eggs which includes brackets.

73
00:05:42.750 --> 00:05:48.960
And notice that python will automatically enter seals instead of self like it used to do.

74
00:05:49.620 --> 00:05:56.910
So it's done so because I declared using the symbol a class method so it isn't related to instances

75
00:05:56.910 --> 00:05:58.560
but to the class itself.

76
00:05:59.290 --> 00:06:04.900
So we'll make this method require one more argument such as number, which would be the number of eggs

77
00:06:04.900 --> 00:06:06.160
laid by a bird.

78
00:06:06.640 --> 00:06:11.140
Lay eggs will only print a string literal that says it laid.

79
00:06:11.170 --> 00:06:15.280
And now we open a call to number of eggs.

80
00:06:17.600 --> 00:06:18.110
All right.

81
00:06:18.110 --> 00:06:19.940
This is a class method.

82
00:06:19.940 --> 00:06:21.770
So how do we execute it?

83
00:06:22.720 --> 00:06:23.200
First.

84
00:06:23.200 --> 00:06:25.210
Imagine that Tweetie doesn't exist.

85
00:06:25.240 --> 00:06:26.440
Let's delete it.

86
00:06:26.470 --> 00:06:28.370
Now there's no bird instance.

87
00:06:28.390 --> 00:06:32.920
However, if I call the bird class, I will have the lay eggs method available.

88
00:06:33.160 --> 00:06:34.810
So we'll type a number here.

89
00:06:35.500 --> 00:06:35.890
Say it.

90
00:06:35.890 --> 00:06:38.530
Laid three eggs and now let's execute it.

91
00:06:38.530 --> 00:06:41.140
And it reads it laid three eggs.

92
00:06:41.980 --> 00:06:49.150
Note that if I call bird again to use an instance method such as chirp and I execute it, I won't be

93
00:06:49.150 --> 00:06:50.140
able to tweet.

94
00:06:50.170 --> 00:06:53.350
The software doesn't allow it, so why not?

95
00:06:53.560 --> 00:06:55.420
Because that's an instance method.

96
00:06:55.420 --> 00:06:59.440
And the software is missing the positional argument itself, which isn't there.

97
00:07:00.270 --> 00:07:02.410
This is why class methods are different.

98
00:07:02.430 --> 00:07:05.310
They don't need an instance in order to be executed.

99
00:07:05.970 --> 00:07:12.720
Therefore, these methods cannot access the instant attributes which in this case are colour and species.

100
00:07:13.610 --> 00:07:19.400
If I printed something else inside this method, such as a string literal that says the bird is and

101
00:07:19.400 --> 00:07:22.040
called color typing self color.

102
00:07:22.310 --> 00:07:23.690
I would get an error.

103
00:07:24.170 --> 00:07:31.280
The software doesn't allow me to enter self color because lay eggs doesn't receive self as an argument

104
00:07:31.280 --> 00:07:32.210
but class.

105
00:07:33.120 --> 00:07:36.570
So we can't appeal to color using a class method.

106
00:07:36.600 --> 00:07:40.680
You can access and modify class attributes through class methods.

107
00:07:40.680 --> 00:07:48.000
If instead of calling self, I call CLS wings, which is a class argument, and so I have access to

108
00:07:48.000 --> 00:07:48.430
it.

109
00:07:48.450 --> 00:07:50.670
I can even change it to false.

110
00:07:51.000 --> 00:07:53.520
And if I print it through bird wings.

111
00:07:57.710 --> 00:07:58.790
Then execute it.

112
00:07:58.820 --> 00:08:00.260
It will read false.

113
00:08:00.350 --> 00:08:04.730
Well, it's also said it laid three eggs because the method is here.

114
00:08:05.240 --> 00:08:10.670
However, it says false because I was able to modify this attribute through this method, which is a

115
00:08:10.670 --> 00:08:11.600
class method.

116
00:08:12.350 --> 00:08:16.670
I couldn't modify the instant attributes, but the class attributes, which is logical.

117
00:08:17.480 --> 00:08:20.720
Last but not least, will deal with static methods.

118
00:08:21.260 --> 00:08:29.120
We'll close this so as to have more room and we'll enter after class method at static method.

119
00:08:29.600 --> 00:08:34.790
Static methods are also defined with def and we have to name them as well.

120
00:08:34.910 --> 00:08:37.680
Suppose that we want a method that makes our bird look.

121
00:08:37.700 --> 00:08:39.170
Let's name it look.

122
00:08:39.470 --> 00:08:45.650
Then we add brackets and please note that neither class nor self were automatically entered.

123
00:08:45.800 --> 00:08:51.590
That's because static methods aren't related to classes and instances, so these methods cannot modify

124
00:08:51.590 --> 00:08:52.880
an instance state.

125
00:08:53.880 --> 00:08:58.860
So if I want to call Self Scholar I can type it, but I'll get an error.

126
00:08:59.040 --> 00:09:05.160
So if I want it to be equal to red, I can't do that because these methods don't modify instances or

127
00:09:05.160 --> 00:09:06.240
class attributes.

128
00:09:06.840 --> 00:09:10.740
If I want to call CLS wings, well, I can type it.

129
00:09:10.740 --> 00:09:11.400
Yes.

130
00:09:11.700 --> 00:09:17.430
And I can also say that it is equal to two, but CLS will keep on returning an error.

131
00:09:18.200 --> 00:09:24.890
So I won't be able to execute this code because static methods can't access class or instance attributes.

132
00:09:25.880 --> 00:09:27.470
So what are they used for?

133
00:09:27.680 --> 00:09:34.130
If you want to be sure that some methods won't modify your objects and instances, this is the best

134
00:09:34.130 --> 00:09:35.000
way to do it.

135
00:09:35.990 --> 00:09:43.890
For instance, we can enter, print the bird looks and here we call the bird look and execute it.

136
00:09:43.910 --> 00:09:45.200
The bird looks.

137
00:09:46.010 --> 00:09:51.170
I could use this method because it doesn't require that I use class or instance arguments.

138
00:09:51.710 --> 00:09:54.170
This is all regarding method types.

139
00:09:54.200 --> 00:09:59.600
These concepts can be a bit confusing and advise you to go over the lecture if you're not sure about

140
00:09:59.600 --> 00:10:00.230
something.

141
00:10:00.470 --> 00:10:06.020
Download the documents and solve the following activities before moving forward to the next lecture.

142
00:10:06.560 --> 00:10:08.420
And I'll go there now.

143
00:10:08.450 --> 00:10:09.530
I'll see you there.
