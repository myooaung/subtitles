1
00:00:07,730 --> 00:00:14,450
From this lecture on all object types we have yet to learn are coming and we are going to start learning

2
00:00:14,450 --> 00:00:16,280
about lists right away.

3
00:00:16,310 --> 00:00:19,580
A list is an ordered sequence of objects.

4
00:00:19,940 --> 00:00:25,820
Lists can be assigned to a variable, and there elements can be strings, integers, floats, or any

5
00:00:25,820 --> 00:00:28,460
type of object that we will learn about soon.

6
00:00:29,060 --> 00:00:34,220
A list can even be composed of objects of different data types.

7
00:00:34,760 --> 00:00:39,860
Lists are written in square brackets and their elements must be separated by commas.

8
00:00:40,460 --> 00:00:44,660
It is also possible to nest lists what is nesting.

9
00:00:44,900 --> 00:00:48,620
The same way we can have a list of integers or strings.

10
00:00:48,620 --> 00:00:53,000
We can also have a list of lists, just like strings.

11
00:00:53,000 --> 00:00:58,490
We can index and split lists because strings actually work almost like a list of characters.

12
00:00:58,640 --> 00:01:04,280
Similarly, lists also have methods that allow us to manipulate and parse them.

13
00:01:04,400 --> 00:01:10,550
And unlike strings, lists are not immutable so we can modify or rearrange their contents.

14
00:01:10,550 --> 00:01:15,500
There is a lot to learn about lists, so let's put our fingers to work in Pi charm right now.

15
00:01:15,620 --> 00:01:16,160
Exactly.

16
00:01:16,160 --> 00:01:20,150
Fill our fingers are ready to start typing everything related to lists.

17
00:01:20,150 --> 00:01:26,210
So here we are in a new file that I've prepared that's called lists and it is inside day three.

18
00:01:26,480 --> 00:01:28,700
And we're going to start creating a list.

19
00:01:28,910 --> 00:01:31,700
We're going to assign it to a variable called My List.

20
00:01:31,700 --> 00:01:37,130
And we're going to say that my list is equal to a list composed of data that we're going to put in square

21
00:01:37,130 --> 00:01:37,910
brackets.

22
00:01:38,030 --> 00:01:40,580
In this case, they're going to be a list of strings.

23
00:01:40,700 --> 00:01:45,860
They're going to be in quotation marks, and they're going to be the letter A, then the letter B,

24
00:01:45,860 --> 00:01:47,540
and finally the letter C.

25
00:01:47,630 --> 00:01:51,710
That is to say that this list is going to have only three elements.

26
00:01:52,250 --> 00:01:56,030
First, I'm going to show you what the data type of a list looks like.

27
00:01:56,030 --> 00:02:00,470
So let's print the type that corresponds to my list.

28
00:02:01,130 --> 00:02:05,240
Then we're going to run this by going to run and within run choosing lists.

29
00:02:05,600 --> 00:02:07,370
And here we have that.

30
00:02:07,370 --> 00:02:10,010
This object belongs to the list class.

31
00:02:10,040 --> 00:02:15,170
I also want to show you that we can create lists, as I explained before, that have different types

32
00:02:15,170 --> 00:02:15,860
of data.

33
00:02:16,220 --> 00:02:22,130
We're going to create another list and we're going to say that it is equal, for example, to a string

34
00:02:22,130 --> 00:02:25,220
that says, hello, this is the first object.

35
00:02:25,220 --> 00:02:28,430
The second object is a number 55.

36
00:02:28,460 --> 00:02:31,070
The third object can be a float, for example.

37
00:02:32,270 --> 00:02:37,370
And as you see, this does not throw an error and it allows us to continue with our code because lists

38
00:02:37,370 --> 00:02:42,230
in Python, unlike most languages, can contain objects of different data types.

39
00:02:42,230 --> 00:02:43,370
Let's remove this.

40
00:02:43,580 --> 00:02:44,360
That's it.

41
00:02:44,390 --> 00:02:49,580
I want to show you that we can apply here the length property because the same as with strings.

42
00:02:49,580 --> 00:02:51,710
We could also know the length of a list.

43
00:02:52,460 --> 00:02:55,190
We can know how many elements a list contains.

44
00:02:55,580 --> 00:03:00,530
Then I'm going to say that result is a variable that is equal to Len.

45
00:03:00,860 --> 00:03:03,710
That is to say the length of my list.

46
00:03:04,160 --> 00:03:09,860
And here instead of type, we're going to print result so we can see what it contains.

47
00:03:09,860 --> 00:03:12,950
And it tells us that my list has three elements.

48
00:03:13,190 --> 00:03:13,910
Amazing.

49
00:03:14,150 --> 00:03:18,140
You can also extract the value of one of those elements using index.

50
00:03:18,470 --> 00:03:20,270
We can index list as well.

51
00:03:20,630 --> 00:03:25,220
So I'm going to say that the result is equal to my list at its zero index.

52
00:03:25,310 --> 00:03:30,590
And if I run this, I'm going to see the letter A, which is the element that it has at index zero of

53
00:03:30,590 --> 00:03:31,340
my list.

54
00:03:31,790 --> 00:03:37,130
Just like strings indexes in lists start at zero one, two and so on.

55
00:03:37,370 --> 00:03:40,730
Everything we've seen about indexes on strings applies to lists.

56
00:03:40,730 --> 00:03:47,510
If I also want to search, for example, the indexes that go from 0 to 1, in this case zero, colon

57
00:03:47,510 --> 00:03:48,140
one.

58
00:03:48,410 --> 00:03:53,930
We have here only one object because remember that it goes up to one but does not include it.

59
00:03:54,260 --> 00:03:58,340
But if I put two here, in that case I can see element zero.

60
00:03:58,340 --> 00:03:59,870
An element or element one.

61
00:03:59,960 --> 00:04:01,670
Element two is not included.

62
00:04:01,970 --> 00:04:07,070
If I leave this empty, I can see from the beginning to the end all the elements, the same as with

63
00:04:07,070 --> 00:04:07,880
the strings.

64
00:04:08,120 --> 00:04:11,540
We can also apply what would be the concatenation of lists.

65
00:04:11,840 --> 00:04:13,340
We have seen it with the strings.

66
00:04:13,340 --> 00:04:21,680
So if I create my list too, and I say that this list is equal to, let's say D, E and F, now we have

67
00:04:21,680 --> 00:04:23,840
three more elements in a separate list.

68
00:04:23,840 --> 00:04:30,890
But if instead of results now I print my list plus my list too, we're going to get a concatenation

69
00:04:30,890 --> 00:04:37,370
that gives us a single list that is a, B, C, D, E, F, and has joined them all together.

70
00:04:37,370 --> 00:04:40,610
But remember, the original two lists still exist.

71
00:04:40,820 --> 00:04:47,720
If I print just my list here and then also print my list too and run it, the two original lists will

72
00:04:47,720 --> 00:04:48,470
still exist.

73
00:04:48,470 --> 00:04:50,870
What I have done before was to print them together.

74
00:04:51,170 --> 00:04:56,300
If I wanted the two to exist in a single list so that I could use what I would have to do is create

75
00:04:56,300 --> 00:04:57,350
a third list.

76
00:04:57,620 --> 00:05:00,980
This is going to be my list three and it's going to be equal.

77
00:05:01,210 --> 00:05:03,310
To my list, plus my list, too.

78
00:05:03,580 --> 00:05:08,110
And here we're going to print just my list three, which is the one I just created.

79
00:05:08,500 --> 00:05:09,970
Let's see what it looks like.

80
00:05:10,420 --> 00:05:11,770
Well, same as before.

81
00:05:11,770 --> 00:05:13,390
But now I have a variable.

82
00:05:13,390 --> 00:05:16,600
That is my list three that contains the concatenation.

83
00:05:16,600 --> 00:05:21,130
Well, this would be the basics about lists, and it applies to almost everything that we have seen

84
00:05:21,130 --> 00:05:26,740
about strings, because the strings in some way are a list of characters, although this technically

85
00:05:26,740 --> 00:05:30,400
does not apply to all of the sense, but they work quite similar.

86
00:05:30,670 --> 00:05:35,530
Now there are things that strings can't do that lists can like alternating their elements.

87
00:05:35,530 --> 00:05:37,180
And we're going to see that next.

88
00:05:37,180 --> 00:05:42,790
We're going to allow this my list three to continue existing, which is the one that has six elements.

89
00:05:42,790 --> 00:05:48,070
And we are going to eliminate this line with the result and we're going to do what we've wanted to do

90
00:05:48,070 --> 00:05:49,180
with the strings before.

91
00:05:49,180 --> 00:05:50,230
And it gave us an error.

92
00:05:50,800 --> 00:05:54,610
We're going to say that in my list three in its index zero.

93
00:05:54,610 --> 00:05:57,790
We're going to overwrite it only to that index.

94
00:05:58,030 --> 00:06:04,230
And we're going to say that now instead of a it is alpha and we're going to go to print minus three.

95
00:06:04,990 --> 00:06:06,430
Observe what we have now.

96
00:06:06,490 --> 00:06:11,170
We have alpha b, c, d, e, f with strings.

97
00:06:11,170 --> 00:06:15,220
I could not do this, but with the lists I can overwrite any of its elements.

98
00:06:15,220 --> 00:06:18,190
And we also have methods to do many things with the lists.

99
00:06:18,430 --> 00:06:24,400
Notice if I put the point after my list, we can see all the methods that correspond to the lists coming.

100
00:06:24,430 --> 00:06:27,520
And we're going to look for this one that is called append.

101
00:06:27,880 --> 00:06:32,650
As its name suggests, append is used to add an element to our already created list.

102
00:06:32,950 --> 00:06:39,040
Let's add G, which would be the one that follows alphabetically and let's execute my list three to

103
00:06:39,040 --> 00:06:40,090
see how it looks.

104
00:06:40,510 --> 00:06:45,250
Okay, now we have a, b, c, d, e, f and g.

105
00:06:45,760 --> 00:06:50,980
If you're wondering why I no longer have alpha, note that I deleted the line that did the operation

106
00:06:50,980 --> 00:06:53,680
and rerun a new instance of all of this.

107
00:06:53,680 --> 00:06:55,510
So it cleared up why I did before.

108
00:06:55,720 --> 00:07:00,130
But now we have then not six but seven elements because lists.

109
00:07:00,130 --> 00:07:03,220
When you add an element, this will not be a concatenation.

110
00:07:03,220 --> 00:07:05,410
This is adding something to the original list.

111
00:07:05,890 --> 00:07:11,440
So I didn't have to create a new variable as I have necessarily done with the strings if I want to modify

112
00:07:11,440 --> 00:07:12,190
them here.

113
00:07:12,190 --> 00:07:18,010
The source list was modified and just as I have a method that allows me to add items, I also have methods

114
00:07:18,010 --> 00:07:19,690
that allow me to remove items.

115
00:07:20,180 --> 00:07:25,450
We are going to invoke again my list three and this time we're going to apply a method that is called

116
00:07:25,450 --> 00:07:26,020
pop.

117
00:07:26,410 --> 00:07:29,560
And through it we're going to remove one of the items from our list.

118
00:07:29,800 --> 00:07:35,470
What pop does, if you leave it without parameters inside these parentheses, is to interpret that you

119
00:07:35,470 --> 00:07:37,510
want to remove the last of its elements.

120
00:07:37,630 --> 00:07:44,050
Then we're going to eliminate this G so that we have our original list from A to F, C, and now we're

121
00:07:44,050 --> 00:07:52,600
going to eliminate the last element that is F we execute it and A, B, C, D, E, and the F is no

122
00:07:52,600 --> 00:07:53,290
longer here.

123
00:07:53,590 --> 00:07:58,870
I was telling you that Pop automatically interprets that you want to delete the last item unless you

124
00:07:58,870 --> 00:08:01,630
specify here which index you want to delete.

125
00:08:02,020 --> 00:08:05,440
If I set it to be index zero, then let's run it again.

126
00:08:05,800 --> 00:08:10,450
This time it deleted the first element and I start with b, c, d, e f.

127
00:08:10,690 --> 00:08:15,790
There is also a way to store what that element that you delete in a variable in case you want to manipulate

128
00:08:15,790 --> 00:08:16,810
it or use it.

129
00:08:16,840 --> 00:08:23,770
We're going to repeat this operation, but storing the pop element in a variable called deleted and

130
00:08:23,770 --> 00:08:29,020
what we're going to print now is not only my list, but we're also going to print deleted.

131
00:08:29,380 --> 00:08:30,730
Let's see what it looks like.

132
00:08:31,240 --> 00:08:34,420
So we have the list without the initial element already removed.

133
00:08:34,420 --> 00:08:41,740
The pop element here in the index is zero and a part we have printed the variable deleted which contains

134
00:08:41,740 --> 00:08:43,240
the element that we have removed.

135
00:08:43,750 --> 00:08:48,490
That is to say that you can also remove them and reserve them to use them in the future.

136
00:08:48,580 --> 00:08:51,490
As you have seen, there are many methods to use with the lists.

137
00:08:51,580 --> 00:08:53,560
We're going to learn some of the most important.

138
00:08:53,560 --> 00:08:57,040
Now let's get to know one that allows us to sort the lists.

139
00:08:57,340 --> 00:09:02,680
Suppose I have a list here that is equal to alphabetical elements, but out of order we're going to

140
00:09:02,680 --> 00:09:09,550
do the G, we're going to do the Oh and we're going to do a B, we can do an M and we can do a C.

141
00:09:10,480 --> 00:09:12,370
These are elements that are out of order.

142
00:09:12,580 --> 00:09:14,320
Now I'm going to call list.

143
00:09:14,650 --> 00:09:20,050
I'm going to apply a method called sort, and we're going to leave these parameters empty and we're

144
00:09:20,050 --> 00:09:20,950
going to print this list.

145
00:09:20,950 --> 00:09:23,770
Now, let's see what this looks like.

146
00:09:23,920 --> 00:09:30,520
Our G, O, B, M and C are now B, C, GM and O.

147
00:09:31,060 --> 00:09:33,880
That is to say that they are all in alphabetical order.

148
00:09:34,090 --> 00:09:39,220
And the same thing would have happened if I'd put numbers out of order, or if I'd put people's names.

149
00:09:39,220 --> 00:09:40,990
It sorts them alphabetically.

150
00:09:41,500 --> 00:09:47,350
What you do have to keep in mind is that sort is a method that works in place, that is it reorders

151
00:09:47,350 --> 00:09:50,980
the list itself, but it's not a method that returns anything.

152
00:09:51,250 --> 00:09:54,550
Many times a beginner might think, Well, there, I can do this.

153
00:09:54,550 --> 00:09:58,210
I can store my list and a new list and it's equal to the sorted list.

154
00:09:58,210 --> 00:10:00,190
And then I will print a new list.

155
00:10:00,190 --> 00:10:00,820
And this is going to.

156
00:10:00,900 --> 00:10:02,430
Give me my sorted list.

157
00:10:02,820 --> 00:10:06,180
If we follow our intuition, we would think that this would work.

158
00:10:06,180 --> 00:10:06,960
But run it.

159
00:10:06,960 --> 00:10:08,270
And our list is not there.

160
00:10:08,280 --> 00:10:10,380
It's not even sorted or unordered.

161
00:10:10,740 --> 00:10:11,850
It tells us none.

162
00:10:12,210 --> 00:10:16,740
And this is where it's important to understand the logic of this, actually, to help you understand

163
00:10:16,740 --> 00:10:17,350
it better.

164
00:10:17,370 --> 00:10:22,620
I'm going to type type here to find out what type this new list object that we have here is.

165
00:10:23,070 --> 00:10:25,780
And Python says that it's a non type class.

166
00:10:25,800 --> 00:10:31,110
That's the data type that contains new list which we've supposedly assigned our sorted list to.

167
00:10:31,170 --> 00:10:37,530
But instead of my list we have this non type and non type is the data type of a non object.

168
00:10:37,860 --> 00:10:39,610
Let's see it in basic English.

169
00:10:39,630 --> 00:10:45,420
We could say that Python created the non type object to indicate an object that has no value, which

170
00:10:45,420 --> 00:10:47,400
is not the same as having a zero value.

171
00:10:47,430 --> 00:10:52,320
Zero is something that is not the same as having no value at all.

172
00:10:52,410 --> 00:10:56,730
In a nutshell, none is the result of an object that does not return anything.

173
00:10:57,030 --> 00:11:03,300
The important thing to understand here that salt is a method that performs in action, which is to sort

174
00:11:03,300 --> 00:11:09,480
the elements but does not return anything and therefore we cannot assign that non return to a variable,

175
00:11:09,480 --> 00:11:11,550
which is what we wanted to do in this case.

176
00:11:11,670 --> 00:11:16,470
Maybe this is a little confusing for you now, but the important thing to understand is that there are

177
00:11:16,470 --> 00:11:21,330
methods that simply do something but do not return information that you can store elsewhere.

178
00:11:21,690 --> 00:11:27,210
So if I want to see my sorted list, I simply perform the execution and then I can see my list that

179
00:11:27,210 --> 00:11:30,120
has now changed and is sorted and I can see it this way.

180
00:11:30,750 --> 00:11:34,200
If I wanted to store it somewhere, I have to do it separately.

181
00:11:34,560 --> 00:11:36,780
I stole my modified list in list two.

182
00:11:37,170 --> 00:11:39,360
Now I print here list too.

183
00:11:39,510 --> 00:11:43,770
But this would basically be a redundancy because now I have two lists that are the same.

184
00:11:44,190 --> 00:11:48,870
Finally, one more method that I want you to know is the opposite to this method that allows us to sort

185
00:11:48,870 --> 00:11:49,840
alphabetically.

186
00:11:49,860 --> 00:11:51,590
This one will sort it backwards.

187
00:11:51,600 --> 00:11:53,520
We have a method called reverse.

188
00:11:53,550 --> 00:11:54,840
Let's look for it here.

189
00:11:55,320 --> 00:11:57,000
List, point, reverse.

190
00:11:57,000 --> 00:11:57,780
Here it is.

191
00:11:58,260 --> 00:12:01,200
And what reverse does is it reverses the order.

192
00:12:01,770 --> 00:12:03,810
It puts the last thing first and so on.

193
00:12:04,380 --> 00:12:06,750
In fact, if we print it out, we can see that now.

194
00:12:06,750 --> 00:12:12,810
Our list is in alphabetical order, but it goes from Z to A and that's what reverse does done like.

195
00:12:12,810 --> 00:12:15,020
So to reverse does not return anything.

196
00:12:15,030 --> 00:12:16,770
It transforms it in place.

197
00:12:16,770 --> 00:12:21,570
And we can't store it directly in another variable because it will give us a non object.

198
00:12:21,690 --> 00:12:26,970
Well, this is the most important thing to know about lists, so be sure to download the notes, to

199
00:12:26,970 --> 00:12:32,550
have everything organized and visually accessible to you, and be sure to do the practical exercises

200
00:12:32,550 --> 00:12:37,050
that follow and then move on to learn the next type of data that are dictionary.

201
00:12:37,140 --> 00:12:38,970
So I'll be waiting for you there.
