WEBVTT
1
00:00:07.550 --> 00:00:13.700
We interrupt this course to share an update to Python version 3.10, which has incorporated some subtle

2
00:00:13.700 --> 00:00:19.460
changes, but also a very important change that deserves to create a special lecture so I can teach

3
00:00:19.460 --> 00:00:22.760
you what has been called structural pattern matching.

4
00:00:22.760 --> 00:00:23.990
So what is this?

5
00:00:24.260 --> 00:00:31.820
Until now, in versions 3.9 of Python backwards, Python has missing a tool that exists in almost all

6
00:00:31.820 --> 00:00:38.450
of the programming languages, which is a variety of if that allows us to choose from a number of options

7
00:00:38.660 --> 00:00:39.830
in the other languages.

8
00:00:39.830 --> 00:00:45.620
This tool is usually called switch in Python from version 3.10 onwards.

9
00:00:45.620 --> 00:00:51.680
If you've installed that version, you can also already have it and it's called Match because it looks

10
00:00:51.680 --> 00:00:53.000
for coincidences.

11
00:00:53.660 --> 00:00:58.820
The great thing is that as everything in Python match is not only going to reach what the other languages

12
00:00:58.820 --> 00:01:02.960
already have with switch, but at the same time it's going to surpass them.

13
00:01:03.500 --> 00:01:09.110
Match will not only allow us to choose one option among several, but it will also allow us to implement

14
00:01:09.110 --> 00:01:13.670
that our code does something different according to a pattern of information we are receiving.

15
00:01:14.320 --> 00:01:18.430
This is complex to understand in the abstract, so let's see it with an example.

16
00:01:18.910 --> 00:01:24.520
In this example here we have a variable named series that has the value n02.

17
00:01:25.150 --> 00:01:31.870
We also have this block of code that checks if our variable matches this value and if it does print

18
00:01:31.870 --> 00:01:32.530
something.

19
00:01:32.770 --> 00:01:37.570
If it doesn't, then it will check equality with the second value and it will print something different

20
00:01:37.570 --> 00:01:38.800
in case it matches.

21
00:01:39.070 --> 00:01:40.810
Then the same with the third value.

22
00:01:40.810 --> 00:01:47.530
And finally, if it doesn't match any, it will fall inside this else to print an all encompassing,

23
00:01:47.530 --> 00:01:49.030
comprehensive option.

24
00:01:49.870 --> 00:01:54.160
If we run this code, the serial number is equal to number two.

25
00:01:54.460 --> 00:01:56.440
So it's going to print knock here.

26
00:01:56.590 --> 00:01:59.700
Well, this you already know how to do with the ifs.

27
00:01:59.710 --> 00:02:05.950
And this is what we would do with Python versions prior to 3.10 when we had to solve this kind of logic

28
00:02:05.950 --> 00:02:10.210
using this if elif and L structure to solve it.

29
00:02:10.720 --> 00:02:17.020
Match instead is going to allow us to do this in a slightly different way, but with many other advantages.

30
00:02:17.200 --> 00:02:19.120
So first, we're going to comment this out.

31
00:02:19.120 --> 00:02:21.210
So it's not executable anymore.

32
00:02:21.220 --> 00:02:23.560
And let's see a very simple case.

33
00:02:24.130 --> 00:02:29.650
Let's copy it and paste again down here so we can transform it into a match application.

34
00:02:29.920 --> 00:02:35.290
Now we're going to use the keyword match and we're going to see if we can find a match for the value

35
00:02:35.290 --> 00:02:36.040
series.

36
00:02:37.090 --> 00:02:44.020
We're going to indent this with top key and instead of F series equals to we're going to put the case

37
00:02:44.320 --> 00:02:53.200
as in case of then this may be read like in the case that series matches with number one print Samsung.

38
00:02:54.370 --> 00:02:59.470
If that wasn't the case and we know it's not, it will follow along with the next case.

39
00:02:59.680 --> 00:03:04.540
So in the case that series is equal to number two, it will print Nokia.

40
00:03:05.020 --> 00:03:08.230
In the case it is number three, it will print Motorola.

41
00:03:08.500 --> 00:03:15.160
And in the last case and it says something exhaustive here where we put in case underscore colon.

42
00:03:15.160 --> 00:03:20.650
So this that if it doesn't find any matching value in series, it prints the other string.

43
00:03:21.040 --> 00:03:26.650
If we run, we're going to get exactly the same values before, but with a little bit of a simpler code.

44
00:03:27.460 --> 00:03:32.650
But so far what I've just shown you, even when it has some simple differences, is just the language

45
00:03:32.650 --> 00:03:38.980
change to do the same thing that we could already do with F and L, F, maybe it's a little bit easier

46
00:03:38.980 --> 00:03:41.590
to read, maybe it's a little bit more compressed.

47
00:03:41.590 --> 00:03:46.990
But let's face it, if this was the whole change, well, it wouldn't be that much of a big deal.

48
00:03:47.200 --> 00:03:52.570
So where does all the power of match lie that makes it so that we can not only do the same thing as

49
00:03:52.570 --> 00:03:56.290
in other languages, but also be a little bit superior?

50
00:03:56.710 --> 00:04:02.020
Well, let's see that by eliminating all these examples and let's eliminate the series and let's create

51
00:04:02.020 --> 00:04:03.430
two different cases.

52
00:04:04.210 --> 00:04:06.340
First, a variable that's called client.

53
00:04:06.340 --> 00:04:07.900
That's equal to a dictionary.

54
00:04:08.350 --> 00:04:11.750
A dictionary that first contains the name of a person.

55
00:04:11.770 --> 00:04:14.170
In this case, it's going to be Federico.

56
00:04:14.200 --> 00:04:14.890
Why not?

57
00:04:16.280 --> 00:04:17.690
Let's make it have another variable.

58
00:04:17.690 --> 00:04:23.900
This is age and Federico is age despite it is 46 years old as of today.

59
00:04:25.050 --> 00:04:30.690
When we're going to add a third value, a third key to this dictionary, which is occupation.

60
00:04:30.930 --> 00:04:34.860
And we can say that Federico is occupation, is online instructor.

61
00:04:37.150 --> 00:04:43.330
And here we have then a variable with a value composed of three keys and values in a dictionary.

62
00:04:43.900 --> 00:04:47.650
So we're going to create movie a slightly different variable.

63
00:04:47.680 --> 00:04:53.500
Movie will also be equal to a dictionary, but this one will first contain a key that will be title,

64
00:04:53.950 --> 00:04:56.740
and the value of that key can be matrix.

65
00:04:57.070 --> 00:05:02.260
To be able to choose a good movie and I mean Matrix one, of course you can also choose any movie you

66
00:05:02.260 --> 00:05:04.010
want except Matrix four.

67
00:05:04.030 --> 00:05:10.000
Of course, we're going to add a second element, a second key to our dictionary, which can be the

68
00:05:10.000 --> 00:05:10.750
credits.

69
00:05:11.260 --> 00:05:17.020
And this key will be composed of another dictionary, a dictionary that has a first element that is

70
00:05:17.020 --> 00:05:18.160
the main star.

71
00:05:18.520 --> 00:05:21.310
And the main star of Matrix is Keanu Reeves.

72
00:05:22.030 --> 00:05:27.490
Let's add a second key, a second element to this internal dictionary called credits, which can be

73
00:05:27.490 --> 00:05:34.900
director, colon and the director or directors of the Matrix are Lana and Lilly or Michalski.

74
00:05:36.010 --> 00:05:38.620
So we already have a dictionary within a dictionary.

75
00:05:39.310 --> 00:05:43.930
So far we have two very different elements, or rather two elements with a different structure of their

76
00:05:43.930 --> 00:05:44.520
values.

77
00:05:44.530 --> 00:05:46.360
Both are a dictionary type.

78
00:05:46.390 --> 00:05:51.750
But this one has three keys and they're simple values, and this one has two keys with the simple values.

79
00:05:51.760 --> 00:05:56.530
But the value of the second key is composed by a dictionary two keys and two values.

80
00:05:57.280 --> 00:05:59.680
That is to say two items respectively.

81
00:06:00.160 --> 00:06:05.620
Now let's create a list that can be called items, but it is very general list that will contain these

82
00:06:05.620 --> 00:06:06.220
two elements.

83
00:06:06.220 --> 00:06:12.190
Client is going to contain movie, and a third element that does not exist here, that can be book.

84
00:06:12.850 --> 00:06:18.280
We will put it in quotation marks so it does not give us an error because if it is not already an existing

85
00:06:18.280 --> 00:06:20.350
element, it has to be a string.

86
00:06:21.220 --> 00:06:25.540
We have a list with these two elements, plus one that so far is only a string.

87
00:06:25.900 --> 00:06:30.670
Now we we're going to use the for loop that we have learned today to be able to go through all these

88
00:06:30.670 --> 00:06:35.380
elements and do something looking for matches in them despite how many differences there are.

89
00:06:35.950 --> 00:06:36.940
So let's see.

90
00:06:37.390 --> 00:06:40.830
We're going to say that for every eye that there are is in items.

91
00:06:40.840 --> 00:06:45.280
What we're going to do is we're going to look for a match in I.

92
00:06:46.750 --> 00:06:52.210
We put the code on so we can start looking at the different cases and this is where the difference begins.

93
00:06:52.660 --> 00:06:58.870
In the case where my dictionary structure is composed of name with the value name, comma, age, with

94
00:06:58.870 --> 00:07:03.820
the value age, and finally occupation with the value occupation.

95
00:07:04.690 --> 00:07:07.780
That is a case if this should be the case.

96
00:07:07.780 --> 00:07:11.580
That is to say that the structure of my element in the list has this structure.

97
00:07:11.590 --> 00:07:18.040
Well, in that case we have detected that it is a client and then we will print it is a client.

98
00:07:19.610 --> 00:07:24.620
And we can even show some information if we print name, age and occupation.

99
00:07:25.490 --> 00:07:33.440
What this will do is if it is the case that in any iteration of this loop, the item of my list keeps

100
00:07:33.440 --> 00:07:34.580
the customer structure.

101
00:07:35.480 --> 00:07:40.340
Not only print that it is a customer, but print the name that will bring it from here.

102
00:07:40.910 --> 00:07:47.480
It will be the value that contains the key name in this case, Federico, and the age that it is contained.

103
00:07:47.840 --> 00:07:55.010
That is to say, whatever the value that has the age property within this key and occupation the same.

104
00:07:55.310 --> 00:07:56.570
So I hope you follow me.

105
00:07:56.900 --> 00:07:58.310
This would be one case.

106
00:07:58.400 --> 00:08:04.520
But what if, in any iteration through my list, the item doesn't respond to the client structure?

107
00:08:04.790 --> 00:08:11.390
We will check if it matches a different structure where there is a title with a value inside the title,

108
00:08:11.840 --> 00:08:14.270
where there is a second key that is credits.

109
00:08:14.690 --> 00:08:20.510
And here comes also a difference that the value of this credits is composed of a dictionary that first

110
00:08:20.510 --> 00:08:28.520
contains a main star for which we will find a value main star comma, and then has a director with the

111
00:08:28.520 --> 00:08:30.770
value director colon.

112
00:08:31.460 --> 00:08:37.730
If this second case were the case for an iteration, then we're going to print that this is a movie

113
00:08:37.730 --> 00:08:44.360
and we can bring in some move information in another print that says title main star and director.

114
00:08:44.410 --> 00:08:45.050
Okay.

115
00:08:46.090 --> 00:08:48.970
You can do, of course, more interesting things than this.

116
00:08:49.240 --> 00:08:54.250
I just print this series of strings to show you that I can extract that information, but you can do

117
00:08:54.250 --> 00:08:56.920
a little string with more interesting things.

118
00:08:57.890 --> 00:09:03.230
And then a final case, a case where we treat the default, which is the underscore.

119
00:09:03.950 --> 00:09:07.070
And in case this ever happens, we're going to print.

120
00:09:07.070 --> 00:09:08.750
Well, I don't know what this is.

121
00:09:09.560 --> 00:09:10.190
Okay.

122
00:09:10.640 --> 00:09:13.040
Then I review before executing our code.

123
00:09:13.070 --> 00:09:19.190
We have two variables client, which is a dictionary with three elements movie which is a dictionary

124
00:09:19.190 --> 00:09:24.410
with two elements of which the second one contains a dictionary with two more elements.

125
00:09:25.260 --> 00:09:30.690
And we have a list that includes these two elements, plus one that doesn't exist in my code before

126
00:09:31.230 --> 00:09:33.300
and then through for a full loop.

127
00:09:33.300 --> 00:09:36.060
We're going to go through each of these elements of the list.

128
00:09:36.060 --> 00:09:41.550
And for each of them, we're going to see if there is a match for that element in the case that it coincides

129
00:09:41.550 --> 00:09:42.390
with this structure.

130
00:09:42.390 --> 00:09:44.580
Then we're going to execute these two lines.

131
00:09:44.730 --> 00:09:46.770
It will print this and then this.

132
00:09:47.720 --> 00:09:50.540
In the case that it matches this other structure.

133
00:09:50.540 --> 00:09:52.610
It's going to print this and then this.

134
00:09:52.640 --> 00:09:56.840
And in the case that it doesn't match any structure, it's going to say it doesn't know what the hell

135
00:09:56.840 --> 00:09:57.440
that is.

136
00:09:58.290 --> 00:09:59.910
We run it to see what happens.

137
00:09:59.910 --> 00:10:00.900
And here we go.

138
00:10:01.440 --> 00:10:06.540
First it tells us it's a client because it started by going through the client element and then it told

139
00:10:06.540 --> 00:10:07.010
us.

140
00:10:07.020 --> 00:10:09.600
Federico, 46, instructor.

141
00:10:10.380 --> 00:10:16.140
Then our followup went to the second element, which is movie, which is detected that it matches this

142
00:10:16.140 --> 00:10:18.030
structure and not the previous one.

143
00:10:18.240 --> 00:10:20.970
It said it's a movie called Matrix.

144
00:10:21.000 --> 00:10:24.330
Keanu Reeves, Lana and Lilly Michalski.

145
00:10:25.890 --> 00:10:27.660
And then it went to the third element.

146
00:10:28.960 --> 00:10:30.850
It didn't know what that is.

147
00:10:30.880 --> 00:10:33.520
It didn't find it in this case or this case.

148
00:10:33.790 --> 00:10:38.950
And it printed this last case saying, I don't know what this is and that's it.

149
00:10:39.780 --> 00:10:41.820
But why didn't Python have this before?

150
00:10:41.850 --> 00:10:48.330
Every other language is had it because it basically Python had something very similar using the if an

151
00:10:48.330 --> 00:10:53.350
LF and so on, by adding this functionality that allows to detect patterns.

152
00:10:53.370 --> 00:10:59.040
It went much further and so they said, yes, now we're going to give Python to this cool feature,

153
00:10:59.160 --> 00:11:01.350
which I hope you're interested to learn about.

154
00:11:01.560 --> 00:11:03.120
So thanks for watching this update.

155
00:11:03.120 --> 00:11:05.100
And let's get back to the project of the day.
