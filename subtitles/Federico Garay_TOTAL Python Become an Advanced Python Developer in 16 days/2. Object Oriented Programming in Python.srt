1
00:00:08,030 --> 00:00:12,710
The time to introduce the core concept of Python programming has come.

2
00:00:12,920 --> 00:00:17,520
So let's talk about object oriented programming, Opie.

3
00:00:18,230 --> 00:00:25,070
Opie is a programming concept that allows us to organize code in a way that closely resembles how we

4
00:00:25,070 --> 00:00:32,240
think in real life designing digital objects that we can create, manipulate or destroy.

5
00:00:32,900 --> 00:00:38,300
In OP, we call class to the code that defines an object.

6
00:00:38,840 --> 00:00:45,770
Classes allow us to group a set of variables and functions so that our objects have life.

7
00:00:46,400 --> 00:00:53,060
Anything you can imagine from everyday life that you want to represent in a program can be represented

8
00:00:53,060 --> 00:00:59,930
in a class such as a chair, a building, a light, a backdrop, or a bird.

9
00:01:00,530 --> 00:01:02,900
Let's take the bird as an example.

10
00:01:03,860 --> 00:01:11,180
If you create a class to define the concept of bird, you will define different characteristics for

11
00:01:11,180 --> 00:01:11,540
it.

12
00:01:12,020 --> 00:01:12,680
What do you think?

13
00:01:12,680 --> 00:01:17,120
Such as the color, habitat, age, size?

14
00:01:17,570 --> 00:01:21,020
We call these characteristics attributes.

15
00:01:21,680 --> 00:01:26,780
On the other hand, classes have a set of functionalities or things they can do.

16
00:01:27,170 --> 00:01:32,540
In the case of the bird, it could fly, it could eat, it could make noise and chirp.

17
00:01:32,900 --> 00:01:36,140
We call these functionalities methods.

18
00:01:36,140 --> 00:01:39,050
Finally, we can create many types of birds.

19
00:01:39,230 --> 00:01:45,560
Each bird is a different bird that in your program is going to be created from a bird class.

20
00:01:45,920 --> 00:01:50,330
We can have a bird named Twitty or a parrot named Pepe.

21
00:01:50,750 --> 00:01:54,110
We will call these different birds objects.

22
00:01:54,560 --> 00:01:58,220
That is the abstract concept of bird is the class.

23
00:01:58,400 --> 00:02:04,610
But Twitty or Pepe or any specific bird itself will be an object.

24
00:02:05,360 --> 00:02:10,640
Each instance of the bird class will be considered that object.

25
00:02:10,790 --> 00:02:16,340
In this section, you will learn how to create a class, how to define its attributes and methods in

26
00:02:16,340 --> 00:02:20,600
order to create objects or instances of that class.

27
00:02:20,900 --> 00:02:22,580
So I insist.

28
00:02:22,970 --> 00:02:29,630
OP is a concept of programming and not all programming languages support OP.

29
00:02:30,200 --> 00:02:32,090
Of course Python does.

30
00:02:32,130 --> 00:02:33,320
That's why we're learning it.

31
00:02:33,320 --> 00:02:38,900
And in the next few lectures we will learn in depth all about OP.

32
00:02:39,050 --> 00:02:48,680
Object oriented programming is based on six basic principles or pillars inheritance, polymorphism,

33
00:02:49,010 --> 00:02:55,220
cohesion, abstraction, coupling, and encapsulation.

34
00:02:56,030 --> 00:03:01,430
Don't worry about memorizing these right now because very soon we are going to learn each one of these

35
00:03:01,430 --> 00:03:08,120
concepts one by one, and why they are so important as the pillars of OP.

36
00:03:08,750 --> 00:03:12,230
So why did object oriented programming come about?

37
00:03:12,740 --> 00:03:18,950
Before it existed, only functions were used to program events, which you just learned in the previous

38
00:03:18,950 --> 00:03:19,790
few days.

39
00:03:20,090 --> 00:03:26,570
And as you know, they allow grouping blocks of code under a certain name to do a specific task.

40
00:03:26,900 --> 00:03:34,370
This was very useful because it allowed us to reuse certain modules or functions without having to copy

41
00:03:34,370 --> 00:03:39,560
the code over and over, but just call it out every time we needed it.

42
00:03:40,430 --> 00:03:46,610
So functions are very useful, but they were not able to satisfy all programmers needs.

43
00:03:47,120 --> 00:03:54,380
One of the problems is that functions only perform some operations on input data to deliver an output,

44
00:03:54,500 --> 00:04:00,590
and yet they don't care too much about keeping that data or maintaining some kind of state unless a

45
00:04:00,590 --> 00:04:05,570
value is returned in the function call and assign to a variable as we've done.

46
00:04:06,710 --> 00:04:12,770
If we don't do it this way, everything that happens inside the function is forgotten and this tends

47
00:04:12,770 --> 00:04:13,850
to be a problem.

48
00:04:14,000 --> 00:04:18,470
Let's imagine we have a game where you fight off zombies moving around the screen.

49
00:04:20,090 --> 00:04:26,660
Each zombie will have parameters like their position, size, direction, speed, damage, resistance

50
00:04:26,660 --> 00:04:27,680
among others.

51
00:04:28,040 --> 00:04:35,150
If we didn't use classes to store that data as attributes of each object, we would need to have a variable

52
00:04:35,150 --> 00:04:37,580
for each data we want to store.

53
00:04:38,180 --> 00:04:44,090
The problem comes if we have 20 or more zombies, since we would end up managing a very high number

54
00:04:44,090 --> 00:04:45,140
of variables.

55
00:04:45,230 --> 00:04:49,610
Your code would be complete chaos in response to this issue.

56
00:04:49,640 --> 00:04:52,220
Object oriented programming was born.

57
00:04:52,520 --> 00:04:58,430
It's a perfect tool that allows us to solve certain types of problems in a much simpler and organized

58
00:04:58,430 --> 00:05:00,260
way with less code.

59
00:05:00,650 --> 00:05:07,820
In addition, we can group a set of variables, attributes and methods into a class and make it reusable.

60
00:05:07,880 --> 00:05:13,940
Reusable features that not only are easy to maintain and update, but are flexible for different uses.

61
00:05:14,330 --> 00:05:18,080
In the next lecture, we are going to learn how to create classes.

62
00:05:18,200 --> 00:05:20,630
It's not something you want to miss.

63
00:05:20,630 --> 00:05:23,750
So we're going to be waiting for you there right now.
