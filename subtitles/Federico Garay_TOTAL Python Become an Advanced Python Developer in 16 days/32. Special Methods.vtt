WEBVTT
1
00:00:07.760 --> 00:00:14.060
Special methods, also known as magic methods or dunder methods, are special methods that have double

2
00:00:14.060 --> 00:00:17.450
underscores at the beginning and the end of their names.

3
00:00:17.690 --> 00:00:19.700
We have already known some of them.

4
00:00:19.700 --> 00:00:27.200
For example, the init method which helps us initialize the attributes of a new class, or the MRO method

5
00:00:27.200 --> 00:00:34.340
which allows us to know the order in which the searched for inherited methods is organized and others

6
00:00:34.340 --> 00:00:39.230
like bases and subclasses that we have learned when we talked about inheritance.

7
00:00:39.500 --> 00:00:44.780
The point is that there are many more special methods and they are going to be used to create functionality

8
00:00:44.780 --> 00:00:47.990
that cannot be presented in a regular method.

9
00:00:47.990 --> 00:00:52.280
So let's go over to PY charm to learn about some of the most used ones.

10
00:00:52.880 --> 00:00:57.590
Well, we'll get to know special methods by means of the ones we already know, since they are the most

11
00:00:57.590 --> 00:00:59.250
basic ones of Python.

12
00:00:59.270 --> 00:01:03.980
Suppose I have a list that's equal to several ones and I want to know how many there are.

13
00:01:04.340 --> 00:01:10.000
To do so, I'll print the Len method of my list, which is a python built in method.

14
00:01:10.010 --> 00:01:15.410
Since lists are defined in a class called list which we can't see in our code.

15
00:01:16.010 --> 00:01:20.120
So if I print this, I can see that my list contains seven elements.

16
00:01:20.120 --> 00:01:21.230
Seven ones.

17
00:01:21.500 --> 00:01:26.150
But what if I want to apply the Len method to a class created by me?

18
00:01:26.830 --> 00:01:29.770
So let's create a basic class named object.

19
00:01:29.830 --> 00:01:34.330
We won't put anything special, just a pass so as to leave it empty.

20
00:01:35.050 --> 00:01:41.650
So we'll create an instance of this class which will be named my object and we'll be equal to object.

21
00:01:43.170 --> 00:01:46.920
So now imagine we want to print the length of my object.

22
00:01:47.310 --> 00:01:49.710
What do you think will receive here?

23
00:01:50.340 --> 00:01:53.000
So we'll receive seven and an error.

24
00:01:53.010 --> 00:01:56.580
It says object of type object has no Len.

25
00:01:56.670 --> 00:01:58.410
So this cannot be applied.

26
00:01:58.920 --> 00:02:00.480
So another example.

27
00:02:00.510 --> 00:02:05.640
If instead of length of my list, we want to print my list, we can.

28
00:02:05.640 --> 00:02:10.950
But we also want to print my object since it is an object just like my list.

29
00:02:11.550 --> 00:02:16.410
So if we print both of them, we'll be able to see the list because its instances are programmed to

30
00:02:16.410 --> 00:02:17.700
be displayed this way.

31
00:02:17.730 --> 00:02:20.700
And we'll also see my object as a string.

32
00:02:20.910 --> 00:02:24.540
Although it doesn't contain anything, it doesn't do anything yet.

33
00:02:24.540 --> 00:02:27.420
It exists and it is an object located here.

34
00:02:27.930 --> 00:02:32.610
So we received basically a string representing the instance of the object class.

35
00:02:32.820 --> 00:02:34.500
Now I have a question.

36
00:02:34.500 --> 00:02:41.340
How can I use basic functions of Python like Len and print in objects of my own objects I have defined?

37
00:02:42.110 --> 00:02:44.510
The time to use special methods has come.

38
00:02:44.930 --> 00:02:48.590
So look, let's get to work with a new class named C D.

39
00:02:48.710 --> 00:02:49.980
Do you remember this?

40
00:02:50.000 --> 00:02:53.360
Maybe you were very young, but we used to listen to see these.

41
00:02:53.810 --> 00:02:57.980
So we'll create a class in order to create instances of compact disc.

42
00:02:58.250 --> 00:03:06.170
Let's define some attributes through in it, which will be self, a songwriter, a title, and a number

43
00:03:06.170 --> 00:03:07.040
of songs.

44
00:03:07.680 --> 00:03:13.590
Then we have to create a constructor using self songwriter which will be equal to the songwriter that

45
00:03:13.590 --> 00:03:15.990
we pass when creating each instance.

46
00:03:16.720 --> 00:03:24.160
So self title will be equal to the title that we passed when creating the instance and self songs will

47
00:03:24.160 --> 00:03:26.650
be equal to the songs that will pass.

48
00:03:28.640 --> 00:03:31.100
So we have defined the string attributes.

49
00:03:31.130 --> 00:03:37.670
Now we'll create an instance named My Seed, which will be equal to a CD containing the following data.

50
00:03:38.000 --> 00:03:40.970
The songwriter in this case will be Pink Floyd.

51
00:03:41.060 --> 00:03:45.620
The album title will be The Wall, which I advise you to listen to if you haven't.

52
00:03:45.710 --> 00:03:49.250
So this album includes 24 songs, no less.

53
00:03:49.430 --> 00:03:54.380
Okay, we'll print C.D. and will obtain a string just like this one.

54
00:03:54.920 --> 00:03:56.660
But this is not what we want.

55
00:03:56.690 --> 00:03:59.810
We want to print our album and see its information.

56
00:04:00.050 --> 00:04:05.030
In fact, this would have been the result of casting my CD into a string.

57
00:04:06.670 --> 00:04:10.300
And look, we execute it and we get exactly the same.

58
00:04:10.780 --> 00:04:14.470
So in this case, we can use a special method that we will type here.

59
00:04:14.890 --> 00:04:21.790
Let's enter def, underscore, underscore, and here we have STR which brings self along.

60
00:04:22.000 --> 00:04:28.300
This special method helps us as class creators to devise the way in which we want our clustering to

61
00:04:28.300 --> 00:04:30.850
be displayed every time a method requires it.

62
00:04:31.810 --> 00:04:37.390
So we'll put return here so as to get back a string literal reading album colon.

63
00:04:37.390 --> 00:04:44.890
And here we put self dot title, concatenate it with bi and call self dot songwriter.

64
00:04:45.340 --> 00:04:50.260
So this is what we want to be returned in string format every time a method requires it.

65
00:04:50.530 --> 00:04:56.230
So now we'll print my CD in order to get album The World by Pink Floyd.

66
00:04:57.040 --> 00:05:02.260
So we have determined the way in which the string of special method will function every time it is called

67
00:05:02.260 --> 00:05:03.130
by a method.

68
00:05:03.760 --> 00:05:05.800
Now it is showing what we want.

69
00:05:06.730 --> 00:05:10.480
Due to this, strings, dictionaries and more can be printed.

70
00:05:10.780 --> 00:05:16.810
This special method alters the behavior of strings, dictionaries, tuples, among other things, and

71
00:05:16.830 --> 00:05:20.740
establishes the way in which the strings of these objects will be created.

72
00:05:21.520 --> 00:05:26.800
It's exactly what we're doing with the CD object, so we'll do the same with the length.

73
00:05:26.830 --> 00:05:30.880
If we want to print the length of my CD and we execute it.

74
00:05:30.910 --> 00:05:36.220
The software will tell us that there is an error as the object of type C D has no len.

75
00:05:37.420 --> 00:05:44.710
But we can decide what's going to happen using def underscore, underscore and the Len special method.

76
00:05:45.490 --> 00:05:51.100
As a result, we'll be able to decide what will happen when someone asks for the length of CDs.

77
00:05:52.090 --> 00:06:00.670
So let's make it Return Self songs, which contains the number of songs included in the album and consequently

78
00:06:00.670 --> 00:06:05.980
as programmers of the CD class, we're establishing that the length of this object is the number of

79
00:06:05.980 --> 00:06:06.670
songs.

80
00:06:07.150 --> 00:06:10.930
So let's execute this and ask for the length of my CD again.

81
00:06:11.600 --> 00:06:14.630
And we can see that the length is 24.

82
00:06:14.990 --> 00:06:16.340
So we didn't get an error.

83
00:06:16.340 --> 00:06:19.940
And on top of that, the software returned what we wanted to be returned.

84
00:06:19.970 --> 00:06:21.830
That's what's supposed to happen.

85
00:06:21.950 --> 00:06:26.300
As programmers, we have to be able to decide what the software will return.

86
00:06:26.720 --> 00:06:28.460
So one more example.

87
00:06:28.550 --> 00:06:32.360
There's a function named Dell which stands for Delete.

88
00:06:33.110 --> 00:06:36.740
So we can delete any instance we create by using this function.

89
00:06:37.040 --> 00:06:39.320
Let's try to delete my CD.

90
00:06:40.600 --> 00:06:45.220
So we won't see anything displayed if we execute this because we didn't do anything that was supposed

91
00:06:45.220 --> 00:06:46.210
to be displayed.

92
00:06:46.420 --> 00:06:49.810
Nevertheless, my CD doesn't exist anymore.

93
00:06:50.380 --> 00:06:54.790
If we try to print it, we'll get an error since my CV is not defined.

94
00:06:55.900 --> 00:07:00.700
So Dell just deletes things without telling us if the removal was successful.

95
00:07:01.410 --> 00:07:05.370
It'd be better for us if Dell showed something in the console as well.

96
00:07:05.730 --> 00:07:09.990
And to do so, we can alter its behavior through death.

97
00:07:09.990 --> 00:07:12.270
Underscore, underscore, Del.

98
00:07:12.300 --> 00:07:16.320
Now we can make Del delete something and print a message as well.

99
00:07:16.320 --> 00:07:19.560
Something like CD has been deleted.

100
00:07:20.250 --> 00:07:23.070
We can even make it display the title of the album.

101
00:07:23.070 --> 00:07:23.820
It deleted.

102
00:07:24.770 --> 00:07:27.260
So now if we execute this, we'll read.

103
00:07:27.290 --> 00:07:28.940
See, this has been deleted.

104
00:07:29.210 --> 00:07:34.010
Not only does Dell carry out its function, but it also informs the user about it.

105
00:07:35.470 --> 00:07:41.050
So these three examples included three special methods STR, Alien and D.

106
00:07:41.110 --> 00:07:47.620
L hope you were able to understand how we can alter the behavior of objects and classes that we create.

107
00:07:47.800 --> 00:07:52.060
There are more special methods, of course, but we can't demonstrate them all.

108
00:07:52.330 --> 00:07:59.800
Look, every time we call see the DOT, we have numerous special methods available, the ones with underscores.

109
00:08:00.220 --> 00:08:05.260
And I strongly advise you, like I always do, to try them on your own and read the documents.

110
00:08:05.470 --> 00:08:10.480
If you want to create an object that which performs a special function, make sure there's a method

111
00:08:10.480 --> 00:08:11.950
for that in the first place.

112
00:08:12.250 --> 00:08:16.990
So use Google the official documents and our course Q&amp;A section.

113
00:08:17.560 --> 00:08:20.710
These are Python special methods, so that's all for now.

114
00:08:20.710 --> 00:08:26.440
Let's do some activities and you have to answer a questionnaire using all the information I gave you

115
00:08:26.440 --> 00:08:27.010
today.

116
00:08:27.130 --> 00:08:32.440
So you have a chance to design a cool program by yourself and then we'll check it out together.

117
00:08:32.710 --> 00:08:33.820
So see you soon.
