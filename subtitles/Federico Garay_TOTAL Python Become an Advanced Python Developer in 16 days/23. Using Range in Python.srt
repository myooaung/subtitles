1
00:00:07,550 --> 00:00:13,970
Now that you understand about loops and iterations, you will have notice that to establish how many

2
00:00:13,970 --> 00:00:22,070
iterations my loop will have, we often need to create a list with a number of elements equal to the

3
00:00:22,070 --> 00:00:23,400
iterations we need.

4
00:00:23,420 --> 00:00:30,380
For example, if we need a block of code to repeat four times so far we need to create a list with the

5
00:00:30,380 --> 00:00:34,760
numbers 1 to 4 in order to iterate over its elements.

6
00:00:34,880 --> 00:00:40,640
Well, actually, there is a more efficient way to do it, and that is using the keyword range.

7
00:00:40,880 --> 00:00:47,390
A range is a function that allows you to set a range of numbers without creating a list or even creating

8
00:00:47,390 --> 00:00:48,290
a variable.

9
00:00:48,470 --> 00:00:55,370
Let's go over to PY charm to learn how range works and then let's go on with ranges in Python.

10
00:00:55,400 --> 00:01:00,320
Up to the moment we said that if we wanted to create a loop that would be repeated, for example, four

11
00:01:00,320 --> 00:01:05,960
times on a list, you had to create a list that had, for example, the numbers one, two, three and

12
00:01:05,960 --> 00:01:06,620
four.

13
00:01:06,710 --> 00:01:11,720
And now I can create a for loop that goes for each number in the list and do something.

14
00:01:11,720 --> 00:01:13,880
For example, print the number.

15
00:01:14,450 --> 00:01:17,120
So if I run this, let's open it in run.

16
00:01:17,240 --> 00:01:20,490
We have one, two, three and four, four lines.

17
00:01:20,510 --> 00:01:26,180
Well, this way it's effective, but it's not the most efficient, because if we have the range function,

18
00:01:26,180 --> 00:01:28,700
we can do it in a much more practical way.

19
00:01:28,850 --> 00:01:31,940
So let's eliminate this list and we will not need it.

20
00:01:32,510 --> 00:01:33,800
We can write our loop.

21
00:01:33,800 --> 00:01:39,320
And here, instead of appealing to an external list, we're going to appeal to a range that we are going

22
00:01:39,320 --> 00:01:42,710
to create at this moment and in this place and range.

23
00:01:42,710 --> 00:01:47,750
As you see, it has some parentheses so that we can put parameters here.

24
00:01:48,800 --> 00:01:51,140
Well, I want a range that goes up to five.

25
00:01:51,590 --> 00:01:52,370
With only this.

26
00:01:52,370 --> 00:01:57,620
I already have the possibility of iterating through all the numbers that go in this case from 0 to 5,

27
00:01:57,620 --> 00:02:00,560
because the range starts by default at zero.

28
00:02:01,010 --> 00:02:07,160
So if we execute, we have zero one, two, three, four, but five is not included.

29
00:02:07,190 --> 00:02:12,140
So the second argument that is not too inclusive, it is where the range is going to stop.

30
00:02:12,440 --> 00:02:17,690
If I wanted to start from one, I can put the one first, the comma and the five, because these two

31
00:02:17,690 --> 00:02:23,690
range parameters say the first is where it will begin and the second is, which will be the first number

32
00:02:23,690 --> 00:02:25,310
that will be out of the range.

33
00:02:25,670 --> 00:02:31,010
So in this case, it's going to give us one, two, three and four, which is what we had before.

34
00:02:31,130 --> 00:02:37,670
So I can set any range I can put from 20 to 30, and it will give us all of those numbers if I want

35
00:02:37,670 --> 00:02:41,000
it to include 30, I actually put it up to 31.

36
00:02:41,630 --> 00:02:45,560
And here I'm going to have from 20 to 30 inclusive.

37
00:02:45,860 --> 00:02:51,350
And not only this but range can also take a third parameter that if you don't use it, nothing happens.

38
00:02:51,350 --> 00:02:56,390
But if you include it after a comma, you can establish the steps that the range is going to take to

39
00:02:56,390 --> 00:02:57,380
skip numbers.

40
00:02:57,650 --> 00:03:04,370
So if I set it to be every two steps, then we will have 20, 22, 24, 26 and so on.

41
00:03:04,730 --> 00:03:11,090
I could set it to every three or whatever number I want as long as it's an integer range does not receive

42
00:03:11,090 --> 00:03:12,890
float in any of its parameters.

43
00:03:12,920 --> 00:03:18,980
Keep that in mind then this is range and thus it serves as to use inside loops and makes them much more

44
00:03:18,980 --> 00:03:19,700
efficient.

45
00:03:20,180 --> 00:03:23,720
But also we can use it outside the loops in which cases.

46
00:03:23,720 --> 00:03:27,280
So imagine you have created a list that goes from 1 to 100.

47
00:03:27,290 --> 00:03:32,990
So what you have to do with this list equals 1 to 3 and so on up to 100.

48
00:03:33,110 --> 00:03:34,310
No, that's impossible.

49
00:03:34,310 --> 00:03:35,740
We're not going to do it in that way.

50
00:03:35,750 --> 00:03:40,010
What we would do in this case would be to create a list that is equal to a range.

51
00:03:40,010 --> 00:03:44,600
But we're going to do it in a casting and we're going to put it inside a list.

52
00:03:44,870 --> 00:03:48,530
And here we put let's say we want the numbers from 1 to 100.

53
00:03:48,530 --> 00:03:50,510
You can even try with large numbers.

54
00:03:50,750 --> 00:03:55,670
Well, it would be from one comma to 101 to include the 100.

55
00:03:55,670 --> 00:03:57,200
And here we already have it.

56
00:03:57,830 --> 00:04:01,610
So let's ask it to print here and to show us our list while we run it.

57
00:04:01,850 --> 00:04:04,400
And here we have one, two, three and four.

58
00:04:04,550 --> 00:04:07,640
And so it goes off the screen until we get to 100.

59
00:04:08,240 --> 00:04:13,580
So range is a very simple and very useful function that can save you a lot of time and code.

60
00:04:13,580 --> 00:04:17,060
So thanks for joining us in this lecture and we're waiting for you in the next one.
