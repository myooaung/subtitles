1
00:00:08,360 --> 00:00:10,790
Welcome to this new lesson here.

2
00:00:10,790 --> 00:00:12,860
We're going to get to know Google Code Labs.

3
00:00:12,860 --> 00:00:18,410
And for that, I'm currently inside my drive where I've created a folder called My Collapse.

4
00:00:18,620 --> 00:00:24,020
And from here, I'm going to show you how to create and then how to use a co lab document.

5
00:00:24,500 --> 00:00:27,650
We create it by right clicking anywhere in our folder.

6
00:00:27,950 --> 00:00:35,030
We go to more and just as we create any Google document, what we're going to create here is a Google

7
00:00:35,030 --> 00:00:36,140
Collaboratory.

8
00:00:36,710 --> 00:00:39,020
This is where our environment is opened.

9
00:00:39,740 --> 00:00:44,930
This is an ideal tool because it not only serves to practice and improve our knowledge in techniques

10
00:00:44,930 --> 00:00:51,410
and tools of data science, but also for the development of applications of machine learning and deep

11
00:00:51,410 --> 00:00:56,570
learning without having to invest a penny in programs, storage, etc..

12
00:00:56,780 --> 00:01:05,300
Well, with CoLab you can write Python code just as we do in Python or in any other IDE, but it is

13
00:01:05,300 --> 00:01:11,630
especially useful in this case to be able to share and export our code, just as if it were any other

14
00:01:11,630 --> 00:01:15,620
drive document, as if it were a text file or spreadsheet.

15
00:01:16,580 --> 00:01:21,740
Well, you can share these co labs just like those because they are stored in the cloud.

16
00:01:22,580 --> 00:01:28,310
But the main difference you'll see with any other ID like Pi charm, the one we've been using so far,

17
00:01:28,460 --> 00:01:35,510
is that with other IDs, we work with the sheet type code that is a large document in a single file

18
00:01:35,540 --> 00:01:41,240
where you can write one line under the other, and then when you run it, it runs in the order you've

19
00:01:41,240 --> 00:01:41,930
written it.

20
00:01:42,950 --> 00:01:48,380
The CoLab notebooks, on the other hand, store the code in separate cells, and this changes some of

21
00:01:48,380 --> 00:01:50,690
the issues we're going to look at in practice.

22
00:01:51,020 --> 00:01:56,930
So let's start here with the first cell, which is ready for us to start writing here.

23
00:01:56,930 --> 00:01:58,580
I'm going to write any order.

24
00:01:59,270 --> 00:02:04,970
I'm going to create a variable name and I'm going to designate a value to it that can be Frederico.

25
00:02:05,540 --> 00:02:07,730
This is the content of the variable.

26
00:02:08,480 --> 00:02:14,060
So if I press enter, I will appear in the next line where I can continue writing more code.

27
00:02:14,060 --> 00:02:18,110
For example, age, another variable equal to 45.

28
00:02:18,410 --> 00:02:21,050
So if I press enter, I will continue adding lines.

29
00:02:21,050 --> 00:02:26,720
But in order to exit this cell, I will press shift and enter here.

30
00:02:26,720 --> 00:02:30,080
I have exited the cell and the cell is currently executing.

31
00:02:30,800 --> 00:02:34,760
Execute here is different than we have seen in Python here.

32
00:02:34,760 --> 00:02:41,420
Execute means that it is loaded into the system and the system now knows that name is equal to Federico

33
00:02:41,420 --> 00:02:43,760
and the age is equal to 45.

34
00:02:44,150 --> 00:02:50,420
If in this other cell I write a line that refers to one of these variables, for example, print name

35
00:02:50,420 --> 00:02:56,780
and execute it by clicking here we see that the output is Federico because this cell looks for this

36
00:02:56,780 --> 00:03:00,320
value which was already loaded in the previous cell.

37
00:03:01,070 --> 00:03:02,630
But it doesn't end here.

38
00:03:02,780 --> 00:03:04,610
I'm going to go to a new cell.

39
00:03:04,790 --> 00:03:09,860
I can do this here, going to plus code and this creates a new cell.

40
00:03:10,190 --> 00:03:15,350
Or I can go down here where it also says plus code and this will create another cell to.

41
00:03:15,800 --> 00:03:21,800
Well, the point is that from here I'm going to rewrite or override the name variable and I'm going

42
00:03:21,800 --> 00:03:23,570
to make it equal to fill.

43
00:03:24,800 --> 00:03:31,400
Note that I didn't execute this cell yet because I didn't press the shift enter combination, nor did

44
00:03:31,400 --> 00:03:33,890
I click here on this play icon.

45
00:03:34,640 --> 00:03:40,760
So I'm going to go back to the cell containing print name and remember that this other cell hasn't been

46
00:03:40,760 --> 00:03:41,780
executed yet.

47
00:03:42,710 --> 00:03:47,660
So I go back to this cell and print name returns to type Federica.

48
00:03:47,810 --> 00:03:49,220
So why did that happen?

49
00:03:49,340 --> 00:03:52,730
Because this cell has not yet been loaded into the system.

50
00:03:53,030 --> 00:04:00,590
So if I run it now and then rerun this print and now it does say fill, even though this cell is before

51
00:04:00,590 --> 00:04:07,100
this cell, if we were to follow the logic of Python, we would say that the first name is Federico

52
00:04:07,310 --> 00:04:11,000
and then I print Federico, then I change the variable fill.

53
00:04:11,270 --> 00:04:15,350
But when this print was executed, there was still Federico.

54
00:04:16,100 --> 00:04:17,210
But in co labs.

55
00:04:17,210 --> 00:04:23,960
On the other hand, if I re execute this cell and now I re execute this print, now Federico is again

56
00:04:23,960 --> 00:04:26,450
the value contained in the variable name.

57
00:04:27,530 --> 00:04:33,110
So this ordering may be confusing to you, but it's important to know that when you execute a cell,

58
00:04:33,140 --> 00:04:39,440
the compiler updates and has this new value loaded cells can be reordered.

59
00:04:39,440 --> 00:04:46,190
So if I want this cell that has the print to go underneath it, I move it and then I have the print

60
00:04:46,190 --> 00:04:49,160
underneath it and I can keep repositioning them.

61
00:04:49,610 --> 00:04:56,750
So I rerun Federico, I rerun fill and I rerun the print and now fill is loaded.

62
00:04:57,410 --> 00:05:00,860
Do you follow me so I can also create cells that are text?

63
00:05:01,030 --> 00:05:08,320
Only I can come here to plus text or stop here and create this cell, which the only thing is going

64
00:05:08,320 --> 00:05:10,240
to do is type text.

65
00:05:10,240 --> 00:05:14,590
That's not going to be executable, but it's going to appear on the screen.

66
00:05:15,190 --> 00:05:21,640
So if I want, for example, to write a notebook that has some instructions, some descriptions, etc.,

67
00:05:21,880 --> 00:05:25,750
then here I say the following is a function.

68
00:05:26,320 --> 00:05:28,990
I can do that, and this is just text.

69
00:05:29,590 --> 00:05:35,290
I can make it all bold and I can put images and I can put paragraphs and even emojis.

70
00:05:35,770 --> 00:05:42,730
So once I get out of here, it's just a decorative text that's useful for organizing a notebook or communicating

71
00:05:42,730 --> 00:05:43,360
something.

72
00:05:43,540 --> 00:05:50,620
But if I run the whole thing, it doesn't modify the compiler and let's write a function to see how

73
00:05:50,620 --> 00:05:52,390
this part of the code works as well.

74
00:05:53,050 --> 00:06:01,060
So I'm going to define it with Def Show Name and we're going to pass it as a parameter person and we

75
00:06:01,060 --> 00:06:05,350
continue writing inside the same cell to write the content of our function.

76
00:06:05,890 --> 00:06:10,390
And we're going to do print hello a space.

77
00:06:10,390 --> 00:06:13,390
And after the quotes we concatenate to person.

78
00:06:14,530 --> 00:06:21,130
So now I execute this cell with shift plus enter so I can get out of here and let the compiler read

79
00:06:21,130 --> 00:06:21,520
it.

80
00:06:22,060 --> 00:06:27,970
Now the function already exists in the compiler and now I'm going to invoke this function putting show

81
00:06:27,970 --> 00:06:28,630
name.

82
00:06:28,780 --> 00:06:30,430
And you can see that here too.

83
00:06:30,460 --> 00:06:37,960
If I stop the context sensitive help appears just like in picture and I can press tab to make it complete

84
00:06:38,410 --> 00:06:40,840
and let's pass it a name as a parameter.

85
00:06:41,140 --> 00:06:46,510
I try Alex and if I execute this cell, the result is Hello Alex.

86
00:06:47,050 --> 00:06:53,470
Everything works perfectly and look what's going to happen now if I change hello to goodbye and I don't

87
00:06:53,470 --> 00:06:54,160
execute it.

88
00:06:54,160 --> 00:06:57,730
I just exit with the cursor and I execute the call again.

89
00:06:58,420 --> 00:07:02,590
It still says hello, although the visible code says goodbye.

90
00:07:02,620 --> 00:07:08,620
Nothing has been changed inside the compiler and until I execute this cell, the compiler doesn't realize

91
00:07:08,620 --> 00:07:10,210
that there has been a change here.

92
00:07:11,200 --> 00:07:16,360
Now, if I call show name, I get goodbye Alex, which is the greeting we have.

93
00:07:17,110 --> 00:07:20,230
So that's the basics of Google CoLab for now.

94
00:07:20,740 --> 00:07:25,920
And on this day we're going to use this environment because as we said, it is ideal for carrying out

95
00:07:25,930 --> 00:07:33,910
data science applications, graphical representations of big data, graphical visualizations and exploratory

96
00:07:33,910 --> 00:07:35,110
data analysis.

97
00:07:35,290 --> 00:07:41,500
It is especially perfect for sharing code files and for working collaboratively just as we share any

98
00:07:41,500 --> 00:07:42,550
Google document.

99
00:07:43,180 --> 00:07:45,340
So let's move on to the next lesson.
