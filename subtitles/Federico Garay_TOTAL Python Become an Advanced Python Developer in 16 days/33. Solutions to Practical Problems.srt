1
00:00:08,030 --> 00:00:08,650
All right.

2
00:00:08,660 --> 00:00:09,860
That was a lot of work.

3
00:00:09,890 --> 00:00:12,260
Hopefully you were able to do it yourself.

4
00:00:12,500 --> 00:00:15,600
Otherwise, we're going to go through it right now.

5
00:00:15,620 --> 00:00:16,520
Let's get to it.

6
00:00:24,200 --> 00:00:29,780
In the first exercise, you had to create a function called return different values, a function able

7
00:00:29,780 --> 00:00:34,610
to receive three numbers and return a different value according to the sum of those numbers.

8
00:00:34,970 --> 00:00:40,040
If the sum of the three numbers is higher than 15, our function will return a number higher than the

9
00:00:40,040 --> 00:00:41,030
ones we entered.

10
00:00:41,090 --> 00:00:46,430
If the total is less than ten, it will return the lowest of the three numbers, and if the total is

11
00:00:46,430 --> 00:00:51,350
between ten and 15, it will return a number of an intermediate value.

12
00:00:51,470 --> 00:00:53,540
So how do we solve this using the code?

13
00:00:53,570 --> 00:00:56,150
Well, first of all, we have to create a function.

14
00:00:56,270 --> 00:00:57,800
That's the easy part.

15
00:00:57,830 --> 00:01:03,980
Def will be named return different values and it will need three arguments or parameters.

16
00:01:04,280 --> 00:01:10,430
So we'll name them A, B and C, we type colon and now we're inside the function.

17
00:01:11,060 --> 00:01:16,370
I think we first need to have a variable in which the sum of those three values is solved, that we

18
00:01:16,370 --> 00:01:18,680
can then verify everything.

19
00:01:19,070 --> 00:01:23,210
So some will be equal to A, plus B plus C.

20
00:01:24,160 --> 00:01:29,090
So it'll be very useful to have a variable named list containing a list of those three values.

21
00:01:29,110 --> 00:01:30,340
So what for?

22
00:01:30,370 --> 00:01:35,620
Because this would allow us to order our code, thereby finding which is the intermediate value.

23
00:01:35,740 --> 00:01:39,940
We already know how to find the highest and lowest values using integer methods.

24
00:01:40,660 --> 00:01:42,010
We have the variables.

25
00:01:42,010 --> 00:01:47,920
Now we're going to use flow control so as to see what type of value we have and what we need to do.

26
00:01:48,400 --> 00:01:54,490
So we'll find out if the total is higher than 15, which was the first condition.

27
00:01:55,310 --> 00:01:58,490
If so, this function must return the highest value.

28
00:01:58,610 --> 00:02:00,410
So we'll make return.

29
00:02:00,410 --> 00:02:07,310
Send us back to the highest value on list and eventually we will get the highest value that was passed

30
00:02:07,310 --> 00:02:08,060
to list.

31
00:02:08,540 --> 00:02:12,400
However, it wasn't the case and the sum wasn't higher than 15.

32
00:02:12,410 --> 00:02:20,150
We would use Elif to know whether the return is lower than ten colon and now we know we have to return

33
00:02:20,150 --> 00:02:22,280
the lowest of the values that were entered.

34
00:02:22,460 --> 00:02:27,950
So we type return of list and we can say that this was a piece of cake.

35
00:02:28,400 --> 00:02:31,160
What may have been difficult for you at this part.

36
00:02:31,190 --> 00:02:38,090
Else since we already know is neither higher than 15 nor lower than ten, and whose value will be between

37
00:02:38,090 --> 00:02:39,360
ten and 15?

38
00:02:39,380 --> 00:02:43,760
We need to know the intermediate value, which is not the lowest or the highest.

39
00:02:44,580 --> 00:02:46,140
Here's one way to solve this.

40
00:02:46,170 --> 00:02:51,180
First, we want to order our list because the user hasn't necessarily passed those values from lowest

41
00:02:51,180 --> 00:02:51,990
to highest.

42
00:02:52,380 --> 00:02:57,840
So we will call, list and use the source method, which doesn't require parameters.

43
00:02:58,610 --> 00:03:00,530
We're going to move it to the next line.

44
00:03:00,590 --> 00:03:06,110
Now, our list comprises all the values from lowest to highest, and we can ask it to return the value

45
00:03:06,110 --> 00:03:11,990
that's in list in index number one since zero one and two are its three indexes.

46
00:03:12,470 --> 00:03:14,990
So one, it's the intermediate value.

47
00:03:15,020 --> 00:03:16,850
And now we have created our function.

48
00:03:17,030 --> 00:03:21,030
Now we'll type the call for this function outside of it.

49
00:03:21,050 --> 00:03:26,810
We will ask return different values to apply itself to numbers 25 and seven.

50
00:03:27,550 --> 00:03:30,550
Of course, this song will be equal to a number higher than 15.

51
00:03:30,550 --> 00:03:34,150
But we're going to have to print this in order to see it on the screen.

52
00:03:34,510 --> 00:03:36,430
This is one way to solve it.

53
00:03:37,260 --> 00:03:40,890
So let's type print here and we'll execute this exercise one.

54
00:03:41,660 --> 00:03:46,460
Since the sum of these values is higher than 15, it returns a higher value, which is 20.

55
00:03:46,490 --> 00:03:47,300
It worked.

56
00:03:47,810 --> 00:03:51,050
Now let's test the sum whose total is lower than ten.

57
00:03:51,410 --> 00:03:54,140
It can be done with three, two and four.

58
00:03:54,170 --> 00:03:59,060
This will be equal to nine, thereby meeting the condition that it returns the lowest number, which

59
00:03:59,060 --> 00:03:59,720
is two.

60
00:04:00,140 --> 00:04:02,360
The information returned is correct.

61
00:04:03,080 --> 00:04:09,950
Now we'll select three values whose sum is equal to a number between ten and 15, I believe seven two

62
00:04:09,950 --> 00:04:11,420
and four will be all right.

63
00:04:11,960 --> 00:04:18,470
This sum will be equal to 13, so it will return the immediate value, which is four according to its

64
00:04:18,470 --> 00:04:19,190
values.

65
00:04:19,370 --> 00:04:24,560
We're not talking about the order in which we were passed, but we would have solved it easily by asking

66
00:04:24,560 --> 00:04:25,130
it to return.

67
00:04:25,130 --> 00:04:26,780
B And that's it.

68
00:04:27,020 --> 00:04:31,310
We're talking about the element that's higher than the intermediate value, which is full.

69
00:04:32,340 --> 00:04:38,880
Notice that if the intermediate value had been different e.g. three here and a higher number such is

70
00:04:38,880 --> 00:04:45,660
seven here, so that the total was higher than ten, it would have returned three, which is index zero.

71
00:04:46,470 --> 00:04:50,520
That is to say the index doesn't matter, but the intermediate value.

72
00:04:51,330 --> 00:04:52,980
This was the first exercise.

73
00:04:52,980 --> 00:04:54,780
So let's move on to the second one.

74
00:05:03,120 --> 00:05:07,980
In Exercise two, you were asked to type a function that could have any name you wanted.

75
00:05:08,640 --> 00:05:14,730
That function will receive a word and return it to the user, the letters that form the word without

76
00:05:14,730 --> 00:05:17,380
repeating them in alphabetical order.

77
00:05:17,400 --> 00:05:20,820
So here we have entertained as an example.

78
00:05:21,790 --> 00:05:24,520
This word should be returned more or less like this.

79
00:05:25,060 --> 00:05:27,550
Let's go to Pi Cham to prepare this code.

80
00:05:27,790 --> 00:05:29,170
So what do we need?

81
00:05:29,200 --> 00:05:34,180
First, a function, of course, and we can call it repeated letters.

82
00:05:34,210 --> 00:05:35,530
That could be a good name.

83
00:05:35,770 --> 00:05:38,310
The only argument that will require is word.

84
00:05:38,320 --> 00:05:40,480
So we'll type that and colon.

85
00:05:41,410 --> 00:05:44,080
And now let's start typing the code.

86
00:05:44,710 --> 00:05:49,720
If we want the letters to be repeated, the easiest thing is to store everything in set.

87
00:05:49,840 --> 00:05:53,440
Remember that sets are groups of unrelated elements.

88
00:05:53,500 --> 00:05:59,200
It doesn't matter if you repeat elements, set is going to ignore them and leave only the repeated ones.

89
00:05:59,380 --> 00:06:02,920
A variable called my set would be great to start with.

90
00:06:03,770 --> 00:06:07,470
For now, we have to leave empty, even though an error isn't returned.

91
00:06:07,490 --> 00:06:12,680
It would be wrong if you tried to create the variable this way because what it's being created is an

92
00:06:12,680 --> 00:06:13,820
empty dictionary.

93
00:06:14,690 --> 00:06:20,570
If you want to create an empty set, you have to do the way sets are declared, which is using the word

94
00:06:20,570 --> 00:06:22,190
set and brackets.

95
00:06:22,550 --> 00:06:26,450
Now Python will understand you're referring to an empty set.

96
00:06:27,560 --> 00:06:28,820
So let's keep going.

97
00:06:29,120 --> 00:06:36,710
Now we're going to start a loop that for each letter in word colon will have to provide our set with

98
00:06:36,710 --> 00:06:37,760
all of those letters.

99
00:06:38,510 --> 00:06:45,770
Thus we're going to use the ad method from my set and we're going to type my set dot ad, which is a

100
00:06:45,770 --> 00:06:46,730
common method.

101
00:06:47,420 --> 00:06:48,560
And what will it add?

102
00:06:48,950 --> 00:06:50,390
It will add letter.

103
00:06:51,120 --> 00:06:55,230
So if there are any repeated words, it won't be a problem set.

104
00:06:55,230 --> 00:06:56,220
Won't add them.

105
00:06:57,430 --> 00:06:59,500
So we have our set already built.

106
00:06:59,530 --> 00:07:01,780
Now we have to order it alphabetically.

107
00:07:02,140 --> 00:07:03,850
However, there is a problem.

108
00:07:03,880 --> 00:07:10,510
Sets are not organized groups, so before showing an organizing, it will need to cast it within a list.

109
00:07:11,620 --> 00:07:19,240
We're going to create another variable named my list, which will be the same as a list from my set.

110
00:07:20,390 --> 00:07:27,890
Once the set has been transformed, will make my list employ the sort method, which is typical of lists

111
00:07:27,890 --> 00:07:32,540
and allows us to order the values in a list alphabetically or ascending order.

112
00:07:32,870 --> 00:07:38,510
Now that we've organized our list, we'll be able to say, Please return my list so we can see it.

113
00:07:39,590 --> 00:07:41,060
This is the function.

114
00:07:41,330 --> 00:07:47,000
We'll put this into practice by calling on repeated letters and passing the word entertained.

115
00:07:47,330 --> 00:07:53,480
In order to see this on the screen will need to print it or save it in a variable and then print that

116
00:07:53,480 --> 00:07:54,260
variable.

117
00:07:54,410 --> 00:07:55,340
It's the same.

118
00:07:56,620 --> 00:08:03,460
So we'll run Exercise two and see only the unique letters in entertained, organized in alphabetical

119
00:08:03,460 --> 00:08:04,000
order.

120
00:08:04,960 --> 00:08:06,720
So let's try another word.

121
00:08:06,730 --> 00:08:07,530
I don't know.

122
00:08:07,540 --> 00:08:08,440
Pineapple.

123
00:08:09,190 --> 00:08:10,930
It has a lot of repeated letters.

124
00:08:12,400 --> 00:08:17,140
If we run it, we get a e, i, l, n and p.

125
00:08:17,170 --> 00:08:19,060
This is how this exercise works.

126
00:08:19,270 --> 00:08:23,620
Difficulty levels will raise, so let's continue with the next exercise.

127
00:08:31,840 --> 00:08:37,060
It's likely that the third exercise was difficult to you, since it doesn't have a definite number of

128
00:08:37,060 --> 00:08:40,600
arguments, meaning that you have to work with asterisk args.

129
00:08:40,630 --> 00:08:42,040
Hence it's a challenge.

130
00:08:42,040 --> 00:08:48,940
ARGs is a bit more advanced than basic iterable objects, so we'll create a function named Rose since

131
00:08:48,940 --> 00:08:54,850
we're looking for zeros that are next to each other and we'll pass an indefinite number of arguments

132
00:08:54,850 --> 00:08:59,020
with asterisks args to it colon and we have our function.

133
00:09:00,010 --> 00:09:05,350
Due to the fact that I'm going to iterate over a group of elements and I need to constantly see their

134
00:09:05,350 --> 00:09:06,220
indexes.

135
00:09:06,250 --> 00:09:10,060
I'll need a counter so we can name it counter.

136
00:09:10,060 --> 00:09:15,880
And this will show me a number of increasing one by one, allowing me to determine which is the index

137
00:09:15,880 --> 00:09:21,880
I'll be examining inside my object collection and here it comes, the loop that tells us that for each

138
00:09:21,880 --> 00:09:29,650
end or number inside ARGs that we have to do here is determine if args in the counter index, which

139
00:09:29,650 --> 00:09:32,170
will be zero in the beginning is equal to zero.

140
00:09:32,680 --> 00:09:38,260
So this is not enough though, because if that's the case, then we will also need to know the condition

141
00:09:38,260 --> 00:09:39,400
of the next number.

142
00:09:39,910 --> 00:09:44,590
So we put and so that the two conditions are met no matter what.

143
00:09:44,950 --> 00:09:51,700
If args in the counter index plus one which in the first case will be one in the first iteration and

144
00:09:51,700 --> 00:09:53,230
will be increasing afterwards.

145
00:09:54,140 --> 00:09:56,210
And this is also equal to zero.

146
00:09:57,320 --> 00:10:02,390
If these two conditions are met, I can return the information in which it says that it's true.

147
00:10:03,650 --> 00:10:07,450
Our two conditions are fulfilled, so we're done with this part.

148
00:10:07,460 --> 00:10:12,110
So something had to be done to those conditions that weren't fulfilled.

149
00:10:12,710 --> 00:10:19,160
Yes, we should make our counter increase a number with the symbols plus and equals one.

150
00:10:20,600 --> 00:10:27,680
And this will allow us to check different values on each for repetition, since during the second iteration

151
00:10:27,680 --> 00:10:33,620
it will determine if the element in index one is equal to zero, and if the element in index one plus

152
00:10:33,620 --> 00:10:36,800
one, i.e. two, is also equal to zero.

153
00:10:37,340 --> 00:10:40,400
This will go on until finishing our object collection.

154
00:10:41,270 --> 00:10:46,280
Once the looping is done, if it hasn't found anything, we want it to return.

155
00:10:46,280 --> 00:10:47,510
Return false.

156
00:10:48,540 --> 00:10:52,020
Remember that return is an element that stop the loops.

157
00:10:52,380 --> 00:10:57,870
So if a coincidence appears somewhere around the iterations, this element will stop the search, get

158
00:10:57,870 --> 00:11:00,540
out of the loop and continue with the rest of the code.

159
00:11:01,350 --> 00:11:06,720
If it never stops because it never finds two zeros together, then it will finish doing all the iterations

160
00:11:06,720 --> 00:11:10,470
and before getting out of the function, it will return the false value.

161
00:11:10,770 --> 00:11:13,800
And now we will be done with our whole code.

162
00:11:15,030 --> 00:11:19,440
Now that we have our function defined, let's put it into practice and print something.

163
00:11:19,860 --> 00:11:24,960
We'll print a call to the neighboring zeros function and we'll pass a lot of numbers.

164
00:11:25,140 --> 00:11:29,010
Zero will not be included yet, but I've passed lots of numbers.

165
00:11:29,710 --> 00:11:34,680
Okay, let's run this to see if it returns false, which is what it should return.

166
00:11:35,400 --> 00:11:36,480
That's correct.

167
00:11:36,720 --> 00:11:40,590
There aren't neither neighboring zeros nor zeros at all.

168
00:11:41,460 --> 00:11:46,680
And if I put just one zero somewhere, even then it will return false, because there should be two

169
00:11:46,680 --> 00:11:48,870
zeros, one after the other.

170
00:11:48,900 --> 00:11:50,970
So let's try one more thing.

171
00:11:51,300 --> 00:11:54,750
If I put another zero, we'll have two zeros in our group.

172
00:11:54,840 --> 00:11:56,430
But they won't be neighbors.

173
00:11:56,640 --> 00:11:59,310
Therefore, we still get false.

174
00:11:59,990 --> 00:12:04,010
And now if this and this are neighbors, we will get true.

175
00:12:04,990 --> 00:12:07,450
There's one more situation we need to check.

176
00:12:07,780 --> 00:12:13,210
Suppose we no longer have neighboring zeros, but one on each end and separated.

177
00:12:13,450 --> 00:12:14,560
And we run this.

178
00:12:14,770 --> 00:12:18,790
Notice that I get an error that says tuple index out of range.

179
00:12:18,970 --> 00:12:20,530
So why do I get this error?

180
00:12:20,770 --> 00:12:26,530
Because it went through all the arguments of my args, got to the end and checked if the argument in

181
00:12:26,530 --> 00:12:32,590
the last counter was or wasn't zero but couldn't check the next index because there are no more arguments

182
00:12:32,590 --> 00:12:34,120
for this counter plus one.

183
00:12:34,630 --> 00:12:39,550
Therefore, we inevitably get an error and we can't go on with the program anymore.

184
00:12:39,580 --> 00:12:46,030
This, however, can easily be solved before entering our if we carry out a previous check to see if

185
00:12:46,030 --> 00:12:54,010
counter plus one that is the next index each iteration corresponds to is equal to the len of the args.

186
00:12:54,160 --> 00:12:59,800
If so, then we shouldn't go on with the iterations because the counter plus one index won't exist.

187
00:13:00,070 --> 00:13:04,270
Therefore we're going to ask it to return a false value through return.

188
00:13:04,900 --> 00:13:11,800
Now our if becomes ELIF since we'll run it only if this condition isn't met, and only then would it

189
00:13:11,800 --> 00:13:16,510
begin the whole process and let us get to the end to discover that this is false.

190
00:13:16,810 --> 00:13:19,810
So this would be the ultimate solution to exercise.

191
00:13:19,810 --> 00:13:20,320
Three.

192
00:13:20,890 --> 00:13:22,870
Let's continue with Exercise four

193
00:13:31,090 --> 00:13:36,820
and now we'll check the solution to Exercise four, in which I'm sure you were at your wit's end.

194
00:13:37,210 --> 00:13:40,510
You may not have been able to solve it even, but no worries.

195
00:13:40,900 --> 00:13:45,700
It would be normal because even though it's not a very complicated code, it does require you to work

196
00:13:45,700 --> 00:13:46,340
it out.

197
00:13:46,360 --> 00:13:48,040
So let's see how I did it.

198
00:13:49,030 --> 00:13:55,420
In this exercise, we have to create a function named count prime numbers, which requires you to only

199
00:13:55,420 --> 00:13:57,310
enter numeric arguments.

200
00:13:57,700 --> 00:14:03,160
This function will show on the screen how many prime numbers there are between zero and the number we've

201
00:14:03,160 --> 00:14:05,560
passed as argument, including it.

202
00:14:05,860 --> 00:14:12,100
And then it will turn the total of prime numbers it finds take into account that on one hand I said

203
00:14:12,100 --> 00:14:18,520
show on the screen all the prime numbers it finds, and on the other hand, return the total of prime

204
00:14:18,520 --> 00:14:19,600
numbers it finds.

205
00:14:19,900 --> 00:14:26,020
These are two different things one means to show on the screen and the other means to return.

206
00:14:26,740 --> 00:14:32,200
Remember that we use the keyword return to return things and print to show on the screen.

207
00:14:32,890 --> 00:14:38,740
Please note that although zero and one are technically prime numbers, they're not considered like so

208
00:14:38,860 --> 00:14:40,180
they're exceptions.

209
00:14:40,750 --> 00:14:43,180
So let's start then in pie chart.

210
00:14:43,210 --> 00:14:49,420
We're going to create the named count prime numbers, add a number variable and then add colon.

211
00:14:50,290 --> 00:14:52,900
Now we'll create a list named Prime Numbers.

212
00:14:53,170 --> 00:14:54,790
Why do we create a list?

213
00:14:54,970 --> 00:15:00,070
Because if our function has to group all the prime numbers it finds, then it has to comprise them in

214
00:15:00,070 --> 00:15:00,670
a list.

215
00:15:01,300 --> 00:15:05,530
Oddly enough, we can start our list with number two already included.

216
00:15:05,800 --> 00:15:06,630
Why is that?

217
00:15:06,640 --> 00:15:08,980
Because two, it's a prime number.

218
00:15:08,980 --> 00:15:14,080
So if the user chooses a number lower than two, the prime number count will stop there.

219
00:15:14,590 --> 00:15:17,350
We're going to set it up soon with an if.

220
00:15:18,040 --> 00:15:25,420
Therefore, every time we make a list, we're going to have to start with to take that for granted so

221
00:15:25,420 --> 00:15:27,790
we can start checking straight from number three.

222
00:15:27,910 --> 00:15:31,090
And for that, I'll create a variable named iteration.

223
00:15:31,750 --> 00:15:36,130
Which will contain the number that will be checked from zero to the value we have to reach.

224
00:15:36,520 --> 00:15:42,340
So we'll start with three, since we already know that two is a prime number while zero and one are

225
00:15:42,340 --> 00:15:42,790
not.

226
00:15:43,560 --> 00:15:48,870
First we'll use that block code to get out of the program if the user entered a number lower than two.

227
00:15:49,050 --> 00:15:53,520
So if number is lower than two, return zero.

228
00:15:54,060 --> 00:15:56,460
Thanks to that, we know that there's no prime number.

229
00:15:56,490 --> 00:15:58,860
Thus we don't need to make things harder for it.

230
00:15:59,940 --> 00:16:07,170
But if the number is two or higher, will loop through each number from three to the one we choose and

231
00:16:07,170 --> 00:16:11,070
then check if iteration is lower or equal to number.

232
00:16:11,100 --> 00:16:14,010
And in that case it will carry out the checking.

233
00:16:15,150 --> 00:16:19,170
Of course, we'll soon make iteration increase its value.

234
00:16:19,230 --> 00:16:22,740
As a result, the loop will stop when we reach the number we chose.

235
00:16:24,140 --> 00:16:26,540
Inside this loop, we'll start another one.

236
00:16:26,540 --> 00:16:34,370
But this time it will be for a for loop that will check every RN from three the minimum to iteration,

237
00:16:34,370 --> 00:16:37,310
which is the number that we have in this case in twos.

238
00:16:38,450 --> 00:16:39,860
Why do we do this?

239
00:16:40,190 --> 00:16:47,240
Because if we know that even numbers are not prime numbers except for two, our checking can skip all

240
00:16:47,240 --> 00:16:49,730
of the even numbers since there's no need to check them.

241
00:16:50,300 --> 00:16:52,430
Thus our program will run faster.

242
00:16:52,850 --> 00:16:56,600
So we'll jump from 3 to 5 then to seven and so on.

243
00:16:57,290 --> 00:16:59,330
So here we put a colon.

244
00:16:59,870 --> 00:17:04,490
Now what is going to happen with each number between three and the number we chose?

245
00:17:05,030 --> 00:17:11,480
Let's check it if in this particular iteration calculated by the end module is equal to zero.

246
00:17:12,790 --> 00:17:17,860
This part may get a little complicated, but remember, this is the correct formula to know whether

247
00:17:17,860 --> 00:17:23,500
a number is not prime checking if it is divisible by another number.

248
00:17:23,980 --> 00:17:28,660
We go through all the previous numbers to see if one division is not equal to zero.

249
00:17:28,810 --> 00:17:34,060
Otherwise, it would mean that it is not a prime number since it is divisible by another.

250
00:17:35,470 --> 00:17:41,770
If we don't have a prime number, then we add plus equals two to the value of iteration so as to count

251
00:17:41,770 --> 00:17:43,990
by twos and type break.

252
00:17:44,020 --> 00:17:49,780
To break out of the for loop iteration and go back to while loop in order to continue with the next

253
00:17:49,780 --> 00:17:50,410
case.

254
00:17:51,110 --> 00:17:57,260
But before that inside the for loop will add an else that applies to the other case.

255
00:17:57,590 --> 00:17:58,820
Which one is that?

256
00:17:58,970 --> 00:18:02,360
The case where a number is not divisible by any number.

257
00:18:02,870 --> 00:18:08,750
If this were to happen, it would mean our number is prime, since it would be divided by all the previous

258
00:18:08,750 --> 00:18:12,680
numbers without resulting in a whole number without decimals.

259
00:18:13,890 --> 00:18:20,190
If it is a prime number, then we will add iteration to the prime numbers list so as to give substance

260
00:18:20,190 --> 00:18:23,670
to such list which started comprising whatever it found.

261
00:18:24,690 --> 00:18:25,320
For this.

262
00:18:25,320 --> 00:18:33,090
We also need to add two more numbers to iteration so that it can keep on using while loop until it finds

263
00:18:33,090 --> 00:18:35,490
all the prime numbers, not just this one.

264
00:18:36,450 --> 00:18:42,150
Now we're ready to break out of the wild loop and type the whole list of prime numbers on the screen

265
00:18:42,330 --> 00:18:45,120
with a print so that the user can see it.

266
00:18:46,220 --> 00:18:52,070
So this exercise also required a function which could return the size or length of the list.

267
00:18:52,370 --> 00:18:57,500
So we'll type, return and not print the length of the prime numbers.

268
00:18:58,450 --> 00:19:01,120
Now we have our function to test it.

269
00:19:01,150 --> 00:19:04,420
We'll print it to see all the prime numbers as well as the total.

270
00:19:05,200 --> 00:19:12,160
So we'll print it, then we'll type count prime numbers and choose number 50 and we'll see how it looks

271
00:19:12,160 --> 00:19:13,120
on the screen.

272
00:19:13,990 --> 00:19:20,320
We choose exercise four and here it showed numbers two, three, five, seven and so on.

273
00:19:20,320 --> 00:19:21,880
All prime numbers.

274
00:19:22,150 --> 00:19:25,150
See for yourself a total of 15.

275
00:19:25,990 --> 00:19:31,450
If I put another number like 150, I'd have many more prime numbers.

276
00:19:31,630 --> 00:19:33,370
We'd need to make a bigger screen.

277
00:19:33,790 --> 00:19:38,140
They'd go up to 149 and there's a total of 35 numbers.

278
00:19:38,980 --> 00:19:41,890
If I put number one, it would return zero.

279
00:19:42,370 --> 00:19:43,900
There are no prime numbers.

280
00:19:43,900 --> 00:19:45,910
There's nothing to show on the screen.

281
00:19:46,450 --> 00:19:48,340
So this is how I solved it.

282
00:19:48,520 --> 00:19:50,920
Again, it's okay if it was hard for you.

283
00:19:51,220 --> 00:19:55,480
I hope this way of solving it has helped you broaden your skill of thinking like a programmer.

284
00:19:55,960 --> 00:20:00,220
And now we'll go to the next challenge where you'll be creating your own program.

285
00:20:00,460 --> 00:20:03,670
In the next lesson, Phil will explain the activity.

286
00:20:03,910 --> 00:20:05,230
You don't want to miss it.
