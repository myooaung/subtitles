1
00:00:07,910 --> 00:00:14,090
To do web scraping with Python, we must first understand the basics of how a website works when you

2
00:00:14,090 --> 00:00:16,130
access a website from your browser.

3
00:00:16,130 --> 00:00:20,000
What you see on the screen is what's called the front end of the website.

4
00:00:20,150 --> 00:00:24,860
That is the graphical interface for the user to view and interact with the site.

5
00:00:25,190 --> 00:00:31,400
In order to do web scraping, what you really need to understand is how the front end of a website delivers

6
00:00:31,400 --> 00:00:39,830
information to your browser, and it basically does this with three elements HTML, CSS and JavaScript.

7
00:00:40,220 --> 00:00:44,600
But to do web scraping, you don't need to know these concepts in depth.

8
00:00:44,600 --> 00:00:51,410
You just need to know enough to be able to understand how your browser manages to display what it displays.

9
00:00:51,860 --> 00:00:53,120
Let's see an example.

10
00:00:53,120 --> 00:00:59,570
When a browser loads a website like a YouTube video, the user can see what is known as the front end

11
00:00:59,570 --> 00:01:00,590
of that website.

12
00:01:00,950 --> 00:01:06,980
Let's say you have a link to a YouTube video, you enter it into your browser, and then YouTube sends

13
00:01:06,980 --> 00:01:12,950
information back to your browser and your browser displays it in front so that you can see it.

14
00:01:13,280 --> 00:01:20,900
This is a human readable format, but what YouTube is returning is actually a code, a code that is

15
00:01:20,900 --> 00:01:26,810
primarily in HTML language, but also contains CSS and JavaScript components.

16
00:01:27,110 --> 00:01:33,080
And this is special code that your browser can read and understand to translate it into something that

17
00:01:33,080 --> 00:01:34,760
looks good to the human eye.

18
00:01:34,790 --> 00:01:42,050
So what we're going to be able to do with web scraping is prepare our python code to read the HTML,

19
00:01:42,050 --> 00:01:45,860
CSS and JavaScript code that YouTube is sending us.

20
00:01:45,860 --> 00:01:51,800
Maybe we can grab the YouTube logo or the video title or the number of views it has.

21
00:01:51,800 --> 00:01:57,920
So we're going to use our python code to look into this HTML code and find where that information is.

22
00:01:57,920 --> 00:02:03,320
So you can take images and information from this document and turn it into a python object.

23
00:02:03,350 --> 00:02:05,180
Do you understand everything so far?

24
00:02:05,210 --> 00:02:09,440
If you do, then we need to understand a couple of things to be able to do.

25
00:02:09,440 --> 00:02:11,390
Web scraping effectively.

26
00:02:11,390 --> 00:02:13,820
The first one is not really technical.

27
00:02:13,820 --> 00:02:16,100
It's the rules of web scraping.

28
00:02:16,100 --> 00:02:22,700
What you are going to do is extract information from someone else's website, so you should always try

29
00:02:22,700 --> 00:02:25,190
it to get permission before extracting.

30
00:02:25,490 --> 00:02:31,940
If you make too many attempts or requests, your IP address may be blocked, which means you won't even

31
00:02:31,940 --> 00:02:35,420
be able to visit that website again in a normal browser.

32
00:02:35,780 --> 00:02:41,750
Now, if it's a website that gets millions of visitors like Wikipedia or YouTube and you're only going

33
00:02:41,750 --> 00:02:47,570
to log in a couple of times to get information, then it's not really a problem because that website

34
00:02:47,570 --> 00:02:49,910
gets a lot of traffic all of the time.

35
00:02:50,240 --> 00:02:55,910
But keep in mind that some sites automatically block web scraping software, so you should always make

36
00:02:55,910 --> 00:03:01,520
sure and check the permissions or the rules or the terms and conditions of a particular website you

37
00:03:01,520 --> 00:03:03,020
are going to try to scan.

38
00:03:03,020 --> 00:03:08,420
And you should also try to check the laws of whatever country you're operating in and see if it's legal

39
00:03:08,420 --> 00:03:10,400
to extract web content.

40
00:03:10,400 --> 00:03:16,520
The second topic I want to talk about is also not really technical, and that is web scraping limitations.

41
00:03:16,910 --> 00:03:23,390
Every website is unique, which means that unfortunately every web scraping code must be unique as well.

42
00:03:23,420 --> 00:03:29,090
Therefore, you can't just take a python web scraping code and apply it to any website without looking

43
00:03:29,090 --> 00:03:34,700
at it, because the HTML code for each website will be unique to that website.

44
00:03:35,120 --> 00:03:41,090
In addition, take into account that any small change or update to a website can completely ruin your

45
00:03:41,090 --> 00:03:47,360
website web scraping code, which will already be rendered useless to those changes if you don't adjust

46
00:03:47,360 --> 00:03:47,690
it.

47
00:03:47,690 --> 00:03:53,030
This is something that's a bit annoying in web scraping, as well as the fact that if you plan to have

48
00:03:53,030 --> 00:03:59,600
a long term web scraping project, it is very likely that you will have to make adjustments over time.

49
00:03:59,900 --> 00:04:05,600
So our goal in this section of the course is to be able to learn General Python Web scraping skills

50
00:04:05,600 --> 00:04:08,840
so that you can apply them to any unique website.

51
00:04:09,050 --> 00:04:13,700
Okay, now let's talk about the main components of the front end of a website.

52
00:04:14,180 --> 00:04:17,780
These are the three main components of a website's front end.

53
00:04:17,930 --> 00:04:20,540
These are the three things your browser receives.

54
00:04:20,780 --> 00:04:24,350
But your browser is not going to show you all the source code.

55
00:04:24,350 --> 00:04:28,640
It's going to use it to show you something that is readable to human eyes.

56
00:04:29,690 --> 00:04:35,510
HTML is used to create the basic structure and content of a web page, so HTML actually contains the

57
00:04:35,510 --> 00:04:40,880
information that is displayed on the website, such as written words in a paragraph.

58
00:04:41,480 --> 00:04:47,720
CSS, which stands for Cascading Style Sheets, is used for the layout and styling of a web page.

59
00:04:47,930 --> 00:04:55,070
Then it will take whatever is in the HTML code and display it according to some kind of style like font

60
00:04:55,070 --> 00:04:58,010
size, color or positioning on the website.

61
00:04:58,310 --> 00:05:00,710
So to put it very simply, HTML.

62
00:05:00,790 --> 00:05:07,180
Now brings the information to be displayed and CSIS decide the style in which to display it.

63
00:05:07,780 --> 00:05:13,000
Finally, there is JavaScript which is used to define the interactive elements of a web page.

64
00:05:13,210 --> 00:05:17,590
However, we won't have to worry so much about JavaScript in our web scraping jobs.

65
00:05:17,830 --> 00:05:24,730
Actually, what we'll be looking to into most is the HTML and we can use the CSS to help us find it.

66
00:05:24,880 --> 00:05:27,340
And don't worry about fully understanding this.

67
00:05:27,340 --> 00:05:31,450
Now we're going to see lots of examples when we're web scraping in Python.

68
00:05:31,480 --> 00:05:34,270
Let's look at a small example of these components.

69
00:05:34,570 --> 00:05:38,410
This would be a totally elementary HTML code.

70
00:05:38,560 --> 00:05:45,180
The top line usually says something like doc type HTML, which basically tells the browser, Hello,

71
00:05:45,190 --> 00:05:50,200
this is an HTML file, and then we have a various tags or elements.

72
00:05:50,440 --> 00:05:57,580
Notice that all the tags that are open have a closing tag and this tag is always denoted with a backslash

73
00:05:57,580 --> 00:05:58,510
before its name.

74
00:05:58,510 --> 00:06:04,480
So we have this HTML tag first and then we have the head tag at the top, which means header.

75
00:06:04,810 --> 00:06:11,170
This part basically contains high level information about the web page itself, such as the title that

76
00:06:11,170 --> 00:06:12,970
will be seen in the browser tab.

77
00:06:13,270 --> 00:06:15,250
And then we have the body component.

78
00:06:15,550 --> 00:06:21,310
Body contains most of the information the website will display, such as headings which are more important

79
00:06:21,310 --> 00:06:23,860
text or paragraphs of text.

80
00:06:24,310 --> 00:06:29,530
The main aspect to understand here is that there are tags in which we can search for things.

81
00:06:29,530 --> 00:06:35,560
So if for some reason we want to get some paragraph from this document, we'll use Python to search

82
00:06:35,560 --> 00:06:39,010
through the P tags which stand for paragraph tags.

83
00:06:39,040 --> 00:06:40,810
This is the main thing you need to know.

84
00:06:40,810 --> 00:06:46,360
The fact that there is an opening tag and a closing tag for everything and that we can search for information

85
00:06:46,360 --> 00:06:47,440
between those tags.

86
00:06:47,470 --> 00:06:50,710
CSS, as we learned, stands for cascading style sheets.

87
00:06:51,010 --> 00:06:57,790
CSS Styles a website, and it also uses tags to define which HTML elements to style.

88
00:06:57,820 --> 00:07:03,280
Again, this is an extremely simple HTML file to which we have added CSS.

89
00:07:03,640 --> 00:07:09,910
The first change you'll notice is that inside the head section we've included a link to a CSS file.

90
00:07:10,180 --> 00:07:17,290
We put in this link tag that says, okay, this relationship will be a style sheet and also says this

91
00:07:17,290 --> 00:07:25,030
will be a CSS file and the h ref, which is the references for the actual file telling this HTML document

92
00:07:25,030 --> 00:07:31,450
where to find the CSS file, which has things like descriptions about font sizes, position, color,

93
00:07:31,450 --> 00:07:32,230
and so on.

94
00:07:32,830 --> 00:07:41,320
And now CSS works in a way that once it's linked to the CSS file, as many things like IDs and classes,

95
00:07:41,650 --> 00:07:44,050
there's actually more CSS elements to this.

96
00:07:44,050 --> 00:07:48,300
But we only need to know about IDs and classes for our purposes.

97
00:07:48,310 --> 00:07:51,280
See right here inside this paragraph tag that has text.

98
00:07:51,280 --> 00:07:56,830
Now inside the opening tag, I have this that says ID est one.

99
00:07:56,860 --> 00:08:01,840
EST one is a callout that I have inside the CSS document.

100
00:08:02,260 --> 00:08:10,510
That means that this paragraph tag is going to go look for the ID called EST one inside my CSS file

101
00:08:10,510 --> 00:08:13,000
in order to style the text it contains.

102
00:08:13,000 --> 00:08:15,290
What does the CSS file look like?

103
00:08:15,310 --> 00:08:16,570
Here's an example.

104
00:08:16,840 --> 00:08:23,950
Essentially, it will have this hash tag symbol with the name EST one and this thing that pretty much

105
00:08:23,950 --> 00:08:29,200
looks like a dictionary containing a property color and a value green.

106
00:08:29,230 --> 00:08:36,370
This means that anything that has est one in this tag will look a certain way when displayed on a browser.

107
00:08:36,370 --> 00:08:41,050
The hash tag symbol basically determines that this is an ID.

108
00:08:41,470 --> 00:08:45,160
Normally IDs are only used once per HTML document.

109
00:08:45,310 --> 00:08:53,470
If instead of ID we saw a call to class in the HTML document with whatever value afterwards it would

110
00:08:53,470 --> 00:09:02,050
look like this in the CSS document, it would start with a dot and the name we give to the class, unlike

111
00:09:02,050 --> 00:09:05,740
hash tag, which means ID and can be used only once.

112
00:09:05,740 --> 00:09:09,640
The DOT means class, which implies that it can be used many times.

113
00:09:09,940 --> 00:09:15,970
Therefore, classes are generally used when you want to add the same style to several elements in each

114
00:09:16,240 --> 00:09:17,240
HTML file.

115
00:09:17,260 --> 00:09:22,360
In this case, the class says the style is going to be blue and arial font.

116
00:09:22,360 --> 00:09:26,830
So a much larger CSS file might look something like this.

117
00:09:26,830 --> 00:09:32,830
It could have PE, which stands for all the paragraph elements in an HTML file, and they'll have a

118
00:09:32,830 --> 00:09:36,640
certain color, a specific font and particular font size.

119
00:09:36,880 --> 00:09:43,000
Or you can have a class with its specifications or an ID, which will affect an element within the HTML

120
00:09:43,000 --> 00:09:43,690
file.

121
00:09:44,050 --> 00:09:48,880
So I know I've been giving you a lot of information right now, but don't worry about memorizing this.

122
00:09:48,880 --> 00:09:51,550
We'll build on it step by step throughout the day.

123
00:09:51,550 --> 00:09:55,270
And you're going to see how it connects to web scraping and Python.

124
00:09:55,270 --> 00:10:00,340
The main thing I want you to take away from this lecture is that your browser receives code that contains.

125
00:10:00,620 --> 00:10:10,310
HTML complements it with hard information on the site and see us as complements that by offering a visual

126
00:10:10,310 --> 00:10:13,550
style to the information that comes in the HTML.

127
00:10:13,580 --> 00:10:19,190
I want you to remember that all this information is organized inside opening and closing tags.

128
00:10:19,190 --> 00:10:23,870
So if we want to search for information about a website through Python, we must learn how to point

129
00:10:23,870 --> 00:10:25,850
to the right tags to find it.

130
00:10:25,850 --> 00:10:31,160
And what we are going to learn next is how to do web scraping from Python and how to use the libraries

131
00:10:31,160 --> 00:10:40,370
called Beautiful Soup LLC's ML and request to do it as these are external libraries, I ask you to install

132
00:10:40,370 --> 00:10:41,740
them on your computer.

133
00:10:41,750 --> 00:10:46,940
You already know how to do it, so we have them ready before we get started with the next lecture,

134
00:10:46,940 --> 00:10:49,790
which is coming right now in total Python.

135
00:10:50,060 --> 00:10:50,990
See you inside.
