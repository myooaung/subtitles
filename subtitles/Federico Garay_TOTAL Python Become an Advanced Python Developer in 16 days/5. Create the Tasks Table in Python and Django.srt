1
00:00:08,280 --> 00:00:13,860
Well, then, given that my application is going to be a system to manage pending tasks, what are we

2
00:00:13,890 --> 00:00:19,500
going to need to have is a database that stores all the tasks created by the user.

3
00:00:20,010 --> 00:00:25,110
This database will have to contain a record for each task that is created and it must be structured,

4
00:00:25,110 --> 00:00:30,900
taking into account several columns in order to assign different attributes to the tasks such as the

5
00:00:30,900 --> 00:00:32,160
user who created it.

6
00:00:32,160 --> 00:00:40,920
It's title if it is complete or pending the creation date, etc. well then our website needs to have

7
00:00:40,920 --> 00:00:49,020
a table for the tasks and the tables must be created inside this model's P file models are basically

8
00:00:49,020 --> 00:00:55,500
for building tables in Django, and for each table you want to create, you must create a class that

9
00:00:55,500 --> 00:00:58,830
represents a table inside the models dot p file.

10
00:00:59,580 --> 00:01:06,210
Basically, each class that we are going to create inside models is going to be a table and its attributes

11
00:01:06,210 --> 00:01:08,610
would be like its columns or its fields.

12
00:01:09,510 --> 00:01:14,580
So let's create our first model or table, creating a class called Task.

13
00:01:15,660 --> 00:01:23,070
For this to be a model, we must pass it the following in its parenthesis Models dot model with a capital

14
00:01:23,070 --> 00:01:27,510
letter and now we enter the class with this clarification.

15
00:01:27,510 --> 00:01:34,170
Python will understand that this is a model and now we're going to create some attributes and then we're

16
00:01:34,170 --> 00:01:35,640
going to assign value to them.

17
00:01:36,510 --> 00:01:42,810
The first attribute is going to be user, which is going to be equal to and this is going to be left

18
00:01:42,810 --> 00:01:44,190
empty for now.

19
00:01:45,330 --> 00:01:52,170
It's also going to have a title, a description, an attribute called completed to assign a value of

20
00:01:52,170 --> 00:01:57,420
true or false so that each record contains that information about the task.

21
00:01:57,420 --> 00:02:03,840
And another attribute is going to be created to hold the date and time that the task were created.

22
00:02:05,170 --> 00:02:05,360
Okay.

23
00:02:05,500 --> 00:02:11,050
These are the fields or columns that are going to contain all the records that we load in the task table.

24
00:02:11,350 --> 00:02:15,370
So let's start defining how each of these data will be stored.

25
00:02:15,700 --> 00:02:21,280
The user field exists because we want tasks to be assigned to specific users by default.

26
00:02:21,640 --> 00:02:26,740
So we're going to need to import a module built into Django, which is used to handle users.

27
00:02:27,130 --> 00:02:32,830
Don't forget that Django is a library specialized in designing websites, so it has many tools that

28
00:02:32,830 --> 00:02:34,750
will automate many tasks.

29
00:02:34,840 --> 00:02:37,240
One of them is for managing users.

30
00:02:38,230 --> 00:02:46,720
So we're going to import it from Django, dot, contrib, dot or dot models, and we're going to import

31
00:02:46,720 --> 00:02:47,980
the user element.

32
00:02:48,460 --> 00:02:51,760
So now we can have this table provided by Django.

33
00:02:52,420 --> 00:02:54,520
Well, a user can create many tasks.

34
00:02:54,880 --> 00:02:59,860
Federico would be one of the users and there could be another user called Fill and so on.

35
00:03:00,160 --> 00:03:04,680
And each of the users is going to have the possibility of creating many tasks.

36
00:03:04,690 --> 00:03:10,120
So in database logic, this is what we could call a one to many relationship.

37
00:03:10,600 --> 00:03:16,390
This means that a single item in the list of users can have many tasks that correspond to that user.

38
00:03:16,420 --> 00:03:22,900
So here inside user, we're going to say that is going to be equal to model's dot foreign key.

39
00:03:23,410 --> 00:03:30,370
So what does foreign key mean that when different records appear in the task table with the same user,

40
00:03:30,400 --> 00:03:36,790
we will be able to associate them with each other because the field user will be considered a field

41
00:03:36,790 --> 00:03:37,420
key.

42
00:03:37,600 --> 00:03:43,690
A field in which many records can belong to the same element, in this case, to the same user.

43
00:03:44,050 --> 00:03:50,080
So if three tasks appear with the user name Federico, a table will know that they are not three different

44
00:03:50,080 --> 00:03:52,030
Federico, but the same one.

45
00:03:52,570 --> 00:03:58,960
And if at some point we ask to see the tasks of the user, Federico will be able to see a link to them

46
00:03:58,960 --> 00:04:02,950
because the field user is a field that contains the foreign key.

47
00:04:03,340 --> 00:04:09,310
So each different user will generate the new key and the repeated users will be associated to the key

48
00:04:09,310 --> 00:04:12,040
that has already been generated for that user.

49
00:04:13,270 --> 00:04:15,610
So now let's get some user parameters.

50
00:04:15,820 --> 00:04:23,140
User is going to respond to user with a capital letter, which is this library that we have just incorporated.

51
00:04:23,860 --> 00:04:26,980
So now we're going to define an attribute called on delete.

52
00:04:28,420 --> 00:04:33,370
So whatever we put as a value here is what's going to happen if the user is deleted.

53
00:04:34,300 --> 00:04:39,120
Let's say Peter created three tasks and then for some reason we delete the user.

54
00:04:39,130 --> 00:04:39,760
Peter.

55
00:04:40,000 --> 00:04:42,850
What's going to happen to the tasks that Peter created?

56
00:04:43,870 --> 00:04:50,920
Let's put here models dot cascade, which means that when a user is deleted, his tasks will also be

57
00:04:50,920 --> 00:04:51,610
deleted.

58
00:04:52,030 --> 00:04:56,740
So the next attribute that we're going to define in user is the attribute to NULL.

59
00:04:57,190 --> 00:05:01,990
If we set true, this means that the value user can be empty.

60
00:05:03,340 --> 00:05:06,610
The attribute blank is also going to be true.

61
00:05:06,940 --> 00:05:12,100
And this means that if we make a form that asks for a record, this record can be blank.

62
00:05:12,370 --> 00:05:15,160
And if we set it to false, it would not allow it.

63
00:05:15,340 --> 00:05:20,320
These are ways of configuring how the field is going to behave within this table.

64
00:05:20,950 --> 00:05:27,400
The next field is title and we're going to tell it to respond to whatever is inside model's dot char

65
00:05:27,400 --> 00:05:28,030
field.

66
00:05:28,510 --> 00:05:31,420
This also has a number of attributes that we can specify.

67
00:05:32,050 --> 00:05:37,150
The only one we're going to specify here is going to be max length, which determines the maximum number

68
00:05:37,150 --> 00:05:39,100
of characters the title can have.

69
00:05:39,340 --> 00:05:41,350
And we're going to set it to 200.

70
00:05:42,760 --> 00:05:44,650
Now let's set description.

71
00:05:45,010 --> 00:05:50,860
This is going to be a text that the user can add when creating a task to explain what the task is about.

72
00:05:51,160 --> 00:05:54,730
Well, this is going to respond to model's text field.

73
00:05:55,120 --> 00:05:58,810
It's similar to Char field, but it has some extra attributes.

74
00:05:58,990 --> 00:06:04,480
And the only thing we're going to copy here is null and blank, because this field can also be empty.

75
00:06:05,320 --> 00:06:07,540
So now let's go to complete it.

76
00:06:08,620 --> 00:06:11,080
Our task can be complete or incomplete.

77
00:06:11,650 --> 00:06:17,500
The user is going to report this through models dot boolean field, and we're going to establish that

78
00:06:17,500 --> 00:06:22,060
by default the value of each of the tasks that we create is false.

79
00:06:22,630 --> 00:06:28,210
And that is to say that at the moment of being created, our tasks will be incomplete.

80
00:06:28,690 --> 00:06:29,950
This makes sense.

81
00:06:30,340 --> 00:06:37,210
Finally created is going to answer to model's date time field because we said that this field has to

82
00:06:37,210 --> 00:06:42,040
define on what date and at what time each of the tasks has been created.

83
00:06:42,370 --> 00:06:50,020
And we're going to set auto now add to true so that by default when a task is created it will be automatically

84
00:06:50,020 --> 00:06:52,780
assigned the date and time of that moment.

85
00:06:53,350 --> 00:06:56,440
So this field will not be filled manually by the user.

86
00:06:58,690 --> 00:06:59,830
And to close this.

87
00:06:59,830 --> 00:07:03,700
In this class, we need to define an STR value.

88
00:07:04,390 --> 00:07:06,100
Let's see if you remember this.

89
00:07:06,610 --> 00:07:12,220
If at some point we want to print a task object, we're going to need to have configured what is going

90
00:07:12,220 --> 00:07:13,090
to be printed.

91
00:07:13,990 --> 00:07:15,520
That's what we're going to set now.

92
00:07:15,550 --> 00:07:18,550
A string that represents textually a task.

93
00:07:19,480 --> 00:07:24,420
So def double underscore str and double underscore.

94
00:07:24,430 --> 00:07:31,180
Again, we're going to ask for self and what this is going to give us through return is going to be

95
00:07:31,180 --> 00:07:32,740
self title.

96
00:07:34,480 --> 00:07:40,570
That is to say that if at some point we ask a task to be printed that will be printed is what is in

97
00:07:40,570 --> 00:07:41,320
the title.

98
00:07:42,280 --> 00:07:49,000
And finally, we're going to define a class matter inside our class task that establishes an ordering.

99
00:07:49,000 --> 00:07:53,470
That is to say how the tasks are going to be ordered inside our table.

100
00:07:54,930 --> 00:08:00,150
We're going to establish that the order of the tasks in our table is determined by the completed field.

101
00:08:00,540 --> 00:08:01,180
Why?

102
00:08:01,980 --> 00:08:05,970
So the tasks that are already completed can be sent to the bottom of the list.

103
00:08:06,780 --> 00:08:08,700
And now we need to do something else with this.

104
00:08:08,700 --> 00:08:13,800
Once we've already created our table, we have to do something called migration, which means that we're

105
00:08:13,800 --> 00:08:16,800
going to send this table to the database of our site.

106
00:08:17,610 --> 00:08:20,760
And there are two things we have to do to migrate our database.

107
00:08:21,300 --> 00:08:23,070
One is to create the file.

108
00:08:23,190 --> 00:08:29,550
So we're going to come to the console and we're going to call Python Manage dot P and we're going to

109
00:08:29,550 --> 00:08:32,040
call the command make migrations.

110
00:08:32,340 --> 00:08:33,450
We run it.

111
00:08:33,450 --> 00:08:39,930
And this has generated a new folder inside our application, which is this migrations folder which if

112
00:08:39,930 --> 00:08:48,090
we open it up, has a file called 0001 initial dot p y and if I open it up, I see that it contains

113
00:08:48,090 --> 00:08:55,110
all the fields from our task table which has already been migrated and so already exists inside our

114
00:08:55,110 --> 00:08:55,680
file.

115
00:08:57,090 --> 00:09:03,870
Now we're going to migrate it to our site and for that we're going to call Python, manage P and call

116
00:09:03,870 --> 00:09:04,800
migrate.

117
00:09:06,030 --> 00:09:12,660
Notice that when I hit enter one more migration is generated and remember that we did the initial migration

118
00:09:12,660 --> 00:09:14,190
when we created our project.

119
00:09:15,140 --> 00:09:20,690
If you remember at that time, it migrated a bunch of tables that Django already had preconfigured to

120
00:09:20,690 --> 00:09:21,740
use anywhere.

121
00:09:21,980 --> 00:09:28,010
Well, what just happened now is that one more table was migrated, which is the one we just created,

122
00:09:28,700 --> 00:09:32,510
which we saved in the 0001 initial file.

123
00:09:33,140 --> 00:09:39,230
And that's the one that just migrated to our site in order to see how this is reflected on our site.

124
00:09:39,290 --> 00:09:40,940
Let's run the server again.

125
00:09:41,690 --> 00:09:49,070
You know, Python managed API run server and this allows us to go to our site.

126
00:09:49,770 --> 00:09:51,600
But now we're going to go to admin.

127
00:09:51,600 --> 00:09:58,050
And here you should see that the table that we just created, but you can't see it yet because it still

128
00:09:58,050 --> 00:09:59,400
needs to be registered.

129
00:10:00,450 --> 00:10:02,070
So let's go back to pie chart.

130
00:10:02,190 --> 00:10:06,660
Let's open the file admin p y where we register our models.

131
00:10:07,110 --> 00:10:08,640
And how do we register it?

132
00:10:08,850 --> 00:10:12,990
First we import it from dot models.

133
00:10:13,320 --> 00:10:15,090
Import task.

134
00:10:15,990 --> 00:10:20,310
And here we're going to ask it to look inside admin site register.

135
00:10:20,670 --> 00:10:26,130
And then we pass it to task in brackets, which is the table we want to register.

136
00:10:27,780 --> 00:10:31,460
Once we've done that, we go back to our site, refresh it and to.

137
00:10:32,520 --> 00:10:34,740
Here's a table called tasks.

138
00:10:35,550 --> 00:10:39,960
This is not yet visible on the site, but only inside our admin page.

139
00:10:40,650 --> 00:10:44,160
So if we click here, we see that our base is empty.

140
00:10:44,580 --> 00:10:46,470
But we can add new tasks.

141
00:10:47,280 --> 00:10:48,750
So let's add one here.

142
00:10:49,520 --> 00:10:56,090
User is going to be wind ten, which is the automatic one, and this has been added thanks to importing

143
00:10:56,090 --> 00:10:56,960
it into user.

144
00:10:58,530 --> 00:11:00,510
Let's give this task a title.

145
00:11:01,050 --> 00:11:07,830
It can be mowing the lawn and let's put a description on the backyard.

146
00:11:09,420 --> 00:11:10,200
Let's put that.

147
00:11:10,200 --> 00:11:13,000
It is now complete and this has been generated.

148
00:11:13,020 --> 00:11:15,610
Notice with the way we have built our fields.

149
00:11:15,630 --> 00:11:18,210
There are different ways here.

150
00:11:18,210 --> 00:11:21,330
When we put in user, it generated this list.

151
00:11:21,510 --> 00:11:26,670
When we put title with a char field, it generated this box for 200 characters.

152
00:11:27,330 --> 00:11:31,740
And when we put in the text field, it generated this space to write the description.

153
00:11:32,610 --> 00:11:38,040
And when we put in a boolean field for the completed field, it generated this checkbox.

154
00:11:38,550 --> 00:11:44,280
Since we set the date and time to be automatically created, there is nothing here for the user to complete.

155
00:11:44,850 --> 00:11:47,910
So I'm going to save this task that I just generated.

156
00:11:48,180 --> 00:11:52,380
My first task, which is mowing the lawn, is now displayed.

157
00:11:54,210 --> 00:11:58,530
We're going to generate two more all for my wind ten user.

158
00:11:59,250 --> 00:12:01,950
The second one is going to be milking the cow.

159
00:12:02,220 --> 00:12:03,510
Here, let's clarify that.

160
00:12:03,510 --> 00:12:07,890
We have to fill two buckets and leave it incomplete and save.

161
00:12:08,910 --> 00:12:14,250
And let's create a third task also for Win ten and the title can be By Tomatoes.

162
00:12:14,430 --> 00:12:18,810
And here, make sure they are red and you can see how this works.

163
00:12:19,350 --> 00:12:22,050
So we leave it incomplete and save it.

164
00:12:23,760 --> 00:12:25,860
Here we have our three tasks.

165
00:12:26,130 --> 00:12:30,810
So this has been the way we've created a database to run backstage on our site.

166
00:12:32,070 --> 00:12:34,830
Now let's see what the next lesson has in store for us.

167
00:12:34,860 --> 00:12:36,030
I'll see you there.
