1
00:00:07,910 --> 00:00:08,750
Did you make it?

2
00:00:08,780 --> 00:00:09,440
Yeah.

3
00:00:09,620 --> 00:00:10,370
Not yet.

4
00:00:10,970 --> 00:00:11,900
Oh, that's okay.

5
00:00:11,930 --> 00:00:13,250
Did you have fun, at least?

6
00:00:13,550 --> 00:00:15,800
Well, we did a lot.

7
00:00:16,070 --> 00:00:21,380
And although the part of designing and solving the challenge for you is the part that takes the longest.

8
00:00:21,410 --> 00:00:24,230
It's also the part we should enjoy the most.

9
00:00:24,230 --> 00:00:25,790
And I hope you do, too.

10
00:00:25,820 --> 00:00:30,950
Join Federico over on Pi Charm to show you how we solved this challenge ourselves.

11
00:00:31,490 --> 00:00:34,580
So get ready because we're going to program hangman.

12
00:00:34,730 --> 00:00:39,080
First, we need to import from random a method called choice.

13
00:00:39,110 --> 00:00:43,130
This will allow us to choose a random object from a list of objects.

14
00:00:43,490 --> 00:00:45,830
So what object are we going to choose?

15
00:00:45,980 --> 00:00:46,850
A word.

16
00:00:47,030 --> 00:00:50,150
We're going to have a group of words in a list called words.

17
00:00:50,330 --> 00:00:56,240
And there we'll put words like counsellor and dinosaur and you can pick any words you like.

18
00:00:56,480 --> 00:01:01,370
I'll put heliport as well as breakfast and entrepreneur.

19
00:01:01,580 --> 00:01:02,240
Okay.

20
00:01:03,170 --> 00:01:06,500
This is a complex program that contains a lot of elements.

21
00:01:06,500 --> 00:01:10,970
So let's type everything in lowercase so as not to worry about anything else.

22
00:01:11,060 --> 00:01:16,850
We'll also create other variables that our program will need, such as one that can count all the correct

23
00:01:16,850 --> 00:01:18,410
letters the user finds.

24
00:01:18,410 --> 00:01:24,650
So correct letters is a good name for this variable, which will start with an empty list, since it

25
00:01:24,650 --> 00:01:26,690
will start without any information.

26
00:01:27,410 --> 00:01:32,960
Incorrect letters is another variable we'll need in order to count the letters the user has chosen and

27
00:01:32,960 --> 00:01:39,980
that don't appear in the word since the user will have six tries before losing will count the tries

28
00:01:40,130 --> 00:01:47,450
with a variable starting with six, and we'll also have a variable that counts the right answers in

29
00:01:47,450 --> 00:01:48,860
order to know when they win.

30
00:01:49,430 --> 00:01:55,700
Let's start with zero and then we'll be comparing this with all the letters used in the word the user

31
00:01:55,700 --> 00:01:56,690
has to guess.

32
00:01:57,960 --> 00:02:01,530
So we'll also need a variable to tell when the game is over.

33
00:02:01,650 --> 00:02:03,150
So game over.

34
00:02:03,480 --> 00:02:07,260
This will start as false since the game isn't over yet.

35
00:02:08,580 --> 00:02:11,340
We already have our crucial variables.

36
00:02:11,400 --> 00:02:15,030
Now we have to create functions that will make our game work.

37
00:02:15,330 --> 00:02:19,350
The first one will make the system choose a random word from the list.

38
00:02:19,770 --> 00:02:24,000
So our function will be called Def Choose Word.

39
00:02:24,390 --> 00:02:28,740
That's a good name and it will need first to pass a parameter to it.

40
00:02:28,950 --> 00:02:29,880
Which one?

41
00:02:30,390 --> 00:02:32,500
The list of words from which it will choose.

42
00:02:32,520 --> 00:02:39,450
So list of words is an accurate way of saying that a variable contains a list that will be necessary.

43
00:02:40,050 --> 00:02:44,850
This function will choose a word and will save it on chosen word.

44
00:02:44,880 --> 00:02:52,170
This is an internal variable of the function which will derive from applying the choice method to choose

45
00:02:52,170 --> 00:02:58,180
randomly to the list of words that we pass as a parameter by using it as a function.

46
00:02:58,200 --> 00:03:04,380
You'll be able to create a different list to pass another one to it because functions adapt to anything

47
00:03:04,380 --> 00:03:05,850
you pass as a parameter.

48
00:03:05,850 --> 00:03:12,270
So chosen word is the first variable of our function, and the other one will be different letters.

49
00:03:13,320 --> 00:03:15,450
What will different letters do?

50
00:03:15,840 --> 00:03:20,700
It will store all information about how many letters which don't repeat themselves.

51
00:03:20,700 --> 00:03:26,910
There are in our word, so we can then compare it to the users, write answers and know whether they

52
00:03:26,910 --> 00:03:34,530
want to know how many different letters are worth, has will have to store chosen word in a set, and

53
00:03:34,530 --> 00:03:39,750
this will create a set that contains a number of elements corresponding to the number of different letters

54
00:03:39,750 --> 00:03:40,680
in our word.

55
00:03:41,280 --> 00:03:47,580
And we'll lock this variable in Len to know the length of the set containing all the different letters.

56
00:03:48,720 --> 00:03:53,820
We now have a word to start our game and we know how many different letters there are.

57
00:03:54,480 --> 00:03:58,020
Once we have all of this, we can put it in return.

58
00:03:58,230 --> 00:04:05,040
And when we call the function, we'll get that information, the chosen word and the number of different

59
00:04:05,040 --> 00:04:05,730
letters.

60
00:04:06,980 --> 00:04:07,740
Okay.

61
00:04:07,760 --> 00:04:09,380
This function is ready.

62
00:04:09,500 --> 00:04:11,720
And we can call it whenever we want.

63
00:04:12,140 --> 00:04:15,770
Now, however, we'll keep on creating more functions.

64
00:04:15,770 --> 00:04:19,700
So we'll need a function that asks the user to choose a letter.

65
00:04:19,700 --> 00:04:25,070
And this function will be called as many times as necessary until the user wins or loses.

66
00:04:25,370 --> 00:04:31,730
Therefore, the function will be named ask letter and it won't need parameters since it doesn't require

67
00:04:31,730 --> 00:04:33,800
any extra data to work.

68
00:04:34,790 --> 00:04:38,600
So here we're going to create variables from which we'll get some data.

69
00:04:39,230 --> 00:04:42,560
First, what will be the letter chosen by the user?

70
00:04:42,860 --> 00:04:48,590
We'll create the variable chosen letter, which is the one the user will choose and which will start

71
00:04:48,590 --> 00:04:49,820
as an empty string.

72
00:04:50,270 --> 00:04:53,390
Then we'll need to check if the entered letter is correct.

73
00:04:53,780 --> 00:04:56,510
What if the user enters a number or word?

74
00:04:57,450 --> 00:05:04,170
We need a variable called it's valid, which will be false because what we have here isn't valid until

75
00:05:04,170 --> 00:05:05,790
the user chooses a letter.

76
00:05:06,270 --> 00:05:10,410
In addition, we'll need a place to check if the entered character is a letter.

77
00:05:10,710 --> 00:05:16,530
To do so, we can use the alphabet and we'll create it right now by entering all the letters in the

78
00:05:16,530 --> 00:05:17,220
alphabet.

79
00:05:18,430 --> 00:05:19,580
They were almost there.

80
00:05:19,600 --> 00:05:21,940
X, Y and Z.

81
00:05:22,800 --> 00:05:23,430
Done.

82
00:05:23,610 --> 00:05:29,310
This will allow us to check if the letter the user has chosen is here, thereby being valid.

83
00:05:30,150 --> 00:05:36,720
Now we'll start a loop and ask the user to enter a letter and we use a loop so that the process repeats

84
00:05:36,720 --> 00:05:39,870
itself as many times as the end of the letter is invalid.

85
00:05:40,380 --> 00:05:44,670
That is, the user won't get out of the loop until they enter a valid letter.

86
00:05:45,600 --> 00:05:48,930
So as long as the variable it's valid isn't true.

87
00:05:49,080 --> 00:05:56,670
An input asking the user please choose a letter will keep repeating itself and we have to store this

88
00:05:56,670 --> 00:06:00,780
input in the chosen letter variable that we've already created.

89
00:06:01,200 --> 00:06:03,930
Whatever the user enters will be stored here.

90
00:06:04,410 --> 00:06:10,950
Once the user enters, something will first need to know if that chosen letter is inside the alphabet.

91
00:06:11,500 --> 00:06:16,120
But we also need to check if the user has entered a single character and nothing else.

92
00:06:16,360 --> 00:06:24,760
So we add one more condition with and which will check if the length of chosen letter is equal to one.

93
00:06:25,210 --> 00:06:27,940
That is to say it has one character.

94
00:06:28,900 --> 00:06:34,480
If both conditions are met, not just one, but both, then it will be valid and true.

95
00:06:34,600 --> 00:06:37,450
Once we get this value, we'll get out of the loop.

96
00:06:37,960 --> 00:06:45,190
If this doesn't happen, we'll show a message on the screen that says you haven't chosen a correct letter

97
00:06:45,370 --> 00:06:49,870
and the loop will repeat itself again and again until the user enters a letter.

98
00:06:50,910 --> 00:06:57,870
So once a correct value is sent back in the loop stops we can return the chosen letter from the function,

99
00:06:57,870 --> 00:07:00,660
since it's confirmed that it is a valid letter.

100
00:07:01,660 --> 00:07:03,610
Then we can close the function.

101
00:07:04,810 --> 00:07:08,770
So far we have two functions ready, so let's go to the third one.

102
00:07:09,990 --> 00:07:13,790
The third function will be in charge of showing the game board on the screen.

103
00:07:13,800 --> 00:07:20,370
That is the hidden word by replacing each letter with a dash so that the user has to guess which which

104
00:07:20,370 --> 00:07:21,990
letter goes on each dash.

105
00:07:22,680 --> 00:07:23,880
That's hangman.

106
00:07:24,750 --> 00:07:27,960
So this function will be called show new board.

107
00:07:28,050 --> 00:07:33,390
And I say new board because remember that this function will show every time the user has to choose

108
00:07:33,390 --> 00:07:40,080
a letter, it will refresh and then the new board will appear with a letter or just as it was, and

109
00:07:40,080 --> 00:07:42,570
so on until the word is completed.

110
00:07:43,020 --> 00:07:45,330
So what parameter will this need?

111
00:07:45,900 --> 00:07:49,890
It will need chosen word in order to work with those data.

112
00:07:50,160 --> 00:07:56,670
So when we call this method, we'll need to pass it to the word chosen by the software with the choose

113
00:07:56,670 --> 00:07:57,570
word method.

114
00:07:57,870 --> 00:08:04,060
This way it will be able to use the necessary dashes every time this new board is reproduced.

115
00:08:04,080 --> 00:08:09,960
We need to show a string that has the revealed letters and a number of blank spaces representing the

116
00:08:09,960 --> 00:08:11,760
missing letters we need to find.

117
00:08:12,240 --> 00:08:17,760
So each time it is called, this method will rebuild the current state of the hidden word.

118
00:08:18,210 --> 00:08:25,830
So to do so, we'll use a list called Hidden List that will start empty and check letter by letter if

119
00:08:25,830 --> 00:08:28,500
it is to show a revealed letter or dash.

120
00:08:29,340 --> 00:08:37,500
So for each letter contained in the chosen word, we need to check if that letter is among the correct

121
00:08:37,500 --> 00:08:38,160
letters.

122
00:08:38,880 --> 00:08:45,510
To do this, we have this empty variable we've already created, which will store all the revealed letters

123
00:08:45,510 --> 00:08:47,160
as the game continues.

124
00:08:48,420 --> 00:08:54,060
If that letter is incorrect letters, then hidden list, which is the one we're creating now.

125
00:08:54,090 --> 00:09:00,660
We receive that particular letter, and if the letter is not incorrect letters, then else will also

126
00:09:00,660 --> 00:09:02,460
add something to hidden list.

127
00:09:02,490 --> 00:09:10,620
But what a dash which we put as a string so as to build and shown the screen our hidden list containing

128
00:09:10,620 --> 00:09:13,230
the revealed letters and the blank spaces.

129
00:09:13,410 --> 00:09:19,590
So once this loop has gone through each letter in chosen word, it has to show on the screen how Hidden

130
00:09:19,590 --> 00:09:20,910
List has ended up.

131
00:09:21,450 --> 00:09:27,300
The list should contain as many elements, letters or dashes as in chosen word.

132
00:09:28,170 --> 00:09:31,690
So now we'll print it on the screen and print.

133
00:09:31,710 --> 00:09:33,390
But what are we going to show?

134
00:09:33,660 --> 00:09:39,600
We'd like to show the word by separating its elements with some space between its letters so as not

135
00:09:39,600 --> 00:09:41,280
to leave everything heaped up.

136
00:09:41,820 --> 00:09:49,290
So let's create a blank space and apply the join method to it, which, as you may remember, is a string

137
00:09:49,290 --> 00:09:54,960
method that allows us to join all the elements comprised in Hidden List, but separated with a space.

138
00:09:56,130 --> 00:10:02,310
As a result, we have a function that doesn't actually return anything, but it prints the game progress.

139
00:10:02,670 --> 00:10:05,070
The board will be refreshed and displayed.

140
00:10:05,520 --> 00:10:08,550
So let's close all this and create a fourth function.

141
00:10:09,430 --> 00:10:09,900
Why?

142
00:10:09,900 --> 00:10:11,130
This is a lot, though.

143
00:10:12,120 --> 00:10:19,470
This might be the most fundamental or complex function because it is one we'll use to check if the letter

144
00:10:19,800 --> 00:10:22,890
the user entered matches with the hidden word.

145
00:10:23,430 --> 00:10:28,980
And every time the function checks, it will complete the list of correct and incorrect words.

146
00:10:29,460 --> 00:10:33,450
This function will also check if the user has one try or less.

147
00:10:34,020 --> 00:10:36,000
If a letter matches the hidden word.

148
00:10:36,000 --> 00:10:38,430
And if the user won or lost.

149
00:10:39,370 --> 00:10:44,170
That is to say, we have a lot to do and we're going to need several parameters.

150
00:10:45,010 --> 00:10:49,780
We'll need to know the chosen letter picked by the user in order to work with that.

151
00:10:50,660 --> 00:10:54,770
So within this function, we need to know what the hidden word is.

152
00:10:55,700 --> 00:11:02,180
We also need to know how many tries are left and how many matches there are so far.

153
00:11:03,450 --> 00:11:06,990
Remember that I'm choosing these words as parameters.

154
00:11:07,410 --> 00:11:09,010
They can be any words.

155
00:11:09,030 --> 00:11:10,680
They're internal variables.

156
00:11:10,710 --> 00:11:14,100
I use specific names in order to work inside the function.

157
00:11:14,550 --> 00:11:20,820
Then in return, when it returns something to the code, I'll use the variables that need to be properly

158
00:11:20,820 --> 00:11:23,340
completed while these things change.

159
00:11:23,780 --> 00:11:24,250
Okay.

160
00:11:25,790 --> 00:11:26,180
Okay.

161
00:11:26,180 --> 00:11:27,320
Let's refresh the game.

162
00:11:27,320 --> 00:11:29,630
Progress with a variable named end.

163
00:11:30,230 --> 00:11:33,770
As long as it's false, it means the game is not over.

164
00:11:34,130 --> 00:11:37,220
If we enter here, it's because we're still playing.

165
00:11:37,400 --> 00:11:41,990
And what happens during the game will determine whether the game ends or not.

166
00:11:42,140 --> 00:11:46,820
So we'll check if the chosen letter matches the hidden word.

167
00:11:47,180 --> 00:11:51,830
And if it does, our correct letters list will receive a new element.

168
00:11:52,100 --> 00:11:55,070
Append What will the list receive?

169
00:11:55,340 --> 00:11:57,890
Well, the chosen letter, of course.

170
00:11:57,920 --> 00:12:04,460
In addition, if we get a letter right, we also need to increase the number of matches to plus equals

171
00:12:04,460 --> 00:12:05,570
one unit.

172
00:12:05,660 --> 00:12:09,350
That is to say, its previous value plus one.

173
00:12:10,460 --> 00:12:16,820
The match is variable comes from these parameters because it's a value that we're going to pass to it

174
00:12:16,820 --> 00:12:18,480
when calling check letter.

175
00:12:18,500 --> 00:12:24,890
Then when calling, it will pass the right answers as matches to check letter, and we'll see that as

176
00:12:24,890 --> 00:12:25,910
we move forward.

177
00:12:26,550 --> 00:12:30,830
Okay, but what would happen if the user guessed wrong then?

178
00:12:30,830 --> 00:12:38,690
Else the list of incorrect letters will also receive a new element through append and it will also receive

179
00:12:38,690 --> 00:12:39,860
the chosen letter.

180
00:12:40,760 --> 00:12:47,570
In other words, that chosen letter will wind up incorrect letters or incorrect letters, depending

181
00:12:47,570 --> 00:12:49,760
whether it appears in the word or not.

182
00:12:50,840 --> 00:12:55,070
If the letter goes to incorrect letters, the user may have one try less.

183
00:12:55,370 --> 00:13:00,410
So for every iteration, Tris will be minus equals one unit.

184
00:13:01,810 --> 00:13:02,890
This is not everything.

185
00:13:02,890 --> 00:13:04,810
The function is in charge of, mind you.

186
00:13:05,410 --> 00:13:11,440
It also has to verify, after verifying if the letter is in the word, whether the user runs out of

187
00:13:11,440 --> 00:13:15,160
tries or whether their guesses are right, thereby winning the game.

188
00:13:15,370 --> 00:13:21,160
So we're going to use IFF to verify whether the number of tries has gone down to zero.

189
00:13:21,880 --> 00:13:28,120
If so, the value of end which we have up here and it's still false will change to true.

190
00:13:28,690 --> 00:13:30,850
And we won't enter it as it is.

191
00:13:30,970 --> 00:13:35,110
But we'll call the lose method, which we haven't created yet.

192
00:13:35,410 --> 00:13:42,010
That's why it's underlined and it's going to return the true value as well as carry out other tasks.

193
00:13:42,610 --> 00:13:44,410
So we'll leave it here for now.

194
00:13:44,800 --> 00:13:48,490
If the user still has tries left, we'll use Elif.

195
00:13:49,590 --> 00:13:54,120
To verify if the value of matches is equal to that of unique letters.

196
00:13:54,300 --> 00:14:00,180
Because if the user's number of correct answers coincides with the number of different letters contained

197
00:14:00,180 --> 00:14:08,640
in our system and will change to true via win a method we're going to devise in a minute when we'll

198
00:14:08,640 --> 00:14:13,530
need the hidden word, as it will show us once more how the board is at the end.

199
00:14:14,340 --> 00:14:17,520
It is still underlined, but not for long, I promise.

200
00:14:18,500 --> 00:14:23,420
So we'll end this function by returning lots of information to the code so that it can use it.

201
00:14:23,840 --> 00:14:31,250
We'll create a return that sends back how the tries are at the end, the state of end, if it is changed

202
00:14:31,250 --> 00:14:37,040
to true as a result of having won or lost the game, or if it is still false because in fact nothing

203
00:14:37,040 --> 00:14:44,210
happened yet and matches that is how they are having tested these right or wrong answers with this method.

204
00:14:45,250 --> 00:14:50,800
So I'll leave this function open so that you can see how these errors PI charm is notifying are deleted.

205
00:14:51,220 --> 00:14:54,640
Let's create the last two functions which are quite easy.

206
00:14:55,210 --> 00:15:02,740
One of them is lose, which is this one we're calling here and which is no longer underlined.

207
00:15:02,770 --> 00:15:05,290
However, it is still asking for return.

208
00:15:05,470 --> 00:15:07,000
That's why it's in yellow.

209
00:15:07,670 --> 00:15:10,610
We'll give return to it once we've completed it.

210
00:15:10,730 --> 00:15:16,220
Inside Lou's, we're going to first print a message that will tell the user you don't have any tris

211
00:15:16,220 --> 00:15:20,390
left, and below it we'll print the correct word was.

212
00:15:21,050 --> 00:15:28,880
So the hidden word was we type a space here and concatenate with word so that the user knows the word

213
00:15:28,880 --> 00:15:29,960
they couldn't guess.

214
00:15:30,890 --> 00:15:35,540
Word is also underlined since we haven't created this variable yet.

215
00:15:35,780 --> 00:15:37,220
We'll do it right now.

216
00:15:37,220 --> 00:15:42,500
When we call choose word up here, we will return a chosen word.

217
00:15:42,500 --> 00:15:45,380
Well, this is the one we're going to convert to word.

218
00:15:46,050 --> 00:15:48,990
Finally, Luiz only has to return.

219
00:15:49,890 --> 00:15:52,890
True so that the game can end later.

220
00:15:53,370 --> 00:15:56,250
Now lose is no longer underlined.

221
00:15:56,370 --> 00:16:00,870
So what follows now is to create the last function, which is win.

222
00:16:01,050 --> 00:16:07,620
So when here is no longer in the line, it asks for a hidden word which is in the parameter we have

223
00:16:07,620 --> 00:16:10,980
to pass it to as to show how the game will end.

224
00:16:11,100 --> 00:16:13,200
Hidden word can be revealed.

225
00:16:13,290 --> 00:16:14,190
Word.

226
00:16:14,580 --> 00:16:19,770
Remember that this is a variable I'm creating in which will eventually store elements.

227
00:16:20,700 --> 00:16:23,760
When will show how the board is at the end of the game.

228
00:16:24,090 --> 00:16:29,520
So we start by calling show new board, which is the function we created earlier.

229
00:16:30,060 --> 00:16:36,390
It needs for us to pass word to it, so we're going to pass whatever variable is included in Revealed

230
00:16:36,390 --> 00:16:37,050
World.

231
00:16:38,010 --> 00:16:44,550
Another task when will carry out is to print a congratulations message print congratulations.

232
00:16:44,640 --> 00:16:48,240
You've guessed the word or something like that.

233
00:16:48,510 --> 00:16:51,210
Lots of exclamation marks and everyone's happy.

234
00:16:51,720 --> 00:16:56,400
We'll also make it return the true value so that the game can end.

235
00:16:57,100 --> 00:16:58,440
So let's close this.

236
00:16:58,450 --> 00:17:01,210
And now Python's pointing out only two errors.

237
00:17:01,210 --> 00:17:02,260
Which are these?

238
00:17:02,590 --> 00:17:07,360
Now that we've finished creating functions, that comes the most dynamic part because we haven't yet

239
00:17:07,360 --> 00:17:09,460
created something to execute the game.

240
00:17:09,790 --> 00:17:13,170
So far the functions have been created, yet not called.

241
00:17:13,180 --> 00:17:16,420
So if we execute this, nothing will actually happen.

242
00:17:17,200 --> 00:17:20,290
What follows can be created quite quickly and easily.

243
00:17:20,290 --> 00:17:24,970
Since we already have all the code inside the functions, we have to join them.

244
00:17:25,850 --> 00:17:30,470
First, we need the system to choose one of the words so we call choose word.

245
00:17:30,470 --> 00:17:32,570
And remember that it asks for a list.

246
00:17:32,900 --> 00:17:35,120
And the list we have here is words.

247
00:17:36,230 --> 00:17:40,490
Of course we have to store in variables whatever choose, word returns.

248
00:17:40,910 --> 00:17:42,200
And what will that be?

249
00:17:42,560 --> 00:17:45,260
We'll open that function to find out and look.

250
00:17:45,260 --> 00:17:49,880
It returns the chosen word and the different letters that make up that word.

251
00:17:50,210 --> 00:17:54,680
So we'll store that by typing first two variable names.

252
00:17:55,700 --> 00:18:02,480
Four chosen words will type word and will store different letters in the unique letters.

253
00:18:02,660 --> 00:18:06,290
We type the equals symbol and the underline goes away.

254
00:18:07,160 --> 00:18:07,730
Okay.

255
00:18:08,060 --> 00:18:12,560
As regards the game dynamics, the system already has a word in order to start the game.

256
00:18:13,070 --> 00:18:17,570
Now we'll ask the user to choose a letter by calling the ask letter function.

257
00:18:17,870 --> 00:18:23,630
Since this step has to be repeated as many times as necessary until the player loses A wins, we'll

258
00:18:23,630 --> 00:18:26,060
have to lock this command in a while loop.

259
00:18:26,060 --> 00:18:28,580
So that repeats itself until the game ends.

260
00:18:29,240 --> 00:18:36,680
So while game over is not true, we're going to first execute print with some decoration so that the

261
00:18:36,680 --> 00:18:39,890
user tries are displayed separately on the screen.

262
00:18:40,400 --> 00:18:45,260
To do so, we can type a series of asterisks to make a line to separate the tries.

263
00:18:45,710 --> 00:18:51,440
Then we can do a line break which will concatenate with an asterisks between quotation marks, and we'll

264
00:18:51,440 --> 00:18:54,500
multiply it by 20 so that it appears several times.

265
00:18:54,800 --> 00:18:57,560
And we'll concatenate this with another line break.

266
00:18:58,700 --> 00:18:59,210
Great.

267
00:18:59,210 --> 00:19:01,160
So we have the decorative part done.

268
00:19:01,970 --> 00:19:05,780
Next, we're going to show how the board looks like so far.

269
00:19:06,560 --> 00:19:09,830
If it is the first turn, there will only be dashes.

270
00:19:10,070 --> 00:19:15,110
So we call Chau new board, which is ready and we only need to enter the word.

271
00:19:15,110 --> 00:19:16,040
And that's it.

272
00:19:16,340 --> 00:19:20,330
Then we'll print another line break so as to have everything organized.

273
00:19:21,350 --> 00:19:26,120
This is kind of a simple graphical interface, and here's where things actually get interesting.

274
00:19:26,850 --> 00:19:28,680
So what else can we enter here?

275
00:19:28,710 --> 00:19:34,500
Some data we can point out how many incorrect letters there are so far.

276
00:19:34,890 --> 00:19:36,750
At the beginning, they'll be zero.

277
00:19:36,900 --> 00:19:41,880
And we concatenate with a list of letters which is inside the incorrect letters list.

278
00:19:41,910 --> 00:19:48,000
We can also separate those letters from one another with dashes or dots so that they are not too close.

279
00:19:48,300 --> 00:19:52,590
Thanks to the joint method, which allows us to enter incorrect letters.

280
00:19:53,460 --> 00:19:55,690
This will be the first data to process.

281
00:19:55,710 --> 00:20:03,360
We can also point out how many tries there are left by typing a string literal that says tries colon

282
00:20:03,360 --> 00:20:04,080
space.

283
00:20:04,080 --> 00:20:06,570
And then we call tries and that's it.

284
00:20:07,600 --> 00:20:08,980
So what else can we do?

285
00:20:09,370 --> 00:20:14,170
We can copy another separator line here, and we can now ask the user to enter a letter.

286
00:20:14,410 --> 00:20:18,160
So we'll call a function we created to do this ask letter.

287
00:20:18,520 --> 00:20:22,300
This doesn't need parameters, so we enter it just as it is.

288
00:20:22,660 --> 00:20:28,180
And remember, however, that ask letter will send us back the letter the user has entered, so we'll

289
00:20:28,180 --> 00:20:31,120
store it in variable to use later.

290
00:20:32,200 --> 00:20:37,150
We have the hidden word which we showed with dashes, and we also have the user's letter.

291
00:20:38,120 --> 00:20:42,180
Now comes the most important part, which is the function check letter.

292
00:20:42,230 --> 00:20:44,780
So we're going to call it check letter.

293
00:20:44,810 --> 00:20:47,180
We need to pass lots of information to it.

294
00:20:47,540 --> 00:20:49,000
We need chosen letter.

295
00:20:49,010 --> 00:20:51,560
Hidden word tries and matches.

296
00:20:52,430 --> 00:20:54,740
We have letter as chosen letter.

297
00:20:54,860 --> 00:20:56,600
That's why we created it here.

298
00:20:56,990 --> 00:21:03,200
The second parameter is hidden word, and that would be word which was created here when the software

299
00:21:03,200 --> 00:21:04,280
chose its word.

300
00:21:05,030 --> 00:21:07,610
We can give it to the program so it does its job.

301
00:21:08,620 --> 00:21:14,160
Tries whether we have them, we have them up here in tries.

302
00:21:14,170 --> 00:21:15,730
There are six tries.

303
00:21:15,880 --> 00:21:21,250
So in order for the software to control the number of tries, we're going to enter tries and that's

304
00:21:21,250 --> 00:21:21,670
it.

305
00:21:22,450 --> 00:21:28,300
Finally, the last parameter is right answers, which corresponds with the users right answers.

306
00:21:28,330 --> 00:21:32,020
So tries is the information this parameter needs.

307
00:21:33,160 --> 00:21:36,360
So now our function will return lots of information.

308
00:21:36,370 --> 00:21:38,470
It will return the number of tries.

309
00:21:38,500 --> 00:21:44,470
It will tell us if the game is over and it will send back the matches how they are after being processed.

310
00:21:44,860 --> 00:21:47,200
We'll store all this in variables.

311
00:21:47,290 --> 00:21:49,450
We'll create three variables here.

312
00:21:49,540 --> 00:21:51,470
The first one will be tries.

313
00:21:51,490 --> 00:21:58,330
The second one will be over, which will control if the game's over or not and right answers.

314
00:21:59,140 --> 00:22:02,350
So this part of the game will return all this information.

315
00:22:02,350 --> 00:22:09,190
And the last part, we're almost done, believe me, which is game over, will now return the information

316
00:22:09,190 --> 00:22:13,900
it has in over so as to know whether the game has to end or not.

317
00:22:14,320 --> 00:22:17,440
So that's it, whether the loop repeats itself or not.

318
00:22:17,710 --> 00:22:20,920
Now we have finished our game and we can try it.

319
00:22:20,920 --> 00:22:21,970
So get ready.

320
00:22:22,270 --> 00:22:28,030
So we execute our file and it displays the separator line and the word the system is chosen.

321
00:22:28,660 --> 00:22:30,900
Looks like we have to guess a long word.

322
00:22:30,910 --> 00:22:33,070
It has like 12 letters.

323
00:22:34,210 --> 00:22:35,630
Incorrect letters.

324
00:22:35,650 --> 00:22:37,090
There are none yet.

325
00:22:37,390 --> 00:22:41,230
Tris, there are six left since we've just started.

326
00:22:41,590 --> 00:22:43,810
And here, there's another separator line.

327
00:22:43,840 --> 00:22:46,150
The game's asking me to choose a letter.

328
00:22:46,900 --> 00:22:47,810
I'll answer wrong.

329
00:22:47,830 --> 00:22:48,630
On purpose.

330
00:22:48,640 --> 00:22:51,640
I'll go with a number that's telling me I haven't chosen.

331
00:22:51,640 --> 00:22:52,180
Right.

332
00:22:52,780 --> 00:22:55,690
I'll choose wrong again and enter two letters instead of one.

333
00:22:55,930 --> 00:22:56,680
New error.

334
00:22:57,250 --> 00:22:58,840
Now I'll enter one letter.

335
00:22:58,840 --> 00:23:00,220
Such as s.

336
00:23:00,400 --> 00:23:00,890
All right.

337
00:23:00,910 --> 00:23:03,340
Seems like S doesn't match our secret word.

338
00:23:03,340 --> 00:23:06,100
So the system added it to incorrect letters.

339
00:23:06,830 --> 00:23:13,150
Okay, now it's telling me I have five tries left, and it's still showing me dashes without any letters.

340
00:23:14,080 --> 00:23:17,370
So let's try with a that can't go wrong.

341
00:23:17,380 --> 00:23:19,420
Well, A is also wrong.

342
00:23:19,450 --> 00:23:21,560
I have four tries left now.

343
00:23:21,580 --> 00:23:23,590
S and a R here.

344
00:23:24,680 --> 00:23:26,600
So I'll try with p.

345
00:23:26,630 --> 00:23:27,200
Good.

346
00:23:27,200 --> 00:23:28,010
P is right.

347
00:23:28,010 --> 00:23:30,830
So the software replace the corresponding dashes.

348
00:23:31,040 --> 00:23:33,590
This means it is doing its job very well.

349
00:23:34,010 --> 00:23:38,810
I have four more tries yet the incorrect letters are the same.

350
00:23:39,930 --> 00:23:41,640
So let's try with EA.

351
00:23:42,030 --> 00:23:44,670
It appears like four times.

352
00:23:44,820 --> 00:23:46,740
I think I know which word it is.

353
00:23:46,740 --> 00:23:50,490
So I complete it with n t r and you.

354
00:23:52,880 --> 00:23:55,790
After I do this, the game congratulates me.

355
00:23:56,510 --> 00:23:59,810
Now let's execute it to see what happens if we lose.

356
00:24:00,080 --> 00:24:00,880
Let's enter.

357
00:24:00,890 --> 00:24:05,900
Q Many times look, the number of tries decreases and the Q's are listed here.

358
00:24:05,930 --> 00:24:07,290
I have one try left.

359
00:24:07,310 --> 00:24:08,780
Oh, no, I've lost it.

360
00:24:08,810 --> 00:24:11,360
Now the game tells me I have no choice left.

361
00:24:11,360 --> 00:24:13,430
And it shows me what the hidden word was.

362
00:24:14,680 --> 00:24:16,210
Well, this was tough.

363
00:24:16,450 --> 00:24:18,370
I hope all these steps helped you.

364
00:24:18,400 --> 00:24:20,280
It's not easy, but don't worry.

365
00:24:20,290 --> 00:24:21,850
It's okay if you couldn't do it.

366
00:24:22,120 --> 00:24:23,490
Congratulations.

367
00:24:23,500 --> 00:24:26,290
If you haven't done it, at least you could do it with me.

368
00:24:26,620 --> 00:24:33,220
It's really important to see first hand how this works so I won't keep you any longer since we're pretty

369
00:24:33,220 --> 00:24:33,850
tired.

370
00:24:33,850 --> 00:24:37,690
So I'll let you get some rest and I'll see you in the next lectures.
