WEBVTT
1
00:00:08.000 --> 00:00:14.660
As you just learned, Python includes the path lib module to manipulate file system paths on any operating

2
00:00:14.660 --> 00:00:15.190
system.

3
00:00:15.200 --> 00:00:21.740
One of the most important classes in path lib and one that we just learned about is Path.

4
00:00:22.250 --> 00:00:29.300
When we create an instance of the PATH class in our code, we do so to represent a path to a file or

5
00:00:29.300 --> 00:00:35.720
directory in our computer's file system path can be useful if you want to create or move files on the

6
00:00:35.720 --> 00:00:37.610
file system list.

7
00:00:37.610 --> 00:00:44.930
Files that match a particular extension or pattern or create appropriate file paths for the operating

8
00:00:44.930 --> 00:00:47.540
system based on collections of strings.

9
00:00:47.540 --> 00:00:54.410
For instance, what is this path can transform any sequence of strings into a path format.

10
00:00:54.560 --> 00:01:02.900
For example, if path received the strings Europe, France, Paris and finally a file name like Eiffel

11
00:01:02.900 --> 00:01:04.280
Tower text.

12
00:01:04.910 --> 00:01:10.220
It will create a path with all those strings as folder hierarchies.

13
00:01:10.220 --> 00:01:17.720
While it is possible to use other tools to perform, many other tasks such as the OS module path allows

14
00:01:17.720 --> 00:01:24.680
you to perform these operations with a high degree of readability and a minimal amount of code path

15
00:01:24.680 --> 00:01:25.880
is worth digging into.

16
00:01:25.880 --> 00:01:29.030
So let's go to the code to learn more about this great tool.

17
00:01:29.870 --> 00:01:34.850
In order to use path, we're going to import it from path lib import path.

18
00:01:34.850 --> 00:01:41.870
And remember, path is typed in uppercase and let's remember something we dealt with in the last lecture.

19
00:01:42.050 --> 00:01:47.390
Only this time we'll do it in a simpler way so you can understand easily how to set a path using path.

20
00:01:47.750 --> 00:01:54.650
So let's create a variable named guide and store a path object which will have two words instead of

21
00:01:54.650 --> 00:01:57.620
typing paths or just type two words.

22
00:01:58.520 --> 00:02:05.540
I'll type Paris here, then Eiffel Tower, and then I'll print the guide to see how this path object

23
00:02:05.540 --> 00:02:06.410
looks like.

24
00:02:06.950 --> 00:02:09.200
This has nothing to do with any path yet.

25
00:02:09.830 --> 00:02:13.820
Let's run and run and let's choose our file.

26
00:02:13.820 --> 00:02:16.160
And here we got Paris backslash.

27
00:02:16.160 --> 00:02:17.090
Eiffel Tower.

28
00:02:18.170 --> 00:02:20.090
This is not a path, but it is.

29
00:02:20.090 --> 00:02:21.350
What path does?

30
00:02:21.710 --> 00:02:24.950
It creates objects that have the same format as paths.

31
00:02:25.490 --> 00:02:29.540
If you have folders or files named like this, they can work with that format.

32
00:02:30.740 --> 00:02:36.380
So in my case, I work with a Windows operating system and that's why I got a backward slash here.

33
00:02:36.710 --> 00:02:40.160
If I worked with Linux or Mac, I'd have a forward slash.

34
00:02:41.210 --> 00:02:47.570
So if I Eiffel Tower was a text file, I'd have an Eiffel Tower dot text file.

35
00:02:48.980 --> 00:02:55.160
What's interesting is that the path object assigned to the guide variable contains a relative path.

36
00:02:55.490 --> 00:03:02.840
This means that path slash Eiffel Tower dot text can be located in several folders in our system.

37
00:03:03.110 --> 00:03:06.560
For instance, it can be located in slash users.

38
00:03:06.560 --> 00:03:16.640
Slash users, one slash Paris slash Eiffel Tower dot text or in users slash users to slash places,

39
00:03:16.640 --> 00:03:20.360
slash Paris slash Eiffel Tower and so on.

40
00:03:21.750 --> 00:03:22.590
In this path.

41
00:03:22.590 --> 00:03:28.740
However, we haven't exactly specified which of these two possibilities we're referring to.

42
00:03:29.010 --> 00:03:34.980
On the other hand, if this was an absolute path, it would be referring to a specific location in our

43
00:03:34.980 --> 00:03:35.730
system.

44
00:03:35.820 --> 00:03:43.200
You can actually use a method named Home Inside Path to obtain the absolute path of the user's main

45
00:03:43.200 --> 00:03:44.010
directory.

46
00:03:44.490 --> 00:03:50.850
If before this guide, I had a variable named base that has a path dot home, which is the method I'm

47
00:03:50.850 --> 00:03:51.600
talking about.

48
00:03:51.600 --> 00:03:56.280
And then before guid I print base variable and I execute it.

49
00:03:56.310 --> 00:03:58.770
We'll see the two prints I've created.

50
00:03:59.250 --> 00:04:02.490
First we have base which has created the home.

51
00:04:02.490 --> 00:04:06.900
In my case it is a C colon slash users slash wind ten.

52
00:04:07.230 --> 00:04:10.380
And of course, this will be different on your computer.

53
00:04:10.770 --> 00:04:16.650
Then we have guide, which is Paris slash Eiffel Tower dot text.

54
00:04:17.190 --> 00:04:24.930
So what path dot home returns is a path instance with an absolute path to the user's main directory.

55
00:04:25.140 --> 00:04:32.550
Then if I pass base before Paris and Eiffel Tower and I print it when passing this path instance which

56
00:04:32.550 --> 00:04:35.730
is base to the strings Paris and Eiffel Tower.

57
00:04:35.850 --> 00:04:42.720
Instead, this second path constructor and absolute path to the Eiffel Tower text file will be created.

58
00:04:42.750 --> 00:04:49.290
As a result, we can tell that the first line is the main directory and the second is the main directory

59
00:04:49.290 --> 00:04:52.360
plus Paris and Eiffel Doubt Tower.

60
00:04:52.380 --> 00:04:53.070
Text.

61
00:04:53.280 --> 00:04:57.420
This illustrates a defining characteristic of the Path class.

62
00:04:57.750 --> 00:05:02.430
The PATH constructor recognizes strings as well as pre-existing objects of path.

63
00:05:02.910 --> 00:05:06.390
Let's take a closer look at how the PATH constructor does it.

64
00:05:06.690 --> 00:05:09.150
We'll do that by modifying something here.

65
00:05:09.210 --> 00:05:16.110
We'll leave Path home in base, and we'll also leave Path in guide where we'll type Europe and then

66
00:05:16.110 --> 00:05:18.960
France, like in descending order.

67
00:05:20.040 --> 00:05:26.190
In this way, we get to Paris and Eiffel Tower, but I'll put those two inside another path that comprises

68
00:05:26.190 --> 00:05:27.330
them both like this.

69
00:05:28.110 --> 00:05:31.170
So notice that we have something a bit strange here.

70
00:05:31.290 --> 00:05:33.540
We have three types of elements.

71
00:05:33.540 --> 00:05:38.310
We have base, which is a path that was created in an external variable.

72
00:05:38.880 --> 00:05:45.210
Europe and France are two strings and then another path, but this time it is an internal one which

73
00:05:45.210 --> 00:05:50.130
we have created inside this path which contains Paris and the Eiffel Tower.

74
00:05:51.490 --> 00:05:55.300
So let's delete to this base so we don't get confused when we get to the result.

75
00:05:55.810 --> 00:06:00.580
We'll just print the guide and we'll see users win ten, which is the base.

76
00:06:00.610 --> 00:06:04.120
Europe and France, which are two independent strings.

77
00:06:04.330 --> 00:06:09.400
Paris Eiffel Tower text which we've created inside the path of guide.

78
00:06:09.670 --> 00:06:14.830
All this concatenate itself properly creating a completely valid path object.

79
00:06:15.400 --> 00:06:20.830
The fact is that the PATH constructor manages both types of objects and joins them using a separator

80
00:06:20.830 --> 00:06:25.810
according to the operating system you work with, in my case, a backslash.

81
00:06:26.170 --> 00:06:31.450
So now that we've learned how to create path instances in a more detailed way and use them to access

82
00:06:31.450 --> 00:06:38.080
information about a file such as its name with name or its extension with suffix, we will be able to

83
00:06:38.080 --> 00:06:39.010
see that path.

84
00:06:39.010 --> 00:06:45.280
Instances can easily create a path object for a different folder by copying an object we already have.

85
00:06:46.200 --> 00:06:53.220
So if I have this guide already created, I can create a guide to a completely new variable in which

86
00:06:53.220 --> 00:06:57.680
I'll call guide dot which name which is a path method?

87
00:06:57.690 --> 00:07:04.380
Don't forget guide is a path and here we'll name another file Notre-Dame dot text.

88
00:07:04.830 --> 00:07:09.120
So if we now print guide and guide two will get two paths.

89
00:07:09.480 --> 00:07:11.490
Both have the same folder structure.

90
00:07:11.490 --> 00:07:17.040
But when we get to the Paris folder, we'll see the one path goes to Eiffel Tower and the other one

91
00:07:17.040 --> 00:07:18.270
goes to Notre-Dame.

92
00:07:18.480 --> 00:07:24.480
So we created a second valid path by copying the first one and changing the destination file.

93
00:07:24.750 --> 00:07:30.480
Sometimes it can be useful to access these directories in the middle since they contain a specific path.

94
00:07:31.020 --> 00:07:32.460
So we'll illustrate it.

95
00:07:32.760 --> 00:07:34.980
Our delete guide too so we don't get confused.

96
00:07:34.980 --> 00:07:39.510
And in guide I'll access parent which is a path object property.

97
00:07:40.230 --> 00:07:42.030
What does parent return?

98
00:07:42.150 --> 00:07:43.890
It returns Paris.

99
00:07:44.610 --> 00:07:50.940
The parent attribute is a path instance that returns the immediate predecessor in a determined file

100
00:07:50.940 --> 00:07:51.540
path.

101
00:07:51.840 --> 00:07:57.630
In this case, it returns the directory containing Eiffel Tower text, which is Paris.

102
00:07:57.870 --> 00:08:04.110
So we can use the parent attribute as many times as necessary to look at a specific file ancestry tree.

103
00:08:04.350 --> 00:08:10.560
If I use another parent here, I can use this many times as the path lets me and I execute it.

104
00:08:10.620 --> 00:08:16.530
Now I'm in France, which is the parent of the parent of guide, because guide goes to Eiffel Tower

105
00:08:16.530 --> 00:08:20.340
and its parent is Paris and the parent of Paris is France.

106
00:08:21.060 --> 00:08:26.190
If I use another parent, you'd easily guess that I'd return to Europe, and that's how you can select

107
00:08:26.190 --> 00:08:27.690
different parts of your path.

108
00:08:27.690 --> 00:08:33.030
The result is always similar to the previous one, so every time you use parent, you'll go one folder

109
00:08:33.030 --> 00:08:34.230
higher in your path.

110
00:08:35.160 --> 00:08:40.350
So it's also possible to use the PATH class to enumerate files inside a folder tree.

111
00:08:40.860 --> 00:08:46.080
Imagine you have a directory structure that's a similar to the one you're looking at in this example.

112
00:08:46.440 --> 00:08:49.440
I've actually created those directories to do this exercise.

113
00:08:50.070 --> 00:08:54.600
If you want, you can do the same, but remember to put them inside the home of your path.

114
00:08:54.780 --> 00:09:02.790
This is a directory basically named Europe, which contains two text files, advices and terms and two

115
00:09:02.790 --> 00:09:04.920
folders named France and Spain.

116
00:09:05.820 --> 00:09:08.970
So in France we have Paris and Marseille.

117
00:09:09.420 --> 00:09:14.340
In Paris we have two text files and in Marseilles we have another one.

118
00:09:15.300 --> 00:09:20.250
In Spain we also have the folder Barcelona, which contains one text file.

119
00:09:21.140 --> 00:09:27.680
So before going on, let's delete some things and clean this up a bit to enumerate all the text files

120
00:09:27.680 --> 00:09:30.680
in the year of directory, we can type the following.

121
00:09:31.310 --> 00:09:34.940
Let's make it so that GUID is equal to path home.

122
00:09:34.940 --> 00:09:38.900
And then we join it with Europe, which is the name of our main folder.

123
00:09:40.090 --> 00:09:43.750
Then we'll iterate over our path because it is an iterable.

124
00:09:44.860 --> 00:09:51.610
So let's create a for loop for each text inside path guide, which is our object, and let's access

125
00:09:51.610 --> 00:09:54.610
our glob method which would be like global.

126
00:09:55.390 --> 00:10:00.160
If we add quotation marks to make the string and then asterisks text.

127
00:10:00.160 --> 00:10:06.580
Now remember the asterisks means all and we'll make our loop print each text on each iteration.

128
00:10:07.940 --> 00:10:12.050
So since we're in Europe, which contains two text files.

129
00:10:12.290 --> 00:10:16.520
When we print it, it'll return the paths to advices and terms.

130
00:10:17.030 --> 00:10:23.570
Now keep in mind, since this code executes glob in the Europe directory, it returns the two text files

131
00:10:23.570 --> 00:10:25.340
contained in that directory.

132
00:10:26.390 --> 00:10:33.170
We can also use the Globe method to enumerate all the text files inside the Europe directory, including

133
00:10:33.170 --> 00:10:34.250
subdirectories.

134
00:10:34.520 --> 00:10:39.560
Now to do that, we just type the following double asterisk slash asterisk.

135
00:10:39.920 --> 00:10:45.890
This will make the loop, include all the folders and subfolders it finds until it gets to all the text

136
00:10:45.890 --> 00:10:47.570
files inside Europe.

137
00:10:48.200 --> 00:10:55.340
So look how nice we have advices in terms Fontaine for Saathi, which was inside Marseilles, Eiffel

138
00:10:55.340 --> 00:11:02.390
Tower and Notre-Dame which were inside Paris and Sagrada Familia which was inside Barcelona.

139
00:11:02.870 --> 00:11:04.130
I feel like travelling.

140
00:11:04.670 --> 00:11:08.480
So moreover, we can calculate paths that are related.

141
00:11:09.190 --> 00:11:14.020
There's the relative to method which you can use to recover a part of a long file path.

142
00:11:14.790 --> 00:11:16.440
So let's see an example.

143
00:11:16.890 --> 00:11:22.680
We'll create a guide that's equal to a path that goes from Europe through France, Paris, which we've

144
00:11:22.680 --> 00:11:24.690
already seen to the Eiffel Tower.

145
00:11:24.990 --> 00:11:29.700
Text This is the string concatenation we have at the beginning.

146
00:11:29.970 --> 00:11:35.250
So now I want to make different paths that go downwards from one of these items.

147
00:11:36.050 --> 00:11:39.200
Suppose I want to see what's inside Europe.

148
00:11:39.470 --> 00:11:45.950
So we'll create a variable named in Europe and it'll start the path guide using the relative to method

149
00:11:46.400 --> 00:11:52.280
inside relative to will type a path that starts from Europe because that's what we want to see.

150
00:11:53.060 --> 00:11:56.300
And we'll type another one as a second example, we'll try.

151
00:11:56.300 --> 00:12:04.850
In France, this will contain another path object of guide that's relative to a path that starts from

152
00:12:04.850 --> 00:12:06.590
Europe and France.

153
00:12:07.700 --> 00:12:11.210
So last but not least will print this to see it on the screen.

154
00:12:11.660 --> 00:12:14.760
First, we'll print in Europe and then in France.

155
00:12:14.780 --> 00:12:17.420
And let's see here we have two paths.

156
00:12:17.420 --> 00:12:20.000
Who starting points are the ones we chose.

157
00:12:20.150 --> 00:12:22.980
So they go downwards from France and Paris.

158
00:12:23.000 --> 00:12:25.400
This is how we can make paths that let us see.

159
00:12:25.400 --> 00:12:31.880
The contents of determined folders take into account that the relative to method returns a new path

160
00:12:31.880 --> 00:12:34.100
object, which is the one we have here.

161
00:12:34.100 --> 00:12:36.920
And it's linked to a specific argument.

162
00:12:37.520 --> 00:12:43.160
To conclude, the PATH Object is a key feature of the Python standard library, and it allows us to

163
00:12:43.160 --> 00:12:46.490
easily manipulate file paths in an operating system.

164
00:12:47.150 --> 00:12:52.520
In this lecture, you have learned how to use some necessary path tools to access file attributes,

165
00:12:52.520 --> 00:12:57.290
enumerate files with key patterns, and move through files and main directories.

166
00:12:58.130 --> 00:13:03.860
Path Lib which we saw in the last lecture as well as the path object, which we just saw, include more

167
00:13:03.860 --> 00:13:06.710
classes and tools that we can't cover in these videos.

168
00:13:07.070 --> 00:13:10.430
So as usual, I advise you to look into them on your own.

169
00:13:10.940 --> 00:13:16.280
So now that you are given a point of reference, you can use the documents about path lib to gather

170
00:13:16.280 --> 00:13:18.710
more information and acquire more knowledge.

171
00:13:19.130 --> 00:13:22.310
So thanks for being here again and see you in the next lecture.
