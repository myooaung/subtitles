WEBVTT
1
00:00:07.860 --> 00:00:09.360
The next step in programming.

2
00:00:09.360 --> 00:00:15.210
Our invoice system is to make our check buttons clickable so that we can replace number zero with anything

3
00:00:15.210 --> 00:00:17.100
we want to type inside a checkbox.

4
00:00:17.550 --> 00:00:23.100
Then when selecting a checkbox, it should get blocked and number zero should reappear.

5
00:00:23.910 --> 00:00:25.440
We'll do it right away.

6
00:00:25.800 --> 00:00:27.000
How so?

7
00:00:27.000 --> 00:00:32.370
When creating the check buttons, we have to assign one more attribute to them, which is a call through

8
00:00:32.370 --> 00:00:35.190
command to a function that hasn't been created yet.

9
00:00:35.670 --> 00:00:38.070
This function will be named review check.

10
00:00:39.210 --> 00:00:43.410
As you may have guessed, this function is intended to verify our check buttons.

11
00:00:43.620 --> 00:00:47.040
Of course it is highlighted as that function doesn't exist.

12
00:00:48.510 --> 00:00:54.630
Let's copy this call so as to include it in the create check button section of the create drink items

13
00:00:55.620 --> 00:00:58.050
and create dessert items as well.

14
00:00:58.830 --> 00:01:02.460
We should create this function right now so that these complaints stop.

15
00:01:03.030 --> 00:01:04.860
We said its name will be reviewed.

16
00:01:04.860 --> 00:01:07.620
Check and let's decide on the contents.

17
00:01:08.280 --> 00:01:09.570
So let's think it through.

18
00:01:09.600 --> 00:01:15.540
This function will be called every time a checkbox is modified, whether because it was selected or

19
00:01:15.540 --> 00:01:16.470
D selected.

20
00:01:17.310 --> 00:01:23.310
This function, when called, has to verify if a checkbox was selected or D selected in order to recognize

21
00:01:23.310 --> 00:01:25.560
if its textbox was activated.

22
00:01:26.100 --> 00:01:29.400
That is, we can type inside it or deactivated.

23
00:01:29.400 --> 00:01:32.550
That is showing number zero and a gray background.

24
00:01:33.510 --> 00:01:39.630
So we'll have to go over the food box lists and we'll need a counter for that which can be named X.

25
00:01:39.750 --> 00:01:43.350
This counter will help us count the indexes on each list.

26
00:01:44.220 --> 00:01:51.180
Okay, so let's go to our loop for each be in food box list, which would be all the text boxes next

27
00:01:51.180 --> 00:01:52.260
to the check boxes.

28
00:01:52.470 --> 00:01:58.290
This loop will iterate over each of them and check if a condition is met in food variables.

29
00:01:58.890 --> 00:02:05.490
Food variables is this very list which was empty, but then we assign the variable to it so as to know

30
00:02:05.490 --> 00:02:08.130
if the checkbox was selected or D selected.

31
00:02:08.520 --> 00:02:15.780
That's why we decided on checking if food variables in its index x get it's equal to one.

32
00:02:16.440 --> 00:02:18.780
If so, it means it was selected.

33
00:02:18.780 --> 00:02:20.370
The checkbox was ticked.

34
00:02:20.820 --> 00:02:28.260
Therefore, we want the food box state beside that checkbox in its index x to be normal so that we are

35
00:02:28.260 --> 00:02:31.050
able to start typing inside that box.

36
00:02:32.070 --> 00:02:33.600
So let's check if it worked.

37
00:02:34.350 --> 00:02:36.690
For example, let's tick chicken.

38
00:02:36.900 --> 00:02:40.860
And so that gray color has gone, but it is still at zero.

39
00:02:41.370 --> 00:02:46.920
If we do the same with salmon, nothing happens as we haven't made our counter add up a value when it

40
00:02:46.920 --> 00:02:48.330
finishes looping through.

41
00:02:49.350 --> 00:02:54.690
So let's position ourselves here and type plus equals one besides x.

42
00:02:55.410 --> 00:03:00.330
If we execute this now, we can do this with chicken, lamb, or any food.

43
00:03:00.960 --> 00:03:04.710
We can't do that with drinks and desserts as we haven't configured them yet.

44
00:03:05.040 --> 00:03:11.610
Well, we manage to activate this and type here, but it'd be best if the zero disappeared automatically.

45
00:03:11.970 --> 00:03:15.810
So food box and its index x dot delete.

46
00:03:15.990 --> 00:03:19.230
So this will now delete from zero to end.

47
00:03:20.490 --> 00:03:22.200
So let's execute this again.

48
00:03:22.200 --> 00:03:26.580
And now zero disappears automatically every time we take any food.

49
00:03:27.090 --> 00:03:27.870
All right.

50
00:03:28.110 --> 00:03:32.280
It would also be best if a blinking cursor appeared every time we tick a checkbox.

51
00:03:32.310 --> 00:03:33.240
Let's do that.

52
00:03:33.570 --> 00:03:34.620
So let's go here.

53
00:03:34.620 --> 00:03:38.250
Food box and it's location x dot focus.

54
00:03:38.430 --> 00:03:42.960
This is a method used to place a blinking cursor in a specific element or widget.

55
00:03:43.860 --> 00:03:44.910
Execute this again.

56
00:03:44.910 --> 00:03:50.520
Not only do number zero and color disappear, but a blinking cursor appears so that we can start typing

57
00:03:50.520 --> 00:03:51.210
anything.

58
00:03:51.600 --> 00:03:52.470
Perfect.

59
00:03:54.180 --> 00:03:59.250
Now we have to set up our box so that it gets deactivated when we deselect our checkbox.

60
00:03:59.250 --> 00:04:07.350
So else that is in case food variables dot get is not equal to one will make food box in its index x

61
00:04:07.350 --> 00:04:18.150
dot config go back to a disabled state and it will also make food text in its index x dot set B equal

62
00:04:18.150 --> 00:04:19.500
to a string zero.

63
00:04:19.500 --> 00:04:21.720
So it will go back to its initial state.

64
00:04:22.560 --> 00:04:24.180
So let's see if this worked.

65
00:04:24.210 --> 00:04:31.350
Select LAMB Type 56 D select lamb and it will reset its value to zero.

66
00:04:32.250 --> 00:04:34.770
So we've managed to work this out with our food.

67
00:04:35.010 --> 00:04:38.100
So let's try the same with our drinks and desserts.

68
00:04:38.460 --> 00:04:42.060
Good news is this will be easier as we have to copy and paste.

69
00:04:42.810 --> 00:04:48.600
Remember that I already entered the function call in each checkbox definition so we'd only have to copy

70
00:04:48.600 --> 00:04:51.810
all of this and paste it inside the same function.

71
00:04:52.800 --> 00:04:55.710
Let's make some space and create another one here.

72
00:04:56.610 --> 00:04:58.110
Right here in the middle.

73
00:04:58.140 --> 00:05:04.710
We should make several selections and replace food with drink and we should do the same with dessert.

74
00:05:05.520 --> 00:05:10.440
Let's select everything like this and replace food with dessert.

75
00:05:11.310 --> 00:05:14.940
So let me check the indentation as it's paramount.

76
00:05:15.690 --> 00:05:19.440
Okay, let's execute this to see if everything's on its right place.

77
00:05:20.310 --> 00:05:24.120
We see that chicken works as well as salmon and kebab.

78
00:05:24.990 --> 00:05:27.150
So let's try drinks then.

79
00:05:27.150 --> 00:05:29.730
Desserts, and they all seem to work.

80
00:05:30.360 --> 00:05:34.680
If we select brownies, it goes back to zero as well as soda.

81
00:05:35.430 --> 00:05:37.770
This means that everything is perfect.

82
00:05:38.190 --> 00:05:39.270
For our next lesson.

83
00:05:39.270 --> 00:05:43.350
We'll make calculations using the values of the products that are selected.

84
00:05:43.830 --> 00:05:44.850
I'll see you there.
