1
00:00:07,730 --> 00:00:13,160
In today's solution, Federico will show you first how to unzip the file with the instructions from

2
00:00:13,160 --> 00:00:17,420
Python, and then how we have solved the instructions we found inside.

3
00:00:17,720 --> 00:00:19,520
Let's go to it right now.

4
00:00:20,690 --> 00:00:25,850
To succeed in today's challenge, first, we're going to work with a module to decompress the file.

5
00:00:26,150 --> 00:00:27,800
That's all this module does.

6
00:00:28,070 --> 00:00:33,470
And then once we have the instructions, we can work with the module Project nine, where I will write

7
00:00:33,470 --> 00:00:36,050
the whole code to be able to deal with the instructions.

8
00:00:36,260 --> 00:00:41,570
Well, inside the folder where I'm working with Python, I have already downloaded this zip file called

9
00:00:41,570 --> 00:00:44,510
Project de nine, which I will unzip.

10
00:00:45,170 --> 00:00:48,380
You can use either shuttle or zip file.

11
00:00:48,560 --> 00:00:49,820
Both ways are valid.

12
00:00:50,150 --> 00:00:57,200
I'm going to use shuttle so I type shuttle, unpack archive and here we have to put the name of the

13
00:00:57,200 --> 00:00:57,770
file.

14
00:00:58,460 --> 00:01:02,450
This one is called Project de nine dot Zip.

15
00:01:03,020 --> 00:01:07,220
Keep in mind the capitalization of each word, otherwise it will not work.

16
00:01:07,730 --> 00:01:10,970
Then we decide on the path where we want to download this file.

17
00:01:11,270 --> 00:01:19,460
In my case, I'm going to download it in my home directory that is users and then Windows ten and then

18
00:01:19,460 --> 00:01:24,920
desktop to leave it in my desktop, you can leave it wherever you want.

19
00:01:24,920 --> 00:01:28,700
And of course this path will be different in each particular case.

20
00:01:28,910 --> 00:01:34,070
Finally, we add zip, which is the file name that I will work with to decompress.

21
00:01:34,430 --> 00:01:35,660
So let's run this.

22
00:01:35,660 --> 00:01:41,540
And it doesn't show anything on the console, of course, but if I come to my desktop, there should

23
00:01:41,540 --> 00:01:44,780
be a folder here called My Big Directory.

24
00:01:45,020 --> 00:01:50,000
This came inside the zip and also a file called Instructions.

25
00:01:50,180 --> 00:01:53,690
We open the file and read everything it asks us to do.

26
00:01:54,620 --> 00:01:57,470
First of all, you will have to look for a serial number.

27
00:01:57,860 --> 00:01:58,820
So let's do that.

28
00:01:58,820 --> 00:02:05,570
Inside Project de nine or however you want to call this module, we're going to need almost everything

29
00:02:05,570 --> 00:02:06,650
we've learned today.

30
00:02:07,130 --> 00:02:14,180
We will start with the case inputs, which are E for regular expressions and we import OS to work with

31
00:02:14,180 --> 00:02:14,870
files.

32
00:02:15,740 --> 00:02:20,720
We will import time so we can measure how long the execution of the program lasted.

33
00:02:21,290 --> 00:02:27,260
Following the instructions, we're also going to import date time, which will let us know today's date.

34
00:02:28,310 --> 00:02:33,800
And from puff lib we rescue an old friend that is path to be able to create roots.

35
00:02:34,310 --> 00:02:35,780
It will be very useful.

36
00:02:36,560 --> 00:02:40,400
And finally, we import math to round up the execution time.

37
00:02:41,480 --> 00:02:46,430
All these friends we have met today in addition to some older who are going to be incorporated into

38
00:02:46,430 --> 00:02:47,120
our code.

39
00:02:47,240 --> 00:02:49,340
So let's start with the variables.

40
00:02:49,820 --> 00:02:55,040
We first write a path variable so that we don't have to write it later in the middle of the functions.

41
00:02:55,340 --> 00:02:57,740
This is the path that should take us to the folder.

42
00:02:57,740 --> 00:02:59,240
My big directory.

43
00:02:59,600 --> 00:03:05,630
In my case I have it in my local disk, then in users, then in window ten.

44
00:03:06,020 --> 00:03:07,850
I have it in desktop as well.

45
00:03:08,330 --> 00:03:13,100
And finally it is called my big directory, all in capital letters.

46
00:03:14,270 --> 00:03:16,220
This will be the path I'm going to work with.

47
00:03:17,120 --> 00:03:21,920
I'm going to create the pattern we have to look for, which, according to the instructions, should

48
00:03:21,920 --> 00:03:27,140
first have a letter N, then it should have three characters that are not numbers.

49
00:03:27,680 --> 00:03:34,940
Thus we have to add a backslash and the letter D capitalized to indicate that it is a non numeric character.

50
00:03:35,360 --> 00:03:41,810
This will give us letters and we're going to quantify these non numeric characters in three.

51
00:03:43,100 --> 00:03:48,470
After that, a hyphen is required and then we will have to type in five numeric characters.

52
00:03:48,830 --> 00:03:54,470
Now the D is going to be lowercase and we can't quantized it to five.

53
00:03:55,430 --> 00:03:57,500
This is the pattern we need to check.

54
00:03:57,800 --> 00:04:00,800
Still, we have to generate another variable called today.

55
00:04:01,460 --> 00:04:04,360
This would be a date time date.

56
00:04:04,370 --> 00:04:06,050
And here we have today.

57
00:04:07,190 --> 00:04:12,620
Whatever day you are doing this exercise, when the program is executed, this variable will tell you

58
00:04:12,620 --> 00:04:14,630
what day is, the day you're on.

59
00:04:15,350 --> 00:04:20,960
So let's create two variables more which are the lists, which will store the serial numbers that we

60
00:04:20,960 --> 00:04:24,450
find and the files that contain those numbers.

61
00:04:24,470 --> 00:04:33,530
So the first list, one is going to be called numbers found equal to an empty list, and the second

62
00:04:33,530 --> 00:04:35,480
is called files found.

63
00:04:36,050 --> 00:04:39,620
These are also going to be an empty list for now.

64
00:04:40,130 --> 00:04:42,740
And now we can start creating our functions.

65
00:04:43,310 --> 00:04:48,020
The first function will be in charge of finding these serial numbers in a given file.

66
00:04:48,050 --> 00:04:54,980
So it's going to be called find number to which a file should be passed, where the search will be carried

67
00:04:54,980 --> 00:04:55,580
out.

68
00:04:56,060 --> 00:05:01,520
Besides, a pattern will be needed for the function to know what pattern to look for.

69
00:05:01,850 --> 00:05:07,640
As this function has to open the file, we have to create a variable that can be called this file,

70
00:05:07,730 --> 00:05:09,230
which is equal to open.

71
00:05:10,070 --> 00:05:11,630
And what are we going to open?

72
00:05:12,260 --> 00:05:18,650
The file that we passed to it in the parameters of the function, and we'll open it with our mode so

73
00:05:18,650 --> 00:05:20,150
that it is read only.

74
00:05:20,900 --> 00:05:24,980
Then we need another variable which contains what is in the text.

75
00:05:25,220 --> 00:05:32,420
Thus you can call it text equal to this file dot read, which is the read method.

76
00:05:33,770 --> 00:05:40,310
And once we have the contents of this file inside text, we check if the regular expression search of

77
00:05:40,310 --> 00:05:44,360
the pattern that we pass searched in the text we just extracted.

78
00:05:45,320 --> 00:05:49,700
What do we concentrate on if it is true?

79
00:05:50,330 --> 00:05:55,220
If so, that is if the pattern appears in a text will receive that pattern.

80
00:05:55,700 --> 00:05:57,080
We will copy this.

81
00:05:57,080 --> 00:06:00,080
And so we will receive whatever it is found.

82
00:06:00,950 --> 00:06:04,190
And if not, we are going to ask for an empty string.

83
00:06:05,390 --> 00:06:06,680
And why do we do this?

84
00:06:06,950 --> 00:06:12,290
Because otherwise this will return a non object and our list will be filled with non objects.

85
00:06:12,500 --> 00:06:17,420
This is an easier way to clean up our list and this was the first function we need.

86
00:06:18,200 --> 00:06:23,210
The second one, which is complementary to this one, is in charge of creating the lists with the serial

87
00:06:23,210 --> 00:06:29,330
numbers it finds and with the names of the files containing those serial numbers so we can name this

88
00:06:29,330 --> 00:06:33,470
function create lists, which does not need parameters.

89
00:06:34,220 --> 00:06:40,820
What it does need is a for loop that goes through all the folders, subfolders and files through the

90
00:06:40,820 --> 00:06:46,910
walk method, which allows us to traverse all the folders in my great directory.

91
00:06:47,660 --> 00:06:53,120
Then I'm going to go through all the folders, the subfolders and the function will check the files

92
00:06:54,560 --> 00:06:59,750
it finds in OS walk and here we pass the path in brackets.

93
00:07:00,020 --> 00:07:04,730
That's why we put it in a variable so that we don't have to write everything here and now.

94
00:07:06,170 --> 00:07:13,580
What this loop is going to do for every file founded Colon is to store in a variable called result whatever

95
00:07:13,580 --> 00:07:16,250
the find number function returns.

96
00:07:17,750 --> 00:07:19,900
Now we call the function find number.

97
00:07:19,910 --> 00:07:25,550
Just as we learned recently, we can call a function inside another one and store whatever is returned

98
00:07:25,550 --> 00:07:28,190
in a variable in this case result.

99
00:07:29,240 --> 00:07:32,690
Well, fine number asks for a file and the pattern.

100
00:07:33,290 --> 00:07:38,660
What we will pass to it is a path composed by folder and by a.

101
00:07:39,230 --> 00:07:42,890
This means that this path will be composed of the folder address.

102
00:07:42,920 --> 00:07:47,720
Remember that folder stores a path and the name of the file in each case.

103
00:07:48,980 --> 00:07:52,100
Here we have the file where for it to look for that number.

104
00:07:52,100 --> 00:07:58,370
And we are still missing the pattern, which will be my pattern and the one I've created up here, which

105
00:07:58,370 --> 00:08:01,130
will look for the serial number just like we want.

106
00:08:02,060 --> 00:08:06,110
The results of this search for each file will be stored in the result.

107
00:08:06,530 --> 00:08:09,800
Remember that this result or an empty string will be stored.

108
00:08:10,970 --> 00:08:13,730
Once we receive that result, we will check if.

109
00:08:13,930 --> 00:08:17,320
The result is different to an empty string.

110
00:08:18,130 --> 00:08:22,000
So that's how we can clean up the results that we're not interested in.

111
00:08:22,960 --> 00:08:25,810
Then only if that result is other than empty.

112
00:08:25,810 --> 00:08:27,830
I mean, it contains a serial number.

113
00:08:27,850 --> 00:08:35,440
We can call the list of numbers found append in order to add the result, but it won't store the result

114
00:08:35,440 --> 00:08:36,460
just as it appears.

115
00:08:36,460 --> 00:08:42,640
Because remember that that construction, which contains a lot of data, has from where to where the

116
00:08:42,640 --> 00:08:46,720
result goes and it tells us what is an object.

117
00:08:47,740 --> 00:08:51,610
No, we just want it to give us the group found in that result.

118
00:08:52,450 --> 00:08:58,930
We also add the add the name of the file containing this result so that to create the other list we

119
00:08:58,930 --> 00:09:06,310
call the list that we defined at the beginning files found and we add to it with point append and then

120
00:09:06,310 --> 00:09:09,430
we add here is of the file, the title.

121
00:09:10,210 --> 00:09:12,280
In doing so, we have achieved that.

122
00:09:12,280 --> 00:09:19,480
When the execution of this function finishes, we have to complete lists, numbers found and files found.

123
00:09:19,900 --> 00:09:22,270
With all the findings this function has done.

124
00:09:23,500 --> 00:09:28,330
Finally, we need one more to show the results on the screen and organize the contents of these lists

125
00:09:28,330 --> 00:09:29,470
within our tables.

126
00:09:30,160 --> 00:09:35,110
We're going to format this with the function show, all which does not need parameters.

127
00:09:36,580 --> 00:09:38,920
Create an index starting at zero.

128
00:09:39,040 --> 00:09:44,380
A variable that will be a counter to go through our lists, indexes and print their contents.

129
00:09:44,470 --> 00:09:45,760
Start printing.

130
00:09:45,910 --> 00:09:52,810
And first we print a dashed line to create a kind of separator which you should repeat about 50 times.

131
00:09:53,710 --> 00:09:59,320
Print out the date of this search and we can create a string literal that reads Date of search.

132
00:09:59,470 --> 00:10:00,250
A colon.

133
00:10:00,250 --> 00:10:00,940
A space.

134
00:10:02,580 --> 00:10:04,640
What comes next is a construction.

135
00:10:04,710 --> 00:10:06,690
Observe this for now.

136
00:10:06,690 --> 00:10:09,300
I just put today inside a call.

137
00:10:10,020 --> 00:10:13,560
We can call the show all function to see the whole process.

138
00:10:14,040 --> 00:10:16,500
Run and run Project nine.

139
00:10:17,790 --> 00:10:23,850
Here we have the 50 dashes, then date of search and it shows us the date time format, which is year,

140
00:10:23,850 --> 00:10:25,020
month and day.

141
00:10:25,170 --> 00:10:28,080
But I prefer month slash day slash year.

142
00:10:28,890 --> 00:10:29,850
How do we do that?

143
00:10:30,330 --> 00:10:36,750
We call today month and we add a slash and then another call to today day.

144
00:10:37,260 --> 00:10:40,620
We put one more slash and finally we call today year.

145
00:10:41,160 --> 00:10:43,490
And now this will display the way I want.

146
00:10:44,070 --> 00:10:47,730
Date of search and today's date in the format I chose.

147
00:10:49,170 --> 00:10:50,160
So let's move on.

148
00:10:50,910 --> 00:10:57,480
We need a line break here to separate things slash RN and we can print the headers of our table.

149
00:10:58,170 --> 00:11:01,980
We type in print and here we write in capital letters file.

150
00:11:02,790 --> 00:11:07,020
So we're going to make some tabulations so that each title is separated from each other.

151
00:11:07,500 --> 00:11:10,200
I can confirm that these three tabs will be enough.

152
00:11:10,650 --> 00:11:13,710
You can try on your own to find out how many you need.

153
00:11:14,310 --> 00:11:16,440
And now we write serial number.

154
00:11:17,430 --> 00:11:22,260
Down here, we have to print some separators, just as you saw in the example on the instructions.

155
00:11:23,010 --> 00:11:25,710
The separators will have as many dashes as letters.

156
00:11:26,280 --> 00:11:27,960
We also have three tabs here.

157
00:11:29,170 --> 00:11:32,620
And then we add dashes until we complete the length of serial number.

158
00:11:33,760 --> 00:11:35,530
So this is the end of the header.

159
00:11:35,950 --> 00:11:39,670
If we print it out, we already see file and the serial number.

160
00:11:40,450 --> 00:11:43,810
What follows is to show the list of the results that we have found.

161
00:11:44,080 --> 00:11:45,580
So how do we print them?

162
00:11:46,090 --> 00:11:50,760
Well, make a four loop that iterates each of the elements in the list file's found.

163
00:11:51,550 --> 00:11:54,880
We can say that for each a in file's found colon.

164
00:11:55,840 --> 00:12:02,770
And what we do now is to print a line containing inside a string literal the contents of a which is

165
00:12:02,770 --> 00:12:04,510
the title of the file.

166
00:12:04,840 --> 00:12:12,550
And here we tabulate to jump to the next column, which is the serial number column, where we do a

167
00:12:12,550 --> 00:12:18,580
call to what the numbers found, which is the list containing all the numbers.

168
00:12:19,780 --> 00:12:25,270
But here, since we are not using the numbers found as indicator for the iteration, we will have to

169
00:12:25,270 --> 00:12:27,700
put the index we are in at the moment.

170
00:12:28,660 --> 00:12:30,600
So we've completed the line we need.

171
00:12:30,610 --> 00:12:35,410
But before we exit the loop, we have to make the index add a value.

172
00:12:35,560 --> 00:12:38,890
So the next loop shows index one and so on.

173
00:12:39,850 --> 00:12:45,190
So if I print this, we won't see anything on the screen because neither create lists nor find numbers

174
00:12:45,190 --> 00:12:46,580
have been executed yet.

175
00:12:46,600 --> 00:12:48,910
So far, our format is empty.

176
00:12:49,390 --> 00:12:56,770
It doesn't show anything, but we will close this by making a line break once all the records are displayed.

177
00:12:57,340 --> 00:13:02,410
And then, according to the instructions, we should show all the numbers we have found and the time

178
00:13:02,410 --> 00:13:03,010
it took.

179
00:13:03,910 --> 00:13:09,640
We then print all the numbers found with a string literal that says numbers found colon.

180
00:13:10,990 --> 00:13:14,500
And where do we get the value to know how many numbers were found?

181
00:13:15,370 --> 00:13:20,320
It can be either numbers found or files found, as we should do with this.

182
00:13:20,320 --> 00:13:24,300
With numbers found, we call the length of numbers found.

183
00:13:24,310 --> 00:13:27,610
And this will give us, as a result, the number of findings we had.

184
00:13:28,850 --> 00:13:30,920
Since we couldn't execute our functions yet.

185
00:13:30,920 --> 00:13:33,140
It's going to tell us zero for now.

186
00:13:34,270 --> 00:13:37,890
Then we have to give a count of how long this work took.

187
00:13:38,610 --> 00:13:44,670
To do so, we make at the top before our whole program starts running a variable called START, which

188
00:13:44,670 --> 00:13:51,570
is going to contain the timestamp of time, dot time so that we can evaluate later, closing the time

189
00:13:51,780 --> 00:13:53,400
how long the work took us.

190
00:13:54,540 --> 00:13:56,430
We go all the way back down here.

191
00:13:57,260 --> 00:13:58,550
And before we report.

192
00:13:59,360 --> 00:13:59,440
Here.

193
00:13:59,530 --> 00:14:01,510
We have to cut the timestamp.

194
00:14:02,400 --> 00:14:06,720
So let's create the variable end, which should be equal to time, time.

195
00:14:07,350 --> 00:14:13,950
And then we have to calculate this with a variable that can be called duration, which is equal to end

196
00:14:13,950 --> 00:14:15,210
minus start.

197
00:14:15,720 --> 00:14:20,490
And this is what will give us the result, the time of how long our program lasted.

198
00:14:21,740 --> 00:14:30,290
Print it as a string literal that says duration of the search colon space and here we call duration.

199
00:14:31,720 --> 00:14:33,730
I want you to pay attention to one thing.

200
00:14:34,000 --> 00:14:41,590
If I execute duration just as it is, it's going to tell us that the duration of the search is 0.04.

201
00:14:41,590 --> 00:14:46,810
Now, this duration is quite short because we haven't executed the most time consuming functions yet.

202
00:14:47,650 --> 00:14:55,210
But here I want you to focus on, as in the instructions rounding up in order to round duration up,

203
00:14:55,810 --> 00:15:02,890
I have to put it in parentheses to be the argument of the call to math dot seal, which stands for rounding

204
00:15:02,890 --> 00:15:03,280
up.

205
00:15:04,510 --> 00:15:08,920
Even so, we still have zero because it doesn't have any value yet.

206
00:15:09,460 --> 00:15:14,080
But now when we do absolutely everything we will get a different number.

207
00:15:15,100 --> 00:15:20,740
We could add the word seconds here for the sentence to make more sense and we can finish with another

208
00:15:20,740 --> 00:15:21,550
dashed line.

209
00:15:22,270 --> 00:15:23,800
So let's see how this looks.

210
00:15:24,490 --> 00:15:25,210
That's great.

211
00:15:26,640 --> 00:15:30,690
Now we just need to call in order the functions that should be executed.

212
00:15:31,320 --> 00:15:37,050
First we call create lists, which will store the two lists, allowing us to use them in show all,

213
00:15:37,050 --> 00:15:39,180
which is the function that runs our program.

214
00:15:39,900 --> 00:15:41,520
Has it worked as we expected?

215
00:15:42,030 --> 00:15:45,450
Here we have date of search today's date.

216
00:15:45,690 --> 00:15:49,380
Then we have files with the serial numbers we have found in that file.

217
00:15:49,710 --> 00:15:53,340
And we can also see the amount 11 files.

218
00:15:53,820 --> 00:15:54,360
See that?

219
00:15:54,360 --> 00:15:58,030
Now, it did round up and told us that the search took one second.

220
00:15:58,050 --> 00:15:59,010
We did it.

221
00:15:59,730 --> 00:16:04,650
I also like this project because it really implies using almost everything we've learned today.

222
00:16:04,830 --> 00:16:10,080
You've been able to put a lot of things into practice, so we're almost done with another day.

223
00:16:10,500 --> 00:16:12,030
I really productive one.

224
00:16:12,060 --> 00:16:17,370
It's time to have a break and relax to to think about today's achievements.

225
00:16:17,700 --> 00:16:19,080
Congratulations.
