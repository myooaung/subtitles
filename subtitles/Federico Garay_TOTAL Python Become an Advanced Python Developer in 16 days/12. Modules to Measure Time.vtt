WEBVTT
1
00:00:07.710 --> 00:00:13.590
By now, you may have noticed there are many different ways to address the same need when working with

2
00:00:13.590 --> 00:00:14.500
Python code.

3
00:00:14.520 --> 00:00:19.890
For instance, despite being different, these two blocks of codes return the same result.

4
00:00:20.220 --> 00:00:26.070
Now imagine that you want to identify which of them is the one that solves the problem more efficiently

5
00:00:26.430 --> 00:00:27.570
in less time.

6
00:00:28.110 --> 00:00:34.290
The best way to do this is to measure the time that elapses from the beginning to the end of the execution.

7
00:00:34.620 --> 00:00:37.870
For this, we have two modules that can be very useful.

8
00:00:37.890 --> 00:00:43.920
One is time, which serves to establish timestamps in the code that allow us to make comparisons.

9
00:00:44.130 --> 00:00:50.850
The other is time it, which is much more specific, since its main function is to evaluate how long

10
00:00:50.850 --> 00:00:53.070
it takes to execute a given code.

11
00:00:53.100 --> 00:00:58.530
Let's know the differences between both of them, and we will see that not only do they measure the

12
00:00:58.530 --> 00:01:05.280
effectiveness of your code, but they also measure the duration of execution of any block of code.

13
00:01:05.310 --> 00:01:11.070
So let's not waste any more time and let's see them in action in pie term right now.

14
00:01:11.790 --> 00:01:16.320
So now we'll test two functions which will do the same, but in different ways.

15
00:01:16.950 --> 00:01:22.890
The first function is for test and it will allow us to create a list of numbers from one to some number

16
00:01:22.890 --> 00:01:24.330
specified by the user.

17
00:01:25.110 --> 00:01:28.860
This function will do so with a four loop that returns the whole list.

18
00:01:29.430 --> 00:01:35.730
The second function is wild test, which will do exactly the same, but using a wild loop in order to

19
00:01:35.730 --> 00:01:38.730
test both functions and see what they return.

20
00:01:38.850 --> 00:01:43.860
We use print so as to see the first function first, which is for test.

21
00:01:44.160 --> 00:01:45.930
So we'll pass 15 to it.

22
00:01:46.830 --> 00:01:50.850
Then we'll print wild tests and pass the same number to it.

23
00:01:50.850 --> 00:01:51.630
15.

24
00:01:52.770 --> 00:01:59.040
So let's execute this module named Measure Time, which will show us two lists from 1 to 15.

25
00:01:59.400 --> 00:02:00.690
They're exactly the same.

26
00:02:02.050 --> 00:02:05.050
So how can we tell which function did it more efficiently?

27
00:02:05.260 --> 00:02:08.290
Both of them worked properly and achieved their goal.

28
00:02:08.680 --> 00:02:14.050
However, we aim to carry out these tasks, wasting as few resources in as little time as possible.

29
00:02:14.350 --> 00:02:18.610
One way to do that is working with Python built in module named time.

30
00:02:19.690 --> 00:02:26.140
Time allows us to get timestamps and store them in variables which we can compare so as to see which

31
00:02:26.140 --> 00:02:27.340
of them works faster.

32
00:02:27.580 --> 00:02:33.610
So before calling for test, which we don't need to print, since we only want to know how much time

33
00:02:33.610 --> 00:02:41.380
it takes to execute, we'll create a timestamp named beginning which will be equal to time, time and

34
00:02:41.380 --> 00:02:42.070
brackets.

35
00:02:43.340 --> 00:02:48.950
Then we'll create another time stamp named ending, which will be equal to time time.

36
00:02:48.950 --> 00:02:49.850
And that's it.

37
00:02:50.150 --> 00:02:54.860
We have two timestamps, one before and another after our function.

38
00:02:55.610 --> 00:03:00.740
As a result, we'll be able to calculate the time it took to execute this section.

39
00:03:00.830 --> 00:03:08.630
We'll print this to see the difference between ending minus beginning, which will give us a real time

40
00:03:08.630 --> 00:03:09.500
as a result.

41
00:03:09.860 --> 00:03:12.050
So let's do the same with the second function.

42
00:03:12.350 --> 00:03:15.620
And remember, we don't need to print it but execute it.

43
00:03:15.740 --> 00:03:19.070
So let's add the same time stamps and the printing.

44
00:03:20.330 --> 00:03:23.660
If we execute it, we see that it's such a short time.

45
00:03:23.660 --> 00:03:26.540
That time wasn't accurate enough when calculating it.

46
00:03:26.990 --> 00:03:31.040
Therefore, we'll add a longer list to both functions.

47
00:03:31.640 --> 00:03:33.320
A list of 1 million.

48
00:03:34.940 --> 00:03:38.060
This will take longer to calculate, so it's perfect.

49
00:03:39.230 --> 00:03:48.230
So the first function spent 0.266 2 seconds and the second one spent 0.34 2 seconds.

50
00:03:48.440 --> 00:03:54.610
Keeping this in mind, we can say that wild test was slower than four test, meaning that the format

51
00:03:54.620 --> 00:03:55.820
is less efficient.

52
00:03:56.240 --> 00:04:01.280
If I print them again, I'll always get different results because they depend on other several factors,

53
00:04:01.280 --> 00:04:03.200
such as your PC performance.

54
00:04:03.500 --> 00:04:07.520
So this module only works in functions which take a long time to execute.

55
00:04:07.910 --> 00:04:11.630
So it it'll be more difficult to measure the time in basic functions.

56
00:04:12.290 --> 00:04:18.260
For example, if we had to measure a function containing ten here, it wouldn't work and would return

57
00:04:18.260 --> 00:04:18.950
zero.

58
00:04:19.520 --> 00:04:25.940
This means we need another tool because time is not accurate enough when measuring the execution time

59
00:04:25.940 --> 00:04:27.230
of brief sections.

60
00:04:27.620 --> 00:04:32.370
Taking this into consideration, we'll import and use another module named Time.

61
00:04:32.390 --> 00:04:32.810
It.

62
00:04:34.060 --> 00:04:37.180
Notice that time returns an error, so let's delete it.

63
00:04:37.930 --> 00:04:44.620
Time It is perfectly useful in this case because it can measure the execution time of any section.

64
00:04:44.770 --> 00:04:51.490
So if I create an element time it, time it, I'm required to pass a statement set up.

65
00:04:51.520 --> 00:04:55.240
We'll see what this means and a number which is an int.

66
00:04:55.360 --> 00:05:00.970
This will make basic functions repeat themselves many times, resulting in a number which will be able

67
00:05:00.970 --> 00:05:01.600
to measure.

68
00:05:02.000 --> 00:05:04.540
Okay, let's delete this so as to begin again.

69
00:05:04.870 --> 00:05:11.110
And instead of creating our functions like this, we'll create them in parts inside statement and settle

70
00:05:11.830 --> 00:05:14.320
the code associated to that statement.

71
00:05:14.350 --> 00:05:17.920
Don't worry, if you don't get this, the example will be clearer.

72
00:05:18.430 --> 00:05:23.680
We'll create a variable named declaration which will be equal to the function call.

73
00:05:24.310 --> 00:05:28.150
In this case, it will be equal to the first function which is for test.

74
00:05:28.150 --> 00:05:31.030
And we'll pass number ten, which is low.

75
00:05:32.550 --> 00:05:33.840
First part is done.

76
00:05:34.350 --> 00:05:36.210
So let's create set up now.

77
00:05:36.240 --> 00:05:43.020
We'll name it my set up and it will also have this multi-line string where we'll add the contents of

78
00:05:43.020 --> 00:05:44.790
the function to the executed.

79
00:05:46.350 --> 00:05:50.220
We paste that here and we no longer need this.

80
00:05:51.610 --> 00:05:59.020
We have two variables in which we're going to use time it the time it what time it will enter declaration.

81
00:05:59.110 --> 00:06:06.490
Then my setup and number, which is the number of times this function will repeat itself in order to

82
00:06:06.490 --> 00:06:08.110
return a reasonable number.

83
00:06:08.230 --> 00:06:10.840
So we'll repeat this 100,000 times.

84
00:06:11.500 --> 00:06:12.310
That's good.

85
00:06:12.820 --> 00:06:17.080
So time it will repeat this section 100,000 times.

86
00:06:17.740 --> 00:06:22.600
As a result, the length will be higher than 0.0 and we'll be able to analyze it.

87
00:06:23.080 --> 00:06:28.360
So we'll store this in length so as to print it and see it on the screen.

88
00:06:29.480 --> 00:06:31.010
So let's execute it.

89
00:06:31.370 --> 00:06:38.780
And the software tells us that it took 0.20 1 seconds to execute for test 100,000 times.

90
00:06:40.160 --> 00:06:41.970
We'll do the same with wild test.

91
00:06:41.990 --> 00:06:50.780
We'll create declaration too, which will be equal to the Wild Test call and it will have the same value

92
00:06:50.780 --> 00:06:52.280
in brackets ten.

93
00:06:53.150 --> 00:06:59.120
And we'll create my setup too, which would include a multi-line string with the contents of wild test

94
00:06:59.120 --> 00:06:59.810
function.

95
00:07:00.200 --> 00:07:02.180
We'll copy and paste it here.

96
00:07:03.480 --> 00:07:10.260
Finally, we'll create a variable named length two, which will be equal to time it time it which contains

97
00:07:10.480 --> 00:07:18.150
declaration to my set up two and number 100,000 repetitions as well.

98
00:07:19.050 --> 00:07:19.710
Ready?

99
00:07:19.920 --> 00:07:22.410
Now let's print length to.

100
00:07:24.050 --> 00:07:26.180
Now we're able to compare results.

101
00:07:26.330 --> 00:07:32.390
We can see that the former took 0.2 5 seconds and the latter took 0.2 7 seconds.

102
00:07:33.230 --> 00:07:36.830
This is more readable now, but the numbers are quite similar.

103
00:07:37.430 --> 00:07:41.840
So how can we get a more notable difference so as to make a better decision?

104
00:07:42.020 --> 00:07:44.870
Well, we can increase the number of repetitions.

105
00:07:44.960 --> 00:07:48.830
Notice that I've entered 1 million repetitions in each function.

106
00:07:49.190 --> 00:07:50.990
This process will be longer.

107
00:07:51.560 --> 00:07:55.670
As you can see, I've executed it, but the results take some time to appear.

108
00:07:56.330 --> 00:08:02.030
The first one took 2.2 6 seconds and the second one took 2.40 6 seconds.

109
00:08:02.600 --> 00:08:06.860
Without a doubt, we can say that the four test is more efficient than wild tests.

110
00:08:07.400 --> 00:08:13.220
And remember that you have the time module to get and compare the execution times of different sections,

111
00:08:13.220 --> 00:08:19.130
and you also have time it to measure the execution time of a section by repeating it several times and

112
00:08:19.130 --> 00:08:21.230
obtaining a more readable result.

113
00:08:21.530 --> 00:08:22.930
So this is all for now.

114
00:08:22.940 --> 00:08:27.330
Let's go to the next lecture so as to learn about other special modules.

115
00:08:27.350 --> 00:08:28.190
See you there.
