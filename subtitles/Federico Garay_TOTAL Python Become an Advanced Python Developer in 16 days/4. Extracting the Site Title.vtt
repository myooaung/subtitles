WEBVTT
1
00:00:08.520 --> 00:00:12.720
Now we're going to start writing code straight up as our first exercise.

2
00:00:12.720 --> 00:00:19.260
We'll try to capture this tag title, the one we see up here on the website Video School Learn creative

3
00:00:19.260 --> 00:00:21.600
skills with top rated online courses.

4
00:00:21.960 --> 00:00:23.670
That's what we want to capture.

5
00:00:24.480 --> 00:00:31.530
So we right click on a blank space, click on inspect and search in head because that's where the title

6
00:00:31.530 --> 00:00:33.120
shown in the tag is.

7
00:00:34.080 --> 00:00:40.220
So we expand the head tag to see what we're going to search and we'll find it here.

8
00:00:40.500 --> 00:00:43.890
Title is the tag containing the text we want to capture.

9
00:00:44.700 --> 00:00:47.100
Let's go to Python to start writing.

10
00:00:48.150 --> 00:00:50.400
We'll store our search result in a variable.

11
00:00:50.410 --> 00:00:52.170
Its name can be result.

12
00:00:52.350 --> 00:00:55.170
Result will be equal to a search result.

13
00:00:55.170 --> 00:01:00.480
And that's why we imported the requests library, which we will call right now.

14
00:01:01.080 --> 00:01:04.170
We put requests and call the get method.

15
00:01:04.890 --> 00:01:07.050
What arguments does get require?

16
00:01:07.440 --> 00:01:11.220
It requires us to enter the site from which we want to collect information.

17
00:01:11.670 --> 00:01:14.220
We have to enter the website link as a string.

18
00:01:14.490 --> 00:01:22.410
So let's go here and copy and go back to Python and let's add quotes so as to have everything this variable

19
00:01:22.410 --> 00:01:23.250
requires.

20
00:01:24.090 --> 00:01:28.890
If you get an error after doing this check, if your firewall is preventing Python from accessing the

21
00:01:28.890 --> 00:01:34.140
internet, you should take care of that so Python can search for stuff on the Internet.

22
00:01:35.250 --> 00:01:41.100
Okay, now we're going to see what this result variable is, which contains search results from a website.

23
00:01:41.700 --> 00:01:45.240
So let's print the type of result to see what we get.

24
00:01:45.810 --> 00:01:52.740
Let's execute and we see that result belongs to the requests model response class.

25
00:01:53.070 --> 00:01:55.050
It is the answer to a question.

26
00:01:55.050 --> 00:01:57.120
That's what result contains.

27
00:01:57.750 --> 00:01:59.460
But what does result contain?

28
00:01:59.460 --> 00:02:06.720
Well, let's remove type and apply dot text, which is a property of result as it is an object from

29
00:02:06.720 --> 00:02:07.560
requests.

30
00:02:08.190 --> 00:02:12.240
If we want to see the text of result will bump into that.

31
00:02:12.840 --> 00:02:18.630
This whole text, which is in fact is inside the source code of the link we passed before.

32
00:02:19.800 --> 00:02:23.490
So bear in mind that what you're looking at here is a string.

33
00:02:23.970 --> 00:02:26.370
It was returned in string format.

34
00:02:26.970 --> 00:02:34.080
So in order to look for the objects present in this HTML code, we have to start parsing that is converting

35
00:02:34.080 --> 00:02:38.490
the string data to a data type we need in order to web scrape.

36
00:02:39.540 --> 00:02:46.260
Now we'll need to use the beautiful soup library which will allow us to scan all this text to spot the

37
00:02:46.260 --> 00:02:48.000
elements we're looking for.

38
00:02:49.380 --> 00:02:54.960
It's like we're regarding HTML code as a soup full of different ingredients, and through this library

39
00:02:54.960 --> 00:02:59.490
we'll be able to identify all the elements or ingredients combined in this soup.

40
00:03:00.480 --> 00:03:04.560
So let's create a variable named soup which will be equal to B.

41
00:03:04.560 --> 00:03:05.580
S four.

42
00:03:06.270 --> 00:03:08.490
Then we have to choose beautiful soup.

43
00:03:08.490 --> 00:03:12.300
Once again, this will require two things.

44
00:03:12.690 --> 00:03:17.010
First, it requires the string we want to convert to a beautiful soup element.

45
00:03:17.340 --> 00:03:24.300
That string is in result text, which is the text we just saw and which is still in our console.

46
00:03:24.780 --> 00:03:31.470
Second, we have to enter the code that tells Python what we're going to use in order to pass this HTML

47
00:03:31.470 --> 00:03:32.070
code.

48
00:03:33.120 --> 00:03:37.140
We'll type HTML dot parser between quotes.

49
00:03:37.500 --> 00:03:44.010
Now we'll start to print the contents of soup, which is no longer a string but an object of type beautiful

50
00:03:44.010 --> 00:03:44.550
soup.

51
00:03:45.030 --> 00:03:53.250
This object includes the conversion of the string to an object with which we can scan the text so we

52
00:03:53.250 --> 00:03:54.060
execute it.

53
00:03:54.060 --> 00:03:56.100
And there's that block of text again.

54
00:03:56.100 --> 00:03:58.110
But it's organized differently.

55
00:03:58.760 --> 00:04:03.560
Although it looks like a string, we can access its elements and that's what we're going to do.

56
00:04:04.580 --> 00:04:11.390
If instead of printing soup, we print soup dot select, which is a method of the beautiful soup objects.

57
00:04:11.570 --> 00:04:14.600
We can choose a specific tag and print it.

58
00:04:15.200 --> 00:04:18.290
In this case, we want the title of the title tag.

59
00:04:18.470 --> 00:04:22.430
So we put the title string, which is the name of the tag.

60
00:04:22.970 --> 00:04:26.030
And if we execute this, look what we receive.

61
00:04:26.240 --> 00:04:27.470
Opening Tag.

62
00:04:27.470 --> 00:04:28.310
Contents.

63
00:04:28.310 --> 00:04:29.420
Closing Tag.

64
00:04:30.210 --> 00:04:32.820
The notice that this is inside a list.

65
00:04:33.120 --> 00:04:36.720
That's why we have square brackets at the beginning and the end.

66
00:04:37.320 --> 00:04:38.070
Why?

67
00:04:38.850 --> 00:04:43.320
Because we'll have different results depending on the tag that we search for.

68
00:04:43.560 --> 00:04:49.530
Some tags appear several times in one HTML code, and so they will be stored in list format.

69
00:04:50.160 --> 00:04:56.310
If we had looked for a paragraph tag, remember we use P, we would have gotten a list containing a

70
00:04:56.310 --> 00:04:58.050
lot of paragraph elements.

71
00:04:58.820 --> 00:05:05.260
Here we have numerous elements and if we want to know how many there are, we put Len close brackets,

72
00:05:05.270 --> 00:05:09.860
execute it and we'll see the exact number of paragraph this list contains.

73
00:05:10.790 --> 00:05:11.780
So let's undo.

74
00:05:11.780 --> 00:05:16.490
And now we'll look for H one, which is another type of tag we execute.

75
00:05:16.490 --> 00:05:19.460
And here we have a list containing two elements.

76
00:05:20.240 --> 00:05:25.820
But if we want the title again, not as a list but as an isolated element, we should adopt the methods

77
00:05:25.820 --> 00:05:27.230
we use with lists.

78
00:05:28.070 --> 00:05:31.760
For instance, I want to see the index zero of this list.

79
00:05:32.030 --> 00:05:36.920
As a result, I'll get rid of the square brackets and get a tag instead.

80
00:05:37.820 --> 00:05:41.810
So imagine that I don't want to see this as a tag, but as a text.

81
00:05:42.350 --> 00:05:46.400
In order to get rid of the tags, I have to apply the get text method.

82
00:05:46.820 --> 00:05:51.380
This allows me to simply obtain a text which contains that element of the list.

83
00:05:52.100 --> 00:05:57.800
So let's suppose now that I want this paragraph, the one reading one on one support.

84
00:05:57.920 --> 00:06:04.070
Well, I know this is an element of type paragraph, so I'll go back here and state that I want to select

85
00:06:04.070 --> 00:06:09.320
the list of all the PE elements which are paragraphs, and then I'll execute it.

86
00:06:10.010 --> 00:06:15.290
Now I have to pick one of all those elements and I already did some calculations.

87
00:06:15.290 --> 00:06:19.250
So I know that I'm interested in a paragraph in index six of this list.

88
00:06:19.250 --> 00:06:21.590
So I'll call index six.

89
00:06:23.340 --> 00:06:30.540
I just got this element, but I want to remove its tags so I'll apply the get text method with brackets

90
00:06:30.720 --> 00:06:36.270
now and I'll print it again and I here have the exact value that I wanted.

91
00:06:37.590 --> 00:06:42.780
Finally, I want to store this in a variable which will be my underscore p.

92
00:06:43.200 --> 00:06:47.430
I'll copy the elements in print, paste them in my underscore P.

93
00:06:47.640 --> 00:06:51.420
I'll type my underscore P in print and execute this.

94
00:06:51.420 --> 00:06:53.310
And it works just fine.

95
00:06:54.150 --> 00:07:01.230
So that's how we apply beautiful soup and request to get a specific object from our HTML code and convert

96
00:07:01.230 --> 00:07:04.950
it into an object which we can manipulate inside our code.

97
00:07:05.910 --> 00:07:11.220
So this is all for now, but our next lesson will continue to use these tools in order to develop some

98
00:07:11.220 --> 00:07:12.570
amazing concepts.

99
00:07:12.570 --> 00:07:13.710
So I'll see you there.
