WEBVTT
1
00:00:07.880 --> 00:00:15.740
Today we have seen very varied but important things to write more efficient, dynamic and maintainable

2
00:00:15.740 --> 00:00:16.270
code.

3
00:00:16.280 --> 00:00:22.580
We learned how to install packages, how to divide our code into modules, how to handle possible errors,

4
00:00:22.580 --> 00:00:24.020
how to test our code.

5
00:00:24.020 --> 00:00:27.320
And we learn some more tools like decorators and generators.

6
00:00:27.500 --> 00:00:31.460
Now it's time to put it all into action in a new program.

7
00:00:31.460 --> 00:00:36.830
And today's challenge is for you to create a software that works like a ticket vending machine in a

8
00:00:36.830 --> 00:00:37.670
drugstore.

9
00:00:38.000 --> 00:00:39.770
What's a ticket vending machine?

10
00:00:39.770 --> 00:00:44.030
Well, it's a machine you can find at the entrance of many stores or banks.

11
00:00:44.030 --> 00:00:50.660
This machine asks you what procedure you've come to perform and assigns you a turn number according

12
00:00:50.660 --> 00:00:52.670
to the area you want to go.

13
00:00:53.090 --> 00:00:59.390
Well, in our case, you are going to create it for a drugstore where there are three areas of attention

14
00:00:59.390 --> 00:01:02.810
perfumes, medicine and cosmetics.

15
00:01:02.960 --> 00:01:08.270
Your program will ask the customer which of the areas they want to go, and we'll give them a shift

16
00:01:08.270 --> 00:01:10.970
number depending on which area they go to.

17
00:01:11.150 --> 00:01:18.740
For example, if I choose cosmetics, it will give me the letter C as in cosmetics, dash 54.

18
00:01:19.370 --> 00:01:25.220
After this, it will ask us if we want to take another number to simulate that a new client is coming

19
00:01:25.220 --> 00:01:27.350
and it will repeat the whole process.

20
00:01:27.770 --> 00:01:29.150
Some things to keep in mind.

21
00:01:29.150 --> 00:01:35.930
Different customers will be taking different numbers for different areas perfumes, medicine, cosmetics

22
00:01:36.140 --> 00:01:37.790
in a different order.

23
00:01:37.970 --> 00:01:44.270
So the system must keep track of how many numbers it has given for each of those areas and produce the

24
00:01:44.270 --> 00:01:47.360
next number for each area as they ask for it.

25
00:01:47.930 --> 00:01:54.200
You probably already understand that we need to take advantage of generators and their efficiency to

26
00:01:54.200 --> 00:01:54.890
do this.

27
00:01:54.890 --> 00:02:00.680
On the other hand, the message where we tell the customer they're waiting number should have some additional

28
00:02:00.680 --> 00:02:03.170
text before and after the number.

29
00:02:03.170 --> 00:02:11.090
For example, your number is then the number itself with the letter at the beginning and something like

30
00:02:11.090 --> 00:02:16.430
Wait and someone will be with you shortly in order for our code not to repeat itself.

31
00:02:16.430 --> 00:02:22.130
Instead of putting this text in each of the functions that calculate the numbers, we can take advantage

32
00:02:22.130 --> 00:02:28.700
of the decorators flexibility to create that additional text only once and then wrap any of our functions

33
00:02:28.700 --> 00:02:30.260
with that unique text.

34
00:02:30.260 --> 00:02:36.290
Finally, you should take advantage of the fact that you now know how to split your program into different

35
00:02:36.290 --> 00:02:39.650
modules and separate the code into two parts.

36
00:02:39.920 --> 00:02:46.520
On the one hand, a module that can be called Numbers Pi, where you write all the generators and the

37
00:02:46.520 --> 00:02:47.420
decorator.

38
00:02:47.750 --> 00:02:55.820
Then a second module which we can call Main Pi, where you write the functions that manage the operation

39
00:02:55.820 --> 00:03:01.400
of the program, for example, instructions to choose an area and to decide if it will continue taking

40
00:03:01.400 --> 00:03:03.290
new clients or end the program.

41
00:03:03.680 --> 00:03:10.640
Remember that you will need to import the content of numbers pi into Main Pi in order to have its functions

42
00:03:10.640 --> 00:03:11.390
available.

43
00:03:11.390 --> 00:03:17.030
If you can manage to develop this code following these guidelines, you will have put into action everything

44
00:03:17.030 --> 00:03:18.020
you have learned today.

45
00:03:18.020 --> 00:03:22.040
And in that way you will be reinforcing your knowledge in a great way.

46
00:03:22.770 --> 00:03:27.730
It's time for loud music headphones, your favorite snack and a lot of concentration.

47
00:03:27.750 --> 00:03:29.550
It's time to program.
