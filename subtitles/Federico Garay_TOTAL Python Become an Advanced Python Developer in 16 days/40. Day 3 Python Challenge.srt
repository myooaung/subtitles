1
00:00:07,790 --> 00:00:10,410
Well, the third day was full of new stuff.

2
00:00:10,430 --> 00:00:15,770
We have seen a lot of good things and it's time to put everything together into practice by creating

3
00:00:15,770 --> 00:00:18,420
a perfectly functional program from scratch.

4
00:00:18,440 --> 00:00:24,260
Now that you know how to use string method and properties, how to index data sets such as strings,

5
00:00:24,260 --> 00:00:30,830
lists and tuples, and especially now that you know all the data types needed to store anything, you

6
00:00:30,830 --> 00:00:34,590
will be able to find a way to program a text parser.

7
00:00:34,610 --> 00:00:42,170
The task is as follows You are going to create a program that first asks the user to enter text.

8
00:00:42,380 --> 00:00:47,840
It can be any text, a whole article, a paragraph, a sentence, a poem, whatever you want.

9
00:00:48,440 --> 00:00:53,420
Then the program will ask the user to enter three random letters.

10
00:00:53,690 --> 00:00:59,660
From that moment on, our code is going to process that information and result in five different types

11
00:00:59,660 --> 00:01:00,740
of analysis.

12
00:01:00,770 --> 00:01:06,350
First, how many times each of those letters they have chosen appears.

13
00:01:06,500 --> 00:01:13,340
To achieve this, I advise you to store those letters in a list and then use a method of string that

14
00:01:13,340 --> 00:01:18,800
allows you to count how many times a substring appears within the string.

15
00:01:19,190 --> 00:01:25,400
One thing to keep in mind is that when searching for letters, there can be upper and lower case and

16
00:01:25,400 --> 00:01:26,990
this will affect the result.

17
00:01:27,050 --> 00:01:32,420
So to make sure that absolutely all letters are counted, you should pass both the original text and

18
00:01:32,420 --> 00:01:34,910
the letters to be searched to lowercase.

19
00:01:35,450 --> 00:01:38,900
Second, how many words are in the whole text?

20
00:01:38,930 --> 00:01:44,660
To achieve this part, remember that there is a string method that allows us to transform it into a

21
00:01:44,660 --> 00:01:45,350
list.

22
00:01:45,350 --> 00:01:50,150
And then there is a function that allows us to find out the length of a list.

23
00:01:50,300 --> 00:01:55,070
Third, what are the first and last letters of the text?

24
00:01:55,160 --> 00:01:57,980
Here we will clearly use indexing.

25
00:01:58,790 --> 00:02:05,570
Fourth, the system will show us how the text would look like if we inverted the order of the words.

26
00:02:05,600 --> 00:02:11,480
Is there any method that allows us to invert the order of a list and another one that allows us to join

27
00:02:11,480 --> 00:02:13,940
these elements with spaces in between?

28
00:02:14,300 --> 00:02:19,610
Fifth and last, the system will tell us if the word python is inside the text.

29
00:02:19,850 --> 00:02:24,230
This part can be a bit complicated to imagine, but I'll give you a hint.

30
00:02:24,470 --> 00:02:31,010
You can use Booleans to make your enquiry and a dictionary to find ways to express your answer.

31
00:02:31,700 --> 00:02:35,990
As I always tell you, I don't expect you to know how to do it on your first try.

32
00:02:35,990 --> 00:02:41,420
And it's likely that even though you already have the necessary tools, you still might not be able

33
00:02:41,420 --> 00:02:43,550
to figure it out on your own.

34
00:02:43,580 --> 00:02:46,490
How to combine all of them to achieve our goal.

35
00:02:46,790 --> 00:02:47,690
But don't worry.

36
00:02:47,690 --> 00:02:50,550
The only thing we ask as your teachers is that you try.

37
00:02:50,570 --> 00:02:54,650
You put your head down to the process and try to solve that problem.

38
00:02:54,770 --> 00:03:02,030
Succeeding by yourself right now does not matter as much, because once you see how we solved it, you'll

39
00:03:02,030 --> 00:03:06,140
have that eureka feeling, that moment where you completely understand it.

40
00:03:06,140 --> 00:03:11,510
But if you go straight to the solution right now without trying to figure it out yourself, you won't

41
00:03:11,510 --> 00:03:13,040
be learning it as much.

42
00:03:13,040 --> 00:03:19,100
And the retention of what you're practicing will not be as great as if you put in the time and effort

43
00:03:19,100 --> 00:03:21,020
to try to figure it out right now.

44
00:03:21,050 --> 00:03:21,410
All right.

45
00:03:21,410 --> 00:03:26,240
So go on, find a good set of music to listen to and start programming.
