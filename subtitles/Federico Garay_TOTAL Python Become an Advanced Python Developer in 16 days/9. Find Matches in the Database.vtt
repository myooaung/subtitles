WEBVTT
1
00:00:07.880 --> 00:00:10.550
So we've now succeeded in the first two steps.

2
00:00:10.550 --> 00:00:14.750
We've created the database of faces and we have already coded it.

3
00:00:15.170 --> 00:00:20.960
Now the third step is to find matches with the image of any person who appears in front of the camera

4
00:00:20.960 --> 00:00:22.160
to work in our company.

5
00:00:23.330 --> 00:00:24.950
Unlike the initial demonstration.

6
00:00:24.950 --> 00:00:30.590
Now we are no longer comparing a photo against another photo, but a list of photos against the capture

7
00:00:30.590 --> 00:00:31.940
taken from a webcam.

8
00:00:32.480 --> 00:00:35.870
This implies certain differences and we're going to catch up with them.

9
00:00:36.530 --> 00:00:41.690
So let's start by deleting this last print, which was only created for demonstration purposes.

10
00:00:42.050 --> 00:00:48.590
We already know that our encoded employee list is generated properly and there has many elements as

11
00:00:48.590 --> 00:00:50.840
there are images in the employees folder.

12
00:00:51.770 --> 00:00:56.330
Now we're going to take care of the code to be able to take a webcam picture.

13
00:00:56.630 --> 00:01:01.310
And we do this with a variable called capture where we store an object.

14
00:01:01.340 --> 00:01:02.260
KV two.

15
00:01:02.300 --> 00:01:06.320
Through the method video capture that allows us to do that.

16
00:01:06.890 --> 00:01:14.210
So inside the brackets, we're going to put a zero, which is an ID, and the next parameter is CV two

17
00:01:14.210 --> 00:01:17.720
dot C AP DX show.

18
00:01:18.320 --> 00:01:23.270
With this, our code is going to take capture of whatever is seen on the camera at that moment.

19
00:01:23.390 --> 00:01:28.370
Once the code gets to this line, it's going to take a picture of the webcam that's connected to the

20
00:01:28.370 --> 00:01:29.150
computer.

21
00:01:29.540 --> 00:01:32.480
And then we're going to read the captured image.

22
00:01:33.510 --> 00:01:35.160
So what does Red mean?

23
00:01:35.460 --> 00:01:41.130
It means the code is going to take what it is received from the webcam and transform it into an image

24
00:01:41.130 --> 00:01:42.180
that it can use.

25
00:01:42.480 --> 00:01:47.070
For that, we're going to take capture and we're going to apply the Reed method.

26
00:01:47.970 --> 00:01:51.210
So when we apply this method, we're going to get two elements.

27
00:01:51.720 --> 00:01:55.500
The first one is the information if the capture was successful or not.

28
00:01:55.740 --> 00:01:57.990
And the second one is the image itself.

29
00:01:58.410 --> 00:02:05.220
Then we have to store the result of this method in two variables the variable success to store if it

30
00:02:05.220 --> 00:02:07.710
was possible or not, to take the capture.

31
00:02:07.740 --> 00:02:13.470
It is a boolean and then the variable image which is going to contain the picture itself.

32
00:02:14.340 --> 00:02:17.430
And here we already have more variables to do things later.

33
00:02:18.090 --> 00:02:23.400
So now that we've been able to see if the capture has been done or not, we're going to look at, if

34
00:02:23.670 --> 00:02:24.930
not success.

35
00:02:25.350 --> 00:02:30.420
That is to say, if the photo could not be taken and we're going to print in the console, something

36
00:02:30.420 --> 00:02:34.820
like capture could not be taken else.

37
00:02:34.830 --> 00:02:37.140
And here comes the interesting part of the code.

38
00:02:37.530 --> 00:02:41.730
First, we're going to try to recognize a face in that capture.

39
00:02:42.120 --> 00:02:48.930
Now, inside a variable that can be called captured face, we're going to save a face recognition element

40
00:02:49.530 --> 00:02:51.930
to which we apply face locations.

41
00:02:52.380 --> 00:02:57.570
I was going to ask us to pass it an image and we're going to pass it the variable image that we have

42
00:02:57.570 --> 00:02:59.730
just constructed from capture read.

43
00:03:00.180 --> 00:03:02.720
So now our code already has an image.

44
00:03:02.730 --> 00:03:07.020
And not only does it have the image, but it has located a face within that image.

45
00:03:07.530 --> 00:03:12.840
If there is one, of course it then goes to encode the captured face.

46
00:03:14.280 --> 00:03:19.050
We're going to generate a new variable that can be called encoded captured face.

47
00:03:19.350 --> 00:03:24.690
This is going to equal to an object f r point face encoding.

48
00:03:25.330 --> 00:03:32.170
But we already knew that is going to ask us for the image to process image and then the captured face,

49
00:03:32.380 --> 00:03:37.210
which is going to be the variable captured face and we're going to construct it.

50
00:03:38.420 --> 00:03:44.780
The next step is search for match because we have to search for matches between the camera face and

51
00:03:44.780 --> 00:03:48.290
the list of images that we have in the encoded employee list.

52
00:03:48.740 --> 00:03:54.230
So we're going to have to do it with a loop because we have to go through all the images in the database.

53
00:03:54.350 --> 00:04:02.240
And this loop is going to perform an action for each face and for each location face that it finds in

54
00:04:02.240 --> 00:04:02.970
a zip.

55
00:04:02.990 --> 00:04:07.670
Made up of encoded captured face and captured face.

56
00:04:08.540 --> 00:04:15.140
So remember that we can put two variables so we can store data that is found in an element that returns

57
00:04:15.140 --> 00:04:17.090
two values in each iteration.

58
00:04:17.660 --> 00:04:24.830
In this case, ZIP is an element that will return two objects per iteration, one from each list, and

59
00:04:24.830 --> 00:04:27.830
these will be stored in face and location.

60
00:04:28.850 --> 00:04:33.830
So this implies that in each iteration we will be able to do things with the different elements that

61
00:04:33.830 --> 00:04:35.480
compose each record.

62
00:04:35.930 --> 00:04:36.830
Do you follow me?

63
00:04:37.610 --> 00:04:43.670
If you don't remember how the zip elements behave and you can review the lesson with that name.

64
00:04:44.090 --> 00:04:50.150
So for each of the records, our loop is going to create a variable called matches, and this variable

65
00:04:50.150 --> 00:04:55.070
is going to be equal to a face recognition element called compare faces.

66
00:04:55.810 --> 00:04:59.740
Just going to ask for the known face encoding.

67
00:05:01.230 --> 00:05:07.830
So here we load our encoded employee list, which are the control faces, and then it's going to ask

68
00:05:07.830 --> 00:05:10.200
us for a face encoding to check.

69
00:05:10.560 --> 00:05:12.450
And this is where we pass face.

70
00:05:13.650 --> 00:05:17.280
Which is each of the faces that come from the encoded captured face.

71
00:05:18.240 --> 00:05:19.710
So I hope you're following along.

72
00:05:19.710 --> 00:05:20.580
And if you're not.

73
00:05:20.610 --> 00:05:23.550
Go through it carefully and you'll understand it perfectly.

74
00:05:24.570 --> 00:05:27.660
So we already have the matches stored in a variable.

75
00:05:28.350 --> 00:05:35.130
Now we're going to store the distances in another variable, which is f, r, dot face distance.

76
00:05:35.910 --> 00:05:43.470
And this is going to have the same values encoded employee list inside face one is going to return the

77
00:05:43.470 --> 00:05:48.690
information about whether there is a match or not and the other is going to return the information that

78
00:05:48.690 --> 00:05:50.580
says how far apart they are.

79
00:05:51.390 --> 00:05:57.090
As we're going to be passing a list which is encoded employee list, it is going to return a list.

80
00:05:57.540 --> 00:06:02.760
And as we have five elements in the list, it will return the five distances between the person in the

81
00:06:02.760 --> 00:06:05.610
webcam and each of the people in the list.

82
00:06:06.060 --> 00:06:11.880
So it will build a list with these five distances and therefore the smallest of these five distances

83
00:06:11.880 --> 00:06:18.870
will be the one we have to consider as the winning match so that we can see this transiently on screen.

84
00:06:18.870 --> 00:06:24.930
Before we build the final code, we're going to print the distance here in the console and now we're

85
00:06:24.930 --> 00:06:26.220
going to run our code again.

86
00:06:26.610 --> 00:06:32.160
It starts generating the database at this point and I'm taking off my glasses and I'm getting closer

87
00:06:32.160 --> 00:06:34.770
to the camera so it can identify me.

88
00:06:35.250 --> 00:06:38.820
Now it lights up and that's where the data appears.

89
00:06:39.940 --> 00:06:42.700
I can't show you my camera while I'm doing this exercise.

90
00:06:42.700 --> 00:06:47.950
But if I use the webcam for the video recording of the course, it can't take the capture.

91
00:06:48.850 --> 00:06:51.340
This is the distance between the camera person.

92
00:06:51.340 --> 00:06:53.890
That would be me and Cosmo Kramer.

93
00:06:54.610 --> 00:06:56.200
It is greater than six.

94
00:06:57.010 --> 00:07:00.100
Here is the distance between me and Elaine Venus.

95
00:07:01.580 --> 00:07:07.520
And here we have the distance between me and Federico Garay, which, as we are the same person, is

96
00:07:07.520 --> 00:07:13.430
less than 0.6, and then the others, which also do not have an appropriate distance for there to be

97
00:07:13.430 --> 00:07:14.570
an accepted match.

98
00:07:15.140 --> 00:07:20.330
So as I only got a value less than 0.6 and the third photo we can say that the third element of this

99
00:07:20.330 --> 00:07:25.340
list, the one at index two, is the only one that can be considered a match.

100
00:07:26.150 --> 00:07:31.310
So how are we going to transform this into code so that we can identify the selected individual?

101
00:07:31.670 --> 00:07:37.550
We're going to import up here a library called NumPy, which we have already installed at the beginning

102
00:07:37.550 --> 00:07:41.570
of this day, and which we're going to be looking at quite a bit in the future.

103
00:07:42.140 --> 00:07:48.230
And once we've imported it, we're going to come up here after this print of distance, and we're going

104
00:07:48.230 --> 00:07:54.200
to create a new variable that's going to be the match index, and that's going to be equal to NumPy

105
00:07:54.200 --> 00:08:00.620
dot arg min, which is a method that's going to give us the smallest of the values.

106
00:08:00.620 --> 00:08:02.240
That's in a list of values.

107
00:08:03.410 --> 00:08:04.490
What list of values?

108
00:08:04.850 --> 00:08:06.800
The one in the distance is list.

109
00:08:07.490 --> 00:08:13.850
Then distances is going to provide these five values and numpy is going to tell us which is the smallest

110
00:08:13.850 --> 00:08:16.370
and this is going to store it in match index.

111
00:08:16.940 --> 00:08:22.910
So this already allows us to create a code inside the loop to show coincidences, if any.

112
00:08:23.810 --> 00:08:32.240
And here we say that if the distance in the index that corresponds to match index has a value greater

113
00:08:32.240 --> 00:08:38.480
than 0.6, that is to say that it is not an acceptable coincidence because it has a very big distance.

114
00:08:38.790 --> 00:08:44.570
We're going to print that does not match any of our employees.

115
00:08:45.630 --> 00:08:53.070
Perfect foot in case distances is smaller than, let's say for now, something very simple, like have

116
00:08:53.070 --> 00:08:54.600
a nice working day.

117
00:08:55.910 --> 00:08:57.770
And then we're going to do something else here.

118
00:08:58.070 --> 00:09:01.280
But for now, we'll leave it like this to mark the spot.

119
00:09:02.030 --> 00:09:07.670
So we run it as it is, and I get back to place so that I can get the right picture taken.

120
00:09:08.090 --> 00:09:11.030
The picture is coming and I'm getting pretty.

121
00:09:12.230 --> 00:09:17.690
The picture was taken and here it says, Have a nice working day because he identified that I am this

122
00:09:17.690 --> 00:09:20.000
person in the third place.

123
00:09:20.990 --> 00:09:23.660
So at the moment, we haven't shown the match yet.

124
00:09:24.710 --> 00:09:28.940
We're going to do that in the next lesson and add some supplementary code.
