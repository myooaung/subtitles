1
00:00:08,000 --> 00:00:11,090
You already know what object oriented programming is.

2
00:00:11,090 --> 00:00:16,220
You know how to create a class and how to assign attributes to a class and its objects.

3
00:00:16,370 --> 00:00:19,370
Now let's learn how to create methods for a class.

4
00:00:19,700 --> 00:00:27,380
Actually, we have already created a class method by accident because technically in it is a method.

5
00:00:27,530 --> 00:00:32,060
It is just a special method that is already built into all classes by default.

6
00:00:32,090 --> 00:00:38,060
Next, we are going to see how to define methods that give some interesting functionality to our class.

7
00:00:38,090 --> 00:00:44,090
This is going to be easy for you and probably remind you of how we created functions because it's basically

8
00:00:44,090 --> 00:00:44,930
the same thing.

9
00:00:45,110 --> 00:00:47,780
Let's continue with the bird class example.

10
00:00:48,140 --> 00:00:54,320
Let's write def inside the class so that python knows that we are going to create a function.

11
00:00:54,530 --> 00:00:58,850
Then we write the name of the method, which in this case would be chirp.

12
00:00:59,210 --> 00:01:05,090
We use the same naming rules that we use with functions, and then we write some parentheses where we

13
00:01:05,090 --> 00:01:07,670
pass arguments and then a colon.

14
00:01:08,210 --> 00:01:14,480
What differentiates classes from variables is that inside the former, we're always going to pass at

15
00:01:14,480 --> 00:01:22,400
least one mandatory argument, which is the word self, and it refers to each instance or object of

16
00:01:22,400 --> 00:01:23,280
this class.

17
00:01:23,300 --> 00:01:29,370
What follows is putting inside the function, whatever it takes for our object to do something.

18
00:01:29,390 --> 00:01:36,560
In this case, it can be only to ask that it prints peep so that our bird chirps.

19
00:01:37,280 --> 00:01:41,900
If we want to create a method that asks for arguments, we can do it this way.

20
00:01:41,990 --> 00:01:49,790
We create the method fly and besides self, which is mandatory, we ask for another parameter that can

21
00:01:49,790 --> 00:01:54,440
be the amount of meters or feet that our bird must fly.

22
00:01:55,130 --> 00:02:02,780
Next, we are going to use that argument in the code so that the action that our bird is going to execute

23
00:02:02,780 --> 00:02:06,200
includes the information that has been passed to it.

24
00:02:06,710 --> 00:02:09,680
So this is how we create methods for our classes.

25
00:02:09,680 --> 00:02:11,110
How do we execute them?

26
00:02:11,120 --> 00:02:13,490
We're going to show you that right now in Pi Charm.

27
00:02:14,330 --> 00:02:20,780
We'll keep on taking the bird classes, an example in which we can have some class and instance attributes.

28
00:02:21,380 --> 00:02:23,690
Now we'll add some methods to our class.

29
00:02:24,200 --> 00:02:26,180
So let's create two methods.

30
00:02:26,300 --> 00:02:27,950
One will be named Chirp.

31
00:02:27,950 --> 00:02:33,350
And as we said in the example, this will allow our bird to say something or sing like tweet.

32
00:02:34,440 --> 00:02:39,180
So we type chirp and look at what python will do when I enter brackets.

33
00:02:39,180 --> 00:02:41,310
It adds self automatically.

34
00:02:41,820 --> 00:02:43,180
So why does it do this?

35
00:02:43,200 --> 00:02:46,130
Because self is a mandatory attribute.

36
00:02:46,140 --> 00:02:48,240
So pie charm saves me the trouble.

37
00:02:49,430 --> 00:02:54,950
Now I have to create code lines in order to execute something such as an action that our method is going

38
00:02:54,950 --> 00:02:55,670
to perform.

39
00:02:55,940 --> 00:02:59,910
So we'll just make our bird tweet, and that's all our method needs.

40
00:02:59,930 --> 00:03:01,550
We'll create another one.

41
00:03:01,670 --> 00:03:04,850
But for this second method, it's going to require parameters.

42
00:03:05,120 --> 00:03:11,990
For example, if I want to create a method named Fly, I'll need more information besides self such

43
00:03:11,990 --> 00:03:18,080
as the feat, which is the altitude our bird will be flying at every time we execute this method.

44
00:03:18,870 --> 00:03:25,590
To simplify, this will type only one string literal that says the bird flies an amount of feet that

45
00:03:25,590 --> 00:03:32,130
we will get from our feet parameter and then we'll complete the sentence with the words feet high.

46
00:03:33,900 --> 00:03:37,170
Now we have created two methods and added them to our class.

47
00:03:37,170 --> 00:03:42,930
So notice that if I close the class, everything I've typed will be enclosed in the bird class.

48
00:03:43,650 --> 00:03:50,220
So now we get out of the class and let's create an instance for our bird, which can be named Tweety.

49
00:03:50,640 --> 00:03:54,630
This instance will be a bird and will need to parameters.

50
00:03:54,630 --> 00:04:01,680
One will be color and it will be yellow, and the other is species which will be canary.

51
00:04:01,950 --> 00:04:04,050
Now Tweety exists.

52
00:04:04,410 --> 00:04:10,530
So if I type a dot after Tweety, not only will I have parameters or attributes that I did before,

53
00:04:10,530 --> 00:04:16,320
like color, species and wings, but I'll have the methods chirp and fly.

54
00:04:17,310 --> 00:04:18,890
This is how I execute them.

55
00:04:18,900 --> 00:04:25,320
I call chirp, which doesn't ask for any parameters, and if I execute our file it will show tweet,

56
00:04:25,320 --> 00:04:29,400
which is what Tweety has to do every time we call the method chirp.

57
00:04:30,060 --> 00:04:35,720
And if I call fly instead of chirp, remember, it requires me to pass the parameter feet.

58
00:04:35,730 --> 00:04:39,930
So I'll say the bird will fly 164 feet high.

59
00:04:40,750 --> 00:04:45,220
We execute it and it says the bird flies 164 feet high.

60
00:04:46,450 --> 00:04:50,470
I can also add features like the values of our attributes to our methods.

61
00:04:50,650 --> 00:04:54,490
Suppose we want our bird to say its color besides tweeting.

62
00:04:55,210 --> 00:04:56,710
So let's type tweet.

63
00:04:56,710 --> 00:04:57,580
I am.

64
00:04:57,580 --> 00:05:04,870
Let's open a call and then outside the string we type dot format in order to call the value corresponding

65
00:05:04,870 --> 00:05:05,530
to color.

66
00:05:06,370 --> 00:05:09,910
However, there can be an error that is quite common for a beginner.

67
00:05:10,330 --> 00:05:14,200
You'd say, well, if I need to pass color as a value, then I should type color.

68
00:05:14,200 --> 00:05:15,070
And that's it.

69
00:05:15,400 --> 00:05:16,780
Well, it won't work.

70
00:05:16,810 --> 00:05:21,280
In fact, we have to pass the color of the instance which will execute this method.

71
00:05:21,820 --> 00:05:27,550
So we have to complete the process with self color and the software will stop detecting the error.

72
00:05:27,820 --> 00:05:32,290
So if we execute the method chirp, our bird says Tweet, I am yellow.

73
00:05:32,410 --> 00:05:34,610
It works because we've added self.

74
00:05:34,630 --> 00:05:40,300
This is very important and every time you build a method that calls an attribute inside a class, you

75
00:05:40,300 --> 00:05:43,330
must relate that attribute to the element that receives it.

76
00:05:43,570 --> 00:05:48,470
The attribute belongs to the object or the instance that's calling the method.

77
00:05:48,490 --> 00:05:55,030
So in this case, self will correctly relate the method to the color that corresponds to the instance.

78
00:05:55,150 --> 00:05:58,460
So this is an essential feature of methods.

79
00:05:58,480 --> 00:06:03,940
This has been easier to understand since we learned about functions two days ago, and class methods

80
00:06:03,940 --> 00:06:07,720
are basically functions that are linked with our particular class.

81
00:06:07,930 --> 00:06:09,970
So let's keep moving forward.

82
00:06:10,000 --> 00:06:15,790
Object orientated programming has a lot to offer us, so let's learn some more in the next lecture.
