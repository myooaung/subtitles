1
00:00:07,740 --> 00:00:13,640
A long time ago, we learned that we can easily search for text fragments within a larger string.

2
00:00:13,650 --> 00:00:22,560
If I want to search for the word python in this text, I just have to ask if word is found in text and

3
00:00:22,560 --> 00:00:26,340
the result will be true because in this case it is found.

4
00:00:26,340 --> 00:00:28,020
But things will be complicated.

5
00:00:28,020 --> 00:00:35,100
If I want to know how many times it appears, or if I have to consider plurals, numeric values, spaces,

6
00:00:35,100 --> 00:00:35,910
etc..

7
00:00:35,940 --> 00:00:42,420
So here come the regular expressions which allow us to make searches with higher levels of abstraction.

8
00:00:42,420 --> 00:00:48,570
For example, if I want to find an email address within a text, I can use them to search for expressions

9
00:00:48,570 --> 00:00:55,230
that respect this format so that they are accepted or to validate if the user entered an appropriate

10
00:00:55,230 --> 00:00:55,890
email.

11
00:00:56,220 --> 00:01:02,220
In short, what regular expressions allow us to do is build a certain pattern to check if it exists.

12
00:01:02,220 --> 00:01:03,720
In another context.

13
00:01:03,780 --> 00:01:09,570
We can access these tools through the E library, which stands for Regular Expressions.

14
00:01:09,810 --> 00:01:13,500
Let's review the basic syntax of regular expressions.

15
00:01:13,500 --> 00:01:18,450
Suppose we want to check if a given user input respects a phone number pattern.

16
00:01:18,450 --> 00:01:24,870
It should have three digits for the area code, a hyphen, and then seven more digits divided into two

17
00:01:24,870 --> 00:01:28,380
groups of three and four digits separated by a hyphen.

18
00:01:28,830 --> 00:01:35,970
One way to structure this pattern with regular expressions would be this the letter R and the quotes

19
00:01:35,970 --> 00:01:43,020
to tell Python not to treat this string as a normal string, but to process it as a regular expression.

20
00:01:43,290 --> 00:01:48,540
So Python will say, okay, some things are going to happen here and I have to treat them differently.

21
00:01:49,080 --> 00:01:55,320
Then comes this expression, which is riddled with characters preceded by a backslash.

22
00:01:55,680 --> 00:02:01,920
These characters would be something like placeholders representing a value that meets some condition.

23
00:02:01,920 --> 00:02:04,740
In this case, D stands for Digit.

24
00:02:04,920 --> 00:02:10,470
So here we have a pattern that says three digits at the beginning, although we don't know which ones

25
00:02:10,470 --> 00:02:17,160
yet, they can be any digits, then a hyphen, then three more digits, another hyphen and four more

26
00:02:17,160 --> 00:02:17,910
digits.

27
00:02:18,150 --> 00:02:25,290
Any string that respects this pattern, for example, any of these will be detected as a valid phone

28
00:02:25,290 --> 00:02:27,570
number by this regular expression.

29
00:02:28,410 --> 00:02:30,960
There are other ways to express the same thing.

30
00:02:31,320 --> 00:02:37,110
For example, by grouping the digits and indicating how many digits are in each group, the special

31
00:02:37,110 --> 00:02:43,380
characters for constructing patterns are as follows Backslash and lowercase dx.

32
00:02:43,650 --> 00:02:45,630
It means a numeric digit.

33
00:02:45,660 --> 00:02:48,330
It can be any number from 0 to 9.

34
00:02:48,780 --> 00:02:52,200
If you write a pattern that says GN Backslash.

35
00:02:52,200 --> 00:03:03,360
DX Dot Backslash dx backslash dx backslash dx this pattern will find a match in any of these examples.

36
00:03:04,260 --> 00:03:07,230
Backslash and w lowercase.

37
00:03:07,470 --> 00:03:10,320
It means any alphanumeric character.

38
00:03:10,440 --> 00:03:13,530
It can be a letter, a numeric digit or a symbol.

39
00:03:13,710 --> 00:03:20,580
For example, this expression will match any of these examples you see on the screen, the backslash

40
00:03:20,580 --> 00:03:22,380
with the lowercase s.

41
00:03:22,890 --> 00:03:24,660
It means white space.

42
00:03:24,660 --> 00:03:30,060
If I created this pattern, I would find matches with any of these examples.

43
00:03:31,080 --> 00:03:36,840
The next three characters are the same ones that we have seen, but in uppercase, if they are capitalized,

44
00:03:36,840 --> 00:03:38,940
it means they have the opposite effect.

45
00:03:38,940 --> 00:03:44,040
The first one is backslash d uppercase, which means it is not a digit.

46
00:03:44,040 --> 00:03:47,700
So a pattern like this is going to match any of these options.

47
00:03:48,150 --> 00:03:54,690
The backslash with a w uppercase means that it is not alphanumeric, it only accepts signs.

48
00:03:54,690 --> 00:03:58,290
So this could be the example you're seeing on the screen right now.

49
00:03:59,400 --> 00:04:05,460
And finally, the backslash with the SE uppercase means it's not a blank space.

50
00:04:05,670 --> 00:04:11,790
This pattern is going to match any group of four characteristics that don't have blanks between them,

51
00:04:12,180 --> 00:04:13,200
but that's not all.

52
00:04:13,200 --> 00:04:18,450
In addition to special characters, we also have quantifier characters as we saw in the phone number.

53
00:04:18,450 --> 00:04:24,270
Example, Quantifier is allow us not to have to repeat special characters all the time.

54
00:04:24,900 --> 00:04:31,470
In Python qualifiers are the plus sign, which means that a special character appears one or more times.

55
00:04:32,160 --> 00:04:36,600
The number of times can be variables, so this validates any of these.

56
00:04:36,630 --> 00:04:42,690
A number in square brackets means that a character is repeated exactly that number of times.

57
00:04:42,690 --> 00:04:47,310
So if you write this, any of these examples will be accepted.

58
00:04:47,310 --> 00:04:51,720
All of them must have exactly four numeric digits after the hyphen.

59
00:04:52,200 --> 00:04:59,400
If we put two numeric digits separated by commas inside the brackets instead, the number of repetitions

60
00:04:59,400 --> 00:04:59,910
can be.

61
00:04:59,980 --> 00:05:01,420
Between those limits.

62
00:05:01,660 --> 00:05:05,440
If we write this, all these examples can be accepted.

63
00:05:05,950 --> 00:05:11,620
And if in the square brackets, we put a number with the comma and then we do not put a second digit.

64
00:05:11,620 --> 00:05:18,800
This means that the number of characters can go upwards from that number as a minimum without limits.

65
00:05:18,820 --> 00:05:20,350
For a pattern like this.

66
00:05:20,380 --> 00:05:22,480
All these examples would be valid.

67
00:05:23,620 --> 00:05:26,560
The asterisk means zero or more.

68
00:05:26,650 --> 00:05:32,440
That is to say, it serves as an indeterminate number of repetitions, which includes the possibility

69
00:05:32,440 --> 00:05:34,090
that it does not even appear.

70
00:05:34,270 --> 00:05:41,980
So if we create a pattern like this, it allows that space to exist one many or no times at all.

71
00:05:42,550 --> 00:05:44,280
And finally, the question mark.

72
00:05:44,290 --> 00:05:48,700
This sign is used for a character to appear once or none.

73
00:05:48,820 --> 00:05:51,730
What is the most common use of this quantifier?

74
00:05:51,910 --> 00:05:59,290
When a word is either singular or plural, placing the question mark after the TSS allows that letter

75
00:05:59,290 --> 00:06:00,680
to appear or not.

76
00:06:00,700 --> 00:06:07,030
And this is used to validate words that we do not know if they will appear in singular or plural form.

77
00:06:07,360 --> 00:06:08,090
Whew.

78
00:06:08,170 --> 00:06:09,880
A lot of information, isn't it?

79
00:06:09,970 --> 00:06:11,670
Don't try to memorize it.

80
00:06:11,680 --> 00:06:13,750
Let's avoid learning overload.

81
00:06:13,750 --> 00:06:20,050
I just want you to be aware that these resources exist and that you look up this information and use

82
00:06:20,050 --> 00:06:22,920
it whenever you need those resources.

83
00:06:22,930 --> 00:06:25,540
Maybe you will remember it over time.

84
00:06:25,540 --> 00:06:26,440
Maybe not.

85
00:06:26,470 --> 00:06:31,480
The important thing is not that you have a library in your head, but you know where to look.

86
00:06:31,780 --> 00:06:34,690
Shall we go over to pie chart to see how this works in code?

87
00:06:35,020 --> 00:06:35,830
Let's do it.

88
00:06:37,060 --> 00:06:39,400
Let's start with this text I wrote earlier.

89
00:06:39,610 --> 00:06:42,150
It's a variable that stores the sentence.

90
00:06:42,160 --> 00:06:48,130
If you need help, call this number any time for online help.

91
00:06:49,240 --> 00:06:52,900
Now have a look at how we would do a search with what we have so far.

92
00:06:53,470 --> 00:06:57,090
I can have a variable called word that stores the result.

93
00:06:57,090 --> 00:07:03,340
That tells us if the word help is in the text, that is help in text.

94
00:07:03,880 --> 00:07:05,740
We already knew how to do this.

95
00:07:06,470 --> 00:07:11,000
If I print the result of word, it will tell me it is true.

96
00:07:11,630 --> 00:07:13,910
The word help is in this text.

97
00:07:14,510 --> 00:07:17,390
So how will we do it with regular expressions?

98
00:07:17,480 --> 00:07:24,500
First, let's make some space so we can import our E for regular expressions and rewrite all this to

99
00:07:24,500 --> 00:07:26,180
create a variable called pattern.

100
00:07:27,230 --> 00:07:29,600
This variable will have a very simple value.

101
00:07:30,080 --> 00:07:33,500
I type in a word that is not in the phrase, it's just pencil.

102
00:07:34,070 --> 00:07:39,960
And then we're going to create the search through a variable called search, which is equal to our e

103
00:07:39,980 --> 00:07:41,120
dot search.

104
00:07:42,080 --> 00:07:43,370
So what do we search?

105
00:07:43,400 --> 00:07:47,990
Well, we do a search using two arguments, the pattern.

106
00:07:48,350 --> 00:07:50,360
And now we look for the text.

107
00:07:51,500 --> 00:07:56,720
Now we print our search and it will tell us that the word pencil is not found in the text.

108
00:07:57,410 --> 00:08:01,070
So the object returned is none a non object.

109
00:08:01,130 --> 00:08:09,020
If I search for the word help which does exist, we get that there's an object r e dot match which gives

110
00:08:09,020 --> 00:08:10,370
us some more data.

111
00:08:10,970 --> 00:08:18,260
It tells us that the span goes from index 12 to index 16 and it also tells us that match is equal to

112
00:08:18,260 --> 00:08:18,830
help.

113
00:08:19,190 --> 00:08:23,300
This has been very simple, using a pattern as easy as searching for a word.

114
00:08:23,450 --> 00:08:27,260
So note that search is a type of regular expression object.

115
00:08:27,860 --> 00:08:31,610
So if we put Dot here, we have a few more things to find.

116
00:08:32,690 --> 00:08:38,690
So if, for example, we search for span, what we're going to see is just the location of the word

117
00:08:38,690 --> 00:08:39,320
found.

118
00:08:39,590 --> 00:08:44,930
If instead of span, we apply the START method, it returns the location of the beginning.

119
00:08:45,710 --> 00:08:49,880
And if we search for end logically, it will give us the location of the end.

120
00:08:50,910 --> 00:08:53,910
But notice that our text has the word help twice.

121
00:08:53,910 --> 00:08:55,620
First here and then here.

122
00:08:56,100 --> 00:08:59,940
But when I search for this word, I found only the first occurrence of help.

123
00:09:00,240 --> 00:09:06,990
If I want to find more than one instead of search, what we're going to search for is find all so that

124
00:09:06,990 --> 00:09:10,410
what we get now is a list with the two occurrences of the word help.

125
00:09:11,640 --> 00:09:13,590
And this indeed is a list.

126
00:09:14,160 --> 00:09:18,780
If I want to know the length of this list, I can do it with the method Len of search.

127
00:09:19,320 --> 00:09:22,140
And it will tell me that the list has two elements.

128
00:09:22,770 --> 00:09:27,630
If I want to access each of these findings, instead of printing the length of search, what I would

129
00:09:27,630 --> 00:09:39,530
do the following for each finding in our e dot find ETA and the argument that find ETA asks for are

130
00:09:39,600 --> 00:09:41,370
the pattern and the text.

131
00:09:44,090 --> 00:09:50,510
And with each one that it finds what it prints finding span which was the location.

132
00:09:51,470 --> 00:09:58,700
What we should delete here is this since we no longer need it and we execute it and we have the two

133
00:09:58,700 --> 00:10:06,860
locations of the two elements of our list which was iterated until it found the word help twice so far.

134
00:10:06,860 --> 00:10:08,780
These are the basics to use a pattern.

135
00:10:09,140 --> 00:10:13,340
But now we'll see how to build special or more abstract patterns.

136
00:10:13,760 --> 00:10:20,150
To start with, let's write here only a text that says Call two and any number that has a telephone

137
00:10:20,150 --> 00:10:21,080
number format.

138
00:10:21,470 --> 00:10:27,650
And we finish the phrase with right now, and this is the text where we're going to search for if a

139
00:10:27,650 --> 00:10:28,850
number exists.

140
00:10:29,270 --> 00:10:35,750
So now we ask for the pattern to not be simply a word or a specific number, but any number that meets

141
00:10:35,750 --> 00:10:40,580
this format, three digits, hyphen three digits, hyphen four digits.

142
00:10:41,840 --> 00:10:43,300
And how do we construct it?

143
00:10:43,310 --> 00:10:49,130
First, we let our program know with the letter R that what follows now is a special string.

144
00:10:49,520 --> 00:10:55,880
It is not a normal string, nor is it a string literal, and that the characters you find here should

145
00:10:55,880 --> 00:10:59,060
be treated as the characters of a regular expression pattern.

146
00:10:59,270 --> 00:11:02,000
So what we're going to look for is three digits.

147
00:11:02,240 --> 00:11:10,640
We do it with backslash and the letter D, three times A hyphen backslash and D three more times and

148
00:11:10,640 --> 00:11:13,280
another hyphen and four more times.

149
00:11:13,280 --> 00:11:14,900
The backslash with D.

150
00:11:16,180 --> 00:11:21,850
And now it's time to construct a search in the result variable that is equal to our search.

151
00:11:22,660 --> 00:11:28,480
And what we search for here is the pattern that we have constructed within the text that we have written.

152
00:11:29,710 --> 00:11:36,340
We print the result so we can see it on screen, and once we run it, it tells us that it has found

153
00:11:36,340 --> 00:11:43,990
an element that matches this pattern, which goes from position 8 to 20, and that is this number that

154
00:11:43,990 --> 00:11:44,800
we have here.

155
00:11:45,490 --> 00:11:47,230
Observe something interesting.

156
00:11:47,860 --> 00:11:54,940
If I change the number, let's put here another different number I run and it still finds them because

157
00:11:54,940 --> 00:11:59,980
what it looks for is not a particular number, but any number that respects this format.

158
00:12:00,610 --> 00:12:06,700
And if I change, for example, the amount of numbers and here in the middle I put one more digit.

159
00:12:07,300 --> 00:12:12,910
Now it will not find anything because this number does not follow this format that asks for three digits

160
00:12:12,910 --> 00:12:13,600
in the middle.

161
00:12:14,290 --> 00:12:15,880
So let's leave it as before.

162
00:12:17,540 --> 00:12:24,590
And another interesting aspect is that if we put DOT Group, which is another method, what we get is

163
00:12:24,590 --> 00:12:27,440
the phone number that this search gave us as a result.

164
00:12:29,220 --> 00:12:34,140
We can search for quantifies, as you've seen in the introductory video.

165
00:12:34,830 --> 00:12:40,380
So instead of repeating three, ten or 100 times the special characters, we can quantify them.

166
00:12:41,010 --> 00:12:46,620
If instead of putting it three times, we put a bracket that says that this digit has to appear three

167
00:12:46,620 --> 00:12:47,340
times.

168
00:12:47,550 --> 00:12:50,160
And this has to appear also three times.

169
00:12:50,730 --> 00:12:53,280
And that this has to appear four times.

170
00:12:53,490 --> 00:12:54,960
And surprise.

171
00:12:54,990 --> 00:13:01,200
This will also give a positive result because quantifies allow us to make this line shorter and simpler.

172
00:13:01,620 --> 00:13:07,680
We can also ask this pattern to be compiled by transforming an object or recompile.

173
00:13:07,920 --> 00:13:09,600
And I enclose each of these groups.

174
00:13:09,600 --> 00:13:11,370
I enclose in parentheses.

175
00:13:12,300 --> 00:13:16,920
There should be three groups of three, three and four digits.

176
00:13:17,520 --> 00:13:22,080
Now, when I print it this way, looking for the group of results, I get the same.

177
00:13:22,770 --> 00:13:24,930
So far this does not tell you anything.

178
00:13:24,930 --> 00:13:30,540
But if instead of empty group, we pass the argument to, for example, I will see the second of the

179
00:13:30,540 --> 00:13:33,870
groups, which is the one that has these numbers.

180
00:13:34,410 --> 00:13:39,660
If I had asked for the first of the groups, I would have seen these ones and thus I could obtain.

181
00:13:39,660 --> 00:13:44,580
The different groups are constructed through a regular expression variable which is compiled.

182
00:13:44,970 --> 00:13:49,470
Note that here the search indexes start at one and not at zero.

183
00:13:49,710 --> 00:13:50,820
As usual in Python.

184
00:13:51,690 --> 00:13:53,820
Any practical use for all of this?

185
00:13:54,060 --> 00:13:55,110
There are many.

186
00:13:55,140 --> 00:14:00,420
For example, your user is going to generate a password and you want to check if the password meets

187
00:14:00,420 --> 00:14:01,440
some conditions.

188
00:14:01,740 --> 00:14:08,280
For example, that the password starts with a letter instead of a number and has eight characters.

189
00:14:08,640 --> 00:14:16,500
Well, let's create a variable password that is equal to the user's input and which asks the user for

190
00:14:16,500 --> 00:14:17,490
something simple.

191
00:14:17,850 --> 00:14:18,750
Password.

192
00:14:18,930 --> 00:14:19,650
Colon.

193
00:14:21,480 --> 00:14:26,910
After that, we create a pattern that is going to control what format the user's password should have.

194
00:14:28,020 --> 00:14:33,120
First we want to put the R letter in order to indicate that this is going to be a pattern which should

195
00:14:33,120 --> 00:14:34,980
start with a letter, not a number.

196
00:14:36,420 --> 00:14:42,510
We're going to put a backslash and capital D, which is what assures us that it is not a digit.

197
00:14:42,750 --> 00:14:49,650
But since we want it to only check this taking into account the first datum, we're going to put a bracket

198
00:14:49,650 --> 00:14:54,480
and one to give the order that it should repeat the progress just once.

199
00:14:54,900 --> 00:14:59,160
Plus, it is going to have seven more numbers because there are eight characters.

200
00:14:59,490 --> 00:15:06,120
So we're going to put Backslash and W, which is an alphanumeric character and set this process.

201
00:15:06,120 --> 00:15:09,540
So it repeats itself exactly seven times and that's it.

202
00:15:10,140 --> 00:15:14,940
We already have the password that the user will generate and the pattern to control it.

203
00:15:15,420 --> 00:15:23,160
What follows is the variable check, which should be equal to our search, and we should look for pattern

204
00:15:23,160 --> 00:15:27,580
in password, and then we print it and run it.

205
00:15:27,600 --> 00:15:29,730
And finally, we're asked for the password.

206
00:15:30,750 --> 00:15:31,200
First.

207
00:15:31,200 --> 00:15:32,620
Let's do it the wrong way.

208
00:15:32,640 --> 00:15:36,280
We start with a number and then we type in the right number of letters.

209
00:15:36,300 --> 00:15:43,020
One, two, three, four, five, six, seven is going to tell us that there are no match because even

210
00:15:43,020 --> 00:15:48,060
though the password has the number of letters we asked for one and seven, it doesn't start with the

211
00:15:48,060 --> 00:15:48,600
letter.

212
00:15:48,990 --> 00:15:52,440
We will try again, but this time we're going to start with a letter.

213
00:15:52,530 --> 00:15:53,280
The E.

214
00:15:53,640 --> 00:15:57,330
However, we will introduce less letters than we are asked for.

215
00:15:58,380 --> 00:16:00,960
I press enter and no matches again.

216
00:16:01,940 --> 00:16:04,160
Okay, let's execute it one more time.

217
00:16:04,170 --> 00:16:06,090
And now we start with a letter.

218
00:16:06,810 --> 00:16:09,910
We can add letters and numbers seven more times.

219
00:16:09,930 --> 00:16:12,660
I will add three numbers and four letters.

220
00:16:13,290 --> 00:16:17,640
This does work since it finds a match which is returned so that I can see it.

221
00:16:18,690 --> 00:16:22,950
This is one way of checking if a user's input meets certain conditions.

222
00:16:23,340 --> 00:16:27,960
And just as we have special characters and quantifies, we also have special operators.

223
00:16:28,410 --> 00:16:29,910
Let's take a look at some of them.

224
00:16:30,090 --> 00:16:36,960
So delete this and please and write a text that reads the following message Saturday and Sunday.

225
00:16:36,990 --> 00:16:39,030
This door is closed.

226
00:16:39,720 --> 00:16:46,440
So here we're going to search if our search can be found and pay attention to this.

227
00:16:46,740 --> 00:16:53,100
We build a pattern with the letter R and we're going to check if here we can find the word Sunday or

228
00:16:53,100 --> 00:16:56,600
the word Monday observed.

229
00:16:56,610 --> 00:17:03,990
If I put this vertical bar, which means or the option option or this or that, and which indicates

230
00:17:03,990 --> 00:17:06,930
that either Sunday or Monday can be searched.

231
00:17:07,140 --> 00:17:09,240
So where are they going to be searched?

232
00:17:09,240 --> 00:17:10,710
In text, of course.

233
00:17:11,640 --> 00:17:17,760
To begin with, we create a print of search and see what happens here and it tells me that there is

234
00:17:17,760 --> 00:17:18,420
a match.

235
00:17:18,690 --> 00:17:21,330
Sun has been found in this location.

236
00:17:22,530 --> 00:17:28,530
If the text said Monday it would still work because it looks for Sunday or Monday either one.

237
00:17:29,100 --> 00:17:35,640
But if it says Tuesday this time there is no match the special operator or allows you to look for different

238
00:17:35,640 --> 00:17:37,050
words in your searches.

239
00:17:37,800 --> 00:17:40,590
It can also be used when you have to search for plurals.

240
00:17:40,590 --> 00:17:45,300
For example, here you can introduce house or houses without any problems.

241
00:17:45,870 --> 00:17:47,760
We also have the wildcard.

242
00:17:47,880 --> 00:17:50,040
So let's change this here.

243
00:17:50,040 --> 00:17:56,040
And for example, look for the word lose and lose is inside closed.

244
00:17:56,940 --> 00:18:02,700
So if we print it, it finds the lose fragment in that location.

245
00:18:03,540 --> 00:18:07,320
But then we have the wildcard letters which appear with a dot.

246
00:18:07,980 --> 00:18:13,530
So if I type in a dot here, I will also include whatever letter number, sign or space that has been

247
00:18:13,530 --> 00:18:14,670
previously included.

248
00:18:15,690 --> 00:18:24,720
It shows me close now and if I put three more dots here, I will get the expression is close and if

249
00:18:24,720 --> 00:18:29,160
I add a dot after an execute, I'm going to get is closed.

250
00:18:30,530 --> 00:18:32,930
So let's look at some special operators.

251
00:18:33,230 --> 00:18:40,130
We also have the circumflex accent, which is a sort of little arrow pointing up, which you probably

252
00:18:40,130 --> 00:18:42,860
have above the six on your keyboard.

253
00:18:43,580 --> 00:18:48,530
This will allow us to verify whether a pattern is at the beginning of the string.

254
00:18:49,280 --> 00:18:55,580
So if we put here a backslash and a capital D to indicate that it does not have to be a digit and we

255
00:18:55,580 --> 00:18:59,660
execute this, the s which is not a digit is found.

256
00:19:00,920 --> 00:19:06,680
If our tech started with the number four and we run it, there wouldn't be any matches because a non

257
00:19:06,680 --> 00:19:09,680
digit would not be found at the beginning of our string.

258
00:19:10,100 --> 00:19:14,850
We delete it and a sign similar to this in terms of its function.

259
00:19:14,870 --> 00:19:18,350
Is this currency sign that we type after the special character.

260
00:19:18,710 --> 00:19:25,160
This sign will check what is before the sign will check if there is not a digit at the end of our string.

261
00:19:25,790 --> 00:19:33,020
If we execute it, there will be a match the letter D and if we put a six here and we execute it, no

262
00:19:33,020 --> 00:19:38,540
matches will be found because the six is a digit which does not fulfil the condition of the pattern.

263
00:19:39,050 --> 00:19:41,360
And finally, one more special character.

264
00:19:41,570 --> 00:19:45,530
These are the straight braces with the circumflex accent inside.

265
00:19:46,010 --> 00:19:49,760
Whatever we include here means that the pattern must exclude it.

266
00:19:49,880 --> 00:19:55,790
So for example, let's put the backslash with the SE which stands for empty spaces.

267
00:19:56,570 --> 00:20:03,350
Then instead of search, we enter find all which is going to find the ones that exclude an empty character,

268
00:20:03,350 --> 00:20:04,430
an empty space.

269
00:20:04,940 --> 00:20:09,470
And if we run it here, we have all the characters that are not empty spaces.

270
00:20:09,680 --> 00:20:11,300
It has excluded them all.

271
00:20:12,950 --> 00:20:19,280
I will show you one more alternative, which is to put at the end the plus sign, which serves to indicate

272
00:20:19,280 --> 00:20:20,930
one or more times.

273
00:20:21,350 --> 00:20:26,150
Then it will look for all the characters, regardless of how many times they are repeated.

274
00:20:26,180 --> 00:20:32,150
And it will build a list of words this time, because every time it finds an empty space, it will separate

275
00:20:32,150 --> 00:20:33,230
the elements of the group.

276
00:20:33,500 --> 00:20:35,690
And here we have all the words.

277
00:20:36,380 --> 00:20:42,170
And if at the end, when I print it, instead of putting search, I apply the string strategy, which

278
00:20:42,170 --> 00:20:49,610
is to put two quotation marks and join so that everything there is and what is found in search is joined.

279
00:20:50,360 --> 00:20:51,440
And we print it.

280
00:20:51,440 --> 00:20:56,030
And here we have a text again, but this time without the empty spaces.

281
00:20:57,080 --> 00:20:58,580
So there is a lot you can do.

282
00:20:58,610 --> 00:21:00,680
Please check out the documentation.

283
00:21:00,830 --> 00:21:06,380
Regular expressions are very useful and you will find that you need them sooner or later.

284
00:21:06,830 --> 00:21:12,470
I strongly recommend you go over them, or at least have them in mind so that when you need them you

285
00:21:12,470 --> 00:21:14,090
can use them to your advantage.

286
00:21:14,420 --> 00:21:15,740
See you in the next lesson.
