WEBVTT
1
00:00:07.790 --> 00:00:08.600
For this lesson.

2
00:00:08.600 --> 00:00:12.500
We're going to learn how to explore different pages on the same website.

3
00:00:12.860 --> 00:00:15.500
So keep in mind that every website is different.

4
00:00:15.500 --> 00:00:18.650
Hence, every code of web scraping will also be different.

5
00:00:19.310 --> 00:00:24.890
We'll just be using this as an example so that you learn how to think and figure things out when scraping

6
00:00:24.890 --> 00:00:25.490
webs.

7
00:00:26.060 --> 00:00:33.020
The fact is that if we need to search in different pages of this catalog and we're in page number two,

8
00:00:33.050 --> 00:00:37.340
we have to spot the differences in the URL when entering another page.

9
00:00:38.330 --> 00:00:46.250
So as we can see, the link to page number two is books to scrape catalog page two.

10
00:00:46.940 --> 00:00:49.520
That is page two dot HTML.

11
00:00:50.090 --> 00:00:52.280
This may be the answer we're looking for.

12
00:00:52.910 --> 00:00:58.250
So if we go to the next page, which is number three, we can see that the link remains the same, but

13
00:00:58.250 --> 00:01:00.890
it contains number three instead of two.

14
00:01:01.460 --> 00:01:08.300
So now we can create a loop that changes only the page number and let us check the search results.

15
00:01:09.140 --> 00:01:14.840
So let's copy this link and now go to pie chart and paste it there for now.

16
00:01:15.710 --> 00:01:21.890
Let's import beautiful soup for and requests since we're going to need them.

17
00:01:23.540 --> 00:01:30.500
So now we have our URL and remember that this is a string so we can work with string literals.

18
00:01:31.160 --> 00:01:39.380
So let's create a variable named basic URL which will be equal to this site, which will convert to

19
00:01:39.380 --> 00:01:40.010
a string.

20
00:01:40.880 --> 00:01:41.360
So what?

21
00:01:41.360 --> 00:01:47.600
We want to be changed in each iteration when searching each page is this value here.

22
00:01:48.260 --> 00:01:53.870
So we'll replace the page number with a pair of curly brackets, which will leave empty.

23
00:01:54.830 --> 00:02:01.010
So this is the foundation on which we're going to build all the URLs of each page in the catalog.

24
00:02:01.910 --> 00:02:05.390
So let me demonstrate, just so you know how this works.

25
00:02:06.050 --> 00:02:15.260
If I print basic URL and put dot format and 15 between the curly brackets and I execute it, I'll get

26
00:02:15.350 --> 00:02:18.260
a URL reading page 15.

27
00:02:19.910 --> 00:02:24.110
As a result, we can use this link to get to that specific page.

28
00:02:24.950 --> 00:02:32.430
So let's delete this example and inside our code we could say that for each pea in a range from 1 to

29
00:02:32.430 --> 00:02:34.550
10, let's enter 11.

30
00:02:34.850 --> 00:02:41.690
This loop will print basic URL format and let's put P between brackets.

31
00:02:43.100 --> 00:02:47.900
So we're printing this will receive all the URLs from pages 1 to 10.

32
00:02:48.680 --> 00:02:52.520
So this is one way to scrape several websites all at once.

33
00:02:52.610 --> 00:02:55.310
So this was just a conceptual basis.

34
00:02:56.240 --> 00:03:01.790
For our next lesson, we'll have to manage to find the four and five star books in the HTML code.

35
00:03:01.910 --> 00:03:05.810
Then we'll use this characteristic to extract the titles.

36
00:03:06.500 --> 00:03:07.550
Let's go then.
