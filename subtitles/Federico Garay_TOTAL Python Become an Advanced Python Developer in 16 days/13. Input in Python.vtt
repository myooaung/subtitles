WEBVTT
1
00:00:07.770 --> 00:00:11.310
Welcome to the lecture about the input function.

2
00:00:11.970 --> 00:00:19.680
So far we have learned that we as programmers can display our information on the screen thanks to the

3
00:00:19.680 --> 00:00:20.700
print statement.

4
00:00:21.360 --> 00:00:29.040
But what if we want the end user of the program we are going to create to be able to enter their own

5
00:00:29.040 --> 00:00:29.850
information?

6
00:00:30.540 --> 00:00:37.440
There is a function to ask the user to type something and then be able to display that information or

7
00:00:37.440 --> 00:00:39.960
store it to do something with it.

8
00:00:40.410 --> 00:00:45.780
For example, if we want to ask for the user's name, we say input your name.

9
00:00:46.560 --> 00:00:55.020
So the input structure is very simple, the keyword input, and then the explanation or request in parentheses

10
00:00:55.290 --> 00:00:59.730
so that the user understands what he or she is expected to enter.

11
00:01:00.480 --> 00:01:04.680
This explanation must be in quotation marks, double or single.

12
00:01:04.680 --> 00:01:05.430
It doesn't matter.

13
00:01:05.970 --> 00:01:11.910
Hence this responds to all characteristics of a string that we have learned in the previous lesson.

14
00:01:12.180 --> 00:01:16.350
And what is the system going to do with the information entered by the user?

15
00:01:16.920 --> 00:01:20.730
For now, it is going to retain it so that we can do something with it.

16
00:01:21.300 --> 00:01:26.310
In the next lectures, we will learn how to store this information to use it as we please.

17
00:01:26.310 --> 00:01:32.070
Later, however, in this lecture we are going to learn how to print that information on the screen.

18
00:01:32.610 --> 00:01:40.680
How enclosing this input statement inside the print statement, do you remember I told you that print

19
00:01:40.680 --> 00:01:44.670
can print not only text and numbers but also functions?

20
00:01:45.330 --> 00:01:53.670
Well, what we are saying now is please python print what the user enters after asking for his or her

21
00:01:53.670 --> 00:01:54.000
name.

22
00:01:54.450 --> 00:01:57.720
How about we go to py time right now to see this in action?

23
00:01:59.230 --> 00:02:03.560
So here we are in pitch and we're going to start testing this input function.

24
00:02:04.060 --> 00:02:06.340
We're going to eliminate what we've had from before.

25
00:02:06.340 --> 00:02:09.580
And I'm going to show you first how it would work with print.

26
00:02:10.480 --> 00:02:15.570
So if I asked someone for their first name and then their last name, for example, I can put print.

27
00:02:16.360 --> 00:02:19.360
So we open the brackets and then we open quotation marks.

28
00:02:19.390 --> 00:02:20.470
Tell me your name.

29
00:02:21.220 --> 00:02:26.620
I'm going to put a colon and then a space so that the cursor is blinking one space away from the colon.

30
00:02:27.310 --> 00:02:29.320
Let's create the other line right here.

31
00:02:29.740 --> 00:02:33.160
Print open the brackets and the quotation marks.

32
00:02:33.190 --> 00:02:37.060
Tell me your last name and also the colon and leave it there.

33
00:02:37.600 --> 00:02:39.520
If I run this, I'm going to show you that.

34
00:02:39.520 --> 00:02:44.800
Also, to make it faster, you don't need to go to the Green Triangle that we have here or to the running

35
00:02:44.800 --> 00:02:45.310
search.

36
00:02:45.820 --> 00:02:48.910
But we also have the keyboard shortcut shift and F10.

37
00:02:50.060 --> 00:02:51.080
So we're going to do that.

38
00:02:51.140 --> 00:02:55.490
We're going to press shift and turn on the keyboard, and this makes it run automatically.

39
00:02:56.860 --> 00:02:57.940
And this just prints.

40
00:02:58.150 --> 00:02:59.020
Tell me your name.

41
00:02:59.170 --> 00:03:00.220
Tell me your last name.

42
00:03:00.760 --> 00:03:04.360
And here it says that the execution of a code is finished.

43
00:03:05.330 --> 00:03:07.550
In other words, I'm no longer in the code.

44
00:03:08.000 --> 00:03:10.010
If I want to write something here, I cannot.

45
00:03:10.670 --> 00:03:11.690
I'm trying to do it.

46
00:03:11.690 --> 00:03:17.330
And if it is not possible because the code is finished, how is this going to change when I write the

47
00:03:17.330 --> 00:03:18.440
input function here?

48
00:03:19.070 --> 00:03:20.360
So let's put it in both.

49
00:03:21.310 --> 00:03:23.080
Input here as well.

50
00:03:23.920 --> 00:03:29.650
Now I have two input functions that, as you can see, what we put inside the brackets is the prompt.

51
00:03:30.190 --> 00:03:33.340
That is a title that tells us the user what to type.

52
00:03:34.030 --> 00:03:39.310
So let's run this with shift that F10 and notice that the difference is now it says Tell me your name.

53
00:03:39.940 --> 00:03:42.610
The system is not executed at the end of the code.

54
00:03:42.880 --> 00:03:47.740
It hasn't even shown me the second line, the one that says Tell me your last name, because now it's

55
00:03:47.740 --> 00:03:52.840
waiting for the user to do something unlike print, which doesn't wait for the user to do anything.

56
00:03:53.820 --> 00:03:57.570
So I click here and I'm going to say, my name is Federico.

57
00:03:58.500 --> 00:03:59.520
We hit enter.

58
00:04:00.510 --> 00:04:02.400
Then they asked for my last name.

59
00:04:02.850 --> 00:04:04.410
My last name is Gary.

60
00:04:05.160 --> 00:04:10.860
And when I hit Enter, then the code and the system waits for me to do something and does not execute

61
00:04:10.860 --> 00:04:14.010
the following lines because input waits for an input.

62
00:04:14.100 --> 00:04:16.110
And this is very important to understand.

63
00:04:16.830 --> 00:04:18.820
Now, I've already entered my name.

64
00:04:19.290 --> 00:04:21.090
And what did the system do with it?

65
00:04:21.630 --> 00:04:22.800
It basically forgot it.

66
00:04:23.070 --> 00:04:23.910
It didn't do anything.

67
00:04:24.240 --> 00:04:29.880
If I now wanted the system to know my first name or my last name, it doesn't know it because it hasn't

68
00:04:29.880 --> 00:04:34.380
finished the function and it doesn't store it anywhere and it didn't show it on the screen.

69
00:04:35.160 --> 00:04:39.660
Hey, what we see on the screen is what I entered, but not what the system has.

70
00:04:40.380 --> 00:04:45.150
Well, one way to do this would be to incorporate it inside a print statement.

71
00:04:45.870 --> 00:04:52.440
So if I enclose all of this inside print, as we saw in the explanation at the beginning of this lecture,

72
00:04:53.430 --> 00:04:54.990
we're going to put print here.

73
00:04:55.980 --> 00:05:01.560
We're going to select the whole input function, and we're going to press the opening brackets.

74
00:05:02.340 --> 00:05:05.370
And this automatically creates the closing brackets as well.

75
00:05:06.640 --> 00:05:10.240
Observe what is going to happen now if I run this.

76
00:05:11.620 --> 00:05:13.300
They say, tell me your name.

77
00:05:14.050 --> 00:05:15.970
I'm going to put here Federico.

78
00:05:16.360 --> 00:05:21.910
I hit enter and after appeared here as I wrote it it showed it on the screen.

79
00:05:22.270 --> 00:05:22.660
Why?

80
00:05:23.850 --> 00:05:27.330
That's because executed in the order from the inside out.

81
00:05:28.510 --> 00:05:35.860
First the input and once I entered it, then just then I continue typing the print and I printed whatever

82
00:05:35.860 --> 00:05:36.340
I typed.

83
00:05:37.500 --> 00:05:43.320
And this is one way of displaying if I want to display a sentence with my name on it, can I do that?

84
00:05:44.810 --> 00:05:48.920
But remember that we can concatenate inside print.

85
00:05:50.030 --> 00:05:54.980
Then I can put here that what Prince says is in quotes.

86
00:05:55.250 --> 00:05:56.120
Your name is.

87
00:05:56.780 --> 00:05:57.800
I leave a space.

88
00:05:58.070 --> 00:05:59.120
Close the quotes.

89
00:05:59.540 --> 00:06:01.340
Put the plus to concatenate.

90
00:06:02.630 --> 00:06:04.550
And what follows is the input.

91
00:06:05.750 --> 00:06:07.710
And this input doesn't need quotes.

92
00:06:07.730 --> 00:06:12.350
So the idea is that I can form a sentence here with what the user enters.

93
00:06:12.830 --> 00:06:14.420
So we run that as well.

94
00:06:15.530 --> 00:06:17.060
It says, Tell me your name.

95
00:06:17.480 --> 00:06:18.110
I write it.

96
00:06:18.830 --> 00:06:20.030
Your name is Federico.

97
00:06:21.200 --> 00:06:27.470
The sequence of concatenation that included both a text and a function was completely executed.

98
00:06:28.070 --> 00:06:30.470
I would also like to tell you my last name.

99
00:06:30.980 --> 00:06:32.870
Then I put your name is.

100
00:06:34.560 --> 00:06:36.930
Let's put another concatenation here.

101
00:06:37.530 --> 00:06:39.300
I want the space to be generated.

102
00:06:39.600 --> 00:06:45.870
So I open the quotation marks and leave a blank space inside so that there is a separation between the

103
00:06:45.870 --> 00:06:47.640
first name and the last name.

104
00:06:48.390 --> 00:06:53.640
Now I'm going to ask for the last name input and in the brackets and in quotes.

105
00:06:53.850 --> 00:06:56.640
Tell me your last name, the colon and the space.

106
00:06:57.360 --> 00:07:01.320
And what before we run this and try to imagine what's going to appear here?

107
00:07:02.540 --> 00:07:04.730
We have a print command, so we tell it.

108
00:07:04.730 --> 00:07:06.710
Please print the following expression.

109
00:07:07.070 --> 00:07:07.880
Your name is.

110
00:07:08.790 --> 00:07:15.900
Then please continue printing concatenating that with a user input which is going to be what the user

111
00:07:15.900 --> 00:07:17.400
responds to when we ask.

112
00:07:17.430 --> 00:07:18.330
Tell me your name.

113
00:07:19.520 --> 00:07:21.650
So that concatenate, please.

114
00:07:21.650 --> 00:07:22.400
With a space.

115
00:07:23.540 --> 00:07:29.720
A single space, then please concatenate with another user inputs if it's going to be what the user

116
00:07:29.720 --> 00:07:30.920
answers when we ask.

117
00:07:30.950 --> 00:07:31.940
Tell me your last name.

118
00:07:33.250 --> 00:07:34.300
It has logic to it.

119
00:07:34.930 --> 00:07:36.190
So let's see if it works.

120
00:07:36.790 --> 00:07:39.100
Let's run this with shift f ten.

121
00:07:40.880 --> 00:07:43.910
They asked me my name and the program does nothing more than that.

122
00:07:44.040 --> 00:07:44.810
It just waits.

123
00:07:45.440 --> 00:07:47.000
So I'm going to tell it again.

124
00:07:47.150 --> 00:07:48.620
My name is Federico.

125
00:07:49.840 --> 00:07:51.220
And we're going to hit enter.

126
00:07:51.640 --> 00:07:54.190
So it did not advance with the print out as it did before.

127
00:07:54.970 --> 00:08:00.250
Now he waits for me to continue giving him the information he needs to make the printout.

128
00:08:00.940 --> 00:08:02.770
And my last name is Gary.

129
00:08:03.720 --> 00:08:06.720
And now when I hit enter, it is fall.

130
00:08:06.930 --> 00:08:12.240
Your name is Federico Garay in perfect English, with perfect spaces between each of the words.

131
00:08:12.720 --> 00:08:18.660
The end user, when he sees the sentence, cannot distinguish if it is a string or if it is composed

132
00:08:18.810 --> 00:08:20.400
of a contamination.

133
00:08:20.520 --> 00:08:27.060
So as worked as expected sometimes, and although it's not necessary, you can also enclose these inputs

134
00:08:27.060 --> 00:08:32.730
within brackets just for the purposes of making it easier to read this concatenation.

135
00:08:33.150 --> 00:08:38.520
And visually, we can understand that there are some things here that are separate from the others.

136
00:08:39.120 --> 00:08:44.730
So again, thank you very much for joining me in this lecture and Phil will now be waiting for you in

137
00:08:44.730 --> 00:08:45.270
the next one.
