WEBVTT
1
00:00:07.860 --> 00:00:13.650
In this lecture, we are going to learn another method for strings manipulation, which will allow us

2
00:00:13.650 --> 00:00:15.530
to extract portions of text.

3
00:00:15.540 --> 00:00:21.840
In other words, you will be able to select a fragment of the string and store it in another variable.

4
00:00:22.140 --> 00:00:24.680
This operation is called slicing.

5
00:00:24.690 --> 00:00:30.870
This procedure is similar to the one we saw in the previous lecture to extract a character from its

6
00:00:30.870 --> 00:00:31.680
index.

7
00:00:32.040 --> 00:00:40.050
But if we now add a colon and a second index always greater than the previous one, we will obtain all

8
00:00:40.050 --> 00:00:42.990
the characters that fall within these limits.

9
00:00:43.560 --> 00:00:50.400
The first number indicates the index where we will start extracting our fragment, and the second number

10
00:00:50.400 --> 00:00:54.570
indicates where our fragment ends but doesn't include it.

11
00:00:54.990 --> 00:01:01.920
We can also include a third factor that allows us to set how many characters are snippet we'll select.

12
00:01:02.130 --> 00:01:06.420
We'd better go to PY Charm to see all the variations of this trick.

13
00:01:06.480 --> 00:01:12.480
And now from py charm we're going to learn the different variations for slicing our strings for that.

14
00:01:12.480 --> 00:01:18.060
First, we're going to create a variable called text in which we're going to load a string that is composed

15
00:01:18.060 --> 00:01:20.610
by the letters of the alphabet up to M.

16
00:01:21.150 --> 00:01:25.890
We're going to do it in capital letters so that they are better visualized and we're going to choose

17
00:01:25.890 --> 00:01:31.050
to do it with the letters in order so we can see easier for you to understand how it works.

18
00:01:31.230 --> 00:01:35.010
Now we're going to create a second variable that is going to be called fragment.

19
00:01:35.220 --> 00:01:39.780
This one will contain our text, but let's have the square braces with the index.

20
00:01:39.780 --> 00:01:40.290
Two.

21
00:01:40.770 --> 00:01:44.280
You already know how to do this, but follow me and let's print our fragment.

22
00:01:45.670 --> 00:01:52.060
If I run this, we come to run and run and we choose Slice, which is what the file is called.

23
00:01:52.180 --> 00:01:56.300
And here we have a capital C, which is index two of our string.

24
00:01:56.320 --> 00:01:57.190
Perfect.

25
00:01:57.220 --> 00:01:59.170
Now, let's start with the variations.

26
00:01:59.530 --> 00:02:01.630
I already know where I want to find my character.

27
00:02:01.630 --> 00:02:05.860
But what happens if I add here a colon and then, for example, the number five?

28
00:02:05.980 --> 00:02:11.560
What I'm doing is saying, I want you to extract all the characters that go from index to and up to,

29
00:02:11.560 --> 00:02:13.960
but not including index number five.

30
00:02:14.170 --> 00:02:19.600
So here we would have C and then DD would also come in because it was an index number three.

31
00:02:19.870 --> 00:02:25.810
Next would follow the E, which is in index number four and the F would not do it as it's in index five.

32
00:02:26.230 --> 00:02:30.110
And remember, that is until but not including this second factor.

33
00:02:30.130 --> 00:02:33.400
Then we could have C, the E and not the F.

34
00:02:33.430 --> 00:02:34.960
Let's see if we run it.

35
00:02:35.230 --> 00:02:36.490
C, d, e.

36
00:02:37.030 --> 00:02:37.590
Right.

37
00:02:37.600 --> 00:02:41.350
That's how we're going to extract a fragment or a slice of our strings.

38
00:02:42.010 --> 00:02:46.630
If you omit the second factor and leave just the colon, python is going to interpret that.

39
00:02:46.630 --> 00:02:49.300
You want to do it from index two to the end.

40
00:02:49.570 --> 00:02:52.920
Run it and see that this has extracted from C to M.

41
00:02:53.830 --> 00:02:58.810
Assumes that having the colon but omitting the second factor means as far as you can.

42
00:02:59.080 --> 00:03:04.210
If we do it the other way round, we're going to leave the first factor, empty colon and we're going

43
00:03:04.210 --> 00:03:07.180
to say five as the second factor.

44
00:03:07.210 --> 00:03:14.050
Here it will interpret extract from the very beginning of the string from index zero to but not including

45
00:03:14.050 --> 00:03:14.950
index five.

46
00:03:15.770 --> 00:03:19.160
We run it and we have a, B, C, D, E, OC.

47
00:03:19.250 --> 00:03:25.910
So we have these first two factors, right, to again, how we're going to make a second factor longer

48
00:03:26.480 --> 00:03:27.370
than is OC.

49
00:03:27.380 --> 00:03:31.160
So we're going to get a longer string and then we're going to include a third factor.

50
00:03:31.160 --> 00:03:36.650
As Phil showed you in the introductory part of this lecture, this third factor is going to tell Python

51
00:03:36.650 --> 00:03:40.520
how many characters it should count from the previous one to extract the next one.

52
00:03:40.670 --> 00:03:47.510
So if I say to here, just to pick a small number, we execute it and look what we've done from index

53
00:03:47.510 --> 00:03:50.450
number two to index number ten, but not including.

54
00:03:50.450 --> 00:03:55.220
It has taken the first character counted two to choose the next one and so on.

55
00:03:55.910 --> 00:04:02.030
So it took the C, it skipped the D, it took the E, it skipped the F and it took the G, it skipped

56
00:04:02.030 --> 00:04:08.090
the H and it took the I, skipped the J and it dropped the K because that's index ten.

57
00:04:08.720 --> 00:04:14.360
I could have said three here and this would make it skip three by three, which leaves us fewer and

58
00:04:14.360 --> 00:04:15.410
fewer characters.

59
00:04:15.710 --> 00:04:19.940
Or if we wanted to, we could leave the first and second factors empty.

60
00:04:20.270 --> 00:04:25.460
Then we say three here, and it would take all the characters that there are from the index zero to

61
00:04:25.460 --> 00:04:30.230
the last one, but skipping three by three and a curiosity.

62
00:04:30.380 --> 00:04:35.750
If we put here a negative number, for example, minus one and we execute it, we're going to obtain

63
00:04:35.750 --> 00:04:36.560
the whole chain.

64
00:04:36.560 --> 00:04:43.700
But in reverse, it's taken from the last number and one by one it has been going by the inverse order

65
00:04:43.700 --> 00:04:45.170
until arriving at the A.

66
00:04:46.030 --> 00:04:48.730
If we put here minus two, it would be the same thing.

67
00:04:49.370 --> 00:04:54.550
We'd have the same reverse order, but this time skipping one at a time and leaving the next one.

68
00:04:54.560 --> 00:04:56.900
So that's all about slices of your string.

69
00:04:56.930 --> 00:04:59.650
Don't miss the practical exercises that follow.

70
00:04:59.660 --> 00:05:04.910
And let's go to the next lecture to continue learning the elements that will allow us to build today's

71
00:05:04.910 --> 00:05:05.580
project.

72
00:05:05.600 --> 00:05:06.500
See you there.
