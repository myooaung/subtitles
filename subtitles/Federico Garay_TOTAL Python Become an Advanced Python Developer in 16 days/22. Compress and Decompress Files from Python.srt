1
00:00:08,010 --> 00:00:14,340
As you may already know, a compressed file is a file or set of files that have undergone a compression

2
00:00:14,340 --> 00:00:18,400
process to make them lighter and easier to transfer from one place to another.

3
00:00:18,420 --> 00:00:22,140
In Python, we can compress and decompress files programmatically.

4
00:00:22,140 --> 00:00:28,650
That is using only code and we can make use of two modules integrated to Python, such as the zip file

5
00:00:28,650 --> 00:00:32,450
module and our old and beloved shuttle module.

6
00:00:32,460 --> 00:00:37,410
Let's go to PY Charm to show you how to use them in order to do what we're going to do.

7
00:00:37,440 --> 00:00:40,860
First, I want to show you that inside the day nine folder.

8
00:00:41,040 --> 00:00:44,940
Python desktop, which I've already shown you on a couple of times.

9
00:00:45,480 --> 00:00:51,870
I have the Python files that I've been working with today and I also have two text files, my text A

10
00:00:51,870 --> 00:00:55,590
and my text B, which I can show you open here.

11
00:00:57,750 --> 00:00:59,490
They have a lot of text in Latin.

12
00:00:59,610 --> 00:01:01,050
They are just examples.

13
00:01:01,320 --> 00:01:06,720
I will leave them next to this option in case you want to download them to use them later.

14
00:01:06,960 --> 00:01:10,830
Or you can use any other file that you have or that you create yourself.

15
00:01:12,030 --> 00:01:16,920
And these two are the files that will learn how to compress and decompress.

16
00:01:17,730 --> 00:01:21,600
And as Phil told you in the introductory video, there are two ways to do it.

17
00:01:22,660 --> 00:01:28,900
To start with, you can use the zip file module, which we import, as you know, and then we create

18
00:01:28,900 --> 00:01:30,580
a variable called My Zip.

19
00:01:31,630 --> 00:01:37,510
This variable is the one that is going to contain the zip file object dot zip file.

20
00:01:38,320 --> 00:01:43,900
Observe that the second time we put zip file, the letters Z and F should be capitalized.

21
00:01:44,710 --> 00:01:47,410
Zip file will require two parameters.

22
00:01:47,770 --> 00:01:51,130
The first will be the name of the file we want to create.

23
00:01:51,340 --> 00:01:54,220
That is the file containing what we want to compress.

24
00:01:54,790 --> 00:01:58,030
This would be like the folder of the dot zip file.

25
00:01:59,310 --> 00:02:08,490
So let's name it with quotation marks of course file underscore compressed dot zip and the opening mode

26
00:02:08,490 --> 00:02:11,670
is going to be w so that we can modify it.

27
00:02:12,150 --> 00:02:14,190
That is to say to write in it.

28
00:02:14,610 --> 00:02:20,400
Actually, it is not that we are going to write, but to introduce the file to be compressed inside

29
00:02:20,400 --> 00:02:28,380
this zip folder, I will execute this first line, although it does not do much yet, but we can compress

30
00:02:29,370 --> 00:02:35,400
the console doesn't show anything, but in the folder de nine where I have my text A and my text B,

31
00:02:35,520 --> 00:02:43,800
I also have this new file which is a compressed file dot zip and which if we open it has nothing, we

32
00:02:43,800 --> 00:02:49,140
delete it because before this code finishes executing, I want to add to it the files that I want to

33
00:02:49,140 --> 00:02:49,890
compress.

34
00:02:51,050 --> 00:02:57,530
Now we call this object whose name is my zip and apply the right method to it.

35
00:02:58,130 --> 00:03:00,080
So what are we going to write in it?

36
00:03:00,590 --> 00:03:04,910
Well, the name of the file we want to compress and we want to put inside.

37
00:03:05,180 --> 00:03:08,960
We're going to write the first one, which is called My Text.

38
00:03:08,990 --> 00:03:11,120
A dot text.

39
00:03:11,480 --> 00:03:14,600
That's the name of the file that I will compress.

40
00:03:14,750 --> 00:03:20,840
And just as I did with this one, which when executed, it will be put inside my zip.

41
00:03:21,560 --> 00:03:25,100
I can also do the same by copying and pasting with my text.

42
00:03:25,100 --> 00:03:26,300
B text.

43
00:03:28,110 --> 00:03:31,080
Once we're done with this, let's call my zip again.

44
00:03:31,080 --> 00:03:34,170
But this time to close it with the closed method.

45
00:03:34,770 --> 00:03:36,960
So what happens if I run this now?

46
00:03:37,650 --> 00:03:43,410
Well, we won't see anything in the console, but in the folder we have this compressed file, which,

47
00:03:43,410 --> 00:03:49,710
if I click on it, I will find inside my text day and my text be compressed into one file.

48
00:03:50,700 --> 00:03:56,250
In fact, I can delete these original files to unzip them so that they appear in my folder again.

49
00:03:57,120 --> 00:03:59,250
To do so, we delete all of this.

50
00:03:59,250 --> 00:04:07,230
So to not generate the compressed file again and generate another variable which you can name open zip

51
00:04:07,740 --> 00:04:11,310
and which will be equal to zip file dot zip file.

52
00:04:12,060 --> 00:04:16,830
It will require us to specify which is the file we want to decompress.

53
00:04:17,340 --> 00:04:20,040
After that we write file compressed.

54
00:04:20,220 --> 00:04:23,310
Then the name it was given dot zip.

55
00:04:24,240 --> 00:04:28,080
And once I find it, it will open it in a read only mode.

56
00:04:28,380 --> 00:04:33,510
So for now, what we have done with this line is simply to create a variable that contains this zip

57
00:04:33,510 --> 00:04:37,770
file, which is called file compressed dot zip.

58
00:04:38,700 --> 00:04:40,260
Well, what's next?

59
00:04:40,710 --> 00:04:46,560
Now we call open zip, which we just created and apply the extract method.

60
00:04:47,040 --> 00:04:53,460
And I want you to observe that we have two options extract to extract one file at a time or extract

61
00:04:53,460 --> 00:04:55,410
all to extract all together.

62
00:04:55,800 --> 00:04:57,780
Do we have to put parameters here?

63
00:04:57,810 --> 00:04:59,670
Actually, it is not necessary.

64
00:04:59,670 --> 00:05:06,510
So we run it and we go back to our folder and here we have our unzipped files here which were not before.

65
00:05:07,770 --> 00:05:09,990
So delete compressed file again.

66
00:05:10,200 --> 00:05:15,720
And we have here are two files compressed and I want to show you another way to do compress files,

67
00:05:16,020 --> 00:05:23,700
this time with another module that is not zip file, but the old and well-known shuttle, which we have

68
00:05:23,700 --> 00:05:25,410
already used earlier today.

69
00:05:26,460 --> 00:05:32,910
Shuttle will allow us in a more practical way to compress all the files founded in a certain folder.

70
00:05:33,480 --> 00:05:37,560
Remember that shuttle lets us go through folders directory trees.

71
00:05:38,670 --> 00:05:40,650
It seems to be the appropriate one.

72
00:05:41,640 --> 00:05:44,820
We have to generate a new variable called source folder.

73
00:05:45,120 --> 00:05:48,840
This variable will contain the path of the file we want to compress.

74
00:05:49,680 --> 00:05:51,450
So let's go back to the desktop.

75
00:05:51,510 --> 00:05:57,420
Do you remember our top folder, the one we used when we dealt with shuttle today and in which we have

76
00:05:57,420 --> 00:05:58,740
this folder structure?

77
00:05:59,190 --> 00:06:04,200
Well, we're going to take advantage of this to see how shuttle can make the compressed file containing

78
00:06:04,200 --> 00:06:05,940
everything inside the top folder.

79
00:06:07,030 --> 00:06:15,580
First we create the path which is equal to C colon, double slash users, double slash when ten double

80
00:06:15,580 --> 00:06:19,190
slash desktop, double slash and finally top folder.

81
00:06:19,930 --> 00:06:25,420
We have to write it exactly like it is using uppercase and lowercase letters, everything.

82
00:06:26,200 --> 00:06:28,690
Note that in your case this will be different.

83
00:06:28,780 --> 00:06:34,390
You can work with any folder you want, choose one you want to compress or with several files and folders

84
00:06:34,390 --> 00:06:37,960
inside, and create the path that allows you to get to that folder.

85
00:06:38,320 --> 00:06:40,990
Because this path here only gets to mine.

86
00:06:41,320 --> 00:06:45,250
We need another variable which is going to be the destination file.

87
00:06:45,790 --> 00:06:49,000
This variable will contain the name of the folder generated.

88
00:06:49,000 --> 00:06:57,520
When we compress everything inside top folder, we can call it all compressed and finally we call shuttle

89
00:06:57,520 --> 00:06:59,050
dot makefile.

90
00:07:00,540 --> 00:07:02,460
And this will require some parameters.

91
00:07:02,880 --> 00:07:07,920
First, the base name, which is a string with which we name the destination file.

92
00:07:08,610 --> 00:07:11,820
This is why we created our variable destination file.

93
00:07:13,110 --> 00:07:20,850
Then it will ask us for a format, a zip one in quotes, and finally it will need the path or directory

94
00:07:20,850 --> 00:07:22,230
that we want to compress.

95
00:07:22,920 --> 00:07:27,630
Well, for that reason we created source folder which will call from here.

96
00:07:28,990 --> 00:07:34,420
So these are the three parameters that shuttle Makefile needs to create a compress file.

97
00:07:35,140 --> 00:07:37,120
So let's see what happens when we run it.

98
00:07:37,750 --> 00:07:39,550
Can't see anything in desktop.

99
00:07:39,790 --> 00:07:44,860
However, we will go to Python Day nine because this is where I'm working.

100
00:07:45,880 --> 00:07:51,190
Since I didn't put a full path here in destination file, it was created where I'm working with Python.

101
00:07:51,760 --> 00:07:55,990
If I had put a different path, this compressed file would have been created somewhere else.

102
00:07:56,440 --> 00:07:58,480
Here we have all compressed.

103
00:07:58,840 --> 00:08:03,010
We click on it and we see that it has the folder structure that corresponds.

104
00:08:03,310 --> 00:08:08,770
And when you open it there you will find three files which have been used and then are all compressed

105
00:08:08,770 --> 00:08:09,850
file exists.

106
00:08:10,270 --> 00:08:15,190
So we still need to see how the decompress using shuttle, which is quite easy to do.

107
00:08:15,730 --> 00:08:19,630
Now we delete everything we have done so as not to generate the compressed file.

108
00:08:19,630 --> 00:08:27,190
Again, we call shuttle unpack and here is unpack file, which serves to unpack a file.

109
00:08:27,880 --> 00:08:31,930
Furthermore, it will ask for the name of the file, which is a string.

110
00:08:32,410 --> 00:08:39,040
Then between quotation marks we put all compressed, which is the name of the file that we have created.

111
00:08:39,630 --> 00:08:40,300
Dot zip.

112
00:08:41,560 --> 00:08:46,750
The second parameter we need is the name we want to give to the folder which will be generated once

113
00:08:46,750 --> 00:08:47,710
we unpack everything.

114
00:08:48,430 --> 00:08:51,100
We want this to be stored in extraction.

115
00:08:51,100 --> 00:08:51,940
Finished.

116
00:08:53,200 --> 00:08:58,930
So remember that here you can put not only the name of a folder, but a complete path if you want it

117
00:08:58,930 --> 00:09:02,140
to be saved somewhere other than the folder we are working on.

118
00:09:02,350 --> 00:09:07,960
So if you type nothing but a folder name, it will assume that the path is the place where we are working

119
00:09:07,960 --> 00:09:08,470
now.

120
00:09:09,280 --> 00:09:12,430
And finally, the format which will be zip.

121
00:09:13,510 --> 00:09:20,500
If I run what we have here, we will see that on day nine, extraction finished has been generated containing

122
00:09:20,500 --> 00:09:23,380
nothing but the files we were expecting.

123
00:09:23,680 --> 00:09:28,570
Shuttle is a much more practical way to do file compression and decompression.

124
00:09:29,080 --> 00:09:32,500
You can also do it with zip file as you like it.

125
00:09:33,160 --> 00:09:37,600
The important thing here is that you have learned to compress and decompress files.

126
00:09:37,600 --> 00:09:40,540
So congratulations and keep up the good work.
