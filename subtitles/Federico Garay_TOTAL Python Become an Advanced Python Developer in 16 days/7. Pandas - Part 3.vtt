WEBVTT
1
00:00:08.480 --> 00:00:12.290
So now it's time for us to connect pandas to map plot lib.

2
00:00:12.650 --> 00:00:15.770
We have already seen numpy and connected it to pandas.

3
00:00:15.800 --> 00:00:20.630
Now we're going to connect pandas with this other library, which is the one that is going to allow

4
00:00:20.630 --> 00:00:27.470
us to transform our data, which is organized as tables, columns and rows, and pass it to graphs.

5
00:00:27.950 --> 00:00:31.460
So something that visually can make it much easier to understand.

6
00:00:32.270 --> 00:00:37.760
And this is going to be a little bit of an introduction because it's the connection between these two

7
00:00:37.760 --> 00:00:38.540
libraries.

8
00:00:39.050 --> 00:00:45.350
The first thing we're going to do is import math, plot lib, and create a graph with the values in

9
00:00:45.350 --> 00:00:46.490
the mileage column.

10
00:00:47.420 --> 00:00:53.870
Then we're already know that to input something, we type input Matt plot lib and we're going to import

11
00:00:53.870 --> 00:01:01.800
it also with a nickname which is going to be p, l t then we're going to call through the percent sign.

12
00:01:01.820 --> 00:01:04.640
Matt Plot lib in line.

13
00:01:06.140 --> 00:01:07.610
What are we doing this for?

14
00:01:07.820 --> 00:01:15.380
This is kind of a magic function, as they say, which is used to render inside the notebooks the graphs

15
00:01:15.380 --> 00:01:16.730
we're going to build next.

16
00:01:17.270 --> 00:01:23.690
So now let's build the first graph we call car sales and we call the mileage column.

17
00:01:24.080 --> 00:01:27.770
But now we're going to apply the plot method at the end.

18
00:01:28.610 --> 00:01:32.840
Plot is a type of graph, and look what happens when we run it.

19
00:01:33.560 --> 00:01:35.480
Here comes our first plot.

20
00:01:36.110 --> 00:01:40.010
Here we have mileage represented in a double entry plot.

21
00:01:40.610 --> 00:01:46.880
But this line plot would not be the right plot because we are not trying to represent the continuity

22
00:01:46.880 --> 00:01:51.890
of a process that is changing, but different elements independent of each other.

23
00:01:52.730 --> 00:01:53.750
So what do you think?

24
00:01:53.750 --> 00:01:56.450
If we represent it better with a histogram?

25
00:01:56.610 --> 00:01:59.350
Okay, we do almost the same thing.

26
00:01:59.360 --> 00:02:05.570
We put car sales and we call the column we want to represent, in this case, mileage.

27
00:02:06.230 --> 00:02:14.240
And then instead of plot, we call another type of graph which is highest for histogram, and we execute

28
00:02:15.440 --> 00:02:20.000
and we get a different graph with the same values but represented in a better way.

29
00:02:21.020 --> 00:02:26.330
So now let's try to plot the prices column since it is another numeric column.

30
00:02:27.260 --> 00:02:28.670
How would we do it?

31
00:02:29.330 --> 00:02:30.140
Let's see.

32
00:02:30.590 --> 00:02:32.000
Think for a moment.

33
00:02:32.720 --> 00:02:33.860
And here I go.

34
00:02:34.790 --> 00:02:37.880
Car sales and we call the column prices.

35
00:02:37.910 --> 00:02:44.330
Don't forget that the name of that column includes a parentheses that says USD, and that's the full

36
00:02:44.330 --> 00:02:45.380
name of the column.

37
00:02:45.920 --> 00:02:47.360
And then we call Plot.

38
00:02:48.050 --> 00:02:50.330
We run this line and we get an error.

39
00:02:50.660 --> 00:02:52.160
So why do we get this error?

40
00:02:52.310 --> 00:02:54.530
Let's see if you were expecting this.

41
00:02:54.980 --> 00:02:56.360
I did expect it.

42
00:02:56.360 --> 00:02:58.790
And that's why I've already anticipated it.

43
00:02:58.790 --> 00:02:59.270
Here.

44
00:02:59.570 --> 00:02:59.810
Here.

45
00:02:59.810 --> 00:03:02.120
It says it didn't work, did it?

46
00:03:02.690 --> 00:03:04.460
Any idea why this might happen?

47
00:03:05.540 --> 00:03:12.050
Well, if we come further up to where we can see the dataframe displayed here, we can see that the

48
00:03:12.050 --> 00:03:16.720
values in the prices column are not integers or floats.

49
00:03:16.730 --> 00:03:17.930
They are strings.

50
00:03:18.680 --> 00:03:19.730
So observe.

51
00:03:20.150 --> 00:03:24.470
They have currency signs, they have commas and they have dots.

52
00:03:25.010 --> 00:03:30.800
And with all these symbols, we can make values that can be used in a graph because they are not integers.

53
00:03:31.100 --> 00:03:32.690
So how can we solve this?

54
00:03:33.320 --> 00:03:39.020
Let's come here to this solution, which is remove the punctuation from the price column.

55
00:03:40.070 --> 00:03:44.660
So in order to make a chart with these prices, we have to intervene on their values.

56
00:03:45.050 --> 00:03:46.610
We call car sales.

57
00:03:46.610 --> 00:03:54.170
More specifically, it's column price USD, and now we're going to make this variable equal to a copy

58
00:03:54.170 --> 00:03:55.160
of itself.

59
00:03:55.610 --> 00:04:01.250
That is to say that it is going to be equal to whatever is in the column prices, but we're going to

60
00:04:01.250 --> 00:04:04.730
apply the method str dot replace.

61
00:04:05.390 --> 00:04:11.450
And what we're going to replace in this string are some values to which we're going to put in a list

62
00:04:11.810 --> 00:04:18.350
and that are going to be the comma which we mark before with the backslash, the currency sign, which

63
00:04:18.350 --> 00:04:20.170
we also marked with a backslash.

64
00:04:20.180 --> 00:04:26.180
And the point, these are the three types of signs that we want to modify.

65
00:04:26.690 --> 00:04:33.500
So we now close this list and we put the inverted commas, the comma, and now we have to say what we're

66
00:04:33.500 --> 00:04:34.760
going to replace them with.

67
00:04:35.180 --> 00:04:42.500
That is to say, what are we going to put where so far there is a comma and a currency sign or a point.

68
00:04:42.890 --> 00:04:45.380
Well, we want to replace them with an empty string.

69
00:04:45.920 --> 00:04:47.180
That's the first part.

70
00:04:47.780 --> 00:04:50.180
And once we've done that, we will have a string.

71
00:04:50.180 --> 00:04:53.270
So we still have to transform it into an integer.

72
00:04:53.720 --> 00:05:00.740
So we're back to putting that car sales prices USD, and it's going to be the same as whatever is in

73
00:05:00.740 --> 00:05:01.010
car.

74
00:05:01.140 --> 00:05:05.460
Sales price is USD and we're going to apply the A.

75
00:05:05.460 --> 00:05:09.240
S type method, which is for casting.

76
00:05:09.840 --> 00:05:16.380
Here we explain inside the parentheses what type of data we want now, and we want it to be an integer

77
00:05:16.380 --> 00:05:17.820
slash 100.

78
00:05:18.810 --> 00:05:23.310
So we call car sales to be able to see this and what we're going to get.

79
00:05:23.310 --> 00:05:28.770
Look the table with our prices, a column full of integers.

80
00:05:29.280 --> 00:05:37.320
So now with this modification done, I'm going to call car sales and it's prices used column and apply

81
00:05:37.320 --> 00:05:38.700
the plot method to it.

82
00:05:39.690 --> 00:05:41.430
Now we can make a graph with this.

83
00:05:42.060 --> 00:05:43.200
Of course we can.

84
00:05:43.440 --> 00:05:47.490
Our plot is now applied to the prices which are now numbers.

85
00:05:48.840 --> 00:05:51.480
This was an introduction to math plot lib.

86
00:05:51.600 --> 00:05:56.550
So fasten your seatbelts because in the next lesson we're going to dive right in to one of the most

87
00:05:56.550 --> 00:05:59.610
powerful tools that Python has to offer.

88
00:06:00.030 --> 00:06:01.230
So let's get to it.
