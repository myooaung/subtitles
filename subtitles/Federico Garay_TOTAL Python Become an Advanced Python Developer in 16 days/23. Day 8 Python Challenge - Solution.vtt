WEBVTT
1
00:00:07.970 --> 00:00:10.610
I'd love to see whatever you were able to do.

2
00:00:10.640 --> 00:00:16.880
Either you have achieved a complete and functional program, or at least a couple of well defined functions.

3
00:00:16.970 --> 00:00:22.190
But then you had a little bit of trouble articulating the whole thing to work as you expected.

4
00:00:22.220 --> 00:00:27.410
Don't worry, you're learning is going to be complete with the following solution where we show you

5
00:00:27.410 --> 00:00:28.430
how we solved it.

6
00:00:28.460 --> 00:00:34.910
Let's go over to pie chart so I'll take a number to Spenser will be organized in two modules.

7
00:00:35.270 --> 00:00:40.850
The first module, the one we'll create now is the one containing generators and decorators.

8
00:00:41.180 --> 00:00:44.690
This module will create the turns, so we'll type tickets.

9
00:00:45.060 --> 00:00:45.800
PY.

10
00:00:47.400 --> 00:00:50.460
And here we'll begin to create our generator functions.

11
00:00:50.850 --> 00:00:54.810
The first one will be in charge of creating tickets for buying perfumes.

12
00:00:55.200 --> 00:01:00.630
We can name this function perfume tickets and it will only contain a for loop.

13
00:01:00.900 --> 00:01:04.170
Here we can add a range from 1 to 10000.

14
00:01:04.830 --> 00:01:06.330
This is just an example.

15
00:01:06.540 --> 00:01:08.670
We don't have to worry about memory space.

16
00:01:09.120 --> 00:01:12.450
And remember that generators don't create the whole list of numbers we add.

17
00:01:12.480 --> 00:01:15.090
They just produce numbers as we ask for them.

18
00:01:16.020 --> 00:01:22.290
So for each number found in this range, our loop will create a string literal containing P for perfume,

19
00:01:22.290 --> 00:01:24.480
followed by a hyphen and a number.

20
00:01:25.530 --> 00:01:30.780
In this way, our loop will hand over ten tickets, according to the number of people using the ticket

21
00:01:30.780 --> 00:01:31.530
dispenser.

22
00:01:32.460 --> 00:01:35.150
And now let's create two more generator functions.

23
00:01:35.160 --> 00:01:37.680
We'll copy them because they'll be quite similar.

24
00:01:37.890 --> 00:01:42.990
One will hand over medicine tickets and the other one will hand over cosmetic tickets.

25
00:01:43.710 --> 00:01:50.910
So this one will create a string literal containing M followed by one, two, three, and so on.

26
00:01:51.510 --> 00:01:56.370
And this one string will be C, one, two, three, and so on.

27
00:01:57.150 --> 00:01:59.970
So we already have our three generators.

28
00:02:00.450 --> 00:02:02.550
Let's store them in variables.

29
00:02:02.730 --> 00:02:08.400
Thus those generators will remember the last given tickets and will be able to keep on handing the following

30
00:02:08.430 --> 00:02:09.390
tickets over.

31
00:02:09.720 --> 00:02:13.920
The first variable is P, which is equal to perfume tickets.

32
00:02:14.640 --> 00:02:18.150
The second variable is M, which is equal to medicine tickets.

33
00:02:18.450 --> 00:02:22.320
And the third variable is C, which is equal to cosmetic tickets.

34
00:02:23.410 --> 00:02:25.960
So we have our generators and their variables.

35
00:02:26.410 --> 00:02:31.960
Now it's time to create a decorator which will both change the format of the tickets and include the

36
00:02:31.960 --> 00:02:35.350
function corresponding to the product the customer wants to buy.

37
00:02:35.710 --> 00:02:43.360
So Decorator will need to know which product the customer is interested in so as to hand over the correct

38
00:02:43.360 --> 00:02:44.110
ticket.

39
00:02:44.440 --> 00:02:46.660
Now we'll start to decorate our numbers.

40
00:02:46.690 --> 00:02:51.490
Let's print a row of asterisks so as to make our tickets attractive.

41
00:02:51.580 --> 00:02:56.320
Now let's add a line break as to make more space use quotes, of course.

42
00:02:56.860 --> 00:03:01.270
And I'll concatenate this with a row of asterisks multiplied by 23.

43
00:03:01.630 --> 00:03:03.130
Why do I use this number?

44
00:03:03.160 --> 00:03:07.360
Well, because I already tested it, and I know this is the correct length.

45
00:03:07.810 --> 00:03:10.930
You can add the number that's best suited to your text.

46
00:03:11.440 --> 00:03:18.220
Then we'll print a message that reads something like Your number is Colon, and this line will be followed

47
00:03:18.220 --> 00:03:19.180
by a number.

48
00:03:19.780 --> 00:03:25.390
In order to generate this number and see what product the customer has chosen, will execute some control

49
00:03:25.390 --> 00:03:26.680
flow statements.

50
00:03:27.070 --> 00:03:36.550
So if product is equal to P, the software will print next P, which is the variable in charge of delivering

51
00:03:36.550 --> 00:03:38.650
tickets to buy perfumes.

52
00:03:39.100 --> 00:03:46.630
If that's not the case, then ELIF product is equal to M, which is the next variable and we'll print

53
00:03:46.630 --> 00:03:47.710
next M.

54
00:03:48.130 --> 00:03:52.360
Finally we'll add else because there aren't more options.

55
00:03:52.540 --> 00:04:00.040
The next one is C, so there's no point in clarifying it and we'll print next C and so the numbers or

56
00:04:00.040 --> 00:04:03.070
tickets will be delivered according to customer's choice.

57
00:04:03.400 --> 00:04:08.500
So it doesn't matter if the customer changes products when they pick a product whose number was already

58
00:04:08.500 --> 00:04:09.070
given.

59
00:04:09.100 --> 00:04:11.290
The software will deliver the following number.

60
00:04:11.320 --> 00:04:12.580
Thanks to next.

61
00:04:12.850 --> 00:04:15.440
So let's finish our declarations by printing.

62
00:04:15.460 --> 00:04:19.090
Please wait for your turn.

63
00:04:19.690 --> 00:04:26.320
Another row of asterisks multiplied by 23, which will be concatenated with a line break in order to

64
00:04:26.320 --> 00:04:28.210
be separated from the following text.

65
00:04:29.290 --> 00:04:30.910
So we have our tickets ready.

66
00:04:31.120 --> 00:04:34.690
We have three generators, their variables and a decorator.

67
00:04:35.170 --> 00:04:37.630
And the customers choice isn't important.

68
00:04:37.660 --> 00:04:41.580
We didn't need to write three decorators for each ticket.

69
00:04:41.590 --> 00:04:45.850
We only entered one decorator, which helped us to save loads of space.

70
00:04:46.030 --> 00:04:50.160
So now we'll create a new module named Main dot P.

71
00:04:50.440 --> 00:04:56.500
This will run our main code, so we have to make sure we import everything from tickets.

72
00:04:56.860 --> 00:04:57.910
Let's do that.

73
00:04:58.270 --> 00:05:02.590
And now we're able to use all the functions we created in the previous module.

74
00:05:02.890 --> 00:05:05.320
Fortunately, we learned how to do this.

75
00:05:06.460 --> 00:05:12.400
So let's create a function named ask, which will be in charge of asking the customer which product

76
00:05:12.400 --> 00:05:16.510
they're interested in perfume, medicine, or cosmetics.

77
00:05:17.080 --> 00:05:24.310
This will start by printing a greeting message such as Welcome to Python Drugstore and that will be

78
00:05:24.310 --> 00:05:24.940
its name.

79
00:05:25.780 --> 00:05:27.580
And we'll start a while loop.

80
00:05:27.580 --> 00:05:33.940
That will allow us to keep on iterating as long as it's true until the customer chooses the right option.

81
00:05:34.270 --> 00:05:37.690
Checking if our variables were true or false was quite a mess.

82
00:05:37.690 --> 00:05:40.960
But now we can handle errors with try accept.

83
00:05:40.960 --> 00:05:44.020
And finally and everything is more organized.

84
00:05:44.740 --> 00:05:48.070
So first we'll print the option so that the customer can see them.

85
00:05:48.340 --> 00:05:52.810
So print capital P in case they want the perfume line.

86
00:05:52.810 --> 00:05:59.470
Break capital M in case they want medicine, another line break and capital C in case they want cosmetics.

87
00:05:59.830 --> 00:06:04.270
Well, I think we can continue with the next line, which is the try block.

88
00:06:04.810 --> 00:06:06.610
What will our code try to do?

89
00:06:06.640 --> 00:06:13.780
It will try to make the user store their input in the my product variable where we tell them choose

90
00:06:13.780 --> 00:06:15.520
your product colon.

91
00:06:16.270 --> 00:06:22.480
As the user can enter uppercase, all lowercase letters will change whatever their input is to uppercase

92
00:06:22.480 --> 00:06:25.870
letters using the upper method so as to not have any problems.

93
00:06:26.230 --> 00:06:31.500
Now we have to make room for exceptions, which can occur when the user makes a wrong choice.

94
00:06:31.510 --> 00:06:33.460
So let's use the accept block.

95
00:06:34.300 --> 00:06:39.100
So we're going to create a list containing correct options, which are p m and C.

96
00:06:39.580 --> 00:06:43.420
They are capital letters as will change the user's input to uppercase.

97
00:06:44.410 --> 00:06:50.260
And we're going to apply the index method, adding my product, the user's choice, because this line

98
00:06:50.260 --> 00:06:54.340
will raise an exception where the user chooses an option that's not in the list.

99
00:06:54.880 --> 00:07:02.500
Now, in case the user input something invalid, the accept block will print a message reading that

100
00:07:02.500 --> 00:07:04.840
is not a valid option.

101
00:07:05.140 --> 00:07:06.010
And that's it.

102
00:07:06.610 --> 00:07:09.520
Notice that except court a style error.

103
00:07:09.790 --> 00:07:17.260
If I position myself there, I can see it is a two broad exception clause I can't use except without

104
00:07:17.260 --> 00:07:18.460
clarifying something.

105
00:07:18.820 --> 00:07:22.930
Well, we should know that there's a value error, so let's clarify it.

106
00:07:23.170 --> 00:07:24.040
Value error.

107
00:07:24.800 --> 00:07:26.630
This is a style issue.

108
00:07:26.660 --> 00:07:30.440
If you don't enter value era, it will work just as the same.

109
00:07:30.770 --> 00:07:33.290
But let's add it so that our code is clearer.

110
00:07:33.890 --> 00:07:38.570
So finally we're going to add an LS that will be applied in case there are no errors.

111
00:07:38.780 --> 00:07:41.960
So we'll add a break in order to get out of the loop.

112
00:07:42.320 --> 00:07:47.750
Now, before leaving, will call our decorator so that we can execute our tickets once we've gotten

113
00:07:47.750 --> 00:07:48.860
a valid letter.

114
00:07:49.340 --> 00:07:50.900
How do we call the decorator?

115
00:07:51.140 --> 00:07:54.530
Since it's inside the ticket's module, we have to type tickets.

116
00:07:54.890 --> 00:07:55.730
Decorator.

117
00:07:55.880 --> 00:07:57.020
And here we have it.

118
00:07:57.350 --> 00:08:01.400
So let's pass my product to it, because it requires a product.

119
00:08:01.820 --> 00:08:04.580
And we have our ask function ready.

120
00:08:04.760 --> 00:08:08.420
So there's one function left which will start our code execution.

121
00:08:08.630 --> 00:08:14.090
Once the user has chosen a product and receive the ticket, the system will ask if they wish to take

122
00:08:14.090 --> 00:08:15.110
another ticket.

123
00:08:15.500 --> 00:08:19.550
As a result, we'll be able to check the functionality of our generators.

124
00:08:20.270 --> 00:08:21.920
So let's create that function.

125
00:08:21.950 --> 00:08:23.540
It can be named start.

126
00:08:23.840 --> 00:08:27.800
It doesn't require parameters because it is the first thing to be executed.

127
00:08:28.310 --> 00:08:33.510
We'll add while true in order for it to keep on asking the user if they want to know the ticket.

128
00:08:33.560 --> 00:08:35.990
And now let's add the ask function.

129
00:08:36.020 --> 00:08:38.600
This will execute everything we've created.

130
00:08:39.710 --> 00:08:45.950
Then we'll ask the user if they want another ticket and this will be inside a try accept block so that

131
00:08:45.950 --> 00:08:48.350
we make sure that they choose the right option.

132
00:08:49.150 --> 00:08:55.600
And will make another ticket variable be equal to the user's input where we ask them, Do you want another

133
00:08:55.600 --> 00:08:56.200
ticket?

134
00:08:56.830 --> 00:09:03.520
They will have some options here, of course, because they have to enter y or n and let's make sure

135
00:09:03.520 --> 00:09:07.870
the user's input is changed to uppercase with the open method.

136
00:09:08.890 --> 00:09:09.170
Okay.

137
00:09:09.250 --> 00:09:10.780
So the user will input this.

138
00:09:11.290 --> 00:09:18.790
Here we'll create a list of valid options which are y and n and apply the index method in order to search

139
00:09:18.790 --> 00:09:19.840
for another ticket.

140
00:09:19.840 --> 00:09:21.970
Index the user's input.

141
00:09:23.720 --> 00:09:26.150
If there's an error, it will raise an exception.

142
00:09:26.270 --> 00:09:29.570
If not, we'll go straight to LS as to move forward.

143
00:09:30.200 --> 00:09:33.340
Here we add accept and value error as well.

144
00:09:33.350 --> 00:09:39.080
If the user doesn't choose correctly, this block will tell the user that is not a valid option.

145
00:09:39.680 --> 00:09:48.110
Now else, if the user does enter Y or NW and if will be executed in order to check if another ticket

146
00:09:48.110 --> 00:09:53.930
is equal to NW, there's no need to check if it is equal to Y because we want to know if the user doesn't

147
00:09:53.930 --> 00:09:55.100
want another ticket.

148
00:09:55.520 --> 00:10:00.800
If the user chooses, MN will print something like Thanks for visiting our Python drug store.

149
00:10:01.100 --> 00:10:04.160
Then we add break so as to get out of the loop.

150
00:10:04.790 --> 00:10:10.220
So if the user enters, why, nothing will happen because there will be nothing to execute and the loop

151
00:10:10.220 --> 00:10:11.120
will start again.

152
00:10:11.330 --> 00:10:13.850
Asking the user if they want another ticket.

153
00:10:14.180 --> 00:10:18.170
So this should deliver tickets even if the user chooses different options.

154
00:10:18.350 --> 00:10:24.020
So let's call start and this will be the execution of the program itself and now we're ready to test

155
00:10:24.020 --> 00:10:24.230
it.

156
00:10:24.230 --> 00:10:29.450
So go click on Run and Run Main and here's our code.

157
00:10:29.840 --> 00:10:36.320
Welcome to Python Drug Store, P for perfume, M for medicine and C for cosmetics.

158
00:10:36.350 --> 00:10:37.730
Choose your product.

159
00:10:38.060 --> 00:10:42.820
Let's input something invalid like K that is not a valid option.

160
00:10:42.860 --> 00:10:45.170
Okay, let's enter 45.

161
00:10:45.200 --> 00:10:46.970
It is also not valid either.

162
00:10:47.570 --> 00:10:50.750
Let's enter p lowercase to see if it works.

163
00:10:51.260 --> 00:10:51.620
Okay.

164
00:10:51.620 --> 00:10:53.360
It says your number is p one.

165
00:10:53.360 --> 00:10:54.890
Please wait for your turn.

166
00:10:55.130 --> 00:10:56.600
Do you want another ticket?

167
00:10:57.220 --> 00:11:00.480
Yes, of course I want to buy medicines as well.

168
00:11:00.490 --> 00:11:04.870
So I'll choose em and enter a capital one in order to see if this works.

169
00:11:04.870 --> 00:11:08.950
I got em one, so I'll keep on taking tickets.

170
00:11:08.950 --> 00:11:11.230
This time I'll choose another for perfumes.

171
00:11:11.890 --> 00:11:13.600
Let's see if I get number two.

172
00:11:14.080 --> 00:11:20.470
Okay, I got P two and if I take another ticket for medicine, I get number two for medicine.

173
00:11:21.010 --> 00:11:25.240
And if I choose cosmetics, I get a number one for cosmetics and so on.

174
00:11:25.840 --> 00:11:31.990
The system remembers the last ticket delivered for each product and it hands over the following number

175
00:11:31.990 --> 00:11:32.530
to.

176
00:11:32.530 --> 00:11:38.350
So let's enter n to get out and there's a message reading Thanks for visiting our Python drugstore.

177
00:11:38.710 --> 00:11:40.030
So now I've got all the tickets.

178
00:11:40.030 --> 00:11:42.640
I need to buy some stuff from the Python drugstore.

179
00:11:42.880 --> 00:11:43.300
All right.

180
00:11:43.300 --> 00:11:48.610
I hope this program has made you think a lot and that we have been able to make our code work properly.

181
00:11:49.270 --> 00:11:53.560
If not, I hope this solution has helped you understand how generators work.

182
00:11:53.560 --> 00:11:56.380
We were able to apply decorators as well.

183
00:11:56.380 --> 00:12:01.900
In other words, we could apply different modules to a single efficient program which is present to

184
00:12:01.900 --> 00:12:03.160
our day to day life.

185
00:12:03.400 --> 00:12:07.870
So the day is finishing and I hope you've enjoyed this day eight of the course.

186
00:12:07.960 --> 00:12:09.370
I'll see you in the next one.
