WEBVTT
1
00:00:07.860 --> 00:00:13.800
Welcome to the lesson on Map Plot lib the favourite library of all those who want their data to be visualized

2
00:00:13.800 --> 00:00:14.820
using graphs.

3
00:00:15.150 --> 00:00:20.460
We're going to learn a lot from this lesson, at least the basics so you can understand how map plot

4
00:00:20.460 --> 00:00:21.390
lib works.

5
00:00:21.630 --> 00:00:26.940
But be sure to check the official documentation where you will find not only some tutorials to get you

6
00:00:26.940 --> 00:00:31.980
started, which will show you more or less what I will show you in this lesson, but also many more

7
00:00:31.980 --> 00:00:32.850
resources.

8
00:00:33.180 --> 00:00:38.940
Because we can say that charts provide endless resources for any course, no matter how long it is.

9
00:00:39.480 --> 00:00:44.820
And here you're going to find a lot of visual help on how to build graphics, how to modify colors,

10
00:00:44.820 --> 00:00:48.000
and how to modify visualization styles.

11
00:00:48.570 --> 00:00:52.560
You may have some very interesting tutorials, lots of examples.

12
00:00:53.310 --> 00:00:55.860
So look what you can do with map plot lib.

13
00:00:56.250 --> 00:01:00.390
So let's go to our notebook, which of course you have linked in this lesson.

14
00:01:00.390 --> 00:01:06.150
So you can work together with me in this lesson and follow the examples and then go on your own to go

15
00:01:06.150 --> 00:01:06.780
deeper.

16
00:01:07.140 --> 00:01:10.800
So we're going to start by looking at how we import map plot lib.

17
00:01:11.370 --> 00:01:17.400
Although we've seen this in the previous lesson where we took a little look at it, so we put import

18
00:01:17.400 --> 00:01:26.670
map plot, lib dot p plot and we're also going to import it with a nickname which is p l t here.

19
00:01:26.670 --> 00:01:31.440
It says that the next line is going to allow us to see the graphics directly when we run them on the

20
00:01:31.440 --> 00:01:32.130
notebook.

21
00:01:32.340 --> 00:01:38.910
And as we did in the previous lesson, we need to invoke the percent and map plot lib in line, which

22
00:01:38.910 --> 00:01:44.460
is going to allow us to be able to render here on the notebook all of our graphics.

23
00:01:44.970 --> 00:01:50.220
So we execute this line and now, yes, we have map plot lib at our disposal.

24
00:01:50.820 --> 00:01:55.470
So now let's create the plot using the plot function that is map plot.

25
00:01:55.470 --> 00:01:57.120
Lib dot plot.

26
00:01:58.680 --> 00:02:01.920
And when we run this as we don't have any data.

27
00:02:02.160 --> 00:02:04.050
Only an empty plot appears.

28
00:02:04.970 --> 00:02:11.210
We could only see a coordinate frame and it doesn't have any information inside because we just put

29
00:02:11.210 --> 00:02:13.850
plot with nothing between its arguments.

30
00:02:13.880 --> 00:02:17.120
We didn't give it any information that it could display in that.

31
00:02:18.020 --> 00:02:21.410
So let's create a list of numbers that we can plot on a graph.

32
00:02:22.070 --> 00:02:28.160
Our list is going to be called A and we're going to make it equal to a list containing one, five,

33
00:02:28.160 --> 00:02:31.460
three, eight, seven and 15.

34
00:02:32.400 --> 00:02:35.910
Now we're going to call plot dot plot again.

35
00:02:36.330 --> 00:02:40.200
But in its arguments, we're going to ask it to graph the list called a.

36
00:02:40.650 --> 00:02:42.510
So we execute this cell.

37
00:02:42.660 --> 00:02:45.570
And now we get a graph that is of linear type.

38
00:02:46.080 --> 00:02:49.680
This is the type of graph that is shown when you put only plot.

39
00:02:50.130 --> 00:02:57.540
And it shows us a line that represents each index of our list on the x axis and its values on the Y

40
00:02:57.540 --> 00:02:58.230
axis.

41
00:02:59.120 --> 00:03:02.360
So now we're going to create two lists called X and Y.

42
00:03:03.400 --> 00:03:07.360
The X list is going to have values from 1 to 100.

43
00:03:07.840 --> 00:03:13.540
Then we're going to say that X is equal to a list that is constructed with a range.

44
00:03:14.660 --> 00:03:24.890
But has as argument the value 101 so it goes from 0 to 100 because 101 is not going to be included with

45
00:03:24.890 --> 00:03:25.100
that.

46
00:03:25.100 --> 00:03:26.930
We already have the X list.

47
00:03:27.680 --> 00:03:33.350
And the values of Y will be equal to the square of the respective value of X in each index.

48
00:03:33.920 --> 00:03:39.680
Then we can create a y list that is empty at the beginning and then fill it through a loop.

49
00:03:40.910 --> 00:03:49.310
A for loop that for each number that it finds inside X takes the list Y and adds the value of number.

50
00:03:49.960 --> 00:03:52.780
But boosted to two to obtain its square.

51
00:03:53.960 --> 00:03:57.620
We run this cell and the lists have now been created.

52
00:03:58.620 --> 00:04:01.650
Now we're going to plot both lists with a graph.

53
00:04:01.950 --> 00:04:08.190
So we put plot, dot plot and what do we do here to get both lists?

54
00:04:08.610 --> 00:04:13.830
If we hover the cursor over the brackets, we see that plot asks for arguments to give it both the X

55
00:04:13.830 --> 00:04:16.740
coordinates and the Y coordinates of this plot.

56
00:04:17.870 --> 00:04:20.030
So let's pass our lists X and Y.

57
00:04:20.300 --> 00:04:22.700
Then we'll build a graph of coordinates.

58
00:04:22.700 --> 00:04:29.390
Where on the x axis we're going to be, the numbers from 1 to 100, and on the y axis are going to be

59
00:04:29.390 --> 00:04:31.160
the same numbers squared.

60
00:04:32.270 --> 00:04:33.530
So how is this going to look?

61
00:04:34.250 --> 00:04:40.130
We can see this kind of curve that is going to show the combination of the X and Y coordinates of each

62
00:04:40.130 --> 00:04:41.360
of the hundred numbers.

63
00:04:41.840 --> 00:04:43.910
This is one way to create it.

64
00:04:44.360 --> 00:04:47.510
I've been pretty straightforward so that you can see something visually.

65
00:04:47.720 --> 00:04:53.750
But now I'm going to show you a little bit better how we can create this graph in a plot lib using the

66
00:04:53.750 --> 00:04:58.670
object orientated method o for object orientated.

67
00:04:59.060 --> 00:05:07.430
So we're going to create the plot, but this time not using PLT plot, i'm going to use plot dot subplots.

68
00:05:08.000 --> 00:05:09.410
So what's the difference?

69
00:05:09.710 --> 00:05:14.960
The difference is that we're going to store in two variables fig and ax.

70
00:05:16.270 --> 00:05:19.720
To plot subplot and the brackets.

71
00:05:20.470 --> 00:05:21.940
So why do we do this?

72
00:05:21.970 --> 00:05:23.560
It is by convention.

73
00:05:23.710 --> 00:05:27.100
Well, we could do it directly with Axe or directly.

74
00:05:27.100 --> 00:05:28.620
Even without this.

75
00:05:28.630 --> 00:05:32.140
The convention asks us to store these two variables here.

76
00:05:32.410 --> 00:05:40.750
Fig refers to the whole canvas in general, the place where we create our chart and X means axis, which

77
00:05:40.750 --> 00:05:43.990
stands for the single chart that we put inside the canvas.

78
00:05:44.530 --> 00:05:46.750
So what axis are we going to assign it?

79
00:05:47.170 --> 00:05:48.160
Let's do it now.

80
00:05:49.040 --> 00:05:56.780
Let's say the ax, which is the name of this axis plot, has as its values X and Y, which are the values

81
00:05:56.780 --> 00:05:59.570
that we've just created in the list of just now.

82
00:06:00.550 --> 00:06:04.480
So let's run this cell and it's created exactly the same plot.

83
00:06:04.900 --> 00:06:08.590
You might be saying, Hey, Freddie, this the second way it took me more work.

84
00:06:08.590 --> 00:06:09.880
Why would I do it like this?

85
00:06:10.510 --> 00:06:11.980
So there's two reasons.

86
00:06:12.610 --> 00:06:18.370
The idea is for you to see how this works on the back end, because now we're going to look at it in

87
00:06:18.370 --> 00:06:19.420
complete flow.

88
00:06:19.930 --> 00:06:23.230
And I wanted you to understand the logic of subplots.

89
00:06:23.970 --> 00:06:30.420
And the second reason is because in a little while we're going to set more than one chart or axis in

90
00:06:30.420 --> 00:06:32.130
the same canvas or fig.

91
00:06:32.640 --> 00:06:37.050
So then it will be necessary to understand how to set figs and axes separately.

92
00:06:37.680 --> 00:06:43.530
What we have here in these calls is going to be the complete flow for creating a plot in map plot lib.

93
00:06:44.160 --> 00:06:47.610
Let's go through the whole circuit and get some extra insights.

94
00:06:48.090 --> 00:06:51.270
So we start by importing and preparing the library we need.

95
00:06:51.720 --> 00:06:58.320
So we put import matt plot lib dot py plot as plot.

96
00:06:59.370 --> 00:07:02.460
This will be the first step we would do on a regular basis.

97
00:07:03.290 --> 00:07:09.230
Then we have to make sure that we can render our graphics with percentage and map plot lib in line.

98
00:07:10.750 --> 00:07:16.450
Oh, this is what corresponds to the first part, which is importing and preparing the library, then

99
00:07:16.480 --> 00:07:18.340
follows the preparation of the data.

100
00:07:18.880 --> 00:07:20.770
Here we do what we did just now.

101
00:07:21.010 --> 00:07:27.070
So X is equal to a list which has all the numbers in the range up to 101.

102
00:07:27.770 --> 00:07:35.000
And then we create Y, which is an empty list that is just constructed through a four loop that says

103
00:07:35.000 --> 00:07:44.450
for each number that it finds inside X, it is going to add it in Y with the method append, but transforming

104
00:07:44.510 --> 00:07:47.870
to that number in its power to the square.

105
00:07:49.030 --> 00:07:49.420
Yes.

106
00:07:49.420 --> 00:07:52.090
This is effectively the same thing we did just now.

107
00:07:52.120 --> 00:07:54.340
I'm just showing you step by step.

108
00:07:55.400 --> 00:07:58.700
This was the second part, the preparation of the data.

109
00:07:59.360 --> 00:08:05.120
And then we're going to need to prepare the area of the graph, which is FIG and also the graph itself,

110
00:08:05.120 --> 00:08:09.440
which is AX using plot dot subplots.

111
00:08:10.380 --> 00:08:17.400
So we do this by saying that fig and ax are going to be equal to the two elements of map plot lib object

112
00:08:18.180 --> 00:08:19.950
of type subplots.

113
00:08:20.910 --> 00:08:21.780
Do you follow me?

114
00:08:22.200 --> 00:08:27.270
What we did was to assign to these two variables the values of the area and the plot.

115
00:08:28.070 --> 00:08:31.730
Now we're going to add data to the plot so that it can represent something.

116
00:08:32.150 --> 00:08:37.760
And we're going to do that by storing specific information in the two chart elements that we have now,

117
00:08:37.760 --> 00:08:39.980
which are fig and ax.

118
00:08:40.910 --> 00:08:42.010
So bear with me.

119
00:08:42.020 --> 00:08:44.540
We're getting to what I'm interested in explaining.

120
00:08:45.140 --> 00:08:51.110
So we're going to load into the variable ax the values that we want to represent, which are the numbers

121
00:08:51.110 --> 00:08:53.630
stored in the X and Y lists.

122
00:08:54.510 --> 00:09:01.200
Then we say that a six point plot is going to contain X and Y as we did before.

123
00:09:02.190 --> 00:09:05.040
And now we're going to do something we haven't done so far.

124
00:09:05.130 --> 00:09:12.150
We're going to customize the plot by adding a title to it and also titles to the X and Y axes.

125
00:09:12.300 --> 00:09:13.740
So how do we do this?

126
00:09:14.220 --> 00:09:19.020
Well, by taking advantage of this discrimination we've made between X and fig.

127
00:09:19.770 --> 00:09:23.610
We call ax set and we're going to set some parameters.

128
00:09:24.360 --> 00:09:30.360
The parameter title is going to be equal to the accumulated earnings per day, for example.

129
00:09:31.480 --> 00:09:38.380
We put comma to go to the next parameter and we put X label, which is going to be the text of the label

130
00:09:38.380 --> 00:09:39.700
of the x axis.

131
00:09:40.240 --> 00:09:46.810
If it is a graph of income per day and the x axis must contain the independent variable, we should

132
00:09:46.810 --> 00:09:52.360
put days and the y label parameter should be earnings.

133
00:09:53.320 --> 00:09:59.140
This way we customize the chart and give it some more information and then we can also save our graph.

134
00:09:59.140 --> 00:10:05.980
If we take the variable fig which contains the area of the graph and apply the method, save fig to

135
00:10:05.980 --> 00:10:06.340
it.

136
00:10:06.640 --> 00:10:08.020
We write it like this.

137
00:10:08.320 --> 00:10:10.420
Fig, dot, save fig.

138
00:10:10.660 --> 00:10:13.030
And in brackets we put where we want to save it.

139
00:10:13.700 --> 00:10:21.470
We can save it in graph accumulated revenue and we put the ending P and G, so that is saved as a PNG

140
00:10:21.500 --> 00:10:22.070
image.

141
00:10:23.330 --> 00:10:28.490
We run this and it runs all at the same time and we get the same thing as before.

142
00:10:28.820 --> 00:10:33.440
Only now we also have the titles and we also saved it as a PNG image.

143
00:10:35.370 --> 00:10:40.920
So now we're going to look at a scatterplot because there are many ways to create graphs, not just

144
00:10:40.920 --> 00:10:42.000
these line graphs.

145
00:10:42.820 --> 00:10:46.510
Let's create a new data set, this time using the numpy library.

146
00:10:47.230 --> 00:10:53.230
We import it as we already know how to do with the name NP and we're going to create the data.

147
00:10:54.370 --> 00:10:58.000
It can be with the variable x one that is equal to numpy.

148
00:10:58.630 --> 00:11:02.350
With the method Lynn Space Lynn's base.

149
00:11:02.530 --> 00:11:08.770
What it does is to create a series of dots distributed in a line in which we're going to establish where

150
00:11:08.770 --> 00:11:12.760
it starts at zero and where it ends at 100.

151
00:11:13.360 --> 00:11:16.740
And then we're going to establish how many dots this line is going to have.

152
00:11:16.750 --> 00:11:18.280
Let's suppose 20.

153
00:11:18.610 --> 00:11:21.370
So it's going to have one dot every five units.

154
00:11:22.230 --> 00:11:27.420
Now we're going to create the other list, which is going to have the Y axis data and it's going to

155
00:11:27.420 --> 00:11:32.040
be called y one and it's going to be equal to x one squared.

156
00:11:33.310 --> 00:11:38.320
This would generate an array that contained one number for each of these dots that we have here.

157
00:11:39.480 --> 00:11:41.400
So now we create the scatterplot.

158
00:11:42.390 --> 00:11:42.720
Okay.

159
00:11:42.720 --> 00:11:44.550
What does a scatterplot look like?

160
00:11:44.730 --> 00:11:51.210
We start it the same way as before, with Fig and with AX, to which we assign the respective values

161
00:11:51.210 --> 00:11:53.640
of plot dot subplots.

162
00:11:54.880 --> 00:12:00.580
And we're going to assign the data with AX, but instead of giving it a plot type graph, we're going

163
00:12:00.580 --> 00:12:02.120
to give it another type of graph.

164
00:12:02.140 --> 00:12:03.910
We have many options.

165
00:12:04.150 --> 00:12:06.070
And the one we want is scatter.

166
00:12:06.740 --> 00:12:12.410
Whose variable X is going to be x one and the variable Y is going to be Y one.

167
00:12:13.400 --> 00:12:19.580
So we run it and here comes this graph which has all these dots, which are 20 dots distributed from

168
00:12:19.580 --> 00:12:26.570
0 to 100, and which form this curve, because we have put as the y axis the squared value of each of

169
00:12:26.570 --> 00:12:27.410
these numbers.

170
00:12:28.760 --> 00:12:31.010
So let's move on to another example.

171
00:12:31.370 --> 00:12:38.300
Now let's visualize the function sine using the method of numpy, which is sin to construct the sign

172
00:12:38.300 --> 00:12:39.350
of any number.

173
00:12:39.830 --> 00:12:42.320
So we're going to call fig and ax again.

174
00:12:43.060 --> 00:12:48.910
This, you're going to learn by heart and they're going to be equal to plot subplots.

175
00:12:49.180 --> 00:12:51.220
And then we create the variables for our graph.

176
00:12:52.580 --> 00:12:58.280
The first one can be x two which contains an object NP called Lind Space.

177
00:12:59.250 --> 00:13:05.550
Where we're going to put the numbers ranging from -10 to 10 and that's 100 dots in total.

178
00:13:06.890 --> 00:13:14.150
And the variable y two is going to be equal to an object and P that has the sign of x two.

179
00:13:14.930 --> 00:13:20.960
And this would also generate an array because it would have a number for each one of the hundred numbers

180
00:13:21.080 --> 00:13:23.000
that the list of the X has.

181
00:13:24.180 --> 00:13:30.090
So now let's call our graph ax scatter that has x two and y two as variables.

182
00:13:31.110 --> 00:13:32.790
And look what we generate here.

183
00:13:33.450 --> 00:13:38.760
An interesting and nice looking graph with some waves going up and down because there are a lot of dots

184
00:13:38.760 --> 00:13:40.500
accumulating in this part.

185
00:13:40.530 --> 00:13:44.310
It looks like the line is thicker, but it's actually accumulated dots.

186
00:13:45.100 --> 00:13:48.120
Well, this is something we've done with Matlock Lib.

187
00:13:48.430 --> 00:13:50.020
We have a lot more to see.

188
00:13:50.020 --> 00:13:55.960
But as this lecture was already too long, let's move on to the second part to see how we continue to

189
00:13:55.960 --> 00:13:58.140
create better and better graphs with Matt.

190
00:13:58.180 --> 00:13:58.870
Plot Lib.
