WEBVTT
1
00:00:07.700 --> 00:00:13.520
So far, we know how to write a function that receives a defined number of parameters, for example

2
00:00:13.520 --> 00:00:15.710
two, and then work with them.

3
00:00:15.710 --> 00:00:23.420
But how would we solve a function that allows us, for example, to add as many numbers as it receives

4
00:00:23.420 --> 00:00:29.280
without knowing previously how many numbers are going to be passed as arguments?

5
00:00:29.300 --> 00:00:36.050
In this case, if the user calls some passing three numbers, he will receive an error.

6
00:00:36.380 --> 00:00:44.120
The solution to this problem comes from the hand of two magic words star args and double star quarks,

7
00:00:44.120 --> 00:00:46.850
which actually means key word args.

8
00:00:46.850 --> 00:00:48.860
And we will explain it in detail.

9
00:00:49.070 --> 00:00:52.910
Let's start this lecture by getting to know the star args.

10
00:00:53.210 --> 00:01:00.920
The expression args comes from arguments, and thanks to the star args in Python we can define functions

11
00:01:00.920 --> 00:01:03.680
whose number of arguments is variable.

12
00:01:03.920 --> 00:01:10.850
That is, we can define generic functions that do not accept a certain number of parameters but adapt

13
00:01:10.850 --> 00:01:14.030
to the number of arguments with which they are called.

14
00:01:14.030 --> 00:01:20.540
If we use star args in the declaration of a function, we can make the number of parameters it accepts

15
00:01:20.540 --> 00:01:27.080
as variable, and in that way we can populate our definition with code that iterates through all the

16
00:01:27.080 --> 00:01:31.010
arguments it has received regardless of the number.

17
00:01:31.040 --> 00:01:37.430
A curious detail is that the use of the args word is actually a convention.

18
00:01:37.670 --> 00:01:44.750
The code will accept any word you use in its place as long as it starts with a star.

19
00:01:45.050 --> 00:01:51.260
But it's still a good practice to use ARGs as it helps us understand our code faster.

20
00:01:51.260 --> 00:01:54.680
Join us over in pitch form to show you this in the field.

21
00:01:55.100 --> 00:02:01.640
So let's start by analyzing a basic function known as SUM, which will have two arguments A and B.

22
00:02:03.170 --> 00:02:06.230
And we'll add them up, of course, as a result.

23
00:02:06.380 --> 00:02:09.710
Search function will return the sum of A plus B.

24
00:02:09.860 --> 00:02:11.630
Well, that's the whole function.

25
00:02:11.640 --> 00:02:17.390
And if I want to invoke it, I just have to name it some, then pass my arguments to it, say five and

26
00:02:17.390 --> 00:02:21.360
six, and let's print it so as to see it on the screen.

27
00:02:21.380 --> 00:02:23.090
So run, run.

28
00:02:23.090 --> 00:02:29.660
And we choose ARGs, which is the name of this file and it returns 11 since it's added them up correctly.

29
00:02:30.140 --> 00:02:33.500
So now let's see what happens if the user adds a third factor.

30
00:02:34.040 --> 00:02:39.440
As we said before, this will inevitably return an error because there's some function requires two

31
00:02:39.440 --> 00:02:42.320
positional arguments, but we've passed three.

32
00:02:42.560 --> 00:02:46.070
Therefore that's an error that the invocation is not valid.

33
00:02:46.340 --> 00:02:49.010
It makes sense in this way.

34
00:02:49.010 --> 00:02:53.420
When you create a function, you set the limit regarding the required number of arguments.

35
00:02:53.420 --> 00:02:58.880
If we invoke this function and pass more arguments than required or less, the function will return

36
00:02:58.880 --> 00:02:59.600
with an error.

37
00:02:59.870 --> 00:03:04.850
In today's lecture, however, we're learning how to create functions that receive an indefinite number

38
00:03:04.850 --> 00:03:05.780
of arguments.

39
00:03:05.930 --> 00:03:11.090
For example, there can be functions in which you need the user to add up all the numbers they want.

40
00:03:11.210 --> 00:03:12.590
How can we do this?

41
00:03:13.010 --> 00:03:17.990
We're not yet able to create arguments that allow us to have an indefinite number of parameters just

42
00:03:17.990 --> 00:03:20.390
by taking into account what we've learned so far.

43
00:03:20.690 --> 00:03:24.590
That's the reason why Asterix ARGs comes into the rescue.

44
00:03:25.330 --> 00:03:30.040
Let's replace this group of parameters here with the asterisks args expression.

45
00:03:31.150 --> 00:03:35.470
Naturally our internal code is obsolete now, so we have to retype it.

46
00:03:35.620 --> 00:03:39.940
Let's imagine a some function that can add up all the arguments we pass to it.

47
00:03:40.360 --> 00:03:40.690
Okay.

48
00:03:40.690 --> 00:03:44.050
We'll store total in a variable starting at zero.

49
00:03:44.080 --> 00:03:51.160
And then we'd say that for each argument in arguments, colon total will be equal to the sum of itself,

50
00:03:51.160 --> 00:03:53.830
plus the argument of each one of the loops.

51
00:03:54.400 --> 00:03:57.490
Then this would return total as the result.

52
00:03:58.390 --> 00:04:04.340
So now we will try this printing in which we have three arguments and it returns the sum 16.

53
00:04:04.360 --> 00:04:07.090
And if we add more arguments 110.

54
00:04:07.090 --> 00:04:07.930
500.

55
00:04:07.960 --> 00:04:10.960
No matter how many you add, it will keep on adding them up.

56
00:04:11.440 --> 00:04:14.770
If we pass only two arguments, it will also add them up.

57
00:04:15.370 --> 00:04:17.830
And this is great because there's no limits anymore.

58
00:04:18.250 --> 00:04:22.420
And I can apply this function to any situation where this flexibility is needed.

59
00:04:23.180 --> 00:04:29.170
Take into account that I've created this code for educational purposes so that you can see that it iterates

60
00:04:29.170 --> 00:04:30.970
over each one of the arguments.

61
00:04:31.540 --> 00:04:35.620
Since asterisks args is actually an interval, in this case a tuple.

62
00:04:35.710 --> 00:04:42.330
And if I want to make it simpler I can use the sum function so it adds args up and it also works.

63
00:04:42.340 --> 00:04:43.300
Here's the result.

64
00:04:43.300 --> 00:04:43.960
11.

65
00:04:44.350 --> 00:04:47.230
And if I add more numbers it will also add them up.

66
00:04:47.590 --> 00:04:52.360
This is way easier and the previous approach was used for educational purposes.

67
00:04:52.750 --> 00:04:58.120
In addition, it's fundamental for you to know that Asterisks ARGs is a convention, just as Phil told

68
00:04:58.120 --> 00:04:59.230
you in the introduction.

69
00:04:59.440 --> 00:05:03.190
The important part is the asterisks, which means all the arguments.

70
00:05:03.190 --> 00:05:09.250
But if you say all the planes and then put planes here, the function will work exactly the same.

71
00:05:09.280 --> 00:05:10.780
This is a convention.

72
00:05:11.290 --> 00:05:16.990
I advise you always to use ARGs so that you or the people are able to read your code more easily by

73
00:05:16.990 --> 00:05:21.250
doing so will immediately know what you're referring to when reading ARGs.

74
00:05:21.940 --> 00:05:24.190
So that's all regarding this useful resource.

75
00:05:24.220 --> 00:05:27.580
Now you can put it into practice with a series of exercises.

76
00:05:27.700 --> 00:05:32.560
Then in the next lecture, we're going to take a step forward and learn about the asterisks, asterisks,

77
00:05:32.560 --> 00:05:33.960
keyword arguments.

78
00:05:33.970 --> 00:05:35.050
So see that?
