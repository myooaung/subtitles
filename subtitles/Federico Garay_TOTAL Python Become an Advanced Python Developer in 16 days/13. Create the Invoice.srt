1
00:00:08,130 --> 00:00:13,950
So next stop in our Great Adventure is to program the invoice button so that when clicked, it generates

2
00:00:13,950 --> 00:00:17,520
an invoice inside this blank square search.

3
00:00:17,520 --> 00:00:20,880
Invoice should include in detail everything that China has had.

4
00:00:21,360 --> 00:00:22,650
So let's get to it.

5
00:00:23,860 --> 00:00:28,120
Go back to our code and take into account that we're going to import some tools for this.

6
00:00:28,540 --> 00:00:34,360
One of them being random since we won't be entering real check numbers, but random ones.

7
00:00:35,410 --> 00:00:41,290
Another tool will be using is date time because our check should include date and time of issue.

8
00:00:42,490 --> 00:00:43,900
So let's go to our buttons.

9
00:00:43,900 --> 00:00:44,920
And here they are.

10
00:00:45,580 --> 00:00:49,180
And here we have a function that corresponds to the total button.

11
00:00:49,870 --> 00:00:56,290
So let's create an index one of created buttons, a function that will be assigned to our check issue.

12
00:00:57,280 --> 00:00:59,500
It can be named create invoice.

13
00:01:00,310 --> 00:01:05,290
Let's go back up where we have created our functions and let's define a new one.

14
00:01:05,440 --> 00:01:09,970
So the F and this will be named create invoice as well.

15
00:01:10,570 --> 00:01:11,710
So let's begin.

16
00:01:11,710 --> 00:01:17,230
We have to start typing lines inside the element we have there, which is a text element.

17
00:01:18,070 --> 00:01:20,500
This element is titled Invoice Text.

18
00:01:20,500 --> 00:01:25,210
Remember, we had created it when we added elements inside that panel.

19
00:01:26,170 --> 00:01:31,960
Since we may have issued a check before invoice, text will be in charge of deleting everything before

20
00:01:31,960 --> 00:01:33,760
we begin to issue a new check.

21
00:01:34,480 --> 00:01:42,310
So we'll enter delete from 1.0 up to end, and this is how we make sure that our check is entirely blank

22
00:01:42,310 --> 00:01:43,960
when we start to issue a new one.

23
00:01:45,010 --> 00:01:47,260
We'll start by showing the check number.

24
00:01:47,410 --> 00:01:53,170
So let's create a variable named invoice number, which will be equal to a string literal containing

25
00:01:53,170 --> 00:01:58,180
MN, hashtag, space, hyphen and a random number.

26
00:01:58,540 --> 00:02:07,090
Let's create a call to random dot random, and that number can range from 1000 to 9999.

27
00:02:07,090 --> 00:02:11,380
So it's always a four digit number and it doesn't affect our check structure.

28
00:02:11,920 --> 00:02:13,420
Now we have to add a date.

29
00:02:13,750 --> 00:02:18,760
So let's create a variable named my date, which is equal to date time, date time.

30
00:02:19,030 --> 00:02:22,990
Now, as you know, this will enter today's date.

31
00:02:23,770 --> 00:02:29,260
So now that we have stored today's date, we will set the date format so as to show it in the invoice.

32
00:02:30,310 --> 00:02:36,020
Let's enter invoice date, which will be equal to a string literal containing a month.

33
00:02:36,040 --> 00:02:37,890
So my date month.

34
00:02:39,390 --> 00:02:47,700
Then we concatenate using a forward slash so as to separate this from a call to my date dot day, another

35
00:02:47,700 --> 00:02:52,440
slash and my date year and we have our date.

36
00:02:53,490 --> 00:03:03,750
Then we'll use a hyphen and enter my date dot our and now we'll enter colon and my date minutes and

37
00:03:03,750 --> 00:03:07,110
our variable containing the date form that we want is complete.

38
00:03:07,650 --> 00:03:15,510
So let's enter it in invoice by calling invoice, text insert and at the end we'll enter a string literal

39
00:03:15,510 --> 00:03:21,480
reading something like information, colon, invoice number and invoice date.

40
00:03:23,460 --> 00:03:28,890
Let's write some tabs with backslash and T and here we insert invoice number.

41
00:03:29,070 --> 00:03:32,520
Then we add two tabs and insert invoice date.

42
00:03:33,510 --> 00:03:35,100
Would you like to see how it's going?

43
00:03:35,640 --> 00:03:38,970
So let's execute it then and create a basic check.

44
00:03:39,000 --> 00:03:44,820
We click on Total and here we have information, random number, date and time.

45
00:03:46,950 --> 00:03:51,180
Let's separate the elements in our invoice text with some rows of asterisks.

46
00:03:51,870 --> 00:03:58,530
So Invoice Text will receive another insert which will be in charge of inserting a row of asterisks

47
00:03:58,770 --> 00:04:00,900
at the end of everything we wrote.

48
00:04:02,250 --> 00:04:04,170
We add an F with asterisks.

49
00:04:04,170 --> 00:04:10,200
We'll multiply this by 47, and as you already know, this number didn't appear out of the blue.

50
00:04:10,410 --> 00:04:13,800
We've made some calculations, so I know which number to use.

51
00:04:14,700 --> 00:04:18,630
So let's do a line break so as to always type into the line below.

52
00:04:19,110 --> 00:04:22,080
Actually, I forgot to do a line break on the previous line.

53
00:04:23,920 --> 00:04:27,310
All right, let's execute this and let's make a calculation.

54
00:04:27,310 --> 00:04:30,280
And here we have a row of asterisks that looks great.

55
00:04:30,610 --> 00:04:31,870
So let's continue.

56
00:04:33,310 --> 00:04:37,450
Now we'll add the invoice head so as to detail the items and the costs.

57
00:04:37,960 --> 00:04:44,680
So we'll keep on inserting features in invoice text from the end and will enter a string containing

58
00:04:44,680 --> 00:04:46,060
the word items.

59
00:04:46,060 --> 00:04:47,230
Then two tabs.

60
00:04:47,650 --> 00:04:52,630
Then we add quantity, another tab and items cost.

61
00:04:54,220 --> 00:04:59,230
Let's do a line break and move on to the next line so as to enter another separator line.

62
00:04:59,410 --> 00:05:02,200
But this one won't be like the row of asterisks.

63
00:05:02,200 --> 00:05:09,940
We'll insert an end and include a string literal containing hyphens which will multiply by 54.

64
00:05:10,450 --> 00:05:13,300
And now we'll concatenate it with another line break.

65
00:05:14,800 --> 00:05:17,680
Let's execute it and let's issue a check.

66
00:05:18,160 --> 00:05:22,360
And we have items, quantity and items cost.

67
00:05:23,860 --> 00:05:26,440
Everything the diner has had should be listed here.

68
00:05:27,640 --> 00:05:28,690
So now it comes apart.

69
00:05:28,690 --> 00:05:31,930
Quite difficult to program and yet it's fundamental.

70
00:05:32,650 --> 00:05:36,070
We have to look for each food that has been marked as consumed.

71
00:05:36,400 --> 00:05:41,380
Then we need to know the portions that have been consumed and obtain the total cost.

72
00:05:41,980 --> 00:05:47,320
We need to create a loop that contains an x counter so as to constantly change registers.

73
00:05:47,710 --> 00:05:54,160
So for each f in food, text will check if f dot get is different from zero.

74
00:05:55,480 --> 00:05:59,950
If that register is different from zero, it means at least one portion was consumed.

75
00:06:00,610 --> 00:06:04,810
Otherwise, if the check box isn't selected, it should be at zero.

76
00:06:04,840 --> 00:06:07,030
Hence it shouldn't be included on the check.

77
00:06:08,380 --> 00:06:16,630
So if it's different from zero, we'll insert at the end of invoice text a string literal containing

78
00:06:16,630 --> 00:06:18,550
the food that has been consumed.

79
00:06:19,300 --> 00:06:23,440
We find this inside food list in index x.

80
00:06:25,630 --> 00:06:30,520
If it was the first iteration, this would return the string chicken and so on.

81
00:06:31,810 --> 00:06:39,070
So then we'll concatenate this with two tabs as well as the check head, and we'll try to obtain quantity.

82
00:06:40,000 --> 00:06:41,320
So how do we do that?

83
00:06:41,770 --> 00:06:46,840
We just use F dot get and this will tell us the portions the diner has had.

84
00:06:47,470 --> 00:06:52,810
Then we insert another tab so as to move on to the next column, which contains the costs.

85
00:06:53,470 --> 00:07:00,190
So we have to show the currency and then we have to multiply so as to calculate the integer in food

86
00:07:00,190 --> 00:07:01,120
dot get.

87
00:07:02,470 --> 00:07:06,250
Let's press enter so as to see the complete line on the screen.

88
00:07:07,210 --> 00:07:08,200
It's too long.

89
00:07:08,680 --> 00:07:15,310
So we have the quantity and we multiply it by whatever is in the food prices list in index x.

90
00:07:15,340 --> 00:07:22,480
After that, we do a line break to move on to the next line to make sure that our loop starts again

91
00:07:22,480 --> 00:07:23,380
and again.

92
00:07:23,380 --> 00:07:32,320
We'll add x plus equals one right at the same level of if x will increase a value in each iteration

93
00:07:32,320 --> 00:07:32,980
that way.

94
00:07:33,760 --> 00:07:36,940
So far, everything we've done corresponds to food.

95
00:07:36,940 --> 00:07:38,530
So let's see if it works.

96
00:07:39,430 --> 00:07:44,830
Let's pick chicken and two salmons and we click on Total Invoice.

97
00:07:44,830 --> 00:07:49,450
And here we have chicken one and its cost, then salmon two.

98
00:07:49,570 --> 00:07:50,650
And it's cost.

99
00:07:51,490 --> 00:07:52,390
Well, well done.

100
00:07:52,390 --> 00:07:54,790
Let's repeat the process with each category.

101
00:07:56,440 --> 00:07:57,700
First drink.

102
00:07:58,750 --> 00:08:01,540
Here we enter D and we type drink here.

103
00:08:01,870 --> 00:08:03,430
Let's just everything.

104
00:08:07,000 --> 00:08:07,720
Okay.

105
00:08:08,140 --> 00:08:09,550
Now desert.

106
00:08:09,550 --> 00:08:12,700
And let's copy and adjust everything again for desert.

107
00:08:16,070 --> 00:08:16,910
Perfect.

108
00:08:17,930 --> 00:08:24,020
Now, before each loop we make x reset its value to zero so it can iterate correctly.

109
00:08:24,500 --> 00:08:25,310
That's right.

110
00:08:26,180 --> 00:08:27,740
I believe there are no mistakes.

111
00:08:27,740 --> 00:08:29,300
So let's execute this.

112
00:08:29,870 --> 00:08:33,770
We pick two chicken, three juice and five puddings.

113
00:08:34,580 --> 00:08:37,310
Let's click on total and go to invoice.

114
00:08:37,700 --> 00:08:41,210
And here we have our items, quantity and cost.

115
00:08:41,600 --> 00:08:42,420
It works.

116
00:08:42,440 --> 00:08:44,330
Our invoice is almost ready.

117
00:08:45,260 --> 00:08:47,720
Now we have to provide it with the subtitles.

118
00:08:48,380 --> 00:08:52,040
I have to do another separator line and we'll use this one.

119
00:08:52,460 --> 00:08:54,230
We don't need to write it again.

120
00:08:54,440 --> 00:08:55,550
We'll put it there.

121
00:08:56,360 --> 00:09:03,590
Now we'll insert a head inside invoice, text, insert end, and it'll be followed by string, literal

122
00:09:03,590 --> 00:09:08,840
reading, food, subtotal, colon, space and three tabs.

123
00:09:09,470 --> 00:09:15,620
We don't have to take into account the previous columns anymore, so we call the food cost variable,

124
00:09:15,650 --> 00:09:19,010
the one containing the calculation we made in our previous lesson.

125
00:09:19,490 --> 00:09:25,640
Surely we have to use the get method to obtain that value and we do another line break before finishing

126
00:09:25,640 --> 00:09:26,300
the string.

127
00:09:27,380 --> 00:09:31,160
Let's copy this so as to do the same with drink and dessert.

128
00:09:31,670 --> 00:09:34,970
We replace the corresponding words and variables.

129
00:09:35,990 --> 00:09:40,310
We'll enter another separator line so as to move on to the final calculations.

130
00:09:41,270 --> 00:09:48,830
So we'll do that by copying these three lines as we can put subtotal here, taxes here and total here.

131
00:09:49,580 --> 00:09:52,820
Now we have to modify the variables containing the information.

132
00:09:53,180 --> 00:09:59,420
This will be subtotal var and this will be taxes var and this total var.

133
00:10:00,380 --> 00:10:01,640
So I think we're ready.

134
00:10:01,670 --> 00:10:03,020
Let's test it again.

135
00:10:03,440 --> 00:10:06,410
We'll pick lamb, one juice and one pudding.

136
00:10:06,590 --> 00:10:08,390
Total invoice.

137
00:10:08,390 --> 00:10:09,290
And look at this.

138
00:10:09,290 --> 00:10:10,580
Everything's fine.

139
00:10:11,120 --> 00:10:17,870
Besides the items and the costs, we also have cost of each category subtotal taxes and overall total

140
00:10:17,870 --> 00:10:18,680
to be paid.

141
00:10:18,980 --> 00:10:22,190
We need to finish this check by using another string.

142
00:10:22,670 --> 00:10:25,700
We'll use the one with the asterisks once more.

143
00:10:26,330 --> 00:10:28,610
This should include a farewell message.

144
00:10:28,610 --> 00:10:32,360
So invoice text, insert end.

145
00:10:32,360 --> 00:10:34,970
And here we should include a message reading something like.

146
00:10:35,000 --> 00:10:35,930
See you soon.

147
00:10:36,710 --> 00:10:38,030
What a nice check.

148
00:10:39,680 --> 00:10:40,700
It should be ready.

149
00:10:40,850 --> 00:10:46,070
Let's test it once more and pick one chicken, two wine and four cheesecake.

150
00:10:47,120 --> 00:10:49,700
Let's click on Total Invoice.

151
00:10:49,940 --> 00:10:55,100
And here we can see an overall total, followed by a row of asterisks and a farewell message.

152
00:10:56,390 --> 00:11:00,350
So after several hours of hard work, we managed to create an invoice.

153
00:11:00,590 --> 00:11:05,870
We should save this project as text file using the save button, shouldn't we?

154
00:11:06,230 --> 00:11:08,480
So let's configure that in our next lesson.
