WEBVTT
1
00:00:07.880 --> 00:00:14.060
Now that we understand how to install external packages that other people have uploaded to py py let's

2
00:00:14.060 --> 00:00:17.120
learn how to create our own modules and packages.

3
00:00:17.330 --> 00:00:19.900
Let's start by clarifying some concepts.

4
00:00:19.910 --> 00:00:26.380
Any python code stored in a dot py file is referred to as a module.

5
00:00:26.390 --> 00:00:33.080
So for us working in py charm, every sheet we have created in a dot py file is a module.

6
00:00:33.080 --> 00:00:38.990
As we have seen, a module can hold a set of functions, variables or classes and it can also be used

7
00:00:38.990 --> 00:00:40.370
by other modules.

8
00:00:40.700 --> 00:00:42.410
We're going to see this in a moment.

9
00:00:42.530 --> 00:00:50.090
For example, we can define a module called my module PY with two functions sum and subtract.

10
00:00:50.450 --> 00:00:56.000
Once defined, such a module can be used or imported into another file.

11
00:00:56.000 --> 00:01:01.220
In this way, since we can import all its contents using import.

12
00:01:01.580 --> 00:01:05.090
On the other hand, packages are collections of modules.

13
00:01:05.090 --> 00:01:09.500
In other words, a package is a folder containing several modules.

14
00:01:09.500 --> 00:01:15.140
For instance, we can design a mathematical package by creating a folder with this structure.

15
00:01:15.680 --> 00:01:24.170
In this case, our package contains two normal modules arithmetic, py and geometry py and a special

16
00:01:24.170 --> 00:01:30.530
module that must be in all packages, which is called underscore, underscore in it, underscore, underscore.

17
00:01:31.460 --> 00:01:39.710
Every package must always contain an init py file so that python understands it is a package and not

18
00:01:39.710 --> 00:01:40.790
just a folder.

19
00:01:41.000 --> 00:01:45.290
And you can even create sub packages inside your packages if you want.

20
00:01:45.290 --> 00:01:49.940
But there must be an init module in all of them in order to tell python.

21
00:01:49.940 --> 00:01:55.430
That is a set of packaged modules to help you not get tangled up with this theory.

22
00:01:55.430 --> 00:01:58.190
Let's go over to the computer and see how it works.

23
00:01:58.930 --> 00:02:02.680
So for this lesson, we'll create a new project inside pie chart.

24
00:02:02.980 --> 00:02:07.540
So we'll go to new project and we'll be able to choose here where we want to save it.

25
00:02:08.170 --> 00:02:10.240
I'll save it in desktop and I'll name it.

26
00:02:10.240 --> 00:02:15.700
My modules enter this window and now we can start the project from scratch.

27
00:02:16.870 --> 00:02:19.060
So I'll create two Python files.

28
00:02:19.840 --> 00:02:27.340
Here we have my modules and first we'll create a new file called Occupied Module P and a second one

29
00:02:27.340 --> 00:02:29.620
called Empty Module P.

30
00:02:30.520 --> 00:02:34.060
These names will remind us of the contents of each module.

31
00:02:34.360 --> 00:02:40.510
So in occupied module we'll type a text, a function named greet, which won't need arguments.

32
00:02:41.410 --> 00:02:46.000
It will only print a text that reads, Hello, I'm in the occupied module.

33
00:02:46.480 --> 00:02:51.790
When we see it, we'll know this function is located in the occupied module and in the empty module

34
00:02:51.790 --> 00:02:53.170
we won't type anything.

35
00:02:53.170 --> 00:02:56.710
We're going to try using the function we've just created in the other module.

36
00:02:57.100 --> 00:03:01.030
So if I call greet here the option to enter it doesn't come up.

37
00:03:01.030 --> 00:03:03.580
And if I type the whole name, I get an error.

38
00:03:04.390 --> 00:03:08.290
If I executed it, I'd get an error to sum it up.

39
00:03:08.290 --> 00:03:11.830
I cannot use a function from occupied module in empty module.

40
00:03:11.830 --> 00:03:19.030
For now, however, we can import a function from another module as we did with random and path, and

41
00:03:19.030 --> 00:03:22.270
we've been importing modules from other places throughout the course.

42
00:03:22.390 --> 00:03:28.870
So let's import from occupied module import and now we can see the options greet.

43
00:03:29.290 --> 00:03:35.950
So I can import greet which is located in another module now empty module which is named like that because

44
00:03:35.950 --> 00:03:39.130
it doesn't have a function of its own can call greet.

45
00:03:39.580 --> 00:03:40.990
So we'll execute it.

46
00:03:43.310 --> 00:03:45.530
And voila, we can read.

47
00:03:45.530 --> 00:03:46.220
Hello?

48
00:03:46.250 --> 00:03:49.470
I'm in the occupied module from empty module.

49
00:03:49.490 --> 00:03:53.900
We were able to call the function of occupied module because we could import it.

50
00:03:54.380 --> 00:03:56.660
So I can also do it from command line.

51
00:03:56.870 --> 00:04:00.770
I'll go to desktop because I can access the folder, my modules from there.

52
00:04:00.950 --> 00:04:01.760
That's it.

53
00:04:01.760 --> 00:04:07.660
And now I can enter python to execute empty module p which returns.

54
00:04:07.670 --> 00:04:08.450
Hello.

55
00:04:08.480 --> 00:04:10.100
I'm in the occupied module.

56
00:04:11.480 --> 00:04:17.000
So we have used the element of a module from another module and this is the traditional way to format

57
00:04:17.330 --> 00:04:20.990
p files without storing everything inside one file.

58
00:04:21.110 --> 00:04:26.810
So imagine some complex software and what it must be like to have your code in one single sheet.

59
00:04:26.960 --> 00:04:29.240
It must be impossible to find anything.

60
00:04:30.380 --> 00:04:34.070
So despite this, it won't be enough at some point.

61
00:04:34.190 --> 00:04:37.340
And we will need to organize our files into one package.

62
00:04:37.340 --> 00:04:39.650
And a package is not just a folder.

63
00:04:40.040 --> 00:04:45.590
Notice that in desktop I have the folder, my modules where I have occupied an empty module.

64
00:04:45.740 --> 00:04:47.320
But this is not a package.

65
00:04:47.330 --> 00:04:50.030
It is a folder containing two modules.

66
00:04:50.900 --> 00:04:53.630
So let's find out how to create a package.

67
00:04:54.320 --> 00:04:55.490
Back in py charm.

68
00:04:55.490 --> 00:05:00.800
I'll close all of this and now I'll create a new project in my desktop as well.

69
00:05:00.830 --> 00:05:04.670
Let's called my package and I'll do it in this window.

70
00:05:05.000 --> 00:05:06.890
My new package is loading.

71
00:05:07.250 --> 00:05:09.410
How do we tell it is a package?

72
00:05:09.680 --> 00:05:14.390
So first we'll close Main and then we'll create a new file inside my package.

73
00:05:14.630 --> 00:05:16.490
But I'll give it a special name.

74
00:05:16.910 --> 00:05:19.340
Underscore, underscore in it.

75
00:05:19.370 --> 00:05:21.460
Underscore, underscore dot p.

76
00:05:21.460 --> 00:05:27.860
Why you may remember this expression because we dealt with it when creating the constructor of a new

77
00:05:27.860 --> 00:05:28.490
class.

78
00:05:28.760 --> 00:05:31.370
In it is the constructor of a package.

79
00:05:31.520 --> 00:05:34.640
It tells Python, Hey, we have a package here.

80
00:05:34.700 --> 00:05:41.480
As long as you have an init p file, every file that follows here will be part of a package.

81
00:05:41.480 --> 00:05:43.520
They are modules of a package.

82
00:05:44.000 --> 00:05:48.950
So we'll leave this file empty and it doesn't need to contain anything, just exist.

83
00:05:49.370 --> 00:05:50.510
So back to desktop.

84
00:05:50.510 --> 00:05:53.930
We'll go back to the package we just created and we'll see in it.

85
00:05:53.930 --> 00:05:58.580
And main, we're not only interested in the class yet, we'll deal with that later.

86
00:05:59.120 --> 00:06:05.480
And the modules we create here will be part of a package because we've told Python that we have the

87
00:06:05.480 --> 00:06:06.430
in its class.

88
00:06:06.440 --> 00:06:09.080
So my package is a package indeed.

89
00:06:09.800 --> 00:06:10.160
Okay.

90
00:06:10.160 --> 00:06:14.930
Let's create another class inside my package, one that contains functions.

91
00:06:15.500 --> 00:06:18.200
It can be named addition and subtraction.

92
00:06:18.590 --> 00:06:23.390
PY So it's name like that because it will contain two functions.

93
00:06:23.690 --> 00:06:28.700
One will be addition, which will require numbers such as number one and number two colon.

94
00:06:29.750 --> 00:06:32.000
And this function will print those two numbers.

95
00:06:32.390 --> 00:06:38.090
So let's print the sum of number one plus number two, and that's all the first function will have.

96
00:06:38.420 --> 00:06:40.510
The second function could be the same.

97
00:06:40.520 --> 00:06:42.230
So let's copy it down here.

98
00:06:42.500 --> 00:06:44.240
It'll be subtraction.

99
00:06:44.240 --> 00:06:45.410
That's the difference.

100
00:06:45.410 --> 00:06:48.860
It will subtract number one and number two.

101
00:06:49.340 --> 00:06:52.970
So let's go back to the folder and we'll see that inside my package.

102
00:06:52.970 --> 00:06:56.180
We have in it addition and subtraction.

103
00:06:56.600 --> 00:07:03.620
So let's create a package here and we'll create a new folder named Package Fedi and this will be the

104
00:07:03.620 --> 00:07:04.580
actual package.

105
00:07:04.850 --> 00:07:07.940
So let's type in it, addition and subtraction.

106
00:07:07.940 --> 00:07:12.890
And since we have in it package very will be converted to a package.

107
00:07:13.550 --> 00:07:17.180
So as a matter of fact, my package is the name of the project.

108
00:07:17.300 --> 00:07:23.630
Notice that package fairy has a dot that's the symbol that tells PY charm that it is a package.

109
00:07:23.960 --> 00:07:26.910
So let's create a file outside package fairy.

110
00:07:27.990 --> 00:07:32.870
It will be named exercise py and notice that it is outside the package.

111
00:07:33.140 --> 00:07:38.480
In this group of modules and in package fairy we have addition and subtraction.

112
00:07:39.020 --> 00:07:42.290
So now I want to use addition or subtraction.

113
00:07:42.950 --> 00:07:48.320
So if I call edition, it won't allow me to do that because this function doesn't exist in this module.

114
00:07:48.710 --> 00:07:50.780
So this time I'll call a package.

115
00:07:50.780 --> 00:07:54.360
So I need to import something from package already.

116
00:07:54.410 --> 00:08:00.140
So I'll import addition and subtraction and I'll be able to use it thanks to pitchow.

117
00:08:00.560 --> 00:08:06.050
So if I want to call this, I need to call addition and subtraction first, which is the name of the

118
00:08:06.050 --> 00:08:07.640
module dot.

119
00:08:07.880 --> 00:08:12.230
And now I can call the two functions contained in addition and subtraction.

120
00:08:12.800 --> 00:08:19.490
For instance, I can call subtraction and pass the numbers 15 and two to it, and I can also call addition

121
00:08:19.490 --> 00:08:30.230
and subtraction addition in order to sum and I can pass 20 and 55 to it, let's execute exercise, run,

122
00:08:30.230 --> 00:08:39.410
run, exercise and I'll obtain 13 the result of subtraction and 75 the result of addition mathematical

123
00:08:39.410 --> 00:08:42.650
operations I was able to perform due to the fact that I imported.

124
00:08:42.790 --> 00:08:44.260
Module from a package.

125
00:08:45.010 --> 00:08:50.410
So in addition, if my package had several modules and I wanted to use them all instead of addition

126
00:08:50.410 --> 00:08:55.810
and subtraction, I type an asterix here and I'd import all of that and that to be it.

127
00:08:56.320 --> 00:08:57.580
But that's not the case.

128
00:08:57.580 --> 00:08:58.510
So let's undo.

129
00:08:59.410 --> 00:09:03.160
So I was saying that our package can also have sub packages.

130
00:09:03.250 --> 00:09:08.750
So inside package, Freddie, which is my package, I'm going to create another folder.

131
00:09:08.770 --> 00:09:11.680
This folder will be named sub package.

132
00:09:12.730 --> 00:09:17.230
And in order for sub package to be considered a package, it needs an init file.

133
00:09:17.770 --> 00:09:23.440
So in py charm I go to package ferry and inside sub package, which is not a package yet because it

134
00:09:23.440 --> 00:09:25.600
doesn't have a dot since it isn't containing.

135
00:09:25.600 --> 00:09:28.300
And in it I'll add a class in it.

136
00:09:28.550 --> 00:09:29.290
PY.

137
00:09:29.560 --> 00:09:34.570
And that dot will pop up automatically because now it is a sub package.

138
00:09:35.560 --> 00:09:38.500
So we'll create another class inside of package.

139
00:09:38.740 --> 00:09:41.530
Let's create a class named greet py.

140
00:09:41.650 --> 00:09:43.510
And it will contain a function named.

141
00:09:43.510 --> 00:09:44.170
Hello.

142
00:09:44.380 --> 00:09:44.920
Hello.

143
00:09:44.950 --> 00:09:45.520
Will print.

144
00:09:45.550 --> 00:09:46.150
Hey.

145
00:09:46.270 --> 00:09:47.270
And that's it.

146
00:09:47.290 --> 00:09:47.680
Okay.

147
00:09:47.680 --> 00:09:52.420
We have this inside our sub package which is located in package fitting.

148
00:09:52.480 --> 00:09:56.260
So let's go back to exercise and let's close these two.

149
00:09:56.470 --> 00:09:58.330
Can we call greet from here?

150
00:09:58.600 --> 00:10:02.980
So far, if I integrate, nothing comes up because I have to import it.

151
00:10:03.220 --> 00:10:05.920
So let's type from package ferry.

152
00:10:06.160 --> 00:10:08.490
And how do I import sub package?

153
00:10:08.500 --> 00:10:10.920
First the package and then the dot.

154
00:10:10.930 --> 00:10:17.290
So we'll see what's inside package ferry, which is addition and subtraction and sub package.

155
00:10:17.740 --> 00:10:22.360
In this case, I want to enter sub package and import greet from here.

156
00:10:22.930 --> 00:10:26.140
So if I want to greet someone, I can call greet.

157
00:10:26.230 --> 00:10:29.560
I'll enter a dot and see what methods and functions greet has.

158
00:10:30.040 --> 00:10:32.940
I can see the hello function which I can execute.

159
00:10:32.950 --> 00:10:39.730
And besides the results of addition and subtraction, I also have hey the greeting that's inside greet

160
00:10:39.760 --> 00:10:42.220
inside the sub package in package.

161
00:10:43.990 --> 00:10:45.670
So I really hope you could follow me.

162
00:10:45.670 --> 00:10:51.550
So not only can we import modules that others create, but we can also create our own modules and packages

163
00:10:51.550 --> 00:10:54.460
and import them inside the files in which we need them.

164
00:10:54.970 --> 00:11:00.610
So now we're able to start thinking about more complex programs in which we can store different functions

165
00:11:00.610 --> 00:11:07.450
or elements in different modules which are contained in one or several packages, so that we can call

166
00:11:07.450 --> 00:11:11.440
different packages from a single project and use everything we create there.

167
00:11:12.160 --> 00:11:13.420
Isn't it wonderful?

168
00:11:13.450 --> 00:11:17.170
So that's all for now, and we'll keep on working in the next lecture.

169
00:11:17.410 --> 00:11:18.550
So I'll see you there.
