WEBVTT
1
00:00:08.040 --> 00:00:14.430
In Python, there are numerous data types for numeric values, but during the basic training, we're

2
00:00:14.430 --> 00:00:19.980
going to concentrate on the two most important ones, which, as we have already seen, are integers

3
00:00:19.980 --> 00:00:20.670
and floats.

4
00:00:21.210 --> 00:00:25.050
The difference between them is that floats include decimal values.

5
00:00:25.620 --> 00:00:32.580
So if I needed to handle values like ages, numbers of people or number of days or positions in a list,

6
00:00:32.940 --> 00:00:38.340
I would use integers if my values are going to be, for example, temperatures, prices, weights,

7
00:00:38.340 --> 00:00:44.280
measures, I'm going to need values that support decimal places and they would be floats.

8
00:00:44.820 --> 00:00:48.270
Let's go to PI, try to see how the numbers behave in code.

9
00:00:48.750 --> 00:00:55.860
And so here we are in Pi Chum, where I created a new file called Integers Underscore float dot p and

10
00:00:55.860 --> 00:00:56.640
you can do the same.

11
00:00:57.330 --> 00:01:02.010
I did it inside the data folder and we're going to close the column to start demonstrating some of the

12
00:01:02.010 --> 00:01:02.580
work here.

13
00:01:02.910 --> 00:01:09.720
So first, we going to create a new variable that I'm going to call my underscore number and my number.

14
00:01:09.930 --> 00:01:13.050
I'm going to declare it to have a value of one initially.

15
00:01:13.640 --> 00:01:16.230
And as you can see, it supports it perfectly.

16
00:01:16.710 --> 00:01:18.120
As we've done with the strings.

17
00:01:18.480 --> 00:01:20.880
We can store integers in the variables.

18
00:01:21.540 --> 00:01:26.220
And if I now want to print my number, notice this help window that Pi charm gives us.

19
00:01:26.460 --> 00:01:31.020
When you start to write the name of a variable or a function, some options will pop up.

20
00:01:31.560 --> 00:01:34.680
Since I just created my number, it is already in the options list.

21
00:01:35.250 --> 00:01:37.710
It has a V symbol that means variable.

22
00:01:38.280 --> 00:01:43.920
Pressing the tab key or the entity adds it automatically without having to type it all the time.

23
00:01:44.100 --> 00:01:46.350
So taking advantage of that really speeds it up.

24
00:01:47.070 --> 00:01:52.440
So unless we run this code, we're going to run and choose our new window.

25
00:01:52.590 --> 00:01:57.600
And here it says one because I asked to print the variable, my number, whose value is one.

26
00:01:58.890 --> 00:02:00.360
So, so far, so easy.

27
00:02:00.720 --> 00:02:02.760
And now I'm going to show you something additional.

28
00:02:03.540 --> 00:02:09.540
There is a function called type that lets you know what type of data we are talking about when we refer

29
00:02:09.540 --> 00:02:11.220
to a particular data or variable.

30
00:02:12.240 --> 00:02:14.490
In this case, the variable, my number.

31
00:02:14.790 --> 00:02:21.600
So if I want to print this, so we're going to insert all this in brackets and we're going to put print

32
00:02:21.600 --> 00:02:27.060
it so that it shows us not only the variable, my number, but also the type of data that my number

33
00:02:27.060 --> 00:02:27.360
is.

34
00:02:28.080 --> 00:02:32.610
It tells us that one it is and I m t perfect.

35
00:02:33.210 --> 00:02:36.570
This is information that is going to be very important for what follows.

36
00:02:37.020 --> 00:02:37.770
So let's move on.

37
00:02:38.370 --> 00:02:43.740
I want to show you that also, my number can be composed not only by a number, but by an operation.

38
00:02:43.980 --> 00:02:50.400
For example, one plus three, if I run this now, it will tell me that my number is equal to four and

39
00:02:50.400 --> 00:02:53.400
it is still an integer because four is an integer.

40
00:02:53.880 --> 00:02:56.250
I can also print operations done with variables.

41
00:02:56.610 --> 00:02:57.300
For example.

42
00:02:58.220 --> 00:02:58.600
Brent.

43
00:02:58.820 --> 00:03:01.100
My number, plus my number.

44
00:03:02.030 --> 00:03:03.320
This is what I'm going to print.

45
00:03:04.280 --> 00:03:06.410
We execute and it prints an eight.

46
00:03:06.950 --> 00:03:08.240
What it did was to do.

47
00:03:08.240 --> 00:03:13.670
In addition, remember that we used the plus inside the print to concatenate strings.

48
00:03:14.030 --> 00:03:15.080
But this is not a string.

49
00:03:15.470 --> 00:03:17.870
Neither of them are in integers.

50
00:03:19.040 --> 00:03:21.290
So what the plus does this time is add.

51
00:03:22.130 --> 00:03:27.770
So what was printed is an eight and it keeps telling me that my number, my number, don't forget,

52
00:03:27.770 --> 00:03:28.940
is worth one plus three.

53
00:03:29.700 --> 00:03:30.810
Is an EMT.

54
00:03:31.470 --> 00:03:32.430
And now comes the thing.

55
00:03:33.370 --> 00:03:39.070
I'm going to change the mine number and it's going to be equal to 5.8 a decimal number.

56
00:03:40.000 --> 00:03:44.890
And I'm going to print just once my number and then I'm going to see what type of this variable is.

57
00:03:45.860 --> 00:03:46.610
Let's go to run.

58
00:03:47.730 --> 00:03:53.370
5.8 is the content of my number and the type is a float automatically.

59
00:03:53.370 --> 00:03:58.380
When I wrote the content, when I changed the value, it also changed the type of variable it is.

60
00:03:58.780 --> 00:04:00.570
It is now a float variable.

61
00:04:01.350 --> 00:04:06.480
So we're even going to do one more little thing here in the middle after declaring the variable.

62
00:04:07.320 --> 00:04:13.620
Now I'm going to say that my number, I'm going to rewrite it equal to my number, plus my number.

63
00:04:14.400 --> 00:04:21.780
If I print this, we're going to have 11.6 because what is printed out is my number, which in this

64
00:04:21.780 --> 00:04:24.540
instance is worth twice what my number is worth.

65
00:04:24.930 --> 00:04:29.400
It's been overwritten and it has this new value, which is 11.6.

66
00:04:29.910 --> 00:04:32.640
Let's take it a step further, and I'm sure this will interest you.

67
00:04:33.510 --> 00:04:38.190
What if I say that, for example, my number is equal to five plus 5.8?

68
00:04:38.760 --> 00:04:41.230
Then let's not do this count.

69
00:04:41.250 --> 00:04:42.510
Let's leave it at that.

70
00:04:43.350 --> 00:04:44.580
So let's print my number.

71
00:04:45.420 --> 00:04:46.350
What would you expect?

72
00:04:46.410 --> 00:04:48.720
That my number here is an integer or a float.

73
00:04:49.530 --> 00:04:51.300
It has two values in its operation.

74
00:04:51.540 --> 00:04:52.710
So let's see.

75
00:04:53.670 --> 00:04:55.200
Well, it gives us the operation.

76
00:04:55.200 --> 00:05:00.090
10.8, which is five plus 5.8, tells us that it's a float.

77
00:05:01.110 --> 00:05:05.550
Of course, because it doesn't really matter the contents of these operations, but the result of the

78
00:05:05.550 --> 00:05:06.000
operation.

79
00:05:06.690 --> 00:05:09.490
Since the result is a float, it is 10.8.

80
00:05:10.270 --> 00:05:15.310
The data type of my number is a float data type, and let's take another step further to encounter a

81
00:05:15.310 --> 00:05:16.810
problem that will interest you.

82
00:05:17.290 --> 00:05:23.080
We're going to delete all this, and we're going to create a variable called a, for example, and we're

83
00:05:23.080 --> 00:05:26.230
going to give this variable a value through an input.

84
00:05:27.520 --> 00:05:29.440
We're going to ask the user to enter his age.

85
00:05:29.860 --> 00:05:30.670
Tell me your age.

86
00:05:31.840 --> 00:05:38.380
And then what we're going to do is print out the sentence that says your age as we leave the space and

87
00:05:38.410 --> 00:05:39.670
concatenate with age.

88
00:05:40.600 --> 00:05:41.440
This should work.

89
00:05:41.710 --> 00:05:45.700
In fact, the compiler doesn't flag any errors if we run it.

90
00:05:45.970 --> 00:05:52.420
Tell me your age, 34 example and it returns your age is 30 work per.

91
00:05:53.830 --> 00:05:59.260
I could deduce here that I can make operations with the variable age because it has a value of 30 a

92
00:05:59.260 --> 00:05:59.650
number.

93
00:06:00.130 --> 00:06:05.650
So now I can say, for example, that New Age, another variable that I'm going to create is going to

94
00:06:05.650 --> 00:06:07.300
be equal to one plus age.

95
00:06:08.110 --> 00:06:11.350
This, in theory, would have been given 31.

96
00:06:11.860 --> 00:06:13.210
In the case of this example.

97
00:06:14.110 --> 00:06:15.100
And then I'm going to print.

98
00:06:16.000 --> 00:06:21.280
Well, if you're going to be one year older next year, the sentence is going to be you're going to

99
00:06:21.280 --> 00:06:28.150
be we close the quotes and then add New Age, which is the variable containing age plus one.

100
00:06:29.520 --> 00:06:30.240
It should work.

101
00:06:30.360 --> 00:06:31.200
Of course it should.

102
00:06:32.250 --> 00:06:33.030
We printed out.

103
00:06:34.070 --> 00:06:39.050
We put in that your 30 tells me your age is 30.

104
00:06:39.230 --> 00:06:42.950
But then it throws me an arrow when it comes the time to print what you're going to turn.

105
00:06:43.610 --> 00:06:50.150
It tells me that there's some kind of operator here that plus cannot support because plus either does

106
00:06:50.150 --> 00:06:52.910
concatenation with strings or sums with integers.

107
00:06:53.570 --> 00:06:58.100
But if you have integer and string in the same operation, it can't operate.

108
00:06:58.610 --> 00:07:01.160
But you may be saying I have no strings here.

109
00:07:01.730 --> 00:07:06.920
I only have two integers, one and 30, because age is loaded with a number value.

110
00:07:07.920 --> 00:07:13.770
Well, even if it has a value of 30, everything that the user enters through an input is going to be

111
00:07:13.770 --> 00:07:15.630
taken by the system as a string.

112
00:07:16.080 --> 00:07:20.010
So this is a string has the characters three and zero.

113
00:07:20.130 --> 00:07:22.470
It's not a number that we can do operations with.

114
00:07:22.470 --> 00:07:28.110
And I'm going to show you that by removing this bottom part and simply printing the type of eight we

115
00:07:28.110 --> 00:07:28.530
run it.

116
00:07:29.430 --> 00:07:30.960
I give an age of 30 again.

117
00:07:31.440 --> 00:07:37.800
Your age is 30, and it tells me that the variable age has a value that belongs to the class string.

118
00:07:39.210 --> 00:07:41.190
So the data type is not an integer.

119
00:07:41.760 --> 00:07:48.270
This means that I cannot do operations with this number if I want to, for example, to add age twice.

120
00:07:49.380 --> 00:07:50.460
Course we're going to do here.

121
00:07:50.940 --> 00:07:53.400
We're going to print age plus age.

122
00:07:53.760 --> 00:07:55.410
We're going to eliminate the type here.

123
00:07:55.800 --> 00:07:57.180
And it is no longer necessary.

124
00:07:57.720 --> 00:08:00.720
We're going to run to write 30 again.

125
00:08:01.020 --> 00:08:05.730
And it tells me 30, 30, 3030, it didn't do a sum.

126
00:08:05.940 --> 00:08:07.350
It didn't give me an error either.

127
00:08:07.770 --> 00:08:09.750
What it did is a string concatenation.

128
00:08:10.140 --> 00:08:15.210
And then I have a new string that says 3030 because I put age twice.

129
00:08:15.810 --> 00:08:19.470
So if I want to receive user input, this is treated as numbers.

130
00:08:20.040 --> 00:08:25.710
I would have to do some operations that are called conversions between types and we will learn about

131
00:08:25.710 --> 00:08:27.090
that in the next lecture.
