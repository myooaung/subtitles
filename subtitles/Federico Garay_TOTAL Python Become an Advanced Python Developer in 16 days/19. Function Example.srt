1
00:00:07,910 --> 00:00:13,320
In this lecture, I want to reinforce your learning of functions with a practical application.

2
00:00:13,340 --> 00:00:15,650
Example of a function.

3
00:00:15,650 --> 00:00:22,400
We are going to put a four loop inside our function and we're going to make it take care of unpacking

4
00:00:22,430 --> 00:00:24,680
tuples without further introduction.

5
00:00:24,680 --> 00:00:26,090
Let's see it in p charm.

6
00:00:26,780 --> 00:00:32,510
Now we're going to start with this example by analyzing how a system to impact tuples works, which

7
00:00:32,510 --> 00:00:34,100
we have already covered before.

8
00:00:34,520 --> 00:00:41,450
Suppose we have a list entitled Coffee Prices with a list of tuples inside, so each element on the

9
00:00:41,450 --> 00:00:42,500
list is a tuple.

10
00:00:42,500 --> 00:00:49,160
For example, the first one is cappuccino and it's going to have the price of a cappuccino, Â£1.50.

11
00:00:50,060 --> 00:00:53,060
Then we'd close the tuple in parenthesis.

12
00:00:53,060 --> 00:00:54,530
Let's create another tuple.

13
00:00:54,530 --> 00:00:59,120
In this case espresso, which has the value of 120.

14
00:00:59,450 --> 00:01:07,760
We close the tuple and a third tuple would be mocha, which costs 190 and so far so good.

15
00:01:07,970 --> 00:01:11,180
We close the last tuple and we start a for loop.

16
00:01:11,840 --> 00:01:16,910
I don't know whether you remember that a four loop enables you to go through every element in our list.

17
00:01:17,420 --> 00:01:19,820
So element in coffee prices.

18
00:01:21,170 --> 00:01:24,620
And what are we going to do every time we go through an element?

19
00:01:24,980 --> 00:01:31,070
We will print it and we're able to execute this, which is a line of code, very simple.

20
00:01:31,070 --> 00:01:36,170
And we will have three elements, each with its two own elements because they are tuples.

21
00:01:36,980 --> 00:01:42,830
If I wanted to print only the coffee but not the price here, I could have split it into two variables.

22
00:01:42,830 --> 00:01:47,330
For example, coffee, comma, price, and then print only coffee.

23
00:01:47,600 --> 00:01:51,380
So there I would be unpacking the tuple and choosing one of its elements.

24
00:01:51,410 --> 00:01:55,040
Finally, cappuccino, espresso and mocha are printed.

25
00:01:55,280 --> 00:01:55,890
Great.

26
00:01:55,910 --> 00:01:59,630
Now we have a system that lets us do so without the functions.

27
00:02:00,110 --> 00:02:05,600
If, in fact, I wanted to continue manipulating this element and calculated not the price, but the

28
00:02:05,600 --> 00:02:10,700
cost of the coffee, which I know is 45% out of its sale value.

29
00:02:10,850 --> 00:02:19,040
Then you could say that here I want to print only price multiplied by 0.45, which would tell me the

30
00:02:19,040 --> 00:02:22,670
cost of each of the coffees and well, I could go on like this.

31
00:02:23,310 --> 00:02:29,550
However, if I want to know which coffee is the most expensive, a function will be very helpful because

32
00:02:29,550 --> 00:02:34,830
I can set up a system which goes through each element retaining that of the highest price.

33
00:02:35,370 --> 00:02:37,050
It could be done in the following way.

34
00:02:37,470 --> 00:02:43,500
Let's first create a function that is def called most expensive coffee.

35
00:02:43,920 --> 00:02:51,120
To be as clear as possible, and most expensive coffee will need a parameter that we pass a list of

36
00:02:51,120 --> 00:02:52,140
prices to it.

37
00:02:52,680 --> 00:02:56,520
So list of prices is the name of the variable we need here.

38
00:02:57,250 --> 00:03:02,740
In order to retain the coffee with the highest price, its name as well as its cost.

39
00:03:02,740 --> 00:03:08,080
I will need two variables one called highest price, which will keep the highest price.

40
00:03:08,200 --> 00:03:10,060
It will be again at zero.

41
00:03:10,360 --> 00:03:15,400
And another variable entitled Most Expensive Coffee with an empty string.

42
00:03:16,060 --> 00:03:21,970
This function will carry out as a series of tasks, but what we actually want from it is the most expensive

43
00:03:21,970 --> 00:03:26,260
coffee and the highest price, all of it in one tuple.

44
00:03:26,530 --> 00:03:32,410
That's why return is enclosed in parentheses, because I will get two variables and I want them in one

45
00:03:32,410 --> 00:03:33,490
single tuple.

46
00:03:34,290 --> 00:03:34,770
Okay.

47
00:03:34,780 --> 00:03:40,780
In the middle we will proceed with a for loop which will go through coffee and price of each element

48
00:03:40,780 --> 00:03:41,970
within the price list.

49
00:03:41,980 --> 00:03:44,430
We will pass to the function colon.

50
00:03:44,440 --> 00:03:46,990
And what is it going to do with each element?

51
00:03:47,020 --> 00:03:52,450
It's going to check whether the price of the element we are looking at is higher than what is stalled

52
00:03:53,200 --> 00:03:57,460
in highest price, which is our variable beginning at zero.

53
00:03:58,540 --> 00:04:04,900
If this is so now, I want the highest price variable to be overwritten and have the content in price.

54
00:04:05,890 --> 00:04:11,380
Price will be the new value in the highest price variable, which started at zero.

55
00:04:11,980 --> 00:04:18,310
This will happen every time a price is higher than most expensive, so highest price and most expensive

56
00:04:18,310 --> 00:04:20,110
coffee will be overwritten.

57
00:04:20,440 --> 00:04:26,230
So I hope you can follow me, because now most expensive coffee has to have as value whatever is in

58
00:04:26,230 --> 00:04:26,890
coffee.

59
00:04:27,520 --> 00:04:28,570
Which coffee?

60
00:04:28,750 --> 00:04:29,530
This one.

61
00:04:30,380 --> 00:04:33,350
Which is the first element of each tuple we're going through.

62
00:04:34,400 --> 00:04:36,620
And so far we have the if.

63
00:04:36,620 --> 00:04:40,400
And now we also need to create an else that says pass.

64
00:04:40,820 --> 00:04:42,590
This is our whole function.

65
00:04:42,590 --> 00:04:45,600
And return is doing exactly what we want to.

66
00:04:45,740 --> 00:04:49,040
They're sending us back these two variables, just as they are.

67
00:04:49,790 --> 00:04:53,750
To verify this, let's print on the screen outside of the function.

68
00:04:53,870 --> 00:04:56,000
The most expensive copy function.

69
00:04:56,120 --> 00:05:02,330
And we're going to pass coffee prices as a list of prices to it, which is the list we have at the very

70
00:05:02,330 --> 00:05:03,590
beginning up here.

71
00:05:04,520 --> 00:05:08,900
When we print it, we'll see that mocha is the most expensive coffee.

72
00:05:09,080 --> 00:05:10,400
And it is indeed.

73
00:05:11,150 --> 00:05:17,360
What happened here is not that the last loop got printed, so we're going to increase the cost of espresso

74
00:05:17,490 --> 00:05:18,890
up to 250.

75
00:05:19,160 --> 00:05:20,240
We execute it.

76
00:05:20,240 --> 00:05:22,940
And now espresso is the most expensive coffee.

77
00:05:23,420 --> 00:05:26,930
So another way could be to store this result in a variable.

78
00:05:27,290 --> 00:05:35,060
And in fact, I could do so in two variables generating the coffee and price variables this time out

79
00:05:35,060 --> 00:05:35,990
of the function.

80
00:05:36,470 --> 00:05:42,950
Plus we want these two variables to be equal to the result of the most expensive coffee function with

81
00:05:42,950 --> 00:05:44,630
price list as list.

82
00:05:44,900 --> 00:05:50,540
So bear in mind the following what it will return here when executing this function will be stored in

83
00:05:50,540 --> 00:05:51,860
these two variables.

84
00:05:52,340 --> 00:05:58,430
Well, first, we need to generate a print so that we can see it on the screen and we do it with a little

85
00:05:58,430 --> 00:05:59,060
string.

86
00:05:59,420 --> 00:06:07,100
We're going to say here that the most expensive coffee is then we call coffee, which is the variable

87
00:06:07,100 --> 00:06:13,370
that contains the first element of this result, whose price is and now we call the price variable,

88
00:06:13,370 --> 00:06:16,280
which we have thanks to the return of our function.

89
00:06:17,270 --> 00:06:24,380
It shows error in the price list because sure, it's true because price list is the internal variable

90
00:06:24,380 --> 00:06:27,530
of the function which goes from here to here.

91
00:06:27,920 --> 00:06:34,580
What we have to pass is out here is not price list because out of that function that name does not exist.

92
00:06:34,700 --> 00:06:40,070
But coffee prices, which is in the list of prices that contains our prices since the beginning.

93
00:06:40,910 --> 00:06:45,680
Now, if we execute it, it reads The most expensive coffee is espresso.

94
00:06:45,680 --> 00:06:48,020
Whose price is 250?

95
00:06:48,530 --> 00:06:54,110
All in all, this has been an example for you to understand how functions work in real life and the

96
00:06:54,110 --> 00:06:55,190
potential they have.

97
00:06:55,700 --> 00:06:57,890
I think together we've done a good job.

98
00:06:58,730 --> 00:07:04,520
Don't forget that we have our Q&amp;A section and in the meantime, let's move forward with functions in

99
00:07:04,520 --> 00:07:05,510
the next lesson.
