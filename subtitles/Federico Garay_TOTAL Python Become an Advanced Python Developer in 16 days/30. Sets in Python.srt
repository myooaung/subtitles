1
00:00:08,030 --> 00:00:15,350
In Python sets are collections of elements just like lists, but with some key differences that make

2
00:00:15,350 --> 00:00:23,900
them very particular sets can be declared in two ways using the set keyword and then putting your elements

3
00:00:23,900 --> 00:00:29,600
in parentheses or directly using the keys without using the set keyword.

4
00:00:30,320 --> 00:00:36,770
Although the braces are the same ones that we use to declare dictionaries, Python will recognize that

5
00:00:36,770 --> 00:00:42,500
it is a set because its content will be different from the one used in dictionaries.

6
00:00:42,500 --> 00:00:46,730
So to write its elements, which let's say is what this is right here.

7
00:00:46,940 --> 00:00:50,030
Pay attention, because there are two ways to do it.

8
00:00:50,030 --> 00:00:56,180
If you created your set using the set word and parentheses, the set will only take a single argument.

9
00:00:56,450 --> 00:01:00,230
So you must put all your elements inside braces.

10
00:01:00,560 --> 00:01:04,550
They can be parentheses, square brackets or curly braces.

11
00:01:04,550 --> 00:01:10,060
It doesn't matter, but they have to be enclosed so that python reads them as a single element.

12
00:01:10,070 --> 00:01:16,850
If you created your set directly with the set word and with curly braces, then you can put all your

13
00:01:16,850 --> 00:01:18,410
elements directly.

14
00:01:18,440 --> 00:01:23,950
The most important feature of sets is that they support single elements in a set.

15
00:01:23,960 --> 00:01:25,460
Elements are not repeated.

16
00:01:25,460 --> 00:01:29,120
And what happens if you do add repeated elements?

17
00:01:29,120 --> 00:01:34,580
Python simply discards the duplicates without asking you and leaves unique values.

18
00:01:35,060 --> 00:01:41,660
Another feature is that set elements are not sorted into indexes, just like dictionaries.

19
00:01:41,960 --> 00:01:48,320
While you see the elements displayed in a particular sequence, you cannot index them, rearrange them,

20
00:01:48,320 --> 00:01:51,770
or anything related to their internal position.

21
00:01:52,430 --> 00:01:56,210
And another issue is that elements are also immutable.

22
00:01:56,660 --> 00:02:02,990
All of these characteristics imply that although you can store elements of different data types in sets,

23
00:02:02,990 --> 00:02:06,170
you cannot include lists in dictionaries.

24
00:02:06,170 --> 00:02:07,760
So keep this in mind.

25
00:02:07,760 --> 00:02:13,250
I think it's time to see this in action and other details about sets over in Pi charm.

26
00:02:13,640 --> 00:02:15,050
And now from Python.

27
00:02:15,050 --> 00:02:18,350
We're going to learn how to use the sets and all its alternatives.

28
00:02:18,470 --> 00:02:23,120
First, we're going to declare our variable, my set, which is going to contain a set that we're going

29
00:02:23,120 --> 00:02:25,100
to declare using the first approach.

30
00:02:25,100 --> 00:02:30,200
The fill explained to you in the initial video, which is with the set word, then the parenthesis that

31
00:02:30,200 --> 00:02:31,520
opens and closes.

32
00:02:31,520 --> 00:02:36,560
And inside here we put our values inside some other set of braces.

33
00:02:37,010 --> 00:02:41,870
We're going to do it in this case with the brackets, and we're going to create one, two, three,

34
00:02:41,870 --> 00:02:43,310
four and five.

35
00:02:44,080 --> 00:02:49,780
This is already a set and the check it we're going to print the type of my set and we're also going

36
00:02:49,780 --> 00:02:53,200
to print my set right now to see everything together.

37
00:02:53,620 --> 00:03:00,190
We're going to run this from the second run and we're going to choose sets and here it comes first.

38
00:03:00,190 --> 00:03:06,400
This class is a set, and our set looks like this with curly braces and one, two, three, four and

39
00:03:06,400 --> 00:03:07,090
five.

40
00:03:07,210 --> 00:03:10,960
As I told you, we could have done this with other kinds of braces.

41
00:03:10,990 --> 00:03:12,880
It's going to work exactly the same.

42
00:03:12,940 --> 00:03:17,110
We could have done it with another pair of parentheses, and it's going to work the same because the

43
00:03:17,110 --> 00:03:20,740
idea is that within a set you should include a single argument.

44
00:03:20,830 --> 00:03:26,530
So look, what happens if I write it without any parentheses, brace or anything.

45
00:03:26,860 --> 00:03:28,840
When I want to execute it, it tells me.

46
00:03:28,870 --> 00:03:32,110
Hey, type error sets expected at most.

47
00:03:32,110 --> 00:03:37,150
One argument got five then it doesn't want five arguments, it wants only one.

48
00:03:37,600 --> 00:03:42,220
For that reason, we're going to pass it with some type of braces and now py charms.

49
00:03:42,250 --> 00:03:43,330
Stop screaming.

50
00:03:43,930 --> 00:03:46,120
Well, this is one way to compose it.

51
00:03:46,150 --> 00:03:47,020
The other one.

52
00:03:47,020 --> 00:03:51,610
And we're going to do it with another variable that's called other set is without doing it with the

53
00:03:51,610 --> 00:03:56,800
set word, but directly with the braces where we write one, two and three.

54
00:03:57,130 --> 00:03:58,750
We're going to leave it like that.

55
00:03:59,020 --> 00:04:04,270
We're also going to print it so you can see the type of other set, and we're going to print also other

56
00:04:04,270 --> 00:04:06,640
set so we can see what it looks like.

57
00:04:07,480 --> 00:04:14,920
And here we're going to see this to a set that is one, two, three, four, five, and another set

58
00:04:14,920 --> 00:04:16,660
that is 1 to 3.

59
00:04:16,660 --> 00:04:19,870
So it is indistinct and you can create it as you like.

60
00:04:19,870 --> 00:04:23,650
So we're going to eliminate this second one to continue working with the first one.

61
00:04:23,860 --> 00:04:28,630
And as we've said, this collection called Set does not have an internal order.

62
00:04:28,750 --> 00:04:30,190
So let's see what happens.

63
00:04:30,190 --> 00:04:36,550
If we want to look for another element through a print statement, I will show my set, but only whatever

64
00:04:36,550 --> 00:04:37,390
is in the index.

65
00:04:37,390 --> 00:04:38,080
Zero.

66
00:04:38,080 --> 00:04:44,560
Well, we want to run it and it's going to tell me type error set objects are not subscript double that

67
00:04:44,560 --> 00:04:47,200
is to say that you cannot make this type of trick.

68
00:04:47,620 --> 00:04:54,730
Neither can you, for example, modify some of its elements saying My set in position zero, I want

69
00:04:54,730 --> 00:04:57,100
it now to be equal to five.

70
00:04:57,870 --> 00:05:04,350
You will not want to do it, but it will also tell you that the set objects do not support item assignment.

71
00:05:04,380 --> 00:05:06,450
So you cannot do this with sets.

72
00:05:06,630 --> 00:05:08,400
So what can we do with sets?

73
00:05:08,520 --> 00:05:09,480
Let's see.

74
00:05:09,750 --> 00:05:11,760
I told you that it sets a unique elements.

75
00:05:11,760 --> 00:05:14,040
Therefore they cannot have repetitions.

76
00:05:14,280 --> 00:05:17,360
For I've created a collection here that does not repeat.

77
00:05:17,370 --> 00:05:18,210
It's all right.

78
00:05:18,210 --> 00:05:24,990
But if I add elements that repeat, for example, let's put more ones or a pair of twos and so on.

79
00:05:25,020 --> 00:05:27,210
Let's see what happens when we execute it.

80
00:05:27,630 --> 00:05:29,400
Notice it doesn't give me an error.

81
00:05:29,400 --> 00:05:31,350
It keeps telling me that this is a set.

82
00:05:31,380 --> 00:05:34,380
No matter how many repeats, it has no problem.

83
00:05:34,380 --> 00:05:36,870
But Python has removed all the repetitions.

84
00:05:37,020 --> 00:05:41,730
It discarded them and told me that this set only has one, two, three, four and five.

85
00:05:41,760 --> 00:05:45,420
And it doesn't matter how many times you want to add some repetitions.

86
00:05:45,660 --> 00:05:47,820
That's why I can put integers here.

87
00:05:47,940 --> 00:05:50,430
I can put floats and I can put strings.

88
00:05:50,430 --> 00:05:53,490
But what I cannot put are, for example, lists.

89
00:05:53,670 --> 00:05:55,890
So watch this if I want to change this.

90
00:05:55,890 --> 00:06:00,360
Five And instead of being a five to be a list with two and one.

91
00:06:00,510 --> 00:06:05,220
So we're going to execute it and it's going to tell me that there is a type of error.

92
00:06:05,520 --> 00:06:08,070
The list type cannot be mixed within a set.

93
00:06:08,070 --> 00:06:11,100
Therefore, this list element is not supported in sets.

94
00:06:11,400 --> 00:06:15,150
It will be the same with dictionaries, but it is going to support tables.

95
00:06:15,930 --> 00:06:20,620
Actually, we're going to create one here and we're going to create a table that has one, two and three.

96
00:06:20,640 --> 00:06:24,750
So the object that's here in this place, all of this is a table.

97
00:06:24,990 --> 00:06:31,020
And if we run it, my set includes one to the three, the four, and then the table.

98
00:06:31,260 --> 00:06:36,390
You may wonder how it supports tables and not lists or dictionaries because tables are immutable.

99
00:06:36,420 --> 00:06:41,520
That is, they are an unordered and the set requires that its elements are unordered and immutable.

100
00:06:41,730 --> 00:06:44,460
Therefore, lists and dictionaries cannot be included.

101
00:06:44,490 --> 00:06:45,480
Is this understood?

102
00:06:45,690 --> 00:06:47,670
Well, let's simplify this a little bit.

103
00:06:47,940 --> 00:06:52,590
We've got a lot of stuff here, so we're going to leave it at one, two, three, four and five.

104
00:06:52,890 --> 00:06:56,460
We're going to print it out so that it cleans up what we have.

105
00:06:56,760 --> 00:07:01,680
And I'm going to show you that you can also do things here, like use the Len function that we have

106
00:07:01,680 --> 00:07:04,140
had before to know the length of a collection.

107
00:07:04,850 --> 00:07:10,430
So we can say, Len, and we're going to put in the parentheses my set we're going to print and it's

108
00:07:10,430 --> 00:07:14,930
going to tell us that we have a set of five elements it has been able to calculate them.

109
00:07:15,230 --> 00:07:18,440
So you can also make queries like we did with strings, remember?

110
00:07:18,470 --> 00:07:26,030
Now I can find, for example, if two is in my set by asking it to print, if two is in my set and this

111
00:07:26,030 --> 00:07:30,830
should work by giving me a value that is true because it is true that two is in my set.

112
00:07:31,190 --> 00:07:36,620
We didn't really see this before, but you can do this with both tables and with lists, dictionaries

113
00:07:36,620 --> 00:07:37,100
as well.

114
00:07:37,100 --> 00:07:40,010
As long as what you're looking for in the dictionaries are the keys.

115
00:07:40,460 --> 00:07:43,250
Let's reset all of this to look at a couple more things.

116
00:07:44,520 --> 00:07:46,590
Please learn a way to do set joining.

117
00:07:46,890 --> 00:07:52,860
Let's say I have a set that court that's called SW one and to keep it simple it has one, two and three.

118
00:07:53,150 --> 00:07:57,040
Then we have a set called SW two that has three, four and at five.

119
00:07:57,060 --> 00:07:59,130
I intentionally put a repeated number.

120
00:07:59,550 --> 00:08:01,220
Now we're going to create a third set.

121
00:08:01,230 --> 00:08:04,920
This is going to be called SW three and it's going to be equal to SW one.

122
00:08:05,460 --> 00:08:08,970
But we're going to write a point to bring a method that is called Union.

123
00:08:09,330 --> 00:08:12,180
And inside we're going to put what we want to join it with.

124
00:08:12,360 --> 00:08:17,550
Well, we're going to join it with SW two and we're going to print SW three, which is one the one that

125
00:08:17,550 --> 00:08:18,720
contains the union.

126
00:08:19,140 --> 00:08:24,000
We execute it and now we have a set with one, two, three, four and five.

127
00:08:24,850 --> 00:08:29,380
Maybe you should have expected this to have a set with six elements because there are two sets of three

128
00:08:29,380 --> 00:08:33,730
each, but as one of them is repeated, Python removed it and we have five elements.

129
00:08:34,060 --> 00:08:34,960
Do you follow me?

130
00:08:35,380 --> 00:08:38,770
Well, let's get to know a little bit more about the set methods.

131
00:08:38,980 --> 00:08:43,540
So here, let's leave the first one, which is SW one, and let's try the add method.

132
00:08:43,780 --> 00:08:49,870
So here we write the line that says SW one dot ad, and inside we want to put what element we need to

133
00:08:49,870 --> 00:08:50,320
add.

134
00:08:51,170 --> 00:08:54,650
Let's say I want two out of four because I have one, two and three.

135
00:08:54,860 --> 00:08:59,750
Well, we execute it and now we have one, two, three, four in our set.

136
00:09:00,350 --> 00:09:03,710
It can also happen that you want to add an element that you already have.

137
00:09:04,040 --> 00:09:07,040
Let's add a to let's see what's going to happen here.

138
00:09:07,460 --> 00:09:08,750
Is it going to give me an error?

139
00:09:08,780 --> 00:09:10,070
What is it going to do?

140
00:09:10,870 --> 00:09:11,290
No.

141
00:09:11,290 --> 00:09:14,560
It simply runs the code and also allows me to do it.

142
00:09:14,590 --> 00:09:19,570
It doesn't give me an error and at the same time it doesn't add it because it already exists.

143
00:09:19,750 --> 00:09:21,460
So what can we do as well?

144
00:09:21,490 --> 00:09:23,710
If we can add, we can also delete.

145
00:09:24,070 --> 00:09:26,590
So it's this set that has one, two and three.

146
00:09:26,590 --> 00:09:28,480
We're going to apply the remove method.

147
00:09:28,780 --> 00:09:32,230
So what are we going to remove three, which is the last one.

148
00:09:32,650 --> 00:09:36,250
Now it's going to remove and we have one and two.

149
00:09:37,150 --> 00:09:41,020
What happens if I set it to remove an element that it does not have?

150
00:09:41,560 --> 00:09:43,910
We're going to ask it to eliminate six.

151
00:09:43,930 --> 00:09:47,170
Well, it will give me an error because six is not there.

152
00:09:47,200 --> 00:09:48,620
It cannot be eliminated.

153
00:09:48,640 --> 00:09:52,200
For that, we also have another very similar method called discard.

154
00:09:52,210 --> 00:09:53,620
That is not the same as remove.

155
00:09:53,620 --> 00:09:55,870
Well, it works exactly the same as remove.

156
00:09:55,900 --> 00:10:00,760
The only difference is that if I ask it to discard an element that doesn't exist, it will not give

157
00:10:00,760 --> 00:10:01,500
me an error.

158
00:10:01,510 --> 00:10:07,360
It will simply go ahead as if there was no problem here because there is not actually discarding is

159
00:10:07,360 --> 00:10:09,940
not the same as deleting as it cannot discard.

160
00:10:09,940 --> 00:10:14,530
Six Well, we move on one more method.

161
00:10:14,530 --> 00:10:19,150
One that we have already met when we've talked about strings is the pop method.

162
00:10:19,540 --> 00:10:20,860
Do you remember this method?

163
00:10:21,190 --> 00:10:26,440
If we leave empty in the parameters inside the method, it will remove one of its elements.

164
00:10:26,950 --> 00:10:29,650
But since here in sets we don't have any order.

165
00:10:29,800 --> 00:10:35,140
Remember, we are saying the more that in capricious sequence, pop is going to eliminate a random element

166
00:10:35,140 --> 00:10:36,010
in this case.

167
00:10:36,340 --> 00:10:38,290
So pop can be very dangerous.

168
00:10:38,290 --> 00:10:43,300
But hey, sometimes it can be used to do a sort of draw because you can contain the removed element

169
00:10:43,300 --> 00:10:46,810
inside a variable, for example, draw.

170
00:10:47,020 --> 00:10:50,140
Let's make it like that and we're going to print draw.

171
00:10:50,440 --> 00:10:56,890
Well, we executed and we get number one, but we could have got any other because it has a random element.

172
00:10:57,310 --> 00:11:01,440
The last method that I'm going to show you, so let's put this one again, is clear.

173
00:11:01,450 --> 00:11:02,770
What does clear do?

174
00:11:02,860 --> 00:11:07,630
Well, what it does is if we leave it empty here, is it empty is our set.

175
00:11:07,840 --> 00:11:10,060
So now our set has absolutely nothing.

176
00:11:11,100 --> 00:11:14,850
Well, there are many more methods that actually are not so frequent to use.

177
00:11:14,880 --> 00:11:20,040
They're quite specific, but if you want to know them, I will provide them in the downloadable PDF

178
00:11:20,040 --> 00:11:22,030
that you have next to this lecture.

179
00:11:22,050 --> 00:11:27,180
There is a file within the notes and there you will find the other methods so you can try them for yourself.

180
00:11:27,180 --> 00:11:32,400
And if you have any questions, please leave them in the Q&amp;A area because we are here to help you.

181
00:11:32,790 --> 00:11:37,110
So this has been all about the sets and please do the practical exercises that follow.

182
00:11:37,110 --> 00:11:38,980
And let's go on to the next lecture.

183
00:11:39,000 --> 00:11:40,770
We have one more element left.

184
00:11:40,800 --> 00:11:46,140
Another type of data that is not really a collection like the ones we have been seeing so far, but

185
00:11:46,140 --> 00:11:50,970
they are the booleans and you want to know them because they're very important within programming.

186
00:11:51,510 --> 00:11:53,040
So see you in the next lecture.
