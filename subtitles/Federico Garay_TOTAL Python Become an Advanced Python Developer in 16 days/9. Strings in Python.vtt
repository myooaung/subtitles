WEBVTT
1
00:00:07.710 --> 00:00:09.390
Welcome to the Stream's Lecture.

2
00:00:09.840 --> 00:00:15.360
In the previous lecture, we learned how to print data on the screen using the print statement, and

3
00:00:15.360 --> 00:00:22.770
as we saw, we can use it for any kind of information, numbers, text variables, and many more things.

4
00:00:23.280 --> 00:00:25.110
But let's not get ahead of ourselves.

5
00:00:25.380 --> 00:00:28.170
You have seen only text and numbers so far.

6
00:00:28.440 --> 00:00:33.660
In Python there are many types of data and we will see them throughout this course.

7
00:00:33.930 --> 00:00:39.840
But let's start with the data known as stream, which is nothing more than text strings.

8
00:00:40.170 --> 00:00:42.660
That's what we will focus on in this lesson.

9
00:00:43.290 --> 00:00:49.890
They are called text strings because in reality a string is a string of characters.

10
00:00:50.310 --> 00:00:58.830
For example, the word hello is a string composed by the letters H, e, l, l and O.

11
00:00:59.370 --> 00:01:03.900
And this is important since it is how Python is going to process our text.

12
00:01:04.560 --> 00:01:11.790
That's why we use quotation marks every time we write a string to clearly inform where our string starts

13
00:01:12.150 --> 00:01:13.020
and ends.

14
00:01:13.770 --> 00:01:20.700
Another important feature is that strings can contain not only letters but also numbers or special characters.

15
00:01:21.300 --> 00:01:28.260
But even so, everything in a string will be considered as text white spaces, special signs, punctuation,

16
00:01:28.500 --> 00:01:32.640
and even mathematical operators and numbers while they're inside the quotes.

17
00:01:32.700 --> 00:01:39.000
They will not be treated mathematically, and you will not be able to do operations with them since

18
00:01:39.000 --> 00:01:41.910
they will be treated as text characters.

19
00:01:42.180 --> 00:01:47.850
I say right now you follow Federico, head over to Pi picture and learn in a little bit more depth.

20
00:01:48.300 --> 00:01:51.780
And here we are again in PI to see how strings work.

21
00:01:52.380 --> 00:01:56.580
We have already seen that a string is a text string enclosed in quotes.

22
00:01:56.910 --> 00:02:01.620
We can put it inside of print to print or display on the screen a certain text.

23
00:02:02.830 --> 00:02:09.010
As I explained a few seconds ago, what we have here, although they are numbers and there is a plus

24
00:02:09.010 --> 00:02:14.860
sign and you might think that this is an operation, this is actually a string because it is in quotes

25
00:02:14.860 --> 00:02:18.430
and therefore the council does not interpret it as an operation.

26
00:02:19.370 --> 00:02:21.830
And the results it gives us is not 150.

27
00:02:22.580 --> 00:02:25.730
It gives us the expression 100 plus 50.

28
00:02:26.540 --> 00:02:31.940
Remember that we would have to remove the quotation marks so the actually returns in numerical operation.

29
00:02:32.750 --> 00:02:34.280
But let's continue with the strings.

30
00:02:34.940 --> 00:02:40.550
Strings can not only be described as a sequence of characters, as we have seen so far, but also several

31
00:02:40.550 --> 00:02:46.280
sequences of characters and put them together or join them in what we call a concatenation.

32
00:02:46.970 --> 00:02:52.190
So here I'm going to type 50, for example, I'm going to execute this.

33
00:02:52.520 --> 00:02:55.110
And here we see in the console that it says Fed.

34
00:02:55.760 --> 00:03:01.070
And this is very simple, but I could add here before another expression that says hello.

35
00:03:02.670 --> 00:03:04.450
We closed the quotation marks.

36
00:03:04.470 --> 00:03:07.320
We put a plus between both expressions.

37
00:03:07.830 --> 00:03:13.500
Both are with different quotation marks, the first with double, the second with single quotation mark.

38
00:03:14.100 --> 00:03:18.570
This doesn't matter and observe what is going to happen if we execute this.

39
00:03:20.270 --> 00:03:22.990
What you see is that it says, Hello, Fatty.

40
00:03:23.920 --> 00:03:30.790
But it actually says it all together because if we look back up here to the print, I joined to strings,

41
00:03:31.180 --> 00:03:33.370
but I haven't left any space in between them.

42
00:03:33.850 --> 00:03:36.430
I could solve this in three different ways.

43
00:03:37.090 --> 00:03:38.410
I could put a space here.

44
00:03:38.590 --> 00:03:43.650
And this, if we correct it, is going to say hello space three.

45
00:03:44.200 --> 00:03:48.820
We could also remove this space and put a space before the F in the second string.

46
00:03:49.240 --> 00:03:52.540
And this is going to work the same as it still displays.

47
00:03:52.540 --> 00:03:53.530
Hello fading.

48
00:03:54.430 --> 00:03:59.770
Or you could generate a space by creating a third string with nothing but an empty space.

49
00:04:01.280 --> 00:04:04.280
I'm getting an error here because there are two quotation marks.

50
00:04:05.620 --> 00:04:06.050
Okay.

51
00:04:06.070 --> 00:04:06.820
Problem solved.

52
00:04:07.480 --> 00:04:10.150
And we have then a string that says hello.

53
00:04:10.840 --> 00:04:13.960
It's concentrated with a string that is empty that has.

54
00:04:13.960 --> 00:04:15.610
Well, actually, it's not empty.

55
00:04:15.880 --> 00:04:21.910
It has a blank space and a third string that even though it has different quotes, it's going to be

56
00:04:21.910 --> 00:04:23.490
taken as a string anyway.

57
00:04:23.500 --> 00:04:31.660
And it says very also, if we execute this, we will have our Hello Fit, which works exactly the same

58
00:04:31.660 --> 00:04:33.130
as the other two previous weights.

59
00:04:34.000 --> 00:04:39.070
So some of the considerations when you use the strings, I already showed you that if you want this

60
00:04:39.070 --> 00:04:44.800
show quotes inside a string, you do it by putting different quotation marks than the ones you've used

61
00:04:44.800 --> 00:04:45.790
to wrap that string.

62
00:04:46.150 --> 00:04:47.860
But there is also another alternative.

63
00:04:48.220 --> 00:04:51.550
Let's write here under the phrase like, My name is Federico.

64
00:04:52.750 --> 00:04:53.320
That's it.

65
00:04:53.500 --> 00:04:54.370
Let's leave it like that.

66
00:04:55.470 --> 00:04:59.670
So it's given me an error because I start with double quotes and end with single quotes.

67
00:05:01.770 --> 00:05:02.750
Now that's corrected.

68
00:05:02.760 --> 00:05:03.180
I'm well.

69
00:05:03.210 --> 00:05:04.680
My name is Federico.

70
00:05:05.340 --> 00:05:10.170
Plus the closing brackets, and I might want to put Federico between quotes.

71
00:05:11.620 --> 00:05:16.110
I showed you that here I can solve it by putting single quotes and that would solve it.

72
00:05:16.120 --> 00:05:21.700
But also, if I wanted to put double quotes and use the double quotes outside, I have a special character

73
00:05:21.700 --> 00:05:23.200
which is the backslash.

74
00:05:23.830 --> 00:05:28.720
When you put a backslash, you are telling the code that the following character is not going to be

75
00:05:28.720 --> 00:05:33.040
taken as a character, but it is a special function or a textual character.

76
00:05:33.850 --> 00:05:38.560
So if I put double quotes here, Python painted in a different color.

77
00:05:39.310 --> 00:05:42.520
I want Frederico to also end with the double quotes.

78
00:05:42.520 --> 00:05:45.220
So I put another backslash and then the quotes.

79
00:05:46.450 --> 00:05:50.650
So if I run this, I want you to observe how it looks in the console.

80
00:05:51.370 --> 00:05:54.130
My name is Federico in double quotes.

81
00:05:54.550 --> 00:05:57.730
So the backslash tells Python, Hey, the next character.

82
00:05:57.730 --> 00:05:58.900
Don't take it as text.

83
00:05:58.900 --> 00:06:00.880
Please take it as a special character.

84
00:06:01.810 --> 00:06:07.300
It can be to make it textual, as in this case, or for other functions like the ones I'm going to show

85
00:06:07.300 --> 00:06:07.690
you now.

86
00:06:08.630 --> 00:06:13.250
So we're going to delete all this and we're going to put quotation marks and we're going to say here,

87
00:06:14.120 --> 00:06:15.410
this is the one line.

88
00:06:17.410 --> 00:06:18.490
And this is another.

89
00:06:21.160 --> 00:06:23.740
You will say that was bad writing, Freddy.

90
00:06:23.770 --> 00:06:26.020
We put everything in a row without leaving a space.

91
00:06:27.030 --> 00:06:31.470
So I want to show you how to write two lines in a row with the same print command.

92
00:06:32.040 --> 00:06:39.180
So let's put here the backslash and then the letter and the end is a special character that says New

93
00:06:39.180 --> 00:06:39.540
Line.

94
00:06:39.960 --> 00:06:45.210
Then Python, when it reads this, will understand that it must insert a new line.

95
00:06:45.930 --> 00:06:53.160
Let's execute it and see that here we have this is a line and this is another line, although it is

96
00:06:53.160 --> 00:06:54.030
all in one print.

97
00:06:54.950 --> 00:07:01.610
We could also continue writing if it's another different option, another command print below to which

98
00:07:01.760 --> 00:07:02.690
I'm going to put.

99
00:07:02.990 --> 00:07:06.590
This is the third line between quotation marks.

100
00:07:07.070 --> 00:07:09.500
We execute it and it works in the same way.

101
00:07:10.410 --> 00:07:12.450
I can put this command in a separate print.

102
00:07:12.480 --> 00:07:12.840
Oh.

103
00:07:12.840 --> 00:07:17.790
With a backslash and n to require the Python compiler to generate a new line.

104
00:07:18.720 --> 00:07:22.500
Another character we can incorporate is the backslash with the letter T.

105
00:07:23.400 --> 00:07:29.520
The T stands for Tabula but is adding a full character space before the next character.

106
00:07:29.940 --> 00:07:37.050
If I run this, we will see that this is the third line is separated by an event by four character space,

107
00:07:37.050 --> 00:07:39.660
which is nothing more than if I pressed the tab key.

108
00:07:40.200 --> 00:07:41.880
So do we have any more options?

109
00:07:42.090 --> 00:07:42.540
Yes.

110
00:07:43.200 --> 00:07:47.820
We also have the possibility that when we want to write something, let's suppose I want to write.

111
00:07:47.910 --> 00:07:49.140
Let's delete all this.

112
00:07:49.800 --> 00:07:50.880
Let's open parentheses.

113
00:07:50.880 --> 00:07:53.850
Let's write this text with single quotation marks.

114
00:07:53.850 --> 00:07:57.470
And I would like to put something with an apostrophe, for example.

115
00:07:58.410 --> 00:08:00.030
This isn't my number.

116
00:08:01.740 --> 00:08:08.700
And what happens isn't should have an apostrophe between the end and the T, which is written with the

117
00:08:08.700 --> 00:08:09.930
single quotation mark.

118
00:08:10.500 --> 00:08:11.430
But here's the problem.

119
00:08:11.940 --> 00:08:17.940
When I put the single quotation mark, having a single quotation mark it enclosing this text, Python

120
00:08:17.940 --> 00:08:20.550
said, You're ending the first text.

121
00:08:21.240 --> 00:08:23.580
I don't understand this and I don't know anything more.

122
00:08:24.120 --> 00:08:25.140
And that will give you an error.

123
00:08:25.830 --> 00:08:31.110
So then we also have the possibility of using, well, either putting double quotes outside and that

124
00:08:31.110 --> 00:08:34.500
solves it or putting a backslash before the apostrophe.

125
00:08:35.250 --> 00:08:40.020
So remember, hey, we're telling Python the next character takes it as it is.

126
00:08:40.650 --> 00:08:48.120
It then understands that it is an apostrophe which it should read as such, and that is not the enclosing

127
00:08:48.120 --> 00:08:49.170
quotation mark.

128
00:08:50.070 --> 00:08:54.900
So we're executed and this isn't a number was spelt correctly.

129
00:08:55.840 --> 00:09:00.880
One last lecture about the backlash is that sometimes you may want to write the following.

130
00:09:01.780 --> 00:09:05.380
This sign, the backslash is a backslash.

131
00:09:07.270 --> 00:09:09.850
What if I want a backslash to appear in my text?

132
00:09:10.830 --> 00:09:11.220
Here.

133
00:09:11.220 --> 00:09:14.910
I'm having an error because the backslash is an escape sign.

134
00:09:15.540 --> 00:09:18.360
Then Python will execute it in a very strange way.

135
00:09:19.020 --> 00:09:20.670
If we want a backslash to appear.

136
00:09:21.180 --> 00:09:25.800
What we have to do is after the backslash, type another backslash.

137
00:09:26.550 --> 00:09:34.140
So we're telling it the next character that to this, the second slash, take it verbatim as is.

138
00:09:35.220 --> 00:09:39.210
So let's run this and see what we're going to see is this sign is an invaded slash.

139
00:09:39.870 --> 00:09:42.630
Many times you may need the slash to be part of your text.

140
00:09:43.440 --> 00:09:46.350
So thank you very much for joining me in this lecture about strings.

141
00:09:46.560 --> 00:09:49.740
And see you in the next one to continue learning much more.
