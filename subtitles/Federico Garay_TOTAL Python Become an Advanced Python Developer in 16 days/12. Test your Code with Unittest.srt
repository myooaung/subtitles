1
00:00:07,910 --> 00:00:15,140
You've already learned how to use pile in to identify style problems or serious bugs in your code.

2
00:00:15,350 --> 00:00:21,440
In this lecture, we are going to learn how to use the built in unit test library, which we use to

3
00:00:21,440 --> 00:00:24,230
see if our code is working as we expect it to work.

4
00:00:24,260 --> 00:00:28,130
Unit test is a built in library, so we don't need to install anything here.

5
00:00:28,130 --> 00:00:29,600
We just need to import it.

6
00:00:30,080 --> 00:00:33,440
Generally, unit test dynamics are very simple.

7
00:00:33,470 --> 00:00:37,910
On one side, you have a code that you want to test, say my file.

8
00:00:38,090 --> 00:00:45,980
PY And on the other side a new module that we are going to use just to do our test first.

9
00:00:45,980 --> 00:00:51,560
Like we said, I import unit test, then I import the module I want to test.

10
00:00:51,650 --> 00:00:58,610
Then we are going to create a new class that inherits the test case method from unit test.

11
00:00:58,760 --> 00:01:03,020
And inside the class we can create as many tests as we need.

12
00:01:03,140 --> 00:01:04,670
How do you write those tests?

13
00:01:04,700 --> 00:01:11,420
Come over to py charm and we're going to show you how they know what to show you how unit test works.

14
00:01:11,420 --> 00:01:17,600
I'll create two new modules in day eight so you don't need to devise the same structure, create the

15
00:01:17,600 --> 00:01:19,010
file wherever you like.

16
00:01:19,370 --> 00:01:27,650
So my first file will be named change text dot P of course, and the second one will be test dot p y.

17
00:01:28,590 --> 00:01:35,310
So change text will contain the text I want to test and test will be in charge of verifying if everything's

18
00:01:35,310 --> 00:01:41,970
okay in change text I'll create a simple function named All Capital, which will receive the variable

19
00:01:41,970 --> 00:01:47,040
text and return that text applying the string method upper to it.

20
00:01:47,040 --> 00:01:48,090
And that's all.

21
00:01:48,690 --> 00:01:53,040
So this is the function I want to test in order to see if it works as expected.

22
00:01:53,490 --> 00:01:58,590
With unit test, we want to verify if a function returns what we expected to return.

23
00:01:59,040 --> 00:02:02,430
It will verify if I created the function correctly.

24
00:02:03,340 --> 00:02:09,790
And in this case we have a very simple function, but unit test is very useful when creating more complex

25
00:02:09,790 --> 00:02:10,870
functions too.

26
00:02:11,200 --> 00:02:14,770
So what do we need to do in order to use unit test?

27
00:02:14,920 --> 00:02:19,780
For starters, we don't need to install anything since it is a python built in library.

28
00:02:19,840 --> 00:02:25,690
We installed it when installing Python at the beginning of the course, so we just need to import it

29
00:02:25,690 --> 00:02:29,650
by typing unit test here and that's it.

30
00:02:30,010 --> 00:02:35,560
So we will also import the method change text which contains the function we want to test.

31
00:02:35,830 --> 00:02:39,580
So import change text and we have it here.

32
00:02:40,340 --> 00:02:43,190
Now we'll create a new class in this module.

33
00:02:43,520 --> 00:02:46,810
We can give this class any name we want, so I'll name it.

34
00:02:46,820 --> 00:02:48,770
Test change text.

35
00:02:49,720 --> 00:02:56,890
This class will be responsible for checking if change text works and it will inherit from unit test.

36
00:02:57,300 --> 00:02:57,750
Test.

37
00:02:57,760 --> 00:02:58,490
Case.

38
00:02:58,510 --> 00:02:59,290
Colon.

39
00:03:00,040 --> 00:03:00,430
Okay.

40
00:03:00,430 --> 00:03:05,920
We're inheriting all the methods contained in test case so as to use them in this class.

41
00:03:06,220 --> 00:03:10,840
So now we're going to create a function in charge of verifying all of this.

42
00:03:10,990 --> 00:03:15,110
So there's something fundamental about functions which do these tests.

43
00:03:15,130 --> 00:03:17,960
Their names must start with the word test.

44
00:03:17,980 --> 00:03:20,950
Otherwise, the software won't find your test.

45
00:03:21,340 --> 00:03:24,160
So this will be named test uppercase.

46
00:03:24,250 --> 00:03:28,630
Then you can give any name you want, but make sure it starts with test.

47
00:03:29,140 --> 00:03:33,310
It will have self as argument and we'll look at three aspects.

48
00:03:33,340 --> 00:03:39,130
First, I'll enter any word in order to see what happens with the function I've created in change text.

49
00:03:39,930 --> 00:03:42,660
This can be wird, equal to study.

50
00:03:43,570 --> 00:03:44,050
Now.

51
00:03:44,050 --> 00:03:47,300
I'll check if my function returns this word uppercase.

52
00:03:47,710 --> 00:03:53,950
Result is another variable that I'll create here and it will contain the outcome of applying the function.

53
00:03:53,980 --> 00:04:00,700
That is the method all capital which I have in changed text which was applied to my test word.

54
00:04:01,180 --> 00:04:07,570
So I'll call change text dot all capital here and I'll pass the word as parameter to it.

55
00:04:08,050 --> 00:04:11,860
The same word I created up here, which is study in this case.

56
00:04:12,400 --> 00:04:14,800
So now we have those two variables.

57
00:04:15,630 --> 00:04:23,160
Now we'll call self assert equal, which is a method of test case in charge of checking to arguments,

58
00:04:23,160 --> 00:04:25,740
result and the expected answer.

59
00:04:25,860 --> 00:04:31,260
What I as a programmer think should be the result, which is study uppercase.

60
00:04:31,650 --> 00:04:35,820
So I'll type study in uppercase between quotes.

61
00:04:36,770 --> 00:04:39,020
So what will assert equal do?

62
00:04:39,500 --> 00:04:46,130
It will check if result which contains this method is equal to study, which I typed manually so as

63
00:04:46,130 --> 00:04:48,950
to verify that both words are exactly the same.

64
00:04:49,220 --> 00:04:55,940
And if they are, it means that my method all capital is working properly so I could execute this.

65
00:04:55,940 --> 00:05:01,790
But in order for this case to be executed as expected, I need to do something that may seem a little

66
00:05:01,790 --> 00:05:04,550
bit confusing, but I'll explain it soon.

67
00:05:05,210 --> 00:05:13,100
So let's type if underscore, underscore, name, underscore, underscore, equal to underscore, underscore,

68
00:05:13,100 --> 00:05:15,770
main underscore, underscore.

69
00:05:15,800 --> 00:05:25,460
Once again, let's close quotes add colon, enter and if name equals main, then we will call unit test

70
00:05:25,460 --> 00:05:27,980
dot main and add brackets.

71
00:05:28,940 --> 00:05:34,700
Well, I'm sure you don't know what all this is for, and I won't explain it in detail since it's quite

72
00:05:34,700 --> 00:05:35,420
boring.

73
00:05:35,870 --> 00:05:39,410
I'll leave detailed notes so that you can download and read them.

74
00:05:39,770 --> 00:05:41,480
But I'll explain this plainly.

75
00:05:41,690 --> 00:05:44,810
Most programming languages have a class named Main.

76
00:05:44,840 --> 00:05:48,740
It is the entry point to start the execution of any program.

77
00:05:49,130 --> 00:05:51,410
Still, Python doesn't work like that.

78
00:05:51,470 --> 00:05:56,300
Main is a way to tell the system which function to execute and which to not.

79
00:05:56,810 --> 00:05:58,580
It is a way to protect that code.

80
00:05:58,820 --> 00:06:01,190
So I won't keep on taking up time with this.

81
00:06:01,190 --> 00:06:03,830
So the notes are available for you to download.

82
00:06:03,980 --> 00:06:09,470
Then you'll understand why we typed if name equals main in order to call unit test.

83
00:06:09,830 --> 00:06:12,890
So since we have completed our code will execute it.

84
00:06:12,920 --> 00:06:19,100
However, we won't execute change text but test as to check if change text works properly.

85
00:06:19,670 --> 00:06:22,100
So we'll click on Run and Run Again.

86
00:06:22,640 --> 00:06:27,980
Here we'll execute test and we'll notice that the test quickly reveals its result, which is okay,

87
00:06:28,010 --> 00:06:29,570
meaning there was no problem.

88
00:06:30,340 --> 00:06:31,930
Now we'll do it wrong.

89
00:06:32,050 --> 00:06:37,480
Let's suppose that instead of returning all capital letters, we want the software to return study with

90
00:06:37,480 --> 00:06:43,840
capital S only if we execute it, it will return an error because it didn't work as we expected.

91
00:06:44,620 --> 00:06:44,980
Here.

92
00:06:44,980 --> 00:06:47,380
It says assertion error.

93
00:06:47,620 --> 00:06:53,620
It means that study, which is typed in capital letters, the result is not equal to study, which starts

94
00:06:53,620 --> 00:06:56,890
with capital S and is the result I was expecting.

95
00:06:57,190 --> 00:07:02,020
This lets me know that the method I use didn't return what I had expected because if I want this as

96
00:07:02,020 --> 00:07:07,450
a result, I should use another method and in this case I should use title instead of upper.

97
00:07:08,020 --> 00:07:13,750
Since it is a string method that returns a number starting with a capital letter, so let's execute

98
00:07:13,750 --> 00:07:16,330
it and now we can see the test result is OC.

99
00:07:16,930 --> 00:07:18,910
That's why we use unit test.

100
00:07:19,120 --> 00:07:24,790
We don't use it to check if there are structure errors or style issues like when we learn about pilot

101
00:07:24,820 --> 00:07:28,870
unit test helps us to check if our code returns what we expect.

102
00:07:29,290 --> 00:07:33,250
This code didn't return any kind of error, but it could have malfunctioned.

103
00:07:33,430 --> 00:07:35,020
So we used unit test.

104
00:07:35,870 --> 00:07:40,010
This is quite useful, mainly when dealing with more complex functions than this one.

105
00:07:40,640 --> 00:07:46,730
So I advise you to read the documents regarding unit test because it has a lot to offer and there are

106
00:07:46,730 --> 00:07:49,430
many more methods besides assert equal.

107
00:07:49,460 --> 00:07:52,190
However, it is a very important method for us.

108
00:07:52,610 --> 00:07:59,120
So for more details, read all the documents and lock it up online and obviously use our Q&amp;A section.

109
00:07:59,540 --> 00:08:01,250
So let's go to the next lesson.
