WEBVTT
1
00:00:07.760 --> 00:00:13.790
As you may remember, three days ago, we saw all about opening and manipulating files, and we managed

2
00:00:13.790 --> 00:00:18.170
to do so in part by importing the OSS module.

3
00:00:18.200 --> 00:00:24.050
This module has even more to offer, and since we're going to need it for today's project, let's explore

4
00:00:24.050 --> 00:00:27.410
a bit more of its tools along with those of the shuttle.

5
00:00:27.620 --> 00:00:30.050
Another great module you should know.

6
00:00:30.170 --> 00:00:34.790
Let's add complexity to what we've already learned about opening files.

7
00:00:34.820 --> 00:00:39.170
What if we want to open all the files that are in a certain directory?

8
00:00:39.200 --> 00:00:43.610
What would we have to do if we wanted to move files from one directory to another?

9
00:00:43.640 --> 00:00:48.070
OS and shuttle have all the answers to these and other questions.

10
00:00:48.080 --> 00:00:50.330
Run over to py charm to get to know them.

11
00:00:50.540 --> 00:00:53.090
Let's start by remembering some important points.

12
00:00:53.600 --> 00:01:00.320
If I want to know the current working directory, I can import OS first and print whatever results from

13
00:01:00.320 --> 00:01:00.830
OS.

14
00:01:01.280 --> 00:01:04.220
Get CW dx on the screen.

15
00:01:04.220 --> 00:01:11.340
Remember the name of the method stands for Get Current Working Dictionary, so let's execute it and

16
00:01:11.420 --> 00:01:15.710
so that it returns my current working dictionary which is my desktop.

17
00:01:15.740 --> 00:01:17.480
Python Day nine.

18
00:01:18.560 --> 00:01:23.330
Notice the use of back slashes, which means I'm working with Windows Operating System.

19
00:01:24.560 --> 00:01:26.090
Now I know where I am.

20
00:01:26.270 --> 00:01:28.730
And what if I want to create a file here?

21
00:01:29.450 --> 00:01:35.330
Well, I'll do it by creating a variable named file which will contain the open method which will open

22
00:01:35.330 --> 00:01:37.760
the file course text.

23
00:01:38.570 --> 00:01:44.780
Since this file doesn't exist, the method will create it, and after adding a comma, I'll make it.

24
00:01:44.780 --> 00:01:48.140
So the open method is w so that I can write on it.

25
00:01:49.110 --> 00:01:54.630
Then we'll type, file, write, and we'll just type test text inside.

26
00:01:55.290 --> 00:02:00.330
Then just to be careful, we'll type the file dot close so as to close it.

27
00:02:01.990 --> 00:02:05.080
If we execute this, we won't see anything on the screen.

28
00:02:05.080 --> 00:02:11.050
But if we go to our folder desktop Python Day nine, we'll see that our file exists.

29
00:02:12.040 --> 00:02:18.460
If I click on it, it reads test text, meaning I was able to create it and if I want to see it directly

30
00:02:18.460 --> 00:02:27.730
from python I can print os list dear and if I execute it it will show me all these files in the list.

31
00:02:27.970 --> 00:02:32.590
One of them being cost text, which is the file I just created.

32
00:02:33.670 --> 00:02:38.740
If I want to open all those files, I can do it using a loop because I have them in a list.

33
00:02:39.280 --> 00:02:41.530
We'll see how we can do that in a minute.

34
00:02:41.920 --> 00:02:44.200
Now we'll learn how to move files.

35
00:02:44.230 --> 00:02:51.310
To do so, we'll import the shutting method, which contains a method which we can see if we create

36
00:02:51.310 --> 00:02:52.480
a shuttle object.

37
00:02:52.810 --> 00:02:55.150
That method is known as MOVE.

38
00:02:56.110 --> 00:02:57.530
So what are we going to move?

39
00:02:57.550 --> 00:02:59.230
Well, we'll move course.

40
00:02:59.230 --> 00:03:05.530
Text the file I just created, which is located in the same path I'm working with in Python.

41
00:03:06.130 --> 00:03:08.320
We'll move that file to the path we want.

42
00:03:09.010 --> 00:03:13.390
So we'll located in desktop instead of folder de nine.

43
00:03:15.340 --> 00:03:22.810
To do so, we'll create a path that reads C colon double backslash users double backslash.

44
00:03:22.810 --> 00:03:24.940
Once again win ten.

45
00:03:24.970 --> 00:03:26.380
This is my home path.

46
00:03:26.380 --> 00:03:30.580
You'll use yours and this will be different according to each computer.

47
00:03:31.000 --> 00:03:34.630
And in my case, all this is followed by desktop.

48
00:03:36.140 --> 00:03:39.500
So if I execute this, I won't see anything on the screen.

49
00:03:40.130 --> 00:03:44.720
And if I open this, the course text file won't be there anymore.

50
00:03:45.170 --> 00:03:49.130
But if I go to my desktop, I'll find my file has been relocated.

51
00:03:50.530 --> 00:03:53.770
We can also delete files and there are three ways to do it.

52
00:03:54.730 --> 00:03:57.580
Two of them are contained in the OS module.

53
00:03:57.910 --> 00:04:00.910
If we type dot, we'll get some options.

54
00:04:02.150 --> 00:04:07.580
One of them is unlink, which deletes a file located in a path that we specify.

55
00:04:08.540 --> 00:04:13.880
Then there's another method named MDR, which stands for Remove Directory.

56
00:04:14.480 --> 00:04:18.410
This method deletes an empty folder located in a path that we specify.

57
00:04:19.130 --> 00:04:20.720
So far, so good.

58
00:04:22.310 --> 00:04:27.080
There's a third method which is not contained in OS but in shuttle.

59
00:04:27.740 --> 00:04:32.630
This method is known as RMD Tree, which stands for Removed Tree.

60
00:04:33.140 --> 00:04:36.770
This means it deletes everything inside a path that we specify.

61
00:04:37.010 --> 00:04:39.330
So be very, very careful with this one.

62
00:04:39.350 --> 00:04:41.070
I actually don't recommend it.

63
00:04:41.090 --> 00:04:44.420
I'm mentioning it just so you know, of its existence.

64
00:04:44.870 --> 00:04:50.240
This method deletes a specified folder along with its contents without checking or asking.

65
00:04:50.270 --> 00:04:52.370
And what's more, it's irreversible.

66
00:04:52.640 --> 00:04:55.370
Deleted files are not sent to the recycle bin.

67
00:04:55.370 --> 00:04:56.930
They're completely deleted.

68
00:04:57.410 --> 00:05:01.040
They disappear, and you cannot recover them unless you're a hacker.

69
00:05:01.190 --> 00:05:03.020
Most of us can't do that.

70
00:05:03.950 --> 00:05:09.890
I recommend you use some other options contained in a module which will have to import because it is

71
00:05:09.890 --> 00:05:11.330
not included in Python.

72
00:05:11.990 --> 00:05:17.600
So go to command line to install it and it is a module named send to trash.

73
00:05:18.470 --> 00:05:26.360
You can install it using pip installed followed by the name which is send to as in the number and trash.

74
00:05:27.740 --> 00:05:31.250
Since I already installed it, the software tells me it's a requirement.

75
00:05:31.250 --> 00:05:32.540
Already satisfied.

76
00:05:32.870 --> 00:05:34.460
You'll wait until it's installed.

77
00:05:35.300 --> 00:05:39.830
Now let's go back to py charm and use import to get send to trash.

78
00:05:40.700 --> 00:05:41.710
Here we have it.

79
00:05:41.720 --> 00:05:42.860
Now we can type.

80
00:05:42.860 --> 00:05:43.730
Send to trash.

81
00:05:44.120 --> 00:05:45.060
Send to trash.

82
00:05:45.080 --> 00:05:46.610
Yes, type it twice.

83
00:05:47.270 --> 00:05:49.970
And then we choose which file we want to delete.

84
00:05:50.750 --> 00:05:56.870
Since I don't have it in this folder, I'll move it to day nine and now that I have it, I can delete

85
00:05:56.870 --> 00:05:57.470
something.

86
00:05:57.980 --> 00:06:03.590
Let's delete coarse text, let's execute it and go back to the folder.

87
00:06:03.590 --> 00:06:04.400
Day nine.

88
00:06:04.430 --> 00:06:06.110
The file has disappeared.

89
00:06:07.100 --> 00:06:10.100
If I go to recycle bin, I'll find my file.

90
00:06:10.370 --> 00:06:15.650
Therefore, I'm still able to recover and move it to my folder so as to use it later.

91
00:06:16.280 --> 00:06:19.220
This is quite a safer method to delete files.

92
00:06:20.540 --> 00:06:26.900
Now let me show you a method named Walk, which traverses all the directories, folders, subfolders

93
00:06:26.900 --> 00:06:31.340
and files and it finds on its way after we've specified a path.

94
00:06:32.420 --> 00:06:35.270
Walk is an OS method, by the way.

95
00:06:35.780 --> 00:06:42.620
So let's print it out on the screen so as to see what happens, what will walk require it will require

96
00:06:42.620 --> 00:06:43.430
a path.

97
00:06:43.430 --> 00:06:47.330
So I'll specify a path where I've prepared a group of folders.

98
00:06:47.990 --> 00:06:48.860
So look at this.

99
00:06:48.860 --> 00:06:51.380
I have this top folder in my desktop.

100
00:06:51.800 --> 00:06:58.250
Top folder contains two folders, intermediate folder one and intermediate folder two, and it also

101
00:06:58.250 --> 00:07:03.230
contains a file named file text which doesn't contain anything because it's not necessary.

102
00:07:03.230 --> 00:07:10.400
For this example, intermediate folder one contains two files bottom file one and two, and intermediate

103
00:07:10.400 --> 00:07:12.590
file two doesn't contain anything.

104
00:07:13.590 --> 00:07:16.650
This is the little tree I've created as an illustration.

105
00:07:17.190 --> 00:07:22.740
So it we'll make walk, traverse top folder and show us everything that's stored inside.

106
00:07:23.760 --> 00:07:29.310
I'll paste the path I need and I already copied it to the clipboard and I'll execute this.

107
00:07:29.760 --> 00:07:34.670
It shows me there's a generator object which is curious and it is located here.

108
00:07:35.350 --> 00:07:39.940
So we're not saying what it contains because this is a generator that provides us with information as

109
00:07:39.940 --> 00:07:40.750
we ask for it.

110
00:07:41.050 --> 00:07:44.080
As a result, it doesn't take up any memory space.

111
00:07:44.200 --> 00:07:47.910
Imagine if we had 1000 folders and files inside top folder.

112
00:07:47.920 --> 00:07:53.170
This generator would prevent us from taking up memory space until we ask for that data.

113
00:07:53.560 --> 00:07:55.180
And how can we ask for them?

114
00:07:55.870 --> 00:07:58.990
We can easily do that using an iterator.

115
00:07:59.410 --> 00:08:02.680
We'll paste the path inside a variable named path.

116
00:08:03.250 --> 00:08:06.250
Let's delete this because we don't need need it anymore.

117
00:08:06.490 --> 00:08:08.230
And let's create an iterator.

118
00:08:08.680 --> 00:08:13.150
Let's go back to what I said a few minutes ago, which is very important.

119
00:08:13.600 --> 00:08:20.800
Walk contains the path it is located in and it also contains the subfolders and files that are located

120
00:08:20.800 --> 00:08:21.730
in that path.

121
00:08:22.120 --> 00:08:29.020
This means that work will create tuples with three types of information path, subfolders and files,

122
00:08:29.500 --> 00:08:34.570
so it will store that information which will be iterated over in three variables.

123
00:08:35.720 --> 00:08:46.130
So for each folder subfolder and file found in OS dot walk in path, which is the one we stored in the

124
00:08:46.130 --> 00:08:46.790
variable.

125
00:08:47.630 --> 00:08:47.950
Okay.

126
00:08:47.990 --> 00:08:51.860
First of all, walk will print each of these elements in an orderly manner.

127
00:08:52.640 --> 00:08:59.600
Let's create a string literal that says in folder colon and here we open a call to path.

128
00:09:01.010 --> 00:09:02.450
Then we'll print another string.

129
00:09:02.450 --> 00:09:10.160
Let's roll that says subfolders are colon and we'll go to the next line and create a loop that iterates

130
00:09:10.160 --> 00:09:13.070
over all the subfolders it finds in order to display them.

131
00:09:13.340 --> 00:09:21.230
For each sub that is subfolder and subfolder, we'll make this loop print an indented string literal

132
00:09:21.530 --> 00:09:23.930
so as to leave some space and organize it better.

133
00:09:24.350 --> 00:09:27.950
Let's use indentation backslash t.

134
00:09:28.340 --> 00:09:32.570
Now let's add curly brackets so that sub is printed as well.

135
00:09:32.840 --> 00:09:35.060
That is each subfolder it finds.

136
00:09:35.480 --> 00:09:39.740
Then this loop will also print the files it finds inside those subfolders.

137
00:09:40.190 --> 00:09:44.570
So we'll create another string that reads files are colon.

138
00:09:45.050 --> 00:09:49.400
And let's go down here to start a loop that iterates over the files.

139
00:09:49.700 --> 00:09:54.980
So you may be very confused after you see the result and analyze the code, you'll understand.

140
00:09:55.250 --> 00:10:05.660
So for each phi that is file in file, this loop will print an indented string literal containing phi

141
00:10:05.660 --> 00:10:06.920
in curly brackets.

142
00:10:06.950 --> 00:10:09.080
That is each file it finds.

143
00:10:09.620 --> 00:10:14.930
Once we've finished this, we'll print a line break so as to leave some space between the strings.

144
00:10:15.170 --> 00:10:17.300
So should we print this and see what happens?

145
00:10:17.780 --> 00:10:21.740
Isn't it nice and tidy in this folder, which would be top folder?

146
00:10:21.770 --> 00:10:27.710
The loop found intermediate folder one, intermediate folder two and the files which are these ones?

147
00:10:28.280 --> 00:10:34.640
Then we have the next element of the first loop, the second folder which is o top folder.

148
00:10:35.420 --> 00:10:35.840
I see.

149
00:10:35.840 --> 00:10:37.160
It shouldn't be path here.

150
00:10:37.160 --> 00:10:39.350
I'm sorry, it should be folder.

151
00:10:40.790 --> 00:10:41.210
Okay.

152
00:10:41.210 --> 00:10:44.270
The first loop will now iterate over each folder.

153
00:10:44.300 --> 00:10:46.130
Let's execute it again.

154
00:10:47.240 --> 00:10:53.660
So the first folder was top folder and the second folder was intermediate folder one where the loop

155
00:10:53.660 --> 00:10:57.320
didn't find any subfolder but only these two files.

156
00:10:57.770 --> 00:11:04.220
Lastly, the loop didn't find anything inside intermediate folder two there are no subfolders or files.

157
00:11:04.670 --> 00:11:09.710
This loop iterated over this folder tree and was able to return all this information.

158
00:11:10.160 --> 00:11:15.260
We can even use this in order to find files or folders that meet a specific condition.

159
00:11:16.160 --> 00:11:23.360
For example, instead of printing file when looking for it, we can create an if that checks if file

160
00:11:23.750 --> 00:11:26.810
starts with 2015.

161
00:11:28.580 --> 00:11:34.820
So if the loop finds a file that meets this condition, it will print it using indentation as well.

162
00:11:35.180 --> 00:11:37.280
So let's modify one of the files.

163
00:11:37.280 --> 00:11:42.170
Let's make it start with 2015 so as to get a valid output.

164
00:11:43.580 --> 00:11:46.220
Let's execute it and look at this.

165
00:11:46.340 --> 00:11:49.490
Top folder is showing us folders, but no files.

166
00:11:49.490 --> 00:11:50.810
So why is that?

167
00:11:51.230 --> 00:11:54.770
Because there aren't files starting with 2015.

168
00:11:55.280 --> 00:11:59.870
It did find one file in intermediate folder, just the one that makes the condition.

169
00:11:59.870 --> 00:12:01.730
The other one is not displayed.

170
00:12:02.060 --> 00:12:06.920
So this is a way to look for elements that satisfy some conditions inside a folder tree.

171
00:12:07.100 --> 00:12:11.600
So thanks for being with me here and I'm already heading over to the next lesson.
