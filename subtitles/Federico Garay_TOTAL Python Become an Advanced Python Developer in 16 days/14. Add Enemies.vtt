WEBVTT
1
00:00:08.300 --> 00:00:09.320
So hang in there.

2
00:00:09.320 --> 00:00:11.090
Our game is almost ready.

3
00:00:11.150 --> 00:00:13.670
We can shoot our enemy and make it disappear.

4
00:00:13.670 --> 00:00:18.830
But there's only one which makes it a bit boring to add multiple enemies.

5
00:00:18.830 --> 00:00:20.960
We're going to employ a specific method.

6
00:00:21.470 --> 00:00:26.870
If we followed the basic rules of object orientated programming, we'd need to create classes for our

7
00:00:26.870 --> 00:00:30.230
enemies as well as many instances of those enemies.

8
00:00:30.770 --> 00:00:33.800
In this case, it's important to know how PI game works.

9
00:00:33.800 --> 00:00:37.040
And so we're going to do this by using a simpler method.

10
00:00:37.670 --> 00:00:43.790
We'll create our enemies with a list, and to do so, we'll select all the variables of our enemy and

11
00:00:43.790 --> 00:00:44.750
duplicate them.

12
00:00:45.290 --> 00:00:49.760
And we'll convert everything that's inside the first group of variables to empty lists.

13
00:00:50.390 --> 00:00:55.760
So I'll copy and paste square brackets, and these variables now have empty lists.

14
00:00:56.330 --> 00:00:57.350
The last one.

15
00:00:58.430 --> 00:01:05.240
And now I'm going to add one more variable to the first group which will be number of enemies and lets

16
00:01:05.240 --> 00:01:06.740
enter eight enemies.

17
00:01:06.770 --> 00:01:08.420
In my opinion it's enough.

18
00:01:09.560 --> 00:01:14.510
Now, instead of directly creating these variables and their information, we'll create a four loop

19
00:01:14.510 --> 00:01:17.840
that completes each list with eight enemy registers.

20
00:01:18.890 --> 00:01:25.760
So for each enemy in the range of number of enemies, let's indent all of this so that it is inside

21
00:01:25.760 --> 00:01:26.630
the four loop.

22
00:01:26.900 --> 00:01:32.630
And instead of generating code for these variables, taking advantage of the fact that these are list

23
00:01:32.630 --> 00:01:39.470
names will apply the append method and we'll add to the list the information we had for the variable.

24
00:01:40.790 --> 00:01:46.400
So I'll copy this and append and dot so as to add to each variable.

25
00:01:46.640 --> 00:01:49.970
Let's not forget the closing bracket, of course.

26
00:01:52.700 --> 00:01:54.260
So here we have a code.

27
00:01:54.590 --> 00:02:01.250
Once the program is executed, this code generates empty lists, enemies and a for loop that iterates

28
00:02:01.250 --> 00:02:05.360
over all those lists as many times as the number of enemies we want to create.

29
00:02:06.050 --> 00:02:09.980
In each iteration, we created eight indexes in each variable.

30
00:02:10.220 --> 00:02:16.790
The first index of each list corresponds to enemy one, and the second index corresponds to enemy two

31
00:02:16.790 --> 00:02:17.720
and so on.

32
00:02:18.980 --> 00:02:24.980
So now we have to make sure that inside the game loop, our program identifies which enemy is being

33
00:02:24.980 --> 00:02:33.020
executed according to the tasks it's carrying out, like moving to the left, disappearing, etc. Now

34
00:02:33.020 --> 00:02:39.590
we have many enemies and as you can see, this doesn't specify the enemy whose behavior is being modified.

35
00:02:41.120 --> 00:02:47.930
So we'll need another for loop before this modification and for each enemy in the range of number of

36
00:02:47.930 --> 00:02:48.690
enemies.

37
00:02:48.710 --> 00:02:49.820
What will happen?

38
00:02:50.630 --> 00:02:52.300
Let's indent this first.

39
00:02:54.080 --> 00:02:58.820
Well, in each enemy variable, we have to add the e m index.

40
00:02:58.820 --> 00:03:01.880
That is the index present in each iteration.

41
00:03:02.420 --> 00:03:08.270
So let's copy this brackets containing e and M and add it to each enemy variable.

42
00:03:09.380 --> 00:03:13.550
Let's select this block of code that modifies the movements and indent.

43
00:03:13.550 --> 00:03:18.020
It enters the loop and we'll paste the index in each variable.

44
00:03:18.710 --> 00:03:23.240
As a result, our code will move the correct enemy one by one.

45
00:03:24.080 --> 00:03:24.890
All right.

46
00:03:25.070 --> 00:03:30.440
We also have to manipulate everything that's related to the collisions because there's enemy data as

47
00:03:30.440 --> 00:03:34.670
well, and we need to know which enemy is colliding and which isn't.

48
00:03:35.660 --> 00:03:39.440
So inside the same for loop will paste the collision.

49
00:03:40.550 --> 00:03:43.760
So make sure that everything is indented at this level.

50
00:03:44.060 --> 00:03:50.180
This line inside the loop will add brackets and the end m index here.

51
00:03:51.260 --> 00:03:55.460
So let's do it with all the enemy variables, not the bullet ones.

52
00:03:55.880 --> 00:03:57.020
So here.

53
00:03:57.320 --> 00:03:58.100
Here.

54
00:03:58.130 --> 00:03:59.900
Neither here nor there.

55
00:04:00.050 --> 00:04:00.920
No.

56
00:04:00.920 --> 00:04:01.580
No.

57
00:04:01.580 --> 00:04:03.200
And here.

58
00:04:03.200 --> 00:04:03.860
And here.

59
00:04:05.000 --> 00:04:06.050
I think that's all.

60
00:04:06.290 --> 00:04:10.730
And there's one place missing, which is where we make the call to our enemy.

61
00:04:11.420 --> 00:04:14.330
We'll copy it and paste it inside the loop.

62
00:04:15.800 --> 00:04:18.560
We should add the brackets again and again.

63
00:04:18.740 --> 00:04:23.540
And here we should create a third parameter, which is E and M why?

64
00:04:23.870 --> 00:04:26.780
This parameter isn't present in the function definition.

65
00:04:26.780 --> 00:04:30.830
So let's go to the enemy definition and add the third parameter.

66
00:04:32.300 --> 00:04:36.430
We won't write in M because it's a name that already exists.

67
00:04:36.440 --> 00:04:44.450
So we'll put E n for enemy and we'll create the enemy image that corresponds to N in brackets.

68
00:04:44.630 --> 00:04:50.810
Now this code will know that the images it has to execute every time the function is called are different.

69
00:04:52.130 --> 00:04:57.830
So we can see in this call, each of those images will correspond to the enemy that's being called in

70
00:04:57.830 --> 00:04:59.480
each iteration of our loop.

71
00:05:00.590 --> 00:05:02.060
So this should be working.

72
00:05:02.060 --> 00:05:03.500
So let's execute it.

73
00:05:04.430 --> 00:05:07.550
Here they are, and we're about to shoot.

74
00:05:07.640 --> 00:05:10.040
So let's see if we can shoot one.

75
00:05:10.070 --> 00:05:10.880
Great.

76
00:05:11.510 --> 00:05:13.910
So when we shoot, it disappears.

77
00:05:13.950 --> 00:05:17.270
Another one appears, which means that we're going to get killed.

78
00:05:17.420 --> 00:05:20.030
So there are too many enemies now.

79
00:05:20.480 --> 00:05:23.600
So maybe I should have entered five or six.

80
00:05:24.080 --> 00:05:25.190
Okay, wait.

81
00:05:25.190 --> 00:05:26.780
Let's kill the ones below.

82
00:05:27.410 --> 00:05:29.180
I'm sorry I got carried away.

83
00:05:29.480 --> 00:05:33.680
So the fact is that the score is updated here as I kill my enemies.

84
00:05:33.680 --> 00:05:38.900
And I think it would be better if the score appeared inside the screen and not inside the console.

85
00:05:38.930 --> 00:05:40.430
So we're going to go do that.

86
00:05:40.430 --> 00:05:45.740
And we're also going to program the main character's death, our game over in our next lesson.

87
00:05:45.740 --> 00:05:47.450
So I'll see you there.
