1
00:00:08,480 --> 00:00:10,520
Welcome to the lesson on NumPy.

2
00:00:10,760 --> 00:00:13,730
This is one of the cornerstones of data science.

3
00:00:14,000 --> 00:00:19,400
If you want to work with python applied to data science, you will need to know NumPy, which is the

4
00:00:19,400 --> 00:00:23,600
standard library for performing large scale numerical operations.

5
00:00:24,320 --> 00:00:26,000
NumPy is very powerful.

6
00:00:26,270 --> 00:00:30,320
It has a lot of methods and properties to work with operations and numbers.

7
00:00:30,680 --> 00:00:36,320
It has some elements that we have not known so far, which we are going to go into right now.

8
00:00:36,650 --> 00:00:41,930
First of all, I'm going to emphasize that you should visit the official numpy documentation.

9
00:00:42,290 --> 00:00:44,120
I'll leave you a link in the resources.

10
00:00:44,120 --> 00:00:49,940
And it's very important to know it and to know how to navigate it, because numpy is so huge that we

11
00:00:49,940 --> 00:00:54,740
could never cover it in a course no matter how many 100 hours we give it.

12
00:00:54,770 --> 00:00:59,390
Here you will have everything you need to know how to get the most out of this powerful tool for data

13
00:00:59,390 --> 00:01:00,120
science.

14
00:01:00,140 --> 00:01:04,610
So what you're seeing on the screen is a notebook that I have written, especially for you to get to

15
00:01:04,610 --> 00:01:05,510
know NumPy.

16
00:01:05,840 --> 00:01:10,100
You will be able to connect to this notebook through the link that I will leave in the resources to

17
00:01:10,100 --> 00:01:10,880
access it.

18
00:01:11,120 --> 00:01:16,100
It is in a drive document and you will be able to have it at your fingertips, but you will not be able

19
00:01:16,100 --> 00:01:21,080
to edit it because if all the students edited it, it will be destroyed in half a day.

20
00:01:21,590 --> 00:01:23,330
So you're going to have to have a copy.

21
00:01:23,600 --> 00:01:27,920
So you'll be able to click on the button here which says copy to drive.

22
00:01:28,280 --> 00:01:34,100
And from then on you'll be able to go to write on a copy of this document that you'll have stored on

23
00:01:34,100 --> 00:01:35,120
your own device.

24
00:01:35,360 --> 00:01:36,980
Here, below the instructions.

25
00:01:36,980 --> 00:01:43,730
Let's start by importing into NumPy and we'll do that using the nickname so we can refer to NumPy as

26
00:01:43,730 --> 00:01:44,570
NP.

27
00:01:45,290 --> 00:01:48,950
So we type import numpy as NP.

28
00:01:50,450 --> 00:01:58,640
Now we can call numpy just by typing NP and remember that this import is not implemented until we run

29
00:01:58,640 --> 00:01:59,360
this cell.

30
00:02:00,170 --> 00:02:05,570
Well, let's get to know one of the most important elements in numpy, which are arrays.

31
00:02:06,140 --> 00:02:10,280
An array is an array of data organized in different dimensions.

32
00:02:10,940 --> 00:02:16,550
This will start out as something similar to lists, but you'll see that as it gets more complex, you'll

33
00:02:16,550 --> 00:02:18,260
notice the difference clearly.

34
00:02:19,010 --> 00:02:20,960
So let's write our first array.

35
00:02:21,500 --> 00:02:27,920
We're going to call it a1d array because it's going to be a one dimensional array.

36
00:02:28,610 --> 00:02:33,260
And for that reason, we can say that this array is going to be very similar to a list.

37
00:02:34,640 --> 00:02:39,020
So this variable is going to contain an object and p dot array.

38
00:02:39,260 --> 00:02:44,690
And in brackets, we're going to create a list that has the numbers one, two, three, four and five

39
00:02:44,690 --> 00:02:45,050
in it.

40
00:02:46,580 --> 00:02:49,820
This is an array that has only one dimension.

41
00:02:50,240 --> 00:02:52,280
What do we mean by one dimension?

42
00:02:53,090 --> 00:02:55,610
It has one length, which is five units.

43
00:02:56,000 --> 00:02:57,800
And that's the only dimension it has.

44
00:02:58,460 --> 00:03:01,430
We will see what the other dimensions of an array can be.

45
00:03:03,140 --> 00:03:08,930
If we want to create the two dimensional array, we will create another array called array two DX and

46
00:03:08,930 --> 00:03:16,460
it will be the same as an NP of type array, which will contain a list that contains in turn two lists.

47
00:03:16,580 --> 00:03:22,310
Then we put brackets again to write the first of these two lists, which is going to contain one, two

48
00:03:22,310 --> 00:03:23,240
and three.

49
00:03:24,410 --> 00:03:30,290
This is the first element of this two dimensional array, but it's missing its second dimension.

50
00:03:30,890 --> 00:03:35,540
So after the brackets that enclose this first element, we're going to put a comma.

51
00:03:35,990 --> 00:03:39,710
If you want, you can press enter to visualize it a little bit better.

52
00:03:40,730 --> 00:03:47,120
And here we will write the second list, of course, in square brackets, which will contain four,

53
00:03:47,120 --> 00:03:48,380
five and six.

54
00:03:50,060 --> 00:03:53,700
You're already looking at a two dimensional array here.

55
00:03:53,720 --> 00:03:58,250
I'm declaring it, but we're not yet seeing how it's going to look on screen.

56
00:03:58,310 --> 00:04:04,280
But I want you to have the notion that the two dimensions are the two lists that we have inside our

57
00:04:04,280 --> 00:04:04,790
array.

58
00:04:05,240 --> 00:04:11,360
The dimension that array has is two by three because it is like a table that is too high.

59
00:04:11,390 --> 00:04:15,560
The two rows and three wide because it has three columns.

60
00:04:16,940 --> 00:04:19,670
But we can also create arrays of three dimensions.

61
00:04:19,760 --> 00:04:25,670
We can write array three D, which is going to be equal to an NP array.

62
00:04:26,090 --> 00:04:32,900
And this first is going to have a set of square brackets to wrap all the content and the whole array.

63
00:04:33,140 --> 00:04:39,440
Then come the square brackets that serve to enclose the first table like this one above, which is a

64
00:04:39,440 --> 00:04:40,910
two by three table.

65
00:04:42,140 --> 00:04:46,190
In fact, let's copy that table so we don't have to write it all over again.

66
00:04:46,520 --> 00:04:48,710
So I copy and paste it here.

67
00:04:50,060 --> 00:04:55,190
After this second bracket, we put a comma because our second table is coming up.

68
00:04:55,850 --> 00:05:00,680
Here we open the brackets for the second table, and now we open the square bracket.

69
00:05:00,840 --> 00:05:06,930
It's for the first line of that table, which is going to have the numbers seven, eight and nine.

70
00:05:08,760 --> 00:05:13,830
So after closing this bracket, we put comma to write the second line of this second table.

71
00:05:14,310 --> 00:05:15,870
I hope you're not getting dizzy.

72
00:05:16,470 --> 00:05:23,190
And here we're going to put the numbers that follow, which would be ten, 11 and 12.

73
00:05:23,940 --> 00:05:27,510
So as you can see here, I have slightly more complex drawing.

74
00:05:27,900 --> 00:05:33,600
But if you analyze where each of the brackets open and close, you will see that we have two tables,

75
00:05:33,600 --> 00:05:35,850
each contained with six numbers.

76
00:05:36,240 --> 00:05:40,230
And each of these tables is too high by three wide.

77
00:05:41,010 --> 00:05:47,970
In total, our three D array has 12 elements organized in a two by two by three layout, i.e. two tables

78
00:05:47,970 --> 00:05:49,890
of two rows and three columns.

79
00:05:50,280 --> 00:05:51,680
Okay, let's run it.

80
00:05:51,690 --> 00:05:53,850
So all this exists in the compiler.

81
00:05:55,020 --> 00:06:00,510
Now I want you to see this statement that says that for each of these arrays, we can get its properties,

82
00:06:00,510 --> 00:06:06,240
such as its shape, its number of dimensions, the data type and the size.

83
00:06:07,260 --> 00:06:10,560
Let's see how we can get this information for each of these arrays.

84
00:06:11,400 --> 00:06:19,230
We do this with properties, for example, with array one D and we use DOT to call its properties.

85
00:06:19,560 --> 00:06:26,180
We're going to ask it to show us the shape property, then to do the same array.

86
00:06:26,190 --> 00:06:32,160
We're going to ask it to show us its number of dimensions with the property n dim.

87
00:06:32,790 --> 00:06:40,710
We're also going to ask it to show us its data type through D type, and we're also going to ask it

88
00:06:40,710 --> 00:06:42,360
to show us its size.

89
00:06:44,070 --> 00:06:49,290
And we can add one more, which is the type of array one D.

90
00:06:51,120 --> 00:06:58,020
If we run this, we get the following first its shape, which is five wide and nothing more.

91
00:06:58,710 --> 00:07:00,600
It has no other dimensions.

92
00:07:01,050 --> 00:07:03,510
Then after the comma there is nothing.

93
00:07:04,200 --> 00:07:10,320
It's a single element tuple that tells us that the shape of this array is five elements along, but

94
00:07:10,320 --> 00:07:12,270
it has no height or depth.

95
00:07:13,920 --> 00:07:20,820
Then the number of dimensions tells us that it has one, as we already know, and the type of data that

96
00:07:20,820 --> 00:07:23,430
our array has are integer values.

97
00:07:24,690 --> 00:07:32,370
The size is five because it has five elements and the type of this array is a numpy and the array.

98
00:07:33,390 --> 00:07:36,330
So that's what we get when we ask for its attributes.

99
00:07:37,050 --> 00:07:40,080
So let's do the same for the 2D and 3D arrays.

100
00:07:40,530 --> 00:07:49,290
Changing here, the variable names, there are quite a lot of them and we run it and here we have that

101
00:07:49,290 --> 00:07:52,230
shape is two in height and three in width.

102
00:07:52,770 --> 00:07:54,420
First report the height.

103
00:07:55,830 --> 00:07:57,420
It has two dimensions.

104
00:07:58,050 --> 00:08:00,150
It has the same data types.

105
00:08:00,600 --> 00:08:02,250
It has six elements.

106
00:08:02,550 --> 00:08:04,650
And it's the same data type.

107
00:08:05,490 --> 00:08:09,630
So now let's switch to 3D, but with multiple cursors.

108
00:08:11,930 --> 00:08:12,910
I'm perfect.

109
00:08:12,920 --> 00:08:19,520
We run it and it's going to show us that the shape is too deep, i.e. it has to tables by too high and

110
00:08:19,520 --> 00:08:20,420
three long.

111
00:08:21,050 --> 00:08:22,940
It has three dimensions.

112
00:08:23,570 --> 00:08:30,710
They are also integers and it has 12 elements and it is also the same data type.

113
00:08:31,670 --> 00:08:34,010
So now we're going to import PANDAS.

114
00:08:34,220 --> 00:08:37,670
Just to give you a glimpse so that you can see what pandas is.

115
00:08:38,690 --> 00:08:41,180
Pandas complements Python very well.

116
00:08:41,630 --> 00:08:45,530
It's another library for manipulating analysing data in Python.

117
00:08:46,040 --> 00:08:50,630
It is built on top of NumPy, so a lot of functionality is similar.

118
00:08:51,560 --> 00:08:57,800
And we're going to use pandas to work with structured data sheets, structured data sheets, organized

119
00:08:57,800 --> 00:09:05,260
information in rows and columns, but no longer in an imaginary way, as we do with a raise in NumPy,

120
00:09:05,270 --> 00:09:07,550
we actually in a kind of spreadsheet.

121
00:09:08,060 --> 00:09:13,460
In fact, if you are familiar with Excel, we can say that PANDAS is the Excel of Python.

122
00:09:14,480 --> 00:09:19,910
So now let's import Pandas with import pandas as PD as nickname.

123
00:09:20,900 --> 00:09:26,780
And we're going to create a variable called data that contains a PANDAS data frame.

124
00:09:27,440 --> 00:09:32,840
Let's create a structure dataframe from our to the array and let's see what gets formed here.

125
00:09:33,350 --> 00:09:36,350
So we call data so that it can be printed.

126
00:09:36,710 --> 00:09:39,650
We will not sell and look what we get back.

127
00:09:40,760 --> 00:09:47,210
Now it is clear that PANDAS is the excel of NumPy because it organized our array which had these six

128
00:09:47,210 --> 00:09:49,700
elements in two dimensions of height and width.

129
00:09:50,580 --> 00:09:57,690
This time in columns and rows, putting in its headers and index, which always starts from zero of

130
00:09:57,690 --> 00:09:59,250
the rows and columns.

131
00:09:59,580 --> 00:10:02,940
In the next lesson, we're going to know more about pandas.

132
00:10:03,060 --> 00:10:06,810
But I wanted to show it to you just so you can see what it does.

133
00:10:07,920 --> 00:10:11,340
So now let's create an array of size four by three.

134
00:10:11,580 --> 00:10:13,440
And made up of only ones.

135
00:10:14,460 --> 00:10:17,250
We could write all of those ones manually, one by one.

136
00:10:17,430 --> 00:10:19,710
But we're going to do it in a simpler way.

137
00:10:19,950 --> 00:10:27,000
We're going to create a variable called ones containing a numpy dot ones to which in brackets we're

138
00:10:27,000 --> 00:10:33,690
going to put a tuple where we put its dimensions, which, as we said, will be four high and three

139
00:10:33,690 --> 00:10:34,320
wide.

140
00:10:35,220 --> 00:10:42,630
So we call ones run our cell and we get an array that's automatically created containing a four by three

141
00:10:42,630 --> 00:10:45,000
table with all our ones in there.

142
00:10:46,950 --> 00:10:53,400
If we wanted it to be zero and it was three dimensions two wide, four high and three long, we would

143
00:10:53,400 --> 00:10:54,420
do it like this.

144
00:10:54,420 --> 00:11:03,300
We would say zero is equal to an NP dot zeros and in parentheses we put the dimensions in a tuple two

145
00:11:03,300 --> 00:11:05,520
wide for high and three long.

146
00:11:07,020 --> 00:11:09,810
We call zeros so we can see it.

147
00:11:10,110 --> 00:11:17,220
And here we have our two dimensional array, the front table and the back table, and both four by three,

148
00:11:17,730 --> 00:11:19,500
all with pure zeros.

149
00:11:20,430 --> 00:11:27,170
And now let's see how we can create an array of numbers that goes from 0 to 100, but jumps from 5 to

150
00:11:27,170 --> 00:11:27,540
5.

151
00:11:28,020 --> 00:11:29,790
There are methods to do that, too.

152
00:11:30,360 --> 00:11:35,850
So we're going to create an array that we're going to call array one, which is going to be equal to

153
00:11:35,850 --> 00:11:45,410
numpy arrange that has the following information in parentheses from 0 to 100 and that jumps from 5

154
00:11:45,410 --> 00:11:46,290
to 5.

155
00:11:47,160 --> 00:11:55,530
So we call array one and here we have a one dimensional array which goes from 0 to 95 because 100 is

156
00:11:55,530 --> 00:11:56,610
not included.

157
00:11:57,840 --> 00:12:02,910
If we put one one now, we would find the 100 at the end of our array.

158
00:12:03,920 --> 00:12:12,020
We also create an array of integer random numbers between zero and ten with two dimensions two by five.

159
00:12:12,890 --> 00:12:18,020
And we don't need to import random because numpy includes a whole module of random numbers.

160
00:12:18,620 --> 00:12:29,270
So we create an array too, which is equal to NP random, which is already built in random to have random

161
00:12:29,270 --> 00:12:33,260
integers and we're going to make them between zero and ten.

162
00:12:34,250 --> 00:12:40,730
And the third value or parameter is a tuple with the dimensions of our array which is going to be too

163
00:12:40,730 --> 00:12:42,200
high and five long.

164
00:12:42,900 --> 00:12:45,600
We call a rate to execute our cell.

165
00:12:45,600 --> 00:12:48,030
And we find this array of random numbers.

166
00:12:49,200 --> 00:12:54,240
The funny thing is that if we run this cell again, every time we run it, we're going to get different

167
00:12:54,240 --> 00:12:56,370
numbers because they're random numbers.

168
00:12:57,180 --> 00:13:04,410
We can also create an array of decimal random numbers ranging from 0 to 1 of size three by five.

169
00:13:05,430 --> 00:13:06,780
So how do we do this?

170
00:13:07,380 --> 00:13:13,860
Just like with the random library, we can create an array three which is equal to NP random, but this

171
00:13:13,860 --> 00:13:16,620
time we don't call random what we call random.

172
00:13:17,490 --> 00:13:22,380
So if you remember, random brings numbers between zero and one but decimal.

173
00:13:23,490 --> 00:13:26,460
And the parameters we need here are just the dimensions.

174
00:13:26,460 --> 00:13:28,380
Three high by five long.

175
00:13:29,340 --> 00:13:31,710
So we call a ray three to see it.

176
00:13:32,100 --> 00:13:38,280
And we have here our three by five array with these numbers that keep changing if I run it again and

177
00:13:38,280 --> 00:13:38,790
again.

178
00:13:40,140 --> 00:13:46,530
So one thing to consider is that the random numbers are not real random, but generate an illusion of

179
00:13:46,530 --> 00:13:52,620
randomness because it changes what is called the seed that says where the selection of numbers starts

180
00:13:52,620 --> 00:13:53,040
from.

181
00:13:53,970 --> 00:13:57,210
And in fact, we can set the seed to a fixed number.

182
00:13:58,650 --> 00:14:04,380
So let's actually do that by setting that NTP dot random dot seed.

183
00:14:04,380 --> 00:14:06,420
And we set it to 27.

184
00:14:07,650 --> 00:14:13,230
Now I'm going to create the next random, which is going to be in an array of random integers between

185
00:14:13,230 --> 00:14:16,920
zero and ten with dimensions of three by five.

186
00:14:17,910 --> 00:14:19,680
So we already know how to do this.

187
00:14:19,680 --> 00:14:25,200
We create array four, which is equal to np random dot random.

188
00:14:25,650 --> 00:14:34,230
And we're going to ask it for numbers ranging from 0 to 10 and it's going to be a three by five table.

189
00:14:34,680 --> 00:14:36,240
And we run array for.

190
00:14:39,230 --> 00:14:40,820
And look at this array.

191
00:14:42,440 --> 00:14:45,200
We've got those numbers in there, so write them down.

192
00:14:46,130 --> 00:14:48,980
And if we run it again, we have the same numbers.

193
00:14:49,400 --> 00:14:55,070
This is because we have set the seed to the same number and seemingly random numbers stopped appearing.

194
00:14:55,910 --> 00:14:58,520
So what happens when we run the last seed again?

195
00:14:58,970 --> 00:15:03,620
Well, this is different from the previous ones because now our seed is stuck in one place.

196
00:15:03,920 --> 00:15:08,420
So this is the first part of NumPy and we have much more to see.

197
00:15:08,600 --> 00:15:14,870
So I propose that we take a break, have a coffee, and we'll see you in the next part of NumPy in the

198
00:15:14,870 --> 00:15:15,740
next lesson.
