1
00:00:08,090 --> 00:00:09,680
We already have the base.

2
00:00:09,680 --> 00:00:13,430
So now let's transform all of that into executable code.

3
00:00:13,430 --> 00:00:19,910
In this second part of the solution to the Recipe Book Project, we will import the extra modules to

4
00:00:19,910 --> 00:00:22,010
have all the necessary tools.

5
00:00:22,010 --> 00:00:26,840
We will create the most important variable of this program, which is the path.

6
00:00:26,840 --> 00:00:32,270
And finally, we will create two very important functions one that serves to count the recipes and the

7
00:00:32,270 --> 00:00:37,880
recipes folder, and another to run the start menu, which is the backbone of our program.

8
00:00:38,060 --> 00:00:41,930
Let's go over to Pie Charm to move forward with this project.

9
00:00:42,830 --> 00:00:47,690
And now let's start with the second part of the creation of our program, whose skeleton we already

10
00:00:47,690 --> 00:00:53,210
have and write the essential issues we need to move forward first.

11
00:00:53,210 --> 00:00:59,780
The modules we have to export, we will need to import OS, which as you know is a useful module to

12
00:00:59,780 --> 00:01:01,310
navigate through our files.

13
00:01:02,210 --> 00:01:08,810
We're going to import from path lib the object path which is essential to create forgive the redundancy

14
00:01:08,810 --> 00:01:09,530
paths.

15
00:01:10,430 --> 00:01:16,490
Also from OS we're going to specifically import system, the one that allows us to clean the screen

16
00:01:16,490 --> 00:01:18,860
and to eliminate everything we wrote previously.

17
00:01:18,860 --> 00:01:25,550
Every time our menu restarts, it is a visual detail that I think is worth incorporating when programming.

18
00:01:26,510 --> 00:01:32,630
So we're already to create the START menu and we will store it within a function, but we still need

19
00:01:32,630 --> 00:01:35,480
to have a think what the start menu has to do.

20
00:01:36,230 --> 00:01:42,350
It has to welcome, as we said, and then inform that the fire where the files are located, how many

21
00:01:42,350 --> 00:01:45,170
recipes we have, and finally show the menu.

22
00:01:45,710 --> 00:01:51,830
So we will need to build this star menu a variable that contains the path where the files are.

23
00:01:51,860 --> 00:01:53,120
That's paramount.

24
00:01:53,120 --> 00:01:59,300
So my path, this is the name of the variable is going to have a path inside which is composed of the

25
00:01:59,300 --> 00:02:05,750
path home, which is to say the whole path that goes to the parent directory, which may vary from one

26
00:02:05,750 --> 00:02:07,010
computer to another.

27
00:02:07,550 --> 00:02:11,690
And the receipts folder where all the recipes are created are stored.

28
00:02:12,560 --> 00:02:17,420
So I recommend that you should already have them in the parent folder, which is win ten.

29
00:02:17,420 --> 00:02:24,320
In my case here I have the folder recipes with four categories we talked about earlier, each one containing

30
00:02:24,320 --> 00:02:27,170
the two recipes that correspond to each category.

31
00:02:27,590 --> 00:02:33,140
So there's no need for you to write all this content as if it were a real recipe in each of them.

32
00:02:33,140 --> 00:02:35,720
I wrote, This is the recipe and that's it.

33
00:02:36,140 --> 00:02:40,880
Just in an example to verify whether they are being read when we execute them.

34
00:02:41,270 --> 00:02:46,190
So make sure to build that so that everything works properly when you start testing.

35
00:02:47,600 --> 00:02:49,560
I have the variable my path.

36
00:02:49,670 --> 00:02:56,180
Another thing the start menu will need is to show how many recipes there are, and I want to store it

37
00:02:56,180 --> 00:02:57,350
within a different function.

38
00:02:57,350 --> 00:02:59,960
Two, which is the first I'm going to create.

39
00:03:00,050 --> 00:03:06,470
So this is going to be called count recipes and count recipes needs a parameter, which is a path,

40
00:03:06,470 --> 00:03:12,080
and we will put inside this function a counter because if we want to count the recipes and we have a

41
00:03:12,080 --> 00:03:14,930
record of them, a counter variable would be great.

42
00:03:16,050 --> 00:03:20,900
So the counter variable will keep a record of everything we find using a for loop.

43
00:03:20,910 --> 00:03:27,810
So for each text or each file you want to put here found in the path corresponding to the pathway of

44
00:03:27,810 --> 00:03:34,830
pass to it, this loop will verify and look for all the files ending in text by means of the glob method.

45
00:03:35,070 --> 00:03:36,000
Do you remember it?

46
00:03:37,100 --> 00:03:44,120
And remember that the formula here is to type two asterisks and a slash before asterisks dot text so

47
00:03:44,120 --> 00:03:50,150
that it searches not only within the recipes folder, but also in all the folders that I find inside

48
00:03:50,150 --> 00:03:50,900
recipes.

49
00:03:51,440 --> 00:03:58,190
So we type colon and what it's going to do every time it finds a text file, the counter will simply

50
00:03:58,190 --> 00:04:05,660
increase a number in order to, at the end send us back through or return whatever this counter contains.

51
00:04:06,570 --> 00:04:07,230
This way.

52
00:04:07,230 --> 00:04:12,870
Every time I execute count recipes, I will be able to know the number of recipes my folder has.

53
00:04:13,380 --> 00:04:17,940
This number will vary because our program creates or eliminates recipes.

54
00:04:17,970 --> 00:04:23,820
Consequently, it's not a fixed number, so we're all ready to create our start menu.

55
00:04:23,820 --> 00:04:29,760
And this will take time because it requires some visual stuff and there's a lot to write here, so let's

56
00:04:29,760 --> 00:04:31,080
name it start.

57
00:04:31,080 --> 00:04:36,270
So it doesn't need us to pass any parameter to it because it's the first thing executing in our program.

58
00:04:36,780 --> 00:04:42,000
This has to clean the screen first because it's going to execute several times and every time the user

59
00:04:42,000 --> 00:04:47,070
makes a choice or performs an action, this menu will go back to the beginning and when it happens,

60
00:04:47,070 --> 00:04:48,630
we want the screen to be clean.

61
00:04:49,650 --> 00:04:53,370
Thus here we type system and then in quotation marks.

62
00:04:53,400 --> 00:04:56,070
Kels, because I'm working with Windows.

63
00:04:56,400 --> 00:04:59,970
If you use Linux or any other system, you have to type clear instead.

64
00:05:00,870 --> 00:05:03,840
So after that, I would like to print something on the screen.

65
00:05:04,460 --> 00:05:08,930
Let's write something like Welcome to the recipe administrator.

66
00:05:09,200 --> 00:05:10,580
So far, so good.

67
00:05:11,480 --> 00:05:14,690
But for it to be more visible, we're going to add up here.

68
00:05:14,690 --> 00:05:17,620
A divider made up of a chain of asterisks.

69
00:05:17,630 --> 00:05:19,070
50 is enough.

70
00:05:19,250 --> 00:05:22,670
And we will add some more down here to make it look a little bit better.

71
00:05:24,050 --> 00:05:26,630
So see how everything looks on the screen.

72
00:05:26,690 --> 00:05:32,390
And now we execute my recipes, which of course doesn't show anything because I haven't called start

73
00:05:32,390 --> 00:05:32,900
yet.

74
00:05:33,020 --> 00:05:36,860
If I do not call a function, the file's content will never execute.

75
00:05:37,190 --> 00:05:38,420
So now it's okay.

76
00:05:38,420 --> 00:05:40,910
Welcome to the recipe administrator.

77
00:05:41,030 --> 00:05:43,610
So we need for the clear to work better.

78
00:05:43,670 --> 00:05:50,900
So here it shows a little square because we haven't yet configured what inside the bug edit configurations

79
00:05:50,900 --> 00:05:55,550
and here we choose emulate terminal in output console.

80
00:05:56,690 --> 00:06:02,900
We executed again and now we clean this and see that a new banner has formed, which we will complete

81
00:06:02,900 --> 00:06:10,340
by adding first and asterisks multiplied by five concatenating the welcome greeting and at the end also

82
00:06:10,340 --> 00:06:13,760
concatenating with five more Asterix to make it even.

83
00:06:15,020 --> 00:06:17,240
Let's see there OC perfect.

84
00:06:17,240 --> 00:06:19,610
We still need a space before and after welcome.

85
00:06:19,610 --> 00:06:21,230
But look how good our greeting looks.

86
00:06:21,230 --> 00:06:23,150
We can do so much with so little.

87
00:06:23,810 --> 00:06:28,010
Now we're going to do a little line break and tell the user where the files are.

88
00:06:28,040 --> 00:06:28,820
To do so.

89
00:06:28,820 --> 00:06:35,120
We'll create a string literal that says the recipes are in and we add a call that connects the user

90
00:06:35,120 --> 00:06:36,170
to my path.

91
00:06:37,910 --> 00:06:42,830
We will also tell them the number of recipes our folder has by means of another string literal that

92
00:06:42,830 --> 00:06:48,860
reads something like Total Recipes, Colon Space, and then a call to the count recipes.

93
00:06:49,580 --> 00:06:54,950
So we can invoke it from here and pass the my path variable as a parameter so that it can look for the

94
00:06:54,950 --> 00:06:57,530
total number of recipes within my path.

95
00:06:58,430 --> 00:07:00,230
So let's see if it works properly.

96
00:07:00,650 --> 00:07:04,850
The recipes are in the location and total recipes.

97
00:07:04,850 --> 00:07:05,420
Eight.

98
00:07:06,020 --> 00:07:11,480
So since we have shown all the initial information, our next step consists of showing the options menu

99
00:07:11,480 --> 00:07:13,580
and asking the user to select an option.

100
00:07:13,970 --> 00:07:21,320
But since this menu has to show us itself repeatedly till the user chooses correctly, we will put inside

101
00:07:21,320 --> 00:07:22,610
a wild loop.

102
00:07:23,900 --> 00:07:29,630
We will say that while what we want doesn't happen, this will have to keep on repeating itself and

103
00:07:29,630 --> 00:07:31,670
to know whether what we want is occurring or not.

104
00:07:31,670 --> 00:07:37,820
We will create a variable that contains the information we need so the user will make a choice, so

105
00:07:37,820 --> 00:07:39,140
we will store it in the menu.

106
00:07:39,140 --> 00:07:47,330
Choice variable the value x, y x because an incorrect choice it is an option the user cannot use.

107
00:07:47,780 --> 00:07:48,590
In this way.

108
00:07:48,590 --> 00:07:54,380
We make sure the first time the program is executed we can enter the while loop and show the menu.

109
00:07:54,920 --> 00:08:00,020
As long as the user's choice does not meet the conditions we need, it will continue repeating itself

110
00:08:00,020 --> 00:08:01,070
till the user chooses.

111
00:08:01,070 --> 00:08:01,640
Right.

112
00:08:01,820 --> 00:08:07,610
So let's set up the wild loop by creating a condition that checks whether or not the user has chosen

113
00:08:07,610 --> 00:08:10,580
a letter because we expect them to pick a number.

114
00:08:10,850 --> 00:08:18,260
Therefore we say while not menu choice through the is numeric method which serves to check whether the

115
00:08:18,260 --> 00:08:21,110
content is a number though it is in a string.

116
00:08:21,710 --> 00:08:27,470
This is one of the methods you have to discover on your own, maybe other ways to solve it, but I think

117
00:08:27,470 --> 00:08:28,910
it is the most practical.

118
00:08:29,120 --> 00:08:34,040
So another aspect to verify is if the user has picked a number between one and six.

119
00:08:34,280 --> 00:08:38,390
That's why we also add or because two are the conditions to be met.

120
00:08:39,310 --> 00:08:44,950
Keep in mind that menu choice is not within a range that goes from 1 to 7 because the last number is

121
00:08:44,950 --> 00:08:46,060
not inclusive.

122
00:08:46,210 --> 00:08:49,360
And by putting a seven, we make sure that it goes up to six.

123
00:08:50,550 --> 00:08:51,510
These are the options.

124
00:08:51,510 --> 00:08:57,960
But as the user will pass through a string, the menu choice we have to cast it into an int and this

125
00:08:57,960 --> 00:08:59,190
is how it should look like.

126
00:08:59,850 --> 00:09:02,490
We will close the console so that you can see better.

127
00:09:02,580 --> 00:09:08,880
And we add coal on here and this is the condition we have to ask for the loop to keep repeating itself

128
00:09:08,880 --> 00:09:10,140
over and over.

129
00:09:10,710 --> 00:09:13,470
What the loop is going to do is to show the menu.

130
00:09:13,710 --> 00:09:22,560
So we print in here, choose an option colon and now we jump into the part where we print the menu print

131
00:09:22,560 --> 00:09:27,900
and we type three quotation marks to do line breaks here and write everything down here.

132
00:09:28,140 --> 00:09:30,930
The first option is read recipe.

133
00:09:31,410 --> 00:09:34,560
The second one is create new recipe.

134
00:09:35,340 --> 00:09:39,510
And afterward the third option comes, which is create new category.

135
00:09:43,210 --> 00:09:49,150
The fourth option, eliminate recipe option five, eliminate category.

136
00:09:49,540 --> 00:09:53,320
And finally, option number six, leave the program.

137
00:09:53,320 --> 00:09:57,550
So I think everything is okay once it finishes showing us all the options.

138
00:09:57,550 --> 00:10:00,220
What is still missing is the user's input.

139
00:10:00,830 --> 00:10:06,410
Now is when we have to overwrite the content of menu choice, the same variable like the one above with

140
00:10:06,410 --> 00:10:07,670
the user's input.

141
00:10:08,640 --> 00:10:12,990
And we get out of the loop only if the user enters what is right.

142
00:10:13,440 --> 00:10:17,280
And lastly, we put return menu choice.

143
00:10:19,480 --> 00:10:21,910
If we execute it, we will see the options.

144
00:10:21,910 --> 00:10:24,250
And I could intentionally choose something wrong.

145
00:10:24,280 --> 00:10:25,150
For example.

146
00:10:25,150 --> 00:10:26,950
Ah, I see.

147
00:10:26,950 --> 00:10:29,830
All again I choose eight and again.

148
00:10:30,520 --> 00:10:34,480
And if I choose one the program is over because I chose an option.

149
00:10:34,480 --> 00:10:35,500
That was correct.

150
00:10:35,860 --> 00:10:40,630
We could stop here and go to the next lesson to work with the functions we still need to complete our

151
00:10:40,630 --> 00:10:41,230
code.

152
00:10:41,470 --> 00:10:46,300
We have the beginning and the receipt counter, so see you in the next lesson.
