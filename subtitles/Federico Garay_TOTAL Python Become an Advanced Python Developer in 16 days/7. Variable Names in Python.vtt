WEBVTT
1
00:00:07.650 --> 00:00:13.770
In the previous lecture, we learned how to use variables and we saw that we can name our variables

2
00:00:13.770 --> 00:00:15.240
whatever we want.

3
00:00:15.510 --> 00:00:23.370
So if I created a variable in which I'm going to store the name of my dog, it can be called dog or

4
00:00:23.370 --> 00:00:27.060
my dog, or even the letter D.

5
00:00:27.690 --> 00:00:31.890
It will work just the same as long as when I need to invoke it.

6
00:00:31.890 --> 00:00:36.000
I write it exactly the same as when I declared it.

7
00:00:36.510 --> 00:00:42.990
But even though you can write your variable names however you want, here are some rules to follow.

8
00:00:43.650 --> 00:00:48.480
The most important one is to make your code easy to read like text.

9
00:00:48.630 --> 00:00:55.170
If your variable is called dog or dog name, you are making it clear what it contains.

10
00:00:55.170 --> 00:01:00.900
And if I read the sentence in your code, I will understand its logical meaning as easily as when I

11
00:01:00.900 --> 00:01:03.030
read a sentence in plain English.

12
00:01:03.510 --> 00:01:11.100
If in order to type less you put something very simple like D in your variable or something very fancy.

13
00:01:11.100 --> 00:01:13.740
Like My dog has a name and this is it.

14
00:01:13.890 --> 00:01:18.970
Your code will work fine because the machine will read it without problems.

15
00:01:18.990 --> 00:01:25.440
However, if a person has to read it, they will have to make a bigger effort to understand the logic

16
00:01:25.440 --> 00:01:26.380
of your code.

17
00:01:26.400 --> 00:01:28.420
So this is not a good practice.

18
00:01:28.440 --> 00:01:34.920
As a programmer, you will be working in a team regularly, or you even may have to read your code again

19
00:01:34.920 --> 00:01:36.420
in a month or a year.

20
00:01:36.420 --> 00:01:43.920
And when you read variable names like DE or My Dog has a name and this is it, you will regret not giving

21
00:01:43.920 --> 00:01:47.580
more descriptive or simpler to read names.

22
00:01:48.000 --> 00:01:53.490
Another rule is that your variable names must consist of a single unit of text.

23
00:01:53.580 --> 00:01:58.110
This means that you cannot use two or more words separated by spaces.

24
00:01:58.290 --> 00:02:05.200
So if you want your variable to be called student's name, you can use underscores to replace the spaces.

25
00:02:05.220 --> 00:02:11.310
In other languages, it is customary to remove spaces and capitalize the first letter of subsequent

26
00:02:11.310 --> 00:02:13.670
words, but not in Python.

27
00:02:13.680 --> 00:02:16.830
Lowercase and underscores have to be used.

28
00:02:17.220 --> 00:02:21.390
You can also use numbers in your variable names, but not at the beginning.

29
00:02:21.420 --> 00:02:26.340
Variables must always start with a letter and you can put numbers at the end.

30
00:02:26.370 --> 00:02:32.700
As we saw in the example in the previous lecture, if you put them at the beginning, the compiler will

31
00:02:32.700 --> 00:02:34.710
return an error message.

32
00:02:34.740 --> 00:02:41.640
Another rule and this one is mandatory, is that your variable names cannot contain any of these symbols.

33
00:02:41.760 --> 00:02:46.050
So if you want to put an insult, you'd better think of something else.

34
00:02:46.140 --> 00:02:53.910
Finally, you can't name your variables using special keywords like input, print, and many others

35
00:02:53.910 --> 00:02:55.700
that we will learn later.

36
00:02:55.710 --> 00:03:00.060
These are words reserved by Python to structure how the code works.

37
00:03:00.330 --> 00:03:07.110
If you were to call your variable print, it would generate confusion in the code because Python would

38
00:03:07.110 --> 00:03:13.230
not be able to distinguish whether print is a command to display on the screen or a variable that you

39
00:03:13.230 --> 00:03:14.130
have created.

40
00:03:14.760 --> 00:03:20.880
In short, think of these restrictions not as limits to your creativity, but as good practices that

41
00:03:20.880 --> 00:03:26.610
will help you design a readable, easy to understand and pleasant to read code.

42
00:03:27.330 --> 00:03:30.990
Thanks for being here and I look forward to seeing you in the next lecture.
