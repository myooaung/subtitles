1
00:00:08,210 --> 00:00:13,970
We already know how to create classes and because of it, we know how to create individual objects that

2
00:00:13,970 --> 00:00:16,160
are instances of those classes.

3
00:00:16,160 --> 00:00:22,280
Still, our objects are all the same and are all empty because we have not yet learned how to assign

4
00:00:22,280 --> 00:00:25,250
attributes to them when designing the class.

5
00:00:25,700 --> 00:00:30,620
First of all, it is important to distinguish that there are two types of attributes.

6
00:00:31,010 --> 00:00:33,980
On the one hand, there are the class attributes.

7
00:00:34,130 --> 00:00:39,170
These are attributes that belong to the class and therefore will be the same for all objects that are

8
00:00:39,170 --> 00:00:41,990
going to be creating created in that class.

9
00:00:42,140 --> 00:00:48,590
For example, if our class has the attribute wings equal to true, this means that all the bird objects

10
00:00:48,590 --> 00:00:51,150
that we create will have this attribute.

11
00:00:51,170 --> 00:00:52,850
They will all have wings.

12
00:00:53,060 --> 00:00:55,970
On the other hand, there are the instance attributes.

13
00:00:56,300 --> 00:00:59,900
They belong to the instance of the class or object.

14
00:01:00,020 --> 00:01:04,980
There are particular, specific attributes that can be different in each instance.

15
00:01:05,000 --> 00:01:10,190
In our case, for each bird, for example, the color attribute will have a different value for each

16
00:01:10,190 --> 00:01:15,320
bird that we are going to create, maybe black, brown mixture and so on.

17
00:01:15,320 --> 00:01:22,550
Right now in Pie Charm, we are going to learn how to create instance attributes first and then class

18
00:01:22,550 --> 00:01:23,450
attributes.

19
00:01:24,470 --> 00:01:27,020
Let's start by creating instance attributes.

20
00:01:27,200 --> 00:01:32,180
We'll declare our bird class once again and this time will store something inside.

21
00:01:32,720 --> 00:01:35,000
How do we define attributes of a class?

22
00:01:35,600 --> 00:01:39,980
We first use the key word def, the one we use when creating functions.

23
00:01:40,130 --> 00:01:45,680
What we're going to create now, which is the bird class constructor, is technically a method and we'll

24
00:01:45,680 --> 00:01:47,180
create it using def.

25
00:01:47,810 --> 00:01:53,600
Now we have to type two underscores then the word in it and another two underscores.

26
00:01:54,050 --> 00:01:58,130
We'll add brackets and complete this declaration with the keyword self.

27
00:01:58,460 --> 00:02:00,170
All will be explained soon.

28
00:02:00,320 --> 00:02:03,710
And then we'll add some attributes we want to our bird, for example.

29
00:02:03,710 --> 00:02:05,840
Color is an attribute of a bird we have.

30
00:02:06,530 --> 00:02:12,440
We'll type colon enter and now we're inside the definition which is inside the class.

31
00:02:12,830 --> 00:02:15,300
Now we call the keyword self dot.

32
00:02:15,320 --> 00:02:21,020
Choose the word color, which will define this attribute and we enter color as a value.

33
00:02:21,650 --> 00:02:23,420
You may wonder what all this is.

34
00:02:23,600 --> 00:02:25,160
It seems quite confusing.

35
00:02:25,520 --> 00:02:27,680
I promise you'll understand it now.

36
00:02:27,740 --> 00:02:30,200
So let's deal with this little by little.

37
00:02:30,260 --> 00:02:35,300
So we've created our class and define the method that we will assign attributes to our bird.

38
00:02:35,330 --> 00:02:39,170
For this method, we've also passed two parameters in brackets.

39
00:02:39,470 --> 00:02:44,930
The first one is the keyword self, which is mandatory, and the other one is the attribute we're going

40
00:02:44,930 --> 00:02:47,000
to add to our parameter, which is color.

41
00:02:47,480 --> 00:02:50,930
Next, we can call self again and what is self?

42
00:02:51,030 --> 00:02:55,850
There's basically the instance of the objects that are about to be created, the birds.

43
00:02:56,060 --> 00:02:58,610
It will assign the parameter color to its attributes.

44
00:02:58,610 --> 00:02:59,150
Color.

45
00:02:59,630 --> 00:03:05,330
For now, we'll type it like this and execute it one so I can explain it in detail later.

46
00:03:05,600 --> 00:03:09,860
If you haven't fully understood this, don't worry because it will start making sense soon.

47
00:03:10,340 --> 00:03:15,650
What's important here is that I got out of the bird class because I went back to the beginning of the

48
00:03:15,650 --> 00:03:16,430
code line.

49
00:03:16,670 --> 00:03:19,550
So now I'll create an instance of Bird.

50
00:03:19,670 --> 00:03:21,410
It will be named my bird.

51
00:03:21,590 --> 00:03:23,120
It will be equal to bird.

52
00:03:23,120 --> 00:03:28,430
And I'll enter brackets and I'll leave this empty because I want you to see what happens if I execute

53
00:03:28,430 --> 00:03:29,120
our file.

54
00:03:29,540 --> 00:03:31,130
So I got an error message.

55
00:03:31,280 --> 00:03:32,240
Why so?

56
00:03:32,450 --> 00:03:35,120
Because Bird demands that we pass an argument.

57
00:03:35,120 --> 00:03:36,290
The color argument.

58
00:03:36,290 --> 00:03:42,110
And here it says that in it, which is the constructor, is missing one required positional argument,

59
00:03:42,110 --> 00:03:43,010
which is color.

60
00:03:43,370 --> 00:03:48,470
So every time you want to create an object of a class that requires parameters, you must pass those

61
00:03:48,470 --> 00:03:51,230
parameters or else you won't be able to continue.

62
00:03:51,650 --> 00:03:56,600
So we'll a silent value such as black, and if I execute it, I won't get an error.

63
00:03:56,900 --> 00:04:01,250
Actually, I haven't done anything to show on the console, but we don't have error messages.

64
00:04:02,100 --> 00:04:03,720
So now keep in mind the following.

65
00:04:03,960 --> 00:04:09,570
We'll create another variable named wird, which will store a string that says hello as value.

66
00:04:10,050 --> 00:04:12,930
If I type word and enter a dot, then we'll see.

67
00:04:12,930 --> 00:04:17,520
That word contains methods and attributes that are typical of strings because it is a string.

68
00:04:18,180 --> 00:04:20,250
Here we can see and use any of them.

69
00:04:20,970 --> 00:04:23,370
This also works with the classes we have created.

70
00:04:23,610 --> 00:04:26,940
If I call my bird, which is the instance of a bird.

71
00:04:28,070 --> 00:04:29,810
And at a dot we'll see.

72
00:04:29,810 --> 00:04:33,860
It contains the color attribute, among other attributes that are typical of classes.

73
00:04:34,040 --> 00:04:36,380
It's the same one I created here.

74
00:04:37,040 --> 00:04:41,180
So I'm creating an object and passing parameters that are mandatory to it.

75
00:04:41,660 --> 00:04:43,820
Our object has that attribute now.

76
00:04:44,090 --> 00:04:48,380
So if I choose it and print it, let's go to the beginning and type print.

77
00:04:48,470 --> 00:04:52,130
And the software will show that the color attribute of my bird is black.

78
00:04:52,700 --> 00:04:57,530
Now that we've seen how this works and how we can look for the properties of our objects, I want us

79
00:04:57,530 --> 00:05:01,680
to try to understand this structure in it is a method.

80
00:05:01,700 --> 00:05:04,250
It is what we call the class constructor.

81
00:05:04,550 --> 00:05:10,190
Every time we create a class Python will automatically call its constructor to see what requirements

82
00:05:10,190 --> 00:05:11,210
that class has.

83
00:05:11,540 --> 00:05:15,830
That is to say what attributes it will need to build the object correctly.

84
00:05:16,100 --> 00:05:21,440
In it is where we establish the attributes which we want to be assigned to an instance that is created

85
00:05:21,440 --> 00:05:22,460
from this class.

86
00:05:23,000 --> 00:05:28,250
That's why we had to pass this value when creating an instance of Bird, because the software used in

87
00:05:28,250 --> 00:05:30,680
it to see what was being required.

88
00:05:31,250 --> 00:05:34,490
So Python demands that we always enter this explicitly.

89
00:05:35,030 --> 00:05:41,060
In fact, we could use any word however we use self because it is a standard word and it will allow

90
00:05:41,060 --> 00:05:43,730
other programmers to read our code more easily.

91
00:05:44,240 --> 00:05:48,830
If I enter self you will know it refers to each of the instances of a class.

92
00:05:49,580 --> 00:05:51,740
So let's see the name of our attribute.

93
00:05:52,340 --> 00:05:57,650
Here it is in the first attribute I created, which is color, the fact that we have to type it three

94
00:05:57,650 --> 00:06:04,220
times may be confusing to you, but we have this color in brackets then self color and this is equal

95
00:06:04,220 --> 00:06:07,340
to color, which is the value of self dot color.

96
00:06:07,820 --> 00:06:11,390
So in order for you to understand this, I'll do something I shouldn't do.

97
00:06:11,480 --> 00:06:14,390
Suppose that instead of color, I enter my color.

98
00:06:15,050 --> 00:06:16,250
Look what happens.

99
00:06:16,250 --> 00:06:18,920
This color is perfect, so I'll leave it as it is.

100
00:06:18,920 --> 00:06:23,630
But this color is underlined in red now and the software doesn't recognize it.

101
00:06:24,230 --> 00:06:29,750
If I move the cursor here, it says it is an unresolved reference to a word that doesn't exist.

102
00:06:30,260 --> 00:06:32,720
This means I should also type my color here.

103
00:06:33,710 --> 00:06:37,430
So these two expressions are the same and this one is different.

104
00:06:37,880 --> 00:06:40,310
This is telling us what is each element?

105
00:06:40,580 --> 00:06:43,400
We're working with two different colors or categories.

106
00:06:44,060 --> 00:06:46,850
If I was creating my bird, I don't enter anything here.

107
00:06:46,850 --> 00:06:48,950
The software expect a parameter.

108
00:06:49,910 --> 00:06:54,440
I'll move the cursor here and notice that it's asking me to enter the my color parameter.

109
00:06:54,710 --> 00:06:59,540
It's not asking me to enter the color this one, but to enter my color, which is this one.

110
00:06:59,990 --> 00:07:02,390
So now we'll break down what is going on here.

111
00:07:02,660 --> 00:07:06,050
This color here is the attribute and this one is the parameter.

112
00:07:06,590 --> 00:07:12,200
If I enter different names here, I could enter my attribute and this one was my parameter.

113
00:07:12,230 --> 00:07:14,480
Now we'll see that this is underlined.

114
00:07:14,870 --> 00:07:18,410
So we should type parameter and it will stop underlining things.

115
00:07:19,340 --> 00:07:19,780
Okay.

116
00:07:19,880 --> 00:07:26,120
Color here doesn't exist anymore because now it's dot my attribute look, it's the first one.

117
00:07:26,540 --> 00:07:31,820
So we're creating a definition that says what attributes the object of my bird class will need.

118
00:07:31,970 --> 00:07:37,220
It will need the self attribute to store a parameter and we'll pass that parameter here.

119
00:07:37,850 --> 00:07:39,350
Could we use different words?

120
00:07:39,350 --> 00:07:41,930
Yes, we could, because the software will allow it.

121
00:07:41,960 --> 00:07:47,060
It won't return an error if I type black or anything else to define the parameter of my attribute.

122
00:07:47,180 --> 00:07:50,150
This won't return an error if I execute it.

123
00:07:50,150 --> 00:07:51,620
It says black again.

124
00:07:52,130 --> 00:07:55,310
What you have to understand is that we are passing to each place.

125
00:07:55,490 --> 00:07:57,560
Let's enter all the keywords again.

126
00:07:57,560 --> 00:07:59,240
So a parameter named color.

127
00:07:59,270 --> 00:08:04,580
Then the color attribute needs to be equal to the color parameter, which is the one we're going to

128
00:08:04,580 --> 00:08:07,310
pass when creating the instance of our object.

129
00:08:08,210 --> 00:08:11,900
So I get that this can be difficult, but at the same time it's logical.

130
00:08:11,990 --> 00:08:14,430
It'll start making sense as you use it.

131
00:08:14,450 --> 00:08:20,510
And as I was saying, we could use different words to differentiate attributes from parameters, but

132
00:08:20,510 --> 00:08:23,540
conventionally we use the same name for both.

133
00:08:24,020 --> 00:08:28,550
It may be confusing, but once you start practicing, you will understand the logic and see that it

134
00:08:28,550 --> 00:08:33,410
is a more organized way to define all of this because you don't need so many names.

135
00:08:33,530 --> 00:08:37,910
So another interesting fact is that we can pass any attributes we want to our bird.

136
00:08:38,180 --> 00:08:40,760
So let's add some such as species.

137
00:08:41,060 --> 00:08:46,430
We also have to add self species, which will be the equal to species.

138
00:08:46,430 --> 00:08:48,470
And this is no longer underlined.

139
00:08:49,380 --> 00:08:50,970
The declaration of the variable.

140
00:08:50,970 --> 00:08:56,220
My bird is highlighted here as if the constructor was saying, Hey, you're missing something.

141
00:08:56,220 --> 00:09:00,570
We've entered the color parameter, but the species parameter hasn't been filled in.

142
00:09:01,200 --> 00:09:05,430
So we'll say that our bird is a toucan and the underline is gone.

143
00:09:05,970 --> 00:09:10,080
So if I print my bird color, the console will say it's black.

144
00:09:10,080 --> 00:09:16,590
But if I print my bird dot, notice that we have to choose color and species will say choose species.

145
00:09:17,430 --> 00:09:20,460
And if I print this, the console will say it's a toucan.

146
00:09:21,150 --> 00:09:30,900
I can create a string literal that says My bird is a we call my bird species and it is and we call my

147
00:09:30,900 --> 00:09:32,190
bird color.

148
00:09:32,970 --> 00:09:34,740
So let's print this and we'll see.

149
00:09:34,740 --> 00:09:37,590
My bird is a toucan and it is black.

150
00:09:37,770 --> 00:09:38,700
It worked.

151
00:09:39,480 --> 00:09:44,490
We were able to work with the attributes that we assigned to each of the parameters of the constructor

152
00:09:44,490 --> 00:09:45,300
of Bird.

153
00:09:45,450 --> 00:09:48,060
This is what we call an instance attribute.

154
00:09:48,270 --> 00:09:51,810
It is an attribute in which each object can have a different value.

155
00:09:51,840 --> 00:09:58,410
My bird, one can be black, my bird too can be red, and the other one can be white, and so on.

156
00:09:58,590 --> 00:10:04,770
There can be toucans, canaries, falcons, etc. etc. However, there are class attributes as well.

157
00:10:04,770 --> 00:10:11,430
Just like Phil told you before, class attributes are the same for all the bird objects you create so

158
00:10:11,430 --> 00:10:13,560
we can define them more easily.

159
00:10:13,560 --> 00:10:16,620
Suppose I say the wings attribute is true.

160
00:10:16,650 --> 00:10:21,630
This means all the birds have wings and don't have to do anything more complex than that.

161
00:10:21,930 --> 00:10:27,060
If I want to see the wings attribute of the bird class, I don't even have to create an instance because

162
00:10:27,060 --> 00:10:29,250
all of the objects will have the same value.

163
00:10:29,550 --> 00:10:37,350
So I can see this by printing bird uppercase this time dot and here we have wings.

164
00:10:37,740 --> 00:10:43,140
And if I print bird wings I will get the true value because it is what all the birds have.

165
00:10:43,170 --> 00:10:45,990
I didn't have to use my bird but bird.

166
00:10:46,200 --> 00:10:51,750
However, if I want to see the value of the my bird object, I can do it too because it's a bird and

167
00:10:51,750 --> 00:10:58,890
it will have the same class attributes my bird wings and we can see it is also true.

168
00:10:59,370 --> 00:11:05,070
All the objects share the same class attributes, so this time we could create undefined aptitudes for

169
00:11:05,070 --> 00:11:05,940
our classes.

170
00:11:05,940 --> 00:11:11,400
So after doing some activities, we'll go to our next lecture to see how we can create methods for our

171
00:11:11,400 --> 00:11:12,120
objects.

172
00:11:12,240 --> 00:11:13,170
See you there.
