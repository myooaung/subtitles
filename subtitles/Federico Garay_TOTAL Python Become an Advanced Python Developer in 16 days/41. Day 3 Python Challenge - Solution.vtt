WEBVTT
1
00:00:07.880 --> 00:00:08.360
All right.

2
00:00:08.360 --> 00:00:13.470
I told you things could get complicated, so maybe you manage to figure it all out.

3
00:00:13.490 --> 00:00:16.360
Maybe your parser only works partially.

4
00:00:16.370 --> 00:00:19.100
Or maybe you haven't even managed to get it to run.

5
00:00:19.130 --> 00:00:20.270
Don't worry.

6
00:00:20.300 --> 00:00:25.670
As long as you've suffered a little bit figuring out the code, it is enough to go to the next move

7
00:00:25.670 --> 00:00:31.490
and solve it by opening the doors of learning and you will become more skilled than before.

8
00:00:31.520 --> 00:00:36.760
Also, remember the solution we are going to show you right now is not the only way to do it.

9
00:00:36.770 --> 00:00:41.660
If you have achieved it with different code and it works, it is as valid as ours.

10
00:00:42.140 --> 00:00:47.870
All right, now let's head over and Federico is going to show you how to create a text parser in py

11
00:00:47.870 --> 00:00:48.350
charm.

12
00:00:48.660 --> 00:00:49.700
The now we're in pacha.

13
00:00:49.700 --> 00:00:51.470
I'm ready to create that text parser.

14
00:00:51.800 --> 00:00:56.810
Usually when we create a program, we must first think about which variables we're going to need in

15
00:00:56.810 --> 00:00:58.390
the first place of our text parser.

16
00:00:58.400 --> 00:01:00.690
We're going to need two main variables.

17
00:01:00.710 --> 00:01:05.720
One is going to be the variable text where I want to store the text generated by the user.

18
00:01:05.750 --> 00:01:09.710
And the second variable is going to be the letters that the user is going to enter.

19
00:01:10.460 --> 00:01:12.560
We're going to create these two variables now.

20
00:01:13.190 --> 00:01:17.990
The variable text is going to be an input because it has something that the user is going to enter.

21
00:01:18.560 --> 00:01:23.060
So we're going to put a prompt here that gives some indication of what the user has to do.

22
00:01:23.540 --> 00:01:26.300
For example, enter a text of your choice.

23
00:01:26.870 --> 00:01:29.480
This is what the user will understand that he has to do.

24
00:01:29.510 --> 00:01:35.360
Then we leave a space with a code on there and already we have our input and the letters variable is

25
00:01:35.360 --> 00:01:40.430
the place to store the letters that the user chooses, although they are also going to be inputs.

26
00:01:40.730 --> 00:01:45.200
First, we're going to generate an empty list, which is where they're going to be stored once the user

27
00:01:45.200 --> 00:01:45.830
enters them.

28
00:01:46.290 --> 00:01:48.650
Okay, so these would be my initial variables.

29
00:01:48.770 --> 00:01:54.470
Now I want to make sure that the text that the user enters is transformed into lowercase, because maybe

30
00:01:54.470 --> 00:01:58.910
you remember that is part of this challenge that the letters that we're going to search in the text

31
00:01:58.910 --> 00:02:01.200
could include both upper and lower case.

32
00:02:01.220 --> 00:02:06.440
And one way to do this is to transform all the text into lowercase or uppercase so that there are no

33
00:02:06.440 --> 00:02:07.970
letters of different types.

34
00:02:08.120 --> 00:02:13.250
So we're going to call text, which is already exists as a variable, but we're going to overwrite it

35
00:02:13.250 --> 00:02:15.950
and we're going to ask text to be equal to text.

36
00:02:15.950 --> 00:02:20.570
But applying the lower method that we have here, which means lowercase.

37
00:02:21.380 --> 00:02:24.110
Once we do that now, text will be all in lowercase.

38
00:02:24.730 --> 00:02:26.030
Okay, let's move on.

39
00:02:26.330 --> 00:02:31.460
We're now going to need to ask the user to enter the letters and in turn store them inside the variable

40
00:02:31.460 --> 00:02:33.200
letters, which is a list.

41
00:02:33.230 --> 00:02:34.820
So let's start with an input.

42
00:02:35.210 --> 00:02:40.720
The input is going to say something simple and to the first letter colon space.

43
00:02:40.730 --> 00:02:42.200
And we already have the first command.

44
00:02:43.130 --> 00:02:47.450
But we want to store this in a variable now in which variable?

45
00:02:47.450 --> 00:02:51.630
Not just any variable, we want it to be stored somewhere in the letters variable.

46
00:02:51.650 --> 00:02:54.110
For example, in the first index.

47
00:02:54.110 --> 00:03:00.020
So we say letters point append, which is the method to add something to a list.

48
00:03:00.800 --> 00:03:03.560
Then we're going to put all this inside the parenthesis.

49
00:03:03.860 --> 00:03:10.310
So this input will be immediately added to the letters list as soon as the user confirms his choice.

50
00:03:10.640 --> 00:03:15.470
And his choice will be stored in the zero index because it will be the first thing to be added.

51
00:03:16.040 --> 00:03:19.670
So now we're going to copy this so that this request occurs three times.

52
00:03:20.240 --> 00:03:22.760
And the second one, we're going to ask for the second letter.

53
00:03:23.650 --> 00:03:29.320
And then the third letter and considering the order in which our code is going to be processed, first

54
00:03:29.320 --> 00:03:35.110
one will go to index zero, the second one to index one and the third one to index two.

55
00:03:35.740 --> 00:03:37.390
I hope you follow me so far.

56
00:03:37.570 --> 00:03:42.190
Well, we already have the inputs and we have our text transformed into lowercase.

57
00:03:42.480 --> 00:03:47.710
Now, I also want to make sure that whatever the user enters his letters will be lowercase, because

58
00:03:47.710 --> 00:03:50.200
if the user enters uppercase, we're in trouble.

59
00:03:50.320 --> 00:03:57.670
So after this text, we're going to add a dot and we're going to put lower because technically this

60
00:03:57.670 --> 00:04:02.710
is also a string and therefore what the user enters is going to be transformed into a string.

61
00:04:03.010 --> 00:04:08.350
And what we do here is to make sure that this string, no matter if it's upper or lowercase, that it's

62
00:04:08.350 --> 00:04:10.180
transformed into lowercase.

63
00:04:10.360 --> 00:04:14.320
So now we're going to create a line break to create some space between our text.

64
00:04:14.470 --> 00:04:19.780
We're going to write you remember the slash and the end that shows is an empty line.

65
00:04:20.140 --> 00:04:24.190
And the next thing we're going to do is start returning information to the user.

66
00:04:24.190 --> 00:04:28.930
So we're going to create a title to present the information about how many times his letters are presented

67
00:04:28.930 --> 00:04:29.830
in this text.

68
00:04:30.280 --> 00:04:32.140
So that's the first thing we want to inform him.

69
00:04:32.140 --> 00:04:35.680
So let's do it in capital letters, letter repetition.

70
00:04:37.270 --> 00:04:40.090
This is the third first thing we have to generate with our code.

71
00:04:40.330 --> 00:04:45.580
And if we want to know how many times those letters in the text, we're going to create the variable

72
00:04:45.580 --> 00:04:46.480
to store it.

73
00:04:46.510 --> 00:04:52.240
Let's call it letter repetition, and we're going to make letter repetition equal to what is in text.

74
00:04:52.780 --> 00:04:57.790
It's applying the count method, which is the one that allows us to count a specific value.

75
00:04:58.450 --> 00:05:00.300
And what value are we going to count first?

76
00:05:00.310 --> 00:05:03.010
Well, we're going to count the first of the letters.

77
00:05:03.010 --> 00:05:05.920
That is inside letters in the index zero.

78
00:05:07.180 --> 00:05:11.830
And this is going to return what there is in the index, zero of the letters list, and it's going to

79
00:05:11.830 --> 00:05:13.810
be the first letter that the user entered.

80
00:05:14.550 --> 00:05:19.530
This is going to count how many times there in the text and here in letter repetition we will store

81
00:05:19.560 --> 00:05:20.550
that information.

82
00:05:20.550 --> 00:05:24.270
We should have one of these variables for each of the letters entered by the user.

83
00:05:24.570 --> 00:05:30.240
So we're going to make this letter repetition one, letter repetition two and letter repetition three.

84
00:05:30.570 --> 00:05:34.140
And this is going to be an index one, and this is going to be indexed, too.

85
00:05:34.920 --> 00:05:37.620
So we've already calculated these three options.

86
00:05:37.620 --> 00:05:39.270
Now we need to inform the user.

87
00:05:39.450 --> 00:05:42.180
We can do it with a print that has a literal string.

88
00:05:42.180 --> 00:05:43.660
So we're going to put F.

89
00:05:44.420 --> 00:05:51.380
To begin to compose a sentence that says, for example, we have found the letter and here we put a

90
00:05:51.380 --> 00:05:54.920
key with a reference to letters in the index zero.

91
00:05:55.840 --> 00:05:58.800
Then here it will inform you that the letter has been found.

92
00:05:58.810 --> 00:06:03.100
We have found the letter X repeated, and here comes the number of times it appears.

93
00:06:03.100 --> 00:06:08.890
So we make another key with a reference to the variable letter repetition one and we complete the sentence

94
00:06:08.890 --> 00:06:10.180
with the word times.

95
00:06:10.840 --> 00:06:14.080
And it would be great that the letter actually appears in the quotation marks.

96
00:06:14.080 --> 00:06:19.270
So we're going to put in single quotation marks here so that the letter that we are going to represent

97
00:06:19.270 --> 00:06:24.460
in our string is seen between quotation marks making our sentence much more clear.

98
00:06:25.520 --> 00:06:30.560
We're going to repeat this line twice because we want to say that we've found the next letter, the

99
00:06:30.560 --> 00:06:35.780
one that is in index one, and that the number of times it will be found inside the variable letter

100
00:06:35.780 --> 00:06:41.690
repetition two and the letter repetition three, which is the variable that has that information.

101
00:06:42.260 --> 00:06:44.180
So do you think we're okay so far?

102
00:06:44.240 --> 00:06:46.070
Let's run it and see how we are.

103
00:06:46.490 --> 00:06:48.320
Run and run.

104
00:06:48.800 --> 00:06:51.620
Let's go to text parser and here we have.

105
00:06:51.620 --> 00:06:53.270
Enter a text of your choice.

106
00:06:53.570 --> 00:06:56.640
And here I'm going to paste a sentence from here.

107
00:06:56.690 --> 00:07:00.680
Luis Borges, a very talented Argentinian writer of the 20th century.

108
00:07:01.070 --> 00:07:05.870
The phrase says, You are not what you are by what you write, but by what you read.

109
00:07:06.940 --> 00:07:07.780
Interesting.

110
00:07:08.580 --> 00:07:09.950
Well, let's leave it here.

111
00:07:09.960 --> 00:07:11.580
You can put any text you want.

112
00:07:11.790 --> 00:07:14.010
Now, it asks me to enter the first letter.

113
00:07:14.430 --> 00:07:20.010
Okay, I'm going to ask it to look for E, and then it asks me for the second one and we're going to

114
00:07:20.010 --> 00:07:21.000
make it put.

115
00:07:21.000 --> 00:07:25.430
M And the third one we're going to put a once we hit enter.

116
00:07:25.440 --> 00:07:27.650
Well, it prints letter repetitions.

117
00:07:27.660 --> 00:07:33.330
We have found the letter e repeated five times the M Well, it's never there.

118
00:07:33.660 --> 00:07:34.680
We can check.

119
00:07:34.680 --> 00:07:36.090
And it seems to be like that.

120
00:07:36.360 --> 00:07:38.650
And the letter A appears seven times.

121
00:07:38.670 --> 00:07:44.240
Of course, if you've chosen different letters or even a different text, you will find different values.

122
00:07:44.250 --> 00:07:45.930
So let's move on with the code.

123
00:07:46.230 --> 00:07:50.940
Now, let's move on to the next task, which asks for the number of words in our text.

124
00:07:51.930 --> 00:07:58.770
So we're going to print let's copy this so that we can paste the break line and sign that says number

125
00:07:58.770 --> 00:07:59.550
of words.

126
00:08:00.650 --> 00:08:02.340
And how do we do a word count?

127
00:08:02.360 --> 00:08:06.470
We're going to need to create a variable called words where we can store this information.

128
00:08:07.160 --> 00:08:08.690
And what will words contain?

129
00:08:09.350 --> 00:08:15.380
It will contain our text, but we're also going to apply it to method that you will remember, a string

130
00:08:15.380 --> 00:08:20.570
method which is called split, that allows it to separate the text into portions.

131
00:08:20.600 --> 00:08:22.020
What kind of portions?

132
00:08:22.040 --> 00:08:27.050
Well, if we leave this parenthesis empty, it will separate them by the empty spaces.

133
00:08:27.080 --> 00:08:33.620
That is to say, it will separate our text in words, and this will create a list, then words.

134
00:08:33.620 --> 00:08:36.230
It will be the list that contains the words of our text.

135
00:08:36.500 --> 00:08:39.320
So now I can count how many words are in my list.

136
00:08:39.710 --> 00:08:42.920
And for that, we're going to create directly the sentence that gives the answer.

137
00:08:43.430 --> 00:08:47.270
We're going to make it a little string that is going to say we have found.

138
00:08:47.810 --> 00:08:53.100
And here comes the number of words inside braces, of course, with the length or Len.

139
00:08:53.120 --> 00:08:58.310
If you remember this function of the variable words, this is going to give us a quantity.

140
00:08:59.070 --> 00:09:01.620
So we have found x words in your text.

141
00:09:03.030 --> 00:09:03.630
This should work.

142
00:09:03.630 --> 00:09:04.110
Fine.

143
00:09:04.110 --> 00:09:06.390
So let's run it and see if this working right.

144
00:09:06.750 --> 00:09:08.520
We're going to have the same text.

145
00:09:08.520 --> 00:09:12.990
We're going to put it in any three letters, and here we have the number of words.

146
00:09:13.500 --> 00:09:16.110
So we found 16 words in your text.

147
00:09:16.440 --> 00:09:18.450
So far, this is working pretty well.

148
00:09:18.600 --> 00:09:23.370
So the third part of our challenge was to indicate which letters are the first one and the last one

149
00:09:23.370 --> 00:09:24.150
of our text.

150
00:09:24.480 --> 00:09:30.330
So we're going to paste in a line break again and with a title that says First and last letters.

151
00:09:31.380 --> 00:09:33.620
And we're going to create two more variables.

152
00:09:33.630 --> 00:09:37.560
First letter, which is going to be found using a string method.

153
00:09:38.040 --> 00:09:43.170
Let's say text that is zero index and that will give us the first letter.

154
00:09:43.900 --> 00:09:46.780
And the last letter will be found using the same method.

155
00:09:46.780 --> 00:09:52.720
But since we don't know the amount of letters that our text has, what we do is to use the inverse count.

156
00:09:52.780 --> 00:09:55.930
So we look for whatever is in the index minus one.

157
00:09:55.960 --> 00:09:57.820
So now we already have the variables.

158
00:09:57.820 --> 00:10:03.370
We need to be able to print a sentence that is constructed as a literal string that says the initial

159
00:10:03.370 --> 00:10:04.270
letter is.

160
00:10:04.910 --> 00:10:11.180
So we opened some braces and we put the variable first letter and continue the sentence with comma.

161
00:10:11.630 --> 00:10:13.280
The final letter is.

162
00:10:14.480 --> 00:10:15.950
And also another brace.

163
00:10:15.950 --> 00:10:21.140
But this one contains last letter, which is the other variable that contains our information.

164
00:10:21.620 --> 00:10:27.770
Since their letters, let's make sure they are in single quotes so that our string is not interrupted

165
00:10:27.770 --> 00:10:28.970
here and now.

166
00:10:28.970 --> 00:10:29.840
This should work.

167
00:10:30.320 --> 00:10:31.780
So let's run it again.

168
00:10:31.790 --> 00:10:36.340
I'm going to paste my phrase and let's put in any three letters.

169
00:10:36.350 --> 00:10:39.470
And down here it tells me first and last letters.

170
00:10:39.800 --> 00:10:41.390
The initial letter is Y.

171
00:10:41.390 --> 00:10:42.410
So that's right.

172
00:10:42.710 --> 00:10:46.640
And the final letter is D, which is right to OC.

173
00:10:47.030 --> 00:10:48.570
Our code is working fine.

174
00:10:48.590 --> 00:10:51.050
Notice that this is long but elegant.

175
00:10:51.080 --> 00:10:57.740
Now we're going to replace the headers now to go to the fourth command, which was to get the text reversed

176
00:10:57.890 --> 00:10:59.900
to get the words upside down.

177
00:11:00.110 --> 00:11:02.660
So here we're going to put inverted text.

178
00:11:03.530 --> 00:11:04.760
And how can we do this?

179
00:11:05.090 --> 00:11:10.850
We have a list which is in the words list, which we have here, which has all the words in our text,

180
00:11:10.850 --> 00:11:14.880
and we can take advantage of this variable by applying the reverse method.

181
00:11:14.900 --> 00:11:20.360
So we're going to do it now writing words, and let's add the reverse method that allows us to reverse

182
00:11:20.360 --> 00:11:21.080
its order.

183
00:11:21.530 --> 00:11:27.230
But if we print this now, the only thing that we get is a series of words separated by commas and between

184
00:11:27.230 --> 00:11:28.380
the brackets of a list.

185
00:11:28.400 --> 00:11:30.050
Then we're going to see a list.

186
00:11:30.050 --> 00:11:31.740
But I don't want to see a list.

187
00:11:31.760 --> 00:11:34.760
I want to see these words organized as if it were a sentence.

188
00:11:35.000 --> 00:11:36.740
So let's create a new variable.

189
00:11:37.190 --> 00:11:40.070
This one is going to be called inverted text.

190
00:11:40.930 --> 00:11:46.780
And we're going to make inverted text equal to an empty space between quotes period.

191
00:11:46.780 --> 00:11:52.930
And since an empty space is a string, remember now we can take advantage of the method we learn today,

192
00:11:52.990 --> 00:11:54.460
which is called join.

193
00:11:54.910 --> 00:11:58.570
I'm going to join a list of words separated by space.

194
00:11:58.840 --> 00:12:00.430
And where am I going to get the words?

195
00:12:00.430 --> 00:12:05.470
Well, from the list, words that I've already reversed here, so we can assume that we already have

196
00:12:05.470 --> 00:12:06.940
the value that we're looking for.

197
00:12:07.840 --> 00:12:12.850
I'm going to check it by printing a sentence that is also a literal string and that say something like

198
00:12:12.910 --> 00:12:19.060
If we order your text backwards, it will say, and here we put the braces to make the variable that's

199
00:12:19.060 --> 00:12:22.720
called inverted text, which is the one that contains our answer.

200
00:12:23.020 --> 00:12:28.450
And since we want this to appear in quotes, we select it all and put a single quote at the beginning

201
00:12:28.450 --> 00:12:32.310
and a single quote at the end so that it shows up the way we want it to.

202
00:12:32.830 --> 00:12:33.850
Will it work?

203
00:12:34.000 --> 00:12:34.900
Let's see.

204
00:12:34.900 --> 00:12:38.110
Let's run it and we paste again our text.

205
00:12:38.260 --> 00:12:42.760
We choose any three letters, and here at the end we have the inverted text.

206
00:12:42.760 --> 00:12:48.370
If we order your text backwards, it will say, and here it comes, a pretty weird sentence that has

207
00:12:48.370 --> 00:12:49.060
no meaning.

208
00:12:49.060 --> 00:12:56.020
But it says read have you what by but right you want by our book.

209
00:12:56.050 --> 00:12:58.450
You are not you crazy, huh?

210
00:12:58.810 --> 00:13:01.840
And now we're going to create the last of the instructions.

211
00:13:02.470 --> 00:13:05.800
And this one may be a little more complicated than the previous ones.

212
00:13:05.800 --> 00:13:11.710
So we're going to put the line break here and we're going to put a title that says Looking for the word

213
00:13:11.710 --> 00:13:12.460
python.

214
00:13:14.220 --> 00:13:18.420
Well, I was telling you this might be a little bit more complicated because we still don't really have

215
00:13:18.420 --> 00:13:21.640
the necessary elements to be able to do logical tests.

216
00:13:21.660 --> 00:13:25.980
That is, if something is found or not, we're going to learn those tools pretty soon.

217
00:13:25.980 --> 00:13:29.640
But right now we have to solve it using what we already have.

218
00:13:29.670 --> 00:13:33.930
So this will be somewhat a rudimentary way to do it with the tools we have right now.

219
00:13:34.780 --> 00:13:40.360
So as Phil told you in the previous video, he hinted that it would be good to use Booleans and a dictionary.

220
00:13:40.510 --> 00:13:41.470
So how?

221
00:13:41.770 --> 00:13:42.820
Let me show you.

222
00:13:43.060 --> 00:13:44.890
I'm going to do it in the following way.

223
00:13:45.460 --> 00:13:50.800
First, I'm going to create a variable called is Python, which is the one that will store the information

224
00:13:50.800 --> 00:13:54.310
about whether or not the word Python is found in the text.

225
00:13:54.730 --> 00:13:56.060
So how do I do this?

226
00:13:56.080 --> 00:14:04.510
Remember, I type the word I want to search for Python and ask it if it is in the text then is underscore.

227
00:14:04.540 --> 00:14:09.040
Python will contain the answer to this question, which is in this case.

228
00:14:09.040 --> 00:14:15.280
In the case of the text I included, it will be false because Borges did not know Python.

229
00:14:15.460 --> 00:14:21.820
Well, now I want to know that Python is found or not, and I can get the information as a value, true

230
00:14:21.820 --> 00:14:22.600
or false.

231
00:14:22.990 --> 00:14:28.390
What I need now is to be able to incorporate that word, true or false, to a literal string.

232
00:14:28.540 --> 00:14:34.240
But the problem is that these words will be capitalized and I need them in lowercase to be part of my

233
00:14:34.240 --> 00:14:34.900
sentence.

234
00:14:35.380 --> 00:14:40.060
Actually, I'm going to change them so that in the other words, they will make my sentence more readable.

235
00:14:40.300 --> 00:14:41.980
So I'm going to create the dictionary.

236
00:14:42.430 --> 00:14:43.900
I'm going to type dick here.

237
00:14:43.900 --> 00:14:46.810
And the dictionary that will have only two pairs of elements.

238
00:14:47.350 --> 00:14:52.960
A key that's called true colon and that's associated with the value was all lowercase.

239
00:14:53.620 --> 00:14:58.150
And then we're going to create a second element for this dictionary is going to have the key false.

240
00:14:58.420 --> 00:15:01.540
And we're going to associate it with a string that says was not.

241
00:15:02.560 --> 00:15:08.470
So now I can make some kind of logical comparison where we're going to write a print that is also a

242
00:15:08.470 --> 00:15:11.020
literal string that says the word python.

243
00:15:11.530 --> 00:15:14.500
And here, we have to say, was found or was not found.

244
00:15:15.370 --> 00:15:18.370
And we have those phrases as values in our dictionary.

245
00:15:19.050 --> 00:15:20.910
So how am I going to locate them?

246
00:15:20.940 --> 00:15:22.680
Well, I'm going to make a call.

247
00:15:22.980 --> 00:15:25.050
To whom, too, is Python?

248
00:15:25.050 --> 00:15:29.970
Because is Python has the word true or false since the search has been done?

249
00:15:30.770 --> 00:15:34.010
And where am I going to look for the word true or false?

250
00:15:34.040 --> 00:15:35.720
Well, in my dictionary.

251
00:15:36.020 --> 00:15:39.950
So let's put all of this in curly brackets and write dick here.

252
00:15:40.810 --> 00:15:45.860
So what I'm looking for then is whatever is in the dictionary is a value for the key.

253
00:15:45.880 --> 00:15:47.290
True or false?

254
00:15:47.830 --> 00:15:51.070
That is it is going to tell me was or was not.

255
00:15:51.610 --> 00:15:53.600
So I really hope you follow me at this moment.

256
00:15:53.620 --> 00:15:57.520
If not, please pause the video and view this logic carefully.

257
00:15:57.760 --> 00:15:59.440
So we've completed the sentence.

258
00:15:59.440 --> 00:16:03.310
The word python was or was not found in the text.

259
00:16:04.030 --> 00:16:04.810
Did it work?

260
00:16:04.840 --> 00:16:05.770
Did we get it right?

261
00:16:05.800 --> 00:16:07.670
Did we get it more or less right?

262
00:16:07.690 --> 00:16:10.090
We're going to run it one last time.

263
00:16:10.450 --> 00:16:12.520
So we're going to type the same text.

264
00:16:12.940 --> 00:16:14.680
We're going to type any three letters.

265
00:16:14.680 --> 00:16:18.280
And already all of this we've checked and it's working fine.

266
00:16:18.820 --> 00:16:21.270
So now we have looking for the word python.

267
00:16:21.280 --> 00:16:24.010
The word python was not found in the text.

268
00:16:24.010 --> 00:16:26.590
And the last check we're going to do is run it again.

269
00:16:27.220 --> 00:16:32.590
So here we're going to paste in the text now and I'm going to purposely put Python here, even though

270
00:16:32.590 --> 00:16:33.730
it doesn't make sense.

271
00:16:34.580 --> 00:16:35.720
We're going to hit enter.

272
00:16:36.200 --> 00:16:41.420
We put in any three letters and now we see that at the end of the word python it was found in the text.

273
00:16:41.420 --> 00:16:42.380
So it worked.

274
00:16:42.500 --> 00:16:47.480
So our next parser is now functional and can be used by anyone who is interested in using this little

275
00:16:47.480 --> 00:16:48.140
program.

276
00:16:48.500 --> 00:16:52.970
Please forgive the length of this lecture, but we needed some extra time to deploy everything we set

277
00:16:52.970 --> 00:16:53.720
out today.
