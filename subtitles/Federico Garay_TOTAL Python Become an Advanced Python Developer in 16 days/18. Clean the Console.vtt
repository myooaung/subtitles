WEBVTT
1
00:00:07.910 --> 00:00:13.250
At this early stage of the course, we are creating programs that are not displayed in an attractive

2
00:00:13.250 --> 00:00:19.490
or interactive user interface, but in console, which is basically a system window that displays the

3
00:00:19.490 --> 00:00:20.900
results of our code.

4
00:00:21.320 --> 00:00:27.290
As our program needs to print something on the screen, the print lines are added down one by one,

5
00:00:27.290 --> 00:00:32.600
accumulating one after the other, and the screen only restarts when we execute a new code.

6
00:00:32.630 --> 00:00:39.170
However, during the execution of code, we may need that the console screen is cleared to show something

7
00:00:39.170 --> 00:00:46.130
else without exiting the program, as the Petrom console is actually a simulation of the system console.

8
00:00:46.160 --> 00:00:50.040
This is done differently depending on the ID we are working with.

9
00:00:50.060 --> 00:00:55.100
In our case, Python and the operating system you have on your computer.

10
00:00:55.100 --> 00:00:58.550
To be able to do this in pie chart, we need to do two things.

11
00:00:58.550 --> 00:01:06.380
First, import system from OS, which is the function we need to do, and second, declare the system

12
00:01:06.380 --> 00:01:12.590
function where we want the screen to be cleaned and inside the brackets we must pass an argument that

13
00:01:12.590 --> 00:01:15.500
will depend on the operating system you are working with.

14
00:01:15.530 --> 00:01:21.530
If you're using Windows, you will put seals between quotation marks and if you are using another operating

15
00:01:21.800 --> 00:01:23.510
operating system, right?

16
00:01:23.510 --> 00:01:25.850
Clear between quotation marks.

17
00:01:25.850 --> 00:01:28.880
But that's not all for this to work as we expect.

18
00:01:28.880 --> 00:01:35.270
We must first make a modification in the PI charm configuration, but we will show you that on the computer.

19
00:01:35.270 --> 00:01:40.700
Remember that this way of doing it only works in pi charm and that if you decide to work with another

20
00:01:40.700 --> 00:01:47.510
ID, you will have to investigate the particular way with which the software performs this task.

21
00:01:47.780 --> 00:01:48.110
All right.

22
00:01:48.110 --> 00:01:50.300
Let's get into PI term to see how this works.

23
00:01:50.600 --> 00:01:54.320
And we're here in Pi Charm and we'll illustrate this with an example.

24
00:01:54.740 --> 00:02:01.790
We'll start by creating a variable named name and in which a user will have to input data and we'll

25
00:02:01.790 --> 00:02:05.690
ask the user to enter a name, colon and space.

26
00:02:07.060 --> 00:02:12.740
There will be another variable named age and we'll ask the user to enter an age and that's it.

27
00:02:13.610 --> 00:02:19.370
Then we'll create a print function in which we'll return some basic information to the user, such as

28
00:02:19.370 --> 00:02:20.360
your name is.

29
00:02:20.390 --> 00:02:22.790
Then we type name in brackets.

30
00:02:23.690 --> 00:02:25.100
You know how to do this?

31
00:02:25.100 --> 00:02:27.440
Well, we tell them you are.

32
00:02:27.530 --> 00:02:32.030
We put the age here and we finish it with years old and that's it.

33
00:02:33.170 --> 00:02:40.070
Now, if you execute this run and run and choose this clean console option, enter a name.

34
00:02:40.280 --> 00:02:45.800
My name is Ferry and now the time has come for me to reveal my age.

35
00:02:46.190 --> 00:02:48.440
I'm 45 years old.

36
00:02:48.680 --> 00:02:52.880
And here it says, Your name is Fadi and you are 45 years old.

37
00:02:53.910 --> 00:02:55.130
So everything's perfect.

38
00:02:55.140 --> 00:03:01.320
But suppose that after I enter my personal data, I want the console to clean itself and only show the

39
00:03:01.320 --> 00:03:02.040
answers.

40
00:03:02.340 --> 00:03:07.350
To do this, I need to adopt some approach, just like Phil explained to you.

41
00:03:07.380 --> 00:03:11.340
I first need to import the module that allows me to carry out this task.

42
00:03:11.550 --> 00:03:19.170
From OS we will import sys system has the approach we need.

43
00:03:19.500 --> 00:03:24.630
It's underlined in gray like it's saying why do you import this if you're not going to use it?

44
00:03:24.870 --> 00:03:27.300
Well py charms a bit impatient.

45
00:03:27.300 --> 00:03:29.460
It won't wait for us to implement this.

46
00:03:29.940 --> 00:03:33.990
Now we have to type our system where we want the screen to be cleaned.

47
00:03:34.500 --> 00:03:35.980
That is right here.

48
00:03:36.000 --> 00:03:38.460
This is after the user has entered their data.

49
00:03:38.790 --> 00:03:44.100
And then, according to your operating system, you'll enter a parameter between brackets.

50
00:03:44.430 --> 00:03:48.540
In my case, I type seals since I work with Windows.

51
00:03:48.780 --> 00:03:52.250
If you're using another operating system, you have to type clear.

52
00:03:53.550 --> 00:03:58.200
Now I'm going to show you what happens if I execute this as it is.

53
00:03:59.090 --> 00:04:02.330
I've done everything I needed to do, so it should work.

54
00:04:02.720 --> 00:04:08.180
I'll type 50 here and I'll enter my age here and it remains the same.

55
00:04:08.300 --> 00:04:10.010
It hasn't deleted anything.

56
00:04:10.190 --> 00:04:15.890
There's just a tiny rectangle before the answer, which will be the location of the clear I've created

57
00:04:15.890 --> 00:04:16.340
here.

58
00:04:16.850 --> 00:04:19.490
Well, the second part of this task is missing.

59
00:04:19.640 --> 00:04:23.570
I have to set up Pi charm to emulate a real system console.

60
00:04:23.600 --> 00:04:25.910
In my case, a Windows console.

61
00:04:26.390 --> 00:04:33.560
So we go to run, then debug and then we go to edit configurations which will display a menu in which

62
00:04:33.560 --> 00:04:35.930
we can adjust several options of our console.

63
00:04:36.350 --> 00:04:39.800
Among them, there's emulate terminal in output console.

64
00:04:40.190 --> 00:04:41.120
We'll take it.

65
00:04:42.610 --> 00:04:48.400
So we're enabling this console which belongs to Pi Charm to emulate the Windows console better.

66
00:04:48.730 --> 00:04:53.230
Once I've ticked this option, I'll click on Apply and close the menu.

67
00:04:53.680 --> 00:04:57.040
Now we'll execute it again and see the difference.

68
00:04:58.090 --> 00:04:59.550
So now it looks different.

69
00:04:59.560 --> 00:05:02.050
We can see a flickering white rectangle.

70
00:05:02.350 --> 00:05:08.590
I'll enter my name again, which is very then my age, and I'll change it because I want to be 25 again.

71
00:05:09.490 --> 00:05:15.360
So as you can see, the previous text was deleted since System CLS was executed.

72
00:05:15.370 --> 00:05:21.970
That stands for clean screen and now the result has appeared in programs like The Hangman.

73
00:05:22.000 --> 00:05:27.550
This will come in handy since the system would delete the previous lines every time the user chooses

74
00:05:27.550 --> 00:05:32.050
a letter so the user wouldn't have to see chunks of code piling up.

75
00:05:32.440 --> 00:05:38.680
So we didn't apply this method when creating the game because we had been storing a mine of information

76
00:05:38.680 --> 00:05:41.050
and that would have gotten quite complicated.

77
00:05:41.290 --> 00:05:47.140
So today, however, we thought we'd have room to start using clean screen, which will make our programs

78
00:05:47.140 --> 00:05:50.350
run a clearer code every time we need it.

79
00:05:50.740 --> 00:05:53.170
So this is a way of cleaning our screen.

80
00:05:53.290 --> 00:05:56.530
Now we'll go on to the next lecture, which is more interesting.

81
00:05:56.530 --> 00:05:57.610
So see you there.
