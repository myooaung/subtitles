1
00:00:07,610 --> 00:00:12,530
In this last part of the solution for the DE Six project, we are going to put the finishing touches.

2
00:00:12,530 --> 00:00:17,870
We are going to create the most specific functions such as those for deleting or creating files.

3
00:00:17,870 --> 00:00:23,090
And then we are going to organize the startup of our program so that it functions as we want it to.

4
00:00:23,120 --> 00:00:24,660
I'll see you in Pie Charm.

5
00:00:25,220 --> 00:00:30,170
And in this part of the video we're going to complete what would be the most specific functions, the

6
00:00:30,170 --> 00:00:34,430
read recipe, create recipe, delete recipe functions and so on.

7
00:00:34,760 --> 00:00:38,780
And we're going to start creating a function that allows us to read a recipe.

8
00:00:38,930 --> 00:00:42,260
And here we're going to start using all the methods that we have learned.

9
00:00:43,220 --> 00:00:45,740
This one is very simple read recipe.

10
00:00:46,160 --> 00:00:51,050
We're going to have to pass it just the recipe so that it can take the element and read it.

11
00:00:51,830 --> 00:00:59,060
And the only line here is a screen print of a path to which we apply the red text method, the one to

12
00:00:59,060 --> 00:01:04,760
read a file, and inside the parentheses we pass the recipe that has been passed to this function.

13
00:01:05,600 --> 00:01:08,510
This is all that this function needs and it is ready.

14
00:01:08,660 --> 00:01:11,120
So we replace it here with read recipe.

15
00:01:11,420 --> 00:01:16,100
Then we'll pass my recipe, which is what has already been chosen in the previous one.

16
00:01:16,430 --> 00:01:19,220
And this is the only place where this function exists.

17
00:01:20,420 --> 00:01:21,770
So let's make it collapse.

18
00:01:21,770 --> 00:01:26,060
And now go to option number two, the assets to create a new recipe.

19
00:01:26,060 --> 00:01:29,420
So we need to create a function for this create recipe.

20
00:01:30,320 --> 00:01:35,330
Create recipe will require us to pass it a path to know where a recipe has been created.

21
00:01:35,840 --> 00:01:40,280
The path is the one that we're going to have in my category for having generated it.

22
00:01:40,280 --> 00:01:46,610
When we typed chose category to create recipe, we first check if the recipe we're creating already

23
00:01:46,610 --> 00:01:50,270
exists because we could be repeating something that already exists.

24
00:01:50,270 --> 00:01:56,360
So we create the variable called exist, which is equal to false, which is what will let us make a

25
00:01:56,360 --> 00:01:58,550
loop until we can create a new name.

26
00:01:59,360 --> 00:02:04,490
And here comes a loop that says While it doesn't exist, this is the condition that allows it to keep

27
00:02:04,490 --> 00:02:05,510
returning to this loop.

28
00:02:05,510 --> 00:02:11,600
Until we create a new name Colon, we print something on the screen for the user to know what to do.

29
00:02:12,620 --> 00:02:21,080
We type right the name of your recipe, colon space and below we save recipe name and this variable

30
00:02:21,230 --> 00:02:27,050
which will contain the input of the user in which we shouldn't put anything since we already put it

31
00:02:27,050 --> 00:02:28,370
above in the print.

32
00:02:29,420 --> 00:02:33,650
Then we concatenate the input with dot text to complete the name.

33
00:02:35,210 --> 00:02:36,590
Then we print something else.

34
00:02:36,800 --> 00:02:39,140
We're going to ask the user to write the recipe.

35
00:02:39,140 --> 00:02:42,740
Write your new recipe, colon and space.

36
00:02:43,250 --> 00:02:46,010
We're going to store this in recipe content.

37
00:02:46,010 --> 00:02:50,270
This is another variable equal to another input that we leave like this.

38
00:02:50,570 --> 00:02:54,980
We already have two elements to build the new recipe that the user is going to generate.

39
00:02:56,060 --> 00:03:02,990
And finally, we create a new path to create this new recipe that will be equal to a path which is the

40
00:03:02,990 --> 00:03:08,630
route we had, which reaches the category and which is going to be concatenated with recipe name to

41
00:03:08,630 --> 00:03:11,510
build the complete route that includes our new recipe.

42
00:03:12,200 --> 00:03:19,850
So now we have to check if it doesn't exist, then we apply the exist method from OS, but using the

43
00:03:19,850 --> 00:03:28,760
not to do the negation then if not os dot path dot exists and we open brackets inside there.

44
00:03:28,760 --> 00:03:35,030
We need to check if the new path exists, which we have just created, and then if it does not exist,

45
00:03:35,030 --> 00:03:40,610
call the object path and apply the method right text which is a method of path that although we did

46
00:03:40,610 --> 00:03:46,730
not see it specifically in the course for path, we did see it, but without using this object anyway,

47
00:03:46,730 --> 00:03:51,230
you could have discovered it among the methods of path which was part of this instruction.

48
00:03:51,650 --> 00:03:57,830
What this method is going to do is to write a new text made up of a path that is new path and a second

49
00:03:57,830 --> 00:04:04,160
parameter that is the information there has to be a string and that this recipe content, these are

50
00:04:04,160 --> 00:04:09,950
the two variables that we have generated and we print it so the user can see it, otherwise they will

51
00:04:09,950 --> 00:04:12,350
not know what it is they have already created.

52
00:04:12,740 --> 00:04:20,120
And it is going to say here your recipe, then we name the name of the recipe has been created and we

53
00:04:20,120 --> 00:04:21,260
have our recipe.

54
00:04:22,670 --> 00:04:28,310
Now we're going to make the condition of the variable exist change so it is not looped.

55
00:04:28,310 --> 00:04:36,050
Again, we change it to true and in case it does exist we tell the user with a print sorry, that recipe

56
00:04:36,050 --> 00:04:39,440
already exists and the loop will initiate again.

57
00:04:39,800 --> 00:04:44,780
So far I'm done with this function because this function doesn't have to return anything.

58
00:04:44,810 --> 00:04:47,120
It simply has to create the new recipe.

59
00:04:47,120 --> 00:04:54,350
And then we type create recipe here, create recipe to which we have to pass my category so that the

60
00:04:54,350 --> 00:04:57,350
software knows in which category it is going to generate it.

61
00:04:58,460 --> 00:05:00,350
The next one is very similar function.

62
00:05:00,530 --> 00:05:00,920
We need a.

63
00:05:01,020 --> 00:05:06,270
Function that creates a category and the function is so similar that we just copy it and readapt it.

64
00:05:06,510 --> 00:05:08,730
This is a much easier way of working.

65
00:05:09,300 --> 00:05:16,770
So this will be called create category, which needs a path we will let exist be false initially.

66
00:05:16,800 --> 00:05:22,380
As long as it doesn't exist, it's going to enter the loop and say the new category.

67
00:05:22,410 --> 00:05:28,830
And we put here a category name where we start an input to which we don't have to add text.

68
00:05:28,830 --> 00:05:34,620
In this case, we don't need a second variable here because the category does not have any content.

69
00:05:35,520 --> 00:05:43,200
Now let's create a variable called New Path that has the path to category name so as to use such path

70
00:05:43,200 --> 00:05:43,920
right here.

71
00:05:44,430 --> 00:05:50,490
This if we'll check whether this new path exists, then through the path it is going to call another

72
00:05:50,490 --> 00:05:58,230
path method which is called MK Dear, which stands for Make Directory because we want to create a new

73
00:05:58,230 --> 00:06:00,090
category, a new folder.

74
00:06:00,780 --> 00:06:02,520
So what will be in the new folder?

75
00:06:02,730 --> 00:06:04,680
The one stored in new path?

76
00:06:04,890 --> 00:06:06,450
And what are we going to print?

77
00:06:06,780 --> 00:06:13,020
A phrase that says your new category and we right here, the name of the category that is stored in

78
00:06:13,020 --> 00:06:19,680
the variable category name that has been created exist becomes true.

79
00:06:19,680 --> 00:06:24,570
And in case it already exists, we're going to say sorry, that category already exists.

80
00:06:25,470 --> 00:06:32,130
So we have another important function and we put it here replacing create category and as a parameter

81
00:06:32,130 --> 00:06:39,000
it needs that we pass it a path, which is another thing in my path, starting almost from zero and

82
00:06:39,000 --> 00:06:40,170
we're nearly finished now.

83
00:06:40,170 --> 00:06:42,960
We need the function in charge of deleting a recipe.

84
00:06:43,230 --> 00:06:44,520
Let's create it up here.

85
00:06:44,670 --> 00:06:49,380
This will not cause much difficulty either, because we're going to call it delete recipe.

86
00:06:50,040 --> 00:06:54,870
This function, of course, needs to know which recipe we want to delete, so we're going to pass it

87
00:06:54,870 --> 00:06:56,460
a parameter called recipe.

88
00:06:57,270 --> 00:06:59,250
We're going to make that through path.

89
00:06:59,400 --> 00:07:05,910
That is what takes the element that between parentheses it says recipe, the one we pass, it is going

90
00:07:05,910 --> 00:07:10,230
to apply the method unlink the one used to eliminate the file.

91
00:07:10,860 --> 00:07:12,450
I think this is going to be enough.

92
00:07:12,570 --> 00:07:16,860
It's already eliminated and we still need to tell the user that we have done it.

93
00:07:17,970 --> 00:07:21,960
We will put a print that says with a string literal the recipe.

94
00:07:21,960 --> 00:07:28,500
We pass the name of the recipe recipe name so that it only puts the name and not the whole path has

95
00:07:28,500 --> 00:07:29,430
been deleted.

96
00:07:30,570 --> 00:07:33,240
By doing so, we finish with this other function.

97
00:07:33,960 --> 00:07:35,720
It doesn't have to return anything.

98
00:07:35,730 --> 00:07:41,910
Just print that on the screen and here we can pass the call to the function delete recipe which needs

99
00:07:41,910 --> 00:07:44,070
to know what recipe we're going to pass.

100
00:07:44,070 --> 00:07:48,870
Which is my recipe, the one that has been generated with all the functions that we have allowed the

101
00:07:48,870 --> 00:07:50,340
user to choose a recipe.

102
00:07:51,270 --> 00:07:54,390
So we still need another function that can delete a category.

103
00:07:54,600 --> 00:07:59,190
And we're going to come down here and let's put death delete category.

104
00:07:59,640 --> 00:08:03,540
This function needs us to pass it what category we want to remove.

105
00:08:03,540 --> 00:08:09,600
So we pass it a parameter category and we take a path element that has the category that we have passed

106
00:08:09,600 --> 00:08:17,400
to it, to which we have to apply a path method that is called MDR, which means remove directory and

107
00:08:17,400 --> 00:08:19,590
which we have seen throughout the videos.

108
00:08:20,520 --> 00:08:27,090
So we've removed that category and we still have to tell the user with a string literal the category

109
00:08:27,090 --> 00:08:30,090
and we put a call to category name.

110
00:08:30,090 --> 00:08:34,920
Again, this is very similar to what we've done before has been removed.

111
00:08:36,120 --> 00:08:41,040
Well, this is taking a lot of time, but we're getting to the end now because this is the last specific

112
00:08:41,040 --> 00:08:43,050
category we need to include here.

113
00:08:43,350 --> 00:08:45,870
So let's type here, delete category.

114
00:08:46,170 --> 00:08:50,730
That's the call and we feed it with the category chosen in the previous function.

115
00:08:50,850 --> 00:08:53,820
So my category means that we're done with this.

116
00:08:54,240 --> 00:08:59,490
We only need a function that allows us, in all cases to return to the beginning and something to finish

117
00:08:59,490 --> 00:09:00,330
the program.

118
00:09:00,330 --> 00:09:02,070
So we'll do it very quickly.

119
00:09:02,430 --> 00:09:07,830
So going back to the beginning is going to be a function that is simply called return to the beginning,

120
00:09:08,010 --> 00:09:10,170
and it doesn't need parameters, of course.

121
00:09:10,800 --> 00:09:17,490
And what it does is ask the user to press a key, for example, B So since the user could enter another

122
00:09:17,490 --> 00:09:23,940
letter or a number and we don't want that to happen, let's make a variable named return choice which

123
00:09:23,940 --> 00:09:31,470
is going to be initialized as X and then we'll start a wild loop that says as long as return choice

124
00:09:31,470 --> 00:09:34,740
apply lower so that whatever the user enters is valid.

125
00:09:34,950 --> 00:09:42,750
So as long as it's different from the value that is b, the loop will keep on repeating non stop and

126
00:09:42,750 --> 00:09:44,040
here inside the loop.

127
00:09:44,040 --> 00:09:50,130
In order for the user to enter a good value, we'll call the variable return choice to rewrite it with

128
00:09:50,130 --> 00:09:52,110
an input provided by the user.

129
00:09:52,950 --> 00:09:59,910
Here, we should be clear that what we need is that after a line break they press B to return to the

130
00:09:59,910 --> 00:10:00,510
menu.

131
00:10:01,280 --> 00:10:04,150
A colon and a space for the user to type.

132
00:10:04,160 --> 00:10:07,400
And this is the whole function we put it here.

133
00:10:07,490 --> 00:10:09,740
We call it back to the beginning.

134
00:10:11,730 --> 00:10:12,750
Here to.

135
00:10:14,120 --> 00:10:15,110
Also here.

136
00:10:16,840 --> 00:10:17,980
I'm finally here.

137
00:10:19,860 --> 00:10:21,240
And in this last one.

138
00:10:22,590 --> 00:10:25,490
And then to finish the program, we don't need a function.

139
00:10:25,500 --> 00:10:26,460
Just write it.

140
00:10:26,460 --> 00:10:31,020
Because the only thing to do here is to generate a variable that has a true value.

141
00:10:31,080 --> 00:10:33,210
For example, finish program.

142
00:10:33,510 --> 00:10:37,530
This one does not yet exist yet, but we can declare it as true.

143
00:10:38,460 --> 00:10:41,820
This is the only thing that will happen when the user chooses six.

144
00:10:41,910 --> 00:10:47,400
We should remove all these paths and they are no longer needed and not part of the program.

145
00:10:49,040 --> 00:10:53,060
They served for, if not to complain when we had nothing.

146
00:10:53,930 --> 00:10:55,910
So, look, we're almost done now.

147
00:10:56,300 --> 00:10:58,310
We have to do some things first.

148
00:10:59,660 --> 00:11:02,060
Here, we have to initialize the program properly.

149
00:11:02,300 --> 00:11:05,330
Let's first set this variable that we just created.

150
00:11:05,570 --> 00:11:08,910
Finish program is going to be equal to false.

151
00:11:08,930 --> 00:11:13,970
To make sure that we always enter the loop that we're about to generate so that all this can repeat

152
00:11:13,970 --> 00:11:15,440
over and over again.

153
00:11:16,580 --> 00:11:22,910
And here comes the loop, which tells us that as long as end program is not true and we leave it like

154
00:11:22,910 --> 00:11:31,430
that now we select all of this and press tab to tab selecting it and pressing tab once to tab, and

155
00:11:31,430 --> 00:11:33,410
now everything is inside the loop.

156
00:11:34,760 --> 00:11:37,010
Well, what's going to happen inside this loop?

157
00:11:37,040 --> 00:11:42,350
First, this menu that we have created, which is to store the user's choice, is not going to be equal

158
00:11:42,350 --> 00:11:46,880
to zero, but equal to start, which is the function that starts the whole game.

159
00:11:47,540 --> 00:11:49,730
This calls the menu and asks for a number.

160
00:11:50,060 --> 00:11:54,530
We use a pixel number and it's going to ask you to choose a number triggering all this stuff we have

161
00:11:54,530 --> 00:11:54,950
here.

162
00:11:55,760 --> 00:11:57,350
I would say the program is ready.

163
00:11:57,590 --> 00:11:59,120
It looks unbelievable.

164
00:11:59,220 --> 00:12:01,940
We've worked a lot on this video has been quite long.

165
00:12:01,940 --> 00:12:05,860
So I invite you to go to the next video to prove if the program works.

166
00:12:06,350 --> 00:12:11,900
Correct, if there is anything wrong that we need to be corrected and congratulate ourselves for the

167
00:12:11,900 --> 00:12:12,770
hard work.

168
00:12:13,190 --> 00:12:15,770
So I look forward to seeing you in the next video.
