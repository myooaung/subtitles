1
00:00:07,800 --> 00:00:12,090
We often need to write a string that also contains other variables.

2
00:00:12,420 --> 00:00:18,390
For example, if I have the information about the color of a car and its license plate number and I

3
00:00:18,390 --> 00:00:21,420
want to print a sentence containing both values.

4
00:00:21,960 --> 00:00:28,590
As far as we know now, I would have to resort to casting to transform some of those values.

5
00:00:28,890 --> 00:00:36,060
And I would also have to do a lot of concatenation that may become too long, impractical or difficult

6
00:00:36,060 --> 00:00:36,630
to read.

7
00:00:37,620 --> 00:00:44,520
That's why we're going to learn how to format strings in this lecture so that we can solve this in a

8
00:00:44,520 --> 00:00:45,960
more practical way.

9
00:00:46,740 --> 00:00:48,930
In Python, there are two ways to do it.

10
00:00:49,290 --> 00:00:52,110
The first one is using the format function.

11
00:00:52,710 --> 00:00:54,540
It's syntax is very simple.

12
00:00:55,020 --> 00:01:02,190
You write the phrase in a single string without concatenation or anything, but you replace the values

13
00:01:02,190 --> 00:01:06,840
that are contained in variables with two empty braces.

14
00:01:07,740 --> 00:01:16,230
After the closing quotes, you add dot format and then in brackets and ordered the variables containing

15
00:01:16,230 --> 00:01:20,250
the values to be replaced, separated by commas.

16
00:01:21,060 --> 00:01:26,310
Here, it doesn't matter if the content of those variables is string, integer, float, or whatever

17
00:01:26,820 --> 00:01:32,490
format will display them as strings without the need to cast and change the data type of your variables.

18
00:01:33,090 --> 00:01:39,120
This solved a lot of problems when it was incorporated into Python because it's very handy, although

19
00:01:39,120 --> 00:01:42,600
it has a big disadvantage if not very readable.

20
00:01:43,230 --> 00:01:48,060
To understand this sentence, the human eye has to go back and forth to make sense of it.

21
00:01:48,480 --> 00:01:55,830
That's why version 3.6 of Python incorporated the so called literal strings, which gives a twist to

22
00:01:55,830 --> 00:01:58,440
this format doing it in this way.

23
00:01:58,980 --> 00:02:04,050
When constructing your string, you add the letter F before the first quotation mark.

24
00:02:04,560 --> 00:02:11,850
This tells Python that this is going to be a literal string and then you put the braces to replace the

25
00:02:11,850 --> 00:02:12,900
variable values.

26
00:02:13,230 --> 00:02:17,880
Only this time you put the variable name inside the braces.

27
00:02:18,300 --> 00:02:19,230
Isn't it cool?

28
00:02:19,620 --> 00:02:21,320
Issue solved now.

29
00:02:21,360 --> 00:02:25,440
Formatting strings is practical and readable at the same time.

30
00:02:25,920 --> 00:02:31,950
You might say okay, fail, but if the second approach is so great, why don't we just learn that one

31
00:02:31,950 --> 00:02:32,580
and that's it?

32
00:02:33,360 --> 00:02:36,270
Well, because there are many people who use both ways.

33
00:02:36,540 --> 00:02:42,240
And in your career as a programmer, you're going to find a lot of code written like this, and it's

34
00:02:42,240 --> 00:02:44,160
important that you know how to interpret it.

35
00:02:44,760 --> 00:02:47,310
Now let's go to pie charts and put this into practice.

36
00:02:48,180 --> 00:02:51,390
So let's put into practice these two types of formatting strings.

37
00:02:52,080 --> 00:02:56,280
We're going to do it in this new file that I've created called Formatting Strings.

38
00:02:56,730 --> 00:03:01,020
Let's start by creating two variables that we want to be incorporated into our string.

39
00:03:01,380 --> 00:03:06,270
These two variables will be X equals ten and Y equals five.

40
00:03:06,540 --> 00:03:12,570
I've already have two variables with two values to integrals, and I want to create a statement that

41
00:03:12,570 --> 00:03:15,060
says, My numbers are this one and that one.

42
00:03:15,450 --> 00:03:20,310
So what I do in the traditional way would be to say, print my numbers.

43
00:03:21,930 --> 00:03:25,390
And with the old way, I would have to leave a space here, concatenate.

44
00:03:25,410 --> 00:03:27,390
Then I would have to put the value of X.

45
00:03:27,930 --> 00:03:32,730
But I could not do it because x is an integer and I want to transform it into a string.

46
00:03:33,210 --> 00:03:36,670
So I would have to say s t to convert it.

47
00:03:36,690 --> 00:03:38,340
As we have just learned.

48
00:03:38,820 --> 00:03:39,750
And then a space.

49
00:03:40,470 --> 00:03:43,680
Concatenate this with a string created with the value of y.

50
00:03:44,460 --> 00:03:46,860
And I believe that here we would already have it.

51
00:03:47,460 --> 00:03:49,140
In fact, let's see if we run it.

52
00:03:49,830 --> 00:03:52,470
Run, run, formatting strings.

53
00:03:53,250 --> 00:03:53,910
And we did it.

54
00:03:54,150 --> 00:03:56,940
It says, My numbers are ten and five.

55
00:03:57,330 --> 00:03:58,230
I have achieved it.

56
00:03:58,560 --> 00:04:03,150
But as you may have noticed, using a lot of conversions in concatenation and this is not practical

57
00:04:03,150 --> 00:04:03,540
at all.

58
00:04:03,870 --> 00:04:05,130
So let's delete all of this.

59
00:04:05,700 --> 00:04:11,190
And if I want to do it with this, the format function, we directly say my numbers are.

60
00:04:11,970 --> 00:04:19,320
And here we write some braces to occupy the value of the first number and other more braces to occupy

61
00:04:19,320 --> 00:04:20,580
the value of the second number.

62
00:04:21,120 --> 00:04:28,230
We close the quotation marks and then we write format so that this method is applied, which is going

63
00:04:28,230 --> 00:04:34,050
to ask me to enter inside the brackets the values that are going to occupy these braces in the correct

64
00:04:34,050 --> 00:04:34,500
order.

65
00:04:34,980 --> 00:04:41,820
So we're going to put X, comma, Y, separated by commas, and you can continue adding values if you

66
00:04:41,820 --> 00:04:42,630
have more keys.

67
00:04:42,900 --> 00:04:50,310
And now if I run this, it says my numbers are ten and five, but it's created in a much more practical

68
00:04:50,310 --> 00:04:50,610
way.

69
00:04:51,390 --> 00:04:55,050
I didn't have to do any concatenation nor transformation.

70
00:04:55,590 --> 00:05:00,290
Notice that if I change the order of the numbers here and put the Y first and the X.

71
00:05:00,360 --> 00:05:00,780
After.

72
00:05:01,320 --> 00:05:06,000
When I print it out again, it will tell me my numbers are five and ten.

73
00:05:06,780 --> 00:05:10,500
It has flipped them around and I didn't have to do that much.

74
00:05:10,950 --> 00:05:12,840
I could actually do operations as well.

75
00:05:13,760 --> 00:05:17,450
Look, we're going to change this whole sentence and we're going to put it.

76
00:05:18,440 --> 00:05:26,150
That what it says here is the sum of and we're going to put the first number and we put the second number

77
00:05:26,600 --> 00:05:30,410
is equal to and here we put one more set of braces.

78
00:05:32,130 --> 00:05:39,660
And what we're going to do is put in format first Y, then X, and we're still missing one more value

79
00:05:39,660 --> 00:05:44,730
for the third set of braces, which is going to be the sum of Y plus X.

80
00:05:45,650 --> 00:05:52,040
So I do the operation here in this third space that I've reserved inside of format to occupy this key.

81
00:05:52,670 --> 00:05:53,630
So we're going to run it.

82
00:05:53,810 --> 00:05:57,350
And it tells me that the sum of five and ten equals 15.

83
00:05:58,050 --> 00:06:03,440
We we're able to solve the operation even without the need to create a variable here that we would have

84
00:06:03,440 --> 00:06:09,650
called Z and that it would be equal to X plus Y, which would have worked in the same way I would have

85
00:06:09,650 --> 00:06:15,560
replaced this operation here with Z and printed it out, and it would have given me exactly the same

86
00:06:15,560 --> 00:06:15,890
thing.

87
00:06:16,460 --> 00:06:18,320
I just solved it in a different way.

88
00:06:19,010 --> 00:06:21,410
So this is one more way to format your strings.

89
00:06:21,830 --> 00:06:22,640
It's efficient.

90
00:06:22,880 --> 00:06:25,700
It's practical because you don't have to do concatenation.

91
00:06:26,210 --> 00:06:28,190
And it was solved in a very easy way.

92
00:06:28,910 --> 00:06:31,280
But it is not quite readable, we could say.

93
00:06:32,090 --> 00:06:34,160
So let's try also the second way to do it.

94
00:06:34,940 --> 00:06:39,660
Let's start from scratch now to be able to work with strings and with integers.

95
00:06:39,920 --> 00:06:46,160
So we're going to delete all of this and we're going to create first a variable called color, and its

96
00:06:46,160 --> 00:06:47,630
content is going to be red.

97
00:06:48,470 --> 00:06:54,170
And we're going to create one more variable that's called license plate, referring to a car, obviously.

98
00:06:55,250 --> 00:06:57,050
And the license plate is going to be a number.

99
00:06:57,350 --> 00:07:00,320
Let's say 541926.

100
00:07:00,800 --> 00:07:02,510
Well, what are we going to print here?

101
00:07:03,290 --> 00:07:04,580
We're going to say print.

102
00:07:05,090 --> 00:07:09,920
We open the brackets and we're going to use the other way of doing it, which is with something called

103
00:07:09,920 --> 00:07:11,060
literal strings.

104
00:07:11,540 --> 00:07:16,370
And as Phil told you, the first thing you have to do is put the F before the quotes.

105
00:07:17,240 --> 00:07:19,880
This tells Python, Hey, Python, pay attention.

106
00:07:20,240 --> 00:07:23,810
This is going to be a literal string and we're going to compose it like this.

107
00:07:24,020 --> 00:07:30,530
The car, as we write the braces here and inside the braces, we put the content, which is in this

108
00:07:30,530 --> 00:07:38,570
case, the variable color and it's license plate IDs and we open keys and here we put license plate,

109
00:07:39,110 --> 00:07:40,160
which is the next value.

110
00:07:41,070 --> 00:07:42,210
Then the key is closed.

111
00:07:42,810 --> 00:07:46,560
We don't need to put format or anything because the values are already in there.

112
00:07:47,100 --> 00:07:52,950
If we run it, we get the car is red and its license plate is 541926.

113
00:07:53,640 --> 00:07:55,740
That is to say that it works perfectly.

114
00:07:56,220 --> 00:08:02,190
And this way I believe that it is superior approach because it is not only practical as the format function,

115
00:08:02,190 --> 00:08:03,840
but it is also readable.

116
00:08:04,440 --> 00:08:07,500
The car is color and the license plate is license plate.

117
00:08:07,770 --> 00:08:09,150
It doesn't get any easier than that.

118
00:08:09,420 --> 00:08:10,920
So this is the best way, I think.

119
00:08:10,920 --> 00:08:15,150
But you have to learn all of them and use them, one that you are most comfortable with.

120
00:08:15,540 --> 00:08:16,560
None of them is wrong.

121
00:08:16,950 --> 00:08:17,790
They're all valid.

122
00:08:18,180 --> 00:08:19,440
So now you know how to do it.

123
00:08:19,850 --> 00:08:23,370
So I invite you to the next lecture where we have something amazing to teach you.
