1
00:00:07,760 --> 00:00:12,650
In this lesson, we are going to see something different because we are going to start working with

2
00:00:12,650 --> 00:00:15,060
documents and folders on your computer.

3
00:00:15,080 --> 00:00:21,290
This means that we are going to learn how to manipulate files from Python in a very basic way.

4
00:00:21,470 --> 00:00:27,380
We call this IO, which stands for input and output, and we're going to start by looking at how to

5
00:00:27,380 --> 00:00:35,210
do fundamental tasks related to text files like opening, reading, writing and closing text files from

6
00:00:35,210 --> 00:00:36,230
Python code.

7
00:00:36,830 --> 00:00:42,350
For that, your main friends are going to be methods like open, read, write and close.

8
00:00:42,590 --> 00:00:49,160
Basically, we are going to open files and place them inside variables on which we will apply these

9
00:00:49,160 --> 00:00:54,890
methods and many more so that our reach as programmers continues to expand.

10
00:00:54,920 --> 00:00:59,960
In this first lecture, we will learn how to open, close and read files, and we will perform some

11
00:00:59,960 --> 00:01:03,500
basic manipulations on what we display on the screen.

12
00:01:03,560 --> 00:01:08,270
In the next lecture, we will move on to creating and writing files from Python.

13
00:01:08,270 --> 00:01:12,530
Let's go to PY Charm so Federico can show you right away how we do it.

14
00:01:13,430 --> 00:01:18,890
Before we start, I'll introduce you to the starring role of this lecture, which is the basic text

15
00:01:18,890 --> 00:01:26,960
file called Test Text that contains three lines, each one claiming to be the first, second and third

16
00:01:26,960 --> 00:01:27,500
line.

17
00:01:28,330 --> 00:01:33,640
This file is stored on my computer, of course, and in the same folder as all the picture files I'm

18
00:01:33,640 --> 00:01:34,420
working with.

19
00:01:34,690 --> 00:01:39,910
It's fundamental that you save the file we work with in the same folder where you're storing all the

20
00:01:39,910 --> 00:01:41,140
python files.

21
00:01:41,140 --> 00:01:44,380
So if you want, you can download this very same file.

22
00:01:44,500 --> 00:01:48,370
I'll leave it as an attachment, or you can create your own file.

23
00:01:48,400 --> 00:01:53,620
So later on we'll learn how to open files located in any other folder in your computer.

24
00:01:53,980 --> 00:01:57,280
But for now we'll work without specifying a folder path.

25
00:01:57,490 --> 00:02:00,760
That's why you have to save your files in the same folders.

26
00:02:00,850 --> 00:02:06,820
So let's go back to Pie Charm and we'll start by learning how to open a file we already know exists.

27
00:02:07,000 --> 00:02:09,430
So we'll store that file in a variable.

28
00:02:09,520 --> 00:02:15,430
Variables not only can contain elements we've already seen, they can also contain many more elements,

29
00:02:15,430 --> 00:02:17,110
such as a text file.

30
00:02:17,290 --> 00:02:23,950
I'll call this variable my file and there I'll save my open method to which I have to pass a data set.

31
00:02:23,950 --> 00:02:28,180
Look, file mode buffering among others.

32
00:02:28,570 --> 00:02:34,390
We'll keep this simple and pass only the file name between quotation marks so as to create a string.

33
00:02:34,390 --> 00:02:41,230
I already know my file is called test text since my file is stored in the same place as all the python

34
00:02:41,230 --> 00:02:41,710
files.

35
00:02:41,710 --> 00:02:47,530
Like I told you, I don't need to provide a path because that place would be the default path.

36
00:02:48,010 --> 00:02:50,500
Let's execute this to see what happens.

37
00:02:50,560 --> 00:02:53,140
You may be asking yourself what we're going to see.

38
00:02:53,140 --> 00:02:55,240
Well, we don't see anything.

39
00:02:55,420 --> 00:02:56,260
Why?

40
00:02:56,380 --> 00:03:01,450
Because we only transferred the contents of test text to my file.

41
00:03:01,690 --> 00:03:04,930
This command doesn't execute anything in the console.

42
00:03:05,200 --> 00:03:05,790
Okay.

43
00:03:06,620 --> 00:03:07,670
So let's go on.

44
00:03:08,030 --> 00:03:12,050
If I want to show you on the screen the contents inside my file.

45
00:03:12,050 --> 00:03:14,330
We know I'll do this with print.

46
00:03:15,220 --> 00:03:18,730
What would happen if I showed my file on the screen?

47
00:03:19,330 --> 00:03:20,650
Let's execute it.

48
00:03:21,240 --> 00:03:23,070
We have something strange here.

49
00:03:23,520 --> 00:03:26,520
It's showing me some data that are useless to the user.

50
00:03:27,330 --> 00:03:32,790
Here it says we're executing the IO library with the test IO wrapper method.

51
00:03:33,300 --> 00:03:36,510
It says the name of the file is test text.

52
00:03:36,810 --> 00:03:38,610
It says it's in R mode.

53
00:03:38,820 --> 00:03:44,640
You'll find out what this is in the next lecture, but it basically means read mode and it also says

54
00:03:44,640 --> 00:03:46,710
it's encrypted with this code.

55
00:03:47,610 --> 00:03:52,830
This isn't telling you anything that's useful for you, but I want you to see that what's inside my

56
00:03:52,830 --> 00:03:53,310
file?

57
00:03:53,310 --> 00:03:57,420
If you open it this way, we're just opening and showing it.

58
00:03:57,480 --> 00:04:02,490
So I also want to show you this, since my file is a variable containing a text file.

59
00:04:02,520 --> 00:04:06,330
It has a series of methods associated with that type of file.

60
00:04:07,440 --> 00:04:16,110
So if I type a dot here, you'll see I can use read, read line, close read lines, plural, etc.,

61
00:04:16,110 --> 00:04:16,860
etc..

62
00:04:17,590 --> 00:04:23,770
So let's start working with this and open the read method which will enter brackets automatically.

63
00:04:24,940 --> 00:04:29,770
If I execute this, I won't see anything because I just opened it and then read it.

64
00:04:30,130 --> 00:04:36,460
These are internal features that make my file read what's inside the file we entered, but we're not

65
00:04:36,460 --> 00:04:38,170
showing anything on the screen yet.

66
00:04:39,100 --> 00:04:42,850
So you may ask, when will I be able to see what's inside the file?

67
00:04:42,880 --> 00:04:46,990
Well, once I've read the file, I can print this act of reading.

68
00:04:47,440 --> 00:04:50,800
We enter print closed brackets at the end.

69
00:04:50,890 --> 00:04:56,020
And if I print this, the contents inside test will be displayed.

70
00:04:56,170 --> 00:05:01,270
So here we were able to open, read and show what's inside a basic text file.

71
00:05:02,170 --> 00:05:03,190
Before moving on.

72
00:05:03,190 --> 00:05:04,630
I want you to listen to this.

73
00:05:05,260 --> 00:05:08,540
Every time you work and open a file, you must close it to.

74
00:05:08,830 --> 00:05:16,540
So my file dot close, which is a method to close a file and allows you to back up your progress.

75
00:05:17,210 --> 00:05:23,210
Sometimes you will work with large files, open more than one file at a time, or open the same file

76
00:05:23,210 --> 00:05:24,280
many times.

77
00:05:24,290 --> 00:05:27,530
So it's very convenient to always close when you're done.

78
00:05:27,770 --> 00:05:30,890
Look, I'll drag it down here so it doesn't bother us.

79
00:05:31,220 --> 00:05:36,580
But as long as we have this here, the file will always close after we're done executing it.

80
00:05:36,590 --> 00:05:42,740
In the same way I've read the file, I can use a similar method called read line singular notice.

81
00:05:42,740 --> 00:05:43,730
There are two of them.

82
00:05:43,730 --> 00:05:45,830
Read line and read lines.

83
00:05:45,950 --> 00:05:48,020
We'll use the singular one for now.

84
00:05:49,010 --> 00:05:54,350
This method reads one line, so only the first line will be printed here.

85
00:05:55,850 --> 00:06:00,140
Actually, another option is to store inside a variable named one line.

86
00:06:00,470 --> 00:06:07,400
My file dot read line and then print the variable execute and it's the same.

87
00:06:07,520 --> 00:06:13,940
We have the first line printed, so you may ask how can I see the other two lines?

88
00:06:14,270 --> 00:06:19,910
If I try print again, I won't be able to see them because I'm not trying to print the variable containing

89
00:06:19,910 --> 00:06:20,870
the first line.

90
00:06:21,590 --> 00:06:23,240
Now, this is interesting.

91
00:06:23,300 --> 00:06:29,360
If we copy this same variable and store it in one line, which is the same variable, but we rewrite

92
00:06:29,360 --> 00:06:33,770
it again and again before printing it, then we will obtain the three lines.

93
00:06:34,100 --> 00:06:34,820
Why?

94
00:06:35,340 --> 00:06:37,260
By reading with read line.

95
00:06:37,290 --> 00:06:41,880
The software saves the last time it read something and then when you make it, do it again.

96
00:06:41,880 --> 00:06:45,360
With Red Line, the software resumes where it left off.

97
00:06:45,780 --> 00:06:49,830
That's why we could apply one line to the second and third lines.

98
00:06:51,180 --> 00:06:56,430
As you may have seen, each line is separated with another intermediate line because every time a file

99
00:06:56,430 --> 00:07:00,690
is created, let's see, each line includes a line break.

100
00:07:01,380 --> 00:07:03,990
That's because I typed Enter after each line.

101
00:07:04,020 --> 00:07:07,530
If I hadn't, I wouldn't have been able to go to the next line.

102
00:07:07,620 --> 00:07:13,110
Therefore, each line includes a line break that's there, although we can't see it.

103
00:07:13,380 --> 00:07:16,590
Python recognizes line breaks and so it displays them.

104
00:07:17,250 --> 00:07:23,700
But if you don't want them to be displayed, use the method one line dot ers trip.

105
00:07:23,940 --> 00:07:27,540
This will remove line breaks and show the results without them.

106
00:07:27,930 --> 00:07:30,210
That's why we see these two lines together.

107
00:07:30,780 --> 00:07:33,690
In case you need this method, here you have it.

108
00:07:34,200 --> 00:07:37,170
Let's execute it as it was and keep going.

109
00:07:38,040 --> 00:07:43,740
So in addition, it's important that you take into account that this is a group of strings, i.e. you

110
00:07:43,740 --> 00:07:47,640
can use all the strings methods in this variable named one line.

111
00:07:47,880 --> 00:07:54,120
For instance, if I type a dot and then right upper, I'll be able to convert the first line to uppercase.

112
00:07:54,720 --> 00:07:58,560
As a result, the first line is uppercase and the rest is lowercase.

113
00:07:59,680 --> 00:08:03,130
I also want you to see that you can iterate over the lines of a file.

114
00:08:03,610 --> 00:08:09,040
So let's delete everything and create a for loop that for each line or l inside my file.

115
00:08:09,040 --> 00:08:14,920
Since my file is actually a group of lines, it prints something like here it says Colon.

116
00:08:14,920 --> 00:08:16,870
And then we concatenate with L.

117
00:08:18,060 --> 00:08:24,610
If we print this, we'll see here it says and then the text from the first line and so on.

118
00:08:24,660 --> 00:08:29,610
Well, we were able to iterate by looping through each line and control every cycle of our loop.

119
00:08:29,880 --> 00:08:31,530
Imagine all the possibilities.

120
00:08:31,680 --> 00:08:35,520
So another option would be the method read lines, plural.

121
00:08:36,370 --> 00:08:38,190
Look, let's start my file.

122
00:08:38,530 --> 00:08:41,410
Read lines in a variable called all.

123
00:08:42,820 --> 00:08:47,610
So the difference here is that when I print it, look at what happens when printing oil.

124
00:08:47,620 --> 00:08:50,800
We obtain a list containing three elements.

125
00:08:51,040 --> 00:08:54,220
The first one is the first line and so on.

126
00:08:54,610 --> 00:08:56,890
So now we can use the list methods.

127
00:08:57,100 --> 00:09:00,620
I can type all is equal to all dot pop.

128
00:09:00,640 --> 00:09:08,110
So when we execute, it all will have only the third line, which is the one we excluded from the list.

129
00:09:08,290 --> 00:09:13,960
Keep in mind that you have to restrict the red lines method to small files because every time you use

130
00:09:13,960 --> 00:09:16,210
it, the whole file will be opened.

131
00:09:16,750 --> 00:09:21,730
If you employ the same method many times with the same code, the whole file will be opened according

132
00:09:21,730 --> 00:09:23,560
to each time you use that method.

133
00:09:24,040 --> 00:09:29,870
And if the files you're working with a large, you'll overload your system and you may run out of space.

134
00:09:29,950 --> 00:09:34,780
So this explains the basics of opening, reading, showing and manipulating elements.

135
00:09:35,170 --> 00:09:39,130
However, take into account that we're modifying the contents of the variable.

136
00:09:39,130 --> 00:09:39,940
My file.

137
00:09:40,030 --> 00:09:42,610
We're not modifying the original text file.

138
00:09:43,210 --> 00:09:49,180
So even if I close after executing all of this, when I open it again, we'll see that the last line

139
00:09:49,180 --> 00:09:50,500
hasn't been removed.

140
00:09:51,260 --> 00:09:56,030
It is still there because we've been manipulating what we showed on the screen inside Petrom.

141
00:09:56,360 --> 00:10:02,510
So in the next lecture, we're going to learn how to create, write and modify the original file in

142
00:10:02,510 --> 00:10:08,210
order to finish explaining how to work with input and output on basic files with Python.

143
00:10:09,110 --> 00:10:10,730
So see you in the next lecture.
