WEBVTT
1
00:00:07.910 --> 00:00:12.680
To create our own functions, we will need a very precise syntax.

2
00:00:12.710 --> 00:00:15.410
The main element will be the def keyword.

3
00:00:15.500 --> 00:00:17.330
This word tells Python.

4
00:00:17.330 --> 00:00:25.610
What I'm going to write is a function and you can think of the meaning of def as definition of a function.

5
00:00:26.270 --> 00:00:27.710
Next, we write the name.

6
00:00:27.710 --> 00:00:30.710
We choose for the function that we are going to create.

7
00:00:30.740 --> 00:00:37.250
It can be any word or words you choose, and by convention we always write them with lowercase letters

8
00:00:37.250 --> 00:00:39.500
and underscores instead of spaces.

9
00:00:40.340 --> 00:00:47.750
Then comes a pair of parentheses that will be empty, or we will use to pass parameters depending on

10
00:00:47.750 --> 00:00:48.470
the case.

11
00:00:48.650 --> 00:00:51.110
But for now, let's just leave them like that.

12
00:00:51.470 --> 00:00:53.000
And finally, a colon.

13
00:00:53.030 --> 00:00:59.810
This tells Python everything that follows is inside the function and is part of its code as long as

14
00:00:59.810 --> 00:01:02.840
it is tabbed to the right of the word def.

15
00:01:03.050 --> 00:01:09.740
Then what follows is not mandatory code, but it is part of having good habits, and that is to write

16
00:01:09.740 --> 00:01:12.390
an explanation of what the function does.

17
00:01:12.410 --> 00:01:16.340
Enclose in three quotes before and after the text.

18
00:01:16.910 --> 00:01:23.810
Every time you use the three single quotes, you can write a descriptive text that is not going to be

19
00:01:23.810 --> 00:01:24.670
executed.

20
00:01:24.680 --> 00:01:31.460
It serves so that anyone, even you can easily find out in human language what that function does.

21
00:01:31.940 --> 00:01:36.800
And then you write the code that you want to be executed every time you call for this function.

22
00:01:36.920 --> 00:01:40.340
So how do you write a function and how do you execute it?

23
00:01:40.670 --> 00:01:46.640
Every time we write anywhere in our code, the name of the function and its parentheses.

24
00:01:47.030 --> 00:01:50.320
Python will execute whatever is inside our function.

25
00:01:50.330 --> 00:01:52.570
Now let's pay attention to the parentheses.

26
00:01:52.580 --> 00:01:59.020
As I said, you can use the parentheses to add a parameter or an argument to your function.

27
00:01:59.030 --> 00:02:02.330
For example, here I pass a parameter name.

28
00:02:02.810 --> 00:02:09.050
This is a kind of internal variable I could have put any word, but here I called it name.

29
00:02:09.920 --> 00:02:15.110
Although at the moment of writing my function I still do not know what the value of the parameter is

30
00:02:15.110 --> 00:02:16.000
going to be.

31
00:02:16.010 --> 00:02:23.990
I can use it so that whatever its content is later, I can invoke it from any place inside the function,

32
00:02:23.990 --> 00:02:28.280
for example, to concatenate it with my string here.

33
00:02:28.550 --> 00:02:34.360
If then at the moment of invoking the function that I put inside its parentheses of value, for example,

34
00:02:34.370 --> 00:02:42.710
James, I am giving content to the variable name that is going to be able to use it in the concatenation.

35
00:02:42.710 --> 00:02:50.150
And now the result of my function is going to be, Hello, James, print it on the screen for now.

36
00:02:50.150 --> 00:02:56.510
I'm keeping it super simple and to make sure we all understand this easily, but we'll see that this

37
00:02:56.510 --> 00:03:00.830
approach provides infinite and very, very useful applications in the future.

38
00:03:00.830 --> 00:03:07.010
Let's look at this same example, but on the black screen so you can apply it all by yourself as well.

39
00:03:08.120 --> 00:03:10.870
And while the introduction was long, it was necessary.

40
00:03:10.880 --> 00:03:16.800
So let's start by writing our function with the key word def as we have just learned, you see that

41
00:03:16.800 --> 00:03:19.340
this is painted red because it is a key word.

42
00:03:19.850 --> 00:03:22.280
So next I can create any name I want.

43
00:03:22.280 --> 00:03:25.760
For example, greet, underscore person.

44
00:03:27.000 --> 00:03:29.430
This is the name I want to give to my function.

45
00:03:29.880 --> 00:03:30.630
Remember that?

46
00:03:30.630 --> 00:03:33.460
Then put the closing and opening parenthesis.

47
00:03:33.480 --> 00:03:35.640
I'm not going to put anything in them right now.

48
00:03:35.670 --> 00:03:37.290
And finally, a colon.

49
00:03:38.190 --> 00:03:41.400
Once I hit enter, this is going to create an indentation.

50
00:03:41.850 --> 00:03:46.880
Remember, this is very important because if you type from the initial line, you're going to tell Python,

51
00:03:46.890 --> 00:03:52.180
I've already exited the function and all this following stuff I'm typing is not inside of it.

52
00:03:52.200 --> 00:03:58.800
So once we're inside our function, we can type, as I told you, three single quotes and let's go write

53
00:03:58.800 --> 00:04:01.860
a multi linear, non executable message.

54
00:04:02.280 --> 00:04:06.840
As you can see, it also gives me an automatically the word return.

55
00:04:07.020 --> 00:04:10.290
But we're going to see later on what we're going to use it for.

56
00:04:10.770 --> 00:04:12.720
Right now, I'm going to delete it.

57
00:04:13.600 --> 00:04:13.960
Okay.

58
00:04:13.960 --> 00:04:16.450
What we write here is a free comment.

59
00:04:16.480 --> 00:04:21.430
I can say something like this function is used to greet people.

60
00:04:22.450 --> 00:04:28.510
This comment may have one or more lines because when you write these three single quotes, you can continue

61
00:04:28.510 --> 00:04:32.980
writing here another line and remember that this is a good habit.

62
00:04:33.550 --> 00:04:38.890
It allows eventual users of your code or even yourself to understand what this function is going to

63
00:04:38.890 --> 00:04:39.730
be used for.

64
00:04:40.270 --> 00:04:44.170
If you read your code again six months later or a year from now.

65
00:04:44.290 --> 00:04:47.590
This way you can easily remember what you used all this for.

66
00:04:48.100 --> 00:04:53.500
If you want to make one line Python comments, you can just type the numeral sign and then whatever

67
00:04:53.500 --> 00:04:54.160
you want.

68
00:04:54.700 --> 00:05:02.440
This function is good for something and this code, whether it's between the three quotes or in the

69
00:05:02.440 --> 00:05:05.020
numeral, it's not going to be executed.

70
00:05:05.110 --> 00:05:08.530
For this example, let's just leave it without any comment.

71
00:05:10.110 --> 00:05:10.830
Okay.

72
00:05:10.860 --> 00:05:12.990
Now to the body of our function.

73
00:05:13.170 --> 00:05:15.120
Let's put in some execution line.

74
00:05:15.120 --> 00:05:18.870
Print is a good choice and we're going to show the message.

75
00:05:18.870 --> 00:05:19.470
Hello.

76
00:05:21.790 --> 00:05:23.300
So this is my function.

77
00:05:23.320 --> 00:05:25.930
I can exit it going back to the initial line.

78
00:05:26.530 --> 00:05:29.670
And if I run this, then nothing happens.

79
00:05:29.680 --> 00:05:30.310
Why?

80
00:05:30.850 --> 00:05:34.240
Even though this print exists, it's inside a function.

81
00:05:34.240 --> 00:05:36.540
And this would be as if it were the definition.

82
00:05:36.550 --> 00:05:38.020
Hence the word def.

83
00:05:38.410 --> 00:05:40.240
But we're not invoking it yet.

84
00:05:40.360 --> 00:05:41.590
Just like the methods.

85
00:05:41.590 --> 00:05:46.990
Although they are defined somewhere in the code, out of our view, they're only executed when we call

86
00:05:46.990 --> 00:05:47.380
them.

87
00:05:48.100 --> 00:05:52.120
In the case of this function, we defined it, but we didn't call it.

88
00:05:52.270 --> 00:05:54.610
So my code does nothing.

89
00:05:55.510 --> 00:05:58.080
Then let's call this function by his name.

90
00:05:58.090 --> 00:05:58.840
Greet.

91
00:05:59.020 --> 00:06:01.240
Notice that it already exists.

92
00:06:01.600 --> 00:06:02.380
Person.

93
00:06:03.670 --> 00:06:06.360
Now if I execute it, it says hello.

94
00:06:06.370 --> 00:06:11.500
Because here what I'm doing is saying execute this function and do everything inside it.

95
00:06:12.280 --> 00:06:12.980
Amazing.

96
00:06:13.000 --> 00:06:14.140
Let's move forward.

97
00:06:14.920 --> 00:06:20.560
We also saw that we can pass parameters inside the parenthesis that follows the function name.

98
00:06:20.740 --> 00:06:26.350
Parameters are some information that the function receives at the moment of being called to use that

99
00:06:26.350 --> 00:06:28.420
information inside its code.

100
00:06:29.190 --> 00:06:33.360
So if I want my function to receive parameters, we do it this way.

101
00:06:33.840 --> 00:06:40.230
We put here the name of a variable, for example, name that right now does not make any sense for Python

102
00:06:40.410 --> 00:06:46.710
because I'm creating a variable that later my code does not use and that is why it paints it in gray.

103
00:06:47.640 --> 00:06:53.400
But then here, after the hello message, let's put a space and let's concatenate with name.

104
00:06:53.910 --> 00:06:55.530
What's the value of name?

105
00:06:56.010 --> 00:06:59.940
At the moment of defining our variable, we don't know yet its value.

106
00:06:59.940 --> 00:07:02.640
It will be loaded at the moment of calling this function.

107
00:07:02.880 --> 00:07:04.560
So you'll see this in a minute.

108
00:07:05.190 --> 00:07:10.710
So if I run it now, nothing is going to happen and it's going to give me an error because the invocation

109
00:07:10.710 --> 00:07:16.080
of the function greet person now needs a parameter because we modified its definition.

110
00:07:16.590 --> 00:07:21.810
Since I'm not passing it, this error tells me that I'm calling it in a wrong way.

111
00:07:22.560 --> 00:07:28.020
The definition of the function requires a parameter now, so that's what we're going to do here at the

112
00:07:28.020 --> 00:07:29.040
moment of calling it.

113
00:07:29.040 --> 00:07:31.410
We're going to pass any name like Frank.

114
00:07:31.680 --> 00:07:35.610
We execute it again and now it says, Hello, Frank.

115
00:07:36.180 --> 00:07:42.720
So the dynamic is you pass it from here, a content that receives a variable and passes it to the code.

116
00:07:42.720 --> 00:07:43.930
So why do we need that?

117
00:07:43.930 --> 00:07:48.630
It is with a variable so that this can be different in different situations.

118
00:07:48.900 --> 00:07:51.660
This makes it reusable because it's flexible.

119
00:07:52.050 --> 00:07:59.370
Now if I call greet person again, but I pass Walter, it repeats it again, but this time it applies

120
00:07:59.370 --> 00:08:00.300
it to Walter.

121
00:08:01.080 --> 00:08:05.640
In the next lecture, we're going to be looking to learn one more missing element to fully understand

122
00:08:05.640 --> 00:08:09.210
the true usefulness and flexibility that functions allow.

123
00:08:09.570 --> 00:08:10.830
So don't miss it.

124
00:08:10.830 --> 00:08:15.720
And of course, after the exercise that you will have next, because this has a lot to unwrap.

125
00:08:15.720 --> 00:08:17.970
So I'll be waiting for you right after that.
