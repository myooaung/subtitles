1
00:00:07,850 --> 00:00:14,270
We already understood the theoretical concept of object oriented programming and what a class is.

2
00:00:14,300 --> 00:00:18,800
Now we are going to see how we use object oriented programming in Python.

3
00:00:19,010 --> 00:00:24,380
The first thing is to create a class and we will use the bird as an example for this.

4
00:00:24,950 --> 00:00:31,400
Classes are defined with the keyword class in lowercase and then the name we want to give the class

5
00:00:31,400 --> 00:00:32,990
in our case bird.

6
00:00:33,320 --> 00:00:35,870
Then a colon by convention.

7
00:00:35,870 --> 00:00:39,080
The name of the class begins with a capital letter.

8
00:00:39,200 --> 00:00:44,810
And if it is composed by many words, let's suppose it was called Element Bird.

9
00:00:44,990 --> 00:00:51,710
The blank spaces are omitted, joining directly all the words and capitalizing the first letter of each

10
00:00:51,710 --> 00:00:52,280
word.

11
00:00:53,120 --> 00:00:58,100
Then we'll write its internal code, starting with a tabulation.

12
00:00:58,100 --> 00:01:04,340
And if I put pass inside, we already have a minimal class created.

13
00:01:04,880 --> 00:01:07,850
This would be an empty class without much practical use.

14
00:01:07,850 --> 00:01:10,790
But it is the minimum class that we can create.

15
00:01:11,060 --> 00:01:14,600
I only put pass so that it does not give me an error.

16
00:01:15,620 --> 00:01:21,190
Now that we have the class, although it is empty, we can create an object of the bird class.

17
00:01:21,200 --> 00:01:24,560
We can do it as if it were a normal variable.

18
00:01:24,740 --> 00:01:32,480
So we write the name of the variable, for example, my bird equal to the class with parentheses.

19
00:01:32,810 --> 00:01:35,810
In this case, the parentheses are empty.

20
00:01:35,810 --> 00:01:42,590
But later on we will see that the class may require arguments to be created and we will load them inside

21
00:01:42,590 --> 00:01:43,520
the parentheses.

22
00:01:43,520 --> 00:01:45,650
But for now, we're going to leave them empty.

23
00:01:45,680 --> 00:01:51,740
Join Federico and Pi Charm to create together your very first basic class.

24
00:01:52,490 --> 00:01:58,820
So we'll start by declaring a super basic class, which starts with the key word class that tells Python.

25
00:01:58,820 --> 00:02:01,340
Well, what we're going to type next is a class.

26
00:02:02,320 --> 00:02:05,140
So then we'll give it a name conventionally.

27
00:02:05,140 --> 00:02:08,410
It'll start with uppercase and it'll be named Bird.

28
00:02:09,340 --> 00:02:12,880
So let's type Colon and begin with today's class.

29
00:02:13,660 --> 00:02:19,840
So since we don't know what to do inside a class yet, we'll just type pass so we don't receive an error

30
00:02:19,840 --> 00:02:20,560
message.

31
00:02:20,860 --> 00:02:26,680
What you see here is a class bird is just the definition of an abstract concept.

32
00:02:27,070 --> 00:02:31,090
Now we can create bird type objects which don't do anything.

33
00:02:31,090 --> 00:02:36,310
They don't chirp, fly or lay eggs, and they don't have features like color or height.

34
00:02:36,430 --> 00:02:38,770
This is just an existing entity.

35
00:02:39,250 --> 00:02:45,340
So if I want to create the bird type object that is a class instance, I'll do it with a variable such

36
00:02:45,340 --> 00:02:46,420
as my bird.

37
00:02:46,960 --> 00:02:50,140
And my bird will be equal to a bird type object.

38
00:02:51,230 --> 00:02:55,820
Here will type brackets as to indicate this as a bird type instance.

39
00:02:56,330 --> 00:03:00,770
So I don't have just a class now, but an instance named my bird.

40
00:03:01,100 --> 00:03:03,860
And I want you to ruminate on the following.

41
00:03:04,490 --> 00:03:11,900
So far, we've been using variables for storing base python data, such as strings, floats, dictionaries,

42
00:03:11,900 --> 00:03:16,070
lists, and others because they are Python built in objects.

43
00:03:16,490 --> 00:03:20,060
This means they're contained in Python standard library.

44
00:03:20,970 --> 00:03:25,920
However, we're creating new objects now, and they are also types of data.

45
00:03:26,880 --> 00:03:33,300
In fact, my bird contains a type of data that is not a string or an integer, but a bird.

46
00:03:33,570 --> 00:03:35,250
You have declared it.

47
00:03:35,610 --> 00:03:38,160
So what if I want to execute this code?

48
00:03:38,340 --> 00:03:43,080
Well, I won't have anything at first because there's no executable line here.

49
00:03:43,200 --> 00:03:47,010
There's just a class declaration and instantiation.

50
00:03:47,400 --> 00:03:49,680
Nothing will be executed on the screen.

51
00:03:50,340 --> 00:03:54,270
So let's print my bird in order to see it on the screen.

52
00:03:54,720 --> 00:03:55,470
And we'll see.

53
00:03:55,470 --> 00:03:58,740
There is a bird, which is an object that's located here.

54
00:03:59,190 --> 00:04:01,980
But what happens if I print a bird data type?

55
00:04:02,520 --> 00:04:04,300
This is what I was talking about.

56
00:04:04,320 --> 00:04:06,960
So we'll print the type of my bird.

57
00:04:07,200 --> 00:04:09,120
So what will be shown on screen?

58
00:04:09,870 --> 00:04:11,100
The software will tell us.

59
00:04:11,160 --> 00:04:14,430
The data type of My Bird is a class main bird.

60
00:04:14,670 --> 00:04:17,160
We'll find out what main bird means soon.

61
00:04:17,880 --> 00:04:24,630
So bear in mind, there is no string dictionary or integer but a bird, which is a data type I've just

62
00:04:24,630 --> 00:04:25,440
created.

63
00:04:25,980 --> 00:04:26,310
Right.

64
00:04:26,310 --> 00:04:27,330
Let's move on.

65
00:04:27,330 --> 00:04:31,200
So I declared a variable that contains a bird here.

66
00:04:31,230 --> 00:04:34,290
And so there's a bird in my program context.

67
00:04:34,680 --> 00:04:36,720
Let's create another bird, shall we?

68
00:04:36,780 --> 00:04:41,120
I can create all the birds I want, and each of them will be a different object.

69
00:04:41,130 --> 00:04:45,090
This will be named another bird and it will be equal to bird.

70
00:04:45,090 --> 00:04:46,590
And it's brackets.

71
00:04:46,950 --> 00:04:52,080
So we'll print another bird and delete the bird type, since we don't want to keep saying it.

72
00:04:52,470 --> 00:04:57,450
And we'll see how these two birds we've created from the same class look like.

73
00:04:58,250 --> 00:05:00,350
So we have two bird type objects.

74
00:05:00,350 --> 00:05:03,740
One is located here and the other is located here.

75
00:05:04,500 --> 00:05:04,740
Here.

76
00:05:04,740 --> 00:05:08,220
We can see they are two different entities with the same bird class.

77
00:05:08,640 --> 00:05:12,040
So do you want to keep on watching birds create Tweety?

78
00:05:12,060 --> 00:05:12,810
Donald Duck.

79
00:05:12,810 --> 00:05:13,450
Penguin.

80
00:05:13,470 --> 00:05:14,520
The ones you like.

81
00:05:15,180 --> 00:05:16,980
They will all be different objects.

82
00:05:17,340 --> 00:05:21,060
If we had a more challenging task, we could make them interact with one another.

83
00:05:21,720 --> 00:05:28,620
So far we've created two birds and we'll create an empty abstract base class to which we'll start adding

84
00:05:28,620 --> 00:05:30,600
attributes in the next lecture.

85
00:05:30,780 --> 00:05:31,920
So don't be late.

86
00:05:31,950 --> 00:05:32,880
I'll see you there.
