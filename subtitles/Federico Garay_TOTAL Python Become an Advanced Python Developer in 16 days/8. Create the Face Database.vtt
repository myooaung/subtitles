WEBVTT
1
00:00:07.830 --> 00:00:10.320
So it's time to start the project from scratch.

2
00:00:11.190 --> 00:00:18.960
We're going to create it in the day 14 folder and we're going to name it work attendance p y and we're

3
00:00:18.960 --> 00:00:20.040
all set to go.

4
00:00:20.700 --> 00:00:26.420
This project is going to look at anyone who stands in front of the live webcam and compare them with

5
00:00:26.430 --> 00:00:28.980
a list of people it is stored in a database.

6
00:00:30.120 --> 00:00:35.700
This database will be a list of controlled images to know if the person you see on the camera is one

7
00:00:35.700 --> 00:00:42.810
of the people who work in our company so we can record the time of entry or say, you can't enter because

8
00:00:42.810 --> 00:00:43.710
you don't work here.

9
00:00:44.460 --> 00:00:47.250
So let's import everything we need initially.

10
00:00:47.730 --> 00:00:53.970
We're going to import CV two and we're going to import face recognition as FR.

11
00:00:56.250 --> 00:01:01.650
And now we have to reproduce the steps that we learned to do in the previous training, which are load

12
00:01:01.650 --> 00:01:04.320
the images that are going to be used as controls.

13
00:01:04.580 --> 00:01:07.160
Transfer them to our GB.

14
00:01:07.620 --> 00:01:09.000
Locate the faces.

15
00:01:09.750 --> 00:01:12.870
ENCODE them and mark them with a rectangle.

16
00:01:14.100 --> 00:01:19.710
If we're able to do this for each image, it would be very long and repetitive, especially if we had

17
00:01:19.710 --> 00:01:21.660
a database of 100 employees.

18
00:01:21.690 --> 00:01:23.250
Imagine what that code would be.

19
00:01:23.910 --> 00:01:28.650
Therefore, we have to learn how to create a loop that does all this with each of the images it finds

20
00:01:28.650 --> 00:01:34.590
in a list that codes them, and then finally searches within those images for the person it sees in

21
00:01:34.590 --> 00:01:35.250
the camera.

22
00:01:35.880 --> 00:01:38.130
I'm going to show you the pictures of my employees.

23
00:01:38.870 --> 00:01:41.820
I've already loaded into this employees folder.

24
00:01:41.840 --> 00:01:48.290
Some of the people who may look familiar to you, they are called Cosmo, Kramer, Elaine, Venus.

25
00:01:48.500 --> 00:01:51.290
Well, this third guy is your new best friend.

26
00:01:51.410 --> 00:01:54.770
And then here comes George and Jerry.

27
00:01:55.610 --> 00:01:59.210
Any resemblance to reality is purely coincidental.

28
00:01:59.780 --> 00:02:00.980
These are the images.

29
00:02:00.980 --> 00:02:04.810
So I'm going to leave them in the lesson resources for you to use if you want.

30
00:02:04.820 --> 00:02:08.660
Or you can use five pictures of your friends or whatever you want.

31
00:02:09.020 --> 00:02:14.420
I recommend that you include a picture of yourself as you need at least one of the people in the pictures

32
00:02:14.420 --> 00:02:17.690
to be able to stand in front of the camera to find a match.

33
00:02:18.580 --> 00:02:24.790
So we're going to ask the program to look for this folder and see how many images it has and to encode

34
00:02:24.790 --> 00:02:30.730
them so that we're also going to need to import OS, which we've used before in the course.

35
00:02:30.730 --> 00:02:33.850
And you know, it's used to work with an operating system.

36
00:02:34.150 --> 00:02:41.080
So we're going to create database and we're going to establish a path that is to say a variable that

37
00:02:41.080 --> 00:02:46.330
contains the name of the folder employees so that it can find our images there.

38
00:02:47.080 --> 00:02:49.810
We're also going to create a list of my images.

39
00:02:50.630 --> 00:02:52.130
It will initially be empty.

40
00:02:52.640 --> 00:02:56.180
It will be created each time the program is run dynamically.

41
00:02:56.600 --> 00:03:01.730
We are also going to get the names of the pictures, the names that appear in the name of the picture

42
00:03:01.730 --> 00:03:03.500
before JPEG.

43
00:03:04.580 --> 00:03:05.630
So what for?

44
00:03:05.780 --> 00:03:11.270
So that when we search the results, we can also display those names and tell who has been recognized.

45
00:03:11.540 --> 00:03:17.060
So we're also going to create a list of called employee names, and it's going to be the same as an

46
00:03:17.060 --> 00:03:20.260
empty list, which is going to be built dynamically.

47
00:03:20.270 --> 00:03:27.170
So if at some point you fire or hire new staff, you won't need to load or modify the items in the list.

48
00:03:27.740 --> 00:03:29.870
It's going to be dynamically modified.

49
00:03:30.260 --> 00:03:35.120
So the first thing I'm going to do is going to take all the names of all the photos that I find in the

50
00:03:35.120 --> 00:03:36.230
employees folder.

51
00:03:36.530 --> 00:03:42.170
And I'm going to do this through another variable called employee list and it's going to be equal to

52
00:03:42.170 --> 00:03:47.320
O's dot list d i and it's going to be set to path.

53
00:03:48.490 --> 00:03:51.160
That's how it's going to find the employees that I have here.

54
00:03:51.820 --> 00:03:55.960
So now when it finds them, those names are going to include the ending JPEG.

55
00:03:56.630 --> 00:04:01.580
So that we're going to have to do something to remove that ending so that we're left with pure names.

56
00:04:01.760 --> 00:04:08.810
So to see what we've got so far, we're going to temporarily print employee list on the screen and we're

57
00:04:08.810 --> 00:04:11.120
going to run it with the steps that we know.

58
00:04:13.260 --> 00:04:20.370
And here we get a list which contains Cosmo, Kramer, JPEG, Elaine, Venus, JPEG, and so forth.

59
00:04:20.820 --> 00:04:23.640
For now, it's just the list with the names of the pictures.

60
00:04:24.390 --> 00:04:28.830
And the next thing is to use those names to be able to import the images one by one.

61
00:04:29.220 --> 00:04:35.100
So we remove the print and now we're going to create a for loop for each name that it finds inside the

62
00:04:35.100 --> 00:04:36.210
employee list.

63
00:04:36.240 --> 00:04:42.690
We're going to create an internal variable called this image is going to be equal to an object.

64
00:04:42.690 --> 00:04:49.470
cv2 to which we apply the method i m read for image read.

65
00:04:50.040 --> 00:04:53.490
So this asks us to pass it the name of the image it has to read.

66
00:04:54.210 --> 00:04:59.070
Going to construct that name with the path dynamically because it's going to be different for each of

67
00:04:59.070 --> 00:04:59.850
the images.

68
00:05:00.330 --> 00:05:06.600
It's going to be a literal string containing first the path, then a slash, and then the name, which

69
00:05:06.600 --> 00:05:11.070
in each iteration name is going to be one of the elements of the employee list.

70
00:05:12.120 --> 00:05:14.730
This means at the end of each loop, the variable.

71
00:05:14.730 --> 00:05:20.760
This image will contain the complete path to each of the images in the list so that this value is not

72
00:05:20.760 --> 00:05:24.390
lost because in each iteration the variable is going to be rewritten.

73
00:05:24.540 --> 00:05:31.470
We're going to call my images, which is the empty list we created at the beginning, and in each iteration

74
00:05:31.470 --> 00:05:36.180
we're going to use append to add the value of the image to this list.

75
00:05:37.470 --> 00:05:42.570
And at the end of the loop, the variable my images will contain all the paths of all the images.

76
00:05:43.260 --> 00:05:49.590
Now we're also going to complete the list employee names with the method append, store all the names

77
00:05:49.590 --> 00:05:50.430
of the images.

78
00:05:50.520 --> 00:05:55.590
But be careful because we do not want to store the names as they are because that would include the

79
00:05:55.590 --> 00:05:56.970
JPEG extension.

80
00:05:57.420 --> 00:05:59.970
So we have to do something to build them in another way.

81
00:06:00.240 --> 00:06:04.170
We do it with o's dot path, dot splint text.

82
00:06:04.820 --> 00:06:09.360
And inside its parenthesis we will call name as it's index zero.

83
00:06:10.350 --> 00:06:16.050
This strategy allows us to support the components of the file name and to take only the index zero which

84
00:06:16.080 --> 00:06:18.030
the name of the file before the dot.

85
00:06:18.300 --> 00:06:20.730
So this loop will allow us to load both lists.

86
00:06:20.730 --> 00:06:23.760
The my images list and the employee's name list.

87
00:06:24.630 --> 00:06:29.130
Now we're going to print provisionally employee names to see what it shows us.

88
00:06:33.690 --> 00:06:37.710
And what we see here are the names of our employees without the JPEG at the ending.

89
00:06:38.040 --> 00:06:42.150
And so now we have a list that is going to allow us to put those names on the screen.

90
00:06:42.780 --> 00:06:48.660
The next thing would be encode images, and we're going to create a function to do this, which we define

91
00:06:48.660 --> 00:06:49.710
as ENCODE.

92
00:06:49.920 --> 00:06:54.360
And it's going to ask us to pass it, of course, the images that we want to encode.

93
00:06:54.930 --> 00:06:59.970
So inside this loop, we're going to make some clarifications to understand each one of the steps.

94
00:07:00.780 --> 00:07:03.180
First, we're going to create new list.

95
00:07:04.200 --> 00:07:06.720
And it's going to be called encoded list.

96
00:07:07.980 --> 00:07:13.110
Which is not going to be the same as the previous one, but it will have the same images, but this

97
00:07:13.110 --> 00:07:14.370
time encoded.

98
00:07:14.580 --> 00:07:17.400
So this list is going to be initialized as empty.

99
00:07:18.120 --> 00:07:26.070
Then we're going to convert all images to our G.B. and here we will make a loop, which is going to

100
00:07:26.070 --> 00:07:32.970
perform an action for each image that it finds inside images, which is the list of images that we are

101
00:07:32.970 --> 00:07:35.670
going to pass to it when calling this function.

102
00:07:36.300 --> 00:07:43.500
Well, then for each image we're going to make image to be equal to c v to object, which we're going

103
00:07:43.500 --> 00:07:46.740
to apply the method c v t color.

104
00:07:47.400 --> 00:07:53.160
And there we're going to pass the image to which we will apply this method, which will be the image

105
00:07:53.160 --> 00:08:00.180
of each iteration and the color coding that will be applied, which will be v two dot color.

106
00:08:00.980 --> 00:08:09.740
EEG are two GB with this, each of the images would be digitized with the type of color we need.

107
00:08:09.890 --> 00:08:13.430
So the next step is to locate where the face is within each image.

108
00:08:13.670 --> 00:08:16.070
Remember that we call this encode.

109
00:08:16.580 --> 00:08:22.850
So let's make a new variable called encoded, which is equal to f r dot face encoding.

110
00:08:24.230 --> 00:08:29.390
So you might remember that here we have to pass it to the image we want to encode, which is going to

111
00:08:29.390 --> 00:08:31.970
be the image at it's index zero.

112
00:08:32.930 --> 00:08:37.340
Then we're going to add to the list because it's already going to be transformed.

113
00:08:37.760 --> 00:08:45.290
Then to encode it list, we're going to add with append whatever there is in this variable encoded that

114
00:08:45.290 --> 00:08:46.790
we have just processed.

115
00:08:47.210 --> 00:08:50.960
So this list is going to be filled with images that are already encoded.

116
00:08:51.290 --> 00:08:55.070
And finally, because this is a function, we have to return something.

117
00:08:55.700 --> 00:09:02.540
And since it's received an encoded list, what it's going to do is it's going to return the encoded

118
00:09:02.540 --> 00:09:03.230
list.

119
00:09:04.300 --> 00:09:07.390
The code is return encoded list.

120
00:09:08.580 --> 00:09:10.260
So we're done with the function.

121
00:09:10.380 --> 00:09:15.300
Now we're going to call this function, but remember that as this function is going to return a list,

122
00:09:15.300 --> 00:09:18.990
we have to make the call inside a variable in order to store it.

123
00:09:19.560 --> 00:09:23.370
So we're going to create encoded employee list.

124
00:09:23.370 --> 00:09:28.020
And although you have seen that we have used many variables, this is the important one.

125
00:09:28.650 --> 00:09:34.020
This is the list that all the photos that are already encoded and converted to the GB system.

126
00:09:34.830 --> 00:09:36.650
The list is going to be the same as that.

127
00:09:36.660 --> 00:09:39.980
What they encode function returns and we're going to pass it.

128
00:09:39.990 --> 00:09:47.190
Whatever is in my images, which is the list that we have created in this loop with all the JPEG images

129
00:09:47.190 --> 00:09:48.600
that we had at the beginning.

130
00:09:48.780 --> 00:09:53.430
So now in order to see on screen what we have and to check that everything is okay, we're going to

131
00:09:53.430 --> 00:09:57.780
print out the length of the encoded employee list.

132
00:09:58.380 --> 00:10:03.060
Should be a length of five images because we have five pictures loaded in there.

133
00:10:03.600 --> 00:10:05.190
So here it's processing it.

134
00:10:05.700 --> 00:10:09.600
We see the names and it hasn't finished returning the code yet.

135
00:10:10.530 --> 00:10:14.030
And here it's going to say it's five pictures.

136
00:10:14.040 --> 00:10:14.700
Okay.

137
00:10:15.060 --> 00:10:20.100
So so far, we've managed to create a list of employee images in a dynamic way because it's going to

138
00:10:20.100 --> 00:10:21.480
generate itself.

139
00:10:22.050 --> 00:10:27.090
You just need to add or remove images from the folder and the system will take care of transforming

140
00:10:27.090 --> 00:10:30.960
them into a list, storing their names and determining how many there are.

141
00:10:31.350 --> 00:10:33.930
But this was just for show purposes.

142
00:10:33.960 --> 00:10:37.890
Let's go to the next lesson to perform the next step of our project.
