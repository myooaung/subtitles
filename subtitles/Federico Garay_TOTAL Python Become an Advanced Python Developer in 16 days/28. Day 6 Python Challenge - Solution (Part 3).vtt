WEBVTT
1
00:00:08.150 --> 00:00:13.460
The third part of the solution to the Day six project will be full of functions.

2
00:00:13.490 --> 00:00:19.220
Fundamentally, we are going to create four basic functions that are going to be called from several

3
00:00:19.220 --> 00:00:20.390
places in our code.

4
00:00:20.390 --> 00:00:25.700
And these are the functions that allow us to show and choose categories and recipes.

5
00:00:25.700 --> 00:00:29.090
We are so close and the program is going to be great.

6
00:00:29.090 --> 00:00:31.490
So let's go over to Pie Charm and get to work.

7
00:00:31.610 --> 00:00:33.560
And now let's start from where we left off.

8
00:00:33.560 --> 00:00:39.260
We already have our first two functions and now we're going to be in writing the show categories function,

9
00:00:39.560 --> 00:00:42.890
which is one of the first ones we need in our tree.

10
00:00:43.530 --> 00:00:48.030
So we're going to delete here and we're going to create a show categories function.

11
00:00:48.570 --> 00:00:50.640
Does this ask us for any parameter?

12
00:00:50.850 --> 00:00:51.570
Of course.

13
00:00:51.570 --> 00:00:57.420
We're going to need a path to know what categories are and for what folders are in a given path.

14
00:00:57.840 --> 00:01:01.680
Let's start by showing the user some indicator of what we have here.

15
00:01:02.460 --> 00:01:04.210
I'm going to say categories.

16
00:01:04.230 --> 00:01:10.290
Colon For the internal use of our function, we're going to create a variable called categories path,

17
00:01:10.290 --> 00:01:14.940
which contains the path that is formed with the path that we are passing to it.

18
00:01:15.790 --> 00:01:16.570
In this function.

19
00:01:16.570 --> 00:01:22.000
We're also going to need a list that feeds from all the categories that we find in the loop that we're

20
00:01:22.000 --> 00:01:26.560
going to do to be able to return a list with all those folder names.

21
00:01:26.770 --> 00:01:30.520
Then categories list will initialize empty.

22
00:01:31.450 --> 00:01:37.330
And also we're going to need a counter to show those folders with the number to the side.

23
00:01:37.330 --> 00:01:40.960
That's to be able to make that number grow after each record it makes.

24
00:01:40.960 --> 00:01:46.930
We're going to take it with a counter that begins in one, and now comes the loop, which is going to

25
00:01:46.930 --> 00:01:53.200
indicate that for each folder that it finds inside categories, path is going to apply a method called

26
00:01:53.350 --> 00:01:56.350
i t e r d I entered.

27
00:01:57.220 --> 00:01:59.800
I hope you've been able to find this method by yourself.

28
00:01:59.830 --> 00:02:04.930
It was one of the methods I was asking you to find by searching in the documentation all through the

29
00:02:04.930 --> 00:02:05.650
options.

30
00:02:06.340 --> 00:02:12.310
So we used it today because what we needed here is a method that allows us to iterate inside the directory

31
00:02:12.340 --> 00:02:17.920
to go through each of its elements, in this case by each one of its folders.

32
00:02:18.370 --> 00:02:23.710
So we're going to take the name of those folders and we're going to store them in a variable, but we

33
00:02:23.710 --> 00:02:26.110
need a string of the name of those folders.

34
00:02:26.960 --> 00:02:30.920
So it's going to be equal to string of folder.

35
00:02:31.040 --> 00:02:33.710
But remember, that folder is actually a path.

36
00:02:34.130 --> 00:02:36.230
So let's just take the name property.

37
00:02:36.470 --> 00:02:39.380
So remember that we have this function here to look for the name.

38
00:02:39.380 --> 00:02:41.210
And we did see that in this course.

39
00:02:42.070 --> 00:02:46.780
Then in each loop, once we have the name of the folder, we're going to show it.

40
00:02:47.380 --> 00:02:49.690
We're going to show a number and the folder.

41
00:02:50.020 --> 00:02:55.300
So we're going to build it with a string literal that first says the number of the folder it is and

42
00:02:55.300 --> 00:03:01.840
we do this with the counter and then it is going to have in a call the name of the folder, but it will

43
00:03:01.840 --> 00:03:04.240
actually be the string with the name of the folder.

44
00:03:04.780 --> 00:03:10.720
We do this so that user can see and choose from all the folders that there are at the same time.

45
00:03:10.720 --> 00:03:14.140
In addition to showing it, we're going to put it inside our list.

46
00:03:14.380 --> 00:03:21.790
So categories list is going to feed with append of a new element which will be folder, not the string

47
00:03:21.790 --> 00:03:25.090
of folder, but the folder that has the path data to get there.

48
00:03:26.020 --> 00:03:31.720
Counter will add a unit in each iteration of the loop, and finally it will exit the loop.

49
00:03:31.990 --> 00:03:36.910
And when it has everything ready, it will return to the code so that it can operate with it.

50
00:03:36.910 --> 00:03:39.760
And the list of all the categories that has received.

51
00:03:40.890 --> 00:03:42.540
This function is ready.

52
00:03:42.570 --> 00:03:48.780
Now we can show categories and therefore we can show here show categories, and we can pass the call

53
00:03:48.780 --> 00:03:54.450
directly and we can put here that what it needs as path is going to be my path.

54
00:03:55.600 --> 00:03:59.110
So this function is going to return a list with all the categories.

55
00:03:59.320 --> 00:04:03.340
So we are going to store it inside a variable called my categories.

56
00:04:03.760 --> 00:04:08.380
Then when it is executed, it is going to return my categories.

57
00:04:09.700 --> 00:04:13.720
So we're going to copy this same line every time we need to show categories.

58
00:04:14.140 --> 00:04:15.130
Not here.

59
00:04:15.160 --> 00:04:15.790
Here.

60
00:04:15.790 --> 00:04:17.320
Yes, here as well.

61
00:04:17.620 --> 00:04:18.820
And ready.

62
00:04:19.600 --> 00:04:21.100
Then we already have a function.

63
00:04:21.100 --> 00:04:25.510
This is going to be in charge of doing whatever we ask inside our tree.

64
00:04:26.820 --> 00:04:32.460
We're going to create one more function which this time is going to be choose category.

65
00:04:32.880 --> 00:04:38.970
We already have the categories inside the recipes folder and we're going to use it inside the new function

66
00:04:38.970 --> 00:04:44.430
called Choose Category for the user to choose which category of meals they want.

67
00:04:44.700 --> 00:04:46.680
So does this need a parameter?

68
00:04:47.130 --> 00:04:48.630
Yes, a list.

69
00:04:48.870 --> 00:04:51.330
A list of the categories from which they choose.

70
00:04:52.520 --> 00:04:57.230
Since the user is going to see all the categories and choose one of them, we need to make sure that

71
00:04:57.230 --> 00:05:01.100
they choose an appropriate value and not a value that can't be seen.

72
00:05:01.280 --> 00:05:04.610
Then we're going to have to make another wire loop.

73
00:05:05.480 --> 00:05:11.060
And before the while loop a variable that is incorrect value to make sure that it enters the loop in

74
00:05:11.060 --> 00:05:15.410
the first round and then only enters if the value is incorrect.

75
00:05:15.680 --> 00:05:21.950
The loop is going to be a while that checks that not correct choice is numeric.

76
00:05:23.200 --> 00:05:30.640
And it will also check a second condition with or to see if the integer of the correct choice is not

77
00:05:30.640 --> 00:05:34.390
within a range, but a range that goes from where?

78
00:05:35.080 --> 00:05:40.300
Well, now we don't know how many folders we're going to have within the categories because the user

79
00:05:40.300 --> 00:05:42.760
can keep creating and deleting categories.

80
00:05:43.590 --> 00:05:47.310
We know this will range from one, but we don't know up to where.

81
00:05:47.430 --> 00:05:53.010
So the second value is going to be whatever the length of the list we've passed.

82
00:05:53.610 --> 00:05:57.900
But remember that this list will give numbers ranging from one onwards.

83
00:05:58.110 --> 00:06:03.540
But we need to add one to it because the value that closes the range is not included.

84
00:06:03.990 --> 00:06:06.840
So we will always add one more value.

85
00:06:07.410 --> 00:06:13.530
And now we have this while in which we can verify that at least one of the two conditions is fulfilled.

86
00:06:13.590 --> 00:06:17.910
So we're able to ask the user, through correct choice, their input.

87
00:06:18.810 --> 00:06:25.570
So what are we going to ask in the input with quotation marks and a line break so that it has a space?

88
00:06:25.590 --> 00:06:33.180
We say choose a category and we put a colon and a space and we can make it a return that we'll send

89
00:06:33.180 --> 00:06:38.160
back to the user an element of the list, the elements that the user has chosen.

90
00:06:38.690 --> 00:06:41.820
So let's put the square brackets to choose an index.

91
00:06:41.840 --> 00:06:43.940
So what index do we choose?

92
00:06:44.630 --> 00:06:51.470
Of course, the one pasta is incorrect choice, but the user is going to give us a string, so we have

93
00:06:51.470 --> 00:06:55.550
to cast it inside an integer to correct choice.

94
00:06:55.910 --> 00:07:02.330
But since the indexes go from zero and our numbers go from one, we need to subtract a unit from it

95
00:07:02.330 --> 00:07:06.710
to get the correct index that has to be passed to the code to continue working.

96
00:07:07.660 --> 00:07:10.270
We already have the Chus category ready.

97
00:07:11.150 --> 00:07:15.770
Now we can replace this call here with a real one that says Choose category.

98
00:07:16.010 --> 00:07:19.400
And this function is going to ask us to pass it a list.

99
00:07:19.640 --> 00:07:22.190
And the list is going to be my categories.

100
00:07:22.400 --> 00:07:24.920
The one we have passed it with the previous function.

101
00:07:25.430 --> 00:07:31.100
And this function is going to return an element of a list that we're going to store in my category variable.

102
00:07:31.700 --> 00:07:35.690
There's going to be the chosen category and it is going to be stored there.

103
00:07:36.290 --> 00:07:43.640
Now I can also copy this line, which will be exactly the same in menu, option to menu option four

104
00:07:43.640 --> 00:07:45.440
and menu option five.

105
00:07:46.490 --> 00:07:48.560
And now look how it's all coming together.

106
00:07:48.920 --> 00:07:54.350
So I propose that we move forward, at least until we complete option one of the menu here, which asks

107
00:07:54.350 --> 00:07:59.660
us to show the recipes we need to create a function that shows us all the recipes.

108
00:07:59.960 --> 00:08:03.170
This is going to need the information of the category we have chosen.

109
00:08:03.560 --> 00:08:06.020
We're going to call it show recipes.

110
00:08:06.470 --> 00:08:08.980
And what is it going to need to show me the recipes?

111
00:08:08.990 --> 00:08:15.860
Well, a path that contains the information of where the recipes that I have to show are first.

112
00:08:15.860 --> 00:08:20.150
This will need to print a message telling the user that these are the recipes.

113
00:08:20.150 --> 00:08:24.830
Colon Then we'll need to create a path like we did before.

114
00:08:25.580 --> 00:08:30.770
This path recipes is going to be equal to the path that we pass to it.

115
00:08:31.690 --> 00:08:39.460
Then we're going to create an empty list with the recipes recipes list that does not have anything so

116
00:08:39.460 --> 00:08:44.050
that later, for all the recipes that it finds, it completes the list and returns it.

117
00:08:44.500 --> 00:08:48.970
So we're going to create a counter that keeps track so that we can show a number before each of the

118
00:08:48.970 --> 00:08:49.690
recipes.

119
00:08:50.200 --> 00:08:56.500
And now comes the for loop so that for each recipe found in recipe path, which is the path that we

120
00:08:56.500 --> 00:09:03.790
have built above, we apply apply the glob method to find all the files that have text as ending and

121
00:09:03.790 --> 00:09:04.450
colon.

122
00:09:04.960 --> 00:09:09.700
These are going to be the recipes that it finds inside the folder that we have passed to it.

123
00:09:10.450 --> 00:09:17.290
We're going to transform the name into a variable called Recipe Star to know that it is the name in

124
00:09:17.290 --> 00:09:19.260
string format of the recipe.

125
00:09:21.030 --> 00:09:24.180
Then it will cast recipe point name.

126
00:09:25.170 --> 00:09:28.770
It is only going to store the name there and not the whole path.

127
00:09:29.370 --> 00:09:33.380
And there we print to show the user in a very similar way to what we did before.

128
00:09:33.390 --> 00:09:40.410
An index that will be built with a call to the counter which will have one more value in each iteration,

129
00:09:40.770 --> 00:09:46.590
and next to it with a hyphen, will type the name of the recipe that we have in the recipe string.

130
00:09:47.370 --> 00:09:49.890
So this will allow us to show everything we have.

131
00:09:50.980 --> 00:09:55.720
Then with append, we're going to add to recipes list, which is our empty list.

132
00:09:56.440 --> 00:10:03.280
Each of the recipes that we find here, we do not put recipe string, but the variable recipe with all

133
00:10:03.280 --> 00:10:10.690
the data to the counter, we ask it to increase one more number to each iteration and we can exit the

134
00:10:10.690 --> 00:10:12.400
loop and return to the code.

135
00:10:12.580 --> 00:10:18.400
The recipe list, that is to say a list with all the recipes that has shown so that we can then make

136
00:10:18.400 --> 00:10:20.890
the choice of the recipes we have.

137
00:10:20.890 --> 00:10:27.340
The show recipes function ready so we can replace this here with the corresponding function call show

138
00:10:27.340 --> 00:10:29.860
recipes, which asks us for a path.

139
00:10:29.860 --> 00:10:33.580
And that path is going to be the one that we've built in my category.

140
00:10:34.090 --> 00:10:39.400
And as this is going to return a list, we're going to store it in a list called My Recipes that will

141
00:10:39.400 --> 00:10:41.500
be equal to what this function returns.

142
00:10:43.240 --> 00:10:46.630
And this is another call that we can copy and paste in every place.

143
00:10:46.630 --> 00:10:53.590
We have to show recipes, and this would be here in menu four where we can delete recipes.

144
00:10:53.740 --> 00:10:55.090
I hope you can follow me.

145
00:10:55.420 --> 00:10:57.070
This clearly makes sense.

146
00:10:57.070 --> 00:11:00.280
So the only difficulty sometimes is to understand it.

147
00:11:00.760 --> 00:11:02.800
So look how a code is being fed.

148
00:11:03.040 --> 00:11:04.930
And we're getting very close.

149
00:11:06.390 --> 00:11:10.500
We're now going to create a function that allows us to choose between the recipes that we have just

150
00:11:10.500 --> 00:11:11.070
shown.

151
00:11:11.640 --> 00:11:14.790
It's very similar to what we've done before with show categories.

152
00:11:15.330 --> 00:11:22.710
Let's put here choose recipes where we're going to ask for a list of the recipes from which to choose.

153
00:11:23.370 --> 00:11:28.410
So we're going to make an incorrect choice to make sure that the loop repeats over and over again.

154
00:11:28.650 --> 00:11:34.050
So recipe choice is going to be equal to X to make sure it's wrong.

155
00:11:34.560 --> 00:11:39.330
And here comes the while loop, which is going to make sure that as long as it doesn't happen, that

156
00:11:39.330 --> 00:11:47.850
recipe choice is numeric or that the integer of recipe choice is not in the range that goes as before

157
00:11:47.850 --> 00:11:53.940
from one to the length of the list, but adding one to the latter to make sure that the last number

158
00:11:53.940 --> 00:11:55.440
is also included.

159
00:11:56.730 --> 00:11:58.500
Colon and inside the loop.

160
00:11:58.500 --> 00:12:00.930
Let's make sure the recipe choice is equal.

161
00:12:00.960 --> 00:12:05.970
But what the user enters when we ask with a line break, choose a recipe.

162
00:12:07.200 --> 00:12:11.700
So here the user will put a number which has to meet these conditions that we've passed.

163
00:12:11.730 --> 00:12:16.980
Otherwise, the user will be asked again and again until they provide a valid number so that we can

164
00:12:16.980 --> 00:12:22.650
send back to the code an element of the list that we're going to put it with the square brackets to

165
00:12:22.650 --> 00:12:23.760
look for an index.

166
00:12:24.360 --> 00:12:25.770
And what are we going to put here?

167
00:12:26.400 --> 00:12:30.320
The same as before, an integer of whatever the user has chosen.

168
00:12:30.330 --> 00:12:35.100
Recipe choice minus one so that it is equated with the index numbers.

169
00:12:36.610 --> 00:12:42.010
Since we have choose recipes, we are going to call the Choose Recipes function to which we have to

170
00:12:42.010 --> 00:12:45.430
pass a list, which is the list of my recipes.

171
00:12:45.640 --> 00:12:52.780
And this is going to return an index, an element of a list that should be saved in my recipe in singular.

172
00:12:54.470 --> 00:12:57.140
And see how everything is concatenated together.

173
00:12:57.830 --> 00:13:01.460
If we have another call to choose recipes, which I think we have here.

174
00:13:01.460 --> 00:13:02.750
Yes, here's another one.

175
00:13:02.750 --> 00:13:05.780
We're going to replace it with the same line of code.

176
00:13:07.360 --> 00:13:12.040
I would say that we already have the primary functions, but we still need the specific functions,

177
00:13:12.040 --> 00:13:17.410
the ones that are used to read a recipe to create a new one and to delete it, and so on.

178
00:13:18.190 --> 00:13:23.560
And we're going to finish all of this in the next video where I promise you that you'll get the resolution

179
00:13:23.560 --> 00:13:26.200
of this very interesting program that we're creating.

180
00:13:26.350 --> 00:13:28.720
So I'll see you in the next video.
