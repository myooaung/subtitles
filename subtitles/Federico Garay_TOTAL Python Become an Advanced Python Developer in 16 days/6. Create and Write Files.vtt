WEBVTT
1
00:00:08.120 --> 00:00:13.940
If you enjoyed learning how to open, read and manipulate text files, just wait until this lecture

2
00:00:14.150 --> 00:00:20.430
where you will learn how to create, write and modify files without leaving Python.

3
00:00:20.450 --> 00:00:26.510
The changes we made to the text during the previous lecture only occurred in the variable we created

4
00:00:26.510 --> 00:00:32.390
with the contents of the text, but we were not saving it to the file itself.

5
00:00:32.750 --> 00:00:37.970
Now we will see exactly how to generate changes in the original file.

6
00:00:37.970 --> 00:00:43.760
We learned how to open a file using the open method and we put the name of our document as the only

7
00:00:43.760 --> 00:00:44.630
parameter.

8
00:00:44.780 --> 00:00:49.940
But Open actually receives one more parameter, which is the opening mode.

9
00:00:50.330 --> 00:00:54.740
The three opening modes that can be specified are read.

10
00:00:54.740 --> 00:01:02.570
Only mode are if you open it with R, it is not possible to make modifications on the file.

11
00:01:02.570 --> 00:01:04.940
You could only read its content.

12
00:01:05.120 --> 00:01:07.280
This is the default opening mode.

13
00:01:07.340 --> 00:01:13.580
If you don't put anything in this parameter, Python will assume that it should only be read open mode.

14
00:01:13.820 --> 00:01:20.330
That's why Python assumed we wanted to work in read only mode in everything we did in the previous lecture.

15
00:01:20.330 --> 00:01:23.390
We didn't put in any arguments right.

16
00:01:23.390 --> 00:01:24.410
Only mode.

17
00:01:24.650 --> 00:01:30.110
W In this case, if the file already exists, it is empty.

18
00:01:30.980 --> 00:01:37.040
For example, it would be reset from zero and if it does not exist, it is created.

19
00:01:37.190 --> 00:01:44.600
And finally right only mode by positioning at the end of the file a in this case the file is created

20
00:01:44.600 --> 00:01:50.960
if it does not exist, but if it does, the cursor is positioned at the end, keeping the original content

21
00:01:50.960 --> 00:01:52.760
so that you can write from there.

22
00:01:52.760 --> 00:01:57.530
There are different methods to write a file, but I think it would be better to explain them in practice.

23
00:01:57.530 --> 00:01:59.830
So let's head over to py term.

24
00:02:00.410 --> 00:02:05.120
So let's start by working with the first open method which is read only mode.

25
00:02:05.630 --> 00:02:10.790
We'll keep on working with the test text file containing these three lines.

26
00:02:10.970 --> 00:02:13.760
We don't need to open it since we have the preview here.

27
00:02:14.300 --> 00:02:15.890
Let's get back to PY charm.

28
00:02:15.950 --> 00:02:23.150
To create a variable named file, we'll say file is equal to open and first we'll pass the parameter

29
00:02:23.150 --> 00:02:24.950
for the file name in brackets.

30
00:02:24.950 --> 00:02:28.040
So brackets test dot text.

31
00:02:28.520 --> 00:02:31.970
And now we'll add the second parameter, which is the open method.

32
00:02:33.450 --> 00:02:35.190
So far we've admitted it.

33
00:02:35.190 --> 00:02:40.590
And when we do this, Python recognizes the read only mode, just like Phil told you before.

34
00:02:40.920 --> 00:02:44.610
So we're going to open it like we did before, but using the AR.

35
00:02:45.750 --> 00:02:50.730
So let's type file dot close, which is something we mustn't forget.

36
00:02:50.730 --> 00:02:54.780
And before closing, it will try typing something in the middle of this file.

37
00:02:55.380 --> 00:02:56.880
So file.

38
00:02:57.030 --> 00:02:58.980
And we'll use the right method named.

39
00:02:58.980 --> 00:02:59.490
Right.

40
00:02:59.490 --> 00:03:00.840
And here we type.

41
00:03:00.870 --> 00:03:03.270
I'm the new text.

42
00:03:05.260 --> 00:03:10.330
What do you think will happen if I have this file open in a read only mode and I want to write something?

43
00:03:10.810 --> 00:03:11.770
Well, let's see.

44
00:03:11.890 --> 00:03:13.240
We can execute it.

45
00:03:14.630 --> 00:03:20.450
It returns an error that says the file is not writable since we've opened it and read only mode.

46
00:03:20.630 --> 00:03:26.300
Every time you open a file in this mode and try to write, you'll get an error because that's not the

47
00:03:26.300 --> 00:03:27.260
correct mode.

48
00:03:27.740 --> 00:03:30.770
So there are two ways of writing inside a file.

49
00:03:30.950 --> 00:03:33.380
We can use W, which means right.

50
00:03:33.380 --> 00:03:37.700
Or A, which means right after the last character of this file.

51
00:03:37.790 --> 00:03:39.860
So let's do this with W.

52
00:03:40.340 --> 00:03:43.130
This letter restarts the file completely.

53
00:03:43.550 --> 00:03:48.500
If this file already exists, its contents will be replaced with a new text.

54
00:03:48.620 --> 00:03:52.190
And if it doesn't exist, it will simply be created.

55
00:03:52.340 --> 00:03:56.600
So first, let's try to create test one in w mode.

56
00:03:56.750 --> 00:03:57.590
And right.

57
00:03:57.590 --> 00:04:01.010
I'm the new text and let's execute it.

58
00:04:01.660 --> 00:04:05.710
So there's nothing in the console because the file's been created in the folder.

59
00:04:06.130 --> 00:04:09.940
Here's test one which says I am the new text.

60
00:04:10.450 --> 00:04:13.330
This other file hasn't been modified yet.

61
00:04:13.810 --> 00:04:21.820
If I write inside, test the existing file using W and write this, I'll lose what was already there.

62
00:04:22.630 --> 00:04:28.300
Now Test says I'm the new text and everything that was inside is lost.

63
00:04:28.540 --> 00:04:32.290
So be careful with W because it overwrites everything.

64
00:04:32.740 --> 00:04:36.370
The right command writes what you have here.

65
00:04:36.730 --> 00:04:40.540
But keep in mind that it doesn't add a line break automatically.

66
00:04:40.690 --> 00:04:49.540
That is if we write hello and create a line for file write below and then type world here and print

67
00:04:49.540 --> 00:04:50.020
it.

68
00:04:50.050 --> 00:04:54.220
We'll get a file that says hello world without any spaces.

69
00:04:54.730 --> 00:05:00.580
The line break won't be added unless you add a backslash followed by an NN, which is the way of adding

70
00:05:00.580 --> 00:05:05.830
a line break at the end of each of the lines or before the last line at least.

71
00:05:06.730 --> 00:05:12.190
If we execute it, our file will display the message Hello World in two separated lines.

72
00:05:12.460 --> 00:05:14.500
This is one of the options.

73
00:05:15.530 --> 00:05:18.020
Another option would be to write it like this.

74
00:05:18.590 --> 00:05:24.560
Delete this line and leave only right with three quotation marks at the beginning and end.

75
00:05:24.980 --> 00:05:29.540
A line break is not necessary where you must type entering line breaks manually.

76
00:05:29.870 --> 00:05:30.880
Hello world.

77
00:05:30.890 --> 00:05:31.820
Here I am.

78
00:05:32.960 --> 00:05:35.900
And if we execute this, the file will be overwritten.

79
00:05:35.960 --> 00:05:37.620
Now it says Hello World.

80
00:05:37.640 --> 00:05:40.670
Here I am in four separated lines.

81
00:05:40.940 --> 00:05:43.580
These are two options to add line breaks.

82
00:05:44.240 --> 00:05:45.590
So there's a method similar to.

83
00:05:45.590 --> 00:05:46.190
Right.

84
00:05:46.220 --> 00:05:47.360
Let me find it.

85
00:05:47.870 --> 00:05:52.490
So let's delete all of this from the DOT and we'll type a dot for you to see.

86
00:05:52.490 --> 00:05:55.370
There's write two lines in plural as well.

87
00:05:55.610 --> 00:05:59.480
This would correspond to read lines, but this is to write lines.

88
00:06:00.440 --> 00:06:03.820
If you use this method, you can pass a list of strings.

89
00:06:03.830 --> 00:06:08.240
So let's create a list that says, for example, Hello World.

90
00:06:08.330 --> 00:06:10.070
Here I am.

91
00:06:10.070 --> 00:06:13.670
And now I have four words or strings inside a list.

92
00:06:14.060 --> 00:06:16.970
If I print them, I'll obtain a file that says Hello World.

93
00:06:17.000 --> 00:06:19.250
Here I am without any spaces.

94
00:06:20.120 --> 00:06:25.340
So this is a bit puzzling because our common sense would tell us a method called write lines is great

95
00:06:25.340 --> 00:06:28.790
to write different lines, but its name is confusing.

96
00:06:28.820 --> 00:06:34.040
It should be called write all these strings one after the other, since it basically what it does,

97
00:06:34.610 --> 00:06:39.560
it doesn't write different lines, but it takes different string lines and concatenate them together.

98
00:06:40.560 --> 00:06:42.630
I personally don't use this method.

99
00:06:42.780 --> 00:06:47.340
If I had a list of strings that I wanted to write in different lines, I'd be more useful to create

100
00:06:47.340 --> 00:06:53.550
a for loop with the right method so as to write each element and separate them with a line break.

101
00:06:53.790 --> 00:06:55.590
We'd basically do it like this.

102
00:06:55.830 --> 00:07:02.670
Here we can have a list with these words and we separately create a for loop that says for each word

103
00:07:02.670 --> 00:07:03.360
in list.

104
00:07:03.360 --> 00:07:04.470
Let's call file.

105
00:07:04.830 --> 00:07:05.970
Write lines.

106
00:07:06.090 --> 00:07:09.570
Write word and concatenate with a line break.

107
00:07:11.000 --> 00:07:15.510
So if we execute this, we'll see that our file has added line breaks saying Hello world.

108
00:07:15.530 --> 00:07:21.380
Here I am thanks to the for loop, but in short, right lines is not a practical method.

109
00:07:21.800 --> 00:07:25.970
Finally, we'll open our file by locating ourselves in the last character.

110
00:07:26.510 --> 00:07:32.600
This opens the file, moves the cursor to the end of the text it contains and starts writing from there.

111
00:07:32.630 --> 00:07:40.880
So if we have our test text file here, which so far says Hello World, here I am, then we write file

112
00:07:41.180 --> 00:07:45.380
right here and welcome here and we execute it.

113
00:07:45.710 --> 00:07:50.570
Our file will be just as it was before, but it will say welcome at the end.

114
00:07:50.600 --> 00:07:53.600
We modify that file instead of rewriting it.

115
00:07:53.600 --> 00:07:59.570
So this method is quite used by programmers, especially when they want to write a log or see the activity

116
00:07:59.570 --> 00:08:02.570
history of a program which saves in a file.

117
00:08:02.570 --> 00:08:08.330
Everything you've done in a program, well, this allows you to save your activity after using a program

118
00:08:08.330 --> 00:08:11.720
by adding the date, and we'll soon see how we can do this.

119
00:08:11.810 --> 00:08:15.200
To sum up, that's what this open mode is used the most for.

120
00:08:15.230 --> 00:08:21.950
If I had done this using W instead of a, I wouldn't have got any activity history but a file which

121
00:08:21.950 --> 00:08:24.530
deletes everything and leaves only this.

122
00:08:25.310 --> 00:08:31.610
And if I use R, which is the read only mode, I get an error because it says, hey, this file is not

123
00:08:31.610 --> 00:08:32.420
writable.

124
00:08:32.810 --> 00:08:36.140
So these are the ways in which you can manipulate an original file.

125
00:08:36.710 --> 00:08:43.220
Not only can you display and manipulate its information inside Python, but also inside the file itself.

126
00:08:43.430 --> 00:08:49.070
In the next lecture, we're going to learn how to open, manipulate and close files that are located

127
00:08:49.070 --> 00:08:54.230
in the same folder as all the python files as well as in other folders that you choose.

128
00:08:54.500 --> 00:08:59.150
That is an option which enables you to find the folder path to get those files.

129
00:08:59.150 --> 00:09:01.340
So let's continue with the next lecture.

130
00:09:01.340 --> 00:09:03.350
I'm looking forward to teaching you this.
