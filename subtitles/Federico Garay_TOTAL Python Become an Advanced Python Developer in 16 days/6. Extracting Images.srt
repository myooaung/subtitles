1
00:00:08,030 --> 00:00:10,100
Now it's time to work with images.

2
00:00:10,550 --> 00:00:15,920
Let's click on photography so as to get to this site, which contains several images we can extract.

3
00:00:16,400 --> 00:00:20,780
So the goal of this lesson is to try to extract all the images on this site.

4
00:00:21,200 --> 00:00:25,490
At the same time, we don't want to extract extra images like this logo here.

5
00:00:25,490 --> 00:00:29,330
We just want the images of the courses that will be our mission.

6
00:00:29,780 --> 00:00:35,870
So images are often stored in a site that we can access through a URL link which can contain the extensions

7
00:00:35,870 --> 00:00:37,640
JPEG or PNG.

8
00:00:37,970 --> 00:00:40,130
This is not always the case though.

9
00:00:40,520 --> 00:00:45,980
For example, if we want to inspect this image, we just access the code and we'll find the tag that

10
00:00:45,980 --> 00:00:47,900
begins with IMG.

11
00:00:48,410 --> 00:00:55,070
There are some properties and a class element which is preceded by CRC for Source.

12
00:00:55,640 --> 00:01:00,560
It is precisely where we'll find our image if we enter this very site.

13
00:01:01,160 --> 00:01:06,140
So let's click on the link and there's a window that shows the image from the website which is displayed

14
00:01:06,140 --> 00:01:08,450
thanks to the URL link in source.

15
00:01:09,110 --> 00:01:15,530
So if we want to extract images from a website, we have to look for the IMG tag and find the source

16
00:01:15,530 --> 00:01:17,810
so as to get the URL link.

17
00:01:18,230 --> 00:01:20,570
So we're able to download this image now.

18
00:01:21,490 --> 00:01:26,470
Do you take into account that you can only extract images from websites which grant you permission or

19
00:01:26,470 --> 00:01:28,990
websites whose images are copyright free?

20
00:01:29,470 --> 00:01:34,660
Since this website belongs to Phil, you're free to download its images in order to practice.

21
00:01:35,020 --> 00:01:38,940
Okay, we want to extract all the images of the courses from this site.

22
00:01:38,950 --> 00:01:44,080
So let's go back to the code we're working with and let's delete all this to begin again.

23
00:01:45,040 --> 00:01:50,530
Let's change the URL since we've changed websites and we copy and paste this link here.

24
00:01:50,830 --> 00:01:58,240
So that result stores a requests which corresponds to the site we're interested in and then sends the

25
00:01:58,240 --> 00:01:59,290
link to soup.

26
00:02:00,160 --> 00:02:03,880
So now we need to figure out how we're going to find those images.

27
00:02:04,630 --> 00:02:10,840
Every time you scrape a web, you have to carefully observe the site and find out which elements will

28
00:02:10,840 --> 00:02:12,370
help you with your task.

29
00:02:12,910 --> 00:02:20,080
In this case, the first thing we can notice is that the images are inside an IMG tag, so we'll start

30
00:02:20,080 --> 00:02:21,280
to scrape there.

31
00:02:21,910 --> 00:02:29,470
Then let's create a variable named images which will be equal to a soup object that will select all

32
00:02:29,470 --> 00:02:31,120
the IMG tags.

33
00:02:31,330 --> 00:02:33,010
Now let's see what happens.

34
00:02:33,850 --> 00:02:35,470
We'll print images.

35
00:02:38,530 --> 00:02:44,320
And there's a list that starts with square bracket and contains several elements which are hard to read

36
00:02:44,320 --> 00:02:46,240
as they're really close to one another.

37
00:02:46,450 --> 00:02:49,420
So we'll create a loop in order to see this better.

38
00:02:49,750 --> 00:02:54,130
So for each item in images I will print.

39
00:02:54,670 --> 00:02:55,480
I am.

40
00:02:56,710 --> 00:03:00,760
Let's execute and our elements have been rearranged.

41
00:03:01,000 --> 00:03:02,950
There's one on top of the other.

42
00:03:03,670 --> 00:03:05,200
So what do we have here?

43
00:03:05,410 --> 00:03:09,220
A list of various elements that begin with IMG tag.

44
00:03:09,860 --> 00:03:12,770
We have to verify if these are the images we want.

45
00:03:13,850 --> 00:03:20,600
So note that each element says IMG and then alt, which means alternate text.

46
00:03:21,140 --> 00:03:27,050
That is a kind of description of the image and class is present in all the images.

47
00:03:28,170 --> 00:03:28,500
Okay.

48
00:03:28,500 --> 00:03:29,250
Let's see.

49
00:03:29,250 --> 00:03:34,740
The first image appears to be the site logo, the one that's up here.

50
00:03:35,490 --> 00:03:37,080
We're not interested in that one.

51
00:03:38,040 --> 00:03:41,730
On both the second and the third image correspond to the logo.

52
00:03:42,870 --> 00:03:46,110
And so the fourth is one of the images we're looking for.

53
00:03:47,140 --> 00:03:51,310
In order to identify the ones that we want, we have to spot some difference.

54
00:03:51,580 --> 00:03:58,240
It's likely that the class tag contains that information, so note that the class tags of the logo image

55
00:03:58,240 --> 00:04:08,230
say fusion dash standard dash logo, and that the class tags of the images of the courses say img dash

56
00:04:08,230 --> 00:04:09,310
responsive.

57
00:04:09,930 --> 00:04:15,900
So that's the pattern in all the images corresponding to the courses, the class tag, and we should

58
00:04:15,900 --> 00:04:17,550
keep an eye on that.

59
00:04:18,450 --> 00:04:22,140
The images we're going to extract are the ones containing that tag.

60
00:04:22,810 --> 00:04:26,540
So let's go back here and replace IMG tags with classes.

61
00:04:26,560 --> 00:04:30,490
So we put dot and img dash responsive.

62
00:04:31,550 --> 00:04:35,420
If we print this, we'll only obtain the images corresponding to the courses.

63
00:04:36,200 --> 00:04:39,830
So we've kind of isolated the images that we wanted in the first place.

64
00:04:40,070 --> 00:04:43,700
Now we need to find a way to download them on our computers.

65
00:04:44,310 --> 00:04:50,280
So since this is a list, instead of creating a loop to see the elements, we can ask for the index.

66
00:04:50,280 --> 00:04:53,700
Zero of this soup and print images.

67
00:04:56,390 --> 00:05:03,950
Note that this element contains an IMG tag, a class, some image measurements and the source which

68
00:05:03,950 --> 00:05:05,210
is the link to the image.

69
00:05:06,510 --> 00:05:07,080
That's the link.

70
00:05:07,080 --> 00:05:09,720
We need to download that image on our computer.

71
00:05:11,070 --> 00:05:15,840
So let's add RC here at the end so as to look for the object source.

72
00:05:16,750 --> 00:05:21,490
As regards to the object in index one will obtain the image url.

73
00:05:22,120 --> 00:05:22,750
Perfect.

74
00:05:22,750 --> 00:05:23,830
We're getting there.

75
00:05:24,100 --> 00:05:27,340
So how do we download the URL on our computer?

76
00:05:27,850 --> 00:05:30,610
Look at this because it's a nail biter.

77
00:05:31,060 --> 00:05:37,510
Let's make a new request that can be image one and we'll just store the image.

78
00:05:37,870 --> 00:05:38,980
The first image.

79
00:05:39,370 --> 00:05:43,600
Then we can make a loop in order to do the same with all the images.

80
00:05:44,410 --> 00:05:50,530
Now we'll type requests, dot get and call the URL that we found in images.

81
00:05:51,220 --> 00:05:52,540
So let's type images.

82
00:05:52,540 --> 00:05:55,480
And if we print image one, what do we obtain?

83
00:05:57,610 --> 00:06:02,200
We simply obtain response to 200 not interested in this.

84
00:06:02,200 --> 00:06:06,730
In order to extract whatever we want, we need to call the element content.

85
00:06:07,330 --> 00:06:13,570
And if we print this will receive a very long file, which is impossible for us to interpret as it is

86
00:06:13,570 --> 00:06:14,860
a binary file.

87
00:06:15,650 --> 00:06:19,520
This is how computers read, decodes and stores in image.

88
00:06:20,900 --> 00:06:25,910
With this, we can tell our computer, you need to convert this code into an image and store it.

89
00:06:26,300 --> 00:06:27,650
So how do we do that?

90
00:06:28,270 --> 00:06:32,020
We delete this print and remember we're going to use content.

91
00:06:32,290 --> 00:06:36,640
So let's create a new file named F that will be equal to open.

92
00:06:37,600 --> 00:06:40,390
We can put a file name like my underscore.

93
00:06:40,420 --> 00:06:42,250
Image jpeg.

94
00:06:42,820 --> 00:06:45,790
Try to use the same extension as the original file.

95
00:06:46,360 --> 00:06:53,110
And the opening method we're going to use is not just W which we employed to write, it will be WB,

96
00:06:53,110 --> 00:06:55,180
which stands for write binary.

97
00:06:56,560 --> 00:06:59,020
So far, we're creating an empty file.

98
00:07:00,900 --> 00:07:02,610
Now we're going to type in it.

99
00:07:02,610 --> 00:07:04,440
Let's put f dot.

100
00:07:04,440 --> 00:07:05,160
Right.

101
00:07:05,670 --> 00:07:07,200
And what are we going to write?

102
00:07:07,410 --> 00:07:09,540
Image one dot content.

103
00:07:10,150 --> 00:07:15,670
So all of this text we have here, the way in which our computer reads an image is going to be stored

104
00:07:15,670 --> 00:07:21,430
in the file we've created, which is my underscore image dot jpeg.

105
00:07:22,410 --> 00:07:25,680
So let's make sure to close it with F close.

106
00:07:25,890 --> 00:07:31,620
And if we execute it, we won't see anything on the screen, just the previous print.

107
00:07:32,100 --> 00:07:38,460
But if we go to the DE 11 where we save our projects, we'll find my image, which is on the computer.

108
00:07:39,520 --> 00:07:46,030
So if you want to save it in a different place, remember to go to your files name here and add colon

109
00:07:46,030 --> 00:07:48,490
and a path in order to add a new folder.

110
00:07:50,300 --> 00:07:55,820
So if we put this inside a loop, we'll be able to download all the images that we find on the website

111
00:07:55,820 --> 00:07:56,720
we're working with.

112
00:07:57,230 --> 00:08:00,260
And this has been quite demanding yet amazing.

113
00:08:00,770 --> 00:08:05,720
You've got a valuable resource that lets you scrape websites in order to extract all the images you

114
00:08:05,720 --> 00:08:06,200
want.

115
00:08:06,860 --> 00:08:09,770
Always make sure to have the website's permission.

116
00:08:10,610 --> 00:08:12,410
And let's go to the next lesson.
