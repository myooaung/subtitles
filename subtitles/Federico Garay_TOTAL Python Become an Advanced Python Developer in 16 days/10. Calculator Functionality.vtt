WEBVTT
1
00:00:07.950 --> 00:00:14.190
For this lesson, we're going to program our calculator as we only have a bunch of numbers that don't

2
00:00:14.190 --> 00:00:15.000
do anything.

3
00:00:15.750 --> 00:00:17.790
Nothing happens if we click on them.

4
00:00:18.480 --> 00:00:24.300
So when programming this, we have to keep in mind that 14 buttons out of 16 have to show the symbol

5
00:00:24.300 --> 00:00:26.610
on the calculator display once they're clicked.

6
00:00:27.540 --> 00:00:31.270
All numbers and four mathematical symbols should do this.

7
00:00:31.290 --> 00:00:35.430
These buttons are in charge of showing their contents on the display.

8
00:00:35.940 --> 00:00:41.670
Then we have two more buttons c, e and delete, which carry out different tasks.

9
00:00:41.880 --> 00:00:44.820
So let's begin with the 16 buttons we have here.

10
00:00:45.930 --> 00:00:48.570
We'll create a variable named operator.

11
00:00:49.380 --> 00:00:53.490
Operator will store the numbers that are being used by creating a string.

12
00:00:54.480 --> 00:01:00.330
So operator will initialize as an empty string in which all the numbers that are used before selecting,

13
00:01:00.330 --> 00:01:03.180
delete, or obtaining a result will be stored.

14
00:01:03.720 --> 00:01:05.880
We'll create our first function below.

15
00:01:05.910 --> 00:01:09.330
This function will be called every time we click on a button.

16
00:01:09.990 --> 00:01:12.780
So we define it as click button.

17
00:01:14.310 --> 00:01:20.430
This function requires arguments such as a character which can be a number or a symbol depending on

18
00:01:20.430 --> 00:01:21.750
which button is used.

19
00:01:23.010 --> 00:01:25.200
First, we'll access our operator.

20
00:01:25.200 --> 00:01:31.200
Since it is a variable that's outside the function, we'll change it to a global operator and now we

21
00:01:31.200 --> 00:01:32.160
can access it.

22
00:01:33.150 --> 00:01:37.460
Next step is to update the contents in operator because a button has been clicked.

23
00:01:37.470 --> 00:01:41.280
Remember, this function will be called every time a button is used.

24
00:01:42.240 --> 00:01:48.180
So operator will be equal to whatever there is in operator plus the character that's passed to it.

25
00:01:49.320 --> 00:01:57.300
So once operator is updated will go to the calculator display to insert from end the operator.

26
00:01:58.140 --> 00:02:03.180
This would show on the calculator display whatever there is in the operator variable.

27
00:02:03.600 --> 00:02:07.860
Remember, the operator will be collecting all the numbers that are being used.

28
00:02:08.190 --> 00:02:13.590
So now we have to assign the click button function to each of the buttons so that this function is called

29
00:02:13.590 --> 00:02:15.420
every time a button is clicked.

30
00:02:15.630 --> 00:02:20.640
And we're going to do that down here where we created these buttons.

31
00:02:21.270 --> 00:02:25.050
Nevertheless, take into account that these buttons were created in a loop.

32
00:02:25.440 --> 00:02:31.350
Therefore, we cannot assign a function call here because it should assign different contents from each

33
00:02:31.350 --> 00:02:31.920
button.

34
00:02:32.670 --> 00:02:33.960
Hard as we try.

35
00:02:33.990 --> 00:02:36.200
There's no way to do this from a loop.

36
00:02:36.210 --> 00:02:39.210
So if you find a way, please let me know.

37
00:02:39.960 --> 00:02:46.260
So when these buttons are created, we have to store them in variables as to assign the click button

38
00:02:46.260 --> 00:02:48.000
call to those variables.

39
00:02:48.210 --> 00:02:55.260
Let's create a new list before the buttons are created that can be named stored buttons which will be

40
00:02:55.260 --> 00:02:57.000
equal to an empty list.

41
00:02:58.110 --> 00:03:03.480
As regards our loop, once the buttons are created, we're going to add them to that list.

42
00:03:04.470 --> 00:03:10.800
So stored buttons, dot append and here we store the button that has been created.

43
00:03:12.510 --> 00:03:18.750
Once we finish creating the buttons, we'll have a list of stored buttons containing all of our buttons.

44
00:03:19.770 --> 00:03:25.650
So let's go to the end of the loop, and once we're out of it will assign a click button call to each

45
00:03:25.650 --> 00:03:26.760
button on the list.

46
00:03:27.540 --> 00:03:36.540
Naturally, will begin with the first one we call stored buttons in its index zero dot config and we

47
00:03:36.540 --> 00:03:45.420
add command equals lamb BDA so as to add the argument our function is going to need, otherwise we won't

48
00:03:45.420 --> 00:03:46.290
be able to do it.

49
00:03:46.950 --> 00:03:54.660
And here we call click button and we pass in the case of button in index zero String seven because it

50
00:03:54.660 --> 00:03:56.760
is the character of the first button.

51
00:03:57.600 --> 00:03:59.430
So we have the first of them.

52
00:04:00.300 --> 00:04:02.520
We should do this with all 14 buttons.

53
00:04:02.520 --> 00:04:04.770
So let's copy until we have all of them.

54
00:04:05.220 --> 00:04:06.000
That's okay.

55
00:04:07.530 --> 00:04:13.260
Now it's time to replace these with zero one, two, three, and so on.

56
00:04:13.620 --> 00:04:18.000
We mustn't add buttons, see, and delete as they carry out other functions.

57
00:04:19.140 --> 00:04:25.890
We keep on doing this until we reach number 11, because number 12 is the key button and number 13 is

58
00:04:25.890 --> 00:04:26.850
the delete button.

59
00:04:27.330 --> 00:04:30.900
So let's skip them and enter 14 and 15.

60
00:04:32.250 --> 00:04:35.100
Now we enter the order, the keys appearing.

61
00:04:35.670 --> 00:04:39.360
We have seven, eight, nine.

62
00:04:40.020 --> 00:04:48.300
Then the plus sign it is followed by four, five, six and the minus sign.

63
00:04:49.020 --> 00:04:52.680
Then we have one, two and three.

64
00:04:54.070 --> 00:05:00.430
Now it comes the multiplication sign, which is the asterisks, not the x, since we need a character

65
00:05:00.430 --> 00:05:03.040
that can be used in a mathematical operation.

66
00:05:03.340 --> 00:05:06.940
Then we need the zero and finally the division sign.

67
00:05:07.840 --> 00:05:12.940
So we have assigned the call to each of the buttons so that they require a click button to show the

68
00:05:12.940 --> 00:05:17.500
corresponding number or symbol on the calculator display.

69
00:05:17.890 --> 00:05:20.500
Let's check if this works the way we want it to.

70
00:05:22.000 --> 00:05:23.560
So here's our calculator.

71
00:05:23.650 --> 00:05:26.100
I'll click on seven and it's displayed.

72
00:05:26.110 --> 00:05:27.040
Perfect.

73
00:05:27.490 --> 00:05:34.930
I'll click on five and note that it repeats the last entered number and adds the next one seven, then

74
00:05:34.930 --> 00:05:39.250
seven, five, then seven, five, six, and so on.

75
00:05:40.240 --> 00:05:43.540
It generates a whole new string without deleting what's before.

76
00:05:44.050 --> 00:05:46.090
This is something we need to fix.

77
00:05:46.570 --> 00:05:48.250
So let's go all the way up.

78
00:05:48.460 --> 00:05:55.210
And before our operator is shown on the display, we have to call calculator display delete so that

79
00:05:55.210 --> 00:05:57.280
everything that was entered is deleted.

80
00:05:57.490 --> 00:05:59.620
From zero to end.

81
00:06:01.000 --> 00:06:03.010
Now, it shouldn't pile up everything.

82
00:06:03.160 --> 00:06:04.800
Look seven.

83
00:06:04.810 --> 00:06:06.250
Then I click on eight.

84
00:06:06.970 --> 00:06:07.840
That's great.

85
00:06:08.230 --> 00:06:11.230
Now I click on minus six.

86
00:06:11.440 --> 00:06:12.850
No problem there.

87
00:06:13.420 --> 00:06:15.820
Plus and nine.

88
00:06:16.730 --> 00:06:20.760
So now all the buttons are showing what's stored in them except for these two.

89
00:06:20.780 --> 00:06:23.450
Of course, they don't do anything for now.

90
00:06:24.760 --> 00:06:27.110
Okay, so we've programmed all our buttons.

91
00:06:27.440 --> 00:06:28.010
Why?

92
00:06:28.040 --> 00:06:29.510
That was quite fast, wasn't it?

93
00:06:29.960 --> 00:06:34.040
Now we'll create a function that allows us to delete using the delete button.

94
00:06:34.250 --> 00:06:36.980
So let's type D, F and delete.

95
00:06:36.980 --> 00:06:39.940
All this function doesn't require arguments.

96
00:06:39.950 --> 00:06:46.280
It will only call calculator display delete and it will delete everything from zero to end.

97
00:06:48.170 --> 00:06:51.230
Now we have to assign this function to its corresponding button.

98
00:06:51.800 --> 00:06:57.770
So we're going to incorporate it here where we have the rest of the functions corresponding to the buttons.

99
00:06:58.720 --> 00:07:04.540
This new function should be placed in the button whose index is 13, so we don't need to enter all of

100
00:07:04.540 --> 00:07:04.840
this.

101
00:07:04.840 --> 00:07:08.470
This command will be delete all, which is the name of our function.

102
00:07:08.950 --> 00:07:14.560
If we execute this now, we can enter any number or symbol and if we want to delete it, we just click

103
00:07:14.560 --> 00:07:16.150
on delete and that's it.

104
00:07:16.510 --> 00:07:19.840
And yet note that there's another problem we can delete.

105
00:07:19.840 --> 00:07:26.560
Sure, but when we enter something else, display shows the previous characters again because operator

106
00:07:26.560 --> 00:07:34.120
wasn't reset in order to access, operator will change it to global operator and then we'll make operator

107
00:07:34.120 --> 00:07:36.040
B equal to an empty string.

108
00:07:36.490 --> 00:07:40.180
As a result, nothing should pop up if I execute it.

109
00:07:40.180 --> 00:07:43.990
Seven minus six let's delete.

110
00:07:44.110 --> 00:07:45.130
Perfect.

111
00:07:45.220 --> 00:07:48.760
Let's enter something again and no troubles at all.

112
00:07:48.910 --> 00:07:49.990
It's been solved.

113
00:07:50.590 --> 00:07:54.280
The last button we need to set up is the one we obtain the total with.

114
00:07:54.310 --> 00:07:55.510
So let's do that.

115
00:07:56.530 --> 00:08:00.010
We're going to need another function which can be named get the result.

116
00:08:00.970 --> 00:08:07.510
It doesn't require arguments and we need to access global operator as we'll have to use whatever there

117
00:08:07.510 --> 00:08:10.450
is in operator in order to make our calculations.

118
00:08:10.930 --> 00:08:12.310
This is quite easy.

119
00:08:12.730 --> 00:08:21.100
There's a function named eval for evaluate and we're going to evaluate our operator, but this function

120
00:08:21.100 --> 00:08:22.630
will send back an integer.

121
00:08:22.900 --> 00:08:28.570
So we need to put this on a string and store this in a variable which can be named result.

122
00:08:28.810 --> 00:08:33.370
So result will be equal to a string that contains the operator evaluation.

123
00:08:33.850 --> 00:08:41.020
This function is great because it will only read whatever string is in here, say five plus four and

124
00:08:41.020 --> 00:08:45.610
realize it is a mathematical operation even though it is a string.

125
00:08:45.760 --> 00:08:52.210
Therefore it will convert it to nine and then we'll convert that to a string so as to show it on the

126
00:08:52.210 --> 00:08:53.530
calculator display.

127
00:08:54.910 --> 00:08:55.270
Okay.

128
00:08:55.270 --> 00:08:58.360
So first we're going to delete what's on the calculator display.

129
00:08:58.360 --> 00:09:01.510
So let's copy this line, the one that's intended to delete.

130
00:09:01.510 --> 00:09:09.070
And once this is deleted, we call calculate the display again, only this time we insert zero and result.

131
00:09:10.090 --> 00:09:11.890
There's one thing missing.

132
00:09:11.920 --> 00:09:18.250
Once we obtain the result we need to make operator reset itself to an empty string so as to keep on

133
00:09:18.250 --> 00:09:18.910
working.

134
00:09:19.240 --> 00:09:22.690
After this, we'll assign this function to the corresponding button.

135
00:09:23.410 --> 00:09:32.650
So we'll copy this line and we'll assign it to number 12, index 12, and we'll enter the get result

136
00:09:32.650 --> 00:09:33.550
call here.

137
00:09:35.050 --> 00:09:38.410
We should have everything ready by now, so let's execute it.

138
00:09:39.040 --> 00:09:44.650
Let's enter seven minus six, ask for total and it's one.

139
00:09:44.680 --> 00:09:45.580
It worked.

140
00:09:46.060 --> 00:09:51.010
So 23 multiplied by six equals 138.

141
00:09:51.940 --> 00:09:56.200
Our calculator is working, so we're done with this part of our program.

142
00:09:56.350 --> 00:09:58.450
So we continue with the following part.
