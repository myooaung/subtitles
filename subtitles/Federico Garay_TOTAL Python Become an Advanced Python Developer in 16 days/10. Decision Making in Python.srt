1
00:00:07,880 --> 00:00:08,690
Attention.

2
00:00:08,870 --> 00:00:15,860
Drive your attention from this lecture on, you are going to be taking a very significant step in your

3
00:00:15,860 --> 00:00:17,260
programming career.

4
00:00:17,270 --> 00:00:24,430
We are going to teach you code that makes decisions, which is the seed for artificial intelligence.

5
00:00:24,440 --> 00:00:27,640
What you are going to learn today is called control flow.

6
00:00:27,650 --> 00:00:34,640
It basically consists of making it so that depending on whether a condition is met or not, Python executes

7
00:00:34,640 --> 00:00:36,410
one code or another.

8
00:00:36,620 --> 00:00:42,560
For example, if you're programming a video game, control flow will be used to say, if player one

9
00:00:42,560 --> 00:00:49,760
defeats the enemy, take that player to the next level and if they've not defeated their enemy, execute

10
00:00:49,760 --> 00:00:55,060
the code that subtracts a life and restarts that player at the current level.

11
00:00:55,070 --> 00:01:02,270
For another example, if it's a program that manages a database, control flow will be used to say if

12
00:01:02,270 --> 00:01:10,000
the searched record is found, display its data on the screen and if not, display an error message.

13
00:01:10,010 --> 00:01:17,900
The three key words that we need to control the flow of our programs are if if such a thing happens

14
00:01:18,200 --> 00:01:21,440
ELIF, which is a combination of else.

15
00:01:21,440 --> 00:01:29,450
And if that means if something doesn't happen, see if another thing happens and else which means if

16
00:01:29,450 --> 00:01:38,660
not, the following would be a typical example of if Elif and else in Python, if a condition is met,

17
00:01:38,840 --> 00:01:40,280
execute this code.

18
00:01:40,460 --> 00:01:42,140
This is the most basic.

19
00:01:42,140 --> 00:01:45,530
If the condition is met, it executes and goes on.

20
00:01:45,860 --> 00:01:52,640
But if it is not met, it skips the code without executing it and goes on with the rest of the program

21
00:01:52,640 --> 00:01:54,440
as if there was nothing there.

22
00:01:55,610 --> 00:02:02,900
But you can also tell it, if not else, execute this other code here.

23
00:02:02,900 --> 00:02:05,750
Python will execute one of the two codes.

24
00:02:05,750 --> 00:02:10,850
If the condition is met, it will execute the first one and if not the second one.

25
00:02:11,540 --> 00:02:18,980
But you can also introduce in the middle some more checks thanks to Elif, which stands for LS.

26
00:02:18,980 --> 00:02:27,470
If, as we've learned, that is to say if the condition is not fulfilled, see if the other one is fulfilled.

27
00:02:27,740 --> 00:02:30,070
You can put as many LPs as you want.

28
00:02:30,080 --> 00:02:35,900
Python will check your conditions from top to bottom, and when it finds one that is met, it will execute

29
00:02:35,900 --> 00:02:39,050
its code and leave the rest of the tree.

30
00:02:39,350 --> 00:02:46,190
Note that whenever you write an if, an ELIF or an LS, you must put a colon at the end of the line.

31
00:02:46,190 --> 00:02:52,370
And something to pay close attention to in Python is that the syntax of the control flow?

32
00:02:52,490 --> 00:02:59,690
Because although its writing is simpler than other languages, it is much, much stricter with the tabulation.

33
00:02:59,690 --> 00:03:05,510
That is, the white spaces that denote the priority and the order of its logical sequence.

34
00:03:05,750 --> 00:03:10,250
The good thing is that this makes it very easy to read, as you will see pretty soon.

35
00:03:10,370 --> 00:03:14,540
And in fact, let's see it now on our beloved black screen.

36
00:03:14,660 --> 00:03:16,280
Welcome to the black screen.

37
00:03:16,490 --> 00:03:22,190
And we're going to start here with a file called Decision Maker, where we're going to start with something

38
00:03:22,190 --> 00:03:22,970
very simple.

39
00:03:22,970 --> 00:03:25,700
We're going to check if ten is greater than nine.

40
00:03:26,150 --> 00:03:32,930
So remember, we put the code on at the end when we hit enter py charm immediately understands that

41
00:03:32,930 --> 00:03:36,230
we need the tabulation here so it puts the cursor where it should be.

42
00:03:37,050 --> 00:03:42,120
Keep in mind that if you delete it and start writing here, you'll be able to do it, but then you will

43
00:03:42,120 --> 00:03:42,780
get an error.

44
00:03:42,810 --> 00:03:48,480
It is essential that after the colon comes the tabulation and here is where you're going to give the

45
00:03:48,480 --> 00:03:53,280
order of what to execute, but only in case the verification is correct.

46
00:03:53,490 --> 00:03:55,130
We're going to ask it to print.

47
00:03:55,140 --> 00:03:57,870
It is correct and we're going to execute it.

48
00:03:58,760 --> 00:04:01,640
Run and we choose decisions maker.

49
00:04:01,820 --> 00:04:07,370
And here we see that it prints is correct because indeed ten is greater than nine.

50
00:04:08,240 --> 00:04:10,670
That is to say that the condition is fulfilled.

51
00:04:10,970 --> 00:04:16,430
So the only thing that if is checking is the true or false value that we find here.

52
00:04:16,670 --> 00:04:23,600
And actually, if I go straight and put something like if true, it will print, it is correct.

53
00:04:23,870 --> 00:04:29,990
The thing is, if there is a value here that says true or some comparison that means true, then the

54
00:04:29,990 --> 00:04:31,520
next code is executed.

55
00:04:31,520 --> 00:04:33,770
And if it says false, then it is not.

56
00:04:34,190 --> 00:04:35,900
So let's try it with a variable.

57
00:04:36,170 --> 00:04:39,280
Let's suppose I have a variable x that has the value.

58
00:04:39,290 --> 00:04:39,950
True.

59
00:04:40,250 --> 00:04:48,080
And here I check if x and we print it and it tells me is correct because you can see it x is true.

60
00:04:49,300 --> 00:04:52,090
And now let's see what happens if the condition is not met.

61
00:04:52,540 --> 00:04:58,990
If I have here and if that says if five is equal to two and the last time I checked five is not equal

62
00:04:58,990 --> 00:05:03,530
to two, then what would happen in this case that we don't execute anything?

63
00:05:03,550 --> 00:05:06,130
There is no line to execute python.

64
00:05:06,130 --> 00:05:11,380
Did the check saw that this is not true and didn't print anything because it couldn't go into the part

65
00:05:11,380 --> 00:05:12,100
of the code.

66
00:05:12,430 --> 00:05:14,710
It didn't even read it well.

67
00:05:14,710 --> 00:05:20,110
But then we have the option to decide what to do in case the condition is not fulfilled.

68
00:05:20,110 --> 00:05:22,600
We may want that some other thing happened.

69
00:05:22,600 --> 00:05:24,100
If the condition is not met.

70
00:05:24,640 --> 00:05:33,040
Well, at the same indentation level of the if we put else statement, which is the same to say if not

71
00:05:33,430 --> 00:05:40,120
and when we hit enter, we must continue with this same indentation line to say what is going to happen

72
00:05:40,120 --> 00:05:42,100
if the verification is not correct.

73
00:05:42,800 --> 00:05:46,220
Well, we're going to ask that it declares it is not correct.

74
00:05:46,220 --> 00:05:50,450
And now if we run, we have the phrase it is not correct.

75
00:05:50,630 --> 00:05:54,560
Now, this code wasn't even read because it just read the second part.

76
00:05:54,650 --> 00:05:59,450
It only read a particular block of code if the condition allows the computer to read it.

77
00:05:59,510 --> 00:06:00,950
Do you follow me this far?

78
00:06:01,430 --> 00:06:04,100
Well, now let's see another example.

79
00:06:04,130 --> 00:06:07,100
Let's delete all this and let's put in Pat.

80
00:06:07,400 --> 00:06:15,300
And let's say that pet equals dog and let's do the same checking with this if pet equals cat.

81
00:06:15,320 --> 00:06:17,120
So this is going to be false.

82
00:06:17,300 --> 00:06:20,000
And we put the code on here and we ask it to print.

83
00:06:20,420 --> 00:06:21,990
Well, you have a cat.

84
00:06:22,010 --> 00:06:22,670
Great.

85
00:06:23,510 --> 00:06:24,150
Okay.

86
00:06:24,170 --> 00:06:26,620
If this isn't so, we're going to say print.

87
00:06:26,630 --> 00:06:29,810
I don't know what animal you have.

88
00:06:30,200 --> 00:06:31,040
Perfect.

89
00:06:31,160 --> 00:06:32,810
Since there's actually a dog.

90
00:06:32,900 --> 00:06:37,670
Well, it's going to say here is I don't know what animal you have so far.

91
00:06:37,670 --> 00:06:42,140
We've already understood this, but we're going to make it a little more complex by adding options for

92
00:06:42,140 --> 00:06:43,340
different questions.

93
00:06:43,430 --> 00:06:51,170
So, okay, if you don't have a cat in that case, we're going to check with Elif with a new comparison

94
00:06:51,860 --> 00:06:56,360
and we're going to see if actually pet is equal to this time dog.

95
00:06:56,570 --> 00:07:00,440
And in case it is, we're going to print you have a dog.

96
00:07:01,130 --> 00:07:05,000
Now, since we have a dog, we're going to verify the logical sequence here.

97
00:07:05,030 --> 00:07:11,300
That was Python checked if we have a cat and as we don't have one, it didn't enter the execution line.

98
00:07:11,960 --> 00:07:16,190
Then it went to a lifeline and made another verification.

99
00:07:17,190 --> 00:07:20,910
Then it found a true value here because pet does equal dog.

100
00:07:20,940 --> 00:07:25,770
So Python said, Hey, I'm allowed to read this code here and executed this line.

101
00:07:26,100 --> 00:07:27,960
And once it finished, it left the code.

102
00:07:28,440 --> 00:07:31,260
It didn't stay to continue reading the remaining code.

103
00:07:31,440 --> 00:07:35,820
So keep in mind that you can keep adding as many glyphs as you want.

104
00:07:35,970 --> 00:07:41,190
For example, here I could create another one that says Elif pet is equal to fish.

105
00:07:41,940 --> 00:07:49,530
And in that case, we would say, of course, after the colon print and you have a fish and this here,

106
00:07:49,530 --> 00:07:52,770
it doesn't see any fish because pet is dog.

107
00:07:53,250 --> 00:07:57,690
But if our pet were a fish in that case executes that you have a fish.

108
00:07:58,620 --> 00:08:04,230
And finally, if there was a pet that is not in any of the options, like, for example, a rabbit,

109
00:08:04,590 --> 00:08:08,370
I looked at this one, this one, this one, and none of them is rabbit.

110
00:08:08,460 --> 00:08:13,950
So the campaign later reached this else because none of the options open the door for it.

111
00:08:13,950 --> 00:08:17,490
And it had to enter in this room and print the last line.

112
00:08:17,850 --> 00:08:22,650
Examples like these, you're going to see a lot and we're going to do one a little bit different.

113
00:08:22,650 --> 00:08:26,830
So you can see also how you can nest if conditions.

114
00:08:26,850 --> 00:08:33,750
We're going to say that the age of a person is 16 and we're going to set an F here to see if this person

115
00:08:33,750 --> 00:08:35,340
is an adult or a minor.

116
00:08:35,550 --> 00:08:42,300
Then we check if age is less than 18 and if this is so, we are dealing with a minor.

117
00:08:42,570 --> 00:08:47,330
This number, it may vary in our country in case the condition is met.

118
00:08:47,340 --> 00:08:52,050
So we say you are a minor and if not we're going to say print.

119
00:08:52,080 --> 00:08:53,310
You are an adult.

120
00:08:53,960 --> 00:08:54,860
Perfect.

121
00:08:54,890 --> 00:08:57,830
We already have an approach to see if a person is a minor.

122
00:08:58,280 --> 00:09:03,530
But imagine that once I know that he is a minor, I also want to know his school grade.

123
00:09:04,670 --> 00:09:06,810
Let's say in this case, it's nine.

124
00:09:06,830 --> 00:09:09,290
That's enough to approve or fail the school year.

125
00:09:09,530 --> 00:09:11,740
Okay, let's go underneath the print for a second.

126
00:09:11,750 --> 00:09:17,930
If you can put an F inside an F, as long as you respect the indentation hierarchy.

127
00:09:18,080 --> 00:09:22,940
And here we can see if school grade is equal or greater than seven.

128
00:09:23,450 --> 00:09:27,650
In my country to approve, you need a grade greater or equal to seven.

129
00:09:27,860 --> 00:09:30,500
So we put the code on and then we press enter.

130
00:09:30,710 --> 00:09:36,680
Notice now that we now have a new indentation level, we're now not at this place, but at this.

131
00:09:36,680 --> 00:09:37,980
And this is where we print.

132
00:09:38,000 --> 00:09:40,550
What's going to happen if you meet this condition?

133
00:09:41,310 --> 00:09:44,370
Well, let's say past congratulations.

134
00:09:44,730 --> 00:09:47,280
So we're going to put an enter in here.

135
00:09:47,310 --> 00:09:51,990
We're going to create an elf situation in case our person hasn't approved.

136
00:09:52,200 --> 00:09:53,790
And we will print failed.

137
00:09:54,970 --> 00:09:55,870
Oh, this will happen.

138
00:09:55,870 --> 00:09:58,660
Remember, only in the case that our person is a minor.

139
00:09:58,750 --> 00:10:03,010
If he is an adult, we will never reach the considerations about his grades.

140
00:10:03,220 --> 00:10:04,360
So we test it.

141
00:10:04,630 --> 00:10:05,430
Approved.

142
00:10:05,440 --> 00:10:06,280
Perfect.

143
00:10:06,370 --> 00:10:12,040
So what happened here is that the if statement entered this condition because its met then printed the

144
00:10:12,040 --> 00:10:14,410
execution and then did a second check.

145
00:10:14,500 --> 00:10:16,270
Notice these helpful lines here.

146
00:10:16,270 --> 00:10:21,490
This is pie chart helping us understand the decision tree and it came out with a string related to his

147
00:10:21,490 --> 00:10:22,120
grades.

148
00:10:22,270 --> 00:10:27,340
So once Python finishes this tree, well, it either continues with whatever is in our code, if there's

149
00:10:27,340 --> 00:10:29,560
anything there or exits the program.

150
00:10:29,800 --> 00:10:34,690
These are just a few examples, and I assure you that we are going to see decision making and control

151
00:10:34,690 --> 00:10:39,400
flow issues throughout the course because this is one of the most frequent aspects to find in almost

152
00:10:39,400 --> 00:10:41,260
any programming code in the world.

153
00:10:41,260 --> 00:10:43,070
So you're going to get used to seeing it.

154
00:10:43,090 --> 00:10:46,630
Now you're going to reinforce this knowledge with the practices coming up next.

155
00:10:46,630 --> 00:10:49,360
And then we're going to the next lecture to continue learning.

156
00:10:49,360 --> 00:10:50,110
Cool stuff.

157
00:10:50,470 --> 00:10:51,160
See you there.
