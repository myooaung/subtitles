WEBVTT
1
00:00:08.270 --> 00:00:08.490
Okay.

2
00:00:08.870 --> 00:00:14.480
So we've reached the point in which we have our executable screen and our rocket can move upwards.

3
00:00:15.140 --> 00:00:19.640
It's doing so because we typed 0.1 pixels in the Y axis.

4
00:00:20.570 --> 00:00:22.580
However, we can't control the movement.

5
00:00:22.580 --> 00:00:26.240
We're just entering it as a code so that is executed afterwards.

6
00:00:26.990 --> 00:00:31.700
In this lecture, we'll learn how to control the movements of our rocket using our keyboard.

7
00:00:32.030 --> 00:00:37.100
So in order to move our rocket to the left and right, we'll use the directional keys.

8
00:00:37.760 --> 00:00:39.440
So let's delete this line.

9
00:00:39.440 --> 00:00:41.270
So it was only a demonstration.

10
00:00:42.230 --> 00:00:49.220
So just like Phil told you before, when we talk about Pi game, we're talking about events to everything

11
00:00:49.220 --> 00:00:55.520
that happens on the screen is an event and everything that's done with the keyboard during the PI game

12
00:00:55.520 --> 00:00:57.530
execution is also an event.

13
00:00:57.740 --> 00:01:00.680
You can program the results those events lead to.

14
00:01:01.160 --> 00:01:04.760
We're about to program what will happen after the user presses a key.

15
00:01:05.360 --> 00:01:10.280
If the user presses the left or right arrow key, the rocket should move accordingly.

16
00:01:10.730 --> 00:01:16.610
So let's go to the line where our loop checked all the events where it found the quit event for closing

17
00:01:16.610 --> 00:01:19.250
the window and where it is running is false.

18
00:01:19.970 --> 00:01:27.680
And let's create another if to check if every type is equal to pi gain dot key down.

19
00:01:28.940 --> 00:01:30.830
It doesn't matter which key it is.

20
00:01:30.890 --> 00:01:33.920
This just checks whether a key has been pressed or not.

21
00:01:34.430 --> 00:01:43.610
If this happens, we'll check if that key that is EV key is equal to PI game dot key left.

22
00:01:45.170 --> 00:01:48.890
Now it will check whether the press key is the left arrow key.

23
00:01:49.670 --> 00:01:54.120
If so, we'll just print something on the screen in order to make sure this works.

24
00:01:54.140 --> 00:01:58.610
We'll print something like left arrow key pressed.

25
00:02:00.030 --> 00:02:03.480
This will not be displayed on the screen, but on the console.

26
00:02:05.310 --> 00:02:08.400
We're just doing this to verify this is working properly.

27
00:02:09.360 --> 00:02:12.750
Then we'll check if the right arrow key was pressed too.

28
00:02:12.990 --> 00:02:20.940
So let's copy this and we'll type key right here and right arrow key pressed here.

29
00:02:21.300 --> 00:02:22.050
Is it clear?

30
00:02:22.650 --> 00:02:28.680
So inside the same loop that checked if this previous event had occurred, we can also check if a key

31
00:02:28.710 --> 00:02:29.670
has been pressed.

32
00:02:30.300 --> 00:02:34.920
If that's the case, then it will verify it if it was left or right.

33
00:02:34.920 --> 00:02:35.700
Arrow key.

34
00:02:36.840 --> 00:02:42.570
It should be highlighted that the key down event takes place when the user holds a key down.

35
00:02:43.350 --> 00:02:47.280
If the user releases the key, we're talking about the key up event.

36
00:02:48.270 --> 00:02:52.710
Therefore, we could also program something for the second event if we wanted.

37
00:02:53.490 --> 00:02:59.070
So we'll verify if every type is equal to PI gain key up.

38
00:02:59.940 --> 00:03:04.590
If the user releases a key, we'll check if it was the right or left arrow key.

39
00:03:05.250 --> 00:03:08.010
So copy and paste this and add.

40
00:03:08.010 --> 00:03:12.660
Or to make a comparison and copy and paste this as well.

41
00:03:13.200 --> 00:03:15.170
This if is not necessary.

42
00:03:15.180 --> 00:03:25.500
So by so, if either of them was released, the software will print, the key was released, and let's

43
00:03:25.500 --> 00:03:27.570
execute this to see what happens.

44
00:03:28.650 --> 00:03:33.030
Here we have our screen containing our little rocket, which is not moving.

45
00:03:33.960 --> 00:03:39.540
I'll press the right arrow key, and I want you to notice the message in the console.

46
00:03:39.810 --> 00:03:41.640
Right arrow key pressed.

47
00:03:42.210 --> 00:03:44.910
I'm holding this key down and I haven't released it.

48
00:03:45.750 --> 00:03:47.900
If I do, we'll read the message.

49
00:03:47.910 --> 00:03:49.290
The key was released.

50
00:03:50.400 --> 00:03:51.930
Okay, that's what happens.

51
00:03:52.380 --> 00:03:58.020
However, if I press any of the key, say up arrow, R or G, nothing happens.

52
00:03:58.140 --> 00:04:01.800
That's because I haven't programmed any subsequent event for those keys.

53
00:04:02.790 --> 00:04:07.770
We can display a brief message after key down before it checks.

54
00:04:07.770 --> 00:04:09.210
Which key was pressed.

55
00:04:09.240 --> 00:04:12.600
Or print something like a key has been pressed.

56
00:04:13.680 --> 00:04:15.000
So let's execute it.

57
00:04:15.000 --> 00:04:21.390
And look, if I press the right arrow key, the software tells me a key has been pressed, right arrow

58
00:04:21.390 --> 00:04:22.350
key pressed.

59
00:04:22.710 --> 00:04:25.800
And when I release it, it tells me the key was released.

60
00:04:26.100 --> 00:04:33.090
So I'll press R now and it reads a key which has been pressed and if I release it, nothing happens.

61
00:04:33.240 --> 00:04:38.370
Remember that the software informs us that the key has been released only if it was the left or right

62
00:04:38.370 --> 00:04:39.240
arrow key.

63
00:04:40.350 --> 00:04:46.170
In other words, you can program subsequent events for each key, whether you press it or release it.

64
00:04:46.830 --> 00:04:52.620
So as a result, we'll be able to control our characters behavior and have it changed accordingly to

65
00:04:52.620 --> 00:04:53.640
the press key.

66
00:04:54.330 --> 00:04:58.650
Moreover, all this will determine the character's movements and directions.

67
00:04:59.160 --> 00:05:05.220
So let's go back here and where we first modified our praise location and we'll add one more variable

68
00:05:05.220 --> 00:05:06.750
named Player X.

69
00:05:06.960 --> 00:05:07.800
Change.

70
00:05:08.520 --> 00:05:15.120
This variable will store a value that corresponds to our player's position as regards the x axis.

71
00:05:16.320 --> 00:05:22.710
So let's make it be zero for now, and we don't want to change as soon as our code starts running.

72
00:05:23.730 --> 00:05:29.760
What we want is that this value changes dynamically as the loop iterates and verifies if an event has

73
00:05:29.760 --> 00:05:30.420
occurred.

74
00:05:31.350 --> 00:05:34.560
So let's delete this first print and we no longer need it.

75
00:05:34.890 --> 00:05:40.740
Instead, we'll be working with these two prints which notify if the left or right key has been pressed.

76
00:05:41.940 --> 00:05:48.600
So instead of saying left arrow key pressed, it will say that the player x change variable is no longer

77
00:05:48.600 --> 00:05:51.480
equal to zero but -0.1.

78
00:05:53.070 --> 00:06:00.270
We will copy this line so that if the right arrow key is pressed, the value changes to 0.1, thereby

79
00:06:00.270 --> 00:06:02.460
moving a character to the right.

80
00:06:03.750 --> 00:06:08.250
We also need that our rocket stops moving when the player releases the key.

81
00:06:08.940 --> 00:06:15.720
So in key up will replace this print with the same line, but this time it will be equal to zero so

82
00:06:15.720 --> 00:06:17.310
that the movement stops.

83
00:06:18.180 --> 00:06:22.770
So we've only change the values in the player x change variable so far.

84
00:06:22.950 --> 00:06:25.740
This doesn't change the behavior of the rocket.

85
00:06:26.670 --> 00:06:32.490
To do so, we have to go to the player call and before it calls player and modifies its movements.

86
00:06:32.490 --> 00:06:38.910
Through these parameters, we have to modify the variable, storing its position on the x axis, which

87
00:06:38.910 --> 00:06:46.500
is player x we add plus equals and it should be equal to whatever value that's contained in player x

88
00:06:46.500 --> 00:06:47.250
change.

89
00:06:48.120 --> 00:06:49.470
So that should do it.

90
00:06:49.920 --> 00:06:51.270
Let's execute it.

91
00:06:52.560 --> 00:06:54.690
Here's our rocket and it's not moving.

92
00:06:55.470 --> 00:06:58.020
I'll press the right arrow key, and I'm holding it down.

93
00:06:58.020 --> 00:06:59.520
And the rocket is still moving.

94
00:07:00.460 --> 00:07:03.010
I released the key, and the rocket will stop moving.

95
00:07:03.700 --> 00:07:04.870
Let's try the left one.

96
00:07:05.590 --> 00:07:06.220
Great.

97
00:07:06.820 --> 00:07:10.570
Now the user can control the movements, and I think it's.

98
00:07:10.570 --> 00:07:11.890
I think it's rather slow.

99
00:07:12.520 --> 00:07:16.810
If we want to change the speed, we can enter 0.3 as value.

100
00:07:17.920 --> 00:07:20.020
Let's see if this makes our rocket move faster.

101
00:07:20.590 --> 00:07:23.560
Yeah, I personally think it's much better.

102
00:07:23.740 --> 00:07:24.670
Perfect.

103
00:07:26.150 --> 00:07:29.530
Still a rocket disappears once it reaches the edges of the screen.

104
00:07:29.540 --> 00:07:31.070
That's not the idea.

105
00:07:31.130 --> 00:07:32.570
So let's bring it back.

106
00:07:33.410 --> 00:07:37.580
And in the next lesson, we're going to find out a way to prevent our rocket from going through those

107
00:07:37.580 --> 00:07:38.180
edges.

108
00:07:38.360 --> 00:07:39.350
See you there.
