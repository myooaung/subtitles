WEBVTT
1
00:00:08.400 --> 00:00:13.650
At this point, we have a rocket capable of shooting and an enemy that moves around menacingly.

2
00:00:13.920 --> 00:00:18.690
So, however, even if we shoot our enemy, we can't hurt him.

3
00:00:19.510 --> 00:00:21.250
So let's see if I can shoot it.

4
00:00:21.760 --> 00:00:22.080
Okay.

5
00:00:22.240 --> 00:00:25.210
Bullets move slowly and our friend moves quite fast.

6
00:00:25.210 --> 00:00:29.080
So the enemy's value will be 0.5 and not one.

7
00:00:29.440 --> 00:00:33.190
And the value of the bullet in bullet Y will be three, not one.

8
00:00:33.900 --> 00:00:38.040
So our enemy moves slowly and our bullets are faster.

9
00:00:38.610 --> 00:00:39.960
So let's have a crack at it.

10
00:00:40.670 --> 00:00:41.480
Perfect.

11
00:00:41.600 --> 00:00:42.620
I could shoot it.

12
00:00:42.980 --> 00:00:46.250
As you can see, our enemy is still immune to our attacks.

13
00:00:46.900 --> 00:00:52.060
So we have to program our game so it detects when there's a collision between the bullet and the enemy.

14
00:00:52.660 --> 00:00:58.120
In that way, we should get a score and the enemy should disappear instead of moving towards us.

15
00:00:58.750 --> 00:01:02.350
So in order to detect collisions, we have to calculate the distance.

16
00:01:02.350 --> 00:01:06.190
Because how do we say this object and that object are together?

17
00:01:06.670 --> 00:01:12.580
We have to determine a minimum distance according to which we can say, okay, if the distance is less

18
00:01:12.580 --> 00:01:14.770
than such number, there's a collision.

19
00:01:15.620 --> 00:01:20.870
To calculate the distance between two objects on a two dimensional space such as our game.

20
00:01:20.870 --> 00:01:22.880
We need a specific formula.

21
00:01:23.330 --> 00:01:28.820
Such a formula is popular among game creators and is the one you can see on the screen.

22
00:01:29.780 --> 00:01:33.500
It might strike you as advanced math, but it's not that complex.

23
00:01:33.800 --> 00:01:42.350
The distance between two objects is equal to the square root of the sum of x of object two minus x of

24
00:01:42.350 --> 00:01:44.540
object one squared.

25
00:01:45.190 --> 00:01:50.260
Plus y of object to minus y of object one squared.

26
00:01:50.830 --> 00:01:54.820
In order for you to see this a bit clearer, we'll use an example.

27
00:01:55.360 --> 00:02:02.710
Suppose that we have an object located in the coordinates minus one of X and one of Y and another object

28
00:02:02.710 --> 00:02:04.240
located in the coordinates.

29
00:02:04.240 --> 00:02:06.430
Three of X and four of y.

30
00:02:07.260 --> 00:02:11.250
If we want to calculate the distance between these two objects, we should do the following.

31
00:02:12.160 --> 00:02:19.280
The distance is equal to the square root of the sum of X of object two, which is three and x of eight

32
00:02:19.300 --> 00:02:21.760
objects one which is minus one.

33
00:02:23.080 --> 00:02:23.290
Okay.

34
00:02:23.470 --> 00:02:27.400
So three minus minus one is four.

35
00:02:28.020 --> 00:02:33.480
Now four squared is 16 and we have the first value of the sum.

36
00:02:34.440 --> 00:02:40.770
The second element is why of object to which is four and why of object one which is one.

37
00:02:41.420 --> 00:02:45.710
Now four minus one is three and three squared is nine.

38
00:02:46.130 --> 00:02:53.630
Now we have the two values of the sum and we can say that 16 plus nine equals 25 and the square root

39
00:02:53.630 --> 00:02:55.340
of 25 is five.

40
00:02:55.850 --> 00:03:00.260
So in this example, the distance between these two objects is five.

41
00:03:01.300 --> 00:03:05.860
Now we should be able to do this using the objects in our game, which are the bullets and the enemy.

42
00:03:06.280 --> 00:03:08.500
So keep this formula in mind.

43
00:03:09.190 --> 00:03:14.080
We're going to apply it by creating a function in charge of verifying if there's a collision.

44
00:03:14.650 --> 00:03:19.570
Since we'll call it inside the game loop, it will be constantly calculating the distance between the

45
00:03:19.570 --> 00:03:22.420
objects so as to check whether there's a collision or not.

46
00:03:23.300 --> 00:03:27.200
So we'll create a new function here where we have the others.

47
00:03:27.860 --> 00:03:31.640
And let's clarify by writing detect collision function.

48
00:03:33.470 --> 00:03:40.190
Our function will be named there's a collision because it will return true or false as value.

49
00:03:40.730 --> 00:03:45.380
And here we'll have to provide this with some arguments so it can calculate.

50
00:03:46.070 --> 00:03:50.780
So let's enter position X of object one and position Y of Object one.

51
00:03:51.050 --> 00:03:54.500
Position X of object two and position Y of object to.

52
00:03:55.280 --> 00:03:58.520
We should be able to solve the equation using these values.

53
00:03:59.180 --> 00:04:04.370
Search equation will be stored in a variable named distance, which will be equal to the calculation

54
00:04:04.370 --> 00:04:05.210
we have to make.

55
00:04:05.810 --> 00:04:09.830
So remember that we need the math module in order to make these calculations.

56
00:04:09.830 --> 00:04:12.370
So let's import it as to use its elements.

57
00:04:13.330 --> 00:04:18.580
This module will allow us to find the square roots and make all the calculations we need for distance.

58
00:04:19.320 --> 00:04:27.180
First we need to find a square root so we call math dot sqrt, which is a method that we use to find

59
00:04:27.180 --> 00:04:28.170
square roots.

60
00:04:28.860 --> 00:04:33.350
And we're going to use placeholders to make sure that we understand how this works.

61
00:04:34.040 --> 00:04:39.110
So let's find the square root of one calculation plus another calculation.

62
00:04:39.800 --> 00:04:43.130
Later on, we'll replace these words with actual values.

63
00:04:44.120 --> 00:04:44.720
Calculation.

64
00:04:44.720 --> 00:04:50.720
One, as we can see in the formula below, is in fact the difference of a subtraction but squared.

65
00:04:51.230 --> 00:04:58.670
So calculation one will be squared and we'll use math dot p0w, which is the method we use to square

66
00:04:58.670 --> 00:04:59.420
numbers.

67
00:05:00.800 --> 00:05:07.550
Like we just said, Operation One is the result of X of Object one minus X of object two.

68
00:05:08.450 --> 00:05:11.210
We've completed the first part of our equation.

69
00:05:12.110 --> 00:05:14.690
The second part is also an exponential portion.

70
00:05:14.690 --> 00:05:23.570
So we'll square calculation two by using math dot p0w calculation two is also a subtraction, but this

71
00:05:23.570 --> 00:05:28.340
one is formed by y of object two minus y of object one.

72
00:05:29.260 --> 00:05:34.710
Note that I've reversed the order as I've put object one and then object to what our formula requires,

73
00:05:34.720 --> 00:05:36.640
object to, and then object one.

74
00:05:36.640 --> 00:05:37.870
But it doesn't matter.

75
00:05:38.320 --> 00:05:41.140
The order of the factors does not alter the product.

76
00:05:41.440 --> 00:05:44.650
And what we're going to calculate is the distance between two objects.

77
00:05:44.650 --> 00:05:46.030
So the order is irrelevant.

78
00:05:47.030 --> 00:05:53.240
So all this allows us to estimate the distance, which will be a number of pixels that will be stored

79
00:05:53.240 --> 00:05:54.200
in distance.

80
00:05:54.890 --> 00:05:57.440
Then inside the same function will verify.

81
00:05:57.440 --> 00:06:03.170
If the distance we obtained is less than some value, we choose to determine if there is a collision.

82
00:06:04.370 --> 00:06:09.470
Taking into account the size of our figures, 27 will be accurate in order to determine if there is

83
00:06:09.470 --> 00:06:10.160
a collision.

84
00:06:10.610 --> 00:06:17.120
Therefore, if the distance is less than 27 will return a true value, which means there's a collision.

85
00:06:17.390 --> 00:06:20.960
Otherwise we'll return a false value, which means there was no collision.

86
00:06:22.250 --> 00:06:24.110
When are we going to call this function?

87
00:06:24.530 --> 00:06:28.760
We said it has to be done inside the loop so that we can verify constantly.

88
00:06:29.180 --> 00:06:33.290
So we're going to do it here before calling player at the end.

89
00:06:34.250 --> 00:06:35.990
So let's create collision.

90
00:06:36.910 --> 00:06:42.940
But now we'll create a collision variable which will store the result obtained from the there's a collision

91
00:06:42.940 --> 00:06:43.660
function.

92
00:06:44.640 --> 00:06:47.850
So collision will store a true or a false value.

93
00:06:48.690 --> 00:06:56.850
An argument x one will be enemy x and y, one will be enemy y, x two will be bulleted x and y, two

94
00:06:56.880 --> 00:06:58.050
will be bullet y.

95
00:06:59.490 --> 00:07:01.890
Our function can now make its calculations.

96
00:07:01.890 --> 00:07:04.890
So let's check if collision is true.

97
00:07:05.830 --> 00:07:10.450
If so, we'll have to reset the bullet to its initial position.

98
00:07:10.450 --> 00:07:16.690
That is, bullet Y equals 500 the height of the rocket and make the bullet stop being visible.

99
00:07:16.810 --> 00:07:21.520
So visible bullet will be equal to false so that we can then shoot a new bullet.

100
00:07:22.800 --> 00:07:27.690
We'll also have to calculate the score, but we don't have a variable that stores it yet.

101
00:07:27.690 --> 00:07:34.320
So we go we go to the rest of our variables and we'll create the score variable, which will be equal

102
00:07:34.320 --> 00:07:35.640
to zero for now.

103
00:07:37.020 --> 00:07:43.710
And where we detect the collisions once we detect one besides resetting the table will assign plus equals

104
00:07:43.710 --> 00:07:45.000
one to score.

105
00:07:45.360 --> 00:07:48.450
And that way it will be increasing one value.

106
00:07:48.960 --> 00:07:53.880
For now, we'll print this in order to see how the score goes and check if it's working.

107
00:07:55.150 --> 00:07:59.050
So let's execute that program to see if we manage to create collisions.

108
00:07:59.710 --> 00:08:03.280
Let's keep the console at hand and let's try to shoot at our enemy.

109
00:08:04.030 --> 00:08:06.190
Missed it once more.

110
00:08:06.220 --> 00:08:06.820
Gotcha.

111
00:08:07.490 --> 00:08:12.950
So here we can see, number one, if I shoot it again, the score increases.

112
00:08:13.660 --> 00:08:15.370
So there's a detail missing.

113
00:08:15.550 --> 00:08:20.710
Our enemy should disappear once we shoot it, and a new one should appear in a different place.

114
00:08:21.430 --> 00:08:27.640
So we have to just reset the initial position values in enemy x, which were random integers.

115
00:08:28.330 --> 00:08:33.370
We should create a function in order not to repeat the code, but for me to teach you how to use PI

116
00:08:33.370 --> 00:08:34.090
game.

117
00:08:34.330 --> 00:08:36.220
Use this and repeat those values.

118
00:08:37.720 --> 00:08:41.320
When we shoot our enemy, it will reappear in a different place.

119
00:08:41.590 --> 00:08:43.210
So let's see if it works.

120
00:08:43.330 --> 00:08:44.530
We'll shoot at it.

121
00:08:44.530 --> 00:08:46.390
And when it's close to the rocket.

122
00:08:46.420 --> 00:08:47.020
Got it.

123
00:08:47.020 --> 00:08:48.100
And it reappeared.

124
00:08:49.090 --> 00:08:50.830
So my score is increasing.

125
00:08:51.010 --> 00:08:54.790
So far it's a pretty basic game, but there's only one enemy.

126
00:08:55.000 --> 00:08:57.520
I'd rather have many more enemies on the screen.

127
00:08:57.700 --> 00:08:59.650
So we're going to do that in our next lesson.

128
00:08:59.680 --> 00:09:05.140
In addition, we'll move the score from the console to the game screen and will make the game end once

129
00:09:05.140 --> 00:09:06.790
the enemy touches our rocket.

130
00:09:07.180 --> 00:09:08.590
So let's go for it.
