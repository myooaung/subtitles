WEBVTT
1
00:00:07.610 --> 00:00:12.140
It's time to program with object oriented programming principles in mind.

2
00:00:12.230 --> 00:00:14.070
And what are we going to do today?

3
00:00:14.090 --> 00:00:20.870
I'm going to ask you to create a code that allows a person to perform operations on their bank account.

4
00:00:21.260 --> 00:00:22.130
Don't be scared.

5
00:00:22.130 --> 00:00:25.490
The instructions will be well defined so that you can do it quickly.

6
00:00:25.970 --> 00:00:32.550
First, you are going to create a class called person and the person is going to have only two attributes.

7
00:00:32.570 --> 00:00:34.730
First name and last name.

8
00:00:34.760 --> 00:00:35.510
That's it.

9
00:00:36.080 --> 00:00:39.890
Then you are going to create a second class called Customer.

10
00:00:40.430 --> 00:00:45.350
This class will inherit from person because customers are persons.

11
00:00:45.590 --> 00:00:51.140
So customer will inherit the attributes of a person, but it will also have its own attributes such

12
00:00:51.140 --> 00:00:53.450
as account, number and balance.

13
00:00:53.930 --> 00:00:56.000
For example, the bank account balance.

14
00:00:56.540 --> 00:00:57.600
But that's not all.

15
00:00:57.620 --> 00:01:00.750
The customer will also have three methods.

16
00:01:00.770 --> 00:01:06.440
The first one is going to be one of the special methods, and it is going to be the one that allows

17
00:01:06.440 --> 00:01:08.210
us to print our client.

18
00:01:08.390 --> 00:01:14.450
When the code asked to print the client, this method will allow their data to be displayed, including

19
00:01:14.450 --> 00:01:15.770
their account balance.

20
00:01:16.190 --> 00:01:21.800
Then a method called deposit, which allows the user to decide how much money they want to add to their

21
00:01:21.800 --> 00:01:22.430
account.

22
00:01:22.700 --> 00:01:29.690
And finally, a method called withdraw, which allows the user to take money and deduct it from their

23
00:01:29.690 --> 00:01:30.200
account.

24
00:01:30.650 --> 00:01:35.820
Once you have created these two classes, you have to create the code for your program to run.

25
00:01:35.840 --> 00:01:40.400
Asking the user to choose whether they want to make a deposit or withdrawal.

26
00:01:40.580 --> 00:01:46.190
The user can make as many transactions as they want until they decide to exit the program.

27
00:01:46.730 --> 00:01:50.390
Therefore, our code has to keep track of how much money is in the balance.

28
00:01:50.390 --> 00:01:55.940
And you must make sure that the customer never withdraws more money than they have.

29
00:01:56.150 --> 00:02:03.970
Unfortunately, remember, now that you know how to create stable classes and objects that retain information,

30
00:02:03.980 --> 00:02:09.740
you don't need to create functions that return the balance, since the client instance can constantly

31
00:02:09.740 --> 00:02:11.510
know what its balance is.

32
00:02:11.750 --> 00:02:18.740
This is a direct result of its ability to conduct conduct operations by calling directly to that attribute

33
00:02:18.740 --> 00:02:23.240
and not to a separate variable to make your program work.

34
00:02:23.270 --> 00:02:25.530
You can organise your code as you want.

35
00:02:25.550 --> 00:02:31.610
There are many ways to do it, but my recommendation is that you basically create two functions one

36
00:02:31.610 --> 00:02:37.790
that is in charge of creating the client, asking the user for all the necessary information, and returning

37
00:02:37.790 --> 00:02:39.140
through a return.

38
00:02:39.170 --> 00:02:45.650
A client object already created and another function that can be called START or something like that,

39
00:02:45.650 --> 00:02:49.040
which is the function that organizes code execution.

40
00:02:49.190 --> 00:02:56.210
First, it calls the create client function and then it is in charge of maintaining the user in a loop

41
00:02:56.210 --> 00:03:02.600
that asks them all the time if they want to make a deposit withdrawal or exit the program and to show

42
00:03:02.600 --> 00:03:08.330
them the balance every time they carry over a modification for this program not to become super long

43
00:03:08.330 --> 00:03:16.310
or complex, I propose that this time we do not look at controls to see if the user inputs allowed options

44
00:03:16.310 --> 00:03:17.060
or not.

45
00:03:17.330 --> 00:03:22.940
If they have put numbers or not, if they have put upper or lower case, let's create the code.

46
00:03:22.940 --> 00:03:27.850
Trusting that the user is always going to enter appropriate information.

47
00:03:27.860 --> 00:03:30.910
If you prefer to include all those controls, that's fine.

48
00:03:30.920 --> 00:03:36.830
We are going to dedicate ourselves to simply creating the hard code so that the explanation doesn't

49
00:03:36.830 --> 00:03:38.390
become super long.

50
00:03:38.630 --> 00:03:40.250
So are you ready?

51
00:03:40.490 --> 00:03:45.890
We are start programming and have a lot of fun and we'll be waiting for you in the next lecture to show

52
00:03:45.890 --> 00:03:47.360
you our solution.
