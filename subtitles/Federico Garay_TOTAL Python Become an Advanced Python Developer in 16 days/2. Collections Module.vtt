WEBVTT
1
00:00:08.030 --> 00:00:14.150
The collections module is part of the built in Python library, so we will need to import its elements

2
00:00:14.150 --> 00:00:15.320
in order to use it.

3
00:00:15.530 --> 00:00:17.960
As we have learned in the first days of the course.

4
00:00:17.990 --> 00:00:24.020
Python has several built in data structures, including tuples, dictionaries and lists which provide

5
00:00:24.020 --> 00:00:26.510
us with a way to organize and store data.

6
00:00:26.780 --> 00:00:32.600
The collections module is going to help us complete and manipulate data structures in a more efficient

7
00:00:32.600 --> 00:00:33.140
way.

8
00:00:33.170 --> 00:00:39.050
In this lecture, we are going to learn about some of its most important tools which are counter default

9
00:00:39.050 --> 00:00:41.450
dict and named tuples.

10
00:00:41.720 --> 00:00:45.830
Federico is waiting for you and PY Charm to explore all of them right now.

11
00:00:46.640 --> 00:00:49.880
The first element of collections will learn about this counter.

12
00:00:49.970 --> 00:00:56.360
But first, we'll learn a bit more about lists and their normal behavior so that we can later tell what's

13
00:00:56.360 --> 00:00:57.740
new about counter.

14
00:00:58.520 --> 00:01:04.520
Suppose we have a list named numbers which contains numbers that randomly repeat themselves like this.

15
00:01:05.390 --> 00:01:09.710
And suppose that we want to know how many times each number repeats itself.

16
00:01:11.060 --> 00:01:15.410
Well, we could loop through each element and assign them to a dictionary.

17
00:01:15.980 --> 00:01:21.530
At the same time, we can create a key for each new key that appears when looping through the list so

18
00:01:21.530 --> 00:01:23.450
as to store the repeated numbers there.

19
00:01:23.920 --> 00:01:29.180
There is an easier way to do this and we can use the counter object of collections.

20
00:01:29.180 --> 00:01:37.700
So from collections we import counter with capital C since it is an object now we can use it and we

21
00:01:37.700 --> 00:01:43.700
only need to print counter assigning it to numbers, which is the list we have.

22
00:01:44.600 --> 00:01:50.510
If we execute this or receive some kind of dictionary that contains five, which appears five times

23
00:01:50.510 --> 00:01:55.850
four, four times eight twice and six once, and so on.

24
00:01:56.980 --> 00:02:02.230
If you think this is a sort of dictionary, you're right because it is a dictionary subclass.

25
00:02:02.440 --> 00:02:07.270
Not only can we count numbers in a list, but we can also count elements in a string.

26
00:02:07.840 --> 00:02:14.830
So if instead of numbers, we print a string containing repeated letters such as Mississippi and we

27
00:02:14.830 --> 00:02:23.770
execute it, we'll see that I appears four times X appears four times P appears twice and M appears

28
00:02:23.770 --> 00:02:24.340
once.

29
00:02:24.760 --> 00:02:28.600
We can also count the words in a sentence instead of numbers.

30
00:02:28.600 --> 00:02:30.850
Will type sentence equals.

31
00:02:30.880 --> 00:02:32.270
Let me think.

32
00:02:32.290 --> 00:02:36.970
You will never win if you never begin.

33
00:02:37.570 --> 00:02:43.870
And we'll print counter of sentence and applying the split method.

34
00:02:43.900 --> 00:02:45.040
Do you remember it?

35
00:02:45.580 --> 00:02:51.220
It is a string method that separates the elements contained here, so it will do so according to the

36
00:02:51.220 --> 00:02:52.390
blank spaces.

37
00:02:52.480 --> 00:02:58.510
If we execute this, the word you appears twice, never appears twice, and so on.

38
00:02:58.750 --> 00:03:01.900
In other words, you can use counter to count elements.

39
00:03:02.290 --> 00:03:04.540
Let's analyze some counter methods.

40
00:03:04.750 --> 00:03:11.140
For instance, let's assign counter to a variable named series, which is equal to a counter of a list

41
00:03:11.140 --> 00:03:13.480
that contains one several times.

42
00:03:14.230 --> 00:03:17.110
It will also have some twos, threes and a four.

43
00:03:19.330 --> 00:03:25.960
Now we'll print and in order to see series on the screen, which is actually a counter object.

44
00:03:26.320 --> 00:03:31.120
So if we type dot, we'll see all the methods contained in counter.

45
00:03:31.750 --> 00:03:33.940
I advise you to try them on your own.

46
00:03:34.990 --> 00:03:37.840
And let's see, for example, the most common.

47
00:03:38.110 --> 00:03:45.370
If we don't add anything to its attributes and we execute it, it will arrange the elements of our list

48
00:03:45.370 --> 00:03:49.630
in tuples according to the number of times in which those elements appear.

49
00:03:50.200 --> 00:03:55.090
Therefore, one appears six times and three appears six times as well.

50
00:03:55.450 --> 00:03:58.210
We'll add another three so as to analyze it better.

51
00:03:58.830 --> 00:04:05.580
Now three is the most common number appearing seven times, and it's followed by one, two and four.

52
00:04:06.090 --> 00:04:09.120
So we got this result since we didn't put anything in brackets.

53
00:04:09.120 --> 00:04:11.640
So we received all the numbers by default.

54
00:04:12.620 --> 00:04:19.220
If we only want to see the number that appears the most, we should type one and the first most common

55
00:04:19.220 --> 00:04:21.140
number will appear, which is three.

56
00:04:22.370 --> 00:04:26.870
If we type to the software, will show the second most common numbers and so on.

57
00:04:28.250 --> 00:04:34.820
So another thing we can do is to print a list that's created from elements of series.

58
00:04:35.330 --> 00:04:38.510
We'd be casting a counter object to a list.

59
00:04:39.230 --> 00:04:41.810
Now we have the repeated elements of our list.

60
00:04:41.990 --> 00:04:46.670
We can't see how many times they appear, but we can see them arranged in a list.

61
00:04:47.060 --> 00:04:52.520
As always, I advise you to try the counter methods on your own because they have a lot to offer.

62
00:04:53.060 --> 00:04:59.120
So now we're going to learn about a second element of collections, which is default dict, and we'll

63
00:04:59.120 --> 00:05:00.230
learn how to apply it.

64
00:05:00.930 --> 00:05:03.510
So let's look at a normal dictionary first.

65
00:05:03.810 --> 00:05:06.210
We'll create a dictionary named My Dick.

66
00:05:07.330 --> 00:05:11.170
It contains a key name, one whose value is green.

67
00:05:11.770 --> 00:05:14.590
Another key name to whose value is blue.

68
00:05:14.920 --> 00:05:18.850
And finally, a third key named three, whose value is red.

69
00:05:20.080 --> 00:05:20.590
All right.

70
00:05:20.590 --> 00:05:22.660
We have a pretty basic dictionary.

71
00:05:23.860 --> 00:05:28.690
And as you know, if we want to see any of its elements on the screen, we can enter a key here, for

72
00:05:28.690 --> 00:05:29.680
example, to.

73
00:05:30.840 --> 00:05:31.290
We'll see.

74
00:05:31.290 --> 00:05:33.960
That too contains the element blue as value.

75
00:05:35.110 --> 00:05:39.370
However, if we enter a key that doesn't exist, we know what's going to happen.

76
00:05:39.580 --> 00:05:47.260
For instance, if we enter for we'll get an error message that reads key error for because my dictionary

77
00:05:47.260 --> 00:05:49.120
does not contain four as a key.

78
00:05:49.360 --> 00:05:54.310
So this could be a problem if you wanted a for loop to iterate over a list of keys of yours.

79
00:05:55.260 --> 00:05:57.570
There could be keys that aren't contained in your dictionary.

80
00:05:57.570 --> 00:05:59.520
And so it would raise a key error.

81
00:05:59.670 --> 00:06:02.520
And here's where default dict comes in handy.

82
00:06:04.170 --> 00:06:05.780
Let's create a new dictionary.

83
00:06:05.790 --> 00:06:12.390
I will name it my dict again, but it will be equal to default dict which will enclose.

84
00:06:13.340 --> 00:06:17.420
LAMB, BDA, colon, nothing in brackets.

85
00:06:18.200 --> 00:06:19.050
So what is this?

86
00:06:19.070 --> 00:06:19.640
You may ask.

87
00:06:19.640 --> 00:06:24.770
Well, we're telling our dictionary that if there's a key that doesn't exist, it will be assigned nothing

88
00:06:24.770 --> 00:06:25.460
as value.

89
00:06:25.760 --> 00:06:28.820
It could be any word, but we've chosen the word nothing.

90
00:06:29.180 --> 00:06:32.570
So let's add an element to our dictionary, which is empty.

91
00:06:32.780 --> 00:06:35.840
And we'll add the key one that's equal to green.

92
00:06:36.290 --> 00:06:38.390
Now a dictionary has a value.

93
00:06:38.750 --> 00:06:42.020
So let's print my dict and call the wrong key.

94
00:06:42.620 --> 00:06:44.930
That is two, which doesn't exist yet.

95
00:06:45.470 --> 00:06:48.140
If we execute it, the software will return nothing.

96
00:06:48.620 --> 00:06:54.230
In fact, besides one equals green, our dictionary now contains two equals nothing.

97
00:06:54.470 --> 00:06:56.480
And let me demonstrate something else.

98
00:06:57.050 --> 00:07:03.260
If we directly print my dict, will notice that default dict has the following values.

99
00:07:03.620 --> 00:07:06.740
One is equal to green, and two is equal to nothing.

100
00:07:07.250 --> 00:07:12.980
This means that our dictionary has returned a value based on an error because the given key didn't exist.

101
00:07:13.190 --> 00:07:16.050
So default dict has this and much more to offer.

102
00:07:16.070 --> 00:07:21.260
So it's up to you to try its attributes and methods so as to make the most of them in your programs.

103
00:07:21.560 --> 00:07:24.200
If you have doubts, go to our Q&amp;A section.

104
00:07:24.500 --> 00:07:29.060
So lastly, we're going to analyze a third element of collections, which is named tuple.

105
00:07:30.670 --> 00:07:42.040
So let's create a basic tuple named my tuple, which will contain three values, say 518 and 65.

106
00:07:42.640 --> 00:07:50.590
If we print my tuple with index one, you may already know that will receive number 18, which is the

107
00:07:50.590 --> 00:07:51.820
value of index one.

108
00:07:52.240 --> 00:07:58.000
But you might have a long tuple and you might not remember where to find a specific value or its index.

109
00:07:58.180 --> 00:08:00.250
So you could have to start counting.

110
00:08:00.640 --> 00:08:05.320
So what if you had tuples which could be accessed by their indexes and names?

111
00:08:05.590 --> 00:08:08.500
That's exactly what we'll do with named tuple.

112
00:08:08.800 --> 00:08:11.410
So first, let's create an object named person.

113
00:08:13.060 --> 00:08:20.200
That will be equal to names tuple which will have the following values person as a string and a list

114
00:08:20.200 --> 00:08:24.100
of attributes such as name, height and weight.

115
00:08:25.170 --> 00:08:31.560
So here we have three arguments for a name tuple which was assigned to a person object.

116
00:08:31.980 --> 00:08:39.230
So now we'll create a person instance and we'll name it Michael and it'll be equal to a person.

117
00:08:39.240 --> 00:08:46.500
And if we put if we add brackets, we can see what this person needs, such as a name, a height and

118
00:08:46.500 --> 00:08:47.130
a weight.

119
00:08:47.520 --> 00:08:49.200
His name will be Michael.

120
00:08:49.230 --> 00:08:54.720
He'll be 176 centimetres tall and weigh 79 kilos.

121
00:08:55.830 --> 00:09:01.350
Our character, Michael has those three attributes, and if we want to access them, we can do it like

122
00:09:01.350 --> 00:09:01.860
this.

123
00:09:02.220 --> 00:09:11.730
Print is called Michael Height, for instance, and if we print this value, which is 176 and is contained

124
00:09:11.730 --> 00:09:17.100
in the tuple I've created in order to assign attributes to Michael, we'll be able to access through

125
00:09:17.100 --> 00:09:18.480
the name of his attribute.

126
00:09:19.020 --> 00:09:23.490
That's because my tuple contains elements that were assigned with named tuple.

127
00:09:24.240 --> 00:09:28.470
So if we enter another attribute such as weight, we'll also be able to do it.

128
00:09:29.370 --> 00:09:30.780
And that's not everything.

129
00:09:31.380 --> 00:09:36.690
What's cool about this is that we can also access an element by its index, which would be the normal

130
00:09:36.690 --> 00:09:37.770
way to do so.

131
00:09:37.950 --> 00:09:41.160
So if we enter index to here, we'll get Michael's weight.

132
00:09:41.190 --> 00:09:44.070
Given the fact that this is the value of index two.

133
00:09:44.700 --> 00:09:47.550
So these were three elements of collections that I wanted to show.

134
00:09:47.550 --> 00:09:53.130
You read the document so as to get to know other valuable features of collections.

135
00:09:53.160 --> 00:09:57.150
At the end of this lesson, you'll find three exercises to solve.

136
00:09:57.180 --> 00:10:00.750
Two of them, you'll have to take into account some objects we've seen.

137
00:10:00.870 --> 00:10:05.400
But in order to solve the third exercise, you'll have to read the documents in order to learn about

138
00:10:05.400 --> 00:10:07.290
an element that we haven't dealt with.

139
00:10:07.620 --> 00:10:08.850
Great challenge, isn't it?

140
00:10:08.940 --> 00:10:10.830
Well, I'll see you in the next lecture.
