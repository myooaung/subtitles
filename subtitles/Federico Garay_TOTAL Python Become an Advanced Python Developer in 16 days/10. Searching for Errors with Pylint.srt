1
00:00:07,760 --> 00:00:13,820
Now that we understand how to handle errors and exceptions and pythons with the try, accept and final

2
00:00:13,820 --> 00:00:21,140
blocks, we are going to talk about two libraries that allow you to test our code as our program starts

3
00:00:21,140 --> 00:00:27,890
to expand into larger multi file projects or you start working with a team, it becomes really important

4
00:00:27,890 --> 00:00:33,320
to test the program as you or your teammates make changes or updates to the code.

5
00:00:33,680 --> 00:00:39,630
It is imperative to run your test files to make sure that the code still executes as expected.

6
00:00:39,650 --> 00:00:46,520
Well, there are several testing tools out there, but we're going to focus on two pilot and unit test.

7
00:00:46,850 --> 00:00:52,280
Pilot is a library that analyzes your code and reports potential problems.

8
00:00:52,550 --> 00:00:57,380
It can identify style problems or maybe some invalid code.

9
00:00:57,830 --> 00:01:02,930
On the other hand, we have unit test, which is a built in Python library that allows you to test your

10
00:01:02,930 --> 00:01:07,040
own programs and then verify if you are getting the desired results.

11
00:01:07,490 --> 00:01:13,220
We'll start by showing you how to use pile int to check your code for possible style errors.

12
00:01:13,220 --> 00:01:15,480
And if you're wondering what I mean by style.

13
00:01:15,500 --> 00:01:22,910
Python has a set of style convention rules known as Pep eight, which we'll also look at next.

14
00:01:22,910 --> 00:01:29,330
Finally, we'll explore how to test our code with the built in unit test lab testing library.

15
00:01:29,690 --> 00:01:32,210
Let's go over to the computer and see how this works.

16
00:01:32,810 --> 00:01:37,460
In this lesson, we'll use pilot to check for errors that our file might have.

17
00:01:37,790 --> 00:01:40,970
So first, we'll need to install pilot on our computer.

18
00:01:41,210 --> 00:01:43,580
So go to command line or terminal.

19
00:01:43,580 --> 00:01:48,800
If you use Mac or Linux and call PIP install and then call pilot.

20
00:01:49,430 --> 00:01:52,490
So I've already installed it and that's why I get this message.

21
00:01:52,730 --> 00:01:59,150
If you don't have this tool, the interface will start operating until it is installed, then the cursor

22
00:01:59,150 --> 00:02:00,080
will be back here.

23
00:02:00,200 --> 00:02:03,290
So we had pilot installed on our computer.

24
00:02:03,920 --> 00:02:10,250
So now I'll create a file containing an intentional error in day eight and you can create it wherever

25
00:02:10,250 --> 00:02:10,910
you like.

26
00:02:10,910 --> 00:02:14,840
What matters is that you know how to access your file from command line.

27
00:02:14,870 --> 00:02:22,940
Later, this new file will be named file one dot P and it will only contain two things a variable named

28
00:02:22,940 --> 00:02:28,340
number one, which will be equal to 500, and a line that will print this variable.

29
00:02:28,730 --> 00:02:31,130
But I'll type this name with an uppercase.

30
00:02:31,250 --> 00:02:32,330
That's the error.

31
00:02:32,870 --> 00:02:35,330
So of course Python will complain.

32
00:02:35,570 --> 00:02:38,120
It will turn a blind eye on it and leave it.

33
00:02:38,450 --> 00:02:40,670
So I have a file with an error.

34
00:02:41,450 --> 00:02:48,830
Now I want to use Pylon to check my file and look for errors or style issues, which is what Pylon does.

35
00:02:49,550 --> 00:02:54,320
So I'll go back to command line so as to check my file using pilot.

36
00:02:54,680 --> 00:03:01,250
I can find some error that prevents my file from executing, which I will as well as style issues will

37
00:03:01,250 --> 00:03:02,360
also be present.

38
00:03:02,630 --> 00:03:07,790
So I'll search through my system from within command line until I find my file.

39
00:03:08,210 --> 00:03:13,790
It is located in desktop and I'll go to the python folder where I've saved all the files created for

40
00:03:13,790 --> 00:03:14,630
this course.

41
00:03:14,630 --> 00:03:20,660
Then I'll go to date eight where the current folder is located since I know I'll get an error instead

42
00:03:20,660 --> 00:03:22,220
of executing it directly.

43
00:03:22,220 --> 00:03:29,930
Typing file one point p, I'll use pilot and then I'll enter file one dot P and in order for this to

44
00:03:29,930 --> 00:03:38,000
be executed the way I want, I'll type minus R, which stands for Report Space and y which stands for

45
00:03:38,000 --> 00:03:38,540
yes.

46
00:03:39,740 --> 00:03:44,780
So the syntax to verify if your file contains errors is written like this.

47
00:03:44,900 --> 00:03:49,010
Pilot file name minus r y.

48
00:03:50,240 --> 00:03:55,280
If you're using an older version of pilot that you already had installed, then you don't need to enter.

49
00:03:55,280 --> 00:03:57,110
The minus are and y.

50
00:03:57,980 --> 00:04:01,280
If you installed it for this course, do it like I told you to.

51
00:04:01,880 --> 00:04:06,230
So I'll press enter and I'll get some kind of extensive report.

52
00:04:06,560 --> 00:04:10,010
Notice that it contains several lines and tables.

53
00:04:10,370 --> 00:04:13,790
So let's go to the beginning so as to analyze what this is.

54
00:04:14,300 --> 00:04:19,340
We've received an automatic report, including important details about our code.

55
00:04:20,030 --> 00:04:23,900
So firstly, there is a summary of all the problems in our code.

56
00:04:23,900 --> 00:04:25,420
These three lines.

57
00:04:25,850 --> 00:04:29,750
The first items which starts with C are style issues.

58
00:04:30,020 --> 00:04:32,420
They don't prevent our code from executing.

59
00:04:32,510 --> 00:04:36,020
They are issues that don't meet Python's writing standards.

60
00:04:36,200 --> 00:04:39,860
So we've lost points here, starting with E!

61
00:04:39,890 --> 00:04:41,060
That's an error.

62
00:04:41,090 --> 00:04:46,700
Notice that it reads undefined variable number one, and we know what this is about.

63
00:04:47,150 --> 00:04:54,770
So we can also see that there's a missing module docstring and that the software has found a constant

64
00:04:54,770 --> 00:05:00,760
that is not regarded as a variable since we didn't execute it because it doesn't come.

65
00:05:00,860 --> 00:05:03,560
Firm to uppercase naming style.

66
00:05:04,070 --> 00:05:09,860
This is due to the fact that Python interprets the number of one as a constant when it's actually a

67
00:05:09,860 --> 00:05:10,580
variable.

68
00:05:10,910 --> 00:05:11,330
All right.

69
00:05:11,330 --> 00:05:12,680
Let's see what's next.

70
00:05:12,860 --> 00:05:18,530
This is a summary of the most important issues of our code, and there are some analyses as well.

71
00:05:18,980 --> 00:05:25,910
Here we have statistics sorted by name so we can find how many modules, class methods and functions

72
00:05:25,910 --> 00:05:26,540
we have.

73
00:05:26,990 --> 00:05:29,120
We only have one module here.

74
00:05:29,540 --> 00:05:31,970
Then we have some raw metrics.

75
00:05:32,000 --> 00:05:37,340
For instance, we can see if there are comments on our code and when working with somebody else.

76
00:05:37,340 --> 00:05:40,490
We can also check here if there's a comment on each module.

77
00:05:41,030 --> 00:05:44,330
Then we can check whether there are duplicated lines or not.

78
00:05:44,360 --> 00:05:46,070
In this case, there are none.

79
00:05:46,430 --> 00:05:48,830
So message is sorted by category.

80
00:05:49,100 --> 00:05:55,760
We have two conventional messages which are about style issues, and we also have one error message.

81
00:05:56,030 --> 00:06:01,760
Next, we have more details about these messages, such as which category they're included in.

82
00:06:02,060 --> 00:06:08,240
We can see the error message is linked to an undefined variable and we can see what the convention messages

83
00:06:08,240 --> 00:06:09,050
are about.

84
00:06:09,230 --> 00:06:11,900
And we have the most important thing at the end.

85
00:06:12,220 --> 00:06:14,810
There's information concerning the whole code.

86
00:06:14,810 --> 00:06:21,080
In our case, it's gruesome, meaning that our code contains errors and it doesn't meet writing standards.

87
00:06:21,620 --> 00:06:25,820
So we're going to clean it a bit so as to improve it and get a better score.

88
00:06:26,450 --> 00:06:31,610
However, do not try to get ten out of ten because it will put you on a high stress.

89
00:06:31,820 --> 00:06:37,880
Sometimes the only way to get a ten is to write a code that can only be read by a computer and not a

90
00:06:37,880 --> 00:06:38,770
human being.

91
00:06:38,780 --> 00:06:41,450
So strive towards a seven at least.

92
00:06:41,660 --> 00:06:43,060
So let's go back to our code.

93
00:06:43,070 --> 00:06:45,140
We'll add some things it should have.

94
00:06:45,500 --> 00:06:52,160
First, we're expected to add triple quotes and an explanation about this module so I can type this

95
00:06:52,160 --> 00:06:54,050
module prints something.

96
00:06:54,530 --> 00:06:58,370
This won't prevent our code from executing, but it has to be included.

97
00:06:59,450 --> 00:07:06,560
Our code is also expected to be always inside a function, so that is not an isolated text without purpose.

98
00:07:06,830 --> 00:07:10,760
So we'll create a function named function and add colon.

99
00:07:10,880 --> 00:07:18,530
Then we'll add proper indentation and correct our error by typing PN in lowercase so that our variable

100
00:07:18,560 --> 00:07:20,240
can be called correctly.

101
00:07:21,140 --> 00:07:24,020
So notice that Python highlights style issues.

102
00:07:24,140 --> 00:07:30,290
If we position ourselves on this brand line in our function, it will display a message that reads P

103
00:07:30,310 --> 00:07:38,840
Pep eight, which is the style guide for Python code expected to blank lines and it found one.

104
00:07:39,950 --> 00:07:44,090
So it expects two blank lines before a function and we'll add them.

105
00:07:45,200 --> 00:07:48,740
That message is gone now and we'll also call our function down here.

106
00:07:48,740 --> 00:07:49,850
So function.

107
00:07:49,970 --> 00:07:51,860
And now we have another problem.

108
00:07:51,890 --> 00:07:53,660
We'll position ourselves here to see that.

109
00:07:53,660 --> 00:07:57,650
Python tells us it's expected to blank lines after the function.

110
00:07:57,830 --> 00:08:00,230
So the code shouldn't end with this line of code.

111
00:08:00,230 --> 00:08:01,970
It should end with a blank line.

112
00:08:02,810 --> 00:08:05,990
Python stopped complaining and this has gotten better.

113
00:08:05,990 --> 00:08:08,990
So let's try it again here once again.

114
00:08:08,990 --> 00:08:15,020
Type pilot file one P minus R, space y and press enter.

115
00:08:16,040 --> 00:08:21,050
We'll now get a new report and a much better one since we got seven and a half out of ten.

116
00:08:21,590 --> 00:08:25,700
If we check what's missing, we'll see that there's a docstring missing.

117
00:08:26,750 --> 00:08:28,490
We'll know more about this soon.

118
00:08:28,490 --> 00:08:32,570
So taking into account what we've already know, this is the best score we can get.

119
00:08:33,560 --> 00:08:37,190
Actually, pilot would be really useful when we work with other people.

120
00:08:37,400 --> 00:08:42,950
You'll hardly use it when working alone because you can manage your own ID, which points out the errors.

121
00:08:43,310 --> 00:08:47,270
Sometimes when working alone style issues may not be very serious.

122
00:08:47,270 --> 00:08:52,250
However, it's important that you know how to use Python because it will come in handy when working

123
00:08:52,250 --> 00:08:52,940
with others.

124
00:08:53,870 --> 00:09:00,110
So this was pilot and in the next lecture we're going to see how we can work with the unit test in order

125
00:09:00,110 --> 00:09:01,460
to test our code.
