WEBVTT
1
00:00:08.690 --> 00:00:13.940
So we've loaded the photos and now we're going to help the system recognize where faces are in those

2
00:00:13.940 --> 00:00:14.690
photos.

3
00:00:14.690 --> 00:00:16.520
And we have some methods to do that.

4
00:00:17.150 --> 00:00:22.010
So we're going to go to the Show Images section and we're going to generate a code that allows us to

5
00:00:22.010 --> 00:00:28.610
locate control face, and we're going to use a variable to store the location of that face.

6
00:00:29.030 --> 00:00:32.120
It's going to be called face a location.

7
00:00:32.270 --> 00:00:36.800
And this is going to be equal to our dot face location.

8
00:00:37.340 --> 00:00:42.980
And inside these parentheses, we're going to put controlled picture, which is the picture that we

9
00:00:42.980 --> 00:00:44.690
want to find the face for.

10
00:00:45.320 --> 00:00:50.600
And although we're sending a single image which is controlled picture, we have to clarify that we are

11
00:00:50.600 --> 00:00:52.790
sending the first element of that picture.

12
00:00:53.060 --> 00:00:56.570
So after the parentheses, we put index zero.

13
00:00:57.970 --> 00:01:01.720
Now what we need to do is to encode the face that we have detected.

14
00:01:02.230 --> 00:01:07.210
So we're going to create another variable called coded face a.

15
00:01:08.230 --> 00:01:10.330
And what do we mean by encode?

16
00:01:10.750 --> 00:01:16.750
It simply means to make the system understand where what we need is meaning the face, but not through

17
00:01:16.750 --> 00:01:22.420
the visual image, not through the pixels that we humans see, but through a digital code formed by

18
00:01:22.420 --> 00:01:26.680
a series of numbers, which is how the computer can see the images.

19
00:01:27.700 --> 00:01:34.600
So then we put our dot face encoding, which is a method that asks us to tell the name of the picture

20
00:01:34.600 --> 00:01:38.140
we want to encode, which is going to be controlled picture.

21
00:01:39.040 --> 00:01:42.820
And we're also going to establish that it is index zero.

22
00:01:44.320 --> 00:01:49.480
And now that we have detected the face and we've encoded the face in our picture, i.e. the system already

23
00:01:49.480 --> 00:01:55.510
identifies where there is a face, we're going to do something that allows the human user to see where

24
00:01:55.510 --> 00:01:57.040
the face is in the picture.

25
00:01:57.160 --> 00:02:00.760
So let's make it so the system can frame it with a box.

26
00:02:01.270 --> 00:02:05.170
We're going to create a rectangle that shows where the face is in the picture.

27
00:02:05.800 --> 00:02:10.840
For that, we're going to need the location values we got in face a location.

28
00:02:10.960 --> 00:02:12.390
So see how this looks.

29
00:02:12.400 --> 00:02:13.570
Let's print it out.

30
00:02:14.140 --> 00:02:19.330
Face a location on screen so you can see what it looks like.

31
00:02:19.690 --> 00:02:20.860
So we run it.

32
00:02:21.160 --> 00:02:23.380
And here we're going to get our images again.

33
00:02:23.890 --> 00:02:25.270
And here we have them.

34
00:02:26.020 --> 00:02:31.550
But notice now that in the console, you see a tuple that contains these phone numbers.

35
00:02:31.570 --> 00:02:33.790
These numbers are like the coordinates.

36
00:02:33.940 --> 00:02:39.010
They are the four points on the image that determine the force size of the rectangle that encloses the

37
00:02:39.010 --> 00:02:39.610
face.

38
00:02:40.510 --> 00:02:48.340
The top line of the rectangle is at pixel 139 on the Y axis, counting from zero at the top edge of

39
00:02:48.340 --> 00:02:49.030
the window.

40
00:02:49.480 --> 00:02:55.900
And the right line of the rectangle is at 454 pixels from the left edge of the window on the x axis.

41
00:02:57.070 --> 00:03:05.620
The bottom line is a pixel 268 on the Y axis and the left side at 325 pixels on the x axis.

42
00:03:06.190 --> 00:03:12.190
So with these parameters, we can build a rectangle on the screen that allows us to mark where the face

43
00:03:12.190 --> 00:03:13.150
is located.

44
00:03:13.510 --> 00:03:19.720
So let's remove this print that was just to show you the images and let's call a clarification that

45
00:03:19.720 --> 00:03:21.970
says Show Rectangle.

46
00:03:22.330 --> 00:03:29.140
That's going to happen thanks to the CV two element with the Rectangle method, which of course is going

47
00:03:29.140 --> 00:03:30.850
to ask us for some parameters.

48
00:03:32.020 --> 00:03:37.120
First, they asked us for the image on which we're going to draw the rectangle, which is controlled

49
00:03:37.120 --> 00:03:43.660
picture, and then it will ask us for the point one which are the coordinates of the upper left corner,

50
00:03:43.960 --> 00:03:47.380
and the point two which are the coordinates of the lower right corner.

51
00:03:47.710 --> 00:03:52.360
When we determine the coordinates of these two opposite corners of the rectangle, the program will

52
00:03:52.360 --> 00:03:55.350
have enough information to draw the complete rectangle.

53
00:03:55.360 --> 00:04:01.600
So where do we have the information of these coordinates in the values of the tuple that we have obtained

54
00:04:01.600 --> 00:04:03.340
in Face a location.

55
00:04:03.880 --> 00:04:07.990
So we said that 0.1 is the coordinates of the top and left sides.

56
00:04:08.170 --> 00:04:16.930
These values are stored in face a location index three and in face a location index zero respectively.

57
00:04:17.800 --> 00:04:23.200
So we have established the first vertex, the top left vertex of our rectangle.

58
00:04:23.830 --> 00:04:29.290
Now we need to set point two, which would be the values of the right and bottom sides.

59
00:04:29.620 --> 00:04:36.070
So we set another tuple with face a location index one and face a location index two.

60
00:04:36.490 --> 00:04:39.850
And that's how we get the location of the second vertex.

61
00:04:40.450 --> 00:04:42.700
But we can also set some more parameters.

62
00:04:42.700 --> 00:04:47.560
So let's put a comma to go to the next parameter, which is the colour that our rectangle is going to

63
00:04:47.560 --> 00:04:47.980
be.

64
00:04:48.760 --> 00:04:56.470
We construct it with our GP and if we want it to be green, for example, I put zero in red.

65
00:04:56.800 --> 00:05:04.660
I put 255 in green and finally zero in blue so that it only has the green component.

66
00:05:05.140 --> 00:05:08.770
So on the other parameter that we're going to set is its thickness.

67
00:05:08.950 --> 00:05:11.260
So I'm going to assign it to points.

68
00:05:11.740 --> 00:05:14.260
And with that, we'll be able to see our rectangle.

69
00:05:14.740 --> 00:05:15.760
So let's run it.

70
00:05:18.630 --> 00:05:20.280
Here are the images again.

71
00:05:21.170 --> 00:05:27.860
But this time the control picture has a green rectangle that marks exactly where face recognition has

72
00:05:27.860 --> 00:05:30.920
said, Here is a face and what a face.

73
00:05:32.120 --> 00:05:37.880
We're going to close the pictures and now we're going to do the same but with test picture.

74
00:05:38.540 --> 00:05:45.500
So let's copy this and we put test in the title and let's change A to B, where appropriate.

75
00:05:45.500 --> 00:05:48.110
And we also change control to test.

76
00:05:49.490 --> 00:05:58.130
And here in show rectangle, let's copy the CV to to fit the test variables and we change the test here.

77
00:05:58.550 --> 00:06:03.440
And face B in all these places here, here and here.

78
00:06:04.400 --> 00:06:07.100
So we execute it and our images will come.

79
00:06:07.490 --> 00:06:10.220
Let's hope that they have their rectangles.

80
00:06:11.330 --> 00:06:16.730
And indeed, although they are very different photos in two very different positions, the system has

81
00:06:16.730 --> 00:06:18.770
said here are two faces.

82
00:06:19.280 --> 00:06:22.550
It still doesn't know if it's the same person or if they are different.

83
00:06:22.550 --> 00:06:24.710
It only knows that there are two faces.

84
00:06:24.950 --> 00:06:30.650
So let's go to the next lesson to the third step of facial recognition process.
