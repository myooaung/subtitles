1
00:00:07,550 --> 00:00:13,550
I propose you to start the day with a very easy lecture that will serve mainly to warm up some of your

2
00:00:13,550 --> 00:00:20,270
engines, that brain of yours, but also to see in detail the logical operators that I showed you yesterday.

3
00:00:20,270 --> 00:00:26,840
The logical operators, which are these that I have with me right now are the comparison signs that

4
00:00:26,840 --> 00:00:34,700
we can use to precisely compare to values and to see if that comparison is true or not.

5
00:00:34,700 --> 00:00:37,400
That is to say, if it's true or false.

6
00:00:37,400 --> 00:00:43,520
So whenever you use comparison operators, you are going to obtain as an answer one of these two values,

7
00:00:43,520 --> 00:00:45,230
true or false?

8
00:00:45,410 --> 00:00:49,130
That is to say that you are going to get a Boolean value.

9
00:00:49,160 --> 00:00:52,070
There are some details that we can learn a little bit more in depth.

10
00:00:52,070 --> 00:00:54,410
So let's head over to py charm to do that.

11
00:00:54,650 --> 00:00:59,360
And now from Python we're going to look at these details about the comparison values.

12
00:00:59,570 --> 00:01:04,490
I already have a folder called day four along with a file created for this occasion.

13
00:01:04,520 --> 00:01:09,350
And we're going to start by looking at the difference between the single equals sign and the double

14
00:01:09,350 --> 00:01:10,220
equals sign.

15
00:01:11,060 --> 00:01:15,530
When we use the single equals sign, what we're doing is assigning a value to something.

16
00:01:16,010 --> 00:01:18,470
We are giving Python a piece of information.

17
00:01:18,470 --> 00:01:24,080
I'm saying, for example, my variable, which is going to be the name of the variable is going to be

18
00:01:24,080 --> 00:01:26,600
equal to I don't know, hello world.

19
00:01:27,260 --> 00:01:29,210
So here, it's not a comparison.

20
00:01:29,300 --> 00:01:31,610
It's a kind of command python.

21
00:01:31,610 --> 00:01:35,570
I want from now on my variable to have as content as value.

22
00:01:35,600 --> 00:01:36,710
Hello world.

23
00:01:36,950 --> 00:01:41,510
Sometimes you assign it to things like I want this button to be this color, etc..

24
00:01:41,780 --> 00:01:45,110
So we use only one equal sign to assign value.

25
00:01:45,410 --> 00:01:51,620
Now, if I want to make a comparison, what I have to do is use two equal signs, for example, to say

26
00:01:51,620 --> 00:01:54,980
I want to compare if ten is equal to 25.

27
00:01:55,010 --> 00:01:59,840
I use two signs and here we already have a question, not an order.

28
00:02:00,170 --> 00:02:01,110
And look at this.

29
00:02:01,130 --> 00:02:03,290
Now we can store it inside a variable.

30
00:02:03,290 --> 00:02:05,120
For example, my bool.

31
00:02:05,750 --> 00:02:08,390
And here we did that with one equal sign.

32
00:02:08,930 --> 00:02:15,080
In this single line have both approaches two equals to make a comparison and one equal sign to store

33
00:02:15,110 --> 00:02:17,240
that comparison inside a variable.

34
00:02:18,470 --> 00:02:24,650
This comparison, as you can imagine, is false because ten is not equal to 25, and therefore my ball

35
00:02:24,650 --> 00:02:26,960
is now going to have false as value.

36
00:02:27,320 --> 00:02:29,090
It is not going to have as content.

37
00:02:29,090 --> 00:02:31,100
Ten is equal to 25.

38
00:02:31,490 --> 00:02:37,850
So if I want to print my bool now, let's run it and let's go to run and let's choose comparison operators,

39
00:02:37,850 --> 00:02:39,410
which is the name of my file.

40
00:02:39,680 --> 00:02:41,240
Then it says false.

41
00:02:41,330 --> 00:02:44,060
It doesn't say ten equal equals 25.

42
00:02:44,390 --> 00:02:49,250
On the other hand, if I wanted to get a true answer here, I would have to put ten equals ten.

43
00:02:49,250 --> 00:02:51,020
Run it and get true.

44
00:02:52,000 --> 00:02:56,140
Also I can compare, for example, operations that result in a certain number.

45
00:02:56,500 --> 00:03:03,400
Instead of this ten, I can say five plus five, and instead of the second ten, I can ask for 18 minus

46
00:03:03,400 --> 00:03:03,880
eight.

47
00:03:04,210 --> 00:03:06,310
So the two operations result in ten.

48
00:03:06,320 --> 00:03:09,780
So if I run it, it will still tell me that this is true.

49
00:03:09,790 --> 00:03:14,170
Because the important thing is not how the operation looks like five plus five.

50
00:03:14,170 --> 00:03:16,540
It doesn't look as 18 minus eight.

51
00:03:16,540 --> 00:03:19,240
But the result of both operations is the same.

52
00:03:19,420 --> 00:03:20,090
Yes.

53
00:03:20,110 --> 00:03:20,980
Do you follow me?

54
00:03:21,520 --> 00:03:23,470
Now we can also compare strings.

55
00:03:23,740 --> 00:03:26,170
So I can say white is equal to black.

56
00:03:27,520 --> 00:03:31,570
They are two different strings and therefore I receive that that comparison is false.

57
00:03:31,630 --> 00:03:32,890
They are not equal.

58
00:03:33,400 --> 00:03:39,610
If I wanted them to be equal, I would say white is equal to white and I will get true.

59
00:03:40,300 --> 00:03:44,120
In fact, keep in mind that the comparison between strings is case sensitive.

60
00:03:44,140 --> 00:03:50,020
Therefore, if this white had a capital W, now, even though they are the same word, the comparison

61
00:03:50,020 --> 00:03:51,130
will give me false.

62
00:03:51,280 --> 00:03:55,660
But like operations, the important thing is the result and not the content itself.

63
00:03:55,930 --> 00:04:00,670
So if I want to put here that the second white, the one with the capital letter will get the lower

64
00:04:00,670 --> 00:04:01,380
method.

65
00:04:01,390 --> 00:04:05,470
And now I can compare both values again that will tell me that it's true.

66
00:04:05,740 --> 00:04:10,990
It says that white written in a lowercase is equal to this white with the capital letter but processed

67
00:04:10,990 --> 00:04:12,100
by the lower method.

68
00:04:12,160 --> 00:04:13,120
So I insist.

69
00:04:13,120 --> 00:04:17,540
The important thing is the result and not how each of the factors involved in the comparison looks.

70
00:04:17,560 --> 00:04:20,500
So we also compare some values of different types.

71
00:04:21,010 --> 00:04:26,620
For example, if I want to say the string 100 is equal to the integer 100.

72
00:04:26,770 --> 00:04:32,070
Python distinguishes that this is not the same as a string and will tell me that the comparison is false,

73
00:04:32,080 --> 00:04:34,080
although they look relatively the same.

74
00:04:34,090 --> 00:04:38,500
So I can also compare an integer with a float and if the value is the same.

75
00:04:38,500 --> 00:04:41,470
So 100.0 is equal to 100.

76
00:04:41,740 --> 00:04:45,910
It will give me true because it is the same result even though they are different types.

77
00:04:45,940 --> 00:04:47,410
Can you follow me this far?

78
00:04:47,560 --> 00:04:48,400
I hope so.

79
00:04:48,940 --> 00:04:54,550
Well, this is about all for the equality comparison sign, but we can also compare the opposite, the

80
00:04:54,550 --> 00:04:55,360
difference.

81
00:04:55,450 --> 00:04:59,110
And this is written with the exclamation point and the equal sign.

82
00:04:59,470 --> 00:05:05,050
This asks if this is different from this, and here they're going to get the opposite result of equality.

83
00:05:05,590 --> 00:05:10,690
Here it's going to tell me that it's false because 100 is not different from 100.

84
00:05:11,530 --> 00:05:17,020
So if I wanted to check 100 against 99, then now the difference is going to give me true because I'm

85
00:05:17,020 --> 00:05:20,140
comparing whether they are different and it's true that they're different.

86
00:05:20,170 --> 00:05:23,290
Well, of course, you know the classical major and minor symbols.

87
00:05:23,290 --> 00:05:29,620
So if I want to know if 100 is greater than 99, I'm going to get true because that's the way it is.

88
00:05:29,740 --> 00:05:33,610
If you compare the reverse with a minus sign, you would get false.

89
00:05:34,090 --> 00:05:39,010
And remember that you can also use greater than or equal to or less than or equal to.

90
00:05:39,040 --> 00:05:41,710
If I say that five is greater than five.

91
00:05:41,740 --> 00:05:44,320
Of course I'm going to get false as return.

92
00:05:44,590 --> 00:05:49,990
But if I ask you if it's greater than or equal to, Python is going to tell me it's true because it's

93
00:05:49,990 --> 00:05:53,620
one of the two things greater than or equal to.

94
00:05:54,220 --> 00:05:57,760
And in fact, it's neither is going to tell me it's false.

95
00:05:57,790 --> 00:05:58,600
Very good.

96
00:05:58,870 --> 00:06:01,360
Well, so far, so much for the comparison values.

97
00:06:01,360 --> 00:06:03,310
But there is one more thing to know.

98
00:06:03,340 --> 00:06:07,180
What happens if I want to make more than two comparisons?

99
00:06:07,180 --> 00:06:12,520
For example, I want to know five is greater than six and also if it is less than eight.

100
00:06:12,640 --> 00:06:18,040
Well, here I have to combine these comparison operations and what I will need are logical operations

101
00:06:18,040 --> 00:06:19,600
to make these aggregates.

102
00:06:19,750 --> 00:06:21,640
And we will see this in the next lecture.

103
00:06:21,790 --> 00:06:23,320
So meet me and fill their.
