WEBVTT
1
00:00:07.970 --> 00:00:13.710
Let's start by looking at loops that repeat for a defined number of repetitions or iterations.

2
00:00:13.730 --> 00:00:16.520
These are known as four loops.

3
00:00:16.850 --> 00:00:23.720
Suppose I have this list called names and I want to print hello for each one of its elements.

4
00:00:23.990 --> 00:00:29.390
Here the command is as follows for each item it names print.

5
00:00:29.420 --> 00:00:30.260
Hello.

6
00:00:31.040 --> 00:00:35.420
This would be the command if we had to write in plain English.

7
00:00:35.510 --> 00:00:41.000
Now we are going to transform it into a python line with the appropriate syntax.

8
00:00:41.270 --> 00:00:46.770
We just delete that each and add a colon after names.

9
00:00:46.790 --> 00:00:54.770
Now we have four item in names, which is the name of the list colon and underneath with the proper

10
00:00:54.770 --> 00:00:55.670
tabulation.

11
00:00:55.670 --> 00:00:56.810
This is important.

12
00:00:56.990 --> 00:00:59.780
I write the code that I want to be repeated.

13
00:00:59.780 --> 00:01:01.330
For example, print.

14
00:01:01.340 --> 00:01:02.150
Hello.

15
00:01:02.780 --> 00:01:05.270
Notice that here it says item.

16
00:01:05.540 --> 00:01:13.160
But we could have chose any word like element or MN or whatever because this is actually an internal

17
00:01:13.160 --> 00:01:20.540
variable and only serves to refer to each element that exists in my iterable object list.

18
00:01:21.020 --> 00:01:25.820
Then if my list has five elements, my loop will repeat five times.

19
00:01:25.910 --> 00:01:31.640
So what this code is going to do is iterate or loop through each name of my list, and for each name

20
00:01:31.640 --> 00:01:34.940
it is going to perform an execution of the print code.

21
00:01:35.120 --> 00:01:39.530
So in this case, the result will be five times the word hello.

22
00:01:40.010 --> 00:01:46.520
But the best thing here is that in each iteration of the loop, the variable item or element or whatever

23
00:01:46.520 --> 00:01:51.830
you've called it will contain the object of the list for that iteration as value.

24
00:01:51.860 --> 00:01:58.100
Therefore, you can use that variable so that each repetition of the loop has some sort of variation.

25
00:01:58.130 --> 00:02:04.790
For example, if in the print command we concatenate the word hello with the content of the item variable,

26
00:02:05.060 --> 00:02:11.840
it will result in each print containing a different name of the list because when the loop made the

27
00:02:11.840 --> 00:02:17.480
first round, the value of item was equal to the first element of the list.

28
00:02:17.510 --> 00:02:21.170
In the second round it was equal to the second and so on.

29
00:02:21.260 --> 00:02:22.330
Isn't this great?

30
00:02:22.340 --> 00:02:28.160
The for loop offers so many possibilities, so we better see it in action right now.

31
00:02:28.580 --> 00:02:29.870
And that's what we're going to do.

32
00:02:29.900 --> 00:02:31.790
We're going to see the loop in action.

33
00:02:31.790 --> 00:02:38.120
And in order to do that, we're going to create a list because we need an iterable object to step through

34
00:02:38.120 --> 00:02:39.350
each of its elements.

35
00:02:40.370 --> 00:02:43.120
So my list is going to have three elements.

36
00:02:43.130 --> 00:02:47.000
It's going to have A, B, and C, and that's going to be enough.

37
00:02:47.870 --> 00:02:50.660
Well, now comes the first loop that we're going to create.

38
00:02:50.810 --> 00:02:52.430
We declare it as four.

39
00:02:52.700 --> 00:02:59.930
So we're saying for each letter in list colon, and then we hit enter in the keyboard, it generates

40
00:02:59.930 --> 00:03:03.290
the needed indentation and here we should write the command.

41
00:03:03.290 --> 00:03:07.040
We want it to execute as much times as letters are in my list.

42
00:03:07.040 --> 00:03:08.350
So we want to print.

43
00:03:08.360 --> 00:03:13.190
Then we're using the same internal variable letter to ask it to print that letter.

44
00:03:13.640 --> 00:03:20.120
So if I run this choosing the file name, it's going to print the three lines, because in the first

45
00:03:20.120 --> 00:03:25.700
loop it went through the first object in my list and printed the letter A in the second loop.

46
00:03:25.700 --> 00:03:31.580
It went through the letter B and printed that object which is loaded here in the variable letter at

47
00:03:31.580 --> 00:03:36.680
the time of the second loop and in the third loop it printed the C and then stopped.

48
00:03:37.280 --> 00:03:39.200
It did as many loops as it needed to.

49
00:03:39.230 --> 00:03:44.750
If I'd had a fourth element here, let's call it Letter D, and I ran this again and I was going to

50
00:03:44.750 --> 00:03:48.440
do four loops to go through each of my objects and so print them all.

51
00:03:48.860 --> 00:03:51.320
And this I can also concatenate strings.

52
00:03:51.500 --> 00:03:57.260
For example, here it will say in quotes the word letter, colon space.

53
00:03:57.680 --> 00:04:00.920
And then there we concatenate with the value of letter.

54
00:04:01.760 --> 00:04:07.520
So here we have some kind of sentence letter A, letter B, letter C and letter D.

55
00:04:08.360 --> 00:04:14.090
As I was saying, these variables could be any word I put letter because it is meaningful, because

56
00:04:14.090 --> 00:04:19.490
we have to try and make it readable so that a letter can come and say, ah, for each letter in the

57
00:04:19.490 --> 00:04:22.190
list, blah, blah, blah, and we can understand it.

58
00:04:22.550 --> 00:04:28.580
But if I wanted to here, I could have said L, and the only thing that matters here is that I also

59
00:04:28.580 --> 00:04:31.100
put L and it will work the same way.

60
00:04:31.730 --> 00:04:34.520
It could even say, I don't know, dinosaur.

61
00:04:34.970 --> 00:04:38.210
The important thing is that here also says dinosaur.

62
00:04:38.330 --> 00:04:41.630
Otherwise it will give you an error with dinosaur.

63
00:04:41.630 --> 00:04:45.620
In both places it will work the same, but it will not be that readable.

64
00:04:46.010 --> 00:04:49.190
And maybe something you might want to know about pie charm.

65
00:04:49.340 --> 00:04:54.950
It has a big advantage if you select a variable and you want to change all the variables that are in

66
00:04:54.950 --> 00:04:55.790
your code.

67
00:04:55.910 --> 00:05:00.890
Here, I've just twice repeated the same variable you can right click come to refactor.

68
00:05:01.210 --> 00:05:06.250
Choose rename and I'm going to put letter back in automatically.

69
00:05:06.250 --> 00:05:07.680
When I choose refactor.

70
00:05:07.690 --> 00:05:13.000
It changes all the instances where my variable appeared so that I don't have to change one by one.

71
00:05:13.150 --> 00:05:14.950
Well, this still works.

72
00:05:15.160 --> 00:05:20.140
I also want to show you that it is possible to get other aspects of our Iterable objects more than its

73
00:05:20.140 --> 00:05:21.070
straight value.

74
00:05:21.160 --> 00:05:25.420
For example, I can get its index then inside the for loop.

75
00:05:25.420 --> 00:05:31.540
I'm going to create a variable that is called letter number and letter number is going to be equal to

76
00:05:31.540 --> 00:05:33.490
list point index.

77
00:05:33.880 --> 00:05:39.010
So it gives me back the index of which that moment is the letter by which I'm iterating.

78
00:05:39.940 --> 00:05:42.090
This is going to return to the index.

79
00:05:42.100 --> 00:05:43.960
So we're going to start with zero.

80
00:05:44.200 --> 00:05:48.610
But I would like to count them starting from one so plus one.

81
00:05:48.910 --> 00:05:54.970
Then here the phrase is going to say letter, and then we write a call to whatever there is in letter

82
00:05:54.970 --> 00:05:55.540
number.

83
00:05:56.050 --> 00:06:01.450
This is going to say the letter number X, and here we're going to put another call with letter.

84
00:06:02.710 --> 00:06:05.980
If we print this out, see how fancy it looks now.

85
00:06:06.220 --> 00:06:12.260
Now it says letter one a letter to be letter three C and each pass.

86
00:06:12.280 --> 00:06:16.910
Letter number is also changing its value in the first part of the loop.

87
00:06:16.930 --> 00:06:22.210
Letter number is equal to the index of the letter A, which is zero plus one.

88
00:06:22.510 --> 00:06:24.520
That's why we have this one here.

89
00:06:24.700 --> 00:06:27.730
And in the second loop we get two and so on.

90
00:06:28.330 --> 00:06:33.490
So I hope you're understanding that this, although it may seem a little complex, is actually quite

91
00:06:33.490 --> 00:06:34.180
simple.

92
00:06:34.330 --> 00:06:37.110
The variables are changing on each turn of our loop.

93
00:06:37.120 --> 00:06:39.160
So let's look at something a little different.

94
00:06:39.430 --> 00:06:42.490
We're going to see many examples so that it's clear to you.

95
00:06:42.850 --> 00:06:46.180
Let's now have a list that is equal to a series of names.

96
00:06:46.870 --> 00:06:48.430
It can be Paul.

97
00:06:48.550 --> 00:06:51.940
Then it's going to be Laura, and then it's going to be Freddie.

98
00:06:52.570 --> 00:06:53.440
Why not?

99
00:06:53.890 --> 00:06:55.720
Then we're going to have Louis.

100
00:06:55.780 --> 00:06:57.730
And finally we're going to have Julia.

101
00:06:58.720 --> 00:07:04.150
Well, here we have five names and I want to make a loop that makes a verification for each name in

102
00:07:04.150 --> 00:07:04.810
the list.

103
00:07:05.260 --> 00:07:09.420
Then it's going to be an F and we are combining for an F here.

104
00:07:09.430 --> 00:07:13.420
So every time that makes a loop, it makes a verification.

105
00:07:13.750 --> 00:07:20.200
And this if we'll check if the name begins with the letter L, for example, then I'm going to ask name

106
00:07:20.620 --> 00:07:26.680
the instance that we're executing in each of the loops point and here we see the methods and we choose

107
00:07:26.680 --> 00:07:32.020
the one called starts with which it is to check if it starts with a certain character.

108
00:07:32.500 --> 00:07:38.410
And we're going to put here the L and the execution line will be print name.

109
00:07:39.490 --> 00:07:42.410
Then it is not going to execute the print on each pass.

110
00:07:42.430 --> 00:07:47.780
What it will do on each pass is checking if it fulfils the condition and only when it does.

111
00:07:47.800 --> 00:07:50.410
Only then it is going to print name.

112
00:07:51.190 --> 00:07:54.280
If I execute it, it will say Laura and Lewis.

113
00:07:55.000 --> 00:07:56.470
The logic is as follows.

114
00:07:56.470 --> 00:07:58.660
It went through Paul first.

115
00:07:58.840 --> 00:08:04.390
It checked if the name Paul starts with a letter L and since it doesn't begin with L, it did not print

116
00:08:04.390 --> 00:08:04.990
anything.

117
00:08:05.080 --> 00:08:06.580
Then it went to the second loop.

118
00:08:06.580 --> 00:08:09.820
It found Laura there, which does meet the condition.

119
00:08:09.820 --> 00:08:15.610
So it printed this Laura we have here and it kept looping and looping, only printing those that met

120
00:08:15.610 --> 00:08:16.480
the condition.

121
00:08:17.110 --> 00:08:20.640
So that's how we combine loops and flow control and nicely.

122
00:08:20.650 --> 00:08:27.880
So another thing that I could do here is to add, for example, the else statement which in case the

123
00:08:27.880 --> 00:08:35.560
name does not begin with l it prints, for example, this name does not begin with l something very

124
00:08:35.560 --> 00:08:39.820
simple, but it will allow you to see that it actually went through each of the names and according

125
00:08:39.820 --> 00:08:44.320
to the condition is fulfilled or not, it printed one thing or the other.

126
00:08:44.680 --> 00:08:47.380
So let's see another different example.

127
00:08:47.680 --> 00:08:50.050
Let's create a list called numbers.

128
00:08:50.650 --> 00:08:56.140
And Numbers is going to have, let's say, one, two, three, four and five.

129
00:08:56.320 --> 00:08:57.190
That's enough.

130
00:08:57.490 --> 00:08:59.530
This is going to be a little bit different.

131
00:09:00.100 --> 00:09:05.350
So we're going to create another variable that's going to be called my value and I'm going to start

132
00:09:05.350 --> 00:09:06.250
at zero.

133
00:09:06.700 --> 00:09:13.270
Right now, this variable value is zero, but I'm going to set it up for a loop that says for every

134
00:09:13.270 --> 00:09:18.280
number in numbers, this might be a little confusing, but pay attention to the correct variable.

135
00:09:18.280 --> 00:09:24.160
Name number is something that I'm creating now, and it refers to every single element that is iterable

136
00:09:24.160 --> 00:09:27.070
and this numbers is the name of my list.

137
00:09:27.190 --> 00:09:33.670
So for each number in numbers, the variable, my value that is beginning to equal to zero is going

138
00:09:33.670 --> 00:09:39.370
to become equal to its own value plus whatever number values at the moments of the loop.

139
00:09:40.300 --> 00:09:44.860
Once this loop finishes, we're going to make that the value of my value is printed.

140
00:09:45.700 --> 00:09:48.340
And if I do this, it's going to say 15.

141
00:09:48.760 --> 00:09:49.420
Why?

142
00:09:49.780 --> 00:09:51.460
Because it started at zero.

143
00:09:51.850 --> 00:09:56.170
It went into the first loop where it took the value of one from the list.

144
00:09:56.320 --> 00:10:01.570
This execution line overrides my value to become equal to zero plus one.

145
00:10:01.810 --> 00:10:03.940
So now my value is one.

146
00:10:04.180 --> 00:10:10.450
So in the second round, my value that was worth one became equal to one plus two, which is the second

147
00:10:10.450 --> 00:10:10.960
number.

148
00:10:10.990 --> 00:10:12.190
It became a three.

149
00:10:12.520 --> 00:10:20.620
Then we add the three and three plus three is six, plus four is ten, plus five is 15, which is this

150
00:10:20.620 --> 00:10:22.660
printed number at the end of the loop.

151
00:10:23.410 --> 00:10:28.360
But the important thing to note here is that the print and here is the important thing to take care

152
00:10:28.360 --> 00:10:28.660
about.

153
00:10:28.660 --> 00:10:35.380
Indentation being at the same level as the four was only executed when the loop finished executing.

154
00:10:36.190 --> 00:10:41.170
If I add another indentation here that puts the print statement at the same line where the lines inside

155
00:10:41.170 --> 00:10:44.170
the loop start, then it is now inside the loop.

156
00:10:44.260 --> 00:10:46.900
And look how different the execution is going to be.

157
00:10:47.860 --> 00:10:49.560
So a lot of numbers were printed.

158
00:10:49.570 --> 00:10:50.740
Why is why so?

159
00:10:51.190 --> 00:10:55.360
Because now print will be executed in every single one of the iterations.

160
00:10:55.360 --> 00:11:00.880
So it will show the value that my value has at the same time of every iteration.

161
00:11:01.120 --> 00:11:07.540
So we can see in the first iteration was one, then three, then six, and so on, until it was equal

162
00:11:07.540 --> 00:11:08.380
to 50.

163
00:11:09.370 --> 00:11:13.000
Therefore, you must always pay attention to everything is in its place.

164
00:11:13.740 --> 00:11:15.480
So let's look at one more thing.

165
00:11:15.510 --> 00:11:17.940
Now let's create a variable called word.

166
00:11:18.210 --> 00:11:22.020
This time it's going to be a string that says Python, for example.

167
00:11:23.060 --> 00:11:29.120
And I have this word and I want to iterate over it so I can get every letter in word and I will print

168
00:11:29.120 --> 00:11:30.050
that to the letter.

169
00:11:31.510 --> 00:11:35.890
And this is easy to figure out because the strings, like the lists, are iterable objects.

170
00:11:36.130 --> 00:11:39.010
That is to say that you can go through each one of their elements.

171
00:11:39.010 --> 00:11:40.930
In this case, let me execute it.

172
00:11:41.560 --> 00:11:43.570
Each one of their characters.

173
00:11:43.570 --> 00:11:46.450
And then the way to do a different print every time.

174
00:11:46.930 --> 00:11:50.400
Also note that you don't always need to have the variable separated.

175
00:11:50.410 --> 00:11:52.360
Let's eliminate this variable.

176
00:11:52.360 --> 00:11:57.940
And I could just say python as the object to iterate and it's going to work exactly the same.

177
00:11:59.460 --> 00:12:02.610
So so far we've seen lists and we've seen strings.

178
00:12:03.120 --> 00:12:05.370
I could have the list right here directly.

179
00:12:05.370 --> 00:12:06.720
One, two, three.

180
00:12:06.930 --> 00:12:08.550
And this is going to work the same way.

181
00:12:09.230 --> 00:12:14.210
This instead of being a list, this could be a table and it could also work the same.

182
00:12:14.630 --> 00:12:16.400
I can iterate on a table.

183
00:12:17.210 --> 00:12:20.210
I can also iterate on a list that contains lists.

184
00:12:20.480 --> 00:12:21.170
Let's see.

185
00:12:21.170 --> 00:12:24.380
Let's make a list that has a first one and a two.

186
00:12:26.000 --> 00:12:29.750
Then has a second object, which is another list with three and four.

187
00:12:30.290 --> 00:12:35.210
And then I'm going to have a third object, this list, which is going to be another list with numbers

188
00:12:35.210 --> 00:12:36.620
five and six.

189
00:12:37.340 --> 00:12:39.360
So we're going to change the name here.

190
00:12:39.380 --> 00:12:41.330
We're going to do it with the refactor.

191
00:12:41.630 --> 00:12:47.510
This is not necessary in terms of execution, but we do it just for the sake of readability.

192
00:12:47.810 --> 00:12:51.500
And we're going to put this time object and we refactor it.

193
00:12:52.040 --> 00:12:57.500
So for each object in this list of lists, it is going to print the object.

194
00:12:58.650 --> 00:12:59.700
What do we have here?

195
00:12:59.730 --> 00:13:05.850
Well, the list that it is receiving, what if I want to print those objects in each list, the ones

196
00:13:05.850 --> 00:13:07.500
that are one and two separately?

197
00:13:07.680 --> 00:13:14.370
Well, here I have the chance to create two variables, let's say A and B, and then here I print A,

198
00:13:14.400 --> 00:13:20.910
and then under here, always inside the loop, I print B, and now if I run this to your surprise,

199
00:13:20.910 --> 00:13:23.880
one, two, three, four, five, six.

200
00:13:24.330 --> 00:13:26.910
So what happened here in the first loop?

201
00:13:26.940 --> 00:13:31.680
A was loaded with information, one and B was loaded with information two.

202
00:13:31.800 --> 00:13:34.770
And so when we printed them, it printed both numbers.

203
00:13:35.220 --> 00:13:39.420
Then it went to the second object, which is the second list, and repeated the process.

204
00:13:39.420 --> 00:13:43.920
This way we're able to iterate inside a list that is inside another list.

205
00:13:43.950 --> 00:13:51.270
If I eliminate the B, for example, I print only A and I get one, three, five, which are the A elements

206
00:13:51.270 --> 00:13:53.490
for each sub list that we have here.

207
00:13:53.490 --> 00:13:56.340
So how do we iterate into a dictionary?

208
00:13:56.910 --> 00:13:57.720
Let's see.

209
00:13:57.720 --> 00:14:03.390
We're going to create the dictionary called DIC and inside it we're going to create a key one that has

210
00:14:03.390 --> 00:14:05.100
the letter A as its value.

211
00:14:05.580 --> 00:14:13.080
Then a key to that as its value has a letter B and finally, you guessed it, a key three that has its

212
00:14:13.080 --> 00:14:17.250
value a, c, and here we have a dictionary of three elements.

213
00:14:17.880 --> 00:14:22.080
Well, now let's create a loop that for each item in dick prints the item.

214
00:14:22.980 --> 00:14:24.780
Can you imagine what it's going to be printed?

215
00:14:24.810 --> 00:14:28.470
Take a second, try to figure it out, and now print it out.

216
00:14:29.370 --> 00:14:31.380
Well, it's printing only the keys.

217
00:14:31.560 --> 00:14:34.650
It's printing the key objects within the key and value pair.

218
00:14:35.040 --> 00:14:37.740
So what if I wanted to actually see the whole thing?

219
00:14:38.160 --> 00:14:41.130
Well, here in Dick, I can put dot items.

220
00:14:41.130 --> 00:14:47.310
Remember that we have the property that allows us to check the item and here it prints the complete

221
00:14:47.310 --> 00:14:52.020
item key one a key to B and key three C.

222
00:14:52.020 --> 00:14:56.880
Yes, I could have also wanted to see only the values and I can do that too.

223
00:14:56.910 --> 00:15:01.350
I have a property for that and here I have only A, B and C.

224
00:15:01.860 --> 00:15:07.170
So a different way to see the values would have been for me to create A and B as I did before with lists,

225
00:15:07.170 --> 00:15:11.310
within lists, and I want to see A and B within items this time.

226
00:15:11.580 --> 00:15:16.110
And here, what do we print, A and B, we're going to print both together.

227
00:15:16.110 --> 00:15:23.790
And so I get key one, a key to B and key three C loops is also something that we're going to see very,

228
00:15:23.790 --> 00:15:28.770
very frequently, not just in the course, but throughout your career as a programmer.

229
00:15:29.130 --> 00:15:34.230
And you will learn them one way or the other because they're really useful and absolutely necessary.

230
00:15:34.380 --> 00:15:38.940
So what we saw in this lecture is only the first part of the existing loops in Python.

231
00:15:39.090 --> 00:15:45.360
The loop for in this loop you can pre define the number of iterations according to the object length.

232
00:15:45.360 --> 00:15:51.330
So after we do the practical exercises in the next lecture, we'll move on to while loops are different

233
00:15:51.330 --> 00:15:55.320
from the four loops and you're going to learn it there and you're going to love it.

234
00:15:55.320 --> 00:15:56.310
See you there.
