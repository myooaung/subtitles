WEBVTT
1
00:00:01.040 --> 00:00:03.920
I love this phrase, done means done.

2
00:00:03.920 --> 00:00:07.840
When I ask a developer if they are done, they usually say yes.

3
00:00:07.840 --> 00:00:10.250
Then I ask, are they done done?

4
00:00:10.250 --> 00:00:12.480
And they say, well, not really.

5
00:00:12.480 --> 00:00:13.540
Why is that?

6
00:00:13.540 --> 00:00:16.380
Let's explore.

7
00:00:16.380 --> 00:00:20.650
So, what does done mean in the Kanban world? The work in progress is

8
00:00:20.650 --> 00:00:25.090
done only when the done rule is satisfied. More on the done rule in a

9
00:00:25.090 --> 00:00:29.830
moment. A card is only moved from left to right when it satisfies the

10
00:00:29.830 --> 00:00:32.110
definition of done for that step.

11
00:00:32.110 --> 00:00:35.080
The definition of done is, well, the done rule.

12
00:00:35.080 --> 00:00:39.040
The done rule is also known as the "pull" criteria.

13
00:00:39.040 --> 00:00:39.850
That is,

14
00:00:39.850 --> 00:00:45.200
is it okay to pull the work forward into my step and begin working on it?

15
00:00:45.200 --> 00:00:46.690
Remember, in the previous section,

16
00:00:46.690 --> 00:00:49.410
we expanded our columns to have a work in progress

17
00:00:49.410 --> 00:00:51.540
and done column within each step.

18
00:00:51.540 --> 00:00:55.210
This is the real reason why we have those two columns per step,

19
00:00:55.210 --> 00:01:01.940
so it makes it absolutely clear what is work in progress versus what is done.

20
00:01:01.940 --> 00:01:05.540
Now let's see some examples.

21
00:01:05.540 --> 00:01:09.870
Let's look at examples for each of our workflow steps; specify,

22
00:01:09.870 --> 00:01:14.630
implement, and validate. Our specify done rule is a work in progress

23
00:01:14.630 --> 00:01:18.680
backlong item is decomposed into tasks that can be finished in less than

24
00:01:18.680 --> 00:01:21.750
five work days and specifications are completed.

25
00:01:21.750 --> 00:01:26.360
Our implement done rule is code is developed and unit tested, the specs are

26
00:01:26.360 --> 00:01:30.840
updated as necessary, the code is checked into the repository, and a clean

27
00:01:30.840 --> 00:01:35.810
build is created. Our validate done rule is the code is independently tested,

28
00:01:35.810 --> 00:01:40.260
behavior is compliant with the specs, the pilot customers reviewed it, and all

29
00:01:40.260 --> 00:01:42.440
bugs found have been corrected.

30
00:01:42.440 --> 00:01:47.140
This approach instills discipline in the process and better ensures quality.

31
00:01:47.140 --> 00:01:49.620
The done rules are what the team decides,

32
00:01:49.620 --> 00:01:54.070
and again, they can be changed and improved at any time. Now there is no

33
00:01:54.070 --> 00:01:58.330
ambiguity on if you are done or done done, as I mentioned earlier in this

34
00:01:58.330 --> 00:02:02.780
section. The criteria for done is clearly documented and understood by

35
00:02:02.780 --> 00:02:09.070
all. Who works on the next card? Well, it's really pretty easy.

36
00:02:09.070 --> 00:02:14.070
It is assigned to whoever is free in the next step to pull the card forward.

37
00:02:14.070 --> 00:02:14.640
And of course,

38
00:02:14.640 --> 00:02:17.050
they need to be capable to do the work and have all the basic

39
00:02:17.050 --> 00:02:19.790
skills, but even if they are green, or new at times,

40
00:02:19.790 --> 00:02:22.320
you must give them a chance, of course. And lastly,

41
00:02:22.320 --> 00:02:24.000
you may assign it to anyone,

42
00:02:24.000 --> 00:02:27.570
even in different steps, if they are free to work on the card.

43
00:02:27.570 --> 00:02:29.440
But there's some qualifications for that.

44
00:02:29.440 --> 00:02:30.210
For example,

45
00:02:30.210 --> 00:02:32.810
if there is someone free in the validate step and is

46
00:02:32.810 --> 00:02:36.400
capable of developing code as well, then they will pull the ticket,

47
00:02:36.400 --> 00:02:39.900
and now they'll be working on that ticket in the implement step.

48
00:02:39.900 --> 00:02:43.990
So we have reduced capacity in the validate step by one and

49
00:02:43.990 --> 00:02:46.840
added capacity in the implement step by one,

50
00:02:46.840 --> 00:02:50.220
and you and your team can decide on how long the new work

51
00:02:50.220 --> 00:02:52.840
in progress limits will remain changed.

52
00:02:52.840 --> 00:02:56.170
This is all figured out and determined in the daily standups.

53
00:02:56.170 --> 00:02:59.630
The total work in progress limits have not changed.

54
00:02:59.630 --> 00:03:02.910
You just happen to move them from one step to another. Total

55
00:03:02.910 --> 00:03:05.280
work in progress limits can change, of course,

56
00:03:05.280 --> 00:03:10.230
if you add resources or subtract resources overall.

57
00:03:10.230 --> 00:03:13.750
Demand and capacity allocation.

58
00:03:13.750 --> 00:03:16.090
Now that we have a good understanding of work in

59
00:03:16.090 --> 00:03:18.430
progress and how we limit it for each step,

60
00:03:18.430 --> 00:03:21.810
how do you think it was set up in the first place? By determining

61
00:03:21.810 --> 00:03:25.270
the demand you think you have for each step.

62
00:03:25.270 --> 00:03:27.400
For example, early in a project,

63
00:03:27.400 --> 00:03:29.720
you will have a lot of specified work, so you may

64
00:03:29.720 --> 00:03:32.340
allocate more resources there. Now there'll be more

65
00:03:32.340 --> 00:03:34.990
capacity in that step. Based on demand,

66
00:03:34.990 --> 00:03:39.800
allocate or reallocate as needed your capacity. As workflow

67
00:03:39.800 --> 00:03:43.800
fluctuates, modify your capacity up or down per step.

68
00:03:43.800 --> 00:03:48.220
Move your capacity; you know, your people resources, to different steps.

69
00:03:48.220 --> 00:03:49.210
Yes, I know,

70
00:03:49.210 --> 00:03:52.900
easier said than done, as the phrase goes. You may have the best QA

71
00:03:52.900 --> 00:03:55.440
person doing great work on the validate step,

72
00:03:55.440 --> 00:03:57.880
but you still can't move her to the implement step very

73
00:03:57.880 --> 00:04:02.400
easily; no development skills, say, for example. So this is just not that easy.

74
00:04:02.400 --> 00:04:06.000
So the takeaway here is that you can adjust your work in progress

75
00:04:06.000 --> 00:04:09.090
limits and add or remove resources as you need to,

76
00:04:09.090 --> 00:04:10.950
and if it makes sense to do so.

77
00:04:10.950 --> 00:04:13.610
For me, cross training is essential.

78
00:04:13.610 --> 00:04:21.000
The more the cross training your team has, the more flexibility you will have to move resources.

