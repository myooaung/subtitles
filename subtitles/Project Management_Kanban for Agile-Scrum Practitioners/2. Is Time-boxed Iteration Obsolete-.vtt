WEBVTT
1
00:00:01.140 --> 00:00:06.120
Here's a quote by Corey Ladas. In a well‑regulated pull system,

2
00:00:06.120 --> 00:00:08.860
iterations add no value at all.

3
00:00:08.860 --> 00:00:12.660
Well, if this causes you to sit back and reflect, well, you are not alone.

4
00:00:12.660 --> 00:00:18.210
When I first read that I was like hmm, really? Well,

5
00:00:18.210 --> 00:00:23.140
we've come full circle from our first module, so let me ask the question again.

6
00:00:23.140 --> 00:00:25.440
Is time boxed iteration obsolete?

7
00:00:25.440 --> 00:00:29.100
What do you think now after taking this course? Here are my

8
00:00:29.100 --> 00:00:33.300
thoughts. For me, agile/Scrum was so much more valuable than any

9
00:00:33.300 --> 00:00:36.700
waterfall or traditional development approach, so it is still

10
00:00:36.700 --> 00:00:38.440
near and dear to my heart.

11
00:00:38.440 --> 00:00:41.340
But the more I use and experience kanban, the more I

12
00:00:41.340 --> 00:00:44.260
really appreciated simplicity and clarity.

13
00:00:44.260 --> 00:00:49.290
A kanban team is even more self‑directed than any agile/Scrum team in my view.

14
00:00:49.290 --> 00:00:51.670
So the answer is, well,

15
00:00:51.670 --> 00:00:56.030
it depends. If you have work that fits nicely into a continuous flow,

16
00:00:56.030 --> 00:01:00.220
then yes, the time boxed iteration is dead for you, so use kanban.

17
00:01:00.220 --> 00:01:02.680
If you have very strict milestones and deadlines,

18
00:01:02.680 --> 00:01:06.600
maybe a time boxed iteration may be best, but maybe only because

19
00:01:06.600 --> 00:01:11.540
management has not embraced the philosophy and trust of using kanban. I do

20
00:01:11.540 --> 00:01:14.600
think kanban could work in most app dev situations,

21
00:01:14.600 --> 00:01:19.180
but you need the buy‑in of everyone for its success, your team,

22
00:01:19.180 --> 00:01:23.640
your management, and your customers.

23
00:01:23.640 --> 00:01:26.170
Let's reiterate this axiom of truth.

24
00:01:26.170 --> 00:01:30.790
Shorter lead times have been proven to increase quality. As you can

25
00:01:30.790 --> 00:01:34.390
see in the lower portion of the slide, lead time is defined as a

26
00:01:34.390 --> 00:01:38.020
time from receiving the requirement to delivery. With waterfall,

27
00:01:38.020 --> 00:01:40.690
long lead times, poorer quality.

28
00:01:40.690 --> 00:01:43.510
It might have been months from the time the specs were completed

29
00:01:43.510 --> 00:01:47.470
until the code was delivered. With agile/Scrum, iterations drive

30
00:01:47.470 --> 00:01:51.470
shorter lead times for improved quality for sure. The lead time is

31
00:01:51.470 --> 00:01:52.940
about the length of the sprint,

32
00:01:52.940 --> 00:01:55.600
maybe plus a couple of days here and there for planning and

33
00:01:55.600 --> 00:01:58.970
such. With kanban, the studies have shown that the lead times

34
00:01:58.970 --> 00:02:05.000
are even less than agile/Scrum, and therefore we would expect greater quality and work output.

