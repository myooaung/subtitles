WEBVTT
1
00:00:01.040 --> 00:00:04.230
Now let's see how handling bugs and customer engagement is

2
00:00:04.230 --> 00:00:08.920
different with kanban. Dealing with bugs.

3
00:00:08.920 --> 00:00:12.450
Since kanban is always working with small groups of features and

4
00:00:12.450 --> 00:00:16.380
features are continuously deployed, then when there are bugs found,

5
00:00:16.380 --> 00:00:18.740
either by the QA testers or by end users,

6
00:00:18.740 --> 00:00:22.620
your backlog should be small and easily remediated since the

7
00:00:22.620 --> 00:00:25.340
feature is still current in everyone's mind.

8
00:00:25.340 --> 00:00:28.080
As each feature or task moves through the value stream,

9
00:00:28.080 --> 00:00:32.070
the subsequent step can only pull the item if it is done as

10
00:00:32.070 --> 00:00:34.600
per the done rule as we discussed earlier. This approach

11
00:00:34.600 --> 00:00:36.800
further reduces the number of bugs.

12
00:00:36.800 --> 00:00:39.880
A critical step in the value stream is the validation step.

13
00:00:39.880 --> 00:00:43.480
This step must have not only the necessary testing scenarios,

14
00:00:43.480 --> 00:00:46.840
but also full integrated testing for that feature so the

15
00:00:46.840 --> 00:00:49.040
feature can be fully production ready.

16
00:00:49.040 --> 00:00:51.960
Will you still have bugs when your feature reaches production? Well,

17
00:00:51.960 --> 00:00:52.940
of course you will.

18
00:00:52.940 --> 00:00:56.350
I would like to suggest to you, though, that you will have fewer bugs,

19
00:00:56.350 --> 00:01:00.030
and the ones that you do have should be easier to repair since you

20
00:01:00.030 --> 00:01:04.720
have a solid team of crossâ€‘functional engineers and the time span from

21
00:01:04.720 --> 00:01:09.440
release to bug identification is shorter.

22
00:01:09.440 --> 00:01:12.140
Now let's compare the differences of customer engagement

23
00:01:12.140 --> 00:01:14.920
between waterfall and traditional development approaches

24
00:01:14.920 --> 00:01:16.660
with kanban. With waterfall,

25
00:01:16.660 --> 00:01:20.920
you have a strong engagement during planning, so very early on in the project

26
00:01:20.920 --> 00:01:24.990
lifecycle, customer meetings are held and specifications are written. With

27
00:01:24.990 --> 00:01:30.020
kanban, you engage any time and all the time. Product teams, aka product

28
00:01:30.020 --> 00:01:32.340
owners, are engaged feature by feature.

29
00:01:32.340 --> 00:01:35.700
With waterfall, you have less engagement in implementation.

30
00:01:35.700 --> 00:01:38.730
There may be some engagement at major milestones and certainly

31
00:01:38.730 --> 00:01:41.930
during final release or system pilot. With kanban,

32
00:01:41.930 --> 00:01:45.150
you have the product team members regularly attend the standups to help

33
00:01:45.150 --> 00:01:48.910
clarify requirements and help solve issues. With waterfall during

34
00:01:48.910 --> 00:01:51.340
development, the product is usually brittle,

35
00:01:51.340 --> 00:01:53.810
buggy, and not ready for testing and feedback,

36
00:01:53.810 --> 00:01:57.300
further limiting touchpoints with the customer. And with kanban,

37
00:01:57.300 --> 00:02:00.140
the customers are engaged throughout the entire project, and

38
00:02:00.140 --> 00:02:02.090
because we deliver in small batches,

39
00:02:02.090 --> 00:02:05.260
features are continuously available for customer acceptance.

40
00:02:05.260 --> 00:02:08.000
With waterfall, customers must wait until large,

41
00:02:08.000 --> 00:02:10.570
chunky pieces of the system are totally complete.

42
00:02:10.570 --> 00:02:12.990
With kanban, your team can better react to customer

43
00:02:12.990 --> 00:02:15.640
feedback. Since work in progress is limited,

44
00:02:15.640 --> 00:02:23.000
you can more easily adjust to the customer's demands and receive consistent, timely, and relevant feedback.

