WEBVTT
1
00:00:01.040 --> 00:00:06.740
Now let's talk about kanban feature teams and small batches.

2
00:00:06.740 --> 00:00:08.350
Now, what's a feature team?

3
00:00:08.350 --> 00:00:12.300
They are a group of individuals, maybe three to eight, or something like that,

4
00:00:12.300 --> 00:00:15.590
with expertise ranging from analysis, developers,

5
00:00:15.590 --> 00:00:17.960
user interface designers, quality assurance,

6
00:00:17.960 --> 00:00:20.160
database, you know, etc.

7
00:00:20.160 --> 00:00:22.500
So you may have one analyst, three developers,

8
00:00:22.500 --> 00:00:25.580
one database expert, and one UI expert, for example,

9
00:00:25.580 --> 00:00:28.590
and the team is working on the same product features together.

10
00:00:28.590 --> 00:00:32.030
The collection of team members chosen may be driven by the

11
00:00:32.030 --> 00:00:36.130
feature they are working on; hence, all the talent they need is together.

12
00:00:36.130 --> 00:00:39.590
Now the team sticks together until that feature is done. Try and keep

13
00:00:39.590 --> 00:00:42.150
the team with the same members as much as possible.

14
00:00:42.150 --> 00:00:45.030
A wellâ€‘bonded team is more productive.

15
00:00:45.030 --> 00:00:46.000
Footnote here.

16
00:00:46.000 --> 00:00:48.560
Some members could certainly be on multiple teams.

17
00:00:48.560 --> 00:00:53.660
For example, a database or UI designer expert may be supporting multiple teams,

18
00:00:53.660 --> 00:00:56.860
but the devs and maybe a QA person may not be shared.

19
00:00:56.860 --> 00:01:00.120
The shared resource will work on their task through the entire value

20
00:01:00.120 --> 00:01:03.650
stream before they can work on other teams' tasks.

21
00:01:03.650 --> 00:01:06.510
Each situation may be different based on the skills of

22
00:01:06.510 --> 00:01:11.080
your organization and their availability.

23
00:01:11.080 --> 00:01:13.290
Completing features in small batches.

24
00:01:13.290 --> 00:01:16.050
Probably the biggest change for those building systems in the

25
00:01:16.050 --> 00:01:19.520
traditional model will be to work on small batches rather than

26
00:01:19.520 --> 00:01:21.480
on very large batches of work.

27
00:01:21.480 --> 00:01:25.080
And the amount of work is constrained by work in progress limits

28
00:01:25.080 --> 00:01:27.490
rather than everyone just piling work on you.

29
00:01:27.490 --> 00:01:31.120
If you are a resource in a kanban step, your batch of work are the

30
00:01:31.120 --> 00:01:34.850
cards in the previous step that have been completed. Instead of a chunk

31
00:01:34.850 --> 00:01:38.090
of work in the traditional approach may be lasting weeks or months, a

32
00:01:38.090 --> 00:01:41.780
batch in kanban may last a few days or maybe a week or two. With

33
00:01:41.780 --> 00:01:44.120
kanban, we still do analysis, development,

34
00:01:44.120 --> 00:01:47.340
testing, and deployment, which you are totally familiar with,

35
00:01:47.340 --> 00:01:51.080
but just in very small batches compared to the traditional waterfall

36
00:01:51.080 --> 00:01:53.280
approach where the requirements are completed,

37
00:01:53.280 --> 00:01:57.950
then the development, then the testing, and then the deployment. And lastly,

38
00:01:57.950 --> 00:02:02.290
small batches enables the team to keep up the tempo in the dynamic business

39
00:02:02.290 --> 00:02:07.460
world to better support our customers. With small batches,

40
00:02:07.460 --> 00:02:08.760
we will have bigger gains.

41
00:02:08.760 --> 00:02:10.600
In fact, I think much bigger.

42
00:02:10.600 --> 00:02:13.050
If there are requirement changes midstream,

43
00:02:13.050 --> 00:02:17.390
they usually will only affect a small batch of work, so it makes it easier for

44
00:02:17.390 --> 00:02:20.670
a team to adjust rather than a change happening to a big,

45
00:02:20.670 --> 00:02:23.960
chunky piece of work that may disrupt multiple resources

46
00:02:23.960 --> 00:02:26.740
and increase waste and consume more time.

47
00:02:26.740 --> 00:02:30.560
Small batches should correlate to smaller bugs since each batch

48
00:02:30.560 --> 00:02:33.990
is immediately deployed, and if bugs are found, they are more

49
00:02:33.990 --> 00:02:35.910
readily returned for remediation.

50
00:02:35.910 --> 00:02:40.560
And also, since you just worked on it, it'll be fresh and current in your mind.

51
00:02:40.560 --> 00:02:41.560
That's important.

52
00:02:41.560 --> 00:02:47.500
Also with small batches, we only spec code and validate exactly what you need.

53
00:02:47.500 --> 00:02:51.350
You can imagine writing a ton of specs and test plans in

54
00:02:51.350 --> 00:02:54.300
the old traditional waterfall approach to only find out

55
00:02:54.300 --> 00:02:55.610
that you don't even need them.

56
00:02:55.610 --> 00:02:59.660
Another waste of time. And lastly, with the smaller batches,

57
00:02:59.660 --> 00:03:03.500
we'd get customer feedback in a much timelier fashion and with

58
00:03:03.500 --> 00:03:05.670
greater customer satisfaction.

59
00:03:05.670 --> 00:03:15.000
Now every company has a different resource and challenge, so be flexible and try to adhere to focus feature teams and small batches.

