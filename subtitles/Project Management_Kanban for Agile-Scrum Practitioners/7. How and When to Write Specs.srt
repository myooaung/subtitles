1
00:00:01,140 --> 00:00:05,640
How and when to write specs.

2
00:00:05,640 --> 00:00:08,500
How writing specifications should change.

3
00:00:08,500 --> 00:00:11,130
Typically, in the traditional or waterfall approach,

4
00:00:11,130 --> 00:00:13,790
specifications tend to be more formal and structured.

5
00:00:13,790 --> 00:00:16,750
That is not necessarily wrong, but with Kanban,

6
00:00:16,750 --> 00:00:20,490
we need to be open to less structured and informal specs.

7
00:00:20,490 --> 00:00:24,090
I love grabbing a marker and getting on a white board and being creative.

8
00:00:24,090 --> 00:00:26,530
I still recommend that you capture your work,

9
00:00:26,530 --> 00:00:29,730
take pictures, and add it to your requirements wiki.

10
00:00:29,730 --> 00:00:33,410
This approach may allow to develop specs faster so you have some

11
00:00:33,410 --> 00:00:35,920
amount of the more formal structured specs,

12
00:00:35,920 --> 00:00:39,610
but maybe some of the other details can be performed in a more creative,

13
00:00:39,610 --> 00:00:42,240
informal setting yielding better quality.

14
00:00:42,240 --> 00:00:44,470
Every company will be different in terms of who is

15
00:00:44,470 --> 00:00:46,280
responsible for writing the specs.

16
00:00:46,280 --> 00:00:50,210
If the specs are written and provided to you as a backlog item,

17
00:00:50,210 --> 00:00:53,340
that doesn't mean they are the right level of detail or quality.

18
00:00:53,340 --> 00:00:57,940
Take the prewritten upstream specs into your specified step and then apply

19
00:00:57,940 --> 00:01:01,140
your informal approach to further refine those specs.

20
00:01:01,140 --> 00:01:03,870
That would be a good mix of formal and informal.

21
00:01:03,870 --> 00:01:07,710
By no means am I ever suggesting that specs are not needed ever.

22
00:01:07,710 --> 00:01:10,340
I have spent much of my career writing specs.

23
00:01:10,340 --> 00:01:15,350
It is an art and skill to write just the correct amount of detail to ensure

24
00:01:15,350 --> 00:01:18,400
the development team will have enough to be productive,

25
00:01:18,400 --> 00:01:22,440
not too much, not too little.

26
00:01:22,440 --> 00:01:26,640
On the previous slide, we talked about relaxing the formality of writing specs.

27
00:01:26,640 --> 00:01:30,200
And let's now talk about the timing of specifications writing.

28
00:01:30,200 --> 00:01:33,230
In the waterfall world, the time elapse can be months,

29
00:01:33,230 --> 00:01:37,000
and with Kanban just days between the writing of the specs and code

30
00:01:37,000 --> 00:01:40,980
development, the Kanban approach greatly reduces the time from spec

31
00:01:40,980 --> 00:01:44,840
writing to implementation because of the small batch approach to work

32
00:01:44,840 --> 00:01:46,470
we talked about previously.

33
00:01:46,470 --> 00:01:49,240
In this way, the knowledge of the feature is current,

34
00:01:49,240 --> 00:01:51,940
relevant, and fresh in the minds of the team.

35
00:01:51,940 --> 00:01:54,450
This is a huge productivity gain.

36
00:01:54,450 --> 00:01:58,090
This reduces time span for bug remediation. Just as Kanban

37
00:01:58,090 --> 00:02:01,140
reduces the time between initial writing specs and then

38
00:02:01,140 --> 00:02:03,820
implementing the features as code, so too,

39
00:02:03,820 --> 00:02:07,240
is the time span reduced between discovering bugs and correcting

40
00:02:07,240 --> 00:02:10,380
them. In full transparency, I love writing specs,

41
00:02:10,380 --> 00:02:13,860
figuring out the business drivers, where to add value, and

42
00:02:13,860 --> 00:02:16,770
writing those details to make the life of the developer and

43
00:02:16,770 --> 00:02:18,780
tester as easy as possible.

44
00:02:18,780 --> 00:02:21,400
Traditional waterfall teams may also like to continue

45
00:02:21,400 --> 00:02:23,880
writing detailed heavy specs for each feature,

46
00:02:23,880 --> 00:02:24,990
and that is OK.

47
00:02:24,990 --> 00:02:27,840
Let's not disturb your cadence if that's the case.

48
00:02:27,840 --> 00:02:32,960
One reason for detailed specs is that they originally needed a long shelf life

49
00:02:32,960 --> 00:02:37,850
since the timespan between spec and code was lengthy. As the team gets more

50
00:02:37,850 --> 00:02:41,850
comfortable with short time spans and the team works more close and understands

51
00:02:41,850 --> 00:02:47,440
what it needs to be done in real time, the specs can become lighter. Less specs,

52
00:02:47,440 --> 00:02:50,830
more informal whiteboarding, things like that, but always take

53
00:02:50,830 --> 00:02:54,830
pictures and capture the information and put it in a wiki. Never not

54
00:02:54,830 --> 00:02:57,390
capture or document what the specs should be.

55
00:02:57,390 --> 00:03:00,850
Just as I recommended, electronic boards, using electronic

56
00:03:00,850 --> 00:03:04,010
wiki tools to easily aggregate specs, artifacts,

57
00:03:04,010 --> 00:03:07,540
documents, and especially people will be enormously helpful.

58
00:03:07,540 --> 00:03:10,160
What I'm saying is that, in general, you will find

59
00:03:10,160 --> 00:03:11,970
the specifications will be lighter,

60
00:03:11,970 --> 00:03:15,630
less of them because less will be needed, but that doesn't mean

61
00:03:15,630 --> 00:03:17,740
leave out the important business rules either.

62
00:03:17,740 --> 00:03:20,020
Also, detailed specs are not evil.

63
00:03:20,020 --> 00:03:23,070
Some requirements may take very detailed specs,

64
00:03:23,070 --> 00:03:29,000
so do what is best and, if needed, write those detailed specs. Nothing wrong with that.

