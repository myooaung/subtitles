1
00:00:01,140 --> 00:00:07,030
Now let's talk about handling spikes in the kanban world. Spikes are

2
00:00:07,030 --> 00:00:11,330
typically controlled experiments to provide key or research information or

3
00:00:11,330 --> 00:00:15,910
hopefully to clarify any technical issues by setting aside the complexities

4
00:00:15,910 --> 00:00:19,910
of the production code. You would develop small, isolated experiments when

5
00:00:19,910 --> 00:00:23,000
you need to prove a method or approach or just to seek additional

6
00:00:23,000 --> 00:00:25,190
information and/or clarifications.

7
00:00:25,190 --> 00:00:27,070
For the Agile/Scrum practitioners,

8
00:00:27,070 --> 00:00:32,290
it's basically the same as your spikes. Using spikes in

9
00:00:32,290 --> 00:00:35,120
kanban is no issue at all and is simple,

10
00:00:35,120 --> 00:00:37,480
so spikes work with kanban just fine.

11
00:00:37,480 --> 00:00:40,020
Need a spike? Well, simply make a card.

12
00:00:40,020 --> 00:00:42,710
Place the card in the backlog where it makes the best sense

13
00:00:42,710 --> 00:00:46,290
priority‑wise or work type category‑wise. A spike would

14
00:00:46,290 --> 00:00:48,190
likely be at the top of the backlog,

15
00:00:48,190 --> 00:00:52,940
especially if the spike was inhibiting workflow or was tied to a blocker.

16
00:00:52,940 --> 00:00:56,240
Some spikes are created to solve a blocker issue, therefore. Maybe

17
00:00:56,240 --> 00:00:58,700
the blocker was a very tricky technical challenge,

18
00:00:58,700 --> 00:01:01,630
so you can create a card, tie it to the work item, and

19
00:01:01,630 --> 00:01:03,280
put it at the top of the backlog.

20
00:01:03,280 --> 00:01:05,920
Spikes do not flow through completely.

21
00:01:05,920 --> 00:01:08,370
Spikes are doing research, testing maybe

22
00:01:08,370 --> 00:01:11,100
third‑party APIs, or something like that.

23
00:01:11,100 --> 00:01:14,150
Maybe a spike moves through the specify step and maybe the

24
00:01:14,150 --> 00:01:16,430
implement step and maybe even the validate step.

25
00:01:16,430 --> 00:01:20,530
But at the end, its results do not go into production code.

26
00:01:20,530 --> 00:01:26,000
Maybe you have a swim lane in the deliver step where spikes get archived when complete.

