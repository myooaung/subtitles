WEBVTT
1
00:00:01.180 --> 00:00:05.210
Let's talk about the pros and cons of waterfall so it will provide a better

2
00:00:05.210 --> 00:00:10.340
foundation regarding the benefits of moving to kanban.

3
00:00:10.340 --> 00:00:14.260
Let's talk about the advantages of the traditional waterfall approach.

4
00:00:14.260 --> 00:00:18.540
Waterfall is best used for simple, unchanging projects.

5
00:00:18.540 --> 00:00:22.030
Its linear, rigid nature makes it easy to use and

6
00:00:22.030 --> 00:00:24.300
allows for in‑depth documentation.

7
00:00:24.300 --> 00:00:26.420
Well, not necessarily bad at all.

8
00:00:26.420 --> 00:00:27.960
Here are some other advantages.

9
00:00:27.960 --> 00:00:30.040
It's rather easy to use and manage.

10
00:00:30.040 --> 00:00:32.460
Because the waterfall model follows the same

11
00:00:32.460 --> 00:00:37.620
sequential pattern for each project, it is easy to use and easy to understand.

12
00:00:37.620 --> 00:00:40.190
Waterfall is also a well‑defined model,

13
00:00:40.190 --> 00:00:43.460
and each phase has specific deliverables and reviews,

14
00:00:43.460 --> 00:00:45.840
so it's easy to manage and control.

15
00:00:45.840 --> 00:00:51.840
Discipline is enforced. Every phase in waterfall has a clean start and endpoint,

16
00:00:51.840 --> 00:00:55.690
and it's easy to share progress with stakeholders and customers. By

17
00:00:55.690 --> 00:00:59.190
focusing on requirements and design before writing code,

18
00:00:59.190 --> 00:01:02.720
the team can reduce the risk of a missed deadline.

19
00:01:02.720 --> 00:01:06.470
Also, it requires a well‑documented approach.

20
00:01:06.470 --> 00:01:10.970
Waterfall requires documentation for every phase, resulting in better

21
00:01:10.970 --> 00:01:14.460
understanding of the logic behind the code and tests.

22
00:01:14.460 --> 00:01:18.760
It also leaves a paper trail for future projects or if stakeholders need

23
00:01:18.760 --> 00:01:22.340
to see more detail about a certain phase. And lastly,

24
00:01:22.340 --> 00:01:25.640
waterfall just may work for you in some instances.

25
00:01:25.640 --> 00:01:26.900
But in general,

26
00:01:26.900 --> 00:01:31.920
the capabilities of waterfall have so many shortcomings that using lean,

27
00:01:31.920 --> 00:01:36.250
agile, Scrum, kanban, and other new techniques may greatly

28
00:01:36.250 --> 00:01:39.550
improve your outcomes. Now remember, executives,

29
00:01:39.550 --> 00:01:40.650
CEOs,

30
00:01:40.650 --> 00:01:45.380
chief financial officers need to know things, like when will it be done,

31
00:01:45.380 --> 00:01:48.570
how much will it cost, how much money will I make?

32
00:01:48.570 --> 00:01:52.190
These are all valid and critical questions any quality

33
00:01:52.190 --> 00:01:54.580
executive would ask and need to know.

34
00:01:54.580 --> 00:01:57.940
These are all valid and critical questions any quality

35
00:01:57.940 --> 00:02:00.440
executive would ask and need to know.

36
00:02:00.440 --> 00:02:05.230
So these business drivers from executives also contributed to the design and

37
00:02:05.230 --> 00:02:11.240
usage of waterfall and traditional project management methods.

38
00:02:11.240 --> 00:02:15.110
The pitfalls of the traditional or waterfall approach. As we

39
00:02:15.110 --> 00:02:17.140
know, requirements are a moving target,

40
00:02:17.140 --> 00:02:20.670
either because business is constantly changing or the customers

41
00:02:20.670 --> 00:02:22.750
and users don't always know what they want.

42
00:02:22.750 --> 00:02:26.280
Change is a fact of business life. Always has been,

43
00:02:26.280 --> 00:02:28.390
always will be. So,

44
00:02:28.390 --> 00:02:30.950
given that, how would we be able to write and

45
00:02:30.950 --> 00:02:33.340
complete a full set of requirements?

46
00:02:33.340 --> 00:02:38.380
Is it really possible to do? Likely impossible. There are lots of wasted

47
00:02:38.380 --> 00:02:41.400
resources with traditional waterfall‑ish approaches.

48
00:02:41.400 --> 00:02:43.800
After a few months, well, life happens.

49
00:02:43.800 --> 00:02:44.220
That is,

50
00:02:44.220 --> 00:02:46.820
requirements change, people come and go,

51
00:02:46.820 --> 00:02:48.760
organizations and priorities can change,

52
00:02:48.760 --> 00:02:53.180
which drives rework, thus throwing away code that was developed and tested.

53
00:02:53.180 --> 00:02:57.400
There is much more waste in this scenario than people realize, much more.

54
00:02:57.400 --> 00:03:02.200
All this churn certainly drives an increase in defects and lowers quality,

55
00:03:02.200 --> 00:03:05.240
thus consuming even more resources, labor and money,

56
00:03:05.240 --> 00:03:09.590
and this also means loss of opportunity by missing a window for

57
00:03:09.590 --> 00:03:13.120
a new market or product since those resources were diverted and

58
00:03:13.120 --> 00:03:20.940
even wasted. Earlier in my career, I knew no better, but now I do.

59
00:03:20.940 --> 00:03:23.960
Deciding what to do next with waterfall is not very clear

60
00:03:23.960 --> 00:03:26.440
cut and varies across organizations.

61
00:03:26.440 --> 00:03:28.670
Requirements are developed in one big chunk,

62
00:03:28.670 --> 00:03:32.380
and it is not always clear who gets to work on what or who should do

63
00:03:32.380 --> 00:03:34.890
what part of the requirements. Work is divided,

64
00:03:34.890 --> 00:03:38.290
say, across to development teams for system design and implementation.

65
00:03:38.290 --> 00:03:41.590
Teams are typically not multi‑disciplined either. That is,

66
00:03:41.590 --> 00:03:43.170
the analysts are on one team,

67
00:03:43.170 --> 00:03:47.240
the programmers on another, and QA yet on another team. Then you

68
00:03:47.240 --> 00:03:50.120
needed a change management process to capture new or changing

69
00:03:50.120 --> 00:03:52.540
requirements while the project is underway.

70
00:03:52.540 --> 00:03:57.000
Those changes are then interjected or even forced into the work efforts,

71
00:03:57.000 --> 00:04:01.740
causing, at times, considerable stress, maybe even chaos, and quality issues.

72
00:04:01.740 --> 00:04:05.410
I know, I have lived through this. Not fun. The change in

73
00:04:05.410 --> 00:04:08.240
requirements are captured and managed within a repository,

74
00:04:08.240 --> 00:04:09.670
a requirements repository.

75
00:04:09.670 --> 00:04:12.440
And this is if you are lucky. Most times requirements

76
00:04:12.440 --> 00:04:14.840
management is really mismanagement.

77
00:04:14.840 --> 00:04:16.460
And when development is done,

78
00:04:16.460 --> 00:04:19.900
then quality assurance performs validation against the requirements.

79
00:04:19.900 --> 00:04:23.070
And then, once again, handed off to production.

80
00:04:23.070 --> 00:04:26.090
Now everything here is a handoff and thrown over the wall,

81
00:04:26.090 --> 00:04:30.000
so to speak. Not the most productive process, as you can see.

