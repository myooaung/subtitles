WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.170
in this chapter,

00:00:01.170 --> 00:00:03.550
we're going to talk about any hurt and snapping.

00:00:03.550 --> 00:00:04.710
So far,

00:00:04.710 --> 00:00:09.610
we had some understanding on how having net map support your class with the relational

00:00:09.610 --> 00:00:10.650
database table.

00:00:10.650 --> 00:00:16.570
But how is it going to act when we have opposed your plans that uses Java's inheritance?

00:00:16.570 --> 00:00:18.540
For example,

00:00:18.540 --> 00:00:21.250
we have boss class and the employees class.

00:00:21.250 --> 00:00:26.600
And if you notice we have certain properties in both these classes that are common,

00:00:26.600 --> 00:00:28.060
for example,

00:00:28.060 --> 00:00:31.870
regardless off a person is the boss or an employee,

00:00:31.870 --> 00:00:35.450
the boat will have name and age.

00:00:35.450 --> 00:00:39.480
So instead of defining those properties in both these classes,

00:00:39.480 --> 00:00:40.660
what I'd like to do,

00:00:40.660 --> 00:00:44.330
Rather is create another class a person class,

00:00:44.330 --> 00:00:48.860
and it would hold all those common properties like name and age,

00:00:48.860 --> 00:00:52.910
and later I'm going to extend the person class in both these classes,

00:00:52.910 --> 00:00:54.400
and I'm going to persist.

00:00:54.400 --> 00:00:54.480
A.

00:00:54.480 --> 00:00:57.260
The boss are the employees now,

00:00:57.260 --> 00:00:59.450
depending on the configuration that you said,

00:00:59.450 --> 00:01:03.100
having it is going to treat this port your classes differently.

00:01:03.100 --> 00:01:06.990
So let's take a look at a very simple example off the same.

00:01:06.990 --> 00:01:11.580
So what I have here is the employee class and the boss class,

00:01:11.580 --> 00:01:17.210
and the only properties that I have in both these classes is the identify rare,

00:01:17.210 --> 00:01:19.450
and it would be generated automatically.

00:01:19.450 --> 00:01:21.090
Now.

00:01:21.090 --> 00:01:25.690
What's new here is this person class and as I've already mentioned,

00:01:25.690 --> 00:01:29.250
is just simply going to hold like name and age.

00:01:29.250 --> 00:01:30.070
Now,

00:01:30.070 --> 00:01:31.180
as your expect,

00:01:31.180 --> 00:01:36.230
have also extended both employees and boss with the person class,

00:01:36.230 --> 00:01:44.830
just as you see in here and in our main logic,

00:01:44.830 --> 00:01:46.660
I just created an instance off.

00:01:46.660 --> 00:01:50.050
Employees tried to give it a name an age.

00:01:50.050 --> 00:01:51.130
Similarly,

00:01:51.130 --> 00:01:52.580
we have the boss object.

00:01:52.580 --> 00:01:53.520
And then finally,

00:01:53.520 --> 00:01:56.710
I'm just trying to save these objects into the database.

00:01:56.710 --> 00:02:01.450
It's on this program and see how things will work.

00:02:01.450 --> 00:02:10.810
And if you go to the database,

00:02:10.810 --> 00:02:19.250
we got a couple off tables populated Select star from Boss.

00:02:19.250 --> 00:02:21.020
Did you notice something?

00:02:21.020 --> 00:02:22.990
It did not persist.

00:02:22.990 --> 00:02:24.260
Name an age.

00:02:24.260 --> 00:02:26.850
Same is the case with employees as well.

00:02:26.850 --> 00:02:30.580
So what's going on?

00:02:30.580 --> 00:02:36.780
Let's go back when you're dealing with inheritance in hibernate,

00:02:36.780 --> 00:02:42.710
you have to explicitly mention how you want hibernate to deal with your inheritance.

00:02:42.710 --> 00:02:49.760
So what we want right now is we don't want to persist the person class and for the very

00:02:49.760 --> 00:02:53.850
reason I didn't provide the at the rate entity annotation in here.

00:02:53.850 --> 00:02:55.500
If I would do so,

00:02:55.500 --> 00:03:01.310
then having it will actually attempt to create a table that corresponds to person Poggio.

00:03:01.310 --> 00:03:02.990
But I don't want that to happen.

00:03:02.990 --> 00:03:04.260
But what I want,

00:03:04.260 --> 00:03:04.790
though,

00:03:04.790 --> 00:03:07.240
is I want mapping off.

00:03:07.240 --> 00:03:08.600
This property is done,

00:03:08.600 --> 00:03:10.780
but not the class itself.

00:03:10.780 --> 00:03:18.680
So how can you convey that to hibernate his by providing the following annotation mapped

00:03:18.680 --> 00:03:24.320
super class by specifying the sanitation you're telling have been eight.

00:03:24.320 --> 00:03:29.420
That although this class in itself is not going to have a representation off a database

00:03:29.420 --> 00:03:30.000
table,

00:03:30.000 --> 00:03:35.270
this class is actually dependent class off other Po Joe's,

00:03:35.270 --> 00:03:37.850
which will be persisted into a database.

00:03:37.850 --> 00:03:38.760
So now,

00:03:38.760 --> 00:03:44.800
having it will actually treat all the properties in here as if they're part off these two

00:03:44.800 --> 00:03:48.270
classes that inherited Now,

00:03:48.270 --> 00:03:49.450
if you're on the program,

00:03:49.450 --> 00:03:52.440
things will work as expected,

00:03:52.440 --> 00:03:58.550
and sure enough,

00:03:58.550 --> 00:04:00.210
pretty evil and good.

00:04:00.210 --> 00:04:04.350
So that's about it.

00:04:04.350 --> 00:04:05.470
See you soon.

