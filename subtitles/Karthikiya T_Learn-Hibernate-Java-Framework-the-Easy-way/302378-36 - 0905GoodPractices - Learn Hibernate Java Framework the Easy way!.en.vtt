WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.480
okay.

00:00:00.480 --> 00:00:04.380
We had some understanding on how having it walks with inheritance.

00:00:04.380 --> 00:00:09.130
Now let us take a look at some of the good practices we can follow while working with

00:00:09.130 --> 00:00:09.960
inheritance.

00:00:09.960 --> 00:00:10.540
First,

00:00:10.540 --> 00:00:13.600
let's talk about this term polymorphic behavior.

00:00:13.600 --> 00:00:16.750
So what I have here is the pretty much the same example.

00:00:16.750 --> 00:00:17.780
I mean,

00:00:17.780 --> 00:00:20.370
I'm still using table per class strategy.

00:00:20.370 --> 00:00:27.200
Now what I have here is I'm just trying to create an instance off all these three classes

00:00:27.200 --> 00:00:29.230
that are in the hierarchy,

00:00:29.230 --> 00:00:31.200
and I'm just trying to save all of them.

00:00:31.200 --> 00:00:34.920
And here is how it looks in the database,

00:00:34.920 --> 00:00:36.450
just as you'd expect.

00:00:36.450 --> 00:00:39.130
But let's take a look at what's going to happen.

00:00:39.130 --> 00:00:46.250
But I try to display the person object so in my cord while I'm doing here is I'm just

00:00:46.250 --> 00:00:50.970
trying to retrieve all the person objects into a list,

00:00:50.970 --> 00:00:54.150
and then I'm just trying to print that list of objects.

00:00:54.150 --> 00:00:55.040
Now,

00:00:55.040 --> 00:00:57.560
this is not only going to print the person object,

00:00:57.560 --> 00:01:04.050
but also it's up classes or sub objects that includes employees in boss as well.

00:01:04.050 --> 00:01:08.600
And here is they find a lot put and,

00:01:08.600 --> 00:01:09.470
as you can see,

00:01:09.470 --> 00:01:11.700
were able to display all of them.

00:01:11.700 --> 00:01:13.580
Now that is partly Morford behavior,

00:01:13.580 --> 00:01:15.480
because in the scales,

00:01:15.480 --> 00:01:18.650
person object is having a polymorphic behavior.

00:01:18.650 --> 00:01:19.390
I mean,

00:01:19.390 --> 00:01:20.880
a person could be a boss,

00:01:20.880 --> 00:01:23.740
or he could also be an employee.

00:01:23.740 --> 00:01:27.250
But sometimes we just want to display the person object,

00:01:27.250 --> 00:01:29.260
not it's child objects.

00:01:29.260 --> 00:01:30.150
In that case,

00:01:30.150 --> 00:01:32.150
you can switch to other strategies.

00:01:32.150 --> 00:01:38.520
One example that I can think off is you can have a uni directional 1 to 1 mapping from the

00:01:38.520 --> 00:01:39.290
parent class,

00:01:39.290 --> 00:01:42.850
which will be person class to one of these child classes.

00:01:42.850 --> 00:01:46.260
Their bacon Just display the parent object.

00:01:46.260 --> 00:01:49.010
Are the child object as you need,

00:01:49.010 --> 00:01:50.200
or,

00:01:50.200 --> 00:01:50.920
alternatively,

00:01:50.920 --> 00:01:53.420
concerns to other inheritance strategies.

00:01:53.420 --> 00:01:55.070
You have to take that call.

00:01:55.070 --> 00:01:56.310
Now.

00:01:56.310 --> 00:01:58.030
Let's talk about inheritance.

00:01:58.030 --> 00:01:59.990
Worse is composition Well,

00:01:59.990 --> 00:02:05.260
It's basically the difference between hazard relation and easier relation.

00:02:05.260 --> 00:02:08.650
So in here I have employed class and the boss class,

00:02:08.650 --> 00:02:11.010
and the boat will have address.

00:02:11.010 --> 00:02:17.110
Now we can see that employee has the address and boss has address.

00:02:17.110 --> 00:02:20.950
We can't say that employees address or bosses address,

00:02:20.950 --> 00:02:22.700
so it has a relation.

00:02:22.700 --> 00:02:25.060
When you have a has their relation,

00:02:25.060 --> 00:02:31.750
it makes lot of sense to use a map entity than other inheritance strategies On the other

00:02:31.750 --> 00:02:32.290
hand,

00:02:32.290 --> 00:02:34.480
if this was a person class,

00:02:34.480 --> 00:02:42.070
then what we have here is and easier relationship with this two entities that it makes

00:02:42.070 --> 00:02:44.840
sense to use other inheritance strategies like,

00:02:44.840 --> 00:02:45.770
for example,

00:02:45.770 --> 00:02:47.470
joined inheritance,

00:02:47.470 --> 00:02:48.170
stategy,

00:02:48.170 --> 00:02:48.950
etcetera.

00:02:48.950 --> 00:02:52.210
Because if you use mapped into in this case,

00:02:52.210 --> 00:02:58.620
then you would end up feeding all the details off person in each one off these tables and

00:02:58.620 --> 00:03:00.550
thereby at little point of time.

00:03:00.550 --> 00:03:03.850
If you'd like to retrieve all the person details,

00:03:03.850 --> 00:03:05.820
you have to write a very complex query,

00:03:05.820 --> 00:03:11.080
and it's going to drain bit off a performance so we don't want that.

00:03:11.080 --> 00:03:13.140
So depending on your need,

00:03:13.140 --> 00:03:14.780
you have to take the call.

00:03:14.780 --> 00:03:18.290
Let's talk about the single table.

00:03:18.290 --> 00:03:24.840
One of the good reasons why you want to use the stategy single table stategy is it will

00:03:24.840 --> 00:03:28.490
help you with better performance because of one good reason.

00:03:28.490 --> 00:03:31.750
Everything will be represented into a single table.

00:03:31.750 --> 00:03:34.010
So there,

00:03:34.010 --> 00:03:37.600
by when you're trying to get the details from the database,

00:03:37.600 --> 00:03:40.070
or when you're trying to do something with these objects,

00:03:40.070 --> 00:03:45.510
then there's no need of performing this complex squares like you're seeing in here.

00:03:45.510 --> 00:03:46.800
So here,

00:03:46.800 --> 00:03:49.250
in case off other inherit and strategies.

00:03:49.250 --> 00:03:55.860
Women of performing complex SQL queries like unions joins etcetera.

00:03:55.860 --> 00:03:59.080
They often demand quite a bit off performance.

00:03:59.080 --> 00:04:01.630
And for high end applications,

00:04:01.630 --> 00:04:04.430
this might be a concern in some cases.

00:04:04.430 --> 00:04:06.600
So in that case,

00:04:06.600 --> 00:04:08.540
we can use this,

00:04:08.540 --> 00:04:10.880
and the queries are going to be pretty simple,

00:04:10.880 --> 00:04:15.650
maybe with just a single set up query you can do to the data that you want.

00:04:15.650 --> 00:04:17.640
But on the downside dough,

00:04:17.640 --> 00:04:20.870
when you have all those columns mixed up,

00:04:20.870 --> 00:04:27.040
you can't really put annul constrained because some of these columns are going to have now

00:04:27.040 --> 00:04:27.850
values.

00:04:27.850 --> 00:04:33.250
And we've seen that in our example when we had talked about the single table stategy.

00:04:33.250 --> 00:04:35.770
If you have a new child glass introduced,

00:04:35.770 --> 00:04:38.420
then table would change accordingly.

00:04:38.420 --> 00:04:43.290
There's going to be new column or columns added to the table,

00:04:43.290 --> 00:04:48.820
and just off the objects may not be supporting those columns so it can cause problems in

00:04:48.820 --> 00:04:51.130
terms off data consistency.

00:04:51.130 --> 00:04:55.430
So you have to take a call on though you want to compromise on data.

00:04:55.430 --> 00:05:00.850
Consistency are the performance and accordingly you to choose the stategy.

00:05:00.850 --> 00:05:02.810
All right,

00:05:02.810 --> 00:05:04.900
I hope it helps See you soon

