WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.400
whenever you enable the second level cache.

00:00:06.400 --> 00:00:06.720
A.

00:00:06.720 --> 00:00:12.380
You have the flexibility to choose the conferences strategy for each and every entity that

00:00:12.380 --> 00:00:13.260
is catchable.

00:00:13.260 --> 00:00:18.700
We have a handful off options available to choose from and went to choose the one the

00:00:18.700 --> 00:00:19.720
picture needs.

00:00:19.720 --> 00:00:23.550
So let us try to explore all the list off options available.

00:00:23.550 --> 00:00:24.840
The first off,

00:00:24.840 --> 00:00:26.680
which is read only stategy.

00:00:26.680 --> 00:00:29.950
When you said the entity to read only Stategy,

00:00:29.950 --> 00:00:35.850
then that means we are sure that there won't be any updates on that entity in future.

00:00:35.850 --> 00:00:37.400
As an example,

00:00:37.400 --> 00:00:42.650
say that you're trying to store all the list of countries available in the world so that

00:00:42.650 --> 00:00:44.460
table would have couple of feels.

00:00:44.460 --> 00:00:46.510
One is the ad and fire,

00:00:46.510 --> 00:00:48.810
and the other is the name of the country.

00:00:48.810 --> 00:00:52.580
It is very unlikely that somebody would change the name of the country,

00:00:52.580 --> 00:00:55.730
and so it's very unlikely that you want to make it.

00:00:55.730 --> 00:00:56.710
It's in the table,

00:00:56.710 --> 00:01:03.720
so it's safe to assume that we're going to perform only read on the operations on the table

00:01:03.720 --> 00:01:03.720
.

00:01:03.720 --> 00:01:05.120
That being said,

00:01:05.120 --> 00:01:09.230
we will be able to add the objects into the table and retrieve them,

00:01:09.230 --> 00:01:14.930
but not make any updates and guess if you're trying to make any updates on this entity than

00:01:14.930 --> 00:01:15.340
happen,

00:01:15.340 --> 00:01:17.080
it will throw an exception.

00:01:17.080 --> 00:01:19.570
That's because when happen,

00:01:19.570 --> 00:01:24.470
it fetches the objects off this entity from the database and stores it in the second level

00:01:24.470 --> 00:01:25.150
cache A.

00:01:25.150 --> 00:01:29.790
It stores it in such manner that we can't make any updates to it.

00:01:29.790 --> 00:01:34.240
And in here we have said this stategy to read only,

00:01:34.240 --> 00:01:41.190
and that means we can perform any updates on our employees objects if I try to do that.

00:01:41.190 --> 00:01:46.850
So in here of just 50 employees object and then I'm trying to make it.

00:01:46.850 --> 00:01:47.540
It's to it.

00:01:47.540 --> 00:01:49.450
Let us try to run this program,

00:01:49.450 --> 00:01:52.550
and he would see an exception.

00:01:52.550 --> 00:01:55.240
And sure enough,

00:01:55.240 --> 00:01:56.460
we have an exception.

00:01:56.460 --> 00:01:57.190
And that,

00:01:57.190 --> 00:02:00.450
say's Can't Update read only object.

00:02:00.450 --> 00:02:05.520
So that explains so clearly in case off employees,

00:02:05.520 --> 00:02:07.910
this is not the strategy that point to choose.

00:02:07.910 --> 00:02:08.810
So let us start,

00:02:08.810 --> 00:02:11.850
explore others and see which one fits in here.

00:02:11.850 --> 00:02:14.090
The second strategy is read,

00:02:14.090 --> 00:02:14.590
write,

00:02:14.590 --> 00:02:19.750
and this is apt in case if you're going to do a lot off updates in your table.

00:02:19.750 --> 00:02:27.010
This option also ensures data consistency when multiple transactions are trying to play

00:02:27.010 --> 00:02:28.220
with the same object.

00:02:28.220 --> 00:02:33.660
Let's say that you have couple of transactions T one and T two and they both are trying to

00:02:33.660 --> 00:02:37.440
access the same object with this read write strategy.

00:02:37.440 --> 00:02:40.360
The first transaction that gets the object Well,

00:02:40.360 --> 00:02:41.450
let quite a lock,

00:02:41.450 --> 00:02:45.120
and the other transaction cannot access its data in the cachet,

00:02:45.120 --> 00:02:48.090
but rather it would access directly from the database,

00:02:48.090 --> 00:02:54.500
thereby it would get the latest data from the database in case of the sounds confusing.

00:02:54.500 --> 00:02:59.250
Then just keep in mind that when you're trying to make a lot off update in your entity,

00:02:59.250 --> 00:03:01.840
then you want to use the strategy.

00:03:01.840 --> 00:03:07.970
And clearly this is a strategy that went to use and gives off our employees entity.

00:03:07.970 --> 00:03:13.310
Next comes the non strict read write,

00:03:13.310 --> 00:03:15.150
which is equal in to read right,

00:03:15.150 --> 00:03:22.000
But the difference is it does not really ensure any kind of data consistency.

00:03:22.000 --> 00:03:24.270
That's because in this case,

00:03:24.270 --> 00:03:30.020
there won't be any locking mechanism are the operations is performed in Essen,

00:03:30.020 --> 00:03:31.050
Cronus manner,

00:03:31.050 --> 00:03:34.480
and so there is no surety of the data consistency.

00:03:34.480 --> 00:03:39.980
You want to use the stategy only when you know that you're going to make minimal amount off

00:03:39.980 --> 00:03:44.870
updates on the entity and even in case off get inconsistency,

00:03:44.870 --> 00:03:46.420
you can cope with it.

00:03:46.420 --> 00:03:51.760
Has an example say that you have a table called address and you're storing all the

00:03:51.760 --> 00:03:53.370
addresses off employees.

00:03:53.370 --> 00:03:59.070
It's pretty rare that you want to make changes to that table because not very often

00:03:59.070 --> 00:04:00.770
everybody changes their address.

00:04:00.770 --> 00:04:06.540
And also it's very unlikely that couple of transactions want to make updates on the same

00:04:06.540 --> 00:04:07.690
employees object.

00:04:07.690 --> 00:04:09.580
But even if that happens,

00:04:09.580 --> 00:04:13.460
the data inconsistency shouldn't lead to a serious problem.

00:04:13.460 --> 00:04:16.250
But you may argue that to be safe,

00:04:16.250 --> 00:04:18.470
we better use the read write strategy.

00:04:18.470 --> 00:04:19.070
Well,

00:04:19.070 --> 00:04:20.170
the answer is no.

00:04:20.170 --> 00:04:21.450
In some cases,

00:04:21.450 --> 00:04:23.330
this might be the ideal option,

00:04:23.330 --> 00:04:26.350
because if you chose this stategy,

00:04:26.350 --> 00:04:28.150
then there is the additional overhead off,

00:04:28.150 --> 00:04:34.360
ensuring the data consistency and thereby it will degrade the performance a little bit.

00:04:34.360 --> 00:04:38.200
So you don't want to use the stategy unless you really need it.

00:04:38.200 --> 00:04:39.910
The last off,

00:04:39.910 --> 00:04:43.230
which is the transactional stategy.

00:04:43.230 --> 00:04:48.740
This would come into picture when you're using JT A or Java transaction FBI,

00:04:48.740 --> 00:04:53.950
which is well the Java two Enterprise edition specifications for managing the transactions

00:04:53.950 --> 00:04:53.950
.

00:04:53.950 --> 00:04:59.490
It's an optional thing that you can use with hibernate and guess if you're using and your

00:04:59.490 --> 00:05:01.290
performing lot of transactions,

00:05:01.290 --> 00:05:04.100
then this might be the ideal option.

00:05:04.100 --> 00:05:09.900
So the data from the database would be fetched in such manner that it would be ideal for

00:05:09.900 --> 00:05:11.550
performing transactions.

00:05:11.550 --> 00:05:12.690
Otherwise,

00:05:12.690 --> 00:05:16.640
you can go with the other strategies we also have on most allergy.

00:05:16.640 --> 00:05:18.360
It's not really a stategy.

00:05:18.360 --> 00:05:19.470
It's an option.

00:05:19.470 --> 00:05:21.160
And it is none.

00:05:21.160 --> 00:05:26.590
That means they're just simply dissembling an entity from being part off the cash.

00:05:26.590 --> 00:05:32.750
You can see all that is stuff options in here and here they are.

00:05:32.750 --> 00:05:35.850
All right,

00:05:35.850 --> 00:05:37.390
See you soon.

