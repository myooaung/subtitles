WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.540
in this video,

00:00:01.540 --> 00:00:06.850
we're going to talk about the following methods that are part off decision interface forces

00:00:06.850 --> 00:00:06.850
.

00:00:06.850 --> 00:00:08.830
Talk about these two methods in here.

00:00:08.830 --> 00:00:10.410
Save and persist.

00:00:10.410 --> 00:00:18.520
The job off these two methods is same is to transition the transient object to a persistent

00:00:18.520 --> 00:00:19.050
object.

00:00:19.050 --> 00:00:19.660
I mean,

00:00:19.660 --> 00:00:21.150
if you go back to the diagram,

00:00:21.150 --> 00:00:25.250
so we have our transient object and once we call session,

00:00:25.250 --> 00:00:28.650
not save and passes transient object as an argument.

00:00:28.650 --> 00:00:36.080
The job off that mattered at the save or persist is to transform this object into a

00:00:36.080 --> 00:00:37.250
persistent object.

00:00:37.250 --> 00:00:38.970
And once it does that,

00:00:38.970 --> 00:00:40.320
as of all the D mentioned,

00:00:40.320 --> 00:00:43.480
it will not represent the actual row in the table.

00:00:43.480 --> 00:00:44.430
So now,

00:00:44.430 --> 00:00:49.770
whatever the edit that you make in this object using its garrison centers have been,

00:00:49.770 --> 00:00:52.850
it will take care of updating the same in the database.

00:00:52.850 --> 00:00:55.850
But all those changes will not be saved immediately.

00:00:55.850 --> 00:01:00.660
They would be saved in some temporary location in a persistent context.

00:01:00.660 --> 00:01:06.320
And only after we perform ater transaction that comet or sessions are close.

00:01:06.320 --> 00:01:10.650
Will the hibernate save the details into the actual database?

00:01:10.650 --> 00:01:12.450
Let's see how it's done.

00:01:12.450 --> 00:01:16.010
So here we have pretty much the same court as previous.

00:01:16.010 --> 00:01:20.400
We're just using this method save to save this object,

00:01:20.400 --> 00:01:22.870
but it's not really saving the object.

00:01:22.870 --> 00:01:26.860
But it's just converting the strands and object to a persistent object.

00:01:26.860 --> 00:01:27.450
So now,

00:01:27.450 --> 00:01:28.770
after we do so,

00:01:28.770 --> 00:01:30.990
we can actually make some measures to this object.

00:01:30.990 --> 00:01:31.560
For example,

00:01:31.560 --> 00:01:37.740
I'm going to change the age set age 200 years.

00:01:37.740 --> 00:01:38.460
And now,

00:01:38.460 --> 00:01:39.270
after a perform,

00:01:39.270 --> 00:01:39.750
a ter,

00:01:39.750 --> 00:01:40.560
Come it.

00:01:40.560 --> 00:01:42.200
Our sessions are close.

00:01:42.200 --> 00:01:45.790
Have been It will persist all those details into a database.

00:01:45.790 --> 00:01:48.750
So let's on the program and see how things will go.

00:01:48.750 --> 00:01:59.540
So now if you go to the database,

00:01:59.540 --> 00:02:05.050
it would notice that we have an entry added with age 100.

00:02:05.050 --> 00:02:11.550
I'm going toe change this age to something else.

00:02:11.550 --> 00:02:13.870
Maybe 200.

00:02:13.870 --> 00:02:15.650
Let's be practical.

00:02:15.650 --> 00:02:19.550
That said it to 56 and on the program,

00:02:19.550 --> 00:02:29.450
and something would get reflected in here as well.

00:02:29.450 --> 00:02:34.100
So the point that I want to make here is the save is not really saving to the database,

00:02:34.100 --> 00:02:38.700
but rather it is converting the transient object into persistent object.

00:02:38.700 --> 00:02:40.440
And once it does happen,

00:02:40.440 --> 00:02:45.280
it will treat that object as the actual representation off the table row and whatever the

00:02:45.280 --> 00:02:50.750
changes that you make here is like you're actually performing those edits in the database

00:02:50.750 --> 00:02:56.920
and transaction dot com It will flush all the details in the temporary memory to the actual

00:02:56.920 --> 00:02:58.450
database will happen.

00:02:58.450 --> 00:03:00.150
It will actually take her off all that.

00:03:00.150 --> 00:03:01.320
So now,

00:03:01.320 --> 00:03:02.340
instead off save.

00:03:02.340 --> 00:03:06.400
You can also use the method persist,

00:03:06.400 --> 00:03:17.580
and it will do the same job that's on the program and see how things will go.

00:03:17.580 --> 00:03:22.950
And sure enough,

00:03:22.950 --> 00:03:24.900
everything worked well.

00:03:24.900 --> 00:03:28.080
So what is the different between saving?

00:03:28.080 --> 00:03:28.850
Persist.

00:03:28.850 --> 00:03:30.000
Well,

00:03:30.000 --> 00:03:34.900
save is not really part off the JPs specification,

00:03:34.900 --> 00:03:40.060
but we do have a method persist in JPs pacification.

00:03:40.060 --> 00:03:41.090
So just in case,

00:03:41.090 --> 00:03:44.070
if you're planning to motor different or I'm tool,

00:03:44.070 --> 00:03:47.550
then using processed would make little sense.

00:03:47.550 --> 00:03:50.350
You don't have to make too many changes in your code.

00:03:50.350 --> 00:03:54.050
Another difference is that when you call the same method,

00:03:54.050 --> 00:03:59.550
it is actually going to return the identify of that object or of that role,

00:03:59.550 --> 00:04:02.650
whereas positive returns wide.

00:04:02.650 --> 00:04:04.450
So let me diss quickly,

00:04:04.450 --> 00:04:08.240
demonstrate the same so we'll go here,

00:04:08.240 --> 00:04:09.750
make this to save.

00:04:09.750 --> 00:04:12.100
Get it off this For the time being,

00:04:12.100 --> 00:04:21.250
I'm going to put thesis out statement in here and I just tried to run the program.

00:04:21.250 --> 00:04:23.510
Let's put some kind off,

00:04:23.510 --> 00:04:26.050
some kind off a string in here,

00:04:26.050 --> 00:04:34.490
I de ese or whatever and run the program.

00:04:34.490 --> 00:04:50.750
And here it is.

00:04:50.750 --> 00:04:53.020
It has printed that into fire.

00:04:53.020 --> 00:04:55.100
So in some cases,

00:04:55.100 --> 00:04:58.110
it might be useful that you take their into fire.

00:04:58.110 --> 00:04:59.830
In that case,

00:04:59.830 --> 00:05:03.250
you can use save instead off persist.

00:05:03.250 --> 00:05:06.530
So essentially these two methods are same.

00:05:06.530 --> 00:05:08.190
They perform the same job,

00:05:08.190 --> 00:05:10.740
but the different terms off,

00:05:10.740 --> 00:05:15.280
how they're implemented and the type of founder that the return

