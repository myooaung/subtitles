WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.100
in this video,

00:00:01.100 --> 00:00:07.220
we're going to take a look at how we can manage one too many relation using hibernate if

00:00:07.220 --> 00:00:09.150
you take a look at this example Diagram.

00:00:09.150 --> 00:00:12.170
We have Boss Table and the employee table,

00:00:12.170 --> 00:00:15.850
and these two tables are having one too many relation.

00:00:15.850 --> 00:00:16.540
I mean,

00:00:16.540 --> 00:00:19.350
single boss can have multiple employees,

00:00:19.350 --> 00:00:20.950
but it's not the other way.

00:00:20.950 --> 00:00:24.640
A single employer will not have more than one boss,

00:00:24.640 --> 00:00:26.880
at least for the sake of this example,

00:00:26.880 --> 00:00:27.970
Let us assume so.

00:00:27.970 --> 00:00:30.100
So in this example,

00:00:30.100 --> 00:00:35.410
if you notice we're trying to map these two tables or create relation between these two

00:00:35.410 --> 00:00:37.710
tables isn't the foreign key.

00:00:37.710 --> 00:00:41.090
So in here we have a couple of employees,

00:00:41.090 --> 00:00:42.780
Rahul and Bob,

00:00:42.780 --> 00:00:46.010
and they both are pointing to the boss i D,

00:00:46.010 --> 00:00:49.580
which is 1002 which corresponds to Sunder.

00:00:49.580 --> 00:00:50.740
So understand.

00:00:50.740 --> 00:00:52.550
There we have Rahul and Bob,

00:00:52.550 --> 00:00:58.280
but none of these employees will correspond to multiple bosses.

00:00:58.280 --> 00:00:59.260
Very obvious.

00:00:59.260 --> 00:01:06.000
So in this diagram we have Bastable as the parent table and the employee has the child

00:01:06.000 --> 00:01:07.630
table as it has formed.

00:01:07.630 --> 00:01:08.050
Can it?

00:01:08.050 --> 00:01:09.830
And so in Arhab,

00:01:09.830 --> 00:01:10.040
innit?

00:01:10.040 --> 00:01:10.850
Example.

00:01:10.850 --> 00:01:16.320
We're going to have a couple off persistent classes when it's for boss and the other is for

00:01:16.320 --> 00:01:17.010
employees.

00:01:17.010 --> 00:01:18.030
And still,

00:01:18.030 --> 00:01:19.970
this is one to many relationship.

00:01:19.970 --> 00:01:21.240
We want tohave,

00:01:21.240 --> 00:01:25.050
the mapping done from the boss persistent class.

00:01:25.050 --> 00:01:26.420
So we're going to specify,

00:01:26.420 --> 00:01:30.250
are one too many annotation inside the boss poor system class.

00:01:30.250 --> 00:01:30.950
And then,

00:01:30.950 --> 00:01:31.660
later on,

00:01:31.660 --> 00:01:35.250
we would be able to instance she ate the boss class.

00:01:35.250 --> 00:01:39.350
And then we're going to feed an object off employees.

00:01:39.350 --> 00:01:41.050
But how it's done,

00:01:41.050 --> 00:01:42.050
Let's take a look at it.

00:01:42.050 --> 00:01:44.970
So here we have the boss,

00:01:44.970 --> 00:01:46.780
persistent Glass and the employees.

00:01:46.780 --> 00:01:50.370
And as of all the dimension since this is one too many relation,

00:01:50.370 --> 00:01:56.650
we're going to have to have that mapping done from the parent class to the child class.

00:01:56.650 --> 00:01:59.770
But the key thing to note here,

00:01:59.770 --> 00:02:02.150
since it's one to many relationship,

00:02:02.150 --> 00:02:02.830
you know,

00:02:02.830 --> 00:02:09.990
toe hold that many objects you can't specify a data type that holds a single value.

00:02:09.990 --> 00:02:17.210
You need to use a collection something like set or list etcetera in this case arm using set

00:02:17.210 --> 00:02:17.210
,

00:02:17.210 --> 00:02:23.090
and have also mentioned that the set can have elements off type employees and along with

00:02:23.090 --> 00:02:23.250
that,

00:02:23.250 --> 00:02:24.950
we also have this annotations,

00:02:24.950 --> 00:02:26.630
which is one too many,

00:02:26.630 --> 00:02:31.860
and this is a key annotation that will do the magic and target.

00:02:31.860 --> 00:02:39.560
And it is going to point to the employee class and gas getting will come into picture when

00:02:39.560 --> 00:02:46.080
you run the program and join Table is going to join a new column to the employee table,

00:02:46.080 --> 00:02:47.480
which will be the foreign key.

00:02:47.480 --> 00:02:52.210
And the name of that column is going to be this boss eyed.

00:02:52.210 --> 00:02:55.150
Whatever you specify in here and this maps do.

00:02:55.150 --> 00:02:56.530
B.

00:02:56.530 --> 00:02:56.630
I.

00:02:56.630 --> 00:02:56.960
D.

00:02:56.960 --> 00:03:03.370
Column off Boss Table and Employed Class is pretty straightforward.

00:03:03.370 --> 00:03:06.650
You don't have any fancy annotations there.

00:03:06.650 --> 00:03:13.450
And in Artois Java program Celestic will get the insert logic.

00:03:13.450 --> 00:03:16.590
And as you would expect,

00:03:16.590 --> 00:03:22.040
we're going to create couple off employees and then we're going to add them into a set off

00:03:22.040 --> 00:03:22.850
employs.

00:03:22.850 --> 00:03:24.670
And finally,

00:03:24.670 --> 00:03:26.980
we're going to create the boss.

00:03:26.980 --> 00:03:29.000
They're supposed to be boss,

00:03:29.000 --> 00:03:32.850
just a good naming convention there.

00:03:32.850 --> 00:03:37.110
So inside the boss object to the constructor.

00:03:37.110 --> 00:03:39.100
I'm going to pass the name of the balls,

00:03:39.100 --> 00:03:43.370
his age and the list off employees who work under him,

00:03:43.370 --> 00:03:46.250
and I'm going to save this object.

00:03:46.250 --> 00:03:49.450
Rest is all as usual,

00:03:49.450 --> 00:03:53.420
so that's on the program and see how this works and pray or to this.

00:03:53.420 --> 00:03:57.710
I've actually cleaned up all the tables from the database of manually deleted all the

00:03:57.710 --> 00:04:01.200
tables just to keep things clean before we run this program.

00:04:01.200 --> 00:04:04.370
So it's on the program and see how it works.

00:04:04.370 --> 00:04:14.680
And sure enough,

00:04:14.680 --> 00:04:18.700
it worked pretty well just as expected.

00:04:18.700 --> 00:04:26.480
And if you go to the gun soul slash DT after display all the tables that are present.

00:04:26.480 --> 00:04:28.760
So let's see what's inside the boss table.

00:04:28.760 --> 00:04:44.240
Select Star from Boss Select Star from Boss Pretty good and then select star from employ

00:04:44.240 --> 00:04:47.180
and the result is as expected.

00:04:47.180 --> 00:04:55.350
So we have the foreign key and it points to this entered in here in the bath stable.

00:04:55.350 --> 00:05:01.550
I must take a look at the other operations that were performing me to stop this program.

00:05:01.550 --> 00:05:11.340
Media's quickly uncommitted this So in here I'm just trying to get the details,

00:05:11.340 --> 00:05:13.590
and the logic is pretty straightforward.

00:05:13.590 --> 00:05:18.720
So it's in here,

00:05:18.720 --> 00:05:19.750
get details.

00:05:19.750 --> 00:05:22.200
Or rather,

00:05:22.200 --> 00:05:28.830
we want to display the boss details and for this purpose have actually created are over it

00:05:28.830 --> 00:05:33.570
in the two string method to display that object in some meaningful fashion.

00:05:33.570 --> 00:05:44.330
And I'm just trying to fetch the boss object from here and then I'm trying to displayed as

00:05:44.330 --> 00:05:45.100
simple as that.

00:05:45.100 --> 00:05:51.990
Let me just also uncommitted this piece off gored to delete the boss entry.

00:05:51.990 --> 00:06:00.490
And since we have said the cascading type two all this will not only delete the employees

00:06:00.490 --> 00:06:04.040
with i d or Boss with i d one,

00:06:04.040 --> 00:06:12.450
but also its corresponding employees first run the program and see how things will work.

00:06:12.450 --> 00:06:20.460
So as you notice,

00:06:20.460 --> 00:06:25.360
but able to display the boss details in here and,

00:06:25.360 --> 00:06:28.660
uh so here,

00:06:28.660 --> 00:06:32.930
actually the list of employees is displayed in draw from.

00:06:32.930 --> 00:06:38.560
So if you have the two string method overridden in employ class as well,

00:06:38.560 --> 00:06:40.050
let me just quickly do that.

00:06:40.050 --> 00:06:49.290
So I go to the end and I'm going to make use off Eclipse feature to gender.

00:06:49.290 --> 00:06:57.590
The court for us has some blood that looks of the file and on the program again.

00:06:57.590 --> 00:06:59.580
Let me close this.

00:06:59.580 --> 00:07:00.450
Let me stop that.

00:07:00.450 --> 00:07:06.750
And sure enough,

00:07:06.750 --> 00:07:14.650
you have everything displayed in user friendly fashion and then later we're trying to

00:07:14.650 --> 00:07:15.640
delete the interests.

00:07:15.640 --> 00:07:24.320
And if you notice you don't have anyone inside the stables and obviously I don't have to

00:07:24.320 --> 00:07:29.550
mention that if you based on the cascading time that you set in here,

00:07:29.550 --> 00:07:31.550
things will change.

00:07:31.550 --> 00:07:35.850
Forget it off this,

00:07:35.850 --> 00:07:37.750
then cascading will not happen.

00:07:37.750 --> 00:07:43.620
Then you have to manually perform a couple off tasks to delete the entry from the employee

00:07:43.620 --> 00:07:43.980
table.

00:07:43.980 --> 00:07:46.590
And then you would delete the entry from the boss table.

00:07:46.590 --> 00:07:48.440
Okay,

00:07:48.440 --> 00:07:49.530
that's pretty much it.

00:07:49.530 --> 00:07:52.980
But the only thing that I feel is missing is the update operation.

00:07:52.980 --> 00:07:56.870
Can you try to figure out how it can be done?

00:07:56.870 --> 00:07:58.150
It's pretty straightforward.

00:07:58.150 --> 00:08:03.700
So let me just quickly replace this code for delete and do.

00:08:03.700 --> 00:08:11.450
An update I'm going to do is to set his age 200 years.

00:08:11.450 --> 00:08:12.320
Well,

00:08:12.320 --> 00:08:15.350
just for the sake of this example and instruct delete,

00:08:15.350 --> 00:08:20.450
I'm going to say update,

00:08:20.450 --> 00:08:24.370
and that's all there is to it.

00:08:24.370 --> 00:08:28.250
And after this,

00:08:28.250 --> 00:08:37.270
it's also display displayed the the boss.

00:08:37.270 --> 00:08:40.080
And then you'll see what sub dated.

00:08:40.080 --> 00:08:40.510
Really?

00:08:40.510 --> 00:08:46.350
It's on the program and sure enough,

00:08:46.350 --> 00:08:47.150
Okay,

00:08:47.150 --> 00:08:50.000
here the ages still shown as 45.

00:08:50.000 --> 00:08:54.050
But if you go to a database and see what's happening there,

00:08:54.050 --> 00:08:56.850
the age is updated.

00:08:56.850 --> 00:08:57.890
Now,

00:08:57.890 --> 00:09:01.650
Can you guess what's going wrong in here without code?

00:09:01.650 --> 00:09:05.350
Have you figured that out?

00:09:05.350 --> 00:09:06.630
Hold it.

00:09:06.630 --> 00:09:08.770
Let me let me tell you.

00:09:08.770 --> 00:09:11.650
It's very easy to fix.

00:09:11.650 --> 00:09:12.650
There isn't why.

00:09:12.650 --> 00:09:12.940
Still,

00:09:12.940 --> 00:09:19.630
the age was shown as 45 is because when you're trying to display this particular data off,

00:09:19.630 --> 00:09:26.090
employees would still have the values qualified because we haven't yet committed the

00:09:26.090 --> 00:09:27.040
transaction.

00:09:27.040 --> 00:09:35.520
So let me just try to display the details right after we commit the transaction and let's

00:09:35.520 --> 00:09:36.650
on the program again.

00:09:36.650 --> 00:09:43.550
And this time he would see age as 100.

00:09:43.550 --> 00:09:45.180
Isn't that beautiful?

00:09:45.180 --> 00:09:46.700
All right,

00:09:46.700 --> 00:09:48.050
that's it on this video,

00:09:48.050 --> 00:09:48.750
see assume.

