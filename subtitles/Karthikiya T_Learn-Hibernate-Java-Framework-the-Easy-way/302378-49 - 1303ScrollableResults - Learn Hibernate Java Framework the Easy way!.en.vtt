WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.840
so we had.

00:00:04.840 --> 00:00:09.260
One problem with our earlier approach is that we're fighting too many queries to get the

00:00:09.260 --> 00:00:09.950
records,

00:00:09.950 --> 00:00:14.170
so the solution to that problem is scalable results.

00:00:14.170 --> 00:00:20.480
So what scalable results would do for us is it's just going to fire one single query,

00:00:20.480 --> 00:00:22.850
and that is to fetch all the records.

00:00:22.850 --> 00:00:27.120
And those records will not be stored in the cache memory.

00:00:27.120 --> 00:00:28.250
If that's the case,

00:00:28.250 --> 00:00:31.520
we would get out off every exception right of a.

00:00:31.520 --> 00:00:35.480
But rather the results would be stored in the RAM memory.

00:00:35.480 --> 00:00:37.850
And depending on the logic that you have,

00:00:37.850 --> 00:00:40.560
those objects would be fished accordingly.

00:00:40.560 --> 00:00:43.570
So screw herbal is like a traitor,

00:00:43.570 --> 00:00:48.030
and it would allow us to navigate through all the list of records one by one.

00:00:48.030 --> 00:00:49.450
By calling this method.

00:00:49.450 --> 00:00:50.880
Results start next.

00:00:50.880 --> 00:00:55.000
I can access that particular object by using the statement.

00:00:55.000 --> 00:00:57.700
So here I'm trying to fish that employ object,

00:00:57.700 --> 00:01:03.160
and then I'm just simply trying to print them so this would essentially fetch from the

00:01:03.160 --> 00:01:03.860
memory,

00:01:03.860 --> 00:01:05.340
not from the database.

00:01:05.340 --> 00:01:08.480
So this is not going to fight a database query,

00:01:08.480 --> 00:01:11.130
so that would result in improving the performance.

00:01:11.130 --> 00:01:15.540
But when you try to keep retrieving those objects from the memory and store them in the

00:01:15.540 --> 00:01:16.480
cache memory.

00:01:16.480 --> 00:01:19.810
Eventually it would result in out off memory exception.

00:01:19.810 --> 00:01:21.670
So you have to take care off,

00:01:21.670 --> 00:01:24.020
flushing the memory once a while,

00:01:24.020 --> 00:01:30.970
just as we're doing in here for every 10 the cards were trying to flush to keep things

00:01:30.970 --> 00:01:31.550
updated.

00:01:31.550 --> 00:01:35.850
And then we're trying to clear the cache memory as simple as that.

00:01:35.850 --> 00:01:40.100
So if I'm trying to make any updates on this object,

00:01:40.100 --> 00:01:45.350
then it would make sense to flush before you clear the cache.

00:01:45.350 --> 00:01:49.390
So that's on the program and see the result.

00:01:49.390 --> 00:01:56.250
And sure enough,

00:01:56.250 --> 00:02:01.280
we have some updates done on those objects.

00:02:01.280 --> 00:02:02.830
And if you go to the database,

00:02:02.830 --> 00:02:07.270
things got reflected.

00:02:07.270 --> 00:02:07.690
Well,

00:02:07.690 --> 00:02:12.110
okay,

00:02:12.110 --> 00:02:19.950
let's try to analyze the output a little bit to go back.

00:02:19.950 --> 00:02:28.450
So here we have the select query,

00:02:28.450 --> 00:02:31.000
and once we performed,

00:02:31.000 --> 00:02:32.850
select off all the employees.

00:02:32.850 --> 00:02:37.850
Amusing sits out statement to display the current employees,

00:02:37.850 --> 00:02:39.960
and that's the result off this,

00:02:39.960 --> 00:02:44.450
after which we performed the update on that object,

00:02:44.450 --> 00:02:51.530
and eventually we're trying to flush every once a while for every 10 the cards and every

00:02:51.530 --> 00:02:55.490
time you flush those objects in the cache memory would get updated,

00:02:55.490 --> 00:03:02.320
so you should be able to see 10 updates in a sequence that go at a time.

00:03:02.320 --> 00:03:06.850
And every time you try to look through your printing the current object,

00:03:06.850 --> 00:03:08.900
Tassan Blouse that.

00:03:08.900 --> 00:03:14.100
But the key thing to note here is you don't find any other select queries is just one

00:03:14.100 --> 00:03:16.750
single celeb query that does the magic.

00:03:16.750 --> 00:03:18.590
So that's about it.

00:03:18.590 --> 00:03:20.650
Hope it makes sense.

00:03:20.650 --> 00:03:24.750
And I'm going to make this project available for you to download.

00:03:24.750 --> 00:03:26.900
So inside the project,

00:03:26.900 --> 00:03:31.630
you should be able to locate these two files test or Javan test to Dar Java.

00:03:31.630 --> 00:03:35.580
And this file has a scalable results.

00:03:35.580 --> 00:03:38.360
All right,

00:03:38.360 --> 00:03:39.050
see you soon.

