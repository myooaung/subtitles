WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.130
in this video,

00:00:01.130 --> 00:00:04.490
we're going to take a look at how we can map Java collections,

00:00:04.490 --> 00:00:05.350
inhabit Nate,

00:00:05.350 --> 00:00:06.790
and specifically,

00:00:06.790 --> 00:00:12.790
we're going to talk about the collections list and set we've already taken.

00:00:12.790 --> 00:00:16.450
Look at how we can manage relations in have been eight,

00:00:16.450 --> 00:00:22.980
and in order to maintain the relations we had used collections like List and Set.

00:00:22.980 --> 00:00:28.540
But sometimes you may not want to maintain relations between tables,

00:00:28.540 --> 00:00:32.070
especially if you're using simple types like integer,

00:00:32.070 --> 00:00:32.580
string,

00:00:32.580 --> 00:00:33.350
etcetera.

00:00:33.350 --> 00:00:34.700
For example.

00:00:34.700 --> 00:00:40.970
Let's say that I wanted to also populate the nicknames associated with each boss.

00:00:40.970 --> 00:00:42.220
In that case,

00:00:42.220 --> 00:00:44.950
I'm not using any specialized objects in here.

00:00:44.950 --> 00:00:49.860
I'm just going to be using list off strings as simple as that.

00:00:49.860 --> 00:00:51.620
So in this case,

00:00:51.620 --> 00:00:59.240
I can just simply define the list as you see in here and with the following annotations and

00:00:59.240 --> 00:01:04.370
in order to tell the have been eight that we're using the basic type like string way to

00:01:04.370 --> 00:01:07.520
provide the sanitation element collection.

00:01:07.520 --> 00:01:09.210
And in addition to that,

00:01:09.210 --> 00:01:13.670
we've also provided this particular annotation collection table,

00:01:13.670 --> 00:01:21.430
and this is going to be a new table where we can see the mapping between the boss and his

00:01:21.430 --> 00:01:23.090
or her nicknames,

00:01:23.090 --> 00:01:27.150
and we've also specified the sanitation joined columns.

00:01:27.150 --> 00:01:34.650
And in here we just specified one column and disk responds to the boss i D.

00:01:34.650 --> 00:01:36.320
And finally,

00:01:36.320 --> 00:01:40.750
we've also defined a column for this field,

00:01:40.750 --> 00:01:47.040
which is going to be with the name nickname Silver Illustrated on the program.

00:01:47.040 --> 00:01:48.510
And then you'll understand better.

00:01:48.510 --> 00:01:55.510
How things will go in the database and in the main class spread is straightforward.

00:01:55.510 --> 00:02:01.350
I created a couple off nicknames and added the mass part off one boss entity,

00:02:01.350 --> 00:02:03.010
our boss object,

00:02:03.010 --> 00:02:04.000
sir,

00:02:04.000 --> 00:02:07.630
the boss object committed the transaction and then the get details matter.

00:02:07.630 --> 00:02:11.350
I'm just trying to simply get the boss object and trying to display.

00:02:11.350 --> 00:02:15.650
This will result in calling the toasting matter off the boss object.

00:02:15.650 --> 00:02:21.270
Hence a little Babel to see what has been populated in the database.

00:02:21.270 --> 00:02:23.320
So let's on the program.

00:02:23.320 --> 00:02:30.640
And sure enough,

00:02:30.640 --> 00:02:33.410
we have that part subject displayed.

00:02:33.410 --> 00:02:36.550
But let's go to database and see what's happening there.

00:02:36.550 --> 00:02:43.250
So we have these two tables populated.

00:02:43.250 --> 00:02:54.650
Let's see what's inside the boss table and also in the other names table.

00:02:54.650 --> 00:02:57.630
And sure enough,

00:02:57.630 --> 00:03:04.150
by this we can say that boss with I d one is having the following nicknames,

00:03:04.150 --> 00:03:06.270
So that's about it.

00:03:06.270 --> 00:03:11.150
And if you want to use the collection typeset,

00:03:11.150 --> 00:03:13.050
you can do it as well.

00:03:13.050 --> 00:03:14.230
So instead,

00:03:14.230 --> 00:03:18.550
off list he would you set as simple as that.

00:03:18.550 --> 00:03:21.450
And of course,

00:03:21.450 --> 00:03:22.850
you have to take care off,

00:03:22.850 --> 00:03:26.150
replacing the same everywhere else,

00:03:26.150 --> 00:03:31.970
and same should go in here as well.

00:03:31.970 --> 00:03:38.940
And it would use something like Hash set,

00:03:38.940 --> 00:03:39.850
for instance,

00:03:39.850 --> 00:03:44.790
save the file and run the program.

00:03:44.790 --> 00:03:51.470
The result would be same as the previous one.

00:03:51.470 --> 00:03:54.080
No difference or whatsoever.

00:03:54.080 --> 00:03:59.660
But if you want to accomplish the same by using external tanks,

00:03:59.660 --> 00:04:02.550
then you can use the following tags.

00:04:02.550 --> 00:04:05.940
And this is pretty much the same stuff.

00:04:05.940 --> 00:04:09.550
What we have defined as part off annotations in here,

00:04:09.550 --> 00:04:15.400
pretty self explanatory and the difference between two.

00:04:15.400 --> 00:04:20.540
I'm in the list and the set is basically the difference between these two types of

00:04:20.540 --> 00:04:21.950
collections in Java.

00:04:21.950 --> 00:04:23.010
Instead,

00:04:23.010 --> 00:04:24.930
you can't have duplicate entries,

00:04:24.930 --> 00:04:30.660
and I think in our case it would make more sense to use set because it's not possible that

00:04:30.660 --> 00:04:34.190
you want to write the same name twice,

00:04:34.190 --> 00:04:36.860
all right,

00:04:36.860 --> 00:04:38.230
that helps easily

