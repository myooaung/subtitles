WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.700
we had already talked about first level cachet,

00:00:06.700 --> 00:00:08.660
and when I said First level Kasher,

00:00:08.660 --> 00:00:11.030
that means we have another level off cash.

00:00:11.030 --> 00:00:12.400
A present in have been eight,

00:00:12.400 --> 00:00:15.050
and that is second level cache.

00:00:15.050 --> 00:00:17.530
But unlike fossil cachet,

00:00:17.530 --> 00:00:20.890
which comes by default and you can't disable it,

00:00:20.890 --> 00:00:26.480
second level cache ER has multiple implementations and you have the option to choose one.

00:00:26.480 --> 00:00:30.910
The one that I'm going to use and also the one which is very popular,

00:00:30.910 --> 00:00:33.170
is yet cash.

00:00:33.170 --> 00:00:39.930
So we're going to leverage the functionality off second level cache A by using yet cachet

00:00:39.930 --> 00:00:41.080
implementation.

00:00:41.080 --> 00:00:47.530
But the main difference between these two cachet is that the first level caches coped with

00:00:47.530 --> 00:00:48.350
in a session,

00:00:48.350 --> 00:00:54.000
and all the objects that are going to reside in the festival cachet will have the life off

00:00:54.000 --> 00:00:54.720
a session.

00:00:54.720 --> 00:00:56.850
But we're our second level cache,

00:00:56.850 --> 00:01:02.830
scoped within the session factory and all the objects that are going to be present in

00:01:02.830 --> 00:01:09.760
second level cache A can be accessed or visible to all the sessions that come under that

00:01:09.760 --> 00:01:10.740
session factory.

00:01:10.740 --> 00:01:16.250
So let's take a look at a very simple scenario off persisting a data and then retrieving it

00:01:16.250 --> 00:01:16.250
.

00:01:16.250 --> 00:01:21.310
Let's say that you're trying to store the employed data so you would create a session and

00:01:21.310 --> 00:01:22.080
you would call session,

00:01:22.080 --> 00:01:24.560
not save to save the employee details.

00:01:24.560 --> 00:01:32.030
So a copy off objects data will be copied not only in the first level cachet but also to

00:01:32.030 --> 00:01:35.750
the second level cache re before it gets persisted into the database.

00:01:35.750 --> 00:01:39.270
And then when you're trying to retrieve that object from the same session,

00:01:39.270 --> 00:01:42.540
since that object details is present in the first level,

00:01:42.540 --> 00:01:43.580
Kasher itself,

00:01:43.580 --> 00:01:50.210
the object or its details or its data will be retrieved from this festival Kashgari that

00:01:50.210 --> 00:01:51.550
corresponds to the obsession.

00:01:51.550 --> 00:01:55.450
But if you're trying to access the same object from another session,

00:01:55.450 --> 00:01:59.700
then since that object is not present in it festival cachet,

00:01:59.700 --> 00:02:03.150
it will go and take a look at the second level cache.

00:02:03.150 --> 00:02:04.770
And in our example,

00:02:04.770 --> 00:02:06.820
that object is indeed present.

00:02:06.820 --> 00:02:12.590
So it would fetch the object data from the second level cache so it doesn't have to go all

00:02:12.590 --> 00:02:17.450
the way to the database and fire a query to get the employee details.

00:02:17.450 --> 00:02:22.850
So this is going to affect positivity in terms off application performance.

00:02:22.850 --> 00:02:27.950
So let us take a look at steps and mold and configuring the second level cache A.

00:02:27.950 --> 00:02:28.550
Also,

00:02:28.550 --> 00:02:30.750
we're going to take a look at the very simple example.

00:02:30.750 --> 00:02:33.450
So here are the steps first off,

00:02:33.450 --> 00:02:36.930
which is to include all the libraries that are required.

00:02:36.930 --> 00:02:38.170
And in our case,

00:02:38.170 --> 00:02:41.560
since we want to use the each kasher implementation,

00:02:41.560 --> 00:02:45.530
we're going to include the following dependence in or maven project.

00:02:45.530 --> 00:02:47.060
And once you include that,

00:02:47.060 --> 00:02:51.880
do make sure that you may have an update the project so that the respect to libraries will

00:02:51.880 --> 00:02:55.240
be present in the repository and optionally.

00:02:55.240 --> 00:02:59.960
If you'd like to get a little bit off control on the second level cache A or if you'd like

00:02:59.960 --> 00:03:02.750
to make changes to the default configurations,

00:03:02.750 --> 00:03:05.490
then you can also include the following dependency,

00:03:05.490 --> 00:03:10.070
which will enable you to do some customization on the second level cache.

00:03:10.070 --> 00:03:11.900
And when you're including this,

00:03:11.900 --> 00:03:15.470
you can also include the sex Immel file with the exact same name,

00:03:15.470 --> 00:03:20.250
yet cachet where he would provide all the list off configurations required,

00:03:20.250 --> 00:03:23.240
and in addition to that,

00:03:23.240 --> 00:03:27.080
in order to actually enable second level cache in your application,

00:03:27.080 --> 00:03:32.180
you have to add the following properties in your Cabinet XML file or,

00:03:32.180 --> 00:03:34.430
if you're using Cabinet properties file,

00:03:34.430 --> 00:03:37.460
Then you have toe add the following key value pairs.

00:03:37.460 --> 00:03:40.690
These two are essentially same.

00:03:40.690 --> 00:03:46.990
So by this property or just enabling the second level cache A and you're providing here the

00:03:46.990 --> 00:03:49.150
implementation off second level cache A.

00:03:49.150 --> 00:03:50.730
And finally,

00:03:50.730 --> 00:03:55.110
we're also enabling acquitted cash which will take a look at in later chapters.

00:03:55.110 --> 00:04:01.770
When we talk about Cabinet query language and finally for all the entities that you want to

00:04:01.770 --> 00:04:04.230
be part off the second level cache A.

00:04:04.230 --> 00:04:10.300
You have to provide the following annotation catchable that will make these entities

00:04:10.300 --> 00:04:12.600
qualify for second level cashing.

00:04:12.600 --> 00:04:15.150
And in addition to that,

00:04:15.150 --> 00:04:20.650
you can also provide the conferences stategy by providing the sanitation.

00:04:20.650 --> 00:04:22.360
We're going to talk about conferences,

00:04:22.360 --> 00:04:23.400
stategy option,

00:04:23.400 --> 00:04:24.820
incoming videos.

00:04:24.820 --> 00:04:28.600
So let's go back to eclipse and take a look at a very simple example.

00:04:28.600 --> 00:04:33.880
So I have the exact same code as previous.

00:04:33.880 --> 00:04:39.960
The only difference is I have now added this particular statement and the just print total

00:04:39.960 --> 00:04:44.500
number of hits to second level cache memory and off course.

00:04:44.500 --> 00:04:48.050
Whatever the things that I had mentioned as part off this file,

00:04:48.050 --> 00:04:50.600
I have incorporated them.

00:04:50.600 --> 00:04:52.620
We got dependencies in the bomb.

00:04:52.620 --> 00:04:58.800
The XML I also have those configurations set in the Cabinet file or if you have a different

00:04:58.800 --> 00:04:59.200
name,

00:04:59.200 --> 00:05:00.150
whatever it is.

00:05:00.150 --> 00:05:03.050
And in addition to that,

00:05:03.050 --> 00:05:05.610
in the only entity class that we have,

00:05:05.610 --> 00:05:09.050
employees have included these two annotations,

00:05:09.050 --> 00:05:10.910
and that's all there is to it.

00:05:10.910 --> 00:05:15.160
Now let's take a look at what's going to happen when we run this program.

00:05:15.160 --> 00:05:16.360
So first of all,

00:05:16.360 --> 00:05:20.880
we're calling this method test within which were just simply persisting the employee

00:05:20.880 --> 00:05:23.150
details just as you see in here.

00:05:23.150 --> 00:05:27.900
So while this employee is getting persisted,

00:05:27.900 --> 00:05:35.150
those details will be copied to possible cachet of the session and then into second level

00:05:35.150 --> 00:05:37.710
cache A and then into the database.

00:05:37.710 --> 00:05:40.650
So since we closed on this session right here,

00:05:40.650 --> 00:05:46.380
we've also lost the first level Kasher that corresponds to the session and in or test to

00:05:46.380 --> 00:05:49.230
method are treated another session,

00:05:49.230 --> 00:05:51.710
and then I'm trying to access that object.

00:05:51.710 --> 00:05:52.500
Or rather,

00:05:52.500 --> 00:05:54.610
I'm trying to load that object now.

00:05:54.610 --> 00:05:56.050
In our previous example,

00:05:56.050 --> 00:06:00.810
this has resulted in a select query to the database.

00:06:00.810 --> 00:06:07.000
So we got that object from the database as it was not present in the first level cachet off

00:06:07.000 --> 00:06:07.800
this session.

00:06:07.800 --> 00:06:13.160
But this time since the objects did has also saved in the second level cache A.

00:06:13.160 --> 00:06:19.960
This instruction would result in retreating the employee data from the second level cache,

00:06:19.960 --> 00:06:23.450
and there is no need to send a request to a database.

00:06:23.450 --> 00:06:28.270
And while we're trying to retrieve the data from second level cache A,

00:06:28.270 --> 00:06:31.370
it will also copy it in the first level.

00:06:31.370 --> 00:06:33.300
Cash off the session.

00:06:33.300 --> 00:06:35.300
And when we do session,

00:06:35.300 --> 00:06:36.040
not evict,

00:06:36.040 --> 00:06:37.390
we provide the object.

00:06:37.390 --> 00:06:41.630
Then it's going to remove the object from the session cachet,

00:06:41.630 --> 00:06:43.270
but not from the second level cache.

00:06:43.270 --> 00:06:49.870
So even this instruction would fetch object details from the second level cache.

00:06:49.870 --> 00:06:51.450
So ultimately,

00:06:51.450 --> 00:06:57.500
I'm expecting number off entity fetch count to zero that there is not going to be any data

00:06:57.500 --> 00:06:59.150
that gets fresh from the database.

00:06:59.150 --> 00:07:02.860
And this should result in value to,

00:07:02.860 --> 00:07:04.000
as they're going to be,

00:07:04.000 --> 00:07:05.470
a couple of hits,

00:07:05.470 --> 00:07:07.440
two second level cache.

00:07:07.440 --> 00:07:09.800
Let's on the program and see the result.

00:07:09.800 --> 00:07:16.550
And sure enough,

00:07:16.550 --> 00:07:18.850
we have the expected output.

00:07:18.850 --> 00:07:20.320
All right,

00:07:20.320 --> 00:07:21.850
we'll continue from next video

