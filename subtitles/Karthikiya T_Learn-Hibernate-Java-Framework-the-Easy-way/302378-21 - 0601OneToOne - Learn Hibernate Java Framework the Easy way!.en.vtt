WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.240
in this chapter,

00:00:01.240 --> 00:00:06.500
we're going to talk about how we can maintain relations between tables isn't happen.

00:00:06.500 --> 00:00:06.860
Eight.

00:00:06.860 --> 00:00:12.890
Now I'm assuming that you know some of the database concepts like 1 to 1 relation one too

00:00:12.890 --> 00:00:13.950
many relation,

00:00:13.950 --> 00:00:15.010
many to wonder,

00:00:15.010 --> 00:00:17.700
elation and many to many relation.

00:00:17.700 --> 00:00:19.050
If you don't,

00:00:19.050 --> 00:00:20.220
that's fine as well.

00:00:20.220 --> 00:00:23.760
I'll try to give a real world example before I jump in tow.

00:00:23.760 --> 00:00:24.820
Happen it example.

00:00:24.820 --> 00:00:28.800
But in this video we're going to focus on 1 to 1 relation.

00:00:28.800 --> 00:00:33.490
And here is an example of the same little to have the employee table.

00:00:33.490 --> 00:00:39.320
And we also have the employees contact table where we'll try to store the employees.

00:00:39.320 --> 00:00:40.550
Contact details.

00:00:40.550 --> 00:00:41.280
Now,

00:00:41.280 --> 00:00:43.550
what kind of relation do we have in here?

00:00:43.550 --> 00:00:49.510
It's 1 to 1 because each employee can have only one contact detail,

00:00:49.510 --> 00:00:56.350
and each and every contact detail in here will have only one employee associated with it.

00:00:56.350 --> 00:00:57.380
For example,

00:00:57.380 --> 00:01:01.160
you can't have the same email i d from more than one employee.

00:01:01.160 --> 00:01:08.030
And why is worser You can't have an employee who is having multiple contact details?

00:01:08.030 --> 00:01:08.470
Well,

00:01:08.470 --> 00:01:13.530
you may argue that an individual can have multiple email ladies and multiple four numbers,

00:01:13.530 --> 00:01:16.450
but assume that I'm going to add another column in here,

00:01:16.450 --> 00:01:22.150
which takes the passport number off each and every individual or the employees.

00:01:22.150 --> 00:01:22.810
Then,

00:01:22.810 --> 00:01:23.800
in that case,

00:01:23.800 --> 00:01:27.150
every employee would have only one contact detail.

00:01:27.150 --> 00:01:32.330
And it's not possible that an individual can hold multiple passports if that's the case and

00:01:32.330 --> 00:01:33.690
you're doing something illegal.

00:01:33.690 --> 00:01:37.620
So what we have here is essentially Oneto one relation.

00:01:37.620 --> 00:01:43.870
One drawing here will have relation with one row in the employee contact table.

00:01:43.870 --> 00:01:45.350
As simple as that.

00:01:45.350 --> 00:01:46.660
Now,

00:01:46.660 --> 00:01:50.350
if you want to do the same with structured query language,

00:01:50.350 --> 00:01:55.270
then here are some of the instructions that you will execute in your database.

00:01:55.270 --> 00:01:57.700
You would create board this tables,

00:01:57.700 --> 00:02:03.000
and it would alter the employees contact able to add the foreign key.

00:02:03.000 --> 00:02:04.830
I mean,

00:02:04.830 --> 00:02:06.350
if you take a look at this table,

00:02:06.350 --> 00:02:08.740
we have one column in here,

00:02:08.740 --> 00:02:10.020
and this is the column,

00:02:10.020 --> 00:02:11.450
which is the foreign key,

00:02:11.450 --> 00:02:17.050
and that's what will help us relate this table with this table.

00:02:17.050 --> 00:02:20.540
So for each and every contact that we're going to add,

00:02:20.540 --> 00:02:25.900
we're also going to populate the employee I ity toe whom this contact belong to,

00:02:25.900 --> 00:02:30.460
so that we can maintain the relationship between these two tables.

00:02:30.460 --> 00:02:35.150
And that's how we basically maintained relations between tables is by using foreign key.

00:02:35.150 --> 00:02:37.540
And we had talked about all of that.

00:02:37.540 --> 00:02:38.030
You know,

00:02:38.030 --> 00:02:39.350
did the best course anyway.

00:02:39.350 --> 00:02:41.750
So going back.

00:02:41.750 --> 00:02:44.530
So once you create the constraint,

00:02:44.530 --> 00:02:48.900
the foreign key constraint by referencing to the employee table,

00:02:48.900 --> 00:02:51.290
he can just keep inserting values.

00:02:51.290 --> 00:02:55.960
You can either inserted row inside the employee table and by doing so,

00:02:55.960 --> 00:02:59.500
not really associating an employee with a contact detail.

00:02:59.500 --> 00:03:03.950
Maybe wanted top graders contact details at later point off time or whatever.

00:03:03.950 --> 00:03:07.050
But by just executing this piece off instruction,

00:03:07.050 --> 00:03:11.110
you're just adding the employee without the contact details.

00:03:11.110 --> 00:03:14.750
But when you're trying to add an entry into the contact table,

00:03:14.750 --> 00:03:19.090
it will not only provide the contact details like email idea and for number,

00:03:19.090 --> 00:03:26.210
but also it the point out the employees off whom is this contact belonged to?

00:03:26.210 --> 00:03:28.110
So you'd also populate the employee.

00:03:28.110 --> 00:03:28.750
I D.

00:03:28.750 --> 00:03:29.740
In here.

00:03:29.740 --> 00:03:33.950
Now let's see how we can accomplish the same with Harbor Nate,

00:03:33.950 --> 00:03:35.680
and for this purpose,

00:03:35.680 --> 00:03:41.190
I'm actually going to use the exact same code from our initial example.

00:03:41.190 --> 00:03:42.000
I mean,

00:03:42.000 --> 00:03:48.160
I'm just going to make some amendments to our first hibernate application to get this

00:03:48.160 --> 00:03:48.770
working.

00:03:48.770 --> 00:03:55.750
So the only thing that I'm going to add is Guess what a persistent class?

00:03:55.750 --> 00:04:01.150
And thats for another table that we have introduced the employees contact.

00:04:01.150 --> 00:04:03.750
So let's see how it's done.

00:04:03.750 --> 00:04:06.210
So everything is as usual,

00:04:06.210 --> 00:04:09.200
just as our first have been eight application.

00:04:09.200 --> 00:04:16.650
But the only difference is have added this persistent last contact for Java inside,

00:04:16.650 --> 00:04:22.750
which I have all the list off feels that I want in my employ contact table.

00:04:22.750 --> 00:04:29.400
Also do they can know that I've introduced this simple annotations at the table would let

00:04:29.400 --> 00:04:31.440
us give a name to our table,

00:04:31.440 --> 00:04:36.540
and this will be the name off the table in our database and similar levels introduced This

00:04:36.540 --> 00:04:42.070
annotations had read column to give the name off these columns.

00:04:42.070 --> 00:04:45.410
So although we have I d in here in the database,

00:04:45.410 --> 00:04:46.680
would have it stored.

00:04:46.680 --> 00:04:50.940
Are would have the column name has contact I D.

00:04:50.940 --> 00:04:52.550
So nothing fancy here,

00:04:52.550 --> 00:04:57.170
So everything is same just as employees class.

00:04:57.170 --> 00:05:00.690
And if you try to run the program now,

00:05:00.690 --> 00:05:05.340
this is going to create the employees contact table,

00:05:05.340 --> 00:05:10.070
but it will not have any kind of an association with the employee table.

00:05:10.070 --> 00:05:12.800
So how do we create an association?

00:05:12.800 --> 00:05:14.760
It's pretty simple.

00:05:14.760 --> 00:05:23.160
You just have to add couple of annotations and here we have it pretty easy.

00:05:23.160 --> 00:05:28.210
So this time we used our custom data type,

00:05:28.210 --> 00:05:31.180
which is the persistent class employees.

00:05:31.180 --> 00:05:35.950
Now no relation would be established by just specifying the statement.

00:05:35.950 --> 00:05:39.750
You have to introduce one key annotation.

00:05:39.750 --> 00:05:43.160
He is this 1 to 1.

00:05:43.160 --> 00:05:44.990
That's what will make the stable,

00:05:44.990 --> 00:05:50.120
have oneto one relation with the employee table or whatever you specify in here.

00:05:50.120 --> 00:05:53.500
So along with this annotation,

00:05:53.500 --> 00:05:56.000
we have said couple of para meters.

00:05:56.000 --> 00:05:58.810
One is the target entity,

00:05:58.810 --> 00:06:01.110
which will point to the employee class.

00:06:01.110 --> 00:06:07.180
You don't really have to specify that having it is smart enough to figure that out by

00:06:07.180 --> 00:06:09.130
taking a look at the data type in here.

00:06:09.130 --> 00:06:11.350
But it's always better to be specific,

00:06:11.350 --> 00:06:12.950
at least for dollar purse.

00:06:12.950 --> 00:06:14.590
It would look more clear,

00:06:14.590 --> 00:06:19.080
and we're going to talk about this casket type incoming videos for sure.

00:06:19.080 --> 00:06:20.990
So let's hold on for the time being,

00:06:20.990 --> 00:06:24.550
and that's all there is to it.

00:06:24.550 --> 00:06:26.650
Nothing complicated at all.

00:06:26.650 --> 00:06:27.290
Now,

00:06:27.290 --> 00:06:28.030
off course,

00:06:28.030 --> 00:06:30.650
since we've introduced a new persist in class,

00:06:30.650 --> 00:06:35.470
we also need to take care off Adam the same as part off our conflict file,

00:06:35.470 --> 00:06:37.800
just as I did in here.

00:06:37.800 --> 00:06:39.070
And also,

00:06:39.070 --> 00:06:39.520
you know,

00:06:39.520 --> 00:06:46.400
test or Java have added another annotated class like Sil.

00:06:46.400 --> 00:06:50.290
And here's our code,

00:06:50.290 --> 00:06:54.210
which will actually add the entry into the database.

00:06:54.210 --> 00:06:56.410
But before you run the program,

00:06:56.410 --> 00:06:59.550
make sure that you delete all the tables from the database.

00:06:59.550 --> 00:07:04.550
And so here we have created the employee object,

00:07:04.550 --> 00:07:07.350
and we've also created the contact object.

00:07:07.350 --> 00:07:11.920
But here we're passing the employee object in here.

00:07:11.920 --> 00:07:13.430
So in the database,

00:07:13.430 --> 00:07:20.910
whatever will be the idea off this employee the same I d will get stored as a foreign key

00:07:20.910 --> 00:07:22.400
in the contact table.

00:07:22.400 --> 00:07:23.500
And finally,

00:07:23.500 --> 00:07:25.750
we're trying to save the contact object.

00:07:25.750 --> 00:07:27.460
So once we do so,

00:07:27.460 --> 00:07:32.490
it will not only add the contact details but also would take care off,

00:07:32.490 --> 00:07:39.360
adding the employee details into the employee table since the boat or now related and rest

00:07:39.360 --> 00:07:46.990
of the court is just as of our first initial happen it application program and that's holy

00:07:46.990 --> 00:07:47.380
restored.

00:07:47.380 --> 00:07:50.600
Let's run the program and see how things will go.

00:07:50.600 --> 00:07:51.800
And by the way,

00:07:51.800 --> 00:07:53.740
I have already deleted the table.

00:07:53.740 --> 00:07:56.650
You can see that we're not able to see the employee table.

00:07:56.650 --> 00:08:00.680
And let's take a look at the output.

00:08:00.680 --> 00:08:05.660
All right,

00:08:05.660 --> 00:08:06.390
we're done.

00:08:06.390 --> 00:08:09.180
So okay,

00:08:09.180 --> 00:08:09.490
happen.

00:08:09.490 --> 00:08:12.860
It has actually tried to drop the table.

00:08:12.860 --> 00:08:18.570
If this is existing and sending goes in here as well drop table.

00:08:18.570 --> 00:08:20.700
If employees is existing,

00:08:20.700 --> 00:08:26.800
the reason why we have an exception in here is because prior to deleting the employees

00:08:26.800 --> 00:08:27.950
contact table,

00:08:27.950 --> 00:08:33.040
having it has actually tried to drop the constraint,

00:08:33.040 --> 00:08:34.350
the foreign que con strain.

00:08:34.350 --> 00:08:36.150
Since there is no table,

00:08:36.150 --> 00:08:38.430
it's not possible to drop the constraint.

00:08:38.430 --> 00:08:40.100
And so we have an exception.

00:08:40.100 --> 00:08:41.980
But the good thing about happen,

00:08:41.980 --> 00:08:48.310
it is that it has handled that exception and we don't have to take care off it and going

00:08:48.310 --> 00:08:48.950
forward,

00:08:48.950 --> 00:08:56.580
it has created about the tables and also altered the table the contact able to create the

00:08:56.580 --> 00:09:02.420
foreign key just as you see here and then finally have been,

00:09:02.420 --> 00:09:06.150
it has inserted the data into the tables,

00:09:06.150 --> 00:09:09.350
so let's see how things will look in the database.

00:09:09.350 --> 00:09:20.150
So we got our employees populated and also employees contact.

00:09:20.150 --> 00:09:32.850
So this idea corresponds to Mr Asunder in case a furious and XML document.

00:09:32.850 --> 00:09:35.650
It's nothing complicated.

00:09:35.650 --> 00:09:43.650
All you have to do is to add the following tag in your XML file and all these fields are

00:09:43.650 --> 00:09:45.200
pretty much self explanatory.

00:09:45.200 --> 00:09:47.850
This is the employee class,

00:09:47.850 --> 00:09:49.450
the child class.

00:09:49.450 --> 00:09:54.180
We're going to talk about the cascading the name of the I.

00:09:54.180 --> 00:09:54.440
D.

00:09:54.440 --> 00:09:56.580
So you would just create a file,

00:09:56.580 --> 00:09:58.250
something like this.

00:09:58.250 --> 00:10:01.090
Like we have employees.

00:10:01.090 --> 00:10:02.160
I don't have to be.

00:10:02.160 --> 00:10:03.050
I'm not XML.

00:10:03.050 --> 00:10:09.470
You would now have the contact dot h p m dot xml along with all the properties that

00:10:09.470 --> 00:10:12.150
deciding in the contact persistent class,

00:10:12.150 --> 00:10:15.830
you would add that one on one relation in here,

00:10:15.830 --> 00:10:18.650
but you can just simply use annotations.

00:10:18.650 --> 00:10:22.950
No need to mess around because when you add this while again,

00:10:22.950 --> 00:10:26.150
those changes should get reflected everywhere else.

00:10:26.150 --> 00:10:31.050
And here we have toe point to that file.

00:10:31.050 --> 00:10:32.450
As one last,

00:10:32.450 --> 00:10:35.680
you have to add a different mapping entry,

00:10:35.680 --> 00:10:37.250
something that goes like this.

00:10:37.250 --> 00:10:39.790
So if you take care off all that,

00:10:39.790 --> 00:10:41.850
you're good to go.

00:10:41.850 --> 00:10:44.230
All right.

00:10:44.230 --> 00:10:46.120
I guess that's all for this video.

00:10:46.120 --> 00:10:46.950
See you soon.

