WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.720
Okay,

00:00:00.720 --> 00:00:04.870
let us explore some of the other methods that are part of decision interface.

00:00:04.870 --> 00:00:09.710
We've already talked about getting load and the difference between these two.

00:00:09.710 --> 00:00:15.050
But what they're actually doing is they're going to get the record from the database

00:00:15.050 --> 00:00:17.190
converted into an object,

00:00:17.190 --> 00:00:22.420
and that object would essentially be have persistent object so that we can do something

00:00:22.420 --> 00:00:26.580
with it coming to update and much to go to the diagram.

00:00:26.580 --> 00:00:32.450
We talked about how a transient object transitioned to a persistent object,

00:00:32.450 --> 00:00:39.210
and we've seen how opposes to the object is transitioned to a detached object without

00:00:39.210 --> 00:00:40.210
bearing merge.

00:00:40.210 --> 00:00:41.980
We're going to do it the other way.

00:00:41.980 --> 00:00:48.580
We're going to convert or perform transition off a detached object back to the persistent

00:00:48.580 --> 00:00:49.050
object,

00:00:49.050 --> 00:00:54.750
meaning that these two methods would help us add the detached object back into the session

00:00:54.750 --> 00:00:54.750
.

00:00:54.750 --> 00:00:56.250
So let's see how it's done.

00:00:56.250 --> 00:00:59.940
This is more or less our previous example here.

00:00:59.940 --> 00:01:01.510
We're trying to evict the object.

00:01:01.510 --> 00:01:04.750
So now the object is in that state,

00:01:04.750 --> 00:01:07.140
and based on our previous example,

00:01:07.140 --> 00:01:10.310
these two results will not reflected at all.

00:01:10.310 --> 00:01:16.210
Now let us try to perform update on the particular object that said,

00:01:16.210 --> 00:01:19.270
the file So before we did the comet,

00:01:19.270 --> 00:01:23.290
we're trying to get the detached object back to the session.

00:01:23.290 --> 00:01:25.610
So now if I run this program,

00:01:25.610 --> 00:01:32.270
I would expect the object Toby at its later state so the age would be set to 56.

00:01:32.270 --> 00:01:35.050
Let's on the program and see the results.

00:01:35.050 --> 00:01:40.550
And if you go to the database,

00:01:40.550 --> 00:01:42.990
sure enough,

00:01:42.990 --> 00:01:44.760
we have it set to 56.

00:01:44.760 --> 00:01:45.950
So essentially,

00:01:45.950 --> 00:01:46.740
in this case,

00:01:46.740 --> 00:01:51.600
have it did not take any effect at all because we reverted it with update.

00:01:51.600 --> 00:01:54.800
The murder matter will also do the exact same task.

00:01:54.800 --> 00:01:59.530
But there's one slight difference between the two when you're trying to feed the transition

00:01:59.530 --> 00:02:03.090
object to update its going to throw an exception.

00:02:03.090 --> 00:02:06.590
So here we have another object off employees,

00:02:06.590 --> 00:02:10.980
and this is transition object because it is not part off any session.

00:02:10.980 --> 00:02:16.110
So let me just copy this and feed this into update method and see what will happen.

00:02:16.110 --> 00:02:23.750
He would come across with the exception that says transition object exception.

00:02:23.750 --> 00:02:33.360
But then you do much things will work because much is actually going to create a brand new

00:02:33.360 --> 00:02:33.360
,

00:02:33.360 --> 00:02:34.670
persistent object,

00:02:34.670 --> 00:02:36.620
which is essentially copy off.

00:02:36.620 --> 00:02:42.170
Whatever the object that you feel in here and is going to make it part of the concession.

00:02:42.170 --> 00:02:46.050
So it's on the program and say how things will go.

00:02:46.050 --> 00:02:52.390
And if you go to the table,

00:02:52.390 --> 00:02:58.490
you would know this couple off Ricard's and those records would correspond to these two

00:02:58.490 --> 00:02:59.350
employees.

00:02:59.350 --> 00:03:05.550
If you use this method elite on a persistent object,

00:03:05.550 --> 00:03:14.050
it would make that object back toe a transient object self Apple assistant Object if you

00:03:14.050 --> 00:03:17.650
use delete would become back to a transient object,

00:03:17.650 --> 00:03:19.810
not thought of that session.

00:03:19.810 --> 00:03:20.830
And finally,

00:03:20.830 --> 00:03:25.030
we have this method save or update it a simply combination of both.

00:03:25.030 --> 00:03:26.020
Save an update,

00:03:26.020 --> 00:03:33.050
depending on which stayed the object ease the respect to task will take place.

00:03:33.050 --> 00:03:36.250
If the object is in transient state,

00:03:36.250 --> 00:03:42.450
then say would be performed to transform it into persistent state.

00:03:42.450 --> 00:03:45.550
Or if the object is indeed that state,

00:03:45.550 --> 00:03:47.620
then update will take place,

00:03:47.620 --> 00:03:53.150
which will bring the object back to this session and make it a persistent object.

00:03:53.150 --> 00:03:56.430
We're going to be using all these incoming videos,

00:03:56.430 --> 00:03:58.860
so see you soon

