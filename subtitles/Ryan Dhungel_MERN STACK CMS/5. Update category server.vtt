WEBVTT
1
00:00:00.480 --> 00:00:03.570
So now I'm going to implement the edit feature.

2
00:00:04.440 --> 00:00:12.870
So for that, we're going to use a model that should look something like this and where we can to populate

3
00:00:12.870 --> 00:00:17.580
the leaked category and we allow the admin to update.

4
00:00:17.820 --> 00:00:22.680
So before we work on the front end, let's quickly work on the back end, create the root and controller

5
00:00:22.680 --> 00:00:25.290
function, and then we're going to continue here.

6
00:00:25.820 --> 00:00:30.240
All right, so let's go to server roots category.

7
00:00:32.340 --> 00:00:42.270
So here to update, we can copy this from based here to this to put it's going to be object.

8
00:00:42.270 --> 00:00:44.910
So for update we use the boot method.

9
00:00:45.270 --> 00:00:47.850
So category that slug we can send the.

10
00:00:50.700 --> 00:00:53.490
That way we can identify which category to update.

11
00:00:53.550 --> 00:00:53.820
Right.

12
00:00:54.270 --> 00:00:56.550
And here we can apply that middleware.

13
00:00:56.550 --> 00:01:00.520
We can apply these add new are removed categories.

14
00:01:01.000 --> 00:01:03.240
Let's send this to update.

15
00:01:05.540 --> 00:01:08.030
All right, so let's copy this from put here.

16
00:01:10.870 --> 00:01:17.700
I guess let's go to the category control and create that function.

17
00:01:21.270 --> 00:01:26.930
Export cones of that category equals to async requests.

18
00:01:26.950 --> 00:01:27.780
Response.

19
00:01:28.650 --> 00:01:29.160
Try.

20
00:01:32.050 --> 00:01:36.280
Kids and their cousins look.

21
00:01:39.270 --> 00:01:39.630
Try.

22
00:01:39.630 --> 00:01:46.170
What we want to do is we want to find the category based on the request program slogan, just like we

23
00:01:46.170 --> 00:01:49.430
did during Create.

24
00:01:49.770 --> 00:01:49.980
All right.

25
00:01:50.010 --> 00:01:53.940
So let me just use this code.

26
00:01:54.480 --> 00:02:01.950
So we this stops a slug from the params, which is right here, just like we did in the delete.

27
00:02:02.520 --> 00:02:07.530
We get the category name from the request body so we can distribute to that as well.

28
00:02:09.150 --> 00:02:13.110
So we can send the name and.

29
00:02:14.560 --> 00:02:17.890
And we find the category to this method.

30
00:02:17.890 --> 00:02:21.970
As you can see, it doesn't just find it finds an update.

31
00:02:22.230 --> 00:02:24.010
I'd say it's pretty awesome dysfunction.

32
00:02:24.250 --> 00:02:25.690
Find one and update.

33
00:02:25.990 --> 00:02:33.050
So when you say find one an object, you first give the argument based on which we can find the category.

34
00:02:33.070 --> 00:02:35.140
So you can see this function.

35
00:02:35.140 --> 00:02:40.210
Find on an object has three arguments, I guess.

36
00:02:40.210 --> 00:02:43.900
So the first one is the slope so fine by the slope.

37
00:02:43.960 --> 00:02:44.980
So that's the first one.

38
00:02:45.460 --> 00:02:47.710
And once it is found, what do you want to do?

39
00:02:47.770 --> 00:02:49.630
We want to update something, right.

40
00:02:49.900 --> 00:02:51.190
So that's what we're doing here.

41
00:02:51.850 --> 00:02:59.260
The second element is the data that you want to update first defined by the slug, and then you give

42
00:02:59.260 --> 00:03:01.300
the data that needs to update.

43
00:03:01.330 --> 00:03:04.120
So in our case, it's the name that need to update.

44
00:03:04.480 --> 00:03:04.750
Right?

45
00:03:05.050 --> 00:03:06.910
And then slug also your content.

46
00:03:08.890 --> 00:03:11.100
So that's going to be slug ified the name.

47
00:03:11.140 --> 00:03:16.620
So whatever name it is based on that, if the name had sense, then the slug will also tense.

48
00:03:16.810 --> 00:03:17.020
Right.

49
00:03:17.290 --> 00:03:19.930
And then our argument is optional.

50
00:03:19.930 --> 00:03:21.040
It's new to.

51
00:03:21.070 --> 00:03:29.950
So if you use this, this will make sure that when you send the this in response of this category this

52
00:03:29.950 --> 00:03:33.850
newly a new update the name which has been just synced.

53
00:03:34.090 --> 00:03:34.360
Right.

54
00:03:34.630 --> 00:03:38.500
So that synced data will be sent.

55
00:03:38.740 --> 00:03:43.810
Now, if you didn't use that, then it will save the update in the database.

56
00:03:43.810 --> 00:03:47.020
But this response will still be the old one.

57
00:03:47.290 --> 00:03:47.620
All right.

58
00:03:48.070 --> 00:03:54.640
So make sure to use new true if you want to send the updated data to the backend.

59
00:03:54.970 --> 00:03:56.890
So do the front end as a response.

60
00:03:57.670 --> 00:03:57.750
Right.

61
00:03:57.760 --> 00:03:59.440
So this is pretty much all we need to do.

62
00:03:59.680 --> 00:04:03.070
If we need to make any change or if there's an issue, we will come back.

63
00:04:03.110 --> 00:04:05.650
Otherwise, we're done in the backend.

64
00:04:06.100 --> 00:04:07.930
Now we can go to the front end.

65
00:04:10.310 --> 00:04:22.630
Is admin getting this index and here we can use a model where we can so the form for user to update.

66
00:04:23.910 --> 00:04:24.810
The category.

67
00:04:26.430 --> 00:04:31.410
Now let's quickly write a function on click.

68
00:04:33.300 --> 00:04:36.240
Just like we did with handle delete.

69
00:04:36.600 --> 00:04:38.520
This time we want to.

70
00:04:40.390 --> 00:04:41.290
Handle it.

71
00:04:41.500 --> 00:04:44.920
Now, before we actually work on the edit, we have to do two things.

72
00:04:45.970 --> 00:04:49.690
Um, let me handle it.

73
00:04:52.620 --> 00:04:53.670
And give the item.

74
00:04:55.370 --> 00:04:57.690
And you said, let me clear this function.

75
00:04:59.640 --> 00:05:01.350
Let me just put it right here.

76
00:05:04.000 --> 00:05:05.910
Konst handled it.

77
00:05:06.400 --> 00:05:08.860
Async requests

78
00:05:11.470 --> 00:05:12.400
the response.

79
00:05:13.860 --> 00:05:15.350
I'm so sorry.

80
00:05:15.360 --> 00:05:19.380
I think it's getting be too late and I'm getting beat.

81
00:05:21.110 --> 00:05:21.680
Confused.

82
00:05:22.370 --> 00:05:28.880
So I think it certainly was stressful to be a it in the back and we here in the front line actually

83
00:05:28.880 --> 00:05:35.600
we're not going to make a request to back into it because before we do that, we have to do a few things

84
00:05:35.600 --> 00:05:44.150
and that is we have to put the this category that we are currently embedding.

85
00:05:44.390 --> 00:05:46.520
As you can see, we have a list of categories.

86
00:05:47.810 --> 00:05:50.150
So whichever has been clicked.

87
00:05:51.110 --> 00:05:54.920
So that category first we want to put in the state.

88
00:05:55.460 --> 00:05:55.700
Right.

89
00:05:55.850 --> 00:06:04.280
So that way, once you have it in the state, then from the state, you can so that in a model like

90
00:06:04.280 --> 00:06:04.520
this.

91
00:06:04.730 --> 00:06:11.000
So when I clicked on Mark, you can see I put that category in the state and then from this from the

92
00:06:11.000 --> 00:06:15.760
state I can grab that category value and put in the object.

93
00:06:15.770 --> 00:06:19.280
From here you can see like that.

94
00:06:20.600 --> 00:06:27.140
So before we make any kind of request to back into update, we have to do something here.

95
00:06:27.830 --> 00:06:33.290
So we have to put that updating category in the state.

96
00:06:33.770 --> 00:06:35.150
And so the model.

97
00:06:36.640 --> 00:06:37.190
Enthused.

98
00:06:37.210 --> 00:06:40.750
The end is smaller, so let's continue that in the next video.
