WEBVTT
1
00:00:00.690 --> 00:00:03.720
All right, so we have the sign up for working, which is great.

2
00:00:04.020 --> 00:00:08.400
We still have to work on the signing, but which is that's going to be pretty similar to sign up.

3
00:00:08.400 --> 00:00:14.430
We can pretty much reuse that cold, put in the sign in, just change the endpoint and we don't.

4
00:00:14.610 --> 00:00:14.880
All right.

5
00:00:15.210 --> 00:00:21.480
So let's do one more thing before we work on the sign in that is doing some cleanup in our.

6
00:00:22.300 --> 00:00:24.310
Um, requests.

7
00:00:24.310 --> 00:00:29.510
For example, if you go to sign up you can see we are hardcoded the back end you area.

8
00:00:29.800 --> 00:00:37.180
Now this is a problematic because later you will be using such years in maybe ten 2012.

9
00:00:37.750 --> 00:00:42.880
And whenever you want to turn this fake thing on, you used your application in products and you will

10
00:00:42.880 --> 00:00:44.500
have a different domain name, right?

11
00:00:44.740 --> 00:00:49.570
So in that case, you have to go to 20 different files in the URL menu.

12
00:00:49.840 --> 00:00:52.120
Now, that's obviously a big waste of time.

13
00:00:53.110 --> 00:00:53.410
Okay.

14
00:00:53.620 --> 00:01:00.820
So for things like that and not just for the URL, but for to store certain informations, for example,

15
00:01:01.210 --> 00:01:08.830
the API keys, certain secret keys, you want to put it in a in a flight from where the entire application

16
00:01:08.830 --> 00:01:10.210
will be able to access that.

17
00:01:10.480 --> 00:01:10.720
Okay.

18
00:01:10.900 --> 00:01:13.990
So for that, we're going to use the aeon variables file.

19
00:01:14.500 --> 00:01:19.240
So we create a file called EMV and we put all those values.

20
00:01:21.490 --> 00:01:28.600
In that file that we later when you use such suites from your development to the products and to you

21
00:01:28.600 --> 00:01:33.850
can quickly just on the in the file and the values will be updated everywhere.

22
00:01:34.120 --> 00:01:34.330
Right.

23
00:01:34.690 --> 00:01:37.000
So here in the client, let's create a new file.

24
00:01:37.000 --> 00:01:40.170
Let's call it dirt in the dirt local.

25
00:01:40.630 --> 00:01:42.940
Usually you would just call it EMV.

26
00:01:43.000 --> 00:01:46.470
However, with next is differently.

27
00:01:46.830 --> 00:01:49.700
We have to call it and we don't look.

28
00:01:51.370 --> 00:01:51.670
All right.

29
00:01:51.850 --> 00:01:57.820
So here we want to, first of all, save the back into the area.

30
00:01:58.030 --> 00:01:58.240
All right.

31
00:01:58.240 --> 00:02:00.430
So a something like that.

32
00:02:01.210 --> 00:02:08.580
Yeah let's call it we use we usually write in a camera live API equals to let's call it hasty has to

33
00:02:08.620 --> 00:02:16.660
be called local host calling 8000.

34
00:02:17.770 --> 00:02:19.150
All right so that's how began.

35
00:02:19.880 --> 00:02:26.050
Now since next is runs in both environment client's client side and server side.

36
00:02:26.380 --> 00:02:34.210
Later we will be exploring the server side and see how we can make requests using server side so that.

37
00:02:35.640 --> 00:02:40.410
The content has been received from the backend before we render anything on the base.

38
00:02:40.710 --> 00:02:46.800
That will be especially useful for issue of search engine optimization, because when the search robots

39
00:02:46.800 --> 00:02:52.800
come looking on your face, they will immediately see the actual content instead of something empty.

40
00:02:53.490 --> 00:02:54.000
And then.

41
00:02:56.030 --> 00:03:02.840
You have some data because that's how you use it in react works in as you will use something like use

42
00:03:02.840 --> 00:03:08.450
effect that will make a request to get some data when the component mounts when the piece is already

43
00:03:08.450 --> 00:03:08.930
rendered.

44
00:03:09.940 --> 00:03:10.190
Okay.

45
00:03:10.210 --> 00:03:17.170
So that is not so good for you because when the Google starts in the robots, they come crawling to

46
00:03:17.170 --> 00:03:19.900
your site, they will see empty content.

47
00:03:20.230 --> 00:03:25.180
However, with server side rendering the very first time the page is rendered, the content is already

48
00:03:25.180 --> 00:03:25.420
there.

49
00:03:25.750 --> 00:03:27.730
So so we'll explore that.

50
00:03:29.080 --> 00:03:30.580
However, at the moment.

51
00:03:30.580 --> 00:03:32.080
So that's the API.

52
00:03:33.780 --> 00:03:34.800
The endpoint.

53
00:03:35.190 --> 00:03:43.810
And when we use it, when we want to make a request to our server in the server side rendering that

54
00:03:43.810 --> 00:03:45.450
don't we have to.

55
00:03:47.080 --> 00:03:49.060
Use this variable.

56
00:03:49.480 --> 00:03:49.790
Okay.

57
00:03:49.930 --> 00:03:52.920
But this variable will not be accessible in the client.

58
00:03:52.920 --> 00:03:55.720
So, for example, you cannot access that.

59
00:03:56.200 --> 00:04:02.540
For that, there's something special you have to do and that is next public.

60
00:04:02.710 --> 00:04:06.170
So you have to prefix your variable with this keyboard next.

61
00:04:06.790 --> 00:04:07.720
Okay, that's important.

62
00:04:08.260 --> 00:04:09.610
So next public API.

63
00:04:10.660 --> 00:04:13.990
If you do it like this, you can put the same value here.

64
00:04:14.800 --> 00:04:17.480
This variable will be accessible.

65
00:04:18.540 --> 00:04:22.540
Now, in a client set environment like this one you can use.

66
00:04:22.900 --> 00:04:29.830
However, if you don't use next public and just leave the name, then that will not be accessible.

67
00:04:29.830 --> 00:04:34.510
That will only be accessible in the server side environment, which we will explain a bit later.

68
00:04:34.870 --> 00:04:35.170
Okay.

69
00:04:35.650 --> 00:04:38.800
So make sure to prefix with the next public.

70
00:04:40.370 --> 00:04:42.110
I guess that's all we need at the moment.

71
00:04:42.110 --> 00:04:47.210
Later, if we add some more, obviously we can we can add Hibbert at the moment.

72
00:04:47.210 --> 00:04:47.830
That's how many.

73
00:04:49.640 --> 00:04:55.370
And another thing is, whenever you make some changes to unify, like you said, restart of service

74
00:04:55.630 --> 00:04:56.290
to restart.

75
00:04:58.750 --> 00:05:02.140
So when that's happening, let's go.

76
00:05:03.190 --> 00:05:06.100
And now we could access that value here.

77
00:05:06.950 --> 00:05:07.600
That's a limit.

78
00:05:08.720 --> 00:05:10.960
Should you process that?

79
00:05:11.030 --> 00:05:12.410
Ian We don't.

80
00:05:13.800 --> 00:05:14.370
Next.

81
00:05:16.990 --> 00:05:19.060
Public opinion.

82
00:05:19.250 --> 00:05:19.450
All right.

83
00:05:19.450 --> 00:05:24.850
So that is the URL we just wrote, right?

84
00:05:25.330 --> 00:05:27.880
So we can access that value like this.

85
00:05:31.210 --> 00:05:31.570
Okay.

86
00:05:31.870 --> 00:05:32.920
So let's give it a try.

87
00:05:33.950 --> 00:05:42.200
Let's remove the double quotes and let's use Bektic instead so that we can put the variables.

88
00:05:43.460 --> 00:05:49.970
So we use that persistent eon with the next public here, plus sign up.

89
00:05:50.300 --> 00:05:51.650
All right, so this is the endpoint.

90
00:05:52.850 --> 00:05:53.600
This should work.

91
00:05:54.050 --> 00:05:55.040
We can give it a try.

92
00:05:58.850 --> 00:06:05.690
However, what I'm going to do is I'm going to configure excuse me in our context that way it is.

93
00:06:07.660 --> 00:06:13.060
Available globally, and you don't have to keep writing this the full year because every time it will

94
00:06:13.060 --> 00:06:13.570
always be.

95
00:06:14.230 --> 00:06:14.500
All right.

96
00:06:14.500 --> 00:06:18.430
So if we're only just saying this, there's no point writing it everywhere.

97
00:06:18.820 --> 00:06:22.930
So we can just configure issues in a way so that you don't have to write a letter.

98
00:06:22.930 --> 00:06:23.920
You can just write.

99
00:06:25.540 --> 00:06:25.990
It's less.

100
00:06:26.320 --> 00:06:27.160
So that would be nice.

101
00:06:28.540 --> 00:06:31.750
Okay, before we do that, let's just you to try to make sure.

102
00:06:34.440 --> 00:06:35.340
Everything is working.

103
00:06:35.590 --> 00:06:38.330
She didn't try and find it right.

104
00:06:39.240 --> 00:06:40.400
And the.

105
00:06:44.850 --> 00:06:45.800
Emily taken.

106
00:06:47.210 --> 00:06:47.720
Nine.

107
00:06:51.630 --> 00:06:52.800
Now you can see it works.

108
00:06:53.550 --> 00:06:55.440
We've made this change how it works.

109
00:06:55.590 --> 00:06:56.520
So that's great.

110
00:06:57.210 --> 00:07:02.550
But like I said, I don't want to just keep writing the full year on.

111
00:07:02.550 --> 00:07:09.360
It's an every access request, so let's do some excuse configuration and we can do that in our context.

112
00:07:10.650 --> 00:07:10.950
Yeah.

113
00:07:11.220 --> 00:07:12.030
So let's import.

114
00:07:12.030 --> 00:07:12.750
Excuse you.

115
00:07:15.920 --> 00:07:23.870
From Access and then we can configure excuse by adding the base area.

116
00:07:25.130 --> 00:07:28.610
Now, that is something we can put here.

117
00:07:33.330 --> 00:07:36.750
Later we will be able to handle the errors.

118
00:07:36.900 --> 00:07:42.180
For example, if the decent work token expired, we can handle that error, maybe center of the user.

119
00:07:42.210 --> 00:07:47.850
We can do other things using excuse interceptors, which we will discuss a bit later.

120
00:07:48.090 --> 00:07:52.900
But at the moment, let's just say the base you are busy are also, like I said.

121
00:07:53.970 --> 00:07:57.600
Now if we are in making a suicide request, we need to use this.

122
00:07:57.960 --> 00:08:00.900
If we are making a client at request, we need this one.

123
00:08:01.350 --> 00:08:04.530
So we have to do before conditional.

124
00:08:08.150 --> 00:08:09.330
Is that so?

125
00:08:09.350 --> 00:08:10.820
That's us.

126
00:08:11.770 --> 00:08:12.040
Okay.

127
00:08:12.310 --> 00:08:16.680
So first, let's check if we are in a clean set environment or service.

128
00:08:16.960 --> 00:08:24.220
So process Dan's browser, so you can use this to determine which environment you are in.

129
00:08:29.450 --> 00:08:29.940
I guess so.

130
00:08:29.990 --> 00:08:38.840
If we are in a clean TED environment, we can use, uh, excuse dirt default.

131
00:08:40.370 --> 00:08:51.440
DuPont's don't base you know L equals to that would be processed or EMV dart API.

132
00:08:51.830 --> 00:08:55.790
So if we are in actually this should be sort of.

133
00:08:57.790 --> 00:08:59.680
If we're in a suicide environment.

134
00:09:00.760 --> 00:09:04.360
We want to set the base here with the value of this one.

135
00:09:05.260 --> 00:09:06.410
So don't EPA.

136
00:09:07.010 --> 00:09:19.030
However, if we are in a clean site environment and we want to turn this to the next public area so

137
00:09:19.030 --> 00:09:25.000
that with the X use will work in both server side request and just the clean side.

138
00:09:26.560 --> 00:09:27.040
Beautiful.

139
00:09:27.220 --> 00:09:27.940
So this way.

140
00:09:29.080 --> 00:09:30.790
We have configured excuse.

141
00:09:30.790 --> 00:09:33.040
We have added the base year already.

142
00:09:33.430 --> 00:09:34.960
So we didn't have to keep.

143
00:09:36.860 --> 00:09:39.890
Writing the full year like that.

144
00:09:40.670 --> 00:09:46.580
I guess if you want to, you know, give it a try, remove that like before.

145
00:09:46.580 --> 00:09:50.990
If you would do something like this, then the request would be sent to the application itself.

146
00:09:51.020 --> 00:09:51.290
Right?

147
00:09:51.590 --> 00:09:54.590
So localhost, 3000 less signups.

148
00:09:54.590 --> 00:09:56.860
That's what would happen before.

149
00:09:57.200 --> 00:10:00.950
But now since we have configured access globally.

150
00:10:02.050 --> 00:10:05.260
With the base year, this shouldn't be an issue.

151
00:10:05.440 --> 00:10:11.920
We should be able to make a request with just the endpoint because we would have the base year.

152
00:10:13.170 --> 00:10:13.420
Okay.

153
00:10:13.470 --> 00:10:14.250
Let's try one.

154
00:10:15.730 --> 00:10:19.510
Let's go sign him right now.

155
00:10:19.780 --> 00:10:29.050
Ryan and i and jim into 1:09 p.m..

156
00:10:29.050 --> 00:10:30.250
That's that's a long.

157
00:10:34.420 --> 00:10:34.900
Beautiful.

158
00:10:35.100 --> 00:10:38.330
Now you can see everything is working.

159
00:10:38.350 --> 00:10:40.100
Axis configuration works.

160
00:10:40.120 --> 00:10:41.580
You can take the heavies.

161
00:10:41.620 --> 00:10:44.230
You can see we're making the request to our input.

162
00:10:45.150 --> 00:10:45.750
In the back.

163
00:10:46.050 --> 00:10:46.440
Beautiful.
