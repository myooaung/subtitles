WEBVTT
1
00:00:00.540 --> 00:00:05.370
So in the previous video I said that we're going to work in the back end first and then we'll come back.

2
00:00:05.730 --> 00:00:12.390
But actually we can just finish our functionality here and then go to the back and it's the same thing.

3
00:00:13.070 --> 00:00:13.200
All right.

4
00:00:13.200 --> 00:00:24.210
So I'm going to create a function and that function will be then let's call it let's call it by the

5
00:00:24.210 --> 00:00:25.710
same name upload.

6
00:00:29.070 --> 00:00:29.340
Okay.

7
00:00:29.340 --> 00:00:31.680
So what do you want to do is.

8
00:00:34.040 --> 00:00:42.050
You want to put this in a separate file because this upload feature will be used later in other files

9
00:00:42.050 --> 00:00:42.470
as well.

10
00:00:43.370 --> 00:00:48.830
So if you want, you can continue on this file, move it to some other files later.

11
00:00:49.250 --> 00:00:52.370
Maybe that's the right thing to do just to make things easier.

12
00:00:52.430 --> 00:00:52.730
All right.

13
00:00:52.730 --> 00:00:53.810
So let's continue here.

14
00:00:54.140 --> 00:00:59.210
And then later, we will move to several files so that it's easy to reuse.

15
00:00:59.300 --> 00:00:59.630
Right.

16
00:01:00.710 --> 00:01:05.320
So, like I said, we're going to resize the miss and then we send to the backend.

17
00:01:05.330 --> 00:01:14.180
So for that, we're going to use this dispatches from NPM React Image File, resize it.

18
00:01:24.220 --> 00:01:25.090
I discovered that.

19
00:01:25.090 --> 00:01:25.480
Come on.

20
00:01:26.020 --> 00:01:27.100
So we're going to use that.

21
00:01:27.280 --> 00:01:29.530
And this bag as it gives us.

22
00:01:29.620 --> 00:01:34.840
So we say as a function, resize it and we access this function, image, file, resize.

23
00:01:35.260 --> 00:01:40.750
And all these arguments you can possibly can pass the file.

24
00:01:41.260 --> 00:01:43.630
You can pass the height and width, whatever you want.

25
00:01:43.660 --> 00:01:48.640
Compress in format, quality rotation, height, width.

26
00:01:48.640 --> 00:01:51.730
You can pass all this as an argument to this function.

27
00:01:52.000 --> 00:01:53.890
So the most important one is file.

28
00:01:55.310 --> 00:02:03.050
And did they have used here so the file these values they are the width and height compression that's

29
00:02:03.050 --> 00:02:04.100
a big format.

30
00:02:04.460 --> 00:02:06.110
The quantity is 100.

31
00:02:06.260 --> 00:02:10.760
You can see that's how it has been priced and they are the important one is this callback function.

32
00:02:10.760 --> 00:02:21.350
And see the callback function will give you the resized images as a base64 you will get the images in

33
00:02:21.350 --> 00:02:23.600
this base64 format here.

34
00:02:24.140 --> 00:02:31.370
So here you going to make a request and using excuse to send this images to your back in and back and

35
00:02:31.370 --> 00:02:37.260
we over to currently we get the euro that here you want to send as a response so that when you have

36
00:02:37.280 --> 00:02:44.600
a level here so in the image uploaded you will get the URL and that here will be sent along with the

37
00:02:44.600 --> 00:02:45.080
post.

38
00:02:47.290 --> 00:02:48.190
All right, so let's.

39
00:02:49.000 --> 00:02:49.810
And so this one.

40
00:02:54.240 --> 00:02:55.590
So let me stop this for now.

41
00:02:57.000 --> 00:02:58.020
And so that

42
00:03:00.750 --> 00:03:01.620
was that was great.

43
00:03:03.880 --> 00:03:04.060
Now.

44
00:03:04.090 --> 00:03:05.260
Let's in for that here.

45
00:03:06.890 --> 00:03:10.220
So a researcher from.

46
00:03:12.840 --> 00:03:14.010
React email.

47
00:03:14.820 --> 00:03:20.250
So you must file, resize it and then we use the which is already here.

48
00:03:20.850 --> 00:03:21.210
Okay.

49
00:03:21.600 --> 00:03:30.450
So here first let's create the resize function that will resize the file and then we in to create the

50
00:03:30.450 --> 00:03:33.120
uprooting this function right here.

51
00:03:33.750 --> 00:03:42.000
I guess we need to this one is to resize const, let's call it and resize file.

52
00:03:43.410 --> 00:03:45.780
This will require the file as an argument.

53
00:03:48.060 --> 00:03:55.560
Then our function is upload images equals to async file.

54
00:03:58.140 --> 00:03:58.890
We will approve.

55
00:03:59.400 --> 00:04:02.190
So upload image.

56
00:04:02.220 --> 00:04:08.460
As you can see this in the editor, we have used that to upload the image.

57
00:04:09.610 --> 00:04:15.610
That function should return the euro so that the the immense euro will be in the full.

58
00:04:16.720 --> 00:04:18.490
So it will be in the post.

59
00:04:19.420 --> 00:04:30.050
So a broad aim is will first receive the file so we can come on the front and the screen to comment

60
00:04:30.050 --> 00:04:30.860
this outside.

61
00:04:30.910 --> 00:04:38.530
I know it looks quite painful to take this out just to make sure everything is going according to plan.

62
00:04:38.530 --> 00:04:43.360
If you have some issues right now from that, actually we're not going to use from that since we're

63
00:04:43.360 --> 00:04:44.710
going to use this result.

64
00:04:46.060 --> 00:04:50.830
This is a package that will give you the best 64 format of the image.

65
00:04:51.430 --> 00:04:56.020
So what do you want to do is you want to use, try and catch.

66
00:05:01.410 --> 00:05:02.640
So what do you want to try here?

67
00:05:02.850 --> 00:05:04.660
You want to try the resize file?

68
00:05:04.680 --> 00:05:05.940
You want to execute that.

69
00:05:07.260 --> 00:05:07.590
Okay.

70
00:05:07.650 --> 00:05:15.510
So once it is, it wants to await results file and you give the file.

71
00:05:16.710 --> 00:05:19.680
So what it will do is.

72
00:05:19.680 --> 00:05:20.550
It will.

73
00:05:22.200 --> 00:05:23.410
You can see the results.

74
00:05:23.500 --> 00:05:33.030
File This function will reside in the file and give you the the you are right the best 64 formats of

75
00:05:33.030 --> 00:05:33.480
the file.

76
00:05:34.400 --> 00:05:34.560
All right.

77
00:05:34.560 --> 00:05:41.520
So once again, that in this in a best 64 format, you want to use excuse to send it to the back end.

78
00:05:41.850 --> 00:05:48.540
Now, of course, we don't have the the back endpoint for uploading image yet, but we will work on

79
00:05:48.540 --> 00:05:49.480
that in the next period.

80
00:05:50.180 --> 00:05:52.980
So wait, excuse dark post.

81
00:05:52.980 --> 00:06:00.350
We make a post request, the end phone is going to be upload image and the data is going to be image.

82
00:06:00.390 --> 00:06:03.540
So we send as object in this.

83
00:06:04.770 --> 00:06:05.040
Okay.

84
00:06:05.490 --> 00:06:08.490
Here you want to console.log and see what you get.

85
00:06:11.040 --> 00:06:13.320
Upload file the response.

86
00:06:13.320 --> 00:06:16.290
So you should get the uploaded images.

87
00:06:16.590 --> 00:06:18.160
You are you url?

88
00:06:18.220 --> 00:06:18.510
Yeah.

89
00:06:20.670 --> 00:06:23.070
So what do you want to do is data to TRL.

90
00:06:24.900 --> 00:06:25.170
Okay.

91
00:06:26.520 --> 00:06:37.050
Now at the moment it will not work, but we should still be able to see the images resized here.

92
00:06:37.410 --> 00:06:38.430
All right, so let's try the.

93
00:06:41.090 --> 00:06:43.010
So you can see this function.

94
00:06:43.130 --> 00:06:51.530
We'll resize the images and give us the best format so you can consume log images.

95
00:06:55.420 --> 00:06:56.710
Best 64.

96
00:07:02.080 --> 00:07:09.370
And let me use written cure because we do not have the endpoint yet, so no point executing that.

97
00:07:09.370 --> 00:07:11.920
So we return for now.

98
00:07:11.920 --> 00:07:12.520
Just for now.

99
00:07:13.390 --> 00:07:13.660
All right.

100
00:07:14.110 --> 00:07:17.080
So we should be able to see the best 64 format of the list.

101
00:07:17.590 --> 00:07:25.120
Now, let's try to use this package to resize it.

102
00:07:26.470 --> 00:07:31.300
In fact, we going to use new promised.

103
00:07:33.040 --> 00:07:36.250
And from this will resolve.

104
00:07:36.460 --> 00:07:36.700
Right.

105
00:07:36.700 --> 00:07:37.120
So

106
00:07:41.800 --> 00:07:42.430
resolve.

107
00:07:44.020 --> 00:07:45.580
We're going to use the resources of.

108
00:07:49.040 --> 00:07:50.790
Resize a dot image file.

109
00:07:50.790 --> 00:07:53.510
The results of that is the function to this function.

110
00:07:53.960 --> 00:07:55.910
As you can see, it takes all these arguments.

111
00:07:58.280 --> 00:07:59.960
All these arguments and give you.

112
00:08:01.280 --> 00:08:01.700
The.

113
00:08:01.700 --> 00:08:02.360
You are right.

114
00:08:07.320 --> 00:08:08.160
That one.

115
00:08:08.580 --> 00:08:11.220
That's it's there.

116
00:08:20.550 --> 00:08:23.820
It's a new promise that is closing here, the parentheses.

117
00:08:23.820 --> 00:08:26.580
And then we have this arrow function here.

118
00:08:27.290 --> 00:08:30.900
I guess this arrow function is within the new promise.

119
00:08:31.800 --> 00:08:38.790
All right, so here you can see all these arguments I showed you in the documentation already.

120
00:08:39.840 --> 00:08:44.940
So the file is with high quality compress and format all these options here.

121
00:08:45.570 --> 00:08:49.800
So instead of 300, that would be quite small for the image.

122
00:08:49.800 --> 00:08:55.440
So let me use, let's say 720.

123
00:08:56.080 --> 00:08:59.090
Now you can go even higher, but let's keep it 720

124
00:09:01.950 --> 00:09:05.970
hardly to 400 JPEG image format quality.

125
00:09:05.970 --> 00:09:15.660
We keep it to 100 and the callback function return the will give us the URI so that here will be the

126
00:09:15.660 --> 00:09:18.450
best 64 data which is received here.

127
00:09:19.140 --> 00:09:27.810
Okay, so we console.log that and then we going to file and send that to backing so that we can upload

128
00:09:27.810 --> 00:09:28.950
to the cloud in area.

129
00:09:29.040 --> 00:09:31.900
But we work on that in the following lecture.

130
00:09:33.090 --> 00:09:35.700
Okay, so let's give it a try.

131
00:09:38.700 --> 00:09:42.450
Let's try and let's see if we get the basics for format.

132
00:09:43.020 --> 00:09:46.860
If we do, then we are ready to send it to the backend.

133
00:09:57.650 --> 00:09:57.760
Okay.

134
00:09:57.910 --> 00:10:00.370
So again, I'm getting this annoying error.

135
00:10:01.780 --> 00:10:03.130
Hopefully you didn't get it.

136
00:10:04.360 --> 00:10:04.900
Module.

137
00:10:04.900 --> 00:10:05.570
Not fine.

138
00:10:06.280 --> 00:10:14.050
So looks like this rich text editor behind this in it uses that so let's try to try installing this

139
00:10:14.050 --> 00:10:23.620
one hopefully that results in and so prosecutor tables let me just search here.

140
00:10:33.600 --> 00:10:33.870
Okay.

141
00:10:33.870 --> 00:10:37.350
So it looks like this is the extension for that.

142
00:10:38.730 --> 00:10:40.540
The Packers enemies.

143
00:10:40.560 --> 00:10:43.950
That's how we look.

144
00:10:43.980 --> 00:10:45.390
I guess it's an insult.

145
00:11:02.330 --> 00:11:04.690
Now this is another model.

146
00:11:04.880 --> 00:11:06.830
All of a sudden, we getting all these errors.

147
00:11:08.080 --> 00:11:12.470
At this time might be a little bit tough to use.

148
00:11:12.740 --> 00:11:14.540
To be honest, let me.

149
00:11:16.790 --> 00:11:17.750
It's such a good one.

150
00:11:17.750 --> 00:11:23.080
But let me remove this upload image and let's see what it does to give it a try.

151
00:11:25.440 --> 00:11:25.770
Yeah.

152
00:11:25.770 --> 00:11:26.790
We still getting that.

153
00:11:27.000 --> 00:11:31.980
So hopefully you don't run into too many issues.

154
00:11:32.550 --> 00:11:37.830
I'm always here to help, so if you have any issues, maybe just try to Google it, find it yourself.

155
00:11:37.830 --> 00:11:40.380
If not, post in the Q&amp;A section.

156
00:11:41.010 --> 00:11:43.860
I try my best to help you out, so react is.

157
00:11:44.820 --> 00:11:48.370
Maybe this another module, maybe we can answer.

158
00:11:48.870 --> 00:11:55.650
Let me go and quickly search if this is actually NPM module.

159
00:11:56.430 --> 00:11:57.360
Yes, it is.

160
00:11:59.250 --> 00:12:02.010
I think it's in service when I assume.

161
00:12:05.160 --> 00:12:06.530
It's around the same.

162
00:12:09.220 --> 00:12:10.480
Well, it's quite a problem.

163
00:12:22.770 --> 00:12:23.190
Okay.

164
00:12:23.400 --> 00:12:24.990
So that's the issue.

165
00:12:25.080 --> 00:12:25.470
All right.

166
00:12:28.530 --> 00:12:28.950
Okay.

167
00:12:28.950 --> 00:12:32.040
So previously we didn't have that issue, and now we do.

168
00:12:32.280 --> 00:12:33.330
So this.

169
00:12:35.850 --> 00:12:37.840
Risk takes over, even though it's awesome.

170
00:12:37.860 --> 00:12:44.640
It might give you some headaches, so hopefully you don't come into so many issues.

171
00:12:44.640 --> 00:12:49.890
But if you do, just like I said, push two questions in a Q and six and I'll try my best.

172
00:12:51.570 --> 00:12:51.780
All right.

173
00:12:51.780 --> 00:12:57.690
So but most of the time, even if you look into the actual error message, sometimes it is helpful because

174
00:12:57.690 --> 00:13:00.030
anytime if you get anything like.

175
00:13:01.590 --> 00:13:04.190
I can't find my budget.

176
00:13:04.560 --> 00:13:07.080
Anytime you get anything like the modern art form.

177
00:13:07.440 --> 00:13:10.590
That definitely means the NBA market is not found.

178
00:13:10.590 --> 00:13:14.760
So if you install, most likely you'll be able to fix them.

179
00:13:16.880 --> 00:13:17.210
All right.

180
00:13:19.160 --> 00:13:22.870
So let's try let's see if that conversed.

181
00:13:23.060 --> 00:13:27.140
To give us the best 64 version of the image.

182
00:13:27.440 --> 00:13:29.270
All right, so let's try.

183
00:13:35.980 --> 00:13:38.410
Just afterwards, we got the error.

184
00:13:42.660 --> 00:13:44.910
A man's best suited for his own defiant.

185
00:13:51.240 --> 00:13:51.600
Okay.

186
00:13:51.600 --> 00:13:56.160
So I just realized what happened to like you can see we have the new promise.

187
00:13:56.580 --> 00:13:57.450
New promise.

188
00:13:57.450 --> 00:13:59.130
We'll either resume our visit.

189
00:13:59.280 --> 00:13:59.520
All right.

190
00:13:59.850 --> 00:14:05.520
So we trying to resolve so when it resolves, it should return that result with the URL.

191
00:14:05.550 --> 00:14:09.720
But you can see here I used the Kali bridge.

192
00:14:09.770 --> 00:14:14.790
So anytime you use continuous, we have to make sure to use return cure, right?

193
00:14:14.790 --> 00:14:16.500
So all the way to not return anything.

194
00:14:16.980 --> 00:14:23.490
Now, technically, I don't have to use calibration because this is just a11 function, so one statement.

195
00:14:23.490 --> 00:14:27.120
So I don't have to I can just remove the card address.

196
00:14:29.070 --> 00:14:29.390
Okay.

197
00:14:30.090 --> 00:14:31.130
So that way it works.

198
00:14:31.140 --> 00:14:34.290
But if you use card abuse, then make sure to use a return.

199
00:14:34.860 --> 00:14:36.720
I'm just going to go like this one.

200
00:14:39.420 --> 00:14:41.130
And let me just try again.

201
00:14:41.610 --> 00:14:44.700
Now, if there's an error, this is what happened.

202
00:14:45.890 --> 00:14:47.150
You can do anything of that.

203
00:14:47.840 --> 00:14:48.380
So.

204
00:14:51.010 --> 00:14:52.360
Let me just try.

205
00:14:55.950 --> 00:14:56.490
Immensely.

206
00:14:56.490 --> 00:14:57.540
We try that again.

207
00:14:59.710 --> 00:15:01.990
Now again, it's there.

208
00:15:02.290 --> 00:15:10.660
But this time you you got the control here basically with the image has been converted into base64 data

209
00:15:10.660 --> 00:15:10.840
here.

210
00:15:11.870 --> 00:15:12.190
Okay.

211
00:15:12.410 --> 00:15:12.770
Awesome.

212
00:15:13.340 --> 00:15:18.260
So this is what we're going to send to our back in our back, and we'll upload this.

213
00:15:18.410 --> 00:15:21.290
Ms. which is in the Ms. 64 format.

214
00:15:21.740 --> 00:15:23.840
So it will be uploaded to Cloud Ordinary.

215
00:15:24.350 --> 00:15:30.980
And as a result, we will get the URL and that's the URL we will save here when we are creating the

216
00:15:30.980 --> 00:15:31.460
post.
