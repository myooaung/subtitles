WEBVTT
1
00:00:00.510 --> 00:00:03.000
So we have the category model here.

2
00:00:03.210 --> 00:00:06.150
We have the schema, we used import syntax.

3
00:00:06.160 --> 00:00:08.490
However, we haven't seen any.

4
00:00:09.550 --> 00:00:13.180
Eric Schmidt That's because this file is sitting there individually.

5
00:00:13.180 --> 00:00:18.550
We actually inputting here, importing anywhere, and we're not using at the moment.

6
00:00:18.550 --> 00:00:20.650
So it's all good so far.

7
00:00:20.650 --> 00:00:27.490
But I will show you, I'll try to show you the errors and then we can to use that ECM library that we

8
00:00:27.490 --> 00:00:29.290
installed in the previous video.

9
00:00:30.100 --> 00:00:30.340
All right.

10
00:00:30.340 --> 00:00:31.330
So that's our model.

11
00:00:31.330 --> 00:00:34.000
Let's close that and let's go to Robert's file.

12
00:00:34.150 --> 00:00:40.990
And just like we have the throughout file here, we're going to create another one, four categories.

13
00:00:40.990 --> 00:00:44.980
Let's create a new file called Category three is.

14
00:00:46.440 --> 00:00:52.200
Now to make things easier, let's just copy this code just so that we didn't have to write the input.

15
00:00:54.930 --> 00:00:57.840
Actually, you can just copy that to imports.

16
00:00:59.380 --> 00:00:59.540
All right.

17
00:00:59.670 --> 00:01:00.240
And then.

18
00:01:01.790 --> 00:01:05.270
We can start writing out routes here.

19
00:01:07.270 --> 00:01:17.730
And then we can export as well some more due to exports equals to broader as it should be and it's a

20
00:01:17.740 --> 00:01:20.230
type of route.

21
00:01:22.340 --> 00:01:25.640
So we can start writing her out.

22
00:01:27.020 --> 00:01:33.620
So let's write a post around because we're going to send the.

23
00:01:35.410 --> 00:01:39.160
The category name to the back end so that we can save in the database.

24
00:01:39.160 --> 00:01:40.810
So that's going to be a post request.

25
00:01:41.080 --> 00:01:45.460
So that post we can just leave it category.

26
00:01:45.460 --> 00:01:46.090
That's fine.

27
00:01:48.190 --> 00:01:51.010
Um, the function or controller function.

28
00:01:51.010 --> 00:01:52.810
Obviously we could write the function here.

29
00:01:52.820 --> 00:01:54.910
Request response.

30
00:01:56.940 --> 00:01:58.360
We could write everything here.

31
00:01:58.380 --> 00:02:00.420
We could bring the model and do all this.

32
00:02:00.660 --> 00:02:03.750
But obviously we don't want to just write everything else.

33
00:02:04.110 --> 00:02:10.400
That's why we have the controllers full write, so we can write our function there and then we can just

34
00:02:10.410 --> 00:02:11.640
input here and use.

35
00:02:12.890 --> 00:02:14.870
So let's call it create.

36
00:02:15.860 --> 00:02:17.390
Let me just call it quits.

37
00:02:19.070 --> 00:02:19.820
Nice and simple.

38
00:02:20.120 --> 00:02:24.830
All right, so we need to create this function in our control.

39
00:02:26.020 --> 00:02:28.730
Okay, so let me first input.

40
00:02:33.670 --> 00:02:41.860
So import create from we go one step up getting set controls and category.

41
00:02:42.250 --> 00:02:43.900
Now obviously we do not have this file.

42
00:02:43.900 --> 00:02:47.410
We don't have this function yet, but that's that's not a problem.

43
00:02:47.410 --> 00:02:54.850
We can go ahead and create one now exclude a new file called category dot JS.

44
00:02:55.420 --> 00:03:01.540
And then here we tried that function export gonna create.

45
00:03:03.470 --> 00:03:04.670
Make it async function.

46
00:03:05.330 --> 00:03:14.350
We have access to request and response object and here we try to save the category, get any errors.

47
00:03:17.350 --> 00:03:18.550
Concha learned the error.

48
00:03:20.270 --> 00:03:20.660
Beautiful.

49
00:03:21.170 --> 00:03:21.450
All right.

50
00:03:21.450 --> 00:03:22.520
So we have the.

51
00:03:24.870 --> 00:03:25.620
Dollar function.

52
00:03:27.340 --> 00:03:33.940
Now this function will save the category in the database.

53
00:03:34.240 --> 00:03:38.350
I said here we could write all this function in here.

54
00:03:40.530 --> 00:03:44.280
All here, but obviously that's the whole point of having a control function.

55
00:03:44.280 --> 00:03:45.750
So our quarters are organized.

56
00:03:46.620 --> 00:03:46.920
All right.

57
00:03:46.920 --> 00:03:53.970
So still, you don't see any errors, even though we're using import and export.

58
00:03:54.260 --> 00:03:54.810
Hmm.

59
00:03:55.560 --> 00:03:56.460
Actually, not.

60
00:03:56.460 --> 00:03:56.940
Not here.

61
00:03:57.060 --> 00:03:58.820
We didn't use imports.

62
00:03:58.830 --> 00:04:07.470
If you want to, you can use import import express from express.

63
00:04:08.630 --> 00:04:10.290
I removed that.

64
00:04:11.800 --> 00:04:12.130
Okay.

65
00:04:12.130 --> 00:04:15.070
So you're using that, but.

66
00:04:16.370 --> 00:04:18.960
It's still there's no problem.

67
00:04:18.980 --> 00:04:21.860
That's because we're not actually using these files anywhere.

68
00:04:22.400 --> 00:04:29.630
As you know, our endpoint for the app, our application is indexed to this unless you import roots.

69
00:04:30.350 --> 00:04:32.120
Obviously, our application does not.

70
00:04:32.450 --> 00:04:32.690
All right.

71
00:04:33.050 --> 00:04:39.050
So let's import and try to apply as middleware, just like we did previously for Arthropods.

72
00:04:39.950 --> 00:04:40.790
So this is important.

73
00:04:40.790 --> 00:04:47.180
Don't forget this one I have forgotten to import a few times before, and I was just wondering why it's

74
00:04:47.180 --> 00:04:47.750
not working.

75
00:04:48.320 --> 00:04:51.710
So make sure you import.

76
00:04:52.070 --> 00:04:55.880
So let's call it category roots.

77
00:04:58.200 --> 00:04:58.590
From.

78
00:05:01.140 --> 00:05:02.330
We go once.

79
00:05:04.540 --> 00:05:04.990
Okay.

80
00:05:05.020 --> 00:05:07.100
So we are right here and would do it.

81
00:05:07.120 --> 00:05:08.740
So we go one step inside.

82
00:05:10.340 --> 00:05:13.170
Rob's category.

83
00:05:15.280 --> 00:05:21.700
It's important since we want to use input, we can do that input category out from.

84
00:05:23.310 --> 00:05:24.320
GROSS category.

85
00:05:25.620 --> 00:05:27.840
Then we can apply it as middleware.

86
00:05:29.800 --> 00:05:39.760
Just like we did before, about to use prefix with Apia and then use the category root as a middleware.

87
00:05:40.060 --> 00:05:40.600
Beautiful.

88
00:05:41.290 --> 00:05:46.240
Know the category, the roads and control fonts.

89
00:05:46.360 --> 00:05:49.330
They are not part of this endpoint.

90
00:05:49.330 --> 00:05:59.050
So let's now have a look at o console and now you can see here we have problem because import export

91
00:05:59.050 --> 00:06:01.030
is not supported by node just by default.

92
00:06:01.030 --> 00:06:02.080
So we have this error.

93
00:06:02.080 --> 00:06:05.320
Syntax error cannot use import statement outside a month.

94
00:06:06.280 --> 00:06:06.590
Okay.

95
00:06:06.610 --> 00:06:09.910
So to fix this one, we have already installed the ESM.

96
00:06:12.050 --> 00:06:13.630
So we have.

97
00:06:13.700 --> 00:06:14.090
Yes.

98
00:06:14.240 --> 00:06:16.410
So we can use that to use that.

99
00:06:16.430 --> 00:06:20.510
We going to use that in our start screen.

100
00:06:21.830 --> 00:06:25.040
This is an index strategies.

101
00:06:26.170 --> 00:06:29.810
I guess that's all we need to do now.

102
00:06:29.810 --> 00:06:32.900
That means we have to make sure to restart the server.

103
00:06:34.020 --> 00:06:34.820
Now if you do.

104
00:06:36.680 --> 00:06:36.840
Okay.

105
00:06:36.980 --> 00:06:37.910
So we.

106
00:06:40.070 --> 00:06:41.190
Category dirt.

107
00:06:41.270 --> 00:06:47.120
This route does not provide an export name to default.

108
00:06:51.730 --> 00:06:52.230
Okay.

109
00:06:52.230 --> 00:06:53.730
So let's go here.

110
00:06:53.760 --> 00:06:55.470
Module exports.

111
00:06:55.470 --> 00:06:56.220
We use that.

112
00:06:56.220 --> 00:07:00.870
That's the only syntax since we're using import export.

113
00:07:00.890 --> 00:07:04.410
Looks like we have to use export default routing.

114
00:07:05.310 --> 00:07:05.540
Okay.

115
00:07:05.790 --> 00:07:05.980
You.

116
00:07:08.810 --> 00:07:09.260
Awesome.

117
00:07:10.470 --> 00:07:11.580
That's beautiful.

118
00:07:13.170 --> 00:07:13.470
All right.

119
00:07:13.470 --> 00:07:15.120
So you can see here, we could.

120
00:07:17.350 --> 00:07:21.150
We can use import and export syntax using the ESM.

121
00:07:26.440 --> 00:07:27.520
Salim closed this.

122
00:07:29.230 --> 00:07:30.760
Let me close the package.

123
00:07:30.880 --> 00:07:31.390
Jason.

124
00:07:32.670 --> 00:07:33.180
And.

125
00:07:34.060 --> 00:07:36.100
Here in our control function.

126
00:07:36.100 --> 00:07:37.880
I want to have a look at it.

127
00:07:38.290 --> 00:07:39.850
So don't look.

128
00:07:40.660 --> 00:07:41.650
Let me just write.

129
00:07:41.950 --> 00:07:47.040
We can do we request to.

130
00:07:47.050 --> 00:07:52.870
Let's see if we are able to receive the data at this name.

131
00:07:54.020 --> 00:08:01.760
If we are able to send this from our client, our rehab to our server, let's have a look at it before

132
00:08:01.760 --> 00:08:05.240
we start saving in the database, we're going to apply the.

133
00:08:06.250 --> 00:08:07.770
And the authentication tech.

134
00:08:07.780 --> 00:08:13.770
So we're going to allow the new category create only by the admin user.

135
00:08:13.780 --> 00:08:15.300
So we're going to implement all that.

136
00:08:15.300 --> 00:08:20.850
We're not just going to save in the database, but we can really have a look at the console just to

137
00:08:20.850 --> 00:08:25.650
make sure everything is what we're doing correctly so far.

138
00:08:26.250 --> 00:08:26.520
All right.

139
00:08:26.520 --> 00:08:26.880
So.

140
00:08:28.120 --> 00:08:29.090
We have the control of.

141
00:08:29.110 --> 00:08:30.420
And so we'll come back to this one.

142
00:08:30.430 --> 00:08:33.430
But now let's quickly go to our client.

143
00:08:35.020 --> 00:08:40.300
Let's go to the admin categories phase and then let's try to make a request to our back end just to

144
00:08:40.300 --> 00:08:42.220
make sure we are on the right track.

145
00:08:42.610 --> 00:08:44.230
So let's import ex use.

146
00:08:50.620 --> 00:08:52.210
And here we going to.

147
00:08:53.370 --> 00:08:54.810
The request using excuse.

148
00:08:55.070 --> 00:09:05.940
So we try charts and the error counts load the error not only console.log, we want to show the error

149
00:09:05.940 --> 00:09:06.640
message as well.

150
00:09:06.690 --> 00:09:13.200
So it's import two from React.

151
00:09:15.460 --> 00:09:18.220
Hot toast, and I think we have to destruct this one.

152
00:09:21.010 --> 00:09:21.580
So here.

153
00:09:22.950 --> 00:09:29.560
We going to sue the editor if there's an issue posted and.

154
00:09:35.000 --> 00:09:37.100
Category create found.

155
00:09:38.470 --> 00:09:40.420
But otherwise we can.

156
00:09:42.210 --> 00:09:43.440
So the success misses.

157
00:09:43.440 --> 00:09:47.890
But before we show the success message, let's try to have a look at it.

158
00:09:47.940 --> 00:09:48.810
Console.log.

159
00:09:51.120 --> 00:09:52.470
Sort of comes along.

160
00:09:52.470 --> 00:09:55.970
We had to make a request using for first.

161
00:09:55.980 --> 00:09:56.190
Right.

162
00:09:56.490 --> 00:10:05.460
But it's destruction data from weed Axios used forced to make a post request to the endpoint that is

163
00:10:05.730 --> 00:10:06.420
category.

164
00:10:07.800 --> 00:10:09.750
So that's the first argument.

165
00:10:09.750 --> 00:10:14.880
The endpoint second argument, we have to send the actual data which is valid.

166
00:10:14.880 --> 00:10:19.770
So let's use that and that should give us console.log data.

167
00:10:20.010 --> 00:10:20.730
You can do that.

168
00:10:25.140 --> 00:10:34.500
And at this point you want to so toast the success category created.

169
00:10:39.340 --> 00:10:39.760
Category

170
00:10:42.160 --> 00:10:43.420
success.

171
00:10:44.040 --> 00:10:44.770
Successful.

172
00:10:45.200 --> 00:10:46.150
So let's show that.

173
00:10:46.720 --> 00:10:55.200
And while we doing this, we may also want to slow the learning so that let's import state from react

174
00:10:55.210 --> 00:11:02.530
so you statehood from we art and then we can create a loading state.

175
00:11:06.220 --> 00:11:14.830
KONST Laurie said no egos to use state to give the default value of funds.

176
00:11:15.370 --> 00:11:20.650
When we submit the form, we set the loading to truth.

177
00:11:24.520 --> 00:11:26.740
And once we get the data.

178
00:11:28.570 --> 00:11:35.500
We should talk notification and then the cert loading defaults if and errors also set loading defaults.

179
00:11:36.190 --> 00:11:41.560
So that way we can show the loading indicator while the categories being saved.

180
00:11:41.770 --> 00:11:46.180
I said might be extremely fast, but is it's good to have have here.

181
00:11:47.230 --> 00:11:54.210
And then on the button we can use loading loading to value.

182
00:11:54.270 --> 00:12:01.930
If the value is true, it'll show this loading spinner thanks for this burn component from and then

183
00:12:01.930 --> 00:12:03.520
it's nice and easy to use.

184
00:12:04.600 --> 00:12:05.080
Beautiful.

185
00:12:05.080 --> 00:12:05.370
Right?

186
00:12:05.370 --> 00:12:07.030
So let's give it a try.

187
00:12:07.270 --> 00:12:13.000
At the moment, we are not getting any data here because from our control function we actually not sending

188
00:12:13.000 --> 00:12:13.330
anything.

189
00:12:13.330 --> 00:12:14.350
We just console.log.

190
00:12:15.930 --> 00:12:16.410
The moment.

191
00:12:16.410 --> 00:12:22.860
So we will not be receiving anything here, but we should still be able to see the name that we send

192
00:12:22.860 --> 00:12:23.360
from here.

193
00:12:23.370 --> 00:12:25.050
We should be able to see that in our.

194
00:12:26.310 --> 00:12:27.300
So console.

195
00:12:28.050 --> 00:12:28.320
All right.

196
00:12:28.410 --> 00:12:29.770
So let's try.

197
00:12:31.070 --> 00:12:33.370
Let's try to react.

198
00:12:33.380 --> 00:12:34.400
Let's hit some meat.

199
00:12:34.910 --> 00:12:37.310
I guess so we see the loading happening.

200
00:12:37.970 --> 00:12:41.400
We're not sending in a response, so obviously it is stuck like that.

201
00:12:41.420 --> 00:12:49.580
However, let's go have a look in De Soto Council and beautifully we have got the value name with the

202
00:12:50.270 --> 00:12:52.790
of the category name react beautifully.

203
00:12:53.600 --> 00:12:54.590
So so far so good.

204
00:12:57.700 --> 00:13:04.330
Now before we actually start saving this in the database, like I said, we want to implement authentication.

205
00:13:04.870 --> 00:13:07.660
We want to take the.

206
00:13:09.990 --> 00:13:10.650
The token.

207
00:13:10.650 --> 00:13:12.210
So from here.

208
00:13:13.280 --> 00:13:19.640
Any time we are making any request to the protected crowds, we should be sending the token, which

209
00:13:19.640 --> 00:13:22.190
is in the context and also in the local stories.

210
00:13:24.810 --> 00:13:25.120
All right.

211
00:13:25.190 --> 00:13:27.110
So we should be sending that context.

212
00:13:28.270 --> 00:13:34.960
So this token and then based on that token, we will verify that token in the back end if the token

213
00:13:34.960 --> 00:13:41.560
is valid, if that is generated by our application and if that is not expired, then we will allow the

214
00:13:41.560 --> 00:13:41.950
user.

215
00:13:43.050 --> 00:13:44.550
To do certain things.

216
00:13:44.850 --> 00:13:50.070
Now, in this case, before we allowed the user to create a category, we also want to make sure that

217
00:13:50.070 --> 00:13:51.510
this user is admin.

218
00:13:51.930 --> 00:13:58.230
So we will go through those security related features in the upcoming videos.
