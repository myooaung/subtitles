WEBVTT
1
00:00:00.540 --> 00:00:00.900
All right.

2
00:00:00.900 --> 00:00:09.900
So we are almost ready to make a request from our client to the server to continue this signup process,

3
00:00:09.900 --> 00:00:15.570
because we have now everything ready to go in the back and we have the route, we have the control function

4
00:00:16.140 --> 00:00:18.000
to handle the sign up and sign in.

5
00:00:18.720 --> 00:00:27.510
And we have got the keys, the central keys and the database from one way to says, which we are ready

6
00:00:27.510 --> 00:00:32.550
in the backend so we can go to the front end and start making a request.

7
00:00:33.080 --> 00:00:33.480
All right.

8
00:00:33.480 --> 00:00:39.060
So I previously stopped my service, so let's make sure we run it.

9
00:00:40.890 --> 00:00:44.400
We always need to make sure you run it both back in in front of it.

10
00:00:44.580 --> 00:00:44.850
Right.

11
00:00:46.110 --> 00:00:47.910
And so we've got them here running.

12
00:00:48.330 --> 00:01:00.090
Now let's come here and let's go to the sign up is it's it is good to client bases sign up to sign a

13
00:01:00.090 --> 00:01:06.570
process that's when we send the user's name imminent password to the back end and back in will save

14
00:01:06.570 --> 00:01:07.770
the user in the database.

15
00:01:08.050 --> 00:01:08.280
Right.

16
00:01:09.520 --> 00:01:09.930
So.

17
00:01:12.150 --> 00:01:23.290
So we have this phone that takes the user name, email and password and we are showing those values

18
00:01:23.290 --> 00:01:23.650
here.

19
00:01:25.360 --> 00:01:28.330
Now, this value, this is what we want to send to the back end.

20
00:01:28.510 --> 00:01:34.960
And for that we can use either fit or excuse to make the has to type request.

21
00:01:34.990 --> 00:01:40.480
We need to make a post request so that we can send this value from the client to server.

22
00:01:40.870 --> 00:01:41.110
All right.

23
00:01:41.410 --> 00:01:45.220
So we're going to use excuse, which is the most popular has to be client.

24
00:01:45.610 --> 00:01:46.960
So we need to install that.

25
00:01:49.400 --> 00:01:51.560
And so we have the space.

26
00:01:51.660 --> 00:01:51.920
Right.

27
00:01:52.610 --> 00:01:57.770
So let's go ahead and start that library as well and beam in.

28
00:01:57.770 --> 00:01:59.840
So excuse me.

29
00:02:00.470 --> 00:02:05.000
And we're going to use another library for showing the toast notification.

30
00:02:05.000 --> 00:02:10.280
For example, when users successfully sign up, we want to show some kind of notification that congratulations,

31
00:02:10.280 --> 00:02:12.830
you have successfully signed up or something like that.

32
00:02:13.040 --> 00:02:21.710
To show the notification, we can use another library that's called the React Heart host.

33
00:02:30.000 --> 00:02:31.030
All right.

34
00:02:31.130 --> 00:02:37.080
So it's nice and easy to use and I'll be showing you how to use this.

35
00:02:37.120 --> 00:02:37.350
Right.

36
00:02:37.350 --> 00:02:46.500
So let's instant asparagus react hot does along with excuse excuse and then we are hot toast.

37
00:02:48.780 --> 00:02:53.640
While it's happening, let's come here and let's work on this unfinished one.

38
00:02:53.640 --> 00:02:54.870
So let me comment that out.

39
00:02:55.350 --> 00:03:03.000
And we're going to import excuse excuse from excuse, by the way, if you need to excuse, let me quickly

40
00:03:03.000 --> 00:03:03.480
show you.

41
00:03:06.990 --> 00:03:11.790
And Anthem, so not in Quito excuse.

42
00:03:15.750 --> 00:03:25.170
So the documentation is very easy to read and it gives you the overall idea of what it does.

43
00:03:25.530 --> 00:03:29.760
It's a promise based has to be claimed for browser and notice.

44
00:03:29.940 --> 00:03:32.850
So you can use excuse in the back end as well.

45
00:03:34.300 --> 00:03:41.200
So we can insulate shoes, then we can make the request like this.

46
00:03:41.200 --> 00:03:44.800
So make it get requests if we want to get some data from the back end.

47
00:03:45.130 --> 00:03:50.830
For example, if you want to get user buy the idea of this from the database, then you would make a

48
00:03:50.830 --> 00:03:57.430
request, something like this so you can see the target request and then you can handle the response,

49
00:03:58.270 --> 00:03:59.050
just the error.

50
00:03:59.620 --> 00:04:01.360
If it is successful, get the data.

51
00:04:02.170 --> 00:04:03.720
You said that's a gift request.

52
00:04:06.130 --> 00:04:07.990
So if you're using async await.

53
00:04:08.230 --> 00:04:11.560
So this is how we're going to make a request which is much cleaner than this one.

54
00:04:12.520 --> 00:04:14.530
So we're going to dig this upwards.

55
00:04:15.640 --> 00:04:17.580
Here's an example of a post request.

56
00:04:17.580 --> 00:04:24.970
So when you make a post request, you first write the endpoint and then you send the data as a second

57
00:04:24.970 --> 00:04:26.980
argument to this post function.

58
00:04:27.220 --> 00:04:28.540
I guess that's the first argument.

59
00:04:28.870 --> 00:04:32.800
Second argument is whatever data you want to post to the back end.

60
00:04:33.130 --> 00:04:37.420
So in case if you want to send the user's first name and last name, this is how you send it.

61
00:04:38.200 --> 00:04:38.440
All right.

62
00:04:38.770 --> 00:04:42.370
So let's go ahead and give it a try.

63
00:04:43.450 --> 00:04:44.860
So we import excuse.

64
00:04:44.860 --> 00:04:47.380
We import the dos.

65
00:04:48.260 --> 00:04:48.860
It is.

66
00:04:49.160 --> 00:04:52.900
Let me show you so we can trust.

67
00:04:53.000 --> 00:04:56.680
This is the function we are going to execute to show the trust.

68
00:04:56.900 --> 00:05:02.920
And then we need to make sure we have this trust component as well in the body of the component.

69
00:05:02.930 --> 00:05:04.970
So you can see this is the symbol component.

70
00:05:05.300 --> 00:05:07.270
It has the toaster in the body.

71
00:05:07.280 --> 00:05:08.300
So this is important.

72
00:05:08.780 --> 00:05:10.760
Otherwise, you don't see your toast notification.

73
00:05:11.230 --> 00:05:16.310
So once you have this in your written body, then you can use toast to.

74
00:05:16.310 --> 00:05:18.650
So some kind of notification like this.

75
00:05:19.640 --> 00:05:20.510
Let's copy this one.

76
00:05:23.420 --> 00:05:24.650
In this space, too.

77
00:05:25.520 --> 00:05:26.600
That's a good excuse.

78
00:05:26.600 --> 00:05:27.770
We've got to start over.

79
00:05:28.100 --> 00:05:30.530
Let's make sure we start the server

80
00:05:33.680 --> 00:05:35.780
so we have the back end running front and running.

81
00:05:36.260 --> 00:05:37.100
Let's continue here.

82
00:05:37.280 --> 00:05:43.840
So what we want to do is we want to make a post request because we want to post this data sign of data.

83
00:05:43.850 --> 00:05:47.760
You just name, email and password to the endpoint which is here.

84
00:05:47.780 --> 00:05:50.030
Let's have a look in our server routes.

85
00:05:50.600 --> 00:05:55.040
Also, he can see here we have this route called Sign Up.

86
00:05:56.730 --> 00:06:03.520
To support Trump and whatever request you send, whatever donation will be processed in this control

87
00:06:03.530 --> 00:06:03.890
function.

88
00:06:04.100 --> 00:06:04.410
Right.

89
00:06:05.270 --> 00:06:11.480
And we also need to make sure to prefix anything with less API because that's how we have applied our

90
00:06:11.750 --> 00:06:14.240
middleware prefixed with API.

91
00:06:14.750 --> 00:06:19.130
All right, so let's go through it one more time.

92
00:06:19.370 --> 00:06:20.300
So sign a function.

93
00:06:20.300 --> 00:06:22.610
Let's have a look what we have in this kind of function.

94
00:06:22.640 --> 00:06:26.740
This is the controller and a controller in the author file.

95
00:06:26.750 --> 00:06:31.760
And this is the component that is responsible to save the user in the database.

96
00:06:31.790 --> 00:06:32.000
All right.

97
00:06:32.590 --> 00:06:38.400
Before we do anything, let me show you by some console.log, request, import.

98
00:06:38.540 --> 00:06:45.920
So whatever data you send from the client to the server using has to be library like Axios of it.

99
00:06:46.490 --> 00:06:49.310
You will receive that data in the request body.

100
00:06:49.970 --> 00:06:56.660
All right, so let me use return keyword so that this all this code doesn't execute because we don't

101
00:06:56.660 --> 00:06:58.940
want to save the user in the database.

102
00:06:58.940 --> 00:07:02.090
We want to check out what we are getting in the body.

103
00:07:02.150 --> 00:07:07.280
Because I want to make you fully understand before we just get.

104
00:07:09.220 --> 00:07:13.000
Implement the functionality because you need to understand how everything is working, right?

105
00:07:13.000 --> 00:07:13.570
So that's right.

106
00:07:13.600 --> 00:07:17.260
Let's have a look how the data is sent from the client.

107
00:07:18.730 --> 00:07:22.660
This information ought to be the type, how this is sent to the backend.

108
00:07:23.020 --> 00:07:24.610
This is how you will be able to see.

109
00:07:25.040 --> 00:07:25.190
Right.

110
00:07:25.480 --> 00:07:30.060
So we make a request to sign up in the sign up front.

111
00:07:30.430 --> 00:07:34.450
So let's go to the frontend, sign a piece and make a request.

112
00:07:34.540 --> 00:07:37.480
So I will use the async await.

113
00:07:38.560 --> 00:07:44.900
So the use the async await your functions have to prefix with the word async.

114
00:07:45.160 --> 00:07:45.400
Right.

115
00:07:45.790 --> 00:07:47.230
So asynchronous function.

116
00:07:47.740 --> 00:07:49.890
So this is the array of functions.

117
00:07:50.120 --> 00:07:54.070
You prefix this function with async, then you can use a way to cure.

118
00:07:54.250 --> 00:07:59.800
So we use try and get to catch any errors.

119
00:08:01.870 --> 00:08:04.420
If we've got an error, we can console.log the error.

120
00:08:04.690 --> 00:08:06.730
We can show the toast notification as well.

121
00:08:07.420 --> 00:08:10.450
So a toast notification we can do.

122
00:08:10.460 --> 00:08:10.900
Right.

123
00:08:10.930 --> 00:08:12.940
Let's write to dirt.

124
00:08:13.420 --> 00:08:19.570
And by the way, you can use toast that will give you the plain box.

125
00:08:19.720 --> 00:08:24.070
But if you want to source a red colour, then you would use toast.

126
00:08:24.070 --> 00:08:24.400
Enter.

127
00:08:24.760 --> 00:08:27.700
If you want to show a nice blue toast.

128
00:08:27.850 --> 00:08:29.410
Then you can use success.

129
00:08:29.620 --> 00:08:31.390
And so let's use toast here.

130
00:08:33.070 --> 00:08:35.260
And we can write something like sign.

131
00:08:35.260 --> 00:08:36.190
Sign failed.

132
00:08:37.270 --> 00:08:37.960
Try again.

133
00:08:39.280 --> 00:08:40.740
All right, so let's try.

134
00:08:42.360 --> 00:08:49.260
So we want to make a request using Axios and that will give us some data that will give us some data

135
00:08:49.740 --> 00:08:55.620
cost the response in its right response.

136
00:08:55.950 --> 00:09:00.130
And in that response you will have the property called to.

137
00:09:01.470 --> 00:09:05.850
I guess that's the reason you could actually do data destructor directly.

138
00:09:06.120 --> 00:09:12.180
But let me show you using response first and then we will use Destructor in bit later.

139
00:09:13.450 --> 00:09:17.570
So we await for the excuse to make a post request.

140
00:09:17.590 --> 00:09:19.330
Now, this post is a function.

141
00:09:20.440 --> 00:09:21.430
It is a function.

142
00:09:21.550 --> 00:09:22.630
It takes two out of this.

143
00:09:22.630 --> 00:09:24.700
First one is the the endpoint.

144
00:09:24.710 --> 00:09:26.200
What do you want to make a request?

145
00:09:26.230 --> 00:09:30.430
In our case, that is less API, less sign up.

146
00:09:30.760 --> 00:09:31.720
That's the end point.

147
00:09:32.320 --> 00:09:33.550
I get to this first argument.

148
00:09:33.550 --> 00:09:34.330
Second argument.

149
00:09:34.330 --> 00:09:35.980
What do you want to push toward today?

150
00:09:35.980 --> 00:09:36.700
You want to send.

151
00:09:37.060 --> 00:09:40.460
So in that case, we want to send all the values, right?

152
00:09:40.480 --> 00:09:45.130
So that includes user name, email, password, whatever the user entered in the phone.

153
00:09:45.940 --> 00:09:46.210
All right.

154
00:09:46.210 --> 00:09:47.230
So that's how we send.

155
00:09:47.770 --> 00:09:48.100
No.

156
00:09:51.520 --> 00:09:52.780
Are we going to do a couple of things here?

157
00:09:52.790 --> 00:09:58.240
We can show the subsystems and redirect the user to sign in base.

158
00:09:58.960 --> 00:10:03.370
But for the moment, I just want to have a look what we get in the response.

159
00:10:03.610 --> 00:10:05.470
So we need to understand this 1/1.

160
00:10:05.830 --> 00:10:09.370
So we take some time here, but later on we will move a little bit faster.

161
00:10:09.850 --> 00:10:13.450
But since this is the first time we are trying excuse we.

162
00:10:13.450 --> 00:10:14.710
I'm just taking it slow.

163
00:10:15.790 --> 00:10:16.090
All right.

164
00:10:16.300 --> 00:10:22.480
So we make a request that will give us the response, whatever we get, and that one, we are console.log

165
00:10:22.600 --> 00:10:24.430
because we want to see how everything is working.

166
00:10:24.830 --> 00:10:30.250
Now, at the at the moment we will not get any response because in our control function you can see

167
00:10:30.250 --> 00:10:31.480
we are not returning anything.

168
00:10:31.480 --> 00:10:35.500
We are not returning any kind of JSON response, we just console.log.

169
00:10:35.650 --> 00:10:42.700
So at the moment you will not get anything in the client, but you should be able to see the request

170
00:10:42.700 --> 00:10:49.000
body, which should show you all the user information that is sent from the client and received in the

171
00:10:49.000 --> 00:10:50.440
server here.

172
00:10:51.850 --> 00:10:52.050
Okay.

173
00:10:52.330 --> 00:10:55.000
So let's make sure we get that before we move forward.

174
00:10:55.750 --> 00:10:56.410
So let's try

175
00:10:59.620 --> 00:11:00.000
right.

176
00:11:02.040 --> 00:11:02.510
Right.

177
00:11:02.560 --> 00:11:04.170
And Jim end up.

178
00:11:07.090 --> 00:11:08.550
All right, so let's hit register.

179
00:11:08.710 --> 00:11:10.120
We don't get any response here.

180
00:11:10.120 --> 00:11:10.750
That's fine.

181
00:11:11.350 --> 00:11:17.380
But let's take if we got this data name, email and password in the back end.

182
00:11:18.360 --> 00:11:19.060
Let's have a look.

183
00:11:20.620 --> 00:11:21.370
Okay.

184
00:11:21.370 --> 00:11:23.360
Unfortunately, we did it again.

185
00:11:23.380 --> 00:11:23.650
See?

186
00:11:26.160 --> 00:11:26.490
Thank you.

187
00:11:26.560 --> 00:11:28.450
So when something like that happens.

188
00:11:30.340 --> 00:11:31.560
We have to take.

189
00:11:31.750 --> 00:11:33.490
First of all, let's make sure.

190
00:11:34.610 --> 00:11:35.780
So this is going.

191
00:11:37.400 --> 00:11:40.130
So it's good to design a base.

192
00:11:40.400 --> 00:11:41.240
So unfinished.

193
00:11:41.420 --> 00:11:42.500
It's unfinished.

194
00:11:47.200 --> 00:11:48.320
Let's come here.

195
00:11:48.880 --> 00:11:50.500
Open the inspector.

196
00:11:50.830 --> 00:11:55.000
This is how you debug when things don't go according to plan.

197
00:11:55.010 --> 00:11:56.200
Let's see here.

198
00:11:56.200 --> 00:11:58.360
And you can see we have some error.

199
00:11:59.630 --> 00:12:00.910
For for not far.

200
00:12:00.950 --> 00:12:01.420
It's to win.

201
00:12:01.440 --> 00:12:08.120
Whenever you get four four error messages that means the the you are told that you are making a request

202
00:12:08.120 --> 00:12:08.930
is not fun.

203
00:12:09.170 --> 00:12:10.100
Now, why is that happening?

204
00:12:10.130 --> 00:12:14.500
That's because we just writing's less API less.

205
00:12:14.870 --> 00:12:19.880
So what the browser is doing is making requests to the same domain.

206
00:12:20.630 --> 00:12:26.390
Localhost 3000 less ips less than that's what it is making request.

207
00:12:26.390 --> 00:12:27.860
And as a result agency.

208
00:12:28.760 --> 00:12:29.540
We have the error.

209
00:12:29.660 --> 00:12:30.520
I can go here.

210
00:12:30.620 --> 00:12:31.370
Network dep.

211
00:12:32.510 --> 00:12:33.230
Actually, we didn't.

212
00:12:33.590 --> 00:12:35.120
Let's try again.

213
00:12:35.150 --> 00:12:37.790
You can see you've got the sign up.

214
00:12:38.270 --> 00:12:42.080
And if you go to the headers, you can see.

215
00:12:44.260 --> 00:12:47.170
The request headers to request headers.

216
00:12:47.890 --> 00:12:51.190
We making request to look almost 3000.

217
00:12:57.470 --> 00:13:00.410
That's a for making a request.

218
00:13:01.840 --> 00:13:03.340
Our guests should be here in general.

219
00:13:03.640 --> 00:13:08.170
So you can see amid request to localhost three thousands less apps less.

220
00:13:08.380 --> 00:13:12.420
So we basically made a request to the application itself here.

221
00:13:12.700 --> 00:13:15.100
That's because we didn't supply the full U error.

222
00:13:15.940 --> 00:13:19.540
That's why that base obviously doesn't exist with the method of post.

223
00:13:19.600 --> 00:13:20.920
So that's how we got this error.

224
00:13:21.160 --> 00:13:26.380
So whatever I'm saying about how you double this error, this is extremely important and you need to

225
00:13:27.070 --> 00:13:30.250
get comfortable doing such a debugging throughout the course.

226
00:13:30.250 --> 00:13:32.350
So I guess to just pay close attention to it.

227
00:13:32.950 --> 00:13:37.330
So you can see we made a request here, but obviously that's a wrong.

228
00:13:37.900 --> 00:13:38.380
You got it.

229
00:13:38.410 --> 00:13:40.840
So we need to make sure we give the full path to it.

230
00:13:41.440 --> 00:13:44.380
The request is sent to localhost 8000.

231
00:13:44.440 --> 00:13:44.650
Right.

232
00:13:44.650 --> 00:13:46.150
So that's where our server it's.

233
00:13:46.720 --> 00:13:58.090
So let's provide the full path has to be called SLAs less localhost colon 8000 less API less signup.

234
00:13:58.330 --> 00:14:05.440
Now this time the request should be sent to our server correctly and we should be able to see it in

235
00:14:05.440 --> 00:14:06.010
the console.

236
00:14:06.100 --> 00:14:06.700
I'm pretty sure.

237
00:14:06.710 --> 00:14:07.950
Well, then, let's try it.

238
00:14:07.960 --> 00:14:09.220
Let's hit register.

239
00:14:10.330 --> 00:14:11.950
So this time you didn't get an error.

240
00:14:12.100 --> 00:14:12.650
You can see.

241
00:14:13.660 --> 00:14:14.590
And if you click here.

242
00:14:16.730 --> 00:14:18.830
Now it has gone to the correct character.

243
00:14:19.970 --> 00:14:23.960
You can sign up and you should come all the way down.

244
00:14:28.530 --> 00:14:30.170
Request headers.

245
00:14:30.620 --> 00:14:31.170
Payload.

246
00:14:31.920 --> 00:14:37.950
If you click on the payload, you will see we are sending this data as a payload as well, which will

247
00:14:37.950 --> 00:14:39.900
be sent in the request body.

248
00:14:40.120 --> 00:14:47.520
So there are two types of things we can send when we make a request in the request headers and body.

249
00:14:48.150 --> 00:14:54.510
Usually in headers we send some decent work tokens, things like that, which will be used to authenticate

250
00:14:54.510 --> 00:14:55.020
the user.

251
00:14:55.050 --> 00:14:56.790
We will cover that later in the course.

252
00:14:57.180 --> 00:15:03.630
So that will be sending the headers request heads and then in data we will be sending the request on

253
00:15:03.630 --> 00:15:03.930
board.

254
00:15:04.560 --> 00:15:08.430
So that's fine if you go have a look in the back end.

255
00:15:08.430 --> 00:15:09.630
Now, that is great.

256
00:15:09.660 --> 00:15:18.270
You can see here we got this data in the request body name, imminent password from client from local

257
00:15:18.420 --> 00:15:21.660
3000 to a different domain localhost 8000.

258
00:15:21.660 --> 00:15:24.650
We were able to send this data and this is great listed.

259
00:15:24.690 --> 00:15:31.560
That's how plant and server communicates using this decent, decent data system.

260
00:15:33.560 --> 00:15:37.520
I guess a go to controller, you can see this is what you are seeing here.

261
00:15:38.030 --> 00:15:38.780
So that's great.

262
00:15:39.410 --> 00:15:45.980
Now you understand how you send data from client to server and if there is an issue issues how you dbo

263
00:15:46.020 --> 00:15:46.280
right.

264
00:15:46.280 --> 00:15:54.500
How you're taking the console, how you take the network dev, I guess how you take the hairs on which

265
00:15:55.460 --> 00:15:56.240
endpoint it is.

266
00:15:56.240 --> 00:16:00.890
Miggy sent the request and sent and what payload has been sent.

267
00:16:01.050 --> 00:16:04.130
Now if there was any response, you would be able to see here as well.

268
00:16:04.370 --> 00:16:08.150
At the moment we don't have any response because we are not returning anything.

269
00:16:08.630 --> 00:16:10.040
But so far so good.

270
00:16:10.040 --> 00:16:13.940
You've got the basic idea of hosting request and some debugging.

271
00:16:14.250 --> 00:16:19.670
Now in the following lecture, we can go ahead and send the user in the database.
