WEBVTT
1
00:00:00.360 --> 00:00:00.660
All right.

2
00:00:00.660 --> 00:00:07.800
So we had a very long talk in the previous lecture about making a push to request to use debugging.

3
00:00:08.250 --> 00:00:15.240
But I had to I had to go in a very detailed explanation because many students may be new to it.

4
00:00:15.660 --> 00:00:15.960
All right.

5
00:00:16.200 --> 00:00:25.110
So we saw how the data will be sent from the client to server in a request body and how you could access

6
00:00:25.110 --> 00:00:26.400
that in your controller.

7
00:00:26.580 --> 00:00:33.090
So once you are able to access that, the next thing you can do is apply some validation because we

8
00:00:33.090 --> 00:00:37.590
want to make sure we get the name, email and password and password should be at least six characters

9
00:00:37.590 --> 00:00:38.700
long in this case.

10
00:00:39.390 --> 00:00:44.100
So in those cases, we want to apply some tech, make sure we got the data we need.

11
00:00:44.430 --> 00:00:47.760
If we don't get it, then we need to send some error messages, right?

12
00:00:47.760 --> 00:00:55.290
So when we send the JSON, miss it, we can grab this in the frontend and display that to the user.

13
00:00:55.410 --> 00:00:55.650
Right?

14
00:00:56.370 --> 00:01:03.240
Then if everything is well, then we find the user from the database based on this email.

15
00:01:03.300 --> 00:01:11.010
Because if the user has already been created based on the email, then we can recreate another user

16
00:01:11.010 --> 00:01:12.270
with the same email rights.

17
00:01:12.270 --> 00:01:19.440
The email has to be unique, so that's why we're using the user model and using this find one function.

18
00:01:19.680 --> 00:01:22.890
Now Mongoose gives us a lot of these functionalities.

19
00:01:22.890 --> 00:01:29.610
The MongoDB gives us a lot of these functionalities which we can use to easily query the database in

20
00:01:29.610 --> 00:01:33.000
a find something out, update, delete things like that.

21
00:01:33.540 --> 00:01:37.230
So you can see here we have tried to find the user by the email.

22
00:01:37.350 --> 00:01:40.530
So if we find that value will be here, right?

23
00:01:40.590 --> 00:01:46.470
So if we have that value, then we need to send some kind of error message saying that email is taken.

24
00:01:46.830 --> 00:01:47.100
Right?

25
00:01:47.490 --> 00:01:51.720
Otherwise, we can continue further to send the user in the database.

26
00:01:51.750 --> 00:01:54.660
So in that case, you'd never want to save the plane password.

27
00:01:54.660 --> 00:01:56.130
That's you shouldn't be doing that.

28
00:01:56.430 --> 00:01:59.250
We always need to has the password for security reasons.

29
00:01:59.490 --> 00:02:07.350
So even in case your application is compromised, the we will now go to your data.

30
00:02:07.380 --> 00:02:11.070
They will still not be able to see the user's password plainly.

31
00:02:11.130 --> 00:02:11.430
Right.

32
00:02:11.430 --> 00:02:13.050
So passing is important.

33
00:02:13.050 --> 00:02:18.120
So for that we have hashed the password using the decrypt function I showed you.

34
00:02:18.960 --> 00:02:21.330
This function is in the helper file.

35
00:02:25.460 --> 00:02:30.630
Has passwords to this function responsible for assessing the password using bitcoins.

36
00:02:31.310 --> 00:02:36.830
All right, so we has the password and then we go ahead and create a new user.

37
00:02:36.830 --> 00:02:38.760
And creating a new user is pretty easy.

38
00:02:38.780 --> 00:02:46.700
You can t use the new cured and use this user model, new user, and then you give all the data necessary

39
00:02:46.700 --> 00:02:47.690
to create a user.

40
00:02:48.110 --> 00:02:50.900
In that case, we give the name, email and password.

41
00:02:51.650 --> 00:02:58.130
Now you can see I didn't write like this because if the name and value is simple, you don't have to

42
00:02:58.130 --> 00:02:59.980
write in this clearly like that.

43
00:03:00.870 --> 00:03:05.170
So we send the name email password, which will be the last one.

44
00:03:05.180 --> 00:03:09.870
That one will be used and we use dot save altogether.

45
00:03:09.900 --> 00:03:14.210
So in one line you'll be able to create a new user and saving that element.

46
00:03:15.170 --> 00:03:22.610
Now once you send the user, you want to send the response to the back to the application in the front

47
00:03:22.610 --> 00:03:28.850
end so that once the user logs in, maybe we want to save this user information in the global context,

48
00:03:28.860 --> 00:03:31.160
maybe saving the local stories, right?

49
00:03:31.160 --> 00:03:35.460
So that when they reload the piece, we still know that we have to use it.

50
00:03:35.690 --> 00:03:35.990
All right.

51
00:03:36.260 --> 00:03:42.290
So for things like that, which we will be exploring more later, we need to send the token as well.

52
00:03:42.860 --> 00:03:48.560
So we save the user, we save the user and we create the token.

53
00:03:49.040 --> 00:03:54.230
We use the data, we use the sign function to generate the same token.

54
00:03:54.710 --> 00:03:59.630
Now, when you generate stupid couple of arguments you use, the first one you can see is the ID.

55
00:04:00.440 --> 00:04:07.730
In our case, we have used the user I.D. You can see when we create a new user, the ID will be automatically

56
00:04:07.730 --> 00:04:10.350
generated by MongoDB.

57
00:04:10.600 --> 00:04:13.070
Every thing is written in the MongoDB.

58
00:04:13.070 --> 00:04:15.310
You will get this unique I.D., right?

59
00:04:15.620 --> 00:04:19.100
So that I.D. we take and we use that to create the token.

60
00:04:19.700 --> 00:04:21.620
Now, the benefit of this one is later.

61
00:04:21.620 --> 00:04:28.190
When you decode the token right way to decode, you will immediately be able to get this I.D..

62
00:04:28.460 --> 00:04:33.830
Now, when you get the I.D., then you know how to find that user from the database.

63
00:04:33.830 --> 00:04:39.110
Now you can query the database based on this user's I.D. and find more information about the user,

64
00:04:39.260 --> 00:04:41.060
everything that is said in the database.

65
00:04:41.390 --> 00:04:41.600
All right.

66
00:04:41.960 --> 00:04:43.880
So this I.D. will be really useful later.

67
00:04:44.780 --> 00:04:49.240
So when you create the same token first argument, we give you some data.

68
00:04:49.250 --> 00:04:51.080
In our case, we just using the user.

69
00:04:51.170 --> 00:04:53.840
82nd argument is the secret.

70
00:04:53.870 --> 00:05:02.090
Now, this secret should be known to you back end only the you shouldn't expose this to anyone.

71
00:05:02.270 --> 00:05:03.650
Anyone should know this.

72
00:05:03.650 --> 00:05:11.990
Otherwise they might use the secret to decode your data with token to any tokens that has been issued

73
00:05:11.990 --> 00:05:18.260
by your server that can be compromised if someone else knows the secret.

74
00:05:18.920 --> 00:05:20.030
So this is really important.

75
00:05:20.480 --> 00:05:29.810
You keep it safe and this is some very long encrypted words so that it's very hard to guess right to

76
00:05:29.870 --> 00:05:38.960
some complicated loads in numbers you use to create a secret which is here is just some random, you

77
00:05:38.960 --> 00:05:43.220
know, random letters and numbers to is that so it's hard to guess.

78
00:05:44.300 --> 00:05:48.410
I guess the first argument is the user ID anything, any data is.

79
00:05:49.070 --> 00:05:51.680
Second argument is the secret to you have to guess secret.

80
00:05:51.890 --> 00:05:56.690
And third argument is how long do you want this talking to be valid?

81
00:05:57.230 --> 00:05:58.700
Right to decent work.

82
00:05:58.700 --> 00:06:03.230
Don't they have the validity of the time?

83
00:06:03.500 --> 00:06:04.940
You can issue for one hour.

84
00:06:04.970 --> 00:06:05.840
One minute.

85
00:06:06.080 --> 00:06:09.580
You know, seven days, seven weeks, seven months, seven years.

86
00:06:09.590 --> 00:06:10.430
You know, there's no limit.

87
00:06:10.910 --> 00:06:15.470
So in our case, we have issued the token and it will expire in seven days.

88
00:06:15.830 --> 00:06:18.590
So I'm just saying this token will no longer be valid.

89
00:06:19.040 --> 00:06:19.220
All right.

90
00:06:19.400 --> 00:06:21.200
So that's how we generate a token.

91
00:06:21.380 --> 00:06:21.590
Well.

92
00:06:21.860 --> 00:06:29.030
And then finally, it's time to send the this all this information to the client.

93
00:06:29.210 --> 00:06:31.190
Once the signup has been successful.

94
00:06:31.490 --> 00:06:37.880
So in that case, we send the user and the token you can see we are sending responses and sending the

95
00:06:37.880 --> 00:06:39.470
token and we sending the user.

96
00:06:39.830 --> 00:06:44.120
Now, instead of saving the whole, you are sending the whole user, which we got here.

97
00:06:44.930 --> 00:06:51.980
I have done some destruction and got the rest of the properties only like this.

98
00:06:53.690 --> 00:06:58.460
The reason I'm doing this is because if I didn't do this, then I will be sending all the information

99
00:06:58.460 --> 00:07:01.160
about the user, including behest password.

100
00:07:01.550 --> 00:07:07.700
Now that's not something you want to send to the client after the log in because that that information

101
00:07:07.700 --> 00:07:12.800
will be saved in the local stories, in the application context, which can be misused.

102
00:07:12.950 --> 00:07:13.220
Right.

103
00:07:13.490 --> 00:07:15.500
So we don't need to expose that to anyone.

104
00:07:15.950 --> 00:07:20.240
So that's why we use this risk operator, just like a spirit operator.

105
00:07:20.780 --> 00:07:27.740
We use the wrist operator to get the password and the rest of the properties from the user doc.

106
00:07:28.940 --> 00:07:29.240
All right.

107
00:07:29.600 --> 00:07:37.730
So this user that we get after serving in the database that contains password, name, email, all these

108
00:07:37.730 --> 00:07:39.770
are the properties we don't want.

109
00:07:39.950 --> 00:07:42.740
We want all these are properties except password.

110
00:07:42.770 --> 00:07:47.090
So we get the password and everything else we call the rest.

111
00:07:47.360 --> 00:07:49.040
I guess it is called wrist operator.

112
00:07:49.430 --> 00:07:50.510
You can even google it.

113
00:07:50.510 --> 00:07:53.150
It's a modern JavaScript if you want to learn more about it.

114
00:07:53.160 --> 00:07:58.850
So just like the mint, it gets the rest of the values from the object.

115
00:07:59.050 --> 00:07:59.270
Right.

116
00:07:59.570 --> 00:08:02.150
And that object, in our case, a user dump.

117
00:08:03.440 --> 00:08:07.970
And then we just send the rest, excluding the password.

118
00:08:08.990 --> 00:08:09.290
All right.

119
00:08:09.290 --> 00:08:14.780
And then we just have to get if there's an error, we console.log so that we can figure out what is

120
00:08:14.780 --> 00:08:15.110
wrong.

121
00:08:15.450 --> 00:08:15.680
Right.

122
00:08:15.680 --> 00:08:19.700
So very lengthy explanation, but basically it's pretty straightforward.

123
00:08:20.840 --> 00:08:22.040
We do some that it isn't.

124
00:08:22.340 --> 00:08:23.870
We take if user exist.

125
00:08:23.870 --> 00:08:30.260
If it doesn't, we has the password created user save in the database, generate the token and send

126
00:08:30.260 --> 00:08:32.360
the token and user to the client.

127
00:08:33.320 --> 00:08:35.390
Now we can try this time.

128
00:08:35.390 --> 00:08:35.960
It's a rule.

129
00:08:36.620 --> 00:08:47.000
And you may also want to check out how the user is saved in the database so you can console log user

130
00:08:47.000 --> 00:08:50.630
saved in sign the user.

131
00:08:50.780 --> 00:08:52.280
So you can console.log later.

132
00:08:52.280 --> 00:08:53.330
We can comment this decide.

133
00:08:54.500 --> 00:08:55.820
Okay, let's give it a try.

134
00:08:56.660 --> 00:08:57.020
I guess.

135
00:08:57.020 --> 00:09:01.580
Orion run the mail dot com and just password.

136
00:09:03.100 --> 00:09:07.090
All right, let's try registering the user.

137
00:09:09.590 --> 00:09:12.620
So here, let's hit submit.

138
00:09:13.490 --> 00:09:15.260
All right, so we got the response.

139
00:09:17.270 --> 00:09:24.290
So we console.log the response in our client you can to console.log the response and we got the response

140
00:09:24.290 --> 00:09:26.660
and our response has this property called data.

141
00:09:27.110 --> 00:09:32.440
All right, so next time we can destructor data directly, you always get this data property when you

142
00:09:32.450 --> 00:09:38.660
are using X years to make a request and then you can see the data content.

143
00:09:39.920 --> 00:09:43.040
By the way, this request, contents, all this other information as well.

144
00:09:43.640 --> 00:09:46.400
But the one we are interested is the status.

145
00:09:46.400 --> 00:09:52.460
If you click on the data, you see we got the token to this move token and we got the user which has

146
00:09:52.460 --> 00:09:54.860
been just created, saved in the database.

147
00:09:54.860 --> 00:10:02.830
He and he gives an email named role of did it add and the unique ID that is generated by MongoDB.

148
00:10:03.140 --> 00:10:03.740
MongoDB.

149
00:10:04.220 --> 00:10:09.050
All right so this beautiful we got the user it has been saved in the database.

150
00:10:10.240 --> 00:10:10.600
Awesome.

151
00:10:12.220 --> 00:10:20.080
And you see this post request and the the endpoint and the status quo 200, which means success in how

152
00:10:20.080 --> 00:10:22.860
long it takes 364 milliseconds.

153
00:10:22.870 --> 00:10:23.110
Right.

154
00:10:23.380 --> 00:10:31.070
So all this information you see, because we applied that middleware called Modern Mode.

155
00:10:31.270 --> 00:10:35.410
So that's the reason you getting all this information, which is very helpful.

156
00:10:35.950 --> 00:10:36.220
All right.

157
00:10:36.220 --> 00:10:38.990
So you can see when the user has been saved in the database.

158
00:10:39.220 --> 00:10:42.020
We control logged and we saw that information.

159
00:10:42.040 --> 00:10:46.420
Now, this this user has the password, which is the best version.

160
00:10:46.480 --> 00:10:48.010
So when we send.

161
00:10:49.320 --> 00:10:50.490
It as a response.

162
00:10:50.790 --> 00:10:58.830
We didn't include that password because you can see we don't have the password because we use the rest

163
00:10:58.830 --> 00:11:01.890
operator lists.

164
00:11:02.910 --> 00:11:04.530
All right, beautiful.

165
00:11:05.980 --> 00:11:12.040
Now, the next thing we want to do is this government is out to control.

166
00:11:13.290 --> 00:11:20.250
Now when we successfully log in the user race to the user, we want to do certain things effectively.

167
00:11:20.250 --> 00:11:26.190
We want to reduce the user to another base, maybe sign in base, maybe we want to save this information

168
00:11:26.190 --> 00:11:28.770
somewhere in the global context, right?

169
00:11:28.770 --> 00:11:34.560
So that we can use it later when the user reloads the base or come back to this application that time

170
00:11:34.660 --> 00:11:36.900
so we can retrieve the user's information.

171
00:11:36.900 --> 00:11:37.200
Right?

172
00:11:37.410 --> 00:11:44.460
So for doing things like that, we can use this data and save in the global stories context.

173
00:11:44.460 --> 00:11:50.550
We can use context to create a global stories or we can save it in the local stories here.

174
00:11:51.840 --> 00:11:53.160
Application Local Shows.

175
00:11:53.160 --> 00:11:55.380
I will be showing you a lot of stories.

176
00:11:55.380 --> 00:11:58.530
You will be saving values by the key.

177
00:11:58.860 --> 00:12:00.570
By the key and some values.

178
00:12:00.600 --> 00:12:00.800
All right.

179
00:12:00.810 --> 00:12:07.830
So we're going to explore all of that and we can so some touch notifications as well here.

180
00:12:08.910 --> 00:12:13.080
Now, before we do all that, let's quickly have a look into the MongoDB as well.

181
00:12:13.320 --> 00:12:15.420
So I'm logged into MongoDB.

182
00:12:15.810 --> 00:12:20.160
This is the database, the project name we used for our database.

183
00:12:22.310 --> 00:12:25.910
And here we should be able to browse collection.

184
00:12:26.570 --> 00:12:27.830
And there you should see this.

185
00:12:27.830 --> 00:12:30.140
User data has been just created.

186
00:12:31.700 --> 00:12:34.060
So we have the posts and users.

187
00:12:34.340 --> 00:12:37.100
So first we don't have anything at the moment.

188
00:12:40.030 --> 00:12:42.790
Post 11 is a stone city.

189
00:12:47.420 --> 00:12:48.350
Models.

190
00:12:50.300 --> 00:12:50.420
Okay.

191
00:12:50.570 --> 00:12:52.220
So we don't have even the post model.

192
00:12:53.460 --> 00:12:54.890
Not sure it's there.

193
00:12:56.200 --> 00:12:58.490
You know, maybe it was created by default.

194
00:12:59.090 --> 00:13:00.560
I guess here in the users.

195
00:13:02.250 --> 00:13:03.540
Next questions.

196
00:13:05.950 --> 00:13:10.400
We're both colleagues and so users we should see that newly created user.

197
00:13:12.430 --> 00:13:16.000
Here you can see why that email look beautiful.

198
00:13:17.260 --> 00:13:17.620
All right.

199
00:13:19.360 --> 00:13:21.760
Now let's continue here in the client.

200
00:13:22.870 --> 00:13:25.270
Let's see how we're going to handle the response here.
