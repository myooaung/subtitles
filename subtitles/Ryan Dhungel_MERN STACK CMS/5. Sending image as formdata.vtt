WEBVTT
1
00:00:00.480 --> 00:00:00.690
All right.

2
00:00:00.720 --> 00:00:02.220
So let's continue with the props.

3
00:00:02.670 --> 00:00:06.150
So here, what we want to do is we want to follow the documentation.

4
00:00:06.390 --> 00:00:08.190
Name X and headers on chain.

5
00:00:08.620 --> 00:00:08.910
All right.

6
00:00:09.420 --> 00:00:13.170
So, name, name.

7
00:00:13.170 --> 00:00:14.670
We just use file.

8
00:00:15.180 --> 00:00:20.280
Now, this name will be accessible in the back end, so you'll see how this works.

9
00:00:20.490 --> 00:00:25.410
So file if you call it folder or something else, then you have to access a different in the back end.

10
00:00:25.410 --> 00:00:35.400
But we will we will go through that name X to this is important X and the end point.

11
00:00:39.010 --> 00:00:43.330
We may already be able to use the one we created earlier.

12
00:00:45.040 --> 00:00:48.940
So let me actually quickly go to the server.

13
00:00:51.010 --> 00:00:58.660
Words, because if you remember when we are creating a post and are creating posts.

14
00:00:58.990 --> 00:01:03.160
So we already worked on this image upload feature.

15
00:01:03.280 --> 00:01:09.190
So we have the endpoint in the back and that uploads the images to continue new and give us the URL.

16
00:01:10.640 --> 00:01:18.110
Now we may be able to use, but maybe not because for this one we are just using the we just using the

17
00:01:18.110 --> 00:01:18.530
URL.

18
00:01:18.680 --> 00:01:24.440
But for this one, we are actually going to save the images in the database and then later we going

19
00:01:24.440 --> 00:01:26.320
to populate all the images in the library.

20
00:01:26.330 --> 00:01:31.340
So yeah, I thought maybe we could use that, but we can't.

21
00:01:31.340 --> 00:01:37.760
It's going to be live differently done because it is the library and it will be saved in the database.

22
00:01:37.760 --> 00:01:40.010
And, you know, so it's different.

23
00:01:40.070 --> 00:01:40.390
All right.

24
00:01:41.990 --> 00:01:42.350
Okay.

25
00:01:42.350 --> 00:01:45.890
So let's not worry about this one for now.

26
00:01:46.730 --> 00:01:53.690
So the reason we have to create a brand new endpoint in the back end so we can call that a broad image

27
00:01:53.690 --> 00:01:54.140
file.

28
00:01:54.320 --> 00:01:56.390
So persistent in we don't.

29
00:01:58.550 --> 00:01:59.570
That's just right.

30
00:02:00.830 --> 00:02:05.030
If we quickly double take the in we local.

31
00:02:05.720 --> 00:02:09.290
So we got the API and we got the next public API.

32
00:02:09.320 --> 00:02:09.530
Right.

33
00:02:09.770 --> 00:02:12.220
So this one, we're going to use the next quote behavior.

34
00:02:15.920 --> 00:02:17.280
It is done client side.

35
00:02:17.300 --> 00:02:23.990
So we access that both historically and we dot next public API SLAs.

36
00:02:25.010 --> 00:02:30.890
The endpoint we're going to create, we can call that upload image file.

37
00:02:31.910 --> 00:02:34.370
I guess previously we have already used upload image.

38
00:02:34.370 --> 00:02:42.020
This time we use Dest file because we're going to send this as if from that previous one we did.

39
00:02:43.200 --> 00:02:47.880
And that was we were sending emails as base64 data.

40
00:02:47.940 --> 00:02:48.210
Right.

41
00:02:48.420 --> 00:02:51.780
But this one we will be sending is the file data.

42
00:02:52.650 --> 00:02:52.980
All right.

43
00:02:54.330 --> 00:02:55.350
So that's the action.

44
00:02:55.350 --> 00:02:57.980
We have to work on this endpoint in the back end.

45
00:02:57.990 --> 00:03:02.490
And then we also need to send the headers because we need to protect this route for the logged in use

46
00:03:02.490 --> 00:03:02.880
only.

47
00:03:03.210 --> 00:03:06.630
So in the headers we need to send the token.

48
00:03:07.110 --> 00:03:14.440
So we need to send the authorization token authorization, beer or token after token.

49
00:03:14.440 --> 00:03:18.420
No, this is something you already saw how we did in our context.

50
00:03:19.320 --> 00:03:20.370
This is how we sending.

51
00:03:22.050 --> 00:03:25.160
The token, it's time we are using excuse.

52
00:03:25.170 --> 00:03:34.750
But since this one is specific to Andy, then they're not using access to this component with the prompts.

53
00:03:34.770 --> 00:03:41.520
This will automatically send this to the back end based on the action and the headers.

54
00:03:42.110 --> 00:03:42.690
I guess so.

55
00:03:43.110 --> 00:03:47.940
We don't have access, so we had to access the context and give the token like this.

56
00:03:50.160 --> 00:03:55.140
Okay, so we have the headers, we have the endpoint, we have the file name.

57
00:03:55.800 --> 00:04:04.110
Next one is on since home since we get the info, the upload info.

58
00:04:04.500 --> 00:04:10.080
So here, as you can see, we have the documentation.

59
00:04:10.080 --> 00:04:12.300
I think it's best to copy from here.

60
00:04:12.330 --> 00:04:16.050
So on tins, I mean, just copy this bit.

61
00:04:19.400 --> 00:04:20.570
Let me replace that.

62
00:04:21.680 --> 00:04:25.460
So I intend to get the info and we get the status from there.

63
00:04:25.820 --> 00:04:26.870
So if it is uploading.

64
00:04:28.030 --> 00:04:29.410
Oh, you can console.log.

65
00:04:30.760 --> 00:04:35.260
Also, if the status is done, then you can say the Mrs..

66
00:04:35.590 --> 00:04:43.150
Using the message from the end is end itself message to success that one has been successfully uploaded

67
00:04:43.150 --> 00:04:44.830
and if there is an error, it will.

68
00:04:44.840 --> 00:04:46.480
So they are as nicely needed.

69
00:04:47.560 --> 00:04:49.060
All right, so this is straightforward.

70
00:04:49.060 --> 00:04:54.200
That's how Upload works with and now I can really give it a try.

71
00:04:54.220 --> 00:04:58.270
Of course we get the error, but at least we can see the endpoint.

72
00:04:58.270 --> 00:05:03.670
If it is hitting the right endpoint, let's try that out and then we're going to go to the back end

73
00:05:03.670 --> 00:05:04.930
and create the endpoint.

74
00:05:08.600 --> 00:05:13.280
I guess you leave me open the department's console.

75
00:05:16.990 --> 00:05:18.250
Like its official limits.

76
00:05:18.670 --> 00:05:21.540
Click to upload media.

77
00:05:21.830 --> 00:05:22.930
Let's just try one.

78
00:05:25.230 --> 00:05:25.730
All right.

79
00:05:25.740 --> 00:05:32.490
So you can see here upload filled with is expected because we don't have the endpoint.

80
00:05:32.670 --> 00:05:36.200
However, you can see we are making requests to the right endpoint.

81
00:05:36.210 --> 00:05:38.370
So post request to that endpoint.

82
00:05:40.420 --> 00:05:44.800
And this is the the data, the console log.

83
00:05:45.890 --> 00:05:46.910
That is you.

84
00:05:47.750 --> 00:05:48.830
Well, while it's uploading.

85
00:05:51.630 --> 00:05:55.680
And this thing is taking the network according to the mental tab.

86
00:05:55.680 --> 00:05:59.160
We're making request for food not found.

87
00:05:59.160 --> 00:06:06.000
The URL is not found and we are sending the token in the headers so you can see all that information

88
00:06:06.000 --> 00:06:06.390
is here.

89
00:06:07.470 --> 00:06:08.040
Beautiful.

90
00:06:12.360 --> 00:06:12.750
Okay.

91
00:06:13.050 --> 00:06:20.100
So let's go to the back end and create that endpoint so that we can complete this upload.

92
00:06:21.580 --> 00:06:23.910
Okay, so let's go back and clear that endpoint.

93
00:06:24.870 --> 00:06:32.180
So the server routes post input that here, let's put them all together here.

94
00:06:33.120 --> 00:06:37.140
So rather dot posts.

95
00:06:38.910 --> 00:06:40.950
So the endpoints are going to be less.

96
00:06:42.840 --> 00:06:44.700
Upload image is fine.

97
00:06:46.530 --> 00:06:52.440
Now for this to work, there is a bit more work to do actually because this is a file data.

98
00:06:53.930 --> 00:06:54.920
This is a fun data.

99
00:06:54.930 --> 00:06:58.850
This is not the the decent data like we seen earlier here.

100
00:06:59.390 --> 00:07:00.790
That was decent data.

101
00:07:00.800 --> 00:07:03.590
We were just sending the best 64 version of the image.

102
00:07:03.860 --> 00:07:05.780
But this time we're sending the actual file.

103
00:07:06.110 --> 00:07:12.590
So this is not something we can access as a request body because this is a form data.

104
00:07:12.620 --> 00:07:14.480
We cannot access it like this.

105
00:07:14.720 --> 00:07:17.360
Instead, we have to access using the request files.

106
00:07:17.960 --> 00:07:23.780
Now for that, we need to use a middleware and that middleware is something we have to download from

107
00:07:23.780 --> 00:07:24.260
NPM.

108
00:07:25.250 --> 00:07:27.010
So you may to come in this afternoon.

109
00:07:27.050 --> 00:07:32.270
Let's insist that that one, let's solve this one.

110
00:07:32.510 --> 00:07:41.930
So the one we're going to use is express formula who NPM install express formative.

111
00:07:43.910 --> 00:07:46.880
This will give us the the final data I need.

112
00:07:46.910 --> 00:07:48.760
So let's done let's start the server.

113
00:07:49.990 --> 00:07:50.530
Come here.

114
00:07:50.950 --> 00:07:52.150
And it's important that

115
00:07:55.960 --> 00:08:00.370
people from a level from experts.

116
00:08:01.070 --> 00:08:01.780
Formidable.

117
00:08:02.710 --> 00:08:06.580
And they will simply have to execute this execute this.

118
00:08:07.060 --> 00:08:08.740
That will give us the founder.

119
00:08:10.420 --> 00:08:11.890
So here, I'm gonna run that one.

120
00:08:12.910 --> 00:08:14.200
So that's the end point.

121
00:08:14.200 --> 00:08:23.860
We want to use the formidable as a middleware that will give us the request files and then this throughout

122
00:08:23.860 --> 00:08:25.240
will be only for the long to new.

123
00:08:25.240 --> 00:08:29.110
The set require signing at the moment it is only for the admin as well.

124
00:08:29.110 --> 00:08:31.360
So we apply that middleware as well.

125
00:08:31.360 --> 00:08:35.080
And then finally our control function upload image file.

126
00:08:36.720 --> 00:08:39.240
Beautiful to make sure you use the formidable.

127
00:08:40.920 --> 00:08:44.010
Otherwise you will not get a file data.

128
00:08:44.610 --> 00:08:44.910
Okay.

129
00:08:44.910 --> 00:08:50.490
So make sure you use that and then let's put it here.

130
00:08:50.940 --> 00:08:55.830
Controls first and let's go to the post controller and write this function.

131
00:08:59.760 --> 00:09:00.870
Controller sports.

132
00:09:00.870 --> 00:09:02.130
Let's come on down.

133
00:09:03.870 --> 00:09:08.130
By the way, we already have the cloud generic configuration, so we can easily use that.

134
00:09:14.570 --> 00:09:15.860
Export icons.

135
00:09:16.400 --> 00:09:17.420
Upload images.

136
00:09:17.420 --> 00:09:18.680
File async.

137
00:09:18.800 --> 00:09:19.370
Request.

138
00:09:19.370 --> 00:09:20.120
Response.

139
00:09:21.170 --> 00:09:21.740
Try.

140
00:09:25.740 --> 00:09:26.160
Yes.

141
00:09:26.160 --> 00:09:26.640
There.

142
00:09:32.640 --> 00:09:34.290
Log on if there's any.

143
00:09:35.040 --> 00:09:37.290
Now, before we actually upload to Cloudy Need.

144
00:09:37.590 --> 00:09:39.270
Let's have a look at the data.

145
00:09:39.660 --> 00:09:45.750
Come to load the request request files.

146
00:09:47.810 --> 00:09:48.090
Okay.

147
00:09:48.140 --> 00:09:51.590
You can do access request, Marty, because this is a phone data.

148
00:09:51.980 --> 00:09:53.270
So request files.

149
00:09:54.710 --> 00:09:57.350
Let's let's try.

150
00:10:00.470 --> 00:10:01.450
Featured image.

151
00:10:03.170 --> 00:10:05.900
Click Upload done to use the same images is another one.

152
00:10:06.860 --> 00:10:07.820
Let's try that one.

153
00:10:08.480 --> 00:10:10.040
I think you can see it happening.

154
00:10:10.820 --> 00:10:15.760
We are not getting the response, obviously, but we have at least we have the the endpoint.

155
00:10:15.920 --> 00:10:16.190
All right.

156
00:10:16.430 --> 00:10:19.250
So let's go to the back in to Sara and beautiful.

157
00:10:19.280 --> 00:10:21.950
Now, you can see here we are receiving the request file.

158
00:10:22.430 --> 00:10:22.850
Awesome.

159
00:10:23.840 --> 00:10:25.370
So we've got the file name.

160
00:10:28.020 --> 00:10:30.480
The file path, the temporary path.

161
00:10:30.900 --> 00:10:31.380
Beautiful.

162
00:10:32.100 --> 00:10:33.390
Okay, so that looks good.

163
00:10:33.450 --> 00:10:34.410
Let's continue here.

164
00:10:34.530 --> 00:10:36.090
It's uploaded to cloud in there.

165
00:10:39.060 --> 00:10:41.340
But there is one more thing we have to do.

166
00:10:41.400 --> 00:10:44.550
That is create a media model.

167
00:10:45.540 --> 00:10:46.470
Media model here.

168
00:10:46.950 --> 00:10:53.280
Because like I said, this will be saved in the database and it will be later.

169
00:10:53.550 --> 00:10:57.600
We can retrieve as a library so we can load all the media files.

170
00:10:57.990 --> 00:11:04.410
So whenever the image has been uploaded using a file, a media library, this drag and drop as you can

171
00:11:04.410 --> 00:11:04.740
see.

172
00:11:05.730 --> 00:11:11.370
So whenever the image has been uploaded, this will it will be saved in the database and later we will

173
00:11:11.370 --> 00:11:12.660
be able to access all of that.

174
00:11:13.350 --> 00:11:15.120
So this that's how it's going to work.

175
00:11:15.150 --> 00:11:18.480
That means we have to work on the model, which is not too difficult.

176
00:11:18.630 --> 00:11:22.710
So we can easily work on that one.

177
00:11:22.710 --> 00:11:26.580
But as you can see, this is slightly different than the previous upload.

178
00:11:26.820 --> 00:11:34.590
Previous upload was just a symbol we uploaded, we got the image URL, we put that in this post.

179
00:11:35.070 --> 00:11:35.850
So that was different.

180
00:11:35.850 --> 00:11:44.550
This is slightly different because we are trying to replicate the the media media of feature that you

181
00:11:44.550 --> 00:11:47.220
see in the WordPress content management system.

182
00:11:47.430 --> 00:11:48.450
And it's really nice.

183
00:11:48.450 --> 00:11:51.550
You know, you can organize your images too.

184
00:11:51.900 --> 00:11:54.050
Any files uploaded is saved.

185
00:11:54.060 --> 00:11:55.050
It's always there.

186
00:11:55.320 --> 00:12:03.010
You can later obviously manage by deleting just a load before you actually work on any of these posts.

187
00:12:03.010 --> 00:12:04.020
So it's really nice.

188
00:12:04.830 --> 00:12:07.230
Okay, so we take a break now.

189
00:12:08.310 --> 00:12:11.550
We saw how this is received.

190
00:12:11.550 --> 00:12:13.260
Requests file is very simple here.

191
00:12:13.620 --> 00:12:15.270
So request files.

192
00:12:15.960 --> 00:12:18.420
Dot file, dot path.

193
00:12:19.140 --> 00:12:20.400
That will give us this path.

194
00:12:20.760 --> 00:12:24.120
We have to use this to upload this image to cloud in error.

195
00:12:24.390 --> 00:12:31.140
And when we get the response we want to save in the database, only then we send the response to our

196
00:12:31.140 --> 00:12:31.830
React app.

197
00:12:32.220 --> 00:12:42.960
So by the time we receive the uploaded images, you are not only that, we will also have this image

198
00:12:42.960 --> 00:12:45.150
simply permanently in the database.

199
00:12:45.420 --> 00:12:46.440
It's a that's the beauty.
