WEBVTT
1
00:00:00.540 --> 00:00:00.770
All right.

2
00:00:00.810 --> 00:00:05.570
So the next feature we're going to work on is make these categories clickable.

3
00:00:05.580 --> 00:00:12.060
So when you click on the category, you want to fit all the posts that belongs to this category.

4
00:00:12.540 --> 00:00:17.670
Let me show you the finished application to you can see we have a list of categories.

5
00:00:18.040 --> 00:00:25.710
If I click on Node, you'll see there are two posts that has this category note.

6
00:00:28.020 --> 00:00:33.810
So if you if you choose the category, when you're creating a post like this, create note.

7
00:00:34.080 --> 00:00:41.340
That means when these categories are clicked, we will display this post.

8
00:00:41.960 --> 00:00:42.240
All right.

9
00:00:42.240 --> 00:00:43.080
So for example.

10
00:00:44.550 --> 00:00:47.880
JavaScript doesn't have any react.

11
00:00:48.240 --> 00:00:54.540
Has one node has to hosting and has one so on.

12
00:00:54.750 --> 00:00:59.790
So this is how we're going to implement the categories feature here.

13
00:00:59.820 --> 00:01:01.140
Categories make them clickable.

14
00:01:02.370 --> 00:01:02.670
All right.

15
00:01:02.670 --> 00:01:07.410
So let's go to let's go to the back end first.

16
00:01:07.420 --> 00:01:13.410
So we have to create the endpoint that will give us all the boost for any given category.

17
00:01:14.640 --> 00:01:22.350
So year round category, it's create a new round surrounding.

18
00:01:22.380 --> 00:01:27.840
Don't get to make a great request to this endpoint.

19
00:01:27.840 --> 00:01:37.920
We can call it post by category and we need to give the category slope category and category slug,

20
00:01:37.920 --> 00:01:38.700
whatever that is.

21
00:01:40.530 --> 00:01:46.950
See, and I guess obviously we're going to use slug because slugs, I use it ishow friendly for example

22
00:01:46.950 --> 00:01:49.380
here when you click on Node.js.

23
00:01:51.180 --> 00:01:52.260
We didn't have the page yet.

24
00:01:52.350 --> 00:01:58.350
You can see you'd notice that it's a friendly user friendly instead of having some kind of a category

25
00:01:59.370 --> 00:01:59.850
I.D..

26
00:01:59.970 --> 00:02:00.240
Right.

27
00:02:00.690 --> 00:02:02.310
So we use slot.

28
00:02:03.930 --> 00:02:14.340
So post by category slug and then we can call it post by post by category.

29
00:02:17.040 --> 00:02:18.990
So let's import this one from him.

30
00:02:23.960 --> 00:02:28.940
Well, technically, we could put it in the Bush Journal, but it doesn't really matter.

31
00:02:29.200 --> 00:02:30.400
All looks good.

32
00:02:30.920 --> 00:02:32.890
It's right.

33
00:02:32.900 --> 00:02:35.670
This one in our control category.

34
00:02:35.690 --> 00:02:40.850
Let's make sure I have imported the postman from.

35
00:02:46.820 --> 00:02:49.100
All right, so we import post mortem.

36
00:02:49.240 --> 00:02:52.160
Let's now clear this control function.

37
00:02:53.390 --> 00:03:00.350
Export counts posts by category equals to shoot straight gets.

38
00:03:07.720 --> 00:03:08.190
So here.

39
00:03:08.230 --> 00:03:09.010
What do you want to do?

40
00:03:09.500 --> 00:03:16.360
If we want to first access the request Korean slow because based on that slogan we need to find the

41
00:03:16.360 --> 00:03:16.970
carrier.

42
00:03:17.110 --> 00:03:17.350
Right?

43
00:03:17.680 --> 00:03:25.300
So we find the slug from the request front and then we try to find the category.

44
00:03:25.310 --> 00:03:28.730
So we need to find the category first seconds.

45
00:03:29.380 --> 00:03:36.160
Category equals two weight category model find one.

46
00:03:36.160 --> 00:03:42.700
So we use find one because we just need to find that particular category to find one based on the slope.

47
00:03:44.800 --> 00:03:48.220
Find one based on the slope.

48
00:03:48.460 --> 00:03:48.700
Right?

49
00:03:49.120 --> 00:03:56.770
So once you find that category, we can use that category's ID to find the post.

50
00:03:57.010 --> 00:04:04.210
Then we have this line, find the post based on the categories because you can see these categories

51
00:04:04.390 --> 00:04:06.040
are raised in the post model.

52
00:04:06.760 --> 00:04:11.290
So we find post all the post based on the categories.

53
00:04:11.920 --> 00:04:15.370
That is the category

54
00:04:17.830 --> 00:04:19.510
category on this slide.

55
00:04:20.350 --> 00:04:20.640
Okay.

56
00:04:20.770 --> 00:04:27.160
So if you remember, we have the categories array for each post mortem and then in that array we are

57
00:04:27.490 --> 00:04:29.110
storing the category ID.

58
00:04:29.740 --> 00:04:35.410
So that means if we give that value and try to find out the post based of the categories that will give

59
00:04:35.410 --> 00:04:40.270
us all the post that is found for these given categories.

60
00:04:41.280 --> 00:04:44.620
So with that we can return the post.

61
00:04:44.620 --> 00:04:47.560
But before we do that, let's use some populate.

62
00:04:49.930 --> 00:04:52.240
So we want to populate image

63
00:04:56.200 --> 00:05:03.790
so that we can show the post image and then that is all we need to do.

64
00:05:04.780 --> 00:05:10.360
Now you can always use limit for example, let's say between.

65
00:05:11.680 --> 00:05:11.890
Okay.

66
00:05:11.950 --> 00:05:18.370
If you have too many proofs in your database, then you may want to limit like this.

67
00:05:19.750 --> 00:05:20.000
Okay.

68
00:05:20.110 --> 00:05:22.660
And then response version posts, that's all.

69
00:05:23.100 --> 00:05:26.560
So that's how we can access the posts by category.

70
00:05:27.290 --> 00:05:33.280
Now, if you if you know the slogan, if you're going to focus on Node.js, I can actually even try

71
00:05:33.280 --> 00:05:41.590
from the project API less posts by category slash if I give the right slide.

72
00:05:42.720 --> 00:05:47.070
That will give me all the post that is found in that.

73
00:05:48.030 --> 00:05:50.310
No, just category two.

74
00:05:50.310 --> 00:05:50.880
That's one.

75
00:05:53.650 --> 00:05:57.550
Two, three, four, five, six.

76
00:05:57.610 --> 00:05:58.780
I think this is not right.

77
00:05:58.780 --> 00:06:02.800
I think notice Carnegie, you don't have all this --.

78
00:06:02.800 --> 00:06:04.810
Let me see what's going on here.

79
00:06:09.400 --> 00:06:10.510
Actually we may have.

80
00:06:11.050 --> 00:06:16.030
The reason I've thought about that is because I was playing around with this finished project, and

81
00:06:16.030 --> 00:06:23.470
this project has only to push for the node category, but obviously it's a different project we are

82
00:06:23.470 --> 00:06:25.600
building locally, so that must be right.

83
00:06:25.600 --> 00:06:27.940
So we must might have all these boost.

84
00:06:28.750 --> 00:06:29.050
All right.

85
00:06:29.350 --> 00:06:31.950
So we have done, you know, bagging part.

86
00:06:31.980 --> 00:06:38.470
Now let's go to the front end and start working on that page, which would be less categories, less

87
00:06:38.830 --> 00:06:39.280
slow.
