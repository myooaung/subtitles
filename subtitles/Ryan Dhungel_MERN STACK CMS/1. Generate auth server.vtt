WEBVTT
1
00:00:00.210 --> 00:00:05.640
All right, so now we finally need our own server because we have the front end, we have the sign up

2
00:00:05.640 --> 00:00:06.510
and send basis.

3
00:00:06.720 --> 00:00:12.300
So this data that the user enters, we want to send it to our backing so that we can save in the database,

4
00:00:12.300 --> 00:00:12.600
right?

5
00:00:12.960 --> 00:00:15.900
So for that, we have to build our own server from scratch.

6
00:00:16.230 --> 00:00:22.380
Now, this is something you have to you need something like this, something like building your own

7
00:00:22.380 --> 00:00:22.950
API.

8
00:00:23.250 --> 00:00:26.640
It's an every time you build any project, any full stack project, right?

9
00:00:26.640 --> 00:00:35.160
So almost all the applicants, they need authentication and you always end up writing the same code

10
00:00:35.160 --> 00:00:39.150
over and over again in back end to build a server.

11
00:00:39.180 --> 00:00:44.070
Especially authentication to authentication is something a must have thing.

12
00:00:44.070 --> 00:00:51.300
However, it just takes a lot of time to write it and every time, every time you start a new project.

13
00:00:51.660 --> 00:00:56.850
So to avoid that hassle, because I had to how to go through the same process over and over again.

14
00:00:57.000 --> 00:00:58.200
And I was tired of that.

15
00:00:58.200 --> 00:01:00.240
So I decided to create a.

16
00:01:01.840 --> 00:01:07.540
Command line tool and I pushed it to NPM so that easily me and everyone else can use it.

17
00:01:07.990 --> 00:01:11.650
All right, so this way, all the code is already there.

18
00:01:11.650 --> 00:01:19.930
We'll be just instilling this spec as globally in our computer and then use that to generate our API.

19
00:01:20.470 --> 00:01:26.710
So in a matter of seconds, I guess it's going to be magical and you will absolutely love it.

20
00:01:27.610 --> 00:01:30.550
So let me search for NPM Colorado.

21
00:01:30.880 --> 00:01:35.950
And by the way, this is very flexible, very easy to make changes.

22
00:01:35.950 --> 00:01:38.770
You can just add code, remove code and.

23
00:01:40.640 --> 00:01:44.000
This is something I've been doing it in my other Fullstack projects.

24
00:01:44.030 --> 00:01:46.070
If you take out the courses in Udemy.

25
00:01:46.280 --> 00:01:50.830
Almost all of them have the back end authentication, so it's pretty much the same goal.

26
00:01:50.840 --> 00:01:54.020
But I decided to push it to NPM so that we can easily.

27
00:01:56.480 --> 00:02:00.470
Use it in our project without going through 10 hours of writing code.

28
00:02:00.890 --> 00:02:07.040
Right now, obviously I would be explaining to you and then if you need to know, just don't worry,

29
00:02:07.370 --> 00:02:14.080
I'll be explained to you and we will be adding our own robots in control of functions, remote controls.

30
00:02:14.090 --> 00:02:15.230
Basically, that's what you do.

31
00:02:15.380 --> 00:02:21.710
So you send a request from the client to so and so we receive that as a route and then process that

32
00:02:21.710 --> 00:02:27.410
request by quitting the database, saving the database object, delete things like that.

33
00:02:27.740 --> 00:02:28.730
So we use that.

34
00:02:29.450 --> 00:02:31.420
We do that in our control function.

35
00:02:31.430 --> 00:02:34.280
So it's really not much happening.

36
00:02:34.470 --> 00:02:39.210
Roads, controllers, you get the request, you process the request, send some response.

37
00:02:39.230 --> 00:02:40.130
Simple as that.

38
00:02:40.940 --> 00:02:45.800
So that's how we're going to generate our authentication.

39
00:02:45.800 --> 00:02:50.270
So and it's not going to be as complicated and.

40
00:02:51.370 --> 00:02:52.360
Hard to understand.

41
00:02:52.360 --> 00:02:57.580
Like, for example, let's say if you're using fireworks, it works like you have the authentication

42
00:02:57.580 --> 00:02:57.970
system.

43
00:02:57.970 --> 00:03:04.030
But if you have to make content, it's really hard and you have to strictly follow their documentation

44
00:03:04.300 --> 00:03:10.380
and there are some limitations and you don't really know how everything is working.

45
00:03:10.390 --> 00:03:15.100
However, this is different, you know, you will see all the codes right in front of you and then you

46
00:03:15.100 --> 00:03:18.340
can just make some changes if you want to or so without.

47
00:03:19.180 --> 00:03:19.750
Let's talk.

48
00:03:19.750 --> 00:03:20.620
Let's say, you know.

49
00:03:24.780 --> 00:03:27.180
This is a helper tool for generating remote control.

50
00:03:27.190 --> 00:03:28.290
So you can do that as well.

51
00:03:28.320 --> 00:03:32.970
But basically, main focus is to generate the entire authentication proxy.

52
00:03:33.390 --> 00:03:33.630
All right.

53
00:03:33.840 --> 00:03:35.100
So how do you use it?

54
00:03:35.220 --> 00:03:38.820
The first thing you have to do is install in your computer globally.

55
00:03:39.210 --> 00:03:42.150
So NPM in SU test z stands for globally.

56
00:03:42.690 --> 00:03:44.760
And this is a beggar's named cholera, I guess.

57
00:03:44.760 --> 00:03:50.730
So you're going to run this command once you install a computer globally, then you can create a project

58
00:03:51.420 --> 00:03:55.680
folder in your server so you can create a folder by the name of server.

59
00:03:56.010 --> 00:03:58.830
Get inside that folder and run cholera.

60
00:03:59.070 --> 00:04:00.240
Make us.

61
00:04:00.570 --> 00:04:01.590
That's what we have to do.

62
00:04:02.220 --> 00:04:08.040
And then it will give you the start of project which will have the log entry, stress and system folder,

63
00:04:08.040 --> 00:04:08.970
password, everything.

64
00:04:09.600 --> 00:04:19.680
Obviously you want to, you have to submit the you have to add the Mongo DVR connection and the SendGrid

65
00:04:20.400 --> 00:04:23.610
API keys so that you can send the followed password email.

66
00:04:23.610 --> 00:04:24.480
But that's that.

67
00:04:24.480 --> 00:04:26.010
So nothing else to do.

68
00:04:26.220 --> 00:04:30.510
You will have a ready to use authentication system.

69
00:04:30.780 --> 00:04:31.050
All right.

70
00:04:31.260 --> 00:04:33.510
So let's let's get into it.

71
00:04:33.510 --> 00:04:42.000
I did have it in, so but I'll do it with you again just to make sure you don't find it confusing.

72
00:04:43.560 --> 00:04:45.900
All right, so here, let me open a new tab.

73
00:04:48.060 --> 00:04:49.500
And run it.

74
00:04:50.810 --> 00:04:52.550
New computer globally installed.

75
00:04:52.550 --> 00:04:54.560
Globally, it is still.

76
00:05:01.190 --> 00:05:05.630
And once it is installed, the next thing you do is create a project.

77
00:05:06.440 --> 00:05:10.490
You can create a project folder in your server API.

78
00:05:10.520 --> 00:05:12.640
So we have to create a folder by the name.

79
00:05:12.710 --> 00:05:15.650
So anything you like to let's call it server.

80
00:05:20.470 --> 00:05:23.260
So we have some issues here for missing denied.

81
00:05:24.770 --> 00:05:25.020
Okay.

82
00:05:25.040 --> 00:05:31.010
So probably we have to use pseudo comma, npm and then the space that you.

83
00:05:37.230 --> 00:05:43.440
Because basically we trying to write in our computer global is probably we have to run it as admin user

84
00:05:43.440 --> 00:05:45.210
R2 that's been installed.

85
00:05:45.690 --> 00:05:49.020
So once it is installed, you'll be able to use that color command.

86
00:05:51.180 --> 00:05:51.480
All right.

87
00:05:51.840 --> 00:06:00.200
So let's go let's go to the SIM director where we have a project and that is inside CD.

88
00:06:00.330 --> 00:06:02.430
You did me, Alice.

89
00:06:02.430 --> 00:06:11.370
So we already we have the same as folder and CDC in this list.

90
00:06:11.640 --> 00:06:13.410
So we have the client folder at the moment.

91
00:06:13.410 --> 00:06:15.990
Now we want to create a server folder as well.

92
00:06:16.740 --> 00:06:16.950
All right.

93
00:06:16.950 --> 00:06:18.810
So you can do that from here.

94
00:06:19.110 --> 00:06:22.710
Make it or you can just do it manually.

95
00:06:24.750 --> 00:06:26.730
Let me open a final.

96
00:06:35.860 --> 00:06:36.160
Okay.

97
00:06:36.490 --> 00:06:37.840
So we have this project here.

98
00:06:38.590 --> 00:06:45.520
If we create another folder, let's call it server and we want to go into this server, so let's see

99
00:06:45.520 --> 00:06:46.810
the server.

100
00:06:48.610 --> 00:06:50.020
So we don't have anything at the moment.

101
00:06:50.020 --> 00:06:54.400
So we are into sort of folder and here within this folder you want to run that.

102
00:06:54.400 --> 00:06:54.760
Come on.

103
00:06:55.300 --> 00:06:56.590
All right, make path.

104
00:06:57.340 --> 00:06:59.140
I guess you can take out the document, isn't it.

105
00:06:59.350 --> 00:07:00.310
Call out to make off.

106
00:07:06.420 --> 00:07:06.690
All right.

107
00:07:06.840 --> 00:07:12.690
So you can see here, it has created the package position files of the helpers file.

108
00:07:13.170 --> 00:07:14.130
It has created.

109
00:07:14.130 --> 00:07:20.940
There are two file controllers file and then the basic end 2.4 server which is indexed to these.

110
00:07:22.400 --> 00:07:22.650
Okay.

111
00:07:22.660 --> 00:07:28.980
So once you update in variables, your server with full authentication will be ready to use this type

112
00:07:28.980 --> 00:07:37.710
npm install and then NPM start to see your server running and you can even visit this show to.

113
00:07:39.890 --> 00:07:40.670
Give it a try.

114
00:07:41.270 --> 00:07:41.660
Okay.

115
00:07:43.150 --> 00:07:43.570
Awesome.

116
00:07:43.720 --> 00:07:50.960
So let's quickly have a look at our auto generated server, I guess.

117
00:07:51.040 --> 00:07:56.290
So you can see we have to settle for all these files and folders have been created using that command

118
00:07:56.740 --> 00:07:57.790
in the background to this.

119
00:07:57.790 --> 00:08:01.630
And you can see these are the packages that have been used to create this project.

120
00:08:02.170 --> 00:08:10.360
So we have the send word for sending emails be crude for hashing password the course so client can be

121
00:08:10.360 --> 00:08:13.300
running on a separate domain server can be on a separate domain.

122
00:08:13.540 --> 00:08:17.740
We have the code says dirt envy to load the in variables.

123
00:08:18.250 --> 00:08:24.220
We have the ESM package that will allow you to use import export syntax.

124
00:08:24.760 --> 00:08:30.730
I guess, you know, it's just by default it doesn't support import and export syntax like in React

125
00:08:30.730 --> 00:08:31.360
or next year.

126
00:08:31.360 --> 00:08:32.740
So we have to use a request.

127
00:08:32.980 --> 00:08:37.270
However, using this package you can use import and export.

128
00:08:37.420 --> 00:08:41.680
So we have the express that is the one we using to build up our server.

129
00:08:42.040 --> 00:08:48.040
We have some data which is this, this and we have durcan to generate the data we took and that is the

130
00:08:48.040 --> 00:08:50.590
one we're using to handle the authentication.

131
00:08:50.950 --> 00:08:55.330
We have the Mongoose to handle the MongoDB connection.

132
00:08:55.930 --> 00:09:00.820
We have the Morgan that log the urls in the terminal.

133
00:09:00.820 --> 00:09:05.750
I will show you later nanobody to generate the unique ids.

134
00:09:06.490 --> 00:09:06.820
All right.

135
00:09:08.120 --> 00:09:08.540
So.

136
00:09:11.620 --> 00:09:16.150
Let's have a look at our solar project and let's understand how this works.
