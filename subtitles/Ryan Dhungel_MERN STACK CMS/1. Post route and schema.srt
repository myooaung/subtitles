1
00:00:00,600 --> 00:00:02,460
All right, so we have this post ready.

2
00:00:02,460 --> 00:00:03,790
We can create post.

3
00:00:03,840 --> 00:00:08,610
All we have to do is execute this function, too, and the button is clicked.

4
00:00:08,610 --> 00:00:14,130
We send this all this data to back in to save it in the database.

5
00:00:14,130 --> 00:00:19,290
Right now, that's where we get the going to our banking to close all these.

6
00:00:19,860 --> 00:00:20,790
That's for now.

7
00:00:22,940 --> 00:00:23,270
Okay.

8
00:00:23,510 --> 00:00:25,640
Now let's start from the roots.

9
00:00:26,300 --> 00:00:31,190
By the way, if you're wondering where you can get all the images, obviously you can use any of the

10
00:00:31,190 --> 00:00:34,130
images or you can go to pixabay dotcom.

11
00:00:34,370 --> 00:00:39,740
You can use royalty free music in this download from then use in your project.

12
00:00:41,960 --> 00:00:45,210
All right, so let's head over to our roots posts.

13
00:00:45,770 --> 00:00:49,280
So we got images of Pluto to be used before.

14
00:00:49,610 --> 00:00:52,660
Next one we need now is rather dark forces.

15
00:00:53,900 --> 00:00:55,820
Oh, create.

16
00:00:59,030 --> 00:01:02,630
Create port as the endpoint we used, you know.

17
00:01:05,290 --> 00:01:08,440
Here in the admin post new.

18
00:01:12,070 --> 00:01:13,870
And to probably create Bush.

19
00:01:14,170 --> 00:01:21,610
I guess that's the end point to make sure you have the same name Kuwait Post and this one.

20
00:01:22,150 --> 00:01:29,380
Also we'll have these mailers is admin and then create posts.

21
00:01:31,210 --> 00:01:31,510
Okay.

22
00:01:31,510 --> 00:01:39,400
So let's write this function in our controller controllers post.

23
00:01:42,700 --> 00:01:43,050
Okay.

24
00:01:43,870 --> 00:01:44,410
So, yeah.

25
00:01:46,210 --> 00:01:53,860
Export const create postings to async request for response.

26
00:01:55,210 --> 00:01:55,660
Right.

27
00:02:01,540 --> 00:02:05,710
Kept in control of the air.

28
00:02:08,570 --> 00:02:12,210
So here for the moment, it's just gone to law to request.

29
00:02:12,240 --> 00:02:16,430
Marty, just to make sure we're receiving the data that is sent from the client.

30
00:02:18,650 --> 00:02:20,140
All right, so we have all this data.

31
00:02:20,150 --> 00:02:24,350
Let's try to hit, publish, and nothing happens there.

32
00:02:24,360 --> 00:02:27,910
But you can see here we have received the data beautifully.

33
00:02:28,010 --> 00:02:31,900
You can see we have the total content and categories.

34
00:02:33,040 --> 00:02:33,430
Okay.

35
00:02:33,560 --> 00:02:34,460
So that's perfect.

36
00:02:37,710 --> 00:02:42,300
So next thing, before we start saving in the database, obviously we have to create a model which we

37
00:02:42,300 --> 00:02:43,420
don't have yet.

38
00:02:44,370 --> 00:02:47,060
We don't have it's good to models.

39
00:02:47,070 --> 00:02:47,700
Models.

40
00:02:47,700 --> 00:02:54,120
We have categories of the user, but we don't have for post the screw the new one for start test.

41
00:02:55,920 --> 00:03:03,570
And let me let me just copy design this to have this basic corner here.

42
00:03:03,930 --> 00:03:08,760
So we improve MongoDB, we destructive schema, we export.

43
00:03:09,460 --> 00:03:11,120
Now we have to create this schema.

44
00:03:11,130 --> 00:03:11,390
Right.

45
00:03:11,400 --> 00:03:12,480
So let me actually.

46
00:03:15,180 --> 00:03:16,020
Just a second.

47
00:03:16,020 --> 00:03:17,580
So we had to.

48
00:03:21,270 --> 00:03:21,840
Let's leave it.

49
00:03:21,840 --> 00:03:29,790
Let's just change the name from category schema to post schema and then this one we use here.

50
00:03:31,050 --> 00:03:34,530
Let's send the model name and zoom from category to post.

51
00:03:35,730 --> 00:03:40,320
So we have the post model which is based on this post schema right now.

52
00:03:40,470 --> 00:03:41,730
What do we write in the schema?

53
00:03:41,730 --> 00:03:46,770
Whatever fills to those fruits will be we will be able to save in the database.

54
00:03:47,250 --> 00:03:54,390
So this for the category, of course what we can tends to understand we can leave it slugs, we can

55
00:03:54,390 --> 00:03:58,710
leave it because we need to have a user friendly issue slot.

56
00:03:59,280 --> 00:04:03,000
This drug will be generated based on the title, so leave this as well.

57
00:04:03,570 --> 00:04:04,710
Just send this for me.

58
00:04:05,250 --> 00:04:09,570
Change this to title the type of string required.

59
00:04:09,570 --> 00:04:10,050
True.

60
00:04:10,400 --> 00:04:10,620
Right.

61
00:04:11,280 --> 00:04:12,060
So if you remember.

62
00:04:13,070 --> 00:04:18,230
They're sending the total content and categories.

63
00:04:18,800 --> 00:04:19,100
Okay.

64
00:04:19,280 --> 00:04:22,250
So that was a good the title makes fun of content.

65
00:04:24,320 --> 00:04:29,300
Content will also be the type of train.

66
00:04:30,800 --> 00:04:35,150
Actually, it's going to be type, content, type.

67
00:04:35,780 --> 00:04:37,250
We're just going to leave it empty.

68
00:04:37,400 --> 00:04:38,240
Empty object.

69
00:04:38,720 --> 00:04:41,750
So when you have empty objects, you can put any kind of data.

70
00:04:42,200 --> 00:04:46,520
The reason I'm doing this is because there you can see this markdown editor.

71
00:04:46,520 --> 00:04:48,330
It's sending all kinds of data.

72
00:04:49,940 --> 00:04:53,390
So it's better to just leave it like.

73
00:04:54,550 --> 00:04:54,790
Okay.

74
00:04:54,790 --> 00:04:56,530
So that's content, not categories.

75
00:04:56,530 --> 00:05:00,070
Two categories that will have the array of guests.

76
00:05:00,070 --> 00:05:01,060
It will have the array.

77
00:05:01,900 --> 00:05:06,250
Now, even though it is array, it will also have its own type.

78
00:05:07,210 --> 00:05:07,760
Thank you, sir.

79
00:05:08,170 --> 00:05:10,490
We will basically be saving the categories.

80
00:05:11,990 --> 00:05:19,550
Reason for that is when you have the categories added later, you can query the categories model and

81
00:05:20,420 --> 00:05:23,360
find all of the information related to the categories.

82
00:05:23,520 --> 00:05:23,810
Right.

83
00:05:24,140 --> 00:05:29,390
So you don't just have the name, but you have the created date of digit eight and anything else you

84
00:05:29,390 --> 00:05:31,910
add later, all that will be accessible.

85
00:05:32,390 --> 00:05:36,620
So we just refer to the categories highly.

86
00:05:36,800 --> 00:05:40,760
So when we say the category for its model, we have to save the categories.

87
00:05:40,970 --> 00:05:46,460
I not the name but the idea so that it's going to be.

88
00:05:47,940 --> 00:05:49,810
Schema types don't object.

89
00:05:49,810 --> 00:05:50,070
Right.

90
00:05:51,260 --> 00:05:51,470
Oh.

91
00:05:51,780 --> 00:05:55,920
If you want to make a certain destructor const

92
00:05:58,650 --> 00:06:01,980
object id from.

93
00:06:03,330 --> 00:06:04,800
Make sure there's no typo.

94
00:06:04,800 --> 00:06:05,950
It's a capital idea.

95
00:06:05,970 --> 00:06:13,770
I can show you a district that from mongoose dot schema capitals.

96
00:06:14,010 --> 00:06:14,340
Okay.

97
00:06:14,550 --> 00:06:20,010
So if a destructor like that, you don't have to take all this long and just do that.

98
00:06:20,370 --> 00:06:20,670
Okay.

99
00:06:21,030 --> 00:06:22,110
So type object.

100
00:06:22,110 --> 00:06:24,810
Adding it refers to the category model.

101
00:06:25,060 --> 00:06:25,290
Okay.

102
00:06:25,290 --> 00:06:27,420
So this is how we came to save the categories.

103
00:06:29,130 --> 00:06:31,200
And that is all we need for now.

104
00:06:31,230 --> 00:06:34,050
Later we might add some more.

105
00:06:34,080 --> 00:06:36,600
So at the moment we have the title content categories.

106
00:06:36,960 --> 00:06:41,310
Slug will be generated based on the title and the default timestamps.

107
00:06:42,620 --> 00:06:44,700
Later we're going to add the feature limits.

108
00:06:46,450 --> 00:06:47,590
We can also add.

109
00:06:49,480 --> 00:06:55,000
In fact let's added now we're going to do it now featured in.

110
00:06:56,840 --> 00:07:03,120
I relate to it because the images will be saved in the media model.

111
00:07:03,140 --> 00:07:05,270
So we're going to create another model for media.

112
00:07:05,810 --> 00:07:07,040
So let's wait for this one.

113
00:07:07,460 --> 00:07:13,490
Instead, we can add two more properties published.

114
00:07:14,510 --> 00:07:17,660
So by default we can add sorry.

115
00:07:18,260 --> 00:07:22,910
Published can have the type of boolean.

116
00:07:24,800 --> 00:07:28,370
Means it can have the value of either true or false.

117
00:07:28,970 --> 00:07:31,310
So if published by default, we can.

118
00:07:34,770 --> 00:07:36,090
We can send it to troop.

119
00:07:38,970 --> 00:07:40,740
That means it's time.

120
00:07:40,770 --> 00:07:42,420
A new post is created.

121
00:07:43,150 --> 00:07:45,660
The it will have the status of published.

122
00:07:46,980 --> 00:07:48,030
The default is true.

123
00:07:48,360 --> 00:07:55,680
However, as an admin author, if you want to unpublished this one and continue, you know, adding

124
00:07:55,890 --> 00:07:58,350
improving, I'm writing more content, you can do that.

125
00:07:58,860 --> 00:08:03,090
So by default it's true, but you can always unpublished.

126
00:08:04,200 --> 00:08:14,550
I guess the bedroom and another very important one we almost forgot that is posted by author or do we

127
00:08:14,550 --> 00:08:18,560
like to call it a post and by also will be something like this.

128
00:08:20,690 --> 00:08:21,500
The object.

129
00:08:26,510 --> 00:08:27,440
It will be the time.

130
00:08:30,650 --> 00:08:33,860
Object added and to refer to the user model.

131
00:08:37,800 --> 00:08:41,540
I guess this is really important because it's time a new force is created.

132
00:08:41,570 --> 00:08:43,750
We want to know who created the post.

133
00:08:43,960 --> 00:08:44,200
All right.

134
00:08:44,500 --> 00:08:49,960
So later, when we saw the post, we would saw the user information, whoever created the post.

135
00:08:51,220 --> 00:08:56,380
So you can see this post was created by Mr. Edmund Sydney.

136
00:08:57,510 --> 00:09:01,840
Okay, so for that reason we want to know who posted this.

137
00:09:04,110 --> 00:09:05,010
Oh, the post.

138
00:09:05,020 --> 00:09:12,900
So the user you decided will be required and this idea will basically be whoever is currently logged

139
00:09:12,900 --> 00:09:13,740
in at the moment.

140
00:09:14,520 --> 00:09:14,790
All right.

141
00:09:15,180 --> 00:09:20,850
So we have in our route the request requesting that we give us the currently logged in use aid so that

142
00:09:20,850 --> 00:09:24,090
users I.D. will be used in the post.

143
00:09:24,840 --> 00:09:32,490
So that means we will know who created the post so that later, if somebody wants to update or delete

144
00:09:32,910 --> 00:09:41,760
this post, we will make sure that the user, the posted by Addy and the logged in uses ID at that time.

145
00:09:42,690 --> 00:09:46,230
Whenever they want to update or delete that, they're both met.

146
00:09:46,620 --> 00:09:55,200
If the Mets, that means it is the same user who is trying to update or delete his own post and not

147
00:09:55,320 --> 00:09:56,550
someone else's post.

148
00:09:57,690 --> 00:09:57,960
All right.

149
00:09:58,410 --> 00:10:01,890
So with all this, we pretty much done with our schema.

150
00:10:01,890 --> 00:10:03,060
We have the post model.

151
00:10:03,540 --> 00:10:09,900
Now we can go to our controller and start saving this post in the database.
