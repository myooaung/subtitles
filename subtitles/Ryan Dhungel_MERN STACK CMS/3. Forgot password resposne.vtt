WEBVTT
1
00:00:03.290 --> 00:00:05.240
Right at the moment.

2
00:00:07.500 --> 00:00:09.560
I guess we have got the valley so on.

3
00:00:09.570 --> 00:00:10.170
All good.

4
00:00:11.220 --> 00:00:11.970
Looks good.

5
00:00:12.570 --> 00:00:14.190
Let me just say that.

6
00:00:16.740 --> 00:00:17.040
All right.

7
00:00:17.430 --> 00:00:17.790
So.

8
00:00:19.250 --> 00:00:22.910
We are sending the email to this endpoint full of.

9
00:00:23.600 --> 00:00:27.230
So let's quickly have a look at this endpoints, how this actually works.

10
00:00:27.230 --> 00:00:35.540
Let's try to understand how back inside our service go to some routes for the password.

11
00:00:36.680 --> 00:00:40.310
So we have the Frogger password endpoint and this is the controller function.

12
00:00:40.310 --> 00:00:42.440
Let's take that out from a password.

13
00:00:44.360 --> 00:00:47.630
So we get the sign of sign in and for password issue.

14
00:00:47.660 --> 00:00:53.660
So what this function does, it is first it tries to access the email from request warning, which is

15
00:00:53.660 --> 00:00:54.350
not a problem.

16
00:00:54.350 --> 00:00:55.460
We are sending the.

17
00:00:56.570 --> 00:00:57.100
The email.

18
00:00:57.350 --> 00:00:57.580
Right.

19
00:00:58.100 --> 00:01:01.850
And then it will try to find the user from the database based on the email.

20
00:01:02.510 --> 00:01:08.270
I guess if it if the user is not found, then we just send the error message users in our phone.

21
00:01:08.570 --> 00:01:13.870
So if we send a message like that, then here we are showing the error message.

22
00:01:14.240 --> 00:01:23.800
So if the user is not fond of that email, we will be showing him this error message user not from user,

23
00:01:23.830 --> 00:01:30.780
this error property from the response to this and this is the one we are accessing here using data to

24
00:01:30.800 --> 00:01:31.130
error.

25
00:01:31.940 --> 00:01:38.720
Sometimes if you get some kind of issue that you cannot access data, not error from undefined, then

26
00:01:38.720 --> 00:01:43.880
you can always make it tick like this one before we try to access the error object.

27
00:01:47.640 --> 00:01:50.160
So let's continue here.

28
00:01:51.360 --> 00:01:51.660
Okay.

29
00:01:51.660 --> 00:01:57.240
So if user is found, then we generate the reset code using this non-native function.

30
00:01:57.450 --> 00:02:00.780
This is the one you can install from npm.

31
00:02:00.780 --> 00:02:04.620
So we have this peg as comes with this one.

32
00:02:04.660 --> 00:02:13.440
No know that is used to generate some token with the five characters, some random strings, and we

33
00:02:13.440 --> 00:02:15.510
just make them all uppercase.

34
00:02:16.260 --> 00:02:16.530
All right.

35
00:02:16.530 --> 00:02:26.190
So that's the that's how we generate the code and then we save that code into this uses data which says

36
00:02:26.190 --> 00:02:31.230
it's a user which is found here from the database we use.

37
00:02:32.190 --> 00:02:40.500
We said the value reset good with this newly generated reset code and we saved that user so that we

38
00:02:40.890 --> 00:02:44.010
this code is already saved in the user's database.

39
00:02:44.400 --> 00:02:49.440
Now, after saving, we want to send this code in the email to the user.

40
00:02:49.500 --> 00:02:53.170
Right, so that he can enter that in the front end.

41
00:02:53.940 --> 00:02:55.440
So that's what we are doing here.

42
00:02:56.220 --> 00:02:57.780
So we have the email from.

43
00:02:58.950 --> 00:03:04.920
Now, at this point, I'm sure you already have the SendGrid keys, which we.

44
00:03:07.240 --> 00:03:09.820
Sign of dissent William got in the very beginning.

45
00:03:09.820 --> 00:03:15.010
So if you don't have, make sure you sign up to send word and get the API key that is needed.

46
00:03:15.700 --> 00:03:15.970
All right.

47
00:03:16.390 --> 00:03:26.410
So we use that now we're using SendGrid to send the email to email from the verified email to the user's

48
00:03:26.410 --> 00:03:34.870
email or email the user have entered and the subject for the email and they're the body it's a symbol

49
00:03:34.870 --> 00:03:42.310
has to email body your password reset code is and this one by the way you have to fix one with the end

50
00:03:42.310 --> 00:03:55.030
that is put a dollar sign and caught this so that you can remove the double quotes and use bektic.

51
00:03:55.120 --> 00:04:01.480
Instead I said this one thing you have to fix is just use it as a variable.

52
00:04:02.530 --> 00:04:02.770
All right.

53
00:04:02.770 --> 00:04:07.240
So this is the email that will be sent to the user using SendGrid.

54
00:04:07.240 --> 00:04:16.060
So again, to await SendGrid, don't send function and this function requests this email data with need

55
00:04:16.060 --> 00:04:19.960
to have the form two subject and his team in which we have here.

56
00:04:20.800 --> 00:04:28.540
All right so it's that simple do send email using SendGrid and then if it is successful of you, we

57
00:04:28.540 --> 00:04:30.040
are sending the response.

58
00:04:30.040 --> 00:04:31.960
Okay, otherwise we'll be sending the.

59
00:04:33.370 --> 00:04:34.180
Okay, false.

60
00:04:34.690 --> 00:04:34.940
All right.

61
00:04:34.960 --> 00:04:37.360
So SendGrid is here.

62
00:04:37.360 --> 00:04:45.820
You can see we have install from NPM and we just give the same key so that we can start using the SendGrid

63
00:04:45.820 --> 00:04:49.720
service I guess is pretty straightforward this function.

64
00:04:50.590 --> 00:04:57.040
So if everything goes well, the user will have the reset code in the database and also the email will

65
00:04:57.040 --> 00:04:58.090
be sent to the user.

66
00:04:58.450 --> 00:04:59.460
So let's queue to try.

67
00:05:00.310 --> 00:05:04.120
Now I say let's try with this email.

68
00:05:07.420 --> 00:05:11.300
Take your email password receptacle is sent now.

69
00:05:11.320 --> 00:05:13.630
Unfortunately, this is not a valid email.

70
00:05:14.320 --> 00:05:21.370
And you can also see now we are showing because we got the successful response, we want to know we

71
00:05:21.370 --> 00:05:26.410
can now show the two fields to enter the code and the new password.

72
00:05:26.590 --> 00:05:27.970
So that's good.

73
00:05:27.970 --> 00:05:28.570
That's working.

74
00:05:28.570 --> 00:05:28.840
Good.

75
00:05:30.040 --> 00:05:31.360
Thanks to this check.

76
00:05:32.410 --> 00:05:32.710
All right.

77
00:05:32.710 --> 00:05:41.170
So instead of this text, we're going to show this form for the password and one more form field to

78
00:05:41.170 --> 00:05:42.010
enter the code.

79
00:05:42.430 --> 00:05:43.330
We'll come back to that.

80
00:05:43.690 --> 00:05:47.530
But this email doesn't work, so let's try using the actual email.

81
00:05:49.680 --> 00:05:53.640
And that should send the e-mail to the user's email.

82
00:05:54.450 --> 00:05:58.110
So let's try to sign up first just so that we have this user.

83
00:05:58.620 --> 00:06:02.240
So I'm going to use ma'am.

84
00:06:02.960 --> 00:06:05.790
Seems this is a valid emergency.

85
00:06:05.790 --> 00:06:06.060
Ms..

86
00:06:06.060 --> 00:06:08.010
And Melinda, go.

87
00:06:14.390 --> 00:06:15.510
Let me just call.

88
00:06:15.550 --> 00:06:15.950
Ma'am.

89
00:06:15.980 --> 00:06:16.340
Sir?

90
00:06:16.340 --> 00:06:16.640
Ms..

91
00:06:17.710 --> 00:06:18.310
Actor.

92
00:06:18.350 --> 00:06:19.570
Let's use my name.

93
00:06:19.630 --> 00:06:20.200
Ryan.

94
00:06:22.680 --> 00:06:23.190
Right.

95
00:06:23.590 --> 00:06:24.900
No more.

96
00:06:28.210 --> 00:06:29.410
It's called Ryan admin.

97
00:06:29.410 --> 00:06:29.680
Right?

98
00:06:30.070 --> 00:06:31.770
Ryan password.

99
00:06:33.610 --> 00:06:34.570
Let's keep it simple.

100
00:06:39.150 --> 00:06:39.990
You can register.

101
00:06:41.070 --> 00:06:41.670
All right.

102
00:06:42.420 --> 00:06:47.330
Okay, so let's sign out and let's the next time we came, we forgot our passports.

103
00:06:47.340 --> 00:06:50.820
In that case, we will go to the password from a password.

104
00:06:50.820 --> 00:06:54.500
Now, enter, ma'am.

105
00:06:54.510 --> 00:06:57.240
See in this the amount.

106
00:07:01.720 --> 00:07:05.100
I want to take your email password reset code is sent.

107
00:07:05.190 --> 00:07:05.580
Awesome.

108
00:07:05.630 --> 00:07:06.840
Let's take the email.

109
00:07:13.950 --> 00:07:14.370
All right.

110
00:07:14.370 --> 00:07:22.920
So you may have to take your spam folder, because usually when you use such email in products and you

111
00:07:22.920 --> 00:07:28.890
will use a domain email, for example, Ryan at your domain dotcom.

112
00:07:28.920 --> 00:07:29.190
Right.

113
00:07:29.190 --> 00:07:31.560
So that would be valid hotel.

114
00:07:34.470 --> 00:07:41.730
Otherwise you might email might be sent to the spam folder to make sure to check the spam folder and

115
00:07:41.730 --> 00:07:44.580
then report as not spam for the first time.

116
00:07:44.910 --> 00:07:46.740
Then it should be fine.

117
00:07:46.920 --> 00:07:49.530
So you can see we got the password reset.

118
00:07:49.540 --> 00:07:49.880
Cool.

119
00:07:50.730 --> 00:07:51.060
Okay.

120
00:07:51.630 --> 00:07:53.760
And this is the email that we sent.

121
00:07:53.850 --> 00:07:54.180
If you.

122
00:07:56.230 --> 00:07:57.820
You can see here in the back in.

123
00:07:59.700 --> 00:08:04.050
The subject and the content here.

124
00:08:04.350 --> 00:08:07.020
The password reset code is that code.

125
00:08:08.220 --> 00:08:18.420
You can see that you know, this code you would need to enter and the user need to enter this code along

126
00:08:18.420 --> 00:08:20.760
with the new password.

127
00:08:20.760 --> 00:08:23.940
And that way they will be able to reset the password.

128
00:08:26.250 --> 00:08:31.830
If you take, you will also find that code saved in the user as well.

129
00:08:32.010 --> 00:08:32.180
Right.

130
00:08:32.250 --> 00:08:40.680
So user in the MongoDB as I'm signing into MongoDB, let's have a look at the database as well.

131
00:08:41.940 --> 00:08:43.380
So let's go.

132
00:08:55.950 --> 00:08:57.210
Browse collections.

133
00:09:03.530 --> 00:09:09.770
So that user we just registered that user, that should be at the very end.

134
00:09:13.070 --> 00:09:17.720
Seems, as you can see in the research code, this user has the research court.

135
00:09:17.780 --> 00:09:23.230
You can see other users didn't have, but this one it has answer.

136
00:09:25.670 --> 00:09:34.260
Now, our next task is to show the code fill and the new password field so that we can finally owe the

137
00:09:34.260 --> 00:09:35.500
user to reset the password.
