1
00:00:00,420 --> 00:00:06,930
Let's create another middleware to make sure we have the user with the role of and right so let's call

2
00:00:06,930 --> 00:00:15,030
it is admin to export and is admin equals to async let's make it async.

3
00:00:15,030 --> 00:00:23,910
Folsom requests the response and since we're creating a middle way, we need the next call back from

4
00:00:23,910 --> 00:00:25,760
scenario to ship.

5
00:00:26,430 --> 00:00:27,390
And we try.

6
00:00:29,570 --> 00:00:34,370
And if we get in here, we come to love.

7
00:00:36,150 --> 00:00:37,290
So here when we try.

8
00:00:38,960 --> 00:00:41,270
We want to make sure we have the admin user.

9
00:00:42,490 --> 00:00:43,240
Now for this one.

10
00:00:43,240 --> 00:00:45,730
First, let's go to the category drought.

11
00:00:49,100 --> 00:00:50,330
I wrote categories.

12
00:00:50,330 --> 00:00:53,830
So you can see here before we are the easy to create.

13
00:00:53,840 --> 00:01:00,860
First we have to take for the logged in user and the the importance of this one is because this will

14
00:01:00,860 --> 00:01:04,610
give us the you decide in the request to use.

15
00:01:04,790 --> 00:01:05,020
Right.

16
00:01:05,030 --> 00:01:09,440
So that's really important because based on that idea, we're going to find that user from the database

17
00:01:09,710 --> 00:01:15,260
and then take if that to you this role is admin or not.

18
00:01:15,620 --> 00:01:15,890
All right.

19
00:01:16,250 --> 00:01:20,720
So later, we're going to apply the is admin middle way.

20
00:01:21,650 --> 00:01:23,540
First, we need to have this one.

21
00:01:23,600 --> 00:01:24,530
This is important.

22
00:01:25,370 --> 00:01:25,730
Okay.

23
00:01:26,030 --> 00:01:29,720
This will make sure we have the logged in user and we give the user ID.

24
00:01:30,650 --> 00:01:39,500
So this has dollars come first and then we will use this middleware to check if that user is admin and

25
00:01:39,500 --> 00:01:42,710
then if it is true, only then he will be able to create.

26
00:01:43,430 --> 00:01:44,960
So let's remove this from now.

27
00:01:47,340 --> 00:01:50,220
It's good to millrose.

28
00:01:50,220 --> 00:01:57,630
And here we try to find the user based on the Andy since we have this metal world that will give us

29
00:01:57,630 --> 00:02:06,540
the request to use it right to request user and the ID that was extracted from the token, which I showed

30
00:02:06,540 --> 00:02:07,710
you in the previous lecture.

31
00:02:08,850 --> 00:02:11,610
All right, so let's try to find the user content.

32
00:02:12,960 --> 00:02:15,210
User equals to await.

33
00:02:15,760 --> 00:02:21,750
Now, for this to work, we need to make sure we have the user model for its input that

34
00:02:26,700 --> 00:02:27,900
input user from.

35
00:02:30,250 --> 00:02:30,970
Models.

36
00:02:33,820 --> 00:02:34,330
User.

37
00:02:35,590 --> 00:02:42,250
And then this middleware gives us the request user and the we can access the I.D. from the token.

38
00:02:43,180 --> 00:02:52,450
So that means, yeah, when we try to find the user from the database or we use a modern user defined

39
00:02:53,080 --> 00:02:54,670
by a function.

40
00:02:55,000 --> 00:03:01,510
Now there are quite a lot of useful functions like this we can use with mongoose model, which you will

41
00:03:02,230 --> 00:03:03,700
see throughout the course.

42
00:03:03,790 --> 00:03:04,100
I guess.

43
00:03:04,120 --> 00:03:06,610
So I will be showing you one by one.

44
00:03:07,090 --> 00:03:11,830
So this one is quite a popular one, finding the vicinity.

45
00:03:11,830 --> 00:03:19,270
So we use the user model and use this function, find variety and this function requires the user side

46
00:03:19,840 --> 00:03:23,630
and that one we can access from requester to user dot underscore.

47
00:03:23,630 --> 00:03:23,910
Right.

48
00:03:25,050 --> 00:03:32,350
I guess now for this to work, you always need to make sure you have applied this middle well first

49
00:03:32,350 --> 00:03:34,180
and only then you apply.

50
00:03:34,180 --> 00:03:37,210
That is admin nil.

51
00:03:37,210 --> 00:03:38,710
And I guess it is really important.

52
00:03:39,100 --> 00:03:44,140
This has to always come first, otherwise you cannot access this value.

53
00:03:45,580 --> 00:03:45,940
All right.

54
00:03:45,970 --> 00:03:51,390
So this will give us the user if you want to log in control loggerhead.

55
00:03:51,400 --> 00:03:58,810
So always console.log until you fully understand what's happening and you can even have a look at the

56
00:03:58,810 --> 00:03:59,380
code.

57
00:03:59,380 --> 00:03:59,950
You know something?

58
00:03:59,950 --> 00:04:05,260
And if something's not right, then the others want to make sure you've gone too long and things are

59
00:04:05,260 --> 00:04:07,630
going as expected.

60
00:04:08,500 --> 00:04:16,090
All right, so we find the user and then let me remove this for now if we need to do some console.log

61
00:04:16,090 --> 00:04:16,700
also.

62
00:04:17,710 --> 00:04:20,810
So here I want to take for the users groups.

63
00:04:20,830 --> 00:04:21,190
All right.

64
00:04:21,190 --> 00:04:34,780
So if a user does role, it's not equal to I guess, and not equals to admin, because we know by default

65
00:04:34,780 --> 00:04:36,990
all the users role will be subscriber.

66
00:04:37,450 --> 00:04:42,640
So if the users role is not, admin always tried to take for the error first.

67
00:04:42,880 --> 00:04:43,240
Okay.

68
00:04:43,360 --> 00:04:50,470
So that's one principle in Node.js you always want to take for the errors first.

69
00:04:50,950 --> 00:04:54,100
So it is also called error driven development.

70
00:04:54,910 --> 00:05:02,500
Not that we trying to create errors, but we want to resolve the errors before we do anything else,

71
00:05:02,740 --> 00:05:04,930
just so that our server don't cross.

72
00:05:05,260 --> 00:05:05,560
All right.

73
00:05:06,040 --> 00:05:12,130
So if users role is not admin, then we want to send some kind of error response, right?

74
00:05:12,550 --> 00:05:13,480
So response

75
00:05:16,420 --> 00:05:20,980
return the response to the status of 403.

76
00:05:21,370 --> 00:05:28,770
By the way, let me quickly show you what these discord means, for example, has to be four or three.

77
00:05:29,570 --> 00:05:32,020
And so it is forbidden error.

78
00:05:32,410 --> 00:05:37,690
So it is protected for the authorized user only if the user is not authorized.

79
00:05:37,690 --> 00:05:43,030
We send this escort to this call.

80
00:05:43,210 --> 00:05:48,400
The browsers understand and they that's why this is the standard.

81
00:05:48,400 --> 00:05:52,030
So sometimes if the business is not found, you see four for error.

82
00:05:52,750 --> 00:05:58,600
If it is unauthorized for three error of the normal errors, you get 400 errors.

83
00:05:58,600 --> 00:06:00,010
You know it's like that.

84
00:06:02,740 --> 00:06:10,540
So we send the rest funds for industry and we send the decent response as well.

85
00:06:10,690 --> 00:06:19,510
Now instead of this in response, because since we're not actually going to display this Mrs. in the

86
00:06:19,510 --> 00:06:21,940
reactive instead of that.

87
00:06:23,060 --> 00:06:25,220
We can just use the sand as well.

88
00:06:25,910 --> 00:06:33,320
So if you do this, then it won't be accessed as a decent error message.

89
00:06:33,560 --> 00:06:36,410
But it is just going to appear in the.

90
00:06:37,500 --> 00:06:39,720
The network depth so that he can have a look.

91
00:06:40,170 --> 00:06:43,170
And so we will try the Jason era as we lead.

92
00:06:43,650 --> 00:06:54,000
But for this middle way, we just need to send some plain error messages so that unauthorized.

93
00:06:57,680 --> 00:07:07,580
The unauthorized, just so that if there's some issues we can debug by looking at the network to see

94
00:07:07,580 --> 00:07:12,020
if user is not admin, we send the unauthorised error else.

95
00:07:15,510 --> 00:07:20,270
It was, we can give you the access.

96
00:07:20,390 --> 00:07:23,330
So all we need to do is execute this callback function.

97
00:07:23,660 --> 00:07:24,020
So.

98
00:07:25,490 --> 00:07:27,920
The code and execute.

99
00:07:27,920 --> 00:07:33,620
That means then the create control function can run, right?

100
00:07:33,620 --> 00:07:37,250
So if there's error, so it will.

101
00:07:38,380 --> 00:07:43,470
Stop here and then the code in the controller will not even execute it.

102
00:07:43,480 --> 00:07:44,740
It will not reach there.

103
00:07:45,220 --> 00:07:46,660
It stops immediately.

104
00:07:46,810 --> 00:07:49,290
In the returning the response.

105
00:07:49,300 --> 00:07:53,560
But if everything is good, then obviously it will continue.

106
00:07:54,780 --> 00:07:57,640
So this is how we can create the admin middleware.

107
00:07:58,150 --> 00:07:59,380
Now we can give this a try.

108
00:07:59,650 --> 00:08:00,820
So let's import this one.

109
00:08:04,540 --> 00:08:07,250
Request sign in and then is admin middleware.

110
00:08:07,250 --> 00:08:08,930
And then we can try applying here.

111
00:08:11,170 --> 00:08:13,750
After this require assigning metal work.

112
00:08:14,380 --> 00:08:18,670
Now we know that our users, they all subscribe.

113
00:08:18,710 --> 00:08:20,560
There is no user that is admin.

114
00:08:21,400 --> 00:08:23,650
No user has the role of admin.

115
00:08:23,950 --> 00:08:27,670
So this time we may see the error message.

116
00:08:27,910 --> 00:08:28,870
Let's give it a try.

117
00:08:34,210 --> 00:08:39,310
All right, so if I try creating this term, let's try creating five.

118
00:08:41,710 --> 00:08:42,170
Submit.

119
00:08:42,250 --> 00:08:44,260
You can see we immediately get the error.

120
00:08:44,260 --> 00:08:45,610
Let's see what is the error?

121
00:08:46,060 --> 00:08:49,150
Follow through and forward an error because that's what we send.

122
00:08:50,530 --> 00:08:57,700
And because we send this unauthorized message that should be accessible here.

123
00:08:58,270 --> 00:09:01,330
Previously, you can see we got unauthorized.

124
00:09:02,410 --> 00:09:07,300
I didn't send the decent response because this is, as you can see, it's a middle way.

125
00:09:07,310 --> 00:09:14,440
So obviously we don't have to throw a nice message to the users because if someone is trying to do something

126
00:09:14,710 --> 00:09:18,250
fishy like this one, then obviously we don't have to be very nice.

127
00:09:18,250 --> 00:09:24,120
We just need to figure out what's going on so we can just send it like this.

128
00:09:25,930 --> 00:09:26,920
Okay, so that's good.

129
00:09:27,790 --> 00:09:32,950
It is now protected only for the user that has the role of admin, otherwise you cannot create it.

130
00:09:32,950 --> 00:09:33,760
So that is awesome.

131
00:09:33,970 --> 00:09:35,440
Our server is protected.

132
00:09:35,680 --> 00:09:39,310
Now to give it a try, let's make our user admin.

133
00:09:39,580 --> 00:09:44,710
So this user, the currently logged in user that is, I think run.

134
00:09:46,490 --> 00:09:48,260
At G.M. Dotcom.

135
00:09:48,410 --> 00:09:49,400
I think that's the one.

136
00:09:49,820 --> 00:09:57,740
So let's make that user admin and see if he can prove to you the categories which he should.

137
00:09:58,700 --> 00:10:00,230
So that's the very first use.

138
00:10:00,230 --> 00:10:02,900
And we created many other users with these.

139
00:10:04,750 --> 00:10:06,040
Fake email addresses.

140
00:10:06,460 --> 00:10:09,040
So this is the one I'm currently logged in at.

141
00:10:09,400 --> 00:10:10,860
So let me add this one.

142
00:10:12,880 --> 00:10:14,660
Let me turn this to Ed.

143
00:10:18,520 --> 00:10:18,880
All right.

144
00:10:21,340 --> 00:10:21,970
I think something.

145
00:10:22,150 --> 00:10:23,090
Something over there.

146
00:10:27,120 --> 00:10:29,970
Later we will also be updates.

147
00:10:30,210 --> 00:10:33,570
Just click on the update mode segment to later.

148
00:10:34,980 --> 00:10:41,010
Obviously one admin will be able to either create either you just send the admin, you will be able

149
00:10:41,010 --> 00:10:42,330
to give different roles.

150
00:10:42,510 --> 00:10:47,520
For example, alter or even make another user admin.

151
00:10:47,550 --> 00:10:51,930
I will show you how you can do all that from the dashboard, but for the very first time you want to

152
00:10:51,930 --> 00:10:59,430
make one user admin which you can do something like this and this is something you can run the MongoDB

153
00:10:59,430 --> 00:11:01,590
query ROC queries in the.

154
00:11:02,480 --> 00:11:04,470
In the console as well.

155
00:11:04,730 --> 00:11:11,450
So when we deploy our application in the cloud later, the very first user, we can update his role

156
00:11:12,290 --> 00:11:16,100
by accessing the terminal like this as well.

157
00:11:16,100 --> 00:11:17,090
So no problem there.

158
00:11:18,410 --> 00:11:18,800
All right.

159
00:11:18,800 --> 00:11:19,940
So it has been admin.

160
00:11:21,180 --> 00:11:21,950
So let's try.

161
00:11:21,960 --> 00:11:23,880
Let's sign out and sign in and.

162
00:11:25,730 --> 00:11:27,020
This user is not admin.

163
00:11:28,460 --> 00:11:28,870
Okay.

164
00:11:29,030 --> 00:11:30,020
You can see they're only there.

165
00:11:30,980 --> 00:11:32,750
So let's go here.

166
00:11:33,860 --> 00:11:36,200
By the way, the front end is still not protected.

167
00:11:36,200 --> 00:11:39,920
Our back end is protected for the admin only.

168
00:11:39,950 --> 00:11:41,490
So let's go to categories.

169
00:11:41,540 --> 00:11:42,320
Create.

170
00:11:43,760 --> 00:11:48,980
No, it says category and it is created not because this uses admin.

171
00:11:49,790 --> 00:11:52,070
All right, so our back end is protected.

172
00:11:52,070 --> 00:11:53,480
Our road is protected.

173
00:11:55,610 --> 00:11:58,700
But our fountain is not protected.

174
00:11:59,540 --> 00:12:07,820
I guess a few any other user will have access to this one, even though they cannot create, they cannot

175
00:12:07,820 --> 00:12:08,750
save in the database.

176
00:12:09,620 --> 00:12:14,300
It's not good to show our fountain to anyone.

177
00:12:14,330 --> 00:12:15,950
Obviously, we want to protect it.

178
00:12:16,010 --> 00:12:16,310
Right.

179
00:12:16,700 --> 00:12:19,490
So let's try the different user.

180
00:12:25,730 --> 00:12:30,860
I guess this uses a subscriber, but he can still access this dashboard.

181
00:12:31,130 --> 00:12:33,730
He can still access this category, create ways.

182
00:12:33,740 --> 00:12:38,660
This is something we have to fix, and we will do it in the coming lectures.

183
00:12:38,930 --> 00:12:39,260
All right.

184
00:12:39,260 --> 00:12:43,400
So this user cannot create.

185
00:12:44,960 --> 00:12:45,380
Awesome.
