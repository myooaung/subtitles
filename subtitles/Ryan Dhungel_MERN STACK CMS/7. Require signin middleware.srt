1
00:00:00,840 --> 00:00:01,170
All right.

2
00:00:01,170 --> 00:00:08,220
So let's go ahead and use that NPM library that I was talking about and being exposed to the integrity.

3
00:00:09,240 --> 00:00:12,030
This will help us verify the token.

4
00:00:15,770 --> 00:00:17,330
This is the package we're going to use.

5
00:00:17,990 --> 00:00:19,640
So this is the way we're going to use.

6
00:00:20,780 --> 00:00:25,460
So you can see here they have the root this function.

7
00:00:27,090 --> 00:00:28,440
This middleware is here.

8
00:00:28,560 --> 00:00:36,120
And then the function which in our case control a function that will do something, some kind of a send

9
00:00:36,120 --> 00:00:38,980
some kind of responsive in the database, whatever that is.

10
00:00:38,980 --> 00:00:46,500
So you can see here in between and this is the this is the library that is used to verify the token

11
00:00:46,800 --> 00:00:47,670
actually did the.

12
00:00:49,810 --> 00:00:52,900
Method we didn't use until it's installed this one.

13
00:00:55,930 --> 00:00:56,830
In our service.

14
00:00:56,840 --> 00:00:58,120
Let's stop that.

15
00:00:59,380 --> 00:00:59,830
That in.

16
00:01:02,190 --> 00:01:09,270
Let's start it back here and let's use that now to put that middle where we could actually put in a

17
00:01:09,270 --> 00:01:12,420
control or we could create a different.

18
00:01:14,010 --> 00:01:14,470
For.

19
00:01:16,810 --> 00:01:21,850
Let's put it in a different folder because we will be creating a few more middle words later.

20
00:01:22,450 --> 00:01:25,630
So here in this server, let's create a new folder.

21
00:01:27,370 --> 00:01:28,030
Middleware.

22
00:01:28,600 --> 00:01:31,330
And inside here we just need one find.

23
00:01:31,330 --> 00:01:33,340
So let's just call it index service.

24
00:01:34,240 --> 00:01:39,340
And here we can write our function to export const.

25
00:01:40,970 --> 00:01:43,820
Let's call it that requires signing.

26
00:01:44,360 --> 00:01:46,610
This is the name we are giving to our middleware.

27
00:01:47,840 --> 00:01:50,980
And here, obviously we could write our own function.

28
00:01:50,990 --> 00:01:59,450
However, since we're going to use that, the library that we're going to use that string and the input

29
00:01:59,450 --> 00:02:09,440
of that first input expressed the view t from expressed to the ready to double take.

30
00:02:11,090 --> 00:02:14,480
The ecologist did everything you could.

31
00:02:14,660 --> 00:02:16,910
You know, you could call it anything you like.

32
00:02:17,210 --> 00:02:19,100
And this is the way they have used it.

33
00:02:19,490 --> 00:02:22,460
So you can even copy that.

34
00:02:23,550 --> 00:02:24,090
So here.

35
00:02:27,380 --> 00:02:32,270
Expressed the dignity to decide the library we import.

36
00:02:32,270 --> 00:02:33,040
We use that.

37
00:02:33,170 --> 00:02:34,430
We use that as a function.

38
00:02:34,640 --> 00:02:45,560
And here we are going to pass the the object, which is right here as well to.

39
00:02:49,320 --> 00:02:49,470
This.

40
00:02:49,670 --> 00:02:55,140
The beauty is already here, our exhausted of some of that and more of that.

41
00:02:55,140 --> 00:02:58,470
And then we have the curly brace as well setting up that, some of that.

42
00:02:58,920 --> 00:03:04,530
So as you can see here, we just need these two properties here inside this object.

43
00:03:05,510 --> 00:03:06,530
One is secret.

44
00:03:06,680 --> 00:03:08,390
Another is the algorithm.

45
00:03:08,420 --> 00:03:10,190
So algorithm is just a standard.

46
00:03:11,000 --> 00:03:16,310
So we can continue using this algorithm secret.

47
00:03:16,620 --> 00:03:25,460
And now the secret has to be the biggest secret, which is hearing the Ian Lee file by the name of did

48
00:03:25,460 --> 00:03:26,300
a beauty secret.

49
00:03:26,330 --> 00:03:30,590
So this is the same secret we used to generate token.

50
00:03:30,720 --> 00:03:30,920
Right.

51
00:03:30,920 --> 00:03:32,210
So that means to verify.

52
00:03:32,340 --> 00:03:33,800
So we need the same secret.

53
00:03:34,190 --> 00:03:36,170
So let's replace this with.

54
00:03:37,300 --> 00:03:38,830
That that one we have.

55
00:03:38,830 --> 00:03:44,620
In the end, we saw that Chinese forces stood in the dirt to the sacred.

56
00:03:46,330 --> 00:03:46,660
All right.

57
00:03:48,430 --> 00:03:51,760
So this is how you going to use this library?

58
00:03:51,760 --> 00:03:53,410
Nice and simple request.

59
00:03:53,410 --> 00:03:53,920
Sign it.

60
00:03:55,000 --> 00:04:03,340
All right, so now you can import this in apply in any routes that you want to protect for the logged

61
00:04:03,340 --> 00:04:05,110
in user only answer.

62
00:04:05,110 --> 00:04:06,130
This is all you have to do.

63
00:04:06,550 --> 00:04:12,550
So let's copy that and import in our routes because we want to protect this road.

64
00:04:12,610 --> 00:04:12,880
Right.

65
00:04:13,450 --> 00:04:13,930
So you.

66
00:04:16,030 --> 00:04:18,670
So we have continuously sold the right one for.

67
00:04:22,040 --> 00:04:25,520
MG Now it's so important.

68
00:04:28,060 --> 00:04:30,140
Requires signing.

69
00:04:31,430 --> 00:04:33,220
From Midwest.

70
00:04:33,920 --> 00:04:34,310
All right.

71
00:04:34,550 --> 00:04:37,860
And then we can apply it as a middleware.

72
00:04:37,880 --> 00:04:39,320
So instead of.

73
00:04:40,700 --> 00:04:45,160
The one we wrote before replaced that with a request.

74
00:04:45,170 --> 00:04:45,620
Sign it.

75
00:04:47,910 --> 00:04:50,910
Our set is how we can use a middleware.

76
00:04:51,570 --> 00:04:54,930
Now, this will make sure that we have the logged in user.

77
00:04:56,430 --> 00:05:01,770
By verifying the token it gets, it will also take for the expiry as well.

78
00:05:02,160 --> 00:05:07,260
And if the token is valid, then it will add.

79
00:05:08,340 --> 00:05:13,230
The property in the request object by the name of the user.

80
00:05:13,560 --> 00:05:17,430
That is a default behavior in that what it does automatically.

81
00:05:17,820 --> 00:05:26,090
So if the token is valid, then we know that when we generate that token, we use the user's ID, right?

82
00:05:26,610 --> 00:05:31,050
So if you have a look here one more time when we generate that token.

83
00:05:32,300 --> 00:05:38,500
We use the X Factor, we use the Secret, but we also use this data, the payload, which is the user

84
00:05:38,510 --> 00:05:38,910
side.

85
00:05:39,440 --> 00:05:39,680
All right.

86
00:05:40,490 --> 00:05:48,080
So that means this ID we will be able to access from the request object because of this middleware.

87
00:05:48,380 --> 00:05:49,820
This will automatically add.

88
00:05:51,230 --> 00:05:59,060
If the token is valid, it will add the user property in the request object automatically by default.

89
00:06:00,430 --> 00:06:03,580
And then from there, you will be able to access this user site.

90
00:06:06,110 --> 00:06:06,420
All right.

91
00:06:06,770 --> 00:06:14,060
So that's the beauty of this, Neal, because when we apply this bill will not only that, we know that

92
00:06:14,540 --> 00:06:15,800
we have the logged in user.

93
00:06:16,040 --> 00:06:19,780
We know who is the user because we have the user's ID, right?

94
00:06:19,780 --> 00:06:25,460
So based on that I.D., we can query the database and find that uses other information, for example,

95
00:06:25,460 --> 00:06:27,320
user name, email and so on.

96
00:06:28,670 --> 00:06:31,610
All right, so let's let's give it a try.

97
00:06:32,210 --> 00:06:34,850
So we have a plan that means we know.

98
00:06:36,390 --> 00:06:38,070
The Square gondola function.

99
00:06:38,070 --> 00:06:39,900
Let's have a look at that.

100
00:06:45,180 --> 00:06:46,230
So creative control from.

101
00:06:46,230 --> 00:06:48,240
So we should be able to see the request body.

102
00:06:52,140 --> 00:06:55,860
We will also be able to see the heavies, but that is something we already saw.

103
00:06:55,860 --> 00:06:58,920
So let's let's just leave it like this and give it a try.

104
00:06:59,520 --> 00:07:05,400
Let's see if this time, if we can see this console.log and we should be able to see because we have

105
00:07:05,400 --> 00:07:07,110
the token we're sending in the head.

106
00:07:07,950 --> 00:07:08,690
So if you try.

107
00:07:10,150 --> 00:07:11,770
Category cleared, failed.

108
00:07:14,280 --> 00:07:14,490
Oh.

109
00:07:14,580 --> 00:07:16,230
Secrets would be set.

110
00:07:16,880 --> 00:07:17,130
Hmm.

111
00:07:19,270 --> 00:07:20,840
Let's go to our middleware.

112
00:07:23,590 --> 00:07:24,820
We have the secret.

113
00:07:25,240 --> 00:07:27,480
It's a bit weird why we are seeing that.

114
00:07:28,090 --> 00:07:29,770
Because we have the secret there.

115
00:07:31,730 --> 00:07:37,610
So that means for some reason we're not able to access this in WI if it will soon be happening because

116
00:07:37,790 --> 00:07:44,390
we have the required 30 individual conflicts that we have here in the server indication of this.

117
00:07:44,750 --> 00:07:51,400
So that means we should be able to access the new files anywhere, anywhere in our app.

118
00:07:51,410 --> 00:07:53,270
But for some reason it's not working.

119
00:07:53,270 --> 00:07:58,400
So if we're having the same issues, just try to use the required here.

120
00:07:58,440 --> 00:07:59,900
So let's see.

121
00:07:59,900 --> 00:08:00,560
You could try that.

122
00:08:02,720 --> 00:08:03,770
You can see it works.

123
00:08:03,800 --> 00:08:10,100
So basically the problem was even though we using it correctly, somehow in this file, we were not

124
00:08:10,100 --> 00:08:12,920
able to read the EMV variable.

125
00:08:13,280 --> 00:08:13,790
So our.

126
00:08:16,060 --> 00:08:23,590
Every update later on as we progress, if we have to keep doing it or not, you know, if there is a

127
00:08:23,590 --> 00:08:24,700
solution to that.

128
00:08:24,700 --> 00:08:26,380
We did have to keep importing.

129
00:08:26,830 --> 00:08:28,000
I will obviously show you.

130
00:08:28,000 --> 00:08:30,440
But at the moment, let's continue with this one.

131
00:08:30,460 --> 00:08:32,710
So just require this envy.

132
00:08:32,710 --> 00:08:38,290
We don't envy in this file as well so that we can use this variable.

133
00:08:39,850 --> 00:08:41,050
Okay, so it looks good.

134
00:08:41,050 --> 00:08:43,860
Now let's give it a try.

135
00:08:43,930 --> 00:08:49,480
It's good to plant and let's send a category one.

136
00:08:51,710 --> 00:08:58,160
And you can see, obviously, this one works because we have the largest user we have send the dog in

137
00:08:58,160 --> 00:08:58,880
which is valid.

138
00:08:58,880 --> 00:08:59,300
So.

139
00:09:01,400 --> 00:09:10,730
We applied this middleware to our route and still we were able to create you know, we could execute

140
00:09:10,730 --> 00:09:11,400
the code here.

141
00:09:11,420 --> 00:09:15,980
So, so far, so good now since we have applied that middleware.

142
00:09:17,210 --> 00:09:23,300
Like I told you, this gives us the requester to user by default.

143
00:09:23,900 --> 00:09:33,260
So let's see how that should come to log request or user by default.

144
00:09:33,260 --> 00:09:33,980
We get that.

145
00:09:34,820 --> 00:09:35,640
Let's have a look.

146
00:09:35,720 --> 00:09:42,370
So here we should be able to see the idea that we used while generating that hope.

147
00:09:44,030 --> 00:09:44,720
Let's try that.

148
00:09:44,730 --> 00:09:46,160
Let's submit one more time.

149
00:09:47,060 --> 00:09:47,570
Come here.

150
00:09:47,780 --> 00:09:48,680
And you can see here.

151
00:09:49,250 --> 00:09:56,990
Thanks to that Express JWT middleware that has now given us this data and the request to use it because

152
00:09:57,920 --> 00:10:00,320
our token was verified.

153
00:10:00,500 --> 00:10:06,960
So once the token is verified, you can see you are able to access the currently logged in users IED,

154
00:10:06,980 --> 00:10:07,820
which is great.

155
00:10:08,120 --> 00:10:14,100
Now, based on this idea, we can find this user from the date of this and do many other things which

156
00:10:14,100 --> 00:10:22,310
you will see how we use this information as we progress with the course and we have some other information

157
00:10:22,310 --> 00:10:22,610
as well.

158
00:10:22,610 --> 00:10:24,560
So this is issued did.

159
00:10:25,590 --> 00:10:31,440
In this format and this is the expiry date of this stoke issue date and exfoliate.

160
00:10:32,430 --> 00:10:33,600
So that's great.

161
00:10:35,250 --> 00:10:42,660
We were able to use that library to apply a middleware to make sure we have been able to use it and

162
00:10:43,140 --> 00:10:45,570
we will be able to access the ideas.

163
00:10:48,510 --> 00:10:55,410
Now, the next thing we want to do is create one more middleware that will take if the user is admin.

164
00:10:56,040 --> 00:10:56,280
All right.

165
00:10:56,550 --> 00:10:59,400
Now, before we actually do that, let me show you.

166
00:11:00,940 --> 00:11:07,270
What kind of errors you will get if you are sending expired to quickly go to the context.

167
00:11:08,910 --> 00:11:09,660
And let's.

168
00:11:10,110 --> 00:11:10,710
Let's just.

169
00:11:11,910 --> 00:11:14,820
Put some extra characters.

170
00:11:14,820 --> 00:11:15,000
You.

171
00:11:17,390 --> 00:11:19,150
These are the one we're using in the clean one.

172
00:11:19,160 --> 00:11:19,640
So let's.

173
00:11:20,600 --> 00:11:27,290
Send some extra characters just to make sure make sure that our token is not valid, just to see how

174
00:11:27,290 --> 00:11:27,830
this works.

175
00:11:28,550 --> 00:11:33,890
If you do something like that, if you have invalid token and you make a request.

176
00:11:39,800 --> 00:11:40,130
Okay.

177
00:11:40,130 --> 00:11:40,550
So.

178
00:11:43,170 --> 00:11:44,640
Let's try this one.

179
00:11:47,890 --> 00:11:48,280
Okay.

180
00:11:49,390 --> 00:11:51,160
And let's give a refresher.

181
00:11:54,500 --> 00:11:54,780
I guess.

182
00:11:54,880 --> 00:11:55,640
Let's try.

183
00:11:58,610 --> 00:12:03,490
And you can see we got the error message through a category filled in the network tab.

184
00:12:03,500 --> 00:12:12,530
You can see unauthorized because we have the send the invalid token and you can see here on unauthorized

185
00:12:12,530 --> 00:12:21,290
token on a first error format is the format is wrong like you see for one unauthorized.

186
00:12:22,850 --> 00:12:23,330
Beautiful.

187
00:12:24,740 --> 00:12:26,300
Okay, so let's undo that.

188
00:12:29,110 --> 00:12:32,020
Let's remove those characters.

189
00:12:32,020 --> 00:12:32,590
Perfect.

190
00:12:33,430 --> 00:12:33,670
All right.

191
00:12:34,360 --> 00:12:34,750
So.

192
00:12:37,130 --> 00:12:42,300
We were able to use that library to make sure the users logged in now.

193
00:12:42,320 --> 00:12:47,270
In the next lecture we can try creating a category, saving the database.

194
00:12:47,510 --> 00:12:52,040
But then we also want to make sure that it is only accessible for the admin user.

195
00:12:52,340 --> 00:12:56,440
That means we're going to create one or middle middleware to take if the user is added.
