WEBVTT
1
00:00:00.510 --> 00:00:04.680
All right, so previously I was talking about working in the salon biz.

2
00:00:05.640 --> 00:00:10.290
Before we create a global context and send the user information and the token there.

3
00:00:10.600 --> 00:00:10.860
Right?

4
00:00:11.130 --> 00:00:14.790
However, we don't actually have to wait for the in page.

5
00:00:15.000 --> 00:00:22.320
We can actually start implementing that feature now because on the sign up we are already getting the

6
00:00:22.350 --> 00:00:25.000
user and the token from our server.

7
00:00:25.020 --> 00:00:25.350
Right.

8
00:00:25.590 --> 00:00:28.440
So that means we can already have that information.

9
00:00:29.040 --> 00:00:35.100
And when the user logs in for the very first time when they sign up, we don't have to ask them to log

10
00:00:35.100 --> 00:00:39.060
in, but we can immediately authenticate the user.

11
00:00:39.090 --> 00:00:43.260
So we can, you know, take them to the dashboard page or something like that.

12
00:00:43.620 --> 00:00:50.490
So that means we want to work on the context so that the information that we get from the backend,

13
00:00:50.490 --> 00:00:57.480
the token and the user, we want to send that in a context so that it is available globally for the

14
00:00:57.480 --> 00:00:58.510
entire application.

15
00:00:58.800 --> 00:01:03.750
Because we need to take for the authenticated user in many different places, many different components,

16
00:01:03.750 --> 00:01:03.990
right?

17
00:01:04.200 --> 00:01:06.900
So for that, we're going to use context.

18
00:01:07.350 --> 00:01:09.240
So that is something we have already done.

19
00:01:09.840 --> 00:01:18.390
Now we have already created this same context and then we input it in our objectives so that we could

20
00:01:18.390 --> 00:01:22.440
access the theme in the entire application.

21
00:01:22.440 --> 00:01:22.620
Right?

22
00:01:22.620 --> 00:01:24.090
So it's the same concept.

23
00:01:24.120 --> 00:01:32.460
Now we're going to create another context for authentication so that we can save the user's information

24
00:01:32.460 --> 00:01:33.270
and the token.

25
00:01:34.230 --> 00:01:34.470
All right.

26
00:01:34.470 --> 00:01:37.800
So let's go ahead, create a new file in our context folder.

27
00:01:38.370 --> 00:01:40.200
We call it use.

28
00:01:41.580 --> 00:01:44.430
So to create a context first, we need some hooks.

29
00:01:44.580 --> 00:01:52.110
So we need to use state use effect and then create context.

30
00:01:55.820 --> 00:01:56.210
We are.

31
00:01:58.870 --> 00:02:02.350
Then we create a context.

32
00:02:02.350 --> 00:02:07.000
We can call it a context, a cluster.

33
00:02:07.390 --> 00:02:12.670
We use this function, create context, we execute that all.

34
00:02:13.050 --> 00:02:14.380
So that's how we create a context.

35
00:02:14.380 --> 00:02:17.410
Now we need to provide this context as well.

36
00:02:17.410 --> 00:02:21.160
And for that we can create a component of a grid call it are provided.

37
00:02:25.230 --> 00:02:26.160
Well, for one.

38
00:02:27.630 --> 00:02:28.200
And here.

39
00:02:29.100 --> 00:02:31.480
First we need to have a stick.

40
00:02:31.650 --> 00:02:31.920
Right.

41
00:02:31.920 --> 00:02:40.380
Second of set costs equals to use states.

42
00:02:41.010 --> 00:02:44.610
And the default value we're going to use is.

43
00:02:48.370 --> 00:02:52.750
We came to have the user and took the right to user.

44
00:02:52.990 --> 00:02:56.350
That will be the empty object.

45
00:02:56.980 --> 00:02:58.460
We can call it no.

46
00:02:58.480 --> 00:03:00.970
Or you can use these objects.

47
00:03:00.970 --> 00:03:10.060
Syntax no means basically empty objects so we can use them and the token will have the string value.

48
00:03:10.070 --> 00:03:11.800
So by default, we can leave it like this.

49
00:03:12.500 --> 00:03:12.700
All right.

50
00:03:12.940 --> 00:03:14.110
So that's how state.

51
00:03:16.530 --> 00:03:17.160
Next one.

52
00:03:17.310 --> 00:03:18.510
How we want to.

53
00:03:19.540 --> 00:03:22.180
Provide grants, we want to provide the value.

54
00:03:22.270 --> 00:03:28.630
Now, before we do that, what we are also going to do is this user information that we get on sign

55
00:03:28.630 --> 00:03:34.210
up that information not only we want to save in the context, but we also want to save in the local

56
00:03:34.210 --> 00:03:39.580
stories because the value in the context will be lost when you reload the application.

57
00:03:39.760 --> 00:03:42.250
If you reload the browser, it will be lost.

58
00:03:42.610 --> 00:03:48.460
All right, so when something like that happens and the browser reloads, the user come back to visit

59
00:03:48.460 --> 00:03:49.570
our site later.

60
00:03:49.930 --> 00:03:54.730
So that time what we want to do is we want to grab that value from the local storage.

61
00:03:54.730 --> 00:04:00.040
So if it exists there, then we want to grab that and populate the state.

62
00:04:00.700 --> 00:04:01.000
All right.

63
00:04:01.300 --> 00:04:04.940
So, so that user don't have to log in is time to browser reloads.

64
00:04:05.170 --> 00:04:06.580
They come back to our application.

65
00:04:07.390 --> 00:04:11.950
So for that, we can use use effect to which runs with the component months.

66
00:04:11.950 --> 00:04:12.190
Right.

67
00:04:12.190 --> 00:04:14.410
So you the effect it takes a function as an argument.

68
00:04:15.250 --> 00:04:16.210
We do our function.

69
00:04:17.230 --> 00:04:20.650
And the second argument is the dependent theory.

70
00:04:21.310 --> 00:04:23.470
And in our case we just leave it empty.

71
00:04:23.470 --> 00:04:25.870
We just want to run it when the component runs.

72
00:04:26.860 --> 00:04:27.190
All right.

73
00:04:27.190 --> 00:04:32.950
So here, what we want to do is we want to grab the value from local store as if it exist.

74
00:04:33.340 --> 00:04:39.550
Now, of course, we haven't said anything in the local stores yet, so at the moment there will be

75
00:04:39.550 --> 00:04:39.910
nothing.

76
00:04:39.910 --> 00:04:47.920
But very soon we'll be going back to our signup base and the the sign of response that we get from a

77
00:04:47.930 --> 00:04:55.120
server, the user in token we're going to save in the local stories as well as well as in the context.

78
00:04:55.120 --> 00:04:56.230
So it will be there.

79
00:04:56.740 --> 00:04:56.980
All right.

80
00:04:57.130 --> 00:05:05.320
So first, we have to check if we have the local stories, if local stories and if there is item called

81
00:05:05.320 --> 00:05:05.680
us.

82
00:05:05.920 --> 00:05:14.650
If there is, then to grab that you can use this function called get to use local stories is actually

83
00:05:14.650 --> 00:05:17.380
really easy to use so as you can see you.

84
00:05:20.230 --> 00:05:23.680
To get the items from the local storage, you give the key.

85
00:05:24.560 --> 00:05:31.630
So if we save anything by the name of oath, which will be the key and values, then we can access that

86
00:05:31.630 --> 00:05:32.860
using widget item.

87
00:05:33.280 --> 00:05:39.400
And if you want to save anything that time, you will use a function called set item, get item and

88
00:05:39.400 --> 00:05:40.180
set items.

89
00:05:40.180 --> 00:05:41.170
Pretty straightforward.

90
00:05:42.190 --> 00:05:47.080
All right, so if we have the auth in the local storage, we want to grab that.

91
00:05:47.950 --> 00:05:55.360
You can see we grabbed that and we saved we populate our state using that value.

92
00:05:55.660 --> 00:06:02.110
Now, while doing that, we also use this function decent pass to pass this value.

93
00:06:02.320 --> 00:06:10.300
You can see we used the decent pass pass the value that we are getting from the local service because

94
00:06:10.690 --> 00:06:15.130
anything you save in the level service, you save in the decent data format.

95
00:06:15.390 --> 00:06:18.700
So that looks almost exactly the same as ours could object.

96
00:06:18.700 --> 00:06:20.680
But there is there are differences.

97
00:06:21.250 --> 00:06:23.470
So it is simple as this in data.

98
00:06:23.740 --> 00:06:31.150
However, when we want to use an application that has to be a task object.

99
00:06:31.260 --> 00:06:35.290
All right, so this function will convert the decent duties of a script object.

100
00:06:35.920 --> 00:06:38.410
So that way we can start using the values.

101
00:06:40.560 --> 00:06:44.780
So next time when we sign up will save the user in token.

102
00:06:45.020 --> 00:06:50.300
So at that time, even on the press release, this function would run and grab that value and put in

103
00:06:50.300 --> 00:06:51.360
our state here.

104
00:06:52.760 --> 00:06:57.260
So with all that, all we need to do is return the the provider to return

105
00:07:00.110 --> 00:07:01.400
all context.

106
00:07:03.970 --> 00:07:05.470
It for fun.

107
00:07:05.950 --> 00:07:14.050
So we have a literature to the context and that gives us this provider which we can use to provide the

108
00:07:14.050 --> 00:07:14.620
state.

109
00:07:15.520 --> 00:07:21.880
And then anything that is wrapped in between which which will be rendered at children books.

110
00:07:22.300 --> 00:07:24.130
So we going to have children.

111
00:07:24.130 --> 00:07:28.390
So that means we can grab these children from.

112
00:07:31.780 --> 00:07:37.220
And then here we want to pass the values of values going to be this one.

113
00:07:39.230 --> 00:07:48.910
The state or it will have the value and set forth will be able to upgrade the state to symbolize that

114
00:07:48.920 --> 00:07:51.170
this is how we create out of context.

115
00:07:51.530 --> 00:07:58.520
Now you can see we can pass the children proofs, we can receive that and then render while we are providing

116
00:07:58.520 --> 00:07:59.000
the value.

117
00:07:59.120 --> 00:08:05.990
So that means now we can import this provider, you know, averages that way the entire application

118
00:08:05.990 --> 00:08:10.540
will be available here, the children and they will have access to the bed.

119
00:08:12.110 --> 00:08:12.380
Okay.

120
00:08:12.530 --> 00:08:22.300
So with this, let's go to AB and let's import that just like we did the theme provided.

121
00:08:22.300 --> 00:08:23.180
Let's import.

122
00:08:25.180 --> 00:08:27.660
Of up from.

123
00:08:29.970 --> 00:08:31.390
Context plus.

124
00:08:32.880 --> 00:08:34.350
And then we want to wrap.

125
00:08:35.520 --> 00:08:36.930
We want to wrap.

126
00:08:36.940 --> 00:08:42.240
Let's just cut loose and use our provider.

127
00:08:47.950 --> 00:08:49.730
And then it's based that magnet.

128
00:08:50.860 --> 00:08:51.330
Beautiful.

129
00:08:51.670 --> 00:09:00.310
Now within our application anyway, we can import the auto context and start using the values from the

130
00:09:00.310 --> 00:09:05.770
context the host and set out to update the context.

131
00:09:05.980 --> 00:09:06.820
So we can do that.

132
00:09:08.250 --> 00:09:14.200
Also, let's not forget to export because we are already imported here.

133
00:09:16.790 --> 00:09:17.490
What for what?

134
00:09:17.510 --> 00:09:20.000
However, we have an exports to export.

135
00:09:20.510 --> 00:09:27.810
This time we're exploring our context to then provide.

136
00:09:33.400 --> 00:09:33.670
All right.

137
00:09:34.780 --> 00:09:39.700
It's not a different expert, so you always need to make sure to input dish structure.

138
00:09:41.110 --> 00:09:41.590
Perfect.

139
00:09:41.980 --> 00:09:48.100
Now we should be able to access the global context, this earth context, anyway in our application.

140
00:09:48.220 --> 00:09:49.270
So let's give it a try.

141
00:09:49.480 --> 00:09:55.120
And in the following lecture, we're going to send the sign of response and put that in the context

142
00:09:55.120 --> 00:09:56.290
and see how that works.

143
00:09:57.970 --> 00:09:58.850
Let's go.

144
00:09:58.890 --> 00:10:00.240
Let's give it a try.

145
00:10:02.570 --> 00:10:04.620
Let's try to compete to have the home base.

146
00:10:04.670 --> 00:10:13.850
Let's try to see if we have access to what context, input or context from.

147
00:10:15.350 --> 00:10:16.520
So from here we go.

148
00:10:16.520 --> 00:10:19.340
One step up, get in type components.

149
00:10:19.580 --> 00:10:23.090
Sorry, not important context in off.

150
00:10:24.230 --> 00:10:34.580
To use our context, we need to import the use context who get involved use context from React.

151
00:10:37.510 --> 00:10:40.260
And then now we can start using that term.

152
00:10:40.270 --> 00:10:41.650
It's called context.

153
00:10:42.760 --> 00:10:47.010
And that would be pronounced parts.

154
00:10:47.470 --> 00:10:51.610
So it needs to use context.

155
00:10:52.360 --> 00:10:57.890
And we give the context of context of that.

156
00:10:57.940 --> 00:10:59.740
So we we import the context.

157
00:11:00.520 --> 00:11:02.740
We use the use context to hook.

158
00:11:04.990 --> 00:11:08.440
Past the hour context, and that gives us the value from that context.

159
00:11:08.440 --> 00:11:10.230
Now we can have a look.

160
00:11:10.240 --> 00:11:12.640
So let's just try here.

161
00:11:13.600 --> 00:11:18.400
Let me just to use feedback just so that it will be a bit more readable.

162
00:11:18.670 --> 00:11:28.180
So Jason, string it off and then we can pass some additional values so that it is it will look a bit

163
00:11:28.180 --> 00:11:29.500
more readable, right.

164
00:11:29.980 --> 00:11:35.050
If you don't pass it like that, have a look now.

165
00:11:35.050 --> 00:11:35.800
It's good home.

166
00:11:41.410 --> 00:11:48.160
This ensuring our stand is that context we should be able to see the.

167
00:11:51.420 --> 00:11:54.330
Author provided nothing was returned from the render.

168
00:12:01.080 --> 00:12:02.070
What profile?

169
00:12:09.840 --> 00:12:11.500
What context?

170
00:12:14.710 --> 00:12:15.760
What a provider.

171
00:12:21.520 --> 00:12:28.600
We may have to restart because we made this change in our efforts with Ferrara.

172
00:12:28.840 --> 00:12:31.630
I think we have to give it a restart and try to.

173
00:12:38.970 --> 00:12:39.390
All right.

174
00:12:39.390 --> 00:12:40.890
And then that's who to whom.

175
00:12:42.720 --> 00:12:45.270
So we have input of context.

176
00:12:47.210 --> 00:12:54.710
We access this fairly set off from all the context and we try to have a look at that.

177
00:12:55.760 --> 00:12:59.570
This is an object, so you can just have a look at it like that.

178
00:13:00.320 --> 00:13:01.550
So you can do that.

179
00:13:02.900 --> 00:13:05.110
That's why we did this.

180
00:13:05.120 --> 00:13:06.290
This in street fun.

181
00:13:11.510 --> 00:13:11.770
Hmm.

182
00:13:15.100 --> 00:13:15.430
Okay.

183
00:13:15.700 --> 00:13:17.140
So that's a really silly mistake.

184
00:13:17.140 --> 00:13:17.800
Sorry about that.

185
00:13:17.800 --> 00:13:21.690
So what I did is I wrote everything inside to use effect.

186
00:13:21.760 --> 00:13:22.180
That's.

187
00:13:22.960 --> 00:13:23.770
That's not right.

188
00:13:23.770 --> 00:13:25.030
So let me cut this out.

189
00:13:25.270 --> 00:13:25.600
All right?

190
00:13:25.600 --> 00:13:28.210
So obviously, that shouldn't be there.

191
00:13:28.660 --> 00:13:30.040
So this is a huge effect.

192
00:13:30.580 --> 00:13:31.780
So that's first argument.

193
00:13:31.780 --> 00:13:34.840
The function second element is the dependent theory.

194
00:13:34.840 --> 00:13:35.740
So that's useful.

195
00:13:36.010 --> 00:13:39.820
And then finally, we have to return something from this component, right?

196
00:13:39.820 --> 00:13:43.090
So we put that here on first to get a pull inside.

197
00:13:44.170 --> 00:13:45.130
So that was a problem.

198
00:13:45.310 --> 00:13:46.900
So it's fixed now.

199
00:13:46.900 --> 00:13:47.950
Let's come here.

200
00:13:50.970 --> 00:13:51.840
And let's have a look.

201
00:13:51.840 --> 00:13:55.020
Now, you can see we have access to our context.

202
00:13:55.470 --> 00:13:56.250
How good is that?

203
00:13:56.580 --> 00:13:59.040
At the moment we have the use of not open, empty string.

204
00:13:59.040 --> 00:14:00.660
So you see that right now.

205
00:14:00.660 --> 00:14:08.220
If you later when you see the sign of response, then you will have user name on the token.

206
00:14:08.820 --> 00:14:14.370
Maybe user ID will be some object with name run

207
00:14:17.760 --> 00:14:21.930
email will be something like run and or something like that.

208
00:14:21.930 --> 00:14:25.620
So that sort of information, when you have, you will be able to access it.

209
00:14:25.800 --> 00:14:27.900
So that's pretty cool.

210
00:14:29.010 --> 00:14:32.550
Now let me also show you a few things when I'm here.

211
00:14:32.670 --> 00:14:39.120
If you when you try to access something sometimes and you might get this kind of error like objects

212
00:14:39.120 --> 00:14:49.830
are not valid as react side found the user with keys you know this type of information if you get objects

213
00:14:49.830 --> 00:14:56.190
are invalid as react so most likely you are rendering some kind of object.

214
00:14:56.580 --> 00:15:00.510
So always try to see.

215
00:15:00.900 --> 00:15:03.930
You can try some console.log and see what you're trying to render.

216
00:15:03.990 --> 00:15:04.300
Right?

217
00:15:04.320 --> 00:15:08.910
For example, if you try out the door token, then it works.

218
00:15:09.570 --> 00:15:12.930
So this is a single property you access in hardware.

219
00:15:12.930 --> 00:15:16.050
When you try to show the entire object, you get that kind of fare.

220
00:15:17.520 --> 00:15:17.790
All right.

221
00:15:18.240 --> 00:15:23.130
So this interesting, very something you can always use to have a look at the object, how it looks,

222
00:15:23.130 --> 00:15:27.060
what are the properties of that now that is not really, really well.

223
00:15:27.200 --> 00:15:27.400
Right.

224
00:15:27.420 --> 00:15:28.350
See, it's hard to read.

225
00:15:28.740 --> 00:15:35.790
So in that case, you can pass some additional information, no second argument and then the space for.

226
00:15:36.210 --> 00:15:38.970
So if you do that, you can see it is much more readable.

227
00:15:39.420 --> 00:15:42.720
So you can always do this when you debugging it is super helpful.

228
00:15:43.800 --> 00:15:45.870
Let me also remove this button from here.

229
00:15:49.570 --> 00:15:49.670
Okay.

230
00:15:49.800 --> 00:15:51.290
So we can leave this for now.

231
00:15:51.370 --> 00:15:56.820
The moment later we come back and obviously do something exciting in the hope is but for the moment

232
00:15:56.820 --> 00:15:57.900
we can leave it like that.

233
00:15:58.650 --> 00:16:02.250
But here let me just remove this domain that.

234
00:16:09.000 --> 00:16:09.360
All right.

235
00:16:10.020 --> 00:16:18.660
Now, in the next lecture, we try to populate these values based on the response we get on sign up.
