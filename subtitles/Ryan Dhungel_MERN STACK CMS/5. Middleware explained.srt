1
00:00:00,450 --> 00:00:10,110
Also, we were able to send the category from our React app to our server and we could see the category

2
00:00:10,440 --> 00:00:11,220
that is sent.

3
00:00:11,220 --> 00:00:13,470
We could access that in our control.

4
00:00:15,120 --> 00:00:17,240
So that is right here.

5
00:00:19,440 --> 00:00:19,700
Right.

6
00:00:20,060 --> 00:00:21,580
So it's all good.

7
00:00:21,590 --> 00:00:30,710
But now we want to focus on securing the roots because we want to make sure not everyone can create

8
00:00:30,710 --> 00:00:31,330
a category.

9
00:00:31,340 --> 00:00:35,540
So first of all, the user have to be logged in, right?

10
00:00:35,840 --> 00:00:40,820
So we have to perform a check that to make sure the user is logged in.

11
00:00:41,180 --> 00:00:46,600
And another tick is the user should have the role of admin by default.

12
00:00:46,610 --> 00:00:53,970
Any user that sign up to an application, they get the role of subscribe by default.

13
00:00:54,070 --> 00:00:56,480
As you can see, a default really subscriber.

14
00:00:56,810 --> 00:01:02,570
So for creating a category, a user had to be admin use, right?

15
00:01:02,900 --> 00:01:05,720
So for that we can create a few middle layers.

16
00:01:05,720 --> 00:01:08,480
The middle was basically a function that.

17
00:01:09,880 --> 00:01:11,350
I run out in the middle, too.

18
00:01:11,410 --> 00:01:19,440
Before you do something, for example, before you allow the user to create a category saved, you sent

19
00:01:19,450 --> 00:01:20,650
the category in the database.

20
00:01:20,650 --> 00:01:26,410
You want to perform some tic so those checks can be done in middleware functions.

21
00:01:26,560 --> 00:01:26,800
Right.

22
00:01:26,920 --> 00:01:28,840
So Miller is basically equal right here.

23
00:01:29,230 --> 00:01:29,430
Yeah.

24
00:01:29,450 --> 00:01:30,670
Just a quick example.

25
00:01:30,880 --> 00:01:32,290
For example, let's use Arrow.

26
00:01:33,400 --> 00:01:33,640
Right.

27
00:01:33,940 --> 00:01:37,720
So these are Franzen and then this comma, this is a control font.

28
00:01:37,840 --> 00:01:38,050
Right.

29
00:01:38,060 --> 00:01:42,940
So here in the middle, if you execute some code, that is a middleware.

30
00:01:43,640 --> 00:01:43,830
All right.

31
00:01:43,840 --> 00:01:49,150
So here in express roles, obviously we have access to requests to response.

32
00:01:49,600 --> 00:01:51,160
And next as well.

33
00:01:53,320 --> 00:01:55,090
Next time, call next week.

34
00:01:55,090 --> 00:01:57,580
You can call it a callback function.

35
00:01:57,910 --> 00:01:59,200
You can give it an A name.

36
00:01:59,680 --> 00:01:59,920
All right.

37
00:02:00,100 --> 00:02:03,860
So request response, mixed and error.

38
00:02:03,910 --> 00:02:10,000
So these objects you can access in express at any time you building explicit.

39
00:02:10,450 --> 00:02:12,340
Now, we've done this for the moment.

40
00:02:12,790 --> 00:02:20,020
So next, whenever you want to create a middleware, you can use this callback function here.

41
00:02:20,490 --> 00:02:20,640
Right.

42
00:02:21,220 --> 00:02:31,030
So if you do this next, that means the code here will execute because you basically you allow this

43
00:02:31,030 --> 00:02:32,650
callback function to execute.

44
00:02:33,160 --> 00:02:37,930
So everything will continue the way it is.

45
00:02:38,170 --> 00:02:44,050
However, before you execute this function, you can perform some takes effectively.

46
00:02:44,050 --> 00:02:45,160
Let me just right here

47
00:02:48,670 --> 00:02:55,150
perform a check to make sure the user is adamant.

48
00:02:55,510 --> 00:02:56,410
It's very simple.

49
00:02:56,980 --> 00:02:58,930
You have a function that will do something.

50
00:02:58,930 --> 00:03:03,850
At the moment we just console.log just so we get the idea of how middleware works.

51
00:03:04,020 --> 00:03:04,240
Right?

52
00:03:04,600 --> 00:03:07,840
So you can see this function is a middleware function.

53
00:03:08,320 --> 00:03:17,500
Now, when I send when I make a request to this category out with the method of post, I should see

54
00:03:17,500 --> 00:03:23,560
this in the console as well because this middleware function will execute and then the callback function

55
00:03:23,560 --> 00:03:24,310
will execute.

56
00:03:24,310 --> 00:03:27,280
Then this will execute.

57
00:03:27,340 --> 00:03:28,510
That's a lot of excuse.

58
00:03:29,320 --> 00:03:31,750
I saw him try to react.

59
00:03:32,260 --> 00:03:33,340
Let's try another one.

60
00:03:33,520 --> 00:03:34,030
Note.

61
00:03:35,760 --> 00:03:41,280
I think if in office we don't get any we don't expect any response at the moment.

62
00:03:41,280 --> 00:03:45,330
But if you go here in the back end, you see.

63
00:03:47,050 --> 00:03:48,580
We got this concerned look.

64
00:03:49,060 --> 00:03:53,800
So that is this middleware function that is gone to logging here.

65
00:03:53,920 --> 00:04:04,360
So you can see if we do something here, if we don't execute next and send some kind of error, then

66
00:04:04,570 --> 00:04:06,370
the code here will not execute.

67
00:04:06,640 --> 00:04:07,570
So let's try that.

68
00:04:08,470 --> 00:04:12,970
So here, let's send some kind of error message.

69
00:04:12,970 --> 00:04:23,380
So response is send, let's send the status for the error.

70
00:04:25,030 --> 00:04:33,400
So there are different status code in has to be friends in which 200 means okay 400 means error 444

71
00:04:33,400 --> 00:04:42,580
means is not found so that there are different types of status code you will send, you will send and

72
00:04:42,580 --> 00:04:43,100
receive.

73
00:04:43,840 --> 00:04:51,490
When we are making a request and we will go to of more details later when we expect some errors, then

74
00:04:51,910 --> 00:04:54,460
we will come across many different errors.

75
00:04:54,460 --> 00:04:56,410
For one is unauthorized error.

76
00:04:56,850 --> 00:04:57,000
Right.

77
00:04:57,040 --> 00:04:58,720
So we could use for one as well.

78
00:05:00,250 --> 00:05:03,670
So send this Tedesco to 401.

79
00:05:04,150 --> 00:05:05,860
And then he can send.

80
00:05:08,240 --> 00:05:12,440
A summary of four error messages, for example, unauthorized.

81
00:05:13,550 --> 00:05:14,660
I say we can do that.

82
00:05:16,690 --> 00:05:18,290
Issues return keyword.

83
00:05:19,130 --> 00:05:19,460
All right.

84
00:05:19,460 --> 00:05:27,680
So if we do some kind of a take here and if we find out that the user is not logged in, then maybe

85
00:05:27,680 --> 00:05:30,770
we could return some kind of error message like this.

86
00:05:30,950 --> 00:05:31,690
So let's try.

87
00:05:32,570 --> 00:05:33,040
Let's try.

88
00:05:33,050 --> 00:05:34,490
What happens if we do that?

89
00:05:35,600 --> 00:05:36,310
So come here.

90
00:05:36,320 --> 00:05:36,740
Let's.

91
00:05:36,950 --> 00:05:37,850
Let's try.

92
00:05:38,880 --> 00:05:39,140
Right.

93
00:05:43,230 --> 00:05:49,800
Great category is straight away with God that let me click in the netbook tab and you can see here because

94
00:05:49,800 --> 00:05:53,100
we send the full one unauthorized.

95
00:05:55,690 --> 00:05:59,580
Message we got as a response against you unauthorized.

96
00:06:00,790 --> 00:06:03,930
That's because our middleware send this error message.

97
00:06:03,940 --> 00:06:06,580
So the code here the console.log.

98
00:06:07,660 --> 00:06:09,610
We didn't even see that we started.

99
00:06:09,610 --> 00:06:12,280
We got that response.

100
00:06:12,340 --> 00:06:15,650
As you can see, we didn't even get that control.

101
00:06:15,660 --> 00:06:23,980
Look, I said, that's how we can protect our roads, our server, our out of control function from

102
00:06:24,760 --> 00:06:26,170
unauthorized to users.

103
00:06:26,550 --> 00:06:30,510
I said that was a basic overview of how middleware works.

104
00:06:30,520 --> 00:06:32,740
Now let's remove this one instead.

105
00:06:33,020 --> 00:06:39,730
Instead of variety here like this, we're going to put those functions in a different file, just like

106
00:06:39,730 --> 00:06:42,010
we did here for control of nonsense.

107
00:06:42,070 --> 00:06:49,030
This is something we could write here, but we decided to put in this file to organize our code in a

108
00:06:49,030 --> 00:06:49,540
similar way.

109
00:06:49,540 --> 00:06:52,960
We're going to create a different folder from middleware.

110
00:06:53,590 --> 00:06:53,920
All right.

111
00:06:55,270 --> 00:07:00,910
So let's go ahead and create a middleware that will take if the user is locked.
