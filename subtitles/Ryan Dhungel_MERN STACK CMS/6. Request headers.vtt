WEBVTT
1
00:00:00.450 --> 00:00:00.690
All right.

2
00:00:00.690 --> 00:00:02.550
So we understand how middleware works.

3
00:00:02.560 --> 00:00:08.940
So to make sure that we have the logged in user, we can take the decent work token.

4
00:00:08.940 --> 00:00:15.600
So the way authentication works is, as you can see here, when the user logs in, we save that user's

5
00:00:16.380 --> 00:00:20.700
token in the context and it's also in the level of service of this token.

6
00:00:22.080 --> 00:00:25.800
Based on this token, we can identify if the user is logged.

7
00:00:25.980 --> 00:00:32.670
So if we give the token and if the token hasn't expired, right, and if the token is generated by our

8
00:00:32.670 --> 00:00:39.420
application, by our server, which is something which we can take based on this data with the secrets

9
00:00:39.420 --> 00:00:42.360
of this secret was used to generate that token, right?

10
00:00:43.350 --> 00:00:49.950
So if it is, if the token is generated using this secret, that means our application issued that.

11
00:00:49.950 --> 00:00:50.880
So that's a good thing.

12
00:00:51.120 --> 00:00:57.890
And then if the token hasn't expired, for example, you can control or control it quickly go.

13
00:00:57.900 --> 00:01:05.250
The user can also control I doing the same in.

14
00:01:08.590 --> 00:01:16.000
We have generated the token using the user's I.D., using the secret and the expiry is seven D.

15
00:01:16.300 --> 00:01:22.810
So if it hasn't been x four, if it is generated by us, then obviously now we will.

16
00:01:23.200 --> 00:01:25.630
We know that we have the logged in user, right?

17
00:01:25.960 --> 00:01:34.180
So for performing this trick, we can use another popular library for Express that is called Express

18
00:01:34.180 --> 00:01:34.980
did a Betty.

19
00:01:35.710 --> 00:01:40.630
So that function so that package will help us easily

20
00:01:43.300 --> 00:01:44.800
verify the token.

21
00:01:45.640 --> 00:01:51.280
And then based on that we can we will know if we have the user, if we have the user, then we will

22
00:01:51.280 --> 00:01:53.350
be able to access the user's idea as well.

23
00:01:53.770 --> 00:01:54.010
All right.

24
00:01:54.310 --> 00:02:00.550
Now, before we do that, obviously, first thing we need to make sure we can send this token from our

25
00:02:00.970 --> 00:02:03.100
front react application to our banking.

26
00:02:03.460 --> 00:02:03.670
Right.

27
00:02:03.730 --> 00:02:05.050
So we should be able to send that.

28
00:02:05.680 --> 00:02:11.740
Now that means if you come here in the client an application, go to context.

29
00:02:12.730 --> 00:02:13.420
Previously

30
00:02:15.790 --> 00:02:19.570
we set the axis B0 here.

31
00:02:19.660 --> 00:02:19.930
Right.

32
00:02:20.560 --> 00:02:28.300
And that made it so much easier because you didn't have to divert the full API early localhost, 8000

33
00:02:28.390 --> 00:02:29.080
less API.

34
00:02:29.080 --> 00:02:30.850
You didn't have to keep writing that one.

35
00:02:31.210 --> 00:02:37.900
When we send a request like this one here in the sign and you can see you can just give the endpoint,

36
00:02:37.900 --> 00:02:41.140
you didn't have to put the whole you are out in a similar way.

37
00:02:42.010 --> 00:02:46.000
We will be using excuse to make those requests.

38
00:02:46.000 --> 00:02:55.030
So here instead of sending the token in the headers on is the of negative file using access we could.

39
00:02:56.790 --> 00:03:04.480
Do some configuration in the context so that Axios will send the token in the House if it is available.

40
00:03:04.500 --> 00:03:08.100
Of course it will send every time we make a request to our back.

41
00:03:08.370 --> 00:03:14.220
So that way we don't have to keep writing the token in the headers all the time.

42
00:03:14.850 --> 00:03:17.940
Otherwise you would have to write like this one.

43
00:03:22.260 --> 00:03:25.890
Otherwise you would have to send.

44
00:03:27.300 --> 00:03:27.900
Harris.

45
00:03:37.860 --> 00:03:38.960
Authorization.

46
00:03:39.420 --> 00:03:40.800
And then you sent

47
00:03:44.670 --> 00:03:51.300
bearer and then some of this token you would get from your local stories or context, and this is how

48
00:03:51.300 --> 00:03:54.090
you'd be sending the token in the headers.

49
00:03:54.420 --> 00:03:56.070
Using excuse is in every time.

50
00:03:56.250 --> 00:04:01.200
Now this is a hassle and we have to do it in many different files later.

51
00:04:01.200 --> 00:04:08.730
So instead of doing it here, we're going to configure X use in the context for that.

52
00:04:09.060 --> 00:04:14.340
If the token is there, then we're going to send in the heavies each time.

53
00:04:14.550 --> 00:04:14.790
All right.

54
00:04:14.790 --> 00:04:15.600
So let's try that.

55
00:04:16.740 --> 00:04:18.670
It's good to context off.

56
00:04:19.820 --> 00:04:24.270
I say here we did this configuration.

57
00:04:24.420 --> 00:04:31.140
We have the base year and we did it for the both the environment, whether we are in the solar set environment

58
00:04:31.140 --> 00:04:32.640
or clients and environment.

59
00:04:32.940 --> 00:04:35.160
This will get more clearer later.

60
00:04:36.450 --> 00:04:37.650
Our way, we had to do this.

61
00:04:37.650 --> 00:04:39.660
But at the moment, let's just continue this one.

62
00:04:39.720 --> 00:04:39.990
Right.

63
00:04:39.990 --> 00:05:00.570
So here to add the token in the heavies, we could we can use x use dot defaults, dot headers dot com.

64
00:05:01.080 --> 00:05:05.160
And then here we want to send the authorization token.

65
00:05:05.610 --> 00:05:15.600
So authorization in brackets and the string authorization and then its value is going to be the token

66
00:05:15.780 --> 00:05:22.940
and we have to prefix that with bare space and the the actual token actually this is the standard.

67
00:05:22.950 --> 00:05:24.030
So we have to follow that.

68
00:05:24.390 --> 00:05:27.720
So beer token and we have used it back this year.

69
00:05:29.130 --> 00:05:36.180
Now you can see all to the token, that's the one, the ascending and that is what we have enlisted.

70
00:05:36.180 --> 00:05:43.980
So once you have the logged in user, the user and the token, we will have that in the context so that

71
00:05:43.980 --> 00:05:45.180
when we're sending.

72
00:05:46.540 --> 00:05:49.360
In the house using authorization being written.

73
00:05:50.350 --> 00:05:54.260
I can have one more take here just to make sure we have the dog.

74
00:05:56.210 --> 00:05:57.170
And that is it.

75
00:05:57.500 --> 00:05:58.430
That's all you need to do.

76
00:05:58.460 --> 00:06:06.110
Now, let's copy this one and put Hasbro in when we are in the server side, server side environment.

77
00:06:06.590 --> 00:06:09.140
This is the environment variable will be used.

78
00:06:09.440 --> 00:06:14.210
So at that time also we may need to send the token so we can just put it here.

79
00:06:20.880 --> 00:06:23.790
All right with this now we can give it a try.

80
00:06:24.810 --> 00:06:35.640
Okay, so let's go to our back in route and here before we actually let's let's do it in the middle

81
00:06:35.850 --> 00:06:36.120
here.

82
00:06:37.890 --> 00:06:39.560
We're going to use that excuse.

83
00:06:39.900 --> 00:06:40.770
Did a beauty.

84
00:06:41.890 --> 00:06:44.800
A library and that will work as a middleware.

85
00:06:44.800 --> 00:06:46.240
So we don't actually have to write here.

86
00:06:46.510 --> 00:06:56.110
But just to see how we received the token in the headers, let's, let's give it a try request response

87
00:06:56.710 --> 00:06:57.220
next

88
00:07:00.130 --> 00:07:01.990
and then let's have a comma here.

89
00:07:02.050 --> 00:07:04.400
So here we're going to write our middle.

90
00:07:04.420 --> 00:07:06.510
This is just for testing purposes.

91
00:07:06.610 --> 00:07:06.820
All right.

92
00:07:07.150 --> 00:07:10.540
So here all we want to do is have a look at it console.log.

93
00:07:11.650 --> 00:07:17.170
Let's try requests in the house.

94
00:07:19.650 --> 00:07:21.130
I get to request dot.

95
00:07:25.750 --> 00:07:32.010
It's like you saw we we are able to access a lot of these properties on the request.

96
00:07:32.030 --> 00:07:33.450
Object response object.

97
00:07:33.830 --> 00:07:36.290
Are you saw in the controls we could.

98
00:07:37.780 --> 00:07:39.870
Access the request body.

99
00:07:41.260 --> 00:07:41.500
Right.

100
00:07:41.740 --> 00:07:42.760
So in a similar way.

101
00:07:43.150 --> 00:07:45.850
Not only body, we could access the headset as well.

102
00:07:45.850 --> 00:07:51.820
So if we are sending the token in the headers, we will be able to access that using request or hence.

103
00:07:53.080 --> 00:07:56.510
Now this will be accessed by that express delivery package.

104
00:07:56.510 --> 00:07:58.360
Who is willing to use very soon?

105
00:07:58.600 --> 00:08:03.610
But for the moment, let's see if we actually get the token in the headers.

106
00:08:04.840 --> 00:08:09.190
We should, because we are sending the authorisation token from our client.

107
00:08:10.570 --> 00:08:12.200
So let's try this time.

108
00:08:12.200 --> 00:08:14.800
This in another category.

109
00:08:14.800 --> 00:08:17.230
Let's trust, submit.

110
00:08:18.070 --> 00:08:18.460
All right.

111
00:08:19.720 --> 00:08:27.850
And if you come here in your server console, you can see we got the headers and this headers has.

112
00:08:29.780 --> 00:08:33.780
He doesn't have the authorization token, which we were expecting.

113
00:08:34.030 --> 00:08:34.920
Now this happens.

114
00:08:36.480 --> 00:08:37.980
Let me remove this too.

115
00:08:38.100 --> 00:08:40.020
We should be able to access that.

116
00:08:41.590 --> 00:08:42.370
Let's try again.

117
00:08:42.550 --> 00:08:43.480
Let's try.

118
00:08:50.350 --> 00:08:53.500
Note to use submit.

119
00:08:56.100 --> 00:09:04.980
And you can see it now we have received so only it was it wasn't sent because last time I used this,

120
00:09:04.980 --> 00:09:07.920
it was I think yesterday, even before yesterday.

121
00:09:08.220 --> 00:09:09.780
So it has been sitting there.

122
00:09:09.960 --> 00:09:11.910
I didn't even refresh to be supported.

123
00:09:11.910 --> 00:09:12.750
That was the reason,

124
00:09:16.350 --> 00:09:16.610
I guess.

125
00:09:16.610 --> 00:09:23.670
So let's bring that back again and let's see if that has anything to do with it.

126
00:09:23.780 --> 00:09:24.600
Refresh again.

127
00:09:27.880 --> 00:09:29.660
Let's try BSP.

128
00:09:30.460 --> 00:09:31.270
Submit.

129
00:09:33.710 --> 00:09:39.870
And you can see we have got the authorization, a very token in the house.

130
00:09:39.890 --> 00:09:40.550
Beautiful.

131
00:09:42.770 --> 00:09:43.100
All right.

132
00:09:43.400 --> 00:09:44.000
Let's go ahead.

133
00:09:44.000 --> 00:09:53.330
In the next lecture, let's download that package from NPM and then use that to take the validity of

134
00:09:53.330 --> 00:09:57.110
the token that we receive here in the request hence.
