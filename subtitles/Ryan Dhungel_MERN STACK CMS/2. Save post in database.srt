1
00:00:00,570 --> 00:00:00,990
All right.

2
00:00:01,020 --> 00:00:02,190
Now let's go.

3
00:00:03,750 --> 00:00:05,850
Continue working in this control function.

4
00:00:06,330 --> 00:00:09,870
Previously, we wrote Our moral support model is here.

5
00:00:10,020 --> 00:00:12,960
So first, let's import the sport model to our controller.

6
00:00:17,150 --> 00:00:20,180
Import export with a capital T from.

7
00:00:22,110 --> 00:00:27,900
We go one step of models or so we import from that and then.

8
00:00:29,180 --> 00:00:32,030
We want to come to this house.

9
00:00:32,090 --> 00:00:39,800
We are we are receiving the data so we can actually take these strokes of the data from request part

10
00:00:39,810 --> 00:00:45,110
to make things easier so we can restructure title content and categories from request 40.

11
00:00:45,590 --> 00:00:51,320
We don't have the published and forced I can now next one.

12
00:00:53,000 --> 00:00:59,450
Oh, you want to make sure that this post that you're trying to create with this title, this title

13
00:00:59,450 --> 00:01:01,040
has not been taken before.

14
00:01:02,300 --> 00:01:02,610
All right.

15
00:01:02,750 --> 00:01:05,510
So you can see here, this is my first post.

16
00:01:05,750 --> 00:01:09,140
I guess it's slang will look something like this.

17
00:01:11,420 --> 00:01:14,840
This is my first post.

18
00:01:15,450 --> 00:01:23,420
I guess if I post with this title, this log is already served in the database, then you don't want

19
00:01:23,420 --> 00:01:30,570
to allow another post to be credited with the same title similar to that.

20
00:01:31,400 --> 00:01:31,850
That will.

21
00:01:34,220 --> 00:01:38,510
Not work because, you know, it's each one of them must be unique.

22
00:01:39,920 --> 00:01:40,220
All right.

23
00:01:40,610 --> 00:01:44,780
So just to make sure it hasn't been the title hasn't been taken.

24
00:01:45,470 --> 00:01:48,290
Just like you doing the sign up we take for the email.

25
00:01:48,290 --> 00:01:52,680
If the email was already taken, we could integration of the user, the same image.

26
00:01:52,700 --> 00:01:53,720
It's the same content.

27
00:01:54,080 --> 00:01:58,700
So we can take our take if title is taken.

28
00:01:59,900 --> 00:02:06,470
So for that, we have to try to find the block, find the post based on the category, based on the

29
00:02:06,470 --> 00:02:06,890
title.

30
00:02:07,250 --> 00:02:14,900
So contact, let's call it already exists.

31
00:02:15,320 --> 00:02:19,370
It wants to avoid to use the post model dot.

32
00:02:20,150 --> 00:02:21,470
Find one function.

33
00:02:22,850 --> 00:02:26,030
Find one will find.

34
00:02:26,030 --> 00:02:29,150
Try to find the post based on this title.

35
00:02:29,900 --> 00:02:35,390
So whenever it finds the very first one from the collection, it will stop executing the code to find

36
00:02:35,390 --> 00:02:35,690
one.

37
00:02:36,950 --> 00:02:37,880
That's how it works.

38
00:02:38,090 --> 00:02:40,370
So find one based on the title.

39
00:02:45,200 --> 00:02:54,470
And one I think we can still use this in the town however we want to use.

40
00:02:54,620 --> 00:03:01,340
This slow slug will be the lower case format and there will be no white spaces, you know, the slope.

41
00:03:01,730 --> 00:03:08,540
So we we're going to be saving the portion is pushed will have the slope based on the title.

42
00:03:09,410 --> 00:03:09,710
All right.

43
00:03:10,040 --> 00:03:11,090
So we try to find.

44
00:03:12,310 --> 00:03:14,590
The post based on the slot.

45
00:03:14,710 --> 00:03:25,060
So instead of total, let's call it slow and the slow at the moment we can use this value for our function

46
00:03:25,240 --> 00:03:28,900
to this token that will give us the slope rises slowly, very

47
00:03:32,650 --> 00:03:40,330
slowly for this total and slowly fey actually doesn't make it lowercase so we have to manually do that

48
00:03:41,470 --> 00:03:45,650
title dart to load case.

49
00:03:45,670 --> 00:03:50,590
So this is a native JavaScript function that they can use to make it lowercase.

50
00:03:50,860 --> 00:03:57,700
However, slowly, if we have to install from NPM and I think we already did that in category control,

51
00:03:57,940 --> 00:04:01,480
it's I would say yes, we already use that.

52
00:04:01,870 --> 00:04:05,680
So let's use the same sluggish fey here as well.

53
00:04:07,680 --> 00:04:08,070
Awesome.

54
00:04:09,060 --> 00:04:09,420
So.

55
00:04:11,580 --> 00:04:15,930
When you lose trying to create a post the you receive the title, right?

56
00:04:15,930 --> 00:04:22,380
So you make that title lowercase and use the solitaire function that basically gives you the slug.

57
00:04:22,980 --> 00:04:25,890
So you use that as a value to this one.

58
00:04:25,890 --> 00:04:29,170
So you try to find the post based on this slug.

59
00:04:30,010 --> 00:04:30,540
All right.

60
00:04:30,960 --> 00:04:38,790
So if that is fun, that means we have to send some kind of error message because it's totally taken.

61
00:04:39,030 --> 00:04:47,970
So if already exist, a return response, Jason, we send the error message.

62
00:04:50,420 --> 00:04:51,620
Title is taken.

63
00:04:53,250 --> 00:04:58,730
I guess this is even though it's error, error, it's technically still a valid response.

64
00:04:58,730 --> 00:05:00,660
So it's a decent response.

65
00:05:01,320 --> 00:05:01,620
Okay.

66
00:05:01,830 --> 00:05:03,120
So this is the reason why.

67
00:05:03,780 --> 00:05:09,720
Let me quickly go to the client to go to the basis admin and post new.

68
00:05:10,380 --> 00:05:13,130
You can see we have this data tick.

69
00:05:14,130 --> 00:05:20,670
I guess that is for taking something like this and something like this.

70
00:05:20,670 --> 00:05:23,630
1...0.

71
00:05:24,150 --> 00:05:24,410
I guess.

72
00:05:24,430 --> 00:05:26,640
So if title is taken.

73
00:05:27,090 --> 00:05:29,760
User will be getting the total notification.

74
00:05:32,470 --> 00:05:32,830
Okay.

75
00:05:33,280 --> 00:05:34,330
So that's done.

76
00:05:35,140 --> 00:05:38,080
I think there's one more thing we have to do.

77
00:05:38,080 --> 00:05:38,530
And then.

78
00:05:41,980 --> 00:05:47,080
Somehow getting the category IDs from the category name.

79
00:05:47,080 --> 00:05:52,630
So if you remember, you can see we are actually receiving the category.

80
00:05:54,310 --> 00:05:55,540
Nim not died.

81
00:05:55,930 --> 00:05:58,120
Now we could send the idea from the client.

82
00:05:59,260 --> 00:06:04,870
However, since we are using this and isn't this component previously used.

83
00:06:04,870 --> 00:06:10,180
So when we use the idea, we couldn't actually type and do something like that.

84
00:06:10,390 --> 00:06:12,370
And later, it will be problematic as well.

85
00:06:12,370 --> 00:06:17,980
When we are trying to update the blogpost, you will be showing the idea and that will be very confusing

86
00:06:17,980 --> 00:06:21,450
because you don't know which 80 which category.

87
00:06:21,630 --> 00:06:21,820
Right.

88
00:06:22,060 --> 00:06:26,240
So we have to use the name for the user experience purpose.

89
00:06:26,260 --> 00:06:30,310
However, it's difficult in the back end because we don't have the ID.

90
00:06:30,430 --> 00:06:31,480
We just have the name.

91
00:06:32,050 --> 00:06:37,030
Now there's one solution that is we can still try to find the.

92
00:06:38,780 --> 00:06:46,400
The category based on the name we can slug ify and then each category have this slug based on this name

93
00:06:46,760 --> 00:06:53,090
so we can try to find the category based on this total slug, just like this one.

94
00:06:53,090 --> 00:07:01,190
And then when we find that category, we use the categories IED and use that to save in the database.

95
00:07:01,550 --> 00:07:03,290
I guess so let's see how we can do that.

96
00:07:03,590 --> 00:07:09,890
So get category IDs based on category name.

97
00:07:11,240 --> 00:07:11,570
Okay.

98
00:07:12,260 --> 00:07:14,210
So let's create this variable.

99
00:07:14,210 --> 00:07:16,400
It is a consumer interior.

100
00:07:17,150 --> 00:07:20,600
So in this area I will be pushing the categories ID.

101
00:07:21,200 --> 00:07:23,300
So categories can be one of many.

102
00:07:23,570 --> 00:07:26,120
So we're going to push the arrows here.

103
00:07:26,120 --> 00:07:33,440
And then finally we can save the posts altogether with the categories ID.

104
00:07:33,890 --> 00:07:38,990
So whenever you saving the categories, you have to save the area for ideas.

105
00:07:40,260 --> 00:07:43,010
Okay, so I'm going to use it for look.

106
00:07:44,780 --> 00:07:47,090
So for loop, I'm pretty sure you have used it.

107
00:07:47,600 --> 00:07:54,740
So for lit i equals to do so.

108
00:07:54,740 --> 00:07:56,570
It starts with the value of zero.

109
00:07:57,080 --> 00:08:03,800
Then if this is smaller then the category that we get.

110
00:08:03,800 --> 00:08:08,900
Categories, categories, dirt length.

111
00:08:10,040 --> 00:08:12,350
Then keep going up.

112
00:08:12,980 --> 00:08:13,940
I plus plus.

113
00:08:15,240 --> 00:08:18,150
So what's happening here is it will start with a value of zero.

114
00:08:18,690 --> 00:08:22,740
And for example, if we are getting two categories, right, so levels will be two.

115
00:08:23,400 --> 00:08:25,620
So I will be zero in the beginning.

116
00:08:25,620 --> 00:08:28,170
So it is smaller than two.

117
00:08:28,440 --> 00:08:33,510
So that that time it will run the loop, then it becomes one and then it becomes two.

118
00:08:33,510 --> 00:08:36,210
It's time you can see it is incrementing.

119
00:08:36,660 --> 00:08:36,960
Okay.

120
00:08:37,590 --> 00:08:45,060
So until it is less than the length which is two, then you want to run this look.

121
00:08:45,180 --> 00:08:47,790
So if you are sending two categories, this will run.

122
00:08:48,060 --> 00:08:49,710
This loop will run two times.

123
00:08:50,190 --> 00:08:51,480
I guess I'm doing that.

124
00:08:51,480 --> 00:08:54,330
What are you going to do is we're going to query the database.

125
00:08:54,630 --> 00:08:55,230
So find.

126
00:08:56,590 --> 00:09:00,970
The category was to find one that's contained with most.

127
00:09:00,970 --> 00:09:02,590
That would be category,

128
00:09:06,610 --> 00:09:09,970
I guess, and we can't use a because we are into the fall of.

129
00:09:09,970 --> 00:09:16,380
So let's remove that I guess a category don't find one you find by the name.

130
00:09:16,390 --> 00:09:19,330
That would be the categories whatever that is.

131
00:09:19,330 --> 00:09:19,840
And then.

132
00:09:22,250 --> 00:09:26,480
He's of that will have either whatever name is used.

133
00:09:26,570 --> 00:09:31,760
I guess that we try to find the category best in that and then.

134
00:09:33,780 --> 00:09:40,690
We take categories to find the one and then we use execute.

135
00:09:40,920 --> 00:09:45,810
We can use the execute function since we aren't using it to execute.

136
00:09:45,810 --> 00:09:48,330
Function gives you the.

137
00:09:49,950 --> 00:09:51,210
You can use a callback here.

138
00:09:51,580 --> 00:09:54,090
So another function lets you add a function

139
00:09:56,990 --> 00:09:58,530
to here.

140
00:09:58,590 --> 00:10:00,420
What are you going to do is execute?

141
00:10:00,430 --> 00:10:01,800
You get error.

142
00:10:02,040 --> 00:10:04,800
Oh, you get the data.

143
00:10:05,940 --> 00:10:08,110
I guess we also have to check for the error first.

144
00:10:08,110 --> 00:10:14,520
So if if error you want to return.

145
00:10:17,670 --> 00:10:19,420
Just use console.log.

146
00:10:19,720 --> 00:10:20,170
Yeah.

147
00:10:23,770 --> 00:10:24,100
Okay.

148
00:10:24,790 --> 00:10:25,300
Otherwise.

149
00:10:34,260 --> 00:10:34,380
Okay.

150
00:10:34,470 --> 00:10:38,550
So we got some typos here for let.

151
00:10:42,980 --> 00:10:43,370
Okay.

152
00:10:43,370 --> 00:10:44,540
I know who to comment.

153
00:10:44,540 --> 00:10:45,790
Should be calling.

154
00:10:49,750 --> 00:10:50,070
Okay.

155
00:10:50,150 --> 00:10:53,620
So if any error, we return the console log error.

156
00:10:53,650 --> 00:10:57,700
Otherwise we can push the.

157
00:10:59,880 --> 00:11:02,820
Dollar, which means the category that is front.

158
00:11:03,060 --> 00:11:08,790
So when we find the category, we want to get the 80 because that's the whole reason we're doing this

159
00:11:08,790 --> 00:11:11,480
search and we get the data today.

160
00:11:11,510 --> 00:11:14,340
Then we post that to this area.

161
00:11:15,390 --> 00:11:18,210
You can post items to the array using the post function.

162
00:11:19,560 --> 00:11:19,780
Okay.

163
00:11:19,980 --> 00:11:28,230
So you can see here we have the for loop and we'll running this loop based on how many categories we

164
00:11:28,230 --> 00:11:28,500
have.

165
00:11:29,550 --> 00:11:29,900
Okay.

166
00:11:29,910 --> 00:11:31,200
And then it's time.

167
00:11:32,490 --> 00:11:33,330
This is what happened.

168
00:11:33,330 --> 00:11:36,660
So we've tried to find the category based on that.

169
00:11:36,690 --> 00:11:39,930
And then for each loop it's time to run.

170
00:11:41,740 --> 00:11:45,310
And so the first one and then the second one, it'll run.

171
00:11:45,580 --> 00:11:47,180
And then we take care.

172
00:11:47,200 --> 00:11:47,770
So if.

173
00:11:49,400 --> 00:11:58,090
We find, then we want to boost that to category aids to this it is a really.

174
00:11:59,060 --> 00:11:59,450
Okay.

175
00:12:02,490 --> 00:12:04,230
So that should be.

176
00:12:07,840 --> 00:12:11,870
That's Holland and done him aggressive and it's good.

177
00:12:11,890 --> 00:12:18,370
Next week and what are we going to do here is we can now find him saving the date of this because we

178
00:12:18,370 --> 00:12:22,390
have got the title, we have got the content, we have got the categories.

179
00:12:22,690 --> 00:12:24,490
Now we got only the name.

180
00:12:24,490 --> 00:12:30,490
But with this code we have all the ideas based on the name as well.

181
00:12:31,090 --> 00:12:31,360
All right.

182
00:12:31,660 --> 00:12:32,350
So that means.

183
00:12:34,210 --> 00:12:36,310
Yeah, save post.

184
00:12:37,870 --> 00:12:45,010
Now, when we're saving the post, I want to delay the saving by at least 1/2 because we have a lot

185
00:12:45,010 --> 00:12:47,620
of this code that I need to execute.

186
00:12:47,860 --> 00:12:53,500
So I'm just going to use sit down, sit down, write to you.

187
00:12:53,530 --> 00:12:56,140
This is a function so it takes.

188
00:12:58,350 --> 00:12:59,070
Two elements.

189
00:12:59,080 --> 00:13:02,910
First one is the function is to get to whatever you're trying to do.

190
00:13:02,970 --> 00:13:03,570
You do that.

191
00:13:04,020 --> 00:13:06,990
And then second argument is the duration of the time.

192
00:13:07,590 --> 00:13:08,160
So what?

193
00:13:08,310 --> 00:13:09,720
What is the time you want to use it?

194
00:13:09,990 --> 00:13:13,320
In my case, it's 1000 milliseconds, which is 1/2.

195
00:13:13,890 --> 00:13:17,280
So what do we write here in this function?

196
00:13:17,640 --> 00:13:21,690
The first argument this call will drop after 1/2.

197
00:13:22,410 --> 00:13:23,160
After 1/2.

198
00:13:23,610 --> 00:13:25,620
Okay, so this is what I'm trying to do.

199
00:13:25,650 --> 00:13:27,140
So I'm trying to create a post.

200
00:13:27,900 --> 00:13:28,230
Okay.

201
00:13:31,580 --> 00:13:40,130
Using the title content categories, which is the idea that tier and then posted values are going to

202
00:13:40,130 --> 00:13:41,090
be required to use.

203
00:13:41,090 --> 00:13:46,670
I did because we have used that request and in middleware that gives us the currently logged in user

204
00:13:46,670 --> 00:13:47,120
side.

205
00:13:47,630 --> 00:13:48,980
I mean, so this is profit.

206
00:13:52,720 --> 00:13:53,080
And.

207
00:13:54,580 --> 00:14:01,570
When we have everything ready to create a post, we can use the same function to finally submit in the

208
00:14:01,570 --> 00:14:02,170
database.

209
00:14:02,720 --> 00:14:04,750
Now you can see we are using this callback for some.

210
00:14:04,900 --> 00:14:07,390
If you want you can actually use async await here.

211
00:14:07,690 --> 00:14:10,600
So you can prefix with async if you do that.

212
00:14:12,940 --> 00:14:14,500
Uh, in use.

213
00:14:15,970 --> 00:14:16,780
Oh, wait.

214
00:14:17,860 --> 00:14:19,990
So no need to remove that new.

215
00:14:20,470 --> 00:14:21,790
You can use it.

216
00:14:22,570 --> 00:14:25,090
I'll wait for the new post to be created.

217
00:14:25,090 --> 00:14:32,140
And then instead of that, you can directly call that save here.

218
00:14:35,140 --> 00:14:35,530
Okay.

219
00:14:36,580 --> 00:14:45,710
And then he can return the saved post using response.

220
00:14:45,730 --> 00:14:54,190
Jason Post Let me just don't see the already exist and the post here.

221
00:14:54,790 --> 00:14:55,080
Thank you.

222
00:14:58,170 --> 00:14:59,210
Not doing this.

223
00:14:59,220 --> 00:15:00,420
If you want to, you can.

224
00:15:02,100 --> 00:15:06,810
Maybe you should try and get Tesla to try all this.

225
00:15:10,450 --> 00:15:11,380
Get there.

226
00:15:14,210 --> 00:15:15,260
Come to the air.

227
00:15:18,470 --> 00:15:18,770
Art.

228
00:15:18,770 --> 00:15:19,250
Beautiful.

229
00:15:19,760 --> 00:15:21,500
So this is how we can create a post.

230
00:15:21,630 --> 00:15:23,390
We've got all the data you take.

231
00:15:23,390 --> 00:15:27,230
If the title is taken, we extract all the ideas.

232
00:15:27,230 --> 00:15:28,640
Best in the category name.

233
00:15:30,120 --> 00:15:35,710
Then we save everything in the database delay by 1/2 using set time.

234
00:15:36,210 --> 00:15:38,520
So to create a push, we have the title of content.

235
00:15:38,520 --> 00:15:43,200
We have the categories, which is the eighties, and the push by which to be logged in userspace.

236
00:15:44,010 --> 00:15:45,690
All right, so let's give it a try.
