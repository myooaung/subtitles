1
00:00:00,300 --> 00:00:06,960
So we've been able to simply using the date this now let's do some work here so that we can show some

2
00:00:06,960 --> 00:00:10,920
error messages so some trust notification and do some redirect.

3
00:00:10,960 --> 00:00:11,250
Right.

4
00:00:11,670 --> 00:00:15,090
So here you saw we give the response data.

5
00:00:15,090 --> 00:00:23,430
So instead of accessing always like this, you can always destruct done and that way you can just use

6
00:00:23,430 --> 00:00:25,350
the value sort of we got to use it.

7
00:00:25,350 --> 00:00:27,450
And the token as a data you can use it.

8
00:00:28,020 --> 00:00:28,290
All right.

9
00:00:28,290 --> 00:00:32,520
So destructor data strategy, you can console.log if you want to.

10
00:00:33,270 --> 00:00:36,150
We already saw the console, so let's do that instead.

11
00:00:36,150 --> 00:00:42,570
Now we want to show the some kind of a notification, whether it's a success or error message.

12
00:00:42,570 --> 00:00:43,320
Now, you can see here.

13
00:00:44,500 --> 00:00:49,780
If we don't get the name email password, a password is less than six out as we are sending all these

14
00:00:49,780 --> 00:00:50,520
error messages.

15
00:00:50,530 --> 00:00:52,660
How do we display this to the user?

16
00:00:53,290 --> 00:00:56,410
That is something you can take you to if data.

17
00:00:57,880 --> 00:01:00,940
So there is one standard error.

18
00:01:01,570 --> 00:01:05,470
If we getting some error, we can show the error message you because you can see you.

19
00:01:06,890 --> 00:01:14,270
In the back end, we are sending the decent response with the key error.

20
00:01:14,810 --> 00:01:19,850
Every time there's error, we sending the key error and it has this different value.

21
00:01:20,270 --> 00:01:26,630
So we can always access this error if there is any, and we can show this error message to the user.

22
00:01:27,050 --> 00:01:27,320
Right.

23
00:01:27,530 --> 00:01:30,650
So that's what we are doing here in the client.

24
00:01:31,610 --> 00:01:32,810
If that added error.

25
00:01:35,170 --> 00:01:35,980
I get the data?

26
00:01:36,040 --> 00:01:38,620
What are you going to use the syntax as well?

27
00:01:38,620 --> 00:01:44,050
Sometimes when you try to access error, you might get, you know, the error message saying that error

28
00:01:44,050 --> 00:01:48,460
cannot you cannot access error properly from undefined, something like that.

29
00:01:48,640 --> 00:01:55,150
So you can only take if data and if it if data has the error properly, only then do you try to access

30
00:01:55,150 --> 00:01:55,350
this.

31
00:01:55,870 --> 00:02:02,500
And this could also be written like written like data and tangible data.

32
00:02:02,500 --> 00:02:07,420
If you could do this as this way also you could check, but this one is better.

33
00:02:07,420 --> 00:02:09,880
Build this server nice and easy to write.

34
00:02:10,240 --> 00:02:11,050
So the syntax.

35
00:02:11,500 --> 00:02:14,140
So if we have downloaded error, we can.

36
00:02:14,140 --> 00:02:17,020
So the error message, for example, you can use the trust.

37
00:02:18,520 --> 00:02:25,150
React to this toast photo and you can display the error misses which will be data don't enter right.

38
00:02:28,530 --> 00:02:29,340
I guess so.

39
00:02:30,120 --> 00:02:31,080
That's forever.

40
00:02:31,530 --> 00:02:34,620
Not if it wasn't, there was no area else.

41
00:02:35,250 --> 00:02:40,360
Then we get to the Starbucks, dismiss it, and it's a toaster success.

42
00:02:42,880 --> 00:02:43,530
Da da da.

43
00:02:46,200 --> 00:02:52,830
In fact, if it is successful, we in this harcourts from something like successfully signed up.

44
00:02:53,170 --> 00:02:53,460
All right.

45
00:02:53,790 --> 00:02:56,260
And then what else we can do here?

46
00:02:57,750 --> 00:02:58,710
We can.

47
00:03:01,920 --> 00:03:03,720
Redirect the use it to another base.

48
00:03:03,720 --> 00:03:07,710
For example, log in, please, if we can do that right.

49
00:03:07,800 --> 00:03:14,000
So we can immediately redirect the user or we can delay using the set timeline.

50
00:03:15,270 --> 00:03:19,350
In our case, I think it's better to just redirect straight away.

51
00:03:19,710 --> 00:03:19,880
All right.

52
00:03:19,890 --> 00:03:21,090
So if you on redirect.

53
00:03:23,000 --> 00:03:26,750
We can use the link component from.

54
00:03:30,020 --> 00:03:30,690
Next year.

55
00:03:31,050 --> 00:03:33,000
In fact, link is not the right one.

56
00:03:33,000 --> 00:03:41,280
We have to use the road so we can use the user hook from next year to navigate to a different route.

57
00:03:41,350 --> 00:03:43,290
Now, before we do that, let's just give it a try.

58
00:03:43,380 --> 00:03:44,970
It's how this toaster works.

59
00:03:45,870 --> 00:03:47,940
Now, Victoria, how are you?

60
00:03:48,000 --> 00:03:54,270
This will not work unless you have this push component in your written, written block here.

61
00:03:54,510 --> 00:03:55,870
All right, so you can put that anywhere.

62
00:03:55,870 --> 00:03:57,300
It doesn't matter, but you have to have.

63
00:03:57,900 --> 00:04:01,620
So let's put that just on inside the column.

64
00:04:05,890 --> 00:04:06,280
Just.

65
00:04:07,920 --> 00:04:14,040
I want to make sure you have this component and then you should be able to foresee the success Mrs.

66
00:04:14,040 --> 00:04:15,710
or Mrs. Smith scheme to try.

67
00:04:16,530 --> 00:04:21,360
Now one user name is Ryan.

68
00:04:22,650 --> 00:04:24,720
Ryan and continuing to.

69
00:04:26,800 --> 00:04:32,620
But this user has already been created, which means if we try to register another user with the same

70
00:04:32,620 --> 00:04:35,050
details, we should get the error message right.

71
00:04:35,050 --> 00:04:41,470
So let's see how that works and try a district and you see email taken.

72
00:04:41,710 --> 00:04:47,620
Now that beautiful touch misses is because of this react tortoise.

73
00:04:47,880 --> 00:04:48,050
All right.

74
00:04:48,100 --> 00:04:51,010
So we are showing that standard error.

75
00:04:51,250 --> 00:04:57,970
So we saw that email is taken message that is coming from our server here.

76
00:05:00,080 --> 00:05:03,930
And if you do exist, then we sending that error message.

77
00:05:05,040 --> 00:05:06,870
I guess that's how we saw the errors.

78
00:05:08,190 --> 00:05:13,650
Now, if we tried to create a new user then it's we should see this success misses.

79
00:05:14,040 --> 00:05:18,930
So let's try trying to do.

80
00:05:19,080 --> 00:05:19,740
It's true.

81
00:05:19,740 --> 00:05:20,220
It's true.

82
00:05:20,760 --> 00:05:24,400
And this time successfully signed up because it has been.

83
00:05:24,450 --> 00:05:25,200
It is such as?

84
00:05:26,010 --> 00:05:26,300
I see.

85
00:05:26,310 --> 00:05:27,090
That's beautiful.

86
00:05:28,230 --> 00:05:31,680
You saw how you could show the notifications.

87
00:05:31,710 --> 00:05:37,110
Now, one more thing we can improve here, and that is you see this toaster?

88
00:05:38,010 --> 00:05:44,220
Now, this toaster is not something you want to just import and use an essential component writing sign

89
00:05:44,220 --> 00:05:49,080
in and later doing the push to create push delete everywhere.

90
00:05:49,080 --> 00:05:55,620
You would need this just notification, but you may not want to just import Ethan every time and just

91
00:05:55,620 --> 00:05:57,870
put in your render written block, right?

92
00:05:57,900 --> 00:05:59,010
So that's a bit of a hassle.

93
00:05:59,370 --> 00:06:07,920
Now there is a shortcut, there's a solution to avoid doing this and that is bringing this into emergences

94
00:06:08,640 --> 00:06:16,410
like you already know, after this gets initialized, before any basis in there in this next application.

95
00:06:16,410 --> 00:06:19,230
So that means we can import that to send put here.

96
00:06:19,500 --> 00:06:24,900
That means whenever we use the toast function it would work.

97
00:06:24,900 --> 00:06:30,990
We didn't have to just have on it's an every components the written book so let's remove this one.

98
00:06:33,060 --> 00:06:33,930
Let's remove this one.

99
00:06:33,930 --> 00:06:39,810
Let's remove this one as well and instead put that in underscore app.

100
00:06:40,590 --> 00:06:41,710
Okay, now before I.

101
00:06:43,320 --> 00:06:44,040
Write it here.

102
00:06:44,070 --> 00:06:45,860
Let's see how this works.

103
00:06:45,870 --> 00:06:46,890
How this makes a difference.

104
00:06:46,890 --> 00:06:47,460
So you can see.

105
00:06:48,360 --> 00:06:49,320
Let me try.

106
00:06:49,980 --> 00:06:50,400
Ryan.

107
00:06:51,510 --> 00:06:51,930
Ryan.

108
00:06:51,930 --> 00:06:56,790
By the way, if you don't like to keep writing this while we are testing the application, you have

109
00:06:56,790 --> 00:06:57,820
to do that all the time.

110
00:06:57,850 --> 00:07:01,560
So in that case, you can just hardcoded the default value as well.

111
00:07:03,430 --> 00:07:04,240
I so.

112
00:07:05,700 --> 00:07:12,620
I would say that in the next component, when we go for the signing, it's Ryan and the team input.

113
00:07:15,790 --> 00:07:16,180
Okay.

114
00:07:16,480 --> 00:07:19,570
So we got the MREs for that.

115
00:07:19,570 --> 00:07:22,690
You can take the network that always I showed you earlier.

116
00:07:22,900 --> 00:07:28,570
And here you can see response payload of the has where the request was made.

117
00:07:28,570 --> 00:07:33,130
All of that now in the response, you see we got the images taken out of MREs.

118
00:07:33,130 --> 00:07:34,810
However, we're not showing here.

119
00:07:34,810 --> 00:07:40,510
That's because we don't have the torso component most of its go to AB and just equal to that hint in

120
00:07:40,510 --> 00:07:50,530
both those two from pre and post and then we can put anyway so let's put underneath the now.

121
00:07:54,160 --> 00:07:56,440
You may need to restart your averages.

122
00:07:57,780 --> 00:08:02,180
In some cases hopefully shouldn't be required.

123
00:08:02,190 --> 00:08:06,030
But in case you don't see your toes to make sure to restart.

124
00:08:06,030 --> 00:08:06,310
Yeah.

125
00:08:06,320 --> 00:08:10,050
Because otherwise it's a good excuse to try.

126
00:08:14,720 --> 00:08:18,200
Ryan, Ryan and Tim Duncan.

127
00:08:21,170 --> 00:08:21,530
Okay.

128
00:08:21,630 --> 00:08:22,760
Now you can see it works.

129
00:08:22,970 --> 00:08:26,110
You don't have to now import the torture component anyway.

130
00:08:26,120 --> 00:08:29,210
You just import toast and just to use in your functions.

131
00:08:29,550 --> 00:08:30,170
That's easy.

132
00:08:30,800 --> 00:08:37,430
Now, if you give the password only just two characters less than 6 hours, then you get this in a message.

133
00:08:37,910 --> 00:08:40,010
So all these messages coming from our banking.

134
00:08:40,920 --> 00:08:41,870
No, that's nice.

135
00:08:44,870 --> 00:08:46,280
I guess we did that as well.

136
00:08:46,670 --> 00:08:50,790
The next thing we can do is show some kind of a lowering, right?

137
00:08:50,840 --> 00:08:57,560
So when it's happening, when read, maybe you want to show some kind of a lowering, it will take maybe

138
00:08:57,560 --> 00:09:02,610
less than a second, but still, it's a good to use a good UI.

139
00:09:02,690 --> 00:09:08,270
And so you might want to show some kind of a learning window, especially with and design some button.

140
00:09:08,270 --> 00:09:09,770
It's really easy to show the learning.

141
00:09:10,010 --> 00:09:13,400
All you have to do is use this learning property.

142
00:09:13,670 --> 00:09:13,870
All right.

143
00:09:13,880 --> 00:09:14,390
So here.

144
00:09:15,810 --> 00:09:17,190
That's the burden we're using.

145
00:09:17,490 --> 00:09:21,570
So if you use loading too true.

146
00:09:22,380 --> 00:09:23,310
We can use the value.

147
00:09:23,310 --> 00:09:24,660
True or false if you used.

148
00:09:25,600 --> 00:09:28,140
See, you can show the loading spin.

149
00:09:29,150 --> 00:09:29,990
So that's beautiful.

150
00:09:30,290 --> 00:09:33,620
And that time button is not clickable, as we can see.

151
00:09:33,620 --> 00:09:34,250
It's not clear.

152
00:09:35,300 --> 00:09:41,780
So we can, instead of hard calling the value, we can use the loading state from our.

153
00:09:43,900 --> 00:09:46,300
Component here so we can create a state here.

154
00:09:47,060 --> 00:09:50,280
And for that, we can use the use effect to.

155
00:09:50,830 --> 00:09:52,600
So let's import that use.

156
00:09:53,350 --> 00:10:05,160
So you state to try and react and then we can create a state followed const learning set learning which

157
00:10:05,200 --> 00:10:09,190
to use state and we give the default value of false.

158
00:10:09,910 --> 00:10:11,230
So by default it is false.

159
00:10:11,710 --> 00:10:17,140
But when we make a request to our back end, we send it to true until we get the response.

160
00:10:17,380 --> 00:10:20,110
Now that response could be error and a response.

161
00:10:20,110 --> 00:10:21,580
So custom response doesn't matter.

162
00:10:22,300 --> 00:10:24,340
When we get the response, we set it to false.

163
00:10:24,940 --> 00:10:29,890
But until we get the response, when the function executes, when the user clicks.

164
00:10:30,070 --> 00:10:32,650
But we haven't received the response yet.

165
00:10:32,800 --> 00:10:36,970
So doing the so we want to set the loading right so we can do that here.

166
00:10:38,140 --> 00:10:41,560
First thing you do, sit loading to too.

167
00:10:42,550 --> 00:10:49,180
As soon as this function executes, which is when the form is submitted right on finished when the button

168
00:10:49,180 --> 00:10:54,730
is clicked, this function executes and immediately we set the loading to true and then wait for the

169
00:10:54,730 --> 00:10:55,420
response.

170
00:10:55,600 --> 00:10:57,760
All right, so if we get the error response.

171
00:10:59,400 --> 00:11:02,220
Set learning difference.

172
00:11:02,430 --> 00:11:02,700
Right.

173
00:11:03,840 --> 00:11:07,200
And if we get successful restaurants, then also we set forth.

174
00:11:08,190 --> 00:11:09,050
We saw the success.

175
00:11:09,050 --> 00:11:09,400
Mrs..

176
00:11:09,410 --> 00:11:10,460
And who said it to us.

177
00:11:10,820 --> 00:11:17,570
Now, if we catch the network error, any other time you want to send it to Fox.

178
00:11:18,550 --> 00:11:20,240
And I did so in the beginning.

179
00:11:20,270 --> 00:11:20,630
True.

180
00:11:20,780 --> 00:11:23,390
As soon as we get any response, we send it to Fox.

181
00:11:23,930 --> 00:11:29,240
Now, with this, they're lowering the value in the state will dynamically change.

182
00:11:29,480 --> 00:11:33,350
So when it is true for those brief milliseconds, you'll see the spinner.

183
00:11:33,530 --> 00:11:38,180
Otherwise, it will just work as normal.

184
00:11:38,530 --> 00:11:39,620
So we can try that.

185
00:11:43,860 --> 00:11:47,050
Ryan, Ryan and Jimmy the gun.

186
00:11:48,900 --> 00:11:51,630
This made me very quick to have a look here.

187
00:11:53,890 --> 00:11:55,360
That's so quickly.

188
00:11:55,360 --> 00:11:57,010
We don't we barely see anything.

189
00:11:58,060 --> 00:11:58,740
Okay.

190
00:11:58,750 --> 00:12:01,150
So just to show you, it works.

191
00:12:01,570 --> 00:12:03,070
I guess it works in production.

192
00:12:03,070 --> 00:12:06,470
It may be a little bit slow, so you can see that.

193
00:12:06,490 --> 00:12:11,710
But just to give it a try, let me go to the network Dev and let me.

194
00:12:13,700 --> 00:12:16,850
Make man speed, slow throttling.

195
00:12:17,270 --> 00:12:19,490
I can make it fast 3G.

196
00:12:20,000 --> 00:12:22,550
So it's currently, I think 4G 5G.

197
00:12:23,180 --> 00:12:25,430
So let's make let's make it with sleep.

198
00:12:25,460 --> 00:12:26,510
By the way, you didn't have to do it.

199
00:12:26,520 --> 00:12:30,520
I'm just doing this to show you so you could try.

200
00:12:30,560 --> 00:12:35,300
Now you can see it took a little bit of time to you doing that time because the network were slow.

201
00:12:35,930 --> 00:12:40,220
You saw this finish and then it's so beautiful.

202
00:12:40,640 --> 00:12:44,630
Now, if you create a new word, let's use right through right three.

203
00:12:47,090 --> 00:12:47,570
Beautiful.

204
00:12:48,660 --> 00:12:49,960
So we did a couple of things here.

205
00:12:49,970 --> 00:12:58,130
We so we learn how to use the toaster to throw the toast notifications we would the toaster component

206
00:12:58,130 --> 00:13:01,730
in our everyday so we didn't have to import an essential component.

207
00:13:02,270 --> 00:13:05,450
We also learned to implement loading.

208
00:13:06,920 --> 00:13:08,660
Now we're pretty much done here in the same.

209
00:13:09,780 --> 00:13:17,250
Later we might come here once we have the global context so that when we get this kind of response,

210
00:13:17,250 --> 00:13:18,630
the successful response.

211
00:13:20,020 --> 00:13:20,320
Yeah.

212
00:13:21,610 --> 00:13:24,340
Maybe we want to use that, but in the global state.

213
00:13:24,410 --> 00:13:24,700
Right.

214
00:13:24,700 --> 00:13:26,560
So that is something we can do a little later.

215
00:13:26,560 --> 00:13:28,660
But at the moment it's fine.

216
00:13:28,660 --> 00:13:29,380
It's all good.

217
00:13:29,380 --> 00:13:34,240
Now we can move on to signing component and implement something similar.

218
00:13:35,450 --> 00:13:36,500
And doing the signing.

219
00:13:36,680 --> 00:13:41,870
Once the signing is successfully completed, then we have to think about what are we going to serve

220
00:13:41,870 --> 00:13:45,800
that the user and the token that we got from the back end to that recipient.

221
00:13:45,800 --> 00:13:53,120
Where do we put right so that we can create a global context, just like we had a previous context for

222
00:13:53,120 --> 00:13:59,340
theme, something similar we can use to store the user value globally, right.

223
00:13:59,420 --> 00:14:05,720
So that we put in attend the base reload sees a comeback in our application after closing it.

224
00:14:06,380 --> 00:14:10,910
We will always be able to saw that user in for Ms. and we should be currently logged in.

225
00:14:11,270 --> 00:14:11,540
Right.

226
00:14:12,020 --> 00:14:15,500
So let's move on to signing.
