WEBVTT
1
00:00:00.270 --> 00:00:02.540
Now post request is something you can try.

2
00:00:02.550 --> 00:00:05.100
Like this one, we have to execute the call.

3
00:00:05.520 --> 00:00:08.850
For example, here we can use the excuse.

4
00:00:10.050 --> 00:00:15.240
Some has to take a library to send this user enter data to back it.

5
00:00:15.300 --> 00:00:17.220
That would be a post request.

6
00:00:17.380 --> 00:00:17.660
All right.

7
00:00:17.670 --> 00:00:24.420
So we will be receiving that data and that data will be processed by this function.

8
00:00:24.660 --> 00:00:27.420
So you can see this post function get funds.

9
00:00:27.540 --> 00:00:29.040
They always take two arguments.

10
00:00:29.400 --> 00:00:34.660
The first argument is the path you are out and then second argument is a function.

11
00:00:34.680 --> 00:00:36.480
You can see this is out of function.

12
00:00:37.920 --> 00:00:45.930
It has access to the express request and response object and they those objects have a lot of function.

13
00:00:46.240 --> 00:00:48.260
So you can see a response to this.

14
00:00:48.480 --> 00:00:51.990
This one is one of the functionalities that is accessible.

15
00:00:52.680 --> 00:00:56.490
Using this one so requested response, we have access to the object.

16
00:00:56.910 --> 00:01:03.510
And you can see here one of those objects gives us this decent function which is used to send the decent

17
00:01:03.510 --> 00:01:03.690
up.

18
00:01:04.790 --> 00:01:07.440
Now there are much more we will be exploring later.

19
00:01:08.460 --> 00:01:09.450
Out on the bush.

20
00:01:09.450 --> 00:01:12.480
Also, you can see we have the two elements to this push function.

21
00:01:12.510 --> 00:01:14.250
First argument is the euro.

22
00:01:14.670 --> 00:01:16.980
But second argument is the function.

23
00:01:17.430 --> 00:01:21.840
Now this function I put in a controller and I imported like this one.

24
00:01:22.530 --> 00:01:22.830
All right.

25
00:01:23.460 --> 00:01:24.340
Why did I do that?

26
00:01:24.360 --> 00:01:26.490
I could write everything here, just like this one.

27
00:01:26.550 --> 00:01:30.300
And see, this is the second argument is the arrow function.

28
00:01:30.690 --> 00:01:33.470
So I could write whatever code is in this function.

29
00:01:33.480 --> 00:01:35.940
I could write like this one in line here.

30
00:01:36.150 --> 00:01:40.170
But that would make this file really big and it would be hard madness.

31
00:01:40.410 --> 00:01:45.510
So that's why we organize the code using these functions, putting them in a controller.

32
00:01:45.930 --> 00:01:46.170
All right.

33
00:01:46.170 --> 00:01:48.450
So otherwise I could just write everything here like this.

34
00:01:49.680 --> 00:01:54.960
So basically, you get the end point and you process that request to you.

35
00:01:55.260 --> 00:01:56.490
So let's see what we have here.

36
00:01:56.580 --> 00:01:59.430
For example, sign when you want to register the user.

37
00:01:59.430 --> 00:02:03.150
Let's see what is happening here and that is in the controller slash office file.

38
00:02:06.120 --> 00:02:08.250
So you can see here again, we have some inputs.

39
00:02:08.250 --> 00:02:09.420
We have the user model.

40
00:02:10.080 --> 00:02:12.510
We have some libraries that will.

41
00:02:15.920 --> 00:02:19.220
Give us the ability to generate the JSON with token.

42
00:02:20.030 --> 00:02:25.640
We have this some functions written helper file two has the password and compare the password.

43
00:02:25.880 --> 00:02:28.520
So you never say the plain password in the database.

44
00:02:28.520 --> 00:02:35.360
So you have to has and save in the database and compare password will be used to compare the password

45
00:02:35.360 --> 00:02:36.440
when we try to log in.

46
00:02:36.840 --> 00:02:37.160
All right.

47
00:02:37.430 --> 00:02:39.170
So you can see we have the sign of function.

48
00:02:39.170 --> 00:02:43.450
We are receiving all this data from request body.

49
00:02:43.460 --> 00:02:50.930
So when you send the information, name, email and password that will be received as request body.

50
00:02:51.260 --> 00:02:56.570
So all this data we should be able to receive as a request memory and then we take if we don't have

51
00:02:56.570 --> 00:02:58.460
the name, we can send some error messages.

52
00:02:58.940 --> 00:03:00.680
Same with the email, same with the password.

53
00:03:00.680 --> 00:03:02.630
If you don't have we can tend to error message.

54
00:03:02.900 --> 00:03:10.550
But if everything is good and we try to find again if a user already exists in the database, if it

55
00:03:10.550 --> 00:03:12.530
exists, then we have to send error message.

56
00:03:12.530 --> 00:03:21.230
Otherwise we has the password, create a new user generated token and then send the response.

57
00:03:21.740 --> 00:03:27.500
And that response will include the user that is newly created and saved in the database along with the

58
00:03:27.500 --> 00:03:28.550
additional token.

59
00:03:28.880 --> 00:03:34.610
Now all this court will go through over and over again when we try to sign up.

60
00:03:34.730 --> 00:03:41.120
So I would be console.log a few times in showing you our explaining everything to you, but at the moment

61
00:03:41.360 --> 00:03:44.540
you understand the overall structure of our application.

62
00:03:44.700 --> 00:03:44.890
All right.

63
00:03:44.900 --> 00:03:46.550
So don't get confused.

64
00:03:46.550 --> 00:03:48.470
If it is overwhelming, I can understand.

65
00:03:48.470 --> 00:03:51.920
But later, more and more out.

66
00:03:51.920 --> 00:03:56.150
We will be writing ourself and we will be creating the controller functions ourself.

67
00:03:56.420 --> 00:04:00.620
So at that time, once you do it a few times, you will be extremely comfortable.

68
00:04:01.640 --> 00:04:01.940
All right.

69
00:04:01.940 --> 00:04:09.350
So let's not spend too much time on this one, because if we go further, it might just make you further

70
00:04:09.710 --> 00:04:10.310
confused.

71
00:04:10.580 --> 00:04:15.320
So instead we try to make request to sign up, we try some console.log.

72
00:04:15.320 --> 00:04:17.720
So let's see how the data is received from the client.

73
00:04:17.720 --> 00:04:19.720
Do so and then how we process here.

74
00:04:19.940 --> 00:04:22.670
All right, so we'll be going through this many more times.

75
00:04:22.670 --> 00:04:25.340
We'll be explaining quite a lot as well.

76
00:04:25.880 --> 00:04:27.140
Otherwise it's pretty much it.

77
00:04:27.140 --> 00:04:27.860
Let me quickly.

78
00:04:27.860 --> 00:04:33.620
So these two files here to use a model is also here.

79
00:04:34.400 --> 00:04:40.250
So models are basically used to define what properties can be saved in the database.

80
00:04:40.250 --> 00:04:43.340
You don't want to save anything that is sent from the client.

81
00:04:44.150 --> 00:04:46.880
You'd never know what sort of data is being received.

82
00:04:47.210 --> 00:04:53.870
So you want to make sure you only save an email name, email, password, role, and if it's anything

83
00:04:53.870 --> 00:04:57.970
else, even if that is received, we're not saving in the database.

84
00:04:57.980 --> 00:05:00.290
I guess basically that's what this scheme does.

85
00:05:00.680 --> 00:05:03.560
And another thing is this is schema.

86
00:05:04.610 --> 00:05:09.560
You can see it, it is we're using the model function from the mongoose.

87
00:05:09.560 --> 00:05:11.870
It's basically creating the user model.

88
00:05:12.170 --> 00:05:16.850
So models, what they do is they are like a gateway to the database.

89
00:05:17.120 --> 00:05:22.160
So based on this model, you can query, find out certain things, certain user from the database,

90
00:05:22.570 --> 00:05:25.640
retrieve from the database, update the information on that.

91
00:05:25.640 --> 00:05:27.230
So think of it as a gateway.

92
00:05:27.530 --> 00:05:34.400
So is either of these models will be saved in the database as a collection, you should be able to access

93
00:05:34.400 --> 00:05:36.800
that a read update, delete all that.

94
00:05:37.760 --> 00:05:38.070
Okay.

95
00:05:38.090 --> 00:05:39.530
So basically that's what they do.

96
00:05:39.770 --> 00:05:46.040
You based on your schema, you create a model that's we will also be covering all this when we create

97
00:05:46.040 --> 00:05:47.840
our self more models later.

98
00:05:49.010 --> 00:05:49.280
Okay.

99
00:05:49.580 --> 00:05:55.220
And then at these functions I wrote to has the password and compare the password, you can take them

100
00:05:55.220 --> 00:05:57.190
out in helpers auth.

101
00:05:57.920 --> 00:05:58.760
So has the password.

102
00:05:58.760 --> 00:06:03.300
We use the big group library to generate the salt.

103
00:06:03.320 --> 00:06:06.470
Basically salt means the strength of the Hasson.

104
00:06:07.190 --> 00:06:07.460
All right.

105
00:06:08.210 --> 00:06:13.970
And then we this factored request the password, plain password as argument.

106
00:06:13.970 --> 00:06:18.480
So we get that we has that and that is the one that is richer.

107
00:06:18.800 --> 00:06:19.100
All right.

108
00:06:20.270 --> 00:06:21.710
So that's how we has the password.

109
00:06:22.010 --> 00:06:27.890
And to compare the password to be grouped, this gives us this compare function and this function takes

110
00:06:27.890 --> 00:06:32.510
to argument the plain password in the hash version, which should be coming from the database.

111
00:06:32.990 --> 00:06:39.410
And then we both compare if they compare comparison and if the same, it will return to otherwise false.

112
00:06:39.410 --> 00:06:42.410
So that's how we compare the password and all the user to log in.

113
00:06:43.010 --> 00:06:48.200
All this we will be going through as we progress with the course.

114
00:06:48.200 --> 00:06:54.200
I guess in the next lecture we can try making a request to sign up, see how the data is received in

115
00:06:54.200 --> 00:06:55.190
the request body.

116
00:06:55.190 --> 00:07:00.170
And we'll go through this one more time just to make sure everything is clearly understood.
