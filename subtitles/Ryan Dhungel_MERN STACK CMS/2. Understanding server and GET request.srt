1
00:00:00,180 --> 00:00:00,260
Ah.

2
00:00:00,330 --> 00:00:02,620
So we have this server generated.

3
00:00:02,640 --> 00:00:05,160
Now let's see how this works.

4
00:00:05,170 --> 00:00:11,190
The first thing you can do is you can see here we have two obviously in the variables.

5
00:00:11,820 --> 00:00:14,520
So the environment variables we have here, it's a database.

6
00:00:14,520 --> 00:00:18,900
So you can update this database with the actual database here.

7
00:00:19,440 --> 00:00:27,370
And for that, we can use Mongo Atlas in a mongo atlas is running in the cloud so you can get the MongoDB

8
00:00:27,430 --> 00:00:29,340
URI from then you start using that.

9
00:00:29,640 --> 00:00:37,230
Or if you have MongoDB installed locally in your computer, then you can use that differential as well,

10
00:00:37,230 --> 00:00:39,540
which I will see you later I guess at the moon.

11
00:00:39,540 --> 00:00:40,590
Let's leave it like that.

12
00:00:41,130 --> 00:00:47,880
SendGrid We have decided to send it and put that key here so that we can send the public password.

13
00:00:48,930 --> 00:00:49,860
Emails, right?

14
00:00:49,860 --> 00:00:53,220
So email, you want to use your email address.

15
00:00:54,120 --> 00:00:54,420
Okay.

16
00:00:54,630 --> 00:00:55,620
So we'll come back to it.

17
00:00:55,620 --> 00:00:56,760
Let's not worry about this one.

18
00:00:56,760 --> 00:01:01,020
Let's try running the event.

19
00:01:01,530 --> 00:01:07,770
So you can see here we have to run npm, install and then and being stuck NPM still.

20
00:01:13,260 --> 00:01:18,570
Once all the libraries has been installed, based on what we see in Baghdad today.

21
00:01:19,680 --> 00:01:25,890
All these files, all these dependencies, they will be installed in non magisk folder.

22
00:01:27,090 --> 00:01:28,020
That's done now.

23
00:01:28,470 --> 00:01:33,420
We can start a server and you can see here when you run NPM start.

24
00:01:34,320 --> 00:01:42,210
Norman will execute indicator days, which is the end point of our survey and I will be showing that

25
00:01:42,210 --> 00:01:44,040
file and explain all the code.

26
00:01:46,570 --> 00:01:47,110
Um.

27
00:01:47,290 --> 00:01:48,640
Just a second.

28
00:01:48,910 --> 00:01:54,490
I just noticed that we may have to install Norman because it's not here.

29
00:01:56,060 --> 00:02:01,570
I guess unless you have Norman installed globally, otherwise you have to install.

30
00:02:01,570 --> 00:02:03,340
So let's make sure you install this.

31
00:02:03,340 --> 00:02:03,880
Come on.

32
00:02:04,240 --> 00:02:07,330
This NPM library as well as NPM install.

33
00:02:07,420 --> 00:02:07,810
No.

34
00:02:09,070 --> 00:02:12,820
By the way, in Bergson, we don't use Norman, we use some other library.

35
00:02:12,820 --> 00:02:15,220
But when we are running locally, we do that.

36
00:02:16,000 --> 00:02:17,940
And now we have Norman as awesome.

37
00:02:19,090 --> 00:02:25,930
Okay, now let's run NPM Start command, which will execute index.html this fun and beam stuff.

38
00:02:28,950 --> 00:02:34,870
You can see we have the MongoDB connection error because that is not a valid euro.

39
00:02:35,210 --> 00:02:36,420
I will come back to that.

40
00:02:36,600 --> 00:02:43,800
However, you can see our service 100 up and running and you can give them a try by going into visiting

41
00:02:43,800 --> 00:02:44,460
a route.

42
00:02:44,490 --> 00:02:48,120
For example, let's go to the roads for let's have a look what we have here.

43
00:02:48,150 --> 00:02:54,030
So we have the sign of road sign in roads followed password and reset password.

44
00:02:54,240 --> 00:02:57,680
So these are all post roads, so you can send request here.

45
00:02:59,010 --> 00:03:01,090
To sign up, sign in and do all that stuff.

46
00:03:01,110 --> 00:03:09,240
We'll take it out later at the moment just to give it a try that we can try making request to our son,

47
00:03:09,840 --> 00:03:14,460
which is running in World 8000 now.

48
00:03:14,580 --> 00:03:20,850
I'll be explaining this on the school, but you can see here this is the route we have forwards less.

49
00:03:21,660 --> 00:03:23,160
So localhost, 8000.

50
00:03:23,160 --> 00:03:24,840
That's where our biggest son is running.

51
00:03:24,840 --> 00:03:25,290
So.

52
00:03:25,590 --> 00:03:28,530
So let's make a request and see what we get.

53
00:03:28,680 --> 00:03:31,660
We should be receiving this response.

54
00:03:32,730 --> 00:03:33,690
I guess it is heavily

55
00:03:37,290 --> 00:03:40,890
has to be local host.

56
00:03:41,880 --> 00:03:43,500
Now it's not 3000.

57
00:03:43,500 --> 00:03:44,400
It's 8000.

58
00:03:44,400 --> 00:03:46,280
That's our service learning API.

59
00:03:47,340 --> 00:03:48,720
So I just missed that.

60
00:03:50,670 --> 00:03:54,390
If you get anything like that, that means your server is running it.

61
00:03:54,390 --> 00:03:58,560
Just saying that there is no route with just focus less.

62
00:03:58,980 --> 00:04:02,070
So in our case it is prefixed with SLAs, Apia.

63
00:04:03,030 --> 00:04:09,990
If you visit that, you can see the response decent responsive data and it is saying hello world from

64
00:04:09,990 --> 00:04:16,050
cholera, the host API and this data is coming as a response from here.

65
00:04:16,230 --> 00:04:23,250
You can see here, whenever we get requests to SLAs, we send this decent response.

66
00:04:24,000 --> 00:04:24,780
All right, beautiful.

67
00:04:25,110 --> 00:04:29,700
Now, you might be wondering, we had the SLAs, but we made a request to SLAs.

68
00:04:29,700 --> 00:04:30,270
APAC.

69
00:04:30,270 --> 00:04:30,840
How is that?

70
00:04:31,230 --> 00:04:37,200
That's because if you go to the index to this, which is the end to point of our server, EMC here.

71
00:04:38,900 --> 00:04:47,420
The file has been imported as our throats and then it has been applied as a middleware and it has been

72
00:04:47,420 --> 00:04:49,330
prefixed with SLAs API.

73
00:04:49,760 --> 00:04:57,110
So prefixed means whenever you make request to sign up, sign in for a password, you will always prefix

74
00:04:57,110 --> 00:04:59,600
with AP, less IBS, less sign up.

75
00:05:00,470 --> 00:05:05,570
That's where you will be sending the user information from him.

76
00:05:06,230 --> 00:05:07,580
That's where you will be sending in.

77
00:05:07,580 --> 00:05:12,710
Then your server will process the user creation to use authentication.

78
00:05:12,710 --> 00:05:14,900
All that beautiful, right?

79
00:05:14,900 --> 00:05:16,520
So that's the route.

80
00:05:16,760 --> 00:05:20,960
However, let's go go through the very beginning.

81
00:05:20,960 --> 00:05:22,460
So what's happening here?

82
00:05:23,060 --> 00:05:28,400
The indicator, this indicator, as you can see here, this is the to point of a server.

83
00:05:28,730 --> 00:05:32,030
So whenever you run the server, this file gets executed.

84
00:05:32,390 --> 00:05:34,130
So everything has been imported here.

85
00:05:34,140 --> 00:05:35,570
Else has been imported here.

86
00:05:38,080 --> 00:05:41,110
I guess the first thing we have the X first, then we have the course.

87
00:05:41,110 --> 00:05:51,400
And one way as these packages have been imported and then we executed the express which gives us this

88
00:05:51,400 --> 00:05:51,760
EP.

89
00:05:52,360 --> 00:05:55,090
So to build our several, we're using Express.

90
00:05:55,330 --> 00:05:57,790
So Express it gives us a lot of functionalities.

91
00:05:58,030 --> 00:06:04,990
So to access all this functionalities, we exit with the, we execute this, this function and put all

92
00:06:04,990 --> 00:06:07,140
its value in this variable EP.

93
00:06:07,660 --> 00:06:13,720
So once you do that, next thing we have done is we have created a server.

94
00:06:15,310 --> 00:06:19,900
So we have created heads, we have used the has to deep module.

95
00:06:20,170 --> 00:06:23,050
This module is not something we have to install from NPM.

96
00:06:23,050 --> 00:06:25,090
It comes with nauseous by default.

97
00:06:30,530 --> 00:06:30,830
Okay.

98
00:06:30,830 --> 00:06:35,300
So has to be is also not required.

99
00:06:35,390 --> 00:06:40,670
But it is good to have him because later, if you want to use some real time with some video, then

100
00:06:40,670 --> 00:06:42,560
it's it gets really easier.

101
00:06:43,250 --> 00:06:43,580
All right.

102
00:06:43,580 --> 00:06:47,750
So then what we have done here is we have set up a database connection.

103
00:06:47,750 --> 00:06:52,280
We have used this mongoose library and it has this connect function.

104
00:06:52,280 --> 00:06:53,450
You can see connect function.

105
00:06:53,450 --> 00:07:00,170
And this function requires the database zero, which you are learning from the EMV file right now.

106
00:07:00,170 --> 00:07:01,640
This is not valid at the moment.

107
00:07:01,640 --> 00:07:02,960
That's where we have the error.

108
00:07:03,440 --> 00:07:04,400
We will fix that up.

109
00:07:05,300 --> 00:07:06,770
So that's the date of this connection.

110
00:07:07,070 --> 00:07:12,020
So basically we import the extremist app, we put that in a variable and execute.

111
00:07:12,020 --> 00:07:17,960
So we have all the functionalities available and then we have the power of this connection and then

112
00:07:18,500 --> 00:07:20,450
this exists at request.

113
00:07:20,450 --> 00:07:27,860
Some mirrors always are basically a piece of code, a function that executes in the middle, right?

114
00:07:28,040 --> 00:07:34,820
So basically how the server works is from the client, you send some data, sometimes you want to save

115
00:07:35,360 --> 00:07:40,490
some data, sometimes you want to get from the database unit sending anything you just getting it so

116
00:07:40,490 --> 00:07:42,530
that calls get request.

117
00:07:42,740 --> 00:07:44,330
This one is you sending something.

118
00:07:44,330 --> 00:07:46,010
This is called push to request.

119
00:07:46,130 --> 00:07:46,430
All right.

120
00:07:46,820 --> 00:07:48,590
So we'll be going through all this.

121
00:07:48,800 --> 00:07:50,480
They don't get overwhelmed.

122
00:07:50,480 --> 00:07:50,840
No.

123
00:07:51,030 --> 00:07:51,290
Right.

124
00:07:52,250 --> 00:07:55,610
So so that's how sutra works.

125
00:07:55,610 --> 00:07:58,190
We it communicates with client.

126
00:07:58,370 --> 00:08:01,940
Sometimes we ask for data, sometimes we send data.

127
00:08:02,210 --> 00:08:02,450
All right.

128
00:08:02,720 --> 00:08:05,390
So in this case, we will be sending the data.

129
00:08:06,380 --> 00:08:08,600
So those dollars will be received here.

130
00:08:08,870 --> 00:08:10,820
So they will be received as decent data.

131
00:08:10,820 --> 00:08:16,850
So we need to have this middleware to make sure we are able to receive the decent data.

132
00:08:17,270 --> 00:08:17,600
Okay.

133
00:08:17,930 --> 00:08:24,260
So this is one of those middleweight x, Mr. Jason, and you set the limit to maximum.

134
00:08:24,260 --> 00:08:31,940
We always for the of data transfer you can retain that of the URL extended we send it to true we are

135
00:08:31,940 --> 00:08:37,940
place of course, so that there is no conflict between a different client running in a different domain

136
00:08:38,420 --> 00:08:46,010
because by default the servers, the broadcast, they do not allow these requests from one domain to

137
00:08:46,010 --> 00:08:47,690
other for security reasons.

138
00:08:47,870 --> 00:08:52,230
So technically we have the power 3000 and the server is port 8000.

139
00:08:52,230 --> 00:08:54,200
So they are technically different domains.

140
00:08:54,560 --> 00:09:00,410
So when different domains tried to communicate with each other, browsers strive to stop them by default

141
00:09:00,710 --> 00:09:02,180
for security reasons.

142
00:09:02,480 --> 00:09:04,520
To avoid that, we can use the course.

143
00:09:04,760 --> 00:09:05,040
All right.

144
00:09:05,060 --> 00:09:06,820
So that's that moment.

145
00:09:07,710 --> 00:09:10,290
Now, let me quickly show you that so you can see here.

146
00:09:14,250 --> 00:09:17,280
Actually, we don't have we we have got this error.

147
00:09:17,280 --> 00:09:18,180
So you can see that.

148
00:09:18,180 --> 00:09:25,050
But whenever you make a request, for example, to sign up or sign any rules that will you get printed

149
00:09:25,050 --> 00:09:27,930
here with the method to get a post.

150
00:09:28,140 --> 00:09:33,480
So that will it really makes it easier for you to understand what's happening on which we are getting

151
00:09:33,480 --> 00:09:34,400
a request to us.

152
00:09:34,400 --> 00:09:38,580
So I'll get to all that you will be able to see here.

153
00:09:38,940 --> 00:09:45,540
This is something we will call later as we progress to basically you can see it's very simple this file

154
00:09:46,260 --> 00:09:46,950
imports.

155
00:09:48,740 --> 00:09:54,250
Excuse the excuse that connect to database apply some necessary middleware.

156
00:09:55,640 --> 00:10:01,790
Even roots has been applied as middle way into our throats, and whenever you want to apply as middleware,

157
00:10:01,790 --> 00:10:03,380
you use this use function.

158
00:10:04,600 --> 00:10:05,660
You can see this app.

159
00:10:06,020 --> 00:10:09,710
Basically, it's an extra server and it gives us a lot of functionalities.

160
00:10:09,710 --> 00:10:15,440
For example, one of those functionalities use, so this is a function to this function is taken this

161
00:10:15,440 --> 00:10:23,240
middleware, this piece of code that do certain things and same with the rules we wrote also has been

162
00:10:23,240 --> 00:10:25,970
applied as a middleware which is use.

163
00:10:26,490 --> 00:10:26,870
Thank you.

164
00:10:27,260 --> 00:10:30,740
And then basically we need a port to run our project.

165
00:10:30,740 --> 00:10:33,470
And so we are using the port 8000.

166
00:10:33,890 --> 00:10:41,450
If you want to use some different body, you can put it as a value in the variable which is in the EMV

167
00:10:41,450 --> 00:10:41,840
file.

168
00:10:41,990 --> 00:10:49,850
But if you don't have by default, we use 8000 just using this our operator if we have to use that or

169
00:10:50,270 --> 00:10:59,620
use this again, finally we listen on the spot and then this second argument is just a console.log to

170
00:10:59,630 --> 00:11:01,050
this system.

171
00:11:01,340 --> 00:11:03,380
So this text for us, you know.

172
00:11:06,120 --> 00:11:06,510
Done.

173
00:11:07,140 --> 00:11:07,330
All right.

174
00:11:07,350 --> 00:11:09,480
So that's the end point, very basic.

175
00:11:09,840 --> 00:11:16,620
We basically apply some malware's kind of to database and use the rote.

176
00:11:16,620 --> 00:11:17,400
Simple as that.

177
00:11:17,460 --> 00:11:21,000
Now let's go to the routs, which we already had a loop.

178
00:11:21,720 --> 00:11:27,210
Now you can have more than one route and you can just always import like that in a as well with more

179
00:11:27,210 --> 00:11:28,440
than one traditional form.

180
00:11:29,070 --> 00:11:29,700
So you can see here.

181
00:11:30,800 --> 00:11:33,640
We are using the express rota in Israel.

182
00:11:33,730 --> 00:11:35,850
That gives us more functionalities.

183
00:11:35,850 --> 00:11:40,950
For example, post requests, handle the postings, get requests to get requests.

184
00:11:41,370 --> 00:11:47,700
We already tried in the barrage amid a get request and we've got that decent response.
