WEBVTT
1
00:00:00.550 --> 00:00:05.130
All right, so we only have the sign of pizza when you give the sign up.

2
00:00:05.130 --> 00:00:09.720
We have the user information and the token in the context and local stories.

3
00:00:09.900 --> 00:00:12.990
So we have to do something similar when users sign in, right?

4
00:00:13.590 --> 00:00:18.330
So we're going to implement sign in and then it's going to be a similar thing.

5
00:00:18.330 --> 00:00:19.680
We're going to save the.

6
00:00:20.930 --> 00:00:25.010
User information in the local stories in the context and similar the token.

7
00:00:25.850 --> 00:00:31.370
Now the sign up is obviously it happens only once when users sign up to our application for the very

8
00:00:31.370 --> 00:00:32.030
first time.

9
00:00:32.270 --> 00:00:32.540
Right.

10
00:00:32.870 --> 00:00:34.190
So that happens only once.

11
00:00:34.190 --> 00:00:38.560
But signing is something user will be doing more frequently.

12
00:00:38.570 --> 00:00:40.680
Maybe every day, maybe once a week.

13
00:00:40.700 --> 00:00:40.910
All right.

14
00:00:41.330 --> 00:00:44.240
So let's work on this one.

15
00:00:44.240 --> 00:00:49.550
And then once you have the sign in, then we're going to implement log out as well.

16
00:00:49.550 --> 00:00:55.700
At the moment, we have no way to log out unless you empty the values from logged stories.

17
00:00:57.170 --> 00:00:57.470
All right.

18
00:00:57.890 --> 00:01:02.710
So let's work on this signing phase.

19
00:01:02.960 --> 00:01:03.230
All right.

20
00:01:03.230 --> 00:01:09.590
So we have the signing phase here, and we already copied the code, which is pretty similar to what

21
00:01:09.590 --> 00:01:10.490
we have in sign up.

22
00:01:10.500 --> 00:01:14.270
So we have the input file for the email password.

23
00:01:15.410 --> 00:01:19.940
We have the link for forward password and then we have a button on click of the button.

24
00:01:20.600 --> 00:01:22.460
We are executing a function.

25
00:01:23.090 --> 00:01:28.970
We using the end design's fun component, so on and finish.

26
00:01:28.970 --> 00:01:30.890
We are executing this function.

27
00:01:31.990 --> 00:01:32.230
Right.

28
00:01:32.960 --> 00:01:36.890
So let's, let's have a look at the console.

29
00:01:36.890 --> 00:01:40.670
Let's make sure we have everything we give the user input.

30
00:01:43.340 --> 00:01:45.350
Right, that simulator.

31
00:01:49.080 --> 00:01:51.060
Okay, so we got the imminent password.

32
00:01:51.420 --> 00:01:52.120
So that's good.

33
00:01:52.140 --> 00:01:54.660
This is what we need to send to our banking, right?

34
00:01:55.080 --> 00:01:59.010
And back in, we all have the sign in wrote which we will explore a bit later.

35
00:01:59.160 --> 00:02:03.970
But at the moment let's use X use so that we can send a request, right?

36
00:02:04.050 --> 00:02:14.400
So we import excuse from access and I'm sure you already know we have configured axis in our context.

37
00:02:15.270 --> 00:02:18.120
That meant we didn't have to write the full path.

38
00:02:18.120 --> 00:02:22.710
We can just use the endpoint because we already have the base here.

39
00:02:24.030 --> 00:02:25.830
It's coming from the EMV, right?

40
00:02:26.460 --> 00:02:30.300
So we import X use and then we're going to use that here.

41
00:02:30.480 --> 00:02:32.820
So function let's make it async function.

42
00:02:33.990 --> 00:02:39.540
So not that this was unfinished, let's make it async function.

43
00:02:40.890 --> 00:02:43.770
It's common design and it's used prior.

44
00:02:49.260 --> 00:02:50.700
Kids in the air.

45
00:02:52.560 --> 00:02:55.360
So if we get an error, we console.log the error.

46
00:02:55.710 --> 00:02:57.990
And then we want to show the toast notification.

47
00:02:57.990 --> 00:02:59.250
So I'm going to four error messages.

48
00:02:59.250 --> 00:02:59.520
Right.

49
00:03:00.000 --> 00:03:03.480
So let's say toast.

50
00:03:05.190 --> 00:03:06.290
Don't error.

51
00:03:09.480 --> 00:03:12.690
We might be getting the error message from the backend.

52
00:03:12.810 --> 00:03:13.110
Right.

53
00:03:13.110 --> 00:03:14.550
So we can show that here.

54
00:03:15.090 --> 00:03:16.740
And for the other

55
00:03:20.100 --> 00:03:27.330
end, the unexpected errors, we can see something like a sign in failed proof.

56
00:03:28.060 --> 00:03:29.460
Try again.

57
00:03:31.620 --> 00:03:31.770
That's.

58
00:03:32.040 --> 00:03:34.350
But we will be showing the error messages here.

59
00:03:36.430 --> 00:03:44.770
So that and then we may want to also use the loading, right, so we can use the state at the moment

60
00:03:44.770 --> 00:03:48.700
we do have instead we can always use our own state.

61
00:03:48.700 --> 00:03:49.540
Let's try it.

62
00:03:50.620 --> 00:03:59.320
So in third use state hook from React so that we can use a split in our functional components.

63
00:03:59.320 --> 00:04:02.710
You start loading

64
00:04:06.160 --> 00:04:11.330
loading equals to use state and we give the default value of false.

65
00:04:11.330 --> 00:04:13.420
So by default it will be false.

66
00:04:13.870 --> 00:04:16.780
When it's true we cancel some kind of alerting indicator.

67
00:04:17.170 --> 00:04:21.910
So it will become true when we make a request when this function executes, right?

68
00:04:22.270 --> 00:04:28.750
So our first thing let's actually right here now gets error.

69
00:04:28.750 --> 00:04:32.830
If we get in error, then we want to set loading to false.

70
00:04:34.270 --> 00:04:41.120
Otherwise when we make when user submit this form, first thing you want to do is set learning to do

71
00:04:41.290 --> 00:04:44.560
it, loading to do.

72
00:04:44.830 --> 00:04:45.070
All right.

73
00:04:45.460 --> 00:04:49.900
And then we're going to make a request to our back, right?

74
00:04:49.900 --> 00:04:51.340
So we need the end point.

75
00:04:51.340 --> 00:04:54.730
So we use excuse to make a request.

76
00:04:54.730 --> 00:05:03.340
An X just gives us the response data we can destructor data across to complete x use dot post.

77
00:05:03.340 --> 00:05:06.610
We make a post request because we're posting something some don't.

78
00:05:07.210 --> 00:05:10.720
So let me quickly have a look at the image file.

79
00:05:10.720 --> 00:05:16.240
So we have the the base here and that already has this less API.

80
00:05:16.240 --> 00:05:18.550
So we don't have to write API here.

81
00:05:18.550 --> 00:05:26.320
We just need to write the exact end point, which is sign in and use it as the endpoint.

82
00:05:26.320 --> 00:05:33.430
And we are sending the values which will be users email and password, sort of a user type in the form.

83
00:05:33.820 --> 00:05:40.510
So you can see the first argument to this post function is the end point and second argument is the

84
00:05:40.930 --> 00:05:42.370
data that we are posting.

85
00:05:43.530 --> 00:05:43.800
Okay.

86
00:05:44.340 --> 00:05:47.970
And then we can have a look at the console.log data.

87
00:05:49.410 --> 00:05:51.330
We can do a few other things here.

88
00:05:52.350 --> 00:05:53.610
We can take for the error.

89
00:05:53.880 --> 00:05:54.780
Write to if.

90
00:05:56.070 --> 00:06:04.710
By the way, let me just control the diagnosis just so that we can see signing and response.

91
00:06:07.610 --> 00:06:07.850
Okay.

92
00:06:08.840 --> 00:06:11.040
So let's try to understand how everything is working.

93
00:06:11.340 --> 00:06:11.940
So let's.

94
00:06:13.960 --> 00:06:18.370
Check out our control function and let's see how this data is being sent.

95
00:06:18.640 --> 00:06:23.830
And to make sure we have we are sending this data from client and receiving in the server.

96
00:06:23.860 --> 00:06:24.940
That is really important.

97
00:06:24.940 --> 00:06:30.640
When you working with EBS, you want to make sure the client and so they are communicating the right

98
00:06:30.640 --> 00:06:32.890
way and you are receiving data, right?

99
00:06:33.250 --> 00:06:40.450
So let's make sure we are receiving the values in our control controller is something we have here auto

100
00:06:40.450 --> 00:06:41.110
generated.

101
00:06:41.890 --> 00:06:45.100
Later we will be creating our own functions controllers.

102
00:06:45.100 --> 00:06:47.950
But at the moment this is signing we can use.

103
00:06:48.940 --> 00:06:50.950
Let's quickly have a look at the route first.

104
00:06:51.880 --> 00:06:59.470
So it's here we have the sign in dropped it it should be the method of post and it is handled by this

105
00:07:00.070 --> 00:07:01.000
controller function.

106
00:07:01.000 --> 00:07:01.210
Yeah.

107
00:07:02.480 --> 00:07:02.750
All right.

108
00:07:04.140 --> 00:07:10.530
So let's go to the control function, sign in and you can see this is the code that signed in the user.

109
00:07:11.040 --> 00:07:19.080
So basically we have getting the emitted password from the client and then we are taking first to try

110
00:07:19.080 --> 00:07:22.200
to find the user from the database because.

111
00:07:24.630 --> 00:07:26.360
Had to use a find by email.

112
00:07:27.590 --> 00:07:28.820
All right, so find the email.

113
00:07:29.210 --> 00:07:36.200
And if we don't have the user with that email, that means this user have never signed up to our application.

114
00:07:36.350 --> 00:07:36.620
Right.

115
00:07:36.710 --> 00:07:42.990
So he should sign up first, register first so we can send this error message.

116
00:07:43.010 --> 00:07:43.220
No.

117
00:07:43.220 --> 00:07:47.570
Use a phone so that he can go ahead and sign up.

118
00:07:48.080 --> 00:07:48.380
All right.

119
00:07:48.980 --> 00:07:52.930
Now, if the user is fine, then we have to compare a password.

120
00:07:52.940 --> 00:07:55.130
That's how we're going to sign in the user.

121
00:07:55.550 --> 00:07:58.760
So you can see here we are receiving the email ID password.

122
00:07:58.760 --> 00:08:05.750
So we receive the pin password, we give the pin password and the hashed version, which is coming from

123
00:08:05.750 --> 00:08:10.100
the database user, the password which is here we got the user from the database.

124
00:08:10.610 --> 00:08:14.210
So user password which is already hashed and saved in the database.

125
00:08:15.050 --> 00:08:18.080
So that one and the password we are comparing.

126
00:08:18.230 --> 00:08:21.590
So you can see this function takes two argument.

127
00:08:21.590 --> 00:08:24.170
One is the blend password, one is the hash version.

128
00:08:25.820 --> 00:08:31.970
So if you're curious, you can take out this function as well and help us compare passwords to basically

129
00:08:31.970 --> 00:08:38.210
just a one line of code, the script we having using the script and to compare.

130
00:08:38.210 --> 00:08:44.300
Also, we can easily use this compare function that takes two arguments, plan one and the hash password.

131
00:08:44.300 --> 00:08:47.270
And if the Mets, then it will return.

132
00:08:47.630 --> 00:08:49.580
True, otherwise it would return false.

133
00:08:51.620 --> 00:08:59.570
I guess if we compare the password and if it is not true, if it is false, then we send the wrong password

134
00:08:59.990 --> 00:09:03.500
and we return immediately so we don't do anything else.

135
00:09:03.530 --> 00:09:05.330
Otherwise it's all good.

136
00:09:05.330 --> 00:09:05.590
Right?

137
00:09:05.590 --> 00:09:06.740
So we got the user.

138
00:09:07.970 --> 00:09:09.230
The password also met.

139
00:09:09.440 --> 00:09:11.840
In that case, we generate the token again.

140
00:09:11.840 --> 00:09:14.510
It's the exact same way we did with the token.

141
00:09:14.930 --> 00:09:16.600
I do the sign up as well.

142
00:09:16.840 --> 00:09:24.560
You can see it's the exact same code we use the same token created the same token using the user's I.D.,

143
00:09:25.460 --> 00:09:29.930
using the secret and third argument is the expiry date, which is seven days.

144
00:09:30.220 --> 00:09:30.500
All right.

145
00:09:30.770 --> 00:09:33.080
And then basically that's all you need.

146
00:09:33.080 --> 00:09:34.670
We have the user, we have the token.

147
00:09:34.670 --> 00:09:36.170
We can send that response.

148
00:09:36.770 --> 00:09:40.850
Before we send that, we want to make sure we are not sending the test password in secret.

149
00:09:41.090 --> 00:09:45.290
So I send that to undefined, I guess to it's pretty straightforward.

150
00:09:45.650 --> 00:09:51.620
So let's have a look at the request body and make sure we have got the data.

151
00:09:51.620 --> 00:09:53.030
Let's use written keyword.

152
00:09:53.030 --> 00:09:56.330
So none of this code executes just for testing purpose.

153
00:09:56.510 --> 00:09:59.450
All right, so let's have a look at the data.

154
00:09:59.960 --> 00:10:08.240
So this sign in the function, let's make sure we are sending this data to the right endpoint.

155
00:10:09.650 --> 00:10:11.870
We should be able to see it in the central console.

156
00:10:11.870 --> 00:10:19.310
And then we go ahead and ongoing this one and let this code work so that we are able to serve the user

157
00:10:19.310 --> 00:10:20.240
in the database.

158
00:10:20.420 --> 00:10:26.930
So we are able to sign in the user based only password comparison.

159
00:10:27.080 --> 00:10:30.710
All right, so let's try Orion.

160
00:10:31.150 --> 00:10:33.650
And so we have this user.

161
00:10:35.180 --> 00:10:41.210
Let's again, we don't see anything here because we're not sending in response, but we should see the

162
00:10:41.210 --> 00:10:46.850
console log and sure enough we do in the bag and you can see we have got the emollient password.

163
00:10:46.910 --> 00:10:47.300
Perfect.

164
00:10:49.790 --> 00:10:51.200
Everything should go fine.

165
00:10:51.200 --> 00:10:57.710
Let's remove that and let's run this code so that we can sign into the user.

166
00:10:57.710 --> 00:11:01.070
And if there is any error, you can see if there's an error.

167
00:11:01.460 --> 00:11:02.840
We're sending their messages.

168
00:11:03.380 --> 00:11:11.090
We can have a look at that in our sign in function here in the client, we are console.log.

169
00:11:11.090 --> 00:11:11.450
They're

170
00:11:14.660 --> 00:11:15.050
toast.

171
00:11:15.050 --> 00:11:15.740
We don't have.

172
00:11:15.740 --> 00:11:17.360
Let's make sure we import that in.

173
00:11:17.360 --> 00:11:25.580
Sign it for toast from React.

174
00:11:25.850 --> 00:11:26.780
How does.

175
00:11:30.750 --> 00:11:31.680
Let's try logging.
