WEBVTT
1
00:00:00.600 --> 00:00:00.830
All right.

2
00:00:00.840 --> 00:00:02.760
So we have the categories form now.

3
00:00:02.760 --> 00:00:04.890
We have the user input.

4
00:00:05.580 --> 00:00:07.410
We are able to get that.

5
00:00:07.410 --> 00:00:09.990
So we're going to send it to our banking for that.

6
00:00:09.990 --> 00:00:15.000
Obviously, we have to work on the back end, quit droughts, controller functions and even schemas.

7
00:00:15.240 --> 00:00:22.170
So let's head over to our server and we're going to start with the models.

8
00:00:22.800 --> 00:00:26.370
Actually, let me show you the user model which we have already used.

9
00:00:26.700 --> 00:00:35.310
So as you can see here on the user schema, this is the schema and user model has been created based

10
00:00:35.310 --> 00:00:36.030
on this scheme.

11
00:00:36.390 --> 00:00:43.890
So you can see the schema has this name, email, password, role, it means reset calls, all these

12
00:00:43.890 --> 00:00:49.200
properties you can see in the database for each user.

13
00:00:49.500 --> 00:00:49.770
All right.

14
00:00:50.340 --> 00:00:52.950
So what is what is written in the schema?

15
00:00:53.160 --> 00:00:57.690
Those fields will be you will be able to save in the database.

16
00:00:57.690 --> 00:01:07.440
But if it is not in the schema, for example, about okay, so there is no property by the name of about

17
00:01:07.440 --> 00:01:08.430
in the user scheme.

18
00:01:09.090 --> 00:01:15.780
So in this case, if you send some data from your React application to your back end to create a user,

19
00:01:15.780 --> 00:01:17.820
the maybe you send about.

20
00:01:19.700 --> 00:01:21.140
Property with some values.

21
00:01:21.800 --> 00:01:27.170
And you tried to say that in the database that will not be saved because that is not written in the

22
00:01:27.170 --> 00:01:27.710
scheme.

23
00:01:28.280 --> 00:01:30.570
So you have to understand it like that.

24
00:01:30.590 --> 00:01:38.270
So anything you want to save in the database for this particular model, user model, you need to write

25
00:01:38.270 --> 00:01:40.050
them in the schema first.

26
00:01:40.050 --> 00:01:46.550
So you write you give the type what type of data it's going to be, if it is required or not.

27
00:01:47.220 --> 00:01:49.220
If it is required, then if you don't.

28
00:01:51.210 --> 00:01:53.010
Have this, when are you saving the user?

29
00:01:53.010 --> 00:01:55.830
Then you get some kind of error because it is required.

30
00:01:55.950 --> 00:01:57.980
You can see it has to be unique.

31
00:01:57.990 --> 00:02:04.290
If something like email that has to be unique, then those things, everything you can write in your

32
00:02:04.290 --> 00:02:06.420
schema that's a is schemas.

33
00:02:06.420 --> 00:02:13.320
Basically, they're there to tell you what you can save in the database for that particular model.

34
00:02:13.620 --> 00:02:13.760
Right.

35
00:02:13.830 --> 00:02:18.900
So it's going to be something similar but a bit simpler for categories.

36
00:02:18.900 --> 00:02:23.250
So it's good new model and let's call it category.

37
00:02:23.610 --> 00:02:23.940
It is.

38
00:02:25.080 --> 00:02:25.490
I guess.

39
00:02:25.610 --> 00:02:25.890
Yeah.

40
00:02:26.340 --> 00:02:28.110
First we can.

41
00:02:29.570 --> 00:02:31.880
We have to require a mongoose, right?

42
00:02:31.890 --> 00:02:40.970
So you may have noticed that in Node.js we use recoil, whereas in react to use import, I see India

43
00:02:41.300 --> 00:02:49.460
in react, we use import, but notice it doesn't support import and export syntax by default.

44
00:02:51.240 --> 00:02:51.620
All right.

45
00:02:51.630 --> 00:02:59.370
So if you want to use import and export, it's actually not that difficult, but it does support out

46
00:02:59.370 --> 00:02:59.970
of the box.

47
00:03:00.210 --> 00:03:07.260
So if you want, which is something I want, I'm used to writing import export in react and it's quite.

48
00:03:09.740 --> 00:03:10.180
Easy.

49
00:03:10.430 --> 00:03:19.430
This is fluent, so let's try using a package called ESM that will easily allow you to use import and

50
00:03:19.430 --> 00:03:20.210
export syntax.

51
00:03:20.210 --> 00:03:25.850
So you just yeah, it should be a bit more comfortable for you as it because you can use the same syntax

52
00:03:25.850 --> 00:03:27.620
in the front and the back end as well.

53
00:03:28.250 --> 00:03:28.460
All right.

54
00:03:28.460 --> 00:03:32.770
So let's go ahead and install that back is in now.

55
00:03:32.780 --> 00:03:39.230
So let me start this one control C and then insert NPM I ESM.

56
00:03:40.100 --> 00:03:45.740
This package is something you can use in products and as well it is built for products and it is excellent

57
00:03:45.740 --> 00:03:46.160
base.

58
00:03:46.370 --> 00:03:48.470
I'd say it's not just for development.

59
00:03:48.980 --> 00:03:50.510
Okay, so it's quickly installed.

60
00:03:50.510 --> 00:03:58.070
Now let's run the server back again and if you want, you can quickly check out the NPM docs for this

61
00:03:58.070 --> 00:03:58.220
one.

62
00:03:58.400 --> 00:04:01.340
So NPM is an if you search.

63
00:04:02.860 --> 00:04:03.910
And have a quick look.

64
00:04:08.470 --> 00:04:17.290
I assume it's a bit of intro on this one and it's quite public library and to start using this one.

65
00:04:19.350 --> 00:04:20.010
We can.

66
00:04:21.230 --> 00:04:28.610
This use is the same before in our start script in back is different this.

67
00:04:30.330 --> 00:04:30.630
All right.

68
00:04:30.750 --> 00:04:33.630
And then instead of requiring like that.

69
00:04:36.220 --> 00:04:44.530
We can just use input X for syntax and this is something we can do before we deploy the application

70
00:04:44.530 --> 00:04:48.280
to our cloud server, which I will be covering later as well.

71
00:04:48.340 --> 00:04:48.580
All right.

72
00:04:48.580 --> 00:04:49.780
So let me close this.

73
00:04:50.290 --> 00:04:55.560
Come back and start using that ESM Pegasus.

74
00:04:55.810 --> 00:04:56.080
All right.

75
00:04:56.080 --> 00:05:03.360
So here in the package addition, we can use Node one death, our ESM, and that is all we need to do

76
00:05:03.370 --> 00:05:04.120
at the moment.

77
00:05:04.600 --> 00:05:11.410
Now, I'm not going to do it just for a second few seconds, just so that I can show you what happens

78
00:05:11.740 --> 00:05:14.260
if you tried to use import export syntax.

79
00:05:14.350 --> 00:05:14.560
All right.

80
00:05:15.130 --> 00:05:22.630
So let me try importing mongoose first goose from mongoose.

81
00:05:22.960 --> 00:05:23.260
Okay.

82
00:05:23.410 --> 00:05:23.770
All right.

83
00:05:24.550 --> 00:05:25.060
Now.

84
00:05:27.950 --> 00:05:30.020
Let me quickly have a look at the auto model.

85
00:05:30.560 --> 00:05:35.900
You can see we import mongoose and we destructor schema from mongoose.

86
00:05:35.990 --> 00:05:36.230
All right.

87
00:05:36.740 --> 00:05:38.270
So we can do that here as well.

88
00:05:41.860 --> 00:05:50.440
And then we create a category schemas, icons, category schematic with new scheme.

89
00:05:52.210 --> 00:05:58.180
So we use the new keyword to create a new instance of the mongoose scheme.

90
00:05:58.570 --> 00:06:04.300
So this is a function, as you can see, there's a function and in this function you write your schema.

91
00:06:04.570 --> 00:06:12.040
So every time you want to create a category, you add one just to one field, basically just the name.

92
00:06:12.250 --> 00:06:19.690
But we will also use this slug as well as the name with the type of string.

93
00:06:23.250 --> 00:06:27.060
It'll be the string tied and then required to.

94
00:06:27.120 --> 00:06:32.640
So we want to make sure every time we want to create a category, we want to save in the database.

95
00:06:32.910 --> 00:06:34.740
The name is required.

96
00:06:35.460 --> 00:06:35.700
Right.

97
00:06:36.060 --> 00:06:37.350
And then we want to.

98
00:06:37.350 --> 00:06:38.220
Slowly as well.

99
00:06:38.760 --> 00:06:39.160
Slowly.

100
00:06:39.190 --> 00:06:40.050
Something we need.

101
00:06:41.120 --> 00:06:42.770
How many for a sea of porpoise?

102
00:06:43.100 --> 00:06:45.080
Let me quickly show you why we need to slow.

103
00:06:45.470 --> 00:06:47.180
So let me go to the finish project.

104
00:06:47.780 --> 00:06:51.890
If you go to the home base and you can see here we have all these categories.

105
00:06:51.890 --> 00:06:53.660
In all these categories.

106
00:06:53.690 --> 00:06:54.590
All these posts.

107
00:06:55.190 --> 00:06:56.120
Some categories.

108
00:06:56.360 --> 00:06:59.090
Previously, I created this category called monastic.

109
00:06:59.120 --> 00:07:04.430
Now, if I click here, that will take me to this category piece if I click here.

110
00:07:04.460 --> 00:07:10.190
You can see in the year we have categories less monastic, that monastic.

111
00:07:10.190 --> 00:07:12.560
But that is the slow.

112
00:07:14.540 --> 00:07:21.920
All right I if I click on this three you can see categories less this three so that this three is a

113
00:07:21.920 --> 00:07:22.340
slope.

114
00:07:22.730 --> 00:07:26.180
So usually the slopes are all lowercase now empty space.

115
00:07:26.450 --> 00:07:32.370
If there's empty space, you need to make sure to have some kind of death or something so there is no

116
00:07:32.390 --> 00:07:33.050
empty space.

117
00:07:34.110 --> 00:07:37.040
Okay, so this is really good for issue.

118
00:07:39.010 --> 00:07:42.130
Because if we didn't have the slug, then we couldn't.

119
00:07:42.580 --> 00:07:49.720
So that category, based on the category I.D. I.D. is something that is created whenever you save anything

120
00:07:49.720 --> 00:07:52.090
in the MongoDB to automatically create.

121
00:07:52.580 --> 00:07:53.980
So that is the only way we could.

122
00:07:53.980 --> 00:07:57.130
So this category which might look something like this.

123
00:07:57.190 --> 00:08:03.370
Now, this is not good for issue and it's not even good for users because it's not really user friendly

124
00:08:03.370 --> 00:08:03.910
and needs.

125
00:08:05.140 --> 00:08:07.990
It's hard to remember no one actually used.

126
00:08:10.080 --> 00:08:10.720
Like this one.

127
00:08:10.840 --> 00:08:17.110
So obviously you want to use slow so that it's user friendly, it's good and it's issue as well.

128
00:08:17.410 --> 00:08:20.530
So for that reason, we want to sort of save the slot.

129
00:08:21.110 --> 00:08:30.820
So so you want to make sure it's again again, it's a type of string and unique to it will always be

130
00:08:30.820 --> 00:08:38.020
unique have to be same with the name because if you have to get engaged with the same slug, then it's

131
00:08:38.020 --> 00:08:43.120
not going to work and then lowercase too.

132
00:08:43.600 --> 00:08:50.530
So this is something you can use with MongoDB in the in the schema with Mongoose, it's really useful

133
00:08:50.530 --> 00:08:52.720
because that way we wouldn't have to.

134
00:08:54.380 --> 00:08:57.110
Lowercase ourself when we are serving the category.

135
00:08:58.110 --> 00:09:00.660
Slug will be automatically unlock.

136
00:09:01.900 --> 00:09:02.170
Okay.

137
00:09:02.170 --> 00:09:05.110
So that's all we need to create a category schema.

138
00:09:05.440 --> 00:09:07.210
We just need the name and the slug.

139
00:09:08.050 --> 00:09:13.210
Now, this schema, this function, you can see this is what we write in our schema.

140
00:09:13.960 --> 00:09:15.700
So think of it as the first argument.

141
00:09:15.730 --> 00:09:18.940
You can actually pass a second element here, comma.

142
00:09:19.210 --> 00:09:25.200
Second argument is time timestamps too.

143
00:09:25.630 --> 00:09:29.950
I always like to use the time stamps because this will give you.

144
00:09:30.950 --> 00:09:41.930
The created at and updated add fields automatically it will create and anytime you save anything in

145
00:09:41.930 --> 00:09:47.450
the database that way it's going to be super useful because later, you know, when the category was

146
00:09:47.450 --> 00:09:49.390
created and when it was updated.

147
00:09:49.980 --> 00:09:50.500
All right.

148
00:09:50.540 --> 00:09:55.520
So I always like to use the time stamp strip and that's pretty much it.

149
00:09:55.520 --> 00:09:56.870
That's that's all we need.

150
00:09:56.870 --> 00:10:04.340
Now we can export the schema module, don't export so we can use that syntax all.

151
00:10:06.220 --> 00:10:12.490
We can use them more than a bit more than indexing to using import and export.

152
00:10:15.040 --> 00:10:20.080
So we can use just like we do it in react to export default.

153
00:10:22.730 --> 00:10:30.500
Mine was model, just like we used Mungo's model earlier in the user scheme as well.

154
00:10:30.500 --> 00:10:33.680
But this one was using require, so you can leave it like that.

155
00:10:33.680 --> 00:10:34.640
You didn't have to change it.

156
00:10:35.690 --> 00:10:38.600
We did it like that mongoose dirt model.

157
00:10:39.080 --> 00:10:40.190
Give the model name.

158
00:10:41.030 --> 00:10:43.280
I'll make sure it is kept stuck.

159
00:10:43.310 --> 00:10:46.130
It's a convention and then the schema.

160
00:10:46.250 --> 00:10:47.780
So we're going to do something similar.

161
00:10:48.830 --> 00:10:49.100
Yeah.

162
00:10:49.940 --> 00:10:51.200
Explore different models.

163
00:10:51.200 --> 00:10:59.960
Did model use a model name category with the capital C and it is based on the category scheme.

164
00:11:03.720 --> 00:11:04.890
Category schema.

165
00:11:06.910 --> 00:11:07.480
Beautiful.

166
00:11:13.120 --> 00:11:13.360
Okay.

167
00:11:13.360 --> 00:11:14.440
So I have a typo here.

168
00:11:14.560 --> 00:11:14.860
Slim.

169
00:11:15.430 --> 00:11:17.610
That is too beautiful.

170
00:11:17.620 --> 00:11:19.960
So this is how you create a schema.

171
00:11:20.350 --> 00:11:28.120
So now that we have a schema, we can go ahead and create a root control function so that we can start

172
00:11:28.120 --> 00:11:29.500
saving the categories.
