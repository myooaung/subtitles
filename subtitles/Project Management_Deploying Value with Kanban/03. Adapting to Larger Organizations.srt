1
00:00:00,940 --> 00:00:05,130
Let's explore how we might adapt and change our actions in order

2
00:00:05,130 --> 00:00:09,940
to continue to excel in larger organizations.

3
00:00:09,940 --> 00:00:14,640
Some context first. It is quite difficult, as a Kanban team leader or team

4
00:00:14,640 --> 00:00:19,180
member, to influence or affect large, multi‑team corporate system development

5
00:00:19,180 --> 00:00:22,120
activities that are happening around you and above you.

6
00:00:22,120 --> 00:00:22,850
Therefore,

7
00:00:22,850 --> 00:00:25,230
this module will focus on how you can live and

8
00:00:25,230 --> 00:00:29,440
thrive within that complex structure.

9
00:00:29,440 --> 00:00:32,800
All projects, big or small, need to articulate and

10
00:00:32,800 --> 00:00:35,160
document the expected project outcomes.

11
00:00:35,160 --> 00:00:36,820
For example, what is the vision?

12
00:00:36,820 --> 00:00:38,440
What is the purpose of the project?

13
00:00:38,440 --> 00:00:39,810
What will be the benefits?

14
00:00:39,810 --> 00:00:40,960
What's the architecture?

15
00:00:40,960 --> 00:00:42,300
What's the project plan?

16
00:00:42,300 --> 00:00:46,180
All this will drive deliverables with what features must be completed,

17
00:00:46,180 --> 00:00:49,200
milestones and dates, and what each team's roles and

18
00:00:49,200 --> 00:00:51,050
expected contributions will be.

19
00:00:51,050 --> 00:00:56,440
All this needs to flow clearly and effectively to all the development teams.

20
00:00:56,440 --> 00:00:59,770
I must say, that is a communication challenge. To get

21
00:00:59,770 --> 00:01:02,030
everyone on the same page is not easy.

22
00:01:02,030 --> 00:01:04,460
Lots of teams, lots of development methods,

23
00:01:04,460 --> 00:01:09,440
lots of product owners, it can be a challenge.

24
00:01:09,440 --> 00:01:12,450
So now that we have the expected project outcomes,

25
00:01:12,450 --> 00:01:16,730
let's determine what the work is to do and assign the work to the right teams.

26
00:01:16,730 --> 00:01:21,140
All work items given to each team is, of course, their backlog work items.

27
00:01:21,140 --> 00:01:25,530
I would suggest identifying only the priority 1 items that are in the MVP,

28
00:01:25,530 --> 00:01:28,460
or the minimum viable product items, for them to work on.

29
00:01:28,460 --> 00:01:29,030
The rest,

30
00:01:29,030 --> 00:01:32,170
if any, are just parking lot items for this time. Determine the

31
00:01:32,170 --> 00:01:34,460
work type that makes sense for this project.

32
00:01:34,460 --> 00:01:37,460
I have simplified this into two work types that I'll

33
00:01:37,460 --> 00:01:40,890
recommend. The first, use cases. I like use cases.

34
00:01:40,890 --> 00:01:43,370
They are the best to me for business features.

35
00:01:43,370 --> 00:01:47,740
An example may be users can rideshare as a carpooling feature.

36
00:01:47,740 --> 00:01:52,170
Another work type I like is services or general purpose services or

37
00:01:52,170 --> 00:01:55,240
components that are the underpinnings of your new large project.

38
00:01:55,240 --> 00:01:58,110
An example may be determine the best‑fit GPS

39
00:01:58,110 --> 00:02:00,680
algorithm to pair riders with drivers.

40
00:02:00,680 --> 00:02:04,140
Now you need to assign your use cases and services as backlog

41
00:02:04,140 --> 00:02:07,910
items across all your teams. And with tons of interdependencies,

42
00:02:07,910 --> 00:02:09,950
this could be very complex indeed.

43
00:02:09,950 --> 00:02:10,910
Okay, a note.

44
00:02:10,910 --> 00:02:13,640
You are a team lead or member of one of these teams.

45
00:02:13,640 --> 00:02:16,040
You are likely not to have to do all this planning,

46
00:02:16,040 --> 00:02:19,630
but you need to know how your team fits in into the larger

47
00:02:19,630 --> 00:02:23,520
project and organization so you have the context on why you

48
00:02:23,520 --> 00:02:27,740
are doing, well, what you are doing.

49
00:02:27,740 --> 00:02:31,540
Let's look at three ways we may structure our teams. First, each

50
00:02:31,540 --> 00:02:34,220
use case team owns multiple use cases to deliver.

51
00:02:34,220 --> 00:02:35,590
That is one kind of team.

52
00:02:35,590 --> 00:02:39,370
This team focuses on business features. That is their focus. The

53
00:02:39,370 --> 00:02:42,870
second, each team owns multiple services to deliver.

54
00:02:42,870 --> 00:02:45,660
This team focuses on services or components that

55
00:02:45,660 --> 00:02:47,940
the feature teams would consume.

56
00:02:47,940 --> 00:02:51,560
Now, I have found time and time again that if you split things as

57
00:02:51,560 --> 00:02:55,160
I have shown there is much less understanding by the service teams

58
00:02:55,160 --> 00:02:57,240
to what the use teams really need.

59
00:02:57,240 --> 00:02:59,740
And I have seen much wasted time integrating the

60
00:02:59,740 --> 00:03:01,980
features with back‑end services.

61
00:03:01,980 --> 00:03:05,470
And it's not that this won't work, it can, but I recommend a lot of

62
00:03:05,470 --> 00:03:07,920
communication between these two types of teams.

63
00:03:07,920 --> 00:03:11,960
So another approach to consider is hybrid, that is a little of both.

64
00:03:11,960 --> 00:03:16,040
So teams own multiple use cases and some services too.

65
00:03:16,040 --> 00:03:19,140
The use cases will drive the nature and features of the service,

66
00:03:19,140 --> 00:03:20,960
but since it's on the same team,

67
00:03:20,960 --> 00:03:23,530
much more communication and understanding will happen.

68
00:03:23,530 --> 00:03:27,350
Then the team needs to publish the service and work with the other use case

69
00:03:27,350 --> 00:03:30,470
teams to further enhance each service to meet their needs.

70
00:03:30,470 --> 00:03:34,430
So they have some use cases that initially drive the service offering and

71
00:03:34,430 --> 00:03:38,100
then enhance the service offering to other use case teams.

72
00:03:38,100 --> 00:03:39,120
Just a thought.

73
00:03:39,120 --> 00:03:42,040
Now, there may be other ways you want to slice the pie,

74
00:03:42,040 --> 00:03:45,390
but I have chosen use cases because they describe the outcome in the

75
00:03:45,390 --> 00:03:49,800
user's business terms and expectations, I like that, and services

76
00:03:49,800 --> 00:03:51,830
since, well, everything is a service today,

77
00:03:51,830 --> 00:03:58,070
and it just makes sense. Here is your typical Kanban workflow for a team.

78
00:03:58,070 --> 00:04:01,290
You have your backlog, and you are receiving your backlog items

79
00:04:01,290 --> 00:04:03,490
usually from a product owner or a customer.

80
00:04:03,490 --> 00:04:05,620
Your work flows through your value stream,

81
00:04:05,620 --> 00:04:07,840
and, in this example, it is specify,

82
00:04:07,840 --> 00:04:11,540
build, and validate. And then you deliver to your customer and users.

83
00:04:11,540 --> 00:04:14,250
So you have one upstream partner providing you with work

84
00:04:14,250 --> 00:04:17,340
items and one downstream partner you are delivering to.

85
00:04:17,340 --> 00:04:21,120
This is quite normal and typical, especially in smaller organizations.

86
00:04:21,120 --> 00:04:23,970
Now, let's see what it looks like in larger organizations

87
00:04:23,970 --> 00:04:29,460
with multiple interconnected development teams. With multiple

88
00:04:29,460 --> 00:04:31,710
teams, it gets more complicated.

89
00:04:31,710 --> 00:04:35,590
You have your backlog and your value stream represented by the blue arrow.

90
00:04:35,590 --> 00:04:36,530
As you can see,

91
00:04:36,530 --> 00:04:39,210
there are now multiple sources of upstream partners

92
00:04:39,210 --> 00:04:41,610
delivering new backlog items to you.

93
00:04:41,610 --> 00:04:46,640
And lastly, your value stream is delivering to four other downstream partners.

94
00:04:46,640 --> 00:04:50,140
So does everything coming into your backlog come in just when you need it?

95
00:04:50,140 --> 00:04:53,940
And does everything delivered go to each of the four or just some

96
00:04:53,940 --> 00:04:56,550
deliverables? Or to just some downstream partners?

97
00:04:56,550 --> 00:04:58,800
And did you give it to them just when they needed it?

98
00:04:58,800 --> 00:05:00,270
Yeah, good questions.

99
00:05:00,270 --> 00:05:05,000
Things can get complicated. Let's see how we can make it a little better.

