WEBVTT
1
00:00:01.140 --> 00:00:04.220
Let me show you a short list of version control system products on

2
00:00:04.220 --> 00:00:09.710
the market today and summarize the highlights of this module. Listed

3
00:00:09.710 --> 00:00:11.810
here are several wellâ€‘known products.

4
00:00:11.810 --> 00:00:16.290
I won't endorse any particular tool, but here is a starter list to get you going.

5
00:00:16.290 --> 00:00:19.710
Every version control system has its own approach to code branching and

6
00:00:19.710 --> 00:00:22.140
merging and all the other features we have talked about today.

7
00:00:22.140 --> 00:00:25.900
So document your requirements, Kanban and version control policies,

8
00:00:25.900 --> 00:00:27.260
and you're done rules.

9
00:00:27.260 --> 00:00:30.700
Then you can validate the tool's features against your requirements with

10
00:00:30.700 --> 00:00:35.740
a pilot, and if you can, try it before you buy it.

11
00:00:35.740 --> 00:00:39.540
Here's a quote, which seems so perfect for version control systems.

12
00:00:39.540 --> 00:00:42.570
"Cultivate the route; the leaves and branches will take

13
00:00:42.570 --> 00:00:44.670
care of themselves.", by Confucius.

14
00:00:44.670 --> 00:00:47.590
You probably didn't know he practiced Kanban with version control, right?

15
00:00:47.590 --> 00:00:51.850
But what this quote is saying is that the root, or the mainline, is absolutely

16
00:00:51.850 --> 00:00:55.830
essential to keep pristine and perfect at all times and that you should be

17
00:00:55.830 --> 00:00:58.200
able to make a build from that root or mainline,

18
00:00:58.200 --> 00:01:03.840
and it would be exactly what's in production today.

19
00:01:03.840 --> 00:01:07.120
Here are the key learning objectives for the module Implement

20
00:01:07.120 --> 00:01:10.170
Continuous Integration to Increase Customer Value.

21
00:01:10.170 --> 00:01:13.040
Continuous integration is a best practice in software

22
00:01:13.040 --> 00:01:16.430
engineering to integrate your completed and tested code back

23
00:01:16.430 --> 00:01:19.000
into a repository as often as necessary.

24
00:01:19.000 --> 00:01:22.520
The keyword here is continuous. Areas of workflow friction.

25
00:01:22.520 --> 00:01:26.070
We want to use continuous integration to reduce or even

26
00:01:26.070 --> 00:01:28.070
eliminate workflow friction points.

27
00:01:28.070 --> 00:01:30.740
These points are not bad things per se, and in fact,

28
00:01:30.740 --> 00:01:33.990
the Kanban done rules are there for a reason to ensure

29
00:01:33.990 --> 00:01:35.840
that quality work is moving forward.

30
00:01:35.840 --> 00:01:38.580
But by also using continuous integration features,

31
00:01:38.580 --> 00:01:41.370
such as automated test, commits, branching, and merging,

32
00:01:41.370 --> 00:01:45.620
you will reduce or eliminate the friction and will smooth out the value stream,

33
00:01:45.620 --> 00:01:48.540
thus improving quality and throughput even more.

34
00:01:48.540 --> 00:01:50.130
The power of version control.

35
00:01:50.130 --> 00:01:53.440
Remember, no version control, no continuous integration.

36
00:01:53.440 --> 00:01:56.200
It is virtually impossible for me to think of anyone

37
00:01:56.200 --> 00:01:57.980
not using a version control system,

38
00:01:57.980 --> 00:02:02.190
even if you are a team of one. Merging down and up. With merging down,

39
00:02:02.190 --> 00:02:05.790
you want to do that as much as possible so you are in sync with your

40
00:02:05.790 --> 00:02:08.060
parent branch. And when code is complete,

41
00:02:08.060 --> 00:02:12.230
then issue a pull request so that the parent branch's owner will merge back

42
00:02:12.230 --> 00:02:15.080
into the parent the code that you have finished. Bottom line,

43
00:02:15.080 --> 00:02:19.820
have the process and policies in place that your team agrees to and will follow.

44
00:02:19.820 --> 00:02:22.260
There are a ton of benefits around branching and merging,

45
00:02:22.260 --> 00:02:24.840
such as concurrent development, source code management,

46
00:02:24.840 --> 00:02:27.850
history tracking, and whole bunch of other stuff as well.

47
00:02:27.850 --> 00:02:31.790
Version control and the kanban board. Modify your board to reflect

48
00:02:31.790 --> 00:02:34.120
your interaction with version control systems.

49
00:02:34.120 --> 00:02:36.880
I gave you some examples of how you might morph your board.

50
00:02:36.880 --> 00:02:40.160
Remember, you have the freedom to lay it out how you see fit

51
00:02:40.160 --> 00:02:42.070
and let it evolve as needed.

52
00:02:42.070 --> 00:02:45.720
This is the beauty of Kanban. Using continuous integration for

53
00:02:45.720 --> 00:02:48.700
automated testing. You must have automated testing.

54
00:02:48.700 --> 00:02:51.870
This will find and eliminate bugs from being pushed out to

55
00:02:51.870 --> 00:02:53.790
the customer in the production environment.

56
00:02:53.790 --> 00:02:58.440
Better quality, happier customers. Commit to commits. Improve quality

57
00:02:58.440 --> 00:03:01.140
with frequent commits. By committing frequently,

58
00:03:01.140 --> 00:03:03.790
say daily, commit events are triggered,

59
00:03:03.790 --> 00:03:06.230
like running automated tests or other actions.

60
00:03:06.230 --> 00:03:07.740
This detects errors sooner,

61
00:03:07.740 --> 00:03:15.030
improves quality, and ultimately makes merging down or up easier. Up next is

62
00:03:15.030 --> 00:03:18.500
Implement Continuous Deployment to Increase Customer Value.

63
00:03:18.500 --> 00:03:21.400
It's basically continuous integration part one and

64
00:03:21.400 --> 00:03:26.000
then continuous deployment part two. We'll see you there.

