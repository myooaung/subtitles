1
00:00:01,040 --> 00:00:03,020
Areas of Workflow Friction.

2
00:00:03,020 --> 00:00:06,420
That is where in our workflow we may find the greatest

3
00:00:06,420 --> 00:00:10,740
resistance to a smooth flow of work.

4
00:00:10,740 --> 00:00:14,430
There are two big areas of friction within our continuous workflow.

5
00:00:14,430 --> 00:00:18,710
The first is between implement and validate. The pull criteria for an

6
00:00:18,710 --> 00:00:22,070
implement step is if the implement done rules are satisfied,

7
00:00:22,070 --> 00:00:25,890
and only if they are satisfied can the resource, the person, in

8
00:00:25,890 --> 00:00:29,790
the validate step pull the work forward. As an example, a done

9
00:00:29,790 --> 00:00:33,650
rule may be the feature is coded, unit tested, and meets all of

10
00:00:33,650 --> 00:00:35,010
the feature requirements.

11
00:00:35,010 --> 00:00:38,730
The second point of friction is between validate and deliver. The pull

12
00:00:38,730 --> 00:00:41,920
criteria for the validate step is that the validate done rules are

13
00:00:41,920 --> 00:00:45,590
satisfied, and only if they are satisfied can the resource in the

14
00:00:45,590 --> 00:00:47,570
deliver step pull the work forward,

15
00:00:47,570 --> 00:00:51,490
or typical for a deliver step is that the work is simply placed in the

16
00:00:51,490 --> 00:00:55,300
deliver column waiting for our downstream partner to pull forward. As an

17
00:00:55,300 --> 00:00:59,880
example, a done rule is the entire suite of test cases has been completed by

18
00:00:59,880 --> 00:01:02,920
the QA engineer and were 100% successful.

19
00:01:02,920 --> 00:01:06,140
A quick note. Done rules may be much, much more comprehensive.

20
00:01:06,140 --> 00:01:10,740
These are just examples. Though the Kanban done rules are an absolute

21
00:01:10,740 --> 00:01:14,490
requirement of a high‑quality Kanban value stream and they help

22
00:01:14,490 --> 00:01:17,750
mitigate issues and improve quality between the handoff from implement

23
00:01:17,750 --> 00:01:21,360
to validate and from validate to deliver, there can be a lot of

24
00:01:21,360 --> 00:01:26,340
unnecessary churn, issues, bugs, etc. between those two pairs shown.

25
00:01:26,340 --> 00:01:30,340
Therefore, here is where continuous integration will play a pivotal role.

26
00:01:30,340 --> 00:01:33,140
Continuous integration will reduce or eliminate the

27
00:01:33,140 --> 00:01:35,750
friction and will smooth out the value stream,

28
00:01:35,750 --> 00:01:37,940
thus improving quality and throughput.

29
00:01:37,940 --> 00:01:40,170
You may have heard of the term moving left.

30
00:01:40,170 --> 00:01:41,480
Basically, in this example,

31
00:01:41,480 --> 00:01:45,960
it means can we do some validation in the implement step, and can we do some of

32
00:01:45,960 --> 00:01:50,870
the delivery functions in the validate step? So we're moving left, or upstream,

33
00:01:50,870 --> 00:01:53,520
through the value stream and determining things,

34
00:01:53,520 --> 00:01:54,420
finding things,

35
00:01:54,420 --> 00:02:00,160
correcting things earlier rather than later. Deliver to whom?

36
00:02:00,160 --> 00:02:03,100
That is, when you have completed the validate done rules,

37
00:02:03,100 --> 00:02:05,350
where does the completed code go?

38
00:02:05,350 --> 00:02:06,700
In small companies,

39
00:02:06,700 --> 00:02:09,720
the validate or deliver step was where the devs made the

40
00:02:09,720 --> 00:02:13,530
builds, ran any scripts, and directly put into production the

41
00:02:13,530 --> 00:02:15,390
delivery, that is the new release.

42
00:02:15,390 --> 00:02:15,940
Great.

43
00:02:15,940 --> 00:02:19,580
That's how work has been done for many years in many organizations,

44
00:02:19,580 --> 00:02:20,430
including mine.

45
00:02:20,430 --> 00:02:24,410
So in this case, the devs actually deliver, well, to themselves.

46
00:02:24,410 --> 00:02:25,760
In larger companies,

47
00:02:25,760 --> 00:02:29,590
the code is handed off or thrown over the wall to operations for

48
00:02:29,590 --> 00:02:33,370
deployment to production and possibly where operations continues to

49
00:02:33,370 --> 00:02:35,150
maintain the codebase going forward.

50
00:02:35,150 --> 00:02:37,460
But every company is different, so in this case,

51
00:02:37,460 --> 00:02:40,840
the devs deliver to the operations team, or the ops team.

52
00:02:40,840 --> 00:02:44,970
The handoffs consisted of a package of stuff like DLLs and

53
00:02:44,970 --> 00:02:48,240
scripts and databases and ZIP files, instructions, you name

54
00:02:48,240 --> 00:02:50,180
it, and were usually a bit crude,

55
00:02:50,180 --> 00:02:53,870
error‑prone, and resulted in breakage and more bugs and,

56
00:02:53,870 --> 00:02:55,750
worse, unhappy customers.

57
00:02:55,750 --> 00:02:57,740
In several of my consulting engagements,

58
00:02:57,740 --> 00:03:02,280
I saw much breakage, reduced quality, and even animosity between teams.

59
00:03:02,280 --> 00:03:05,200
So if we are just crushing it on the Kanban side of things,

60
00:03:05,200 --> 00:03:08,040
our continuous flow has now been disrupted.

61
00:03:08,040 --> 00:03:09,430
So how do we solve that?

62
00:03:09,430 --> 00:03:11,980
Well, yes, you guessed it, continuous integration.

63
00:03:11,980 --> 00:03:15,010
So whether you are delivering to yourself, or especially

64
00:03:15,010 --> 00:03:16,860
if you are delivering to another team,

65
00:03:16,860 --> 00:03:22,140
you want a rock‑solid continuous integration approach.

66
00:03:22,140 --> 00:03:25,690
So what we need is at least the following features or

67
00:03:25,690 --> 00:03:28,550
capabilities to support continuous integration.

68
00:03:28,550 --> 00:03:31,120
First, you need to support automated testing.

69
00:03:31,120 --> 00:03:34,210
This will find and eliminate bugs from being pushed out to

70
00:03:34,210 --> 00:03:35,980
the customer in the production environment.

71
00:03:35,980 --> 00:03:38,480
When you find them early in the implement step,

72
00:03:38,480 --> 00:03:41,540
the quality is better, and the customer is more satisfied.

73
00:03:41,540 --> 00:03:43,840
You will need a repository for the source code,

74
00:03:43,840 --> 00:03:47,760
a repo for short, but also known as a version control system, like

75
00:03:47,760 --> 00:03:51,680
Git. And developers must be mindful to merge changes down into their

76
00:03:51,680 --> 00:03:55,030
branches and merge their changes back into the target branch of the

77
00:03:55,030 --> 00:03:59,300
codebase as frequently as your team has decided as a group. And for

78
00:03:59,300 --> 00:04:00,840
me and my group, it's daily.

79
00:04:00,840 --> 00:04:02,440
So at the end of every day,

80
00:04:02,440 --> 00:04:06,550
your project could have a perfect build package, whether it's deployed or not.

81
00:04:06,550 --> 00:04:11,840
That is the general idea of continuous integration.

82
00:04:11,840 --> 00:04:14,300
Continuous integration is lean.

83
00:04:14,300 --> 00:04:18,660
Kanban is a fantastic enabler of lean development, and with CI, continuous

84
00:04:18,660 --> 00:04:22,240
integration, we can better continue a lean process further through the

85
00:04:22,240 --> 00:04:26,180
entire development lifecycle. Kanban's core philosophy is providing

86
00:04:26,180 --> 00:04:30,450
continuous value to the customer. Perfect. Prior to making better tools,

87
00:04:30,450 --> 00:04:34,220
making builds could be a lot of work and was error‑prone since it was

88
00:04:34,220 --> 00:04:38,290
mostly a manual process and therefore not done as often and usually done

89
00:04:38,290 --> 00:04:39,440
right before deployment.

90
00:04:39,440 --> 00:04:44,080
So as tools became more sophisticated, it was a perfect match made in heaven.

91
00:04:44,080 --> 00:04:45,970
And how can you make all this happen?

92
00:04:45,970 --> 00:04:54,000
Well, there are a ton of tools out there to help us. So now let's talk about a specific class of tool, a version control system.

