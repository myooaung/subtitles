1
00:00:01,140 --> 00:00:03,150
Now that we have a backlog in place,

2
00:00:03,150 --> 00:00:09,040
let's move on to comparing backlog planning and work selection.

3
00:00:09,040 --> 00:00:12,940
Now let's look at a bird's‑eye view of agile project planning. All agile

4
00:00:12,940 --> 00:00:16,600
projects start with agile project planning, of course. This is conducted

5
00:00:16,600 --> 00:00:18,890
with the product owner and the dev lead typically,

6
00:00:18,890 --> 00:00:21,320
and there may be other subject matter experts as well.

7
00:00:21,320 --> 00:00:25,280
Also, the product owner is bringing in product requirements, lists of items,

8
00:00:25,280 --> 00:00:27,840
ideas, concepts, and a draft backlog.

9
00:00:27,840 --> 00:00:31,430
And yes, more times than not, it can be a bit unstructured and fuzzy.

10
00:00:31,430 --> 00:00:33,950
The initial product backlog may contain features,

11
00:00:33,950 --> 00:00:37,810
user stories, and epics of various chunkiness, since we are just starting

12
00:00:37,810 --> 00:00:42,490
out. The backlog features may be broken down to 1, 2 or several releases

13
00:00:42,490 --> 00:00:45,790
that would each describe the feature set to be delivered in business

14
00:00:45,790 --> 00:00:49,530
terminology, so that management and executive leadership can relate and

15
00:00:49,530 --> 00:00:51,460
understand how it will help them.

16
00:00:51,460 --> 00:00:56,320
This is basically the release plan. Along with each release may be target dates,

17
00:00:56,320 --> 00:00:57,240
though optional,

18
00:00:57,240 --> 00:01:01,040
very rough, and certainly would change based on the cadence and delivery.

19
00:01:01,040 --> 00:01:03,770
Yes, pure scrummers will say no dates.

20
00:01:03,770 --> 00:01:08,580
Yes, I get it, but also understand you may have senior leadership wanting dates,

21
00:01:08,580 --> 00:01:12,140
and I will do my best to give them dates, as you should too.

22
00:01:12,140 --> 00:01:14,430
You will now identify the features and stories that

23
00:01:14,430 --> 00:01:16,170
you'll want for each release.

24
00:01:16,170 --> 00:01:19,700
So the releases with their initially assigned features and stories,

25
00:01:19,700 --> 00:01:23,670
along with other project artifacts, will make up the project roadmap

26
00:01:23,670 --> 00:01:27,520
and release goals. Now, nothing's in concrete with agile/scrum, and

27
00:01:27,520 --> 00:01:28,720
features will move around,

28
00:01:28,720 --> 00:01:31,870
be eliminated or brand‑new ones appear, as they should.

29
00:01:31,870 --> 00:01:37,040
Okay, now let's go a little deeper into release plans.

30
00:01:37,040 --> 00:01:39,970
So now you might take all of the features targeted for Release

31
00:01:39,970 --> 00:01:42,880
1 and plan your sprints for that release.

32
00:01:42,880 --> 00:01:45,700
In order to do sprint planning, you need the product owner,

33
00:01:45,700 --> 00:01:49,200
scrum master, the dev lead, and maybe other members of the dev team.

34
00:01:49,200 --> 00:01:52,120
What will feed into sprint planning may be a couple of things.

35
00:01:52,120 --> 00:01:55,280
Here, I am showing that sprint planning is for a sprint within

36
00:01:55,280 --> 00:01:57,750
Release 3 and its associated backlog.

37
00:01:57,750 --> 00:01:59,810
If you are not using the release planning model,

38
00:01:59,810 --> 00:02:03,250
you would have the remaining backlog as input into the sprint planning.

39
00:02:03,250 --> 00:02:06,730
Next, the outcomes of the sprint planning are the sprint plan,

40
00:02:06,730 --> 00:02:09,250
which is focused on the next sprint within this release,

41
00:02:09,250 --> 00:02:11,260
and also what backlog candidates will be in the

42
00:02:11,260 --> 00:02:13,000
subsequent sprints in this release.

43
00:02:13,000 --> 00:02:15,710
Refined user stories, we may need further discussion on a

44
00:02:15,710 --> 00:02:17,340
user story to better understand it.

45
00:02:17,340 --> 00:02:20,420
Refined estimates and priorities, based on those refined user

46
00:02:20,420 --> 00:02:23,540
stories and discussions, we can improve the estimate and reset

47
00:02:23,540 --> 00:02:25,510
the priority we want to assign to it.

48
00:02:25,510 --> 00:02:28,810
Sprint backlogs, in this example we have three sprints and have

49
00:02:28,810 --> 00:02:32,460
determined which user stories are assigned to which sprint. Again, this

50
00:02:32,460 --> 00:02:35,200
may change based on the outcomes of the sprint demos,

51
00:02:35,200 --> 00:02:36,840
reviews, and retrospectives.

52
00:02:36,840 --> 00:02:37,640
For example,

53
00:02:37,640 --> 00:02:40,220
I am showing three planned sprints in this release,

54
00:02:40,220 --> 00:02:42,540
and associated backlogs for each.

55
00:02:42,540 --> 00:02:45,290
Please note, for the next sprint planning, let's say in two

56
00:02:45,290 --> 00:02:48,980
weeks, we will only have Sprint 2 and Sprint 3, since Sprint

57
00:02:48,980 --> 00:02:51,440
1 of this release is complete, and if not,

58
00:02:51,440 --> 00:02:55,430
we will decide what to do with the uncompleted user stories of Sprint 1.

59
00:02:55,430 --> 00:02:57,700
Since we are using timeboxing in this example,

60
00:02:57,700 --> 00:03:00,710
the schedule is set and the scope is fluid.

61
00:03:00,710 --> 00:03:03,140
Each sprint, for example, is going to be two weeks.

62
00:03:03,140 --> 00:03:06,020
Okay, now that's the general approach to sprint planning.

63
00:03:06,020 --> 00:03:10,850
Now let's switch over to Kanban. So you can see there is quite

64
00:03:10,850 --> 00:03:12,650
a bit of work in the agile/scrum approach.

65
00:03:12,650 --> 00:03:14,590
Hey, I'm not knocking it at all.

66
00:03:14,590 --> 00:03:18,670
I think it is one of the best system development approaches around, but to me,

67
00:03:18,670 --> 00:03:21,230
Kanban is more lightweight and more flexible,

68
00:03:21,230 --> 00:03:24,140
so it might be the right fit for you in some circumstances.

69
00:03:24,140 --> 00:03:27,210
Okay, items are pulled from the backlog in the order needed.

70
00:03:27,210 --> 00:03:29,670
The product owner or customer still provides inputs,

71
00:03:29,670 --> 00:03:31,880
of course. And this happens in no particular

72
00:03:31,880 --> 00:03:33,870
frequency, but may be reviewed daily,

73
00:03:33,870 --> 00:03:36,690
and it is not tied to a two or three‑week event.

74
00:03:36,690 --> 00:03:40,330
There are no sprints, simply a continuous flow of work.

75
00:03:40,330 --> 00:03:44,620
So, no sprint planning and no sprints. Now, don't forget the backlog

76
00:03:44,620 --> 00:03:48,320
can contain work items that pertain to planning, requirements

77
00:03:48,320 --> 00:03:50,640
gathering, estimates or whatever you want.

78
00:03:50,640 --> 00:03:54,920
So some high‑level requirements planning must take place to some degree, so

79
00:03:54,920 --> 00:03:58,870
begin with backlog planning work items. That is, items in the backlog could

80
00:03:58,870 --> 00:04:01,320
be project planning, requirements planning,

81
00:04:01,320 --> 00:04:04,350
determining the scope of the project or whatever you need to

82
00:04:04,350 --> 00:04:07,200
prepare and get ready to actually develop software.

83
00:04:07,200 --> 00:04:10,500
The Kanban approach allows you to be extremely flexible.

84
00:04:10,500 --> 00:04:12,300
Does it seem pretty easy and straightforward?

85
00:04:12,300 --> 00:04:17,970
Well, it is. Okay, let's take a look at a Kanban backlog.

86
00:04:17,970 --> 00:04:20,360
Now it may look something like this initially. We're going to

87
00:04:20,360 --> 00:04:23,250
rearrange our work items into priority sections.

88
00:04:23,250 --> 00:04:25,500
Here's our priority items for number 1,

89
00:04:25,500 --> 00:04:28,780
here are our priority 2 items, here are our priority 3

90
00:04:28,780 --> 00:04:31,230
items, and the rest are nice to haves.

91
00:04:31,230 --> 00:04:35,160
Then all the work is pulled from the priority 1 section of the backlog

92
00:04:35,160 --> 00:04:38,150
into the work in progress value stream. At each standup,

93
00:04:38,150 --> 00:04:40,850
the work item cards may be moved between priorities as

94
00:04:40,850 --> 00:04:42,730
the team feels it is appropriate.

95
00:04:42,730 --> 00:04:47,490
Now please note, a Kanban backlog can be by priority as shown, by type of

96
00:04:47,490 --> 00:04:51,500
work item or by any organization of the backlog that works best in the

97
00:04:51,500 --> 00:04:53,920
context of the business problem you are solving.

98
00:04:53,920 --> 00:04:56,240
There are no hard and fast rules.

99
00:04:56,240 --> 00:04:59,540
Be creative.

100
00:04:59,540 --> 00:05:02,360
Let's recap backlog planning and work selection.

101
00:05:02,360 --> 00:05:04,460
Backlog organization is similar,

102
00:05:04,460 --> 00:05:07,570
so the process by which backlogs get populated are similar,

103
00:05:07,570 --> 00:05:12,140
and the process or practices on how to organize a backlog are similar as well.

104
00:05:12,140 --> 00:05:14,030
Backlog planning, though, is very different.

105
00:05:14,030 --> 00:05:16,120
With agile/scrum, you have project planning,

106
00:05:16,120 --> 00:05:18,020
release planning, and sprint planning.

107
00:05:18,020 --> 00:05:21,140
Many shops skip the release planning and just have sprint planning.

108
00:05:21,140 --> 00:05:24,160
And with Kanban, your planning is just done every day during

109
00:05:24,160 --> 00:05:27,020
your standups based on the needs of the business and how best

110
00:05:27,020 --> 00:05:28,720
to add value to the business.

111
00:05:28,720 --> 00:05:30,430
Work selection is a bit different,

112
00:05:30,430 --> 00:05:34,220
since agile/scrum has all of the project, release, and sprint planning as

113
00:05:34,220 --> 00:05:38,160
context for the work selection. And the pulling of work forward is about

114
00:05:38,160 --> 00:05:41,460
the same, but remember, with sprints the work that is pulled forward is

115
00:05:41,460 --> 00:05:49,000
sometimes locked into a sprint, whereas in Kanban we can make much quicker adjustments every single day.

