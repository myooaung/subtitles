1
00:00:00,940 --> 00:00:04,340
Now let's move on to buffers.

2
00:00:04,340 --> 00:00:07,110
Now let's talk about buffers in Kanban. In our running

3
00:00:07,110 --> 00:00:10,620
example, in the DONE swim lanes where the gray arrows are

4
00:00:10,620 --> 00:00:12,840
pointing are also known as buffers,

5
00:00:12,840 --> 00:00:16,540
and controlling the quantity of items in the buffer is important.

6
00:00:16,540 --> 00:00:19,890
Too many work items in a buffer is a waste, because the workflow

7
00:00:19,890 --> 00:00:22,550
for those items is paused, and as we all know,

8
00:00:22,550 --> 00:00:24,840
waste is what Kanban wants to eliminate.

9
00:00:24,840 --> 00:00:27,200
Still, buffers are important to have,

10
00:00:27,200 --> 00:00:30,230
so that the work is immediately available when the next

11
00:00:30,230 --> 00:00:33,640
downstream resource is free to pull more work forward.

12
00:00:33,640 --> 00:00:35,750
So, what is a perfect buffer size?

13
00:00:35,750 --> 00:00:35,980
Well,

14
00:00:35,980 --> 00:00:40,910
actually 0, but 0 would only work if a resource was always available

15
00:00:40,910 --> 00:00:43,690
the split second a work item hit the DONE buffer.

16
00:00:43,690 --> 00:00:46,840
So in order to ensure there is work for the downstream resource,

17
00:00:46,840 --> 00:00:49,220
having just the right amount of work items in a buffer

18
00:00:49,220 --> 00:00:53,840
makes perfect sense, just not too many.

19
00:00:53,840 --> 00:00:57,060
The concept of a buffer in scrum isn't like Kanban at all.

20
00:00:57,060 --> 00:01:00,540
Instead, buffer might represent extra time to do something,

21
00:01:00,540 --> 00:01:02,440
and in the scrum world, it's slack.

22
00:01:02,440 --> 00:01:05,410
Slack is time earmarked within an iteration or sprint that

23
00:01:05,410 --> 00:01:08,070
will be used for unanticipated activities.

24
00:01:08,070 --> 00:01:11,380
Basically, you are setting aside time in reserve, like a buffer.

25
00:01:11,380 --> 00:01:14,340
I have always used the term slack, and maybe you have to.

26
00:01:14,340 --> 00:01:16,270
The term buffer is used in agile/scrum,

27
00:01:16,270 --> 00:01:19,330
which is also a bucket of capacity or time for any

28
00:01:19,330 --> 00:01:21,690
interruptions you may encounter in a sprint.

29
00:01:21,690 --> 00:01:25,440
So let's say your team's velocity is 40 points, then we run 35

30
00:01:25,440 --> 00:01:29,290
point sprints with 5 points of slack or buffer for those just in

31
00:01:29,290 --> 00:01:31,610
case moments that we all know we will have.

32
00:01:31,610 --> 00:01:35,100
If your sprint is planned for 40 story points and each person on a

33
00:01:35,100 --> 00:01:39,010
four‑person team has signed up for 10 points, that leaves you no room or

34
00:01:39,010 --> 00:01:43,040
margin for any issues at all, likely not a wise move. Though we look to the

35
00:01:43,040 --> 00:01:45,840
sprint as uninterruptible, theoretically,

36
00:01:45,840 --> 00:01:49,520
things can happen, so only by contracting for 35 points

37
00:01:49,520 --> 00:01:51,540
does this allow a 5‑point buffer.

38
00:01:51,540 --> 00:01:54,550
You can see the term buffer in agile/scrum is quite

39
00:01:54,550 --> 00:01:58,740
different than what it means in Kanban.

40
00:01:58,740 --> 00:02:01,960
Let's see how the concept of buffers differ. Let's do Kanban first.

41
00:02:01,960 --> 00:02:03,140
When work is completed,

42
00:02:03,140 --> 00:02:05,930
it is placed in the done column. When the next step has a free

43
00:02:05,930 --> 00:02:08,110
resource, the done work is pulled forward.

44
00:02:08,110 --> 00:02:11,500
Buffers only contain completed work ready for the next step.

45
00:02:11,500 --> 00:02:13,390
With agile, there is no similar concept.

46
00:02:13,390 --> 00:02:15,790
The buffer of work items is basically the backlog,

47
00:02:15,790 --> 00:02:20,040
whereas the buffers in Kanban are in the done columns of each workflow step.

48
00:02:20,040 --> 00:02:22,420
Buffer and slack are, well, basically the same.

49
00:02:22,420 --> 00:02:26,800
Now, one more way to look at it, a backlog, whether scrum or Kanban, is a buffer,

50
00:02:26,800 --> 00:02:29,510
since it is an accumulation of work just sitting there

51
00:02:29,510 --> 00:02:34,220
waiting. Let's recap workflow constraints.

52
00:02:34,220 --> 00:02:35,530
Both have bottlenecks,

53
00:02:35,530 --> 00:02:38,810
and they mean the same thing. Kanban has better visibility,

54
00:02:38,810 --> 00:02:41,760
though, into finding them and remediating them.

55
00:02:41,760 --> 00:02:44,740
Blockers are the same for Kanban or agile too. They are

56
00:02:44,740 --> 00:02:46,810
more easily handled in Kanban, that is,

57
00:02:46,810 --> 00:02:50,100
it is a cleaner process to me. Buffers mean totally different

58
00:02:50,100 --> 00:02:57,000
things. For Kanban, they are staging areas for work, and for scrum it's another word for slack.

