WEBVTT
1
00:00:01.100 --> 00:00:04.150
In the previous module, we focused on continuous integration,

2
00:00:04.150 --> 00:00:06.960
and now we will transition to continuous deployment.

3
00:00:06.960 --> 00:00:10.450
You might also hear the term continuous delivery, but as you can tell,

4
00:00:10.450 --> 00:00:13.240
I have used the term delivery as the last step in the

5
00:00:13.240 --> 00:00:16.250
continuous integration flow, but they seem to be somewhat

6
00:00:16.250 --> 00:00:18.610
interchangeable in industry and the literature.

7
00:00:18.610 --> 00:00:19.960
Semantics aside,

8
00:00:19.960 --> 00:00:22.640
as long as you know what they represent and mean and you

9
00:00:22.640 --> 00:00:28.640
are consistent with you and your team, that is what's important.

10
00:00:28.640 --> 00:00:31.330
Here is a quote that I'm using as a definition of sorts

11
00:00:31.330 --> 00:00:33.470
for the term continuous deployment.

12
00:00:33.470 --> 00:00:34.370
Essentially,

13
00:00:34.370 --> 00:00:39.180
it is the practice of releasing every good build to users by Jez Humble,

14
00:00:39.180 --> 00:00:42.810
that is, the users, your customers have access to the software,

15
00:00:42.810 --> 00:00:44.780
and hence it has been deployed.

16
00:00:44.780 --> 00:00:50.110
Whereas when I use the term deliver, it means it is just ready to be deployed.

17
00:00:50.110 --> 00:00:52.410
Subtle, but an important distinction.

18
00:00:52.410 --> 00:00:55.820
So continuous deployment means moving build to releases to production

19
00:00:55.820 --> 00:00:59.870
automatically conditional on the successful completion of all the necessary

20
00:00:59.870 --> 00:01:04.110
testing and checks. Features and bug fixes go live to users as soon as

21
00:01:04.110 --> 00:01:10.210
they're ready without any manual intervention. By implementing both

22
00:01:10.210 --> 00:01:14.260
continuous integration and continuous deployment, you not only decrease

23
00:01:14.260 --> 00:01:16.210
risk and catch bugs more early,

24
00:01:16.210 --> 00:01:19.230
but also move more quickly to solid functioning

25
00:01:19.230 --> 00:01:21.550
software in the hands of the users, therefore,

26
00:01:21.550 --> 00:01:25.640
increasing customer value.

27
00:01:25.640 --> 00:01:30.100
What's a release? I would like to define and clarify how I am using the term

28
00:01:30.100 --> 00:01:33.200
release as this will help us as we move through this module.

29
00:01:33.200 --> 00:01:36.880
It's the entire collection of artifacts required to run a system and

30
00:01:36.880 --> 00:01:40.710
application or a deliverable, compiled code and required scripts,

31
00:01:40.710 --> 00:01:44.160
files, endpoints, and databases, documentation, yep,

32
00:01:44.160 --> 00:01:45.170
I know you don't like to write it,

33
00:01:45.170 --> 00:01:48.040
but it should be there as well, test plans and test cases,

34
00:01:48.040 --> 00:01:50.380
specifications, installation instructions,

35
00:01:50.380 --> 00:01:52.470
operate and monitoring instructions.

36
00:01:52.470 --> 00:01:56.350
Hey, maybe I missed something and I probably have, but you get the idea.

37
00:01:56.350 --> 00:01:59.780
Everything including the kitchen sink that is needed to successfully run an

38
00:01:59.780 --> 00:02:03.660
application, service, or component is included in a release.

39
00:02:03.660 --> 00:02:06.310
Now you might use a different term in your organization,

40
00:02:06.310 --> 00:02:09.230
which is fine, as long as you define it clearly and

41
00:02:09.230 --> 00:02:10.940
the team knows exactly what it is.

42
00:02:10.940 --> 00:02:13.100
Another example may be the term build,

43
00:02:13.100 --> 00:02:15.730
build and release are typically interchangeable,

44
00:02:15.730 --> 00:02:18.760
but I think release usually implies a special feature

45
00:02:18.760 --> 00:02:22.940
set or possibly even a milestone.

46
00:02:22.940 --> 00:02:25.370
Now, let's define delivery and deployment.

47
00:02:25.370 --> 00:02:28.080
There is a distinction and also how I will use the

48
00:02:28.080 --> 00:02:30.240
term release in the context of both.

49
00:02:30.240 --> 00:02:34.270
I am defining delivery as follows. Our value stream is complete and we

50
00:02:34.270 --> 00:02:37.000
have delivered our product to our downstream partner,

51
00:02:37.000 --> 00:02:40.200
such as customers, users, and even a Kanban downstream partner.

52
00:02:40.200 --> 00:02:44.240
Let's say our product is a release and the releases name are 4.5,

53
00:02:44.240 --> 00:02:47.560
that was the culmination of our continuous integration module,

54
00:02:47.560 --> 00:02:49.460
but no one is using our product yet,

55
00:02:49.460 --> 00:02:53.900
and we simply have delivered it to someone. I am defining deployment as follows.

56
00:02:53.900 --> 00:02:56.710
Our upstream partner for our particular release was

57
00:02:56.710 --> 00:02:59.560
delivered to us is now deployed, that is,

58
00:02:59.560 --> 00:03:03.360
we have installed it into production and it's being used.

59
00:03:03.360 --> 00:03:06.580
So if users or customers are now accessing this release,

60
00:03:06.580 --> 00:03:08.010
then it has been deployed.

61
00:03:08.010 --> 00:03:10.780
So releases, as we defined on the previous page,

62
00:03:10.780 --> 00:03:13.240
compile build with scripts and all the other artifacts,

63
00:03:13.240 --> 00:03:16.420
including documentation, is delivered in our done column,

64
00:03:16.420 --> 00:03:19.370
and then the release then can be pulled forward by our

65
00:03:19.370 --> 00:03:21.470
downstream partner to be deployed.

66
00:03:21.470 --> 00:03:24.870
Many times our downstream partner may be called production operations.

67
00:03:24.870 --> 00:03:27.690
Now these are the definitions I'm using and hopefully it'll

68
00:03:27.690 --> 00:03:29.770
help you understand the deeper concepts.

69
00:03:29.770 --> 00:03:31.850
I will try and be consistent in this course,

70
00:03:31.850 --> 00:03:33.670
though in the real world, you will likely hear

71
00:03:33.670 --> 00:03:35.790
slightly different terms and definitions.

72
00:03:35.790 --> 00:03:39.220
As long as your team understands the context of usage of these terms,

73
00:03:39.220 --> 00:03:42.130
it really doesn't matter, so long as you really understand the

74
00:03:42.130 --> 00:03:49.000
value stream and how the workflow moves through the entire pipeline from backlog to production, then you'll be fine.

