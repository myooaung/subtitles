1
00:00:01,320 --> 00:00:04,710
In the previous section, we talked about late dependencies.

2
00:00:04,710 --> 00:00:07,720
Now let's move on to how we might handle buggy dependencies.

3
00:00:07,720 --> 00:00:09,840
So what the heck is a buggy dependency?

4
00:00:09,840 --> 00:00:15,480
Let's find out. Unstable or buggy dependencies.

5
00:00:15,480 --> 00:00:19,730
So when an upstream use case or service was delivered to you into your

6
00:00:19,730 --> 00:00:24,340
backlog, and is unstable, buggy or has quality issues,

7
00:00:24,340 --> 00:00:27,290
that's what a buggy dependency is.

8
00:00:27,290 --> 00:00:31,480
Incorporating unstable upstream work items into your work stream

9
00:00:31,480 --> 00:00:34,970
will certainly have major implications on your quality and

10
00:00:34,970 --> 00:00:37,830
timeliness to your downstream partners as well.

11
00:00:37,830 --> 00:00:41,430
Let's see how we might mitigate that.

12
00:00:41,430 --> 00:00:46,110
If you are informed by an upstream partner that a use case or service is buggy

13
00:00:46,110 --> 00:00:49,220
or if you determine it yourself and cannot move forward,

14
00:00:49,220 --> 00:00:51,810
treat the situation like a late dependency.

15
00:00:51,810 --> 00:00:56,340
You are not responsible for how another team determines its work items as done,

16
00:00:56,340 --> 00:01:00,430
tested or complete, but you should share with them how Kanban defines and

17
00:01:00,430 --> 00:01:04,860
uses done rules to ensure the highest quality, that could help, or simply

18
00:01:04,860 --> 00:01:07,240
work with them on how to improve their quality.

19
00:01:07,240 --> 00:01:09,130
That will be time well spent.

20
00:01:09,130 --> 00:01:11,910
If you want to know more about done rules in a value stream,

21
00:01:11,910 --> 00:01:14,370
please check out my course, Kanban for Agile/Scrum

22
00:01:14,370 --> 00:01:17,040
Practitioners, but let me give you a quick review.

23
00:01:17,040 --> 00:01:20,140
So let's first talk about sharing done rules with your upstream

24
00:01:20,140 --> 00:01:23,220
partner, and then I'll show you another example of working with

25
00:01:23,220 --> 00:01:27,840
buggy dependencies in your Kanban board.

26
00:01:27,840 --> 00:01:32,410
It's very important to know what done means in Kandan, so what done does mean

27
00:01:32,410 --> 00:01:36,830
is work in progress is done when the done rule is satisfied,

28
00:01:36,830 --> 00:01:41,080
satisfies the definition of done for that step, and again,

29
00:01:41,080 --> 00:01:43,670
the definition of done is, in fact, the done rule.

30
00:01:43,670 --> 00:01:45,830
Now it sounds kind of silly the way I'm saying it,

31
00:01:45,830 --> 00:01:50,370
but no work is done, no work is complete until all items listed for

32
00:01:50,370 --> 00:01:54,630
that step in the done rules is satisfactorily completed. And done

33
00:01:54,630 --> 00:01:57,190
rules equal the pull criteria, in other words,

34
00:01:57,190 --> 00:02:01,310
work will not be pulled down the value stream by a resource unless

35
00:02:01,310 --> 00:02:04,960
the done rules are complete. And two things cause those things to

36
00:02:04,960 --> 00:02:07,950
be done. One is the person doing the work say in the implement

37
00:02:07,950 --> 00:02:08,940
step and say they're done,

38
00:02:08,940 --> 00:02:12,130
but also, before it's pulled forward in the verify step, that

39
00:02:12,130 --> 00:02:14,610
resource has to say, I agree they're done.

40
00:02:14,610 --> 00:02:16,280
If not, there's a discussion.

41
00:02:16,280 --> 00:02:19,480
This is the reason why we have two columns per step, at a minimum,

42
00:02:19,480 --> 00:02:19,940
of course,

43
00:02:19,940 --> 00:02:25,050
so it makes it absolutely clear what is work in progress versus what is done.

44
00:02:25,050 --> 00:02:27,040
If it's in the WIP column,

45
00:02:27,040 --> 00:02:29,950
don't touch it, it's being worked, and if it goes to the DONE

46
00:02:29,950 --> 00:02:33,160
column, then you know all the done rules were satisfied, so it's

47
00:02:33,160 --> 00:02:35,720
just a very simple way to do things.

48
00:02:35,720 --> 00:02:38,750
Here's an example of a done rule for an implement step. Code is

49
00:02:38,750 --> 00:02:42,310
developed and unit tested, the specs are updated as necessary, the

50
00:02:42,310 --> 00:02:45,330
code is checked into the repository, and a clean build was

51
00:02:45,330 --> 00:02:47,090
created, or something like that.

52
00:02:47,090 --> 00:02:49,440
Your done rules might be a little more complex.

53
00:02:49,440 --> 00:02:53,750
The done rules are also visible by everyone, clearly documented and

54
00:02:53,750 --> 00:02:56,450
agreed to by the whole team so there's no fuzz there.

55
00:02:56,450 --> 00:03:04,340
To me, this one feature of Kanban, if followed, is a major quality booster.

56
00:03:04,340 --> 00:03:08,040
So let's mark up this board on how we will work with buggy dependencies,

57
00:03:08,040 --> 00:03:10,760
which is almost the same as late dependencies.

58
00:03:10,760 --> 00:03:15,020
So I added an area in our backlog called LATE and BUGS. Next,

59
00:03:15,020 --> 00:03:19,970
I modified the column name in the implement step from LATE to LATE/BUGS. Let's

60
00:03:19,970 --> 00:03:23,440
say this purple work in progress item found an upstream bug,

61
00:03:23,440 --> 00:03:26,720
and maybe we're consuming a component from another team.

62
00:03:26,720 --> 00:03:29,140
Let's assume we're also using a ticketing workflow

63
00:03:29,140 --> 00:03:31,120
system to manage all of our work items.

64
00:03:31,120 --> 00:03:34,770
This one is tagged as buggy and sent back upstream to be fixed,

65
00:03:34,770 --> 00:03:35,950
hence we are blocked.

66
00:03:35,950 --> 00:03:38,390
We will move the card to the LATE/BUG column and

67
00:03:38,390 --> 00:03:40,740
mark it block with a big B for bug.

68
00:03:40,740 --> 00:03:43,690
The freed resource in Implement can now pull new work forward

69
00:03:43,690 --> 00:03:46,740
from the DONE column of Specify, and try and keep as much

70
00:03:46,740 --> 00:03:48,410
work moving forward as possible.

71
00:03:48,410 --> 00:03:50,490
That's the beauty of Kanban.

72
00:03:50,490 --> 00:03:54,610
Work is almost always moving forward. When the work item is corrected,

73
00:03:54,610 --> 00:03:59,490
it lands into our backlog area in the area we called LATE/BUGS. Again, I want to

74
00:03:59,490 --> 00:04:03,780
keep the late and bug dependencies in a separate area so we can easily identify

75
00:04:03,780 --> 00:04:06,140
them and later match them up with the work item.

76
00:04:06,140 --> 00:04:08,870
So when there is an available resource in the implement step,

77
00:04:08,870 --> 00:04:11,620
I can move the blocked purple item back into the work in

78
00:04:11,620 --> 00:04:14,560
progress and consume the bug work item from the backlog

79
00:04:14,560 --> 00:04:16,440
area into my implement work item.

80
00:04:16,440 --> 00:04:18,940
So you see the two items are overlapping each other.

81
00:04:18,940 --> 00:04:21,510
And when we're all done with that particular work item,

82
00:04:21,510 --> 00:04:24,850
only the original backlog work item card is pulled forward.

83
00:04:24,850 --> 00:04:26,540
Is this the only way to do this?

84
00:04:26,540 --> 00:04:27,660
Well, certainly not,

85
00:04:27,660 --> 00:04:31,730
but it is certainly a place for you to start and evolve as you see fit.

86
00:04:31,730 --> 00:04:35,360
And so the point of this slide and the previous one on late dependencies

87
00:04:35,360 --> 00:04:39,580
is to give you a feel of the flexibility of Kanban, and you can evolve and

88
00:04:39,580 --> 00:04:47,000
mold your board any way you want to provide the right visual information to keep the work flowing forward.

