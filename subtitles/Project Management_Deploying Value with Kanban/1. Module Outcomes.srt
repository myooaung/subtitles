1
00:00:01,140 --> 00:00:02,600
Hello, and welcome.

2
00:00:02,600 --> 00:00:04,780
I'm Michael Krasowski from Pluralsight.

3
00:00:04,780 --> 00:00:08,360
I will be presenting the module, Applying Key Learning Objectives,

4
00:00:08,360 --> 00:00:13,240
in the course, Deploying Value with Kanban.

5
00:00:13,240 --> 00:00:15,140
Well, you made it through the course.

6
00:00:15,140 --> 00:00:16,890
Congratulations.

7
00:00:16,890 --> 00:00:19,530
The outcome of this module will be for me to cover the key

8
00:00:19,530 --> 00:00:22,780
points of this course and encourage you to begin applying what

9
00:00:22,780 --> 00:00:25,090
you've learned quickly and successfully.

10
00:00:25,090 --> 00:00:26,470
I won't just reiterate things,

11
00:00:26,470 --> 00:00:32,640
but instead illuminate topics that are important and provide key takeaways.

12
00:00:32,640 --> 00:00:35,150
Here are the key learning objectives for the module

13
00:00:35,150 --> 00:00:37,740
Kanban versus Scrum: A Deeper Look.

14
00:00:37,740 --> 00:00:41,310
Kanban is a highly flexible and adaptable framework to allow you

15
00:00:41,310 --> 00:00:45,600
to create context‑specific process solutions and is superior at

16
00:00:45,600 --> 00:00:47,710
managing workflow‑type situations.

17
00:00:47,710 --> 00:00:50,960
So when it comes to creating backlogs, they're pretty much lookalikes,

18
00:00:50,960 --> 00:00:54,750
and Kanban promotes a more open and flexible approach to whom

19
00:00:54,750 --> 00:00:56,940
can represent the customer base as well.

20
00:00:56,940 --> 00:00:59,000
Backlog organization is similar,

21
00:00:59,000 --> 00:01:02,220
so the process by which backlogs get populated are similar,

22
00:01:02,220 --> 00:01:04,950
and the process or practices on how to organize a

23
00:01:04,950 --> 00:01:06,610
backlogger are similar as well.

24
00:01:06,610 --> 00:01:08,990
Backlog planning though is very different.

25
00:01:08,990 --> 00:01:11,270
With agile Scrum, you have project planning,

26
00:01:11,270 --> 00:01:13,400
release planning, and sprint planning.

27
00:01:13,400 --> 00:01:14,480
Many shops, in fact,

28
00:01:14,480 --> 00:01:17,440
even skip the release planning and just have sprint planning.

29
00:01:17,440 --> 00:01:18,360
And with Kanban,

30
00:01:18,360 --> 00:01:22,230
your planning is done every day during your standups based on the needs of

31
00:01:22,230 --> 00:01:25,150
the business and how best to add value to the business.

32
00:01:25,150 --> 00:01:27,270
With sprints, you have fixed time periods,

33
00:01:27,270 --> 00:01:29,580
and it's a more rigid process structure,

34
00:01:29,580 --> 00:01:31,940
and again, Scrum has been widely successful,

35
00:01:31,940 --> 00:01:32,870
as it should be.

36
00:01:32,870 --> 00:01:36,340
With Kanban though, it is simply a continuous flow.

37
00:01:36,340 --> 00:01:37,540
With bottlenecks,

38
00:01:37,540 --> 00:01:41,790
you have better visibility and root source to the cause of the bottleneck.

39
00:01:41,790 --> 00:01:43,370
That's what Kanban gives you.

40
00:01:43,370 --> 00:01:47,340
With Kanban, blockers are easier to handle and address daily,

41
00:01:47,340 --> 00:01:49,920
but with Scrum, the sprints are a bit more rigid,

42
00:01:49,920 --> 00:01:50,880
2 or 3 weeks,

43
00:01:50,880 --> 00:01:53,780
and it may take more effort and disruption to handle

44
00:01:53,780 --> 00:01:58,040
and integrate into a new sprint.

45
00:01:58,040 --> 00:02:00,770
Here are a few more key learning objectives for the module,

46
00:02:00,770 --> 00:02:02,840
Kanban versus Scrum: A Deeper Look.

47
00:02:02,840 --> 00:02:06,280
The term buffer has a completely different meaning in each,

48
00:02:06,280 --> 00:02:09,530
Kanban, staging area for work, with Scrum,

49
00:02:09,530 --> 00:02:10,700
it's simply slack.

50
00:02:10,700 --> 00:02:14,150
These terms are not interchangeable, so you need to know the difference.

51
00:02:14,150 --> 00:02:17,730
With unplanned work, Kanban is more agile and flexible,

52
00:02:17,730 --> 00:02:21,110
and for both, you must consider the number of work items affected,

53
00:02:21,110 --> 00:02:23,710
what part of the workflow or sprint is affected,

54
00:02:23,710 --> 00:02:25,030
you know, early or late,

55
00:02:25,030 --> 00:02:28,840
and the overall holistic implication of the change and its implications.

56
00:02:28,840 --> 00:02:29,700
For both,

57
00:02:29,700 --> 00:02:32,710
it's very important that you have the necessary communication and

58
00:02:32,710 --> 00:02:36,040
negotiation skills to build trust with your customers.

59
00:02:36,040 --> 00:02:38,580
And here are the typical techniques to measure work.

60
00:02:38,580 --> 00:02:42,100
First, agile Scrum typically uses the concept of velocity,

61
00:02:42,100 --> 00:02:42,890
and for Kanban,

62
00:02:42,890 --> 00:02:46,540
we will use cumulative flow diagrams as the metric for measuring work.

63
00:02:46,540 --> 00:02:50,190
So with Scrum, it is feature‑based monitoring or measuring,

64
00:02:50,190 --> 00:02:56,340
whereas Kanban is process based and task‑based monitoring.

65
00:02:56,340 --> 00:02:59,240
Here are the key learning objectives for the module,

66
00:02:59,240 --> 00:03:02,930
Implement Continuous Integration to Increase Customer Value.

67
00:03:02,930 --> 00:03:05,670
Continuous integration is a best practice in software

68
00:03:05,670 --> 00:03:09,200
engineering to integrate your completed and tested code back

69
00:03:09,200 --> 00:03:11,880
into the repository as often as necessary.

70
00:03:11,880 --> 00:03:14,240
The key word here is continuous.

71
00:03:14,240 --> 00:03:17,020
The first friction point is between implement and validate,

72
00:03:17,020 --> 00:03:20,240
and the second point of friction is between validate and deliver.

73
00:03:20,240 --> 00:03:23,020
These friction points are not bad things per se,

74
00:03:23,020 --> 00:03:27,460
but in fact, the done rules ensure quality work before you move forward,

75
00:03:27,460 --> 00:03:30,280
but by also using continuous integration,

76
00:03:30,280 --> 00:03:34,630
you will reduce or eliminate the friction and will smooth out the value stream,

77
00:03:34,630 --> 00:03:37,980
thus improving quality and throughput even more.

78
00:03:37,980 --> 00:03:39,140
Automated testing,

79
00:03:39,140 --> 00:03:42,550
this will find and eliminate bugs from being pushed out to the

80
00:03:42,550 --> 00:03:44,440
customers in the production environment.

81
00:03:44,440 --> 00:03:46,790
You need a repository for the source code,

82
00:03:46,790 --> 00:03:49,950
a repo for short, but also known as a version control system,

83
00:03:49,950 --> 00:03:50,600
like Git,

84
00:03:50,600 --> 00:03:54,310
and developers must be mindful to merge their changes back

85
00:03:54,310 --> 00:03:57,060
into the target branch of the code base as frequently as

86
00:03:57,060 --> 00:03:58,740
your team has decided as a group.

87
00:03:58,740 --> 00:04:02,040
For me, that is daily, and it should be for you as well.

88
00:04:02,040 --> 00:04:05,750
So at the end of every day, your project could have a perfect build package,

89
00:04:05,750 --> 00:04:07,240
whether it's deployed or not.

90
00:04:07,240 --> 00:04:10,590
That is the general idea of continuous integrations.

91
00:04:10,590 --> 00:04:13,870
Version control systems are a category of software tools that help

92
00:04:13,870 --> 00:04:16,540
a software team manage changes to source code.

93
00:04:16,540 --> 00:04:19,780
You need to know the most current representation of the latest

94
00:04:19,780 --> 00:04:23,190
production build in any earlier builds or versions as well.

95
00:04:23,190 --> 00:04:25,820
It's virtually impossible for me to think someone is

96
00:04:25,820 --> 00:04:30,120
not using a version control system, even if you are a team of one.

97
00:04:30,120 --> 00:04:32,470
There are a ton of benefits around branching and merging,

98
00:04:32,470 --> 00:04:35,380
such as concurrent development, source code management,

99
00:04:35,380 --> 00:04:38,730
history tracking, earlier testing, to just name a few.

100
00:04:38,730 --> 00:04:41,940
With merging down, you'll want to do that as much as possible,

101
00:04:41,940 --> 00:04:44,690
so you are in sync with your parent branch.

102
00:04:44,690 --> 00:04:47,440
And when you think you are ready, that is your code is all done,

103
00:04:47,440 --> 00:04:50,700
then issue a pull request so that the parent branch's

104
00:04:50,700 --> 00:04:53,140
owner will merge back into the parent.

105
00:04:53,140 --> 00:04:54,200
The bottom line here,

106
00:04:54,200 --> 00:04:59,150
have the process and policies in place that your team agrees to and will follow.

107
00:04:59,150 --> 00:05:02,170
I gave you some examples on how you might want to morph your board.

108
00:05:02,170 --> 00:05:05,790
Remember, you have the freedom to lay it out anyway you see fit,

109
00:05:05,790 --> 00:05:07,740
and let it evolve as needed.

110
00:05:07,740 --> 00:05:09,530
That is the beauty of Kanban.

111
00:05:09,530 --> 00:05:11,800
Now by committing frequently, say daily,

112
00:05:11,800 --> 00:05:16,650
commit events are like triggers that launch automated tests or other actions.

113
00:05:16,650 --> 00:05:19,450
This can detect errors sooner, improve quality,

114
00:05:19,450 --> 00:05:24,740
and ultimately make merging down or up easier.

115
00:05:24,740 --> 00:05:27,630
Here are the key learning objectives for the module,

116
00:05:27,630 --> 00:05:31,450
Implement Continuous Deployment to Increase Customer Value.

117
00:05:31,450 --> 00:05:34,520
Continuous deployment improves quality by moving builds or

118
00:05:34,520 --> 00:05:37,750
releases to production automatically, reducing errors,

119
00:05:37,750 --> 00:05:41,090
improving quality, enabling monitoring and metrics.

120
00:05:41,090 --> 00:05:43,000
We looked at delivery versus deployment.

121
00:05:43,000 --> 00:05:46,970
With delivery, our value stream is complete when we have delivered our products,

122
00:05:46,970 --> 00:05:50,270
whereas deployment is where the release or build is installed

123
00:05:50,270 --> 00:05:53,510
into production and is being used by the users.

124
00:05:53,510 --> 00:05:57,760
Please note, the industry and literature will have slightly varying definitions.

125
00:05:57,760 --> 00:06:00,360
I like these those since it helps my teams understand the

126
00:06:00,360 --> 00:06:03,020
distinction and expectations of each.

127
00:06:03,020 --> 00:06:06,040
There are many benefits to employing continuous deployment,

128
00:06:06,040 --> 00:06:10,510
such as eliminate manually installing software and enabling the automatic

129
00:06:10,510 --> 00:06:13,640
monitoring and feedback collection of your applications.

130
00:06:13,640 --> 00:06:17,810
We learned that DevOps is a set of practices that combine software development,

131
00:06:17,810 --> 00:06:20,460
Dev, and IT operations, or Ops.

132
00:06:20,460 --> 00:06:24,550
Its goal is to shorten the system's development lifecycle and provide

133
00:06:24,550 --> 00:06:27,840
continuous deployment with high software quality.

134
00:06:27,840 --> 00:06:31,440
My view, everyone should be using some form of DevOps today.

135
00:06:31,440 --> 00:06:36,140
A deployment pipeline is a set of automated processes that enable a smooth flow

136
00:06:36,140 --> 00:06:39,880
of work from Kanban delivery through production operations.

137
00:06:39,880 --> 00:06:42,870
These pipelines are getting extremely sophisticated.

138
00:06:42,870 --> 00:06:45,710
You can provision and configure servers and lots of

139
00:06:45,710 --> 00:06:47,440
other infrastructure capabilities.

140
00:06:47,440 --> 00:06:49,880
For example, there is Terraform software,

141
00:06:49,880 --> 00:06:53,640
which is an open‑source infrastructure as code software tool.

142
00:06:53,640 --> 00:06:56,790
It enables users to define and provision data center

143
00:06:56,790 --> 00:07:00,220
infrastructure using a declarative configuration language,

144
00:07:00,220 --> 00:07:02,140
so you might want to check that out as well.

145
00:07:02,140 --> 00:07:05,260
Implementing continuous deployment will be a challenge,

146
00:07:05,260 --> 00:07:08,320
and I recommend assembling a strong and disciplined team and

147
00:07:08,320 --> 00:07:10,440
picking the best‑of‑breed tools to get you there.

148
00:07:10,440 --> 00:07:10,840
Plus,

149
00:07:10,840 --> 00:07:14,140
architecting a solid CD pipeline process is the most

150
00:07:14,140 --> 00:07:16,590
important element of moving to CD.

151
00:07:16,590 --> 00:07:21,410
Continuous everything, so without a solid continuous integration process,

152
00:07:21,410 --> 00:07:23,600
you can't have the best continuous deployment.

153
00:07:23,600 --> 00:07:27,210
One approach would be to start with building out your CI process and keep

154
00:07:27,210 --> 00:07:30,640
your existing more manual deployment process for a while.

155
00:07:30,640 --> 00:07:33,650
Then when the CI process matures, and you are ready,

156
00:07:33,650 --> 00:07:36,760
extend the continuous flow of value to the customer by

157
00:07:36,760 --> 00:07:40,160
building out your continuous deployment pipeline.

158
00:07:40,160 --> 00:07:43,370
Here are the key points of the module,

159
00:07:43,370 --> 00:07:46,490
Adapting Kanban within Larger Organizations.

160
00:07:46,490 --> 00:07:50,170
Larger organizations can present challenges to development teams,

161
00:07:50,170 --> 00:07:53,260
such as concurrent release schedules, larger team sizes,

162
00:07:53,260 --> 00:07:55,660
integrating large components, systems, databases,

163
00:07:55,660 --> 00:07:56,640
you name it.

164
00:07:56,640 --> 00:07:59,110
Another challenge is the presence of a variety of

165
00:07:59,110 --> 00:08:01,810
development approaches or methods, such as Kanban,

166
00:08:01,810 --> 00:08:04,440
Agile, Scrum, Waterfall, or custom approaches,

167
00:08:04,440 --> 00:08:07,620
and determining and assigning work to multiple team's

168
00:08:07,620 --> 00:08:09,860
backlogs takes a thoughtful approach.

169
00:08:09,860 --> 00:08:12,520
One approach may be to divide the backlog by work

170
00:08:12,520 --> 00:08:15,130
types like use cases versus services,

171
00:08:15,130 --> 00:08:17,680
and possibly even a hybrid approach of a little of both.

172
00:08:17,680 --> 00:08:19,740
I like the hybrid approach the best.

173
00:08:19,740 --> 00:08:22,660
The flow of work into a team and out of a team is

174
00:08:22,660 --> 00:08:24,730
more complex with multiple teams.

175
00:08:24,730 --> 00:08:27,430
This can get really complicated very quickly,

176
00:08:27,430 --> 00:08:30,230
and so we need to pay special attention to the order by

177
00:08:30,230 --> 00:08:31,890
which teams are fed work as well.

178
00:08:31,890 --> 00:08:35,140
This is critical.

179
00:08:35,140 --> 00:08:37,570
Here are a few more key points of the module,

180
00:08:37,570 --> 00:08:40,220
Adapting Kanban within Larger organizations.

181
00:08:40,220 --> 00:08:41,370
Regular, organized,

182
00:08:41,370 --> 00:08:45,010
and consistent communication is essential and crucial

183
00:08:45,010 --> 00:08:46,540
to the success of your projects.

184
00:08:46,540 --> 00:08:50,240
Now this is often overlooked, so please don't overlook this.

185
00:08:50,240 --> 00:08:52,820
With large projects in large organizations,

186
00:08:52,820 --> 00:08:56,820
I strongly recommend a focused project management level of effort,

187
00:08:56,820 --> 00:08:59,060
and in fact, even in smaller organizations,

188
00:08:59,060 --> 00:09:00,320
that makes sense as well.

189
00:09:00,320 --> 00:09:03,570
So please consider the role of project managers to keep things

190
00:09:03,570 --> 00:09:05,950
moving forward more smoothly and professionally.

191
00:09:05,950 --> 00:09:09,230
Late and buggy dependencies can just wreak havoc on

192
00:09:09,230 --> 00:09:11,060
your productivity and flow of work.

193
00:09:11,060 --> 00:09:13,560
We talked about how we modified the Kanban board to

194
00:09:13,560 --> 00:09:15,500
better track late or buggy work,

195
00:09:15,500 --> 00:09:19,430
and reintegrate the corrected or late work back into our value stream.

196
00:09:19,430 --> 00:09:21,630
We also discussed how fakes, shims,

197
00:09:21,630 --> 00:09:25,840
and mocks can be used as placeholders to enable work to keep moving forward,

198
00:09:25,840 --> 00:09:27,340
albeit not perfectly.

199
00:09:27,340 --> 00:09:32,040
Lastly, late dependencies can be really challenging and exhausting to your team,

200
00:09:32,040 --> 00:09:38,000
but it will happen, so be prepared with the techniques we discussed and how to handle them.

