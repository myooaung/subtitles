1
00:00:01,240 --> 00:00:03,080
So whenever you're doing your work,

2
00:00:03,080 --> 00:00:06,730
your new mantra should be continuous everything.

3
00:00:06,730 --> 00:00:09,630
Look for all those bottlenecks and blockers that affect

4
00:00:09,630 --> 00:00:13,840
the flow of work and make it better.

5
00:00:13,840 --> 00:00:17,970
As you can see, I'm a big believer in continuous everything.

6
00:00:17,970 --> 00:00:21,530
Kanban is a continuous value stream of deliverables to the customer.

7
00:00:21,530 --> 00:00:25,500
Continuous integration. So our code is committed by developers.

8
00:00:25,500 --> 00:00:28,200
It's merged into the main branch as much as possible.

9
00:00:28,200 --> 00:00:31,030
Tests are triggered automatically to validate the changes.

10
00:00:31,030 --> 00:00:33,540
Events are fired if an issue is detected.

11
00:00:33,540 --> 00:00:37,660
This best practice helps detect problems early upstream and reduce merge

12
00:00:37,660 --> 00:00:41,140
conflicts when compared to a more traditional build release cycle.

13
00:00:41,140 --> 00:00:44,590
Continuous delivery. Changes that have been successfully passed

14
00:00:44,590 --> 00:00:47,200
through the continuous integration phase are automatically

15
00:00:47,200 --> 00:00:50,260
verified and packaged to be made available for deployment to

16
00:00:50,260 --> 00:00:51,800
production at a later time.

17
00:00:51,800 --> 00:00:54,660
Continuous deployment. That is deployment to production

18
00:00:54,660 --> 00:00:57,770
happens automatically, conditional on the successful

19
00:00:57,770 --> 00:00:59,440
completion of the previous steps.

20
00:00:59,440 --> 00:01:02,470
Features and bug fixes go live to the users as soon as

21
00:01:02,470 --> 00:01:05,050
they're ready without manual intervention.

22
00:01:05,050 --> 00:01:09,150
Kanban has been around for a heck of a lot longer than continuous integration,

23
00:01:09,150 --> 00:01:10,680
delivery, or deployment,

24
00:01:10,680 --> 00:01:14,980
so some credit must be given to all of those Kanban practitioners that have come

25
00:01:14,980 --> 00:01:20,950
before us and laid the groundwork. Getting ready for CI/CD.

26
00:01:20,950 --> 00:01:23,630
Here are a few suggestions to help you dive into

27
00:01:23,630 --> 00:01:25,810
continuous integration and deployment.

28
00:01:25,810 --> 00:01:29,030
CI/CD is not for the faint of heart and will challenge

29
00:01:29,030 --> 00:01:32,090
your team and possibly your organization, so I recommend a

30
00:01:32,090 --> 00:01:34,170
strong and disciplined team.

31
00:01:34,170 --> 00:01:37,240
Expect costs and the addition of a few new skills.

32
00:01:37,240 --> 00:01:41,340
Architecting a solid CD pipeline process is essential,

33
00:01:41,340 --> 00:01:43,840
and your code must be extremely testable.

34
00:01:43,840 --> 00:01:46,810
I mean really, how many people's code are that way?

35
00:01:46,810 --> 00:01:50,200
So you may have to change the development processes. So maybe

36
00:01:50,200 --> 00:01:54,130
you need to have adopted testâ€‘driven development first for CI

37
00:01:54,130 --> 00:01:57,450
to work. And again, for CD to work, you need CI to work.

38
00:01:57,450 --> 00:02:02,340
You need good test coverage, thus avoiding manual testing as much as possible.

39
00:02:02,340 --> 00:02:02,960
And of course,

40
00:02:02,960 --> 00:02:05,510
your pipeline must support rollback because you will

41
00:02:05,510 --> 00:02:09,500
find issues and errors. Lastly, you need to have the confidence of management,

42
00:02:09,500 --> 00:02:12,410
your customers, and the team's confidence in the

43
00:02:12,410 --> 00:02:20,000
process and tools to make it happen. Start easy, start light, try a pilot, and see how it goes.

