1
00:00:01,040 --> 00:00:04,350
So we have seen how we have modified our Kanban value stream

2
00:00:04,350 --> 00:00:06,540
to incorporate a version control system.

3
00:00:06,540 --> 00:00:09,300
Let's further leverage that version control system to

4
00:00:09,300 --> 00:00:11,100
take advantage of automated testing.

5
00:00:11,100 --> 00:00:16,790
Before automated testing the context of continuous integration,

6
00:00:16,790 --> 00:00:20,890
this is how work flowed between the implement step and the validate step.

7
00:00:20,890 --> 00:00:24,530
Dev performs unit testing, ensures the done rules are complete,

8
00:00:24,530 --> 00:00:26,410
places the work in the done column.

9
00:00:26,410 --> 00:00:29,840
Now unit testing may or may not mean automated unit testing,

10
00:00:29,840 --> 00:00:30,980
but let's hope it does.

11
00:00:30,980 --> 00:00:34,460
The QA person pulls the work item forward for the validate step.

12
00:00:34,460 --> 00:00:38,340
The QA typically performs manual tests and runs automated tests,

13
00:00:38,340 --> 00:00:42,250
if any, ensures all the done rules are complete for the validate step,

14
00:00:42,250 --> 00:00:44,760
and then places the done work in the done column.

15
00:00:44,760 --> 00:00:48,400
For the devs, typically the unit tests are few at best,

16
00:00:48,400 --> 00:00:49,890
and sometimes the testing is random.

17
00:00:49,890 --> 00:00:52,660
And for the QA's resources in the validate step,

18
00:00:52,660 --> 00:00:55,250
testing is better since that is their profession,

19
00:00:55,250 --> 00:00:57,740
and it's usually documented and usually repeatable.

20
00:00:57,740 --> 00:01:01,150
So a quick shoutout to all the QA professionals who must

21
00:01:01,150 --> 00:01:02,900
clean up things for the devs sometimes.

22
00:01:02,900 --> 00:01:06,240
No offense devs.

23
00:01:06,240 --> 00:01:08,300
Why should we do automated testing?

24
00:01:08,300 --> 00:01:09,910
Well, yeah, got to.

25
00:01:09,910 --> 00:01:15,170
Continuous integration requires automated testing, no if, ands, or buts.

26
00:01:15,170 --> 00:01:18,820
No automated testing, well, to me, no continuous integration.

27
00:01:18,820 --> 00:01:20,990
It's great for catching errors and bugs early,

28
00:01:20,990 --> 00:01:23,250
or should I say earlier and often.

29
00:01:23,250 --> 00:01:25,600
Manual testing really is obsolete.

30
00:01:25,600 --> 00:01:27,770
Our development stacks are so complex,

31
00:01:27,770 --> 00:01:31,490
we are leveraging a plethora of APIs and other remote services

32
00:01:31,490 --> 00:01:33,710
and trying to integrate everything together.

33
00:01:33,710 --> 00:01:36,550
How often have you or others just click around the

34
00:01:36,550 --> 00:01:38,260
screen hoping to find something wrong.

35
00:01:38,260 --> 00:01:40,320
That is not automated testing.

36
00:01:40,320 --> 00:01:41,670
And I mean earlier.

37
00:01:41,670 --> 00:01:44,350
Why wait for the validate step to better test things?

38
00:01:44,350 --> 00:01:46,990
How about catching more of them in the implement step?

39
00:01:46,990 --> 00:01:48,680
So fail early and often.

40
00:01:48,680 --> 00:01:50,450
Management's support.

41
00:01:50,450 --> 00:01:54,010
So often budgets are allocated for dev work and not testing.

42
00:01:54,010 --> 00:01:55,630
I see it over and over.

43
00:01:55,630 --> 00:01:58,530
Untested systems in the long run do cost more,

44
00:01:58,530 --> 00:02:01,200
period, but it can be hard to convince management otherwise.

45
00:02:01,200 --> 00:02:05,840
So I can sympathize with you if your management says no automated testing.

46
00:02:05,840 --> 00:02:08,170
Well, you either pay now or pay later.

47
00:02:08,170 --> 00:02:11,770
And when you pay later, the customer is even more unhappy,

48
00:02:11,770 --> 00:02:14,540
and you're probably frustrated as well, including your team.

49
00:02:14,540 --> 00:02:17,020
Automated testing enhances lean development.

50
00:02:17,020 --> 00:02:20,220
With lean, you want to reduce or eliminate waste.

51
00:02:20,220 --> 00:02:23,990
So much of the friction points I mentioned before only create waste,

52
00:02:23,990 --> 00:02:25,890
which results in lost time and money.

53
00:02:25,890 --> 00:02:28,850
Committing code.

54
00:02:28,850 --> 00:02:30,720
In version control systems,

55
00:02:30,720 --> 00:02:35,020
a commit adds the latest changes to the source code to the repository.

56
00:02:35,020 --> 00:02:36,240
In our running example,

57
00:02:36,240 --> 00:02:40,490
the dev will commit the changes back to the branch he or she is working on.

58
00:02:40,490 --> 00:02:42,240
Now this is not a merge.

59
00:02:42,240 --> 00:02:42,620
Remember,

60
00:02:42,620 --> 00:02:46,050
merging is either merging down from a parent branch or

61
00:02:46,050 --> 00:02:50,140
merging up into the parent branch.

62
00:02:50,140 --> 00:02:53,320
Let's consider using continuous integration practices in

63
00:02:53,320 --> 00:02:55,860
the implement step and what that means.

64
00:02:55,860 --> 00:02:59,010
Continuous integration requires frequently committing

65
00:02:59,010 --> 00:03:01,750
chunks of code into the shared repository.

66
00:03:01,750 --> 00:03:06,350
When you commit code, that event fires a series of things you need to perform,

67
00:03:06,350 --> 00:03:09,880
automated tests and a whole slew of other things that could be set up

68
00:03:09,880 --> 00:03:12,840
and programmed to exactly meet your requirements.

69
00:03:12,840 --> 00:03:14,910
How frequently should code be committed?

70
00:03:14,910 --> 00:03:15,550
Well,

71
00:03:15,550 --> 00:03:18,400
committing code more often detects errors sooner and

72
00:03:18,400 --> 00:03:21,440
reduces the amount of code a developer needs to debug when

73
00:03:21,440 --> 00:03:23,040
finding the source of an error.

74
00:03:23,040 --> 00:03:26,550
Frequent code updates also make it easier to merge changes from

75
00:03:26,550 --> 00:03:28,740
different members of a software development team.

76
00:03:28,740 --> 00:03:32,280
This is great for developers who can spend more time writing code and

77
00:03:32,280 --> 00:03:35,340
less time debugging errors or resolving merge conflicts.

78
00:03:35,340 --> 00:03:37,630
When you commit code to a repository,

79
00:03:37,630 --> 00:03:40,920
you can continuously build and test the code to make sure that

80
00:03:40,920 --> 00:03:43,160
the commit doesn't introduce new errors.

81
00:03:43,160 --> 00:03:47,240
Your test could include code linters, which check style formatting,

82
00:03:47,240 --> 00:03:50,180
security checks, code coverage, functional checks,

83
00:03:50,180 --> 00:03:55,340
and all sorts of other custom checks that makes sense for you.

84
00:03:55,340 --> 00:03:58,830
Here are some rules of thumb for committing code to your working branch.

85
00:03:58,830 --> 00:04:02,440
Develop automated tests as a matter of normal practice.

86
00:04:02,440 --> 00:04:05,580
Set up rules in your version control systems so that on every

87
00:04:05,580 --> 00:04:08,420
commit the automated tests are run or other scripts or

88
00:04:08,420 --> 00:04:10,510
actions that you need are completed.

89
00:04:10,510 --> 00:04:13,180
Decide how often each developer should commit their code.

90
00:04:13,180 --> 00:04:14,140
I say daily.

91
00:04:14,140 --> 00:04:16,890
Decide is a team what they should commit.

92
00:04:16,890 --> 00:04:20,640
To me, it should only be workable, functioning code.

93
00:04:20,640 --> 00:04:23,220
Handle your automated test code as real code,

94
00:04:23,220 --> 00:04:25,030
not just some add‑on or chore to do.

95
00:04:25,030 --> 00:04:30,000
Heads‑up. This is the heart and soul of continuous integration.

