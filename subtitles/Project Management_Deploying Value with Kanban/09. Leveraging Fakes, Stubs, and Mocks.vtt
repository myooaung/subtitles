WEBVTT
1
00:00:01.220 --> 00:00:02.710
In the previous sections,

2
00:00:02.710 --> 00:00:05.520
late or buggy dependencies were put to the side and

3
00:00:05.520 --> 00:00:07.150
we pulled other work forward,

4
00:00:07.150 --> 00:00:10.640
and that's great, but if there's no other work to pull forward,

5
00:00:10.640 --> 00:00:13.820
then we have idle resources, and we don't want that.

6
00:00:13.820 --> 00:00:17.860
In Kanban, blockers are unproductive, and we want to be flexible

7
00:00:17.860 --> 00:00:20.820
and adaptable to keep work moving forward.

8
00:00:20.820 --> 00:00:27.310
Here are a few other options for handing late or buggy dependencies. In

9
00:00:27.310 --> 00:00:30.380
Kanban, we always want to keep work moving forward.

10
00:00:30.380 --> 00:00:34.220
Okay, you are blocked by a late dependency or a buggy dependency.

11
00:00:34.220 --> 00:00:36.000
So to keep things moving forward,

12
00:00:36.000 --> 00:00:38.560
what you can do is build something that looks and

13
00:00:38.560 --> 00:00:40.820
behaves like the code you are waiting for.

14
00:00:40.820 --> 00:00:43.710
This will allow you to keep moving forward as best as

15
00:00:43.710 --> 00:00:45.640
you can until the code arrives.

16
00:00:45.640 --> 00:00:48.130
We will talk about three ways to do this: fakes,

17
00:00:48.130 --> 00:00:51.170
stubs, and mocks, and give you examples of when to use them.

18
00:00:51.170 --> 00:00:52.020
Here's a note.

19
00:00:52.020 --> 00:00:55.250
The literature has slightly varying definitions of these terms,

20
00:00:55.250 --> 00:01:00.640
but it's just important to understand the essence of this section.

21
00:01:00.640 --> 00:01:03.700
Fakes are objects that have working implementations.

22
00:01:03.700 --> 00:01:06.950
They will mimic or fake the dependency code that we're waiting for.

23
00:01:06.950 --> 00:01:10.590
So when we have a late dependency or the buggy code is not working for us,

24
00:01:10.590 --> 00:01:11.880
then we can use a fake.

25
00:01:11.880 --> 00:01:15.770
An example of this is maybe you need to make a call to an SAP endpoint,

26
00:01:15.770 --> 00:01:18.220
but you do not have access because you are waiting for

27
00:01:18.220 --> 00:01:20.240
your upstream partner to be completed.

28
00:01:20.240 --> 00:01:20.910
Therefore,

29
00:01:20.910 --> 00:01:23.630
you write a fake piece of code to simulate that interface

30
00:01:23.630 --> 00:01:25.700
so that you're testing can move forward.

31
00:01:25.700 --> 00:01:28.800
This helps with both late and buggy dependencies. So you

32
00:01:28.800 --> 00:01:31.840
may not have all the code written, but maybe a really good chunk.

33
00:01:31.840 --> 00:01:34.920
Now, if you finish writing the fake and you still end up being blocked,

34
00:01:34.920 --> 00:01:38.850
then handle it just like we talked about in the previous two sections, but at

35
00:01:38.850 --> 00:01:41.720
least when the late or buggy code does arrive in your backlog,

36
00:01:41.720 --> 00:01:45.640
then you have most of the work complete.

37
00:01:45.640 --> 00:01:48.930
A stub is an object that holds predefined data.

38
00:01:48.930 --> 00:01:52.230
Stubs are used to return data from calls during tests.

39
00:01:52.230 --> 00:01:55.300
An example would be a method that needs data from a database,

40
00:01:55.300 --> 00:01:58.030
so you use a stub to return predefined data that will

41
00:01:58.030 --> 00:01:59.780
be used by the calling routine.

42
00:01:59.780 --> 00:02:03.440
Let's say you wanted to populate a grid on a web page. You could use a stub to

43
00:02:03.440 --> 00:02:07.640
bring back data in the exact format you would be expecting it to come in, and

44
00:02:07.640 --> 00:02:11.050
continue writing your code. When the work item you're waiting for is complete,

45
00:02:11.050 --> 00:02:13.830
you simply swap the stub and make the call.

46
00:02:13.830 --> 00:02:17.110
You should be good to go. Now, if you still ended up blocked,

47
00:02:17.110 --> 00:02:20.610
then handle it just like we talked about in the previous two sections, but at

48
00:02:20.610 --> 00:02:23.400
least when the later buggy code does arrive in your backlog,

49
00:02:23.400 --> 00:02:27.300
then you'll have most of your work complete.

50
00:02:27.300 --> 00:02:31.400
Mocks or mocking is a process using unit testing when the unit being

51
00:02:31.400 --> 00:02:34.630
tested has external dependencies like we discussed.

52
00:02:34.630 --> 00:02:38.220
The purpose of mocking is to isolate and concentrate on the code being

53
00:02:38.220 --> 00:02:41.400
tested and not on the behavior of our dependencies.

54
00:02:41.400 --> 00:02:44.840
A mock is a much more sophisticated version of a stub.

55
00:02:44.840 --> 00:02:47.020
It will still return values like a stub,

56
00:02:47.020 --> 00:02:50.070
but it can also be programmed with expectations in terms of

57
00:02:50.070 --> 00:02:52.050
how many times each method should be called,

58
00:02:52.050 --> 00:02:55.870
in which order, and with what data. Use a mocking framework if you

59
00:02:55.870 --> 00:02:59.260
are expecting many dependency issues. Then consider which is the

60
00:02:59.260 --> 00:03:01.550
mocking framework best for your situation.

61
00:03:01.550 --> 00:03:04.430
Mocking frameworks are used to generate replacement objects like

62
00:03:04.430 --> 00:03:07.700
stubs and mocks. Mocking frameworks compliment unit testing

63
00:03:07.700 --> 00:03:09.940
frameworks by isolating dependencies.

64
00:03:09.940 --> 00:03:10.640
So again,

65
00:03:10.640 --> 00:03:13.530
a little more sophisticated approach, maybe start with the first

66
00:03:13.530 --> 00:03:17.060
two, fakes and stubs, and then maybe graduate with mocks if you

67
00:03:17.060 --> 00:03:21.970
think you need them. Let's mark up our standard board in how we

68
00:03:21.970 --> 00:03:24.560
will work with fakes, stubs, and mocks.

69
00:03:24.560 --> 00:03:28.190
Let's say this purple work in progress item found an upstream bug in

70
00:03:28.190 --> 00:03:30.700
a component it was consuming from another team.

71
00:03:30.700 --> 00:03:32.900
So we have decided that instead of moving the work

72
00:03:32.900 --> 00:03:34.530
item to the LATE/BUGS as before,

73
00:03:34.530 --> 00:03:38.130
we will just keep working on it by building a mock. We will add a card to

74
00:03:38.130 --> 00:03:41.510
the LATE/BUGS column to represent the fact that we have a mock that we will

75
00:03:41.510 --> 00:03:45.710
have to remove at some point, and the card, when the dependency or the bug

76
00:03:45.710 --> 00:03:50.020
is corrected, and mark it with a big M for mock. In these two areas, we

77
00:03:50.020 --> 00:03:54.640
still title them LATE/BUGS, since that fits nicely into our earlier discussions.

78
00:03:54.640 --> 00:03:57.530
But now, with the concept of mock stubs and shims,

79
00:03:57.530 --> 00:03:59.850
a better naming convention is now in order.

80
00:03:59.850 --> 00:04:02.590
Let's change the name of these areas to TRACK,

81
00:04:02.590 --> 00:04:05.660
since that is what we are doing, and it is a better term and more

82
00:04:05.660 --> 00:04:10.450
encompassing. TRACK is a better name than LATE or BUGS and is generic to

83
00:04:10.450 --> 00:04:13.540
account for any dependency situation that might arise.

84
00:04:13.540 --> 00:04:16.210
So that is another great thing about Kanban.

85
00:04:16.210 --> 00:04:17.950
As things change and evolve,

86
00:04:17.950 --> 00:04:20.430
you can make any changes you want to better accommodate

87
00:04:20.430 --> 00:04:23.110
the situation and make the board more expressive and

88
00:04:23.110 --> 00:04:25.240
illustrative about what's going on.

89
00:04:25.240 --> 00:04:28.640
I love that about Kanban.

90
00:04:28.640 --> 00:04:31.000
Here is another way to keep things moving forward.

91
00:04:31.000 --> 00:04:34.790
The first is delivering partially completed work and of course

92
00:04:34.790 --> 00:04:37.090
ensuring that your downstream partners know it.

93
00:04:37.090 --> 00:04:40.470
This helps keep things moving forward to some degree certainly. Now,

94
00:04:40.470 --> 00:04:43.050
you would also like to add a new card to your board to track

95
00:04:43.050 --> 00:04:45.300
the remaining work that you still need to do.

96
00:04:45.300 --> 00:04:47.240
This would also mean though that you need to relax

97
00:04:47.240 --> 00:04:49.360
your done rules for certain steps,

98
00:04:49.360 --> 00:04:52.380
since you are letting uncompleted or not fully tested

99
00:04:52.380 --> 00:04:54.240
code to your downstream partners.

100
00:04:54.240 --> 00:04:56.520
The benefit in this scenario is that it allows your

101
00:04:56.520 --> 00:04:58.630
downstream partners to continue forward,

102
00:04:58.630 --> 00:05:01.060
knowing new versions will be coming from you soon.

103
00:05:01.060 --> 00:05:06.000
Please note, this takes great communication and trust between your two teams.

104
00:05:06.000 --> 00:05:06.420
Therefore,

105
00:05:06.420 --> 00:05:14.000
this may not always work in all situations, and also means you need a lot more tracking to track these situations as well.

