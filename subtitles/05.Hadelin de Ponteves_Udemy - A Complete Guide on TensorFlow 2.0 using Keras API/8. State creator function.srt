1
00:00:00,300 --> 00:00:06,880
Hello everyone and welcome to this python tutorial in the previous video we created our dataset loader

2
00:00:06,910 --> 00:00:13,370
function that takes the name of a company and retrieves stock prices for that company.

3
00:00:13,660 --> 00:00:20,350
And now in this video we have to create a function that takes that data and generates states from it.

4
00:00:20,740 --> 00:00:26,820
But before we start with the implementation of our state create their function let's see how to transform

5
00:00:26,860 --> 00:00:34,210
the problem of stock market trading to a reinforcement learning setting on this graph right here we

6
00:00:34,210 --> 00:00:41,970
have information about Apple stocks prices from 2010 until today on the x axis.

7
00:00:41,990 --> 00:00:50,450
We have time information but on the y axis we have prices of stocks on a specific day which is not visible

8
00:00:50,510 --> 00:00:58,230
right now on this graph this graph right here is taken from Yahoo Finance's as you can see here and

9
00:00:58,230 --> 00:01:06,320
these blue main line on the graph shows how the value of a company changes over time let's see how to

10
00:01:06,320 --> 00:01:07,730
modify these data.

11
00:01:07,790 --> 00:01:12,010
So a reinforcement learning algorithm can't understand it.

12
00:01:12,020 --> 00:01:17,780
Each point that his graph is nothing more but the floating number that represents the price of stocks

13
00:01:17,990 --> 00:01:26,500
on the Today our task is to predict what is going to happen next is the price going down or going up

14
00:01:26,770 --> 00:01:34,920
and the next day based on that information our agent will determine what to do sell by or state and

15
00:01:34,920 --> 00:01:35,460
do nothing.

16
00:01:36,590 --> 00:01:38,800
Let's zoom at this part of the graph.

17
00:01:39,170 --> 00:01:46,070
And as you can see here we have information about six data points or six days for example.

18
00:01:46,070 --> 00:01:54,080
Now let's zoom even further and transform this part of the graph to numbers this red path right here

19
00:01:54,170 --> 00:01:59,120
is what we are trying to predict and that is our target.

20
00:01:59,160 --> 00:02:07,430
Well let's take this red line and transform it to number and let's say it is forty seven point six just

21
00:02:07,430 --> 00:02:10,440
to mention these numbers are totally random.

22
00:02:10,460 --> 00:02:17,630
They are not taken from the graph in this example right here we have the window size of 5 which is also

23
00:02:17,630 --> 00:02:24,490
the argument of the state create their function based on this argument we determine how many previous

24
00:02:24,490 --> 00:02:32,650
days we consider before predicting the current one and now we have our state made of five numbers where

25
00:02:32,710 --> 00:02:36,050
each number represents one day in the past.

26
00:02:36,310 --> 00:02:43,390
But based on this it doesn't look right this is nothing more but a regression problem.

27
00:02:43,440 --> 00:02:48,610
We have some numbers and we are predicting our target which is also continuous No.

28
00:02:48,630 --> 00:02:54,870
Well let's modify these solutions so we have our actions instead of the real number of targets for our

29
00:02:54,870 --> 00:02:55,920
estate part.

30
00:02:55,920 --> 00:03:00,330
We can still use a row numbers but that won't help us anymore.

31
00:03:00,330 --> 00:03:08,490
Since our target is not the real number or real price but an Action Now let's change our state to use

32
00:03:08,490 --> 00:03:16,550
the differences between days as our state this information will represent price changes over time and

33
00:03:16,550 --> 00:03:21,010
potentially catch the trend in the future as well.

34
00:03:21,020 --> 00:03:29,180
Now we have a stately this and this new state has only four numbers and our window size was five.

35
00:03:29,210 --> 00:03:31,080
We will handle this in code.

36
00:03:31,100 --> 00:03:38,020
This was just demonstration on purpose only and now because we have changed formation over time our

37
00:03:38,020 --> 00:03:45,740
action and the new estate is buy because price was pretty high and we expect to drop again.

38
00:03:45,820 --> 00:03:51,610
So based on that information we are going to perform buy stocks at the new estate and that's pretty

39
00:03:51,610 --> 00:03:52,530
much it.

40
00:03:52,540 --> 00:03:56,890
Let's go back and implement this in the code and welcome back.

41
00:03:56,950 --> 00:03:58,690
Let's implement this strategy.

42
00:03:58,750 --> 00:04:07,030
Here we have a function called state creator that takes three arguments data which is the stock market

43
00:04:07,030 --> 00:04:11,980
data downloaded with a data set loader a function timestamp.

44
00:04:11,980 --> 00:04:15,710
This is the day in the data set that we want to predict for.

45
00:04:15,850 --> 00:04:19,850
It could be anywhere from zero to the landfall data.

46
00:04:19,960 --> 00:04:22,860
And lastly we have window size.

47
00:04:22,870 --> 00:04:29,440
This argument determines how many previous days we want to consider in our state to predict the current

48
00:04:29,440 --> 00:04:30,420
one.

49
00:04:30,430 --> 00:04:35,370
This argument goes anywhere from one to the line of data.

50
00:04:35,490 --> 00:04:40,620
You can play with this window size parameter and see what is the best size for the company that you're

51
00:04:40,620 --> 00:04:43,700
trying to trade for in this section.

52
00:04:43,710 --> 00:04:46,890
Let us work with window size of 10 okay.

53
00:04:47,070 --> 00:04:54,300
The first thing that we have to do is to calculate the starting I.D. So let's write starting Ida is

54
00:04:54,300 --> 00:04:59,700
equal to and now we have to calculate the new starting date of our state.

55
00:04:59,790 --> 00:05:05,120
It is calculated like this timestamp minus window size plus 1.

56
00:05:05,310 --> 00:05:12,020
For example when the time step is zero or our age it is just starting and then window sizes is then

57
00:05:12,330 --> 00:05:15,200
the starting idea is minus nine.

58
00:05:15,270 --> 00:05:20,070
This plus one is added because of the way we create our state.

59
00:05:20,200 --> 00:05:26,380
We don't want prices on certain days but as we explained differences between the current price and the

60
00:05:26,380 --> 00:05:32,550
previous price to see that change between dates and that's why we start with a plus one.

61
00:05:32,560 --> 00:05:38,800
Okay now that we know our starting idea we need to handle two different cases when the starting idea

62
00:05:38,800 --> 00:05:41,570
is negative and when it's positive.

63
00:05:41,980 --> 00:05:42,690
Right.

64
00:05:42,700 --> 00:05:46,910
If starting idea is bigger than or equal to zero.

65
00:05:46,990 --> 00:05:50,350
This will handle the case when the starting idea is positive.

66
00:05:50,350 --> 00:05:53,750
When we have that situation we create state like this.

67
00:05:53,890 --> 00:06:02,070
We know data is equal to a data of starting a day until timestamp plus 1 if that is not the case.

68
00:06:02,130 --> 00:06:04,500
And our starting idea is negative.

69
00:06:04,500 --> 00:06:11,520
We will append the first day info as many times as we need to match with the window size of a data window.

70
00:06:11,520 --> 00:06:18,210
Data is equal to then put minus in front of starting I.D. because starting idea at this point is negative

71
00:06:18,930 --> 00:06:23,880
then multiplied by then list of data of 0.

72
00:06:23,880 --> 00:06:30,720
This will replicate this member many times and now we need to spend the rest of the elements to have

73
00:06:30,810 --> 00:06:33,850
the full window size of data right.

74
00:06:33,870 --> 00:06:41,210
Plus then list of data from 0 2 timestamp plus 1.

75
00:06:41,230 --> 00:06:46,030
Now we have our data from which we can create our state of data.

76
00:06:46,030 --> 00:06:50,030
Let's define an empty list call state is equal to empty list.

77
00:06:50,350 --> 00:06:59,710
And after that we can iterate through the whole window data list for i in range window size minus 1.

78
00:06:59,860 --> 00:07:06,610
This minus 1 here because we have differences between the current element and one after.

79
00:07:06,610 --> 00:07:07,270
Right.

80
00:07:07,300 --> 00:07:08,800
State that append.

81
00:07:09,280 --> 00:07:16,030
And now we have to normalize the difference between the next day and the current day because prices

82
00:07:16,030 --> 00:07:17,610
can be very different.

83
00:07:17,620 --> 00:07:21,680
We want to scale the difference between prices on the same scale.

84
00:07:21,760 --> 00:07:24,980
So we have the same difference no matter the price.

85
00:07:25,240 --> 00:07:28,510
We are going to do that with sigmoid function.

86
00:07:28,510 --> 00:07:36,100
So let's write sigmoid of window data of IE plus 1 minus window data.

87
00:07:36,190 --> 00:07:43,210
I and now we completed the function that is going to create the state for us the same state in the same

88
00:07:43,210 --> 00:07:49,270
method that we explained on the graph to complete the function just the return and num pi array of the

89
00:07:49,270 --> 00:07:52,780
state and now we're done.

90
00:07:52,840 --> 00:07:57,090
If you have any questions or comments so far please post them in the comments section.

91
00:07:57,580 --> 00:07:59,630
Otherwise I've seen the next tutorial.
