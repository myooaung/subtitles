1
00:00:03,240 --> 00:00:05,840
So as well as the reference types, such a soft reference,

2
00:00:05,840 --> 00:00:10,050
weak reference, and phantom reference, and the WeakHashMap, we also, in

3
00:00:10,050 --> 00:00:17,390
java.lang.refs, have this type called a ReferenceQueue. ReferenceQueues are

4
00:00:17,390 --> 00:00:20,210
passed through the constructor of a reference object.

5
00:00:20,210 --> 00:00:22,720
When I create a weak reference or a soft reference,

6
00:00:22,720 --> 00:00:27,440
we can also create a ReferenceQueue and pass this along inside its constructor.

7
00:00:27,440 --> 00:00:29,190
When I create a PhantomReference object,

8
00:00:29,190 --> 00:00:34,360
we must pass a reference to a ReferenceQueue. So ReferenceQueues are

9
00:00:34,360 --> 00:00:39,210
associated with a reference object, and its these reference objects

10
00:00:39,210 --> 00:00:41,940
that get enqueued to a ReferenceQueue.

11
00:00:41,940 --> 00:00:46,390
So if I create an object, and I have a strong reference to it, and I wrap that

12
00:00:46,390 --> 00:00:50,230
object in say a weak reference and I've associated a ReferenceQueue with that

13
00:00:50,230 --> 00:00:54,810
weak reference, when this object no longer has any strong references to it,

14
00:00:54,810 --> 00:00:59,380
the WeakReference type gets enqueued to the ReferenceQueue, and we'll see an

15
00:00:59,380 --> 00:01:04,380
example of this in the moment. These are useful when you want to associate

16
00:01:04,380 --> 00:01:08,790
some sort of cleanup mechanism with the object. So we create them something

17
00:01:08,790 --> 00:01:09,680
like this.

18
00:01:09,680 --> 00:01:13,850
So here we create a new person object. We then create a ReferenceQueue of type

19
00:01:13,850 --> 00:01:18,020
Person. And then we create a WeakReference around the Person.

20
00:01:18,020 --> 00:01:19,730
And when we create this new weak reference,

21
00:01:19,730 --> 00:01:25,710
we pass it the Person object and the ReferenceQueue. So the way

22
00:01:25,710 --> 00:01:29,520
ReferenceQueues are used is this. When all strong references to an object

23
00:01:29,520 --> 00:01:34,840
are cleared, any reference object that wrapped up that strong reference is

24
00:01:34,840 --> 00:01:38,770
now added to the ReferenceQueue. So from the previous slide, I had a person

25
00:01:38,770 --> 00:01:43,290
object, I had a weak reference to that person object. When all strong

26
00:01:43,290 --> 00:01:47,190
references to the person are cleared, that weak reference will be added to

27
00:01:47,190 --> 00:01:50,140
its ReferenceQueue.

28
00:01:50,140 --> 00:01:53,460
We can retrieve these references from the ReferenceQueue by using

29
00:01:53,460 --> 00:01:56,690
the ReferenceQueue's poll and remove methods.

30
00:01:56,690 --> 00:01:59,910
The poll method returns immediately, so we're polling the queue. We're

31
00:01:59,910 --> 00:02:03,540
asking the queue, do you have a reference type for me?

32
00:02:03,540 --> 00:02:06,760
If there's a reference type on the queue, it's returned to us.

33
00:02:06,760 --> 00:02:08,480
If there's no reference type on the queue, then poll

34
00:02:08,480 --> 00:02:12,160
returns null. The remove method will block.

35
00:02:12,160 --> 00:02:16,570
So when I call remove, it will block until there is a reference on the queue,

36
00:02:16,570 --> 00:02:19,090
and then it'll return that reference back to me.

37
00:02:19,090 --> 00:02:22,530
The remove method also has a timeout, so we don't have to block forever.

38
00:02:22,530 --> 00:02:27,410
We can has block for a second, 2 seconds, whatever our timer is. And

39
00:02:27,410 --> 00:02:30,390
then remove method will either return a reference within that time, or

40
00:02:30,390 --> 00:02:33,740
it will return null if the timer expires.

41
00:02:33,740 --> 00:02:37,570
Both of these methods remove the object from the queue.

42
00:02:37,570 --> 00:02:43,020
So once poll returns and remove returns, if they return with a reference object,

43
00:02:43,020 --> 00:02:46,610
that reference object is no longer on the queue. The way we use

44
00:02:46,610 --> 00:02:50,980
these is to attach some sort of cleanup mechanism to our types.

45
00:02:50,980 --> 00:02:52,690
So we don't extend our type directly.

46
00:02:52,690 --> 00:02:55,270
Instead, what we do is extend the reference type.

47
00:02:55,270 --> 00:02:57,840
When all strong references to our type are cleared,

48
00:02:57,840 --> 00:03:00,840
the reference object is added to the queue.

49
00:03:00,840 --> 00:03:04,340
We then deque the object from the queue by calling poll or remove.

50
00:03:04,340 --> 00:03:06,440
And then we call its cleanup method or whatever we call

51
00:03:06,440 --> 00:03:08,610
this method to cleanup on our type.

52
00:03:08,610 --> 00:03:12,110
So this time we know the object's been garbageâ€‘collected,

53
00:03:12,110 --> 00:03:22,000
and we know we can now clean up any data we want to on this type. So again, let's take a look at a demo of this.

