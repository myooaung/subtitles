1
00:00:03,340 --> 00:00:05,420
So now that we've seen some code,

2
00:00:05,420 --> 00:00:09,980
how are these things actually used? Well a WeakReference, this is

3
00:00:09,980 --> 00:00:12,570
often used in conjunction with something called a WeakHashMap, and

4
00:00:12,570 --> 00:00:16,910
we'll see an example this in a moment. And we use this to associate

5
00:00:16,910 --> 00:00:19,680
metadata with another type.

6
00:00:19,680 --> 00:00:21,920
Now the metadata here could be just some data we

7
00:00:21,920 --> 00:00:23,560
want to associate with that type.

8
00:00:23,560 --> 00:00:25,850
It doesn't have to be really metadata.

9
00:00:25,850 --> 00:00:29,640
It might just be extra data we need to add to the type.

10
00:00:29,640 --> 00:00:33,790
For example, if we have a type that's marked as final, so we can't extend it.

11
00:00:33,790 --> 00:00:35,640
But in certain circumstances,

12
00:00:35,640 --> 00:00:39,830
we'd like to extend it and add extra fields to it, then the WeakHashMap

13
00:00:39,830 --> 00:00:43,360
and the WeakReference provide us with a way of doing that, and we'll see

14
00:00:43,360 --> 00:00:45,560
that in a moment. As we said to do that,

15
00:00:45,560 --> 00:00:49,870
we use something called a WeakHashMap. The SoftReference,

16
00:00:49,870 --> 00:00:53,340
an example given for this is caching.

17
00:00:53,340 --> 00:00:57,120
People often say that you can use a SoftReference to cache things in memory.

18
00:00:57,120 --> 00:01:00,120
The idea here is I load into memory some large object,

19
00:01:00,120 --> 00:01:03,260
maybe an image or some object that's expensive to create,

20
00:01:03,260 --> 00:01:06,340
maybe something I need to go to the server to get.

21
00:01:06,340 --> 00:01:10,920
I have a strong reference to it, and I create a soft reference to it.

22
00:01:10,920 --> 00:01:13,970
When I no longer need the object, I can set the strong reference to

23
00:01:13,970 --> 00:01:18,130
null, but the soft reference is still around. And what this means is I

24
00:01:18,130 --> 00:01:21,780
can easily retrieve this object if I need to by going through the soft

25
00:01:21,780 --> 00:01:25,530
reference. If there's any memory pressure, then this object will go

26
00:01:25,530 --> 00:01:29,560
away, and the SoftReference when I call get on it will return null as

27
00:01:29,560 --> 00:01:32,250
we've seen with the WeakReference. And finally, there's a

28
00:01:32,250 --> 00:01:36,840
PhantomReference, and this is probably the least used of these reference types.

29
00:01:36,840 --> 00:01:39,100
This allows us to interrupt the garbage collector,

30
00:01:39,100 --> 00:01:43,520
and we can use this to monitor when an object's being collected and to

31
00:01:43,520 --> 00:01:46,420
do something when that object has been collected.

32
00:01:46,420 --> 00:01:49,540
And if this sounds just like the use of finalize in Java,

33
00:01:49,540 --> 00:01:52,420
then essentially that's what you use a PhantomReference for. In

34
00:01:52,420 --> 00:01:55,230
places where you might use finalize, instead,

35
00:01:55,230 --> 00:01:57,070
you could use PhantomReferences. And again,

36
00:01:57,070 --> 00:01:59,540
we'll see an example of that towards the end of this chapter.

37
00:01:59,540 --> 00:02:03,850
So before we go on and take a deeper look at WeakReferences. So we have a soft

38
00:02:03,850 --> 00:02:07,950
reference to an object, as well as a strong reference. Once the strong reference

39
00:02:07,950 --> 00:02:12,760
has been cleared, the soft reference is still available. So the object can be

40
00:02:12,760 --> 00:02:17,720
retrieved by calling get through the soft reference. And people promote this as

41
00:02:17,720 --> 00:02:19,940
a way of doing caching in Java.

42
00:02:19,940 --> 00:02:25,040
Be aware, however, in many circumstances, this is not a great mechanism.

43
00:02:25,040 --> 00:02:27,550
The problems with this are that we have no control over the

44
00:02:27,550 --> 00:02:30,120
cache. You have no control of the cache aging.

45
00:02:30,120 --> 00:02:32,530
You have no control of when anything leaves the cache.

46
00:02:32,530 --> 00:02:35,840
You have no control over caching with at least recently used

47
00:02:35,840 --> 00:02:38,270
write list or a most recently used list.

48
00:02:38,270 --> 00:02:40,740
It's all managed by the garbage collector.

49
00:02:40,740 --> 00:02:48,000
So while soft references can act as a simple cache, they're not great as caches in general.

