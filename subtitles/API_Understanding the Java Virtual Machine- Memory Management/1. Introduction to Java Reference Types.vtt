WEBVTT
1
00:00:01.940 --> 00:00:02.900
Hi.

2
00:00:02.900 --> 00:00:04.500
My name is Kevin Jones,

3
00:00:04.500 --> 00:00:08.400
and this is the Java Reference Classes chapter from Understanding the Java

4
00:00:08.400 --> 00:00:12.340
Virtual Machine: Memory Management class from Pluralsight.

5
00:00:12.340 --> 00:00:16.040
Java has always had the concept of strong references.

6
00:00:16.040 --> 00:00:18.740
These are normal, everyday references to objects.

7
00:00:18.740 --> 00:00:20.980
So when we allocate an object, when we new up an object,

8
00:00:20.980 --> 00:00:23.320
we get back a strong reference.

9
00:00:23.320 --> 00:00:27.940
And we know that objects will not be garbage‑collected

10
00:00:27.940 --> 00:00:30.640
until all these references are released.

11
00:00:30.640 --> 00:00:32.290
So an object will be garbage‑collected when there are

12
00:00:32.290 --> 00:00:34.740
no longer any references to it.

13
00:00:34.740 --> 00:00:38.060
However, since JDK 1.2, since Java 2,

14
00:00:38.060 --> 00:00:40.990
we've had other types of references available to us.

15
00:00:40.990 --> 00:00:45.990
These are special classes in the java.lang.ref package.

16
00:00:45.990 --> 00:00:49.210
If you could see me at the moment, I'm making air quotes around special.

17
00:00:49.210 --> 00:00:51.910
They're special in the way the virtual machine treats them.

18
00:00:51.910 --> 00:00:53.730
It knows these classes exist,

19
00:00:53.730 --> 00:00:57.210
and it knows it has to deal with these classes differently And

20
00:00:57.210 --> 00:00:58.930
these classes are called soft reference,

21
00:00:58.930 --> 00:01:01.640
weak reference, and phantom reference.

22
00:01:01.640 --> 00:01:03.890
We'll take a look at each of these as we go through this

23
00:01:03.890 --> 00:01:06.680
chapter and how each of these things work.

24
00:01:06.680 --> 00:01:08.970
We'll also take a look at two other things,

25
00:01:08.970 --> 00:01:12.160
something called a WeakHashMap and something called a ReferenceQueue,

26
00:01:12.160 --> 00:01:16.060
and how these can be used in our application to help us deal

27
00:01:16.060 --> 00:01:19.250
with certain scenarios that are harder if we didn't have these

28
00:01:19.250 --> 00:01:21.300
special types of weak references.

29
00:01:21.300 --> 00:01:25.180
There are rules when it comes to referencing objects in Java,

30
00:01:25.180 --> 00:01:27.320
and the rules are this.

31
00:01:27.320 --> 00:01:30.250
The strong reference is stronger than a soft reference.

32
00:01:30.250 --> 00:01:33.100
A soft reference is stronger than a weak reference.

33
00:01:33.100 --> 00:01:37.140
And a weak reference is stronger than a phantom reference.

34
00:01:37.140 --> 00:01:40.880
We already know that an object will never be garbage‑collected

35
00:01:40.880 --> 00:01:43.640
so long as there's a strong reference to it.

36
00:01:43.640 --> 00:01:47.580
However, it can be garbage‑collected if there's no strong reference,

37
00:01:47.580 --> 00:01:51.060
but there's a soft, weak, or phantom reference to this thing.

38
00:01:51.060 --> 00:01:54.180
On top of this, softly referenced, weakly referenced,

39
00:01:54.180 --> 00:01:57.160
and phantomly referenced objects each behave differently to the other.

40
00:01:57.160 --> 00:01:59.660
So if I have an object with no strong reference,

41
00:01:59.660 --> 00:02:02.040
but it still has a soft reference to it,

42
00:02:02.040 --> 00:02:03.840
that object will stay in memory.

43
00:02:03.840 --> 00:02:06.870
It will only be collected if there's memory pressure.

44
00:02:06.870 --> 00:02:08.170
So if we're getting to the point where we're going to

45
00:02:08.170 --> 00:02:11.230
get an out‑of‑memory exception, at that point,

46
00:02:11.230 --> 00:02:15.480
the garbage collector will run and collect any softly referenced objects.

47
00:02:15.480 --> 00:02:19.230
If we have an object that has no strong reference,

48
00:02:19.230 --> 00:02:20.990
but has a weak reference to it,

49
00:02:20.990 --> 00:02:24.410
then the weak reference is not strong enough to keep the object alive.

50
00:02:24.410 --> 00:02:27.240
Now notice a soft reference is strong enough to keep the

51
00:02:27.240 --> 00:02:30.040
object alive under certain circumstances.

52
00:02:30.040 --> 00:02:32.520
A weak reference will never keep the object alive.

53
00:02:32.520 --> 00:02:34.410
So the next time the garbage collector runs,

54
00:02:34.410 --> 00:02:38.560
if I have any objects with no strong reference and no soft references,

55
00:02:38.560 --> 00:02:43.540
but with a weak reference, then that object will be garbage‑collected.

56
00:02:43.540 --> 00:02:44.520
And finally,

57
00:02:44.520 --> 00:02:47.860
we have phantom references. Phantom references are very

58
00:02:47.860 --> 00:02:50.310
different from both soft and weak references.

59
00:02:50.310 --> 00:02:50.910
For example,

60
00:02:50.910 --> 00:02:54.580
if I have an object that has a strong reference to it, and I also have a weak

61
00:02:54.580 --> 00:02:58.030
reference or a soft reference to that object, if I take,

62
00:02:58.030 --> 00:02:58.490
for example,

63
00:02:58.490 --> 00:03:01.460
the weak reference and call its get method, that will

64
00:03:01.460 --> 00:03:03.540
return me a reference to the object.

65
00:03:03.540 --> 00:03:05.740
A phantom reference does not behave this way.

66
00:03:05.740 --> 00:03:09.250
Once I have an object and I have a phantom reference to it,

67
00:03:09.250 --> 00:03:11.820
it doesn't matter if that object is alive or not.

68
00:03:11.820 --> 00:03:15.580
I can never retrieve the object through the phantom reference. So

69
00:03:15.580 --> 00:03:23.000
the phantom reference must be there for something, and we'll see later on an example of where this thing may be used.

