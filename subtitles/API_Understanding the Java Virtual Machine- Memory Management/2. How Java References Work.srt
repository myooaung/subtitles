1
00:00:03,140 --> 00:00:06,500
So how do these reference types work?

2
00:00:06,500 --> 00:00:08,850
We'll use an example here of a weak reference, but

3
00:00:08,850 --> 00:00:11,180
similar ideas apply to soft references,

4
00:00:11,180 --> 00:00:14,800
assuming that the softly referenced object has been garbageâ€‘collected.

5
00:00:14,800 --> 00:00:16,940
So the idea is something like this.

6
00:00:16,940 --> 00:00:20,200
We allocate a new object, so here we're doing Person person = new Person,

7
00:00:20,200 --> 00:00:24,070
and we have a strong reference to this person object.

8
00:00:24,070 --> 00:00:27,390
And then we come along and we create a weak reference to the object.

9
00:00:27,390 --> 00:00:31,810
And where we do that is by doing new WeakReference and passing the weak

10
00:00:31,810 --> 00:00:36,590
reference a reference to our person object. So the WeakReference has now

11
00:00:36,590 --> 00:00:40,980
wrapped up the person strong reference, and we show that here as we have a

12
00:00:40,980 --> 00:00:42,790
person object with a reference to it.

13
00:00:42,790 --> 00:00:46,360
We have a WeakReference object with a strong reference to that. And

14
00:00:46,360 --> 00:00:51,400
then the WeakReference object holds a weak reference onto the person

15
00:00:51,400 --> 00:00:54,040
object shown here by the dotted line.

16
00:00:54,040 --> 00:00:58,570
If we then take our weak reference and call get on it,

17
00:00:58,570 --> 00:01:01,050
that returns a strong reference to the object. So we can say

18
00:01:01,050 --> 00:01:05,630
Person p = wr.get, and that returns a strong reference to the

19
00:01:05,630 --> 00:01:09,040
person object that already exists.

20
00:01:09,040 --> 00:01:13,790
Now suppose we set the person reference to null. Now at this point,

21
00:01:13,790 --> 00:01:17,640
we're assuming that no garbage collection happens. So we

22
00:01:17,640 --> 00:01:21,160
have no strong reference to the person object now, but we

23
00:01:21,160 --> 00:01:23,980
still have a weak reference to it.

24
00:01:23,980 --> 00:01:28,640
And so long as there's no garbage collector, that object is still alive.

25
00:01:28,640 --> 00:01:32,730
We can now call wr.get and return the strong reference to that

26
00:01:32,730 --> 00:01:36,460
object. So long as no garbage collection has happened,

27
00:01:36,460 --> 00:01:39,230
that object is still available and can be retrieved

28
00:01:39,230 --> 00:01:41,610
through the weak reference. However,

29
00:01:41,610 --> 00:01:44,950
if we have a scenario that was similar to the above, but we set the

30
00:01:44,950 --> 00:01:48,020
person reference to null, so we set the strong reference to a null, and

31
00:01:48,020 --> 00:01:50,300
then the garbage collector runs, and we show that here by calling

32
00:01:50,300 --> 00:01:54,830
System.gc. Now the person object goes away.

33
00:01:54,830 --> 00:01:57,420
So our person reference is set to null, and the weakly

34
00:01:57,420 --> 00:02:01,270
referenced object is now no longer referencing anything. At

35
00:02:01,270 --> 00:02:07,440
this point, if we call wr.get, then we return null. So p is now referencing null.

36
00:02:07,440 --> 00:02:10,010
Person's referencing null. There's no strongly referenced

37
00:02:10,010 --> 00:02:16,000
object in memory for us to reference anymore. So let's write some code to see that.

