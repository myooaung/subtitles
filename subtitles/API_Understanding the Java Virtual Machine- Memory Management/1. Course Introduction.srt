1
00:00:01,740 --> 00:00:04,520
Hi, my name is Kevin Jones.

2
00:00:04,520 --> 00:00:07,260
And this is the introduction chapter to the Understanding the

3
00:00:07,260 --> 00:00:09,870
Java Virtual Machine: Memory Management class.

4
00:00:09,870 --> 00:00:11,230
In this class,

5
00:00:11,230 --> 00:00:13,680
we're going to take a look at various aspects of garbage collection

6
00:00:13,680 --> 00:00:16,840
and memory management in the Java virtual machine,

7
00:00:16,840 --> 00:00:21,950
including how the GC works, how we can interact with the garbage collector,

8
00:00:21,950 --> 00:00:23,870
both from an external point of view, i.e.

9
00:00:23,870 --> 00:00:28,750
using some of the tools that the Java virtual machine provides for us,

10
00:00:28,750 --> 00:00:31,080
and also how we can interact with the garbage collector

11
00:00:31,080 --> 00:00:34,700
internally using some of the classes within the VM.

12
00:00:34,700 --> 00:00:36,490
Before we do that,

13
00:00:36,490 --> 00:00:40,340
I think it's good to understand why we need garbage collection at all.

14
00:00:40,340 --> 00:00:44,340
So in languages before Java, such a C and C++,

15
00:00:44,340 --> 00:00:48,150
whenever we allocated memory, so in this example where we allocate an object,

16
00:00:48,150 --> 00:00:49,200
at some point,

17
00:00:49,200 --> 00:00:53,140
we need to remember to delete that object and to free up that memory.

18
00:00:53,140 --> 00:00:56,240
If we didn't do that, we'd end up with a memory leak.

19
00:00:56,240 --> 00:00:58,360
In Java, that's not the case.

20
00:00:58,360 --> 00:01:02,090
So in Java, we can allocate an object, we can use it,

21
00:01:02,090 --> 00:01:04,470
and then when that object is no longer being referenced,

22
00:01:04,470 --> 00:01:08,690
the garbage collector will release the memory used by that project.

23
00:01:08,690 --> 00:01:12,040
There are also issues around who should delete an object.

24
00:01:12,040 --> 00:01:16,640
So here we call a method called getAccount that returns an account object.

25
00:01:16,640 --> 00:01:18,660
Who actually owns that object?

26
00:01:18,660 --> 00:01:22,910
Is it the receiver of the account object, so am I responsible for deleting it?

27
00:01:22,910 --> 00:01:27,040
Or is it the giver of the object, the thing that implements getAccount.

28
00:01:27,040 --> 00:01:31,510
If we're not clear about that, and neither side deletes the object,

29
00:01:31,510 --> 00:01:33,140
we end up with a memory leak.

30
00:01:33,140 --> 00:01:35,980
If we're not clear about that and both sides delete the object,

31
00:01:35,980 --> 00:01:38,960
we'll end up with some null pointer exception later down the line,

32
00:01:38,960 --> 00:01:40,900
which will be very, very hard track down.

33
00:01:40,900 --> 00:01:43,680
Finally, we can use objects with some confidence.

34
00:01:43,680 --> 00:01:46,460
So so long as I have a reference to an object,

35
00:01:46,460 --> 00:01:50,490
there's no way the garbage collector will free up that memory.

36
00:01:50,490 --> 00:01:53,240
I will always be able to hold onto that object and use it.

37
00:01:53,240 --> 00:01:54,500
In other environments,

38
00:01:54,500 --> 00:01:58,160
such a C++, a thread in the background may take a reference

39
00:01:58,160 --> 00:02:00,540
to that object and delete the object.

40
00:02:00,540 --> 00:02:01,860
When I then come to use it,

41
00:02:01,860 --> 00:02:05,240
I know of a pointer that's pointing at nothing, and I end up with either

42
00:02:05,240 --> 00:02:09,020
memory corruption or with the null pointer exception somewhere later in

43
00:02:09,020 --> 00:02:11,070
the code, again something else that's very,

44
00:02:11,070 --> 00:02:14,340
very hard to track down. Garbage collectors make a promise, and

45
00:02:14,340 --> 00:02:18,350
that promise is they claim no live objects.

46
00:02:18,350 --> 00:02:21,800
However, garbage collectors make no promise about dead objects.

47
00:02:21,800 --> 00:02:22,860
They may collect them.

48
00:02:22,860 --> 00:02:25,770
They may not that. If they do collect them, you don't

49
00:02:25,770 --> 00:02:27,370
know when they're going to run,

50
00:02:27,370 --> 00:02:31,190
i.e. when that memory is going to be reclaimed. So here,

51
00:02:31,190 --> 00:02:32,170
for example,

52
00:02:32,170 --> 00:02:35,470
we allocate an account object, we do new Account, and we have something that

53
00:02:35,470 --> 00:02:39,240
references a block of memory that contains that account object.

54
00:02:39,240 --> 00:02:44,840
If it's some later stage, we take that same variable, point it at a new account,

55
00:02:44,840 --> 00:02:48,780
you're now referencing a new piece of memory and a new Account object.

56
00:02:48,780 --> 00:02:52,320
The only guarantee that we have, and it's a good guarantee, is that that

57
00:02:52,320 --> 00:02:55,600
second account object will be live forever. So long as we have a reference

58
00:02:55,600 --> 00:02:58,740
to it, the garbage collector won't collect it.

59
00:02:58,740 --> 00:03:01,940
We have no guarantees about the old account object.

60
00:03:01,940 --> 00:03:06,480
It's no longer being referenced, and it may be reclaimed, but it may not.

61
00:03:06,480 --> 00:03:09,280
Even if we have an environment like Java where the garbage collector

62
00:03:09,280 --> 00:03:13,320
will run, we don't know when it will run, and we don't know that it'll

63
00:03:13,320 --> 00:03:16,340
run before the end of our application.

64
00:03:16,340 --> 00:03:19,740
So a quick note on Java versions for this course.

65
00:03:19,740 --> 00:03:22,290
So the world still runs on Java 8.

66
00:03:22,290 --> 00:03:25,040
Well, at least Java 8 is still widely used.

67
00:03:25,040 --> 00:03:28,930
However, this course is written on Java 11, but that's fine.

68
00:03:28,930 --> 00:03:31,840
I wanted to make sure that with this course, whether you're using

69
00:03:31,840 --> 00:03:35,700
Java 8 all the way through Java 11 or beyond, the course is still

70
00:03:35,700 --> 00:03:38,840
relevant for you. So certain things change.

71
00:03:38,840 --> 00:03:43,840
So, for example, in Java 7, the G1 garbage collector was introduced.

72
00:03:43,840 --> 00:03:47,790
It was actually produced in Java 6, but in Java 7, it was made official.

73
00:03:47,790 --> 00:03:52,790
In Java 6, it was just experimental. And then other things changed in Java 9.

74
00:03:52,790 --> 00:03:57,340
So in Java 9, the CMS garbage collector was deprecated,

75
00:03:57,340 --> 00:04:00,930
finalizers were deprecated, and something called the cleaner was

76
00:04:00,930 --> 00:04:06,100
introduced. But I still cover all of these things in the course. So

77
00:04:06,100 --> 00:04:09,170
I'll still mention finalizes because they're still widely used in

78
00:04:09,170 --> 00:04:12,910
Java 8. I still mention the CMS garbage collector because that's

79
00:04:12,910 --> 00:04:15,640
still widely used in Java 8.

80
00:04:15,640 --> 00:04:20,940
I talk about the G1 garbage collector because that's used from Java 7 onwards.

81
00:04:20,940 --> 00:04:23,690
And I talk about the cleaner because that's used from Java 9

82
00:04:23,690 --> 00:04:32,000
onwards. So hopefully, whichever version of Java you're using, you'll find many useful things in the course.

