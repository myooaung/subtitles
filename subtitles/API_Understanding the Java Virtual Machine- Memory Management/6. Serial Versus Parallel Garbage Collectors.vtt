WEBVTT
1
00:00:02.610 --> 00:00:04.300
Write at the start of this talk,

2
00:00:04.300 --> 00:00:07.820
we said the Java has different garbage collectors,

3
00:00:07.820 --> 00:00:10.130
and we can choose which garbage collector to use by

4
00:00:10.130 --> 00:00:13.280
passing a flag to the virtual machine.

5
00:00:13.280 --> 00:00:14.280
So we'll see those flags here.

6
00:00:14.280 --> 00:00:18.360
We pass ‑XX and then +UseSerialGC, +UseParallelGC,

7
00:00:18.360 --> 00:00:24.190
+UseParallelOldGC to choose one of these garbage collectors.

8
00:00:24.190 --> 00:00:26.630
There's also something called the concurrent mark and sweep

9
00:00:26.630 --> 00:00:30.790
collector and also the G1 garbage collector.

10
00:00:30.790 --> 00:00:33.820
And we'll take a look at how each of these collectors works now.

11
00:00:33.820 --> 00:00:37.460
So the first collectors we'll take a look at are serial collector,

12
00:00:37.460 --> 00:00:40.930
the parallel collector, and the parallel old collector.

13
00:00:40.930 --> 00:00:42.390
These are all very similar,

14
00:00:42.390 --> 00:00:44.960
and they all work in a way that we've seen previously.

15
00:00:44.960 --> 00:00:48.590
So we have this concept of Eden space, survivor space, old space.

16
00:00:48.590 --> 00:00:53.390
There's mark and sweep algorithms, and then there's a copy algorithm.

17
00:00:53.390 --> 00:00:57.140
Where they differ is the amount of concurrency each collector has.

18
00:00:57.140 --> 00:01:00.220
So the serial collector is single‑threaded,

19
00:01:00.220 --> 00:01:02.410
which means this is a stop‑the‑world collector.

20
00:01:02.410 --> 00:01:05.200
So we stop everything and run the garbage collector.

21
00:01:05.200 --> 00:01:08.280
We can use mark and sweep as we've seen previously.

22
00:01:08.280 --> 00:01:10.410
It does copying as we've seen previously.

23
00:01:10.410 --> 00:01:13.890
And this collector is okay for small applications running on the client.

24
00:01:13.890 --> 00:01:19.740
It's not suitable for large‑scale enterprise applications running on the server.

25
00:01:19.740 --> 00:01:24.010
The parallel collector uses multiple threads for a minor collection,

26
00:01:24.010 --> 00:01:28.640
but it has a stop‑the‑world single thread for major collection.

27
00:01:28.640 --> 00:01:32.850
Apart from that, it uses the same process as the serial collector.

28
00:01:32.850 --> 00:01:36.060
So again, Eden spaces, survivor spaces, old spaces.

29
00:01:36.060 --> 00:01:38.490
It's exactly the same, but on parallel threads.

30
00:01:38.490 --> 00:01:41.970
This collector is suitable for use on servers as the

31
00:01:41.970 --> 00:01:45.370
concurrency helps the scalability of the collector,

32
00:01:45.370 --> 00:01:47.620
and we have fewer stop‑the‑world events.

33
00:01:47.620 --> 00:01:51.640
The parallel old collector is similar to the parallel collector,

34
00:01:51.640 --> 00:01:55.900
but it uses multiple threads, both for minor and for major collections.

35
00:01:55.900 --> 00:02:01.010
So when we're collecting the old space, we have multiple threads there as well.

36
00:02:01.010 --> 00:02:01.620
And these days,

37
00:02:01.620 --> 00:02:04.410
we tend to prefer to use this collector over the parallel

38
00:02:04.410 --> 00:02:07.510
collector as with the parallel old collector,

39
00:02:07.510 --> 00:02:08.600
we have concurrence,

40
00:02:08.600 --> 00:02:13.340
both at during minor collections and during major collections.

41
00:02:13.340 --> 00:02:17.080
We also have the concurrent mark and sweep collector.

42
00:02:17.080 --> 00:02:20.150
Now this collector only collects old space as it only

43
00:02:20.150 --> 00:02:22.170
runs during a major garbage collection.

44
00:02:22.170 --> 00:02:26.600
And this collector is different to the previous collectors we've seen in that

45
00:02:26.600 --> 00:02:30.440
it's no longer a bump the pointer allocation collector.

46
00:02:30.440 --> 00:02:33.790
If you remember earlier, we looked at how memory is allocated.

47
00:02:33.790 --> 00:02:35.740
In most circumstances,

48
00:02:35.740 --> 00:02:39.240
we allocate memory and then simply move a pointer along to the next place

49
00:02:39.240 --> 00:02:42.440
in memory and the next allocation that happens there.

50
00:02:42.440 --> 00:02:45.940
The concurrent mark and sweep collector no longer works this way.

51
00:02:45.940 --> 00:02:50.560
Instead, what the CMS collector does is it fragments the heap,

52
00:02:50.560 --> 00:02:55.040
and it manages sets of free lists for each of these fragments.

53
00:02:55.040 --> 00:02:58.860
It tries to allocate the object into one of these fragments and so has

54
00:02:58.860 --> 00:03:01.640
to track these free lists and update the free lists.

55
00:03:01.640 --> 00:03:06.040
And this, in certain circumstances, will cause the collector to run more slowly.

56
00:03:06.040 --> 00:03:08.080
However, it's designed to be a low‑latency collector.

57
00:03:08.080 --> 00:03:12.080
So the throughput should be much higher with this than it is with the

58
00:03:12.080 --> 00:03:16.570
parallel collectors and the parallel old collectors.

59
00:03:16.570 --> 00:03:20.430
The way the CMS collector works is that it goes through different phases.

60
00:03:20.430 --> 00:03:25.760
Some of these phases are stop the world, and some of them happen concurrently.

61
00:03:25.760 --> 00:03:27.200
So the phases of these.

62
00:03:27.200 --> 00:03:30.450
There's an initial mark phase, and this is a stop‑the‑world phase.

63
00:03:30.450 --> 00:03:33.550
And what this phase does is it follows all the root

64
00:03:33.550 --> 00:03:35.750
references and marks those objects.

65
00:03:35.750 --> 00:03:37.330
So this can happen very quickly.

66
00:03:37.330 --> 00:03:39.730
So it's just the root references that are followed here.

67
00:03:39.730 --> 00:03:41.630
There's then a concurrent mark phase.

68
00:03:41.630 --> 00:03:46.600
And the concurrent mark phase traverses the object graph of the

69
00:03:46.600 --> 00:03:50.240
objects that were marked in the original mark phase.

70
00:03:50.240 --> 00:03:51.420
This happens concurrently.

71
00:03:51.420 --> 00:03:52.670
We don't stop any threads.

72
00:03:52.670 --> 00:03:57.550
We're just running this alongside all the current threads in the application.

73
00:03:57.550 --> 00:04:00.870
So this should happen very quickly. If any allocations

74
00:04:00.870 --> 00:04:03.510
are made while this phase is running,

75
00:04:03.510 --> 00:04:06.240
then those allocations are automatically marked as live.

76
00:04:06.240 --> 00:04:06.770
So again,

77
00:04:06.770 --> 00:04:09.780
we go through write barrier, and that write barrier will just mark

78
00:04:09.780 --> 00:04:12.920
the allocations and tell the garbage collector that these things

79
00:04:12.920 --> 00:04:17.070
were live. There's then a remark phase. The remark phase is again

80
00:04:17.070 --> 00:04:19.150
a stop‑the‑world event.

81
00:04:19.150 --> 00:04:21.440
And what happens now is we look for objects that have been

82
00:04:21.440 --> 00:04:25.540
allocated after the concurrent mark phase was stopped.

83
00:04:25.540 --> 00:04:28.330
So again, we're ignoring all the previous objects that have been marked.

84
00:04:28.330 --> 00:04:28.700
And again,

85
00:04:28.700 --> 00:04:34.640
this phase should happen very quickly. There's then the concurrent sweep phase.

86
00:04:34.640 --> 00:04:38.460
It's at this phase that we can free up all the objects that weren't marked

87
00:04:38.460 --> 00:04:43.570
during the previous phase. And then, finally, we reset. And resetting just

88
00:04:43.570 --> 00:04:45.840
resets everything ready for the next run.

89
00:04:45.840 --> 00:04:47.150
So it works something like this.

90
00:04:47.150 --> 00:04:49.480
Here we're showing an Eden space, a couple of

91
00:04:49.480 --> 00:04:52.070
survivor spaces, and the old space.

92
00:04:52.070 --> 00:04:52.970
In the Eden space,

93
00:04:52.970 --> 00:04:55.810
we have allocated memory marked in green. And in the old

94
00:04:55.810 --> 00:04:58.340
space, we have allocated memory marked in blue.

95
00:04:58.340 --> 00:05:02.850
When a GC runs, objects that survived the garbage collect that are

96
00:05:02.850 --> 00:05:06.620
below the threshold count for promoting to old space get moved to

97
00:05:06.620 --> 00:05:10.840
the second survivor space just as in previous garbage collectors.

98
00:05:10.840 --> 00:05:15.080
And then objects that have passed the garbage collection count are

99
00:05:15.080 --> 00:05:17.340
promoted into old space.

100
00:05:17.340 --> 00:05:19.420
But now we're not using bump the pointer.

101
00:05:19.420 --> 00:05:23.170
Now these objects are allocated somewhere inside old space,

102
00:05:23.170 --> 00:05:26.400
and that's shown by the dark blue areas on this diagram. When

103
00:05:26.400 --> 00:05:30.140
the CMS GC runs and looks at old space,

104
00:05:30.140 --> 00:05:33.310
any objects in old space that aren't marked will be removed.

105
00:05:33.310 --> 00:05:41.000
So we end up with this fragmented space, and we end up with the fragments being managed by free lists.

