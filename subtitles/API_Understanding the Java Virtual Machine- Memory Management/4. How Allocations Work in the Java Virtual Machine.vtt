WEBVTT
1
00:00:04.440 --> 00:00:08.330
So the other side of collection is allocation.

2
00:00:08.330 --> 00:00:11.140
What happens when we allocate an object in Java?

3
00:00:11.140 --> 00:00:12.120
Well ideally,

4
00:00:12.120 --> 00:00:15.320
we'd like this allocation to be as quick as possible. So the simplest

5
00:00:15.320 --> 00:00:17.950
way of doing this is to use pointer arithmetic.

6
00:00:17.950 --> 00:00:21.440
So here we have a pointer that's pointing to the beginning of a heap.

7
00:00:21.440 --> 00:00:24.910
When we allocate an object, that object's allocated at the

8
00:00:24.910 --> 00:00:28.800
pointer, and our pointer is simply moved. So it points to

9
00:00:28.800 --> 00:00:31.940
the next free space in the heap.

10
00:00:31.940 --> 00:00:35.920
The next allocation allocates an object, moves the pointer.

11
00:00:35.920 --> 00:00:38.520
Next allocation, allocates the object, moves the

12
00:00:38.520 --> 00:00:41.520
pointer. And moving the pointer is very,

13
00:00:41.520 --> 00:00:42.550
very cheap.

14
00:00:42.550 --> 00:00:43.280
It's a very,

15
00:00:43.280 --> 00:00:47.820
very quick way of allocating memory. So the previous picture

16
00:00:47.820 --> 00:00:50.990
is fine in a single‑thread environment.

17
00:00:50.990 --> 00:00:53.080
But imagine what happens in a multi‑thread environment.

18
00:00:53.080 --> 00:00:56.650
Here you have two pointers both competing for the same

19
00:00:56.650 --> 00:00:58.640
piece of memory at the same time.

20
00:00:58.640 --> 00:01:03.090
This involves locks, and locks are expensive. So in Java, we use

21
00:01:03.090 --> 00:01:08.020
something called a thread local allocation buffer or a TLAB. And each

22
00:01:08.020 --> 00:01:12.350
thread get its own buffer inside the Eden space.

23
00:01:12.350 --> 00:01:15.200
The threads can only allocate into that buffer.

24
00:01:15.200 --> 00:01:17.870
There's no contention for memory now. Each thread gets its own

25
00:01:17.870 --> 00:01:21.380
buffer, and each thread can just allocate space within that buffer

26
00:01:21.380 --> 00:01:23.760
without competing with another thread.

27
00:01:23.760 --> 00:01:30.000
So there's no locking required. And again, this makes allocation very, very quick.

