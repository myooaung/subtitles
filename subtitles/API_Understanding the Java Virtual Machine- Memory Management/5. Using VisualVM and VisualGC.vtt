WEBVTT
1
00:00:03.340 --> 00:00:08.060
The other tool we want to take a look at is VisualVM.

2
00:00:08.060 --> 00:00:13.200
This is installed along with the JDK as part of the standard download.

3
00:00:13.200 --> 00:00:17.040
You can launch it from a command line just by typing jvisualvm.

4
00:00:17.040 --> 00:00:19.710
It's also available as a standalone tool.

5
00:00:19.710 --> 00:00:24.740
If you go to a visualvm.java.net, you can download it and run it from here.

6
00:00:24.740 --> 00:00:31.570
To run VisualVM, we can go to a command prompt, type jvisualvm, it'll run up.

7
00:00:31.570 --> 00:00:35.730
The tool give us access to various monitoring tools for a Java application.

8
00:00:35.730 --> 00:00:38.820
So, for example, if I go and click on the IntelliJ platform here,

9
00:00:38.820 --> 00:00:42.260
so we're running IntelliJ IDEA at the moment.

10
00:00:42.260 --> 00:00:45.740
From inside here, we get an overview of the application.

11
00:00:45.740 --> 00:00:49.180
If we click on Monitor, we see some of the monitoring information.

12
00:00:49.180 --> 00:00:52.310
If we click on Threads, and you can see threading information.

13
00:00:52.310 --> 00:00:54.340
You can do profiling.

14
00:00:54.340 --> 00:00:58.350
There's a sample there, and we can run the profiler.

15
00:00:58.350 --> 00:01:02.630
Notice that from the monitor, we do have access to the GC.

16
00:01:02.630 --> 00:01:06.720
So if I uncheck CPU and Classes and Threads,

17
00:01:06.720 --> 00:01:09.730
then we do get some information about the garbage collection behavior,

18
00:01:09.730 --> 00:01:12.910
but we don't get much information here.

19
00:01:12.910 --> 00:01:16.990
To display more information, we need to install VisualGC.

20
00:01:16.990 --> 00:01:20.100
So this comes as a plugin for VisualVM, and this,

21
00:01:20.100 --> 00:01:22.090
we'll see in a moment, gives us much,

22
00:01:22.090 --> 00:01:25.370
much more information about what's happening inside the virtual

23
00:01:25.370 --> 00:01:29.050
machine with regards to garbage collection. So we've seen

24
00:01:29.050 --> 00:01:37.640
running VisualVM. To install a plugin, we go to Tools, Plugins.

25
00:01:37.640 --> 00:01:39.340
One of these is VisualGC.

26
00:01:39.340 --> 00:01:43.710
If I select that and click on Install and go through the

27
00:01:43.710 --> 00:01:53.040
wizard, and that plugin is now installed.

28
00:01:53.040 --> 00:01:55.640
If I close down the app here,

29
00:01:55.640 --> 00:02:00.720
the view of the app, and reopen it again, we now see VisualGC on

30
00:02:00.720 --> 00:02:04.490
the tab, and we'll see we get lots more information about the

31
00:02:04.490 --> 00:02:06.840
garbage collection that's happening.

32
00:02:06.840 --> 00:02:09.700
So if we go back to the application we saw previously,

33
00:02:09.700 --> 00:02:11.600
and then one slight change here.

34
00:02:11.600 --> 00:02:14.140
I've just added a Thread.sleep call.

35
00:02:14.140 --> 00:02:17.960
The reason I've done this is it will enable us to see more easily what's

36
00:02:17.960 --> 00:02:21.400
happening inside VisualGC when we run the application.

37
00:02:21.400 --> 00:02:23.720
So from the command prompt, if I run the application,

38
00:02:23.720 --> 00:02:26.460
we notice this is going to run a lot more slowly now because of that

39
00:02:26.460 --> 00:02:31.210
Thread.sleep call. If I go into VisualGC, there's the application. And

40
00:02:31.210 --> 00:02:35.580
if I doubleâ€‘click on this, we load up the details. Go to the VisualGC

41
00:02:35.580 --> 00:02:39.620
tab, move this out of the way, and then what we can see here is

42
00:02:39.620 --> 00:02:43.770
allocations as it's happening. So we can see that there's memory in the

43
00:02:43.770 --> 00:02:48.570
S1 survivor space. We can see the Eden space filling up, the memory

44
00:02:48.570 --> 00:02:49.940
being allocated.

45
00:02:49.940 --> 00:02:52.630
Then, as the Eden space is full and the garbage collector runs,

46
00:02:52.630 --> 00:02:56.020
we've seen the survivor spaces flip over so the memory is now

47
00:02:56.020 --> 00:02:59.110
allocated inside the S0 survivor space.

48
00:02:59.110 --> 00:03:01.170
And if we leave this to run a little longer, again,

49
00:03:01.170 --> 00:03:04.420
we'll see the Eden space fill, a garbage collection

50
00:03:04.420 --> 00:03:12.840
happen, and the S1 and S0 spaces flip again.

51
00:03:12.840 --> 00:03:15.300
Notice that we are generating memory inside the old generation

52
00:03:15.300 --> 00:03:18.620
here. So the old generation is accumulating memory, but at the

53
00:03:18.620 --> 00:03:19.880
moment it's accumulating very,

54
00:03:19.880 --> 00:03:23.160
very slowly. And at the moment, there have been no GCs inside the old

55
00:03:23.160 --> 00:03:33.450
generation. Now we've just seen a single GC has now happened inside the

56
00:03:33.450 --> 00:03:36.590
old generation. So again, with this application running relatively slowly

57
00:03:36.590 --> 00:03:42.670
and allocating relatively infrequently, we see CGs happening less frequently.

58
00:03:42.670 --> 00:03:43.600
The information at the bottom,

59
00:03:43.600 --> 00:03:47.700
the histogram, is showing information about the objects that are in the

60
00:03:47.700 --> 00:03:51.590
survivor spaces. So this is trying to show the what's called a tenuring

61
00:03:51.590 --> 00:03:57.990
threshold, the number of objects that have survived garbage collects. So

62
00:03:57.990 --> 00:04:01.700
the histogram shows the number of objects that have a garbage collection,

63
00:04:01.700 --> 00:04:06.210
so I have a count of 1, 2, 3, 4, 5, and then what happens to those objects

64
00:04:06.210 --> 00:04:09.750
as more more garbage collections happen. A better example of that is with

65
00:04:09.750 --> 00:04:11.240
IntelliJ IDEA.

66
00:04:11.240 --> 00:04:13.160
So here, you get more information.

67
00:04:13.160 --> 00:04:16.060
We can see we have objects that have survived a single garbage collect, two

68
00:04:16.060 --> 00:04:19.430
garbage collects, three garbage collects, and so on and so forth. We find

69
00:04:19.430 --> 00:04:24.230
that the Java virtual machine will modify its behavior depending on the

70
00:04:24.230 --> 00:04:28.010
behavior of your application. It will try and predict as best it can your

71
00:04:28.010 --> 00:04:32.730
application's behavior based on previous behavior and then, based on that,

72
00:04:32.730 --> 00:04:36.320
try and organize the garbage collection audit as best it can, so how high

73
00:04:36.320 --> 00:04:39.790
to set the tenuring threshold, how often to run garbage collections, how

74
00:04:39.790 --> 00:04:43.000
much memory should be allocated to Eden space and the survivor spaces, how

75
00:04:43.000 --> 00:04:45.940
much memory should be allocated to the old spaces.

76
00:04:45.940 --> 00:04:51.020
So if I go back to our application and kill it and go back into

77
00:04:51.020 --> 00:04:55.240
IDEA and take out the Thread.sleep call and build the application

78
00:04:55.240 --> 00:05:01.040
again and then go back and run the application and go back into

79
00:05:01.040 --> 00:05:04.070
jvisualvm, close the old window,

80
00:05:04.070 --> 00:05:08.200
go to the applications, and reopen the window, we'll now see very different

81
00:05:08.200 --> 00:05:11.830
behavior inside VisualGC. So we're now allocating memory very,

82
00:05:11.830 --> 00:05:12.750
very quickly.

83
00:05:12.750 --> 00:05:15.440
So we see the Eden space is filling much more quickly. There

84
00:05:15.440 --> 00:05:19.690
are going to be more old generation garbage collections at the

85
00:05:19.690 --> 00:05:22.030
moment. We're up to 57, 58, 59.

86
00:05:22.030 --> 00:05:24.090
So that's counting very, very quickly.

87
00:05:24.090 --> 00:05:26.370
Also the number of collections in Eden space is rising very,

88
00:05:26.370 --> 00:05:29.140
very quickly as well.

89
00:05:29.140 --> 00:05:35.340
If I kill the application again and run it with a G1 garbage collector,

90
00:05:35.340 --> 00:05:43.240
go back into VisualGC, go to the Applications tab, look at the

91
00:05:43.240 --> 00:05:47.290
application again, look at the VisualGC tab, again,

92
00:05:47.290 --> 00:05:48.370
we're seeing different behavior.

93
00:05:48.370 --> 00:05:50.260
So again, we're seeing the Eden space memory rise.

94
00:05:50.260 --> 00:05:52.430
We're seeing old memory rise and fall.

95
00:05:52.430 --> 00:05:55.920
We're seeing that the survivor space memory is being allocated.

96
00:05:55.920 --> 00:05:57.880
We see the number of the objects in the tenuring threshold

97
00:05:57.880 --> 00:05:59.810
of 1. And when they get moved around,

98
00:05:59.810 --> 00:06:02.150
we're occasionally seeing objects with a tenuring count of

99
00:06:02.150 --> 00:06:05.740
2 and those being allocated and freed.

100
00:06:05.740 --> 00:06:07.230
Notice the behavior here is very,

101
00:06:07.230 --> 00:06:16.000
very different to the behavior that we saw with the default and standard garbage collector, the serial garbage collector.

