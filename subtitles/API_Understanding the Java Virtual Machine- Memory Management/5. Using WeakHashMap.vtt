WEBVTT
1
00:00:02.640 --> 00:00:06.990
So we said we often use weak references to allow us to

2
00:00:06.990 --> 00:00:09.590
attach so‑called metadata to an object.

3
00:00:09.590 --> 00:00:13.000
And, again, an example being if we have a class that's marked as final,

4
00:00:13.000 --> 00:00:16.440
then we can't derive from my class, we can't extend the class.

5
00:00:16.440 --> 00:00:19.480
And we tend to make this work with something called a WeakHashMap.

6
00:00:19.480 --> 00:00:22.200
So a WeakHashMap is like a hashmap,

7
00:00:22.200 --> 00:00:25.110
except that the key is actually a weak reference to an

8
00:00:25.110 --> 00:00:27.640
object and not a strong reference.

9
00:00:27.640 --> 00:00:31.370
So the idea now is that the key is an object.

10
00:00:31.370 --> 00:00:35.240
Once all strong references to that key are cleared, then the

11
00:00:35.240 --> 00:00:37.540
key itself is removed from the hashmap.

12
00:00:37.540 --> 00:00:40.350
So we store a weak reference to an object as a key,

13
00:00:40.350 --> 00:00:44.070
and then as the value for this key, we store this object's metadata.

14
00:00:44.070 --> 00:00:45.020
And again,

15
00:00:45.020 --> 00:00:47.950
I've placed this in quotes because this could be any extra

16
00:00:47.950 --> 00:00:51.140
data we want associated with this object.

17
00:00:51.140 --> 00:00:53.200
So when the object has no more strong references,

18
00:00:53.200 --> 00:00:57.800
the key is released, and the object's metadata is also released.

19
00:00:57.800 --> 00:00:58.960
So it's something like this.

20
00:00:58.960 --> 00:01:01.880
Diagrammatically, we have a WeakHashMap here.

21
00:01:01.880 --> 00:01:03.110
We allocate an object.

22
00:01:03.110 --> 00:01:04.560
Again, we're using our person object.

23
00:01:04.560 --> 00:01:09.080
And we store a reference in that object inside the WeakHashMap.

24
00:01:09.080 --> 00:01:12.630
The key is held as a weak reference to the object,

25
00:01:12.630 --> 00:01:17.840
and then the value is held as a reference to this object's metadata.

26
00:01:17.840 --> 00:01:21.560
When we release the object, the weak reference also goes away.

27
00:01:21.560 --> 00:01:23.410
And at this point, the value is also cleared,

28
00:01:23.410 --> 00:01:26.640
so the object's metadata also goes away.

29
00:01:26.640 --> 00:01:29.240
So let's see an example of that.

30
00:01:29.240 --> 00:01:31.450
So to show you how to use a WeakHashMap,

31
00:01:31.450 --> 00:01:34.920
I'm going to create a class called Person, and we'll mark this as final.

32
00:01:34.920 --> 00:01:38.650
So this is a class that cannot be extended.

33
00:01:38.650 --> 00:01:42.690
And then I'll create another class called PersonMetaData.

34
00:01:42.690 --> 00:01:43.870
And in this class,

35
00:01:43.870 --> 00:01:46.940
I want to hold a date, and let's say this is the date of when the

36
00:01:46.940 --> 00:01:50.050
person object was downloaded from the internet.

37
00:01:50.050 --> 00:01:53.330
So we'll give our class a constructor, so we'll create a PersonMetaData

38
00:01:53.330 --> 00:01:56.530
constructor. And this constructor will simply set the date.

39
00:01:56.530 --> 00:01:59.740
So we'll say data = new Date.

40
00:01:59.740 --> 00:02:03.440
And we'll also add a toString method here.

41
00:02:03.440 --> 00:02:05.110
And in the ToString method,

42
00:02:05.110 --> 00:02:10.740
we'll simply return the date that this person was created.

43
00:02:10.740 --> 00:02:13.680
So in Main, I'm going to create a WeakHashMap,

44
00:02:13.680 --> 00:02:17.820
and our WeakHashMap is going to have a key to value.

45
00:02:17.820 --> 00:02:18.250
Now remember,

46
00:02:18.250 --> 00:02:21.440
the key is the object that we care about, and the

47
00:02:21.440 --> 00:02:23.610
value is that object's metadata.

48
00:02:23.610 --> 00:02:28.140
So the key will be person, and the value will be of type PersonMetaData.

49
00:02:28.140 --> 00:02:29.650
And we'll just call this thing WeakHashMap,

50
00:02:29.650 --> 00:02:35.740
and we will set it to be a new WeakHashMap of Person to PersonMetaData.

51
00:02:35.740 --> 00:02:39.030
I can then do Person, and I say kevin, that'll be me,

52
00:02:39.030 --> 00:02:47.560
= new Person and then do weakHashMap.put.

53
00:02:47.560 --> 00:02:56.800
And into here, I'm going to put Kevin and new PersonMetaData.

54
00:02:56.800 --> 00:03:00.440
So now I have a strong reference to a person object with kevin,

55
00:03:00.440 --> 00:03:02.760
and I have a weak reference to a person object

56
00:03:02.760 --> 00:03:06.140
that's held inside this WeakHashMap.

57
00:03:06.140 --> 00:03:16.030
If at this point, I do PersonMetaData p = WeakHashMap.get and I pass in Kevin,

58
00:03:16.030 --> 00:03:18.220
then that should retrieve the key.

59
00:03:18.220 --> 00:03:21.670
So I should be able to print out the person object, so

60
00:03:21.670 --> 00:03:23.970
I'll just print out the PersonMetaData.

61
00:03:23.970 --> 00:03:28.250
And we can run this and see what the output looks like.

62
00:03:28.250 --> 00:03:31.760
So I'll run the application, and there we see,

63
00:03:31.760 --> 00:03:36.240
we get a PersonMetaData object back.

64
00:03:36.240 --> 00:03:40.300
So now if I say kevin = null,

65
00:03:40.300 --> 00:03:44.270
so how do we prove this value is no longer in the WeakHashMap? We

66
00:03:44.270 --> 00:03:47.570
can't simply do a WeakHashMap.get now because kevin,

67
00:03:47.570 --> 00:03:48.100
which is the key,

68
00:03:48.100 --> 00:03:51.080
is now null. So it'll try and get a null value as the key when

69
00:03:51.080 --> 00:03:53.510
there isn't a null value of the key inside there.

70
00:03:53.510 --> 00:03:59.940
So instead of that, we can use weakHashMap.containsValue.

71
00:03:59.940 --> 00:04:05.800
So if our WeakHashMap contains the PersonMetaData as a value still,

72
00:04:05.800 --> 00:04:06.930
let's print out the message,

73
00:04:06.930 --> 00:04:12.680
which is still contains key. And if it doesn't, we

74
00:04:12.680 --> 00:04:17.020
print out a message saying key gone.

75
00:04:17.020 --> 00:04:18.720
So if we run this code,

76
00:04:18.720 --> 00:04:23.850
then we see the key has gone. So by setting the key to null and then

77
00:04:23.850 --> 00:04:27.350
running a garbage collection on this thing, the key no longer has a

78
00:04:27.350 --> 00:04:30.900
strong reference to it. That causes the WeakHashMap to give up its

79
00:04:30.900 --> 00:04:32.360
weak reference on the object.

80
00:04:32.360 --> 00:04:43.000
When that weak reference goes away, then the strong reference to the metadata is garbage‑collected.

