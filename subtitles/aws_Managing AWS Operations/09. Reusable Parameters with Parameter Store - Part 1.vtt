WEBVTT
1
00:00:00.740 --> 00:00:03.450
[Autogenerated] All right, let's take a look at parameter store now.

2
00:00:03.450 --> 00:00:07.580
Parameter store is one of my favorite services to use because I

3
00:00:07.580 --> 00:00:10.160
haven't operational in Dev Ops Background.

4
00:00:10.160 --> 00:00:14.770
So parameter management and secrets management is extremely close to my

5
00:00:14.770 --> 00:00:19.040
heart and very important for secure application deployments.

6
00:00:19.040 --> 00:00:23.220
Now systems Manager Parameters Store, like we discuss,

7
00:00:23.220 --> 00:00:27.810
allows us to provide secure, hierarchical storage for our config,

8
00:00:27.810 --> 00:00:31.910
data and secrets so we can store simple strings.

9
00:00:31.910 --> 00:00:33.990
Weaken store passwords.

10
00:00:33.990 --> 00:00:34.430
Really,

11
00:00:34.430 --> 00:00:38.400
anything that could be put into a string or numeric value can

12
00:00:38.400 --> 00:00:42.040
be placed as a parameter in parameter store.

13
00:00:42.040 --> 00:00:44.670
Now there's three different types we have string,

14
00:00:44.670 --> 00:00:47.990
as you can see here we have secure string,

15
00:00:47.990 --> 00:00:51.910
so this is used for passwords and then we have string list and

16
00:00:51.910 --> 00:00:54.550
we'll take a look at all of these here in a second.

17
00:00:54.550 --> 00:00:57.370
So let's just talk about a string parameter first.

18
00:00:57.370 --> 00:01:01.370
Now a string parameter is exactly what it sounds like.

19
00:01:01.370 --> 00:01:06.750
It's a string value that we store is a parameter under a shared key,

20
00:01:06.750 --> 00:01:10.950
so we can see we have Dev database user and then we have

21
00:01:10.950 --> 00:01:13.540
our user one value here at the bottom.

22
00:01:13.540 --> 00:01:18.700
Now, another cool feature is we can look at the history of this parameter.

23
00:01:18.700 --> 00:01:23.650
So if I go in here and I edit this and let's change this to user to,

24
00:01:23.650 --> 00:01:28.360
I save it, I go back in to check it out and I go to history.

25
00:01:28.360 --> 00:01:32.780
We can see the different versions that have been made for this parameter,

26
00:01:32.780 --> 00:01:38.360
so this allows us to quickly identify who's doing what and when it's completed.

27
00:01:38.360 --> 00:01:44.310
Now we can also tag are parameter stores so that we can group it

28
00:01:44.310 --> 00:01:47.680
with our resource groups if needed later on.

29
00:01:47.680 --> 00:01:49.250
So go and go back to overview,

30
00:01:49.250 --> 00:01:52.180
and I actually want to go back to parameter store

31
00:01:52.180 --> 00:01:54.580
and let's look at secure strings.

32
00:01:54.580 --> 00:01:54.740
Now.

33
00:01:54.740 --> 00:01:57.590
Secure strings are exactly what they sound like.

34
00:01:57.590 --> 00:02:03.200
It's a secured string using kms so that plain text value

35
00:02:03.200 --> 00:02:06.140
is actually encrypted and not visible.

36
00:02:06.140 --> 00:02:09.720
So it's important to keep in mind that anyone that's using

37
00:02:09.720 --> 00:02:12.350
these particular parameters need tohave.

38
00:02:12.350 --> 00:02:17.370
The correct I am permissions or kms key grants in order to

39
00:02:17.370 --> 00:02:20.990
decrypt the values so we'll go toe show value here.

40
00:02:20.990 --> 00:02:23.780
But you can see that right now it's hidden.

41
00:02:23.780 --> 00:02:29.280
It's not in plain text or visible in the console, but when I click on show.

42
00:02:29.280 --> 00:02:31.000
You'll see it gives us the value.

43
00:02:31.000 --> 00:02:35.110
And now what just happened is with the click of a button.

44
00:02:35.110 --> 00:02:40.160
We essentially use Kms in the background to decrypt this value

45
00:02:40.160 --> 00:02:43.240
and expose it in the consul as plain text.

46
00:02:43.240 --> 00:02:46.260
And when I click on hide, it's doing the opposite.

47
00:02:46.260 --> 00:02:50.630
It's gonna re encrypt that value and hide it so we can't see it now.

48
00:02:50.630 --> 00:02:54.060
Secure strings have the same history type,

49
00:02:54.060 --> 00:02:56.820
but you can see the difference here is we can decrypt all.

50
00:02:56.820 --> 00:03:02.770
So if I goto overview and I edit this and let's just give this a new value here,

51
00:03:02.770 --> 00:03:05.950
let's just say new password.

52
00:03:05.950 --> 00:03:07.840
I'll click on save changes.

53
00:03:07.840 --> 00:03:12.280
I go back in, we'll show it to make sure it's right and let's go to history.

54
00:03:12.280 --> 00:03:15.750
So now we see our history, which we just looked at before,

55
00:03:15.750 --> 00:03:17.550
but this time we can decrypt.

56
00:03:17.550 --> 00:03:22.790
Also, this is going to run a decrypt command for every version that's visible.

57
00:03:22.790 --> 00:03:25.260
And just like that, we can see our values.

58
00:03:25.260 --> 00:03:29.410
So a strong use case for secure strings are obviously passwords like we're

59
00:03:29.410 --> 00:03:34.210
looking at or even ssh keys that you want to share as key values and

60
00:03:34.210 --> 00:03:38.390
import or any value that matters for compliance.

61
00:03:38.390 --> 00:03:43.590
Now, let's quickly have a quick demo on how we can use these in another service.

62
00:03:43.590 --> 00:03:48.150
So for this one, I went ahead and created a lambda function just for this demo.

63
00:03:48.150 --> 00:03:50.040
So let me go to Lambda.

64
00:03:50.040 --> 00:03:53.730
It's our parameters store Demo Lambda function.

65
00:03:53.730 --> 00:03:55.540
Now, I'm not going to go over the code here,

66
00:03:55.540 --> 00:04:00.340
but I'm importing the boto three client specifically S S M.

67
00:04:00.340 --> 00:04:04.650
And then I'm pulling in a parameter value here and you can see parameter with

68
00:04:04.650 --> 00:04:08.830
our Dev database user value and then I'm just printing it.

69
00:04:08.830 --> 00:04:12.560
So if I execute this and we look at our logs,

70
00:04:12.560 --> 00:04:16.200
you can see user to So that should be what the value

71
00:04:16.200 --> 00:04:19.110
is for this particular parameter.

72
00:04:19.110 --> 00:04:24.360
And it is, Well, let's go ahead and try this with a new parameters.

73
00:04:24.360 --> 00:04:26.380
So let me create a new parameter.

74
00:04:26.380 --> 00:04:29.810
Let's just call it prod password For now,

75
00:04:29.810 --> 00:04:31.440
just to make this easy,

76
00:04:31.440 --> 00:04:33.890
we'll leave the description blank and we'll talk about

77
00:04:33.890 --> 00:04:36.200
the tears here coming up shortly.

78
00:04:36.200 --> 00:04:40.450
I wanted to be a secure string, and instead of the default key,

79
00:04:40.450 --> 00:04:45.280
I want to use a custom kms key so that it's not automatically

80
00:04:45.280 --> 00:04:48.380
able to decrypt the value within Lambda.

81
00:04:48.380 --> 00:04:51.480
When you use the default s S M value,

82
00:04:51.480 --> 00:04:54.090
your Lambda functions can actually automatically

83
00:04:54.090 --> 00:04:57.140
decrypt those values without any grants.

84
00:04:57.140 --> 00:04:59.180
So that's important to remember.

85
00:04:59.180 --> 00:05:01.840
So let me go ahead and load up Kms here,

86
00:05:01.840 --> 00:05:05.940
and I'm going to create a new key just for this.

87
00:05:05.940 --> 00:05:07.930
We'll give it an alias.

88
00:05:07.930 --> 00:05:09.340
Click on Next.

89
00:05:09.340 --> 00:05:13.640
We'll click on next year, and then I'm not going to define any key users.

90
00:05:13.640 --> 00:05:16.240
So I'll click on finish.

91
00:05:16.240 --> 00:05:17.030
And there we go.

92
00:05:17.030 --> 00:05:18.280
So now we have this key.

93
00:05:18.280 --> 00:05:23.320
Let me go back to parameter store, Refresh and let's select this demo.

94
00:05:23.320 --> 00:05:26.240
So let's go ahead and put password in here.

95
00:05:26.240 --> 00:05:28.840
I'll click on Create and then let's just go ahead and

96
00:05:28.840 --> 00:05:30.880
test this out in our land of function.

97
00:05:30.880 --> 00:05:37.020
So if I go back to Lambda, I edit my environment variable here.

98
00:05:37.020 --> 00:05:38.340
Let's save it.

99
00:05:38.340 --> 00:05:41.940
Let's click on test Now you'll see it succeeded.

100
00:05:41.940 --> 00:05:42.860
Well, how is that?

101
00:05:42.860 --> 00:05:48.170
Well, what it's doing here is it's just pulling down the encrypted value.

102
00:05:48.170 --> 00:05:49.520
Now I can swap this here.

103
00:05:49.520 --> 00:05:55.280
If I change this to with decryption equals true,

104
00:05:55.280 --> 00:05:57.860
let's save it and let's try this one more time,

105
00:05:57.860 --> 00:05:59.890
I'll click on test and there you go.

106
00:05:59.890 --> 00:06:01.740
We get a failed result,

107
00:06:01.740 --> 00:06:06.100
and that's because we're not allowed to use the key that we

108
00:06:06.100 --> 00:06:08.680
use to define or create this parameter.

109
00:06:08.680 --> 00:06:11.460
You can see we're not allowed access.

110
00:06:11.460 --> 00:06:17.300
So that's how you can securely configure encrypted values in parameter store.

111
00:06:17.300 --> 00:06:19.310
Now this seems like a good breaking point.

112
00:06:19.310 --> 00:06:24.110
Let's go ahead and in this clip here and then in the continuing clip coming up,

113
00:06:24.110 --> 00:06:27.380
I'll start diving into the last type of parameter,

114
00:06:27.380 --> 00:06:34.000
as well as the different tiers and how the hierarchical storage portion works that we talked about.

