1
00:00:00,640 --> 00:00:01,930
[Autogenerated] All right, Welcome back.

2
00:00:01,930 --> 00:00:06,140
Let's dive into maintenance windows and change calendar.

3
00:00:06,140 --> 00:00:10,240
Now, I'm going to do this a little out of order from what you see on the screen.

4
00:00:10,240 --> 00:00:14,090
But I just think it will flow a little bit better for you and allow you to

5
00:00:14,090 --> 00:00:17,840
comprehend it a little bit quicker if I do it in this order.

6
00:00:17,840 --> 00:00:20,900
So I want to talk about maintenance windows first.

7
00:00:20,900 --> 00:00:21,090
Now,

8
00:00:21,090 --> 00:00:24,670
maintenance windows allow us to create a schedule for when

9
00:00:24,670 --> 00:00:28,080
potentially disruptive actions occur.

10
00:00:28,080 --> 00:00:32,010
So that could be patching reboots, etcetera.

11
00:00:32,010 --> 00:00:36,240
So what I do is I go in to create a maintenance window.

12
00:00:36,240 --> 00:00:38,940
We give it a name in a description.

13
00:00:38,940 --> 00:00:43,910
We can't allow this maintenance window to be used for tasks on

14
00:00:43,910 --> 00:00:46,430
targets that are not registered with it.

15
00:00:46,430 --> 00:00:48,230
So we'll leave that checked.

16
00:00:48,230 --> 00:00:53,100
And then we create a schedule so we can specify a Cron.

17
00:00:53,100 --> 00:00:59,210
We can set it to rate, or we can set our own via a string expression.

18
00:00:59,210 --> 00:01:02,740
So a Cron or a rate but define via string.

19
00:01:02,740 --> 00:01:04,810
So what I'll do is I'm gonna run rate.

20
00:01:04,810 --> 00:01:06,450
I'll set it to 30 minutes,

21
00:01:06,450 --> 00:01:10,590
and right now this is the minimum that you can set and then

22
00:01:10,590 --> 00:01:13,450
we can specify how long our window last.

23
00:01:13,450 --> 00:01:17,630
So how long of a gap or how big of a gap do we want

24
00:01:17,630 --> 00:01:23,040
to allow these tasks to occur, so I'll give it a one hour window,

25
00:01:23,040 --> 00:01:26,090
but you can do 1 to 24 now.

26
00:01:26,090 --> 00:01:32,430
We can also stop initiating tasks at a certain point before the window closes so

27
00:01:32,430 --> 00:01:37,640
we can do up to 23 hours before the window closes or zero.

28
00:01:37,640 --> 00:01:40,200
So I'll leave it at zero for now,

29
00:01:40,200 --> 00:01:43,050
and then we can move on to our start and in date.

30
00:01:43,050 --> 00:01:44,020
So if we wanted to,

31
00:01:44,020 --> 00:01:50,000
we could specify a defined start and a defined in so we know

32
00:01:50,000 --> 00:01:52,850
when it starts and when it will stop now.

33
00:01:52,850 --> 00:01:57,440
Typically, maintenance windows don't need Windows start or in dates,

34
00:01:57,440 --> 00:02:00,750
as you usually continually patch and perform

35
00:02:00,750 --> 00:02:03,100
maintenance on all of your workloads.

36
00:02:03,100 --> 00:02:05,550
But if you have a special use case,

37
00:02:05,550 --> 00:02:10,230
a WS allows you to specify a specific start and a

38
00:02:10,230 --> 00:02:13,340
specific end where it will no longer occur.

39
00:02:13,340 --> 00:02:14,390
And when you do this,

40
00:02:14,390 --> 00:02:18,240
you need to schedule your time zone for your starting dates.

41
00:02:18,240 --> 00:02:20,900
If you want a relative to your current one,

42
00:02:20,900 --> 00:02:25,200
we can add our tags, but I'm gonna create our maintenance window.

43
00:02:25,200 --> 00:02:25,850
There you go.

44
00:02:25,850 --> 00:02:28,630
We have our window, we just created it.

45
00:02:28,630 --> 00:02:32,750
And that's how easy it is to create a maintenance window with

46
00:02:32,750 --> 00:02:37,320
specific settings that allow us to define when we want to have

47
00:02:37,320 --> 00:02:40,440
interruptible tasks be performed.

48
00:02:40,440 --> 00:02:42,300
You see, we have a task section.

49
00:02:42,300 --> 00:02:46,940
So how many tasks have been assigned to this window?

50
00:02:46,940 --> 00:02:50,140
We could have a history of when there was executed,

51
00:02:50,140 --> 00:02:54,350
and you can see just now it said, Hey, I have no task to execute,

52
00:02:54,350 --> 00:02:56,140
but it was successful.

53
00:02:56,140 --> 00:02:59,600
So let's actually view these details and you'll

54
00:02:59,600 --> 00:03:01,420
just see it gives you a unique I.

55
00:03:01,420 --> 00:03:06,270
D the window that was occurring and then the start and end time.

56
00:03:06,270 --> 00:03:09,500
So if I go back, I go to targets.

57
00:03:09,500 --> 00:03:13,240
This is where we can register targets for this maintenance window.

58
00:03:13,240 --> 00:03:17,660
So if I click register target, we can specify a name if we want.

59
00:03:17,660 --> 00:03:19,740
So let's just say E c two.

60
00:03:19,740 --> 00:03:23,920
We can give it a description and owner information.

61
00:03:23,920 --> 00:03:26,360
So these are the details that allow us to quickly

62
00:03:26,360 --> 00:03:30,280
identify what this window target is now.

63
00:03:30,280 --> 00:03:34,310
The bottom part allows us to actually specify targets.

64
00:03:34,310 --> 00:03:38,390
So what resource is do we want to target?

65
00:03:38,390 --> 00:03:39,640
Most of the time,

66
00:03:39,640 --> 00:03:44,540
people really only think that you can target instances and easy to,

67
00:03:44,540 --> 00:03:48,850
But you can actually support other systems manager commands.

68
00:03:48,850 --> 00:03:52,640
So run commands and work flows of automation.

69
00:03:52,640 --> 00:03:56,690
You can target lambda functions and step functions.

70
00:03:56,690 --> 00:04:03,140
So this is actually a very customizable peace built into systems manager.

71
00:04:03,140 --> 00:04:08,590
Now, what I want to do is I'm gonna go ahead and choose a resource group.

72
00:04:08,590 --> 00:04:12,640
And this is where we can specify those resource groups that

73
00:04:12,640 --> 00:04:16,900
we created earlier in this module and weaken select what

74
00:04:16,900 --> 00:04:20,620
instances we want or resource types, I should say.

75
00:04:20,620 --> 00:04:23,440
Now, I'm just gonna do an easy two instance.

76
00:04:23,440 --> 00:04:26,900
But this allows you hopefully to connect the dots and see

77
00:04:26,900 --> 00:04:30,340
how we can utilize resource groups,

78
00:04:30,340 --> 00:04:33,820
place them into a specific maintenance window based

79
00:04:33,820 --> 00:04:36,180
on this target details set up.

80
00:04:36,180 --> 00:04:39,540
And then we can run commands at scheduled times.

81
00:04:39,540 --> 00:04:41,750
So you'll see we have two targets right now.

82
00:04:41,750 --> 00:04:46,880
And that's because I have two instances with the tags that group

83
00:04:46,880 --> 00:04:49,740
them into our resource group that we made.

84
00:04:49,740 --> 00:04:52,780
So now what this does is it allows us to schedule

85
00:04:52,780 --> 00:04:56,530
automation based around this maintenance window and

86
00:04:56,530 --> 00:05:00,340
perform things like patching or reboots,

87
00:05:00,340 --> 00:05:03,240
and we'll get into patching a little bit later on.

88
00:05:03,240 --> 00:05:07,370
So with maintenance window out of the way, let's go ahead and go to change.

89
00:05:07,370 --> 00:05:12,090
Calendar now change calendar is exactly what it sounds like.

90
00:05:12,090 --> 00:05:16,650
It allows us to set up dates and time ranges for when

91
00:05:16,650 --> 00:05:19,690
actions can or cannot be performed.

92
00:05:19,690 --> 00:05:22,800
So this is very useful for administrators that have

93
00:05:22,800 --> 00:05:25,420
to perform tasks at certain times.

94
00:05:25,420 --> 00:05:29,650
Change calendars are extremely common in enterprise environments,

95
00:05:29,650 --> 00:05:32,530
so let's just go ahead and create one.

96
00:05:32,530 --> 00:05:36,140
We give it a name, we can give it a description,

97
00:05:36,140 --> 00:05:39,800
and then we choose the type of calendar we want.

98
00:05:39,800 --> 00:05:41,410
Now there's open by default.

99
00:05:41,410 --> 00:05:47,190
So what this does is it allows any actions to be ran except within our

100
00:05:47,190 --> 00:05:51,460
window that we define or we can have closed by default.

101
00:05:51,460 --> 00:05:55,960
And what this does is it's going to block any actions that occur

102
00:05:55,960 --> 00:05:59,930
outside of our change calendar that we specify now.

103
00:05:59,930 --> 00:06:04,340
I have been a part of companies that do it both ways.

104
00:06:04,340 --> 00:06:08,060
It really just depends on your enterprise in your customer

105
00:06:08,060 --> 00:06:11,920
impact that you have in certain industries.

106
00:06:11,920 --> 00:06:16,810
They know specific dates that they don't want things to occur like holidays,

107
00:06:16,810 --> 00:06:18,070
for example.

108
00:06:18,070 --> 00:06:21,970
So open by default might be a better option for this.

109
00:06:21,970 --> 00:06:24,460
As you specify the event Windows,

110
00:06:24,460 --> 00:06:28,870
where you do not want things to occur and then there's closed by default.

111
00:06:28,870 --> 00:06:33,570
That's useful for more strict or stringent enterprises that really

112
00:06:33,570 --> 00:06:37,650
require specific timing for implementing changes.

113
00:06:37,650 --> 00:06:40,840
So all choose closed by default.

114
00:06:40,840 --> 00:06:41,790
And there we go.

115
00:06:41,790 --> 00:06:43,490
We now have our calendar.

116
00:06:43,490 --> 00:06:47,540
So if I open up our change calendar while it's just a calendar,

117
00:06:47,540 --> 00:06:50,140
which is exactly what it's supposed to be,

118
00:06:50,140 --> 00:06:55,440
So this allows us to create events based on dates and times.

119
00:06:55,440 --> 00:06:57,190
Four R A W s account.

120
00:06:57,190 --> 00:07:03,340
So if I create an event here, let's call this prod patching.

121
00:07:03,340 --> 00:07:05,980
We can specify the start date,

122
00:07:05,980 --> 00:07:09,210
so let's just pick a random day here will do the 11th

123
00:07:09,210 --> 00:07:11,760
and then we'll end on the 15th.

124
00:07:11,760 --> 00:07:15,200
So we're going to allow patching throughout that business week.

125
00:07:15,200 --> 00:07:20,280
Now, if we want, we can set this to recurring so we can set it weekly daily,

126
00:07:20,280 --> 00:07:22,340
yearly, etcetera.

127
00:07:22,340 --> 00:07:27,140
And then with that, we can actually go ahead and set until date,

128
00:07:27,140 --> 00:07:31,510
or a number of occurrences specifically to what we want.

129
00:07:31,510 --> 00:07:35,540
Now I'm gonna uncheck this I'm gonna create are scheduled event.

130
00:07:35,540 --> 00:07:38,620
And just like that, we created our change calendar,

131
00:07:38,620 --> 00:07:43,080
maintenance window or change period that can tie in to our

132
00:07:43,080 --> 00:07:46,140
maintenance windows and other tasks.

133
00:07:46,140 --> 00:07:50,440
So what we would have to do here is under details.

134
00:07:50,440 --> 00:07:57,720
You'll see that we do have to add a required step for our automation purposes.

135
00:07:57,720 --> 00:08:02,290
You'll see they provided here, and what we would do is add this to the document.

136
00:08:02,290 --> 00:08:06,610
And again, we'll discuss documents a little bit later on in depth.

137
00:08:06,610 --> 00:08:09,580
But what this does is it's gonna get that calendar

138
00:08:09,580 --> 00:08:12,440
state whenever an automation runs.

139
00:08:12,440 --> 00:08:16,680
It's going to see if the calendar is open or closed for that date,

140
00:08:16,680 --> 00:08:23,110
and then it will either execute or break out and not execute all based

141
00:08:23,110 --> 00:08:26,420
on our change calendar that we just defined here.

142
00:08:26,420 --> 00:08:27,170
So right now,

143
00:08:27,170 --> 00:08:32,240
if I executed something and we had this dependency on this change calendar,

144
00:08:32,240 --> 00:08:35,920
it would not work because we're not in our open period that

145
00:08:35,920 --> 00:08:39,240
we define here on the week of the 10th.

146
00:08:39,240 --> 00:08:44,490
Now, one last feature here is we can actually share this with other accounts,

147
00:08:44,490 --> 00:08:48,770
So if you have a master account for operations and administration.

148
00:08:48,770 --> 00:08:53,020
You can set the calendar there and then share it out across your organ.

149
00:08:53,020 --> 00:09:00,040
This really allows for better compliancy and management of your changes.

150
00:09:00,040 --> 00:09:02,100
So to wrap this up really quick,

151
00:09:02,100 --> 00:09:06,620
we created a maintenance window which defined a period of time where we

152
00:09:06,620 --> 00:09:11,140
want to allow maintenance tasks to be enabled in work.

153
00:09:11,140 --> 00:09:16,260
In that maintenance window, we registered our prod resource group targets.

154
00:09:16,260 --> 00:09:17,490
Specifically E.

155
00:09:17,490 --> 00:09:17,720
C.

156
00:09:17,720 --> 00:09:19,540
Two instances.

157
00:09:19,540 --> 00:09:26,080
We defined a change calendar where we specified a specific time where actions

158
00:09:26,080 --> 00:09:31,570
can be performed and how we would tie this all together is we would add that

159
00:09:31,570 --> 00:09:37,320
detailed dependency in our automation documents that we create and then when

160
00:09:37,320 --> 00:09:39,770
they're executing with our maintenance window,

161
00:09:39,770 --> 00:09:42,790
it would check the current state of our calendar.

162
00:09:42,790 --> 00:09:45,640
That seems like a pretty good stopping point.

163
00:09:45,640 --> 00:09:49,320
What we'll do is we'll wrap up here and then coming up next.

164
00:09:49,320 --> 00:09:57,000
We're going to start diving into instances and nodes and we're going to explore these different capabilities in there

