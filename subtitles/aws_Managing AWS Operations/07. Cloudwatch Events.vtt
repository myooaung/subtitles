WEBVTT
1
00:00:00.930 --> 00:00:03.750
[Autogenerated] All right, Welcome to this clip on cloudwatch events.

2
00:00:03.750 --> 00:00:07.490
Now Amazon defines cloudwatch events as being able to

3
00:00:07.490 --> 00:00:11.640
deliver near real time streams of events that happen in our

4
00:00:11.640 --> 00:00:14.920
AWS systems to our resource is now,

5
00:00:14.920 --> 00:00:18.050
here's kind of a breakdown of how cloudwatch events work.

6
00:00:18.050 --> 00:00:20.770
We essentially have users and then are monitored.

7
00:00:20.770 --> 00:00:25.240
Resource is that we set up and then what happens with this is our AWS user

8
00:00:25.240 --> 00:00:29.430
makes a change to some of those monitored resource is now on the back in

9
00:00:29.430 --> 00:00:32.700
here that causes or triggers a cloudwatch event.

10
00:00:32.700 --> 00:00:34.000
And with these events,

11
00:00:34.000 --> 00:00:37.320
we have target rules which are just sleeping in waiting to

12
00:00:37.320 --> 00:00:39.680
be triggered by our cloudwatch event.

13
00:00:39.680 --> 00:00:42.410
So as soon as this event is monitored and log,

14
00:00:42.410 --> 00:00:44.270
it's gonna trigger our target rule.

15
00:00:44.270 --> 00:00:46.310
So it executes that automation.

16
00:00:46.310 --> 00:00:49.690
And what this target rule executing is going to do is it

17
00:00:49.690 --> 00:00:53.330
can maybe make changes to those monitor resource is or can

18
00:00:53.330 --> 00:00:56.370
even email the admin saying, Hey, there was an event here,

19
00:00:56.370 --> 00:00:57.710
and this is what happened.

20
00:00:57.710 --> 00:01:00.440
So it's actually look at this in the AWS console.

21
00:01:00.440 --> 00:01:02.920
I'm gonna scroll over here to events and I'm gonna

22
00:01:02.920 --> 00:01:07.640
click on getting started here, so the first thing we do is create an event rule.

23
00:01:07.640 --> 00:01:11.610
Now, rules are used to invoke targets based on cloudwatch events,

24
00:01:11.610 --> 00:01:15.470
and we can see the first thing here is an event source so we can do an event

25
00:01:15.470 --> 00:01:18.840
pattern where it's gonna match a certain AP I call or pattern.

26
00:01:18.840 --> 00:01:22.310
Or we can even set a schedule so we can have a rate based schedule

27
00:01:22.310 --> 00:01:25.930
or a Krahn expression if you're familiar with those so we can run

28
00:01:25.930 --> 00:01:30.450
these events on a fixed schedule, depending on different use cases.

29
00:01:30.450 --> 00:01:33.840
Now, an important note here is that for cloudwatch event rules,

30
00:01:33.840 --> 00:01:37.490
when you make them a rate based rule, when you initially create them,

31
00:01:37.490 --> 00:01:40.180
they're going to immediately be executed.

32
00:01:40.180 --> 00:01:42.830
So you're going to invoke your target immediately and

33
00:01:42.830 --> 00:01:44.980
then on that fixed rate expression.

34
00:01:44.980 --> 00:01:47.350
So I'm gonna select event pattern for this clip,

35
00:01:47.350 --> 00:01:50.320
and I'm gonna scroll down here and let's select our service name

36
00:01:50.320 --> 00:01:53.680
and you can see that it monitors pretty much every single

37
00:01:53.680 --> 00:01:56.620
service name that exists in a ws Now.

38
00:01:56.620 --> 00:01:59.820
Not all of these are going to have event sources that

39
00:01:59.820 --> 00:02:05.240
are defaulted for cloudwatch events, but what you can do is define your own AP.

40
00:02:05.240 --> 00:02:08.670
I call for these services, so if they're not offered,

41
00:02:08.670 --> 00:02:11.140
you can customize that to be monitored.

42
00:02:11.140 --> 00:02:13.480
Let's just select E C two for this clip here.

43
00:02:13.480 --> 00:02:16.640
And then instead of all events, let's do a E C.

44
00:02:16.640 --> 00:02:19.230
Two instance, state change notification.

45
00:02:19.230 --> 00:02:23.750
So any time an instance state changes, we want to get notified.

46
00:02:23.750 --> 00:02:26.410
And let's set this to specific states.

47
00:02:26.410 --> 00:02:29.910
I don't want to do all states I want to monitor for, Let's say pending.

48
00:02:29.910 --> 00:02:32.640
So when it's starting up and then we'll also say running.

49
00:02:32.640 --> 00:02:35.690
So any time any other instances switch,

50
00:02:35.690 --> 00:02:38.910
depending or running this should invoke this event.

51
00:02:38.910 --> 00:02:41.250
And if we wanted to, we could get more specific.

52
00:02:41.250 --> 00:02:42.470
But I don't really want to.

53
00:02:42.470 --> 00:02:44.240
Let's do all instances now.

54
00:02:44.240 --> 00:02:45.050
We see here below.

55
00:02:45.050 --> 00:02:46.800
There's an event pattern preview,

56
00:02:46.800 --> 00:02:50.460
and this is sort of what it's gonna look like as far as the event pattern

57
00:02:50.460 --> 00:02:53.910
and then below that we can actually look at sample events.

58
00:02:53.910 --> 00:02:57.210
So this is kind of what the event is going to look like when it

59
00:02:57.210 --> 00:03:00.370
gets caught and it gets passed to our target.

60
00:03:00.370 --> 00:03:03.840
So this is the payload that gets passed to our invoked target.

61
00:03:03.840 --> 00:03:07.330
So let me scroll up here and you can see the next thing we do is we select

62
00:03:07.330 --> 00:03:09.980
a target that we want to invoke something to click on.

63
00:03:09.980 --> 00:03:12.530
Add target here it defaults to Lambda.

64
00:03:12.530 --> 00:03:13.860
But if you click this,

65
00:03:13.860 --> 00:03:17.910
you can see we can do thons of different resource is there's

66
00:03:17.910 --> 00:03:20.490
several different easy to related ones.

67
00:03:20.490 --> 00:03:24.100
We can kick off a codebuild project batch job, maybe an E.

68
00:03:24.100 --> 00:03:25.140
C s task.

69
00:03:25.140 --> 00:03:29.450
I mean, really lots of different possibilities for this particular clip.

70
00:03:29.450 --> 00:03:31.260
Let's do Lambda function here.

71
00:03:31.260 --> 00:03:35.560
And I made a Lambda function called event tester that basically just

72
00:03:35.560 --> 00:03:38.980
prints out to the logs the event that was received.

73
00:03:38.980 --> 00:03:42.520
So if we wanted to, we can also configure the version an alias.

74
00:03:42.520 --> 00:03:44.650
I don't have any, so we'll leave default.

75
00:03:44.650 --> 00:03:47.070
And then the last thing we see here is configure input

76
00:03:47.070 --> 00:03:49.150
so we can pass in the matched event.

77
00:03:49.150 --> 00:03:51.340
We can pass in part of the matched event.

78
00:03:51.340 --> 00:03:56.140
So weaken scan for a particular piece of this Jason and Onley pass that in,

79
00:03:56.140 --> 00:03:58.520
we can set a constant Jason payload.

80
00:03:58.520 --> 00:04:02.500
So no matter what this looks like over here in the event that's coming in,

81
00:04:02.500 --> 00:04:06.450
we can send it a constant pattern or we can transform the input.

82
00:04:06.450 --> 00:04:10.340
So if we want to transform it to a different type of template, we can do that.

83
00:04:10.340 --> 00:04:12.800
Let's go and leave matched event for now because I want to

84
00:04:12.800 --> 00:04:15.720
pass the entire event and I'm gonna scroll down and I'm

85
00:04:15.720 --> 00:04:17.690
gonna click on configure details.

86
00:04:17.690 --> 00:04:20.130
Now, the last thing we do here is create a rule name.

87
00:04:20.130 --> 00:04:23.940
So I'll call this E C two and the description will leave blank.

88
00:04:23.940 --> 00:04:26.410
And we're gonna make sure that this state is enabled.

89
00:04:26.410 --> 00:04:26.590
Now,

90
00:04:26.590 --> 00:04:30.200
another important piece here is we can see that cloudwatch events won't

91
00:04:30.200 --> 00:04:33.470
add the necessary permissions to invoke the targets.

92
00:04:33.470 --> 00:04:34.390
So in our case,

93
00:04:34.390 --> 00:04:36.690
it's going to add the permission for cloudwatch

94
00:04:36.690 --> 00:04:39.320
events to invoke our land a function.

95
00:04:39.320 --> 00:04:41.730
So what I'm gonna do here is create our rule and

96
00:04:41.730 --> 00:04:43.430
now you can see are easy to rule.

97
00:04:43.430 --> 00:04:47.340
So this is going to be invoked or executed any time we have a

98
00:04:47.340 --> 00:04:51.910
pending or running on any of our e c two instances in this region

99
00:04:51.910 --> 00:04:55.340
and you can see we can monitor it and view the targets here so we

100
00:04:55.340 --> 00:04:57.120
can see our event test her target.

101
00:04:57.120 --> 00:05:00.520
So let me open this in a new tab here and you can see that it

102
00:05:00.520 --> 00:05:03.220
added Are cloudwatch event here as a trigger?

103
00:05:03.220 --> 00:05:06.100
And there it is, our rule, which is easy to,

104
00:05:06.100 --> 00:05:09.470
and you can also see the event pattern that will be monitored.

105
00:05:09.470 --> 00:05:11.150
So let's go ahead and test this out.

106
00:05:11.150 --> 00:05:14.980
Let me close this and I'm gonna open up E c to here and

107
00:05:14.980 --> 00:05:17.550
let's go and start up one of our instances.

108
00:05:17.550 --> 00:05:22.070
So in theory, once I start one of these stop instances,

109
00:05:22.070 --> 00:05:23.910
it should enter a pending state.

110
00:05:23.910 --> 00:05:27.320
And that's to be enough to trigger our event so you can see it's

111
00:05:27.320 --> 00:05:30.770
pending and that alone should have triggered our event.

112
00:05:30.770 --> 00:05:34.430
So if I goto logs here, I find our event tester log stream.

113
00:05:34.430 --> 00:05:37.320
We can actually see in this log stream here at the bottom,

114
00:05:37.320 --> 00:05:40.990
which is the time that I just did it 53 minutes after the hour.

115
00:05:40.990 --> 00:05:42.970
We can see our received event.

116
00:05:42.970 --> 00:05:46.220
So this is similar to that sample event that we got to view earlier.

117
00:05:46.220 --> 00:05:49.880
We see our source are detailed type the cloudwatch I D,

118
00:05:49.880 --> 00:05:52.350
which is a unique I d for the invocation,

119
00:05:52.350 --> 00:05:56.130
and then we can see the resource is that essentially triggered this event.

120
00:05:56.130 --> 00:05:59.260
So is the instance ending in seven e five b?

121
00:05:59.260 --> 00:06:02.180
So let's make sure there we go seven e five b.

122
00:06:02.180 --> 00:06:07.130
So that's how we can use these cloudwatch events to monitor and then invoke

123
00:06:07.130 --> 00:06:11.630
some other service downstream based on that incoming event.

124
00:06:11.630 --> 00:06:12.400
And really quickly.

125
00:06:12.400 --> 00:06:15.160
We can also see that it also picked up that it was running,

126
00:06:15.160 --> 00:06:18.530
so it switched from pending to running for that same instance.

127
00:06:18.530 --> 00:06:21.470
Now, that's going to do it for this cloudwatch event clip.

128
00:06:21.470 --> 00:06:22.760
We're gonna go and wrap this up,

129
00:06:22.760 --> 00:06:29.000
and I'll see you in the next one where we're going to start diving into compliance, specifically cloud trail.

