WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.730 --> 00:00:05.204
Another hugely important part of optimizing

00:00:05.204 --> 00:00:09.090
our images for the web is to consider the image format.

00:00:09.090 --> 00:00:11.490
There are lots of image formats available,

00:00:11.490 --> 00:00:14.835
and I'm sure you've come across some of these, such as JPEG,

00:00:14.835 --> 00:00:18.720
PNG, GIF, or GIF depending on how you pronounce it,

00:00:18.720 --> 00:00:21.255
and also SVG to name a few.

00:00:21.255 --> 00:00:25.095
These are all common and when downloading an image online,

00:00:25.095 --> 00:00:27.450
using our projects, we don't always get

00:00:27.450 --> 00:00:30.330
a choice of what format the image is going to be in.

00:00:30.330 --> 00:00:32.090
There are ways we can change this,

00:00:32.090 --> 00:00:33.500
which we'll look at soon.

00:00:33.500 --> 00:00:36.860
But before we go and change the image formats,

00:00:36.860 --> 00:00:39.560
we first need to understand what the key differences

00:00:39.560 --> 00:00:43.145
are and why we should even change formats at all.

00:00:43.145 --> 00:00:47.090
There are multiple key reasons why the format is important.

00:00:47.090 --> 00:00:51.175
The big one is that different formats have different file sizes.

00:00:51.175 --> 00:00:56.180
The same image in a different format could potentially bring down the file size,

00:00:56.180 --> 00:00:58.520
reducing the download time for the end-user.

00:00:58.520 --> 00:01:01.700
This time-saving could be little or huge

00:01:01.700 --> 00:01:06.085
depending on some of the factors which we're going to take a look at in just a moment.

00:01:06.085 --> 00:01:07.550
Along with the file size,

00:01:07.550 --> 00:01:12.455
the actual image quality can also be different with different formats too.

00:01:12.455 --> 00:01:15.740
There are considerations such as if the image can support

00:01:15.740 --> 00:01:19.780
transparency and also the number of supporting colors.

00:01:19.780 --> 00:01:24.140
Also, we need to think about if we need to scale the image up or down.

00:01:24.140 --> 00:01:26.675
Since as we've looked at in other videos,

00:01:26.675 --> 00:01:31.015
scaling up JPEG images can reduce the image quality.

00:01:31.015 --> 00:01:35.540
But other file types such as SVG will be unaffected.

00:01:35.540 --> 00:01:41.830
This happens because both this SVG and JPEG fall into two different categories.

00:01:41.830 --> 00:01:45.215
A raster image is like a traditional photograph.

00:01:45.215 --> 00:01:47.660
It's made up of tiny pixels.

00:01:47.660 --> 00:01:49.430
Depending on the size of the image,

00:01:49.430 --> 00:01:51.155
there can be millions of pixels,

00:01:51.155 --> 00:01:53.515
and each one represents a color.

00:01:53.515 --> 00:01:56.270
Since there are so many pixels in a photograph,

00:01:56.270 --> 00:02:01.990
they are usually undetectable by the human eye unless we scale the images up,

00:02:01.990 --> 00:02:06.140
and this is when they start to lose the quality and become pixelated since

00:02:06.140 --> 00:02:11.005
the screen is trying to fit the same amount of pixels into a larger area.

00:02:11.005 --> 00:02:16.420
Image format such as JPEG and PNG fall into this category.

00:02:16.420 --> 00:02:19.430
Another category is vector graphics.

00:02:19.430 --> 00:02:22.730
These are created on computer programs and

00:02:22.730 --> 00:02:25.955
are made-up with things such as curves, lines, and shapes.

00:02:25.955 --> 00:02:30.350
They can be scaled up or scale down in size without any loss of quality.

00:02:30.350 --> 00:02:33.920
We can also edit existing vector graphics too.

00:02:33.920 --> 00:02:38.060
Programs such as Adobe Illustrator, Sketch, Inkscape,

00:02:38.060 --> 00:02:43.570
and Figma can create them and they can be saved into format such as SVG.

00:02:43.570 --> 00:02:49.510
Another difference with an SVG is it's also represented in code too.

00:02:49.510 --> 00:02:51.895
An SVG file contains a code,

00:02:51.895 --> 00:02:55.175
which we can directly add into a HTML document.

00:02:55.175 --> 00:03:00.205
Meaning we don't always even need to link to a image file if we prefer this approach.

00:03:00.205 --> 00:03:01.910
The clear distinctions between

00:03:01.910 --> 00:03:05.750
these two groups make it easy to decide what we need to use.

00:03:05.750 --> 00:03:08.030
If you need high-quality photographs,

00:03:08.030 --> 00:03:09.200
such as a website,

00:03:09.200 --> 00:03:11.375
which is a photography portfolio,

00:03:11.375 --> 00:03:14.765
raster images such as JPEG are ideal.

00:03:14.765 --> 00:03:17.634
Well for graphics, logos, and icons,

00:03:17.634 --> 00:03:22.805
a vector will often be a better choice especially when scaling the image.

00:03:22.805 --> 00:03:27.820
Even though we have the raster category as a better choice of things such as photographs,

00:03:27.820 --> 00:03:31.265
this doesn't mean we're stuck with the original file size.

00:03:31.265 --> 00:03:35.165
We can apply compression to our images to reduce down the file size,

00:03:35.165 --> 00:03:38.225
which will make them faster for using on the web.

00:03:38.225 --> 00:03:42.700
Compression can be applied in groups called lossy and lossless.

00:03:42.700 --> 00:03:46.940
These relate to how we compress or optimize our images to try

00:03:46.940 --> 00:03:51.250
to reduce the file size and therefore the download speed.

00:03:51.250 --> 00:03:53.480
Lossy compression, as it sounds,

00:03:53.480 --> 00:03:57.140
can result in a loss of the original image quality.

00:03:57.140 --> 00:03:59.120
But since it's more regressive,

00:03:59.120 --> 00:04:02.650
it can also lead to bigger file size reductions too.

00:04:02.650 --> 00:04:05.190
This doesn't mean our images look pure.

00:04:05.190 --> 00:04:08.660
In fact, you may not even notice a quality loss at all

00:04:08.660 --> 00:04:12.760
on many occasions depending on the level of loss which we set.

00:04:12.760 --> 00:04:15.245
Once compression has been applied though,

00:04:15.245 --> 00:04:20.110
something which is really important is there is no going back to the original image,

00:04:20.110 --> 00:04:22.310
it's completely lost forever.

00:04:22.310 --> 00:04:25.200
Lossless is pretty much the opposite,

00:04:25.200 --> 00:04:28.400
and the original image quality is maintained.

00:04:28.400 --> 00:04:32.450
The compression algorithm can reduce the file size and also

00:04:32.450 --> 00:04:36.685
reduce any metadata which you stored inside of the image.

00:04:36.685 --> 00:04:40.535
Metadata includes things automatically saved by the camera,

00:04:40.535 --> 00:04:42.770
such as the date and the camera type,

00:04:42.770 --> 00:04:44.905
the photographer name, and so on.

00:04:44.905 --> 00:04:48.635
Since lossless is maintaining the original image quality,

00:04:48.635 --> 00:04:53.315
it's understandable that the file savings may be less than the lossy versions.

00:04:53.315 --> 00:04:56.200
So with all this, which one is best to use?

00:04:56.200 --> 00:05:00.095
Well, let's take a look at some of the more common image formats.

00:05:00.095 --> 00:05:05.740
JPEG is a great choice for display in high-quality photographs or even art work.

00:05:05.740 --> 00:05:09.235
However, it's not great for displaying things such as text,

00:05:09.235 --> 00:05:11.710
especially if it needs to be scaled up.

00:05:11.710 --> 00:05:13.795
JPEG is a common image format,

00:05:13.795 --> 00:05:16.640
so there should be no problems with that lack of support.

00:05:16.640 --> 00:05:19.025
It's a lossy compression format,

00:05:19.025 --> 00:05:22.610
so we can also save lots of the image file size.

00:05:22.610 --> 00:05:25.250
If we're happy with a small loss of quality,

00:05:25.250 --> 00:05:29.210
we could even go further with the compression if we wanted a smaller version,

00:05:29.210 --> 00:05:32.270
maybe as an email attachment or just something on

00:05:32.270 --> 00:05:36.115
your website which doesn't require a huge amount of detail.

00:05:36.115 --> 00:05:40.430
PNG is also a really popular web image format.

00:05:40.430 --> 00:05:44.630
One of the benefits is that it also supports transparencies,

00:05:44.630 --> 00:05:47.630
which is something a JPEG doesn't support.

00:05:47.630 --> 00:05:50.820
A JPEG must have a solid background color.

00:05:50.820 --> 00:05:53.990
For example, if you're using it in a website header,

00:05:53.990 --> 00:05:56.420
you need to make sure that the background color of

00:05:56.420 --> 00:05:59.695
the image matches the header background color.

00:05:59.695 --> 00:06:03.665
If you need to use an image or a graphic on a transparent background,

00:06:03.665 --> 00:06:05.900
a PNG is the way to go.

00:06:05.900 --> 00:06:08.924
A PNG also has lossless compression,

00:06:08.924 --> 00:06:13.295
so the original file is maintained and it can also be restored.

00:06:13.295 --> 00:06:17.780
However, this can also mean less file size reduction is possible.

00:06:17.780 --> 00:06:20.300
You will sometimes find simple images,

00:06:20.300 --> 00:06:23.360
icons, or graphics stored as a GIF.

00:06:23.360 --> 00:06:24.815
They are a good choice for this,

00:06:24.815 --> 00:06:29.380
since they have a small file size and can also support transparencies too.

00:06:29.380 --> 00:06:32.205
So we don't have a background covering things up.

00:06:32.205 --> 00:06:35.120
A GIF file can also hold an animation too.

00:06:35.120 --> 00:06:37.895
So this is a good choice if you need to animate.

00:06:37.895 --> 00:06:42.175
These animations can be created with tools such as Photoshop.

00:06:42.175 --> 00:06:43.940
Over to the vectors,

00:06:43.940 --> 00:06:46.430
an SVG is a popular choice.

00:06:46.430 --> 00:06:48.680
We don't use it for photographs.

00:06:48.680 --> 00:06:51.185
Or if you need a computer-based graphic,

00:06:51.185 --> 00:06:53.060
a logo or an icon,

00:06:53.060 --> 00:06:56.510
this is a great choice because it's resizable without any loss of

00:06:56.510 --> 00:07:00.970
quality and also generally has small file sizes too.

00:07:00.970 --> 00:07:04.460
Some of these image technologies mentioned so far have been

00:07:04.460 --> 00:07:08.020
around for some time and also have some limitations.

00:07:08.020 --> 00:07:13.220
For this reason, some newer next generation image formats have been developed,

00:07:13.220 --> 00:07:15.395
such as JPEG 2000,

00:07:15.395 --> 00:07:18.655
JPEG XR, and also WebP.

00:07:18.655 --> 00:07:21.750
Although not as commonly adopted just yet,

00:07:21.750 --> 00:07:27.670
they can offer big file size savings on traditional formats like JPEG and PNG.

00:07:27.670 --> 00:07:31.520
I'm not going to go into all of the technical details of these,

00:07:31.520 --> 00:07:37.719
but JPEG 2000 offers the choice of both lossy and also lossless compression.

00:07:37.719 --> 00:07:41.690
We can choose which one is best for our images and generally has

00:07:41.690 --> 00:07:46.510
a higher quality image for the same file size as a regular JPEG.

00:07:46.510 --> 00:07:49.650
JPEG XR was created by Microsoft,

00:07:49.650 --> 00:07:52.355
and it's also offering the choice of both lossy and

00:07:52.355 --> 00:07:56.650
lossless compression to suit a wider range of situations.

00:07:56.650 --> 00:07:59.089
It can have higher levels of compression,

00:07:59.089 --> 00:08:02.500
so there is a big file size saving to be made.

00:08:02.500 --> 00:08:03.960
We also have WebP,

00:08:03.960 --> 00:08:07.210
which has been developed by Google and just like the other two will

00:08:07.210 --> 00:08:10.745
also support both lossy and lossless compression.

00:08:10.745 --> 00:08:13.790
It can preserve transparencies and generally has

00:08:13.790 --> 00:08:17.495
a much smaller file size than traditional file types.

00:08:17.495 --> 00:08:21.665
Another benefit is it also supports animations too,

00:08:21.665 --> 00:08:24.275
meaning it's a really good alternative to

00:08:24.275 --> 00:08:29.450
GIF files as you would expect since these file types are much newer.

00:08:29.450 --> 00:08:32.749
The problem lies around support in image programs,

00:08:32.749 --> 00:08:34.475
devices such as cameras,

00:08:34.475 --> 00:08:36.445
and also web browsers.

00:08:36.445 --> 00:08:38.450
To check out the browser support,

00:08:38.450 --> 00:08:41.690
we can go to caniuse.com as well.

00:08:41.690 --> 00:08:44.065
Let's take a look at a WebP.

00:08:44.065 --> 00:08:46.845
Here we go, the WebP image format.

00:08:46.845 --> 00:08:50.975
We can see this is fully supported in most of the major browsers.

00:08:50.975 --> 00:08:53.300
As ever, we have a problem with Internet Explorer,

00:08:53.300 --> 00:08:55.190
which has been replaced by Edge.

00:08:55.190 --> 00:08:58.355
Also on Safari, we only have partial support.

00:08:58.355 --> 00:09:01.745
This means it's only supported on the macOS,

00:09:01.745 --> 00:09:04.580
its operating system and above.

00:09:04.580 --> 00:09:09.710
This is something to take into account when using any of these next-gen images.

00:09:09.710 --> 00:09:13.085
Let's take a look for JPEG 2000.

00:09:13.085 --> 00:09:17.755
We can see this is not as well supported as the WebP,

00:09:17.755 --> 00:09:19.970
so this is something to be careful of.

00:09:19.970 --> 00:09:22.175
Let's check the WebXR.

00:09:22.175 --> 00:09:25.100
Again, this has a lot of problems with support.

00:09:25.100 --> 00:09:30.985
It may be better to stick with a format such as WebP instead of these two JPEG formats.

00:09:30.985 --> 00:09:34.040
SVG, let's take a look at this.

00:09:34.090 --> 00:09:36.800
This is one of the vector types.

00:09:36.800 --> 00:09:40.325
This is very well supported on all of the major browsers.

00:09:40.325 --> 00:09:41.990
It can be a good idea to have

00:09:41.990 --> 00:09:45.740
a next generation image format available if the browser supports

00:09:45.740 --> 00:09:52.400
them and also fall back images such as JPEG and PNG if there is limited browser support.

00:09:52.400 --> 00:09:55.070
We'll take a look at how to do this next along with

00:09:55.070 --> 00:09:58.920
some tools you can use to convert image file types.
