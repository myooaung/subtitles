WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:03.320 --> 00:00:07.485
This video head into lesson 3 of the starter files,

00:00:07.485 --> 00:00:09.210
open up the index page,

00:00:09.210 --> 00:00:13.005
and also make sure we have the correct one open inside the browser too.

00:00:13.005 --> 00:00:15.480
In the last video, we previously discussed that

00:00:15.480 --> 00:00:19.545
the images may not be switching at the times when we expect them to.

00:00:19.545 --> 00:00:26.645
We looked at if we shrink down the browser to the smallest size inside the dev tools,

00:00:26.645 --> 00:00:29.180
we see the smaller image is loaded.

00:00:29.180 --> 00:00:31.910
Scaling this up, we see around

00:00:31.910 --> 00:00:36.079
the 500 pixel mark that the larger image has been downloaded.

00:00:36.079 --> 00:00:39.265
You may think that this jump to the larger image is a little bit too

00:00:39.265 --> 00:00:44.075
early since it's still below the 640 pixel wide image.

00:00:44.075 --> 00:00:48.590
Well, the reason this happens is because it's not just about the width of the image,

00:00:48.590 --> 00:00:52.630
it's also about the pixel density of the display too.

00:00:52.630 --> 00:00:55.550
Here I'm using a retina screen so we can squeeze in

00:00:55.550 --> 00:00:59.825
more pixels per inch than a non retina device.

00:00:59.825 --> 00:01:03.680
This results in a crisper, sharper quality image.

00:01:03.680 --> 00:01:05.720
How does this all work?

00:01:05.720 --> 00:01:11.675
Well, imagine we had a screen with a resolution of 1920 by 1080,

00:01:11.675 --> 00:01:15.400
1920 being the width of the screen in pixels.

00:01:15.400 --> 00:01:18.530
Let's say we created a space of 300 by

00:01:18.530 --> 00:01:22.955
300 pixels where we wanted to place an image inside.

00:01:22.955 --> 00:01:24.830
Many years ago, this was simple.

00:01:24.830 --> 00:01:28.385
We created an image which was 300 pixels wide,

00:01:28.385 --> 00:01:31.975
300 pixels high, and it worked just fine.

00:01:31.975 --> 00:01:35.170
Now though with the demands for higher quality,

00:01:35.170 --> 00:01:40.310
many screens are capable of squeezing more pixels into a space,

00:01:40.310 --> 00:01:45.185
commonly referred to as pixels per inch or the pixel density.

00:01:45.185 --> 00:01:47.615
This means if you have a 2x display,

00:01:47.615 --> 00:01:51.275
you will squeeze in twice as many pixels into the same space.

00:01:51.275 --> 00:01:55.815
Which means we can use a image twice the size, in our case,

00:01:55.815 --> 00:01:58.140
600 by 600 pixels,

00:01:58.140 --> 00:02:02.080
and it would slot into the same available space on the screen.

00:02:02.080 --> 00:02:07.280
This is why retina in higher pixel density devices look much sharper.

00:02:07.280 --> 00:02:09.320
Screens can go even higher too,

00:02:09.320 --> 00:02:10.760
such as 3 or 4x.

00:02:10.760 --> 00:02:14.890
I'm sure a lot higher in the near future too.

00:02:14.890 --> 00:02:18.650
To see a real-world example, over on the left here,

00:02:18.650 --> 00:02:25.820
my laptop screen has a resolution of 3,072 pixels wide by 1920 high.

00:02:25.820 --> 00:02:32.480
You may think that it could accommodate images up to 3,072 pixels wide.

00:02:32.480 --> 00:02:34.885
Over in the Images folder,

00:02:34.885 --> 00:02:38.675
we also have this same road image named 1x,

00:02:38.675 --> 00:02:41.375
2x, and also 4x too.

00:02:41.375 --> 00:02:45.140
The 1x image is 640 pixels wide,

00:02:45.140 --> 00:02:47.960
and this is not intended for retina screens.

00:02:47.960 --> 00:02:53.245
This is intended to be used on regular monitors which have a regular pixel density,

00:02:53.245 --> 00:02:58.145
2x, this is twice the size and has a width of 1280.

00:02:58.145 --> 00:03:03.515
Then 4x is 2,560 pixels wide.

00:03:03.515 --> 00:03:08.385
Let's give this a go. If we comment out these images here.

00:03:08.385 --> 00:03:11.495
Well, this create a new image elements,

00:03:11.495 --> 00:03:15.775
and let's set this up to display our 1x image.

00:03:15.775 --> 00:03:21.365
What we want to do here is to copy and paste this image in two more times.

00:03:21.365 --> 00:03:24.410
Save this, and then over to the browser,

00:03:24.410 --> 00:03:27.175
and close down the developer tools.

00:03:27.175 --> 00:03:31.730
If we stretch the browser to be pretty much the full width of the screen,

00:03:31.730 --> 00:03:35.375
we can see we only have the width for two of these images.

00:03:35.375 --> 00:03:38.780
Remember that each one of these images is the 1x version,

00:03:38.780 --> 00:03:41.725
which is 640 pixels wide.

00:03:41.725 --> 00:03:45.420
We only have the width here for around 1500 pixels,

00:03:45.420 --> 00:03:50.375
even though we've just seen that the screen resolution was over 3,000 pixels wide.

00:03:50.375 --> 00:03:54.580
This is because I just mentioned I'm using a retina display.

00:03:54.580 --> 00:03:58.025
A retina display does not mean we have more space to play with.

00:03:58.025 --> 00:04:00.980
It just means we can provide a higher-quality image,

00:04:00.980 --> 00:04:04.675
and the images will then be squeezed into the same available space.

00:04:04.675 --> 00:04:07.790
If we think about it, this makes complete sense.

00:04:07.790 --> 00:04:10.220
We want the physical size of the image to take up

00:04:10.220 --> 00:04:13.390
the same amount of space on every screen.

00:04:13.390 --> 00:04:14.940
When creating a website,

00:04:14.940 --> 00:04:18.005
an image which I designed to be half the width of the screen,

00:04:18.005 --> 00:04:22.700
will be still half the width for a regular or a retina display.

00:04:22.700 --> 00:04:27.050
The only difference being that a retina display can use a larger image to

00:04:27.050 --> 00:04:31.855
slot into the same available space resulting in a higher quality image.

00:04:31.855 --> 00:04:35.780
We can also use this knowledge with the source set attributes.

00:04:35.780 --> 00:04:38.494
For this, we just need one of our image examples,

00:04:38.494 --> 00:04:40.190
so let's move two of these.

00:04:40.190 --> 00:04:45.640
This will also be counted as the original 1x version for non retina screens.

00:04:45.640 --> 00:04:49.380
After this, place in the srcset,

00:04:49.380 --> 00:04:53.309
and then using a source we can also provide a 2x,

00:04:53.309 --> 00:04:56.700
and also a link to our 4x image too.

00:04:56.700 --> 00:04:59.660
The difference to the previous video though we added

00:04:59.660 --> 00:05:02.480
the size followed by the w. This time,

00:05:02.480 --> 00:05:05.875
the srcset can also accept a pixel density.

00:05:05.875 --> 00:05:08.535
For this, we are adding 2x,

00:05:08.535 --> 00:05:12.415
and then for the large image, we add 4x.

00:05:12.415 --> 00:05:18.470
Just before we check this, we can also specify the size we want the image to display.

00:05:18.470 --> 00:05:20.360
This means regardless of the screen,

00:05:20.360 --> 00:05:23.645
we want to show a 640 pixels wide image.

00:05:23.645 --> 00:05:26.690
This is what is called CSS pixels.

00:05:26.690 --> 00:05:29.915
Then if the browser decides it wants to use a bigger one,

00:05:29.915 --> 00:05:32.525
such as the 2x or the 4x,

00:05:32.525 --> 00:05:35.615
it will then be squeezed into the same space.

00:05:35.615 --> 00:05:38.980
Let's give this a save and over to the browser,

00:05:38.980 --> 00:05:41.875
into the developer tools,

00:05:41.875 --> 00:05:46.330
refresh, into the network.

00:05:46.330 --> 00:05:50.645
Now, even though we've set the image to be 640 pixels wide,

00:05:50.645 --> 00:05:53.150
the browser has now detected my monitor is

00:05:53.150 --> 00:05:56.930
a retina screen and chose to apply the 2x image,

00:05:56.930 --> 00:05:59.400
which is 1280 wide,

00:05:59.400 --> 00:06:03.500
and this image is then squeezed into the same available space.

00:06:03.500 --> 00:06:08.405
Using these extra image attributes is a pretty good way to switch between image sizes,

00:06:08.405 --> 00:06:11.765
depending on the screen or the pixel density.

00:06:11.765 --> 00:06:15.890
Often, we don't need to do anything more complex than this.

00:06:15.890 --> 00:06:18.855
We're also putting a lot of trust in the browser,

00:06:18.855 --> 00:06:23.795
that's if we wanted more manual control or even more flexible options.

00:06:23.795 --> 00:06:28.290
Then next we'll take a look at how to do this with the pitch element.
