WEBVTT
1

00:00:05.160  -->  00:00:08.020
Hello and welcome back to the course in Python programming.

2

00:00:08.020  -->  00:00:09.760
How did you go of the previous tutorial.

3

00:00:09.810  -->  00:00:16.200
Did you have a chance to play around with the weasel's nations and create subplots for different matrices

4

00:00:16.200  -->  00:00:17.940
that we have in the data set.

5

00:00:18.090  -->  00:00:23.330
And I would be very curious to know if you found any interesting insights into the data.

6

00:00:23.670  -->  00:00:24.960
So today what are you going to do.

7

00:00:24.950  -->  00:00:29.580
We're going to create our very first function that's going to be a very interesting tutorial so let's

8

00:00:29.580  -->  00:00:34.950
call it function or our own function more like it.

9

00:00:34.980  -->  00:00:39.720
What I wanted to mention before Istar is that first of all here you can see that some of the things

10

00:00:39.720  -->  00:00:41.690
on these charts are a bit blurry.

11

00:00:41.700  -->  00:00:45.930
That is because I am zoomed in to my browser so that we can see the code better.

12

00:00:45.930  -->  00:00:50.120
So if I zoom out you'll see you know there we go.

13

00:00:50.190  -->  00:00:55.860
So if I imagine you can see that the chairs are actually very crisp and clear and when you look at the

14

00:00:55.860  -->  00:01:00.840
code like this and this is what you should probably be seeing on your machine you'll see that it's all

15

00:01:00.840  -->  00:01:02.550
lines up very nicely.

16

00:01:02.820  -->  00:01:09.060
It fit a lot of it fits on the chart so on the screen so it doesn't look like there is so much going

17

00:01:09.060  -->  00:01:10.930
on like when we're zoomed in.

18

00:01:11.160  -->  00:01:17.430
It looks a bit cluttered sometimes but that is the tradeoff that we have in order to be able to see

19

00:01:17.430  -->  00:01:22.680
the color code clear and for turtles still zoom back in but not as much.

20

00:01:22.680  -->  00:01:27.390
So usually it's zoomed in like that but I'm going to zoom in out a bit because we are going to code

21

00:01:27.390  -->  00:01:32.870
quite a lot and I want us to be able to see more and hopefully you can still see the code this way.

22

00:01:33.120  -->  00:01:33.380
All right.

23

00:01:33.390  -->  00:01:34.410
So our own function.

24

00:01:34.410  -->  00:01:36.750
What are we going to do and why do we need this tutorial.

25

00:01:36.750  -->  00:01:37.600
What is it all about.

26

00:01:37.740  -->  00:01:40.730
Well as you have probably noticed while you were experimenting.

27

00:01:40.890  -->  00:01:42.600
Now we have this code it's ready yes.

28

00:01:42.600  -->  00:01:47.130
And what we need to do is replace the different matrix every single time.

29

00:01:47.370  -->  00:01:52.650
Or remove the certain number of players if we want less players we'll just remove players from here

30

00:01:52.650  -->  00:01:53.030
.

31

00:01:53.070  -->  00:01:57.840
So let's just take this show you again so will copy it here and let's say we want the games but we only

32

00:01:57.840  -->  00:02:03.930
want them for the first second and the ninth or the zeros the first and the ninth.

33

00:02:03.930  -->  00:02:07.150
And so if we run this now then we'll get less right.

34

00:02:07.200  -->  00:02:12.510
So but basically every single time we have to recreate a lot of code reuse a lot of code.

35

00:02:12.540  -->  00:02:16.440
How can we simplify this process because we are redoing a lot of work.

36

00:02:16.440  -->  00:02:18.970
How can we make this process easier for ourself.

37

00:02:19.110  -->  00:02:21.510
That is where functions come into play.

38

00:02:21.510  -->  00:02:25.560
We're going to create our own function which is actually going to be like a wrapper for all of this

39

00:02:25.560  -->  00:02:26.110
code.

40

00:02:26.250  -->  00:02:33.000
And inside that function we'll just posit some parameters to tell it what we want is output how we want

41

00:02:33.000  -->  00:02:38.300
to limit our selection and then we will do all that work for us and just give us a chart as output.

42

00:02:38.550  -->  00:02:40.110
That sounds pretty cool doesn't it.

43

00:02:40.110  -->  00:02:42.720
So we're going to now create that function.

44

00:02:42.720  -->  00:02:47.060
So how do you create a function in Python which create a function.

45

00:02:47.070  -->  00:02:52.800
It's actually very simple all you have to do is type in D F for define my plot will be the name of a

46

00:02:52.800  -->  00:02:57.840
function as you can see it's already highlighted in different color and then we'll just give it empty

47

00:02:57.840  -->  00:03:02.660
brackets for now because then later we'll specify what parameters we want to pass the function in those

48

00:03:02.670  -->  00:03:04.430
brackets and then call on.

49

00:03:04.710  -->  00:03:12.630
And just as with loops and if statements and other indentation or requiring syntax in Python you can

50

00:03:12.630  -->  00:03:17.430
see that here we've got an invitation that means that the body of the function needs to be coded in

51

00:03:17.430  -->  00:03:18.130
this part.

52

00:03:18.130  -->  00:03:22.180
So I'm just going to run that for now to make some space.

53

00:03:22.190  -->  00:03:23.470
It just makes space again.

54

00:03:23.520  -->  00:03:26.300
So in fact let's copy that.

55

00:03:26.340  -->  00:03:28.210
Rid of this one could be here.

56

00:03:28.290  -->  00:03:29.780
All right so there it is.

57

00:03:29.850  -->  00:03:31.330
And what do we want to do.

58

00:03:31.350  -->  00:03:36.210
Well basically we want to take this code that we have in a way and put it in here.

59

00:03:36.280  -->  00:03:37.430
Ideally you.

60

00:03:37.650  -->  00:03:39.310
And let's put a tap here.

61

00:03:39.420  -->  00:03:44.600
But what we can see is to start off if we can see that here we've got zero to nine.

62

00:03:44.670  -->  00:03:49.200
And here is there's not so there is a couple of things are changing in every single line and that's

63

00:03:49.470  -->  00:03:55.980
first of all this number then the marker and the color and this number or so forth things change in

64

00:03:55.980  -->  00:03:56.440
every line.

65

00:03:56.490  -->  00:03:58.670
But otherwise each line is identical.

66

00:03:58.680  -->  00:04:05.970
So how would we know how would the function know what if we want to only identify or visualize certain

67

00:04:05.970  -->  00:04:10.200
players so we don't want to visualize all the players we just want to visualize some of the players

68

00:04:10.380  -->  00:04:11.160
in our data set.

69

00:04:11.160  -->  00:04:13.340
So how would the function know.

70

00:04:13.380  -->  00:04:17.670
Well we would pass a parameter would tell the function which players we want to visualize.

71

00:04:17.820  -->  00:04:19.310
Then we would need a loop here.

72

00:04:19.320  -->  00:04:26.670
So how we're just trying to assess if we can put a loop here that will create this code for us to run

73

00:04:26.670  -->  00:04:28.750
this code iteration by duration.

74

00:04:28.830  -->  00:04:33.970
And that way it will save us from having to rewrite these lines.

75

00:04:33.980  -->  00:04:37.760
So basically we can see that these lines are identical except for these four things.

76

00:04:37.860  -->  00:04:39.110
How can you put them tell them.

77

00:04:39.360  -->  00:04:42.810
Well we can do that pretty simple so we're just going to remove all of these.

78

00:04:42.990  -->  00:04:43.210
Right.

79

00:04:43.200  -->  00:04:47.020
I will just keep one and we'll just put a for loop for I.

80

00:04:47.200  -->  00:04:52.530
I mean we don't have a list of players but we're going to need one so we're going to say player list

81

00:04:52.910  -->  00:04:53.530
colon.

82

00:04:53.610  -->  00:04:58.610
And then this will be our inside out and not a worry we going to fix this up all right now.

83

00:04:58.650  -->  00:05:00.300
First of all is a player.

84

00:05:00.300  -->  00:05:01.350
So what is that going to be.

85

00:05:01.350  -->  00:05:06.390
Obviously that the function doesn't know that in advance the way we're going to run this function is

86

00:05:06.390  -->  00:05:09.250
we're going to actually call it later on we're going to say.

87

00:05:09.360  -->  00:05:16.970
So here we want to just say something like my Plaut and I want to visualize let's say for example I

88

00:05:17.000  -->  00:05:24.040
want to visualize and pass a list of players that we want to have a look at that say Kobe Bryant LeBron

89

00:05:24.050  -->  00:05:27.440
James and others said Derrick Rose.

90

00:05:27.500  -->  00:05:30.590
So ideally we just want to run the function like that.

91

00:05:30.740  -->  00:05:36.950
We pass the list of players to the function and then it does all the work for us and just creates viz.

92

00:05:36.950  -->  00:05:37.110
.

93

00:05:37.150  -->  00:05:37.510
Right.

94

00:05:37.510  -->  00:05:40.990
That would be the best outcome for us so how do we do that.

95

00:05:41.020  -->  00:05:47.990
Obviously we need this player list to be a parameter for the function so my plot takes a parameter which

96

00:05:47.990  -->  00:05:49.260
is this list.

97

00:05:49.370  -->  00:05:54.520
And then now we need to utilize these players so we know that II is going to iterate over the player

98

00:05:54.540  -->  00:05:57.940
this is going to it's going to be Kobe Bryant there's going to be LeBron James is going to be Derrick

99

00:05:57.940  -->  00:05:58.640
Rose.

100

00:05:58.630  -->  00:06:03.180
How can we use that so we have a zero so we need actually.

101

00:06:03.220  -->  00:06:09.110
But we I is going to be a name so we can actually instead of saying I hear we can say name so a name

102

00:06:09.110  -->  00:06:15.100
in player list so the name is going to have the name how do we go from the name to the index of the

103

00:06:15.110  -->  00:06:15.650
player.

104

00:06:15.820  -->  00:06:16.590
Well very simple.

105

00:06:16.590  -->  00:06:21.880
We already know that we have if we go to the very top where you know there we have this wonderful dictionary

106

00:06:21.880  -->  00:06:27.200
here for players and we know that from this picture we kind of based on the name we can find the index

107

00:06:27.210  -->  00:06:29.890
of Kobe Bryant's 0 0.

108

00:06:29.950  -->  00:06:33.310
LeBron James his index to Derrick Rose's index 8.

109

00:06:33.340  -->  00:06:41.560
So using this dictionary we can get to the player's index and then pass it on this to the Matrix so

110

00:06:41.560  -->  00:06:44.020
as to that will say player dictionary.

111

00:06:44.020  -->  00:06:49.790
And instead in here we're going to specify the name so that the current value of the iteration.

112

00:06:49.960  -->  00:06:55.780
We know that name in this loop is iterating over these values that are passed to player list.

113

00:06:55.780  -->  00:07:00.830
And so this is going to be Kobe Bryant's so called Bryant and here and this is going to be co-brand

114

00:07:00.910  -->  00:07:04.690
index and there's going to be LeBron James and it's going to be Derrick Rose's index.

115

00:07:04.690  -->  00:07:05.910
All right that's good.

116

00:07:05.920  -->  00:07:09.670
We're going to leave the color for now and the marker for now we're just going to leave them like that

117

00:07:10.030  -->  00:07:12.760
and we'll do the same thing here for label.

118

00:07:12.790  -->  00:07:17.650
We don't need to actually we can we could do exactly the same thing we could say the name of the player

119

00:07:17.660  -->  00:07:17.690
.

120

00:07:17.710  -->  00:07:21.650
So let's say Kobe Bryant then get his index which would be zero.

121

00:07:21.760  -->  00:07:27.640
And then from that index get the name of the player which would be Kobe Bryant that would be a bit of

122

00:07:28.120  -->  00:07:34.030
just doing like the same thing twice instead of that we can just say name here and that will be easier

123

00:07:34.100  -->  00:07:38.810
because we already know the name which is Kobe Bryant LeBron James or Derrick Rose.

124

00:07:38.800  -->  00:07:45.580
So if we run that we've just create a function and if we run a plot you'll see that we have created

125

00:07:45.750  -->  00:07:49.030
the lovely lovely plot for our function right.

126

00:07:49.060  -->  00:07:52.270
So or our function created love a play for us.

127

00:07:52.270  -->  00:07:58.580
The only drawback here is that the colors and the markers haven't been fixed up right so the colors

128

00:07:58.570  -->  00:08:00.690
and the markers are all the same for all players.

129

00:08:00.700  -->  00:08:05.830
So even if I add more players it will use the same colors and markers and that's because every single

130

00:08:05.830  -->  00:08:13.120
time this loop is running we're using the same color black and using the same marker Yes and that is

131

00:08:13.120  -->  00:08:15.150
something we definitely need to fix up.

132

00:08:15.280  -->  00:08:15.570
All right.

133

00:08:15.580  -->  00:08:22.300
And so to quickly recap on what we did this time we basically just created a plot function which has

134

00:08:22.300  -->  00:08:29.710
a loop with a variable or iterative variable name which moves through the list of players that were

135

00:08:29.710  -->  00:08:30.590
passed to the function.

136

00:08:30.600  -->  00:08:36.010
So here once we call the function we pass a list of players names of players.

137

00:08:36.320  -->  00:08:40.660
And based on that a list so name takes the values of this list one by one.

138

00:08:40.780  -->  00:08:45.680
So let's say at the start asked Kobe Bryant what happens is we look up Kobe Bryant in the dictionary

139

00:08:45.700  -->  00:08:48.970
we get A's zero because he's his index is zero.

140

00:08:49.100  -->  00:08:56.230
And that means that 0 is then passed to the game's matrix and that gives us the roll for that player

141

00:08:56.240  -->  00:09:03.820
for Kobe Bryant which is row number 0 and then color black line style marker marker size label name

142

00:09:03.830  -->  00:09:04.130
.

143

00:09:04.150  -->  00:09:08.550
Kobe Bryant is given here because the name is still Kobe Bryant.

144

00:09:08.680  -->  00:09:11.710
And so this line is added to our plot.

145

00:09:11.710  -->  00:09:12.720
Right so it's out.

146

00:09:12.830  -->  00:09:15.080
I don't know I think it's it's one sided plot.

147

00:09:15.130  -->  00:09:15.890
Good.

148

00:09:15.980  -->  00:09:16.340
OK.

149

00:09:16.370  -->  00:09:22.120
Then this loop moves into the next iteration the name becomes LeBron James then for the ball on James

150

00:09:22.120  -->  00:09:29.500
what happens is we go to the dictionary then name LeBron James Fost what we get is the result is the

151

00:09:29.500  -->  00:09:36.080
number one because LeBron James is indexing on matrices as one then that index has past games.

152

00:09:36.220  -->  00:09:41.040
Therefore we get the roll which represents LeBron James as games.

153

00:09:41.060  -->  00:09:42.870
Row number one of that matrix.

154

00:09:43.000  -->  00:09:48.760
The color is black lines style markers all the same label is also changed to the name which is LeBron

155

00:09:48.760  -->  00:09:51.590
James and therefore we can see that label over here.

156

00:09:51.800  -->  00:09:57.050
And this line is added to our plot and finally the same thing happens for Derrick Rose.

157

00:09:57.050  -->  00:10:02.870
So once again the name is passed over here so name iterates iterates over onto Derrick Rose that's the

158

00:10:02.870  -->  00:10:04.780
next step of the loop.

159

00:10:04.780  -->  00:10:10.270
This becomes their Crose dictionary brings up based on their Crosas name brings up the number 8 because

160

00:10:10.390  -->  00:10:16.700
they're Crosas index in all of matrices is 8 and then Games returns rhône number 8 which is associated

161

00:10:16.690  -->  00:10:23.080
with Derrick Rose the colors black line style marker marker size label is just given the name of Derrick

162

00:10:23.090  -->  00:10:25.970
Rose over there and that's all you can see Derrick Rose.

163

00:10:26.000  -->  00:10:32.540
And this line is added to A-plot beautiful and then after all of that is done then the legend is plotted

164

00:10:32.600  -->  00:10:40.070
over here the ticks are shown as the seasons and then the plot is shown as simple as that.

165

00:10:40.070  -->  00:10:45.030
So that's what this simple call replaces all of those lines of code.

166

00:10:45.030  -->  00:10:49.060
So as Guess he said is a lot of space and a lot of coding and it's very replicable now.

167

00:10:49.100  -->  00:10:51.320
So we can very easily replicate this code.

168

00:10:51.590  -->  00:10:57.110
And as discussed the next time we're going to learn how to fix up these colors and markers and from

169

00:10:57.110  -->  00:11:02.770
there we will have a fully functional or fully working function can wait to see you next time.

170

00:11:02.770  -->  00:11:07.370
Until then happy coding.
