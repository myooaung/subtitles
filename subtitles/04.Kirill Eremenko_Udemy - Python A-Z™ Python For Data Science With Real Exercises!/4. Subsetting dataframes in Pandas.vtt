WEBVTT
1

00:00:04.700  -->  00:00:05.630
Alone.

2

00:00:05.760  -->  00:00:07.910
Welcome back to the course on Peiffer programming.

3

00:00:08.070  -->  00:00:13.560
Today we're going to learn how to subset doorframes friends and pandas foreign Python just because we're

4

00:00:13.570  -->  00:00:16.310
using the pandas packaged in Python.

5

00:00:16.320  -->  00:00:16.650
All right.

6

00:00:16.650  -->  00:00:22.310
This is going to be a long tutorial is going to have three parts and we'll get to that in a second.

7

00:00:22.320  -->  00:00:23.550
So buckle up.

8

00:00:23.550  -->  00:00:24.350
All right.

9

00:00:24.510  -->  00:00:28.560
How do we look at our data sets right the start of their stars head.

10

00:00:28.560  -->  00:00:33.570
And again we're going to be using the head function a lot because we're going to be visualizing our

11

00:00:33.570  -->  00:00:37.280
data set like that quite a bit and we don't want we want to save space basically.

12

00:00:37.290  -->  00:00:37.580
All right.

13

00:00:37.590  -->  00:00:42.300
So three parts three parts buckle up.

14

00:00:42.330  -->  00:00:42.630
All right.

15

00:00:42.640  -->  00:00:47.370
So three parts we're going to talk about how to subset by the rows.

16

00:00:47.520  -->  00:00:53.560
Then we're going to see how to subset columns and we're going to see how to combine the two.

17

00:00:53.790  -->  00:00:54.380
All right.

18

00:00:54.480  -->  00:00:56.040
So let's get started.

19

00:00:56.070  -->  00:00:57.740
Part One.

20

00:00:57.960  -->  00:00:59.070
ROSE.

21

00:00:59.220  -->  00:01:00.150
All right.

22

00:01:00.150  -->  00:01:01.440
We're going to talk about the rose.

23

00:01:01.710  -->  00:01:02.430
Good news.

24

00:01:02.430  -->  00:01:05.580
We've already talked about slicing we know what slicing is.

25

00:01:05.730  -->  00:01:10.980
We've talked about slicing for lists we've talked about slicing for matrices and we can use slicing

26

00:01:10.980  -->  00:01:12.710
for doorframes.

27

00:01:12.720  -->  00:01:13.070
All right.

28

00:01:13.080  -->  00:01:13.950
So how do we do that.

29

00:01:13.950  -->  00:01:15.310
We say stats.

30

00:01:15.540  -->  00:01:20.250
And then in square brackets you specify the rows that you want to slice.

31

00:01:20.250  -->  00:01:24.250
Now you will notice that there is kind of a discrimination between rows and columns.

32

00:01:24.420  -->  00:01:30.170
And we will see just now why so 21:26 is the rows that we want to extract.

33

00:01:30.560  -->  00:01:32.550
Twenty one to twenty five.

34

00:01:32.550  -->  00:01:39.970
So 21 starting from 21 going to 25 remember starts from zero and the whole data from scratch from zero

35

00:01:39.980  -->  00:01:44.700
and whatever you specify here will be from there so if it's there it's 26 it'll be like that and not

36

00:01:44.700  -->  00:01:49.200
including the last one just as we have slicing in lists or in matrices.

37

00:01:49.200  -->  00:01:53.790
Now how did Python know that we wanted to take that rows and not the column.

38

00:01:53.910  -->  00:01:55.840
Maybe in this case there's just more rows.

39

00:01:55.860  -->  00:01:59.880
There's not 21 columns but if I say two to five or two to four.

40

00:01:59.880  -->  00:02:00.420
Right.

41

00:02:00.660  -->  00:02:01.970
So how did Python know that.

42

00:02:01.970  -->  00:02:05.160
I just want the second and the third row and not the second.

43

00:02:05.160  -->  00:02:10.210
So 0 1 2 not in second and the third is how did Python know that I don't want these columns.

44

00:02:10.260  -->  00:02:15.960
I didn't know that I want these rows right in the matrices we had we had that coal mine we would specify

45

00:02:15.960  -->  00:02:17.000
that four rows.

46

00:02:17.130  -->  00:02:22.190
And if we wanted columns which specify a colon here and we specify this for columns.

47

00:02:22.260  -->  00:02:22.540
Right.

48

00:02:22.560  -->  00:02:26.320
But how does Python know in this case that we're talking exactly about rows.

49

00:02:26.400  -->  00:02:33.090
Well the discrimination comes from the way these objects or doorframe of these structures are used in

50

00:02:33.090  -->  00:02:37.710
most cases the way you use them is you have the names of the columns at the top and then you have the

51

00:02:37.710  -->  00:02:41.250
dotted going down so every row is a new entry of data.

52

00:02:41.330  -->  00:02:47.520
It's a normal convention that everybody or most people use tables and doorframes and data sets that

53

00:02:47.520  -->  00:02:47.970
way.

54

00:02:48.090  -->  00:02:54.430
So it is already biased in that sense and therefore is discrimination just comes naturally.

55

00:02:54.480  -->  00:03:00.660
You are more likely to slice to need to slice your daughter frame by Rose than by Combes is sometimes

56

00:03:00.660  -->  00:03:03.000
you need two extracts and columns from a doorframe.

57

00:03:03.240  -->  00:03:04.070
And we'll get to that.

58

00:03:04.080  -->  00:03:05.290
We'll learn how to do that.

59

00:03:05.430  -->  00:03:12.990
But more often than not you will be slicing or extracting subsets of your data set by rows.

60

00:03:12.990  -->  00:03:19.680
So if I want rows 100 to 110 I can just type it in there like that very quickly and I get those specific

61

00:03:19.680  -->  00:03:20.150
rows.

62

00:03:20.280  -->  00:03:24.090
So that is why there's that discrimination towards Rose.

63

00:03:24.450  -->  00:03:28.200
And as you can see this is very similar to matrices.

64

00:03:28.200  -->  00:03:29.100
Let's try another one.

65

00:03:29.100  -->  00:03:34.400
Let's try a different approach and say we want stats and we just want everything and stats that will

66

00:03:34.400  -->  00:03:40.050
be exactly the same as just printing out the whole table including that dot dot dot in the middle.

67

00:03:40.060  -->  00:03:44.480
Also you get the number of columns at the end number of rows and columns.

68

00:03:44.520  -->  00:03:50.400
What else we can do we can say stat's 185 for example 2 to the end.

69

00:03:50.400  -->  00:03:55.010
So we don't specify second thing are there as you can see it starts at 185 goes to the very end.

70

00:03:55.110  -->  00:04:02.550
And as you guessed we can also say stats starts to 10 we'll get the first 10.

71

00:04:02.550  -->  00:04:09.930
So this is exactly the same as saying stats had 10 because that will give us exactly the top 10 as well

72

00:04:09.930  -->  00:04:10.500
.

73

00:04:10.500  -->  00:04:11.410
All right.

74

00:04:11.550  -->  00:04:13.680
So that's how we get these.

75

00:04:13.680  -->  00:04:15.720
All right let's do a quick exercise.

76

00:04:15.720  -->  00:04:22.130
This is going to be a quick exercise is going to be a refresher now that we've discussed that.

77

00:04:22.140  -->  00:04:24.990
It's exactly the same as slicing and matrices.

78

00:04:24.990  -->  00:04:29.670
The exercise is to reverse the doorframe.

79

00:04:29.670  -->  00:04:35.860
So your goal is to print out the whole doorframe but in reverse order so Zimbabwe should be at the top

80

00:04:35.870  -->  00:04:37.020
then Zambia and so on.

81

00:04:37.020  -->  00:04:40.810
So the first and last throws should be come first and Sonna should get flipped.

82

00:04:40.830  -->  00:04:42.210
How will you do that.

83

00:04:42.340  -->  00:04:47.780
This video give us the go see if you remember what we learned in the previous section if you can recall

84

00:04:47.780  -->  00:04:49.000
it right away.

85

00:04:49.290  -->  00:04:54.080
Once you resume the video in three to one I'm going to show you how I would do it.

86

00:04:54.120  -->  00:04:59.880
I would say stat's square brackets and say to call on so start with not start at the very beginning

87

00:05:00.180  -->  00:05:00.870
then go to there.

88

00:05:00.870  -->  00:05:06.770
So this means start the beginning go to the very end and this column is the step so here is minus one

89

00:05:06.780  -->  00:05:08.000
essence you put a minus.

90

00:05:08.280  -->  00:05:13.320
Python understands start at the very end go to the very beginning with a step of minus one or on that

91

00:05:13.650  -->  00:05:14.230
you'll see.

92

00:05:14.230  -->  00:05:14.960
There we go.

93

00:05:14.980  -->  00:05:16.300
It has been reversed.

94

00:05:16.480  -->  00:05:22.500
Very simple so the slicing principles are very powerful when it comes to doorframes allow you to adjust

95

00:05:22.500  -->  00:05:29.710
adapt change modify your doorframes very quickly on the fly and to suit the analysis that you're looking

96

00:05:29.700  -->  00:05:29.950
at.

97

00:05:30.120  -->  00:05:33.690
And by the way what happened is we just output this data from like that.

98

00:05:33.690  -->  00:05:35.110
We didn't actually modify it.

99

00:05:35.120  -->  00:05:41.230
So if I say stats here you will see that it's it's actually printed in the correct order.

100

00:05:41.400  -->  00:05:44.080
And if you want to change it then you would need to assign.

101

00:05:44.070  -->  00:05:47.640
You would need to say stats equals this.

102

00:05:47.650  -->  00:05:52.060
So you're creating a new data from here and then you would assign it to the old ones who basically override

103

00:05:52.070  -->  00:05:52.250
it.

104

00:05:52.260  -->  00:05:53.870
We're not going to do that.

105

00:05:53.940  -->  00:05:58.040
All right so what we're up to now let's say here's another exercise.

106

00:05:58.060  -->  00:05:58.290
Right.

107

00:05:58.300  -->  00:06:03.780
So we've done one exercise it's just another one very quickly because these are quite fun.

108

00:06:03.780  -->  00:06:06.190
I could just keep doing them all day long.

109

00:06:06.310  -->  00:06:15.670
So let's say instead of reverse gets only every 20th country or row that's all right.

110

00:06:15.690  -->  00:06:21.650
So three to one pause the video and otherwise I'm going to show you how I would do it.

111

00:06:21.640  -->  00:06:22.490
Stats.

112

00:06:22.690  -->  00:06:27.280
Square brackets start and nothing and then do a step of 20.

113

00:06:27.310  -->  00:06:31.150
There we go 0 20 40 60 80 180.

114

00:06:31.140  -->  00:06:31.470
Right.

115

00:06:31.500  -->  00:06:33.190
So that's how we do it.

116

00:06:33.210  -->  00:06:33.860
Beautiful.

117

00:06:33.880  -->  00:06:36.550
OK so that's how we work refroze.

118

00:06:36.610  -->  00:06:42.430
Now we're going to move on to part two for today are two columns.

119

00:06:42.510  -->  00:06:44.530
Let's get on with it.

120

00:06:44.520  -->  00:06:48.040
So how do we bring up the calls we say stats columns.

121

00:06:48.250  -->  00:06:49.400
We get the columns.

122

00:06:49.810  -->  00:06:54.840
And how do we extract one call so I have stats on head.

123

00:06:55.180  -->  00:06:58.720
That is our data frame how to extract one column from here.

124

00:06:58.710  -->  00:07:01.730
How do I say for instance I just want the country name.

125

00:07:01.750  -->  00:07:04.840
I just want to extract this column from the data set.

126

00:07:04.830  -->  00:07:08.530
I don't want the rest of it I just want wanted the list of the country names.

127

00:07:08.560  -->  00:07:10.290
How do I get it.

128

00:07:10.300  -->  00:07:11.400
So very simple.

129

00:07:11.390  -->  00:07:14.270
You do stats and then in square brackets.

130

00:07:14.500  -->  00:07:19.410
Remember for slicing we used numbers he said one to 10 or something like that that would give us the

131

00:07:19.410  -->  00:07:19.800
rose.

132

00:07:19.950  -->  00:07:24.780
But if you use the names of the columns then Python will automatically know that you are talking about

133

00:07:24.780  -->  00:07:25.150
the column.

134

00:07:25.140  -->  00:07:27.730
So it's a country name you copied in here.

135

00:07:28.090  -->  00:07:34.620
You run that and you get the country name as you can see what we got is the output of these country

136

00:07:34.620  -->  00:07:35.830
names.

137

00:07:35.860  -->  00:07:36.980
Very powerful again.

138

00:07:37.060  -->  00:07:43.650
And also we can use the head function here as well so we can say stat's country name and we will say

139

00:07:43.660  -->  00:07:46.510
had you run that you'd get the top five.

140

00:07:46.500  -->  00:07:48.050
Same principle.

141

00:07:48.090  -->  00:07:49.240
What else would you want to do.

142

00:07:49.240  -->  00:07:51.170
What if we want to extract two columns.

143

00:07:51.270  -->  00:07:57.600
What if we want to extract this column and this call right so we want to actually get a dot frame that

144

00:07:57.610  -->  00:07:58.540
will contain these two.

145

00:07:58.560  -->  00:08:03.520
You'll notice that this isn't presented as a data frame because it only has one column similar concept

146

00:08:03.510  -->  00:08:09.240
to our kind of but this is it only has one column so therefore why would I think presented to you as

147

00:08:09.250  -->  00:08:15.360
a daughter for maybe you want to use it for other purposes whereas here if we say to say country name

148

00:08:15.690  -->  00:08:18.690
and then we say Khama birth rate.

149

00:08:18.850  -->  00:08:21.710
All right we can copy that or just run it here.

150

00:08:22.130  -->  00:08:24.180
OK I admit I made a mistake.

151

00:08:24.250  -->  00:08:28.080
That's why the error must be another mistake somewhere here.

152

00:08:28.240  -->  00:08:30.280
Oh that's right I forgot the list.

153

00:08:30.270  -->  00:08:30.650
OK.

154

00:08:30.760  -->  00:08:32.420
Let's get of it backlist.

155

00:08:32.690  -->  00:08:34.720
Let's keep this as head.

156

00:08:34.720  -->  00:08:37.670
Now what I wanted to show you is what if we want to.

157

00:08:37.680  -->  00:08:44.920
Right so if we say I want this one and I want birth rate so I want these to let's put them in a list

158

00:08:44.920  -->  00:08:45.180
.

159

00:08:45.220  -->  00:08:46.230
There they are in a list.

160

00:08:46.240  -->  00:08:51.460
If I run that I have a list of these two room these square brackets mean a list is going to keep the

161

00:08:51.450  -->  00:08:53.810
head because it just makes things simpler.

162

00:08:53.830  -->  00:08:58.510
So instead of this I can pasada a list of columns.

163

00:08:58.650  -->  00:09:02.040
So that is where the second square bracket comes in.

164

00:09:02.040  -->  00:09:07.180
Right so I'm going to run this and that's why we have the square record that's that's what Python is

165

00:09:07.170  -->  00:09:08.290
expecting.

166

00:09:08.320  -->  00:09:14.800
Now it does look a bit more intimidating with the square brackets right in our you would have you'd

167

00:09:14.790  -->  00:09:17.210
be passing a vector.

168

00:09:17.320  -->  00:09:22.150
So basically you'd say C and here would fall at the square brackets you would be parsing something like

169

00:09:22.140  -->  00:09:26.800
that you would have a vector you would be parsing a vector and therefore it wouldn't look as bad.

170

00:09:26.810  -->  00:09:28.340
It would look something like this.

171

00:09:28.710  -->  00:09:30.640
You would right away see that this is a vector.

172

00:09:30.630  -->  00:09:31.170
OK.

173

00:09:31.260  -->  00:09:32.650
And then it's been passed.

174

00:09:32.850  -->  00:09:34.280
So that square brackets.

175

00:09:34.380  -->  00:09:38.810
But in this case the square brackets can be a bit intimidating when you see them you might think.

176

00:09:39.030  -->  00:09:45.990
What is this is this looks like a like a matrix or like a two dimensional array or something like that

177

00:09:46.010  -->  00:09:46.140
.

178

00:09:46.300  -->  00:09:48.300
But in reality it's nothing special.

179

00:09:48.310  -->  00:09:50.110
This is just the list that we're passing.

180

00:09:50.280  -->  00:09:54.130
And then this these square brackets belong to the stats object.

181

00:09:54.120  -->  00:09:57.260
So that is how we get this output.

182

00:09:57.310  -->  00:09:57.940
All right.

183

00:09:57.990  -->  00:10:00.420
And not that you can specify the columns in any order.

184

00:10:00.420  -->  00:10:02.710
So let's copy that.

185

00:10:03.030  -->  00:10:09.160
And let's take this call on for example and put it at the beginning give me a second.

186

00:10:09.160  -->  00:10:09.920
There you go.

187

00:10:10.060  -->  00:10:12.810
You'll see they do follow the order that you specify.

188

00:10:12.820  -->  00:10:17.050
But the point is that you don't have to specify them in the order that they come in the data set you

189

00:10:17.050  -->  00:10:20.920
can choose your own order in which you want to specify.

190

00:10:21.250  -->  00:10:21.780
All right.

191

00:10:21.820  -->  00:10:27.500
And then we're going to learn a really cool trick or actually it's a very cool convention.

192

00:10:27.580  -->  00:10:28.660
I call it quick access.

193

00:10:28.660  -->  00:10:30.210
That's not the official name.

194

00:10:30.310  -->  00:10:38.150
Not that it requires the name to be one word and you will see what I mean just now so I'd say that's

195

00:10:38.200  -->  00:10:41.660
dot head top rose again.

196

00:10:41.740  -->  00:10:46.270
And what we're going to do now is we're going to say stats.

197

00:10:46.540  -->  00:10:51.610
So how do we access for instance birth rates right so we were you know we can say start square brackets

198

00:10:51.880  -->  00:10:54.460
birth rate right around that.

199

00:10:54.500  -->  00:10:55.570
I'll get that birth rate.

200

00:10:55.570  -->  00:10:56.950
And that's that.

201

00:10:57.010  -->  00:11:02.260
But it's the same thing you can do similar thing in our But in our you have something like the dollar

202

00:11:02.260  -->  00:11:08.150
operator you can say that's a dollar sign birth rate and that will give you the birth rate.

203

00:11:08.140  -->  00:11:09.190
Call them right away.

204

00:11:09.190  -->  00:11:13.510
It's just a quick way a quick access way to get to that call them sort of the square brackets and then

205

00:11:13.510  -->  00:11:15.410
the quotation marks are on this year.

206

00:11:15.400  -->  00:11:16.420
I get an error.

207

00:11:16.490  -->  00:11:16.980
That's right.

208

00:11:17.000  -->  00:11:18.180
Because Python.

209

00:11:18.280  -->  00:11:23.620
You need to put a dot instead of the dollar sign get the same results you get quick access to that column

210

00:11:24.110  -->  00:11:29.440
and now you can see why we actually specify We changed the names of the columns because we wanted this

211

00:11:29.530  -->  00:11:34.990
space to go away so that we could use it as one word if it was like this then Python would see this

212

00:11:35.000  -->  00:11:39.410
as one object that we were calling and then this as a separate and that would be a problem.

213

00:11:39.400  -->  00:11:41.390
So that's why we wanted it to be together.

214

00:11:41.410  -->  00:11:44.470
That's why we can rename columns and that's why we engaged in that.

215

00:11:44.710  -->  00:11:47.030
And here we can also say head.

216

00:11:47.200  -->  00:11:48.190
Same principle.

217

00:11:48.190  -->  00:11:53.950
We can get that now as you can imagine it would be a much harder to do this and take this approach for

218

00:11:53.950  -->  00:11:58.450
two columns so if you want to call them you still go in two or two more is the going need to take this

219

00:11:58.450  -->  00:11:59.030
approach.

220

00:11:59.140  -->  00:12:00.890
But if you're just looking for one column.

221

00:12:00.910  -->  00:12:07.330
Quick Access stats or the name of your daughter from DOT name and call them and that's it you're there

222

00:12:07.330  -->  00:12:07.790
.

223

00:12:07.960  -->  00:12:08.820
Beautiful.

224

00:12:08.830  -->  00:12:09.920
Very good.

225

00:12:10.060  -->  00:12:12.070
So I hope you're keeping up.

226

00:12:12.070  -->  00:12:16.090
I know this is going to be quick but in reality we're not doing anything complicated.

227

00:12:16.100  -->  00:12:21.290
These are all pretty straightforward things especially now that we've already talked about matrices

228

00:12:21.280  -->  00:12:26.320
we know about slicing and matrices so the slicing part was just basically a refresher.

229

00:12:26.320  -->  00:12:27.380
The columns.

230

00:12:27.410  -->  00:12:28.440
They are very straightforward.

231

00:12:28.450  -->  00:12:33.950
Square brackets and column name it's good that Python can understand you whether you want the rows the

232

00:12:33.950  -->  00:12:39.650
columns just so you don't have to specify that call my every time and say exactly what you're doing

233

00:12:39.700  -->  00:12:42.680
like this python Python is a smart language like that.

234

00:12:43.000  -->  00:12:47.070
And part three combining the two.

235

00:12:47.090  -->  00:12:48.540
So how can we combine them.

236

00:12:48.790  -->  00:12:52.260
Well let's have a look we can say stat's is going to be interesting.

237

00:12:52.270  -->  00:12:54.780
Let's say Slye said by four to eight.

238

00:12:55.000  -->  00:12:59.000
And at the same time we're going to take country name and birthrights.

239

00:12:59.000  -->  00:13:00.850
We've done that.

240

00:13:01.130  -->  00:13:06.580
This could be this it will just copy the list crunching in birthrate and we'll put it in here.

241

00:13:06.880  -->  00:13:07.180
All right.

242

00:13:07.180  -->  00:13:09.530
So I'm going to run this and we'll talk about it then.

243

00:13:09.550  -->  00:13:17.200
So it's sliced out the fourth fifth sixth seventh in terms of Rose and it's taken the columns country

244

00:13:17.200  -->  00:13:21.930
name and birthdate true subset a really great subset of our doorframe.

245

00:13:21.940  -->  00:13:24.620
So what's so cool about this and how does it work.

246

00:13:24.820  -->  00:13:29.200
Well what we can see here it might be confusing like why does this come first why does this come second

247

00:13:29.200  -->  00:13:29.410
.

248

00:13:29.410  -->  00:13:31.250
Reality doesn't matter which we're ordered.

249

00:13:31.250  -->  00:13:36.020
So let me just copy that and put it here and I'll take this and I'll put it there.

250

00:13:36.310  -->  00:13:38.310
And you might think How is this hour.

251

00:13:38.360  -->  00:13:40.680
It looks like magic but in reality it's not.

252

00:13:40.670  -->  00:13:45.470
So what we're doing here so I might just comment that out so this line is not in play.

253

00:13:45.700  -->  00:13:46.990
Let's put on a new line.

254

00:13:47.260  -->  00:13:51.440
So if I just that's four to eight you get this matrix right or this doorframe.

255

00:13:51.460  -->  00:13:55.020
It's taken only the fourth to the seventh row inclusive.

256

00:13:55.210  -->  00:14:03.080
And now this new object this object is also a door frame writes I could even put it into DMF one like

257

00:14:03.070  -->  00:14:03.610
that.

258

00:14:03.970  -->  00:14:11.830
If I do that and now I apply the D to the one I apply the column selection you'll see that I get that

259

00:14:11.840  -->  00:14:11.870
.

260

00:14:11.870  -->  00:14:16.430
So basically what we're doing is we're doing two subsets.

261

00:14:16.620  -->  00:14:18.070
Let me get rid of this quickly.

262

00:14:18.070  -->  00:14:23.290
We're doing subset number one by the rows and then on top of that number one we're applying subset number

263

00:14:23.290  -->  00:14:24.500
to by cards.

264

00:14:24.640  -->  00:14:26.170
Here we're doing the opposite thing.

265

00:14:26.420  -->  00:14:27.690
So let me look at that.

266

00:14:27.860  -->  00:14:32.360
So here we're getting the two columns that we need country named birthrate.

267

00:14:32.360  -->  00:14:35.510
So as you can see all the rows are being extracted.

268

00:14:35.600  -->  00:14:37.500
We've got the dot dot dot somewhere here.

269

00:14:37.630  -->  00:14:38.360
There it is.

270

00:14:38.560  -->  00:14:40.210
All of the rows are being extracted.

271

00:14:40.370  -->  00:14:44.430
So this is this could be due to a doorframe.

272

00:14:44.530  -->  00:14:47.650
And then on top of that doorframe we're going to apply another subset.

273

00:14:47.650  -->  00:14:50.980
We're going to slice out the rows that we want to see around that.

274

00:14:51.130  -->  00:14:56.190
You'll see that we get the same result because this is being applied to the new waterfront.

275

00:14:56.200  -->  00:14:58.650
So again I'm going to remove this and put it back here.

276

00:14:58.680  -->  00:14:59.480
We're on the line.

277

00:14:59.680  -->  00:15:02.800
So in both cases we're actually doing two subsets.

278

00:15:02.800  -->  00:15:04.890
It looks like one subset is happening.

279

00:15:05.020  -->  00:15:10.490
But in reality it's two and that's why python can so easily understand it just applies them step by

280

00:15:10.480  -->  00:15:11.490
step it looks at.

281

00:15:11.530  -->  00:15:12.000
OK.

282

00:15:12.000  -->  00:15:15.270
Once these columns great because the names are here I can tell those are columns.

283

00:15:15.280  -->  00:15:16.710
And here I can see numbers.

284

00:15:16.720  -->  00:15:20.790
So those that's probably slicing rows and that's what returns.

285

00:15:20.800  -->  00:15:21.690
So there we go.

286

00:15:21.700  -->  00:15:24.450
That is how we do subsets in Python.

287

00:15:24.560  -->  00:15:30.560
As we talked about slicing by rows and we learned that it is or subsetting by rows that is very similar

288

00:15:30.560  -->  00:15:35.710
it's the same thing as slicing we can use coal on operate or even a double call want to get fantastic

289

00:15:35.710  -->  00:15:36.860
very quick results.

290

00:15:37.120  -->  00:15:40.430
And then we learned about extracting arose.

291

00:15:40.420  -->  00:15:46.120
So subsetting by row by columns we learned that we can just use the names of the columns and we also

292

00:15:46.120  -->  00:15:50.610
talked about a quick approach the quick grab approach.

293

00:15:50.650  -->  00:15:51.540
There it is.

294

00:15:51.700  -->  00:15:57.000
You can use that approach if just for one column and if its name doesn't have any spaces.

295

00:15:57.010  -->  00:16:01.340
And finally we learn how to combine the two which is a very simple process it's actually effectively

296

00:16:01.390  -->  00:16:03.000
two subset one after the other.

297

00:16:03.250  -->  00:16:05.070
So hopefully that was fun.

298

00:16:05.090  -->  00:16:06.360
Hopefully you enjoy this.

299

00:16:06.370  -->  00:16:08.710
tutorial definitely play around with that.

300

00:16:08.710  -->  00:16:14.500
This is all simple stuff but at the same time it is worth practicing so set yourself some challenges

301

00:16:14.500  -->  00:16:20.540
tried to extract certain rows and certain columns and perform at least one two or three quick exercises

302

00:16:20.530  -->  00:16:21.070
on your own.

303

00:16:21.080  -->  00:16:23.180
Just to let this knowledge sink in.

304

00:16:23.360  -->  00:16:24.890
And we'll continue in the next tutorial.

305

00:16:24.910  -->  00:16:26.440
Until then be coding
