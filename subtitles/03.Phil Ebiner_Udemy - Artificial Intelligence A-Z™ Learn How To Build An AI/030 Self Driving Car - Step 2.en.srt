1
00:00:00,450 --> 00:00:05,700
Hello and welcome to the Statoil and the to talk we initialized the map.

2
00:00:05,850 --> 00:00:12,090
And now time for the exciting stuff we create the car and we do that with a class of course.

3
00:00:12,090 --> 00:00:18,660
You will see that the class is very practical to create some things that have a lot of properties because

4
00:00:18,660 --> 00:00:25,300
as you can see not only finding some variables from my car but also some functions which of course is

5
00:00:25,300 --> 00:00:30,270
the function that will make the car move to the left to the right or going straight.

6
00:00:30,720 --> 00:00:35,970
So we have a couple of variables that are important to describe the environment we have for example

7
00:00:35,970 --> 00:00:42,590
the angle which is the angle between the x axis and the axis of the direction of the car.

8
00:00:42,630 --> 00:00:50,040
Then we have the rotation which is its last rotation which remember is either 0 degree 20 degrees or

9
00:00:50,040 --> 00:00:51,550
minus 20 degrees.

10
00:00:51,570 --> 00:00:57,690
Then we have the velocity the x coordinate of the velocity vector and the y coordinates of the velocity

11
00:00:57,690 --> 00:00:58,320
vector.

12
00:00:58,470 --> 00:01:05,740
And then the vector of coordinates velocity x and velocity Y then we have the sensors and the signals.

13
00:01:05,830 --> 00:01:12,280
And that's very important the call that we're making will have three sensors sensor one sensor two and

14
00:01:12,310 --> 00:01:18,240
sensors three sensors one will be detecting if there is any sense in front of the car.

15
00:01:18,420 --> 00:01:25,070
Then sensor 2 is the sensor that will detect if there is any sense at the left of the car and sensors

16
00:01:25,080 --> 00:01:29,640
3 is the sensor that will detect if there is any sense at the right of the car.

17
00:01:29,950 --> 00:01:37,080
And then from these three sensors we get the signals that the signals received by each of the sensors.

18
00:01:37,290 --> 00:01:43,320
So signal one is the signal received by sensor one signal to is the signal received by sensor 2 and

19
00:01:43,330 --> 00:01:46,370
signal 3 is the single received by sensors 3.

20
00:01:46,380 --> 00:01:47,700
And so how does it work.

21
00:01:47,770 --> 00:01:54,310
Signal 1 is the density of send around sensor one signal to is the density of center around sensor to

22
00:01:54,820 --> 00:02:00,560
signal three is the density of sent around sensitivity and how do we compute this density of sand.

23
00:02:00,670 --> 00:02:01,690
Well that's very simple.

24
00:02:01,700 --> 00:02:06,110
We take some big squares around each of the sensors.

25
00:02:06,130 --> 00:02:12,490
These are actually squares of 200 by 200 and for each of the squares we divide the number of ones in

26
00:02:12,490 --> 00:02:17,840
the square by the total number of cells in the square that is 22 and 20 equals 400.

27
00:02:18,070 --> 00:02:22,530
And that gives us the density of sand because the ones correspond to the center.

28
00:02:22,630 --> 00:02:27,790
We do this for each sensor and that gives us the density of sand around each sensor.

29
00:02:27,790 --> 00:02:29,550
That is the signals.

30
00:02:29,650 --> 00:02:35,450
All right so now we have everything to detect the sensor and then we have the move function.

31
00:02:35,450 --> 00:02:40,660
And of course the move function is what will allow the core to go to the left going straight or going

32
00:02:40,660 --> 00:02:41,530
to the right.

33
00:02:41,920 --> 00:02:43,360
So let's go through it quickly.

34
00:02:43,360 --> 00:02:50,410
We have here the update of the position of the car with its last position which is self the pass here

35
00:02:50,740 --> 00:02:52,400
and the velocity vector.

36
00:02:52,540 --> 00:02:58,720
So thanks to the velocity vector the position will be updated in the direction of the velocity vector.

37
00:02:58,930 --> 00:03:05,320
Then we get the rotation which we will get further down in the code right here.

38
00:03:05,320 --> 00:03:08,040
Rotation equals action to rotation action.

39
00:03:08,040 --> 00:03:11,400
He will select the action and then get in the rotation.

40
00:03:11,410 --> 00:03:15,580
And so this self-protection equals rotation in here.

41
00:03:15,610 --> 00:03:21,130
It's this rotation that we get to know how we need to rotate the car that is going to the left or to

42
00:03:21,130 --> 00:03:22,360
the right.

43
00:03:22,420 --> 00:03:28,510
Then we update the angle which I remind is the angle between the x axis and the axis of the direction

44
00:03:28,510 --> 00:03:29,560
of the car.

45
00:03:29,620 --> 00:03:35,350
And then once the car has moved then we have to update the sensors and the signal because of course

46
00:03:35,350 --> 00:03:41,380
when the car has just rotated while the sensors have rotated as well and therefore we need to rotate

47
00:03:41,380 --> 00:03:45,500
them by using the rotate function and to which we add the new position.

48
00:03:45,790 --> 00:03:48,950
And why do we have this vector of 30 0.

49
00:03:49,090 --> 00:03:54,070
Well that's simply because 30 is the distance between the car and the sensor.

50
00:03:54,130 --> 00:03:59,080
You know is the distance between the car and what the car detects.

51
00:03:59,230 --> 00:04:04,210
And then once the sensors are updated Well then it's time to update the signals.

52
00:04:04,270 --> 00:04:07,110
And so here we do exactly what I explained to you computer signals.

53
00:04:07,240 --> 00:04:13,780
We give the x coordinates of our sensor then we take all the cells from Manston to plus 10 then we do

54
00:04:13,780 --> 00:04:19,070
the same for the y coordinate taking all the cells from Madison to plus 10.

55
00:04:19,090 --> 00:04:27,040
So therefore we get the square of 20 by 20 pixels surrounding the sensor and inside the square we some

56
00:04:27,130 --> 00:04:28,280
older ones.

57
00:04:28,300 --> 00:04:35,170
So basically with some of the cells because the cells contain 0 or 1 and since in a 20 by 20 square

58
00:04:35,170 --> 00:04:38,060
there is 20 times 20 equals 400 cells.

59
00:04:38,200 --> 00:04:45,520
Well we divide it by 400 to get the density of ones inside the square and that's how we get the signal

60
00:04:45,730 --> 00:04:52,090
of the density of centers around the sensor and we do the same for the second sensor and the third sensor

61
00:04:52,360 --> 00:04:54,870
to get the second signal and the third signal.

62
00:04:55,060 --> 00:04:55,340
OK.

63
00:04:55,360 --> 00:05:00,220
So that's to take the sensor and then these three lines of code here are very important.

64
00:05:00,220 --> 00:05:05,710
It's another that we want that we want to get to our car when it's reaching one of the edges of the

65
00:05:05,710 --> 00:05:06,290
map.

66
00:05:06,290 --> 00:05:11,830
You know we don't want the car to rush into some walls and therefore we want to penalize it to punish

67
00:05:11,830 --> 00:05:16,380
it when it's getting too close to Wall and therefore that's what we do here.

68
00:05:16,630 --> 00:05:24,970
If the first sensor is larger than longer minus 10 that is larger than here because longer is this distance

69
00:05:24,970 --> 00:05:27,580
here so longer minus 10 is right here.

70
00:05:27,580 --> 00:05:33,550
So if sensor one acts larger than longer Manison concerns all the points are here.

71
00:05:33,550 --> 00:05:40,930
That is if the car is getting closer to the right edge of the map or if cell sensor one acts lower than

72
00:05:40,950 --> 00:05:48,250
10 that's right here if the car is getting closer to the left edge of the map or if sensor Y is larger

73
00:05:48,250 --> 00:05:55,870
than larger minus 10 that's the upper edge of the map and or if self-censored Y is lower than 10 that

74
00:05:55,870 --> 00:05:58,670
is the lower edge of the map.

75
00:05:58,720 --> 00:06:06,370
And so if the sensor one is reaching any of these four edges Well we will put the signal of the sensor

76
00:06:06,490 --> 00:06:08,760
signal when the signal sent one.

77
00:06:08,800 --> 00:06:10,290
We will set it to be one.

78
00:06:10,540 --> 00:06:11,610
And what does that mean.

79
00:06:11,650 --> 00:06:15,390
That means full sound like the full density of sand.

80
00:06:15,580 --> 00:06:17,270
It's like the worst and you could get.

81
00:06:17,330 --> 00:06:19,540
There's so much sense that it's going to stop your car.

82
00:06:19,660 --> 00:06:24,480
So signal will be one and therefore the car will get a terribly bad reward.

83
00:06:24,490 --> 00:06:24,830
All right.

84
00:06:24,820 --> 00:06:30,190
And then we do the same for signal too and signals three from sensor two instances three.

85
00:06:30,410 --> 00:06:30,790
All right.

86
00:06:30,800 --> 00:06:36,470
And then we create the game class so that's basically the class to create the game because so far we

87
00:06:36,470 --> 00:06:40,720
have only created the car and now of course we have to create the map.

88
00:06:40,820 --> 00:06:42,310
We have to create the game itself.

89
00:06:42,410 --> 00:06:47,750
So we will not be playing the game it's our AI that will be playing the game and the game is actually

90
00:06:47,750 --> 00:06:52,240
to avoid the obstacles and to go from the airport to downtown and vice versa.

91
00:06:52,520 --> 00:06:59,610
So in this game class we need to create some objects like the car then we need to define the update

92
00:06:59,630 --> 00:07:00,540
function.

93
00:07:00,590 --> 00:07:05,330
That is the most important and actually we will focus on that right now because that's in this update

94
00:07:05,330 --> 00:07:12,250
function that will select the action that the car has to do and each time to accomplish its goal.

95
00:07:12,350 --> 00:07:16,880
And this action is exactly the output of our neural network.

96
00:07:16,880 --> 00:07:20,860
The new will that work that will be at the heart of our artificial intelligence.

97
00:07:20,930 --> 00:07:27,550
And so this action is returned by the brain of the car which remains the object of our human class that

98
00:07:27,560 --> 00:07:29,780
will be making in our AI file.

99
00:07:29,930 --> 00:07:36,500
And this object has a method that is called update and it takes as input the last word and the last

100
00:07:36,500 --> 00:07:37,590
signal.

101
00:07:37,610 --> 00:07:43,250
So the last word is of course the last word attained by the car and the last signal is of course the

102
00:07:43,250 --> 00:07:50,480
last signal of the three sensors signal one from sensor one signal two from sensor to signal three from

103
00:07:50,480 --> 00:07:51,240
sensor 3.

104
00:07:51,440 --> 00:07:56,870
But then I'm adding two other inputs which is the orientation of the car with respect to the goal.

105
00:07:56,900 --> 00:08:01,540
So for example if the car is heading towards the goal then the orientation will be equal to zero.

106
00:08:01,730 --> 00:08:06,730
If it goes slightly to the right then the orientation will be close to 45 degrees.

107
00:08:06,920 --> 00:08:11,820
And if it goes slightly to the left the orientation will be close to minus 45 degrees.

108
00:08:11,900 --> 00:08:15,380
So that's the force input of our input states.

109
00:08:15,410 --> 00:08:18,950
And then there is a lesson put which is minus orientation.

110
00:08:19,010 --> 00:08:25,250
So usually the inputs of neural network are independent There is no multicollinearity but it doesn't

111
00:08:25,250 --> 00:08:29,360
really matter if we are this is because the neural network will just fix that with the weights.

112
00:08:29,480 --> 00:08:35,450
But still I notice that by adding this minus orientation well that allows the car the training of the

113
00:08:35,450 --> 00:08:37,840
car to stabilize the acceleration.

114
00:08:37,940 --> 00:08:43,460
You know we're doing this is that the AI doesn't always explore in the same direction by adding this

115
00:08:43,460 --> 00:08:44,390
minus orientation.

116
00:08:44,390 --> 00:08:48,680
We make sure that it explores in both directions right or left.

117
00:08:48,920 --> 00:08:55,780
And so this the three signals Plus the orientation and minus orientation are the five inputs of our

118
00:08:55,810 --> 00:09:03,020
encoded vector which will go into the network that our input vector that will go into the network and

119
00:09:03,050 --> 00:09:09,560
after it goes into the network Well the network returns the outputs which is the action to play.

120
00:09:09,650 --> 00:09:15,290
And each time and the output is returned by this update function that contains the network itself and

121
00:09:15,290 --> 00:09:20,450
the output of the network and therefore that's why we have to input the last signal that is the input

122
00:09:20,450 --> 00:09:26,110
state and also the last word because the action to play also depends on the last word.

123
00:09:26,950 --> 00:09:33,700
All right and then we update the main score of the words we update the rotation we use the move function

124
00:09:33,700 --> 00:09:37,500
to rotate the car according to the action that was selected.

125
00:09:37,510 --> 00:09:44,230
We take the distance of the car to the road and we will get the positions of the sensors ball one ball

126
00:09:44,230 --> 00:09:48,490
two in both Rieker response to the balls that will represent the sensors on the map.

127
00:09:48,530 --> 00:09:49,880
You'll see that very quickly.

128
00:09:50,550 --> 00:09:56,230
And then here that part is very important because that's where we penalize the car if it goes into some

129
00:09:56,230 --> 00:10:04,060
sense because as you can see this means if the car is onto some sense well it will be slowed down.

130
00:10:04,150 --> 00:10:06,550
So that's where we reduce its velocity.

131
00:10:06,590 --> 00:10:10,020
You know its velocity is usually 6 as you can see here.

132
00:10:10,150 --> 00:10:14,410
And if it goes on to some sense it will be one which will be slowed down to 1.

133
00:10:14,430 --> 00:10:17,810
You'll see how the car will be slowed down once it goes into some sense.

134
00:10:18,030 --> 00:10:19,090
So it is slow down.

135
00:10:19,210 --> 00:10:23,610
And besides it gets a bad reward it gets a minus one we want.

136
00:10:23,920 --> 00:10:26,140
And that's actually the worst reward you could get.

137
00:10:26,140 --> 00:10:32,100
The best reward is one the worst we word is minus one and the reward is between minus 1 and plus 1.

138
00:10:32,530 --> 00:10:33,450
And then otherwise.

139
00:10:33,570 --> 00:10:35,770
And the car isn't onto some sand.

140
00:10:35,980 --> 00:10:41,000
Well it keeps its usual speed speed of sex and then we add something else.

141
00:10:41,080 --> 00:10:45,710
If it's getting closer to the goal then it will get a slightly positive reward.

142
00:10:45,910 --> 00:10:53,410
And if it's getting further away from the goal Well it gets a slightly negative reward minus 0.2.

143
00:10:53,590 --> 00:10:54,830
And then last.

144
00:10:54,830 --> 00:10:57,280
Conditions that are related to the reward.

145
00:10:57,470 --> 00:11:02,840
Well that's if the car is getting too close to one of the edges as we spoke of earlier.

146
00:11:02,910 --> 00:11:04,990
Remember when we talked about fuel sensor.

147
00:11:05,220 --> 00:11:11,840
Well if the car is getting too close to the left edge of the map it gets minus one word if it gets too

148
00:11:11,840 --> 00:11:15,440
close to the right edge of the map it gets rewarded minus one.

149
00:11:15,710 --> 00:11:20,220
And if it gets too close to the bottom edge of the map it gets you or minus one.

150
00:11:20,360 --> 00:11:25,230
And if it gets too close to the upper left of the map it gets rewards minus one.

151
00:11:25,230 --> 00:11:27,620
So that's a terrible punishment.

152
00:11:27,620 --> 00:11:31,910
And so you will see how it's full and fast not to rush in to something else.

153
00:11:31,940 --> 00:11:36,600
All right and then this is to update the go when the goal is reached.

154
00:11:36,620 --> 00:11:41,390
So you know when the car reaches the airport which is the first go there is the upper left corner of

155
00:11:41,390 --> 00:11:41,920
the map.

156
00:11:41,930 --> 00:11:45,990
While the goal changes to the bottom right corner of the map which is downtown.

157
00:11:46,250 --> 00:11:51,080
And that's exactly what we do here we update the x coordinate of the Crow and the white coordinates

158
00:11:51,140 --> 00:11:55,870
of the call and then we update the distance from the car to the car.

159
00:11:55,880 --> 00:11:56,260
All right.

160
00:11:56,270 --> 00:11:58,320
And then that's less important.

161
00:11:58,340 --> 00:12:04,130
That's just a class that will add the painting tools you know for us to be able to paint some roads

162
00:12:04,130 --> 00:12:10,790
or some obstacles on the map that's more related to K.V. can have a look if you want I'll provide the

163
00:12:10,790 --> 00:12:16,370
condensed version of this code and I'll provide some reference if you want to go deeper on how to do

164
00:12:16,370 --> 00:12:17,570
that with skivvy.

165
00:12:17,570 --> 00:12:22,730
But we're getting further from artificial intelligence so I'm not going to go into the details of it.

166
00:12:22,910 --> 00:12:30,110
And that's the same for the last code section with the car class that is just as the API buttons clear

167
00:12:30,110 --> 00:12:31,320
save and load.

168
00:12:31,520 --> 00:12:32,810
So that's what we do here.

169
00:12:32,820 --> 00:12:34,900
Clear canvas safe.

170
00:12:34,940 --> 00:12:40,220
And that's actually very important that's for us to be able to save the day I know to save the brain

171
00:12:40,700 --> 00:12:46,520
so that you can reuse it later by taking the load function which is another tool we add on the map to

172
00:12:46,520 --> 00:12:52,010
load the brain of the car that is to load the memory of the car how to navigate in the map.

173
00:12:52,250 --> 00:12:57,830
And then finally we have the last of the last code section which runs the whole thing that is which

174
00:12:57,830 --> 00:13:00,660
runs the map and the AI itself.

175
00:13:00,980 --> 00:13:03,340
And actually that's what we're going to do right now.

176
00:13:03,590 --> 00:13:07,020
Let's have a look at everything we made in this code.

177
00:13:07,040 --> 00:13:10,520
So right now the AI is not implemented.

178
00:13:10,520 --> 00:13:13,910
So the code will have a very random movement.

179
00:13:13,940 --> 00:13:17,810
It will actually look like an insect but don't worry we will fix that.

180
00:13:17,810 --> 00:13:24,860
Normally we will train it to move like a real car and train it to navigate following some roads and

181
00:13:24,920 --> 00:13:26,380
avoiding some obstacles.

182
00:13:26,660 --> 00:13:27,710
Let's do this.

183
00:13:27,710 --> 00:13:32,240
I'm going to select everything and execute.

184
00:13:32,510 --> 00:13:33,900
And here is the map.

185
00:13:33,950 --> 00:13:35,270
And here is the car.

186
00:13:35,690 --> 00:13:36,070
All right.

187
00:13:36,080 --> 00:13:41,600
So that's the little thing here that you see that looks like an insect in our car.

188
00:13:41,630 --> 00:13:45,960
So as I told you the actions are totally random.

189
00:13:46,220 --> 00:13:53,890
So each time the car selects randomly an action whether to go straight to the left or to the right.

190
00:13:53,930 --> 00:13:59,260
So that's why it is making some nonsense movements and that's why it's looking like an insect.

191
00:13:59,450 --> 00:14:01,460
So we will fix that of course.

192
00:14:01,730 --> 00:14:09,500
And of course since the AI is activated Well it is not going to the goal which is the airport here or

193
00:14:09,500 --> 00:14:12,930
to downtown at the bottom right of the map.

194
00:14:13,760 --> 00:14:21,850
And we will fix all this by making the AIs who will implement the AI into this car or this insect so

195
00:14:21,860 --> 00:14:26,480
you can see the three balls here the yellow one the red one and the white one.

196
00:14:26,630 --> 00:14:28,190
That's our three sensors.

197
00:14:28,220 --> 00:14:30,020
So that's what we'll detect.

198
00:14:30,020 --> 00:14:32,580
There is some scent around it.

199
00:14:32,810 --> 00:14:35,720
And speaking of scent Well let's throw some.

200
00:14:35,720 --> 00:14:45,510
So to do so I just need to do a click left here and you know in some sense by still teaching left.

201
00:14:45,510 --> 00:14:50,240
So right now I'm adding some sand we can add some more.

202
00:14:50,250 --> 00:14:57,360
So each time in insane as you can see that putting ones in the center array that's to send array that's

203
00:14:57,360 --> 00:15:00,100
to 00 coordinates of the origin.

204
00:15:00,180 --> 00:15:01,990
And here there are a lot of ones.

205
00:15:02,080 --> 00:15:04,720
And as you can see well that's good to see the car.

206
00:15:04,770 --> 00:15:07,240
We just went on to descent and was slow down.

207
00:15:07,620 --> 00:15:12,230
So as you can see right right now it is really slow down because it's going into the sand.

208
00:15:12,510 --> 00:15:14,820
And right now it's trying to escape.

209
00:15:16,310 --> 00:15:23,030
And so you know what we'll do is we will draw some roads and we will draw some roads from the airport

210
00:15:23,030 --> 00:15:28,490
to downtown and we will train the car to stay on the road and to avoid the obstacles.

211
00:15:28,490 --> 00:15:28,830
All right.

212
00:15:28,850 --> 00:15:35,690
And as you can see there is the clear button to clear the sand there is the save button to save the

213
00:15:35,690 --> 00:15:37,230
brain of the car.

214
00:15:37,310 --> 00:15:43,640
And actually there is this core curve that we spoke of that safety that saves your model actually the

215
00:15:43,640 --> 00:15:50,270
brain of your car and then you can you know when you leave your cold or turn off your computer and you

216
00:15:50,270 --> 00:15:51,680
want to go back to it again.

217
00:15:51,920 --> 00:15:59,290
You can use the load button to load your mode that is to load the brain and that will get the trains

218
00:15:59,360 --> 00:16:01,760
AI of your car.

219
00:16:01,820 --> 00:16:06,030
All right so now I can't wait to start making the AI.

220
00:16:06,080 --> 00:16:07,450
This will be a lot of fun.

221
00:16:07,490 --> 00:16:13,910
We'll make our neural network and we will punish the car as soon as it doesn't do what we want.

222
00:16:14,120 --> 00:16:16,290
So let's do that from the next tutorial.

223
00:16:16,400 --> 00:16:18,140
And until then enjoy a.
