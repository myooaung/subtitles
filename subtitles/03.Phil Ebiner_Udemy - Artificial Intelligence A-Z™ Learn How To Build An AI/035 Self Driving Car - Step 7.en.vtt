WEBVTT
1
00:00:00.420 --> 00:00:02.740
Hello and welcome to this fight and to torero.

2
00:00:03.030 --> 00:00:07.490
All right now we're going to make the push function which will do two tasks.

3
00:00:07.620 --> 00:00:14.790
First it will depend a new transition or a new event in the memory and then second it will make sure

4
00:00:14.790 --> 00:00:18.150
that the memory has always 100 transitions.

5
00:00:18.150 --> 00:00:23.670
I'm seeing 100 because we gave the example of 100 events in the previous tutorial but in fact this will

6
00:00:23.670 --> 00:00:25.050
be much more than 100.

7
00:00:25.050 --> 00:00:29.330
This will be rather maybe ten thousand one hundred thousand we'll see.

8
00:00:29.490 --> 00:00:32.430
But anyway this value will be the capacity.

9
00:00:32.850 --> 00:00:33.120
All right.

10
00:00:33.120 --> 00:00:35.630
So let's make this push function.

11
00:00:35.670 --> 00:00:41.480
So as usual we start with death to define a new function and then we give a name to this function so

12
00:00:41.500 --> 00:00:46.500
we call it push and this function will have two arguments.

13
00:00:46.500 --> 00:00:51.140
First as usual self that refers to the object and the next one.

14
00:00:51.180 --> 00:00:52.710
Why do you think that will be.

15
00:00:52.930 --> 00:00:58.860
Well remember this push function will be used to append a new event into memory.

16
00:00:58.920 --> 00:01:00.510
We already have the memory.

17
00:01:00.510 --> 00:01:08.010
So what we need now is a variable is an event that will be our arguments or input and we will bend this

18
00:01:08.010 --> 00:01:13.180
input into memory which is a variable of the object.

19
00:01:13.190 --> 00:01:13.490
All right.

20
00:01:13.490 --> 00:01:17.900
So event you can actually call it event or transition.

21
00:01:17.900 --> 00:01:20.820
That's the same and you will see in the next code sections.

22
00:01:20.870 --> 00:01:22.680
What exactly is this event.

23
00:01:22.700 --> 00:01:24.050
What form it has.

24
00:01:24.200 --> 00:01:29.810
Actually I can tell you now this event this transition that we're adding to the memory is a total of

25
00:01:29.810 --> 00:01:31.190
four elements.

26
00:01:31.190 --> 00:01:34.050
The first one is the last state that is esty.

27
00:01:34.160 --> 00:01:37.410
The second one is the new state that is Estep us one.

28
00:01:37.490 --> 00:01:41.000
The third one is the last section that is 80.

29
00:01:41.180 --> 00:01:46.840
The action that was displayed and the fourth one is the last word the last word obtained.

30
00:01:46.940 --> 00:01:47.960
That is our.

31
00:01:48.200 --> 00:01:51.370
So that's exactly the form that this event will have.

32
00:01:51.800 --> 00:01:52.490
All right.

33
00:01:52.700 --> 00:01:57.830
And that's all we just need the event because we just want to pin the event to the memory and then making

34
00:01:57.830 --> 00:02:01.270
sure that the memory has capacity elements.

35
00:02:01.280 --> 00:02:03.840
All right so now let's go inside the function.

36
00:02:03.860 --> 00:02:07.520
So the first thing we'll do is attend to you then to the memory.

37
00:02:07.640 --> 00:02:10.850
And that's very simple because we're going to use the append function.

38
00:02:10.850 --> 00:02:12.220
So that will be direct.

39
00:02:12.350 --> 00:02:18.200
And when we use the append function we must start with the list to which we want to spend something

40
00:02:18.710 --> 00:02:20.830
and this list is of course memory.

41
00:02:21.050 --> 00:02:27.350
So we start with memory and since memory is a variable of the object we start here with self taught

42
00:02:27.650 --> 00:02:35.060
memory that we go to set up memory and then we have to do that and then the open function which is the

43
00:02:35.060 --> 00:02:35.690
first one.

44
00:02:35.960 --> 00:02:43.310
So it bent and inside the open function we input what we want to spend to memory which is of course

45
00:02:43.640 --> 00:02:44.750
our evidence.

46
00:02:44.780 --> 00:02:45.730
So even here.

47
00:02:46.310 --> 00:02:53.300
And that will append the new event composed of the last eight new state last action and last word to

48
00:02:53.300 --> 00:02:54.580
the memory.

49
00:02:54.590 --> 00:02:55.250
All right.

50
00:02:55.250 --> 00:02:56.710
So that's the first thing done.

51
00:02:56.870 --> 00:03:03.940
And then the second thing we need to do is make sure that the memory always contains capacity elements.

52
00:03:03.980 --> 00:03:07.360
So let's say capacity is now 100000.

53
00:03:07.520 --> 00:03:11.990
That's probably the capacity you will choose because then one million elements might make the train

54
00:03:11.990 --> 00:03:12.640
slow.

55
00:03:12.710 --> 00:03:15.140
So let's say 100000.

56
00:03:15.140 --> 00:03:22.150
Now we're going to make sure that our memory always contains 100000 transitions 100000 events and never

57
00:03:22.160 --> 00:03:22.630
more.

58
00:03:22.850 --> 00:03:29.180
So of course at the beginning it will have one then two and three but then once it reaches 100000 events

59
00:03:29.540 --> 00:03:32.400
Well it will always have 100000 events.

60
00:03:32.420 --> 00:03:38.480
So to make sure of it we simply need to make an IF condition with this upper bound that we don't want

61
00:03:38.480 --> 00:03:39.560
to go over.

62
00:03:39.590 --> 00:03:47.810
So if we get the idea that we'll use here is that if we go over the limit Well we will delete the first

63
00:03:48.020 --> 00:03:54.530
transition the first event of the memory and therefore we're going to take the lead function to take

64
00:03:54.650 --> 00:03:58.480
the length of the memory that is the number of elements in the memory.

65
00:03:58.490 --> 00:04:04.390
So here in the len function we can put self memory to memory.

66
00:04:04.400 --> 00:04:12.920
So if the number of elements of that memory is larger than the capacity well in that case we will remove

67
00:04:13.070 --> 00:04:20.700
the first element to make sure that the memory always has the same number of capacity elements and to

68
00:04:20.800 --> 00:04:25.450
do the first element there is nothing more simple we are going to use another function which is the

69
00:04:25.460 --> 00:04:33.560
tell byte centric so well and therefore we want to remove the first transition which is the oldest transition

70
00:04:33.560 --> 00:04:38.490
in the memory because the last transitions are the ones that we are tense and therefore that's the new

71
00:04:38.570 --> 00:04:39.380
transitions.

72
00:04:39.560 --> 00:04:41.970
So the first transitions are the oldest one.

73
00:04:42.380 --> 00:04:51.350
And so here we want to delete self taught memory and records and we take the first element of the memory

74
00:04:51.710 --> 00:04:59.000
which has an zero itself that memory zero Now interesting I have a little warning which says that there

75
00:04:59.000 --> 00:05:00.740
is an undefined capacity.

76
00:05:01.010 --> 00:05:06.710
That's because the capacity here is not the input that must be the capacity variable attached to the

77
00:05:06.710 --> 00:05:11.590
object and therefore you will need to add a self self that capacity.

78
00:05:11.660 --> 00:05:13.220
And now the warning has come.

79
00:05:13.310 --> 00:05:19.940
Now you understand even more the use of self that's really to refer to the object to take the capacity

80
00:05:20.330 --> 00:05:26.180
of the object that will be created that is an instance of the replay memory class.

81
00:05:26.190 --> 00:05:26.550
All right.

82
00:05:26.550 --> 00:05:29.250
So we're done with this push function.

83
00:05:29.250 --> 00:05:34.620
And so now we can move on to the next function which is the simple function which will take some random

84
00:05:34.620 --> 00:05:40.440
samples from this memory at the last capacity elements and doing this will improve a lot.

85
00:05:40.470 --> 00:05:42.510
The deep cleaning process.

86
00:05:42.510 --> 00:05:42.790
All right.

87
00:05:42.790 --> 00:05:44.540
So let's do this in the next tutorial.

88
00:05:44.580 --> 00:05:46.200
And until then I.
