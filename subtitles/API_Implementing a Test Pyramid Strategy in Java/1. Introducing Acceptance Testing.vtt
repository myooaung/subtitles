WEBVTT
1
00:00:00.000 --> 00:00:00.220
Hello.

2
00:00:00.220 --> 00:00:05.643
Welcome to this module about the acceptance testing.

3
00:00:05.643 --> 00:00:07.906
We are in front of a truly important step,

4
00:00:07.906 --> 00:00:11.988
the one when we bring our software to face the needs of the end user.

5
00:00:11.988 --> 00:00:15.677
We have to see if we satisfied the expectations of the customers

6
00:00:15.677 --> 00:00:18.894
and eventually to make the needed adjustments.

7
00:00:18.894 --> 00:00:21.046
This is our objective for this module.

8
00:00:21.046 --> 00:00:24.497
Let's dive into it.

9
00:00:24.497 --> 00:00:27.671
This module will focus on showing what acceptance testing means,

10
00:00:27.671 --> 00:00:30.972
how to make the step towards satisfying the needs of

11
00:00:30.972 --> 00:00:34.031
the business and of the end user.

12
00:00:34.031 --> 00:00:37.806
First, we'll define and motivate the acceptance testing.

13
00:00:37.806 --> 00:00:41.663
We'll explain what gives business value to the software and what

14
00:00:41.663 --> 00:00:44.746
adds this business value to the application.

15
00:00:44.746 --> 00:00:48.245
We'll emphasize the importance of communication within a project and

16
00:00:48.245 --> 00:00:52.130
how this happens when introducing a new feature.

17
00:00:52.130 --> 00:00:56.238
Then we'll make the step from requirements analysis to accept this criteria.

18
00:00:56.238 --> 00:00:58.724
We'll move back to our flights management application and

19
00:00:58.724 --> 00:01:02.046
we'll look at the position of the customer.

20
00:01:02.046 --> 00:01:06.403
We'll introduce Cucumber as tool for the implementation of acceptance tests.

21
00:01:06.403 --> 00:01:10.503
We'll define features and we'll define acceptance criteria for them.

22
00:01:10.503 --> 00:01:17.001
Finally, we'll follow the same steps in order to add new functionality.

23
00:01:17.001 --> 00:01:19.645
So what is acceptance testing?

24
00:01:19.645 --> 00:01:22.781
Acceptance testing is a level of software testing where a

25
00:01:22.781 --> 00:01:24.967
system is tested for acceptability.

26
00:01:24.967 --> 00:01:27.930
The purpose of this test is to evaluate the system's

27
00:01:27.930 --> 00:01:31.072
compliance with the business requirements and assess

28
00:01:31.072 --> 00:01:34.309
whether it is acceptable for delivery.

29
00:01:34.309 --> 00:01:36.050
Once system testing is complete,

30
00:01:36.050 --> 00:01:39.414
acceptance testing is performed so as to confirm that the software

31
00:01:39.414 --> 00:01:45.676
is ready to be made available to the end users.

32
00:01:45.676 --> 00:01:51.101
A natural question that arises is what gives business value to the software?

33
00:01:51.101 --> 00:01:56.390
Uncertainty about requirements is a major challenge in many software projects.

34
00:01:56.390 --> 00:02:00.627
What provides business value to the software are the working features.

35
00:02:00.627 --> 00:02:04.749
A feature is a tangible deliverable piece of functionality that

36
00:02:04.749 --> 00:02:10.937
helps the business to achieve its business goals.

37
00:02:10.937 --> 00:02:13.925
Our demo is using the flights management company.

38
00:02:13.925 --> 00:02:18.368
One of the business goals may be satisfy customers by providing a simple

39
00:02:18.368 --> 00:02:22.672
and convenient way for them to manage their flights.

40
00:02:22.672 --> 00:02:27.718
Some features that might help achieve this goal could be choose a flight,

41
00:02:27.718 --> 00:02:34.256
change a flight, or choose a seat into the plane.

42
00:02:34.256 --> 00:02:37.563
The communication between the person that are involved into the same

43
00:02:37.563 --> 00:02:40.846
project may bring to problems and misunderstandings.

44
00:02:40.846 --> 00:02:43.426
Usually, the flow works this way.

45
00:02:43.426 --> 00:02:47.554
The customer tells a business analyst how some new feature must work.

46
00:02:47.554 --> 00:02:51.540
The business analyst translates the customer's request into a set of

47
00:02:51.540 --> 00:02:56.879
requirements for the developers describing what the software should do.

48
00:02:56.879 --> 00:02:59.868
The developer translates the requirements into code and

49
00:02:59.868 --> 00:03:03.022
tests in order to implement the new feature.

50
00:03:03.022 --> 00:03:07.935
The tester translates the requirements into test cases and uses them to

51
00:03:07.935 --> 00:03:11.437
verify that the new feature meets the requirements.

52
00:03:11.437 --> 00:03:14.320
There are many opportunities for information to be lost,

53
00:03:14.320 --> 00:03:16.107
be misunderstood, or be ignored.

54
00:03:16.107 --> 00:03:19.546
Chances are that the new model itself may not do

55
00:03:19.546 --> 00:03:24.451
exactly what has been initially required.

56
00:03:24.451 --> 00:03:26.576
In order to address the business goals,

57
00:03:26.576 --> 00:03:30.269
the business analyst works with the customer to decide what

58
00:03:30.269 --> 00:03:34.736
software features will be able to achieve these goals.

59
00:03:34.736 --> 00:03:37.699
These features are high-level requirements, eg.

60
00:03:37.699 --> 00:03:43.428
provide the way for a customer to choose the optimal root to a destination.

61
00:03:43.428 --> 00:03:46.623
These features need to be broken into stories.

62
00:03:46.623 --> 00:03:48.559
The stories might look like this.

63
00:03:48.559 --> 00:03:52.234
Find the root between stories and destination with the

64
00:03:52.234 --> 00:03:55.501
smallest number of flights changes or find the quickest

65
00:03:55.501 --> 00:03:58.519
root within source and destination.

66
00:03:58.519 --> 00:04:01.541
Stories need to be described in terms of concrete examples,

67
00:04:01.541 --> 00:04:08.674
these ones becoming the acceptance criteria for the story.

68
00:04:08.674 --> 00:04:13.495
Acceptance criteria may be expressed in a way that can be automated later.

69
00:04:13.495 --> 00:04:16.768
The key words are given, when, then.

70
00:04:16.768 --> 00:04:19.513
As an example, we may present the following.

71
00:04:19.513 --> 00:04:22.583
Given the flights operated by company X,

72
00:04:22.583 --> 00:04:28.892
when I want to find the quickest route from Bucharest to New York on May 15,

73
00:04:28.892 --> 00:04:29.500
2010,

74
00:04:29.500 --> 00:04:38.000
then I will be provided the route Bucharest - Frankfurt- New York having a given duration.

