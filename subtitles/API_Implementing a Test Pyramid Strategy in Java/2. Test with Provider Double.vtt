WEBVTT
1
00:00:01.691 --> 00:00:04.730
It is time for our first demonstration in this module.

2
00:00:04.730 --> 00:00:07.566
The first development step is allowing the consumer

3
00:00:07.566 --> 00:00:09.452
to test using a provider double.

4
00:00:09.452 --> 00:00:13.822
The new feature that we try to develop concerns bonus points that

5
00:00:13.822 --> 00:00:17.213
passengers may receive according to the distances that they cover

6
00:00:17.213 --> 00:00:18.882
using the flights of the company.

7
00:00:18.882 --> 00:00:23.094
There will be an external service to take care of the distances management.

8
00:00:23.094 --> 00:00:30.049
While this one is under development, we'll have to mock its behavior.

9
00:00:30.049 --> 00:00:32.861
So we have left our flights management application at

10
00:00:32.861 --> 00:00:35.485
the level of the integration testing.

11
00:00:35.485 --> 00:00:38.471
We have shown how the two classes, Flight and Passenger,

12
00:00:38.471 --> 00:00:41.622
have been integrated together by exposing the effects in

13
00:00:41.622 --> 00:00:45.138
the interfaces and in their interaction.

14
00:00:45.138 --> 00:00:48.856
We have introduced Arquillian as testing framework allowing to deploy the Java

15
00:00:48.856 --> 00:00:52.125
program to a Java Enterprise edition application server.

16
00:00:52.125 --> 00:00:56.407
Our Arquillian integration test is mainly shaped by the RunWith

17
00:00:56.407 --> 00:00:59.783
Arquillian.class annotated class by the public static method annotated

18
00:00:59.783 --> 00:01:02.220
with deployment that returns our ShrinkWrap archive,

19
00:01:02.220 --> 00:01:05.936
and by the several methods annotated with test.

20
00:01:05.936 --> 00:01:14.798
We checked that the whole suite is running and that the code coverage is 100%.

21
00:01:14.798 --> 00:01:17.456
We now presume that a new feature to be introduced will require

22
00:01:17.456 --> 00:01:20.884
awarding some bonus points to the passengers depending on the

23
00:01:20.884 --> 00:01:23.949
distances they have traveled with the company.

24
00:01:23.949 --> 00:01:25.565
The bonus policy is simple.

25
00:01:25.565 --> 00:01:31.854
A passenger will get one bonus point for each 10 KM that he or she has traveled.

26
00:01:31.854 --> 00:01:35.708
So we'll need to keep here the distance traveled by a flight

27
00:01:35.708 --> 00:01:40.226
and we'll generate the getter and the setter.

28
00:01:40.226 --> 00:01:43.446
The management of the bonus policy is externalized with some other

29
00:01:43.446 --> 00:01:47.744
team that will provide this DistancesManager class.

30
00:01:47.744 --> 00:01:50.324
What we know about it so far is the interface,

31
00:01:50.324 --> 00:01:55.432
which in fact forms the contract between the consumer and the provider.

32
00:01:55.432 --> 00:01:58.976
Remember we are following a consumer-driven contract.

33
00:01:58.976 --> 00:02:01.931
The DistancesManager class provides the following methods,

34
00:02:01.931 --> 00:02:05.545
getPassengersDistancesMap, getPassengersPointsMap,

35
00:02:05.545 --> 00:02:08.712
addDistance, and calculateGivenPoints.

36
00:02:08.712 --> 00:02:11.855
We do not know their implementation so far so we

37
00:02:11.855 --> 00:02:14.240
have to provide some dummy ones.

38
00:02:14.240 --> 00:02:16.894
We have to use this class into our further work and

39
00:02:16.894 --> 00:02:19.394
we are going to mock its behavior.

40
00:02:19.394 --> 00:02:22.762
We charge the passengers for which we are going to award bonus points.

41
00:02:22.762 --> 00:02:28.358
We have provided one flight description within this csv, but this is not enough.

42
00:02:28.358 --> 00:02:31.809
We need passengers that have participated to more than one flight

43
00:02:31.809 --> 00:02:35.099
to make sure that our calculation is consistent.

44
00:02:35.099 --> 00:02:39.976
So we do have here flights number two and three which have

45
00:02:39.976 --> 00:02:42.209
passengers in common with the first flight.

46
00:02:42.209 --> 00:02:47.182
To know that we have the same passenger on different flights,

47
00:02:47.182 --> 00:02:51.665
we have to override the equals and hashCode methods.

48
00:02:51.665 --> 00:02:54.641
We'll choose only the identifier as a field to be

49
00:02:54.641 --> 00:02:58.450
included in equals because it is unique.

50
00:02:58.450 --> 00:03:01.823
And of course, only identifier for hashCode.

51
00:03:01.823 --> 00:03:05.237
And this is how the two methods look like now.

52
00:03:05.237 --> 00:03:10.061
Now we know that it is the same passenger if we have the same identifier.

53
00:03:10.061 --> 00:03:13.248
We have to inject two more flights into our tests.

54
00:03:13.248 --> 00:03:15.073
In order to allow changing their attributes,

55
00:03:15.073 --> 00:03:20.824
we'll provide them as parameters of the build flight from csv method.

56
00:03:20.824 --> 00:03:23.736
So now the buildFlightFromCsv method will receive

57
00:03:23.736 --> 00:03:27.368
as parameters the flight number, the number of places,

58
00:03:27.368 --> 00:03:31.175
and the file name where to read the passengers from.

59
00:03:31.175 --> 00:03:34.534
We initialize the flight using the constructor having parameters,

60
00:03:34.534 --> 00:03:37.675
flightNumber and number of places.

61
00:03:37.675 --> 00:03:42.167
Of course, we need to add the new parameters to the buildFlightFromCsv method.

62
00:03:42.167 --> 00:03:46.573
Into this FlightProducer class, we'll have to provide two more producer methods,

63
00:03:46.573 --> 00:03:50.754
but we still need to make some way of distinguishing them.

64
00:03:50.754 --> 00:03:53.592
Which method produces which flight?

65
00:03:53.592 --> 00:03:55.007
How can we do this?

66
00:03:55.007 --> 00:03:59.012
We have created here this annotation called FlightNumber.

67
00:03:59.012 --> 00:04:01.730
This is the way how an annotation is defined.

68
00:04:01.730 --> 00:04:03.483
It shows retention as runtime,

69
00:04:03.483 --> 00:04:06.321
meaning that it is kept during the execution of the program.

70
00:04:06.321 --> 00:04:07.414
Using this annotation,

71
00:04:07.414 --> 00:04:10.922
we may annotate both the field and the method and it

72
00:04:10.922 --> 00:04:13.281
also has a parameter called number,

73
00:04:13.281 --> 00:04:16.901
and we'll apply this annotation with different

74
00:04:16.901 --> 00:04:19.689
parameters on these producer methods.

75
00:04:19.689 --> 00:04:24.905
So we see from here that each producer method has a different flight number.

76
00:04:24.905 --> 00:04:29.004
We'll use these three flights here into FlightWithPassengersTest.

77
00:04:29.004 --> 00:04:29.636
First,

78
00:04:29.636 --> 00:04:35.326
we'll rename the flight variable to Flight1 so that we can

79
00:04:35.326 --> 00:04:37.900
make distinction between the 3 ones.

80
00:04:37.900 --> 00:04:43.381
If we run this test now, it will fail.

81
00:04:43.381 --> 00:04:43.951
Why?

82
00:04:43.951 --> 00:04:48.426
Because we have introduced qualifiers for the producer methods and

83
00:04:48.426 --> 00:04:52.250
none of the methods produces a default flight.

84
00:04:52.250 --> 00:04:59.830
Let's add this FlightNumber annotation into the test and run it again.

85
00:04:59.830 --> 00:05:00.227
Great.

86
00:05:00.227 --> 00:05:03.003
We are back to a normal life.

87
00:05:03.003 --> 00:05:06.086
Let's add the second and the third flight.

88
00:05:06.086 --> 00:05:08.406
As we need to work with mock objects,

89
00:05:08.406 --> 00:05:12.463
we'll add this dependency into the pom.xml file.

90
00:05:12.463 --> 00:05:15.165
Going back to FlightWithPassengersTest,

91
00:05:15.165 --> 00:05:19.546
we'll provide this passengersPointsMap and we are going to

92
00:05:19.546 --> 00:05:23.151
initialize it at the beginning of this test suite.

93
00:05:23.151 --> 00:05:26.664
We provide a mock implementation of the DistancesManager object.

94
00:05:26.664 --> 00:05:32.164
We'll annotate this one with mock and we'll also use this MockitoRule

95
00:05:32.164 --> 00:05:36.793
rule annotated object as it is needed to allow the initialization of

96
00:05:36.793 --> 00:05:40.388
mocks annotated with the mock annotation.

97
00:05:40.388 --> 00:05:44.049
And we create this testFlightsDistances where we instruct the

98
00:05:44.049 --> 00:05:47.252
mock object to return passengersPointsMap when we call

99
00:05:47.252 --> 00:05:51.787
distancesManager.getPassengersPointsMap and then we check the

100
00:05:51.787 --> 00:05:53.446
bonus points are the expected ones.

101
00:05:53.446 --> 00:05:55.504
Now the greater thing on it,

102
00:05:55.504 --> 00:05:58.724
we have inserted something into the map and then we check

103
00:05:58.724 --> 00:06:08.000
that we are correctly retrieving it. However, we are expecting advances from the provider side.

