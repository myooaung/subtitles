1
00:00:00,000 --> 00:00:00,640
Hello.

2
00:00:00,640 --> 00:00:05,893
Welcome to this module about the integration testing.

3
00:00:05,893 --> 00:00:09,628
After having introduced and discussed unit testing and individual tested

4
00:00:09,628 --> 00:00:11,881
all components of the flights management application,

5
00:00:11,881 --> 00:00:16,802
it is time now to analyze their combined behavior.

6
00:00:16,802 --> 00:00:18,540
This is the topic of this module.

7
00:00:18,540 --> 00:00:22,374
Let's dive into it.

8
00:00:22,374 --> 00:00:25,509
This module will focus on showing what integrations testing means,

9
00:00:25,509 --> 00:00:29,234
how to make the step from unit testing to integration testing,

10
00:00:29,234 --> 00:00:33,979
and which frameworks are suitable for integration testing.

11
00:00:33,979 --> 00:00:37,506
First, we'll define and motivate the integration testing.

12
00:00:37,506 --> 00:00:40,808
We'll take a look at the types of integration testing and at

13
00:00:40,808 --> 00:00:43,188
the approaches of integration testing.

14
00:00:43,188 --> 00:00:47,190
We'll add new features to the flights management application by revealing

15
00:00:47,190 --> 00:00:50,950
integration problems and by building integration tests.

16
00:00:50,950 --> 00:00:53,863
Finally, we introduce the Arquillian testing framework,

17
00:00:53,863 --> 00:01:00,367
and we'll move the integration test to Arquillian.

18
00:01:00,367 --> 00:01:02,598
So what is integration testing?

19
00:01:02,598 --> 00:01:05,987
Integration testing is a level of software testing where

20
00:01:05,987 --> 00:01:09,247
individual units are combined and tested as a group.

21
00:01:09,247 --> 00:01:13,401
Wherefore, in order to check the interaction between integrated units,

22
00:01:13,401 --> 00:01:16,428
the fact that you need to work fine in isolation does not

23
00:01:16,428 --> 00:01:19,752
necessarily mean that they also work fine together.

24
00:01:19,752 --> 00:01:22,771
Integration testing is performed to expose effects in

25
00:01:22,771 --> 00:01:28,438
interfaces and in interactions between components.

26
00:01:28,438 --> 00:01:31,548
As integration testing types will mention,

27
00:01:31,548 --> 00:01:34,936
black box testing, also known as behavioral testing,

28
00:01:34,936 --> 00:01:39,311
this is a software testing method in which the internal structure

29
00:01:39,311 --> 00:01:43,454
design or implementation of the item being testing is not known

30
00:01:43,454 --> 00:01:45,608
to the person performing the test.

31
00:01:45,608 --> 00:01:48,290
This method is named so because the software program in the

32
00:01:48,290 --> 00:01:52,314
eyes of the person performing the test is like a black box

33
00:01:52,314 --> 00:01:55,156
inside which one cannot see.

34
00:01:55,156 --> 00:01:59,068
White box testing, also known as open box testing,

35
00:01:59,068 --> 00:02:00,407
code-based testing,

36
00:02:00,407 --> 00:02:03,891
or structural testing is a software testing method in which the

37
00:02:03,891 --> 00:02:07,714
internal structure or design or implementation of the item being

38
00:02:07,714 --> 00:02:11,052
tested is known to the person performing the tests.

39
00:02:11,052 --> 00:02:15,269
This one chooses inputs to exercise path through the code

40
00:02:15,269 --> 00:02:17,773
and determines the appropriate outputs.

41
00:02:17,773 --> 00:02:21,642
Programming know-how and the implementation knowledge is essential.

42
00:02:21,642 --> 00:02:25,022
White box testing is testing beyond the user interface.

43
00:02:25,022 --> 00:02:28,326
This method is named so because the software program in

44
00:02:28,326 --> 00:02:32,211
the eyes of the tester is like a white or transparent box

45
00:02:32,211 --> 00:02:35,213
inside which one clearly sees.

46
00:02:35,213 --> 00:02:39,231
Grey box testing is a software testing method which is a combination of

47
00:02:39,231 --> 00:02:42,761
black box testing method and white box testing method.

48
00:02:42,761 --> 00:02:44,173
In black box testing,

49
00:02:44,173 --> 00:02:47,355
the internal structure of the item being tested is unknown

50
00:02:47,355 --> 00:02:51,084
to the person performing the testing, and in white box testing,

51
00:02:51,084 --> 00:02:53,340
the internal structure is known.

52
00:02:53,340 --> 00:02:57,118
In grey box testing, the internal structure is partially known.

53
00:02:57,118 --> 00:03:00,762
This involves having access to internal data structures and

54
00:03:00,762 --> 00:03:04,481
algorithms for purposes of designing the test cases,

55
00:03:04,481 --> 00:03:07,642
but testing at the user or black box level.

56
00:03:07,642 --> 00:03:10,599
Grey box testing is named so because the software program in

57
00:03:10,599 --> 00:03:14,432
the eyes of the tester is like a semi-transparent box inside

58
00:03:14,432 --> 00:03:16,657
which one can partially see.

59
00:03:16,657 --> 00:03:20,107
Our work will be of type grey box testing.

60
00:03:20,107 --> 00:03:22,027
The codes for our units are known,

61
00:03:22,027 --> 00:03:25,749
which means white box testing method for designing test cases.

62
00:03:25,749 --> 00:03:28,639
Actual tests are conducted using the expose interfaces,

63
00:03:28,639 --> 00:03:34,051
which is black box testing method.

64
00:03:34,051 --> 00:03:37,300
As approaches for integration testing, we'll mention here.

65
00:03:37,300 --> 00:03:42,542
Big Bang is an approach to integration testing where all or most of the

66
00:03:42,542 --> 00:03:46,325
units are combined together and tested at one go.

67
00:03:46,325 --> 00:03:49,141
This approach is taken when the testing team

68
00:03:49,141 --> 00:03:51,705
receives the entire software at once.

69
00:03:51,705 --> 00:03:54,432
So what is the difference between big bang

70
00:03:54,432 --> 00:03:57,025
integration testing and system testing.

71
00:03:57,025 --> 00:04:01,100
Integration testing is concerned only with the interactions between the

72
00:04:01,100 --> 00:04:04,839
units while system testing addresses the entire system.

73
00:04:04,839 --> 00:04:08,658
Bottom-up is an approach to integration testing where bottom level units are

74
00:04:08,658 --> 00:04:12,572
tested first and upper level units step by step after that.

75
00:04:12,572 --> 00:04:17,610
This approach is taken when bottom-up development approach is followed.

76
00:04:17,610 --> 00:04:20,130
Top-down is an approach to integration testing where

77
00:04:20,130 --> 00:04:23,972
top-level units are tested first and lower-level units are

78
00:04:23,972 --> 00:04:26,027
tested step by step after that.

79
00:04:26,027 --> 00:04:30,005
This approach is taken when top-down development approach is followed.

80
00:04:30,005 --> 00:04:33,522
Hybrid is an approach to integration testing which is a

81
00:04:33,522 --> 00:04:41,000
combination of top-down and bottom-up approaches and it is the one that we are going to use in our work.

