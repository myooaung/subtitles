WEBVTT
1
00:00:01.424 --> 00:00:04.400
This section will introduce Cucumber as acceptance testing

2
00:00:04.400 --> 00:00:08.661
framework that favors automation and that can be easily used by

3
00:00:08.661 --> 00:00:11.529
both developers and business analysts.

4
00:00:11.529 --> 00:00:18.291
We'll prepare ourselves for using it within our flights management application.

5
00:00:18.291 --> 00:00:20.686
We would like to answer a form of question that may point

6
00:00:20.686 --> 00:00:23.059
out a few things from the very beginning.

7
00:00:23.059 --> 00:00:26.711
What is Cucumber and what is it good for?

8
00:00:26.711 --> 00:00:28.671
Cucumber is an acceptance testing framework,

9
00:00:28.671 --> 00:00:33.229
in particular, a behavior-driven development testing tool framework.

10
00:00:33.229 --> 00:00:36.787
Here describes the application behavior by using plain English

11
00:00:36.787 --> 00:00:39.629
text defined by the language called Gherkin.

12
00:00:39.629 --> 00:00:42.688
Cucumber allows automation facial validation,

13
00:00:42.688 --> 00:00:50.102
easy to read and understand by both developers and business analysts.

14
00:00:50.102 --> 00:00:54.524
The idea of automated acceptance tests originates in extreme programming,

15
00:00:54.524 --> 00:00:59.241
XP, specifically in the practice of test-driven development,

16
00:00:59.241 --> 00:01:00.457
TDD.

17
00:01:00.457 --> 00:01:02.963
These tests are different from unit tests,

18
00:01:02.963 --> 00:01:05.825
which help developers check their software functionality.

19
00:01:05.825 --> 00:01:07.613
As we have already said,

20
00:01:07.613 --> 00:01:10.959
unit tests focus on what a method or a class should do

21
00:01:10.959 --> 00:01:15.315
and ensure you build the thing right, except on tests,

22
00:01:15.315 --> 00:01:20.005
focus on behavior, and ensure you build the right thing.

23
00:01:20.005 --> 00:01:23.322
Instead of a business analyst passing requirements to the

24
00:01:23.322 --> 00:01:25.826
developer without much opportunity for feedback,

25
00:01:25.826 --> 00:01:29.708
the developer and the analyst collaborate to write automated

26
00:01:29.708 --> 00:01:33.592
tests that express what the stakeholder want.

27
00:01:33.592 --> 00:01:38.695
We call them acceptance tests because they express what the sorter needs to

28
00:01:38.695 --> 00:01:42.688
do in order for the stakeholder to find it acceptable.

29
00:01:42.688 --> 00:01:46.489
The test will provide a clear signal about what our business

30
00:01:46.489 --> 00:01:50.308
goals are and what the software should do.

31
00:01:50.308 --> 00:01:52.656
Cucumber has been designed specifically to ensure the

32
00:01:52.656 --> 00:01:56.224
acceptance test can easily be read and written by both

33
00:01:56.224 --> 00:01:58.593
technical and known technical persons.

34
00:01:58.593 --> 00:02:02.478
This reveals the true value of acceptance tests as a

35
00:02:02.478 --> 00:02:04.374
communication and collaboration tool.

36
00:02:04.374 --> 00:02:07.414
It can be used by anyone involved into the project.

37
00:02:07.414 --> 00:02:10.450
Here, an example of a Cucumber acceptance test.

38
00:02:10.450 --> 00:02:14.137
We define a feature that we call Passengers Policy.

39
00:02:14.137 --> 00:02:18.169
Then we provide a short description of what this feature does.

40
00:02:18.169 --> 00:02:21.415
It is about the policy of adding and removing

41
00:02:21.415 --> 00:02:24.472
passengers depending on the passenger type.

42
00:02:24.472 --> 00:02:26.822
Then we see a first scenario.

43
00:02:26.822 --> 00:02:29.953
Anyone can read it in plain English and will understand

44
00:02:29.953 --> 00:02:31.907
what the application needs to do.

45
00:02:31.907 --> 00:02:36.300
Given there is a flight when we have a usual passenger,

46
00:02:36.300 --> 00:02:39.860
then you can add and remove him from the flight.

47
00:02:39.860 --> 00:02:43.284
We notice again the given, when, then words.

48
00:02:43.284 --> 00:02:46.113
These are the key words of describing the scenario.

49
00:02:46.113 --> 00:02:49.143
Cucumber will take care to interpret the sentences starting

50
00:02:49.143 --> 00:02:53.337
with these keywords and generate methods that it will annotate

51
00:02:53.337 --> 00:03:00.000
using exactly these annotations, given, when, and then.

