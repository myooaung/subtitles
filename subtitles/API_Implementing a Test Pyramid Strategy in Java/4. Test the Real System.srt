1
00:00:01,011 --> 00:00:05,132
Our next demonstration will put everything head to head to

2
00:00:05,132 --> 00:00:08,150
check the functionality of the entire system.

3
00:00:08,150 --> 00:00:12,955
On the consumer side, we'll replace the provider double with the real one,

4
00:00:12,955 --> 00:00:16,042
which is now fully available and, of course,

5
00:00:16,042 --> 00:00:20,593
we'll test the functionality against this real provider service.

6
00:00:20,593 --> 00:00:22,285
As usual, at the end,

7
00:00:22,285 --> 00:00:29,693
we'll also check the code coverage to see if everything has been tested.

8
00:00:29,693 --> 00:00:31,921
So from the side of the provider,

9
00:00:31,921 --> 00:00:36,962
we have now received the full implementation of the DistancesManager class.

10
00:00:36,962 --> 00:00:40,660
Instead of annotating the distancesManager object with spy,

11
00:00:40,660 --> 00:00:43,392
we'll have to inject it.

12
00:00:43,392 --> 00:00:49,469
If we go here to the pom.xml, as we no longer need the Mockito dependency,

13
00:00:49,469 --> 00:00:56,107
we'll remove it and we'll tell to IntelliJ to import the changes.

14
00:00:56,107 --> 00:01:00,036
As we are going to use the real passengersSet for each flight and populate

15
00:01:00,036 --> 00:01:03,599
the passenger distances map based on their information,

16
00:01:03,599 --> 00:01:08,421
we'll introduce this getPassengersSet method.

17
00:01:08,421 --> 00:01:13,136
Moving back to the test, we'll remove everything related to mocking objects.

18
00:01:13,136 --> 00:01:15,923
We'll also have to remove this passengersDistancesMap that

19
00:01:15,923 --> 00:01:20,730
was previously mocking some behavior, and into testFlightsDistances,

20
00:01:20,730 --> 00:01:23,122
this initially mocked behavior.

21
00:01:23,122 --> 00:01:26,477
Now coming back to the testFlightsDistances test,

22
00:01:26,477 --> 00:01:31,341
how do we populate the distancesManager passengersDistancesMap?

23
00:01:31,341 --> 00:01:34,651
It is populated here inside addDistance.

24
00:01:34,651 --> 00:01:37,510
So into the testFlightsDistances,

25
00:01:37,510 --> 00:01:42,992
we'll browse all passengers from all three flights and we'll add the distances

26
00:01:42,992 --> 00:01:48,264
that each one has covered into the distancesManager map.

27
00:01:48,264 --> 00:01:51,217
We'll also need to add distancesManager.class to the

28
00:01:51,217 --> 00:01:55,590
ShrinkWrap archive so that the DistancesManager class will

29
00:01:55,590 --> 00:01:58,817
be able to be injected into the test.

30
00:01:58,817 --> 00:02:04,009
Let's run the test and it is green.

31
00:02:04,009 --> 00:02:06,085
In order to understand where we have arrived,

32
00:02:06,085 --> 00:02:13,278
we'll run the whole suite with code coverage and the code coverage is 100%.

33
00:02:13,278 --> 00:02:18,734
We have checked that we have a fully functional system.

34
00:02:18,734 --> 00:02:21,990
This module has focused on introducing system testing

35
00:02:21,990 --> 00:02:25,459
and demonstrating it for our project.

36
00:02:25,459 --> 00:02:28,053
We have explained the motivation for the system testing,

37
00:02:28,053 --> 00:02:31,557
we have explained what a consumer-driven contract is,

38
00:02:31,557 --> 00:02:36,400
and we have shown system testing on the flights management application by

39
00:02:36,400 --> 00:02:40,916
having mocked the provider behavior to test the consumer against this one

40
00:02:40,916 --> 00:02:46,342
and by gradually replacing the mock provider with the real one and making

41
00:02:46,342 --> 00:02:48,795
sure that everything works fine.

42
00:02:48,795 --> 00:02:51,876
We are now prepared for the next step, acceptance testing,

43
00:02:51,876 --> 00:02:55,649
where we'll evaluate the system compliance with the business

44
00:02:55,649 --> 00:03:04,000
requirements and assess whether it is acceptable for delivery. See you in the next module.

