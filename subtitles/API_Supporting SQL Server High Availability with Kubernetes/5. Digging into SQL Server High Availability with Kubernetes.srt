1
00:00:01,210 --> 00:00:06,030
Now, let's take a look at SQL Server failover on a Kubernetes cluster.

2
00:00:06,030 --> 00:00:11,010
SQL Server failover with Kubernetes is similar to Windows failover clustering,

3
00:00:11,010 --> 00:00:12,590
but there are differences.

4
00:00:12,590 --> 00:00:16,000
Without a doubt, the biggest difference is that Kubernetes

5
00:00:16,000 --> 00:00:19,830
manages containers while Windows failover clustering protects

6
00:00:19,830 --> 00:00:22,540
either VMs or physical systems.

7
00:00:22,540 --> 00:00:27,710
Containers are much lighter weight than VMs. And when Kubernetes

8
00:00:27,710 --> 00:00:30,980
determines that a pod or container has failed,

9
00:00:30,980 --> 00:00:33,490
it can rapidly spin up a new one.

10
00:00:33,490 --> 00:00:34,520
In this slide,

11
00:00:34,520 --> 00:00:39,530
you can see an overview of the basic Kubernetes cluster with multiple nodes

12
00:00:39,530 --> 00:00:44,470
running a SQL Server container. If you recall from our earlier discussion of

13
00:00:44,470 --> 00:00:49,120
the basic Kubernetes architecture, Kubernetes clusters consists of nodes,

14
00:00:49,120 --> 00:00:51,680
which are typically VMs, and then pods,

15
00:00:51,680 --> 00:00:55,550
which are used to run containers. Here, a new concept,

16
00:00:55,550 --> 00:00:56,760
a replica set,

17
00:00:56,760 --> 00:00:59,050
is something that ensures that the pod is

18
00:00:59,050 --> 00:01:02,340
automatically recovered after a node failure.

19
00:01:02,340 --> 00:01:07,530
At the bottom, you can see persistent volumes in a persistent volume claim.

20
00:01:07,530 --> 00:01:11,740
Persistent volumes in a persistent volume claim connect

21
00:01:11,740 --> 00:01:14,200
pods to external storage. And again,

22
00:01:14,200 --> 00:01:18,640
the load balancing service enables external network clients to connect

23
00:01:18,640 --> 00:01:22,230
to the SQL Server instance running in the container.

24
00:01:22,230 --> 00:01:26,080
Kubernetes ReplicaSets guarantee the correct count of

25
00:01:26,080 --> 00:01:28,410
healthy instances in the cluster.

26
00:01:28,410 --> 00:01:31,950
If there's a failure in the SQL Server container,

27
00:01:31,950 --> 00:01:36,570
Kubernetes will start a new container according to its deployment rules.

28
00:01:36,570 --> 00:01:39,940
The new container will reconnect to the same persistent storage,

29
00:01:39,940 --> 00:01:44,440
and the load balancing service connects to the recreated SQL Server container.

30
00:01:44,440 --> 00:01:48,530
This failover process only takes a few seconds as it takes

31
00:01:48,530 --> 00:01:51,540
Kubernetes to spin up a new container.

32
00:01:51,540 --> 00:01:55,000
Likewise, if there's a node failure,

33
00:01:55,000 --> 00:01:59,640
Kubernetes will start a new pod on a different node. The SQL Server

34
00:01:59,640 --> 00:02:02,810
container reconnects to the same persistent storage,

35
00:02:02,810 --> 00:02:07,540
and the load balancing service connects to the recreated SQL Server container.

36
00:02:07,540 --> 00:02:10,090
So, in summary, you know,

37
00:02:10,090 --> 00:02:15,100
with SQL Server and Windows failover clustering, that works at the server level.

38
00:02:15,100 --> 00:02:18,080
It uses clustered SQL Server instances,

39
00:02:18,080 --> 00:02:22,670
which are special install options for SQL Server.

40
00:02:22,670 --> 00:02:26,250
It can range from two node clusters for the Standard edition

41
00:02:26,250 --> 00:02:29,290
up to 64 nodes for the Enterprise edition.

42
00:02:29,290 --> 00:02:34,640
It's more complex to set up than a Kubernetes cluster,

43
00:02:34,640 --> 00:02:39,840
and failover time depends upon the activity level that's going on.

44
00:02:39,840 --> 00:02:44,950
Kubernetes and SQL Server, here, it works at the container level.

45
00:02:44,950 --> 00:02:50,140
It uses standalone SQL Server instances, which are easier to set up.

46
00:02:50,140 --> 00:02:53,430
The number of nodes that you're using are not limited by the

47
00:02:53,430 --> 00:02:55,870
edition of SQL Server that you're using.

48
00:02:55,870 --> 00:03:01,210
This is simpler to set up, and failover tends to be much faster within seconds,

49
00:03:01,210 --> 00:03:04,140
just the time to spin up a new container.

50
00:03:04,140 --> 00:03:08,290
So, in summary, in this module, you got an overview

51
00:03:08,290 --> 00:03:10,470
of Kubernetes with SQL Server.

52
00:03:10,470 --> 00:03:13,140
You learned about running SQL Server on a Kubernetes

53
00:03:13,140 --> 00:03:15,840
cluster and how it affects availability.

54
00:03:15,840 --> 00:03:18,970
You learned about some of the basics of running SQL

55
00:03:18,970 --> 00:03:21,640
Server with a Windows failover cluster.

56
00:03:21,640 --> 00:03:25,400
We learned about SQL Server high availability with Kubernetes,

57
00:03:25,400 --> 00:03:35,000
and we saw a comparison of SQL Server availability between Windows failover clusters and Kubernetes clusters.

