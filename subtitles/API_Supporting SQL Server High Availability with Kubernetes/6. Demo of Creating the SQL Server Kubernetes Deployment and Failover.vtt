WEBVTT
1
00:00:01.340 --> 00:00:05.950
Now that we've explained the tools and how these YAML files are working,

2
00:00:05.950 --> 00:00:09.940
let's take a look at all of this in action.

3
00:00:09.940 --> 00:00:10.480
First,

4
00:00:10.480 --> 00:00:12.310
we're going to create all the different parts of the

5
00:00:12.310 --> 00:00:14.970
Kubernetes deployment that I've just covered.

6
00:00:14.970 --> 00:00:18.540
Next, after the SQL Server Kubernetes deployment has been created,

7
00:00:18.540 --> 00:00:21.930
we're going to connect to that SQL Server instance

8
00:00:21.930 --> 00:00:24.840
using Microsoft's Azure Data Studio.

9
00:00:24.840 --> 00:00:29.340
Then, you're going to see how you can restore a database to that SQL Server pod,

10
00:00:29.340 --> 00:00:32.840
and you're going to see how you can run some queries against it.

11
00:00:32.840 --> 00:00:37.200
Finally, I'll demonstrate a failover by killing the SQL Server pod,

12
00:00:37.200 --> 00:00:40.510
then showing how you can reconnect to the new pod that's

13
00:00:40.510 --> 00:00:43.640
spawned by the Kubernetes replica set.

14
00:00:43.640 --> 00:00:47.240
Let's go ahead and have a look at it.

15
00:00:47.240 --> 00:00:51.620
First, let's take a quick look at the load balancer YAML,

16
00:00:51.620 --> 00:00:57.040
and we can see it over here in our sqlloadbalancer.yaml file.

17
00:00:57.040 --> 00:00:57.940
Here's the file.

18
00:00:57.940 --> 00:00:59.440
Let's take a look at the kind.

19
00:00:59.440 --> 00:01:05.350
You can see that there, the name, our app selector is mssql,

20
00:01:05.350 --> 00:01:10.840
and our protocol is TCP, our external port is 1433,

21
00:01:10.840 --> 00:01:15.540
going to be mapped over to the internal port of 1433.

22
00:01:15.540 --> 00:01:19.330
So let's go ahead and run the kubectl command to go

23
00:01:19.330 --> 00:01:24.270
ahead and create this service, which you can see here,

24
00:01:24.270 --> 00:01:31.840
and it is the kubectl command with apply and our service name.

25
00:01:31.840 --> 00:01:34.910
So there we go, and the service was created.

26
00:01:34.910 --> 00:01:36.940
That was pretty quick.

27
00:01:36.940 --> 00:01:40.210
Now let's go ahead and create the storage.

28
00:01:40.210 --> 00:01:44.070
First, here's the storage.yaml; we can see it here.

29
00:01:44.070 --> 00:01:46.690
You can see at the top, our StorageClass.

30
00:01:46.690 --> 00:01:49.110
You can see the name of azure‑disk.

31
00:01:49.110 --> 00:01:51.230
You can see our storage account type.

32
00:01:51.230 --> 00:01:54.610
You can see then our persistent volume claim,

33
00:01:54.610 --> 00:01:59.430
our ReadWriteOnce, which means one container is accessing it,

34
00:01:59.430 --> 00:02:02.410
and the storage size.

35
00:02:02.410 --> 00:02:02.780
Now,

36
00:02:02.780 --> 00:02:07.170
let's go ahead and create the storage. So the code that

37
00:02:07.170 --> 00:02:09.350
creates the storage is down here.

38
00:02:09.350 --> 00:02:13.840
You can see it's another kubectl apply command.

39
00:02:13.840 --> 00:02:14.360
Now,

40
00:02:14.360 --> 00:02:20.540
let's go ahead and run the kubectl apply command to create the external storage.

41
00:02:20.540 --> 00:02:24.740
And you can see the storage is created.

42
00:02:24.740 --> 00:02:27.600
So now, let's use kubectl,

43
00:02:27.600 --> 00:02:29.680
and we're going to have a look at the persistent

44
00:02:29.680 --> 00:02:32.450
volume and the persistent volume claim.

45
00:02:32.450 --> 00:02:33.420
Here,

46
00:02:33.420 --> 00:02:37.900
the first two kubectl commands retrieve a description of the persistent

47
00:02:37.900 --> 00:02:43.010
storage and then a description of the persistent volume claim.

48
00:02:43.010 --> 00:02:49.740
And here you can see, the descriptions of both of those.

49
00:02:49.740 --> 00:02:52.060
So we've successfully created them.

50
00:02:52.060 --> 00:02:55.090
You can see a few of their attributes down here,

51
00:02:55.090 --> 00:03:01.640
like the capacity and the names of each of these things.

52
00:03:01.640 --> 00:03:05.390
If you'll recall earlier when I was describing the sqlstorage.yaml file,

53
00:03:05.390 --> 00:03:08.310
I mentioned, if you don't know what's available,

54
00:03:08.310 --> 00:03:10.970
a kubectl gives you a way to find out.

55
00:03:10.970 --> 00:03:17.130
If you run the kubectl get storageclass command, like you see here,

56
00:03:17.130 --> 00:03:21.150
it will list the different storage classes that are available to you.

57
00:03:21.150 --> 00:03:26.240
So in this case here, you can see that we could have chosen azure‑disk,

58
00:03:26.240 --> 00:03:29.250
azurefile, azurefile‑premium, the default.

59
00:03:29.250 --> 00:03:30.540
or managed‑premium.

60
00:03:30.540 --> 00:03:34.640
All of these are the different choices that you have available to you.

61
00:03:34.640 --> 00:03:35.270
Okay?

62
00:03:35.270 --> 00:03:41.040
Now let's talk about assigning a value to the Kubernetes Secrets.

63
00:03:41.040 --> 00:03:44.720
Here's the code to go ahead and create a Kubernetes secret.

64
00:03:44.720 --> 00:03:49.330
You can see we're using the kubectl create secret command,

65
00:03:49.330 --> 00:03:55.240
and we're passing in a literal that's going to contain our SA_PASSWORD.

66
00:03:55.240 --> 00:03:57.670
You don't necessarily have to do this.

67
00:03:57.670 --> 00:04:01.030
You don't have to create a secret, but it's a good practice,

68
00:04:01.030 --> 00:04:04.300
and it gives you a more secure way of passing the SA_PASSWORD

69
00:04:04.300 --> 00:04:07.840
into the deployment that we're about to create.

70
00:04:07.840 --> 00:04:13.240
So let's go ahead and create the secret.

71
00:04:13.240 --> 00:04:17.940
You can tell it takes just a second, and the secret has been created.

72
00:04:17.940 --> 00:04:22.890
Now, let's go ahead and create the deployment, but before we do,

73
00:04:22.890 --> 00:04:26.230
let's have a quick look at the sqldeployment.yaml that

74
00:04:26.230 --> 00:04:28.330
we're going to go ahead and run.

75
00:04:28.330 --> 00:04:32.700
At the top, you can see that the kind shows the type of deployment.

76
00:04:32.700 --> 00:04:36.620
Again, you can see the name of the deployment.

77
00:04:36.620 --> 00:04:42.210
If we scroll down, you can see the replica set and the name of the app.

78
00:04:42.210 --> 00:04:44.440
If we scroll a little farther,

79
00:04:44.440 --> 00:04:48.270
we can see the container image and the different

80
00:04:48.270 --> 00:04:51.040
environment variables that we're going to use.

81
00:04:51.040 --> 00:04:53.490
And if we scroll down a little farther,

82
00:04:53.490 --> 00:04:57.630
you can see where the container is using the mountPath

83
00:04:57.630 --> 00:05:02.340
inside the container of /var/opt/mssql.

84
00:05:02.340 --> 00:05:08.400
So now let's go ahead and create this deployment. And we

85
00:05:08.400 --> 00:05:11.340
can see the deployment was created.

86
00:05:11.340 --> 00:05:14.410
This actually sends the command to the scheduler,

87
00:05:14.410 --> 00:05:17.310
and it takes it a few minutes behind the scenes to go

88
00:05:17.310 --> 00:05:19.510
ahead and create our deployment.

89
00:05:19.510 --> 00:05:21.840
So let's wait just a second.

90
00:05:21.840 --> 00:05:25.140
Now that that's completed, our container should be running.

91
00:05:25.140 --> 00:05:29.530
Let's go ahead and look at the code to list the pods and the services out here.

92
00:05:29.530 --> 00:05:32.630
You can see that we're going to run kubectl get pods

93
00:05:32.630 --> 00:05:34.370
to list the pods that are there,

94
00:05:34.370 --> 00:05:39.840
and kubectl get services to list the services that are running.

95
00:05:39.840 --> 00:05:41.470
Let's go ahead and run these commands.

96
00:05:41.470 --> 00:05:47.350
And we've done that, and you can see at the bottom of the screen,

97
00:05:47.350 --> 00:05:49.850
we have one pod that's going ahead and running,

98
00:05:49.850 --> 00:05:54.520
called mssql‑deployment is the starting name of our pod,

99
00:05:54.520 --> 00:05:56.930
and it's running, and down below,

100
00:05:56.930 --> 00:06:00.340
you can see that we have two services that are running,

101
00:06:00.340 --> 00:06:02.710
and one is for Kubernetes itself,

102
00:06:02.710 --> 00:06:07.370
and the other is our load balancing service called mssql‑service.

103
00:06:07.370 --> 00:06:11.300
And you should pay attention to the EXTERNAL‑IP,

104
00:06:11.300 --> 00:06:17.840
and that's the EXTERNAL‑IP that we're going to use to connect into this pod.

105
00:06:17.840 --> 00:06:21.170
Now that our SQL Server 2019 pod is running,

106
00:06:21.170 --> 00:06:24.840
we have a highly available SQL Server deployment.

107
00:06:24.840 --> 00:06:28.520
However, at this point, this SQL Server instance is fresh out of the box,

108
00:06:28.520 --> 00:06:30.750
and it doesn't have any databases on it.

109
00:06:30.750 --> 00:06:33.820
We could go ahead and connect to it with any of the normal

110
00:06:33.820 --> 00:06:36.050
SQL Server Management tools or programs,

111
00:06:36.050 --> 00:06:38.590
but so far, there's not a lot to see.

112
00:06:38.590 --> 00:06:41.720
If you've gone ahead and deployed SQL Server on Kubernetes,

113
00:06:41.720 --> 00:06:42.340
well,

114
00:06:42.340 --> 00:06:44.380
one of the first things you're going to want to do is

115
00:06:44.380 --> 00:06:46.240
get some databases up and running.

116
00:06:46.240 --> 00:06:49.870
So let's go ahead and see how we can copy a database to our

117
00:06:49.870 --> 00:06:52.810
SQL Server pod, then we'll connect to it,

118
00:06:52.810 --> 00:06:55.140
and go ahead and manage it.

119
00:06:55.140 --> 00:06:58.850
Let's look at the code to copy a database into the pod.

120
00:06:58.850 --> 00:07:00.120
At the top here,

121
00:07:00.120 --> 00:07:03.640
you can see where we're using the kubectl cp command to

122
00:07:03.640 --> 00:07:06.580
copy a database to our SQL Server pod.

123
00:07:06.580 --> 00:07:07.460
At the top,

124
00:07:07.460 --> 00:07:11.960
I'm using grep to cut out and do a simple parse of the kubectl

125
00:07:11.960 --> 00:07:14.820
get pods output to retrieve the pod name.

126
00:07:14.820 --> 00:07:16.430
At the bottom,

127
00:07:16.430 --> 00:07:20.300
you can see the kubectl cp command that copies the

128
00:07:20.300 --> 00:07:25.590
AdventureWorks2014 backup database file to the SQL Server pod.

129
00:07:25.590 --> 00:07:29.740
It uses the variable that has that pod name that we retrieved earlier,

130
00:07:29.740 --> 00:07:35.540
and the SQL Server default directory of /var/opt/mssql/data.

131
00:07:35.540 --> 00:07:39.490
Remember, this storage is actually external.

132
00:07:39.490 --> 00:07:42.900
If the pod fails, the storage will remain intact.

133
00:07:42.900 --> 00:07:47.240
So let's go ahead and run the copy command,

134
00:07:47.240 --> 00:07:50.160
to copy this database to our pod, and remember,

135
00:07:50.160 --> 00:07:52.930
this is copying it from our local system,

136
00:07:52.930 --> 00:08:01.110
our local Ubuntu system, to our Kubernetes cluster that is running up in Azure.

137
00:08:01.110 --> 00:08:05.140
After the database backup has been copied to the pod,

138
00:08:05.140 --> 00:08:08.970
we can go ahead and restore it and run some queries.

139
00:08:08.970 --> 00:08:12.790
To do that, we're going to need to use some of the SQL Server Management tools.

140
00:08:12.790 --> 00:08:16.210
In this case, I'm going to go ahead and use Azure Data Studio,

141
00:08:16.210 --> 00:08:19.540
which is a cross‑platform database management tool.

142
00:08:19.540 --> 00:08:21.590
It can be readily installed on Ubuntu,

143
00:08:21.590 --> 00:08:24.550
and it can connect to SQL Server running locally,

144
00:08:24.550 --> 00:08:28.040
or SQL Server in our Kubernetes cluster.

145
00:08:28.040 --> 00:08:33.140
Okay, let's open the script that will connect with Azure Data Studio.

146
00:08:33.140 --> 00:08:35.290
At the top of the script, you can see where again,

147
00:08:35.290 --> 00:08:39.270
I'm grepping out the external IP address of the cluster from the

148
00:08:39.270 --> 00:08:43.220
output of the kubectl get services command.

149
00:08:43.220 --> 00:08:46.340
Next, let's scroll down to the second part of the script,

150
00:08:46.340 --> 00:08:48.890
and you can see for convenience sake,

151
00:08:48.890 --> 00:08:51.850
I'm pasting it into the clipboard so I don't have to type

152
00:08:51.850 --> 00:08:54.290
the IP address out on the connect dialog,

153
00:08:54.290 --> 00:08:58.240
and then the script is firing up Azure Data Studio.

154
00:08:58.240 --> 00:09:08.170
So, let's go ahead and run this, and it's positive.

155
00:09:08.170 --> 00:09:12.820
Let's give this a chance to start Azure Data Studio when we press a key.

156
00:09:12.820 --> 00:09:16.780
And we've done it, and here comes up Azure Data Studio.

157
00:09:16.780 --> 00:09:21.670
From Azure Data Studio, let's first go ahead and connect to our SQL Server pod.

158
00:09:21.670 --> 00:09:25.550
Remember here, Azure Data Studio, like kubectl,

159
00:09:25.550 --> 00:09:27.910
is running on my local Ubuntu system,

160
00:09:27.910 --> 00:09:34.840
while the Kubernetes cluster itself is running in Azure Kubernetes Services.

161
00:09:34.840 --> 00:09:39.440
So let's open our connect dialog,

162
00:09:39.440 --> 00:09:45.820
and you can see our server prompt in the Azure Studio connect dialog,

163
00:09:45.820 --> 00:09:51.090
and then we can enter our username of SA.

164
00:09:51.090 --> 00:09:55.140
Next, we'll go ahead and enter our SA_PASSWORD,

165
00:09:55.140 --> 00:10:01.640
and remember, this is the same password that we stored in the Kubernetes secret.

166
00:10:01.640 --> 00:10:09.140
And then we'll go ahead and connect.

167
00:10:09.140 --> 00:10:09.960
And here,

168
00:10:09.960 --> 00:10:14.200
you can see that Azure Data Studio has gone ahead and connected to our SQL

169
00:10:14.200 --> 00:10:18.870
Server instance that is running in our Kubernetes cluster,

170
00:10:18.870 --> 00:10:23.340
and it's acting just like it would with any other instance of SQL Server.

171
00:10:23.340 --> 00:10:28.710
Here, SQL Server doesn't really know that it's running in Kubernetes.

172
00:10:28.710 --> 00:10:33.340
If we expand our databases,

173
00:10:33.340 --> 00:10:37.140
you can see we've only got the system databases out there.

174
00:10:37.140 --> 00:10:39.800
In our server dashboard here,

175
00:10:39.800 --> 00:10:42.920
you can see that we're running on Red Hat Enterprise Linux,

176
00:10:42.920 --> 00:10:47.040
and that this is the container image that we used for our pod.

177
00:10:47.040 --> 00:10:47.970
Now,

178
00:10:47.970 --> 00:10:52.600
let's go ahead and restore the backup of the AdventureWorks2014

179
00:10:52.600 --> 00:10:57.640
file that we copied over to our container.

180
00:10:57.640 --> 00:11:03.000
First, let's go ahead and open up our backup file,

181
00:11:03.000 --> 00:11:09.780
and remember, the backup path that we copied it over to was /var/opt/mssql/data.

182
00:11:09.780 --> 00:11:14.680
So if we scroll down, we'll find our backup file.

183
00:11:14.680 --> 00:11:18.640
So we'll go ahead and select it.

184
00:11:18.640 --> 00:11:22.940
We're going to go ahead and restore it to the AdventureWorks database,

185
00:11:22.940 --> 00:11:26.940
and you can see that it recognizes it as a valid backup file.

186
00:11:26.940 --> 00:11:29.840
So we're going to go ahead and hit Restore,

187
00:11:29.840 --> 00:11:34.140
and at this point, the Restore database is in progress.

188
00:11:34.140 --> 00:11:39.040
It only takes it a couple seconds to go ahead and run.

189
00:11:39.040 --> 00:11:41.110
Now that the database has been restored,

190
00:11:41.110 --> 00:11:44.740
we should be able to see it in our Databases list.

191
00:11:44.740 --> 00:11:50.820
So let's go ahead and refresh our database list, and there's AdventureWorks2014.

192
00:11:50.820 --> 00:11:54.620
We can go ahead and run a quick query.

193
00:11:54.620 --> 00:12:00.640
Let's go ahead and select the top 1000 of the Department table,

194
00:12:00.640 --> 00:12:03.970
and here you can see our query and the results of the query.

195
00:12:03.970 --> 00:12:07.850
So you can see that SQL Server on Kubernetes is running

196
00:12:07.850 --> 00:12:12.840
exactly like any other instance of SQL Server.

197
00:12:12.840 --> 00:12:19.540
Now let's switch back to Visual Studio Code and simulate running a failover.

198
00:12:19.540 --> 00:12:23.530
So let's open our demo failover script. In this script,

199
00:12:23.530 --> 00:12:25.570
you can see that I, at the top again,

200
00:12:25.570 --> 00:12:29.840
parse out the pod name from the kubectl get pods command.

201
00:12:29.840 --> 00:12:33.770
Then you can see the kubectl delete pod command is

202
00:12:33.770 --> 00:12:35.920
used to actually delete the pod.

203
00:12:35.920 --> 00:12:41.640
Now, of course, this is going to kill the SQL Server instance that's running.

204
00:12:41.640 --> 00:12:46.000
Let's scroll down to see the next part of the script, and here you can

205
00:12:46.000 --> 00:12:50.560
see that the script waits a few seconds to give the Kubernetes replica

206
00:12:50.560 --> 00:12:53.240
set a little bit of time to restart the pod,

207
00:12:53.240 --> 00:12:56.220
and then we list the newly running pod.

208
00:12:56.220 --> 00:13:00.940
You might take note of the new pod name here, once it starts.

209
00:13:00.940 --> 00:13:10.240
So let's run this script. And here, it's going ahead and deleting our pod,

210
00:13:10.240 --> 00:13:13.720
and it's going to take it just a couple of different seconds

211
00:13:13.720 --> 00:13:18.560
as it waits to restart our pod. And there, you can see that

212
00:13:18.560 --> 00:13:19.960
it's already up and running.

213
00:13:19.960 --> 00:13:25.260
You might note this pod name. If we scroll back through our output earlier,

214
00:13:25.260 --> 00:13:29.740
you can see that our pod name here is different than the pod that is now

215
00:13:29.740 --> 00:13:32.830
running, because Kubernetes has restarted the pod.

216
00:13:32.830 --> 00:13:40.040
Now, let's go back to Azure Data Studio and reconnect to our new pod.

217
00:13:40.040 --> 00:13:46.830
And here is Azure Data Studio, and we're back at our home screen.

218
00:13:46.830 --> 00:13:50.240
If we want to go back and look at our databases,

219
00:13:50.240 --> 00:13:54.800
you can see that our databases are still intact, and it's still online.

220
00:13:54.800 --> 00:14:00.510
It's acting and running exactly as if it had never gone down.

221
00:14:00.510 --> 00:14:06.940
So not a lot was going on with this, so our recovery here was very fast.

222
00:14:06.940 --> 00:14:13.940
And if we re‑open up our AdventureWorks database. and re‑query the data,

223
00:14:13.940 --> 00:14:21.340
you can see that our query runs almost as if we didn't have a failover at all.

224
00:14:21.340 --> 00:14:24.340
Okay, now that we've completed the failover,

225
00:14:24.340 --> 00:14:28.400
let's go ahead and see what's running. First, we're going to go ahead and

226
00:14:28.400 --> 00:14:32.570
use kubectl get all to get all of the different Kubernetes components that

227
00:14:32.570 --> 00:14:36.720
are out there running, and then we'll briefly describe the pod, using

228
00:14:36.720 --> 00:14:41.040
kubectl describe pod, like you can see here.

229
00:14:41.040 --> 00:14:45.300
So let's go ahead and run it, and we'll scroll back and

230
00:14:45.300 --> 00:14:48.620
have a quick look at what it returned.

231
00:14:48.620 --> 00:14:54.370
And you can see here, there is our command, and there's the name of our

232
00:14:54.370 --> 00:14:57.200
deployment. There are the two services that are running,

233
00:14:57.200 --> 00:15:00.980
including the load balancing service, and beneath that,

234
00:15:00.980 --> 00:15:03.140
we have our pod and our replica set,

235
00:15:03.140 --> 00:15:09.310
and you can see that our replica set has our desired count, our current count.

236
00:15:09.310 --> 00:15:12.920
Now let's scroll down to the pod description, and you can see the

237
00:15:12.920 --> 00:15:17.800
pod name here, the start time for the pod, and if we scroll down a

238
00:15:17.800 --> 00:15:20.930
little farther, we can see the containers that are running with the

239
00:15:20.930 --> 00:15:24.440
Container ID and the Image ID.

240
00:15:24.440 --> 00:15:26.720
If we scroll down a little bit farther,

241
00:15:26.720 --> 00:15:31.690
we can see the environment variables that we passed into the pod, as well as

242
00:15:31.690 --> 00:15:38.790
the external volume that we've attached to, /var/opt/mssql, and in the secrets

243
00:15:38.790 --> 00:15:44.140
that we've passed into the pod for our SA_PASSWORD,

244
00:15:44.140 --> 00:15:48.280
if we scroll down a little bit farther, we can see some of the

245
00:15:48.280 --> 00:15:52.430
messages associated with the pod. So, we can see that

246
00:15:52.430 --> 00:15:54.940
everything is basically out there running.

247
00:15:54.940 --> 00:15:58.260
Now, if we want to go ahead and get the logs for the pod, and this

248
00:15:58.260 --> 00:16:02.720
is going to show the logs from the pod itself, which came from SQL

249
00:16:02.720 --> 00:16:08.280
Server. And here are our logs, and you can see these are normal

250
00:16:08.280 --> 00:16:12.640
logs for a SQL Server restart.

251
00:16:12.640 --> 00:16:13.680
If we scroll back,

252
00:16:13.680 --> 00:16:18.330
you can see that it tells us that database master is coming up.

253
00:16:18.330 --> 00:16:22.270
It tells us about the health file size, and that SQL

254
00:16:22.270 --> 00:16:25.760
Server is now ready for client connection, so its normal

255
00:16:25.760 --> 00:16:28.240
logs from a SQL Server startup.

256
00:16:28.240 --> 00:16:31.840
You can see that after our failover, everything is pretty much running.

257
00:16:31.840 --> 00:16:35.730
If we want to go ahead and clean up our deployment, we can go ahead

258
00:16:35.730 --> 00:16:39.510
and run this command, and this is az group delete.

259
00:16:39.510 --> 00:16:40.210
Remember,

260
00:16:40.210 --> 00:16:43.750
our Azure Kubernetes Services resource group contains

261
00:16:43.750 --> 00:16:45.910
all of our Kubernetes components.

262
00:16:45.910 --> 00:16:50.910
So if we want to go ahead and clean this up to either re‑run

263
00:16:50.910 --> 00:16:55.620
another test in the future, or to basically change our

264
00:16:55.620 --> 00:16:59.440
configuration and restart it, we can run this command.

265
00:16:59.440 --> 00:17:01.660
It will ask us if we're sure if we want to perform this

266
00:17:01.660 --> 00:17:04.490
operation; we'll say yes, and at this point,

267
00:17:04.490 --> 00:17:10.360
it will go ahead and clean up everything that we've created out here, and this

268
00:17:10.360 --> 00:17:19.000
would also stop any charges from happening with Azure's Kubernetes Services or the VM charges for the nodes or the storage.

