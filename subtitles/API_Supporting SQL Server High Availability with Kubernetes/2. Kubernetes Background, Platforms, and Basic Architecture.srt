1
00:00:00,830 --> 00:00:03,380
First, some quick background on Kubernetes.

2
00:00:03,380 --> 00:00:06,070
It was initially developed by a team at Google,

3
00:00:06,070 --> 00:00:09,140
and there was a definite Star Trek influence as its

4
00:00:09,140 --> 00:00:12,040
original code was named Borg.

5
00:00:12,040 --> 00:00:16,840
It was turned over as an open source project in 2014.

6
00:00:16,840 --> 00:00:19,270
And if you're wondering about the name Kubernetes,

7
00:00:19,270 --> 00:00:22,570
Kubernetes is Greek for helmsman. Now,

8
00:00:22,570 --> 00:00:26,740
Kubernetes is maintained by the Cloud Computing Foundation.

9
00:00:26,740 --> 00:00:30,000
Kubernetes is really all about managing containers.

10
00:00:30,000 --> 00:00:33,170
It was designed to facilitate container orchestration,

11
00:00:33,170 --> 00:00:36,640
application development, scalability, and management.

12
00:00:36,640 --> 00:00:40,190
You know, managing a few containers with Docker is pretty easy,

13
00:00:40,190 --> 00:00:44,580
but when you need to manage complex applications with hundreds of containers,

14
00:00:44,580 --> 00:00:49,020
then it gets really hard, and that's why Google developed Kubernetes.

15
00:00:49,020 --> 00:00:54,540
It's all about deployment, scaling, and management of containerized applications.

16
00:00:54,540 --> 00:00:58,270
Kubernetes works with a wide range of container platforms.

17
00:00:58,270 --> 00:00:59,920
While it's mainly used with Docker,

18
00:00:59,920 --> 00:01:04,820
it's not limited to Docker so you can use it with other container platforms.

19
00:01:04,820 --> 00:01:07,840
The examples in this course all use Kubernetes to

20
00:01:07,840 --> 00:01:10,740
manage SQL Server on Docker containers.

21
00:01:10,740 --> 00:01:14,230
Kubernetes is also deployed on multiple platforms.

22
00:01:14,230 --> 00:01:17,400
You can deploy Kubernetes on‑premise using managed

23
00:01:17,400 --> 00:01:20,260
providers or by using cloud providers.

24
00:01:20,260 --> 00:01:25,250
That said, it's primarily designed to manage cloud‑based applications.

25
00:01:25,250 --> 00:01:28,200
So let's take a quick look at some of the different

26
00:01:28,200 --> 00:01:31,910
platforms that Kubernetes can be deployed on.

27
00:01:31,910 --> 00:01:35,950
First, Kubernetes can be deployed on‑premise running on your

28
00:01:35,950 --> 00:01:39,640
own hardware using kubeadmin or minikube.

29
00:01:39,640 --> 00:01:42,320
These are both relatively easy to set up and they're

30
00:01:42,320 --> 00:01:44,180
great for testing and development,

31
00:01:44,180 --> 00:01:48,340
but they lack the scalability that you get from cloud providers.

32
00:01:48,340 --> 00:01:51,020
There are also a number of managed providers that can

33
00:01:51,020 --> 00:01:53,010
span both on‑premise and the cloud.

34
00:01:53,010 --> 00:01:56,830
A couple of the most popular managed providers are Red Hat

35
00:01:56,830 --> 00:02:00,020
OpenShift and Pivotal Container Services.

36
00:02:00,020 --> 00:02:03,420
These types of services and managed providers are often used by

37
00:02:03,420 --> 00:02:07,380
larger corporations and they manage a number of different

38
00:02:07,380 --> 00:02:10,920
enterprise services beyond Kubernetes, however,

39
00:02:10,920 --> 00:02:14,060
they could be quite complex and they can have a pretty steep

40
00:02:14,060 --> 00:02:16,740
learning curve to get started with them.

41
00:02:16,740 --> 00:02:21,210
Kubernetes support is also provided by all the Tier one Cloud Providers.

42
00:02:21,210 --> 00:02:24,970
Microsoft provides their Azure Kubernetes Service, Amazon

43
00:02:24,970 --> 00:02:27,190
provides their Elastic Kubernetes Service,

44
00:02:27,190 --> 00:02:30,940
and of course, Google provides their Kubernetes engine.

45
00:02:30,940 --> 00:02:34,680
Now let's take a closer look at the basic Kubernetes

46
00:02:34,680 --> 00:02:38,740
architecture as it relates to SQL Server.

47
00:02:38,740 --> 00:02:41,710
When you deploy Kubernetes, you get a cluster.

48
00:02:41,710 --> 00:02:45,690
A Kubernetes cluster consists of a set of worker machines called

49
00:02:45,690 --> 00:02:49,050
nodes that run containerized applications.

50
00:02:49,050 --> 00:02:54,390
Every cluster has at least one node. Nodes can be bare metal servers,

51
00:02:54,390 --> 00:02:58,240
but they are more commonly virtual machines.

52
00:02:58,240 --> 00:03:02,660
Nodes host the pods that are the main component of the application workload.

53
00:03:02,660 --> 00:03:07,280
Each node contains the necessary services required to run pods.

54
00:03:07,280 --> 00:03:10,180
Pods contain one or more containers,

55
00:03:10,180 --> 00:03:13,500
along with the specifications of how to run the containers.

56
00:03:13,500 --> 00:03:18,640
Each pod in Kubernetes is assigned a unique pod IP address within the cluster.

57
00:03:18,640 --> 00:03:22,840
Each pod is meant to run a single instance of a given application.

58
00:03:22,840 --> 00:03:24,640
Regarding SQL Server,

59
00:03:24,640 --> 00:03:27,790
there are a couple important aspects of the Kubernetes cluster.

60
00:03:27,790 --> 00:03:31,520
First, SQL Server needs to connect to the outside world,

61
00:03:31,520 --> 00:03:35,140
and that's where the Kubernetes load balancing service comes in.

62
00:03:35,140 --> 00:03:38,360
The load balancing services spans the Kubernetes cluster,

63
00:03:38,360 --> 00:03:41,760
and it connects the cluster and the containers in

64
00:03:41,760 --> 00:03:44,650
that cluster to an external network.

65
00:03:44,650 --> 00:03:45,340
Next,

66
00:03:45,340 --> 00:03:48,670
SQL Server needs to be able to access external

67
00:03:48,670 --> 00:03:51,560
storage for its database operations.

68
00:03:51,560 --> 00:03:54,790
Containers are stateless, and that's great for applications,

69
00:03:54,790 --> 00:03:58,280
but not so great for stateful applications like SQL

70
00:03:58,280 --> 00:04:00,840
Server that need persistent data.

71
00:04:00,840 --> 00:04:04,970
The data always needs to be available if a container goes down so it

72
00:04:04,970 --> 00:04:08,170
needs to be stored external to the Kubernetes cluster.

73
00:04:08,170 --> 00:04:13,640
A Kubernetes persistent volume connects the cluster to external storage.

74
00:04:13,640 --> 00:04:17,960
A storage claim describes the storage and a persistent volume claim

75
00:04:17,960 --> 00:04:21,010
tells the cluster how to access that storage.

76
00:04:21,010 --> 00:04:23,640
There is a lot more to Kubernetes architecture,

77
00:04:23,640 --> 00:04:27,440
but these are some of the most important concepts to know for understanding SQL

78
00:04:27,440 --> 00:04:36,000
Server availability with Kubernetes. We'll cover more details about the Kubernetes architecture and components in the next module.

