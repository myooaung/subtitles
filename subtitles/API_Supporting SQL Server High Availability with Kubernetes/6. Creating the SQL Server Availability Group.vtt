WEBVTT
1
00:00:00.440 --> 00:00:03.730
Now, let's jump into the details of creating a SQL Server

2
00:00:03.730 --> 00:00:07.330
availability group. I'll warn you up front, this is another

3
00:00:07.330 --> 00:00:12.200
fairly code‑heavy section; however, while the last one focused on Kubernetes,

4
00:00:12.200 --> 00:00:17.720
this one focuses really on SQL Server, and all this code is T‑SQL code.

5
00:00:17.720 --> 00:00:18.430
First,

6
00:00:18.430 --> 00:00:22.840
we're going to see how to create the primary replica for the availability group.

7
00:00:22.840 --> 00:00:25.620
We'll start off by creating a test database for us to

8
00:00:25.620 --> 00:00:27.740
use with the availability group.

9
00:00:27.740 --> 00:00:31.220
Then, we'll create a master key and a certificate.

10
00:00:31.220 --> 00:00:35.420
Since the different replica in this availability group aren't part of a cluster,

11
00:00:35.420 --> 00:00:38.610
we need a way to authenticate between the different replicas,

12
00:00:38.610 --> 00:00:42.410
and the certificate provides that. Next, we'll create

13
00:00:42.410 --> 00:00:44.820
an endpoint on the primary replica.

14
00:00:44.820 --> 00:00:47.360
The endpoints are used for communication between the

15
00:00:47.360 --> 00:00:50.240
different replicas in the availability group.

16
00:00:50.240 --> 00:00:52.180
After the endpoints have been created,

17
00:00:52.180 --> 00:00:56.980
you'll see how to create the actual availability group and add the primary

18
00:00:56.980 --> 00:01:00.940
replica and that test database to our availability group.

19
00:01:00.940 --> 00:01:04.610
Next, we're going to go ahead and create the two secondary replicas.

20
00:01:04.610 --> 00:01:08.320
First, we're going to create a master key on the secondary replicas,

21
00:01:08.320 --> 00:01:10.770
and then we're going to restore that certificate that we

22
00:01:10.770 --> 00:01:13.640
created on the primary to each of those replicas,

23
00:01:13.640 --> 00:01:17.140
and that's how those wrote nodes are going to authenticate.

24
00:01:17.140 --> 00:01:21.830
Then, we'll see how to create the endpoints on the secondary replicas.

25
00:01:21.830 --> 00:01:22.300
Finally,

26
00:01:22.300 --> 00:01:27.540
we'll see how to join those secondary replicas to the availability group.

27
00:01:27.540 --> 00:01:33.530
Now, let's dive into the T‑SQL code that's going to create the primary replica.

28
00:01:33.530 --> 00:01:37.140
This T‑SQL script is run on the primary replica.

29
00:01:37.140 --> 00:01:39.880
The first thing that we'll do is create a sample database

30
00:01:39.880 --> 00:01:41.930
to use with our availability group.

31
00:01:41.930 --> 00:01:42.660
Remember,

32
00:01:42.660 --> 00:01:48.090
availability groups were designed to improve availability at the database level,

33
00:01:48.090 --> 00:01:49.340
not the server level.

34
00:01:49.340 --> 00:01:52.750
So you need to add databases to those availability groups.

35
00:01:52.750 --> 00:01:57.340
Here, our test database is named DevTestAG.

36
00:01:57.340 --> 00:02:02.090
We'll go ahead and load a few rows into that database as well. Next,

37
00:02:02.090 --> 00:02:05.790
before the database can be added to the availability group,

38
00:02:05.790 --> 00:02:08.920
it has to have a full backup, and the recovery mode of

39
00:02:08.920 --> 00:02:11.720
that database needs to be set to full,

40
00:02:11.720 --> 00:02:16.540
and that means that SQL Server is going to log transactions for the database.

41
00:02:16.540 --> 00:02:21.590
The ALTER DATABASE command is used to set the database recovery level to full,

42
00:02:21.590 --> 00:02:27.440
while the BACKUP DATABASE command creates a backup of our DevTestAG database.

43
00:02:27.440 --> 00:02:31.940
Here, you can see where we're creating a master key and a certificate.

44
00:02:31.940 --> 00:02:35.380
The database master key is a symmetric key used to protect

45
00:02:35.380 --> 00:02:38.870
the private keys of certificates and asymmetric keys that

46
00:02:38.870 --> 00:02:40.740
are present in the database.

47
00:02:40.740 --> 00:02:46.720
The master key is encrypted using AES 256 and a user‑supplied

48
00:02:46.720 --> 00:02:51.730
password. First, the CREATE MASTER KEY statement is used to create

49
00:02:51.730 --> 00:02:54.600
a master key and assign it a password.

50
00:02:54.600 --> 00:02:58.590
Then, the CREATE CERTIFICATE command is used to create a

51
00:02:58.590 --> 00:03:01.480
certificate called ag_certificate,

52
00:03:01.480 --> 00:03:03.610
and this certificate is going to be used by our

53
00:03:03.610 --> 00:03:06.410
availability group for authentication.

54
00:03:06.410 --> 00:03:07.150
Next,

55
00:03:07.150 --> 00:03:13.040
that certificate is backed up to the file system to our /var/opt/mssql server

56
00:03:13.040 --> 00:03:16.110
directory, and that's the default directory for SQL Server.

57
00:03:16.110 --> 00:03:18.330
This is present on all of the replicas.

58
00:03:18.330 --> 00:03:21.660
A password is designed to encrypt the certificate.

59
00:03:21.660 --> 00:03:25.360
That password can later be used on the secondaries to unencrypt

60
00:03:25.360 --> 00:03:28.840
the certificate when we go to add it to them.

61
00:03:28.840 --> 00:03:31.540
After creating the master key and certificate,

62
00:03:31.540 --> 00:03:35.380
the next step is to go ahead and create an endpoint that the availability

63
00:03:35.380 --> 00:03:39.840
group can use for the replicas to communicate. Here, the CREATE ENDPOINT

64
00:03:39.840 --> 00:03:43.750
command is used to create an endpoint named AG_endpoint.

65
00:03:43.750 --> 00:03:49.160
And that endpoint is going to use port 5022, which is the default port

66
00:03:49.160 --> 00:03:53.420
for SQL Server endpoints. At the bottom of the screen, you can see where

67
00:03:53.420 --> 00:03:56.850
the script specifies that the endpoint is going to be used for data

68
00:03:56.850 --> 00:04:00.920
mirroring and that it's going to use the ag_certificate that we just

69
00:04:00.920 --> 00:04:03.340
created for authentication.

70
00:04:03.340 --> 00:04:03.850
Next,

71
00:04:03.850 --> 00:04:06.230
we're going to go ahead and create the availability

72
00:04:06.230 --> 00:04:08.620
group. At the top of the screen,

73
00:04:08.620 --> 00:04:11.830
you can see the CREATE AVAILABILITY GROUP command. Here,

74
00:04:11.830 --> 00:04:17.590
the availability group is named K8sAG, and the CLUSTER_TYPE is set to NONE.

75
00:04:17.590 --> 00:04:21.230
You can also see where the primary replica is created.

76
00:04:21.230 --> 00:04:26.740
The endpoint is set to the primary replica name, along with port 5022.

77
00:04:26.740 --> 00:04:30.240
The replica is going to be capable of synchronous replication,

78
00:04:30.240 --> 00:04:32.950
and the SEEDING_MODE is going to be AUTOMATIC.

79
00:04:32.950 --> 00:04:36.810
Like you'd expect, the AVAILABILITY_MODE controls what type of

80
00:04:36.810 --> 00:04:40.480
replication will happen with the secondary replicas, and the

81
00:04:40.480 --> 00:04:44.980
SEEDING_MODE, it controls how the availability group's databases will

82
00:04:44.980 --> 00:04:48.990
be initially transferred to the secondary replicas. You can transfer

83
00:04:48.990 --> 00:04:53.710
the databases manually by just performing a backup and restore, or you

84
00:04:53.710 --> 00:04:55.230
can use automatic seeding,

85
00:04:55.230 --> 00:04:58.180
which allows the availability group itself to make

86
00:04:58.180 --> 00:05:00.330
the initial copy of the database.

87
00:05:00.330 --> 00:05:02.740
Since our test database is quite small,

88
00:05:02.740 --> 00:05:06.670
I went ahead with automatic seeding. For large databases,

89
00:05:06.670 --> 00:05:09.240
however, this can take some time.

90
00:05:09.240 --> 00:05:10.840
At the bottom of the screen,

91
00:05:10.840 --> 00:05:13.250
you can see the part of the T‑SQL script that

92
00:05:13.250 --> 00:05:15.790
defines the first secondary replica.

93
00:05:15.790 --> 00:05:20.170
The ENDPOINT_URL specifies the SQL Server instance name, along with

94
00:05:20.170 --> 00:05:23.360
the port that's going to be used. Here, you can see that it's going

95
00:05:23.360 --> 00:05:28.880
to be mssql‑secondary1 with the default port of 5022, and the

96
00:05:28.880 --> 00:05:32.330
replica is going to use synchronous replication, and the

97
00:05:32.330 --> 00:05:34.460
SEEDING_MODE is AUTOMATIC.

98
00:05:34.460 --> 00:05:38.700
The T‑SQL script that we run on the primary replica continues along

99
00:05:38.700 --> 00:05:41.500
with the creation of the next secondary replica.

100
00:05:41.500 --> 00:05:46.680
You can see here the name is mssql‑secondary2, and that it's using the same

101
00:05:46.680 --> 00:05:52.710
endpoint of 5022, and also that the SEEDING_MODE is AUTOMATIC just like the

102
00:05:52.710 --> 00:05:59.290
other secondary replica. The script ends by adding the test database, DevTestAG,

103
00:05:59.290 --> 00:06:04.440
to our availability group that was named K8sAG,

104
00:06:04.440 --> 00:06:07.460
and that's the end of the script on the primary.

105
00:06:07.460 --> 00:06:08.460
Next,

106
00:06:08.460 --> 00:06:14.130
we're going to see how to use kubectl copy, or kubectl cp, to copy the

107
00:06:14.130 --> 00:06:19.230
certificate from the primary replica to the two secondary replicas.

108
00:06:19.230 --> 00:06:20.070
Remember,

109
00:06:20.070 --> 00:06:24.500
the certificate is required to authenticate between the replicas. At the top,

110
00:06:24.500 --> 00:06:29.040
you can see where we retrieve the pod names for the primary replica and then

111
00:06:29.040 --> 00:06:31.710
the pod names for the two secondary replicas.

112
00:06:31.710 --> 00:06:37.220
Next, kubectl doesn't support automatically copying directly from pod to pod.

113
00:06:37.220 --> 00:06:37.790
So first,

114
00:06:37.790 --> 00:06:42.130
I needed to use kubectl cp to copy the certificate in the key

115
00:06:42.130 --> 00:06:47.020
file from the primary replica to my local Ubuntu system where

116
00:06:47.020 --> 00:06:49.640
I've been running these kubectl commands.

117
00:06:49.640 --> 00:06:50.150
Next,

118
00:06:50.150 --> 00:06:53.110
I copied the certificate and key to the first secondary

119
00:06:53.110 --> 00:06:57.280
replica and then to the next secondary replica.

120
00:06:57.280 --> 00:07:02.510
In each case, I put the copied files into the /var/opt/mssql directory.

121
00:07:02.510 --> 00:07:05.410
Once the certificates have been copied into the secondary

122
00:07:05.410 --> 00:07:09.520
replicas, we can run the T‑SQL scripts on those secondary

123
00:07:09.520 --> 00:07:12.540
replicas to add them to our availability group.

124
00:07:12.540 --> 00:07:16.870
Here's the script that we want to run on each secondary replica. The scripts

125
00:07:16.870 --> 00:07:20.850
that we need to run on the secondary replicas are identical, so we're

126
00:07:20.850 --> 00:07:23.950
basically running the same script on both secondaries.

127
00:07:23.950 --> 00:07:27.720
At the top, we create a login for our availability group.

128
00:07:27.720 --> 00:07:28.500
Then in the middle,

129
00:07:28.500 --> 00:07:32.940
you can see where we create the master key for the secondary replica.

130
00:07:32.940 --> 00:07:36.920
After that, we restore the certificate that we previously copied.

131
00:07:36.920 --> 00:07:41.400
Remember that certificate was located in the /var/opt/mssql directory.

132
00:07:41.400 --> 00:07:45.440
The decryption password that we use here has to match that password that we

133
00:07:45.440 --> 00:07:49.940
assigned earlier when we ran that script on the primary. Here you can see

134
00:07:49.940 --> 00:07:53.480
the continuation of the T‑SQL script that will be running on the secondary

135
00:07:53.480 --> 00:07:57.460
replicas. At the top, you can see where the endpoint is created using the

136
00:07:57.460 --> 00:07:59.040
CREATE ENDPOINT command.

137
00:07:59.040 --> 00:08:03.360
Here again, we're using the default port of 5022.

138
00:08:03.360 --> 00:08:07.390
The AUTHENTICATION for the endpoint is set to CERTIFICATE, and that's

139
00:08:07.390 --> 00:08:09.850
the certificate that we copied to that secondary.

140
00:08:09.850 --> 00:08:15.790
And then access to that endpoint is granted to the login that we created. Near

141
00:08:15.790 --> 00:08:21.910
the bottom, the ALTER AVAILABILITY GROUP command is used to join this replica

142
00:08:21.910 --> 00:08:27.660
to the availability group that we created that was named K8sAG. CLUSTER_TYPE =

143
00:08:27.660 --> 00:08:31.940
NONE indicates that no cluster is being used. The GRANT CREATE ANY DATABASE

144
00:08:31.940 --> 00:08:37.090
statement enables the availability group to create databases on behalf of the

145
00:08:37.090 --> 00:08:38.680
primary replica.

146
00:08:38.680 --> 00:08:41.760
This is what allows automatic seeding to create that

147
00:08:41.760 --> 00:08:46.440
DevTestAG database on each of the secondaries.

148
00:08:46.440 --> 00:08:49.980
After the availability group has been created on Kubernetes,

149
00:08:49.980 --> 00:08:54.050
you can manage it using any of the standard SQL Server management tools

150
00:08:54.050 --> 00:08:57.040
that you would just like any other availability group.

151
00:08:57.040 --> 00:08:57.630
However,

152
00:08:57.630 --> 00:09:01.090
Azure Data Studio, that's the cross‑platform tool that we use to

153
00:09:01.090 --> 00:09:04.690
run most of these configuration scripts, it does not support

154
00:09:04.690 --> 00:09:08.450
managing availability groups. The standard SQL Server management

155
00:09:08.450 --> 00:09:12.440
tool, SQL Server Management Studio, it does support the management

156
00:09:12.440 --> 00:09:13.940
of availability groups.

157
00:09:13.940 --> 00:09:14.970
In this slide,

158
00:09:14.970 --> 00:09:20.390
you can see the K8sAG availability group running with

159
00:09:20.390 --> 00:09:22.630
all of its replicas synchronized,

160
00:09:22.630 --> 00:09:31.000
and we connected to that with SQL Server Management Studio, just like we would any other availability group.

