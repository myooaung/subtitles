1
00:00:01,640 --> 00:00:04,370
So now, we're going to launch into a few demos.

2
00:00:04,370 --> 00:00:08,670
We're going to look at the Visual Studio Code extension for Kubernetes.

3
00:00:08,670 --> 00:00:08,950
Then,

4
00:00:08,950 --> 00:00:11,810
we're going to look at a number of examples where we can get some

5
00:00:11,810 --> 00:00:14,710
important troubleshooting information using kubectl.

6
00:00:14,710 --> 00:00:20,080
We're going to look at retrieving logs and events for our Kubernetes objects.

7
00:00:20,080 --> 00:00:24,410
Then, we're going to look at deleting and recreating Kubernetes objects.

8
00:00:24,410 --> 00:00:24,900
Finally,

9
00:00:24,900 --> 00:00:27,750
you're going to see how you can retrieve Kubernetes secrets

10
00:00:27,750 --> 00:00:30,640
in case you've forgotten what they were.

11
00:00:30,640 --> 00:00:31,520
So first,

12
00:00:31,520 --> 00:00:36,040
let's have a quick look at the Kubernetes extension for Visual Studio Code.

13
00:00:36,040 --> 00:00:39,930
If we open up the Kubernetes icon here that you see on the left,

14
00:00:39,930 --> 00:00:43,860
you can see there are a number of different areas that we can look at.

15
00:00:43,860 --> 00:00:48,640
At the top of the screen, you can see that there's clusters,

16
00:00:48,640 --> 00:00:52,640
there's HELM REPOS and CLOUDS at the bottom.

17
00:00:52,640 --> 00:00:54,040
At the top of the example,

18
00:00:54,040 --> 00:00:57,870
you can see the SQLAG cluster that I've used for the

19
00:00:57,870 --> 00:01:00,780
earlier availability groups example.

20
00:01:00,780 --> 00:01:03,680
We can use this to navigate through the deployment.

21
00:01:03,680 --> 00:01:07,090
We can expand the nodes.

22
00:01:07,090 --> 00:01:10,210
We can do the same thing with workloads and deployments,

23
00:01:10,210 --> 00:01:13,250
and you can see the different deployments that are available there.

24
00:01:13,250 --> 00:01:20,840
We can do the same thing with services and pods that you can see here.

25
00:01:20,840 --> 00:01:23,170
If you look on the right side of the screen,

26
00:01:23,170 --> 00:01:26,740
you can see what this does for YAML editing.

27
00:01:26,740 --> 00:01:28,420
If you look into the editing window,

28
00:01:28,420 --> 00:01:30,920
you might notice some various lines that track the

29
00:01:30,920 --> 00:01:32,960
indentation of different objects.

30
00:01:32,960 --> 00:01:35,970
This can be pretty helpful if you're editing YAML because

31
00:01:35,970 --> 00:01:39,000
YAML is very sensitive to indentation.

32
00:01:39,000 --> 00:01:43,010
You might also notice the display uses color‑coded syntax

33
00:01:43,010 --> 00:01:46,540
for the YAML keywords and their values.

34
00:01:46,540 --> 00:01:51,430
And if we move our cursor through and hover over different sections,

35
00:01:51,430 --> 00:01:54,850
it gives us an explanation of the various different

36
00:01:54,850 --> 00:01:56,770
objects that we're seeing on the screen.

37
00:01:56,770 --> 00:02:01,020
And it tells us what kinds of objects they are and

38
00:02:01,020 --> 00:02:04,940
gives us a brief explanation of them, so this can be pretty helpful.

39
00:02:04,940 --> 00:02:09,190
If there are any errors, they would be highlighted with a yellow line.

40
00:02:09,190 --> 00:02:14,840
So now, let's go ahead and run some of our kubectl examples.

41
00:02:14,840 --> 00:02:18,840
Let's look into using kubectl to get some important troubleshooting

42
00:02:18,840 --> 00:02:21,560
information from our different Kubernetes objects.

43
00:02:21,560 --> 00:02:23,520
First, here,

44
00:02:23,520 --> 00:02:28,300
kubectl get all is a quick way to see an overview of your deployment,

45
00:02:28,300 --> 00:02:30,530
so let's quickly run that.

46
00:02:30,530 --> 00:02:36,890
At the top, you can see a list of the different pods and their statuses,

47
00:02:36,890 --> 00:02:41,750
and next, you can see the services along with their IP addresses and ports.

48
00:02:41,750 --> 00:02:46,790
If we scroll down, you can see the deployments and the apps.

49
00:02:46,790 --> 00:02:51,260
And finally, at the bottom, you can see the status of the different replica sets.

50
00:02:51,260 --> 00:02:51,850
Next,

51
00:02:51,850 --> 00:02:54,970
if you want to check on the resource utilization of

52
00:02:54,970 --> 00:02:56,540
the different Kubernetes objects,

53
00:02:56,540 --> 00:03:00,600
you can use the kubectl top command like you can see here.

54
00:03:00,600 --> 00:03:06,000
Here, at the top, you can see kubectl top node and kubectl top pod.

55
00:03:06,000 --> 00:03:10,640
If we run these commands, you can see a summary at the bottom.

56
00:03:10,640 --> 00:03:14,630
And here you can see the CPU utilization,

57
00:03:14,630 --> 00:03:18,860
the millicores that are being used, the percentage of CPU,

58
00:03:18,860 --> 00:03:21,730
along with the total memory and memory percentage

59
00:03:21,730 --> 00:03:23,700
for each of the different objects.

60
00:03:23,700 --> 00:03:27,990
At the top, you are seeing the nodes, and at the bottom, you're seeing the pods.

61
00:03:27,990 --> 00:03:30,740
If we want to get the networking information,

62
00:03:30,740 --> 00:03:35,850
we can use the kubectl get services command like you can see here.

63
00:03:35,850 --> 00:03:38,220
We covered this in earlier examples,

64
00:03:38,220 --> 00:03:41,870
so we're not going to spend a whole lot of time with this.

65
00:03:41,870 --> 00:03:46,540
The important points here are that if we run this command,

66
00:03:46,540 --> 00:03:52,940
you can see how it's retrieving the IP addresses and the ports that are used.

67
00:03:52,940 --> 00:03:53,510
Next,

68
00:03:53,510 --> 00:03:59,010
it's possible to retrieve the YAML for the different Kubernetes objects

69
00:03:59,010 --> 00:04:01,790
that we're using by using the kubectl get command,

70
00:04:01,790 --> 00:04:05,530
along with the ‑o yaml parameter.

71
00:04:05,530 --> 00:04:08,890
So let's go ahead and run that quickly.

72
00:04:08,890 --> 00:04:18,400
And here, you can see its output, and it's pretty lengthy.

73
00:04:18,400 --> 00:04:18,720
Well,

74
00:04:18,720 --> 00:04:22,040
you can see the output here is a bit more verbose than the YAML

75
00:04:22,040 --> 00:04:24,770
that we would use to create these objects.

76
00:04:24,770 --> 00:04:30,360
If we scroll through it, you can find some pretty familiar parts.

77
00:04:30,360 --> 00:04:31,390
Like, for instance,

78
00:04:31,390 --> 00:04:34,810
we can see the specs where you can see the important

79
00:04:34,810 --> 00:04:37,240
definition of the environment variables,

80
00:04:37,240 --> 00:04:45,040
the image, along with whatever volumes are used and the limits that pod is using.

81
00:04:45,040 --> 00:04:49,040
And now let's move along to describing the deployments.

82
00:04:49,040 --> 00:04:52,600
The kubectl describe deployments command gives you detailed

83
00:04:52,600 --> 00:04:54,950
information about one or more deployments.

84
00:04:54,950 --> 00:04:59,190
So let's go ahead and quickly run this.

85
00:04:59,190 --> 00:05:05,060
And here we can see, if we scroll back, again,

86
00:05:05,060 --> 00:05:10,080
this gives you quite a bit of information about the deployment.

87
00:05:10,080 --> 00:05:14,990
At the top, you can see the deployment name.

88
00:05:14,990 --> 00:05:19,740
If we scroll down, you can see the the app labels,

89
00:05:19,740 --> 00:05:23,740
along with the image and the memory limits that are being used.

90
00:05:23,740 --> 00:05:25,650
If we continue to scroll,

91
00:05:25,650 --> 00:05:30,280
we can see the environment variables and volume mounts that are being used.

92
00:05:30,280 --> 00:05:34,140
And finally, if we keep going down, we can see whatever events,

93
00:05:34,140 --> 00:05:37,040
if there are any, that are present.

94
00:05:37,040 --> 00:05:40,700
In this example, remember, we have three deployments.

95
00:05:40,700 --> 00:05:46,570
So first was our mssql‑primary, and here's our secondary1‑deployment,

96
00:05:46,570 --> 00:05:51,640
and if we continue scrolling, there's our secondary2‑deployment.

97
00:05:51,640 --> 00:05:58,250
Next, let's look at retrieving the logs for the different apps that are running.

98
00:05:58,250 --> 00:05:59,980
At the top of this example,

99
00:05:59,980 --> 00:06:03,180
you can see how we're retrieving the logs for a pod

100
00:06:03,180 --> 00:06:06,710
using the app label of mssql‑primary.

101
00:06:06,710 --> 00:06:07,620
Below that,

102
00:06:07,620 --> 00:06:10,210
you can see how to retrieve the logs for a previous

103
00:06:10,210 --> 00:06:14,340
instance using that ‑p parameter.

104
00:06:14,340 --> 00:06:19,640
So let's go ahead and run this code.

105
00:06:19,640 --> 00:06:22,950
And if we expand our view, and at the top here,

106
00:06:22,950 --> 00:06:27,420
you can see we have a few login failure warnings for our current app,

107
00:06:27,420 --> 00:06:28,820
and if we scroll down,

108
00:06:28,820 --> 00:06:34,710
you can see there's a few messages about dump errors with the previous app.

109
00:06:34,710 --> 00:06:38,610
Now, let's go back and look at retrieving some events.

110
00:06:38,610 --> 00:06:42,140
This code shows you how you can use the kubectl get events

111
00:06:42,140 --> 00:06:44,620
command to return Kubernetes events.

112
00:06:44,620 --> 00:06:45,170
At the top,

113
00:06:45,170 --> 00:06:49,360
you can see how you can sort all of the different events by creation date.

114
00:06:49,360 --> 00:06:52,300
Remember, by default, they're sorted by resource.

115
00:06:52,300 --> 00:06:56,410
Below that, you can see how you can get the events for a type of resource,

116
00:06:56,410 --> 00:06:58,540
in this example, pods.

117
00:06:58,540 --> 00:07:04,120
So let's go ahead and run this, and we'll expand our view.

118
00:07:04,120 --> 00:07:05,370
At the bottom here,

119
00:07:05,370 --> 00:07:09,430
we can see the events for a pod where a pod was essentially terminated

120
00:07:09,430 --> 00:07:13,570
and then recreated where it was killed and scheduled.

121
00:07:13,570 --> 00:07:17,140
Then we pulled the image, created the pod, and started it.

122
00:07:17,140 --> 00:07:18,440
And if we scroll back,

123
00:07:18,440 --> 00:07:21,490
we can see similar things for a deployment where a

124
00:07:21,490 --> 00:07:24,960
load balancing service was deleted, and then scheduled,

125
00:07:24,960 --> 00:07:28,240
and then recreated along with a replica set.

126
00:07:28,240 --> 00:07:36,310
Next, we can see how we can delete and recreate deployments using kubectl delete.

127
00:07:36,310 --> 00:07:37,640
So let's scroll up,

128
00:07:37,640 --> 00:07:42,230
and there's kubectl delete where we're passing in the definition,

129
00:07:42,230 --> 00:07:44,860
our YAML file definition, for a deployment.

130
00:07:44,860 --> 00:07:48,670
And after that, we're going to go ahead and get the deployments,

131
00:07:48,670 --> 00:07:51,280
then pause, and then after our pause,

132
00:07:51,280 --> 00:07:59,340
we will recreate it and show you what's happening here.

133
00:07:59,340 --> 00:08:04,340
So first, this deletes the deployment, and that takes just a few seconds.

134
00:08:04,340 --> 00:08:06,980
And then, after the deployment is deleted,

135
00:08:06,980 --> 00:08:11,440
we'll see the output of the kubectl get deployments command.

136
00:08:11,440 --> 00:08:15,390
At this point, you'll notice there's only going to be two deployments,

137
00:08:15,390 --> 00:08:18,850
one for our primary and one for our secondary,

138
00:08:18,850 --> 00:08:24,500
our first secondary, because we've gone ahead and deleted the deployment,

139
00:08:24,500 --> 00:08:29,640
which was defined with sqlAGS2deployment.yaml.

140
00:08:29,640 --> 00:08:34,530
And here you can see our two deployments, and there's our pause.

141
00:08:34,530 --> 00:08:37,640
And now, after we press Enter,

142
00:08:37,640 --> 00:08:41,100
it's going to go ahead and recreate the deployment,

143
00:08:41,100 --> 00:08:45,170
and then we're going to run kubectl get deployments again,

144
00:08:45,170 --> 00:08:49,100
and you can see our new deployment being created at the bottom.

145
00:08:49,100 --> 00:08:53,740
Finally, if you have trouble with your SQL Server passwords,

146
00:08:53,740 --> 00:08:58,100
it's possible to retrieve the value of your Kubernetes secrets by using

147
00:08:58,100 --> 00:09:03,990
the kubectl get secrets command and then filtering the output for the

148
00:09:03,990 --> 00:09:09,390
SA_PASSWORD key and passing those results and decoding it using Base64

149
00:09:09,390 --> 00:09:13,820
like you can see at the top of this screen.

150
00:09:13,820 --> 00:09:17,740
So let's go ahead and retrieve our secret.

151
00:09:17,740 --> 00:09:20,790
And there you can see that we've successfully retrieved

152
00:09:20,790 --> 00:09:22,380
the password that we've been using.

153
00:09:22,380 --> 00:09:29,000
So, if you've perhaps forgotten your password, this can help you see that you're using the correct one.

