1
00:00:00,940 --> 00:00:04,510
Elastic Beanstalk is an application service that makes it easy to

2
00:00:04,510 --> 00:00:08,900
run your code and scale it on AWS. Under the covers, it's simply

3
00:00:08,900 --> 00:00:11,550
running your code on EC2 instances,

4
00:00:11,550 --> 00:00:16,240
but it takes the typical use case of running an application and adds a lot

5
00:00:16,240 --> 00:00:20,440
of conveniences that make AWS much easier to work with.

6
00:00:20,440 --> 00:00:23,750
There are a few ways you can deploy an application on EC2

7
00:00:23,750 --> 00:00:27,640
instances in AWS without Elastic Beanstalk.

8
00:00:27,640 --> 00:00:30,700
The manual process involves a lot of configuration,

9
00:00:30,700 --> 00:00:34,140
custom installation, and navigating the command line.

10
00:00:34,140 --> 00:00:39,110
Any manual installation would need to solve for scaling by creating AMIs or

11
00:00:39,110 --> 00:00:43,460
utilizing CloudFormation or other recipe scripting tools.

12
00:00:43,460 --> 00:00:46,590
Monitoring of the application would also be tricky,

13
00:00:46,590 --> 00:00:51,390
possibly utilizing third‑party services or creating custom CloudWatch rules.

14
00:00:51,390 --> 00:00:54,110
And there are plenty more things that you would want to set

15
00:00:54,110 --> 00:00:56,650
up when deploying your application on EC2.

16
00:00:56,650 --> 00:00:59,760
Sounds like a long list of stuff to do, right?

17
00:00:59,760 --> 00:01:03,260
I'm not trying to make it sound bad to scare you away from EC2,

18
00:01:03,260 --> 00:01:07,930
but rather to showcase what Elastic Beanstalk is taking care of for you.

19
00:01:07,930 --> 00:01:13,020
All the scenarios I just listed are automatically managed by Elastic Beanstalk.

20
00:01:13,020 --> 00:01:17,540
Deploying your code with Elastic Beanstalk can take place from the web console,

21
00:01:17,540 --> 00:01:21,350
through the AWS command line tool, or through the SDK.

22
00:01:21,350 --> 00:01:25,180
The configuration of rules for scaling are set up once for a

23
00:01:25,180 --> 00:01:28,130
given application environment and are then set,

24
00:01:28,130 --> 00:01:30,970
letting you deploy your application as you make changes

25
00:01:30,970 --> 00:01:33,620
without any additional tweaking required.

26
00:01:33,620 --> 00:01:34,230
In addition,

27
00:01:34,230 --> 00:01:38,550
Elastic Beanstalk lets you easily monitor and collect logs for your application,

28
00:01:38,550 --> 00:01:43,140
even when it's deployed on multiple EC2 instances.

29
00:01:43,140 --> 00:01:47,680
The main abstract structure in Elastic Beanstalk is an application.

30
00:01:47,680 --> 00:01:52,580
This is the root‑level organization, be it your web application or web service.

31
00:01:52,580 --> 00:01:55,520
An application will need a unique name to

32
00:01:55,520 --> 00:01:57,880
differentiate it from other applications.

33
00:01:57,880 --> 00:02:02,410
Inside each application can be many application versions.

34
00:02:02,410 --> 00:02:04,580
This is the actual code that will run your

35
00:02:04,580 --> 00:02:07,010
application with many different revisions.

36
00:02:07,010 --> 00:02:10,660
With this code, which is just an application version,

37
00:02:10,660 --> 00:02:13,640
you can deploy it to an environment.

38
00:02:13,640 --> 00:02:19,940
An environment is the rules and configuration that manage actual EC2 instances.

39
00:02:19,940 --> 00:02:22,570
Each environment can run with a different platform,

40
00:02:22,570 --> 00:02:28,870
for instance Java or Node, and can be configured with certain EC2 instance types.

41
00:02:28,870 --> 00:02:32,740
Configuring each environment in Elastic Beanstalk is where you'll spend

42
00:02:32,740 --> 00:02:35,720
most of your time since you can set up the deployment,

43
00:02:35,720 --> 00:02:39,240
load balancing, and scaling rules there.

44
00:02:39,240 --> 00:02:40,570
Application versions,

45
00:02:40,570 --> 00:02:45,420
the different versions of your code, are stored in S3. Elastic Beanstalk

46
00:02:45,420 --> 00:02:48,510
gives you an easy‑to‑deploy screen listing them all,

47
00:02:48,510 --> 00:02:54,240
but the actual bits and files themselves are stored in an S3 bucket.

48
00:02:54,240 --> 00:02:57,550
There's also a limit to the number of application versions that one

49
00:02:57,550 --> 00:03:01,000
application can have, and the default is 1,000.

50
00:03:01,000 --> 00:03:03,200
Usually, if you ever hit this limit,

51
00:03:03,200 --> 00:03:06,240
you would just go and delete old, unneeded versions of the

52
00:03:06,240 --> 00:03:10,810
application. Monitoring is another one of the great things

53
00:03:10,810 --> 00:03:12,530
about Elastic Beanstalk.

54
00:03:12,530 --> 00:03:16,970
The options aren't as robust as a full monitoring suite, but the data

55
00:03:16,970 --> 00:03:20,440
is aggregated from all your application instances.

56
00:03:20,440 --> 00:03:23,530
This means that you're able to truly see how your application

57
00:03:23,530 --> 00:03:26,640
is doing and not just any single instance.

58
00:03:26,640 --> 00:03:32,640
You're able to see metrics such as CPU, number of requests, and network traffic.

59
00:03:32,640 --> 00:03:37,290
And if you see any of your metrics spike or freak out, Elastic Beanstalk

60
00:03:37,290 --> 00:03:41,340
also provides the functionality to easily pull the logs from all of your

61
00:03:41,340 --> 00:03:44,220
instances so you can figure out what's going on.

62
00:03:44,220 --> 00:03:47,500
This can get a little overwhelming if you have more than a handful of

63
00:03:47,500 --> 00:03:51,890
instances since you'd have to read through all of the logs, but it's still

64
00:03:51,890 --> 00:03:57,090
nice that AWS provides an easier option besides logging into each EC2

65
00:03:57,090 --> 00:04:00,540
instance and manually downloading the logs.

66
00:04:00,540 --> 00:04:04,290
Elastic Beanstalk is a free service from AWS.

67
00:04:04,290 --> 00:04:08,510
The only thing you'll pay for is the EC2 instances, load balancer,

68
00:04:08,510 --> 00:04:12,470
and S3 storage that is being used. Honestly,

69
00:04:12,470 --> 00:04:16,410
I think it makes Elastic Beanstalk almost irresistible to use since

70
00:04:16,410 --> 00:04:19,450
you be using those resources anyways if you were running an

71
00:04:19,450 --> 00:04:22,890
application in AWS. With this free resource,

72
00:04:22,890 --> 00:04:29,000
you're really just getting a more convenient and feature‑rich way to run your applications.

