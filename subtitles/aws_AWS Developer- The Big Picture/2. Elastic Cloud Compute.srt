1
00:00:01,040 --> 00:00:05,490
Elastic Cloud Compute was launched by Amazon around 2006 as the

2
00:00:05,490 --> 00:00:08,000
premier service to solve computing needs.

3
00:00:08,000 --> 00:00:10,840
It has since become the foundational building block

4
00:00:10,840 --> 00:00:13,530
for most applications utilizing AWS,

5
00:00:13,530 --> 00:00:16,940
as well as the basis for many other services.

6
00:00:16,940 --> 00:00:21,670
Amazon has added many features to EC2 over the years, expanding its usefulness.

7
00:00:21,670 --> 00:00:27,440
And today, it is a robust tool that fits an impressive number of use cases.

8
00:00:27,440 --> 00:00:30,320
So what can you do with EC2 instances?

9
00:00:30,320 --> 00:00:31,260
Well,

10
00:00:31,260 --> 00:00:34,000
the answer to that question is almost as nebulous as

11
00:00:34,000 --> 00:00:36,890
asking what you can do with a computer.

12
00:00:36,890 --> 00:00:39,950
In many ways, an instance is basically a computer.

13
00:00:39,950 --> 00:00:44,830
You can use it to run an application, be it a web application or local.

14
00:00:44,830 --> 00:00:49,340
You can log into the instance and use it like a remote virtual machine.

15
00:00:49,340 --> 00:00:52,940
EC2 instances can have very specific types of software

16
00:00:52,940 --> 00:00:55,890
installed on them to do all sorts of tasks,

17
00:00:55,890 --> 00:00:57,610
basically computing.

18
00:00:57,610 --> 00:01:03,070
I know that word can mean almost anything, but that's really what EC2 is about.

19
00:01:03,070 --> 00:01:06,520
It is an endlessly versatile resource that can be used

20
00:01:06,520 --> 00:01:09,040
for whatever you need to use it for.

21
00:01:09,040 --> 00:01:14,030
Now let's take a look at the technical specifics of EC2 and how it really works.

22
00:01:14,030 --> 00:01:15,060
First,

23
00:01:15,060 --> 00:01:18,740
let's break down the name Elastic Cloud Compute since it

24
00:01:18,740 --> 00:01:21,760
provides some insight into how the service works.

25
00:01:21,760 --> 00:01:25,740
Cloud compute should make sense based on the last module.

26
00:01:25,740 --> 00:01:29,550
EC2 is a service that can be used for computing purposes,

27
00:01:29,550 --> 00:01:33,480
like running an application, and it's located in the cloud,

28
00:01:33,480 --> 00:01:36,310
in other words not your closet.

29
00:01:36,310 --> 00:01:40,200
The elastic term in EC2 is much more interesting.

30
00:01:40,200 --> 00:01:45,710
Elastic means that the computing service can expand and retract as needed.

31
00:01:45,710 --> 00:01:49,240
I've mentioned this action before when we discussed scalability,

32
00:01:49,240 --> 00:01:53,250
but EC2 is very convenient in this respect due to the fact that

33
00:01:53,250 --> 00:01:58,280
rules can be set so the scaling up or down happens automatically

34
00:01:58,280 --> 00:02:01,240
without you having to do anything manually.

35
00:02:01,240 --> 00:02:04,540
We'll talk about this more with auto scaling groups.

36
00:02:04,540 --> 00:02:07,930
The basic building block in EC2 is an instance.

37
00:02:07,930 --> 00:02:12,990
An instance is essentially a virtual server which is operating system‑agnostic.

38
00:02:12,990 --> 00:02:17,080
To illustrate the different aspects of EC2 instances,

39
00:02:17,080 --> 00:02:21,550
I thought it might be simplest to just walk through the creation of an instance.

40
00:02:21,550 --> 00:02:24,610
There are several options that are configurable with each instance,

41
00:02:24,610 --> 00:02:27,040
and you'll need to make decisions with each of these

42
00:02:27,040 --> 00:02:30,140
whenever you create an instance with EC2.

43
00:02:30,140 --> 00:02:32,670
The first is the image for your instance.

44
00:02:32,670 --> 00:02:36,640
This is the fundamental code that will be running on an instance.

45
00:02:36,640 --> 00:02:39,190
This is not your application code.

46
00:02:39,190 --> 00:02:41,540
Let me give some examples to further explain.

47
00:02:41,540 --> 00:02:45,300
Here are the Amazon machine images currently available when you

48
00:02:45,300 --> 00:02:49,250
create a new EC2 instance through the web console.

49
00:02:49,250 --> 00:02:54,450
At the top is Amazon's own flavor of Linux followed by Red Hat Linux,

50
00:02:54,450 --> 00:02:57,050
SUSE Linux, and Ubuntu.

51
00:02:57,050 --> 00:02:59,260
Microsoft Windows is also available,

52
00:02:59,260 --> 00:03:02,140
and you can see that there are different versions of

53
00:03:02,140 --> 00:03:04,380
everything mentioned easily available.

54
00:03:04,380 --> 00:03:08,690
So you can see that an image is a combination of an operating

55
00:03:08,690 --> 00:03:12,110
system and then some applications preinstalled,

56
00:03:12,110 --> 00:03:18,240
typically things like Java or Python or the AWS CLI tools.

57
00:03:18,240 --> 00:03:23,680
Amazon provides, manages, and updates a selection of images that are available.

58
00:03:23,680 --> 00:03:27,190
Updates are important to patch security vulnerabilities that

59
00:03:27,190 --> 00:03:29,260
are found regularly throughout the year,

60
00:03:29,260 --> 00:03:33,100
and having Amazon and their knowledgeable security teams handling

61
00:03:33,100 --> 00:03:36,840
this responsibility provides good peace of mind.

62
00:03:36,840 --> 00:03:41,500
Just a caveat, however, once an instance is created with an image,

63
00:03:41,500 --> 00:03:45,140
Amazon won't be updating that instance's software.

64
00:03:45,140 --> 00:03:47,620
They just update the available image.

65
00:03:47,620 --> 00:03:50,790
If you need to update your instance for security patches,

66
00:03:50,790 --> 00:03:54,940
you'll need to either manually make the updates or create a new

67
00:03:54,940 --> 00:03:57,510
instance and migrate any application code.

68
00:03:57,510 --> 00:04:00,850
The Amazon‑provided images are just the beginning.

69
00:04:00,850 --> 00:04:05,030
There's also an AWS Marketplace that gives anyone the ability to

70
00:04:05,030 --> 00:04:08,100
provide images that you can install easily.

71
00:04:08,100 --> 00:04:11,660
Some images are full applications provided by vendors

72
00:04:11,660 --> 00:04:13,740
that you can use off the shelf.

73
00:04:13,740 --> 00:04:18,260
Some examples are enterprise firewalls, security applications,

74
00:04:18,260 --> 00:04:20,620
and content management systems.

75
00:04:20,620 --> 00:04:23,940
There's even a subscription model in place for images that vendors

76
00:04:23,940 --> 00:04:27,040
can utilize to charge users of their software.

77
00:04:27,040 --> 00:04:30,420
The community can also upload images for open source software,

78
00:04:30,420 --> 00:04:34,150
such as MongoDB or the MEAN stack.

79
00:04:34,150 --> 00:04:36,790
When using some type of open source image,

80
00:04:36,790 --> 00:04:40,360
you'll only need to pay for the hardware that the image is running on.

81
00:04:40,360 --> 00:04:42,880
Once you've selected an image for your instance,

82
00:04:42,880 --> 00:04:46,110
the next decision is to select the instance type.

83
00:04:46,110 --> 00:04:48,690
This is essentially the specs for your instance,

84
00:04:48,690 --> 00:04:53,790
the number of CPUs, the amount of RAM, and the network performance.

85
00:04:53,790 --> 00:04:59,440
With these three options, Amazon has created instance types and families.

86
00:04:59,440 --> 00:05:02,370
Families provide an easy profile to help decide the

87
00:05:02,370 --> 00:05:04,360
right type for your use case.

88
00:05:04,360 --> 00:05:07,710
Running a file server? An instance from the storage

89
00:05:07,710 --> 00:05:09,640
optimized family might be best.

90
00:05:09,640 --> 00:05:11,430
Doing some machine learning?

91
00:05:11,430 --> 00:05:14,120
The compute optimized family might be your best choice.

92
00:05:14,120 --> 00:05:20,440
Within each family, there are types like small, medium large, extra large, etc.

93
00:05:20,440 --> 00:05:23,020
To give you a concrete example of what I'm describing,

94
00:05:23,020 --> 00:05:27,070
let's compare the large instances and the general purpose,

95
00:05:27,070 --> 00:05:30,940
memory optimized, and compute optimized families.

96
00:05:30,940 --> 00:05:34,540
The general purpose large instance provides a balance of CPU,

97
00:05:34,540 --> 00:05:36,700
memory, and network performance.

98
00:05:36,700 --> 00:05:39,340
We can use it as a control group here.

99
00:05:39,340 --> 00:05:42,390
The memory optimized large instance has the same number of

100
00:05:42,390 --> 00:05:47,600
CPUs as the general purpose instance, but twice the memory. On the other hand,

101
00:05:47,600 --> 00:05:51,320
the compute optimized instance provides the same number of CPUs

102
00:05:51,320 --> 00:05:54,640
as the general, but cuts the memory in half.

103
00:05:54,640 --> 00:05:58,880
You might think that makes compute optimized the lesser of these, but with a

104
00:05:58,880 --> 00:06:03,420
difference in features comes a difference in price. And the compute optimized

105
00:06:03,420 --> 00:06:06,440
family instances are the cheapest of them all.

106
00:06:06,440 --> 00:06:07,360
As you can imagine,

107
00:06:07,360 --> 00:06:11,980
increasing the type from large to extra large or down to medium will give

108
00:06:11,980 --> 00:06:15,700
you more or less of each feature at an equivalent ratio.

109
00:06:15,700 --> 00:06:19,550
It's important to consider the best instance type for your application.

110
00:06:19,550 --> 00:06:22,280
It can not only help your application perform better,

111
00:06:22,280 --> 00:06:25,040
but it can also save you a lot of money.

112
00:06:25,040 --> 00:06:27,920
Once the image and instance type have been decided,

113
00:06:27,920 --> 00:06:31,250
you're provided with a page of instance details that relate to

114
00:06:31,250 --> 00:06:34,730
security roles and further fine‑grain configuration.

115
00:06:34,730 --> 00:06:38,550
Although many of these are important, we'll just talk about the Number of

116
00:06:38,550 --> 00:06:42,790
instances field. This is a place that you can assign a certain number of

117
00:06:42,790 --> 00:06:48,400
instances to replicate with this same image and type. AWS will create an

118
00:06:48,400 --> 00:06:52,640
auto scaling group that will increase or decrease the number of instances

119
00:06:52,640 --> 00:06:57,260
according to rules that you set yourself. Once the auto scaling group has

120
00:06:57,260 --> 00:06:58,160
been created,

121
00:06:58,160 --> 00:07:02,790
you can modify it further. If you're working with a third‑party image or one

122
00:07:02,790 --> 00:07:06,590
you made yourself, this is the perfect way to set up scaling.

123
00:07:06,590 --> 00:07:09,880
If you're curious about how to have an application that you've installed

124
00:07:09,880 --> 00:07:13,870
on an instance configured to auto scale, this is actually easiest to

125
00:07:13,870 --> 00:07:18,170
accomplish with the application service Elastic Beanstalk, and there'll

126
00:07:18,170 --> 00:07:20,640
be more on that in the next module.

127
00:07:20,640 --> 00:07:23,920
The next step is to add storage. Storage is

128
00:07:23,920 --> 00:07:27,870
conceptualized by the term Elastic Block Storage.

129
00:07:27,870 --> 00:07:31,290
This is essentially a storage service that makes it easy to

130
00:07:31,290 --> 00:07:34,530
reason about and calculate charges for storage.

131
00:07:34,530 --> 00:07:39,030
These volumes live independently from your EC2 instances and can be

132
00:07:39,030 --> 00:07:43,040
retained or deleted when the EC2 instance is terminated.

133
00:07:43,040 --> 00:07:48,220
As a note, Elastic Block Storage is not the same as Simple Storage Service,

134
00:07:48,220 --> 00:07:49,670
which we'll cover next.

135
00:07:49,670 --> 00:07:55,300
Elastic Block Storage is specifically for using with EC2; whereas, S3 is for

136
00:07:55,300 --> 00:08:00,480
both storing and serving up independent files. In this menu, you can add volumes

137
00:08:00,480 --> 00:08:05,680
and adjust the root volume size for the Elastic Block Storage volumes attached

138
00:08:05,680 --> 00:08:10,970
to this EC2 instance. We'll skip over tags, which are just meta values you can

139
00:08:10,970 --> 00:08:15,410
add to the instance for your own purposes, and then we come to the security

140
00:08:15,410 --> 00:08:17,640
group configuration section.

141
00:08:17,640 --> 00:08:19,560
If you remember from the last module,

142
00:08:19,560 --> 00:08:23,740
security groups can be thought of as little firewalls configured at

143
00:08:23,740 --> 00:08:28,130
a per‑instance basis. Put simply, a security group controls which

144
00:08:28,130 --> 00:08:33,200
IPs your instance can talk to and which IPs can talk to it. For

145
00:08:33,200 --> 00:08:37,720
instance, it's not a good idea to leave your instances open to SSH

146
00:08:37,720 --> 00:08:39,390
sessions from anywhere.

147
00:08:39,390 --> 00:08:42,750
So it might be good to only allow incoming SSH

148
00:08:42,750 --> 00:08:45,210
sessions from your current IP address.

149
00:08:45,210 --> 00:08:49,690
You could also allow your instances to talk to each other or, say, a

150
00:08:49,690 --> 00:08:53,830
database or accept incoming requests on port 80.

151
00:08:53,830 --> 00:08:57,170
There are many different ways you can use security groups, and once they're

152
00:08:57,170 --> 00:09:00,740
created here, you can edit them and add more rules later.

153
00:09:00,740 --> 00:09:04,020
The final step is to create the instance with an existing key

154
00:09:04,020 --> 00:09:08,020
pair, which will allow you to SSH into the instance and make

155
00:09:08,020 --> 00:09:09,780
whatever modifications you want.

156
00:09:09,780 --> 00:09:13,880
You can also choose not to use a key pair if there is an existing

157
00:09:13,880 --> 00:09:18,500
application on the instance image that will prompt you for a password. Now

158
00:09:18,500 --> 00:09:22,470
that we've covered most of the basic configuration options, let's talk about

159
00:09:22,470 --> 00:09:27,420
the pricing structure for EC2. Any actual numbers will likely have changed

160
00:09:27,420 --> 00:09:28,730
by the time you're watching this.

161
00:09:28,730 --> 00:09:33,650
But hopefully, the structure will be the same. Amazon charges for EC2

162
00:09:33,650 --> 00:09:38,410
instances by the hour, and the amount per hour differs based on the

163
00:09:38,410 --> 00:09:41,660
instance type and image that you've selected.

164
00:09:41,660 --> 00:09:44,870
Some images, like a Windows image, will cost more than a

165
00:09:44,870 --> 00:09:48,080
Linux image simply because the image software must be

166
00:09:48,080 --> 00:09:50,740
licensed and paid for by Amazon.

167
00:09:50,740 --> 00:09:53,850
Let's look at the pricing of a large memory‑optimized

168
00:09:53,850 --> 00:09:57,340
instance running Amazon's Linux image.

169
00:09:57,340 --> 00:10:01,240
The per‑hour rate is 12.6 cents,

170
00:10:01,240 --> 00:10:05,840
which gives it a daily rate of around $3 per day.

171
00:10:05,840 --> 00:10:10,130
You pay only for what you use, so you can start and stop the instance

172
00:10:10,130 --> 00:10:14,140
whenever you want and only pay for the time it was alive.

173
00:10:14,140 --> 00:10:18,550
$4 per day might be a little steep for your case, so let's look

174
00:10:18,550 --> 00:10:23,590
at one of the most basic offerings, a general purpose t2.micro

175
00:10:23,590 --> 00:10:29,350
instance. This instance type comes with 1 CPU, 1 GB of RAM, and

176
00:10:29,350 --> 00:10:35,340
costs 1.3 cents per hour, which adds up to around 31 cents a day.

177
00:10:35,340 --> 00:10:40,620
Now we're talking. For a month, that's around $10, which is fairly reasonable.

178
00:10:40,620 --> 00:10:44,330
Amazon has many, many options for pricing I was only

179
00:10:44,330 --> 00:10:46,650
talking about on‑demand pricing.

180
00:10:46,650 --> 00:10:50,870
There are other models like reserved instance and spot instance pricing

181
00:10:50,870 --> 00:10:54,740
that both offer lower prices than on‑demand pricing.

182
00:10:54,740 --> 00:10:57,360
It can all get a little confusing, I know, which is

183
00:10:57,360 --> 00:11:00,540
why the AWS calculator is so useful.

184
00:11:00,540 --> 00:11:04,710
Also, keep in mind that Amazon offers a free tier of usage

185
00:11:04,710 --> 00:11:07,890
for many services. With EC2 in particular,

186
00:11:07,890 --> 00:11:14,940
you currently get 750 hours of t2.micro computing per month for an entire year.

187
00:11:14,940 --> 00:11:19,740
This should be enough free usage for you to get your feet wet with the service.

188
00:11:19,740 --> 00:11:24,700
One last note with pricing in regards to EC2, the Elastic Block Storage that

189
00:11:24,700 --> 00:11:30,150
your EC2 instances use has a separate charge associated with it, 10 cents a

190
00:11:30,150 --> 00:11:34,050
month per gigabyte for general purpose SSD volumes.

191
00:11:34,050 --> 00:11:37,620
There are currently no additional fees for auto scaling, but an

192
00:11:37,620 --> 00:11:42,440
additional load balancer or elastic IP do cost extra.

193
00:11:42,440 --> 00:11:47,240
Just keep these in mind when calculating the total cost for your EC2 usage.

194
00:11:47,240 --> 00:11:50,800
There's plenty more to EC2 instances than what we have covered,

195
00:11:50,800 --> 00:11:53,890
but this should give you a great overview of how EC2 is

196
00:11:53,890 --> 00:11:56,410
presented and what you can do with the service.

197
00:11:56,410 --> 00:12:00,380
EC2 is actually used under the covers for other services,

198
00:12:00,380 --> 00:12:03,640
like the Relational Database Service we'll cover in this module.

199
00:12:03,640 --> 00:12:09,000
So it's a good idea to become comfortable with managing and configuring these instances.

