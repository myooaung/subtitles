1
00:00:00,940 --> 00:00:04,580
As described before, AWS is a collection of services that

2
00:00:04,580 --> 00:00:07,740
interact together to enable an application to run.

3
00:00:07,740 --> 00:00:11,270
I thought it would be helpful to explain how these services interact

4
00:00:11,270 --> 00:00:15,480
with each other from a high level. Nearly all services interact with

5
00:00:15,480 --> 00:00:18,740
each other over typical TCP connections.

6
00:00:18,740 --> 00:00:22,300
It really depends on the service as to which port it might use.

7
00:00:22,300 --> 00:00:23,120
For instance,

8
00:00:23,120 --> 00:00:26,950
each type of database you might be using has its own port of choice.

9
00:00:26,950 --> 00:00:30,540
So there's not a single protocol that all services use.

10
00:00:30,540 --> 00:00:34,620
Usually, you are initiating these connections in your application by

11
00:00:34,620 --> 00:00:39,010
making requests to the AWS services. If you create all of your service

12
00:00:39,010 --> 00:00:41,750
instances in the same virtual private cloud,

13
00:00:41,750 --> 00:00:45,420
then they will have local IP addresses, and you can make super fast

14
00:00:45,420 --> 00:00:49,570
connections to them. When beginning your development with the various

15
00:00:49,570 --> 00:00:54,580
services of AWS, it's not an all‑or‑nothing process. Since all the

16
00:00:54,580 --> 00:00:58,210
services interact mostly the same on your local development machine as

17
00:00:58,210 --> 00:01:02,580
they do in the cloud, you can add and build on services as you like.

18
00:01:02,580 --> 00:01:03,500
For example,

19
00:01:03,500 --> 00:01:07,720
a common first step for a content management system web application

20
00:01:07,720 --> 00:01:11,740
might be to connect to a database service in AWS.

21
00:01:11,740 --> 00:01:16,690
Then, you could connect and begin using S3 for static file storage.

22
00:01:16,690 --> 00:01:19,750
You can work with these services exactly the same on your

23
00:01:19,750 --> 00:01:22,320
development environment as you would in the cloud,

24
00:01:22,320 --> 00:01:26,640
making the development to deployment experience as painless as possible.

25
00:01:26,640 --> 00:01:28,710
The biggest change once you move your main

26
00:01:28,710 --> 00:01:31,260
application to the cloud is securing it,

27
00:01:31,260 --> 00:01:35,440
which isn't something you can do while your app is being developed locally.

28
00:01:35,440 --> 00:01:39,080
Once in the cloud, connections and permissions between each service

29
00:01:39,080 --> 00:01:42,670
are managed via security groups, which are essentially light

30
00:01:42,670 --> 00:01:46,970
firewalls around each service instance. Controlling access in

31
00:01:46,970 --> 00:01:50,820
security is done with pure configuration completed with the web

32
00:01:50,820 --> 00:01:53,840
console and is mostly straightforward.

33
00:01:53,840 --> 00:01:57,660
Most of the bugs I've encountered with services interacting in AWS

34
00:01:57,660 --> 00:02:01,340
have been from misconfigured security groups.

35
00:02:01,340 --> 00:02:04,350
There's a lot more we'll go into in the following modules as we

36
00:02:04,350 --> 00:02:08,030
cover individual services, but this should serve as a basic

37
00:02:08,030 --> 00:02:11,440
explanation for how things are working in AWS.

38
00:02:11,440 --> 00:02:18,000
Since this course is targeting developers, I will gloss over some of the gory details of infrastructure.

