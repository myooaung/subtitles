1
00:00:00,940 --> 00:00:04,080
There was one more characteristic of AWS that I only

2
00:00:04,080 --> 00:00:06,410
mentioned briefly in the last video,

3
00:00:06,410 --> 00:00:10,380
mainly because I thought it deserved its own section. And that is the

4
00:00:10,380 --> 00:00:14,860
ability to deploy to different global locations with AWS.

5
00:00:14,860 --> 00:00:19,360
This is done as easily as scaling, just selecting a few different options while

6
00:00:19,360 --> 00:00:23,540
deploying your application, and AWS takes care of the rest.

7
00:00:23,540 --> 00:00:26,090
Why would you want to have your application deployed

8
00:00:26,090 --> 00:00:28,040
in different parts of the world?

9
00:00:28,040 --> 00:00:32,170
There are two common reasons that this is absolutely essential for any serious

10
00:00:32,170 --> 00:00:37,240
web application, reducing latency and adding redundancy.

11
00:00:37,240 --> 00:00:39,830
If your application is not a web application,

12
00:00:39,830 --> 00:00:44,780
meaning users don't access it remotely via a browser or other protocol,

13
00:00:44,780 --> 00:00:47,830
then latency is probably not as important.

14
00:00:47,830 --> 00:00:48,940
But with users,

15
00:00:48,940 --> 00:00:52,600
the latency or time it takes for requests to cover geographic

16
00:00:52,600 --> 00:00:56,340
distance is one of the hardest challenges to overcome.

17
00:00:56,340 --> 00:01:00,110
Latency with a web application is essentially the time it takes to get bits

18
00:01:00,110 --> 00:01:04,140
from your server to the user's browser and vice versa.

19
00:01:04,140 --> 00:01:06,580
The biggest contributor is the physical distance

20
00:01:06,580 --> 00:01:09,140
between the server and the user.

21
00:01:09,140 --> 00:01:12,610
And basically, the only way to reduce latency is to get

22
00:01:12,610 --> 00:01:15,540
your web application closer to that user.

23
00:01:15,540 --> 00:01:20,240
If you are self‑hosting, you would have next to zero control over that.

24
00:01:20,240 --> 00:01:20,580
Well,

25
00:01:20,580 --> 00:01:23,240
I guess you could drive around the world installing

26
00:01:23,240 --> 00:01:25,340
servers in gas station bathrooms,

27
00:01:25,340 --> 00:01:29,640
but I'm not sure that's a feasible growth strategy for your business.

28
00:01:29,640 --> 00:01:33,550
The ability to have servers running in different parts of the world closer

29
00:01:33,550 --> 00:01:37,140
to your customers is a huge advantage in this industry.

30
00:01:37,140 --> 00:01:41,970
AWS has the most data servers and the most geographical areas of any

31
00:01:41,970 --> 00:01:44,670
other cloud service provider that I could find.

32
00:01:44,670 --> 00:01:49,740
That means that you can solve that latency problem best with AWS.

33
00:01:49,740 --> 00:01:53,210
I thought this would be the perfect time to explain how AWS is

34
00:01:53,210 --> 00:01:58,710
organized geographically speaking. AWS has many regions throughout

35
00:01:58,710 --> 00:02:01,940
the world as roughly displayed on this map.

36
00:02:01,940 --> 00:02:06,440
Regions are physical locations where certain services are hosted.

37
00:02:06,440 --> 00:02:10,440
These regions increase often, and in 2016 alone,

38
00:02:10,440 --> 00:02:13,750
AWS has announced they will launch 5 new regions,

39
00:02:13,750 --> 00:02:18,340
bringing their total region count to 17. Usually, having a server

40
00:02:18,340 --> 00:02:22,170
instance available in the same country or continent as the user

41
00:02:22,170 --> 00:02:27,650
is a sufficient reduction to latency. Within each region, AWS

42
00:02:27,650 --> 00:02:29,910
also has availability zones.

43
00:02:29,910 --> 00:02:33,950
An availability zone is a collection of data centers that have

44
00:02:33,950 --> 00:02:38,190
completely separate power, networking, and connectivity, but are

45
00:02:38,190 --> 00:02:41,220
connected via hyperfast fiber optics.

46
00:02:41,220 --> 00:02:45,640
This allows an availability zone to be extremely fault‑tolerant.

47
00:02:45,640 --> 00:02:49,060
If someone forgets to pay the electric bill at one data center,

48
00:02:49,060 --> 00:02:53,070
the others provide a redundant failover. By scaling your application

49
00:02:53,070 --> 00:02:57,360
across several availability zones and/or regions, you can achieve

50
00:02:57,360 --> 00:03:00,190
nearly unlimited uptime for your application.

51
00:03:00,190 --> 00:03:03,880
Although there have been instances in the past where AWS

52
00:03:03,880 --> 00:03:06,480
region connections have gone down,

53
00:03:06,480 --> 00:03:08,970
there has not yet been a scenario where multiple

54
00:03:08,970 --> 00:03:12,840
regions have gone down simultaneously.

55
00:03:12,840 --> 00:03:16,800
It can be a little scary the thought of an AWS region going down and taking

56
00:03:16,800 --> 00:03:20,840
your app with it, so let's talk a little bit more about that.

57
00:03:20,840 --> 00:03:24,350
After all, this web application may be your livelihood, and

58
00:03:24,350 --> 00:03:27,590
any loss of connection means customers can't access or

59
00:03:27,590 --> 00:03:29,840
interact with your application.

60
00:03:29,840 --> 00:03:34,660
AWS hosts a page showing both current service statuses across regions,

61
00:03:34,660 --> 00:03:42,040
as well as status history at status.aws.amazon.com.

62
00:03:42,040 --> 00:03:45,610
Looking over it, you'll be hard‑pressed to find a performance issue,

63
00:03:45,610 --> 00:03:48,040
not to mention a connection issue.

64
00:03:48,040 --> 00:03:52,670
Each AWS outage is a major news events since it impacts popular sites

65
00:03:52,670 --> 00:03:56,140
like Netflix. And so far, in the past, there has not been more than

66
00:03:56,140 --> 00:03:59,420
one per year lasting a few hours each.

67
00:03:59,420 --> 00:04:02,110
Frankly, that's surprisingly good stability.

68
00:04:02,110 --> 00:04:10,000
And with the option to easily host your application in multiple regions, I can't imagine a more trustworthy service to depend on.

