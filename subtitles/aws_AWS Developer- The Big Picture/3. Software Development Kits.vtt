WEBVTT
1
00:00:00.940 --> 00:00:04.260
Cloud services would basically be useless if there weren't ways

2
00:00:04.260 --> 00:00:07.040
for your application code to interact with them.

3
00:00:07.040 --> 00:00:07.830
For instance,

4
00:00:07.830 --> 00:00:11.460
think about a database service that you couldn't connect to or a file

5
00:00:11.460 --> 00:00:14.840
storage service that wouldn't respond to requests.

6
00:00:14.840 --> 00:00:17.550
Code interacting with the cloud is a huge necessity, and

7
00:00:17.550 --> 00:00:20.490
Amazon takes it very seriously by supporting many

8
00:00:20.490 --> 00:00:22.840
different software development kits.

9
00:00:22.840 --> 00:00:27.480
Each SDK is essentially libraries of code written by Amazon engineers

10
00:00:27.480 --> 00:00:31.400
that make it very easy to interact with AWS services.

11
00:00:31.400 --> 00:00:35.540
They offer the SDKs in many different popular languages so that you can get

12
00:00:35.540 --> 00:00:39.740
started quickly with integrating AWS into your application.

13
00:00:39.740 --> 00:00:44.050
Amazon supports SDKs in most of the popular web programming languages.

14
00:00:44.050 --> 00:00:48.630
Unfortunately, there isn't a single portal listing all the SDKs in one place,

15
00:00:48.630 --> 00:00:55.940
but here are the SDKs that I was able to find that AWS supports, Android, iOS,

16
00:00:55.940 --> 00:01:03.200
JavaScript and Node.js, Java, Ruby and Rails, PHP, Go,

17
00:01:03.200 --> 00:01:07.240
.NET, C++, and Unity.

18
00:01:07.240 --> 00:01:10.040
Hopefully, your language of choice is listed here.

19
00:01:10.040 --> 00:01:14.440
Each project is open source and hosted on the AWS GitHub account.

20
00:01:14.440 --> 00:01:17.990
I personally appreciate this approach because it's easy to see the level of

21
00:01:17.990 --> 00:01:21.690
maintenance and support that each SDK is receiving. Take,

22
00:01:21.690 --> 00:01:22.180
for instance,

23
00:01:22.180 --> 00:01:27.840
the Go SDK. There have been 12 bug fix version releases in the past month.

24
00:01:27.840 --> 00:01:31.740
The issues are clearly labelled and are responded to in hours,

25
00:01:31.740 --> 00:01:35.950
not to mention that there are almost 200 contributors as of this video,

26
00:01:35.950 --> 00:01:39.400
which shows that AWS accepts contributions from the

27
00:01:39.400 --> 00:01:42.140
community to make their code better.

28
00:01:42.140 --> 00:01:45.720
It's clear that the Go SDK has a lot of support and is

29
00:01:45.720 --> 00:01:49.360
maintained regularly. For any SDK you're thinking of using,

30
00:01:49.360 --> 00:01:51.530
just like most open‑source software,

31
00:01:51.530 --> 00:01:54.470
it's always best to check the status of the project to

32
00:01:54.470 --> 00:01:56.990
ensure you aren't heading towards a dead end.

33
00:01:56.990 --> 00:01:59.200
So what can you do with SDKs?

34
00:01:59.200 --> 00:02:03.840
Well, the SDKs are just library and whatever code you're using.

35
00:02:03.840 --> 00:02:10.450
An AWS SDK has code to allow you to interact with the services in AWS. Since

36
00:02:10.450 --> 00:02:14.250
nearly all services can be accessed through basic web requests,

37
00:02:14.250 --> 00:02:18.410
this code is wrapping this web request and making it more convenient to use.

38
00:02:18.410 --> 00:02:22.690
Just to repeat that, there's not really anything special necessarily that

39
00:02:22.690 --> 00:02:27.770
these SDKs are doing. You could do the same thing with your own code The SDKs

40
00:02:27.770 --> 00:02:30.740
are just making it easier and more robust.

41
00:02:30.740 --> 00:02:34.350
The documentation for each SDK has a list of all the services that

42
00:02:34.350 --> 00:02:37.620
you can access and the operations you can perform.

43
00:02:37.620 --> 00:02:40.780
Some examples are reading or writing to a database,

44
00:02:40.780 --> 00:02:45.020
modifying CloudWatch rules, or invalidating a CloudFront distribution.

45
00:02:45.020 --> 00:02:47.730
Essentially, anything you can do through the console,

46
00:02:47.730 --> 00:02:51.960
you can do with an AWS SDK. Installing the SDK is going to

47
00:02:51.960 --> 00:02:55.930
depend on which language you're using. With the Node.js SDK, you

48
00:02:55.930 --> 00:02:57.980
simply use the Node Package Manager,

49
00:02:57.980 --> 00:03:05.140
npm, and install it with the command npm install aws‑sdk. For Ruby,

50
00:03:05.140 --> 00:03:10.070
you would install the SDK as a Ruby gem with the command gem install

51
00:03:10.070 --> 00:03:14.540
aws‑sdk. And for Java, you can use Maven to install it,

52
00:03:14.540 --> 00:03:18.090
but there's also an AWS toolkit for Eclipse that will not

53
00:03:18.090 --> 00:03:22.800
only get the SDK, but will also add Eclipse menu options to

54
00:03:22.800 --> 00:03:25.840
facilitate AWS development.

55
00:03:25.840 --> 00:03:29.540
Now let's look at a little demo of what the SDKs are capable of.

56
00:03:29.540 --> 00:03:33.140
Here's a small Node.js program that inserts an item into a

57
00:03:33.140 --> 00:03:36.040
DynamoDB database from a command line argument.

58
00:03:36.040 --> 00:03:37.230
Nothing special.

59
00:03:37.230 --> 00:03:38.820
Before we talk through the code,

60
00:03:38.820 --> 00:03:42.130
let's see it in action. At my terminal, I type the command to

61
00:03:42.130 --> 00:03:45.630
execute the program, and the third argument will be the string

62
00:03:45.630 --> 00:03:48.840
value I want to insert into the Dynamo table.

63
00:03:48.840 --> 00:03:52.740
It finishes silently and inserts the value into Dynamo.

64
00:03:52.740 --> 00:03:56.940
So let's jump to the web console now and look at the DynamoDB table

65
00:03:56.940 --> 00:04:01.280
I have created. Here are all the items in the table, and you can

66
00:04:01.280 --> 00:04:05.650
see the item that I just uploaded with my own program. Checking out

67
00:04:05.650 --> 00:04:08.960
the code that made that magic happen, you can see that the program

68
00:04:08.960 --> 00:04:10.070
is very short.

69
00:04:10.070 --> 00:04:13.940
All the heavy lifting is done by the AWS SDK.

70
00:04:13.940 --> 00:04:17.040
Let's look at the pieces of this program. At the top, the

71
00:04:17.040 --> 00:04:20.240
AWS SDK is imported into the program.

72
00:04:20.240 --> 00:04:24.140
Next, I need to set the region for AWS that I'll be working with.

73
00:04:24.140 --> 00:04:27.420
This is important so the SDK code knows how to build the

74
00:04:27.420 --> 00:04:31.540
URLs to access my resources in AWS.

75
00:04:31.540 --> 00:04:35.470
Then, I create a new DynamoDB client by calling the dynamodb

76
00:04:35.470 --> 00:04:38.740
constructor function from the SDK library.

77
00:04:38.740 --> 00:04:41.590
This newly created dynamodb object is how I will

78
00:04:41.590 --> 00:04:44.940
call functions from the AWS SDK.

79
00:04:44.940 --> 00:04:48.370
Next, I create an item to insert into DynamoDB.

80
00:04:48.370 --> 00:04:51.880
This item has the data to insert, which is a timestamp and

81
00:04:51.880 --> 00:04:55.220
the value from the command line, as well as the DynamoDB

82
00:04:55.220 --> 00:04:57.840
table name to insert it into.

83
00:04:57.840 --> 00:05:02.570
And finally, I call the putItem function from my dynamodb object,

84
00:05:02.570 --> 00:05:07.890
which puts the item I've created into my DynamoDB table in the cloud.

85
00:05:07.890 --> 00:05:12.040
Documentation for any code library is really important, and it's good

86
00:05:12.040 --> 00:05:15.240
that the AWS SDK is well‑documented.

87
00:05:15.240 --> 00:05:19.530
Here's the documentation for the Node SDK, which has all the services that

88
00:05:19.530 --> 00:05:24.590
you can interact with, then the full API with examples for every operation

89
00:05:24.590 --> 00:05:29.190
available from the SDK. With the AWS SDK,

90
00:05:29.190 --> 00:05:30.960
you can do almost anything.

91
00:05:30.960 --> 00:05:38.000
And if you're working on an application to deploy to or interact with AWS, make sure you use the SDK.

