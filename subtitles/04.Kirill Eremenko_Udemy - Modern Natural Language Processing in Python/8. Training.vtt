WEBVTT
1
00:00:00.210 --> 00:00:00.700
Hi guys.

2
00:00:00.700 --> 00:00:02.690
And welcome back to this and happy course.

3
00:00:02.730 --> 00:00:10.320
So now that we have bailed all CNN models for an LP we can start creating an instance of this model

4
00:00:10.380 --> 00:00:12.210
and trading it of course.

5
00:00:12.240 --> 00:00:23.130
So let's start by defining do you CNN Equals Capitol D.C. and end and give it the images is that it

6
00:00:23.130 --> 00:00:23.400
needs.

7
00:00:23.390 --> 00:00:39.610
So starting with vocab size then the dimension of the invading then the number of filters and the filters

8
00:00:39.640 --> 00:00:44.850
equals in the filters.

9
00:00:44.880 --> 00:00:52.130
Now let's give it the number of units in the FT forward's spots.

10
00:00:52.170 --> 00:01:04.980
So f f in units equals capital F F in units the number of classes for all classification task.

11
00:01:05.010 --> 00:01:09.050
So no classes.

12
00:01:09.090 --> 00:01:16.120
And finally there's about rights equals dropouts rates.

13
00:01:17.320 --> 00:01:18.760
Here are perfect.

14
00:01:18.900 --> 00:01:20.670
So this has been defined.

15
00:01:20.820 --> 00:01:22.920
Now we have to compile our models.

16
00:01:22.920 --> 00:01:26.160
So it's the same thing as when we defined our model.

17
00:01:26.160 --> 00:01:33.030
We have two cases that we have to handle so the first one is well I'm writing what I'm saying that if

18
00:01:33.030 --> 00:01:43.930
the number of classes equals to that means that we have only one outputs that is supposed to be between

19
00:01:44.350 --> 00:01:46.040
0 and 1.

20
00:01:46.060 --> 00:01:49.690
In this case we will compile that that way.

21
00:01:49.690 --> 00:02:00.220
So let's compile the list will be binary cross entropy.

22
00:02:00.220 --> 00:02:04.920
So this is the standard loss when we do binary classification.

23
00:02:04.930 --> 00:02:10.570
So when all output is just one number one number that is supposed to make the difference between two

24
00:02:10.570 --> 00:02:11.670
classes.

25
00:02:11.980 --> 00:02:22.600
Next the optimizer again will use a very strong the other one which is Adam and matrix.

26
00:02:22.600 --> 00:02:29.560
So we will use the accuracy as a matrix with everything here is released on the order like we would

27
00:02:29.560 --> 00:02:33.330
do this every time for binary classification.

28
00:02:33.340 --> 00:02:34.090
Now the second.

29
00:02:34.090 --> 00:02:35.710
Well let's just right.

30
00:02:35.740 --> 00:02:38.470
Else for all the other cases.

31
00:02:38.470 --> 00:02:53.820
And now we wanted to compile using this using this POS so sparse category we call cross entropy.

32
00:02:53.820 --> 00:03:00.760
So again this is the last that we use when we have classes and that all outputs is made of a vector

33
00:03:01.000 --> 00:03:01.980
of dimension n.

34
00:03:01.980 --> 00:03:09.130
And the higher the number four dimension ie the higher the probability that the target class is the

35
00:03:09.130 --> 00:03:09.650
class.

36
00:03:09.670 --> 00:03:25.230
I same thing as before we will use the optimizer Adam and matrix will be the sparse categorical version

37
00:03:25.230 --> 00:03:29.880
of accuracy so that's it.

38
00:03:29.920 --> 00:03:30.770
Let's write out.

39
00:03:30.890 --> 00:03:35.620
OK so we have compiled our model in our case we have two classes.

40
00:03:35.620 --> 00:03:39.190
So this is this bar that has been combined compiled.

41
00:03:39.340 --> 00:03:44.060
Now just before starting to train we will quickly create a check points.

42
00:03:44.080 --> 00:03:47.180
So this is just a way to store our model.

43
00:03:47.200 --> 00:03:52.750
Once it's trained so that we don't have to train everything from scratch when we want to use it later.

44
00:03:52.780 --> 00:03:56.770
So we first start by defining a path which will be in all drive.

45
00:03:56.770 --> 00:04:03.200
So on our personal drive so we don't lose the check points when we close our session or Google pull

46
00:04:03.200 --> 00:04:04.330
up sessions.

47
00:04:04.330 --> 00:04:11.170
Let's define it as for instance drive slash my drive slash projects.

48
00:04:11.470 --> 00:04:17.130
CNN for an LP and see KPRC.

49
00:04:17.160 --> 00:04:21.340
So of course you have to create this for the before in your google drive.

50
00:04:21.340 --> 00:04:32.770
Then we create the C KPC objects by calling T F that train that check points check points and we give

51
00:04:32.770 --> 00:04:34.810
it the model that we want to save.

52
00:04:36.610 --> 00:04:46.560
Like this and finally you would create a manager for the checkpoint and for that we call T F train that

53
00:04:46.860 --> 00:04:59.280
checkpoint manager would give it or checkpoint objects the path when we wanted to save it and the maximum

54
00:04:59.280 --> 00:05:02.090
number of checkpoints that we want to keep.

55
00:05:03.320 --> 00:05:04.000
Let's say.

56
00:05:04.070 --> 00:05:05.690
1 We don't really want to.

57
00:05:05.690 --> 00:05:11.240
Well I don't we want to keep history of all our checkpoints but you can if you want to of course.

58
00:05:11.780 --> 00:05:19.240
And last but not least we would just check if there is already a checkpoint in our checkpoint path.

59
00:05:19.370 --> 00:05:26.210
Of course you can skip this step if you want to start training from scratch but if you want to get your

60
00:05:26.600 --> 00:05:34.250
last checkpoints you test if there is one by calling the security manager the latest checkpoints.

61
00:05:34.250 --> 00:05:36.610
So if there is already a checkpoint.

62
00:05:36.770 --> 00:05:38.220
This will not be known.

63
00:05:38.360 --> 00:05:41.160
And thus the this if condition will be tweaked.

64
00:05:41.750 --> 00:05:51.050
So here it's not equal to true but it's not known so if we'll consider it's true and let's call C KPC

65
00:05:51.050 --> 00:06:03.940
the Restore security that restore C.K. P.T. and what we want to restore is C.K. Beatty manager that's

66
00:06:04.370 --> 00:06:07.900
latest check point.

67
00:06:07.960 --> 00:06:08.470
Here we are.

68
00:06:08.680 --> 00:06:15.850
Let's just make sure that we know if we have a checkpoint that has been restored or not so let's prints

69
00:06:16.660 --> 00:06:19.900
checkpoints as well checkpoint restored.

70
00:06:21.790 --> 00:06:22.890
And here we are.

71
00:06:23.020 --> 00:06:24.340
Let's run this.

72
00:06:24.340 --> 00:06:30.610
We have all checkpoint manager that is we need to save the status of our model just after the training

73
00:06:31.300 --> 00:06:33.640
training that we are going to do right now.

74
00:06:33.640 --> 00:06:45.030
So let's simply call the fit method of our model and give it the train inputs the train levels the batch

75
00:06:45.030 --> 00:06:50.690
size which is a global viable in our case.

76
00:06:50.730 --> 00:06:58.010
And finally the number the number of Apex equals number e-books.

77
00:06:58.370 --> 00:07:00.020
And here we are.

78
00:07:00.020 --> 00:07:07.610
We just have finally to say that we wanted to well to save the checkpoints just after the training and

79
00:07:07.610 --> 00:07:13.240
we can run its perfect seems to be running pretty fine.

80
00:07:13.240 --> 00:07:17.380
We can see here the accuracy is increasing pretty fast.

81
00:07:17.380 --> 00:07:18.150
That's good.

82
00:07:18.160 --> 00:07:21.940
And the last bit is decreasing so everything seems to work pretty well.

83
00:07:22.540 --> 00:07:26.960
Let's let it run for a few minutes or hours.

84
00:07:27.010 --> 00:07:29.920
In the meantime go stretch your boots and grab a glass of water.

85
00:07:30.100 --> 00:07:33.190
It's important when you stay all day on a chair in front of the computer.

86
00:07:33.550 --> 00:07:37.990
So sell healthy and hydrated and I get you for the evaluation phase.

87
00:07:37.990 --> 00:07:38.500
See you soon.
