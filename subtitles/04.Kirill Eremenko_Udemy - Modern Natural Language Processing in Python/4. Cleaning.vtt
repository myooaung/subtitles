WEBVTT
1
00:00:00.240 --> 00:00:00.620
All right.

2
00:00:00.630 --> 00:00:01.970
Welcome back to this tutorial.

3
00:00:01.980 --> 00:00:06.510
And now as we have loaded all the files that we need we are ready to do some cleaning.

4
00:00:06.510 --> 00:00:08.940
This is not the funniest part but don't worry.

5
00:00:08.970 --> 00:00:10.740
The best part comes next.

6
00:00:10.740 --> 00:00:15.630
So the first file as we want to clean are the non breaking prefixes.

7
00:00:15.630 --> 00:00:23.930
If you remember well actually I can just print it's non breaking prefixes English.

8
00:00:24.000 --> 00:00:28.260
This is just a list of characters of words with a new line between each of them.

9
00:00:28.260 --> 00:00:34.720
So we will need to split them in order to have a list of words.

10
00:00:35.070 --> 00:00:39.000
And second we will add a space before each of them.

11
00:00:39.000 --> 00:00:40.650
And the dots after each of them.

12
00:00:40.680 --> 00:00:45.280
So it represents exactly what we will be looking for during the cleaning of the caucuses.

13
00:00:46.020 --> 00:00:56.580
So the way we do this we will just say that none greeting prefix English now is equal to let's copy

14
00:00:56.580 --> 00:00:57.380
this.

15
00:00:57.420 --> 00:01:04.380
And I did hear that splits which is just a function that we.

16
00:01:04.380 --> 00:01:07.140
A method that we can use with the strings.

17
00:01:07.140 --> 00:01:10.280
And it will create a list of strings each time.

18
00:01:10.290 --> 00:01:16.350
There is a backslash and in the original string we split it and creates another element in all final

19
00:01:16.350 --> 00:01:18.090
lists of words.

20
00:01:18.150 --> 00:01:25.710
And as I just said before we also want to add the space at the beginning and the point at the end so

21
00:01:29.140 --> 00:01:44.730
the list of spaces plus pref for prefix plus points for pref in number prefix English.

22
00:01:44.760 --> 00:01:45.520
So here we are.

23
00:01:46.020 --> 00:01:52.830
We have a list of all the known breaking prefix in English each one starting with the space and ending

24
00:01:52.830 --> 00:01:54.440
with points.

25
00:01:54.660 --> 00:01:58.560
Of course we want to do the same thing for our second language.

26
00:01:58.560 --> 00:02:06.870
So let's just replace e n by f r here.

27
00:02:07.380 --> 00:02:08.280
He also.

28
00:02:08.850 --> 00:02:09.770
And finally the.

29
00:02:12.600 --> 00:02:16.710
Let's run this and quick tests.

30
00:02:16.710 --> 00:02:23.810
It's just s copy that's the perfect.

31
00:02:23.840 --> 00:02:26.140
This is exactly the list we were looking for.

32
00:02:26.190 --> 00:02:32.890
We can see there is a space there and a dot right there to let's trade this.

33
00:02:32.900 --> 00:02:39.870
So this was the first part of the cleaning just the cleaning of the non breaking prefix files.

34
00:02:39.890 --> 00:02:45.220
Now we have to do the bigger one of course which is for the whole corpus.

35
00:02:45.610 --> 00:02:50.030
And and basically that took a nice function that we will use later.

36
00:02:50.030 --> 00:02:51.990
We'll do a huge part of the job.

37
00:02:52.010 --> 00:02:56.090
We don't really need to use lowercase for instance.

38
00:02:56.090 --> 00:03:02.620
We don't need to add spaces before full stops or before commas or whatever because it took a nice a

39
00:03:02.680 --> 00:03:04.790
function does it perfectly by itself.

40
00:03:04.880 --> 00:03:12.410
But as we said before what we want is to remove the points that are not full stops like I'll take the

41
00:03:12.410 --> 00:03:13.050
same example.

42
00:03:13.070 --> 00:03:20.300
Example if the parliament session starts at 10:00 a.m. And if it's written a dot and dots we want to

43
00:03:20.300 --> 00:03:27.380
remove those dots so that the ordinary then understands that AIM is one words and not two sentences.

44
00:03:27.380 --> 00:03:36.760
So let's start by creating the corpus English viable which equals to you Paul.

45
00:03:36.770 --> 00:03:43.850
Paul sorry English the previous version of the corpus and the first thing that we will do is to pinpoint

46
00:03:43.880 --> 00:03:50.510
the dots that are our full stops the way we do this is that we will look for them using the non breaking

47
00:03:50.570 --> 00:03:52.560
prefix lists and ads.

48
00:03:52.600 --> 00:03:55.240
Let's say three shop signs for instance.

49
00:03:55.520 --> 00:04:01.900
So that later we will be able to make a difference between the four stops and the points that are not

50
00:04:02.030 --> 00:04:03.670
at the end of a sentence.

51
00:04:03.680 --> 00:04:21.680
So for each prefix in none working prefix English we will say that Corpus English was to itself but

52
00:04:21.740 --> 00:04:29.900
we will replace its prefix by itself plus.

53
00:04:29.990 --> 00:04:33.410
So we said three sharp signs.

54
00:04:33.410 --> 00:04:38.630
So now each point that is not full stop has three shops sign up right after it.

55
00:04:38.630 --> 00:04:40.440
And now comes the funny parts.

56
00:04:40.520 --> 00:04:48.860
We will use the red dots function which is the kind of the same as the replace method for strings but

57
00:04:48.950 --> 00:04:54.860
it allows us to use rig X for those of you who don't know Greg it is a way to express different strings

58
00:04:55.370 --> 00:05:02.630
but without explicitly writing those strings for instance you can do very general and flexible things

59
00:05:02.840 --> 00:05:11.330
like asking for any capital letter followed by three numbers followed by TTP or whatever.

60
00:05:11.330 --> 00:05:14.120
You can ask for pretty much whatever you wants.

61
00:05:14.240 --> 00:05:20.620
If you want to have fun with it and to explore you can quickly tap Greg ex on your favorite browser

62
00:05:21.620 --> 00:05:24.080
go to these Web sites and you will see examples.

63
00:05:24.080 --> 00:05:28.050
There is a text here and here that will explain how it works.

64
00:05:28.160 --> 00:05:29.480
You can play with it's quite fun.

65
00:05:29.990 --> 00:05:34.660
But for now the way we will use it is that we will add three sharp signs.

66
00:05:34.670 --> 00:05:40.880
In another case which is when the the DOT is not followed by its space because we can assume that's

67
00:05:40.940 --> 00:05:43.220
full stops are always followed by space.

68
00:05:43.220 --> 00:05:51.830
So in case we have a dot followed by any character like we will say numbers and letters then this is

69
00:05:51.830 --> 00:05:53.240
not considered as a full stop.

70
00:05:53.240 --> 00:06:00.110
So we will also add three sharp signs right after the points the way we do that is we say again that

71
00:06:00.110 --> 00:06:03.370
Corpus equals red dots.

72
00:06:04.490 --> 00:06:06.810
And we start with the.

73
00:06:07.130 --> 00:06:13.100
The type of string that we are looking for right before the string we add the R which means that we

74
00:06:13.100 --> 00:06:14.520
are writing something in red.

75
00:06:14.570 --> 00:06:20.290
So it's not literally what is inside the quoting marks that matter.

76
00:06:20.300 --> 00:06:23.850
The code has to process this as a big x.

77
00:06:23.930 --> 00:06:29.120
So first we say that we want it points in regards to we have to add backslash before because point has

78
00:06:29.180 --> 00:06:31.060
a specific meaning in the rig x.

79
00:06:31.070 --> 00:06:36.730
So if we wanted to say that we are looking for the character points we have to either backstage before

80
00:06:37.550 --> 00:06:46.440
and then we are looking for any sets of numbers are all letters right after it's there.

81
00:06:46.440 --> 00:06:53.390
I would say that is that we use brackets that begin with a question mark equal which means this has

82
00:06:53.390 --> 00:07:01.010
to follow the points but we will not use this in the sub function because as I said before sub is used

83
00:07:01.010 --> 00:07:08.000
to replace but we only want to replace the points by points shop shop shop and at the points and what

84
00:07:08.000 --> 00:07:10.810
follows by point shop shop shop.

85
00:07:10.820 --> 00:07:17.870
So those parentheses beginning with a question like equal means please look for that but then don't

86
00:07:17.870 --> 00:07:18.510
replace it.

87
00:07:19.040 --> 00:07:22.430
And as I said they are looking for any number.

88
00:07:22.460 --> 00:07:30.690
So from 0 to 9 0 and the way we use 0 is with this dark.

89
00:07:32.270 --> 00:07:34.480
Any letter.

90
00:07:34.770 --> 00:07:44.810
And this is how we say all capital letter A to A to Z.

91
00:07:45.870 --> 00:07:46.650
Here we are.

92
00:07:47.220 --> 00:07:53.790
So this part right here means the points followed by any of this.

93
00:07:53.790 --> 00:07:56.130
So any number or letter.

94
00:07:56.190 --> 00:08:04.240
But we also say just consider the points for the replacement parts that comes right now.

95
00:08:04.650 --> 00:08:11.890
As we said before we want to replace the point by point followed by three shops sign.

96
00:08:12.070 --> 00:08:19.710
And as this is just a function a step function of the remodel we have to specify the the string we want

97
00:08:19.710 --> 00:08:23.520
to apply to Corpus English.

98
00:08:23.550 --> 00:08:24.290
Here we are.

99
00:08:24.390 --> 00:08:28.650
We have selected all the points that we don't want to be ending sentences points.

100
00:08:28.650 --> 00:08:32.330
So now let's just remove those points again.

101
00:08:32.670 --> 00:08:44.280
We use the reader s not sub and why we want to get rid of is the point followed by three sharps and

102
00:08:44.280 --> 00:08:52.880
this will be replaced by nothing because we just want to get rid of them and these will be applied to

103
00:08:52.880 --> 00:08:54.420
Corpus English.

104
00:08:54.530 --> 00:09:01.430
We will do one last thing before splitting the corpus between each line because removing words usually

105
00:09:01.490 --> 00:09:04.940
means that we have two or more white spaces in a row.

106
00:09:05.420 --> 00:09:10.940
So we will use the same ideas before results.

107
00:09:11.060 --> 00:09:18.740
Now we ask to look for the whitespace followed by whitespace plus and disperse means that we are all

108
00:09:18.740 --> 00:09:21.890
looking for at least one occurence of the previous character.

109
00:09:21.920 --> 00:09:23.670
But it can be more so.

110
00:09:23.690 --> 00:09:29.690
In total we are looking for at least two white spaces which is exactly what we wanted and now it's just

111
00:09:29.690 --> 00:09:38.450
right that we want to replace all those white species by one single white space in Corpus English.

112
00:09:38.510 --> 00:09:44.510
Finally as we said before we want to split this huge string into a list of string each one corresponding

113
00:09:44.510 --> 00:09:47.510
to a sentence or at least the paragraph.

114
00:09:47.510 --> 00:09:49.700
So let's just split.

115
00:09:49.730 --> 00:09:57.180
Corpus English with respect with respect to backslash n.

116
00:09:57.600 --> 00:10:01.610
And here we are our English corpus has been cleaned.

117
00:10:01.610 --> 00:10:04.340
Of course we want to do the same with the French one.

118
00:10:04.400 --> 00:10:08.150
So let's copy this bastard here.

119
00:10:08.360 --> 00:10:11.240
We will use a small tool just here.

120
00:10:13.450 --> 00:10:15.870
Edit find and replace.

121
00:10:15.880 --> 00:10:24.150
So it took me some time to find it again and we can just replace any English with with French.

122
00:10:24.370 --> 00:10:26.880
You can see here which one is selected.

123
00:10:27.040 --> 00:10:29.270
We don't want to use those ones.

124
00:10:29.470 --> 00:10:30.540
It's not really clear about.

125
00:10:30.550 --> 00:10:32.050
You can see that this one is selected.

126
00:10:32.280 --> 00:10:33.020
So not this one.

127
00:10:33.020 --> 00:10:35.410
Not this one here.

128
00:10:35.440 --> 00:10:37.950
This one is selected so we place.

129
00:10:38.620 --> 00:10:39.860
And here we go.

130
00:10:39.910 --> 00:10:44.760
Just replace all the English with French and that's it.

131
00:10:44.860 --> 00:10:46.290
We can close that now.

132
00:10:48.310 --> 00:10:48.950
Whoops.

133
00:10:49.110 --> 00:10:50.340
Sorry about that.

134
00:10:52.900 --> 00:10:56.030
I am pointing you to the rest of the course but here we are.

135
00:10:56.030 --> 00:11:00.860
Everything has been cleaned and we are ready to make them relevant in goods for all algorithm.

136
00:11:00.860 --> 00:11:03.560
So let's get right into it right now and see you soon.
