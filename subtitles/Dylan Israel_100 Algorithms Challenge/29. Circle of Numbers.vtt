WEBVTT

00:00.560 --> 00:04.880
All right circle of numbers was one I really liked doing it.

00:04.890 --> 00:05.510
I don't know.

00:05.510 --> 00:14.070
So think about it was I enjoyed the it was one of the ones with images which wasn't overly convoluted

00:14.100 --> 00:16.250
but still provided quite a bit of a challenge.

00:16.250 --> 00:21.790
So our objective here is we're going to take in a couple of numbers.

00:21.960 --> 00:26.550
A certain amount of total numbers just what end is here and it's the total number.

00:26.550 --> 00:27.910
And what we want.

00:27.960 --> 00:30.580
And then we're going to take in what's called our first number.

00:30.690 --> 00:35.250
This is the number we want to find out what is the number on the other side.

00:35.250 --> 00:39.030
So for instance when it's true it's going to be seven when it's three it's going to be eight once four

00:39.030 --> 00:42.410
it's going to be nine once five is going to be zero.

00:42.420 --> 00:44.240
So six in one.

00:44.240 --> 00:45.710
So you get the idea here.

00:45.870 --> 00:51.330
So that is the idea you have a circle of numbers and we want to find out which one is on the other side

00:51.960 --> 00:57.900
given and being the total amount of numbers and first number being the number we want to see from the

00:57.900 --> 00:58.580
other side.

00:58.830 --> 01:01.740
The only hint I have for methods I use was push.

01:01.740 --> 01:05.810
This one is pretty much a logic oriented algorithm as they all are.

01:05.820 --> 01:10.440
But you don't need to know any any fancy Array methods or anything like that.

01:10.440 --> 01:14.660
All right so the way that I saw this was I created a pneumo Ray.

01:14.660 --> 01:19.710
The array is going to be our circle of numbers so let's go ahead and start there which is and create

01:19.710 --> 01:20.400
an empty

01:23.200 --> 01:28.910
empty and empty array equal to their next.

01:28.960 --> 01:30.950
We just want to populate that array.

01:31.250 --> 01:33.160
I equals zero.

01:33.220 --> 01:37.240
Well I's less than an and mean the number right.

01:37.450 --> 01:39.790
Plus plus.

01:39.790 --> 01:44.900
So in our example here where we have 10 it's going to go 0 1 2 3 all the way up to 9.

01:45.100 --> 01:46.140
And that's what we want here.

01:46.140 --> 01:52.480
So in our number they want to go in and pushing essentially create that dataset that we need to solve

01:52.660 --> 01:54.170
this problem.

01:54.250 --> 02:00.860
Now from here we have to understand that how we're going to know that there's a halfway point.

02:01.060 --> 02:07.170
And what that basically means is that we need to either add half of N or we need to subtract half of

02:07.170 --> 02:09.110
and to get the number on the other side.

02:09.130 --> 02:15.690
So if the number is 10 and it's 5 or greater We need to get that last value move.

02:15.850 --> 02:19.670
Get those those last previous 5 over.

02:19.720 --> 02:23.610
But if it's six we need those other five or four rather we need go before.

02:23.640 --> 02:26.370
Oh I think I did a very good very poor job of explaining it.

02:26.410 --> 02:30.790
But basically depending on where we are in the circle we either need to move forward or we need to move

02:30.790 --> 02:36.230
back and that's what we're going to first go ahead and create another constant here which I called half

02:36.230 --> 02:37.320
way.

02:37.840 --> 02:41.710
And this is going to be equal to and divided by two.

02:42.700 --> 02:45.550
So that's our halfway point.

02:45.700 --> 02:54.910
Now from here all we have to do is we have a if statement as if first number meaning the number that

02:54.910 --> 03:04.060
we are checking against is less then our halfway point the value that we want to have returned will

03:04.060 --> 03:14.050
be our array of first number plus the halfway point because now we're going to jump forward because

03:14.050 --> 03:16.130
it's less than the halfway point.

03:16.180 --> 03:19.830
Else we don't need it else here because we're using returns.

03:20.050 --> 03:21.070
It's in the future.

03:21.130 --> 03:22.890
Else just go ahead.

03:22.960 --> 03:28.620
Else it's greater than the halfway point of which we're going to take that first number and we're going

03:28.640 --> 03:33.590
go ahead m minus the halfway point and get our return that way.

03:33.940 --> 03:34.870
That's pretty much it.

03:34.870 --> 03:41.420
One way that could see us simplifying this is how would we sum fly this.

03:41.830 --> 03:44.470
We could actually eliminate this statement and just use it.

03:44.550 --> 03:46.010
Turnberry here.

03:46.030 --> 03:47.480
I think I'd be ok.

03:47.500 --> 03:49.800
It might be a little convoluted.

03:50.020 --> 03:53.610
So we'll leave it like that but that's just really a preference thing.

03:53.710 --> 04:00.040
But I found this to be a fun one and one that took me a second to wrap my mind around how I was going

04:00.040 --> 04:02.620
to actually get the result that was needed.
