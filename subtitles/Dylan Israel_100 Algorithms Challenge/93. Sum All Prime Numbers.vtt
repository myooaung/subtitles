WEBVTT

00:00.600 --> 00:04.350
All right guys so we have some all primes.

00:04.350 --> 00:09.610
This is something that I've actually had a technical interview question our previous company.

00:09.610 --> 00:11.970
And so I think it's probably a pretty good one.

00:11.970 --> 00:17.690
What we're doing here is we're taking a number and then we want to get the prime values all added up.

00:17.700 --> 00:26.080
So in you know prime number is defined as a number that is only divisible evenly by itself and 1.

00:26.190 --> 00:28.500
And so those are the types of numbers we're trying to add up.

00:28.500 --> 00:35.550
So in our true test cases 10 sooner turn 17 and if we sort of work that out right you know.

00:35.930 --> 00:38.390
Well while we can up we'll make sense of the problem.

00:38.400 --> 00:41.220
I don't want to start doing math on the top of my head.

00:41.220 --> 00:46.490
It'll be a bad example now but essentially preserve prime number.

00:46.500 --> 00:50.730
So we have three and see we have five that's eight.

00:50.760 --> 00:54.290
We have seven that is 12.

00:54.870 --> 01:07.980
And then 10 is not a prime we could work it out actually just with us or see we have one is a prime

01:07.980 --> 01:08.340
number.

01:08.340 --> 01:13.760
So that's one plus two is a prime number so that's two plus five is a try number.

01:14.070 --> 01:16.620
That's a plus 7.

01:17.040 --> 01:25.450
That's 15 million 6 4 1 0 3 3 is a prime number.

01:25.460 --> 01:27.340
There we go 18.

01:27.390 --> 01:29.510
Now what am I doing wrong here.

01:29.530 --> 01:31.400
It's one I guess one doesn't count.

01:31.680 --> 01:35.370
So we start off at two because we don't count one is a prime number.

01:35.430 --> 01:41.030
So we get two plus three plus five plus seven to get 17.

01:41.030 --> 01:41.790
There you go.

01:41.880 --> 01:48.740
So that's essentially prime numbers and we're only talking about positive prime numbers.

01:49.020 --> 01:52.230
But the two methods I'll use your hands I use this push and reduce.

01:52.230 --> 01:53.690
Let's go ahead and jump into it.

01:53.700 --> 02:00.750
All right so the way they did this was I I did a double nested array where I checked to see if our first

02:00.750 --> 02:05.260
value ever equals our our last value.

02:05.520 --> 02:07.940
Meaning that like for number 6.

02:07.950 --> 02:10.240
Our STARTING POINT two and we're working our way up.

02:10.470 --> 02:17.760
If it ever is evenly divisible and if it if it is evenly divisible I broke it at anything if we ever

02:17.760 --> 02:18.950
get the two numbers to meet.

02:18.960 --> 02:21.140
I mean 6 finally equaled six.

02:21.150 --> 02:23.690
That means that it is there five finally equal five.

02:23.700 --> 02:25.360
Let's use actual prime number then.

02:25.370 --> 02:26.200
It is.

02:26.220 --> 02:28.240
It is a prime number because we got better.

02:28.350 --> 02:34.350
So let's start by creating an array and we'll just call this primes and all said initialized it to zero.

02:34.500 --> 02:39.690
And what I eventually want to do here and my primes is I want to take primes and I want to reduce the

02:39.690 --> 02:41.340
value to a single one.

02:41.380 --> 02:44.130
I'm just going to push the value to the array.

02:44.190 --> 02:45.170
What is it.

02:45.240 --> 02:45.810
Why am I.

02:45.810 --> 02:56.150
Why am I reducing this and why instead don't I just create primes total initialize it to zero.

02:56.190 --> 02:57.370
This is a very good question.

02:57.390 --> 03:04.980
I'm looking at code I wrote from like three years ago so I apologize if I'm doing some last minute changes

03:04.980 --> 03:08.230
here but it's all you know life is about refactoring.

03:08.280 --> 03:14.250
So you'll see here that were initialized to two because one doesn't count as a prime number as I have

03:14.250 --> 03:17.040
recently educated in my school about this.

03:17.040 --> 03:24.560
And so we all say we want to iterate up all the way up to our number of this game past five plus plus.

03:25.350 --> 03:25.930
Cool.

03:26.220 --> 03:33.360
And eventually we want to return primes total which will be our value that we're going to be modifying.

03:33.360 --> 03:38.170
Next we want to switch just want to create a value a a two.

03:38.430 --> 03:44.820
While J is less than or equal to I J plus plus.

03:44.820 --> 03:49.500
And the idea here is we're going to iterate until we hit our current number and if they ever match each

03:49.500 --> 03:50.670
other.

03:50.670 --> 03:51.620
All right cool.

03:51.630 --> 03:54.430
Then add the value to primes total.

03:54.480 --> 04:02.290
So we'll start with that and I'll say hey if I is ever exactly equal to J.

04:03.210 --> 04:08.330
Well we want to do here is we want to this.

04:09.230 --> 04:14.050
She really I'd like a TS-Aligner in here for this project.

04:14.490 --> 04:16.430
If I was ever equal to J.

04:16.550 --> 04:22.300
Well we want to do one take primes total plus two equals two or J.

04:22.320 --> 04:23.690
Doesn't really matter.

04:25.530 --> 04:27.270
Accesory primes total

04:32.880 --> 04:33.960
cus I'm French.

04:34.030 --> 04:36.670
Oh that's because we started off as an array.

04:36.780 --> 04:39.600
So now we're going to make it a leg because we're reassigning the value.

04:39.740 --> 04:51.450
Now if that isn't the case with you if I Margiela O.J. is ever equal to zero.

04:52.050 --> 04:58.710
Well we just won't break out of here because we we have found out that that is in fact not a prime number

04:59.040 --> 05:02.310
because that breaks are our situation.

05:02.310 --> 05:03.590
So that's pretty much it.

05:03.750 --> 05:05.430
We create a placeholder very well.

05:05.420 --> 05:07.010
We have a double message value.

05:07.260 --> 05:13.920
Whenever our current value whenever our outer outer loop matches our inner loop we've essentially have

05:13.920 --> 05:15.120
missed all of these.

05:15.120 --> 05:19.980
Which means that they weren't prime numbers and thus go ahead and increment.
