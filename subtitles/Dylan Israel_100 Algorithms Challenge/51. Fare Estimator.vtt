WEBVTT

00:00.640 --> 00:06.060
Write fair estimator was another uber you know five minute challenge.

00:06.110 --> 00:12.270
So I say that it's just to give you an idea of what's expected for some of these online challenges and

00:12.270 --> 00:16.980
probably what would be expected if you're doing a white board interview and around of time it would

00:16.980 --> 00:22.170
take to solve some of these if you're not there don't worry about it but just keep it as a frame of

00:22.170 --> 00:25.640
reference of how to how to grind and continue to grow.

00:25.710 --> 00:34.030
So with that being said as mayor we have a cost per minute a right time a cost per mile and ride distances

00:34.080 --> 00:38.650
being passed in to our our function here fair estimator.

00:38.820 --> 00:46.970
And what we're expecting to reach get return is essentially the fare for each part of the application.

00:47.040 --> 00:49.820
So you can see this algorithm here.

00:50.080 --> 00:54.480
You know you're probably going to want to read over it a little bit just fully understand the problem

00:54.780 --> 00:57.630
and just study this a little bit.

00:58.350 --> 01:03.720
At the end of the day this is just a math algorithm to make sure that you can think logically and break

01:03.720 --> 01:04.470
things out.

01:04.650 --> 01:08.760
And the only the only method that I use was push.

01:08.970 --> 01:10.700
Let's jump into it.

01:10.740 --> 01:18.390
All right so the way I saw this was I created this concept here called fair cost and this is going to

01:18.390 --> 01:22.640
be a number array you such an unmoderated to initialize.

01:22.950 --> 01:32.310
Then from here what we did is I iterated for up to the cost per mile length array for an entire iteration

01:32.310 --> 01:36.120
you could it didn't cost per minute is well it doesn't really matter.

01:36.120 --> 01:37.650
So we're going to iterate through that array

01:40.590 --> 01:48.810
and then we're going to say whoops Well I's less than the cost per mile dot length.

01:48.810 --> 01:52.570
So we know how many iterations we need and where to iterate by walk.

01:52.620 --> 01:58.470
Now all we need to do here is push the cost for that current mile.

01:58.470 --> 02:03.300
So that's what we're doing here we're calculating that cost of the and here we want to return our fair

02:03.300 --> 02:04.500
costs.

02:04.800 --> 02:09.820
So they gave us the algorithm it is the right time.

02:09.840 --> 02:16.420
Times cost per minute for that time.

02:16.520 --> 02:17.190
And let's go ahead.

02:17.190 --> 02:18.580
Spaces out like so.

02:18.750 --> 02:21.560
And this needs to be done push.

02:21.810 --> 02:22.340
All right.

02:22.410 --> 02:24.600
Plus the ride distance

02:28.390 --> 02:33.070
times the cost per mile.

02:34.070 --> 02:36.530
And that's how we end up getting our fair share.

02:36.610 --> 02:41.500
We throw one on here you'll see that this is all accurate now.

02:42.250 --> 02:52.590
We could probably if we wanted to clean this up we would do like math or floor on some of these.

02:52.900 --> 02:53.830
We can do it why not.

02:53.830 --> 02:59.300
Let's go ahead and just wrap it back a little bit smaller.

03:03.210 --> 03:03.430
And

03:08.790 --> 03:09.880
area.

03:10.110 --> 03:16.530
And we can go ahead and put it like I'll do it for you.

03:16.710 --> 03:19.530
How do you do math floor for it.

03:20.390 --> 03:21.210
So not going to

03:26.850 --> 03:28.250
after remember how to do math.

03:28.280 --> 03:30.070
Floor down here.

03:30.380 --> 03:37.170
You do the math around math floor to figure out how to get the decimal places on there.

03:37.190 --> 03:41.350
But that wasn't part of the problem really at the end of the day it's just thick and you multiply this

03:41.360 --> 03:43.010
don't worry about the rounding errors.

03:43.010 --> 03:45.200
Numbers are always weird in javascript numbers.

03:45.200 --> 03:50.720
I have a very special place in javascript and it's one of the reasons people write books called Javascript

03:50.720 --> 03:51.890
the strange parts.

03:51.890 --> 03:53.160
But that's pretty much it.

03:53.180 --> 03:55.030
Let's go out and jump on to the next one.
