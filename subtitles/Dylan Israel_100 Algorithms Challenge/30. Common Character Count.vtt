WEBVTT

00:00.480 --> 00:03.830
All right common character kown this is a fun one.

00:04.250 --> 00:07.450
I actually wrote two functions to solve this one.

00:07.560 --> 00:13.130
I wrote a helper function and here as well so we'll we'll go over that and the actual solution.

00:13.140 --> 00:14.660
So what is our objective.

00:14.670 --> 00:21.240
Well we're taking in two strings one and two and we're trying to find out what characters they have

00:21.240 --> 00:22.020
in common.

00:22.110 --> 00:29.760
And then we're going to return that towable So in A B C C and A.D. s.a.a they both have two A's and

00:29.760 --> 00:33.820
they both have one C so we're going to return a total of three.

00:33.840 --> 00:40.260
I use the proper use of the method split and the HAs own property as well.

00:40.260 --> 00:42.000
To solve this those are your hints.

00:42.030 --> 00:43.240
Let's jump right into it.

00:44.120 --> 00:51.240
Alright so the way that I solve this was I split up each one of the strings into an array of characters.

00:51.470 --> 00:56.280
I then iterated through them and found out and I kept.

00:56.330 --> 01:02.220
I created an object which I just called S1 object eschew object as awful naming convention.

01:02.600 --> 01:07.130
But what we're going to do is we're going to iterate through it and we're going to get a list of the

01:07.130 --> 01:12.380
characters via as an object and then we're going to check those properties and turn the lesser of the

01:12.380 --> 01:13.070
two.

01:13.070 --> 01:19.470
So let's start by just converting our last one to an S1 character.

01:20.610 --> 01:21.790
Like so.

01:22.070 --> 01:26.030
And also because when I originally saw this and josser were in the air here.

01:26.030 --> 01:33.860
So we're going to do is we're just going to make this a contest and we're s.a as one charas and we're

01:33.860 --> 01:36.040
just going make that a string array.

01:36.200 --> 01:36.760
We're going to make it.

01:36.770 --> 01:39.980
But I'm going to explicitly state it whenever I deal with arrays.

01:39.980 --> 01:45.380
I like to explicitly say instead of implicit It is a preference you don't have to.

01:45.770 --> 01:50.840
And so we can do something for us to char's and just go and do the same thing here.

01:51.230 --> 01:51.770
Excellent.

01:51.770 --> 01:55.020
And so the to split.

01:55.040 --> 02:04.050
All right cool so we now have our two character arrays and we're going to go ahead and write a function

02:04.050 --> 02:07.720
because we're going to call it for both in just a second.

02:07.890 --> 02:10.110
I just call that get char list.

02:10.680 --> 02:17.850
And so this is going to be a function that is going to iterate over those arrays and then return an

02:17.850 --> 02:23.350
object that has a count of the keys which would be the letters.

02:23.460 --> 02:33.490
So get char lists read and pass in the the word actually chars would be better.

02:33.500 --> 02:34.000
All right.

02:34.020 --> 02:38.620
And char's is a array of strings.

02:38.730 --> 02:42.970
And what we're expecting him back is an object.

02:43.190 --> 02:43.900
All right.

02:44.300 --> 02:47.860
So now let's go in and create a constant script called word count.

02:47.860 --> 02:56.540
And this is just going to be a empty object for the time being it will be what will be pending to iterate

02:56.570 --> 02:57.490
through our chars.

02:57.500 --> 03:03.500
So let II equal 0 is less and charge laugh.

03:03.800 --> 03:06.490
Plus plus.

03:06.740 --> 03:11.110
And here we're going to have an if else Siskind check if that property exists.

03:11.210 --> 03:15.070
If it doesn't we're going to add that property and set the count to 1.

03:15.170 --> 03:20.540
If it does meaning that lay is already in there and let's say has a count of 1 we're just going to add

03:20.540 --> 03:21.480
1 to it.

03:21.590 --> 03:22.780
That's all we're going to be doing.

03:22.790 --> 03:29.180
So it's just a little if here where say if our word count dot has own property and the property that

03:29.180 --> 03:35.170
we're checking is the word or accident of the chars.

03:35.600 --> 03:40.560
If that is equally false actually is probably better this way.

03:40.700 --> 03:52.990
If if that's true all we want to do is go ahead and say word count is word count.

03:55.960 --> 03:57.520
Plus plus want to add 1 to it.

03:57.520 --> 04:03.020
So if it exists just add 1 to the count else it doesn't exist.

04:03.020 --> 04:10.990
And so we're going to have word count of that character set equal to 1.

04:11.170 --> 04:11.800
Nice.

04:11.800 --> 04:16.750
So now that we have this function you know of course you have to return word count as well.

04:16.750 --> 04:22.780
So now that we have this function in we're going to go ahead and create another Konst here and again

04:22.780 --> 04:26.170
I do a very good.

04:26.820 --> 04:29.220
Well just to add one char count all rename it.

04:29.220 --> 04:37.880
And this is going to be equal to the get char list and then here we're going to pass an S 1 chars and

04:38.010 --> 04:40.440
we're into the same thing for the two

04:45.530 --> 04:46.310
char count

04:49.170 --> 04:57.420
and get all their Chass and fast as to char's in they're very nice.

04:57.600 --> 05:02.070
So now what we're going to do is we're going to iterate through one of these one of these objects we

05:02.070 --> 05:06.310
don't have to iterate through both because if it's not in one it's on the other we don't care.

05:06.330 --> 05:15.490
So I'm just going to choose the the as one char so we're going to do a for loop which will iterate through

05:15.490 --> 05:15.630
it.

05:15.630 --> 05:23.580
So when you say Konst prof in s one char count and here we're going to have some similar logic it's

05:23.580 --> 05:26.820
not identical but some similar logic.

05:27.010 --> 05:33.060
And we're going to need before we move forward just create a total variable here.

05:33.310 --> 05:35.220
What does that equal to zero.

05:35.370 --> 05:37.880
And at the end here that's what we want to return.

05:37.920 --> 05:39.920
Or turn total.

05:40.050 --> 05:45.300
Now we have to modify tol'able here and we're going to just check if s to char count

05:47.970 --> 05:49.760
dot has own property.

05:49.830 --> 05:50.570
And what are we checking.

05:50.570 --> 05:53.120
We're checking that proc that we're passing into it.

05:53.220 --> 05:56.460
If that's true what do we want to do.

05:56.460 --> 06:03.480
Well we want to do a simple if a nested IF here that says like reach if s to object you want return

06:03.480 --> 06:09.210
the smaller value because let's say there's three A's in 1 and 2 and 3 and 2 A's and another you need

06:09.210 --> 06:12.220
to return two because that's the only value they have in common.

06:12.240 --> 06:14.010
So we're just going to another check here.

06:14.090 --> 06:23.320
Let's say escuchar count Propp is less than 1 char count Propp.

06:23.460 --> 06:37.860
Go ahead and say total is less equals 2 as to char count Propp else it's there either the same or the

06:38.220 --> 06:40.190
as one char count is less.

06:40.230 --> 06:43.090
And so we're just going to get total plus equals.

06:43.830 --> 06:54.360
As one chart Count property and wham bam at the end of it we get three guys are expecting a little bit

06:54.360 --> 06:57.100
more in terms of code than what we did before.

06:57.120 --> 07:03.780
There's probably a way to I mean I think this is fine for what for what we're trying to get across.

07:03.780 --> 07:06.920
I think this is a a full solution I'll say.

07:06.960 --> 07:08.220
I also think it's very clean.

07:08.220 --> 07:12.730
We don't repeat ourself any anywhere with this function.

07:14.050 --> 07:21.500
I think does a lot of good and there is a way to do this with for loops but if I remember correctly.

07:21.580 --> 07:27.040
So when we're checking property this is essentially not not counting all these props in here but we're

07:27.070 --> 07:29.710
checking for a property if it exists.

07:29.710 --> 07:32.010
We are only doing a single check.

07:32.010 --> 07:34.600
It's not iterating through something like it would in an array.

07:34.600 --> 07:41.590
So if I had 10000 properties it would in every 10000 items in the array it would iterate through to

07:41.590 --> 07:43.360
do that check if we had like it every.

07:43.390 --> 07:47.320
For instance or an includes or whatever it may be.

07:47.320 --> 07:50.270
But when we work with objects it's just that they're not.

07:50.320 --> 07:51.480
It's just a single check.

07:51.500 --> 07:52.740
And so it's much faster.

07:52.770 --> 07:58.570
So this is one of the ways that you can make your code more efficient and I believe in this example

07:58.630 --> 08:02.940
I'd have to jump back on to code sites and see what I believe in this example.

08:03.010 --> 08:06.160
When I did do like a double nested array it actually timed out.

08:06.160 --> 08:09.520
So this was kind of a fun one because of that.
