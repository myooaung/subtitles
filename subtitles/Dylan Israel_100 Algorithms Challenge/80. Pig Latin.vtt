WEBVTT

00:00.560 --> 00:09.790
All right pig latin this is a fun one where we are going to have a pig latin translator.

00:09.810 --> 00:16.170
And what that means is that if we have a word that starts with a vowel such as 8 we're just going to

00:16.170 --> 00:24.450
add the word way on and if we have a word that starts with a consonant we're going to go until we hit

00:24.480 --> 00:29.690
a vowel and then we're going to concat these letters on to the end.

00:30.180 --> 00:35.160
And on top of that we're going to add a A-Y onto it.

00:35.160 --> 00:37.370
So that's our objective here.

00:37.380 --> 00:45.360
We have quite a few methods I use to solve this I use split I also use test which is a regular expression

00:45.360 --> 00:48.800
into it to find out hey you know what what is this.

00:48.840 --> 00:54.190
Does this match or not you know do you run a test on it got such a bad name test and they have choice

00:54.200 --> 00:56.010
in and then push.

00:56.010 --> 00:57.680
So that's what I'd do.

00:57.690 --> 01:02.480
Let's go in and jump in to the solution which I think this one.

01:02.670 --> 01:06.390
It's been a while since I originally solved it but I think this will give me a little bit of trouble

01:06.660 --> 01:11.610
mainly because I was still I feel like every time I get comfortable with regular expressions I immediately

01:11.610 --> 01:15.870
forget it and so I had to relearn just the regular expression aspect but there's different ways that

01:15.870 --> 01:17.140
we could do this one.

01:17.730 --> 01:23.610
All right so with that I started here was I take the string that we're having inputted and I create

01:23.670 --> 01:28.080
a new I create a a character array.

01:28.110 --> 01:32.360
So we're going to work here and we're going to call them letters.

01:32.520 --> 01:37.410
And this is going to be equal to Estuardo split when we want to get each individual character split

01:37.410 --> 01:43.140
out and then eventually what we're going to want to do so I want to return to your room to modify your

01:43.140 --> 01:44.540
original input.

01:44.550 --> 01:54.510
Now we're going to create a regular expression here to check if it's an 8 in an i n e n o or you know

01:54.510 --> 01:55.440
sometimes y.

01:55.460 --> 02:06.310
In this example you just sometimes sometimes lie like God just the idea that sometimes we do things.

02:06.420 --> 02:07.110
Awful idea.

02:07.110 --> 02:12.040
Who ever wrote the language needs figured out soring call this is the vowel.

02:12.650 --> 02:13.690
Because that's what it is.

02:13.860 --> 02:15.840
And within here where I say look it's an A.

02:15.870 --> 02:18.110
And he and I know who are you.

02:18.330 --> 02:19.740
That's our Valerie Ajax.

02:19.980 --> 02:25.700
And if it is where we are at it we don't need to do anything to string other than add way to it.

02:25.890 --> 02:34.730
So we can take our vowel rejects and we can run a test.

02:35.130 --> 02:36.380
Is this true.

02:36.990 --> 02:43.090
And all we're going to do here is pass in the first character of letters 0 right.

02:43.680 --> 02:48.240
Our original strain if that's a true statement.

02:48.240 --> 02:50.060
All we need to do here is return.

02:50.200 --> 02:56.430
And originally what I did was I did letters I joined and I joined it back together and then I added

02:56.430 --> 02:57.680
plus way.

02:58.380 --> 03:03.500
But there's really no reason to run this extra iteration.

03:03.750 --> 03:08.100
And there's really no reason here to even do this we can actually go ahead and target the string directly.

03:08.310 --> 03:09.230
And all we need.

03:09.240 --> 03:13.690
All we need to do is say TR this way and you'll see.

03:13.830 --> 03:17.490
Currently we're getting this what we're done with the ones where they're starting with vowels.

03:17.490 --> 03:20.870
This is all we need to do.

03:21.240 --> 03:25.550
I would probably at this point this is more of a preference thing.

03:25.660 --> 03:27.290
There's no reason you have to do this.

03:27.390 --> 03:33.410
I tend to use tactics more than anything else now like so.

03:33.460 --> 03:36.370
So that would be halloed probably do it.

03:36.840 --> 03:42.720
I think it's I don't know that there's a preferred way but this is my preferred way.

03:42.860 --> 03:48.260
Next what we're going to do is we're going to handle the cases in which we have consonants and as we

03:48.260 --> 03:51.310
mentioned the consonants we go until we don't hit one.

03:51.310 --> 03:56.470
So when you don't know how many times you're going to go there's a couple of ways you know about you

03:56.470 --> 03:57.200
could do a loop.

03:57.200 --> 04:00.850
Typically we could also do a for loop and break out of it.

04:00.860 --> 04:02.490
I think we'll do a WHILE loop here.

04:02.600 --> 04:03.400
So while true

04:06.410 --> 04:07.920
we want to do some stuff.

04:08.120 --> 04:15.250
So what we're going to check for is we're going to check if our letters have a.

04:15.810 --> 04:24.990
We want to check if our letters are in fact part of the consonants are not part of the consonants are

04:25.170 --> 04:27.390
not part of the outrage excuse me.

04:27.510 --> 04:28.690
And if that's true.

04:28.920 --> 04:32.700
So we're going to say not our valprÃ© Dracs right.

04:32.700 --> 04:34.640
We want to test what are we testing.

04:34.650 --> 04:44.160
Well at this point we're testing the letters 0 and from here we want to do is you want to go ahead and

04:44.160 --> 04:49.500
say OK if that's the case and there is no letters we take letters.

04:49.650 --> 04:52.950
I want to push a new value to it like so.

04:52.950 --> 04:56.470
So what are you pushing letters dot.

04:56.670 --> 05:00.930
Bush actually does splice.

05:01.760 --> 05:02.880
What are we slicing.

05:02.910 --> 05:05.170
Zero comma one.

05:06.150 --> 05:08.040
And what was it was issue here.

05:10.270 --> 05:14.010
Oh arguments like there's no split could splice

05:20.200 --> 05:21.950
the issue here my friend my friend

05:49.290 --> 05:50.990
we also have an infinite loop pair.

05:51.090 --> 05:53.190
Maybe that might be giving us our issue here.

05:53.230 --> 06:04.830
So we'll break out of this if all Redjacket we test the first character legs up push now sound prowar

06:04.830 --> 06:15.380
of type String Finally we want to do we have to refactor this sort of broken since I did this last thing.

06:15.390 --> 06:18.950
What we want to do is to resign the value stream to be equal to letters.

06:18.990 --> 06:23.350
Join those values that we splice off of it.

06:23.910 --> 06:26.430
Plus a wife for a.

06:26.850 --> 06:30.870
And there we go and we get our oof gulay.

06:31.080 --> 06:40.420
I'm still not sure why this is giving me a a javascript here but let's let's just go through the logic

06:40.420 --> 06:45.320
real quick because I think we might have just stuck on it on this typescript here.

06:45.490 --> 06:49.990
So what we're doing is we're checking to see if it starts with the value here.

06:50.050 --> 06:56.890
If it does all we need to do is add way here we're taking our string and we're converting it to an array

06:56.890 --> 06:57.940
of characters.

06:57.940 --> 07:01.120
Now we're going to iterate through while our.

07:01.280 --> 07:08.190
Wallace is a false statement meaning Waldie Val rejects is not a a.

07:08.380 --> 07:10.680
We are going to take letters.

07:10.720 --> 07:17.980
And we're going to push a value to the end of it which is going to splice out the front letter of our

07:17.980 --> 07:18.760
string o

07:21.720 --> 07:22.550
Will that do it.

07:25.270 --> 07:27.440
You know it just just ignore this for now.

07:27.460 --> 07:28.380
I think this is fine.

07:28.390 --> 07:31.380
I don't understand why it's giving me such a May.

07:31.390 --> 07:35.350
It may be a little bit of a stricter thing but basically what we're doing is we're splicing not the

07:35.350 --> 07:44.740
values here that are at the front of the front of the letters array and then we're pushing them to the

07:44.740 --> 07:44.950
end.

07:44.950 --> 07:46.780
That's basically what's happening here.

07:46.780 --> 07:51.150
Let's see if this actually just comes first.

07:51.250 --> 07:54.580
Conc.

07:55.150 --> 07:57.500
Don't don't don't hate me I can't spell.

07:57.790 --> 08:08.890
And we're going to push that value under there not just like I think letters is not Sidus.

08:09.670 --> 08:10.030
Ray

08:14.400 --> 08:16.410
I don't know why these issues.

08:16.800 --> 08:20.970
But if it is a valve we're going to break out because we're done now we don't need changing other algorithm.

08:20.970 --> 08:26.840
Finally we're then going to join them back together and then just add A-Y onto it and we're done.

08:27.090 --> 08:27.790
That's pretty much it.

08:27.790 --> 08:28.450
It was a fun one.

08:28.500 --> 08:29.480
I enjoyed it.

08:29.520 --> 08:36.140
Sorry for the error here I'm not quite sure why it thinks we're assign any value.

08:36.350 --> 08:38.690
But hey it is.

08:38.840 --> 08:40.380
Oh you know why.

08:40.970 --> 08:48.690
Because oh I get it because splice here they think splice is going to return more than one value so

08:48.690 --> 08:51.440
what we need to do is we need to do this.

08:51.580 --> 08:58.400
Ah I got it now because splicer returns an array but when we join them back together.

08:58.460 --> 08:59.790
It all works out.

09:00.360 --> 09:00.990
I get it now.

09:01.010 --> 09:01.420
But yeah.

09:01.460 --> 09:04.270
So thank you typescript for educating me.

09:04.340 --> 09:09.080
So we're only slicing one value so we're just saying return that first value from this array that we're

09:09.080 --> 09:09.710
getting.

09:09.790 --> 09:10.640
Then add it back.

09:11.180 --> 09:12.200
I found a bug in my code.

09:12.200 --> 09:13.990
I fixed it.

09:14.120 --> 09:14.450
Sweet.
