WEBVTT

00:01.310 --> 00:08.340
Arrive so sort by lane here we're going to be taking in an array of strings such as this.

00:08.400 --> 00:16.920
And then we are going to sort them and they're ascending order so from least the greatest So our array

00:16.920 --> 00:19.200
here is going to go like so.

00:19.590 --> 00:25.530
And the only hint I really have for you is sort the objective is to sort the strings from the shortest

00:25.530 --> 00:28.880
string to the longest string in that order.

00:28.920 --> 00:31.740
That's pretty much it at the end of the day.

00:31.740 --> 00:32.520
All right.

00:32.520 --> 00:39.660
So this is a pretty easy one if you understand how sort works with arrays.

00:39.690 --> 00:43.320
Essentially what we're going to do is we're just going to have a single one line here that's going to

00:43.320 --> 00:47.020
take our array and sort it into what we're expecting.

00:47.040 --> 00:53.320
So we have all our strings and we just want to return our input array sort.

00:53.910 --> 00:59.040
And then here we're going to have two different elements rabbit and M-B.

00:59.070 --> 01:03.110
So here an element will bleed into this.

01:03.500 --> 01:08.490
Well do you are one or two arrow function.

01:08.520 --> 01:15.400
And then what we want to do is return the string length minus the string.

01:17.530 --> 01:23.200
Length to streamline a string of two and that's it.

01:23.290 --> 01:29.020
That's our entire solution where we're taking each element and then we're saying hey check the size

01:29.020 --> 01:33.010
of them check the length of them and then sorted accordingly.

01:33.010 --> 01:38.620
So it's really a test to see you know can you case all of this now we could solve this saga if we wanted

01:38.620 --> 01:41.110
to and just manually do this.

01:41.110 --> 01:42.230
But there's no reason to.
