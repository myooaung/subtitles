WEBVTT

00:00.540 --> 00:06.320
All right so this is a algorithm from codifies from a specific company called Datto.

00:06.390 --> 00:11.250
They actually keep track of how long it takes you on here and then if you do well and on some of their

00:11.250 --> 00:13.130
challenges they might actually reach out to you.

00:13.140 --> 00:19.250
So this they categorize as a medium challenge and they expected to take roughly 15 minutes or that's

00:19.260 --> 00:22.830
the time you get there is actually a time when that goes off is very stressful I don't like it at all

00:23.160 --> 00:25.130
but that's what that's what they do.

00:25.230 --> 00:32.400
So they're in the data storage and cloud computing industry and our algorithm here or our our function

00:32.430 --> 00:34.830
is we're going to take in some number.

00:34.830 --> 00:40.140
This is our backup time and we're going to have changes which are going to have a backup time and then

00:40.200 --> 00:42.930
a ID that goes along with that backup time.

00:43.020 --> 00:49.380
And what we want after reading through this problem and getting this text and everything we want the

00:49.380 --> 00:56.280
changes that have taken place where we want the unique IDs for them which is the ones that use the six

00:56.280 --> 01:04.830
is the second number in our double nested array which is going to be returned for the values that their

01:04.830 --> 01:07.650
backup time is later than our backup time.

01:07.650 --> 01:12.610
That's what we're trying to get some hints for how I solve this is I use includes push and sort.

01:12.660 --> 01:14.900
And let's see if they have an example here.

01:14.910 --> 01:21.890
So when the backup time is to 0 5 you'll see that when we have a 206 we're getting a 5 7 and 3.

01:21.890 --> 01:22.700
Give me another five.

01:22.710 --> 01:27.630
Give me one and you'll see we have a return result of or a result of 1 3 and 5.

01:27.630 --> 01:34.950
So it's sorted and it's only has a single digit in there for the solution it's not you know we don't

01:34.950 --> 01:37.800
have multiple sources go ahead and jump into it.

01:37.820 --> 01:45.030
All right so the way that I got started it was I created this Conte's values here and what we're going

01:45.030 --> 01:47.800
to get set is the file ids.

01:47.820 --> 01:49.580
That's really what we're storing here.

01:49.660 --> 01:55.510
Or is equal to an empty array and it's going to initialize it whenever I deal with cons..

01:55.530 --> 01:57.890
I like to hear cost values.

01:57.910 --> 02:02.910
I even though we don't have to I like to initialize it to a number just like I like to do.

02:03.240 --> 02:10.580
Now where you need to iterate through the entire FOR loop we do that with a change of changes here.

02:10.800 --> 02:12.660
A for loop.

02:13.620 --> 02:25.230
And what we're going to do is say if our value eventually what we're going to return is our file ids.

02:25.480 --> 02:30.920
So if our change is zero.

02:31.090 --> 02:41.540
We change 0 which is our day is greater than the last backup time if that is in fact a true value.

02:41.770 --> 02:49.780
We can go ahead and and push the values there to our five ideas

02:52.280 --> 02:59.500
faculties plus equals a put up push forward to plus to push change

03:02.800 --> 03:08.780
one indexable and you'll see here we have a couple of issues.

03:08.820 --> 03:12.650
One is duplicate and two it's not sorted so let's handle the sort.

03:12.660 --> 03:13.930
That's really simple right.

03:14.020 --> 03:15.560
They're both so simple at this point.

03:15.560 --> 03:19.020
If you if you got this far so it was just going to have an Annabi.

03:19.090 --> 03:22.840
We don't really need to worry too much that the scope of these are short so we don't have to worry about

03:22.840 --> 03:24.840
good naming conventions.

03:25.420 --> 03:29.360
If we really wanted to do id one too.

03:29.890 --> 03:41.550
And my guess file id one file id too and we're going to return file id one minus file ID too.

03:41.770 --> 03:47.290
And that will sorted evenly but we still have duplicates Well before we push you into a check here that

03:47.330 --> 04:01.360
says if we want it not to be in our file ids so file ids includes if that in fact not a not in there.

04:01.360 --> 04:02.440
Meaning change one

04:06.620 --> 04:11.240
well we can do is we can just do a check see if we already have it if we don't go ahead and add it.

04:11.240 --> 04:17.180
Now this is a little bit slower because now we are adding another iteration through an entire race so

04:17.990 --> 04:19.320
there's a couple of different ways that we can do.

04:19.370 --> 04:23.510
Probably use objects whenever you're doing includes there's always a better way of doing it with objects.

04:23.510 --> 04:27.440
If you are worried about a fish it's usually always I should say.

04:27.920 --> 04:34.450
Now one thing from a cleanliness standpoint other than a let's make it faster is we could actually and

04:34.460 --> 04:38.840
this would this may seem a little silly but I actually think it adds a code readability so we can go

04:38.840 --> 04:50.030
ahead and set file ID here equal to change 0 and we can go ahead and set as much change 1 and we can

04:50.030 --> 04:59.150
go ahead and say contes file file backup time equal to change

05:01.890 --> 05:09.140
0 and whenever I'm dealing with tuples like this I typically would have to have something like this

05:09.140 --> 05:13.550
because I think it's I think that you're like oh well you're creating Constancio you don't need ants

05:13.640 --> 05:15.190
and stuff like that.

05:15.200 --> 05:16.370
I disagree.

05:16.400 --> 05:24.050
I think creating a value this creates value to me where we now have more readable code even though we're

05:24.050 --> 05:26.730
not really using on one spot.

05:26.870 --> 05:36.140
Now it's fall back up time greater than last backup time file Adi's includes this file ID and we are

05:36.140 --> 05:40.820
in a situation where I think it's a little bit more readable but that that might be debatable in this

05:40.820 --> 05:41.310
instance.

05:41.450 --> 05:44.750
But you know that's that's my solution.
