WEBVTT

00:00.450 --> 00:08.640
O or write confirm endings so we are objective here is to find out if the string ends with a certain

00:08.640 --> 00:11.170
word or a certain series of characters.

00:11.190 --> 00:17.580
Now in here it says hey and as 2015 you could do this with the ends with method but please don't use

00:17.580 --> 00:17.780
that.

00:17.790 --> 00:20.370
That's one of our goals here and that's fine.

00:20.370 --> 00:24.820
So the hint for this one is that I use sub SVR.

00:25.020 --> 00:30.050
And our objective is does it end with this if it does return a boolean if true if it doesn't go ahead

00:30.050 --> 00:33.960
or return a boolean of false.

00:33.960 --> 00:35.040
That's all we have to do.

00:35.130 --> 00:37.560
Let's go ahead and jump into it.

00:37.570 --> 00:44.830
All right so the way that I did this was I basically took our input string here and I made a comparison.

00:44.850 --> 00:53.970
I got the distance the remainder of the one length minus the other and then I just return to that start

00:54.060 --> 01:00.720
of our shrink with the length of our input and I could I said hey are these equal.

01:00.720 --> 01:01.370
That's pretty much it.

01:01.380 --> 01:06.840
So let's go ahead and create a Konst here and we'll call this start.

01:07.260 --> 01:18.460
And also the sequel to our string length minus our target line.

01:18.480 --> 01:22.520
Now this is going to give us the gap that we need to find out.

01:22.710 --> 01:29.520
Hey where do we want to start are our string Dumont's are in a seventh character do us turn the first

01:29.520 --> 01:30.240
character.

01:30.340 --> 01:34.650
This is that that point because that's where we need to make our comparison right.

01:34.650 --> 01:36.650
So if this is 10 then this is five.

01:36.650 --> 01:37.900
We need to start a string five.

01:37.900 --> 01:39.140
Say do these match.

01:39.390 --> 01:41.790
That's what we're doing here.

01:41.970 --> 01:49.480
Next all we have to do here is return our original string and the substring.

01:49.970 --> 01:56.870
And this is going to substring is going to be at that starting point comma the entire length of the

01:56.870 --> 01:58.360
string.

01:58.550 --> 02:00.050
And when you say is this.

02:00.050 --> 02:04.100
And you'll see here that we're returning there and now we're just going to check here.

02:04.100 --> 02:09.100
Is this equal to our target string.

02:09.200 --> 02:10.270
Here is true or false.

02:10.280 --> 02:16.220
And I wonder if this works like slice and slice or we don't have to pass that in and I bet it it seems

02:16.220 --> 02:16.400
too.

02:16.400 --> 02:21.530
So that's another thing that we could refactor here is that if you want to get a snowshoeing that goes

02:21.530 --> 02:27.110
to the end of the string you don't actually have to pass the value in like we were doing before so can

02:27.110 --> 02:30.130
refactor this and eliminate it.

02:30.260 --> 02:30.800
And

02:33.740 --> 02:36.620
I don't necessarily like the name start here but this is it.

02:36.620 --> 02:42.080
At the end today we are checking to see if the end of the string is equal to the substring after we

02:42.080 --> 02:45.450
just do a little bit of math to find out where we want to start that check.
