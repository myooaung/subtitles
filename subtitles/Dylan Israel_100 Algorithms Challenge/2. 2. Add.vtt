WEBVTT

00:00.740 --> 00:05.600
All right so in ad here we're actually going to do something a little bit different.

00:05.630 --> 00:07.380
It's kind of too easy in my opinion.

00:07.590 --> 00:12.930
And we're going to do two different algorithms here but I'm going to do them one video because they're

00:12.930 --> 00:13.920
so related.

00:13.920 --> 00:20.910
Well we want to do is write a function that adds two numbers together that's it takes in a takes and

00:20.910 --> 00:24.960
A B and adds them together and returns that value.

00:24.960 --> 00:30.990
Now once we have that working we're going to write another function that's going to add numbers together

00:30.990 --> 00:37.080
regardless of how many parameters we have now say we call it with five parameters of five different

00:37.080 --> 00:37.380
numbers.

00:37.380 --> 00:38.940
We want all those numbers to be added.

00:39.090 --> 00:42.490
And if you do with 4 3 2 1.

00:42.930 --> 00:46.640
We wanted to add those numbers as well but we only want to have a single function.

00:46.860 --> 00:54.000
And so some hints for this is you're going to use earth metric operators for the second part for the

00:54.000 --> 00:55.350
second solution.

00:55.350 --> 00:59.340
We're going to be using the rest operator and for each Let's go ahead and dive into it.

01:00.250 --> 01:00.700
All right.

01:00.700 --> 01:09.430
So Part 1 you'll see we have our function here and we're saying what do we do we do it with this well.

01:10.460 --> 01:15.110
I honestly feel for if we're struggling with sort of understanding this we should basically just describe

01:15.110 --> 01:17.190
what's going on here in our function.

01:17.270 --> 01:21.680
And so a function is reusable code at the end of the day.

01:21.680 --> 01:25.180
And so we declare that function keyword and then we have ADD.

01:25.190 --> 01:29.150
That's the name of the function so that we can call it again like we're doing in these commande it out

01:29.150 --> 01:34.340
console logs each one takes in a parameter or can take in they don't have to.

01:34.430 --> 01:37.190
But these are values we're passing into the function to be.

01:37.200 --> 01:39.560
So we have one and two in typescript.

01:39.560 --> 01:45.020
We're assigning a type to them so that we know what to expect or what data type or where we're going

01:45.020 --> 01:46.310
to be interacting with.

01:46.430 --> 01:49.640
And then you'll see here this call after the function name.

01:49.670 --> 01:55.880
This shows us what we're expecting our return type to be so we're expecting to return a number here.

01:55.880 --> 01:57.680
So this is going to be your turn.

01:57.710 --> 02:06.950
How might we add these two numbers together just like so one plus per and 2 and we can check our solutions

02:06.950 --> 02:08.010
here.

02:08.090 --> 02:09.960
It would do it.

02:10.010 --> 02:12.190
And of course we always forget to turn on Khokha.

02:12.350 --> 02:14.360
You'll see that we get three and five.

02:14.370 --> 02:16.820
One plus two three and three plus two is five.

02:16.820 --> 02:18.260
So this is the first part.

02:18.440 --> 02:21.760
Let's go ahead and dive into the second part now.

02:21.770 --> 02:27.120
All right so you'll see here I wrote this function add to and put a parameter and then any.

02:27.120 --> 02:32.330
I was just saying it could be any type and you'll see here that we're giving this undefined right because

02:33.170 --> 02:34.990
this function only has one parameter.

02:35.000 --> 02:40.400
It's still expected type the same return type but only at one parameter passing in here 5 and in here

02:40.400 --> 02:41.370
too.

02:41.390 --> 02:48.050
So what the rest operator does we'll see when we throw these three dots on here is it takes this value.

02:48.560 --> 02:55.070
And in our case we change the type here but it takes this value and it turns it into an array.

02:55.100 --> 02:58.460
In our case it's going to be turned into a number array.

02:58.730 --> 03:04.930
So you'll see here if we were to cancel that log program one here.

03:05.060 --> 03:09.960
You actually have arrays of out you have an array of those values.

03:10.220 --> 03:15.770
So you would use the rest operator like so if you didn't know how many arguments you're going to have

03:15.770 --> 03:20.270
in there you know it's going to create a list of them.

03:20.300 --> 03:27.410
Now at this point all we would have to do is create a variable that we could iterate through and just

03:27.410 --> 03:34.580
call this total initialized to 0 and then we'll just say for AM ONE total.

03:35.030 --> 03:41.800
But it's your on for each and say no.

03:43.880 --> 03:53.740
And so total plus equals no in return.

03:55.340 --> 04:03.700
Like so excuse me the return total and you see we get our 5 and then we get the 15 as well.

04:03.700 --> 04:10.610
So this would be how you would handle this same problem sort of kicked up a notch but able to handle

04:10.610 --> 04:14.560
multiple inputs or no inputs at all.

04:14.560 --> 04:15.170
In reality.
