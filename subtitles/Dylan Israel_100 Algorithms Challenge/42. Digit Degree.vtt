WEBVTT

00:00.660 --> 00:01.500
All right.

00:01.500 --> 00:04.740
So here we are with digit degree.

00:04.740 --> 00:11.170
This is a fun one which involved me a call whole mess of methods to get the result that we want.

00:11.250 --> 00:16.990
And so you'll see here that when n is equal to 5 The output should be zero.

00:17.160 --> 00:22.320
And what that what we're basically trying to do is we want to replace the sum of the digits to one digit

00:22.350 --> 00:26.670
and count how many times we have to make that iteration.

00:26.670 --> 00:35.010
So if we have if we have you know 1 1 plus 00 plus zero is one.

00:35.070 --> 00:35.610
So we're done.

00:35.610 --> 00:36.620
We're down to zero.

00:36.720 --> 00:42.900
Basically how many times until we can get down to zero zero is zero iterations are already there.

00:43.670 --> 00:45.440
It's kind of a fun one.

00:45.440 --> 00:46.750
So we start with 91.

00:47.180 --> 00:49.220
Let's start with 91 to make more sense.

00:49.220 --> 00:56.780
So 91 we we get two plus one that gives us 10 when we break out the digits and add them together and

00:56.780 --> 00:59.390
then we get one plus zero which gives us 1.

00:59.420 --> 01:01.820
And so we're actually trying to get less than 10.

01:01.820 --> 01:02.870
I think I said less than zero.

01:02.880 --> 01:04.530
We're trying to get less than 10.

01:04.580 --> 01:06.680
And so that's what we're going to do.

01:06.680 --> 01:12.560
I used to string parsing split and reduce to get this algorithm to work.

01:12.650 --> 01:18.320
There's a lot going on in this code and looking at it at first glance it works it's it's nice but I

01:18.320 --> 01:20.860
think I could have probably written it a little bit cleaner.

01:21.020 --> 01:22.470
But we'll see what happens.

01:22.470 --> 01:23.980
So let's go and dive into it.

01:25.030 --> 01:33.090
All right so in this one we're going to keep track of a variable and that is what we're going to need

01:33.090 --> 01:33.330
to do.

01:33.330 --> 01:38.320
The amount of iterations that are stored in OC and here I just call that count.

01:38.340 --> 01:43.280
I think that's an appropriate name because we are counting the amount of digits that are being reduced.

01:43.410 --> 01:47.670
And what we eventually want to return is count that's it.

01:47.670 --> 01:48.640
At the end of the day.

01:48.780 --> 01:56.290
So we want to say you know while.

01:56.940 --> 01:58.130
Well true.

01:58.510 --> 02:03.470
And of course let's go ahead and turn on our start on that.

02:03.600 --> 02:08.970
So the way that I solve this is actually an if statement where he says if an is less than or equal to

02:08.970 --> 02:11.850
nine just go ahead and immediately return count.

02:11.850 --> 02:19.310
That's because at that point we want to we know that we don't need do our logic down below.

02:19.470 --> 02:25.770
And the way that I wrote it it's going to not work the best.

02:25.770 --> 02:32.850
And so so if and is less than equal 9 go ahead and return count cool.

02:33.280 --> 02:38.140
Now what we wanna do is run on red and else and we may clean this up after the fact because I'm looking

02:38.140 --> 02:43.050
back at when I originally saw this and I'm seeing things that we can maybe make better.

02:43.060 --> 02:47.190
We'll see that we have a while we're just going to put through.

02:47.200 --> 02:51.350
So this is going to be an infinite loop for the time being until we fix it.

02:53.180 --> 02:55.440
And we can handle that like so.

02:55.730 --> 02:56.650
All right.

02:56.830 --> 03:00.080
So I think this was actually supposed to be 10 1.

03:00.110 --> 03:01.170
There you go.

03:03.150 --> 03:05.580
So how can we how are we going to handle this.

03:05.580 --> 03:11.070
Well the first thing is based on how I solve this originally If you've hit this wall loop we need to

03:11.070 --> 03:22.780
iterate by 1 and then we need to keep track and we'll just call this let current number or get initialises

03:22.780 --> 03:23.740
the end.

03:24.240 --> 03:24.910
Excellent.

03:25.110 --> 03:29.400
And from here we are going to write a function that does a lot of logic.

03:29.400 --> 03:34.970
I called this get digit get digit is going to take our number is going to turn into a string is singing

03:34.990 --> 03:38.970
split it into individual string of five digits.

03:39.090 --> 03:45.030
Is going to reduce it using parce and that is going to return a single number at the end of the day.

03:45.030 --> 03:48.160
Now it could be multiple digits but that's what the wallet there is for.

03:48.480 --> 03:53.420
And then we're going to do it again until it's no longer the case so digit is going to take in a numb

03:53.580 --> 04:02.040
we'll call this number of type number and then here what we are expected to do is we just round turn

04:02.040 --> 04:07.140
that dot to string because we are converting that number to a string.

04:07.170 --> 04:10.830
That's splitting it up on each individual digit.

04:11.130 --> 04:18.630
And then we are going to reduce it back to a single number with a column B.

04:20.040 --> 04:20.630
Excellent.

04:20.670 --> 04:31.800
And in here what we want to return is parse and a plus parse and B.

04:32.310 --> 04:32.760
Excellent.

04:32.760 --> 04:38.000
What is typescript complain about I think is complaining that we're trying to reduce on a string.

04:39.450 --> 04:45.500
We're going to say words and give an optional type as any and optional type with any.

04:45.530 --> 04:51.190
So not like that string.

04:55.700 --> 04:55.960
All right.

04:55.980 --> 04:56.540
Number

05:00.200 --> 05:00.800
no longer

05:08.610 --> 05:14.170
it doesn't like that we are trying to assign this how and I get typescript to ignore this.

05:14.170 --> 05:19.840
So what we're trying to do here is we're manipulating types for we're first manipulating it using here

05:19.840 --> 05:25.740
and parts and wiring really saw this as a just in javascript I didn't get any issues here.

05:26.800 --> 05:33.870
So I guess what we could do here is we could then before we do anything let's say it costs

05:37.250 --> 05:46.900
Nom's is equal to what to string and convert all those values to a integer which is kind of what percent

05:46.900 --> 05:47.740
it is doing here.

05:47.760 --> 06:00.830
But and then we're going to split it and then we're going to map on each element we're going to parse

06:00.840 --> 06:06.170
out the element actually.

06:06.310 --> 06:12.100
Now we have an array of numbers and we'll go ahead and have the explicit type here because we have a

06:12.100 --> 06:13.250
bit going on there.

06:13.330 --> 06:14.050
So Nomes

06:19.120 --> 06:21.900
was I don't know what is the issue here.

06:24.090 --> 06:24.820
It's true that

06:27.740 --> 06:33.770
if we go now we can go ahead and take Gnome's and we can just do this.

06:34.090 --> 06:46.030
And there's no reason to have parse it anymore we just weired turn a plus b remove percent plus B and

06:46.490 --> 06:48.660
think we can even remove this at this point.

06:51.550 --> 06:53.330
And that's Nomes.

06:53.440 --> 06:54.230
There we go.

06:54.420 --> 06:54.990
OK.

06:55.240 --> 06:58.280
So just a little bit on the spot refactoring so.

06:58.450 --> 07:02.050
And here we're going to just look for the lot of it to a string.

07:02.050 --> 07:05.220
We then split it up on each individual character.

07:06.390 --> 07:13.640
We then parse those digits to a make a number array as we map them and then we reduce those to get a

07:13.650 --> 07:14.270
value.

07:14.520 --> 07:23.360
So all we have to do here now is keep track of current Gnome and set it equal to get digit.

07:23.360 --> 07:26.680
And in here we're going to pass in current number.

07:26.970 --> 07:27.720
Excellent.

07:27.730 --> 07:29.170
And then we just have a little if yours.

07:29.280 --> 07:37.380
If current number is less than or equal to 9 going to break we're done.

07:39.890 --> 07:41.690
And you'll see we're good to go here.

07:41.690 --> 07:44.080
So we had 0 1 2.

07:44.240 --> 07:45.420
Everything is solid.

07:45.680 --> 07:53.510
So a lot going on in this in terms of code and clean it up.

07:53.780 --> 07:58.530
So this is probably a better way of doing what we were doing before because we don't you know we're

07:58.550 --> 08:00.930
trying to do some reducing on strings.

08:00.950 --> 08:03.470
And I didn't like that.

08:03.650 --> 08:04.880
I understand why.

08:04.880 --> 08:06.300
And then of course I'd like to.

08:06.500 --> 08:12.870
I personally like to return and return types although they're not necessary.
