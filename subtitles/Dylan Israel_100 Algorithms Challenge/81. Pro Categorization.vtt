WEBVTT

00:00.520 --> 00:01.920
All right guys.

00:02.050 --> 00:06.270
Pro categorization and that's the word I'm looking for.

00:06.270 --> 00:12.210
So what we're doing here is we are taking in two values into a function an array of strings.

00:12.390 --> 00:17.480
And these are our professionals and then we have their preferences.

00:17.520 --> 00:22.330
Now each one of these will be the preferences that Jack has.

00:22.440 --> 00:23.890
This one will be the preference.

00:23.890 --> 00:30.390
The next one will be the preferences that Leone has and this will be the preferences that Maria House

00:30.690 --> 00:35.100
has or double nested array as our second parameter.

00:35.100 --> 00:42.780
What we want to do is we want to create a triple nested array where we have an array in here an array

00:42.780 --> 00:50.250
within an array within an array that has the values of hey this is the type of job.

00:50.370 --> 00:52.800
And hey these are the people that have that preference.

00:52.800 --> 00:55.470
That's what our objective is here.

00:55.980 --> 00:57.930
And our example.

00:58.050 --> 01:06.030
So this is our example output here and the hints I have is has own property push to lower case and sort.

01:06.030 --> 01:12.770
So to give you an idea this is a 15 minute challenge from the company thumbtack.

01:13.290 --> 01:20.730
And and I did it about 17 and a half 1741 I think to be exact.

01:20.730 --> 01:28.770
And I actually got the solution in about 10 minutes but I didn't have it sorted properly and that took

01:28.770 --> 01:31.910
me about another five to get it working.

01:32.130 --> 01:32.550
So

01:35.520 --> 01:37.980
yeah maybe 12 minutes because then I got 17.

01:38.030 --> 01:43.210
So it took me to do me a little bit but I got done in about seven and a half or so.

01:43.680 --> 01:46.700
But yeah let's go ahead and dive into it.

01:46.710 --> 01:51.510
All right so this isn't the best code I ever wrote because I was trying to make that 15 minutes but

01:51.510 --> 01:55.830
I think we have a good starting place so what we're going to do here is we're going to essentially create

01:55.860 --> 02:00.580
a key value pair that is going to the values going to be an array of names.

02:00.600 --> 02:05.370
The keys are going to be that profession the handyman the computer repair.

02:05.850 --> 02:07.080
And so we're going to start.

02:07.140 --> 02:13.620
So we're going to create what I called uprose preferences which is going to be equal to an empty object

02:14.280 --> 02:18.810
which will eventually sign the keys for then we're going to have to have a double nested loop the double

02:18.810 --> 02:24.260
nested is to get all the values because we have a double nested array right for here.

02:24.900 --> 02:28.260
So let's start with four.

02:29.290 --> 02:32.310
Let equals zero.

02:32.310 --> 02:36.210
All high is less than the prose length

02:39.980 --> 02:41.680
plus plus.

02:42.550 --> 02:48.670
And then and here we'll go and do another for loop or so let J equals zero.

02:49.140 --> 02:56.490
While J is less then our preferences on the current row that we're going through which is length J plus

02:56.490 --> 02:58.330
plus.

02:58.670 --> 02:59.500
All right.

02:59.820 --> 03:03.510
And now what we're going to do is we're going to check to see if that property exists.

03:03.630 --> 03:11.760
If it does we're just going to push the new pro to that that value if it doesn't we are going to go

03:11.760 --> 03:17.690
ahead and push that value if it exists if it all lines on there.

03:17.880 --> 03:19.430
And we're going to add this to the Reval.

03:19.430 --> 03:32.580
So we're going to check to say hey if Perros preferences DOT has own property if it contains the preferences

03:32.730 --> 03:37.200
of I have J and our preferences are here.

03:37.200 --> 03:41.510
So I will say this one or two doing this whole thing.

03:41.880 --> 03:46.350
And then this this would be right here XY and then this value in here is J.

03:46.350 --> 03:54.360
So if we have the computer Parakey what we want to do if we already have that is we wanna say preferences

03:55.960 --> 03:57.600
excluding pro preferences

04:02.770 --> 04:06.180
and then brackets and then we're going to throw this into here.

04:09.620 --> 04:11.460
Push.

04:12.160 --> 04:12.940
What are you pushing.

04:12.950 --> 04:17.310
Well we're pushing the name of the person who has that preference Prozac.

04:18.140 --> 04:24.290
Else what we want to do is it means that key doesn't exist on an object quite yet.

04:24.290 --> 04:25.940
So is a pros preferences

04:28.850 --> 04:29.680
preferences.

04:29.690 --> 04:38.330
I have J same value that we're checking is equal to an array because we want to add an array plus the

04:38.330 --> 04:40.200
value of the pro.

04:40.790 --> 04:43.010
So now what we have is a link.

04:43.050 --> 04:46.960
Let's go ahead and just you just see it in here so you can see where we're at right.

04:46.970 --> 04:49.250
So this is a little bit of a lot larger one.

04:49.340 --> 04:53.410
So you can see here we have this key and then we have the value of the names that go with it.

04:53.420 --> 04:55.800
But it's not quite in the order that we won.

04:56.150 --> 05:02.320
So what we can do is we will create this Konst here.

05:03.230 --> 05:10.190
And I'm sorry for the bad names but I just called this process press and in a real application I would

05:10.190 --> 05:14.980
refactor all this but I wanted to show my solution that I got in about 17 minutes.

05:14.990 --> 05:17.810
So if there's an empty array.

05:18.170 --> 05:24.320
And so what we're going to do is we're going to iterate through and we're going to create a array of

05:24.350 --> 05:27.060
the value of the key and of the value.

05:27.230 --> 05:37.970
So you'll see now that we're going to do conc prep and Proz pref for instance that object or iterate

05:37.970 --> 05:38.420
through each one.

05:38.420 --> 05:47.710
The key is in orienting progress flies in the progress and we're going to push what are we pushing well

05:47.880 --> 05:56.990
or push into an array and an in our array here we're going have a prop and then I say my prop we have

05:56.990 --> 05:59.100
that property and then and here.

05:59.210 --> 06:06.590
But we're going to have is we're going to unwrap all the values in pros preferences for that problem.

06:06.770 --> 06:10.360
So the names are right now at this point.

06:10.430 --> 06:11.360
If we were to

06:14.170 --> 06:17.220
cancel the law are C-L works.

06:17.300 --> 06:24.020
You know by our council a lot of progress.

06:24.230 --> 06:26.700
You'll see that we have names.

06:26.710 --> 06:32.240
We have the we have an array here of the key which is the title.

06:32.240 --> 06:33.660
And then we have the name.

06:33.680 --> 06:39.650
So the last thing that we really have to do is now sort it out.

06:39.710 --> 06:42.780
So eventually what we want to do is we want to go ahead and return pro refs

06:45.910 --> 06:50.350
so we're in a story right here and we're just going to reset the value of pro press which is equal to

06:50.350 --> 06:59.530
pro press sort and we want to sort it by the computer repair handyman by the Task Name.

06:59.710 --> 07:07.920
So we're have two values in our press one and pref two and we're sorting strings.

07:07.930 --> 07:14.390
We first want to bring the values down to be lower case or upper case you basically just want to treat

07:14.390 --> 07:15.340
them the same.

07:15.340 --> 07:21.850
And so we need to make that apparent So we're inside one of the lower equals.

07:22.000 --> 07:24.540
Press 1 and what are we doing.

07:24.550 --> 07:30.730
Well it's we need to get to the value in our array which is the 0 0 of value.

07:31.120 --> 07:38.550
So the very first that our entire array plus nested Plus the next one.

07:39.430 --> 07:44.500
So that will give us our string of our current one and then we're going do the same thing for prefet

07:44.500 --> 07:45.230
to lower.

07:45.310 --> 07:49.940
And we want to zero to lower cases as well.

07:52.510 --> 08:00.280
And then we're going to think for profit to lower range that to change that to a to go ahead and put

08:00.390 --> 08:02.230
a lower case on it.

08:03.220 --> 08:03.940
Excellent.

08:04.150 --> 08:11.180
And now what we want to do is want to compare them to sort them so as they return pref one.

08:11.790 --> 08:24.520
Excuse me if if if one lower is less or excuse me greater than Kraft to large I guess we could do it

08:24.560 --> 08:25.230
either way.

08:25.300 --> 08:26.350
So I did it.

08:26.370 --> 08:27.710
So press to lower.

08:27.820 --> 08:33.810
We're going to return one if pref one lower

08:36.530 --> 08:40.250
is less than impressed to lower.

08:41.060 --> 08:45.160
We're going to return negative 1.

08:46.400 --> 08:51.300
And if it's neither of those we're just going to go ahead and turn zero because there's no need to.

08:51.560 --> 08:53.310
And we're done.

08:53.360 --> 08:56.370
We have solved this quite a bit going on here.

08:56.390 --> 09:01.660
So we have a triple nested array string as our output it is sorted.

09:01.790 --> 09:04.260
We kept keys and values and pushed.

09:04.280 --> 09:05.140
So quite a bit.

09:05.150 --> 09:10.520
And I think this is one of those excellent candidates where in a future video perhaps in my how to code

09:10.520 --> 09:15.590
like a pro series I'll go back and refactor and show how we can make this much more intuitive.

09:15.590 --> 09:20.780
Reading through it as well as how we might refactor some code in terms of cleaning up some of this because

09:20.780 --> 09:21.850
I have some ideas.

09:21.890 --> 09:27.980
So that was my solution is a little bit hard won it in about 17 minutes or so so I thought this was

09:27.980 --> 09:31.650
a decent enough but I imagine there's ways that we can make this a little bit cleaner.
