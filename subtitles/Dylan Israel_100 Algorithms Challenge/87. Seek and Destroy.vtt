WEBVTT

00:00.480 --> 00:02.210
All right seek and destroy.

00:02.220 --> 00:06.830
I don't actually solve this one yet but I think I can solve it pretty simply using the hands filtering

00:06.840 --> 00:07.950
includes.

00:08.040 --> 00:13.110
But our objective here is we have a two and a function takes into prompters.

00:13.110 --> 00:14.370
The first one is an array.

00:14.370 --> 00:15.700
The second one is the array.

00:15.810 --> 00:22.220
We want to return the values that are in the first one that are not in the second one as an array.

00:22.230 --> 00:23.280
That's her objective here.

00:23.280 --> 00:27.070
So when we take in two three fives the only value that should be coming back is 1.

00:27.100 --> 00:31.590
We take this very long array and two and three it's going to return one is going to turn five is also

00:31.590 --> 00:37.260
going to return 1 again because it's in there so that's what our objective is here let's go ahead and

00:37.260 --> 00:38.710
jump into it.

00:38.730 --> 00:39.510
All right.

00:39.510 --> 00:48.820
So what I'm going to do as I don't think I even I can I think I can solve this on one line of code.

00:49.050 --> 00:57.010
And so our one is our original input here and we want to do is we want to filter the values out of here.

00:57.120 --> 00:59.130
So take our aliment whatever they may be.

00:59.160 --> 01:03.510
In this case it's numbers and arrows and change.

01:03.510 --> 01:08.350
This should probably number and this should probably be number.

01:09.080 --> 01:11.720
And what are we expecting or in terms of a number.

01:11.810 --> 01:12.650
Imagine that.

01:12.660 --> 01:14.580
So we'll fix that.

01:14.580 --> 01:18.620
And in our element what we want to do is turn all the values that are 9 or 2.

01:18.630 --> 01:20.490
So filter or filter out values are in there.

01:20.490 --> 01:24.560
So now we just sort of put our case as our callback function and once our case.

01:24.580 --> 01:29.390
Well where are two it includes.

01:29.400 --> 01:31.090
We'll check every value in there.

01:31.090 --> 01:36.660
Say includes that element.

01:36.660 --> 01:39.230
So you'll see right now it's returning all the true values.

01:39.240 --> 01:45.920
Well all we do to change that is go ahead and put a false flag on it and now we are done.

01:45.920 --> 01:47.060
We've solved it.

01:47.070 --> 01:52.510
It's not the most efficient one because it's a it's it's a squared solution meaning that we're going.

01:52.680 --> 01:58.110
Well yes it is because we're iterating through all the values now we're iterating through all the values

01:58.110 --> 01:59.610
in our two.

01:59.670 --> 02:08.460
So not exactly squared but there is a better way to solve this where we could essentially create two

02:08.460 --> 02:10.750
objects two maps and.

02:11.150 --> 02:12.510
And.

02:13.800 --> 02:16.110
I mean I guess I'm talking about Meisel do it right.

02:16.110 --> 02:18.150
So that's one solution.

02:18.450 --> 02:27.870
So we can do is create a key value pair here and we've done this a couple other times before where we

02:27.870 --> 02:28.640
were at a function.

02:28.650 --> 02:32.610
Actually I'm going leave it for you guys to do where the other way that we can solve this is we can

02:32.610 --> 02:37.020
write a function that takes this array and creates a key based on these numbers.

02:37.200 --> 02:42.270
And then we check to see if it doesn't have the same property as what's in this object.

02:42.360 --> 02:45.000
If it doesn't we can just add it to an array in return.

02:45.030 --> 02:46.650
It's going to be a much faster solution.

02:46.760 --> 02:50.790
Well I leave that to see if you guys can solve and I have faith that you'll be able to blast pretty

02:50.790 --> 02:57.870
much where and this in our example here we're just filtering out the values that are not in here just

02:57.870 --> 03:02.310
sort of making sure that we know how to use the you know array callback.

03:02.490 --> 03:02.730
It's.
