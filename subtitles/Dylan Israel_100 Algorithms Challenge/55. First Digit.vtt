WEBVTT

00:00.840 --> 00:04.200
All right first digit is a fun one.

00:04.590 --> 00:09.350
We're going to be taking a string and we want to return the left most digit.

00:09.570 --> 00:11.910
So a number from 0 to nine.

00:11.970 --> 00:21.620
The way that I saw this was with includes and split and have some pizza Neumont gassy.

00:21.680 --> 00:22.500
Sucks getting old.

00:22.530 --> 00:28.820
And you know that's our objective return the left most digit here.

00:28.860 --> 00:29.560
Those are hints.

00:29.570 --> 00:31.650
Let's jump into it.

00:31.650 --> 00:39.120
All right so what I saw this was I created a digit array which is a an array of string of five numbers

00:39.120 --> 00:40.530
from 0 to 9.

00:40.530 --> 00:47.200
I then split up our input string and I checked each individual character to say hey is this in here

00:47.220 --> 00:49.260
if it is go ahead and return that value.

00:49.500 --> 00:50.540
That's how I solve this.

00:50.670 --> 00:52.540
So let's go in and create our digits.

00:53.540 --> 00:55.050
Whoops.

00:55.050 --> 00:55.910
Digits.

00:56.010 --> 01:00.420
This is going to be an array and then here we're going to have one too.

01:00.530 --> 01:05.440
And it's actually for a zero zero zero one two.

01:05.510 --> 01:12.000
And I don't have to go in the order of it makes sense to put them numerically in one way or the other

01:15.450 --> 01:16.590
for a parent's sake.

01:16.600 --> 01:23.250
I guess for easy for easy keeping of the new marrows.

01:23.370 --> 01:24.840
All right.

01:25.420 --> 01:26.880
So we have her digits.

01:26.880 --> 01:36.340
Next we're going to do is we're going to create a character char's and you know what I am and return.

01:36.360 --> 01:42.960
This is a string for you to set this up and this is for returning a string as well but a digit string.

01:43.050 --> 01:43.660
Right.

01:43.930 --> 01:46.570
Let's look back at the read mirro real quick yes.

01:46.590 --> 01:51.970
A digit string called are so char's this is going to be all three.

01:52.170 --> 02:01.340
And here she is and we're splitting it from the right input does input string split on each character.

02:02.310 --> 02:06.960
Now what we do is we just want you for loops say left eye equals zero.

02:06.990 --> 02:16.490
All I do is less an input string length because we want to iterate through the whole thing potentially.

02:17.880 --> 02:25.380
And then we just do a check here say look if digits dot includes

02:27.540 --> 02:31.570
includes the current iteration input string.

02:32.760 --> 02:39.270
If that is a true statement meaning that it's there all we want to do now is return input string.

02:39.390 --> 02:43.720
I like so and I forgot to launch Koka.

02:43.950 --> 02:44.570
That's fine.

02:44.760 --> 02:45.910
Well lauching you'll see.

02:45.990 --> 02:47.720
There it is.

02:48.180 --> 02:53.850
I think this is a very intuitive and simple way to solve this but I wouldn't be surprised if there is

02:53.850 --> 02:56.700
another way of doing it as well.

02:56.700 --> 02:58.210
But yeah that's how I did it.
