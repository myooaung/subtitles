WEBVTT

00:00.580 --> 00:02.600
All right contains duplicates.

00:02.610 --> 00:08.760
So our objective here is we are taking an array of values and we want to find out if there are any duplicate

00:08.760 --> 00:09.720
numbers in here.

00:09.720 --> 00:12.540
So in the array 1 2 3 1 there's 2.

00:12.540 --> 00:17.620
So it's true it's true there are there is in fact duplicates in the array 3:01.

00:17.700 --> 00:23.310
It's false because there are no Duplin it's the only method that I used in here for a hand is sort of

00:23.310 --> 00:26.880
the you could solve this in numerous different ways.

00:26.880 --> 00:30.640
All right so the way I solved this was I created I didn't creating.

00:30.690 --> 00:30.980
Susan.

00:30.990 --> 00:38.430
Hi modified our input array and I sorted it to get each values if they're duplicates to be in some certain

00:38.460 --> 00:39.990
order list right there.

00:40.000 --> 00:42.780
So say eight.

00:44.310 --> 00:48.110
And in here we'll just join a and a B.

00:48.720 --> 00:56.520
We want to return a minus B which will return the array sorted and we're going to return false to the

00:56.520 --> 00:57.470
bottom here.

00:57.810 --> 01:03.690
And what we're going to do is read iterate through the array that we just sort in to see if we can find

01:03.690 --> 01:08.910
out any true cases in the cases of which there are duplicates and all we're going to do is iterate through

01:10.230 --> 01:21.020
and check to see if the current item we're iterating on is exactly equal to the next item A-line plus

01:21.020 --> 01:22.670
1.

01:22.830 --> 01:25.860
And if it is going to return TRUE THAT'S IT.

01:25.860 --> 01:27.240
We found our duplicates.

01:27.360 --> 01:30.140
If it's able to get through this whole array without finding duplicates.

01:30.150 --> 01:31.140
Great.

01:31.380 --> 01:31.890
We're good.

01:31.890 --> 01:33.030
We don't have to worry about it right.

01:33.030 --> 01:35.930
This returns true because there are this one returns false.

01:35.940 --> 01:37.580
So that's how I solve it.

01:37.590 --> 01:39.220
Although there's a couple different ways.

01:39.240 --> 01:43.130
Oh I thought this was pretty pretty clean too to go about it.

01:43.170 --> 01:45.930
And you know basically one for loop which is nice.
