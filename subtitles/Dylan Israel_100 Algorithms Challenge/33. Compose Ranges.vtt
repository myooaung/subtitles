WEBVTT

00:02.800 --> 00:10.670
All right composer arranges this is actually one of the ones Google has on code fights and they rank

00:10.680 --> 00:13.530
it as easy I believe.

00:13.720 --> 00:14.900
And 15 minutes.

00:14.900 --> 00:18.500
So this one definitely did take me 15 minutes when I solved it originally.

00:18.930 --> 00:21.060
I saw this about a year and a half ago.

00:21.400 --> 00:23.110
I might be able to get a different solution.

00:23.110 --> 00:23.550
We'll see.

00:23.560 --> 00:24.350
We'll do this.

00:24.370 --> 00:26.810
The solution I did and go and mess with it.

00:26.980 --> 00:33.340
But basically we're going to be taking in an array of numbers and we want to figure out how we can travel

00:33.340 --> 00:36.590
between essentially So you'll see we have the serial numbers.

00:36.610 --> 00:43.390
And so we can go negative 1 to 2 while hitting every number in its path and then we can go six to seven.

00:43.390 --> 00:49.960
And then when you go 9 so right that's our objective is to essentially output a string so showcasing

00:50.200 --> 00:55.960
pairs of numbers we can where we're iterations we don't need to have those and put They are all in between

00:55.960 --> 00:56.600
them.

00:56.650 --> 01:00.660
The only hint I really have for you is I use push to solve this.

01:00.800 --> 01:02.380
Go ahead and jump into it.

01:02.410 --> 01:05.110
But really I mean at this point push is nothing.

01:05.110 --> 01:06.750
This is all logic.

01:07.420 --> 01:13.710
So the way that I solve this is like creating an array which I gave a really awful name like this called

01:13.720 --> 01:17.180
new array that band name.

01:17.350 --> 01:24.460
And we we start initialize it to the start as with an object in it that has a start point and an endpoint

01:24.580 --> 01:25.870
that are on that object.

01:25.900 --> 01:29.980
And what we're going to do is we're going to iterate through the values and we're going to find out

01:30.370 --> 01:36.050
if the values in it can increment by 1 essentially do we have this value.

01:36.190 --> 01:43.200
And if we can we're going to add one was good and just jump into quite a bit of logic in here just for

01:43.210 --> 01:46.840
loops where it gets kind of messy which is why I think I could probably refactor it.

01:46.840 --> 01:53.480
So let's start and we'll create an array and we'll still call this ranges.

01:54.100 --> 01:55.040
So the same goes here.

01:55.040 --> 01:58.800
So our example here we're going to initialize it to zero.

01:59.030 --> 02:04.780
It works re-initialize a object in here and we have a start point.

02:04.800 --> 02:07.310
Is this going to have.

02:07.450 --> 02:14.950
No I thought I saved it numbs 0 and it's going to have an end point and then we're also going to initialize

02:15.050 --> 02:17.350
the numbers 0.

02:17.960 --> 02:21.800
So now that we have that what we're going to do is really going to iterate through the array on the

02:21.800 --> 02:23.290
first index value.

02:23.630 --> 02:26.660
And if we wanted to do this properly

02:29.480 --> 02:34.940
you know we we we might if we have we we.

02:34.950 --> 02:40.550
If so I guess what I'm trying to say is we should probably do a check that there's a number 0 before

02:40.550 --> 02:43.600
we ever get to here because it's not we're going to have an here.

02:43.880 --> 02:57.650
So we could do something like this so if Gnome's length is less than 1 return on just return to return

02:57.650 --> 02:58.440
the degree.

02:58.580 --> 03:01.000
There's nothing to change.

03:10.110 --> 03:10.760
My goodness.

03:10.820 --> 03:11.480
Return.

03:11.520 --> 03:12.820
OK here we.

03:13.430 --> 03:16.640
Area will return an empty array.

03:16.850 --> 03:23.440
So we should do that check just because we don't it could break if there's not something there.

03:23.450 --> 03:33.200
So it's good and write a for loop or for what i 0 0 is less than which is going to be one because we

03:33.200 --> 03:33.950
initialized it.

03:33.950 --> 03:39.270
You don't need to do that King is less than the numbers length

03:41.930 --> 03:44.000
plus plus.

03:44.210 --> 03:56.620
All right now we're going to say if Nom's excuse me if the ranges and what are rechecking here ranges

03:57.890 --> 04:06.840
of length minus 1 if it has an end meaning the current item we're iterating over.

04:06.910 --> 04:11.280
Go ahead and add up plus one or other.

04:11.350 --> 04:20.430
Go ahead and see if it's equal to the gnome's value.

04:20.460 --> 04:28.420
So if our current current value if our current ranges length minus one dot and it plus one is equal

04:28.430 --> 04:29.230
the those.

04:29.480 --> 04:38.810
We want to do this we want to go ahead and take green on that point and we just copied this over

04:43.390 --> 04:50.830
and we want to go ahead and say that N is equal to Gnome's.

04:51.460 --> 04:55.450
So the reason that we can do this is the array is already sorted.

04:55.460 --> 04:59.210
If for some reason the array wasn't sorted in this case we don't have to worry about it.

04:59.440 --> 05:01.900
But we would have to sort the array for this logic to work.

05:01.900 --> 05:02.940
So keep that in mind.

05:03.100 --> 05:10.390
So what we're doing is saying hey if this if the end value plus one is equal to the next value go ahead

05:10.420 --> 05:15.880
and just update the end value because we're going to eventually take this object and then we're going

05:15.880 --> 05:19.490
to add the carrots with the start in the end.

05:19.650 --> 05:22.320
That's what the arrow right.

05:22.540 --> 05:29.650
So if it's not all we're going to do is we're just going to initialize a new one or say ranges push

05:29.850 --> 05:36.220
and push a new object on here with a start and we'll go ahead and say we Gnome's I.

05:36.850 --> 05:41.490
And an end that will also be Nomes.

05:42.030 --> 05:45.180
And now we have all the data that we need.

05:45.340 --> 05:49.840
Now I'm actually going to go ahead and make this in any array implicitly because we're going to actually

05:49.840 --> 05:53.200
be modifying this into a string array.

05:54.160 --> 06:04.730
I guess we could do a object array or a string array to be a little bit more specific.

06:04.750 --> 06:05.570
Should we find

06:12.680 --> 06:21.290
just like it does it will look like you at any rate Phil wants to be sassy in every single way he can

06:21.800 --> 06:23.010
clean up a little bit.

06:23.360 --> 06:27.380
So next what we're going to do is write iterate through the array one more time starting on zero.

06:27.410 --> 06:34.090
So say for a let J we do I am I see zero.

06:34.340 --> 06:42.170
0 is less than the new array range is not length.

06:42.170 --> 06:42.920
Plus plus

06:46.280 --> 07:01.250
And what we're and do is if our range is on-I does start does not equal the goal to the ranges and

07:04.470 --> 07:12.810
we are going to go ahead and set the arrow value meaning that there is if the start value and value

07:12.810 --> 07:13.530
are different.

07:13.530 --> 07:16.770
It means that we've added some numbers in between.

07:17.520 --> 07:23.850
But if they're the same if it's one start one end because the next one we joked to was five then we're

07:23.850 --> 07:30.510
just going to return that number right we don't actually want to we don't need to do anything there

07:30.540 --> 07:33.860
other then convert it to a string for for example.

07:33.870 --> 07:40.120
So if that's the case or we're going to do is we're going to go ahead and take ranges.

07:40.770 --> 07:45.540
And we're going to set it equal to some tactics here.

07:45.690 --> 07:51.450
The dollar sign ranges start

07:57.920 --> 08:00.110
cats like looking at me.

08:00.200 --> 08:02.030
I want to jump in here.

08:02.570 --> 08:05.870
So everybody we're busy Granges I end

08:09.790 --> 08:10.880
cool.

08:10.930 --> 08:20.460
Now if it's not then we just need to go ahead and take that current value and we'll say ranges.

08:20.730 --> 08:26.290
And we just said it equal to itself the start value or the end doesn't really matter.

08:26.540 --> 08:31.380
So I start to string.

08:32.530 --> 08:34.840
And then finally at the end here I forgot to do.

08:34.850 --> 08:38.120
But we're going to return ranges and we're done.

08:38.290 --> 08:43.760
So you'll see here that we're going from negative 1 to 2 6 to seven and then nine.

08:43.780 --> 08:49.270
So the logic here is that we're creating this object where restoring a start point and an end point.

08:49.510 --> 08:57.170
And we are going to increment up our end point Intel Intel It doesn't work anymore.

08:57.480 --> 09:04.650
And so if our previous And plus one is equal to our current item increment If not go ahead and create

09:05.080 --> 09:05.830
a new value.

09:06.010 --> 09:11.990
Push it to our ranges then we're just going through here and we're applying the filtering.

09:12.010 --> 09:14.140
But the transformation that we want.
