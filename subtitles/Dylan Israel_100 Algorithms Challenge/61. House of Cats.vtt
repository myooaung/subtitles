WEBVTT

00:00.780 --> 00:04.520
All right so you're in a house.

00:04.710 --> 00:12.210
There's people and there's cats in the House who want to return an array of all the values of two of

00:12.300 --> 00:15.680
every possible number of people that could be in the house.

00:15.870 --> 00:18.920
Given that we only know the amount of lakes.

00:18.960 --> 00:26.350
There's no discrepancy discrepancy between how many how many people how many legs are of people.

00:26.370 --> 00:29.800
We just have to come up with the number based off of how many legs there are.

00:29.850 --> 00:33.440
So Each cat has four legs there's no unfortunate accidents with the cats.

00:33.540 --> 00:34.920
And every person has two legs.

00:34.920 --> 00:39.240
Everyone was born with or no unfortunate accident with their legs.

00:39.240 --> 00:43.770
And so we have to figure out OK if there's a total of six legs.

00:43.770 --> 00:48.810
What that means is that there is either three people one person.

00:48.810 --> 00:53.280
Right because there can't be two people and one cat because then that would be eight legs.

00:53.280 --> 00:54.720
That's our objective here.

00:54.720 --> 00:57.120
I don't really have any hints for you.

00:57.120 --> 00:58.530
Actually I'm so sorry.

00:58.530 --> 00:59.010
Take it back.

00:59.010 --> 01:06.330
I use shift and push on here as I was solving this algorithm.

01:06.330 --> 01:09.960
So that was something I did use.

01:09.970 --> 01:15.520
All right so the way I did this was I kept track of an array called people count that I pushed numbers

01:15.520 --> 01:24.430
to or shifted numbers to and at the end of it what I did was I returned that number two while having

01:24.430 --> 01:28.410
a while loop that wall legs were greater than or equal to zero.

01:28.420 --> 01:35.640
We wanted to shift a value to the front that kept track of legs divided by two.

01:35.680 --> 01:37.760
Now we wanted to minus four by legs.

01:37.930 --> 01:39.760
Now this is basically a math algorithm.

01:39.760 --> 01:46.690
At the end the day where you have to figure out all of the all the values in-between for every cat that's

01:46.690 --> 01:49.330
essentially for how many people there can be.

01:49.330 --> 01:58.030
And so we're adding every value every current value of legs that comes in divided by two so that we

01:58.030 --> 02:03.760
can then from there minus four because that's how many human legs have gone missing.

02:03.760 --> 02:09.010
Right that's We now where we're how many catalogs have gone missing and that's really what we're going

02:09.010 --> 02:11.160
in we're going through all the values.

02:11.290 --> 02:14.900
It took me a second to wrap my mind around this a little bit.

02:14.980 --> 02:21.160
So we're going to keep track of what is a number the empty array here and you'll see that I'm going

02:21.160 --> 02:23.200
to at the end here return.

02:23.440 --> 02:24.100
People can.

02:24.160 --> 02:31.180
Now one thing that happened was one of the edge cases where my logic broke was when the legs was greater

02:31.180 --> 02:32.600
than or equal to zero.

02:32.600 --> 02:38.380
And so what I did was I did something here were plague's is equal equal to equal to two.

02:38.590 --> 02:48.010
And then looking back at this I if legs was equal equal to two rather I pushed people count push the

02:48.010 --> 02:50.110
value of two.

02:50.320 --> 02:53.500
Excuse me one because there is only one person at that point.

02:53.560 --> 02:55.780
And then we go ahead and return people count.

02:56.020 --> 03:01.180
And I think we're going to be doing some refactoring right now where instead of pushing this out there's

03:01.180 --> 03:02.700
really no reason to push it.

03:02.740 --> 03:04.370
It's just an extra method that we have.

03:04.450 --> 03:11.620
We can call and said we'll just say we just return an empty array here of 1.

03:11.620 --> 03:12.460
There you go.

03:12.510 --> 03:13.300
I think we need to push.

03:13.300 --> 03:15.330
And I think we're even going to end up eliminating that.

03:15.340 --> 03:22.870
Now I'm looking at my code so well now that 70 for all cases where we have more than two legs is greater

03:22.870 --> 03:24.290
than or equal to zero.

03:24.580 --> 03:32.340
We want to run this loop and on our people count we want to shift legs divided by two.

03:32.350 --> 03:38.180
That's going to return the latest value from our front.

03:38.320 --> 03:39.760
That's going to turn the latest

03:42.570 --> 03:49.440
the latest legs and it's going to return the current count of legs divided by two and it's going to

03:49.440 --> 03:53.180
move it to the front because we're coming from above and not below.

03:53.400 --> 03:56.030
And so the other thing that we need to do is you take legs.

03:56.040 --> 03:57.030
We need decremented right.

03:57.030 --> 04:04.060
There is an R R R R AB right now is it working display thinks it's because we're in an infinite loop.

04:04.150 --> 04:05.810
Our while loop never ends.

04:05.850 --> 04:09.020
So we have to take place soon minus equal four.

04:09.450 --> 04:13.830
And now we get the values here and that's pretty much it.

04:13.950 --> 04:16.770
But let's see if we can find a way to eliminate

04:23.430 --> 04:28.710
eliminate Lagos and this a sign you guys I'm sure can figure out a way.

04:28.820 --> 04:34.610
I just keep coming back to the logic here that we're going to the reason this was here also was that

04:34.610 --> 04:40.710
if minus equals four for every one of these doesn't work for this because I will get negative too.

04:41.510 --> 04:41.870
So

04:44.600 --> 04:50.960
actually it might just remove that that works just fine.

04:51.930 --> 04:53.250
Why did I have this this way.

04:53.250 --> 04:59.670
So sometimes you get overly complicated when you are solving your own logic and causes issues.

04:59.940 --> 05:01.630
I think this might cause issues.

05:01.650 --> 05:02.610
We did this.

05:02.810 --> 05:03.440
Yes.

05:03.600 --> 05:09.000
That might have been what it was when it's for we get zero and two and we just do something like that.

05:09.510 --> 05:12.690
And that doesn't work either.

05:13.940 --> 05:16.260
But yeah this worked for me when I solved it.

05:16.260 --> 05:17.420
So not a perfect solution.

05:17.420 --> 05:21.510
I looking at I think we could do better but it did get the point across.

05:21.510 --> 05:23.120
Did solve the algorithm.
