WEBVTT

00:00.660 --> 00:03.660
All right so this was a interesting one.

00:03.660 --> 00:10.950
I just did this on fights and this is from a company called a sauna and it's just one of the company's

00:10.950 --> 00:11.720
challenges.

00:11.730 --> 00:13.440
Now they give you.

00:13.470 --> 00:19.080
They classify this as a medium difficulty and they expect you to solve it in 15 minutes.

00:19.080 --> 00:22.510
I did it in about six minutes 15 seconds to be exact.

00:22.530 --> 00:26.180
That includes you actually reading through this very large prompt as well.

00:26.340 --> 00:33.180
So what I did here are what the objective is here is that we are essentially trying to organize tasks.

00:33.180 --> 00:39.300
You have these wonderful infographics with some examples to give you an idea but basically your tasks

00:39.420 --> 00:41.220
are go in three different things.

00:41.220 --> 00:43.010
There is a array.

00:43.140 --> 00:46.460
The first values today second values upcoming.

00:46.470 --> 00:48.020
And the third value is later.

00:48.210 --> 00:54.890
So today counts for any values any any days that have passed.

00:54.890 --> 01:03.690
So we're taking it day as well so any day here we were saying hey you know any values that are on that

01:03.690 --> 01:09.570
day or earlier are going to be classified as today any values that are within a week of the day are

01:09.570 --> 01:17.430
going to be classified as as upcoming and any values after a week are going to be classified as later

01:17.430 --> 01:20.130
and we need to return answers like that.

01:20.130 --> 01:22.870
I don't really have any hints for you.

01:22.980 --> 01:27.950
This is a sort of logic problem here really at the end of the day.

01:28.280 --> 01:29.750
Just go ahead and get started.

01:30.150 --> 01:37.390
So the first thing that stood out to me is that this was an excellent example of of why we have Ray

01:37.410 --> 01:44.320
destructuring and what I mean by that is we're returning a today upcoming And later a value in an array.

01:44.490 --> 01:53.960
And so I start out by creating that array we have today a upcoming and a later value here we're just

01:53.960 --> 01:58.170
going to initialize this joint array with a bunch of 0 because we don't know what's in there yet.

01:58.260 --> 02:03.300
But now we can target each one of these index spots and it makes our code a lot more readable than saying

02:03.300 --> 02:09.720
you know making this you know tasks tasks and then tasks that protests one task to right in terms of

02:09.720 --> 02:11.820
their Soumik our code a lot more readable.

02:11.820 --> 02:20.070
Now we're going to iterate through each of the deadlines so assert are two deadlines for each and we're

02:20.070 --> 02:26.460
just going to say deadline right and do the arrow function here and now.

02:26.790 --> 02:35.670
At the end here what we want to return is an array with today with upcoming and with later in there

02:36.090 --> 02:38.340
that's what we want to return here.

02:38.370 --> 02:44.520
Now we're using this as a lead because we're going to be incrementing these values in just a second.

02:45.060 --> 02:48.750
So how can we go about solving the swap if you understood the rubric.

02:48.750 --> 02:54.740
This is basically an if else if else sort of situation where we can just say hey if the deadline for

02:54.750 --> 03:00.630
the current value that we're checking the index is less than or equal to the day that's being passed

03:00.630 --> 03:04.650
then go ahead and increment that by Once we're going to do it today.

03:05.280 --> 03:13.650
Plus plus else if our deadline is within a week of our day.

03:13.710 --> 03:28.740
So if deadline is greater than or equal to day plus 1 or is deadline or excuse me and deadline is less

03:28.740 --> 03:32.250
than or equal to day plus 7

03:35.190 --> 03:40.870
we go ahead and say upcoming plus plus.

03:41.100 --> 03:51.620
Now if deadline or else rather else meaning that it's pay the deadline isn't before it's not upcoming

03:51.660 --> 03:57.280
So it must be later we can go and just say later.

03:57.750 --> 03:58.920
Plus plus.

03:58.920 --> 04:03.300
And that's pretty much it at the end of the day we're just need to understand that we're modifying these

04:03.300 --> 04:08.800
index values for other items and then by reading through the tax we understand that what defines a deadline

04:08.800 --> 04:15.590
is today what defines an upcoming deadline and what defines a her deadline.

04:15.780 --> 04:23.410
And I I really like this because I haven't really had a chance to use array destructuring I use object

04:23.410 --> 04:24.360
to structure and quite a bit.

04:24.380 --> 04:28.750
But this really stood out to me and is a great example as to why you might do something like that.
