WEBVTT

00:00.590 --> 00:10.980
All right firm actor firm firm firm actor firm actor our firm here takes in a single number N and we

00:10.980 --> 00:21.510
want to find out what the number is such that what would be two numbers if we minus a minus B to the

00:21.510 --> 00:22.720
second power we would get.

00:22.720 --> 00:30.840
So we're expecting to return a single dimension array with two values in four and one for the number

00:30.840 --> 00:37.900
15 because 15 is equal to four the second minus one to the second second power.

00:37.920 --> 00:41.090
So that's what we're going to need to return here.

00:41.910 --> 00:48.720
And in terms of Hanse the only thing I have for you is that you use math thought Pau in my solution.

00:48.740 --> 00:49.170
All right.

00:49.170 --> 00:58.160
So the way that I solve this was I created a essentially a nested for loop would do for loops and I

00:58.470 --> 01:05.790
then for the first four loop I took the second power to minus the second power from the second for a

01:05.790 --> 01:11.400
loop and I checked if it ever met the number and if it did we're going to return that I and that J are

01:11.400 --> 01:14.040
those two iteration numbers.

01:14.040 --> 01:14.870
That's pretty much it.

01:14.860 --> 01:18.510
So let's say four equal to zero.

01:19.780 --> 01:22.390
While it is less than an.

01:22.470 --> 01:25.130
Right because that's the max number we're going to.

01:25.200 --> 01:29.940
And in reality is probably end divided by two or something like that.

01:30.910 --> 01:32.630
Although.

01:33.010 --> 01:34.410
Oh we don't need to worry about that.

01:34.410 --> 01:37.720
But I feel like we could probably limit the size of that.

01:37.890 --> 01:44.370
And we're actually set this one because in the cases there there was no you know how do we get to zero

01:44.910 --> 01:50.780
or anything like that we are always anticipating a number that was growing.

01:50.820 --> 01:54.360
So our condition here is while J is less than I.

01:54.420 --> 02:01.700
Meaning that when we're subtracting something we're dealing in positive integers and thus J So should

02:01.710 --> 02:05.620
on here will never be larger than I.

02:06.150 --> 02:06.980
So why that's true.

02:06.990 --> 02:07.430
Go ahead.

02:07.440 --> 02:08.810
Add 1 to J.

02:09.300 --> 02:13.100
And now we just asked to do some basic math on my credit card here.

02:13.110 --> 02:18.340
I just called total and we're going to math thought POW.

02:19.740 --> 02:28.380
The letter I the second are the index minus math thought POW J.

02:29.580 --> 02:37.100
And all we're going to do here is if total is equal equal equal to N. meaning they are the same value.

02:37.110 --> 02:42.780
We want to return an array of I followed by J.

02:42.780 --> 02:43.580
That's pretty much it.

02:43.580 --> 02:45.710
And one way that we can actually clean this up.

02:45.870 --> 02:50.070
I'm not sure if this works quite yet is we could do this.

02:50.120 --> 02:52.790
Star Star 2 and that would work as well.

02:52.790 --> 02:58.230
This is the new shorthand way of doing a math thought that was added.

02:58.230 --> 03:04.600
I want to say an iOS 8 maybe iOS 7 so it looks like that's going to work just fine as well.

03:05.360 --> 03:07.600
So it's veejay.

03:07.770 --> 03:08.600
There we go.

03:09.060 --> 03:12.330
So that's another cool thing that we can do for it.

03:12.510 --> 03:15.050
But that's pretty much it.
