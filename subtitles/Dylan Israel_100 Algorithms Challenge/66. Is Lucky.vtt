WEBVTT

00:00.630 --> 00:03.370
So is Lucky is a fun one here.

00:03.450 --> 00:07.110
We're going to be taking in a number a ticket number.

00:07.110 --> 00:13.230
We want to find out if it's a lucky number a lucky number is defined as where you can add the first

00:13.230 --> 00:21.240
half of the integers such as 1 2 to equal 3 and 3 zero to equal three if those two halves are equal.

00:21.420 --> 00:27.870
We consider that a lucky number if they are not such as in this instance where this is eight and this

00:27.870 --> 00:29.310
is 14.

00:29.370 --> 00:32.340
It is a unlucky number and thus it's false.

00:32.340 --> 00:38.160
That's the objective here to write a function I'll do it for us the way that I solved it.

00:38.160 --> 00:39.220
I used to String.

00:39.210 --> 00:43.720
Substring split reduce and parsing quite a bit of methods here.

00:43.950 --> 00:49.170
A couple of these I think I may be able to eliminate at second glance but we're going to solve it this

00:49.170 --> 00:49.710
way.

00:49.710 --> 00:52.700
Let's go ahead and dive into it.

00:52.740 --> 00:53.050
All right.

00:53.090 --> 01:00.450
The way that I saw this was I as I take our string our number and I convert it to a string from here

01:00.450 --> 01:07.980
I get the length of that string and then I simply get the first half and I split it up in characters

01:07.980 --> 01:12.290
and I parsed those ints and then I reduce it and then I take the second half.

01:12.300 --> 01:14.070
I do the same thing.

01:14.190 --> 01:20.220
Now at first glance we may be getting some issues because I did this in javascript originally and not

01:20.250 --> 01:21.010
in typescript.

01:21.030 --> 01:26.940
They want us to have types and they are probably not going to like that we're going to try and reduce

01:26.940 --> 01:31.800
a string and parse it as they want but we'll take care of that as we move on.

01:31.800 --> 01:35.540
So first thing we're gonna do is Ram convert into a string.

01:35.820 --> 01:47.800
So we'll just create a cancer and we'll say Lucky lucky n is equal to and to string.

01:47.910 --> 01:52.660
And what we want to do is we want to go ahead and get the halfway point.

01:52.950 --> 01:57.480
That's going to be so that we know what substring that we want from all of this.

01:57.540 --> 02:01.880
And so we're in I say lucky n dot length.

02:02.430 --> 02:07.080
Half is equal to Lucky and length divided by two.

02:07.080 --> 02:09.670
Right that's going to give us our halfway point.

02:09.690 --> 02:15.960
The reason we can do divide by two that the fancy logic is it's in the in the read me if we read a little

02:15.960 --> 02:20.430
bit more down in the details we know that we're always going to get even numbers and we don't have to

02:20.430 --> 02:20.630
fear.

02:20.640 --> 02:22.870
There is no figuring out for odd numbers.

02:22.870 --> 02:24.840
That's not part of this problem.

02:24.840 --> 02:29.370
Next we're going to re-assuring to get the first half of this where we may have to change some of our

02:29.370 --> 02:30.010
logic.

02:30.150 --> 02:36.330
But we're going to take lucky n our string the FIDE number that comes in and get that substring here

02:36.390 --> 02:43.290
starting at 0 to the halfway point and then we're going to get the second half here and I'm going do

02:43.310 --> 02:53.810
this piece by piece second half and we're going to set it equal to lucky n dot substring.

02:53.810 --> 03:00.210
Except now we're getting started at the halfway point and we're going to go all the way for the length

03:00.300 --> 03:01.170
of lucky

03:04.230 --> 03:08.410
lucky and play nice.

03:08.430 --> 03:11.850
So now we have those two substrings from here.

03:12.030 --> 03:16.680
When do you want to split these into a character array.

03:16.870 --> 03:20.190
Boy you're going to cancel that log just so that we can see where we're at right.

03:20.250 --> 03:21.690
Because we're doing a lot of functions.

03:21.810 --> 03:25.700
Well you'll see here we're splitting the first half into a character.

03:25.920 --> 03:27.530
One in two right.

03:27.870 --> 03:35.850
So what we want to do next is we want to use this second one is this section second function call here

03:36.480 --> 03:39.590
just in case anyone's confused.

03:40.710 --> 03:44.450
So now that we've done that well we're going to do is we're going to reduce.

03:44.450 --> 03:51.010
Now I think what's going to happen is we're going to get an error here because you can't reduce strings.

03:51.770 --> 04:00.780
And so when we try to reduce care even though we're going to return parce and you'll see something you

04:00.810 --> 04:05.230
can't do during this happened earlier and another one where we did something like this.

04:05.280 --> 04:10.080
So we're going to do instead is first we're going to map the values here.

04:10.080 --> 04:17.550
We're on a map the we'll just caught char and in here what we want to do is return an array that is

04:17.550 --> 04:21.790
going to return a parsed and version of that char.

04:21.930 --> 04:25.070
So we're in turn this into a number array at this point.

04:25.440 --> 04:30.050
And then we are going to reduce it.

04:30.120 --> 04:33.440
Let's go ahead and wrap that like so just so that we can see.

04:33.780 --> 04:39.530
And we're going to reduce the characters and we'll just call this a and b for the time being.

04:39.900 --> 04:47.010
And actually it's you know one of them to no one to a little bit more descriptive and in here we're

04:47.010 --> 04:47.990
just going to return.

04:48.030 --> 04:48.300
No.

04:48.300 --> 04:50.710
1 plus 2.

04:50.870 --> 04:53.520
And so now you'll see we're getting our numbers 7 4.

04:53.580 --> 04:58.470
So we're going to do the exact same thing that we just did to the second string here.

04:58.470 --> 05:04.000
So much so that we can just take it like this and this would actually be that be a good time whenever

05:04.010 --> 05:05.660
you're duplicating logic.

05:06.190 --> 05:07.160
Timed right a function.

05:07.170 --> 05:12.110
So it's going to write a function real quick where we say we'll call we'll just call it total.

05:12.690 --> 05:14.990
And this is going to take in a.

05:15.050 --> 05:28.890
What we want this taken we've taken a scale taken a string and it's going to take a string bean.

05:31.260 --> 05:32.040
So taken

05:36.140 --> 05:40.490
and which is a string I don't have any good names coming up right now so.

05:40.500 --> 05:49.950
And then we're gonna call this half way point which will be a number and all we're going to do is take

05:49.950 --> 05:51.210
this logic here.

05:51.450 --> 05:59.130
That's right here and we're going to instead say return.

05:59.220 --> 06:02.720
And so strange too.

06:03.090 --> 06:07.600
And it's actually just call this half.

06:07.710 --> 06:08.700
Very nice.

06:08.970 --> 06:20.010
And on first half we're just to say get total we're going to pass and we're going to pass in the street

06:20.070 --> 06:23.590
which is lucky then and then we're going to pass in half.

06:24.240 --> 06:26.190
Excellent.

06:26.190 --> 06:32.340
And oh you know what I we're going to slightly modify this because I forgot that we are switching these

06:32.340 --> 06:34.480
variables which is fine.

06:34.500 --> 06:40.540
So instead of just passing and half we'll take this out and we'll pass in just a string.

06:40.650 --> 06:43.000
We'll get rid of the substring here.

06:43.090 --> 06:53.450
We'll take care of that logic ourselves on Lucky and we'll say lucky in this half dot substring.

06:57.210 --> 07:00.840
The zero on the half

07:05.260 --> 07:11.250
marry up and we're just going to go ahead and do the same for the second half here just a little bit

07:11.250 --> 07:14.600
of refactoring like we did a second ago and this is just really good.

07:14.680 --> 07:24.100
Total wham them and delete that.

07:24.150 --> 07:25.350
Very nice.

07:25.350 --> 07:25.790
All right.

07:25.830 --> 07:28.800
Now we have our two substrings and we're going to repeat our logic.

07:28.800 --> 07:34.320
We do it all here in this get toll function it's much cleaner it's much better.

07:34.320 --> 07:39.180
In theory this would be a you know we're not we haven't really talked about access modifiers but this

07:39.180 --> 07:40.730
would be a public function.

07:40.980 --> 07:48.180
And in time for us to do something like public is lucky and this would be a private function.

07:48.180 --> 07:52.320
We don't need to worry about that since these aren't technically classes.

07:52.500 --> 07:57.330
But if we're doing like class stuff this would be a private function that our public function consumes

07:57.810 --> 08:00.550
and all we have to do now is we're going to do a check.

08:00.660 --> 08:04.790
Hey is our first half total equals equal to our second half

08:08.040 --> 08:11.870
if it is true go return true if it's not returned false.

08:11.920 --> 08:15.080
So I clean up my code I did ternary here like a fool.

08:15.170 --> 08:17.620
Is just returning true or false.

08:17.790 --> 08:18.690
But that's pretty much it.

08:18.720 --> 08:24.290
At the end of the day just go over a logic grow quickly convert the end to a string then get the halfway

08:24.360 --> 08:27.410
point to know where we're going to get the substring value.

08:27.570 --> 08:33.150
And our function here we then convert it to an array of characters which then get mapped to an array

08:33.150 --> 08:38.280
of integers which then gets reduced to a single integer and then we do the same for the second half

08:38.280 --> 08:41.470
and then we compare the two to find out if it is in fact a lucky number.
