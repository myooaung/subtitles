WEBVTT

00:01.110 --> 00:02.100
All right.

00:02.130 --> 00:08.830
So we are on integer to string of fix with this quite a long one.

00:08.850 --> 00:15.810
Our objective here is we're going to take in a number and and a width and we want to modify that number

00:16.740 --> 00:22.890
by either making it the size of the width which could be smaller which means we're going to chop values

00:22.890 --> 00:28.610
or so in one two three four with with two we're going to return thirty four when the width is the same.

00:28.620 --> 00:31.090
We're going to return just the number.

00:31.260 --> 00:41.610
And then when the width is greater We're going to append or prepend excuse me prepend values of zero

00:41.640 --> 00:42.950
to the front of it.

00:43.110 --> 00:47.100
The way that I solve this was with concat substring and two string.

00:47.160 --> 00:54.710
And I believe we could do a pad start as well but that wasn't working when I originally did this.

00:54.720 --> 01:00.690
I believe Pat's heart came out in an essay but we'll see if we if it works in Koka And worry factor

01:00.720 --> 01:03.010
later on in this video.

01:03.590 --> 01:04.310
All right.

01:04.370 --> 01:09.300
So there's three cases we need to handle We need to handle when a number is shorter.

01:09.300 --> 01:16.410
We need to handle and numbers longer and we need to handle a in it when the number matches the width.

01:16.860 --> 01:23.650
So with that being said what I'm going to do here is I'm going to create quite early so waking up or

01:23.720 --> 01:26.870
I'm going to create what I just called string of fighting.

01:28.140 --> 01:34.530
And this is going to be equal to the number that gets passed in that two string.

01:34.560 --> 01:38.850
And at the end here we're going to go and just returned string of fives.

01:38.850 --> 01:41.770
No actually.

01:41.880 --> 01:48.340
Now what we're going to do is we're going to create a way of checking if it's longer than the with or

01:48.360 --> 01:49.380
less than the width.

01:49.530 --> 01:50.750
That's pretty straightforward.

01:50.760 --> 01:53.730
We can do this contest.

01:54.000 --> 02:03.100
I just call this number number with is equal to string a five dot length.

02:03.150 --> 02:11.160
And now what we're going to do is we're going to handle the instance in which number with is greater

02:11.160 --> 02:13.250
than with you less than.

02:13.690 --> 02:14.640
If number with

02:18.060 --> 02:20.120
is less than with.

02:20.310 --> 02:25.770
We need to do so stuff and this is part of the when you're solving these algorithm problems those people

02:25.770 --> 02:28.830
get very overwhelmed very quickly.

02:28.830 --> 02:33.410
One thing I want to just say I think this is a good example of it is start breaking problems down into

02:33.420 --> 02:39.540
each sort of edge case scenario where like here we have three things that we need to solve instead of

02:39.540 --> 02:40.790
thinking how to solve all three.

02:40.790 --> 02:45.550
They could have solved one at a time and it becomes a much simpler problem.

02:45.900 --> 02:46.190
All right.

02:46.200 --> 02:55.520
So what we're going to do in number with is less than our with is we want to pass some values from a

02:55.530 --> 02:59.870
good pads some values to the start to a string.

03:00.090 --> 03:02.630
And so we're going to go ahead and create a constant here.

03:02.640 --> 03:07.230
I just call this with diff because we need to know how many values to pass.

03:07.380 --> 03:16.230
And that's just going to be with Minus the number which we have now that we have that we're going to

03:16.230 --> 03:22.650
create this what I called pad start because I could use PAD start and where I said that to an empty

03:22.650 --> 03:23.960
string.

03:24.000 --> 03:28.260
This will be what we eventually can cast onto.

03:28.380 --> 03:33.140
Concat some zeros and then we're thinking cat or string if I know I'm on to pad start.

03:33.180 --> 03:35.970
So we're going to just create a little for loop here.

03:36.030 --> 03:41.520
He goes 0 0 is less than with diff.

03:41.670 --> 03:41.930
Right.

03:41.930 --> 03:50.010
So we know how many times 100 iterations I plus plus now that we have that we can just save PAD's start

03:52.140 --> 03:59.640
equals pads our dog and cat 1 and cat zero.

04:01.710 --> 04:04.250
And there really needs to be a string.

04:04.380 --> 04:12.420
So I think that now that we have that already in here all we got to do is return pad start dot concat

04:13.200 --> 04:15.800
And what are we going coming the string of five.

04:15.810 --> 04:20.070
Number two that's how we're going to handle the instance in which is too large.

04:20.490 --> 04:26.250
And the other way that we can handle it is for the less then we're just going to win if you're say if

04:26.250 --> 04:36.240
number with is less than current with or less than the passed in with parameter Either way we want to

04:36.240 --> 04:46.170
do is we can still go ahead and create this conference with if and we're going to do some refactoring

04:46.170 --> 04:46.630
here.

04:46.800 --> 04:54.960
And I said this week that with the minus number with an all we're going to do here is return String

04:54.960 --> 05:03.010
if I got substring because I will slice off some values and what we want where we want to start is we

05:03.010 --> 05:05.490
all start with the with diff value.

05:05.630 --> 05:09.970
And we want to go to the end of the string and find some length.

05:10.110 --> 05:14.120
So this is going to start essentially start from the end of the string up until the width.

05:14.190 --> 05:19.320
All right we're going to ignore it this isn't a zero and it's a one we're ignoring that first character

05:19.320 --> 05:20.530
right.

05:20.610 --> 05:22.630
So substring works.

05:22.870 --> 05:27.090
And now we have a working solution and we're done.

05:27.090 --> 05:29.150
But we can do some refactoring.

05:29.160 --> 05:30.590
Relatively easy.

05:30.650 --> 05:32.840
And so let's start with that.

05:32.910 --> 05:37.860
One thing I see that we have duplicate logic here there's no reason that we can go ahead and bring this

05:37.860 --> 05:40.100
here and get rid of it here.

05:40.110 --> 05:46.520
Everything still works very nice.

05:47.470 --> 05:52.380
And I always think that we can do is let's see if we can get pads start to work.

05:52.380 --> 06:00.450
So I believe instead of doing what we did here we go and call this out is let's just return

06:04.710 --> 06:12.620
return String if of pad start.

06:17.660 --> 06:19.300
Am I going crazy about Pat's story.

06:19.340 --> 06:23.810
I might I might have made a mistake with the name of it when I was here.

06:23.880 --> 06:26.820
And so it was

06:29.820 --> 06:36.750
yeah unfortunately it doesn't look like it's in the quote yet but so we won't be able to do that but

06:36.750 --> 06:44.250
basically a pad start does just so that we know is it can cats values to the front of the string depending

06:44.760 --> 06:47.440
depending on how many numbers you want to be passed in.

06:47.520 --> 06:51.960
So we pass in like oh this would be the length of our string right.

06:51.970 --> 06:57.470
This would be number with and then we have to came out in like EASA.

06:57.480 --> 07:01.430
Those are relatively new and looks like we won't be able to do it here either.

07:01.920 --> 07:08.380
But we asked would that be one or the factoring if they allowed us to do it we could.

07:08.940 --> 07:16.970
And I'll put a little comment here because I think it's important we'll come in here.

07:17.730 --> 07:19.460
But yeah that's pretty much it.
