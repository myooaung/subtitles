WEBVTT

00:00.700 --> 00:02.350
All right fun one here.

00:02.350 --> 00:08.860
So we're going to take in an array of integers and we want to find the largest product for adjacent

00:08.860 --> 00:09.620
elements right.

00:09.640 --> 00:12.930
So if we go to three times six is 18 or eight.

00:13.030 --> 00:21.800
So 6 so choose not to avail cussword here seven times three is the largest of the neighboring products.

00:21.850 --> 00:23.580
So that's what we're going to be doing here.

00:23.590 --> 00:25.020
I don't really have any hints for you.

00:25.060 --> 00:29.870
We're going to be iterating through an array and having some logic skills go ahead and dive into it.

00:30.670 --> 00:31.270
All right.

00:31.270 --> 00:36.760
So with that I like to do this is I need to have an initial baseline value right.

00:36.840 --> 00:39.340
And so you may be thinking oh why don't we just said zero.

00:39.340 --> 00:45.100
Well it's not in this case it's true because we only have one example here.

00:45.100 --> 00:52.760
But if you had 15 or 20 test cases which is a real life scenario you would have a You'd have to take

00:52.760 --> 00:59.800
any of multiplications into consideration so you can do is you can create a you just instantiate the

00:59.800 --> 01:04.920
largest product to be equal to the first inputs.

01:04.930 --> 01:13.680
So we have input arrays zero times input over a one.

01:13.930 --> 01:16.070
So we're guaranteed that we're going to have at least that.

01:16.180 --> 01:21.010
And then at the end here we're going to go ahead and return the largest product whatever it may be right

01:21.010 --> 01:23.710
now is 18 because we haven't done the iterations.

01:23.710 --> 01:26.160
Next we're going to do is we're going to iterate through four.

01:26.200 --> 01:27.300
Now we can't stand it.

01:27.300 --> 01:33.670
I to one because we already took care of 0 0 is never going to multiply by anything else but the one

01:33.670 --> 01:37.930
to it's right is ever and ever multiplied by anything is left it's just going to be the one so we can

01:37.930 --> 01:41.790
start on once as we've already done that no need to add that extra iteration.

01:42.010 --> 01:46.900
So we're going to do that while high is less than our input or Raceland right.

01:46.930 --> 01:51.690
We do it for all the values to solve our problem here.

01:52.360 --> 01:57.880
Now that we've done that we're going to create this local Conte's product here which is just going to

01:57.880 --> 02:02.900
be the input array input the Luray

02:08.760 --> 02:11.930
times input.

02:13.450 --> 02:16.090
Plus for this.

02:16.140 --> 02:21.050
If we were to cancel dialog the product will give us pretty much all our values.

02:21.070 --> 02:26.330
You're actually assuming that not a number here which is something I originally didn't take into consideration

02:26.350 --> 02:32.590
as solving this because not a number is but I think it's going to evaluate to a boolean false which

02:32.590 --> 02:33.760
would make it zero.

02:33.940 --> 02:38.990
But the way that we can fix this is the minus one right on our application here.

02:38.990 --> 02:40.120
Now we're good to go.

02:40.160 --> 02:45.180
So because the right most number there is a number to the right of it to multiply.

02:45.400 --> 02:50.330
So now that we've done that all we have to do here is we have everything we need.

02:50.410 --> 02:55.300
So we have our largest product and we're just going to try to turn an area here where we say hey if

02:55.300 --> 03:06.400
the largest product is less than our product set return product if it's not return largest product back

03:06.400 --> 03:14.650
to itself and now we're done pretty straightforward diving through it we initialize a value to the first

03:14.890 --> 03:21.550
the first value we iterate through skipping one on the starting skipping one on the end we then create

03:21.550 --> 03:26.770
a new product to compare it with our existing largest product and end it if it is larger.

03:26.770 --> 03:29.160
We said If not we just Research's value.

03:29.310 --> 03:30.880
And then we return the final product.
