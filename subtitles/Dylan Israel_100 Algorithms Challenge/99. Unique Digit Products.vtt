WEBVTT

00:00.780 --> 00:04.920
All right we have a fun one here for unique digit products.

00:04.920 --> 00:06.390
Now what is our objective.

00:06.390 --> 00:12.060
Well we're taking in an array of numbers and what we want to find out is how many unique values can

00:12.060 --> 00:18.780
be made when we create a multiple based off that number is giving example so to is going to return to

00:18.780 --> 00:20.910
cause it is only a single digit.

00:20.910 --> 00:21.540
Same with eight.

00:21.530 --> 00:24.510
So now we have two values now and 121.

00:24.510 --> 00:30.000
If we were to say one time two times one essentially treat these as individual numbers and multiply

00:30.000 --> 00:36.630
them we would get two so this would no longer be a unique digit then we would get eight still no unique

00:36.630 --> 00:40.950
digit because we already have 2 and 8 and then we're going to get 8 again and finally wearing it 6 so

00:40.950 --> 00:43.200
then we get three unique digits.

00:43.200 --> 00:44.700
That's the objective here.

00:44.700 --> 00:51.600
I use five different methods when solving this includes push two strings split and parse that I really

00:51.600 --> 00:52.570
enjoyed this one.

00:52.680 --> 00:59.820
And I think this is a good example of of sort of the difficulty a lot of these algorithm problems should

00:59.820 --> 01:01.170
be.

01:01.260 --> 01:03.070
Sometimes there is a lot harder.

01:03.090 --> 01:10.380
But I think like if I was to give an algorithm problem and I wanted to I would say this is a medium

01:10.380 --> 01:17.330
difficulty algorithm problem first cell for that's where I would place this medium is not hard.

01:17.410 --> 01:24.090
It's it's more complex than an easy one but this is probably in the medium maybe low tier medium range.

01:24.100 --> 01:32.340
All right so you get started here ringa and create a number array that just called products and here

01:32.490 --> 01:35.790
we're going to have a just.

01:36.120 --> 01:38.200
So they were expecting this to be a number.

01:38.370 --> 01:42.290
And at the end here what we're going to return is products dot length.

01:42.300 --> 01:45.920
We're only going to add unique values to our products.

01:46.230 --> 01:46.830
All right.

01:46.950 --> 01:53.240
So what we're going to iterate through all the values that are being passed on into our as our parameter.

01:53.460 --> 02:03.930
So just use a for each for here and we'll just call this number and we'll one do here is we are going

02:03.930 --> 02:08.240
to create a function called Get digit product.

02:08.250 --> 02:11.940
This to me was sort of I think it just meant cleaner code.

02:11.940 --> 02:17.730
When I was looking at it we don't have to do it like this but often times as I've been reading more

02:17.730 --> 02:24.310
and more about sort of separating the logic of your code here this makes sense.

02:24.330 --> 02:30.200
So we're going to pass in a number here and let's go and set up what we're going to do.

02:30.360 --> 02:37.380
So here we'll go and create a product and this is going to be equal to get digit product and we're going

02:37.380 --> 02:38.880
to pass in that number.

02:38.880 --> 02:44.610
Now our get digit product is going to go ahead and essentially take that number.

02:44.610 --> 02:50.070
We're turning into a string that split it up on a character and then we're going to multiply it and

02:50.130 --> 02:54.590
iterate through that array and find out the multiply value and that's what we're going to return.

02:54.600 --> 02:58.860
And then we're going to do a check to see if it's a unique value or not.

02:58.860 --> 02:59.310
All right.

02:59.330 --> 03:04.750
So let's go ahead and do it.

03:05.160 --> 03:06.820
So we're going to go there.

03:07.170 --> 03:10.920
We're going to go there conc digits.

03:11.070 --> 03:16.280
And this is going to be a string array and this will be equal to Nome.

03:16.950 --> 03:20.880
The number we're passing in we're going to first have to convert it to a string and then we're going

03:20.880 --> 03:23.420
to split it on that value.

03:23.700 --> 03:24.440
Excellent.

03:24.450 --> 03:29.850
So one thing we can do is increase this product value which is just going to be equal to 1 because this

03:29.850 --> 03:34.870
is going to be what we're going to multiply each and every time.

03:34.870 --> 03:38.910
So we're initialising to 1 not zero because then it would everything.

03:38.910 --> 03:41.210
When you multiply by zero it would always be zero.

03:41.220 --> 03:41.720
Right.

03:41.790 --> 03:50.590
So we're in take our digits and we're going to iterate through them and we'll just put it here.

03:51.030 --> 03:55.170
And what we want to eventually return is product.

03:55.170 --> 04:00.990
So we're going to be modifying product here and in product it's just going to be eight times equals

04:01.950 --> 04:07.290
because we want to continue to multiply each individual value because there are strings now we need

04:07.290 --> 04:08.810
to parse them as integers.

04:08.970 --> 04:10.610
And we're just past digit in there.

04:10.830 --> 04:17.310
So now we'll be getting our value here from get digit product is going to do it for each one of the

04:17.310 --> 04:18.830
numbers as we're iterating through.

04:18.900 --> 04:30.050
Right now the last little bit here is we have to do a check to say hey if products don't includes product

04:31.020 --> 04:35.590
meaning if it is in the array but we don't want it to be in the way won't say so we'll go through that.

04:35.700 --> 04:43.580
If it's not in the array go ahead and push that value to it.

04:43.620 --> 04:44.160
Right.

04:44.160 --> 04:47.850
Go in and push that product to the array.

04:48.090 --> 04:51.630
And then at the end we're returning the rate on length and that's pretty much it.

04:51.630 --> 04:59.430
So the idea here is to write a function that first gets the digit product gets the product that we were

04:59.430 --> 05:02.930
going to get and then we're going to check against our race.

05:02.940 --> 05:05.360
Hey is this what we want to have.

05:05.860 --> 05:09.900
It's this excuse me is this included if it's not we're going to add that.

05:09.990 --> 05:14.200
And then when we're done iterating through our original array we're just going to return the length

05:14.210 --> 05:15.760
and that's pretty much it.
