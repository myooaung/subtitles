WEBVTT

00:01.130 --> 00:08.210
Right so array Max and Jason different so quite a lot stuff going on here.

00:08.430 --> 00:15.330
What were our objective here is we basically want to get the absolute using the absolute difference

00:15.330 --> 00:17.370
of any two adjacent elements.

00:17.370 --> 00:25.260
Your hints for this one is to use Map thought ABS which is absolute and so essentially if you minus

00:25.260 --> 00:32.910
two from four we get native to you minus one from four we get three and then zero for one we get one

00:32.910 --> 00:41.010
to three would be the absolute maximum difference that we can get from this from a one dimensional array.

00:41.010 --> 00:42.620
Let's go and jump right into it.

00:43.540 --> 00:45.960
All right so this one is pretty straightforward.

00:45.970 --> 00:51.130
What we're going to do is we're going to create a variable that's going to be initialized to the absolute

00:51.130 --> 00:54.040
difference of the zero index and the one index.

00:54.040 --> 00:58.540
And then we're going to iterate through a for loop that is going to be offset by Once we get started

00:58.540 --> 01:02.210
at one set of 0 and then from there.

01:02.350 --> 01:07.890
Well we're going to do is we're just going to check the absolute difference between the next two values.

01:07.990 --> 01:13.660
And if they're greater than our current max difference and set it we're finally going to go ahead and

01:13.660 --> 01:14.850
turn the max.

01:14.920 --> 01:17.080
The max difference let's jump into it.

01:17.080 --> 01:21.990
So as I mentioned we're going to start what I named it Max defect.

01:22.030 --> 01:23.170
OK variable name.

01:23.300 --> 01:33.220
When I say math but ABS this is going to be the first value minus the second value.

01:33.220 --> 01:38.840
In this case and put you on actually.

01:39.100 --> 01:43.460
And at the end of here we're going to return Max diff.

01:43.520 --> 01:44.660
Very nice.

01:44.690 --> 01:51.100
Now before we do that we have to iterate through a for loop to see if we need to reset it which you

01:51.100 --> 01:52.060
probably will.

01:52.270 --> 02:02.710
And when you say well it is larger than the point you're a plus plus X right now we're going to create

02:02.770 --> 02:04.080
a value here.

02:04.080 --> 02:04.840
You don't have to.

02:04.840 --> 02:11.930
But I think this this is one of those variables where we're reducing this or checking the value.

02:12.640 --> 02:16.580
This variable here is for readability and that's ok.

02:16.710 --> 02:34.430
I say math that ABS and say in input re minus 1 index minus 1 minus and put array.

02:34.990 --> 02:37.910
So now that we have that we just need a simple check here.

02:37.910 --> 02:41.370
Is this like if our absolute difference.

02:41.620 --> 02:46.110
So we say absolute give is greater than our max.

02:46.150 --> 02:54.680
If you wanna go ahead and set that here x is equal to 2.

02:55.030 --> 02:56.130
And also you know.

02:56.320 --> 03:02.240
So we solve this but I like turn usually if I'm doing a simple check like this I would prefer a turn

03:02.240 --> 03:02.750
Harry.

03:02.860 --> 03:04.340
That's just my personal opinion.

03:04.570 --> 03:13.660
And so what we can do here is we can go ahead and eliminate that when you do something like Max def

03:14.710 --> 03:26.080
is equal to absolute if greater than max if we want to do on or turn absolute if we just want to reset

03:26.080 --> 03:31.770
it back to Max diff and there we go a little bit cleaner.

03:32.320 --> 03:33.770
I think want to work.

03:33.910 --> 03:36.050
You could argue that this is less clean as well.

03:36.310 --> 03:38.830
That this is just my personal preference is what I'm trying to say.
