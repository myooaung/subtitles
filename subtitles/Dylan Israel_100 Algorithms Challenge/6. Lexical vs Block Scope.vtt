WEBVTT

00:00.750 --> 00:03.040
So a very common question.

00:03.090 --> 00:07.410
One of the most common is what is a lexical verse block scope.

00:07.420 --> 00:14.250
Another way that they may be at you may be asked this is they'll ask you what is the difference between

00:14.250 --> 00:16.650
Konst inlet and voire.

00:16.800 --> 00:19.730
This is all sort of the same question.

00:19.740 --> 00:23.100
So let's let's take let's take it from the cost less.

00:23.160 --> 00:29.140
Let Anvari who is going to answer the same way but do know that most 50 percent of times when the phrase

00:29.140 --> 00:32.850
says what it's like schools lexical scope verse Blasco.

00:32.940 --> 00:35.700
So what is consulate in var.

00:35.910 --> 00:40.310
Well Kosslyn of art are ways to store variables.

00:40.320 --> 00:46.590
Var is the traditional way which has sort of been deprecated with the addition of constant let And that

00:46.590 --> 00:55.520
uses lexical scope lexical scope is really refers to variable hoisting where we're talking about your

00:55.530 --> 01:01.510
variables even though there define the say enough falsie if statement where they shouldn't exist.

01:01.510 --> 01:06.030
You're still going to get a undefined value for them instead of an air thrown because those variables

01:06.030 --> 01:09.680
are going to be hoisted to the top of their function scope.

01:09.960 --> 01:13.110
And you know there's some issues with this.

01:13.170 --> 01:20.910
A very basic example of it would be with a for loop for instance where you might expect your let our

01:21.060 --> 01:24.120
VAR I's equal to zero to like the length of an array.

01:24.210 --> 01:29.060
It's actually going to have that that plus one value that breaks that for loop iteration.

01:29.070 --> 01:35.610
If we for some reason wanted to use that variable after the fact because it still exists in that function

01:35.610 --> 01:43.770
scope and that's not something that we typically want to happen now let in Koncz contes refers to storing

01:44.820 --> 01:46.880
data that's going to be a constant.

01:46.910 --> 01:54.330
It's a primitive type meaning it's going to be a boolean a a string a number and it's not going to be

01:54.330 --> 01:55.090
modified.

01:55.200 --> 02:03.620
However when it comes to arrays and objects Conte's has a has the ability to.

02:03.650 --> 02:06.240
You're not going to be able to swap in a new array.

02:06.320 --> 02:11.590
But we can do is modify that array in object so it's not constant in how some people may think.

02:11.780 --> 02:17.780
And then let is essentially var 2.0 but that uses that's where we're going to be resetting our values

02:18.110 --> 02:26.390
where constant let use block scope block scope which means that our variables exist only in which the

02:26.390 --> 02:28.430
scope that they are defined.

02:28.520 --> 02:34.360
And there is no variable hoisting associated with them out up to the top of the function scope.

02:35.670 --> 02:40.680
All right so let's look at a very quick example of lexical scope.

02:40.730 --> 02:48.920
First block scope so you'll see here we have this false statement and if we have our VAR example Alysha

02:48.920 --> 02:53.090
say we initialize it to true if we don't have to really initialize it.

02:53.330 --> 03:01.250
But if we wanted to cancel all log out example what we're going to get here is actually a to my focus

03:01.330 --> 03:05.420
on what we're going to get for our value here.

03:05.450 --> 03:09.020
Is this actually going to return undefined at this instance.

03:09.020 --> 03:14.540
It looks like we're having an issue with Koka to do that but maybe he doesn't like that it's printing

03:14.540 --> 03:17.530
out something that's undefined but it's not going to throw in error.

03:17.570 --> 03:22.830
I guess my point I'm trying to say because what's happening in lexical scope is this.

03:22.880 --> 03:29.780
This variable definition is actually getting hoisted in the javascript when it gets compiled to look

03:29.780 --> 03:31.820
something like this var example.

03:31.820 --> 03:34.280
Which then would have a undefined value.

03:34.280 --> 03:41.290
This is going to cause for there not to be an error thrown but it's also going to not really be what

03:41.290 --> 03:41.860
you expect.

03:41.860 --> 03:45.810
You know our code when we write it should look and render as we would expect.

03:45.850 --> 03:53.320
So if we change just to let example be true we would in fact have an error thrown on this.

03:53.500 --> 03:55.880
You know what we're actually not calling this are we.

03:55.950 --> 03:57.170
Though that might be why.

03:57.390 --> 03:59.770
Why it's not running.

04:01.060 --> 04:07.480
And so you'll see here in our VAR we get a undefined as I saying but in our Lead we're going to get

04:07.480 --> 04:13.270
an error here because it's not defined within this scope because block scope means that it only exists

04:13.570 --> 04:19.900
within its block of code and there is no variable hoisting associated with it and that may be another

04:20.050 --> 04:20.800
thing as well.

04:20.830 --> 04:29.190
Or they might ask you what variable hoisting is but that's a very brief definition of lexical velox.

04:29.240 --> 04:33.080
But it's a very important one especially for these technical phone interviews.
