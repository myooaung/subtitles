WEBVTT

00:00.660 --> 00:03.970
All right Gus pages numbering with AInc.

00:04.020 --> 00:07.200
So here we're taking in two numbers.

00:07.200 --> 00:10.110
The first one is the current page number.

00:10.110 --> 00:14.030
The second one is the number of digits we have available to print.

00:14.280 --> 00:22.310
So we're trying to figure out how many how many that we can print and in.

00:22.380 --> 00:27.150
Let's take this case for at least this one tokes.

00:27.480 --> 00:34.170
So if we are on page 21 and we have five digits left to print 20 we can print page one.

00:34.200 --> 00:42.660
We can print page 22 because now we have 4 digits but we can't print page 23 because that's two digits

00:42.680 --> 00:44.670
when you know in cleft for one.

00:44.720 --> 00:50.210
And so that's our objective here is figure out how many what the last page is that we're going to print

00:50.210 --> 00:52.120
so we're going to be updating current.

00:52.120 --> 00:58.370
And that's the number that we're going to return the only hint I have for you here is I use to string.

00:58.460 --> 00:59.390
That's pretty much it.

00:59.390 --> 01:01.700
The rest of it is just logic.

01:01.700 --> 01:03.230
All right so this is a good one.

01:03.230 --> 01:09.250
This is like one of those ones you know you can solve with recursion or just a while loop.

01:09.350 --> 01:12.960
So objective here is figure out how many numbers we can print now.

01:12.980 --> 01:19.570
It doesn't necessarily matter if the the number of the page or how many digits it is.

01:19.570 --> 01:23.620
And when you need to get the digit of a number you typically want to convert it to a string at the line

01:24.230 --> 01:26.570
at least that's one way that's usually do it.

01:26.620 --> 01:33.490
So Lauren do here is rience create a wall to say a wall number of digits which is essentially the amount

01:33.490 --> 01:42.820
of ink we have left is greater than or equal to our current number current and current We're going to

01:42.820 --> 01:48.100
convert that to a string and then get the length because each iteration we're going to Dickerman the

01:48.100 --> 01:51.250
amount of ink that we have left the number of digits.

01:51.370 --> 01:56.300
And when we break out of this wollop we just want to go ahead and return current.

01:56.470 --> 02:03.850
Now in here it's if you're able to kind of figure out how to was my intent you know if you're able to

02:03.850 --> 02:09.900
figure out how to convert your number this way everything else should come pretty quickly so we're take

02:09.910 --> 02:15.220
number of digits and we want a deck raiment current dot to string

02:17.660 --> 02:24.480
length and that will Decker meant the current digits from it because now we did one print.

02:24.610 --> 02:30.310
And when I ended up having to do here was this statement because my numbers were off by 1 when the numbers

02:30.310 --> 02:34.330
were exactly equal and cause some issues here.

02:34.390 --> 02:43.390
So I could have maybe made my wild loop logic a little bit more pronounced I guess.

02:43.480 --> 02:46.100
But here I think this is a fine fix as well.

02:46.120 --> 02:47.760
So we're just going to check here.

02:47.790 --> 02:51.190
It's going to basically match this check right here.

02:51.270 --> 02:55.100
We'll do one the one of digits just for that.

02:55.270 --> 02:59.180
And then if that's true we're just going to update our current values here.

02:59.240 --> 03:00.680
And so that's pretty much it.

03:00.700 --> 03:07.410
And then we return it so we're going to get the length of the digits the character.

03:07.720 --> 03:11.940
And then we're going to decrement it from number digits and then if it's if it's sure in the loop we're

03:11.940 --> 03:19.330
going to increase the current page to find out what page we ended up on before we run out of ink.

03:19.350 --> 03:20.830
It's hard being those words out out of.
