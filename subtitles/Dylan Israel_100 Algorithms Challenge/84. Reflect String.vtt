WEBVTT

00:00.720 --> 00:01.590
All right.

00:01.590 --> 00:03.090
So reflect string.

00:03.240 --> 00:09.930
What we're trying to do here is we're taking a string and what we want to do so we want to get the reflection

00:09.930 --> 00:10.320
of them.

00:10.320 --> 00:18.750
So essentially a will becomes Z Z becomes a B becomes y c and x and so on and so forth.

00:18.750 --> 00:23.980
So we're getting the reflected value on the opposite end of you know A to Z.

00:24.180 --> 00:33.120
So and name we we get em for z and v and you know the only hint I really have here is you split for

00:33.120 --> 00:33.930
this.

00:33.960 --> 00:36.170
There's a couple different ways we could solve this.

00:36.200 --> 00:39.670
I kind of like my solution but some of you may say it's too simple.

00:39.750 --> 00:42.250
So is good and jump into it.

00:42.300 --> 00:46.880
All right so the way that I solve this was I created a character array.

00:46.890 --> 00:49.840
Those are going to be split of string values.

00:50.070 --> 00:57.600
And from there I iterated through it and then I created a essentially a dictionary object that we then

00:57.600 --> 01:01.010
map 8 is the B to C and all that.

01:01.080 --> 01:03.440
And we just assign reassign the values there.

01:03.570 --> 01:09.450
In our example in our in our details Assos we don't have to worry about uppercase values.

01:09.450 --> 01:10.980
This is simply lowercase.

01:11.150 --> 01:15.110
But if we did we could of course handle some logic in that.

01:15.120 --> 01:20.070
But that's beyond the scope of this but it is in a project where you actually need to do this and you

01:20.070 --> 01:20.960
might need to do that.

01:20.970 --> 01:22.480
But that was what we need to do.

01:22.500 --> 01:33.450
So here I'm to call this char's or set this we're make this a string array city equal to our input string.

01:33.620 --> 01:39.370
Does it.

01:39.660 --> 01:47.220
And what I'm going to do next is define our dictionary which I'm just going to call refl. letters and

01:47.220 --> 01:48.570
this is going to be equal to an object.

01:48.570 --> 01:51.900
And because this is you know we're making 26 assignments.

01:51.930 --> 01:55.540
I'm just going to copy this in here like so.

01:55.800 --> 02:01.650
So you'll see here we have a to z all the way back to Z they are creating this dictionary object that

02:01.650 --> 02:05.520
we're going to reference in our solution.

02:05.520 --> 02:10.170
Go ahead and create reflected word here.

02:10.300 --> 02:13.170
And this is going to be what we end up returning on the end here.

02:13.240 --> 02:18.640
Are you going to return or reflected word that's going to be our string that we're going concat the

02:18.640 --> 02:20.870
reverse values onto.

02:20.890 --> 02:28.870
Now all we have to do from here is iterate through those characters chars each element we call this

02:28.870 --> 02:30.690
char.

02:31.600 --> 02:38.590
And we're just going to concat on to there where we're going to say reflected word plus equals the reflection

02:38.590 --> 02:46.070
letters plus the character or the key essentially which is the character code which is actually three

02:46.080 --> 02:49.780
named char here and that's it.

02:49.780 --> 02:52.540
So what we did was we got our characters.

02:52.540 --> 02:55.020
We then created our dictionary to reference.

02:55.030 --> 03:01.030
We created a placeholder word that we're going to then iterate through our array of characters then

03:01.270 --> 03:02.380
using our dictionary.

03:02.390 --> 03:09.220
And our object here we're then going to get the the key which is the original character get the value

03:09.390 --> 03:15.570
and then concatenate onto it and finally return it the other way that you might be able to do this.

03:16.030 --> 03:22.750
I think it adds more complexity but you don't have to create this dictionary as you said store reference

03:22.750 --> 03:25.420
values to the ascii values.

03:25.420 --> 03:31.360
And then depending on which ascii value it is you will Dickerman downward or increment upward to get

03:31.360 --> 03:32.680
the reflection value.

03:32.920 --> 03:39.700
I think this is a fine solution and some people may disagree with me on on this being better than that

03:39.940 --> 03:42.700
but I think creating a dictionary like this is just fine.

03:43.210 --> 03:43.970
That's my solution.
