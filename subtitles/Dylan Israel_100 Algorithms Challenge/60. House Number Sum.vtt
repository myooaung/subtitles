WEBVTT

00:00.380 --> 00:07.680
All right a boy that gets easily distracted is walking home from school he's counting the numbers on

00:07.680 --> 00:08.190
the House.

00:08.220 --> 00:13.840
And then he sees the number zero and forgets to continue counting.

00:14.690 --> 00:16.660
Add that totals together.

00:16.740 --> 00:17.820
So that's the objective here.

00:17.820 --> 00:19.250
I don't have any hints.

00:19.350 --> 00:20.640
They are.

00:20.960 --> 00:24.060
We're essentially.

00:24.870 --> 00:27.720
There's no there's no methods or anything like this that I use.

00:27.720 --> 00:33.530
So you'll see here we're counting five first one to six plus two is eight plus three is 11.

00:33.590 --> 00:34.550
We had a zero.

00:34.590 --> 00:35.850
I'm easily distracted.

00:36.000 --> 00:37.140
And then that's our return.

00:37.140 --> 00:39.020
So that's our objective here.

00:39.030 --> 00:44.060
Return the numbers until you hit a zero.

00:44.060 --> 00:46.700
All right so this is a pretty straightforward one here.

00:46.710 --> 00:52.530
What we need to do is we need create a variable to store our store total essentially and then we're

00:52.530 --> 00:58.230
going to return total if if we ever get to zero.

00:58.290 --> 00:59.190
That's pretty much it.

00:59.190 --> 01:01.930
At the end of the day you know.

01:02.130 --> 01:12.520
So let's start by instantiating total here will return in total and we'll do a four.

01:12.770 --> 01:19.740
Let equal zero or less than the input array length

01:22.640 --> 01:23.960
plus plus.

01:24.980 --> 01:38.310
And we'll say something like if the input array value is exactly equal to zero return total and it actually

01:38.310 --> 01:41.360
you know what we don't actually need this one here because I remember reading the question and saying

01:41.500 --> 01:44.830
you guarantee that there's at least one zero.

01:46.030 --> 01:47.760
So we can with that.

01:47.860 --> 01:55.710
When you get a return excuse me to total plus equals you put it right.

02:03.640 --> 02:05.130
Not a number.

02:05.860 --> 02:08.310
Oh those are.

02:08.410 --> 02:10.650
I would totally go there.

02:10.780 --> 02:11.220
There you go.

02:11.320 --> 02:12.500
That's pretty much it.

02:12.880 --> 02:18.370
And if it wasn't guaranteed that we would have a number being zero we'd have to have a return here.

02:18.370 --> 02:22.960
But they did guarantee us that in the problem itself.

02:23.770 --> 02:24.960
So that's it.

02:24.970 --> 02:26.940
We're essentially just keeping track of a number.

02:27.040 --> 02:33.040
And we know when to return our amount when our great condition is and our you know our when we need

02:33.040 --> 02:34.970
to exit the function at what point in time.

02:34.990 --> 02:35.990
And that's when we had zero.
