WEBVTT

00:00.810 --> 00:04.240
All right so here we are longest digits prefix.

00:04.260 --> 00:06.020
What is your objective here.

00:06.240 --> 00:08.030
Well we're going to take in a string.

00:08.070 --> 00:14.280
It's going to have some numbers in it and we want to return the longest prefix which means the front

00:14.280 --> 00:18.560
letters of that without hitting a character.

00:18.570 --> 00:23.880
So in our case here we have one two three so we can only hit one two three.

00:23.880 --> 00:27.380
Once we hit anything that is a character we're done.

00:27.480 --> 00:28.410
That's basically it.

00:28.410 --> 00:35.300
At the end of the day the way I solve this split includes push join and looking at it it may have been

00:35.340 --> 00:37.360
overly complex solution.

00:37.530 --> 00:40.480
I have a nother way that I think we can solve this all the same.

00:40.560 --> 00:43.880
And also we'll have two solutions for this one I think.

00:43.880 --> 00:44.190
All right.

00:44.190 --> 00:51.460
So the way I solve this the first time was I created a digit Saray which is essentially 0 to nine a

00:51.470 --> 00:52.610
number array.

00:52.620 --> 01:03.000
I then split our input string into a character and created a a array that called prefix which I then

01:03.000 --> 01:06.030
added the values that passed if it didn't pass I broke it.

01:06.030 --> 01:10.810
Meaning that hey we hit a character and not a string.

01:11.040 --> 01:14.940
And then I joined it back together this was a mess of a solution looking back.

01:14.940 --> 01:20.700
Besides I added a whole bunch of things but publishing my first solution were then going to refactor

01:20.700 --> 01:21.310
that one.

01:21.390 --> 01:23.880
And then we're actually going to solve it slightly different.

01:23.880 --> 01:28.950
So as I mentioned I created digits array and I'm not going to take the time to type this out.

01:28.950 --> 01:31.260
I'm actually going to copy it over here.

01:31.260 --> 01:38.940
So that's our digits like so from 0 to 9 and we're going to create an array here.

01:39.150 --> 01:44.940
And call this char's and we're going to set this equal to input string split and we are split on each

01:44.970 --> 01:46.940
individual character.

01:46.980 --> 01:47.790
Very nice.

01:47.790 --> 01:55.820
Now we're going to create the prefix array which should be a Conte's prefix.

01:56.130 --> 02:01.280
And when you set this equal to an array and it should also be a cons here as well.

02:01.380 --> 02:04.910
There there's a lot of Miss Levy on this day I was doing this.

02:04.920 --> 02:11.160
So now we're going to do this we're going to iterate through the input string as a for we don't necessarily

02:11.160 --> 02:20.580
need to do a typical for loop into four of loops so let char of input string a string at the end the

02:20.580 --> 02:30.150
day is in iterable and we're going to say if digits dot includes this was a message code or an input

02:30.150 --> 02:31.630
string.

02:32.010 --> 02:33.600
Excuse me our char.

02:33.630 --> 02:38.460
So if it includes that if it does not we want to break it right because now we're going to get out of

02:38.460 --> 02:41.790
here and we don't want to have anything to do with it.

02:41.880 --> 02:45.740
Break our LWB we hit our character we hit our thing that was not a character.

02:45.750 --> 02:52.500
If it wasn't for your take prefix and we're just going to push that char onto it now that we have that

02:52.500 --> 03:01.140
what we want to return is just our prefix dot joined back together on each character.

03:01.200 --> 03:02.430
So we're good there.

03:02.430 --> 03:07.560
This actually works it's a little bit of a messy solution a little bit of a strange solution.

03:07.770 --> 03:10.420
A couple of things that we could do instead.

03:10.440 --> 03:13.110
There's really no reason to push.

03:13.210 --> 03:18.510
There's really no reason to join and there's really no reason to make this an array.

03:18.510 --> 03:21.920
So we can eliminate that and stop some of our pain here when we do.

03:21.920 --> 03:26.370
Prefix plus equals our char.

03:26.790 --> 03:31.620
And then we can just go ahead and return prefix.

03:31.620 --> 03:37.160
Now what does it give us Schoeni Oh excuse me.

03:37.230 --> 03:40.380
And we got to make that letter now and that would work much better.

03:40.470 --> 03:42.180
It's much simpler.

03:42.540 --> 03:46.300
A whole lot of strange things so that we did here.

03:46.440 --> 03:51.330
But you know in spirita refactoring the other way that we could solve this is let's say we didn't have

03:51.330 --> 03:59.040
this digit array what we could do is let's create a cost chair and we'll just call it Gnome and we're

03:59.040 --> 04:00.180
going to say equals.

04:00.190 --> 04:04.680
Parse it on that char.

04:05.400 --> 04:12.680
So now that we're doing that if you're trying to parse an int of a let's let's just say we'll parse

04:12.680 --> 04:13.820
an ant.

04:14.010 --> 04:14.430
Parse.

04:14.430 --> 04:18.170
Int of a what do you think you get.

04:18.170 --> 04:19.460
You get not a number.

04:19.590 --> 04:22.940
So if you do want you get the value 1.

04:23.730 --> 04:26.130
Or like so.

04:26.280 --> 04:30.630
So what we're going to do instead is a much better way is instead of checking because this is going

04:30.630 --> 04:34.020
to do a check through each iteration of the array.

04:34.020 --> 04:40.540
Well we're going to do is run a parse in here and instead we're this is not a number and we're in a

04:40.540 --> 04:44.010
pass and no that's it.

04:44.010 --> 04:46.680
It's a much cleaner much better approach.

04:46.770 --> 04:51.400
And and instead of.

04:51.590 --> 04:52.640
Yeah fine.

04:52.710 --> 04:56.280
So this is a much better approach of doing than what we did here.

04:56.310 --> 05:01.260
And I'm actually going to replace my original solution with this year because I think this is exactly

05:01.500 --> 05:03.570
the way it should have been.

05:03.570 --> 05:08.130
Sometimes you overcomplicate these things in the moment you're like oh I know I do this and typed this

05:08.130 --> 05:12.640
up and then you know you don't think about how to better solve this.

05:12.750 --> 05:14.370
But this is a much better solution.
