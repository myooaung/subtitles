WEBVTT

00:00.590 --> 00:01.110
All right.

00:01.140 --> 00:01.440
Yeah.

00:01.440 --> 00:07.000
So we are in chunky monkey which is kind of a funny name but let's roll with it.

00:07.050 --> 00:13.260
What we want to take in two arguments one an array of values such as A B C or D or numbers.

00:13.260 --> 00:19.050
We don't really care what the contents of the array are it's going to be a one dimensional array into

00:19.260 --> 00:20.580
a number.

00:20.610 --> 00:24.000
And that's going to tell us how many values we want in our nested array.

00:24.000 --> 00:29.940
That's our objective here is we want to nest values and we don't create a double nested array based

00:29.940 --> 00:30.740
off our array.

00:30.780 --> 00:35.620
And in those double nested arrays the number is the amount of values here.

00:35.760 --> 00:39.100
And if there's not enough we just put what's left over into them.

00:39.180 --> 00:45.600
So the only hint I have free for methods I use to solve this was slice is for the most part a pure logic

00:45.630 --> 00:48.220
type array algorithm.

00:48.230 --> 00:50.030
Let's go to and jump into it.

00:50.070 --> 00:50.600
All right.

00:50.610 --> 00:56.070
So what we have to do here is we need to create an array the source of values and why we still have

00:56.070 --> 01:01.200
values we need to slice them out of there and add it to a new array.

01:01.200 --> 01:10.310
So what we're going to do is we are going to create our array here and this can be a concept and I called

01:10.350 --> 01:13.530
it holder array although I don't really like that.

01:14.130 --> 01:25.260
So let's maybe what's a good name for this array which is called nested.

01:25.320 --> 01:27.130
This is not a great name either.

01:27.240 --> 01:29.260
And this is going to be equal to an empty array.

01:29.310 --> 01:34.200
And what we eventually want to return is our nested array.

01:34.450 --> 01:43.670
And so what we're going to do here is we're going to have a count that's going to be initialized 0 and.

01:44.450 --> 01:47.830
And we're going to need to initialize a zero.

01:47.850 --> 01:48.650
So let's not do that.

01:48.670 --> 01:50.030
This is a better idea.

01:50.550 --> 01:52.560
I'm Refractories my own code as we do this.

01:52.650 --> 01:56.220
So we're going to have a WHILE loop this as well.

01:56.390 --> 01:58.630
Oh we do need count loops.

01:58.710 --> 01:59.580
We do need a count.

01:59.580 --> 02:02.190
So I see why I had it originally.

02:02.190 --> 02:03.400
See I knew what I was doing originally.

02:03.400 --> 02:09.240
So we're going to have a count variable this won't be for a while loop to keep track of when we break

02:09.240 --> 02:15.770
out of our context when it's time to say hey we're no longer we no longer need to do this operation.

02:15.900 --> 02:22.490
And so we're going to do our length which is our input so all count is greater than Heartland's.

02:22.680 --> 02:26.490
Go ahead and continue iterating through it.

02:26.490 --> 02:32.290
Now in our array we are in our nested array where we want to do is we want to push a value.

02:32.340 --> 02:36.380
I think I forgot to say push but you figured that out at this point.

02:36.390 --> 02:41.000
So we want to push a value here and then we want to take our original array value.

02:41.040 --> 02:45.730
Because that's where we're getting from and we want a slice on that on that variables count.

02:45.900 --> 02:50.400
Now from there we're going to have a count which is we're going to set the value here and count is going

02:50.400 --> 02:57.810
to be equal to count plus equal size and size will be the amount of values we have in here.

02:57.990 --> 02:59.690
And that's really it at the end of the day.

02:59.790 --> 03:01.430
So we're creating an array.

03:01.590 --> 03:03.420
We're then pushing a new array.

03:03.420 --> 03:07.530
So when you for those you don't know when you slice an array what's actually happening is this going

03:07.530 --> 03:15.810
to return an array of values of any as you can see here and a start to an endpoint and then create a

03:15.810 --> 03:20.970
new array which would then push in those values and our sizes what's going in and counts what we're

03:20.970 --> 03:22.100
keeping track of.

03:22.260 --> 03:25.580
And at the end of it we're just returning the array.

03:25.590 --> 03:30.710
So pretty straightforward not not too bad of a solution.

03:30.720 --> 03:37.870
I really like this one because it felt like it gave me a nice little mix of what a clear objective.

03:37.870 --> 03:42.780
Well you know we don't oftentimes get an opportunity use while loops.

03:42.930 --> 03:48.150
We could have probably use recursion in some fashion or another here as well to solve this but I really

03:48.150 --> 03:49.230
did enjoy this Altro.
