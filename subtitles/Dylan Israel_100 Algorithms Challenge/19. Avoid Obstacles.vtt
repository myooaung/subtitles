WEBVTT

00:00.750 --> 00:01.230
All right.

00:01.230 --> 00:05.980
So this is a interesting problem for me and I struggled with it quite a bit.

00:06.000 --> 00:12.960
So here we're given an array of integers and we want to know how many numbers we can jump to here how

00:12.960 --> 00:20.940
many how many places we can touch to make clean jumps so what defines a clean jump here is how many

00:20.940 --> 00:25.470
obstacles we can avoid in our numbers here being the obstacles so we're starting in zero index every

00:25.470 --> 00:28.440
time we can jump to four then day then to 12.

00:28.440 --> 00:32.750
And then how we get the number for years we've essentially touched it four times.

00:32.760 --> 00:34.340
So how do we do that.

00:34.360 --> 00:37.540
I I use sort and every as to methods.

00:37.590 --> 00:38.960
Those are your hints.

00:39.360 --> 00:41.150
Probably a couple of other ways of sorting this.

00:41.310 --> 00:47.580
I found a lot of difficulty in solving this one it took me a day or so to really understand how it was

00:47.580 --> 00:52.030
going to go about doing this to get the optimal guess here.

00:52.080 --> 00:53.870
So let's go ahead and jump right into it.

00:55.310 --> 01:00.680
All right so the first thing that we have to understand is that our arrays are sorted right so we need

01:00.800 --> 01:02.820
in order to know how we can jump.

01:02.900 --> 01:05.820
I guess we don't have to know but it makes it easier.

01:05.870 --> 01:08.960
We should sort our array how we can do that.

01:08.990 --> 01:09.930
Pretty straightforward.

01:10.120 --> 01:11.680
When you sit input array.

01:12.030 --> 01:12.880
We're just going there.

01:12.890 --> 01:19.440
So this two input array sort and in here will have an A and B value.

01:20.430 --> 01:26.590
What we want to have return is a minus B that's going to sort it numerically.

01:26.940 --> 01:34.190
Now next thing actually we wanna do is we need to figure out what the largest array value is.

01:34.220 --> 01:37.140
And then we want to add 1 to it.

01:37.790 --> 01:41.320
The reason we need to add one.

01:42.410 --> 01:43.740
Yes we do need to add one.

01:43.850 --> 01:49.440
In theory because we want the number to be jumble.

01:49.460 --> 01:50.740
So we had our.

01:50.750 --> 01:56.240
So let's just get the largest value first so largest or leave out.

01:56.300 --> 02:00.710
It's going to be the last value of r and put her in is just the input array and then we're going to

02:00.710 --> 02:01.970
take the input array

02:06.710 --> 02:09.180
length minus 1.

02:09.350 --> 02:14.900
So that's going to give us the largest value we need the largest value to iterate through our array

02:14.900 --> 02:19.150
here which we're going to do with a FOR loops or so.

02:19.250 --> 02:22.280
Equal to 1 0 is.

02:22.610 --> 02:27.830
So now if it 1 because 0 would cause an infinite loop for what we're going to be doing when you modulo

02:27.830 --> 02:30.000
y 0 and things like that so instead.

02:30.230 --> 02:35.530
And and we're going to check one larger than the largest Saray value plus 1.

02:35.540 --> 02:43.100
The reason for that is if if we to not be able to jump any of these values maybe it's 1 1 1 1 1.

02:43.250 --> 02:47.500
We need to say look the only jump we can do is from 0 to 2.

02:47.660 --> 02:52.620
And then we need to say high plus plus because we want to hit are 8 by 1.

02:52.820 --> 02:57.920
So we start at 1 and then we go all the way up to what our largest value is plus 1.

02:57.920 --> 03:05.150
Now what we're going to do here is we're simply going to say look if our input array dot every and then

03:05.150 --> 03:08.720
we have a function here and this strange element and

03:14.910 --> 03:20.530
we might want to break this out not to be an if statement but I did in a statement so this is probably

03:20.530 --> 03:22.560
a bad convention.

03:23.230 --> 03:25.050
What it will do for this for now.

03:25.050 --> 03:33.850
So if the element modulo II is not equal equal to zero.

03:33.980 --> 03:39.010
Our turn that so if that's true all we do here is return.

03:39.210 --> 03:40.080
And we're done.

03:40.380 --> 03:45.000
And so this is more of a math a theoretical math one.

03:45.060 --> 03:51.750
And so we sort the sort the array to get it from you know numeric order we then just create a value

03:51.750 --> 04:01.580
that we're going to iterate up to and then if every element in the array is not equal to when we low

04:01.590 --> 04:04.860
by the current index value we found the shortest jump.

04:05.100 --> 04:10.980
And now we know that we can return for this value.

04:11.280 --> 04:18.810
So that's basically at the at the end of the day it was a little bit complicated to get.

04:18.810 --> 04:22.740
This is the hard part right here just visualizing what it is that we're actually checking.

04:22.740 --> 04:25.670
So if you're able to if you understood this part.

04:25.860 --> 04:28.470
This stuff is just you know set up at the end of the day.
