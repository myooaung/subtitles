WEBVTT

00:00.570 --> 00:01.710
Honor it as always.

00:01.710 --> 00:05.760
Go ahead and go over what our objective is here.

00:05.760 --> 00:11.130
You'll see that we are going to be given an array of integers and what we want to do is find this very

00:11.130 --> 00:12.630
complicated formula.

00:12.740 --> 00:14.630
And if you're wondering this is not my stuff.

00:14.820 --> 00:21.360
I get these from code you know sites like code 5 code or is free code camp where I've solved algorithms

00:21.360 --> 00:24.910
and I've added some additional things make sense here.

00:24.960 --> 00:29.150
Basically what this is asking is please return the median value.

00:29.160 --> 00:35.670
So you'll see and if it's smaller Frazetta if it's not if it's smaller and there's true value such as

00:35.750 --> 00:42.670
an even array where we have four in seven return the smaller the left side portion.

00:43.130 --> 00:45.800
And the hardest part about this is just understand the question.

00:45.810 --> 00:51.510
So that's basically what's going on here we have to 4:07 we get return before we have to force 7:6 we

00:51.510 --> 00:54.330
get another return of four and

00:57.330 --> 00:57.840
all right.

00:57.840 --> 01:03.310
So we have or absolute values some mineralization a very long intimidating name along with that long

01:03.340 --> 01:06.870
intimidating algorithm but perhaps five seconds.

01:07.080 --> 01:10.150
Realize it's not as bad as it may seem.

01:10.150 --> 01:16.270
But the question itself is a good example of somebody who wrote something in a technical way that can

01:16.270 --> 01:22.000
be explained very simply and so simply speaking what we're trying to do here is we're trying to get

01:22.000 --> 01:24.470
the median value in in a way.

01:24.490 --> 01:29.260
And one way that we're going to deal with median values when it's an even array's we're just going to

01:29.260 --> 01:32.430
take the left element because we'll have two numbers.

01:32.430 --> 01:37.700
So how do we find out if it's even or odd what we can do something like this.

01:37.930 --> 01:45.740
So we can create This is even a variable and in here we're going to check the length of our number.

01:46.600 --> 01:52.650
And while we're at it let's go ahead turn on Koca sort Koca EF 1 and start it as a free plug in.

01:52.660 --> 01:56.410
So if you want to follow along like I am you can do.

01:56.410 --> 02:02.030
You can use it like so I'll be doing this in typescript.

02:02.410 --> 02:06.620
They do have a paid version I actually don't know if this typescript just paid or not.

02:07.950 --> 02:08.730
Will continue on.

02:08.730 --> 02:10.330
But you can do this in javascript for free.

02:10.330 --> 02:13.990
I know that much so you'll see here.

02:14.140 --> 02:19.860
At length modulo 2 is equal equal to zero.

02:20.380 --> 02:26.460
So that's going to give us if this is even or odd and right now you didn't come in for the time being

02:26.860 --> 02:31.630
turning undefined because we haven't had a return and we're going to have a return here that's going

02:31.630 --> 02:36.270
to say hey you know is even.

02:36.640 --> 02:38.610
And then this will be a turn Airi.

02:38.620 --> 02:49.530
And what we're going to do to return the number is if it is even we want to take the length of our array.

02:49.560 --> 02:55.420
Divide it by two to get to the half and then minus 1 because that's going to it's going to evenly divide.

02:55.540 --> 03:01.060
But then we're going to be right in the middle and we want the one to the left right.

03:01.060 --> 03:02.210
So that's why we're going to do that.

03:02.260 --> 03:09.600
Now if it's on we're going to do this or here for and take this and because three divided by you know

03:10.120 --> 03:17.180
two for instance which we're going to do is not going to be a even number and we need it to be.

03:17.320 --> 03:24.670
We need to be even so we can get the index and take that and use math for this will give us the value

03:24.670 --> 03:32.500
and we can check our check or other solutions here to see if we're getting the right value and everything's

03:32.500 --> 03:32.770
good.

03:32.770 --> 03:34.520
Everything's working.

03:34.550 --> 03:35.800
That's one way of solving it.

03:35.800 --> 03:37.810
I think it's a pretty straightforward intuitive way.

03:37.810 --> 03:41.170
The hardest part about this one is probably just understanding the question.

03:41.200 --> 03:42.010
At first glance.
