WEBVTT

00:00.670 --> 00:06.810
All right so make a re consecutive to what we're doing here is where we're taking an array of numbers

00:06.870 --> 00:12.860
and we're trying to find out if we were to sort it what would be the size of it.

00:12.870 --> 00:19.170
What would you know how or meaning how many missing values do we have between the smallest and the largest

00:19.170 --> 00:22.350
number so you'll see here we have 6 2 3 8.

00:22.440 --> 00:29.460
And if we were which are return 3 because we're missing numbers for missing numbers 5 or missing number

00:29.460 --> 00:30.890
7.

00:30.930 --> 00:39.660
So the way that I solve this was I sort of an index of all right the way that I solve this was I sorted

00:39.660 --> 00:46.740
the array so that we could keep track of what values were were missing because we have a number and

00:46.740 --> 00:48.440
a max number.

00:49.830 --> 00:54.840
And so I'm going to find them in I'm going to find the max is that will be how we know how many iterations

00:54.840 --> 01:00.840
and where to start our FOR loop and if it's not included in there I use index of if negative 1 I just

01:00.960 --> 01:04.420
increment a count by 1 and we finally return count.

01:04.590 --> 01:05.720
That's really how I saw it.

01:05.730 --> 01:10.800
I thought was pretty straightforward solution one thing I would change is this set of doing an index

01:10.800 --> 01:12.280
of I would use includes.

01:12.300 --> 01:18.120
I want to say when I first solve this index like two years ago includes wasn't part of the standard

01:18.120 --> 01:24.780
javascript library that came in like 2016 which essentially finds out if a value exists before we used

01:24.780 --> 01:29.910
to do index of when if it was negative 1 it would return and doesn't exist but instead includes just

01:29.910 --> 01:32.730
returns a Boolean for when you want to do that.

01:32.730 --> 01:38.040
So let's go ahead and create a count variable here or initialize it to zero at the end here and case

01:38.370 --> 01:42.240
is we essentially just want to return count to find out if it's there.

01:42.240 --> 01:44.010
Now we have to find out how to modify that.

01:44.040 --> 01:52.200
Well before we do that I want to create a concept called sorted statues or sets the sequel to statues

01:52.260 --> 01:55.380
which is a number array sort.

01:55.500 --> 02:03.180
And we're going to sort it alphabetically a B now alphabetically numerically and we just want to return

02:03.180 --> 02:04.800
A-minus B.

02:05.220 --> 02:10.470
That will give us our sorted array and if I were to get it backwards which one goes first which are

02:10.460 --> 02:11.280
in the second.

02:11.280 --> 02:12.920
So what is sorted statues.

02:12.930 --> 02:13.990
Just for a quick check.

02:14.040 --> 02:16.720
So yeah that's in the right order as you can see 2 3 6 8.

02:16.980 --> 02:17.640
Excellent.

02:17.670 --> 02:22.570
So now that we have that we're going to then create a max value and value.

02:22.590 --> 02:25.020
So Conte's then is equal.

02:25.020 --> 02:31.970
We don't have to necessarily store these variables but I think it paints a little bit of a better picture.

02:32.010 --> 02:40.850
So many value is going to be equal to the first value of the sorted statues excuse me sorted statues

02:41.280 --> 02:52.570
and the max value will be equal to sorted statues and then sorted statues langue of minus one.

02:52.590 --> 02:54.560
The very last value in the array.

02:54.840 --> 02:55.090
All right.

02:55.110 --> 03:01.470
Now that we have that all we have to do is iterate through our through our sorted statues and find out

03:01.680 --> 03:08.490
you know what it is that we're what isn't in from minimax So we're going start off with that man right

03:09.360 --> 03:14.580
with them in number and we're going to keep going until we're at the max number then we're going to

03:14.580 --> 03:16.010
incremented by 1.

03:16.020 --> 03:24.430
Now if Now again solve it the way I did it before statues on index of that value.

03:24.430 --> 03:31.790
I know because these are just increments Gnome's is equal equal equal to negative 1.

03:31.930 --> 03:35.790
We're going to go ahead and just say hey update count and we're done.

03:35.800 --> 03:41.020
But again as I mentioned I think includes would be a much better way of doing this because that's really

03:41.020 --> 03:44.100
what we're trying to find now we're trying to find out a boolean value here.

03:44.140 --> 03:46.080
And so we're just going to say includes I.

03:46.390 --> 03:52.960
If it is not true so go ahead and add that value.

03:52.960 --> 03:55.360
So just go over the logic one last time.

03:55.360 --> 04:00.600
We are going to go ahead and create a sort the array.

04:00.640 --> 04:04.240
We're going to find the mean value the max value and then we're starting at the man we're going to iterate

04:04.240 --> 04:06.290
through it up to that max value.

04:06.310 --> 04:08.380
Find out if it's not in there.

04:08.470 --> 04:11.570
And if it's not we're going to add one to account and then we're going to finally return it.
