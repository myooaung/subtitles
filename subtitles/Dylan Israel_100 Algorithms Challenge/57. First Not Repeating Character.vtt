WEBVTT

00:00.550 --> 00:04.730
All right first not repeating character.

00:04.860 --> 00:13.350
So here this is actually one of the interview practice Amazon problems so sign on a How so.

00:13.440 --> 00:22.440
Here what we're doing is we are getting a string and we want to return the first character that is not

00:22.440 --> 00:23.970
repeating.

00:24.000 --> 00:27.140
So that's our objective here.

00:27.150 --> 00:33.250
So in in here all of the characters are repeating So we're just going to return to underscore.

00:33.510 --> 00:40.230
And this right here is the only one that's repeating that's not repeating it's a C and it's the very

00:40.230 --> 00:41.020
first one.

00:41.070 --> 00:42.560
That's our objective here.

00:42.690 --> 00:49.350
And in this case they want us to do oh it's the one additional memory which means that they don't want

00:49.350 --> 00:51.600
us to be using any nested for loops.

00:51.600 --> 00:56.340
In this case now it's just another

00:59.020 --> 01:00.130
no.

01:00.620 --> 01:03.910
Another objective of our solution here.

01:04.000 --> 01:09.760
So how I use how I solve this was split and has own property.

01:09.870 --> 01:15.130
All right so the hardest part of this one for me was trying to figure out a way to do this without a

01:15.160 --> 01:16.350
nested for loop.

01:16.420 --> 01:21.610
And I came up with a clever way of doing it.

01:21.610 --> 01:27.550
So first thing we need to do is convert this string into an array of characters.

01:27.640 --> 01:34.780
So we'll just call this char's or in a similar way of type String Array that's going to be equal as

01:34.820 --> 01:37.440
essed split or a split on each character.

01:37.570 --> 01:41.360
OK so that's pretty straightforward because we don't check every value.

01:41.380 --> 01:48.340
Now the way that I get around doing this for loops is I create a duplicate object this is just going

01:48.340 --> 01:54.640
to be an empty object now and eventually we will attach something that keeps track of the count of the

01:54.660 --> 01:58.560
bit of them as well as the index of value.

01:58.750 --> 02:04.570
And we're going to have an answer here as well which by default we're going to set to that underscore

02:04.570 --> 02:09.150
for when things fail so at the end here what we're going to return is answer.

02:09.520 --> 02:13.730
That's what we're in our trials go ahead and start equal quick.

02:13.750 --> 02:18.430
So that's our goal is to modify it answer here.

02:18.670 --> 02:22.870
And I'm also going to have a index answer.

02:22.930 --> 02:30.370
This is what we're going to keep track of which number came first and so by default we're going to set

02:30.400 --> 02:34.160
number to the max safe integer.

02:34.360 --> 02:42.970
This is a perfect solution because what if we happen to have a string that has the max in there I guess

02:42.970 --> 02:44.320
the last value could.

02:44.330 --> 02:46.440
There's no finite.

02:46.660 --> 02:48.910
Is it.

02:49.300 --> 02:56.680
There is a chance that the last character of a string could of the max save string could in fact be

02:56.680 --> 02:58.020
the case.

02:58.180 --> 03:02.230
That's a very out there thing think it could happen.

03:02.890 --> 03:10.670
So now we're going to iterate through our chars and we're going to with two for each.

03:10.820 --> 03:14.810
We're going to and we're going to have an element which is the value itself.

03:15.020 --> 03:22.230
Now we're going to have the second prendre which is going to be an index or inducers stuff.

03:25.450 --> 03:26.140
All right.

03:26.650 --> 03:27.620
So what are we do.

03:27.670 --> 03:33.270
Well we're going to check if the element or that is a property already on our plates.

03:33.280 --> 03:37.720
So if it's not an element so duplicates

03:43.650 --> 03:47.670
as property does not view this.

03:47.790 --> 03:48.810
What are we to do.

03:49.110 --> 03:51.910
Well we're just go ahead and create that property.

03:55.170 --> 04:03.210
And on it we're going to set the ego to an object where there is a count or initialiser to one.

04:03.300 --> 04:06.850
And then there is an index which will be the index value.

04:06.900 --> 04:12.450
This will this will allow us to compare how many times we get called.

04:12.450 --> 04:14.400
Meaning is it repeating.

04:14.400 --> 04:23.670
And also where it where in the array is that happening.

04:24.970 --> 04:30.390
So next we just need to do the else for that so that we can continue to keep track and which will just

04:30.390 --> 04:32.130
say duplicate duplicates

04:35.770 --> 04:40.170
element.

04:40.710 --> 04:46.150
So that counts plus plus we're going to add one to count the.

04:46.390 --> 04:49.430
And then we're also going to go ahead and update the index value

04:55.120 --> 04:59.080
I think about it I don't think I need this index value of.

05:15.260 --> 05:15.970
All right.

05:16.250 --> 05:18.680
We'll worry about that right now.

05:18.780 --> 05:19.330
OK.

05:19.490 --> 05:24.470
So now that we have that we have all our data that we need we have how many times is called in what

05:24.470 --> 05:27.200
order it comes up or index.

05:27.350 --> 05:29.180
All we have to do is one last iteration

05:31.840 --> 05:37.860
and this is just a for in loop iterate through the Keys so create a key and duplicate

05:40.460 --> 05:42.640
and say go ahead and mine is just a little bit.

05:42.750 --> 05:46.920
And in here what we do is will say if duplicates

05:49.580 --> 06:07.280
and the key dot count is equally equal to 1 and duplicates key Don index where it's located and a string

06:07.280 --> 06:16.740
is a less than index answer meaning less than the shortest value or the shortest index spots shortest

06:16.750 --> 06:18.800
spot in the string.

06:18.800 --> 06:22.760
Go ahead and set answer equal the key.

06:23.240 --> 06:28.280
And while we're at it because we're iterating through it and there's maybe a you know we don't know

06:28.670 --> 06:32.570
what or it's obvious cues are going to go in alphabetical order I believe.

06:32.570 --> 06:34.990
We don't know.

06:35.030 --> 06:37.920
You know when we hit it the first time.

06:38.670 --> 06:41.850
But we're going to go ahead a recent index answer answer and then we're done.

06:41.870 --> 06:46.410
We get C and we get our underscore and everyone is happy.

06:46.450 --> 06:56.210
Doree I remember I saw this the first time with some double nested array values.

06:56.430 --> 07:05.690
And but this is going to be exponentially faster than nesting to for loops which was one of the objectives

07:05.690 --> 07:06.610
as well.
