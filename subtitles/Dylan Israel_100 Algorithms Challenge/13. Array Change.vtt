WEBVTT

00:00.070 --> 00:07.050
We're going to get an array of integers and we are trying to find out how many shifts in the array or

00:07.050 --> 00:13.080
how many values in the array do we have to add so that we have a strictly increasing sequence from the

00:13.080 --> 00:14.270
input.

00:14.310 --> 00:17.500
So you'll see here with the values of 1 1 1.

00:17.700 --> 00:24.270
None of those are strictly increasing so we'd have to have three shifts in value and it would count

00:24.270 --> 00:26.460
the difference and so on and so forth.

00:26.550 --> 00:29.710
And that's the number we're turning back as an integer.

00:29.730 --> 00:32.860
So let's go ahead and dive into it a little bit.

00:32.880 --> 00:33.690
All right.

00:33.690 --> 00:40.160
So we have our set up here and what we have to really understand is what is it that we're trying to

00:40.170 --> 00:40.620
call.

00:40.650 --> 00:47.630
Well we're trying to get that one one one in our example of here to be 1 2 3 and we wanna know the difference

00:47.640 --> 00:55.020
so if we could change each number to be increasing how many how many differences would there be essentially

00:55.020 --> 00:56.000
at the end of day.

00:56.040 --> 01:01.770
And so in our case it's going to be three right because this middle one here is going to become a two

01:01.800 --> 01:02.550
sets one.

01:02.550 --> 01:08.610
A great uptick in this ending one here would become a three and that's a nother uptick.

01:08.610 --> 01:15.330
So we just have to write a now rhythm that would do that for us so let's let's get a variable in here

01:15.330 --> 01:17.560
and win a set of equal to count.

01:17.580 --> 01:24.870
And our goal here is our turn count after it has been added to.

01:25.110 --> 01:26.180
For how many.

01:26.310 --> 01:29.730
What the difference is for it to be increasing.

01:29.880 --> 01:41.830
The next thing that we're going to do here is equal to zero while it is less than our input array length

01:43.400 --> 01:45.720
plus plus.

01:45.820 --> 01:46.670
All right.

01:47.260 --> 01:52.150
So now that we have this what we really have to think about is what are we checking We're checking if

01:52.150 --> 01:57.520
the second number is larger than our current number if the following number is larger than our fear

01:57.520 --> 01:59.390
and our results like if statement to me.

01:59.400 --> 02:01.770
And so our current numbers input array.

02:02.200 --> 02:07.890
And we're saying if this is greater than or equal to because we're not saying we were saying it's increasing.

02:08.020 --> 02:14.760
So it's the same value or or equal to.

02:14.770 --> 02:17.040
Then the next number that we have an issue here.

02:17.080 --> 02:22.990
This is where we need to make some calculations where we're saying look if this is a true statement

02:22.990 --> 02:24.400
we need to adjust for count.

02:24.400 --> 02:26.030
Now what are re-adjusting for count.

02:26.170 --> 02:34.180
Well I define just a little constant variable here called difference and difference is going to be equal

02:34.180 --> 02:46.540
to the input array current value plus 1 minus the input array

02:49.690 --> 02:53.840
value added after it.

02:53.920 --> 03:00.730
So if that's the case or so we're adding one to the value there then we're going to go ahead and reassign

03:00.730 --> 03:10.140
the value in the array currently to I add the next value to the current value plus 1 meaning that a

03:10.150 --> 03:12.910
one's going to come into a is going to become three.

03:13.030 --> 03:16.430
In this instance we're actually going to modify the array here.

03:16.540 --> 03:22.120
It's not the index value but actually add 1 to it like so.

03:22.390 --> 03:30.310
And that needs to be input array and same thing here and now that we've done that what we're going to

03:30.310 --> 03:34.150
do here is we're going to say count.

03:34.150 --> 03:37.610
So now we're going to say is equal to the difference at the end of the day.

03:37.680 --> 03:41.480
So we're going to add the difference there.

03:41.720 --> 03:44.760
This will always be a positive number right because we've made this check here.

03:44.800 --> 03:49.390
So we're saying hey at this difference because we need to add that to the count and then modify the

03:49.390 --> 03:54.720
array so that it then the next one is only up by 1.

03:54.730 --> 03:59.320
We've already taken in consideration the count and we're going to do the same for the other values at

03:59.320 --> 03:59.690
the end.

03:59.710 --> 04:03.100
Everything is as it should be for this.

04:03.100 --> 04:04.760
I feel like my fortunes off a little.

04:04.760 --> 04:05.850
There you go.

04:06.430 --> 04:11.690
It took me a second to sort of wrap my mind around how I was going to deliver this.

04:12.310 --> 04:19.700
But once I sort of understood was trying to do this part right here was probably the hardest part.

04:19.990 --> 04:24.370
I got to here pretty easy and I find that happening quite a bit with algorithms as you are working your

04:24.370 --> 04:24.860
way through.

04:24.870 --> 04:30.220
Say you get two thirds of the way in the last third might be the part where you get into the numbers

04:30.220 --> 04:32.550
little being like Oh man what's going on here.

04:32.920 --> 04:33.640
But yeah.

04:33.640 --> 04:36.400
So that was fun let's move the.
