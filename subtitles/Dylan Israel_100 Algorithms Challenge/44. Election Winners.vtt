WEBVTT

00:00.540 --> 00:01.220
All right.

00:01.350 --> 00:04.880
So we're having a little bit of a political algorithm here.

00:05.280 --> 00:10.140
So we're trying to find out who our election how many possible election winners we can have.

00:10.140 --> 00:12.320
So we're going to take in an array of numbers.

00:12.330 --> 00:18.060
These are essentially the people in the running for the race and K here is the amount of votes left

00:18.060 --> 00:21.620
and we want to find out how many people could possibly still be a winner.

00:21.690 --> 00:24.660
And so too if we added the three would be five.

00:24.660 --> 00:28.860
They're not going to win because at best they're going to tie tie so we're not counting and then three

00:29.610 --> 00:31.890
three plus three or six so they could win great.

00:31.890 --> 00:33.000
Five plus three is eight.

00:33.000 --> 00:35.420
Of course they can win them in two plus three is five again.

00:35.640 --> 00:37.410
Unless they they're not going to win.

00:37.410 --> 00:44.590
So we have two potential candidates that could be winners here based off the votes that are left.

00:45.000 --> 00:46.940
And so let's jump into it.

00:47.070 --> 00:52.360
The two events I have here are sort and math max which is what I use to solve this.

00:52.410 --> 00:53.010
All right.

00:53.010 --> 00:57.770
So I solve this was I first found what the largest vote is.

00:57.870 --> 01:00.720
I then sort the array of votes.

01:00.780 --> 01:04.220
The reason for this is in edge cases where there is no votes left.

01:04.230 --> 01:12.290
We need to find out if there is a if we need to return a winner or not meaning that the first vote is

01:12.480 --> 01:17.050
the largest vote is done equal there's not an equal second largest vote.

01:17.260 --> 01:25.530
And after that we just keep track of a a in the running vote count and we subtract most votes from the

01:25.530 --> 01:29.160
current vote and see if it's less than the votes left.

01:29.160 --> 01:31.230
If it is we add one then we return.

01:31.370 --> 01:32.190
So let's start there.

01:32.190 --> 01:41.400
We're going to start here with a in what I call in the running and the Silvy number.

01:41.430 --> 01:45.030
Actually we don't need to say that that is there at the end here.

01:45.050 --> 01:48.060
What we want to do is just try and turn in the running.

01:48.500 --> 01:48.990
Excellent.

01:48.990 --> 01:53.020
And as always I forget during Qualcomm's We'll turn back on.

01:53.970 --> 01:54.650
Excellent.

01:54.660 --> 01:57.360
So right now we're not really doing much of anything.

01:59.060 --> 02:07.760
Next thing that we want to do is want to find out what the most votes are so or yeah most votes is fine.

02:07.760 --> 02:13.260
I was thinking maybe the largest vote I think most votes is fine and we're going to do this using math

02:13.480 --> 02:14.020
Max.

02:14.060 --> 02:20.600
And then here is the spread operator to unwrap votes and just give us the value from it.

02:20.840 --> 02:24.000
So I'll give us the largest value after that.

02:24.020 --> 02:35.290
We are going to have a sorted votes and this is going to be equal to the votes sort in in here.

02:35.330 --> 02:43.220
We're going to have an A and A B and all it's going to return is be my say which will be the numerically

02:43.220 --> 02:47.520
sorted from largest to smallest vote.

02:48.010 --> 02:48.990
All right.

02:49.190 --> 02:50.690
We're going to have a little check here.

02:50.720 --> 02:54.580
This is for those edge cases although here we don't have to worry about it.

02:54.620 --> 03:02.120
I did in the in the when I was doing this where we checked to see if the largest vote we have and remember

03:02.120 --> 03:11.630
we sorted it from highest to least if it's not equal to sorted votes one index one and there is no votes

03:11.630 --> 03:12.620
left.

03:12.620 --> 03:19.010
Meaning that we have a winner and we don't need a counting the votes just go ahead and turn to one because

03:19.310 --> 03:23.320
in that instance we have a winner and there's no calculations that need to be done.

03:23.330 --> 03:26.390
We just need to tell them hey you won.

03:26.390 --> 03:31.070
After that we just have to do the bulk of our logic here which is hey we're going to iterate through

03:31.250 --> 03:38.980
our vote count array here and what we want to do is we're just getting going and doing.

03:39.000 --> 03:43.940
If this is if most votes my vote count

03:47.000 --> 03:48.480
is less than k.

03:48.950 --> 03:59.180
Meaning that the largest number minus the current value here the current vote count is less than the

03:59.180 --> 04:08.030
number k then we can increment the in the running count.

04:08.360 --> 04:10.700
So we're going to add one to that and that's it.

04:10.700 --> 04:11.560
At the end of the day.

04:11.750 --> 04:19.310
So we're getting the largest vote so we know to see if the votes left essentially are enough to overcome

04:19.310 --> 04:19.910
the lead.

04:20.150 --> 04:24.610
That's really it at the end of day we do have some additional logic in here for the cases where there's

04:24.620 --> 04:25.840
no votes left in.

04:25.850 --> 04:26.580
Is there a winner.

04:26.600 --> 04:28.910
Is there not a winner so handle hand.

04:28.940 --> 04:31.470
That's how we're handling that with the above statement.

04:31.730 --> 04:33.830
But that's pretty much it.

04:33.910 --> 04:38.240
It was a fun one because it sort of relatable when I solved I think it was around the time there's an

04:38.240 --> 04:39.150
election of some sort.

04:39.160 --> 04:39.430
So.
