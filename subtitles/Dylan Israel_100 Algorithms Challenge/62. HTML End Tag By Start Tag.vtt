WEBVTT

00:00.620 --> 00:02.590
All right so it's a fun one here.

00:02.630 --> 00:10.820
We are given a simple editor or a string an HMO and we want to find the closing tag in here.

00:10.820 --> 00:17.240
And for whatever reason I can't get the code to render as is so we're just going to jump into the markdown

00:17.240 --> 00:19.460
so you can see what's actually happening here.

00:19.460 --> 00:22.600
So if we were to go here.

00:22.990 --> 00:25.740
Go go go go in the editor please do.

00:25.790 --> 00:26.260
All right.

00:26.450 --> 00:27.300
So you'll see here.

00:27.380 --> 00:34.040
We're actually passing HMO in here and so mark down registers HMO and I think that's what's happening

00:34.040 --> 00:38.480
here is it thinks we're actually trying to put HDMI and mark down you can do basic stuff.

00:38.480 --> 00:45.680
So you'll see here that we have this string of markdown that we're passing in these quotes and that's

00:45.740 --> 00:49.040
going to be our input and what we want is the closing tag.

00:49.040 --> 00:56.300
Same thing with our icon whatever the closing tag is and that's what we need to return.

00:56.300 --> 00:58.930
So what I use for this was split into string.

00:59.180 --> 01:04.930
But really it's more of a logic based algorithm of what you're going to have to manipulate the data

01:04.950 --> 01:07.920
check what it is and I will dive into it.

01:08.230 --> 01:10.790
All right so I solved this in kind of a strange way.

01:11.450 --> 01:16.820
The way I did it was I took the Start Tag I split it up on each space.

01:16.820 --> 01:23.310
So we're in take I call this God I called his split string this is such a bad name but we're just going

01:23.310 --> 01:28.370
to go with it since we're filming and I split it up on a space here.

01:28.370 --> 01:36.440
The reason for that is after our space here we're going to get this value and we're going to attach

01:36.900 --> 01:45.410
essentially is we're essentially going to we're going to get this value and then we are going to target

01:45.410 --> 01:46.640
it specifically.

01:46.640 --> 01:51.350
So we're going to split it on essentially each word if you want think of it like that and then we're

01:51.350 --> 02:00.420
going to have what I call the split tag which is going to be equal to the split string 0.

02:00.530 --> 02:01.650
The first value.

02:01.700 --> 02:01.940
Right.

02:01.940 --> 02:03.540
That's all that we care about.

02:03.650 --> 02:04.880
And we're going to take that.

02:05.000 --> 02:08.340
We're going to make it a string and then we're going to split it.

02:08.740 --> 02:15.050
I read I believe the original reason I had to make this a string was that some some items in here had

02:15.050 --> 02:18.230
numbers and they were red sureness numbers and it's causing issues.

02:18.440 --> 02:24.170
You may not have to do that for these two simple basic examples but you know when you have 20 edge case

02:24.170 --> 02:26.220
scenarios in some of these you do.

02:26.360 --> 02:29.000
So we're going to have what I call the end tag.

02:29.080 --> 02:32.990
So I am tag here we're going with this here.

02:32.990 --> 02:38.250
It's just going to be equal to the like at the start of a closing intact.

02:38.480 --> 02:47.480
And what we want to do is for each character omitting the very first one that's why we split it here

02:47.750 --> 02:50.020
because we don't need this.

02:50.090 --> 02:53.360
Omitting the very first one because we already started it.

02:53.630 --> 03:00.300
We want to go ahead and list and iterate through this and what I call the zero all by his list then

03:00.980 --> 03:04.340
split tag length.

03:04.750 --> 03:09.230
So iterate through all of it except the very first one because we don't need that we don't need that

03:09.260 --> 03:13.920
opening bracket because we're on the front of it we're throwing this the end tag on there and then what's

03:13.940 --> 03:20.320
the end tag plus equals to the remainder of split tag.

03:20.450 --> 03:23.810
Right here for each one of those characters and split tag.

03:24.170 --> 03:28.570
And then on the end here we want to return and tag.

03:28.850 --> 03:31.730
Now you'll see here we're having some issues right.

03:32.120 --> 03:35.790
So we have to we have to do a couple of things.

03:35.920 --> 03:41.900
The the very front the value of our end tag we're going to modify.

03:41.900 --> 03:46.510
We're going to modify and tag ever so slightly but you can see we're almost there.

03:46.730 --> 03:59.900
So what we're going to do is we're set and tag and tag is equal to and tag and then and tag length minus

03:59.900 --> 04:01.450
once the the last value.

04:01.670 --> 04:09.860
And if it is exactly equal to this to a ending tag we're just going to set return and tag.

04:10.100 --> 04:12.910
If it's not printed it and tag

04:15.890 --> 04:21.160
plus equals a closing bracket on it like so.

04:21.530 --> 04:24.630
And last but not least we haven't.

04:24.890 --> 04:31.130
Oh I think we have an issue here with oh I was like we have one too many.

04:31.130 --> 04:32.410
We forgot to put that one in there.

04:32.420 --> 04:36.590
I was talking explaining it the whole time problem didn't make sense but it let's go over the logic

04:36.590 --> 04:41.510
one last time we're splitting up getting the very first word because that very first word or opening

04:41.510 --> 04:42.110
tag.

04:42.260 --> 04:47.810
We're then going to select that we're split up on a character so that we can omit the very first letter

04:47.810 --> 04:52.820
here because we're going to add this to the front of the string then we're going to join it back together

04:53.180 --> 04:58.440
assuming that there isn't a need for an end tag so we do this check here fork as some already have.

04:58.430 --> 05:03.260
Then we just need to close the self-closing like you know simple ones like this where it's only where

05:03.260 --> 05:05.860
there are no classes or types or properties.

05:05.900 --> 05:09.830
So that was it at the end of the day which said to kind of figure out how to manipulate strings really.
