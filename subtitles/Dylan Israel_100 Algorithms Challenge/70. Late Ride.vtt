WEBVTT

00:00.630 --> 00:01.440
All right.

00:01.440 --> 00:02.330
Late right.

00:02.340 --> 00:12.360
So we're going on a motorcycle trip here and we're starting our engine out right at May 9 0 0 0 0 military

00:12.360 --> 00:12.870
time.

00:13.140 --> 00:18.290
And we forget how long we've been going.

00:18.690 --> 00:25.110
And we have a digital timer and keeping track of essentially the minutes and what we want to do is convert

00:25.140 --> 00:33.030
those minutes into a standard you know to a standard hour and minute combination which then will get

00:33.030 --> 00:34.320
the total value of that.

00:34.320 --> 00:42.270
So if we've been traveling for 240 minutes or approximately you know since to 4 a.m. our total would

00:42.270 --> 00:49.370
be four because would be zero this digit plus four plus the first minute digit and the second minute

00:49.380 --> 00:50.040
digit.

00:50.100 --> 00:51.740
That's our objective here.

00:52.250 --> 00:58.570
And then 8 away you can see the same thing where it's 13:28 when you get the value 14 from the minutes

00:58.570 --> 01:01.020
and I use quite a few methods to solve this.

01:01.200 --> 01:02.460
I use to string.

01:02.460 --> 01:06.610
Concat split parsing reduce and map.

01:06.780 --> 01:08.730
Let's jump into it.

01:08.770 --> 01:09.340
All right.

01:09.390 --> 01:17.100
I solved this was I first got the hours then I got the minutes I separated them out and then from there

01:17.370 --> 01:22.650
I took the hours to string I took the hours convert it to a string.

01:22.890 --> 01:28.070
I concatenated the minutes that I then converted to a string I converted to a string then concatenated

01:28.080 --> 01:35.760
the minutes and finally I split it up into a character array and then I just reduced it after I parsed

01:35.760 --> 01:37.260
the strings as integers.

01:37.260 --> 01:44.220
So that's how I suddenly got the numbers made a string then treat them as they were treating them as

01:44.310 --> 01:51.650
if they were not a not a a string.

01:51.750 --> 01:59.250
And then I added them together which now that I'm thinking about it will see I think some have overly

01:59.250 --> 02:03.960
complicated this and looking at it right now and like I think I think I did some soakers.

02:04.260 --> 02:10.580
One of the methods I forgot to add on there was map the floor so that ours is equal to math.

02:10.620 --> 02:16.950
Floyd There is a floor here is we don't want the remainder we only want the hours from our input and

02:16.950 --> 02:18.980
here we're going to divide that by 60.

02:18.990 --> 02:22.300
That's going to give us our hours to go and drop off the remainder.

02:22.470 --> 02:33.240
But we do want the minutes which is going to be equal to our input modulo 60.

02:33.240 --> 02:41.530
So the remainder of the minutes which let me see if I did this incorrectly our

02:44.750 --> 02:45.510
Yes Arka.

02:45.530 --> 02:46.580
That didn't work.

02:46.580 --> 02:53.780
I was just thinking I may have gone I may have gotten a little hifi but I forgot that we have to add

02:53.780 --> 02:57.490
the the total of the two items.

02:57.520 --> 02:59.200
How I think I went too crazy.

02:59.210 --> 03:01.280
But now they're right the first time.

03:01.280 --> 03:01.640
All right.

03:01.760 --> 03:04.850
So I'll recreate this time variable here.

03:04.850 --> 03:09.230
And what this is going to be is our hours and we're going to convert it to a string that we're just

03:09.230 --> 03:15.730
going to concat that with the minutes which will also go ahead and convert to a string

03:21.260 --> 03:25.000
and then we're going to split it into a character array.

03:25.130 --> 03:30.500
Now that we have it in a character array which we're then going to map because it's going to get angry

03:30.500 --> 03:33.230
if I try to just use Reduce on a string array.

03:33.290 --> 03:35.390
So we're going to map our chars

03:39.240 --> 03:49.350
and just go ahead and stay celibate we're going to return Parsee and oh this is going to be.

03:49.480 --> 03:49.730
Yeah.

03:49.820 --> 03:52.560
Percent char.

03:53.340 --> 03:53.910
Excellent.

03:53.910 --> 03:56.410
So that's going to return an array of integers.

03:56.530 --> 03:57.850
You need that there.

03:58.410 --> 04:03.040
All we have to do then is just return that item time.

04:03.150 --> 04:09.990
We just have to add it together which is just going to be the reduce method here and should that be

04:09.990 --> 04:12.860
a plus b.

04:13.770 --> 04:14.860
And there we go.

04:14.940 --> 04:17.630
Wait did that did that work before.

04:17.670 --> 04:18.510
Was that right.

04:18.540 --> 04:19.440
Four and 14.

04:19.440 --> 04:21.570
Is that what we got before.

04:23.700 --> 04:29.910
Return hours plus minutes.

04:29.910 --> 04:34.570
Now for for you our goal there we go.

04:34.580 --> 04:35.570
I believe that's right.

04:35.570 --> 04:35.870
Does it.

04:35.870 --> 04:36.120
Why.

04:36.140 --> 04:37.730
Why do I think that's not right.

04:38.020 --> 04:39.160
Yeah it's for 14.

04:39.170 --> 04:40.740
Ok cool.

04:41.090 --> 04:45.620
Sometimes I go a little crazy but so what we had to do here was we had to figure out how can we get

04:45.620 --> 04:50.390
the numbers that we need to represent time once we have those time numbers.

04:50.570 --> 04:52.380
And that was these first two things.

04:52.460 --> 04:57.380
We then had to find a way to split each and treat each individual number as a digit and we do that by

04:57.380 --> 04:58.760
converting it to a string.

04:58.760 --> 05:00.640
Break it down into a character array.

05:00.650 --> 05:06.590
Now we need to parse the end for when we reduce here so that we can then add all the numbers together

05:06.590 --> 05:07.740
because are currently strings.
