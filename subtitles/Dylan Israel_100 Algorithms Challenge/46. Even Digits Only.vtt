WEBVTT

00:00.550 --> 00:05.580
All right even digits only one is on one basically.

00:05.580 --> 00:13.110
Our objective here is we're taking in a number and we want to check if every single digit is even you

00:13.110 --> 00:16.920
can see that in this one is failing because there are three which is odd.

00:16.980 --> 00:19.590
So we need to figure out how to do that.

00:19.600 --> 00:20.170
Whoops.

00:20.190 --> 00:28.650
And are the functions that I use the handsful as I used to string split every and parse it which feels

00:28.650 --> 00:30.860
like overkill for this problem at first glance.

00:30.880 --> 00:39.000
But I think if you have a better solution I encourage you guys to share your solutions and all of these

00:39.000 --> 00:42.130
and I'll update the video to show more than one solution.

00:42.210 --> 00:45.060
But this is what I needed to accomplish this fall.

00:45.750 --> 00:51.810
All right so the way that I solve this one was I converted our number to a string and I made a a essentially

00:51.810 --> 00:54.170
a character array out of it.

00:54.300 --> 01:02.670
And from there I return a boolean that checks every element in the array parses it as a net divided

01:02.670 --> 01:08.570
by two and checks if it's even if it is we return true if it isn't we return false.

01:08.580 --> 01:10.010
That's what I did for this one.

01:10.290 --> 01:11.730
Let's go ahead and get started.

01:11.730 --> 01:19.540
We're going to say we'll make a concert here and we'll go ahead and say What do you call those called

01:19.590 --> 01:23.950
digits is equal to an to string.

01:25.440 --> 01:29.250
And then we'll split it on each character.

01:29.610 --> 01:30.340
Nice.

01:30.420 --> 01:38.010
And in our turn here we're going to take digits and call every on it which is an array function that

01:38.010 --> 01:40.320
so say return a true or false value.

01:40.380 --> 01:46.150
If all of these items passed this every single item passes it is called Digic.

01:46.230 --> 01:48.130
We'll get a little bit more sense.

01:48.420 --> 01:55.770
And then we're going to say parse the string a find number and treat it as a integer parse each digit.

01:55.770 --> 02:00.020
And is it evenly divisible by zero.

02:00.420 --> 02:02.780
That's it really at the end of the day of course.

02:02.790 --> 02:03.830
So I call in there.

02:03.990 --> 02:08.160
So that's how I solved this one.

02:08.210 --> 02:15.450
I I was for a while trying to figure out a way to do this with the less method calls and I'm at it spend

02:15.450 --> 02:16.460
too much time on it.

02:16.590 --> 02:19.380
But this is what I was able to come up with.

02:19.630 --> 02:24.090
First for something in me is showing me that there's probably a mathematical way to solve this that

02:24.090 --> 02:28.050
I am just not aware of and I can't figure it out for the life of me boy.

02:28.050 --> 02:30.310
That being said let's go on to the next on.
