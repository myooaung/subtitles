WEBVTT

00:01.050 --> 00:05.250
All right so the alphabetic sub sequence is a fun one.

00:05.340 --> 00:09.670
Here our objective is we are going to take in a string in this example here.

00:09.720 --> 00:14.200
E f f g and or C B C.

00:14.370 --> 00:19.890
And what we want to happen here is return a boolean about whether or not that the sequence of it went

00:20.160 --> 00:23.440
as you would expect an alpha in the alphabet right.

00:23.490 --> 00:25.600
So A B C D.

00:25.620 --> 00:30.900
So there's ubiquitous it's going to fail if it doesn't go in order it doesn't have to necessarily go

00:30.900 --> 00:40.200
ABC but it would have to go A C E or A C D meaning that the all the values before it are less than the

00:40.200 --> 00:43.290
values after it.

00:43.290 --> 00:46.670
So that's what we're that's what we're tasked with here.

00:46.710 --> 00:51.620
The way that I solve this I use sets with the Size property I also use char code at.

00:51.670 --> 00:53.440
Let's go ahead and jump right into it.

00:54.220 --> 01:00.670
All right so the way that I solved this was I split the string into an array of characters and then

01:00.760 --> 01:10.490
stored it the char code the the char code value which is going to be the ascii value to an array.

01:10.570 --> 01:15.380
I compared the size to a set which only has unique values and if they're not the same size then we have

01:15.380 --> 01:21.010
duplicate letters and we can go ahead and return false because that's one false case.

01:21.010 --> 01:28.670
And then from there what I did was I then sorted through to check if the values are in order right.

01:29.590 --> 01:35.710
And say hey is this less than this is this list and this and if any of them ever is greater than the

01:35.710 --> 01:38.670
previous one we can just return false cells for you.

01:38.680 --> 01:40.900
So let's go ahead and get started here.

01:40.900 --> 01:49.180
So the way that I like to solve booleans is the cases in which there are more true statements will return

01:49.180 --> 01:55.360
TRUE more than false statements are true and false so what I mean by that is typically what do I need

01:55.360 --> 01:56.020
to code against.

01:56.020 --> 01:59.110
And in this case I want to code against falsie values.

01:59.110 --> 02:01.210
So let's go in and create that char's array.

02:01.540 --> 02:06.450
And I'm going to explicitly say that this is a string array.

02:10.810 --> 02:12.480
I don't mean the same thing for numbers.

02:12.520 --> 02:13.410
It was my array types.

02:13.410 --> 02:17.110
I like to tell them what it is I'm expecting.

02:17.100 --> 02:24.720
So char values is going to be storing number values and these are going to be like are A's B C's they're

02:24.720 --> 02:28.590
ascii values of C..

02:28.670 --> 02:32.580
Well what I need do initialize that to a empty value.

02:32.670 --> 02:36.930
Next what we're going to do is we're going to iterate through our character array that we just got here

02:36.930 --> 02:42.510
a moment ago and we're just going to go through and then we're going to get each one of those chars

02:42.540 --> 02:43.280
which are strings.

02:43.290 --> 02:43.690
Right.

02:48.370 --> 02:48.900
Right.

02:48.980 --> 02:55.130
Each one of these Charke their char code value their ASCII value.

02:55.160 --> 02:56.590
As you say char values

03:00.860 --> 03:03.990
try values.

03:04.340 --> 03:11.720
Push on Push one of push char but the char code at the index here.

03:11.720 --> 03:12.270
Right.

03:12.290 --> 03:17.210
So in our case we have just a single letter and that's where the zero is coming from.

03:17.210 --> 03:20.570
Now what we can do now we have two different things to compare.

03:20.570 --> 03:27.030
We can write this statement here that says hey if a new set so sets are kind of like arrays they're

03:27.080 --> 03:27.740
iterable.

03:27.770 --> 03:32.020
But they don't take duplicates even if you pass duplicates.

03:32.210 --> 03:42.180
So you'll see here if we were to for instance canceled our log new set char values you could see that

03:42.180 --> 03:52.630
1 0 1 1 2 1 or 3 even though there's four letters because it's missing one of those one of those F's.

03:52.630 --> 03:53.670
So what we're saying here.

03:53.680 --> 03:59.260
And then we're in called dot size and that's going to essentially the length of sets if we're saying

03:59.260 --> 04:05.770
that these are not equal to the same thing as the char values length which is an array and will have

04:05.770 --> 04:07.090
duplicates.

04:07.090 --> 04:12.760
We just want to return false because there are duplicate values and thus there's no reason as to how

04:12.760 --> 04:14.170
these can persist.

04:14.290 --> 04:19.120
But in our tests here these are all passing for true but we can actually make it one step a little bit

04:19.120 --> 04:22.380
further because there may be things that are in the wrong order.

04:22.380 --> 04:27.970
For instance let's give an example where we're to take one of these

04:32.390 --> 04:39.170
and we were to say the A B for instance that would return true right now.

04:39.560 --> 04:43.130
And the problem with that is that would be incorrect.

04:43.160 --> 04:47.610
And so what we want to do is say look what i equals zero.

04:47.810 --> 04:57.140
We'll say well I use less and char values at length iterate through it and then we'll just have a little

04:57.210 --> 05:01.420
esteeming and say if char values and this can be Charvel.

05:01.430 --> 05:04.520
So minus one if char values

05:07.460 --> 05:13.510
is greater than or equal to at this point we can eliminate the equal to because our first test was again.

05:13.640 --> 05:20.350
But it's probably a good convention just just leave this in here where they're equal to I plus 1.

05:20.750 --> 05:23.820
We can go ahead and return false.

05:24.440 --> 05:27.780
And now we handle the false instance and we have all our TRUE instances.

05:28.010 --> 05:29.520
So again what we did was we took a drink.

05:29.530 --> 05:31.130
We made it an array of characters.

05:31.370 --> 05:35.060
We then got the ascii values of those characters.

05:35.120 --> 05:37.980
We checked to see if there was any duplicates.

05:38.000 --> 05:42.780
And then if any of the letters came before it were larger than the letter after we returned false all

05:42.780 --> 05:44.140
of their cases were returned true.
