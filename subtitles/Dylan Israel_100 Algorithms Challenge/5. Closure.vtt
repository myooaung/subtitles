WEBVTT

00:00.690 --> 00:05.870
One of the most common ones is what is closure in javascript.

00:05.990 --> 00:10.780
Is this kind of an intermediate question but it is very very common.

00:11.040 --> 00:19.740
And closure the answer should be is it closure essentially is a function calling a phone returning a

00:19.740 --> 00:21.070
function within.

00:21.150 --> 00:24.240
So you'll have a parent function that will have a child function.

00:24.270 --> 00:31.830
And so the reason to do something and use closure is you can in fact instantiate a variable that on

00:31.830 --> 00:38.810
your first function call enclosure and then after that your return function will have access to it.

00:39.240 --> 00:41.850
Let's into a common example would be.

00:42.000 --> 00:48.330
Let's say we wanted to have a count object where we wanted to keep track of something but we didn't

00:48.330 --> 00:53.400
want to make it a property of class and we didn't want to make it a globally so variable but we just

00:53.400 --> 00:58.970
needed access to it and we wanted to iterate we could use closure to do something like that.

01:00.160 --> 01:00.720
All right.

01:00.730 --> 01:03.730
Let's say I'm at the Take a look at an example of closure.

01:03.740 --> 01:04.140
OK.

01:04.270 --> 01:09.040
So we have this function that is returning a nother function.

01:09.040 --> 01:15.880
Now what we can do here is we can actually instantiate a variable here and we'll just go ahead and call

01:15.880 --> 01:18.760
it count and initialize it to zero.

01:18.910 --> 01:27.700
And what we want to do within arc our closure function here is we just want to count plus plus and then

01:28.370 --> 01:32.620
cancel the log count.

01:32.830 --> 01:39.490
And what you'll see is once we go ahead and go ahead and call this function we'll go out and say of

01:39.500 --> 01:51.610
course C-L example is equal to closure example and we'll go at and instantiate it there.

01:51.730 --> 02:01.150
But you'll notice when the consulate log closure celo example today is that we're getting a function

02:01.150 --> 02:06.430
back because this is actually storing a reference to this function.

02:06.610 --> 02:10.780
So we're instantiating it here essentially we're calling this function here.

02:10.780 --> 02:20.770
But now if we were to down here say take C-L example and instantiate it like so you'll see that we're

02:20.770 --> 02:24.500
actually getting one right here and then we are going to it's kind of hard to do it in here.

02:24.510 --> 02:29.770
But if we do it again or here consider log s.l example

02:32.430 --> 02:36.020
actually it's 2.

02:36.030 --> 02:39.900
So you can see we're iterating on our item and we could actually probably it probably would have been

02:39.900 --> 02:42.030
better to return this for this example.

02:42.120 --> 02:47.070
But you'll notice that it's not getting reset because what's happening is our very first function call

02:47.490 --> 02:51.070
from our parent function is in fact instantiating count.

02:51.150 --> 02:58.320
And now we have no way to reset count and every iteration after that is actually going ahead and calling

02:58.410 --> 03:03.660
calling this one thing to also say you can actually do double function calls on closure.

03:03.810 --> 03:09.780
And I believe that we'll call it right away like so but then you don't have access to the function.

03:09.780 --> 03:15.460
So after the fact like so but that is in a very basic example what closure is.
