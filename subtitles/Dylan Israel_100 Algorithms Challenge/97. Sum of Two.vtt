WEBVTT

00:00.540 --> 00:06.870
All right guys some have to this is another one by Google on code 5s.

00:06.900 --> 00:11.970
Our objective here is we're going to take in two arrays and a number and we want to find out if we take

00:11.970 --> 00:16.290
exactly one value out of array one and one value add every two.

00:16.350 --> 00:19.050
If we can equal 42.

00:19.080 --> 00:27.510
Now your hint is has own property and a little sidebar on this solution actually solve this with some

00:27.510 --> 00:33.510
array methods but it is too slow for it to be a passing solution.

00:33.690 --> 00:43.140
So I had to create a an object that would do it much faster but so try and solve it without using the

00:43.140 --> 00:43.680
array method.

00:43.680 --> 00:44.820
So I guess it's my point.

00:44.830 --> 00:47.620
See how well you can do I think.

00:47.820 --> 00:52.290
I think you might learn something but also don't be afraid to solve it solve it whatever way you think

00:52.290 --> 00:53.010
is best.

00:53.190 --> 00:55.150
But don't be afraid to refactor.

00:55.170 --> 00:56.790
As my my point.

00:57.140 --> 00:57.900
What's going in.

00:57.930 --> 00:59.560
Jump into it.

00:59.640 --> 01:05.300
All right so the way that I solve this was a critique an object and then I iterate it through array

01:05.310 --> 01:14.010
1 or a array and I took our V and I minus that value each index value.

01:14.160 --> 01:19.150
And then I created a key on our map key essentially on our object.

01:19.290 --> 01:29.520
And then I went into what should be the value that we would need for another value to add to add to

01:30.030 --> 01:32.900
V to add to our tour our desired value.

01:33.210 --> 01:42.050
And if we got that in that property existed we go ahead and add the value so let's go ahead and just

01:42.140 --> 01:43.330
go through.

01:43.650 --> 01:46.220
Well make more sense just talking.

01:46.250 --> 01:52.590
So here I just called I have called this object hash maps not perfectly correct but I think that's fine.

01:52.880 --> 02:03.920
And we're going to iterate through say what I call the 0 0 I is less then you're not sure there's even

02:04.030 --> 02:04.770
do this.

02:04.780 --> 02:06.630
So you're a 4.

02:06.650 --> 02:12.120
So let none of it of.

02:13.460 --> 02:23.700
And what we want to do is it's difference is equal to the minus No.

02:24.420 --> 02:31.040
And now that we have that we want to go ahead and say our hash map difference

02:33.800 --> 02:39.610
is equal to what difference does or not equal to it.

02:40.070 --> 02:45.260
So now that we've done that we've said these are all the values on here keys that we were saying hey

02:45.500 --> 02:48.670
these are the values we need for this to succeed.

02:48.700 --> 02:49.660
Mining is saying this.

02:49.670 --> 02:55.210
And all we get left is the number that if we wanted to add say you know we're going the opposite direction

02:55.250 --> 02:58.300
and we minus from the total is really our tol'able.

02:58.430 --> 03:01.370
And then we say hey this is the number I'm missing.

03:01.370 --> 03:04.110
Next we check to see if we have seen those numbers.

03:04.110 --> 03:04.980
If we do it's true.

03:05.090 --> 03:08.140
If we don't we just return false at the end here.

03:09.710 --> 03:14.570
So you go for loops let

03:19.130 --> 03:21.680
you actually need this

03:29.900 --> 03:31.740
when you do go through this as well.

03:31.760 --> 03:43.640
And some of the should work just fine and we'll see if our hash map has on property meaning it has the

03:43.640 --> 03:45.870
values that we need.

03:46.550 --> 03:48.320
Go ahead and return true.

03:48.340 --> 03:54.650
What are rechecking what we're checking if the number in B have it and bam we're done.

03:54.680 --> 03:56.420
So just go over the logic a little bit.

03:56.480 --> 04:04.100
We create an object to store the values that we need to reiterate through it and then we iterate through

04:04.100 --> 04:09.020
the second array and find out if any of those values match any of the keys in our object if they do

04:09.020 --> 04:10.790
return true if they don't.

04:10.790 --> 04:16.340
It means that you can't take one number out of AA and one number out of B unless you use or turn false

04:16.340 --> 04:16.860
at the end here.
