WEBVTT

00:00.870 --> 00:08.160
All Rice of valid time we are going to be taking in a time that has essentially five digits is going

00:08.160 --> 00:16.120
to have two numbers a colon than two numbers and we're trying to find out is this a valid time or not.

00:16.590 --> 00:21.060
You know 25 51 would be false because again only 24 hours a day.

00:21.360 --> 00:23.050
So obviously that's false.

00:23.460 --> 00:31.460
Oh 276 would be false because there's only 60 minutes an hour and we can't go 76.

00:31.470 --> 00:35.580
So that's what we're trying to find out here is is this a valid time or not.

00:35.580 --> 00:37.780
The two hints I have for you a person is split.

00:37.800 --> 00:39.630
Let's jump into it.

00:39.660 --> 00:47.820
All right so the first thing that I did to solve this was essentially split up the values based on a

00:47.820 --> 00:51.930
colon because we know that were guarantee that hey we're getting a valid input.

00:51.930 --> 00:57.390
So we're going to say look our minutes what I call it because that's what we're going to have basically

00:57.420 --> 01:00.270
beginning is equal to the time of split.

01:00.360 --> 01:05.400
And what are we split them or splitting on the colon to get our two values.

01:06.030 --> 01:10.130
Now we've done that we have to sort of understand that how are we going to handle this.

01:10.140 --> 01:12.410
Well we want to return a boolean.

01:12.450 --> 01:18.930
And what I want to do is I'm going to return True assuming none of our false cases fail or are true.

01:19.110 --> 01:25.920
And so what we can do is to kind of understand that we've now split our values up into hours and into

01:26.790 --> 01:30.610
and into in two minutes.

01:30.630 --> 01:36.630
And so from there we can just do two statements at check either one of these and if either of those

01:36.630 --> 01:43.470
are true are either of those in if either those failure cases are true we're going to return false.

01:43.470 --> 01:44.670
So let's start with minutes.

01:44.850 --> 01:46.380
Well er excuse me Howard.

01:46.380 --> 01:48.690
We'll start with ours.

01:48.720 --> 01:56.310
We know where we're going to parse that in here because I want to make the comparison that if ours is

01:56.700 --> 01:58.800
less than zero it's a negative number.

01:58.890 --> 02:02.820
That's going to be false or if it's greater than 23 that's going to be false.

02:02.820 --> 02:09.720
Not 24 because when you get hours to for 2400 a clock is always 23 59 and then when it hits the 24 hours

02:09.720 --> 02:13.050
it's going to roll over in 2 000.

02:13.050 --> 02:13.580
Right.

02:13.590 --> 02:25.830
So we're parse it on our minutes 0 are our index and you know we could even do here we could we could

02:25.830 --> 02:26.520
do this.

02:26.550 --> 02:34.160
Let's use a little bit of I didn't do this originally hours minutes.

02:34.170 --> 02:44.490
So we'll go ahead and do this like so this little bit of object the structure and it just makes a little

02:44.490 --> 02:46.050
bit more readable.

02:46.290 --> 02:49.560
If it's greater than 23 we're going to return false

02:52.780 --> 02:56.660
or parse.

02:57.280 --> 03:05.020
And ours is less than zero.

03:05.020 --> 03:06.740
We're going to return false.

03:06.970 --> 03:09.880
And now we're going to do the same thing separate do for the minutes.

03:09.910 --> 03:23.850
So if you parse it on Minutes is greater than 59 or because again around 60 Minutes when you hit 60

03:23.850 --> 03:31.530
it's going to rollover it is zero and it's going to increment the hour or if the parson value of minutes

03:32.850 --> 03:36.030
is less than zero.

03:36.450 --> 03:38.590
I mean it is a negative number.

03:38.610 --> 03:41.640
We're going to return false and that's it.

03:41.640 --> 03:43.180
We're good to go at this point.

03:43.440 --> 03:45.150
So we're equating.

03:45.180 --> 03:50.700
First off our hours and then our minutes and if either of those failure cases are not true we're just

03:50.700 --> 03:55.200
going to return true because we we've hit all of the failure checks that we need to have for this.
