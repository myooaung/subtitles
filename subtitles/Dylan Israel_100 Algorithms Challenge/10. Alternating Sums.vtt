WEBVTT

00:00.590 --> 00:08.070
All right alternating some so are ject if your is we are taking in an array of numbers and what we want

00:08.070 --> 00:14.310
to do is for the even numbers add them up on numbers add them up and then return those numbers back

00:14.340 --> 00:17.820
as a single array.

00:17.850 --> 00:23.830
So you'll see here in our example we have 50 60 60 45 70.

00:24.000 --> 00:30.490
And so for the odd right it would be index one index three hundred and five and then the other values

00:30.500 --> 00:31.160
the 180.

00:31.170 --> 00:32.540
So it's going to go even then.

00:32.730 --> 00:33.530
That's our goal.

00:33.610 --> 00:41.150
The goal here to add up two values to alternating songs I don't really have any hands for this one.

00:41.190 --> 00:45.990
All right so the way I did this was I carried two variables to store the even numbers and the odd numbers

00:46.010 --> 00:49.360
are the odd the even and odd sounds right.

00:49.590 --> 00:55.690
So it's a good turn on because I always forget to you know see right now are getting undefined.

00:56.220 --> 01:02.160
What we're gonna do here is we're going to say that even some equals zero.

01:02.700 --> 01:07.890
And that odd sum equals zero.

01:08.010 --> 01:15.260
So we're initialising that after that what we're going to do here is we're just going to to for each.

01:15.420 --> 01:19.380
You can also use a for loop don't really matter here.

01:19.510 --> 01:25.290
Element in the second values or index value and that's what we want to know because we need the index

01:25.310 --> 01:26.010
No.

01:26.460 --> 01:28.320
If it is an even or odd alternating.

01:28.340 --> 01:35.070
So at the end here what all eventually do we'll just return even some and we'll also return the odd

01:35.070 --> 01:39.320
sum which is 0 0 0 because we haven't done any other logic.

01:41.690 --> 01:46.070
Now what we can do here is just do simple if else.

01:46.070 --> 01:47.720
So if the index

01:50.840 --> 01:54.170
modulo 2 is

01:56.490 --> 02:07.140
exactly equal to zero meaning that's an even number which will take even some even some and we're going

02:07.140 --> 02:12.430
to set it equal to the ultimate value or update and add the element value to it rather.

02:12.570 --> 02:16.100
Else it's an odd value and then we'll take awesome.

02:16.700 --> 02:20.860
And we'll just update it to that element value.

02:20.970 --> 02:23.140
Pretty straightforward at the end of the day.

02:23.160 --> 02:28.410
You also could I mean this is very straight forward.

02:28.500 --> 02:34.260
I don't if you have a faster way of doing it let me know what it is but I don't think we can improve

02:34.260 --> 02:39.950
upon this other than maybe he will think some other code is cleaner.

02:40.110 --> 02:42.670
So yeah that's pretty much it.
