WEBVTT
1
00:00:01.000 --> 00:00:02.008
- [Instructor] We have now seen how serverless works

2
00:00:02.008 --> 00:00:04.004
at a very high level,

3
00:00:04.004 --> 00:00:08.009
so let's take a look at why one would want to do this.

4
00:00:08.009 --> 00:00:12.001
First and foremost is cost savings.

5
00:00:12.001 --> 00:00:13.001
With serverless,

6
00:00:13.001 --> 00:00:17.006
you get the ability to scale based on your need.

7
00:00:17.006 --> 00:00:20.005
But instead of scaling for your highest demand,

8
00:00:20.005 --> 00:00:22.009
you're scaling by the operation,

9
00:00:22.009 --> 00:00:26.002
and you're paying for just the operation.

10
00:00:26.002 --> 00:00:27.007
And by doing so,

11
00:00:27.007 --> 00:00:31.001
you are not paying for your peak usage throughout the year,

12
00:00:31.001 --> 00:00:33.001
as I previously stated.

13
00:00:33.001 --> 00:00:35.008
You also get benefits from reduced maintenance.

14
00:00:35.008 --> 00:00:39.002
So, even though a VM may be in the cloud,

15
00:00:39.002 --> 00:00:41.006
you still have maintenance that you have to do on it.

16
00:00:41.006 --> 00:00:43.002
You've got to upgrade your VM,

17
00:00:43.002 --> 00:00:45.002
you've got to patch components.

18
00:00:45.002 --> 00:00:48.004
And with serverless, you simply deploy your code.

19
00:00:48.004 --> 00:00:51.003
You don't do any of those maintenance activities

20
00:00:51.003 --> 00:00:53.009
on your VM itself.

21
00:00:53.009 --> 00:01:00.000
Now, separation is another key benefit of using serverless.

22
00:01:00.000 --> 00:01:04.006
There is no longer a need to cram disjointed operations

23
00:01:04.006 --> 00:01:09.000
into a single VM in order to maximize its value.

24
00:01:09.000 --> 00:01:12.001
You get some security and permissions benefits as well,

25
00:01:12.001 --> 00:01:14.006
because usually with serverless,

26
00:01:14.006 --> 00:01:18.005
these functions are operating in their own little sandbox,

27
00:01:18.005 --> 00:01:21.000
and that sandbox has its own security

28
00:01:21.000 --> 00:01:23.007
and its own permissions associated with it

29
00:01:23.007 --> 00:01:26.006
and you're not crossing threads with other functions

30
00:01:26.006 --> 00:01:29.005
that may be operating in the same VM pool.

31
00:01:29.005 --> 00:01:32.003
Again, something that you don't get when you're trying

32
00:01:32.003 --> 00:01:34.007
to cram multiple operations

33
00:01:34.007 --> 00:01:38.005
into a single or VM pool itself.

34
00:01:38.005 --> 00:01:40.005
Another benefit of this separation

35
00:01:40.005 --> 00:01:44.000
is it solves many of the async patterns that we have

36
00:01:44.000 --> 00:01:47.002
by reducing the waste associated with them.

37
00:01:47.002 --> 00:01:48.009
Let me give you an example.

38
00:01:48.009 --> 00:01:51.005
Traditionally, when we write a message listener,

39
00:01:51.005 --> 00:01:54.000
we run that on a server

40
00:01:54.000 --> 00:01:57.008
that is actively pulling against the messaging system

41
00:01:57.008 --> 00:02:01.000
to determine if there is a message to act on.

42
00:02:01.000 --> 00:02:03.002
And in doing so, it's using resources,

43
00:02:03.002 --> 00:02:06.002
but there's a lot of waste associated with that.

44
00:02:06.002 --> 00:02:10.007
With serverless, we actually trigger the serverless function

45
00:02:10.007 --> 00:02:13.000
based on the presence of a message.

46
00:02:13.000 --> 00:02:15.006
And this again reduces our waste,

47
00:02:15.006 --> 00:02:18.007
but allows us a just-in-time operation

48
00:02:18.007 --> 00:02:20.007
that reduces overall costs,

49
00:02:20.007 --> 00:02:24.006
since we're only paying for the operation itself.

50
00:02:24.006 --> 00:02:26.006
Now let's talk a little bit more

51
00:02:26.006 --> 00:02:28.005
about asynchronous operations,

52
00:02:28.005 --> 00:02:32.001
because most, if not all, serverless functions

53
00:02:32.001 --> 00:02:37.004
tend to end up being some form of an asynchronous process.

54
00:02:37.004 --> 00:02:39.000
Even if it's running a website,

55
00:02:39.000 --> 00:02:43.000
a lot of times we will front that with some sort of CDN

56
00:02:43.000 --> 00:02:46.000
that actually makes the operation itself async.

57
00:02:46.000 --> 00:02:47.006
Now, not always,

58
00:02:47.006 --> 00:02:50.004
but async is a very strong pattern

59
00:02:50.004 --> 00:02:52.006
and it's worth talking about.

60
00:02:52.006 --> 00:02:55.002
The serverless functions can be a key player

61
00:02:55.002 --> 00:02:57.003
in asynchronous operations,

62
00:02:57.003 --> 00:03:01.009
especially as you move into a public cloud ecosystem.

63
00:03:01.009 --> 00:03:04.006
Again, it reduces the waste of waiting.

64
00:03:04.006 --> 00:03:08.006
That waiting operation is nothing but a wasteful event

65
00:03:08.006 --> 00:03:11.009
when you're dealing with operations of scale

66
00:03:11.009 --> 00:03:14.006
on a VM consumption model.

67
00:03:14.006 --> 00:03:17.007
It's also much easier to isolate and respond

68
00:03:17.007 --> 00:03:20.007
in a serverless function type behavior

69
00:03:20.007 --> 00:03:24.004
because each listener will respond

70
00:03:24.004 --> 00:03:26.003
based on a function itself,

71
00:03:26.003 --> 00:03:28.000
as opposed to a listener pool

72
00:03:28.000 --> 00:03:30.007
that responds to many different queues.

73
00:03:30.007 --> 00:03:33.002
It also offers a lot of flexibility

74
00:03:33.002 --> 00:03:35.008
in that you can scale multiple operations

75
00:03:35.008 --> 00:03:39.002
within a serverless function by chaining them together

76
00:03:39.002 --> 00:03:43.000
instead of tying them all to individual listeners.

77
00:03:43.000 --> 00:03:45.004
A lot of times, we would do things in async

78
00:03:45.004 --> 00:03:48.003
where the first listener would do some operation

79
00:03:48.003 --> 00:03:49.008
and put a message back on a queue

80
00:03:49.008 --> 00:03:52.003
so that another listener could pick it up.

81
00:03:52.003 --> 00:03:53.007
Well, with serverless functions,

82
00:03:53.007 --> 00:03:56.006
we can simply trigger the next in the chain

83
00:03:56.006 --> 00:04:00.003
without the intermediate queue that was really a fancy way

84
00:04:00.003 --> 00:04:04.000
of doing piping across a large-scale operation.

