WEBVTT
1
00:00:01.000 --> 00:00:02.003
- [Instructor] As with all technology,

2
00:00:02.003 --> 00:00:04.004
there is no silver bullet.

3
00:00:04.004 --> 00:00:07.002
Serverless has some risks that need

4
00:00:07.002 --> 00:00:09.009
to be evaluated before making a jump to it

5
00:00:09.009 --> 00:00:13.009
as a technology choice for your institution.

6
00:00:13.009 --> 00:00:17.004
First and foremost, we need to talk about costs.

7
00:00:17.004 --> 00:00:21.001
Now, workloads in a serverless environment

8
00:00:21.001 --> 00:00:24.008
can actually cause more than running a VM,

9
00:00:24.008 --> 00:00:28.000
even when that VM has those peaks and valleys

10
00:00:28.000 --> 00:00:29.005
that we talked about.

11
00:00:29.005 --> 00:00:32.000
It's hard sometimes to get a true picture

12
00:00:32.000 --> 00:00:35.001
of cost effectiveness in a serverless model

13
00:00:35.001 --> 00:00:36.008
because of this.

14
00:00:36.008 --> 00:00:40.000
Now, designing with serverless may hide

15
00:00:40.000 --> 00:00:42.009
some efficiencies that you can gain from

16
00:00:42.009 --> 00:00:45.001
a cross perspective.

17
00:00:45.001 --> 00:00:46.009
So let's take a look at the example

18
00:00:46.009 --> 00:00:50.001
of where we're running multiple serverless functions

19
00:00:50.001 --> 00:00:52.009
against a single trigger.

20
00:00:52.009 --> 00:00:54.007
Could we achieve the same thing

21
00:00:54.007 --> 00:00:57.007
by fanning that trigger out, and actually reducing

22
00:00:57.007 --> 00:01:02.001
our cost in a traditional VM environment?

23
00:01:02.001 --> 00:01:04.005
Another risk that comes with serverless

24
00:01:04.005 --> 00:01:07.008
is the inability to do proper debugging.

25
00:01:07.008 --> 00:01:09.007
Now, I'm not saying it's impossible,

26
00:01:09.007 --> 00:01:14.005
but it sometimes becomes very difficult to debut operations,

27
00:01:14.005 --> 00:01:17.001
especially when those serverless functions

28
00:01:17.001 --> 00:01:19.007
are running in a cloud environment.

29
00:01:19.007 --> 00:01:22.007
You cannot simply connect to running servers

30
00:01:22.007 --> 00:01:25.002
many times, which makes it difficult

31
00:01:25.002 --> 00:01:29.007
to do real-time debugging against a running process.

32
00:01:29.007 --> 00:01:32.006
Now, when you start chaining serverless functions,

33
00:01:32.006 --> 00:01:35.006
that debugging becomes even more complex.

34
00:01:35.006 --> 00:01:37.009
Because now we have serverless functions

35
00:01:37.009 --> 00:01:39.004
that trigger other functions,

36
00:01:39.004 --> 00:01:41.002
and we now have to figure out how

37
00:01:41.002 --> 00:01:44.007
to get output and debug against multiple functions

38
00:01:44.007 --> 00:01:46.006
at one time.

39
00:01:46.006 --> 00:01:49.007
I often find that logging is the most effective way

40
00:01:49.007 --> 00:01:52.004
to do debugging, which is kind of an old school way

41
00:01:52.004 --> 00:01:53.007
of doing debugging.

42
00:01:53.007 --> 00:01:56.003
But sometimes it's your only choice.

43
00:01:56.003 --> 00:01:59.004
By putting little out statements that say look here,

44
00:01:59.004 --> 00:02:02.000
or I am here, we can get a better indication

45
00:02:02.000 --> 00:02:06.002
of where we're at by reducing the complexity associated

46
00:02:06.002 --> 00:02:08.002
with connecting to debugging.

47
00:02:08.002 --> 00:02:10.001
But of course, every time you're doing that,

48
00:02:10.001 --> 00:02:11.008
you have to trigger a function,

49
00:02:11.008 --> 00:02:14.003
which then costs you more money.

50
00:02:14.003 --> 00:02:17.005
Now, another hard part is testing.

51
00:02:17.005 --> 00:02:21.005
Testing can be a struggle with serverless.

52
00:02:21.005 --> 00:02:23.008
And that's simply because the emulators

53
00:02:23.008 --> 00:02:28.000
from vendors that help aren't an exact replica

54
00:02:28.000 --> 00:02:31.004
of what happens in a real runtime.

55
00:02:31.004 --> 00:02:33.001
In addition, sometimes you

56
00:02:33.001 --> 00:02:35.001
run against serverless technologies

57
00:02:35.001 --> 00:02:37.002
that don't have an emulator at all.

58
00:02:37.002 --> 00:02:39.005
So it's almost impossible to test against them

59
00:02:39.005 --> 00:02:42.001
in a live environment.

60
00:02:42.001 --> 00:02:44.009
It also can be very hard to integration-test

61
00:02:44.009 --> 00:02:46.009
serverless functions, because you have

62
00:02:46.009 --> 00:02:49.005
to be able to run them in your environment,

63
00:02:49.005 --> 00:02:51.007
but that environment isn't something

64
00:02:51.007 --> 00:02:54.007
that you run, it runs in a cloud provider.

65
00:02:54.007 --> 00:02:56.003
So that adds to the complexity

66
00:02:56.003 --> 00:02:58.003
of actually effectively testing it,

67
00:02:58.003 --> 00:03:00.006
and oftentimes, you end up doing mocks around

68
00:03:00.006 --> 00:03:03.007
those serverless functions so that you don't have

69
00:03:03.007 --> 00:03:06.004
to deal with the cloud provider itself.

70
00:03:06.004 --> 00:03:08.003
But of course, those are mocks

71
00:03:08.003 --> 00:03:12.003
and not true tests of the running system as a whole.

72
00:03:12.003 --> 00:03:13.004
Now one of the biggest problems

73
00:03:13.004 --> 00:03:15.009
that I have seen with serverless functions

74
00:03:15.009 --> 00:03:18.003
is this concept of sprawl.

75
00:03:18.003 --> 00:03:20.009
As you start to write more and more functions,

76
00:03:20.009 --> 00:03:23.004
your function base grows.

77
00:03:23.004 --> 00:03:27.003
And as with any growth, individual elements

78
00:03:27.003 --> 00:03:31.004
become harder to control when you're running multiple,

79
00:03:31.004 --> 00:03:34.001
especially when you start interacting with triggers

80
00:03:34.001 --> 00:03:37.005
from the cloud provider or from various technologies,

81
00:03:37.005 --> 00:03:41.007
and chaining events, that sprawl can be almost unimaginable

82
00:03:41.007 --> 00:03:42.009
to deal with when you

83
00:03:42.009 --> 00:03:46.000
first start running serverless functions.

