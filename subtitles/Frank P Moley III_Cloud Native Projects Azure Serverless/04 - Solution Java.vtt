WEBVTT
1
00:00:00.000 --> 00:00:06.007
(upbeat music)

2
00:00:06.007 --> 00:00:09.008
- [Instructor] So now, it's time for my Java solution.

3
00:00:09.008 --> 00:00:12.006
And I want to show you a few things in the Azure portal

4
00:00:12.006 --> 00:00:15.007
related to your running serverless function.

5
00:00:15.007 --> 00:00:16.007
So the first thing I want to show you

6
00:00:16.007 --> 00:00:19.000
is I created a model class.

7
00:00:19.000 --> 00:00:22.006
And this model class simply has an element for the count

8
00:00:22.006 --> 00:00:25.001
and a getter and setter.

9
00:00:25.001 --> 00:00:29.006
I also created a FizzBuzzResponse class that has a count

10
00:00:29.006 --> 00:00:33.000
a fizz count, a buzz count, and a FizzBuzz count

11
00:00:33.000 --> 00:00:35.006
all of which have getters and setters on them.

12
00:00:35.006 --> 00:00:38.005
So now let's get to the function.

13
00:00:38.005 --> 00:00:41.009
So in the function, you'll notice on line 22

14
00:00:41.009 --> 00:00:46.000
that I take a model in as part of the request.

15
00:00:46.000 --> 00:00:47.004
Now scrolling down here,

16
00:00:47.004 --> 00:00:50.009
I take that model and get it from the optional

17
00:00:50.009 --> 00:00:54.006
I then create FizzBuzzResponse object.

18
00:00:54.006 --> 00:00:57.004
I set the count equal to that on line 28.

19
00:00:57.004 --> 00:00:58.008
I didn't enter the loop.

20
00:00:58.008 --> 00:01:01.000
Now, normally you can do FizzBuzz

21
00:01:01.000 --> 00:01:04.002
in like three or four lines in Java very easily.

22
00:01:04.002 --> 00:01:06.005
In this case, I expanded a little bit

23
00:01:06.005 --> 00:01:08.005
because I'm doing a couple of things

24
00:01:08.005 --> 00:01:11.000
every time I get one of these responses.

25
00:01:11.000 --> 00:01:14.006
So if it is a mode of three equals zero

26
00:01:14.006 --> 00:01:16.004
or a mode of five equals zero,

27
00:01:16.004 --> 00:01:19.009
which indicates that it's divisible by three and five,

28
00:01:19.009 --> 00:01:21.007
that is going to be a FizzBuzz.

29
00:01:21.007 --> 00:01:24.005
I take the existing count incremented by one

30
00:01:24.005 --> 00:01:27.004
and at the same time on line 32,

31
00:01:27.004 --> 00:01:31.007
I output it to the log and I do the same for FizzBuzz

32
00:01:31.007 --> 00:01:35.004
and then at the very end here, I output the string value

33
00:01:35.004 --> 00:01:37.004
if it is a simple number

34
00:01:37.004 --> 00:01:40.000
that is not divisible by three or five,

35
00:01:40.000 --> 00:01:42.007
I then set a response out.

36
00:01:42.007 --> 00:01:45.003
So after I got that up and running and I tested it locally,

37
00:01:45.003 --> 00:01:48.003
I also deploy it to Azure.

38
00:01:48.003 --> 00:01:50.003
And you can see I can go in here

39
00:01:50.003 --> 00:01:53.002
and execute that function now

40
00:01:53.002 --> 00:01:56.004
and I will simply pass it a count.

41
00:01:56.004 --> 00:02:00.008
And the count that I'm going to send at this time is 150

42
00:02:00.008 --> 00:02:02.002
and I will run it.

43
00:02:02.002 --> 00:02:05.002
Now I get a response back

44
00:02:05.002 --> 00:02:09.006
and that response says that there were 40 fizzes, 20 buzzes

45
00:02:09.006 --> 00:02:14.002
and 10 fizzbuzzes out of the account of 150 total.

46
00:02:14.002 --> 00:02:16.008
Now let's jump into the Azure portal.

47
00:02:16.008 --> 00:02:18.007
First of all, you'll see our function

48
00:02:18.007 --> 00:02:20.000
and we'll go ahead and refresh it

49
00:02:20.000 --> 00:02:22.003
now that I've run it a couple of times,

50
00:02:22.003 --> 00:02:24.002
and you'll see as we scroll down here,

51
00:02:24.002 --> 00:02:26.005
we've got our function counts,

52
00:02:26.005 --> 00:02:29.009
we've got our memory working set during the operation

53
00:02:29.009 --> 00:02:33.000
and the megabytes that it's consumed per millisecond.

54
00:02:33.000 --> 00:02:37.007
And if I refresh this again, you'll see my second execution.

55
00:02:37.007 --> 00:02:38.009
And sometimes that happens,

56
00:02:38.009 --> 00:02:40.009
it does take a little bit of time

57
00:02:40.009 --> 00:02:43.002
for metrics and logs to catch up with you

58
00:02:43.002 --> 00:02:45.001
but you can see I had my test run

59
00:02:45.001 --> 00:02:47.000
and then my run afterwards.

60
00:02:47.000 --> 00:02:49.000
Now, if I go into the log section

61
00:02:49.000 --> 00:02:53.001
and I set up a log stream, which is available in the console

62
00:02:53.001 --> 00:02:56.004
down here on log stream, I turned it on

63
00:02:56.004 --> 00:02:59.005
and then I allowed that execution to happen.

64
00:02:59.005 --> 00:03:00.008
As you look down here,

65
00:03:00.008 --> 00:03:03.009
you'll see that I've output into the logs

66
00:03:03.009 --> 00:03:07.009
all of those numbers and FizzBuzz FizzBuzz statements.

67
00:03:07.009 --> 00:03:09.007
What I wanted to show you here really

68
00:03:09.007 --> 00:03:12.002
is that the log stream is a valuable tool

69
00:03:12.002 --> 00:03:15.006
in working with serverless functions and Azure

70
00:03:15.006 --> 00:03:17.001
because it allows you to see the output

71
00:03:17.001 --> 00:03:21.004
in a very clear place within the portal itself

72
00:03:21.004 --> 00:03:24.000
if you don't want to connect to other mechanisms.

73
00:03:24.000 --> 00:03:25.008
That seems to be the theme of Azure

74
00:03:25.008 --> 00:03:30.004
is do a lot of it in the portal and not as much on the CLI

75
00:03:30.004 --> 00:03:33.001
though it is possible to do many of these tasks

76
00:03:33.001 --> 00:03:36.006
with the CLI, it just doesn't seem to be the modus operandi

77
00:03:36.006 --> 00:03:40.001
that they run with within Microsoft Azure.

78
00:03:40.001 --> 00:03:42.003
Now we've only touched a couple of the languages

79
00:03:42.003 --> 00:03:46.000
and obviously C# is something that is very popular

80
00:03:46.000 --> 00:03:47.009
with Azure developers.

81
00:03:47.009 --> 00:03:50.009
But C-sharp and Java are so similar,

82
00:03:50.009 --> 00:03:52.003
at least for the most part.

83
00:03:52.003 --> 00:03:55.001
Did you at least get the feel of it if you've done Java

84
00:03:55.001 --> 00:03:56.006
and if you're a C# expert

85
00:03:56.006 --> 00:03:59.005
that should be a relatively easy transition.

86
00:03:59.005 --> 00:04:02.007
Python is by far the most popular language

87
00:04:02.007 --> 00:04:06.005
for doing serverless functions and that's usually what I use

88
00:04:06.005 --> 00:04:09.009
even in my day-to-day operations as a go developer,

89
00:04:09.009 --> 00:04:12.005
a Python developer and a Java developer.

90
00:04:12.005 --> 00:04:14.008
Python seems to be my go-to method

91
00:04:14.008 --> 00:04:16.007
for any serverless function

92
00:04:16.007 --> 00:04:18.009
regardless of the cloud provider.

93
00:04:18.009 --> 00:04:21.006
I hope I've given you just enough of an insight

94
00:04:21.006 --> 00:04:25.006
into Azure functions to allow you to expand your knowledge

95
00:04:25.006 --> 00:04:28.003
using all the different triggers available

96
00:04:28.003 --> 00:04:32.000
within Microsoft Azure.

