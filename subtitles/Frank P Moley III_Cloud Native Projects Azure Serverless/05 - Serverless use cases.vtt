WEBVTT
1
00:00:01.000 --> 00:00:01.009
- [Instructor] So let's take a look

2
00:00:01.009 --> 00:00:06.002
at a couple of the use cases for Serverless technologies.

3
00:00:06.002 --> 00:00:10.000
Autoscaling web apps is definitely a very niche proposal

4
00:00:10.000 --> 00:00:12.005
within Serverless for many people,

5
00:00:12.005 --> 00:00:16.001
but it is a use case that can be leveraged.

6
00:00:16.001 --> 00:00:19.002
Autoscaling is the primary benefit of this.

7
00:00:19.002 --> 00:00:20.008
By building a web application

8
00:00:20.008 --> 00:00:24.005
that responds to a traditional HTTP request,

9
00:00:24.005 --> 00:00:28.001
you get autoscaling essentially for free

10
00:00:28.001 --> 00:00:31.009
with the Serverless footprint on many cloud providers.

11
00:00:31.009 --> 00:00:35.003
Therefore, as your request volume increases,

12
00:00:35.003 --> 00:00:37.005
Serverless can really start to shine

13
00:00:37.005 --> 00:00:40.004
as you don't have to build your app, per se,

14
00:00:40.004 --> 00:00:44.001
to be fault tolerant and resilient to the scaling need

15
00:00:44.001 --> 00:00:47.006
because Serverless takes care of much of that for you.

16
00:00:47.006 --> 00:00:48.005
Another benefit here

17
00:00:48.005 --> 00:00:52.000
is that there's minimal initial setup to get this scaling.

18
00:00:52.000 --> 00:00:54.001
You simply write your web application

19
00:00:54.001 --> 00:00:56.004
and then as it becomes more and more popular,

20
00:00:56.004 --> 00:00:57.007
Serverless will handle

21
00:00:57.007 --> 00:01:01.004
the scaling needs of your application.

22
00:01:01.004 --> 00:01:03.006
Now, I do want to point out once again,

23
00:01:03.006 --> 00:01:07.005
that you need to be careful as sustained volume increases.

24
00:01:07.005 --> 00:01:10.006
If you find that your application becomes so popular

25
00:01:10.006 --> 00:01:12.007
that it's used constantly

26
00:01:12.007 --> 00:01:15.001
throughout the day at a high volume,

27
00:01:15.001 --> 00:01:16.009
you may actually start to get benefits

28
00:01:16.009 --> 00:01:18.008
from moving away from Serverless

29
00:01:18.008 --> 00:01:21.008
into a more traditional VM environment.

30
00:01:21.008 --> 00:01:24.000
Now, event streaming is a use case

31
00:01:24.000 --> 00:01:27.005
that I most often use for Serverless

32
00:01:27.005 --> 00:01:29.006
in a cloud native world.

33
00:01:29.006 --> 00:01:32.007
Much of event streaming is based on asynchronous actions,

34
00:01:32.007 --> 00:01:33.008
and we've already talked about

35
00:01:33.008 --> 00:01:38.004
how Serverless can really shine in asynchronous actions.

36
00:01:38.004 --> 00:01:40.005
Events through your streaming model

37
00:01:40.005 --> 00:01:43.007
can trigger these functions to operate

38
00:01:43.007 --> 00:01:46.007
and manipulate data as needed.

39
00:01:46.007 --> 00:01:48.001
As always with Serverless,

40
00:01:48.001 --> 00:01:50.003
you get built in scalability

41
00:01:50.003 --> 00:01:53.007
because of the way that the framework operates.

42
00:01:53.007 --> 00:01:57.002
This can be very useful in observability processing

43
00:01:57.002 --> 00:01:59.002
and transformation of that data.

44
00:01:59.002 --> 00:02:02.002
In fact, a large majority of the use cases

45
00:02:02.002 --> 00:02:05.001
that I have used Serverless technologies for

46
00:02:05.001 --> 00:02:07.006
wrap around the use of observability

47
00:02:07.006 --> 00:02:11.002
specifically around security patterns

48
00:02:11.002 --> 00:02:13.005
within an application space.

49
00:02:13.005 --> 00:02:15.009
Now, be careful with this use case

50
00:02:15.009 --> 00:02:19.007
as sprawl and dependent triggers starts to increase,

51
00:02:19.007 --> 00:02:24.002
it can make your Serverless model that much more complex.

52
00:02:24.002 --> 00:02:25.006
Now file manipulation

53
00:02:25.006 --> 00:02:29.008
is another one of those use cases that just naturally works.

54
00:02:29.008 --> 00:02:34.005
Anytime you upload or manipulate files, videos, or images,

55
00:02:34.005 --> 00:02:38.007
those can be triggers in many cloud providers naturally

56
00:02:38.007 --> 00:02:41.004
for Serverless functions.

57
00:02:41.004 --> 00:02:44.007
Many times these occur on save or delete actions,

58
00:02:44.007 --> 00:02:46.002
they can also occur with moves

59
00:02:46.002 --> 00:02:50.008
because those are just saves and deletes in many patterns.

60
00:02:50.008 --> 00:02:53.009
And again, we're dealing with asynchronous processing.

61
00:02:53.009 --> 00:02:55.008
As we save the file,

62
00:02:55.008 --> 00:02:58.002
this trigger occurs after that point,

63
00:02:58.002 --> 00:03:01.003
therefore it becomes an asynchronous action.

64
00:03:01.003 --> 00:03:04.003
You can also use this in many use cases

65
00:03:04.003 --> 00:03:07.007
where you're pushing data to live data stores

66
00:03:07.007 --> 00:03:09.005
based on some action.

67
00:03:09.005 --> 00:03:12.001
Again, it's giving you this opportunity

68
00:03:12.001 --> 00:03:14.002
to do something after the fact

69
00:03:14.002 --> 00:03:18.003
and push data or manipulate data as you need it.

70
00:03:18.003 --> 00:03:21.009
And once again, be careful here when using this use case.

71
00:03:21.009 --> 00:03:24.002
Intense processing needs

72
00:03:24.002 --> 00:03:27.008
can start to overrun the Serverless benefits,

73
00:03:27.008 --> 00:03:31.004
and of course there's debugging, which often has to happen

74
00:03:31.004 --> 00:03:35.003
with these large complex tasks that tend to get associated

75
00:03:35.003 --> 00:03:36.007
with file manipulation,

76
00:03:36.007 --> 00:03:39.009
especially around videos and imaging.

77
00:03:39.009 --> 00:03:42.000
Now, another one of the primary use cases

78
00:03:42.000 --> 00:03:45.007
are around connectors within a cloud native environment.

79
00:03:45.007 --> 00:03:48.006
Cloud providers often provide connectors

80
00:03:48.006 --> 00:03:51.001
to Serverless functions.

81
00:03:51.001 --> 00:03:54.002
These give you remote system operations,

82
00:03:54.002 --> 00:03:56.003
not just within your cloud provider,

83
00:03:56.003 --> 00:03:58.008
but truly with SAS models

84
00:03:58.008 --> 00:04:00.007
where you need to execute some action

85
00:04:00.007 --> 00:04:03.005
based on a remote system trigger.

86
00:04:03.005 --> 00:04:05.009
These third party operations, in addition

87
00:04:05.009 --> 00:04:08.008
to leveraging the benefits of the cloud provider,

88
00:04:08.008 --> 00:04:11.001
can give you an asynchronous gate

89
00:04:11.001 --> 00:04:15.000
but one that's air gapped away from your primary runtime,

90
00:04:15.000 --> 00:04:18.009
and Serverless tends to fit really well in this model.

91
00:04:18.009 --> 00:04:21.002
These disjointed applications

92
00:04:21.002 --> 00:04:24.001
don't really need live connectivity,

93
00:04:24.001 --> 00:04:26.003
but need a way to communicate with each other

94
00:04:26.003 --> 00:04:29.002
over some sort of a triggered mechanism.

95
00:04:29.002 --> 00:04:31.002
And I've said this word triggered a lot

96
00:04:31.002 --> 00:04:32.004
because a lot of times

97
00:04:32.004 --> 00:04:35.008
that's how we think of Serverless functions.

98
00:04:35.008 --> 00:04:38.003
Some trigger executes some function,

99
00:04:38.003 --> 00:04:40.007
and it continues down this path,

100
00:04:40.007 --> 00:04:43.006
and we see this a lot with third-party operations

101
00:04:43.006 --> 00:04:46.002
where we're interacting with a SAS provider,

102
00:04:46.002 --> 00:04:48.006
and either they're sending us event

103
00:04:48.006 --> 00:04:50.003
or we're sending them an event,

104
00:04:50.003 --> 00:04:52.009
and at some point, these Serverless functions

105
00:04:52.009 --> 00:04:55.000
tend to fit the bill.

