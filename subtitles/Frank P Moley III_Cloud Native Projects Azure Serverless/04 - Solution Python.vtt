WEBVTT
1
00:00:00.002 --> 00:00:06.006
(upbeat music)

2
00:00:06.006 --> 00:00:09.001
- [Instructor] So now it's time for my solution

3
00:00:09.001 --> 00:00:11.004
to this challenge exercise.

4
00:00:11.004 --> 00:00:14.008
I created a new function called, coin-flip

5
00:00:14.008 --> 00:00:18.006
and within coin-flip, I wrote some very basic code.

6
00:00:18.006 --> 00:00:22.006
So first of all, I brought in logging, random, and JSON,

7
00:00:22.006 --> 00:00:25.004
you'll see that I changed my debug message

8
00:00:25.004 --> 00:00:27.007
based on my personal preference.

9
00:00:27.007 --> 00:00:30.005
I then, get the body element from the request,

10
00:00:30.005 --> 00:00:33.001
I pull the count out of the body.

11
00:00:33.001 --> 00:00:36.005
I set, heads equal to zero, and tails equal to zero.

12
00:00:36.005 --> 00:00:39.000
Then, I go for an "I" in the range,

13
00:00:39.000 --> 00:00:41.004
and I flip using random.int,

14
00:00:41.004 --> 00:00:44.000
and I set flip equal to zero or one.

15
00:00:44.000 --> 00:00:45.001
If flipping was zero,

16
00:00:45.001 --> 00:00:48.004
I consider that a heads and I increment the heads.

17
00:00:48.004 --> 00:00:53.001
If it's a one, I assume it's tails and I increment tails.

18
00:00:53.001 --> 00:00:54.008
And because it can only be zero or one,

19
00:00:54.008 --> 00:00:57.005
that "else" really treats it as, equals one

20
00:00:57.005 --> 00:00:59.004
because it can only be one of those two.

21
00:00:59.004 --> 00:01:02.004
I then create a results JSON element,

22
00:01:02.004 --> 00:01:06.003
that includes the total count heads, tails.

23
00:01:06.003 --> 00:01:10.000
And then I return that as an HTTP response.

24
00:01:10.000 --> 00:01:13.009
I then, uploaded that out to Azure

25
00:01:13.009 --> 00:01:17.004
and I can execute against that,

26
00:01:17.004 --> 00:01:21.006
and we will set our count.

27
00:01:21.006 --> 00:01:24.008
Let's do 75.

28
00:01:24.008 --> 00:01:27.006
And execute it,

29
00:01:27.006 --> 00:01:30.004
and get a response out.

30
00:01:30.004 --> 00:01:35.005
And I got 38 heads and 37 tails.

31
00:01:35.005 --> 00:01:48.005
We can execute it again.

32
00:01:48.005 --> 00:01:51.007
And this time I got 33 heads and 42 tails.

33
00:01:51.007 --> 00:01:54.004
So you can see, I have a little bit of randomness in there

34
00:01:54.004 --> 00:01:56.005
because I use that random library.

35
00:01:56.005 --> 00:01:59.000
And that's all it is to do this function

36
00:01:59.000 --> 00:02:01.003
in Azure using Python.

37
00:02:01.003 --> 00:02:03.001
Very simple example, of course,

38
00:02:03.001 --> 00:02:08.000
but you can do this kind of thing on much grander scale.

39
00:02:08.000 --> 00:02:10.000
And a lot of times functions are nothing more

40
00:02:10.000 --> 00:02:13.000
than simple blocks of code that you want to execute.

41
00:02:13.000 --> 00:02:15.008
So even the simple example has value

42
00:02:15.008 --> 00:02:17.003
of running through the basics,

43
00:02:17.003 --> 00:02:21.000
of using the framework to meet your needs.

