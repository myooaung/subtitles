WEBVTT
1
00:00:00.005 --> 00:00:01.007
- [Instructor] So, now that we've written

2
00:00:01.007 --> 00:00:04.006
our function in Java and tested it locally

3
00:00:04.006 --> 00:00:08.003
using our installed Azure function tools.

4
00:00:08.003 --> 00:00:10.004
It's time to deploy this out to Azure

5
00:00:10.004 --> 00:00:13.001
and execute it out there.

6
00:00:13.001 --> 00:00:15.006
So, let's jump back into our IDE

7
00:00:15.006 --> 00:00:18.001
and I want you to go to the Azure extension,

8
00:00:18.001 --> 00:00:20.007
and now you may or may not have one that looks

9
00:00:20.007 --> 00:00:21.009
just like this.

10
00:00:21.009 --> 00:00:25.004
You actually have to build the code fully locally

11
00:00:25.004 --> 00:00:29.000
and package it in order to upload it to Azure.

12
00:00:29.000 --> 00:00:32.000
So, if you don't see the update command,

13
00:00:32.000 --> 00:00:34.000
you're going to click the same way

14
00:00:34.000 --> 00:00:35.008
that I'm going to click the update here

15
00:00:35.008 --> 00:00:39.004
in order to build the function so we can upload it.

16
00:00:39.004 --> 00:00:41.009
Now, this is going to require Maven to run

17
00:00:41.009 --> 00:00:44.003
and this may take a little bit of time

18
00:00:44.003 --> 00:00:45.008
but once it's done,

19
00:00:45.008 --> 00:00:48.000
you can now do like we've done before

20
00:00:48.000 --> 00:00:54.002
and upload this application to Azure as a function app.

21
00:00:54.002 --> 00:00:56.003
Now, we'll create a new function

22
00:00:56.003 --> 00:01:00.005
and this one we will call java-function

23
00:01:00.005 --> 00:01:02.000
and then put some initial behind it

24
00:01:02.000 --> 00:01:04.004
because it has to be unique.

25
00:01:04.004 --> 00:01:06.007
We'll choose Java 11.

26
00:01:06.007 --> 00:01:09.002
Pick the location where you want to upload.

27
00:01:09.002 --> 00:01:11.006
I'm going to choose U.S. East

28
00:01:11.006 --> 00:01:13.005
and now we'll let it do its upload.

29
00:01:13.005 --> 00:01:16.005
And this may take a little bit longer than Python

30
00:01:16.005 --> 00:01:18.005
because the Java program itself

31
00:01:18.005 --> 00:01:20.004
is actually a little bit bigger.

32
00:01:20.004 --> 00:01:22.000
Usually by quite a bit depending

33
00:01:22.000 --> 00:01:24.000
on which classes you bring in

34
00:01:24.000 --> 00:01:28.004
but let's just be patient and allow it to do its upload.

35
00:01:28.004 --> 00:01:30.007
Okay, so now that we've waited all that time

36
00:01:30.007 --> 00:01:34.007
and allowed our Java functioned update out to Azure,

37
00:01:34.007 --> 00:01:37.000
let's go ahead and execute it remotely.

38
00:01:37.000 --> 00:01:38.009
So, we'll open up our subscription

39
00:01:38.009 --> 00:01:42.009
and you'll see our function is out there.

40
00:01:42.009 --> 00:01:47.007
Let's right click on it and Execute Function Now.

41
00:01:47.007 --> 00:01:49.008
And once again, we'll put in some data,

42
00:01:49.008 --> 00:01:55.004
some message will be, "Hello

43
00:01:55.004 --> 00:02:01.009
from Azure in Java."

44
00:02:01.009 --> 00:02:07.002
And we will put a count of 10,

45
00:02:07.002 --> 00:02:11.002
and now execute that remotely.

46
00:02:11.002 --> 00:02:14.001
You'll see, we got our message back.

47
00:02:14.001 --> 00:02:15.009
It's executed.

48
00:02:15.009 --> 00:02:19.001
And now let's jump into the Azure Portal.

49
00:02:19.001 --> 00:02:22.006
We'll refresh our App Services.

50
00:02:22.006 --> 00:02:26.002
We can go into our java-function

51
00:02:26.002 --> 00:02:28.002
and you'll see our executions

52
00:02:28.002 --> 00:02:33.004
and how much more it consumed partially because it's Java.

53
00:02:33.004 --> 00:02:35.003
And that's one of the downfalls of using Java

54
00:02:35.003 --> 00:02:37.000
as a serverless language.

