WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.660
We already know how to use the CSS Flexbox,

00:00:03.660 --> 00:00:07.365
the layout of a content across one axis.

00:00:07.365 --> 00:00:10.995
For example, on this top section here,

00:00:10.995 --> 00:00:14.760
we have the content laid out across the page in a row.

00:00:14.760 --> 00:00:19.770
Just below this, we have a column based layout where our content is stacked from top

00:00:19.770 --> 00:00:24.405
to bottom.This is a great use for the Flexbox,

00:00:24.405 --> 00:00:26.955
but this also has one limitation,

00:00:26.955 --> 00:00:33.165
our content inside of each section can only be laid out in one direction.

00:00:33.165 --> 00:00:38.500
However, though, if we take a look at a grid based layout on the right hand side,

00:00:38.500 --> 00:00:42.890
we can use the CSS grid to control the layout across two

00:00:42.890 --> 00:00:46.130
directions.The first thing we need to

00:00:46.130 --> 00:00:50.105
do is to set the width and height of our columns and rows.

00:00:50.105 --> 00:00:55.915
We can then set how much of a gap we want in between each one of our elements.

00:00:55.915 --> 00:00:59.690
We can then also set whether our elements are all to be

00:00:59.690 --> 00:01:04.840
equal or whether we want them to be merged like we see just here.

00:01:04.840 --> 00:01:07.850
Another great part of the grid is also

00:01:07.850 --> 00:01:13.090
the ability to place our content into any section which we want.

00:01:13.090 --> 00:01:17.060
We can either do this or we can allow our content to flow

00:01:17.060 --> 00:01:21.715
naturally and take up the next available space on the grid.

00:01:21.715 --> 00:01:24.980
One of the misconceptions about the grid and

00:01:24.980 --> 00:01:29.195
Flexbox to begin with is we need to choose IV law.

00:01:29.195 --> 00:01:31.834
Above it all this is not the intention.

00:01:31.834 --> 00:01:34.220
The grid is not intended to replace

00:01:34.220 --> 00:01:39.190
the Flexbox and they can compliment each other in the same projects.

00:01:39.190 --> 00:01:42.380
Let's now add in our final media query,

00:01:42.380 --> 00:01:45.355
transform our projects into a grid.

00:01:45.355 --> 00:01:48.630
I want to add mine around the 1,000 pixel mark,

00:01:48.630 --> 00:01:55.200
but you can of course play around with this to suit your projects of any styles of CSS.

00:01:55.200 --> 00:01:57.865
After the last media query,

00:01:57.865 --> 00:02:02.315
I'm going to add in a new media query with the @media real.

00:02:02.315 --> 00:02:05.465
We can of course target different screen types,

00:02:05.465 --> 00:02:08.440
such as the screen or the print view.

00:02:08.440 --> 00:02:11.510
Well just like before, I'm just going to use the minimum width,

00:02:11.510 --> 00:02:16.920
just like this, and set this to be 1000 pixels.

00:02:19.550 --> 00:02:25.075
Let's start with our project wrapper and the way we can introduce the CSS grid.

00:02:25.075 --> 00:02:26.815
Just like we did with the Flexbox,

00:02:26.815 --> 00:02:28.880
is to set the display type.

00:02:28.880 --> 00:02:32.640
We set the display to be the grid,

00:02:32.640 --> 00:02:34.670
and I'm also going to set the height of

00:02:34.670 --> 00:02:39.055
the section to be 100 percent of the viewpoint height.

00:02:39.055 --> 00:02:41.570
The next thing we need to do is to declare

00:02:41.570 --> 00:02:45.165
how many columns and rows we want to use in our grid.

00:02:45.165 --> 00:02:50.210
We set the columns by using the grid template columns property,

00:02:50.960 --> 00:02:55.335
and then we set how wide we want each column to be.

00:02:55.335 --> 00:02:58.720
For example, if we wanted three columns,

00:02:58.720 --> 00:03:01.585
to be 200 pixels will do it like this.

00:03:01.585 --> 00:03:04.705
So 200 pixels, 200 pixels,

00:03:04.705 --> 00:03:06.865
and then, 200 pixels.

00:03:06.865 --> 00:03:09.505
Now if we save and reload,

00:03:09.505 --> 00:03:13.685
we now see our three columns at 200 pixels each.

00:03:13.685 --> 00:03:19.355
We can also make these different so the middle one could be 500,

00:03:19.355 --> 00:03:22.820
and this will only affect, our middle column.

00:03:22.820 --> 00:03:25.420
If we wanted to add an extra one,

00:03:25.420 --> 00:03:28.000
all we need to do is to add an extra value,

00:03:28.000 --> 00:03:33.610
just like this, and this is now reflected in the browser.

00:03:33.610 --> 00:03:39.010
We can also make use of different values such as percentage, ems, rams,

00:03:39.010 --> 00:03:42.685
or we can also make use of a grid fractional unit,

00:03:42.685 --> 00:03:46.310
which will take up one part of the available space.

00:03:46.310 --> 00:03:49.484
If we wanted three equal columns,

00:03:49.484 --> 00:03:51.690
we could use the FR units,

00:03:51.690 --> 00:03:59.655
so one fr, one fr and one fr and these would now take up three equal spaces.

00:03:59.655 --> 00:04:03.490
After this, we can also set our grid template rows,

00:04:03.490 --> 00:04:05.995
and you can probably guess what this will do.

00:04:05.995 --> 00:04:10.550
This will set the spacing for each one of our rows in our projects.

00:04:10.550 --> 00:04:14.180
For example, let's go for 100 pixels,

00:04:14.180 --> 00:04:19.165
300 pixels, and then 200 for the third one.

00:04:19.165 --> 00:04:24.530
Reload. We don't actually need to set the grid template rows for

00:04:24.530 --> 00:04:30.160
our project if we don't have this set at all. Remove this.

00:04:30.160 --> 00:04:32.940
Since we have all three columns set,

00:04:32.940 --> 00:04:36.000
the content will take up the three columns on one row,

00:04:36.000 --> 00:04:39.900
and then the remaining content will move onto the next row.

00:04:39.900 --> 00:04:44.705
After this, we can also add some space in between each one of these projects,

00:04:44.705 --> 00:04:47.945
and we can do this by adding a grid gap.

00:04:47.945 --> 00:04:53.000
The grid gap is simply the space between each one of our rows and columns.

00:04:53.000 --> 00:04:56.035
I want to set mine to be 20 pixels.

00:04:56.035 --> 00:04:59.480
One of the good things about the grid gap is it

00:04:59.480 --> 00:05:02.420
doesn't add any spacing on the outside either.

00:05:02.420 --> 00:05:05.785
It will only apply between each one of our sections.

00:05:05.785 --> 00:05:07.550
One thing you will notice though,

00:05:07.550 --> 00:05:11.195
is there is more space below each project than is in

00:05:11.195 --> 00:05:16.940
between even though we've set an equal 20 pixel gap between each one.

00:05:16.940 --> 00:05:21.770
This is because from earlier when we created the mobile first view,

00:05:21.770 --> 00:05:26.060
we set some margin on the bottom of each one of these items.

00:05:26.060 --> 00:05:29.660
We only want this to take effect for the mobile view.

00:05:29.660 --> 00:05:35.300
Therefore, in this media query you can also reset the margin, you're back to zero.

00:05:35.300 --> 00:05:39.250
This was set on the grid item class,

00:05:39.250 --> 00:05:44.810
and all we need to do is to set the margin bottom to be zero.

00:05:44.810 --> 00:05:49.990
Reload the browser, and this will still take effect in the small screen.

00:05:49.990 --> 00:05:55.550
Expand the browser to the largest size and the grid gap is now equal.

00:05:55.550 --> 00:05:58.880
The grid also provides us with a repeat function,

00:05:58.880 --> 00:06:00.185
which is a shortcut.

00:06:00.185 --> 00:06:04.250
If we have multiple rows or columns with equal spacing,

00:06:04.250 --> 00:06:07.325
we can only have these three equal columns,

00:06:07.325 --> 00:06:09.500
so instead of writing this out three times,

00:06:09.500 --> 00:06:11.890
we can use the repeat function.

00:06:11.890 --> 00:06:16.685
Then inside the brackets we declare how many times we want this to be repeated.

00:06:16.685 --> 00:06:19.235
For example let's go four times,

00:06:19.235 --> 00:06:23.785
and then sets how wide we want the column, save and refresh.

00:06:23.785 --> 00:06:26.505
These are now repeated four times.

00:06:26.505 --> 00:06:28.515
But we will want to leave this as three,

00:06:28.515 --> 00:06:30.700
just like we used before.

00:06:31.760 --> 00:06:36.335
This is how the grid system works on a basic level.

00:06:36.335 --> 00:06:40.100
But what if we don't want our grid it to be so even?

00:06:40.100 --> 00:06:43.490
There may be cases where we want our images or

00:06:43.490 --> 00:06:47.900
our sections to overlap multiple parts of our grid.

00:06:47.900 --> 00:06:52.174
Well, for this, we are provided with the grid areas property,

00:06:52.174 --> 00:06:56.310
and this is what we are going to discover in the next video.
