WEBVTT
1
00:00:05.510 --> 00:00:12.250
So now let's start taking a look at some of the cooler stuff that cotland has added for collections.

2
00:00:12.440 --> 00:00:15.330
So we'll start with the filter function.

3
00:00:15.350 --> 00:00:21.860
You can use it to select entries in a collection using a lambda expression as we've seen many times

4
00:00:21.860 --> 00:00:26.810
before inside the lambda you can use it to refer to an entry in the collection.

5
00:00:26.810 --> 00:00:29.120
So let's filter our set of events.

6
00:00:29.120 --> 00:00:35.510
Now I've started a new project and I copied over some variables and the car class.

7
00:00:35.570 --> 00:00:42.440
So we have a set of events here and we have an immutable map of cars and we're going to start by filtering

8
00:00:42.890 --> 00:00:44.530
our set of events.

9
00:00:44.540 --> 00:00:49.770
So what we're going to do is we'll keep on integers only.

10
00:00:49.910 --> 00:00:57.710
So I'm going to say print line set and it's dot filter and then we went to lambda expression.

11
00:00:57.730 --> 00:01:06.730
And we wanted to keep only odd integer so we'll say it Monch to is not equal to zero.

12
00:01:06.920 --> 00:01:12.950
Because if you divide the integer by two and there is a remainder then it means it's an odd integer.

13
00:01:12.950 --> 00:01:15.180
We've covered lambdas So you know what's going on.

14
00:01:15.180 --> 00:01:16.730
And I'll just repeat it here.

15
00:01:16.730 --> 00:01:20.700
Each entry in the set is substituted in for it.

16
00:01:20.780 --> 00:01:27.380
And then if the lambda evaluates to TRUE or in this case we can say if the predicate is true then the

17
00:01:27.380 --> 00:01:29.780
entry is added to the resulting set.

18
00:01:29.780 --> 00:01:30.620
So let's run

19
00:01:35.190 --> 00:01:39.130
and we'll see that we get the four odd entries in the set.

20
00:01:39.360 --> 00:01:45.030
OK so now let's filter our map of cars so let's say we only want to 20:16 cars.

21
00:01:45.030 --> 00:01:47.370
We know that we have one here.

22
00:01:47.990 --> 00:01:56.520
So we'll say print line immutable map dot filter dot value this time because we want to filter based

23
00:01:56.520 --> 00:01:58.370
on the value not based on the key.

24
00:01:58.410 --> 00:02:02.680
And then a year equals 2016.

25
00:02:02.940 --> 00:02:11.430
So let's run that and we'll see that our read forward makes it into the resulting map.

26
00:02:11.430 --> 00:02:15.870
So now let's see what happens if we use filter on a mutable collection.

27
00:02:15.870 --> 00:02:19.620
So I'm going to copy the amount

28
00:02:22.700 --> 00:02:32.200
paste it down here and I'll call it this time mutable map and we'll just change this to mutable map.

29
00:02:32.210 --> 00:02:40.130
So now we have a mutable map and this time let's filter the mutable map and we'll find cars that have

30
00:02:40.130 --> 00:02:42.660
the color silver.

31
00:02:42.860 --> 00:02:47.870
So we'll say mutable map dot filter.

32
00:02:47.870 --> 00:02:58.310
We want to I-T that value dot color equals silver and then we'll print line print line the filtered

33
00:02:58.490 --> 00:03:02.890
map is you map.

34
00:03:03.110 --> 00:03:04.000
Let's run this

35
00:03:07.550 --> 00:03:11.380
and we'll see that the map hasn't changed and I'm sure you were expecting that because we've done this

36
00:03:11.380 --> 00:03:20.080
before so the filter function returns a new map it returns a new instance of the collection so it doesn't

37
00:03:20.080 --> 00:03:22.480
operate on the collection directly.

38
00:03:22.480 --> 00:03:23.910
Let me put a space in here.

39
00:03:24.160 --> 00:03:31.060
OK so you can use filter to get it items you want based on a predicate expressed as a lambda.

40
00:03:31.060 --> 00:03:36.850
Now another way of looking at it is that you can use filters to remove elements you don't want in the

41
00:03:36.880 --> 00:03:40.880
collection but the elements themselves don't change.

42
00:03:40.960 --> 00:03:46.350
OK so let's say we want to add 10 to every element in a collection.

43
00:03:46.600 --> 00:03:49.740
And we want to put the results into a new instance.

44
00:03:49.820 --> 00:03:52.900
Let me comment out what we have so far.

45
00:03:56.110 --> 00:04:03.830
And then we'll save out in sequel's array and we'll give it one two three four five.

46
00:04:03.880 --> 00:04:11.320
As you know arrays are collections in Katlin and then we'll save Val add 10 list and we'll make this

47
00:04:11.320 --> 00:04:20.080
immutable list of int and we'll say that right now we just want it to be empty because we're going to

48
00:04:20.080 --> 00:04:25.510
assign some values and we're going to do it by going for high in.

49
00:04:25.720 --> 00:04:30.430
In essence that should be add 10 list.

50
00:04:30.430 --> 00:04:43.960
Actually we're adding 10 not 20 so add 10 list dot add plus 10 and then we'll print line are at 10 list.

51
00:04:44.230 --> 00:04:47.150
So what we're doing here is for each element in.

52
00:04:47.170 --> 00:04:54.670
So we're adding 10 to it because I will be the element and then we're adding that to our new list and

53
00:04:54.670 --> 00:04:55.320
we'll print the list.

54
00:04:55.330 --> 00:05:05.830
So we expect to see 11 12 13 14 15 in 10 list so let's run and we get 11 12 13 14 and 15.

55
00:05:05.880 --> 00:05:13.740
So we can create a mutable list and we have to tell the compiler to type in this case up here because

56
00:05:13.740 --> 00:05:16.470
we're not providing any initial values.

57
00:05:16.470 --> 00:05:22.890
Now there's an easier way of doing this rather than explicitly writing a loop when we want to do the

58
00:05:22.890 --> 00:05:29.310
same thing to every element in the collection we can use the map function is kind of confusing because

59
00:05:29.310 --> 00:05:30.620
there's a map collection.

60
00:05:30.630 --> 00:05:34.680
There's also a map function that can act on any type of collection.

61
00:05:34.710 --> 00:05:37.370
So let's rewrite our code to use map.

62
00:05:37.500 --> 00:05:46.140
So instead of doing all this stuff here we're going to comment this out and instead we'll say a vowel

63
00:05:46.140 --> 00:05:56.330
at 10 list equals its dot map I-T plus 10 and then we'll print Arliss

64
00:05:58.880 --> 00:05:59.740
.

65
00:05:59.780 --> 00:06:00.670
So let's run.

66
00:06:00.710 --> 00:06:04.830
And we expect to see the same results and we do.

67
00:06:04.850 --> 00:06:12.280
So what we're doing here I'm sure you can tell by now is for each item in our ints array.

68
00:06:12.410 --> 00:06:14.300
We're going to add 10 to it.

69
00:06:14.390 --> 00:06:21.710
The Each item will be substituted for it and then we add 10 and the resulting values are added to our

70
00:06:21.710 --> 00:06:22.530
list.

71
00:06:22.580 --> 00:06:25.530
The map function returns a collection.

72
00:06:25.640 --> 00:06:31.800
So why don't we print the Java class to see what type of collection we got here.

73
00:06:34.470 --> 00:06:36.020
And we'll see that we got a list.

74
00:06:36.060 --> 00:06:37.560
So we've got an array list here.

75
00:06:37.680 --> 00:06:43.660
So that's how you can do everything the same operation to every element in a collection.

76
00:06:43.770 --> 00:06:46.500
All right so let's go back to our cars for a minute.

77
00:06:46.500 --> 00:06:49.380
So I'm going to uncomment our cars

78
00:06:52.020 --> 00:06:58.630
and let's say that we want to create a collection that contains all the years for our cars.

79
00:06:58.650 --> 00:07:03.420
So we want a collection that contains 2015 2016 in 2013.

80
00:07:03.420 --> 00:07:10.100
So basically we want to extract the your property for all of our cars in our collection.

81
00:07:10.280 --> 00:07:15.690
Well we can use map because basically what we're saying here is we want to do the same operation on

82
00:07:15.690 --> 00:07:27.890
every element so we can say print line immutable map dot map and this time we just want the year.

83
00:07:27.930 --> 00:07:33.480
So we want to create a collection that contains the your property for every element in our original

84
00:07:33.480 --> 00:07:34.030
list.

85
00:07:34.050 --> 00:07:35.060
So if we run now

86
00:07:38.100 --> 00:07:41.840
we'll see that we get 2015 2016 and 2013.

87
00:07:41.850 --> 00:07:48.690
So that's an easy way to just extract one property for every element in a collection.

88
00:07:48.690 --> 00:07:50.060
Now it gets better than this.

89
00:07:50.070 --> 00:07:53.940
You can of course change filter and map calls together.

90
00:07:53.970 --> 00:07:56.880
So let's add a couple of other cars to our list.

91
00:07:56.910 --> 00:07:58.560
Right now we've got these three cars.

92
00:07:58.560 --> 00:08:05.180
Let's go ahead and let's say we'll map the case 17 to car.

93
00:08:05.640 --> 00:08:07.330
That's red.

94
00:08:07.890 --> 00:08:10.890
And it's a BMW.

95
00:08:11.160 --> 00:08:17.680
And let's say it's 2015 and we'll have one more car and we'll use the key eight for this one.

96
00:08:18.360 --> 00:08:21.010
And this car is green.

97
00:08:21.210 --> 00:08:26.180
It's a Ford and it has the year 2010.

98
00:08:26.610 --> 00:08:31.970
So now we want to get a collection that has the colors of all the Ford cars.

99
00:08:32.040 --> 00:08:35.520
So in this case we have one Ford that's red and one Ford that's green.

100
00:08:35.520 --> 00:08:37.950
So we want to get these two colors.

101
00:08:38.100 --> 00:08:40.870
So let's do the filtering part first.

102
00:08:41.010 --> 00:08:49.370
So we'll say print line immutable map filter.

103
00:08:49.810 --> 00:08:57.660
And in this case we want the model to be Ford because we want to get all the colors for all the Ford

104
00:08:57.660 --> 00:08:58.390
cars.

105
00:08:58.500 --> 00:08:59.340
So if we run

106
00:09:02.860 --> 00:09:09.630
we didn't get anything because I have a typo here so let me remove the last blank and we'll run again

107
00:09:09.640 --> 00:09:11.860
and now we get our two Ford cars.

108
00:09:11.860 --> 00:09:13.410
So now let's change a map.

109
00:09:13.410 --> 00:09:21.010
Call to the filter call because now we want to get the color property for the cars that pass through

110
00:09:21.010 --> 00:09:21.950
the filter.

111
00:09:22.060 --> 00:09:30.440
So we'll just come here and let me make another line and we'll say dot map and now we want the dot value

112
00:09:30.450 --> 00:09:32.360
dot color.

113
00:09:32.710 --> 00:09:34.060
And now let's run that

114
00:09:36.920 --> 00:09:39.710
and we'll see now that we just have a list with red and green.

115
00:09:39.710 --> 00:09:43.730
So what's happening here is we're first filtering the cars.

116
00:09:43.730 --> 00:09:49.660
We only want Ford cars and then on the resulting items that pass the filter.

117
00:09:49.730 --> 00:09:52.750
We then extract the color property.

118
00:09:52.940 --> 00:09:55.070
And so we end up with red and green.

119
00:09:55.070 --> 00:10:00.040
Now let's say we want to see if all the elements in a collection match a condition.

120
00:10:00.080 --> 00:10:02.900
So to do that we can use the all function.

121
00:10:03.110 --> 00:10:07.730
So what we're going to do is we're going to look at our cars and we're going to see if all of the cars

122
00:10:07.730 --> 00:10:14.990
in our list are kind of modern newish cars and we're going to consider newish to be the year 2015 and

123
00:10:14.990 --> 00:10:24.410
greater for our purposes so we're going to do print line will say immutable car Emap dot all and then

124
00:10:24.410 --> 00:10:30.230
we have our Lamda it doth value da year is greater than 2014.

125
00:10:30.710 --> 00:10:37.970
So this is saying that we want to see if all the cars in the collection match the condition that we

126
00:10:37.970 --> 00:10:38.470
have here.

127
00:10:38.480 --> 00:10:44.760
Now we know the answer is going to be no because we have a 2013 car and a 2010 car in our collection

128
00:10:44.760 --> 00:10:46.420
and they're going to return false.

129
00:10:46.430 --> 00:10:47.390
So when we run

130
00:10:50.580 --> 00:10:52.350
we'll see false.

131
00:10:52.410 --> 00:10:58.970
Now let's say we don't care whether all the cars match we just want to know if any of the cars match.

132
00:10:59.160 --> 00:11:03.800
So it's you know it's perfectly fine if there's only one newish car in here.

133
00:11:04.020 --> 00:11:06.620
Well in that case we use the any function.

134
00:11:06.720 --> 00:11:08.810
So we'll just change that to any.

135
00:11:09.390 --> 00:11:16.760
And in this case we're saying if at least one car matches this predicate we want we want true returned.

136
00:11:16.800 --> 00:11:20.090
So let's run.

137
00:11:20.360 --> 00:11:21.140
And now we'll see.

138
00:11:21.140 --> 00:11:21.950
True.

139
00:11:21.980 --> 00:11:28.190
So you use all one you want every item in the collection to match and you and you use any if it's you

140
00:11:28.190 --> 00:11:30.720
just want to see if anything matches.

141
00:11:30.830 --> 00:11:37.430
But now that we know that some cars match perhaps are interested in well how many newish cars are in

142
00:11:37.430 --> 00:11:41.320
the collection and for that we're going to use the Count function.

143
00:11:41.420 --> 00:11:44.000
So let me copy this line here

144
00:11:47.990 --> 00:11:54.570
and this time we're just going to print out the counts so we'll say count here.

145
00:11:56.570 --> 00:12:01.640
And then what this is going to do is it's going to count how many items in the collection meet this

146
00:12:01.640 --> 00:12:05.420
requirement and we expect 3 to be returned.

147
00:12:05.420 --> 00:12:14.500
So let's run and sure enough we see that three cars have a year greater than 2014.

148
00:12:14.520 --> 00:12:18.630
All right so now let's find the first newish car in the collection.

149
00:12:18.660 --> 00:12:22.760
Now if you were working with a list we could use the Find function.

150
00:12:22.770 --> 00:12:28.200
So what we're going to do is we'll get all the values from the map into a list and then we'll call find

151
00:12:28.200 --> 00:12:29.200
on the list.

152
00:12:29.280 --> 00:12:30.550
So we'll do the following.

153
00:12:30.550 --> 00:12:32.710
All say.

154
00:12:33.000 --> 00:12:39.380
Cars equals and we'll say immutable map dot values.

155
00:12:39.600 --> 00:12:46.020
So now we have a list of all the values all the cars in the cars variable.

156
00:12:46.290 --> 00:12:50.130
So now we can go ahead and use the Find function on our cars list.

157
00:12:50.160 --> 00:12:52.300
So we'll see a print line.

158
00:12:52.530 --> 00:13:00.740
Cars stopped fine and we'll open up a Lamda and will say I-T year is greater than 2014.

159
00:13:00.840 --> 00:13:07.760
So the Find function finds the first item in the list that satisfies the condition and then it stops.

160
00:13:07.770 --> 00:13:11.740
So we don't get a collection from find we get one single item.

161
00:13:11.770 --> 00:13:15.120
It'll be the first item that satisfies this condition.

162
00:13:15.250 --> 00:13:16.380
So let's go ahead and run

163
00:13:19.350 --> 00:13:26.750
and we'll see that the first car that's newish is the green Toyota with a year of 2015.

164
00:13:26.760 --> 00:13:30.560
And of course that's what it is our green Toyota.

165
00:13:30.570 --> 00:13:36.830
So now let's use our list to use the group by function to group cars according to some criteria.

166
00:13:36.840 --> 00:13:40.190
For example let's say we wanted to group cars based on color.

167
00:13:40.290 --> 00:13:43.130
Well let's do that so we'll do the following.

168
00:13:43.400 --> 00:13:50.500
We'll say print line Orange Line cars dot group buy.

169
00:13:50.520 --> 00:13:56.750
And then we'll open up a Lamda and we want to group the items in our list by color.

170
00:13:56.780 --> 00:14:03.900
So let's run and we'll see that we now have our cars grouped by color.

171
00:14:03.900 --> 00:14:05.900
And this is in a map now.

172
00:14:05.910 --> 00:14:08.780
So we'll see that we have for the key of green.

173
00:14:08.910 --> 00:14:15.800
We have our two green cars for the key of red we have our two red cars.

174
00:14:15.810 --> 00:14:18.750
And then finally we have a silver car.

175
00:14:18.810 --> 00:14:21.030
So now let's go back to our map for a second.

176
00:14:21.030 --> 00:14:23.620
No what I'm about to do will also work for less.

177
00:14:23.640 --> 00:14:29.370
And you can sort maps by key using this sorted by function.

178
00:14:29.370 --> 00:14:30.690
So let's go ahead and do that.

179
00:14:30.690 --> 00:14:35.730
So here I'm going to say print line mutable map.

180
00:14:35.880 --> 00:14:39.490
Got two sorted map sort of map.

181
00:14:39.510 --> 00:14:41.820
So let's go ahead and run

182
00:14:46.810 --> 00:14:48.190
and we'll see that right at the top.

183
00:14:48.190 --> 00:14:52.990
We're now sorted by key we have key 1 2 and 3.

184
00:14:53.230 --> 00:15:02.110
And then we have key 8 followed by key 17 so the map has now been sorted by key.

185
00:15:02.170 --> 00:15:07.180
But as I said You can also sort a list so let's go down to our list of cars I can find it.

186
00:15:07.180 --> 00:15:08.500
Here it is.

187
00:15:08.500 --> 00:15:11.530
And let's sort our cars by year.

188
00:15:11.680 --> 00:15:16.620
So the same print line cars got sorted by.

189
00:15:16.630 --> 00:15:21.030
And we'll have to say what we want to sort by and we want to sort by ear.

190
00:15:21.050 --> 00:15:28.000
So let's go ahead and run that and now we'll see that our form.

191
00:15:28.020 --> 00:15:30.210
This is the list I'm looking at here.

192
00:15:30.630 --> 00:15:40.580
This one will see that our forward 2010 comes first followed by our 2013 Honda our 2015 Toyota and our

193
00:15:40.590 --> 00:15:42.410
2015 BMW.

194
00:15:42.420 --> 00:15:45.070
And then our 2016 Ford.

195
00:15:45.180 --> 00:15:47.610
So we have cars sorted by year.

196
00:15:47.820 --> 00:15:52.770
Now there are many more functions that provide convenient ways to work on collections and I'll leave

197
00:15:52.770 --> 00:15:55.750
it up to you to play around with the collections classes now.

198
00:15:55.890 --> 00:16:00.630
You can check the Katlin documentation or you can just go into intelligence and create a collection

199
00:16:00.630 --> 00:16:05.240
and start looking at the functions that you can call on that collection.

200
00:16:05.250 --> 00:16:06.950
Play around and experiment.

201
00:16:07.080 --> 00:16:10.470
So next we're going to take a look at sequences.

202
00:16:10.560 --> 00:16:11.790
I'll see you in the next video.
