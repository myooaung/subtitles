1
1

00:00:00,279  -->  00:00:01,925
(bright tones)
2

2

00:00:01,925  -->  00:00:04,758
(keyboard typing)
3

3

00:00:05,670  -->  00:00:07,190
<v Instructor>Okay before we leave the topic</v>
4

4

00:00:07,190  -->  00:00:11,210
of null references, I wanted to briefly revisit arrays.
5

5

00:00:11,210  -->  00:00:14,280
Now you learned how to declare arrays with initial values,
6

6

00:00:14,280  -->  00:00:16,570
and you learned about the empty array function
7

7

00:00:16,570  -->  00:00:18,670
although I said I didn't know a use case for it,
8

8

00:00:18,670  -->  00:00:20,650
but at least you know about it.
9

9

00:00:20,650  -->  00:00:23,610
But, I also said that there's a way to create an array
10

10

00:00:23,610  -->  00:00:26,020
of nulls, and we'd come back to it later.
11

11

00:00:26,020  -->  00:00:29,120
And now that you know about null references
12

12

00:00:29,120  -->  00:00:31,640
and how Kotlin handles them, now we can
13

13

00:00:31,640  -->  00:00:34,290
talk about creating arrays of nulls.
14

14

00:00:34,290  -->  00:00:38,810
Now maybe now you understand why the array constructor
15

15

00:00:38,810  -->  00:00:42,320
wants a size and the initial values.
16

16

00:00:42,320  -->  00:00:44,700
Because think about it, if you only give it the size
17

17

00:00:44,700  -->  00:00:47,850
and it creates an array of let's say of size five,
18

18

00:00:47,850  -->  00:00:50,870
and none of the elements are set, then that means that
19

19

00:00:50,870  -->  00:00:54,740
the elements are null, and of course that could result
20

20

00:00:54,740  -->  00:00:57,680
in null pointer exceptions and Kotlin doesn't want that.
21

21

00:00:57,680  -->  00:01:00,570
So this is why, if you want an array of nulls,
22

22

00:01:00,570  -->  00:01:03,860
you have to explicitly ask for an array of nulls
23

23

00:01:03,860  -->  00:01:06,550
using the array of nulls function.
24

24

00:01:06,550  -->  00:01:09,820
Now, when it comes to the special primitive arrays
25

25

00:01:09,820  -->  00:01:13,000
that we talked about, you know that they're initialised
26

26

00:01:13,000  -->  00:01:17,000
with what makes sense for whatever type you're using.
27

27

00:01:17,000  -->  00:01:19,230
So for example, with int all of the elements
28

28

00:01:19,230  -->  00:01:20,730
will be initialised as zeros.
29

29

00:01:20,730  -->  00:01:23,670
So when you're using those special primitive type arrays,
30

30

00:01:23,670  -->  00:01:27,570
there is no danger of getting a null pointer exception
31

31

00:01:27,570  -->  00:01:32,570
because the compiler will initialise those arrays for you.
32

32

00:01:32,650  -->  00:01:35,110
But when you're dealing with arrays of objects,
33

33

00:01:35,110  -->  00:01:38,070
of course there is the danger of getting a null pointer
34

34

00:01:38,070  -->  00:01:40,290
exception if you don't initialise anything,
35

35

00:01:40,290  -->  00:01:43,290
and so that's why the array of nulls function is used
36

36

00:01:43,290  -->  00:01:46,370
because that tips off the compiler that you have
37

37

00:01:46,370  -->  00:01:49,220
an array that's basically filled with nullable types,
38

38

00:01:49,220  -->  00:01:52,490
because that's essentially what you're going to be creating.
39

39

00:01:52,490  -->  00:01:54,410
So let's take a look at an example.
40

40

00:01:54,410  -->  00:01:59,410
So we'll say val, let's say nullable ints,
41

41

00:01:59,700  -->  00:02:03,378
because we're going to create an int array,
42

42

00:02:03,378  -->  00:02:07,890
not the special primitive int type array,
43

43

00:02:07,890  -->  00:02:12,890
equals and we'll say array of nulls, and we'll say
44

44

00:02:14,630  -->  00:02:17,890
it's of size, well actually we have to tell the compiler
45

45

00:02:17,890  -->  00:02:22,290
the type, can't tell, and we'll say of size five.
46

46

00:02:22,290  -->  00:02:27,230
And what this will do is create an array of int,
47

47

00:02:27,230  -->  00:02:30,800
of size five, and all of the elements will be initialised
48

48

00:02:30,800  -->  00:02:33,700
to null, so if you want to create an array to hold
49

49

00:02:33,700  -->  00:02:35,630
an object type and you don't know what the initial
50

50

00:02:35,630  -->  00:02:37,350
values are, you're gonna fill them in later
51

51

00:02:37,350  -->  00:02:39,870
somehow, this is how you can do it.
52

52

00:02:39,870  -->  00:02:42,730
So to confirm that we've got an array of five nulls
53

53

00:02:42,730  -->  00:02:45,470
basically, let's print this out.
54

54

00:02:45,470  -->  00:02:48,830
For I in nullable ints,
55

55

00:02:50,690  -->  00:02:54,380
and we'll just print line I, and let's see what we get.
56

56

00:02:54,380  -->  00:02:57,530
And I'll just comment all these things out
57

57

00:02:57,530  -->  00:03:00,040
so we're not seeing stuff we don't want to see.
58

58

00:03:00,040  -->  00:03:00,873
Let's run.
59

59

00:03:03,310  -->  00:03:05,520
And we'll see that we get five nulls.
60

60

00:03:05,520  -->  00:03:08,970
So by using the array of nulls, you can get five nulls here.
61

61

00:03:08,970  -->  00:03:11,750
Now of course what you can do with these elements right now
62

62

00:03:11,750  -->  00:03:15,400
is going to be limited, so let's take a look at,
63

63

00:03:15,400  -->  00:03:20,400
let's just say I don't know, nullable ints three dot,
64

64

00:03:22,880  -->  00:03:24,970
and we'll see what comes up and you can see that
65

65

00:03:24,970  -->  00:03:28,070
we do have some functions available to us,
66

66

00:03:28,070  -->  00:03:31,140
but most of them, they're not because the compiler
67

67

00:03:31,140  -->  00:03:35,850
knows this is a nullable int, and so
68

68

00:03:35,850  -->  00:03:37,530
most of the stuff isn't available.
69

69

00:03:37,530  -->  00:03:39,510
You'll notice that two string is available,
70

70

00:03:39,510  -->  00:03:42,870
and it'll say for any question mark, see so the compiler
71

71

00:03:42,870  -->  00:03:46,110
knows that this could be null, and you'll see that
72

72

00:03:46,110  -->  00:03:48,330
when we call it, we'll just get null printed out
73

73

00:03:48,330  -->  00:03:50,850
because essentially it'll do what the safe operator
74

74

00:03:50,850  -->  00:03:53,960
does and it'll evaluate to null when
75

75

00:03:53,960  -->  00:03:56,980
two string is called at a null value.
76

76

00:03:56,980  -->  00:03:58,533
Let's try it just for fun.
77

77

00:03:59,590  -->  00:04:01,643
And we might as well print it.
78

78

00:04:05,790  -->  00:04:07,430
So you'll see that we don't get any errors
79

79

00:04:07,430  -->  00:04:09,930
even though this is null right now, and if we run,
80

80

00:04:12,120  -->  00:04:14,150
we'll get a six null down here and that's
81

81

00:04:14,150  -->  00:04:16,010
null coming from this print line.
82

82

00:04:16,010  -->  00:04:19,180
Now, we can remove the question mark from here.
83

83

00:04:19,180  -->  00:04:21,530
That's not gonna cause an error because the compiler
84

84

00:04:21,530  -->  00:04:23,980
knows that because you're calling the array of nulls
85

85

00:04:23,980  -->  00:04:25,920
function that you're creating an array of nulls.
86

86

00:04:25,920  -->  00:04:28,450
So under the covers you're still getting a nullable int
87

87

00:04:28,450  -->  00:04:31,770
and you can see that if we pull this away
88

88

00:04:33,370  -->  00:04:35,430
and hit the dot and you'll see that
89

89

00:04:35,430  -->  00:04:38,750
everything is still greyed out for us.
90

90

00:04:38,750  -->  00:04:43,610
We still can't use any of the usual integer functions
91

91

00:04:43,610  -->  00:04:46,250
because this is actually a nullable type,
92

92

00:04:46,250  -->  00:04:48,030
even though we didn't specify that,
93

93

00:04:48,030  -->  00:04:50,060
compiler is smart enough to know.
94

94

00:04:50,060  -->  00:04:51,450
So I just wanted to show you how
95

95

00:04:51,450  -->  00:04:53,530
you can create an array of nulls.
96

96

00:04:53,530  -->  00:04:56,170
So that's it about null references.
97

97

00:04:56,170  -->  00:04:57,700
We'll probably touch on them again
98

98

00:04:57,700  -->  00:05:00,050
when it makes sense later in the course.
99

99

00:05:00,050  -->  00:05:02,200
Now I want to end this section by saying that
100

100

00:05:02,200  -->  00:05:06,270
the verbose ways of writing code are all valid code.
101

101

00:05:06,270  -->  00:05:08,080
When we've taken a look at null references
102

102

00:05:08,080  -->  00:05:10,310
we've seen the long hand for writing stuff,
103

103

00:05:10,310  -->  00:05:12,432
and we've seen the short hand for writing stuff.
104

104

00:05:12,432  -->  00:05:15,820
You can write, if something is not equal to null then,
105

105

00:05:15,820  -->  00:05:18,060
and sometimes you'll have to do that.
106

106

00:05:18,060  -->  00:05:20,470
I mean for example if you have to check that three
107

107

00:05:20,470  -->  00:05:23,580
things aren't null before you execute something,
108

108

00:05:23,580  -->  00:05:26,260
then you may not be able to use the safe operator,
109

109

00:05:26,260  -->  00:05:28,450
you may have to go ahead and explicitly
110

110

00:05:28,450  -->  00:05:30,490
spell it out in a condition.
111

111

00:05:30,490  -->  00:05:33,390
For example, if a and b and c and d and e
112

112

00:05:33,390  -->  00:05:36,270
all have to not be null before you do something,
113

113

00:05:36,270  -->  00:05:39,370
there's no way to use the safe call operator or the Elvis
114

114

00:05:39,370  -->  00:05:42,440
operator to check that all five conditions are met.
115

115

00:05:42,440  -->  00:05:43,870
You'll have to type them out.
116

116

00:05:43,870  -->  00:05:45,810
So I just wanted to make sure you understand
117

117

00:05:45,810  -->  00:05:47,930
that the verbose ways of checking for null
118

118

00:05:47,930  -->  00:05:50,300
are all valid in Kotlin, you're not gonna get a
119

119

00:05:50,300  -->  00:05:53,590
compiler error as we saw, but they're not always in the
120

120

00:05:53,590  -->  00:05:57,330
spirit of Kotlin, which strives for concise code.
121

121

00:05:57,330  -->  00:06:00,500
So, you really only wanna write the verbose way
122

122

00:06:00,500  -->  00:06:03,560
of checking for nulls by explicitly doing it
123

123

00:06:03,560  -->  00:06:05,310
if there's no other way to do it,
124

124

00:06:05,310  -->  00:06:09,360
if you're in a situation where you can't do it using the
125

125

00:06:09,360  -->  00:06:12,820
safe call operator and you can't use the Elvis operator.
126

126

00:06:12,820  -->  00:06:14,480
So in those situations, just
127

127

00:06:14,480  -->  00:06:16,750
go ahead and do it the verbose way.
128

128

00:06:16,750  -->  00:06:18,333
I'll see you in the next video.
