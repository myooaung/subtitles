WEBVTT
1
1

00:00:00.000  -->  00:00:02.543
(upbeat music)
2

2

00:00:02.543  -->  00:00:04.840
(keyboard clicking)
3

3

00:00:04.840  -->  00:00:07.210
<v Sarah>All right, so now let's take a look at arrays.</v>
4

4

00:00:07.210  -->  00:00:09.590
As I've mentioned before, there isn't a special
5

5

00:00:09.590  -->  00:00:11.310
array type in Kotlin.
6

6

00:00:11.310  -->  00:00:13.350
Arrays are a class like any other,
7

7

00:00:13.350  -->  00:00:15.760
and the class is called, array.
8

8

00:00:15.760  -->  00:00:18.890
In fact, the array class is a collections class.
9

9

00:00:18.890  -->  00:00:21.580
So we're going to start by creating an array of strings
10

10

00:00:21.580  -->  00:00:25.140
and I'm going to just shut the console for a minute
11

11

00:00:25.140  -->  00:00:29.250
and I'm going to delete all of the code in here
12

12

00:00:29.250  -->  00:00:31.373
so that we're starting with a clean slate.
13

13

00:00:32.750  -->  00:00:35.580
So there are two ways we can create an array class.
14

14

00:00:35.580  -->  00:00:39.150
If you know the elements you want in the array in advance,
15

15

00:00:39.150  -->  00:00:42.800
the easiest way to do it is to use the arrayOf function.
16

16

00:00:42.800  -->  00:00:46.910
So we can say val names equals arrayOf,
17

17

00:00:46.910  -->  00:00:49.500
and then we can just go ahead and put our names in here.
18

18

00:00:49.500  -->  00:00:54.230
So, I'll put in John, Jane, Jill and let's put one more in.
19

19

00:00:59.370  -->  00:01:00.203
Joe.
20

20

00:01:00.203  -->  00:01:01.240
I should have called this an array
21

21

00:01:01.240  -->  00:01:03.143
of names that start with J.
22

22

00:01:04.510  -->  00:01:05.343
Joe.
23

23

00:01:05.343  -->  00:01:06.480
There we go.
24

24

00:01:06.480  -->  00:01:08.970
Now, notice that we don't have to specify the type.
25

25

00:01:08.970  -->  00:01:11.230
The compiler can see that we're initialising
26

26

00:01:11.230  -->  00:01:12.890
the array with strings.
27

27

00:01:12.890  -->  00:01:14.720
So if you wanted an array of longs,
28

28

00:01:14.720  -->  00:01:17.300
you'd either have to include the L suffix for all
29

29

00:01:17.300  -->  00:01:19.205
the numbers what you have to specify the type.
30

30

00:01:19.205  -->  00:01:23.223
So, if we wanted to do that, we could do val longs1
31

31

00:01:24.060  -->  00:01:28.367
equals arrayOf 1L, 2L, 3L.
32

32

00:01:30.120  -->  00:01:31.220
And that works.
33

33

00:01:31.220  -->  00:01:36.220
Or, we could say val longs2 equals arrayOf.
34

34

00:01:37.090  -->  00:01:39.590
And now, we wanna tell the compiler
35

35

00:01:39.590  -->  00:01:41.810
that we actually want longs.
36

36

00:01:41.810  -->  00:01:45.080
And then we can say, one, two, three, four.
37

37

00:01:45.080  -->  00:01:46.200
And that does the same thing.
38

38

00:01:46.200  -->  00:01:50.440
And notice that this is just a usual, generics syntax
39

39

00:01:50.440  -->  00:01:53.680
because an array is actually, as I just mentioned
40

40

00:01:53.680  -->  00:01:55.560
is actually a collection.
41

41

00:01:55.560  -->  00:01:57.700
Now, if we didn't specify a long here,
42

42

00:01:57.700  -->  00:01:59.740
we actually get an int array.
43

43

00:01:59.740  -->  00:02:00.680
So let's try that.
44

44

00:02:00.680  -->  00:02:05.230
So let's say, longs3 equals arrayOf.
45

45

00:02:05.230  -->  00:02:06.773
And we'll do the same thing.
46

46

00:02:09.200  -->  00:02:13.017
And let's print line, longs2 is an array of Long.
47

47

00:02:19.090  -->  00:02:24.090
And we'll do print line longs3 is array of Long.
48

48

00:02:25.040  -->  00:02:26.740
We don't even have to print it, 'cause the compiler's
49

49

00:02:26.740  -->  00:02:29.210
gonna tell us right away, no.
50

50

00:02:29.210  -->  00:02:30.960
No, it's not an array of Long.
51

51

00:02:30.960  -->  00:02:32.020
Sorry.
52

52

00:02:32.020  -->  00:02:35.010
So, we'll check that it's an array of Int.
53

53

00:02:35.010  -->  00:02:38.420
So, when you're doing things like this, you'll even know it
54

54

00:02:38.420  -->  00:02:40.700
when you write it in, what the answer is gonna be.
55

55

00:02:40.700  -->  00:02:42.360
So, we'll see true in both cases.
56

56

00:02:42.360  -->  00:02:44.670
So, in the first case where we told compiler
57

57

00:02:44.670  -->  00:02:47.510
we wanted an arrayOf longs, we got an array of Long
58

58

00:02:47.510  -->  00:02:50.440
and in the second case where we didn't tell the compiler
59

59

00:02:50.440  -->  00:02:54.150
what type we wanted, and we didn't include the L suffix
60

60

00:02:54.150  -->  00:02:57.710
here, the compiler looked at this and said, you want int.
61

61

00:02:57.710  -->  00:03:00.486
And just to show that the first one also gives us a long,
62

62

00:03:00.486  -->  00:03:02.810
I'll print it out for completeness.
63

63

00:03:02.810  -->  00:03:04.373
Is array of Long.
64

64

00:03:06.230  -->  00:03:09.350
The editor's not complaining here, so we pretty much know
65

65

00:03:09.350  -->  00:03:10.750
that we're gonna get a true.
66

66

00:03:12.510  -->  00:03:13.680
And we do.
67

67

00:03:13.680  -->  00:03:17.320
Now, even though this is a collection as I mentioned
68

68

00:03:17.320  -->  00:03:20.330
when we were going over some lightning quick differences,
69

69

00:03:20.330  -->  00:03:22.780
with collections you can use array indexing
70

70

00:03:22.780  -->  00:03:24.170
to get to the element.
71

71

00:03:24.170  -->  00:03:28.210
So, you can use the usual array indexing.
72

72

00:03:28.210  -->  00:03:30.550
So, we can go print line, longs1.
73

73

00:03:32.460  -->  00:03:35.200
And let's print the second element,
74

74

00:03:35.200  -->  00:03:38.253
and we should get three.
75

75

00:03:41.380  -->  00:03:42.213
And we do.
76

76

00:03:42.213  -->  00:03:44.860
So, you can go ahead and just use the usual
77

77

00:03:44.860  -->  00:03:46.660
array indexing with them.
78

78

00:03:46.660  -->  00:03:49.130
Now, you can also use the array constructor.
79

79

00:03:49.130  -->  00:03:51.500
Remember, that because array is a class is going to have
80

80

00:03:51.500  -->  00:03:54.820
constructors and you can use the array constructor
81

81

00:03:54.820  -->  00:03:58.320
and pass a lambda expression to initialise the array.
82

82

00:03:58.320  -->  00:04:00.920
For example if you wanted to initialise an array
83

83

00:04:00.920  -->  00:04:04.220
with even numbers between zero and 30 inclusive,
84

84

00:04:04.220  -->  00:04:05.783
you could do the following.
85

85

00:04:06.920  -->  00:04:11.410
You could say, val evenNumbers equals Array,
86

86

00:04:11.410  -->  00:04:13.870
and we wanted array of 16 elements.
87

87

00:04:13.870  -->  00:04:16.750
So, we're telling the compiler here that this
88

88

00:04:16.750  -->  00:04:19.910
is the length of the array.
89

89

00:04:19.910  -->  00:04:21.980
And then following that in curly braces,
90

90

00:04:21.980  -->  00:04:23.540
we write our lambda expression.
91

91

00:04:23.540  -->  00:04:28.203
And in this case, we want i, i times two.
92

92

00:04:29.300  -->  00:04:30.410
So, what are we doing here?
93

93

00:04:30.410  -->  00:04:34.020
We're saying that we want 16 elements and for each element
94

94

00:04:34.020  -->  00:04:37.500
take the index and multiple fight by two
95

95

00:04:37.500  -->  00:04:40.510
and that's the value that we want stored for that index.
96

96

00:04:40.510  -->  00:04:44.610
So for example, for zero we would store zero.
97

97

00:04:44.610  -->  00:04:48.700
So array, the even-numbered zero is gonna get zero.
98

98

00:04:48.700  -->  00:04:51.410
For the first element, which will have index one
99

99

00:04:51.410  -->  00:04:54.310
or rather the second element, which will have index one
100

100

00:04:54.310  -->  00:04:56.400
we're going to store the number two.
101

101

00:04:56.400  -->  00:04:58.190
Because one times two is two.
102

102

00:04:58.190  -->  00:05:00.230
For the third element that has index two,
103

103

00:05:00.230  -->  00:05:02.280
we're gonna store two times two, which is four.
104

104

00:05:02.280  -->  00:05:03.690
So, can you see the pattern.
105

105

00:05:03.690  -->  00:05:07.140
Zero, two, four, et cetera, all the way up to 30
106

106

00:05:07.140  -->  00:05:09.950
because we only have 16 elements.
107

107

00:05:09.950  -->  00:05:12.200
So, let's print out the array to verify that
108

108

00:05:12.200  -->  00:05:13.410
that's what we're going to get.
109

109

00:05:13.410  -->  00:05:18.183
So, we'll say for number and evenNumbers,
110

110

00:05:20.520  -->  00:05:23.460
and we want to print line number.
111

111

00:05:23.460  -->  00:05:25.490
Now we're gonna go over the for loop in much
112

112

00:05:25.490  -->  00:05:27.710
more detail later, but basically we're saying
113

113

00:05:27.710  -->  00:05:30.160
this is looping through the array and each time
114

114

00:05:30.160  -->  00:05:32.830
it's an element, the assigns it to number.
115

115

00:05:32.830  -->  00:05:37.330
So the first iteration, number will get even-number zero.
116

116

00:05:37.330  -->  00:05:39.750
The second iteration, number will get
117

117

00:05:39.750  -->  00:05:41.840
even-numbers one, et cetera.
118

118

00:05:41.840  -->  00:05:43.643
So, let's print this out.
119

119

00:05:46.290  -->  00:05:47.940
And we'll see that starting here,
120

120

00:05:47.940  -->  00:05:50.700
at this zero we have zero, two, four, six, eight
121

121

00:05:50.700  -->  00:05:52.550
all the way up to 30.
122

122

00:05:52.550  -->  00:05:55.220
And so, in a very concise statement
123

123

00:05:55.220  -->  00:05:58.340
we're able to initialising an array.
124

124

00:05:58.340  -->  00:06:02.650
And lambda expressions, to initialise the array are good
125

125

00:06:02.650  -->  00:06:04.530
when you have patterns like that.
126

126

00:06:04.530  -->  00:06:06.390
Logical sequences that you want to
127

127

00:06:06.390  -->  00:06:07.890
initialise the array with.
128

128

00:06:07.890  -->  00:06:11.930
For example, you know, if you wanted to initialise
129

129

00:06:11.930  -->  00:06:15.300
an array with all the numbers from one to 100,000
130

130

00:06:15.300  -->  00:06:18.207
instead of having to write a loop, in looping through one
131

131

00:06:18.207  -->  00:06:20.933
100,000 times, as I mentioned previously
132

132

00:06:20.933  -->  00:06:25.330
the original for loop isn't even available in Kotlin.
133

133

00:06:25.330  -->  00:06:26.470
You can do it with a lambda.
134

134

00:06:26.470  -->  00:06:29.810
So, if you wanted to do that, we do the following.
135

135

00:06:29.810  -->  00:06:34.797
Val, let's call it lotsOfNumbers equals Array.
136

136

00:06:34.797  -->  00:06:37.713
And we're gonna make an array of 100,000 here.
137

137

00:06:40.120  -->  00:06:42.193
And we'll say i.
138

138

00:06:43.080  -->  00:06:44.520
And that's really all.
139

139

00:06:44.520  -->  00:06:48.590
We could just go like this and that's going
140

140

00:06:48.590  -->  00:06:52.190
to initialise our array of numbers.
141

141

00:06:52.190  -->  00:06:57.190
That would actually be from zero to, I guess, 999,999.
142

142

00:06:59.370  -->  00:07:03.960
So, you'd probably want to plus one here,
143

143

00:07:03.960  -->  00:07:07.780
if you wanted one to 100,000.
144

144

00:07:07.780  -->  00:07:11.350
And so, this would initialise an array of 100,000
145

145

00:07:11.350  -->  00:07:14.680
with the numbers one to 100,000.
146

146

00:07:14.680  -->  00:07:17.920
If we wanted to initialise an array with all zeros,
147

147

00:07:17.920  -->  00:07:19.020
we could do this.
148

148

00:07:19.020  -->  00:07:21.703
Val, allZeroes equals Array.
149

149

00:07:24.040  -->  00:07:27.479
And let's make it an Array of 100.
150

150

00:07:27.479  -->  00:07:30.979
And we can go i, and we want it all zeros.
151

151

00:07:34.038  -->  00:07:36.780
In fact, there's a shorter way to write this.
152

152

00:07:36.780  -->  00:07:39.780
In this case, we can just say, zero.
153

153

00:07:39.780  -->  00:07:42.300
We can take away the index and just say, you know what,
154

154

00:07:42.300  -->  00:07:46.060
for every element we want to initialise it to zero.
155

155

00:07:46.060  -->  00:07:47.680
So, you can see how handy this is.
156

156

00:07:47.680  -->  00:07:50.700
It makes for some very concise coding.
157

157

00:07:50.700  -->  00:07:53.560
Okay, so this is all great if you know what you want
158

158

00:07:53.560  -->  00:07:55.070
to initialise the array with.
159

159

00:07:55.070  -->  00:07:56.900
But, what if you don't know what you want
160

160

00:07:56.900  -->  00:07:58.220
to initialise their way with?
161

161

00:07:58.220  -->  00:08:00.230
You want to declare an array, and then you want
162

162

00:08:00.230  -->  00:08:02.440
to initialise it later.
163

163

00:08:02.440  -->  00:08:03.420
That's not a problem.
164

164

00:08:03.420  -->  00:08:05.310
But of course, in that case the compiler
165

165

00:08:05.310  -->  00:08:08.120
won't be able to infer the type.
166

166

00:08:08.120  -->  00:08:10.330
You'll notice, we've been using type inference
167

167

00:08:10.330  -->  00:08:11.540
for our arrays.
168

168

00:08:11.540  -->  00:08:14.390
We're not declaring expected type here, because the compiler
169

169

00:08:14.390  -->  00:08:16.930
can figure it out from the initial value.
170

170

00:08:16.930  -->  00:08:20.600
If you're not going to initialise the array
171

171

00:08:20.600  -->  00:08:23.250
at declaration time, then you'll have to explicitly tell
172

172

00:08:23.250  -->  00:08:25.050
the compiler the type.
173

173

00:08:25.050  -->  00:08:28.180
Now, you could use the val keyword if you're just going
174

174

00:08:28.180  -->  00:08:30.550
to assign the array, once.
175

175

00:08:30.550  -->  00:08:34.495
Because don't forget, the variable will contain
176

176

00:08:34.495  -->  00:08:36.010
a reference to the array.
177

177

00:08:36.010  -->  00:08:38.970
It's okay to change the array contents themselves.
178

178

00:08:38.970  -->  00:08:41.270
I'm going to declare the variable as var here,
179

179

00:08:41.270  -->  00:08:43.420
'cause I makes the going to assign it twice
180

180

00:08:43.420  -->  00:08:44.760
with two different instances.
181

181

00:08:44.760  -->  00:08:47.290
So I'm gonna say, var, someArray.
182

182

00:08:48.190  -->  00:08:50.403
And I'm going to make this an Array of Int.
183

183

00:08:52.110  -->  00:08:54.900
So, because I'm not initialising the array
184

184

00:08:54.900  -->  00:08:58.280
at declaration time, I have to explicitly tell the compiler
185

185

00:08:58.280  -->  00:09:01.740
what type I want and then after that,
186

186

00:09:01.740  -->  00:09:04.400
let's pretend I'm getting this data from somewhere else.
187

187

00:09:04.400  -->  00:09:09.250
I'm gonna say, someArray equals arrayOf
188

188

00:09:09.250  -->  00:09:11.083
one, two, three, four.
189

189

00:09:12.490  -->  00:09:13.890
So far, so good.
190

190

00:09:13.890  -->  00:09:16.000
And if you wanted to print the numbers in some array,
191

191

00:09:16.000  -->  00:09:19.077
we could just say for number in someArray.
192

192

00:09:21.600  -->  00:09:23.690
Print line number.
193

193

00:09:23.690  -->  00:09:26.900
I'm just going to comment out this for loop
194

194

00:09:26.900  -->  00:09:29.763
so that we don't get 30 prints.
195

195

00:09:31.950  -->  00:09:32.783
Let's run.
196

196

00:09:35.787  -->  00:09:39.120
And we'll see that we get our one, two, three, four.
197

197

00:09:39.120  -->  00:09:40.940
I'll actually to get rid of this three as well,
198

198

00:09:40.940  -->  00:09:42.890
'cause that can be confusing.
199

199

00:09:42.890  -->  00:09:45.230
Now, because I declared the variable as var,
200

200

00:09:45.230  -->  00:09:49.030
I can reassign it again and I can assign it later on
201

201

00:09:49.030  -->  00:09:51.430
using the lambda expression that we saw.
202

202

00:09:51.430  -->  00:09:54.810
I can say something like, I actually want someArray
203

203

00:09:54.810  -->  00:09:59.810
to be Array of size six, let's say.
204

204

00:10:00.420  -->  00:10:05.420
And I want to initialise each element of the array
205

205

00:10:06.210  -->  00:10:11.210
with the following, i plus one, times 10.
206

206

00:10:16.280  -->  00:10:18.520
So what I'm saying here, is I want to initialise
207

207

00:10:18.520  -->  00:10:22.660
an array with 10, 20, 30, 40, 50, 60.
208

208

00:10:22.660  -->  00:10:24.130
That's what I'm doing here.
209

209

00:10:24.130  -->  00:10:29.130
And I'm gonna copy this, so we can print out the results
210

210

00:10:29.170  -->  00:10:30.923
of this and see what we get.
211

211

00:10:35.040  -->  00:10:38.330
And sure enough, we get 10, 20, 30, 40, 50, 60.
212

212

00:10:38.330  -->  00:10:40.950
So, you can use this, the lambda expression
213

213

00:10:40.950  -->  00:10:43.870
way of initialising arrays later on.
214

214

00:10:43.870  -->  00:10:47.520
It doesn't have to be when you declare the variable.
215

215

00:10:47.520  -->  00:10:51.840
We can actually mix datatypes in an array.
216

216

00:10:51.840  -->  00:10:54.300
For example, we can create an array that contains
217

217

00:10:54.300  -->  00:10:57.880
strings and ints and chars and big decimals, et cetera.
218

218

00:10:57.880  -->  00:10:59.800
Let's give that a shot.
219

219

00:10:59.800  -->  00:11:02.831
Now, if you're going to do this, you do something like val,
220

220

00:11:02.831  -->  00:11:07.831
mixedArray equals, and arrayOf hello, that's at 22.
221

221

00:11:12.620  -->  00:11:17.020
We'll add a BigDecimals number, 10.5
222

222

00:11:17.020  -->  00:11:20.000
and let's throw in a char just for fun. (laughs)
223

223

00:11:20.000  -->  00:11:21.940
Now, if you wanted to loop through this array,
224

224

00:11:21.940  -->  00:11:25.010
you do it the same way that you do for any other array.
225

225

00:11:25.010  -->  00:11:27.710
You'd say, for element.
226

226

00:11:27.710  -->  00:11:29.793
And this can be anything in mixedArray.
227

227

00:11:32.710  -->  00:11:35.200
And then, just print line the element.
228

228

00:11:35.200  -->  00:11:36.133
Let's run that.
229

229

00:11:39.690  -->  00:11:42.320
And we get our values printed.
230

230

00:11:42.320  -->  00:11:45.500
So, as you can see, that's perfectly fine.
231

231

00:11:45.500  -->  00:11:47.840
Okay, so I'm going to guess that mixedArray
232

232

00:11:47.840  -->  00:11:49.800
is actually an array of Any.
233

233

00:11:49.800  -->  00:11:52.310
I mean, that's the only way this is going to work, right.
234

234

00:11:52.310  -->  00:11:54.475
That this has to be an array of Any.
235

235

00:11:54.475  -->  00:11:56.926
It's like creating an array of object,
236

236

00:11:56.926  -->  00:11:59.140
which is essentially what we're doing.
237

237

00:11:59.140  -->  00:12:04.140
So, let's print line, mixedArray is an array of Any.
238

238

00:12:06.860  -->  00:12:10.140
And we're not seeing an area here, so, I think we're fairly
239

239

00:12:10.140  -->  00:12:12.623
safe in assuming we're gonna get true here.
240

240

00:12:14.440  -->  00:12:15.670
And we do.
241

241

00:12:15.670  -->  00:12:18.870
So, that's how you can create a mixedArray.
242

242

00:12:18.870  -->  00:12:20.930
Okay, so remember when we asked the question
243

243

00:12:20.930  -->  00:12:22.750
of how to call a Java method that wants
244

244

00:12:22.750  -->  00:12:24.730
a primitive type as a parameter?
245

245

00:12:24.730  -->  00:12:27.260
Well, we have a similar situation with arrays.
246

246

00:12:27.260  -->  00:12:29.840
What do we do when the method wants an array?
247

247

00:12:29.840  -->  00:12:31.803
So, let's add a method to the DummyClass
248

248

00:12:31.803  -->  00:12:33.963
that has an int array parameter.
249

249

00:12:35.880  -->  00:12:37.840
So, I'll open up DummyClass here,
250

250

00:12:37.840  -->  00:12:40.910
and let's add another method.
251

251

00:12:40.910  -->  00:12:41.810
Public.
252

252

00:12:41.810  -->  00:12:45.143
We'll call this one void, and it'll just print numbers.
253

253

00:12:45.980  -->  00:12:47.500
It'll print whatever it's passed.
254

254

00:12:47.500  -->  00:12:51.330
So, we're gonna have it accept a primitive int array
255

255

00:12:51.330  -->  00:12:53.633
as a parameter called, numbers.
256

256

00:12:55.050  -->  00:13:00.050
And all it does, is loops through them
257

257

00:13:00.730  -->  00:13:04.023
and prints them to the console.
258

258

00:13:07.370  -->  00:13:10.190
And I need that pesky semicolon at the end of line here
259

259

00:13:10.190  -->  00:13:11.220
'cause we're in Java.
260

260

00:13:11.220  -->  00:13:13.553
So, nothing earth shattering here, but this wants
261

261

00:13:13.553  -->  00:13:18.040
a primitive int array and as we know in Kotlin,
262

262

00:13:18.040  -->  00:13:19.580
arrays are actually collections.
263

263

00:13:19.580  -->  00:13:21.630
So, what do we do here?
264

264

00:13:21.630  -->  00:13:24.380
So, back in our Kotlin code, how are we
265

265

00:13:24.380  -->  00:13:25.620
gonna all this class?
266

266

00:13:25.620  -->  00:13:27.750
Well, when we did it would primitives,
267

267

00:13:27.750  -->  00:13:29.260
we were just able to do it.
268

268

00:13:29.260  -->  00:13:30.900
We didn't have to do anything.
269

269

00:13:30.900  -->  00:13:35.550
Like, when we wanted to call the, isVacationTime method,
270

270

00:13:35.550  -->  00:13:37.210
we didn't have to do anything special.
271

271

00:13:37.210  -->  00:13:40.720
When this was a lowercase B, we could just call it.
272

272

00:13:40.720  -->  00:13:42.253
So, let's just try calling it.
273

273

00:13:43.230  -->  00:13:45.150
Maybe we'll get lucky here.
274

274

00:13:45.150  -->  00:13:49.900
So, we'll say val myIntArray equals arrayOf,
275

275

00:13:52.460  -->  00:13:54.763
let's just give it a bunch of numbers.
276

276

00:13:58.370  -->  00:14:01.250
And now, we're going to try calling the DummyClass.
277

277

00:14:01.250  -->  00:14:06.250
So we'll go, DummyClass, dot and print numbers
278

278

00:14:07.090  -->  00:14:09.223
and we'll pass our int array.
279

279

00:14:10.090  -->  00:14:11.720
And we have a problem.
280

280

00:14:11.720  -->  00:14:12.880
We have a type mismatch.
281

281

00:14:12.880  -->  00:14:15.960
It says, required IntArray exclamation mark.
282

282

00:14:15.960  -->  00:14:17.240
Don't worry about that now.
283

283

00:14:17.240  -->  00:14:19.560
We'll be going over that later in the course,
284

284

00:14:19.560  -->  00:14:23.270
and it's saying it found an array of Any
285

285

00:14:23.270  -->  00:14:25.890
and that's because I screwed up (laughs)
286

286

00:14:25.890  -->  00:14:27.300
and added .8 here.
287

287

00:14:27.300  -->  00:14:30.130
Let me get rid of that, 'cause this should be an int array.
288

288

00:14:30.130  -->  00:14:34.830
Okay, so now it's found an int array, which is what we want.
289

289

00:14:34.830  -->  00:14:36.290
But there's a type mismatch.
290

290

00:14:36.290  -->  00:14:38.730
So, unfortunately when it comes to arrays
291

291

00:14:38.730  -->  00:14:42.450
we can't just call Java methods that want primitive arrays
292

292

00:14:42.450  -->  00:14:44.440
without having to do anything special.
293

293

00:14:44.440  -->  00:14:47.840
So, this is one case in Kotlin, where we do have to do
294

294

00:14:47.840  -->  00:14:51.120
something differently when we wanna call something in Java.
295

295

00:14:51.120  -->  00:14:54.690
So, if you know that you're going to want to call Java
296

296

00:14:54.690  -->  00:14:57.360
with an array of primitive types, you should use
297

297

00:14:57.360  -->  00:15:00.450
the array subclass for the primitive type.
298

298

00:15:00.450  -->  00:15:03.600
So, when you want to call a Java method,
299

299

00:15:03.600  -->  00:15:05.540
that wants a primitive array, you can't
300

300

00:15:05.540  -->  00:15:08.040
just use the array class.
301

301

00:15:08.040  -->  00:15:11.610
You have to use one of the special primitive
302

302

00:15:11.610  -->  00:15:13.900
array classes in Kotlin.
303

303

00:15:13.900  -->  00:15:18.200
There is int array, byte array, long array, char array.
304

304

00:15:18.200  -->  00:15:19.220
You get the idea.
305

305

00:15:19.220  -->  00:15:21.980
There's one for all of the corresponding
306

306

00:15:21.980  -->  00:15:24.300
primitive types in Java.
307

307

00:15:24.300  -->  00:15:27.010
Now, doing so is going to improve performance
308

308

00:15:27.010  -->  00:15:31.010
when the Kotlin application runs, because these special
309

309

00:15:31.010  -->  00:15:34.114
arrays that map to the primitive types are actually going
310

310

00:15:34.114  -->  00:15:38.680
to be treated as primitive type arrays under the covers.
311

311

00:15:38.680  -->  00:15:42.160
So, you actually get a performance boost by using them.
312

312

00:15:42.160  -->  00:15:45.760
So, even if you're not going to call a Java method
313

313

00:15:45.760  -->  00:15:49.820
that wants a primitive array, you can get a performance
314

314

00:15:49.820  -->  00:15:53.050
boost by using these special primitive array classes
315

315

00:15:53.050  -->  00:15:56.490
rather than just the general array class.
316

316

00:15:56.490  -->  00:15:59.560
So, we're gonna change our code to use an int array
317

317

00:15:59.560  -->  00:16:03.130
and all we have to do is call the intArrayOf function
318

318

00:16:03.130  -->  00:16:04.590
instead of arrayOf.
319

319

00:16:04.590  -->  00:16:06.580
So, all we have to do is come up here and change
320

320

00:16:06.580  -->  00:16:10.920
this to intArrayOf and there goes our error.
321

321

00:16:10.920  -->  00:16:12.080
It's gone away.
322

322

00:16:12.080  -->  00:16:13.340
It's that simple.
323

323

00:16:13.340  -->  00:16:14.513
Let's run now.
324

324

00:16:19.000  -->  00:16:21.200
And here's the contents of our array,
325

325

00:16:21.200  -->  00:16:23.220
printed from the Java method.
326

326

00:16:23.220  -->  00:16:24.530
So, everything is working.
327

327

00:16:24.530  -->  00:16:25.603
Everything's good again.
328

328

00:16:25.603  -->  00:16:28.350
You can initialise the arrays that map
329

329

00:16:28.350  -->  00:16:30.650
to primitive arrays in the usual way.
330

330

00:16:30.650  -->  00:16:31.770
You can use a lambda.
331

331

00:16:31.770  -->  00:16:34.360
You can use everything that we've looked at.
332

332

00:16:34.360  -->  00:16:37.770
But there is one difference to be aware of.
333

333

00:16:37.770  -->  00:16:40.260
Let's create an IntArray of size five,
334

334

00:16:40.260  -->  00:16:41.900
but not initialise it.
335

335

00:16:41.900  -->  00:16:45.226
So, will say val.
336

336

00:16:45.226  -->  00:16:47.060
Yeah, val.
337

337

00:16:47.060  -->  00:16:50.080
Actually we'll use var, because I might reassign it.
338

338

00:16:50.080  -->  00:16:55.080
So, var, someOtherArray equals Array Int of size five.
339

339

00:16:56.810  -->  00:16:58.770
Now you'll notice, we didn't do this before
340

340

00:16:58.770  -->  00:17:00.320
we specified the size.
341

341

00:17:00.320  -->  00:17:02.400
And that's because, we can't do it.
342

342

00:17:02.400  -->  00:17:04.040
We get an error.
343

343

00:17:04.040  -->  00:17:07.300
Now earlier, we declared an array variable as follows.
344

344

00:17:07.300  -->  00:17:08.790
We did something like this.
345

345

00:17:08.790  -->  00:17:13.030
Var, you know, array1.
346

346

00:17:13.030  -->  00:17:16.573
And we just said, Array Int.
347

347

00:17:18.230  -->  00:17:21.000
I'll just put a space in here.
348

348

00:17:21.000  -->  00:17:22.770
Now, this works.
349

349

00:17:22.770  -->  00:17:27.360
So, in this line were trying to do two things at once.
350

350

00:17:27.360  -->  00:17:29.670
We're declaring their array and were also trying
351

351

00:17:29.670  -->  00:17:32.040
to instantiate the array, 'cause we're saying we want
352

352

00:17:32.040  -->  00:17:34.000
an array of size five.
353

353

00:17:34.000  -->  00:17:34.910
We can't do that.
354

354

00:17:34.910  -->  00:17:38.380
You'll see it says, no value pass for parameter init.
355

355

00:17:38.380  -->  00:17:40.480
What we're actually doing here is trying to call
356

356

00:17:40.480  -->  00:17:41.750
the array constructor.
357

357

00:17:41.750  -->  00:17:44.910
And the array constructor wants two parameters.
358

358

00:17:44.910  -->  00:17:47.360
It wants the size of the array and it wants
359

359

00:17:47.360  -->  00:17:49.540
the list of values.
360

360

00:17:49.540  -->  00:17:52.440
On this line, all we're doing is declaring the array.
361

361

00:17:52.440  -->  00:17:54.260
We're not trying to instantiate it,
362

362

00:17:54.260  -->  00:17:56.330
and that's why we don't get an error.
363

363

00:17:56.330  -->  00:17:58.730
So, you can do this.
364

364

00:17:58.730  -->  00:17:59.880
But you can't do this.
365

365

00:17:59.880  -->  00:18:04.400
You can say at declaration time, I want to create an array
366

366

00:18:04.400  -->  00:18:07.680
of size five, or at least you can't do it this way.
367

367

00:18:07.680  -->  00:18:10.190
But, when it comes to the primitive type arrays,
368

368

00:18:10.190  -->  00:18:13.370
you can do this sort of thing.
369

369

00:18:13.370  -->  00:18:15.900
Let's try the same thing with an int array,
370

370

00:18:15.900  -->  00:18:18.240
rather than an Array of int.
371

371

00:18:18.240  -->  00:18:22.340
So, I'm going to take these out and I'm going to say var,
372

372

00:18:22.340  -->  00:18:27.340
someOtherArray equals IntArray, five.
373

373

00:18:29.240  -->  00:18:30.080
And that works.
374

374

00:18:30.080  -->  00:18:31.750
You'll see we don't get any errors.
375

375

00:18:31.750  -->  00:18:35.200
So, with these special primitive type arrays,
376

376

00:18:35.200  -->  00:18:36.033
you can do this.
377

377

00:18:36.033  -->  00:18:38.910
And the reason is, they're initialised automatically
378

378

00:18:38.910  -->  00:18:41.250
with the default value for the primitive type.
379

379

00:18:41.250  -->  00:18:44.070
So, in this case it will be initialising to all zeros
380

380

00:18:44.070  -->  00:18:46.890
'cause it's integers and we can loop through
381

381

00:18:46.890  -->  00:18:51.613
and print that out to confirm for number in someOtherArray.
382

382

00:18:54.880  -->  00:18:58.163
We'll just print line the number and let's run.
383

383

00:19:01.090  -->  00:19:03.680
And we'll see that we get five zeros printed here.
384

384

00:19:03.680  -->  00:19:05.300
So, that's something to be aware of.
385

385

00:19:05.300  -->  00:19:07.910
The primitive arrays will be initialised for you
386

386

00:19:07.910  -->  00:19:10.250
if you don't provide any initial values.
387

387

00:19:10.250  -->  00:19:11.820
But when you're dealing with the general
388

388

00:19:11.820  -->  00:19:14.460
array class, that's not true, if you're trying
389

389

00:19:14.460  -->  00:19:17.590
to instantiate the array and pass the size.
390

390

00:19:17.590  -->  00:19:21.770
So, is there a way with the general array class
391

391

00:19:21.770  -->  00:19:26.500
to instantiate the array, but not to initialise it up front?
392

392

00:19:26.500  -->  00:19:29.630
So, let's say you know the maximum number of elements
393

393

00:19:29.630  -->  00:19:30.780
that you're gonna want in the array,
394

394

00:19:30.780  -->  00:19:32.830
but you don't know their values.
395

395

00:19:32.830  -->  00:19:36.190
If the array constructor wants both the size and the values,
396

396

00:19:36.190  -->  00:19:38.520
how can you create an empty array?
397

397

00:19:38.520  -->  00:19:42.730
Well, there is an empty array function, but to be completely
398

398

00:19:42.730  -->  00:19:45.280
honest with you, I'm not clear on the use case for it
399

399

00:19:45.280  -->  00:19:47.840
because it really is an empty array.
400

400

00:19:47.840  -->  00:19:49.791
You can't assign anything to it.
401

401

00:19:49.791  -->  00:19:53.090
So, that's probably not what you want.
402

402

00:19:53.090  -->  00:19:55.200
I've seen developers asking online,
403

403

00:19:55.200  -->  00:19:57.610
what the point of the empty array function is
404

404

00:19:57.610  -->  00:20:01.050
and nobody ever seems to have a good answer for that.
405

405

00:20:01.050  -->  00:20:03.620
So, if you can think of a good use case for a function
406

406

00:20:03.620  -->  00:20:07.740
that creates an array that you can't add anything to,
407

407

00:20:07.740  -->  00:20:10.660
and that isn't initialised with anything, let me know.
408

408

00:20:10.660  -->  00:20:13.350
Maybe you can think of a use case for that.
409

409

00:20:13.350  -->  00:20:17.520
So, how would you initialise an array and give
410

410

00:20:17.520  -->  00:20:20.540
the size but not any initial values.
411

411

00:20:20.540  -->  00:20:22.540
You'd want to declare an array of nulls.
412

412

00:20:22.540  -->  00:20:23.930
And you'll see how to do that later.
413

413

00:20:23.930  -->  00:20:25.610
We haven't covered null handling yet.
414

414

00:20:25.610  -->  00:20:29.410
So, when we get to that section, we'll cover how to create
415

415

00:20:29.410  -->  00:20:31.760
arrays, you know, an array of size five
416

416

00:20:31.760  -->  00:20:33.540
that's initialised to nulls.
417

417

00:20:33.540  -->  00:20:35.130
There is a way to do it.
418

418

00:20:35.130  -->  00:20:37.520
Now, one final thing before we leave arrays.
419

419

00:20:37.520  -->  00:20:41.290
If you have an array of int and you want to call
420

420

00:20:41.290  -->  00:20:44.760
a Java method, you can convert it to an IntArray.
421

421

00:20:44.760  -->  00:20:46.140
And of course, this applies to all
422

422

00:20:46.140  -->  00:20:48.420
of the primitive array types.
423

423

00:20:48.420  -->  00:20:53.420
So, let's say you want to call our code in DummyClass,
424

424

00:20:53.640  -->  00:20:56.160
but you have a general array.
425

425

00:20:56.160  -->  00:20:58.420
I mean, you didn't know that you'd eventually
426

426

00:20:58.420  -->  00:21:00.940
wanna call a Java method.
427

427

00:21:00.940  -->  00:21:03.030
And so, you have just a general array.
428

428

00:21:03.030  -->  00:21:05.260
You don't have one of these IntArrays.
429

429

00:21:05.260  -->  00:21:06.580
Is there a way to convert?
430

430

00:21:06.580  -->  00:21:09.200
Well yes, of course there is.
431

431

00:21:09.200  -->  00:21:10.890
And if you guessed that the method is called
432

432

00:21:10.890  -->  00:21:12.620
toIntArray, you're right.
433

433

00:21:12.620  -->  00:21:15.300
So, you could do something like, DummyClass
434

434

00:21:17.029  -->  00:21:17.990
got printNumbers and let's use,
435

435

00:21:21.736  -->  00:21:23.030
Let's see.
436

436

00:21:23.030  -->  00:21:25.620
One of our IntArrays up here.
437

437

00:21:25.620  -->  00:21:27.220
We don't want to print 100 numbers.
438

438

00:21:27.220  -->  00:21:29.643
Let's use our evenNumbers Array.
439

439

00:21:30.610  -->  00:21:33.013
So, we'll say evenNumbers, dot toIntArray.
440

440

00:21:36.060  -->  00:21:39.990
And that has now converted a general array of type int
441

441

00:21:39.990  -->  00:21:42.580
to one of the special int Arrays.
442

442

00:21:42.580  -->  00:21:47.580
And if we run, we'll see that we get
443

443

00:21:47.780  -->  00:21:49.390
our array printed out from Java.
444

444

00:21:49.390  -->  00:21:52.230
Zero, two, four, six, eight, et cetera.
445

445

00:21:52.230  -->  00:21:53.867
So, if you have a regular Kotlin array
446

446

00:21:53.867  -->  00:21:56.740
and you need to call Java method, is easy to convert
447

447

00:21:56.740  -->  00:21:59.420
it to the equivalent primitive type array.
448

448

00:21:59.420  -->  00:22:02.010
Of course, this raises the question of whether you can
449

449

00:22:02.010  -->  00:22:03.180
do it the other way.
450

450

00:22:03.180  -->  00:22:05.890
If you got a primitive type array class,
451

451

00:22:05.890  -->  00:22:08.890
can you get a general array class?
452

452

00:22:08.890  -->  00:22:12.390
So, if you have an intArray, and you convert that
453

453

00:22:12.390  -->  00:22:13.890
to an array of int?
454

454

00:22:13.890  -->  00:22:17.550
And of course, you can do that and I'm sure you can guess
455

455

00:22:17.550  -->  00:22:19.270
what the function name is for that.
456

456

00:22:19.270  -->  00:22:21.530
You just have to call the to,
457

457

00:22:21.530  -->  00:22:22.400
Or maybe you can't.
458

458

00:22:22.400  -->  00:22:23.790
This is a little different.
459

459

00:22:23.790  -->  00:22:28.400
You have to call the to type array function, to typed array.
460

460

00:22:28.400  -->  00:22:31.160
So, for example we could do something like
461

461

00:22:31.160  -->  00:22:33.073
val convertedIntArray.
462

462

00:22:34.386  -->  00:22:37.940
And this is going to be an Array of Int.
463

463

00:22:37.940  -->  00:22:42.703
And we can say, myIntArray dot toTypedArray
464

464

00:22:44.680  -->  00:22:49.490
and the compiler can probably infer the type of this.
465

465

00:22:49.490  -->  00:22:51.590
So you probably don't even need this here.
466

466

00:22:52.430  -->  00:22:54.290
It can infer the type.
467

467

00:22:54.290  -->  00:22:55.390
So, that's all you have to do.
468

468

00:22:55.390  -->  00:22:57.750
And of course, you can call this on any
469

469

00:22:57.750  -->  00:23:01.650
of the special primitive type arrays.
470

470

00:23:01.650  -->  00:23:02.483
All right.
471

471

00:23:02.483  -->  00:23:03.316
That's all for arrays.
472

472

00:23:03.316  -->  00:23:04.690
I'll see you in the next video.
