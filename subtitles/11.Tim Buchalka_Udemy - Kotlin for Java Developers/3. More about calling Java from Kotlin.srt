1
00:00:05,550 --> 00:00:08,070
Now let's talk about properties for a minute.

2
00:00:08,250 --> 00:00:15,600
Now you'll notice that in the Cartland code I'm referring to the color field as if it's a property by

3
00:00:15,600 --> 00:00:18,210
just using the dot notation.

4
00:00:18,210 --> 00:00:24,280
Now you can only do it this way if the Java field has getter and setter methods.

5
00:00:24,600 --> 00:00:29,680
So let's go to our Java class and let's comment out the setter for color.

6
00:00:30,340 --> 00:00:37,960
So we'll just comment this out right now and if we go back to our Cartland code we'll see that now we

7
00:00:37,960 --> 00:00:42,320
can't do this obviously because there's no set.

8
00:00:42,340 --> 00:00:48,040
So how am I supposed to set color to green color is private.

9
00:00:48,070 --> 00:00:53,320
And so what the dot notation is actually doing is doing the same thing it's doing in cotland it's calling

10
00:00:53,320 --> 00:00:56,790
get or set under the covers depending on what you're doing.

11
00:00:56,800 --> 00:01:01,800
So will it work if we make our color field public.

12
00:01:01,840 --> 00:01:05,240
Well let's give it a shot and it does.

13
00:01:05,490 --> 00:01:07,810
And let's run to make sure that that is working

14
00:01:11,170 --> 00:01:12,290
and we'll see that it is.

15
00:01:12,280 --> 00:01:20,590
So that's that's a way you can get around this but normally we don't want our fields to be public so

16
00:01:20,800 --> 00:01:23,940
most of the time we're going to want a private field.

17
00:01:23,950 --> 00:01:29,800
And if we want to be able to use the dot notation we need to then make sure that we have setters and

18
00:01:29,800 --> 00:01:33,300
getters assigned and to bring this get her back here.

19
00:01:33,640 --> 00:01:38,980
OK we spent quite a bit of time on covariance and contravariant when we looked at generics.

20
00:01:38,980 --> 00:01:45,940
We looked at you site variants which is happens when you declare something to be variant or covariant

21
00:01:46,150 --> 00:01:49,040
in a function signature.

22
00:01:49,120 --> 00:01:55,570
And I said that doing this is equivalent to using Javins wild cards and so it's not surprising that

23
00:01:55,570 --> 00:02:04,110
wildcard items in Java function signatures will be converted to use site variants or covariance or contravariant

24
00:02:04,480 --> 00:02:06,210
when used from Katlin.

25
00:02:06,220 --> 00:02:14,070
So the question mark extends some class wild card will be converted to out some class.

26
00:02:14,110 --> 00:02:24,750
So that's covariance and the question marks super some class wildcard will be converted to in some class

27
00:02:24,760 --> 00:02:26,670
and of course that's contravariant.

28
00:02:26,740 --> 00:02:28,760
So just be aware of that.

29
00:02:28,780 --> 00:02:34,720
Now a brief word about exceptions if you call a java method that throws an exception and you don't handle

30
00:02:34,720 --> 00:02:40,870
the exception inside the code you don't have to declare that the CANTLIN function throws the exception

31
00:02:40,870 --> 00:02:46,110
because remember that cotland doesn't distinguish between checked and unchecked exceptions.

32
00:02:46,260 --> 00:02:46,640
OK.

33
00:02:46,660 --> 00:02:49,030
Now let's look at var args.

34
00:02:49,180 --> 00:02:54,270
What do you do if you want to call a java method that accepts a variable number of arguments.

35
00:02:54,370 --> 00:02:55,710
Well let's try it out.

36
00:02:55,710 --> 00:03:02,110
We'll add a method to our car class that takes a variable number of arguments so I'll put it before

37
00:03:02,110 --> 00:03:09,410
the two string nested here and we'll say public void variable method.

38
00:03:09,550 --> 00:03:18,650
And this is going to take eight and a string and the strings parameter is variable.

39
00:03:18,650 --> 00:03:24,000
I only put the parameter in there so we have more than just the variable parameter.

40
00:03:24,250 --> 00:03:34,470
And then I'll say for string string and strings system this just feels like I have to type a lot now

41
00:03:34,480 --> 00:03:39,090
especially with the print line system that outsprint line string.

42
00:03:39,650 --> 00:03:43,170
So it's a silly method but it does take a variable argument.

43
00:03:43,180 --> 00:03:46,490
All right so now let's call this method from our Cartland code.

44
00:03:46,570 --> 00:03:50,720
So we'll say Kardon variable Messud 5.

45
00:03:50,740 --> 00:03:59,030
And I guess I need some strings here so I'll say hello my favorite two strings hello and goodbye.

46
00:03:59,320 --> 00:04:00,120
So let's run

47
00:04:03,510 --> 00:04:07,920
and everything's great we see Hello and Goodbye printed from the variable method.

48
00:04:07,950 --> 00:04:13,530
Now let's put these strings into an array and see if we can call the function with an array.

49
00:04:13,530 --> 00:04:16,800
So we'll say string.

50
00:04:17,070 --> 00:04:30,080
Actually I'm in I'm in cotland here so vowel strings equals array of hello and goodbye.

51
00:04:30,300 --> 00:04:35,550
And then we'll say Kardon variable method and this time I'll pass it A10 and we'll pass it our strings

52
00:04:35,600 --> 00:04:36,180
right.

53
00:04:36,510 --> 00:04:37,700
And we can't do it.

54
00:04:37,920 --> 00:04:43,860
So even though the jaba method is really taking an array under the covers as we can see here from the

55
00:04:43,860 --> 00:04:50,380
method code it doesn't work it doesn't work like it does in Java where you can pass an array.

56
00:04:50,490 --> 00:04:54,560
We have to use a spread operator to unpack the array first.

57
00:04:54,600 --> 00:05:01,180
So if I add a Asterix here which is a spread operator everything works fine.

58
00:05:01,410 --> 00:05:07,740
So that's just something for you to be aware of if you want to call a java method that once a variable

59
00:05:07,950 --> 00:05:13,820
has a parameter that can take a variable number of arguments you can't pass an array directly to it

60
00:05:13,830 --> 00:05:17,120
from Cartland you have to unpack the array first.

61
00:05:17,120 --> 00:05:17,510
All right.

62
00:05:17,510 --> 00:05:19,580
Just a short word about void.

63
00:05:19,710 --> 00:05:22,520
Remember that cotland doesn't have void.

64
00:05:22,590 --> 00:05:28,750
So when a job a method returns void it will actually return unit when you call it from Cartland.

65
00:05:28,830 --> 00:05:30,750
So just be aware of that.

66
00:05:30,750 --> 00:05:36,480
So now just a reminder that when a Javid method once a primitive array you can't pass it an array of

67
00:05:36,480 --> 00:05:40,730
cotland integers or floats or whatever other primitive type at once.

68
00:05:41,040 --> 00:05:45,630
You have to pass it an instance of one of the special primitive type arrays.

69
00:05:45,630 --> 00:05:53,160
So if a method wants an array of int you can't pass it in array created using array of you'd have to

70
00:05:53,160 --> 00:06:00,780
create the array using int array of or you'd have to call the two int array function on the cotland

71
00:06:00,780 --> 00:06:02,650
array and pass the result.

72
00:06:02,790 --> 00:06:03,900
So let's try this out.

73
00:06:03,900 --> 00:06:12,300
Let's go to our car class now and let's make up a message that once a primitive array so will say public

74
00:06:12,300 --> 00:06:16,300
void once in array.

75
00:06:16,940 --> 00:06:20,570
And so will say at once and in the array.

76
00:06:21,630 --> 00:06:26,010
And then as usual We'll just print out what's wrong.

77
00:06:27,690 --> 00:06:32,290
So say system and don't print line.

78
00:06:32,760 --> 00:06:34,840
Here's the end.

79
00:06:39,020 --> 00:06:42,230
Now let's call this from Katlin.

80
00:06:42,650 --> 00:06:53,450
So we'll say Kardon Lawrence int array and we'll pass it in array of 2:59 at a rate of.

81
00:06:54,830 --> 00:06:58,280
And you'll see that this doesn't work and we expected this to fail.

82
00:06:58,310 --> 00:07:01,160
It's going to say that at once.

83
00:07:01,220 --> 00:07:02,920
Here's another plot form type.

84
00:07:02,930 --> 00:07:06,980
So once a platform type in terrain we're trying to pass in an array.

85
00:07:07,040 --> 00:07:09,680
And so there's two ways we could fix this.

86
00:07:09,680 --> 00:07:17,540
We can just say Oh all right well given an interesting and right away the error goes away or we could

87
00:07:17,540 --> 00:07:21,470
say well we'll just create an interest in the first place.

88
00:07:21,620 --> 00:07:25,110
So we'll say it into the array of.

89
00:07:25,480 --> 00:07:27,000
And the error goes away.

90
00:07:27,260 --> 00:07:35,480
So I just wanted to remind you and show you an example of passing an array to a method that wants a

91
00:07:35,480 --> 00:07:36,730
primitive type array.

92
00:07:36,770 --> 00:07:43,490
You can't pass a big a array class from Kotla and you have to pass one of the special primitive type

93
00:07:43,490 --> 00:07:44,480
arrays.

94
00:07:44,480 --> 00:07:47,120
All right let's talk about the Object class now.

95
00:07:47,120 --> 00:07:52,400
Now we've said that the any IT'S ACTUALLY THE any question mark class is at the top of the Cartland

96
00:07:52,400 --> 00:07:53,830
class hierarchy.

97
00:07:53,870 --> 00:07:58,960
And as we know the object class is at the top of the Java class hierarchy.

98
00:07:58,970 --> 00:08:03,980
So what happens when the Java code uses object explicitly.

99
00:08:03,980 --> 00:08:07,790
For example what happens to a variable declared as object.

100
00:08:07,790 --> 00:08:14,660
Well if you guess that something declared as object in Java it will be treated like any in cotland.

101
00:08:14,660 --> 00:08:16,010
You're right.

102
00:08:16,340 --> 00:08:21,890
Now remember that any only has a two string hash code and equals functions.

103
00:08:21,890 --> 00:08:24,020
It does not have to wait.

104
00:08:24,020 --> 00:08:31,580
Notify the get class or the clone or the finalize methods that the object class has.

105
00:08:31,580 --> 00:08:39,320
So if you want to call wait or notify you should cast the variable to Java Avodart lancôme object in

106
00:08:39,320 --> 00:08:40,730
your Cartland code.

107
00:08:40,730 --> 00:08:42,220
So let's try this out.

108
00:08:42,230 --> 00:08:53,330
I'm going to add in our car class a field of type Object and I'll just call it an object and I'm going

109
00:08:53,330 --> 00:08:58,670
to add a setter for it to or a getter rather because we want to be able to get this thing called and

110
00:08:58,670 --> 00:09:00,290
I might as well Ibos.

111
00:09:00,830 --> 00:09:09,490
So I'll come here and I'll have intelligent do this for me generate Saturn Geter and yet do it for me

112
00:09:09,490 --> 00:09:10,680
please.

113
00:09:10,690 --> 00:09:13,770
So now we have get an object and send an object.

114
00:09:13,780 --> 00:09:17,350
So now let's try using this field from Cartland

115
00:09:20,020 --> 00:09:29,200
So if we type card Daut and object and then see what intelligence suggests we'll see that we just have

116
00:09:29,200 --> 00:09:31,340
equals hash code into String.

117
00:09:31,570 --> 00:09:36,820
We don't have any of the methods that are normally in the object class.

118
00:09:36,820 --> 00:09:46,000
So if you want to be able to use an object to call let's say notify then you need to cast this to a

119
00:09:46,020 --> 00:09:51,790
Java Language object that's the only way you're going to be able to see the other methods that are normally

120
00:09:51,790 --> 00:09:53,330
in the object class.

121
00:09:53,350 --> 00:09:55,270
So you do the following.

122
00:09:55,330 --> 00:10:06,160
You'd say card not an object as Avodart Lang dot object dot.

123
00:10:06,190 --> 00:10:09,510
And now you'll see that we can see everything that's normally an object.

124
00:10:09,640 --> 00:10:12,760
So now we could go ahead and call notify for example.

125
00:10:12,940 --> 00:10:17,770
So now you can call all the methods he'd normally call an object but remember that you don't have to

126
00:10:17,770 --> 00:10:25,410
do this to call get class because when you use the Java class property that's actually what you're doing.

127
00:10:25,420 --> 00:10:32,080
So instead of explicitly calling the get class method you can just use the dot you know use dot Java

128
00:10:32,080 --> 00:10:38,040
class and that will give you the Java class so for example we can do the following.

129
00:10:40,570 --> 00:10:46,540
Dortch Java class and that's the equivalent to calling get class.

130
00:10:46,570 --> 00:10:55,090
So if you want to call anything other than two string equals hash code or get class you have to cast

131
00:10:55,090 --> 00:10:57,540
it to Avodart line that object first.

132
00:10:57,700 --> 00:11:02,440
OK I'm going to put this back to the class so that you have that in the code rangin a commented out

133
00:11:02,470 --> 00:11:04,780
because you really don't need to be calling notify.

134
00:11:04,810 --> 00:11:10,520
All right let's talk about static fields and methods we know we don't declare stuff is static in cotland

135
00:11:10,520 --> 00:11:19,030
So if there is a static method or a field how is that handled when your you want to use a static method

136
00:11:19,030 --> 00:11:20,200
or field from cotland.

137
00:11:20,200 --> 00:11:23,790
Well those are converted to companion objects.

138
00:11:23,800 --> 00:11:29,670
Now you can't pass the companion object around as a value but you can use its members.

139
00:11:29,710 --> 00:11:40,210
So let's add a static field and a static method to our car class so we'll say public she'll do it above

140
00:11:40,330 --> 00:11:41,640
the non-static member.

141
00:11:41,640 --> 00:11:51,130
So I'll say public static and X equals 5 and then we'll add a static method will say public static string

142
00:11:51,250 --> 00:11:56,610
x string and this will return.

143
00:11:56,860 --> 00:12:07,580
This is X and will increment x y one every time this method is called.

144
00:12:07,630 --> 00:12:15,670
Now first static members making it public is is good enough to be able to get and set the field using

145
00:12:15,670 --> 00:12:16,860
the dot notation.

146
00:12:16,990 --> 00:12:28,840
So now I just go back to Scotland and let's use these static members so will say print line X equals

147
00:12:31,540 --> 00:12:32,650
card X

148
00:12:35,230 --> 00:12:41,050
and we'll say print line car got X string.

149
00:12:41,530 --> 00:12:42,490
And if we run

150
00:12:45,310 --> 00:12:47,020
we'll see that that works fine.

151
00:12:47,020 --> 00:12:55,350
So essentially you access static members in Java classes as you would companion objects.

152
00:12:55,390 --> 00:13:01,060
Now one thing I haven't pointed out is X is mutable and so is color and that's because they have setters

153
00:13:01,240 --> 00:13:02,810
so they're mutable.

154
00:13:02,830 --> 00:13:05,770
This doesn't explicitly have a setter but it's public.

155
00:13:05,770 --> 00:13:09,140
So there's nothing to stop anybody from changing it.

156
00:13:09,280 --> 00:13:15,750
OK the last thing we're going to look at when it comes to calling Java from cotland is Sam conversions.

157
00:13:15,760 --> 00:13:24,370
Now Sam stands for single abstract method and as of Java 8 when a Java interface only has a single abstract

158
00:13:24,370 --> 00:13:31,180
method you can use a lambda expression rather than an anonymous instance when you call a method that

159
00:13:31,180 --> 00:13:33,190
wants an instance of the interface.

160
00:13:33,190 --> 00:13:38,750
So for example the Runnable interface is a Sam interface so we can do the following.

161
00:13:39,070 --> 00:13:47,650
So let me go back to our car class here and we'll just add a method all did at the top of the class

162
00:13:47,910 --> 00:13:56,110
and I'll say public void Demel method.

163
00:13:57,130 --> 00:14:06,490
I'm saying you thread new runnable and we'll accept intelligence autocomplete and I'll say system that

164
00:14:06,530 --> 00:14:08,610
outtrump print line.

165
00:14:10,460 --> 00:14:14,850
Mime in a thread.

166
00:14:20,150 --> 00:14:28,150
So runnable only has one method run and so it's a Sam interface.

167
00:14:28,160 --> 00:14:34,640
We're creating an anonymous instance of runnable and we're passing it to the thread constructor and

168
00:14:34,820 --> 00:14:37,830
I'm actually going to call start here.

169
00:14:37,940 --> 00:14:42,390
And so when we start the thread this runnable will be run.

170
00:14:42,410 --> 00:14:51,740
So because this is a Sam interface it has one method we can actually pass a lambda instead of doing

171
00:14:51,740 --> 00:14:52,880
it this way.

172
00:14:52,880 --> 00:14:59,960
So instead of doing this and I'll comment this out so that you will see this in the code we can instead

173
00:14:59,960 --> 00:15:00,930
do the following.

174
00:15:01,010 --> 00:15:09,830
We can say new thread and we're not accepting any parameters for this function.

175
00:15:09,830 --> 00:15:20,160
We're just going to say system not out of print line in a thread don't start.

176
00:15:21,020 --> 00:15:30,860
And so here instead of explicitly constructing a anonymous instance of a runnable we're instead passing

177
00:15:30,860 --> 00:15:32,850
the thread constructor the lambda.

178
00:15:33,020 --> 00:15:37,760
And we're saying that we're passing it essentially a method that doesn't take any parameters and this

179
00:15:37,760 --> 00:15:39,140
is the method body.

180
00:15:39,170 --> 00:15:44,210
So I showed you all this just to say that Cottman functions can be converted to lambdas in the same

181
00:15:44,210 --> 00:15:45,060
way.

182
00:15:45,230 --> 00:15:51,350
So if you want to call a java method that once an object it implements a Sam interface.

183
00:15:51,350 --> 00:15:57,900
So let's say once a runnable instance then you can do that by passing it a Cartland function.

184
00:15:58,160 --> 00:16:02,930
So let's have our demo method except a runnable as a parameter.

185
00:16:03,050 --> 00:16:05,420
So I'll comment this out so you have it in the code.

186
00:16:05,420 --> 00:16:12,260
And let's say that instead of defining it in here let's say we take a runnable are and then we'll just

187
00:16:12,260 --> 00:16:16,420
say new thread or start.

188
00:16:17,570 --> 00:16:20,030
So let's call this method from Cartland now.

189
00:16:20,030 --> 00:16:28,010
So we'll go back to Catlin and will say Kardon demo method and it wants a runnable So we'll we'll just

190
00:16:28,010 --> 00:16:37,970
pass it along and we'll say print line time in a thread that's Arlanda we don't get any errors.

191
00:16:38,090 --> 00:16:46,180
Of course the the function signature has to match whatever this interface is expecting.

192
00:16:46,180 --> 00:16:50,130
So whatever method this interface contains the function signature has to match.

193
00:16:50,130 --> 00:16:52,040
And here we don't have any arguments at all.

194
00:16:52,040 --> 00:16:55,240
So any parameters so we match.

195
00:16:55,250 --> 00:16:59,140
So let's run this.

196
00:16:59,220 --> 00:17:00,710
And here we are.

197
00:17:00,860 --> 00:17:02,110
I'm in a thread.

198
00:17:02,490 --> 00:17:06,630
So there are a few more things to know about when calling Java from cotland but these are the ones that

199
00:17:06,630 --> 00:17:08,190
you're most likely to run into.

200
00:17:08,190 --> 00:17:13,650
So we're going to leave this topic and in the next video we're going to look at calling Katlin from

201
00:17:13,650 --> 00:17:14,340
Java.

202
00:17:14,340 --> 00:17:15,930
So doing it the other way around.
