1
00:00:05,570 --> 00:00:08,270
OK so now we're going to talk about sequences.

2
00:00:08,310 --> 00:00:12,610
Now we've seen how we can change functions like map and filter together.

3
00:00:12,840 --> 00:00:17,340
And when we do this there's a collection's instance created at each step.

4
00:00:17,340 --> 00:00:23,880
So let's remind ourselves of what we did we did print line and map and what we wanted to do was we wanted

5
00:00:23,880 --> 00:00:28,040
to find the colors for all of the Fords.

6
00:00:28,410 --> 00:00:32,050
And so we started out by filtering to find all of the floor.

7
00:00:32,070 --> 00:00:38,020
So we said filter itd value Daut model equals Ford.

8
00:00:38,460 --> 00:00:41,330
And let me at the filter call here.

9
00:00:42,060 --> 00:00:47,240
So what we're doing here is refining all of the cars that are have the model Ford.

10
00:00:47,280 --> 00:00:55,590
But once we had the Fords we wanted to extract the color so we added a call after that.

11
00:00:55,610 --> 00:01:02,560
We changed map and we said i t dot valued dot color.

12
00:01:03,360 --> 00:01:08,560
And that gives us a list with the colors for all of the Fords.

13
00:01:08,640 --> 00:01:09,480
So let's run

14
00:01:12,320 --> 00:01:17,160
and we see that in our collection we have a red Ford and a green Ford.

15
00:01:17,180 --> 00:01:18,740
So we get red and green.

16
00:01:18,890 --> 00:01:26,450
Now when we did this the filter call returned a collection and then map was called on the resulting

17
00:01:26,450 --> 00:01:27,530
collection.

18
00:01:27,530 --> 00:01:33,500
So this is only a short chain so we only have one intermediate collection instance created here.

19
00:01:33,680 --> 00:01:40,340
But what if we had a whole bunch of function calls chained together or why if the collection we were

20
00:01:40,340 --> 00:01:41,840
working with was huge.

21
00:01:41,840 --> 00:01:44,890
I mean here we have five items in the collection.

22
00:01:44,890 --> 00:01:49,090
So you know it doesn't really matter that there's an intermediate collection being created here.

23
00:01:49,100 --> 00:01:55,070
But what if this contained five hundred thousand items or something crazy like that then we'll start

24
00:01:55,070 --> 00:02:00,950
to get concerned with the intermediate collection instances that are being created at every step of

25
00:02:00,950 --> 00:02:01,900
the chain.

26
00:02:01,910 --> 00:02:08,010
Now one way to avoid the creation of intermediate instances is by using sequences.

27
00:02:08,060 --> 00:02:10,430
So that's one use case for sequences.

28
00:02:10,430 --> 00:02:15,260
Another great use case for sequences is when you don't know how large a collection will be maybe you're

29
00:02:15,260 --> 00:02:20,570
going to fill the collection with the results of a database query and you have no idea how many items

30
00:02:20,570 --> 00:02:21,940
are going to come back.

31
00:02:21,950 --> 00:02:23,520
So what is the sequence.

32
00:02:23,540 --> 00:02:32,060
Well sequences are pretty much the same as streams in Java Katlin provides its own classes for this

33
00:02:32,060 --> 00:02:39,110
because Java streams aren't available on every platform streams were introduced in Java 8 and some platforms

34
00:02:39,110 --> 00:02:40,610
don't support Java 8 yet.

35
00:02:40,610 --> 00:02:42,550
For example Android doesn't.

36
00:02:42,770 --> 00:02:48,470
So Cartland reinvented the wheel here to ensure support on all the platforms that support Katlin.

37
00:02:48,590 --> 00:02:54,650
So if you're familiar with streams in Java then you'll know what sequences are in cotland and trees

38
00:02:54,650 --> 00:02:57,500
and a sequence can be enumerated one by one.

39
00:02:57,500 --> 00:03:04,670
So instead of each step in the chain evaluating the entire collection at once and then returning the

40
00:03:04,670 --> 00:03:08,170
collection and passing that collection onto the next step.

41
00:03:08,240 --> 00:03:14,990
When you work with a sequence each element in a sequence is evaluated individually and is then passed

42
00:03:14,990 --> 00:03:18,080
to the next step in the chain when applicable.

43
00:03:18,080 --> 00:03:24,320
I mean if a value in the collection you are working with obviously fails a filter then it's not going

44
00:03:24,320 --> 00:03:30,090
to be passed along but when applicable values are passed along one by one.

45
00:03:30,110 --> 00:03:36,020
Now since each element in a sequence can be enumerated one by one there is no need to to create any

46
00:03:36,020 --> 00:03:43,370
intermediate collection instances because what's going to happen is you'll evaluate the first item in

47
00:03:43,370 --> 00:03:48,680
the sequence and then pass it on to to the next step in the chain and the second one etc..

48
00:03:48,680 --> 00:03:52,050
There's no need to evaluate the entire collection.

49
00:03:52,070 --> 00:03:58,850
Create a resulting collection instance and then pass that collection on to the next item in the chain.

50
00:03:58,850 --> 00:04:05,210
Now the sequence interface has only one function iterator and the iterator is used to get each element

51
00:04:05,210 --> 00:04:07,070
in the sequence one by one.

52
00:04:07,400 --> 00:04:10,060
You can see sequences as never ending.

53
00:04:10,070 --> 00:04:16,060
They don't have a size so they're a continuous stream of elements but they're not called streams.

54
00:04:16,070 --> 00:04:18,140
They're called sequences in cotland.

55
00:04:18,140 --> 00:04:22,900
Now you can convert a collection to a sequence by calling the sequence function.

56
00:04:22,910 --> 00:04:24,550
But this is really important.

57
00:04:24,590 --> 00:04:25,830
So listen up.

58
00:04:25,910 --> 00:04:33,280
You only want to do this for large collections because Cartland collections are very efficient so there

59
00:04:33,280 --> 00:04:40,850
is no need to use sequences unless you have a large collection and you're going to do something that

60
00:04:40,850 --> 00:04:43,540
creates intermediate results.

61
00:04:43,550 --> 00:04:50,750
Now we don't need to convert our little piddly car or map to a sequence but we're going to anyway.

62
00:04:51,110 --> 00:04:58,610
So instead of treating our collection as a collection in our chain we can easily have it treated as

63
00:04:58,610 --> 00:05:03,140
a sequence by just adding a call to the as sequence function.

64
00:05:03,140 --> 00:05:14,360
So we're going to go as sequence Daut And now instead of our collection being filtered and mapped we've

65
00:05:14,360 --> 00:05:21,200
converted it to a sequence and so now each element in our collection will be evaluated one by one.

66
00:05:21,200 --> 00:05:24,970
There won't be any intermediate collection instances created.

67
00:05:25,070 --> 00:05:25,970
So let's run

68
00:05:29,270 --> 00:05:33,590
and we don't see a resulting list created.

69
00:05:33,620 --> 00:05:36,900
We see a sequence instance reference.

70
00:05:37,010 --> 00:05:38,750
So what's going on.

71
00:05:38,750 --> 00:05:44,840
Well you can perform two types of operations on sequences intermediate and terminal and if you're familiar

72
00:05:44,840 --> 00:05:48,330
with streams in Java you're already going to know all this stuff.

73
00:05:48,410 --> 00:05:52,150
An intermediate operation returns another sequence.

74
00:05:52,250 --> 00:05:55,940
A terminal operation does not return a sequence.

75
00:05:55,940 --> 00:05:57,720
It terminates the chain.

76
00:05:58,160 --> 00:06:05,150
So each intermediate step in the chain has to return a sequence because you want each intermediate step

77
00:06:05,180 --> 00:06:11,790
to be able to evaluate values one by one and then pass each value down to the next step in the chain.

78
00:06:11,900 --> 00:06:18,020
So each intermediate step will return a sequence but when you're done when you want the result at that

79
00:06:18,020 --> 00:06:20,150
point you don't want to sequence.

80
00:06:20,150 --> 00:06:25,250
Remember sequences are like continuous streams of values so when you're done you want something a little

81
00:06:25,250 --> 00:06:32,080
more concrete than a sequence so intermediate operations return sequences.

82
00:06:32,150 --> 00:06:37,820
Terminal operations do not return sequences they terminate the chain because at that point there is

83
00:06:37,820 --> 00:06:40,300
no sequence to pass to another step.

84
00:06:40,340 --> 00:06:47,390
Now intermediate operations are lazy in what this means is they aren't evaluated right away like for

85
00:06:47,390 --> 00:06:54,320
example if you never use a terminal operation then there's no need to actually evaluate a sequence to

86
00:06:54,320 --> 00:06:58,640
do any of the steps because you're never going to get anything concrete.

87
00:06:58,820 --> 00:07:01,450
So let's work with something else for a minute.

88
00:07:01,460 --> 00:07:03,170
Let's go here.

89
00:07:03,170 --> 00:07:07,950
So we'll say a list of and we'll have a list of names.

90
00:07:07,950 --> 00:07:13,230
Joe Mary and Jane.

91
00:07:13,370 --> 00:07:17,540
And then we're going to treat this list as a sequence which would be completely unnecessary in this

92
00:07:17,540 --> 00:07:24,650
case because it's a little piddly three item list and now it's chain filter Emap together so it's a

93
00:07:24,650 --> 00:07:30,680
filter and I'm going to be a little bit tricky in here I'll say I'm going to print and I'm going to

94
00:07:30,680 --> 00:07:32,830
say filtering.

95
00:07:34,200 --> 00:07:38,990
I-T So filtering we're going to fill in here the name that we're filtering and then I'm going to put

96
00:07:38,990 --> 00:07:42,760
a semi-colon and I'm going to add another statement.

97
00:07:43,160 --> 00:07:46,760
Zero equals J.

98
00:07:46,790 --> 00:07:49,800
So you'll notice here that I need a semi-colon.

99
00:07:49,980 --> 00:07:55,610
I'm providing a predicate but I want to print do a print as well.

100
00:07:55,610 --> 00:07:58,000
I can't do this.

101
00:07:58,460 --> 00:07:59,330
That doesn't work.

102
00:07:59,330 --> 00:08:02,240
So this is another case where you need to use semi-colons.

103
00:08:02,270 --> 00:08:08,130
If your writing predicates on the fly like this and you want to do more than one statement.

104
00:08:08,150 --> 00:08:12,380
So what we're going to do is we're going to print what the name that we're filtering and then names

105
00:08:12,380 --> 00:08:19,700
that begin with a capital J are going to pass this filter and then after that we're going to map and

106
00:08:19,700 --> 00:08:28,250
I'm going to use the same trick print line mapping the name that we're mapping and then I'm going to

107
00:08:28,250 --> 00:08:29,930
say just to uppercase.

108
00:08:29,930 --> 00:08:34,880
So that's the transformation that we're going to do here we're going to uppercase all of the names that

109
00:08:34,880 --> 00:08:36,860
pass the filter.

110
00:08:36,860 --> 00:08:37,940
So now let's run

111
00:08:41,330 --> 00:08:48,920
and you'll notice that none of our print lines were executed and that's because filter and map return

112
00:08:48,920 --> 00:08:54,610
a sequence and they're not terminal operations because when you're working with the sequence they return

113
00:08:54,610 --> 00:09:02,000
a sequence their intermediate operations and because sequences are Laysan evaluated they're not evaluated

114
00:09:02,030 --> 00:09:08,540
until a terminal operation is performed because map is returning a sequence in a sequence isn't really

115
00:09:08,570 --> 00:09:15,140
concrete it's just a continuous stream of items so we need something that sort of captures the items

116
00:09:15,140 --> 00:09:21,560
we want any more concrete way we need to perform a terminal operation something that does not return

117
00:09:21,560 --> 00:09:26,000
a sequence and until we do that nothing is going to get executed.

118
00:09:26,030 --> 00:09:31,180
So none of this code was executed because we don't have a terminal operation in this chain.

119
00:09:31,280 --> 00:09:33,530
So let's add a terminal operation.

120
00:09:33,680 --> 00:09:36,070
Let's say that that's great.

121
00:09:36,080 --> 00:09:42,210
So we have a sequence at this point which is names that start with J all uppercase.

122
00:09:42,320 --> 00:09:45,610
And we want to have those names in a list.

123
00:09:45,650 --> 00:09:50,890
So the terminal operation that we're going to use is not to list.

124
00:09:51,560 --> 00:09:56,640
Now this is a terminal operation it does not return a sequence it returns a list.

125
00:09:56,690 --> 00:09:58,860
And so this terminates the chain.

126
00:09:59,000 --> 00:10:04,970
And because we now have a terminal operation when we run our chain should execute.

127
00:10:05,120 --> 00:10:06,080
So let's run

128
00:10:09,200 --> 00:10:11,400
and sure enough our chain executes.

129
00:10:11,420 --> 00:10:17,630
Let's take a look at it so you'll see that we filtered Joe he's first here and he passes the filter

130
00:10:17,750 --> 00:10:20,270
because his name begins with a capital J.

131
00:10:20,270 --> 00:10:23,570
And so we see that we're mapping him right away.

132
00:10:23,570 --> 00:10:29,810
We're not waiting until we've also checked Mary and Jane against the filter and then we pass everything

133
00:10:29,810 --> 00:10:35,600
down to map know each individual item is evaluated one by one.

134
00:10:35,600 --> 00:10:43,760
So we we filter Joe he passes so then we map Joe we filter Mary she does not pass this test so we don't

135
00:10:43,760 --> 00:10:46,080
see Mary being mapped.

136
00:10:46,100 --> 00:10:49,620
We go straight on to filtering Jane and then we map Jane.

137
00:10:49,790 --> 00:10:55,240
So when you use sequences nothing happens until a terminal operation is present.

138
00:10:55,250 --> 00:10:59,330
Now as I mentioned if you're familiar with streams and Javid none of this is going to be new to you

139
00:10:59,330 --> 00:11:01,220
because streams work in the same way.

140
00:11:01,430 --> 00:11:07,970
So because each item in the list is evaluated individually that can mean that some entries are never

141
00:11:07,970 --> 00:11:09,370
evaluated.

142
00:11:09,380 --> 00:11:16,160
For example if the terminal operation is a Find function which returns an entry not a sequence then

143
00:11:16,160 --> 00:11:19,920
that function will return the moment it finds a match.

144
00:11:19,940 --> 00:11:25,940
So it's possible that we won't have to evaluate the entire sequence and that's another potential advantage

145
00:11:25,940 --> 00:11:30,730
of using sequences over collections when you're doing this sort of chaining.

146
00:11:30,740 --> 00:11:39,660
So instead of a two list let's change our code so that it finds the first name that ends with E..

147
00:11:39,770 --> 00:11:43,310
Now we know that Joe is going to match that.

148
00:11:43,310 --> 00:11:50,260
So with that in mind let's change our code to find and we want it.

149
00:11:50,390 --> 00:11:52,190
It ends with.

150
00:11:52,400 --> 00:11:59,510
And in this case we have to use a capital E because the previous step in the chain has upper cased everything

151
00:11:59,520 --> 00:12:02,750
so if we use a lower case e nothing's going to match.

152
00:12:03,200 --> 00:12:09,920
So we'll use it as capital E here I like to have blanks in the curly braces.

153
00:12:10,130 --> 00:12:12,040
So let's run now.

154
00:12:14,720 --> 00:12:21,230
And we'll see that in this case only Joe is ever evaluated because Joe is filtered he passes the filter

155
00:12:21,230 --> 00:12:23,940
Yes so he's passed down to the map.

156
00:12:23,970 --> 00:12:25,060
He's uppercase.

157
00:12:25,070 --> 00:12:30,760
And then he's passed down to the find and he matches so the Find function returns and that's it.

158
00:12:30,770 --> 00:12:31,760
Now our chain is done.

159
00:12:31,760 --> 00:12:33,230
Our chain is terminated.

160
00:12:33,230 --> 00:12:37,590
So we didn't even have to evaluate Marion Jane against the filter.

161
00:12:37,610 --> 00:12:43,070
So now let's remove the sequence and let's take a look at how things change will run

162
00:12:46,210 --> 00:12:53,530
and now we'll see that we filter the entire collection and then we map Joe and Jane because Mary doesn't

163
00:12:53,530 --> 00:13:00,130
pass the filter so she's filtered out at this point and then we we map Joe and Jane and then we come

164
00:13:00,130 --> 00:13:03,830
down here and we don't have a print line in here but we find Joe.

165
00:13:03,940 --> 00:13:09,250
So that's what's actually returned from this entire thing is Joe upper cased.

166
00:13:09,250 --> 00:13:15,490
So even when you're not using a sequence obviously fine when you hit fine the moment it finds a element

167
00:13:15,490 --> 00:13:19,540
that matches it stops it's found its first match.

168
00:13:19,540 --> 00:13:25,150
Now when you're working with collections and not sequences the order in which you call functions can

169
00:13:25,150 --> 00:13:26,130
make a difference.

170
00:13:26,170 --> 00:13:30,940
For example let's change the order of the filter and the map calls so instead of filtering first and

171
00:13:30,940 --> 00:13:34,020
then mapping lets do the following.

172
00:13:35,970 --> 00:13:38,700
We'll do the mapping as the first step.

173
00:13:39,120 --> 00:13:40,520
And now let's run.

174
00:13:40,770 --> 00:13:44,490
And before we do let's just look at this again take to try to remember it.

175
00:13:44,490 --> 00:13:50,270
So we filter all three names and then we map just Joe and Jane.

176
00:13:50,410 --> 00:13:58,270
But now if we run we'll see that we map all three names and we also filter all three names and that's

177
00:13:58,270 --> 00:14:02,620
because since we're not filtering Mary out she gets mapped as well.

178
00:14:02,620 --> 00:14:07,240
So all three names get uppercase and then we check them against the filter.

179
00:14:07,240 --> 00:14:10,080
Now with this small collection that doesn't matter.

180
00:14:10,180 --> 00:14:15,880
But if you're processing thousands of entries then doing the math first would be much less efficient

181
00:14:15,970 --> 00:14:18,610
than filtering the names and then doing the map.

182
00:14:18,850 --> 00:14:25,570
So if you're only ultimately interested in names that begin with Jay then you want to filter out the

183
00:14:25,570 --> 00:14:28,750
names that don't begin with J as early as possible in the chain.

184
00:14:28,750 --> 00:14:32,910
Otherwise you're going to be operating on some elements unnecessarily.

185
00:14:32,980 --> 00:14:36,540
Now when you're using a sequence the order might not be as critical.

186
00:14:36,580 --> 00:14:40,810
And in our example it isn't because the first element matches define.

187
00:14:40,810 --> 00:14:46,890
So if we were to change this back to a sequence and do the same thing.

188
00:14:49,420 --> 00:14:55,400
We're going to see that only Joe goes through because he matches the fine which terminates the chain.

189
00:14:55,420 --> 00:14:59,120
So when you're using a sequence the order might not be as critical.

190
00:14:59,230 --> 00:15:04,020
But let's put Joe last in the list now instead of first

191
00:15:07,380 --> 00:15:08,490
and now let's run

192
00:15:12,430 --> 00:15:18,370
and we'll see that again where we were doing unnecessary things we've passed Mary all the way through

193
00:15:18,370 --> 00:15:19,340
the chain.

194
00:15:19,360 --> 00:15:22,670
Well she didn't make it past this point but she was mapped.

195
00:15:22,690 --> 00:15:28,540
Now maybe we want it that because we're checking everything against an upper case J in the filter call

196
00:15:28,540 --> 00:15:30,670
so it will depend on what you're trying to do.

197
00:15:30,670 --> 00:15:36,250
So all of this is just to say that when you're creating a chain Take a look at it and see if there are

198
00:15:36,250 --> 00:15:43,330
any steps that will process items unnecessarily because of the order in which you've changed the functions

199
00:15:43,330 --> 00:15:48,730
together it's possible that just by switching the order of some of the functions you might be able to

200
00:15:48,730 --> 00:15:51,070
cut out some unnecessary processing.
