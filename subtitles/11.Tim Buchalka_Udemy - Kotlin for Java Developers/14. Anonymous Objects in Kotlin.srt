1
1

00:00:04,680  -->  00:00:07,140
Alright, the third use for companion
2

2

00:00:07,140  -->  00:00:09,539
objects is object expressions which are
3

3

00:00:09,539  -->  00:00:12,840
essentially anonymous object, so you use
4

4

00:00:12,840  -->  00:00:14,969
them where you'd use anonymous classes
5

5

00:00:14,969  -->  00:00:17,340
in Java. So let's say we have the
6

6

00:00:17,340  -->  00:00:22,650
following interface, let's say interface some
7

7

00:00:22,650  -->  00:00:27,960
interface and it'll just have one
8

8

00:00:27,960  -->  00:00:32,879
function must implement that accepts an
9

9

00:00:32,879  -->  00:00:40,200
int and returns a string. So that's our
10

10

00:00:40,200  -->  00:00:43,440
simple interface and now we'll add a
11

11

00:00:43,440  -->  00:00:46,620
function that accepts some interface as
12

12

00:00:46,620  -->  00:00:49,950
a parameter, so we'll say fun want some
13

13

00:00:49,950  -->  00:00:54,110
interface and I'll take a parameter si
14

14

00:00:54,110  -->  00:00:58,260
and whatever instances passed has to
15

15

00:00:58,260  -->  00:01:01,260
have implemented some interface and all
16

16

00:01:01,260  -->  00:01:04,820
it's going to do is print out printing
17

17

00:01:04,820  -->  00:01:12,869
from wants some interface and what it'll
18

18

00:01:12,869  -->  00:01:15,840
do is it'll call the must implement
19

19

00:01:15,840  -->  00:01:19,740
function inside the interface and it'll
20

20

00:01:19,740  -->  00:01:23,909
pass it 22, the implementation will take
21

21

00:01:23,909  -->  00:01:26,760
22 and do something with it. So we can
22

22

00:01:26,760  -->  00:01:29,100
use an object expression to call this
23

23

00:01:29,100  -->  00:01:31,170
function, so let's do that from the main
24

24

00:01:31,170  -->  00:01:36,180
method, let's come up here and we'll say
25

25

00:01:36,180  -->  00:01:39,990
wants some interface and so this function,
26

26

00:01:39,990  -->  00:01:44,490
as we just saw once an instance that
27

27

00:01:44,490  -->  00:01:46,830
implements this interface. So we're going
28

28

00:01:46,830  -->  00:01:48,869
to create basically an anonymous
29

29

00:01:48,869  -->  00:01:51,329
instance using the object keyword.
30

30

00:01:51,329  -->  00:01:54,110
So we'll say object and this object
31

31

00:01:54,110  -->  00:01:59,520
implements some interface, will open up
32

32

00:01:59,520  -->  00:02:03,509
curly braces and will override the
33

33

00:02:03,509  -->  00:02:07,290
function must implement. Now here, I could
34

34

00:02:07,290  -->  00:02:10,500
hit enter or select this and IntelliJ
35

35

00:02:10,500  -->  00:02:13,590
will generate the function definition
36

36

00:02:13,590  -->  00:02:16,079
with a to do body, but I want an
37

37

00:02:16,079  -->  00:02:18,540
expression body for this function I don't
38

38

00:02:18,540  -->  00:02:20,849
find a block body, so I'm not going to do
39

39

00:02:20,849  -->  00:02:23,010
that, I'm just going to type it out.
40

40

00:02:23,010  -->  00:02:28,980
So must implement and this function takes
41

41

00:02:28,980  -->  00:02:32,760
an int and we're going to return the
42

42

00:02:32,760  -->  00:02:37,879
string this is from must implement
43

43

00:02:37,879  -->  00:02:43,290
implement and what this function will do
44

44

00:02:43,290  -->  00:02:45,599
is take the number that's passed to it
45

45

00:02:45,599  -->  00:02:47,909
and multiply it by 100, so nothing
46

46

00:02:47,909  -->  00:02:50,400
nothing or shattering. So what's going to
47

47

00:02:50,400  -->  00:02:52,739
happen here is this is an object that
48

48

00:02:52,739  -->  00:02:55,049
implements must implement, so it's going
49

49

00:02:55,049  -->  00:02:57,480
to be passed to this function and this
50

50

00:02:57,480  -->  00:03:00,000
function is going to call the must
51

51

00:03:00,000  -->  00:03:05,069
implement method with the value 22,
52

52

00:03:05,069  -->  00:03:07,169
so the value of 22 is going to be passed in
53

53

00:03:07,169  -->  00:03:09,840
here and so we're going to multiply 22
54

54

00:03:09,840  -->  00:03:11,849
by hundreds, so we expect to see the
55

55

00:03:11,849  -->  00:03:19,169
value 2200 printed. Let's run and sure
56

56

00:03:19,169  -->  00:03:21,419
enough, we see that we're printing from
57

57

00:03:21,419  -->  00:03:23,430
want some interface and then this is
58

58

00:03:23,430  -->  00:03:26,900
from must implement, so we're getting
59

59

00:03:26,900  -->  00:03:33,120
print line here and this is the value
60

60

00:03:33,120  -->  00:03:36,959
that it's printing, so it's printing the
61

61

00:03:36,959  -->  00:03:39,799
string being returned from this function
62

62

00:03:39,799  -->  00:03:42,930
which is this. Now, a couple of notes here,
63

63

00:03:42,930  -->  00:03:45,030
first of all when you want to use an
64

64

00:03:45,030  -->  00:03:46,919
object expression, the instance that's
65

65

00:03:46,919  -->  00:03:49,829
created isn't a singleton, so even though
66

66

00:03:49,829  -->  00:03:51,659
you've used the object keyword here,
67

67

00:03:51,659  -->  00:03:53,669
the instance that's created here is not a
68

68

00:03:53,669  -->  00:03:55,859
singleton, it's used and then it's
69

69

00:03:55,859  -->  00:03:59,400
discarded. And so if we were to call you
70

70

00:03:59,400  -->  00:04:01,919
know if this was inside a function body,
71

71

00:04:01,919  -->  00:04:03,959
that you were calling a lots of times
72

72

00:04:03,959  -->  00:04:05,549
you'd be getting a new instance every
73

73

00:04:05,549  -->  00:04:07,709
single time. So it's not as if one
74

74

00:04:07,709  -->  00:04:09,269
instance is created here and then it's
75

75

00:04:09,269  -->  00:04:11,129
kept forever, if you use an object
76

76

00:04:11,129  -->  00:04:13,739
expression for the same class again or
77

77

00:04:13,739  -->  00:04:16,049
the same interface in this case, then
78

78

00:04:16,049  -->  00:04:18,090
another instance will be created. Also,
79

79

00:04:18,090  -->  00:04:20,909
unlike in Java the object expression
80

80

00:04:20,909  -->  00:04:23,759
inside here can access variables from
81

81

00:04:23,759  -->  00:04:25,979
outside it, local variables and these
82

82

00:04:25,979  -->  00:04:28,260
variables don't have to be final,
83

83

00:04:28,260  -->  00:04:29,820
in other words they don't have to be val
84

84

00:04:29,820  -->  00:04:32,310
variables, they can also be var variables
85

85

00:04:32,310  -->  00:04:36,350
so let's give this a shot, we'll say var this is
86

86

00:04:36,350  -->  00:04:39,300
mutable, in other words it's not final
87

87

00:04:39,300  -->  00:04:41,700
and we'll give this the value of 45 and
88

88

00:04:41,700  -->  00:04:42,600
then in here
89

89

00:04:42,600  -->  00:04:47,190
now I do want a function body, so let me
90

90

00:04:47,190  -->  00:04:53,370
add some curly braces here. So in here
91

91

00:04:53,370  -->  00:04:55,560
I'm going to say we need to return this
92

92

00:04:55,560  -->  00:04:59,520
now, it returns a string and I need to
93

93

00:04:59,520  -->  00:05:02,370
add the return value here and in here
94

94

00:05:02,370  -->  00:05:05,580
I can go you know this is mutable plus
95

95

00:05:05,580  -->  00:05:07,470
plus and I'm not going to get an error
96

96

00:05:07,470  -->  00:05:10,500
here even though this is accessing a
97

97

00:05:10,500  -->  00:05:13,530
variable outside it and this variable is
98

98

00:05:13,530  -->  00:05:16,680
not final, so if I print this is mutable
99

99

00:05:16,680  -->  00:05:24,870
here, I don't know why IntelliJ imported
100

100

00:05:24,870  -->  00:05:27,210
a class here from Java code, that's why
101

101

00:05:27,210  -->  00:05:28,800
these errors are coming up, so we'll get
102

102

00:05:28,800  -->  00:05:34,169
rid of them let's run and now we'll see
103

103

00:05:34,169  -->  00:05:36,690
46 printed for this is mutable, so the
104

104

00:05:36,690  -->  00:05:38,490
object expression was able to access
105

105

00:05:38,490  -->  00:05:41,310
this variable even though it's not a val
106

106

00:05:41,310  -->  00:05:43,440
variable which is essentially saying
107

107

00:05:43,440  -->  00:05:46,020
it's not final. Now you can assign object
108

108

00:05:46,020  -->  00:05:48,750
expressions to variables and they can
109

109

00:05:48,750  -->  00:05:50,910
also implement interfaces as we've seen,
110

110

00:05:50,910  -->  00:05:52,650
but not only that they can implement
111

111

00:05:52,650  -->  00:05:55,140
multiple interfaces, which you can't do
112

112

00:05:55,140  -->  00:05:57,510
in Java, so if we had another interface
113

113

00:05:57,510  -->  00:05:59,669
that we wanted to implement, we could
114

114

00:05:59,669  -->  00:06:02,610
actually tack that on, I'm not sure how
115

115

00:06:02,610  -->  00:06:04,890
useful that is, because most of the time
116

116

00:06:04,890  -->  00:06:06,240
you're going to be doing what we did
117

117

00:06:06,240  -->  00:06:08,010
here and calling a function that just
118

118

00:06:08,010  -->  00:06:10,590
wants a parameter of a single interface,
119

119

00:06:10,590  -->  00:06:12,150
but you can do it.
120

120

00:06:12,150  -->  00:06:14,070
Okay so you've seen the three use cases
121

121

00:06:14,070  -->  00:06:16,800
for the object keyword, you can use
122

122

00:06:16,800  -->  00:06:18,150
object when you want to create a
123

123

00:06:18,150  -->  00:06:21,360
singleton, you can use object when you
124

124

00:06:21,360  -->  00:06:25,380
want to use companion objects and when
125

125

00:06:25,380  -->  00:06:26,820
you want to have private constructors
126

126

00:06:26,820  -->  00:06:30,090
and you can use object when you want to
127

127

00:06:30,090  -->  00:06:34,010
create anonymous instances.
