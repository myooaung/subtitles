1
00:00:05,400 --> 00:00:08,280
All right it's time to practice what you've learned in this section.

2
00:00:08,290 --> 00:00:12,980
We're going to spend most of the challenge looking at Java calling Katlin.

3
00:00:13,150 --> 00:00:18,220
But our first challenge will be about Cartland calling Java.

4
00:00:18,250 --> 00:00:26,200
So I've created an Employee class in Java and if you download the starter project and the resources

5
00:00:26,200 --> 00:00:28,180
you will get this class typed in for you.

6
00:00:28,180 --> 00:00:31,950
So unless you really really feel like it you don't have to type it in again.

7
00:00:32,230 --> 00:00:34,990
And as you can see it has four fields.

8
00:00:34,990 --> 00:00:43,000
First Name Last Name Start and salary last three years and then it has a constructor that accepts the

9
00:00:43,000 --> 00:00:50,140
first name last name star and just assigns those values and it initializes the salary last three years

10
00:00:50,140 --> 00:00:51,200
field.

11
00:00:51,220 --> 00:00:57,970
So now I'm going to go over to a Cartland file that I created and it's in a separate package.

12
00:00:58,060 --> 00:01:00,170
And right now there's nothing in it.

13
00:01:00,340 --> 00:01:06,730
And so I'm going to add the main function and I'm going to type in the following code and this code

14
00:01:06,730 --> 00:01:09,400
will be in the starter project.

15
00:01:09,700 --> 00:01:11,350
So I'm going to save Val.

16
00:01:11,360 --> 00:01:15,030
Employee equals employee.

17
00:01:15,250 --> 00:01:20,510
And the first name will be Jane the second name will be Smith.

18
00:01:20,530 --> 00:01:24,340
And she started in the year 2000.

19
00:01:24,430 --> 00:01:29,300
So we have the first name the last name and the start your.

20
00:01:29,420 --> 00:01:35,140
So then I'm going to say employee Daut last name equals Jones.

21
00:01:35,240 --> 00:01:36,700
Maybe she got married.

22
00:01:36,710 --> 00:01:39,010
Maybe she changed her name for some reason.

23
00:01:39,650 --> 00:01:49,710
And then I'm going to say employee Daut salary salary last three years equals.

24
00:01:49,830 --> 00:01:52,960
And I just want to check the spelling of that to make sure I got it right.

25
00:01:52,970 --> 00:01:59,130
So salary last three years equals we're going to say array of.

26
00:01:59,210 --> 00:02:02,530
And we'll say fifty thousand dot.

27
00:02:02,600 --> 00:02:03,860
Twenty five.

28
00:02:03,990 --> 00:02:06,460
Fifty four thousand Daut.

29
00:02:06,830 --> 00:02:12,700
Sixty and fifty six thousand eight hundred forty two.

30
00:02:13,040 --> 00:02:21,170
So what I want you to do for your first challenge is to make this code compile so do what you have to

31
00:02:21,170 --> 00:02:31,220
do either in this class in this file rather or the Employee class or both to make these two lines compile.

32
00:02:31,400 --> 00:02:36,020
So when I say make the code compile I don't mean you can't change this code you've got to just somehow

33
00:02:36,020 --> 00:02:37,200
make it compile.

34
00:02:37,370 --> 00:02:40,400
But you know you can change this code.

35
00:02:40,430 --> 00:02:46,400
You may have to change this code but what you essentially want to do is assign Jones to the employee's

36
00:02:46,400 --> 00:02:51,190
last name and assign this array to the salary last three years.

37
00:02:51,200 --> 00:02:56,580
So pause the video and give it a try OK welcome back.

38
00:02:56,580 --> 00:03:00,920
Well we have a couple of problems here so let's go through them one by one.

39
00:03:00,930 --> 00:03:04,890
So the first problem we're getting is cannot access last name.

40
00:03:04,890 --> 00:03:07,470
It is private in employee.

41
00:03:07,500 --> 00:03:15,020
So what do we do in Java when we want to allow the outside world to set the value of a private field

42
00:03:15,020 --> 00:03:22,040
while we add a set method so let's do that I'm going to have intelligence you do it for me.

43
00:03:22,050 --> 00:03:29,020
So all right click can say generate I want a setter and I want a sweater for the last name.

44
00:03:29,180 --> 00:03:29,860
That's great.

45
00:03:29,870 --> 00:03:35,810
But if we go back to the file the call in file will see that it's still telling us that it can't access

46
00:03:35,810 --> 00:03:36,980
last name.

47
00:03:36,980 --> 00:03:42,860
And the reason for that and maybe you are expecting it to fix the problem but the reason for that is

48
00:03:42,920 --> 00:03:52,250
if we want to use the dot notation to access a Java field we have to have a set and a get.

49
00:03:52,430 --> 00:03:55,660
So let's add a get here.

50
00:03:55,850 --> 00:03:57,740
Have intelligent do it for me again.

51
00:03:57,740 --> 00:04:05,350
So I want to get this time for a last name and now if we go back we can see that we can do it.

52
00:04:05,660 --> 00:04:15,080
So if you want to be able to access a Java field using the Courtland's syntax employee Daut the field

53
00:04:15,080 --> 00:04:17,000
has to have both a set and a get.

54
00:04:17,000 --> 00:04:25,790
Now you might have done this you might have said employee set last name Jones and that's how you fixed

55
00:04:25,790 --> 00:04:27,500
it and that's fine.

56
00:04:27,500 --> 00:04:28,450
That works too.

57
00:04:28,460 --> 00:04:34,700
But you'll see that if we hover our cursor here the IDE is giving us a hint it's saying use the property

58
00:04:34,700 --> 00:04:38,870
access syntax which is what I usually say is the dot syntax.

59
00:04:38,900 --> 00:04:44,360
So it's saying you know you could access this directly like you can access a property.

60
00:04:44,470 --> 00:04:49,690
So it's giving us that hint because it knows we have a set and we get in the Java class so it knows

61
00:04:49,690 --> 00:04:52,660
that we can access it that way and that's the more Cartland way.

62
00:04:52,660 --> 00:04:54,510
So I'm going to put it back to that.

63
00:04:54,520 --> 00:05:01,240
But if you came up with this if you added the set and you'll see now it's saying the get isn't being

64
00:05:01,240 --> 00:05:05,190
used so if you went ahead and added a set and then changed it to this that works.

65
00:05:05,190 --> 00:05:07,330
And if we comment out the get

66
00:05:10,030 --> 00:05:11,950
You'll notice that this still works.

67
00:05:11,950 --> 00:05:19,300
So we only need both a set and a get if we want to use the dot notation or the property access syntax

68
00:05:19,300 --> 00:05:25,090
and you'll also notice we're not getting that hint now because now that we only have the set we can't

69
00:05:25,210 --> 00:05:28,670
we cannot access it like we can access a property.

70
00:05:28,720 --> 00:05:35,950
So let's uncomment this because we'd like to kind of do it do more Cartland way and we get the hint

71
00:05:35,950 --> 00:05:39,690
back now and all change that back to.

72
00:05:40,220 --> 00:05:43,590
Well same point you got last name equals Jones.

73
00:05:43,870 --> 00:05:45,980
OK so that's one problem down.

74
00:05:46,240 --> 00:05:52,030
So now we have the second problem and we can solve this error message in the exact same way it says

75
00:05:52,030 --> 00:05:56,110
cannot access salary last three years it is private while we know how to fix that.

76
00:05:56,110 --> 00:06:04,960
Now let's come in here and we'll add a set and a get for the salary last three years so I'll have intelligent

77
00:06:04,960 --> 00:06:06,310
you do that for me.

78
00:06:06,340 --> 00:06:11,660
I want a getter and setter for the salary last three years.

79
00:06:11,720 --> 00:06:19,810
Q And now this problem goes away but we still have a problem which is devalue we have a type mismatch

80
00:06:19,840 --> 00:06:26,740
and it says that the method wants a floater range we now know that that's a platform type because it's

81
00:06:26,740 --> 00:06:31,820
got the Exham exclamation mark there but it actually found an array of double.

82
00:06:31,840 --> 00:06:36,220
So if we go back to the math that we'll see that at once a primitive float array.

83
00:06:36,490 --> 00:06:42,820
And as we learn we have to do something special in cotland when the method in Java once a primitive

84
00:06:42,820 --> 00:06:43,660
array.

85
00:06:43,660 --> 00:06:51,040
Right now we're trying to pass a big a array of double so we can fix the double problem by adding F

86
00:06:51,730 --> 00:06:54,840
to the end of all of our literals here.

87
00:06:54,880 --> 00:07:01,600
So now it's saying while you have an array of float remember that when it comes to floating point double

88
00:07:01,600 --> 00:07:07,730
is the default sum unless you have the F suffix floating point literals are considered to be double.

89
00:07:07,780 --> 00:07:12,790
So now that we've added the suffix to all of our literals we know we have a float array but it's a big

90
00:07:12,910 --> 00:07:19,390
a float array and you can't pass big a Erase to primitive Java arrays.

91
00:07:19,450 --> 00:07:23,680
We have to pass one of those special primitive type arrays and there are two ways we can fix this.

92
00:07:23,680 --> 00:07:29,670
We can convert this big a array to a float array by saying to float array.

93
00:07:29,860 --> 00:07:31,960
And that takes care of the error.

94
00:07:32,110 --> 00:07:37,600
So here we started out with a big a float array and we've converted it to one of the special primitive

95
00:07:37,600 --> 00:07:38,670
type arrays.

96
00:07:38,770 --> 00:07:43,480
But since we know we want to do that anyway and we're not using this array anywhere else the second

97
00:07:43,480 --> 00:07:48,860
way we could solve this is let's just start with one of those special arrays to begin with.

98
00:07:49,240 --> 00:07:53,510
And so instead of array of we can just say float array of.

99
00:07:53,530 --> 00:07:56,150
And that fixes the problem for us.

100
00:07:56,290 --> 00:07:59,040
And now our code compiles so we're done.

101
00:07:59,170 --> 00:08:01,170
That's challenge number one down.

102
00:08:01,420 --> 00:08:05,920
OK so that's all we're going to do for a Cartland calling Java.

103
00:08:05,950 --> 00:08:11,590
There are other things you need to be aware of but they're more along the lines of You need to be aware

104
00:08:11,590 --> 00:08:16,860
of them rather than you must do something if you want to make this happen.

105
00:08:16,870 --> 00:08:22,750
So let's switch over to calling Katlin from Java now and to do that we're going to start with a java

106
00:08:22,780 --> 00:08:23,430
project.

107
00:08:23,440 --> 00:08:27,610
So I'll say file new project.

108
00:08:27,610 --> 00:08:34,000
I want a Java project so that's good and I want idea to create the main method for me so all select

109
00:08:34,000 --> 00:08:45,100
this command line app template and I'll call this Java calling cotland and this package name is fine.

110
00:08:45,100 --> 00:08:46,620
Call Katlin from Java.

111
00:08:46,630 --> 00:08:47,580
That's what we're doing.

112
00:08:47,580 --> 00:08:52,960
I think I use the same package in the video about this and that's probably remembering that from there

113
00:08:53,410 --> 00:08:58,750
so I'll click Finish and I'm going to open this in this window.

114
00:08:58,750 --> 00:08:59,110
All right.

115
00:08:59,110 --> 00:09:04,210
So we've got our main class and our main method and now I'm going to create a package for the Cartland

116
00:09:04,210 --> 00:09:04,820
code.

117
00:09:04,960 --> 00:09:12,210
So all right click here saying new package and I'll call this cademy.

118
00:09:12,250 --> 00:09:18,260
Learn programming dot and I'll call this Koplin code.

119
00:09:19,000 --> 00:09:27,730
And then inside all creating Cartland file and I'll just call it CANTLIN code.

120
00:09:27,730 --> 00:09:32,800
Now right away we're going to get the message that Cartland isn't configured and we know that we just

121
00:09:32,800 --> 00:09:39,700
have to come down here and I'm going to select as Cartland Java module because I'm targeting the JVM.

122
00:09:40,590 --> 00:09:41,640
So I'll click on that.

123
00:09:41,640 --> 00:09:50,060
I'm going to accept all the defaults and the ID will add Katlin into this project and we now have Cartland

124
00:09:50,080 --> 00:09:51,980
configured and we're ready to go.

125
00:09:51,980 --> 00:09:52,250
All right.

126
00:09:52,250 --> 00:09:58,580
So the first thing I'm going to do is I'm going to add to the employee class that we had in Java but

127
00:09:58,580 --> 00:10:04,990
I'm not going to include the salary last three years field in the in the Koplin version so I'm going

128
00:10:05,000 --> 00:10:15,410
to say class employee raúl first name in that string file last name is a string and vowels start.

129
00:10:15,610 --> 00:10:17,300
And that's it.

130
00:10:18,140 --> 00:10:20,760
And then I'm going to add a top level function.

131
00:10:20,800 --> 00:10:26,780
I should mention here that the there's a starter project that will have all this code typed in for you

132
00:10:26,780 --> 00:10:31,460
so you can type along with me if you want to reinforce the concept so you can just download the starter

133
00:10:31,460 --> 00:10:32,440
project.

134
00:10:32,480 --> 00:10:37,500
So I'm going to add a top level function called Say hello to Java.

135
00:10:37,580 --> 00:10:46,790
It's going to take a name that's a string and all it's going to do is print line Portlands says hello

136
00:10:46,790 --> 00:10:50,350
to Java and name.

137
00:10:50,630 --> 00:10:55,750
And now I want to add an object class and I'm going to call the object challenge.

138
00:10:56,360 --> 00:11:04,960
And this is just going to have a function called do math that takes two parameters X in line.

139
00:11:06,590 --> 00:11:19,030
And all this does is adds x x and y and then multiply that by X minus Y minus Y.

140
00:11:19,160 --> 00:11:23,670
And finally I'm going to add a function to the Employee class.

141
00:11:23,750 --> 00:11:28,830
So we'll do that down here in a safe fun takes default.

142
00:11:28,880 --> 00:11:37,360
And this is going to accept a parm one which is a string and Part Two Part 2 which is a string.

143
00:11:37,370 --> 00:11:41,010
But this will have a default value of default.

144
00:11:41,720 --> 00:11:44,480
And then inside the function it's going to print line.

145
00:11:44,480 --> 00:11:46,600
Actually I need to double quotes here.

146
00:11:46,900 --> 00:11:50,460
Form One and Part Two.

147
00:11:50,870 --> 00:11:51,320
OK.

148
00:11:51,320 --> 00:11:56,680
So let's pop over to our java file now and in our main method.

149
00:11:56,780 --> 00:11:57,990
Let's write some code.

150
00:11:58,160 --> 00:12:03,020
So I'm going to say Katlin stuff.

151
00:12:03,020 --> 00:12:03,970
Daut.

152
00:12:04,160 --> 00:12:08,190
Say hello to Java and I'm going to pass the name student.

153
00:12:08,210 --> 00:12:12,350
You can pass your own name if you want semi-colon.

154
00:12:12,380 --> 00:12:17,810
When I say employee employee equals new employee

155
00:12:20,150 --> 00:12:25,940
John Smith and he started in 2010

156
00:12:28,820 --> 00:12:41,090
and then I'm going to say employee start your equals 2009 let's say when whoever typed in John made

157
00:12:41,090 --> 00:12:41,690
a mistake.

158
00:12:41,720 --> 00:12:51,050
So we need to update the start you're going to say Challenge don't do math you math 5 and four

159
00:12:54,370 --> 00:12:59,380
and I'm going to say employee got takes default and I'm going to pass it.

160
00:12:59,380 --> 00:13:04,290
Our big one now as you can see there are quite a number of problems in here.

161
00:13:04,340 --> 00:13:10,220
And your mission if you decide to accept it is to make this code compile.

162
00:13:10,220 --> 00:13:15,680
Now there are two ways you could do this or you could do something in the Katlin file to make all this

163
00:13:15,680 --> 00:13:22,730
code compile or for most of the cases you could update the Java code you could change the Java code.

164
00:13:22,730 --> 00:13:27,140
I want you to only change the Cartland file.

165
00:13:27,140 --> 00:13:32,680
So make all this code compile without changing it.

166
00:13:32,720 --> 00:13:36,990
You should only have to make changes to the Cartland code file.

167
00:13:37,010 --> 00:13:41,080
So good luck with that and I'll see you in of it.

168
00:13:41,090 --> 00:13:44,200
All right welcome back so lets go through these one by one.

169
00:13:44,200 --> 00:13:46,490
So the first one Cartland stuff.

170
00:13:46,490 --> 00:13:47,480
Say hello to Java.

171
00:13:47,510 --> 00:13:53,330
Well the compiler is telling us it can't find a class called Cartland stuff and that's because when

172
00:13:53,330 --> 00:14:00,110
the CANTLIN compiler generates a static class for all the top level items it will call that class the

173
00:14:00,110 --> 00:14:02,000
same name as a Cottman file.

174
00:14:02,000 --> 00:14:08,350
So in this case the class will be called Cartland code Caity but we want to refer to that classes as

175
00:14:08,580 --> 00:14:09,240
stuff.

176
00:14:09,380 --> 00:14:16,040
So what we need to do is we need to tell the Cartland compiler that when it generates the static class

177
00:14:16,400 --> 00:14:23,780
to call it Courtland's stuff rather than Cartland code Katie and the way we do that is by using the

178
00:14:24,110 --> 00:14:27,080
JVM name annotation So let's add that.

179
00:14:27,080 --> 00:14:36,770
And remember this goes above the package so we'll say X-File JVM name and we want to call this Koplin

180
00:14:36,770 --> 00:14:38,150
stuff.

181
00:14:38,180 --> 00:14:43,950
So now what this will do is it will tell the compiler that when it generates a static class for the

182
00:14:43,950 --> 00:14:50,850
top level items to call it Cartland stuff and if we go back to our Java file we've now fixed the first

183
00:14:50,850 --> 00:14:54,490
problem and you'll see that an import has been added up here as well.

184
00:14:54,510 --> 00:14:56,160
OK so that's one down.

185
00:14:56,160 --> 00:15:04,740
So our next problem is it's telling us that Star has private access in Academie don't learn programming

186
00:15:04,740 --> 00:15:10,220
Katlin cocotte employees so let's go ahead and look at what's going on here.

187
00:15:10,320 --> 00:15:16,440
First of all we have two problems because right now the star year is a vowel and so we need to change

188
00:15:16,440 --> 00:15:21,130
that to a VAR but we'll see that that still doesn't fix the problem.

189
00:15:21,210 --> 00:15:28,110
And the reason for that is we have to tell the CANTLIN compiler that we want this property to be able

190
00:15:28,110 --> 00:15:33,570
to be accessed from Java using the dot notation like we're doing here.

191
00:15:33,570 --> 00:15:38,980
So the way that we do that is we use the at JVM field annotation.

192
00:15:39,000 --> 00:15:47,610
So let's go ahead and say that JVM field and if we head back to main That's our second problem taking

193
00:15:47,610 --> 00:15:48,350
care of.

194
00:15:48,520 --> 00:15:55,410
So our third problem is that it's saying a non-static method cannot be referenced first from a static

195
00:15:55,410 --> 00:15:56,010
context.

196
00:15:56,010 --> 00:16:02,940
No what's happening here is at the moment the hotlink compiler is only generating an instance method

197
00:16:03,090 --> 00:16:04,140
for do math.

198
00:16:04,230 --> 00:16:07,050
It's not generating a static method.

199
00:16:07,110 --> 00:16:13,440
So we're saying that we want to access this method in a static way so in order to force the Codling

200
00:16:13,440 --> 00:16:23,290
compiler to generate a static version of this method we have to annotate this with the JVM static annotation.

201
00:16:23,460 --> 00:16:26,430
Do that G B and static.

202
00:16:26,820 --> 00:16:30,520
And now if we come back to our file we fix that problem.

203
00:16:30,540 --> 00:16:36,840
So now what will happen is when we add this annotation the Cartland compiler will generate both a static

204
00:16:36,930 --> 00:16:40,310
and an instance version of this method.

205
00:16:40,320 --> 00:16:45,260
So now we're calling the static version of Do mass which is what we wanted.

206
00:16:45,270 --> 00:16:51,510
All right so our final problem is we have an error here and we have an error because the compiler is

207
00:16:51,510 --> 00:16:58,800
looking for a method that takes two strings but our Takes default method and Katlin has a default value

208
00:16:58,800 --> 00:17:00,000
for the second parameter.

209
00:17:00,000 --> 00:17:02,250
The second parameter is optional.

210
00:17:02,340 --> 00:17:04,750
So how can we make it optional in Java.

211
00:17:04,770 --> 00:17:14,340
Well when you have optional parameters in Katlin the Cartland compiler only generates one method under

212
00:17:14,340 --> 00:17:18,080
the covers and that method has both parameters.

213
00:17:18,090 --> 00:17:25,920
It requires both parameters and we don't want that we want a method that will just take the one parameter

214
00:17:25,960 --> 00:17:32,430
and in order to make the Cartland compiler generate all possible versions of the method we have to use

215
00:17:32,430 --> 00:17:38,140
the at JVM overloads annotations so let's do that.

216
00:17:38,140 --> 00:17:44,260
And so now we're saying to the compiler don't just generate a Takes default method that requires part

217
00:17:44,260 --> 00:17:50,900
1 and part to generate one that takes both and generate one that just takes part one.

218
00:17:50,960 --> 00:17:55,560
If we go back to our file we've now fixed all our problems.

219
00:17:55,680 --> 00:18:01,060
So that's wonderful we manage to fix all our problems without touching this code which was a challenge.

220
00:18:01,230 --> 00:18:08,090
But as I said you could have done it by making changes to the Java code when I'm going to do is I'm

221
00:18:08,100 --> 00:18:10,830
going to control C

222
00:18:13,440 --> 00:18:15,900
control the to copy all of this.

223
00:18:15,900 --> 00:18:25,860
I'm going to comment this out and now what I want you to do is you want to do the same thing in here

224
00:18:26,560 --> 00:18:33,340
you make copies of everything that we did small comment that out and

225
00:18:37,520 --> 00:18:45,960
you go to the end here you'll like that and I'll comment this one out and I'll do the same thing here.

226
00:18:51,660 --> 00:18:58,560
Comment that one out and I'm going to comment this out as well I guess I commented out the wrong one

227
00:18:58,560 --> 00:18:59,430
for some of these

228
00:19:03,810 --> 00:19:09,170
because when I want you to do if you haven't guessed isn't going to want you to fix it in the Java code

229
00:19:09,200 --> 00:19:09,600
now.

230
00:19:09,620 --> 00:19:16,080
So I'll take out that I'll take this out and I'll take this out.

231
00:19:16,160 --> 00:19:20,870
And then we should be back to the situation of nothing compiling and we are.

232
00:19:20,900 --> 00:19:24,350
So what I want you to do now is I want you to fix this.

233
00:19:24,530 --> 00:19:26,710
Just touching the Java code.

234
00:19:27,170 --> 00:19:33,460
So don't touch the Katlin code and I'm not going to be mean.

235
00:19:33,470 --> 00:19:37,910
I'm actually going to comment this one out because there is no way for you to fix this one in a Java

236
00:19:37,910 --> 00:19:38,810
code.

237
00:19:38,810 --> 00:19:45,450
This is the one case where you can only fix it in the Cartland code by using the JVM overloads.

238
00:19:45,650 --> 00:19:53,500
So I'll actually remove these guys remove that one and just put it back to what it was.

239
00:19:53,570 --> 00:20:01,030
So fix these three just by changing the Java code give that a try and I'll see you in a bit.

240
00:20:02,150 --> 00:20:03,280
OK welcome back.

241
00:20:03,290 --> 00:20:09,620
Well to fix this one as I mentioned when we went over the other solution the Cartland compiler is going

242
00:20:09,620 --> 00:20:13,970
to be generating a class called Cartland code Caity.

243
00:20:14,120 --> 00:20:21,380
So we're going to use that filename Koplin code and you can see it suggested to us.

244
00:20:21,380 --> 00:20:22,310
So there we go.

245
00:20:22,310 --> 00:20:25,510
We fix that one to fix this one.

246
00:20:25,610 --> 00:20:28,050
It's already Vark because we want it back.

247
00:20:28,080 --> 00:20:34,460
I didn't want to change this code but we can just then call the set method and we can just say employee

248
00:20:34,460 --> 00:20:37,120
Daut set start year.

249
00:20:37,130 --> 00:20:39,960
And what did I say 20 2009.

250
00:20:40,040 --> 00:20:43,300
Well whatever I said so that fixes that one.

251
00:20:43,400 --> 00:20:47,220
And for this one this isn't really a fix.

252
00:20:47,240 --> 00:20:49,750
You can't call this statically.

253
00:20:49,760 --> 00:20:55,700
But I wanted to leave this one in because you can call the instance method and you can do that by using

254
00:20:55,700 --> 00:20:57,730
the instance Daut.

255
00:20:57,740 --> 00:21:01,290
Now depending on what this method is doing you might not want to do that.

256
00:21:01,370 --> 00:21:04,730
In our case it's fine because all it's doing is a calculation.

257
00:21:04,730 --> 00:21:11,720
But if this function was referencing a static property let's say and accumulating a value every time

258
00:21:11,720 --> 00:21:17,600
you called it then you would not want to be calling the instance version you'd want to be calling the

259
00:21:17,840 --> 00:21:19,240
static version.

260
00:21:19,460 --> 00:21:24,210
So there is no fix in the Java code to calling the static version.

261
00:21:24,230 --> 00:21:28,000
If you don't have this JVM static then you're not going to.

262
00:21:28,040 --> 00:21:31,130
There is no static version of the method that's going to be generated.

263
00:21:31,130 --> 00:21:33,320
So you're not going to be able to call it.

264
00:21:33,800 --> 00:21:38,160
But if you don't mind calling the instance method then you can just use instance.

265
00:21:38,180 --> 00:21:43,470
Now we have an error here because now the Cartland stuff import is invalid.

266
00:21:43,610 --> 00:21:49,440
So I'll just comment that out but otherwise everything's fine and let's try running the main method

267
00:21:52,430 --> 00:21:57,290
and we get Cartland says hello to Java and student because that's the only thing that's actually printing

268
00:21:57,290 --> 00:21:58,460
anything here.

269
00:21:58,520 --> 00:22:03,440
So I guess it's up to you how you want to resolve some of these things when you're calling call in from

270
00:22:03,440 --> 00:22:09,290
Java you might want to use a set methods and get methods if the rest of your code that's referencing

271
00:22:09,290 --> 00:22:12,070
Java classes let's say is using Santon get.

272
00:22:12,230 --> 00:22:17,750
And if you don't care what the name of the cotland class is you can just go ahead and keep it as the

273
00:22:18,020 --> 00:22:20,840
default name that the compiler is going to generate.

274
00:22:20,870 --> 00:22:26,170
And as I said this one you have to think about it it's going to depend what the function is doing.

275
00:22:26,240 --> 00:22:30,400
So there were two ways we could have fixed most of these.

276
00:22:30,530 --> 00:22:34,630
Only one way for this one and for this one it would depend on what you were doing.

277
00:22:34,790 --> 00:22:39,890
There wouldn't be a fix if you wanted to access it statically if you did want to access it statically.

278
00:22:39,890 --> 00:22:43,840
You'd have to do that by adding the JVM static.

279
00:22:43,880 --> 00:22:47,030
Now one more challenge for you.

280
00:22:47,030 --> 00:22:55,130
For this function here if you wanted Koplin to throw an illegal argument exception whenever null was

281
00:22:55,130 --> 00:22:58,700
passed for parm one what would you have to do.

282
00:22:58,850 --> 00:23:03,560
So positivity you and think about that for a minute what would you have to do if you wanted Cartland

283
00:23:03,560 --> 00:23:06,590
to throw an illegal argument exception.

284
00:23:06,710 --> 00:23:14,140
If Java calls takes default and passes a null for one paused the video and gives some thought to that

285
00:23:16,630 --> 00:23:17,730
OK welcome back.

286
00:23:17,740 --> 00:23:19,470
Well the answer is nothing.

287
00:23:19,480 --> 00:23:24,910
You don't have to do anything because string is a non nullable type.

288
00:23:24,910 --> 00:23:28,330
You've already told the Cartland compiler that you don't expect now.

289
00:23:28,510 --> 00:23:35,170
And so if we call it from Java and we pass and all the compiler will already be generating the checks

290
00:23:35,170 --> 00:23:44,050
that it does to make sure that this isn't null so let's give that a shot will say employee dot takes

291
00:23:44,050 --> 00:23:44,840
default.

292
00:23:44,850 --> 00:23:50,310
And because I don't think does this version have JVM overloads us so we can just pass.

293
00:23:50,320 --> 00:23:56,000
No it isn't and that will compile but what will happen when we run.

294
00:23:56,000 --> 00:23:57,100
Let's give it a try.

295
00:23:59,420 --> 00:24:05,040
And boom we get the illegal argument exception parameters specified as non-null.

296
00:24:05,210 --> 00:24:10,180
And you'll notice that we get that online 20s so we get it as soon as we call the method.

297
00:24:10,190 --> 00:24:15,260
We don't actually have to reference it if I comment this line outs and how this parameter isn't being

298
00:24:15,260 --> 00:24:16,540
referenced at all.

299
00:24:16,760 --> 00:24:23,840
And I run again we're going to get the same thing happen because what happens under the covers is when

300
00:24:23,840 --> 00:24:29,330
this function is entered the compiler generates a check to make sure that this isn't Knol and if it

301
00:24:29,330 --> 00:24:31,190
is it throws the exception.

302
00:24:31,190 --> 00:24:39,540
Now if I had a question mark here to make this nullable and we we run we won't see the exception.

303
00:24:39,740 --> 00:24:47,960
And if I can comment this out and run again we'll see that we get null and default printed.

304
00:24:48,180 --> 00:24:54,000
So you don't have to do anything special if you want Katlin to protect against Nalls when there's not

305
00:24:54,000 --> 00:24:57,020
supposed to be an all when you're calling from Java.

306
00:24:57,270 --> 00:25:02,820
If you're using non nullable types you're going to get the usual protection and that's it for this section.

307
00:25:02,820 --> 00:25:04,630
I'll see you in the next one.
