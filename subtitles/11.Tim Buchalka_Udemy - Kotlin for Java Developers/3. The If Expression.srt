1
1

00:00:04,710  -->  00:00:07,049
In this video, we're going to take a look
2

2

00:00:07,049  -->  00:00:11,789
at the if statement. Now, I could also say
3

3

00:00:11,789  -->  00:00:13,250
we're going to take a look at the if
4

4

00:00:13,250  -->  00:00:16,980
expression, because in Kotlin if can
5

5

00:00:16,980  -->  00:00:20,130
evaluate to a value, so that's the big
6

6

00:00:20,130  -->  00:00:22,080
change in Kotlin, the big difference
7

7

00:00:22,080  -->  00:00:25,650
between the if in Java and the if in
8

8

00:00:25,650  -->  00:00:29,550
Kotlin, but otherwise the if statement or
9

9

00:00:29,550  -->  00:00:31,110
expression depending on whether it's
10

10

00:00:31,110  -->  00:00:33,420
returning a value or not is pretty much
11

11

00:00:33,420  -->  00:00:35,340
the same as it is in Java, so this is
12

12

00:00:35,340  -->  00:00:37,980
going to be a shortish video. Now I
13

13

00:00:37,980  -->  00:00:39,870
mentioned when we went over quick
14

14

00:00:39,870  -->  00:00:42,480
differences between Kotlin and Java that
15

15

00:00:42,480  -->  00:00:45,000
the ternary operator doesn't exist in
16

16

00:00:45,000  -->  00:00:47,940
Kotlin. And now maybe we can understand
17

17

00:00:47,940  -->  00:00:50,910
why, because the if statement can return
18

18

00:00:50,910  -->  00:00:52,890
a value in which case it would be an
19

19

00:00:52,890  -->  00:00:55,380
expression, we don't need the ternary
20

20

00:00:55,380  -->  00:00:57,750
operator because the if can act as a
21

21

00:00:57,750  -->  00:00:59,850
ternary operator, it can do the same
22

22

00:00:59,850  -->  00:01:03,120
thing. However this is probably perhaps
23

23

00:01:03,120  -->  00:01:05,939
you know one of the few instances when
24

24

00:01:05,939  -->  00:01:09,270
Kotlin can be more verbose than Java.
25

25

00:01:09,270  -->  00:01:10,799
So let's take a look at an example I've
26

26

00:01:10,799  -->  00:01:13,049
already created a project and the usual
27

27

00:01:13,049  -->  00:01:14,460
package and everything else, so we'll
28

28

00:01:14,460  -->  00:01:15,869
just jump straight into the main
29

29

00:01:15,869  -->  00:01:19,909
function here and let's say we have var,
30

30

00:01:19,909  -->  00:01:26,880
num, int and then we'll say if some
31

31

00:01:26,880  -->  00:01:30,979
condition and we don't know what that is,
32

32

00:01:30,979  -->  00:01:33,570
this won't compile but we'll save some
33

33

00:01:33,570  -->  00:01:40,229
condition num equals 50, otherwise num
34

34

00:01:40,229  -->  00:01:45,900
equals let's say 592. So in Java we could
35

35

00:01:45,900  -->  00:01:47,909
write the following, we could say num
36

36

00:01:47,909  -->  00:01:50,700
equals and then we have some condition
37

37

00:01:50,700  -->  00:01:55,920
question mark 50, otherwise 592 and
38

38

00:01:55,920  -->  00:01:58,320
that's pretty concise and that's using
39

39

00:01:58,320  -->  00:02:00,869
the ternary operator. Now we can be more
40

40

00:02:00,869  -->  00:02:02,759
concise in Kotlin as well, I've written
41

41

00:02:02,759  -->  00:02:05,220
this out to be rather verbose instead of
42

42

00:02:05,220  -->  00:02:07,670
writing it out like this, we could say
43

43

00:02:07,670  -->  00:02:15,980
val num equals if some condition 50 else
44

44

00:02:15,980  -->  00:02:18,420
592 and this would
45

45

00:02:18,420  -->  00:02:21,180
actually work. So what I'm going to do is
46

46

00:02:21,180  -->  00:02:22,830
I'm going to comment out all this stuff,
47

47

00:02:22,830  -->  00:02:25,620
I want to show you that this will
48

48

00:02:25,620  -->  00:02:27,330
actually work, so I'm going to go val
49

49

00:02:27,330  -->  00:02:31,500
some condition equals, I don't know let's
50

50

00:02:31,500  -->  00:02:35,970
say 69 is less than 22, this is a really
51

51

00:02:35,970  -->  00:02:37,590
dumb example, but I want this to be able
52

52

00:02:37,590  -->  00:02:39,870
to compile so that you see that yes
53

53

00:02:39,870  -->  00:02:42,090
indeed we don't get any errors. So this
54

54

00:02:42,090  -->  00:02:44,040
would be the equivalent of the ternary
55

55

00:02:44,040  -->  00:02:45,840
operator. As you can see, it's a little
56

56

00:02:45,840  -->  00:02:48,120
bit more verbose than what we would
57

57

00:02:48,120  -->  00:02:49,800
write in Java, but not you know
58

58

00:02:49,800  -->  00:02:52,500
excessively verbose, but this is why we
59

59

00:02:52,500  -->  00:02:54,209
don't have the ternary operator in
60

60

00:02:54,209  -->  00:02:56,989
Kotlin, because the if can now evaluate
61

61

00:02:56,989  -->  00:03:00,750
to a value, we can just write this.
62

62

00:03:00,750  -->  00:03:02,519
Now what if you want to do more with the if
63

63

00:03:02,519  -->  00:03:04,470
or else block? Well, that's fine as long
64

64

00:03:04,470  -->  00:03:07,140
as the last statement in each block is
65

65

00:03:07,140  -->  00:03:09,900
the return value, if you want one.
66

66

00:03:09,900  -->  00:03:12,450
You don't have to have the if return a value,
67

67

00:03:12,450  -->  00:03:14,880
we can still use the if as usual, you
68

68

00:03:14,880  -->  00:03:19,880
know if some condition, print line
69

69

00:03:19,880  -->  00:03:25,549
something else we move this up here
70

70

00:03:25,549  -->  00:03:30,329
print line something else. So you can
71

71

00:03:30,329  -->  00:03:32,370
have an if statement that doesn't return
72

72

00:03:32,370  -->  00:03:34,049
anything, but if you wanted an if
73

73

00:03:34,049  -->  00:03:36,209
statement that's an expression that does
74

74

00:03:36,209  -->  00:03:38,100
return something and you want to do more
75

75

00:03:38,100  -->  00:03:39,959
than one thing in the effort else block
76

76

00:03:39,959  -->  00:03:41,519
you can do the following, I'm going to
77

77

00:03:41,519  -->  00:03:44,790
comment this out and I'm going to say if
78

78

00:03:44,790  -->  00:03:47,340
some condition then we're going to print
79

79

00:03:47,340  -->  00:03:50,790
line something and then we're going to
80

80

00:03:50,790  -->  00:03:54,739
return the value what did we have 50 and
81

81

00:03:54,739  -->  00:03:57,570
if it's some condition isn't met then
82

82

00:03:57,570  -->  00:03:59,579
we're going to print something else and
83

83

00:03:59,579  -->  00:04:02,850
we're going to return the value 592 and
84

84

00:04:02,850  -->  00:04:07,940
that would work. If I said val num2
85

85

00:04:07,940  -->  00:04:11,910
equals and then here I'm going to print
86

86

00:04:11,910  -->  00:04:16,049
line num2. When we run, we should see in
87

87

00:04:16,049  -->  00:04:18,600
this case, we're going to see 592 printed
88

88

00:04:18,600  -->  00:04:21,060
because our condition is 69 less than 22.
89

89

00:04:21,060  -->  00:04:26,870
So let's go ahead and try running that
90

90

00:04:26,870  -->  00:04:31,920
and we'll get 592 and something else printed.
91

91

00:04:31,920  -->  00:04:35,970
So, when you want the if statement which
92

92

00:04:35,970  -->  00:04:37,620
would make it an expression to return a
93

93

00:04:37,620  -->  00:04:39,570
value, when it returns a value it's an
94

94

00:04:39,570  -->  00:04:43,230
expression, you put the return value as
95

95

00:04:43,230  -->  00:04:48,210
the last statement in each block or you
96

96

00:04:48,210  -->  00:04:50,370
can do something like we did up here.
97

97

00:04:50,370  -->  00:04:53,130
If all you want to do in the if and else
98

98

00:04:53,130  -->  00:04:56,340
case is return a value. So let's go back
99

99

00:04:56,340  -->  00:04:59,430
to this if statement and let's try to
100

100

00:04:59,430  -->  00:05:01,410
remove the else block and see what
101

101

00:05:01,410  -->  00:05:03,420
happens, so I'm just going to comment it out
102

102

00:05:03,420  -->  00:05:07,290
and right away we see errors and the
103

103

00:05:07,290  -->  00:05:09,660
error says if must have both main and
104

104

00:05:09,660  -->  00:05:12,720
else branches, if use is an expression
105

105

00:05:12,720  -->  00:05:15,330
and you can understand why that is,
106

106

00:05:15,330  -->  00:05:18,810
I mean if we do- we want to use it as an
107

107

00:05:18,810  -->  00:05:20,340
expression, we want to assign it to
108

108

00:05:20,340  -->  00:05:22,740
something or even if we don't and the
109

109

00:05:22,740  -->  00:05:24,330
condition isn't met, then what would we
110

110

00:05:24,330  -->  00:05:26,550
assign to num2? There's nothing to
111

111

00:05:26,550  -->  00:05:29,670
assign to num2. So when you want to use
112

112

00:05:29,670  -->  00:05:31,290
the if as an expression, you have to
113

113

00:05:31,290  -->  00:05:34,440
provide both an if and an else there has
114

114

00:05:34,440  -->  00:05:37,830
to be some value, you need both branches.
115

115

00:05:37,830  -->  00:05:41,430
Now if you're just using if as a regular
116

116

00:05:41,430  -->  00:05:43,410
old if, you don't have to do that. I was
117

117

00:05:43,410  -->  00:05:45,150
looking to see if I have one and I don't
118

118

00:05:45,150  -->  00:05:49,470
think I do, let me uncomment this and I'm
119

119

00:05:49,470  -->  00:05:56,340
going to just copy and paste it and
120

120

00:05:56,340  -->  00:05:58,080
we'll take this out so we're not
121

121

00:05:58,080  -->  00:06:00,660
assigning it to anything and we'll
122

122

00:06:00,660  -->  00:06:04,760
remove these guys, so we're not
123

123

00:06:04,760  -->  00:06:07,530
evaluating the if to a value and then
124

124

00:06:07,530  -->  00:06:09,150
we'll comment out the else and in this
125

125

00:06:09,150  -->  00:06:11,820
case, we don't get an error because it
126

126

00:06:11,820  -->  00:06:14,160
doesn't matter if the- if there's no else.
127

127

00:06:14,160  -->  00:06:16,230
This isn't evaluating to anything so
128

128

00:06:16,230  -->  00:06:18,540
it's fine to just go ahead and just have
129

129

00:06:18,540  -->  00:06:21,360
an if branch. Now because if is an
130

130

00:06:21,360  -->  00:06:23,760
expression, we can use it anywhere you
131

131

00:06:23,760  -->  00:06:26,040
could use a value for example instead of
132

132

00:06:26,040  -->  00:06:29,640
assigning this to num2 and then printing
133

133

00:06:29,640  -->  00:06:33,900
it like I'm doing down here we can just
134

134

00:06:33,900  -->  00:06:38,360
print it. So I can just say print line
135

135

00:06:38,360  -->  00:06:41,520
and I'll print the if statement because
136

136

00:06:41,520  -->  00:06:43,710
this now or expression rather because
137

137

00:06:43,710  -->  00:06:45,810
this now evaluates to a
138

138

00:06:45,810  -->  00:06:50,040
value. So let's run. And we'll see the
139

139

00:06:50,040  -->  00:06:53,580
exact same thing we saw before, 592.
140

140

00:06:53,580  -->  00:06:55,680
We can use it in a string template if we
141

141

00:06:55,680  -->  00:07:01,650
want, so I can say the result of the if
142

142

00:07:01,650  -->  00:07:06,980
expression is and dollar sign open up
143

143

00:07:06,980  -->  00:07:09,300
curly braces, I'll have to add a curly
144

144

00:07:09,300  -->  00:07:13,100
brace down here and add a closing quote
145

145

00:07:13,100  -->  00:07:19,290
and we'll run and we'll get the result
146

146

00:07:19,290  -->  00:07:22,350
of the if expression is 592. Sow notice
147

147

00:07:22,350  -->  00:07:24,510
that we're nesting curly braces here and
148

148

00:07:24,510  -->  00:07:26,580
the compiler isn't getting confused, just
149

149

00:07:26,580  -->  00:07:28,500
like it doesn't get confused any other
150

150

00:07:28,500  -->  00:07:30,570
place that you nest curly braces,
151

151

00:07:30,570  -->  00:07:32,610
so that's not a problem, so if we went up
152

152

00:07:32,610  -->  00:07:34,500
here and we said instead let's change
153

153

00:07:34,500  -->  00:07:37,650
this to 20. Now we should see our if
154

154

00:07:37,650  -->  00:07:40,560
branch executed and we should see 50 as
155

155

00:07:40,560  -->  00:07:46,590
a result. And we do, and we see something
156

156

00:07:46,590  -->  00:07:48,389
printed now, rather than something else.
157

157

00:07:48,389  -->  00:07:50,610
And we're also seeing something printed
158

158

00:07:50,610  -->  00:07:53,729
from one of our other conditions down
159

159

00:07:53,729  -->  00:07:56,250
here now, so we're seeing two some things
160

160

00:07:56,250  -->  00:07:58,229
now because some condition is passing
161

161

00:07:58,229  -->  00:08:02,100
here as well, so basically because if can
162

162

00:08:02,100  -->  00:08:04,440
be an expression, we can use it as I said
163

163

00:08:04,440  -->  00:08:07,050
wherever an expression can be used.
164

164

00:08:07,050  -->  00:08:09,210
So, you know we can assign it to a variable,
165

165

00:08:09,210  -->  00:08:11,640
we can pass it to a function as we're
166

166

00:08:11,640  -->  00:08:13,680
doing with print line or we were doing
167

167

00:08:13,680  -->  00:08:15,360
with print line before we change this to
168

168

00:08:15,360  -->  00:08:18,960
a string template. So essentially when
169

169

00:08:18,960  -->  00:08:21,810
you write an if statement so that it is
170

170

00:08:21,810  -->  00:08:23,910
actually an if expression because it
171

171

00:08:23,910  -->  00:08:26,039
evaluates to a value, you can use it
172

172

00:08:26,039  -->  00:08:27,990
wherever you would use a value, but you
173

173

00:08:27,990  -->  00:08:30,150
don't have to use it as an expression,
174

174

00:08:30,150  -->  00:08:31,979
you can use it just like you normally
175

175

00:08:31,979  -->  00:08:33,570
have, just like we do down here,
176

176

00:08:33,570  -->  00:08:36,330
we're not setting a value at all we're
177

177

00:08:36,330  -->  00:08:38,520
just saying that you know, if the
178

178

00:08:38,520  -->  00:08:40,409
condition is met do something and we
179

179

00:08:40,409  -->  00:08:42,180
don't need this to evaluate to a value.
180

180

00:08:42,180  -->  00:08:44,670
Now, could we assign this to a variable?
181

181

00:08:44,670  -->  00:08:49,589
Let's give it a shot. We won't be able to
182

182

00:08:49,589  -->  00:08:51,720
actually in this case because I don't
183

183

00:08:51,720  -->  00:08:53,100
think because we don't have an if so
184

184

00:08:53,100  -->  00:08:55,380
we'll go val x equals and I'll say no,
185

185

00:08:55,380  -->  00:08:57,360
you don't- sorry we don't have an else so
186

186

00:08:57,360  -->  00:09:00,360
it'll say no, so let's add an else
187

187

00:09:00,360  -->  00:09:04,210
print line something else and we'll see
188

188

00:09:04,210  -->  00:09:06,400
that this works. So what type do you
189

189

00:09:06,400  -->  00:09:08,650
think X would be? It's probably going to
190

190

00:09:08,650  -->  00:09:10,810
be unit. Do you think it'll be unit?
191

191

00:09:10,810  -->  00:09:13,029
Because unit basically means nothing, right?
192

192

00:09:13,029  -->  00:09:16,750
So let's print out the type of X, print X
193

193

00:09:16,750  -->  00:09:20,890
dot Java class, that will give us the
194

194

00:09:20,890  -->  00:09:27,100
class. Let's run. And indeed we'll see
195

195

00:09:27,100  -->  00:09:29,320
that in this case, the type of X is the
196

196

00:09:29,320  -->  00:09:31,150
unit, so the compiler knows this isn't
197

197

00:09:31,150  -->  00:09:33,910
going to return anything, so X gets the
198

198

00:09:33,910  -->  00:09:36,160
value of unit, there wouldn't be any use
199

199

00:09:36,160  -->  00:09:39,250
doing this, but I just wanted to show you
200

200

00:09:39,250  -->  00:09:42,460
that you can do it and that the value
201

201

00:09:42,460  -->  00:09:44,650
that's returned from this if expression
202

202

00:09:44,650  -->  00:09:47,890
is essentially unit. Okay that's it for
203

203

00:09:47,890  -->  00:09:50,260
this statement and expression.
204

204

00:09:50,260  -->  00:09:53,010
I'll see you in the next video.
