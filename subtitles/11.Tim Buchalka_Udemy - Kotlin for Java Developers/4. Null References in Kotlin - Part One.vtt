WEBVTT
1
1

00:00:00.224  -->  00:00:02.600
(gentle electronic music)
2

2

00:00:02.600  -->  00:00:05.100
(keyboard typing)
3

3

00:00:05.100  -->  00:00:05.933
<v Sarah>You might have heard</v>
4

4

00:00:05.933  -->  00:00:08.800
that there are no null pointer exceptions in Kotlin,
5

5

00:00:08.800  -->  00:00:12.810
but that's not entirely true, as you'll see shortly.
6

6

00:00:12.810  -->  00:00:16.270
However, Kotlin has been designed to make it difficult
7

7

00:00:16.270  -->  00:00:18.170
to get a null pointer exception,
8

8

00:00:18.170  -->  00:00:21.310
you pretty much have to go out of your way to get one.
9

9

00:00:21.310  -->  00:00:22.790
Now I've already created
10

10

00:00:22.790  -->  00:00:26.250
a new Kotlin project called NullReferences,
11

11

00:00:26.250  -->  00:00:28.780
and I've added the usual package to it,
12

12

00:00:28.780  -->  00:00:31.810
academy.learnprogramming.nullreferences,
13

13

00:00:31.810  -->  00:00:35.150
and then I've added a file called NullReferences,
14

14

00:00:35.150  -->  00:00:37.510
and all I'll do in addition to that
15

15

00:00:37.510  -->  00:00:41.210
is add the main function as we usually do.
16

16

00:00:41.210  -->  00:00:44.290
Now I've also created a
17

17

00:00:44.290  -->  00:00:49.050
academy.learnprogramming.javacode package,
18

18

00:00:49.050  -->  00:00:52.610
and I've added a NullReferences.java file to it
19

19

00:00:52.610  -->  00:00:55.990
that just contains a class called NullReferences
20

20

00:00:55.990  -->  00:00:58.603
and an empty main method.
21

21

00:00:59.440  -->  00:01:02.830
Now in Java, we can assign a null to a variable.
22

22

00:01:02.830  -->  00:01:07.640
We can do the following, String str = null,
23

23

00:01:07.640  -->  00:01:10.060
and we don't get any errors, that's perfectly fine.
24

24

00:01:10.060  -->  00:01:12.923
However, if we were to now do the following,
25

25

00:01:14.710  -->  00:01:16.083
and then we were to run,
26

26

00:01:17.950  -->  00:01:20.250
I'm sure you can guess what's going to happen.
27

27

00:01:22.640  -->  00:01:27.370
We get the dreaded java.lang.NullPointerException.
28

28

00:01:27.370  -->  00:01:29.310
So let's go back to the Kotlin file
29

29

00:01:29.310  -->  00:01:32.063
and let's do the same thing we just did in Java.
30

30

00:01:33.630  -->  00:01:37.420
So we'll say str, which is a String.
31

31

00:01:37.420  -->  00:01:40.350
Actually, I'll start that with val str: String,
32

32

00:01:40.350  -->  00:01:42.880
and we have to tell the compiler what type it is,
33

33

00:01:42.880  -->  00:01:44.810
because we're gonna assign null,
34

34

00:01:44.810  -->  00:01:46.483
and then we'll say = null.
35

35

00:01:47.590  -->  00:01:48.690
And we get an error,
36

36

00:01:48.690  -->  00:01:51.890
and the error is, null can not be a value
37

37

00:01:51.890  -->  00:01:54.590
of a non-null type String.
38

38

00:01:54.590  -->  00:01:55.920
So what does that mean?
39

39

00:01:55.920  -->  00:01:59.940
Well, Kotlin has the notion of nullable types.
40

40

00:01:59.940  -->  00:02:03.430
So if you want a variable to be able to contain null,
41

41

00:02:03.430  -->  00:02:06.450
you have to explicitly tell the compiler that
42

42

00:02:06.450  -->  00:02:09.623
by following the type name with a question mark, like so.
43

43

00:02:11.060  -->  00:02:13.370
And now you'll see that the error goes away.
44

44

00:02:13.370  -->  00:02:16.540
So we now have a variable that's nullable.
45

45

00:02:16.540  -->  00:02:18.960
However, what we can do with this variable
46

46

00:02:18.960  -->  00:02:20.810
is now restricted.
47

47

00:02:20.810  -->  00:02:22.720
So let's assign a different value
48

48

00:02:22.720  -->  00:02:24.810
and then call the toUpperCase function,
49

49

00:02:24.810  -->  00:02:29.810
so we'll change, instead of null we'll say this isn't null,
50

50

00:02:30.500  -->  00:02:32.300
and then we'll do what we did in Java
51

51

00:02:32.300  -->  00:02:34.233
and call the toUpperCase function.
52

52

00:02:35.610  -->  00:02:37.350
And you're gonna see that we get an error.
53

53

00:02:37.350  -->  00:02:40.630
In fact, if we delete the toUpperCase,
54

54

00:02:40.630  -->  00:02:42.220
and then we type in period
55

55

00:02:42.220  -->  00:02:44.480
and we see what IntelliJ suggests to us,
56

56

00:02:44.480  -->  00:02:46.140
we'll see that there's a whole bunch of stuff
57

57

00:02:46.140  -->  00:02:47.640
that's now greyed out.
58

58

00:02:47.640  -->  00:02:49.190
I mean we can't get the length,
59

59

00:02:50.500  -->  00:02:54.177
all these toUpperCase functions, toLowerCase,
60

60

00:02:54.177  -->  00:02:59.010
you know, LastIndex, tonnes of stuff is now greyed out,
61

61

00:02:59.010  -->  00:03:02.753
we can't use it because we're using a variable
62

62

00:03:02.753  -->  00:03:04.270
that's a nullable type.
63

63

00:03:04.270  -->  00:03:05.500
So what are we gonna do here,
64

64

00:03:05.500  -->  00:03:07.360
I mean we wanna uppercase this string
65

65

00:03:07.360  -->  00:03:08.650
and apparently we can't.
66

66

00:03:08.650  -->  00:03:11.030
Well, we can do what we do in Java,
67

67

00:03:11.030  -->  00:03:16.003
we can say if str is not equal to null,
68

68

00:03:17.740  -->  00:03:21.080
then uppercase it, and you'll see that all of a sudden
69

69

00:03:21.080  -->  00:03:24.370
everything's available to us if I go back.
70

70

00:03:24.370  -->  00:03:25.750
Everything's available to us,
71

71

00:03:25.750  -->  00:03:28.110
because we've now checked for null.
72

72

00:03:28.110  -->  00:03:30.310
So we can do that and it works.
73

73

00:03:30.310  -->  00:03:32.670
Similar to smart casting,
74

74

00:03:32.670  -->  00:03:35.330
the compiler remembers the null check.
75

75

00:03:35.330  -->  00:03:37.060
Remember when you smart cast,
76

76

00:03:37.060  -->  00:03:40.610
you actually check if an instance is something,
77

77

00:03:40.610  -->  00:03:42.760
and then if it is, you can go ahead and use it here
78

78

00:03:42.760  -->  00:03:45.280
as if it was, it's a variable of that type,
79

79

00:03:45.280  -->  00:03:47.930
because the compiler remembers that you've already
80

80

00:03:47.930  -->  00:03:51.570
verified the type, well, it's the same sort of thing here.
81

81

00:03:51.570  -->  00:03:53.940
You check whether the string isn't null
82

82

00:03:53.940  -->  00:03:56.350
and then in the following block of code,
83

83

00:03:56.350  -->  00:03:58.450
the compiler remembers that you've done the null check
84

84

00:03:58.450  -->  00:04:01.000
so then it goes ahead and lets you use it
85

85

00:04:01.000  -->  00:04:03.500
as if it's a non nullable type,
86

86

00:04:03.500  -->  00:04:06.530
even though it is a nullable type, as you can see here.
87

87

00:04:06.530  -->  00:04:07.890
But as you can imagine,
88

88

00:04:07.890  -->  00:04:09.560
the code could quickly become messy
89

89

00:04:09.560  -->  00:04:12.070
if you have to have null checks all over the place,
90

90

00:04:12.070  -->  00:04:13.170
as it does in Java.
91

91

00:04:13.170  -->  00:04:16.940
As you know in Java, often there's just tonnes of code
92

92

00:04:16.940  -->  00:04:18.830
checking for null, so it's all it's doing,
93

93

00:04:18.830  -->  00:04:22.090
'cause we don't want the dreaded null pointer exception.
94

94

00:04:22.090  -->  00:04:26.250
Kotlin obviously enforces that you do a null check,
95

95

00:04:26.250  -->  00:04:28.220
so even if you're absolutely sure
96

96

00:04:28.220  -->  00:04:31.220
that something's not gonna be null, if it can be null,
97

97

00:04:31.220  -->  00:04:32.880
and you've declared it as a nullable type,
98

98

00:04:32.880  -->  00:04:34.620
then you still have to check for null.
99

99

00:04:34.620  -->  00:04:37.590
Now because Kotlin enforces it, and because Kotlin,
100

100

00:04:37.590  -->  00:04:40.490
as we've seen many, many times at this point,
101

101

00:04:40.490  -->  00:04:42.660
aims to be concise,
102

102

00:04:42.660  -->  00:04:46.050
it has what's called the safe call operator.
103

103

00:04:46.050  -->  00:04:49.610
If we hover the cursor over this line,
104

104

00:04:49.610  -->  00:04:51.730
we'll see a suggestion from IntelliJ saying
105

105

00:04:51.730  -->  00:04:56.730
replace the if expression with a safe access expression.
106

106

00:04:56.760  -->  00:04:58.260
So what does that mean?
107

107

00:04:58.260  -->  00:05:00.000
Well it means we can do the following,
108

108

00:05:00.000  -->  00:05:03.080
instead of if string is not equal to null,
109

109

00:05:03.080  -->  00:05:06.400
then do string uppercase, we can take this out,
110

110

00:05:06.400  -->  00:05:10.640
and we can just go str?.,
111

111

00:05:10.640  -->  00:05:11.710
and then if we look here,
112

112

00:05:11.710  -->  00:05:15.070
we'll see everything's available to us.
113

113

00:05:15.070  -->  00:05:16.820
And so we'll choose toUpperCase,
114

114

00:05:16.820  -->  00:05:19.650
and that's a much more concise line of code,
115

115

00:05:19.650  -->  00:05:23.470
and that's essentially shorthand for what we just did.
116

116

00:05:23.470  -->  00:05:28.010
So with the question mark, we're saying this could be null.
117

117

00:05:28.010  -->  00:05:32.130
So generate a null check under the covers.
118

118

00:05:32.130  -->  00:05:34.380
And if that null check passes,
119

119

00:05:34.380  -->  00:05:37.210
then call the toUpperCase method.
120

120

00:05:37.210  -->  00:05:39.050
So it's essentially shorthand
121

121

00:05:39.050  -->  00:05:40.710
for the code that we just wrote
122

122

00:05:40.710  -->  00:05:43.150
that explicitly does the null check.
123

123

00:05:43.150  -->  00:05:46.550
So if you've used a question mark after the data type,
124

124

00:05:46.550  -->  00:05:50.490
then you need to use a question mark after the variable name
125

125

00:05:50.490  -->  00:05:52.330
whenever you're trying to use it,
126

126

00:05:52.330  -->  00:05:56.230
and you could get a null pointer exception if it's null.
127

127

00:05:56.230  -->  00:05:58.830
Okay, so what happens if it is null?
128

128

00:05:58.830  -->  00:06:00.470
I mean, right now we know it's not null,
129

129

00:06:00.470  -->  00:06:01.740
so this is going to run fine,
130

130

00:06:01.740  -->  00:06:03.840
but what will happen if it is null?
131

131

00:06:03.840  -->  00:06:05.110
Well, let's try it out.
132

132

00:06:05.110  -->  00:06:06.410
Let's change this to null.
133

133

00:06:08.650  -->  00:06:11.690
And then here, I'm gonna change this line of code
134

134

00:06:11.690  -->  00:06:13.353
to say, println,
135

135

00:06:15.030  -->  00:06:18.190
what happens when we do this,
136

136

00:06:18.190  -->  00:06:20.813
and we'll use a String template here,
137

137

00:06:22.690  -->  00:06:27.690
and we'll just go str.toUpperCase.
138

138

00:06:28.300  -->  00:06:29.623
Let's run this now.
139

139

00:06:33.870  -->  00:06:37.400
And we'll see what happens when we do this, null.
140

140

00:06:37.400  -->  00:06:40.390
But we don't get a null pointer exception.
141

141

00:06:40.390  -->  00:06:43.210
In Java, when we called the toUpperCase,
142

142

00:06:43.210  -->  00:06:44.850
we would have gotten a null pointer exception,
143

143

00:06:44.850  -->  00:06:46.750
because this is null.
144

144

00:06:46.750  -->  00:06:49.900
So, essentially what happens is,
145

145

00:06:49.900  -->  00:06:54.900
when you have a safe operator expression like you do here,
146

146

00:06:55.550  -->  00:07:00.310
if the variable is null, the expression evaluates to null.
147

147

00:07:00.310  -->  00:07:03.480
If it isn't null, then the expression goes ahead
148

148

00:07:03.480  -->  00:07:06.000
and runs and evaluates to
149

149

00:07:06.000  -->  00:07:08.570
whatever it would normally evaluate to
150

150

00:07:08.570  -->  00:07:10.090
when the variable isn't null.
151

151

00:07:10.090  -->  00:07:13.970
So once again, this is shorthand for the following.
152

152

00:07:13.970  -->  00:07:16.673
If str equals null,
153

153

00:07:18.070  -->  00:07:20.443
then you wanna return null.
154

154

00:07:21.700  -->  00:07:22.823
Otherwise,
155

155

00:07:24.500  -->  00:07:26.740
we wanna toUpperCase it.
156

156

00:07:26.740  -->  00:07:28.860
And you'll notice again that in here,
157

157

00:07:28.860  -->  00:07:30.520
the compiler's smart enough to say,
158

158

00:07:30.520  -->  00:07:32.160
oh, you've already checked for null,
159

159

00:07:32.160  -->  00:07:34.400
we know in the else block of code
160

160

00:07:34.400  -->  00:07:36.550
that it's not null, therefore I'm gonna let you go ahead
161

161

00:07:36.550  -->  00:07:39.010
and just call the function
162

162

00:07:39.010  -->  00:07:41.053
without having to use the safe operator.
163

163

00:07:41.960  -->  00:07:45.040
So this is essentially what this boils down to,
164

164

00:07:45.040  -->  00:07:46.530
this line of code here.
165

165

00:07:46.530  -->  00:07:48.610
Now you might be wondering about the if,
166

166

00:07:48.610  -->  00:07:52.110
and you're saying why is this even compiling,
167

167

00:07:52.110  -->  00:07:53.360
why wouldn't it give us errors,
168

168

00:07:53.360  -->  00:07:55.850
we're gonna cover the if in more detail in the next section,
169

169

00:07:55.850  -->  00:07:57.700
so don't worry about that for now.
170

170

00:07:57.700  -->  00:08:02.700
But this is what str?.toUpperCase is shorthand for.
171

171

00:08:03.350  -->  00:08:05.340
It's saying if the string is null,
172

172

00:08:05.340  -->  00:08:08.520
evaluate this to null, otherwise go ahead
173

173

00:08:08.520  -->  00:08:09.870
and call the function.
174

174

00:08:09.870  -->  00:08:13.210
So whenever you see the safe operator,
175

175

00:08:13.210  -->  00:08:15.380
this is essentially what it's doing.
176

176

00:08:15.380  -->  00:08:19.040
So in the beginning it's all gonna seem strange to you,
177

177

00:08:19.040  -->  00:08:22.150
and it can be helpful to just, in your mind,
178

178

00:08:22.150  -->  00:08:24.470
imagine this in the place of this.
179

179

00:08:24.470  -->  00:08:26.730
Eventually, you know, you'll see this,
180

180

00:08:26.730  -->  00:08:28.960
and it'll just be natural to you
181

181

00:08:28.960  -->  00:08:30.290
and you won't even think about it,
182

182

00:08:30.290  -->  00:08:32.430
but in the beginning, it can seem really strange
183

183

00:08:32.430  -->  00:08:33.820
because when you use it, of course,
184

184

00:08:33.820  -->  00:08:35.950
you're thinking, well, what's gonna happen if it's null?
185

185

00:08:35.950  -->  00:08:37.860
So just keep this in mind,
186

186

00:08:37.860  -->  00:08:40.810
this is essentially shorthand for this.
187

187

00:08:40.810  -->  00:08:42.670
You can also use the safe operator
188

188

00:08:42.670  -->  00:08:44.810
when you're accessing class properties
189

189

00:08:44.810  -->  00:08:47.190
and we'll see examples of this later.
190

190

00:08:47.190  -->  00:08:49.460
Okay, so let's go to the Java file for a minute
191

191

00:08:49.460  -->  00:08:51.750
and I'm gonna type in some code that's not gonna compile
192

192

00:08:51.750  -->  00:08:53.560
because I haven't defined the classes,
193

193

00:08:53.560  -->  00:08:55.930
but imagine if you had this code.
194

194

00:08:55.930  -->  00:08:58.007
If bankBranch
195

195

00:08:59.280  -->  00:09:00.443
is not equal to null,
196

196

00:09:02.500  -->  00:09:03.773
and then if it's not equal to null,
197

197

00:09:03.773  -->  00:09:06.790
then you wanna get an address, so,
198

198

00:09:06.790  -->  00:09:09.140
let's say bankBranch.getAddress,
199

199

00:09:12.460  -->  00:09:14.623
and then if that's not equal to null,
200

200

00:09:17.230  -->  00:09:20.913
then let's say you wanna get the country from the address,
201

201

00:09:21.760  -->  00:09:22.833
address.getCountry.
202

202

00:09:25.880  -->  00:09:28.650
And then maybe now you wanna do something with the country,
203

203

00:09:28.650  -->  00:09:30.840
if it's not equal to null, you get the picture,
204

204

00:09:30.840  -->  00:09:33.460
we see this all the time in Java code
205

205

00:09:33.460  -->  00:09:35.330
because we're trying to avoid
206

206

00:09:35.330  -->  00:09:37.670
that pesky null pointer exception,
207

207

00:09:37.670  -->  00:09:39.220
so let's say maybe here we'll go
208

208

00:09:39.220  -->  00:09:40.623
countryCode = country.getCountryCode.
209

209

00:09:45.020  -->  00:09:46.630
So as I said, you'll often see
210

210

00:09:46.630  -->  00:09:49.530
nested checks for nulls like this.
211

211

00:09:49.530  -->  00:09:51.810
In Kotlin, we could write this in one line of code,
212

212

00:09:51.810  -->  00:09:53.850
because of the safety operator.
213

213

00:09:53.850  -->  00:09:55.330
So let's go back to Kotlin,
214

214

00:09:55.330  -->  00:09:56.730
once again I'm gonna get errors,
215

215

00:09:56.730  -->  00:09:58.760
because I haven't defined all these classes,
216

216

00:09:58.760  -->  00:10:01.170
but we could do something like
217

217

00:10:01.170  -->  00:10:02.727
val countryCode =,
218

218

00:10:05.180  -->  00:10:07.740
oh, actually, let's make that a string,
219

219

00:10:07.740  -->  00:10:09.293
and the string might be null.
220

220

00:10:10.410  -->  00:10:15.410
And we'll say, = bankBranch,
221

221

00:10:15.920  -->  00:10:17.770
and then we'll use the safety operator
222

222

00:10:17.770  -->  00:10:19.640
'cause bankBranch can be null
223

223

00:10:19.640  -->  00:10:22.440
and then address, and we'll use the safety operator
224

224

00:10:22.440  -->  00:10:23.840
because address can be null,
225

225

00:10:24.830  -->  00:10:27.720
country, and we'll use the safety operator
226

226

00:10:27.720  -->  00:10:29.440
'cause country can be null,
227

227

00:10:29.440  -->  00:10:31.733
and then finally countryCode.
228

228

00:10:32.800  -->  00:10:36.880
So you could potentially have this one line of code,
229

229

00:10:36.880  -->  00:10:38.960
which is shorthand for all of this code
230

230

00:10:38.960  -->  00:10:40.140
that we have to write in Java,
231

231

00:10:40.140  -->  00:10:43.470
because remember that every time we use a safety operator
232

232

00:10:43.470  -->  00:10:46.110
under the covers, it's saying is
233

233

00:10:46.110  -->  00:10:48.870
whatever's in front of me null.
234

234

00:10:48.870  -->  00:10:51.520
And if it is, evaluate to null,
235

235

00:10:51.520  -->  00:10:54.900
otherwise go here, go here, go here.
236

236

00:10:54.900  -->  00:10:56.740
Now when it evaluates to null,
237

237

00:10:56.740  -->  00:10:59.210
this isn't gonna cause a null pointer exception,
238

238

00:10:59.210  -->  00:11:02.930
because the safety operator is smart enough at that point
239

239

00:11:02.930  -->  00:11:05.060
that this whole thing is not gonna be executed.
240

240

00:11:05.060  -->  00:11:08.470
Remember, once you hit the safety operator,
241

241

00:11:08.470  -->  00:11:10.760
it's not gonna keep evaluating the expression
242

242

00:11:10.760  -->  00:11:13.200
if this is null, it's just gonna return null.
243

243

00:11:13.200  -->  00:11:16.160
So it's gonna basically short circuit everything here
244

244

00:11:16.160  -->  00:11:18.440
and you're not gonna get a null pointer exception.
245

245

00:11:18.440  -->  00:11:20.420
So, the point of all of this
246

246

00:11:20.420  -->  00:11:22.670
is that you can replace all the null checks
247

247

00:11:22.670  -->  00:11:24.420
with the safe call operator,
248

248

00:11:24.420  -->  00:11:27.160
and you can string safe call operators together,
249

249

00:11:27.160  -->  00:11:30.330
and the moment one of the operators evaluates to null,
250

250

00:11:30.330  -->  00:11:32.293
the expression will evaluate to null.
251

251

00:11:33.310  -->  00:11:36.260
Now Kotlin goes a step further than this,
252

252

00:11:36.260  -->  00:11:37.890
if you can believe it.
253

253

00:11:37.890  -->  00:11:42.340
So let's say that we want to assign a default countryCode
254

254

00:11:42.340  -->  00:11:44.100
if any of the variables is null,
255

255

00:11:44.100  -->  00:11:46.550
so if at any point along here,
256

256

00:11:46.550  -->  00:11:49.960
any of these safe call operators evaluates to null,
257

257

00:11:49.960  -->  00:11:53.140
we wanna actually assign a value to countryCode,
258

258

00:11:53.140  -->  00:11:55.990
we don't want null assigned to countryCode,
259

259

00:11:55.990  -->  00:11:58.340
so can we do that, yes we can.
260

260

00:11:58.340  -->  00:12:02.290
We'd use something called the Elvis operator.
261

261

00:12:02.290  -->  00:12:06.480
The Elvis operator is a question mark followed by a colon.
262

262

00:12:06.480  -->  00:12:10.433
So the Elvis operator looks like this.
263

263

00:12:11.680  -->  00:12:13.730
This is the Elvis operator.
264

264

00:12:13.730  -->  00:12:17.300
Now apparently it's called the Elvis operator because
265

265

00:12:17.300  -->  00:12:20.880
the Kotlin team, or at least somebody on the Kotlin team,
266

266

00:12:20.880  -->  00:12:25.550
thinks that this operator looks kind of like Elvis.
267

267

00:12:25.550  -->  00:12:26.590
More specifically,
268

268

00:12:26.590  -->  00:12:28.860
Elvis's hair when it's tipped on its side,
269

269

00:12:28.860  -->  00:12:32.250
so if you can imagine this being tipped clockwise.
270

270

00:12:32.250  -->  00:12:34.280
So here, I guess, are his eyes,
271

271

00:12:34.280  -->  00:12:36.210
and this would be his hair.
272

272

00:12:36.210  -->  00:12:39.080
Now I went out to look at a photo of Elvis
273

273

00:12:39.080  -->  00:12:42.450
and I'll show you a few photos now.
274

274

00:12:42.450  -->  00:12:44.053
Let's go out to the browser.
275

275

00:12:45.800  -->  00:12:48.460
Okay, so here I've found a photo of Elvis.
276

276

00:12:48.460  -->  00:12:52.700
Now, I'm not sure about the Elvis operator
277

277

00:12:52.700  -->  00:12:55.280
looking like Elvis, so if these are his eyes,
278

278

00:12:55.280  -->  00:12:58.240
I guess, I don't know, the question mark maybe,
279

279

00:12:58.240  -->  00:13:01.060
maybe if he's facing the other way.
280

280

00:13:01.060  -->  00:13:03.210
Supposed to look like his hair.
281

281

00:13:03.210  -->  00:13:04.640
Well I guess in a way it does,
282

282

00:13:04.640  -->  00:13:07.650
I mean his hair tends to be bigger here,
283

283

00:13:07.650  -->  00:13:08.750
if we look at the photo,
284

284

00:13:08.750  -->  00:13:11.050
so maybe that's what they mean by it.
285

285

00:13:11.050  -->  00:13:12.900
But personally I think it's a stretch,
286

286

00:13:12.900  -->  00:13:14.600
but maybe you're looking at this and going,
287

287

00:13:14.600  -->  00:13:17.660
yes, yes, I can see that it looks like the Elvis operator.
288

288

00:13:17.660  -->  00:13:19.760
I think all we can conclude from this
289

289

00:13:19.760  -->  00:13:21.170
is that somebody in the Kotlin team
290

290

00:13:21.170  -->  00:13:22.910
really is a big fan of Elvis
291

291

00:13:22.910  -->  00:13:26.030
and maybe sees Elvis everywhere, I don't know.
292

292

00:13:26.030  -->  00:13:29.280
Anyway, I just thought I'd show you the background
293

293

00:13:29.280  -->  00:13:31.250
behind the Elvis operator.
294

294

00:13:31.250  -->  00:13:32.823
Let's go back to IntelliJ.
295

295

00:13:34.700  -->  00:13:37.940
Okay, so what does the Elvis operator do?
296

296

00:13:37.940  -->  00:13:40.410
Well, it lets you assign a default value
297

297

00:13:40.410  -->  00:13:42.570
when an expression evaluates to null.
298

298

00:13:42.570  -->  00:13:44.130
So let's take a look at an example,
299

299

00:13:44.130  -->  00:13:46.623
I'm gonna get rid of all this stuff here.
300

300

00:13:47.530  -->  00:13:50.133
So we'll say val str2,
301

301

00:13:52.010  -->  00:13:55.720
and then we'll go str, and we'll use the Elvis operator,
302

302

00:13:55.720  -->  00:14:00.710
and we'll say this is the default value.
303

303

00:14:00.710  -->  00:14:02.490
So what's happening here is we're saying
304

304

00:14:02.490  -->  00:14:04.450
we know that str might be null,
305

305

00:14:04.450  -->  00:14:06.400
because it's a nullable type.
306

306

00:14:06.400  -->  00:14:11.400
So we're saying here that we want to assign str to str2,
307

307

00:14:11.500  -->  00:14:14.160
however, if str is null,
308

308

00:14:14.160  -->  00:14:18.430
then go ahead instead and define this string.
309

309

00:14:18.430  -->  00:14:21.970
And you'll notice that we haven't declared a type here.
310

310

00:14:21.970  -->  00:14:25.100
This is actually String, not nullable,
311

311

00:14:25.100  -->  00:14:27.040
and if we explicitly add that
312

312

00:14:28.530  -->  00:14:31.100
we'll see that we don't get a compiler error.
313

313

00:14:31.100  -->  00:14:35.590
So the compiler knows that this cannot be null,
314

314

00:14:35.590  -->  00:14:38.280
we can't be assigning null from this statement
315

315

00:14:38.280  -->  00:14:40.140
because we're using the Elvis operator
316

316

00:14:40.140  -->  00:14:44.950
and we're assigning a default value when str is null.
317

317

00:14:44.950  -->  00:14:47.080
Now of course we don't have to put String here,
318

318

00:14:47.080  -->  00:14:48.660
because the compiler can infer it,
319

319

00:14:48.660  -->  00:14:53.550
but I wanted to show you that this is not a nullable type.
320

320

00:14:53.550  -->  00:14:56.840
It could be a nullable type, but it doesn't have to be.
321

321

00:14:56.840  -->  00:14:58.350
And in fact, you wouldn't want it to be
322

322

00:14:58.350  -->  00:15:00.630
because best practise in Kotlin
323

323

00:15:00.630  -->  00:15:02.420
is not to declare nullable types
324

324

00:15:02.420  -->  00:15:04.750
unless you absolutely have to.
325

325

00:15:04.750  -->  00:15:08.833
Okay, so let's print str2, because we know str is null.
326

326

00:15:09.670  -->  00:15:10.730
I'm gonna delete this
327

327

00:15:11.980  -->  00:15:14.580
code here so that it doesn't get uppercased.
328

328

00:15:16.812  -->  00:15:18.512
And let's go ahead and print str2.
329

329

00:15:22.240  -->  00:15:23.073
We'll run,
330

330

00:15:26.970  -->  00:15:28.300
and we'll see that we get errors
331

331

00:15:28.300  -->  00:15:30.410
because we've got errors in the Java
332

332

00:15:30.410  -->  00:15:33.990
and it's going to try compiling our entire project,
333

333

00:15:33.990  -->  00:15:36.820
so I'll get rid of all this stuff as well.
334

334

00:15:36.820  -->  00:15:39.633
Go back here, and we'll try running again.
335

335

00:15:42.920  -->  00:15:45.830
And we'll see what happens when we do this null
336

336

00:15:45.830  -->  00:15:47.140
from what we were printing up here,
337

337

00:15:47.140  -->  00:15:48.930
but then for our second println,
338

338

00:15:48.930  -->  00:15:50.930
we get this is the default value,
339

339

00:15:50.930  -->  00:15:54.580
because str was null and we were using the Elvis operator,
340

340

00:15:54.580  -->  00:15:56.350
and so when this is null,
341

341

00:15:56.350  -->  00:15:58.820
instead the default value is used
342

342

00:15:58.820  -->  00:16:00.650
and is assigned to str2.
343

343

00:16:00.650  -->  00:16:03.900
So this is a great way of preventing nulls
344

344

00:16:03.900  -->  00:16:07.100
from ever being assigned, just use the Elvis operator.
345

345

00:16:07.100  -->  00:16:09.920
So the Elvis operator is basically shorthand
346

346

00:16:09.920  -->  00:16:11.710
for the following code.
347

347

00:16:11.710  -->  00:16:15.303
It's shorthand for if str equals null,
348

348

00:16:17.370  -->  00:16:20.983
then str2 equals this is the default value.
349

349

00:16:22.970  -->  00:16:23.943
Else,
350

350

00:16:25.460  -->  00:16:28.363
and str2 equals str.
351

351

00:16:29.940  -->  00:16:32.690
Yes, that's because val can't be reassigned,
352

352

00:16:32.690  -->  00:16:34.300
so just ignore this error.
353

353

00:16:34.300  -->  00:16:38.370
And so this is what the Elvis operator is actually doing.
354

354

00:16:38.370  -->  00:16:41.080
Once again, Kotlin wants to be concise,
355

355

00:16:41.080  -->  00:16:44.030
and so it's given us a nice shorthand for this.
356

356

00:16:44.030  -->  00:16:47.600
Now if you remember that huge long chain we had
357

357

00:16:47.600  -->  00:16:52.600
where we had val whatever equals,
358

358

00:16:52.640  -->  00:16:54.103
what was it, bankBranch.
359

359

00:16:56.180  -->  00:16:59.360
Safety operator, address,
360

360

00:16:59.360  -->  00:17:02.510
safety operator, country,
361

361

00:17:02.510  -->  00:17:03.870
I'll just stop there for now.
362

362

00:17:03.870  -->  00:17:04.703
Well if you're wondering
363

363

00:17:04.703  -->  00:17:07.100
if we can use the Elvis operator at the end of this,
364

364

00:17:07.100  -->  00:17:10.393
we actually can, we can do the following.
365

365

00:17:14.150  -->  00:17:15.710
So,
366

366

00:17:15.710  -->  00:17:19.690
once again, if you don't want a null assigned,
367

367

00:17:19.690  -->  00:17:21.240
you can use the Elvis operator
368

368

00:17:21.240  -->  00:17:23.240
at the end of a chain like this,
369

369

00:17:23.240  -->  00:17:26.290
and say, okay, if all of these turn out to be null,
370

370

00:17:26.290  -->  00:17:28.660
or one of them does, what you're essentially doing here
371

371

00:17:28.660  -->  00:17:30.480
is you're trying to get the country.
372

372

00:17:30.480  -->  00:17:32.050
So what you're saying is,
373

373

00:17:32.050  -->  00:17:34.400
if this gets short circuited along the way
374

374

00:17:34.400  -->  00:17:36.843
because one of these two guys is null,
375

375

00:17:37.680  -->  00:17:40.780
or this guy is null, than just assign US.
376

376

00:17:40.780  -->  00:17:44.527
So you can imagine how useful the safe call operator
377

377

00:17:44.527  -->  00:17:46.190
and the Elvis operators are.
378

378

00:17:46.190  -->  00:17:48.290
You don't need any of those
379

379

00:17:48.290  -->  00:17:51.340
nested blocks of null checks anymore.
380

380

00:17:51.340  -->  00:17:54.420
You can use the safe call operator
381

381

00:17:54.420  -->  00:17:58.170
and the Elvis operator, and prevent null pointer exceptions.
382

382

00:17:58.170  -->  00:18:00.930
Okay, this is a good spot to mention safe casting again,
383

383

00:18:00.930  -->  00:18:03.620
because safe casting is sort of along the same lines
384

384

00:18:03.620  -->  00:18:05.610
as the safe call operator.
385

385

00:18:05.610  -->  00:18:07.520
In one case Kotlin's trying to prevent
386

386

00:18:07.520  -->  00:18:11.050
null pointer exceptions, and in the other case,
387

387

00:18:11.050  -->  00:18:13.860
you're casting, you're checking whether something
388

388

00:18:13.860  -->  00:18:16.230
is an instance of a particular class,
389

389

00:18:16.230  -->  00:18:19.400
because you're trying to prevent a class cast exception.
390

390

00:18:19.400  -->  00:18:23.520
So once again, Kotlin has a shorthand for that.
391

391

00:18:23.520  -->  00:18:26.973
We can use the as question mark operator.
392

392

00:18:27.830  -->  00:18:31.190
You can say val something of type any
393

393

00:18:32.140  -->  00:18:33.763
is an arrayOf (1, 2, 3, 4).
394

394

00:18:38.150  -->  00:18:39.860
And then we can do something like this,
395

395

00:18:39.860  -->  00:18:42.220
val str3
396

396

00:18:43.167  -->  00:18:48.167
= something as? String,
397

397

00:18:49.100  -->  00:18:54.100
and then we can say println(str3).
398

398

00:18:54.770  -->  00:18:57.640
So what we're trying to do here is we're
399

399

00:18:57.640  -->  00:19:01.410
trying to cast an array of int to a String,
400

400

00:19:01.410  -->  00:19:04.680
so obviously that's not going to work.
401

401

00:19:04.680  -->  00:19:06.810
But when we run, and we'll run now,
402

402

00:19:06.810  -->  00:19:08.530
I'll have to comment out this line
403

403

00:19:08.530  -->  00:19:10.030
so that we don't get an error.
404

404

00:19:13.140  -->  00:19:15.400
You'll see that we don't get an exception here
405

405

00:19:15.400  -->  00:19:17.450
when we try to do this assignment.
406

406

00:19:17.450  -->  00:19:20.920
Instead, as you might have guessed, we get a null.
407

407

00:19:20.920  -->  00:19:24.380
And so just like the safe call operator,
408

408

00:19:24.380  -->  00:19:27.160
if you use the safe cast operator,
409

409

00:19:27.160  -->  00:19:29.800
and it turns out that you can't
410

410

00:19:29.800  -->  00:19:34.030
perform the cast successfully, the cast evaluates to null.
411

411

00:19:34.030  -->  00:19:36.030
So what's interesting about this is
412

412

00:19:36.030  -->  00:19:38.810
once you've used the safe cast operator,
413

413

00:19:38.810  -->  00:19:41.700
from that point on, you have to use the safe call operator.
414

414

00:19:41.700  -->  00:19:43.740
In other words, if here,
415

415

00:19:43.740  -->  00:19:47.440
we try to explicitly type this to String,
416

416

00:19:47.440  -->  00:19:48.680
we're gonna get an error,
417

417

00:19:48.680  -->  00:19:52.400
because the compiler knows that this might evaluate to null.
418

418

00:19:52.400  -->  00:19:54.990
And so we'll get a type mismatch saying that
419

419

00:19:54.990  -->  00:19:57.480
it's requiring a String on the left hand side,
420

420

00:19:57.480  -->  00:20:01.570
but we have a String question mark,
421

421

00:20:01.570  -->  00:20:05.040
a nullable string on the right hand side.
422

422

00:20:05.040  -->  00:20:06.470
And so just keep that in mind
423

423

00:20:06.470  -->  00:20:10.950
if you're going to use the safe cast operator
424

424

00:20:10.950  -->  00:20:13.660
rather than doing safe casting,
425

425

00:20:13.660  -->  00:20:15.410
you're gonna end up in this situation
426

426

00:20:15.410  -->  00:20:17.100
where from that point forward,
427

427

00:20:17.100  -->  00:20:20.720
whatever you're assigning to has to be nullable.
428

428

00:20:20.720  -->  00:20:24.400
And so if we wanted to do something with this String,
429

429

00:20:24.400  -->  00:20:25.660
we'd have to do the following,
430

430

00:20:25.660  -->  00:20:30.370
str3?.toUpperCase, let's say.
431

431

00:20:30.370  -->  00:20:32.500
And of course, we have to remove this.
432

432

00:20:32.500  -->  00:20:34.510
If we put String? here,
433

433

00:20:34.510  -->  00:20:35.660
that would take away the error,
434

434

00:20:35.660  -->  00:20:38.750
but the compiler can infer it, so we don't need it.
435

435

00:20:38.750  -->  00:20:39.993
If we print this out,
436

436

00:20:43.360  -->  00:20:44.363
and then run.
437

437

00:20:45.490  -->  00:20:47.670
I'm sure you, or hopefully you know by now
438

438

00:20:47.670  -->  00:20:50.690
that we'll get null, because the safe call operator,
439

439

00:20:50.690  -->  00:20:54.740
when it's the variable it's attached to is null,
440

440

00:20:54.740  -->  00:20:56.510
the expression evaluates to null.
441

441

00:20:56.510  -->  00:20:58.080
Okay, I'm gonna end the video here,
442

442

00:20:58.080  -->  00:21:00.610
and we're gonna continue talking about null references
443

443

00:21:00.610  -->  00:21:02.453
in the next video, see you there.
