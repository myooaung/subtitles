1
1

00:00:00,280  -->  00:00:05,280
(upbeat music)
2

2

00:00:05,580  -->  00:00:06,413
<v Instructor>All right, it's time</v>
3

3

00:00:06,413  -->  00:00:08,650
to take a deeper look at classes.
4

4

00:00:08,650  -->  00:00:10,700
Now you know what classes are and what they do
5

5

00:00:10,700  -->  00:00:13,340
so we're not gonna spend any time on the basics.
6

6

00:00:13,340  -->  00:00:15,920
I'll just start by reminding you that in Caitlyn
7

7

00:00:15,920  -->  00:00:19,920
all classes are public and final by default.
8

8

00:00:19,920  -->  00:00:23,120
So let's start working with the employee class we have here.
9

9

00:00:23,120  -->  00:00:26,310
I'm gonna remove the private modifier that was just there
10

10

00:00:26,310  -->  00:00:29,247
for our lecture on Access Modifiers
11

11

00:00:29,247  -->  00:00:31,000
and we don't need it now.
12

12

00:00:31,000  -->  00:00:33,730
Now you also saw that we can instantiate the class
13

13

00:00:33,730  -->  00:00:36,980
as we're doing here, and that we can print the reference,
14

14

00:00:36,980  -->  00:00:39,980
And that's because the compiler generates a constructor
15

15

00:00:39,980  -->  00:00:42,580
for us which in this case will be an empty constructor
16

16

00:00:42,580  -->  00:00:46,210
because we don't have any properties in the employee class.
17

17

00:00:46,210  -->  00:00:49,360
So let's add a first name field to employee.
18

18

00:00:49,360  -->  00:00:53,090
Now in Java, we'd create a class called employee.
19

19

00:00:53,090  -->  00:00:55,840
So let's do that.
20

20

00:00:55,840  -->  00:00:58,080
I'm going to add a Java file to this project.
21

21

00:00:58,080  -->  00:00:59,993
So I'll create a new package for that.
22

22

00:01:01,100  -->  00:01:03,840
So I'll go to new package and I'll call this one
23

23

00:01:04,686  -->  00:01:09,686
Academy.LearnProgramming,JavaCode as I usually do.
24

24

00:01:10,770  -->  00:01:13,940
And then in here, we'll just create an employee,
25

25

00:01:13,940  -->  00:01:15,210
actually we won't call it employee
26

26

00:01:15,210  -->  00:01:16,420
because that's gonna get confusing.
27

27

00:01:16,420  -->  00:01:18,127
We'll call it JavaEmployee.
28

28

00:01:20,180  -->  00:01:22,200
Okay, so here we have a Java class.
29

29

00:01:22,200  -->  00:01:26,100
And if we wanted to create a first name property,
30

30

00:01:26,100  -->  00:01:27,280
we do the following.
31

31

00:01:27,280  -->  00:01:32,120
We'd say, private string first name,
32

32

00:01:32,120  -->  00:01:33,840
no problems there looks familiar.
33

33

00:01:33,840  -->  00:01:37,923
And then we'd have a constructor Public JavaEmployee
34

34

00:01:39,080  -->  00:01:42,723
and we do something like accept a string called first name.
35

35

00:01:43,840  -->  00:01:45,080
And then within the constructor,
36

36

00:01:45,080  -->  00:01:49,230
we'd say this dot first name equals first name.
37

37

00:01:49,230  -->  00:01:52,710
I mean, this is a really common thing in Java.
38

38

00:01:52,710  -->  00:01:55,710
Now to match what we have in Caitlyn, let's make this final.
39

39

00:01:57,040  -->  00:01:59,730
And that's fine because the compiler understands
40

40

00:01:59,730  -->  00:02:01,550
that we're probably going to initialise this
41

41

00:02:01,550  -->  00:02:03,563
in the constructor which we are.
42

42

00:02:04,540  -->  00:02:06,550
So now let's go back to Caitlyn.
43

43

00:02:06,550  -->  00:02:09,240
Now in Caitlyn, there are a few ways we can write
44

44

00:02:09,240  -->  00:02:12,280
the equivalent code to what we just wrote in Java.
45

45

00:02:12,280  -->  00:02:14,410
So we're gonna start with the longest way,
46

46

00:02:14,410  -->  00:02:17,250
because I want you to see what's going on.
47

47

00:02:17,250  -->  00:02:20,420
But as, as usual, for Caitlyn, there is a shorthand way
48

48

00:02:20,420  -->  00:02:23,440
that you'll typically use that hides the details.
49

49

00:02:23,440  -->  00:02:26,100
But let's see those details first.
50

50

00:02:26,100  -->  00:02:28,530
So to define the constructor,
51

51

00:02:28,530  -->  00:02:31,289
we're gonna add the constructor keyword here.
52

52

00:02:31,289  -->  00:02:34,743
And then we're gonna say first name, string.
53

53

00:02:35,930  -->  00:02:38,370
So what we've just done here is equivalent to what
54

54

00:02:38,370  -->  00:02:42,170
we basically are doing here in Java, except we're defining
55

55

00:02:42,170  -->  00:02:45,480
it here on the same line that we're defining the class.
56

56

00:02:45,480  -->  00:02:49,040
Okay, let's add the property the first name property,
57

57

00:02:49,040  -->  00:02:50,860
so we'll call it a string.
58

58

00:02:50,860  -->  00:02:53,250
Now right now, it's giving us an error because it saying
59

59

00:02:53,250  -->  00:02:55,760
we have to initialise it because we're using val.
60

60

00:02:55,760  -->  00:02:57,690
So we're going to initialise that
61

61

00:02:57,690  -->  00:02:59,523
in what's called internet block.
62

62

00:03:00,780  -->  00:03:05,023
And we'll say this dot first name equals first name.
63

63

00:03:06,020  -->  00:03:10,610
So this code here is equivalent to what we wrote in Java.
64

64

00:03:10,610  -->  00:03:12,860
And there's quite a lot going on.
65

65

00:03:12,860  -->  00:03:16,120
So going back to the constructor and this is very important
66

66

00:03:16,120  -->  00:03:20,350
Caitlyn has the notion of a primary constructor.
67

67

00:03:20,350  -->  00:03:23,360
And that constructor is declared outside
68

68

00:03:23,360  -->  00:03:25,740
the curly braces as it is here.
69

69

00:03:25,740  -->  00:03:29,900
So here we're actually declaring the primary constructor
70

70

00:03:29,900  -->  00:03:33,460
and this constructor takes one parameter first name,
71

71

00:03:33,460  -->  00:03:35,120
which is a string.
72

72

00:03:35,120  -->  00:03:37,940
Now you can declare other constructors within the classes as
73

73

00:03:37,940  -->  00:03:41,800
you can in Java, and they're called secondary constructors.
74

74

00:03:41,800  -->  00:03:44,210
And we'll see those later.
75

75

00:03:44,210  -->  00:03:48,900
But for now know that when a constructor is declared outside
76

76

00:03:48,900  -->  00:03:52,300
the curly braces, it's known as the primary constructor
77

77

00:03:52,300  -->  00:03:54,720
and the primary constructor is very important.
78

78

00:03:54,720  -->  00:03:57,060
Now after that, we have the property declaration
79

79

00:03:57,060  -->  00:03:59,060
and you've seen these before.
80

80

00:03:59,060  -->  00:04:01,730
And then we have what's called the initializer block.
81

81

00:04:01,730  -->  00:04:04,210
Now this is not a constructor.
82

82

00:04:04,210  -->  00:04:06,720
So don't mistake this for a constructor.
83

83

00:04:06,720  -->  00:04:09,923
The initializer block runs when an instance is created
84

84

00:04:09,923  -->  00:04:14,560
and it's used in conjunction with the primary constructor.
85

85

00:04:14,560  -->  00:04:17,770
Primary constructors cannot contain code.
86

86

00:04:17,770  -->  00:04:20,430
I mean, they're declared outside the curly braces
87

87

00:04:20,430  -->  00:04:22,870
so they cannot contain code.
88

88

00:04:22,870  -->  00:04:27,370
So if you want to do something, when an instance is created,
89

89

00:04:27,370  -->  00:04:29,330
and you only have the primary constructor,
90

90

00:04:29,330  -->  00:04:32,290
then you need to use what's called an Internet block.
91

91

00:04:32,290  -->  00:04:34,540
So the Internet block is kind of like the body
92

92

00:04:34,540  -->  00:04:37,450
for the primary constructor, but not quite.
93

93

00:04:37,450  -->  00:04:39,680
You can have multiple initializer blocks
94

94

00:04:39,680  -->  00:04:41,890
within the same class, though I'm not sure
95

95

00:04:41,890  -->  00:04:45,240
why you'd want to do that except for organisation.
96

96

00:04:45,240  -->  00:04:48,730
Okay, so when we construct an instance of employee
97

97

00:04:48,730  -->  00:04:50,350
we have to pass the first name
98

98

00:04:50,350  -->  00:04:53,380
because the primary constructor expects the first name.
99

99

00:04:53,380  -->  00:04:56,240
That's why we're getting the error up here right now.
100

100

00:04:56,240  -->  00:04:58,900
So once we've passed the first name in the Internet block
101

101

00:04:58,900  -->  00:05:01,100
will run and it will assign the first name
102

102

00:05:01,100  -->  00:05:04,090
that we've passed to the first name property.
103

103

00:05:04,090  -->  00:05:07,183
So let's go ahead and pass John as the first name.
104

104

00:05:09,450  -->  00:05:10,800
And then we'll print the first name
105

105

00:05:10,800  -->  00:05:12,640
instead of just the instance.
106

106

00:05:12,640  -->  00:05:15,383
And so let's run at this point.
107

107

00:05:18,890  -->  00:05:21,970
Okay and as we expect, we see John printed.
108

108

00:05:21,970  -->  00:05:24,790
So this is the long way of doing things, a long way
109

109

00:05:24,790  -->  00:05:29,370
of writing the equivalent Java class.
110

110

00:05:29,370  -->  00:05:33,030
We declare a constructor, we declare the property
111

111

00:05:33,030  -->  00:05:34,410
and then we have an Internet block
112

112

00:05:34,410  -->  00:05:36,500
that assigns the parameter that we passed
113

113

00:05:36,500  -->  00:05:39,100
through the constructor to the property.
114

114

00:05:39,100  -->  00:05:41,600
That's the long way of doing it.
115

115

00:05:41,600  -->  00:05:44,400
Now let's make our first simplification.
116

116

00:05:44,400  -->  00:05:47,600
We don't need the initializer block because all we're doing
117

117

00:05:47,600  -->  00:05:50,300
is assigning a parameter to a property.
118

118

00:05:50,300  -->  00:05:53,720
And so when that's the case, we can actually combine
119

119

00:05:53,720  -->  00:05:58,663
the assignment with the constructor declaration as follows.
120

120

00:05:59,570  -->  00:06:02,660
We can delete all of this here, and we'll just say
121

121

00:06:02,660  -->  00:06:04,727
ValFirstNameString=FirstNname.
122

122

00:06:07,766  -->  00:06:12,230
So instead of declaring the property,
123

123

00:06:12,230  -->  00:06:15,020
and then using an Internet block, because all we're doing
124

124

00:06:15,020  -->  00:06:18,650
is assigning the value we get from the constructor
125

125

00:06:18,650  -->  00:06:23,260
to the property we can just do it all in one line like this.
126

126

00:06:23,260  -->  00:06:28,080
Let's run again and everything still works.
127

127

00:06:28,080  -->  00:06:30,500
But we can take this even further.
128

128

00:06:30,500  -->  00:06:32,740
Now remember that one of the goals of Caitlyn
129

129

00:06:32,740  -->  00:06:36,330
is to minimise the use of boilerplate code.
130

130

00:06:36,330  -->  00:06:38,710
Now how many times do you write constructors
131

131

00:06:38,710  -->  00:06:41,680
that just assign parameter values to property values?
132

132

00:06:41,680  -->  00:06:45,870
I mean, how many times in Java do you see a constructor
133

133

00:06:45,870  -->  00:06:48,690
or constructors that just have a string of parameters
134

134

00:06:48,690  -->  00:06:52,020
and all they're doing is you know, this dot x equals x
135

135

00:06:52,020  -->  00:06:54,740
and y equals y this dot z equals z,
136

136

00:06:54,740  -->  00:06:57,740
I mean you see that quite often.
137

137

00:06:57,740  -->  00:06:59,680
So it's boilerplate code.
138

138

00:06:59,680  -->  00:07:02,990
So Caitlyn, which wants to eliminate boilerplate code
139

139

00:07:02,990  -->  00:07:07,490
will generate that code for you by default under the covers.
140

140

00:07:07,490  -->  00:07:10,560
So if all you wanna do is assign parameter values to
141

141

00:07:10,560  -->  00:07:14,700
the corresponding properties, Caitlyn will do that for you.
142

142

00:07:14,700  -->  00:07:18,280
It will declare properties with the same names
143

143

00:07:18,280  -->  00:07:21,410
as the parameters and it will assign the values past
144

144

00:07:21,410  -->  00:07:23,810
to those parameters to the properties.
145

145

00:07:23,810  -->  00:07:27,540
So we can actually remove this explicit declaration
146

146

00:07:27,540  -->  00:07:31,173
and assignment and simply put Val here.
147

147

00:07:33,170  -->  00:07:34,440
And we're done.
148

148

00:07:34,440  -->  00:07:37,960
So we're now declaring the property in the signature
149

149

00:07:37,960  -->  00:07:41,890
for the primary constructor because we've put Val here.
150

150

00:07:41,890  -->  00:07:46,190
Of course, we could also put var here but by proceeding
151

151

00:07:46,190  -->  00:07:48,630
the parameter name with val or var,
152

152

00:07:48,630  -->  00:07:51,270
we're actually doing two things here.
153

153

00:07:51,270  -->  00:07:54,070
We're saying the constructor takes a string parameter
154

154

00:07:54,070  -->  00:07:57,550
and we're also declaring the property.
155

155

00:07:57,550  -->  00:08:00,850
So this constructor signature is now also doubling
156

156

00:08:00,850  -->  00:08:03,290
as a property declaration.
157

157

00:08:03,290  -->  00:08:05,900
Now if you're thinking, well, why do we have to include
158

158

00:08:05,900  -->  00:08:09,410
the constructor keyword since Caitlyn will generate
159

159

00:08:09,410  -->  00:08:11,900
the primary constructor it shouldn't know we need one
160

160

00:08:11,900  -->  00:08:13,220
and of course it does.
161

161

00:08:13,220  -->  00:08:17,060
And so we don't need the constructor keyword,
162

162

00:08:17,060  -->  00:08:18,173
we can just remove it.
163

163

00:08:22,860  -->  00:08:25,240
And that still works.
164

164

00:08:25,240  -->  00:08:28,740
Now we wouldn't be able to remove it if we had annotations
165

165

00:08:28,740  -->  00:08:31,500
or we were using Access Modifier.
166

166

00:08:31,500  -->  00:08:34,370
For example, if you wanted to make the primary constructor
167

167

00:08:34,370  -->  00:08:36,600
protected, you'd do the following.
168

168

00:08:36,600  -->  00:08:37,960
You'd have to put it back,
169

169

00:08:37,960  -->  00:08:41,663
you'd have to say protected constructor.
170

170

00:08:43,180  -->  00:08:46,890
So if you want to change the visibility of the constructor,
171

171

00:08:46,890  -->  00:08:50,996
you've got to explicitly include the constructor keyword,
172

172

00:08:50,996  -->  00:08:53,653
but if you want the constructor to be public,
173

173

00:08:54,710  -->  00:08:59,113
then you don't need to include the constructor keyword.
174

174

00:09:02,160  -->  00:09:04,130
You can just have this.
175

175

00:09:04,130  -->  00:09:05,403
So let's run again.
176

176

00:09:07,610  -->  00:09:09,180
And you'll see we still get John.
177

177

00:09:09,180  -->  00:09:14,180
So in this one line here, we've declared our constructor,
178

178

00:09:14,420  -->  00:09:19,270
we've declared a property and we're assigning the value
179

179

00:09:19,270  -->  00:09:22,940
of the parameter passed to the constructor to the property.
180

180

00:09:22,940  -->  00:09:25,420
This is the most concise way we can write the code.
181

181

00:09:25,420  -->  00:09:27,860
And as you can see, we've reduced the number of lines
182

182

00:09:27,860  -->  00:09:30,953
significantly, I mean, we have to do this in Java,
183

183

00:09:31,920  -->  00:09:34,890
and that's the equivalent code and Caitlyn.
184

184

00:09:34,890  -->  00:09:37,190
But I wanted you to see the long way first,
185

185

00:09:37,190  -->  00:09:39,500
so that you understand what's actually going on
186

186

00:09:39,500  -->  00:09:41,520
when you see something like this.
187

187

00:09:41,520  -->  00:09:42,690
There's a lot going on.
188

188

00:09:42,690  -->  00:09:45,220
It's just you don't have to explicitly type it.
189

189

00:09:45,220  -->  00:09:47,970
And as I said, if you wanted you could have this as var
190

190

00:09:49,390  -->  00:09:52,740
and it's still gonna work except of course now the property
191

191

00:09:52,740  -->  00:09:55,030
will be underlined here to alert us to the fact
192

192

00:09:55,030  -->  00:09:56,200
that it can be modified.
193

193

00:09:56,200  -->  00:09:57,540
But we just need a val property
194

194

00:09:57,540  -->  00:09:59,163
here so we'll change it back.
195

195

00:10:01,070  -->  00:10:04,530
Now you can provide default values for the parameters.
196

196

00:10:04,530  -->  00:10:06,230
Let's add a Boolean that indicates
197

197

00:10:06,230  -->  00:10:08,780
whether an employee is full or part time.
198

198

00:10:08,780  -->  00:10:10,670
And let's say that this company hires
199

199

00:10:10,670  -->  00:10:12,510
very few part time employees.
200

200

00:10:12,510  -->  00:10:16,370
So 99% of the time, the employees will be full time.
201

201

00:10:16,370  -->  00:10:18,440
In Java we'd write the following
202

202

00:10:18,440  -->  00:10:20,550
or something like the following anyway.
203

203

00:10:20,550  -->  00:10:25,550
So we'd say okay, first of all, let me add a field.
204

204

00:10:25,960  -->  00:10:30,450
So private, let's make it final, again,
205

205

00:10:30,450  -->  00:10:32,930
Boolean full time.
206

206

00:10:32,930  -->  00:10:37,900
And then we'd say here, this start full time equals true.
207

207

00:10:37,900  -->  00:10:41,210
Because 99% of the time that's gonna be the case.
208

208

00:10:41,210  -->  00:10:45,290
So we don't want developers to have to pass two parameters
209

209

00:10:45,290  -->  00:10:47,270
when most of the time they don't need the second one,
210

210

00:10:47,270  -->  00:10:49,180
but of course they will need it sometimes.
211

211

00:10:49,180  -->  00:10:51,807
So we'll say JavaEmployee FirstName
212

212

00:10:53,083  -->  00:10:57,610
and BooleanFulltime
213

213

00:10:57,610  -->  00:10:59,630
and then of course, we'll do something like this.
214

214

00:10:59,630  -->  00:11:04,150
This .FirstName=FirstName.
215

215

00:11:04,150  -->  00:11:07,883
And this .FullTime=FullTime.
216

216

00:11:08,830  -->  00:11:10,550
I mean this is really common in Java
217

217

00:11:10,550  -->  00:11:14,750
where you've got multiple constructors and each constructor
218

218

00:11:14,750  -->  00:11:16,750
takes a few more parameters.
219

219

00:11:16,750  -->  00:11:17,810
We see this a lot.
220

220

00:11:17,810  -->  00:11:21,280
Sometimes the constructor, some forms of the constructor,
221

221

00:11:21,280  -->  00:11:23,720
will except a settings object or something.
222

222

00:11:23,720  -->  00:11:26,750
And if you don't pass it, then you get all the defaults.
223

223

00:11:26,750  -->  00:11:28,300
Now there are other ways we could write this.
224

224

00:11:28,300  -->  00:11:29,890
We could just have the one constructor
225

225

00:11:29,890  -->  00:11:31,730
that accepts both parameters.
226

226

00:11:31,730  -->  00:11:33,390
We could have the second constructor
227

227

00:11:33,390  -->  00:11:35,983
called the first constructor to set the first name.
228

228

00:11:35,983  -->  00:11:38,260
Not anymore though, since we're doing this,
229

229

00:11:38,260  -->  00:11:40,960
but we still could because we'd be overriding it.
230

230

00:11:40,960  -->  00:11:44,600
But the point is that often will have multiple constructors
231

231

00:11:44,600  -->  00:11:48,230
just to handle a different number of parameters.
232

232

00:11:48,230  -->  00:11:50,440
And this is common with methods in the JDK.
233

233

00:11:50,440  -->  00:11:52,930
Often there will be a default behaviour that you can change
234

234

00:11:52,930  -->  00:11:54,410
by passing a flag.
235

235

00:11:54,410  -->  00:11:55,960
For example, let's go out and look
236

236

00:11:55,960  -->  00:11:57,610
at the thread class for a minute.
237

237

00:11:59,890  -->  00:12:02,210
Okay, so here we are at the thread class.
238

238

00:12:02,210  -->  00:12:04,083
And if we scroll down,
239

239

00:12:06,120  -->  00:12:09,630
we'll see that it has eight constructors.
240

240

00:12:09,630  -->  00:12:12,700
And a lot of them defer to other constructors
241

241

00:12:12,700  -->  00:12:15,660
but provide default values for some of the parameters.
242

242

00:12:15,660  -->  00:12:17,870
So we'll see here that you can pass a name.
243

243

00:12:17,870  -->  00:12:19,890
But if you don't pass a name,
244

244

00:12:19,890  -->  00:12:22,490
if it'll assign a default name for you.
245

245

00:12:22,490  -->  00:12:24,650
Here you can include a name.
246

246

00:12:24,650  -->  00:12:26,510
And if you don't pass a name, of course,
247

247

00:12:26,510  -->  00:12:28,290
you could call this form of the constructor
248

248

00:12:28,290  -->  00:12:30,350
and then a default name will be created for you.
249

249

00:12:30,350  -->  00:12:33,480
So a lot of these are just essentially giving the developer
250

250

00:12:33,480  -->  00:12:37,790
the option of explicitly specifying something or not.
251

251

00:12:37,790  -->  00:12:41,560
And then the constructors with a fewer number of parameters
252

252

00:12:41,560  -->  00:12:45,400
will have defaults for the stuff that's not specified.
253

253

00:12:45,400  -->  00:12:47,123
So let's go back to Intel OJ.
254

254

00:12:48,840  -->  00:12:52,530
So you can see that stuff like this is quite common in Java.
255

255

00:12:52,530  -->  00:12:54,170
So now let's go back to Caitlyn
256

256

00:12:54,170  -->  00:12:56,440
and let's write the equivalent code.
257

257

00:12:56,440  -->  00:12:59,690
We'll add our full time flag.
258

258

00:12:59,690  -->  00:13:02,410
Now our first thought will probably be to write
259

259

00:13:02,410  -->  00:13:05,060
a secondary constructor just like we did in Java.
260

260

00:13:05,060  -->  00:13:07,990
So instead of having just one constructor we'll have two.
261

261

00:13:07,990  -->  00:13:09,840
So let's do it that way first.
262

262

00:13:09,840  -->  00:13:13,060
So to add another constructor use the constructor
263

263

00:13:15,700  -->  00:13:19,463
keyword just as you do you can explicitly do up here.
264

264

00:13:21,180  -->  00:13:24,190
Okay, so we want to accept in this constructor
265

265

00:13:24,190  -->  00:13:25,480
we want to accept
266

266

00:13:27,856  -->  00:13:32,560
a FirstName, which will be a string and we also wanna accept
267

267

00:13:32,560  -->  00:13:35,463
a FullTime flag which will be a Boolean.
268

268

00:13:36,540  -->  00:13:39,950
Now right away can see we're getting errors and the first
269

269

00:13:39,950  -->  00:13:44,150
error we're getting is primary constructor call expected.
270

270

00:13:44,150  -->  00:13:45,520
So what does that mean?
271

271

00:13:45,520  -->  00:13:49,600
Well, if a class has a primary constructor and this class
272

272

00:13:49,600  -->  00:13:53,280
does because by including parentheses here we're saying
273

273

00:13:53,280  -->  00:13:57,190
we want to primary constructor, then all of the secondary
274

274

00:13:57,190  -->  00:14:01,210
constructors have to delegate to the primary constructor.
275

275

00:14:01,210  -->  00:14:02,500
So in other words, they have
276

276

00:14:02,500  -->  00:14:04,670
to call the primary constructor.
277

277

00:14:04,670  -->  00:14:06,930
And this constructor isn't doing that.
278

278

00:14:06,930  -->  00:14:09,960
So because the primary constructor is handling
279

279

00:14:09,960  -->  00:14:13,180
the first name property, we have to let it handle
280

280

00:14:13,180  -->  00:14:14,250
the first name property.
281

281

00:14:14,250  -->  00:14:18,200
We can't have the secondary constructor also declaring
282

282

00:14:18,200  -->  00:14:19,330
the first name property.
283

283

00:14:19,330  -->  00:14:22,412
So we're gonna remove the val from here, because
284

284

00:14:22,412  -->  00:14:26,100
we're going to let the primary constructor handle it.
285

285

00:14:26,100  -->  00:14:28,070
And then to call the primary constructor,
286

286

00:14:28,070  -->  00:14:31,000
we don't call it within the body here.
287

287

00:14:31,000  -->  00:14:34,400
Instead, we put a colon at the end
288

288

00:14:34,400  -->  00:14:38,470
of our secondary constructor definition and we call this,
289

289

00:14:38,470  -->  00:14:40,763
and we want to pass it the first name.
290

290

00:14:42,090  -->  00:14:45,670
So what this does is this takes the first name
291

291

00:14:45,670  -->  00:14:47,710
that's passed to the secondary constructor
292

292

00:14:47,710  -->  00:14:51,380
and use the value to call this.
293

293

00:14:51,380  -->  00:14:54,410
And the primary constructor will then be called
294

294

00:14:54,410  -->  00:14:56,330
and it will do what it was doing before.
295

295

00:14:56,330  -->  00:15:00,040
It will declare the first name property and assign whatever
296

296

00:15:00,040  -->  00:15:02,800
value is passed to it to the first name property.
297

297

00:15:02,800  -->  00:15:05,460
So at the moment, this constructor here is doing
298

298

00:15:05,460  -->  00:15:09,920
the same thing as this constructor here except in Java
299

299

00:15:09,920  -->  00:15:11,720
where it's actually doing this.
300

300

00:15:11,720  -->  00:15:13,690
If we do the equivalent thing in Java,
301

301

00:15:13,690  -->  00:15:15,240
it's doing something like this.
302

302

00:15:18,310  -->  00:15:19,173
We're getting the error here,
303

303

00:15:19,173  -->  00:15:21,080
because we declared this final.
304

304

00:15:21,080  -->  00:15:23,800
So just ignore this because now it's being assigned twice.
305

305

00:15:23,800  -->  00:15:25,570
It's being assigned up here
306

306

00:15:25,570  -->  00:15:27,270
and then it's being assigned up here.
307

307

00:15:27,270  -->  00:15:29,870
But this is the equivalent of what we're doing here.
308

308

00:15:31,290  -->  00:15:32,563
I'll switch this back.
309

309

00:15:36,140  -->  00:15:39,300
So now we have this error, though it says Val
310

310

00:15:39,300  -->  00:15:42,380
on secondary constructor parameter is not allowed.
311

311

00:15:42,380  -->  00:15:44,490
The compiler doesn't like that.
312

312

00:15:44,490  -->  00:15:47,610
For first name, we definitely didn't need it because we know
313

313

00:15:47,610  -->  00:15:49,863
the primary constructor was taken care of declaring
314

314

00:15:49,863  -->  00:15:52,880
a property but the compiler doesn't like it
315

315

00:15:52,880  -->  00:15:55,470
on the full time property either.
316

316

00:15:55,470  -->  00:16:00,120
And that's because unlike the primary constructor using val
317

317

00:16:00,120  -->  00:16:03,120
and var in a secondary constructor signature
318

318

00:16:03,120  -->  00:16:06,930
does not lead to the property being declared for us.
319

319

00:16:06,930  -->  00:16:10,880
So secondary constructors do not declare properties for us.
320

320

00:16:10,880  -->  00:16:13,110
Only the primary constructor does.
321

321

00:16:13,110  -->  00:16:15,333
So let's remove the val keyword from here.
322

322

00:16:16,670  -->  00:16:18,890
And all of our errors go away.
323

323

00:16:18,890  -->  00:16:21,800
But now let's try to use this full time property.
324

324

00:16:21,800  -->  00:16:24,960
So we'll go back up to our main function and will declare
325

325

00:16:24,960  -->  00:16:29,960
another employee ValM2=Employee.
326

326

00:16:30,147  -->  00:16:35,147
And we'll say Joe, and let's do the same thing.
327

327

00:16:35,195  -->  00:16:38,830
Well, we'll print the first name
328

328

00:16:38,830  -->  00:16:41,190
and we're not getting any errors here.
329

329

00:16:41,190  -->  00:16:43,310
But if we try to print full time
330

330

00:16:44,910  -->  00:16:47,660
of course IntelIJ isn't gonna suggest it to us.
331

331

00:16:47,660  -->  00:16:49,010
And I'm sure you expected that
332

332

00:16:49,010  -->  00:16:51,290
because we haven't actually declared it here.
333

333

00:16:51,290  -->  00:16:55,280
So as I said before, secondary constructors
334

334

00:16:55,280  -->  00:16:58,600
don't lead to declarations even if we put the Val back here
335

335

00:16:58,600  -->  00:17:00,900
which as you can tell isn't gonna work anyway,
336

336

00:17:00,900  -->  00:17:03,500
but just to illustrate, and then we press dot here,
337

337

00:17:03,500  -->  00:17:06,000
we're still not seeing full time.
338

338

00:17:06,000  -->  00:17:09,470
So keep that in mind primary constructors.
339

339

00:17:09,470  -->  00:17:13,720
You can double the parameter declaration
340

340

00:17:13,720  -->  00:17:16,400
as a property declaration but you can't do the same thing
341

341

00:17:16,400  -->  00:17:18,170
in secondary constructors.
342

342

00:17:18,170  -->  00:17:19,980
We have to actually declare the property
343

343

00:17:19,980  -->  00:17:21,620
ourselves in that case.
344

344

00:17:21,620  -->  00:17:23,730
So we'll remove val from here
345

345

00:17:23,730  -->  00:17:26,380
and we'll actually declare the property in the class.
346

346

00:17:29,710  -->  00:17:30,960
Now we're getting the air right now
347

347

00:17:30,960  -->  00:17:32,860
because we haven't signed it yet.
348

348

00:17:32,860  -->  00:17:36,100
But somebody's full time status might change.
349

349

00:17:36,100  -->  00:17:37,690
So let's switch that to Var.
350

350

00:17:37,690  -->  00:17:40,837
But we still have the error because Caitlyn still wants
351

351

00:17:40,837  -->  00:17:44,740
the property to be initialised for it to be abstract.
352

352

00:17:44,740  -->  00:17:48,640
Remember, Caitlyn doesn't want nos when you can avoid it.
353

353

00:17:48,640  -->  00:17:50,253
So let's make this true.
354

354

00:17:51,910  -->  00:17:54,960
Since we said that 99% of the time employees
355

355

00:17:54,960  -->  00:17:56,120
will be full time.
356

356

00:17:56,120  -->  00:17:58,420
So now we'll go back to the print line statement.
357

357

00:17:58,420  -->  00:18:02,230
And if we put a dot here We can now see full time
358

358

00:18:02,230  -->  00:18:04,470
and everything's working like we want it to.
359

359

00:18:04,470  -->  00:18:06,163
Let's add a third employee.
360

360

00:18:07,430  -->  00:18:11,030
And we'll make her part time just for variety here
361

361

00:18:12,787  -->  00:18:15,910
and we'll print line her details.
362

362

00:18:20,980  -->  00:18:21,813
Let's run.
363

363

00:18:25,670  -->  00:18:28,070
And we'll see that everything prints okay
364

364

00:18:28,070  -->  00:18:32,310
except I'm printing the same employee over and over again.
365

365

00:18:32,310  -->  00:18:35,010
You probably spotted that and wanted to yell,
366

366

00:18:35,010  -->  00:18:36,750
you've made a mistake, you've made a mistake.
367

367

00:18:36,750  -->  00:18:39,030
That's what I always wanna do when I'm watching a course.
368

368

00:18:39,030  -->  00:18:41,203
But of course the instructor can hear me.
369

369

00:18:43,970  -->  00:18:46,740
Okay so this time we've got John, we've got Joe,
370

370

00:18:46,740  -->  00:18:51,670
true for full time and Jane who is also true for full time.
371

371

00:18:51,670  -->  00:18:53,210
Why did that happen?
372

372

00:18:53,210  -->  00:18:56,250
Well, because we happened to sign full time here.
373

373

00:18:56,250  -->  00:18:57,420
So let's do that.
374

374

00:18:57,420  -->  00:19:01,100
This start full time equals full time.
375

375

00:19:01,100  -->  00:19:03,663
No mystery here, let's run again.
376

376

00:19:05,630  -->  00:19:09,250
And this time Jane has the correct full time status.
377

377

00:19:09,250  -->  00:19:11,090
Now of course, when you look at this,
378

378

00:19:11,090  -->  00:19:13,000
and when working with Caitlyn, you always have
379

379

00:19:13,000  -->  00:19:16,350
to ask yourself is there a more concise way to do this?
380

380

00:19:16,350  -->  00:19:19,180
And in this case there is because we can assign default
381

381

00:19:19,180  -->  00:19:22,570
values to the primary constructor parameters.
382

382

00:19:22,570  -->  00:19:25,100
And this means that most of the time, you won't need
383

383

00:19:25,100  -->  00:19:27,420
a secondary constructor or you should be able
384

384

00:19:27,420  -->  00:19:30,510
to at least reduce the number that you need.
385

385

00:19:30,510  -->  00:19:32,980
So instead of using a secondary constructor,
386

386

00:19:32,980  -->  00:19:35,990
let's change the primary constructor so that it accepts
387

387

00:19:35,990  -->  00:19:39,650
both parameters first name and full time
388

388

00:19:39,650  -->  00:19:42,430
and then we'll assign a default value of true
389

389

00:19:42,430  -->  00:19:44,450
to the full time parameter.
390

390

00:19:44,450  -->  00:19:48,280
So let's delete all of this because we're not gonna need it
391

391

00:19:49,120  -->  00:19:54,120
and instead we'll say Val full time it's a Boolean,
392

392

00:19:57,430  -->  00:19:59,630
and we'll give it the default value of true.
393

393

00:20:02,970  -->  00:20:03,803
We'll run.
394

394

00:20:06,200  -->  00:20:08,500
And we'll see that we get the same thing as we did before.
395

395

00:20:08,500  -->  00:20:12,440
Because when we don't specify a full time value now
396

396

00:20:12,440  -->  00:20:15,570
instances will get the default of true.
397

397

00:20:15,570  -->  00:20:18,510
And when we do well that value is used
398

398

00:20:18,510  -->  00:20:22,030
and so Jane still has false for full time.
399

399

00:20:22,030  -->  00:20:25,030
So you can see how default parameter values will cut down
400

400

00:20:25,030  -->  00:20:26,790
on the number of constructors you need.
401

401

00:20:26,790  -->  00:20:28,550
A lot of the time, you're only ever going
402

402

00:20:28,550  -->  00:20:30,780
to need the primary constructor.
403

403

00:20:30,780  -->  00:20:32,630
You won't have to do this sort of thing
404

404

00:20:32,630  -->  00:20:34,700
that you have to do in Java.
405

405

00:20:34,700  -->  00:20:37,160
Now, you don't have to have a primary constructor
406

406

00:20:37,160  -->  00:20:38,760
if you don't want one.
407

407

00:20:38,760  -->  00:20:40,850
If you don't want one, you just don't include
408

408

00:20:40,850  -->  00:20:43,310
parentheses after the class name.
409

409

00:20:43,310  -->  00:20:45,430
You can still have secondary constructors
410

410

00:20:45,430  -->  00:20:47,100
even without a primary constructor.
411

411

00:20:47,100  -->  00:20:49,410
So for illustration purposes,
412

412

00:20:49,410  -->  00:20:52,700
let's declare a demo class to show this.
413

413

00:20:52,700  -->  00:20:57,700
So let's say class demo and will say Val dummy,
414

414

00:20:58,730  -->  00:21:00,750
and we'll make that a string
415

415

00:21:01,680  -->  00:21:04,033
and then we'll have a secondary constructor.
416

416

00:21:06,960  -->  00:21:09,320
And all it does doesn't take any parameters.
417

417

00:21:09,320  -->  00:21:12,563
And all it does is a science evaluated dummy of hello.
418

418

00:21:14,430  -->  00:21:16,370
And you can see that this all works.
419

419

00:21:16,370  -->  00:21:19,790
And if we declare an instance of dummy,
420

420

00:21:19,790  -->  00:21:23,660
let's just print line or demo rather,
421

421

00:21:23,660  -->  00:21:27,750
let's just print line demo and demo
422

422

00:21:28,900  -->  00:21:31,170
demo.dummy.
423

423

00:21:31,170  -->  00:21:32,003
We'll print that
424

424

00:21:33,200  -->  00:21:35,410
and we'll see that the value of Hello is printed.
425

425

00:21:35,410  -->  00:21:40,160
So it's perfectly okay to not have a primary constructor.
426

426

00:21:40,160  -->  00:21:42,260
And you can notice that with this constructor,
427

427

00:21:42,260  -->  00:21:44,030
we didn't have to defer to anything.
428

428

00:21:44,030  -->  00:21:45,840
We didn't have to put colon there
429

429

00:21:45,840  -->  00:21:47,880
because there's nothing to defer to,
430

430

00:21:47,880  -->  00:21:49,490
there's nothing to delegate to,
431

431

00:21:49,490  -->  00:21:51,170
there's no primary constructor.
432

432

00:21:51,170  -->  00:21:54,720
So if you don't want or need the default code that a primary
433

433

00:21:54,720  -->  00:21:58,010
constructor gives you then you don't have to use it.
434

434

00:21:58,010  -->  00:22:03,010
Just don't include parentheses after the class name.
435

435

00:22:04,860  -->  00:22:07,500
Now you might be wondering if you can use default values
436

436

00:22:07,500  -->  00:22:09,690
and secondary constructors and you can.
437

437

00:22:09,690  -->  00:22:12,680
So if you wanted to you could also use default values
438

438

00:22:12,680  -->  00:22:15,123
on them, so that wouldn't be a problem.
439

439

00:22:15,990  -->  00:22:18,490
Okay, so we're gonna stop the video here
440

440

00:22:18,490  -->  00:22:21,630
and continue our discussion of classes in the next one.
441

441

00:22:21,630  -->  00:22:22,483
See you there.
