1
1

00:00:04,710  -->  00:00:06,930
now we're going to take a look at lambda
2

2

00:00:06,930  -->  00:00:10,559
expressions now lambdas themselves don't
3

3

00:00:10,559  -->  00:00:12,570
differ that much between cotton and Java
4

4

00:00:12,570  -->  00:00:16,139
the syntax is pretty much the same so as
5

5

00:00:16,139  -->  00:00:18,330
usual we'll just focus on what's
6

6

00:00:18,330  -->  00:00:21,300
noteworthy about Kotlin now lambdas in
7

7

00:00:21,300  -->  00:00:23,250
Kotlin have to be within curly braces
8

8

00:00:23,250  -->  00:00:25,740
and you can store them in variables
9

9

00:00:25,740  -->  00:00:28,140
there's nothing new there but you can
10

10

00:00:28,140  -->  00:00:30,720
also call them directly using the run
11

11

00:00:30,720  -->  00:00:33,030
function so let's take a look at that
12

12

00:00:33,030  -->  00:00:35,850
I've already created the usual project
13

13

00:00:35,850  -->  00:00:38,370
and package etc so inside the main
14

14

00:00:38,370  -->  00:00:40,470
function we'll say run and then we're
15

15

00:00:40,470  -->  00:00:42,149
going to run a lambda so we'll open
16

16

00:00:42,149  -->  00:00:46,040
curly braces and we'll say print line
17

17

00:00:46,040  -->  00:00:51,899
I'm in a lambda and that's it so this is
18

18

00:00:51,899  -->  00:00:54,270
a library function that will run lambdas
19

19

00:00:54,270  -->  00:00:59,600
for you and if we run the application
20

20

00:00:59,600  -->  00:01:02,670
we'll see I'm in a lambda so this is a
21

21

00:01:02,670  -->  00:01:05,159
quick way to play with lambdas and and
22

22

00:01:05,159  -->  00:01:06,659
print them out and see what you'll get
23

23

00:01:06,659  -->  00:01:09,930
alright so we often use lambdas with
24

24

00:01:09,930  -->  00:01:11,850
collection so let's create a collection
25

25

00:01:11,850  -->  00:01:13,740
to play with we're going to go into
26

26

00:01:13,740  -->  00:01:15,090
collections in more depth
27

27

00:01:15,090  -->  00:01:16,979
after we've covered lambdas but for now
28

28

00:01:16,979  -->  00:01:18,990
we'll just create a list that we can
29

29

00:01:18,990  -->  00:01:22,200
play with and we're going to use our
30

30

00:01:22,200  -->  00:01:25,049
familiar employee class so I'll go ahead
31

31

00:01:25,049  -->  00:01:29,400
and declare that first so class employee
32

32

00:01:29,400  -->  00:01:33,659
and we'll have a first name property
33

33

00:01:33,659  -->  00:01:36,930
that will be string a last name property
34

34

00:01:36,930  -->  00:01:39,299
that will be a string and we'll also add
35

35

00:01:39,299  -->  00:01:44,100
a start your property which will be an
36

36

00:01:44,100  -->  00:01:46,670
int and we want all of these to be
37

37

00:01:46,670  -->  00:01:51,950
selves
38

38

00:01:51,950  -->  00:01:56,390
there we go okay so there's nothing new
39

39

00:01:56,390  -->  00:01:58,070
here we've seen our employee class
40

40

00:01:58,070  -->  00:01:58,909
before
41

41

00:01:58,909  -->  00:02:01,040
so now we'll create a list of employee
42

42

00:02:01,040  -->  00:02:02,780
I'm going to comment out the run I'll
43

43

00:02:02,780  -->  00:02:04,820
just leave it here if you download the
44

44

00:02:04,820  -->  00:02:08,119
code you'll be able to see it and we'll
45

45

00:02:08,119  -->  00:02:12,290
say Val employees equals and we want a
46

46

00:02:12,290  -->  00:02:17,060
list of and let's create a few employees
47

47

00:02:17,060  -->  00:02:19,730
so we'll say John our usual employees
48

48

00:02:19,730  -->  00:02:22,519
John works a lot a lot of companies here
49

49

00:02:22,519  -->  00:02:30,040
John Smith 2012 and we'll have Jane
50

50

00:02:30,040  -->  00:02:33,319
Wilson and she started with the company
51

51

00:02:33,319  -->  00:02:42,160
in 2015 we'll have Mary Johnson
52

52

00:02:42,160  -->  00:02:47,930
then she started in 2010 and finally
53

53

00:02:47,930  -->  00:02:54,340
we'll have Mike Jones and he started in
54

54

00:02:54,340  -->  00:02:58,760
2002 all right so now we'll use lambdas
55

55

00:02:58,760  -->  00:03:00,500
with some of the collections functions
56

56

00:03:00,500  -->  00:03:02,959
as I said we'll go more in-depth into
57

57

00:03:02,959  -->  00:03:05,079
collections after we've covered lambdas
58

58

00:03:05,079  -->  00:03:07,970
so let's find the longest-serving
59

59

00:03:07,970  -->  00:03:10,579
employee so the way that we can do that
60

60

00:03:10,579  -->  00:03:13,040
and we'll print out the answer here is
61

61

00:03:13,040  -->  00:03:16,100
we can say employees and then we can use
62

62

00:03:16,100  -->  00:03:19,100
a function called min buy and this
63

63

00:03:19,100  -->  00:03:21,920
function wants a lambda and so we'll
64

64

00:03:21,920  -->  00:03:25,190
give it a lambda and we'll say e for
65

65

00:03:25,190  -->  00:03:29,030
employee e dot start here so what we're
66

66

00:03:29,030  -->  00:03:31,310
doing here is we're passing a lambda as
67

67

00:03:31,310  -->  00:03:34,340
a parameter to the min by function and
68

68

00:03:34,340  -->  00:03:35,720
we're saying that we want to find the
69

69

00:03:35,720  -->  00:03:38,780
employee with the minimum start year
70

70

00:03:38,780  -->  00:03:40,790
because that will be the longest-serving
71

71

00:03:40,790  -->  00:03:43,010
employee that'll be the one whose work
72

72

00:03:43,010  -->  00:03:45,440
at the company the longest so the lambda
73

73

00:03:45,440  -->  00:03:47,750
takes one argument this will be review
74

74

00:03:47,750  -->  00:03:49,010
but just to make sure we're all on the
75

75

00:03:49,010  -->  00:03:51,019
same page the lambda is taking one
76

76

00:03:51,019  -->  00:03:54,139
argument that we've called E and for
77

77

00:03:54,139  -->  00:03:56,359
every e so for every element in the
78

78

00:03:56,359  -->  00:03:58,850
collection we will become that element
79

79

00:03:58,850  -->  00:04:01,489
and then we're going to look at the
80

80

00:04:01,489  -->  00:04:04,610
start year and the min by function we'll
81

81

00:04:04,610  -->  00:04:05,900
figure out
82

82

00:04:05,900  -->  00:04:08,480
the lowest start year so obviously under
83

83

00:04:08,480  -->  00:04:10,939
the covers this will be a loop because
84

84

00:04:10,939  -->  00:04:12,620
every employee and they'll in the list
85

85

00:04:12,620  -->  00:04:15,319
has to be examined now we could have put
86

86

00:04:15,319  -->  00:04:17,479
the lambda inside parentheses so we
87

87

00:04:17,479  -->  00:04:24,020
could have gone like this and that works
88

88

00:04:24,020  -->  00:04:25,970
you'll see we don't get any compiler
89

89

00:04:25,970  -->  00:04:28,280
errors but that's a little bit more
90

90

00:04:28,280  -->  00:04:30,710
difficult to read the rule is that you
91

91

00:04:30,710  -->  00:04:32,750
can move a lambda outside the
92

92

00:04:32,750  -->  00:04:35,180
parentheses when it's the last parameter
93

93

00:04:35,180  -->  00:04:37,610
in the function call and in this case it
94

94

00:04:37,610  -->  00:04:39,650
is the last parameter because it's the
95

95

00:04:39,650  -->  00:04:42,800
only parameter but if men by took two
96

96

00:04:42,800  -->  00:04:44,660
parameters and the lambda was the last
97

97

00:04:44,660  -->  00:04:47,000
one we could still move the lambda
98

98

00:04:47,000  -->  00:04:49,070
outside the parentheses but if the
99

99

00:04:49,070  -->  00:04:51,289
lambda isn't the last argument if men by
100

100

00:04:51,289  -->  00:04:53,479
took two arguments in the lambda was in
101

101

00:04:53,479  -->  00:04:55,220
the first position then we would not be
102

102

00:04:55,220  -->  00:04:56,960
able to move it outside the parentheses
103

103

00:04:56,960  -->  00:04:58,760
so this is something to keep in mind
104

104

00:04:58,760  -->  00:05:00,620
when you write your own functions that
105

105

00:05:00,620  -->  00:05:03,260
take lambdas if you want to be able to
106

106

00:05:03,260  -->  00:05:05,509
write the lambda outside the parentheses
107

107

00:05:05,509  -->  00:05:07,250
and make sure you make it the last
108

108

00:05:07,250  -->  00:05:09,500
parameter don't make it the first
109

109

00:05:09,500  -->  00:05:11,720
parameter or another parameter that
110

110

00:05:11,720  -->  00:05:14,150
isn't the last one so I'm going to move
111

111

00:05:14,150  -->  00:05:17,060
this back outside the parentheses
112

112

00:05:17,060  -->  00:05:20,690
because it's clearer so let's run this
113

113

00:05:20,690  -->  00:05:26,750
now and that's not very helpful
114

114

00:05:26,750  -->  00:05:28,520
we haven't overridden the to string
115

115

00:05:28,520  -->  00:05:31,039
method the employees dot min by function
116

116

00:05:31,039  -->  00:05:33,139
is returning an employee but we haven't
117

117

00:05:33,139  -->  00:05:35,030
overridden two strings so we're getting
118

118

00:05:35,030  -->  00:05:37,729
the usual reference now I could override
119

119

00:05:37,729  -->  00:05:40,940
to string but I'm going to take the easy
120

120

00:05:40,940  -->  00:05:42,830
route here and just change this to a
121

121

00:05:42,830  -->  00:05:45,110
data class because all it's doing is
122

122

00:05:45,110  -->  00:05:47,240
storing state and as we know with data
123

123

00:05:47,240  -->  00:05:50,030
classes we get a nice two string version
124

124

00:05:50,030  -->  00:05:52,039
for free so now that I've done that
125

125

00:05:52,039  -->  00:05:57,050
let's run again and now we'll see that
126

126

00:05:57,050  -->  00:05:59,900
our longest-serving employee is Mike
127

127

00:05:59,900  -->  00:06:02,840
Jones he started in 2002 and everybody
128

128

00:06:02,840  -->  00:06:05,570
else started after him so we have found
129

129

00:06:05,570  -->  00:06:08,630
our longest-serving employee now we can
130

130

00:06:08,630  -->  00:06:10,250
make this print line statement a lot
131

131

00:06:10,250  -->  00:06:13,280
more concise let me put a line a blank
132

132

00:06:13,280  -->  00:06:16,820
line here so you can see it better so we
133

133

00:06:16,820  -->  00:06:19,390
can make this even more concise
134

134

00:06:19,390  -->  00:06:21,520
and rlm that we're not specifying the
135

135

00:06:21,520  -->  00:06:25,060
type of e because the compiler can infer
136

136

00:06:25,060  -->  00:06:27,370
it now there will be cases when the
137

137

00:06:27,370  -->  00:06:29,800
compiler cannot infer it and so you'll
138

138

00:06:29,800  -->  00:06:31,570
have to specify the type and when you
139

139

00:06:31,570  -->  00:06:33,070
have to do that you would do it in the
140

140

00:06:33,070  -->  00:06:35,290
usual way using a colon and then the
141

141

00:06:35,290  -->  00:06:40,150
type so we could do this and that's the
142

142

00:06:40,150  -->  00:06:42,070
exact same thing so this is just saying
143

143

00:06:42,070  -->  00:06:44,890
that the lambda is taking an argument of
144

144

00:06:44,890  -->  00:06:46,990
type employee but in this case the
145

145

00:06:46,990  -->  00:06:49,150
compiler can infer it so we don't need
146

146

00:06:49,150  -->  00:06:52,000
it now as you've seen we have the
147

147

00:06:52,000  -->  00:06:54,670
special it parameter that we've used
148

148

00:06:54,670  -->  00:06:58,210
before and we can also use it here when
149

149

00:06:58,210  -->  00:07:00,550
there's only one parameter and the
150

150

00:07:00,550  -->  00:07:02,440
compiler can infer the type we can
151

151

00:07:02,440  -->  00:07:05,320
simply use it we don't have to declare
152

152

00:07:05,320  -->  00:07:06,730
the parameter like we're doing here
153

153

00:07:06,730  -->  00:07:08,950
because the compiler will understand
154

154

00:07:08,950  -->  00:07:12,400
that it is the parameter to the lambda
155

155

00:07:12,400  -->  00:07:14,590
so we can make this even more concise by
156

156

00:07:14,590  -->  00:07:17,530
just changing this whole thing to it and
157

157

00:07:17,530  -->  00:07:19,900
because there's only one argument the
158

158

00:07:19,900  -->  00:07:23,710
compiler knows that this is actually the
159

159

00:07:23,710  -->  00:07:28,380
argument to the lambda so if we run now
160

160

00:07:28,380  -->  00:07:31,420
we'll get the same result okay so let's
161

161

00:07:31,420  -->  00:07:34,300
talk about scoping lambdas can access
162

162

00:07:34,300  -->  00:07:36,040
local variables as long as they're
163

163

00:07:36,040  -->  00:07:39,100
declared before the lambda when you use
164

164

00:07:39,100  -->  00:07:41,020
a lambda within a function they can also
165

165

00:07:41,020  -->  00:07:43,600
access the function parameters so let's
166

166

00:07:43,600  -->  00:07:46,030
try these things out we'll use the run
167

167

00:07:46,030  -->  00:07:47,050
function for this
168

168

00:07:47,050  -->  00:07:51,940
so we'll say var num equals 10 and then
169

169

00:07:51,940  -->  00:07:54,940
we'll say run and inside our lambda
170

170

00:07:54,940  -->  00:07:58,330
we're going to add 15 to num and then
171

171

00:07:58,330  -->  00:08:01,630
we'll print line num let's go ahead and
172

172

00:08:01,630  -->  00:08:08,260
run and we'll see that num is now 25 now
173

173

00:08:08,260  -->  00:08:10,680
this was trivial but it does show that
174

174

00:08:10,680  -->  00:08:13,360
you can access local variables from
175

175

00:08:13,360  -->  00:08:15,640
within lambdas but more importantly
176

176

00:08:15,640  -->  00:08:17,650
because that's not different from Java
177

177

00:08:17,650  -->  00:08:21,370
num is a var not a vowel so it's mutable
178

178

00:08:21,370  -->  00:08:23,470
but we can still access it from within
179

179

00:08:23,470  -->  00:08:25,330
the lambda now I've mentioned this a
180

180

00:08:25,330  -->  00:08:27,700
couple of times before this differs from
181

181

00:08:27,700  -->  00:08:30,370
Java where you can only access final
182

182

00:08:30,370  -->  00:08:32,360
local variables within lambdas and
183

183

00:08:32,360  -->  00:08:34,099
anonymous classes I mean how many times
184

184

00:08:34,099  -->  00:08:36,079
do we write code in Java and then when
185

185

00:08:36,079  -->  00:08:39,019
we compile it we get the error that
186

186

00:08:39,019  -->  00:08:41,990
we're trying to access a local variable
187

187

00:08:41,990  -->  00:08:44,209
that isn't final so we don't have to
188

188

00:08:44,209  -->  00:08:46,610
worry about that in Kotlin now I also
189

189

00:08:46,610  -->  00:08:48,829
mention that the local variable you're
190

190

00:08:48,829  -->  00:08:50,360
trying to access has to be declared
191

191

00:08:50,360  -->  00:08:52,820
before the lambda so if I comment this
192

192

00:08:52,820  -->  00:08:56,269
out and then I say you know are num
193

193

00:08:56,269  -->  00:08:58,820
equals ten obviously that's not going to
194

194

00:08:58,820  -->  00:09:02,240
work because the compiler is only going
195

195

00:09:02,240  -->  00:09:05,029
to actually know about this variable and
196

196

00:09:05,029  -->  00:09:08,089
generate this variable after the lambda
197

197

00:09:08,089  -->  00:09:10,779
so obviously the lambda can't access it
198

198

00:09:10,779  -->  00:09:13,100
so let's put things back to the way they
199

199

00:09:13,100  -->  00:09:16,850
were all right so now let's try using a
200

200

00:09:16,850  -->  00:09:19,040
function parameter in a lambda so for
201

201

00:09:19,040  -->  00:09:20,810
this we're going to write a simple
202

202

00:09:20,810  -->  00:09:24,780
function so we'll say fun use parameter
203

203

00:09:24,780  -->  00:09:27,310
[Music]
204

204

00:09:27,310  -->  00:09:33,500
and we'll take our list of employee ie
205

205

00:09:33,500  -->  00:09:38,600
and we'll also take a number an integer
206

206

00:09:38,600  -->  00:09:43,310
and then we'll say employee is dot for
207

207

00:09:43,310  -->  00:09:47,300
each and for each employee will print
208

208

00:09:47,300  -->  00:09:50,769
line the first link the first name and
209

209

00:09:50,769  -->  00:09:53,750
we'll also print line num obviously this
210

210

00:09:53,750  -->  00:09:55,790
is a really really dumb example but just
211

211

00:09:55,790  -->  00:09:56,959
wanted to show you that you can access
212

212

00:09:56,959  -->  00:09:59,480
function parameters from within lambdas
213

213

00:09:59,480  -->  00:10:02,390
however we can't change num because
214

214

00:10:02,390  -->  00:10:06,050
function parameters are Val variables so
215

215

00:10:06,050  -->  00:10:10,279
if we do something like this we'll see
216

216

00:10:10,279  -->  00:10:11,959
that right away we get Val cannot be
217

217

00:10:11,959  -->  00:10:13,850
reassigned so when you're referencing
218

218

00:10:13,850  -->  00:10:16,850
function parameters from within lambdas
219

219

00:10:16,850  -->  00:10:19,100
you can't change them but you can use
220

220

00:10:19,100  -->  00:10:21,620
them now I've mentioned member
221

221

00:10:21,620  -->  00:10:24,110
references before so let's briefly
222

222

00:10:24,110  -->  00:10:26,839
revisit them you can use a member
223

223

00:10:26,839  -->  00:10:28,490
reference in place of a lambda
224

224

00:10:28,490  -->  00:10:30,829
expression when all the lambda does is
225

225

00:10:30,829  -->  00:10:33,290
access a property or when it calls a
226

226

00:10:33,290  -->  00:10:34,850
top-level function that doesn't take any
227

227

00:10:34,850  -->  00:10:37,279
parameters so let's take a look at some
228

228

00:10:37,279  -->  00:10:39,320
examples let's go back to when we're
229

229

00:10:39,320  -->  00:10:41,690
calling min by and we can see that all
230

230

00:10:41,690  -->  00:10:43,160
we're doing inside the lambda is
231

231

00:10:43,160  -->  00:10:45,440
referencing a property so this is one
232

232

00:10:45,440  -->  00:10:45,930
Kay
233

233

00:10:45,930  -->  00:10:48,630
where we can replace the lambda with
234

234

00:10:48,630  -->  00:10:50,550
what's called a member reference so
235

235

00:10:50,550  -->  00:10:52,230
instead of doing this we can do the
236

236

00:10:52,230  -->  00:11:01,200
following we can say employee start here
237

237

00:11:01,200  -->  00:11:03,990
so once we use a member reference at
238

238

00:11:03,990  -->  00:11:06,870
that point we do have to put the member
239

239

00:11:06,870  -->  00:11:08,970
reference inside parentheses so we can't
240

240

00:11:08,970  -->  00:11:11,730
have this outside parenthesis and as you
241

241

00:11:11,730  -->  00:11:13,020
can see all we're doing here is
242

242

00:11:13,020  -->  00:11:15,089
providing the class name and then the
243

243

00:11:15,089  -->  00:11:17,310
property that we want to access and this
244

244

00:11:17,310  -->  00:11:19,500
is called the double colon right here
245

245

00:11:19,500  -->  00:11:24,899
and if we run now we'll get the same
246

246

00:11:24,899  -->  00:11:28,260
result Mike with who started it in 2002
247

247

00:11:28,260  -->  00:11:30,980
so let's try a function now I'm going to
248

248

00:11:30,980  -->  00:11:35,120
write another really simple function fun
249

249

00:11:35,120  -->  00:11:39,390
top-level then all this function we'll
250

250

00:11:39,390  -->  00:11:44,070
do is print line I'm in a function so if
251

251

00:11:44,070  -->  00:11:45,390
we want to use this function in our
252

252

00:11:45,390  -->  00:11:48,720
lambda now we'll just use our handy run
253

253

00:11:48,720  -->  00:11:54,060
again I'll comment this out so we'll use
254

254

00:11:54,060  -->  00:11:56,610
our handy run function to do this so
255

255

00:11:56,610  -->  00:11:59,040
we'll do say run and now we need to put
256

256

00:11:59,040  -->  00:12:01,200
this inside parentheses and because it's
257

257

00:12:01,200  -->  00:12:03,450
a top-level function we just used a
258

258

00:12:03,450  -->  00:12:05,820
double colon right off the bat and then
259

259

00:12:05,820  -->  00:12:08,130
we call top level and you'll see that
260

260

00:12:08,130  -->  00:12:10,890
there's no parentheses here because when
261

261

00:12:10,890  -->  00:12:12,570
you do this with the top-level function
262

262

00:12:12,570  -->  00:12:14,850
it can't accept arguments in fact right
263

263

00:12:14,850  -->  00:12:16,410
down here you'll see it's asking for a
264

264

00:12:16,410  -->  00:12:19,560
block with no parentheses it'll it can
265

265

00:12:19,560  -->  00:12:21,860
have a return value but no parentheses
266

266

00:12:21,860  -->  00:12:27,510
so let's run this now and we'll see I'm
267

267

00:12:27,510  -->  00:12:30,240
in a function now one syntax isn't
268

268

00:12:30,240  -->  00:12:32,130
better than the other so it's up to you
269

269

00:12:32,130  -->  00:12:34,350
which one you want to use you might be
270

270

00:12:34,350  -->  00:12:36,029
told what to use if you're working for a
271

271

00:12:36,029  -->  00:12:37,740
company and they have a style guide you
272

272

00:12:37,740  -->  00:12:39,900
might be told you know when you can use
273

273

00:12:39,900  -->  00:12:41,490
a member reference use a member
274

274

00:12:41,490  -->  00:12:43,380
reference or you might be told not to
275

275

00:12:43,380  -->  00:12:46,470
use them but one form isn't more
276

276

00:12:46,470  -->  00:12:48,480
efficient than the other form okay
277

277

00:12:48,480  -->  00:12:49,950
that's it for this video and the next
278

278

00:12:49,950  -->  00:12:51,690
one we'll start taking a look at what's
279

279

00:12:51,690  -->  00:12:55,370
called lambdas with receivers
