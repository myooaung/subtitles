1
1

00:00:04,680  -->  00:00:06,600
Alright, so this is going to be a
2

2

00:00:06,600  -->  00:00:08,519
shortish video, we're just going to
3

3

00:00:08,519  -->  00:00:11,400
quickly have a look at sets. Now they're
4

4

00:00:11,400  -->  00:00:13,650
similar to lists, except you can't have
5

5

00:00:13,650  -->  00:00:16,560
duplicate items and you create them the
6

6

00:00:16,560  -->  00:00:18,449
same way that you create lists and maps,
7

7

00:00:18,449  -->  00:00:21,930
you can use the set of an immutable set
8

8

00:00:21,930  -->  00:00:24,900
of functions. Now under the covers, you'll
9

9

00:00:24,900  -->  00:00:28,020
get a linked hash set instance I'm not
10

10

00:00:28,020  -->  00:00:29,760
going to go over creating them since you
11

11

00:00:29,760  -->  00:00:32,369
now know enough and you can experiment
12

12

00:00:32,369  -->  00:00:35,010
with how to create them on your own, but
13

13

00:00:35,010  -->  00:00:37,290
let's quickly look at a set of ints to
14

14

00:00:37,290  -->  00:00:39,180
see some of the Kotlin functions that
15

15

00:00:39,180  -->  00:00:42,989
are available to you. So I'm going to do
16

16

00:00:42,989  -->  00:00:45,660
this at the top of the main function,
17

17

00:00:45,660  -->  00:00:47,130
so that whatever we print will show up
18

18

00:00:47,130  -->  00:00:51,000
first and we'll say val set int equal
19

19

00:00:51,000  -->  00:00:59,390
set of and I'll say 10 15 19 5 3 and
20

20

00:00:59,390  -->  00:01:03,930
minus 22 and now let's add an element to
21

21

00:01:03,930  -->  00:01:06,539
the set, so we'll say set will print out
22

22

00:01:06,539  -->  00:01:08,310
the set actually after we do this so
23

23

00:01:08,310  -->  00:01:13,020
we'll say set ints dot plus 20 and so
24

24

00:01:13,020  -->  00:01:16,110
this is how you add an element into a
25

25

00:01:16,110  -->  00:01:22,409
set and let's run now, and we'll see we
26

26

00:01:22,409  -->  00:01:25,490
get our set printed. So now let's add
27

27

00:01:25,490  -->  00:01:28,619
another 10 to the set and you can
28

28

00:01:28,619  -->  00:01:30,890
probably guess what's going to happen
29

29

00:01:30,890  -->  00:01:41,610
plus 10 and let's run and we get the
30

30

00:01:41,610  -->  00:01:44,880
same set because sets can contain
31

31

00:01:44,880  -->  00:01:47,579
duplicate elements. Now you'll notice
32

32

00:01:47,579  -->  00:01:50,640
that when we added the 20 this did not
33

33

00:01:50,640  -->  00:01:52,590
change the set because this set is
34

34

00:01:52,590  -->  00:01:56,579
immutable, so when we printed out the
35

35

00:01:56,579  -->  00:01:59,729
result of set ints dot plus 20 the set includes
36

36

00:01:59,729  -->  00:02:01,740
the 20, but we didn't actually assign the
37

37

00:02:01,740  -->  00:02:03,960
new set to anything, so when we add try
38

38

00:02:03,960  -->  00:02:06,509
to add the 10, 20 is not going to be in
39

39

00:02:06,509  -->  00:02:08,900
that set so it still doesn't have it.
40

40

00:02:08,900  -->  00:02:12,090
Okay, so now let's try removing 19
41

41

00:02:12,090  -->  00:02:14,489
from the set and see what we get so
42

42

00:02:14,489  -->  00:02:19,519
we'll say print line set ints dot minus
43

43

00:02:19,519  -->  00:02:23,129
19 and let's run and see what this gives
44

44

00:02:23,129  -->  00:02:28,440
us and now we have a set that doesn't
45

45

00:02:28,440  -->  00:02:31,260
have 19 in it. Now as I pointed out, we're
46

46

00:02:31,260  -->  00:02:32,700
not really adding and removing the
47

47

00:02:32,700  -->  00:02:34,349
elements, because this set is immutable
48

48

00:02:34,349  -->  00:02:36,599
and we're not assigning the result to
49

49

00:02:36,599  -->  00:02:38,600
anything, we're just printing it.
50

50

00:02:38,600  -->  00:02:40,560
Okay, let's try to remove an element that
51

51

00:02:40,560  -->  00:02:41,879
doesn't exist,
52

52

00:02:41,879  -->  00:02:47,040
so we'll say print line set ints dot minus
53

53

00:02:47,040  -->  00:02:51,920
and we'll try to get rid of 100,
54

54

00:02:51,920  -->  00:02:58,290
let's run and as probably guess
55

55

00:02:58,290  -->  00:03:00,930
nothing happens. Alright, so let's say
56

56

00:03:00,930  -->  00:03:04,019
we want to get the average value in the
57

57

00:03:04,019  -->  00:03:06,739
set, well we can say print line set ints dot
58

58

00:03:06,739  -->  00:03:15,269
average, let's go ahead and run that and
59

59

00:03:15,269  -->  00:03:17,640
we'll see that the average is 5.0 and you'll
60

60

00:03:17,640  -->  00:03:20,159
also notice that the result is a double.
61

61

00:03:20,159  -->  00:03:23,010
Okay, so how about guessing what this
62

62

00:03:23,010  -->  00:03:27,000
will do? We'll say print line set ints dot
63

63

00:03:27,000  -->  00:03:30,599
drop 3, what do you think that's going to
64

64

00:03:30,599  -->  00:03:33,389
do? Take a look at our set and think
65

65

00:03:33,389  -->  00:03:35,489
about that for a minute before I run,
66

66

00:03:35,489  -->  00:03:37,980
I guess there are a few possibilities here,
67

67

00:03:37,980  -->  00:03:40,500
we could be saying to remove the integer 3,
68

68

00:03:40,500  -->  00:03:42,930
we could be saying to remove the
69

69

00:03:42,930  -->  00:03:45,510
integer at index 3,
70

70

00:03:45,510  -->  00:03:48,840
so that would be removing 5 or we could
71

71

00:03:48,840  -->  00:03:55,379
be saying let's run and now look at our
72

72

00:03:55,379  -->  00:03:58,230
set, we only have 5 3 and minus 22,
73

73

00:03:58,230  -->  00:03:59,819
so what we're actually saying here is to
74

74

00:03:59,819  -->  00:04:01,560
drop the first three elements from the
75

75

00:04:01,560  -->  00:04:04,919
set and that's what we did. So now let's
76

76

00:04:04,919  -->  00:04:08,129
briefly take a look at a mutable set,
77

77

00:04:08,129  -->  00:04:11,760
so I'll say val mutable int equals mutable
78

78

00:04:11,760  -->  00:04:17,010
set of and I'll say 1 2 3 4 5, so now
79

79

00:04:17,010  -->  00:04:21,000
let's add another value like we did
80

80

00:04:21,000  -->  00:04:22,860
before, so we'll say immutable int
81

81

00:04:22,860  -->  00:04:25,979
actually will print this, so let's say
82

82

00:04:25,979  -->  00:04:27,539
actually no we'll do this on a separate
83

83

00:04:27,539  -->  00:04:31,140
line, I'll say mutable int dot plus 10
84

84

00:04:31,140  -->  00:04:36,270
and now let's print mutable ints,
85

85

00:04:36,270  -->  00:04:43,590
so we'll run and once again you'll see that
86

86

00:04:43,590  -->  00:04:45,990
even though the list is mutable, we're
87

87

00:04:45,990  -->  00:04:48,810
not changing it when we call the dot
88

88

00:04:48,810  -->  00:04:50,400
plus function because the dot plus
89

89

00:04:50,400  -->  00:04:52,290
function doesn't change the original
90

90

00:04:52,290  -->  00:04:55,140
collection, it returns a result, so that's
91

91

00:04:55,140  -->  00:04:57,690
why I wanted to actually do this in two
92

92

00:04:57,690  -->  00:04:59,760
separate steps, to show you that even
93

93

00:04:59,760  -->  00:05:02,730
though this set is mutable the plus
94

94

00:05:02,730  -->  00:05:04,260
function doesn't work directly on the
95

95

00:05:04,260  -->  00:05:06,570
set and the same thing is true of the
96

96

00:05:06,570  -->  00:05:08,970
minus functions, they're defined as part
97

97

00:05:08,970  -->  00:05:11,970
of the immutable set interface and again
98

98

00:05:11,970  -->  00:05:13,770
that's something to be aware of
99

99

00:05:13,770  -->  00:05:16,800
if you're writing code and collections
100

100

00:05:16,800  -->  00:05:18,540
function doesn't seem to be changing
101

101

00:05:18,540  -->  00:05:20,460
the collection when you think it should be
102

102

00:05:20,460  -->  00:05:23,730
then check the declaration of that
103

103

00:05:23,730  -->  00:05:26,850
function to see whether it actually
104

104

00:05:26,850  -->  00:05:28,920
operates on a set, another way of looking
105

105

00:05:28,920  -->  00:05:31,230
at it or on the collection another way
106

106

00:05:31,230  -->  00:05:33,450
of doing it is to find out what
107

107

00:05:33,450  -->  00:05:35,850
interface the function belongs to,
108

108

00:05:35,850  -->  00:05:38,340
the function might belong to the immutable
109

109

00:05:38,340  -->  00:05:41,970
interface because pretty much all the time
110

110

00:05:41,970  -->  00:05:44,250
when you're dealing with a mutable and
111

111

00:05:44,250  -->  00:05:46,370
immutable collection, the mutable
112

112

00:05:46,370  -->  00:05:49,200
interface is a sub interface of the
113

113

00:05:49,200  -->  00:05:52,080
immutable interface, so it contains all
114

114

00:05:52,080  -->  00:05:53,700
of the functions that you can do on
115

115

00:05:53,700  -->  00:05:56,550
immutable, the immutable collection as well
116

116

00:05:56,550  -->  00:05:58,860
as additional things you can do on the
117

117

00:05:58,860  -->  00:06:01,320
mutable collection, so when it comes to
118

118

00:06:01,320  -->  00:06:03,480
sets, the plus and minus functions are
119

119

00:06:03,480  -->  00:06:06,330
part of the immutable, immutable set
120

120

00:06:06,330  -->  00:06:09,570
interface and by the way drop works with
121

121

00:06:09,570  -->  00:06:12,090
all types of collections. Now there's
122

122

00:06:12,090  -->  00:06:14,190
another group of collections that don't
123

123

00:06:14,190  -->  00:06:16,050
implement the collections interface,
124

124

00:06:16,050  -->  00:06:18,330
they're called sequences and we're going
125

125

00:06:18,330  -->  00:06:20,910
to cover them later on but what I want
126

126

00:06:20,910  -->  00:06:22,770
to show you next is some of the cooler
127

127

00:06:22,770  -->  00:06:24,510
stuff you can do with the collections
128

128

00:06:24,510  -->  00:06:26,160
classes in Kotlin and we're going to
129

129

00:06:26,160  -->  00:06:29,630
look at that in the next video.
