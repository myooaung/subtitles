1
1

00:00:04,750  -->  00:00:07,519
alright let's talk about interfaces now
2

2

00:00:07,519  -->  00:00:09,410
there isn't a lot to say about them
3

3

00:00:09,410  -->  00:00:10,789
because they're not much different from
4

4

00:00:10,789  -->  00:00:13,370
Java now of course all the syntax
5

5

00:00:13,370  -->  00:00:15,919
changes apply to them all the stuff that
6

6

00:00:15,919  -->  00:00:17,419
we've seen in the way that you declare
7

7

00:00:17,419  -->  00:00:19,759
class is but other than that there's not
8

8

00:00:19,759  -->  00:00:21,500
a lot of difference but let's take a
9

9

00:00:21,500  -->  00:00:23,450
look at them because there are a few
10

10

00:00:23,450  -->  00:00:25,550
things I want to say about them so we're
11

11

00:00:25,550  -->  00:00:27,500
gonna declare an interface called my
12

12

00:00:27,500  -->  00:00:29,630
interface let me get rid of this error
13

13

00:00:29,630  -->  00:00:31,910
first for the data class so we'll say
14

14

00:00:31,910  -->  00:00:38,480
interface my interface and that's pretty
15

15

00:00:38,480  -->  00:00:39,890
much all there is to declaring an
16

16

00:00:39,890  -->  00:00:42,740
interface now of course you will never
17

17

00:00:42,740  -->  00:00:45,260
see parentheses after an interface name
18

18

00:00:45,260  -->  00:00:46,940
you'll get an interface may not have a
19

19

00:00:46,940  -->  00:00:50,120
constructor because you never actually
20

20

00:00:50,120  -->  00:00:52,070
create an instance of an interface so
21

21

00:00:52,070  -->  00:00:54,380
having a primary constructor wouldn't
22

22

00:00:54,380  -->  00:00:56,960
make sense now let me declare a sub
23

23

00:00:56,960  -->  00:01:01,670
interface that extends my interface I'll
24

24

00:01:01,670  -->  00:01:05,269
call it my sub interface and just as his
25

25

00:01:05,269  -->  00:01:08,509
classes you just extend an interface
26

26

00:01:08,509  -->  00:01:10,490
like this by using a colon and then
27

27

00:01:10,490  -->  00:01:13,249
following it with the super interface
28

28

00:01:13,249  -->  00:01:16,670
name now is there anything here that is
29

29

00:01:16,670  -->  00:01:18,469
a little surprising or perhaps what you
30

30

00:01:18,469  -->  00:01:20,450
wouldn't expect just take a look at this
31

31

00:01:20,450  -->  00:01:21,139
for a minute
32

32

00:01:21,139  -->  00:01:24,229
so my sub interface is extending
33

33

00:01:24,229  -->  00:01:26,299
interface now if we go up to classes
34

34

00:01:26,299  -->  00:01:28,670
where we had something else extend
35

35

00:01:28,670  -->  00:01:30,499
something you'll notice that we had to
36

36

00:01:30,499  -->  00:01:32,780
use the open keyword here otherwise
37

37

00:01:32,780  -->  00:01:35,329
nothing could extend something well you
38

38

00:01:35,329  -->  00:01:36,619
don't have to do that with interfaces
39

39

00:01:36,619  -->  00:01:39,380
they they're just extendable by default
40

40

00:01:39,380  -->  00:01:42,170
so we didn't have to explicitly declare
41

41

00:01:42,170  -->  00:01:44,749
the interfaces being open okay so let's
42

42

00:01:44,749  -->  00:01:47,539
add a function to my interface we'll add
43

43

00:01:47,539  -->  00:01:51,200
a function called my function and it'll
44

44

00:01:51,200  -->  00:01:55,429
take a string parameter and it'll return
45

45

00:01:55,429  -->  00:01:59,779
a string and well do the same thing for
46

46

00:01:59,779  -->  00:02:02,929
my sub interface it'll have that should
47

47

00:02:02,929  -->  00:02:06,770
be a lowercase M it'll have a function
48

48

00:02:06,770  -->  00:02:11,270
called my sub function and it'll let's
49

49

00:02:11,270  -->  00:02:13,730
say up let's make it take an int you
50

50

00:02:13,730  -->  00:02:16,879
know int and let's have this one return
51

51

00:02:16,879  -->  00:02:17,900
a string as well
52

52

00:02:17,900  -->  00:02:20,650
now we could have my sub-interface
53

53

00:02:20,650  -->  00:02:23,840
override my function that would actually
54

54

00:02:23,840  -->  00:02:25,940
work katli wouldn't complain you could
55

55

00:02:25,940  -->  00:02:27,769
put open here and have it override it
56

56

00:02:27,769  -->  00:02:29,659
down here but you know it's an interface
57

57

00:02:29,659  -->  00:02:31,250
so obviously there wouldn't be much of a
58

58

00:02:31,250  -->  00:02:33,830
reason to do that okay so now let's have
59

59

00:02:33,830  -->  00:02:37,040
the something class implement my sub
60

60

00:02:37,040  -->  00:02:39,079
interface so we'll come up to something
61

61

00:02:39,079  -->  00:02:43,010
and just as with classes you just put a
62

62

00:02:43,010  -->  00:02:47,510
call in and say my sub interface and now
63

63

00:02:47,510  -->  00:02:48,620
of course we're gonna get an error
64

64

00:02:48,620  -->  00:02:50,569
because we haven't implemented the
65

65

00:02:50,569  -->  00:02:52,879
methods in my sub interface so I'm going
66

66

00:02:52,879  -->  00:02:54,859
to have IntelliJ do that for me
67

67

00:02:54,859  -->  00:02:57,859
so I'll just right-click go to generate
68

68

00:02:57,859  -->  00:03:01,280
I want it to implement methods and we
69

69

00:03:01,280  -->  00:03:03,290
have two methods we have two well it
70

70

00:03:03,290  -->  00:03:04,849
says methods but two functions we have
71

71

00:03:04,849  -->  00:03:08,030
to implement one my function in the
72

72

00:03:08,030  -->  00:03:10,609
parent interface and then my sub
73

73

00:03:10,609  -->  00:03:13,310
function in my sub interface so we'll
74

74

00:03:13,310  -->  00:03:14,750
click OK and we get our two functions
75

75

00:03:14,750  -->  00:03:17,599
with the override keyword there and two
76

76

00:03:17,599  -->  00:03:19,670
bodies with two dus in them now of
77

77

00:03:19,670  -->  00:03:22,459
course a class can extend more than one
78

78

00:03:22,459  -->  00:03:24,829
interface and also it can extend a class
79

79

00:03:24,829  -->  00:03:27,019
and also implement an interface so let's
80

80

00:03:27,019  -->  00:03:29,900
go up to laser printer it's extending
81

81

00:03:29,900  -->  00:03:31,340
the printer class I'm going to put this
82

82

00:03:31,340  -->  00:03:33,079
on a separate line and we'll also have
83

83

00:03:33,079  -->  00:03:38,359
it extend the my interface class so
84

84

00:03:38,359  -->  00:03:40,730
there we go and of course by doing that
85

85

00:03:40,730  -->  00:03:44,269
we have to now implement the function in
86

86

00:03:44,269  -->  00:03:46,370
my interface but rather than do that I'm
87

87

00:03:46,370  -->  00:03:50,810
just going to remove this I just wanted
88

88

00:03:50,810  -->  00:03:53,030
to show you nothing earth-shattering I'm
89

89

00:03:53,030  -->  00:03:54,230
sure you would have figured that out by
90

90

00:03:54,230  -->  00:03:56,440
yourself but now you've seen it now
91

91

00:03:56,440  -->  00:03:58,669
interfaces can have properties and these
92

92

00:03:58,669  -->  00:04:01,340
properties don't have to be abstract you
93

93

00:04:01,340  -->  00:04:03,620
can even provide accessors for them and
94

94

00:04:03,620  -->  00:04:06,230
sub interfaces can override the
95

95

00:04:06,230  -->  00:04:08,900
accessors so let's go ahead to my
96

96

00:04:08,900  -->  00:04:13,549
interface and let's add a property to my
97

97

00:04:13,549  -->  00:04:18,070
interface so we'll say Val number and
98

98

00:04:18,070  -->  00:04:21,380
we'll make it type int now at the moment
99

99

00:04:21,380  -->  00:04:23,690
this is abstract because we haven't
100

100

00:04:23,690  -->  00:04:26,570
assigned it an initial value and you'll
101

101

00:04:26,570  -->  00:04:28,969
see now that the something class and the
102

102

00:04:28,969  -->  00:04:31,310
something else class because it's it
103

103

00:04:31,310  -->  00:04:32,990
sense of something class they have
104

104

00:04:32,990  -->  00:04:36,160
errors because there's no concrete
105

105

00:04:36,160  -->  00:04:39,140
property definition in them and the
106

106

00:04:39,140  -->  00:04:41,240
property definition and my interface is
107

107

00:04:41,240  -->  00:04:44,030
abstract so let's go up to the something
108

108

00:04:44,030  -->  00:04:47,630
class and we'll make the property
109

109

00:04:47,630  -->  00:04:50,080
definition concrete so we'll say
110

110

00:04:50,080  -->  00:04:53,330
override because we're overriding a
111

111

00:04:53,330  -->  00:04:56,000
property in the interface and we'll say
112

112

00:04:56,000  -->  00:05:00,470
Val number and did we make that a
113

113

00:05:00,470  -->  00:05:02,180
shorter an inch we made it an int okay
114

114

00:05:02,180  -->  00:05:06,380
so let's make it an int and we'll give
115

115

00:05:06,380  -->  00:05:10,760
it the value of 25 and now you'll see
116

116

00:05:10,760  -->  00:05:12,710
the errors have gone away because now
117

117

00:05:12,710  -->  00:05:15,260
the class contains a concrete
118

118

00:05:15,260  -->  00:05:17,630
implementation of the abstract property
119

119

00:05:17,630  -->  00:05:20,210
defined in my interface which of course
120

120

00:05:20,210  -->  00:05:23,360
is the parent of my sub interface okay
121

121

00:05:23,360  -->  00:05:26,180
now let's add a concrete property to the
122

122

00:05:26,180  -->  00:05:31,190
class so we'll say Val number two int
123

123

00:05:31,190  -->  00:05:34,040
and we want this to be concrete so we'll
124

124

00:05:34,040  -->  00:05:36,770
get a give it a value of 50 and you'll
125

125

00:05:36,770  -->  00:05:38,750
see that we have an error and the error
126

126

00:05:38,750  -->  00:05:42,080
is property initializers are not allowed
127

127

00:05:42,080  -->  00:05:45,070
in interfaces so this is one area where
128

128

00:05:45,070  -->  00:05:48,290
interfaces differ from classes you can't
129

129

00:05:48,290  -->  00:05:50,360
use property initializers within
130

130

00:05:50,360  -->  00:05:53,090
interfaces so if we want this to be
131

131

00:05:53,090  -->  00:05:55,610
concrete and we can make it concrete how
132

132

00:05:55,610  -->  00:05:58,040
would we do that how would we want it so
133

133

00:05:58,040  -->  00:06:01,880
that this is going to our interface
134

134

00:06:01,880  -->  00:06:04,370
we'll return a particular value unless a
135

135

00:06:04,370  -->  00:06:07,430
superclass overrides it well we have to
136

136

00:06:07,430  -->  00:06:10,910
use a custom get so I'll indent here and
137

137

00:06:10,910  -->  00:06:14,330
I'll say get and we can return whatever
138

138

00:06:14,330  -->  00:06:16,760
we want here so we could say return 45
139

139

00:06:16,760  -->  00:06:19,190
or we could do something like return
140

140

00:06:19,190  -->  00:06:23,590
number times 100 or something like that
141

141

00:06:23,590  -->  00:06:26,660
so now this is a concrete implementation
142

142

00:06:26,660  -->  00:06:28,130
and you'll see that we're not getting
143

143

00:06:28,130  -->  00:06:30,440
any errors up in the something class
144

144

00:06:30,440  -->  00:06:33,440
even though it doesn't declare a number
145

145

00:06:33,440  -->  00:06:35,780
to property and that's because this is a
146

146

00:06:35,780  -->  00:06:37,760
concrete property so it's all taken care
147

147

00:06:37,760  -->  00:06:39,560
of and the in the interface now if we
148

148

00:06:39,560  -->  00:06:44,110
wanted to we could override it here
149

149

00:06:44,110  -->  00:06:47,270
number two int and we could return
150

150

00:06:47,270  -->  00:06:50,870
something else you know 25 again that's
151

151

00:06:50,870  -->  00:06:54,200
perfectly okay but in this case we want
152

152

00:06:54,200  -->  00:06:55,610
to let the interface handle that
153

153

00:06:55,610  -->  00:06:57,830
property so we're not going to declare
154

154

00:06:57,830  -->  00:06:59,600
it and that's really all there is to
155

155

00:06:59,600  -->  00:07:02,300
interfaces I have one last thing to
156

156

00:07:02,300  -->  00:07:04,520
mention though you'll recall that when
157

157

00:07:04,520  -->  00:07:06,320
we were discussing classes we talked
158

158

00:07:06,320  -->  00:07:08,450
about a backing field that you can
159

159

00:07:08,450  -->  00:07:11,690
access within custom sets and gets using
160

160

00:07:11,690  -->  00:07:13,460
the fields identifier
161

161

00:07:13,460  -->  00:07:17,440
well properties in interfaces don't have
162

162

00:07:17,440  -->  00:07:20,450
backing fields and so the set and the
163

163

00:07:20,450  -->  00:07:23,660
get can't access a backing field so if
164

164

00:07:23,660  -->  00:07:26,420
we come down here we can't do something
165

165

00:07:26,420  -->  00:07:31,400
like field times 100 you'll see that we
166

166

00:07:31,400  -->  00:07:34,100
get property in an interface cannot have
167

167

00:07:34,100  -->  00:07:36,350
a backing field so this differs from
168

168

00:07:36,350  -->  00:07:39,170
from classes where you can access the
169

169

00:07:39,170  -->  00:07:41,180
backing field for properties using
170

170

00:07:41,180  -->  00:07:45,050
within the custom set and get properties
171

171

00:07:45,050  -->  00:07:46,760
and interfaces don't have a backing
172

172

00:07:46,760  -->  00:07:49,340
field so obviously the field identifier
173

173

00:07:49,340  -->  00:07:51,590
isn't going to work so that's something
174

174

00:07:51,590  -->  00:07:52,820
to keep in mind when you're designing
175

175

00:07:52,820  -->  00:07:56,030
your classes and interfaces all right
176

176

00:07:56,030  -->  00:07:57,800
that's all for inheritance I'll see you
177

177

00:07:57,800  -->  00:08:00,460
in the next video
