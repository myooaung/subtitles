WEBVTT
1
1

00:00:00.233  -->  00:00:05.233
(lively music)
(keyboard keys clacking)
2

2

00:00:05.540  -->  00:00:08.103
<v Sarah>Before we take a deeper dive into classes</v>
3

3

00:00:08.103  -->  00:00:10.570
and functions and all the other good stuff,
4

4

00:00:10.570  -->  00:00:13.140
let's take a look at access modifiers
5

5

00:00:13.140  -->  00:00:14.920
because every declaration
6

6

00:00:14.920  -->  00:00:17.420
whether it be a class, a function, an interface
7

7

00:00:17.420  -->  00:00:19.640
or a property has an implicit
8

8

00:00:19.640  -->  00:00:22.180
or an explicit access modifier,
9

9

00:00:22.180  -->  00:00:25.430
also known as visibility modifiers.
10

10

00:00:25.430  -->  00:00:27.890
In Kotlin, the meaning of an access modifier
11

11

00:00:27.890  -->  00:00:29.300
can be different depending
12

12

00:00:29.300  -->  00:00:31.520
on whether you're dealing with something declared
13

13

00:00:31.520  -->  00:00:33.410
at the top level of a file
14

14

00:00:33.410  -->  00:00:35.340
or something that's a class member.
15

15

00:00:35.340  -->  00:00:38.300
In Kotlin, there are four visibility modifiers.
16

16

00:00:38.300  -->  00:00:41.330
Remember, in Java, you can only ever have classes
17

17

00:00:41.330  -->  00:00:43.490
at the top level but in Kotlin,
18

18

00:00:43.490  -->  00:00:46.640
you can have functions and you can also have properties.
19

19

00:00:46.640  -->  00:00:49.070
We haven't looked at that yet but properties
20

20

00:00:49.070  -->  00:00:51.090
can also be declared at the top level.
21

21

00:00:51.090  -->  00:00:53.850
In Kotlin, there are four visibility modifiers,
22

22

00:00:53.850  -->  00:00:56.100
there's public, private and protected,
23

23

00:00:56.100  -->  00:00:57.870
just like in Java,
24

24

00:00:57.870  -->  00:00:59.620
there's also internal
25

25

00:00:59.620  -->  00:01:01.040
which we'll cover shortly.
26

26

00:01:01.040  -->  00:01:03.850
So, let's start with the top-level items.
27

27

00:01:03.850  -->  00:01:06.550
Top-level items are public by default,
28

28

00:01:06.550  -->  00:01:09.350
so if you don't specify an access modifier,
29

29

00:01:09.350  -->  00:01:12.190
then the declaration is public.
30

30

00:01:12.190  -->  00:01:13.660
This is different from Java
31

31

00:01:13.660  -->  00:01:17.298
because in Java, the default visibility for classes
32

32

00:01:17.298  -->  00:01:20.170
which is all that can be declared at the top level
33

33

00:01:20.170  -->  00:01:21.950
is package private
34

34

00:01:21.950  -->  00:01:24.010
meaning that everything in the same package
35

35

00:01:24.010  -->  00:01:26.590
as the class can access the class
36

36

00:01:26.590  -->  00:01:30.950
but in Kotlin, the default visibility is public
37

37

00:01:30.950  -->  00:01:34.530
meaning that everything can see and access the class.
38

38

00:01:34.530  -->  00:01:37.472
In Kotlin, if a top-level item is private,
39

39

00:01:37.472  -->  00:01:41.770
then everything in the same file can access it.
40

40

00:01:41.770  -->  00:01:43.600
And this is another key difference
41

41

00:01:43.600  -->  00:01:45.010
between Java and Kotlin
42

42

00:01:45.010  -->  00:01:47.590
because in Java, if a class is public,
43

43

00:01:47.590  -->  00:01:51.660
its name has to match the file name in which it lives.
44

44

00:01:51.660  -->  00:01:54.890
So, because of that, there can only ever one public class
45

45

00:01:54.890  -->  00:01:56.575
in a single source file.
46

46

00:01:56.575  -->  00:01:58.950
But that's not the case in Kotlin.
47

47

00:01:58.950  -->  00:02:01.180
In Kotlin, there's no matching requirement
48

48

00:02:01.180  -->  00:02:03.530
between class names and file names,
49

49

00:02:03.530  -->  00:02:06.580
so you can have as many public classes as you want
50

50

00:02:06.580  -->  00:02:08.530
in a single Kotlin file.
51

51

00:02:08.530  -->  00:02:11.380
In Kotlin, you can also use private with classes
52

52

00:02:11.380  -->  00:02:12.700
which you can't do in Java.
53

53

00:02:12.700  -->  00:02:15.080
If you try to declare a Java class as private,
54

54

00:02:15.080  -->  00:02:17.830
it won't work because obviously nothing's ever going
55

55

00:02:17.830  -->  00:02:19.780
to be able to see that class,
56

56

00:02:19.780  -->  00:02:22.870
so it wouldn't make sense but in Kotlin,
57

57

00:02:22.870  -->  00:02:24.870
you can use private with classes
58

58

00:02:24.870  -->  00:02:26.410
and that's because private means
59

59

00:02:26.410  -->  00:02:28.480
that everything in the same file
60

60

00:02:28.480  -->  00:02:31.270
can access the class, so even though the class is private,
61

61

00:02:31.270  -->  00:02:34.900
there's still other things that can use it
62

62

00:02:34.900  -->  00:02:36.713
as long as they're in the same file.
63

63

00:02:38.950  -->  00:02:41.740
So, I've already created a Kotlin project here.
64

64

00:02:41.740  -->  00:02:44.510
I've called mine AccessModifiers
65

65

00:02:44.510  -->  00:02:46.590
and set up the usual package and everything.
66

66

00:02:46.590  -->  00:02:48.570
You can do this however you like.
67

67

00:02:48.570  -->  00:02:50.930
Let's add a class to our Kotlin file.
68

68

00:02:50.930  -->  00:02:53.880
We'll add a class called Employee.
69

69

00:02:53.880  -->  00:02:57.470
We've seen this before and we're gonna make it private.
70

70

00:02:57.470  -->  00:02:59.973
Private class Employee.
71

71

00:03:01.520  -->  00:03:02.780
This wouldn't work in Java.
72

72

00:03:02.780  -->  00:03:04.600
If you tried to declare a class as private,
73

73

00:03:04.600  -->  00:03:05.590
you'd get an error.
74

74

00:03:05.590  -->  00:03:08.570
So, this class is visible to everything in the same file,
75

75

00:03:08.570  -->  00:03:11.130
so we should be able to use it from our main function
76

76

00:03:11.130  -->  00:03:13.120
'cause the main function is in the same file,
77

77

00:03:13.120  -->  00:03:16.400
so we can say val emp equals Employee
78

78

00:03:18.730  -->  00:03:20.313
and we can print line emp.
79

79

00:03:21.250  -->  00:03:23.573
And we'll see we have no errors and if we run,
80

80

00:03:26.840  -->  00:03:31.440
we'll just see the usual instance reference here
81

81

00:03:31.440  -->  00:03:34.187
and so, even though this class was declared private,
82

82

00:03:34.187  -->  00:03:38.470
we can use it from the same file.
83

83

00:03:38.470  -->  00:03:40.930
If we were in Java, when we declared a class private,
84

84

00:03:40.930  -->  00:03:42.320
nothing would be able to use it
85

85

00:03:42.320  -->  00:03:44.210
because it's not visible to anything
86

86

00:03:44.210  -->  00:03:46.470
and that's why classes can't be private
87

87

00:03:46.470  -->  00:03:48.210
because there's no point in creating a class
88

88

00:03:48.210  -->  00:03:49.620
that nothing can use.
89

89

00:03:49.620  -->  00:03:51.660
So, that's what public and private mean
90

90

00:03:51.660  -->  00:03:54.230
for top-level items in Kotlin.
91

91

00:03:54.230  -->  00:03:57.270
You can't use protected at the top level.
92

92

00:03:57.270  -->  00:04:01.020
Now, Kotlin also has the notion of a module
93

93

00:04:01.020  -->  00:04:03.070
and a module is a group of files
94

94

00:04:03.070  -->  00:04:04.370
that are compiled together
95

95

00:04:04.370  -->  00:04:08.840
and in IntelliJ, AccessModifiers is a module,
96

96

00:04:08.840  -->  00:04:11.010
but it could be a group of files compiled
97

97

00:04:11.010  -->  00:04:12.990
by Gradle or Maven.
98

98

00:04:12.990  -->  00:04:14.910
You can have more than one module
99

99

00:04:14.910  -->  00:04:16.340
in an IntelliJ project
100

100

00:04:16.340  -->  00:04:18.190
and we'll see an example of that later
101

101

00:04:18.190  -->  00:04:20.270
when we look at imports.
102

102

00:04:20.270  -->  00:04:21.670
So, I mentioned that Kotlin
103

103

00:04:21.670  -->  00:04:24.791
has a fourth access modifier called internal.
104

104

00:04:24.791  -->  00:04:27.830
A top-level item that's marked internal
105

105

00:04:27.830  -->  00:04:30.040
is visible inside the module.
106

106

00:04:30.040  -->  00:04:32.430
So, in other words, everything that belongs
107

107

00:04:32.430  -->  00:04:35.500
to the same module can see declarations
108

108

00:04:35.500  -->  00:04:37.520
that are marked as internal
109

109

00:04:37.520  -->  00:04:39.770
and we'll take a look at this later once again
110

110

00:04:39.770  -->  00:04:41.220
when we look at imports.
111

111

00:04:41.220  -->  00:04:44.180
So, that's the four access modifiers in Kotlin
112

112

00:04:44.180  -->  00:04:47.240
and how they apply to top-level items.
113

113

00:04:47.240  -->  00:04:50.263
Let's go to a slide so we can just do a quick review.
114

114

00:04:52.420  -->  00:04:54.060
So, for top-level items,
115

115

00:04:54.060  -->  00:04:56.390
if the access modifier is private,
116

116

00:04:56.390  -->  00:05:00.130
in Kotlin that means it can be seen within the same file.
117

117

00:05:00.130  -->  00:05:03.520
You can't use private with classes in Java
118

118

00:05:03.520  -->  00:05:06.640
and since classes are the only top-level items in Java,
119

119

00:05:06.640  -->  00:05:08.380
that means you can't use private
120

120

00:05:08.380  -->  00:05:09.750
for top-level items.
121

121

00:05:09.750  -->  00:05:13.380
Protected can't be used in Kotlin or Java
122

122

00:05:13.380  -->  00:05:14.810
for top-level items.
123

123

00:05:14.810  -->  00:05:18.630
Public means visible everywhere in both Kotlin and Java
124

124

00:05:18.630  -->  00:05:21.300
and internal which is only available in Kotlin,
125

125

00:05:21.300  -->  00:05:23.750
means visible within the same module.
126

126

00:05:23.750  -->  00:05:25.590
So, as far as top-level item goes,
127

127

00:05:25.590  -->  00:05:27.980
you have to pay attention to the difference in meaning
128

128

00:05:27.980  -->  00:05:29.760
between Kotlin and Java
129

129

00:05:29.760  -->  00:05:34.710
because out of the three existing access modifiers in Java,
130

130

00:05:34.710  -->  00:05:38.190
only private differs from what it means in Kotlin.
131

131

00:05:38.190  -->  00:05:39.783
Let's go back to IntelliJ.
132

132

00:05:42.300  -->  00:05:44.250
Let's talk briefly about class members,
133

133

00:05:44.250  -->  00:05:46.600
meaning items declared within a class.
134

134

00:05:46.600  -->  00:05:47.880
There isn't a lot of difference
135

135

00:05:47.880  -->  00:05:49.358
between Kotlin and Java here.
136

136

00:05:49.358  -->  00:05:52.130
Public, private and protected mean the same
137

137

00:05:52.130  -->  00:05:53.180
as they do in Java.
138

138

00:05:53.180  -->  00:05:54.650
So, the only difference here
139

139

00:05:54.650  -->  00:05:57.190
is in the internal modifier.
140

140

00:05:57.190  -->  00:06:00.297
Now, once again, anything inside the same module
141

141

00:06:00.297  -->  00:06:04.680
that can see a class, can also see its internal members.
142

142

00:06:04.680  -->  00:06:08.430
So, if we have a class A and class A
143

143

00:06:08.430  -->  00:06:11.410
is declared public and has a property called x
144

144

00:06:11.410  -->  00:06:14.000
that is declared to be internal,
145

145

00:06:14.000  -->  00:06:17.290
then anything inside the same module as class A
146

146

00:06:17.290  -->  00:06:19.730
can see the property x.
147

147

00:06:19.730  -->  00:06:22.660
Now, if class A was declared to be private,
148

148

00:06:22.660  -->  00:06:26.050
meaning that only items within the same file
149

149

00:06:26.050  -->  00:06:28.010
as class A can see it,
150

150

00:06:28.010  -->  00:06:30.765
then obviously only items within the file
151

151

00:06:30.765  -->  00:06:33.090
can see the property x,
152

152

00:06:33.090  -->  00:06:35.300
even though it's declared internal
153

153

00:06:35.300  -->  00:06:37.040
and in fact, declaring it internal
154

154

00:06:37.040  -->  00:06:38.560
wouldn't make sense in this case,
155

155

00:06:38.560  -->  00:06:43.010
so you only wanna declare properties internal essentially
156

156

00:06:43.010  -->  00:06:45.570
if they can be seen outside the file,
157

157

00:06:45.570  -->  00:06:49.220
otherwise there's no point giving access
158

158

00:06:49.220  -->  00:06:51.620
to other modules 'cause they're not gonna be able
159

159

00:06:51.620  -->  00:06:53.350
to see the class and therefore they're not gonna
160

160

00:06:53.350  -->  00:06:54.990
be able to see the property.
161

161

00:06:54.990  -->  00:06:56.360
There's one other important difference
162

162

00:06:56.360  -->  00:06:58.070
between Kotlin and Java.
163

163

00:06:58.070  -->  00:07:02.140
In Kotlin, classes can't see private members belonging
164

164

00:07:02.140  -->  00:07:03.650
to inner classes.
165

165

00:07:03.650  -->  00:07:06.280
So, that's the one difference between Kotlin and Java.
166

166

00:07:06.280  -->  00:07:07.991
One word before we go
167

167

00:07:07.991  -->  00:07:10.700
about what happens under the covers
168

168

00:07:10.700  -->  00:07:12.270
with the visibility modifiers.
169

169

00:07:12.270  -->  00:07:16.400
Remember that the Kotlin application will run on the JVM
170

170

00:07:16.400  -->  00:07:19.290
and Java doesn't have the internal modifier.
171

171

00:07:19.290  -->  00:07:21.860
It also treats private differently
172

172

00:07:21.860  -->  00:07:24.970
and it has the private package visibility
173

173

00:07:24.970  -->  00:07:27.342
meaning items that can be seen
174

174

00:07:27.342  -->  00:07:30.210
from other writings from within the same package
175

175

00:07:30.210  -->  00:07:32.270
and in fact that's the default visibility
176

176

00:07:32.270  -->  00:07:33.550
of classes in Java.
177

177

00:07:33.550  -->  00:07:35.920
If you don't specify public,
178

178

00:07:35.920  -->  00:07:38.160
the class is private package.
179

179

00:07:38.160  -->  00:07:41.080
So, in when Kotlin applications are compiled,
180

180

00:07:41.080  -->  00:07:44.320
the access modifiers have to be compiled
181

181

00:07:44.320  -->  00:07:46.920
to modifiers that the JVM understands,
182

182

00:07:46.920  -->  00:07:48.230
so this is what happens.
183

183

00:07:48.230  -->  00:07:51.640
Private is compiled to package private,
184

184

00:07:51.640  -->  00:07:54.960
internal is compiled to public.
185

185

00:07:54.960  -->  00:07:57.660
Now, keep in mind that Kotlin enforces
186

186

00:07:57.660  -->  00:08:00.370
its visibility rules at compile time.
187

187

00:08:00.370  -->  00:08:03.080
So, the way it maps its modifiers to byte code
188

188

00:08:03.080  -->  00:08:06.560
won't lead to its visibility rules being broken,
189

189

00:08:06.560  -->  00:08:08.700
it won't break encapsulation.
190

190

00:08:08.700  -->  00:08:11.540
However, when you mix Kotlin and Java,
191

191

00:08:11.540  -->  00:08:14.080
this can lead to Java sometimes being able
192

192

00:08:14.080  -->  00:08:16.360
to access things that it wouldn't be allowed
193

193

00:08:16.360  -->  00:08:18.010
to access from Kotlin.
194

194

00:08:18.010  -->  00:08:23.010
So, for example, if we look at the internal modifier,
195

195

00:08:23.400  -->  00:08:26.780
in Kotlin that means that only members of the same module
196

196

00:08:26.780  -->  00:08:28.920
can access something marked internal
197

197

00:08:28.920  -->  00:08:31.470
but because internal is compiled to public
198

198

00:08:31.470  -->  00:08:35.060
under the covers, then any Java code can access it.
199

199

00:08:35.060  -->  00:08:38.400
So, keep this in mind when you mix Kotlin and Java.
200

200

00:08:38.400  -->  00:08:40.760
Now the Kotlin compiler does do something
201

201

00:08:40.760  -->  00:08:41.780
to help you with this.
202

202

00:08:41.780  -->  00:08:45.640
It makes the names of internal items really, really ugly
203

203

00:08:45.640  -->  00:08:46.950
in the byte code,
204

204

00:08:46.950  -->  00:08:49.840
so you have to use those ugly names
205

205

00:08:49.840  -->  00:08:51.640
if you wanna access them from Java
206

206

00:08:51.640  -->  00:08:54.190
and so, this will kind of alert you to the fact
207

207

00:08:54.190  -->  00:08:55.500
that you're probably doing something
208

208

00:08:55.500  -->  00:08:57.190
you're not supposed to be doing.
209

209

00:08:57.190  -->  00:08:59.650
So, if you're ever writing Java code
210

210

00:08:59.650  -->  00:09:00.900
and you're using Kotlin
211

211

00:09:00.900  -->  00:09:04.210
and you're looking to use a function
212

212

00:09:04.210  -->  00:09:06.210
and it's got this really long ugly name
213

213

00:09:06.210  -->  00:09:08.160
or a property, then that probably means
214

214

00:09:08.160  -->  00:09:10.190
that it was declared internal in Kotlin
215

215

00:09:10.190  -->  00:09:13.630
and you shouldn't be accessing it from your Java code.
216

216

00:09:13.630  -->  00:09:15.730
That's it, I'll see you in the next video.
