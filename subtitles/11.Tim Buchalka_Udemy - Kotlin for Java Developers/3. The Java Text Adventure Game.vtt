WEBVTT
1
1

00:00:00.204  -->  00:00:05.204
(lively music)
(keyboard keys clacking)
2

2

00:00:05.900  -->  00:00:06.733
<v Sarah>In this section,</v>
3

3

00:00:06.733  -->  00:00:09.990
you're going to watch me convert a Java application
4

4

00:00:09.990  -->  00:00:13.930
to Kotlin and the application I'm going to convert
5

5

00:00:13.930  -->  00:00:16.260
is a text adventure game.
6

6

00:00:16.260  -->  00:00:19.670
Now, if you don't know what a text adventure game is,
7

7

00:00:19.670  -->  00:00:22.740
I think showing you will be easier than explaining it.
8

8

00:00:22.740  -->  00:00:24.760
I've opened the IntelliJ project
9

9

00:00:24.760  -->  00:00:26.640
that contains the text adventure game
10

10

00:00:26.640  -->  00:00:29.893
and I'm going to go ahead and run the application.
11

11

00:00:34.610  -->  00:00:38.700
Okay, so this game doesn't have a graphical user interface.
12

12

00:00:38.700  -->  00:00:40.570
It's a text adventure game
13

13

00:00:40.570  -->  00:00:44.040
and so, it outputs everything to the console
14

14

00:00:44.040  -->  00:00:46.060
and it accepts input from the console.
15

15

00:00:46.060  -->  00:00:47.820
So, when we run, we'll see a message
16

16

00:00:47.820  -->  00:00:51.460
that says you are a complex junction.
17

17

00:00:51.460  -->  00:00:53.800
A low hands and knees passage
18

18

00:00:53.800  -->  00:00:57.060
from the north joins a higher crawl
19

19

00:00:57.060  -->  00:01:00.880
from the east to make a walking passage going west.
20

20

00:01:00.880  -->  00:01:03.730
There is also a large room above.
21

21

00:01:03.730  -->  00:01:05.040
The air is damp here.
22

22

00:01:05.040  -->  00:01:07.320
So, essentially you're getting a description
23

23

00:01:07.320  -->  00:01:08.993
of where you are.
24

24

00:01:08.993  -->  00:01:13.993
And then it says available exits are Q which stands for Quit
25

25

00:01:14.270  -->  00:01:15.660
in this game,
26

26

00:01:15.660  -->  00:01:19.060
U which is Up, E for East, N for North
27

27

00:01:19.060  -->  00:01:22.193
and W for West and essentially the game is now waiting
28

28

00:01:22.193  -->  00:01:25.340
for you to tell it which direction you wanna go in.
29

29

00:01:25.340  -->  00:01:26.933
So, I'm gonna go up.
30

30

00:01:28.770  -->  00:01:32.120
And now it say you're in a large room full of dusty rocks.
31

31

00:01:32.120  -->  00:01:33.670
There is a big hole in the floor,
32

32

00:01:33.670  -->  00:01:35.080
there are cracks everywhere
33

33

00:01:35.080  -->  00:01:36.600
and a passage leading east
34

34

00:01:36.600  -->  00:01:40.230
and now we have a different set of exits we can quit.
35

35

00:01:40.230  -->  00:01:41.770
We can always quit
36

36

00:01:41.770  -->  00:01:44.610
or we can go back down of course, since I went up.
37

37

00:01:44.610  -->  00:01:45.630
That will just take us back
38

38

00:01:45.630  -->  00:01:47.780
to where we were or we can go east,
39

39

00:01:47.780  -->  00:01:49.043
so let's go east.
40

40

00:01:51.010  -->  00:01:53.670
And it says you're in a dirty broken passage.
41

41

00:01:53.670  -->  00:01:55.320
To the east is a crawl,
42

42

00:01:55.320  -->  00:01:56.810
I think that should be, I'm not sure
43

43

00:01:56.810  -->  00:01:58.680
why it just says crawl,
44

44

00:01:58.680  -->  00:02:01.090
crawl space maybe.
45

45

00:02:01.090  -->  00:02:03.410
To the west is a large passage.
46

46

00:02:03.410  -->  00:02:05.900
Above you is a hole to another passage
47

47

00:02:05.900  -->  00:02:08.650
and then we can choose where we wanna go
48

48

00:02:08.650  -->  00:02:09.840
but I'll quit at this point
49

49

00:02:09.840  -->  00:02:12.090
'cause I think you get the point.
50

50

00:02:12.090  -->  00:02:13.840
And it says you are sitting in front
51

51

00:02:13.840  -->  00:02:15.510
of a computer learning Java.
52

52

00:02:15.510  -->  00:02:19.440
It says you are sitting in front of a computer learning Java
53

53

00:02:19.440  -->  00:02:23.040
because Tim Buchalka uses this code
54

54

00:02:23.040  -->  00:02:25.520
in his Java Masterclass.
55

55

00:02:25.520  -->  00:02:28.010
So, if you've taken Tim's Java Masterclass,
56

56

00:02:28.010  -->  00:02:31.110
you probably are gonna be familiar with the code
57

57

00:02:31.110  -->  00:02:32.430
or at least you've seen it
58

58

00:02:32.430  -->  00:02:35.600
and I am using the code with his permission,
59

59

00:02:35.600  -->  00:02:37.640
so no worries there.
60

60

00:02:37.640  -->  00:02:40.960
So, essentially, this is a game
61

61

00:02:40.960  -->  00:02:42.980
that puts you into a location
62

62

00:02:42.980  -->  00:02:44.440
and it describes the location
63

63

00:02:44.440  -->  00:02:46.100
and then you tell it which directions to go.
64

64

00:02:46.100  -->  00:02:50.720
Now, if you're my age and you used to play adventure games,
65

65

00:02:50.720  -->  00:02:53.392
you'll know that they could do a lot more than that.
66

66

00:02:53.392  -->  00:02:56.110
In some locations, you could pick things up
67

67

00:02:56.110  -->  00:02:57.930
and you had an inventory,
68

68

00:02:57.930  -->  00:02:59.710
so there were some puzzles et cetera.
69

69

00:02:59.710  -->  00:03:02.720
I think when I played them,
70

70

00:03:02.720  -->  00:03:04.330
there were two really popular ones.
71

71

00:03:04.330  -->  00:03:05.560
There were the Zork ones
72

72

00:03:05.560  -->  00:03:06.880
and there was also one based
73

73

00:03:06.880  -->  00:03:08.730
on Hitchhiker's Guide to the Galaxy
74

74

00:03:08.730  -->  00:03:10.970
that everybody seemed to wanna play
75

75

00:03:10.970  -->  00:03:14.370
and if you're young and you're one of the gamers
76

76

00:03:14.370  -->  00:03:16.380
who's only ever played a game
77

77

00:03:16.380  -->  00:03:18.010
that has a graphical user interface,
78

78

00:03:18.010  -->  00:03:22.270
well, these are games that we in the previous generation
79

79

00:03:22.270  -->  00:03:23.930
used to play and of course,
80

80

00:03:23.930  -->  00:03:24.880
you may be looking at this
81

81

00:03:24.880  -->  00:03:26.460
and thinking how could that be fun?
82

82

00:03:26.460  -->  00:03:28.810
They were a lot of fun 'cause it was what we had
83

83

00:03:28.810  -->  00:03:31.537
and of course, in 20 years,
84

84

00:03:31.537  -->  00:03:33.450
there'll be gamers looking back
85

85

00:03:33.450  -->  00:03:35.660
at the games that we play now and saying
86

86

00:03:35.660  -->  00:03:38.820
what terrible games, how could people play games
87

87

00:03:38.820  -->  00:03:41.310
that are so limited and have such a crappy interface,
88

88

00:03:41.310  -->  00:03:43.420
so it's just the way things go.
89

89

00:03:43.420  -->  00:03:45.150
Progress marches on.
90

90

00:03:45.150  -->  00:03:47.640
But this is a text adventure game.
91

91

00:03:47.640  -->  00:03:50.180
So, now that you know what this game does,
92

92

00:03:50.180  -->  00:03:51.820
let's take a look at the Java code
93

93

00:03:51.820  -->  00:03:56.820
so that you can see how this game is coded
94

94

00:03:57.740  -->  00:03:59.670
and also so that you can see the code
95

95

00:03:59.670  -->  00:04:01.160
that I'm going to covert to Kotlin
96

96

00:04:01.160  -->  00:04:03.210
and I'm going to go through the code quickly
97

97

00:04:03.210  -->  00:04:05.020
because it is Java.
98

98

00:04:05.020  -->  00:04:06.840
So, let me shut down the console
99

99

00:04:06.840  -->  00:04:09.030
and the first thing I wanna point out
100

100

00:04:09.030  -->  00:04:12.450
is that this game has two text files.
101

101

00:04:12.450  -->  00:04:13.470
There are four here,
102

102

00:04:13.470  -->  00:04:16.973
but it's actually only using the directions_big.txt
103

103

00:04:18.570  -->  00:04:23.190
and the locations_big.txt files.
104

104

00:04:23.190  -->  00:04:27.260
So, let's take a look at locations_big.txt
105

105

00:04:27.260  -->  00:04:30.750
and you'll see that this file contains the information
106

106

00:04:30.750  -->  00:04:34.720
for a location except for the potential exits.
107

107

00:04:34.720  -->  00:04:37.640
So, it contains the description of the location
108

108

00:04:37.640  -->  00:04:38.900
that we see in the console.
109

109

00:04:38.900  -->  00:04:40.690
You'll remember that when we quit,
110

110

00:04:40.690  -->  00:04:43.850
we saw you were sitting in front of computer learning Java.
111

111

00:04:43.850  -->  00:04:45.060
Now, I happen to know
112

112

00:04:45.060  -->  00:04:48.120
that this game always starts out at location 64
113

113

00:04:48.120  -->  00:04:49.290
and we'll see that tin a minute,
114

114

00:04:49.290  -->  00:04:52.140
so if we scroll down to location 64,
115

115

00:04:52.140  -->  00:04:54.710
we'll see you're at a complex junction.
116

116

00:04:54.710  -->  00:04:57.100
A low hands and knees passage et cetera,
117

117

00:04:57.100  -->  00:04:58.980
and we saw that in the console
118

118

00:04:58.980  -->  00:05:00.990
when we first fired up the game.
119

119

00:05:00.990  -->  00:05:05.990
So, 64 is the location ID and every location has one.
120

120

00:05:06.700  -->  00:05:08.680
So, the format of each line
121

121

00:05:08.680  -->  00:05:13.680
in the locations_big.txt file is you have a location ID,
122

122

00:05:13.960  -->  00:05:16.750
which is an int, followed by a comma
123

123

00:05:16.750  -->  00:05:20.540
and then followed by the location description.
124

124

00:05:20.540  -->  00:05:24.610
So, now let's take a look at the directions_big.txt file
125

125

00:05:24.610  -->  00:05:27.240
and we'll see that this one is quite different.
126

126

00:05:27.240  -->  00:05:30.090
Each line in the file contains information
127

127

00:05:30.090  -->  00:05:33.475
for one direction and the format
128

128

00:05:33.475  -->  00:05:36.310
is you have the location ID
129

129

00:05:36.310  -->  00:05:39.080
and then you have the direction
130

130

00:05:39.080  -->  00:05:42.520
and then you have the destination location ID,
131

131

00:05:42.520  -->  00:05:46.726
so the way to read this is if you're at location one,
132

132

00:05:46.726  -->  00:05:48.780
and you go west,
133

133

00:05:48.780  -->  00:05:51.650
you will end up at location two.
134

134

00:05:51.650  -->  00:05:53.530
If you're at location one,
135

135

00:05:53.530  -->  00:05:57.760
and you go up, you will end up at location two.
136

136

00:05:57.760  -->  00:05:59.520
If you're at location one,
137

137

00:05:59.520  -->  00:06:01.170
and you go eat,
138

138

00:06:01.170  -->  00:06:04.783
you will end up at location three, and on and on.
139

139

00:06:05.760  -->  00:06:07.800
So, now that we know what the data looks like,
140

140

00:06:07.800  -->  00:06:09.270
let's take a look at the code.
141

141

00:06:09.270  -->  00:06:12.324
There are three classes in this application.
142

142

00:06:12.324  -->  00:06:14.100
It's a small application
143

143

00:06:14.100  -->  00:06:16.690
but it does more than print Hello, World.
144

144

00:06:16.690  -->  00:06:18.670
But don't worry, if you love Hello, World,
145

145

00:06:18.670  -->  00:06:20.190
we are gonna do that later on
146

146

00:06:20.190  -->  00:06:22.670
because it wouldn't be a programming course
147

147

00:06:22.670  -->  00:06:25.320
if we didn't have Hello, World in it.
148

148

00:06:25.320  -->  00:06:27.960
So, let's start with the location class.
149

149

00:06:27.960  -->  00:06:30.160
So, this is Location.java
150

150

00:06:30.160  -->  00:06:32.610
and you'll see right up there com.timbuchalka
151

151

00:06:32.610  -->  00:06:34.730
is the package.
152

152

00:06:34.730  -->  00:06:38.410
So, this class stores the information for a location,
153

153

00:06:38.410  -->  00:06:39.960
so we have the location ID
154

154

00:06:39.960  -->  00:06:42.360
which is an int, we have a description
155

155

00:06:42.360  -->  00:06:43.800
which is a string
156

156

00:06:43.800  -->  00:06:46.410
and then we have a map that contains the exits.
157

157

00:06:46.410  -->  00:06:51.010
It uses the letter for the location as the key,
158

158

00:06:51.010  -->  00:06:54.770
so you'll remember back in directions.txt,
159

159

00:06:54.770  -->  00:06:56.940
these are all the directions
160

160

00:06:56.940  -->  00:06:59.060
and they're represented by the letters.
161

161

00:06:59.060  -->  00:07:02.110
So, the letter is actually the key
162

162

00:07:02.110  -->  00:07:06.010
and then it will have the destination location ID
163

163

00:07:06.010  -->  00:07:07.400
as the value.
164

164

00:07:07.400  -->  00:07:09.410
Now, you'll notice that in the constructor,
165

165

00:07:09.410  -->  00:07:13.200
we're adding Q to every location,
166

166

00:07:13.200  -->  00:07:17.060
so we're not cluttering up the directions_big.txt
167

167

00:07:17.060  -->  00:07:21.890
by having a zero, a queued direction rather
168

168

00:07:21.890  -->  00:07:23.200
for every single location
169

169

00:07:23.200  -->  00:07:25.010
'cause that would just be wasteful.
170

170

00:07:25.010  -->  00:07:26.490
I mean, if you hit Q,
171

171

00:07:26.490  -->  00:07:28.430
it doesn't matter what location you're in,
172

172

00:07:28.430  -->  00:07:29.940
you're going to quit.
173

173

00:07:29.940  -->  00:07:34.270
So, we just add that and the location ID
174

174

00:07:34.270  -->  00:07:36.420
for the quit location is zero
175

175

00:07:36.420  -->  00:07:39.610
and if we go back to our locations_big.txt
176

176

00:07:39.610  -->  00:07:40.650
and scroll to the top,
177

177

00:07:40.650  -->  00:07:44.000
we'll see that location ID zero is you are sitting
178

178

00:07:44.000  -->  00:07:46.653
in front of a computer learning Java.
179

179

00:07:46.653  -->  00:07:51.653
So, the location.java file stores the location,
180

180

00:07:51.750  -->  00:07:53.420
the information for a location.
181

181

00:07:53.420  -->  00:07:56.430
And other than that, it doesn't do anything special.
182

182

00:07:56.430  -->  00:08:00.096
You can add an exit and we'll see that in a minute.
183

183

00:08:00.096  -->  00:08:03.410
So, now let's take a look at the locations class,
184

184

00:08:03.410  -->  00:08:05.063
location with an S.
185

185

00:08:06.760  -->  00:08:11.080
And this is the class that reads in the two data files.
186

186

00:08:11.080  -->  00:08:13.120
Now, I'm not gonna bore with the details,
187

187

00:08:13.120  -->  00:08:15.496
I'll just point out that we're using a scanner
188

188

00:08:15.496  -->  00:08:19.210
to parse each line in the file.
189

189

00:08:19.210  -->  00:08:23.760
First, we read the locations_big.txt file
190

190

00:08:23.760  -->  00:08:26.520
and we create all the location instances.
191

191

00:08:26.520  -->  00:08:31.170
So, right here we're reading in the location ID,
192

192

00:08:31.170  -->  00:08:32.620
then we're reading in the description
193

193

00:08:32.620  -->  00:08:35.490
and at that point, we're creating a location
194

194

00:08:35.490  -->  00:08:39.790
and you'll notice that we're saying locations.put,
195

195

00:08:39.790  -->  00:08:42.180
loc would be the location ID
196

196

00:08:42.180  -->  00:08:43.980
and then there'll be the location instance
197

197

00:08:43.980  -->  00:08:46.320
and locations, if we go to the top here,
198

198

00:08:46.320  -->  00:08:49.700
is a map of integer and location.
199

199

00:08:49.700  -->  00:08:52.180
Integer is the location ID
200

200

00:08:52.180  -->  00:08:55.283
and then location would be the location instance.
201

201

00:08:56.290  -->  00:08:58.900
So, after we've read all the locations
202

202

00:08:58.900  -->  00:09:01.750
and we've created a location instance for each one
203

203

00:09:01.750  -->  00:09:04.510
and put it into the locations map,
204

204

00:09:04.510  -->  00:09:06.690
we then read the exits.
205

205

00:09:06.690  -->  00:09:10.220
And we use the location.addExit method
206

206

00:09:10.220  -->  00:09:14.160
to add the destination location
207

207

00:09:14.160  -->  00:09:18.190
for each direction and if we go back to location.addExit,
208

208

00:09:18.190  -->  00:09:21.210
you'll see that all we're doing is adding the exit
209

209

00:09:21.210  -->  00:09:23.730
to the exits map up here.
210

210

00:09:23.730  -->  00:09:25.480
Now if we go back to Locations,
211

211

00:09:25.480  -->  00:09:28.040
you'll notice that all of this reading takes place
212

212

00:09:28.040  -->  00:09:30.000
in a static initializer,
213

213

00:09:30.000  -->  00:09:35.000
so the files are read in the first time the application uses
214

214

00:09:35.060  -->  00:09:37.280
the Locations class.
215

215

00:09:37.280  -->  00:09:39.010
So, all that's left now is to take a look
216

216

00:09:39.010  -->  00:09:42.620
at the game logic and that's in Main.java.
217

217

00:09:42.620  -->  00:09:45.000
So, right at the top of the file,
218

218

00:09:45.000  -->  00:09:49.820
we assign a static variable in the Main class
219

219

00:09:49.820  -->  00:09:54.460
with the locations Locations field
220

220

00:09:54.460  -->  00:09:57.570
and we'll remember that that's the static map up here.
221

221

00:09:57.570  -->  00:10:02.440
So, this locations map contains a map
222

222

00:10:02.440  -->  00:10:06.630
of location IDs followed by location instances
223

223

00:10:06.630  -->  00:10:11.320
and we're storing that into a location field
224

224

00:10:11.320  -->  00:10:13.380
that's declared within the Main class
225

225

00:10:13.380  -->  00:10:16.320
and this is the point where the static initializer
226

226

00:10:16.320  -->  00:10:17.580
will be called.
227

227

00:10:17.580  -->  00:10:20.780
So, essentially as soon as an instance of Main
228

228

00:10:20.780  -->  00:10:25.530
is being created, the locations static initializer
229

229

00:10:25.530  -->  00:10:28.240
will be run and the two data files are read in
230

230

00:10:29.193  -->  00:10:32.020
and then at that point of course after that happens,
231

231

00:10:32.020  -->  00:10:34.180
the JVM's gonna call the Main method
232

232

00:10:34.180  -->  00:10:36.290
which contains the game logic.
233

233

00:10:36.290  -->  00:10:38.470
So, the first thing we do is create a scanner
234

234

00:10:38.470  -->  00:10:41.530
that's going to read user input from the console
235

235

00:10:41.530  -->  00:10:44.110
and then we set the initial location to 64.
236

236

00:10:44.110  -->  00:10:46.040
Remember, I said that I happen to know
237

237

00:10:46.040  -->  00:10:50.040
that the game always starts at location 64 and this is why.
238

238

00:10:50.040  -->  00:10:51.750
We could use a random number here
239

239

00:10:51.750  -->  00:10:54.010
but we're just setting it to 64.
240

240

00:10:54.010  -->  00:10:55.720
There are some versions of this code
241

241

00:10:55.720  -->  00:10:57.700
that do use a random number
242

242

00:10:57.700  -->  00:11:01.100
and then we have a deliberate infinite loop
243

243

00:11:01.100  -->  00:11:03.730
and inside we read the description
244

244

00:11:03.730  -->  00:11:05.100
for the current location,
245

245

00:11:05.100  -->  00:11:08.390
so since location is set to 64,
246

246

00:11:08.390  -->  00:11:12.140
the first location we read is going to be 64
247

247

00:11:12.140  -->  00:11:14.750
and we get that location's description
248

248

00:11:14.750  -->  00:11:17.040
and print it to the console.
249

249

00:11:17.040  -->  00:11:19.870
Now, here we check for location ID zero
250

250

00:11:19.870  -->  00:11:22.880
because that's quit and if the user wants to quit,
251

251

00:11:22.880  -->  00:11:24.150
we break out of the loop.
252

252

00:11:24.150  -->  00:11:25.560
The first time through of course,
253

253

00:11:25.560  -->  00:11:26.970
we know it's not gonna be zero
254

254

00:11:26.970  -->  00:11:29.400
because it's set to 64 and that's fine,
255

255

00:11:29.400  -->  00:11:32.010
so we just don't break out of the loop.
256

256

00:11:32.010  -->  00:11:33.750
But even if the location is zero,
257

257

00:11:33.750  -->  00:11:35.250
we still wanna print the description
258

258

00:11:35.250  -->  00:11:37.350
because we still want the line you are in front
259

259

00:11:37.350  -->  00:11:39.100
of a computer learning Java,
260

260

00:11:39.100  -->  00:11:41.430
we don't just want the game to quit
261

261

00:11:41.430  -->  00:11:42.853
without printing anything.
262

262

00:11:43.784  -->  00:11:45.510
So, if the location ID isn't zero,
263

263

00:11:45.510  -->  00:11:47.380
we get the location's exits
264

264

00:11:47.380  -->  00:11:48.510
and then we print them out,
265

265

00:11:48.510  -->  00:11:51.250
so here's the available exits are
266

266

00:11:51.250  -->  00:11:53.170
and then we loop through the exits
267

267

00:11:53.170  -->  00:11:54.650
and we print them out
268

268

00:11:54.650  -->  00:11:57.830
and then we wait here for the user to tell us
269

269

00:11:57.830  -->  00:11:59.450
which direction they wanna go.
270

270

00:11:59.450  -->  00:12:00.950
When we have the user input,
271

271

00:12:00.950  -->  00:12:04.050
we check to see whether it's a valid direction,
272

272

00:12:04.050  -->  00:12:08.770
so is the available exits are Q, N and W,
273

273

00:12:08.770  -->  00:12:12.260
and they type Z, then this check will fail
274

274

00:12:12.260  -->  00:12:15.340
and we'll print out you cannot go in that direction
275

275

00:12:15.340  -->  00:12:18.360
and we'll loop back up, print out the description
276

276

00:12:18.360  -->  00:12:20.500
of the current location again
277

277

00:12:20.500  -->  00:12:23.580
and wait for them to give us another input.
278

278

00:12:23.580  -->  00:12:25.916
If the direction they give us is valid,
279

279

00:12:25.916  -->  00:12:29.310
then we go to the exits map
280

280

00:12:29.310  -->  00:12:32.430
and we get the destination location,
281

281

00:12:32.430  -->  00:12:35.330
so we go the exits here, that's set up here
282

282

00:12:35.330  -->  00:12:39.590
and that is the current location's exits map
283

283

00:12:39.590  -->  00:12:41.150
and so, we check that map
284

284

00:12:41.150  -->  00:12:45.000
and we get the ID for the destination location,
285

285

00:12:45.000  -->  00:12:49.170
so loc will now contain the destination location.
286

286

00:12:49.170  -->  00:12:50.720
We loop back up
287

287

00:12:50.720  -->  00:12:55.560
and we print the description for the new location they're at
288

288

00:12:55.560  -->  00:12:58.250
and check for zero again
289

289

00:12:58.250  -->  00:13:01.140
and rinse and repeat until we do get zero
290

290

00:13:01.140  -->  00:13:03.010
because the user wants to quit.
291

291

00:13:03.010  -->  00:13:05.100
So, that's it, straightforward,
292

292

00:13:05.100  -->  00:13:07.750
but it's doing a little more than Hello, World.
293

293

00:13:07.750  -->  00:13:09.410
So, in the next video,
294

294

00:13:09.410  -->  00:13:12.870
what I'm going to do is I'm going to covert this application
295

295

00:13:12.870  -->  00:13:16.600
from Java which you've now seen to Kotlin.
296

296

00:13:16.600  -->  00:13:18.350
So, I'll see you in the next video.
