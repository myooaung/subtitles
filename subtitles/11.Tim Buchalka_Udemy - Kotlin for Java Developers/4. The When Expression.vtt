WEBVTT
1
1

00:00:04.740  -->  00:00:06.930
In this video we're going to look at a
2

2

00:00:06.930  -->  00:00:09.950
new Kotlin feature called the when
3

3

00:00:09.950  -->  00:00:13.020
expression, now the when expression is
4

4

00:00:13.020  -->  00:00:15.570
essentially the switch statement on
5

5

00:00:15.570  -->  00:00:17.910
steroids, seriously I really think you're
6

6

00:00:17.910  -->  00:00:18.840
going to love this.
7

7

00:00:18.840  -->  00:00:22.140
So I've already typed in a simple switch
8

8

00:00:22.140  -->  00:00:24.780
statement in Java, just so we can all be
9

9

00:00:24.780  -->  00:00:28.199
on the same page, so here I'm assigning
10

10

00:00:28.199  -->  00:00:31.740
200 to an int variable and then we're
11

11

00:00:31.740  -->  00:00:34.620
switching on the value of that and if it
12

12

00:00:34.620  -->  00:00:37.320
equals 100 we'll print 100, if it equals
13

13

00:00:37.320  -->  00:00:40.710
200 will print 200 etc, if it doesn't
14

14

00:00:40.710  -->  00:00:42.510
match anything, we'll print didn't match
15

15

00:00:42.510  -->  00:00:46.050
anything in the default case. So if we
16

16

00:00:46.050  -->  00:00:52.489
run this, we should see 200 printed and
17

17

00:00:52.489  -->  00:00:55.800
we do, now another thing that we can do
18

18

00:00:55.800  -->  00:00:57.570
some people don't recommend this, but
19

19

00:00:57.570  -->  00:01:01.410
others do and do do it is we can comment
20

20

00:01:01.410  -->  00:01:03.300
out this break statement and then in
21

21

00:01:03.300  -->  00:01:05.789
this case, because num is 200 it's going
22

22

00:01:05.789  -->  00:01:09.150
to match 200 print out 200 and then fall
23

23

00:01:09.150  -->  00:01:11.310
through to the next case, because it's
24

24

00:01:11.310  -->  00:01:12.840
going to keep falling through until it
25

25

00:01:12.840  -->  00:01:14.940
hits a break statement. So in this case,
26

26

00:01:14.940  -->  00:01:17.729
we're going to see 200 and 300 printed,
27

27

00:01:17.729  -->  00:01:23.970
So let's run again and indeed we see 200
28

28

00:01:23.970  -->  00:01:26.070
and 300 printed so that's the switch
29

29

00:01:26.070  -->  00:01:27.930
statement in Java of course you can also
30

30

00:01:27.930  -->  00:01:30.299
use strings, they've they enhance this a
31

31

00:01:30.299  -->  00:01:32.430
little bit, but that's essentially the
32

32

00:01:32.430  -->  00:01:34.500
switch statement. So now let's go over to
33

33

00:01:34.500  -->  00:01:36.390
Kotlin and we're going to code the
34

34

00:01:36.390  -->  00:01:39.780
equivalent statement in Kotlin, so I've
35

35

00:01:39.780  -->  00:01:43.200
already created the usual project and
36

36

00:01:43.200  -->  00:01:46.740
package and I've created a file here,
37

37

00:01:46.740  -->  00:01:49.259
so let's go ahead and instead of using
38

38

00:01:49.259  -->  00:01:51.299
switch which doesn't exist in Kotlin,
39

39

00:01:51.299  -->  00:01:54.000
we'll use when, so I'll say val num
40

40

00:01:54.000  -->  00:01:58.380
equals 200 and then I'll say when and
41

41

00:01:58.380  -->  00:02:01.470
we're going to test against num, so we'll
42

42

00:02:01.470  -->  00:02:08.450
say when it's 100 we'll print line 100
43

43

00:02:08.450  -->  00:02:16.870
when it's 200 we'll print line 200 when it's 300
44

44

00:02:16.870  -->  00:02:23.709
roll print line 300, else will print line
45

45

00:02:23.709  -->  00:02:28.450
doesn't match anything. So this when
46

46

00:02:28.450  -->  00:02:30.730
statement is equivalent to this switch
47

47

00:02:30.730  -->  00:02:32.920
statement as you can see it's a lot more
48

48

00:02:32.920  -->  00:02:35.739
concise, one thing you'll notice is we
49

49

00:02:35.739  -->  00:02:38.680
don't need break and hold that thought
50

50

00:02:38.680  -->  00:02:40.630
for a minute, because we'll come back to
51

51

00:02:40.630  -->  00:02:43.780
that. So if we run this now we should see
52

52

00:02:43.780  -->  00:02:46.510
200 printed because the number is 200,
53

53

00:02:46.510  -->  00:02:51.220
so let's run it and we'll see that yes
54

54

00:02:51.220  -->  00:02:54.790
indeed 200 is printed, so let's take a
55

55

00:02:54.790  -->  00:02:57.640
closer look at this, so we start with the
56

56

00:02:57.640  -->  00:03:00.760
when keyword followed by the argument in
57

57

00:03:00.760  -->  00:03:02.670
parentheses and then we have our
58

58

00:03:02.670  -->  00:03:06.220
possible values. Now just as with the
59

59

00:03:06.220  -->  00:03:07.989
switch statement, the first option will
60

60

00:03:07.989  -->  00:03:09.910
be tested first and then the second
61

61

00:03:09.910  -->  00:03:11.590
option and then the third option,
62

62

00:03:11.590  -->  00:03:13.720
so they're tested sequentially, but as you
63

63

00:03:13.720  -->  00:03:17.019
can see instead of using case and the
64

64

00:03:17.019  -->  00:03:19.930
value in a colon, as you do in Java you
65

65

00:03:19.930  -->  00:03:22.060
just put the value and then follow it
66

66

00:03:22.060  -->  00:03:24.880
with an arrow then you have the
67

67

00:03:24.880  -->  00:03:27.370
statement or statements that you want to
68

68

00:03:27.370  -->  00:03:30.400
execute. Now, as I said before there is no
69

69

00:03:30.400  -->  00:03:32.709
break statement it's not required in
70

70

00:03:32.709  -->  00:03:35.319
Kotlin, under the covers the compiler
71

71

00:03:35.319  -->  00:03:37.840
inserts a break after each option, now of
72

72

00:03:37.840  -->  00:03:40.660
course that means we do lose the ability
73

73

00:03:40.660  -->  00:03:44.650
to do one thing, we cannot do this type
74

74

00:03:44.650  -->  00:03:47.500
of thing, in Kotlin we can't have one
75

75

00:03:47.500  -->  00:03:50.019
case dropping through to another case,
76

76

00:03:50.019  -->  00:03:51.940
I mean some developers would argue that
77

77

00:03:51.940  -->  00:03:54.280
that was a bad coding practice anyway
78

78

00:03:54.280  -->  00:03:57.730
but if you've enjoyed taking advantage
79

79

00:03:57.730  -->  00:03:59.859
of that in the past in your code, you're
80

80

00:03:59.859  -->  00:04:01.569
not going to be able to do that when you
81

81

00:04:01.569  -->  00:04:04.180
use the one statement in Kotlin. So in
82

82

00:04:04.180  -->  00:04:08.650
Kotlin, you can only execute one branch
83

83

00:04:08.650  -->  00:04:12.700
and that's it, you can't drop through.
84

84

00:04:12.700  -->  00:04:13.810
Now you're probably looking at this and
85

85

00:04:13.810  -->  00:04:15.940
thinking well you know big deal apart
86

86

00:04:15.940  -->  00:04:17.320
from the fact that we don't have to do
87

87

00:04:17.320  -->  00:04:20.470
as much typing, it's not really all that
88

88

00:04:20.470  -->  00:04:22.000
different from the switch statement and
89

89

00:04:22.000  -->  00:04:23.530
in fact, you know we've lost the ability
90

90

00:04:23.530  -->  00:04:26.620
to drop through to another case,
91

91

00:04:26.620  -->  00:04:27.909
but we're just getting started.
92

92

00:04:27.909  -->  00:04:30.759
So let's say we want to return
93

93

00:04:30.759  -->  00:04:35.300
six-hundred when the value of num is 100
94

94

00:04:35.300  -->  00:04:39.229
or 600, so what we want is when the value
95

95

00:04:39.229  -->  00:04:42.680
of num is 100 or 600, we want to print
96

96

00:04:42.680  -->  00:04:45.729
600, well we do the following
97

97

00:04:45.729  -->  00:04:49.160
instead of having 100 out on its own, we
98

98

00:04:49.160  -->  00:04:55.490
could say if it's 100 or 600 and in
99

99

00:04:55.490  -->  00:04:57.639
this case, we said we want to print 600.
100

100

00:04:57.639  -->  00:05:00.199
So let's give this a shot, we'll change
101

101

00:05:00.199  -->  00:05:07.160
this to 100 and we'll run and we'll see
102

102

00:05:07.160  -->  00:05:09.289
that we get 600 printed and if we change
103

103

00:05:09.289  -->  00:05:11.389
this to 600, we're going to see the same
104

104

00:05:11.389  -->  00:05:18.500
thing 600, so when we want to perform the
105

105

00:05:18.500  -->  00:05:20.960
same code for multiple values, we can
106

106

00:05:20.960  -->  00:05:23.780
just put all those values on the same
107

107

00:05:23.780  -->  00:05:26.479
branch separated by commas, now it gets
108

108

00:05:26.479  -->  00:05:28.610
better, we can use ranges remember we
109

109

00:05:28.610  -->  00:05:30.110
looked at ranges when we were looking at
110

110

00:05:30.110  -->  00:05:32.210
the for loop, so we can do something like
111

111

00:05:32.210  -->  00:05:38.030
if number is 100 to 199, we have to use
112

112

00:05:38.030  -->  00:05:41.090
the in keyword so in 100 to 99 and we
113

113

00:05:41.090  -->  00:05:46.449
want to print line, you know in range 100
114

114

00:05:46.449  -->  00:05:51.169
to 199, so we can do that sort of thing.
115

115

00:05:51.169  -->  00:05:57.190
So if we change this now to 150 and run,
116

116

00:05:57.190  -->  00:06:00.289
we'll see that we get in range 100 to
117

117

00:06:00.289  -->  00:06:02.539
199 printed, so you can use ranges
118

118

00:06:02.539  -->  00:06:04.970
remember to use the in operator with
119

119

00:06:04.970  -->  00:06:08.120
them, so you can use ranges as the value
120

120

00:06:08.120  -->  00:06:11.120
that you want to test against, but you're
121

121

00:06:11.120  -->  00:06:12.979
not limited to that, we can also use
122

122

00:06:12.979  -->  00:06:17.330
expressions for the values as follows.
123

123

00:06:17.330  -->  00:06:20.150
So I'm going to copy and paste this, so I
124

124

00:06:20.150  -->  00:06:21.770
can write something completely different
125

125

00:06:21.770  -->  00:06:28.520
now and we'll say val let's say y equals
126

126

00:06:28.520  -->  00:06:35.300
10 and then I'm going to say when num
127

127

00:06:35.300  -->  00:06:37.460
we're going to keep it as num and I'm
128

128

00:06:37.460  -->  00:06:42.560
going to say when num is y plus 80, we're
129

129

00:06:42.560  -->  00:06:46.390
going to print line 90
130

130

00:06:46.390  -->  00:06:50.230
or we're going to test also against y+
131

131

00:06:50.230  -->  00:06:54.830
90 and then we'll print line 100, so you
132

132

00:06:54.830  -->  00:06:57.740
get the point, so let's change num to 100
133

133

00:06:57.740  -->  00:07:01.370
up here and we should see the 100
134

134

00:07:01.370  -->  00:07:03.710
printed because 10 plus 90 is 100.
135

135

00:07:03.710  -->  00:07:08.720
So let's run and we'll see that we get 100
136

136

00:07:08.720  -->  00:07:11.230
printed, so you can use expressions as
137

137

00:07:11.230  -->  00:07:14.240
the values that you test against, but
138

138

00:07:14.240  -->  00:07:15.740
we're not finished yet,
139

139

00:07:15.740  -->  00:07:18.320
remember smart casting let's say you
140

140

00:07:18.320  -->  00:07:19.970
want to handle more than one possible
141

141

00:07:19.970  -->  00:07:22.730
type, so you want to check what the type
142

142

00:07:22.730  -->  00:07:24.620
of an object is and then do something
143

143

00:07:24.620  -->  00:07:26.630
with it depending on the type,
144

144

00:07:26.630  -->  00:07:28.340
so normally you'd do something like this,
145

145

00:07:28.340  -->  00:07:33.890
you'd say val let's say obj will make
146

146

00:07:33.890  -->  00:07:37.100
that of type any and we'll assign it a
147

147

00:07:37.100  -->  00:07:43.460
string, I'm a string and then we'll have
148

148

00:07:43.460  -->  00:07:47.960
another object of type any and we'll
149

149

00:07:47.960  -->  00:07:50.060
give the give this a big decimal
150

150

00:07:50.060  -->  00:07:55.370
instance, so 25 point 2 and then we'll
151

151

00:07:55.370  -->  00:08:00.050
say val obj 3 any and we'll make
152

152

00:08:00.050  -->  00:08:03.560
this an integer 45 and then we'll say
153

153

00:08:03.560  -->  00:08:07.880
say val something also of type any and
154

154

00:08:07.880  -->  00:08:10.520
this is going to equal obj 2,
155

155

00:08:10.520  -->  00:08:12.560
so something actually has a big decimals
156

156

00:08:12.560  -->  00:08:15.530
instance, so then we'd say you know if
157

157

00:08:15.530  -->  00:08:21.290
something is string and print line let's
158

158

00:08:21.290  -->  00:08:26.150
say something dot to uppercase.
159

159

00:08:26.150  -->  00:08:28.160
Now, because we're using smart casting we can
160

160

00:08:28.160  -->  00:08:30.920
go ahead and just use it because when we
161

161

00:08:30.920  -->  00:08:33.229
execute this code the compiler is
162

162

00:08:33.229  -->  00:08:36.169
positive that we have a string, but we
163

163

00:08:36.169  -->  00:08:39.910
can also say else if something, else if
164

164

00:08:39.910  -->  00:08:45.950
something is big decimal then let's say
165

165

00:08:45.950  -->  00:08:51.220
we'll say print line something dot
166

166

00:08:51.220  -->  00:08:57.990
remainder and bigdecimal 10.5,
167

167

00:08:57.990  -->  00:09:00.470
so we'll perform some math here and
168

168

00:09:00.470  -->  00:09:03.610
return that, otherwise if something is
169

169

00:09:03.610  -->  00:09:10.970
int then we'll print line something
170

170

00:09:10.970  -->  00:09:15.890
minus 22. So we do this sort of thing,
171

171

00:09:15.890  -->  00:09:18.740
we do a bunch of tests to see what type of
172

172

00:09:18.740  -->  00:09:20.630
object we actually have and then we
173

173

00:09:20.630  -->  00:09:23.710
execute the code for the type of object.
174

174

00:09:23.710  -->  00:09:30.410
So if we run, we'll see the result of
175

175

00:09:30.410  -->  00:09:36.440
dividing 25.2 by 10 and getting the
176

176

00:09:36.440  -->  00:09:38.720
remainder of that which is four point
177

177

00:09:38.720  -->  00:09:42.170
something four point the very long list
178

178

00:09:42.170  -->  00:09:45.920
of decimal places. Now this seems for
179

179

00:09:45.920  -->  00:09:49.610
both for Kotlin and it is, and I'm sure
180

180

00:09:49.610  -->  00:09:51.140
you've already guessed that we can do
181

181

00:09:51.140  -->  00:09:53.300
this in a when expression, rather than
182

182

00:09:53.300  -->  00:09:55.790
having to do it by doing if else--if
183

183

00:09:55.790  -->  00:09:59.390
else--if, so let's change this code I'm
184

184

00:09:59.390  -->  00:10:01.670
just going to comment it out, which I'll
185

185

00:10:01.670  -->  00:10:04.610
just comment it out from here and let's
186

186

00:10:04.610  -->  00:10:06.620
do this in a one expression instead.
187

187

00:10:06.620  -->  00:10:11.270
So we can say when something and we'll say
188

188

00:10:11.270  -->  00:10:14.780
when it's a string, you want to do our
189

189

00:10:14.780  -->  00:10:18.230
print line, I'll just copy and paste that
190

190

00:10:18.230  -->  00:10:23.089
here and I'm writing Java code, but java
191

191

00:10:23.089  -->  00:10:26.930
on the brain and we'll say when it's a
192

192

00:10:26.930  -->  00:10:34.700
big decimal and I'll grab what we want
193

193

00:10:34.700  -->  00:10:39.190
to do for big decimal or if it's an int
194

194

00:10:39.190  -->  00:10:44.640
and I'll grab what we want to do for an int
195

195

00:10:46.060  -->  00:10:52.580
So we'll run now and we'll get the exact
196

196

00:10:52.580  -->  00:10:53.780
same result as before
197

197

00:10:53.780  -->  00:10:56.690
and notice how smart casting is still in
198

198

00:10:56.690  -->  00:11:00.050
play, because we're not having to cast in
199

199

00:11:00.050  -->  00:11:02.510
the code that we execute so the compiler
200

200

00:11:02.510  -->  00:11:04.490
is confident that when we do
201

201

00:11:04.490  -->  00:11:07.880
execute one of the branches that we have
202

202

00:11:07.880  -->  00:11:09.860
the type that we've tested for. So you
203

203

00:11:09.860  -->  00:11:13.040
can go ahead and use the variable as if
204

204

00:11:13.040  -->  00:11:16.640
it's of the type that you tested for.
205

205

00:11:16.640  -->  00:11:18.740
Now, since when is an expression it can be
206

206

00:11:18.740  -->  00:11:21.140
assigned to a variable, meaning that it
207

207

00:11:21.140  -->  00:11:23.630
can evaluate to a value, so let's assign
208

208

00:11:23.630  -->  00:11:27.500
this when statement to a variable so val z
209

209

00:11:27.500  -->  00:11:29.810
equals and you'll see that we're now
210

210

00:11:29.810  -->  00:11:32.779
getting an error and can you think about
211

211

00:11:32.779  -->  00:11:34.910
why we're getting an error now? Think
212

212

00:11:34.910  -->  00:11:38.390
back to the if case when we used if as
213

213

00:11:38.390  -->  00:11:40.670
an expression, we had to include
214

214

00:11:40.670  -->  00:11:44.600
something in the if expression, if you'll
215

215

00:11:44.600  -->  00:11:46.790
recall, once we use if as an expression
216

216

00:11:46.790  -->  00:11:49.070
we have to have an else block because
217

217

00:11:49.070  -->  00:11:51.860
otherwise what will the if expression
218

218

00:11:51.860  -->  00:11:55.250
evaluate to if the if block isn't
219

219

00:11:55.250  -->  00:11:57.920
satisfied, the compiler has to be sure
220

220

00:11:57.920  -->  00:11:59.959
that the expression is going to evaluate
221

221

00:11:59.959  -->  00:12:01.520
to something and it's the same thing
222

222

00:12:01.520  -->  00:12:03.200
with when, right now we don't have a
223

223

00:12:03.200  -->  00:12:06.279
default case, we don't have an else and
224

224

00:12:06.279  -->  00:12:09.230
that's why we're getting the error. so as
225

225

00:12:09.230  -->  00:12:10.850
we see the error says the when
226

226

00:12:10.850  -->  00:12:13.540
expression must be exhaustive
227

227

00:12:13.540  -->  00:12:16.010
add necessary else branch so we're going to
228

228

00:12:16.010  -->  00:12:20.079
have an else here so we'll say else
229

229

00:12:20.079  -->  00:12:24.950
some and we'll print line I have no idea what
230

230

00:12:24.950  -->  00:12:28.130
type this is and now the error goes away.
231

231

00:12:28.130  -->  00:12:31.339
So this when expression evaluates to
232

232

00:12:31.339  -->  00:12:34.490
unit, because all the branches are doing
233

233

00:12:34.490  -->  00:12:36.170
is print lining and print line returns
234

234

00:12:36.170  -->  00:12:38.899
unit, so this is what this expression
235

235

00:12:38.899  -->  00:12:42.620
evaluates to. So if we print z,
236

236

00:12:42.620  -->  00:12:46.490
we're going to see unit printed, because that's
237

237

00:12:46.490  -->  00:12:47.839
what's actually going to be assigned
238

238

00:12:47.839  -->  00:12:53.720
into z, so let's give this a try and sure
239

239

00:12:53.720  -->  00:12:56.600
enough we see Kotlin dot unit. Now if we want
240

240

00:12:56.600  -->  00:12:58.970
it to return values, then we'd have to do
241

241

00:12:58.970  -->  00:13:00.529
something like this so we'd have to say
242

242

00:13:00.529  -->  00:13:03.140
print line and then we could say well in
243

243

00:13:03.140  -->  00:13:09.279
this case, I want to turn the value 1
244

244

00:13:09.279  -->  00:13:14.340
let's return 2 here,
245

245

00:13:14.340  -->  00:13:17.740
we'll return 3 for this one and for the
246

246

00:13:17.740  -->  00:13:24.280
else case let's say we return -1, so now
247

247

00:13:24.280  -->  00:13:26.800
if we write and we print z, we should get
248

248

00:13:26.800  -->  00:13:30.460
2 printed because something is a big
249

249

00:13:30.460  -->  00:13:32.830
decimal, so we're executing this branch
250

250

00:13:32.830  -->  00:13:39.040
here and sure enough, we see 2 printed so
251

251

00:13:39.040  -->  00:13:42.580
just like with the if, the last statement
252

252

00:13:42.580  -->  00:13:46.960
or the last value in a block for the
253

253

00:13:46.960  -->  00:13:49.210
branch, that's going to be the return
254

254

00:13:49.210  -->  00:13:52.510
value for that branch. Okay so when we
255

255

00:13:52.510  -->  00:13:54.850
covered enums, I mentioned that you'll
256

256

00:13:54.850  -->  00:13:56.890
use them a lot with the when expression,
257

257

00:13:56.890  -->  00:13:59.140
so let's take a look at that. So let's
258

258

00:13:59.140  -->  00:14:02.260
create an enum, we'll say actually I
259

259

00:14:02.260  -->  00:14:03.730
don't want to do it inside this function,
260

260

00:14:03.730  -->  00:14:05.170
I'm going to create it at the top of the
261

261

00:14:05.170  -->  00:14:09.940
file, so we'll say enum class and we'll
262

262

00:14:09.940  -->  00:14:12.850
call this one season so rather than
263

263

00:14:12.850  -->  00:14:15.280
having an array of seasons, as we've
264

264

00:14:15.280  -->  00:14:17.050
done before, we'll use an enum and we'll
265

265

00:14:17.050  -->  00:14:23.500
have spring, summer, fall, winter so that's
266

266

00:14:23.500  -->  00:14:26.050
a very simple enum. So now let's use this
267

267

00:14:26.050  -->  00:14:28.930
enum with when, so I'll do this at the
268

268

00:14:28.930  -->  00:14:32.710
top of the file and we'll say val time
269

269

00:14:32.710  -->  00:14:37.530
of year equals and let's say it's winter,
270

270

00:14:37.530  -->  00:14:42.960
winter and then we'll say val str equals
271

271

00:14:42.960  -->  00:14:48.010
when time of year and we'll say if it's
272

272

00:14:48.010  -->  00:14:53.500
season dot spring, we'll say flowers are
273

273

00:14:53.500  -->  00:14:58.680
blooming. I should put a blank in here
274

274

00:14:58.680  -->  00:15:05.320
and then we'll say if it's season dot summer,
275

275

00:15:05.320  -->  00:15:13.930
it's hot, season dot fall it's getting
276

276

00:15:13.930  -->  00:15:20.829
cooler and season dot winter I need a
277

277

00:15:20.829  -->  00:15:24.370
coat, let's say. So here we're returning a
278

278

00:15:24.370  -->  00:15:27.069
string value for each of the branches.
279

279

00:15:27.069  -->  00:15:32.350
So let's run and I forgot to print the
280

280

00:15:32.350  -->  00:15:38.040
string, print line str let's run again,
281

281

00:15:38.040  -->  00:15:45.060
print line there we go, let's run again
282

282

00:15:45.060  -->  00:15:49.600
and we'll see I need a coat. Now did you
283

283

00:15:49.600  -->  00:15:52.000
notice something here? What did I say
284

284

00:15:52.000  -->  00:15:54.459
just before when I said when we return a
285

285

00:15:54.459  -->  00:15:57.699
value, we need something that we also
286

286

00:15:57.699  -->  00:15:59.470
need in the if expression and it turned
287

287

00:15:59.470  -->  00:16:04.899
out that we needed an else, but we don't
288

288

00:16:04.899  -->  00:16:07.990
have one here and we're returning a
289

289

00:16:07.990  -->  00:16:10.209
value. Well, that's because the branches
290

290

00:16:10.209  -->  00:16:12.519
in this case are exhaustive because
291

291

00:16:12.519  -->  00:16:14.560
we're using an enum and the compiler
292

292

00:16:14.560  -->  00:16:19.260
knows that because val is of type season,
293

293

00:16:19.260  -->  00:16:22.540
time of year is of type season, it knows
294

294

00:16:22.540  -->  00:16:25.060
that there are only four possible values
295

295

00:16:25.060  -->  00:16:27.940
and we've listed all those values,
296

296

00:16:27.940  -->  00:16:29.560
so we're okay if I take one of these out
297

297

00:16:29.560  -->  00:16:33.190
now, we get the error where it says one
298

298

00:16:33.190  -->  00:16:35.110
expression must be exhaustive at
299

299

00:16:35.110  -->  00:16:37.899
necessary winter branch or an else
300

300

00:16:37.899  -->  00:16:41.110
branch. So when we're using all of our
301

301

00:16:41.110  -->  00:16:42.880
enums, there's no need to have an else
302

302

00:16:42.880  -->  00:16:45.339
because the else would never be executed.
303

303

00:16:45.339  -->  00:16:47.949
All the possible values are accounted
304

304

00:16:47.949  -->  00:16:49.839
for in this case, so the compiler can
305

305

00:16:49.839  -->  00:16:52.000
guarantee that a value will be returned,
306

306

00:16:52.000  -->  00:16:54.339
but as I said before, you can execute
307

307

00:16:54.339  -->  00:16:55.990
more than one line of code in a branch,
308

308

00:16:55.990  -->  00:16:57.399
so let's make this a little bit more
309

309

00:16:57.399  -->  00:17:00.550
interesting, I'm going to use move the
310

310

00:17:00.550  -->  00:17:03.370
definition of val up, here so I can use
311

311

00:17:03.370  -->  00:17:09.750
it and for our spring, we'll not only
312

312

00:17:09.750  -->  00:17:14.020
return a value but will also increment
313

313

00:17:14.020  -->  00:17:17.500
val by 5, of course I'll have to change
314

314

00:17:17.500  -->  00:17:19.089
it to a var now so I'll do that.
315

315

00:17:19.089  -->  00:17:21.490
Now notice that we have to do this above
316

316

00:17:21.490  -->  00:17:24.640
the return value, we can't do it the
317

317

00:17:24.640  -->  00:17:29.200
opposite way like this, well we can but
318

318

00:17:29.200  -->  00:17:33.010
then we're going to get num plus equals
319

319

00:17:33.010  -->  00:17:36.520
5 into str. So let's try running this and
320

320

00:17:36.520  -->  00:17:40.240
see what happens. So we're still getting
321

321

00:17:40.240  -->  00:17:42.789
I need a coat, but if we change this to
322

322

00:17:42.789  -->  00:17:50.980
spring and run now, we're now getting
323

323

00:17:50.980  -->  00:17:53.890
Kotlin dot unit, because this doesn't
324

324

00:17:53.890  -->  00:17:56.350
return anything, an assignment statement
325

325

00:17:56.350  -->  00:17:58.539
like this doesn't return anything at all,
326

326

00:17:58.539  -->  00:18:01.480
we're incrementing num by 5, so num gets
327

327

00:18:01.480  -->  00:18:04.360
105, but this it doesn't return anything.
328

328

00:18:04.360  -->  00:18:06.159
So as you can see, when you're using
329

329

00:18:06.159  -->  00:18:08.529
return values, the type of the return
330

330

00:18:08.529  -->  00:18:10.390
value can be different depending on what
331

331

00:18:10.390  -->  00:18:12.220
you're doing, but some might argue that
332

332

00:18:12.220  -->  00:18:15.820
that's not good coding practice, so I'm
333

333

00:18:15.820  -->  00:18:18.520
going to take this out and I'm going to
334

334

00:18:18.520  -->  00:18:20.830
move it back up here, because I always
335

335

00:18:20.830  -->  00:18:23.649
want a string returned. So for winter now,
336

336

00:18:23.649  -->  00:18:25.330
let's do something a little different as
337

337

00:18:25.330  -->  00:18:31.390
well, let's say say num equals 22 minus
338

338

00:18:31.390  -->  00:18:34.830
55, we'll just assign a constant here,
339

339

00:18:34.830  -->  00:18:38.380
so another case of, you can do something but
340

340

00:18:38.380  -->  00:18:40.270
you probably shouldn't do it, we've seen
341

341

00:18:40.270  -->  00:18:41.890
a few of those now, we've seen the one
342

342

00:18:41.890  -->  00:18:45.070
with you know, you can have a package
343

343

00:18:45.070  -->  00:18:46.539
name that doesn't match the directory
344

344

00:18:46.539  -->  00:18:48.370
structure, but you probably shouldn't do
345

345

00:18:48.370  -->  00:18:50.830
that and here's another one you can have
346

346

00:18:50.830  -->  00:18:53.140
a one statement that returns different
347

347

00:18:53.140  -->  00:18:55.270
types depending on the branch of code
348

348

00:18:55.270  -->  00:18:56.950
but you probably shouldn't do that
349

349

00:18:56.950  -->  00:18:58.480
because if you're going to use that
350

350

00:18:58.480  -->  00:19:01.000
return value for anything other than
351

351

00:19:01.000  -->  00:19:03.370
something like a print line, that can be
352

352

00:19:03.370  -->  00:19:05.200
done on any type of instance, you're
353

353

00:19:05.200  -->  00:19:06.940
going to quickly run into trouble,
354

354

00:19:06.940  -->  00:19:09.190
one last thing with when, you can also use it
355

355

00:19:09.190  -->  00:19:11.350
without a value and when you use it that
356

356

00:19:11.350  -->  00:19:14.500
way, it's an alternative for if-else etc.
357

357

00:19:14.500  -->  00:19:19.899
So let's try it, let's do the following
358

358

00:19:19.899  -->  00:19:25.270
val num 2 equals minus 50
359

359

00:19:25.270  -->  00:19:28.780
and then we'll say if num is less than
360

360

00:19:28.780  -->  00:19:34.270
num2, we'll print line num is less than
361

361

00:19:34.270  -->  00:19:40.990
num 2, but if num is greater than num 2,
362

362

00:19:40.990  -->  00:19:42.430
I'm sure you can see where this is going
363

363

00:19:42.430  -->  00:19:46.420
at this point, we'll print line num is
364

364

00:19:46.420  -->  00:19:51.520
greater then num2 and of course if num
365

365

00:19:51.520  -->  00:19:53.770
isn't less than and num isn't greater
366

366

00:19:53.770  -->  00:19:56.470
than, it must be equal to it. So we'll say
367

367

00:19:56.470  -->  00:20:02.470
num equals num 2. So that's one way of
368

368

00:20:02.470  -->  00:20:05.500
writing this but there's a better way to
369

369

00:20:05.500  -->  00:20:08.440
do it now, using the when, so here we're
370

370

00:20:08.440  -->  00:20:11.890
not really testing a value, we're testing
371

371

00:20:11.890  -->  00:20:14.290
two different conditions and then if
372

372

00:20:14.290  -->  00:20:16.930
both of those conditions fail, we want to
373

373

00:20:16.930  -->  00:20:19.450
execute a third block of code. So if we
374

374

00:20:19.450  -->  00:20:21.940
wanted to convert this to a when,
375

375

00:20:21.940  -->  00:20:24.010
question is what do we- what would we put
376

376

00:20:24.010  -->  00:20:25.660
in the brackets? Well there isn't really
377

377

00:20:25.660  -->  00:20:27.340
anything we could put in the brackets
378

378

00:20:27.340  -->  00:20:30.760
here, so in this case we don't put
379

379

00:20:30.760  -->  00:20:33.280
anything in the brackets, instead we just
380

380

00:20:33.280  -->  00:20:38.200
say num less than num 2 and in that case
381

381

00:20:38.200  -->  00:20:40.150
we want to print line, I'm going to copy
382

382

00:20:40.150  -->  00:20:47.590
and paste num is less than num 2, on the
383

383

00:20:47.590  -->  00:20:51.270
other hand if num is greater than num 2,
384

384

00:20:51.270  -->  00:20:53.740
you want to print line num is greater
385

385

00:20:53.740  -->  00:21:00.250
than num 2, otherwise we want to print
386

386

00:21:00.250  -->  00:21:08.260
line num equals num 2, and so this is
387

387

00:21:08.260  -->  00:21:11.830
equivalent to this and you can see how
388

388

00:21:11.830  -->  00:21:15.280
much more concise it is, so let's run and
389

389

00:21:15.280  -->  00:21:18.910
we should see I forget now what num will
390

390

00:21:18.910  -->  00:21:21.160
be equal, let's see we're doing spring
391

391

00:21:21.160  -->  00:21:24.790
so num is going to be 105, so num is
392

392

00:21:24.790  -->  00:21:27.190
greater than minus 50 so I guess we're
393

393

00:21:27.190  -->  00:21:28.870
expecting to see num is greater than num 2
394

394

00:21:28.870  -->  00:21:31.350
printed twice from both of these
395

395

00:21:31.350  -->  00:21:36.490
places, so let's run and we get num is
396

396

00:21:36.490  -->  00:21:38.980
greater than num 2 printed twice.
397

397

00:21:38.980  -->  00:21:41.580
So you can see how much more concise
398

398

00:21:41.580  -->  00:21:44.890
where our guys here, here they are so
399

399

00:21:44.890  -->  00:21:47.230
this is so much more concise than this
400

400

00:21:47.230  -->  00:21:50.290
and if you had like a bunch of
401

401

00:21:50.290  -->  00:21:52.180
if else, if else, if else if and it would
402

402

00:21:52.180  -->  00:21:54.670
it would be even more concise. So this is
403

403

00:21:54.670  -->  00:21:56.290
an example of when you wouldn't want to
404

404

00:21:56.290  -->  00:21:58.390
use a value with the when because really
405

405

00:21:58.390  -->  00:22:00.760
what value would you put here? Your- you
406

406

00:22:00.760  -->  00:22:02.800
want to test a bunch of conditions and
407

407

00:22:02.800  -->  00:22:05.500
you can use the one to do that. So that's
408

408

00:22:05.500  -->  00:22:08.110
it for the one expression I think you
409

409

00:22:08.110  -->  00:22:10.030
can see that you can do a lot more with
410

410

00:22:10.030  -->  00:22:11.680
it than you can with the switch
411

411

00:22:11.680  -->  00:22:16.320
statement in Java. I'll see you in the next video.
