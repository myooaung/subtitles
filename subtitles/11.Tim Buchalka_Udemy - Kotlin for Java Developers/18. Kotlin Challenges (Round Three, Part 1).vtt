WEBVTT
1
1

00:00:04.750  -->  00:00:07.180
sou've learned a ton of stuff in this
2

2

00:00:07.180  -->  00:00:09.370
section, so don't worry if your head is
3

3

00:00:09.370  -->  00:00:12.309
spinning, the best way to absorb the
4

4

00:00:12.309  -->  00:00:14.559
concepts is to practice and so that's
5

5

00:00:14.559  -->  00:00:17.020
what we're going to do now. Now this is
6

6

00:00:17.020  -->  00:00:18.970
one area where you might struggle a bit
7

7

00:00:18.970  -->  00:00:20.740
especially when it comes to the
8

8

00:00:20.740  -->  00:00:23.110
constructors that's often where
9

9

00:00:23.110  -->  00:00:25.660
developers new to Kotlin get tripped up
10

10

00:00:25.660  -->  00:00:27.610
because they forget that all
11

11

00:00:27.610  -->  00:00:29.380
constructors have to delegate to the
12

12

00:00:29.380  -->  00:00:31.870
primary constructor or even that there
13

13

00:00:31.870  -->  00:00:34.180
is a primary constructor and of course
14

14

00:00:34.180  -->  00:00:36.160
Java doesn't have the concept of primary
15

15

00:00:36.160  -->  00:00:38.559
and secondary constructors and so it's a
16

16

00:00:38.559  -->  00:00:40.300
new concept and it might take you some
17

17

00:00:40.300  -->  00:00:42.730
time to get used to it. So now it's time
18

18

00:00:42.730  -->  00:00:45.039
to practice. Now the first thing I'm
19

19

00:00:45.039  -->  00:00:48.219
going to want you to do is to convert a
20

20

00:00:48.219  -->  00:00:50.890
Java class to a Kotlin class. Now I've
21

21

00:00:50.890  -->  00:00:53.859
already typed in all the Java code that
22

22

00:00:53.859  -->  00:00:55.149
you're going to need and in the
23

23

00:00:55.149  -->  00:00:57.609
resources section, there's a starter
24

24

00:00:57.609  -->  00:01:00.729
project, so if you download that starter
25

25

00:01:00.729  -->  00:01:03.399
project and you import it into IntelliJ,
26

26

00:01:03.399  -->  00:01:05.590
you'll save yourself a lot of typing.
27

27

00:01:05.590  -->  00:01:08.049
There are two packages in the project,
28

28

00:01:08.049  -->  00:01:10.150
there is a Java code package that
29

29

00:01:10.150  -->  00:01:12.160
contains all the Java code and then
30

30

00:01:12.160  -->  00:01:15.100
there's this oo challenge package that is
31

31

00:01:15.100  -->  00:01:17.470
where the Kotlin code will go and
32

32

00:01:17.470  -->  00:01:20.380
there's only one file in there and it's
33

33

00:01:20.380  -->  00:01:23.230
empty. So this is where I'm going to put
34

34

00:01:23.230  -->  00:01:25.480
all the challenge code as we work
35

35

00:01:25.480  -->  00:01:27.640
through the challenge and you can do the
36

36

00:01:27.640  -->  00:01:30.040
same, so the first challenge is to
37

37

00:01:30.040  -->  00:01:32.710
convert this class called bicycle to
38

38

00:01:32.710  -->  00:01:35.770
Kotlin. Now I got this class and the
39

39

00:01:35.770  -->  00:01:39.010
other two classes from the official Java
40

40

00:01:39.010  -->  00:01:41.320
tutorial on inheritance and there's a
41

41

00:01:41.320  -->  00:01:43.420
link to that in the resources section.
42

42

00:01:43.420  -->  00:01:46.900
I have changed the classes a little bit,
43

43

00:01:46.900  -->  00:01:49.570
so they're not an exact match for what's in
44

44

00:01:49.570  -->  00:01:52.060
the tutorial, but these classes are based
45

45

00:01:52.060  -->  00:01:54.790
on the classes in that tutorial. So the
46

46

00:01:54.790  -->  00:01:56.710
first class I want you to convert is the
47

47

00:01:56.710  -->  00:01:59.710
bicycle class, so let's take a quick look
48

48

00:01:59.710  -->  00:02:03.100
at it, it has three private fields, it has
49

49

00:02:03.100  -->  00:02:05.890
the usual constructor and then each of
50

50

00:02:05.890  -->  00:02:07.990
the fields how they set in a get and
51

51

00:02:07.990  -->  00:02:10.090
then there's these two methods here
52

52

00:02:10.090  -->  00:02:13.810
apply, break and speed up. Now I suggest
53

53

00:02:13.810  -->  00:02:16.720
that you call the converted class Kotlin
54

54

00:02:16.720  -->  00:02:18.520
bicycle so that there's no
55

55

00:02:18.520  -->  00:02:21.040
confusion between this bicycle and the
56

56

00:02:21.040  -->  00:02:23.290
converted Kotlin class. So that's your
57

57

00:02:23.290  -->  00:02:25.450
first challenge convert the bicycle
58

58

00:02:25.450  -->  00:02:28.300
class to Kotlin good luck with it and
59

59

00:02:28.300  -->  00:02:31.090
I'll see you in a bit.
60

60

00:02:31.090  -->  00:02:34.490
Okay, welcome back so as I said I'm going
61

61

00:02:34.490  -->  00:02:36.860
to put all of my code into this oo
62

62

00:02:36.860  -->  00:02:39.260
challenge file, but before we hop over to
63

63

00:02:39.260  -->  00:02:40.880
the Kotlin file, let's just take another
64

64

00:02:40.880  -->  00:02:43.459
look at this class. So we have three
65

65

00:02:43.459  -->  00:02:45.260
private fields here, so we're going to
66

66

00:02:45.260  -->  00:02:48.290
have three properties and every field
67

67

00:02:48.290  -->  00:02:52.010
has a get and a set and since we can set
68

68

00:02:52.010  -->  00:02:54.080
all three fields that means we're going
69

69

00:02:54.080  -->  00:02:55.900
to want the properties to be var
70

70

00:02:55.900  -->  00:02:59.870
properties, not val properties, so let me
71

71

00:02:59.870  -->  00:03:02.420
hop over to the Kotlin file now and I'm
72

72

00:03:02.420  -->  00:03:06.920
going to say class Kotlin bicycle and
73

73

00:03:06.920  -->  00:03:10.310
that's going to be var cadence which is
74

74

00:03:10.310  -->  00:03:15.290
an int var gear with a gear or speed, speed.
75

75

00:03:15.290  -->  00:03:16.850
So we'll keep them in the same order,
76

76

00:03:16.850  -->  00:03:19.310
you don't have to, but var speed is an int
77

77

00:03:19.310  -->  00:03:24.709
and var gear is an int it and so just with
78

78

00:03:24.709  -->  00:03:27.590
this line here, just declaring the class
79

79

00:03:27.590  -->  00:03:30.680
we've actually taken care of declaring
80

80

00:03:30.680  -->  00:03:33.290
the fields, we've taken care of the
81

81

00:03:33.290  -->  00:03:35.989
constructor because this is a primary
82

82

00:03:35.989  -->  00:03:37.730
constructor which is going to do exactly
83

83

00:03:37.730  -->  00:03:40.519
what this constructor is doing and we've
84

84

00:03:40.519  -->  00:03:42.260
taken care of all the sets and gets,
85

85

00:03:42.260  -->  00:03:44.989
because when you declare a property as
86

86

00:03:44.989  -->  00:03:47.630
var, Kotlin will generate the set and get
87

87

00:03:47.630  -->  00:03:50.780
for you under the covers. So the only
88

88

00:03:50.780  -->  00:03:53.239
thing that we have left to do is add
89

89

00:03:53.239  -->  00:03:56.570
these two methods into the class and I'm
90

90

00:03:56.570  -->  00:04:00.459
going to copy, oh what happened there,
91

91

00:04:00.459  -->  00:04:02.720
IntelliJ is trying to be helpful and
92

92

00:04:02.720  -->  00:04:04.340
it's turning out not to be helpful,
93

93

00:04:04.340  -->  00:04:09.799
I'm going to copy and paste these methods in.
94

94

00:04:09.799  -->  00:04:12.579
So I'll go ctrl v, now at this point
95

95

00:04:12.579  -->  00:04:16.030
Kotlin has noticed that the clipboard
96

96

00:04:16.030  -->  00:04:19.010
contains content that's been copied from
97

97

00:04:19.010  -->  00:04:20.450
Java and it's asking me if I want to
98

98

00:04:20.450  -->  00:04:21.829
convert and in this case I'm going to
99

99

00:04:21.829  -->  00:04:24.890
say yes and we'll see what we get and we
100

100

00:04:24.890  -->  00:04:27.169
actually get what we want. So we now have
101

101

00:04:27.169  -->  00:04:29.210
the two functions apply break that takes
102

102

00:04:29.210  -->  00:04:31.700
a decrement integer and speed up,
103

103

00:04:31.700  -->  00:04:35.300
that takes an increment integer. So we now
104

104

00:04:35.300  -->  00:04:37.580
have the equivalent class, I'm not sure
105

105

00:04:37.580  -->  00:04:39.830
why that moved we now have the
106

106

00:04:39.830  -->  00:04:44.540
equivalent class to what we had in bicycle.
107

107

00:04:44.540  -->  00:04:47.510
Now because these are private, you might
108

108

00:04:47.510  -->  00:04:51.740
have been tempted to perhaps do this,
109

109

00:04:51.740  -->  00:04:53.510
but in Kotlin, that's not what you want
110

110

00:04:53.510  -->  00:04:55.790
because remember that in Kotlin,
111

111

00:04:55.790  -->  00:04:58.850
everything's public and final by default
112

112

00:04:58.850  -->  00:05:00.740
and even if these are public, which they
113

113

00:05:00.740  -->  00:05:03.800
are now. All the outside world has to go
114

114

00:05:03.800  -->  00:05:06.320
through the gets and the sets, to deal
115

115

00:05:06.320  -->  00:05:09.200
with these properties. If you make the
116

116

00:05:09.200  -->  00:05:11.360
properties private, it means that nothing
117

117

00:05:11.360  -->  00:05:14.090
in the outside world can touch the
118

118

00:05:14.090  -->  00:05:15.800
properties, they can only be accessed
119

119

00:05:15.800  -->  00:05:17.900
from inside and that's not what we want
120

120

00:05:17.900  -->  00:05:19.880
because in the Java code the outside
121

121

00:05:19.880  -->  00:05:22.250
world can access the properties through
122

122

00:05:22.250  -->  00:05:24.170
the sets and the get and that's exactly
123

123

00:05:24.170  -->  00:05:26.120
the same situation we have here.
124

124

00:05:26.120  -->  00:05:28.100
These properties can only be accessed through
125

125

00:05:28.100  -->  00:05:30.740
the sets and the gets, so that's our
126

126

00:05:30.740  -->  00:05:32.600
equivalent class, we can- we've converted
127

127

00:05:32.600  -->  00:05:34.940
the bicycle class so now that we have a
128

128

00:05:34.940  -->  00:05:38.120
bicycle class it's time to convert, you
129

129

00:05:38.120  -->  00:05:39.260
might have noticed there are two other
130

130

00:05:39.260  -->  00:05:41.270
Java classes, it's time to convert the
131

131

00:05:41.270  -->  00:05:42.920
mountain bike class, so let's have a look
132

132

00:05:42.920  -->  00:05:44.900
at that one and we'll see that it
133

133

00:05:44.900  -->  00:05:47.870
extends bicycle, it has an additional
134

134

00:05:47.870  -->  00:05:51.950
field called seat height the constructor
135

135

00:05:51.950  -->  00:05:54.050
is just doing what a constructor would
136

136

00:05:54.050  -->  00:05:56.540
normally do here, it's delegating up to
137

137

00:05:56.540  -->  00:05:59.450
the superest constructor to do- to deal
138

138

00:05:59.450  -->  00:06:01.640
with the properties that are declared in
139

139

00:06:01.640  -->  00:06:03.470
the superclass and then it's just doing
140

140

00:06:03.470  -->  00:06:05.480
the usual assigning the value to the
141

141

00:06:05.480  -->  00:06:09.130
field and it has a get and a set.
142

142

00:06:09.130  -->  00:06:12.470
So nothing complex here, pause the video and
143

143

00:06:12.470  -->  00:06:15.470
go ahead and convert this class, I would
144

144

00:06:15.470  -->  00:06:18.500
call it Kotlin mountain-bike and I would
145

145

00:06:18.500  -->  00:06:20.210
do it in the same file just to keep
146

146

00:06:20.210  -->  00:06:22.580
things simple. So pause the video and
147

147

00:06:22.580  -->  00:06:24.800
convert the mountain-bike class to Kotlin.
148

148

00:06:24.800  -->  00:06:29.690
Okay, so let's go over to Kotlin, but
149

149

00:06:29.690  -->  00:06:31.310
before we do, we have the same situation
150

150

00:06:31.310  -->  00:06:33.920
with seat height, we want it to be a var
151

151

00:06:33.920  -->  00:06:36.890
because it can be set, otherwise there's
152

152

00:06:36.890  -->  00:06:39.140
nothing complex here, so let's go over to
153

153

00:06:39.140  -->  00:06:42.020
our Kotlin file and pull out the class
154

154

00:06:42.020  -->  00:06:46.120
here so I'll say class Kotlin
155

155

00:06:46.120  -->  00:06:50.840
mountain-bike and so we want a var seat
156

156

00:06:50.840  -->  00:06:53.680
height and that's going to be an int and
157

157

00:06:53.680  -->  00:06:56.330
then here, we want to accept the other
158

158

00:06:56.330  -->  00:06:58.420
three property values,
159

159

00:06:58.420  -->  00:07:01.900
we don't declare them here because we're
160

160

00:07:01.900  -->  00:07:04.240
going to delegate back up to the primary
161

161

00:07:04.240  -->  00:07:06.370
constructor of the superclass and that's
162

162

00:07:06.370  -->  00:07:08.740
where these properties are declared.
163

163

00:07:08.740  -->  00:07:10.390
So we're just going to accept them here
164

164

00:07:10.390  -->  00:07:12.040
without declaring them, so we'll say
165

165

00:07:12.040  -->  00:07:18.070
cadance int speed int and gear int and
166

166

00:07:18.070  -->  00:07:20.380
then at this point we want to delegate
167

167

00:07:20.380  -->  00:07:23.110
to the primary constructor, but before we
168

168

00:07:23.110  -->  00:07:25.120
do that we have one very important thing
169

169

00:07:25.120  -->  00:07:27.910
to do, we need to add the open keyword
170

170

00:07:27.910  -->  00:07:29.860
here, so that this class can actually be
171

171

00:07:29.860  -->  00:07:33.640
extended. So I'm going to add open there.
172

172

00:07:33.640  -->  00:07:36.280
Okay, so now we can extend the class so
173

173

00:07:36.280  -->  00:07:37.960
I'm going to add a colon here and I'll
174

174

00:07:37.960  -->  00:07:41.410
call the supers constructor on another
175

175

00:07:41.410  -->  00:07:44.910
line and so I'm going to say Kotlin
176

176

00:07:44.910  -->  00:07:47.140
bicycle and we're going to pass the
177

177

00:07:47.140  -->  00:07:53.380
cadence, the speed in the gear and that's
178

178

00:07:53.380  -->  00:07:55.180
it, that's all we need for this
179

179

00:07:55.180  -->  00:07:57.130
conversion, if we go back and look at the
180

180

00:07:57.130  -->  00:07:59.230
mountain-bike now, we'll see that we've
181

181

00:07:59.230  -->  00:08:02.140
covered declaring the seat height, we're
182

182

00:08:02.140  -->  00:08:04.030
declaring it right here and it's a var
183

183

00:08:04.030  -->  00:08:05.910
so we're going to get our get and set
184

184

00:08:05.910  -->  00:08:08.890
generated under the covers, we're calling
185

185

00:08:08.890  -->  00:08:12.010
the super constructor right here with
186

186

00:08:12.010  -->  00:08:15.100
the cadence speed and gear and we know
187

187

00:08:15.100  -->  00:08:17.230
that under the covers Kotlin is going to
188

188

00:08:17.230  -->  00:08:20.860
assign whatever is passed into the seat
189

189

00:08:20.860  -->  00:08:22.660
height to initialize seat height with
190

190

00:08:22.660  -->  00:08:24.850
that value, so we're done for Kotlin
191

191

00:08:24.850  -->  00:08:26.770
mountain-bike. Alright, we have one more
192

192

00:08:26.770  -->  00:08:28.900
class to convert and that's the road bike
193

193

00:08:28.900  -->  00:08:31.060
class, so let's have a look at it so the
194

194

00:08:31.060  -->  00:08:32.979
road bike class is really similar to
195

195

00:08:32.979  -->  00:08:35.290
mountain bike, except instead of having a
196

196

00:08:35.290  -->  00:08:37.630
seat height field, it has a tire width
197

197

00:08:37.630  -->  00:08:40.120
field, it's doing the same sort of thing
198

198

00:08:40.120  -->  00:08:42.250
in the constructor but one thing that's
199

199

00:08:42.250  -->  00:08:43.900
a little bit different is it only has a
200

200

00:08:43.900  -->  00:08:46.720
get, so nothing terribly complicated in
201

201

00:08:46.720  -->  00:08:49.480
here. Now go ahead and convert this class
202

202

00:08:49.480  -->  00:08:51.490
to Kotlin and I would call it Kotlin-
203

203

00:08:51.490  -->  00:08:54.370
Kotlin road bike so pause the video and
204

204

00:08:54.370  -->  00:08:59.180
go ahead and write the Kotlin road bike class.
205

205

00:08:59.180  -->  00:09:01.850
Okay, well this is really similar to the
206

206

00:09:01.850  -->  00:09:03.470
mountain bike, the only difference is
207

207

00:09:03.470  -->  00:09:07.790
because the tire width only has a get,
208

208

00:09:07.790  -->  00:09:09.500
we want it to be a val
209

209

00:09:09.500  -->  00:09:12.200
property, not a var property because it
210

210

00:09:12.200  -->  00:09:14.810
can't be set. So let's go back over to
211

211

00:09:14.810  -->  00:09:17.300
the Kotlin file and I'm actually just
212

212

00:09:17.300  -->  00:09:20.180
going to copy this to give me a bit of a
213

213

00:09:20.180  -->  00:09:23.780
head start here and this will be a
214

214

00:09:23.780  -->  00:09:28.070
Kotlin road bike and we have a tire
215

215

00:09:28.070  -->  00:09:29.300
width property that's going to be a
216

216

00:09:29.300  -->  00:09:33.370
vowel. So we'll change that to vowel and
217

217

00:09:33.370  -->  00:09:38.270
we'll say tire width and that's it,
218

218

00:09:38.270  -->  00:09:41.360
that's all we need, so with this we've
219

219

00:09:41.360  -->  00:09:44.720
declared the tire width property,
220

220

00:09:44.720  -->  00:09:47.090
it's a vowel because there's no set,
221

221

00:09:47.090  -->  00:09:49.940
so nobody in this in the outside world can
222

222

00:09:49.940  -->  00:09:52.220
set the tire width after the instance
223

223

00:09:52.220  -->  00:09:53.960
has been created and it'll be the same
224

224

00:09:53.960  -->  00:09:56.540
situation here, once the instance has
225

225

00:09:56.540  -->  00:09:58.220
been created, the tire width can't be
226

226

00:09:58.220  -->  00:10:02.200
changed and we've called super and
227

227

00:10:02.200  -->  00:10:05.450
passed up the cadence, the speed and the
228

228

00:10:05.450  -->  00:10:08.540
gear, so we've now written the equivalent
229

229

00:10:08.540  -->  00:10:10.730
Kotlin classes and I think you'll agree
230

230

00:10:10.730  -->  00:10:13.160
that this is a lot more concise, I mean
231

231

00:10:13.160  -->  00:10:14.960
if we look at the Java classes, there's
232

232

00:10:14.960  -->  00:10:18.620
less code in this entire file then there
233

233

00:10:18.620  -->  00:10:21.740
isn't a bicycle class this is IntelliJ
234

234

00:10:21.740  -->  00:10:24.620
has collapsed all of the gets and sets so,
235

235

00:10:24.620  -->  00:10:27.680
if I was to expand them, we'd see them in
236

236

00:10:27.680  -->  00:10:30.350
all their glory and we can see there's
237

237

00:10:30.350  -->  00:10:32.510
more code in this file than there is in
238

238

00:10:32.510  -->  00:10:34.310
this file and this file we've declared
239

239

00:10:34.310  -->  00:10:39.710
all three classes. So this, this and this
240

240

00:10:39.710  -->  00:10:44.360
So all can be reduced down to this.
241

241

00:10:44.360  -->  00:10:46.400
So Kotlin is a lot more concise,
242

242

00:10:46.400  -->  00:10:49.220
the difficult thing here is to remember that
243

243

00:10:49.220  -->  00:10:52.400
if there wasn't a set, we want it to be
244

244

00:10:52.400  -->  00:10:54.860
val and also that we always have to be
245

245

00:10:54.860  -->  00:10:57.770
delegating up to the primary constructor
246

246

00:10:57.770  -->  00:11:01.730
of the superclass and because of that,
247

247

00:11:01.730  -->  00:11:05.030
we don't redeclare the properties here,
248

248

00:11:05.030  -->  00:11:07.010
that's something that can get some
249

249

00:11:07.010  -->  00:11:08.450
developers into trouble, I've seen
250

250

00:11:08.450  -->  00:11:10.310
developers online asking about this
251

251

00:11:10.310  -->  00:11:12.980
because they're trying to redeclare the properties
252

252

00:11:12.980  -->  00:11:15.529
here and they're getting errors and often
253

253

00:11:15.529  -->  00:11:17.959
they don't understand why. So you only
254

254

00:11:17.959  -->  00:11:21.440
declare the properties once and they're
255

255

00:11:21.440  -->  00:11:23.180
declared the cadence, the speed and the
256

256

00:11:23.180  -->  00:11:25.010
gear properties are declared up in the
257

257

00:11:25.010  -->  00:11:26.810
primary constructor for the Kotlin
258

258

00:11:26.810  -->  00:11:29.540
bicycle, so all of the subclasses want to
259

259

00:11:29.540  -->  00:11:32.480
defer back up to the primary constructor
260

260

00:11:32.480  -->  00:11:34.160
of Kotlin bicycle for those three
261

261

00:11:34.160  -->  00:11:36.050
properties, you don't want to be
262

262

00:11:36.050  -->  00:11:39.139
redeclaring them here, also there was the
263

263

00:11:39.139  -->  00:11:42.589
issue of the private and not wanting to
264

264

00:11:42.589  -->  00:11:44.449
make them private here, because we
265

265

00:11:44.449  -->  00:11:46.670
discussed this when we went over the
266

266

00:11:46.670  -->  00:11:49.760
access modifiers, that even though these
267

267

00:11:49.760  -->  00:11:52.639
properties are public, the outside world
268

268

00:11:52.639  -->  00:11:54.500
still has to go through the getters and
269

269

00:11:54.500  -->  00:11:57.170
setters. This is the equivalent in Java
270

270

00:11:57.170  -->  00:11:59.600
of having a private field with a set
271

271

00:11:59.600  -->  00:12:03.110
and get. If you make a call in property
272

272

00:12:03.110  -->  00:12:05.269
private, then nothing outside the outside
273

273

00:12:05.269  -->  00:12:07.790
world can access it and that's not what
274

274

00:12:07.790  -->  00:12:10.430
we want. Okay so now that we've converted
275

275

00:12:10.430  -->  00:12:11.990
our three classes, I'm going to go back
276

276

00:12:11.990  -->  00:12:14.329
to the Java bicycle class and I'm going
277

277

00:12:14.329  -->  00:12:18.230
to add a print description method,
278

278

00:12:18.230  -->  00:12:20.449
I'm going to say public void print
279

279

00:12:20.449  -->  00:12:23.000
description, I'm not going to take any
280

280

00:12:23.000  -->  00:12:24.949
parameters and this is basically going
281

281

00:12:24.949  -->  00:12:28.310
to be a two string method but it adds a
282

282

00:12:28.310  -->  00:12:30.110
little more information than just the
283

283

00:12:30.110  -->  00:12:33.079
names of the fields. So I'm going to say
284

284

00:12:33.079  -->  00:12:37.459
system dot out dot print line and it
285

285

00:12:37.459  -->  00:12:42.949
says bike is in gear and then we're
286

286

00:12:42.949  -->  00:12:48.889
going to add the gear property, append it
287

287

00:12:48.889  -->  00:12:53.389
and then we can say with a cadence of
288

288

00:12:53.389  -->  00:12:56.649
and we're going to append the cadence
289

289

00:12:56.649  -->  00:13:02.019
field and then we're going to say
290

290

00:13:02.019  -->  00:13:07.550
traveling at a speed of speed and then
291

291

00:13:07.550  -->  00:13:11.360
we're going to append a period. So when
292

292

00:13:11.360  -->  00:13:13.310
print description is called, bike is in
293

293

00:13:13.310  -->  00:13:15.529
gear gear, with a cadence of cadence
294

294

00:13:15.529  -->  00:13:18.649
traveling at a speed of speed period
295

295

00:13:18.649  -->  00:13:21.410
will be printed to the console. So what I
296

296

00:13:21.410  -->  00:13:23.870
want you to do now is I want you to add
297

297

00:13:23.870  -->  00:13:26.660
this print description
298

298

00:13:26.660  -->  00:13:30.019
method to the Kotlin bicycle class and I
299

299

00:13:30.019  -->  00:13:31.850
want you to change the body, so that
300

300

00:13:31.850  -->  00:13:35.120
you're doing this in a more Kotlin like
301

301

00:13:35.120  -->  00:13:38.000
way. Now, this is a long string, so you
302

302

00:13:38.000  -->  00:13:39.740
might want to split it over two lines
303

303

00:13:39.740  -->  00:13:41.600
and in that case you will need to use
304

304

00:13:41.600  -->  00:13:45.170
an append to do that, but that's all you
305

305

00:13:45.170  -->  00:13:48.620
should need. So add the print description
306

306

00:13:48.620  -->  00:13:51.740
method to the Kotlin bicycle class, have
307

307

00:13:51.740  -->  00:13:54.170
it print out the same thing using a
308

308

00:13:54.170  -->  00:13:57.920
maximum of one concatenation. So give
309

309

00:13:57.920  -->  00:14:02.180
that a try and I'll see you in a minute.
310

310

00:14:02.180  -->  00:14:04.770
Okay, let's go over to our Kotlin file
311

311

00:14:04.770  -->  00:14:07.530
and this isn't too complicated, I'm going
312

312

00:14:07.530  -->  00:14:09.480
to add it underneath the speed-up
313

313

00:14:09.480  -->  00:14:12.030
function, so I'll say fun print
314

314

00:14:12.030  -->  00:14:14.850
description, I could have copied and
315

315

00:14:14.850  -->  00:14:17.100
pasted the code but actually I'm going
316

316

00:14:17.100  -->  00:14:19.920
to do that, let's- let's do that just so I
317

317

00:14:19.920  -->  00:14:21.810
can point something out. So I'm going to
318

318

00:14:21.810  -->  00:14:25.740
say ctrl c and I'll come over here and
319

319

00:14:25.740  -->  00:14:28.590
say control v and once again, Kotlin is
320

320

00:14:28.590  -->  00:14:29.940
going to notice that I'm copying Java
321

321

00:14:29.940  -->  00:14:31.560
code, so I'm going to ask it to convert
322

322

00:14:31.560  -->  00:14:35.640
it and you'll see that when it does,
323

323

00:14:35.640  -->  00:14:38.190
we get perfectly valid code, this would work
324

324

00:14:38.190  -->  00:14:41.760
but it's not the solution we want and
325

325

00:14:41.760  -->  00:14:44.040
it's not the ideal way to do it in
326

326

00:14:44.040  -->  00:14:47.820
Kotlin. So as I mentioned when we briefly
327

327

00:14:47.820  -->  00:14:50.300
looked at the automated converter, it's
328

328

00:14:50.300  -->  00:14:53.580
designed to be more verbose because it's
329

329

00:14:53.580  -->  00:14:56.970
a little bit of a learning aid and also
330

330

00:14:56.970  -->  00:15:00.000
it tries to be as close to the Java code
331

331

00:15:00.000  -->  00:15:02.400
as it can be. And in this case it
332

332

00:15:02.400  -->  00:15:04.170
certainly is I mean essentially all it's
333

333

00:15:04.170  -->  00:15:06.260
done is knocked off the system dot out
334

334

00:15:06.260  -->  00:15:09.750
from the print line, I mean the only
335

335

00:15:09.750  -->  00:15:10.950
thing that's different apart from the
336

336

00:15:10.950  -->  00:15:12.990
function signature of course is this has
337

337

00:15:12.990  -->  00:15:15.480
system dot out, otherwise it's the same
338

338

00:15:15.480  -->  00:15:18.540
thing. So it's fine to use the automated
339

339

00:15:18.540  -->  00:15:20.520
converter and if you did that as a
340

340

00:15:20.520  -->  00:15:22.560
starting point, that's great I mean it's
341

341

00:15:22.560  -->  00:15:25.020
a good way to start, but our solution can
342

342

00:15:25.020  -->  00:15:27.660
only have a maximum of one concatenation
343

343

00:15:27.660  -->  00:15:30.000
and it doesn't even need that, I just set
344

344

00:15:30.000  -->  00:15:31.890
that because it's a long string and you
345

345

00:15:31.890  -->  00:15:33.210
might have wanted to have split it over
346

346

00:15:33.210  -->  00:15:35.370
two lines, but we can do it all in one
347

347

00:15:35.370  -->  00:15:37.320
line without any concatenations and of
348

348

00:15:37.320  -->  00:15:38.940
course, we can do that using a string
349

349

00:15:38.940  -->  00:15:41.520
template. So let's go ahead and do that
350

350

00:15:41.520  -->  00:15:44.370
now. So I'm going to change this to bike
351

351

00:15:44.370  -->  00:15:54.950
is in gear, gear with a cadence of
352

352

00:15:54.950  -->  00:15:57.990
cadence and then this is where I'm going
353

353

00:15:57.990  -->  00:16:00.180
to split it over the line, I don't have
354

354

00:16:00.180  -->  00:16:01.980
to, I could just pull this up but it'll
355

355

00:16:01.980  -->  00:16:07.070
run off the screen. So I'll say plus and
356

356

00:16:07.070  -->  00:16:09.450
then I don't need to blank here
357

357

00:16:09.450  -->  00:16:14.280
traveling at a speed of speed and we can
358

358

00:16:14.280  -->  00:16:15.630
just pull the period in here.
359

359

00:16:15.630  -->  00:16:18.240
And that's it. So this is more of a
360

360

00:16:18.240  -->  00:16:20.370
Kotlin like way of doing it, we've just
361

361

00:16:20.370  -->  00:16:21.990
got the one concatenation, we're using
362

362

00:16:21.990  -->  00:16:23.820
string templates and it's the equivalent
363

363

00:16:23.820  -->  00:16:27.900
of this. So now, I'm going to in the Java
364

364

00:16:27.900  -->  00:16:29.850
the other three Java classes, I'm going
365

365

00:16:29.850  -->  00:16:32.910
to add a print description for them,
366

366

00:16:32.910  -->  00:16:35.460
so for the mountain-bike I'm going to say
367

367

00:16:35.460  -->  00:16:38.910
public void print description and of
368

368

00:16:38.910  -->  00:16:41.070
course this is going to override the
369

369

00:16:41.070  -->  00:16:43.020
method in the bicycle class, so I'm going
370

370

00:16:43.020  -->  00:16:44.970
to call super dot print description,
371

371

00:16:44.970  -->  00:16:46.500
so we're not going to print the description
372

372

00:16:46.500  -->  00:16:48.300
out in one line, we're going to do it in
373

373

00:16:48.300  -->  00:16:51.720
two. So this is taking care of printing
374

374

00:16:51.720  -->  00:16:56.160
the gear cadence and speed, field so I
375

375

00:16:56.160  -->  00:16:58.530
just have to print the seat height here,
376

376

00:16:58.530  -->  00:17:00.540
so I'll say system dot out dot print
377

377

00:17:00.540  -->  00:17:05.520
line, print line the mountain bike has a
378

378

00:17:05.520  -->  00:17:13.470
seat height of plus seat height and I'll
379

379

00:17:13.470  -->  00:17:16.380
put the period there as well and that's
380

380

00:17:16.380  -->  00:17:18.630
all well we'll do it, I guess I wonder if
381

381

00:17:18.630  -->  00:17:20.480
this isn't inches all that inches here
382

382

00:17:20.480  -->  00:17:22.980
I'm going to assume it's in inches maybe
383

383

00:17:22.980  -->  00:17:25.949
it isn't, but I'll put inches here.
384

384

00:17:25.949  -->  00:17:29.130
So that's the print description method for
385

385

00:17:29.130  -->  00:17:30.270
the mountain-bike and now we're going to
386

386

00:17:30.270  -->  00:17:31.590
do the same thing for the road bike I'm
387

387

00:17:31.590  -->  00:17:37.800
going to copy this, paste it in here and
388

388

00:17:37.800  -->  00:17:42.950
I'll change this to the road bike has a
389

389

00:17:42.950  -->  00:17:49.710
tire width of and we'll say tire width
390

390

00:17:49.710  -->  00:17:54.270
and this is in millimeters, so I'm going
391

391

00:17:54.270  -->  00:17:58.800
to change this to mm so we now have a
392

392

00:17:58.800  -->  00:18:01.530
print description here and a print
393

393

00:18:01.530  -->  00:18:02.490
description here.
394

394

00:18:02.490  -->  00:18:04.830
And what I want you to do if you haven't
395

395

00:18:04.830  -->  00:18:06.870
already guessed, is to add these two
396

396

00:18:06.870  -->  00:18:09.900
methods into their respective classes in
397

397

00:18:09.900  -->  00:18:14.070
Kotlin. So convert this print description
398

398

00:18:14.070  -->  00:18:17.100
method and add it to the Kotlin mountain
399

399

00:18:17.100  -->  00:18:19.980
bike class and convert this one and add
400

400

00:18:19.980  -->  00:18:21.960
it to the Kotlin road bike class,
401

401

00:18:21.960  -->  00:18:26.520
so pause the video and give it a try.
402

402

00:18:26.520  -->  00:18:28.980
Okay, welcome back so I'm going to
403

403

00:18:28.980  -->  00:18:31.140
actually copy and paste some code in
404

404

00:18:31.140  -->  00:18:33.810
here, so I'm going to copy the
405

405

00:18:33.810  -->  00:18:35.910
mountain-bike print description come
406

406

00:18:35.910  -->  00:18:39.930
over to the Kotlin file and here's our
407

407

00:18:39.930  -->  00:18:43.170
mountain bike, so I'm going to paste,
408

408

00:18:43.170  -->  00:18:46.020
I'll let it knock off the system got out for
409

409

00:18:46.020  -->  00:18:50.610
me and it did. Now, here it added the
410

410

00:18:50.610  -->  00:18:53.610
override keyword which we need, but it's
411

411

00:18:53.610  -->  00:18:56.190
complaining now, because we need to
412

412

00:18:56.190  -->  00:18:59.070
declare this function is open, because
413

413

00:18:59.070  -->  00:19:01.500
remember everything is final by default
414

414

00:19:01.500  -->  00:19:04.380
in Kotlin, so I need to add the open
415

415

00:19:04.380  -->  00:19:07.170
keyword here, to let the compiler know
416

416

00:19:07.170  -->  00:19:09.270
that it's okay for this to be overridden,
417

417

00:19:09.270  -->  00:19:12.900
and now the error goes away and that's it.
418

418

00:19:12.900  -->  00:19:15.630
Here it noticed because this was a
419

419

00:19:15.630  -->  00:19:19.410
simpler concatenation, the converter
420

420

00:19:19.410  -->  00:19:21.210
actually just went ahead and used a
421

421

00:19:21.210  -->  00:19:24.210
string template for us, so the converter
422

422

00:19:24.210  -->  00:19:27.600
worked fine and we can do the same thing
423

423

00:19:27.600  -->  00:19:33.290
with the Kotlin roadbike, I'll grab this
424

424

00:19:33.290  -->  00:19:36.770
come into the Kotlin roadbike class,
425

425

00:19:36.770  -->  00:19:39.750
paste it in and I'll accept the
426

426

00:19:39.750  -->  00:19:42.480
conversion, so when both of these
427

427

00:19:42.480  -->  00:19:44.790
functions were delegating up to the
428

428

00:19:44.790  -->  00:19:46.710
super print description and you do that
429

429

00:19:46.710  -->  00:19:48.630
the exact same way you do in Java, if you
430

430

00:19:48.630  -->  00:19:50.610
want to call the super version of a
431

431

00:19:50.610  -->  00:19:53.460
method, you just use super dot and we're
432

432

00:19:53.460  -->  00:19:56.310
using a string template. So we now have
433

433

00:19:56.310  -->  00:20:00.780
our three Kotlin classes and we have a
434

434

00:20:00.780  -->  00:20:02.970
at least one function in each of them.
435

435

00:20:02.970  -->  00:20:05.130
I'm going to stop this video here and in
436

436

00:20:05.130  -->  00:20:06.930
the next video we're going to continue
437

437

00:20:06.930  -->  00:20:08.190
the challenge and we're going to
438

438

00:20:08.190  -->  00:20:10.620
actually start using these classes.
439

439

00:20:10.620  -->  00:20:13.580
So, I'll see you in the next video.
