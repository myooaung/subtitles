1
1

00:00:04,680  -->  00:00:07,019
Alright, it's time to take a closer
2

2

00:00:07,019  -->  00:00:09,660
look at functions, we've been writing and
3

3

00:00:09,660  -->  00:00:11,070
using them, but we haven't really
4

4

00:00:11,070  -->  00:00:13,619
discussed anything about them. However,
5

5

00:00:13,619  -->  00:00:15,480
since we've discussed the primary
6

6

00:00:15,480  -->  00:00:17,220
constructor, you'll already be familiar
7

7

00:00:17,220  -->  00:00:19,590
with some of this, but it's always good
8

8

00:00:19,590  -->  00:00:22,080
to review. Now first of all, a bit of
9

9

00:00:22,080  -->  00:00:24,869
terminology I mentioned this before when
10

10

00:00:24,869  -->  00:00:26,880
a function is a member of a class, it's
11

11

00:00:26,880  -->  00:00:29,160
usually referred to as a method or as a
12

12

00:00:29,160  -->  00:00:31,650
member function, but the syntax for
13

13

00:00:31,650  -->  00:00:33,480
functions is the same whether they're
14

14

00:00:33,480  -->  00:00:36,390
declared inside or outside a class.
15

15

00:00:36,390  -->  00:00:38,940
So sometimes I'll use the term method for
16

16

00:00:38,940  -->  00:00:41,489
functions because I have one foot in the
17

17

00:00:41,489  -->  00:00:43,739
Java world other times I say function
18

18

00:00:43,739  -->  00:00:45,750
but you'll know what I mean, method
19

19

00:00:45,750  -->  00:00:48,239
function, you'll know what I'm talking about.
20

20

00:00:48,239  -->  00:00:50,880
So you know what a function is, but let's
21

21

00:00:50,880  -->  00:00:52,500
take a closer look at how to declare
22

22

00:00:52,500  -->  00:00:54,809
them. I've got the main method or the
23

23

00:00:54,809  -->  00:00:57,510
main function rather up here, so as you
24

24

00:00:57,510  -->  00:00:59,910
know, you start with the keyword fun and
25

25

00:00:59,910  -->  00:01:02,460
you follow it with the function name.
26

26

00:01:02,460  -->  00:01:05,100
Next comes the parameter list, now one
27

27

00:01:05,100  -->  00:01:07,439
thing I haven't mentioned is that the
28

28

00:01:07,439  -->  00:01:09,600
default return type for a function is
29

29

00:01:09,600  -->  00:01:12,560
unit, we discussed this earlier and
30

30

00:01:12,560  -->  00:01:15,210
because it's the default, you don't have
31

31

00:01:15,210  -->  00:01:17,369
to explicitly specify it, so you don't
32

32

00:01:17,369  -->  00:01:21,390
have to go like this unit, again Kotlin
33

33

00:01:21,390  -->  00:01:23,460
is trying to save you typing, so if
34

34

00:01:23,460  -->  00:01:25,650
you're not returning anything, you're
35

35

00:01:25,650  -->  00:01:28,530
actually returning unit, but you don't
36

36

00:01:28,530  -->  00:01:31,350
have to explicitly specify it. So let's
37

37

00:01:31,350  -->  00:01:34,380
add another function that accepts a
38

38

00:01:34,380  -->  00:01:36,720
string and two integers and all it's
39

39

00:01:36,720  -->  00:01:38,400
going to do is multiply the integers
40

40

00:01:38,400  -->  00:01:40,259
together and then return a string with
41

41

00:01:40,259  -->  00:01:42,630
the result and it'll use the string
42

42

00:01:42,630  -->  00:01:47,030
parameter as a label within the returned result.
43

43

00:01:47,030  -->  00:01:50,100
So we'll say fun and we'll call this
44

44

00:01:50,100  -->  00:01:55,140
label, label multiply and as I said it
45

45

00:01:55,140  -->  00:01:57,720
accepts three parameters so it accepts
46

46

00:01:57,720  -->  00:02:00,920
operand one which is an int
47

47

00:02:00,920  -->  00:02:04,350
operand two which is also an inr and then
48

48

00:02:04,350  -->  00:02:08,129
it accepts a label, which is a string and
49

49

00:02:08,129  -->  00:02:10,319
in this case, it's going to return a
50

50

00:02:10,319  -->  00:02:13,079
string. So we'll add that to the end of
51

51

00:02:13,079  -->  00:02:15,359
the function. Now, as I mention the return
52

52

00:02:15,359  -->  00:02:17,549
type comes at the end of the signature
53

53

00:02:17,549  -->  00:02:18,370
which makes sense,
54

54

00:02:18,370  -->  00:02:21,160
I mean given how we declare variables,
55

55

00:02:21,160  -->  00:02:22,810
so the return type is always at the end
56

56

00:02:22,810  -->  00:02:26,019
following a colon. Okay, so let's write
57

57

00:02:26,019  -->  00:02:32,050
our function. So we'll say return label
58

58

00:02:32,050  -->  00:02:35,080
because we're going to label our result
59

59

00:02:35,080  -->  00:02:37,390
using the label that we passed in and
60

60

00:02:37,390  -->  00:02:39,640
then we'll use an expression here,
61

61

00:02:39,640  -->  00:02:44,379
so we'll say operand 1 times operand 2 and
62

62

00:02:44,379  -->  00:02:47,650
that's it, that's our function. Now we'll
63

63

00:02:47,650  -->  00:02:49,569
call it from the main function, so we'll
64

64

00:02:49,569  -->  00:02:54,310
say print line label multiply and
65

65

00:02:54,310  -->  00:02:59,110
we'll pass in three four and the result
66

66

00:02:59,110  -->  00:03:06,549
is for our label. We'll run and we'll see
67

67

00:03:06,549  -->  00:03:08,110
the result is 12, there's nothing
68

68

00:03:08,110  -->  00:03:10,239
earth-shattering going on here and in
69

69

00:03:10,239  -->  00:03:11,950
fact I don't actually need the blank
70

70

00:03:11,950  -->  00:03:16,209
here, because it's here, so I'll remove it.
71

71

00:03:16,209  -->  00:03:18,370
Now we can simplify this code further
72

72

00:03:18,370  -->  00:03:21,910
because hey it Kotlin. Now because our
73

73

00:03:21,910  -->  00:03:25,239
function consists of one expression
74

74

00:03:25,239  -->  00:03:27,340
essentially, we're just returning
75

75

00:03:27,340  -->  00:03:30,430
something here, we can write it on one
76

76

00:03:30,430  -->  00:03:32,019
line as follows,
77

77

00:03:32,019  -->  00:03:34,359
instead of putting this inside a block,
78

78

00:03:34,359  -->  00:03:38,500
we can just say equals we can remove the
79

79

00:03:38,500  -->  00:03:42,970
return keyword and we can take this away
80

80

00:03:42,970  -->  00:03:44,889
as well and then we don't really need
81

81

00:03:44,889  -->  00:03:47,139
the brackets now, because we're no longer
82

82

00:03:47,139  -->  00:03:52,120
using return. So that's it, that's our
83

83

00:03:52,120  -->  00:03:54,130
simplified function. So what we're saying
84

84

00:03:54,130  -->  00:03:57,489
here is the function is returning
85

85

00:03:57,489  -->  00:03:59,680
whatever comes after the equal sign.
86

86

00:03:59,680  -->  00:04:01,180
So in this case the function is going to
87

87

00:04:01,180  -->  00:04:04,930
return this string, we'll run and we'll
88

88

00:04:04,930  -->  00:04:07,180
see the same result as before, so if all
89

89

00:04:07,180  -->  00:04:08,769
your function is doing is returning the
90

90

00:04:08,769  -->  00:04:10,989
result of an expression, you can dispense
91

91

00:04:10,989  -->  00:04:12,910
with the curly braces in the return and
92

92

00:04:12,910  -->  00:04:14,769
because of that we can actually remove
93

93

00:04:14,769  -->  00:04:16,780
the return type here, because now the
94

94

00:04:16,780  -->  00:04:20,049
compiler can infer it. And so we've
95

95

00:04:20,049  -->  00:04:22,150
simplified the function even further now.
96

96

00:04:22,150  -->  00:04:23,979
We don't need the return type,
97

97

00:04:23,979  -->  00:04:26,919
the compiler can tell that oh you're going
98

98

00:04:26,919  -->  00:04:29,020
to return a string, you don't need to
99

99

00:04:29,020  -->  00:04:31,210
explicitly tell me that. Now here's some
100

100

00:04:31,210  -->  00:04:34,419
terminology functions with curly braces have what's
101

101

00:04:34,419  -->  00:04:37,659
called a block body. And functions
102

102

00:04:37,659  -->  00:04:39,699
without curly braces that are doing what
103

103

00:04:39,699  -->  00:04:42,310
we're doing here, just saying equals and
104

104

00:04:42,310  -->  00:04:44,469
returning something, they have what's
105

105

00:04:44,469  -->  00:04:47,349
called an expression body, so you'll hear
106

106

00:04:47,349  -->  00:04:50,229
those two terms used a function with a
107

107

00:04:50,229  -->  00:04:52,840
block body will have curly braces and
108

108

00:04:52,840  -->  00:04:54,819
obviously it's going to be doing a
109

109

00:04:54,819  -->  00:04:57,159
little bit more probably has more than
110

110

00:04:57,159  -->  00:04:59,889
one line of code in it and functions
111

111

00:04:59,889  -->  00:05:01,749
that don't have curly braces that
112

112

00:05:01,749  -->  00:05:05,469
essentially just say equals and have an
113

113

00:05:05,469  -->  00:05:07,719
expression, they have an expression body.
114

114

00:05:07,719  -->  00:05:10,479
Now once again, I'll just say what about
115

115

00:05:10,479  -->  00:05:12,629
functions that don't return anything?
116

116

00:05:12,629  -->  00:05:15,009
We discussed the unit type back when we
117

117

00:05:15,009  -->  00:05:16,870
covered data types and it's equivalent
118

118

00:05:16,870  -->  00:05:19,449
to void, but let's cut to the chase here
119

119

00:05:19,449  -->  00:05:21,460
as I mentioned before, you don't have to
120

120

00:05:21,460  -->  00:05:23,409
explicitly state that a function returns
121

121

00:05:23,409  -->  00:05:26,110
unit, in that case you can just leave off
122

122

00:05:26,110  -->  00:05:27,969
the return type, that's actually what the
123

123

00:05:27,969  -->  00:05:29,800
main function is doing as I showed you
124

124

00:05:29,800  -->  00:05:31,360
before, there's no return data type
125

125

00:05:31,360  -->  00:05:33,370
specified, because the function doesn't
126

126

00:05:33,370  -->  00:05:35,860
return anything, but officially speaking
127

127

00:05:35,860  -->  00:05:38,319
is return type of unit. Now you might
128

128

00:05:38,319  -->  00:05:39,969
think that because the main function
129

129

00:05:39,969  -->  00:05:41,800
doesn't return anything, it can't have an
130

130

00:05:41,800  -->  00:05:44,740
expression body, it actually can in this
131

131

00:05:44,740  -->  00:05:50,289
case. If we do this, we'll see that we
132

132

00:05:50,289  -->  00:05:54,909
don't get any errors and if we run we'll
133

133

00:05:54,909  -->  00:05:57,909
see that it still works. Now, the reason
134

134

00:05:57,909  -->  00:05:59,949
this is working is because this print
135

135

00:05:59,949  -->  00:06:02,289
line doesn't actually return anything,
136

136

00:06:02,289  -->  00:06:05,469
the type of the function body and the
137

137

00:06:05,469  -->  00:06:07,930
type of the function, the return type of
138

138

00:06:07,930  -->  00:06:10,120
the function they actually match, because
139

139

00:06:10,120  -->  00:06:12,939
print line isn't an expression and so
140

140

00:06:12,939  -->  00:06:16,210
this actually works, but if we were to do
141

141

00:06:16,210  -->  00:06:17,919
something like the following fun
142

142

00:06:17,919  -->  00:06:24,249
whatever equals 3 times 4, you'll see
143

143

00:06:24,249  -->  00:06:26,139
that works obviously, I mean this
144

144

00:06:26,139  -->  00:06:27,580
whenever we call this function, we're
145

145

00:06:27,580  -->  00:06:29,560
going to get 12, but if we were to say
146

146

00:06:29,560  -->  00:06:33,699
that this returns nothing, now we get an
147

147

00:06:33,699  -->  00:06:35,529
error, because it's saying that it
148

148

00:06:35,529  -->  00:06:40,169
requires unit, but it is returning an int.
149

149

00:06:40,169  -->  00:06:43,599
So we'd have to let the compiler infer
150

150

00:06:43,599  -->  00:06:45,590
here or we could put an int
151

151

00:06:45,590  -->  00:06:49,420
here it's working, because this returns
152

152

00:06:49,420  -->  00:06:52,820
nothing, which is the unit and this also
153

153

00:06:52,820  -->  00:06:55,370
returns nothing. So it kind of looks
154

154

00:06:55,370  -->  00:06:58,310
funny but it works. I'll take this out
155

155

00:06:58,310  -->  00:07:00,230
because that's not in the spirit of
156

156

00:07:00,230  -->  00:07:03,290
Kotlin. Okay, so let's bring in an
157

157

00:07:03,290  -->  00:07:05,900
employee class, we love our employee
158

158

00:07:05,900  -->  00:07:10,840
class and we'll use a first name again
159

159

00:07:10,840  -->  00:07:18,980
and we'll make it a string and then
160

160

00:07:18,980  -->  00:07:20,930
inside our class, let's add a function
161

161

00:07:20,930  -->  00:07:27,530
and we'll call it fun upper case first
162

162

00:07:27,530  -->  00:07:29,630
name, this is a really stupid function
163

163

00:07:29,630  -->  00:07:32,150
because obviously we could just probably
164

164

00:07:32,150  -->  00:07:34,400
do this directly, but let's let's roll
165

165

00:07:34,400  -->  00:07:38,000
with it. All it does is to upper case is
166

166

00:07:38,000  -->  00:07:39,440
the name and as you can see here we're
167

167

00:07:39,440  -->  00:07:41,540
using a function with an expression body,
168

168

00:07:41,540  -->  00:07:44,750
we don't have any curly braces now, as
169

169

00:07:44,750  -->  00:07:46,580
you know this function will be public
170

170

00:07:46,580  -->  00:07:48,230
and final by default just like
171

171

00:07:48,230  -->  00:07:50,240
everything else in Kotlin. So let's call
172

172

00:07:50,240  -->  00:07:52,900
it from the main function, I'm going to
173

173

00:07:52,900  -->  00:07:54,830
revert back to what we had before,
174

174

00:07:54,830  -->  00:07:56,870
because obviously now, I'm going to be
175

175

00:07:56,870  -->  00:07:59,840
doing more than just print lining one
176

176

00:07:59,840  -->  00:08:06,470
thing and we'll create an input employee
177

177

00:08:06,470  -->  00:08:10,160
val emp equals employee and this time
178

178

00:08:10,160  -->  00:08:12,410
let's give the employee the name Jane
179

179

00:08:12,410  -->  00:08:14,120
and then we'll call our function.
180

180

00:08:14,120  -->  00:08:17,930
So let's say print line emp dot uppercase
181

181

00:08:17,930  -->  00:08:20,750
first-name. Now, as you can see member
182

182

00:08:20,750  -->  00:08:22,820
functions are called just like methods
183

183

00:08:22,820  -->  00:08:26,150
in Java, you just use the instance and
184

184

00:08:26,150  -->  00:08:28,670
follow it with a period and then the
185

185

00:08:28,670  -->  00:08:31,100
function name and that's all I wanted to
186

186

00:08:31,100  -->  00:08:34,010
show you, for this just as with the
187

187

00:08:34,010  -->  00:08:36,080
primary constructor, we can use default
188

188

00:08:36,080  -->  00:08:38,180
parameter values as functions. So let's
189

189

00:08:38,180  -->  00:08:40,400
change the label multiply functions so
190

190

00:08:40,400  -->  00:08:42,740
it provides a default label, I'm going to
191

191

00:08:42,740  -->  00:08:44,630
put this on another line so things don't
192

192

00:08:44,630  -->  00:08:47,570
get too crowded and we'll give it the
193

193

00:08:47,570  -->  00:08:51,680
label the answer is, so that will be our
194

194

00:08:51,680  -->  00:08:54,020
default label. And now if we go back up
195

195

00:08:54,020  -->  00:08:55,940
to where we're calling it and we remove
196

196

00:08:55,940  -->  00:08:58,680
the label that we passed,
197

197

00:08:58,680  -->  00:09:04,379
and we run and we'll see that now we get
198

198

00:09:04,379  -->  00:09:06,509
the answer is 12 and also we now see
199

199

00:09:06,509  -->  00:09:08,939
Jane and uppercase from our upper case
200

200

00:09:08,939  -->  00:09:11,490
first name call. Now, you might think that
201

201

00:09:11,490  -->  00:09:13,410
when we assign a default value to a
202

202

00:09:13,410  -->  00:09:15,480
parameter, the compiler can infer the
203

203

00:09:15,480  -->  00:09:17,369
type and so it's okay to leave it off,
204

204

00:09:17,369  -->  00:09:20,399
but if we try that, so if we say no let's
205

205

00:09:20,399  -->  00:09:23,490
do that, you'll see that we get an error
206

206

00:09:23,490  -->  00:09:25,470
and it will say a type annotation is
207

207

00:09:25,470  -->  00:09:28,199
required on a value parameter, so when it
208

208

00:09:28,199  -->  00:09:30,209
comes to function parameters, we always
209

209

00:09:30,209  -->  00:09:32,129
have to include the type, even if the
210

210

00:09:32,129  -->  00:09:34,679
compiler can infer it, too bad. We have to
211

211

00:09:34,679  -->  00:09:37,559
include it, so we'll add it back. Now as
212

212

00:09:37,559  -->  00:09:40,199
we saw in the last video, when we were
213

213

00:09:40,199  -->  00:09:42,480
looking at data classes in Kotlin, you
214

214

00:09:42,480  -->  00:09:44,550
can associate parameter values with
215

215

00:09:44,550  -->  00:09:46,860
names, when you call a function which
216

216

00:09:46,860  -->  00:09:49,019
lets you specify the parameters in any
217

217

00:09:49,019  -->  00:09:51,569
order you want. So if we want it to, we
218

218

00:09:51,569  -->  00:09:53,970
could mix up the parameter orders in our
219

219

00:09:53,970  -->  00:09:57,809
label multiply call, so back in the
220

220

00:09:57,809  -->  00:09:59,399
main function, we could do something like
221

221

00:09:59,399  -->  00:10:03,540
this, we could say label multiply and we
222

222

00:10:03,540  -->  00:10:05,429
want to specify the label first, so we're
223

223

00:10:05,429  -->  00:10:08,699
going to say label equals, here's the
224

224

00:10:08,699  -->  00:10:12,389
result and then we want to put for some
225

225

00:10:12,389  -->  00:10:14,850
reason, some strange reason we want three
226

226

00:10:14,850  -->  00:10:18,480
to be operand 2 and we want 4 to be
227

227

00:10:18,480  -->  00:10:23,389
operand 1 and so we're passing the
228

228

00:10:23,389  -->  00:10:26,459
parameters essentially in reverse order.
229

229

00:10:26,459  -->  00:10:29,550
Now, once you've put one parameter out of
230

230

00:10:29,550  -->  00:10:31,499
order, you have to use names for all of
231

231

00:10:31,499  -->  00:10:34,170
them, obviously, I mean if you know once
232

232

00:10:34,170  -->  00:10:35,970
you've done this, the compilers not going
233

233

00:10:35,970  -->  00:10:37,379
to have a clue what's going on
234

234

00:10:37,379  -->  00:10:40,170
afterwards in terms of which number is
235

235

00:10:40,170  -->  00:10:42,209
supposed to go with which parameter.
236

236

00:10:42,209  -->  00:10:44,730
So let's run and we'll see that we get here
237

237

00:10:44,730  -->  00:10:46,829
is the result 12, so because we've
238

238

00:10:46,829  -->  00:10:48,480
labeled our parameters,
239

239

00:10:48,480  -->  00:10:50,220
the compiler didn't have any problem at all
240

240

00:10:50,220  -->  00:10:52,350
matching them up with the function
241

241

00:10:52,350  -->  00:10:55,019
parameters. Now this might not seem all
242

242

00:10:55,019  -->  00:10:57,240
that useful, but it can be when you have
243

243

00:10:57,240  -->  00:10:59,429
lots of parameters of the same type,
244

244

00:10:59,429  -->  00:11:01,860
mean for example, if you had a function
245

245

00:11:01,860  -->  00:11:06,089
that takes 10 integers, if you see a
246

246

00:11:06,089  -->  00:11:08,129
function call like this, you know
247

247

00:11:08,129  -->  00:11:12,900
function call 1 2 5 8,
248

248

00:11:12,900  -->  00:11:15,059
whatever these aren't matching
249

249

00:11:15,059  -->  00:11:17,540
what I'm saying, let's say six parameters
250

250

00:11:17,540  -->  00:11:19,680
somebody coming to look at your code
251

251

00:11:19,680  -->  00:11:21,660
later or even you coming to look at your
252

252

00:11:21,660  -->  00:11:23,910
code later, we'll have absolutely no clue
253

253

00:11:23,910  -->  00:11:25,709
what these parameters actually
254

254

00:11:25,709  -->  00:11:28,290
correspond to. I mean are they heights
255

255

00:11:28,290  -->  00:11:30,779
weights, widths, you know what are they?
256

256

00:11:30,779  -->  00:11:33,389
And so rather than commenting the code,
257

257

00:11:33,389  -->  00:11:36,329
you could use name parameters even if you're
258

258

00:11:36,329  -->  00:11:38,249
not calling the function with the
259

259

00:11:38,249  -->  00:11:40,769
parameters out of order, so in a way it's
260

260

00:11:40,769  -->  00:11:43,350
another way to document your code.
261

261

00:11:43,350  -->  00:11:45,449
Now, the official name for this and Kotlin is
262

262

00:11:45,449  -->  00:11:48,509
named arguments, so if you hear or read
263

263

00:11:48,509  -->  00:11:51,209
about named arguments, this is what is
264

264

00:11:51,209  -->  00:11:54,480
being referred to, calling the function
265

265

00:11:54,480  -->  00:11:56,370
and labeling your arguments in the
266

266

00:11:56,370  -->  00:11:59,370
function call. Okay, so just as in Java you
267

267

00:11:59,370  -->  00:12:01,170
can also have functions that accept an
268

268

00:12:01,170  -->  00:12:03,930
arbitrary number of arguments and you do
269

269

00:12:03,930  -->  00:12:07,170
this using the var arg keyword, so let's
270

270

00:12:07,170  -->  00:12:08,670
take a look at how this works, we'll
271

271

00:12:08,670  -->  00:12:10,199
create a function that accepts some
272

272

00:12:10,199  -->  00:12:12,329
number of cars and prints out all their
273

273

00:12:12,329  -->  00:12:15,779
colors, so you'll remember our car class
274

274

00:12:15,779  -->  00:12:18,839
from the last video, I'm going to add it
275

275

00:12:18,839  -->  00:12:20,519
back, won't take me long because it's the
276

276

00:12:20,519  -->  00:12:25,740
data class and we'll say color val color
277

277

00:12:25,740  -->  00:12:31,410
string, I think we had val model string
278

278

00:12:31,410  -->  00:12:36,240
and val your int. So there you go, with
279

279

00:12:36,240  -->  00:12:37,980
just that amount of typing we get our
280

280

00:12:37,980  -->  00:12:39,089
data class back.
281

281

00:12:39,089  -->  00:12:41,579
So let's now create a function that
282

282

00:12:41,579  -->  00:12:43,709
accepts some number of cars and prints
283

283

00:12:43,709  -->  00:12:46,009
out all their colors, so we can say fun
284

284

00:12:46,009  -->  00:12:51,569
print colors and it'll take some number
285

285

00:12:51,569  -->  00:13:01,680
of cars and then, I'll say for car in cars
286

286

00:13:01,680  -->  00:13:05,279
print the color. So a pretty simple
287

287

00:13:05,279  -->  00:13:07,740
function, so when you're using var args,
288

288

00:13:07,740  -->  00:13:10,320
you give the parameter name and then a
289

289

00:13:10,320  -->  00:13:12,150
type nothing, new there
290

290

00:13:12,150  -->  00:13:15,360
that's the order in Kotlin. So let's call
291

291

00:13:15,360  -->  00:13:17,250
the function with three cars, so back in
292

292

00:13:17,250  -->  00:13:18,060
our main function,
293

293

00:13:18,060  -->  00:13:21,380
I'll get rid of this and we'll say print
294

294

00:13:21,380  -->  00:13:24,420
colors and we'll have to create three
295

295

00:13:24,420  -->  00:13:27,150
cars here, so and actually I'll do this
296

296

00:13:27,150  -->  00:13:29,370
outside, so that we can reuse them so
297

297

00:13:29,370  -->  00:13:35,630
I'll say val car 1 equals car blue
298

298

00:13:35,630  -->  00:13:45,210
Toyota 2015 val car to equals car let's
299

299

00:13:45,210  -->  00:13:47,310
make this one red and when we can it a ford
300

300

00:13:47,310  -->  00:13:51,750
and we'll say it's a 2016 and then val
301

301

00:13:51,750  -->  00:14:00,720
car 3 equals car gray, we'll make this
302

302

00:14:00,720  -->  00:14:04,110
one a ford too and we'll make it as 2017.
303

303

00:14:04,110  -->  00:14:07,950
So, let's print the colors for all these
304

304

00:14:07,950  -->  00:14:13,770
cars and let's run and we'll see blue
305

305

00:14:13,770  -->  00:14:16,650
red and gray printed. Now you can only
306

306

00:14:16,650  -->  00:14:19,680
have one var arg parameter in a function
307

307

00:14:19,680  -->  00:14:22,020
signature, so we can't do something like
308

308

00:14:22,020  -->  00:14:24,150
this, we can't say oh we want this and
309

309

00:14:24,150  -->  00:14:27,570
then we want another set of something
310

310

00:14:27,570  -->  00:14:30,839
else, I don't know another x of type
311

311

00:14:30,839  -->  00:14:34,560
string, let's say, you can't do that, it'll
312

312

00:14:34,560  -->  00:14:36,750
say multiple of our arg parameters are
313

313

00:14:36,750  -->  00:14:40,020
prohibited. So you can only have one use
314

314

00:14:40,020  -->  00:14:41,880
of the var arg keyword within a function
315

315

00:14:41,880  -->  00:14:44,670
signature. Now, because we have named
316

316

00:14:44,670  -->  00:14:46,589
parameters in Kotlin, the var arg
317

317

00:14:46,589  -->  00:14:48,540
argument does not have to be the last
318

318

00:14:48,540  -->  00:14:51,540
argument, but if it isn't then you have
319

319

00:14:51,540  -->  00:14:53,550
to use name parameters when you call
320

320

00:14:53,550  -->  00:14:55,920
the function. So let's shake up this
321

321

00:14:55,920  -->  00:14:59,190
function signature a bit, we'll also have
322

322

00:14:59,190  -->  00:15:02,850
and just of strength called string here.
323

323

00:15:02,850  -->  00:15:06,000
So we've added another parameter and but
324

324

00:15:06,000  -->  00:15:08,490
the var arg one is actually the first
325

325

00:15:08,490  -->  00:15:10,980
parameter and then if we go back to our
326

326

00:15:10,980  -->  00:15:12,900
print colors, you'll see that we now have
327

327

00:15:12,900  -->  00:15:15,660
an error because we haven't passed the last
328

328

00:15:15,660  -->  00:15:19,200
parameter and to do so, we now have to
329

329

00:15:19,200  -->  00:15:21,990
use a name parameter here. So we have to
330

330

00:15:21,990  -->  00:15:25,880
say str equals and I'll just say color,
331

331

00:15:25,880  -->  00:15:29,310
we're not using it, but now you can
332

332

00:15:29,310  -->  00:15:30,960
understand why you have to do that
333

333

00:15:30,960  -->  00:15:34,680
because if you don't and let's say this
334

334

00:15:34,680  -->  00:15:38,070
was actually string, for example then if
335

335

00:15:38,070  -->  00:15:39,420
you had a bunch of strings here,
336

336

00:15:39,420  -->  00:15:41,940
the compilers not going to know which ones
337

337

00:15:41,940  -->  00:15:44,970
belong to the var arg, so you need to
338

338

00:15:44,970  -->  00:15:47,010
give it a hint here and say these three
339

339

00:15:47,010  -->  00:15:49,380
are the ones that I want to pass to the
340

340

00:15:49,380  -->  00:15:52,620
var arg and then here's the string
341

341

00:15:52,620  -->  00:15:55,320
parameter. So keep that in mind that if
342

342

00:15:55,320  -->  00:15:59,910
the var arg argument is not the last argument in the
343

343

00:15:59,910  -->  00:16:03,210
function signature, then you have to use
344

344

00:16:03,210  -->  00:16:06,390
name parameters. So if we did this the
345

345

00:16:06,390  -->  00:16:09,240
other way, if instead we put the var arg
346

346

00:16:09,240  -->  00:16:11,940
at the end, so I'll just temporarily
347

347

00:16:11,940  -->  00:16:25,880
change this, now we can put color here
348

348

00:16:25,880  -->  00:16:30,180
and remove it from here and that works
349

349

00:16:30,180  -->  00:16:33,420
now, we don't have to use name parameters.
350

350

00:16:33,420  -->  00:16:35,610
Now a lot of functions related to
351

351

00:16:35,610  -->  00:16:38,040
collections use var arg, you've already
352

352

00:16:38,040  -->  00:16:40,110
seen a few that you use when working
353

353

00:16:40,110  -->  00:16:42,420
with arrays, for example the array of
354

354

00:16:42,420  -->  00:16:44,490
function can take an arbitrary number of
355

355

00:16:44,490  -->  00:16:49,850
arguments, so if we do something like val
356

356

00:16:49,850  -->  00:16:57,030
numbers equals array of 1 2 3, this is
357

357

00:16:57,030  -->  00:16:58,860
actually using a var arg, because you can
358

358

00:16:58,860  -->  00:17:00,600
have any number of arguments here and if
359

359

00:17:00,600  -->  00:17:02,190
we take a look at the signature for
360

360

00:17:02,190  -->  00:17:05,570
array of by going to go to declaration,
361

361

00:17:05,570  -->  00:17:08,459
you'll see right here that it's using a
362

362

00:17:08,459  -->  00:17:11,760
var arg, so a lot of functions in the
363

363

00:17:11,760  -->  00:17:15,540
collections classes use var arg. So now
364

364

00:17:15,540  -->  00:17:17,459
that we know about var arg, we can
365

365

00:17:17,459  -->  00:17:19,170
discuss what's called the spread
366

366

00:17:19,170  -->  00:17:22,260
operator, so let's create an array of car
367

367

00:17:22,260  -->  00:17:25,530
objects this time, so we'll say val many
368

368

00:17:25,530  -->  00:17:29,530
cars equals array of
369

369

00:17:29,530  -->  00:17:34,070
and we'll put our three cars in there.
370

370

00:17:34,070  -->  00:17:36,920
So, we now have an array of three cars.
371

371

00:17:36,920  -->  00:17:38,600
Now, let's say we want to call the print
372

372

00:17:38,600  -->  00:17:41,090
colors function, I'm actually going to
373

373

00:17:41,090  -->  00:17:44,330
remove the string parameter now, so I'll
374

374

00:17:44,330  -->  00:17:48,290
remove it from up here as well, so we
375

375

00:17:48,290  -->  00:17:50,360
have an array of cars and we want to
376

376

00:17:50,360  -->  00:17:53,780
call this function, if we pass the array
377

377

00:17:53,780  -->  00:17:55,520
will the function be smart enough
378

378

00:17:55,520  -->  00:17:57,860
to loop through all the array elements?
379

379

00:17:57,860  -->  00:18:01,520
Well, it won't be in fact if we try to do
380

380

00:18:01,520  -->  00:18:05,810
it so we'll say print colors many cars,
381

381

00:18:08,500  -->  00:18:11,120
will get an error and it'll say there's
382

382

00:18:11,120  -->  00:18:13,250
a type mismatch, now what's it saying
383

383

00:18:13,250  -->  00:18:16,610
it's saying that it wants a car and it
384

384

00:18:16,610  -->  00:18:20,150
found an array of car so here at once a
385

385

00:18:20,150  -->  00:18:22,670
car and it found an array of car,
386

386

00:18:22,670  -->  00:18:24,920
now, this differs from Java, because in Java
387

387

00:18:24,920  -->  00:18:27,170
we could just pass the array, but we
388

388

00:18:27,170  -->  00:18:29,930
can't do that in Kotlin. So what do we do
389

389

00:18:29,930  -->  00:18:32,450
in this situation? What do we do when we
390

390

00:18:32,450  -->  00:18:35,420
have a function that's expecting a var
391

391

00:18:35,420  -->  00:18:38,300
arg and we have an array and we want to
392

392

00:18:38,300  -->  00:18:41,540
pass the array to that function?
393

393

00:18:41,540  -->  00:18:43,520
Well, this is where the spread operator comes
394

394

00:18:43,520  -->  00:18:46,580
in, the spread operator will unpack the
395

395

00:18:46,580  -->  00:18:48,530
array and pass the elements as
396

396

00:18:48,530  -->  00:18:51,410
individual arguments, the spread operator
397

397

00:18:51,410  -->  00:18:53,930
is the asterisk, so all we have to do is
398

398

00:18:53,930  -->  00:18:56,420
add an asterisk in front of the array
399

399

00:18:56,420  -->  00:19:03,760
here and the error goes away, we run
400

400

00:19:03,760  -->  00:19:06,410
we'll see that we get the colors printed
401

401

00:19:06,410  -->  00:19:08,090
and they're being printed twice,
402

402

00:19:08,090  -->  00:19:09,560
of course because we're also calling it up
403

403

00:19:09,560  -->  00:19:12,260
here. Now you're not limited to using the
404

404

00:19:12,260  -->  00:19:14,360
spread operator for this purpose, you can
405

405

00:19:14,360  -->  00:19:16,670
use it any time you need to unpack an
406

406

00:19:16,670  -->  00:19:19,850
array, for example let's say you have two
407

407

00:19:19,850  -->  00:19:21,590
arrays of cars and you want to combine
408

408

00:19:21,590  -->  00:19:23,900
them into a single array and you want to
409

409

00:19:23,900  -->  00:19:26,690
add another car to the array too. So if
410

410

00:19:26,690  -->  00:19:34,340
we do this val more cars equals and
411

411

00:19:34,340  -->  00:19:36,560
we'll say array of and we'll just use
412

412

00:19:36,560  -->  00:19:39,500
car two and car three, even though
413

413

00:19:39,500  -->  00:19:42,320
they're duplicates essentially and then
414

414

00:19:42,320  -->  00:19:43,250
we'll make another
415

415

00:19:43,250  -->  00:19:45,350
car, we'll call it car four and we'll
416

416

00:19:45,350  -->  00:19:51,320
just copy car two, so now we want to
417

417

00:19:51,320  -->  00:19:54,920
combine many cars with more cars and we
418

418

00:19:54,920  -->  00:19:57,140
want to add car four as well, so we can
419

419

00:19:57,140  -->  00:19:59,960
do the following, we can say val lots of
420

420

00:19:59,960  -->  00:20:07,040
cars equals array of many cars, more cars
421

421

00:20:07,040  -->  00:20:12,890
and car four and to check that we now
422

422

00:20:12,890  -->  00:20:14,720
have an array with all these cars in it,
423

423

00:20:14,720  -->  00:20:23,270
we can say for c in lots of cars and we'll
424

424

00:20:23,270  -->  00:20:30,140
print line c, so let's run and you'll see
425

425

00:20:30,140  -->  00:20:32,960
that what we've actually done here is we
426

426

00:20:32,960  -->  00:20:34,580
have an array of three elements,
427

427

00:20:34,580  -->  00:20:36,590
the first element is an array the second
428

428

00:20:36,590  -->  00:20:38,570
element is an array and the third
429

429

00:20:38,570  -->  00:20:41,630
element is car four, so that's what
430

430

00:20:41,630  -->  00:20:44,660
we've done here, but we didn't want that,
431

431

00:20:44,660  -->  00:20:46,910
what we wanted was, we wanted an array
432

432

00:20:46,910  -->  00:20:51,560
with car one, car two car three from many
433

433

00:20:51,560  -->  00:20:54,320
cars car two and car three from more
434

434

00:20:54,320  -->  00:20:57,260
cars and then car four. So what we should
435

435

00:20:57,260  -->  00:20:59,600
have done was use the spread operator,
436

436

00:20:59,600  -->  00:21:03,770
in front of our two arrays and what will
437

437

00:21:03,770  -->  00:21:07,520
happen is when we do the array of the
438

438

00:21:07,520  -->  00:21:09,410
elements in this array will be unpacked
439

439

00:21:09,410  -->  00:21:11,210
and the elements of this array will be
440

440

00:21:11,210  -->  00:21:13,670
unpacked, so we'll end up with an array
441

441

00:21:13,670  -->  00:21:16,580
of seven cars or six cars actually which
442

442

00:21:16,580  -->  00:21:19,940
is what we wanted, rather than creating
443

443

00:21:19,940  -->  00:21:23,300
an array where a couple of the elements
444

444

00:21:23,300  -->  00:21:25,580
are just the arrays we had before. So now,
445

445

00:21:25,580  -->  00:21:30,710
if we run, we'll see that we get an array
446

446

00:21:30,710  -->  00:21:32,480
of six cars, so that's another use for
447

447

00:21:32,480  -->  00:21:35,590
the spread operator, whenever you want to
448

448

00:21:35,590  -->  00:21:38,060
unpack an array and get at the
449

449

00:21:38,060  -->  00:21:40,610
individual elements rather than using
450

450

00:21:40,610  -->  00:21:43,100
the array itself, an easy way to do that
451

451

00:21:43,100  -->  00:21:46,310
is to use the spread operator. Alright,
452

452

00:21:46,310  -->  00:21:47,900
I'll see you in the next video where
453

453

00:21:47,900  -->  00:21:52,720
we'll continue our discussion of functions.
