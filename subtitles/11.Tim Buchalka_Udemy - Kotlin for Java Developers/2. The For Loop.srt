1
1

00:00:04,680  -->  00:00:07,950
Alright, so I said we'd cover loops in
2

2

00:00:07,950  -->  00:00:09,570
this section, but we're going to spend
3

3

00:00:09,570  -->  00:00:12,570
all our time on the for loop, because the
4

4

00:00:12,570  -->  00:00:14,730
other loops haven't changed in Kotlin.
5

5

00:00:14,730  -->  00:00:17,310
So all the other loops the while and
6

6

00:00:17,310  -->  00:00:19,800
do-while loop, they have the same syntax
7

7

00:00:19,800  -->  00:00:21,630
and behave the same way as they do in
8

8

00:00:21,630  -->  00:00:23,820
Java. So there you go, we've covered the
9

9

00:00:23,820  -->  00:00:26,460
while and do-while loops, but now let's
10

10

00:00:26,460  -->  00:00:28,530
talk about the loop that has changed in
11

11

00:00:28,530  -->  00:00:31,500
Kotlin, the for loop. So I've mentioned a
12

12

00:00:31,500  -->  00:00:32,969
couple of times already that the
13

13

00:00:32,969  -->  00:00:35,460
original for loop isn't available in
14

14

00:00:35,460  -->  00:00:37,440
Kotlin. So in Kotlin you can't do
15

15

00:00:37,440  -->  00:00:41,040
something like this, you can't do for int
16

16

00:00:41,040  -->  00:00:46,680
i equals 0, i less than 10, i plus plus,
17

17

00:00:46,680  -->  00:00:51,630
you know do something, we're getting
18

18

00:00:51,630  -->  00:00:53,940
errors here and not just because this
19

19

00:00:53,940  -->  00:00:55,890
syntax would be bad, it's because this
20

20

00:00:55,890  -->  00:00:58,230
form of the for loop does not exist in
21

21

00:00:58,230  -->  00:01:02,010
Kotlin, instead in Kotlin for loops use
22

22

00:01:02,010  -->  00:01:06,180
what's called ranges. So what is a range?
23

23

00:01:06,180  -->  00:01:08,729
Well a range is an interval that has a
24

24

00:01:08,729  -->  00:01:11,940
start and an end value, you can use them
25

25

00:01:11,940  -->  00:01:13,799
with the for loop and you can also
26

26

00:01:13,799  -->  00:01:17,130
assign them to variables. So let's do
27

27

00:01:17,130  -->  00:01:19,710
that, I'm going to get rid of this for
28

28

00:01:19,710  -->  00:01:22,890
loop here and I'm going to say val range
29

29

00:01:22,890  -->  00:01:27,720
equals 1 to 5, the range operator is the
30

30

00:01:27,720  -->  00:01:31,680
two dots the start and end values are inclusive.
31

31

00:01:31,680  -->  00:01:36,210
So the range includes 1 and also it includes 5.
32

32

00:01:36,210  -->  00:01:38,369
So essentially numbers that are greater
33

33

00:01:38,369  -->  00:01:40,650
than or equal to 1 and less than or
34

34

00:01:40,650  -->  00:01:43,680
equal to 5 are within this range. Now, you
35

35

00:01:43,680  -->  00:01:46,140
can also have ranges of chars and
36

36

00:01:46,140  -->  00:01:48,090
strings, because both of them are
37

37

00:01:48,090  -->  00:01:51,329
comparable. So let's define a char range,
38

38

00:01:51,329  -->  00:01:54,479
char range, var range equals and
39

39

00:01:54,479  -->  00:01:57,810
we'll say we want to range from a to z,
40

40

00:01:57,810  -->  00:02:01,369
so that works or we could say val
41

41

00:02:01,369  -->  00:02:04,020
string range and we'll say we want to
42

42

00:02:04,020  -->  00:02:10,140
range abc to xyz and both of these work.
43

43

00:02:10,140  -->  00:02:12,900
So any type that's comparable, can be
44

44

00:02:12,900  -->  00:02:15,269
used in a range. So as I said, those
45

45

00:02:15,269  -->  00:02:18,600
values that are included in a range are those
46

46

00:02:18,600  -->  00:02:20,220
that are greater than or equal in the
47

47

00:02:20,220  -->  00:02:22,410
start value and less than an equal than
48

48

00:02:22,410  -->  00:02:25,440
the N value. So the type used in the
49

49

00:02:25,440  -->  00:02:27,690
range has to be comparable because of
50

50

00:02:27,690  -->  00:02:30,840
the in operator you use the in operator
51

51

00:02:30,840  -->  00:02:35,280
to test whether a value is in a range.
52

52

00:02:35,280  -->  00:02:39,840
So for example, we could say print line 3 in
53

53

00:02:39,840  -->  00:02:43,170
range, so here we're testing whether 3
54

54

00:02:43,170  -->  00:02:46,890
belongs to this range, we could say print
55

55

00:02:46,890  -->  00:02:57,140
line q in char range, print line ccc in
56

56

00:02:57,140  -->  00:02:59,610
string range, but we could also do
57

57

00:02:59,610  -->  00:03:03,960
something like this print line cccccc in
58

58

00:03:03,960  -->  00:03:06,600
string range. So let's run and see what
59

59

00:03:06,600  -->  00:03:12,300
we get for these and we'll see that we
60

60

00:03:12,300  -->  00:03:14,070
get true for all of them, now these are
61

61

00:03:14,070  -->  00:03:17,010
probably obvious, this one we get true
62

62

00:03:17,010  -->  00:03:21,060
because it's less than xyz, because x
63

63

00:03:21,060  -->  00:03:23,610
is greater than c, so this string even
64

64

00:03:23,610  -->  00:03:26,040
though it's longer, is less than xyz
65

65

00:03:26,040  -->  00:03:27,990
and so it belongs to the string range
66

66

00:03:27,990  -->  00:03:30,450
we've defined here. So let's try another one.
67

67

00:03:30,450  -->  00:03:33,570
We'll say not up here, but down here
68

68

00:03:33,570  -->  00:03:37,800
we'll say print line and let's try
69

69

00:03:37,800  -->  00:03:43,020
siz z in string range and what do you
70

70

00:03:43,020  -->  00:03:44,100
think we're going to get for this one?
71

71

00:03:44,100  -->  00:03:49,020
Let's run and of course we'll get false
72

72

00:03:49,020  -->  00:03:53,280
now, because that is greater than xyz.
73

73

00:03:53,280  -->  00:03:55,440
So it's not less than or equal to the N
74

74

00:03:55,440  -->  00:03:57,900
value, therefore it's not in this range.
75

75

00:03:57,900  -->  00:04:00,360
Now, of course there are range functions
76

76

00:04:00,360  -->  00:04:02,250
that you can use to create other types
77

77

00:04:02,250  -->  00:04:04,590
of ranges, for example let's say you want
78

78

00:04:04,590  -->  00:04:07,800
to range from 5 to 1, rather than from 1
79

79

00:04:07,800  -->  00:04:10,290
to 5. Well, you can do that you can say
80

80

00:04:10,290  -->  00:04:19,100
val backward range equals 5 dot down to 1.
81

81

00:04:19,100  -->  00:04:20,730
Now you might be wondering why you
82

82

00:04:20,730  -->  00:04:21,840
can't just go like this,
83

83

00:04:21,840  -->  00:04:25,860
val let's just call it r equals 5 to 1
84

84

00:04:25,860  -->  00:04:27,840
because you'll see here there aren't any
85

85

00:04:27,840  -->  00:04:30,720
compile errors, but let's try testing
86

86

00:04:30,720  -->  00:04:32,340
some values with that one, so
87

87

00:04:32,340  -->  00:04:36,919
print line let's say five in r and
88

88

00:04:36,919  -->  00:04:41,940
let's run this and we'll see that we get
89

89

00:04:41,940  -->  00:04:43,919
false and the reason we get false is
90

90

00:04:43,919  -->  00:04:46,880
because this is going to compare five
91

91

00:04:46,880  -->  00:04:49,530
against the start value and the end
92

92

00:04:49,530  -->  00:04:52,770
value, so is it greater than or equal
93

93

00:04:52,770  -->  00:04:54,990
to the start value? Yes. but is it less
94

94

00:04:54,990  -->  00:04:57,720
than or equal to the N value? No, it's not.
95

95

00:04:57,720  -->  00:05:00,960
So this creating a backwards range like
96

96

00:05:00,960  -->  00:05:02,610
this doesn't work, it doesn't give you
97

97

00:05:02,610  -->  00:05:05,340
what you want, you need to use for a
98

98

00:05:05,340  -->  00:05:08,460
backward range five down to one and then
99

99

00:05:08,460  -->  00:05:12,540
we'll say print line five in backward
100

100

00:05:12,540  -->  00:05:18,210
range and let's run now and this time we
101

101

00:05:18,210  -->  00:05:20,880
get true. So if you want to create a
102

102

00:05:20,880  -->  00:05:23,190
range that's in reverse order,
103

103

00:05:23,190  -->  00:05:25,110
essentially you've got to use the down
104

104

00:05:25,110  -->  00:05:27,870
to function, Now you might want a range
105

105

00:05:27,870  -->  00:05:30,000
that looks something like three six nine
106

106

00:05:30,000  -->  00:05:32,910
twelve fifteen, in other words you want
107

107

00:05:32,910  -->  00:05:36,600
the step to be three, so rather than a
108

108

00:05:36,600  -->  00:05:40,080
range going one two three four five or
109

109

00:05:40,080  -->  00:05:42,450
each value in the range, is basically
110

110

00:05:42,450  -->  00:05:44,700
incremented by one, you might want each
111

111

00:05:44,700  -->  00:05:47,280
value in the range, each subsequent value
112

112

00:05:47,280  -->  00:05:50,010
to be incremented by a different number.
113

113

00:05:50,010  -->  00:05:52,680
And you can do that, so first you define
114

114

00:05:52,680  -->  00:05:56,340
the range, so we'll say val step range
115

115

00:05:56,340  -->  00:05:59,400
equals and we want to start at three to
116

116

00:05:59,400  -->  00:06:01,470
fifteen, if we want to go three six nine
117

117

00:06:01,470  -->  00:06:05,490
twelve up to fifteen and then we'll say val
118

118

00:06:05,490  -->  00:06:12,630
step 3 equals step range dot step and we
119

119

00:06:12,630  -->  00:06:15,720
want each step to be three. Now, you can
120

120

00:06:15,720  -->  00:06:18,240
also reverse an existing range meaning
121

121

00:06:18,240  -->  00:06:19,950
that you can switch the start and end
122

122

00:06:19,950  -->  00:06:22,620
values, but you can only do this with
123

123

00:06:22,620  -->  00:06:24,990
numeric ranges. so this won't work with
124

124

00:06:24,990  -->  00:06:27,889
all types of ranges, so we could say val
125

125

00:06:27,889  -->  00:06:33,810
reversed range equals range dot reversed
126

126

00:06:33,810  -->  00:06:36,750
and in fact, when it comes to some of the
127

127

00:06:36,750  -->  00:06:38,430
functions we've looked at like the step
128

128

00:06:38,430  -->  00:06:41,010
two down to and reversed, you can only
129

129

00:06:41,010  -->  00:06:43,050
really use them with numeric types and
130

130

00:06:43,050  -->  00:06:45,390
char, you couldn't use them with strings
131

131

00:06:45,390  -->  00:06:48,120
or you can't use and let's say you have a employee
132

132

00:06:48,120  -->  00:06:51,449
class and it implements comparable you
133

133

00:06:51,449  -->  00:06:54,419
can create a range, a regular range with
134

134

00:06:54,419  -->  00:06:58,050
a low start value in a higher end value,
135

135

00:06:58,050  -->  00:07:01,289
but you can't call step and down to and
136

136

00:07:01,289  -->  00:07:03,539
things like that, because the compiler is
137

137

00:07:03,539  -->  00:07:04,830
not going to be able to figure out what
138

138

00:07:04,830  -->  00:07:07,199
you want. You can actually do a lot of
139

139

00:07:07,199  -->  00:07:09,599
things with ranges though and let's take
140

140

00:07:09,599  -->  00:07:11,069
a look at what you can do. So if we say
141

141

00:07:11,069  -->  00:07:14,009
step range dot to see what IntelliJ
142

142

00:07:14,009  -->  00:07:15,479
suggests, you can see that there's quite
143

143

00:07:15,479  -->  00:07:19,110
a lot of things that you can do.
144

144

00:07:19,110  -->  00:07:20,430
So you'll want to take a look at the range
145

145

00:07:20,430  -->  00:07:22,710
documentation at some point to see what
146

146

00:07:22,710  -->  00:07:25,050
cool stuff is available to you but let's
147

147

00:07:25,050  -->  00:07:27,360
change this now to our string range to
148

148

00:07:27,360  -->  00:07:29,220
see what what's available on a string
149

149

00:07:29,220  -->  00:07:31,530
range and you'll see that it's a much
150

150

00:07:31,530  -->  00:07:33,840
shorter list, there's not as much stuff.
151

151

00:07:33,840  -->  00:07:36,060
So as I mentioned, when you're working
152

152

00:07:36,060  -->  00:07:38,940
with numeric ranges or char ranges,
153

153

00:07:38,940  -->  00:07:41,699
you can do quite a bit with them but outside
154

154

00:07:41,699  -->  00:07:43,620
of that, you can still do some stuff I
155

155

00:07:43,620  -->  00:07:45,090
mean you can test if it's empty,
156

156

00:07:45,090  -->  00:07:47,039
you can test if it contains something
157

157

00:07:47,039  -->  00:07:49,710
but there's not a lot else you can do
158

158

00:07:49,710  -->  00:07:53,580
with string ranges and other types of
159

159

00:07:53,580  -->  00:07:55,860
ranges. So while you can create ranges
160

160

00:07:55,860  -->  00:07:58,199
with any comparable type numeric ranges
161

161

00:07:58,199  -->  00:08:00,449
are the most powerful. So loops are where
162

162

00:08:00,449  -->  00:08:03,060
the in operator comes into play, we've
163

163

00:08:03,060  -->  00:08:06,240
seen in in here and let's print out some
164

164

00:08:06,240  -->  00:08:07,889
of the ranges that we created, so we can
165

165

00:08:07,889  -->  00:08:10,440
actually look at them. So we'll go back
166

166

00:08:10,440  -->  00:08:16,889
here and we'll say for i in range we'll
167

167

00:08:16,889  -->  00:08:20,069
print line i, so what we're doing here is
168

168

00:08:20,069  -->  00:08:23,219
we're saying for every value of I that
169

169

00:08:23,219  -->  00:08:25,800
belongs to this range, go ahead and print it.
170

170

00:08:25,800  -->  00:08:29,270
So let's run this
171

171

00:08:29,270  -->  00:08:31,699
and we'll see that we get one two three
172

172

00:08:31,699  -->  00:08:34,250
four five printed. Now, I'm not going to
173

173

00:08:34,250  -->  00:08:36,440
print this one out because it would be
174

174

00:08:36,440  -->  00:08:39,500
quite long, but let's print out our step
175

175

00:08:39,500  -->  00:08:41,479
range and see what we get for that one
176

176

00:08:41,479  -->  00:08:48,680
for let's call it n in step range and
177

177

00:08:48,680  -->  00:08:53,290
we'll print line n so let's run and
178

178

00:08:53,290  -->  00:08:58,339
we'll see that we're getting 3 4 5 etc.
179

179

00:08:58,339  -->  00:09:03,680
down to 15, but if I copy this in fact
180

180

00:09:03,680  -->  00:09:05,510
I'll delete it from here, so we're not
181

181

00:09:05,510  -->  00:09:07,940
printing things out twice put it here
182

182

00:09:07,940  -->  00:09:11,720
and now print the same range except this
183

183

00:09:11,720  -->  00:09:13,910
time, we've said that we want steps of 3,
184

184

00:09:13,910  -->  00:09:19,250
let's print that and now we'll see that
185

185

00:09:19,250  -->  00:09:23,209
we get our 3 6 9 12 15 and let's print
186

186

00:09:23,209  -->  00:09:25,540
out our reversed range, where we reversed
187

187

00:09:25,540  -->  00:09:41,930
this range up here and we'll see that we
188

188

00:09:41,930  -->  00:09:46,010
get 5 down to 1. So this is a very common
189

189

00:09:46,010  -->  00:09:50,800
form of the for loop, so instead of doing
190

190

00:09:50,800  -->  00:09:54,050
the following here, instead of saying for
191

191

00:09:54,050  -->  00:09:58,310
int i equals you know 1 in this case,
192

192

00:09:58,310  -->  00:10:01,970
i less than I guess it would be 6, i plus
193

193

00:10:01,970  -->  00:10:05,839
plus, go ahead and print the value of i.
194

194

00:10:05,839  -->  00:10:09,410
This is the equivalent we're saying for
195

195

00:10:09,410  -->  00:10:11,660
i in range and you don't have to assign
196

196

00:10:11,660  -->  00:10:13,100
the range to a variable, we could have
197

197

00:10:13,100  -->  00:10:16,880
just put it directly in here and we get
198

198

00:10:16,880  -->  00:10:23,420
the same thing 1 2 3 4 5. So this is the
199

199

00:10:23,420  -->  00:10:26,450
form of the for loop that's used in
200

200

00:10:26,450  -->  00:10:29,450
Kotlin, that replaces the original Java
201

201

00:10:29,450  -->  00:10:32,240
for loop. Okay, now I said I wasn't going
202

202

00:10:32,240  -->  00:10:33,740
to print the string range, but let's
203

203

00:10:33,740  -->  00:10:35,570
let's go ahead and print it. Let's see
204

204

00:10:35,570  -->  00:10:37,839
what we get for this, so we'll say for
205

205

00:10:37,839  -->  00:10:43,410
let's say s in string range
206

206

00:10:43,410  -->  00:10:46,540
and we'll print line s and you'll see
207

207

00:10:46,540  -->  00:10:48,100
that we can't do it.
208

208

00:10:48,100  -->  00:10:51,190
It says the for-loop range must have an
209

209

00:10:51,190  -->  00:10:53,920
iterator method and the string range
210

210

00:10:53,920  -->  00:10:56,590
does not have an iterator method,
211

211

00:10:56,590  -->  00:10:58,660
so there's no iterator method defined on
212

212

00:10:58,660  -->  00:11:01,240
the string range. So you can't loop
213

213

00:11:01,240  -->  00:11:03,700
through strings like this, it doesn't
214

214

00:11:03,700  -->  00:11:05,320
really make a lot of sense when you
215

215

00:11:05,320  -->  00:11:06,760
think about it, because as we've seen
216

216

00:11:06,760  -->  00:11:08,980
they could be any arbitrary length, so
217

217

00:11:08,980  -->  00:11:11,440
what values actually belong in here.
218

218

00:11:11,440  -->  00:11:14,080
There's actually probably an infinite
219

219

00:11:14,080  -->  00:11:15,580
number of values that belong to this
220

220

00:11:15,580  -->  00:11:17,320
range, so this range doesn't really make
221

221

00:11:17,320  -->  00:11:19,570
a lot of sense, but when it comes to
222

222

00:11:19,570  -->  00:11:23,530
strings, you can access them in loops in
223

223

00:11:23,530  -->  00:11:25,480
the following way, if we have a string
224

224

00:11:25,480  -->  00:11:29,290
str equals hello and we want to print
225

225

00:11:29,290  -->  00:11:31,120
out the individual characters in this
226

226

00:11:31,120  -->  00:11:34,180
string, we can do the following for c in
227

227

00:11:34,180  -->  00:11:39,430
str print line c, because the string
228

228

00:11:39,430  -->  00:11:42,130
class has an iterator defined on it and
229

229

00:11:42,130  -->  00:11:48,730
if we run, we'll see the individual
230

230

00:11:48,730  -->  00:11:51,670
characters h-e-l-l-o printed for hello,
231

231

00:11:51,670  -->  00:11:53,890
so when you're using the in operator
232

232

00:11:53,890  -->  00:11:56,950
with the for loop as long as what's on
233

233

00:11:56,950  -->  00:11:58,990
the right hand side has an iterator
234

234

00:11:58,990  -->  00:12:01,600
defined for it, you're good so we saw up
235

235

00:12:01,600  -->  00:12:03,310
here that we can just use a range
236

236

00:12:03,310  -->  00:12:05,410
directly in a for loop we don't have to
237

237

00:12:05,410  -->  00:12:07,630
assign it to a variable first, well the
238

238

00:12:07,630  -->  00:12:09,850
same thing goes for some of the other
239

239

00:12:09,850  -->  00:12:10,960
things that we did.
240

240

00:12:10,960  -->  00:12:15,610
So let's print the numbers from 1 to 20,
241

241

00:12:15,610  -->  00:12:21,370
So for let's say num in 1 to 20 print
242

242

00:12:21,370  -->  00:12:23,800
line num. Now we know that we're going to
243

243

00:12:23,800  -->  00:12:26,140
get you know 1 2 3 4 all the way up
244

244

00:12:26,140  -->  00:12:27,820
to 20 printed out, we don't need to run
245

245

00:12:27,820  -->  00:12:30,160
this. So let's say instead though that we
246

246

00:12:30,160  -->  00:12:36,310
wanted to do this in steps of 4, so we'd say step 4.
247

247

00:12:36,310  -->  00:12:39,490
So that's how you do it, if you haven't
248

248

00:12:39,490  -->  00:12:42,700
created a range as follows and assigned it
249

249

00:12:42,700  -->  00:12:49,330
into a variable. So if we run, we'll see
250

250

00:12:49,330  -->  00:12:51,610
that we get our 1 2 3 4 5 and then we
251

251

00:12:51,610  -->  00:12:55,600
get 1 5 9 13 17, because we print
252

252

00:12:55,600  -->  00:12:58,420
the one and then we add 4 to it and get
253

253

00:12:58,420  -->  00:13:02,740
5 etc. we can't- if we add 4 to 17 were
254

254

00:13:02,740  -->  00:13:06,730
then outside the range, so it stops at 17
255

255

00:13:06,730  -->  00:13:09,040
when we're using a step of 4. Now one
256

256

00:13:09,040  -->  00:13:11,709
thing to note here is you'll notice when
257

257

00:13:11,709  -->  00:13:13,569
we assign the range to the variable, we
258

258

00:13:13,569  -->  00:13:17,130
use the name of the variable dot step 3
259

259

00:13:17,130  -->  00:13:19,449
when we wanted to range with values
260

260

00:13:19,449  -->  00:13:23,170
incremented by more than one, you can't
261

261

00:13:23,170  -->  00:13:25,750
do that here by doing dot step so we
262

262

00:13:25,750  -->  00:13:28,660
can't do dot step 3 for example, you'll
263

263

00:13:28,660  -->  00:13:32,199
see that that doesn't work. So if you
264

264

00:13:32,199  -->  00:13:34,060
haven't assigned the range to a variable,
265

265

00:13:34,060  -->  00:13:36,449
you have to do it the way I showed you.
266

266

00:13:36,449  -->  00:13:40,509
Step 4, okay so if we want to use a range
267

267

00:13:40,509  -->  00:13:43,509
directly in the for loop, how do we go
268

268

00:13:43,509  -->  00:13:46,900
backwards now? How would we go from 20 to 1
269

269

00:13:46,900  -->  00:13:49,690
rather than from 1 to 20. Well, we do
270

270

00:13:49,690  -->  00:13:56,860
the following, for i in 20 and let's just
271

271

00:13:56,860  -->  00:14:04,300
go down to 15 and then print line i,
272

272

00:14:04,300  -->  00:14:06,550
so here we're saying we want to start at 20
273

273

00:14:06,550  -->  00:14:09,699
and we want to count down to 15, so if we
274

274

00:14:09,699  -->  00:14:16,720
run, we'll see here we're starting at 20
275

275

00:14:16,720  -->  00:14:19,630
and we're counting down to 15. Alright,
276

276

00:14:19,630  -->  00:14:22,720
we can combine functions, so let's say we
277

277

00:14:22,720  -->  00:14:26,649
want to go from 20 down to 10 let's say
278

278

00:14:26,649  -->  00:14:29,769
and we want to do it in steps of 5, so we
279

279

00:14:29,769  -->  00:14:34,839
can just say for i in 20 down to 10 in
280

280

00:14:34,839  -->  00:14:37,540
steps of 5 print line i. I'm going to
281

281

00:14:37,540  -->  00:14:42,160
comment out these two for, so that what
282

282

00:14:42,160  -->  00:14:43,930
we see comes up first and I'm going to
283

283

00:14:43,930  -->  00:14:49,689
run and now we'll see we go from 20 to
284

284

00:14:49,689  -->  00:14:52,180
15 to 10, so we're going from 20 down to
285

285

00:14:52,180  -->  00:14:55,810
10 in steps of 5. Okay, so what do you do if
286

286

00:14:55,810  -->  00:14:57,910
you don't want to include the last
287

287

00:14:57,910  -->  00:14:59,860
number in the range? As I mentioned
288

288

00:14:59,860  -->  00:15:02,800
earlier, the end value and the start
289

289

00:15:02,800  -->  00:15:05,230
value are inclusive, they're included in
290

290

00:15:05,230  -->  00:15:09,280
the range, you can use the keyword until
291

291

00:15:09,280  -->  00:15:10,510
so you can do something like the
292

292

00:15:10,510  -->  00:15:16,420
following, you can say for i in one until
293

293

00:15:16,420  -->  00:15:22,060
ten print line i and so what this will
294

294

00:15:22,060  -->  00:15:25,210
do is it will print the numbers 1 to 9,
295

295

00:15:25,210  -->  00:15:31,650
it will exclude 10. So let's try this out
296

296

00:15:31,650  -->  00:15:35,830
and we'll see up here that we get the
297

297

00:15:35,830  -->  00:15:39,300
numbers 1 to 9, we don't get the number 10.
298

298

00:15:39,300  -->  00:15:42,010
Now the start values and end values
299

299

00:15:42,010  -->  00:15:44,530
can be variables, they don't have to be
300

300

00:15:44,530  -->  00:15:46,600
constants, so for example we could do
301

301

00:15:46,600  -->  00:15:51,940
something like val s equals goodbye and
302

302

00:15:51,940  -->  00:15:55,960
we can say val s range equals, let's say
303

303

00:15:55,960  -->  00:16:00,610
0 to s dot length, so you could do
304

304

00:16:00,610  -->  00:16:01,930
something like that and then if you
305

305

00:16:01,930  -->  00:16:03,670
wanted to loop over the string, you
306

306

00:16:03,670  -->  00:16:05,770
wouldn't want to include s dot length, so
307

307

00:16:05,770  -->  00:16:08,320
at that point, you could use the until
308

308

00:16:08,320  -->  00:16:11,080
keyword to loop around the string of
309

309

00:16:11,080  -->  00:16:12,460
course, you don't really need to do that
310

310

00:16:12,460  -->  00:16:14,500
with strings because they have an
311

311

00:16:14,500  -->  00:16:20,460
iterator, so earlier on I showed you
312

312

00:16:20,460  -->  00:16:24,580
I guess I deleted it, here yeah earlier on
313

313

00:16:24,580  -->  00:16:26,290
I showed you how you can just loop
314

314

00:16:26,290  -->  00:16:27,820
around a string, so you wouldn't need to
315

315

00:16:27,820  -->  00:16:29,920
do that, but you can probably think of
316

316

00:16:29,920  -->  00:16:32,110
situations where you'd want to do
317

317

00:16:32,110  -->  00:16:34,560
something like this and exclude the last
318

318

00:16:34,560  -->  00:16:37,870
index. Okay, so as you've seen you can
319

319

00:16:37,870  -->  00:16:40,420
create ranges outside loops and assign
320

320

00:16:40,420  -->  00:16:43,300
into variables, you can also create them
321

321

00:16:43,300  -->  00:16:46,210
in the for loop itself, as we're doing
322

322

00:16:46,210  -->  00:16:51,790
here and here and I guess we took out
323

323

00:16:51,790  -->  00:16:53,500
the for loop where we're just doing a
324

324

00:16:53,500  -->  00:16:56,800
plain old 1 2 5 for i in 1 2 5, ah here
325

325

00:16:56,800  -->  00:16:59,230
it is so the only thing you should do is
326

326

00:16:59,230  -->  00:17:00,730
pay attention to the difference in
327

327

00:17:00,730  -->  00:17:02,920
syntax, because when you're declaring a
328

328

00:17:02,920  -->  00:17:07,510
range outside a for loop, for example you
329

329

00:17:07,510  -->  00:17:10,329
can do things like calls dot down to dot
330

330

00:17:10,329  -->  00:17:12,189
stuff etc. when you want to do the same
331

331

00:17:12,189  -->  00:17:16,000
thing inside the for loop you use a
332

332

00:17:16,000  -->  00:17:18,760
different type of syntax you actually in
333

333

00:17:18,760  -->  00:17:20,290
this case they're using them like
334

334

00:17:20,290  -->  00:17:22,959
operators so rather than functions you use
335

335

00:17:22,959  -->  00:17:25,329
them as operators and you can do that
336

336

00:17:25,329  -->  00:17:26,799
with some functions, we haven't covered
337

337

00:17:26,799  -->  00:17:29,620
that but you can declare functions as
338

338

00:17:29,620  -->  00:17:31,419
being operators and then use them like
339

339

00:17:31,419  -->  00:17:34,120
this. Okay, so let's now look at how to
340

340

00:17:34,120  -->  00:17:37,000
loop over an array, we saw one way
341

341

00:17:37,000  -->  00:17:40,029
already when we covered arrays, we can
342

342

00:17:40,029  -->  00:17:42,730
use the in operator with them, so I'm
343

343

00:17:42,730  -->  00:17:45,220
going to comment out all this stuff
344

344

00:17:45,220  -->  00:17:46,990
so that we're not going to see these things
345

345

00:17:46,990  -->  00:17:50,679
print it over and over again and then
346

346

00:17:50,679  -->  00:17:56,620
let's- didn't mean to do that, let's come
347

347

00:17:56,620  -->  00:17:58,929
down here make some room and then we'll
348

348

00:17:58,929  -->  00:18:00,549
declare an array, so we'll say val
349

349

00:18:00,549  -->  00:18:04,950
seasons equals array of and we'll have
350

350

00:18:04,950  -->  00:18:14,740
spring summer winter and fall and then
351

351

00:18:14,740  -->  00:18:16,630
if we want it to loop over this array,
352

352

00:18:16,630  -->  00:18:25,860
we just say for season in seasons print the season.
353

353

00:18:25,860  -->  00:18:31,720
Let's run, then we'll see our four
354

354

00:18:31,720  -->  00:18:34,090
seasons printed. Now, I'll mention here
355

355

00:18:34,090  -->  00:18:37,539
that there's also a not in operator that
356

356

00:18:37,539  -->  00:18:39,490
you can use to test whether something is
357

357

00:18:39,490  -->  00:18:43,600
not within a range, for example we could
358

358

00:18:43,600  -->  00:18:49,210
say val not a season equals and we could
359

359

00:18:49,210  -->  00:18:56,169
say whatever not in seasons and then
360

360

00:18:56,169  -->  00:19:01,000
we'll say print line not a season,
361

361

00:19:01,000  -->  00:19:02,890
don't know what is an extra blank space here
362

362

00:19:02,890  -->  00:19:08,320
and then we'll run then we'll get true
363

363

00:19:08,320  -->  00:19:10,570
because it's true that whatever isn't in
364

364

00:19:10,570  -->  00:19:13,299
our array. We can do the same thing with
365

365

00:19:13,299  -->  00:19:15,640
a regular old range of course we could
366

366

00:19:15,640  -->  00:19:21,390
say val not in range equals 32 not in
367

367

00:19:21,390  -->  00:19:24,730
one to ten and we're going to expect
368

368

00:19:24,730  -->  00:19:31,750
this to be true, let's run and we'll see
369

369

00:19:31,750  -->  00:19:36,820
that yes 32 is not in the range of one to ten,
370

370

00:19:36,820  -->  00:19:39,100
the in and not in operators also work with
371

371

00:19:39,100  -->  00:19:42,460
strings as we've seen, well let me define
372

372

00:19:42,460  -->  00:19:46,059
a string first val str I'll use our
373

373

00:19:46,059  -->  00:19:48,519
usual hello string and we can say print
374

374

00:19:48,519  -->  00:19:54,940
line e in sdr and print line print line
375

375

00:19:54,940  -->  00:20:00,360
e not in str and of course we'll expect
376

376

00:20:00,360  -->  00:20:02,950
true for the first one and false for the
377

377

00:20:02,950  -->  00:20:04,929
second one, which is what we get.
378

378

00:20:04,929  -->  00:20:07,210
Now arrays also have an extension function
379

379

00:20:07,210  -->  00:20:09,009
that makes them easy to iterate over
380

380

00:20:09,009  -->  00:20:11,470
when you want to use the array index in
381

381

00:20:11,470  -->  00:20:14,710
some way. So we've got our seasons array
382

382

00:20:14,710  -->  00:20:18,220
and let's iterate over this array using
383

383

00:20:18,220  -->  00:20:20,980
the index within the for block,
384

384

00:20:20,980  -->  00:20:23,049
so instead of just doing a plain old for
385

385

00:20:23,049  -->  00:20:25,269
season and seasons let's change this for
386

386

00:20:25,269  -->  00:20:31,389
loop and we'll say for index in seasons
387

387

00:20:31,389  -->  00:20:34,629
dot indices and then what we'll do is
388

388

00:20:34,629  -->  00:20:39,250
say we're going to print line I'm going
389

389

00:20:39,250  -->  00:20:42,299
to open up an expression here and say
390

390

00:20:42,299  -->  00:20:55,480
seasons index is season number index,
391

391

00:20:55,480  -->  00:20:57,549
so it's happening here is on each iteration
392

392

00:20:57,549  -->  00:21:00,850
of the loop, the index of the current
393

393

00:21:00,850  -->  00:21:03,580
element will be assigned to index.
394

394

00:21:03,580  -->  00:21:08,620
So let's run and we'll see that we get
395

395

00:21:08,620  -->  00:21:11,409
spring a season number 0 summer season
396

396

00:21:11,409  -->  00:21:13,750
number 1 etc. because in this expression
397

397

00:21:13,750  -->  00:21:19,389
we're substituting seasons index so when
398

398

00:21:19,389  -->  00:21:24,370
index is 0, seasons 0 is going to be substituted here etc.
399

399

00:21:24,370  -->  00:21:25,870
So if you want to do something with the
400

400

00:21:25,870  -->  00:21:28,929
index within a for loop, this is how you
401

401

00:21:28,929  -->  00:21:30,909
can do it and if you wanted to get at
402

402

00:21:30,909  -->  00:21:33,299
the value of course, you just use seasons
403

403

00:21:33,299  -->  00:21:35,799
indexes we're doing here. Now you can
404

404

00:21:35,799  -->  00:21:39,129
also use the for each and for each index
405

405

00:21:39,129  -->  00:21:42,429
functions which work with arrays and all
406

406

00:21:42,429  -->  00:21:45,399
collections in fact. So we can also do
407

407

00:21:45,399  -->  00:21:48,629
the following seasons dot for each and
408

408

00:21:48,629  -->  00:21:52,990
we'll print line it.
409

409

00:21:52,990  -->  00:21:56,250
So this is actually a lambda and
410

410

00:21:56,250  -->  00:21:59,320
inside the lambda, we refer to each
411

411

00:21:59,320  -->  00:22:02,830
element using it. So that's one way we
412

412

00:22:02,830  -->  00:22:04,750
could do it and if we wanted to get at
413

413

00:22:04,750  -->  00:22:09,130
the index as well, we can say seasons dot
414

414

00:22:09,130  -->  00:22:13,690
for each indexed and I'm going to use a
415

415

00:22:13,690  -->  00:22:17,230
lambda here so I'm going to say index
416

416

00:22:17,230  -->  00:22:25,110
and value and we'll print line value is
417

417

00:22:25,110  -->  00:22:33,760
season number index. So here I'm getting
418

418

00:22:33,760  -->  00:22:36,160
it both the index and the value and I'm
419

419

00:22:36,160  -->  00:22:39,580
using them inside the lambda here.
420

420

00:22:39,580  -->  00:22:45,520
So we'll run this and here's our first loop
421

421

00:22:45,520  -->  00:22:48,070
up here and then here's our for each
422

422

00:22:48,070  -->  00:22:50,080
printout spring summer winter and fall
423

423

00:22:50,080  -->  00:22:52,210
where we're just printing each the value
424

424

00:22:52,210  -->  00:22:54,550
of each element and then following that
425

425

00:22:54,550  -->  00:22:57,310
is our for each indexed where we're
426

426

00:22:57,310  -->  00:23:01,510
saying spring is season number, so we're
427

427

00:23:01,510  -->  00:23:02,950
basically doing the same thing that
428

428

00:23:02,950  -->  00:23:05,020
we're doing here. So here's two alternate
429

429

00:23:05,020  -->  00:23:07,240
ways of getting it the index and
430

430

00:23:07,240  -->  00:23:09,250
printing what we want to print,
431

431

00:23:09,250  -->  00:23:12,850
this one's more concise than this one here.
432

432

00:23:12,850  -->  00:23:15,400
So one final word before we leave loop and
433

433

00:23:15,400  -->  00:23:17,260
this is something that applies to all
434

434

00:23:17,260  -->  00:23:19,720
loops, not just the for loop you can give
435

435

00:23:19,720  -->  00:23:22,360
them a name, so let's say we had a bunch
436

436

00:23:22,360  -->  00:23:24,190
of nested loops like the following so
437

437

00:23:24,190  -->  00:23:29,530
we'll say for i in one two three then
438

438

00:23:29,530  -->  00:23:32,170
we'll say for j will print line
439

439

00:23:32,170  -->  00:23:34,380
will print line the value of i in here.
440

440

00:23:34,380  -->  00:23:39,250
So we'll say i equals i and then we'll
441

441

00:23:39,250  -->  00:23:43,440
say for u in let's say one to four and
442

442

00:23:43,440  -->  00:23:49,920
let's print line j,
443

443

00:23:49,920  -->  00:23:57,010
then let's have for k in five to ten and
444

444

00:23:57,010  -->  00:24:03,610
we'll print line k. Okay, so we've got
445

445

00:24:03,610  -->  00:24:06,220
three nested loops here and let's run.
446

446

00:24:06,220  -->  00:24:08,050
I'm going to actually comment out these
447

447

00:24:08,050  -->  00:24:09,790
things now, so that we're not getting a
448

448

00:24:09,790  -->  00:24:13,510
bunch of seasons beforehand and now
449

449

00:24:13,510  -->  00:24:18,430
let's run this, so we'll get what we
450

450

00:24:18,430  -->  00:24:21,010
expect to see, quite a few things printed
451

451

00:24:21,010  -->  00:24:23,440
out so we start with i being one and j
452

452

00:24:23,440  -->  00:24:27,070
being one and then we get our inner k
453

453

00:24:27,070  -->  00:24:29,170
loop going through its values, we come
454

454

00:24:29,170  -->  00:24:33,010
back out to j which is now two we get
455

455

00:24:33,010  -->  00:24:34,750
all the k values and that's going to
456

456

00:24:34,750  -->  00:24:37,870
happen until j is four and let me see if
457

457

00:24:37,870  -->  00:24:43,170
I can find that.
458

458

00:24:43,170  -->  00:24:48,760
And here we start i equals two so up here j
459

459

00:24:48,760  -->  00:24:50,890
is three and then j is four and then we
460

460

00:24:50,890  -->  00:24:54,100
go back out to the the outer loop and i
461

461

00:24:54,100  -->  00:24:55,900
equals two, so nothing earth-shattering
462

462

00:24:55,900  -->  00:24:59,470
going on here. Now let's say that we want
463

463

00:24:59,470  -->  00:25:02,560
to stop looping within this k loop when
464

464

00:25:02,560  -->  00:25:06,940
k is seven, so when we hit seven we want
465

465

00:25:06,940  -->  00:25:09,520
to stop looping. So let's add a test for
466

466

00:25:09,520  -->  00:25:12,160
that and a break statement, so down here
467

467

00:25:12,160  -->  00:25:17,890
I'm going to say if k equals seven break
468

468

00:25:17,890  -->  00:25:20,680
and that's fine, but let's say that when
469

469

00:25:20,680  -->  00:25:22,660
we break, we also want to short-circuit
470

470

00:25:22,660  -->  00:25:28,380
the j loop, because right now if we run
471

471

00:25:28,380  -->  00:25:33,340
we'll see i is 1, j is 1, k is 5, 6 oh we
472

472

00:25:33,340  -->  00:25:35,800
hit 7, so now we break but then we go out
473

473

00:25:35,800  -->  00:25:38,380
to j and let's say we don't want to do
474

474

00:25:38,380  -->  00:25:40,060
that when we break here, we will actually
475

475

00:25:40,060  -->  00:25:42,490
want to go right back out to i, we don't
476

476

00:25:42,490  -->  00:25:44,950
want to continue executing j so how
477

477

00:25:44,950  -->  00:25:47,080
would we do that? Well what we're going
478

478

00:25:47,080  -->  00:25:50,320
to do is we're going to give the j loop
479

479

00:25:50,320  -->  00:25:52,510
a name and then the break statement,
480

480

00:25:52,510  -->  00:25:54,910
we'll specify that we want to break at
481

481

00:25:54,910  -->  00:25:57,820
the j loop. So to give the j loop a name,
482

482

00:25:57,820  -->  00:25:59,230
I'm going to come here I'm going to call
483

483

00:25:59,230  -->  00:26:03,520
it j loop and follow that with the at
484

484

00:26:03,520  -->  00:26:08,380
sign. So this loop now has a name called
485

485

00:26:08,380  -->  00:26:10,720
j loop and then down here I'm going to
486

486

00:26:10,720  -->  00:26:16,300
say I want to break at j loop, so when k
487

487

00:26:16,300  -->  00:26:18,400
is seven, I want to break out of this
488

488

00:26:18,400  -->  00:26:20,800
loop here. Obviously, I'm going to break
489

489

00:26:20,800  -->  00:26:23,020
out of here as well and I want to break
490

490

00:26:23,020  -->  00:26:25,780
out of this loop. So when k hits seven,
491

491

00:26:25,780  -->  00:26:28,570
I want to go back out to i, so let's run
492

492

00:26:28,570  -->  00:26:33,520
now and we'll see that we hardly get
493

493

00:26:33,520  -->  00:26:37,300
anything printed now because i is 1, j is 1
494

494

00:26:37,300  -->  00:26:40,060
k is 5 6 7 oops
495

495

00:26:40,060  -->  00:26:42,790
I want to go right out here and so we
496

496

00:26:42,790  -->  00:26:46,000
skip all the rest of the j, we don't see
497

497

00:26:46,000  -->  00:26:49,180
2 3 4, we go straight out to i equals 2
498

498

00:26:49,180  -->  00:26:50,680
and then the same thing is going to
499

499

00:26:50,680  -->  00:26:53,710
happen, j is 1 we're going to hit 7 in
500

500

00:26:53,710  -->  00:26:56,170
the inner loop and we're going to break
501

501

00:26:56,170  -->  00:26:59,500
straight out into i, so you can use names
502

502

00:26:59,500  -->  00:27:02,230
like this on any type of loop and you
503

503

00:27:02,230  -->  00:27:05,110
can use- you can specify where you want
504

504

00:27:05,110  -->  00:27:07,780
to go when you specify break and this
505

505

00:27:07,780  -->  00:27:10,000
also works with continue, if we change
506

506

00:27:10,000  -->  00:27:13,380
this to continue, I can't type here
507

507

00:27:13,380  -->  00:27:17,950
continue, so now what we're saying here
508

508

00:27:17,950  -->  00:27:20,560
is we're not going to break out of the
509

509

00:27:20,560  -->  00:27:22,180
loop, we're going to continue with the
510

510

00:27:22,180  -->  00:27:25,630
j loop, so when we hit K equals 7 we're
511

511

00:27:25,630  -->  00:27:27,370
going to go back out to the j loop.
512

512

00:27:27,370  -->  00:27:29,680
Now using name loops and jumps like this can
513

513

00:27:29,680  -->  00:27:31,510
lead to spaghetti coding, so it's not
514

514

00:27:31,510  -->  00:27:33,100
something you want to do unless there's
515

515

00:27:33,100  -->  00:27:35,620
no other way to do something, but
516

516

00:27:35,620  -->  00:27:37,150
I wanted to show you this because you
517

517

00:27:37,150  -->  00:27:38,950
might see it in code examples or you
518

518

00:27:38,950  -->  00:27:40,950
might see it in code that you have to
519

519

00:27:40,950  -->  00:27:43,300
modify or maintain that you didn't
520

520

00:27:43,300  -->  00:27:45,880
write, so if you see this sort of thing
521

521

00:27:45,880  -->  00:27:48,310
that this is what's going on, it's giving
522

522

00:27:48,310  -->  00:27:49,930
the loop a name and then you can
523

523

00:27:49,930  -->  00:27:52,090
reference that name would continue and
524

524

00:27:52,090  -->  00:27:56,910
break statements. Alright, that's it for loops.
