WEBVTT
1
1

00:00:00.534  -->  00:00:02.414
(uplifting music)
2

2

00:00:02.414  -->  00:00:04.497
(typing)
3

3

00:00:05.530  -->  00:00:06.363
<v Sarah Ettrich>All right.</v>
4

4

00:00:06.363  -->  00:00:08.980
So, Let's say you have a situation
5

5

00:00:08.980  -->  00:00:12.690
where you're absolutely sure a variable won't be null.
6

6

00:00:12.690  -->  00:00:16.530
But, the compiler wants you to use the safe-call operator.
7

7

00:00:16.530  -->  00:00:20.290
But, you know, for sure, 100 percent, that the
8

8

00:00:20.290  -->  00:00:22.330
variable won't contain null.
9

9

00:00:22.330  -->  00:00:24.620
And, of course, you're not wrong, because when you
10

10

00:00:24.620  -->  00:00:26.540
believe a variable can't be null,
11

11

00:00:26.540  -->  00:00:27.788
it must be true.
12

12

00:00:27.788  -->  00:00:29.550
Now, I chuckle when I say this,
13

13

00:00:29.550  -->  00:00:31.720
because, of course, we can be wrong.
14

14

00:00:31.720  -->  00:00:33.900
In a simple application, perhaps not.
15

15

00:00:33.900  -->  00:00:36.250
But in a real world app, when we're calling code
16

16

00:00:36.250  -->  00:00:37.120
we haven't written,
17

17

00:00:37.120  -->  00:00:38.750
things can get iffy.
18

18

00:00:38.750  -->  00:00:41.910
More importantly, documentation can be outdated,
19

19

00:00:41.910  -->  00:00:43.589
or just plain wrong.
20

20

00:00:43.589  -->  00:00:46.344
I had a situation not too long ago, when I updated
21

21

00:00:46.344  -->  00:00:50.200
a WordPress plugin on one of my websites,
22

22

00:00:50.200  -->  00:00:53.780
and as soon as I did, images stopped showing up on
23

23

00:00:53.780  -->  00:00:56.210
pages generated by the plugin.
24

24

00:00:56.210  -->  00:00:58.930
So, I contacted support, because this was a plugin
25

25

00:00:58.930  -->  00:01:00.210
that I paid for.
26

26

00:01:00.210  -->  00:01:03.347
And, the developer got back to me, and he said
27

27

00:01:03.347  -->  00:01:04.877
"I know what the problem is.
28

28

00:01:04.877  -->  00:01:07.827
"A third-party library function is returning null,
29

29

00:01:07.827  -->  00:01:08.920
"when it shouldn't be."
30

30

00:01:08.920  -->  00:01:10.670
'Cause the documentation says it shouldn't
31

31

00:01:10.670  -->  00:01:12.120
be returning null.
32

32

00:01:12.120  -->  00:01:15.230
So, of course, he was relying on the documentation, and
33

33

00:01:15.230  -->  00:01:16.920
he wasn't checking for null.
34

34

00:01:16.920  -->  00:01:18.660
And the code was failing.
35

35

00:01:18.660  -->  00:01:21.850
But, let's say you're absolutely sure that a
36

36

00:01:21.850  -->  00:01:23.510
variable won't be null.
37

37

00:01:23.510  -->  00:01:26.620
Well, Kotlin provides a way for you to tell the compiler
38

38

00:01:26.620  -->  00:01:27.860
that you're sure.
39

39

00:01:27.860  -->  00:01:29.990
That you're absolutely positive the variable
40

40

00:01:29.990  -->  00:01:31.450
can't contain null.
41

41

00:01:31.450  -->  00:01:34.789
And this is called the not-null assertion.
42

42

00:01:34.789  -->  00:01:38.740
So, if you're sure an expression can't evaluate to null,
43

43

00:01:38.740  -->  00:01:40.360
and you want to tell the compiler, 'cause you
44

44

00:01:40.360  -->  00:01:42.050
want to stop using the question mark,
45

45

00:01:42.050  -->  00:01:44.160
the safe call operator,
46

46

00:01:44.160  -->  00:01:47.670
you can follow the expression with two explanation marks.
47

47

00:01:47.670  -->  00:01:49.250
So, let's try this out.
48

48

00:01:49.250  -->  00:01:50.790
Let's go back up to our string here,
49

49

00:01:50.790  -->  00:01:55.120
and, we're going to change this to,
50

50

00:01:55.120  -->  00:01:56.431
this isn't null.
51

51

00:01:56.431  -->  00:01:58.172
And then we'll say val,
52

52

00:01:58.172  -->  00:02:00.760
let's say str4 this time
53

53

00:02:00.760  -->  00:02:05.030
equals str.2 uppercase.
54

54

00:02:05.030  -->  00:02:07.830
Okay, so in the above code, we're positive that
55

55

00:02:07.830  -->  00:02:09.330
str isn't null.
56

56

00:02:09.330  -->  00:02:12.450
I mean this is a silly example, but we're positive,
57

57

00:02:12.450  -->  00:02:14.470
because we've just assigned it.
58

58

00:02:14.470  -->  00:02:18.160
So we know that it's okay to go ahead and use str and
59

59

00:02:18.160  -->  00:02:20.600
you're not going to get an all pointer exception.
60

60

00:02:20.600  -->  00:02:23.310
But, because we've declared str as nullable,
61

61

00:02:23.310  -->  00:02:25.940
maybe later on down the line, we're thinking,
62

62

00:02:25.940  -->  00:02:26.910
well it could be null.
63

63

00:02:26.910  -->  00:02:29.080
We just know it isn't right now.
64

64

00:02:29.080  -->  00:02:33.024
The compiler wants us to use the safe call operator here.
65

65

00:02:33.024  -->  00:02:35.720
Because it knows that, hey wait a minute,
66

66

00:02:35.720  -->  00:02:36.920
str might be null.
67

67

00:02:36.920  -->  00:02:39.270
So you might get an null pointer exception here.
68

68

00:02:39.270  -->  00:02:42.130
And, so, we'll update the code, as follows:
69

69

00:02:42.130  -->  00:02:45.317
Instead of putting a question mark after str,
70

70

00:02:45.317  -->  00:02:49.680
we'll put two exclamation marks.
71

71

00:02:49.680  -->  00:02:52.870
And, then, you'll see that the error goes away.
72

72

00:02:52.870  -->  00:02:55.760
So, what we've done here, is followed str with the
73

73

00:02:55.760  -->  00:02:58.100
non-null assertion.
74

74

00:02:58.100  -->  00:03:01.160
Now, it would be safer, of course, to use the safe operator.
75

75

00:03:01.160  -->  00:03:02.850
So, why would you want to do this?
76

76

00:03:02.850  -->  00:03:05.990
You might want an exception to be thrown
77

77

00:03:05.990  -->  00:03:07.950
when str is null.
78

78

00:03:07.950  -->  00:03:11.210
So, when you use the question mark, the safe call
79

79

00:03:11.210  -->  00:03:13.780
operator, you'll never get an null pointer exception.
80

80

00:03:13.780  -->  00:03:16.840
But, maybe you want to see a null pointer exception
81

81

00:03:16.840  -->  00:03:17.870
for some reason.
82

82

00:03:17.870  -->  00:03:20.691
Maybe, if something is null,
83

83

00:03:20.691  -->  00:03:23.700
the rest of your code is not going to be able
84

84

00:03:23.700  -->  00:03:24.840
to operate properly.
85

85

00:03:24.840  -->  00:03:28.870
So, forget about not wanting a null pointer exception.
86

86

00:03:28.870  -->  00:03:31.550
If str is null, something has seriously gone wrong
87

87

00:03:31.550  -->  00:03:32.580
with the application.
88

88

00:03:32.580  -->  00:03:34.910
You want it to throw a null pointer exception,
89

89

00:03:34.910  -->  00:03:36.810
because you want to be alerted to this.
90

90

00:03:36.810  -->  00:03:38.701
So, that's one reason you might want to
91

91

00:03:38.701  -->  00:03:42.073
use this two exclamation marks here.
92

92

00:03:42.930  -->  00:03:45.290
So, the non null assertion is shorthand for
93

93

00:03:45.290  -->  00:03:46.520
the following code:
94

94

00:03:46.520  -->  00:03:48.520
We always kind of, we've been doing this,
95

95

00:03:48.520  -->  00:03:50.820
doing the longhand, so I'll show you what this
96

96

00:03:52.031  -->  00:03:52.864
is shorthand for, so basically,
97

97

00:03:52.864  -->  00:03:57.310
if str equals null, then in this case,
98

98

00:03:57.310  -->  00:03:59.060
you're going to throw an exception.
99

99

00:04:00.750  -->  00:04:04.260
Otherwise, in this case we go ahead and use it.
100

100

00:04:04.260  -->  00:04:05.753
So, 2uppercase.
101

101

00:04:07.820  -->  00:04:10.630
So here, if str is null, an exception
102

102

00:04:10.630  -->  00:04:12.260
is going to get thrown,
103

103

00:04:12.260  -->  00:04:14.520
and if it isn't, it will go ahead,
104

104

00:04:14.520  -->  00:04:16.300
and call 2uppercase.
105

105

00:04:16.300  -->  00:04:18.390
So, let's delete this, and then let's
106

106

00:04:18.390  -->  00:04:21.900
go ahead and cause an exception to be thrown,
107

107

00:04:21.900  -->  00:04:23.390
so we can see what happens,
108

108

00:04:23.390  -->  00:04:24.710
after all, we've never seen
109

109

00:04:24.710  -->  00:04:26.540
a null pointer exception in Kotlin before,
110

110

00:04:26.540  -->  00:04:28.603
so let's go ahead and do it.
111

111

00:04:30.572  -->  00:04:33.920
Alright, so we've got it an exception here,
112

112

00:04:33.920  -->  00:04:35.590
but you'll notice, that it's not,
113

113

00:04:35.590  -->  00:04:37.660
java.lang.nullpointerexception,
114

114

00:04:37.660  -->  00:04:41.430
it's a kotlin.kotlinnullpointer exception.
115

115

00:04:41.430  -->  00:04:43.180
So, that's just something to keep in mind,
116

116

00:04:43.180  -->  00:04:45.210
if you wanna catch the exception
117

117

00:04:45.210  -->  00:04:46.770
that resolves, if for some reason
118

118

00:04:46.770  -->  00:04:48.190
you're going to be using the
119

119

00:04:48.190  -->  00:04:50.690
non-null assertion, or not-null assertion,
120

120

00:04:50.690  -->  00:04:52.880
rather and you wanna catch the exception
121

121

00:04:52.880  -->  00:04:54.470
that can be thrown.
122

122

00:04:54.470  -->  00:04:56.590
Now, just one more point before we leave
123

123

00:04:56.590  -->  00:04:59.230
null assertions, let's slightly change
124

124

00:04:59.230  -->  00:05:01.141
our code to the following,
125

125

00:05:01.141  -->  00:05:05.463
I'm actually going to delete the code here.
126

126

00:05:07.350  -->  00:05:09.330
Okay so we have valstr,
127

127

00:05:09.330  -->  00:05:11.410
declare it as a nullable string,
128

128

00:05:11.410  -->  00:05:15.270
and then we're going to declare str2,
129

129

00:05:15.270  -->  00:05:18.090
and we're going to assign it str,
130

130

00:05:18.090  -->  00:05:20.900
and we're going to assert that this can't be null,
131

131

00:05:20.900  -->  00:05:22.830
even though we know it is,
132

132

00:05:22.830  -->  00:05:26.420
so we're doing something deliberately stupid here.
133

133

00:05:26.420  -->  00:05:31.420
Then we're going say valstr3 equals str2.2upercase.
134

134

00:05:34.040  -->  00:05:36.400
Okay, so now and put up your hand
135

135

00:05:36.400  -->  00:05:38.910
if you think we're going to a null pointer exception,
136

136

00:05:38.910  -->  00:05:40.517
hopefully, everybody's hand is up here,
137

137

00:05:40.517  -->  00:05:43.158
and we do but the reason I did
138

138

00:05:43.158  -->  00:05:46.320
something so deliberately stupid here
139

139

00:05:46.320  -->  00:05:49.646
was to show you, the line number.
140

140

00:05:49.646  -->  00:05:51.400
You'll notice that the exception
141

141

00:05:51.400  -->  00:05:55.730
is thrown at line six, it's thrown up here.
142

142

00:05:55.730  -->  00:05:58.863
It's not thrown, when we call the 2uppercase,
143

143

00:05:58.863  -->  00:06:03.400
it's actually thrown up here, on line six.
144

144

00:06:03.400  -->  00:06:06.736
So, it occurs where we made the assertion,
145

145

00:06:06.736  -->  00:06:10.606
not when we actually try to use the null value.
146

146

00:06:10.606  -->  00:06:12.636
This is an important distinction.
147

147

00:06:12.636  -->  00:06:15.200
So, when we make the assertion,
148

148

00:06:15.200  -->  00:06:18.280
the run time checks whether the assertion is true.
149

149

00:06:18.280  -->  00:06:21.090
If it isn't, it throws the exception.
150

150

00:06:21.090  -->  00:06:22.670
Now, the exception, as you can see,
151

151

00:06:22.670  -->  00:06:23.980
reports the line number,
152

152

00:06:23.980  -->  00:06:26.120
but it doesn't contain any information,
153

153

00:06:26.120  -->  00:06:28.960
about the expression that evaluated to null,
154

154

00:06:28.960  -->  00:06:31.280
and because of that, it's not a good idea
155

155

00:06:31.280  -->  00:06:34.010
to string non-null assertions together,
156

156

00:06:34.010  -->  00:06:36.460
like you do with the save operator.
157

157

00:06:36.460  -->  00:06:38.220
So you don't want to do something like this,
158

158

00:06:38.220  -->  00:06:39.930
remember we had something like this,
159

159

00:06:39.930  -->  00:06:42.640
with the safe operator,
160

160

00:06:42.640  -->  00:06:45.490
well now we use the not null assertion operator,
161

161

00:06:45.490  -->  00:06:47.389
and we'll say like bankbranch,
162

162

00:06:47.389  -->  00:06:50.409
and we're going to say, oh that's not null,
163

163

00:06:50.409  -->  00:06:53.690
.address, you know and oh,
164

164

00:06:53.690  -->  00:06:56.740
and that's not null and then country,
165

165

00:06:56.740  -->  00:06:59.150
oh and you know that's not null either.
166

166

00:06:59.150  -->  00:07:00.930
You don't want to do any thing like this,
167

167

00:07:00.930  -->  00:07:03.039
because if an exception is thrown,
168

168

00:07:03.039  -->  00:07:04.530
you're not going to know which
169

169

00:07:04.530  -->  00:07:06.640
one of these actually is null,
170

170

00:07:06.640  -->  00:07:08.190
there's not going to be any information
171

171

00:07:08.190  -->  00:07:09.480
in here that tells you that,
172

172

00:07:09.480  -->  00:07:11.600
you're just going to get a single line number.
173

173

00:07:11.600  -->  00:07:12.863
So it'll just say that I got a null pointer exception
174

174

00:07:12.863  -->  00:07:16.330
on line nine, but it's not going to tell you it
175

175

00:07:16.330  -->  00:07:19.690
was country that was null, or bankbranch, that was null.
176

176

00:07:19.690  -->  00:07:23.230
So, it's not a good idea to string not null assertions
177

177

00:07:23.230  -->  00:07:26.510
together like this, like you do with the save operator.
178

178

00:07:26.510  -->  00:07:28.173
Alright, let me get rid of that,
179

179

00:07:29.071  -->  00:07:31.610
so let's write another function,
180

180

00:07:31.610  -->  00:07:33.760
we're going to cover another function soon.
181

181

00:07:34.750  -->  00:07:36.430
Don't worry about the sintext for now,
182

182

00:07:36.430  -->  00:07:38.930
so we'll say function printtext,
183

183

00:07:38.930  -->  00:07:43.930
string text and we'll just printline the text,
184

184

00:07:44.030  -->  00:07:46.703
Obviously, in here I'm writing Java code,
185

185

00:07:50.200  -->  00:07:53.790
string, and then we'll print the text.
186

186

00:07:53.790  -->  00:07:55.670
Now, obviously this is a really, really, really
187

187

00:07:55.670  -->  00:07:57.160
stupid function, we wouldn't write
188

188

00:07:57.160  -->  00:08:00.343
something like this, but it'll serve our purposes.
189

189

00:08:01.310  -->  00:08:02.980
So, let's call this function,
190

190

00:08:02.980  -->  00:08:07.050
and let's pass str as a parameter,
191

191

00:08:07.050  -->  00:08:10.780
and we'll set str to a non-null value, before we do this.
192

192

00:08:10.780  -->  00:08:13.253
So, we'll change this to this isn't null.
193

193

00:08:17.070  -->  00:08:20.893
And then we'll say printtext, str.
194

194

00:08:22.570  -->  00:08:23.850
And guess what?
195

195

00:08:23.850  -->  00:08:24.980
We can't do that.
196

196

00:08:24.980  -->  00:08:26.820
Can anybody guess why we can't do it?
197

197

00:08:26.820  -->  00:08:30.370
Well, because we have a nullable string here
198

198

00:08:30.370  -->  00:08:34.170
and our function expects a non-nullable string.
199

199

00:08:34.170  -->  00:08:38.090
So, this graphically displays the nullable
200

200

00:08:38.090  -->  00:08:39.770
and non nullable types are actually are...
201

201

00:08:39.770  -->  00:08:41.860
They actually are a distinct types.
202

202

00:08:41.860  -->  00:08:43.460
So, we have a problem because,
203

203

00:08:43.460  -->  00:08:46.580
what if we have a nullable variable,
204

204

00:08:46.580  -->  00:08:48.370
but we wanna call a function that's
205

205

00:08:48.370  -->  00:08:50.230
expecting a non nullable type?
206

206

00:08:50.230  -->  00:08:52.167
I mean, you can see that this could be a common
207

207

00:08:52.167  -->  00:08:54.940
situation, especially if you're using
208

208

00:08:54.940  -->  00:08:56.930
third party libraries and things like that,
209

209

00:08:56.930  -->  00:08:58.420
that you haven't written,
210

210

00:08:58.420  -->  00:09:00.890
there might be a function that's expecting
211

211

00:09:00.890  -->  00:09:04.850
a non nullable type, but you have a nullable variable,
212

212

00:09:04.850  -->  00:09:07.050
and you can't change that, the nature of your code,
213

213

00:09:07.050  -->  00:09:08.560
as such that you can't change that.
214

214

00:09:08.560  -->  00:09:09.610
So what do you do?
215

215

00:09:09.610  -->  00:09:11.860
Well your first thought, might be to do the following,
216

216

00:09:11.860  -->  00:09:13.860
if your sure this isn't null at this point,
217

217

00:09:13.860  -->  00:09:15.730
you might just go like that,
218

218

00:09:15.730  -->  00:09:17.160
I'll assert that it's not null.
219

219

00:09:17.160  -->  00:09:18.540
And you'll see that works,
220

220

00:09:18.540  -->  00:09:19.890
the error goes away,
221

221

00:09:19.890  -->  00:09:22.390
but what happens if str is null?
222

222

00:09:22.390  -->  00:09:25.060
The function you're calling won't be checking
223

223

00:09:25.060  -->  00:09:27.360
for null, or using the safe operator,
224

224

00:09:27.360  -->  00:09:31.090
because it has said that text has to be,
225

225

00:09:31.090  -->  00:09:32.870
non-null, so there's no reason in this
226

226

00:09:32.870  -->  00:09:35.650
function body, for it to be worrying about nulls,
227

227

00:09:35.650  -->  00:09:38.450
because it's insisting on a non null value.
228

228

00:09:38.450  -->  00:09:40.554
And you're the one that's up here is sort of
229

229

00:09:40.554  -->  00:09:42.110
overriding that.
230

230

00:09:42.110  -->  00:09:44.070
So, if str was null,
231

231

00:09:44.070  -->  00:09:46.620
you'll get an exception thrown at this statement.
232

232

00:09:46.620  -->  00:09:48.950
So, it would be better to not
233

233

00:09:48.950  -->  00:09:51.530
call this function when str is null.
234

234

00:09:51.530  -->  00:09:52.610
So, rather than saying,
235

235

00:09:52.610  -->  00:09:55.020
I'm absolutely sure str isn't null,
236

236

00:09:55.020  -->  00:09:57.271
I mean again, silly example, but let's pretend,
237

237

00:09:57.271  -->  00:09:59.139
there's tonnes of code up here,
238

238

00:09:59.139  -->  00:10:00.970
by the time you get here,
239

239

00:10:00.970  -->  00:10:02.680
it could be null, slim chance,
240

240

00:10:02.680  -->  00:10:04.020
but it could be null.
241

241

00:10:04.020  -->  00:10:05.255
Instead of doing that, which is kinda
242

242

00:10:05.255  -->  00:10:07.210
like a brute force approach,
243

243

00:10:07.210  -->  00:10:09.044
and you're not calling this function
244

244

00:10:09.044  -->  00:10:12.140
in the spirit that it's intended to be called,
245

245

00:10:12.140  -->  00:10:16.580
instead, you can use what's called the let function.
246

246

00:10:16.580  -->  00:10:20.190
Now, let doesn't exist specifically for this scenario,
247

247

00:10:20.190  -->  00:10:23.462
but it's the perfect solution for this scenario.
248

248

00:10:23.462  -->  00:10:26.070
So, what is the let function?
249

249

00:10:26.070  -->  00:10:27.990
Well, it's more shorthand.
250

250

00:10:27.990  -->  00:10:29.894
Kotlin loves shorthand, for stuff.
251

251

00:10:29.894  -->  00:10:32.020
Okay, so let's first type out
252

252

00:10:32.020  -->  00:10:34.070
what we're trying to accomplish the long way.
253

253

00:10:34.070  -->  00:10:35.800
We basically want to do this,
254

254

00:10:35.800  -->  00:10:38.230
if str is not equal to null,
255

255

00:10:42.320  -->  00:10:43.960
I might code braces here,
256

256

00:10:43.960  -->  00:10:47.890
then go ahead and call it, go ahead and call this function.
257

257

00:10:47.890  -->  00:10:50.580
That's what we're trying to accomplish, longhand.
258

258

00:10:50.580  -->  00:10:53.640
Now instead, we went ahead and with a brute force method,
259

259

00:10:53.640  -->  00:10:56.300
said, "Oh no. This can't be null. Don't even test."
260

260

00:10:56.300  -->  00:10:58.660
So instead of this longhand way of doing it,
261

261

00:10:58.660  -->  00:11:01.150
let's now use the let function.
262

262

00:11:01.150  -->  00:11:06.130
So, we're going to say, str and we're going to use
263

263

00:11:06.130  -->  00:11:09.240
the safe operator here, but we're going to follow
264

264

00:11:09.240  -->  00:11:13.670
it by let, and then we're going to say, printtext it.
265

265

00:11:16.107  -->  00:11:19.910
So what we're saying here is, if str isn't null,
266

266

00:11:19.910  -->  00:11:22.800
that's the save operator, then let this function
267

267

00:11:22.800  -->  00:11:26.455
call go ahead. And you refer to to the variable,
268

268

00:11:26.455  -->  00:11:30.620
with the save operator, inside the
269

269

00:11:30.620  -->  00:11:34.350
block here the expression that follows the let,
270

270

00:11:34.350  -->  00:11:36.544
you refer to it as using the key word it,
271

271

00:11:36.544  -->  00:11:40.110
So if str is null, this won't happen.
272

272

00:11:40.110  -->  00:11:41.961
But, if str isn't null,
273

273

00:11:41.961  -->  00:11:44.620
then the expression can go ahead.
274

274

00:11:44.620  -->  00:11:47.090
So, you're kinda saying let this happen
275

275

00:11:47.090  -->  00:11:49.340
as long as str isn't null.
276

276

00:11:49.340  -->  00:11:52.650
Now, what let actually wants here is a lambda expression.
277

277

00:11:52.650  -->  00:11:54.660
This is a lambda, you can't tell from looking
278

278

00:11:54.660  -->  00:11:56.920
at it here, but this is a lambda.
279

279

00:11:56.920  -->  00:11:59.029
And inside the lambda expression you,
280

280

00:11:59.029  -->  00:12:01.650
as I said refer to the variable
281

281

00:12:01.650  -->  00:12:03.287
you're testing using it.
282

282

00:12:03.287  -->  00:12:07.300
So essentially, the let function uses the object
283

283

00:12:07.300  -->  00:12:11.040
that calls it, as the parameter to the lambda.
284

284

00:12:11.040  -->  00:12:12.729
And that's exactly what's happening here.
285

285

00:12:12.729  -->  00:12:15.420
str is the object that's calling it,
286

286

00:12:15.420  -->  00:12:17.855
and so it substituted here for it.
287

287

00:12:17.855  -->  00:12:20.230
Now you don't have to call let,
288

288

00:12:20.230  -->  00:12:23.680
with the safety operator, here we're doing it,
289

289

00:12:23.680  -->  00:12:27.800
because we're essentially using let
290

290

00:12:27.800  -->  00:12:29.580
because this might be null.
291

291

00:12:29.580  -->  00:12:31.300
So, we're using the safe operator,
292

292

00:12:31.300  -->  00:12:33.040
because we don't want a null pointer exception,
293

293

00:12:33.040  -->  00:12:35.610
but as I said, but there are other cases,
294

294

00:12:35.610  -->  00:12:37.624
where you'll want to use let that don't involve
295

295

00:12:37.624  -->  00:12:40.550
this particular scenario, where you're using it
296

296

00:12:40.550  -->  00:12:44.183
because you wanna against null pointer exceptions,
297

297

00:12:44.183  -->  00:12:48.240
or in our case, you wanna call a function,
298

298

00:12:48.240  -->  00:12:50.520
that wants a non nullable type,
299

299

00:12:50.520  -->  00:12:52.450
and as you can see, we don't get an error.
300

300

00:12:52.450  -->  00:12:54.520
So, this takes care of the situation,
301

301

00:12:54.520  -->  00:12:56.224
where you have a nullable type,
302

302

00:12:56.224  -->  00:12:59.610
you wanna call a function that wants a non-nullable type.
303

303

00:12:59.610  -->  00:13:01.520
All you have to do is, call let with the
304

304

00:13:01.520  -->  00:13:03.956
safe operator and call the function
305

305

00:13:03.956  -->  00:13:05.850
as a lambda expression.
306

306

00:13:05.850  -->  00:13:08.780
So, another point, let's take a look at
307

307

00:13:08.780  -->  00:13:13.560
the following code now, I'll say val and this time,
308

308

00:13:13.560  -->  00:13:18.560
I'll say str4 and we'll make this a nullable string,
309

309

00:13:20.477  -->  00:13:22.743
and we'll say that this equals to null.
310

310

00:13:25.820  -->  00:13:28.030
We'll declare another string,
311

311

00:13:28.030  -->  00:13:32.010
and we'll say, this isn't nullable,
312

312

00:13:32.010  -->  00:13:35.060
which it isn't because, we haven't declared
313

313

00:13:35.060  -->  00:13:36.410
it as a nullable string.
314

314

00:13:36.410  -->  00:13:41.410
Now we wanna, say printline str4 equals another str.
315

315

00:13:42.770  -->  00:13:45.405
Now we've learned that in Kotlin,
316

316

00:13:45.405  -->  00:13:50.270
the equals operator, checks for structural equality,
317

317

00:13:50.270  -->  00:13:53.430
meaning that it checks the value of the objects,
318

318

00:13:53.430  -->  00:13:55.825
it defers to .equals function.
319

319

00:13:55.825  -->  00:13:59.016
But in this case, str4 can be null,
320

320

00:13:59.016  -->  00:14:00.885
but we're not getting an error.
321

321

00:14:00.885  -->  00:14:03.495
The Kotlin compiler is isn't saying,
322

322

00:14:03.495  -->  00:14:06.330
you're about to do something that can result
323

323

00:14:06.330  -->  00:14:07.540
in an null pointer exception.
324

324

00:14:07.540  -->  00:14:09.010
So, why is that?
325

325

00:14:09.010  -->  00:14:11.230
It's because the equals operator,
326

326

00:14:11.230  -->  00:14:13.670
is a safe operator.
327

327

00:14:13.670  -->  00:14:15.340
You know, we wouldn't wanna have to do something
328

328

00:14:15.340  -->  00:14:17.110
like this, that's gonna look messy,
329

329

00:14:17.110  -->  00:14:18.160
it's gonna look weird,
330

330

00:14:18.160  -->  00:14:21.110
and Kotlin, once again strives to be concise.
331

331

00:14:21.110  -->  00:14:22.840
So, because of this special case,
332

332

00:14:22.840  -->  00:14:24.730
where you have an operator that's actually calling
333

333

00:14:24.730  -->  00:14:28.208
a function under the covers, implicitly,
334

334

00:14:28.208  -->  00:14:32.730
this function is safe, so the null check is done for
335

335

00:14:32.730  -->  00:14:34.940
you under the covers, and we'll see
336

336

00:14:34.940  -->  00:14:38.437
that if we run, we're not going to get any errors.
337

337

00:14:38.437  -->  00:14:40.630
And you also see that our function
338

338

00:14:40.630  -->  00:14:42.513
was called fine up here, and printed,
339

339

00:14:42.513  -->  00:14:43.953
this isn't null.
