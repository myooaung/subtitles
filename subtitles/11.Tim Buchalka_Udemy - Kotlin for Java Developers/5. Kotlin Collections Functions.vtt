WEBVTT
1
00:00:05.460 --> 00:00:08.150
OK let's return to looking at lists.

2
00:00:08.150 --> 00:00:14.790
I've started another project and I've essentially just copied over the two lists we created in the last

3
00:00:14.790 --> 00:00:18.390
video so that we can start fresh with them.

4
00:00:18.390 --> 00:00:24.120
So now let's take a look at some of the functions that cotland has added that manipulate lists so one

5
00:00:24.120 --> 00:00:30.300
thing that we can do is we can easily get the last element in a list as follows so we can say print

6
00:00:30.300 --> 00:00:33.730
line strings start last.

7
00:00:33.750 --> 00:00:34.800
And if we run this

8
00:00:38.950 --> 00:00:43.550
we'll see that the last element in our strings list is winter.

9
00:00:43.750 --> 00:00:49.840
Of course you can also get the first element by calling the first function though that's not as useful

10
00:00:49.840 --> 00:00:52.850
because you know the first element will be at position 0.

11
00:00:53.110 --> 00:00:59.210
So you can always just use square brackets to get the first element and provide the index 0.

12
00:00:59.450 --> 00:01:01.440
OK so how about reversing a list.

13
00:01:01.460 --> 00:01:08.440
Well we can do that so we can say print line strings start as reversed and if we run that

14
00:01:12.130 --> 00:01:17.300
we'll see that we now have winter fall summer spring so the items have been reversed.

15
00:01:17.440 --> 00:01:22.330
So let's say we want to get an item from our list our strings list.

16
00:01:22.330 --> 00:01:28.150
So let's say we want to get item at location 5 within you know within x 5.

17
00:01:28.150 --> 00:01:37.330
So we probably do something like this if strings not size is greater than I guess five

18
00:01:40.240 --> 00:01:43.300
then it's safe for us to get index 5.

19
00:01:43.300 --> 00:01:49.820
So we'll say print line strings 5.

20
00:01:49.840 --> 00:01:50.860
So let's run

21
00:01:53.780 --> 00:01:58.120
and of course we're not going to see anything because we only have four items in our list.

22
00:01:58.130 --> 00:02:00.530
So is there a more concise way of writing this.

23
00:02:00.560 --> 00:02:05.570
Essentially what we're doing here is we only want to get an item if an item exists at the provided index

24
00:02:05.810 --> 00:02:10.700
and we're doing the check because we don't want an exception to be thrown because if we just comment

25
00:02:10.700 --> 00:02:19.100
out the these two lines here for a minute and then run we're going to get an exception because we only

26
00:02:19.100 --> 00:02:26.030
have four elements so the indices will go from 0 1 2 to 3 and we're trying to get the element of position

27
00:02:26.030 --> 00:02:28.010
5 doesn't exist.

28
00:02:28.010 --> 00:02:32.180
So instead of writing it like this we can do the following.

29
00:02:32.240 --> 00:02:35.020
So I might as well comment out this line as well.

30
00:02:35.030 --> 00:02:45.310
We can say print line strings Daut get or novel and provide 5.

31
00:02:45.650 --> 00:02:49.980
So what we're seeing here is we want element 5 and last.

32
00:02:50.000 --> 00:02:52.900
That's going to cause an exception in that case just return NULL.

33
00:02:53.000 --> 00:02:58.070
So we're run and we'll see that we don't get an exception and we get all printed.

34
00:02:58.070 --> 00:03:02.230
So that's a very concise way of not having to do this check.

35
00:03:02.540 --> 00:03:08.840
OK so there's is an easy way to get a maximum value in a can in a collection and let's create a collection

36
00:03:08.840 --> 00:03:09.920
like we had last time.

37
00:03:09.920 --> 00:03:17.510
So we'll say Vau it's equal and some will just say a list of 1 2 3 4 5.

38
00:03:17.990 --> 00:03:23.770
And then we can save print line and start max.

39
00:03:23.930 --> 00:03:26.180
So if we do that obviously we should get 5

40
00:03:29.040 --> 00:03:29.860
and we do.

41
00:03:30.030 --> 00:03:36.720
So that's an easy way to get the maximum we can join two collections together using the xit function.

42
00:03:36.720 --> 00:03:42.550
So if we wanted to join our list of seasons with our list of colors we can just do the following print

43
00:03:42.570 --> 00:03:47.000
line color list or zip strings.

44
00:03:47.220 --> 00:03:48.390
So let's run

45
00:03:52.000 --> 00:03:55.710
animals see something a little different than what we were expecting.

46
00:03:55.710 --> 00:03:56.970
Were you expecting this.

47
00:03:56.970 --> 00:03:57.990
Probably not.

48
00:03:57.990 --> 00:04:00.410
We have pairs.

49
00:04:00.570 --> 00:04:09.030
And what's happened is because these lists aren't the same lens we've got a pair of black with spring

50
00:04:09.030 --> 00:04:13.860
white with summer red with fall and then winter just gets dropped off.

51
00:04:13.860 --> 00:04:18.470
So the zip function actually creates pair elements.

52
00:04:18.670 --> 00:04:20.880
Pair is a Koplin class.

53
00:04:20.880 --> 00:04:25.170
And let's go ahead and take a look at its declaration and I guess the way I'll do that is just typing

54
00:04:25.170 --> 00:04:34.470
in pear here and then we'll say go to Declaration and we'll see that pear represents a pair of generic

55
00:04:34.470 --> 00:04:35.910
values.

56
00:04:36.060 --> 00:04:41.700
So the zip function takes the first element from each list and creates a pair from them and then it

57
00:04:41.700 --> 00:04:45.340
takes the second elements and creates a pair from them etc..

58
00:04:47.180 --> 00:04:49.330
So that's what it's doing here.

59
00:04:49.520 --> 00:04:55.490
When the lists aren't of equal size as is the case here it drops the access elements from the longer

60
00:04:55.490 --> 00:04:56.960
list.

61
00:04:56.960 --> 00:05:02.600
Now you can see how Zipp would be useful if you have two lists of related information and you want to

62
00:05:02.600 --> 00:05:03.760
bring them together.

63
00:05:04.010 --> 00:05:10.760
For example you might have a list of first names and a list of last names and you want to bring those

64
00:05:10.760 --> 00:05:12.730
together in a way that makes sense.

65
00:05:12.740 --> 00:05:13.880
So that's great.

66
00:05:13.880 --> 00:05:19.360
Now we know what Zipp does but how about just joining the list together without creating pears.

67
00:05:19.580 --> 00:05:22.710
Well to do that we'll just create another list as follows.

68
00:05:22.850 --> 00:05:28.610
So we'll say Vau merge lists equals list of.

69
00:05:28.760 --> 00:05:34.890
Now we want to start with the colors I think we sense will say color list followed by the strings list.

70
00:05:34.940 --> 00:05:39.370
Let's print this list and see if this time we got what we want

71
00:05:43.070 --> 00:05:43.840
.

72
00:05:44.450 --> 00:05:46.610
And we didn't get what we want.

73
00:05:46.940 --> 00:05:50.930
So now we have a list containing two lists.

74
00:05:50.960 --> 00:05:59.180
So when you use zip you get a list of pairs when you use this method of just saying I now want a list

75
00:05:59.330 --> 00:06:00.510
with both lists in it.

76
00:06:00.530 --> 00:06:03.230
That's what you get a list with both listen it.

77
00:06:03.230 --> 00:06:05.480
So let's try another way.

78
00:06:05.540 --> 00:06:14.980
Let's say Val combined the list equals and this time will say color list plus strings.

79
00:06:15.290 --> 00:06:18.320
And then we'll print our combined list.

80
00:06:18.320 --> 00:06:23.910
Now let's run and see if this gives us what we want and it does.

81
00:06:24.080 --> 00:06:28.760
So we have our three colors and then we have our four seasons.

82
00:06:28.940 --> 00:06:35.000
So you can concatenate lists together and you just use the regular old plus just as you do when you

83
00:06:35.000 --> 00:06:36.560
concatenate strings.

84
00:06:36.560 --> 00:06:43.100
OK let's add some duplicate items into the strings and the color list.

85
00:06:43.490 --> 00:06:50.780
So let's pretend this is the season's on another planet and they have two summers and then we'll add

86
00:06:51.140 --> 00:07:00.250
some duplicate color so we've got black white red and let's add black and red again.

87
00:07:01.130 --> 00:07:06.710
OK so now we want to combine these two lists but we don't want any duplicate items in there so we can't

88
00:07:06.710 --> 00:07:11.640
just use concatenation because if we use concatenation we're getting to get all the duplicates.

89
00:07:11.840 --> 00:07:15.020
Well this is where the Union function comes in.

90
00:07:15.200 --> 00:07:21.820
So we can say Val no dupes list equals color list.

91
00:07:21.890 --> 00:07:25.290
Union strings.

92
00:07:26.220 --> 00:07:30.440
And if we print line are no dupes list and run

93
00:07:33.350 --> 00:07:38.280
we'll see that we now get a list that doesn't have any duplicate Senate.

94
00:07:38.360 --> 00:07:40.550
So we have black white red.

95
00:07:40.550 --> 00:07:46.550
Spring Summer Fall and Winter and you'll notice that the print line from the combined list does contain

96
00:07:46.580 --> 00:07:48.520
all of the duplicates.

97
00:07:48.530 --> 00:07:55.310
So this is great but can we remove duplicates from a list without having to combine that list with anything.

98
00:07:55.300 --> 00:07:56.500
Well yes we can.

99
00:07:56.690 --> 00:08:02.000
So instead of doing a union because we don't want another list involved this time let's just remove

100
00:08:02.000 --> 00:08:10.700
the duplicates from our color list and we'll do it by saying found no do colors equals color list dot

101
00:08:11.180 --> 00:08:17.670
distinct and then we'll print print line no do colors.

102
00:08:17.660 --> 00:08:18.890
So let's run

103
00:08:21.960 --> 00:08:28.380
and we'll see now that we've removed all the duplicates from the color list so if you want to join two

104
00:08:28.380 --> 00:08:32.670
lists together and remove any duplicate So you use the Union function.

105
00:08:32.670 --> 00:08:38.870
If you're just interested in removing duplicates from a single list then you use the distinct function.

106
00:08:38.880 --> 00:08:44.730
Now everything that we've been doing here with a an immutable list you can obviously do with a mutable

107
00:08:44.730 --> 00:08:51.060
one but calling one of the functions that changes a list might not change the immutable list just because

108
00:08:51.060 --> 00:08:52.170
it's mutable.

109
00:08:52.410 --> 00:08:57.360
Some functions work directly on the list and others return a new list.

110
00:08:57.390 --> 00:09:02.110
For example the distinct function returns a new list.

111
00:09:02.130 --> 00:09:04.700
Most of our lists are immutable.

112
00:09:04.830 --> 00:09:09.270
But let's say we now want to change one of these less so we want it to be mutable.

113
00:09:09.270 --> 00:09:10.530
Can we do that.

114
00:09:10.540 --> 00:09:13.220
And of course we can.

115
00:09:13.740 --> 00:09:15.990
So we can say valid mutable.

116
00:09:16.110 --> 00:09:24.960
Let's call it seasons equals and we can say strings daat to mutable list and then we can say mutable

117
00:09:25.330 --> 00:09:26.940
seasons.

118
00:09:27.120 --> 00:09:38.450
Add some other season then if we print line are immutable seasons we'll see that the list is changed.

119
00:09:41.780 --> 00:09:42.680
And here it is.

120
00:09:42.680 --> 00:09:45.560
So now we have some other season at the end of the list.

121
00:09:45.770 --> 00:09:48.110
So that's it for looking at lists for now.

122
00:09:48.140 --> 00:09:52.910
I'm going to stop the video here and in the next video we're going to start to look at other types of

123
00:09:52.910 --> 00:09:54.080
collections.

124
00:09:54.110 --> 00:09:55.140
See you in the next video.
