1
1

00:00:04,710  -->  00:00:07,710
Now let's talk about one of the cool
2

2

00:00:07,710  -->  00:00:10,440
features of Kotlin called extension
3

3

00:00:10,440  -->  00:00:13,199
functions. Now extension functions let
4

4

00:00:13,199  -->  00:00:15,710
you extend any class you want to extend.
5

5

00:00:15,710  -->  00:00:18,630
However, when I say extend I mean that
6

6

00:00:18,630  -->  00:00:21,150
you can add functions to it, you're not
7

7

00:00:21,150  -->  00:00:22,920
extending the class in the sense that
8

8

00:00:22,920  -->  00:00:24,810
you'll be subclassing it, so don't panic
9

9

00:00:24,810  -->  00:00:26,850
because you think encapsulation can be
10

10

00:00:26,850  -->  00:00:29,640
broken. Extension functions are syntactical
11

11

00:00:29,640  -->  00:00:33,149
illusion, nothing more. So let's
12

12

00:00:33,149  -->  00:00:35,190
take a look at them, so we're going to
13

13

00:00:35,190  -->  00:00:37,050
create another class in our file called
14

14

00:00:37,050  -->  00:00:39,900
utils and we'll add a few functions to it.
15

15

00:00:39,900  -->  00:00:42,329
In Kotlin, we just use top-level
16

16

00:00:42,329  -->  00:00:44,340
functions for this, but I want to sort of
17

17

00:00:44,340  -->  00:00:47,970
do it the Java way. So I'll create
18

18

00:00:47,970  -->  00:00:51,180
another Kotlin file in our package and
19

19

00:00:51,180  -->  00:00:53,989
I'll call it utils.
20

20

00:00:53,989  -->  00:01:00,379
Okay and in here I'll create a class,
21

21

00:01:00,379  -->  00:01:03,539
nothing earth-shattering so far. Okay, so
22

22

00:01:03,539  -->  00:01:06,119
let's say that we want to add a function,
23

23

00:01:06,119  -->  00:01:09,690
utility function that upper case is the
24

24

00:01:09,690  -->  00:01:12,690
first and last letter in a string,
25

25

00:01:12,690  -->  00:01:17,400
so let's go. So start with fun and we'll
26

26

00:01:17,400  -->  00:01:23,340
call it upper first and last, it'll take
27

27

00:01:23,340  -->  00:01:26,760
a string and it's going to return a
28

28

00:01:26,760  -->  00:01:31,970
string, so we'll say val upper first
29

29

00:01:31,970  -->  00:01:35,430
equals and this is going to be we're
30

30

00:01:35,430  -->  00:01:37,049
going to start at the beginning of the
31

31

00:01:37,049  -->  00:01:42,049
string and we're going to take the first
32

32

00:01:42,049  -->  00:01:44,939
letter number whatever in the string.
33

33

00:01:44,939  -->  00:01:47,490
So substring 01 because remember what
34

34

00:01:47,490  -->  00:01:49,650
substring it- the second parameter is
35

35

00:01:49,650  -->  00:01:51,740
exclusive. So this is giving us the first
36

36

00:01:51,740  -->  00:01:54,450
position in the string and then we're
37

37

00:01:54,450  -->  00:01:57,210
going to uppercase it. So that's our
38

38

00:01:57,210  -->  00:01:59,909
first letter uppercase and then we're
39

39

00:01:59,909  -->  00:02:01,170
going to append
40

40

00:02:01,170  -->  00:02:05,610
the rest of the string to it, so this
41

41

00:02:05,610  -->  00:02:07,500
time you want to start at position 1.
42

42

00:02:07,500  -->  00:02:09,959
So again we're taking the string,
43

43

00:02:09,959  -->  00:02:11,700
we're upper casing the first letter and
44

44

00:02:11,700  -->  00:02:13,379
then we're appending the next string to
45

45

00:02:13,379  -->  00:02:14,819
it, so we've taken care of our first
46

46

00:02:14,819  -->  00:02:17,040
letter, now we've got to take care of the
47

47

00:02:17,040  -->  00:02:18,090
last letters, so we'll
48

48

00:02:18,090  -->  00:02:24,900
return upper first and then we'll take
49

49

00:02:24,900  -->  00:02:28,019
the substring of zero upper first dot
50

50

00:02:28,019  -->  00:02:31,739
length minus one, so this is taking the
51

51

00:02:31,739  -->  00:02:34,940
first, the string all the way to
52

52

00:02:34,940  -->  00:02:37,980
everything but the last character.
53

53

00:02:37,980  -->  00:02:39,780
Okay, that's what this first part is doing and
54

54

00:02:39,780  -->  00:02:42,870
then to that we're going to append and
55

55

00:02:42,870  -->  00:02:45,120
now we need the last character, we have
56

56

00:02:45,120  -->  00:02:46,890
to uppercase the last character, so we'll
57

57

00:02:46,890  -->  00:02:53,040
say upper first dot substring and this
58

58

00:02:53,040  -->  00:02:56,420
time, we'll say upper first dot length
59

59

00:02:56,420  -->  00:03:00,599
minus one so we're starting at the last
60

60

00:03:00,599  -->  00:03:04,560
character upper first dot length and we
61

61

00:03:04,560  -->  00:03:09,379
need to to uppercase it to uppercase and
62

62

00:03:09,379  -->  00:03:12,480
that's it. So, this function here upper
63

63

00:03:12,480  -->  00:03:15,060
takes a string, uppercases the first
64

64

00:03:15,060  -->  00:03:17,129
letter, uppercases the last letter and
65

65

00:03:17,129  -->  00:03:20,730
then returns the result. Now it's common
66

66

00:03:20,730  -->  00:03:23,639
in Java to have static utility classes
67

67

00:03:23,639  -->  00:03:25,319
that just contain a bunch of static
68

68

00:03:25,319  -->  00:03:27,389
methods that do things like this,
69

69

00:03:27,389  -->  00:03:30,000
there might be a utilities class for
70

70

00:03:30,000  -->  00:03:32,850
file io for manipulating strings and
71

71

00:03:32,850  -->  00:03:35,220
I'm sort of simulating that here
72

72

00:03:35,220  -->  00:03:39,150
in Kotlin, so any Kotlin file can import
73

73

00:03:39,150  -->  00:03:42,389
this class and use this function .
74

74

00:03:42,389  -->  00:03:46,380
So let's go back to our functions, guy here
75

75

00:03:46,380  -->  00:03:49,169
and we'll call that, we'll call our
76

76

00:03:49,169  -->  00:03:53,220
function. So we'll say utils and we have
77

77

00:03:53,220  -->  00:03:55,139
to create an instance in the class and
78

78

00:03:55,139  -->  00:03:57,329
then we'll call upper first and last and
79

79

00:03:57,329  -->  00:04:01,950
let's say this is all in lowercase and
80

80

00:04:01,950  -->  00:04:09,019
let's print out the result. Now we'll run
81

81

00:04:09,019  -->  00:04:12,510
and we'll see that the first and the
82

82

00:04:12,510  -->  00:04:14,430
last letter of the string have been
83

83

00:04:14,430  -->  00:04:16,260
uppercase, so we know that our utility
84

84

00:04:16,260  -->  00:04:19,320
function is working okay and of course
85

85

00:04:19,320  -->  00:04:21,900
as I said, this is kind of simulating the
86

86

00:04:21,900  -->  00:04:25,110
Java way because you'd have a utility
87

87

00:04:25,110  -->  00:04:26,849
class with a bunch of static functions
88

88

00:04:26,849  -->  00:04:28,710
because of course in Java code can't
89

89

00:04:28,710  -->  00:04:31,849
appear outside of classes and then
90

90

00:04:31,849  -->  00:04:34,039
the rest of the application would use the utility
91

91

00:04:34,039  -->  00:04:36,770
function. Now in Kotlin, you could do this,
92

92

00:04:36,770  -->  00:04:38,479
I mean you could do what we've just done,
93

93

00:04:38,479  -->  00:04:40,729
but another way you could do it is to
94

94

00:04:40,729  -->  00:04:44,119
use an extension function. So let's say
95

95

00:04:44,119  -->  00:04:46,369
you have a class and all it does is adds
96

96

00:04:46,369  -->  00:04:47,659
a bunch of functions that manipulate
97

97

00:04:47,659  -->  00:04:50,419
strings, so let's say this utils class
98

98

00:04:50,419  -->  00:04:52,520
had you know four or five or six or
99

99

00:04:52,520  -->  00:04:55,490
however many functions that just do
100

100

00:04:55,490  -->  00:04:58,069
stuff like this with strings, instead of
101

101

00:04:58,069  -->  00:05:01,069
doing this, it would be great if you
102

102

00:05:01,069  -->  00:05:03,770
could just add those functions to the
103

103

00:05:03,770  -->  00:05:05,809
string class, now of course you can't
104

104

00:05:05,809  -->  00:05:08,509
because you don't own the source code
105

105

00:05:08,509  -->  00:05:10,369
for the string class, so you can't go in
106

106

00:05:10,369  -->  00:05:11,719
there and say well I'm just going to add
107

107

00:05:11,719  -->  00:05:13,639
these functions in here but you can
108

108

00:05:13,639  -->  00:05:16,339
create the illusion of adding those
109

109

00:05:16,339  -->  00:05:18,860
functions to the string class and you
110

110

00:05:18,860  -->  00:05:21,110
use extension functions to do that.
111

111

00:05:21,110  -->  00:05:22,789
So I'm going to remove this function from
112

112

00:05:22,789  -->  00:05:24,619
the utils class, in fact I'll eventually
113

113

00:05:24,619  -->  00:05:27,409
delete this class and let's instead add
114

114

00:05:27,409  -->  00:05:30,379
an extension function to our functions
115

115

00:05:30,379  -->  00:05:32,629
file, so I'll copy and paste this to give
116

116

00:05:32,629  -->  00:05:37,389
us a good start just paste it in here
117

117

00:05:37,389  -->  00:05:41,209
and now let's create this as an
118

118

00:05:41,209  -->  00:05:43,189
extension function, so all we have to do
119

119

00:05:43,189  -->  00:05:48,110
is put string dot in front of the name
120

120

00:05:48,110  -->  00:05:50,509
here, so we're now saying that we want to
121

121

00:05:50,509  -->  00:05:52,789
associate this function with the string
122

122

00:05:52,789  -->  00:05:55,279
class. Now that's not all we have to do
123

123

00:05:55,279  -->  00:05:57,979
of course, because we're associating this
124

124

00:05:57,979  -->  00:06:00,139
with a string class, we no longer have to
125

125

00:06:00,139  -->  00:06:02,059
take the string as a parameter because
126

126

00:06:02,059  -->  00:06:04,369
we're going to call this function using
127

127

00:06:04,369  -->  00:06:06,259
a string instance as we would for
128

128

00:06:06,259  -->  00:06:08,749
example called string to uppercase,
129

129

00:06:08,749  -->  00:06:11,029
so instead of saying you know upper first
130

130

00:06:11,029  -->  00:06:14,539
and last str, we're going to say str dot
131

131

00:06:14,539  -->  00:06:18,050
upper first and last, so what do we do
132

132

00:06:18,050  -->  00:06:19,849
here? What do we do with these instances?
133

133

00:06:19,849  -->  00:06:21,349
Well, when you have an extension function
134

134

00:06:21,349  -->  00:06:23,479
like this, you refer to the instance that
135

135

00:06:23,479  -->  00:06:26,990
you're using to call it, using this
136

136

00:06:26,990  -->  00:06:28,729
so all we have to do is change these to
137

137

00:06:28,729  -->  00:06:33,110
this, the str instances so now what
138

138

00:06:33,110  -->  00:06:36,789
happens is when we use str to call this,
139

139

00:06:36,789  -->  00:06:40,129
str will be substituted in here, I mean
140

140

00:06:40,129  -->  00:06:41,809
it's really being passed as a parameter
141

141

00:06:41,809  -->  00:06:45,620
under the covers as I said, this is all an illusion
142

142

00:06:45,620  -->  00:06:47,810
but it makes it look like the upper
143

143

00:06:47,810  -->  00:06:50,060
first and last function actually belongs
144

144

00:06:50,060  -->  00:06:51,740
to the string class. So now let's go
145

145

00:06:51,740  -->  00:06:54,770
ahead and change our code to just call
146

146

00:06:54,770  -->  00:06:56,930
this as if it's part of the string class
147

147

00:06:56,930  -->  00:06:59,030
instead of having to do utils blah
148

148

00:06:59,030  -->  00:07:01,910
blah blah, we can just go like this.
149

149

00:07:01,910  -->  00:07:06,340
Let's put our string into a variable equals
150

150

00:07:06,340  -->  00:07:12,410
this is all in lowercase and then we can
151

151

00:07:12,410  -->  00:07:16,010
delete that from here, we no longer have
152

152

00:07:16,010  -->  00:07:18,470
to pass it as a parameter and we can
153

153

00:07:18,470  -->  00:07:24,650
just say s here. So it looks like the
154

154

00:07:24,650  -->  00:07:27,260
upper first and last function belongs to
155

155

00:07:27,260  -->  00:07:29,330
the string class but it doesn't, we're
156

156

00:07:29,330  -->  00:07:31,669
just kind of piggybacking our function
157

157

00:07:31,669  -->  00:07:33,919
on to the string class using some
158

158

00:07:33,919  -->  00:07:36,500
syntactical trickery. So what we've done
159

159

00:07:36,500  -->  00:07:38,930
here is we've preceded the function name
160

160

00:07:38,930  -->  00:07:41,900
with what's called the receiver type,
161

161

00:07:41,900  -->  00:07:44,270
so here, string is the receiver type and
162

162

00:07:44,270  -->  00:07:47,240
this is the class that were pseudo
163

163

00:07:47,240  -->  00:07:49,610
extending and one thing that you'll
164

164

00:07:49,610  -->  00:07:53,419
notice here is if I go s dot, IntelliJ
165

165

00:07:53,419  -->  00:07:56,120
will now suggest our function to us,
166

166

00:07:56,120  -->  00:07:59,450
so if we say upper here it is, upper first
167

167

00:07:59,450  -->  00:08:01,760
and last. So this is an advantage of
168

168

00:08:01,760  -->  00:08:04,910
using an extension function is the IDE
169

169

00:08:04,910  -->  00:08:07,190
or at least IntelliJ will now start
170

170

00:08:07,190  -->  00:08:09,050
suggesting this function to you as if it
171

171

00:08:09,050  -->  00:08:10,669
is part of the class, so it's all this
172

172

00:08:10,669  -->  00:08:12,889
great illusion that's created to make
173

173

00:08:12,889  -->  00:08:15,949
things easier for us. So let's go ahead
174

174

00:08:15,949  -->  00:08:18,410
and run, we should see the same thing we
175

175

00:08:18,410  -->  00:08:23,510
did before and we do we have our first
176

176

00:08:23,510  -->  00:08:26,210
letter uppercased our last letter uppercased.
177

177

00:08:26,210  -->  00:08:30,080
Now, in this example our string s,
178

178

00:08:30,080  -->  00:08:33,950
it's the receiver object, so string is the
179

179

00:08:33,950  -->  00:08:35,979
receiver type, it's the type that we're
180

180

00:08:35,979  -->  00:08:40,400
pseudo extending and the object that we
181

181

00:08:40,400  -->  00:08:43,190
use to call the extension function is
182

182

00:08:43,190  -->  00:08:44,990
called the receiver object, so if you see
183

183

00:08:44,990  -->  00:08:47,150
those two terms being discussed that's
184

184

00:08:47,150  -->  00:08:50,120
what they mean. Now, we can actually drop
185

185

00:08:50,120  -->  00:08:53,000
the use of this in the function body.
186

186

00:08:53,000  -->  00:08:55,100
I want it to explicitly use it first so
187

187

00:08:55,100  -->  00:08:56,810
you'd understand what's happening in
188

188

00:08:56,810  -->  00:08:59,020
here, so what's happening in here is
189

189

00:08:59,020  -->  00:09:00,880
we're calling the upper first and last
190

190

00:09:00,880  -->  00:09:04,209
extension function using s and so in the
191

191

00:09:04,209  -->  00:09:08,170
body, s is substituted here as if you
192

192

00:09:08,170  -->  00:09:10,390
passed it in as a parameter but in this
193

193

00:09:10,390  -->  00:09:15,690
case, we can actually just remove it and
194

194

00:09:15,690  -->  00:09:20,190
we'll you'll see that if we run
195

195

00:09:20,190  -->  00:09:22,779
everything runs as it did before, we have
196

196

00:09:22,779  -->  00:09:24,490
our first letter uppercase in our last
197

197

00:09:24,490  -->  00:09:25,959
letter uppercase so this is really
198

198

00:09:25,959  -->  00:09:28,120
concise and as I said it's a big
199

199

00:09:28,120  -->  00:09:31,750
illusion, it's making it appear as if the
200

200

00:09:31,750  -->  00:09:34,750
upper first and last function belongs to
201

201

00:09:34,750  -->  00:09:36,490
the string class when in fact it doesn't.
202

202

00:09:36,490  -->  00:09:38,709
It's something that we've tacked on to
203

203

00:09:38,709  -->  00:09:40,990
the string class. Now your development
204

204

00:09:40,990  -->  00:09:43,000
team could define extension functions
205

205

00:09:43,000  -->  00:09:45,490
that everyone uses and when you create
206

206

00:09:45,490  -->  00:09:48,339
an extension function, you can use this,
207

207

00:09:48,339  -->  00:09:51,250
as we saw above but you can also access
208

208

00:09:51,250  -->  00:09:54,550
any public members by name. So if you
209

209

00:09:54,550  -->  00:09:56,680
were creating an extension function for
210

210

00:09:56,680  -->  00:09:59,940
a class that had you know five public
211

211

00:09:59,940  -->  00:10:02,080
properties or members, you could
212

212

00:10:02,080  -->  00:10:04,390
reference those by name within the body.
213

213

00:10:04,390  -->  00:10:07,420
So as long as something is public inside
214

214

00:10:07,420  -->  00:10:09,640
the class that you're tacking the
215

215

00:10:09,640  -->  00:10:11,800
extension function onto, you can
216

216

00:10:11,800  -->  00:10:13,959
reference it in the extension functions
217

217

00:10:13,959  -->  00:10:15,760
body and of course you can reference
218

218

00:10:15,760  -->  00:10:18,160
this because you'll always be calling
219

219

00:10:18,160  -->  00:10:20,829
extension function using an object of
220

220

00:10:20,829  -->  00:10:23,079
the receiver type. So you can use this
221

221

00:10:23,079  -->  00:10:25,480
and you can also reference public
222

222

00:10:25,480  -->  00:10:27,670
members within the receiver type.
223

223

00:10:27,670  -->  00:10:29,829
Now Kotlin uses extension functions quite a
224

224

00:10:29,829  -->  00:10:32,170
lot, in fact if you look at the Kotlin
225

225

00:10:32,170  -->  00:10:34,990
standard library, you'll see that a lot
226

226

00:10:34,990  -->  00:10:37,089
of the functions in there are actually
227

227

00:10:37,089  -->  00:10:40,870
extension functions to the JDK, so Kotlin
228

228

00:10:40,870  -->  00:10:44,560
has pseudo extended some of the classes
229

229

00:10:44,560  -->  00:10:46,510
in the jdk and it's done that using
230

230

00:10:46,510  -->  00:10:48,100
extension functions and we'll see that
231

231

00:10:48,100  -->  00:10:52,120
when we cover io in Kotlin. So this is a
232

232

00:10:52,120  -->  00:10:55,000
pretty cool feature, some developers
233

233

00:10:55,000  -->  00:10:57,279
worry that it might lead to some lazy
234

234

00:10:57,279  -->  00:10:59,829
coding, for example instead of people
235

235

00:10:59,829  -->  00:11:03,430
writing code and using subclasses where
236

236

00:11:03,430  -->  00:11:05,380
they should, that they might instead just
237

237

00:11:05,380  -->  00:11:08,949
tack on extension functions but I guess
238

238

00:11:08,949  -->  00:11:11,140
time will tell how these extension
239

239

00:11:11,140  -->  00:11:12,400
functions are used
240

240

00:11:12,400  -->  00:11:15,580
and whether developers go that route
241

241

00:11:15,580  -->  00:11:17,470
when they shouldn't be. I think it's a
242

242

00:11:17,470  -->  00:11:20,410
pretty cool feature, the only thing that
243

243

00:11:20,410  -->  00:11:22,600
might be confusing to a developer that's
244

244

00:11:22,600  -->  00:11:24,430
not familiar with the code if somebody
245

245

00:11:24,430  -->  00:11:26,260
might come along and actually actually
246

246

00:11:26,260  -->  00:11:27,940
think your extension function is part of
247

247

00:11:27,940  -->  00:11:30,310
the class, but you know it's easy enough
248

248

00:11:30,310  -->  00:11:32,290
to just do something like this in the
249

249

00:11:32,290  -->  00:11:34,480
IDE and say go to the declaration and
250

250

00:11:34,480  -->  00:11:36,640
then you can see right away that oh okay
251

251

00:11:36,640  -->  00:11:38,320
it's an extension function, so I don't
252

252

00:11:38,320  -->  00:11:40,480
think that's a big deal. Anyway, that's it
253

253

00:11:40,480  -->  00:11:45,000
for functions. I'll see you in the next video.
