1
1

00:00:04,700  -->  00:00:07,290
So before we get into what data types
2

2

00:00:07,290  -->  00:00:09,240
are available in Kotlin, let's get one
3

3

00:00:09,240  -->  00:00:11,610
thing out of the way, everything is a
4

4

00:00:11,610  -->  00:00:14,580
class. There are no lower case data types
5

5

00:00:14,580  -->  00:00:16,980
as there are in Java, but apart from that,
6

6

00:00:16,980  -->  00:00:18,599
you're already familiar with the
7

7

00:00:18,599  -->  00:00:20,520
built-in data types available in Kotlin,
8

8

00:00:20,520  -->  00:00:23,070
because they're the same as in Java, so we're
9

9

00:00:23,070  -->  00:00:24,840
not going to spend much time on them.
10

10

00:00:24,840  -->  00:00:27,750
I mean think about this, we're writing
11

11

00:00:27,750  -->  00:00:29,880
Kotlin applications that are targeted to
12

12

00:00:29,880  -->  00:00:33,149
the jvm and the jvm understands a
13

13

00:00:33,149  -->  00:00:35,190
certain set of built-in data types and
14

14

00:00:35,190  -->  00:00:38,039
so Kotlin has the same set of built-in
15

15

00:00:38,039  -->  00:00:39,929
data types. So we're going to create a
16

16

00:00:39,929  -->  00:00:42,870
new Kotlin project and add a package
17

17

00:00:42,870  -->  00:00:44,820
and file as we normally do. I'm going to
18

18

00:00:44,820  -->  00:00:47,129
go through this fairly quickly. I'm going
19

19

00:00:47,129  -->  00:00:51,089
to go to file, new, project and I'm going
20

20

00:00:51,089  -->  00:00:56,100
to call this project data types.
21

21

00:00:56,100  -->  00:00:58,199
I'm going to open it in this window and I'm
22

22

00:00:58,199  -->  00:00:59,550
going to expand the project navigator
23

23

00:00:59,550  -->  00:01:03,179
and create a package and I'm going to
24

24

00:01:03,179  -->  00:01:06,510
call this package academy dot learn
25

25

00:01:06,510  -->  00:01:11,100
programming dot data types and I'll
26

26

00:01:11,100  -->  00:01:14,120
create a file called data types as well.
27

27

00:01:14,120  -->  00:01:17,430
And now, I'll add the usual main method
28

28

00:01:17,430  -->  00:01:20,640
and we're ready to go. So let's start
29

29

00:01:20,640  -->  00:01:22,590
with integer which as I've said several
30

30

00:01:22,590  -->  00:01:24,930
times , is the default data type for
31

31

00:01:24,930  -->  00:01:27,450
whole numbers, just as it is in Java.
32

32

00:01:27,450  -->  00:01:29,580
Now you've already seen this, so I'll just
33

33

00:01:29,580  -->  00:01:31,980
remind you that you use int for the
34

34

00:01:31,980  -->  00:01:34,650
integer data type and because int is the
35

35

00:01:34,650  -->  00:01:37,110
default when you want an int, you don't
36

36

00:01:37,110  -->  00:01:38,910
have to specify it in a variable
37

37

00:01:38,910  -->  00:01:40,770
declaration when you're assigning an
38

38

00:01:40,770  -->  00:01:43,620
initial value. Obviously, if you're not
39

39

00:01:43,620  -->  00:01:45,480
assigning an initial value, then you have
40

40

00:01:45,480  -->  00:01:47,070
to specify it, otherwise the compiler
41

41

00:01:47,070  -->  00:01:49,650
won't know what type you want, but if
42

42

00:01:49,650  -->  00:01:51,510
you're assigning an initial value and
43

43

00:01:51,510  -->  00:01:53,340
you want it to be an int, you don't have
44

44

00:01:53,340  -->  00:01:55,830
to include the data type, so we can do
45

45

00:01:55,830  -->  00:01:59,850
something like val my int equals 10 and
46

46

00:01:59,850  -->  00:02:03,270
that will give us an integer variable in
47

47

00:02:03,270  -->  00:02:05,610
this case and immutable integer variable
48

48

00:02:05,610  -->  00:02:08,489
with a data type of int. Now there's also
49

49

00:02:08,489  -->  00:02:10,709
byte, short and long I'm not going to
50

50

00:02:10,709  -->  00:02:12,209
waste time going through these, because
51

51

00:02:12,209  -->  00:02:14,939
you know these from Java. I'm just going
52

52

00:02:14,939  -->  00:02:17,219
to mention two things, the first thing is
53

53

00:02:17,219  -->  00:02:21,780
that the L suffix for longs is also used in Kotlin.
54

54

00:02:21,780  -->  00:02:26,880
So you go val my long equals 22L and that
55

55

00:02:26,880  -->  00:02:30,180
works. If you take the L away here, you would
56

56

00:02:30,180  -->  00:02:32,520
actually get an int, because the compiler
57

57

00:02:32,520  -->  00:02:35,100
is going to see 22 is an int. So if
58

58

00:02:35,100  -->  00:02:36,720
you're not going to specify the datatype
59

59

00:02:36,720  -->  00:02:40,560
here, you have to say L, if you specify
60

60

00:02:40,560  -->  00:02:45,330
the datatype, then 22 at this point will
61

61

00:02:45,330  -->  00:02:47,819
be a long. Well let's take it out and just
62

62

00:02:47,819  -->  00:02:50,459
use L, it's shorter and in Kotlin,
63

63

00:02:50,459  -->  00:02:52,350
you always always try to write things the
64

64

00:02:52,350  -->  00:02:54,330
shorter way. Now the second thing I'm
65

65

00:02:54,330  -->  00:02:55,860
going to mention is really important,
66

66

00:02:55,860  -->  00:02:57,930
because it's different behavior from
67

67

00:02:57,930  -->  00:03:01,130
Java. So listen up, Kotlin does not
68

68

00:03:01,130  -->  00:03:04,890
automatically widen numbers. Now what do
69

69

00:03:04,890  -->  00:03:06,870
I mean by that? Well in Java, we can do
70

70

00:03:06,870  -->  00:03:09,750
the following, I'll type this out in Java
71

71

00:03:09,750  -->  00:03:11,370
even though the compiler is going to
72

72

00:03:11,370  -->  00:03:13,170
complain, just so we can quickly look.
73

73

00:03:13,170  -->  00:03:15,570
So in Java, we'd go like int my int
74

74

00:03:15,570  -->  00:03:21,920
equals 10 and then we go long my long
75

75

00:03:21,920  -->  00:03:26,310
equals my int and that works in Java.
76

76

00:03:26,310  -->  00:03:28,170
Java is not going to give us an error,
77

77

00:03:28,170  -->  00:03:30,600
but let's try the same thing in Kotlin.
78

78

00:03:30,600  -->  00:03:32,130
Now before I do, that though the reason
79

79

00:03:32,130  -->  00:03:33,510
Java is not going to give us an error of
80

80

00:03:33,510  -->  00:03:35,880
course is because my int can fit into a
81

81

00:03:35,880  -->  00:03:38,940
long variable, so Java just automatically
82

82

00:03:38,940  -->  00:03:41,100
converts this to a long when it assigns
83

83

00:03:41,100  -->  00:03:42,900
of value, not a problem.
84

84

00:03:42,900  -->  00:03:45,810
In other words Java automatically widens
85

85

00:03:45,810  -->  00:03:48,720
the integer, but Kotlin doesn't do that.
86

86

00:03:48,720  -->  00:03:50,280
So let's try to do the equivalent thing
87

87

00:03:50,280  -->  00:03:54,450
in Kotlin, let's try to assign my int to
88

88

00:03:54,450  -->  00:04:01,110
my long and you'll see we have an error
89

89

00:04:01,110  -->  00:04:02,489
for two reasons, first of all I'll have
90

90

00:04:02,489  -->  00:04:05,370
to change this to a var but we still
91

91

00:04:05,370  -->  00:04:07,200
have an error now and it says type
92

92

00:04:07,200  -->  00:04:10,230
mismatch requiring a long and it found an
93

93

00:04:10,230  -->  00:04:13,350
int. So we can't do the same thing that
94

94

00:04:13,350  -->  00:04:15,329
we did in Java, there's no automatic
95

95

00:04:15,329  -->  00:04:17,820
widening of numbers in Kotlin.
96

96

00:04:17,820  -->  00:04:21,090
Now, because of that and Java has the same
97

97

00:04:21,090  -->  00:04:23,160
methods but they're even more important
98

98

00:04:23,160  -->  00:04:26,039
in Kotlin now, every datatype has two
99

99

00:04:26,039  -->  00:04:28,710
functions that convert to the other data
100

100

00:04:28,710  -->  00:04:32,039
types. So in order to fix this error,
101

101

00:04:32,039  -->  00:04:34,139
we just have to call the two long
102

102

00:04:34,139  -->  00:04:36,809
function on the integer and now the
103

103

00:04:36,809  -->  00:04:38,759
error goes away, because this function
104

104

00:04:38,759  -->  00:04:42,599
converts the value to a long and long on
105

105

00:04:42,599  -->  00:04:44,879
the right-hand side matches long on the
106

106

00:04:44,879  -->  00:04:47,039
left-hand side so we no longer have an
107

107

00:04:47,039  -->  00:04:50,460
error here. So let's look at another example,
108

108

00:04:50,460  -->  00:04:53,939
we'll declare a Val variable called my
109

109

00:04:53,939  -->  00:04:57,449
byte of type byte and we'll assign it
110

110

00:04:57,449  -->  00:05:02,460
the value of 111. Now here of course,
111

111

00:05:02,460  -->  00:05:04,529
we have to specify the datatype, because if
112

112

00:05:04,529  -->  00:05:07,289
we don't, 111 can fit into an integer,
113

113

00:05:07,289  -->  00:05:09,240
so the compiler is going to assume you want
114

114

00:05:09,240  -->  00:05:10,979
an integer, if you don't specify that you
115

115

00:05:10,979  -->  00:05:14,580
want to a byte and let's declare a var my
116

116

00:05:14,580  -->  00:05:19,110
short and we'll make it a short and then
117

117

00:05:19,110  -->  00:05:22,199
we'll go my short equals my byte and
118

118

00:05:22,199  -->  00:05:24,029
again, we're going to get the error
119

119

00:05:24,029  -->  00:05:25,289
saying that we have a type mismatch,
120

120

00:05:25,289  -->  00:05:28,620
because once again in Java, Java would
121

121

00:05:28,620  -->  00:05:31,499
automatically widen the short, the byte
122

122

00:05:31,499  -->  00:05:34,289
to fit into the short but Kotlin doesn't
123

123

00:05:34,289  -->  00:05:39,830
do that. So we have to go 2.2 short and
124

124

00:05:39,830  -->  00:05:42,149
call the two short function and now the
125

125

00:05:42,149  -->  00:05:44,009
error goes away. So keep this in mind
126

126

00:05:44,009  -->  00:05:46,139
when you're working with numbers.
127

127

00:05:46,139  -->  00:05:48,120
Now, there is one exception to this and that
128

128

00:05:48,120  -->  00:05:51,259
is numeric literals. Kotlin will
129

129

00:05:51,259  -->  00:05:54,419
automatically widen literals, so this is
130

130

00:05:54,419  -->  00:05:56,759
only a problem when you're assigning
131

131

00:05:56,759  -->  00:05:59,459
numbers that are inside variables, so for
132

132

00:05:59,459  -->  00:06:01,649
example we can do the following,
133

133

00:06:01,649  -->  00:06:07,889
val another int equals five. Now we've been
134

134

00:06:07,889  -->  00:06:09,749
doing this all along, we were doing it up
135

135

00:06:09,749  -->  00:06:11,309
here, we were doing it up here because
136

136

00:06:11,309  -->  00:06:14,430
here, you know 10 doesn't need an int,
137

137

00:06:14,430  -->  00:06:17,269
this could fit into a byte. So could this
138

138

00:06:17,269  -->  00:06:19,740
this obviously does and that's okay,
139

139

00:06:19,740  -->  00:06:21,539
because we're assigning it to a byte,
140

140

00:06:21,539  -->  00:06:23,580
but here, by which could fit into a byte
141

141

00:06:23,580  -->  00:06:25,889
where the compiler is going ahead and
142

142

00:06:25,889  -->  00:06:29,099
creating an int variable for us,
143

143

00:06:29,099  -->  00:06:30,509
so that's an exception
144

144

00:06:30,509  -->  00:06:32,610
obviously, compiler is not going to
145

145

00:06:32,610  -->  00:06:35,189
complain here about that, but if we this
146

146

00:06:35,189  -->  00:06:38,009
was a variable and it wasn't an int
147

147

00:06:38,009  -->  00:06:39,719
variable then the compiler would
148

148

00:06:39,719  -->  00:06:41,789
complain. So for numbers stored in
149

149

00:06:41,789  -->  00:06:44,399
variables, you have to explicitly widen
150

150

00:06:44,399  -->  00:06:47,850
the value when necessary, and you do that by
151

151

00:06:47,850  -->  00:06:50,220
calling the appropriate to datatype
152

152

00:06:50,220  -->  00:06:52,080
function. Alright, so let's briefly
153

153

00:06:52,080  -->  00:06:53,850
touch on floating point numbers,
154

154

00:06:53,850  -->  00:06:55,590
everything I've just said about the
155

155

00:06:55,590  -->  00:06:58,380
whole number types applies here, now just
156

156

00:06:58,380  -->  00:07:01,020
as in Java, double is the default data
157

157

00:07:01,020  -->  00:07:03,030
type, so you don't have to specify in
158

158

00:07:03,030  -->  00:07:05,370
variable declaration. So you can go do
159

159

00:07:05,370  -->  00:07:10,770
something like var my double equals 65
160

160

00:07:10,770  -->  00:07:14,550
point 984 and this will give
161

161

00:07:14,550  -->  00:07:17,580
you a double value. And if we wanted to
162

162

00:07:17,580  -->  00:07:19,890
prove that, we could say print line my
163

163

00:07:19,890  -->  00:07:23,880
double is double, this should be a
164

164

00:07:23,880  -->  00:07:32,220
capital D and let's run and we'll see
165

165

00:07:32,220  -->  00:07:35,480
that we get true. So the compiler is
166

166

00:07:35,480  -->  00:07:38,640
assigning double here and I suppose
167

167

00:07:38,640  -->  00:07:40,470
we've never actually proven it for int.
168

168

00:07:40,470  -->  00:07:44,940
So let's do that print line default data
169

169

00:07:44,940  -->  00:07:47,700
type is and we'll do this inside a
170

170

00:07:47,700  -->  00:07:49,620
string template and we'll open up an
171

171

00:07:49,620  -->  00:07:55,320
expression, my int is int and let's print
172

172

00:07:55,320  -->  00:08:00,870
that and we'll see that, you know default
173

173

00:08:00,870  -->  00:08:03,120
data type is true, I suppose I could have
174

174

00:08:03,120  -->  00:08:04,170
put integer in here.
175

175

00:08:04,170  -->  00:08:09,440
Okay now you can use the F suffix with
176

176

00:08:09,440  -->  00:08:12,030
floats, just as you do in Java.
177

177

00:08:12,030  -->  00:08:15,710
So you could say val my float equals
178

178

00:08:15,710  -->  00:08:18,810
eight thirty eight point five four eight
179

179

00:08:18,810  -->  00:08:20,310
nine, whatever I don't even know if
180

180

00:08:20,310  -->  00:08:23,280
that's what I said F and when you do
181

181

00:08:23,280  -->  00:08:25,770
that, this is now a float it's not a
182

182

00:08:25,770  -->  00:08:28,670
double. Let's print it out to show that.
183

183

00:08:28,670  -->  00:08:33,810
Let's say this is a float and we'll open
184

184

00:08:33,810  -->  00:08:38,690
up a string template, my float is float.
185

185

00:08:38,690  -->  00:08:45,630
Let's run and this is a float and that's true.
186

186

00:08:45,630  -->  00:08:48,180
And as with whole numbers there is no
187

187

00:08:48,180  -->  00:08:51,900
automatic widening, so if we say my
188

188

00:08:51,900  -->  00:08:56,100
double equals my float we're going to
189

189

00:08:56,100  -->  00:08:59,550
get an error here, type mismatch double
190

190

00:08:59,550  -->  00:09:01,920
on the left hand side and it wants a
191

191

00:09:01,920  -->  00:09:03,570
float and of course we can just go to
192

192

00:09:03,570  -->  00:09:06,660
double and that would take care of the
193

193

00:09:06,660  -->  00:09:09,030
error. So that's a very quick whirlwind
194

194

00:09:09,030  -->  00:09:12,030
tour of the numeric types most important
195

195

00:09:12,030  -->  00:09:13,980
thing to keep in mind, I think from this
196

196

00:09:13,980  -->  00:09:16,500
is the difference in behavior when it
197

197

00:09:16,500  -->  00:09:18,960
comes to variables, the values are not
198

198

00:09:18,960  -->  00:09:20,700
automatically widened when you're
199

199

00:09:20,700  -->  00:09:22,860
assigning them to a wider data type.
200

200

00:09:22,860  -->  00:09:24,750
You have to explicitly do the widening by
201

201

00:09:24,750  -->  00:09:27,540
calling the appropriate two data type
202

202

00:09:27,540  -->  00:09:30,900
function. Alright, so now let's take a
203

203

00:09:30,900  -->  00:09:34,470
look at the char data type, so we can say
204

204

00:09:34,470  -->  00:09:37,670
val char equals and let's make this b
205

205

00:09:37,670  -->  00:09:41,310
nothing new here, the compiler can infer
206

206

00:09:41,310  -->  00:09:43,350
the type if it sees a single character
207

207

00:09:43,350  -->  00:09:45,720
literal and single quotes like this that
208

208

00:09:45,720  -->  00:09:48,000
knows it's going to be a char, but if we
209

209

00:09:48,000  -->  00:09:50,420
want it to, we could be explicit and say
210

210

00:09:50,420  -->  00:09:56,040
char, that works too but we don't need it
211

211

00:09:56,040  -->  00:09:59,310
and we try to be concise in Kotlin.
212

212

00:09:59,310  -->  00:10:01,320
Now in Java, we can do something like the
213

213

00:10:01,320  -->  00:10:03,030
following and I'm going to write Java
214

214

00:10:03,030  -->  00:10:04,740
code here, so we'll get errors you can
215

215

00:10:04,740  -->  00:10:10,710
say char my char equals 65 and semicolon.
216

216

00:10:10,710  -->  00:10:13,380
Now what that does is it assigns
217

217

00:10:13,380  -->  00:10:15,630
whatever character corresponds to the
218

218

00:10:15,630  -->  00:10:18,510
value of 65 in the character set that
219

219

00:10:18,510  -->  00:10:22,110
the application is using now for utf-8
220

220

00:10:22,110  -->  00:10:24,150
and I believe in ASCII as well, that's a
221

221

00:10:24,150  -->  00:10:26,790
capital A so if we were to print it out,
222

222

00:10:26,790  -->  00:10:29,970
we would get a capital A. Let's try to do
223

223

00:10:29,970  -->  00:10:32,010
the same thing in Kotlin now, so I'm
224

224

00:10:32,010  -->  00:10:36,630
going to delete that and I'll say val my
225

225

00:10:36,630  -->  00:10:41,280
char equal 65, now can you see right away
226

226

00:10:41,280  -->  00:10:44,160
why that doesn't work? The compiler is
227

227

00:10:44,160  -->  00:10:48,000
going to assume that by 65 you mean the
228

228

00:10:48,000  -->  00:10:50,370
integer 65, so that won't work so let's
229

229

00:10:50,370  -->  00:10:53,580
explicitly tell the compiler we want a
230

230

00:10:53,580  -->  00:10:56,970
char and it doesn't work, it'll say the
231

231

00:10:56,970  -->  00:10:58,920
integer literal does not conform to the
232

232

00:10:58,920  -->  00:11:01,970
expected type char, so you can't assign
233

233

00:11:01,970  -->  00:11:04,980
numeric values like this to char
234

234

00:11:04,980  -->  00:11:08,010
variables, like you can in Java and a
235

235

00:11:08,010  -->  00:11:09,810
concise way of saying that is you can't
236

236

00:11:09,810  -->  00:11:12,120
treat characters like numbers in Kotlin.
237

237

00:11:12,120  -->  00:11:16,649
Characters have to be treated like characters.
238

238

00:11:16,649  -->  00:11:18,480
So, if you wanted to do something like this, what
239

239

00:11:18,480  -->  00:11:20,190
would you do? Let's say you had the
240

240

00:11:20,190  -->  00:11:22,500
number 65 and you want to get the
241

241

00:11:22,500  -->  00:11:24,449
character that corresponds to the number
242

242

00:11:24,449  -->  00:11:27,570
65, this is the way we could do it, we'd
243

243

00:11:27,570  -->  00:11:30,839
have to convert it, so we'd go val my
244

244

00:11:30,839  -->  00:11:34,589
char int equals 65 because this is going
245

245

00:11:34,589  -->  00:11:37,170
to be the int type and then we'd say
246

246

00:11:37,170  -->  00:11:43,459
print line my char int dot to char and
247

247

00:11:43,459  -->  00:11:47,000
let's see what that gets us, let me run.
248

248

00:11:47,000  -->  00:11:51,509
And you can see that the character a was
249

249

00:11:51,509  -->  00:11:54,750
printed, so if you've got a character
250

250

00:11:54,750  -->  00:11:56,910
literal as a numeric and you want to
251

251

00:11:56,910  -->  00:11:59,069
actually get it into a char variable,
252

252

00:11:59,069  -->  00:12:02,519
Once again you've got to explicitly do
253

253

00:12:02,519  -->  00:12:04,829
that, there's no automatic conversion
254

254

00:12:04,829  -->  00:12:05,940
done for you.
255

255

00:12:05,940  -->  00:12:08,550
All right, so how about boolean?
256

256

00:12:08,550  -->  00:12:10,920
Well, there's nothing remarkable about boolean,
257

257

00:12:10,920  -->  00:12:13,819
the only thing I'll tell you about it is
258

258

00:12:13,819  -->  00:12:19,500
val my boolean, I'll make this actually uppercase
259

259

00:12:19,500  -->  00:12:25,529
and it's boolean, in fact as you might
260

260

00:12:25,529  -->  00:12:27,510
have guessed we don't need the boolean
261

261

00:12:27,510  -->  00:12:29,519
here, but I wanted to show it to you so
262

262

00:12:29,519  -->  00:12:32,250
we can take that out and just say true,
263

263

00:12:32,250  -->  00:12:34,560
and of course there's false and that's
264

264

00:12:34,560  -->  00:12:36,630
all there is to boolean, so that's all
265

265

00:12:36,630  -->  00:12:38,819
I'll say about them. And that's it for
266

266

00:12:38,819  -->  00:12:41,310
the primitive data types, we've seen the
267

267

00:12:41,310  -->  00:12:43,589
Kotlin types that map to Java's
268

268

00:12:43,589  -->  00:12:46,680
primitive types, but one of the key
269

269

00:12:46,680  -->  00:12:48,329
features of Kotlin is that it's
270

270

00:12:48,329  -->  00:12:51,060
interoperable with Java, which means that
271

271

00:12:51,060  -->  00:12:53,190
you can call Java methods from Kotlin
272

272

00:12:53,190  -->  00:12:54,949
without having to do anything special,
273

273

00:12:54,949  -->  00:12:57,420
but what happens if you want to call a
274

274

00:12:57,420  -->  00:13:00,120
Java method and it once a primitive type
275

275

00:13:00,120  -->  00:13:03,180
is a parameter, like let's say it wants a
276

276

00:13:03,180  -->  00:13:06,600
boolean parameter but it wants the
277

277

00:13:06,600  -->  00:13:08,760
primitive boolean type? It doesn't want
278

278

00:13:08,760  -->  00:13:11,579
the boolean class. Well let's try it out,
279

279

00:13:11,579  -->  00:13:14,839
we're going to add a Java class to our
280

280

00:13:14,839  -->  00:13:18,000
Kotlin project, I'm going to put it into
281

281

00:13:18,000  -->  00:13:20,550
a separate package but because it'll be cleaner.
282

282

00:13:20,550  -->  00:13:23,370
So I'll just right click here new,
283

283

00:13:23,370  -->  00:13:26,910
package and we'll call the package
284

284

00:13:26,910  -->  00:13:32,670
academy.learnprogramming.java
285

285

00:13:32,670  -->  00:13:37,350
code and then inside this package,
286

286

00:13:37,350  -->  00:13:40,290
I'll create a new Java class and I'll call
287

287

00:13:40,290  -->  00:13:44,430
the class dummy class because this class
288

288

00:13:44,430  -->  00:13:47,220
really is going to be a dummy and we're
289

289

00:13:47,220  -->  00:13:50,300
going to add a very silly method in here,
290

290

00:13:50,300  -->  00:13:53,010
it just takes a boolean and then
291

291

00:13:53,010  -->  00:13:54,990
depending on the what the boolean is,
292

292

00:13:54,990  -->  00:13:57,240
it'll print one thing or another thing.
293

293

00:13:57,240  -->  00:14:01,620
So we'll say public string is vacation
294

294

00:14:01,620  -->  00:14:04,710
time, it accepts the primitive boolean
295

295

00:14:04,710  -->  00:14:11,310
called on vacation and it's going to use
296

296

00:14:11,310  -->  00:14:13,200
the ternary operator, which as we've
297

297

00:14:13,200  -->  00:14:15,540
learned no longer exists in Kotlin, so it
298

298

00:14:15,540  -->  00:14:20,190
will return on vacation and if that's
299

299

00:14:20,190  -->  00:14:23,040
true, it will return the string I'm on
300

300

00:14:23,040  -->  00:14:28,170
vacation, but if it's false it'll return
301

301

00:14:28,170  -->  00:14:31,560
the string I'm working and that's it,
302

302

00:14:31,560  -->  00:14:34,190
very very simple, but it wants a
303

303

00:14:34,190  -->  00:14:37,410
primitive boolean, so what do we do if we
304

304

00:14:37,410  -->  00:14:39,600
want to call this from Kotlin? Well let's
305

305

00:14:39,600  -->  00:14:42,330
go back to our Kotlin file, so we want to
306

306

00:14:42,330  -->  00:14:44,730
create an instance of the dummy class
307

307

00:14:44,730  -->  00:14:47,790
and call is vacation time and we don't
308

308

00:14:47,790  -->  00:14:49,950
have to do anything special, we can treat
309

309

00:14:49,950  -->  00:14:52,080
the Java class just as we would a Kotlin
310

310

00:14:52,080  -->  00:14:54,360
class and just to make things a little
311

311

00:14:54,360  -->  00:14:56,580
bit more complicated, we'll pass a
312

312

00:14:56,580  -->  00:14:58,680
boolean variable rather than a literal,
313

313

00:14:58,680  -->  00:15:00,690
I know that's not all that complicated but
314

314

00:15:00,690  -->  00:15:03,360
rather than doing it the absolute
315

315

00:15:03,360  -->  00:15:05,880
simplest way, we'll decide a variable to
316

316

00:15:05,880  -->  00:15:11,420
the mix. So we'll say vow vacation time
317

317

00:15:11,420  -->  00:15:14,640
equals false, so we're not on vacation
318

318

00:15:14,640  -->  00:15:20,580
and we'll say val on vacation equals
319

319

00:15:20,580  -->  00:15:25,940
dummy class, so here I'm instantiating a
320

320

00:15:25,940  -->  00:15:28,830
dummy class instance and then we want to
321

321

00:15:28,830  -->  00:15:31,490
call the is vacation time method and
322

322

00:15:31,490  -->  00:15:34,940
we're going to pass it vacation time.
323

323

00:15:34,940  -->  00:15:40,160
Ans let's print the result.
324

324

00:15:40,160  -->  00:15:42,839
Now you'll notice that we have no errors
325

325

00:15:42,839  -->  00:15:48,810
anywhere here, so let's run. And we get
326

326

00:15:48,810  -->  00:15:50,960
the string I'm working, so it looks like
327

327

00:15:50,960  -->  00:15:54,720
we successfully called the Java method
328

328

00:15:54,720  -->  00:15:56,730
that was expecting a primitive type
329

329

00:15:56,730  -->  00:15:58,260
without having to do anything special
330

330

00:15:58,260  -->  00:16:00,930
and in fact that's correct, you don't
331

331

00:16:00,930  -->  00:16:03,750
have to do anything special and the
332

332

00:16:03,750  -->  00:16:07,020
reason for that is when it comes to the
333

333

00:16:07,020  -->  00:16:11,070
primitive classes, the Kotlin classes
334

334

00:16:11,070  -->  00:16:13,500
actually compile to the primitive types
335

335

00:16:13,500  -->  00:16:17,339
under the covers, so when the Kotlin
336

336

00:16:17,339  -->  00:16:20,250
class- this class is compiled this
337

337

00:16:20,250  -->  00:16:22,800
vacation time variable is actually a
338

338

00:16:22,800  -->  00:16:24,630
boolean with a little b that's what
339

339

00:16:24,630  -->  00:16:26,550
it gets compiled to and that's why
340

340

00:16:26,550  -->  00:16:29,670
there's no mismatch when you need to
341

341

00:16:29,670  -->  00:16:32,910
call a java method that wants a
342

342

00:16:32,910  -->  00:16:35,279
primitive. Now how about if it wanted
343

343

00:16:35,279  -->  00:16:39,260
boolean big B boolean, would that work?
344

344

00:16:39,260  -->  00:16:44,400
Let's change this to a big B go back to
345

345

00:16:44,400  -->  00:16:47,339
data types, doesn't look like anything's
346

346

00:16:47,339  -->  00:16:52,170
changed here so let's run and it still
347

347

00:16:52,170  -->  00:16:53,940
works and that's because of course Java
348

348

00:16:53,940  -->  00:16:57,510
has its boxing and unboxing, so that all
349

349

00:16:57,510  -->  00:16:59,760
works just the way it does in Java where
350

350

00:16:59,760  -->  00:17:02,490
there's boxing and unboxing that goes on
351

351

00:17:02,490  -->  00:17:04,620
for you. Okay so before we leave this
352

352

00:17:04,620  -->  00:17:06,800
topic, I just want to talk about the any,
353

353

00:17:06,800  -->  00:17:10,559
unit and nothing classes, these are three
354

354

00:17:10,559  -->  00:17:13,170
important classes in Kotlin. Now the any
355

355

00:17:13,170  -->  00:17:15,900
class is sort of like the object class
356

356

00:17:15,900  -->  00:17:19,140
in Java, it's the root of every Kotlin
357

357

00:17:19,140  -->  00:17:21,839
object, it includes function definitions
358

358

00:17:21,839  -->  00:17:25,380
for two string hashcode and equals.
359

359

00:17:25,380  -->  00:17:26,970
So, let's take a look at the class by
360

360

00:17:26,970  -->  00:17:28,980
declaring a variable type any and then
361

361

00:17:28,980  -->  00:17:31,500
doing a control b to go to the source
362

362

00:17:31,500  -->  00:17:34,860
code, the declaration for any.
363

363

00:17:34,860  -->  00:17:39,140
So I'll just say val anything is of type any and
364

364

00:17:39,140  -->  00:17:42,360
then here we'll right-click and we'll
365

365

00:17:42,360  -->  00:17:45,300
say go to the declaration and here you
366

366

00:17:45,300  -->  00:17:49,160
can see that here's the any class and
367

367

00:17:49,160  -->  00:17:52,140
it's got function definitions for
368

368

00:17:52,140  -->  00:17:55,230
equals hashcode and to string and you'll
369

369

00:17:55,230  -->  00:17:58,710
see that there's nothing in here. Also,
370

370

00:17:58,710  -->  00:18:00,300
one one interesting thing here that
371

371

00:18:00,300  -->  00:18:02,190
we've already covered it'll say that
372

372

00:18:02,190  -->  00:18:03,930
note that equals equals operator and
373

373

00:18:03,930  -->  00:18:06,330
Kotlin code is translated into a call
374

374

00:18:06,330  -->  00:18:08,700
for equals, when objects are on both
375

375

00:18:08,700  -->  00:18:11,880
sides of the operator and not null and
376

376

00:18:11,880  -->  00:18:14,070
that we saw that before, when we were
377

377

00:18:14,070  -->  00:18:16,650
looking at structural versus referential
378

378

00:18:16,650  -->  00:18:19,260
equality. So it says the any class is the
379

379

00:18:19,260  -->  00:18:21,030
root at the call in class hierarchy and
380

380

00:18:21,030  -->  00:18:23,700
every Kotlin class has any as a
381

381

00:18:23,700  -->  00:18:28,230
superclass, so this is the any class.
382

382

00:18:28,230  -->  00:18:30,630
Now, the unit class is equivalent to void in
383

383

00:18:30,630  -->  00:18:34,170
Java, void isn't really a datatype, it's a
384

384

00:18:34,170  -->  00:18:35,940
way of telling the compiler that a
385

385

00:18:35,940  -->  00:18:38,730
method doesn't return anything, Kotlin
386

386

00:18:38,730  -->  00:18:41,370
uses the unit class for this purpose.
387

387

00:18:41,370  -->  00:18:42,720
So, if you have a function that doesn't
388

388

00:18:42,720  -->  00:18:44,880
return anything, then you can declare it
389

389

00:18:44,880  -->  00:18:48,390
as returning type unit, but unit actually
390

390

00:18:48,390  -->  00:18:50,970
exists in Kotlin, it's not just you know
391

391

00:18:50,970  -->  00:18:52,800
a way of telling the compiler that
392

392

00:18:52,800  -->  00:18:54,150
nothing gets returned.
393

393

00:18:54,150  -->  00:18:56,520
It's a singleton and we're going to
394

394

00:18:56,520  -->  00:18:58,830
cover those later, so if a function
395

395

00:18:58,830  -->  00:19:01,440
returns unit, it will actually return the
396

396

00:19:01,440  -->  00:19:04,020
singleton unit instance and this is an
397

397

00:19:04,020  -->  00:19:06,000
important difference between Kotlin and
398

398

00:19:06,000  -->  00:19:09,240
Java. In Java a void method truly doesn't
399

399

00:19:09,240  -->  00:19:12,480
return anything, but in Kotlin a function
400

400

00:19:12,480  -->  00:19:15,090
that returns unit, actually returns the
401

401

00:19:15,090  -->  00:19:18,270
singleton unit instance. And finally, we
402

402

00:19:18,270  -->  00:19:19,950
have the nothing class and there's no
403

403

00:19:19,950  -->  00:19:22,200
equivalent for this in Java. This is
404

404

00:19:22,200  -->  00:19:24,180
going to sound strange, but nothing is a
405

405

00:19:24,180  -->  00:19:26,970
subclass of every class, which means that
406

406

00:19:26,970  -->  00:19:29,910
you can use nothing wherever you can use
407

407

00:19:29,910  -->  00:19:33,240
any class, so why would you do this?
408

408

00:19:33,240  -->  00:19:34,860
Why would you want to use this nothing
409

409

00:19:34,860  -->  00:19:37,530
class? Well, one common use case would be
410

410

00:19:37,530  -->  00:19:39,390
when you know a function is never going
411

411

00:19:39,390  -->  00:19:42,260
to return, like for example if a function
412

412

00:19:42,260  -->  00:19:45,090
intentionally contains an infinite loop,
413

413

00:19:45,090  -->  00:19:47,670
you can tell the compiler that you don't
414

414

00:19:47,670  -->  00:19:50,940
expect this function ever to return by
415

415

00:19:50,940  -->  00:19:53,010
having the function return type b
416

416

00:19:53,010  -->  00:19:55,590
nothing, so that's one use case for it.
417

417

00:19:55,590  -->  00:19:57,780
Anyway, that's it, I just wanted to
418

418

00:19:57,780  -->  00:20:00,390
briefly touch on any, unit and nothing
419

419

00:20:00,390  -->  00:20:02,520
because you're going to see them, but
420

420

00:20:02,520  -->  00:20:05,400
that's it for the built-in data types in Kotlin.
421

421

00:20:05,400  -->  00:20:08,390
I'll see you in the next video.
