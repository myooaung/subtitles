WEBVTT
1
00:00:05.620 --> 00:00:09.160
All right now we're going to take a look at calling Katlin from Java.

2
00:00:09.170 --> 00:00:14.390
And when we want to do this we're usually starting with a java project so I'm going to go through the

3
00:00:14.390 --> 00:00:20.600
project creation process because there is one configuration step that you have to do if you want to

4
00:00:20.600 --> 00:00:22.070
call Katlin.

5
00:00:22.130 --> 00:00:29.870
So we'll come up to file new project and this time we want to jab a project and we could pull in cotland

6
00:00:29.870 --> 00:00:36.680
here but all do it when I actually add a Cartland file to the project and it's going to be a console

7
00:00:36.680 --> 00:00:37.540
application.

8
00:00:37.550 --> 00:00:45.740
And if we want the main method generated for us we can click this and that will generate the main method.

9
00:00:45.890 --> 00:00:49.870
And now we come to this dialog here.

10
00:00:49.880 --> 00:00:59.150
I'm going to call this project call Cartland from Java and it will remember the package that you were

11
00:00:59.150 --> 00:01:00.860
using previously.

12
00:01:00.890 --> 00:01:07.310
I was playing around with this at one point and I have so I already have it package Academie that learn

13
00:01:07.310 --> 00:01:08.400
programming.

14
00:01:08.440 --> 00:01:12.740
Call in from Java and I might as well keep that package for this project too.

15
00:01:12.800 --> 00:01:13.900
So I'll just click Finish.

16
00:01:13.910 --> 00:01:19.160
But if you want it to if there is no package name here or you didn't want the same package name you

17
00:01:19.160 --> 00:01:20.410
could change it here.

18
00:01:20.510 --> 00:01:26.960
So I click Finish and I want to open the project in this window and we get our expected Java project

19
00:01:26.960 --> 00:01:30.920
with the main method generated.

20
00:01:30.950 --> 00:01:37.910
So now I want to add CANTLIN into this project so I'm going to make a new package for our Cartland code.

21
00:01:39.120 --> 00:01:43.920
Or call it academy got learn programming.

22
00:01:44.230 --> 00:01:46.770
It's called Koplin code.

23
00:01:46.900 --> 00:01:53.380
And now a lot of CANTLIN file and I'm going to add a CANTLIN file called car.

24
00:01:53.560 --> 00:01:59.230
Now when I do that you'll see we get a message saying that Katlin is not configured and it's easy to

25
00:01:59.230 --> 00:02:07.290
configure it you just come down to the alert box here expand it and then you're given two choices.

26
00:02:07.300 --> 00:02:10.940
Do you want to target the JVM or do you want to target javascript.

27
00:02:10.940 --> 00:02:17.940
Well we want to target the JVM So we're going to click the Cartland Java module link and we can accept

28
00:02:18.030 --> 00:02:25.960
all of the defaults on this dialogue and the idea went ahead and configured the Koplin runtime for us

29
00:02:25.960 --> 00:02:32.220
so essentially all it's done is it's added the dependencies that are required to build and run this

30
00:02:32.220 --> 00:02:33.300
project.

31
00:02:33.550 --> 00:02:40.950
OK so let's go ahead and add the usual car class we've been working with before so we'll save Vau color

32
00:02:41.700 --> 00:02:48.410
string Val model string and foul year.

33
00:02:48.880 --> 00:02:53.000
And let's now add a top level function.

34
00:02:53.000 --> 00:02:54.570
So we'll say fun.

35
00:02:54.600 --> 00:03:02.620
Top level equals print line time in the car file.

36
00:03:03.030 --> 00:03:04.200
OK so that's great.

37
00:03:04.200 --> 00:03:08.430
So now we want to call this top level function from Java.

38
00:03:08.430 --> 00:03:09.840
How do we do that.

39
00:03:10.140 --> 00:03:18.240
What class name do we use because we come to java of course and we just say you know top level.

40
00:03:18.250 --> 00:03:19.910
That's not going to work and has no clue.

41
00:03:19.920 --> 00:03:21.440
But look what happened.

42
00:03:21.450 --> 00:03:29.130
The idea popped up a message it's gone now but it told us how to call this function.

43
00:03:29.130 --> 00:03:34.140
I mentioned near the beginning of the course when we went over quick differences between Cartland and

44
00:03:34.140 --> 00:03:42.990
Java that when you're dealing with top level items the compiler will generate a static class under the

45
00:03:42.990 --> 00:03:45.960
covers for all the top level items.

46
00:03:46.200 --> 00:03:51.190
And what it will do is it will give the class the same name as the CANTLIN file.

47
00:03:51.240 --> 00:03:57.770
And so in this case the class name that we have to use to call any top level functions in here is actually

48
00:03:57.780 --> 00:03:59.160
car Katie.

49
00:03:59.190 --> 00:04:01.510
It includes the extension.

50
00:04:01.860 --> 00:04:09.240
And so if we come back here and we say car then you'll see right here it suggesting car to us.

51
00:04:09.480 --> 00:04:14.490
So car k t dot top level and it works.

52
00:04:14.580 --> 00:04:16.110
And if we go ahead and run

53
00:04:19.750 --> 00:04:20.430
we'll see.

54
00:04:20.430 --> 00:04:21.800
I'm in the car file.

55
00:04:21.850 --> 00:04:27.190
So we were meant we managed to call the top level function and again it's important to note that the

56
00:04:27.190 --> 00:04:32.620
extension is actually included in the class name and that actually helps us out here because we already

57
00:04:32.620 --> 00:04:34.090
have a car class.

58
00:04:34.240 --> 00:04:40.000
But let's say it didn't include the extension and we had some type of naming conflict in here so for

59
00:04:40.000 --> 00:04:46.820
some strange reason we already had a car class in fact let's just temporarily change this to car.

60
00:04:47.040 --> 00:04:54.940
Katie now we're getting a problem because decompilers like I have no clue what you want to do.

61
00:04:54.940 --> 00:04:59.380
I see a car Kaytee class so and it doesn't have a top level function.

62
00:04:59.380 --> 00:05:01.370
So what would we do in this case.

63
00:05:01.570 --> 00:05:08.860
Well you can change the name of the static class that the compiler the calling compiler will create

64
00:05:08.920 --> 00:05:16.930
under the covers for you and you do that using the JVM name and annotation and you put it right at the

65
00:05:16.930 --> 00:05:20.890
top of the file before the package name.

66
00:05:20.890 --> 00:05:29.920
So up here we could say file JVM name and then in parentheses we put what we want is called So let's

67
00:05:29.920 --> 00:05:32.840
say we want this called static car.

68
00:05:32.860 --> 00:05:37.720
So what we're doing here is we're telling the compiler you know that static class you're going to generate

69
00:05:37.750 --> 00:05:42.950
under the covers for us for all of our top level members we'll call that class static car.

70
00:05:43.000 --> 00:05:48.430
That's what we want the name of that class to be and then if we come up here or back to our job and

71
00:05:48.430 --> 00:05:55.540
we staes say static car you'll see that now that's being suggested to us and we can go ahead and call

72
00:05:56.590 --> 00:05:57.920
this function.

73
00:05:57.940 --> 00:06:04.720
So that's how you take care of naming conflicts or for some reason you don't want the the saying in

74
00:06:04.720 --> 00:06:07.150
the name you just want to give your own name.

75
00:06:07.390 --> 00:06:09.550
So that's fine.

76
00:06:09.550 --> 00:06:14.020
I'll leave aside as it is and I'm going to pull this Kaytee out here because we just want this to be

77
00:06:14.020 --> 00:06:17.330
car but everything still works fine.

78
00:06:18.360 --> 00:06:23.820
I'll have to remove this import now because there is no current Katie and let's run

79
00:06:27.170 --> 00:06:32.700
we'll see that we can still call our top level function in car perfectly fine and we're using the name

80
00:06:32.700 --> 00:06:35.990
that we asked the compiler to give the class.

81
00:06:36.000 --> 00:06:42.630
Now you would call extension functions in the same way because it's extension functions are top level

82
00:06:42.630 --> 00:06:43.320
functions.

83
00:06:43.320 --> 00:06:50.820
So if you wanted to call an extension function from Java you'd have to precede the name with the name

84
00:06:50.820 --> 00:06:51.980
of the class.

85
00:06:52.050 --> 00:07:00.880
So let's define an extension function here on string Let's say so say find string dot print.

86
00:07:00.890 --> 00:07:01.750
That's stupid.

87
00:07:01.770 --> 00:07:09.830
But and we'll say print line this.

88
00:07:10.250 --> 00:07:17.430
And so if we wanted to call this we'd just say main line of main function here now and we'd say print

89
00:07:17.490 --> 00:07:20.790
this dot print.

90
00:07:21.390 --> 00:07:22.740
And that would work.

91
00:07:22.740 --> 00:07:26.290
I'll have to run from Katlin if I just want to run this from Kotla now.

92
00:07:27.190 --> 00:07:29.650
And will say print this.

93
00:07:29.670 --> 00:07:35.130
So now we want to call the extension function from Java and we don't we can't do it the way we do it

94
00:07:35.130 --> 00:07:43.580
from Katlin we can't use the string instance to invoke this function we have to invoke it.

95
00:07:43.590 --> 00:07:47.650
Just like a regular function now so we'd say something like.

96
00:07:47.850 --> 00:07:51.420
Print this Javins string just so we know it's coming from Java.

97
00:07:51.630 --> 00:07:57.870
And if we go like that we're not going to see our extension function because we it's in that static

98
00:07:57.870 --> 00:08:04.750
class so instead we have to call it just like we call in a normal function and say static hard dot print

99
00:08:05.280 --> 00:08:09.330
and do the following.

100
00:08:09.330 --> 00:08:18.150
And if we run our main function now our main method rather we'll see print is Java strings so when you're

101
00:08:18.150 --> 00:08:23.580
using extension functions from Java it's not as nice as when you're using them from within Cartland

102
00:08:23.580 --> 00:08:27.530
but you can use them in the way that I just showed you.

103
00:08:27.540 --> 00:08:33.960
All right so let's try to access member properties from Java now so we know that we have our core class

104
00:08:33.960 --> 00:08:36.120
and it has three properties in it.

105
00:08:36.120 --> 00:08:38.480
So let's go ahead and try to use those from Java.

106
00:08:38.490 --> 00:08:48.530
So we'll say Carcar equals new car and we'll give it a color of blue.

107
00:08:49.470 --> 00:08:54.470
We'll make it a BMW and we'll make it a 2011 car.

108
00:08:54.960 --> 00:08:59.250
And now we can say system out print line

109
00:09:01.830 --> 00:09:12.390
car docked model and so you can see here in Jaba where we're calling get Monell because the compiler

110
00:09:12.390 --> 00:09:17.610
of course has generated setters and getters we just don't see them.

111
00:09:17.610 --> 00:09:22.200
And so we can access them as we normally would access getters and setters from Java.

112
00:09:22.200 --> 00:09:29.450
Now obviously if you made any of these private you would not be able to access them here.

113
00:09:29.460 --> 00:09:33.120
And also there won't be a card not set model.

114
00:09:33.180 --> 00:09:41.850
If we look at that card set you'll see we don't have one because these are vowel properties and so only

115
00:09:41.850 --> 00:09:45.030
a getter is generated for them not a setter.

116
00:09:45.030 --> 00:09:53.040
Let's go back to Collin and let's let's generate a private sector for one of these so instead of declaring

117
00:09:53.040 --> 00:09:57.840
color as part of the primary constructor signature we'll declare it in the class and it has to be a

118
00:09:57.840 --> 00:10:04.590
VAR because we're going to want to set it and we'll assign it the color that comes in when this instance

119
00:10:04.590 --> 00:10:05.510
is constructed.

120
00:10:05.520 --> 00:10:14.240
But then we want a custom set and we'll just say field equals always green.

121
00:10:14.250 --> 00:10:20.370
So if you construct an instance you can give whatever color you want but if you then set the color we're

122
00:10:20.370 --> 00:10:22.360
gonna set it to always green.

123
00:10:22.380 --> 00:10:32.300
So now let's go back to our Java class and we'll say card set color purple purple

124
00:10:35.400 --> 00:10:35.710
.

125
00:10:35.740 --> 00:10:36.650
Print out the color

126
00:10:42.370 --> 00:10:46.030
get color let's run.

127
00:10:46.120 --> 00:10:47.530
Can't tell what you mean method.

128
00:10:47.530 --> 00:10:50.190
This belongs to now so I'll run from here.

129
00:10:53.240 --> 00:11:00.170
And you'll see that the color is always green so the Cartland compiler is generating a set color now

130
00:11:00.170 --> 00:11:03.850
for this and it generates the custom set.

131
00:11:04.190 --> 00:11:10.520
All this to say that if you have custom sets and gets then Java will access those just like it accesses

132
00:11:10.520 --> 00:11:14.330
the default ones when you don't have custom sets and gets.

133
00:11:14.360 --> 00:11:17.630
But now let's make this set private.

134
00:11:17.770 --> 00:11:21.110
Will come in here and say actually we're going to make this private.

135
00:11:21.580 --> 00:11:27.340
We don't want anybody to be able to call this unless they're in our class and we'll go back and do our

136
00:11:27.340 --> 00:11:30.010
job and we see that we have an error.

137
00:11:30.010 --> 00:11:35.830
So you can restrict access to this getter and setter using an access modifier.

138
00:11:35.860 --> 00:11:46.440
So here are properties actually public because we haven't specified a modifier here but the set is private.

139
00:11:46.450 --> 00:11:48.400
Now one final note about this.

140
00:11:48.430 --> 00:11:52.770
A Of course as I said a setter will only be generated for var properties.

141
00:11:52.780 --> 00:11:58.610
So if we try to call set model we won't be able to and I think we tried that before.

142
00:11:58.630 --> 00:12:01.780
So if we say card set model

143
00:12:04.470 --> 00:12:11.140
it won't even recognize that we have a set model method because Cartland didn't generate one.

144
00:12:11.160 --> 00:12:16.230
So in the case of setting it private It does know that there's a set method there it just knows that

145
00:12:16.230 --> 00:12:18.940
it can't access it here.

146
00:12:19.050 --> 00:12:20.310
There isn't one at all.

147
00:12:20.580 --> 00:12:30.090
OK so I'm going to now comment this out and declare it back up in the primary constructor and we'll

148
00:12:30.090 --> 00:12:36.190
come back here and come just delete this line to get rid of the air.

149
00:12:36.600 --> 00:12:42.120
OK so let's add a boolean property to the car class.

150
00:12:42.120 --> 00:12:48.830
So we'll say now is automatic and that'll be a boolean.

151
00:12:49.530 --> 00:12:52.860
So now let's get this value from Jaba.

152
00:12:52.920 --> 00:12:54.510
So we'll come back here.

153
00:12:54.690 --> 00:12:57.480
Well first we need to say let's say this is an automatic.

154
00:12:57.480 --> 00:13:04.970
I have no clue if they're automatically in use but for our purposes there are and we'll say system got

155
00:13:04.980 --> 00:13:13.950
out of print line card dot and we'll see that intelligence in this case is suggesting is automatic rather

156
00:13:13.950 --> 00:13:15.010
than get.

157
00:13:15.240 --> 00:13:23.670
So when you're dealing with booleans it generates a get are called is rather than a get a getter called

158
00:13:23.670 --> 00:13:25.130
Get whatever.

159
00:13:25.320 --> 00:13:28.020
So that's a special rule for book for boolean properties.

160
00:13:28.020 --> 00:13:28.810
Now what about.

161
00:13:28.820 --> 00:13:34.710
Set Well let's go ahead and make this VAR for a second I'll just complete this so that we don't get

162
00:13:34.710 --> 00:13:35.900
compiler errors.

163
00:13:36.090 --> 00:13:41.530
Let's go ahead and make to say so that all the Cartland compiler will generate a set.

164
00:13:41.880 --> 00:13:49.450
And let's see what we get suggested to us now so we'll say Card Daut and you'll see set Automattic.

165
00:13:49.560 --> 00:13:56.740
So for booleans you still get the usual set but for the Gap method it'll use is instead of get.

166
00:13:56.760 --> 00:14:01.090
Now how about properties is more than two words is the camel casing preserved.

167
00:14:01.170 --> 00:14:07.000
Let's come back here and we'll just say temporarily change this model name.

168
00:14:07.500 --> 00:14:14.470
And if we come back here now and do the same trick car Daut and we'll see that we get get model name.

169
00:14:14.520 --> 00:14:17.160
So the camel casing is preserved.

170
00:14:17.400 --> 00:14:17.850
All right.

171
00:14:17.850 --> 00:14:20.250
I'm going to put everything back the way it was.

172
00:14:20.250 --> 00:14:27.460
I'm actually going to remove the automatic property and take off the model here.

173
00:14:30.740 --> 00:14:33.020
And we're back to what we had before.

174
00:14:33.020 --> 00:14:36.890
Now we can also access Cartland fields directly.

175
00:14:36.980 --> 00:14:42.710
You might have a situation where you want Java to be able to access a property without going through

176
00:14:42.710 --> 00:14:44.250
the getter or setter.

177
00:14:44.300 --> 00:14:48.480
So right now back in Java we can't do the following.

178
00:14:49.760 --> 00:14:54.260
We can't say Caracappa model that doesn't work.

179
00:14:54.260 --> 00:14:56.010
We have to go through to get.

180
00:14:56.030 --> 00:15:03.280
Now if you want Java code to be able to do that you can add an annotation to the property.

181
00:15:03.290 --> 00:15:10.790
So let's go back to the car class and let's say we want to be able to access model in that way we can

182
00:15:10.790 --> 00:15:20.560
say at jayvee am field and now we should be able to access model just by saying car Daut model.

183
00:15:20.570 --> 00:15:25.410
And we can see can see now instead of suggesting the gat.

184
00:15:25.640 --> 00:15:28.410
It says you can go ahead and just use model.

185
00:15:28.460 --> 00:15:29.780
So it's one or the other.

186
00:15:29.780 --> 00:15:38.330
You can either access a Java field using a get method if there is one available or using the property

187
00:15:38.330 --> 00:15:43.460
name depending on whether you've included the JVM name annotation or not.

188
00:15:43.460 --> 00:15:46.810
So I would make sure that your Java code is consistent.

189
00:15:46.820 --> 00:15:51.810
I would be inclined to still use the methods but it's up to you.

190
00:15:51.860 --> 00:15:56.630
Now there are a few restrictions on when you can use the at JVM fields annotation.

191
00:15:56.700 --> 00:16:03.440
You can't use it with private properties you can't use it with a property that overrides another property

192
00:16:03.800 --> 00:16:10.010
or a property that can be overridden or with a constant property that uses the Konst key word.

193
00:16:10.010 --> 00:16:13.260
So there are a few restrictions there to be aware of.

194
00:16:13.340 --> 00:16:19.040
OK I'm going to stop the video here and in the next video we'll continue looking at calling Koplin from

195
00:16:19.190 --> 00:16:20.040
Java.

196
00:16:20.050 --> 00:16:20.660
See you there.
