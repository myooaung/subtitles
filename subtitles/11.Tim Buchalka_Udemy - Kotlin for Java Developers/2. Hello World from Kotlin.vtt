WEBVTT
1
1

00:00:04.670  -->  00:00:06.859
Well, this wouldn't be a programming
2

2

00:00:06.859  -->  00:00:08.750
course if we didn't code the traditional
3

3

00:00:08.750  -->  00:00:11.330
'Hello World' application, so let's go
4

4

00:00:11.330  -->  00:00:13.400
ahead and do that because even though
5

5

00:00:13.400  -->  00:00:16.520
it's a trivial application, I'll be
6

6

00:00:16.520  -->  00:00:18.410
able to demonstrate a few key differences
7

7

00:00:18.410  -->  00:00:21.499
between Kotlin and Java, now ideally
8

8

00:00:21.499  -->  00:00:23.390
you'll code along with me from this
9

9

00:00:23.390  -->  00:00:25.759
point forward. You'll learn a lot more by
10

10

00:00:25.759  -->  00:00:28.099
practicing and typing in the code will
11

11

00:00:28.099  -->  00:00:30.890
reinforce the syntax and the concepts,
12

12

00:00:30.890  -->  00:00:33.829
so if you can, follow along. So we'll start
13

13

00:00:33.829  -->  00:00:36.680
out by creating an intelliJ project,
14

14

00:00:36.680  -->  00:00:43.150
we're going to go to file, new, project.
15

15

00:00:43.150  -->  00:00:46.670
Now, if this is the very first intelliJ
16

16

00:00:46.670  -->  00:00:48.710
project that you're creating, and you
17

17

00:00:48.710  -->  00:00:50.840
don't have a project open
18

18

00:00:50.840  -->  00:00:54.320
you're probably started out with a small screen
19

19

00:00:54.320  -->  00:00:57.469
that has a few options on it and
20

20

00:00:57.469  -->  00:00:59.600
one of those will be to create a project
21

21

00:00:59.600  -->  00:01:02.239
so just click that and when you do,
22

22

00:01:02.239  -->  00:01:05.120
you'll end up at this point, so once you're here
23

23

00:01:05.120  -->  00:01:07.220
either because you want to file new
24

24

00:01:07.220  -->  00:01:10.549
or you clicked create new project from the
25

25

00:01:10.549  -->  00:01:13.729
opening intelliJ screen, make sure
26

26

00:01:13.729  -->  00:01:15.950
you have Kotlin selected on the left hand side
27

27

00:01:15.950  -->  00:01:17.360
because of course we want
28

28

00:01:17.360  -->  00:01:20.060
to create a Kotlin project and make sure you have
29

29

00:01:20.060  -->  00:01:23.300
Kotlin JVM selected on the right hand side,
30

30

00:01:23.300  -->  00:01:25.280
because we're targeting the JVM
31

31

00:01:25.280  -->  00:01:29.000
and then click Next. So, we're going to call
32

32

00:01:29.000  -->  00:01:33.950
the project 'HelloWorld'. Now there's a
33

33

00:01:33.950  -->  00:01:35.689
couple of other fields you can fill out
34

34

00:01:35.689  -->  00:01:38.180
if you want to. You can change where the
35

35

00:01:38.180  -->  00:01:41.180
project files will be stored, make sure
36

36

00:01:41.180  -->  00:01:44.299
you have an SDK set and enter the call
37

37

00:01:44.299  -->  00:01:46.880
and run time. At this point, there's only
38

38

00:01:46.880  -->  00:01:51.400
one option, so keep it at Kotlin Java runtime.
39

39

00:01:51.400  -->  00:01:53.900
Now, if this is the very first time
40

40

00:01:53.900  -->  00:01:55.100
you're creating a Kotlin project,
41

41

00:01:55.100  -->  00:01:56.960
your dialogue might look like this
42

42

00:01:56.960  -->  00:01:59.900
and what might happen when you click finish,
43

43

00:01:59.900  -->  00:02:01.189
is you might get an error
44

44

00:02:01.189  -->  00:02:04.500
that says something about a missing module name.
45

45

00:02:04.500  -->  00:02:05.869
That's what happened to me
46

46

00:02:05.869  -->  00:02:08.660
the very first time I created a Kotlin project,
47

47

00:02:08.660  -->  00:02:11.100
so, if you get that error open up the
48

48

00:02:11.100  -->  00:02:14.450
more settings and make sure this module name
49

49

00:02:14.450  -->  00:02:16.879
field is filled in and just fill it in
50

50

00:02:16.879  -->  00:02:18.560
to match the project name
51

51

00:02:18.560  -->  00:02:20.900
and then you'll be good to go.
52

52

00:02:20.900  -->  00:02:22.790
So for some reason once you've done this
53

53

00:02:22.790  -->  00:02:25.220
IntelliJ will automatically fill the
54

54

00:02:25.220  -->  00:02:27.830
module name in for you. From that point
55

55

00:02:27.830  -->  00:02:30.380
forward, so it only happened to me the
56

56

00:02:30.380  -->  00:02:32.660
very first time I created a project
57

57

00:02:32.660  -->  00:02:34.459
it might not happen to you, but just in case
58

58

00:02:34.459  -->  00:02:36.900
it does I thought I'd mention it.
59

59

00:02:36.900  -->  00:02:39.410
So once your dialogs all filled in, you can
60

60

00:02:39.410  -->  00:02:43.520
click finish, now if you had a project open
61

61

00:02:43.520  -->  00:02:45.709
you'll have a choice of opening the
62

62

00:02:45.709  -->  00:02:47.959
new project and in this window which
63

63

00:02:47.959  -->  00:02:50.300
will replace the project you have open or
64

64

00:02:50.300  -->  00:02:51.709
in a new window, I'm going to click this
65

65

00:02:51.709  -->  00:02:54.769
window and IntelliJ went ahead and
66

66

00:02:54.769  -->  00:02:57.200
created a Kotlin project for us.
67

67

00:02:57.200  -->  00:03:00.080
Let's go over to the project navigator and expand
68

68

00:03:00.080  -->  00:03:02.900
the project node and we'll see that it's
69

69

00:03:02.900  -->  00:03:05.120
a bare-bones project there's no files
70

70

00:03:05.120  -->  00:03:07.310
created for us, the only thing that we
71

71

00:03:07.310  -->  00:03:09.920
have is a source folder, so let's go
72

72

00:03:09.920  -->  00:03:11.660
ahead and create a package.
73

73

00:03:11.660  -->  00:03:13.900
We'll right-click on the source folder,
74

74

00:03:13.900  -->  00:03:17.180
we'll go to new, package and we'll call the
75

75

00:03:17.180  -->  00:03:22.200
academy.learnprogramming.helloworld
76

76

00:03:22.200  -->  00:03:27.900
and click OK and then we'll right-click on the package
77

77

00:03:27.900  -->  00:03:31.640
and we'll create a new Kotlin file or class
78

78

00:03:31.640  -->  00:03:33.079
we have a choice and this should be your
79

79

00:03:33.079  -->  00:03:34.549
first hint that there's something
80

80

00:03:34.549  -->  00:03:36.500
different about Kotlin and Java
81

81

00:03:36.500  -->  00:03:38.600
because we're being offered a choice of a file
82

82

00:03:38.600  -->  00:03:41.510
or a class here, we'll click on that
83

83

00:03:41.510  -->  00:03:45.170
and we'll call the file 'HelloWorld' and
84

84

00:03:45.170  -->  00:03:47.200
we're going to keep it at file for now,
85

85

00:03:47.200  -->  00:03:49.500
you can see that there's other things you can create,
86

86

00:03:49.500  -->  00:03:53.000
but for this little trivial application, we just need a file
87

87

00:03:53.000  -->  00:03:56.510
so we'll stick with that, click OK and now,
88

88

00:03:56.510  -->  00:03:58.310
if we expand the package we'll see that
89

89

00:03:58.310  -->  00:04:01.489
we have a HelloWorld.kt file and we'll
90

90

00:04:01.489  -->  00:04:04.880
see the name also up here on the tab,
91

91

00:04:04.880  -->  00:04:06.530
so now it's a good time to talk
92

92

00:04:06.530  -->  00:04:09.300
about what happens when you compile a Kotlin program,
93

93

00:04:09.300  -->  00:04:11.270
the Kotlin compiler which is
94

94

00:04:11.270  -->  00:04:14.300
called kotlinc takes files with the
95

95

00:04:14.300  -->  00:04:17.600
.kt extension as input and generates
96

96

00:04:17.600  -->  00:04:21.300
bytecode as .class files and at that
97

97

00:04:21.300  -->  00:04:23.300
point the .class files are equivalent
98

98

00:04:23.300  -->  00:04:26.000
to Java .class files, so essentially
99

99

00:04:26.000  -->  00:04:28.970
when you're working with Java, Java C
100

100

00:04:28.970  -->  00:04:32.600
the Java compiler compiles your .java files
101

101

00:04:32.600  -->  00:04:35.090
into .class files and when you're
102

102

00:04:35.090  -->  00:04:37.280
working with Kotlin, the Kotlin compiler,
103

103

00:04:37.280  -->  00:04:40.820
kotlinc compiles your Kotlin files,
104

104

00:04:40.820  -->  00:04:44.990
your .kt files into .class files
105

105

00:04:44.990  -->  00:04:47.400
and from that point forward, those .class
106

106

00:04:47.400  -->  00:04:49.500
files look the same to the JVM,
107

107

00:04:49.500  -->  00:04:51.800
so you run them on the JVM,
108

108

00:04:51.800  -->  00:04:53.900
the only difference and this is an
109

109

00:04:53.900  -->  00:04:55.790
important difference, is that when you're
110

110

00:04:55.790  -->  00:04:58.250
running a Kotlin application,
111

111

00:04:58.250  -->  00:05:00.900
you're going to need the Kotlin runtime library
112

112

00:05:00.900  -->  00:05:02.570
so if you're going to distribute
113

113

00:05:02.570  -->  00:05:04.580
your Kotlin application, you also have to
114

114

00:05:04.580  -->  00:05:09.370
distribute the Kotlin runtime library.
115

115

00:05:09.370  -->  00:05:11.169
Okay, so now let's write our hello world
116

116

00:05:11.169  -->  00:05:14.500
application, I'll just add a blank line here.
117

117

00:05:14.500  -->  00:05:15.730
So, we're going to create the
118

118

00:05:15.730  -->  00:05:17.830
main function here and the IDE will help us
119

119

00:05:17.830  -->  00:05:19.810
out with this line if we type main
120

120

00:05:19.810  -->  00:05:21.190
and then hit enter,
121

121

00:05:21.190  -->  00:05:24.500
it will actually create the function for us.
122

122

00:05:24.500  -->  00:05:25.630
I'll just click here to get rid of
123

123

00:05:25.630  -->  00:05:27.490
that light bulb so we can see it
124

124

00:05:27.490  -->  00:05:30.100
and let's point out a few things about
125

125

00:05:30.100  -->  00:05:32.600
this function. Okay, so our first important
126

126

00:05:32.600  -->  00:05:34.330
difference between Kotlin and Java is
127

127

00:05:34.330  -->  00:05:36.970
this function isn't within a class,
128

128

00:05:36.970  -->  00:05:40.800
so, we're able to have code outside classes
129

129

00:05:40.800  -->  00:05:42.430
when we compile the application,
130

130

00:05:42.430  -->  00:05:44.470
the compiler will create a class under the
131

131

00:05:44.470  -->  00:05:47.440
covers for us, so it's not really that
132

132

00:05:47.440  -->  00:05:49.500
we can have code outside of classes,
133

133

00:05:49.500  -->  00:05:52.450
it's just that when we're writing the code,
134

134

00:05:52.450  -->  00:05:54.820
we don't have to explicitly include
135

135

00:05:54.820  -->  00:05:57.250
the class definition, remember that one of
136

136

00:05:57.250  -->  00:05:58.930
the goals of Kotlin is to be more
137

137

00:05:58.930  -->  00:06:01.990
concise and to cut down on boilerplate code,
138

138

00:06:01.990  -->  00:06:03.490
and in this case when we have only
139

139

00:06:03.490  -->  00:06:05.410
one function why do we have to type in
140

140

00:06:05.410  -->  00:06:07.210
the class definition, the compiler is
141

141

00:06:07.210  -->  00:06:09.280
smart enough to know that we have
142

142

00:06:09.280  -->  00:06:11.020
to have this inside a class and it will
143

143

00:06:11.020  -->  00:06:13.700
generate the class under the covers for us,
144

144

00:06:13.700  -->  00:06:16.030
so, the function takes one argument
145

145

00:06:16.030  -->  00:06:18.200
called args it's an array of string.
146

146

00:06:18.200  -->  00:06:20.440
Does that sound familiar? Well, it should
147

147

00:06:20.440  -->  00:06:23.380
because that's the same signature as the
148

148

00:06:23.380  -->  00:06:25.389
main method for a java application and
149

149

00:06:25.389  -->  00:06:27.729
of course, that makes sense because
150

150

00:06:27.729  -->  00:06:29.200
we're going to be running this application
151

151

00:06:29.200  -->  00:06:31.450
on the JVM and the JVM is going to be
152

152

00:06:31.450  -->  00:06:36.050
looking for the usual main method signature is the entry point
153

153

00:06:36.050  -->  00:06:39.910
of the application, now the parameter
154

154

00:06:39.910  -->  00:06:41.740
declaration might look a little bit
155

155

00:06:41.740  -->  00:06:43.690
backwards to you, because we've got
156

156

00:06:43.690  -->  00:06:46.300
the name before the type and row, we'll cover
157

157

00:06:46.300  -->  00:06:49.090
this later in the course. Also you'll
158

158

00:06:49.090  -->  00:06:51.990
notice that the array is a capital A,
159

159

00:06:51.990  -->  00:06:54.990
it's a class, everything is a class in Kotlin,
160

160

00:06:54.990  -->  00:06:57.070
so there isn't an array with
161

161

00:06:57.070  -->  00:06:59.919
a lowercase a in Kotlin and you might
162

162

00:06:59.919  -->  00:07:01.870
have noticed there's no return type specified
163

163

00:07:01.870  -->  00:07:04.210
anywhere, we don't see void anywhere here
164

164

00:07:04.210  -->  00:07:06.160
and don't worry we're going to cover
165

165

00:07:06.160  -->  00:07:07.889
functions in detail later in the course
166

166

00:07:07.889  -->  00:07:10.479
for now all you have to understand
167

167

00:07:10.479  -->  00:07:12.130
is that we've declared the main function
168

168

00:07:12.130  -->  00:07:14.139
and it has the same signature as the
169

169

00:07:14.139  -->  00:07:17.139
main method in a java application.
170

170

00:07:17.139  -->  00:07:19.479
Now, functions defined outside classes are
171

171

00:07:19.479  -->  00:07:22.700
called top-level functions, so this main function
172

172

00:07:22.700  -->  00:07:23.990
is a top-level function
173

173

00:07:23.990  -->  00:07:25.569
because it's not explicitly
174

174

00:07:25.569  -->  00:07:28.240
defined within a class. Okay, so all we
175

175

00:07:28.240  -->  00:07:29.860
have left to do is to actually print
176

176

00:07:29.860  -->  00:07:36.400
'hello world' so let's do that,
177

177

00:07:36.400  -->  00:07:38.169
and this should look familiar to you,
178

178

00:07:38.169  -->  00:07:39.879
the only difference between this and what you'd
179

179

00:07:39.879  -->  00:07:41.700
write in Java actually there are two
180

180

00:07:41.700  -->  00:07:44.400
differences the first one is we're using
181

181

00:07:44.400  -->  00:07:48.500
print line rather than system.out.println and the
182

182

00:07:48.500  -->  00:07:51.189
second difference is no semicolon at the end of the line
183

183

00:07:51.189  -->  00:07:54.729
and we'll go over this later,
184

184

00:07:54.729  -->  00:07:57.669
in the course! So, let's go ahead and run.
185

185

00:07:57.669  -->  00:07:59.919
There are several ways we can do this,
186

186

00:07:59.919  -->  00:08:02.339
we can come to the K that's next to the
187

187

00:08:02.339  -->  00:08:06.300
function and click on it and select run,
188

188

00:08:06.300  -->  00:08:09.599
from here we can also right click
189

189

00:08:09.599  -->  00:08:13.779
and select run from this menu or we can go
190

190

00:08:13.779  -->  00:08:17.830
up to run select run here and then this
191

191

00:08:17.830  -->  00:08:20.169
line here in the selection will actually
192

192

00:08:20.169  -->  00:08:22.419
run the application for us, I'm just
193

193

00:08:22.419  -->  00:08:26.459
going to do it using the K, so I'll run
194

194

00:08:26.459  -->  00:08:29.439
our application is compiling and then
195

195

00:08:29.439  -->  00:08:31.900
we see hello world written to the console.
196

196

00:08:31.900  -->  00:08:34.539
Now, after you run an application for the
197

197

00:08:34.539  -->  00:08:36.519
first time, you'll notice that up here on
198

198

00:08:36.519  -->  00:08:38.199
the toolbar you now have what's called
199

199

00:08:38.199  -->  00:08:40.419
the run configuration and from this
200

200

00:08:40.419  -->  00:08:41.979
point forward, if you want to run the
201

201

00:08:41.979  -->  00:08:43.659
application, you just have to click on
202

202

00:08:43.659  -->  00:08:46.089
the green arrow and this is my preferred
203

203

00:08:46.089  -->  00:08:50.470
method because often the main function
204

204

00:08:50.470  -->  00:08:52.800
won't be on the screen or it might even
205

205

00:08:52.800  -->  00:08:55.089
be in a different file so it's quicker.
206

206

00:08:55.089  -->  00:08:56.889
a lot of the times to just click the green
207

207

00:08:56.889  -->  00:08:59.260
arrow here, which I'm doing now and it'll
208

208

00:08:59.260  -->  00:09:01.700
just run the application again.
209

209

00:09:01.700  -->  00:09:03.579
So, congratulations you've just written
210

210

00:09:03.579  -->  00:09:05.800
and run your first Kotlin program and don't
211

211

00:09:05.800  -->  00:09:07.209
worry we're going to go over everything
212

212

00:09:07.209  -->  00:09:10.500
that you see in the code, in more detail
213

213

00:09:10.500  -->  00:09:11.900
later in the course.
214

214

00:09:11.900  -->  00:09:15.089
I'll see you in the next video!
