WEBVTT
1
00:00:05.680 --> 00:00:06.100
All right.

2
00:00:06.100 --> 00:00:10.740
So let's continue our look at inheritance Now before we go on.

3
00:00:10.780 --> 00:00:13.820
There's one important thing you have to understand here.

4
00:00:13.900 --> 00:00:16.520
Override also means open.

5
00:00:16.600 --> 00:00:22.600
So when you use the override key word you're also saying that the function is open and so subclasses

6
00:00:22.600 --> 00:00:24.970
can continue to override that function.

7
00:00:25.210 --> 00:00:30.390
So what happens if you don't want that you know you have a function for example in laser printer lets

8
00:00:30.490 --> 00:00:40.120
say we like the way print model is printing out the model name for laser printers and we want all subclasses

9
00:00:40.120 --> 00:00:44.310
of laser printer to use that version of the print model function.

10
00:00:44.350 --> 00:00:46.240
We want them all to print the name in the same way.

11
00:00:46.240 --> 00:00:48.090
So how will we do that.

12
00:00:48.260 --> 00:00:50.460
Well let's add a subclass.

13
00:00:50.470 --> 00:00:54.860
So we're going to add a subclass called special laser printer.

14
00:00:55.420 --> 00:01:08.360
So I say class special laser printer and it'll just extend laser printer.

15
00:01:08.440 --> 00:01:14.200
Now of course we're going to get some errors here a couple of errors that we had before so you should

16
00:01:14.200 --> 00:01:15.100
know how to fix these.

17
00:01:15.100 --> 00:01:20.530
Now we have a constructor error and a this class cannot be inherited from error.

18
00:01:20.530 --> 00:01:29.560
So the easiest fix is to declare this class open that takes care of the class can't be inherited from.

19
00:01:29.560 --> 00:01:31.500
So now we just have the constructor error.

20
00:01:31.510 --> 00:01:34.970
And of course we're not calling the primary constructor.

21
00:01:34.990 --> 00:01:37.820
And when we extend a class we have to do that.

22
00:01:37.870 --> 00:01:51.400
So let's add a model name string and we'll have to pass that up to the superclasses primary constructor.

23
00:01:51.400 --> 00:01:53.660
So now all of our errors are gone.

24
00:01:53.950 --> 00:02:04.840
OK so right now we can overwrite this print model and we can say override fine print model print line.

25
00:02:04.870 --> 00:02:08.220
You know this is my way of doing it.

26
00:02:08.350 --> 00:02:09.600
Not very helpful.

27
00:02:09.670 --> 00:02:11.790
And we don't want that to be able to happen.

28
00:02:11.800 --> 00:02:15.970
We actually want all the subclasses of laser printer to use its version.

29
00:02:15.970 --> 00:02:17.200
So how do we do that.

30
00:02:17.200 --> 00:02:23.290
Well this is one case where you have to explicitly use the final keyword.

31
00:02:23.680 --> 00:02:30.010
So if you want the buck to stop here for a print model you don't want any of the subclasses to be able

32
00:02:30.010 --> 00:02:31.410
to override it.

33
00:02:31.420 --> 00:02:38.020
Then you stick the final keyword in front and now right away we're going to get an error here saying

34
00:02:38.020 --> 00:02:43.480
that print model and laser printer is fine all and cannot be overridden.

35
00:02:43.480 --> 00:02:47.130
So we'll just get rid of this.

36
00:02:47.200 --> 00:02:54.160
So that's one instance it's one case where you have to explicitly say that something is final because

37
00:02:54.160 --> 00:02:58.930
this override key word implicitly includes open.

38
00:02:58.930 --> 00:03:03.520
So once you've overridden something you're also saying that it's open and if you don't want that you've

39
00:03:03.520 --> 00:03:04.950
got to declare it as final.

40
00:03:04.950 --> 00:03:10.090
All right so getting back to the constructors the primary constructor signatures for the parent and

41
00:03:10.090 --> 00:03:12.590
child classes don't have to match.

42
00:03:12.760 --> 00:03:15.470
Like right now we have them all matching.

43
00:03:15.490 --> 00:03:21.610
They're all taking a model name so let's add another parameter to the laser printers primary constructor

44
00:03:21.610 --> 00:03:23.210
and we'll add an integer.

45
00:03:23.210 --> 00:03:27.420
That is for the number of pages that can be printed per minute.

46
00:03:27.430 --> 00:03:31.990
So we'll say Peepy am in.

47
00:03:32.470 --> 00:03:35.520
And you can see that we don't get any errors here.

48
00:03:36.860 --> 00:03:43.570
But now of course we have an error where we create the instance because we're not passing the page per

49
00:03:43.570 --> 00:03:44.650
minute parameter.

50
00:03:44.650 --> 00:03:49.200
So let's just say this laser printer can print 15 pages per minute.

51
00:03:49.220 --> 00:03:50.850
Now that error goes away.

52
00:03:51.100 --> 00:03:57.520
So this is just to show you that you don't have to match constructor signatures and we saw that before

53
00:03:57.520 --> 00:04:00.370
when we were looking at classes and constructors as well.

54
00:04:00.370 --> 00:04:03.700
Now this is kind of silly right now because we're not actually doing anything with this.

55
00:04:03.700 --> 00:04:07.020
We haven't declared it as a property so it's just being swallowed up.

56
00:04:07.030 --> 00:04:08.590
Right now nothing's happening.

57
00:04:08.710 --> 00:04:13.690
Now when we were looking at classes in constructors we also said that secondary constructors aren't

58
00:04:13.690 --> 00:04:17.780
required as often as they are in Java because of default parameter values.

59
00:04:17.890 --> 00:04:21.430
But let's say we have a secondary constructor in the printer class.

60
00:04:21.430 --> 00:04:27.880
How would we call the secondary constructor from one of the printer classes subclasses.

61
00:04:27.880 --> 00:04:33.490
You can't call a super secondary constructor if you have a primary constructor.

62
00:04:33.550 --> 00:04:34.210
Why not.

63
00:04:34.210 --> 00:04:38.820
Because every constructor has to delegate to the primary constructor.

64
00:04:38.920 --> 00:04:40.380
As we discussed earlier.

65
00:04:40.480 --> 00:04:47.410
So calling a super secondary constructor only makes sense if you don't have a primary constructor.

66
00:04:47.410 --> 00:04:53.560
And if you don't you'd call one of the Soopers secondary constructors by adding a colon in super after

67
00:04:53.560 --> 00:04:57.730
the child's constructor we saw that very briefly at one point.

68
00:04:57.790 --> 00:05:04.810
So because printer has a primary constructor even if it added a secondary constructor here you can't

69
00:05:04.910 --> 00:05:10.040
call that secondary constructor from the primary constructor because you've got to delegate back in

70
00:05:10.040 --> 00:05:14.400
in fact all of the secondary constructors have to delegate back to the primary constructor.

71
00:05:14.540 --> 00:05:21.150
So you can only really call a superclasses secondary constructor when no primary constructors are involved.

72
00:05:21.170 --> 00:05:25.560
So let's just create a couple of even sillier classes to demonstrate this.

73
00:05:25.570 --> 00:05:31.220
So let me just create some space here so you can see what I'm doing.

74
00:05:31.430 --> 00:05:36.460
So we'll say open class or something.

75
00:05:38.180 --> 00:05:40.860
And it's not going to have a primary constructor.

76
00:05:40.910 --> 00:05:48.780
Otherwise everything is going to have to delegate to it and it will say it has a property a string.

77
00:05:49.340 --> 00:05:52.450
And now we're going to create the constructor for this property.

78
00:05:52.460 --> 00:05:58.680
So we'll accept some parameters.

79
00:05:58.700 --> 00:06:01.050
It is also a string.

80
00:06:02.690 --> 00:06:06.500
And we'll just say some property equals an parameter.

81
00:06:06.500 --> 00:06:08.920
I did say these classes were going to be silly.

82
00:06:09.110 --> 00:06:13.590
Ok so now we want a class to subclass something.

83
00:06:13.820 --> 00:06:20.600
So this will be class something else and subclasses something.

84
00:06:21.560 --> 00:06:27.920
There's no deferring of constructor here because there isn't a primary constructor but we will see this

85
00:06:27.920 --> 00:06:31.450
type has a constructor and so it must be initialized here.

86
00:06:31.610 --> 00:06:40.280
Yes we're going to do that by providing a secondary constructor so we'll say some other parameter which

87
00:06:40.280 --> 00:06:41.440
is a string.

88
00:06:41.660 --> 00:06:51.620
And then here we'll pass this up to the secondary constructor of the superclass in a similar way that

89
00:06:51.620 --> 00:06:54.130
we do it for the primary constructor.

90
00:06:54.200 --> 00:06:57.130
So except here we're just calling it Super.

91
00:06:57.380 --> 00:07:04.200
So instead of having the name of the superclass here as we do up here we've got the name of the superclass

92
00:07:04.280 --> 00:07:09.540
and then the parameter that we're going to defer back up to the primary constructor of the superclass

93
00:07:09.560 --> 00:07:13.700
Instead we just use super here and pass it the parameter.

94
00:07:13.700 --> 00:07:19.580
Now again you can only do this if there is no primary constructor because when there is every constructor

95
00:07:19.580 --> 00:07:21.620
has to delegate to the primary constructor.

96
00:07:21.620 --> 00:07:27.710
So if we come up here and we say oh let's have a primary constructor After all we're declare a vowel

97
00:07:27.830 --> 00:07:32.400
X which is an end all of a sudden stuff starts happening here.

98
00:07:32.420 --> 00:07:34.810
This wants to call the primary constructor.

99
00:07:34.820 --> 00:07:39.750
So we'd have to go like this and we'd have to pass an in here.

100
00:07:40.090 --> 00:07:44.700
Why in. and call this with Y.

101
00:07:45.500 --> 00:07:50.950
Now we're having problems with our properties because the primary constructor isn't setting them.

102
00:07:51.350 --> 00:07:57.080
And this of course has a problem because it's saying it once in in now rather than a string and it wants

103
00:07:57.080 --> 00:08:03.370
that because it wants us to delegate to the primary constructor so we'd have to accept it here and as

104
00:08:03.380 --> 00:08:07.260
you can see so we'd say I said it.

105
00:08:07.700 --> 00:08:09.660
And then we're going to go Zad

106
00:08:13.820 --> 00:08:15.170
And then here we've put said

107
00:08:18.120 --> 00:08:23.820
so you can see that that also works for the primary constructor that we can call it using super rather

108
00:08:23.820 --> 00:08:25.620
than call it using the name.

109
00:08:25.680 --> 00:08:31.950
And now the reason that we're having this problem here is because we're not initializing this property

110
00:08:31.950 --> 00:08:36.580
in an attempt block and the primary constructor isn't doing it either.

111
00:08:36.630 --> 00:08:42.360
So it's not good enough to do it in the secondary constructor because all of the time the primary constructor

112
00:08:42.360 --> 00:08:48.800
is going to get called and the primary constructor is expected to initialize all the properties.

113
00:08:49.050 --> 00:08:55.590
So we'd have to probably what we'd want to do is add this property and declare it in a primary constructor.

114
00:08:55.590 --> 00:08:59.020
But if for some reason we didn't want to do that we'd actually have to initialize it here.

115
00:08:59.370 --> 00:09:02.620
And then this would cause problems here because it's a vowel.

116
00:09:02.790 --> 00:09:09.150
So now it's going to be initialized twice because the primary constructor is going to be called from

117
00:09:09.150 --> 00:09:12.530
here already and it's going to initialize it.

118
00:09:12.630 --> 00:09:18.900
So you can see why most of the time you only want a primary constructor and you really only want to

119
00:09:18.900 --> 00:09:22.430
start adding secondary constructors when it's absolutely necessary.

120
00:09:22.430 --> 00:09:28.170
So for a silly class like this we'd probably just move this property up here and just dump the secondary

121
00:09:28.260 --> 00:09:35.640
constructor completely like it would be really strange to accept a property value on a secondary constructor

122
00:09:35.640 --> 00:09:41.550
that the primary constructor isn't doing anything was that actually wouldn't make a lot of sense.

123
00:09:41.580 --> 00:09:44.830
So I was just showing you this for illustration purposes.

124
00:09:44.880 --> 00:09:51.450
But as you can see we can quickly get into trouble if we start trying to split the responsibility between

125
00:09:51.450 --> 00:09:53.810
the primary and secondary constructors.

126
00:09:53.850 --> 00:09:59.610
So in this case I would fix this by taking the secondary constructor away and sticking a property up

127
00:09:59.610 --> 00:10:00.170
there.

128
00:10:00.450 --> 00:10:03.750
Instead I'll just comment it out so we can get rid of errors.

129
00:10:03.780 --> 00:10:09.600
Actually I won't do that because I'm trying to show you primary in the use of secondary constructors

130
00:10:09.600 --> 00:10:16.970
rather So I'm going to bring that out instead I'm going to get rid of the primary constructor and setting

131
00:10:17.020 --> 00:10:23.830
the property here and all this stuff that has to do with primary constructors.

132
00:10:24.390 --> 00:10:30.770
Now some property string and yeah we don't need to do this anymore.

133
00:10:30.780 --> 00:10:35.510
We're just going to get away and go back to what we had before.

134
00:10:35.520 --> 00:10:41.250
The reason I've gone through all of that trouble is because I want to show you that you can of course

135
00:10:41.250 --> 00:10:46.160
include a function body with the secondary constructors.

136
00:10:46.170 --> 00:10:48.460
They don't just have to be simple like this.

137
00:10:48.480 --> 00:10:52.130
They're not like the primary constructors that can't have a body.

138
00:10:52.200 --> 00:10:55.670
So let's do that for the secondary constructor.

139
00:10:55.860 --> 00:11:03.960
So here we've already got one in the superclass but will out of print line here to print line line in

140
00:11:03.960 --> 00:11:12.640
a parents instructor and Milana body here now and say print line.

141
00:11:13.130 --> 00:11:19.440
I'm in the child's constructor.

142
00:11:19.650 --> 00:11:20.810
We still have an error here.

143
00:11:20.820 --> 00:11:21.910
No value pass.

144
00:11:21.930 --> 00:11:26.470
Oh yes thank you compiler for pointing that out to me.

145
00:11:26.910 --> 00:11:34.980
OK so what we expect to see if we create an instance of something else is we expect to see the I'm in

146
00:11:34.970 --> 00:11:42.400
the parent's constructor being run first and then we expect to see the child constructor print line.

147
00:11:42.420 --> 00:11:49.000
Because the super call is going to take place before the body of the child constructor runs.

148
00:11:49.260 --> 00:11:55.320
So let's create an instance in our main function to confirm what I just said.

149
00:11:55.440 --> 00:12:00.170
So logo's something else whatever.

150
00:12:00.630 --> 00:12:03.690
I contend that these classes are really deep.

151
00:12:03.690 --> 00:12:06.800
So let's run that we have an error or error.

152
00:12:06.810 --> 00:12:07.250
Now

153
00:12:11.530 --> 00:12:12.470
there we go.

154
00:12:12.490 --> 00:12:14.600
Everybody's happy now.

155
00:12:15.520 --> 00:12:16.690
OK so let's run

156
00:12:20.770 --> 00:12:29.200
and we'll see that the parent class's constructor runs first and then the child constructor runs so

157
00:12:29.410 --> 00:12:35.860
the second constructor defers to the parent constructor and then the it's own body runs.

158
00:12:35.860 --> 00:12:37.720
Now what about data classes.

159
00:12:37.720 --> 00:12:42.930
We looked at data classes not too long ago is there anything different about them when it comes to inheritance.

160
00:12:42.940 --> 00:12:45.160
Well let's have a look.

161
00:12:45.250 --> 00:12:54.190
So let's declare a new data class and just call it data class and we'll say it just has one property

162
00:12:54.740 --> 00:12:58.210
in it.

163
00:12:58.510 --> 00:13:03.910
And now let's declare this data class open because we want other classes to subclass it.

164
00:13:04.150 --> 00:13:10.150
Well we've already run into a problem it says modifier data is incompatible with open.

165
00:13:10.330 --> 00:13:14.500
And that's because data classes are closed tight.

166
00:13:14.500 --> 00:13:16.000
They can't be extended.

167
00:13:16.000 --> 00:13:20.200
In fact they can even be abstract or inner classes because that wouldn't make sense.

168
00:13:20.200 --> 00:13:25.900
Right if a data class exists just to store state then it doesn't make sense to have it as an abstract

169
00:13:25.900 --> 00:13:27.940
class or an inner class.

170
00:13:27.940 --> 00:13:34.500
Now they can extend other classes but when it comes to inheritance the buck stops right with them.

171
00:13:34.510 --> 00:13:41.380
Now having said that some of the restrictions on data classes were relaxed between Cottman 1.0 and 1.1

172
00:13:41.740 --> 00:13:49.000
for example and 1.1 they couldn't extend other classes and now they can and in Katlin 1.0 they couldn't

173
00:13:49.000 --> 00:13:50.500
contain functions.

174
00:13:50.560 --> 00:13:54.870
The Catlin team relaxed that all those restrictions and Cartland 1.1.

175
00:13:54.880 --> 00:13:56.670
So maybe there will be more changes.

176
00:13:56.710 --> 00:14:01.570
Or maybe not but it's something to keep your eye on if you want to work with data classes and you're

177
00:14:01.570 --> 00:14:03.890
hoping at some point to be able to extend them.

178
00:14:04.120 --> 00:14:08.130
OK I'm going to start the video here and when we come back we'll take a look at interfaces.
