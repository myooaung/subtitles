1
1

00:00:01,030  -->  00:00:04,680
[Music]
2

2

00:00:04,680  -->  00:00:07,080
Okay I just wanted to do a quick video
3

3

00:00:07,080  -->  00:00:10,440
on type aliases, because they're related
4

4

00:00:10,440  -->  00:00:13,230
to variable declarations type aliases
5

5

00:00:13,230  -->  00:00:16,289
were introduced in Kotlin 1.1 and they
6

6

00:00:16,289  -->  00:00:18,330
let you use another name for an existing
7

7

00:00:18,330  -->  00:00:20,310
type, maybe the name will make more sense
8

8

00:00:20,310  -->  00:00:21,570
for how you're using it in your
9

9

00:00:21,570  -->  00:00:24,060
application or maybe you just want to
10

10

00:00:24,060  -->  00:00:27,150
save on typing because as we know by now,
11

11

00:00:27,150  -->  00:00:29,310
Kotlin really really wants to cut down
12

12

00:00:29,310  -->  00:00:31,199
on the amount of typing we do and type
13

13

00:00:31,199  -->  00:00:34,020
aliases are another way to do it. They're
14

14

00:00:34,020  -->  00:00:35,730
especially useful when dealing with
15

15

00:00:35,730  -->  00:00:39,030
generic types. Now one thing to stress is
16

16

00:00:39,030  -->  00:00:42,420
type aliases or an alias for an existing
17

17

00:00:42,420  -->  00:00:45,180
data type, so when you use them you're
18

18

00:00:45,180  -->  00:00:46,920
not creating a brand new data type,
19

19

00:00:46,920  -->  00:00:49,590
you're basically just assigning an alias
20

20

00:00:49,590  -->  00:00:52,200
to an existing data type. So let's take a
21

21

00:00:52,200  -->  00:00:54,060
look at string builder, because that's
22

22

00:00:54,060  -->  00:00:57,030
actually type alias in Kotlin. So if I
23

23

00:00:57,030  -->  00:01:01,290
type in string builder, and then I'm
24

24

00:01:01,290  -->  00:01:04,909
going to go to the declaration and
25

25

00:01:04,909  -->  00:01:07,950
you'll see that the declaration is a
26

26

00:01:07,950  -->  00:01:11,500
type alias and also it says since Kotlin 1.1
27

27

00:01:11,500  -->  00:01:12,240
because as I mentioned they were
28

28

00:01:12,240  -->  00:01:16,140
type aliases were only introduced in Kotlin 1.1.
29

29

00:01:16,140  -->  00:01:18,570
So, we have string builder and it's
30

30

00:01:18,570  -->  00:01:21,990
actually an alias for java.lang.stringbuilder.
31

31

00:01:21,990  -->  00:01:23,280
So what this means is
32

32

00:01:23,280  -->  00:01:25,320
whenever you use string builder in your
33

33

00:01:25,320  -->  00:01:27,659
common code you're actually using our
34

34

00:01:27,659  -->  00:01:31,900
good friend java.lang.stringbuilder.
35

35

00:01:31,900  -->  00:01:33,390
Kotlin does not have its own
36

36

00:01:33,390  -->  00:01:35,640
string builder class, so let's say that
37

37

00:01:35,640  -->  00:01:38,430
we use a set of employee throughout our
38

38

00:01:38,430  -->  00:01:40,470
application and we don't like to type
39

39

00:01:40,470  -->  00:01:43,440
set angle bracket employee for some
40

40

00:01:43,440  -->  00:01:44,940
reason, we just want to be able to type
41

41

00:01:44,940  -->  00:01:47,370
employee set or maybe even just
42

42

00:01:47,370  -->  00:01:50,880
employees. So we'd want to declare a type
43

43

00:01:50,880  -->  00:01:52,500
alias for that, I'm going to get rid of
44

44

00:01:52,500  -->  00:01:55,830
this and this just because I don't like
45

45

00:01:55,830  -->  00:01:58,770
to see errors, you always declare type
46

46

00:01:58,770  -->  00:02:01,260
aliases at the top level so you declare
47

47

00:02:01,260  -->  00:02:05,880
them outside of any functions or classes
48

48

00:02:05,880  -->  00:02:09,330
and as you saw, you just type type alias
49

49

00:02:09,330  -->  00:02:13,680
and then you type the alias that you
50

50

00:02:13,680  -->  00:02:16,450
want to use so we want to use employee set
51

51

00:02:18,060  -->  00:02:21,000
and then you just need to put equals and
52

52

00:02:21,000  -->  00:02:24,810
then the type that you are creating
53

53

00:02:24,810  -->  00:02:28,260
alias for. So we're saying that in this
54

54

00:02:28,260  -->  00:02:33,270
file wherever we would use set employee,
55

55

00:02:33,270  -->  00:02:35,489
we just want to type employee set for
56

56

00:02:35,489  -->  00:02:37,020
some reason we hate typing these angle
57

57

00:02:37,020  -->  00:02:39,180
brackets and then we can go ahead and
58

58

00:02:39,180  -->  00:02:41,160
start using it like we can say you know
59

59

00:02:41,160  -->  00:02:48,270
val employees of type employee set and
60

60

00:02:48,270  -->  00:02:51,510
you'll see that the intelli sense that
61

61

00:02:51,510  -->  00:02:54,060
comes up knows about these type aliases
62

62

00:02:54,060  -->  00:02:56,820
and so IntelliJ is now smart enough to
63

63

00:02:56,820  -->  00:02:59,040
suggest this type to you so you can
64

64

00:02:59,040  -->  00:03:01,990
start using it just like any other data type.
65

65

00:03:01,990  -->  00:03:04,019
Now, if you wanted to use your type
66

66

00:03:04,019  -->  00:03:06,209
alias outside this file, you'd have to
67

67

00:03:06,209  -->  00:03:08,670
import it into any files where you want
68

68

00:03:08,670  -->  00:03:10,990
it to use it, that's just par for the course.
69

69

00:03:10,990  -->  00:03:14,540
I'll see you in the next video!
