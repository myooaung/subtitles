WEBVTT
1
1

00:00:04.740  -->  00:00:07.259
One of the great things about Kotlin and
2

2

00:00:07.259  -->  00:00:09.360
in fact one of its sort of guiding
3

3

00:00:09.360  -->  00:00:12.030
principles is that it's interoperable
4

4

00:00:12.030  -->  00:00:13.770
with Java and we've seen some of that
5

5

00:00:13.770  -->  00:00:16.410
already. Now if you want to convert a
6

6

00:00:16.410  -->  00:00:18.539
java application to Kotlin you don't
7

7

00:00:18.539  -->  00:00:20.279
have to do it all at once because
8

8

00:00:20.279  -->  00:00:22.440
Kotlin and Java are interoperable,
9

9

00:00:22.440  -->  00:00:24.840
you can convert it a little at a time.
10

10

00:00:24.840  -->  00:00:27.060
So we've seen that it's pretty easy to use
11

11

00:00:27.060  -->  00:00:29.699
java classes from within Kotlin, but I've
12

12

00:00:29.699  -->  00:00:32.430
also occasionally said that when calling
13

13

00:00:32.430  -->  00:00:34.469
Java you have to do something a little
14

14

00:00:34.469  -->  00:00:36.660
different. For example, we looked at the
15

15

00:00:36.660  -->  00:00:38.670
special primitive type arrays that you
16

16

00:00:38.670  -->  00:00:40.500
have to use when you want to call a Java
17

17

00:00:40.500  -->  00:00:42.390
method that's expecting a primitive
18

18

00:00:42.390  -->  00:00:45.390
array argument. So sometimes you do have
19

19

00:00:45.390  -->  00:00:47.070
to do something special when you want to
20

20

00:00:47.070  -->  00:00:49.320
call Java and in this section we're also
21

21

00:00:49.320  -->  00:00:51.750
going to look at calling Kotlin from
22

22

00:00:51.750  -->  00:00:53.760
Java rather than calling Java from
23

23

00:00:53.760  -->  00:00:56.480
Kotlin as we've often been doing.
24

24

00:00:56.480  -->  00:00:59.670
Also there are times where the Kotlin
25

25

00:00:59.670  -->  00:01:02.399
compiler is doing something by default
26

26

00:01:02.399  -->  00:01:04.949
and you want it to do something a little
27

27

00:01:04.949  -->  00:01:07.049
differently when you're intending to
28

28

00:01:07.049  -->  00:01:09.450
call Kotlin from Java, as you're going to
29

29

00:01:09.450  -->  00:01:11.460
find out in this section, you can
30

30

00:01:11.460  -->  00:01:13.380
influence the compilers behavior by
31

31

00:01:13.380  -->  00:01:16.260
using annotations, so in this section,
32

32

00:01:16.260  -->  00:01:18.960
we're going to call Kotlin from Java and
33

33

00:01:18.960  -->  00:01:21.360
we're going to call Java from Kotlin and
34

34

00:01:21.360  -->  00:01:23.700
we're going to look at things that you
35

35

00:01:23.700  -->  00:01:25.770
need to be aware of when you're mixing
36

36

00:01:25.770  -->  00:01:30.409
Java and Kotlin. So let's get started.
