WEBVTT
1
00:00:05.530 --> 00:00:06.050
All right.

2
00:00:06.050 --> 00:00:12.650
So we've come full circle and now we're back at the text adventure application that I converted right

3
00:00:12.650 --> 00:00:17.240
at the top of the course and we're going to take a look at the code now that you've watched the videos

4
00:00:17.240 --> 00:00:17.940
hopefully.

5
00:00:17.960 --> 00:00:22.950
And you know a lot more about cotland than you did when you first watch me convert the application.

6
00:00:22.970 --> 00:00:27.740
So we're going to start with the Location class and you'll remember that this class stores information

7
00:00:27.740 --> 00:00:31.070
about a location and this is fairly straightforward.

8
00:00:31.250 --> 00:00:33.780
You now know what a data class is.

9
00:00:33.890 --> 00:00:36.050
I didn't have to make this a data class.

10
00:00:36.050 --> 00:00:41.000
We don't take advantage of any of the free functionality that a data class gives us.

11
00:00:41.000 --> 00:00:47.300
We're not using to string or equals we're not using any of the component end functions because we we

12
00:00:47.300 --> 00:00:52.760
never do structure instances of this class but it is a class that just store state.

13
00:00:52.790 --> 00:00:56.800
And so I think data class is appropriate for this class.

14
00:00:56.810 --> 00:01:02.540
So all we're doing here is declaring the location ID and description properties and then and we're declaring

15
00:01:02.540 --> 00:01:08.060
the exits property inside the class and that makes sense because there's no reason for users of this

16
00:01:08.060 --> 00:01:10.800
class to know how we're implementing exits.

17
00:01:10.910 --> 00:01:16.460
And if we did declare exits up here then the caller would have to pass us the map and again that doesn't

18
00:01:16.460 --> 00:01:17.740
really make a lot of sense.

19
00:01:17.750 --> 00:01:26.870
So we take care of declaring the property and initializing the map inside the class and then as we know

20
00:01:26.870 --> 00:01:35.450
the init block will run after all the properties have been initialized and it's here that we add our

21
00:01:35.540 --> 00:01:41.480
quick direction into our exits map and then we just have the function the ADD exit function that takes

22
00:01:41.480 --> 00:01:45.060
a direction and a destination ID and adds those to the map.

23
00:01:45.200 --> 00:01:50.470
And now you know that you can use the square bracket notation to work with the maps.

24
00:01:50.480 --> 00:01:56.780
But if you use put her get that's just as good remember that you know in Katlin one way isn't better

25
00:01:56.780 --> 00:01:57.510
than the other.

26
00:01:57.560 --> 00:02:02.720
And if you work at a company you may have a style guide that tells you when you're dealing with maps

27
00:02:02.720 --> 00:02:05.990
use the methods or when you're using with maps use the square brackets.

28
00:02:05.990 --> 00:02:12.200
The important thing is to be consistent don't use the methods in one place in a file and square brackets

29
00:02:12.200 --> 00:02:12.920
in another place.

30
00:02:12.920 --> 00:02:14.430
Just be consistent.

31
00:02:14.630 --> 00:02:16.870
OK now let's take a look at the locations class.

32
00:02:16.880 --> 00:02:21.950
This is a class that's a reading in the two data files for this application and this should look really

33
00:02:22.100 --> 00:02:27.350
simple to you now and you should understand this especially since we covered audio not too long ago.

34
00:02:27.500 --> 00:02:32.600
So this code is just using the extension functions that cotland has added to the IO classes.

35
00:02:32.600 --> 00:02:34.940
There's nothing else remarkable here.

36
00:02:35.030 --> 00:02:40.310
This is just an instance of Java IO dot file and then we're using an extension function to create a

37
00:02:40.310 --> 00:02:45.240
reader and another extension function to call the for each line function.

38
00:02:45.240 --> 00:02:51.380
You know when you now understand what it is that in this context each line in the file will be substituted

39
00:02:51.380 --> 00:02:51.860
for it.

40
00:02:51.860 --> 00:02:54.500
So this is really a loop under the covers.

41
00:02:54.770 --> 00:02:58.390
And then here is straightforward we're just creating an instance of location.

42
00:02:58.400 --> 00:03:05.720
And once again we're using the square bracket notation to work with the map here and we're just essentially

43
00:03:05.780 --> 00:03:10.780
creating a map entry and we're doing the exact same thing in follow directions underscore big.

44
00:03:10.790 --> 00:03:14.320
The only wrinkle here is we're using the safe call operator here.

45
00:03:14.510 --> 00:03:19.550
So it's possible if there is you know something wrong in our data files it's possible that we might

46
00:03:19.550 --> 00:03:30.530
have a line in the directions underscore a big T x t file that has a current location that doesn't correspond

47
00:03:30.530 --> 00:03:35.450
to a location in our locations underscore a big text file.

48
00:03:35.450 --> 00:03:41.960
And if that's the case this essentially becomes a no op because if this brings back no nothing's going

49
00:03:41.960 --> 00:03:42.980
to happen.

50
00:03:43.070 --> 00:03:49.970
So if it turns out that we have access directions in our directions file and there are no locations

51
00:03:49.970 --> 00:03:52.870
for them then they just don't get added to the map.

52
00:03:52.880 --> 00:03:55.120
So this is to protect against knowl.

53
00:03:55.160 --> 00:04:02.000
And as we know now the safe call operator will evaluate to know if whatever's on the left hand side

54
00:04:02.000 --> 00:04:03.300
turns out to be No.

55
00:04:03.590 --> 00:04:07.870
And so this whole thing would just evaluate to knowl And essentially it's a no up.

56
00:04:07.910 --> 00:04:08.300
All right.

57
00:04:08.300 --> 00:04:11.570
So that leaves our main file.

58
00:04:11.570 --> 00:04:17.450
Nothing earth shattering going on here except we need to use a VAR here because we reassign it down

59
00:04:17.450 --> 00:04:18.020
here.

60
00:04:18.290 --> 00:04:23.150
So you might have been wondering about that when you first watch me convert the application.

61
00:04:23.150 --> 00:04:26.390
Why is Val here in fire here and what do they mean.

62
00:04:26.450 --> 00:04:33.200
And then the first real funky thing I did was this Elvis operator explained it a little bit when I converted

63
00:04:33.230 --> 00:04:33.890
the code.

64
00:04:33.890 --> 00:04:39.320
But essentially what I'm doing here is once again trying to protect against Nalls because if I don't

65
00:04:39.320 --> 00:04:45.440
use the Alva's operator here if I don't assign a default then everywhere I use location throughout the

66
00:04:45.440 --> 00:04:50.990
rest of this code I'd have to use a safe call operator and I didn't want to do that for two reasons.

67
00:04:50.990 --> 00:04:53.880
First of all it can kind of clutter the code a bit.

68
00:04:53.900 --> 00:04:58.840
And in this case especially in this is the second reason I'm pretty sure we're never going to get Knol

69
00:04:58.900 --> 00:05:05.920
back from here because if read location info executed correctly we didn't get any exceptions thrown

70
00:05:06.250 --> 00:05:13.840
then there's no reason why we should look up a location ID in our map and not get a location instance

71
00:05:13.840 --> 00:05:16.890
because we're the ones that populated this map.

72
00:05:16.930 --> 00:05:21.940
We never in here at a location ID without adding your location in science.

73
00:05:21.940 --> 00:05:24.350
So essentially this should never happen.

74
00:05:24.400 --> 00:05:26.030
We should never get back.

75
00:05:26.320 --> 00:05:31.740
So if we do it for some strange reason we do then something weird has happened.

76
00:05:31.990 --> 00:05:38.380
And in that case we want to just stop the game and that's why I've chosen here to set the default to

77
00:05:38.530 --> 00:05:42.360
a location in that has an ID of an idea of zero.

78
00:05:42.400 --> 00:05:44.410
Because that will cause us to break out of the loop.

79
00:05:44.440 --> 00:05:49.060
And then this is the description and of course that would get printed out here but this should never

80
00:05:49.060 --> 00:05:49.860
happen.

81
00:05:49.900 --> 00:05:54.820
And so I use the Elvis operator so I wouldn't have to use the safe call operator throughout the rest

82
00:05:54.820 --> 00:06:00.580
of the code whenever I use location but there would have been nothing wrong with me doing that.

83
00:06:00.700 --> 00:06:02.070
I didn't have to do this step.

84
00:06:02.080 --> 00:06:08.680
This was just something that I wanted to do if another developer decided that no they would rather just

85
00:06:08.680 --> 00:06:13.180
go ahead and in fact you could go ahead and use locations locate where it would be a little bit more

86
00:06:13.180 --> 00:06:15.820
and efficient because you'd have to do the map look up every time.

87
00:06:15.820 --> 00:06:19.360
But you know it's a small small map in a small application.

88
00:06:19.360 --> 00:06:21.200
So in this case it wouldn't really matter.

89
00:06:21.280 --> 00:06:25.870
But another developer might decide that no they're just going to go ahead and use the save call operator

90
00:06:25.870 --> 00:06:31.600
everywhere part of the reason I did this too was to bring up the Elvis operator when I was converting

91
00:06:31.600 --> 00:06:33.040
the application.

92
00:06:33.040 --> 00:06:34.710
OK so nothing special here.

93
00:06:34.720 --> 00:06:36.240
Nothing special here.

94
00:06:36.430 --> 00:06:38.830
Now you understand what this is doing.

95
00:06:38.830 --> 00:06:44.350
This is one way of writing this loop we could have also written it in a way that structured every map

96
00:06:44.350 --> 00:06:45.100
entry.

97
00:06:45.400 --> 00:06:49.850
And in here you now know what a string template is you know what that dollar sign is doing.

98
00:06:49.870 --> 00:06:55.520
And also in this context it will be each key in the map.

99
00:06:55.540 --> 00:07:00.750
So each key in the map which in this case is our direction letters is going to be substituted in here.

100
00:07:00.850 --> 00:07:09.040
We're using the same call and the Elvis operators again and we know that if this turns out to be normal

101
00:07:09.130 --> 00:07:15.520
on the left hand side that this would evaluate to normal and in that case because now the left hand

102
00:07:15.520 --> 00:07:19.510
side of the Elvis operator would be no ZAGG would be assigned to direction.

103
00:07:19.510 --> 00:07:26.050
So once again I'm just saying here that if this is all assign a default value because I really don't

104
00:07:26.050 --> 00:07:29.290
think it's good form down here to be looking up you know key.

105
00:07:29.290 --> 00:07:32.010
So that was the way I chose to do it.

106
00:07:32.020 --> 00:07:34.540
I know that Zad is going to fail this condition.

107
00:07:34.540 --> 00:07:39.040
And so that would just tell the user you can't go in that direction and we have to pop back around the

108
00:07:39.040 --> 00:07:39.690
loop.

109
00:07:39.730 --> 00:07:45.760
So yeah the final thing we do is nothing special here except for the non-knowledge assertion so we checked

110
00:07:45.760 --> 00:07:50.800
to see if our exits map has that direction whenever the user gave us.

111
00:07:50.800 --> 00:07:55.100
And if it does then we look at the destination ID.

112
00:07:55.120 --> 00:08:00.520
Now I use a not null assertion operator here because as I explained when I was converting the code I

113
00:08:00.520 --> 00:08:03.600
am absolutely sure this is not going to be novel.

114
00:08:03.610 --> 00:08:07.330
I mean we've already checked to see if the exits map contains the key.

115
00:08:07.330 --> 00:08:12.850
And once again we're the ones that populated this map so we know that if there's a key for that direction

116
00:08:12.850 --> 00:08:17.330
there is going to be a non-null location ID there's going to be an entry.

117
00:08:17.560 --> 00:08:23.440
And so I'm confident here using the not the assertion of course every time you use this as the potential

118
00:08:23.440 --> 00:08:27.580
for shooting yourself in the foot but I'm confident that I'm not going to do that here.

119
00:08:27.580 --> 00:08:35.710
Now if I took this away Katlin does complain because in this case it's saying while it is possible because

120
00:08:35.710 --> 00:08:40.450
you are looking something up in a map it is possible you're going to get it all back.

121
00:08:40.450 --> 00:08:49.250
So in this case I decided to solve it this way because I'm confident that this is not going to be no.

122
00:08:49.630 --> 00:08:50.360
And that's it.

123
00:08:50.410 --> 00:08:51.770
I mean we go back to the top.

124
00:08:51.780 --> 00:08:53.080
Rinse and repeat.

125
00:08:53.290 --> 00:08:58.700
So really apart from protecting against Nalls this code is pretty straightforward.

126
00:08:58.780 --> 00:09:03.730
Now it might have looked pretty simple to you when you first saw it maybe for some reason you know a

127
00:09:03.730 --> 00:09:08.050
little bit of color it might have looked really cryptic to you because you've never seen Cartland and

128
00:09:08.200 --> 00:09:13.840
you had no idea what was going on at all with protecting against Nalls and you might have looked at

129
00:09:13.840 --> 00:09:15.810
this and wondered what's going on here.

130
00:09:15.940 --> 00:09:22.870
But hopefully at this point after you've watched the course you can now look at this code and go yeah

131
00:09:22.870 --> 00:09:24.990
this code is really simple code.

132
00:09:25.000 --> 00:09:27.640
I mean this is really straightforward Codling code.

133
00:09:27.640 --> 00:09:32.200
Now this isn't the only way the application could be converted.

134
00:09:32.200 --> 00:09:34.970
This was the way I chose to convert it.

135
00:09:35.020 --> 00:09:40.390
There may be other ways there may be more concise ways of converting the application but this is the

136
00:09:40.390 --> 00:09:42.050
way that I chose to do it.

137
00:09:42.080 --> 00:09:47.530
I was kind of trying to strike a balance between staying similar to what Java was doing that also sneaking

138
00:09:47.530 --> 00:09:52.150
in some Katlin features that you probably hadn't seen before.

139
00:09:52.150 --> 00:09:52.690
All right.

140
00:09:52.690 --> 00:09:59.030
So that's our post course review of the converted application.

141
00:09:59.050 --> 00:10:00.260
I'll see you in the next video.
