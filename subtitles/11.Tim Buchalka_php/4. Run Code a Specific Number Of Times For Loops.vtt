WEBVTT

00:05.170 --> 00:12.880
In addition to the while loop we also have far loops in p s p for loops I used to execute some cold

00:12.910 --> 00:19.340
a specific number of times when you know in advance how many times you want the code to run.

00:21.810 --> 00:22.530
Follow up.

00:22.540 --> 00:29.260
It's based on a counter the counter is a variable that controls how many times the cold inside the loop

00:29.260 --> 00:30.940
is executed.

00:31.270 --> 00:40.330
When we create a far loop First we initialize the counter to its initial value then we specify a test

00:40.330 --> 00:41.530
for it.

00:41.530 --> 00:47.450
If this tests result is true then the cold inside the block is executed.

00:47.680 --> 00:51.770
If it's false then the loop ends.

00:51.780 --> 00:58.700
Finally we add a statement that will change the counters value after each time the code book is executed.

01:01.600 --> 01:03.400
Let's look at an example.

01:03.640 --> 01:13.530
We'll print out the numbers from 1 to 10 first with initialize the counter and you can call the counter

01:13.540 --> 01:15.190
variable whatever you like.

01:15.340 --> 01:19.500
But i is a typical name for the counter in a followup.

01:19.720 --> 01:27.610
Then I will add the condition separating it with a semicolon which says to run the cold while the counter

01:27.640 --> 01:31.130
is less than equal to 10.

01:31.210 --> 01:35.570
Then finally they will add a statement that will add 1 to the value of the counter.

01:35.680 --> 01:43.270
After each iteration of the loop and then finally in the cold block will just print out the value of

01:43.270 --> 01:44.250
the counter.

01:47.010 --> 01:53.430
When we run this in the browser we get the numbers from 1 to 10 printed out.

01:56.850 --> 01:59.340
Let's go through what happened.

01:59.340 --> 02:03.840
The file loop starts by initializing the counter to 1.

02:04.200 --> 02:05.630
It then checks the condition.

02:05.640 --> 02:10.440
Which is true because one is less than equal to 10.

02:10.830 --> 02:13.460
So the code in the block executes.

02:15.280 --> 02:18.190
Then the third statement in the follow up is executed.

02:18.270 --> 02:21.200
Incrementing the counter by 1.

02:21.220 --> 02:23.860
The condition is checked again and it's still true.

02:23.860 --> 02:30.320
So the cold in the block executes then the counter is incremented again.

02:30.610 --> 02:31.990
The condition is checked.

02:32.020 --> 02:40.780
It's true so the code in the block executes and so on until the counter is incremented to 11 then the

02:40.780 --> 02:42.230
condition is false.

02:42.340 --> 02:43.970
So the loop finishes.

02:47.620 --> 02:54.220
We can make a small improvement to the cold here with incrementing the counter by one by adding one

02:54.220 --> 03:01.390
to its value and then assigning this back to the counter variable.

03:01.480 --> 03:09.490
However instead of doing this in P HP we have a combined operator that allows us to express this more

03:09.490 --> 03:10.320
succinctly.

03:10.330 --> 03:19.200
So instead of doing this we can just use this combined operator to add one to the value of the variable.

03:19.960 --> 03:28.270
So let's change this expression to use the combined operator like that and then in the browser

03:31.090 --> 03:37.600
the result hasn't changed and we see the 10 numbers printed out.

03:37.600 --> 03:41.320
We can improve this even further as there's an upper 3 to in p h.

03:41.320 --> 03:49.060
P there will increments of value far as putting two plus signs after a variable name will increment

03:49.060 --> 03:52.780
a value by one.

03:52.780 --> 03:58.510
So let's change this again to use this operator like that.

03:58.750 --> 04:05.450
And then in the browser we get the same results.

04:05.500 --> 04:10.760
It's very common to use this increment updater like this in a file doop.
