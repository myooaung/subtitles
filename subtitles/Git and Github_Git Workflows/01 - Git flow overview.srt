1
00:00:00,006 --> 00:00:02,007
- [Instructor] The first workflow that we'll cover

2
00:00:02,007 --> 00:00:04,007
is Git Flow.

3
00:00:04,007 --> 00:00:08,005
For years, it was the preferred workflow for most teams.

4
00:00:08,005 --> 00:00:11,000
But as more projects have shifted

5
00:00:11,000 --> 00:00:14,002
towards modern continuous delivery practices,

6
00:00:14,002 --> 00:00:17,005
it's become less applicable because it wasn't designed

7
00:00:17,005 --> 00:00:20,006
to support such rapid release cadences.

8
00:00:20,006 --> 00:00:23,000
That might make you wonder why it's important

9
00:00:23,000 --> 00:00:25,002
to learn Git Flow now.

10
00:00:25,002 --> 00:00:27,009
Well, since Git Flow was so popular,

11
00:00:27,009 --> 00:00:31,000
it's still used in many projects today.

12
00:00:31,000 --> 00:00:33,006
So the chances are high that you might encounter it

13
00:00:33,006 --> 00:00:35,002
in the workplace.

14
00:00:35,002 --> 00:00:38,009
Also, for teams that ship their software on a monthly

15
00:00:38,009 --> 00:00:43,001
or quarterly cadence, it's still a viable option.

16
00:00:43,001 --> 00:00:46,009
So let's take a look at Git Flow from a high level.

17
00:00:46,009 --> 00:00:51,008
It starts with two primary branches named main and develop.

18
00:00:51,008 --> 00:00:53,007
These are long-lived branches

19
00:00:53,007 --> 00:00:56,004
within the team's shared repository.

20
00:00:56,004 --> 00:01:00,000
The main branch stores the project's production ready code.

21
00:01:00,000 --> 00:01:02,003
So it holds the code that can be

22
00:01:02,003 --> 00:01:04,005
or will be released to production.

23
00:01:04,005 --> 00:01:08,001
The developed branch contains all of the development changes

24
00:01:08,001 --> 00:01:11,001
that are being worked on for the next release.

25
00:01:11,001 --> 00:01:14,004
It's the branch where developers integrate their changes

26
00:01:14,004 --> 00:01:17,002
and pull the changes of their teammates.

27
00:01:17,002 --> 00:01:19,003
When the code in the developed branch

28
00:01:19,003 --> 00:01:22,002
reaches a stable point, it will then go through

29
00:01:22,002 --> 00:01:25,006
a series of merges that eventually place the code

30
00:01:25,006 --> 00:01:28,000
into the main branch.

31
00:01:28,000 --> 00:01:30,009
We'll go into more detail about this later.

32
00:01:30,009 --> 00:01:33,007
But first, let's talk about the three types

33
00:01:33,007 --> 00:01:37,002
of short-lived branches that support this workflow.

34
00:01:37,002 --> 00:01:40,002
The first is a feature branch, which we've discussed.

35
00:01:40,002 --> 00:01:43,003
Developers use it to track the work they're performing

36
00:01:43,003 --> 00:01:45,006
on a single feature or bug.

37
00:01:45,006 --> 00:01:48,002
A feature branch is created by branching

38
00:01:48,002 --> 00:01:49,009
from the developed branch.

39
00:01:49,009 --> 00:01:52,000
And it's important that the feature branch

40
00:01:52,000 --> 00:01:55,005
is only used to work on a single feature.

41
00:01:55,005 --> 00:01:58,002
Once the work on the feature is completed,

42
00:01:58,002 --> 00:02:00,005
the feature branch is merged back

43
00:02:00,005 --> 00:02:03,007
into the developed branch on the shared repository

44
00:02:03,007 --> 00:02:07,000
using either a poll request or a local merge,

45
00:02:07,000 --> 00:02:08,009
and then a push.

46
00:02:08,009 --> 00:02:11,006
When the team has integrated all the features

47
00:02:11,006 --> 00:02:14,005
they plan to release into the developed branch,

48
00:02:14,005 --> 00:02:16,005
they'll create a release branch.

49
00:02:16,005 --> 00:02:19,008
The release branch is created by branching off

50
00:02:19,008 --> 00:02:21,004
of the developed branch.

51
00:02:21,004 --> 00:02:24,006
Once a release branch is created, there shouldn't be

52
00:02:24,006 --> 00:02:26,005
any new features added.

53
00:02:26,005 --> 00:02:29,008
But if you discover small issues with a feature

54
00:02:29,008 --> 00:02:33,009
already in the release, you can patch those features

55
00:02:33,009 --> 00:02:35,007
in the release branch.

56
00:02:35,007 --> 00:02:39,004
When the release is ready, the release branch will be merged

57
00:02:39,004 --> 00:02:40,006
into the main branch,

58
00:02:40,006 --> 00:02:43,004
which contains the production ready code.

59
00:02:43,004 --> 00:02:46,004
At this point, changes also need to be merged

60
00:02:46,004 --> 00:02:50,006
into the developed branch so that it contains any fixes made

61
00:02:50,006 --> 00:02:53,000
on the release branch.

62
00:02:53,000 --> 00:02:56,000
So that's how the entire workflow executes

63
00:02:56,000 --> 00:02:58,000
for a normal development cycle.

64
00:02:58,000 --> 00:03:01,006
But sometimes issues can arise that require

65
00:03:01,006 --> 00:03:03,005
a little more urgency.

66
00:03:03,005 --> 00:03:06,004
For that, you'll use a hotfix branch.

67
00:03:06,004 --> 00:03:09,009
A hotfix allows you to quickly patch a production release

68
00:03:09,009 --> 00:03:12,006
when something unexpectedly goes wrong.

69
00:03:12,006 --> 00:03:16,006
To create a hotfix branch, you'll branch off the main branch

70
00:03:16,006 --> 00:03:19,004
which will contain the production ready code.

71
00:03:19,004 --> 00:03:22,001
Then within this branch, you'll apply the fix

72
00:03:22,001 --> 00:03:25,000
for the critical issue, and then merge it back

73
00:03:25,000 --> 00:03:28,000
into the main and develop branches.

74
00:03:28,000 --> 00:03:30,002
That way the fix is integrated

75
00:03:30,002 --> 00:03:32,004
into both lines of development.

76
00:03:32,004 --> 00:03:35,003
That's the entire playbook for Git Flow.

77
00:03:35,003 --> 00:03:38,000
It's not too complicated, but there's a lot

78
00:03:38,000 --> 00:03:40,007
of branching involved, which creates some tension

79
00:03:40,007 --> 00:03:43,001
with continuous delivery practices.

80
00:03:43,001 --> 00:03:46,001
The work gets stored in those long-lived branches

81
00:03:46,001 --> 00:03:47,008
for longer periods of time,

82
00:03:47,008 --> 00:03:52,000
and that can delay integration of everyone's code.

