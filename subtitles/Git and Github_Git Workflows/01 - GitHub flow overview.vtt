WEBVTT
1
00:00:01.000 --> 00:00:02.006
- [Instructor] GitHub Flow is a workflow

2
00:00:02.006 --> 00:00:04.004
that was published by GitHub

3
00:00:04.004 --> 00:00:08.003
for teams that frequently ship their code to production.

4
00:00:08.003 --> 00:00:10.007
The workflow is similar to Gitflow,

5
00:00:10.007 --> 00:00:12.005
but there are some key differences

6
00:00:12.005 --> 00:00:16.000
that make GitHub Flow unique and more streamlined.

7
00:00:16.000 --> 00:00:18.000
To understand GitHub Flow,

8
00:00:18.000 --> 00:00:19.009
the first thing that you need to know

9
00:00:19.009 --> 00:00:23.007
is that main is the only long-lived branch.

10
00:00:23.007 --> 00:00:27.004
So, in this workflow, we'll no longer use a develop branch

11
00:00:27.004 --> 00:00:30.007
for storing our work towards the next release.

12
00:00:30.007 --> 00:00:31.009
In GitHub Flow,

13
00:00:31.009 --> 00:00:36.002
there's also no concept of a release or a hotfix branch

14
00:00:36.002 --> 00:00:40.000
because releasing a code change or fixing a production issue

15
00:00:40.000 --> 00:00:43.004
just becomes part of the regular development flow.

16
00:00:43.004 --> 00:00:45.000
So in GitHub Flow,

17
00:00:45.000 --> 00:00:47.009
there are less branches and less merging,

18
00:00:47.009 --> 00:00:51.002
but it works because your next production release

19
00:00:51.002 --> 00:00:54.001
is at most a few hours away.

20
00:00:54.001 --> 00:00:57.003
Let's take a look at the workflow to see how it works

21
00:00:57.003 --> 00:00:59.007
and highlight a few key points.

22
00:00:59.007 --> 00:01:01.007
First, we have our main branch,

23
00:01:01.007 --> 00:01:04.008
which is a long-lived branch that contains the code

24
00:01:04.008 --> 00:01:07.002
that has recently been deployed to production

25
00:01:07.002 --> 00:01:09.007
or at least it soon will be.

26
00:01:09.007 --> 00:01:12.009
When a developer starts work on any new feature,

27
00:01:12.009 --> 00:01:15.007
they pull the changes from the main branch

28
00:01:15.007 --> 00:01:18.007
and then locally create a feature branch off of it

29
00:01:18.007 --> 00:01:20.009
where they'll perform their work.

30
00:01:20.009 --> 00:01:22.008
Here, they'll commit changes

31
00:01:22.008 --> 00:01:26.000
as they make progress on the new feature.

32
00:01:26.000 --> 00:01:28.008
Then, when they achieve a small milestone,

33
00:01:28.008 --> 00:01:31.002
they'll push the code to the feature branch

34
00:01:31.002 --> 00:01:33.006
on the team's shared repository.

35
00:01:33.006 --> 00:01:35.004
This gives other developers

36
00:01:35.004 --> 00:01:37.006
on the team visibility of their work

37
00:01:37.006 --> 00:01:41.004
and protects the developer from losing any changes.

38
00:01:41.004 --> 00:01:44.000
When the feature branch is ready to ship,

39
00:01:44.000 --> 00:01:46.005
the developer pushes their final changes

40
00:01:46.005 --> 00:01:48.008
and then creates a pull request.

41
00:01:48.008 --> 00:01:51.009
Once the pull request is reviewed and approved,

42
00:01:51.009 --> 00:01:55.005
it will merge their feature branch into the main branch.

43
00:01:55.005 --> 00:01:58.002
The main branch is where the team stores code

44
00:01:58.002 --> 00:02:00.003
that's ready to be released.

45
00:02:00.003 --> 00:02:03.008
Ideally, this new change should be immediately deployed

46
00:02:03.008 --> 00:02:06.005
by a CI/CD pipeline, that way,

47
00:02:06.005 --> 00:02:10.008
other changes don't get intermixed into our release.

48
00:02:10.008 --> 00:02:13.002
So that's the end-to-end workflow

49
00:02:13.002 --> 00:02:15.000
and you can see how simple it is

50
00:02:15.000 --> 00:02:17.009
for a developer to release new changes.

51
00:02:17.009 --> 00:02:20.000
Let's move on to the next lesson

52
00:02:20.000 --> 00:02:24.000
and we'll do a hands-on walkthrough of GitHub Flow.

