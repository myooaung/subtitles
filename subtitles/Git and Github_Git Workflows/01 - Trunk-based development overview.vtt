WEBVTT
1
00:00:00.006 --> 00:00:02.000
- [Instructor] If your team is looking

2
00:00:02.000 --> 00:00:04.001
for a streamlined Git workflow,

3
00:00:04.001 --> 00:00:06.008
you might consider trunk-based development.

4
00:00:06.008 --> 00:00:09.009
Trunk-based development, also known as TBD,

5
00:00:09.009 --> 00:00:13.001
is a workflow where developers center their collaboration

6
00:00:13.001 --> 00:00:16.000
around a single branch known as trunk.

7
00:00:16.000 --> 00:00:17.000
Now in Git,

8
00:00:17.000 --> 00:00:19.007
the naming for this branch is a little different.

9
00:00:19.007 --> 00:00:22.004
Instead of trunk, it's called main.

10
00:00:22.004 --> 00:00:24.002
Just know that throughout this chapter,

11
00:00:24.002 --> 00:00:27.001
I'll be using these names interchangeably.

12
00:00:27.001 --> 00:00:28.005
No matter what you call it,

13
00:00:28.005 --> 00:00:32.007
the main idea behind TBD is that trunk is the branch

14
00:00:32.007 --> 00:00:35.003
where the development team shares their code

15
00:00:35.003 --> 00:00:38.006
and that there are no long-lived branches off of it.

16
00:00:38.006 --> 00:00:41.000
Teams that practice trunk-based development

17
00:00:41.000 --> 00:00:44.001
have some choices to make about how to go about it.

18
00:00:44.001 --> 00:00:46.000
So let's talk through the workflow,

19
00:00:46.000 --> 00:00:49.002
and I'll discuss a few of those choices.

20
00:00:49.002 --> 00:00:52.000
We'll start with the basic development flow.

21
00:00:52.000 --> 00:00:55.006
Smaller teams with a very high release cadence may choose

22
00:00:55.006 --> 00:00:58.007
to push changes directly to trunk.

23
00:00:58.007 --> 00:01:00.004
In this version of the workflow,

24
00:01:00.004 --> 00:01:04.003
developers clone the repository to their local workstation

25
00:01:04.003 --> 00:01:07.004
and then commit all of their changes against trunk,

26
00:01:07.004 --> 00:01:09.004
so the main branch.

27
00:01:09.004 --> 00:01:12.006
Once the work has been completed for a feature,

28
00:01:12.006 --> 00:01:14.009
changes are merged from the main branch

29
00:01:14.009 --> 00:01:16.007
on the local repository

30
00:01:16.007 --> 00:01:18.008
directly into the main branch

31
00:01:18.008 --> 00:01:22.007
on the team's shared repository in GitHub.

32
00:01:22.007 --> 00:01:23.009
For larger teams

33
00:01:23.009 --> 00:01:26.007
or teams that may not release as frequently,

34
00:01:26.007 --> 00:01:30.005
this workflow may be a little bit too streamlined.

35
00:01:30.005 --> 00:01:32.003
These teams often find

36
00:01:32.003 --> 00:01:35.006
that using short-lived feature branches with TBD

37
00:01:35.006 --> 00:01:37.002
is more productive.

38
00:01:37.002 --> 00:01:39.009
The development workflow follows a similar pattern

39
00:01:39.009 --> 00:01:42.008
to what we saw with the GitHub workflow.

40
00:01:42.008 --> 00:01:45.005
When developers need to work on a new feature,

41
00:01:45.005 --> 00:01:47.001
they'll create a feature branch

42
00:01:47.001 --> 00:01:49.008
for each new feature off of trunk.

43
00:01:49.008 --> 00:01:52.006
Here they'll perform their work, and when it's ready,

44
00:01:52.006 --> 00:01:55.003
they'll push the branch to the shared repository

45
00:01:55.003 --> 00:01:59.002
and merge it into the trunk branch using a pull request.

46
00:01:59.002 --> 00:02:02.004
What's important if you choose to use feature branches

47
00:02:02.004 --> 00:02:05.002
is that the branches are very short lived,

48
00:02:05.002 --> 00:02:08.000
probably a day or two at the longest.

49
00:02:08.000 --> 00:02:11.000
After your team has chosen a development workflow,

50
00:02:11.000 --> 00:02:14.003
you'll need to decide upon a release strategy.

51
00:02:14.003 --> 00:02:16.009
Here you'll have two options.

52
00:02:16.009 --> 00:02:19.007
The first is to release directly from trunk,

53
00:02:19.007 --> 00:02:22.005
which works well for teams that are releasing changes

54
00:02:22.005 --> 00:02:24.002
at a rapid pace.

55
00:02:24.002 --> 00:02:26.002
For teams with a slower cadence,

56
00:02:26.002 --> 00:02:29.003
let's say weekly or monthly, the other option

57
00:02:29.003 --> 00:02:32.003
is to create a release branch off of the trunk branch

58
00:02:32.003 --> 00:02:34.009
a few days before each release.

59
00:02:34.009 --> 00:02:37.005
Creating a release branch allows developers

60
00:02:37.005 --> 00:02:39.005
to continue to work against trunk

61
00:02:39.005 --> 00:02:42.009
without impacting the upcoming release.

62
00:02:42.009 --> 00:02:45.007
If an issue is discovered with the release,

63
00:02:45.007 --> 00:02:47.008
the changes are first made in trunk

64
00:02:47.008 --> 00:02:50.000
and then merged into the release branch

65
00:02:50.000 --> 00:02:52.006
using a cherry-pick of a single commit.

66
00:02:52.006 --> 00:02:55.004
This ensures both trunk and the release branch

67
00:02:55.004 --> 00:02:58.006
receive the new changes for the hotfix.

68
00:02:58.006 --> 00:03:00.002
Just like GitHub flow,

69
00:03:00.002 --> 00:03:02.007
you'll want to have strong automation in place

70
00:03:02.007 --> 00:03:05.003
to build, verify, and deploy the changes

71
00:03:05.003 --> 00:03:07.008
developers merge into trunk.

72
00:03:07.008 --> 00:03:11.001
Having a mature CI/CD pipeline isn't optional

73
00:03:11.001 --> 00:03:12.007
when using TBD,

74
00:03:12.007 --> 00:03:15.009
because without it you wouldn't receive any feedback

75
00:03:15.009 --> 00:03:17.004
regarding your changes,

76
00:03:17.004 --> 00:03:19.002
which can create some major issues

77
00:03:19.002 --> 00:03:21.006
when it comes to production.

78
00:03:21.006 --> 00:03:23.006
So we covered the core concepts

79
00:03:23.006 --> 00:03:25.003
behind trunk-based development

80
00:03:25.003 --> 00:03:28.006
and how the workflow handles certain situations.

81
00:03:28.006 --> 00:03:32.000
There are some advanced techniques you can use with TBD,

82
00:03:32.000 --> 00:03:36.000
like feature flagging, which we'll cover in our next lesson.

