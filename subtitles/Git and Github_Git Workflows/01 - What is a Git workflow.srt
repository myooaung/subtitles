1
00:00:00,007 --> 00:00:02,007
- [Instructor] When a team of software developers

2
00:00:02,007 --> 00:00:04,005
collaborate on a project,

3
00:00:04,005 --> 00:00:08,008
they need to agree on how to manage the project's code base.

4
00:00:08,008 --> 00:00:11,006
This agreement, known as a workflow,

5
00:00:11,006 --> 00:00:15,005
defines and standardizes how the team uses Git

6
00:00:15,005 --> 00:00:17,006
to handle these common situations

7
00:00:17,006 --> 00:00:20,001
that involve their source code.

8
00:00:20,001 --> 00:00:21,007
So when we think about it,

9
00:00:21,007 --> 00:00:24,009
teams use Git in a variety of ways.

10
00:00:24,009 --> 00:00:27,003
A developer needs to move source code

11
00:00:27,003 --> 00:00:28,009
related to a new feature

12
00:00:28,009 --> 00:00:32,008
from their local repository into a shared repository.

13
00:00:32,008 --> 00:00:35,004
From there, other developers on the team

14
00:00:35,004 --> 00:00:37,000
can pull those changes

15
00:00:37,000 --> 00:00:39,007
to sync their code with the shared repository,

16
00:00:39,007 --> 00:00:41,002
which they'll need to do

17
00:00:41,002 --> 00:00:44,006
before they begin work on a feature of their own.

18
00:00:44,006 --> 00:00:48,003
A continuous integration system needs to integrate with Git

19
00:00:48,003 --> 00:00:51,002
to build the latest source code for the project.

20
00:00:51,002 --> 00:00:53,009
That way, it can be released to different environments,

21
00:00:53,009 --> 00:00:56,004
like development or production.

22
00:00:56,004 --> 00:01:00,007
Or, maybe a critical security vulnerability gets discovered.

23
00:01:00,007 --> 00:01:05,008
The team might need to urgently deploy a critical hotfix.

24
00:01:05,008 --> 00:01:09,004
A workflow provides all the developers on the team

25
00:01:09,004 --> 00:01:12,007
with a consistent set of steps they take with Git

26
00:01:12,007 --> 00:01:15,004
for these types of scenarios.

27
00:01:15,004 --> 00:01:17,008
This helps the team collaborate better,

28
00:01:17,008 --> 00:01:21,000
because for each scenario there's guidelines

29
00:01:21,000 --> 00:01:23,004
or a recipe for what to do.

30
00:01:23,004 --> 00:01:26,000
So, let's say you need to do a release.

31
00:01:26,000 --> 00:01:28,005
A workflow determines which Git commands

32
00:01:28,005 --> 00:01:30,005
you'll execute to perform it.

33
00:01:30,005 --> 00:01:33,005
Or, maybe you need to develop a new feature.

34
00:01:33,005 --> 00:01:35,008
You'll know what branch to start from

35
00:01:35,008 --> 00:01:38,001
and where to merge your changes when you finish

36
00:01:38,001 --> 00:01:40,007
since it's defined by the workflow.

37
00:01:40,007 --> 00:01:44,005
So, you'll always know exactly what to do with Git,

38
00:01:44,005 --> 00:01:47,005
and your teammates will understand what you're doing

39
00:01:47,005 --> 00:01:50,007
because it's all agreed upon ahead of time,

40
00:01:50,007 --> 00:01:53,008
so they'll know what to expect.

41
00:01:53,008 --> 00:01:57,005
Having a defined Git workflow is essential for your team

42
00:01:57,005 --> 00:02:00,006
to collaborate effectively on your code base.

43
00:02:00,006 --> 00:02:03,006
It will make the flow of changes within your project

44
00:02:03,006 --> 00:02:07,002
predictable and easy to understand for all team members,

45
00:02:07,002 --> 00:02:10,005
which will help improve your team's development process

46
00:02:10,005 --> 00:02:12,008
and overall velocity.

47
00:02:12,008 --> 00:02:14,000
At the same time,

48
00:02:14,000 --> 00:02:16,005
you'll avoid frustrating situations

49
00:02:16,005 --> 00:02:19,004
that can arise from mismanaging your code.

50
00:02:19,004 --> 00:02:21,005
Git's incredibly flexible.

51
00:02:21,005 --> 00:02:24,002
It's really easy to create new branches,

52
00:02:24,002 --> 00:02:26,004
and it provides us with advanced features

53
00:02:26,004 --> 00:02:28,006
like tagging and rebasing.

54
00:02:28,006 --> 00:02:32,002
So, your team could create a very customized workflow,

55
00:02:32,002 --> 00:02:34,005
but before you go that route,

56
00:02:34,005 --> 00:02:35,007
you should consider using

57
00:02:35,007 --> 00:02:38,000
some of the established Git workflows

58
00:02:38,000 --> 00:02:39,004
that are available to you.

59
00:02:39,004 --> 00:02:41,005
They've been used by teams for years,

60
00:02:41,005 --> 00:02:44,008
and are proven to improve your development process.

61
00:02:44,008 --> 00:02:47,002
We'll be exploring them throughout the course,

62
00:02:47,002 --> 00:02:50,008
but first we need to talk about the basic building blocks

63
00:02:50,008 --> 00:02:53,002
used to create these workflows.

64
00:02:53,002 --> 00:02:56,000
Let's start there in our next lesson.

