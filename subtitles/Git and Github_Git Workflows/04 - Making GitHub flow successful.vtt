WEBVTT
1
00:00:00.006 --> 00:00:02.007
- [Instructor] Having a straightforward workflow

2
00:00:02.007 --> 00:00:06.001
like GitHub Flow for your team is wonderful.

3
00:00:06.001 --> 00:00:08.008
It makes it easy for anyone on your team

4
00:00:08.008 --> 00:00:11.003
to ship new changes to production,

5
00:00:11.003 --> 00:00:14.000
but you need to embrace some other practices

6
00:00:14.000 --> 00:00:18.003
alongside it to ensure that constant flow of changes

7
00:00:18.003 --> 00:00:20.009
doesn't break your production system.

8
00:00:20.009 --> 00:00:23.000
So let's talk about a few of those

9
00:00:23.000 --> 00:00:27.004
so that your team can be successful with GitHub Flow.

10
00:00:27.004 --> 00:00:29.009
When using the workflow, you want to gather

11
00:00:29.009 --> 00:00:32.008
as much feedback as possible about a change

12
00:00:32.008 --> 00:00:36.004
in a feature branch before the pull request is approved

13
00:00:36.004 --> 00:00:38.008
to merge it into the main branch.

14
00:00:38.008 --> 00:00:42.004
The best way to do that is through continuous integration

15
00:00:42.004 --> 00:00:45.000
which automates the process that compiles

16
00:00:45.000 --> 00:00:46.008
and tests your software.

17
00:00:46.008 --> 00:00:48.000
That way you can be sure

18
00:00:48.000 --> 00:00:51.000
that new changes don't break anything.

19
00:00:51.000 --> 00:00:54.002
Before each feature branch is merged into main,

20
00:00:54.002 --> 00:00:57.005
your CI system should automatically build the code

21
00:00:57.005 --> 00:00:59.008
and execute the project's test suite

22
00:00:59.008 --> 00:01:01.008
against the feature branch.

23
00:01:01.008 --> 00:01:03.004
If the build doesn't pass

24
00:01:03.004 --> 00:01:07.002
or meet the quality standards established by your team,

25
00:01:07.002 --> 00:01:09.006
those issues need to be fixed

26
00:01:09.006 --> 00:01:12.009
on the feature before it can be merged into main.

27
00:01:12.009 --> 00:01:15.002
It's best to automate this policy

28
00:01:15.002 --> 00:01:18.007
which can be done in GitHub by configuring a status check

29
00:01:18.007 --> 00:01:20.004
with the branch protection roles

30
00:01:20.004 --> 00:01:23.004
that we saw earlier in the course.

31
00:01:23.004 --> 00:01:26.000
Having automated tests like unit tests

32
00:01:26.000 --> 00:01:29.000
and integration tests in your CI pipeline

33
00:01:29.000 --> 00:01:31.007
is essential for validating new changes

34
00:01:31.007 --> 00:01:33.007
when using GitHub Flow.

35
00:01:33.007 --> 00:01:36.006
These automated tests ensure that changes

36
00:01:36.006 --> 00:01:39.004
don't break other areas of the system

37
00:01:39.004 --> 00:01:42.002
and that the change is functionally correct.

38
00:01:42.002 --> 00:01:45.004
There needs to be enough code coverage in the project

39
00:01:45.004 --> 00:01:47.003
so that with each new build

40
00:01:47.003 --> 00:01:50.000
you're confident in what is being shipped

41
00:01:50.000 --> 00:01:53.006
because without it, you're just shipping untested codes

42
00:01:53.006 --> 00:01:56.000
straight into production.

43
00:01:56.000 --> 00:01:59.000
Many repository managers like GitHub

44
00:01:59.000 --> 00:02:02.002
will display the results of the automated build and test

45
00:02:02.002 --> 00:02:03.007
right within the pull request

46
00:02:03.007 --> 00:02:06.001
for other team members to review.

47
00:02:06.001 --> 00:02:08.007
Key team members should be automatically added

48
00:02:08.007 --> 00:02:12.002
to pull requests, that way they can perform their own review

49
00:02:12.002 --> 00:02:15.009
and provide comments on the changes before they're merged.

50
00:02:15.009 --> 00:02:18.009
The best way to enforce this policy is to configure

51
00:02:18.009 --> 00:02:21.006
branch protection rules that require approval

52
00:02:21.006 --> 00:02:26.006
by other reviewers and a clean build before a PR is merged.

53
00:02:26.006 --> 00:02:29.005
Once each pull request is approved and merged,

54
00:02:29.005 --> 00:02:32.001
it should quickly be deployed to prevent a buildup

55
00:02:32.001 --> 00:02:34.006
of changes in the main branch.

56
00:02:34.006 --> 00:02:37.006
Since you'll be merging into main so frequently,

57
00:02:37.006 --> 00:02:40.005
you'll want to have automated deployments established

58
00:02:40.005 --> 00:02:43.002
to keep the team's workflow smooth.

59
00:02:43.002 --> 00:02:45.003
You don't want to have to be manually deploying

60
00:02:45.003 --> 00:02:47.000
all of these changes,

61
00:02:47.000 --> 00:02:50.009
and the deployment procedures need to be easy to execute.

62
00:02:50.009 --> 00:02:54.006
For example, at GitHub, they've integrated a chat bot

63
00:02:54.006 --> 00:02:57.001
into their workflow that allows team members

64
00:02:57.001 --> 00:03:00.008
to easily deploy right within the chat tool.

65
00:03:00.008 --> 00:03:04.003
Really, these practices will benefit any project

66
00:03:04.003 --> 00:03:07.001
regardless of the workflow that you choose.

67
00:03:07.001 --> 00:03:09.008
However, with workflows like GitHub Flow

68
00:03:09.008 --> 00:03:12.005
that empower you to rapidly deploy your code,

69
00:03:12.005 --> 00:03:15.005
it's critical because it would take too much time

70
00:03:15.005 --> 00:03:18.003
to manually validate and deploy every change

71
00:03:18.003 --> 00:03:20.001
that you ship to production.

72
00:03:20.001 --> 00:03:22.008
So you'll want to have these safeguards in place

73
00:03:22.008 --> 00:03:24.009
if your team is using GitHub Flow

74
00:03:24.009 --> 00:03:29.000
or trunk-based development, which we'll talk about next.

