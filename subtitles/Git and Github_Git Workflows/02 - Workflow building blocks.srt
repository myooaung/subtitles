1
00:00:00,006 --> 00:00:02,003
- [Instructor] There are several elements

2
00:00:02,003 --> 00:00:05,005
that work together to form a Git workflow.

3
00:00:05,005 --> 00:00:07,007
Let's take a look at these building blocks

4
00:00:07,007 --> 00:00:09,008
so that you're familiar with them.

5
00:00:09,008 --> 00:00:13,000
The goal of a Git workflow is to make it easier

6
00:00:13,000 --> 00:00:16,009
for teams to collaborate on a software development project.

7
00:00:16,009 --> 00:00:20,006
So every Git workflow needs a shared repository

8
00:00:20,006 --> 00:00:22,008
where the developers on a team can pull

9
00:00:22,008 --> 00:00:27,003
the latest code base from or push their latest changes to.

10
00:00:27,003 --> 00:00:30,002
This shared repository is normally hosted

11
00:00:30,002 --> 00:00:33,000
on a repository manager like GitHub

12
00:00:33,000 --> 00:00:36,000
that's used by the entire organization.

13
00:00:36,000 --> 00:00:38,003
The organization might choose to use

14
00:00:38,003 --> 00:00:41,000
a cloud-hosted repository manager

15
00:00:41,000 --> 00:00:43,006
or they might run it on premise.

16
00:00:43,006 --> 00:00:45,008
But regardless of where it's hosted,

17
00:00:45,008 --> 00:00:48,003
it's the place where team members interact

18
00:00:48,003 --> 00:00:51,004
with their team's shared repository.

19
00:00:51,004 --> 00:00:54,005
When developers need to work on the code base,

20
00:00:54,005 --> 00:00:57,007
they'll pull the code from this shared repository into

21
00:00:57,007 --> 00:01:02,002
their local repository, which lives on their workstation.

22
00:01:02,002 --> 00:01:05,004
It's their own local copy of the repository

23
00:01:05,004 --> 00:01:07,009
that generally mirrors the code found

24
00:01:07,009 --> 00:01:10,004
in the remote shared repository.

25
00:01:10,004 --> 00:01:12,008
Here, in this local repository,

26
00:01:12,008 --> 00:01:15,005
the developer will commit their source code changes

27
00:01:15,005 --> 00:01:20,003
as they work to implement a new feature or resolve a bug.

28
00:01:20,003 --> 00:01:24,001
Within these repositories, branches are created

29
00:01:24,001 --> 00:01:27,005
and maintained to track different lines of development.

30
00:01:27,005 --> 00:01:31,009
These branches typically fall into two categories.

31
00:01:31,009 --> 00:01:34,004
The first are long-lived branches.

32
00:01:34,004 --> 00:01:36,004
These remain open and are used

33
00:01:36,004 --> 00:01:39,000
throughout the development of a project.

34
00:01:39,000 --> 00:01:42,002
Long-lived branches are typically set up to store code

35
00:01:42,002 --> 00:01:45,000
that's at different phases of development.

36
00:01:45,000 --> 00:01:48,007
For example, the main branch is often used by teams

37
00:01:48,007 --> 00:01:51,007
to store the stable code for a project.

38
00:01:51,007 --> 00:01:55,006
It should always be in a working state, and often it holds

39
00:01:55,006 --> 00:01:59,000
the latest code that has been released to production.

40
00:01:59,000 --> 00:02:03,004
Develop is another long-lived branch that teams might use.

41
00:02:03,004 --> 00:02:06,006
It's created by branching off of the main branch

42
00:02:06,006 --> 00:02:09,008
and then used by teams to integrate the next version

43
00:02:09,008 --> 00:02:12,003
of the code they plan to release.

44
00:02:12,003 --> 00:02:16,007
So it's where the team merges all of their work in progress.

45
00:02:16,007 --> 00:02:19,004
That brings us to short-lived branches.

46
00:02:19,004 --> 00:02:22,005
These are branches that exist only for a short

47
00:02:22,005 --> 00:02:25,003
period of time, which typically corresponds

48
00:02:25,003 --> 00:02:28,001
with the development of a new feature or,

49
00:02:28,001 --> 00:02:32,001
in special circumstances, the fix of a major issue.

50
00:02:32,001 --> 00:02:34,006
The most common type of short-lived branch

51
00:02:34,006 --> 00:02:37,000
is known as a feature branch.

52
00:02:37,000 --> 00:02:40,002
As the name implies, a feature branch is created

53
00:02:40,002 --> 00:02:43,008
when you need to begin development of a new feature.

54
00:02:43,008 --> 00:02:45,008
As changes are made for the feature,

55
00:02:45,008 --> 00:02:47,009
they're committed to the feature branch,

56
00:02:47,009 --> 00:02:51,000
which is then merged back into another branch

57
00:02:51,000 --> 00:02:54,001
and deleted once the feature is complete.

58
00:02:54,001 --> 00:02:57,000
A hotfix is another type of feature branch

59
00:02:57,000 --> 00:02:59,000
that is branched from the main branch

60
00:02:59,000 --> 00:03:01,006
to quickly fix a critical issue.

61
00:03:01,006 --> 00:03:04,009
We'll dive into the details of how it works later.

62
00:03:04,009 --> 00:03:08,003
For now, just know it's another type of feature branch.

63
00:03:08,003 --> 00:03:11,007
So those are the major building blocks you'll find

64
00:03:11,007 --> 00:03:13,007
in most Git workflows.

65
00:03:13,007 --> 00:03:17,006
When executing a Git workflow, you'll also use Git commands

66
00:03:17,006 --> 00:03:22,000
like commit, fetch, merge, push, and pull to move

67
00:03:22,000 --> 00:03:26,007
code changes between these branches and repositories.

68
00:03:26,007 --> 00:03:29,008
You'll also be creating and approving pull requests

69
00:03:29,008 --> 00:03:32,001
within most Git workflows.

70
00:03:32,001 --> 00:03:35,007
It's a feature that's provided by most repository managers

71
00:03:35,007 --> 00:03:37,008
that isn't native to Git.

72
00:03:37,008 --> 00:03:40,008
A pull request allows other members of your team

73
00:03:40,008 --> 00:03:43,009
to review your work before it's approved to be merged

74
00:03:43,009 --> 00:03:47,002
into a branch on the shared repository.

75
00:03:47,002 --> 00:03:50,002
So that's a quick overview of the parts and pieces

76
00:03:50,002 --> 00:03:52,007
that make up a Git workflow.

77
00:03:52,007 --> 00:03:55,008
Each specific workflow will describe what branches

78
00:03:55,008 --> 00:03:58,005
should be established and how your code changes

79
00:03:58,005 --> 00:04:00,000
will flow between them.

