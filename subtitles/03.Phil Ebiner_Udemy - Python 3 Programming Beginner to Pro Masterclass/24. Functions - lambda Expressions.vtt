WEBVTT
1
00:00:00.690 --> 00:00:04.070
Hello everyone and welcome to this new lecture and this lecture.

2
00:00:04.080 --> 00:00:08.810
We're going to learn a very kind of advanced concept when it comes to function.

3
00:00:08.820 --> 00:00:11.780
So call it lambda expressions in the previous lectures.

4
00:00:11.780 --> 00:00:17.310
We've been able to learn what functions are and we'll be able as well to use some of the built in functions

5
00:00:17.370 --> 00:00:19.450
such as some length whatever.

6
00:00:19.470 --> 00:00:20.270
OK.

7
00:00:20.460 --> 00:00:23.500
In this section let's go ahead and use lambda expressions.

8
00:00:23.500 --> 00:00:24.400
OK.

9
00:00:25.140 --> 00:00:27.770
So first of all let's take a look at what the definition is.

10
00:00:27.810 --> 00:00:31.110
So lambda function is a way to create small anonymous function.

11
00:00:31.110 --> 00:00:32.930
When I say Anonymous that means without a name.

12
00:00:33.040 --> 00:00:33.840
OK.

13
00:00:34.320 --> 00:00:40.230
Lambda functions are mainly used with filter and map and reduce and actually going to have the next

14
00:00:40.230 --> 00:00:40.830
lectures.

15
00:00:40.830 --> 00:00:43.600
We're going to discuss filter and map as well.

16
00:00:43.770 --> 00:00:48.320
It can take any number of arguments but only have one expression.

17
00:00:48.330 --> 00:00:48.660
All right.

18
00:00:49.020 --> 00:00:51.690
Let's take a look at what they mean by the lambda expression.

19
00:00:52.230 --> 00:00:55.050
Let's assume that I wanted to define a regular function.

20
00:00:55.050 --> 00:01:00.930
Basic functions we have done in the past that functions take a variable and just simply square it.

21
00:01:01.070 --> 00:01:08.640
So I can say okay define my function and that function will take let's say value x and the function

22
00:01:08.640 --> 00:01:12.090
we're going to simply return x square.

23
00:01:12.090 --> 00:01:15.800
We have done that before several times X squared shift entered.

24
00:01:15.990 --> 00:01:20.480
And if I wanted to call the function I was just to call it with its name my function.

25
00:01:20.490 --> 00:01:22.700
I'm gonna pass along that's a value of three.

26
00:01:22.710 --> 00:01:23.550
Here we go.

27
00:01:23.550 --> 00:01:25.160
So now I said three in there.

28
00:01:25.160 --> 00:01:26.960
It's square that now becomes nine.

29
00:01:26.970 --> 00:01:27.330
All right.

30
00:01:27.330 --> 00:01:27.990
That's looks good.

31
00:01:28.620 --> 00:01:32.070
Let's see how can we do the exact same operation using the lambda expression.

32
00:01:32.070 --> 00:01:39.170
So here I am doing lambda expression what I could do is say okay lambda.

33
00:01:40.270 --> 00:01:42.310
All right.

34
00:01:42.410 --> 00:01:43.360
That's how we how we write.

35
00:01:43.370 --> 00:01:46.100
Look I know it sounds a little bit confusing but let's take a look.

36
00:01:46.250 --> 00:01:48.060
Lambda simply we're going to take x.

37
00:01:48.080 --> 00:01:57.230
If I send you X please return back to me x square and when you do this operation return it in a variable

38
00:01:57.230 --> 00:01:59.180
called Y that's it.

39
00:01:59.210 --> 00:02:00.580
So y equals two lambda.

40
00:02:00.680 --> 00:02:02.840
I will send you X you give me X squared.

41
00:02:02.840 --> 00:02:04.230
It's the same idea here.

42
00:02:04.550 --> 00:02:08.990
Here I had to find a function that takes X and return x squared.

43
00:02:08.990 --> 00:02:13.640
It just this is just an elegant way of writing the exact same expression and she press shift enter.

44
00:02:13.640 --> 00:02:14.180
Here we go.

45
00:02:14.510 --> 00:02:17.510
So now if I wanted to call that lambda expression there's no name to it.

46
00:02:17.510 --> 00:02:21.410
Right so I'm going to call that variable or the outcome or the output.

47
00:02:21.410 --> 00:02:25.270
So we'll call it y and send for example it's a value of three shift enter.

48
00:02:25.270 --> 00:02:26.050
Here we go.

49
00:02:26.060 --> 00:02:27.440
Now we've come up with a value of nine.

50
00:02:28.310 --> 00:02:29.120
All right.

51
00:02:29.360 --> 00:02:29.640
Okay.

52
00:02:29.660 --> 00:02:32.760
Let's take another example let's say y of ten shift enter.

53
00:02:32.750 --> 00:02:35.270
Here we go come up with 100 value and so on.

54
00:02:36.190 --> 00:02:36.500
Okay.

55
00:02:37.420 --> 00:02:37.760
All right.

56
00:02:37.820 --> 00:02:42.130
Maybe you guys didn't catch that you captured this luck yet.

57
00:02:42.170 --> 00:02:42.700
Maybe.

58
00:02:42.860 --> 00:02:43.940
Let's take over that example.

59
00:02:43.940 --> 00:02:47.040
Let's assume they wanted to define a function.

60
00:02:47.040 --> 00:02:48.010
OK.

61
00:02:48.170 --> 00:02:53.960
And what that function does is simply takes three parameters and some of them up.

62
00:02:54.380 --> 00:02:54.710
All right.

63
00:02:54.710 --> 00:02:57.370
Let's see how can we do that in a very basic way.

64
00:02:57.370 --> 00:02:59.130
And it's how can we do that using lambda expression.

65
00:02:59.680 --> 00:03:00.310
So can I say OK.

66
00:03:00.320 --> 00:03:02.900
Define function is called summation.

67
00:03:02.900 --> 00:03:06.410
It takes three parameters that x y x y and z.

68
00:03:06.440 --> 00:03:06.720
Okay.

69
00:03:06.740 --> 00:03:07.880
Looks good.

70
00:03:07.880 --> 00:03:15.610
The function where it simply return x plus y plus the really simple just enter and we go forward to

71
00:03:15.610 --> 00:03:18.400
call the function again I will call it with its name.

72
00:03:18.430 --> 00:03:19.350
I'm gonna pass along.

73
00:03:19.360 --> 00:03:25.310
Let's say one two and three three parameters summation should be six K looks good.

74
00:03:25.480 --> 00:03:30.820
If I wanted to do the exact same process but using the lambda expressions what I could do.

75
00:03:30.820 --> 00:03:32.920
I'm going to take a results right.

76
00:03:32.920 --> 00:03:36.510
Equals two lambda right.

77
00:03:36.530 --> 00:03:40.900
My apologies lambda and what I could do I mean it's in the same fashion.

78
00:03:40.930 --> 00:03:41.470
OK.

79
00:03:41.500 --> 00:03:47.710
You basically in a simple form you put Colin right here you specify the inputs what you wanted to send

80
00:03:47.710 --> 00:03:50.110
to it here is to find the output.

81
00:03:50.130 --> 00:03:50.350
All right.

82
00:03:50.530 --> 00:03:54.810
So if you wanted to send I want to send X Y and Z.

83
00:03:55.270 --> 00:04:00.340
The output is x plus y plus the very very simple.

84
00:04:00.350 --> 00:04:00.930
All right.

85
00:04:00.940 --> 00:04:01.640
Okay.

86
00:04:01.810 --> 00:04:02.560
Shift enter.

87
00:04:02.610 --> 00:04:03.450
Here we go.

88
00:04:03.490 --> 00:04:07.720
If I wanted to call the function list we're going to say or lambda expression I'm going to say results

89
00:04:08.560 --> 00:04:12.120
which is my output here the outcome or the return of that function.

90
00:04:12.430 --> 00:04:15.970
And I can call it whatever and I sent to it one two and three each enter.

91
00:04:15.970 --> 00:04:18.160
Here we go will come up with the exact same answer.

92
00:04:18.250 --> 00:04:23.470
So simply I just you know that kind of this function becomes this lambda expression which is very very

93
00:04:23.470 --> 00:04:25.750
simple and very very powerful.

94
00:04:25.750 --> 00:04:32.140
All right well I want you guys to do is to simply define a lambda expression that simply takes two numbers

95
00:04:32.680 --> 00:04:34.820
and multiply them together.

96
00:04:34.840 --> 00:04:38.190
Please go ahead pause the video and I will see you guys after the challenge

97
00:04:41.220 --> 00:04:41.670
all right.

98
00:04:41.700 --> 00:04:47.340
April has been able to figure out the challenge when I you to do is to simply define let's say Z equals

99
00:04:47.340 --> 00:04:51.750
to multiply.

100
00:04:52.620 --> 00:04:53.100
And that would

101
00:04:56.420 --> 00:05:01.120
all right here because we're able to figure out the challenge we ask us to do is to simply define if

102
00:05:01.540 --> 00:05:07.310
lambda using lambda expression you're going to take two variables and multiply them together.

103
00:05:07.360 --> 00:05:07.620
All right.

104
00:05:07.630 --> 00:05:15.070
So I'm going to say you're going to see a result equals two lambda and the lambda take X and Y and simply

105
00:05:15.070 --> 00:05:16.950
return x times Y.

106
00:05:16.960 --> 00:05:20.170
Very very simple variable it's like writing a note on a calculator.

107
00:05:20.170 --> 00:05:22.800
It's very very powerful very very easy.

108
00:05:22.810 --> 00:05:23.060
OK.

109
00:05:23.080 --> 00:05:25.760
Let's run it again and it's tested.

110
00:05:25.840 --> 00:05:27.010
Going to say results.

111
00:05:27.010 --> 00:05:27.760
I'm going to pass along.

112
00:05:27.760 --> 00:05:32.710
Let's say three and let's say six enter we go come up with 18.

113
00:05:33.010 --> 00:05:38.470
Let's say you wanna test that again and let's say 10 and six you come up with 60 and so on.

114
00:05:38.470 --> 00:05:38.950
All right.

115
00:05:38.970 --> 00:05:40.360
That's pretty much all we have for this lecture.

116
00:05:40.360 --> 00:05:41.200
I hope you guys enjoyed it.

117
00:05:41.200 --> 00:05:42.400
Let's recap.

118
00:05:42.670 --> 00:05:47.710
This lecture we've been able to cover lambda expressions which is kind of an easy elegant way of writing

119
00:05:47.840 --> 00:05:49.360
in the exact same function.

120
00:05:49.360 --> 00:05:51.800
Again you write lambda you specify the inputs.

121
00:05:51.910 --> 00:05:53.170
Collins part of outputs.

122
00:05:53.170 --> 00:05:53.800
Here we go.

123
00:05:53.800 --> 00:05:54.340
That's it.

124
00:05:54.400 --> 00:05:56.270
It's really simple very intuitive.

125
00:05:56.270 --> 00:05:58.660
And that's pretty much all for this lecture in the next lecture.

126
00:05:58.660 --> 00:06:04.210
I'm going to show you how can we use lambda expression to perform really advanced kind of operations

127
00:06:04.600 --> 00:06:06.550
using the reduce and map.

128
00:06:06.730 --> 00:06:09.000
Best of luck and I'll see you guys in the next lecture.
