1
00:00:00,190 --> 00:00:05,550
Know everyone and welcome to the section of this section we're going to cover a very famous library.

2
00:00:05,600 --> 00:00:07,160
We'll call it number pi.

3
00:00:07,470 --> 00:00:15,480
It's very very powerful library that we can use to do a lot of algebraic operations and we will help

4
00:00:15,480 --> 00:00:18,440
us a lot when we deal with race multidimensionality as well.

5
00:00:18,510 --> 00:00:19,210
OK.

6
00:00:19,320 --> 00:00:20,370
Let's get started.

7
00:00:20,370 --> 00:00:23,960
So in this book we're going to cover the pie basics.

8
00:00:23,960 --> 00:00:28,590
We're going to cover how can we do built in methods and functions.

9
00:00:28,590 --> 00:00:32,380
How can your penis shape length and type of umpire race.

10
00:00:32,400 --> 00:00:38,580
How can we perform reshaping how can we get let's see the minimum and maximum of elements within an

11
00:00:38,580 --> 00:00:45,480
array have together indices how to do mathematical operations how to perform indexing slicing and selection

12
00:00:45,480 --> 00:00:47,640
as well that a lot of content in here.

13
00:00:47,730 --> 00:00:48,750
We're going to be a lot of fun.

14
00:00:48,750 --> 00:00:48,970
All right.

15
00:00:48,990 --> 00:00:49,900
Let's get started.

16
00:00:50,190 --> 00:00:52,920
So first how can we imported pie.

17
00:00:53,010 --> 00:00:58,710
Okay the first step how can we install to software so to insist on one pie on the in the command window

18
00:00:58,920 --> 00:01:00,090
which is going to right.

19
00:01:00,090 --> 00:01:07,350
Kinda miss Tom non-pay any should have an umpire install and then the first step that you need to import

20
00:01:07,530 --> 00:01:09,900
some pie before you actually run any code.

21
00:01:09,950 --> 00:01:10,620
Right.

22
00:01:10,910 --> 00:01:12,410
In what we do in general.

23
00:01:12,420 --> 00:01:15,020
And it looks really weird you know when you look at it for the first time.

24
00:01:15,240 --> 00:01:18,000
Well you should it as import imported nump II.

25
00:01:18,210 --> 00:01:22,260
The common standard is SNP which kind of as a shortcut so you can use.

26
00:01:22,270 --> 00:01:24,990
MP You know through our the code basically.

27
00:01:24,990 --> 00:01:29,310
So when you run this cell to tell you okay now we imported an umpire basically if you don't see any

28
00:01:29,310 --> 00:01:30,690
error then you're a good.

29
00:01:30,990 --> 00:01:33,960
And then the first step is let's see how can we find a list.

30
00:01:33,960 --> 00:01:39,120
We actually covered how can we find a list before you actually just write the square brackets and you

31
00:01:39,120 --> 00:01:40,320
list whatever numbers you have.

32
00:01:40,320 --> 00:01:45,870
So we will listed five 3 10 for X for instance and we call it my list and actually let it go and view

33
00:01:45,870 --> 00:01:46,260
the list.

34
00:01:46,260 --> 00:01:49,090
So now we have a list as call 5 3 and 10.

35
00:01:49,170 --> 00:01:49,570
All right.

36
00:01:49,710 --> 00:01:50,870
Perfect.

37
00:01:50,940 --> 00:01:56,420
The next step is what if he wanted to create a nump high energy from that list.

38
00:01:56,480 --> 00:01:56,930
Right.

39
00:01:57,270 --> 00:01:59,510
So we can do that by COLLING.

40
00:01:59,550 --> 00:02:05,820
Basically the function or the methods you n.p. Dot array and then you open in parentheses and then you

41
00:02:05,820 --> 00:02:07,810
pass along your list which is.

42
00:02:08,020 --> 00:02:10,750
All right and then you pass that along to Y.

43
00:02:10,770 --> 00:02:15,450
So when you run this you know and then you run y they'll tell you okay now you have an array which has

44
00:02:15,450 --> 00:02:21,260
an umpire array that has basically then ellens the same elements of the list which is our 5 3 and 10.

45
00:02:21,570 --> 00:02:23,560
When you try to check the type of y.

46
00:02:23,670 --> 00:02:25,900
Actually if you're done type Y though you're Cain.

47
00:02:25,920 --> 00:02:30,660
Yeah it's nump high and it's basically umpiring.

48
00:02:30,720 --> 00:02:31,230
All right.

49
00:02:31,430 --> 00:02:32,210
OK great.

50
00:02:32,550 --> 00:02:35,710
That's how you define it one dimensional array.

51
00:02:35,790 --> 00:02:38,540
What if I wanted to define a two dimensional array.

52
00:02:38,720 --> 00:02:39,230
All right.

53
00:02:39,240 --> 00:02:41,180
That's actually pretty easy to what you could do.

54
00:02:41,190 --> 00:02:47,790
Then again you can define MP dot array or in parentheses here and then within a square brackets you

55
00:02:47,790 --> 00:02:51,720
can specify the rows so I'm specifying the first store within the matrix.

56
00:02:51,720 --> 00:02:56,460
We're going to be one and two and then you write comma and then you specify the next elements are going

57
00:02:56,460 --> 00:02:57,990
to be C and four or eight.

58
00:02:58,080 --> 00:03:01,420
And that would create basically your numbi Matrix.

59
00:03:01,470 --> 00:03:02,600
Let's stran it.

60
00:03:02,850 --> 00:03:04,380
And if you're on the Matrix I'll tell you.

61
00:03:04,410 --> 00:03:09,060
Now we have an array multidimensional array that's let's say two by two and there will be 1 in 2 3 and

62
00:03:09,060 --> 00:03:10,230
4 which are the same.

63
00:03:10,230 --> 00:03:15,600
And when they specify that you are right that's pretty much how can you like initialize an array single

64
00:03:15,600 --> 00:03:19,800
dimension or add multidimensional arrays perfect.

65
00:03:20,350 --> 00:03:24,310
So let's see how can we use pi and its power to actually develop.

66
00:03:24,330 --> 00:03:29,370
You know when initialize whatever metrics we want it let's assume that one of the finality in every

67
00:03:29,400 --> 00:03:32,720
single or multiple single dimensional array.

68
00:03:32,910 --> 00:03:36,540
And you wanted to initialised let's say with random numbers you don't need to actually go and write

69
00:03:36,570 --> 00:03:37,960
any functions for random.

70
00:03:38,010 --> 00:03:40,550
You can actually do it again within non-price very easy.

71
00:03:40,560 --> 00:03:47,790
You can hear if you can specify n.p. but random dot rent makes sense for random and then here you specify

72
00:03:47,790 --> 00:03:48,880
10 or eight.

73
00:03:48,900 --> 00:03:53,190
If you run it that will give you simply 10 numbers here.

74
00:03:53,250 --> 00:04:01,270
Elements that are not random basically there are uniformly distributed which is simply put the number

75
00:04:01,320 --> 00:04:05,440
from between zero on one that has a uniform distribution.

76
00:04:06,030 --> 00:04:10,410
What if I wanted to let's say the fine 10 by 10 let's say matrix.

77
00:04:10,500 --> 00:04:17,730
You can call it MP dot random the trend and then you specify the dimensions of your of your matrix.

78
00:04:17,730 --> 00:04:19,420
Let's run on it and they will tell you okay.

79
00:04:19,440 --> 00:04:25,930
Now you created a 10 by 10 matrix that has that has a lot of random numbers in here again uniformly

80
00:04:25,970 --> 00:04:26,810
distribute it.

81
00:04:26,970 --> 00:04:31,330
Or what if you wanted to create again random numbers.

82
00:04:31,350 --> 00:04:34,760
But the are normally distributed they have a normal distribution.

83
00:04:34,770 --> 00:04:40,370
How can you do that instead of frightening trend which is uniform distributed.

84
00:04:40,380 --> 00:04:44,760
You can make it more this distributed by adding rent n which send for more.

85
00:04:44,880 --> 00:04:47,990
OK this is pretty much the same thing you run it's okay.

86
00:04:48,040 --> 00:04:50,960
Again you need the number as you can again create here.

87
00:04:51,180 --> 00:04:57,630
If you wanted to create a integers you can specify that way by calling rent int which end for an end

88
00:04:57,750 --> 00:04:59,330
integer or.

89
00:04:59,750 --> 00:05:00,420
You run it.

90
00:05:00,530 --> 00:05:05,870
You will see that basically this function returns just one single number which has one single integer

91
00:05:06,380 --> 00:05:08,820
random integer between 1 and 10.

92
00:05:08,960 --> 00:05:13,310
All right and that's basically X that you got what he wanted.

93
00:05:13,310 --> 00:05:15,860
For example let's say visionary five numbers.

94
00:05:15,860 --> 00:05:18,700
You get anxious perform a syntex if you want to do this.

95
00:05:18,830 --> 00:05:19,650
You can quote it again.

96
00:05:19,680 --> 00:05:23,180
MP they'll trend them the trend integer.

97
00:05:23,180 --> 00:05:27,150
Here you specify the range do you need the number between 1 and 10.

98
00:05:27,230 --> 00:05:27,510
Okay.

99
00:05:27,530 --> 00:05:28,960
And you need actually five numbers.

100
00:05:28,970 --> 00:05:32,170
That's why you specify how many numbers you're looking for.

101
00:05:32,410 --> 00:05:38,630
Let's run it and you give it X simply has five numbers which is our randomly again random integers because

102
00:05:38,630 --> 00:05:41,210
he used Trent int he it already.

103
00:05:41,240 --> 00:05:44,920
Again it's a little bit little bit different so first you specify the window.

104
00:05:44,990 --> 00:05:49,480
What's my range you're going to be specifying she has pathfinding the number between 1 and 10.

105
00:05:49,700 --> 00:05:51,590
N they need 5 of them or 8.

106
00:05:51,800 --> 00:05:53,360
He did specify if I achieve this.

107
00:05:53,360 --> 00:05:53,690
Let's see.

108
00:05:53,690 --> 00:05:58,950
To make it 15 for example if I run it then I have 15 numbers that again range from 1 to 10.

109
00:05:58,970 --> 00:06:01,340
What if I wanted to make let's say from 1 to 100.

110
00:06:01,570 --> 00:06:04,450
I can run it they'll tell you in those who numbers are way way larger.

111
00:06:04,450 --> 00:06:12,170
That means because you are looking for integers that between 100 but again you're looking for thin numbers

112
00:06:12,470 --> 00:06:13,590
are perfect.

113
00:06:14,500 --> 00:06:21,640
Okay so what if I wanted to let's say to define read the numbers again using the A range.

114
00:06:21,640 --> 00:06:26,610
Actually we call that before we used it before but we were going to use it within the nump II library.

115
00:06:26,720 --> 00:06:27,400
Yes fine.

116
00:06:27,440 --> 00:06:31,190
MP The range from 1 till 50.

117
00:06:31,400 --> 00:06:36,350
If you run it they'll tell you okay now you actually specify the e.u. you specify kind of you know numbers

118
00:06:36,350 --> 00:06:41,200
that have this sequence 1 2 3 4 and so on up until 49.

119
00:06:41,400 --> 00:06:42,050
Right.

120
00:06:42,470 --> 00:06:42,960
OK.

121
00:06:43,250 --> 00:06:47,570
Let's run the next line again here if you'd answer that one that would tell you okay now we have n.p.

122
00:06:47,600 --> 00:06:54,710
the range again 1 50 n with the step 4 which is a little bit different than wanting to be confused but

123
00:06:54,710 --> 00:06:59,260
this is a little bit different we use a range compare to their end int he They're actually calling Okay

124
00:06:59,270 --> 00:07:02,370
now I need to read the numbers again a range.

125
00:07:02,480 --> 00:07:08,490
Okay so you have a kind of a sequence but we're going to do a defined number for one till 50 with a

126
00:07:08,490 --> 00:07:09,530
step forward.

127
00:07:09,920 --> 00:07:10,250
Okay.

128
00:07:10,280 --> 00:07:11,980
So he specify the step.

129
00:07:12,160 --> 00:07:17,630
So if he lets qualifies as specified one you would see that actually using a one step one two three

130
00:07:17,630 --> 00:07:17,940
four.

131
00:07:17,950 --> 00:07:23,060
And so one if they make this let's say two then you would see that actually skipping the numbers are

132
00:07:23,060 --> 00:07:28,890
going 1 3 because you skipped two three to five is skipped four and so on so forth.

133
00:07:28,970 --> 00:07:30,870
If we change to one make it let's say three.

134
00:07:30,880 --> 00:07:33,680
If you run it then you skipped every three numbers.

135
00:07:33,740 --> 00:07:40,430
If you make it 5 which is their original syntex we had then you have 1 6 11 and so on and so forth.

136
00:07:41,210 --> 00:07:47,180
What if I wanted to create a matrix and that meter x has a unique diagonal which means I need the matrix

137
00:07:47,180 --> 00:07:48,680
with all these are your primary voters.

138
00:07:48,770 --> 00:07:51,490
But the day agonal only has once.

139
00:07:51,920 --> 00:07:55,610
It's actually pretty common in most programming languages even in matlare for example.

140
00:07:55,610 --> 00:07:58,950
And here in London there's none pie we specify the.

141
00:07:58,960 --> 00:08:03,180
I basically only specify npe that I have five.

142
00:08:03,200 --> 00:08:09,560
Then if you run it that will create a matrix that meetings had tons of zeros zeros everywhere except

143
00:08:09,560 --> 00:08:11,780
that they added an element which is only once.

144
00:08:11,810 --> 00:08:12,040
Alright.

145
00:08:12,050 --> 00:08:14,030
And that's how you actually use y or.

146
00:08:14,030 --> 00:08:17,420
Sorry I in the PI package right.

147
00:08:17,930 --> 00:08:22,100
Okay what if I wanted to let's say create an array was all the.

148
00:08:22,110 --> 00:08:23,960
So we get to big heavy.

149
00:08:24,140 --> 00:08:26,900
Very handy when you go into some profiler project.

150
00:08:27,290 --> 00:08:31,480
You can just specify MP ones and then you specify the dimensions.

151
00:08:31,490 --> 00:08:34,030
How many ones do you need if you run it.

152
00:08:34,220 --> 00:08:39,390
They'll tell you OK now you created 5 array or five elements that all ones get.

153
00:08:39,530 --> 00:08:45,620
What if I want to find a matrix again so finding one dimension specified dimensions within brain disease

154
00:08:46,150 --> 00:08:52,800
you would be finding n.p. Dot ones and between pretend it's easier to pacify a 5 and 5.

155
00:08:53,060 --> 00:09:00,290
That simply creates my metrics that has all once and then me just has the mentions of 5 and 5 or X..

156
00:09:00,290 --> 00:09:04,440
Let's change this for example make it let's say 15 instead of 15.

157
00:09:04,460 --> 00:09:10,610
Then you will come up with 15 elements has on once he if you change this let's say to 15 and 15 if you

158
00:09:10,610 --> 00:09:12,490
run it then you come up with them.

159
00:09:12,530 --> 00:09:18,110
The larger matrix that has 15 and 15 15 by 15 ones perfect.

160
00:09:18,740 --> 00:09:23,920
What if I wanted to make or create an array with all zeros or a matrix that of zeroes.

161
00:09:23,930 --> 00:09:28,510
Again you can do it with mump high or n.p. zeros and off 5.

162
00:09:28,520 --> 00:09:30,840
If you Granites they will tell you OK we have all zeros.

163
00:09:30,840 --> 00:09:36,660
Again if you make it that say 50 then you create an array with of all zeros.

164
00:09:36,830 --> 00:09:38,750
Okay perfect.

165
00:09:38,750 --> 00:09:40,650
So now we know pretty much just to summarize again.

166
00:09:40,670 --> 00:09:43,750
Now we know how can we define PI every.

167
00:09:44,000 --> 00:09:47,280
How can we define non-pay me to X which is going to be very useful.

168
00:09:47,400 --> 00:09:53,270
Again when when we moved to the practical part of the course and now we want to get know some We're

169
00:09:53,270 --> 00:09:57,620
going to apply some methods and some functions that she'll put in some more information about an umpire

170
00:09:57,620 --> 00:09:59,350
reason matrices.
