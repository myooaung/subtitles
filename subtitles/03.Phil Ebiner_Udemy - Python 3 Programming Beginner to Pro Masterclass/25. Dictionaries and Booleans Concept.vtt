WEBVTT
1
00:00:00.570 --> 00:00:03.700
Hello everyone and welcome to this lecture and this lecture.

2
00:00:03.750 --> 00:00:09.500
We're going to cover two main concepts or important concepts in Python programming.

3
00:00:09.810 --> 00:00:12.590
And they are dictionaries and booleans.

4
00:00:12.660 --> 00:00:13.250
All right.

5
00:00:13.650 --> 00:00:15.150
So first the God thing.

6
00:00:15.150 --> 00:00:16.650
The dictionaries.

7
00:00:16.740 --> 00:00:19.790
Well first what do you mean by dictionaries so.

8
00:00:20.500 --> 00:00:27.260
Dictionaries are mainly used to define kind of what we call a key value pairs.

9
00:00:27.490 --> 00:00:35.280
So simply put we define instead of defying just a single integers for instance or finding a simple single

10
00:00:35.590 --> 00:00:41.980
float for example or let's say a list as we covered before here we're going to have kind of you know

11
00:00:42.050 --> 00:00:47.270
more advanced form more advanced data type that we call a dictionary okay.

12
00:00:47.500 --> 00:00:49.240
Think of the dictionary as a translator.

13
00:00:49.380 --> 00:00:49.850
OK.

14
00:00:50.110 --> 00:00:53.660
You list a list of keys associated with values.

15
00:00:53.680 --> 00:00:54.490
And that's what we call it.

16
00:00:54.490 --> 00:00:56.650
Key value pair are.

17
00:00:56.740 --> 00:01:01.870
So you can have a key that has a certain value and then another key that can give you another value

18
00:01:01.940 --> 00:01:04.850
on another key 3 they give you another value.

19
00:01:05.100 --> 00:01:07.390
And that's pretty much how can you actually define a dictionary.

20
00:01:07.600 --> 00:01:14.110
So if you wanted to access a specific value Okay within the dictionary you don't access it with an index

21
00:01:14.260 --> 00:01:15.510
as we have done before.

22
00:01:15.550 --> 00:01:20.640
When we described lists actually again access this value using its key.

23
00:01:20.770 --> 00:01:21.110
Okay.

24
00:01:21.130 --> 00:01:24.530
Again think of it as kind of a door you are opening the door.

25
00:01:24.610 --> 00:01:29.680
You know like of axing that value you're using that specific key associated with that value.

26
00:01:29.740 --> 00:01:30.210
Okay.

27
00:01:30.370 --> 00:01:31.360
What's the importance of it.

28
00:01:31.360 --> 00:01:34.320
Again I'm going to have tons of examples are going to show you what they mean by dictionaries and why

29
00:01:34.320 --> 00:01:35.720
do we even need it for.

30
00:01:35.750 --> 00:01:36.250
Own.

31
00:01:36.700 --> 00:01:39.470
So let's go ahead and define our first dictionary.

32
00:01:39.520 --> 00:01:39.710
Okay.

33
00:01:39.730 --> 00:01:40.430
Let's get started.

34
00:01:40.480 --> 00:01:46.720
So first let's assume they wanted to define a dictionary and say okay my dictionary for example equals

35
00:01:46.720 --> 00:01:53.170
to the defined dictionary using Quilly brackets so we do this to define a dictionary and then you associate

36
00:01:53.200 --> 00:01:58.970
simply key value pips or case you do this column and you do this all right.

37
00:01:59.120 --> 00:02:03.640
Basically he defined the key he defined the value associated to that key.

38
00:02:03.640 --> 00:02:05.890
Simply put it is a key one.

39
00:02:06.220 --> 00:02:09.920
And you're going to say okay value 1 that will be the first key value pair.

40
00:02:10.000 --> 00:02:14.440
We do comma press enter our right and we can do the same thing again.

41
00:02:14.810 --> 00:02:17.800
Or I I'm going to hit again here.

42
00:02:17.800 --> 00:02:20.030
Define key to get.

43
00:02:20.080 --> 00:02:26.170
We can actually do this just to make a little bit more creevy if you value too great.

44
00:02:26.290 --> 00:02:31.380
Sounds great comma and then we define the last element which is again.

45
00:02:32.900 --> 00:02:34.120
Key.

46
00:02:34.640 --> 00:02:38.920
Three associated two values three.

47
00:02:40.510 --> 00:02:41.360
All right.

48
00:02:41.410 --> 00:02:45.910
And that's pretty much how can you define your first dictionaries and how we define a dictionary that

49
00:02:45.910 --> 00:02:47.370
has a key value pairs.

50
00:02:47.380 --> 00:02:51.840
Basically you can access that value using a specific key associated with that value.

51
00:02:51.850 --> 00:02:52.810
That's pretty much it.

52
00:02:53.020 --> 00:02:54.980
Let's run it actually looks good.

53
00:02:55.210 --> 00:02:57.540
So we forward it to view let's say my dictionary.

54
00:02:57.580 --> 00:02:59.140
If I wanted to view it there.

55
00:02:59.250 --> 00:02:59.490
Okay.

56
00:02:59.510 --> 00:03:02.980
There's actually a key added value to the value and so on so forth.

57
00:03:02.980 --> 00:03:03.590
Great.

58
00:03:03.830 --> 00:03:10.980
What I wanted to take a look at the type of unisex type of dictionary that of my dictionary or if I

59
00:03:10.990 --> 00:03:15.060
had that they we'll say well I did a typo extradition which makes sense.

60
00:03:15.070 --> 00:03:17.300
And we're expecting this letter.

61
00:03:17.310 --> 00:03:19.310
Can we access elements within the dictionary.

62
00:03:19.330 --> 00:03:22.350
Let's assume they wanted to access this value.

63
00:03:23.590 --> 00:03:28.300
Compared to lists if you wanted to access specific elements within the list you can access them using

64
00:03:28.300 --> 00:03:35.460
the index right here to access elements within a dictionary you access them using their key.

65
00:03:35.740 --> 00:03:40.540
So let's see how can we access this specific elements within our dictionary look at what you could do

66
00:03:40.650 --> 00:03:47.170
and say okay my dictionary or print square brackets and then inside the square brackets you say okay

67
00:03:47.200 --> 00:03:50.180
I need the value associated to ketu.

68
00:03:50.210 --> 00:03:50.760
All right.

69
00:03:50.980 --> 00:03:56.190
It's like open for example that specific door opened the door using this basically key.

70
00:03:56.350 --> 00:04:01.880
So you can return this event food that you would come up with value too which is associated to spot

71
00:04:02.050 --> 00:04:07.630
the corresponding key listicle look at some we know more practical example let's assume that I wanted

72
00:04:07.630 --> 00:04:13.500
to find a dictionary that contains the information about Apple iPhone X which as you know was released

73
00:04:13.510 --> 00:04:15.930
let's say in 20 18 for example.

74
00:04:16.030 --> 00:04:16.950
Let's do this.

75
00:04:16.990 --> 00:04:23.040
The week in my dictionary sorry my dictionary equals to open again colia brackets.

76
00:04:23.320 --> 00:04:29.550
What you could do is say okay I'm going to list here for example my brand is Apple.

77
00:04:30.320 --> 00:04:31.460
Right.

78
00:04:31.630 --> 00:04:35.510
The first one the first element the dictionary and the second element means the key.

79
00:04:35.510 --> 00:04:39.180
My model is iPhone.

80
00:04:41.390 --> 00:04:43.110
X for example whatever you can call it.

81
00:04:43.270 --> 00:04:43.890
Okay.

82
00:04:44.210 --> 00:04:49.890
And then they're going to specify Okay my year is simply 2018.

83
00:04:51.060 --> 00:04:51.850
Right.

84
00:04:52.140 --> 00:04:53.750
Well you could do can do this.

85
00:04:53.770 --> 00:04:55.170
Okay looks great.

86
00:04:55.170 --> 00:05:00.720
So we define brand this Apple model as iPhone X and year is 2013 looks great.

87
00:05:00.780 --> 00:05:05.160
If I had done it then you'd find a dictionary if you wanted to print Let's see addiction against Hey

88
00:05:05.210 --> 00:05:13.140
print my discourse dictionary ranit you come up with a brand Apple model iPhone year 2013 looks great.

89
00:05:13.170 --> 00:05:16.870
What if I wanted for example to access iPhone X. How can it access this.

90
00:05:17.010 --> 00:05:18.390
So there's again using its keenness.

91
00:05:18.390 --> 00:05:18.650
Okay.

92
00:05:18.660 --> 00:05:24.250
Go to my dictionary open escrow bracket at access simply my model.

93
00:05:24.660 --> 00:05:28.710
If you do this you say okay go to my dictionary get whatever corresponding to my model.

94
00:05:28.800 --> 00:05:30.300
We're going to turn my iPhone x.

95
00:05:30.480 --> 00:05:32.330
Okay that's great.

96
00:05:32.370 --> 00:05:35.460
What if I wanted for example to access let's say.

97
00:05:35.660 --> 00:05:44.310
The second element for example would assume they want to access my for example year 2014 I can say okay

98
00:05:44.640 --> 00:05:50.340
I can go to my dictionary and square brackets and access my year.

99
00:05:50.350 --> 00:05:52.180
If I do this within it in 2018.

100
00:05:52.290 --> 00:05:53.650
Okay perfect.

101
00:05:53.700 --> 00:05:58.730
What if I wanted to let's say an item an existing dictionary.

102
00:05:59.220 --> 00:06:00.430
How can we do that.

103
00:06:00.570 --> 00:06:02.490
We can do that by again assigning.

104
00:06:02.530 --> 00:06:02.780
OK.

105
00:06:02.790 --> 00:06:03.950
Going to the my dictionary.

106
00:06:03.960 --> 00:06:07.700
I wanted to ask an item or adline to my dictionary.

107
00:06:07.720 --> 00:06:09.120
Okay which is the exact indication of that.

108
00:06:09.120 --> 00:06:14.490
Have you called binding my dictionary and add let's assume thing that for example column.

109
00:06:14.710 --> 00:06:20.730
Okay and that column will have an associated value you're going to say OK it equals to and then you

110
00:06:20.730 --> 00:06:22.640
specify let's say the value which is read.

111
00:06:22.980 --> 00:06:29.080
Basically what you have done here is adding existing elements to your existing dictionary or I find

112
00:06:29.100 --> 00:06:30.310
that nothing happened.

113
00:06:30.320 --> 00:06:37.080
Aquarius thing looks good and it can go in here say okay print my underscored dictionary and that you

114
00:06:37.080 --> 00:06:41.220
would find that column red has been added to your dictionary which is great right.

115
00:06:41.400 --> 00:06:45.220
What if I wanted for example to delete a specific element within a dictionary.

116
00:06:45.390 --> 00:06:50.520
What you could do again to say okay use delete and then you can specify for example I wanted to let

117
00:06:50.520 --> 00:06:53.100
say delete my brand Apple x.

118
00:06:53.190 --> 00:07:00.840
Apple do that Mexico when I do delete for instance the bell will stand for delete What's my name of

119
00:07:00.840 --> 00:07:01.740
my dictionary.

120
00:07:01.800 --> 00:07:07.650
My dict open square brackets anyone to delete the entire brand.

121
00:07:07.650 --> 00:07:15.530
For example if I did on that and if I come here desiccate print my dictionary around it you'll find

122
00:07:15.600 --> 00:07:20.630
the brand has been gone just model year and cholera's it's the only values that have been appearing

123
00:07:20.630 --> 00:07:21.310
here.

124
00:07:21.840 --> 00:07:24.300
What if I wanted to delete for example the entire dictionary.

125
00:07:24.290 --> 00:07:24.660
Let's see.

126
00:07:24.660 --> 00:07:25.600
Can we do this.

127
00:07:25.770 --> 00:07:27.730
We can delete it by seeing a kid.

128
00:07:27.960 --> 00:07:32.250
My underscored a dictionary that would do the entire thing not just here.

129
00:07:32.400 --> 00:07:34.480
As we deleted just one key value pair.

130
00:07:34.570 --> 00:07:35.940
He is going to do the entire thing.

131
00:07:35.940 --> 00:07:36.600
Let's leave it.

132
00:07:36.630 --> 00:07:38.070
It is gone already.

133
00:07:38.070 --> 00:07:42.090
Let's assume that no one is for example you not as are unknown in a okay let's say print are going to

134
00:07:42.090 --> 00:07:44.800
print my dictionary on it then look.

135
00:07:44.820 --> 00:07:49.080
Well I don't know where that is because you know my diction is not defined because you just deleted

136
00:07:49.080 --> 00:07:49.930
their type of thing.

137
00:07:50.100 --> 00:07:51.130
OK.

138
00:07:51.870 --> 00:07:54.230
That's pretty much all what I have for the dictionary.

139
00:07:54.240 --> 00:07:56.730
So let's add a cover.

140
00:07:57.260 --> 00:08:00.230
Let's give you again.

141
00:08:00.390 --> 00:08:02.040
Review what we have done so far.

142
00:08:02.080 --> 00:08:05.410
Here we know how can we find a dictionary as a kind of a key value period.

143
00:08:05.520 --> 00:08:07.780
Now we know how can we walk in the type of the dictionary.

144
00:08:07.890 --> 00:08:12.530
How can we let say X a specific element within the dictionary using its key.

145
00:08:12.600 --> 00:08:15.370
So by the key kind of thing the value which is great.

146
00:08:15.570 --> 00:08:18.320
Now I know how can we add element within a dictionary.

147
00:08:18.600 --> 00:08:22.920
How can I delete a specific item or key value paired with in the dictionary.

148
00:08:22.920 --> 00:08:24.630
And how can and delete the entire thing.

149
00:08:24.740 --> 00:08:25.180
All right.

150
00:08:25.240 --> 00:08:29.040
And that's pretty much kind of a quick summary of dictionaries and getting getting them extensively

151
00:08:29.040 --> 00:08:31.580
within the practical aspect of the approach.

152
00:08:31.930 --> 00:08:38.880
OK the next topic that I wanted to discuss is what Khalid booleans already so booleans are values that

153
00:08:38.880 --> 00:08:45.800
can be presented as one of two coniston objects either false or to booleans behave like an integers

154
00:08:45.840 --> 00:08:47.850
of 0 or 1 or 8.

155
00:08:47.880 --> 00:08:48.690
What do you mean by that.

156
00:08:48.690 --> 00:08:55.950
So in general when we are in computer systems in general or everything you see on the screen that you

157
00:08:55.950 --> 00:09:02.190
see or the colleges you see of the numbers you are doing everything is just presented as bunch of zeros

158
00:09:02.190 --> 00:09:05.070
and one were to zero indicates false.

159
00:09:05.220 --> 00:09:06.760
One indicates two.

160
00:09:06.870 --> 00:09:07.860
That's pretty much it.

161
00:09:07.980 --> 00:09:14.490
Okay by putting all these zeros in one next to each other then you come up with kind of you know a meaning

162
00:09:14.490 --> 00:09:15.160
to it.

163
00:09:15.690 --> 00:09:20.860
OK so you can you can basically put your send the message using these bunch of zeros and ones.

164
00:09:20.880 --> 00:09:22.200
And that's what I call a booleans.

165
00:09:22.230 --> 00:09:22.780
OK.

166
00:09:23.010 --> 00:09:28.230
So when we define for example specifically at say Number 9 or 8 or whenever these are called decimal

167
00:09:28.230 --> 00:09:30.370
numbers in booleans.

168
00:09:30.460 --> 00:09:35.330
Okay the B's is 2 which means we only have two combinations either 0 or 1.

169
00:09:35.370 --> 00:09:37.480
That's it that's all we could do.

170
00:09:38.010 --> 00:09:42.720
So in Python what we could stuka see okay if I say true.

171
00:09:42.860 --> 00:09:47.430
Okay you see that has a list of there's green okay which means that this is basically reserved.

172
00:09:47.520 --> 00:09:50.150
Kind of you know seeing one that means.

173
00:09:50.350 --> 00:09:52.980
Initially that has been satisfied and there is a flag.

174
00:09:52.980 --> 00:09:58.480
There is a qualitative one which means right which means it's true which means 1.

175
00:09:58.540 --> 00:10:02.800
If we think about false is basically far off okay whodunit.

176
00:10:02.820 --> 00:10:04.250
That's basically false.

177
00:10:04.570 --> 00:10:06.350
OK so what's the advantage of doing this.

178
00:10:06.350 --> 00:10:10.980
Actually you can use a true and false in what we call it the condition the statements were going to

179
00:10:10.980 --> 00:10:13.770
cover puns of condition statements in the future.

180
00:10:14.230 --> 00:10:19.760
We're going to learn how to do if conditions and how to do a conditional statements and so on.

181
00:10:19.820 --> 00:10:21.080
Here is a quick example.

182
00:10:21.150 --> 00:10:27.770
Let's assume that we have for instance X equals stem for instance n I define other variable y equal

183
00:10:27.780 --> 00:10:31.740
stenn and what I could do if they wanted to see okay.

184
00:10:32.190 --> 00:10:34.880
Please can you check if X.

185
00:10:34.990 --> 00:10:37.000
Okay that's you know you might like a little big.

186
00:10:37.010 --> 00:10:44.120
Get a little bit surprised but then do something strange here and then say is X equals equals y right.

187
00:10:45.300 --> 00:10:46.280
That's it.

188
00:10:46.290 --> 00:10:54.040
So what I have done here is basically this is what assignment which means a put value of 10 inside X

189
00:10:54.170 --> 00:10:56.480
would value 10 inside y.

190
00:10:56.520 --> 00:10:59.280
This lists copy it here and separate one.

191
00:10:59.280 --> 00:11:04.610
This is what we call it compared isten work comparing single word checking.

192
00:11:04.800 --> 00:11:06.360
Okay what a single key.

193
00:11:06.360 --> 00:11:09.410
Could you please check if X equals to y.

194
00:11:09.420 --> 00:11:11.270
We do this by doing equal equal.

195
00:11:11.460 --> 00:11:11.860
OK.

196
00:11:11.970 --> 00:11:15.110
Looks strange but that's how it is in most programming languages.

197
00:11:15.330 --> 00:11:18.020
So we need to find x equals y m single k.

198
00:11:18.030 --> 00:11:20.730
Could you please you're asking kind of person to check it.

199
00:11:20.730 --> 00:11:25.410
Can you tell me if X equals Y Not and on it it's only when it's actually true.

200
00:11:25.500 --> 00:11:25.850
Why.

201
00:11:25.850 --> 00:11:26.800
Because it is true.

202
00:11:26.820 --> 00:11:29.180
X was 10 and Y was 10.

203
00:11:29.460 --> 00:11:33.670
OK what if I saw him change this and make it let's say to.

204
00:11:33.730 --> 00:11:35.010
If I ran it and he did.

205
00:11:35.040 --> 00:11:39.660
Asking could you please tell me if X equals equals y.

206
00:11:39.840 --> 00:11:42.310
If I did that's only well not that's false.

207
00:11:42.330 --> 00:11:44.230
That's kind of a flagged as you call it zero.

208
00:11:44.370 --> 00:11:44.970
Okay.

209
00:11:45.030 --> 00:11:49.190
And then you can put whatever that answer in in somewhere else or printed in the screen for example

210
00:11:49.190 --> 00:11:51.390
eg this print for instance.

211
00:11:51.540 --> 00:11:54.250
And they're going to print it on the screen and they reckon you'll get well.

212
00:11:54.270 --> 00:11:57.290
It's fops OK.

213
00:11:57.450 --> 00:12:02.130
Obviously there are tons of stuff that we could do here that are not equal or greater than or equal.

214
00:12:02.190 --> 00:12:05.930
You can do whatever just you again are going to have an entire lecture discover that.

215
00:12:06.060 --> 00:12:12.010
But just seen a quick overview let's say I wanted to print a key if X for example is greater than y.

216
00:12:12.130 --> 00:12:12.520
OK.

217
00:12:12.570 --> 00:12:15.830
If I had that if I have that and then well that's true why.

218
00:12:15.840 --> 00:12:20.420
Because X was 10 and Y was actually 2 so conditions state statement can.

219
00:12:20.460 --> 00:12:21.760
You're comparing the two.

220
00:12:21.930 --> 00:12:26.850
And since the answer is true and when I reply back with a boolean value of true which is you know kind

221
00:12:26.850 --> 00:12:29.830
of while you are discussing the bullion's to start with again.

222
00:12:29.940 --> 00:12:33.990
To summarize bullion's means you add ones or to add false.

223
00:12:34.020 --> 00:12:38.850
We can use them extensively through the practical aspect of the course and that's pretty much all what

224
00:12:38.850 --> 00:12:39.750
we have for this lecture.

225
00:12:39.750 --> 00:12:42.270
Again you're getting closer to messing Python.

226
00:12:42.270 --> 00:12:45.050
I hope you enjoyed it and see you in the exercises.
