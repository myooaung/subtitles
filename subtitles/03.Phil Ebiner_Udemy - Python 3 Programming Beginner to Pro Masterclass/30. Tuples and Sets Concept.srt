1
00:00:01,770 --> 00:00:03,840
Hello everyone and welcome back.

2
00:00:04,230 --> 00:00:09,300
So in a section we're going to cover one called Two polls and sets.

3
00:00:09,300 --> 00:00:10,290
So again a slurring.

4
00:00:10,290 --> 00:00:15,940
What do you mean by you both in my set and we'll see how can we define tuples and define sets.

5
00:00:15,990 --> 00:00:21,810
And what's the difference mainly between duple handsets and all other you know data pipes that we cover

6
00:00:21,900 --> 00:00:23,920
previously in the past.

7
00:00:24,030 --> 00:00:30,580
So let's get started with tuples for us stupple is a sequence of water column immutable Python objects.

8
00:00:30,600 --> 00:00:33,720
Okay it looks intimidating but you know it's very very simple.

9
00:00:33,930 --> 00:00:34,710
Simply put.

10
00:00:34,710 --> 00:00:39,510
Once you find a tuple you simply can change it again moving forward.

11
00:00:39,780 --> 00:00:45,390
It's kind of you know like a like you know like using you're sort of variable and that variable doesn't

12
00:00:45,390 --> 00:00:45,750
change.

13
00:00:45,750 --> 00:00:47,580
You're not allowed to even write it again.

14
00:00:47,670 --> 00:00:47,870
OK.

15
00:00:47,880 --> 00:00:52,920
It's like it's like you're password you know you just said it once and you're not allowed to change

16
00:00:52,920 --> 00:00:53,040
it.

17
00:00:53,040 --> 00:00:54,920
For example you know like ever again.

18
00:00:55,070 --> 00:00:55,500
OK.

19
00:00:55,680 --> 00:00:56,890
Let's assume that you can change it.

20
00:00:56,910 --> 00:00:57,730
Moving forward.

21
00:00:57,780 --> 00:00:58,420
Right.

22
00:00:58,440 --> 00:01:00,500
That's pretty much what tuples is.

23
00:01:00,510 --> 00:01:07,330
You know the definition of tuples you know is pretty much very similar to the definition of lists a

24
00:01:07,350 --> 00:01:12,060
way of accessing or indexing elements in tuples is very similar to a list as well.

25
00:01:12,060 --> 00:01:14,910
And you're going to see that there's tons of similarities between the two.

26
00:01:14,910 --> 00:01:16,810
The only difference is tuples.

27
00:01:16,830 --> 00:01:19,660
Simply you can just go and override it all.

28
00:01:19,740 --> 00:01:20,250
That's it.

29
00:01:20,250 --> 00:01:21,470
That's all what I wanted to know.

30
00:01:21,540 --> 00:01:22,840
All right let's get started.

31
00:01:23,190 --> 00:01:24,520
So can we find a tuple.

32
00:01:24,570 --> 00:01:30,120
Let's get an idea for a slogan to say okay I'm going to find tuple underscored one is whatever you can

33
00:01:30,120 --> 00:01:31,990
qualify tuple or whatever.

34
00:01:32,110 --> 00:01:35,480
When we define a list we use square brackets like this right.

35
00:01:35,640 --> 00:01:40,450
When we define a tuple we actually use parentheses like this.

36
00:01:40,560 --> 00:01:46,490
Then you can list whatever you want and say okay mench for example the first element Sandy for example

37
00:01:46,490 --> 00:01:53,070
a second element 10 15 whatever in 1992 whatever you want.

38
00:01:53,100 --> 00:01:54,910
And that we're going to be my tuple.

39
00:01:54,960 --> 00:01:55,280
That's it.

40
00:01:55,290 --> 00:01:56,660
That's how you quality.

41
00:01:57,090 --> 00:02:02,400
Let's make sure that's actually we are on the right page in this case to type my tuple and the score

42
00:02:02,400 --> 00:02:08,280
one for that that then you'll find that the type is duple which is a new data type that we will just

43
00:02:08,280 --> 00:02:11,790
introducing know how to access elements within the tuple.

44
00:02:11,790 --> 00:02:13,690
Actually it's even even easier.

45
00:02:13,690 --> 00:02:22,170
So I say okay I want to go into cuple of duple underscored one it's my tuple and I want it to access.

46
00:02:22,170 --> 00:02:25,560
For example let's say the first element here Mitch.

47
00:02:25,590 --> 00:02:31,140
It's exactly the same as we have done before when it comes to a list open square bracket and let's say

48
00:02:31,140 --> 00:02:37,040
0 that would return Mitch and make it one that would return Sandy.

49
00:02:37,350 --> 00:02:38,750
Make it two.

50
00:02:39,270 --> 00:02:41,130
And that should determine number 10.

51
00:02:41,180 --> 00:02:46,300
Right again 0 1 2 3 and four exactly the same as last weekend.

52
00:02:46,580 --> 00:02:47,380
All right.

53
00:02:47,430 --> 00:02:49,190
That's how we do indexing.

54
00:02:49,200 --> 00:02:55,230
How can we do slicing to capture for example specific elements again even easier to pull on the score

55
00:02:55,270 --> 00:02:59,920
one open square brackets and then you would say one is for example 1 to 3.

56
00:03:00,090 --> 00:03:04,260
If you're on it again that's in the zero that's index one you get x.

57
00:03:04,950 --> 00:03:06,100
This is number two right.

58
00:03:06,120 --> 00:03:14,760
So again take 10 and 15 because when it's mentioned three take up two but excluding number three exactly

59
00:03:14,760 --> 00:03:17,880
the same as we've done before in the past.

60
00:03:18,360 --> 00:03:20,330
Now to the fun part all that looks very similar.

61
00:03:20,360 --> 00:03:20,600
Okay.

62
00:03:20,610 --> 00:03:24,490
The only difference basically as we have done before now is this.

63
00:03:24,530 --> 00:03:25,580
So it's the square bracket.

64
00:03:25,590 --> 00:03:27,500
We just make it you know entity that's it.

65
00:03:27,510 --> 00:03:28,670
That's all what it is.

66
00:03:28,800 --> 00:03:29,570
Okay.

67
00:03:29,840 --> 00:03:30,810
So what's the difference.

68
00:03:30,840 --> 00:03:35,800
Let's see what's the difference so if we say for example tuple underscore one and I want to go let's

69
00:03:35,820 --> 00:03:36,090
see it.

70
00:03:36,120 --> 00:03:37,490
Element number one.

71
00:03:37,530 --> 00:03:40,920
And then one at assigned It's number thirty two it's all right.

72
00:03:41,160 --> 00:03:42,510
OK if I do this.

73
00:03:42,600 --> 00:03:43,800
No that's the problem here.

74
00:03:43,830 --> 00:03:44,190
I say OK.

75
00:03:44,220 --> 00:03:48,650
No no you're not allowed to do that tuple object does not support them.

76
00:03:48,660 --> 00:03:49,490
SIMON OK.

77
00:03:49,530 --> 00:03:55,170
Which makes sense because that contradicts with the definition of the tuple which is a sequence of immutable

78
00:03:55,170 --> 00:03:58,050
Python objects which as you know stuff that you can't change.

79
00:03:58,100 --> 00:04:01,910
He is asking to change this element and put 30 in it.

80
00:04:01,920 --> 00:04:03,170
Which is you are not allowed.

81
00:04:03,270 --> 00:04:04,740
Alright OK.

82
00:04:04,830 --> 00:04:06,410
This is basically the main difference.

83
00:04:06,800 --> 00:04:11,520
Okay the last one is if you wanted to create a new tuple from an existing tuple.

84
00:04:11,580 --> 00:04:13,260
You can actually do that too.

85
00:04:13,320 --> 00:04:16,790
So let's assume that I wanted for example to create.

86
00:04:17,980 --> 00:04:19,640
Tuple and other tuple for example.

87
00:04:19,640 --> 00:04:24,610
So I'm going to say okay I need to let say the same group that we have before you pull one.

88
00:04:24,610 --> 00:04:31,780
I'm going to copy here again and I want to create let's say tuple underscores to and let's say going

89
00:04:31,780 --> 00:04:33,060
to define it.

90
00:04:33,070 --> 00:04:38,010
As for let's say 5 9 and let's say two.

91
00:04:38,140 --> 00:04:40,140
OK that's another tuple.

92
00:04:40,710 --> 00:04:45,790
And when I wanted to do here if they wanted to let's say create a new tuple I can actually do this from

93
00:04:45,790 --> 00:04:48,260
the pre to these two tuples.

94
00:04:48,360 --> 00:04:51,400
I can create the tuple count call to put three.

95
00:04:51,530 --> 00:04:55,610
That's equal to tuple and the squad one class.

96
00:04:56,340 --> 00:04:58,000
Tuple underscored two.

97
00:04:58,300 --> 00:04:59,440
Well that's allowed.

98
00:04:59,600 --> 00:05:00,640
If I had done that.

99
00:05:00,720 --> 00:05:02,910
We see there's no error here which is good.

100
00:05:03,120 --> 00:05:08,690
And if I wanted to say prints my tuple underscored 3 I can do that.

101
00:05:08,700 --> 00:05:15,180
Then you could find Mitch send the 10 15 1992 for 5 9 2 which is simply you concatenate the tuple 1

102
00:05:15,180 --> 00:05:17,360
and 2 you have to get our.

103
00:05:17,370 --> 00:05:18,300
Perfect.

104
00:05:19,360 --> 00:05:26,300
The next topic that we wanted to discuss here is what it sets eset is an un ordered collection of items.

105
00:05:26,320 --> 00:05:30,560
Simply put there are no no duplicates and we have no order.

106
00:05:30,790 --> 00:05:31,060
OK.

107
00:05:31,090 --> 00:05:31,850
What do they mean.

108
00:05:32,080 --> 00:05:32,710
Let's take a look.

109
00:05:32,710 --> 00:05:34,650
So a little soon ago find my set.

110
00:05:34,660 --> 00:05:36,310
How can we define a set with a finite set.

111
00:05:36,310 --> 00:05:39,540
Using crilley brackets masik is one two and three.

112
00:05:39,580 --> 00:05:41,320
Then you have defined the set.

113
00:05:41,500 --> 00:05:46,460
And if I wanted to let's say print for example might set they're going to print my set for it.

114
00:05:46,480 --> 00:05:48,710
You'll find that this is my set looks great.

115
00:05:49,110 --> 00:05:56,670
And if I wanted for example to let's say get the data type and say OK I need my datatype of mice of

116
00:05:56,680 --> 00:05:59,120
my set for that.

117
00:05:59,140 --> 00:06:02,180
Then if I did up I actually said OK that's great.

118
00:06:02,310 --> 00:06:02,570
Ah.

119
00:06:02,650 --> 00:06:04,670
So what do you mean by having no duplicates.

120
00:06:04,700 --> 00:06:07,480
Okay which is basically each element has to be unique.

121
00:06:07,480 --> 00:06:08,460
Let's take a look.

122
00:06:08,800 --> 00:06:11,990
Let's assume going to define again my underscore two sets.

123
00:06:12,010 --> 00:06:19,430
And I'm going to create let's say couple of elements one two three four and this city and get it on

124
00:06:19,440 --> 00:06:20,290
that.

125
00:06:20,640 --> 00:06:27,700
And if I let's say I'm going to print my on the record set on it you'll come up with one two three four

126
00:06:27,790 --> 00:06:33,640
which is we are you know if you take a look you find these two elements have been ignored which makes

127
00:06:33,640 --> 00:06:39,100
sense because now because these elements are duplicated because we have two and three here we have two

128
00:06:39,100 --> 00:06:40,080
and three again.

129
00:06:40,270 --> 00:06:45,340
Basically what we have done here is set which doesn't allow duplicates that are no duplicates.

130
00:06:45,340 --> 00:06:46,840
Each element has to be unique.

131
00:06:47,010 --> 00:06:47,290
Right.

132
00:06:47,350 --> 00:06:48,870
And the order doesn't really matter.

133
00:06:49,050 --> 00:06:49,620
All right.

134
00:06:49,840 --> 00:06:52,110
That's pretty much how can you not define a set.

135
00:06:52,120 --> 00:06:57,490
And if you're if if you define a set and if you have different elements that are duplicated you know

136
00:06:57,520 --> 00:07:02,290
if you print a few grammar again and print your set you'll find that the element that duplicated the

137
00:07:02,300 --> 00:07:03,940
Odyssey basically eliminate it.

138
00:07:03,960 --> 00:07:09,660
Make any duplicate element is eliminated only just wondered if the sample is kept right.

139
00:07:10,030 --> 00:07:13,000
So how can we convert for example from a list to a set.

140
00:07:13,000 --> 00:07:19,830
So let's the finalist my list and why else with using square brackets the fine 1 two three and 2.

141
00:07:19,910 --> 00:07:28,890
K this is my list so if I actually run this you will find that if I wanted to print for example my underscored

142
00:07:28,920 --> 00:07:29,760
list.

143
00:07:29,920 --> 00:07:32,820
If I run it you'll find that my list has one two three and two.

144
00:07:32,890 --> 00:07:41,050
OK if I wanted to convert from a list to eset I can do this and say okay my set would be equal.

145
00:07:41,060 --> 00:07:45,970
Do I need to create the set out of my list.

146
00:07:47,180 --> 00:07:48,760
So again go to my list.

147
00:07:48,770 --> 00:07:52,070
I create a set out of it and put it in my set.

148
00:07:52,290 --> 00:07:53,970
All right so let's see that.

149
00:07:54,350 --> 00:07:58,700
An if I won it too little say print my set for it.

150
00:07:58,760 --> 00:08:03,020
You'll find that basically the element has been due any duplicate element has eliminated it so this

151
00:08:03,020 --> 00:08:04,580
too has been eliminated.

152
00:08:04,730 --> 00:08:10,940
We only kept one two or three which is simply how can we convert from a list to a set and that's it.

153
00:08:11,030 --> 00:08:15,260
That's all what I want you guys to know when it comes to tuples and sets and that's pretty much what

154
00:08:15,260 --> 00:08:16,170
I have with this lecture.

155
00:08:16,170 --> 00:08:19,960
I hope you guys enjoyed it and see you guys in the next lecture.
