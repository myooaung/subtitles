WEBVTT
1
00:00:02.400 --> 00:00:06.570
So our stock price component is taking shape, we're fetching data now,

2
00:00:06.720 --> 00:00:08.910
we added some basic validation,

3
00:00:08.910 --> 00:00:13.420
we also have different states for different results of our API calls.

4
00:00:13.430 --> 00:00:16.820
Now one thing is missing or one thing can be added,

5
00:00:16.870 --> 00:00:20.390
right now we can use this component only from inside,

6
00:00:20.430 --> 00:00:22.830
we can enter a value here and that's it

7
00:00:22.950 --> 00:00:28.880
but in reality, we might want to be able to pass in a stock symbol from outside,

8
00:00:28.920 --> 00:00:36.620
so as an attribute to this component here in our DOM to initialize this component with that stock symbol

9
00:00:36.900 --> 00:00:42.930
or not only to initialize with it but also to change it at runtime because you always have to keep

10
00:00:42.930 --> 00:00:49.440
in mind that you're building these components to be used in other web applications and in such a web application,

11
00:00:49.760 --> 00:00:56.220
the developer building that web application might also have a different possibility for the users of

12
00:00:56.220 --> 00:00:59.010
that app to set the stock price.

13
00:00:59.010 --> 00:01:06.240
So besides that built-in input here, it would be great if we could set the stock symbol from outside

14
00:01:06.690 --> 00:01:08.240
and that is what I want to do next,

15
00:01:08.280 --> 00:01:15.940
I want to accept a property stock symbol that can be set from both in and outside.

16
00:01:15.950 --> 00:01:22.110
Now for that, I will add a new property with the prop decorator here which needs to be imported from

17
00:01:22.590 --> 00:01:27.480
@stencil/core and I'll name this stock symbol,

18
00:01:27.500 --> 00:01:34.080
this will be a string. Now stock symbol is what can be set from outside this component, so passed

19
00:01:34.090 --> 00:01:39.350
in as an attribute or set directly as a property of course programmatically.

20
00:01:39.350 --> 00:01:46.980
This stock symbol should be considered when we make a request here and this constant stock symbol is

21
00:01:46.980 --> 00:01:52.740
not the same as this property of course, constants live inside of the scope of this method,

22
00:01:52.860 --> 00:01:55.570
properties are class wide.

23
00:01:55.830 --> 00:02:01.740
So how can we now use such a potentially existing stock symbol?

24
00:02:01.800 --> 00:02:07.650
So here in onFetchStockPrice, I actually always want to use the user input because this gets triggered

25
00:02:07.650 --> 00:02:12.150
when this button gets pressed and when this button gets pressed, I certainly want to respect what the

26
00:02:12.150 --> 00:02:13.060
user enters.

27
00:02:13.200 --> 00:02:19.380
So we don't really need to check for the existence of a stock symbol, so a globally set stock symbol in

28
00:02:19.380 --> 00:02:21.180
onFetchStockPrice,

29
00:02:21.350 --> 00:02:29.640
instead I want to fetch data for that symbol right at the start because this component can be created

30
00:02:30.060 --> 00:02:33.180
with such a stock symbol set right from the start,

31
00:02:33.180 --> 00:02:41.600
for example if I add it here as an attribute on this HTML element and to make a request right at the

32
00:02:41.600 --> 00:02:42.070
start

33
00:02:42.080 --> 00:02:48.320
when this component is first created in the DOM, I can use a lifecycle hook. Stencil offers a couple of

34
00:02:48.320 --> 00:02:51.600
lifecycle hooks and we'll go through them step by step,

35
00:02:51.650 --> 00:02:58.640
the first lifecycle hook I will show you is the componentDidLoad lifecycle hook which will be entered

36
00:02:58.640 --> 00:03:07.490
whenever, well this component was loaded and in there, I want to check if this stock symbol is set

37
00:03:07.800 --> 00:03:12.340
and if this is set, if this does hold a value, I want to make an HTTP request

38
00:03:12.590 --> 00:03:16.250
and of course set my fetch price.

39
00:03:16.310 --> 00:03:21.590
Essentially what I want to do is I want to make the same HTTP request as up there, so I'll actually grab

40
00:03:21.590 --> 00:03:26.480
this fetch call here and add a new method,

41
00:03:28.430 --> 00:03:30.500
fetchStockPrice

42
00:03:33.240 --> 00:03:37.820
and there, I need the stock symbol for which the price should be fetched as an input.

43
00:03:38.010 --> 00:03:43.850
So I'll expect stock symbol which is a string here as an argument in fetchStockPrice

44
00:03:43.860 --> 00:03:47.210
and then this code should work just as before

45
00:03:48.900 --> 00:03:54.870
and then here in onFetchStockPrice, I will call fetchStockPrice and pass on my extracted stock

46
00:03:54.870 --> 00:03:57.380
symbol and here in componentDidLoad,

47
00:03:57.380 --> 00:04:03.360
if we have a globally set stock symbol, so this property stock symbol, totally unrelated to this constant

48
00:04:03.360 --> 00:04:09.010
here, then I also will call this fetchStockPrice here but only if this is set.

49
00:04:09.100 --> 00:04:20.070
So here, I'll also set this to this stock symbol then and now let's just see if this works. If I reload this, we

50
00:04:20.070 --> 00:04:20.280
have

51
00:04:20.330 --> 00:04:25.360
please enter a symbol and this never changes because we have no initial stock price,

52
00:04:25.450 --> 00:04:28.150
nothing gets past to stock symbol

53
00:04:28.150 --> 00:04:30.520
but let's now set this attribute here.

54
00:04:30.670 --> 00:04:32.890
So here on the index, I'll set stock symbol. 

55
00:04:33.010 --> 00:04:40.330
However important, here in the real DOM, in the HTML code you're writing outside of your render functions,

56
00:04:41.060 --> 00:04:43.360
this is not a valid attribute name

57
00:04:43.360 --> 00:04:46.780
or at least HTML is not case sensitive.

58
00:04:46.780 --> 00:04:52.720
There you should use stock-symbol and stencil will automatically convert this to the camel case

59
00:04:52.770 --> 00:04:54.640
version which you're using inside.

60
00:04:54.710 --> 00:05:01.240
So stock symbol written like this will react or will be bound to the value passed to an attribute written

61
00:05:01.240 --> 00:05:02.810
like this in camel case,

62
00:05:02.810 --> 00:05:06.980
so with a dash between the sub words and then we can set this to Apple.

63
00:05:07.220 --> 00:05:10.130
If we save that, we already see it update here

64
00:05:10.150 --> 00:05:13.170
but if I reload this, it indeed gets initialized with this

65
00:05:13.300 --> 00:05:18.550
but if I now enter the Microsoft symbol, we can still override this. So the functionality from before

66
00:05:18.550 --> 00:05:25.720
works but now we can also start with a default symbol passed through an attribute and that is simply enabled

67
00:05:25.930 --> 00:05:31.000
with a little help from our lifecycle hooks or from one specific lifecycle book.

68
00:05:31.000 --> 00:05:32.590
Now let's dive into other hooks too.
