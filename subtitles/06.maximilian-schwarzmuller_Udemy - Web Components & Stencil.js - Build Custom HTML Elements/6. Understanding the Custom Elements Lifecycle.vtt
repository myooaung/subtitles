WEBVTT
1
00:00:02.300 --> 00:00:10.220
So I mentioned that there is a specific web component lifecycle which the browser follows when instantiating

2
00:00:10.280 --> 00:00:18.890
our own custom element objects in the DOM so to say. The first thing that gets executed is the constructor

3
00:00:19.240 --> 00:00:24.080
because this always gets executed when an object gets created

4
00:00:24.080 --> 00:00:28.320
based on your class and then the classes constructor gets executed.

5
00:00:28.460 --> 00:00:31.930
So this is essentially called when the element is created.

6
00:00:31.940 --> 00:00:40.580
Now it's important to highlight here that the moment where the element is created is not the moment

7
00:00:40.700 --> 00:00:45.830
where the element is then also attached into the real DOM by the browser,

8
00:00:45.950 --> 00:00:51.380
instead it's created in memory first and it's not part of the DOM at the beginning.

9
00:00:51.740 --> 00:00:59.330
So the constructor is great for some basic initializations, some basic values for the different properties

10
00:00:59.360 --> 00:01:03.730
and variables you might be using in your class, in your component

11
00:01:03.920 --> 00:01:11.510
but it's the wrong place for accessing the DOM because your custom element has not been added to the

12
00:01:11.510 --> 00:01:14.260
DOM yet. For this,

13
00:01:14.330 --> 00:01:21.090
there is another method you can add in your class which will be executed by the browser

14
00:01:21.110 --> 00:01:28.670
once this element, once this custom component has been mounted onto the browser's DOM and that is the

15
00:01:28.670 --> 00:01:35.940
connectedCallback method. This is called when your element has been attached to the DOM and therefore

16
00:01:35.980 --> 00:01:39.420
this is the place for DOM initializations,

17
00:01:39.420 --> 00:01:46.510
so where you can now start adding content or where you can start accessing the DOM.

18
00:01:46.890 --> 00:01:52.900
There also is a disconnected callback method which will also be executed automatically for you

19
00:01:53.100 --> 00:01:59.040
and this method will be called by the browser whenever your elements, so your custom element, your

20
00:01:59.040 --> 00:02:03.070
web component, whenever that is detached from the DOM.

21
00:02:03.270 --> 00:02:10.070
So when you destroy that node which you can do through Javascript for example and therefore, this is then

22
00:02:10.110 --> 00:02:15.990
a great method for some cleanup work, like for example if you were sending an HTTP request, this would be where

23
00:02:15.990 --> 00:02:17.950
you could cancel it.

24
00:02:18.000 --> 00:02:19.800
There is another method,

25
00:02:19.920 --> 00:02:26.670
the attributeChangedCallback and that will be important for listening to changes to attributes to

26
00:02:26.660 --> 00:02:27.970
your own element,

27
00:02:27.990 --> 00:02:31.970
it is something we haven't covered yet and therefore I will come back to this,

28
00:02:32.040 --> 00:02:39.540
this will later become important for updating the data and the DOM of your web component when some attributes

29
00:02:39.750 --> 00:02:42.520
which can be passed to your component changed.

30
00:02:42.570 --> 00:02:45.540
But we haven't covered attributes on your own elements yet,

31
00:02:45.540 --> 00:02:48.640
so let's ignore that and let's focus on the connectedCallback.
