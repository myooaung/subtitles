WEBVTT
1
00:00:02.110 --> 00:00:07.840
So it would be really great if we could listen to our own event from outside our component and not

2
00:00:07.840 --> 00:00:10.960
just from inside because that kind of defeats its purpose,

3
00:00:10.960 --> 00:00:11.650
right?

4
00:00:12.070 --> 00:00:19.450
Well the good thing is when we create such an event, we can specify an object as a second argument where

5
00:00:19.450 --> 00:00:24.710
we can add some information about how this event should behave

6
00:00:25.240 --> 00:00:28.950
and there, we basically got three configurations.

7
00:00:29.410 --> 00:00:32.910
Bubbles allows us to define whether this event should bubble up or not,

8
00:00:32.920 --> 00:00:38.590
this means if it should only be available on the element we dispatched it on or if it is not handled

9
00:00:38.590 --> 00:00:39.110
there,

10
00:00:39.190 --> 00:00:42.660
if it should go to the next element in the DOM tree.

11
00:00:42.670 --> 00:00:48.090
So in our case for this button, the cancel button, if we don't add an event listener there,

12
00:00:48.220 --> 00:00:51.880
it would bubble up and event listeners on the section would handle it

13
00:00:51.880 --> 00:00:57.100
and if we had no event listeners there, it would bubble up and event listeners on this div would handle

14
00:00:57.100 --> 00:00:57.580
it

15
00:00:57.760 --> 00:01:00.390
and if we have no listeners there, it would bubble up and so on.

16
00:01:00.610 --> 00:01:02.350
So this doesn't sound too bad right,

17
00:01:02.380 --> 00:01:05.520
if I set this to true, let's see,

18
00:01:05.600 --> 00:01:11.600
now theoretically we should be able to listen to it from other places too and not just on event listeners

19
00:01:11.600 --> 00:01:12.520
on this button.

20
00:01:12.740 --> 00:01:19.270
So maybe now our event listener on our custom component which in the end wraps this button works.

21
00:01:19.340 --> 00:01:24.610
So let's go back and reload and click cancel,

22
00:01:24.610 --> 00:01:26.360
still no output.

23
00:01:26.380 --> 00:01:31.990
The reason for that is that there is another important argument and that is the composed argument here.

24
00:01:32.740 --> 00:01:38.860
Composed when set to true now suddenly ensures that this will work.

25
00:01:38.860 --> 00:01:41.930
If I now click cancel, you see cancelled here and

26
00:01:41.950 --> 00:01:48.700
the reason for that is that composed, which by default is false just like bubbles, composed means that if

27
00:01:48.700 --> 00:01:56.310
you set it to true, then this event may leave the shadow DOM in which it is, if it is in one

28
00:01:56.500 --> 00:01:59.690
and here of course, it is triggered inside of our shadow DOM.

29
00:01:59.950 --> 00:02:07.300
If you set composed to false, then the event must not leave our shadow DOM tree, so it will bubble up

30
00:02:07.390 --> 00:02:09.500
but only inside our shadow DOM tree,

31
00:02:09.670 --> 00:02:15.550
so we could add a listener to modal and handle it but not outside of our component. So we need to set

32
00:02:15.550 --> 00:02:22.800
both to true, bubbles and composed to handle our event outside of our component

33
00:02:22.880 --> 00:02:25.150
and now we can listen to it.

34
00:02:25.300 --> 00:02:27.340
Now this is one way of doing that,

35
00:02:27.340 --> 00:02:29.830
of course there is a simpler way too.

36
00:02:29.890 --> 00:02:33.490
I just show you this way because sometimes you need to take that route

37
00:02:33.700 --> 00:02:37.710
but of course for confirm and we could have done that for cancel too,

38
00:02:37.840 --> 00:02:44.280
we can also just refer to this which is our component, so our own custom element in the end.

39
00:02:44.650 --> 00:02:48.730
Remember our modal extends the HTML element,

40
00:02:48.790 --> 00:02:56.290
so this really refers to our own custom HTML element in the end and therefore, our custom element

41
00:02:56.290 --> 00:03:00.150
itself also has the dispatch event method.

42
00:03:00.160 --> 00:03:08.980
So here, our confirm event can also be holding a new event, here in the confirm event, so the name is

43
00:03:08.980 --> 00:03:09.700
confirm

44
00:03:09.760 --> 00:03:14.840
and you can pick any name you want but of course it should match the name you are listening to outside

45
00:03:15.070 --> 00:03:24.230
and then here, I will use this confirm event and now if I save this without any extra config and I

46
00:03:24.250 --> 00:03:25.380
click OK,

47
00:03:25.870 --> 00:03:31.360
we still get confirmed because now, we're triggering this event on our element itself,

48
00:03:31.390 --> 00:03:37.600
so not inside the shadow DOM, not on some nested element in the shadow DOM but on our custom element

49
00:03:37.600 --> 00:03:42.940
itself and therefore, listeners on our element will of course receive that event.

50
00:03:43.210 --> 00:03:45.460
It will not bubble up there now though,

51
00:03:45.520 --> 00:03:48.820
so if we would want to listen to it on the body in our main document,

52
00:03:48.850 --> 00:03:53.890
this should not work but we also don't need to manage composed and so on

53
00:03:54.040 --> 00:03:58.090
because this is now simply not required.

54
00:03:58.270 --> 00:04:03.110
So this is of course the shorter alternative and the one you would typically use

55
00:04:03.230 --> 00:04:09.530
but I found it important to mention how you can use bubbles and composed to also let events triggered

56
00:04:09.530 --> 00:04:12.950
inside your shadow DOM on some nested element

57
00:04:12.950 --> 00:04:18.430
bubble up through the shadow DOM and potentially even leave it with composed.

58
00:04:18.590 --> 00:04:21.480
So these are custom events and how we can handle it

59
00:04:21.620 --> 00:04:25.450
and now we have the full flexibility we might need,

60
00:04:25.460 --> 00:04:30.830
we're closing the modal and in our main application which we typically would run or import in our

61
00:04:30.830 --> 00:04:32.370
main document, like this index.html

62
00:04:32.450 --> 00:04:34.180
file, there

63
00:04:34.190 --> 00:04:41.570
we can now also find out which button the user pressed without having to kind of dig into our component

64
00:04:41.570 --> 00:04:45.870
and try to attach listeners to the buttons in the component from outside.

65
00:04:46.100 --> 00:04:50.670
Instead we use these convenient listeners on our custom element itself.
