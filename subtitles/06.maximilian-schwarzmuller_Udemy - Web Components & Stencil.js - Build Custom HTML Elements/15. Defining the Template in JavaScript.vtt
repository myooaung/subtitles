WEBVTT
1
00:00:02.410 --> 00:00:08.560
Now that is all nice but we also had the thing that I wanted to get this template out of this DOM.

2
00:00:08.560 --> 00:00:10.470
Now how does that work?

3
00:00:10.480 --> 00:00:17.290
First of all let me say that having a template in our normal HTML file is of course fine, as you

4
00:00:17.290 --> 00:00:19.090
see it works

5
00:00:19.450 --> 00:00:26.710
but if we want to create a fully reusable web component, it would be nice to define the template in the Javascript

6
00:00:26.710 --> 00:00:35.230
file too, so that in the end we just have to dump this Javascript file into any project, any web project

7
00:00:35.710 --> 00:00:43.090
and we can start using our own component. And for this, I'll go back to the tooltip.js file and I will

8
00:00:43.090 --> 00:00:50.120
define a template in there which is really easy. Instead of appending our template content,

9
00:00:50.230 --> 00:00:55.240
so I can get rid of these two files here, I will access my shadow root

10
00:00:55.580 --> 00:01:00.100
and there, we can set the innerHTML code. innerHTML

11
00:01:00.300 --> 00:01:06.030
is a default property you can set on your HTML elements, on the built-in ones too

12
00:01:06.390 --> 00:01:10.280
and there, you can write any HTML code you want.

13
00:01:10.290 --> 00:01:16.440
So now we can grab this content we had in the template and remove the template thereafter and add

14
00:01:16.500 --> 00:01:18.930
this here, like this.

15
00:01:19.500 --> 00:01:25.880
If you save that and you then reload this page, you have the same as before, the same behavior as before

16
00:01:26.190 --> 00:01:31.800
but now you have your template as part of your Javascript file.

17
00:01:31.800 --> 00:01:38.570
Now I know that it can look strange to start writing HTML inside of your Javascript file.

18
00:01:38.580 --> 00:01:44.520
Keep in mind that this in the end is just a normal string and it can look strange but it is a nice way

19
00:01:44.730 --> 00:01:52.830
of creating a reusable HTML element and later with stencil.js, we'll have a way nicer way

20
00:01:53.030 --> 00:01:56.970
of creating web components than we have right now.

21
00:01:57.480 --> 00:02:04.470
Now we can also use a next gen Javascript feature called template literals where we use back ticks instead

22
00:02:04.470 --> 00:02:06.540
of single quotation marks.

23
00:02:06.540 --> 00:02:08.790
So this is not a single quotation mark,

24
00:02:08.790 --> 00:02:10.100
this is a back tick,

25
00:02:10.350 --> 00:02:17.130
opening and closing and this will still create a string but now we can write a multi-line string here,

26
00:02:17.370 --> 00:02:22.280
so that we can format this in a nicer way. If we now save this,

27
00:02:22.430 --> 00:02:29.120
you will see it still works as before. So it's just a bit strange to get used to that, in some IDEs, you

28
00:02:29.120 --> 00:02:31.980
get really great auto-completion support here though,

29
00:02:32.000 --> 00:02:38.360
mine doesn't pick it up here but still, I will go with this approach because whilst it is strange to look

30
00:02:38.360 --> 00:02:47.910
at, we now have all the logic in the Javascript file making this a really simple reusable web component.

31
00:02:47.950 --> 00:02:50.640
Now one important thing, you might wonder

32
00:02:50.650 --> 00:02:56.420
how can I set the HTML content here inside my constructor?

33
00:02:56.420 --> 00:03:03.790
The reason is simple, innerHTML is just a property of our element here, of our object

34
00:03:04.130 --> 00:03:10.580
and this is just setting up some HTML code that will be rendered to the DOM once this element is mounted

35
00:03:10.580 --> 00:03:11.660
to the DOM.

36
00:03:11.870 --> 00:03:20.420
So unlike append child, this does not try to access the DOM at this point, it just prepares some content for

37
00:03:20.420 --> 00:03:26.240
the DOM once it later is available and the browser will take care about rendering this when it is

38
00:03:26.240 --> 00:03:26.720
able to.
