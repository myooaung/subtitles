WEBVTT
1
00:00:02.250 --> 00:00:07.710
So now that we learned about two ways of getting access to our data, our user input data,

2
00:00:08.030 --> 00:00:12.560
let me show you a third way that gives us even more flexibility.

3
00:00:12.590 --> 00:00:19.280
Let me show you a way that allows us to store the value the user enters in a property of this component

4
00:00:19.310 --> 00:00:25.370
which we update with every keystroke, which for example can be helpful when we want to live validate

5
00:00:25.520 --> 00:00:27.110
the user input.

6
00:00:27.230 --> 00:00:34.340
For this, I will first of all add a new property, a stateful property, hence I will add the state decorator

7
00:00:35.000 --> 00:00:36.720
and that will be that user input,

8
00:00:36.740 --> 00:00:42.700
so the stock user input or whatever you want to name it.

9
00:00:42.700 --> 00:00:43.690
And this will be a string

10
00:00:43.710 --> 00:00:47.600
because whatever the user inputs into the next field is a string,

11
00:00:47.700 --> 00:00:49.920
that's just how HTML works.

12
00:00:49.920 --> 00:00:52.510
So stock user input is a string

13
00:00:52.700 --> 00:01:01.540
and now down at the input here, I will actually give this the value binding, value is the default attribute

14
00:01:01.600 --> 00:01:03.210
of HTML elements,

15
00:01:03.310 --> 00:01:04.420
we can bind to this,

16
00:01:04.420 --> 00:01:10.570
we can set a dynamic value to this attribute to override the value that is currently stored in the

17
00:01:10.570 --> 00:01:11.670
input field and

18
00:01:11.710 --> 00:01:19.930
I'll set this to this stock user input and of course, I don't just want to bind the text input here to

19
00:01:20.310 --> 00:01:20.910
that input,

20
00:01:20.920 --> 00:01:25.570
I also want to listen to changes and store those changes in the stock user input.

21
00:01:25.630 --> 00:01:31.630
So we effectively set up some two-way binding here, saving the value the user entered into stock user

22
00:01:31.630 --> 00:01:36.430
input but then also writing it back into this input element so that this is always up to date with what

23
00:01:36.430 --> 00:01:37.370
the user entered,

24
00:01:37.420 --> 00:01:39.850
makes sense because the user enters it here.

25
00:01:40.120 --> 00:01:41.430
What is the idea behind this?

26
00:01:41.590 --> 00:01:47.470
Well since we now always have the most recent version of what the user entered stored in stock user

27
00:01:47.470 --> 00:01:52.870
input here, we can use it in the rest of the component to live validate the input or whatever we want

28
00:01:52.870 --> 00:01:53.370
to do.

29
00:01:54.750 --> 00:01:59.170
So here, this stock user input is bound to the value

30
00:01:59.550 --> 00:02:07.530
and on the input event here, I want to also update the value in stock user input. For this,

31
00:02:07.530 --> 00:02:17.770
I'll add a new handler, onUserInput or whatever you want to name it, here we'll get the event object

32
00:02:18.770 --> 00:02:26.960
and there, I will set this stock user input equal to event target value.

33
00:02:26.960 --> 00:02:33.800
Now for this to work, I just need to inform Typescript that the event target will be an HTML input

34
00:02:33.830 --> 00:02:34.730
element,

35
00:02:34.730 --> 00:02:44.430
so same trick as before, we can simply add as HTML input element here and now onUserInput is

36
00:02:44.430 --> 00:02:50.470
the method I want to execute here on the input event handler,

37
00:02:50.510 --> 00:02:53.780
so I'll set this to this onUserInput

38
00:02:53.780 --> 00:02:59.360
and don't forget, bind this to make sure that the this keyword inside of onUserInput,

39
00:02:59.360 --> 00:03:03.800
this one here refers to the overall class and not to the input element.

40
00:03:03.830 --> 00:03:06.010
So now I'm always updating

41
00:03:06.200 --> 00:03:10.780
and if we save that and I type here, this should still be possible,

42
00:03:10.970 --> 00:03:17.230
so this works as before but whatever we type here is now always stored in stock user input

43
00:03:17.510 --> 00:03:19.300
and how can that be helpful?

44
00:03:19.580 --> 00:03:22.720
Well we can simply use it in whichever way we want,

45
00:03:22.720 --> 00:03:33.400
for example I can have another stateful property, stockInputValid and set this to false initially.

46
00:03:35.410 --> 00:03:36.470
Now I want to set it to true

47
00:03:36.580 --> 00:03:40.460
if it is valid. Now I won't add a check here that sees

48
00:03:40.510 --> 00:03:47.230
if a given symbol exists, that would be more advanced, here I simply want to check whether the input is

49
00:03:47.350 --> 00:03:48.640
empty or not

50
00:03:48.640 --> 00:03:53.410
and I will check if this stock user input, whatever the user enters here,

51
00:03:53.470 --> 00:03:58.780
when I trim this to avoid the case where the user enters a couple of whitespace because trim will remove

52
00:03:58.810 --> 00:04:00.280
excess whitespace,

53
00:04:00.280 --> 00:04:07.310
if I trim this, then the length should be greater than zero, so this should not be empty

54
00:04:07.630 --> 00:04:13.780
or alternatively, this should not be equal to an empty string, whoops, not the length though

55
00:04:13.790 --> 00:04:23.780
but the trim value. And with this, I'll set this stockInputValid to true because I know if the trim value is

56
00:04:23.780 --> 00:04:27.080
not an empty string, then it is treated as a valid input.

57
00:04:27.080 --> 00:04:31.480
It might still be a symbol that doesn't exist but that is something we can check here,

58
00:04:31.550 --> 00:04:33.660
we'll add a check for that later

59
00:04:33.920 --> 00:04:39.470
but this now simply avoids cases where the user tries to submit an empty input field.

60
00:04:39.620 --> 00:04:44.230
Else, this stockInputValid will be false,

61
00:04:44.240 --> 00:04:48.020
it's not valid if the trim value is an empty string.

62
00:04:48.050 --> 00:04:50.190
So now we update on every keystroke too

63
00:04:50.210 --> 00:04:59.750
because this gets fired on every keystroke and we use that data here, that input data. We can use that information

64
00:04:59.750 --> 00:05:06.490
down in our render function now, for example to disable the button if the input is not valid. For that, I'll

65
00:05:06.530 --> 00:05:07.050
bind

66
00:05:07.060 --> 00:05:13.670
disabled to this stockInputValid, however this should be disabled if it's not valid,

67
00:05:13.760 --> 00:05:15.370
so I'll check for the opposite here.

68
00:05:16.530 --> 00:05:21.760
Now with that if I reload, we don't see the difference here because I have no styling for that

69
00:05:21.770 --> 00:05:25.260
but if I click on fetch now, we don't get an error on the right,

70
00:05:25.260 --> 00:05:27.250
so indeed, this didn't go through.

71
00:05:27.390 --> 00:05:31.950
Now to show that this is disabled, we can also adjust the styling here real quick,

72
00:05:31.950 --> 00:05:42.560
so for the button when it is disabled, when it has this disabled attribute or we use the special sudo selector

73
00:05:42.560 --> 00:05:44.100
of course, disabled,

74
00:05:44.360 --> 00:05:51.290
so when this button is disabled, then let's say we give it a background color of the light gray, border color

75
00:05:51.290 --> 00:06:01.960
of that gray and a text color of white and we set the cursor to not allowed

76
00:06:01.960 --> 00:06:05.380
and now with that if I save that, this looks way more disabled

77
00:06:05.470 --> 00:06:09.110
and as soon as I start entering something here, you see it gets enabled

78
00:06:09.280 --> 00:06:13.220
but if I clear that, it gets disabled again.

79
00:06:13.220 --> 00:06:19.940
So now we have this in place and this is how we can work with forms in a bit of a more powerful and

80
00:06:19.940 --> 00:06:21.680
flexible way

81
00:06:21.680 --> 00:06:29.060
and this is also how we can always manage this value as a two-way bound live updated value incase we always

82
00:06:29.060 --> 00:06:30.250
need access to that value.
