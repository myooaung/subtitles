WEBVTT
1
00:00:02.130 --> 00:00:05.370
There is an easier way to update the stock price

2
00:00:05.370 --> 00:00:11.910
whenever a new stock symbol is passed in on this property or through the attribute bound to the property.

3
00:00:12.840 --> 00:00:13.720
I will comment out

4
00:00:13.740 --> 00:00:18.370
this logic in componentDidUpdate to leave it there for reference and I will comment out

5
00:00:18.390 --> 00:00:25.380
the initial stock symbol and I will also not set it here in componentDidLoad anymore because stencil

6
00:00:25.380 --> 00:00:31.470
actually has a built-in method that allows us to watch to changes to our props and that is exactly

7
00:00:31.470 --> 00:00:32.400
what I need here.

8
00:00:32.580 --> 00:00:41.160
I need to watch for a change in my properties to react to them and for that, I will add a new method

9
00:00:41.710 --> 00:00:51.550
and it's a good practice to add it right below the prop it belongs to which I'll name stockSymbolChanged.

10
00:00:51.630 --> 00:00:53.760
Now this does not execute like this

11
00:00:53.790 --> 00:00:57.550
when the stock symbol changes, we need to tell stencil to execute this method

12
00:00:57.600 --> 00:01:01.810
when stock symbol changes and we do this by adding a new decorator to this method,

13
00:01:01.920 --> 00:01:10.330
the watch decorator which just as all other decorators needs to be imported from @stencil/core. The watch

14
00:01:10.360 --> 00:01:15.060
decorator then takes the prop name as an argument,

15
00:01:15.060 --> 00:01:20.790
so in my case, StockSymbol and make sure you spell this exactly as the property is named here.

16
00:01:20.850 --> 00:01:27.480
So stock symbol here, stock symbol here and now stencil sets up a watcher behind the scenes that will

17
00:01:27.480 --> 00:01:33.720
ensure that whichever code we have in this method runs whenever this property receives a new value

18
00:01:34.970 --> 00:01:41.030
and actually, stencil will pass us the new value as an argument here and we know that will be a string

19
00:01:41.230 --> 00:01:43.250
and the old value as well

20
00:01:43.250 --> 00:01:45.770
and if we need to do any checks, we can do that in here.

21
00:01:45.830 --> 00:01:50.310
So here I can check if new value is unequal to old value

22
00:01:50.330 --> 00:01:52.550
otherwise I don't want to execute any error code

23
00:01:52.760 --> 00:02:01.580
but if these two values are not equal, then in here, I will call this fetchStockPrice for my new value

24
00:02:01.670 --> 00:02:03.390
which is the new stock symbol.

25
00:02:06.720 --> 00:02:10.920
And now with that if I save that and I reload here,

26
00:02:11.100 --> 00:02:17.200
I cleared my network tab and now, we can enter Microsoft here again and you'll see it update on the left

27
00:02:17.290 --> 00:02:20.030
and you'll see that one HTTP request was made.

28
00:02:20.230 --> 00:02:26.270
So indeed this watcher did work and this method did execute whenever we entered a new stock symbol,

29
00:02:26.290 --> 00:02:32.520
in this case by setting a new value to the bound attribute. And this of course can be very convenient

30
00:02:33.000 --> 00:02:37.670
because this now allows us to conveniently react to changes to any property,

31
00:02:37.710 --> 00:02:43.680
you can of course add multiple watchers for different properties and execute any logic we need

32
00:02:43.680 --> 00:02:47.130
to execute upon such a change.

33
00:02:47.140 --> 00:02:53.470
Now there's a little optimization I want to do here, now that we have this watcher in place which will

34
00:02:53.470 --> 00:02:58.640
fetch the stock price whenever we have a new stock symbol we're looking for,

35
00:02:58.660 --> 00:03:06.480
I will turn this prop into a mutable prop and I will also reflect it back to the attribute so that

36
00:03:06.490 --> 00:03:15.170
now when we trigger onFetchStockPrice, when we click that button, I don't set this stock symbol here

37
00:03:15.180 --> 00:03:16.860
equal to the stock input,

38
00:03:17.190 --> 00:03:25.170
instead there, I just set this stock symbol and this is now my mutable prop, equal to whatever the user

39
00:03:25.170 --> 00:03:30.900
entered and I will not make an HTTP request here but by setting this here and I can do this because it's

40
00:03:30.900 --> 00:03:36.730
now a mutable prop, I will automatically triggered this watcher and now I'm reusing the code here

41
00:03:37.020 --> 00:03:41.290
and I also as another positive side effects, reflect this back to my attribute.

42
00:03:41.730 --> 00:03:52.430
So now if we reload this, whenever I set a new value here, we get the new price but if I then fetch it

43
00:03:52.430 --> 00:03:54.080
for Apple again,

44
00:03:54.380 --> 00:03:57.190
this also works because of my mutable prop.

45
00:03:57.440 --> 00:03:58.790
Now one little side note,

46
00:03:58.940 --> 00:04:04.100
whenever I set a new value here, it would of course be nice to see that reflected here in the input box

47
00:04:04.100 --> 00:04:05.040
as well.

48
00:04:05.120 --> 00:04:11.810
So therefore here in my watcher, whenever I have a new value, I will set this stock user input equal

49
00:04:11.930 --> 00:04:18.970
to the new value, to have that new propert, that new stock symbol also updated in my input.

50
00:04:18.970 --> 00:04:21.340
So now if I reload this, we start with Apple

51
00:04:21.470 --> 00:04:25.310
but when I change this to Microsoft, we have it updated here and here.

52
00:04:25.370 --> 00:04:28.100
So this is now all working, that's pretty nice

53
00:04:28.400 --> 00:04:34.280
but wouldn't it be nice to be able to search for symbols instead of just having to know them. Well we'll

54
00:04:34.340 --> 00:04:40.310
add a new widget, a new component for that which we can add in the app we're building or not use it, whatever

55
00:04:40.310 --> 00:04:41.090
we want to do

56
00:04:41.270 --> 00:04:45.100
and there, we'll dive into some other interesting advanced features.
