1
00:00:02,240 --> 00:00:09,110
Now we can generate our project and you do this by simply running npm run build and this executes a

2
00:00:09,110 --> 00:00:12,110
script that is already built into the package.json file,

3
00:00:12,110 --> 00:00:17,810
this build script using stencil build behind the scenes and this will now generate your code bundles,

4
00:00:17,840 --> 00:00:24,290
your component bundles and because I left the default settings, it stores them in a dist folder and

5
00:00:24,290 --> 00:00:27,330
there you actually got a bunch of files as you can see.

6
00:00:27,560 --> 00:00:32,010
Now how can you use that, how can you deploy and share all these files?

7
00:00:32,030 --> 00:00:38,120
That of course is the interesting question and I will show you different ways of using these packages

8
00:00:38,120 --> 00:00:40,510
or using these files step by step.

9
00:00:40,760 --> 00:00:46,880
Let's start with the most simplest use case, we simply want a file which we can drop into one of our

10
00:00:46,880 --> 00:00:51,640
projects and have working components. For that,

11
00:00:51,680 --> 00:00:58,610
I created a new project and you can find that attached to this lecture where I get a couple of different

12
00:00:58,610 --> 00:01:06,260
scenarios, a basic scenario where I just have an index.html file, then an advanced or a server side

13
00:01:06,320 --> 00:01:11,870
language scenario where I have a Node application, a very simple one of course with only one route which

14
00:01:11,870 --> 00:01:13,830
uses the ejs Vue engine

15
00:01:13,850 --> 00:01:19,820
and if this doesn't tell you anything, you can of course ignore that or learn NodeJS and I'm rendering

16
00:01:19,820 --> 00:01:22,380
this single Vue which I have in there,

17
00:01:22,520 --> 00:01:28,190
output some default message and let's say I also want to use one of my components in there. Then I

18
00:01:28,190 --> 00:01:33,210
have a React, Vue and an Angular app and we will go through all these use cases step by step.

19
00:01:33,210 --> 00:01:38,860
Here is the dist folder with the generated output so that we can well, just start using that.

20
00:01:38,930 --> 00:01:43,410
Now let's start with the basic use case, here this index.html file.

21
00:01:43,760 --> 00:01:45,650
There we could have a script folder

22
00:01:45,710 --> 00:01:51,170
and in that script folder, I want to put my component or the code which is responsible for loading my

23
00:01:51,170 --> 00:01:52,090
component.

24
00:01:52,460 --> 00:01:59,150
Now it is best if you simply move your entire code here or your entire code pakage here into the script

25
00:01:59,150 --> 00:02:04,910
folder, maybe simply into a sub-folder which could be named uc-components.

26
00:02:05,960 --> 00:02:12,910
So let me grab all these files and folders and move them into uc-components or copy them in there

27
00:02:13,150 --> 00:02:15,950
and now in the index.html file here,

28
00:02:16,210 --> 00:02:23,410
let's generate a new document here with this HTML5 skeleton and in here, I can now add a script

29
00:02:23,410 --> 00:02:23,970
tag

30
00:02:24,190 --> 00:02:29,890
and as a source, I referenced this script folder, uc-components and then you use that

31
00:02:29,890 --> 00:02:31,890
udemycourse.js file

32
00:02:31,900 --> 00:02:35,820
and now in here, let's use that uc-stock-price component

33
00:02:35,850 --> 00:02:39,390
and now please note that I'm not in my stencil project anymore,

34
00:02:39,430 --> 00:02:42,310
I don't have that stencil development server up and running,

35
00:02:42,310 --> 00:02:46,120
we're not building this project in memory behind the scenes anymore.

36
00:02:46,120 --> 00:02:51,910
Instead I can now reveal this in the finder so that I can double click it and once you do double click

37
00:02:51,910 --> 00:02:52,350
it,

38
00:02:52,340 --> 00:02:59,950
here is your component and you can again use it as before with your different stock symbols.

39
00:02:59,950 --> 00:03:08,810
And of course, we could also use that other component, we could add the uc-stock-finder here, like this,

40
00:03:10,510 --> 00:03:11,680
if we reload this page,

41
00:03:11,680 --> 00:03:12,830
here is our finder

42
00:03:12,850 --> 00:03:17,960
and if I search for BMW, here is BMW, if you click that, it gets loaded up there.

43
00:03:18,040 --> 00:03:23,040
So we get the same behavior as before but we're not in this stencil development environment anymore,

44
00:03:23,050 --> 00:03:29,820
instead I'm simply using my components. And if we inspect the network tab and I reload this page, you'll

45
00:03:29,830 --> 00:03:37,340
see what gets loaded up front and you can see here, we got this udemycourse.js file being loaded and

46
00:03:37,550 --> 00:03:38,940
thereafter a couple of chunks

47
00:03:38,940 --> 00:03:41,630
and this is this code splitting done by stencil.

48
00:03:41,800 --> 00:03:48,190
Here it loads all these chunks because I'm basically loading all my components, the finder and the stock

49
00:03:48,340 --> 00:03:50,390
price and the spinner,

50
00:03:50,570 --> 00:03:55,760
I will show you code splitting in action in the more visible way in a different project.

51
00:03:55,790 --> 00:04:01,400
But this is one of the easiest way of using your files, simply import them as script dependencies like

52
00:04:01,400 --> 00:04:07,370
this after dragging and dropping the generated build files into your project.

53
00:04:07,370 --> 00:04:11,750
Now this is great if you have a project you're working on and you also build your web component

54
00:04:11,760 --> 00:04:12,830
library on your own.
