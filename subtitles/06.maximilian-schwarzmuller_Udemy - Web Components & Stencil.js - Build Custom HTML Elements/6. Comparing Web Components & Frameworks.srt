1
00:00:02,410 --> 00:00:06,150
Now that I talked about web components and their advantages,

2
00:00:06,340 --> 00:00:10,990
if you have a little bit of experience with Javascript development and with front-end development already,

3
00:00:11,290 --> 00:00:15,300
you probably know frameworks like Angular, React or Vue,

4
00:00:15,430 --> 00:00:20,650
if that doesn't tell you anything, well then this lecture will not be that interesting to you but if

5
00:00:20,650 --> 00:00:26,560
you know of these frameworks and libraries, you might be wondering, well web components allow us to create

6
00:00:26,620 --> 00:00:34,420
our own components but frameworks like Angular, React and Vue do exactly the same thing, in all these frameworks

7
00:00:34,420 --> 00:00:40,900
we write components that we can use and that we can reuse and where we also encapsulate all our logic.

8
00:00:40,900 --> 00:00:44,870
So why would we use web components or when we use web components,

9
00:00:44,920 --> 00:00:46,690
why would we use such a framework?

10
00:00:46,990 --> 00:00:53,420
And what about libraries, like JQuery or especially jQuery plugins

11
00:00:53,530 --> 00:00:59,410
where you also often can import like a modal with just two script imports into your page and start

12
00:00:59,440 --> 00:01:00,570
using it?

13
00:01:01,210 --> 00:01:06,480
Well we have component driven approaches in all these solutions, JQuery plugins

14
00:01:06,490 --> 00:01:11,560
are kind of components, we add a script import, we add a couple of attributes to a div and we

15
00:01:11,560 --> 00:01:17,560
can start using it and our frameworks here as well as web components clearly are all about splitting

16
00:01:17,560 --> 00:01:19,720
logic into components.

17
00:01:19,720 --> 00:01:21,390
Well let's start on the right,

18
00:01:21,520 --> 00:01:28,330
libraries like JQuery plugins have the great advantage of being drag and drop, you drop an import

19
00:01:28,360 --> 00:01:31,260
into your page with a script tag and you're ready to go,

20
00:01:31,270 --> 00:01:37,360
you've followed the steps written in the instructions, in the documentation and you're ready to use it.

21
00:01:37,360 --> 00:01:43,510
A downside is you have multiple imports, potentially at least and you might have version conflicts. A

22
00:01:43,570 --> 00:01:50,080
JQuery plugin  easily can depend on, well JQuery, on the plugin, maybe on some other plugin and you

23
00:01:50,080 --> 00:01:54,630
import loads of code into your project that your project might never need.

24
00:01:54,760 --> 00:02:01,600
You might never need the Ajax functionality of the JQuery plugin, you might never need certain DOM

25
00:02:01,600 --> 00:02:06,580
traversal methods and still, you might still have them because your plugin

26
00:02:06,580 --> 00:02:12,730
kind of requires the entire JQuery suite even though it doesn't use all the features. That can all

27
00:02:12,730 --> 00:02:13,510
be optimized

28
00:02:13,570 --> 00:02:15,840
but the danger is high that you're not doing it,

29
00:02:16,030 --> 00:02:21,640
especially if you're building more complex applications with more complex interactions between different

30
00:02:21,640 --> 00:02:22,800
parts of your app,

31
00:02:22,810 --> 00:02:28,440
if you're building an entire single page application let's say, then JQuery will quickly hit its limits,

32
00:02:29,510 --> 00:02:32,220
for certain projects, it's of course fine though.

33
00:02:32,370 --> 00:02:38,840
So these are disadvantages and advantages with JQuery plugins, when we use a framework like

34
00:02:38,900 --> 00:02:45,020
Angular or a library like React, then we have more than just the components and

35
00:02:45,030 --> 00:02:46,720
that is super important.

36
00:02:46,820 --> 00:02:53,950
Any of these solutions, even React which is very lightweight brings more than just the logic to write components.

37
00:02:53,960 --> 00:03:01,430
You get some state management solutions, React has React context, Angular has services. You get routing,

38
00:03:01,640 --> 00:03:07,090
in React it's not baked-in but you often install the React router as an extra library.

39
00:03:07,250 --> 00:03:09,480
So you have more than just the components,

40
00:03:09,560 --> 00:03:15,260
these frameworks give you everything you need to write complex front-end user interfaces,

41
00:03:15,350 --> 00:03:22,400
most of the time, often single page applications. Components are one important part of the toolset but

42
00:03:22,400 --> 00:03:24,730
not everything.

43
00:03:24,740 --> 00:03:28,890
This is one great difference to web components as you will learn.

44
00:03:28,940 --> 00:03:30,890
We also in frameworks

45
00:03:30,950 --> 00:03:36,620
most of the time have a clear set of rules of how we should structure our code or for how we should write

46
00:03:36,620 --> 00:03:39,560
our code, how we should solve certain problems,

47
00:03:39,560 --> 00:03:41,930
there is a certain set of solutions too

48
00:03:41,930 --> 00:03:45,800
for example state management problems or to form validation,

49
00:03:45,830 --> 00:03:48,630
not always but often that is the case.

50
00:03:48,680 --> 00:03:54,560
A downside of frameworks, for example compared with JQuery plugins is the increased complexity,

51
00:03:54,560 --> 00:04:01,330
this deeper learning curve you often have and that the components are not reusable across projects

52
00:04:01,340 --> 00:04:07,340
if you are using a different framework or maybe even a different version of the same framework in another

53
00:04:07,340 --> 00:04:14,360
project, then you might not be able to bring your React component into your Angular application,

54
00:04:14,360 --> 00:04:17,490
you are actually guaranteed to not be able to do that.

55
00:04:17,780 --> 00:04:22,660
Web components solve this because they're just vanilla Javascript,

56
00:04:22,700 --> 00:04:28,100
we will use a different additional tool in this course, stencil.js and I will explain in detail what

57
00:04:28,100 --> 00:04:28,590
this is

58
00:04:28,610 --> 00:04:29,960
when we start using it

59
00:04:30,170 --> 00:04:35,100
but that too will just generate vanilla Javascript web components as you will learn.

60
00:04:35,300 --> 00:04:37,970
So we have no external dependencies,

61
00:04:38,090 --> 00:04:40,500
we don't need a special framework,

62
00:04:40,640 --> 00:04:46,310
that of course means that we also have to ship less code because it's really just our component code,

63
00:04:46,310 --> 00:04:53,750
no overhead introduced by the framework and it's easily reusable since we use just Javascript and all

64
00:04:53,750 --> 00:04:57,680
these frameworks as well as JQuery plugins use Javascript,

65
00:04:57,680 --> 00:05:05,060
we can bring our components into any application, into the front-end of any web app we're building. Compared

66
00:05:05,060 --> 00:05:06,080
to JQuery plugins,

67
00:05:06,080 --> 00:05:13,160
we still have a greater complexity because, at least when we're writing these because we have to learn

68
00:05:13,160 --> 00:05:16,040
certain new techniques which is exactly what you learned in this course,

69
00:05:16,070 --> 00:05:23,600
it's not super hard but there are new things you haven't learned about when you just had normal DOM manipulations, 

70
00:05:23,780 --> 00:05:30,430
normal DOM traversal and also important, web components are just web components.

71
00:05:30,440 --> 00:05:36,260
The difference to the frameworks is that you can theoretically build an entire user interface from just

72
00:05:36,260 --> 00:05:42,280
web components but you'll be missing tools for navigation, so for routing, for parsing

73
00:05:42,290 --> 00:05:46,660
the URL and loading a different set of components, for state management.

74
00:05:46,790 --> 00:05:53,390
So building a single page application with just web components will require some extra libraries that

75
00:05:53,420 --> 00:05:58,060
take care about the routing or take care about the state management

76
00:05:58,130 --> 00:06:02,570
and this is also not what we'll dive into this course because we're not focusing on building entire apps

77
00:06:02,570 --> 00:06:03,080
here,

78
00:06:03,080 --> 00:06:08,420
we will dive into web components and learn how we can build such reusable web components that you could

79
00:06:08,420 --> 00:06:13,070
then use in any project with any framework or if you don't need it, without any.
