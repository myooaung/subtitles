WEBVTT
1
00:00:02.260 --> 00:00:06.200
Now what would be an example for a componentDidUpdate being interesting?

2
00:00:06.700 --> 00:00:13.510
Well that could be when we change the stock symbol that's passed in from outside because maybe in our

3
00:00:13.510 --> 00:00:19.090
application which we're creating with the help of the components we're using, like this ucStockPrice

4
00:00:19.090 --> 00:00:19.900
component,

5
00:00:19.900 --> 00:00:25.690
maybe in this application, we also have some way for the user to change the stock symbol.

6
00:00:25.810 --> 00:00:29.450
So it's not just that baked-in input inside of the component

7
00:00:29.620 --> 00:00:34.630
but also some other logic in our app, certainly not something that is impossible to think of.

8
00:00:36.180 --> 00:00:37.200
Well in such a case,

9
00:00:37.200 --> 00:00:42.010
we of course want to react to a change because right now, we can always simulate this of course and

10
00:00:42.010 --> 00:00:46.920
I go to the elements and I change the stock symbol here to MSFT,

11
00:00:46.920 --> 00:00:53.340
this never gets reflected in the price that is fetched here, this also never gets entered into this input

12
00:00:53.340 --> 00:00:55.170
field here by the way.

13
00:00:55.170 --> 00:00:57.830
That is something I would like to change.

14
00:00:58.010 --> 00:01:04.320
Now for that in the stock price component, first of all I can of course update the stock user input

15
00:01:04.320 --> 00:01:09.180
initially with a stock symbol that was set in componentDidLoad,

16
00:01:09.540 --> 00:01:16.680
so here when I know I have a stock symbol, I can set this stock user input equal to this stock symbol

17
00:01:17.340 --> 00:01:22.180
and that at least ensures that we start with Apple filled in here.

18
00:01:22.220 --> 00:01:25.670
Now to also unlock this button right from the start,

19
00:01:25.710 --> 00:01:32.160
I now just need to set this stock input valid equal to true here because I know it is valid now of

20
00:01:32.160 --> 00:01:32.600
course,

21
00:01:32.730 --> 00:01:35.580
I initialized it with a symbol after all.

22
00:01:35.610 --> 00:01:42.170
Now this is the initial case but this still doesn't help us with updating this symbol like this 

23
00:01:42.330 --> 00:01:51.370
and that just simulates how it would be done when we programmatically do that through Javascript.

24
00:01:51.560 --> 00:01:52.400
For that,

25
00:01:52.440 --> 00:01:53.820
componentDidUpdate will help though.

26
00:01:53.820 --> 00:01:56.540
WillUpdate would also fire whenever this changes

27
00:01:56.610 --> 00:02:00.690
but this will be done before the render function is called for the first time,

28
00:02:00.690 --> 00:02:06.740
I want to do it after that is done because I will make an async request anyways and I want to ensure that

29
00:02:06.740 --> 00:02:09.420
this request doesn't start before render is called

30
00:02:09.630 --> 00:02:15.720
because if then returns too early, we can actually end up in a case where our result of the API call

31
00:02:15.720 --> 00:02:17.360
is not picked up correctly.

32
00:02:17.430 --> 00:02:19.200
So here in componentDidUpdate,

33
00:02:19.200 --> 00:02:29.160
I will add an if check and see if this stock symbol is different to the previous value of this stock symbol.

34
00:02:29.250 --> 00:02:31.400
Now for that, we have to store the initial value

35
00:02:31.400 --> 00:02:36.460
first of all and I will do this in a normal property of this class,

36
00:02:36.460 --> 00:02:43.600
initial stock symbol is a string and in componentDidLoad

37
00:02:44.080 --> 00:02:51.250
when we have a stock symbol, I will set this initial stock symbol equal to the entered stock symbol and

38
00:02:51.250 --> 00:02:56.760
I only do that so that in componentDidUpdate, I can check if this stock symbol which will

39
00:02:56.760 --> 00:03:01.990
be the updated value is unequal to this initial stock symbol

40
00:03:02.040 --> 00:03:04.120
because only if it is not equal,

41
00:03:04.200 --> 00:03:08.700
I want to fetch a new price, if it is still equal there is no sense in fetching a new price.

42
00:03:08.700 --> 00:03:14.270
So then I will fetch a new price for this stock symbol.

43
00:03:14.270 --> 00:03:14.730
Now the

44
00:03:14.890 --> 00:03:15.740
fact of this is that

45
00:03:15.740 --> 00:03:17.750
now if I save this and I reload,

46
00:03:23.830 --> 00:03:29.230
if in the elements tab, I change Apple to MSFT, to Microsoft,

47
00:03:29.410 --> 00:03:33.520
it indeed does update the price here and we see a new request was made here.

48
00:03:33.670 --> 00:03:35.710
Now actually two requests

49
00:03:38.140 --> 00:03:43.960
because the first one was made when the stock symbol, my attribute resulted in a new value for a stock

50
00:03:43.960 --> 00:03:49.720
symbol and hence componentDidUpdate getting called, that gets called whenever a prop decorated property

51
00:03:49.720 --> 00:03:57.160
or a state decorated property changes and then after fetchStockPrice was done, so whenever we called

52
00:03:57.340 --> 00:04:04.600
this fetch price in here, this re-ran and since we don't update our initial stock symbol, we basically

53
00:04:04.600 --> 00:04:10.450
ran this again because our initial stock symbol is still Apple, so I should set this initial stock symbol

54
00:04:10.480 --> 00:04:12.860
equal to stock symbol here too

55
00:04:12.870 --> 00:04:21.770
after I got into this if block. And now with that if I reload, clear this and now under elements, I change

56
00:04:21.780 --> 00:04:24.440
this to MSFT,

57
00:04:24.440 --> 00:04:27.300
now we also see there is only one network call being made.

58
00:04:27.440 --> 00:04:28.500
So this works

59
00:04:28.640 --> 00:04:31.100
but of course this is a little complicated,

60
00:04:31.100 --> 00:04:37.610
just to update one value with this extra check and this extra property we have to manage, there must be

61
00:04:37.610 --> 00:04:38.840
an easier way right?

62
00:04:38.990 --> 00:04:39.500
And there is.
