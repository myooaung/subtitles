1
00:00:02,270 --> 00:00:07,870
I want to start by building a side drawer and we will build that step by step.

2
00:00:07,890 --> 00:00:14,060
Now a side drawer in case you're not sure, simply is this side menu which can slide in when we press

3
00:00:14,060 --> 00:00:21,020
a button. And for that, I will create a new folder in my components folder and I will name it side-drawer,

4
00:00:21,140 --> 00:00:26,960
you can name it whatever you want but I typically name the folder simply as the component I'm going

5
00:00:26,960 --> 00:00:34,490
to store in it and I have one folder per component rule because in my opinion that keeps the project

6
00:00:34,490 --> 00:00:40,060
more organized but you can also place all your component files in one and the same folder.

7
00:00:40,160 --> 00:00:48,080
So in the side-drawer folder, I'll create a side-drawer.tsx file. TSX simply stands for Typescript

8
00:00:48,080 --> 00:00:51,840
combined with that JSX syntax stencil uses.

9
00:00:52,070 --> 00:01:01,610
Now in that file, we'ill create all the logic for this side-drawer component and a new component in stencil

10
00:01:01,970 --> 00:01:07,240
simply is a class just as it is in vanilla javascript.

11
00:01:07,280 --> 00:01:13,220
Now I will name this SideDrawer and the convention here is to name classes like this,

12
00:01:13,220 --> 00:01:17,600
so the name of your component, the same name you have in your file and folder

13
00:01:17,630 --> 00:01:25,160
if you're using a folder but without a dash and capitalized or with a starting capital characters for

14
00:01:25,190 --> 00:01:33,470
all the sub-words in that overall word, so side and drawer both start with capital characters. And that

15
00:01:33,500 --> 00:01:40,610
does not extend HTML elements, so we don't write this, instead we're already done here.

16
00:01:40,610 --> 00:01:47,930
This extending will be done by stencil in this build process, it will transform our code here into a

17
00:01:47,930 --> 00:01:49,730
vanilla web component code

18
00:01:49,730 --> 00:01:57,530
in the end and there it'll do this extension, so we don't do it here. Now to tell stencil that this class

19
00:01:57,530 --> 00:02:03,410
here should become a web component because we could maybe also create a class that we use differently

20
00:02:03,410 --> 00:02:04,290
in our code,

21
00:02:04,310 --> 00:02:10,100
classes are just blueprints for objects, so we could write other classes too that are just used to then

22
00:02:10,100 --> 00:02:13,220
manually instantiate objects in our code.

23
00:02:13,790 --> 00:02:21,530
So for the stencil, that this class should be converted to a component, we add a so-called decorator. Decorators

24
00:02:21,590 --> 00:02:25,370
start with an @ and are a Typescript language feature,

25
00:02:25,370 --> 00:02:30,350
they might become reality in vanilla javascript too in the future but right now, Typescript supports

26
00:02:30,350 --> 00:02:32,030
them. There

27
00:02:32,150 --> 00:02:37,980
we add the @ component decorator and you execute this like a function,

28
00:02:38,270 --> 00:02:41,240
so you add parentheses after it.

29
00:02:41,240 --> 00:02:49,030
Now this needs to be imported because Typescript is a language that is strongly typed and if you are

30
00:02:49,030 --> 00:02:55,610
using a special type or a special class, then you need to tell Typescript where it finds the definition

31
00:02:55,700 --> 00:03:03,790
for this class or for this type and you do this with an ES module import. Now ES module imports are a

32
00:03:03,790 --> 00:03:09,450
part of modern javascript and such an import looks like that. You add the import keyword,

33
00:03:09,620 --> 00:03:17,240
then curly braces and then from and then the path of the file where this type or class or function

34
00:03:17,300 --> 00:03:20,330
or whatever you are importing is defined.

35
00:03:20,330 --> 00:03:27,220
Now this could be one of your own files but the component decorator is exposed by the stencil toolset,

36
00:03:27,530 --> 00:03:34,590
so we actually import from @stencil/core and we don't just import nothing which we currently do

37
00:03:34,700 --> 00:03:41,270
but instead here between the curly braces, we state what we want to import. And stencil exposes a couple

38
00:03:41,270 --> 00:03:46,880
of types and functionalities, a couple of decorators and one of them is the component decorator,

39
00:03:46,880 --> 00:03:50,770
so we simply add that here and then we can add it here without getting an error.

40
00:03:51,890 --> 00:03:55,930
Now this is the first step towards turning this into a component

41
00:03:56,060 --> 00:03:57,530
but we're not done,

42
00:03:57,530 --> 00:04:05,330
we need to pass a configuration object to that decorator. So we add curly braces inside of the parentheses

43
00:04:05,750 --> 00:04:11,180
to simply pass a javascript object as an argument because behind the scenes, decorators are really just

44
00:04:11,180 --> 00:04:16,840
functions, functions that are able to interact with the code that comes after them,

45
00:04:16,850 --> 00:04:22,520
in this case with the class and stencil will do all the heavy lifting and all the magic behind the scenes,

46
00:04:22,730 --> 00:04:25,340
it will basically attach some metadata to this class

47
00:04:25,340 --> 00:04:31,510
behind the scenes. Now in this object we configure, how this component can be used and how it should work

48
00:04:31,880 --> 00:04:36,770
and one must-have property here is the tag property.

49
00:04:36,770 --> 00:04:43,460
There you set a string and there, you define the tag by which you will be able to use that component.

50
00:04:43,460 --> 00:04:49,430
If you compare this to our custom vanilla javascript component which we created in the last modules,

51
00:04:49,850 --> 00:04:54,420
there we also defined our own tag when we defined this component.

52
00:04:54,440 --> 00:05:00,980
Now basically, stencil will do this definition for us and we tell it which tag it should use for defining

53
00:05:00,980 --> 00:05:01,840
that.

54
00:05:01,910 --> 00:05:04,870
So here, the same convention as before applies,

55
00:05:04,880 --> 00:05:10,820
your tag must have at least one dash and it should have a prefix that turns it into a unique tag,

56
00:05:11,000 --> 00:05:14,690
so I will stick to my uc- naming convention and I'll name it

57
00:05:14,690 --> 00:05:18,260
uc-side-drawer.

58
00:05:18,590 --> 00:05:24,590
Now we can use this component because now we have a tag here and this is the bare minimum configuration

59
00:05:24,590 --> 00:05:25,470
we need,

60
00:05:25,820 --> 00:05:31,970
now the bare minimum configuration for this component tag at least. To turn this into a valid component,

61
00:05:31,970 --> 00:05:37,480
we also need to have one other thing, we need to have a render method here.

62
00:05:37,550 --> 00:05:39,500
Now we simply add it like this,

63
00:05:39,590 --> 00:05:45,170
this is a function inside of the class and such functions are called methods and this render method

64
00:05:45,170 --> 00:05:47,090
has to be named render.

65
00:05:47,240 --> 00:05:54,340
Now again before in our own component, we could add a render method and we did so in other components,

66
00:05:54,350 --> 00:05:59,210
not in this modal but in other components but there. we could name the methods as we wanted.

67
00:05:59,210 --> 00:06:04,780
There were little reserved name, attributesChangeCallback was an exception.

68
00:06:05,060 --> 00:06:06,730
Render is an exception

69
00:06:06,860 --> 00:06:10,360
in a class turned into a web component by stencil.

70
00:06:10,460 --> 00:06:15,830
This is a method stencil will execute for us to parse the DOM

71
00:06:15,830 --> 00:06:19,150
it should generate as part of this component and in render,

72
00:06:19,150 --> 00:06:26,360
you have to return this JSX code and this is really just a special javascript syntax that can be

73
00:06:26,540 --> 00:06:30,500
translated into DOM write instructions

74
00:06:30,530 --> 00:06:32,930
so to say by stencil.

75
00:06:32,930 --> 00:06:41,750
So here we could start simple with a div and in that div, we have like a h1 tag where we say the side

76
00:06:41,930 --> 00:06:45,760
drawer and obviously we'll add more useful logic later.

77
00:06:45,770 --> 00:06:50,250
Now I reformatted this with a shortcut in my IDE which simply converts it to this code

78
00:06:50,330 --> 00:06:57,560
but again, it's still a wrapping div with this h1 tag in there and for now, please be aware that it would

79
00:06:57,560 --> 00:07:00,320
not work if you have a sibling div next to that,

80
00:07:00,320 --> 00:07:02,600
you must have one root element here.

81
00:07:02,600 --> 00:07:03,740
There are ways around that,

82
00:07:03,770 --> 00:07:06,420
you could return an array with multiple elements

83
00:07:06,500 --> 00:07:09,970
but for now, let's simply stick to that one root element.

84
00:07:10,070 --> 00:07:14,570
Now with that, we have our valid component.

85
00:07:14,730 --> 00:07:20,690
Now one thing is missing and we're getting an error here and that is that we defined this class in our

86
00:07:20,690 --> 00:07:21,480
file here

87
00:07:21,770 --> 00:07:29,480
but in order to use it outside of this file, we need to export it which we do by adding an export statement.

88
00:07:29,480 --> 00:07:33,600
Now of course we did not do that for our custom components here

89
00:07:33,740 --> 00:07:40,820
when we used vanilla javascript. Typescript requires us to add this export here because Typescript the

90
00:07:40,820 --> 00:07:47,660
way it works, bundles several files together and therefore, it needs to be able to pull all these files

91
00:07:47,660 --> 00:07:53,780
together and it does so with import and export statements and just as we import our component here by

92
00:07:53,840 --> 00:08:00,710
exporting our custom class here, stencil behind the scenes is able to pull all things together in the build

93
00:08:00,710 --> 00:08:05,960
process. And therefore, about decorators being an experimental feature,

94
00:08:05,960 --> 00:08:09,700
that is an IDE bug here though, it should work and indeed it does,

95
00:08:09,740 --> 00:08:12,120
we got no error down there at the terminal,

96
00:08:12,140 --> 00:08:16,790
so now I can actually start using this and I can use this component by this tag.

97
00:08:16,820 --> 00:08:21,310
Let's do that in the index.html file which is our playground for testing our components.

98
00:08:21,440 --> 00:08:23,870
So there, I will simply add my own component,

99
00:08:24,140 --> 00:08:30,500
save that again and if I now go to this HTML file or to my browser window that opened when we ran

100
00:08:30,500 --> 00:08:37,100
npm start, it should have automatically reloaded and we see the content of our own custom component and

101
00:08:37,100 --> 00:08:42,140
these are the basic steps we always take when we create a new component with stencil.

102
00:08:42,140 --> 00:08:45,160
Now there is way more we can do of stencil, way more

103
00:08:45,200 --> 00:08:48,500
we can configure and way more logic stencil helps us with

104
00:08:48,650 --> 00:08:52,730
but this is the basic process of creating a new component.
