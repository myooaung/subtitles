WEBVTT
1
00:00:02.190 --> 00:00:07.260
So we're able to handle the user input and check it and at least we can validate it for being

2
00:00:07.320 --> 00:00:08.090
empty,

3
00:00:08.100 --> 00:00:15.900
however this is not enough because we can still enter some invalid data here, if I click enter,

4
00:00:16.130 --> 00:00:18.050
we get not a number here.

5
00:00:18.080 --> 00:00:24.940
The reason for that is that when we check the network tab, this request here, we see the global quote actually

6
00:00:24.940 --> 00:00:25.460
is empty.

7
00:00:25.480 --> 00:00:33.460
So we don't get an error if we have an invalid symbol but we get an empty global quote object and that

8
00:00:33.460 --> 00:00:36.180
is simply something we need to check for,

9
00:00:36.340 --> 00:00:40.060
we need to prevent basically.

10
00:00:40.120 --> 00:00:46.180
Now if you had a different API, that would be giving you let's say a status code that is 404 when it

11
00:00:46.210 --> 00:00:47.650
doesn't find something,

12
00:00:47.800 --> 00:00:52.220
you could check the status code here in the first then block where you have access to status

13
00:00:52.240 --> 00:00:58.780
and this will be a number and there, you could check if status is for example not equal to 200,

14
00:00:58.780 --> 00:01:04.240
so if it is some error, then you could throw a new error here

15
00:01:05.790 --> 00:01:07.590
and configure this however you want

16
00:01:07.590 --> 00:01:12.300
and then it would automatically skip the next line and also skip this and go right into the catch block

17
00:01:12.330 --> 00:01:14.370
where you could handle the error.

18
00:01:14.370 --> 00:01:20.890
However this is not what's happening here because we get a 200 code here even for invalid symbols,

19
00:01:20.890 --> 00:01:22.710
this is just how this API works,

20
00:01:22.710 --> 00:01:29.490
we do have a 200 status code here but we know that we have an empty object here. So we can still handle

21
00:01:29.490 --> 00:01:30.890
this error, here

22
00:01:30.900 --> 00:01:37.470
before we extract the value, we can simply check whether global quote is an empty object or not.

23
00:01:37.590 --> 00:01:41.930
So to be precise, we want to check if this property exists or not.

24
00:01:42.060 --> 00:01:46.290
So we can check if and then we just copy that,

25
00:01:46.460 --> 00:01:49.360
if this exists. Global quote will exist,

26
00:01:49.370 --> 00:01:52.950
we know that, there is a global quote object but this will be empty,

27
00:01:53.180 --> 00:01:59.960
so this does not exist and therefore the result of this will be undefined which will be treated as false.

28
00:01:59.990 --> 00:02:00.920
So let's check for that,

29
00:02:00.920 --> 00:02:08.180
so if this is not true, so if it is false, if it is undefined here, then we want to do something

30
00:02:08.180 --> 00:02:14.820
and here, I will throw a new error invalid symbol.

31
00:02:14.820 --> 00:02:16.800
Of course it could be a different error source too

32
00:02:16.800 --> 00:02:18.510
but here I'll throw this error

33
00:02:18.930 --> 00:02:27.830
and now if I reload and I open my console here and I enter some invalid symbol here, I actually get

34
00:02:27.830 --> 00:02:29.580
that error being thrown here.

35
00:02:29.900 --> 00:02:37.160
So now we can work with that error in the catch block and set this up as a central error handling place

36
00:02:38.030 --> 00:02:43.790
and I simply want to show a user message here or an output whenever we have any error, instead

37
00:02:43.790 --> 00:02:44.970
of the price.

38
00:02:45.470 --> 00:02:47.180
So what can we do?

39
00:02:47.390 --> 00:02:54.310
Well first of all, we can use state again and add an error property or whatever you want to name it

40
00:02:54.340 --> 00:02:55.740
and this will be a string

41
00:02:56.140 --> 00:03:05.000
and here, I want to set this error equal to error message. The error object here has a message property,

42
00:03:05.020 --> 00:03:09.910
that is how the default error object in Javascript works and I'll extract that string message and

43
00:03:09.910 --> 00:03:12.550
store it in my error property

44
00:03:12.670 --> 00:03:14.910
and now we can output that down there.

45
00:03:15.340 --> 00:03:22.900
So for this in a render function, I'll have my data content variable and as a default,

46
00:03:22.920 --> 00:03:24.280
I assume I get a price,

47
00:03:24.300 --> 00:03:28.640
so I'll just cut the content from down there and output this here.

48
00:03:28.800 --> 00:03:30.390
However we might have an error,

49
00:03:30.570 --> 00:03:33.510
so if this error is true-ish,

50
00:03:33.660 --> 00:03:40.380
so if it is a string with any text in it basically, then I'll set data content equal to a paragraph where

51
00:03:40.380 --> 00:03:42.240
I output this error,

52
00:03:42.240 --> 00:03:49.820
so the message I store in this error property and then data content is set to either the price or the error message,

53
00:03:49.890 --> 00:04:00.140
I'll set or I'll output data content down there between the div tags. So now with this, if I reload and I enter something

54
00:04:00.140 --> 00:04:08.110
invalid here, I get invalid symbol down there and that is certainly better than just logging it to the

55
00:04:08.110 --> 00:04:10.860
console which most users will never see.

56
00:04:11.000 --> 00:04:16.720
Now obviously it would also be great to not show anything here if we have no price yet, so we can actually

57
00:04:16.720 --> 00:04:24.780
change this a little bit and after checking for the error, I'll see if we have a fetched price

58
00:04:24.800 --> 00:04:31.070
and only if we have a fetched price, I'll output it here and otherwise as a default setting, I'll have a

59
00:04:31.070 --> 00:04:36.290
text here where I say please enter a symbol.

60
00:04:36.350 --> 00:04:41.750
So now we have one extra case and that is now the default case which I see right from the start,

61
00:04:41.750 --> 00:04:46.300
please enter a symbol. After I enter one,

62
00:04:46.370 --> 00:04:49.900
I see the error if it's invalid or if it is valid,

63
00:04:54.980 --> 00:04:56.550
we still see the error, right.

64
00:04:56.960 --> 00:04:59.720
Well the reason for that is that we never clear our error.

65
00:04:59.930 --> 00:05:03.580
We set it here in the catch block but we should of course get rid of it

66
00:05:03.740 --> 00:05:05.600
if we make it past this if check,

67
00:05:05.600 --> 00:05:07.570
so if we have a valid response.

68
00:05:07.790 --> 00:05:12.420
So this error should then be null to clear it.

69
00:05:12.520 --> 00:05:18.470
And now with this, if I reload, let's again try this, enter something invalid,

70
00:05:18.790 --> 00:05:20.780
we get the error,

71
00:05:20.800 --> 00:05:22.730
let's enter some valid symbol

72
00:05:23.380 --> 00:05:25.540
and we do get

73
00:05:25.540 --> 00:05:27.190
please enter a symbol again.

74
00:05:27.550 --> 00:05:33.610
Well the reason for that simply is that I should of course output my paragraph here into data content,

75
00:05:33.610 --> 00:05:34.420
sorry about that.

76
00:05:34.420 --> 00:05:40.550
We of course need to set this text we want to output with the price to our variable data content here.

77
00:05:41.520 --> 00:05:49.050
So now last try, it already updated here behind the scenes but let's try this again, invalid input and then a valid

78
00:05:49.320 --> 00:05:50.590
symbol

79
00:05:50.700 --> 00:05:51.810
and this looks pretty good.

80
00:05:52.080 --> 00:05:55.310
So now we have different types of error checking in place

81
00:05:55.440 --> 00:06:02.160
and this is of course also important to know as well as to know how to update your interface, your DOM

82
00:06:02.310 --> 00:06:05.890
efficiently depending on which case currently is the case.
