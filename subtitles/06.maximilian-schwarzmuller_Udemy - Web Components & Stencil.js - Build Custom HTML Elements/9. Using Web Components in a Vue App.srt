1
00:00:02,500 --> 00:00:07,480
So we saw how we use our own custom components in Angular and React apps,

2
00:00:07,480 --> 00:00:12,440
maybe you are a VueJS developer though so let's also see it there.

3
00:00:12,520 --> 00:00:14,160
Navigate into that Vue folder

4
00:00:14,410 --> 00:00:19,960
and there, first of all run npm install to install all the package this Vue project generated with

5
00:00:19,960 --> 00:00:22,570
the Vue CLI by the way, requires

6
00:00:22,930 --> 00:00:30,190
and once this installation process here finishes, we can install our own package from the npm registry.

7
00:00:30,230 --> 00:00:31,710
So let's wait for that to finish

8
00:00:32,570 --> 00:00:39,190
and thereafter run install --save uc-components to again use that package of components

9
00:00:39,350 --> 00:00:42,670
you published to npm earlier in this module.

10
00:00:43,940 --> 00:00:49,040
Now with this installed, how do we enable our elements in a Vue app?

11
00:00:49,490 --> 00:00:54,740
Well we need to go into that source folder and there in the main.js file or in general, the file

12
00:00:54,740 --> 00:00:55,430
where you

13
00:00:55,460 --> 00:00:58,110
mount your root component to the DOM

14
00:00:58,310 --> 00:01:06,200
and in this case, this is the main.js file. In there, you now want to add import from your uc-components

15
00:01:06,310 --> 00:01:13,740
/dist/loader folder and you want to import define custom elements.

16
00:01:13,840 --> 00:01:19,780
Now you need to call that function here and you want to do that before you call new Vue

17
00:01:20,210 --> 00:01:25,490
and there, you pass the window object into this, the default window object which is globally available

18
00:01:25,490 --> 00:01:32,730
in Javascript and that will then register all your components and their tags in that browser window

19
00:01:32,730 --> 00:01:34,120
so to say, so in this

20
00:01:34,130 --> 00:01:40,700
app they are then available. And now you can use them in your Vue templates, like here in

21
00:01:40,700 --> 00:01:45,140
the starting template, I'll delete the default content which was in there

22
00:01:45,320 --> 00:01:54,610
and instead I'll add uc-stock-price and now you can run npm run serve to bring up that development

23
00:01:54,610 --> 00:01:56,790
server for this application.

24
00:01:57,160 --> 00:01:59,540
It'll run on this location which gets printed here,

25
00:01:59,560 --> 00:02:01,580
in my case http://www.localhost:8080

26
00:02:01,610 --> 00:02:05,400
so let's visit this page, here it is.

27
00:02:05,470 --> 00:02:08,590
Now here you see, let's first of all test it,

28
00:02:08,620 --> 00:02:10,220
does it work?

29
00:02:10,270 --> 00:02:11,380
That looks good.

30
00:02:11,380 --> 00:02:15,900
Now in the network tab, we see a bunch of requests being made, a bunch of bundles being called

31
00:02:15,970 --> 00:02:18,340
but I want to draw your attention to that 0.js

32
00:02:18,430 --> 00:02:22,720
file at the very bottom before these other imports here.

33
00:02:22,750 --> 00:02:28,990
Now let's see how that changes when we add the uc-stock-finder, so that other web component which we

34
00:02:28,990 --> 00:02:31,250
published. Make sure to also close this

35
00:02:31,810 --> 00:02:35,330
and then reload this page and you will see that the besides the 0.js,

36
00:02:35,410 --> 00:02:37,210
we have the 2.js at the end

37
00:02:37,210 --> 00:02:43,360
and if you click into them, you will see that this is the uc-stock-finder, if you scroll through it, somewhere

38
00:02:43,360 --> 00:02:45,710
you will see that tag name in there.

39
00:02:45,730 --> 00:02:50,680
So essentially we now got one extra bundle and the bundle size is very large here because this is development

40
00:02:50,680 --> 00:02:52,020
mode, in production mode,

41
00:02:52,030 --> 00:02:53,980
it would be smaller here too.

42
00:02:54,580 --> 00:03:00,190
So we have both bundles loaded which makes sense because we have both components doing their job here

43
00:03:00,610 --> 00:03:03,280
and they work just fine as you can see.

44
00:03:03,280 --> 00:03:09,390
Now let me show you lazy loading here by not always rendering this, instead

45
00:03:09,400 --> 00:03:17,830
here I will add the data method, this is how you can manage changeable data that will have an effect

46
00:03:17,830 --> 00:03:19,700
on the template in Vue

47
00:03:20,110 --> 00:03:27,350
and there we return an object where I have showStockFinder which is false initially and I can bind

48
00:03:27,490 --> 00:03:28,690
this with V-if

49
00:03:28,720 --> 00:03:33,580
which is like ngIf in Angular and I bind to showStockFinder, like that.

50
00:03:33,880 --> 00:03:40,390
If I do that, this component is missing and therefore 0.js is the last bundle we load here, we don't

51
00:03:40,390 --> 00:03:43,650
load the other bundle for the other component.

52
00:03:43,740 --> 00:03:52,990
Now that will change as soon as I add a button there and on this button, I say load finder or whatever

53
00:03:52,990 --> 00:04:00,280
you want and I will add a click listener and there, I will just set showStockFinder equal to true.

54
00:04:01,680 --> 00:04:03,900
And what this will do is when I reload, 

55
00:04:04,020 --> 00:04:05,530
we still have only one bundle

56
00:04:05,550 --> 00:04:11,820
but if I clear my network tab now and I click load finder, it now loads this other package because now

57
00:04:11,820 --> 00:04:13,670
we're using that other component.

58
00:04:13,670 --> 00:04:20,490
And here again, we are taking advantage of the built-in lazy loading the components built with stencil

59
00:04:20,490 --> 00:04:21,190
have,

60
00:04:21,340 --> 00:04:27,300
they're still native web components that just got this extra magic added on top of them making it possible

61
00:04:27,300 --> 00:04:29,070
to use them very efficiently.
