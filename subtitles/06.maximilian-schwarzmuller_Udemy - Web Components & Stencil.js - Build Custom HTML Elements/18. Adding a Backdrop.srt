1
00:00:02,130 --> 00:00:05,480
Now what is missing on that side drawer? The backdrop, right

2
00:00:05,500 --> 00:00:07,780
we have no backdrop which we could click to close it,

3
00:00:07,810 --> 00:00:12,690
we only have that close button, close button is nice but a backdrop would be nicer.

4
00:00:12,730 --> 00:00:15,780
Now of course, we can add one and you actually have two routes here,

5
00:00:15,850 --> 00:00:22,210
you can integrate and backdrop into your side drawer component to have side drawer component that has

6
00:00:22,210 --> 00:00:29,050
everything it needs to fully work or you have a general backdrop in your main app and you control it

7
00:00:29,260 --> 00:00:31,240
with your logic there.

8
00:00:31,240 --> 00:00:37,000
Now since we're building web components with stencil, I'll integrate a backdrop into my side drawer

9
00:00:37,450 --> 00:00:46,670
and for that, I want to have an element next to my aside. If I add a div here next to aside and give

10
00:00:46,670 --> 00:00:50,030
it a class of backdrop,

11
00:00:50,330 --> 00:00:51,590
then I get an error.

12
00:00:51,860 --> 00:00:59,110
We actually can't have two top level JSX elements sit next to each other like this.

13
00:00:59,200 --> 00:01:04,890
Good thing is you can easily have it if we add an array though, if we return an array though,

14
00:01:04,910 --> 00:01:06,960
so if we return two items in an array.

15
00:01:07,070 --> 00:01:13,880
So we add a comma after the div and then we have the aside, certainly looks strange at first but actually

16
00:01:14,000 --> 00:01:18,230
it's just an array of Javascript code, of JSX elements in this case

17
00:01:18,350 --> 00:01:23,470
and now we can have both the backdrop and the aside.

18
00:01:23,510 --> 00:01:30,080
Now of course we just have to do the styling and for that, I'll add a new style in my side-drawer.css

19
00:01:30,180 --> 00:01:41,390
file, backdrop and I'll give this a fixed position as well, just as the side-drawer, top zero, left zero

20
00:01:42,170 --> 00:01:53,480
a width of 100% and a height of 100vh. Give it a background color of transparent black color

21
00:01:54,110 --> 00:02:03,050
with 75% opacity, 25% transparency therefore

22
00:02:03,140 --> 00:02:10,290
and let's give this a set index of let's say 10 and to make sure that the side drawer is above it,

23
00:02:10,530 --> 00:02:21,070
I'll give my side drawer a set index of 100. With that if I reload, here's the backdrop,

24
00:02:21,260 --> 00:02:29,060
it's always visible because currently we have no logic that would only render it when the opened attribute

25
00:02:29,060 --> 00:02:29,710
is set

26
00:02:30,170 --> 00:02:36,930
but of course we can change this. Just as I only show my side drawer with opened being present,

27
00:02:37,210 --> 00:02:38,490
I can do the same here.

28
00:02:38,630 --> 00:02:45,080
So I look for this opened attribute on my host element and if that is present, then on my backdrop, I

29
00:02:45,080 --> 00:02:47,180
change something to make it visible.

30
00:02:47,180 --> 00:02:48,910
There are various ways of doing that,

31
00:02:49,070 --> 00:02:56,360
one possible way of hiding it is to set the display to none here so that the element is not added to

32
00:02:56,360 --> 00:02:58,290
the document flow by default

33
00:02:58,460 --> 00:03:03,840
and then I set the display to block here when we have opened. With that if I go back,

34
00:03:04,010 --> 00:03:10,410
indeed there is no backdrop and I can click this button and now it appears and the side menu opens.

35
00:03:10,610 --> 00:03:13,800
Of course maybe we want a little animation there too,

36
00:03:14,140 --> 00:03:22,180
for that we can give this an opacity of zero by default and show it with opacity of one, then we should also

37
00:03:22,180 --> 00:03:30,190
make sure that pointer events are not caught here though, only when it is visible otherwise we can't

38
00:03:30,190 --> 00:03:31,250
click through it

39
00:03:31,720 --> 00:03:40,500
and of course we want to give it a transition where we animate the opacity with an easeOut timing

40
00:03:40,500 --> 00:03:49,540
function over let's say 300 milliseconds. With that, now this animates in smoothly.

41
00:03:49,650 --> 00:03:50,970
Nice.

42
00:03:51,090 --> 00:03:54,180
Now of course we don't register clicks on it though

43
00:03:54,180 --> 00:03:59,790
to close our side menu and definitely feel free to pause the video and build such a functionality on

44
00:03:59,790 --> 00:04:00,250
your own,

45
00:04:00,270 --> 00:04:04,750
it is a nice practice afterall but we can also do it together of course.

46
00:04:04,800 --> 00:04:06,510
Here's your chance to pause the video,

47
00:04:06,520 --> 00:04:07,480
to try it on your own,

48
00:04:09,680 --> 00:04:11,210
were you successful?

49
00:04:11,300 --> 00:04:16,720
Let's try it together. We want to click on the backdrop and then hide the entire side drawer.

50
00:04:16,910 --> 00:04:19,240
Well it's actually not that difficult, 

51
00:04:19,280 --> 00:04:24,240
we have the onCloseDrawer method here and this changes opened to false.

52
00:04:24,320 --> 00:04:34,490
Well all we have to do is we have to register a click here on the backdrop and upon that click, I call

53
00:04:34,520 --> 00:04:42,700
this onCloseDrawer and I bind the this keyword and that should already be all. With that in place,

54
00:04:42,770 --> 00:04:48,220
now we can open that, click anywhere on the backdrop and that closes it

55
00:04:48,350 --> 00:04:54,650
and now we have a nice working web component with our code here. And I hope you already see how does

56
00:04:54,650 --> 00:05:01,190
this is much cleaner code than what we had to write here manually for our component with vanilla Javascript

57
00:05:01,610 --> 00:05:08,720
and this is exactly one part where stencil helps you and always keep in mind that the output is an optimized

58
00:05:08,960 --> 00:05:16,370
vanilla Javascript web component though, optimized in the sense of it automatically loads all your polyfills

59
00:05:16,370 --> 00:05:17,270
you might need

60
00:05:17,390 --> 00:05:18,010
and so on.
