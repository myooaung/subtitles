WEBVTT
1
00:00:02.210 --> 00:00:08.900
Now there's one thing I want to do to conclude the styling part and there, we'll use a relatively modern

2
00:00:08.960 --> 00:00:11.890
CSS feature, CSS variables.

3
00:00:12.170 --> 00:00:17.750
If you ever worked with Sass, you'll quickly know what CSS variables are, just that they're built into the

4
00:00:17.750 --> 00:00:26.070
core CSS functionality and don't require a development environment compiler as Sass does.

5
00:00:26.120 --> 00:00:28.880
So what's the idea behind CSS variables?

6
00:00:28.880 --> 00:00:32.020
Well, we have all our nice sytlings in our tooltip here,

7
00:00:32.060 --> 00:00:37.180
for example the background color when we have the important class on the host element.

8
00:00:37.230 --> 00:00:46.760
Now sometimes, you want to take advantage of the default styling your elements set up but you still

9
00:00:46.760 --> 00:00:48.230
want to customize it a bit,

10
00:00:48.380 --> 00:00:54.440
let's say the background color here, when we have that important flag, should depend on a certain theme

11
00:00:54.440 --> 00:00:56.510
we have in our application.

12
00:00:56.510 --> 00:01:02.630
Now obviously what we always can do is we can go into the style definitions of our light DOM and we could

13
00:01:02.630 --> 00:01:04.100
of course also say

14
00:01:04.400 --> 00:01:14.620
any tooltip, so we use our tool selector, with the important class receives a background of green.

15
00:01:14.930 --> 00:01:20.330
OK we can always do that and if we go back and reload, we have that green color here.

16
00:01:20.330 --> 00:01:22.250
Now this doesn't work,

17
00:01:22.280 --> 00:01:28.970
the problem with that just is we have to be totally aware of all the styles we set when the important

18
00:01:28.970 --> 00:01:30.570
class is added

19
00:01:30.590 --> 00:01:33.100
if we then want to overwrite it as we do it here.

20
00:01:33.320 --> 00:01:39.050
Now here we know that the only thing we do with important inside of our custom element is that we set

21
00:01:39.050 --> 00:01:44.870
the background but we could be doing all kinds of things there and it would be very inconvenient if we

22
00:01:44.870 --> 00:01:51.410
as a developer had to drill into all the web components we're using to find out what they were doing

23
00:01:51.410 --> 00:01:57.830
when we add a certain CSS class and we might know that they do something when we add a class in general

24
00:01:57.890 --> 00:02:03.320
because we can find that in the documentation for the component let's say but we don't know all the

25
00:02:03.320 --> 00:02:06.550
styles this component is applying. What we do know,

26
00:02:06.680 --> 00:02:13.610
also because of the documentation for a component let's say, is that we can set a primary color and that

27
00:02:13.610 --> 00:02:16.850
the component will then use that primary color

28
00:02:16.850 --> 00:02:22.020
besides all other styles it might be setting which we don't want to touch and that is exactly where

29
00:02:22.020 --> 00:02:27.510
CSS variables or CSS properties can help us.

30
00:02:27.750 --> 00:02:36.420
We can go to our light DOM and instead of manually overwriting our style here like this, we can add a

31
00:02:36.420 --> 00:02:39.280
CSS variable,

32
00:02:39.320 --> 00:02:46.730
typically you do that inside of the special root selector which simply is like the root of your document.

33
00:02:46.930 --> 00:02:54.190
Alternatively you could select HTML here in a HTML document and in there, you can add your own

34
00:02:54.190 --> 00:03:02.030
custom variable with two dashes at the beginning and then any name you want, something like

35
00:03:02.060 --> 00:03:06.310
color-primary and there, let's give this a light blue

36
00:03:06.310 --> 00:03:10.950
maybe, let's see, let's pick this one

37
00:03:11.130 --> 00:03:16.950
and now we just need to make sure that we use that in the component and in reality, it probably is the other

38
00:03:16.950 --> 00:03:17.670
way around.

39
00:03:17.790 --> 00:03:23.580
You are using a web component in your application and in the documentation of that web component, you

40
00:03:23.580 --> 00:03:30.870
find the information that this component is able to read the color-primary CSS variable

41
00:03:30.900 --> 00:03:31.620
let's say

42
00:03:31.920 --> 00:03:37.560
and therefore when you set it in your light DOM, the tooltip can pick it up because in there, we just

43
00:03:37.560 --> 00:03:38.800
happen to use that.

44
00:03:39.030 --> 00:03:45.130
So instead of hardcoding the light gray here, we can use that variable and we do this with the special

45
00:03:45.180 --> 00:03:52.080
var function which CSS understands and there, we now just have to use the same name, so 

46
00:03:52.090 --> 00:03:54.910
--color-primary.

47
00:03:55.050 --> 00:04:01.530
If we do that and we save this, we can go back and reload and we now see this light blue style here

48
00:04:01.530 --> 00:04:08.160
as a background but now this is fully customizable from inside the light DOM without us being required

49
00:04:08.370 --> 00:04:13.520
to dig into the internals of our component and manually override that,

50
00:04:13.650 --> 00:04:18.500
instead we can simply change the color in the light DOM in this variable and it will be picked up by the

51
00:04:18.520 --> 00:04:23.470
styling inside of our component due to the way we use this CSS variable.

52
00:04:23.500 --> 00:04:29.260
And if you want to learn more about CSS variables and CSS in general, don't hesitate to take my CSS

53
00:04:29.260 --> 00:04:31.520
The Complete Guide Course of course,

54
00:04:31.530 --> 00:04:37.830
this is a really neat feature when you want to implement something like theming or dynamic colors which

55
00:04:37.830 --> 00:04:39.680
you can set from outside.

56
00:04:39.780 --> 00:04:42.410
You are not restricted to colors by the way,

57
00:04:42.480 --> 00:04:43.890
you can pass anything,

58
00:04:43.890 --> 00:04:49.380
you could also have variables where you set some font sizes or padding dimensions,

59
00:04:49.390 --> 00:04:50.780
so pixels, rems,

60
00:04:50.910 --> 00:04:58.050
this is all possible and you can find an article with more information on CSS properties or variables

61
00:04:58.200 --> 00:05:03.840
as I call them here attached to this lecture by the way in case you want to dive deeper, learn more about

62
00:05:03.840 --> 00:05:07.880
them and learn more about browser support for this feature and so on.

63
00:05:08.750 --> 00:05:16.480
This now gives us full functionality though and is an awesome way of enhancing our component.

64
00:05:16.520 --> 00:05:22.810
There's just one other thing we can do here to make it even better, in cases where color-primary is not set,

65
00:05:23.170 --> 00:05:28.360
let's say I'm not setting it here, I'm commenting it out in the light DOM, in such cases

66
00:05:28.360 --> 00:05:32.980
we of course have no background color because we're trying to apply this variable here

67
00:05:33.160 --> 00:05:40.300
but this variable does not exist so we can't extract the value from it. To handle such cases,

68
00:05:40.300 --> 00:05:44.680
we can set up a default value in the place where we try to access the variable,

69
00:05:44.680 --> 00:05:50.210
so in our custom component. We simply add a comma after the variable name

70
00:05:50.230 --> 00:05:51.350
we're looking for

71
00:05:51.550 --> 00:05:55.360
and then we provide a fallback value, like this light-gray.

72
00:05:55.540 --> 00:06:00.310
And if we do that like this, now if I reload, we have the light gray

73
00:06:00.640 --> 00:06:07.600
but if I were to override this in the light DOM by defining that variable the component is looking for,

74
00:06:07.730 --> 00:06:11.540
if we do that, then this of course gets picked up.

75
00:06:11.590 --> 00:06:18.300
So now we have the highest amount of flexibility we could possibly have for this styling thing.
