WEBVTT
1
00:00:02.330 --> 00:00:09.470
So with all the base set up out of the way, let's now finally create our first web component, our first

2
00:00:09.620 --> 00:00:11.080
custom element

3
00:00:11.470 --> 00:00:17.230
and for that, in the tooltip.js file, I will create a new class.

4
00:00:17.270 --> 00:00:21.840
Now class is a built-in feature built into Javascript,

5
00:00:21.860 --> 00:00:28.520
it's relatively new, was added with ES6 which is simply a specific Javascript version you could say

6
00:00:29.030 --> 00:00:34.220
and classes allow us to build blueprints for Javascript objects

7
00:00:34.220 --> 00:00:39.500
and it's such a blueprint that we will end up wire up our own custom.html

8
00:00:39.530 --> 00:00:45.180
tag. Now you can give that class any name you want and I'll name it tooltip

9
00:00:45.260 --> 00:00:50.270
and now here's one important part. To be usable as a custom element,

10
00:00:50.390 --> 00:00:57.440
you need to extend something with the extends keyword which means you have to build your class based

11
00:00:57.500 --> 00:01:00.030
on some other base class

12
00:01:00.170 --> 00:01:08.170
and here, we will use a base class that's built into the browser, we'll use the HTML element class here.

13
00:01:08.180 --> 00:01:15.950
Now this is a class, an object built into the browser not defined by us and we extend that and every

14
00:01:15.950 --> 00:01:18.000
custom element has to extend that,

15
00:01:18.170 --> 00:01:24.560
it's still an independent, an autonomous custom element though, I will show you extended built-in

16
00:01:24.680 --> 00:01:32.180
elements later, there you will not extend the HTML element but more specific versions of it.

17
00:01:32.300 --> 00:01:40.040
If you extend this, you have a basic vanilla green field HTML element you build on your own which does

18
00:01:40.040 --> 00:01:42.440
not depend on any built-in element,

19
00:01:42.470 --> 00:01:45.910
this is simply a base element you always need to extend.

20
00:01:46.400 --> 00:01:52.330
And now in here, you will put all the logic that makes up your custom element,

21
00:01:52.370 --> 00:01:55.030
the question just is, what does this mean,

22
00:01:55.040 --> 00:01:56.980
put all the logic in there?

23
00:01:57.940 --> 00:02:06.370
Well let's say this tooltip component should in the end show us a tooltip button, a tooltip icon

24
00:02:06.590 --> 00:02:14.480
and when we hover over that icon, we want to present a tooltip to the user. For this, we can define a couple

25
00:02:14.480 --> 00:02:18.110
of things in this custom element to make this work

26
00:02:18.220 --> 00:02:25.770
and the first thing we can add is a constructor. A constructor is also a default method name which is detected

27
00:02:25.830 --> 00:02:31.270
by Javascript and Javascript will automatically execute this method,

28
00:02:31.300 --> 00:02:40.390
so this function inside of a class whenever this class is instantiated, which means whenever a new object

29
00:02:40.390 --> 00:02:50.070
based on that class is created and later, these new objects will be our own custom HTML tags in the

30
00:02:50.100 --> 00:02:52.240
index.html file. We haven't added them yet,

31
00:02:52.240 --> 00:02:53.780
we'll do so later.

32
00:02:54.130 --> 00:02:58.980
For now let's start simple and let's simply add a console log statement here,

33
00:02:59.200 --> 00:03:06.460
it is working and this should theoretically be output in the console whenever a new tooltip class is

34
00:03:06.460 --> 00:03:09.240
created or a new object.

35
00:03:09.250 --> 00:03:11.500
Now this is just a Javascript class,

36
00:03:11.500 --> 00:03:14.950
how can we now create our own HTML tag?

37
00:03:15.430 --> 00:03:22.640
For that, we use another object that is built into Javascript and that's the custom elements object. This is

38
00:03:22.660 --> 00:03:29.350
an object which allows us to register our own custom elements and we do this by using that define method

39
00:03:29.350 --> 00:03:30.040
here,

40
00:03:30.070 --> 00:03:37.510
so this is a function on this object which you can execute, all built into Javascript. This define method

41
00:03:37.810 --> 00:03:40.160
takes at least two arguments,

42
00:03:40.390 --> 00:03:41.990
the first one is a string

43
00:03:42.140 --> 00:03:47.090
and there, you define your own HTML tag.

44
00:03:47.090 --> 00:03:51.160
Now there are some rules for that tag name, for example

45
00:03:51.160 --> 00:03:58.670
it has to be a single word which has to consist of at least two parts separated by a dash,

46
00:03:58.690 --> 00:04:07.780
so my-tooltip is a valid name, just tooltip alone is not. The reason for that rule is that all

47
00:04:07.810 --> 00:04:08.170
built-in

48
00:04:08.250 --> 00:04:18.610
HTML elements like button or P or H1's are single words and by forcing you to have double words so

49
00:04:18.610 --> 00:04:25.010
to say, you are forced to not accidentally overwrite one of the built-in elements,

50
00:04:25.200 --> 00:04:28.590
also possibly future added elements.

51
00:04:28.740 --> 00:04:33.780
So therefore you have to have a dash in that name and it has to be a dash, an underscore is not allowed

52
00:04:33.780 --> 00:04:34.830
for example,

53
00:04:34.830 --> 00:04:40.040
so it has to be a dash and therefore here we could have my-tooltip.

54
00:04:40.650 --> 00:04:46.230
Now the prefix here at the beginning is totally up to you, it can be my-tooltip, it could be tooltip-tooltip

55
00:04:46.650 --> 00:04:54.660
but in reality, you want to choose a prefix here which kind of guarantees that your web component, your

56
00:04:54.660 --> 00:05:02.400
custom element has a unique tag so that if the users using your custom elements in their app because

57
00:05:02.430 --> 00:05:10.350
maybe you share them with the web, so that users using your custom elements have a very low chance of

58
00:05:10.350 --> 00:05:14.290
having clashing custom elements from different libraries.

59
00:05:14.460 --> 00:05:17.740
Therefore actually my-tooltip is not that great,

60
00:05:17.760 --> 00:05:24.300
often you use your company name there or a shortcut for your company name like acad for Academind

61
00:05:24.310 --> 00:05:30.480
in my case, in your case it should be your company or your initials like ms for Maximillian Schwarzmuller in

62
00:05:30.480 --> 00:05:35.820
my case. So I will go with uc for udemy course

63
00:05:35.910 --> 00:05:42.510
but in the end, choose a prefix here which combined with the part after it, kind of guarantees that

64
00:05:42.510 --> 00:05:44.490
this is a unique name.

65
00:05:44.820 --> 00:05:47.300
So this is the HTML tag chosen now,

66
00:05:47.520 --> 00:05:53.800
by the way, you can also have multiple dashes and multiple parts, at least one dash needs to be included.

67
00:05:53.820 --> 00:06:00.530
The second argument you pass to define then is your Javascript class that holds the logic for this

68
00:06:00.570 --> 00:06:01.660
custom element,

69
00:06:01.740 --> 00:06:06.740
so in our case this is the tooltip class here. So this class we define up here,

70
00:06:06.870 --> 00:06:15.690
we pass this as a second argument. With that, we're telling Javascript hey whenever you detect this HTML tag

71
00:06:16.110 --> 00:06:24.030
in an HTML file, you want to instantiate this class, you want to create a new object based on that class

72
00:06:24.420 --> 00:06:32.300
and you want to use that object for all the logic behind that custom element. And now with that and this

73
00:06:32.380 --> 00:06:41.590
tooltip.js file being imported here, we can actually add the uc-tooltip element here in the body of our

74
00:06:41.590 --> 00:06:46.520
index.html file and it will not do much, it should print this though.

75
00:06:47.020 --> 00:06:49.300
So now let's save both files,

76
00:06:49.300 --> 00:06:51.020
make sure you don't forget that

77
00:06:51.370 --> 00:06:57.940
and then let me simply run this by double clicking the index.html file.

78
00:06:58.100 --> 00:07:02.410
Now we'll not see anything on the page because we haven't added any visuals

79
00:07:02.510 --> 00:07:09.350
but if you open your developer tools, under view, developer, developer tools or with the shortcut you

80
00:07:09.350 --> 00:07:12.200
find there, then you should be able

81
00:07:15.190 --> 00:07:19.260
to open the console part there and you can ignore the error

82
00:07:19.300 --> 00:07:20.430
you'll be getting,

83
00:07:20.500 --> 00:07:23.060
you should see it is working though.

84
00:07:23.170 --> 00:07:32.140
This shows, this proves that this code here runs and it can only run when an object is created based

85
00:07:32.140 --> 00:07:33.270
on this class,

86
00:07:33.310 --> 00:07:39.520
we never do that but we define our own element and therefore, this element has to be responsible for

87
00:07:39.580 --> 00:07:42.650
this code running and indeed, it is.

88
00:07:42.790 --> 00:07:44.650
Now to get rid of this error,

89
00:07:44.680 --> 00:07:49.810
there is one rule we have to follow when creating our own elements and adding a constructor,

90
00:07:50.050 --> 00:07:58.090
you always have to call super first in there. This is a built-in method you can call inside of a class which

91
00:07:58.090 --> 00:08:00.430
will execute the constructor of the base class

92
00:08:00.440 --> 00:08:08.230
you're extending and this is required. So if you add super here and you then reload this page, you'll not

93
00:08:08.230 --> 00:08:09.970
see this error again,

94
00:08:10.270 --> 00:08:15.880
clear your console before reloading to make sure that you clear all past errors.

95
00:08:15.880 --> 00:08:18.130
So this is our first custom element added,

96
00:08:18.340 --> 00:08:24.680
obviously it's not doing anything useful but we have our own working HTML tag.

97
00:08:24.760 --> 00:08:27.430
Now we can start adding more logic to it.
