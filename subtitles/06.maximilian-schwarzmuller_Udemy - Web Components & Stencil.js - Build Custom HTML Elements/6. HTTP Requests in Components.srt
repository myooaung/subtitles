1
00:00:02,240 --> 00:00:05,440
Now let's make sure we can fetch some stock data

2
00:00:06,300 --> 00:00:10,420
and for that, we can actually start with this dummy request here with the demo API

3
00:00:10,450 --> 00:00:16,270
key, so there we don't even need our own API key to just fetch data from Microsoft all the time.

4
00:00:16,290 --> 00:00:18,930
That demo API key will only work with that symbol

5
00:00:18,930 --> 00:00:21,410
basically, you can't enter any symbol.

6
00:00:21,510 --> 00:00:25,330
So we'll hook up this dynamic symbol search here at a later point of time,

7
00:00:25,350 --> 00:00:30,630
for now let me show you how to send an API request and display the result.

8
00:00:30,760 --> 00:00:36,250
I still want to send the request when the button is pressed though because that is how it will later be too.

9
00:00:36,610 --> 00:00:45,250
So therefore here in this place, in the onFetchStockPrice method, I want to send an HTTP request

10
00:00:45,460 --> 00:00:47,650
and how do we do that?

11
00:00:47,650 --> 00:00:49,450
Well we get a couple of options here,

12
00:00:49,480 --> 00:00:51,830
we're working with web technologies

13
00:00:51,970 --> 00:01:00,460
so you could use the good old XML HTTP request, also known as Ajax. For this you could actually even

14
00:01:00,910 --> 00:01:07,960
use a tool like JQuery or a package like axios. You could install axios with npm and import it into

15
00:01:07,960 --> 00:01:09,430
this file to use it.

16
00:01:09,850 --> 00:01:15,910
We can also use the more modern fetch API that is built into modern browsers and if you need to support

17
00:01:15,940 --> 00:01:21,970
older browsers, you definitely want to highlight that in documentation of your components and inform

18
00:01:21,970 --> 00:01:27,190
users using your components that your components rely on the fetch API and that they might need to

19
00:01:27,190 --> 00:01:30,700
bring polyfills to make it work in older browsers

20
00:01:30,700 --> 00:01:35,690
but I will use it because we don't need to install any other packages therefore.

21
00:01:35,980 --> 00:01:43,160
So the fetch API works in a very simple way, we call this fetch function which is built into the browser

22
00:01:43,300 --> 00:01:49,410
and as an argument, we pass the URL in a string to which we want to send a request,

23
00:01:49,480 --> 00:01:54,860
so here this will be my demo URL. The fetch API

24
00:01:54,920 --> 00:02:02,060
then uses promises to yield the result because it's an asynchronous task and as you should know,

25
00:02:02,180 --> 00:02:09,500
Javascript handles asynchronous task with callbacks or promises or observables if you're using that

26
00:02:09,500 --> 00:02:10,180
extra package

27
00:02:10,190 --> 00:02:17,540
but we will use the built-in way here and fetch users that build in promise API. That allows us to chain

28
00:02:17,590 --> 00:02:25,070
a method, onFetch, then and catch. A catch will catch any errors that occur,

29
00:02:25,160 --> 00:02:28,740
for example network errors if there is no connection

30
00:02:28,880 --> 00:02:35,780
and here I will simply log this error and then will be fired whenever we get a response.

31
00:02:35,820 --> 00:02:40,850
Important, including the cases where we get a 404 or 500 response,

32
00:02:41,030 --> 00:02:44,400
so such server side errors are not handled by catch.

33
00:02:44,780 --> 00:02:52,260
So here, we'll get a response and we will get a response by alphavantage in the JSON format.

34
00:02:52,760 --> 00:02:57,360
The response we get here by fetch has some useful information,

35
00:02:57,380 --> 00:03:06,800
for example there we can get the status code and we can also extract useful information, for

36
00:03:06,800 --> 00:03:09,230
example by calling the JSON method,

37
00:03:09,380 --> 00:03:15,710
we automatically parse the incoming response body and transformed the incoming data into a Javascript object

38
00:03:15,770 --> 00:03:22,010
because we get it as a JSON string, this will parse the body and give us the Javascript object. We

39
00:03:22,010 --> 00:03:27,640
need to return this operation because this also is an asynchronous task and then we can add another

40
00:03:27,650 --> 00:03:33,890
then block and here, we'll have the parsed response available. I'll name this parsed response here,

41
00:03:33,890 --> 00:03:35,380
you can name it however we want

42
00:03:35,840 --> 00:03:41,130
and there, let's first of all simply log this to the console to see whether this works

43
00:03:41,180 --> 00:03:42,930
and what's inside there, 

44
00:03:43,900 --> 00:03:45,270
parsed response.

45
00:03:46,950 --> 00:03:49,500
Let me now save this and let's give this a try,

46
00:03:49,500 --> 00:03:56,580
this simple code snippet here. Back in the browser if I click fetch, indeed here, I get a global quote

47
00:03:56,670 --> 00:03:57,420
object

48
00:03:57,570 --> 00:04:00,480
and this is a Javascript object with all the fields

49
00:04:00,510 --> 00:04:07,890
we also saw here when we manually send this as a get request by entering the URL in the browser. And there,

50
00:04:08,130 --> 00:04:14,010
we have this 05 price field which is what I want to extract because that holds the price which

51
00:04:14,010 --> 00:04:15,980
should be displayed down there.

52
00:04:15,990 --> 00:04:21,110
Now how do we get that price out of the response into the render function?

53
00:04:21,360 --> 00:04:27,210
We actually learned everything you need for that but certainly, spend some thoughts on this, on how

54
00:04:27,210 --> 00:04:30,850
you would solve this and then we'll do it together in a couple of seconds.

55
00:04:34,010 --> 00:04:41,960
So do you have an idea on how we could get the price out of parsed response and render it in this part,

56
00:04:41,960 --> 00:04:43,250
in this field here?

57
00:04:44,210 --> 00:04:51,410
Well we can use state and we can simply change that state property in this then block here where we can simply

58
00:04:51,410 --> 00:04:52,830
read the response.

59
00:04:53,270 --> 00:05:01,820
So I will add a new state property and I'll name it fetchedPrice, the name is totally up to you though

60
00:05:02,600 --> 00:05:10,480
and that should be a number, actually as you can tell, it will be a string but we can convert this to a number

61
00:05:10,480 --> 00:05:12,220
because it always should be a number.

62
00:05:12,700 --> 00:05:19,270
So we'll treat this as a number and here instead of logging the parsed response, I will simply access

63
00:05:19,270 --> 00:05:30,200
this field with this name here. So we can say this.fetchedPrice equals parsed response and then we use

64
00:05:31,160 --> 00:05:36,720
square brackets to access this field. We need to do that and

65
00:05:36,760 --> 00:05:44,020
we can't use the dot notation because this field name has a whitespace and this would be invalid syntax,

66
00:05:44,020 --> 00:05:48,340
so we use the square brackets syntax for accessing this field value.

67
00:05:48,370 --> 00:05:51,100
Now this will be a string, to convert it to a number,

68
00:05:51,100 --> 00:05:56,580
I'll add a plus in front of it and then we have this fetchedPrice data stored

69
00:05:56,700 --> 00:05:58,810
and now we can output that down there,

70
00:05:58,840 --> 00:06:00,340
this.fetchedPrice

71
00:06:00,400 --> 00:06:06,670
and as you learned, whenever you change the state, stencil will automatically rerun the render function and update

72
00:06:06,670 --> 00:06:08,300
the DOM efficiently.

73
00:06:08,320 --> 00:06:10,140
Now this will also be a dollar price,

74
00:06:10,180 --> 00:06:17,030
so I will add a dollar sign in front of this. Now with this, it would not work though because if you

75
00:06:17,030 --> 00:06:25,930
remember, the data we got had that global quote key as a top level field and that was a nested object

76
00:06:25,940 --> 00:06:27,710
with the price field.

77
00:06:27,710 --> 00:06:36,870
So actually when accessing this, we first of all need to access global quote and make sure to spell this

78
00:06:36,870 --> 00:06:39,820
correctly, you can also just copy and paste it from here,

79
00:06:39,860 --> 00:06:45,000
so that is simply a nested object so we need to access this top level object first.

80
00:06:45,540 --> 00:06:52,850
And with that, we can save that and now if we go back and we reload, if I click fetch here, nothing

81
00:06:52,850 --> 00:06:53,510
happens.

82
00:06:54,660 --> 00:07:00,770
Well this can be hard to spot but it is a common mistake in there for important to be aware of. I'm

83
00:07:00,840 --> 00:07:07,080
setting this fetchedPrice equal to this price and I can tell you this price is extracted correctly, you

84
00:07:07,080 --> 00:07:10,070
can console log it in case you want to see it,

85
00:07:10,140 --> 00:07:18,840
the problem is the this keyword. In onFetchStockPrice, this refers to whatever called this method

86
00:07:19,560 --> 00:07:22,580
and what called this method was this form.

87
00:07:22,620 --> 00:07:30,300
We need to bind this here to ensure that this keyword inside of onFetchStockPrice always refers to

88
00:07:30,300 --> 00:07:38,680
our surrounding class because now with this change, this looks much better and now we can actually fetch

89
00:07:38,890 --> 00:07:40,420
and display this value.
