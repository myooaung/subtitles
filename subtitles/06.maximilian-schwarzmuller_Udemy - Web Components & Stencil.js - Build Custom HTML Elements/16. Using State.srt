1
00:00:02,660 --> 00:00:07,090
That is something we can achieve with a concept called state.

2
00:00:07,130 --> 00:00:14,750
Now if you know React, you know state, if you don't, you'll learn it now. Props are properties in this class

3
00:00:15,680 --> 00:00:21,200
which can be set from outside and the prop decorator, just to bring this back in memory does one important

4
00:00:21,200 --> 00:00:24,050
thing. We can use properties without it

5
00:00:24,050 --> 00:00:32,030
but with it, stencil watches for changes in the props and re-runs render such that it changes in the real

6
00:00:32,050 --> 00:00:36,710
DOM what needs to be changed based on the prop update. Props

7
00:00:36,730 --> 00:00:43,130
as I also mentioned are there to listen to changes to your properties coming in from outside.

8
00:00:43,130 --> 00:00:46,340
Now what if you want to listen to changes from inside?

9
00:00:46,340 --> 00:00:52,100
You can use mutable as we did here but if you only expect changes from inside, you should absolutely

10
00:00:52,100 --> 00:00:53,880
use a different decorator,

11
00:00:53,890 --> 00:01:02,090
the state decorator. You import that from @stencil/core too and state also simply is added in

12
00:01:02,090 --> 00:01:05,320
front of one of your class properties and here,

13
00:01:05,420 --> 00:01:12,110
I'll name this showContactInfo and you can name it however you want,

14
00:01:12,110 --> 00:01:17,570
I'll set it to a boolean and you can definitely find different implementations as well.

15
00:01:17,570 --> 00:01:24,220
So now, this is a property which we can also initialize with a default value by the way,

16
00:01:24,570 --> 00:01:25,950
equals false

17
00:01:25,970 --> 00:01:28,980
let's say to by default show not the contact information

18
00:01:29,090 --> 00:01:33,380
and if you have a value assigned, you don't need to assign the type because Typescript can then infer

19
00:01:33,380 --> 00:01:33,850
it  

20
00:01:34,250 --> 00:01:40,640
but most importantly, this is now a property which is also watched by stencil but it does not

21
00:01:40,640 --> 00:01:44,590
watch for changes coming in from the outside but from inside

22
00:01:44,830 --> 00:01:51,140
and if you change showContactInfo, it will also rerun render and update it in the parts where you need

23
00:01:51,170 --> 00:01:52,800
to update it.

24
00:01:52,820 --> 00:02:00,830
So now we can simply change showContactInfo from inside onContentChange by setting this.showContactInfo

25
00:02:00,830 --> 00:02:06,910
equal and then I check if content is equal to contact,

26
00:02:07,190 --> 00:02:07,480
right,

27
00:02:07,490 --> 00:02:12,260
that is one of the two values we pass in, contact is one of the values.

28
00:02:12,310 --> 00:02:18,440
So if this is contact, then this should be true and the result of this check already is true, 

29
00:02:18,460 --> 00:02:22,860
so we can simply set it to that. If content equals contact, 

30
00:02:22,870 --> 00:02:28,330
we'll set this.showContactInfo to true and the result of this is true and if it is false, it will automatically

31
00:02:28,330 --> 00:02:29,780
be set to false here.

32
00:02:30,890 --> 00:02:32,920
Now we don't need to do anything else,

33
00:02:32,990 --> 00:02:38,320
if you are coming from React, you are used to having to call setState.

34
00:02:38,410 --> 00:02:42,300
That is not required in stencil, you just change the property like this

35
00:02:42,340 --> 00:02:47,470
and thanks to the state decorator, stencil automatically picks up that change.

36
00:02:47,590 --> 00:02:54,670
So now with that in place, we can use the showContactInfo property here to render content conditionally

37
00:02:55,380 --> 00:03:03,250
and we'll see if this.showContactInfo is true, in which case I'll then set my main content variable

38
00:03:03,610 --> 00:03:06,010
to this contact information

39
00:03:06,280 --> 00:03:10,100
otherwise it will stay at its default which is the slot content.

40
00:03:10,540 --> 00:03:14,560
So now if I reload this and I open the side menu,

41
00:03:14,780 --> 00:03:19,910
we see the links by default but if I click on contact, we see that. Now

42
00:03:19,940 --> 00:03:25,250
the remaining piece of work we have to do is that we update these buttons correctly and that simply

43
00:03:25,250 --> 00:03:37,340
means I want to set my class here, depending on this showContactInfo property and for this, I'll simply

44
00:03:37,340 --> 00:03:41,340
bind this class here to a dynamic value with curly braces

45
00:03:41,450 --> 00:03:42,140
and I'll check

46
00:03:42,140 --> 00:03:47,510
showContactInfo and if it is true, then I know I don't

47
00:03:47,510 --> 00:03:55,820
mark this as active but if this is not true, then I know this here will get the active class because then

48
00:03:55,820 --> 00:03:58,300
we're in the slot mode which is my navigation

49
00:03:58,300 --> 00:03:58,560
here

50
00:04:01,650 --> 00:04:05,810
otherwise I add no class and I do the same on the other button of course.

51
00:04:05,810 --> 00:04:13,480
There I also add this class now, here I check for whether showContactInfo is true though, in this case

52
00:04:13,480 --> 00:04:15,320
I'll add active to the second button

53
00:04:15,430 --> 00:04:17,150
or I will not add it

54
00:04:17,290 --> 00:04:22,150
and now with this in place, you can see we can toggle these buttons too.

55
00:04:22,510 --> 00:04:25,820
And now we're also using state which is the right solution

56
00:04:25,840 --> 00:04:30,550
whenever you update data from inside the component, as we are doing it here.