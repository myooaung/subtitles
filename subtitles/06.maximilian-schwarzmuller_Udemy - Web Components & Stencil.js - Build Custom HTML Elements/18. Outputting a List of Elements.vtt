WEBVTT
1
00:00:02.390 --> 00:00:06.780
So with the styling copied over, let's work on the search results

2
00:00:06.780 --> 00:00:14.360
now. That will be another element below our form here and that will actually be of course a list of elements

3
00:00:14.630 --> 00:00:18.140
because we might have more than one search result.

4
00:00:18.140 --> 00:00:22.960
So the parsed response here yields us an array of search results

5
00:00:22.970 --> 00:00:27.720
if there are any hits and I will store this in a stateful property,

6
00:00:27.960 --> 00:00:33.770
so you need to import the state decorator and then add this in front of a property which will be my search

7
00:00:33.860 --> 00:00:44.700
results and this will actually be, let's say a list of objects where each object has a symbol which is

8
00:00:44.790 --> 00:00:51.620
a string and a name which is a string too, something like for BMW,

9
00:00:51.620 --> 00:00:56.920
that would be but the symbol would be BMW dot something and I will

10
00:00:56.920 --> 00:00:58.440
have a list of such objects.

11
00:00:58.480 --> 00:01:02.560
This is just a type declaration here by the way, might look strange but in the end I'm just defining

12
00:01:02.740 --> 00:01:09.670
that search results is a list of objects where every object has a symbol which is a string

13
00:01:09.710 --> 00:01:11.940
and has a name which is a string.

14
00:01:11.960 --> 00:01:13.360
So these are my search results,

15
00:01:13.370 --> 00:01:16.360
now I just need to bind them here in parsed response.

16
00:01:16.370 --> 00:01:19.600
So here I will set this search results equal

17
00:01:19.880 --> 00:01:22.800
and now we just have to keep in mind what we fetch there.

18
00:01:24.430 --> 00:01:28.990
If I search for BMW again, I didn't save my changes so this should still work,

19
00:01:28.990 --> 00:01:35.570
then we see we have an object with the best matches key with an object which already has symbols and names.

20
00:01:35.710 --> 00:01:42.640
So we can just extract that, throw away the rest and just bind that nested best matches array to our

21
00:01:43.090 --> 00:01:44.730
search result array.

22
00:01:44.740 --> 00:01:50.170
So we can say parsed results best matches,

23
00:01:50.230 --> 00:01:56.470
so using that key which we see here because that is our topmost object and that will already be an

24
00:01:56.470 --> 00:02:02.980
array with symbol and name but I only need symbol and name, so I'll actually map that array which has

25
00:02:02.980 --> 00:02:08.450
more fields than just symbol and name into an array which looks a bit different.

26
00:02:08.470 --> 00:02:13.960
Map is a built-in Javascript function which runs on every element in the array we're executing it on, 

27
00:02:13.960 --> 00:02:21.100
so here on this parsed response best matches array and there, we'll get the existing element, I'll name

28
00:02:21.100 --> 00:02:21.850
it match here,

29
00:02:21.880 --> 00:02:27.850
you can name it whatever you want as an input to a function and we return the adjusted or restructured

30
00:02:27.850 --> 00:02:28.530
element.

31
00:02:28.540 --> 00:02:36.070
So here I'll return an object with a name, that should be match.name and a symbol that should be

32
00:02:36.070 --> 00:02:37.350
match.symbol.

33
00:02:37.360 --> 00:02:42.280
Therefore we have an object in the structure we want them to have with no extra fields and that will

34
00:02:42.280 --> 00:02:44.080
be stored in search results.

35
00:02:45.550 --> 00:02:54.170
Now with that, we have an array with the data, we now need to output that array in our render function. To

36
00:02:54.170 --> 00:03:02.870
do that, here as a second element in that array we returned here of top level elements, I will do

37
00:03:02.870 --> 00:03:08.300
something which looks very strange at first but actually makes a lot of sense when you think about the

38
00:03:08.300 --> 00:03:15.530
fact that the TSX code you write down there, the JSX code as it's called is in the end just Javascript,

39
00:03:15.620 --> 00:03:19.260
or in this case Typescript with a special syntax

40
00:03:19.640 --> 00:03:26.180
and we can convert from Typescript to JSX and the other way around seamlessly.

41
00:03:26.540 --> 00:03:35.150
So I can say this search results map here to map this array of search results into yet another array

42
00:03:35.270 --> 00:03:40.740
and here it should be an array of JSX or to be precise, TSX elements,

43
00:03:40.790 --> 00:03:47.030
so here I'll have my result and I want return a TSX element here.

44
00:03:47.740 --> 00:03:52.030
For this, I'll simply wrap this in an unordered list to be semantically fine

45
00:03:52.790 --> 00:03:58.520
and then here, I will return a list item and that list item will output

46
00:04:01.580 --> 00:04:09.170
my result, name let's say. Now for this to work, I need to wrap this whole expression in curly braces

47
00:04:09.200 --> 00:04:14.880
because it's inside of a ul block, so instead of TSX, if I want to execute a Typescript expression, I need

48
00:04:14.880 --> 00:04:20.830
to wrap it in curly braces and now I'm just converting this search result Typescript array to an

49
00:04:20.830 --> 00:04:25.420
array of TSX elements, of list item elements.

50
00:04:25.440 --> 00:04:34.370
So now if I save this and I reload here, I get an error right at the start, that we can't read map on undefined.

51
00:04:34.620 --> 00:04:41.070
That makes sense because initially, we didn't find any results so search results is undefined and calling

52
00:04:41.070 --> 00:04:42.780
map on that won't work,

53
00:04:43.260 --> 00:04:48.200
so I will simply define it by setting it to an empty array at the beginning

54
00:04:48.270 --> 00:04:58.000
and now we get rid of this error and now if I type BMW here and I find this, well we get a couple of results.

55
00:04:58.020 --> 00:05:00.100
The output doesn't seem to work though,

56
00:05:00.120 --> 00:05:01.850
let's look into that.

57
00:05:01.890 --> 00:05:07.410
It looks like search results when we fetch it is not populated correctly.

58
00:05:07.470 --> 00:05:13.330
For that, let's quickly console log parsed response best matches and see if this has the structure

59
00:05:13.350 --> 00:05:17.970
I think it should have.

60
00:05:18.170 --> 00:05:24.980
We have our symbol in there but my mistake, the names are not symbol and name, they are one dot whitespace 

61
00:05:24.980 --> 00:05:27.060
symbol, two dot whitespace name,

62
00:05:27.290 --> 00:05:33.270
so I need to extract the names like this and let's use that instead of dot symbol. It's the same for the

63
00:05:33.270 --> 00:05:35.480
name, it's two dot name

64
00:05:35.480 --> 00:05:39.820
now, so let's grab this here and use that instead of match.name.

65
00:05:40.010 --> 00:05:47.210
OK so this should now extract the values correctly, let's get rid of the console log here but to check

66
00:05:47.210 --> 00:05:53.070
this, let me console log this search results here to see if we really have all the correct data.

67
00:05:53.220 --> 00:05:59.840
And now if I reload, clear the console and search for BMW, this looks way better here

68
00:06:01.000 --> 00:06:04.180
and this also looks quite good here in the behind the scenes data.

69
00:06:04.480 --> 00:06:05.690
So now we can search for that

70
00:06:05.710 --> 00:06:08.050
but of course I don't want to output the names here,

71
00:06:08.170 --> 00:06:10.340
I want to output the symbols but also the names,

72
00:06:10.340 --> 00:06:11.320
maybe both,

73
00:06:11.320 --> 00:06:13.880
so let's work on that output here in the next lecture

74
00:06:13.900 --> 00:06:16.230
but the most crucial part was already covered.

75
00:06:16.240 --> 00:06:18.480
You learned how you can output a list of elements.
