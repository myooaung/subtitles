WEBVTT
1
00:00:02.240 --> 00:00:05.050
We had a look at how to use web components in Angular,

2
00:00:05.060 --> 00:00:10.670
now what if you're a React developer? Now if you watch the Angular video, it's very similar in how you

3
00:00:10.670 --> 00:00:13.590
use them, just how you unlock them differs.

4
00:00:13.610 --> 00:00:15.830
So let's go into that React.js folder

5
00:00:15.830 --> 00:00:22.920
and first of all, let's run npm install and then you see components in there with

6
00:00:22.920 --> 00:00:29.090
--save to also add an entry to the package.json file and this will now again install my package from

7
00:00:29.090 --> 00:00:30.800
the npm registry.

8
00:00:31.230 --> 00:00:34.840
So let's also run npm install to install all other packages

9
00:00:35.000 --> 00:00:37.020
that this project requires

10
00:00:37.280 --> 00:00:45.040
and with that, we'll be ready to go. Now to unlock our components, we need to go into that index.js

11
00:00:45.170 --> 00:00:52.010
file in the source folder or in general, you want to go into that file where you render your React application

12
00:00:52.010 --> 00:00:55.090
to the screen for the first time with React DOM render

13
00:00:55.130 --> 00:01:02.390
and in my case that happens to be the index.js file. In there, you want to import something from your

14
00:01:02.570 --> 00:01:04.790
uc-components package,

15
00:01:04.850 --> 00:01:09.840
so let me wait for this installation to finish up here and with it finished,

16
00:01:10.010 --> 00:01:18.260
I can now import from uc-components and there, /dist/loader and that is the same path we

17
00:01:18.260 --> 00:01:21.030
used in the Angular video in case you watch this.

18
00:01:21.260 --> 00:01:28.730
From there, you can install define custom elements or import that and you need to call that and you

19
00:01:28.730 --> 00:01:35.420
can call it here at the very end, define custom elements and you pass the window object to this function

20
00:01:35.510 --> 00:01:42.010
and this will register all these elements as elements in your React application.

21
00:01:42.040 --> 00:01:45.870
Now you can just use it, for example here in the app.js file,

22
00:01:45.880 --> 00:01:53.550
I'll get rid of all the other code and I will use my us-stock-price tag here,

23
00:01:53.680 --> 00:01:57.650
so let's add it like this. Important, use lowercase notation,

24
00:01:57.660 --> 00:02:05.160
so use your original tag, use like a normal HTML element and then run npm start to bring up that development

25
00:02:05.160 --> 00:02:12.370
server React ships with or this React project ships with which loads the app on http://www.localhost:3000,

26
00:02:12.450 --> 00:02:16.880
let's just wait for this to reload

27
00:02:17.020 --> 00:02:18.000
and here it is

28
00:02:18.340 --> 00:02:23.510
and there again and I'm just overwriting some styles here with the default styles in the React project

29
00:02:23.530 --> 00:02:24.810
hence it looks a bit different,

30
00:02:24.850 --> 00:02:30.070
it's still my component and this just proves that styles can be written but now you see, that works

31
00:02:30.640 --> 00:02:34.310
and I already showed it in the Angular project but maybe you missed that.

32
00:02:34.420 --> 00:02:39.100
We can see stencils smart reloading and code splitting in action here.

33
00:02:39.100 --> 00:02:45.230
If we load this app for the first time, we see a bunch of chunks here, 10 chunk, main chunk, 4 chunk

34
00:02:45.730 --> 00:02:47.960
and now let me show the difference when I

35
00:02:48.010 --> 00:02:51.500
also add the uc-stock-finder here,

36
00:02:51.580 --> 00:02:54.990
so we use that other component too. When that loads,

37
00:02:55.220 --> 00:02:58.450
you actually see 6 chunk, 4 chunk, 13 chunk,

38
00:02:58.450 --> 00:03:02.500
so even though the numbers change in general which makes this a bit harder to understand,

39
00:03:02.890 --> 00:03:04.920
you see that the different chunks were loaded right,

40
00:03:04.940 --> 00:03:07.280
6 chunk, 4 chunk, 13 chunk,

41
00:03:07.330 --> 00:03:10.650
before that we only had two chunks with numbers in them.

42
00:03:10.810 --> 00:03:17.410
So that seems to be that extra component and the cool thing is when we now add a condition such that

43
00:03:17.410 --> 00:03:25.850
this is not always rendered, let's say here we have some state in our component and for this, you need

44
00:03:25.850 --> 00:03:33.900
to know how React works so that this makes sense and we have the showStockFinder prop here which

45
00:03:33.900 --> 00:03:40.960
is false initially, than here I have the stock finder variable in my render function and initially,

46
00:03:40.960 --> 00:03:51.280
this is null let's say but if this state showStockFinder is true, then stock finder, this variable should

47
00:03:51.280 --> 00:04:00.750
actually be that JSX code here and then down there, I will output stock finder. If I do it like this,

48
00:04:00.830 --> 00:04:05.830
this should not be loaded as long as the state showStockFinder is false.

49
00:04:06.140 --> 00:04:11.460
And if I reload this page, we indeed only have 2 chunks with numbers in them again, the 10 chunk

50
00:04:11.480 --> 00:04:17.420
which is this very large file and the 4 chunk which is a small file. That other small file we saw a second

51
00:04:17.420 --> 00:04:19.570
ago is missing now.

52
00:04:19.580 --> 00:04:22.570
Now let's add some logic to switch that state.

53
00:04:22.640 --> 00:04:30.990
So below that, I will add a button, show finder and when we click that with an onClick handler, then

54
00:04:31.020 --> 00:04:32.730
I went to switch my state.

55
00:04:32.730 --> 00:04:38.880
Now here, I'll use an inline arrow function and I will call this set state and set showStockFinder

56
00:04:38.880 --> 00:04:39.790
to true here.

57
00:04:41.000 --> 00:04:47.860
Now if we do that and this page reloads, again we only have the 13 and the 4 chunk, now if I clear that

58
00:04:47.860 --> 00:04:49.280
and I click show finder,

59
00:04:49.280 --> 00:04:53.280
now you see that component is loaded and only now its code is loaded

60
00:04:53.360 --> 00:04:59.390
and here, it's even smaller than in the Angular app because it's basically bundled up in a more efficient

61
00:04:59.390 --> 00:05:01.840
way here in development mode. In Angular,

62
00:05:01.850 --> 00:05:02.860
it's also important

63
00:05:02.870 --> 00:05:06.750
to know that we use the development mode too in production mode,

64
00:05:06.800 --> 00:05:09.220
it would have been smaller in Angular too.

65
00:05:09.380 --> 00:05:15.710
So it's super small here and it's loaded lazily out of the box due to the way stencil builds its

66
00:05:15.710 --> 00:05:16.590
components.
