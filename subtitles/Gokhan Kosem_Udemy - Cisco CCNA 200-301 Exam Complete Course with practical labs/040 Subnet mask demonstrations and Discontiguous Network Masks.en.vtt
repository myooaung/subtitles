WEBVTT
1
00:00:00.480 --> 00:00:08.130
So in this example of these devices in the same subnet or in different subnets the PC on the left has

2
00:00:08.130 --> 00:00:16.050
an IP address of 10 dot one at one but one with the subnet mask of 2 4 5 2 4 5 0 0 the device on the

3
00:00:16.050 --> 00:00:23.870
right has an IP address of 10 dot wander to that one with a Mosque of 5.2 for 5.0 to zero.

4
00:00:23.910 --> 00:00:30.210
So the device on the left does the following when it wants to communicate with the device on the right.

5
00:00:30.210 --> 00:00:37.110
It does a logical and on the network portion of the address so first determines which portion of its

6
00:00:37.110 --> 00:00:43.320
address is the network portion and then it compares that to the network portion of the device that it's

7
00:00:43.320 --> 00:00:45.300
wanting to communicate with.

8
00:00:45.300 --> 00:00:49.200
So in this example the network portion is ten to one.

9
00:00:49.530 --> 00:00:56.100
So in other words the first two octets of the address on network the device checks the first two octets

10
00:00:56.220 --> 00:01:01.360
of the other device to see if it's the same as its local network portion.

11
00:01:01.410 --> 00:01:03.600
And in this example they all the same.

12
00:01:03.600 --> 00:01:10.170
So the device on the left will send traffic to the device on the right directly and it will not try

13
00:01:10.170 --> 00:01:13.290
and send the traffic to its default gateway.

14
00:01:13.290 --> 00:01:21.300
What it will do is send an up message onto the local segment requesting the MAC address associated with

15
00:01:21.330 --> 00:01:24.160
IP address 10 1 to two to 1.

16
00:01:24.210 --> 00:01:31.890
It will try and communicate with 10.0 one or two to one on the local segment directly and not send the

17
00:01:31.890 --> 00:01:33.890
traffic to a default gateway.

18
00:01:34.080 --> 00:01:39.640
And the reason for that is that the network portion of the addresses are the same.

19
00:01:39.690 --> 00:01:46.410
So the local device knows that the other device is on the same or local segment as itself.

20
00:01:46.410 --> 00:01:54.790
In this example the network mosque has changed its 2.5 to 4 5 2 5 5 0.

21
00:01:55.020 --> 00:02:01.740
So the device on the left will do a logical and and check whether the network portion of the device

22
00:02:01.740 --> 00:02:07.270
that it's wanting to communicate with is the same as its network portion.

23
00:02:07.290 --> 00:02:14.540
So based on the subnet mask the local devices network portion is 10 dot 1.1.

24
00:02:14.730 --> 00:02:21.280
The device it's wanting to communicate with has a network portion of 10 1 or two.

25
00:02:21.480 --> 00:02:24.570
So in this case the network portion is different.

26
00:02:24.630 --> 00:02:31.470
So the local host knows that the device that it's wanting to communicate with is on a different subnet

27
00:02:31.710 --> 00:02:32.920
to itself.

28
00:02:32.940 --> 00:02:39.780
So because these two devices on different subnets the local device will send its traffic to its configured

29
00:02:39.930 --> 00:02:47.560
default gateway PCs will send traffic to their default gateways when a default gateway is configured.

30
00:02:47.610 --> 00:02:53.750
In this example let's assume that a default gateway is configured and that's normally what happens in

31
00:02:53.750 --> 00:02:55.770
a real world implementation.

32
00:02:55.770 --> 00:03:01.950
So the PC is trying to talk to a device in a different subnet so it'll same it's traffic to its default

33
00:03:01.950 --> 00:03:03.060
gateway.

34
00:03:03.060 --> 00:03:09.870
So in summary the subnet mask allows the local device to determine whether the device that it's trying

35
00:03:09.870 --> 00:03:17.170
to communicate with is on the same subnet as itself or if it's on a different subnet.

36
00:03:17.190 --> 00:03:25.920
Now Cisco and most network vendors do not support discontiguous subnet mosques a discontiguous subnet

37
00:03:25.920 --> 00:03:28.870
mask would look something like the following.

38
00:03:29.040 --> 00:03:38.100
Notice in the binary we have binary ones then binary zeros then binary ones binary zeros binary ones

39
00:03:38.100 --> 00:03:40.790
binary zeros and so forth and so on.

40
00:03:40.920 --> 00:03:49.170
This type of discontiguous subnet mask is not supported only contiguous subnet masks are supported in

41
00:03:49.170 --> 00:03:50.060
this example.

42
00:03:50.100 --> 00:03:59.740
We have contiguous or continuous ones in the binary and then contiguous or continuous zeros in the binary.

43
00:03:59.820 --> 00:04:06.150
Converting that to decimal gives us a value of 255 242 at 0.0.

44
00:04:06.330 --> 00:04:14.220
In this example notice we have contiguous ones in binary and then contiguous zeros in binary giving

45
00:04:14.220 --> 00:04:21.060
us a result in decimal of 2 5 5 2 5 5 8 1 9 2 0.

46
00:04:21.450 --> 00:04:28.390
So in a subnet mask we must start with binary ones and they must be contiguous.

47
00:04:28.560 --> 00:04:36.720
So you cannot have binary ones then binary zeros then binary ones and so forth and so one they must

48
00:04:36.720 --> 00:04:41.150
be contiguous ones and then contiguous zeros.

49
00:04:41.220 --> 00:04:47.980
So you can for argument's sake have a subnet mask something like 0.00 240.

50
00:04:48.090 --> 00:04:55.810
That's not supported subnet masks have to be contiguous ones followed by contiguous zeros.

51
00:04:56.040 --> 00:05:03.020
Discontiguous subnet masks are not supported and think goodness for that because it makes our lives

52
00:05:03.260 --> 00:05:08.540
as a network engineer is a lot easier to have contiguous subnet masks.
