WEBVTT
1
00:00:01.190 --> 00:00:08.180
So in a situation like this the phone has to indicate to the switch that its traffic is important so

2
00:00:08.180 --> 00:00:19.370
it needs a mechanism or a way to tell switch one that its traffic is more important than the P.C. traffic.

3
00:00:19.370 --> 00:00:21.490
Now there are two main ways to do this.

4
00:00:21.500 --> 00:00:25.800
We either mock at Layer 2 or mock at least three.

5
00:00:25.860 --> 00:00:31.160
So in the same way that FedEx or DHL will mock a parcel.

6
00:00:31.190 --> 00:00:37.790
In other words they put a sticker or a barcode on the puzzle to indicate that the parcel is of great

7
00:00:37.790 --> 00:00:41.300
importance and should be delivered the next day.

8
00:00:41.300 --> 00:00:48.410
The phone will mark the packets that it sends to the switch either at least to what Layer 3 to indicate

9
00:00:48.590 --> 00:00:51.560
that the packets are important.

10
00:00:51.560 --> 00:00:59.390
Assuming that switch one accepts those markings it will send the packets to switch to with the relevant

11
00:00:59.390 --> 00:01:06.950
markings markings are important in packets because when they arrive at a switch such as Switch two it

12
00:01:06.950 --> 00:01:13.460
needs to make a decision which class does the packet belong to.

13
00:01:13.460 --> 00:01:18.410
In other words is it platinum is it gold is it silver is it bronze.

14
00:01:18.650 --> 00:01:26.720
Or to use a airline analogy is it first class or business class or economy class.

15
00:01:27.020 --> 00:01:30.230
Packets within a class will be treated the same way.

16
00:01:30.230 --> 00:01:34.230
So the switch needs to determine which class the packets go into.

17
00:01:34.250 --> 00:01:37.570
So again platinum gold silver and so forth.

18
00:01:37.820 --> 00:01:43.900
And then it will treat those packets accordingly.

19
00:01:43.930 --> 00:01:51.360
So how does a phone or a switch indicate to another switch or rather the level of importance of packets.

20
00:01:51.600 --> 00:01:53.890
Not to use the airline analogy again.

21
00:01:53.920 --> 00:01:57.370
This is very similar to a ticket that you get.

22
00:01:57.430 --> 00:02:04.040
So does your ticket indicate that you're a first class passenger or business class or economy class.

23
00:02:04.060 --> 00:02:06.920
Think of the markings as a ticket.

24
00:02:07.000 --> 00:02:12.790
The ticket is an indicator of the service that you'll receive.

25
00:02:12.790 --> 00:02:22.030
So when the phone sends a voice packets to the switch it's going to mock them at least to using an attitude

26
00:02:22.030 --> 00:02:23.940
of one queue marking.

27
00:02:24.070 --> 00:02:29.890
I'll show you the details of the markings when I do a y shock capture in a moment but for now understand

28
00:02:29.890 --> 00:02:31.570
that when you speak into a phone.

29
00:02:31.570 --> 00:02:38.050
So let's assume these are your voice waves a phone transfer codes that into a digital signal of zeros

30
00:02:38.050 --> 00:02:45.520
and ones that are put into UDP packets that are encapsulated in IP which are in turn encapsulated in

31
00:02:45.580 --> 00:02:49.040
Ethernet and are sent to the switch.

32
00:02:49.270 --> 00:02:52.550
So layer two we have an attitude of one queue head.

33
00:02:52.960 --> 00:02:58.350
The reason why is that Ethernet doesn't have these additional markings.

34
00:02:58.360 --> 00:03:04.750
As an example if using ethernet too it has no way to indicate the importance of a packet.

35
00:03:05.350 --> 00:03:10.870
So when we capture the frame you'll see in a moment that we have a destination address.

36
00:03:11.050 --> 00:03:19.230
We'll have a source address and then we'll have an edited one Q header and then the actual voice within

37
00:03:19.230 --> 00:03:20.550
the packet.

38
00:03:20.550 --> 00:03:28.050
So the editor the one Q header has a priority field to this is three bits in size also called costs

39
00:03:28.140 --> 00:03:30.900
or class of service or S.O.S.

40
00:03:30.900 --> 00:03:32.390
It's three bits in size.

41
00:03:32.640 --> 00:03:38.310
So the binary values go from 0 0 0 all the way to triple 1.
