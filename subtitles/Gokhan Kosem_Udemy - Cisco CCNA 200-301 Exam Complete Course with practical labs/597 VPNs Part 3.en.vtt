WEBVTT
1
00:00:00.180 --> 00:00:03.420
Duffy Hellman comes in different forms.

2
00:00:03.430 --> 00:00:10.990
Duffy Hellman one is seven hundred sixty eight bits in length the film and two is 1024 bits in length.

3
00:00:11.040 --> 00:00:17.100
Duffy Hellman five is one thousand five hundred thirty six bits in length once again the longer the

4
00:00:17.100 --> 00:00:19.550
key length the more secure.

5
00:00:19.950 --> 00:00:28.210
But the downside is more processing power would be required now just to reiterate asymmetric key algorithms

6
00:00:28.600 --> 00:00:35.680
are used in deep ends today not for bulk encryption of data but they help with the establishment of

7
00:00:35.680 --> 00:00:42.190
a shared secret and also used for other things like authentication which I'm gonna talk about in a moment

8
00:00:43.090 --> 00:00:51.660
symmetric key algorithms such as a s are used for bulk encryption of data so we've covered confidentiality

9
00:00:51.660 --> 00:00:52.930
or encryption.

10
00:00:52.930 --> 00:00:56.370
Let's look at the second goal which is integrity.

11
00:00:56.650 --> 00:00:59.950
We want to ensure that data has not been tampered with.

12
00:00:59.980 --> 00:01:05.860
In other words we want to know that the data has traversed the Internet or other network unchanged between

13
00:01:05.860 --> 00:01:13.270
the two parties data integrity uses algorithms known as hashing algorithms also known as trap door or

14
00:01:13.270 --> 00:01:15.360
message digests.

15
00:01:15.440 --> 00:01:23.030
These are one way algorithms unlike encryption algorithms which can be reversed hashing algorithms convert

16
00:01:23.300 --> 00:01:27.130
arbitrary data into a fixed length hash.

17
00:01:27.200 --> 00:01:37.080
An example would be MDA five or message digest algorithm 5 which has a fixed length of 128 bits now

18
00:01:37.080 --> 00:01:39.270
to demonstrate hashing notice.

19
00:01:39.270 --> 00:01:46.840
I could take a piece of arbitrary information let's say my name and I can hash it in this case using

20
00:01:46.850 --> 00:01:55.290
Shaw Shaw or Secure Hash Algorithm is more secure than MDG 5.

21
00:01:55.290 --> 00:02:04.980
This is the hexadecimal Valley or Shaw and the binary Valley or Sha nodes if I change one value for

22
00:02:05.020 --> 00:02:10.860
instance making that David one and hash it again notice the entire hash changes.

23
00:02:11.140 --> 00:02:17.130
But notice it's of a fixed length I could put a bunch of people's names in there.

24
00:02:25.780 --> 00:02:29.580
And how should a game notice the entire hash changes.

25
00:02:29.580 --> 00:02:31.890
But is of a fixed length.

26
00:02:31.920 --> 00:02:37.070
I could go and copy some text from let's say USA Today

27
00:02:41.810 --> 00:02:42.560
arbitrary length

28
00:02:51.010 --> 00:02:58.310
and I could take the Encyclopedia Britannica put it through an empty five hash and come up with 128

29
00:02:58.310 --> 00:03:08.440
bits so for example I could take that USA Today article put it into an empty five hash generator and

30
00:03:08.440 --> 00:03:18.660
notice it will come up with 128 bit hash value or I could replace that with let's just say my name and

31
00:03:18.660 --> 00:03:27.170
we'll come up with 128 bit hash value hashing is non reversible because data is lost.

32
00:03:27.400 --> 00:03:34.000
You cannot take one hundred and twenty eight but empty five hash reverse it and come up with the Encyclopaedia

33
00:03:34.000 --> 00:03:40.890
Britannica but you can take the Encyclopedia Britannica hash it and come up with 128 bit value.

34
00:03:41.770 --> 00:03:45.030
Please note that the hash will change as I've demonstrated.

35
00:03:45.190 --> 00:03:48.730
If any part of the input value changes.

36
00:03:48.730 --> 00:03:55.750
So with hashing we can take data of arbitrary length put it to an empty five or Shaw hash.

37
00:03:55.840 --> 00:04:04.630
In this case it's empty five and come up with a fixed 128 but hash valley you cannot take the 128 bit

38
00:04:04.630 --> 00:04:10.000
hash value and reverse the process and come up with the original data.

39
00:04:10.300 --> 00:04:18.580
It is a one way function or trap door function they are various hashing algorithms that can be used

40
00:04:18.900 --> 00:04:27.230
in D5 once again is 128 bits and B five is not recommended today in networking environments SHA 1 is

41
00:04:27.230 --> 00:04:35.510
160 bits in length short to is German 56 or fiber and 12 bits in length and SHA 3 is scheduled for release

42
00:04:35.510 --> 00:04:37.460
in 2012.

43
00:04:37.460 --> 00:04:43.040
Just be aware that there are various hashing algorithms once again short 2 is what's recommended in

44
00:04:43.040 --> 00:04:54.320
today's networking environments so as an example if Peter wanted to send data to Sarah ensuring confidentiality

45
00:04:54.590 --> 00:05:02.730
and integrity the following would happen Peter's private information that no one else except Sarah should

46
00:05:02.730 --> 00:05:08.560
read is encrypted firstly with an encryption algorithm like a yes.

47
00:05:08.760 --> 00:05:14.430
Now in this case we're assuming that a shared secret or shape key has been derived.

48
00:05:14.430 --> 00:05:21.670
So assuming that that's happened Peter can encrypt the data using a symmetric key algorithm like a s.

49
00:05:21.810 --> 00:05:26.280
So the clear text information is encrypted into ciphertext.

50
00:05:26.280 --> 00:05:36.460
This provides confidentiality Peter then takes the encrypted text or ciphertext and hashes it with a

51
00:05:36.460 --> 00:05:46.110
hashing algorithm like show Endy 5 which comes up with a fixed length hash this will ensure data integrity

52
00:05:46.740 --> 00:05:56.150
because if any part of the data is changed remember the hash will also change so Peter takes the clear

53
00:05:56.150 --> 00:06:04.190
text encrypted with an algorithm like a yes to come up with ciphertext e hashes that encrypted text

54
00:06:04.850 --> 00:06:16.130
and comes up with a hash he then pins the hash to the encrypted ciphertext and sends it to Sarah Sarah

55
00:06:16.160 --> 00:06:22.370
upon receipt of the data in this case the encrypted ciphertext wants to make sure that the data hasn't

56
00:06:22.370 --> 00:06:29.450
been tampered with before going through all the effort of decrypting the text so Sarah will take the

57
00:06:29.450 --> 00:06:38.520
encrypted text and hash it herself to come up with a empty five or shall hash she will then compare

58
00:06:39.000 --> 00:06:48.120
the hash that she derived with a hash appended to the encrypted data only if the hashes are the same

59
00:06:49.160 --> 00:06:56.320
does she bother decrypting the text now if the hashes are the same it means that the data hasn't changed

60
00:06:56.320 --> 00:07:05.320
in transit if the hashes are the same Sarah can decrypt the data by reversing the ace encryption knowing

61
00:07:05.320 --> 00:07:07.540
that the data hasn't been tampered with.

62
00:07:08.660 --> 00:07:18.540
However that being said what stops Joe hacker receiving the data changing it so manipulating the data

63
00:07:18.810 --> 00:07:27.030
before it reaches Sarah encrypting it with a yes hashing that fake data with let's say Shaw and appending

64
00:07:27.090 --> 00:07:36.870
a new hash to the data and then transmitting it to Sarah Sarah has no way of knowing that the data has

65
00:07:36.870 --> 00:07:43.680
been manipulated because when she reverses the process by hashing this new data her hash will be the

66
00:07:43.680 --> 00:07:48.960
same as Joe Hacker's hash that he appended to the new data.

67
00:07:48.960 --> 00:07:56.550
So to combat that what Peter needs to do is use something called hash message authentication code or

68
00:07:56.580 --> 00:08:05.160
H Mac and the two variants of this you have h Mac MDT 5 and H Mac Shaw and what Peter needs to do is

69
00:08:05.160 --> 00:08:12.570
take the data of arbitrary length so in other words the data that he wants to send to Sarah plus a secret

70
00:08:12.570 --> 00:08:22.320
key that only Sarah and he knows and now hash those two values with empty five or Shaw to get the hash

71
00:08:23.680 --> 00:08:32.110
that will combat Joe hacker from manipulating the data because Joe hacker won't know what the secret

72
00:08:32.110 --> 00:08:41.550
key is that Peter and sarah are using in combination with the hashing algorithm Joe hacker will not

73
00:08:41.550 --> 00:08:43.400
know what the secret key is.

74
00:08:43.860 --> 00:08:51.250
So when he hashes the data Sarah will know that the data has been manipulated because the hash that

75
00:08:51.250 --> 00:09:00.070
she derives will not be the same hash Sarah will be taking the encrypted data in combination with the

76
00:09:00.070 --> 00:09:05.340
secret key and hashing those two together to come up with her hash.

77
00:09:05.650 --> 00:09:08.830
Joe hacker will not know what the secret key is.

78
00:09:08.830 --> 00:09:17.980
So when Joe hacker hashes the data he's hash will not be the same as the new hash that Sarah derives.

79
00:09:18.040 --> 00:09:21.300
And she will therefore know that the data has been tampered with.

80
00:09:22.300 --> 00:09:27.430
Only Peter and sarah know what that secret key is not Joe hacker.

81
00:09:27.910 --> 00:09:35.650
So he can not successfully manipulate the data and derive the same hash value thus data integrity is

82
00:09:35.650 --> 00:09:41.000
provided with H Mac in combination with MDG 5 and shore.

83
00:09:41.040 --> 00:09:44.080
The third goal to accomplish is authentication.

84
00:09:44.530 --> 00:09:51.450
Now authentication is knowing that data received is the same data that was sent and that the claim sender

85
00:09:51.540 --> 00:09:54.290
is in fact the actual sender.

86
00:09:54.300 --> 00:09:56.570
Now we've already spoken about integrity.

87
00:09:56.580 --> 00:10:02.310
Now we are looking at authenticating appear to make sure that there are actually who they say they are.

88
00:10:03.450 --> 00:10:08.940
This goes beyond validating the source attempting to access a service during initial logging.

89
00:10:08.940 --> 00:10:14.340
You should also validate that the source has not been replaced by an attacking host in the course of

90
00:10:14.340 --> 00:10:18.040
the conversation which is known as session hijacking.

91
00:10:18.120 --> 00:10:23.670
You want to make sure that the person that you talking to is the person that they say they are and that

92
00:10:23.670 --> 00:10:25.860
they haven't been replaced by a hacker.

93
00:10:26.930 --> 00:10:33.380
There are two types of authentication so we could authenticate rather one to write it to using either

94
00:10:33.380 --> 00:10:40.040
appreciate key which is a secret key value entered into each peer manually and is used to authenticate

95
00:10:40.040 --> 00:10:41.170
the pier.

96
00:10:41.540 --> 00:10:47.690
Or we could use RSA signatures which encrypt the hash with a private key.

97
00:10:47.690 --> 00:10:55.280
So firstly appreciate key in this example Peter needs to be authenticated by Sarah in this case.

98
00:10:55.290 --> 00:11:03.170
Peter takes the Duffy helm and shared key that they derived depreciate key that was agreed upon with

99
00:11:03.170 --> 00:11:09.470
Sarah which should have been done out of band and other information relating to IP sec.

100
00:11:09.630 --> 00:11:17.660
Any hashes that with either MDG 5 or Shaw any attaches the hash to a packet with these ID information

101
00:11:18.080 --> 00:11:23.120
which may be the IP address or hostname that is used for the VPN.

102
00:11:23.540 --> 00:11:31.640
Sarah can then hash her local copy of the information which includes the agreed upon appreciate key

103
00:11:31.970 --> 00:11:41.900
and derive an empty five or shall hash she can then compare her locally derived hash with a hash that

104
00:11:41.900 --> 00:11:46.160
you receive from Peter if they are the same.

105
00:11:46.230 --> 00:11:53.310
She knows that Peter has the same preshow key as she does and she can thus authenticate Peter if the

106
00:11:53.310 --> 00:11:54.820
hashes are different.

107
00:11:54.870 --> 00:12:01.220
She knows Peter does not have the correct appreciate key and therefore the VPN is not set up.

108
00:12:01.250 --> 00:12:07.940
The second option is to use digital signatures digital signatures have multiple advantages including

109
00:12:07.940 --> 00:12:15.290
the automatic exchange of keys without the need of programming static authentication keys on multiple

110
00:12:15.290 --> 00:12:16.690
devices.

111
00:12:16.700 --> 00:12:23.760
This allows for scalability the key lengths are also a lot greater appreciate keys should be changed

112
00:12:23.760 --> 00:12:30.390
on a regular basis and in reality that often doesn't happen another advantage of digital signatures

113
00:12:30.690 --> 00:12:37.830
is non repudiation which means you cannot deny being involved in a conversation because you are the

114
00:12:37.830 --> 00:12:46.980
only person that has your private key so the way it works is Peter in this example takes the Duffy Hellman

115
00:12:47.390 --> 00:12:54.120
shape key and other information and hashes it in a very similar way to appreciate keys.

116
00:12:54.450 --> 00:13:03.870
But notice the appreciate key is not in this list that hash is now signed with Peter's private key.

117
00:13:03.870 --> 00:13:10.250
And remember that Peter is the only person that has that private key that creates what's called a digital

118
00:13:10.250 --> 00:13:11.350
signature.

119
00:13:11.630 --> 00:13:18.540
So a digital signature is created when information is encrypted with a private key.

120
00:13:18.560 --> 00:13:24.470
Please remember that if something is encrypted with someone's private key only that person's public

121
00:13:24.470 --> 00:13:33.600
key can decrypted Peter now sends that information to Sara Sara takes the received signature from Peter

122
00:13:34.410 --> 00:13:40.740
and decrypt sit with Peter's public key which he had previously received from Peter.

123
00:13:40.740 --> 00:13:46.710
That will result in the original hash that Peter created Sara not takes.

124
00:13:46.710 --> 00:13:54.600
The same information that she has locally and hashes it herself to derive her own hash of the various

125
00:13:54.600 --> 00:13:55.850
parameters.

126
00:13:56.160 --> 00:14:00.120
She then compares the two hashes if they are the same.

127
00:14:00.180 --> 00:14:04.280
She knows firstly that Peter has all the correct information.

128
00:14:04.290 --> 00:14:11.970
She also knows that this information could only have come from Peter because only Peter's public key

129
00:14:12.630 --> 00:14:16.880
can decrypt something encrypted with Peter's private key.

130
00:14:17.130 --> 00:14:23.310
So the digital signature proves that the information came from Peter and that all of this information

131
00:14:23.310 --> 00:14:28.470
is correct she has thus been able to authenticate Peter.

132
00:14:28.720 --> 00:14:33.050
Now the reverse will happen for both preset keys and digital signatures.

133
00:14:33.070 --> 00:14:39.430
Peter will authenticate Sara so there mutual two way authentication either by using appreciate keys

134
00:14:39.790 --> 00:14:41.860
or by using digital signatures.
