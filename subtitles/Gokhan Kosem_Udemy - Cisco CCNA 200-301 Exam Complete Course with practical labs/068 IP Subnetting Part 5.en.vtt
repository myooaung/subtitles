WEBVTT
1
00:00:00.000 --> 00:00:08.000
Here is another example, ABC limited have been allocated subnet 10.128.192.0/18

2
00:00:08.000 --> 00:00:11.000
for several offices in the USA

3
00:00:11.000 --> 00:00:15.000
Paul a network administrator once again needs to split the subnet

4
00:00:15.000 --> 00:00:19.000
into smaller subnets, Paul requires 30 subnets with as many hosts

5
00:00:19.000 --> 00:00:25.000
as possible on each subnet, and once again he asked you for your help.

6
00:00:25.000 --> 00:00:27.000
You need to decide which formula to use.

7
00:00:27.000 --> 00:00:31.000
Please note we’ve been ask for networks or subnets

8
00:00:31.000 --> 00:00:36.000
so we need to use the formula 2 to the n and not the formula 2 to the n - 2.

9
00:00:36.000 --> 00:00:38.000
And we need to remember to count the bits

10
00:00:38.000 --> 00:00:40.000
from the left hand side to the right hand side.

11
00:00:40.000 --> 00:00:44.000
So on step 2 you need to work out the number of bits required to cover the number

12
00:00:44.000 --> 00:00:49.000
of hosts or in this case the number of networks that we’ve been asked for.

13
00:00:49.000 --> 00:00:57.000
Paul is asked for 30 subnets so we will require 5 bits because

14
00:00:57.000 --> 00:01:00.000
using the formula 2 to the n and substituting n with 5 will give you 32.

15
00:01:00.000 --> 00:01:04.000
So we will actually end up having 32 subnets rather than just 30.

16
00:01:04.000 --> 00:01:09.000
So we now know that we need to steal 5 bits from the host portion of the address

17
00:01:09.000 --> 00:01:11.000
and allocate that to the network portion

18
00:01:11.000 --> 00:01:16.000
because 5 binary bits are required to give us 32 networks.

19
00:01:16.000 --> 00:01:20.000
The 3rd step is to convert the host portion of the original network into binary.

20
00:01:20.000 --> 00:01:32.000
so the original network we were given was 10.128.192.0/18 or 10.128.192.0

21
00:01:32.000 --> 00:01:41.000
with the mask of 255.255.192.0 now 255 tells us that the first octet is network

22
00:01:41.000 --> 00:01:45.000
the 2nd 255 tells us that the 2nd octet is network

23
00:01:45.000 --> 00:01:50.000
however in the third octet, the octet is not fully populated with binary 1's.

24
00:01:50.000 --> 00:01:55.000
So in the 3rd octet there’s a split between network and host.

25
00:01:55.000 --> 00:02:02.000
The last octet is filled with binary 0's so that entire octet is host.

26
00:02:02.000 --> 00:02:09.000
Converting 192 into binary gives us 2 binary 1's followed by 6 binary 0's

27
00:02:09.000 --> 00:02:09.000
0 in decimal converted to binary give us 8 binary 0's.
.

28
00:02:09.000 --> 00:02:19.000
So we have converted the 3rd octet where we have both network and host bits

29
00:02:19.000 --> 00:02:27.000
and the last octet into binary and we have drawn a line separating the network

30
00:02:27.000 --> 00:02:29.000
and the host portion of the address.

31
00:02:29.000 --> 00:02:31.000
How do we know that we need to draw the line here?

32
00:02:31.000 --> 00:02:34.000
because we have 18 bits in the network mask

33
00:02:34.000 --> 00:02:38.000
The first octet is 8 bits, the 2nd octet is 8 bits,

34
00:02:38.000 --> 00:02:45.000
8 plus 8 is 16, plus 2 gives us 18 so this line indicates

35
00:02:45.000 --> 00:02:47.000
the separation between network and host.

36
00:02:47.000 --> 00:02:54.000
Now the original network once again is 10.128.192.0/18 or

37
00:02:54.000 --> 00:03:00.000
could be written as 255.255.192.0 in dotted decimal notation.

38
00:03:00.000 --> 00:03:05.000
So once again the network portion is 10.128 the network host portion is 192

39
00:03:05.000 --> 00:03:11.000
and the host portion is 0. We are going to take 5 bits from the host portion

40
00:03:11.000 --> 00:03:13.000
and allocate that to the subnet, so the network portion is 10.129

41
00:03:13.000 --> 00:03:19.000
and then on the 3rd octet is the first 2 bits are the network

42
00:03:19.000 --> 00:03:23.000
and we count 5 bits from the left hand side to the right hand side

43
00:03:23.000 --> 00:03:32.000
so 12345 and we draw a line here indicating that this 5 bits are subnet

44
00:03:32.000 --> 00:03:35.000
and all bits to the right of the second line are host.

45
00:03:35.000 --> 00:03:39.000
So we have now stolen 5 bits from the host portion and allocated

46
00:03:39.000 --> 00:03:42.000
that to the subnet portion of the address.

47
00:03:42.000 --> 00:03:45.000
So we need to work out what the new subnet mask is.

48
00:03:45.000 --> 00:03:49.000
It’s equal to the number of bits in the network and subnet portion of the address.

49
00:03:49.000 --> 00:03:52.000
So it’s equal to this portion of the address

50
00:03:52.000 --> 00:03:55.000
plus the extra 5 bits allocated to the subnet portion.

51
00:03:55.000 --> 00:03:58.000
Just to remind you once again 1 octet is 8 bits.

52
00:03:58.000 --> 00:04:03.000
so the first octet is 8 bits, the 2nd octet is 8 bits

53
00:04:03.000 --> 00:04:05.000
so that gives you a total of 16 bits.

54
00:04:05.000 --> 00:04:10.000
We’ve got 2 bits in the 3rd octet which are part of the network plus

55
00:04:10.000 --> 00:04:15.000
5 additional bits which have been allocated to subnet, so that gives us 7 bits.

56
00:04:15.000 --> 00:04:18.000
so the total number of bits in the network subnet portion is equal

57
00:04:18.000 --> 00:04:23.000
to 8 plus 8 plus 2 plus 5 which equals 23 bits

58
00:04:23.000 --> 00:04:28.000
you could also work this backward once again,  there are 32 bits in an IPv4 address

59
00:04:28.000 --> 00:04:32.000
and notice in the host portion there are 8 bits in the last octet

60
00:04:32.000 --> 00:04:37.000
allocated to host plus 1 bit in the 3rd octet

61
00:04:37.000 --> 00:04:42.000
so 1 plus 8 equals 9, 32 less 9 gives you 23.

62
00:04:42.000 --> 00:04:46.000
Either method is fine, the result is the same 23 bits have now been

63
00:04:46.000 --> 00:04:52.000
allocated to network and subnet where's before only 18 bits were allocated.

64
00:04:52.000 --> 00:04:55.000
So now it's possible to work out to new subnet.

65
00:04:55.000 --> 00:04:57.000
Once again, to work out the subnet go through the various

66
00:04:57.000 --> 00:05:01.000
binary combinations for the subnet portion of the address.

67
00:05:01.000 --> 00:05:04.000
So this portion in green mark the subnet

68
00:05:04.000 --> 00:05:09.000
so the first network or subnet is equal to 10.128.

69
00:05:09.000 --> 00:05:16.000
a 2 binary bits which part of the original network plus 5 additional

70
00:05:16.000 --> 00:05:19.000
binary bits which would now allocated to subnet.

71
00:05:19.000 --> 00:05:24.000
So once again the subnet mask is /23 which can be written

72
00:05:24.000 --> 00:05:30.000
in dotted decimal notation as 255.255.254.0

73
00:05:30.000 --> 00:05:34.000
To work out the first subnet, fill the subnet portion of the address

74
00:05:34.000 --> 00:05:39.000
with 0's and populate the host portion of the address with 0s.

75
00:05:39.000 --> 00:05:45.000
please note this 2 binary 1's. the 5 green binary 0's that are part of the subnet

76
00:05:45.000 --> 00:05:49.000
and the 1 red binary 0 that’s part of the host portion

77
00:05:49.000 --> 00:05:51.000
all form part of the same subnet.

78
00:05:51.000 --> 00:05:58.000
So 11 followed by 6 binary 0's equals 192 in decimal.

79
00:05:58.000 --> 00:06:05.000
To work out the 2nd network or subnet, we go through binary combination.

80
00:06:05.000 --> 00:06:09.000
The next binary combination is 4 binary 0's followed by binary 1

81
00:06:09.000 --> 00:06:15.000
taking the whole octet into account that equals 194 in decimal.

82
00:06:15.000 --> 00:06:19.000
Please note the host portion is always set to binary 0's.

83
00:06:19.000 --> 00:06:22.000
So the last octet is once again 0.

84
00:06:22.000 --> 00:06:27.000
So the second network or subnet is 10.128.194.0

85
00:06:27.000 --> 00:06:31.000
Now you probably already guess what the 3rd one is gonna be

86
00:06:31.000 --> 00:06:33.000
because we're going up in multiples of 2.

87
00:06:33.000 --> 00:06:38.000
But if we go to the whole process again getting the next binary value

88
00:06:38.000 --> 00:06:42.000
would be 3 binary 0's followed by binary 1 followed by binary 0.

89
00:06:42.000 --> 00:06:47.000
And converting that whole octet back into decimal will give us 196.

90
00:06:47.000 --> 00:06:51.000
So we know that we're going in multiples of 2,

91
00:06:51.000 --> 00:07:00.000
so the first 1 is 192, then 194, then 196, then 198, then 200, 202, 204, etc.

92
00:07:00.000 --> 00:07:03.000
all the way up to the last subnet.

93
00:07:03.000 --> 00:07:09.000
To work out the last subnet, fill the subnet portion of the address with binary 1's

94
00:07:09.000 --> 00:07:14.000
so we end up having 10.128 followed by 7 binary 1's,

95
00:07:14.000 --> 00:07:17.000
followed by binary 0 in the 3rd octet.

96
00:07:17.000 --> 00:07:23.000
7 binary 1's followed by binary 0 in an octet is equal to 254.

97
00:07:23.000 --> 00:07:27.000
The last octet is once again equal to 0.

98
00:07:27.000 --> 00:07:33.000
So the last subnet is 10.128.254.0 with the /23 mask

99
00:07:33.000 --> 00:07:42.000
or it can be written as 10.128.254.0 with the mask of 255.255.254.0

100
00:07:42.000 --> 00:07:46.000
I hope that’s helped you learn how to subnet based on a requirement

101
00:07:46.000 --> 00:07:50.000
first specific number of hosts or specific number of networks.

102
00:07:50.000 --> 00:07:52.000
So what have we covered?

103
00:07:52.000 --> 00:07:56.000
We look at the reason for subnetting, subnetting is very important for this course

104
00:07:56.000 --> 00:07:59.000
and it’s important that you have a good understanding of subnetting.

105
00:07:59.000 --> 00:08:03.000
so we spent time looking at the binary method and the quick method

106
00:08:03.000 --> 00:08:06.000
for determining the subnet address, broadcast address

107
00:08:06.000 --> 00:08:11.000
first host address and last host address for a given IP address.

108
00:08:11.000 --> 00:08:14.000
I also showed you how to create multiple subnets

109
00:08:14.000 --> 00:08:19.000
based on specific host or network requirements.
