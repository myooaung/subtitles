WEBVTT
1
00:00:01.060 --> 00:00:07.390
This document also provides a lot of information about multiple spending tree who ate at one s You're

2
00:00:07.390 --> 00:00:13.610
not expected to know all the detail in this document but it provides a nice reference if you're interested

3
00:00:14.070 --> 00:00:19.260
I'll cover some of the basics now and then you can read the document if you are interested in more information

4
00:00:20.260 --> 00:00:24.330
multiple spending tree is the new industry standard.

5
00:00:24.400 --> 00:00:30.700
Inspired by Cisco's proprietary multiple instant spending free protocol Cisco developed multiple instant

6
00:00:30.700 --> 00:00:37.040
spending tree protocol to solve some of the issues that you have with previous t.

7
00:00:37.080 --> 00:00:44.820
So as the number of villans configured in switched networks increases the overhead when running PV t

8
00:00:45.010 --> 00:00:46.440
also increases.

9
00:00:46.750 --> 00:00:54.580
If you configure a thousand villans with previous t and rapid Peavey's t you end up having a thousand

10
00:00:54.670 --> 00:01:00.640
spending tree instances but with multiple spending tree and the proprietary multiple instance spending

11
00:01:00.640 --> 00:01:08.020
tree that existed before multiple spending tree you can map a number of villans to the same spanning

12
00:01:08.020 --> 00:01:09.440
tree instance.

13
00:01:09.490 --> 00:01:16.690
It's fairly simple to do this but the idea is if you had a thousand villans you would allocate 500 to

14
00:01:16.690 --> 00:01:20.230
one instance and the other 500 to another instance.

15
00:01:20.350 --> 00:01:28.150
Which means you only have two spanning tree instances rather than 1000 spending instances so multiple

16
00:01:28.150 --> 00:01:35.320
spending tree standardizes the concept of multiple spanning trees and incorporates the convergence of

17
00:01:35.370 --> 00:01:42.310
a rapid spending tree multiple spending tree allows you to group the villains to a shared spending tree

18
00:01:42.310 --> 00:01:43.450
instance.

19
00:01:43.450 --> 00:01:49.090
It also defines a protocol for interconnecting multiple spending Creve regions how to interrupt borate

20
00:01:49.090 --> 00:01:55.060
with existing attitude of one D and attitude at one key spending tree implementations and provide some

21
00:01:55.060 --> 00:01:59.620
best practices so look at this document if you're interested in a lot of detail.

22
00:02:00.010 --> 00:02:02.110
But as a quick comparison.

23
00:02:02.110 --> 00:02:10.520
You mentioned you had a thousand villans on switchy which is connected to both switch d 1 and D to send

24
00:02:10.550 --> 00:02:11.830
this apology.

25
00:02:11.910 --> 00:02:19.430
Switchy has a thousand villans D1 is going to be the spending tree root for Sunday lands and D-2 is

26
00:02:19.430 --> 00:02:26.050
going to be the spending tree root for other villans So switch D-1 is configured to be the root for

27
00:02:26.050 --> 00:02:32.200
villans 501 T-1000 D2 is the root for Villines one to 500.

28
00:02:32.230 --> 00:02:38.820
The interface from switch to switch D-1 blocks villans one to five hundred and from switch a to d two

29
00:02:38.830 --> 00:02:42.490
blocks villans 501 to 1000.

30
00:02:42.490 --> 00:02:51.110
So once again root for these villans traffic will be forwarded out of this port for those villans but

31
00:02:51.130 --> 00:02:54.260
blocked for Villines 1 to 500.

32
00:02:54.490 --> 00:03:02.210
The switch is the root for these villans this port will forward traffic out of it for villans 1 to 500

33
00:03:02.870 --> 00:03:06.990
but will block of villans 500 and one to 1000.

34
00:03:07.010 --> 00:03:14.170
It's very inefficient to maintain a thousand spending instances in this network.

35
00:03:14.230 --> 00:03:23.780
We have 500 spending instances with D-1 as the root and we have 500 with D2 as the root.

36
00:03:23.800 --> 00:03:30.010
But logically we actually only require two instances D-1 should be the root.

37
00:03:30.040 --> 00:03:35.890
For instance one that contains these villains and D2 should be the root.

38
00:03:35.890 --> 00:03:39.690
For instance 2 that contains these villains.

39
00:03:40.150 --> 00:03:45.660
You associate these villans to instance one and make D-1 the root.

40
00:03:45.760 --> 00:03:51.510
You associate these villains to instance two and make D2 the root.

41
00:03:51.640 --> 00:03:55.970
That means you have to maintain two instances rather than a thousand instances.

42
00:03:57.170 --> 00:04:03.280
So that kind of detail is explained here I'll go through it quickly in a Cecka previous environment.

43
00:04:03.290 --> 00:04:10.400
You need one spending instance for every LAN which means you have a thousand instances for the two different

44
00:04:10.640 --> 00:04:18.280
final logical typologies with D-1 is the root for one typology and D2 the root for the other typology.

45
00:04:18.290 --> 00:04:23.500
This wastes a lot of sleep cycles for all the switches in the network.

46
00:04:23.780 --> 00:04:30.980
In addition to the bandwidth used by sinning BPT use a thousand BPT use are going to be sent out of

47
00:04:30.980 --> 00:04:40.310
every port every two seconds because Peavey's t since a BPU for every villain because we have an individual

48
00:04:40.310 --> 00:04:43.770
instance mapped to every villain.

49
00:04:43.850 --> 00:04:50.930
So the idea with multiple spending tree is that you get to the best of Peavey's tea and traditional

50
00:04:50.930 --> 00:04:52.100
spending tree.

51
00:04:52.300 --> 00:04:56.000
You met several villans two specific instances.

52
00:04:56.000 --> 00:05:04.250
So in our typology once again you'd make one the route for instance one switch to the route for instance

53
00:05:04.280 --> 00:05:11.120
to this port would forward for instance one put block for instance to this port would forward for instance

54
00:05:11.150 --> 00:05:20.560
to black block for instance one only two spanning trees are maintained rather than a thousand.

55
00:05:20.570 --> 00:05:26.300
So you still get load balancing because half of the villains follow a separate instance and you save

56
00:05:26.300 --> 00:05:30.120
on the CPQ because you only have two instances of spending tree.

57
00:05:30.290 --> 00:05:36.800
So from a technical point of view multiple spending trees the best protocol to use in this example but

58
00:05:37.100 --> 00:05:44.060
multiple spending tree is more complex to configure than previous t and interaction with legacy switches

59
00:05:44.090 --> 00:05:46.860
can be challenging at times.

60
00:05:46.880 --> 00:05:52.250
So you would only want to use multiple spanning tree if you have many villans.

61
00:05:52.250 --> 00:05:54.590
So in this example we have a thousand.

62
00:05:54.800 --> 00:05:57.160
So it makes sense to use multiple spending tree.

63
00:05:57.440 --> 00:06:06.020
If you only had 10 or 20 villans in your network you could continue using Peavey's tea or rapid Peavey's

64
00:06:06.040 --> 00:06:07.760
te.

65
00:06:07.780 --> 00:06:13.480
The document continues with a lot of detail on how to configure multiple spending tree regions.

66
00:06:13.700 --> 00:06:16.130
But that is out of the scope of the CCMA.

67
00:06:16.480 --> 00:06:19.140
So have a look at this document if you interested.

68
00:06:19.160 --> 00:06:22.390
Wait till you get to your CC MP certification.
