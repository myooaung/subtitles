WEBVTT
1
00:00:00.490 --> 00:00:06.700
So you know weighted fake queuing scheduling algorithm packets are classified based on flows rather

2
00:00:06.700 --> 00:00:07.830
than classes.

3
00:00:07.990 --> 00:00:12.480
So a flow classification would be done as an example and source and destination IP address.

4
00:00:12.490 --> 00:00:15.780
The protocol and a port number.

5
00:00:15.850 --> 00:00:22.090
The idea with weighted fake queuing is that a weight is added to a flow based on different criteria

6
00:00:22.090 --> 00:00:28.040
such as IP precedence or RSVP which is resource reservation protocol.

7
00:00:29.020 --> 00:00:34.780
Waited for queuing However prior to rises smaller packets over larger packets.

8
00:00:35.020 --> 00:00:41.380
So it's a fairer queuing algorithm in that it provides a better quality of service for small packets.

9
00:00:41.380 --> 00:00:47.260
Small packets are generally used for interactive sessions so as an example of voice packet may only

10
00:00:47.260 --> 00:00:54.340
be 20 bytes in size whereas an empty packet could be fifteen hundred points in size so larger payloads

11
00:00:54.340 --> 00:00:58.330
or larger packets are generally sent by data applications.

12
00:00:58.570 --> 00:01:05.680
Interactive applications such as Telnet to its S H or voice tend to have smaller packets so weighted

13
00:01:05.680 --> 00:01:08.020
for queuing prior to rises.

14
00:01:08.110 --> 00:01:15.850
Smaller packets over larger packets and you can increase that pro translation by adding a weight to

15
00:01:15.850 --> 00:01:19.690
smaller packets based on IP precedents as an example.

16
00:01:19.690 --> 00:01:22.840
So in brief a voice packet that's 20 bytes.

17
00:01:23.060 --> 00:01:28.810
If it has an IP precedents of five will appear to be four bytes in size.

18
00:01:28.810 --> 00:01:31.450
In other words 20 bytes divided by five.

19
00:01:31.540 --> 00:01:38.530
It appears to be smaller and therefore is proud to rise over large data packets so it uses a clever

20
00:01:38.740 --> 00:01:47.110
scheduling algorithm to poor tries smaller interactive packets which you can make appear even smaller

21
00:01:47.260 --> 00:01:53.110
by increasing the IP precedents of the packet so that smaller packets are transmitted before larger

22
00:01:53.110 --> 00:01:54.430
packets.

23
00:01:54.430 --> 00:02:00.370
The problem with weighted fake queuing is it doesn't provide bandwidth guarantees.

24
00:02:00.580 --> 00:02:09.880
So as an example FTB could starve HDP traffic data flows can stall out one another so therefore Cisco

25
00:02:09.880 --> 00:02:16.700
developed class based weighted fake queuing where you can guarantee bandwidth to specific classes and

26
00:02:16.720 --> 00:02:19.750
provide dynamic fairness of other flows.

27
00:02:19.810 --> 00:02:25.180
It's a class based way to fix queuing essentially allows you to create different classes where you can

28
00:02:25.180 --> 00:02:31.540
specify a minimum bandwidth for specific classes of traffic and waited for queuing could be used on

29
00:02:31.540 --> 00:02:37.090
the best effort class to ensure that traffic is handled fairly in the best effort.

30
00:02:37.090 --> 00:02:37.660
Class.
