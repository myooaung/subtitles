WEBVTT
1
00:00:00.240 --> 00:00:07.590
Information may be segmented or broken up into smaller chunks or transmission across a physical medium

2
00:00:08.010 --> 00:00:15.040
the maximum transmission unit or empty you of an outgoing interface depends on the physical medium.

3
00:00:15.090 --> 00:00:20.640
As an example they empty you of fust Ethan It is 5400 bytes.

4
00:00:20.850 --> 00:00:28.650
However TZP can theoretically support sixty five thousand four hundred ninety five bytes in a single

5
00:00:28.650 --> 00:00:29.380
packet.

6
00:00:29.460 --> 00:00:35.370
When that is sent to the lower layers of the ozone model that will need to be broken up into fragments

7
00:00:35.560 --> 00:00:42.330
for transmission across the physical medium which for example only supports 50 or 100 bytes.

8
00:00:42.330 --> 00:00:49.890
Data is therefore broken up into smaller chunks and the receiver using TZP will need to put those fragments

9
00:00:49.890 --> 00:00:51.180
back together again.

10
00:00:51.510 --> 00:00:58.950
The maximum segment size or MSA is is the largest amount of data in bytes that TZP is willing to send

11
00:00:58.950 --> 00:01:02.010
in a single segment for best performance.

12
00:01:02.010 --> 00:01:08.700
The MSA is small enough to avoid Arpey fragmentation which can lead to excessive retransmissions if

13
00:01:08.700 --> 00:01:15.550
there's packet loss DCP support something called Maximum segment size and pause.

14
00:01:15.600 --> 00:01:23.400
MT You discovery or Porth maximum transmission unit discovery with the sender and the receiver can automatically

15
00:01:23.400 --> 00:01:31.260
determine what the maximum transmission unit is on a path between them and TZP will only put enough

16
00:01:31.260 --> 00:01:39.840
data into a single packet that fits that empty thus avoiding fragmentation of packets and thus avoiding

17
00:01:39.840 --> 00:01:46.620
the overhead associated with fragmentation and the putting together of the IP fragments off into you

18
00:01:46.620 --> 00:01:55.440
discovery is optional in IP version 4 that has now become mandatory in IP version 6 because of the efficiencies

19
00:01:55.860 --> 00:02:02.820
that it brings to the TZP transmission and the fact that IP version 6 does not support fragmentation

20
00:02:03.420 --> 00:02:12.190
on routers along the path between two hosts UDP does not support this and requires higher level protocols

21
00:02:12.550 --> 00:02:22.000
to sort out the fragments flow control GCP uses end to end flow control to avoid having the sender send

22
00:02:22.000 --> 00:02:27.370
data too quickly for the receiver to receive it and process it reliably.

23
00:02:27.580 --> 00:02:33.700
If the same the transmits data faster than the receiver can handle the receiver will drop the data which

24
00:02:33.700 --> 00:02:40.780
will require a retransmission retransmissions will waste time and network resources which is why most

25
00:02:40.780 --> 00:02:49.410
flow control mechanisms try to maximize the transfer raped while minimizing the requirements to retransmit.

26
00:02:49.470 --> 00:02:57.930
You may as an example have a PC with a powerful you sending data to a handheld PDA which can only process

27
00:02:57.930 --> 00:03:00.400
data at a much lower rate.

28
00:03:00.420 --> 00:03:07.710
The PDA should therefore regulate the data flow so its not overwhelmed in TZP basic flow control is

29
00:03:07.710 --> 00:03:15.400
implemented by acknowledgements from the receiver in receipt of data transmitted EECP uses something

30
00:03:15.400 --> 00:03:19.440
called a sliding window to control the flow of data.

31
00:03:19.530 --> 00:03:25.810
Windowing will allow the receiving computer to advertise how much data is able to receive before transmitting

32
00:03:25.810 --> 00:03:28.330
an acknowledgement to the sending computer.

33
00:03:28.780 --> 00:03:34.720
In each TZP segment the receiver will specify in the receive window field.

34
00:03:34.870 --> 00:03:41.200
The amount of additional received data in bytes that it is willing to buffer for the connection the

35
00:03:41.200 --> 00:03:48.400
sending host can only send up to that amount of data before it Miss White when acknowledgment and window

36
00:03:48.400 --> 00:03:54.610
size update from the receiving host UDP does not implement flow control.

37
00:03:55.520 --> 00:04:02.090
And in a VOIP environment as an example which uses UDP even though there's no physical connection between

38
00:04:02.090 --> 00:04:08.990
two handsets involved in a telephone call the call will stay up and the sender will merrily continue

39
00:04:08.990 --> 00:04:11.010
sending huge amounts of data.

40
00:04:11.180 --> 00:04:18.770
Even though the receiver cannot process the received data UDP relies on Hi-Lo protocols to implement

41
00:04:18.770 --> 00:04:20.280
flow control.

42
00:04:20.480 --> 00:04:28.850
Once again TZP is connection orientated and UDP is connection less TZP will establish the connection

43
00:04:29.300 --> 00:04:33.080
and maintain the connection during the entire transmission.

44
00:04:33.080 --> 00:04:37.220
Once the transmission is complete the session is terminated.

45
00:04:37.280 --> 00:04:43.610
UDP does not set up sessions and will just send the data in the hope that the receiver will receive

46
00:04:43.610 --> 00:04:43.980
it.

47
00:04:45.180 --> 00:04:52.770
Once again TZP implements reliability where every segment transmitted is acknowledged and if the segment

48
00:04:52.770 --> 00:04:59.070
went missing it is retransmitted UDP does not implement reliability.

49
00:04:59.220 --> 00:05:07.890
And once again relies on Hailo protocols to implement any reliability if required in certain cases such

50
00:05:07.890 --> 00:05:12.940
as voice over IP or video transmitted over an IP infrastructure.

51
00:05:13.140 --> 00:05:15.550
Reliability is not required.

52
00:05:15.600 --> 00:05:25.910
There is no point retransmitting last voice packets so a quick comparison between UDP and TZP or a reliable

53
00:05:25.910 --> 00:05:33.870
protocol and a best effort or unreliable protocol TZP once again is connection orientated.

54
00:05:34.120 --> 00:05:41.440
No data is transmitted before a session is established a three way handshake takes place before any

55
00:05:41.440 --> 00:05:42.930
data is transmitted.

56
00:05:42.940 --> 00:05:49.130
There are acknowledgements of data received and sequence numbers to track transmission of data.

57
00:05:49.510 --> 00:05:56.850
UDP on the other hand is connection less and does not track data and does not ensure delivery of data.

58
00:05:57.850 --> 00:06:00.080
TCAP is a sequence of numbers.

59
00:06:00.190 --> 00:06:12.190
UDP does not applications that use TZP include HGP email and FGP applications that use UDP include voice

60
00:06:12.190 --> 00:06:18.370
streaming applications like voice over IP and video streaming applications because of the nature of

61
00:06:18.370 --> 00:06:20.400
VoIP or video.

62
00:06:20.530 --> 00:06:28.270
There is no reason to retransmit in a VOIP environment the talker will be required to repeat what they

63
00:06:28.270 --> 00:06:28.820
said.

64
00:06:28.840 --> 00:06:33.960
If the listener was unable to decipher what was communicated.

65
00:06:34.450 --> 00:06:41.890
If you've ever used Skype at times it may sound like the person speaking is under water or they sound

66
00:06:41.890 --> 00:06:45.570
more like a machine than the person you know speaking.

67
00:06:46.300 --> 00:06:52.240
But you may still be able to understand what they've said and thus even though data went missing the

68
00:06:52.240 --> 00:06:54.080
conversation can continue.

69
00:06:54.190 --> 00:07:01.580
Or if it gets bad enough you would ask the speaker to repeat what they said in a video streaming environment.

70
00:07:01.600 --> 00:07:08.020
You may notice that part of the image is not refresh properly but you're still able to follow what's

71
00:07:08.020 --> 00:07:13.990
happening in the video because of the time sensitive nature of voice and video.

72
00:07:14.050 --> 00:07:19.350
It is pointless retransmitting data and thus TZP is not used in these environments.

73
00:07:19.360 --> 00:07:24.780
UDP is used so UDP is a transport layer protocol.

74
00:07:24.810 --> 00:07:32.430
It resides at layer for when the model it provides applications with access to the network layer all

75
00:07:32.440 --> 00:07:38.390
layer 3 without the overhead over liability mechanisms as discussed.

76
00:07:38.390 --> 00:07:42.380
This is ideal for voice over IP or video applications.

77
00:07:42.530 --> 00:07:49.730
It's connection less where one way datagram the center destination without advance notification to the

78
00:07:49.730 --> 00:07:51.430
destination device.

79
00:07:51.500 --> 00:07:55.440
There is no communication before transmission of data.

80
00:07:55.820 --> 00:08:01.690
The data just arrives at the receiver and it's expected that the receiver handle that data.

81
00:08:02.030 --> 00:08:08.940
UDP is capable of providing very limited error checking the UDP datagram does include an optional check

82
00:08:08.940 --> 00:08:16.080
some value which the receiving device can use to test the integrity of the data the UDP header also

83
00:08:16.080 --> 00:08:23.490
includes a destination port number and if that datagram is directed to an active code on the receiving

84
00:08:23.490 --> 00:08:29.900
device a return message can be transmitted to indicate that that code is unreachable.

85
00:08:29.910 --> 00:08:32.830
I'm going to discuss port numbers in more detail in a moment.

86
00:08:33.090 --> 00:08:36.100
It's a very important concept to understand.

87
00:08:36.150 --> 00:08:39.170
UDP provides best if at delivery.

88
00:08:39.180 --> 00:08:47.160
There is no guarantee that data is delivered packets may be mis directed duplicated or lost on the way

89
00:08:47.160 --> 00:08:48.840
to the destination.

90
00:08:48.870 --> 00:08:57.970
There is no guarantee of receipt of protocols will need to implement reliability if required.

91
00:08:58.030 --> 00:09:01.600
They are also no data recovery features in UDP.

92
00:09:01.600 --> 00:09:07.800
Once again Hiler protocols will need to recover from last corrupted packets.

93
00:09:07.960 --> 00:09:17.440
TFT as an example has a built in mechanism to handle data loss and TFT P using UDP has its own bulled

94
00:09:17.530 --> 00:09:25.480
in sequencing and retransmission mechanisms as it cannot rely on UDP to implement reliability.

95
00:09:25.480 --> 00:09:27.650
The UDP head is very simple.

96
00:09:27.820 --> 00:09:35.810
It has a 16 bit source port number 16 but Port to destination number so the specified the port number

97
00:09:35.810 --> 00:09:40.780
used by the source and a port number used by the destination.

98
00:09:41.000 --> 00:09:47.500
It has a 16 bit ETP length field that specifies the length in bytes of the entire datagram.

99
00:09:47.510 --> 00:09:54.020
In other words the header and the data the minimum length for UDP datagram is 8 bytes because that's

100
00:09:54.020 --> 00:09:55.990
the length of the header.

101
00:09:56.030 --> 00:10:01.550
Theoretically the maximum size is sixty five thousand five hundred thirty five bytes.

102
00:10:01.740 --> 00:10:08.940
But IP version 4 will impose a maximum limit of sixty five thousand five hundred seven bytes.

103
00:10:09.080 --> 00:10:13.970
Optionally a UDP checksum can be used for error checking.

104
00:10:13.970 --> 00:10:19.150
This is optional an IP version 4 but is not optional an IP version 6.
