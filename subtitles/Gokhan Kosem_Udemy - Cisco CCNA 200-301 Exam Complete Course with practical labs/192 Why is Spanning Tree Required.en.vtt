WEBVTT
1
00:00:00.000 --> 00:00:07.000
So let’s start with a simple topology to illustrate how Spanning Tree works.

2
00:00:07.000 --> 00:00:10.000
Why would you require Spanning Tree in a switch network?

3
00:00:10.000 --> 00:00:15.000
So in this topology we have host A connected to switch 1

4
00:00:15.000 --> 00:00:21.000
switch 1 in turn is connected to switch 2 and switch 2 has host B connected to it.

5
00:00:21.000 --> 00:00:24.000
So very simple topology.

6
00:00:24.000 --> 00:00:28.000
Now if your link went down between switch 1 and switch 2

7
00:00:28.000 --> 00:00:33.000
host A wouldn’t be able to communicate with host B and vice versa.

8
00:00:33.000 --> 00:00:36.000
So you probably gonna want to implement some kind of redundancy

9
00:00:36.000 --> 00:00:41.000
between those switches by adding an additional link.

10
00:00:41.000 --> 00:00:45.000
So that’s great because you now have network redundancy

11
00:00:45.000 --> 00:00:47.000
in case one of the links goes down

12
00:00:47.000 --> 00:00:52.000
however, that introduces problems in a switch environment.

13
00:00:52.000 --> 00:00:56.000
It’s generally recommended in networks today

14
00:00:56.000 --> 00:00:58.000
that you implement some type of redundancy.

15
00:00:58.000 --> 00:01:03.000
So in this example, you have 2 links between your 2 switches

16
00:01:03.000 --> 00:01:07.000
but that will introduce additional problems which we'll now discuss.

17
00:01:07.000 --> 00:01:09.000
Let’s assume for the moment

18
00:01:09.000 --> 00:01:12.000
that the switches have just booted up

19
00:01:12.000 --> 00:01:16.000
and their MAC address tables or cam tables are empty

20
00:01:16.000 --> 00:01:19.000
and to help explain this issue

21
00:01:19.000 --> 00:01:23.000
let's add MAC address tables to the topology

22
00:01:23.000 --> 00:01:27.000
so that you can see how the MAC address tables are updated

23
00:01:27.000 --> 00:01:30.000
when traffic is sent from 1 host to another.

24
00:01:30.000 --> 00:01:32.000
So let’s assume that in this topology

25
00:01:32.000 --> 00:01:35.000
the switches have just come up

26
00:01:35.000 --> 00:01:38.000
in other words, they've been rebooted or powered up

27
00:01:38.000 --> 00:01:43.000
and the MAC address tables or cam tables are empty on the 2 switches.

28
00:01:43.000 --> 00:01:51.000
now when A sends a frame to B the destination address on the frame will be B

29
00:01:51.000 --> 00:01:53.000
and the source address will be A

30
00:01:53.000 --> 00:01:58.000
so A is sending a frame to B and when it arrives at switch 1

31
00:01:58.000 --> 00:02:02.000
switch 1 will read the source MAC address of the frame

32
00:02:02.000 --> 00:02:05.000
and the switch will see that the source address is A.

33
00:02:05.000 --> 00:02:12.000
the switch will update its MAC address table to state that A can be found on port 1.

34
00:02:12.000 --> 00:02:16.000
MAC address B, however, is not in the MAC address table.

35
00:02:16.000 --> 00:02:20.000
So the switch will flood the frame out of all ports

36
00:02:20.000 --> 00:02:22.000
except on the port in which it will arrive.

37
00:02:22.000 --> 00:02:26.000
So in this example, the frame will go out port 2 as well as port 3.

38
00:02:26.000 --> 00:02:31.000
It does that because it doesn’t know where MAC address B is.

39
00:02:31.000 --> 00:02:34.000
Now, this is obviously a very simple topology.

40
00:02:34.000 --> 00:02:39.000
In this example, the frame is only being sent out of 2 ports of the switch.

41
00:02:39.000 --> 00:02:45.000
however, if the switch had many ports, let’s say 96 ports

42
00:02:45.000 --> 00:02:52.000
an incoming frame on 1 port could be replicated out of over 90 ports on that switch.

43
00:02:52.000 --> 00:02:57.000
That increases the amount of traffic sent in your network quite dramatically.

44
00:02:57.000 --> 00:03:03.000
So in this topology what does switch 2 do with the frame received in port 1.

45
00:03:03.000 --> 00:03:08.000
The source address once again is A and the destination address is B

46
00:03:08.000 --> 00:03:11.000
what will the switch do with the frame?

47
00:03:11.000 --> 00:03:14.000
Well firstly its gonna update its MAC address table

48
00:03:14.000 --> 00:03:17.000
to state that A can be found on port 1

49
00:03:17.000 --> 00:03:20.000
and then it's gonna flood the frame out of all ports.

50
00:03:20.000 --> 00:03:24.000
So they’ll flood out of port 2 as well as port 3.

51
00:03:24.000 --> 00:03:29.000
so in this example, host B will receive the frame from host A

52
00:03:29.000 --> 00:03:34.000
however, the switch also receive the frame on port 3

53
00:03:34.000 --> 00:03:36.000
and this is where it gets a bit confusing

54
00:03:36.000 --> 00:03:42.000
where is A from the switches point of view, is it on port 1 or is it on port 3?

55
00:03:42.000 --> 00:03:45.000
So in this example, its gonna update its MAC address table

56
00:03:45.000 --> 00:03:48.000
to state that A is on port 3

57
00:03:48.000 --> 00:03:56.000
because their frame in our example arrived on port 3 but later then on port 1

58
00:03:56.000 --> 00:04:00.000
so its gonna update the MAC address table entry

59
00:04:00.000 --> 00:04:02.000
to state that A is now available on port 3.

60
00:04:02.000 --> 00:04:07.000
The switch will also flood the frame out of all ports

61
00:04:07.000 --> 00:04:10.000
so it’s gonna flood it out of port 1 and out of port 2.

62
00:04:10.000 --> 00:04:15.000
so host B has now received the frame twice

63
00:04:15.000 --> 00:04:21.000
once from the original frames that arrived on port 1 sent to host B

64
00:04:21.000 --> 00:04:24.000
and secondly for the frame that arrived on port 3.

65
00:04:24.000 --> 00:04:27.000
So this can get confusing for any devices

66
00:04:27.000 --> 00:04:30.000
because they're receiving the same frame multiple times.

67
00:04:30.000 --> 00:04:34.000
The MAC address table is also changing

68
00:04:34.000 --> 00:04:37.000
the first frame that arrived on port 1

69
00:04:37.000 --> 00:04:39.000
allowed this switch to update it's MAC address table

70
00:04:39.000 --> 00:04:45.000
to state that A can be found on port 1, however, the frame that arrived on port 3

71
00:04:45.000 --> 00:04:50.000
now indicates to the switch that A can be found on port 3

72
00:04:50.000 --> 00:04:53.000
so the switch needs to update its MAC address table

73
00:04:53.000 --> 00:04:56.000
to state that A can be now found on port 3.

74
00:04:56.000 --> 00:04:59.000
So this introduces instability in the MAC address table.

75
00:04:59.000 --> 00:05:04.000
so we have end devices receiving frames multiple times

76
00:05:04.000 --> 00:05:07.000
and we have MAC address instability

77
00:05:07.000 --> 00:05:10.000
because the switch thought that A was available on port 1

78
00:05:10.000 --> 00:05:13.000
but now sees that it's available on port 3

79
00:05:13.000 --> 00:05:17.000
but it get worst, when the frame arrived on port 1

80
00:05:17.000 --> 00:05:22.000
the switch updated its MAC address table to state that A can be found on port 1

81
00:05:22.000 --> 00:05:28.000
but it also flooded the frame out of both port 2 and port 3 in this topology.

82
00:05:28.000 --> 00:05:31.000
The frame was received by host B

83
00:05:31.000 --> 00:05:35.000
but in an addition, the frame was sent back to switch 1.

84
00:05:35.000 --> 00:05:40.000
So switch 1 has received the frame that it sent to switch 2

85
00:05:40.000 --> 00:05:48.000
and switch 1 now updates its MAC address table to state that A is available on port 3.

86
00:05:48.000 --> 00:05:54.000
Now when switch 1 receives the frame it not only updates its MAC address table

87
00:05:54.000 --> 00:05:59.000
but it also floods the frame out of all ports except to the port which it arrived.

88
00:05:59.000 --> 00:06:06.000
so the frame arrived on port 3 it's flooded out of port 1 and out of port 2

89
00:06:06.000 --> 00:06:09.000
so this gets confusing for host A

90
00:06:09.000 --> 00:06:13.000
because it's receiving the frame that it originally sent.

91
00:06:13.000 --> 00:06:17.000
but not only is A receiving the frame that it sent

92
00:06:17.000 --> 00:06:22.000
switch 1 is also sending the same frame back to switch 2

93
00:06:22.000 --> 00:06:25.000
and what a switch 2 gonna do with the frame?

94
00:06:25.000 --> 00:06:29.000
it's gonna flood it, so it's gonna send a copy to host B

95
00:06:29.000 --> 00:06:32.000
host B has now received the same frame 3 times

96
00:06:32.000 --> 00:06:36.000
but it will also send the frame back to switch 1

97
00:06:36.000 --> 00:06:42.000
as well as updating its MAC address table to now state that A is on port 1.

98
00:06:42.000 --> 00:06:48.000
So originally when it received the first frame, it thought that A was on port 1

99
00:06:48.000 --> 00:06:52.000
then when it received the frame on port 3, it thought that A was on port 3

100
00:06:52.000 --> 00:06:56.000
and now it thinks that A is on port 1

101
00:06:56.000 --> 00:07:01.000
so we’ve got a lot of MAC address instability in the MAC address table.

102
00:07:01.000 --> 00:07:05.000
Host B is receiving the same frame multiple times

103
00:07:05.000 --> 00:07:07.000
but the biggest issue here is that

104
00:07:07.000 --> 00:07:12.000
the frame get sent back to switch 1, gets flooded again

105
00:07:12.000 --> 00:07:17.000
get sent back to switch 2 and this process continues over and over again.

106
00:07:17.000 --> 00:07:23.000
We have a loop in this topology with the frame being duplicated

107
00:07:23.000 --> 00:07:28.000
and sent round and round and round between these 2 switches.
