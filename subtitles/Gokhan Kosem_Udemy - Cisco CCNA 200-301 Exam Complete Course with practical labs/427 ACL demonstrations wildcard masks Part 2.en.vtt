WEBVTT
1
00:00:00.850 --> 00:00:02.650
There's a more complicated example.

2
00:00:02.970 --> 00:00:11.510
If we had an access list it's existence one permit 10 1 1 0 and the mosque is 0 0 0 15.

3
00:00:11.680 --> 00:00:16.340
What we're saying is the more the last four bits of the last octet.

4
00:00:16.780 --> 00:00:20.670
So notice the address is 10 1 1 0.

5
00:00:20.680 --> 00:00:24.150
And the mosque is 0 0 0 15.

6
00:00:24.160 --> 00:00:27.170
Now the first three octets are fairly easy to work out.

7
00:00:27.340 --> 00:00:30.800
What we are saying is that the first octet must be 10.

8
00:00:31.060 --> 00:00:33.500
The second octet must be one.

9
00:00:33.670 --> 00:00:35.700
The third octet must be one.

10
00:00:35.950 --> 00:00:37.740
But it gets a little bit more complicated.

11
00:00:37.840 --> 00:00:45.610
Looking at the last octet in decimal it's a lot easier if you convert it to binary for binary zeros

12
00:00:45.850 --> 00:00:51.600
followed by 4 binary ones 0 and binary equals 8 binary zeros.

13
00:00:51.850 --> 00:00:58.810
Once again the gap in the middle in these octets is just for readability so that it's easier to see

14
00:00:58.810 --> 00:00:59.840
what's going on.

15
00:01:01.110 --> 00:01:06.130
So what we are saying is that the last four bits in a address can be set to anything.

16
00:01:06.130 --> 00:01:11.150
Some of the words these last four binary births could be set to either a 0 or a 1.

17
00:01:11.370 --> 00:01:20.610
But the first four binary bits must be equal to zero because the address portion has a 0 in it and the

18
00:01:20.610 --> 00:01:23.460
first four bits of the mosque are set to zero.

19
00:01:23.460 --> 00:01:27.870
It means that the first four bits of an address must be equal to this value.

20
00:01:27.870 --> 00:01:30.460
In other words zero.

21
00:01:30.470 --> 00:01:32.210
So let's show you some examples.

22
00:01:32.240 --> 00:01:39.830
If I had an address of 10 one that wanted one would it be matched by this statement permit 10 1 1 0

23
00:01:40.280 --> 00:01:42.450
0 0 0 15.

24
00:01:42.500 --> 00:01:44.390
And the answer would be yes.

25
00:01:44.390 --> 00:01:50.000
I've only converted the last octet into binary as the first three octets so easy to work out what are

26
00:01:50.000 --> 00:01:56.840
you saying is that the first three octets must be equal to 10 1 1 1 which it is for this address but

27
00:01:56.840 --> 00:01:59.840
the last octet converted to binary will look as follows.

28
00:01:59.900 --> 00:02:08.390
We would have 7 binary zeros followed by binary 1 15 in binary once again is four binary zeros followed

29
00:02:08.390 --> 00:02:09.970
by four binary ones.

30
00:02:09.980 --> 00:02:16.970
So what we are saying is notice the first four bits and the address must because of the zeros in the

31
00:02:16.970 --> 00:02:22.450
mosque being equal to 0 0 0 0 which for one is true.

32
00:02:22.550 --> 00:02:25.930
The first four bits are set to zeros.

33
00:02:25.970 --> 00:02:31.050
It doesn't matter what the last four bits are city because we have binary ones in the mosque.

34
00:02:31.130 --> 00:02:33.980
So there is a match on 10 1 1 1.

35
00:02:34.220 --> 00:02:38.820
But does this access statement match 10 1 1 1:29.

36
00:02:39.020 --> 00:02:40.400
And the answer is No.

37
00:02:40.610 --> 00:02:47.450
Because in the first four bits of the address it must be equal to four binary zeros.

38
00:02:47.570 --> 00:02:55.850
And if you convert 1:29 into binary it consists of 1 Henri 1 followed by six binary zeros followed by

39
00:02:55.850 --> 00:02:57.050
binary 1.

40
00:02:57.050 --> 00:03:02.250
In other words the first four binary bits do not equal four zeros.

41
00:03:02.300 --> 00:03:03.920
So this is not a match.

42
00:03:05.210 --> 00:03:08.800
In this example we have some hosts on subnet 10 1 1 0.

43
00:03:09.080 --> 00:03:15.290
So as an example this PC and this MacBook we also have servers server one with IP address 10 1 to 1

44
00:03:15.800 --> 00:03:18.470
and server 2 with IP address 10 1 3 1.

45
00:03:18.710 --> 00:03:25.630
In this example we want to permit host 10 1 1 1 access to the servers but deny everyone else.

46
00:03:25.730 --> 00:03:30.740
Please note these examples are just to help teach you the syntax of access lists and how they can be

47
00:03:30.740 --> 00:03:32.560
used in various scenarios.

48
00:03:32.750 --> 00:03:38.220
These examples are not based practice so please don't try to understand the why of these examples.

49
00:03:38.280 --> 00:03:45.050
They just yet try and help you understand how list can be applied obviously in the real world and in

50
00:03:45.050 --> 00:03:51.230
exam situations you might be presented with various scenarios and in those cases you will need to know

51
00:03:51.260 --> 00:03:56.000
how X-ists lists work to be able to meet the requirements of the cinerea.

52
00:03:56.090 --> 00:04:01.990
The first decision you need to make is on which interface are you going to apply the access list.

53
00:04:02.120 --> 00:04:05.880
In this example we are going to use a standard IP access list.

54
00:04:05.880 --> 00:04:11.600
We're not going to use extended access lists so it makes sense to apply the access list inbound in this

55
00:04:11.600 --> 00:04:15.710
interface because that will accomplish what we set out to do.

56
00:04:15.710 --> 00:04:20.590
You could also apply the access list on both if 0 1 and 0 2.

57
00:04:20.840 --> 00:04:25.200
But it would be more efficient to apply inbound rather than outbound.

58
00:04:25.220 --> 00:04:30.890
It also means that you only have to apply the access list on one interface rather than on two interfaces.

59
00:04:31.450 --> 00:04:36.850
So I'm Narada I could configure the access list but before doing that I'm going to type the command

60
00:04:36.850 --> 00:04:43.480
show access lists just to see which access lists have already been configured so that I don't advertently

61
00:04:43.820 --> 00:04:48.880
edit an access list that already exists in this example you can see that there are no X-ists lists so

62
00:04:48.880 --> 00:04:54.840
I can go into global config mode and top topic C'mon exis list and then specify a number.

63
00:04:54.970 --> 00:04:58.900
And let's say in this example we have to use a standard IP access lists so I'm going to just choose

64
00:04:58.900 --> 00:05:01.840
a number let's say one and then I'm going to say permit

65
00:05:04.670 --> 00:05:09.290
host 10 dog wandered wandered 1 and hit enter.

66
00:05:09.440 --> 00:05:14.150
Also Noria states that we need to permit this host access to the servers.

67
00:05:14.150 --> 00:05:18.280
Now stented IP access list does not allow you to specify destinations.

68
00:05:18.290 --> 00:05:20.480
You can only specify the source.

69
00:05:20.480 --> 00:05:25.430
Now it's worth remembering the implicit deny any at the end of every IP access list.

70
00:05:25.660 --> 00:05:33.530
Our criteria in this example is just to permit that specific host table 1 1 1 and deny everyone else.

71
00:05:33.530 --> 00:05:38.360
So this single line access list will accomplish what we set out to do.

72
00:05:38.360 --> 00:05:48.320
The next step is to bind the Xs list on an interface so an interface if 0 0 I top the common IP access

73
00:05:48.320 --> 00:05:56.090
group and notice it prompts me to put in the number or word of the access list so one and then it prompts

74
00:05:56.090 --> 00:06:02.330
me to specify the direction and I'm going to say inbound that just by doing that I've accomplished what

75
00:06:02.330 --> 00:06:03.450
I set out to do.

76
00:06:04.730 --> 00:06:09.700
We are permitting this host 10 1 1 1 and denying every one else.

77
00:06:09.770 --> 00:06:14.410
You obviously need to be careful with access lists because if another interface were configured on the

78
00:06:14.480 --> 00:06:21.650
router no traffic except for this host would be allowed to send traffic through interface if seriously

79
00:06:21.690 --> 00:06:22.500
zero.

80
00:06:22.790 --> 00:06:26.290
But in this scenario we have met the requirements.

81
00:06:26.300 --> 00:06:34.960
One last thing to show you is it find top the C'mon show the interface and the relevant interface the

82
00:06:34.960 --> 00:06:41.380
Rato will show me which X-ists list is bound outbound and which access list is bound inbound on the

83
00:06:41.380 --> 00:06:42.900
specific interface.

84
00:06:43.090 --> 00:06:49.810
And as you can see here access list one is bound inbound and no access list is bound outbound.

85
00:06:50.950 --> 00:06:58.680
So as an example I could create another access list let's say access list to permit any and then go

86
00:06:58.680 --> 00:07:02.580
into that interface and talk IP access group.

87
00:07:03.900 --> 00:07:04.740
Two out

88
00:07:07.490 --> 00:07:15.080
do the same show command again show the interface if 0 is flesh 0 and you'll be able to see that access

89
00:07:15.080 --> 00:07:18.680
list is bound outbound an excess Exorcist one is bound inbound.

90
00:07:21.610 --> 00:07:27.880
If I made the following mistake and bound access list to inbound rather than outbound

91
00:07:30.800 --> 00:07:32.490
the following would take place.

92
00:07:34.710 --> 00:07:40.200
The router does not warn me about anything but notice the inbound access list has been replaced with

93
00:07:40.230 --> 00:07:41.350
access list too.

94
00:07:41.700 --> 00:07:47.080
So the previous access this one was removed off the interface and replaced with access list too.

95
00:07:47.230 --> 00:07:52.450
There is no need to firstly remove the old actis list before applying the new access list.

96
00:07:52.650 --> 00:07:56.340
The old one is implicitly removed and the new one is applied.

97
00:07:56.340 --> 00:08:01.620
Also notice that you can apply the same access list in and out at the same time.
