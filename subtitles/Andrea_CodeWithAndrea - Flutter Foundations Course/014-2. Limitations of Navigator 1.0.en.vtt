WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:130000

1
00:00:00.288 --> 00:00:01.240
- [Instructor] In this session,

2
00:00:01.240 --> 00:00:02.892
we're going to talk about navigator 1.0

3
00:00:02.892 --> 00:00:05.988
and its limitations and
explain some reasons

4
00:00:05.988 --> 00:00:08.713
why you may want to move away from it.

5
00:00:08.713 --> 00:00:10.809
And why GoRouter is a good alternative

6
00:00:10.809 --> 00:00:12.861
that offers many more capabilities

7
00:00:12.861 --> 00:00:14.563
that you may need in the future.

8
00:00:14.563 --> 00:00:17.684
So as a starting point, we
have our eCommerce project

9
00:00:17.684 --> 00:00:19.700
and throughout this section, we are going

10
00:00:19.700 --> 00:00:22.030
to use Google Chrome to test our app,

11
00:00:22.030 --> 00:00:23.675
because this will give
us the ability to work

12
00:00:23.675 --> 00:00:27.220
with deep links and URLs
on the browser address bar

13
00:00:27.220 --> 00:00:28.860
which is a native feature on the web.

14
00:00:28.860 --> 00:00:32.485
So before continuing, make
sure to select Google Chrome

15
00:00:32.485 --> 00:00:35.352
as a target and then
round the project with it.

16
00:00:35.352 --> 00:00:37.015
And as you can see, you can already use

17
00:00:37.015 --> 00:00:40.216
this app to navigate between
the different screens.

18
00:00:40.216 --> 00:00:42.900
But how this done in the code?

19
00:00:42.900 --> 00:00:45.960
Well, an easy way to find out
is to open the search panel

20
00:00:45.960 --> 00:00:47.939
and then on the search bar over here,

21
00:00:47.939 --> 00:00:50.910
you can type navigator of context

22
00:00:50.910 --> 00:00:52.420
and this will reveal all the places

23
00:00:52.420 --> 00:00:55.400
in the code where navigation takes place.

24
00:00:55.400 --> 00:00:57.757
For example, if we open this line inside

25
00:00:57.757 --> 00:01:01.111
this shopping cart icon
file, we can find the

26
00:01:01.111 --> 00:01:04.621
that is used to navigate
to the shopping cart.

27
00:01:04.621 --> 00:01:07.547
Or if we scroll down and
open this line inside

28
00:01:07.547 --> 00:01:11.924
the products, great,
then we find this code

29
00:01:11.924 --> 00:01:15.697
which shows the product screen
inside a material page route.

30
00:01:15.697 --> 00:01:18.254
And in this case, we pass along

31
00:01:18.254 --> 00:01:21.627
the product ID that will be
used inside the product screen.

32
00:01:21.627 --> 00:01:23.743
So that show different images

33
00:01:23.743 --> 00:01:25.581
and product information depending

34
00:01:25.581 --> 00:01:27.789
on which product we select.

35
00:01:27.789 --> 00:01:30.478
And of course this is still
a relatively small project.

36
00:01:30.478 --> 00:01:32.653
So if we want to find all the places

37
00:01:32.653 --> 00:01:34.876
where navigation takes place in our app,

38
00:01:34.876 --> 00:01:38.551
we can select this line that
says navigator of context.push.

39
00:01:38.551 --> 00:01:40.738
And then we can open the search panel

40
00:01:40.738 --> 00:01:45.500
to search all the instances
of push inside our project.

41
00:01:45.500 --> 00:01:47.327
But this is not great
and it will be better

42
00:01:47.327 --> 00:01:49.390
if there was a single place where

43
00:01:49.390 --> 00:01:51.129
we could see all the routes at once

44
00:01:51.129 --> 00:01:52.931
and this becomes more and more important

45
00:01:52.931 --> 00:01:55.402
if the app grows much larger in size.

46
00:01:55.402 --> 00:01:57.244
And this is the kind of problem

47
00:01:57.244 --> 00:01:59.974
that named routes sets out to solve.

48
00:01:59.974 --> 00:02:01.636
And the main idea here is that rather

49
00:02:01.636 --> 00:02:04.249
than having our widgets
create deep destination

50
00:02:04.249 --> 00:02:07.749
routes themselves, they
should just specify a path

51
00:02:07.749 --> 00:02:09.560
to a new route that they want to get to.

52
00:02:09.560 --> 00:02:13.795
For example, consider this
shopping cart icon file

53
00:02:13.795 --> 00:02:15.775
where we can find this code

54
00:02:15.775 --> 00:02:18.513
that navigates to the
shopping cart screen.

55
00:02:20.450 --> 00:02:22.496
And in this instance,
it would be a lot nicer

56
00:02:22.496 --> 00:02:26.447
if we could just type
navigator or context.push named

57
00:02:26.447 --> 00:02:30.510
with the path to the named
route that we want to take.

58
00:02:30.510 --> 00:02:32.430
And this is a lot more concise

59
00:02:32.430 --> 00:02:34.147
than having to type all these lines.

60
00:02:34.147 --> 00:02:37.540
And then somewhere else in
our app, we can declare a list

61
00:02:37.540 --> 00:02:39.117
of all the route names that are supported

62
00:02:39.117 --> 00:02:40.859
along with the corresponding routes.

63
00:02:40.859 --> 00:02:43.949
And just to be clear, the
reason why this is important

64
00:02:43.949 --> 00:02:47.470
is that when we push
routes directly like this,

65
00:02:47.470 --> 00:02:48.810
we are introducing a strong dependency

66
00:02:48.810 --> 00:02:50.753
between widgets that are unrelated.

67
00:02:50.753 --> 00:02:53.236
In fact, there isn't
really a good reason why

68
00:02:53.236 --> 00:02:56.838
this widget should depend
on the shopping cart screen.

69
00:02:56.838 --> 00:02:59.960
And instead by using
named routes like this

70
00:02:59.960 --> 00:03:02.540
then all our widget needs to know is

71
00:03:02.540 --> 00:03:04.660
that there is a specific route name

72
00:03:04.660 --> 00:03:06.500
that it should navigate to.

73
00:03:06.500 --> 00:03:08.130
And as we will see, this allows us

74
00:03:08.130 --> 00:03:09.608
to centralize all the routes definitions

75
00:03:09.608 --> 00:03:12.330
in one place, and that
will make them much easier

76
00:03:12.330 --> 00:03:14.883
to manage as our
application becomes bigger.

77
00:03:16.330 --> 00:03:18.286
And if you want to find
out how this all works

78
00:03:18.286 --> 00:03:20.397
with the navigator 1.0 APIs,

79
00:03:20.397 --> 00:03:22.370
then the default documentation already has

80
00:03:22.370 --> 00:03:25.359
a simple step by step tutorial about this.

81
00:03:25.359 --> 00:03:28.063
However names routes alone
don't really offer all

82
00:03:28.063 --> 00:03:30.680
the routing capabilities that are needed

83
00:03:30.680 --> 00:03:33.560
for more complex projects
or multiple platforms.

84
00:03:33.560 --> 00:03:35.980
For example, on flutter
web, we may want to navigate

85
00:03:35.980 --> 00:03:38.701
to a certain route by
entering the corresponding URL

86
00:03:38.701 --> 00:03:41.840
the address bar and to
show you what I mean,

87
00:03:41.840 --> 00:03:43.722
here is the completed eCommerce app

88
00:03:43.722 --> 00:03:45.541
that we will build by
the end of this course.

89
00:03:45.541 --> 00:03:48.261
And as you can see here
I can manually change

90
00:03:48.261 --> 00:03:51.680
the URL to point to an existing route.

91
00:03:51.680 --> 00:03:54.910
And this will take me to
the corresponding page.

92
00:03:54.910 --> 00:03:56.819
And if I happen to enter a URL to a page

93
00:03:56.819 --> 00:03:59.555
that doesn't exist, or I
shouldn't have access to,

94
00:03:59.555 --> 00:04:02.890
then I get redirected to a 404 page.

95
00:04:02.890 --> 00:04:05.559
So routing by URL and
redirections are features

96
00:04:05.559 --> 00:04:07.270
that are very common in today's web apps

97
00:04:07.270 --> 00:04:10.553
but they are only available
with the flutter routing API

98
00:04:10.553 --> 00:04:13.690
which is also known as navigator 2.0.

99
00:04:13.690 --> 00:04:16.420
And beyond that, the ability
to use URLs for routing is

100
00:04:16.420 --> 00:04:18.853
at the basis of another
important feature known

101
00:04:18.853 --> 00:04:22.260
as deep linking which is important on web,

102
00:04:22.260 --> 00:04:23.950
just as it is on mobile.

103
00:04:23.950 --> 00:04:25.310
And product speaking, deep linking

104
00:04:25.310 --> 00:04:27.521
is all about opening a URL that displays

105
00:04:27.521 --> 00:04:29.589
a specific screen in your app.

106
00:04:29.589 --> 00:04:32.670
And this can be very handy
on eCommerce apps like this,

107
00:04:32.670 --> 00:04:34.522
because if I see a product that I like

108
00:04:34.522 --> 00:04:38.845
I can just copy the URL
and then I can send it

109
00:04:38.845 --> 00:04:40.673
to my friends and they can check it out

110
00:04:40.673 --> 00:04:44.560
by just opening the URL, just like this.

111
00:04:44.560 --> 00:04:46.500
And another feature that is often needed

112
00:04:46.500 --> 00:04:47.807
is the ability to pass parameters

113
00:04:47.807 --> 00:04:50.150
when navigating to a new route.

114
00:04:50.150 --> 00:04:52.030
And these can be further distinguished

115
00:04:52.030 --> 00:04:54.990
between path parameters
and query parameters

116
00:04:56.070 --> 00:04:58.180
and any serious routing
system should be able

117
00:04:58.180 --> 00:05:00.414
to handle both path and query parameters.

118
00:05:00.414 --> 00:05:02.315
And there are also some other concerns

119
00:05:02.315 --> 00:05:04.037
that we will discuss as we go forward.

120
00:05:04.037 --> 00:05:07.339
Okay, so let me just go
quickly back to the code,

121
00:05:07.339 --> 00:05:11.520
where I can undo the changes
that we made earlier on.

122
00:05:11.520 --> 00:05:13.300
And to summarize, I will say that

123
00:05:13.300 --> 00:05:14.773
when you build your own flutter apps,

124
00:05:14.773 --> 00:05:17.160
if you think about what
features you may need now

125
00:05:17.160 --> 00:05:18.940
and in the future and choose

126
00:05:18.940 --> 00:05:21.540
the most appropriate
navigation system or package.

127
00:05:21.540 --> 00:05:24.113
And just to be clear,
the navigator 2.0 APIs

128
00:05:24.113 --> 00:05:26.650
that have been introduced back in 2020,

129
00:05:26.650 --> 00:05:28.090
will give you all the capabilities

130
00:05:28.090 --> 00:05:30.865
that you possibly need to
build complex routing logic.

131
00:05:30.865 --> 00:05:33.396
However, using these APIs comes at a cost

132
00:05:33.396 --> 00:05:35.140
because they have been criticized

133
00:05:35.140 --> 00:05:37.236
for being too complex
and hard to understand.

134
00:05:37.236 --> 00:05:39.245
And I tend to agree with this assessment

135
00:05:39.245 --> 00:05:41.615
because when I first
built this e-commerce app,

136
00:05:41.615 --> 00:05:45.022
I migrated from the navigator 1.0 to 2.0

137
00:05:45.022 --> 00:05:46.900
and while I could make navigator 2.0 work,

138
00:05:46.900 --> 00:05:49.990
the resulting code was very error prone

139
00:05:49.990 --> 00:05:50.996
and hard to maintain.

140
00:05:50.996 --> 00:05:53.017
And once I moved over to GoRouter,

141
00:05:53.017 --> 00:05:56.040
I managed to have the
amount of navigation code

142
00:05:56.040 --> 00:05:57.450
that I had in the project.

143
00:05:57.450 --> 00:05:58.814
And I've been much happier since.

144
00:05:58.814 --> 00:06:01.974
And of course there are also
other routing packages out

145
00:06:01.974 --> 00:06:04.094
there that do a great job at many

146
00:06:04.094 --> 00:06:07.230
of the same features that
are supported by GoRouter.

147
00:06:07.230 --> 00:06:09.220
However, there are some
very strong reasons

148
00:06:09.220 --> 00:06:10.672
why I can recommend go router

149
00:06:10.672 --> 00:06:12.479
over all other routing packages.

150
00:06:12.479 --> 00:06:15.470
And these are that the API is minimal

151
00:06:15.470 --> 00:06:19.133
and very easy to and also the
documentation is outstanding.

152
00:06:19.133 --> 00:06:19.990
And in fact,

153
00:06:19.990 --> 00:06:22.760
there's an entire website
called gorouter.dev

154
00:06:22.760 --> 00:06:25.120
that covers this in great detail.

155
00:06:25.120 --> 00:06:27.389
And also go router is maintained directly

156
00:06:27.389 --> 00:06:28.928
by the flutter team itself

157
00:06:28.928 --> 00:06:31.855
which sets a very high
bar for code quality.

158
00:06:31.855 --> 00:06:34.138
And ultimately this
makes it a good solution

159
00:06:34.138 --> 00:06:36.710
for both small and big flutter apps.

160
00:06:36.710 --> 00:06:38.540
And while it's not feature complete,

161
00:06:38.540 --> 00:06:40.018
as I record this lesson, chances are

162
00:06:40.018 --> 00:06:41.794
that all the most requested features

163
00:06:41.794 --> 00:06:43.588
will be implemented in the future.

164
00:06:43.588 --> 00:06:45.760
So the takeaway of this lesson is that,

165
00:06:45.760 --> 00:06:47.800
if you're trying to decide
which navigation package

166
00:06:47.800 --> 00:06:50.490
to use you should
probably go with GoRouter.

167
00:06:50.490 --> 00:06:52.140
So let's continue on the next lesson

168
00:06:52.140 --> 00:06:53.940
where we will start working with it.

