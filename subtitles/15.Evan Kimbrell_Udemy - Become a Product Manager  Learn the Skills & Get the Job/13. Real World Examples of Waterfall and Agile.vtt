WEBVTT
0
1
00:00:03.750 --> 00:00:09.750
In the last lecture, we learned that Agile software development is a methodology for applying that lean
1

2
00:00:09.750 --> 00:00:11.990
mindset to software development inside a company.
2

3
00:00:12.000 --> 00:00:17.060
So what does it look like when we actually apply it inside a development environment?
3

4
00:00:17.070 --> 00:00:18.000
What does it look like day to day?
4

5
00:00:18.000 --> 00:00:18.670
What does it look like day to day?
5

6
00:00:22.920 --> 00:00:28.500
Let's say we work at a music streaming company and we've identified that the most important thing to
6

7
00:00:28.500 --> 00:00:33.210
our users is to have an ability to build a playlist.
7

8
00:00:33.420 --> 00:00:39.690
So, using the Agile development methodology, we can get everyone in a room, the engineers, the designers,
8

9
00:00:40.050 --> 00:00:47.100
and us, the product managers, and we can decide on the very core features of building a playlist and what that entails.
9

10
00:00:47.100 --> 00:00:48.150
and us, the product managers, and we can decide on the very core features of building a playlist and what that entails.
10

11
00:00:48.150 --> 00:00:53.040
So if we talk to the designers and engineers, we can be pretty certain that the most basic requirement
11

12
00:00:53.040 --> 00:00:59.910
for building playlist functionality is going to be adding a bunch of tracks or songs to a list called a playlist.
12

13
00:00:59.910 --> 00:01:00.760
for building playlist functionality is going to be adding a bunch of tracks or songs to a list called a playlist.
13

14
00:01:00.810 --> 00:01:05.370
With this knowledge, the engineers can go ahead and start developing the database that we know we'll
14

15
00:01:05.370 --> 00:01:07.950
need to build the playlist functionality.
15

16
00:01:07.950 --> 00:01:14.490
In the meantime, the designer and us, the product managers, can get together and start talking about how
16

17
00:01:14.650 --> 00:01:19.360
the playlists act, and how will they look,
and how will they feel inside of the app.
17

18
00:01:19.410 --> 00:01:25.830
So us, the product managers, and the designers can go off and wireframe some potential designs, the designers
18

19
00:01:25.830 --> 00:01:27.120
can make them look really nice, we can test them with users and we can make changes based on user feedback.
19

20
00:01:27.120 --> 00:01:31.570
can make them look really nice, we can test them with users and we can make changes based on user feedback.
20

21
00:01:31.920 --> 00:01:35.770
We can do this process a couple of times while the engineers are working on the database.
21

22
00:01:35.910 --> 00:01:41.610
By the time we've got the perfect design and look and feel ready, the engineers can put it inside of
22

23
00:01:41.610 --> 00:01:43.640
the app because they're done with the database.
23

24
00:01:43.650 --> 00:01:48.840
So now, with the engineers done with the backend and the database, they start implementing the actual
24

25
00:01:48.840 --> 00:01:55.260
playlist functionality in the app. Then, the product manager and the designer can go on and start talking
25

26
00:01:55.290 --> 00:02:00.830
to users about the next features they should build and then start doing the entire process over.
26

27
00:02:00.930 --> 00:02:03.990
So while the engineers are actually implementing
this feature into the app,
27

28
00:02:03.990 --> 00:02:10.710
the product manager - us - and the designers can go talk to other users and look at metrics to decide what 
28

29
00:02:10.710 --> 00:02:12.480
feature we should build next.
29

30
00:02:12.480 --> 00:02:19.530
Then we go and do wireframes again, and design, and we get some more feedback from users, and we just complete
30

31
00:02:19.530 --> 00:02:20.560
the cycle over again.
31

32
00:02:20.580 --> 00:02:26.400
When companies use the Agile development methodology, usually everyone is in very close communication
32

33
00:02:26.430 --> 00:02:33.060
and collaboration. Engineers, designers, and product managers are usually in the same room or office and
33

34
00:02:33.060 --> 00:02:35.260
they're always talking.
Now, how about Waterfall?
34

35
00:02:35.280 --> 00:02:39.410
When is it useful and what are some examples
of it being a useful process?
35

36
00:02:39.660 --> 00:02:46.490
Well, think about Microsoft Windows or Mac OS X,
which are operating systems for computers.
36

37
00:02:46.770 --> 00:02:51.080
These are operating systems that have
literally thousands of features.
37

38
00:02:51.150 --> 00:02:55.540
It would be really, really hard to pick a couple of features
that stand on their own.
38

39
00:02:55.620 --> 00:03:00.900
All of these features have dependencies on others and you couldn't really just release a few to the public.
39

40
00:03:00.900 --> 00:03:01.800
All of these features have dependencies on others and you couldn't really just release a few to the public.
40

41
00:03:01.800 --> 00:03:08.520
Another example of Waterfall being a little bit more useful than Agile is mission critical software
41

42
00:03:08.520 --> 00:03:13.710
applications, like braking or engine control systems in cars.
42

43
00:03:13.710 --> 00:03:19.740
Do you think that using Agile development and developing only a few features at a time inside of a car
43

44
00:03:19.890 --> 00:03:22.190
for the braking systems is a good idea?
44

45
00:03:22.200 --> 00:03:22.950
Definitely not.
45

46
00:03:22.980 --> 00:03:25.080
What about things outside of software?
46

47
00:03:25.200 --> 00:03:28.280
Waterfall is used in other places where it's pretty useful.
47

48
00:03:28.290 --> 00:03:30.670
Let's imagine we're building a skyscraper.
48

49
00:03:30.780 --> 00:03:34.920
Do you think we'd want to build five floors at a time and then put a bunch of people in it and see if it still stands?
49

50
00:03:34.920 --> 00:03:36.330
Do you think we'd want to build five floors at a time and then put a bunch of people in it and see if it still stands?
50

51
00:03:36.330 --> 00:03:37.170
Probably not.
51

52
00:03:37.170 --> 00:03:41.520
We're going to build all 100 floors together and we're going to do it from a spec that we know from
52

53
00:03:41.520 --> 00:03:43.670
the beginning has everything we need.
53

54
00:03:43.710 --> 00:03:48.570
When the Waterfall software development process is used,
the team does not collaborate quite as closely
54

55
00:03:48.570 --> 00:03:52.210
as the team that's doing an Agile software development process.
55

56
00:03:52.230 --> 00:03:59.160
You can have the research and product requirements team in one city, the designers in another city and
56

57
00:03:59.160 --> 00:04:03.050
time zone, and the developers in an entirely other city and time zone.
57

58
00:04:03.150 --> 00:04:08.760
This is because everything is defined up front and it gets passed from one team to the other and nothing changes.
58

59
00:04:08.760 --> 00:04:09.600
This is because everything is defined up front and it gets passed from one team to the other and nothing changes.
59

60
00:04:09.600 --> 00:04:14.820
So I hope everyone has a pretty decent understanding of the differences between Agile and Waterfall,
60

61
00:04:15.060 --> 00:04:21.130
and what sorts of real world examples these are used in.
For your purposes as a product manager,
61

62
00:04:21.130 --> 00:04:26.640
we focus mostly on Agile, but don't think that Waterfall is completely useless, because it's not.
