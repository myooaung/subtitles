1
00:00:01,060 --> 00:00:04,040
Hello and welcome back to the course on databases.

2
00:00:04,130 --> 00:00:09,300
So the Tauriel we checked that this table is in first normal form and we confirmed that.

3
00:00:09,300 --> 00:00:17,900
So let's go ahead and at the top type in a comment I will say check one and F..

4
00:00:18,140 --> 00:00:24,220
And now we're going to check for the second normal form a check to N.F..

5
00:00:24,270 --> 00:00:28,490
So let's quickly bring up the slide for the second normal form and here's the definition.

6
00:00:28,620 --> 00:00:30,450
A table is in second normal form.

7
00:00:30,450 --> 00:00:35,340
If it isn't first on the form which we have confirmed and every non-prime attribute of the table is

8
00:00:35,340 --> 00:00:37,640
dependent on the whole of every candidate.

9
00:00:37,860 --> 00:00:43,080
So if we remember the mnemonic every non-prime attribute must provide facts about the key the whole

10
00:00:43,080 --> 00:00:44,430
key and nothing but the key.

11
00:00:44,430 --> 00:00:46,830
So we're talking about the whole key.

12
00:00:46,980 --> 00:00:49,520
And as we remember here it's every candidate.

13
00:00:49,570 --> 00:00:54,150
So this should be replaced with the whole of every candidate.

14
00:00:54,480 --> 00:00:55,800
So that's what we're going to be looking at.

15
00:00:55,800 --> 00:00:58,590
Let's go and investigate.

16
00:00:58,590 --> 00:01:00,840
So here's our table once again.

17
00:01:00,960 --> 00:01:06,070
Let's make some room so we can analyze this better especially these first couple of columns.

18
00:01:06,090 --> 00:01:11,410
This is going to be the very important ones and here.

19
00:01:11,410 --> 00:01:18,790
So basically what this is is we just ran a select store from transaction's so we can just reposted here

20
00:01:18,790 --> 00:01:20,070
so that we know that we ran it.

21
00:01:20,080 --> 00:01:22,170
And in fact we can run it again.

22
00:01:22,180 --> 00:01:27,960
The only thing is that we're going to have to adjust these columns again but that's ok.

23
00:01:28,880 --> 00:01:37,250
All right so what do we want to understand here is that first of all we need to find the primer non-prime

24
00:01:37,250 --> 00:01:38,260
attributes right.

25
00:01:38,690 --> 00:01:42,370
And to do that we need to find the candidate keys.

26
00:01:42,890 --> 00:01:45,120
So let's let's go ahead and do that.

27
00:01:45,140 --> 00:01:50,600
Let's find out which of these columns or combinations of columns are our candidate keys.

28
00:01:51,110 --> 00:02:00,640
So obviously of this column right away is a candidate key because it identifies every single row uniquely.

29
00:02:00,650 --> 00:02:04,630
That's that's the design of this column that's what it's made for right transaction IDs.

30
00:02:04,640 --> 00:02:05,950
So this is a candidate.

31
00:02:06,260 --> 00:02:08,120
But the question is does it stop there.

32
00:02:08,120 --> 00:02:10,220
Or can we maybe find another candidate.

33
00:02:10,220 --> 00:02:13,910
Q So how do you go about these things.

34
00:02:13,910 --> 00:02:20,000
Well let's let's try just randomly picking some columns and thinking about it that way and then we will

35
00:02:21,770 --> 00:02:23,380
go about it a bit more logically.

36
00:02:23,390 --> 00:02:25,760
So let's say we pick first name right.

37
00:02:25,760 --> 00:02:28,790
Could first name be the candidate key here right.

38
00:02:28,790 --> 00:02:29,850
How do we think about that.

39
00:02:29,870 --> 00:02:38,120
Well first them cannot uniquely identify every column because here it is the name of the person that

40
00:02:38,120 --> 00:02:42,260
made the purchase and a person can make several purchases right.

41
00:02:42,260 --> 00:02:48,140
So therefore this column would work neither would the column first name surname if you combine these

42
00:02:48,140 --> 00:02:48,860
two columns.

43
00:02:48,950 --> 00:02:54,860
Again it wouldn't work because this is not a table about people sort of table of our customers.

44
00:02:54,860 --> 00:02:56,810
This is a table about the purchases they make.

45
00:02:56,810 --> 00:03:07,670
And if a customer makes two purchases then you will not be able to identify.

46
00:03:07,970 --> 00:03:12,890
You will not be able to separate those two rows if your candidate is going to be first name and surname

47
00:03:12,890 --> 00:03:16,790
and therefore first name plus surname is not a candidate key.

48
00:03:17,070 --> 00:03:17,570
What else.

49
00:03:17,570 --> 00:03:23,660
Well let's say item could item be a candidate again item cannot be a candidate for that same reason

50
00:03:23,660 --> 00:03:29,970
that this is a documentation of this table.

51
00:03:30,020 --> 00:03:35,990
Documents all of the purchases that happened and a certain item can be purchased several times because

52
00:03:36,500 --> 00:03:40,000
those items are not unique those items are just in stock.

53
00:03:40,010 --> 00:03:46,160
And this is just an item called that doesn't mean a unique item it just means a type of item that you

54
00:03:46,200 --> 00:03:50,950
know a coat and there's hundreds and maybe thousands of those coats in the warehouse.

55
00:03:50,950 --> 00:03:55,990
And every time it's purchased the same code is used you can see that there's duplicate in this column

56
00:03:56,000 --> 00:03:56,900
already.

57
00:03:57,310 --> 00:03:59,870
And so you can go about.

58
00:03:59,900 --> 00:04:04,970
Think about it that way and just look at individual columns or combinations of columns but the same

59
00:04:04,970 --> 00:04:09,120
time it will take quite a lot of time because there's lots of combinations of Kolb's that you can imagine.

60
00:04:09,410 --> 00:04:14,740
And therefore the best way to think about it is just to think logically like what is this table about

61
00:04:14,750 --> 00:04:16,760
what is the purpose of this table.

62
00:04:16,790 --> 00:04:25,070
Always think of the purpose the purpose of this table is to document all of the transactions to have

63
00:04:25,100 --> 00:04:29,990
a trail or a trace of all of these transactions that occurred right.

64
00:04:30,050 --> 00:04:36,520
Hence the transaction ID over here at the start and hence the name of the table is all transactions.

65
00:04:36,560 --> 00:04:45,440
So basically the intention of this table is for every single transaction to be unique in the same.

66
00:04:45,450 --> 00:04:49,670
All right so an intersection isn't based on a person isn't based on the item.

67
00:04:49,670 --> 00:04:54,030
It is based on when that transaction happened right.

68
00:04:54,040 --> 00:04:55,490
And who made that transaction.

69
00:04:55,490 --> 00:05:03,690
So those are some of those things that that can help us identify if that transaction is unique.

70
00:05:03,690 --> 00:05:06,580
So let's let's start looking at that.

71
00:05:06,600 --> 00:05:12,030
Right so it is somebody goes on line somebody's purchase an item and has to be sent to them.

72
00:05:12,240 --> 00:05:18,770
And so here we've got an interesting column time stamps which tells us at which point in time a certain

73
00:05:18,770 --> 00:05:25,520
person purchased a certain item and then it also has the idea of that person.

74
00:05:25,520 --> 00:05:31,400
So the interesting ones that we will want to look at here is the combination of times.

75
00:05:31,430 --> 00:05:35,520
Well first of all can timestamp on its own be a candidate.

76
00:05:35,780 --> 00:05:42,280
Well the answer is no because even though it's to the second because we have quite all of country customers

77
00:05:42,350 --> 00:05:51,710
some over like nine hundred 960 I think 962 customers there is in this database in this table because

78
00:05:51,710 --> 00:05:55,200
we have so many customers it can hypothetically happens.

79
00:05:55,430 --> 00:06:03,410
So that's two different customers purchased in the same time at the same time all the way to the second.

80
00:06:03,410 --> 00:06:09,950
So at the exact same second two customers could indeed purchase it is probably hard to find.

81
00:06:10,090 --> 00:06:15,230
And like you could look through and maybe you'd find that one or two of those examples but the point

82
00:06:15,230 --> 00:06:19,660
is that theoretically it's possible and therefore timestamped cannot be the candidate key.

83
00:06:19,690 --> 00:06:20,170
Right.

84
00:06:20,180 --> 00:06:25,280
If that wasn't possible if we knew for a fact that two customers can purchase same time timestamped

85
00:06:25,340 --> 00:06:29,270
would be a candidate because it would be unique and be real.

86
00:06:29,410 --> 00:06:36,790
But what if we combine timestamp and for example item right what if we say those two fields are those

87
00:06:36,790 --> 00:06:39,570
two attributes are accounted.

88
00:06:39,570 --> 00:06:40,770
Can that be the case.

89
00:06:40,930 --> 00:06:52,600
Well is it is it is more it is much less likely that the the two rows would have the same timestamp

90
00:06:52,660 --> 00:06:58,990
and the same item but it still can happen so two different customers could at the same time purchase

91
00:06:59,290 --> 00:07:00,960
the same item right.

92
00:07:01,360 --> 00:07:02,310
And that could happen.

93
00:07:02,320 --> 00:07:05,660
And therefore this combination wouldn't be a candidate.

94
00:07:06,040 --> 00:07:12,910
But now if you look at timestamp Plus customer ID that's much more interesting because if you think

95
00:07:12,910 --> 00:07:19,550
about it a customer cannot physically make two purchases in the same second.

96
00:07:19,650 --> 00:07:25,870
Right because you have to click the checkout button and clicking the checkout button takes at least

97
00:07:25,870 --> 00:07:26,680
one second.

98
00:07:26,740 --> 00:07:26,980
Right.

99
00:07:26,980 --> 00:07:32,140
So we're going to go off that assumption maybe there are some crazy customers or if you're dealing with

100
00:07:32,140 --> 00:07:37,440
like crazy quick customers or if you're dealing with machines right.

101
00:07:37,510 --> 00:07:42,130
If you're if you're transactions these transactions happening business to business and they're happening

102
00:07:42,430 --> 00:07:46,020
through robots maybe they could purchase in one second.

103
00:07:46,360 --> 00:07:52,300
But in our case we're going to assume that an individual customer a human sitting in front of the computer

104
00:07:52,870 --> 00:08:02,650
for example here Amy Wilkins cannot make two purchases in one second and therefore the customer ID plus

105
00:08:02,650 --> 00:08:09,670
the time stamp will become a unique identifier for every single row because there are no two rows with

106
00:08:09,670 --> 00:08:15,400
the same time stamp and the same customer ID because if there were that would mean that that customer

107
00:08:15,730 --> 00:08:20,450
had made two purchases in one second which we assume to be impossible.

108
00:08:20,560 --> 00:08:27,490
So therefore the timestamp Plus customer id combination the combination of these two columns is another

109
00:08:27,550 --> 00:08:29,860
candidate key of this table.

110
00:08:30,460 --> 00:08:35,320
So what we have is the result is that we have two candidate keys this call by itself and the combination

111
00:08:35,320 --> 00:08:37,330
of these two columns.

112
00:08:37,390 --> 00:08:38,550
Very interesting isn't it.

113
00:08:38,550 --> 00:08:41,500
This whole I like the way you need to think about these things.

114
00:08:41,500 --> 00:08:47,920
I like the logic that goes into coming up with these solutions and these ideas.

115
00:08:47,920 --> 00:08:54,010
And like if you don't you don't even need to check the rest of the rows you can by looking them understand

116
00:08:54,010 --> 00:08:57,300
that there are no more candidate keys in there right.

117
00:08:57,340 --> 00:09:03,930
So but you do need to like practice a little bit to get the hang of it with time.

118
00:09:04,270 --> 00:09:06,250
And that's exactly what we're doing so we're practicing.

119
00:09:06,550 --> 00:09:09,830
And so now we know that there's this is a can do these two the can.

120
00:09:09,940 --> 00:09:19,400
So the question is which of these columns are our prime attributes and which are our non-prime attributes.

121
00:09:19,450 --> 00:09:22,340
So our prime attributes are the first three.

122
00:09:22,360 --> 00:09:31,980
Right so the prime prime attribute is a column that is part of any or part of at least one candidate

123
00:09:31,980 --> 00:09:32,750
key.

124
00:09:32,860 --> 00:09:40,300
So these three columns are all parts of candidate keys and non-prime attributes are comb's which are

125
00:09:40,300 --> 00:09:44,070
not part of any candidate keys and that these columns are here.

126
00:09:44,140 --> 00:09:46,050
These are non-prime attributes.

127
00:09:46,150 --> 00:09:54,580
So now we're going to go back to our definition and check if this table is conform to a second normal

128
00:09:54,580 --> 00:10:00,700
form and our definition said that every non-prime attribute of the table is dependent on the whole of

129
00:10:00,700 --> 00:10:01,620
every candidate.

130
00:10:01,720 --> 00:10:06,730
All right so we're looking just at these columns now because they are the non-prime attributes these

131
00:10:06,730 --> 00:10:09,970
columns and so on from 4 and all the way to the end.

132
00:10:10,390 --> 00:10:16,140
And the question is is each one of these columns dependent on ever on the whole of every candidate.

133
00:10:16,450 --> 00:10:22,020
So here's our first candidate and we're going to investigate all of these calls against this candidate.

134
00:10:22,330 --> 00:10:24,340
Well the answer here is obvious.

135
00:10:24,340 --> 00:10:31,390
The answer is yes because the whole of this candidate key is in deed this candidate key itself right

136
00:10:31,390 --> 00:10:36,100
because it only contains one call me cannot split it apart and therefore because it uniquely identifies

137
00:10:36,100 --> 00:10:42,430
every single row so meaning that this column the first name will depend fully on transactional the surname

138
00:10:42,610 --> 00:10:42,980
and so on.

139
00:10:42,970 --> 00:10:48,690
So by default if the if the candidated consists of only one column by default

140
00:10:51,670 --> 00:10:53,150
that condition is met.

141
00:10:53,190 --> 00:10:58,240
Now let's have a look at this candidate key which consists of two columns.

142
00:10:58,260 --> 00:11:06,210
Right so now we're going to go through all columns here and see if they depend wholly on fully on this

143
00:11:06,210 --> 00:11:11,240
candidate key or part of the candidate keys sufficient to identify them.

144
00:11:11,300 --> 00:11:11,490
Right.

145
00:11:11,490 --> 00:11:13,780
So first name right away let's start here.

146
00:11:13,770 --> 00:11:18,920
So first name does it require both of these columns for.

147
00:11:19,020 --> 00:11:22,210
Do we require both of these columns to identify the person's first name.

148
00:11:22,410 --> 00:11:23,470
Well the answer's no.

149
00:11:23,790 --> 00:11:28,180
We are the customer ID is sufficient to identify the first name.

150
00:11:28,200 --> 00:11:33,070
You don't need the timestamp to the first name will not change if the time stamp changes.

151
00:11:33,080 --> 00:11:33,530
OK.

152
00:11:33,530 --> 00:11:34,080
Interesting.

153
00:11:34,080 --> 00:11:40,740
So there we go we already found one case where the second normal form conditions met.

154
00:11:40,920 --> 00:11:41,460
Let's keep going.

155
00:11:41,460 --> 00:11:45,960
So surname do we need both of these columns to identify surname.

156
00:11:45,960 --> 00:11:47,700
No we don't.

157
00:11:47,700 --> 00:11:50,170
We actually only need customer ID.

158
00:11:50,230 --> 00:11:52,980
Again another call shipping state.

159
00:11:52,980 --> 00:11:56,400
Do we need both or is one column sufficient.

160
00:11:56,640 --> 00:12:02,170
One Colma sufficient the customer ID is sufficient to identify the state item.

161
00:12:02,340 --> 00:12:06,450
Do we need both columns or is one enough in this case we need both.

162
00:12:06,450 --> 00:12:06,780
Right.

163
00:12:06,780 --> 00:12:10,920
We cannot say that by knowing customer I.D. We know what that person purchased because we need to know

164
00:12:10,920 --> 00:12:14,660
at what time they purchased to know exactly what they purchased right.

165
00:12:14,670 --> 00:12:20,460
So you cannot identify that just through the customer ID and also cannot identify just through a timestamp

166
00:12:21,330 --> 00:12:27,390
because again if they could hypothetically be a situation where two people purchase at the same exact

167
00:12:27,390 --> 00:12:33,000
time and they purchase different items then you would not be able to identify what item was purchased

168
00:12:33,120 --> 00:12:35,350
just through the timestamp.

169
00:12:35,370 --> 00:12:39,400
So this call meets the criteria the description of the item.

170
00:12:39,480 --> 00:12:43,790
The same thing basically just like the item that meets the criteria the price.

171
00:12:43,890 --> 00:12:44,790
Again same thing.

172
00:12:44,820 --> 00:12:51,570
You need both of these and the loyalty loyalty discount actually is interesting because loyalty discount

173
00:12:52,270 --> 00:12:52,840
does.

174
00:12:52,920 --> 00:12:53,490
Let's have a look.

175
00:12:53,490 --> 00:12:57,820
So do we need both of these columns to identify the loyalty discount.

176
00:12:57,990 --> 00:13:00,960
Well let's see is the time stamps sufficient.

177
00:13:01,230 --> 00:13:07,090
No the time is not sufficient because just by knowing at what time something was purchased You wouldn't

178
00:13:07,160 --> 00:13:08,070
know you.

179
00:13:08,180 --> 00:13:12,660
You are not able to identify uniquely the loyalty discount.

180
00:13:12,660 --> 00:13:13,780
Why.

181
00:13:13,800 --> 00:13:20,190
Because again that could be hypothetically a situation where two purchases were made exactly at the

182
00:13:20,190 --> 00:13:23,880
same time and they would have different loyalty discount.

183
00:13:23,880 --> 00:13:24,940
That's possible.

184
00:13:24,960 --> 00:13:26,550
So that's how you think about it.

185
00:13:26,880 --> 00:13:29,570
You don't think about it does time to find loyalty discounted.

186
00:13:29,580 --> 00:13:36,570
You just think about what happens if there's two two rows with exactly the same timestamp.

187
00:13:36,750 --> 00:13:38,290
Will it work.

188
00:13:38,310 --> 00:13:40,600
Is it possible that the words you just come can be different.

189
00:13:40,650 --> 00:13:44,050
Yes it is possible that the old discount can be different.

190
00:13:44,610 --> 00:13:50,760
But what about if we take two rows with exactly the same customer ID will it be possible that the loyalty

191
00:13:50,760 --> 00:13:53,170
discount is different yes.

192
00:13:53,180 --> 00:13:54,600
In that case actually no.

193
00:13:54,620 --> 00:13:59,210
In that case it's not possible that the world is going to be different because the loyalty discount

194
00:13:59,270 --> 00:14:03,770
is actually tied to the customer and hence it's tied to the customer ID.

195
00:14:03,860 --> 00:14:12,700
So in this case for the lower discount it is sufficient for us to use just one column to identify the

196
00:14:12,710 --> 00:14:19,820
loyalty discount and therefore this column attribute does not comply with the criteria of the second

197
00:14:19,820 --> 00:14:21,260
normal form.

198
00:14:21,260 --> 00:14:28,570
So our conclusion is that this table is not in second normal form and that these are for column.

199
00:14:28,570 --> 00:14:36,680
So first name surname shipping state and loyalty discount are the columns that do not wholly or fully

200
00:14:36,770 --> 00:14:44,450
depend on every single candidate key and in this case is this candidate that they don't fully depend

201
00:14:44,450 --> 00:14:44,890
on.

202
00:14:45,160 --> 00:14:51,370
And so what is the result or what is the recommendation here that needs.

203
00:14:51,380 --> 00:14:54,560
What do we need to do to make this table conform.

204
00:14:54,710 --> 00:14:56,420
Well it's pretty straightforward.

205
00:14:56,420 --> 00:15:01,000
What we need to do is we need to separate out these four columns these three and this call.

206
00:15:01,010 --> 00:15:02,900
They need to go into a separate table.

207
00:15:02,900 --> 00:15:04,320
Right.

208
00:15:04,390 --> 00:15:08,930
And so that's our conclusion that's how we think about it.

209
00:15:09,470 --> 00:15:14,690
And it does take some time but I find it quite interesting it's like a little little challenge or a

210
00:15:14,690 --> 00:15:20,270
little riddle you have to solve another We've identified the comb's the final step for the second normal

211
00:15:20,270 --> 00:15:27,500
form would be to make this table or turn this design of this current database which only contains one

212
00:15:27,500 --> 00:15:27,860
table.

213
00:15:27,860 --> 00:15:34,690
Turn the design into a different design which would be in second normal form and we're going to continue

214
00:15:34,820 --> 00:15:36,660
that in the next tutorial.

215
00:15:36,680 --> 00:15:39,800
I look forward See you then and until next I'm happy analyzing.
