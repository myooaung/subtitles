1
00:00:00,330 --> 00:00:06,800
Hello and welcome back to the course on database's Tauriel we're going to continue normalizing our database.

2
00:00:06,870 --> 00:00:12,370
So far we've redesigned the database to make sure that it's in second normal form.

3
00:00:13,160 --> 00:00:18,950
And as you can remember we've got two tables now instead of one we've got the Customers table and the

4
00:00:18,950 --> 00:00:20,140
transaction.

5
00:00:20,510 --> 00:00:26,630
And today we're going to check if these tables are if this database is now in third normal form.

6
00:00:26,930 --> 00:00:32,140
And if we're going to adjust it to make it conform to the third normal form.

7
00:00:32,250 --> 00:00:38,490
So let's have a look at the definition on the third normal form to start off with the third normal form

8
00:00:38,850 --> 00:00:45,210
as we discussed in the theoretical Turris is defined as the table has to be in second second normal

9
00:00:45,210 --> 00:00:51,750
form which we've already checked and also every non-prime attribute is non transitively dependent on

10
00:00:51,900 --> 00:00:52,910
every candidate.

11
00:00:53,340 --> 00:00:58,920
So if we remember that mnemonic it's ever every non-prime Actually it must provide a fact about the

12
00:00:58,920 --> 00:01:01,270
key the whole key and nothing but the key.

13
00:01:01,260 --> 00:01:07,130
So in this case we're talking about the bar which is nothing but the key meaning that any non-prime

14
00:01:07,130 --> 00:01:11,130
Ashmit cannot be dependent on the key.

15
00:01:11,220 --> 00:01:21,330
Transitively through another non-prime attribute or another just another attribute not in that candidate.

16
00:01:21,660 --> 00:01:26,670
And here one thing we do need to remember about the mnemonic is that and nothing but the key here we're

17
00:01:26,670 --> 00:01:30,730
talking about one key but really we have to talk about every candidate.

18
00:01:30,960 --> 00:01:34,710
So let's go ahead and see how this works in practice.

19
00:01:34,710 --> 00:01:41,080
So now we have to remember that we have two tables so to check that the database conforms a third normal

20
00:01:41,080 --> 00:01:43,140
form you'd have to check both tables.

21
00:01:43,140 --> 00:01:45,160
And that's exactly what we want to do.

22
00:01:45,390 --> 00:01:57,740
So here I'm going to add a comment here check three N.F. and we're going to check the customers table

23
00:01:57,740 --> 00:02:03,750
first because it's easier Silex star from customers.

24
00:02:03,900 --> 00:02:09,260
Let's run that and there we go so there's our customers table.

25
00:02:09,460 --> 00:02:20,150
Let's see if all of the non-prime attributes are non-trans to be dependent on all on the candidate.

26
00:02:21,150 --> 00:02:26,700
All right so as we discussed we only have one candidate key here which is the customer ID and we already

27
00:02:26,700 --> 00:02:29,290
know that this table is second.

28
00:02:29,340 --> 00:02:33,010
Norm is in the second normal form.

29
00:02:33,420 --> 00:02:38,720
This is our only candidate key and we therefore this is our only prime attribute.

30
00:02:38,730 --> 00:02:41,350
And these are our non-prime attributes.

31
00:02:41,430 --> 00:02:49,680
So now we need to check that each of these non-prime attributes indeed depends on the customer ID field

32
00:02:49,680 --> 00:02:51,120
or the candidate.

33
00:02:51,160 --> 00:02:56,100
Here we followed a transitive dependencies across other fields.

34
00:02:56,100 --> 00:02:56,320
Right.

35
00:02:56,310 --> 00:02:57,890
So let's get started.

36
00:02:57,900 --> 00:03:03,340
First name does the first name depend on the customer ID directly or maybe through some other field.

37
00:03:03,510 --> 00:03:06,000
It depends on the customer ID direct.

38
00:03:06,000 --> 00:03:06,210
Right.

39
00:03:06,210 --> 00:03:13,680
So first name is not dependent on surname is dependent on state not depend on surname the surname depend

40
00:03:13,680 --> 00:03:14,900
directly on the customer.

41
00:03:15,600 --> 00:03:22,050
Correct so surname is independent of first name first name and surname are not tied up so a person can

42
00:03:22,050 --> 00:03:29,590
have any surname with any first name surname is not dependent on the state on the oil to discuss.

43
00:03:29,590 --> 00:03:31,610
So that's independent.

44
00:03:31,680 --> 00:03:37,740
A ship shipping shipping state is shipping state dependent on first name and the way to think about

45
00:03:37,740 --> 00:03:46,530
it is if if the first name can the first name change and the shipping state will the ship be said have

46
00:03:46,530 --> 00:03:49,780
to change as well so basically does the shipping change.

47
00:03:49,830 --> 00:03:51,770
Is there some sort of relationship between the two.

48
00:03:51,780 --> 00:03:55,840
No there actually isn't a person with any name can be in any state.

49
00:03:55,860 --> 00:03:58,940
Same thing for surname and same thing.

50
00:03:58,940 --> 00:04:01,550
The shipping state does not depend on the oil to discount.

51
00:04:01,650 --> 00:04:04,130
Basically it just depends on the customer ID.

52
00:04:04,190 --> 00:04:05,560
Finally a little to discount.

53
00:04:05,610 --> 00:04:07,020
Does it depend on the first name.

54
00:04:07,020 --> 00:04:07,780
Nope.

55
00:04:08,220 --> 00:04:13,470
A person with any name could have and your loyalty discount surname.

56
00:04:13,470 --> 00:04:15,520
Same thing with shipping state.

57
00:04:15,600 --> 00:04:21,810
It's a bit interesting because the answer is again no it doesn't depend because the loyalty discount

58
00:04:21,870 --> 00:04:28,920
is accumulated by a customer through their purchases through their history through a transaction through

59
00:04:28,920 --> 00:04:32,160
how long they've been purchasing through this online store and so on.

60
00:04:32,160 --> 00:04:34,020
So that's how they get the loyalty discount.

61
00:04:34,320 --> 00:04:40,950
But let's say in a different scenario if instead of loyalty discount you had a state wide discount.

62
00:04:40,950 --> 00:04:45,720
So for every different state there would be a different state the different discount that would be applied

63
00:04:45,750 --> 00:04:51,870
to all the purchases made by customers from that state for example the reason could be that states have

64
00:04:51,870 --> 00:05:00,420
different taxing schemes and therefore the store can offer customers different discounts because they

65
00:05:00,420 --> 00:05:06,540
have to pay they themselves have to pay different taxes different levels of taxes in different states

66
00:05:06,600 --> 00:05:08,460
something like that so there could be a reason for that.

67
00:05:08,460 --> 00:05:17,510
And if you had a situation like that where this was a statewide discount in that case the city the logic

68
00:05:17,510 --> 00:05:18,120
would be different.

69
00:05:18,120 --> 00:05:18,390
Right.

70
00:05:18,390 --> 00:05:23,190
In that case you would say yes the state where discount doesn't depend on a first name doesn't depend

71
00:05:23,190 --> 00:05:26,400
on surname but it does depend on state.

72
00:05:26,430 --> 00:05:31,780
So even though it's the state wide discount is a characteristic of the customer.

73
00:05:31,800 --> 00:05:32,040
Right.

74
00:05:32,040 --> 00:05:34,320
So it's a it's assigned to the customer.

75
00:05:34,320 --> 00:05:42,570
It's knowing you can for every customer I.D. You have a certain statewide discount but really it is

76
00:05:42,570 --> 00:05:49,530
trans. it would have been transitively dependent through the shipping State field because then you would

77
00:05:49,530 --> 00:05:51,050
you wouldn't be able to say that.

78
00:05:51,060 --> 00:05:57,370
OK so if Colorado has 8 percent statewide discount and can we if we change the state.

79
00:05:57,390 --> 00:06:01,630
Will the discounts change and normally we expect the answer to be.

80
00:06:02,000 --> 00:06:02,740
No that's it.

81
00:06:02,760 --> 00:06:06,540
These are independent and therefore if one of them changes this one doesn't have to change.

82
00:06:06,570 --> 00:06:13,860
But in that case if you change the state and you get a statewide discount then indeed the statewide

83
00:06:13,890 --> 00:06:18,050
discount would change as well and that would mean that's an example of the transit of dependency.

84
00:06:18,400 --> 00:06:23,790
And so in that case you would have to split out this them into a separate table and make sense right.

85
00:06:23,790 --> 00:06:27,870
So if you have a statewide wide discount you should have a table where you have all the 50 states of

86
00:06:27,870 --> 00:06:30,980
the US and the discounts applicable to those states.

87
00:06:30,990 --> 00:06:37,500
You shouldn't be replicating the state widescale 942 times for every single customer.

88
00:06:37,710 --> 00:06:41,550
That's kind of the essence of the third normal form why we're doing it.

89
00:06:41,580 --> 00:06:44,940
But in this case it's a bit it's all a much more trivial.

90
00:06:44,970 --> 00:06:49,380
We've got the customer idea and as we discussed because this is not a statewide it is just a loyalty

91
00:06:49,380 --> 00:06:55,750
discount on each one of these fields is dependent on the candidate.

92
00:06:56,060 --> 00:07:06,780
The long transitively so therefore this table is in third normal form so we can say three aneath confirmed.

93
00:07:06,800 --> 00:07:08,240
OK so that's good.

94
00:07:08,240 --> 00:07:10,470
We don't have to adjust this table.

95
00:07:10,550 --> 00:07:19,400
Now let's have a look at the other table that we have which is so Nexstar from transactions.

96
00:07:19,560 --> 00:07:22,410
All right let's check this table.

97
00:07:22,410 --> 00:07:25,370
This is the fun stuff OK.

98
00:07:26,570 --> 00:07:29,920
We're going to make some space.

99
00:07:30,020 --> 00:07:40,490
And by the way we've just had a very heated discussion about a heated monologue by Carol about the customers

100
00:07:40,490 --> 00:07:41,000
table.

101
00:07:41,150 --> 00:07:49,040
So if if you feel comfortable now after this theoretical tutorials and Officer what we how we analysed

102
00:07:49,040 --> 00:07:54,590
the customers table if you feel comfortable giving this a go on your own then I highly encourage you

103
00:07:54,590 --> 00:08:04,280
to pause this video right now and check if the transactions table if this table is does conform to the

104
00:08:04,280 --> 00:08:09,890
third normal form check if it does or not and make your conclusion on that and then just play the video

105
00:08:09,890 --> 00:08:16,610
again or you continue playing the video and see how I would see how I'm going to go about that logic

106
00:08:16,610 --> 00:08:19,540
and that there'll be some very good practice.

107
00:08:19,550 --> 00:08:21,930
So if you want to do that then post a video now.

108
00:08:21,950 --> 00:08:25,420
Otherwise we're going to continue analyzing this table.

109
00:08:25,430 --> 00:08:25,850
All right.

110
00:08:25,910 --> 00:08:31,640
So let's go we've got a transaction ID which we know is the candidate key in this table.

111
00:08:31,650 --> 00:08:37,650
We also know that we've got timestamp in seconds and customer id they are also candidate keys in this

112
00:08:37,650 --> 00:08:38,310
table.

113
00:08:38,580 --> 00:08:50,870
And then we've got item which is the item ID which basically is the code for the item that was purchased.

114
00:08:50,870 --> 00:08:58,050
The description of the item and the retail price of that item and so the customer we've already modified

115
00:08:58,050 --> 00:09:02,560
this table we remove the customer fields and now if we want to get information about the customer we

116
00:09:02,560 --> 00:09:08,320
just join join this table to the customers table based on this customer id field.

117
00:09:08,340 --> 00:09:13,610
So now the question is is are there any transitive dependencies in this table.

118
00:09:13,890 --> 00:09:18,870
And the way to think about it is first of all we have to find the non-prime attributes.

119
00:09:18,870 --> 00:09:23,730
Right so we know that these are our prime attributes because they are parts of at least one candidate

120
00:09:23,730 --> 00:09:24,080
key.

121
00:09:24,240 --> 00:09:31,820
And these are are known non-prime attributes because they are not parts of they're not part of any candidate.

122
00:09:32,340 --> 00:09:37,740
And the question we have to ask is for every single one of these non-prime attributes what we need to

123
00:09:37,740 --> 00:09:45,810
check is is it non-trans a doubly dependent on every candidate.

124
00:09:46,030 --> 00:09:46,290
Right.

125
00:09:46,300 --> 00:09:49,940
So let's go ahead and start start figuring this out.

126
00:09:50,140 --> 00:09:50,410
All right.

127
00:09:50,410 --> 00:10:01,650
So let's sort of item and sort of item and let's start with transaction ID so item the person somebody

128
00:10:01,650 --> 00:10:08,790
purchase an item with this code is it directly dependent on the transaction ID or is it dependent on

129
00:10:09,630 --> 00:10:18,640
the transaction ID through through some other field so it doesn't have to be just the non prime attributes

130
00:10:18,660 --> 00:10:19,250
it could be.

131
00:10:19,260 --> 00:10:21,960
Is it somehow dependent through these fields as well.

132
00:10:21,960 --> 00:10:27,710
Right so basically what we want to check is it directly dependent on this specific candidate.

133
00:10:28,020 --> 00:10:30,780
So item item code.

134
00:10:30,900 --> 00:10:34,980
So basically for this item if it could.

135
00:10:35,190 --> 00:10:37,120
Let's start with timestamp.

136
00:10:37,380 --> 00:10:41,790
In seconds could the timestamp and seconds change right if the Times happened check seconds changes.

137
00:10:41,970 --> 00:10:43,140
Does this item have to change.

138
00:10:43,140 --> 00:10:46,860
No it doesn't because this item could have been bought at any point in time.

139
00:10:46,890 --> 00:10:48,180
What if the customer ID changes.

140
00:10:48,200 --> 00:10:50,770
Does this item have to change this item number.

141
00:10:50,790 --> 00:10:57,300
No it doesn't because any customer ID could have bought any item if the description changes.

142
00:10:57,300 --> 00:11:00,640
Does the item have to change.

143
00:11:00,870 --> 00:11:08,340
This is a tricky one because indeed if the description changes right then the item probably will change

144
00:11:08,340 --> 00:11:09,890
because items have their description.

145
00:11:09,900 --> 00:11:12,150
But the question is here is like the chicken and egg question.

146
00:11:12,150 --> 00:11:13,560
Who who came first.

147
00:11:13,740 --> 00:11:19,280
Well we're going to assume that items is beef out of these two.

148
00:11:19,320 --> 00:11:19,590
Right.

149
00:11:19,630 --> 00:11:26,950
So item we're going to take item as the main call more of the more important call right.

150
00:11:26,970 --> 00:11:31,670
So basically we're not going to say that item is dependent on description we can say descriptions have

151
00:11:31,670 --> 00:11:32,190
been an item.

152
00:11:32,190 --> 00:11:36,740
So for us items does depend on the transaction ID in the case of these two.

153
00:11:36,900 --> 00:11:38,240
And for retail price same thing.

154
00:11:38,250 --> 00:11:43,550
So we're not going to say that items depend on the retail price items upon a transaction or retail prices

155
00:11:43,560 --> 00:11:48,880
depend on the item and it's just the way you think about it like it is logical right.

156
00:11:48,900 --> 00:11:57,550
That price is depend on item so item dictates the price and item the item code dictates the description.

157
00:11:57,630 --> 00:12:01,240
So that's that's the approach we're going to take here.

158
00:12:01,320 --> 00:12:07,290
There are some times like you could come across as attrition where it's a bit vague like say you could

159
00:12:07,290 --> 00:12:10,320
use description as the main out of these three.

160
00:12:10,320 --> 00:12:11,340
And you know stick with that.

161
00:12:11,340 --> 00:12:18,350
But in this case it's quite obvious that that item is the main one because it's a number it's a code

162
00:12:18,390 --> 00:12:23,520
and it's much easier to deal with codes as the foreign key in our case.

163
00:12:23,530 --> 00:12:24,140
Right.

164
00:12:24,240 --> 00:12:26,330
If Wolf what we're trying to achieve.

165
00:12:26,490 --> 00:12:31,640
So we're going to say that item is non transitively dependent on the transaction ID.

166
00:12:31,980 --> 00:12:38,340
It's a transaction id identifies item directly rather than through description or through each retail

167
00:12:38,340 --> 00:12:40,200
price which makes sense.

168
00:12:40,200 --> 00:12:42,160
Then we'll move on to description.

169
00:12:42,180 --> 00:12:42,520
Right.

170
00:12:42,530 --> 00:12:46,530
Or basically we have to check item we have to check the same thing for item.

171
00:12:46,530 --> 00:12:56,580
But with with this foreign key right so timestamp seconds on customer ID is that is item dependent on

172
00:12:56,580 --> 00:13:01,990
this forum on this candidate key is item depend on this kind of key direct.

173
00:13:02,010 --> 00:13:04,800
Right so or is it transitively dependent through transaction.

174
00:13:04,920 --> 00:13:12,000
Well actually no because once you know the time stamp seconds on customer ID you don't really need to

175
00:13:12,000 --> 00:13:16,350
know the transaction ID to understand what item was purchased at that point in time by that customer.

176
00:13:16,350 --> 00:13:19,000
Because it is this is a candidate.

177
00:13:19,390 --> 00:13:22,610
Then is item dependent on this kind of key through description.

178
00:13:22,620 --> 00:13:29,610
Same thing same discussion as we just had with the transaction ID situation so we're going to take item

179
00:13:29,700 --> 00:13:37,720
as the out of these three being the one that is independent or that is directly dependent on the candidate.

180
00:13:38,570 --> 00:13:40,500
Next we move onto the description.

181
00:13:40,530 --> 00:13:42,950
Right so here we've got a description.

182
00:13:42,950 --> 00:13:47,970
Question is is description directly dependent on this candidate.

183
00:13:48,090 --> 00:13:49,060
Transaction ID.

184
00:13:49,410 --> 00:13:55,930
Well the answer is no because description actually depends on item which depends on transaction ID.

185
00:13:56,170 --> 00:13:56,520
Right.

186
00:13:56,520 --> 00:14:03,900
So what that means is basically if we have pillowcase here what if the item number changes we'll pillowcase

187
00:14:03,930 --> 00:14:04,650
have to change.

188
00:14:04,700 --> 00:14:05,490
Yes indeed.

189
00:14:05,490 --> 00:14:10,260
Pillowcase will have to change because they are linked.

190
00:14:10,260 --> 00:14:17,710
There's a link between them this item dictates what the description is and therefore description.

191
00:14:17,800 --> 00:14:24,550
Even though the transaction ID indeed is associated or there is a certain description associated with

192
00:14:24,550 --> 00:14:29,450
the transaction ID or with this combination of these two calls because something was purchased.

193
00:14:29,470 --> 00:14:37,220
It has a description but in reality that description is transitive The dependent on this kind of the

194
00:14:37,250 --> 00:14:41,380
key is transmitted to depend on this candidate key as well through the item.

195
00:14:41,380 --> 00:14:42,600
Same thing for retail price.

196
00:14:42,610 --> 00:14:49,510
So retail price even though yes indeed this transaction has a retail price associated with it.

197
00:14:49,690 --> 00:14:54,100
This transaction happened by the same transaction but if you look at it through this candidate key.

198
00:14:54,250 --> 00:15:01,090
Yes indeed it has a retail price associated with it but this retail price is not directly doesn't directly

199
00:15:01,090 --> 00:15:04,620
come from this candid award.

200
00:15:04,720 --> 00:15:09,070
And as a matter for the matter as a matter of fact it is income very good for this candidate.

201
00:15:09,080 --> 00:15:14,830
Q Either it comes from the item and that's exactly what the third normal form is looking for it's looking

202
00:15:14,830 --> 00:15:19,570
for situations where you've got part of the table that needs to be separated out.

203
00:15:19,570 --> 00:15:26,020
So basically we see here that we need to take these three columns and put them into a separate table

204
00:15:26,530 --> 00:15:34,540
and then also just keep item in the stable and that'll be our way that we will look up information about

205
00:15:34,540 --> 00:15:35,590
the item if we need to.

206
00:15:35,590 --> 00:15:42,760
So basically if you just take your kind and you cover off this part these last two columns This is the

207
00:15:42,760 --> 00:15:48,310
final table that you should have in third normal form of transaction id timestamped seconds.

208
00:15:48,310 --> 00:15:56,340
Customer ID and item number are the item ID and that this information shouldn't be in the table because

209
00:15:56,340 --> 00:15:57,650
we're actually duplicating it right.

210
00:15:57,650 --> 00:16:05,640
So we're actually there's no point in us saving the item id the description and the retail price when

211
00:16:05,640 --> 00:16:08,380
we can have these in a separate lookup table.

212
00:16:08,640 --> 00:16:12,690
And then when we ever need that information we'll just join to it.

213
00:16:12,690 --> 00:16:20,940
So there we go that's how we think about the third normal form and how we check or investigate if a

214
00:16:20,940 --> 00:16:22,620
table is in third normal.

215
00:16:22,620 --> 00:16:27,780
For me it is a real investigation like it's I think it's valid to use the word investigation because

216
00:16:27,780 --> 00:16:34,110
it does take some time and does take some thinking but that is why there is a whole separate professional

217
00:16:34,230 --> 00:16:38,680
database architects or database engineers database designers.

218
00:16:38,690 --> 00:16:45,840
There's these professions exist for a reason because it requires a lot of mental power.

219
00:16:45,870 --> 00:16:51,990
It requires a lot of time and requires a lot of expertise and experience to design a good database.

220
00:16:52,020 --> 00:16:57,930
And what we're doing here is we're actually understanding the thinking process that goes into it and

221
00:16:57,930 --> 00:17:02,400
that will really help us when we are working with these databases.

222
00:17:02,400 --> 00:17:06,030
We will know what thinking went into it.

223
00:17:06,270 --> 00:17:14,250
So that's how we investigate in the next tutorial we'll learn how to modify this database to change

224
00:17:14,250 --> 00:17:18,030
the design to conform to the third normal form.

225
00:17:18,030 --> 00:17:19,770
And I look forward to seeing you then.

226
00:17:19,770 --> 00:17:21,570
Until next I'm happy analyzing.
