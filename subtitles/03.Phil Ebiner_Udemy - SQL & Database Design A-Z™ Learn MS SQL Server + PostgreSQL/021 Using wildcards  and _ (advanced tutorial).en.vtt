WEBVTT
1
00:00:00.360 --> 00:00:02.200
Hello and welcome to the chorus.

2
00:00:02.220 --> 00:00:06.590
And today we'll be discussing using wildcards in as well.

3
00:00:06.720 --> 00:00:13.710
NPG admin or opposed rescue specifically so wildcards are used you know to specify what exactly you

4
00:00:13.710 --> 00:00:18.750
want to look for in the column in the tables in the data.

5
00:00:18.780 --> 00:00:26.280
Most commonly they are used to specify what words or sentences or letters you want to find in the columns

6
00:00:26.310 --> 00:00:30.930
or like the data that consist of that or asked for example.

7
00:00:30.930 --> 00:00:36.870
So let's jump straight into practice so I don't waste your time with theory and you learn more by actually

8
00:00:36.870 --> 00:00:44.010
doing so as you can see FPGA and for opened up I have consumer complaints database loaded I have that

9
00:00:44.010 --> 00:00:48.510
table ready to go consumer complains that consist of eight and columns as always.

10
00:00:48.770 --> 00:00:51.380
Let's quickly select to create a new query.

11
00:00:51.780 --> 00:00:58.260
And in this query what we want to do is we want to select as always and what you want to do is we want

12
00:00:58.260 --> 00:01:05.280
to select product names that consists of credit so it can be credit card credit report credit error

13
00:01:06.270 --> 00:01:08.320
car credit whatever it is.

14
00:01:08.460 --> 00:01:11.290
It has to consist of a word credit.

15
00:01:11.310 --> 00:01:22.940
So let's go ahead and select all products from consumer complaints and then what we did before.

16
00:01:23.030 --> 00:01:31.590
If you remember with the state names we just throw that like this.

17
00:01:31.810 --> 00:01:39.640
But if we're on the square right now what we'll get is no results because there is no products that

18
00:01:39.640 --> 00:01:45.150
consist just of the word credit written in all lower case letters.

19
00:01:45.160 --> 00:01:55.660
So what we want to do when we use wild cards is to say product name like and then we put our rules.

20
00:01:55.690 --> 00:02:04.120
So we say that if the product name doesn't have to be specifically credit but it has to consist of the

21
00:02:04.120 --> 00:02:10.150
word credit so it has to satisfy this rule and in order to put that into the gray.

22
00:02:10.510 --> 00:02:11.650
This is how we write it.

23
00:02:11.800 --> 00:02:14.310
So we put our word that we're interested in.

24
00:02:14.320 --> 00:02:17.220
And then we surrounded with two percent sign.

25
00:02:17.500 --> 00:02:20.300
So now run it again we get nothing.

26
00:02:20.500 --> 00:02:26.770
And this is due to the fact that in this particular table as well as many others there is a writing

27
00:02:26.770 --> 00:02:27.550
syntax.

28
00:02:27.550 --> 00:02:35.590
So when you input data you would put the first name from capital letters so credit will be written more

29
00:02:35.590 --> 00:02:36.700
like this.

30
00:02:36.700 --> 00:02:43.770
So if we on this with capital C we'll get way more results because now it displays that you can see

31
00:02:43.780 --> 00:02:46.570
credit card credit reports.

32
00:02:46.780 --> 00:02:54.520
Mostly these to credit reports and credit cards values are represented to us but this is a big concern

33
00:02:54.550 --> 00:03:01.990
in the sense that what if we don't know if the see has to be capital or maybe t has to be capital or

34
00:03:01.990 --> 00:03:06.330
maybe somebody made a mistake and made our capital a set of C.

35
00:03:06.340 --> 00:03:12.330
So in order to solve this problem we have upper and lower statements.

36
00:03:12.340 --> 00:03:13.090
How does it work.

37
00:03:13.090 --> 00:03:14.530
Let me explain the real quick.

38
00:03:14.590 --> 00:03:20.680
Again we say here select product name from consumer complaints and then we say that where.

39
00:03:20.890 --> 00:03:29.480
And then we can put lower then we put product name or the column that we want to search for.

40
00:03:30.750 --> 00:03:36.180
We want the column that we want to follow the rules in brackets and then we say like and if we put lower

41
00:03:36.180 --> 00:03:42.150
here what do we have to do is we have to put this condition this rule all in lower leapers.

42
00:03:42.270 --> 00:03:49.560
So as you can see now displaced us again credit card credit reporting and even though these begin with

43
00:03:49.860 --> 00:03:54.230
capital C it still displays it us because we have the lower condition.

44
00:03:54.390 --> 00:04:02.530
So it works the opposite way if we put upper and then here we put up her letters as well.

45
00:04:02.630 --> 00:04:04.460
It will display to us the same results.

46
00:04:04.460 --> 00:04:11.720
So basically here this statement becomes case sensitive and this is quite important because a lot of

47
00:04:11.720 --> 00:04:18.320
the times working with database especially the initial work you do of it just understand like what general

48
00:04:18.320 --> 00:04:21.680
data you have in there or what this column consists of.

49
00:04:21.860 --> 00:04:26.240
You want to be case insensitive so you don't miss anything important.

50
00:04:26.240 --> 00:04:26.620
All right.

51
00:04:26.630 --> 00:04:33.560
So I think that was a pretty good example of how to use the light conditions and I'll go ahead and practice

52
00:04:33.560 --> 00:04:41.030
some more just so you get the hang of it because it is a very commonly used statements in a school.

53
00:04:41.090 --> 00:04:49.220
Next example is that we need to select all the companies that had the issues that consisted of the word

54
00:04:49.220 --> 00:04:49.790
late.

55
00:04:50.030 --> 00:04:56.240
So in order to do that what we do is we write the select statement that we go select company then we

56
00:04:56.240 --> 00:05:07.520
say from our table which is consumer complaints as always and then we have to say that where issue like

57
00:05:12.130 --> 00:05:21.980
so again if we're on this we'll get nothing but if we run I have slightly modified Querrey has the lower

58
00:05:21.980 --> 00:05:22.870
statement in it.

59
00:05:24.090 --> 00:05:25.370
Let's see what we get now.

60
00:05:25.710 --> 00:05:28.680
As you can see now we get much much more.

61
00:05:28.690 --> 00:05:33.690
So let's quickly display here issue so that you understand what's happening behind the screen so to

62
00:05:33.690 --> 00:05:38.800
say and as you can see the problem again was that the late had the Capitol out.

63
00:05:38.910 --> 00:05:47.100
So if we again remove the lower statement and run it like this you can see that.

64
00:05:47.340 --> 00:05:49.750
And just remove the whole condition.

65
00:05:49.830 --> 00:05:54.410
We can see that issues will have capital.

66
00:05:54.480 --> 00:06:02.630
Al in light in all the examples and this is again this is the way this table was filled but some tables

67
00:06:02.640 --> 00:06:09.550
maybe that company has a policy where they write all the data in lower letters so to avoid this confusion.

68
00:06:09.780 --> 00:06:13.890
But as you can see the issues here and you see Al will be all this capital.

69
00:06:13.890 --> 00:06:18.310
So the first line of that will be always Capitol Hill including the late.

70
00:06:18.510 --> 00:06:21.280
So now let's move on to our next example.

71
00:06:21.540 --> 00:06:27.870
In this example we will work with numbers so let's say we want to select all the companies and all these

72
00:06:27.870 --> 00:06:34.780
products that these companies produce where the zip code of the company starts with for the way we do

73
00:06:34.780 --> 00:06:44.660
it is we say select company then we say select product name then we say from then we'll say consumer

74
00:06:44.660 --> 00:06:56.270
complaints and then we identify that where the zip code like and here's an interesting fact if you could

75
00:06:56.270 --> 00:07:03.330
for and run it what we'll get is sorry that was my about.

76
00:07:03.420 --> 00:07:09.810
So if we put four and run it we will get nothing because the zip codes there knows it because the jobs

77
00:07:09.810 --> 00:07:11.220
are there for now.

78
00:07:11.220 --> 00:07:16.980
If you just run out and display all the zip codes you will understand that they consist of generally

79
00:07:17.100 --> 00:07:18.240
five numbers.

80
00:07:18.240 --> 00:07:24.900
So what we can do is we can use this syntax and this will return to us quite a lot of results.

81
00:07:24.900 --> 00:07:33.390
And as you can see if we just put the zip code here to display to you what's happening you will see

82
00:07:33.450 --> 00:07:40.590
that all of these zip codes start of four and all of them consist of five numbers together.

83
00:07:40.620 --> 00:07:45.320
So what that underscore does it states for one symbol.

84
00:07:45.330 --> 00:07:52.960
So here we say that the zip code consist of one two three four five five numbers.

85
00:07:52.980 --> 00:07:54.950
The first one has to be four.

86
00:07:55.140 --> 00:07:58.650
And the second third fourth and fifth can be anything.

87
00:07:58.650 --> 00:08:04.380
So just to show you how it works and say we want to display old zip codes were four is in the middle

88
00:08:04.680 --> 00:08:06.180
and this is the way we do it.

89
00:08:07.950 --> 00:08:10.270
So now as you can see four will be in the middle.

90
00:08:10.290 --> 00:08:17.250
But again we're only displaying the zip codes that have four in the middle of it and there's five numbers

91
00:08:17.250 --> 00:08:22.330
in the zip code because there are some zip because it consists of four numbers or even three numbers.

92
00:08:22.330 --> 00:08:26.100
You do not display the whole array of data here.

93
00:08:26.100 --> 00:08:27.360
Now you can see why.

94
00:08:27.410 --> 00:08:35.860
Underscores are used because if we just put the percent in this case what we will get is way way way

95
00:08:35.860 --> 00:08:40.040
more data because it will display twice.

96
00:08:40.510 --> 00:08:46.240
It will display to us all the results were for is on the first space on the fourth space on the second

97
00:08:46.240 --> 00:08:54.040
space third and fifth the underscores are used to specify which exact location you have to have the

98
00:08:54.040 --> 00:08:56.350
specific number or letter in.

99
00:08:56.710 --> 00:09:04.840
So our next example is to show all the zip codes that do not have number four or rather that did not

100
00:09:04.840 --> 00:09:05.890
start with.

101
00:09:05.890 --> 00:09:14.380
Number four we can display those with the zip code has to be not like.

102
00:09:14.750 --> 00:09:16.230
And then we put what we want to hear.

103
00:09:16.250 --> 00:09:24.380
In our case for now if we quickly run this what we'll get as company's products this companies produce

104
00:09:24.740 --> 00:09:31.760
and they'll do zip codes and you will see that none of the zip codes start with number four.

105
00:09:31.760 --> 00:09:35.690
So again it's taking it a bit to run because I'm working on this machine.

106
00:09:35.960 --> 00:09:38.900
But as you can see app it did work out.

107
00:09:38.930 --> 00:09:44.510
And if you scan for this you will never find the zip code starting before and again as you can see here

108
00:09:44.510 --> 00:09:48.260
is an example of zip code with only four numbers as well as here.

109
00:09:48.740 --> 00:09:56.350
OK so now let's say you want to display older results where the zip code does not have number four in

110
00:09:56.350 --> 00:09:57.320
it anywhere.

111
00:09:57.380 --> 00:10:03.490
This is done pretty easily because we always have to do is to add another percent sign on the right

112
00:10:03.500 --> 00:10:09.230
of four and this will say that it cannot be in any position first second third fourth or fifth.

113
00:10:09.650 --> 00:10:15.620
So this is basically all the combinations of wildcards you will use.

114
00:10:15.620 --> 00:10:24.220
So again we have like not like that percentage sign underscore wildcards are very useful.

115
00:10:24.250 --> 00:10:31.960
Don't forget the upper and lower conditions because they can save you a lot of time and a lot of mistakes.

116
00:10:32.050 --> 00:10:36.910
Apart from that this was a very fun lecture at least for me and I hope you enjoyed it too.

117
00:10:37.030 --> 00:10:39.160
And I will see you in the next one.
