WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.600
Our Hello World example is now setup.

00:00:03.600 --> 00:00:06.600
In this video, we're going to look at probably one of

00:00:06.600 --> 00:00:11.070
the most important concepts to understand when working with bootstrap.

00:00:11.070 --> 00:00:14.070
This is the bootstrap grid system.

00:00:14.070 --> 00:00:17.410
The grids basically, allows it to lay things out nice and

00:00:17.410 --> 00:00:21.365
easy and uses the CSS flex box under the hood.

00:00:21.365 --> 00:00:24.060
To begin, generally the first thing we need to

00:00:24.060 --> 00:00:27.930
do is to create a container for our contents.

00:00:27.930 --> 00:00:31.305
This is added as a CSS class of container.

00:00:31.305 --> 00:00:33.975
Let's head over to the project and first remove

00:00:33.975 --> 00:00:38.430
the h1 of hello world, which is just here.

00:00:38.430 --> 00:00:44.065
We can then add our div with the class of container so just create a div,

00:00:44.065 --> 00:00:46.005
just like we normally would.

00:00:46.005 --> 00:00:51.040
This time we can add a bootstrap class of container.

00:00:52.150 --> 00:00:55.460
Containers are required when working with

00:00:55.460 --> 00:00:59.915
the bootstrap grid system as they act as a wrapper for our content.

00:00:59.915 --> 00:01:05.755
Using them also allows us to send our content both horizontally and vertically too.

00:01:05.755 --> 00:01:08.945
Nested inside, we add a second div,

00:01:08.945 --> 00:01:12.630
and this one has a class of row.

00:01:12.820 --> 00:01:17.680
Inside the open inside the class of row.

00:01:17.680 --> 00:01:23.035
These rows act as a wrapper for laying out content by using columns.

00:01:23.035 --> 00:01:26.045
Bootstrap grid is 12 columns wide.

00:01:26.045 --> 00:01:31.205
This means, if we want two equal sections side-by-side in row,

00:01:31.205 --> 00:01:34.595
we could set both to be six columns wide each.

00:01:34.595 --> 00:01:36.785
If we wanted three sections,

00:01:36.785 --> 00:01:39.070
each would need to be four columns.

00:01:39.070 --> 00:01:42.855
Let's add our first div inside the row.

00:01:42.855 --> 00:01:46.900
This's going to have a class of col-md-4.

00:01:49.040 --> 00:01:56.550
Inside of here we can add some text with the p tags of one-third wide.

00:01:57.050 --> 00:02:00.135
Because the grid is 12 columns wide,

00:02:00.135 --> 00:02:05.210
we're taking up four parts here so this is one third of the width of the row.

00:02:05.210 --> 00:02:10.050
If we then copy this in and pasted it two more times.

00:02:10.790 --> 00:02:16.635
Also make sure this is indented properly, just like that.

00:02:16.635 --> 00:02:19.690
Now if we get that a saved and then refresh the browser,

00:02:19.690 --> 00:02:22.185
we'll get three sections on the screen,

00:02:22.185 --> 00:02:25.305
each with one-third of the width of the row.

00:02:25.305 --> 00:02:27.380
To see these grid sections better,

00:02:27.380 --> 00:02:32.590
we can add some background classes which are also provided by bootstrap.

00:02:32.590 --> 00:02:38.040
After col-md-4 we cannot bg success.

00:02:38.040 --> 00:02:40.935
This gives us a green color.

00:02:40.935 --> 00:02:44.515
The second one could be bg primary.

00:02:44.515 --> 00:02:47.005
This is for blue.

00:02:47.005 --> 00:02:54.265
The third one could be bg secondary and this is a gray color.

00:02:54.265 --> 00:02:59.105
This now shows us the effect of the container we added.

00:02:59.105 --> 00:03:01.550
The container is a fixed width.

00:03:01.550 --> 00:03:05.719
If we just stretched the browser wider or smaller,

00:03:05.719 --> 00:03:09.590
we see that the width changes with different break points.

00:03:09.590 --> 00:03:13.010
There is also a full width container available too.

00:03:13.010 --> 00:03:15.395
All we need to do is change container,

00:03:15.395 --> 00:03:17.950
to be container fluid.

00:03:17.950 --> 00:03:21.440
This will span the full width of the page.

00:03:21.440 --> 00:03:25.010
But I'm just going to stick to the container for now.

00:03:25.010 --> 00:03:29.755
We can also have multiple rows inside this container too.

00:03:29.755 --> 00:03:33.455
If we go back over to the class of col-md-4,

00:03:33.455 --> 00:03:37.520
this md stands for medium sized devices.

00:03:37.520 --> 00:03:40.490
You can control exactly how many columns

00:03:40.490 --> 00:03:44.050
wide we want the content for different screen roots.

00:03:44.050 --> 00:03:47.695
If we go back to the getbootstrap website,

00:03:47.695 --> 00:03:52.730
which is getboostrap.com, and then documentation.

00:03:52.730 --> 00:03:56.510
If we go down to the layout section on left-hand side.

00:03:56.510 --> 00:04:01.505
Then under here we have the option for the grid. Select this.

00:04:01.505 --> 00:04:04.585
If we scroll down to the table,

00:04:04.585 --> 00:04:06.945
which is just here,

00:04:06.945 --> 00:04:09.105
we see here we have a class prefix,

00:04:09.105 --> 00:04:13.844
and we've used col-md for medium sized devices.

00:04:13.844 --> 00:04:18.330
This table shows there's a size in which each class applies to.

00:04:18.330 --> 00:04:24.785
For example, small is 540 pixels and large 960.

00:04:24.785 --> 00:04:29.030
We can add as many of these prefixes as we want to.

00:04:29.030 --> 00:04:34.595
For example, we could have a layout 12 columns wide on small screens,

00:04:34.595 --> 00:04:36.890
and then change to be six columns wide on

00:04:36.890 --> 00:04:41.960
medium screens and then down to four columns on larger devices.

00:04:41.960 --> 00:04:45.125
We only have the medium prefix sets,

00:04:45.125 --> 00:04:49.280
which is 720 pixels and above.

00:04:49.280 --> 00:04:55.445
If we shrink the browser down to below 720 inside of our index page,

00:04:55.445 --> 00:04:59.945
the four column width no longer applies as we can see here.

00:04:59.945 --> 00:05:03.065
We can change this by adding col-sm.

00:05:03.065 --> 00:05:07.890
Rather than md change it to sm, refresh.

00:05:07.890 --> 00:05:11.200
This now applies to small screens.

00:05:11.200 --> 00:05:15.440
If we wanted this green and the blue section to be side-by-side,

00:05:15.440 --> 00:05:18.305
we would need to set this to be six parts each.

00:05:18.305 --> 00:05:21.610
We could go ahead and change it to col-sm-6.

00:05:21.610 --> 00:05:25.670
Then also our medium devices changes back to

00:05:25.670 --> 00:05:30.420
four and also for the second one, we're can add col-sm-6.

00:05:30.580 --> 00:05:33.455
Both of these first sections,

00:05:33.455 --> 00:05:35.960
both on smaller devices with six columns

00:05:35.960 --> 00:05:40.525
wide and then change with four columns wide on medium devices.

00:05:40.525 --> 00:05:44.040
If we save, refresh,

00:05:44.040 --> 00:05:46.290
these two sections are now six columns

00:05:46.290 --> 00:05:50.730
each and the gray section is the default 12 columns.

00:05:50.730 --> 00:05:54.994
If we make this wider to go above the medium devices,

00:05:54.994 --> 00:05:59.680
this again will change to four parts each because we've said that here.

00:05:59.680 --> 00:06:03.010
Let's now take a look at a different scenario.

00:06:03.010 --> 00:06:08.890
Imagine if we change both small divs to be four columns so,

00:06:08.890 --> 00:06:14.180
col-sm-4 and the same for this one too.

00:06:14.180 --> 00:06:18.300
This means we're not take up the full 12-column grid.

00:06:18.300 --> 00:06:22.005
We only specifying eight parts for smaller screens,

00:06:22.005 --> 00:06:26.455
which if we save and refresh and then go down to the small screen,

00:06:26.455 --> 00:06:29.695
this will now leave a space at the end of the row.

00:06:29.695 --> 00:06:34.345
For this case, we can move the content by adding an offset.

00:06:34.345 --> 00:06:39.770
We can add this offset on the left-hand side pushing these two into the middle.

00:06:39.980 --> 00:06:43.030
If we do offset-sm,

00:06:43.310 --> 00:06:46.790
again this will only apply on small devices.

00:06:46.790 --> 00:06:48.479
Then two columns.

00:06:48.479 --> 00:06:51.390
This will now push the row across by

00:06:51.390 --> 00:06:55.275
two columns leaving the green and blue section in the middle.

00:06:55.275 --> 00:06:57.340
If we stretch the browser,

00:06:57.340 --> 00:07:01.625
this will also apply to all sizes above two.

00:07:01.625 --> 00:07:03.954
Now on the medium devices,

00:07:03.954 --> 00:07:06.565
we still have these two column offset.

00:07:06.565 --> 00:07:09.520
This is easily resolved by setting the offset to be

00:07:09.520 --> 00:07:12.995
zero for whatever screen we want it to be removed.

00:07:12.995 --> 00:07:17.005
Let's try to remove it from the medium sized screens and above.

00:07:17.005 --> 00:07:19.610
Let's have the offset-md-0.

00:07:23.270 --> 00:07:29.330
This will make sure that the offset if removed on medium-sized devices and above.

00:07:29.330 --> 00:07:31.329
If we now refresh,

00:07:31.329 --> 00:07:34.689
the offset is now removed on a medium devices,

00:07:34.689 --> 00:07:39.365
both if we shrink this down it should still apply on a small screen.

00:07:39.365 --> 00:07:42.855
We can simplify things even further.

00:07:42.855 --> 00:07:47.110
If we just want all divs inside of a row to be equal,

00:07:47.110 --> 00:07:53.365
we can just specify col. Rather than having all these pluses here,

00:07:53.365 --> 00:07:57.820
if you want to keep things really simple just add col.

00:07:57.820 --> 00:08:03.925
Same for the second section and also the third,

00:08:03.925 --> 00:08:07.725
get that saved, reload.

00:08:07.725 --> 00:08:10.580
With this in place, all of our sections will take up

00:08:10.580 --> 00:08:14.485
an equal amount of space on all screen sizes.

00:08:14.485 --> 00:08:20.165
This is how we use columns with the bootstrap grid system to layout our items.

00:08:20.165 --> 00:08:22.640
Now we know more about the bootstrap grid.

00:08:22.640 --> 00:08:27.120
Let's now move on to adding some content to this project.
