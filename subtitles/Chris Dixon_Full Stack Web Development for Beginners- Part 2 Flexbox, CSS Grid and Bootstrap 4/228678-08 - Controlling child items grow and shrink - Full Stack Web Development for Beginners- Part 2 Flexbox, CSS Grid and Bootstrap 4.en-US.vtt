WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.590 --> 00:00:05.715
We're going to continue looking at how we can control this child items.

00:00:05.715 --> 00:00:10.485
More specifically, how they grow and shrink to the available space.

00:00:10.485 --> 00:00:12.330
To begin, I'm going to go down,

00:00:12.330 --> 00:00:16.590
and reduce our demonstration to be four products.

00:00:16.590 --> 00:00:19.705
We can also remove this order class.

00:00:19.705 --> 00:00:23.910
Then also the corresponding CSS just above.

00:00:26.420 --> 00:00:32.790
To do this, we can use a property called flex-grow and also flex-shrink.

00:00:32.790 --> 00:00:36.075
Let's begin by taking a look at flex-grow.

00:00:36.075 --> 00:00:41.060
This will determine how an item can grow along the main axis.

00:00:41.060 --> 00:00:46.265
At the moments item size is controlled by the amount of content in the middle,

00:00:46.265 --> 00:00:48.295
and also any padding.

00:00:48.295 --> 00:00:51.725
Currently they don't take up the full width of the screen,

00:00:51.725 --> 00:00:54.470
which you can see over in the browser.

00:00:54.470 --> 00:01:00.385
If we go ahead and add flex-grow to one of these items as an inline style,

00:01:00.385 --> 00:01:02.585
of course it doesn't have to be in line.

00:01:02.585 --> 00:01:05.540
It can also be included in the CSS2.

00:01:05.540 --> 00:01:08.660
Let's add the flex-grow,

00:01:08.660 --> 00:01:12.180
and set this to a value of one.

00:01:12.680 --> 00:01:19.255
Save. Then our first item takes up a lot more space than the remaining three.

00:01:19.255 --> 00:01:22.230
Basically, these three items here, number two,

00:01:22.230 --> 00:01:26.870
three and four, will always stay the same size depending on the content inside.

00:01:26.870 --> 00:01:29.135
Then the one would flex-grow,

00:01:29.135 --> 00:01:31.085
will take up the additional space.

00:01:31.085 --> 00:01:33.515
If we do the same for item two,

00:01:33.515 --> 00:01:36.180
if we copy this flex-grow,

00:01:36.880 --> 00:01:39.620
then let's see what this does.

00:01:39.620 --> 00:01:41.885
Items three and four,

00:01:41.885 --> 00:01:43.700
both still take up the same space,

00:01:43.700 --> 00:01:45.085
they always have done.

00:01:45.085 --> 00:01:49.715
Then the remaining space is shared equally between items one and two.

00:01:49.715 --> 00:01:53.620
Because both have an equal flex-grow value of 1.

00:01:53.620 --> 00:01:57.335
If we go ahead and add this to all the items.

00:01:57.335 --> 00:02:01.250
Item 3 and item 4 too,

00:02:01.250 --> 00:02:06.190
we now see the all four items share the same amount of space.

00:02:06.190 --> 00:02:08.655
This flex-grow value of one,

00:02:08.655 --> 00:02:11.435
is not any particular unit of measurement,

00:02:11.435 --> 00:02:18.860
such as a pixel or an m. It is significant when compared to the rest of these values.

00:02:18.860 --> 00:02:22.490
The difference happens when they are not all the same.

00:02:22.490 --> 00:02:24.575
If we make Item 3,

00:02:24.575 --> 00:02:29.325
a flex-grow value of two, of to the browser,

00:02:29.325 --> 00:02:31.985
and now item 3 will try to take up

00:02:31.985 --> 00:02:36.155
twice the amount of space as the rest if it's available,

00:02:36.155 --> 00:02:39.290
It's changes to be three.

00:02:39.290 --> 00:02:41.600
Now should be even wider.

00:02:41.600 --> 00:02:47.525
While this flex-grow property deals with how items will grow across this main axis,

00:02:47.525 --> 00:02:49.475
if the space is available.

00:02:49.475 --> 00:02:52.790
We also have flex-shrink to.

00:02:52.790 --> 00:02:58.535
This deals with how items should shrink if there is not enough space for them to fit.

00:02:58.535 --> 00:03:03.070
First, let's remove the rap by commenting out the flex-flow,

00:03:03.070 --> 00:03:05.850
which is this line here.

00:03:05.850 --> 00:03:07.995
Command and forward slash.

00:03:07.995 --> 00:03:10.150
If using Visual Studio Code,

00:03:10.150 --> 00:03:15.530
then we can add a fixed width of 600 pixels for the container.

00:03:15.530 --> 00:03:18.140
Let's add this down at the bottom.

00:03:18.140 --> 00:03:21.640
Width of 600 pixels.

00:03:21.640 --> 00:03:24.620
Then we can make sure that these items don't fit in

00:03:24.620 --> 00:03:27.890
its container by setting them to be a width,

00:03:27.890 --> 00:03:31.620
let's say 160 pixels.

00:03:32.360 --> 00:03:38.150
So we could do it like this and set the width for the item to be 160 pixels.

00:03:38.150 --> 00:03:39.890
This is one way to do it,

00:03:39.890 --> 00:03:42.680
or we could use a new flex-box property,

00:03:42.680 --> 00:03:45.540
which is called flex-basis.

00:03:45.650 --> 00:03:48.690
Let's change this to be flex-basis spaces,

00:03:48.690 --> 00:03:51.210
and still 160 pixels.

00:03:51.210 --> 00:03:55.520
This flex basis defines a default size of an elements,

00:03:55.520 --> 00:03:58.505
before any remaining space is distributed.

00:03:58.505 --> 00:04:02.975
Here, the four items are too wide to fit into the container.

00:04:02.975 --> 00:04:05.755
This is where flex-shrink comes in.

00:04:05.755 --> 00:04:10.685
Flex-shrink will determine which items will shrink to fit the available space.

00:04:10.685 --> 00:04:16.655
Let's go down and change flex grown to be flex-shrink this time.

00:04:16.655 --> 00:04:20.365
I'll changes for all four items.

00:04:20.365 --> 00:04:26.585
Let's set the last two to be a value of 2. Then refresh.

00:04:26.585 --> 00:04:30.515
We now see the items 3 and 4 have shrunk.

00:04:30.515 --> 00:04:34.505
Since a higher value compared to items 1 and 2.

00:04:34.505 --> 00:04:36.140
If we go over an increase,

00:04:36.140 --> 00:04:38.760
one of these items to be three instead.

00:04:39.010 --> 00:04:43.130
This will cause the item to shrink the most when there is

00:04:43.130 --> 00:04:46.700
not enough space for them all to fit in a container.

00:04:46.700 --> 00:04:51.985
In this video, we've looked at flex-grow, flex-shrink and flex-basis.

00:04:51.985 --> 00:04:58.380
These three properties can be combined into the flex shorthand like this.

00:04:58.450 --> 00:05:01.464
Up to the item,

00:05:01.464 --> 00:05:07.155
we can comment out this flex basis and then replace it with flex.

00:05:07.155 --> 00:05:11.385
If we were to add zero,one and then auto.

00:05:11.385 --> 00:05:14.040
These are the default settings.

00:05:14.040 --> 00:05:16.875
Zero to begin with is a flex-grow.

00:05:16.875 --> 00:05:18.685
One is for all flex-shrink,

00:05:18.685 --> 00:05:23.275
and then auto is for the flag spaces which you added just above here.

00:05:23.275 --> 00:05:27.810
If we save that, and then see how it looks over in the browser,

00:05:27.810 --> 00:05:31.280
this is how we would look with the defaults.

00:05:31.280 --> 00:05:35.015
We have this fixed width of 600 pixels for the container.

00:05:35.015 --> 00:05:36.980
Then our four equal items,

00:05:36.980 --> 00:05:40.085
because they're all set to the value of zero.

00:05:40.085 --> 00:05:43.535
We can play around with these values just like before too.

00:05:43.535 --> 00:05:48.740
For example, if we would set all items have a flex-grow value of one,

00:05:48.740 --> 00:05:51.755
so one and one,

00:05:51.755 --> 00:05:53.500
then over to the browser.

00:05:53.500 --> 00:05:58.295
They will each now take up the available space equally in a container.

00:05:58.295 --> 00:06:02.330
This flex property is a lot easier and cleaner,

00:06:02.330 --> 00:06:05.530
than right now these three properties separately.

00:06:05.530 --> 00:06:09.095
We now done with looking at how items grow and shrink.

00:06:09.095 --> 00:06:15.270
Next up, we'll finish off looking at the flex-box by learning about a line self.
