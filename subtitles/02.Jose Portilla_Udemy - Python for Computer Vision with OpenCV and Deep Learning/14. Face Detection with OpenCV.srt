1
00:00:05,320 --> 00:00:09,820
Welcome back and this lecture actually going to implement the theory and ideas we talked about in the

2
00:00:09,820 --> 00:00:14,650
previous lecture concerning face detection and we'll show you how to implement them with open C and

3
00:00:14,650 --> 00:00:15,580
Python.

4
00:00:15,580 --> 00:00:16,460
Let's get started.

5
00:00:16,690 --> 00:00:18,670
OK here I am at the Jupiter notebook.

6
00:00:18,670 --> 00:00:21,740
Go ahead and do the imports of to imply that plotless.

7
00:00:21,790 --> 00:00:26,560
If you haven't done so already and we're going to do is upload a couple of images that I've downloaded

8
00:00:26,560 --> 00:00:32,260
for you in the data folder and two of the images are just images of some Nobel Peace Prize winners.

9
00:00:32,290 --> 00:00:34,550
So we have Dennis here and Nadia.

10
00:00:34,570 --> 00:00:37,710
Those are the latest Nobel Peace Prize winners from this filming.

11
00:00:37,990 --> 00:00:43,850
And keep in mind that one of these images specifically that Dennis image this is a more artistic portrait.

12
00:00:43,870 --> 00:00:45,680
So it is a photograph of him.

13
00:00:45,690 --> 00:00:50,470
You can see that he has kind of a glow around his face and it looks like the corners are darker than

14
00:00:50,500 --> 00:00:55,930
they would naturally be and that's because some sort of photographer has edited this image and it's

15
00:00:55,930 --> 00:00:57,060
a really great photo of him.

16
00:00:57,180 --> 00:01:02,680
But you see that sort of editing will actually cause some issues later on when we try to detect his

17
00:01:02,740 --> 00:01:03,290
eyes.

18
00:01:03,400 --> 00:01:06,150
Well I have no problem that technique face it's a great photo for that.

19
00:01:06,280 --> 00:01:11,560
His eyes will give us a little bit of trouble because of how dark the whiteness around his eyes is due

20
00:01:11,560 --> 00:01:13,240
to the editing in this photograph.

21
00:01:14,150 --> 00:01:17,940
For Nadia's photo this is just a natural photo of her so this will work out nicely.

22
00:01:18,190 --> 00:01:20,980
And then we'll also detect a group face photo.

23
00:01:20,980 --> 00:01:25,120
We actually won't be using this specific image but we will be using an image from the famous Solvay

24
00:01:25,120 --> 00:01:27,270
Conference which was in 1912.

25
00:01:27,490 --> 00:01:32,280
And this is actually a really famous conference will be using this photo right here of all these photos

26
00:01:32,290 --> 00:01:33,590
here are all the faces here.

27
00:01:33,600 --> 00:01:37,110
And you notice some of them aren't exactly looking directly at camera but we'll still be able to detect

28
00:01:37,110 --> 00:01:37,920
those.

29
00:01:37,930 --> 00:01:39,310
So let's get started.

30
00:01:39,320 --> 00:01:43,480
We're going upload all those images and we're going upload them in greyscale.

31
00:01:43,750 --> 00:01:47,870
So I'll say it not physical to to read data.

32
00:01:47,890 --> 00:01:48,970
Forward slash.

33
00:01:48,970 --> 00:01:54,730
And if you just start typing capital and you should see that appear and the person is zero there and

34
00:01:54,730 --> 00:02:04,600
then Dennis will also applaud him and say CB2 image read data then we'll pass and then it's also grayscale

35
00:02:04,780 --> 00:02:11,860
and then finally the Solvay Conference photo will say CB2 image read inside the data folder.

36
00:02:11,860 --> 00:02:16,070
There should be Solvay Conference but JPEG and upload that.

37
00:02:16,090 --> 00:02:18,880
So let's take a quick look at each of these images.

38
00:02:19,270 --> 00:02:20,480
So this is Nadia.

39
00:02:20,620 --> 00:02:24,600
And let's make that see map grayscale.

40
00:02:24,890 --> 00:02:25,450
There we go.

41
00:02:25,520 --> 00:02:29,520
So that's not the image Here's the image.

42
00:02:29,760 --> 00:02:35,100
And then here is the Solvay image.

43
00:02:35,130 --> 00:02:36,000
All right.

44
00:02:36,240 --> 00:02:43,470
So what we need to do is we first need to actually create the classifier and pass in the ex-MIL classifier.

45
00:02:43,680 --> 00:02:48,810
Luckily open Seabee comes with these pre-trained cascade files and we've relocated the ex-MIL files

46
00:02:48,810 --> 00:02:50,730
for you in your own data folder.

47
00:02:50,730 --> 00:02:56,790
So in the same data folder if you take a look at it by expanding here into data we have these two cascade

48
00:02:56,790 --> 00:02:58,770
folders underneath our Cascades.

49
00:02:58,770 --> 00:03:03,390
We actually have quite a bit of our cascade files that you can play around with Later on we'll be using

50
00:03:03,390 --> 00:03:05,700
this license one for your project.

51
00:03:05,760 --> 00:03:14,970
So the first step is to once you have that pre-trained SML file you call CB2 cascade classifier and

52
00:03:14,970 --> 00:03:22,050
then we're going to call data in the Cascades folder and the one we're going to be using is Haar cascade

53
00:03:22,380 --> 00:03:24,720
and it's called frontal face default.

54
00:03:25,140 --> 00:03:30,300
So in those hours once for like I frontal cut face lots of importance of fear and then the one we're

55
00:03:30,300 --> 00:03:33,250
looking for is frontal face underscore default.

56
00:03:33,330 --> 00:03:34,350
Ex-MIL.

57
00:03:34,800 --> 00:03:39,630
So we just need to pass that in and then we need actually assign it to an object so we're going to say

58
00:03:40,140 --> 00:03:44,850
face cascade is equal to this cascade classifier.

59
00:03:45,030 --> 00:03:51,060
And this is essentially a list of around 6000 classifiers essentially features that are going to be

60
00:03:51,060 --> 00:03:54,940
passed through the image to see if it fits all those features.

61
00:03:54,990 --> 00:03:58,860
And that would be an indication that there should be a face there.

62
00:03:58,950 --> 00:04:03,120
Let's create a quick function to actually functionally is the way this face cascade works.

63
00:04:03,180 --> 00:04:06,270
And then we can actually then draw a rectangle.

64
00:04:06,270 --> 00:04:15,580
So I'll say if the text underscore face pass in the image and then we will save face image is equal

65
00:04:15,580 --> 00:04:19,100
to a copy of the image.

66
00:04:19,270 --> 00:04:26,890
And what happens is when you actually call face cascade there's a Detect multis scale method on it and

67
00:04:26,890 --> 00:04:33,850
then you just passen the face image that you want to try to detect a Faizon and this will return back

68
00:04:34,270 --> 00:04:34,780
in object.

69
00:04:34,770 --> 00:04:37,720
They can then use for drawing rectangles.

70
00:04:37,720 --> 00:04:41,910
So will say face Rex or face rectangles whatever you want to call it.

71
00:04:42,040 --> 00:04:47,240
And this is essentially just the x and y position plus the width and height of the rectangle.

72
00:04:47,620 --> 00:04:57,390
So we say for x y w h so for the X and Y of the top left corner plus the width and height in face rectangles

73
00:04:57,640 --> 00:04:58,090
go ahead.

74
00:04:58,120 --> 00:05:07,730
And then just create this rectangle so I'll say CB2 that rectangle pasand the face image passen the

75
00:05:07,730 --> 00:05:16,100
left point's top left is X and Y and then the bottom right is going to be X plus the with that Y plus

76
00:05:16,100 --> 00:05:17,680
the height.

77
00:05:17,720 --> 00:05:22,690
And since we're dealing with grayscale we're just going to make the actual rectangle white.

78
00:05:22,700 --> 00:05:25,400
So Turner 55 for all those color channels.

79
00:05:25,400 --> 00:05:28,620
Or you could just pasand 255 so it's not with really color shells.

80
00:05:28,730 --> 00:05:35,490
There give a thickness of 10 and then we're going to return the updated face image.

81
00:05:35,490 --> 00:05:37,640
So you should be able to just write in 255 here.

82
00:05:37,650 --> 00:05:39,870
Don't worry about those color channels.

83
00:05:39,870 --> 00:05:43,860
So we have the tech face and then let's go ahead and check out the result.

84
00:05:43,890 --> 00:05:54,500
So let's run the text face on Dennis and then peel t show that results with a gray mapping and here

85
00:05:54,500 --> 00:05:56,930
we were able to successfully detect his face.

86
00:05:56,930 --> 00:05:57,940
So let's run this again.

87
00:05:57,970 --> 00:06:04,030
Will run it with Nadia run that and then we get to see his face.

88
00:06:04,220 --> 00:06:07,580
Now let's try running this on the Solvay Conference.

89
00:06:07,630 --> 00:06:09,880
So the soulÃ© conference remember has multiple faces.

90
00:06:09,880 --> 00:06:15,100
In fact has a lot of them and some of them are even looking directly at the camera.

91
00:06:15,150 --> 00:06:21,140
So we're going to try saying the techs face so they and then view that result.

92
00:06:21,170 --> 00:06:25,400
So you notice right off the bat that some of these things that it's detecting aren't faces.

93
00:06:25,400 --> 00:06:29,930
And actually this may be a gargoyle or something on that building so that may be wrong but we can see

94
00:06:29,930 --> 00:06:31,770
you're also detecting double faces.

95
00:06:31,790 --> 00:06:37,730
So what we're going to do is we're going to add a few parameters specifically scale factor and minimum

96
00:06:37,730 --> 00:06:38,590
neighbors.

97
00:06:38,930 --> 00:06:49,480
Let me copy and paste this detects face function and then we're going to do is call this adjusted underscored

98
00:06:49,480 --> 00:06:53,860
the text face and we're going to add in a few parameters to detect multi-skilled.

99
00:06:53,940 --> 00:06:59,500
And if you shift tab here you can see that we have this scale factor and this minimum neighbors that

100
00:06:59,500 --> 00:07:05,530
we can end up adjusting the scale factor is a parameter specifying how much the image size is reduced

101
00:07:05,860 --> 00:07:11,380
each image scale and then the neighbors is the parameter specifying how many neighbors each candidate

102
00:07:11,410 --> 00:07:13,470
rectangle should have to retain it.

103
00:07:13,480 --> 00:07:20,320
So what happens is as you actually perform some of these classifiers you'll end up having multiple rectangles

104
00:07:20,320 --> 00:07:27,400
detecting a face and if multiple rectangles are near the same area or have a minimum number of neighbors

105
00:07:27,700 --> 00:07:30,170
then we decide that is where the face is.

106
00:07:30,550 --> 00:07:33,410
So we can go ahead and play of some of these parameters.

107
00:07:33,410 --> 00:07:38,670
I only use couple of defaults that worked well for me but a lot of times is just experimentation.

108
00:07:38,770 --> 00:07:51,730
We're going to say the scale factor here is equal to 1.2 and that the minimum neighbors is equal to

109
00:07:51,740 --> 00:07:57,130
5 and then we're going to run the adjusted phase.

110
00:07:57,170 --> 00:08:04,880
So we'll say results is equal to adjusted Tech's face on the Solvay image and we'll see the results

111
00:08:04,880 --> 00:08:06,830
of this survey results.

112
00:08:06,860 --> 00:08:09,380
See map is equal to grey.

113
00:08:09,860 --> 00:08:15,250
And when you run this you see now you get a much better and clear the section of the actual faces.

114
00:08:15,260 --> 00:08:20,360
The only caveat being that now this person that was looking sideways you're no longer able to detect

115
00:08:20,360 --> 00:08:21,050
his face.

116
00:08:21,050 --> 00:08:24,920
So it's kind of a tradeoff it's a tradeoff between detecting too many faces.

117
00:08:24,920 --> 00:08:31,220
So this little thing right here and then detecting a face twice over this man or missing out on some

118
00:08:31,220 --> 00:08:35,990
faces that aren't looking directly at the camera and you can begin to adjust the scale factors and minimum

119
00:08:35,990 --> 00:08:39,290
neighbors to see if you can find a better balance between the two.

120
00:08:39,290 --> 00:08:43,220
Just keep in mind we have an image with lots of faces and people looking at different directions.

121
00:08:43,220 --> 00:08:49,010
Some SML file that's specifically made for frontal face may not work very well.

122
00:08:49,010 --> 00:08:51,070
Now check out the cascade file.

123
00:08:51,410 --> 00:09:02,100
So I'll say I cascade is equal to CB2 call cascade classifier again and inside the data folder on the

124
00:09:02,190 --> 00:09:07,080
haar Cascades we're going to look for Haar cascade underscore I.

125
00:09:07,790 --> 00:09:15,510
And then in a really similar fashion I'm just going to copy and paste the original the text face function

126
00:09:16,180 --> 00:09:23,020
except for then call it the text I's so say the text ice and everything else can be the same except

127
00:09:23,020 --> 00:09:27,110
to say this is sort of face rectangles these are rectangles now.

128
00:09:27,450 --> 00:09:35,150
And then instead of calling a face cascade we will call the cascade and then change this to eyes rectangles

129
00:09:35,330 --> 00:09:36,690
everything else pretty much the same.

130
00:09:36,830 --> 00:09:41,750
What's going to happen is this is actually going to return to rectangles if it finds a set of eyes and

131
00:09:41,750 --> 00:09:51,290
then we're going to run that and check the results on the eyes and we'll first do it on Natya and show

132
00:09:51,290 --> 00:10:00,590
the results to show results c map is equal to great run that and we were able to detect the eyes but

133
00:10:00,590 --> 00:10:04,760
notice it actually detected her nostril as well thinking it wasn't I.

134
00:10:04,790 --> 00:10:11,390
So you may have to also then adjust this multi-skilled the same way we adjust it here for scale factors

135
00:10:11,420 --> 00:10:12,570
and Midan neighbors.

136
00:10:12,590 --> 00:10:17,380
So you could do is just even try copy and pasting this and see if that helps.

137
00:10:17,420 --> 00:10:22,490
So you can try copy and paste scale factors and neighbors run that in lotus that will actually then

138
00:10:22,490 --> 00:10:24,560
clean up the nostrils it found.

139
00:10:24,560 --> 00:10:28,910
So it could have thought maybe has another set of eyes somewhere in the image maybe you thought there

140
00:10:28,910 --> 00:10:35,060
was two people but these actually aren't sophisticated enough to return back only pairs of eyes because

141
00:10:35,060 --> 00:10:37,010
maybe someone's winking or something.

142
00:10:37,010 --> 00:10:37,360
OK.

143
00:10:37,580 --> 00:10:39,440
So we're able to fix that issue.

144
00:10:39,680 --> 00:10:43,720
But now let's take a look at what happens when we search Denis's face for eyes.

145
00:10:43,940 --> 00:10:52,460
We'll see the result is equal to detect eyes on Dennis and then enjoyed won't say appeal to show results.

146
00:10:52,460 --> 00:10:55,400
See map is equal to grey.

147
00:10:55,570 --> 00:11:02,410
And what happens is if we spell that right result you don't get any rectangles around that his eyes

148
00:11:02,860 --> 00:11:07,210
and that's because if we look at the original photograph here where I got this from.

149
00:11:07,510 --> 00:11:11,100
You'll notice that the whites of his eyes are actually really dark.

150
00:11:11,110 --> 00:11:16,630
In fact they're almost the same color as some parts of his skin and some parts of his skin because of

151
00:11:16,630 --> 00:11:19,680
the editing that the photographer did on this photo.

152
00:11:19,690 --> 00:11:25,950
They're actually lighter than the whites of his eyes versus if we look at Natya the whites of her eyes

153
00:11:25,980 --> 00:11:28,590
are really quite distinct from the rest of her face.

154
00:11:28,620 --> 00:11:32,150
And that's one of the main features that this cascade is looking for.

155
00:11:32,160 --> 00:11:38,070
So we would have to find in an edited photo of Dennis here in order to actually detect his eyes correctly

156
00:11:38,490 --> 00:11:41,760
and this is kind of a particular photo that it won't work with.

157
00:11:41,910 --> 00:11:46,530
And it's really just because of the editing done on this photo due to some contrast and they add a little

158
00:11:46,530 --> 00:11:52,890
bit of that here to make it look a little darker tinted his eyes color and you cannot see his pupils

159
00:11:52,890 --> 00:11:55,750
are actually quite large as well here they they're dilated in this photo.

160
00:11:55,920 --> 00:12:01,620
So lots of stuff going on here that caused us to not detect his eyes even though as humans we can clearly

161
00:12:01,620 --> 00:12:03,060
see where his eyes are.

162
00:12:03,270 --> 00:12:08,330
So that's one of the tricks of working with these sort of cascade files.

163
00:12:08,340 --> 00:12:11,990
Now you're probably wondering how can you actually do this with video.

164
00:12:12,150 --> 00:12:13,990
Well video it's pretty straightforward.

165
00:12:14,010 --> 00:12:19,980
All we need to do is start capturing video with CB2 video capture.

166
00:12:20,550 --> 00:12:25,830
And I'm going to capture this straight from a camera so we'll say video capture zero and then we're

167
00:12:25,830 --> 00:12:28,020
going to do is say while true

168
00:12:31,490 --> 00:12:36,330
say RTT and frame is equal to cap.

169
00:12:36,390 --> 00:12:37,870
Read zero.

170
00:12:39,830 --> 00:12:42,180
And then say frame is equal to.

171
00:12:42,410 --> 00:12:46,150
And we're just going to run detect face on the frame.

172
00:12:46,160 --> 00:12:51,660
So essentially anything you do on a single image you can do on a single frame.

173
00:12:52,120 --> 00:13:02,550
And then we will say CB2 image show video face detects and then we'll show that frame and I will make

174
00:13:02,560 --> 00:13:08,070
awake here and say see is equal to to what key one.

175
00:13:08,130 --> 00:13:14,740
And then if you actually make this k if K is equal to 27.

176
00:13:14,850 --> 00:13:16,270
Go ahead and break.

177
00:13:16,290 --> 00:13:22,670
So if I hit break excuse me if I hit escape the stop recording then as always you want to release the

178
00:13:22,670 --> 00:13:27,600
camera and then say we to destroy all when those.

179
00:13:27,630 --> 00:13:29,170
So let's run this.

180
00:13:29,520 --> 00:13:32,430
And let me bring up the actual streaming.

181
00:13:32,430 --> 00:13:38,280
So there I am and now I'm going to look basically more directly into the camera and you can see that

182
00:13:38,310 --> 00:13:43,120
it's able to find me if I pick up the camera here and I'm going to put my hand above.

183
00:13:43,200 --> 00:13:46,000
You can see it's not now no longer working that well.

184
00:13:46,020 --> 00:13:51,060
In fact it thinks my hand is a face and maybe if I can trick it.

185
00:13:51,160 --> 00:13:56,190
Now that didn't work but if I clearly look at the camera if I'm looking frontal face it should have

186
00:13:56,190 --> 00:13:59,460
no problem even if I move my face detecting it.

187
00:13:59,460 --> 00:14:04,590
So that's really what's designed to do society just quickly have a facial recognition for someone looking

188
00:14:04,590 --> 00:14:08,650
more or less probably within like 45 degrees of frontal.

189
00:14:08,820 --> 00:14:12,130
Now if I start going too much this time you'll notice that it no longer finds me.

190
00:14:12,310 --> 00:14:18,490
OK so that's it for object detection with Cascade files.

191
00:14:18,530 --> 00:14:23,590
We're going to do is expand on this and actually have you perform a project that uses a prebuilt cascade

192
00:14:23,590 --> 00:14:27,530
file in order to blur license's.

193
00:14:27,760 --> 00:14:30,650
Okay thanks and we'll see you at the next lecture.
