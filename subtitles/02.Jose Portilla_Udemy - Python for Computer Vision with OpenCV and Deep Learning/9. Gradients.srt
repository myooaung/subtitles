1
00:00:05,260 --> 00:00:08,470
Welcome back in this lecture we're going to discuss gradients.

2
00:00:08,650 --> 00:00:13,960
Gradients is an extension of the morphological operators that we talked about in the previous lectures.

3
00:00:14,170 --> 00:00:18,850
Understanding gradients will eventually lead us to understanding edge detection which allows us to perform

4
00:00:18,850 --> 00:00:24,700
operations such as object detection object tracking and eventually even image classification.

5
00:00:24,700 --> 00:00:27,690
Let's get started an image gradient.

6
00:00:27,690 --> 00:00:32,930
Formally speaking is just a directional change in the intensity or color of an image.

7
00:00:32,940 --> 00:00:38,130
So here we can see two examples on the left hand side we have the outsides as white and then the actual

8
00:00:38,130 --> 00:00:42,990
intensity or color is changing as you go further black towards the middle.

9
00:00:43,020 --> 00:00:48,470
Same situation or similar situation in the picture on the right you have on the right hand side there

10
00:00:48,480 --> 00:00:53,910
it's pure white and then eventually the gradient is a directional change to black as it goes towards

11
00:00:53,910 --> 00:00:54,640
left.

12
00:00:54,660 --> 00:00:59,470
So there are algorithms that can actually then track this sort of direction.

13
00:00:59,680 --> 00:01:04,550
And in this lecture are mainly going to be exploring the basic social Feldmann operators often just

14
00:01:04,570 --> 00:01:06,200
called Sobol for short.

15
00:01:06,250 --> 00:01:12,170
Later on in the course we're going to expand on this operator for general edge detection.

16
00:01:12,220 --> 00:01:15,660
Keep in mind that gradients can actually be calculated in a specific direction.

17
00:01:15,670 --> 00:01:20,790
Here we see a picture of the cat within X the frictional gradient calculated and another y their actual

18
00:01:20,810 --> 00:01:23,100
greeting calculated.

19
00:01:23,170 --> 00:01:25,980
So let's go ahead and show a basic example of this.

20
00:01:26,170 --> 00:01:27,940
Here there's an image of a bike.

21
00:01:28,000 --> 00:01:30,030
I'm going to show you the results of some gradients.

22
00:01:30,040 --> 00:01:34,570
Keep in mind what this image is actually showing specifically the bricks here you can see the bricks

23
00:01:34,570 --> 00:01:37,230
both have horizontal lines and vertical lines.

24
00:01:37,450 --> 00:01:41,580
And then we see the bike as well as what it's Lockett's to.

25
00:01:41,580 --> 00:01:47,880
So if you calculate a normalized X gradient from the Sobol operator notice that you end up only seeing

26
00:01:47,880 --> 00:01:50,430
things in the mainly vertical direction.

27
00:01:50,490 --> 00:01:55,860
Essentially shows you the vertical edges so you can no longer really clearly see those horizontal lines

28
00:01:56,160 --> 00:01:59,860
in the brick because we're putting this on a normalized X gradient.

29
00:02:01,040 --> 00:02:05,450
And if you apply normalized y agreed and then you actually see the horizontal edges.

30
00:02:05,510 --> 00:02:10,580
So there we can see clearly the horizontal edges of the bricks and you can see there that the actual

31
00:02:10,580 --> 00:02:17,210
tube that the bike is locked to tends to fade away because most of that is actually vertical and eventually

32
00:02:17,210 --> 00:02:22,280
we're going to be able to do things like a normal gradient magnitude which shows us both sides of the

33
00:02:22,280 --> 00:02:22,790
story.

34
00:02:22,820 --> 00:02:28,010
Here we can see both the vertical and horizontal edges and this is eventually going to lead up to when

35
00:02:28,010 --> 00:02:32,370
we discuss general edge detection.

36
00:02:32,420 --> 00:02:38,050
OK so as far as the actual mathematics behind this you can think of this as just a general operator

37
00:02:38,380 --> 00:02:41,850
that Sobol OPERATOR What it does is it uses two three by three colonels.

38
00:02:41,860 --> 00:02:46,240
And we're already familiar of colonels and how those operate which are involved with the original image

39
00:02:46,240 --> 00:02:48,720
to Cockley approximations of the derivatives.

40
00:02:48,880 --> 00:02:51,830
One for the horizontal changes and then one for the vertical changes.

41
00:02:51,940 --> 00:02:56,230
Essentially as we discussed gradients are a change in color or intensity.

42
00:02:56,260 --> 00:02:58,300
So change has to do with derivatives.

43
00:02:58,300 --> 00:03:03,100
If you're calculating the rate of change and these kernels are then able to calculate approximations

44
00:03:03,460 --> 00:03:04,660
of those changes.

45
00:03:04,660 --> 00:03:09,260
So we have one in the horizontal and one for the vertical OK.

46
00:03:09,500 --> 00:03:13,760
So in general we're going to try to step away from that matics there if you are really interested in

47
00:03:13,760 --> 00:03:17,810
mathematics behind these operators You can check out the Wikipedia article on the Sobol operator.

48
00:03:17,900 --> 00:03:20,700
It actually has a really nice for math breakdown of those details.

49
00:03:20,810 --> 00:03:24,740
But you can generally understand that you're applying some sort of kernel and we know how kernels are

50
00:03:24,740 --> 00:03:29,690
applied but now we're just doing one for horizontal changes and then one for vertical changes and we

51
00:03:29,690 --> 00:03:33,000
should then be able to calculate gradients and later on edges.

52
00:03:33,200 --> 00:03:37,910
So for our use case right now we're just going to focus on understanding the syntax of using Sobol with

53
00:03:37,940 --> 00:03:39,900
open sibi.

54
00:03:39,920 --> 00:03:44,240
OK so let's explore various great operators and then later on we're also going to combine these concepts

55
00:03:44,240 --> 00:03:47,400
with a few other image processing techniques that we've already learned.

56
00:03:47,540 --> 00:03:49,010
Let's get over to the notebook.

57
00:03:49,240 --> 00:03:50,930
OK here I am at the notebook.

58
00:03:50,990 --> 00:03:56,160
I've kind of had an already copied and pasted a couple of lines of code from the gradients notebook.

59
00:03:56,360 --> 00:03:59,710
The first four lines were just classic imports that were already familiar with.

60
00:03:59,900 --> 00:04:04,700
And then this line or this function I should say is the display image function that we've already been

61
00:04:04,700 --> 00:04:05,970
using and are familiar with.

62
00:04:06,050 --> 00:04:10,630
The only thing to note here is that it's automatically displaying the color mapping as gray.

63
00:04:10,640 --> 00:04:13,550
So go ahead and feel free to copy and paste those from the notebook.

64
00:04:13,550 --> 00:04:16,560
We're already familiar with the contents of these cells.

65
00:04:16,610 --> 00:04:20,030
The image we're going to be working with is a Sudoku puzzle.

66
00:04:20,030 --> 00:04:24,720
We're going to say image is equal to SIFI to read.

67
00:04:25,130 --> 00:04:28,910
And then inside of wherever your data folder is that goes with this course.

68
00:04:28,910 --> 00:04:31,650
Go ahead and open Sudoku JPA.

69
00:04:31,910 --> 00:04:34,160
And as a second parameter passing zero.

70
00:04:34,190 --> 00:04:37,300
So it's red in grayscale OK.

71
00:04:37,470 --> 00:04:39,980
Let's go ahead and display this image so we can see what it looks like.

72
00:04:40,080 --> 00:04:43,130
We'll say display I am g.

73
00:04:43,200 --> 00:04:44,040
And there we have it.

74
00:04:44,100 --> 00:04:45,630
So this is just a Sudoku puzzle.

75
00:04:45,630 --> 00:04:48,740
Notice it's on a background some sort of table cloth with flowers.

76
00:04:48,840 --> 00:04:50,200
And we have some clear lines.

77
00:04:50,200 --> 00:04:51,060
They are here.

78
00:04:51,150 --> 00:04:57,280
We have some thick lines for the actual grid system and then we have both horizontal and vertical lines.

79
00:04:57,360 --> 00:05:01,230
So that's why I chose this image because clearly there's some sort of grid pattern here and we'll be

80
00:05:01,230 --> 00:05:05,600
interested to see what the x ray versus the white gradient is OK.

81
00:05:05,640 --> 00:05:10,800
So let's actually show you how you can perform these mobile operators using open sibi.

82
00:05:10,800 --> 00:05:19,570
The first thing to do is calculate an X gradient Sobol Sewell's say Sobol X and then say equals 2 and

83
00:05:19,560 --> 00:05:27,080
he would say CB2 what's Sobol a lowercase o CB2 Sobol and then we're going to pass in the image we want

84
00:05:27,080 --> 00:05:30,410
to analyze and then we in a desired depth.

85
00:05:30,410 --> 00:05:36,530
So if you actually do shift tab here remember previously we had past a negative one to have the input

86
00:05:36,530 --> 00:05:39,050
desired that be the output desired that.

87
00:05:39,230 --> 00:05:44,570
But in this case we actually want to pass in our own desired depth parameter and you can check out the

88
00:05:44,570 --> 00:05:46,250
link in the resource lecture.

89
00:05:46,430 --> 00:05:52,040
It again goes back to a stack overflow post which is a really nice explanation of what that is.

90
00:05:52,160 --> 00:05:55,020
But that is essentially just the precision of each pixel.

91
00:05:55,160 --> 00:06:00,270
You can think of it as just like 8 person 24 32 versus 64 bit.

92
00:06:00,290 --> 00:06:09,740
So we'll go with the highest precision possible and say CB2 and the syntax for this is C-v underscore

93
00:06:10,410 --> 00:06:15,050
64 f essentially 64 floating point precision.

94
00:06:15,320 --> 00:06:20,660
And the next two parameters if you shift tab here is the derivative in the direction and the rivet in

95
00:06:20,660 --> 00:06:21,790
the Y the action.

96
00:06:21,800 --> 00:06:23,490
So we have the X and d y.

97
00:06:23,510 --> 00:06:29,510
So what we will do here is say Dayaks is one since we're calculating the X gradient and say why is zero

98
00:06:30,670 --> 00:06:33,150
and then a K size is equal to.

99
00:06:33,430 --> 00:06:35,580
And this is a side you can mess around with.

100
00:06:35,800 --> 00:06:40,280
It should be an odd number but you can begin playing the kernel size and see how that affects your output.

101
00:06:40,570 --> 00:06:46,900
But we'll go ahead and run that and let's display the result we'll say display image and then pass in

102
00:06:46,960 --> 00:06:48,590
our Sobol X gradient.

103
00:06:48,880 --> 00:06:50,800
And here we can see remoras the X gradient.

104
00:06:50,800 --> 00:06:54,120
So we get the vertical lines and the vertical lines are very clear.

105
00:06:54,180 --> 00:06:59,060
We have the vertical lines and we can't really see the horizontal lines in the grid system.

106
00:06:59,260 --> 00:07:02,270
Let's not try the white gradient of the Sobol operator.

107
00:07:02,270 --> 00:07:08,860
I'm going to copy and paste the same piece of code but essentially switch out that the X and the D-y.

108
00:07:08,860 --> 00:07:11,530
So instead of saying we want to zero we're going to say zero.

109
00:07:11,590 --> 00:07:18,240
Come on and else rename this to be the white gradient to the Sobol So I run this.

110
00:07:18,240 --> 00:07:25,780
I say the split image and now if I see Sobol why I should now clearly see horizontal lines.

111
00:07:25,780 --> 00:07:31,270
Keep in mind that doesn't mean it's going to completely erase any vertical lines because in fact these

112
00:07:31,270 --> 00:07:35,370
grid lines here were actually quite thick compared to the grid lines in the middle.

113
00:07:35,440 --> 00:07:39,870
But we can definitely see that there's a clearer picture of the horizontal lines.

114
00:07:39,880 --> 00:07:43,450
When we come to the white gradient Now there's one more gradient type.

115
00:07:43,480 --> 00:07:44,290
I want to show you.

116
00:07:44,380 --> 00:07:50,200
And that's using Laplace and derivatives and what that method does is it just calculates the Laplante

117
00:07:50,260 --> 00:07:52,480
of the image given by the relationship.

118
00:07:52,480 --> 00:07:56,060
And let me actually open up the Wikipedia page on the general applause.

119
00:07:56,080 --> 00:08:01,930
Operator So if you google search Laplace operator this is kind of one of those fundamental operators

120
00:08:02,020 --> 00:08:02,920
in calculus.

121
00:08:03,130 --> 00:08:07,540
Eventually if you scroll down here you'll see that to them mentions which is what we're dealing with.

122
00:08:07,540 --> 00:08:08,750
Just a greyscale image.

123
00:08:08,890 --> 00:08:15,610
You have the Laplace operator shown as the second derivative in regards to X plus the second derivative

124
00:08:15,640 --> 00:08:16,710
in regards to Y.

125
00:08:16,900 --> 00:08:22,030
So we're to be calculating these with Sobol operators because we already can perform a Sobol operator

126
00:08:22,330 --> 00:08:23,030
in the extreme.

127
00:08:23,080 --> 00:08:27,940
And the Wikipedia which are approximations of these sort of derivatives and we can use a kernel to do

128
00:08:27,940 --> 00:08:28,920
so.

129
00:08:29,170 --> 00:08:32,540
Again you can look up the full details on using Laplante and derivatives.

130
00:08:32,560 --> 00:08:37,090
It's actually really well detailed in the open C-v documentation.

131
00:08:37,090 --> 00:08:39,820
But for our case we just want to show you the results of that.

132
00:08:39,820 --> 00:08:45,250
So we'll come back to Jupiter live here and using the A-plus in gradient calculation is really simple.

133
00:08:45,310 --> 00:08:55,400
All we do here is say some sort of variables will say Laplace in applause line is equal to CV 2.

134
00:08:55,830 --> 00:08:57,270
And then we call applause.

135
00:08:57,690 --> 00:09:02,170
And here you don't need to specify the X or Y because it's going to do both.

136
00:09:02,430 --> 00:09:07,220
As we saw in the formula we'll just say image and then the desired depth which we want the full details

137
00:09:07,220 --> 00:09:12,140
so I'll say CB2 CV underscore 64 F..

138
00:09:12,570 --> 00:09:19,610
And let's check out the results of that one we'll say the splay image and then passen the policy in

139
00:09:20,810 --> 00:09:26,480
and here you can see in this case it attempts to do edge detection more or less a really great detection

140
00:09:26,690 --> 00:09:28,400
on both x and y.

141
00:09:28,460 --> 00:09:33,110
So it's gotten rid of some of the noise here but we can clearly see these gradients on the edges here

142
00:09:33,110 --> 00:09:37,910
from when we went from white to the black edge to white again and the numbers are very clearly shown

143
00:09:37,910 --> 00:09:38,900
here as well.

144
00:09:39,300 --> 00:09:39,810
OK.

145
00:09:40,040 --> 00:09:46,190
So maybe eventually you want to use some sort of application to look at a picture of a Sudoku puzzle

146
00:09:46,430 --> 00:09:50,320
and automatically fill it in with some numbers.

147
00:09:50,360 --> 00:09:53,290
What we may want to do is combine this with previous ideas.

148
00:09:53,330 --> 00:09:59,450
So previous ideas that we discussed are things like blending images so maybe the applause wasn't exactly

149
00:09:59,510 --> 00:10:04,790
the result you wanted and you wanted to blend the results of the Sobol in the white gradient and the

150
00:10:04,790 --> 00:10:08,110
Sobol in the extreme in what we actually already know how to do that.

151
00:10:08,270 --> 00:10:14,800
Well just come over here and use the Add weighted function so we could do something like one that is

152
00:10:14,800 --> 00:10:25,010
equal to C-v to add weighted and then say source 1 is equal to Sobol X and then what's nice about this

153
00:10:25,010 --> 00:10:28,810
approach is we can choose the Alpha and Beta values.

154
00:10:28,810 --> 00:10:34,220
So if we like the results of Sobol Y and maybe horizontal lines are a little more important for our

155
00:10:34,220 --> 00:10:38,480
particular application or vertical lines or a little more important we can then selectively choose how

156
00:10:38,480 --> 00:10:41,710
strong each X or Y gradient will be shown.

157
00:10:41,720 --> 00:10:47,600
So that's what's nice about doing this add a weighted approach will say Sobol y and in my case of just

158
00:10:47,600 --> 00:10:50,130
having both kind of equally represented here.

159
00:10:50,540 --> 00:10:59,990
And let's go ahead and leave gamma zero lips make sure I have that right source to source to run that

160
00:11:00,470 --> 00:11:02,570
and it's going to display that image that's blended.

161
00:11:02,810 --> 00:11:11,480
So say display image blended and going to run that and now I can see the blended result of the X green

162
00:11:11,480 --> 00:11:12,740
and white green and so will.

163
00:11:12,920 --> 00:11:18,050
So it's nice here is that I can clearly see some edges and maybe beyond this you also wanted to perform

164
00:11:18,050 --> 00:11:23,710
things like thresholding or morphological operators so he could do as well.

165
00:11:23,810 --> 00:11:30,330
Are things like maybe provide a threshold on this image so we can say ARYEETEY.

166
00:11:30,350 --> 00:11:33,230
Th one is equal to CB2.

167
00:11:33,680 --> 00:11:37,090
And then we can call threshold passen an image.

168
00:11:37,280 --> 00:11:38,860
That's actually the original image right there.

169
00:11:38,870 --> 00:11:45,380
Maybe you pass on some sort of threshold like hundred fifty five is the max value and then choose a

170
00:11:45,380 --> 00:11:51,020
binary threshold so will say binary and we can display the result of that as well.

171
00:11:51,140 --> 00:11:57,470
The split image th one and you can see this one also ends up trying to edges but then it doesn't actually

172
00:11:57,470 --> 00:11:59,910
see the grid lines on the inside.

173
00:12:00,050 --> 00:12:04,910
So you can then begin to combine ideas like trying to detect the threshold of maybe this splendid image

174
00:12:04,910 --> 00:12:05,930
and see how that works.

175
00:12:05,930 --> 00:12:09,000
Or maybe use some morphological operators.

176
00:12:09,020 --> 00:12:14,510
So in other morphological operator we learned about was the morphological gradient operator.

177
00:12:14,510 --> 00:12:15,650
So let's quickly do that.

178
00:12:15,650 --> 00:12:18,920
And in fact we'll try doing it on the blended one and see how that works.

179
00:12:18,920 --> 00:12:25,520
So let's quickly make a kernel we'll say this kernel is equal to the ones and that shape will be a four

180
00:12:25,520 --> 00:12:26,400
by four.

181
00:12:26,840 --> 00:12:29,080
And let's have a B in integers also.

182
00:12:29,090 --> 00:12:30,730
You I antedate.

183
00:12:30,860 --> 00:12:32,250
So we don't get any bugs there.

184
00:12:32,360 --> 00:12:40,330
And then we'll say the gradient is equal to C-v to morphology X well Placide.

185
00:12:40,340 --> 00:12:44,860
Well pasand that blended one and then say C-v two more.

186
00:12:45,290 --> 00:12:49,760
And then let's do another gradient calculation even though technically the Greens have already been

187
00:12:49,760 --> 00:12:50,460
calculated.

188
00:12:50,690 --> 00:12:55,220
But if you run that this way you'll should see kind of a clear black and white result and this will

189
00:12:55,220 --> 00:12:57,610
eventually lead us to things like edge detection.

190
00:12:57,620 --> 00:13:04,950
So if I display this image of the gradient calculation on that blend that image we end up seeing something

191
00:13:04,950 --> 00:13:06,170
that looks like this.

192
00:13:06,180 --> 00:13:11,040
So the numbers are blurry but now I can clearly see the whites and maybe you want to do a binary threshold

193
00:13:11,040 --> 00:13:11,510
on this.

194
00:13:11,520 --> 00:13:15,700
Maybe you want to get rid of some noise cetera so you can definitely combine a lot of the ideas that

195
00:13:15,720 --> 00:13:20,850
we've already discussed along with calculating gradients and eventually we're going to see is a lot

196
00:13:20,850 --> 00:13:25,570
of these ideas are combine when we end up calling just general edge detection functions.

197
00:13:25,760 --> 00:13:26,220
OK.

198
00:13:26,460 --> 00:13:28,860
So these are the very basics of gradients.

199
00:13:28,860 --> 00:13:33,500
This kind of air base building block so we can eventually understand edge detection.

200
00:13:33,570 --> 00:13:35,730
Coming up next we're going to discuss color histograms.

201
00:13:35,760 --> 00:13:39,460
And then after that you'll have an assessment for the section we'll see at the next lecture.
