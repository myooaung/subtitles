1
00:00:05,210 --> 00:00:10,790
Welcome everyone in this lecture we're going to have a quick crash course in high res when we actually

2
00:00:10,790 --> 00:00:12,170
read in image data.

3
00:00:12,230 --> 00:00:15,920
The computer is going to read it in as an array in the next lecture.

4
00:00:15,950 --> 00:00:20,480
We'll describe that relationship between images in arrays and through the tail print now.

5
00:00:20,510 --> 00:00:25,440
Let's go ahead and focus on just pure non-high how to create arrays in a few operations.

6
00:00:25,550 --> 00:00:29,100
Indexing and slice on arrays are going to head over to Jupiter lap now.

7
00:00:29,180 --> 00:00:34,070
OK here I am at Jupiter Lab. I'm going to go ahead and open a launcher so that's the plus button in

8
00:00:34,070 --> 00:00:37,230
case you don't have it and then click on notebook here.

9
00:00:37,580 --> 00:00:43,130
And now I have my two notebook let me collapse that file and I can also close the launcher.

10
00:00:43,130 --> 00:00:49,160
So the first thing you need to do is actually import non-pilot and although we do this as we say important

11
00:00:49,160 --> 00:00:54,560
of pi as an p and zoom in just a little more so you get a nice clear view of that.

12
00:00:54,770 --> 00:00:55,360
OK.

13
00:00:55,370 --> 00:00:59,680
Now pi has already been installed as part of your environment so you should already have it.

14
00:00:59,690 --> 00:01:02,210
There's a couple of ways we can create arrays.

15
00:01:02,210 --> 00:01:06,150
Most often we'll just be reading images and that will automatically create theory for us.

16
00:01:06,350 --> 00:01:11,570
But in case you're interested for a couple of other ways if you have a normal Python list such as my

17
00:01:11,570 --> 00:01:18,110
list is equal to one 2 three if you wanted to check the type of my list here I'll report back that it's

18
00:01:18,110 --> 00:01:26,330
a list but we could do is cast it as an array by saying and P-doc array and then passing in my list

19
00:01:26,330 --> 00:01:27,100
here.

20
00:01:27,350 --> 00:01:31,810
And then notice if I just have it be returned the returns back in array object.

21
00:01:31,910 --> 00:01:36,610
So I could say something like Mirei is equal to an array.

22
00:01:36,800 --> 00:01:44,450
And then I have my array here and a customs check the type of my array and report back.

23
00:01:44,480 --> 00:01:47,100
Yes in fact this no longer is the normal Python list.

24
00:01:47,240 --> 00:01:49,250
It's actually a name PI array.

25
00:01:49,370 --> 00:01:54,020
So it's nice about these pirates is they're going to be able to take in a different dimensions so I

26
00:01:54,020 --> 00:01:56,000
can have a two then missional array.

27
00:01:56,000 --> 00:02:00,620
So let's show you a couple of ways to create arrays that are more than just a single list being cast

28
00:02:00,620 --> 00:02:05,040
into energy one method I could use is the arr. method.

29
00:02:06,220 --> 00:02:12,340
And arrange what it does is if you do shift tab here Ill give you the documentation string.

30
00:02:12,520 --> 00:02:16,150
Basically it returns evenly spaced values within a given interval.

31
00:02:16,240 --> 00:02:20,040
So you give a start and a stop and an optional step size.

32
00:02:20,050 --> 00:02:26,650
So here I could say start at zero and then go up to but not including tens of thousands the stopping

33
00:02:26,650 --> 00:02:29,510
point and then give it a step size.

34
00:02:29,520 --> 00:02:32,140
Well go ahead and say zero through 10 first.

35
00:02:32,140 --> 00:02:35,850
So here's my array 0 1 2 3 4 5 6 7 8 9.

36
00:02:35,860 --> 00:02:38,860
Essentially this is the range version in non-pilot.

37
00:02:38,860 --> 00:02:41,790
So as you may know Python has a built in range function.

38
00:02:42,000 --> 00:02:47,050
A range is not Pye's version of that Scicos up to but not including tenths of 10 was that stopping point

39
00:02:47,560 --> 00:02:50,380
as a third argument you can pass in a step size.

40
00:02:50,380 --> 00:02:54,740
So by default it's just taking a step size of one integer or plus one at a time.

41
00:02:54,850 --> 00:02:58,200
If we say two here then I'll take a step size of two.

42
00:02:58,240 --> 00:03:02,420
So go zero to 2 to 4 to 6 to 8 and so on.

43
00:03:02,800 --> 00:03:03,300
OK.

44
00:03:03,520 --> 00:03:08,200
Now often what we're going to be doing is creating a two dimensional or three damage array.

45
00:03:08,500 --> 00:03:13,720
All of one single value so that zeros is a useful function.

46
00:03:13,720 --> 00:03:16,540
We're going to be using quite often zeroes.

47
00:03:16,600 --> 00:03:21,390
The main argument you do is just the shape so what shape do you want the Saray.

48
00:03:21,460 --> 00:03:27,330
Now we're going to do here is say shape is equal to and then you pass any tuple song to say I want a

49
00:03:27,430 --> 00:03:28,890
five by five.

50
00:03:28,950 --> 00:03:29,970
Right.

51
00:03:30,670 --> 00:03:34,900
And here we have five rows by five columns.

52
00:03:34,930 --> 00:03:39,200
So just to make that clear I'm going to say Give me a 10 by five or eight.

53
00:03:39,760 --> 00:03:41,690
And I notice now I have 10 rows.

54
00:03:41,830 --> 00:03:48,370
So the first dimension the index position here at 0 that's going to be the actual number of rows and

55
00:03:48,370 --> 00:03:50,560
then the number of columns is the second one.

56
00:03:50,560 --> 00:03:51,090
So.

57
00:03:51,260 --> 00:03:53,200
So here we have five columns.

58
00:03:53,200 --> 00:03:56,550
Now you'll notice each of these zeroes has a little decimal point after it.

59
00:03:56,560 --> 00:04:02,150
That's because by default none pi is going to automatically create floats instead of just pure integers.

60
00:04:02,260 --> 00:04:06,600
So arr. created integers and zeros is going to create floats.

61
00:04:06,610 --> 00:04:09,970
So it's zero point instead of just 0.

62
00:04:09,970 --> 00:04:14,060
So if we check the type of 0 by itself that's an integer.

63
00:04:14,110 --> 00:04:17,920
If you check type of zero point zero that's a float.

64
00:04:17,920 --> 00:04:22,790
And then if you just check the type of zero point that's also a float.

65
00:04:22,900 --> 00:04:23,740
So keep that in mind.

66
00:04:23,740 --> 00:04:25,420
These are all floating point numbers.

67
00:04:25,630 --> 00:04:28,780
So zeros is something we're going to be using often throughout the course.

68
00:04:28,780 --> 00:04:33,640
The other one we're going to be using often is N.P. ones and it's going to be the same thing it takes

69
00:04:33,730 --> 00:04:34,850
a shape argument.

70
00:04:34,960 --> 00:04:39,840
So you say shape is equal to and you can see two by four or whatever shape you desire.

71
00:04:40,060 --> 00:04:45,160
And then we see one point for two rows by these four columns.

72
00:04:45,160 --> 00:04:47,870
Keep in mind you don't have to declare the shape parameter.

73
00:04:47,890 --> 00:04:51,620
Often you'll just see it done like this and that's the same thing.

74
00:04:51,640 --> 00:04:52,030
All right.

75
00:04:52,180 --> 00:04:55,610
So that concludes talking about how to create a raise from scratch.

76
00:04:55,750 --> 00:04:58,990
The main ones we really need to know here that we're going to see all the time throughout the course

77
00:04:59,350 --> 00:05:05,740
is that zeros which creates an array of zeros for us and the ones which creates an array of ones for

78
00:05:05,740 --> 00:05:11,530
us where this first value in the shape is how many rows you have or the height of the array.

79
00:05:11,650 --> 00:05:15,900
And the second one is how many columns you have or the width of the array.

80
00:05:15,970 --> 00:05:20,710
So a little bit counterintuitive as far as relating the first one number of rows to height.

81
00:05:20,980 --> 00:05:25,270
And the second one number of columns to width but that's going to make a lot more sense when we start

82
00:05:25,270 --> 00:05:26,760
reading in images.

83
00:05:26,770 --> 00:05:27,300
OK.

84
00:05:27,520 --> 00:05:29,910
Now let's go over a couple of operations.

85
00:05:29,940 --> 00:05:34,810
I'm going to shift into a couple of times here to get some new cells to clear some of the old stuff

86
00:05:34,810 --> 00:05:35,890
out of the way.

87
00:05:35,950 --> 00:05:43,670
So now we're going to do is to start off by setting what's known as a seed sort of say the random seed.

88
00:05:44,140 --> 00:05:46,840
And then pasan 1 0 1.

89
00:05:46,990 --> 00:05:51,580
What this does is it allows me to create the same random numbers each time.

90
00:05:51,580 --> 00:05:57,820
So I'm doing this because I want to have some random numbers for this next series of operations.

91
00:05:57,820 --> 00:06:06,760
So if I want to create random data I just say that random rant I and t anti-d's shift map here.

92
00:06:06,760 --> 00:06:09,240
Basically this describes this particular function.

93
00:06:09,430 --> 00:06:16,380
It's just going to create and return random integers from low inclusively to high exclusively.

94
00:06:16,410 --> 00:06:23,980
So that means I'm going to say here grab me from 0 to 100 give me 10 random numbers.

95
00:06:23,990 --> 00:06:29,270
Notice how my seed and the creation of the Saray are actually happening in the same cell.

96
00:06:29,270 --> 00:06:32,540
The reason I have 101 here is just a seed number.

97
00:06:32,540 --> 00:06:34,120
The actual value is pretty arbitrary.

98
00:06:34,130 --> 00:06:36,140
But I want Judis the same number I do.

99
00:06:36,140 --> 00:06:39,290
That way when you actually create these random values you get the same random numbers.

100
00:06:39,320 --> 00:06:40,050
I do.

101
00:06:40,150 --> 00:06:46,190
And you can do a google search on things like random generation or random number generation to actually

102
00:06:46,190 --> 00:06:49,000
figure out the complex mathematics behind these seeds.

103
00:06:49,010 --> 00:06:52,160
But for our purposes that's kind of irrelevant at the course.

104
00:06:52,160 --> 00:06:54,590
I just wanna make sure you get the same random numbers I do.

105
00:06:54,890 --> 00:07:00,240
So if you run this in the same cell when you get that array you should not get the same values here

106
00:07:00,370 --> 00:07:01,290
95 11.

107
00:07:01,360 --> 00:07:04,400
81 in Oregon to do is immediately after that.

108
00:07:04,530 --> 00:07:06,610
Create one more moreI.

109
00:07:06,850 --> 00:07:13,620
So say any random ran Diante and say grabbing numbers from 0 to 100.

110
00:07:13,630 --> 00:07:17,710
Give me 10 more numbers and then check out that second array value.

111
00:07:17,740 --> 00:07:19,600
You should get the same values I do.

112
00:07:19,600 --> 00:07:21,360
If you do not get the same values I do.

113
00:07:21,370 --> 00:07:25,410
Go ahead and just rerun the cells again in the same order.

114
00:07:25,420 --> 00:07:30,220
OK so now we're going to show you a couple of operations that are useful such as finding the max and

115
00:07:30,220 --> 00:07:32,010
min and mean of an array.

116
00:07:32,050 --> 00:07:34,750
So we want to find out the max value of an array.

117
00:07:34,840 --> 00:07:40,490
You can say a r r Max and this returns back the actual max value.

118
00:07:40,500 --> 00:07:43,440
So notice here the max value is 95.

119
00:07:43,520 --> 00:07:50,130
If I wanted to figure out the location of that max value I simply need to say RMX and then return back

120
00:07:50,160 --> 00:07:52,770
the index location of that value.

121
00:07:52,800 --> 00:07:55,560
So index 0 just like a python list.

122
00:07:55,650 --> 00:07:58,240
You'll notice here that we have 95.

123
00:07:58,370 --> 00:08:01,320
OK so we can do the same thing for men.

124
00:08:02,040 --> 00:08:05,280
So I can figure out the minimum value by saying are that men.

125
00:08:05,300 --> 00:08:07,910
So those are minimum value in the story was nine.

126
00:08:07,960 --> 00:08:15,020
And if I wanted to figure out its location then I just say Aardman and it's at index location 7.

127
00:08:15,220 --> 00:08:25,260
So if I count over starting at 0 0 1 2 3 4 5 6 and then at 7 we have the minimum value of nine.

128
00:08:25,330 --> 00:08:25,930
OK.

129
00:08:26,290 --> 00:08:32,260
And finally if you want to figure out the average value or the mean you can just call our mean and then

130
00:08:32,260 --> 00:08:34,330
we have the average was sixty point eight.

131
00:08:34,330 --> 00:08:38,420
So it calculates the mean something else you can do is you can reshape arrays.

132
00:08:38,430 --> 00:08:40,210
This is sometimes useful.

133
00:08:40,210 --> 00:08:43,100
So if I check out the shape parameter.

134
00:08:43,120 --> 00:08:45,540
Notice how I'm just calling shape with no princess here.

135
00:08:45,670 --> 00:08:51,470
It returns back a shape 10 comma and then nothing because it's actually just a single vector.

136
00:08:51,490 --> 00:08:56,910
What it could do is say reshape this to another set of them mentions.

137
00:08:56,920 --> 00:09:00,700
So if you shift tab here you'll say OK what shape do you want it in now.

138
00:09:01,060 --> 00:09:09,170
Well let's imagine that I wanted to reshape it to be two by five so now it's reshape this to be two

139
00:09:09,230 --> 00:09:11,550
rose by five columns.

140
00:09:11,740 --> 00:09:17,710
If I try to choose values that don't make sense such as 2 by 10 it's going to give you an error it's

141
00:09:17,710 --> 00:09:23,230
going to say hey I can't reshape an array size 10 into shape 2 by 10 which makes sense because if you

142
00:09:23,230 --> 00:09:28,610
have an array of two by 10 that means there's two times 10 elements that means 20 elements.

143
00:09:28,630 --> 00:09:31,220
However you only had 10 elements to work with.

144
00:09:31,240 --> 00:09:35,560
So that's why it's giving us an error here because those dimensions don't make sense but we could always

145
00:09:35,560 --> 00:09:37,200
reshape to something that does make sense.

146
00:09:37,240 --> 00:09:42,750
Like five to six five times to ten and we have 10 elements that works out just fine.

147
00:09:42,790 --> 00:09:43,260
OK.

148
00:09:43,510 --> 00:09:46,120
So that's the basics of operations that we need to know.

149
00:09:46,120 --> 00:09:48,580
Lastly we want to understand indexing.

150
00:09:48,580 --> 00:09:53,950
So I'm going to make a couple of more cells here to clear up some of this space and I'm going to create

151
00:09:54,610 --> 00:10:04,380
a variable called mat for Matrix will say that arr. 0 to 100 and then immediately after this instead

152
00:10:04,380 --> 00:10:10,050
of doing this in two steps going to do it all at once that I need to reshape this to 10 by 10 and if

153
00:10:10,050 --> 00:10:16,720
I check my mat I have the Saray of all the numbers from zero stopped until a hundred or 99.

154
00:10:16,980 --> 00:10:21,120
And then if I want to check the shape of this it's 10 by 10.

155
00:10:21,210 --> 00:10:25,600
So let's imagine that I wanted to grab a single digit from this array.

156
00:10:25,650 --> 00:10:28,000
What I do is I use indexing.

157
00:10:28,080 --> 00:10:37,690
So let's say I want the value RHO index 0 where column is index 1.

158
00:10:37,790 --> 00:10:38,870
So what value is that.

159
00:10:38,990 --> 00:10:41,330
Well Roseborough is this first row.

160
00:10:41,600 --> 00:10:47,570
Column 1 is the second column because if you start counting index 0 1 so that's going to hopefully return

161
00:10:47,570 --> 00:10:54,320
back 1 and the notation for this or syntax for this is M-80 or whatever your matrix or array happens

162
00:10:54,320 --> 00:10:55,120
to be called.

163
00:10:55,160 --> 00:11:02,390
And then you pass in the row comma the column run that and we get back that value of 1.

164
00:11:02,410 --> 00:11:07,180
I would encourage you now to pause the video and try to choose a number somewhere in the matrix and

165
00:11:07,180 --> 00:11:09,520
then see if you can index out that number.

166
00:11:09,520 --> 00:11:15,220
So for example see if you can grab just the number 46 for this matrix based on the logic we showed you

167
00:11:15,220 --> 00:11:16,470
here.

168
00:11:16,480 --> 00:11:16,810
OK.

169
00:11:16,930 --> 00:11:18,430
So let's quickly show you how to do that.

170
00:11:18,670 --> 00:11:26,590
So if I wanted 46 then that's 0 1 2 3 4.

171
00:11:26,620 --> 00:11:28,010
So that's Rona before.

172
00:11:28,100 --> 00:11:31,030
And it's at column 6.

173
00:11:31,060 --> 00:11:33,660
So here we just actually wrote out row and column.

174
00:11:33,670 --> 00:11:37,880
But you can pass the numbers there actually and there there's 46.

175
00:11:37,930 --> 00:11:43,630
So that's also the reason we chose these particular values from 0 to 99 because you can really quite

176
00:11:43,630 --> 00:11:45,580
clearly see the index locations.

177
00:11:45,580 --> 00:11:50,200
Notice how the first number here is representative of the index of that actual row and the number here

178
00:11:50,200 --> 00:11:51,970
is representative of the index of that column.

179
00:11:51,970 --> 00:11:55,510
So 46 is actually quite easy for Comus 6.

180
00:11:55,540 --> 00:12:01,660
Now let's imagine you wanted to grab all the items in a row or all the items in a column.

181
00:12:01,660 --> 00:12:04,000
You did that with slicing.

182
00:12:04,000 --> 00:12:12,080
So we say Matt and then we're going to say Colan and then pass some column value.

183
00:12:12,240 --> 00:12:19,170
Let's go ahead and pasand column one so that returns back is every single value for every single row

184
00:12:19,680 --> 00:12:21,510
in the column on.

185
00:12:21,570 --> 00:12:29,790
So if I take a look at my metrics again notice here that my matrix has this column 1 11:21.

186
00:12:29,790 --> 00:12:33,470
So that's the column I asked for and with the colon you ask for everything.

187
00:12:33,600 --> 00:12:35,430
So in this I mentioned those were the rows.

188
00:12:35,580 --> 00:12:39,000
So asked for the value of every single row just for that particular call.

189
00:12:39,150 --> 00:12:47,100
So it's essentially just asking for that entire column back in here that the shape returned is 10 common

190
00:12:47,120 --> 00:12:47,650
nothing.

191
00:12:47,850 --> 00:12:55,530
If you actually wanted to get it in this shape then you would have to say Matt colon come a one and

192
00:12:55,530 --> 00:12:57,730
then reshape to the particular shape you wanted.

193
00:12:57,930 --> 00:13:05,300
So if you wanted it to be one row by 10 columns you could get something like this.

194
00:13:05,430 --> 00:13:11,370
Or you could reverse it to have it this other way that looks more like the original.

195
00:13:11,370 --> 00:13:15,840
Keep in mind the pinning on what you're running you may not actually see this output format of the same

196
00:13:15,840 --> 00:13:20,700
way but hopefully you can get the idea here of the different shapes something can be returned then.

197
00:13:20,960 --> 00:13:21,460
OK.

198
00:13:21,720 --> 00:13:25,050
So that turns back an entire column if you want to back an entire row.

199
00:13:25,050 --> 00:13:26,270
It's essentially the opposite.

200
00:13:26,340 --> 00:13:28,400
You ask for every column particular row.

201
00:13:28,650 --> 00:13:34,530
So let's get arow here which is row 2 and them will say colon give me everything there.

202
00:13:34,710 --> 00:13:36,790
And now we get back everything in that row.

203
00:13:37,320 --> 00:13:39,040
So notice when to ask for the array.

204
00:13:39,120 --> 00:13:45,290
I'm basically saying OK go 0 1 2 and then give me every single column for this row which is just that

205
00:13:45,360 --> 00:13:48,640
row itself 20 21 22 and so on.

206
00:13:49,110 --> 00:13:53,040
Finally often you can actually grab just mere chunks of this.

207
00:13:53,250 --> 00:13:59,010
So the way we do that is through slicing and then we use slice notation just like you do for a normal

208
00:13:59,010 --> 00:14:00,100
Python list.

209
00:14:00,390 --> 00:14:03,530
So let's imagine I wanted to grab this first three by three here.

210
00:14:03,750 --> 00:14:11,350
What I could do is say starting at index 0 colon three for those rows and then for the columns do the

211
00:14:11,350 --> 00:14:14,030
same thing zero colon three.

212
00:14:14,230 --> 00:14:20,550
And what does is it says OK grab all the rows starting at 0 up to not including three.

213
00:14:20,560 --> 00:14:29,560
So here all the rows 0 1 and 2 and then grab all those columns 0 and then one and then two.

214
00:14:29,770 --> 00:14:32,040
So we can expand this to get a better idea.

215
00:14:32,050 --> 00:14:37,060
So if I kept going with those particular columns it start giving me more of those rows give me the additional

216
00:14:37,060 --> 00:14:39,530
column they're 0 1 2 and 3.

217
00:14:39,580 --> 00:14:44,740
Essentially this is just normal Python slicing notation just the same way you would slice a normal Python

218
00:14:44,740 --> 00:14:46,400
string or a normal Python list.

219
00:14:46,450 --> 00:14:50,190
But now it's happening along to that mentions Don't worry too much.

220
00:14:50,200 --> 00:14:52,280
This notation is a little confusing to you.

221
00:14:52,300 --> 00:14:54,970
We actually don't really see it that often throughout the course.

222
00:14:55,030 --> 00:15:00,260
Usually what we end up doing is we just take a quick slice of maybe everything and then reassign it.

223
00:15:00,260 --> 00:15:04,540
So the last thing I want to show you is if you want to actually reassign these numbers to a different

224
00:15:04,540 --> 00:15:07,460
value you could say it equals zero.

225
00:15:07,590 --> 00:15:13,200
And then if we check out the Matrix again the original Matrix has now been affected.

226
00:15:13,410 --> 00:15:20,300
And now that entire chunk is equal to zero if you want to actually effect a kind of copy of the matrix.

227
00:15:20,370 --> 00:15:27,200
We could do is say my new mat or whatever we happen to call this variable.

228
00:15:27,300 --> 00:15:32,500
And the same math and then call copy and that's of command we'll see throughout the course.

229
00:15:33,030 --> 00:15:37,970
So sometimes you want to make a copy and then maybe set all the values to something else.

230
00:15:37,980 --> 00:15:43,580
So if I wanted to reset all the values if I look at my new map right here is a copy of that matrix that's

231
00:15:43,590 --> 00:15:44,540
already been affected.

232
00:15:44,670 --> 00:15:48,640
Let's actually just turn everything on this top half zeros.

233
00:15:48,690 --> 00:15:49,660
So how do I do that.

234
00:15:49,830 --> 00:15:57,390
Well I want to grab everything from let's say 0 up to bet on including six.

235
00:15:57,420 --> 00:16:00,810
So I want to grab all those rows and then I want to grab all the columns.

236
00:16:00,840 --> 00:16:05,780
So I'm actually going to grab everything there and let's set those all to zero.

237
00:16:06,030 --> 00:16:09,420
Let's set them all to ninety nine just so it's really obvious.

238
00:16:09,420 --> 00:16:11,320
We'll do 999.

239
00:16:11,370 --> 00:16:12,120
There we go.

240
00:16:12,120 --> 00:16:15,950
And if I check out my new mat now we go ahead and set.

241
00:16:16,020 --> 00:16:19,410
Kind of that first top half into 99.

242
00:16:19,920 --> 00:16:20,270
OK.

243
00:16:20,310 --> 00:16:25,540
Again really just doing normal Python slicing notation that you've seen before if you already experience

244
00:16:25,620 --> 00:16:26,870
python lists and strings.

245
00:16:27,060 --> 00:16:29,340
Just doing it along two dimensions.

246
00:16:29,340 --> 00:16:32,250
And as I mentioned we really don't do that often throughout the course.

247
00:16:32,290 --> 00:16:36,320
It's just a few times we want to reassign some image pixels.

248
00:16:36,330 --> 00:16:36,760
OK.

249
00:16:36,990 --> 00:16:38,580
So that's the basics of not pi.

250
00:16:38,580 --> 00:16:40,650
Coming up next we're going to learn about pi.

251
00:16:40,680 --> 00:16:44,390
Well we actually learned first what an image actually is in reference to a computer.

252
00:16:44,460 --> 00:16:47,340
And then we'll learn how to directly work with non-pilot images.

253
00:16:47,370 --> 00:16:48,810
Thanks and I'll see you there.
