WEBVTT
1
00:00:05.320 --> 00:00:12.070
Welcome back in this lecture we're going to talk about image thresholding in some computer vision applications.

2
00:00:12.070 --> 00:00:17.050
It is often necessary to convert color images to grayscale since only edges and shapes end up being

3
00:00:17.050 --> 00:00:18.850
important for certain applications.

4
00:00:18.850 --> 00:00:23.440
You don't actually need to know the color of someone's shirt for instance to get the outline of a shirt.

5
00:00:23.440 --> 00:00:28.370
Similarly some applications really only require a binary image showing general shapes.

6
00:00:28.420 --> 00:00:35.780
Not even just greyscale just black or white thresholding is fundamentally a very simple method of segmenting

7
00:00:35.780 --> 00:00:37.570
an image into different parts.

8
00:00:37.760 --> 00:00:41.860
Thresholding will convert image to consist of only two values white or black.

9
00:00:41.870 --> 00:00:46.370
Later on we'll see some other examples of thresholding that actually convert to some sort of grayscale

10
00:00:46.580 --> 00:00:48.520
and do have values in between black and white.

11
00:00:48.590 --> 00:00:53.870
But typically it's going to be going with a straight binary threshold that turns values into black or

12
00:00:53.870 --> 00:00:55.500
white.

13
00:00:55.520 --> 00:00:56.850
So what is the sexy look like.

14
00:00:56.870 --> 00:00:59.880
Basically here on the left we have a color image.

15
00:00:59.930 --> 00:01:04.430
So here we have some snow a bridge a tree and then a building in the background.

16
00:01:04.430 --> 00:01:10.190
We take that color image convert it to grayscale and then we apply an image threshold which converts

17
00:01:10.190 --> 00:01:14.990
that greyscale image into a binary image where values are either black or white.

18
00:01:15.350 --> 00:01:17.730
And we obtain still a lot of information.

19
00:01:17.900 --> 00:01:20.410
So now we can see that we saw the gene or shapes.

20
00:01:20.480 --> 00:01:25.190
I can tell there's a building some trees and then I can tell maybe there's a bridge there and some sort

21
00:01:25.190 --> 00:01:26.050
of foreground.

22
00:01:26.300 --> 00:01:32.600
But I get all that information with very little data compared to the actual first image because now

23
00:01:32.660 --> 00:01:37.460
instead of three color channels I only need one channel and all my values are actually just binary they're

24
00:01:37.460 --> 00:01:40.810
either 0 or 255.

25
00:01:41.250 --> 00:01:46.200
So let's explore the syntax and options for thresholding of open C-v Let's open up a notebook and get

26
00:01:46.200 --> 00:01:46.850
started.

27
00:01:47.130 --> 00:01:52.930
OK we're going to begin by doing an import of CB2 and we're going to display some images.

28
00:01:53.030 --> 00:02:01.920
So we will say import that plot pipe plot as PLDT and then say map plot lib in the line as well.

29
00:02:01.920 --> 00:02:07.670
The image we're going to use is an image of a rainbow that is located in the data folder.

30
00:02:07.710 --> 00:02:12.380
So we will say image read and where we are data folders located.

31
00:02:12.420 --> 00:02:15.480
Go ahead and read in the rainbow jpg file from there.

32
00:02:15.480 --> 00:02:16.850
Let's go out and see the image.

33
00:02:16.980 --> 00:02:19.430
So we'll say peel t him show.

34
00:02:19.680 --> 00:02:22.680
And then we'll say image.

35
00:02:22.680 --> 00:02:26.580
So there it is there's the rainbow image and all we're going to be doing is experimenting with a couple

36
00:02:26.580 --> 00:02:28.250
of different thresholding options.

37
00:02:28.290 --> 00:02:34.000
The first one I want to show is actually read in an image that is in color and read it in in grayscale

38
00:02:34.170 --> 00:02:38.540
and then we can do that is just as a second parameter just pasand 0 when you read it.

39
00:02:38.550 --> 00:02:40.830
So say CB2 read your image.

40
00:02:40.860 --> 00:02:46.500
And the second parameter 0 and when you run it that way you'll read it in as a greyscale image.

41
00:02:46.500 --> 00:02:47.650
Notice that the colors change.

42
00:02:47.640 --> 00:02:52.290
That's because as we've discussed before very this is the original color scale for this.

43
00:02:52.500 --> 00:02:56.640
So it will clarify the map equal to gray.

44
00:02:57.150 --> 00:03:01.170
And there we actually see a greyscale version of that rainbow.

45
00:03:01.170 --> 00:03:03.650
Now let's check out the different threshold types.

46
00:03:03.820 --> 00:03:09.560
The thresholding works as you say CB2 dot threshold.

47
00:03:09.960 --> 00:03:14.080
And then you get a pass in your image and there's going to be two main parameters.

48
00:03:14.100 --> 00:03:19.020
One is the actual threshold and the other one is the max value expected.

49
00:03:19.020 --> 00:03:23.760
So what this does is this function basically is going to apply thresholding and it's going to say any

50
00:03:23.760 --> 00:03:30.240
values below a specific threshold get turned to zero any values above that get turned to the max.

51
00:03:30.240 --> 00:03:34.800
Now typically what you do for a thresholding in situations is you just choose the halfway point to be

52
00:03:34.800 --> 00:03:35.870
your threshold.

53
00:03:35.910 --> 00:03:40.860
So in that case or halfway point should be 255 divided by two.

54
00:03:40.860 --> 00:03:46.900
So if we do that we'll say 255 divided by two that's equal to 120 7.5.

55
00:03:46.920 --> 00:03:48.510
So you can choose either side of that.

56
00:03:48.570 --> 00:03:52.150
So choose 127 because we want it to be an integer.

57
00:03:52.440 --> 00:03:55.390
And then the max value here is 255.

58
00:03:55.440 --> 00:04:02.160
In case you ever have any doubts for your particular image only to do is say image max and then report

59
00:04:02.160 --> 00:04:02.590
back.

60
00:04:02.610 --> 00:04:09.150
So in our case the actual MXL used to 14 but we know the actual max possible value is 255.

61
00:04:09.150 --> 00:04:13.680
The reason you may want to actually check the max is in case your image goes from 0 to 1.

62
00:04:13.680 --> 00:04:18.740
But if you're reading it with CB2 then it should read it to all go from zero to 25.

63
00:04:18.840 --> 00:04:22.150
Excuse me from 0 to 255 as the Max.

64
00:04:22.320 --> 00:04:22.790
OK.

65
00:04:23.040 --> 00:04:27.880
So we have an image we have a threshold and we have our max value possible.

66
00:04:27.990 --> 00:04:31.430
And then we'll go ahead and passen the type a threshold.

67
00:04:31.540 --> 00:04:37.410
In this case we're going to say A to thrash and you could tap here you'll see the various thresholds

68
00:04:37.410 --> 00:04:38.120
available.

69
00:04:38.160 --> 00:04:40.470
We're going to start off with the simplest one which is binary.

70
00:04:40.470 --> 00:04:44.940
Again any value inside this image which is below 1 to 7.

71
00:04:44.940 --> 00:04:50.130
It's going to be shifted down to zero and any value above 1 to 7 is going to be shifted up the max of

72
00:04:50.130 --> 00:04:52.090
255.

73
00:04:52.290 --> 00:04:59.730
So then we're going to say is our easy come to thresh one is equal to CV to that threshold.

74
00:04:59.760 --> 00:05:05.560
So we do a little bit tuple and packing here in the wake it's return and if you check up this object

75
00:05:05.590 --> 00:05:10.960
it basically just informs you what the actual cutoff value was in case you ever want to revisit that

76
00:05:11.590 --> 00:05:14.310
and the thresh one is actually an image.

77
00:05:14.740 --> 00:05:22.260
So I will say PTM show thresh one and then say See map is great.

78
00:05:23.060 --> 00:05:30.790
And you'll notice that we have a binary image so all the values are either 0 or 255.

79
00:05:30.800 --> 00:05:35.600
Now you can actually do an inverse of this by saying binary underscore.

80
00:05:35.830 --> 00:05:38.940
I envy as a threshold binary inverse.

81
00:05:39.010 --> 00:05:42.240
So this does the exact same thing except it inverts all the results.

82
00:05:42.280 --> 00:05:46.330
So if you run this again you'll get back the actual inverse of binary.

83
00:05:46.330 --> 00:05:51.100
Those are the two most common are going to be using is threshold vinery and threshold by unary inverse

84
00:05:51.370 --> 00:05:53.040
depending on the actual situation.

85
00:05:53.230 --> 00:05:56.100
OK let's explore a couple of more threshold options.

86
00:05:56.170 --> 00:06:04.450
Another threshold option besides thresh binary and thrist binary inverse is thresh hold and then T R

87
00:06:04.600 --> 00:06:08.940
U N C and this is essentially a threshold truncation.

88
00:06:09.190 --> 00:06:14.110
So the way this works is if you actually look up in the documentation the various thresholds can open

89
00:06:14.110 --> 00:06:18.430
up documentation link and you can see the actual way the formulas work.

90
00:06:18.430 --> 00:06:23.770
So we already are familiar thresh binary where you're going to have some sort of source and it's going

91
00:06:23.770 --> 00:06:29.420
to go either to zero or the max value provided which is 255 usually.

92
00:06:29.830 --> 00:06:32.500
And then three binary inverse is the opposite.

93
00:06:32.500 --> 00:06:37.960
It's going to go to zero if the source of that value is greater than the threshold and then the max

94
00:06:37.960 --> 00:06:38.290
value.

95
00:06:38.290 --> 00:06:46.180
Otherwise for thresh with truncation what it's going to do is if it's actually over the threshold then

96
00:06:46.210 --> 00:06:49.590
it's going to go to whatever you set it as so.

97
00:06:49.810 --> 00:06:54.580
So if you set the threshold to one to seven if the source happens to be greater than that threshold

98
00:06:54.820 --> 00:06:57.670
it's going to bring back that value down to the threshold.

99
00:06:57.820 --> 00:07:00.980
Otherwise it's going to keep the original value.

100
00:07:01.000 --> 00:07:02.640
So we'll see what that looks like here.

101
00:07:02.890 --> 00:07:08.420
So when I say threats truncated run that again and now we get to see the results here.

102
00:07:08.440 --> 00:07:13.390
So notice that some of them got to keep their original value and then other ones got put down back to

103
00:07:13.390 --> 00:07:14.520
the threshold here.

104
00:07:14.710 --> 00:07:20.350
So again that's threshold truncation where all it does is if the source material is above the threshold

105
00:07:20.620 --> 00:07:22.710
it gets pulled back down to the threshold.

106
00:07:22.870 --> 00:07:26.810
If the source material is otherwise less than the threshold we keep that source.

107
00:07:27.040 --> 00:07:32.710
And as you may imagine there's essentially an inverse of this which is threshed to zero where you're

108
00:07:32.710 --> 00:07:35.520
going to keep the source material if it's greater than the threshold.

109
00:07:35.650 --> 00:07:39.040
And then if you're not growing on a threshold you're going to pull it back down to zero.

110
00:07:39.220 --> 00:07:41.920
So there's also an inverse of that as well.

111
00:07:43.320 --> 00:07:52.480
So we say threshold and we can say lips make sure that's 2 0 and if you run those you basically get

112
00:07:53.080 --> 00:07:58.810
the normalized values here and then anything that Ameet that gets put back down to zero.

113
00:07:58.840 --> 00:08:04.240
So the formula again for thrush to zero if we were above the threshold we're going to keep our value

114
00:08:04.450 --> 00:08:07.030
otherwise for below that threshold we go down to zero.

115
00:08:07.270 --> 00:08:10.140
So you can see these right here went back down to zero.

116
00:08:10.360 --> 00:08:14.870
And as you may have imagined there's an inverse to that one so we can call that as well.

117
00:08:14.870 --> 00:08:16.210
And you basically get the opposite.

118
00:08:16.370 --> 00:08:18.220
These guys then go back down to zero.

119
00:08:18.380 --> 00:08:21.610
And these guys get to keep their original source values.

120
00:08:21.650 --> 00:08:22.340
OK.

121
00:08:22.370 --> 00:08:24.640
So that's a very simple image.

122
00:08:24.650 --> 00:08:27.500
Let's actually see a bit of a real world application.

123
00:08:27.530 --> 00:08:29.980
We're going to go ahead and do a couple of things here.

124
00:08:30.070 --> 00:08:35.530
I'm going to read in a new image file I will say C-v to read.

125
00:08:36.000 --> 00:08:44.110
And then inside of my data folder I'm going to say crossword that Jay Pead and then I'll say comma 0

126
00:08:44.230 --> 00:08:46.390
in order to read it in as a greyscale.

127
00:08:46.810 --> 00:08:52.070
And if you just say peel t him show on this image actually appears very small.

128
00:08:52.150 --> 00:08:56.290
And we also want to clarify the c map here should be gray.

129
00:08:56.290 --> 00:08:57.650
So this is a crossword image.

130
00:08:57.670 --> 00:09:02.890
It's actually pretty blurry because it's a large image but it's showing pretty small on the screen.

131
00:09:02.890 --> 00:09:09.480
What I'm going to do is set up a function in order to display this image will say show pick.

132
00:09:09.600 --> 00:09:18.040
It's going to take in the image and we'll say figure is equal to peel t figure thinks size.

133
00:09:18.120 --> 00:09:26.040
In this case I'm going to make it quite larger let's say 15 by 15 and then we'll say x is equal to Fig.

134
00:09:26.450 --> 00:09:33.350
Add subplot and hopefully you remember that we actually coded this out ourselves manually in the very

135
00:09:33.350 --> 00:09:38.300
first section of the course and they'll say X in Show image.

136
00:09:38.330 --> 00:09:40.540
See map great.

137
00:09:40.760 --> 00:09:44.750
So we've actually seen these three lines of code before and we're talking about showing images inside

138
00:09:44.750 --> 00:09:45.510
of a notebook.

139
00:09:45.670 --> 00:09:49.730
We're now we're just functional izing it into a convenient show pick function and we're actually going

140
00:09:49.730 --> 00:09:51.890
to be using this function quite a bit throughout the course.

141
00:09:52.010 --> 00:09:58.870
But if we define this function we can then show that image and WIPs let's make sure we imported everything.

142
00:09:58.910 --> 00:10:04.400
Size is not defined so that should be fixed size equals 15 by 15.

143
00:10:04.400 --> 00:10:05.840
Now it's from those again.

144
00:10:05.840 --> 00:10:06.350
And there we go.

145
00:10:06.350 --> 00:10:10.670
Now we have this image here so you can see here we have a crossword puzzle.

146
00:10:11.120 --> 00:10:16.940
And right now it's in black and white but also we can notice here that there is a lot of information

147
00:10:17.030 --> 00:10:19.790
in gray that we don't really care about or need.

148
00:10:19.790 --> 00:10:24.650
For example if we wanted to scan this and maybe do some sort of analysis on it you'll notice here that

149
00:10:24.770 --> 00:10:28.060
over in the white space the newspaper is appearing kind of gray.

150
00:10:28.160 --> 00:10:31.270
It will make a lot more sense if we would just say anywhere there's ink.

151
00:10:31.310 --> 00:10:33.650
It should be black and anywhere there's not ink.

152
00:10:33.680 --> 00:10:38.730
It should be white so we can just use a simple binary threshold and play around with this.

153
00:10:39.230 --> 00:10:41.820
So let's see what happens when we use a simple binary threshold.

154
00:10:42.040 --> 00:10:45.650
All realize that it's actually not super great at doing it's job.

155
00:10:45.830 --> 00:10:48.850
And then we learn about an adaptive threshold which is a little better.

156
00:10:49.190 --> 00:10:57.880
So say RTT and threshold one or if you want to call those two variables will say threshold in the image

157
00:10:58.330 --> 00:11:04.110
and then Passons them value for the threshold and pass and the max possible value which is 255.

158
00:11:04.570 --> 00:11:07.070
And then let's go ahead and say thrash.

159
00:11:07.100 --> 00:11:14.510
In this case let's use thresh binary and then we will show the pick of the new threshold image.

160
00:11:14.530 --> 00:11:18.170
So if you run that you can see that we've attempted to threshold the image.

161
00:11:18.280 --> 00:11:23.330
However we're losing a little bit of quality here because some of the gray spaces they got threshold

162
00:11:23.400 --> 00:11:26.460
to white when we actually wanted to keep them as black.

163
00:11:26.470 --> 00:11:28.510
There's a couple different ways to deal this problem.

164
00:11:28.510 --> 00:11:32.980
One is to try experimenting with the other thresholding types and the other is to try experimenting

165
00:11:32.980 --> 00:11:38.350
with a different level a threshold so maybe the size to go for a higher threshold and run this and actually

166
00:11:38.350 --> 00:11:39.830
grab more of the ink.

167
00:11:39.960 --> 00:11:44.770
So you can see here as I go with a higher higher threshold I get to grab more of those kind of darker

168
00:11:44.790 --> 00:11:47.050
grays and treat those as ink.

169
00:11:47.290 --> 00:11:52.240
But again that comes at the cost of some of the near spaces that are pretty dark gray.

170
00:11:52.420 --> 00:11:56.920
So maybe you want to lower this to some sort of in-between one to seven and 200.

171
00:11:56.920 --> 00:12:01.570
So you can start experimenting with this and see more and more what's an appropriate threshold.

172
00:12:01.680 --> 00:12:08.950
In other method to do is the adaptive threshold and the threshold what it does is it tries to automatically

173
00:12:09.010 --> 00:12:15.610
adapt its threshold based off the pixel and where the Great is around the pixel.

174
00:12:15.880 --> 00:12:22.660
So you can check out the notebook that we provide for a full explanation as far as the threshold parameters

175
00:12:22.930 --> 00:12:26.830
because it is at best a bit confusing as far as what the parameters are.

176
00:12:26.830 --> 00:12:31.660
So we're going to go ahead and do adaptive thresholding on this image and then we'll explain a little

177
00:12:31.660 --> 00:12:33.390
bit about what all the parameters mean.

178
00:12:34.700 --> 00:12:40.250
I would say threshold to notice I'm not doing tuple and packing for this one and I will say CB2 and

179
00:12:40.250 --> 00:12:43.370
then we're actually in call it different function called adaptive threshold.

180
00:12:43.760 --> 00:12:47.830
And this is going to take in a couple of parameters.

181
00:12:47.880 --> 00:12:52.170
We first take in the image and then we're going to say the max value.

182
00:12:52.280 --> 00:12:57.610
So the max possible value is 255 and then we're going to choose an adaptive method.

183
00:12:57.620 --> 00:13:01.690
So there's various adaptive methods available for us and open C.v.

184
00:13:01.730 --> 00:13:07.700
So if you begin typing adaptive you'll notice that there's Gaussian and mean so these are just essentially

185
00:13:07.760 --> 00:13:14.930
averaging the methods that we can use for the at that threshold and then we're going to also say the

186
00:13:15.350 --> 00:13:23.840
threshold type so we can say CB2 and then say thresh binary essentially after you do the actual adaptive

187
00:13:23.840 --> 00:13:28.250
threshold then what kind of threshold results do you actually want.

188
00:13:28.250 --> 00:13:33.050
So you want everything to be black and white or do you still want Grae's available after it's done.

189
00:13:33.100 --> 00:13:34.940
It's a data thresholding.

190
00:13:35.390 --> 00:13:41.750
And then you have two more parameters at the end which is the block size and the c constant the block

191
00:13:41.750 --> 00:13:47.420
size is the size of a pixel neighborhood that is used to calculate a threshold for a particular pixel

192
00:13:47.590 --> 00:13:53.210
at that the thresholding does is it such a going to look at a little neighborhood around a pixel to

193
00:13:53.210 --> 00:13:58.580
see whether or not the pixels next to it should be included and it's up to you what kind of sizes you

194
00:13:58.580 --> 00:13:59.140
want.

195
00:13:59.150 --> 00:14:02.470
Usually people like to play with things like 3 5 and 7.

196
00:14:02.480 --> 00:14:06.220
Keep in mind it does need to be an odd number just the way the math works.

197
00:14:06.320 --> 00:14:10.310
So we can choose something like 11 a little bit of experimentation is usually necessary here.

198
00:14:10.580 --> 00:14:12.970
And then you have a constant value at the end.

199
00:14:13.190 --> 00:14:16.490
And this constant is subtracted from the mean or weighted mean.

200
00:14:16.490 --> 00:14:19.670
And normally it is positive but it could be zero or negative as well.

201
00:14:19.880 --> 00:14:26.050
And again check out the link in our notebook that gives a little further explanation as far as good

202
00:14:26.220 --> 00:14:27.970
guessing values to start off with.

203
00:14:27.980 --> 00:14:34.020
Usually the first one you'll start with like 3 5 and 7 and 11 just odd numbers and keep going up.

204
00:14:34.100 --> 00:14:35.720
This one you're going to kind of play around with.

205
00:14:35.720 --> 00:14:40.910
But again it's all kind of guessing and checking here it's a little bit hard to have a good intuition

206
00:14:41.240 --> 00:14:45.310
for these sort of values but let's see the result of this and see how it performs.

207
00:14:45.590 --> 00:14:47.350
So this is now adaptive.

208
00:14:47.360 --> 00:14:52.850
Thresholding So it's looking at neighborhoods around these darker values of pixels and you can see here

209
00:14:53.150 --> 00:14:58.710
it's kind of interesting because it recognize the dark spaces filled in in the crossword.

210
00:14:58.710 --> 00:15:03.470
However because it's due to the adaptive thresholding sense looking at neighborhoods eventually decided

211
00:15:03.500 --> 00:15:04.790
not to fill them in.

212
00:15:04.790 --> 00:15:08.530
So it still recognizes them but it doesn't fill them in like it did previously.

213
00:15:08.570 --> 00:15:14.150
We went straight up with a binary threshold and we can be in again experimenting of values more and

214
00:15:14.150 --> 00:15:16.110
more here that the thresholding.

215
00:15:16.280 --> 00:15:22.910
And what we can even do is start mixing in ideas of things we already learn and actually blending images.

216
00:15:23.090 --> 00:15:26.000
So we could do is blend this threshold.

217
00:15:26.000 --> 00:15:31.560
One result that actually fills in these values with this threshold to which didn't fill in the values

218
00:15:31.610 --> 00:15:33.590
but maybe has clear text.

219
00:15:33.620 --> 00:15:39.680
So the way we do that is just as we described in the previous lecture we can say blended is equal to

220
00:15:39.680 --> 00:15:48.000
CB2 add waited and then we can just define what we want so we can say source one is equal to that first

221
00:15:48.000 --> 00:15:57.320
thresholding maybe give that one 60 percent and then source to make that one the 40 percent of the image.

222
00:15:57.320 --> 00:15:57.920
So we'll see.

223
00:15:57.930 --> 00:16:02.540
Th to where beta is an equal to 0.4.

224
00:16:02.880 --> 00:16:05.050
Now we can set in gamma 0.

225
00:16:05.070 --> 00:16:09.110
So that's our blended image and we can end up showing a picture of that one.

226
00:16:09.960 --> 00:16:14.640
And if you run that you're getting kind of a little bit of a nicer result here and you can experiment

227
00:16:14.730 --> 00:16:17.250
and match with kind of what the best results are.

228
00:16:17.280 --> 00:16:22.890
But this is also a common approach trying to use something that is a blend of different thresholds often

229
00:16:23.490 --> 00:16:26.920
in kind of more serious applications.

230
00:16:26.970 --> 00:16:31.920
People will just use an adaptive threshold and keep updating these parameters until they get something

231
00:16:31.920 --> 00:16:33.240
that they're satisfied with.

232
00:16:33.240 --> 00:16:36.320
So I encourage you to really play around with these parameters.

233
00:16:36.330 --> 00:16:40.100
You can also play around with the Gaussian and see how that performs.

234
00:16:40.110 --> 00:16:43.520
So you can run that one and see how that performs compared to the median.

235
00:16:43.680 --> 00:16:46.920
And then also play around with these threshold binary.

236
00:16:46.920 --> 00:16:52.020
You can even do an inverse if you really wanted to and get the opposite and then play around these sizes

237
00:16:52.080 --> 00:16:52.930
as well.

238
00:16:53.150 --> 00:16:53.670
OK.

239
00:16:53.790 --> 00:16:59.670
So the main ideas here is that we can always threshold images to basically go from something that's

240
00:16:59.730 --> 00:17:04.340
in grayscale to only two binary colors either white or black.

241
00:17:04.500 --> 00:17:06.360
And there's lots of different methods to do that.

242
00:17:06.390 --> 00:17:10.600
And we can even keep original values depending on the different types of thresholds we use.

243
00:17:10.760 --> 00:17:14.430
I encourage you to check the documentation again and make sure you understand how to read this.

244
00:17:14.430 --> 00:17:20.030
So for example threshold binary over here on the left it's going to tell you what the final result is.

245
00:17:20.100 --> 00:17:24.270
Over here on the right it's going to tell you the condition that decides its final result.

246
00:17:24.270 --> 00:17:28.950
So if the source of x and y is greater in a threshold then that value becomes the max value possible

247
00:17:28.950 --> 00:17:29.990
that you provided.

248
00:17:30.180 --> 00:17:31.860
Otherwise it becomes a zero.

249
00:17:31.860 --> 00:17:34.260
So that's how you read this sort of mathematical notation.

250
00:17:34.590 --> 00:17:35.030
OK.

251
00:17:35.250 --> 00:17:37.750
If you have any questions feel free to post the Q&amp;A forums.

252
00:17:37.830 --> 00:17:40.000
We'll be using thresholding throughout the course.

253
00:17:40.020 --> 00:17:40.720
We'll see it there.
