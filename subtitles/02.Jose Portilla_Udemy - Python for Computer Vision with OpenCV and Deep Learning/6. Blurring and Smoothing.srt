1
00:00:05,250 --> 00:00:12,120
Welcome back in this series of lectures we're going to talk about blurring and smoothing images a common

2
00:00:12,120 --> 00:00:16,920
operation for image processing is blurring or smoothing an image and smoothing an image can help get

3
00:00:16,920 --> 00:00:22,320
rid of noise or help a computer vision application focus on general details.

4
00:00:22,350 --> 00:00:26,070
Keep in mind there are many methods of blurring and smoothing and we're getting over quite a few of

5
00:00:26,070 --> 00:00:26,480
them.

6
00:00:28,150 --> 00:00:33,980
Now often blurring and smoothing is combined with edge detection edge detection algorithms detect too

7
00:00:34,000 --> 00:00:37,950
many edges when Schoeni high resolution image without any blurring.

8
00:00:37,960 --> 00:00:42,160
And since we're going to be learning about edge detection later on in a feature section of the course

9
00:00:42,550 --> 00:00:45,620
we might as well understand blurring and smoothing at this point.

10
00:00:46,940 --> 00:00:50,790
So just to show you a quick example of why blurring or smoothing an image is useful.

11
00:00:50,900 --> 00:00:54,460
Let's imagine that we have an original image of a dogs all the way on the left.

12
00:00:54,460 --> 00:01:00,410
We have a dog's face and if we try to detect the edges in that particular image without any blurring

13
00:01:00,730 --> 00:01:02,330
we would get the middle figure.

14
00:01:02,360 --> 00:01:06,320
And you can see here that it's too noisy of an image has too much detail.

15
00:01:06,500 --> 00:01:08,550
So we're detecting far too many noises.

16
00:01:08,570 --> 00:01:13,490
And if we want to detect just general edges and shapes what we can do is we can blur the image first

17
00:01:13,550 --> 00:01:19,210
and try to smooth it out and then apply a edge detection algorithm on it and we'll see what we have

18
00:01:19,240 --> 00:01:24,250
although in the right where we can clearly start to see the edges of the distinct dog's face.

19
00:01:25,770 --> 00:01:28,030
So we're to be exploring quite a few methods.

20
00:01:28,050 --> 00:01:32,670
One method we'll be exploring is called gamma correction and give a correction is actually not so much

21
00:01:32,730 --> 00:01:38,670
a smoothing or blurring but instead it can be applied to an image to make it appear brighter or darker

22
00:01:38,760 --> 00:01:40,700
depending on the gamma value chosen.

23
00:01:40,800 --> 00:01:45,780
So over there on the right hand side I have an image and right in the middle we have Gamma's equal to

24
00:01:45,780 --> 00:01:49,240
one or the original image and that's the second from the top.

25
00:01:49,410 --> 00:01:54,670
And then we can apply a gamma correction to make the image appear brighter or darker.

26
00:01:54,840 --> 00:02:00,630
And if you've ever kind of messed around with any sort of photo apps software where you can make an

27
00:02:00,630 --> 00:02:04,430
image brighter or make an image darker that is gamma correction in action.

28
00:02:04,470 --> 00:02:09,170
So we're going to actually show you how you can do gamma correction open C-v.

29
00:02:09,300 --> 00:02:12,700
Then after that we're going to be exploring kernel based filters.

30
00:02:12,720 --> 00:02:18,000
Kernel's can be applied over an image to produce a variety of effects and the best way to explain really

31
00:02:18,060 --> 00:02:21,330
how the kernel works is through an interactive visualization.

32
00:02:21,540 --> 00:02:27,150
I'm actually going to go and open my browser to start with the I know slash slash image dash kernel's

33
00:02:27,210 --> 00:02:31,950
and that's going to help us understand what we actually mean or talking about kernel based filters because

34
00:02:32,010 --> 00:02:37,310
a lot of smoothing and blurring operations actually the pen on what's known as a kernel operation.

35
00:02:37,380 --> 00:02:39,960
Let's go ahead and go to this link and then explain further.

36
00:02:40,230 --> 00:02:45,870
OK here we are at the link on image kernel's and this link is a really nice visualization of how kernel's

37
00:02:45,930 --> 00:02:51,630
actually work in an image kernel is essentially just a small matrix use to apply effects and those effects

38
00:02:51,630 --> 00:02:56,880
can be anything really depending on the kernel and the ones we're going to look at in this particular

39
00:02:57,120 --> 00:03:02,430
series of lectures are the smoothing and blurring effects we can see here that we have an image of a

40
00:03:02,430 --> 00:03:03,570
person's face.

41
00:03:03,570 --> 00:03:07,290
And here we have all the way on the right the tiny little original image and then we kind of blew it

42
00:03:07,290 --> 00:03:10,650
up so we can see each of the pixels and the particular values.

43
00:03:10,650 --> 00:03:16,320
So notice all the value should be somewhere between 0 and 255 because it is a gray scale image.

44
00:03:16,320 --> 00:03:19,000
So right now we're just inspecting a black and white image.

45
00:03:19,110 --> 00:03:24,450
And if you're at this link you can begin to kind of hover over and see how each particular value as

46
00:03:24,450 --> 00:03:29,100
you kind of hover over it you get to see the value on the left hand side of the actual lightness or

47
00:03:29,100 --> 00:03:29,790
darkness.

48
00:03:29,880 --> 00:03:35,820
And then it highlights the corresponding image or pixel in the image on the right hand side.

49
00:03:35,820 --> 00:03:40,920
Now what we're going to do is a plie a kernel and there's different kernels that you can apply and a

50
00:03:40,920 --> 00:03:45,600
kernel is essentially just a matrix and you can see here that there's different types of kernels so

51
00:03:45,660 --> 00:03:47,770
we can actually choose the blur kernel.

52
00:03:47,970 --> 00:03:51,910
In this case the kernel is going to allow us to blur the image above.

53
00:03:51,930 --> 00:03:58,170
So the way this works is we take a three by three block of pixels on the image on the left hand side

54
00:03:58,290 --> 00:04:03,030
and we're going to multiply each pixel by the corresponding entry of the kernel and then take the sum

55
00:04:03,420 --> 00:04:07,800
that some then becomes the new pixel on the image on the right.

56
00:04:07,800 --> 00:04:13,410
So let's actually go through this process we're going to start over here towards the actual top left

57
00:04:13,410 --> 00:04:14,460
of the image.

58
00:04:14,460 --> 00:04:20,640
So notice here how right now on the original input image I'm scanning a kernel and this kernel is a

59
00:04:20,640 --> 00:04:26,470
3 by 3 kernel where the values are if we scroll back up these particular values right here.

60
00:04:26,520 --> 00:04:32,070
And this is known as a blur kernel because after lots of studies they've seen that this can actually

61
00:04:32,070 --> 00:04:37,980
blur an image effectively and there is as I mentioned many different types kernel's ones that sharpen

62
00:04:37,980 --> 00:04:42,330
one that do outlines etc. but since we're focused on blurring it's moving we're just gonna look at this

63
00:04:42,330 --> 00:04:43,990
blur kernel first.

64
00:04:44,340 --> 00:04:50,280
So we have this kernel and what we're doing is we take as we scan the image we take those nine values

65
00:04:50,310 --> 00:04:55,710
of the three by three grid of pixels in the original image and they're going to multiply by each corresponding

66
00:04:55,710 --> 00:04:57,020
value in the kernel.

67
00:04:57,030 --> 00:05:02,700
So here you can see that if I'm looking at that corner then that's two or six times that point 0 6 to

68
00:05:02,700 --> 00:05:03,170
five.

69
00:05:03,180 --> 00:05:09,510
But the kernel plus the other multiplication of two or five times point 1 to 5 and so on.

70
00:05:09,510 --> 00:05:13,630
So you end up adding all those images and then you end up getting an output.

71
00:05:13,680 --> 00:05:18,660
So one seventy eight and that becomes the new corner image of the output.

72
00:05:18,660 --> 00:05:22,890
So notice here when we apply the blur we can actually see even though we're quite zoomed in on this

73
00:05:22,890 --> 00:05:26,220
image it does appear to have blurred the image.

74
00:05:26,220 --> 00:05:31,770
Now something to note is that as you are scanning a three by three if you start looking towards the

75
00:05:31,770 --> 00:05:36,210
edge of an image you're actually not going to have enough pixels so something you can do is just end

76
00:05:36,210 --> 00:05:38,600
up having the output image with a border.

77
00:05:38,640 --> 00:05:41,760
And there's different ways of dealing with actual borders of images.

78
00:05:41,760 --> 00:05:46,020
When it comes to kernels and we're gonna discuss that in more detail specifically when we talk about

79
00:05:46,110 --> 00:05:53,760
convolutional neural networks that heavily depend on the sort of kernel function in order to apply changes

80
00:05:53,760 --> 00:05:56,570
to an image and learn larger and larger features.

81
00:05:56,570 --> 00:06:03,270
But right now the main idea I want you to understand is we can take an image of values just like we

82
00:06:03,270 --> 00:06:03,840
have here.

83
00:06:03,870 --> 00:06:04,740
We have all these images.

84
00:06:04,740 --> 00:06:10,830
This happens to be scale and then we can apply a kernel to it and all the kernel does is it takes the

85
00:06:10,830 --> 00:06:13,260
shape of the pixels of the kernel.

86
00:06:13,440 --> 00:06:15,310
So right here we have a three by three kernel.

87
00:06:15,330 --> 00:06:20,280
So we take three by three pixels and then we multiply it by the kernel values and then we sum them up

88
00:06:20,370 --> 00:06:21,950
and that's our new output value.

89
00:06:22,110 --> 00:06:26,440
So we can see as you move along what the new output values are and is a great way to visualize this.

90
00:06:26,550 --> 00:06:31,300
And I encourage you to come to his Web site and then check out other ones so the Sobol ones we're actually

91
00:06:31,300 --> 00:06:32,600
going to be checking these out as well.

92
00:06:32,610 --> 00:06:36,990
So you can see here how it ends up detecting certain edges on the left or on the right.

93
00:06:37,380 --> 00:06:37,930
OK.

94
00:06:38,100 --> 00:06:42,080
So in the next lecture we're actually going explore these further with open C.v.

95
00:06:42,120 --> 00:06:42,860
I'll see you there.
