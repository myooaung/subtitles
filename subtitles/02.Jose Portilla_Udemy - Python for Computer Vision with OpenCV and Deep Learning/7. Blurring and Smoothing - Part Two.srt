1
00:00:05,220 --> 00:00:08,150
Welcome back everyone to part two of blurring and smoothing.

2
00:00:08,250 --> 00:00:12,690
In part one we actually didn't really coat anything we just explain a little bit about blurring and

3
00:00:12,690 --> 00:00:16,700
smoothing what gamma correction is and also what a kernel is.

4
00:00:16,710 --> 00:00:21,510
Now it's time to actually use these functions of open see the let's get started opening up the Jupiter

5
00:00:21,510 --> 00:00:22,490
notebook.

6
00:00:22,560 --> 00:00:22,850
All right.

7
00:00:22,860 --> 00:00:24,750
We're going to start off with a couple of imports.

8
00:00:24,780 --> 00:00:30,220
I want to import CB2 and then just in case I need them later on important unpleasant.

9
00:00:30,510 --> 00:00:32,210
And we'll be displaying images as well.

10
00:00:32,340 --> 00:00:41,450
So we'll say import map plot lib pipe plot as T and map plot lib in line OK.

11
00:00:41,710 --> 00:00:45,370
Now the image we're going to be using is an image of bricks.

12
00:00:45,370 --> 00:00:50,440
And the reason we chose this image for blurring it's moving is because usually you can see each outline

13
00:00:50,440 --> 00:00:52,200
of each brick really clearly.

14
00:00:52,210 --> 00:00:55,750
So what we're going to be doing is blurring this image and then later on we'll actually also add some

15
00:00:55,750 --> 00:00:58,230
text to the image to see different effects.

16
00:00:58,240 --> 00:01:01,580
However what I want to do is do a couple of convenience functions.

17
00:01:01,720 --> 00:01:06,850
And in fact I'm actually just going to copy these functions directly from The Notebook.

18
00:01:06,910 --> 00:01:12,430
So go ahead feel free to do the same this first camions function that's in the notebook for this lecture.

19
00:01:12,430 --> 00:01:17,440
It just loads the image because we're going to be blurring the image and the blurring happens in place.

20
00:01:17,440 --> 00:01:21,470
I want to have a quick function that allows me to just quickly reload this image over and over again.

21
00:01:21,640 --> 00:01:27,310
However you may need to actually edit the string here so I'm going to edit it because my data folder

22
00:01:27,540 --> 00:01:30,830
is in the same directory as its notebook so I'm going to get rid of that.

23
00:01:30,970 --> 00:01:31,630
Thot thot thot.

24
00:01:31,630 --> 00:01:32,610
Forward slash.

25
00:01:32,820 --> 00:01:33,350
OK.

26
00:01:33,550 --> 00:01:35,250
So there's my load image function.

27
00:01:35,260 --> 00:01:36,280
Let's check that it works.

28
00:01:36,280 --> 00:01:42,020
We're going to say load image and there it's load in the array of the image.

29
00:01:42,050 --> 00:01:42,500
OK.

30
00:01:42,770 --> 00:01:47,670
So that's working that I'm going to copy and paste the display image function.

31
00:01:47,670 --> 00:01:49,000
So Copy that.

32
00:01:49,160 --> 00:01:53,350
And again I just copied this from the notes and we've already seen this function a couple of times.

33
00:01:53,360 --> 00:01:55,890
It just displays the image a little larger.

34
00:01:56,000 --> 00:02:03,360
And now with these two functions I should be able to do the following I is equal to load image and then

35
00:02:03,780 --> 00:02:06,540
display image on I.

36
00:02:06,720 --> 00:02:09,680
And if you run that you should see the bricks right here.

37
00:02:09,720 --> 00:02:12,990
Again it's just a white wall of bricks with some blue painted on top of it.

38
00:02:13,170 --> 00:02:16,710
And we're going to be performing different sort of blurring and smoothing effects.

39
00:02:16,770 --> 00:02:21,540
The very first effect actually to be performed though is gamma correction recall from the previous lecture

40
00:02:21,540 --> 00:02:27,090
that gamma correction allows you to increase or decrease what is perceived as brightness in the actual

41
00:02:27,090 --> 00:02:27,670
image.

42
00:02:27,810 --> 00:02:29,420
And it's pretty straightforward.

43
00:02:29,430 --> 00:02:35,730
All we need to do is load up the image which she already did and then choose a gamma value if you choose

44
00:02:35,730 --> 00:02:40,340
a game a value of less than one then we are going to end up doing is making the image appear brighter.

45
00:02:40,440 --> 00:02:44,020
So I'll choose one over four as our gamma.

46
00:02:44,040 --> 00:02:45,200
It's less than one.

47
00:02:45,300 --> 00:02:52,440
And if you want to affect the image and all you need to do is say N.P. power and then pass in the image

48
00:02:52,860 --> 00:02:54,030
and then pass in the Gamma.

49
00:02:54,090 --> 00:02:59,940
So all this is going to do is take every pixel value in the image and raise it to the power of gamma

50
00:02:59,940 --> 00:03:02,390
which in this case is 1 over 4.

51
00:03:02,490 --> 00:03:09,870
And let's have this be the result and then we're going to display image of result.

52
00:03:10,000 --> 00:03:12,860
So look so we have that image not defined.

53
00:03:12,920 --> 00:03:19,710
It's actually just I there we go run that and now we can see because we chose a gamma of less than 1

54
00:03:20,010 --> 00:03:21,630
The image appears to be brighter.

55
00:03:21,850 --> 00:03:26,000
And I just start going with smaller and smaller values of gamma like 110.

56
00:03:26,340 --> 00:03:29,790
And you read this again you're eventually just going to fade out into white.

57
00:03:29,790 --> 00:03:33,580
So keep that in mind if you start using game values that are above 1.

58
00:03:33,720 --> 00:03:35,820
He'll end up making the image appear darker.

59
00:03:35,820 --> 00:03:39,990
So if I choose a game of two and rerun these then knows what happens.

60
00:03:39,990 --> 00:03:41,160
Now the image appears darker.

61
00:03:41,160 --> 00:03:46,140
Here's my original image and I look at the blue here it's much darker and you can choose really high

62
00:03:46,260 --> 00:03:50,260
values gamma like 8 and you'll see that it almost hurts looking black.

63
00:03:50,550 --> 00:03:51,940
OK so that's gamma correction.

64
00:03:52,140 --> 00:03:56,420
Again the practical effect is just increasing or decreasing brightness of the image.

65
00:03:56,580 --> 00:03:59,190
And all you really need to do for that is just a little bit of simple math.

66
00:03:59,340 --> 00:04:03,810
Take the pixel array values and then raise them by the power of gamma which is conveniently done with

67
00:04:04,310 --> 00:04:11,820
that power says that for all the layers across the image that we're going to move on to our first blurring

68
00:04:12,300 --> 00:04:18,240
and the blurring we're going to do is what's known as a low pass filter with a 2D convolution and to

69
00:04:18,240 --> 00:04:22,470
start off the first thing I want to do is actually want to write some text onto this image.

70
00:04:22,530 --> 00:04:27,120
And the reason for that is sometimes it's a little hard to see the difference between a couple of the

71
00:04:27,120 --> 00:04:28,740
blurring and smoothing techniques.

72
00:04:28,860 --> 00:04:33,690
And if you write a little bit of text on the image that differentiation becomes a little more clear.

73
00:04:34,140 --> 00:04:37,670
So let's start off by just loading our image afresh.

74
00:04:37,760 --> 00:04:46,260
We will say I am g is equal to load image or load I am g and what I'm going to do is say font is equal

75
00:04:46,260 --> 00:04:54,860
to CB2 font and I'm going to choose Hershey complex I just tab autocomplete there and then CB2 we're

76
00:04:54,890 --> 00:04:56,750
going to put some text onto that image.

77
00:04:56,850 --> 00:05:04,500
So say image the text we're going to write is bricks and the actual position we're going to put it in

78
00:05:04,650 --> 00:05:15,290
is a 10 600 the font face for choosing is the font that we just to find the font scale going to be a

79
00:05:15,290 --> 00:05:19,890
little larger around 10 and the color just to make it obvious against the blue note to make it red.

80
00:05:19,940 --> 00:05:28,360
So 2 5 5 0 0 and then the thickness is going to be four OK.

81
00:05:28,410 --> 00:05:31,170
So let's let's actually display that image

82
00:05:35,280 --> 00:05:38,590
and don't worry if you get this sort of value here.

83
00:05:38,790 --> 00:05:43,220
Basically what that means is you have some values that fall outside of the range are to 1 or two hundred

84
00:05:43,230 --> 00:05:44,050
fifty five.

85
00:05:44,100 --> 00:05:46,480
So it's just clipping them down again if you get this warning.

86
00:05:46,530 --> 00:05:47,180
Not a big deal.

87
00:05:47,190 --> 00:05:48,230
You don't need to worry about it.

88
00:05:48,420 --> 00:05:48,960
OK.

89
00:05:49,050 --> 00:05:53,040
So here we have now the image of the bricks and now it says bricks on top of it.

90
00:05:53,070 --> 00:05:57,420
We're going to be constantly reloading this image so you're going to see me come back and copy and paste

91
00:05:57,420 --> 00:06:00,260
this code a bunch of times so keep this code handy.

92
00:06:00,270 --> 00:06:03,480
It's going to be used over and over again in this lecture.

93
00:06:03,480 --> 00:06:09,750
But the reason I added this text is I can see due to this particular font that there is some lines in

94
00:06:09,750 --> 00:06:11,930
between some of the markings of the letters.

95
00:06:12,090 --> 00:06:16,440
For example in this I there's some space in between those two lines or this are just a space between

96
00:06:16,440 --> 00:06:17,200
those lines.

97
00:06:17,280 --> 00:06:22,950
Same as in that C and that curve and that be when we actually perform blurring and smoothing those spaces

98
00:06:22,980 --> 00:06:27,360
are going to be blurred out or move to different degrees depending on what kind of smoothing techniques

99
00:06:27,360 --> 00:06:28,060
we apply.

100
00:06:28,290 --> 00:06:29,750
So that's the first thing you can do.

101
00:06:29,880 --> 00:06:34,950
And the next we're going to do is set up our kernel for that low pass filter and the kernel for this

102
00:06:35,040 --> 00:06:42,220
is a really simple one the kernel we're going to decide on is N.P. once the shape we're going to give

103
00:06:42,220 --> 00:06:44,100
it is 5 by 5.

104
00:06:44,110 --> 00:06:46,820
Remember from the previous lecture we see a kernel of three by three.

105
00:06:46,840 --> 00:06:48,820
So this is just a little bit of a larger kernel.

106
00:06:49,150 --> 00:06:54,040
And that data type are going to choose to make sure everything is compatible they say the float

107
00:06:56,810 --> 00:07:04,250
32 bit and then I'm going to take the whole thing and divide it by 25 so that everything is at 1 over

108
00:07:04,250 --> 00:07:06,530
25.

109
00:07:06,530 --> 00:07:15,370
So if I took out my kernel those it's a bunch of 0.04 and if you did one over 25 loops one over 15 one

110
00:07:15,380 --> 00:07:18,260
over 25 that's equal to 0.04.

111
00:07:18,260 --> 00:07:21,880
So here we have a bunch of ones and all those ones I divide by 25.

112
00:07:22,010 --> 00:07:23,850
So now I have a bunch of 0.04.

113
00:07:23,930 --> 00:07:28,990
And that is my kernel then what I'm going to do is just apply a to the filter on it.

114
00:07:29,030 --> 00:07:36,320
The syntax for that to the filter is simply going to be CB2 filter and then to capital-T and the output

115
00:07:36,320 --> 00:07:38,690
of this is going to be any variable you wants.

116
00:07:38,690 --> 00:07:42,020
Often people just say DST as destination.

117
00:07:42,110 --> 00:07:44,450
So we have that destination output that DST variable.

118
00:07:44,450 --> 00:07:48,380
And that's going to spit out after you apply the kernel to the entire image.

119
00:07:48,380 --> 00:07:54,380
So we have seen to filter to D and then we're going to do is pass in the image so we want to actually

120
00:07:54,380 --> 00:07:56,180
apply the filter too.

121
00:07:56,300 --> 00:08:02,220
And the second parameter is known as desired depth and we do as you just passen negative one.

122
00:08:02,300 --> 00:08:04,870
That way the output that that you desire.

123
00:08:04,970 --> 00:08:10,540
Negative One means I want the input that to actually assign the desired output.

124
00:08:10,820 --> 00:08:15,890
And if you're a little curious what does that actually means you can check out the links in the resource

125
00:08:15,890 --> 00:08:16,960
for this lecture.

126
00:08:16,970 --> 00:08:22,100
There are some good stack overflow links as well as links to documentation that describe the site depth

127
00:08:22,220 --> 00:08:27,520
and a little more detail on image filtering as well as Image type versus image.

128
00:08:28,040 --> 00:08:31,370
Really for our use case we don't really need to worry about that we're always going to be using native

129
00:08:31,370 --> 00:08:35,730
one which defines that we want the output to be the same as the input.

130
00:08:35,840 --> 00:08:37,890
And again there's more explanations here.

131
00:08:38,140 --> 00:08:41,150
OK so we're going to come back out here.

132
00:08:41,180 --> 00:08:45,590
And once you chosen negative one so that the input that is the same as the output that what we want

133
00:08:45,590 --> 00:08:46,870
to do is pass the kernel.

134
00:08:46,940 --> 00:08:51,170
Remember we already defined the kernel up here so we have this variable we're going to apply the entire

135
00:08:51,170 --> 00:08:52,020
kernel to it.

136
00:08:52,310 --> 00:08:59,420
And then once we do that let's display the resulting image will say display AMG and then DST we run

137
00:08:59,420 --> 00:09:03,680
that again you don't need to worry about this particular warning is just telling you that it clipped

138
00:09:03,680 --> 00:09:10,210
some values that were either above 1 or above 255 and you'll notice that things do appear to be blurred

139
00:09:10,220 --> 00:09:12,600
now if we take a look at the original image.

140
00:09:12,620 --> 00:09:18,500
Notice here that we can see the bricks very clearly and we can see the blue in between these lines in

141
00:09:18,500 --> 00:09:22,610
the text and that's where we have the text there because it makes the blurriness smoothing really obvious.

142
00:09:22,610 --> 00:09:27,330
And if you come back down here you'll notice that there appears to be almost like a pink in between

143
00:09:27,620 --> 00:09:31,730
where there used to be that spacing in the letters and it doesn't happen to every single letter but

144
00:09:31,790 --> 00:09:33,570
it happens to the majority of them.

145
00:09:34,130 --> 00:09:38,810
And I would encourage you to play around the kernel size make it smaller make larger She has different

146
00:09:38,810 --> 00:09:41,470
values and see how that affects the actual image.

147
00:09:41,700 --> 00:09:42,320
OK.

148
00:09:42,590 --> 00:09:44,400
Now let's go ahead and reset everything.

149
00:09:44,420 --> 00:09:46,210
We're going to do is come back up here.

150
00:09:47,070 --> 00:09:48,770
And then copy this command.

151
00:09:48,870 --> 00:09:51,150
So this is a command we're going to be coming all day.

152
00:09:51,150 --> 00:09:58,270
So you can feel free to functionally is it going to copy come back down here and reset my image and

153
00:09:58,270 --> 00:10:00,410
then I'm going to print something like reset.

154
00:10:00,440 --> 00:10:03,090
So we don't see that trinary OK.

155
00:10:03,160 --> 00:10:04,230
So we've reset the image.

156
00:10:04,270 --> 00:10:07,090
We have that loaded image and now we have that fresh text on it.

157
00:10:07,180 --> 00:10:10,850
We're going to also show you now is how you can smooth based off averaging.

158
00:10:11,110 --> 00:10:12,310
And you may have expected.

159
00:10:12,350 --> 00:10:17,370
There's actually a default blur colonel that we showed you in the previous lecture.

160
00:10:17,590 --> 00:10:22,570
You can actually just apply that kernel by saying CB2 Doppler.

161
00:10:23,080 --> 00:10:28,210
And then you pass in the image and then you pass in whatever kernel size you want for the default blurring

162
00:10:28,210 --> 00:10:35,400
kernel So previously we manually the find the kernel and then use that filter to the to apply the kernel

163
00:10:35,400 --> 00:10:36,180
to the image.

164
00:10:36,180 --> 00:10:39,610
Now we're just going to use CB2 built in blurt kernel.

165
00:10:39,720 --> 00:10:46,300
Same concept here except now they've chosen specific values for the Blar then they're going to say blurred

166
00:10:46,900 --> 00:10:47,890
is equal to that.

167
00:10:47,890 --> 00:10:53,570
The result of blurring the image and Elyssa splay those results so the split image blurred.

168
00:10:53,920 --> 00:10:58,540
We run that and then we can see again here that the image has clearly been blurred the lines are not

169
00:10:58,540 --> 00:10:59,250
so distinct.

170
00:10:59,290 --> 00:11:03,460
And then we can see a little bit of that pink coming along in the bricks.

171
00:11:03,460 --> 00:11:07,840
And here I would again encourage you to kind of play around with the kernel size so we can even make

172
00:11:07,940 --> 00:11:12,190
something like 10 by 10 and see how that affects the actual results.

173
00:11:12,190 --> 00:11:18,070
So you can run that and you can see the colonel got really large then the blurring became more intense.

174
00:11:18,070 --> 00:11:18,630
OK.

175
00:11:18,730 --> 00:11:25,480
So there's other things like Gaussian blurring and median blurring which just take a group of pixels

176
00:11:25,540 --> 00:11:29,880
and then go along and calculate the averages and then make those the outputs.

177
00:11:29,890 --> 00:11:35,320
So as you may suspect that we're just going to copy and paste this line of code or we're going to reload

178
00:11:35,320 --> 00:11:37,230
the image fresh.

179
00:11:37,300 --> 00:11:41,240
So now I have my fresh image and you can always check on this by just displaying it.

180
00:11:41,500 --> 00:11:46,830
So Fidei if I say the split image I see that nice crisp outline with the bricks.

181
00:11:46,840 --> 00:11:52,780
So I'm going to comment that out and then let's apply a Gaussian and median blurring which is you just

182
00:11:52,840 --> 00:11:57,170
averaging techniques very similar to what actually the CB2 that blurred those.

183
00:11:57,370 --> 00:12:04,910
But in this case only to say CB2 dot gaussian blur.

184
00:12:05,050 --> 00:12:11,200
And what this does as far as arguments it takes in it takes in the source image the kernel size.

185
00:12:11,200 --> 00:12:16,540
And then what you choose as your Sigma value and for your Sigma value if you come down here the sigma

186
00:12:16,630 --> 00:12:18,490
is going to be the standard deviation.

187
00:12:18,550 --> 00:12:26,720
And usually people just tend to assign Sigma X and then Sigma Y is then set automatically to Sigma X..

188
00:12:26,900 --> 00:12:33,080
OK so we're going to do here is pass in the image passenger kernel size again things can play around

189
00:12:33,080 --> 00:12:37,860
with and then just by playing around I'd to choose a single value 10.

190
00:12:38,300 --> 00:12:46,160
So we're going to say blurred image and let's display that blurred image and also something I want you

191
00:12:46,160 --> 00:12:49,080
to keep in mind is there is no right or wrong way to the spoiler images.

192
00:12:49,220 --> 00:12:50,860
There's no right or wrong kernel size.

193
00:12:50,870 --> 00:12:52,420
A lot of it is often just guess and check.

194
00:12:52,460 --> 00:12:56,780
See what works well specifically see what works well with the pipeline of application you're trying

195
00:12:56,780 --> 00:12:57,680
to discover.

196
00:12:57,680 --> 00:13:01,460
So if you're trying to edge detection you probably try a bunch of them from Blur's and then see which

197
00:13:01,460 --> 00:13:04,400
one works the best with your particular edge detection technique.

198
00:13:04,430 --> 00:13:05,790
But let me go ahead and run this.

199
00:13:05,930 --> 00:13:07,030
And here we go again.

200
00:13:07,070 --> 00:13:08,360
We can see the blur happening.

201
00:13:08,360 --> 00:13:09,800
So you can see a little pink here.

202
00:13:09,830 --> 00:13:11,420
The lines are not so clear.

203
00:13:11,570 --> 00:13:15,430
And we're going to show you a very similar blurring technique.

204
00:13:15,440 --> 00:13:17,200
So we went with gaussian blur.

205
00:13:17,300 --> 00:13:18,070
We showed you blur.

206
00:13:18,080 --> 00:13:19,950
We showed her own custom kernel blur.

207
00:13:20,180 --> 00:13:24,170
And another one that you can do is median blur for the median blur.

208
00:13:24,180 --> 00:13:27,950
All you need to do is say CB2 median blur.

209
00:13:28,350 --> 00:13:31,560
And then the parameter is just going to pass in the image and then case size.

210
00:13:31,560 --> 00:13:34,710
So the kernel size this has to be a square kernel.

211
00:13:34,740 --> 00:13:40,650
So it ends up just taking one argument so we can just say 5 which basically translates to five by five.

212
00:13:40,650 --> 00:13:45,140
And what we do here is just say median results are really whatever you want to call that variable.

213
00:13:45,420 --> 00:13:52,500
Analysts display their results so say the split image and say median results run that and there we have

214
00:13:52,500 --> 00:13:53,620
that sort of blurring.

215
00:13:53,640 --> 00:13:59,430
So this one is really interesting because you'll notice that the foreground here of this text it doesn't

216
00:13:59,430 --> 00:14:04,040
actually appear to be blurred in the middle of these lines as before.

217
00:14:04,110 --> 00:14:09,210
So if we come back up here we definitely see that pink hue coming into play as well as the background

218
00:14:09,210 --> 00:14:11,880
being Blar with this sort of medium blurry.

219
00:14:12,030 --> 00:14:18,330
It actually tends to be really good at removing noise from an image while trying to keep certain details

220
00:14:18,390 --> 00:14:19,250
in check.

221
00:14:19,320 --> 00:14:24,450
So you notice that we've removed what essentially is some sort of noise from the brick so it doesn't

222
00:14:24,450 --> 00:14:29,900
look as detail but we're able to keep in the detail of the actual text of bricks.

223
00:14:29,910 --> 00:14:35,420
So that's what makes median blurring a really interesting technique for reducing image noise.

224
00:14:35,490 --> 00:14:40,020
And if you've ever played around with Photoshop and you've seen some filters for removing noise from

225
00:14:40,020 --> 00:14:44,310
an image usually what they're doing is they're actually just applying a median blur.

226
00:14:44,700 --> 00:14:48,940
So let's go ahead and see this in action in a more realistic example.

227
00:14:48,960 --> 00:14:53,010
Right now we've been playing with his Brick's image which is a really realistic use case instead.

228
00:14:53,040 --> 00:14:57,900
I want to show you an image that already has noise and how we could remove noise from it.

229
00:14:58,020 --> 00:15:03,370
We're going to see image or AMG is equal to CV to him read.

230
00:15:03,600 --> 00:15:06,060
And I'm going to read it from the data folder.

231
00:15:06,060 --> 00:15:08,540
There is a picture called Sammy.

232
00:15:08,550 --> 00:15:10,410
But Jay peg.

233
00:15:10,640 --> 00:15:13,360
And then we need to actually correct the color for this image.

234
00:15:13,460 --> 00:15:26,780
We will say CB2 CBT color pass in the image and as usual say CB2 color blue green red to red green blue

235
00:15:27,960 --> 00:15:35,370
so run those commands and then display this image and you should see a picture of my dog Sammy.

236
00:15:35,540 --> 00:15:35,920
OK.

237
00:15:36,080 --> 00:15:37,430
So this is a picture of Sammy.

238
00:15:37,460 --> 00:15:39,410
This is what a normal picture of him looks like.

239
00:15:39,540 --> 00:15:44,230
And I ended up doing was I decided to make a noisy version of this image.

240
00:15:44,360 --> 00:15:48,670
So I went ahead and with a little bit of code I made a noise image and I want to load it for you know

241
00:15:48,710 --> 00:15:55,290
we're going to say noise image is equal to CB2 image read.

242
00:15:55,540 --> 00:16:01,710
And in that same data folder there is a picture called Samie noise.

243
00:16:01,900 --> 00:16:04,400
And this one actually already color corrected for you.

244
00:16:04,690 --> 00:16:12,940
So if you run this and display the image here you say display image the noise image you'll notice it's

245
00:16:12,940 --> 00:16:15,370
actually the same image but it's way noisier.

246
00:16:15,370 --> 00:16:16,890
So we added a bunch of noise to this.

247
00:16:16,900 --> 00:16:22,510
You can see here the way that this is I just randomly chose values and or Ramli chose pixels and made

248
00:16:22,510 --> 00:16:23,570
them ran the values.

249
00:16:23,620 --> 00:16:26,780
So this way there's kind of this weird noise that's happening here.

250
00:16:26,800 --> 00:16:30,930
So here's the original image and then here's the noisy version of the image.

251
00:16:30,940 --> 00:16:35,880
Now let's see if we can use median blur to try to fix this sort of noise try to remove it.

252
00:16:36,100 --> 00:16:41,570
So what I will do is say median is equal to CB2.

253
00:16:41,800 --> 00:16:44,960
I'm going to call the median blur function.

254
00:16:45,740 --> 00:16:51,530
I'm going to pass on the noise image and the passive 5 by 5 kernel for the medium Blar and five actually

255
00:16:51,530 --> 00:16:52,850
ends up being a really common value.

256
00:16:52,840 --> 00:16:58,190
So I would recommend starting with five and then working are way higher if you need more Blar then let's

257
00:16:58,310 --> 00:17:01,240
display the result that will display median.

258
00:17:01,490 --> 00:17:06,030
So running this we get to see that it looks like the noise has been reduced.

259
00:17:06,080 --> 00:17:08,300
Now it does come at the cost of some detail.

260
00:17:08,510 --> 00:17:13,520
If we compare this to the original image we can see kind of the finer details of the grass is actually

261
00:17:13,520 --> 00:17:17,480
a really large image that's more than twelve hundred by a thousand more or less.

262
00:17:17,630 --> 00:17:19,870
So we do have quite a bit of detail here.

263
00:17:19,940 --> 00:17:24,780
This is the noisy image and if we did a blurring on that we got rid of a lot of the noise.

264
00:17:24,800 --> 00:17:29,510
What ends up happening is it blurs in with the pixels that surround it and it comes at the cost of a

265
00:17:29,510 --> 00:17:34,260
little bit of detail so you can see that fine detail of the grass or maybe the trees in the background.

266
00:17:34,430 --> 00:17:40,670
But essentially from a human perspective it looks a lot better than what we had before in this noisy

267
00:17:40,670 --> 00:17:43,760
image because here we have a bunch of random pixel colors.

268
00:17:43,760 --> 00:17:46,090
Now we're able to reduce that noise.

269
00:17:46,130 --> 00:17:46,770
OK.

270
00:17:46,910 --> 00:17:48,800
So that's it for the medium blur.

271
00:17:48,980 --> 00:17:52,380
The last thing I want to show you is a bilateral filtering.

272
00:17:52,520 --> 00:17:54,340
It's just another way to blur an image.

273
00:17:54,350 --> 00:17:57,890
So just for the sake of completeness I want to show it.

274
00:17:58,040 --> 00:18:00,330
Let me reload in this image right here.

275
00:18:00,350 --> 00:18:05,680
So I got a copy and paste this load image with the BRICS scroll all the way down.

276
00:18:05,720 --> 00:18:06,510
Run that.

277
00:18:06,710 --> 00:18:08,490
So we have our bricks reset.

278
00:18:08,570 --> 00:18:09,490
Let's make sure of that.

279
00:18:09,580 --> 00:18:15,680
We'll say the image and there are bricks and then if you want to perform a bilateral filter we actually

280
00:18:15,680 --> 00:18:17,020
will see this later on the course.

281
00:18:17,030 --> 00:18:19,510
But I do want to show it just in case you're interested in it.

282
00:18:19,610 --> 00:18:27,080
All you to do is say whatever the output is go FCB to bilateral philtre.

283
00:18:27,310 --> 00:18:33,670
And then the parameters here are source and the D Sigma color and sigma space and you can actually check

284
00:18:33,670 --> 00:18:37,280
out this link explains how bilateral filtering works.

285
00:18:37,330 --> 00:18:42,040
Essentially what it attempts to do is reduce unwanted noise and keep edges fairly sharp.

286
00:18:42,040 --> 00:18:44,990
However it's usually slower compared to other filters.

287
00:18:45,160 --> 00:18:47,570
So we're going to use some default values here.

288
00:18:47,680 --> 00:18:59,180
Say image 9 and then 75 and 75 for those lvalues and let's display that image will display the or in

289
00:18:59,180 --> 00:18:59,390
notice.

290
00:18:59,430 --> 00:19:06,000
Now it looks blurred and it's actually been able to keep a little more detail around the lines in between

291
00:19:06,000 --> 00:19:07,230
the letters of the bricks.

292
00:19:07,230 --> 00:19:13,040
So it's kind of similar to median blur as far as being able to reduce noise in an image and still keep

293
00:19:13,080 --> 00:19:14,260
edges really well.

294
00:19:14,580 --> 00:19:14,970
OK.

295
00:19:15,210 --> 00:19:18,780
So that's it for this lecture against a bunch of different blurring techniques.

296
00:19:18,900 --> 00:19:22,770
Usually we're going to go to the simpler ones like a medium blur or just the built in blur.

297
00:19:22,950 --> 00:19:27,900
The main idea here is that we can reduce noise and images that are noisy or we can reduce the amount

298
00:19:27,900 --> 00:19:33,360
of detail we need when we're performing other tasks like edge detection as long as you feel comfortable

299
00:19:33,360 --> 00:19:37,250
with the idea of applying a kernel to an image with filter to the.

300
00:19:37,260 --> 00:19:39,760
And we're just applying any sort of general blur.

301
00:19:39,930 --> 00:19:41,770
Then you're pretty much good to go.

302
00:19:41,790 --> 00:19:42,200
All right.

303
00:19:42,420 --> 00:19:43,240
Thanks everyone.

304
00:19:43,260 --> 00:19:44,240
We'll see you at the next lecture.
