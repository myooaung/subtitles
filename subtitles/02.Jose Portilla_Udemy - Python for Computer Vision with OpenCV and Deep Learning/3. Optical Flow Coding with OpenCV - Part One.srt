1
00:00:05,310 --> 00:00:06,640
Welcome back everyone.

2
00:00:06,750 --> 00:00:10,020
Now that we have an understanding of the intuition behind optical flow.

3
00:00:10,290 --> 00:00:15,900
Let's go ahead and use open Sivi to program our own use cases for optical flow using open civies.

4
00:00:15,900 --> 00:00:17,520
Built in functions for it.

5
00:00:17,520 --> 00:00:19,860
Let's head over to the Jupiter note book and get started.

6
00:00:20,190 --> 00:00:24,300
All right here we are in the notebook where we're going to do is we're going to start off with the Lucas

7
00:00:24,300 --> 00:00:29,160
Kanade method for optical flow and that's for those sparse points that we want to track.

8
00:00:29,160 --> 00:00:34,470
Essentially just picking a few points and then tracking their flow throughout the video from frame to

9
00:00:34,470 --> 00:00:36,470
frame will actually be tagging.

10
00:00:36,480 --> 00:00:42,390
So you'll see a little faint line being drawn as the objects move and we're going to choose points based

11
00:00:42,390 --> 00:00:46,570
off corners detection later on in future object tracking videos.

12
00:00:46,590 --> 00:00:50,170
In this section we'll actually detect the face first and then track that.

13
00:00:50,310 --> 00:00:54,660
But right now we'll keep it simple and it will use an object and method that we already know which is

14
00:00:54,660 --> 00:00:56,470
just corner detection.

15
00:00:56,670 --> 00:01:03,910
So I will start off by importing non-pilots and P and importing to.

16
00:01:04,110 --> 00:01:08,200
Then next I'm going to set some parameters for sheets of maasi corner detection.

17
00:01:08,250 --> 00:01:11,780
That's from the good features that track paper that we already discussed.

18
00:01:12,090 --> 00:01:14,850
And this should feel a little familiar to you.

19
00:01:15,060 --> 00:01:19,890
Essentially just a dictionary of corner tracking parameters and every season some default values here

20
00:01:20,970 --> 00:01:23,210
so we can detect Max corners.

21
00:01:23,400 --> 00:01:25,980
Let's say we're going to detect 10 corners in our image.

22
00:01:26,040 --> 00:01:30,200
Just the best quality ones and we can actually define a quality level.

23
00:01:30,420 --> 00:01:38,510
So we'll say that the quality level we want here is let's make sure is correct is 0.3.

24
00:01:38,580 --> 00:01:44,940
Obviously you can kind of play around with these well say minimum distance is 7 and we'll say block

25
00:01:44,940 --> 00:01:48,590
size is also 7.

26
00:01:49,210 --> 00:01:49,770
OK.

27
00:01:50,000 --> 00:01:52,850
So we have our parameters for the corner detection.

28
00:01:52,910 --> 00:01:57,470
Essentially what we're gonna do is on the very first frame of the video detect 10 corners and then track

29
00:01:57,470 --> 00:01:58,580
those.

30
00:01:58,580 --> 00:02:05,240
All right the next thing I want to do is set up in other dictionary called L.K. programs and these are

31
00:02:05,240 --> 00:02:10,700
going to be parameters for the Lucas Kanade optical flow function we call later on we're going to be

32
00:02:10,700 --> 00:02:12,630
right here a couple of default values.

33
00:02:12,860 --> 00:02:17,410
The first one is going to be the window size and the window size here.

34
00:02:17,480 --> 00:02:22,010
You're essentially going to have a tradeoff between smaller windows and larger windows if you have a

35
00:02:22,010 --> 00:02:27,630
smaller window you're going to be more sensitive to noise and you may miss larger motions.

36
00:02:27,650 --> 00:02:33,410
If the point you're trying to detect are moving really fast that means from one frame to the other the

37
00:02:33,410 --> 00:02:35,070
movement was actually really large.

38
00:02:35,090 --> 00:02:39,620
And you may not have caught it if you have a smaller window size and if you have a larger one the size

39
00:02:39,860 --> 00:02:42,240
you're going to fail to catch those larger motions.

40
00:02:42,350 --> 00:02:46,640
However they may not be as sensitive to smaller motions of the points.

41
00:02:46,640 --> 00:02:52,220
So you may just think that the point is standing still when it's actually kind of moving in really small

42
00:02:52,220 --> 00:02:54,930
harder to detect frames.

43
00:02:55,160 --> 00:03:01,520
So again it's kind of a tradeoff there between being too sensitive to noise versus being able to catch

44
00:03:01,520 --> 00:03:02,870
those smaller motions.

45
00:03:02,870 --> 00:03:06,680
So that's when those eyes will go ahead and use that default value of 200 by 200.

46
00:03:08,260 --> 00:03:12,250
Next we're going to text or provide a max level.

47
00:03:12,700 --> 00:03:19,030
And what this does is the Luca's Kanade method can actually use this algorithm with what's known as

48
00:03:19,030 --> 00:03:20,330
an image pyramid.

49
00:03:20,530 --> 00:03:27,310
And if you check out the Wikipedia page on Pyramid for image processing and scroll down here eventually

50
00:03:27,310 --> 00:03:32,350
you'll notice that there's an image here that essentially describes what a pyramid is when it comes

51
00:03:32,350 --> 00:03:39,700
to image analysis and the Lucas Kanade method what it does is you can actually have it use image permits

52
00:03:39,700 --> 00:03:41,170
for analysis.

53
00:03:41,200 --> 00:03:45,530
So if you leave max level at 0 it's just going to use the original image.

54
00:03:45,560 --> 00:03:50,080
However you can have higher max levels and will provide a max level of two.

55
00:03:50,350 --> 00:03:56,920
And what this does is it allows you to find optical flow at various resolutions of the image so you

56
00:03:56,920 --> 00:04:00,480
can see Level 1 is at half revolution resolution and level 2.

57
00:04:00,480 --> 00:04:01,700
Is that a quarter resolution.

58
00:04:01,750 --> 00:04:02,870
And so on.

59
00:04:02,920 --> 00:04:07,810
So we use a default value of max level equal to 2.

60
00:04:08,060 --> 00:04:15,290
And the next thing we're going to provide is the criteria and the criteria is going to work is will

61
00:04:15,290 --> 00:04:26,450
say CB2 term under score criteria underscore e p s and also a pipe operator essentially or will say

62
00:04:26,450 --> 00:04:32,510
CB2 term underscore criteria under underscore counts.

63
00:04:32,960 --> 00:04:38,020
And then right after that we're going to say 10 and zero point zero of three.

64
00:04:38,030 --> 00:04:43,490
So what this does is since you're providing two criteria to perform the Luca's cannot the optical flow

65
00:04:44,060 --> 00:04:47,140
we're providing the maximum number of iterations.

66
00:04:47,210 --> 00:04:52,360
So we have here we're providing a term criteria count and that's related to 10.

67
00:04:52,580 --> 00:05:00,440
And then we're also providing IPX or epsilon and that's going to be 0.03 now more iterations means a

68
00:05:00,440 --> 00:05:03,440
more exhaustive search for the points.

69
00:05:03,440 --> 00:05:08,180
So that's to do if the counts on how many iterations are you going to be looking for these points in

70
00:05:08,180 --> 00:05:11,260
the current frame versus the previous frame.

71
00:05:11,330 --> 00:05:17,710
And if you have a smaller Epsilon than that actually means you're going to finish earlier.

72
00:05:17,740 --> 00:05:23,570
Essentially what this does is you can play around with these values of criteria count criteria Epsilon.

73
00:05:23,840 --> 00:05:27,540
And whichever one essentially happens first you're going to finish earlier.

74
00:05:27,710 --> 00:05:34,900
And what it does is it's exchanging speed of your tracking versus the accuracy of your tracking.

75
00:05:34,940 --> 00:05:40,010
Again here we flip some good default values for you to play around with but you'll often have to adjust

76
00:05:40,010 --> 00:05:42,760
these depending on what your actual video sources.

77
00:05:42,860 --> 00:05:43,850
So keep that in mind.

78
00:05:44,030 --> 00:05:49,370
Essentially we're doing here is playing around with some values and exchanging speed accuracy.

79
00:05:49,710 --> 00:05:50,320
OK.

80
00:05:50,480 --> 00:05:54,500
So that is the parameter Dictionnaire we're going to use later on when we actually call the builtin

81
00:05:54,680 --> 00:05:56,410
Lucas Kanade function.

82
00:05:56,420 --> 00:05:58,490
Let's go ahead and run that and then continue.

83
00:05:58,490 --> 00:06:02,420
Now the next step is to actually grab an image from our camera.

84
00:06:02,450 --> 00:06:09,170
So a lot of this will actually already be familiar with will say CB2 video capture and you can actually

85
00:06:09,170 --> 00:06:11,020
just provide a video file.

86
00:06:11,030 --> 00:06:16,000
But in my case I'm going to do it live streaming from the camera so I will see zero.

87
00:06:16,340 --> 00:06:19,860
And then we're going to take RTT centrally in the kitting true or false.

88
00:06:19,880 --> 00:06:25,940
Is it actually able to capture the video and then we will call this the previous frame of the video

89
00:06:27,830 --> 00:06:31,280
so we're going to read the very first frame and treat it as a previous frame.

90
00:06:31,280 --> 00:06:36,620
Essentially saying here is the points Here's the previous frame and then the next family use that to

91
00:06:36,620 --> 00:06:40,220
see if we can find those points in the most current frame.

92
00:06:40,370 --> 00:06:43,960
So we're reading the very first frame and we'll label it as previous frame.

93
00:06:44,200 --> 00:06:49,040
And in order to do this we're actually going to also grab a greyscale version of that frame you'll see

94
00:06:49,550 --> 00:06:57,570
previous underscore Grey is equal to CB2 CVT color.

95
00:06:57,950 --> 00:07:04,930
And we're going to pass in the previous frame and convert it will see color from blue green red because

96
00:07:04,930 --> 00:07:12,600
it's open see the two gray and we're going to do is we're actually going to decide what are the points

97
00:07:12,600 --> 00:07:14,200
we actually want to track.

98
00:07:14,430 --> 00:07:17,610
So here are the points to track.

99
00:07:17,670 --> 00:07:22,020
We're going to do here is just grab using the corner tracking parameters here.

100
00:07:22,080 --> 00:07:23,470
Some good features attract.

101
00:07:23,550 --> 00:07:33,540
So we're going to choose the top 10 corners and track those previous points is equal to CB2 and then

102
00:07:33,580 --> 00:07:39,610
a good feature is the track pass and the previous greyscale.

103
00:07:39,700 --> 00:07:41,610
We're not going to have a mask for this.

104
00:07:41,860 --> 00:07:49,540
And then I can pass in the corner tracking parameters simply by saying to Asterix there and then passing

105
00:07:49,570 --> 00:07:51,220
corner tracking parameters.

106
00:07:51,220 --> 00:07:54,600
So essentially the laws are to provide a dictionary into a function call like that.

107
00:07:55,430 --> 00:08:01,460
OK so you have the points you want to track and then this math that we're creating here is going to

108
00:08:01,460 --> 00:08:04,650
be for displaying the actual points and drawing lines.

109
00:08:04,760 --> 00:08:10,270
So this mass has more to do with actually drawing lines onto the video then tracking points.

110
00:08:10,280 --> 00:08:13,360
So consider this mask just as a way of visualizing.

111
00:08:13,400 --> 00:08:14,870
And we'll be using it later on.

112
00:08:15,760 --> 00:08:17,640
So we'll see zeros like.

113
00:08:18,070 --> 00:08:20,360
And then passen the previous frame.

114
00:08:20,380 --> 00:08:26,170
All this does is it creates a number of zeros that has the same shape as the current frame you're looking

115
00:08:26,170 --> 00:08:26,770
at.

116
00:08:26,770 --> 00:08:30,270
So this creates a matching mass of the previous frame for drawing on later.

117
00:08:31,510 --> 00:08:34,870
OK so we have a point subtract we're reading in video data.

118
00:08:34,870 --> 00:08:39,760
We have the great skill and we have our mask that we can draw on and later recombine with the actual

119
00:08:39,760 --> 00:08:41,240
frame that we're looking at.

120
00:08:41,260 --> 00:08:50,400
Now it's time to actually have a for loop that does most of the work will say while true and we'll say.

121
00:08:50,770 --> 00:08:56,200
Rhett's common frame is equal to capture read just as we did above.

122
00:08:56,530 --> 00:08:58,660
But notice here now this is called frames.

123
00:08:58,660 --> 00:09:00,180
This is our current frame.

124
00:09:00,370 --> 00:09:03,260
The very first one is the previous frame.

125
00:09:03,370 --> 00:09:10,620
So we have a frame and then we actually do the exact same here of creating a grayscale.

126
00:09:10,720 --> 00:09:14,930
So we're going to copy this and paste it in a set of previous gray.

127
00:09:15,190 --> 00:09:18,090
I'm going to call it just frame gray.

128
00:09:18,090 --> 00:09:20,170
So it's the current greyscale frame.

129
00:09:20,170 --> 00:09:22,500
And then we're going to pasan frame.

130
00:09:22,720 --> 00:09:26,800
So we're taking now the current frame and technically at the very first instance those two will be the

131
00:09:26,800 --> 00:09:28,460
same.

132
00:09:28,510 --> 00:09:35,300
So a frame gray and then next is going to calculate the optical flow on this grace Gaile frame.

133
00:09:35,710 --> 00:09:42,300
And we do that by saying next point's status and e r r for air.

134
00:09:42,730 --> 00:09:49,430
And these are the three things that are returned by the built in function calque optical flow.

135
00:09:49,510 --> 00:09:58,320
And right now we're using p y r l k which stands for pyramid Luca's Kanade and we need to do here is

136
00:09:58,330 --> 00:10:06,220
pasan our previous image the previous greyscale image the current grayscale image.

137
00:10:06,400 --> 00:10:10,150
The points that we want to find from the previous frame in the next frame.

138
00:10:10,290 --> 00:10:15,670
And that is going to be these previous points appear to start off with later on we're going to reassign

139
00:10:15,670 --> 00:10:16,630
them.

140
00:10:16,630 --> 00:10:22,140
So there are the previous points and then the next parameter we just label as none.

141
00:10:22,180 --> 00:10:25,120
And you can check out the docs here if you want to see all the parameters.

142
00:10:25,120 --> 00:10:26,470
So there's previous points.

143
00:10:26,470 --> 00:10:27,900
And then what the next points are.

144
00:10:27,910 --> 00:10:32,040
But in this case we actually want to figure out what the next points are so we won't provide them instead.

145
00:10:32,110 --> 00:10:34,540
That's going to be spit up by the function itself.

146
00:10:34,720 --> 00:10:39,180
So we'll say none there and after that we just need all the parameters which have already the fine in

147
00:10:39,190 --> 00:10:40,240
L.K. programs.

148
00:10:41,780 --> 00:10:42,140
OK.

149
00:10:42,170 --> 00:10:44,030
So a lot going on at this function call.

150
00:10:44,050 --> 00:10:48,750
But really it's the same stuff that we were talking about in the slides in the previous lecture we pass

151
00:10:48,750 --> 00:10:55,520
in the previous frame we pass in the current frame both in grayscale the previous points and then we're

152
00:10:55,520 --> 00:10:56,730
not defined next points.

153
00:10:56,750 --> 00:10:58,210
We want those to be returned.

154
00:10:58,400 --> 00:11:02,600
And then these parameters that we can adjust by simply adjusting the dictionary which I encourage you

155
00:11:02,600 --> 00:11:04,980
to play around with OK.

156
00:11:05,240 --> 00:11:10,670
So we called the optical flow and now that we've calculated it where we're going to do is we're going

157
00:11:10,670 --> 00:11:13,050
to use the returned status array.

158
00:11:13,100 --> 00:11:19,010
So this data cerate essentially what it does is it outputs what's known as a status vector where each

159
00:11:19,070 --> 00:11:21,260
element of the vector is set to one.

160
00:11:21,350 --> 00:11:24,560
If the flow for the corresponding features has been found.

161
00:11:24,620 --> 00:11:26,690
Otherwise it's set to zero.

162
00:11:26,690 --> 00:11:30,560
So let me show what that looks like and how it can use it.

163
00:11:30,560 --> 00:11:39,390
I will create a variable called good underscore new and then say next points where status is equal to

164
00:11:39,410 --> 00:11:50,600
1 and then say good underscore previous where the previous points has that is equal to 1.

165
00:11:51,170 --> 00:11:57,490
Essentially matching them up based on the index location or remember the status vector is set to 1.

166
00:11:57,710 --> 00:12:03,920
If the flow for the corresponding features has been found essentially this is connecting where the previous

167
00:12:03,920 --> 00:12:06,390
points were to the next set of points.

168
00:12:09,230 --> 00:12:18,960
Number one is say for I comma and then as a tuple you can say new and previous and then we'll say in

169
00:12:19,050 --> 00:12:30,600
a numerate and we're going to zip together the good new points along with the good previous points.

170
00:12:32,300 --> 00:12:36,950
And then we're going to calculate the X and Y positions so we can actually draw little markers there

171
00:12:38,410 --> 00:12:51,750
so I'll say X new Y new is equal to new and then we're going to say here is call DOT Revelle or ravelled

172
00:12:51,830 --> 00:12:53,040
and see how you pronounce it.

173
00:12:53,370 --> 00:12:58,800
And what this does is essentially a non-pilot method and you can check out the docs here and it's very

174
00:12:58,800 --> 00:13:00,990
similar to flattening out an array.

175
00:13:01,140 --> 00:13:03,260
Essentially it's the same as saying reshape.

176
00:13:03,270 --> 00:13:06,120
Negative one where you are keeping the current order.

177
00:13:06,150 --> 00:13:10,840
So here we can see a array passed in to them mentions after you call Ravell on it.

178
00:13:10,940 --> 00:13:13,380
Then it's kind of just flattened out to this single array.

179
00:13:13,560 --> 00:13:16,080
And we're going to be using that because we want to use these to draw.

180
00:13:16,200 --> 00:13:21,180
So we'll come back a period to Jupiter lab and then we'll do the same operation on the old points.

181
00:13:21,250 --> 00:13:32,360
We will say X previous and y previous and then set that equal to the previous and then call Revelle

182
00:13:32,360 --> 00:13:32,900
and that.

183
00:13:33,290 --> 00:13:42,310
And we're going to be doing is on our umask we'll be drawing some lines will say CB2 thought line and

184
00:13:42,310 --> 00:13:50,890
we're going to pasand the mask and go from x to y new and draw a line from that you point to the previous

185
00:13:50,890 --> 00:13:56,580
point it's essentially going to draw a little tracking line of the points as they go from frame to frame

186
00:13:58,240 --> 00:14:03,610
they don't say X previous to previous they'll choose the color.

187
00:14:03,610 --> 00:14:07,510
Let's go ahead and make it green and you can choose a thickness.

188
00:14:07,510 --> 00:14:09,570
We're going to give it three thickness.

189
00:14:09,640 --> 00:14:15,340
Now on the actual current frame I want to draw dots of where the current point we're tracking is.

190
00:14:15,550 --> 00:14:21,480
We'll say frame is equal to CB2 call circle on this.

191
00:14:21,720 --> 00:14:27,360
And then we will say frame and now we're only going to draw this on the new points because that's her

192
00:14:27,390 --> 00:14:29,280
current location.

193
00:14:29,490 --> 00:14:30,900
We'll say new points.

194
00:14:31,020 --> 00:14:38,070
Let's go ahead and give this radius of 8 and give it the color red and we'll will have it filled and

195
00:14:38,130 --> 00:14:40,700
we'll just say thickness is negative 1.

196
00:14:40,770 --> 00:14:46,290
So all this is doing is it's going through the new points and the good previous points.

197
00:14:46,290 --> 00:14:52,680
And this is kind of like complex Pyra because it's technically tracking 10 different points because

198
00:14:52,680 --> 00:14:54,680
we asked it to track 10 different corners.

199
00:14:54,690 --> 00:14:56,190
It can be more or it can be less than that.

200
00:14:56,370 --> 00:14:57,310
But keep that in mind.

201
00:14:57,330 --> 00:15:02,370
So has a bunch of points to track and then we're essentially using numerate to iterate through those

202
00:15:02,370 --> 00:15:08,460
good points and then flatten them out using some them by drawing a line connecting the previous points

203
00:15:08,460 --> 00:15:10,950
position to the current point position.

204
00:15:11,100 --> 00:15:16,710
So x x y new and then the previous points there and then we're drawing a circle on where the current

205
00:15:16,830 --> 00:15:20,210
frame of the point is.

206
00:15:20,210 --> 00:15:25,340
Now once you've done that outside of the for loop we're going to display this will say image is equal

207
00:15:25,340 --> 00:15:27,320
to to.

208
00:15:27,410 --> 00:15:32,370
Now we're going to say and we're going to add on the frame and the mask.

209
00:15:32,420 --> 00:15:39,720
So that adds on the frame with the circles and then the mask with the lines then we'll say CB2 and just

210
00:15:39,720 --> 00:15:40,330
show this.

211
00:15:40,350 --> 00:15:45,810
So we call that tracking and then we'll show that image that has both the frame with the points and

212
00:15:45,900 --> 00:15:48,200
the mask of the lights.

213
00:15:48,260 --> 00:15:53,690
Add a little bit of functionality here just to make sure that we can escape out of this see wait key.

214
00:15:53,910 --> 00:16:05,640
So wait 30 milliseconds in and 0 x F-F and then say if K is equal to 27 you could technically write

215
00:16:05,640 --> 00:16:07,360
that all in one line we break.

216
00:16:07,360 --> 00:16:08,980
And we've seen this before.

217
00:16:09,330 --> 00:16:14,070
Now the most important step here is that we need to update the previous point Senao be the current points.

218
00:16:14,070 --> 00:16:16,550
So we just drew our lines in our circles.

219
00:16:16,590 --> 00:16:22,740
Now we need to update the current frame to be the previous frame for the next iteration which means

220
00:16:22,740 --> 00:16:30,750
I will say previous Gray is equal to frame underscore gray and created as a copy that way don't overwrite

221
00:16:30,750 --> 00:16:31,920
anything.

222
00:16:32,040 --> 00:16:38,130
And then we'll say the previous points is equal to good new.

223
00:16:38,640 --> 00:16:44,500
And we're going to reshape that to negative one and then one comma two since that's going to be the

224
00:16:44,500 --> 00:16:50,090
way that it's going to be accepted into this calc optical flow pyramid.

225
00:16:50,140 --> 00:16:56,320
Lucas Kanade function the outside of all of this outside of the entire while loop.

226
00:16:57,500 --> 00:17:00,560
We'll say CB2 will destroy all the windows.

227
00:17:00,610 --> 00:17:02,650
Essentially we're done we hit the escape.

228
00:17:02,950 --> 00:17:09,890
And then we'll also release the capture and before we run this we want to fix a minor typo we made up

229
00:17:09,890 --> 00:17:10,580
here.

230
00:17:10,680 --> 00:17:14,470
We're actually checking for equality not assigning status.

231
00:17:14,480 --> 00:17:20,390
Sort of check for status being equal to one not reassigning status so a simple little typo there.

232
00:17:20,580 --> 00:17:23,180
Let's go ahead and save this and run it.

233
00:17:23,250 --> 00:17:28,650
And what I will recommend is before you actually do shift try to run the cell is look really into your

234
00:17:28,650 --> 00:17:29,810
USP camera.

235
00:17:29,880 --> 00:17:34,290
So hopefully some of the corners that the techs have to do if your face that we will track a few points

236
00:17:34,350 --> 00:17:35,310
on your face.

237
00:17:35,450 --> 00:17:41,310
We're going to look into my USP camera do shift enter here let me bring up what it's running.

238
00:17:41,940 --> 00:17:42,660
And there we go.

239
00:17:42,660 --> 00:17:47,460
So I tracked my eyes and my nostrils and a couple of other corners I'm going to begin moving.

240
00:17:47,790 --> 00:17:50,390
And then you should see and this looks really creepy.

241
00:17:50,400 --> 00:17:56,640
From my angle we should see the points being tracked as well as the lines moving and being drawn on

242
00:17:56,640 --> 00:17:58,930
that mask as we later combine it.

243
00:17:58,980 --> 00:18:04,080
And as you can sell eventually if you start moving really fast it may actually lose some of those points.

244
00:18:04,110 --> 00:18:09,180
I'm pretty well here but you can actually see I started turning my face and it kind of lost my left

245
00:18:09,210 --> 00:18:09,660
eyeball.

246
00:18:09,680 --> 00:18:12,820
I didn't really understand how to track that since it disappeared.

247
00:18:12,840 --> 00:18:14,820
So keep that in mind if a point disappears.

248
00:18:14,820 --> 00:18:18,030
That's optical flow won't be able to track any further.

249
00:18:18,030 --> 00:18:18,450
All right.

250
00:18:18,630 --> 00:18:20,960
So this was for a sparse set of points.

251
00:18:20,970 --> 00:18:26,610
Coming up next we're going to look at density which is simply swapping out that functional line similar

252
00:18:26,610 --> 00:18:26,980
code.

253
00:18:27,030 --> 00:18:32,020
But we're going to swap a single light out for a dense optical flow calculation.

254
00:18:32,160 --> 00:18:33,760
We'll cover that in the next lecture.

255
00:18:33,770 --> 00:18:34,510
I'll see you there.
