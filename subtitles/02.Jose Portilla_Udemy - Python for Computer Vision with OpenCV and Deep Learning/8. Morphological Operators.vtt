WEBVTT
1
00:00:05.330 --> 00:00:11.450
Welcome back to this lecture on morphological operators morphological operators or sets of kernels that

2
00:00:11.450 --> 00:00:16.400
can achieve a variety of effects such as reducing noise we've already seen kernels that can achieve

3
00:00:16.400 --> 00:00:21.590
effects such as blurring and smoothing these morphological operators are going to expand on that.

4
00:00:21.700 --> 00:00:27.440
In fact certain operators are very good at reducing blackpoint on a white background and vice versa.

5
00:00:28.500 --> 00:00:33.900
Other types of operators can also achieve an erosion and the dilation effect that can add or erode from

6
00:00:33.900 --> 00:00:38.160
an existing image this effect is actually most easily seen on text data.

7
00:00:38.370 --> 00:00:43.200
So what we will be doing is we're going to practice various morphological operators on some simple white

8
00:00:43.200 --> 00:00:44.950
text on a black background.

9
00:00:45.180 --> 00:00:46.410
Let's get started.

10
00:00:46.410 --> 00:00:47.260
Welcome back.

11
00:00:47.490 --> 00:00:53.290
I'm going to copy and paste a few functions from our morphological operators notebook.

12
00:00:53.340 --> 00:00:58.740
The first function is a function that loads the image and before we actually load up these functions

13
00:00:58.740 --> 00:01:02.520
when I'm going to there's also copy and paste all imports that we usually do.

14
00:01:02.580 --> 00:01:06.140
So import to them and lib.

15
00:01:06.380 --> 00:01:09.950
Copy and paste these imports from the morphological operators notebook.

16
00:01:09.960 --> 00:01:12.460
I'm just going to copy and paste this load image function.

17
00:01:12.840 --> 00:01:17.900
And what this does is it loads up 600 by 600 0 so that's just a black image.

18
00:01:17.970 --> 00:01:23.370
And then we write some white fonts on it that just says A B C D and then what else want to do is display

19
00:01:23.370 --> 00:01:25.740
the image so that it's a little larger.

20
00:01:25.920 --> 00:01:28.740
I will copy and paste the display image function as well.

21
00:01:28.740 --> 00:01:30.700
We've already seen this function quite a few times.

22
00:01:31.200 --> 00:01:33.820
And then let's go ahead and load up the image and display it.

23
00:01:34.110 --> 00:01:43.620
So I will say image is equal to load image and then we will display the image with display image.

24
00:01:43.980 --> 00:01:48.900
And when you run that you should see the result of this kind of these boloney like letters of A B C

25
00:01:48.900 --> 00:01:49.860
D E.

26
00:01:50.220 --> 00:01:50.670
OK.

27
00:01:50.910 --> 00:01:53.410
So we're going to learn about a couple of morphological operators.

28
00:01:53.430 --> 00:01:57.410
Essentially they're just specialized kernels to achieve a specific effect.

29
00:01:57.420 --> 00:02:02.760
So the first thing we're going to look at is erosion and erosion as a morphological operator essentially

30
00:02:02.820 --> 00:02:05.820
erodes away boundaries of foreground objects.

31
00:02:05.820 --> 00:02:11.730
So here we can see that the letters looked to be in the foreground where the black is a general background.

32
00:02:11.730 --> 00:02:17.430
And we're going to try to do is with this kernel detect these edges between our foreground text and

33
00:02:17.430 --> 00:02:21.050
the background in black or move begin to erode away that boundary.

34
00:02:22.290 --> 00:02:29.240
The kernel we're going to create is kernel's equal to N.P. ones and we'll create a five by five kernel

35
00:02:29.620 --> 00:02:37.040
and we'll also specify the data type to be integers and P you I antedate that integer.

36
00:02:37.040 --> 00:02:40.700
So if you take a look at that kernel it's just a bunch of integer ones.

37
00:02:41.110 --> 00:02:49.810
Ok then the next thing to do is call C-v to dot erode and then you pass in the image and you pass in

38
00:02:49.820 --> 00:02:55.330
this kernel and you can play around with the actual size of the kernel and then the last primary can

39
00:02:55.330 --> 00:02:56.960
pass in iterations.

40
00:02:56.960 --> 00:02:59.160
Which simply means how many passes you want to do.

41
00:02:59.360 --> 00:03:04.400
So we're going to say first iterations equals to 1 so iteration is equal to one essentially doing one

42
00:03:04.400 --> 00:03:07.620
pass and we'll call this result.

43
00:03:08.060 --> 00:03:14.450
We'll run that and let's display that actual result we'll say display image results.

44
00:03:15.290 --> 00:03:17.580
And here we can see the actual letters.

45
00:03:17.750 --> 00:03:20.180
Do we actually see any erosion here.

46
00:03:20.270 --> 00:03:24.440
Well if we take a look at the original image you'll notice that the connection between A and B is quite

47
00:03:24.440 --> 00:03:25.230
strong.

48
00:03:25.670 --> 00:03:27.690
And here it begins to weaken.

49
00:03:27.950 --> 00:03:30.070
Let's actually see an extreme version of this.

50
00:03:30.080 --> 00:03:32.920
We're going to load the image again.

51
00:03:32.990 --> 00:03:35.260
So let's reload this image here.

52
00:03:35.810 --> 00:03:40.670
So I ran that cell again so I can display the image and same kernel are going to be using this five

53
00:03:40.670 --> 00:03:42.530
by five of all integer ones.

54
00:03:42.680 --> 00:03:48.410
Except now I'm going to do five iterations so this should be a pretty extreme effect and maybe I don't

55
00:03:48.410 --> 00:03:49.010
want it that extreme.

56
00:03:49.010 --> 00:03:55.820
Let's do four iterations just in case we lose the letters off at 5 but I'm going to display the image

57
00:03:55.850 --> 00:03:56.720
as a result.

58
00:03:56.720 --> 00:04:01.900
And you can see here that now it definitely eroded away quite a bit from the foreground text.

59
00:04:02.000 --> 00:04:06.400
So that's how you can perform erosion which is a morphological operator.

60
00:04:06.650 --> 00:04:12.620
Again you just say C-v to erode pasand the image pasan a kernel of your choosing of ones here you can

61
00:04:12.620 --> 00:04:15.930
play around the different sizes seven by seven or nine by nine.

62
00:04:16.010 --> 00:04:19.700
But typically the thing you're really going to be editing is this iterations if you want more erosion

63
00:04:20.000 --> 00:04:21.560
you just do more iterations.

64
00:04:21.710 --> 00:04:28.780
OK then the next effect we're going to learn is opening opening is erosion followed by dilation.

65
00:04:29.030 --> 00:04:33.540
So dilation is essentially the opposite of erosion you end up adding more to that foreground.

66
00:04:33.770 --> 00:04:38.930
But what's useful about opening is it can actually be helpful in removing background noise.

67
00:04:38.930 --> 00:04:44.210
So what I'm going to do is I'm going to create some white noise and put it onto our original image.

68
00:04:45.000 --> 00:04:46.650
So let's load up the image again.

69
00:04:46.950 --> 00:04:53.960
Essentially that white on black text and then I'm going to create some white noise using them Pye's

70
00:04:53.960 --> 00:05:03.800
ran capabilities we'll see any random Rand I.A. and we'll say the low is zero and just the high goes

71
00:05:03.800 --> 00:05:05.270
up to that including two.

72
00:05:05.270 --> 00:05:12.080
So this is going to give me ones and zeros and I want the size to be equal to 600 by 600.

73
00:05:12.080 --> 00:05:17.120
The shape of our original image which means if I actually take a look at white noise it's an array of

74
00:05:17.120 --> 00:05:24.090
600 by 600 points of either zeros or ones which in our case we're dealing with just zeros and ones here.

75
00:05:24.170 --> 00:05:25.700
It's all binary then.

76
00:05:25.720 --> 00:05:28.020
This is essentially just a bunch of noise.

77
00:05:28.070 --> 00:05:35.690
So if I actually display this image if I say display image white noise it's just a bunch of noise so

78
00:05:35.690 --> 00:05:38.310
random spots of black random spots of white.

79
00:05:38.530 --> 00:05:45.620
We're going to do now is actually end up putting in this white noise into our original text image the

80
00:05:45.620 --> 00:05:50.370
way we're going to do that is if we actually take a look at our original image.

81
00:05:50.420 --> 00:05:53.270
So right now our image we check out the max value

82
00:05:56.220 --> 00:05:58.270
it ends up being 255.

83
00:05:58.270 --> 00:06:02.700
So we need to convert this to be zeros and 255.

84
00:06:02.740 --> 00:06:11.660
So what we will do now is say white noise is equal to white noise times 255.

85
00:06:11.830 --> 00:06:18.050
So not just going to be a bunch of zeros and 255 points so zeros and 255.

86
00:06:18.100 --> 00:06:21.160
That way it's going to be at the same scale of our original image.

87
00:06:21.220 --> 00:06:26.420
So we still have a bunch of black and white because still display this image display image of that white

88
00:06:26.420 --> 00:06:27.720
noise.

89
00:06:28.040 --> 00:06:30.840
And there you have it it's still a bunch of noise there.

90
00:06:30.860 --> 00:06:33.400
Now we're going to do is we're going to say noise.

91
00:06:33.420 --> 00:06:37.500
Image is equal to white noise.

92
00:06:37.490 --> 00:06:48.270
Plus our original image and if we say display image and pass in the noise image now you'll notice that

93
00:06:48.330 --> 00:06:49.670
it's become a lot noisier.

94
00:06:49.680 --> 00:06:54.320
So we just essentially added in all those values of 0 and 255.

95
00:06:54.480 --> 00:06:57.020
So some points got some noise some points didn't.

96
00:06:57.030 --> 00:06:58.950
But here we can see that's kind of a mess.

97
00:06:58.950 --> 00:07:00.990
So this is our noise image.

98
00:07:01.050 --> 00:07:06.680
We just ended up adding all this noise to the original text we had up here.

99
00:07:06.750 --> 00:07:12.000
Now we can use opening which is a technique as a morphological operator to actually get rid of this

100
00:07:12.000 --> 00:07:12.500
noise.

101
00:07:12.510 --> 00:07:17.560
So if you have a situation that looks something like this where you have kind of a dark background and

102
00:07:17.560 --> 00:07:22.440
the light foreground but ends up being very noisy specifically black and white noise in particular.

103
00:07:22.440 --> 00:07:27.970
So this works really well in grayscale images that you can use this morphological operator and this

104
00:07:27.970 --> 00:07:29.520
is called opening.

105
00:07:29.530 --> 00:07:37.610
We're going to say C-v to what we call morphology X you pasand the noise image.

106
00:07:38.540 --> 00:07:46.480
And you'll say C-v to morf underscore open and then you'll pass in that same kernel we used earlier

107
00:07:48.450 --> 00:07:50.580
run that and then display the image

108
00:07:53.470 --> 00:07:58.630
and you'll notice right away that we were able to essentially clear out a lot of the noise without too

109
00:07:58.630 --> 00:08:01.080
much distortion of the original text.

110
00:08:01.120 --> 00:08:08.710
If we actually see the original image if I say display image and show the original one you will notice

111
00:08:08.710 --> 00:08:10.350
that it wasn't a perfect rendition.

112
00:08:10.360 --> 00:08:13.050
So here's the image that's the original one.

113
00:08:13.150 --> 00:08:14.050
Look at the BE THERE.

114
00:08:14.050 --> 00:08:16.500
Look at these two kind of holes in the B.

115
00:08:16.630 --> 00:08:20.980
And if you look at up here you can see there's a little bit of noise and that has to do with the way

116
00:08:20.980 --> 00:08:23.980
that the opening wasn't able to perfectly clean up these letters.

117
00:08:24.010 --> 00:08:29.350
You could see the easel has kind of extensions off its original boundary compared to the flat image

118
00:08:29.350 --> 00:08:35.380
here but it was able to do a really good job considering just how much noise there was in this noise

119
00:08:35.410 --> 00:08:36.000
image.

120
00:08:36.090 --> 00:08:36.520
OK.

121
00:08:36.670 --> 00:08:38.300
So that's known as opening.

122
00:08:38.500 --> 00:08:43.180
And again all opening really is just erosion followed by dilation.

123
00:08:43.270 --> 00:08:47.870
So we've already seen how erosion works and dilation essentially just expands on the image.

124
00:08:47.980 --> 00:08:50.110
So when it come back down here.

125
00:08:50.110 --> 00:08:56.620
So that's known as opening and again opening is really useful for getting rid of noise in that fashion.

126
00:08:56.680 --> 00:08:59.470
So it's useful for removing background noise.

127
00:08:59.530 --> 00:09:05.050
Now in some cases you're actually going to have foreground noise and we're going to now create an image

128
00:09:05.110 --> 00:09:07.210
that has foreground noise.

129
00:09:07.390 --> 00:09:09.250
I will reload the image again.

130
00:09:09.400 --> 00:09:15.230
So we start fresh and this time is of white noise I'm going to create some black noise.

131
00:09:16.140 --> 00:09:18.400
And I will say that ran them.

132
00:09:18.540 --> 00:09:22.580
Rand I.A. the low is going to be equal to zero.

133
00:09:22.590 --> 00:09:24.610
The high is going to be equal to two right.

134
00:09:24.650 --> 00:09:31.860
That in what's high will be called to and then size is equal to 600 by 600.

135
00:09:31.860 --> 00:09:33.790
And the reason we say high is equal to two here.

136
00:09:33.810 --> 00:09:34.620
That's the upper limit.

137
00:09:34.620 --> 00:09:38.030
It doesn't actually include the upper limit and you can check that by saying shift tab.

138
00:09:38.370 --> 00:09:42.670
The upper limit high is exclusive not inclusive like the little one.

139
00:09:42.850 --> 00:09:44.830
So is going to end up being or Black Noise.

140
00:09:44.910 --> 00:09:46.390
And if we take a look at it right now.

141
00:09:46.390 --> 00:09:50.820
It essentially looks as the white noise at least what we started with but all we're going to do now

142
00:09:50.970 --> 00:09:59.790
is say Black Noise is equal to Black Noise times negative 255.

143
00:09:59.880 --> 00:10:05.810
And if I take a look at the results of that notice now I have zeros and minus two fives.

144
00:10:05.880 --> 00:10:09.630
So that's not going to affect the black but it will affect the foreground in white.

145
00:10:09.670 --> 00:10:12.330
It'll make some of this back down to black.

146
00:10:12.360 --> 00:10:15.120
So we're going to do here is the following.

147
00:10:16.040 --> 00:10:22.910
We're going to say a black noise image is equal to image.

148
00:10:22.990 --> 00:10:26.140
Plus Black Noise.

149
00:10:26.770 --> 00:10:31.220
So then if we actually display this and actually we're not quite done yet.

150
00:10:31.660 --> 00:10:38.450
If we show the image black noise image that is right now it's a bunch of zeros and then negative 255.

151
00:10:38.530 --> 00:10:42.160
So what we're going to do is anywhere it equals negative 255.

152
00:10:42.160 --> 00:10:45.810
We're just going to bring that back up to zero because it doesn't really make sense for value.

153
00:10:45.940 --> 00:10:48.600
Everything should be either 0 or 255.

154
00:10:48.940 --> 00:10:57.660
So we can simply do this with some indexing will say Black Noise image where Black Noise image is equals

155
00:10:58.590 --> 00:11:00.550
negative 255.

156
00:11:00.590 --> 00:11:02.230
So that equal to zero.

157
00:11:03.830 --> 00:11:09.350
And now if I take a look at the Black Noise image specifically the minimum of value it's now been turned

158
00:11:09.350 --> 00:11:10.090
to zero.

159
00:11:10.280 --> 00:11:15.500
So he took all these negative 250 fives and brought him back up to zero because zero should be the smallest

160
00:11:15.500 --> 00:11:18.420
value we have when displaying a black and white image.

161
00:11:18.470 --> 00:11:25.730
And essentially what this black noise did is going to randomly subtract 255 from every single pixel

162
00:11:25.790 --> 00:11:27.170
in the original image.

163
00:11:27.170 --> 00:11:32.360
Now for the black ones which are zero that means they go to negative 255 for the white ones.

164
00:11:32.360 --> 00:11:34.300
That means they go down to zero.

165
00:11:34.310 --> 00:11:38.960
So then we're just taking everything that went down to negative to 5:5 the black foreground and bringing

166
00:11:38.960 --> 00:11:42.410
it back up to zero it's original value.

167
00:11:42.410 --> 00:11:50.930
So it's actually display the results of that the split image role say Black Noise image and notice.

168
00:11:50.940 --> 00:11:56.070
Now what we have is essentially just a bunch of black points in the foreground and we can use closing

169
00:11:56.100 --> 00:11:58.100
to actually attempt to clean this up.

170
00:11:58.110 --> 00:12:00.830
So previously we had a bunch of noise in the background.

171
00:12:00.840 --> 00:12:05.250
Now we have a bunch of noise solely in the foreground and closing is a good way of getting rid of the

172
00:12:05.250 --> 00:12:13.810
sort of noise we'll say closing is equal to CB2 and it's essentially almost the same call morphology

173
00:12:13.870 --> 00:12:19.570
X just tab autocomplete that you passen your noisy image that has a bunch of noise in the foreground

174
00:12:20.020 --> 00:12:29.360
and then we'll say CB2 Morf underscore close and then you can pass in the same kernel and you can experiment

175
00:12:29.360 --> 00:12:34.700
with different kernel sizes some maybe a little noisier than others and let's display the results of

176
00:12:34.700 --> 00:12:35.180
that.

177
00:12:35.360 --> 00:12:40.730
Well to say the split image show the results and there it is.

178
00:12:40.760 --> 00:12:42.550
Notice again it's definitely not perfect.

179
00:12:42.550 --> 00:12:46.970
Now you can see there's some lines that are much stronger the connection between a and b is actually

180
00:12:47.120 --> 00:12:47.940
thicker now.

181
00:12:48.020 --> 00:12:50.950
And now there's even kind of a thin white line between B and C..

182
00:12:50.960 --> 00:12:55.310
However given how much there was to work with here how much noise there was it's actually doing a pretty

183
00:12:55.310 --> 00:12:56.390
darn good job.

184
00:12:56.390 --> 00:13:00.640
And you can experiment with the kernel size in case you want to try to see a kernel that's better.

185
00:13:00.650 --> 00:13:04.260
But in general this is the way you can't get rid of foreground noise.

186
00:13:04.280 --> 00:13:08.150
Morf close essentially the opposite of morphological opening.

187
00:13:08.210 --> 00:13:08.650
OK.

188
00:13:08.840 --> 00:13:14.270
Now lesing I want to discuss is the morphological gradient and the morphological gradient just takes

189
00:13:14.270 --> 00:13:20.150
the difference between dilation and erosion of an image let's Reesa our image.

190
00:13:21.030 --> 00:13:27.050
Well say load image and all we're going to do here is display the original image so we can see what

191
00:13:27.050 --> 00:13:29.030
it looks like.

192
00:13:29.030 --> 00:13:30.940
So here is the original image.

193
00:13:31.040 --> 00:13:36.560
We know that if we were to perform erosion it would begin to get read between the background and the

194
00:13:36.560 --> 00:13:37.580
foreground edge.

195
00:13:37.670 --> 00:13:42.070
If I were to perform dilation it would actually end up adding more Mickey D's letters even more but

196
00:13:42.070 --> 00:13:46.040
really the morphological gradient will take the difference between those two.

197
00:13:46.160 --> 00:13:50.630
And what happens is especially with text it becomes really clear you essentially just grab the edge

198
00:13:50.990 --> 00:13:53.940
of the foreground next to the background.

199
00:13:54.050 --> 00:13:56.690
And this kind of a method of edge detection.

200
00:13:56.810 --> 00:14:02.320
So we'll see more sophisticated methods of action later on in a couple of sessions for them of course.

201
00:14:02.330 --> 00:14:12.580
But this one is pretty simple we just say gradients and then say CB2 again calling morphology X say

202
00:14:12.590 --> 00:14:14.560
image CB2.

203
00:14:14.600 --> 00:14:22.620
And this time the Morfe call you going to do is Morf gradients and pass in the same kernel and this

204
00:14:22.620 --> 00:14:23.780
will be a pretty cool result.

205
00:14:23.790 --> 00:14:28.290
We'll say the display image gradients run that.

206
00:14:28.380 --> 00:14:29.220
And there you have it.

207
00:14:29.250 --> 00:14:34.350
This is the difference between erosion and dilation essentially just the edges of this text.

208
00:14:34.470 --> 00:14:39.720
So you can do this as kind of a crude form of edge detection and that's it for all the morphological

209
00:14:39.720 --> 00:14:41.910
operators that we're going to cover in this lecture.

210
00:14:41.940 --> 00:14:45.480
We'll see them come time to time especially when we need to get rid of noise.

211
00:14:45.630 --> 00:14:50.100
And then we can even add them in with things like median blurbed to also get help to also help get rid

212
00:14:50.100 --> 00:14:54.360
of noise in certain images or maybe help with edge detection but that's all you need to know.

213
00:14:54.360 --> 00:14:55.790
The fact that you can.

214
00:14:56.110 --> 00:15:00.060
Don't worry too much about adding noise to images we really won't be doing that we should understand

215
00:15:00.060 --> 00:15:04.370
though is that there's different calls you can make and those calls are essentially in this format.

216
00:15:04.390 --> 00:15:11.370
If we come back down here there are morphology X you pass in the image and then you do a CV to call

217
00:15:11.370 --> 00:15:15.930
with a more underscore and it's either going to be open close or a gradient the pinning on what you're

218
00:15:15.930 --> 00:15:20.100
actually trying to achieve and then you pass the kernel as well and you can play around with that kernel

219
00:15:20.100 --> 00:15:21.530
size OK.

220
00:15:21.720 --> 00:15:23.330
So that's it for this lecture.

221
00:15:23.340 --> 00:15:26.730
We'll see you at the next one where we dive in deeper into gradients.
