1
00:00:05,390 --> 00:00:11,210
Welcome back in this lecture we're going to discuss in further detail how to open image files in a notebook

2
00:00:11,680 --> 00:00:13,210
in the previous section of the course.

3
00:00:13,280 --> 00:00:18,680
We saw how we could open an image file by using the python imaging library then using some PI to transform

4
00:00:18,680 --> 00:00:23,810
it to an array and then using Map live with its show command in order to actually display the array

5
00:00:23,900 --> 00:00:26,180
as an image inside of the notebook.

6
00:00:26,180 --> 00:00:30,950
This is a lot of steps and the open sea the library can actually help fix some of the steps by making

7
00:00:30,950 --> 00:00:32,030
it a little shorter.

8
00:00:32,090 --> 00:00:38,330
So we're going to do is use open C-v in conjunction of live to weekly read and then image as an array

9
00:00:38,510 --> 00:00:39,980
and then display it.

10
00:00:40,010 --> 00:00:43,050
All right let's get started by opening up a notebook.

11
00:00:43,490 --> 00:00:47,370
OK here we have a new notebook and I'm going to do a couple of imports.

12
00:00:47,420 --> 00:00:53,350
We're an important umpire and P and then we'll also be importing that live pipe plot as Piazzi.

13
00:00:53,630 --> 00:00:56,270
And since we want to see the images in the notebook itself.

14
00:00:56,270 --> 00:01:02,230
We're going to say map plot line in line and that's a percent sign before that map published in line

15
00:01:02,240 --> 00:01:03,020
come in.

16
00:01:03,020 --> 00:01:07,460
Keep in mind if you're following along some sort of ID which is just a PI script this is only for the

17
00:01:07,460 --> 00:01:08,940
Jupiter note book.

18
00:01:09,020 --> 00:01:09,580
OK.

19
00:01:09,770 --> 00:01:15,020
Now we actually need to import the open see the library and the way we do this is we simply say import

20
00:01:15,350 --> 00:01:17,560
C-v to run that.

21
00:01:17,600 --> 00:01:20,940
And if you have your environment activated then you should see it import.

22
00:01:21,290 --> 00:01:22,070
OK.

23
00:01:22,100 --> 00:01:27,590
Now I want to quickly show you a potential error and a potential error is if you actually try to use

24
00:01:27,590 --> 00:01:32,480
the image reading capabilities of CB2 with the wrong path.

25
00:01:32,540 --> 00:01:40,100
So I'm going to say image variable is equal to CB2 and then I'm going to call the in the read it which

26
00:01:40,100 --> 00:01:42,930
stands for image read and the way this command works.

27
00:01:42,950 --> 00:01:49,730
If you simply pass in the actual file path to the image is the JPEG file or the PNB file.

28
00:01:50,150 --> 00:01:56,900
So for example I could say data forward slash and then I should be able to tab auto complete this if

29
00:01:56,900 --> 00:01:59,910
I'm doing it correctly and then see that puppie jpeg.

30
00:02:00,230 --> 00:02:02,270
So that automatically reads it in.

31
00:02:02,270 --> 00:02:07,420
And if we check the type of the variable object it reads it indirectly as a pie array.

32
00:02:07,460 --> 00:02:13,510
So we no longer need to have that intermediary step of transforming the actual image file into an umpiring

33
00:02:13,900 --> 00:02:14,520
open CV.

34
00:02:14,540 --> 00:02:18,810
Does that automatically for us by doing CB2 Imrie.

35
00:02:18,890 --> 00:02:25,220
However there's a big potential error here and the potential error is if I were to say image is equal

36
00:02:25,220 --> 00:02:31,930
to CB2 to Emory and what I'm going to do is I'm going to purposely pass in the wrong file.

37
00:02:32,120 --> 00:02:41,020
So critics say wrong path does not and then just a bunch of jibberish.

38
00:02:41,180 --> 00:02:42,050
A peg.

39
00:02:42,100 --> 00:02:46,930
So there definitely isn't a file with all this jibberish J pig and this patch definitely doesn't exist

40
00:02:46,990 --> 00:02:48,100
on my computer.

41
00:02:48,200 --> 00:02:51,320
You'll notice that when I run this I actually don't get an error.

42
00:02:51,590 --> 00:02:56,360
And instead what happens is it just returns back none type.

43
00:02:56,440 --> 00:03:02,110
So there's a big potential here for actually getting an error because you're not warned if you pass

44
00:03:02,140 --> 00:03:03,640
in the wrong file path.

45
00:03:03,640 --> 00:03:09,100
So a lot of times beginners get stuck here because they're saying hey I'm able to do the image read

46
00:03:09,160 --> 00:03:11,140
and I'm not getting an error when I run this command.

47
00:03:11,140 --> 00:03:12,540
So my path must be correct.

48
00:03:12,700 --> 00:03:14,200
But that's actually not the case.

49
00:03:14,230 --> 00:03:16,400
You should always be checking if you ever have any doubts.

50
00:03:16,510 --> 00:03:22,060
The type of the variable that's returned by CB2 that Imrie if it's returning a none type then you're

51
00:03:22,060 --> 00:03:24,780
not providing the correct path to the image.

52
00:03:24,850 --> 00:03:25,460
OK.

53
00:03:25,570 --> 00:03:31,420
So let's actually grab this line again and make sure we read in the correct path.

54
00:03:31,570 --> 00:03:34,640
Check the type of image and there we go it's a non-pilot right.

55
00:03:34,810 --> 00:03:37,930
So again keep in mind if you provide the wrong path you don't get the error.

56
00:03:38,040 --> 00:03:39,930
Instead it's just a nun type.

57
00:03:40,000 --> 00:03:43,990
So we're going to continue here and I'm going to show you what the image actually looks like.

58
00:03:44,140 --> 00:03:46,240
It's Remember a pie array.

59
00:03:46,240 --> 00:03:51,220
And if you take the shape of it it's 13:00 by 1950 by three.

60
00:03:51,490 --> 00:03:55,600
So now I no longer need to worry about transforming this into an umpire right.

61
00:03:55,750 --> 00:04:02,410
Now let's imagine we wanted to show this image while I could just say realty show and then pass in the

62
00:04:02,410 --> 00:04:04,330
image.

63
00:04:04,330 --> 00:04:06,810
However you'll notice something kind of strange happens here.

64
00:04:06,850 --> 00:04:10,240
It's showing the image in kind of a weird bluish tint.

65
00:04:10,480 --> 00:04:17,620
And the reason for that is because open C-v and map plot lib expect different orders of the red green

66
00:04:17,620 --> 00:04:18,820
blue channels.

67
00:04:18,850 --> 00:04:20,730
So that's an important distinction to note.

68
00:04:21,010 --> 00:04:29,260
So the way that plot lib thinks of image for red green blue it's going expect the red green blue channels

69
00:04:29,260 --> 00:04:30,800
to show up in this order.

70
00:04:30,940 --> 00:04:35,510
So it expects red then green then blue.

71
00:04:35,830 --> 00:04:41,480
However open see what it does is it read them in in a slightly different order.

72
00:04:41,680 --> 00:04:45,930
It reads them in as blue green red.

73
00:04:46,210 --> 00:04:51,940
So what happened is when we actually read in that file with open C-v we're reading it in as if it was

74
00:04:51,940 --> 00:04:58,620
a blue green red channeled image and that public is displaying it as if it's a red green blue image.

75
00:04:58,780 --> 00:05:04,460
So some of these channels specifically the red and the blue one they're accidentally getting swapped.

76
00:05:04,540 --> 00:05:10,240
So that's why when we actually display the image after reading it in with CB2 that Imrie we get this

77
00:05:10,240 --> 00:05:11,890
kind of weird coloration.

78
00:05:12,130 --> 00:05:19,280
So what we need to do is actually transform this to go from blue green red to red green blue the way

79
00:05:19,280 --> 00:05:24,710
a map it expects it so C-v to actually has functionality for that.

80
00:05:24,760 --> 00:05:29,460
What we do is we say CB2 dot CVT color.

81
00:05:29,460 --> 00:05:35,290
Notice the see is capitalize on that color and then the way this function works as you passen FARC or

82
00:05:35,290 --> 00:05:36,220
the source.

83
00:05:36,220 --> 00:05:39,020
And then you pasand some sort of color code.

84
00:05:39,190 --> 00:05:41,960
So we already have our image that's the source we're going to say.

85
00:05:42,130 --> 00:05:53,690
I M.G. you say CB2 dot and then all caps color underscore and if you hit tab here you'll notice that

86
00:05:53,700 --> 00:05:55,640
there's a bunch of different options.

87
00:05:55,670 --> 00:06:02,030
So essentially open C-v that library can convert from any color space to any other.

88
00:06:02,170 --> 00:06:07,160
So you know this as a bunch of different codes here to go from green red to blue green red.

89
00:06:07,160 --> 00:06:14,090
So the main syntax here is you provide color underscore and then it's current channel ordering like

90
00:06:14,090 --> 00:06:18,630
blue green red and then you transform it to a different channel coloring.

91
00:06:18,650 --> 00:06:22,880
So you notice a ton of options here where they're really not using all of these options really a few

92
00:06:22,880 --> 00:06:23,450
of them.

93
00:06:23,510 --> 00:06:33,500
The main one we're going to right now is to go from blue green red to red green blue.

94
00:06:33,560 --> 00:06:35,130
So that's just a simple transformation.

95
00:06:35,150 --> 00:06:37,830
That's all we actually need and a kick out of this now.

96
00:06:37,970 --> 00:06:45,050
So all we're saying is take this original image and you read it in as a blue green red channel image

97
00:06:45,380 --> 00:06:48,380
convert it please to red green blue.

98
00:06:48,380 --> 00:06:56,360
That way I can display it correctly with realty show talking about going to call this fixed image is

99
00:06:56,360 --> 00:07:01,850
equal to CB2 that original image and then the color space is going to get converted.

100
00:07:03,140 --> 00:07:04,860
So now I have my fixed image here.

101
00:07:04,970 --> 00:07:11,780
And I say peel teeth that show and then I can display my fixed image and now I see it in the correct

102
00:07:11,870 --> 00:07:13,370
color channel coding.

103
00:07:13,370 --> 00:07:18,170
So again all that's happening here is open C-v is reading things as if they were blue green red and

104
00:07:18,170 --> 00:07:21,110
that plebe expects things to be red green blue.

105
00:07:21,110 --> 00:07:25,550
So if you don't do this color conversion you make it's kind of a strange thing here.

106
00:07:25,580 --> 00:07:25,940
All right.

107
00:07:25,940 --> 00:07:30,920
Now the next thing I want to show is let's imagine you have a colored image but you immediately want

108
00:07:30,920 --> 00:07:33,200
to read it in as a greyscale image.

109
00:07:33,380 --> 00:07:36,080
Well open C-v can actually do that for you as well.

110
00:07:36,080 --> 00:07:40,670
So we're going to take our original Emarine command because it adds color code to it.

111
00:07:40,670 --> 00:07:48,240
So I'm going to say image underscore Gray is equal to CB2 and I'm going to call him read.

112
00:07:48,290 --> 00:07:53,930
So our original image reader and then I'm going to pass in the original file path again.

113
00:07:54,030 --> 00:07:57,970
In this case data we should be able to tab autocomplete that.

114
00:07:58,250 --> 00:08:03,820
And then as a second argument I'm going to pass an image read codes are going to say emerita.

115
00:08:04,160 --> 00:08:08,630
And if you hit tab here you'll notice there's lots of different ways to read an image such as reduced

116
00:08:08,630 --> 00:08:09,330
color.

117
00:08:09,410 --> 00:08:11,690
You can't ignore orientation and so on.

118
00:08:11,690 --> 00:08:17,120
The only thing we're going to say here is underscore grayscale solution to choose greyscale.

119
00:08:17,120 --> 00:08:21,370
And what this does is it says hey no matter what colors this image has.

120
00:08:21,470 --> 00:08:26,580
Go ahead and do a fresh read of it an important as a greyscale image.

121
00:08:26,720 --> 00:08:30,910
So I'm going to read that in and if we check the actual shape here.

122
00:08:31,040 --> 00:08:37,640
Notice now it no longer has that third dimension because you read it in as a greyscale image it no longer

123
00:08:37,640 --> 00:08:44,400
has a need for three color channels instead it's just a bunch of values that go from zero to 55.

124
00:08:44,420 --> 00:08:49,760
So if you check the minimum value here or actually goes from 1 in this case because that's how pure

125
00:08:49,760 --> 00:08:50,680
black I guess.

126
00:08:50,990 --> 00:08:53,280
And then we'll check the max here.

127
00:08:53,280 --> 00:08:56,510
The max is 2 9 so there's actually no pure white either.

128
00:08:56,510 --> 00:09:00,220
So let's go ahead and see what this great out version looks like.

129
00:09:00,290 --> 00:09:07,610
We're going to say realty show and check out this great out version.

130
00:09:07,710 --> 00:09:10,290
And there we have our Grayskull version.

131
00:09:10,290 --> 00:09:13,320
Now you're probably wondering why is this not in black and white.

132
00:09:13,320 --> 00:09:19,080
So that again has to do with the default color mapping that show uses the default color mapping as we

133
00:09:19,080 --> 00:09:24,390
explained previously is that viridis which takes Dharker values and shows them as kind of a blue and

134
00:09:24,390 --> 00:09:28,530
then takes lighter values and shows them as kind of a yellowish green.

135
00:09:28,530 --> 00:09:34,030
So what we're going to do here is just say See map and say it's great.

136
00:09:34,150 --> 00:09:37,750
And then it's just going to choose a color mapping that actually corresponds to grayscale.

137
00:09:37,780 --> 00:09:41,800
So that's how you can read in color images as grayscale the things that go here.

138
00:09:41,840 --> 00:09:47,970
As I said CB2 that read I passed then the source of the original image file and then said CB2 immured

139
00:09:47,970 --> 00:09:48,850
greyscale.

140
00:09:48,910 --> 00:09:53,560
And if you actually want to display the image using that lib as grayscale then you actually need to

141
00:09:53,560 --> 00:09:57,700
specify that the scale the color mapping for it should be gray.

142
00:09:57,700 --> 00:10:01,180
Keep in mind you can check out the map Cutlip color mappings and choose other color mappings if you

143
00:10:01,180 --> 00:10:01,750
want.

144
00:10:01,750 --> 00:10:05,710
So for example magma is one that would take dark values close to zero.

145
00:10:05,710 --> 00:10:10,000
Treat them as kind of a dark blackish purple and then take light values as kind of an orange.

146
00:10:10,060 --> 00:10:13,080
But if our use cases we can actually visualize grayscale.

147
00:10:13,090 --> 00:10:15,400
So just say See map is equal to agree.

148
00:10:15,490 --> 00:10:15,900
OK.

149
00:10:16,090 --> 00:10:20,040
So just a few more things I want to talk about as far as basic image manipulation.

150
00:10:20,170 --> 00:10:26,110
I want to talk about resizing images and then also kind of flipping images around and saving image files.

151
00:10:26,260 --> 00:10:27,630
So we're almost done here.

152
00:10:28,060 --> 00:10:29,680
Let's talk about resizing images.

153
00:10:29,680 --> 00:10:31,300
It's actually pretty straightforward.

154
00:10:31,330 --> 00:10:33,640
All we need to do is do the following.

155
00:10:33,640 --> 00:10:36,500
I'm going to say a sugar image again.

156
00:10:37,610 --> 00:10:44,510
We have image and whoops go ahead and show t show image.

157
00:10:44,570 --> 00:10:45,830
So that's our image right now.

158
00:10:45,830 --> 00:10:47,870
And in fact we never actually saved our conversion.

159
00:10:47,870 --> 00:10:49,440
I don't believe so.

160
00:10:49,490 --> 00:10:54,230
We do have a fixed image so let's take that fixed image and show it.

161
00:10:54,230 --> 00:10:59,030
So this is our original image we can actually see the scale here from zero to around 13:00 then from

162
00:10:59,030 --> 00:11:00,600
0 to around 1950.

163
00:11:00,770 --> 00:11:08,060
If I want to actually check the shape of this I can say fixed image check the shape and it's 13:00 by

164
00:11:08,060 --> 00:11:09,190
1950.

165
00:11:09,260 --> 00:11:16,190
So if I want to resize the image I can actually do it a simple resize command will say CB2 dot resize

166
00:11:16,850 --> 00:11:22,370
and then the arguments it takes is the source and then the Deeside or destination size.

167
00:11:22,370 --> 00:11:25,180
And you can scroll down and check out the parameters here.

168
00:11:25,190 --> 00:11:29,210
Couple more but really all we need to worry about is passing in the original image.

169
00:11:30,390 --> 00:11:35,220
We'll say Fix image and then we can pass on the new dimensions we want.

170
00:11:35,220 --> 00:11:41,640
So for example if we wanted to really squeeze this down I could say is make the width now maybe like

171
00:11:41,640 --> 00:11:42,080
half of it.

172
00:11:42,080 --> 00:11:47,840
So let's go ahead and choose 1000 for the with and then let's go ahead and make the height really squeezed.

173
00:11:47,840 --> 00:11:50,200
Let's go ahead and make it just like around 400.

174
00:11:50,360 --> 00:11:54,800
So it's going to really squeeze the image here and then we'll say something like.

175
00:11:54,800 --> 00:11:58,160
New image is equal to CB2 that resize.

176
00:11:58,160 --> 00:12:03,110
And if I say to him Show this new image.

177
00:12:03,110 --> 00:12:05,390
Notice here kind of how squeeze that is.

178
00:12:05,390 --> 00:12:10,310
So right now we have zero to 400 and then 0 to 1000.

179
00:12:10,310 --> 00:12:13,960
So keep in mind that I mentioned here they're actually swapped from the original shape.

180
00:12:14,090 --> 00:12:21,840
So this 1000 is actually connected to this 1950 and this 400 is the resizing for his 13:00.

181
00:12:22,010 --> 00:12:26,390
So that's a little confusing at first that it takes in the x and y kind of the opposite way that the

182
00:12:26,480 --> 00:12:27,860
umpire thinks about it.

183
00:12:27,860 --> 00:12:29,290
But it's just something to get used to.

184
00:12:29,360 --> 00:12:33,830
And you can sort out the resize and the dimensions used here in order to understand that relationship

185
00:12:33,830 --> 00:12:34,150
better.

186
00:12:34,160 --> 00:12:37,850
But luckily there's a skill bar here that kind of clearly shows the relationship.

187
00:12:37,880 --> 00:12:42,860
So he went from zero to 13:00 down to zero to 400.

188
00:12:42,860 --> 00:12:45,500
So it changes 13:00 to 400.

189
00:12:45,530 --> 00:12:51,470
And this 1950 to 1000 and noticed that it conveniently does this for you across all three channels that

190
00:12:51,470 --> 00:12:54,740
we don't get any distortion across the actual color channels.

191
00:12:54,740 --> 00:13:00,700
So we were able to resize often you're probably gonna want to resize by ratio instead.

192
00:13:00,740 --> 00:13:02,450
So that's actually quite simple.

193
00:13:02,450 --> 00:13:08,890
So if I want to resize by a ratio I just need to choose my With ratio and my height ratio.

194
00:13:09,020 --> 00:13:11,640
So let's go ahead and make this whole image 50 percent smaller.

195
00:13:11,780 --> 00:13:15,570
So I will say my weight ratio is 0.5 or 1 1/2.

196
00:13:15,770 --> 00:13:18,860
And then also say that my height ratio is 0.5.

197
00:13:18,890 --> 00:13:22,120
So I essentially want to reduce the image by 50 percent ratio.

198
00:13:22,400 --> 00:13:27,360
Then the next thing I'm going to do is create a variable to hold my new resized image call it and you

199
00:13:27,380 --> 00:13:34,100
underscore image and we're going to use the same resize command but the parameters are going to be slightly

200
00:13:34,160 --> 00:13:35,230
different.

201
00:13:35,240 --> 00:13:38,520
We're going to first take in the image that we want to resize.

202
00:13:38,600 --> 00:13:46,500
So I want to resize that fixed image and then you pasan 00 as a tuple and then you get a pass and the

203
00:13:46,500 --> 00:13:48,870
image again is the premolars are a bit strange.

204
00:13:48,900 --> 00:13:50,350
And the way they're passing him in.

205
00:13:50,460 --> 00:13:51,800
But this how resized works.

206
00:13:51,810 --> 00:13:57,930
If you want to do it by a particular ratio so it's the image you're going to resize tuples of 0 0 and

207
00:13:57,930 --> 00:14:03,240
then the image you want to resize again and then provide the width ratio and the height ratio.

208
00:14:03,240 --> 00:14:06,660
So you're going to pride with ratio and height ratio.

209
00:14:06,660 --> 00:14:09,530
They don't need to be variables you could've just passed those values indirectly.

210
00:14:09,540 --> 00:14:11,840
But there's a little more explanatory.

211
00:14:11,940 --> 00:14:15,980
So then we're going to run that and then say pilt t him show.

212
00:14:16,150 --> 00:14:17,040
Then you image.

213
00:14:17,040 --> 00:14:20,250
You'll notice that it's been resized to half of the dimensions.

214
00:14:20,250 --> 00:14:24,530
So if I take new image here and then check its shape.

215
00:14:24,930 --> 00:14:27,800
It's now 650 by 9 7 5.

216
00:14:27,810 --> 00:14:29,090
Now we can adjust this further.

217
00:14:29,100 --> 00:14:34,530
Maybe I only want the ratio to be reduced to 80 percent of its original but median what the height ratio

218
00:14:34,530 --> 00:14:41,130
to be reduced to 20 percent of its original so the way to read these is for example here are saying

219
00:14:41,130 --> 00:14:44,730
20 percent of original height.

220
00:14:44,760 --> 00:14:50,700
So it's not 20 percent off between percent of the original so far to rerun these you'll notice now the

221
00:14:50,700 --> 00:14:54,480
height is 20 percent of its original height but the width is almost same.

222
00:14:54,480 --> 00:14:57,570
It's about 80 percent of the original with so I second check the shape there.

223
00:14:57,690 --> 00:15:00,740
You can see it's 260 and then 15.

224
00:15:00,750 --> 00:15:05,750
So if I were to say to 60 times five that's 13:00 which is the original.

225
00:15:05,760 --> 00:15:09,470
Which makes sense because five times 20 is a hundred or hundred percent.

226
00:15:09,830 --> 00:15:10,330
OK.

227
00:15:10,500 --> 00:15:13,070
So that's how you can resize based off a ratio.

228
00:15:13,230 --> 00:15:16,650
And there's three more things we want to show you before we finish off this lecture.

229
00:15:16,650 --> 00:15:21,330
I know it's going a little long but all we're going to do is show you how to flip images along the horizontal

230
00:15:21,330 --> 00:15:22,710
or vertical axes.

231
00:15:22,710 --> 00:15:29,970
The way you do that is you just create a new image variable and you say CB2 flip and then you pass in

232
00:15:30,010 --> 00:15:31,140
the image you want to flip.

233
00:15:31,140 --> 00:15:34,700
So let's go ahead and pass in our original fixed image.

234
00:15:34,920 --> 00:15:43,140
And if you type in zero here as a second parameter and then show Hilti him show this new image you'll

235
00:15:43,140 --> 00:15:48,620
notice that it's now been flipped along a horizontal axis essentially showing it upside down.

236
00:15:48,680 --> 00:15:54,320
If you want to flip it along the vertical middle axes do you just when you say one here.

237
00:15:54,360 --> 00:15:56,690
So again the original shows the dog on the right side.

238
00:15:56,700 --> 00:16:01,640
So now flip that along this vertical midway point so another dog looks like on the left side.

239
00:16:01,750 --> 00:16:06,050
If you want to do both flips at once you can say a negative one.

240
00:16:06,060 --> 00:16:11,820
So again just CB2 flip the image you want to flip and then either 0 1 0 or negative 1 and will actually

241
00:16:11,820 --> 00:16:16,170
be using the input command to generate more images and we actually have four deep learning purposes

242
00:16:16,170 --> 00:16:17,310
later on in the course.

243
00:16:17,520 --> 00:16:18,940
So that CB2 flip.

244
00:16:18,990 --> 00:16:21,480
Let's also quickly show you how you can save an image file.

245
00:16:21,690 --> 00:16:26,530
So if you have an image file that's a pie array inside of your notebook.

246
00:16:26,550 --> 00:16:30,990
So I'm going to say type and then let's go ahead and say fix image.

247
00:16:31,010 --> 00:16:32,100
That's an umpire Ray.

248
00:16:32,150 --> 00:16:37,260
If I want to write this to a new file I can say CB2 I am right.

249
00:16:37,280 --> 00:16:39,140
Essentially the opposite of I read.

250
00:16:39,370 --> 00:16:42,270
And then you pass and whatever file path you want to say that too.

251
00:16:42,290 --> 00:16:49,290
So I can say totally new wups underscore new thought JPA.

252
00:16:49,380 --> 00:16:50,750
So that's my image here.

253
00:16:51,000 --> 00:16:53,760
And then I just pass on what I actually want to write.

254
00:16:53,760 --> 00:16:55,200
So in this case we'll say fix them.

255
00:16:55,210 --> 00:17:00,810
So this takes the fixed image variable that's an umpire and then writes it to this jpg file and it can

256
00:17:00,810 --> 00:17:04,170
write to quite a few different file types you can check out the documentation here.

257
00:17:04,170 --> 00:17:07,170
As far as all the different file types you can save too.

258
00:17:07,230 --> 00:17:10,640
Ok so I want to run this and totally new that J peg.

259
00:17:10,800 --> 00:17:14,010
I just saved it to the same folder that the stupid note book is in.

260
00:17:14,010 --> 00:17:19,520
So if I expand my file browser here you should be able to see somewhere here totally new that jpeg or

261
00:17:19,530 --> 00:17:21,140
whatever we happen to call the file.

262
00:17:21,150 --> 00:17:26,370
And you can also click on Last-Modified to kind of find that so few seconds ago I saved totally knew

263
00:17:26,370 --> 00:17:27,220
that jpeg.

264
00:17:27,480 --> 00:17:29,560
So that's how you can save files.

265
00:17:29,730 --> 00:17:34,530
And the very last thing we're were talk about is how to display these images slightly larger inside

266
00:17:34,530 --> 00:17:35,430
of a notebook.

267
00:17:35,430 --> 00:17:37,510
You'll notice that this is actually quite a really large image.

268
00:17:37,530 --> 00:17:43,050

269
13:00 by 1950 that's actually almost the size of the monitor but the notebook will kind of shrink it

270
00:17:43,050 --> 00:17:45,420
down to display it so that it fits in the notebook.

271
00:17:45,420 --> 00:17:51,090
However you can adjust the essentially canvas space allowed for the notebook to display the image on

272
00:17:51,500 --> 00:17:54,020
and the way you do that is a little bit of that live.

273
00:17:54,450 --> 00:17:56,040
And don't worry about understanding this code.

274
00:17:56,070 --> 00:17:58,710
Just understand that we're going to be referencing this code.

275
00:17:58,800 --> 00:18:06,140
So we say figure Piazzi figure and then we say fix size is equal to.

276
00:18:06,270 --> 00:18:10,040
And then you actually give some dimensions in inches so we can say 10 by eight.

277
00:18:10,230 --> 00:18:14,210
So that allows a blank canvas space of 10 by eight inches.

278
00:18:14,250 --> 00:18:21,780
Then you say X axes is equal to Fig dot adds subplots 1 1 1.

279
00:18:21,780 --> 00:18:29,130
So it just says essentially one by one subplot a single image and then we say X that show and then whatever

280
00:18:29,130 --> 00:18:30,580
image you want to display.

281
00:18:30,810 --> 00:18:34,480
So this is some really heavy kind of a little more complicated map plot lib code.

282
00:18:34,500 --> 00:18:38,400
The only thing you really need to understand here is we're going to be kind of functional using this

283
00:18:38,400 --> 00:18:42,600
code later on the course so you'll see me copy and paste these three lines.

284
00:18:42,600 --> 00:18:44,880
Essentially the most important thing is this figure size.

285
00:18:44,880 --> 00:18:51,260
Now you can designate a larger blank canvas area for this image to fill out more than the actual default.

286
00:18:51,400 --> 00:18:57,310
So for a show here you'll notice now I have a lot more space to work with or if you want to make weightless

287
00:18:57,310 --> 00:18:57,810
less space.

288
00:18:57,840 --> 00:19:00,590
You could say something like too by to show it.

289
00:19:00,810 --> 00:19:03,170
And then you have less canvas to show.

290
00:19:03,390 --> 00:19:09,600
So essentially just to find out how much blank canvas space can I use in the Jupiter notebook and you

291
00:19:09,600 --> 00:19:10,260
should keep mine.

292
00:19:10,260 --> 00:19:13,130
I'm actually quite zoomed in on my browser I'm 300 percent zoomed in.

293
00:19:13,290 --> 00:19:15,540
So your results may look exactly like mine.

294
00:19:15,780 --> 00:19:16,440
OK.

295
00:19:16,440 --> 00:19:17,640
So that's it for this lecture.

296
00:19:17,640 --> 00:19:23,100
I know there was a lot but the main things were just using Open see the lib to actually display images

297
00:19:23,160 --> 00:19:24,420
inside of a notebook.

298
00:19:24,420 --> 00:19:28,220
Coming up next we'll talk about how to use open C.V in a script setting.

299
00:19:28,230 --> 00:19:28,930
We'll see if.
