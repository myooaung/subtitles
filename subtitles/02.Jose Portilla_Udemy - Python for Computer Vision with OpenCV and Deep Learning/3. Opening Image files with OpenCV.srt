1
00:00:05,230 --> 00:00:11,990
Welcome back in this lecture we're going to discuss opening image files using open C-v with Python scripts.

2
00:00:13,220 --> 00:00:17,870
So in this lecture we're going to be using the open C library to display images in their own separate

3
00:00:17,870 --> 00:00:19,900
window outside of Jupiter.

4
00:00:20,090 --> 00:00:24,740
For more complex video on image analysis that we performed later on in the course we're going to need

5
00:00:24,790 --> 00:00:28,040
this play outside of Jupiter.

6
00:00:28,120 --> 00:00:33,500
Now while we will often just use pilt that show as we showed in the previous lecture display images

7
00:00:33,560 --> 00:00:38,330
inside of the notebook we're often going to also want to use open C-v on its own.

8
00:00:38,330 --> 00:00:44,510
Now the caveat is that often Jupiter since it's based in the browser it interferes with closing the

9
00:00:44,510 --> 00:00:45,470
window.

10
00:00:46,070 --> 00:00:51,260
So that means that many times Jupiter lab can display a new window if no issues but the kernel will

11
00:00:51,260 --> 00:00:56,470
crash when you actually try to close that open C.V window and to fix that potential issue.

12
00:00:56,480 --> 00:01:00,640
All you need to do is simply restart the kernel inside of the notebook.

13
00:01:00,850 --> 00:01:05,180
And these issues actually tend to appear more on Mac OS and Linux than in Windows.

14
00:01:05,230 --> 00:01:08,870
So I'll try my best to recreate the issue here and show you how you can potentially solve it.

15
00:01:08,890 --> 00:01:13,210
But don't be surprised if you actually don't run into any of these errors or issues.

16
00:01:13,240 --> 00:01:18,460
So again if you get the kernel error more often you may simply just run your code as a separate Python

17
00:01:18,460 --> 00:01:20,930
script so to show these potential issues.

18
00:01:20,950 --> 00:01:24,620
And we're also going to show you how to open and display images directly with open C.v.

19
00:01:24,620 --> 00:01:28,680
Now Matt Plup lib and we're showing both the notebook and as a separate script.

20
00:01:28,690 --> 00:01:30,020
So let's get started.

21
00:01:30,460 --> 00:01:32,730
OK here we are in a brand new notebook.

22
00:01:34,400 --> 00:01:39,250
I'm first going to show you how to open up an image in a notebook and a potential error that can happen.

23
00:01:39,260 --> 00:01:41,390
So we're going to say import CB2.

24
00:01:41,550 --> 00:01:43,760
And this is all going to go in the same cell.

25
00:01:44,120 --> 00:01:45,950
And that's actually quite important for this.

26
00:01:46,040 --> 00:01:52,460
So we're going to say that image is C-v to that image read and we're going to import that image that

27
00:01:52,460 --> 00:01:53,160
we've been reading.

28
00:01:53,180 --> 00:01:57,570
It's that puppy image can go ahead and make sure it is all capitalized here.

29
00:01:57,650 --> 00:02:05,780
Data puppie jpeg and then we're going to do is say C-v to dot and then this has its own show command

30
00:02:06,440 --> 00:02:08,270
and it takes in two parameters here.

31
00:02:08,270 --> 00:02:10,610
One is whatever you want to call the window name.

32
00:02:10,850 --> 00:02:14,170
So you can say puppy make sure there's no spaces in that when the name.

33
00:02:14,360 --> 00:02:17,090
And then the second parameter is the actual image you want to display.

34
00:02:17,090 --> 00:02:19,460
So in this case I want to show that puppy image.

35
00:02:19,460 --> 00:02:27,290
And then finally we say CB2 thought wait capital K E Y and that's basically going to be a signal for

36
00:02:27,290 --> 00:02:30,560
us to be able to click the exit button and close that window.

37
00:02:30,560 --> 00:02:35,270
Later on we'll see some more sophisticated techniques that allow us to escape key or Q In order to close

38
00:02:35,270 --> 00:02:36,560
windows.

39
00:02:36,560 --> 00:02:40,190
So I'm going to go ahead and run the cell and everything's in the same cell.

40
00:02:40,250 --> 00:02:44,840
I'm going to run it and after you run that cell you should notice that has an asterix there meaning

41
00:02:44,840 --> 00:02:46,720
that it's currently running the cell.

42
00:02:46,910 --> 00:02:52,280
And if you look back down at your taskbar you should now see kind of a little extra window that Jupiter

43
00:02:52,370 --> 00:02:53,660
lab icon.

44
00:02:53,660 --> 00:02:58,440
And if you click on that window now you see the puppy image in its own separate window.

45
00:02:58,580 --> 00:03:02,710
Now it's kind of interesting about this is that you actually cannot resize this window.

46
00:03:02,860 --> 00:03:05,850
So open TV is just going to display the same dimensions.

47
00:03:05,960 --> 00:03:07,960
Everything in my case fits on the screen.

48
00:03:08,060 --> 00:03:13,220
But if you're running this on a laptop with a smaller screen this may take actually the entirety of

49
00:03:13,220 --> 00:03:13,780
your screen.

50
00:03:13,790 --> 00:03:14,570
So keep that in mind.

51
00:03:14,570 --> 00:03:15,900
It's quite a large image.

52
00:03:16,100 --> 00:03:19,390
And now I'm going to do is I'm going to go ahead and exit this out.

53
00:03:20,030 --> 00:03:24,760
And once you exit you should then notice kind of something output here like negative 1.

54
00:03:24,800 --> 00:03:27,500
So that's if everything is running correctly.

55
00:03:27,560 --> 00:03:33,200
However often on Mac OS or Linux what's going to happen is if you run this and then you get back the

56
00:03:33,200 --> 00:03:37,030
window and you try to exit and you're going to induce the error here.

57
00:03:38,170 --> 00:03:42,530
What may happen is as you try to exit it's not closing and things start slowing down.

58
00:03:42,550 --> 00:03:46,230
You suddenly get puppy isn't responding and there's some sort of error.

59
00:03:46,720 --> 00:03:49,600
And basically here happened is your Colonel died.

60
00:03:49,780 --> 00:03:53,270
So you get some sort of thing like would you like to shut down Python et cetera.

61
00:03:53,470 --> 00:03:58,090
So in this case if you're getting this sort of error that means you need to run this as a script which

62
00:03:58,090 --> 00:03:59,650
we're going to show in just a second.

63
00:03:59,650 --> 00:04:04,140
But in order to actually show you how to do this or we need to do is you need to close the program.

64
00:04:04,300 --> 00:04:08,520
So if you're on a Mac OS or Linux you can kind of force quit that particular windows just right click

65
00:04:08,860 --> 00:04:10,750
at the bottom taskbar hit force quit.

66
00:04:10,750 --> 00:04:14,730
So in this case and a close the program close it cancel.

67
00:04:14,770 --> 00:04:18,580
And now what you need to do is kernel restart.

68
00:04:18,850 --> 00:04:20,550
You need to restart the kernel.

69
00:04:20,650 --> 00:04:23,820
So if you don't restart the kernel that means the code's not going to run.

70
00:04:23,920 --> 00:04:29,410
And we should do it just to make sure that everything's running say prints new or print something do

71
00:04:29,410 --> 00:04:33,400
shift enter and you should now see a 1 next to whatever cell that is.

72
00:04:33,400 --> 00:04:33,870
All right.

73
00:04:33,940 --> 00:04:38,870
So we just saw how we can open images using open C-v directly in that show.

74
00:04:38,890 --> 00:04:41,740
The CB2 version of it from the notebook.

75
00:04:41,740 --> 00:04:46,680
However we also noticed that there's a potential for the kernel to crash due to the way Jupiter works.

76
00:04:46,690 --> 00:04:51,720
So now we're going to see how to open files using open C-v and the normal Python that PI script.

77
00:04:51,730 --> 00:04:55,720
So before continuing on to this part of the lecture you should make sure you understand how to run Python

78
00:04:55,720 --> 00:04:56,330
scripts.

79
00:04:56,380 --> 00:05:00,880
Your command line before beginning of the lecture and in general you should already have those skills

80
00:05:00,910 --> 00:05:05,320
before enrolling into this course and this pretty basic Python but you can always check out some of

81
00:05:05,320 --> 00:05:09,940
the previous lectures in the intro section and the Jupiter lab overview section in question and a review

82
00:05:09,940 --> 00:05:10,440
on that.

83
00:05:10,660 --> 00:05:14,600
But let's go ahead and move on and actually write out a Python script.

84
00:05:14,830 --> 00:05:17,590
All right so here I am back of the notebook we're using before.

85
00:05:17,680 --> 00:05:23,440
Let's go ahead and now run this as a Python script with a few extra lines of code in order to alleviate

86
00:05:23,500 --> 00:05:25,760
any kernel errors you may be experiencing.

87
00:05:26,020 --> 00:05:30,910
So I'm going to copy all of this code and then I'm going to come back here I'm going to hit my little

88
00:05:30,910 --> 00:05:36,140
plus sign as a new launcher and I'm going to scroll down and I'm going to create a new text file.

89
00:05:36,490 --> 00:05:39,770
And right now this is the text file I need to add about my file.

90
00:05:39,850 --> 00:05:47,260
So I right click and rename this rename to something unique such as my puppy dot pie.

91
00:05:47,340 --> 00:05:51,210
Make sure you don't call it something like open C-v that pie that may screw something up so don't call

92
00:05:51,210 --> 00:05:52,180
it non-pilot pie.

93
00:05:52,320 --> 00:05:53,910
Make sure it's unique name.

94
00:05:53,910 --> 00:05:59,070
So now we have my puppy that pie and I'm going to paste in the code I had before we're going to make

95
00:05:59,070 --> 00:05:59,770
a few adjustments.

96
00:05:59,770 --> 00:06:01,100
This code.

97
00:06:01,300 --> 00:06:06,140
So what we're going to do here is a more recent import CB2 CB2 read.

98
00:06:06,220 --> 00:06:11,200
But now for this show I'm gonna put this inside a while loop.

99
00:06:11,200 --> 00:06:15,440
So I will say while true show this image.

100
00:06:15,610 --> 00:06:18,140
Now if I were to just have that by itself.

101
00:06:18,310 --> 00:06:22,370
The problem is this just continually showed that image forever over and over again.

102
00:06:22,420 --> 00:06:27,040
So I need to have some sort of break condition to break out of this while loop and what I'm going to

103
00:06:27,040 --> 00:06:28,470
have is two conditions.

104
00:06:28,510 --> 00:06:37,180
I will say if C-v to dot weight key and then I'm going to pass in a number and the what the waky function

105
00:06:37,180 --> 00:06:41,420
does is it basically says have I waited at least this many milliseconds.

106
00:06:41,590 --> 00:06:48,060
So you can provide any number there you want and then we're going to say ampersands and I will say 0

107
00:06:48,790 --> 00:06:56,150
x f f equals equals 27 and then we'll say colon break.

108
00:06:56,460 --> 00:06:56,950
OK.

109
00:06:57,100 --> 00:07:00,810
So what is this actually doing because this is a really strange line of code.

110
00:07:00,880 --> 00:07:06,040
And in fact we've actually linked in our notes to this stack overflow post that essentially explains

111
00:07:06,040 --> 00:07:12,860
what's going on at 0 x f f so often when you're working in an open C-v you'll see a loop that looks

112
00:07:12,860 --> 00:07:13,630
something like this.

113
00:07:13,670 --> 00:07:20,780
If CB2 waky and this kind of a weird symbol O X F-F equal to and sometimes you'll even see it as ordinal

114
00:07:20,840 --> 00:07:24,010
of some letters some string and then it'll break.

115
00:07:24,020 --> 00:07:30,350
So what that's actually saying is it's a hexadecimal constant which is all these ones in binary.

116
00:07:30,350 --> 00:07:33,500
And then it's using this bitwise comparison ampersand or.

117
00:07:33,560 --> 00:07:35,710
And along with that constant.

118
00:07:35,900 --> 00:07:45,490
And what this essentially says if you're to translate this is if we've waited at least 1 milliseconds.

119
00:07:45,690 --> 00:07:50,820
So that's the first part CB to wake you saying Make sure you wait at least one millisecond and then

120
00:07:50,820 --> 00:07:57,830
the ampersand is and we pressed the escape key.

121
00:07:57,860 --> 00:08:03,650
So this essentially translates to as far as 27 that it's passed that a signal from the keyboard and

122
00:08:03,650 --> 00:08:05,480
it's Press the escape key later on.

123
00:08:05,480 --> 00:08:09,020
We'll see how to add in our own key commands for keyboard.

124
00:08:09,020 --> 00:08:14,510
And in fact in that stack overflow they decided to use ordinal Q which essentially says wait for the

125
00:08:14,510 --> 00:08:15,560
cue to be pressed.

126
00:08:15,710 --> 00:08:18,520
So we'll explore that later on especially with drawing with images.

127
00:08:18,740 --> 00:08:24,140
But right now I'll stick with what is most often default which is 27 which is the symbol for the escape

128
00:08:24,140 --> 00:08:26,130
key or the number for the escape.

129
00:08:26,350 --> 00:08:31,250
So say if you've waited at least one millisecond and we've pressed the escape key go ahead and break

130
00:08:31,340 --> 00:08:35,270
out of this while true loop meaning no longer show this image.

131
00:08:35,270 --> 00:08:44,650
And then after this while true loop we're going to say C-v to dot and we'll type out destroy all windows.

132
00:08:44,870 --> 00:08:48,890
Notice how the ANWR uncapitalized there and then I'm going to save my changes.

133
00:08:48,890 --> 00:08:52,730
Make sure you save your changes if you see a gray circle up here that means your changes haven't been

134
00:08:52,730 --> 00:08:53,250
saved.

135
00:08:53,480 --> 00:08:56,480
So you need to control as are command us.

136
00:08:56,510 --> 00:08:58,910
OK so I'm importing CB2.

137
00:08:58,910 --> 00:09:00,440
I'm reading in that file.

138
00:09:00,440 --> 00:09:05,960
And while this is true I'm gonna keep showing that puppy in its image and its new window and I know

139
00:09:05,960 --> 00:09:07,460
that at least one millisecond.

140
00:09:07,580 --> 00:09:11,660
And then wait for the user to press the escape key before a break out of this while loop.

141
00:09:11,690 --> 00:09:14,720
And then I'm going to destroy all the windows the close everything.

142
00:09:14,720 --> 00:09:17,710
So make sure you save that and then let's actually run this script.

143
00:09:17,720 --> 00:09:24,940
So to come back to my launcher I'll create a new terminal and then I'm going to say Python and then

144
00:09:24,940 --> 00:09:31,570
I'm going to type out my puppy pie or I'll hit enter and you should see the cursor blinking here and

145
00:09:31,570 --> 00:09:36,190
what's going to happen now is over at the bottom you should not have an image and you see this puppy

146
00:09:36,190 --> 00:09:41,850
image and we're going to build to do no escape on our keyboard and that will close the image.

147
00:09:42,160 --> 00:09:42,900
OK.

148
00:09:42,940 --> 00:09:49,070
And that's how you can use the open see the show method correctly within its own Python script.

149
00:09:49,120 --> 00:09:54,880
And when we're working closely with C-v to that show which we'll be doing a lot for using videos or

150
00:09:54,910 --> 00:09:58,100
interactive images for some more complex analysis.

151
00:09:58,180 --> 00:10:03,880
Oftentimes we'll be running scripts and what's nice to do and what my preferred workflow method is is

152
00:10:03,970 --> 00:10:09,110
putting everything in one cell in a notebook first and then just copying and pasting over to the PI

153
00:10:09,190 --> 00:10:14,620
file I really like that because Jupiter has a lot of those special functionalities such as being able

154
00:10:14,620 --> 00:10:18,910
to do shift tab in order to understand what's actually going on or seeing tab.

155
00:10:18,910 --> 00:10:22,770
So you can take the advantage of Jupiter and then just put it all to that pie.

156
00:10:22,810 --> 00:10:27,730
So that's a big reason are using Jupiter ALAP for this course to have notebooks scripts and terminals

157
00:10:28,090 --> 00:10:30,060
all easily available to us.

158
00:10:30,270 --> 00:10:30,870
OK.

159
00:10:31,210 --> 00:10:34,900
So don't worry too much about understanding the exact details behind this line.

160
00:10:34,900 --> 00:10:39,370
Just understand that all is doing is saying wait a millisecond and then check if you press the escape

161
00:10:39,370 --> 00:10:39,930
key.

162
00:10:39,940 --> 00:10:41,740
If so break out of this.

163
00:10:41,740 --> 00:10:42,430
All right.

164
00:10:42,430 --> 00:10:44,460
So that's it for using open C.v.

165
00:10:44,500 --> 00:10:47,360
If you have any questions feel free to post that Kewaunee forums.

166
00:10:47,500 --> 00:10:48,790
We'll see you at the next lecture.
