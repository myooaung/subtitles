WEBVTT
1
00:00:05.210 --> 00:00:05.920
Welcome back.

2
00:00:05.960 --> 00:00:09.780
Let's now go over the solutions for the non-pay images assessment.

3
00:00:09.810 --> 00:00:12.440
I'm going to open up the notebook in the Jupiter lab now.

4
00:00:12.440 --> 00:00:12.710
All right.

5
00:00:12.710 --> 00:00:14.300
Here we have the assessment open.

6
00:00:14.300 --> 00:00:17.740
Let's go ahead and start by completing tasks in bold below.

7
00:00:17.960 --> 00:00:19.360
So importing them pi.

8
00:00:19.400 --> 00:00:20.220
That's pretty easy.

9
00:00:20.240 --> 00:00:24.530
You can either Jinsei important up-I but typically you'll say important umpires and Pete that we don't

10
00:00:24.530 --> 00:00:27.210
need to call them PI just call and Pietsch time.

11
00:00:27.500 --> 00:00:31.790
And then the next one is create 5 by February where every number is a 10.

12
00:00:31.810 --> 00:00:38.820
So there's actually lots of ways to do this but one easy way is to say and once and then we want a five

13
00:00:38.820 --> 00:00:40.900
by five for the shape.

14
00:00:41.060 --> 00:00:45.400
And if you notice this array itself it's just going to be a bunch of ones.

15
00:00:45.410 --> 00:00:52.730
So if I say just a range that's five by five of ones so what I can do is multiply this by 10 and then

16
00:00:52.830 --> 00:00:56.500
on an element by element basis everything is going to get multiplied by 10.

17
00:00:56.540 --> 00:01:00.730
So you can do element by element operations on every element in an array.

18
00:01:01.010 --> 00:01:04.880
And we didn't explicitly mentioned that in the lecture but we gave you a hint in the previous lecture

19
00:01:04.940 --> 00:01:06.110
on how to do that.

20
00:01:06.320 --> 00:01:08.030
And this goes for anything.

21
00:01:08.030 --> 00:01:14.480
So if you wanted to say array divided by two that everything becomes 0.5 since you have all ones you

22
00:01:14.480 --> 00:01:15.500
can divide it by two.

23
00:01:15.740 --> 00:01:17.550
So we'll do this from time to time.

24
00:01:17.570 --> 00:01:21.130
As far as quickly building up arrays of a particular digit.

25
00:01:21.290 --> 00:01:25.730
So the ones that we're going to be using a lot is if we want everything to be Max color we could just

26
00:01:25.730 --> 00:01:30.250
say give me an array of 255 or we could use zeros for the opposite.

27
00:01:30.610 --> 00:01:31.070
OK.

28
00:01:31.310 --> 00:01:33.990
So that's pretty good 5 by 5 3.

29
00:01:34.110 --> 00:01:38.060
And we wanted to run the cell below to create an array of random numbers and see if you can figure out

30
00:01:38.090 --> 00:01:39.130
how it works.

31
00:01:39.140 --> 00:01:43.440
We mentioned this in the actual previous lectures on PI.

32
00:01:43.640 --> 00:01:48.380
But essentially in case you didn't grasp that then what this is doing is setting a random seed.

33
00:01:48.590 --> 00:01:50.150
And this number 1 0 1.

34
00:01:50.180 --> 00:01:51.520
It's actually arbitrary.

35
00:01:51.560 --> 00:01:55.540
So you can choose any number you want where you want to do be consistent with your number choice.

36
00:01:55.670 --> 00:02:00.620
That way when you actually generate random numbers you generate the same or in the numbers that the

37
00:02:00.620 --> 00:02:02.200
given seed provides.

38
00:02:02.570 --> 00:02:04.650
And then this line creates an array of round numbers.

39
00:02:04.670 --> 00:02:10.540
So what it does is it says from them PI grab the random library and then grab the random integer or

40
00:02:10.580 --> 00:02:16.880
Rand into function and then if you do shift tab here they'll tell you that it takes in a low a high

41
00:02:17.030 --> 00:02:23.780
and then a size so all it is doing is going to return random numbers drawn from a range of 0 up to but

42
00:02:23.780 --> 00:02:24.750
not including 100.

43
00:02:25.040 --> 00:02:28.060
And then format them and assigns a five by five.

44
00:02:28.070 --> 00:02:34.620
So if I run this and then check out the array then I have these five by firebrand the numbers.

45
00:02:34.670 --> 00:02:39.710
And if you actually run this and set the C to 101 every single time you create these random numbers

46
00:02:39.980 --> 00:02:41.970
you'll notice that you get the same random numbers.

47
00:02:42.080 --> 00:02:47.230
If he changes to a different value like 42 then you'll get a different set of round numbers.

48
00:02:47.330 --> 00:02:51.910
But you would get these same random numbers every time you run this and that is how the cell in the

49
00:02:51.900 --> 00:02:53.000
numbers changing.

50
00:02:53.000 --> 00:02:55.470
So that's the seed actually works.

51
00:02:55.580 --> 00:03:00.190
So we'll choose the default or a section of default but we'll choose my value ones or 1.

52
00:03:00.230 --> 00:03:02.830
So we get the same values I do.

53
00:03:02.840 --> 00:03:06.780
So then the question was What are the largest and smallest values in the array.

54
00:03:07.190 --> 00:03:15.810
Well in that case all we need to do is say array Max an array in pretty straightforward there.

55
00:03:16.230 --> 00:03:21.550
OK then we wanted to use the python imaging library and that plotted to read and display that puppy

56
00:03:21.550 --> 00:03:21.880
image.

57
00:03:21.880 --> 00:03:27.070
So this is actually exactly the same thing we did in the lecture.

58
00:03:27.070 --> 00:03:32.560
So a couple of ways we can do this one way say import that live in fact when come with the SO and just

59
00:03:32.560 --> 00:03:33.360
get rid of the pictures.

60
00:03:33.370 --> 00:03:42.890
We can see it in full screen to say import lib Pipelet as Piel team that's going to last have plotting

61
00:03:42.890 --> 00:03:46.590
functionality sets who want things line in the notebook.

62
00:03:46.850 --> 00:03:51.140
We're going to see him live plot's live in line.

63
00:03:51.170 --> 00:03:54.980
And as I mentioned before the newest versions of Jupiter lab and Jupiter and that book actually do this

64
00:03:54.980 --> 00:03:55.590
by default.

65
00:03:55.610 --> 00:04:00.140
So it may work even if you don't have that line in but if you're running older version Jupiter probably

66
00:04:00.140 --> 00:04:07.220
your idea they were saved from Paice on imaging library import that image function and then this image

67
00:04:07.220 --> 00:04:11.600
function remember it can actually read in Jay Peggs and Gs that correctly.

68
00:04:11.660 --> 00:04:14.100
So what we're going to do is from our data folder.

69
00:04:14.480 --> 00:04:19.400
So depending on where your data file there actually is you're going to want to say image open and then

70
00:04:19.400 --> 00:04:20.900
provide the file path.

71
00:04:20.900 --> 00:04:25.610
So in my case the way I have things organized right now is actually have the data folder right here

72
00:04:25.610 --> 00:04:27.940
in the same directory as this particular notebook.

73
00:04:27.950 --> 00:04:31.570
So there's my data folder if all the J picks and image files etc..

74
00:04:31.790 --> 00:04:34.010
So I'm just going to link to it here.

75
00:04:34.040 --> 00:04:38.650
So in that case we're just going to say data forward slash 0 0.

76
00:04:38.830 --> 00:04:40.900
And they should be able to tab out to complete this.

77
00:04:40.990 --> 00:04:41.680
OK.

78
00:04:42.020 --> 00:04:45.500
So if you're not able to have autocomplete that's probably a good sign that you're actually not providing

79
00:04:45.500 --> 00:04:47.710
the same directory or correct directory.

80
00:04:47.890 --> 00:04:54.560
And then for that if I were to run this I could just say pick and the Jupiter lab or Juber or notebook

81
00:04:54.830 --> 00:04:57.000
will automatically show the picture of the puppy.

82
00:04:57.340 --> 00:04:57.890
OK.

83
00:04:58.190 --> 00:05:02.300
Now remember this is actually still kind of the specialized image file.

84
00:05:02.570 --> 00:05:05.840
So if I check the type of pick it's a j peg image file.

85
00:05:05.840 --> 00:05:10.430
Now I want to convert the image to an umpire Ray and maybe we can check the shape to confirm that it's

86
00:05:10.430 --> 00:05:11.630
actually an umpire.

87
00:05:11.950 --> 00:05:14.760
It's actually pretty straight forward with this in the lecture.

88
00:05:14.780 --> 00:05:23.480
I can just say array is equal to and P as array and then pass in the picture.

89
00:05:23.540 --> 00:05:28.030
And now if I check the type of this array I get none Pi and the array.

90
00:05:28.320 --> 00:05:33.810
And then I kind of stick a shape that is it's 13:00 by 1950 it has three color channels.

91
00:05:33.900 --> 00:05:38.760
So the final task is using slicing to set the red and green channels of the picture to 0.

92
00:05:38.940 --> 00:05:41.990
Then use em show to show the isolated blue channel.

93
00:05:42.000 --> 00:05:50.360
So if I were to say peel teeth show on particular array it shows the puppy and it shows all three channels.

94
00:05:50.580 --> 00:05:59.220
So let's actually then we're going to create a copy of this sorgen to say my copy is equal to the re

95
00:05:59.220 --> 00:06:04.260
copy and then we can kind of mess around and edit the copy and then we can compare it to the original

96
00:06:04.260 --> 00:06:05.380
array.

97
00:06:05.410 --> 00:06:09.570
OK so what's our actual task here we want to zero out red and green.

98
00:06:09.660 --> 00:06:14.160
So these images the way non-payers reading them in and the way the python image libraries reading them

99
00:06:14.160 --> 00:06:17.700
in right now they go in the order read as the first layer.

100
00:06:17.700 --> 00:06:20.950
Green is the second layer and the blue is the third layer.

101
00:06:21.090 --> 00:06:26.860
So what I want to do is grab the zero next layer and the one index layer and then set them all to zero.

102
00:06:26.880 --> 00:06:33.450
So I'll say my copy and I want to grab all the pixels in the X and Y them mention the width and height

103
00:06:34.140 --> 00:06:39.030
for that first channel in that 0 layer and then I'll set those all to zero.

104
00:06:40.440 --> 00:06:40.870
OK.

105
00:06:41.080 --> 00:06:46.320
So let's go ahead and then show peel t show my copy and see what that looks like.

106
00:06:47.050 --> 00:06:51.370
OK so you can already see it's already looking a little weird and that makes sense because now the only

107
00:06:51.370 --> 00:06:55.660
channels that are left in this image to show are the blue and green channels which is why everything

108
00:06:55.660 --> 00:06:59.820
looks a little kind of Aqua ish color so only green and blues are allowed now.

109
00:06:59.830 --> 00:07:02.290
Now let's go ahead and zero out.

110
00:07:02.290 --> 00:07:07.140
So we just did the red channel this red to zero.

111
00:07:07.140 --> 00:07:10.370
Now it's turned the green to zero green to zero.

112
00:07:10.870 --> 00:07:18.940
So say I copy everything all the rows and columns in the second channel index 1 because it goes red

113
00:07:18.940 --> 00:07:19.960
green blue.

114
00:07:20.200 --> 00:07:22.260
And then I'll set those to zero as well.

115
00:07:22.720 --> 00:07:26.860
And now I want to show it now only the blue channels remain and notice that there's actually not a lot

116
00:07:26.860 --> 00:07:31.680
of blue in this image particularly around the dog's ears because he said the dog's ears as you mention

117
00:07:31.690 --> 00:07:32.860
before they're quite red.

118
00:07:33.010 --> 00:07:37.090
So there's not a lot of blue coloring in him which is why there's pretty dark values when we're only

119
00:07:37.120 --> 00:07:39.260
isolating the blue channel.

120
00:07:39.280 --> 00:07:40.030
All right.

121
00:07:40.030 --> 00:07:41.000
So that's it.

122
00:07:41.170 --> 00:07:42.460
As far as a section of the course.

123
00:07:42.460 --> 00:07:48.470
The main things you need to understand is the ability to create arrays of a single value.

124
00:07:48.640 --> 00:07:52.440
So random morays who really won't be dealing with it at all for the rest of the course.

125
00:07:52.480 --> 00:07:58.680
So what you really should feel comfortable with is creating new ones especially in the zeros as well.

126
00:07:58.690 --> 00:08:04.070
So if you can create empty ones and zeros of any shape then that's all you need to understand there.

127
00:08:04.270 --> 00:08:09.580
Don't worry too much about understanding people and opening images this way when we move on to open

128
00:08:09.580 --> 00:08:13.050
C.V we're really going to be not using these two lines of code anymore.

129
00:08:13.090 --> 00:08:15.910
Instead we'll be using a special function from open C.v.

130
00:08:15.940 --> 00:08:17.080
But I didn't want to show you this.

131
00:08:17.080 --> 00:08:20.560
You can directly go from a j peg straight to an umpire.

132
00:08:21.340 --> 00:08:26.110
And then finally the thing you should understand here is that color images come in three channels red

133
00:08:26.110 --> 00:08:27.140
green and blue.

134
00:08:27.190 --> 00:08:31.480
And then later on and some more advanced sections will talk about different color mappings that go beyond

135
00:08:31.480 --> 00:08:33.870
just red green and blue color coding.

136
00:08:34.210 --> 00:08:36.530
All right I hope that assessment was useful to you.

137
00:08:36.580 --> 00:08:39.700
Should have been pretty straightforward given how well it matched the lectures.

138
00:08:39.760 --> 00:08:44.160
Coming up next we're going to begin talking about open sea the open computer vision Library.

139
00:08:44.170 --> 00:08:44.730
We'll see you there.
