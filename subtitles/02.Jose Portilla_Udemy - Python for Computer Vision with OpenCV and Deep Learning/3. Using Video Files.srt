1
00:00:05,350 --> 00:00:06,450
Welcome back everyone.

2
00:00:06,460 --> 00:00:10,130
In the previous lecture we talked about streaming directly from a USP camera.

3
00:00:10,240 --> 00:00:13,060
But sometimes you're dealing with video files that already exist.

4
00:00:13,150 --> 00:00:17,200
Maybe you downloaded a video from YouTube and then you want to kind of play around with it so we can

5
00:00:17,200 --> 00:00:20,520
do is you open C-v with existing video files.

6
00:00:20,560 --> 00:00:23,590
Let's check it out by jumping over to a new notebook.

7
00:00:23,590 --> 00:00:23,820
All right.

8
00:00:23,820 --> 00:00:27,340
Here I am at a brand new notebook inside of a single cell.

9
00:00:27,340 --> 00:00:29,550
I will say inport CB2.

10
00:00:29,800 --> 00:00:33,940
And then I need the command to actually read in an existing video file.

11
00:00:33,940 --> 00:00:36,890
Keep in mind we actually provided some MP for files for you.

12
00:00:37,060 --> 00:00:42,070
So if you open up the folder and checkout data and begin scrolling down you should be able to see some

13
00:00:42,130 --> 00:00:42,920
empty force here.

14
00:00:42,910 --> 00:00:48,220
So I have a hand move finger move video capture etc. So there's different P4 files or if you're able

15
00:00:48,220 --> 00:00:52,080
to follow along the previous lecture you should also have the video file you created earlier.

16
00:00:52,090 --> 00:00:53,250
So I have my super video.

17
00:00:53,320 --> 00:00:59,530
And before in our case open up my super video and before since it's a shorter video and the way we do

18
00:00:59,530 --> 00:01:02,800
this is really similar to the way we captured a stream.

19
00:01:02,800 --> 00:01:06,010
We just say CB2 video capture.

20
00:01:06,140 --> 00:01:11,030
And last time we provided a zero which says grab the default webcam in this case we just provide the

21
00:01:11,030 --> 00:01:13,580
file path to the video we want to actually show.

22
00:01:13,880 --> 00:01:17,820
So in our case it's my super video that before or any video.

23
00:01:18,140 --> 00:01:22,130
And often students sometimes actually provide file paths that don't exist.

24
00:01:22,310 --> 00:01:29,300
And because open C.V is pretty flexible it just returns an empty object and something to do is say if

25
00:01:29,300 --> 00:01:35,300
Cap is Open's is equal to false.

26
00:01:35,310 --> 00:01:38,700
That means that we weren't actually able to open up this file.

27
00:01:38,700 --> 00:01:45,500
So in that case you should print out error file not found.

28
00:01:45,780 --> 00:01:50,140
So if you get error file not found that means that you weren't actually able to open this.

29
00:01:50,160 --> 00:01:52,220
Sometimes it's also not able to open it.

30
00:01:52,260 --> 00:01:53,900
If you use the wrong codec.

31
00:01:53,940 --> 00:01:58,340
So again as you previously mentioned if you're writing your own file you have to use the correct codec

32
00:01:58,350 --> 00:02:03,840
whether you're on Ubuntu Windows or Mac was computer open C-v sometimes is able to write something that

33
00:02:03,840 --> 00:02:06,020
looks like a file but it's not able to open it.

34
00:02:06,030 --> 00:02:10,410
So if you for sure know that the file is there but you're still getting the error when you're trying

35
00:02:10,410 --> 00:02:11,130
to open it.

36
00:02:11,190 --> 00:02:15,330
You may want to try rerecording it with a different codec so keep that in mind.

37
00:02:15,330 --> 00:02:20,250
All right so we say if Cap is opened that's equal to false print error file not found and also mentioned

38
00:02:20,250 --> 00:02:26,330
here for wrong codec.

39
00:02:26,420 --> 00:02:28,010
So we have that going for us.

40
00:02:28,100 --> 00:02:31,830
Now if that doesn't trigger an error then we're ready to actually display.

41
00:02:32,180 --> 00:02:41,910
Will say while Cap is opened meaning while the video is actually playing We're going to grab the frames

42
00:02:42,000 --> 00:02:48,530
just like we would with a normal capturer will say is equal to cap read and if it's actually returning

43
00:02:48,530 --> 00:02:50,610
something meaning the video is still playing.

44
00:02:50,610 --> 00:02:55,380
If AURITI is equal to true so it's still returning frames.

45
00:02:55,640 --> 00:02:57,350
Well go ahead and show those frames.

46
00:02:57,470 --> 00:03:06,200
Say CVT or C-v to see me in show frame and then display that frame and lets add in some code that we

47
00:03:06,200 --> 00:03:12,140
can quit out of this well we are displaying the frames if we want to well say Wait key wait 10 milliseconds

48
00:03:12,830 --> 00:03:20,030
and 0 x f f and depending on what you want to equal 27 for escape or if you want a particular letter

49
00:03:20,030 --> 00:03:23,970
you can do the ordinal of Q and then we'll say break.

50
00:03:24,080 --> 00:03:25,990
Now this is a pretty short video that we just recorded.

51
00:03:26,000 --> 00:03:29,730
But if you're dealing for the long video you probably want to have the option to escape.

52
00:03:29,810 --> 00:03:31,450
That way you don't have to watch the entire thing.

53
00:03:32,800 --> 00:03:37,450
And then I'm also going to add an L statement here that says else break.

54
00:03:37,450 --> 00:03:38,120
So what is this.

55
00:03:38,120 --> 00:03:39,340
Else break for.

56
00:03:39,430 --> 00:03:43,330
Notice that this else is lined up with this if statement the very first one.

57
00:03:43,360 --> 00:03:48,160
And basically what this says is while the capture is actually working and it's open go ahead and keep

58
00:03:48,160 --> 00:03:50,760
reading the capture while you're still returning something.

59
00:03:50,800 --> 00:03:55,940
Show the frames and if you want you can break out of it if you're not returning anything.

60
00:03:55,990 --> 00:04:00,520
Meaning you've already shown all the frames then break out of this while loop because we're no longer

61
00:04:00,910 --> 00:04:03,310
open and we're no longer actually viewing any video.

62
00:04:03,310 --> 00:04:04,620
You've already seen the whole thing.

63
00:04:04,710 --> 00:04:07,990
So you want to make sure you have that break there outside of the While loop.

64
00:04:07,990 --> 00:04:15,780
We're just going to release the capture and then for good measure will destroy all windows.

65
00:04:15,790 --> 00:04:16,280
OK.

66
00:04:16,420 --> 00:04:17,590
So let's check this out.

67
00:04:17,590 --> 00:04:21,300
I'm going to play this and there's the video there.

68
00:04:21,350 --> 00:04:27,160
Now as you probably notice the video was played extremely fast and that's because video capture when

69
00:04:27,160 --> 00:04:28,830
pointed that rectally video.

70
00:04:29,020 --> 00:04:33,320
It's not actually really meant to display the video for a human user.

71
00:04:33,340 --> 00:04:37,700
It's really just meant to quickly read in every single frame and then do something to it.

72
00:04:37,840 --> 00:04:42,450
And that makes sense because the computer can watch the video much faster than a human it can.

73
00:04:42,460 --> 00:04:47,200
It just needs to look at every single image and that's good because if we want to eventually write or

74
00:04:47,200 --> 00:04:51,550
manipulate videos we don't have to wait an hour for an hour long video.

75
00:04:51,550 --> 00:04:55,710
Instead we can just do all our operations and not need to worry about showing it.

76
00:04:55,930 --> 00:05:00,340
But if you do want to play back the video at a speed that is understandable to a human.

77
00:05:00,580 --> 00:05:07,150
We need to do is add in two extra lines of code so here we're going to import the time module that's

78
00:05:07,210 --> 00:05:08,680
built into Python.

79
00:05:09,010 --> 00:05:14,980
And then every time we show the frame we want to show it at the same frame rate that it was recorded.

80
00:05:14,990 --> 00:05:21,310
Now in our case I actually know what the frame rate was because remember we wrote this with writer at

81
00:05:21,640 --> 00:05:24,580
20 frames per second.

82
00:05:24,610 --> 00:05:31,780
So what we're going to do here is say time sleep and then sleep basically says have a delay of X amount

83
00:05:31,840 --> 00:05:32,610
of seconds.

84
00:05:32,770 --> 00:05:38,590
So we wanted to delay one over the frame rate per second which makes sense because that will then display

85
00:05:38,590 --> 00:05:43,010
the frames at the exact same frames per second as we recorded it.

86
00:05:43,180 --> 00:05:45,940
So in this case 20 is going to be whatever your frame rate is.

87
00:05:45,970 --> 00:05:49,740
So you can play around this number the pending on what the frame rate for the video is.

88
00:05:49,780 --> 00:05:53,950
And you can always capture the frame rate information using the same way we captured width and height

89
00:05:53,950 --> 00:05:55,680
information from the previous video.

90
00:05:55,930 --> 00:06:01,830
So again all I'm doing here is I'm importing time and then I'm delaying how fast I'm showing these frames.

91
00:06:01,840 --> 00:06:05,380
This is only going to be useful if you yourself want to view the videos.

92
00:06:05,380 --> 00:06:09,880
If you're trying to do an operation on a video and don't have any intention of watching it you don't

93
00:06:09,880 --> 00:06:11,070
want to sleep otherwise.

94
00:06:11,090 --> 00:06:16,390
Ill take just as much time to do the operations on the video as it does to watch the video which isn't

95
00:06:16,390 --> 00:06:17,540
very efficient.

96
00:06:17,880 --> 00:06:21,730
But in our case we actually want to playback the video at a rate that makes sense to us.

97
00:06:21,880 --> 00:06:24,430
So I can run this and there we go.

98
00:06:24,430 --> 00:06:30,210
Now I can see the video running at 20 frames per second so I'm delaying how fast it's showing the frames.

99
00:06:30,400 --> 00:06:30,810
OK.

100
00:06:31,000 --> 00:06:36,030
So again it can read in the frames much much faster than a human can see them.

101
00:06:36,280 --> 00:06:41,620
If you want it to show the frames at a particular speed you just need to have a delay here using the

102
00:06:41,620 --> 00:06:42,300
sleep.

103
00:06:42,490 --> 00:06:43,030
OK.

104
00:06:43,120 --> 00:06:45,720
If you have any questions on that feel free to post the Q&amp;A forums.

105
00:06:45,730 --> 00:06:47,300
But again it's just logic here.

106
00:06:47,410 --> 00:06:50,420
We're displaying it with a delay of a certain frames per second.

107
00:06:50,560 --> 00:06:53,830
So it's one second divided by the frames per second.

108
00:06:54,310 --> 00:06:54,690
All right.

109
00:06:54,850 --> 00:06:58,450
So that's how you can display video files using open C.v.

110
00:06:58,510 --> 00:06:59,610
We'll see you at the next lecture.
