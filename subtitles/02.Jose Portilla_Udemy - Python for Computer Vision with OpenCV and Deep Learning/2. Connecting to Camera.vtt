WEBVTT
1
00:00:05.350 --> 00:00:11.080
Welcome back and this lecture will show you how you can use open C-v to connect to a USP camera or your

2
00:00:11.080 --> 00:00:16.260
builtin laptop camera that will also show you how you can write a video stream to a file.

3
00:00:16.450 --> 00:00:18.530
Let's get started by opening up Jupiter lab.

4
00:00:18.730 --> 00:00:24.090
OK here we have a new notebook in Jupiter lab something that's really important to know is when you're

5
00:00:24.100 --> 00:00:26.080
actually reading and video data.

6
00:00:26.080 --> 00:00:30.840
It's important that you don't have multiple notebooks and multiple kernels trying to read in from a

7
00:00:30.840 --> 00:00:36.670
video stream file that will start messing up the way open TV connects with the USP cameras because they'll

8
00:00:36.670 --> 00:00:38.170
start conflicting with each other.

9
00:00:38.320 --> 00:00:44.410
So a really good thing to do is open up this file viewer and make sure that you only have one kernel

10
00:00:44.410 --> 00:00:48.700
and one notebook running whenever you're working a camera and video data and you can tell something's

11
00:00:48.700 --> 00:00:51.390
running if you see a green little dot next to the notebook.

12
00:00:51.400 --> 00:00:55.390
So notice these other three notebooks that I have here their kernels are shut down and you can always

13
00:00:55.390 --> 00:00:58.450
right click and shut them kernels yourself manually just in case.

14
00:00:58.480 --> 00:01:03.010
But I only have one notebook right now called lecturn up book and it's the only kernel that's running.

15
00:01:03.010 --> 00:01:06.880
So whenever you're dealing with video files you want to make sure you'll have one kernel running.

16
00:01:06.880 --> 00:01:08.160
Otherwise we'll get kind of a weird error.

17
00:01:08.170 --> 00:01:09.460
That's really hard to interpret.

18
00:01:09.460 --> 00:01:11.500
So I found out that the hard way.

19
00:01:11.500 --> 00:01:13.120
But let's go ahead and continue.

20
00:01:13.360 --> 00:01:18.030
We're going to start off by showing you how you can connect a camera to open sea.

21
00:01:18.040 --> 00:01:25.260
We're going to import CB2 and the way we actually connect to a camera is really simple it's just a simple

22
00:01:25.260 --> 00:01:27.570
command and you assigned some variable.

23
00:01:27.570 --> 00:01:34.650
Often you just call it capture or kept for short a set that equal to to dot and then the command is

24
00:01:34.770 --> 00:01:36.710
video capture.

25
00:01:36.720 --> 00:01:38.340
You notice there's a video right there.

26
00:01:38.340 --> 00:01:41.020
We'll be using that later to write a video stream to a file.

27
00:01:41.310 --> 00:01:44.730
But we're going to save video capture and then you just passen zero.

28
00:01:44.760 --> 00:01:50.300
And that's going to grab your default camera so we're going to grab the default camera right now.

29
00:01:50.380 --> 00:01:56.020
And oftentimes you're going to want to grab the width and height of the actual capture that we can begin

30
00:01:56.020 --> 00:02:04.420
to manipulate the video image and the way we do that is we'll say with and organise a capture dot net

31
00:02:04.450 --> 00:02:09.640
or cap dock get whatever we happen to call this variable right here from the video capture we'll say

32
00:02:09.640 --> 00:02:18.730
Cap get and then we say CB2 dot and then all caps cap Propp and you can hit tab here to start auto completing

33
00:02:18.730 --> 00:02:19.210
this.

34
00:02:19.360 --> 00:02:24.470
But the one we're going to look for is frame and you can grab things like the frame rate the frame count

35
00:02:24.730 --> 00:02:27.050
but we're just looking here for width and height.

36
00:02:27.250 --> 00:02:33.220
So we'll grab that one for the width and then we'll see height is pretty much the exact same thing except

37
00:02:33.220 --> 00:02:34.920
instead of with it's going to be height.

38
00:02:34.960 --> 00:02:40.450
So I'm going to copy and paste that and then we'll say right there.

39
00:02:40.680 --> 00:02:44.440
Now something to note is this actually returns back a floating point number.

40
00:02:44.550 --> 00:02:51.020
So if you're capturing and 10 ITP for instance you'll return something back like 10 eighty point zero.

41
00:02:51.090 --> 00:02:56.160
And usually you actually want this to be an integer especially when you're working with it with open

42
00:02:56.160 --> 00:03:01.410
C-v for maybe calculating the halfway point of your video and we'll see some examples of that later

43
00:03:01.410 --> 00:03:02.160
on.

44
00:03:02.160 --> 00:03:08.400
So often you're going to cast this as an integer early transform it to an integer.

45
00:03:08.400 --> 00:03:14.250
So you'll see this quite often where you just say I.A. to transform this from a float like 10 point

46
00:03:14.250 --> 00:03:16.500
zero to just 10:08 as an integer.

47
00:03:16.500 --> 00:03:18.940
So that allows us to capture the width and height.

48
00:03:19.170 --> 00:03:22.350
Keep my what I can do this every single time but I do want to show it to you now.

49
00:03:23.270 --> 00:03:24.650
So that's the width and height.

50
00:03:24.800 --> 00:03:28.490
And then what we're going to do is we're going to display the image.

51
00:03:28.490 --> 00:03:30.200
So I will say while true

52
00:03:33.010 --> 00:03:41.060
and we're going to say RTT comma frame and this is known as tuple and packing and we'll say Cap dot.

53
00:03:41.360 --> 00:03:42.300
Right.

54
00:03:42.320 --> 00:03:48.080
So what this command actually does is you can think of the thing that's being returned back by video

55
00:03:48.080 --> 00:03:54.470
capture as just a series of images because all a frame is is just a single image and all the video is

56
00:03:54.620 --> 00:03:56.820
just continually updating the image.

57
00:03:56.870 --> 00:04:02.150
And what we can do is we can use a lot of the commands that we used before with image files except just

58
00:04:02.150 --> 00:04:07.350
treat them on a single frame and then continually update over and over again on that frame.

59
00:04:07.490 --> 00:04:14.120
And what happens is we're going to be able to use cap read to grab the frame and it returns back a tuple

60
00:04:14.270 --> 00:04:16.310
which is why we're doing tuple and packing here.

61
00:04:16.520 --> 00:04:21.670
We're going to be using this frame object to kind of manipulate and show.

62
00:04:21.770 --> 00:04:29.360
And let's actually show you how you could convert a frame into grayscale will say Gray is equal to C.V

63
00:04:29.600 --> 00:04:35.070
to dot see the color just as we've done before with images.

64
00:04:35.210 --> 00:04:42.560
We take that frame as if it was a single image which it basically is and then say CB2 dot color underscore

65
00:04:42.930 --> 00:04:45.020
B.G. are two

66
00:04:48.240 --> 00:04:54.080
and then we'll display that image the exact same way we displayed images before by just saying CB2 that

67
00:04:54.110 --> 00:05:00.730
in show frame great Keep in mind for a Mac OS or Linux you mean it's actually run as a separate Python

68
00:05:00.730 --> 00:05:01.350
script.

69
00:05:02.390 --> 00:05:06.940
And then finally we're going to wait until someone hits the escape key to stop showing this.

70
00:05:07.070 --> 00:05:20.700
We'll say if CB2 dot wait key one so we wait 1 milliseconds and 0 x f f is equal to and you can do twenty

71
00:05:20.700 --> 00:05:22.460
seven if you want the escape key.

72
00:05:22.690 --> 00:05:29.110
But something else we can do is say oh already for ordinal and then pass in the string of the lower

73
00:05:29.110 --> 00:05:29.950
case letter you want.

74
00:05:29.950 --> 00:05:36.450
So this basically says until they press Q And then we'll go ahead and break out of that.

75
00:05:36.600 --> 00:05:43.100
And then what's important to do here is typically what we've been doing is we say destroy all windows.

76
00:05:43.140 --> 00:05:46.800
But before that we want to make sure that we actually stop capturing the video.

77
00:05:46.980 --> 00:05:53.590
So often you'll also see this line cap that cap Thor release.

78
00:05:54.060 --> 00:05:54.640
OK.

79
00:05:54.840 --> 00:05:58.120
So that's all we need to actually capture video stream file.

80
00:05:58.140 --> 00:06:00.260
Keep in mind right now we're not actually saving anything.

81
00:06:00.270 --> 00:06:03.070
We're just continually capturing the image again.

82
00:06:03.090 --> 00:06:09.360
We're just saying CB2 video capture passen zero to capture the default webcam that's connected to your

83
00:06:09.360 --> 00:06:10.000
computer.

84
00:06:10.290 --> 00:06:15.030
And then sometimes you may want the width and height in order to work with the video in some further

85
00:06:15.030 --> 00:06:16.980
manner so you can capture that here.

86
00:06:16.980 --> 00:06:20.790
We're not actually doing anything with it so we could technically comment this out and it wouldn't change

87
00:06:20.790 --> 00:06:21.240
anything.

88
00:06:21.270 --> 00:06:26.490
Later on we'll actually use this data and then we say While true so true while loop it's going to continue

89
00:06:26.490 --> 00:06:31.230
on forever until we say go ahead and press Q In order to break this out.

90
00:06:31.560 --> 00:06:33.370
And we're going to read off the camera.

91
00:06:33.370 --> 00:06:35.290
It returns back this tuple.

92
00:06:35.310 --> 00:06:40.250
Right now we're only using the frame essentially just the single images that the video capture is returning.

93
00:06:40.440 --> 00:06:44.430
And then you can basically do whatever you want to that frame just like you would with an image.

94
00:06:44.430 --> 00:06:48.540
So that's what this is showing the images coming in as color and I'm going to convert it to grayscale

95
00:06:48.930 --> 00:06:50.530
and then I show it using it show.

96
00:06:50.550 --> 00:06:52.290
Just like it would for a normal image.

97
00:06:52.290 --> 00:06:56.610
Let's go ahead and run this and see if we can successfully see myself on the camera.

98
00:06:56.610 --> 00:06:59.080
So I'm going to run there and there I am.

99
00:06:59.100 --> 00:07:00.880
OK so I have my web cam kind of pointed at me.

100
00:07:01.170 --> 00:07:04.540
And if I want to quit this I can just hit Q and I hit it out.

101
00:07:04.820 --> 00:07:05.060
OK.

102
00:07:05.070 --> 00:07:08.140
So he showed you how to convert the image to grayscale.

103
00:07:08.260 --> 00:07:11.280
But let's imagine you just wanted to read in the raw color image.

104
00:07:11.340 --> 00:07:17.590
All you need to do is comment out this gray and then instead of passing gray here we'll just pasand

105
00:07:17.590 --> 00:07:18.770
that the direct frame.

106
00:07:19.050 --> 00:07:23.730
So I'll say frame and this is just going to grab exactly what the camera is reading and then show it

107
00:07:23.790 --> 00:07:25.140
in a window called frame.

108
00:07:25.170 --> 00:07:26.860
Let's run this.

109
00:07:27.180 --> 00:07:29.490
And there you have me now I should be in full color.

110
00:07:29.490 --> 00:07:30.710
Good to see you guys there.

111
00:07:31.040 --> 00:07:31.280
OK.

112
00:07:31.290 --> 00:07:33.520
Let me press you to skate.

113
00:07:33.550 --> 00:07:33.910
All right.

114
00:07:33.910 --> 00:07:39.160
We just showed you how you can directly stream the video but we haven't actually saved that video file

115
00:07:39.220 --> 00:07:40.030
anywhere.

116
00:07:40.180 --> 00:07:45.750
There's going to be three important lines to add in and to actually write your stream to a video file.

117
00:07:46.000 --> 00:07:55.660
The first one is to actually create a writer object writer as my variable is equal to C-v to dot video

118
00:07:56.350 --> 00:07:57.670
writer.

119
00:07:57.840 --> 00:08:00.810
And this video writer is going to take a couple of parameters.

120
00:08:00.900 --> 00:08:04.990
The first one is the actual file and file path that you want to save this to.

121
00:08:05.250 --> 00:08:09.160
So here I'm going to say my super video.

122
00:08:09.330 --> 00:08:10.390
MP 4.

123
00:08:10.650 --> 00:08:14.230
And if you want to save this file somewhere else you can just write in the full file path.

124
00:08:14.250 --> 00:08:18.840
So if you want to save it in some deeper folder like data you can do something like that and just keep

125
00:08:18.840 --> 00:08:19.530
going.

126
00:08:19.530 --> 00:08:22.920
Keep in mind if you try to put in a file path a full there's that don't exist.

127
00:08:23.040 --> 00:08:27.390
You'll get an error if you just it name before it's going to save it to the same location that this

128
00:08:27.390 --> 00:08:31.500
notebook or your script is currently running if you're running this in a notebook and you're curious

129
00:08:31.530 --> 00:08:36.270
well where I'm actually located on my computer you can always just scroll down to and you cell type.

130
00:08:36.300 --> 00:08:38.250
There'll be the do shift enter.

131
00:08:38.280 --> 00:08:40.330
And they'll tell you where you're currently located.

132
00:08:40.410 --> 00:08:45.300
So underneath my downloads folder and end up saving this my super video that MP before I recommend you

133
00:08:45.300 --> 00:08:49.310
give it some sort of unique name that you don't absolutely right over some previous data.

134
00:08:50.130 --> 00:08:54.630
Okay now the next parameter is probably one of the most important ones to pay attention to.

135
00:08:54.870 --> 00:09:03.620
It's going to be C-v to dot video writer underscore and you can tap autocomplete this for s.c.

136
00:09:03.840 --> 00:09:07.190
So this is the actual video codec that you're going to be using to write this.

137
00:09:07.200 --> 00:09:11.610
MP for file and what's really porn about this particular parameter is that it's going to be different

138
00:09:11.670 --> 00:09:13.700
depending on your operating system.

139
00:09:13.740 --> 00:09:19.170
So I'm going to go ahead and show you the link to the documentation tutorial that explains a little

140
00:09:19.170 --> 00:09:20.900
bit about the codec you should be choosing.

141
00:09:21.000 --> 00:09:23.900
And then I'll kind of clarify what it's actually trying to say.

142
00:09:23.910 --> 00:09:27.600
So if you come over here this is linked in the actual resources for the lecture.

143
00:09:27.780 --> 00:09:34.800
There's a 4 CC is essentially a four byte code used to specify the video codec and the list of all available

144
00:09:34.800 --> 00:09:41.340
codes can be found at 4C C dot org and depending on what your actual operating system is you're going

145
00:09:41.340 --> 00:09:43.260
to be choosing different codecs.

146
00:09:43.260 --> 00:09:51.980
So if you're on a Ubuntu computer a fedora distribution or a Mac OS you're going to be using x v ID.

147
00:09:52.200 --> 00:09:55.760
If you're on Windows you're going to be using Ivy X..

148
00:09:55.970 --> 00:09:56.410
OK.

149
00:09:56.640 --> 00:09:58.520
So let's go ahead and check this out.

150
00:09:59.290 --> 00:10:06.160
The way you actually write the in inside of the 4 CC is you say an asterisk and that as a string you're

151
00:10:06.160 --> 00:10:06.970
going to type in.

152
00:10:07.000 --> 00:10:12.520
In our case since I'm going to Windows I'll be referencing here I'm going be doing the ivy X and often

153
00:10:12.520 --> 00:10:18.160
this actually works on Ubuntu and OS X but just in case you may want to use XP ID since it's a little

154
00:10:18.160 --> 00:10:21.120
more reliable for Ubuntu and Mac OS computers.

155
00:10:21.250 --> 00:10:29.410
But in my case NSA DV I-X So just to make it clear if you're on Windows right now go with the ivy axe

156
00:10:29.740 --> 00:10:31.110
inside that string.

157
00:10:31.360 --> 00:10:37.350
If you're on Mac OS or Linux you're probably going to want to go with what they suggested which is x

158
00:10:37.390 --> 00:10:40.760
v ID so that will be X-Fi ID.

159
00:10:40.810 --> 00:10:46.660
And remember these are going to go a string C type in an asterisk and then a single or double quotes

160
00:10:46.720 --> 00:10:48.530
and then Asterix here.

161
00:10:50.050 --> 00:10:51.820
Activate the single or double quotes.

162
00:10:51.830 --> 00:10:56.060
So keep in mind it's kind of tricky because it's almost same thing just the x's at the beginning or

163
00:10:56.060 --> 00:10:58.120
the end depending on your operating system.

164
00:10:58.130 --> 00:10:59.600
So is absolutely key.

165
00:10:59.600 --> 00:11:02.630
Otherwise everything will run successfully but the file will get saved.

166
00:11:02.630 --> 00:11:07.000
So keep that in mind since I'm a Windows I'll type out the ivy X in here.

167
00:11:07.070 --> 00:11:11.510
So that's the codec we're going to be using the next parameter is how many frames per second you actually

168
00:11:11.510 --> 00:11:12.790
want to record at.

169
00:11:13.010 --> 00:11:17.480
Depending on what kind of USP camera you are probably limited in how many friends are actually captured

170
00:11:17.480 --> 00:11:18.780
by your USP camera.

171
00:11:18.950 --> 00:11:24.770
If you've ever seen a very high fidelity video of something that's shown in slow motion those kind of

172
00:11:24.770 --> 00:11:27.440
specialized cameras capture a lot of friends per second.

173
00:11:27.440 --> 00:11:31.610
So they're getting a lot more data per second of film than a typical camera.

174
00:11:31.610 --> 00:11:35.200
Now you see cameras are generally not as good as those high fidelity cameras.

175
00:11:35.270 --> 00:11:38.420
So so you're probably working off somewhere around like 30 francs per second.

176
00:11:38.540 --> 00:11:43.490
And I would recommend you provide a number here somewhere between 20 and 30 and you can actually capture

177
00:11:43.490 --> 00:11:48.140
the frames per second here using some of these C-v to capture property.

178
00:11:48.140 --> 00:11:52.490
So if you do tab here it'll actually show you frame count.

179
00:11:52.490 --> 00:11:56.270
So that's a nice way to figure out well how many frames I'm actually getting.

180
00:11:56.270 --> 00:12:00.620
So you can go and experiment that but typically mostly just be cameras capturing around 30 frames per

181
00:12:00.620 --> 00:12:01.250
second.

182
00:12:01.250 --> 00:12:03.820
Depending on how close your camera is so just keep it safe.

183
00:12:03.830 --> 00:12:09.540
I recommend providing a file number somewhere between 20 and 30 and rummer the more frames per second

184
00:12:09.540 --> 00:12:12.010
and capture the larger this data files is going to be.

185
00:12:12.020 --> 00:12:14.080
And then lastly we want to provide the width and height.

186
00:12:14.150 --> 00:12:16.690
Luckily we actually already capture that information with height.

187
00:12:16.730 --> 00:12:19.780
So let's try that as well as the width and height.

188
00:12:20.060 --> 00:12:20.520
OK.

189
00:12:20.690 --> 00:12:22.220
So that's our video writer object.

190
00:12:22.220 --> 00:12:23.540
Remember to check the documentation.

191
00:12:23.540 --> 00:12:27.510
One of the key points of confusion often with beginners is this line right here.

192
00:12:27.650 --> 00:12:30.010
So you want to make sure you provide the right code there.

193
00:12:30.080 --> 00:12:34.320
Now that we have a writer object created we just scroll down to this while true loop.

194
00:12:34.430 --> 00:12:41.030
And once we actually reading in the frame we're going to write that frame that this MP for file.

195
00:12:41.030 --> 00:12:46.100
So usually you're going to perform whatever operations you want so operations can be like drawing on

196
00:12:46.100 --> 00:12:48.290
the actual video which will go over later.

197
00:12:48.290 --> 00:12:52.640
And then once you're there with all the operations like object detection or object tracking then it's

198
00:12:52.640 --> 00:12:53.940
time to actually write this.

199
00:12:53.990 --> 00:12:58.900
So say writer that writes and you're going to write that frame.

200
00:12:58.940 --> 00:13:02.120
So basically frame by frame you're going to be continually adding to this.

201
00:13:02.150 --> 00:13:07.010
And before and then once you're finished writing and you've broken out of this while true loop then

202
00:13:07.100 --> 00:13:13.080
once you release the capture you'll go ahead and also release the writer.

203
00:13:13.100 --> 00:13:13.330
All right.

204
00:13:13.340 --> 00:13:19.310
So the three main lines we added in is this video writer writing each frame and then releasing the writer.

205
00:13:19.310 --> 00:13:20.180
So let's try this out.

206
00:13:20.210 --> 00:13:22.840
I'm going to run this cell you should see me pop up here.

207
00:13:22.850 --> 00:13:26.350
I'll say one two three hit Q to quit.

208
00:13:26.510 --> 00:13:32.220
And then in my files over here I should now see at some point the MP for files show up.

209
00:13:32.240 --> 00:13:33.620
So there it is updated.

210
00:13:33.650 --> 00:13:37.170
And now I see my super video the MP 4.

211
00:13:37.190 --> 00:13:40.910
And in fact I can go to my file viewer on Windows.

212
00:13:41.120 --> 00:13:46.930
So let me open up this file viewer it downloads here and right here I can see my super video.

213
00:13:46.980 --> 00:13:50.470
I'll double click on it and now my Windows computer is playing the video.

214
00:13:50.480 --> 00:13:51.580
I just record it.

215
00:13:51.710 --> 00:13:55.490
So that's all we need to do to actually write our video files.

216
00:13:56.350 --> 00:13:56.820
OK.

217
00:13:57.020 --> 00:13:58.690
So that's it for this lecture.

218
00:13:58.700 --> 00:14:01.520
If you have any questions feel free to post the Coonerty forums.

219
00:14:01.520 --> 00:14:05.050
Definitely probably the hardest part here is choosing the right codec.

220
00:14:05.150 --> 00:14:07.590
If you're a Mac OS or Linux you may want to experiment with this.

221
00:14:07.610 --> 00:14:11.180
If you get errors using XP I'd be OK.

222
00:14:11.300 --> 00:14:12.950
We'll see you at the next lecture.
