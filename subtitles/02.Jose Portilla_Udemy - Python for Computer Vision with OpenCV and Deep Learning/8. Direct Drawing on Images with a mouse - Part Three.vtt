WEBVTT
1
00:00:05.250 --> 00:00:10.230
Welcome back everyone to this final part of Derek drawing with the mouse in three we're going to show

2
00:00:10.230 --> 00:00:14.730
you how you can draw rectangles by actually calculating as you're dragging the mouse.

3
00:00:14.730 --> 00:00:16.170
So we start from scratch.

4
00:00:16.200 --> 00:00:20.940
That way we can get a review of the other concepts we've covered in parts 1 and Part 2.

5
00:00:20.970 --> 00:00:21.920
Let's get started.

6
00:00:22.730 --> 00:00:26.730
For this project we're going to be initializing a black image.

7
00:00:26.780 --> 00:00:31.430
And then when the mouse button is click down and then dragged over we're going to slowly be building

8
00:00:31.430 --> 00:00:36.010
out a rectangle and then you can release your mouse and then you're no longer drawing a rectangle.

9
00:00:36.170 --> 00:00:40.790
So that's the main project we're going to be working on just being able to drag our mouse and then click

10
00:00:40.850 --> 00:00:42.070
and create rectangles.

11
00:00:42.260 --> 00:00:44.560
OK let's get started in a freshen up book.

12
00:00:44.820 --> 00:00:45.110
OK.

13
00:00:45.110 --> 00:00:46.620
Here we have a brand new notebook.

14
00:00:46.640 --> 00:00:48.560
Let's go ahead and get started.

15
00:00:48.590 --> 00:00:53.450
The first thing I want to do is our imports and remember putting this all in the same cell or an import

16
00:00:53.510 --> 00:00:58.130
CB2 and important umpires and P and then they're going to break this out into sections.

17
00:00:58.130 --> 00:01:02.250
The first is going to be a couple of variables we're going to be using along the way.

18
00:01:02.270 --> 00:01:04.100
Zoom in one more level here.

19
00:01:04.280 --> 00:01:10.770
So we're going to be in a couple of variables and then we'll have the actual function and then we'll

20
00:01:10.770 --> 00:01:13.710
have a section for showing the image.

21
00:01:14.070 --> 00:01:17.240
Let's start off with section of showing the image first.

22
00:01:17.670 --> 00:01:26.450
And that's going to be creating the image we'll see and zeroes here and we'll say 5:12 by 5:12 by wups

23
00:01:26.520 --> 00:01:27.660
three color channels.

24
00:01:27.660 --> 00:01:30.450
So it's all zeros so just an empty black image.

25
00:01:30.450 --> 00:01:32.040
So that's just the black image.

26
00:01:32.040 --> 00:01:35.620
And then we're going to connect it using a named window.

27
00:01:35.620 --> 00:01:40.110
So we'll say name window and it's up to you whatever you want to call the window name just have to be

28
00:01:40.110 --> 00:01:41.110
consistent.

29
00:01:41.250 --> 00:01:49.560
We'll say when name is equal to my drawing just as we've done before and then we're also going to connect

30
00:01:49.560 --> 00:01:58.020
this will say CB2 dot will see a mouse callback here connecting it to the same string name my drawing

31
00:01:58.190 --> 00:02:00.390
and then we're actually going to connect the function itself.

32
00:02:00.650 --> 00:02:06.290
Let's define the function the draw rectangle.

33
00:02:06.590 --> 00:02:11.360
What this function is going to be able to do is it's going to be able to actually draw a rectangle from

34
00:02:11.390 --> 00:02:16.550
one point and then it's going to keep drawing it until you drag it and then release the mouse.

35
00:02:16.550 --> 00:02:21.200
And just like the other functions that are connected through a mouse callback it takes in the actual

36
00:02:21.200 --> 00:02:27.080
event of the mouse being clicked the x and y coordinates of the mouse and then any other flags or parameters

37
00:02:29.070 --> 00:02:32.480
so lets connect that as a second parameter here.

38
00:02:32.580 --> 00:02:33.710
Draw rectangle.

39
00:02:34.030 --> 00:02:34.840
OK.

40
00:02:34.890 --> 00:02:39.500
And then we need a function that actually shows and displays the image just as we then before we'll

41
00:02:39.510 --> 00:02:39.760
say.

42
00:02:39.780 --> 00:02:44.180
While true to him Show.

43
00:02:44.220 --> 00:02:49.490
And we're going to have the same the name my drawing that connects everything together.

44
00:02:49.620 --> 00:02:52.610
And then I MGE it's going to be the splaying that black drawing.

45
00:02:53.400 --> 00:02:58.710
And then in order to actually be able to understand what mode we're in what we're going to do is the

46
00:02:58.710 --> 00:03:03.290
following just as we've done before we'll do the following command.

47
00:03:03.300 --> 00:03:08.170
We'll say if C-v to dot and then we'll say wait.

48
00:03:08.170 --> 00:03:18.310
KI Well wait one millisecond and if 0 x capital F F is equals equals to 27.

49
00:03:18.320 --> 00:03:21.680
Meaning the escape key was pressed break.

50
00:03:21.710 --> 00:03:27.000
So this essentially checks for hitting the escape key OK.

51
00:03:27.080 --> 00:03:31.030
So while this is true we'll keep showing the image until the user presses the escape key.

52
00:03:31.340 --> 00:03:35.090
And then at the end of that while loop will just destroy all the windows to be safe.

53
00:03:35.090 --> 00:03:38.140
So say destroy all windows open unclose princes.

54
00:03:38.450 --> 00:03:41.230
So far nothing different than what we've seen before.

55
00:03:41.330 --> 00:03:45.170
Most of the fence is going to come from setting up two variables since the beginning and then setting

56
00:03:45.170 --> 00:03:50.820
up the function the two variables we're going to set up is a drawing variable.

57
00:03:51.200 --> 00:03:53.790
And at first we're going to set it as false.

58
00:03:53.810 --> 00:04:00.080
So this drawing variable what's going to happen is it's going to become true if the mouse has been pressed

59
00:04:00.230 --> 00:04:05.960
down and then we're going to keep it true and say hey we're currently drawing until the mouse is lifted

60
00:04:05.960 --> 00:04:10.600
back up and then we'll change it back to false meaning we're not drawing anymore.

61
00:04:10.910 --> 00:04:22.810
So this is going to be true while mouse button down false while mouse button up.

62
00:04:22.830 --> 00:04:29.570
So right now since the mouse by default is going to be present in press it will start off as false and

63
00:04:29.570 --> 00:04:36.590
then the other ones we're going to use are X and I y else that those equal to negative 1 and negative

64
00:04:36.590 --> 00:04:37.620
1 respectively.

65
00:04:37.640 --> 00:04:40.350
I'm doing this kind of in a clever way with some tuple here.

66
00:04:40.370 --> 00:04:46.420
You can also do this in two separate lines you could say the following like this so it's up to you whether

67
00:04:46.420 --> 00:04:51.610
you want to do it in a single line or in two lines but we have the x and y and we're going to be keeping

68
00:04:51.610 --> 00:04:52.890
track of those as well.

69
00:04:52.900 --> 00:04:56.760
They'll make more sense as we actually work out on the straw rectangle function.

70
00:04:56.800 --> 00:04:59.760
So let's continue on to that draw rectangle function.

71
00:04:59.870 --> 00:05:02.500
We're going to accept some global variables here.

72
00:05:02.540 --> 00:05:15.500
We want to understand I why I X and drawing and what we're going to do is say global i x y and draw

73
00:05:15.520 --> 00:05:21.340
an early keep track of those three global variables that where we can change them in the global namespace

74
00:05:21.340 --> 00:05:22.460
as we go along.

75
00:05:22.870 --> 00:05:27.880
So I'll say I x i y and drawing essentially starting them off as false and then these coordinate points

76
00:05:27.970 --> 00:05:29.310
negative 1 and negative one.

77
00:05:29.320 --> 00:05:30.060
I will see in a second.

78
00:05:30.060 --> 00:05:37.360
Why we use x and y and always checking for three possible events will say if event is equal to C-v two

79
00:05:38.200 --> 00:05:42.490
events left button down.

80
00:05:42.490 --> 00:05:45.960
So this means you just started drawing the rectangle.

81
00:05:46.660 --> 00:05:53.920
So we'll say drawing is now equal to true and it will take points of where we actually started.

82
00:05:53.920 --> 00:06:00.030
The mouse will say X and Y is equal to x and y where the mass currently is.

83
00:06:00.220 --> 00:06:01.810
So again we just started drawing.

84
00:06:01.840 --> 00:06:03.430
So I'll say drawing is equal to true.

85
00:06:03.640 --> 00:06:06.640
And then we take know where that mouse is located.

86
00:06:06.640 --> 00:06:19.360
When you hit that button down there will say if the event is equal to CB2 thought events mouse move

87
00:06:19.410 --> 00:06:24.350
meaning you're moving or dragging the mouse actually going to start drawing the rectangle.

88
00:06:24.380 --> 00:06:31.920
So I'll say if drawing is currently equal to true you could also say just if drawing Colin but I think

89
00:06:31.930 --> 00:06:32.980
is a little more readable.

90
00:06:34.000 --> 00:06:42.950
I'll say CB2 rectangle will take the current image and then the first point is going to be the point

91
00:06:43.040 --> 00:06:45.190
where you get down on the mouse button.

92
00:06:45.410 --> 00:06:52.430
So that will just be X and I y then the bottom right hand point is going to be where the mouse currently

93
00:06:52.430 --> 00:06:55.200
is and that is x and y.

94
00:06:55.280 --> 00:07:00.470
So that's where we have X and I y because when it comes to rectangles there's two points need to track

95
00:07:00.770 --> 00:07:05.450
the first original point where you actually click down on the left mouse button and then the second

96
00:07:05.450 --> 00:07:07.250
point where we actually ended up.

97
00:07:07.280 --> 00:07:09.160
And that's going to be the bottom right.

98
00:07:09.230 --> 00:07:11.300
So that's what x y is right there.

99
00:07:11.600 --> 00:07:16.770
And then we'll go ahead and give it a color we'll say 0 2 5 5 0.

100
00:07:16.770 --> 00:07:19.830
So just keep that green color and the thickness will say negative 1.

101
00:07:19.830 --> 00:07:22.830
So then it's actually filled in rectangle OK.

102
00:07:22.980 --> 00:07:26.880
So if you're drawing and we want to make sure we check if they're actually drawing that way we don't

103
00:07:26.940 --> 00:07:27.780
kind of mess up.

104
00:07:27.780 --> 00:07:31.740
And any time you're moving the mouse suddenly a rectangle gets drawn.

105
00:07:31.770 --> 00:07:33.530
So how do we actually turn drawing off.

106
00:07:33.690 --> 00:07:40.010
Well that's going to happen when you actually release the left mouse button so will say Elif events

107
00:07:40.400 --> 00:07:49.280
is equal to CB2 events left button up which means we've released the mouse button then we're no longer

108
00:07:49.280 --> 00:07:52.280
drawing so set drawing to false.

109
00:07:52.280 --> 00:07:58.740
And then we'll say CB2 rectangle loops make sure I set that right.

110
00:07:58.740 --> 00:08:06.360
CB2 rectangle and then we'll take in the image and then we'll kind of finish it off.

111
00:08:06.640 --> 00:08:09.740
Basically this exact same thing that we wrote up here so we're going to copy and paste it.

112
00:08:10.180 --> 00:08:13.360
So let's copy that and let's paste it in.

113
00:08:13.830 --> 00:08:14.440
OK.

114
00:08:14.520 --> 00:08:15.640
And that's all we need to do.

115
00:08:15.660 --> 00:08:17.320
So let's quickly go over the logic here.

116
00:08:17.340 --> 00:08:18.660
Before you run this.

117
00:08:18.660 --> 00:08:21.970
So what it did was my imports I set up this drawing variable.

118
00:08:22.020 --> 00:08:24.130
So it's true all the mouse button is down.

119
00:08:24.150 --> 00:08:26.820
It's false while the mouse button is back up that way.

120
00:08:26.820 --> 00:08:31.410
This drawing actually keeps in mind whether or not you're dragging the mouse along to create that rectangle.

121
00:08:31.530 --> 00:08:36.810
And then I start off with some original x and y data points that later on will or place then when I'm

122
00:08:36.810 --> 00:08:40.800
drawing the rectangle I'm going to check if the left mouse button has been clicked down.

123
00:08:40.800 --> 00:08:43.150
If that's true then we're actually drawing now.

124
00:08:43.280 --> 00:08:48.300
And I take a point of where the actual mouse was during that positioning which is why we have to say

125
00:08:48.300 --> 00:08:53.340
global here in order to actually grab these three global variables.

126
00:08:53.340 --> 00:08:59.340
Then if my mouse is moving I'm going to continuously be drawing this rectangle at the original left

127
00:08:59.340 --> 00:09:04.620
button down point and then wherever the mouse currently is going to do it in green and then it's going

128
00:09:04.620 --> 00:09:09.030
to be filled in and then once they lift up the mouse button I'm no longer drawing.

129
00:09:09.030 --> 00:09:13.760
So I said equal to false and I finish it off by redrawing the final rectangle.

130
00:09:13.770 --> 00:09:16.790
Now these rectangles are going to be continuously drawn.

131
00:09:16.950 --> 00:09:23.030
So from a user perspective it won't really look like I'm continuously drawing many many rectangles.

132
00:09:23.040 --> 00:09:25.500
It'll actually look like kind of a smooth rectangle.

133
00:09:25.500 --> 00:09:29.430
Now if you start dragging your mouse and kind of go backwards in a way that doesn't make sense for drawing

134
00:09:29.430 --> 00:09:32.890
rectangles you will realize that the pixels start to look a little weird.

135
00:09:32.970 --> 00:09:37.760
Show an example of that but let's go ahead now and run this and see if everything's working.

136
00:09:37.770 --> 00:09:38.730
So I run this.

137
00:09:38.730 --> 00:09:40.320
Now I see my drawing here.

138
00:09:40.530 --> 00:09:41.850
I'm going to click down.

139
00:09:42.090 --> 00:09:47.870
And then as I slowly drag I get to see the rectangle start being built and then I release.

140
00:09:47.890 --> 00:09:51.180
Now as I move my mouse the rectangle is no longer being drawn.

141
00:09:51.180 --> 00:09:56.100
Now I mention because of the way we're doing this it's basically continuously drawing many many rectangles.

142
00:09:56.100 --> 00:10:00.600
And so if I start going backwards in a way that doesn't make sense then you can see the rectangle start

143
00:10:00.600 --> 00:10:02.320
to not really make sense anymore.

144
00:10:02.490 --> 00:10:07.320
So keep in mind it's made so that you start at the top left and then go to some bottom right and if

145
00:10:07.320 --> 00:10:10.380
you're always doing that then it will draw the rectangles correctly.

146
00:10:10.380 --> 00:10:10.990
OK.

147
00:10:11.100 --> 00:10:14.510
If you have any questions on this one please let me know and the question answer forums.

148
00:10:14.580 --> 00:10:18.720
We also definitely want to check the actual note book where we've basically commented every single line

149
00:10:18.720 --> 00:10:23.580
of code with an explanation in case any particular line that is confusing to you.

150
00:10:23.580 --> 00:10:25.170
Thanks and we'll see at the next lecture.
