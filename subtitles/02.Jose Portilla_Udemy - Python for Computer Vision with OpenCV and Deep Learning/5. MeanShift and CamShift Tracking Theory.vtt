WEBVTT
1
00:00:05.220 --> 00:00:07.200
Welcome back everyone in this lecture.

2
00:00:07.200 --> 00:00:13.320
We're going to talk about the shift and can shift tracking algorithms some of the most basic tracking

3
00:00:13.320 --> 00:00:15.720
methods are mean shift in camp shift.

4
00:00:15.720 --> 00:00:20.760
I'm first going to describe the general means shift algorithm without the context that it is tracking.

5
00:00:20.760 --> 00:00:23.610
And then we'll learn how to actually apply it for image trucking.

6
00:00:23.700 --> 00:00:29.650
Afterwards we'll learn how to extend the mishit algorithm into camp shift or continuously adaptive made

7
00:00:29.670 --> 00:00:30.270
shift.

8
00:00:30.270 --> 00:00:36.470
It's just an extension of the mishit algorithm that allows us to resize our retarget window.

9
00:00:36.480 --> 00:00:38.780
So first let's talk about the mean shift algorithm.

10
00:00:38.790 --> 00:00:40.230
What it actually is.

11
00:00:40.380 --> 00:00:44.230
Imagine that we have a set of points and we wanted to assign them into clusters.

12
00:00:44.250 --> 00:00:49.180
So here I have an initial set of data points plotted on some x and y axes.

13
00:00:49.350 --> 00:00:54.750
What it will do is for each of my data points I'm actually going to take them and stack a red point

14
00:00:54.840 --> 00:00:55.760
and then a Bluepoint.

15
00:00:55.770 --> 00:00:58.040
And right now I can actually see the red points.

16
00:00:58.050 --> 00:01:03.090
If you look really closely there's a very faint red outline for all these blue points.

17
00:01:03.150 --> 00:01:06.310
That's what I've done is taken all my data points for x and y.

18
00:01:06.510 --> 00:01:10.680
And then I plotted a red dot and then it blew up right on top of that red dot.

19
00:01:10.710 --> 00:01:16.170
So to begin the process of mishit algorithm what we do is we calculate the direction to the closest

20
00:01:16.170 --> 00:01:21.570
cluster centroid by the terminating where most of the points nearby are at essentially calculating a

21
00:01:21.570 --> 00:01:28.230
weighted mean so each iteration each of the blue points are going to move closer to where most of the

22
00:01:28.230 --> 00:01:32.700
points are at which should then lead to our cluster sensors.

23
00:01:34.240 --> 00:01:37.210
The red and blue data points are right now overlapped completely.

24
00:01:37.270 --> 00:01:40.870
The first iteration before the mishit algorithm actually starts.

25
00:01:40.870 --> 00:01:43.750
So we're going to have some red points underneath each of these blue points.

26
00:01:43.750 --> 00:01:46.770
And then I want to start my first iteration.

27
00:01:46.890 --> 00:01:52.710
So at the end of iteration 1 all the blue points in that moving towards the clusters here it appears

28
00:01:52.710 --> 00:01:55.990
that there is either going to be four or three clusters.

29
00:01:56.100 --> 00:02:00.500
We can see at the bottom two clusters all the blue points a sort of shift towards that centroid.

30
00:02:00.600 --> 00:02:05.310
Essentially calculating a to mean and then at the top we can see that we have kind of two more or less

31
00:02:05.310 --> 00:02:10.470
distinct groups of blue points and we don't know yet if they're going to converge into one or split

32
00:02:10.470 --> 00:02:16.060
off left and right so happens as we go through another iteration.

33
00:02:16.060 --> 00:02:21.850
It appears that the bottom clusters have actually begun to reach convergence and then mishit found three

34
00:02:21.850 --> 00:02:27.740
clusters already by the third iteration and then after subsequent iterations the cluster means have

35
00:02:27.740 --> 00:02:28.520
stopped moving.

36
00:02:28.670 --> 00:02:35.700
So then we decide they've actually already located our center clusters so all the clusters have converged

37
00:02:35.760 --> 00:02:36.850
and there's no more movement.

38
00:02:38.530 --> 00:02:44.230
And so we've identified three clusters here we have two bottom clusters and then one on top.

39
00:02:44.290 --> 00:02:48.790
Now something I want to point out is when you're using the means shift algorithm is that it will always

40
00:02:48.790 --> 00:02:52.140
be able to detect what may be a more reasonable number of clusters.

41
00:02:52.330 --> 00:02:57.290
For example us as humans if we take a look at those clusters it may have been more reasonable to test

42
00:02:57.310 --> 00:02:59.920
for clusters in the previous situation.

43
00:02:59.920 --> 00:03:02.870
So here you may have said that there's actually two clusters on top.

44
00:03:02.870 --> 00:03:06.100
It's sort of just one larger cluster with the mishit outgroup.

45
00:03:06.100 --> 00:03:11.260
You don't actually get to say beforehand how many clusters there should be the mishit algorithm will

46
00:03:11.260 --> 00:03:12.410
calculate on its own.

47
00:03:12.580 --> 00:03:17.260
What it thinks the cluster should be based off those weighted means that it's calculating and moving

48
00:03:17.260 --> 00:03:22.900
towards the center of there's a highly related algorithm called K means which you may have heard of

49
00:03:22.900 --> 00:03:23.290
before.

50
00:03:23.290 --> 00:03:27.220
If you've taken a machine learning class and that's a very similar algorithm but you do get to actually

51
00:03:27.220 --> 00:03:30.440
choose the number of clusters or the k value.

52
00:03:30.470 --> 00:03:34.550
But for mishit algorithm it just is going to the number of clusters for you.

53
00:03:34.600 --> 00:03:38.250
So that's why you may not get the most reasonable number of clusters.

54
00:03:38.260 --> 00:03:42.700
Now let's continue using this idea of the mishit algorithm and how we can actually then apply it to

55
00:03:42.730 --> 00:03:45.730
OB to track what we can do.

56
00:03:45.720 --> 00:03:51.160
Is that mean shift can be given a target to track and what it will do is going to Kukla color histogram

57
00:03:51.160 --> 00:03:55.630
of the target area and then keep sliding the tracking window to the closest match.

58
00:03:55.630 --> 00:03:57.290
Also known as the cluster center.

59
00:03:57.520 --> 00:04:02.160
So let's use Erlass view in animation on this and kind of explain what's going on.

60
00:04:02.170 --> 00:04:07.000
So the idea here is that we start off with an actual image and then we're going to calculate the color

61
00:04:07.000 --> 00:04:12.370
histogram of the target and then keep sliding the target window to the closest match.

62
00:04:12.370 --> 00:04:17.740
So here we can see the means shift iterations and we're slowly updating the window location based off

63
00:04:17.800 --> 00:04:19.670
our mean calculation.

64
00:04:19.720 --> 00:04:21.290
So we're given an initial target.

65
00:04:21.400 --> 00:04:27.010
We calculate that color histogram and then we're going to begin shifting our window to where we see

66
00:04:27.010 --> 00:04:29.350
the center of that color histogram moving.

67
00:04:29.530 --> 00:04:33.670
So right now this target is basically not moving which is set in the initial window to then track the

68
00:04:33.670 --> 00:04:38.080
actual face based off the makeshifts but you can imagine that if this face started moving around the

69
00:04:38.080 --> 00:04:42.850
image it would eventually keep iterating use the mean shift and then converge to a shifted window.

70
00:04:42.850 --> 00:04:48.040
Now keep in mind just using mynt shift will actually change the window size as the target moves away

71
00:04:48.310 --> 00:04:49.720
or towards the camera.

72
00:04:49.720 --> 00:04:55.270
We can use the cam shift version of Mean shift or the continuously adapted means shift in order to update

73
00:04:55.270 --> 00:04:56.490
the size of the window.

74
00:04:56.710 --> 00:04:58.350
Let's take a look at how this one works.

75
00:04:59.610 --> 00:05:05.200
Camp shift starts the way as before we first the plumbing shift and then perform the iterations of means

76
00:05:05.240 --> 00:05:12.790
shift and eventually once means shift x actually converges after a few iterations we are going to calculate

77
00:05:12.880 --> 00:05:18.910
a new region of interest and we do that by updating the size of the actual region of interest.

78
00:05:18.910 --> 00:05:24.570
And then we also calculate the orientation of the best fitting ellipse to the new region of interest.

79
00:05:24.580 --> 00:05:30.580
Again it goes and applies means shift within you scaled a search window in previous window location

80
00:05:31.030 --> 00:05:35.500
and this process is continued until some sort of required accuracy is met.

81
00:05:35.500 --> 00:05:42.510
Now keep in mind all this happens for us behind the scenes using open NCB Let's go explore all of these

82
00:05:42.510 --> 00:05:45.070
ideas in Python with open Suvi.

83
00:05:45.090 --> 00:05:46.170
We'll see you at the next lecture.
