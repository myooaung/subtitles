WEBVTT
1
00:00:05.250 --> 00:00:07.010
Welcome back everyone in this lecture.

2
00:00:07.020 --> 00:00:12.410
We're going to go over template matching template matching is probably the simplest form of what you

3
00:00:12.410 --> 00:00:14.610
could refer to as object detection.

4
00:00:14.840 --> 00:00:21.440
All it does is it simply scans a larger image for a provided template by sliding that template target

5
00:00:21.470 --> 00:00:23.450
image across the larger image.

6
00:00:23.450 --> 00:00:27.540
So if you have a picture of someone's face then what you going to do is you get to take the picture

7
00:00:27.540 --> 00:00:31.760
of that face and then slide across the entire image until you find a match.

8
00:00:31.760 --> 00:00:34.020
Keep in mind it pretty much has to be an exact match.

9
00:00:34.040 --> 00:00:38.750
So that means you already have the image provided for you and it's just a subset.

10
00:00:38.750 --> 00:00:40.800
So we're going to see an example of that in just a little bit.

11
00:00:41.810 --> 00:00:45.680
Now the main option that can be adjusted when it comes to template matching is how are you actually

12
00:00:45.680 --> 00:00:46.790
making that comparison.

13
00:00:46.790 --> 00:00:50.670
Is it a direct one to one per pixel or is there another method.

14
00:00:50.690 --> 00:00:56.950
So all the methods that are used in template matching they're based on some sort of correlation.

15
00:00:56.960 --> 00:01:00.590
So here we can see the different methods that open C-v has available.

16
00:01:00.620 --> 00:01:05.600
These are things like the square difference the normal size squirt the difference the correlation coefficient

17
00:01:05.660 --> 00:01:06.430
and so on.

18
00:01:06.590 --> 00:01:09.590
And there's the mathematical formula for how they're actually calculated.

19
00:01:09.710 --> 00:01:13.700
What we're going to do is we're going explore how well each of these works and we're going to have a

20
00:01:13.700 --> 00:01:14.420
target image.

21
00:01:14.420 --> 00:01:20.090
So what we're going to do is we'll have a target image of a dog's face and then scan a larger image

22
00:01:20.090 --> 00:01:24.290
to see where we actually find the match of the dog's face and then highlight it.

23
00:01:24.740 --> 00:01:24.990
OK.

24
00:01:25.010 --> 00:01:29.050
So let's explore template matching with open Seabee and then head over to Jupiter lab.

25
00:01:29.330 --> 00:01:31.460
OK here I am at a Jupiter lab notebook.

26
00:01:31.700 --> 00:01:37.010
I went ahead and did the main imports that we usually do that CB2 some pies and pea and setting up map

27
00:01:37.010 --> 00:01:38.130
plot lib.

28
00:01:38.180 --> 00:01:43.700
Next we're going to do is actually grab the full image that we're going to be searching for our template

29
00:01:44.570 --> 00:01:49.570
and that's going to be C-v to read an inside of the data folder we provide.

30
00:01:49.850 --> 00:01:52.890
Go ahead and read in the samizdat JPK file.

31
00:01:53.920 --> 00:02:02.120
And then we'll also correct its color so that we can show it will say CB2 CVT color and then pasand

32
00:02:02.140 --> 00:02:13.650
the full image and say see we to color underscore BGR to the right one to RGV.

33
00:02:13.700 --> 00:02:20.260
BGR R.G. be run that and let's go ahead and show off the image and there is so we've seen this image

34
00:02:20.330 --> 00:02:22.270
for its picture my dog Sammy.

35
00:02:22.280 --> 00:02:24.800
Next we're going to do is upload the template image.

36
00:02:24.800 --> 00:02:28.370
So this is going to be a subset of the larger image you're searching.

37
00:02:28.370 --> 00:02:33.010
So what we will do here is say face is equal to CB2 image read.

38
00:02:33.260 --> 00:02:43.200
And this one is data and it's called Samie face and same thing here will say CBT or CB2 CBT color.

39
00:02:43.400 --> 00:02:52.720
We'll take that face and then we'll say CB2 color underscore B G R to R G B and let's show Samis face

40
00:02:54.520 --> 00:02:55.690
and there we have it.

41
00:02:55.690 --> 00:03:02.890
So two important things to notice here one is that this picture of my dog's face Samie the dimensions

42
00:03:02.890 --> 00:03:04.010
of it.

43
00:03:04.210 --> 00:03:11.080
If we check out the shape our 375 for 86 and this is actually the exact size and shape of the face of

44
00:03:11.080 --> 00:03:12.910
Samie within this larger image.

45
00:03:13.060 --> 00:03:17.540
So the full image is quite a bit larger shape here.

46
00:03:17.570 --> 00:03:20.040
We see 1 3 6 7 and 1 0 2 5.

47
00:03:20.210 --> 00:03:25.460
So something that is basically restrictive of template matching is you should have already the exact

48
00:03:25.520 --> 00:03:30.400
image you're looking for which kind of defeats the purpose of a general object detection.

49
00:03:30.560 --> 00:03:33.700
But that's why this is one of the simplest forms of object detection.

50
00:03:33.710 --> 00:03:38.030
You already have part of the image that you're looking for in the larger image.

51
00:03:38.030 --> 00:03:42.590
So all this really is going to do is it's going to take this face they have here the subset template

52
00:03:42.830 --> 00:03:48.440
which is Sammie's face and then it's going to just go like pixel by pixel scanning the image until it

53
00:03:48.440 --> 00:03:53.120
finds a match and the match is going to be based on how it's making its comparison.

54
00:03:53.270 --> 00:03:56.780
And there's different ways we can make that comparison and see whether or not we have a match.

55
00:03:56.780 --> 00:03:59.560
And those are the things we're going to be experimenting with.

56
00:03:59.580 --> 00:04:07.460
OK so one last note I want to do is within this lecture we're going to be using the evil function and

57
00:04:07.460 --> 00:04:09.140
I want to show you quickly what it does.

58
00:04:09.140 --> 00:04:13.970
In case you've ever seen it for if you've already seen the L function you can skip forward but just

59
00:04:13.970 --> 00:04:19.520
in case you haven't seen it yet as you probably know there's built in functions in python like some.

60
00:04:19.520 --> 00:04:23.060
So if I take the sum of a list here it's 6.

61
00:04:23.150 --> 00:04:30.830
Now what I cannot do is do something like this say my string is equal to some and then try to call some

62
00:04:30.920 --> 00:04:32.490
or my string in this fashion.

63
00:04:32.510 --> 00:04:37.310
That doesn't really make any sense right because it is a string that's not actually the function here.

64
00:04:37.310 --> 00:04:45.570
However with this specialized eveil function I can actually evaluate the string as if it was a function.

65
00:04:45.800 --> 00:04:50.160
So I can say evaluate my string and then it gets back OK.

66
00:04:50.180 --> 00:04:51.220
I evaluate the string.

67
00:04:51.230 --> 00:04:52.330
I have a matching function.

68
00:04:52.340 --> 00:04:53.890
I think it's the function of some.

69
00:04:53.990 --> 00:04:55.400
So then I can do the following.

70
00:04:55.400 --> 00:04:59.480
I can say my func is equal to evil.

71
00:04:59.690 --> 00:05:06.660
My string and now my func has been assigned the evaluated string here some so I can actually call it

72
00:05:06.660 --> 00:05:07.210
as a sum.

73
00:05:07.240 --> 00:05:11.120
So I should be able to say one two three with my func and 6.

74
00:05:11.200 --> 00:05:18.760
So that is essentially a way you can directly transform a string that matches a built in function such

75
00:05:18.760 --> 00:05:21.470
as some and then actually run that.

76
00:05:21.570 --> 00:05:25.500
So we'll be using this evil because we're going to have a list of strings and then we're going to evaluate

77
00:05:25.500 --> 00:05:28.300
them all to transform them into open sea functions.

78
00:05:28.320 --> 00:05:31.710
It's just the little cleaners that do it that way instead of calling each one manually.

79
00:05:31.740 --> 00:05:33.960
So keep that in mind if you haven't seen that eveil function.

80
00:05:33.960 --> 00:05:37.250
That's all it's doing it's just evaluating that string for each function call.

81
00:05:37.450 --> 00:05:40.530
OK let's move on.

82
00:05:40.540 --> 00:05:47.570
All right now for the next step I'm actually going to copy and paste the list from our notebook because

83
00:05:47.570 --> 00:05:50.960
there's a bunch of different methods here and we're going to be using them and I want to make sure I

84
00:05:50.960 --> 00:05:52.320
spell them all correctly.

85
00:05:52.340 --> 00:05:58.600
So go ahead and find the cell in the provided notebook from our zip file that has the list of methods.

86
00:05:58.610 --> 00:06:02.830
So here all the methods you can use for the actual comparison of the template matching.

87
00:06:02.990 --> 00:06:05.990
So there's a bunch of different code here you can check the documentation.

88
00:06:05.990 --> 00:06:10.870
We actually showed a picture in the slides before this of the equations that each of these follow.

89
00:06:10.880 --> 00:06:13.850
But we're just going to run through them and see how they perform.

90
00:06:13.850 --> 00:06:15.380
Notice how they're all strings.

91
00:06:15.380 --> 00:06:19.730
And that's where we actually went over the evil function because we're gonna evaluate each strings into

92
00:06:19.730 --> 00:06:20.730
a function.

93
00:06:21.230 --> 00:06:22.520
OK so let's begin.

94
00:06:22.760 --> 00:06:26.660
We're going to make a for loop that goes through each of these methods and then uses template matching

95
00:06:26.960 --> 00:06:28.660
with that particular method.

96
00:06:28.840 --> 00:06:35.680
We will say for an in methods and the first step we're going to do is create a copy of the image.

97
00:06:35.690 --> 00:06:40.700
So this will create a copy of the full image that we've been XLE mess up because we're going to be drawing

98
00:06:40.700 --> 00:06:44.900
a rectangle on the full image for wherever we think we've found the match.

99
00:06:44.900 --> 00:06:50.690
So we first create a copy of the full image that I want the actual function I'm going to be using.

100
00:06:50.720 --> 00:06:56.510
So I will say method is equal to e l m.

101
00:06:56.540 --> 00:07:01.040
So what that means is as we actually loop through the string methods here I'm going to evaluate that

102
00:07:01.040 --> 00:07:01.520
string.

103
00:07:01.700 --> 00:07:03.530
So then it's actually a function.

104
00:07:03.550 --> 00:07:10.030
Ok so we have Eve L M and then the way you actually perform the template matching is the following.

105
00:07:10.070 --> 00:07:16.970
We say the result or Arrius is equal to CB2 match template.

106
00:07:17.070 --> 00:07:18.060
Make sure you spell that right.

107
00:07:18.060 --> 00:07:22.140
You should auto complete that and then you pass in the full larger image.

108
00:07:22.140 --> 00:07:23.800
So in our case we'll be fool.

109
00:07:24.060 --> 00:07:30.150
Copy and then we're going to pass in the smaller image that we're scanning for in this case it's the

110
00:07:30.150 --> 00:07:31.770
face of the dog.

111
00:07:31.950 --> 00:07:36.720
And then you pasand the method you want to use to actually have the selection criteria of whether or

112
00:07:36.720 --> 00:07:38.820
not we think there's a match.

113
00:07:38.830 --> 00:07:42.970
OK so there we have full copy face and method.

114
00:07:43.060 --> 00:07:47.670
Now just really quickly I want to show you the result of what this match template looks like.

115
00:07:47.680 --> 00:07:55.240
So outside of this for loop I'm actually going to select and comment this all just to make another so.

116
00:07:55.720 --> 00:07:57.480
So let's run this.

117
00:07:57.810 --> 00:07:58.280
We'll see.

118
00:07:58.280 --> 00:08:04.000
Fool face and then I'm going to choose one of these methods so let's scrap this.

119
00:08:05.970 --> 00:08:16.240
So it's actually show the way this works will say My method is equal to evil that string and then we'll

120
00:08:16.360 --> 00:08:18.980
person my method here.

121
00:08:19.180 --> 00:08:22.330
OK so if you run this what happens is it takes this full image.

122
00:08:22.330 --> 00:08:26.680
It scans it for where it thinks it found the template match with this face based off the method you

123
00:08:26.680 --> 00:08:27.200
provided.

124
00:08:27.220 --> 00:08:30.800
In our case it's CB2 T.M. c c o e.

125
00:08:30.850 --> 00:08:32.500
For the coefficient there.

126
00:08:32.530 --> 00:08:34.790
So what does this result actually look like.

127
00:08:34.990 --> 00:08:41.430
Well I can plot this out and say Piazzi him show and you'll notice that it's essentially a heat map.

128
00:08:41.520 --> 00:08:48.440
And what this does is it has higher values where it thinks it found the highest correlation of where

129
00:08:48.450 --> 00:08:49.890
the match actually occurred.

130
00:08:49.890 --> 00:08:53.900
It depends on the actual method and the two methods that you squared differences.

131
00:08:54.030 --> 00:08:59.250
These ones squirt difference and tiam squared difference normalized those are going to be slightly different.

132
00:08:59.250 --> 00:09:02.430
Those are actually going to work on where it finds the minimum value.

133
00:09:02.430 --> 00:09:03.500
So keep that in mind.

134
00:09:03.720 --> 00:09:06.420
But for the rest of them it's where it finds the max value.

135
00:09:06.420 --> 00:09:11.380
So it believes that somewhere around here where we have that kind of white yellowish point that's what

136
00:09:11.380 --> 00:09:16.530
it believes it found the highest Mook's maximum value match and that basically corresponds to the top

137
00:09:16.530 --> 00:09:17.800
left corner of the image.

138
00:09:18.060 --> 00:09:23.580
And it actually makes sense because if we take a look at the face versus the original image it should

139
00:09:23.580 --> 00:09:30.450
be somewhere around maybe like 400 in Y and 300 and X of where the actual image starts.

140
00:09:30.450 --> 00:09:35.230
Maybe that face starts around there and if we take a look over here it does appear to be somewhere around

141
00:09:35.280 --> 00:09:38.030
like that 300 300 or through a 200 mark.

142
00:09:38.070 --> 00:09:40.230
So it looks like it's actually matching up well.

143
00:09:40.260 --> 00:09:46.470
So what we're going to do here is we're going to find the maximum and minimum values of this heat map

144
00:09:46.710 --> 00:09:53.190
as well as the maximum minimum value locations and then we'll use those to actually draw out a red rectangle

145
00:09:53.520 --> 00:09:56.630
for where it thinks it found the match of the template.

146
00:09:56.820 --> 00:09:58.020
So I just want to point that out.

147
00:09:58.020 --> 00:09:59.400
This is what the result looks like.

148
00:09:59.460 --> 00:10:00.530
It's essentially a heat map.

149
00:10:00.690 --> 00:10:05.430
And then we're going to grab values from the map and use that to plot out a rectangle on the copy of

150
00:10:05.430 --> 00:10:06.720
the dog image.

151
00:10:06.720 --> 00:10:11.340
So we're coming back to this for in methods and then we're saying the following.

152
00:10:11.340 --> 00:10:12.800
So we just create a full copy.

153
00:10:12.870 --> 00:10:13.730
We just evaluate it.

154
00:10:13.740 --> 00:10:15.320
We just got that heat map.

155
00:10:15.330 --> 00:10:19.200
And then what we're going to do is we're going to grab the minimum and maximum values from that heat

156
00:10:19.200 --> 00:10:24.870
map who will say a little bit tuple impacting here mid value max value.

157
00:10:26.590 --> 00:10:38.340
Min location and then Max location is equal to CV 2 min max L O C and then we're going to pasan that

158
00:10:38.340 --> 00:10:39.120
result.

159
00:10:39.120 --> 00:10:43.560
So what this does is it takes in that heat map and it finds that both the minimum and the maximum locations

160
00:10:43.890 --> 00:10:48.720
and it returns them back as this large tuple that we can then unpack to find the minimum value the maximum

161
00:10:48.720 --> 00:10:51.530
value and then the min and max locations.

162
00:10:51.900 --> 00:10:57.000
So next we need to do is set up everything we need to actually draw that red rectangle and we first

163
00:10:57.150 --> 00:10:59.760
do a little bit of a check here will say if

164
00:11:02.680 --> 00:11:05.610
it in actually we can say if the method.

165
00:11:05.990 --> 00:11:08.470
So if this method that we evaluated right here.

166
00:11:08.480 --> 00:11:22.630
So if that method is in CV to T.M. underscore eschewed the I-F or CB2 thought T.M. underscore squared

167
00:11:22.630 --> 00:11:33.330
difference normalized then we're going to say is that the top left is equal to the minimum location

168
00:11:35.360 --> 00:11:41.840
else for all the other methods will say that the top left of the rectangle is equal to the maximal location.

169
00:11:41.840 --> 00:11:46.710
And that just has to do with the way these maps work for the square different methods.

170
00:11:46.730 --> 00:11:50.720
Because if you square something even if it's negative it ends up positive.

171
00:11:50.730 --> 00:11:54.010
Then these the way they work for the template matching they're actually working on the minimum.

172
00:11:54.020 --> 00:11:59.120
So we use this method right here there's little if else check to say well where does the top left or

173
00:11:59.120 --> 00:12:00.640
a rectangle go.

174
00:12:01.310 --> 00:12:06.460
OK so now that we have that settled we're going to assign the bottom right of the rectangle and do that.

175
00:12:06.460 --> 00:12:08.970
When you do actually get the shape of the rectangle.

176
00:12:09.110 --> 00:12:10.750
So we'll say the following.

177
00:12:10.910 --> 00:12:20.750
We're going to say that the height width and color channels is equal to the face that shape.

178
00:12:20.760 --> 00:12:28.110
So if I take a look at face shape again that's just the actual dimensions plus the three color channels.

179
00:12:28.130 --> 00:12:33.050
So all I'm really concerned about is the high end with their And then what I will do is I will say the

180
00:12:33.050 --> 00:12:47.480
bottom right of this rectangle is equal to the top left index that 0 plus the width and then the top

181
00:12:47.480 --> 00:12:56.840
left index that one plus the height because remember this location value of top left that is essentially

182
00:12:56.840 --> 00:12:57.970
something that looks like this.

183
00:12:57.980 --> 00:13:03.180
It looks like a sort like why comma X so that's why we're able to do this indexing here and actually

184
00:13:03.290 --> 00:13:07.890
kind of rule the strong way should be x y or the width plus the height.

185
00:13:07.910 --> 00:13:08.340
OK.

186
00:13:08.570 --> 00:13:10.070
So that's what the top left looks like.

187
00:13:10.070 --> 00:13:12.020
That's why I'm indexing it like this.

188
00:13:12.020 --> 00:13:15.620
I could just also use tuple and packing here if that's easier for me to understand.

189
00:13:15.740 --> 00:13:19.270
Either way we now have the bottom right in the top left of a rectangle.

190
00:13:19.400 --> 00:13:24.820
So all that's left to do is draw it onto the image and then display the image.

191
00:13:24.830 --> 00:13:36.390
So what we will do is a CB2 rectangle get the full copy of my image of passen the top left or pasand

192
00:13:36.400 --> 00:13:37.600
the bottom right.

193
00:13:37.740 --> 00:13:40.890
And then what it's left is what color I want it to be.

194
00:13:40.890 --> 00:13:46.590
So we'll go ahead and have it be red and that the thickness will be a pretty thick rectangle because

195
00:13:46.590 --> 00:13:49.020
it's a large image so say 10.

196
00:13:49.210 --> 00:13:55.780
And then we just need to plot and show the images we're going to be doing a little bit of map Butler

197
00:13:55.780 --> 00:13:58.040
jujitsu here so you're not too familiar Paul.

198
00:13:58.220 --> 00:13:59.960
Don't worry about these falling comments too much.

199
00:13:59.960 --> 00:14:03.640
Let me get a little bit of space here but pleaded D-cells OK.

200
00:14:03.900 --> 00:14:10.960
So we're going to do it here say Piazzi subplot one to one and then peel T.

201
00:14:11.780 --> 00:14:14.810
Subplot one to two.

202
00:14:14.850 --> 00:14:17.660
And what this says is it just says Give me a plot.

203
00:14:17.690 --> 00:14:19.820
That is one row by two columns.

204
00:14:19.820 --> 00:14:22.300
So we're going to have two images right next to each other left and right.

205
00:14:22.430 --> 00:14:27.860
And then this last one it means grab the first one and this two here means grab the second one.

206
00:14:27.920 --> 00:14:32.210
So on the first one we're going to show that heat map result will say and show the result of the heat

207
00:14:32.210 --> 00:14:32.750
map.

208
00:14:33.510 --> 00:14:40.350
And then will give it the title map of template matching.

209
00:14:40.380 --> 00:14:42.740
So that's essentially the result of the template matching.

210
00:14:43.080 --> 00:14:49.350
And then for the second one what we'll do is say Piazzi show and we'll show the full copy of the full

211
00:14:49.350 --> 00:14:49.810
copy.

212
00:14:49.830 --> 00:14:59.110
Now has a rectangle drawn on it and then let's give that a title c.a.p title detection of template.

213
00:14:59.360 --> 00:15:02.730
I have some of them actually don't perform perfectly.

214
00:15:02.730 --> 00:15:09.500
And then we'll say Piazzi and we'll give it a super title the title above both of these and we'll just

215
00:15:09.500 --> 00:15:12.380
have that be the actual string here so that will be

216
00:15:15.410 --> 00:15:20.240
so title everything with the method used.

217
00:15:21.070 --> 00:15:26.380
And then the last thing I want to do here is in order to actually see and not have these subtitles or

218
00:15:26.380 --> 00:15:31.680
subplots constantly rewrite over each other you need to add in one more line which is realty show.

219
00:15:31.870 --> 00:15:36.250
If you don't have the appeal to that show line then the subplots will constantly be overwriting each

220
00:15:36.250 --> 00:15:38.030
other and you only get one plot at the end.

221
00:15:38.290 --> 00:15:43.840
So I'll say guilty show and then just for a little added spacing I'm going to print two new lines after

222
00:15:43.870 --> 00:15:45.940
each of these pairs of subplots.

223
00:15:46.420 --> 00:15:50.180
OK so let's run this and make sure everything worked.

224
00:15:50.200 --> 00:15:51.000
So we're going to run this.

225
00:15:51.040 --> 00:15:52.000
And there you have it.

226
00:15:52.000 --> 00:15:53.880
So here is the method name.

227
00:15:53.890 --> 00:15:55.590
TMC c o f.

228
00:15:55.630 --> 00:15:57.940
Here's the heat map of the template matching.

229
00:15:57.940 --> 00:16:00.870
And this is where it detected the actual template.

230
00:16:00.880 --> 00:16:05.710
So right off the bat this one is really obvious you can see here it detected a lot of matching over

231
00:16:05.760 --> 00:16:08.890
on this top left corner and then that's where Reijer the actual rectangle.

232
00:16:08.950 --> 00:16:09.840
And there you have it.

233
00:16:09.940 --> 00:16:13.450
It's centered right around the dog's face correctly then for the rest of these.

234
00:16:13.480 --> 00:16:15.630
It looks like it did pretty much the same thing.

235
00:16:15.730 --> 00:16:19.340
But you'll notice some of these it actually detected quite a bit off.

236
00:16:19.400 --> 00:16:22.420
And this one this c c o r r method.

237
00:16:22.420 --> 00:16:27.310
It looks like it was starting to get a match here but it found a lot of different comparisons here on

238
00:16:27.310 --> 00:16:32.290
the matching and maybe it got messed up at the docs for but unfortunately this did not actually detect

239
00:16:32.560 --> 00:16:33.530
the correct template.

240
00:16:33.550 --> 00:16:38.230
So you can see here even when you have an exact carbon copy cut out you're going out to make sure you're

241
00:16:38.240 --> 00:16:43.690
using the right method for whatever pair of images you're working with that this one the normalized

242
00:16:43.690 --> 00:16:46.300
method you can see here really only detected one Max point.

243
00:16:46.300 --> 00:16:47.680
It found that nicely.

244
00:16:47.740 --> 00:16:51.670
And then remember these square differences these are actually working in the opposite way.

245
00:16:51.670 --> 00:16:55.450
So it's looking for the minimum which is why that little circle is dark there and it looks like it found

246
00:16:55.450 --> 00:16:58.400
the match quickly and then squirt difference normally here.

247
00:16:58.420 --> 00:17:00.280
Same deal if found the match correctly.

248
00:17:00.280 --> 00:17:04.980
So one of these this guy and actually it pretty much always since performed pretty badly except the

249
00:17:05.080 --> 00:17:10.270
certain cases the c c o r r method but other than that the rest of them did find the template matching

250
00:17:10.270 --> 00:17:11.060
successfully.

251
00:17:11.260 --> 00:17:11.740
OK.

252
00:17:11.980 --> 00:17:13.200
So that's it for this lecture.

253
00:17:13.210 --> 00:17:17.750
Again the main components here they have to worry about are just matched template.

254
00:17:18.040 --> 00:17:23.110
And then the full image what you're looking for and then the method you decide on you can check out

255
00:17:23.350 --> 00:17:25.730
these six methods and see which one works the best for you.

256
00:17:25.960 --> 00:17:31.150
If you want to grab more information off of this result than you can say minimax location off the result

257
00:17:31.420 --> 00:17:32.970
and then do whatever you want off that.

258
00:17:32.980 --> 00:17:37.180
Just keep in mind that squirt difference methods those should be using minimums to where it found the

259
00:17:37.180 --> 00:17:37.920
match.

260
00:17:38.200 --> 00:17:38.650
OK.

261
00:17:38.980 --> 00:17:41.160
Thanks everyone and we'll see you at the next lecture.
