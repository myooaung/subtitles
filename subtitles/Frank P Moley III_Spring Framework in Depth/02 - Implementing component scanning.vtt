WEBVTT
1
00:00:00.008 --> 00:00:02.006
- [Instructor] So now that we've spent some time learning

2
00:00:02.006 --> 00:00:05.004
about component scanning, let's put it into practice

3
00:00:05.004 --> 00:00:07.008
in our application and convert it from

4
00:00:07.008 --> 00:00:13.000
a Java config based app to a component scanned application.

5
00:00:13.000 --> 00:00:15.007
In our ID, let's open up our service classes,

6
00:00:15.007 --> 00:00:18.002
and we're going to do this one at a time.

7
00:00:18.002 --> 00:00:20.003
So the first thing we're going to do on our greeting service

8
00:00:20.003 --> 00:00:23.008
is add the annotation @Service, which is a stereotype

9
00:00:23.008 --> 00:00:27.003
of that component, and now to our string

10
00:00:27.003 --> 00:00:30.002
we're going to remove the final key word

11
00:00:30.002 --> 00:00:33.006
and we are going to set this equal to a value.

12
00:00:33.006 --> 00:00:35.007
And the value much like we had done before

13
00:00:35.007 --> 00:00:42.003
is going to come from our property app.greeting.

14
00:00:42.003 --> 00:00:45.001
And import that.

15
00:00:45.001 --> 00:00:51.009
And then we will remove greeting from the constructor.

16
00:00:51.009 --> 00:00:54.004
And now we will go to our output service

17
00:00:54.004 --> 00:00:57.001
and we're going to do very much the same thing.

18
00:00:57.001 --> 00:01:00.003
We're going to set this equal to @Service.

19
00:01:00.003 --> 00:01:05.002
We'll remove the final qualifier on our name

20
00:01:05.002 --> 00:01:08.002
and set it equal to a value, and the value

21
00:01:08.002 --> 00:01:16.007
that we are going to set this one equal to is app.name.

22
00:01:16.007 --> 00:01:19.008
So app.greeting, app.name.

23
00:01:19.008 --> 00:01:29.004
We can now remove the name from our constructor.

24
00:01:29.004 --> 00:01:33.001
And now to our time service,

25
00:01:33.001 --> 00:01:35.008
we will set this equal to service.

26
00:01:35.008 --> 00:01:39.007
We will take our boolean, again remove the final

27
00:01:39.007 --> 00:01:44.001
qualifier, set this equal to a value,

28
00:01:44.001 --> 00:01:47.004
and we're going to use our spell once again,

29
00:01:47.004 --> 00:01:53.001
so pound, curly brace, and in that curly brace,

30
00:01:53.001 --> 00:01:59.009
we will set equal to new boolean

31
00:01:59.009 --> 00:02:05.008
to the environment value Spring.profiles.active,

32
00:02:05.008 --> 00:02:13.004
not equal to dev and then we will remove

33
00:02:13.004 --> 00:02:21.004
from the constructor that value.

34
00:02:21.004 --> 00:02:25.004
Replace this with super.

35
00:02:25.004 --> 00:02:36.001
And now in our application.config we will remove everything.

36
00:02:36.001 --> 00:02:42.005
We will add an annotation @ComponentScan

37
00:02:42.005 --> 00:02:53.001
and set our base packages equal to com.frankmoley.lil.fid.

38
00:02:53.001 --> 00:02:57.000
And let's do a little bit of import organization here

39
00:02:57.000 --> 00:03:06.006
to get rid of our no longer needed imports.

40
00:03:06.006 --> 00:03:10.007
And we should be able to very simply run our application.

41
00:03:10.007 --> 00:03:13.008
So we'll run the prod version.

42
00:03:13.008 --> 00:03:17.003
We get our 24 hour clock.

43
00:03:17.003 --> 00:03:20.007
And we'll run the dev version as well.

44
00:03:20.007 --> 00:03:22.002
And we get our 12 hour clock.

45
00:03:22.002 --> 00:03:24.004
So everything is wired correctly.

46
00:03:24.004 --> 00:03:27.003
Let's take a look here at what we have done.

47
00:03:27.003 --> 00:03:31.004
So, we've brought in some Spring imports into our classes.

48
00:03:31.004 --> 00:03:34.000
And that may have some negative side effects

49
00:03:34.000 --> 00:03:36.008
based on your implementation, but I think what you'll find

50
00:03:36.008 --> 00:03:39.008
is that most of the time, these are very easy

51
00:03:39.008 --> 00:03:43.002
to strip out if you do decide to go away from Spring.

52
00:03:43.002 --> 00:03:46.003
But the real value is, is because all of these classes

53
00:03:46.003 --> 00:03:49.005
were so simple, and a lot of times this is the case, right?

54
00:03:49.005 --> 00:03:52.001
You have one or two constructor arguments,

55
00:03:52.001 --> 00:03:55.000
if any at all, so configuration can really

56
00:03:55.000 --> 00:03:58.005
be handled through auto wiring and in doing so,

57
00:03:58.005 --> 00:04:01.008
you get a much simpler config, and that's really

58
00:04:01.008 --> 00:04:04.002
what makes it easier to maintain.

59
00:04:04.002 --> 00:04:07.004
Now one thing you may notice is I never actually

60
00:04:07.004 --> 00:04:11.005
set like on our output service, I never actually

61
00:04:11.005 --> 00:04:14.006
set auto wire on the constructor.

62
00:04:14.006 --> 00:04:17.006
And the reason for that is that Spring needs

63
00:04:17.006 --> 00:04:20.005
a constructor to construct this object.

64
00:04:20.005 --> 00:04:23.006
There's only one constructor and it's not the default

65
00:04:23.006 --> 00:04:28.008
constructor, so Spring knows it has to use that constructor.

66
00:04:28.008 --> 00:04:30.001
And if it was the default then

67
00:04:30.001 --> 00:04:32.002
there's nothing to inject anyway.

68
00:04:32.002 --> 00:04:34.009
So since Spring knows it has to use that constructor,

69
00:04:34.009 --> 00:04:39.002
it'll automatically auto wire dependencies in for you.

70
00:04:39.002 --> 00:04:41.004
But if you want to, to make it more explicit,

71
00:04:41.004 --> 00:04:45.001
you can add @autowired to these and it'll work

72
00:04:45.001 --> 00:04:49.000
just the exact same, but we saw that it wast even necessary.

73
00:04:49.000 --> 00:04:50.007
So that's really your decision

74
00:04:50.007 --> 00:04:52.008
as to whether you want to do that.

75
00:04:52.008 --> 00:04:56.000
I tend to flip back and forth because it's not needed

76
00:04:56.000 --> 00:04:58.001
but it does make it a little bit more explicit

77
00:04:58.001 --> 00:05:00.000
so you can see what's going on.

78
00:05:00.000 --> 00:05:01.004
Again that's up to you.

79
00:05:01.004 --> 00:05:03.007
But we've now taken our application, configured it

80
00:05:03.007 --> 00:05:06.003
with Java config and now converted that to component

81
00:05:06.003 --> 00:05:09.006
scanning which would then port very easily

82
00:05:09.006 --> 00:05:12.005
into a Spring boot application if we chose to do that

83
00:05:12.005 --> 00:05:14.001
because at that point we could just remove

84
00:05:14.001 --> 00:05:17.004
that config totally and use the Spring boot framework

85
00:05:17.004 --> 00:05:20.000
to do all of the auto config for us,

86
00:05:20.000 --> 00:05:22.000
which includes this component scan.

