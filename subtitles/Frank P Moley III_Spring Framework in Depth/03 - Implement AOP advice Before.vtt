WEBVTT
1
00:00:00.007 --> 00:00:02.002
- [Instructor] Now that we have our pointcut

2
00:00:02.002 --> 00:00:04.001
and everything necessary for the framework

3
00:00:04.001 --> 00:00:08.002
to execute an aspect, we're going to create a before advice

4
00:00:08.002 --> 00:00:11.000
to execute before the join point

5
00:00:11.000 --> 00:00:14.002
that that pointcut will select.

6
00:00:14.002 --> 00:00:19.001
So let's jump into our IDE, in our LoggingAspect class.

7
00:00:19.001 --> 00:00:20.003
The first thing that we need to do

8
00:00:20.003 --> 00:00:22.003
is we need to put a logger in this class.

9
00:00:22.003 --> 00:00:29.002
So we're going to create a private static final Logger.

10
00:00:29.002 --> 00:00:32.001
Make sure you get the one from slf4j,

11
00:00:32.001 --> 00:00:38.005
call it LOGGER and we'll get that from the LoggerFactory

12
00:00:38.005 --> 00:00:43.007
and we'll just send it in the LoggingAspect.class

13
00:00:43.007 --> 00:00:45.008
as the prime for the logger.

14
00:00:45.008 --> 00:00:48.004
Now we're going to do our actual advice,

15
00:00:48.004 --> 00:00:52.005
so we're going to create a @Before advice

16
00:00:52.005 --> 00:00:56.002
and that @Before advice is going to execute

17
00:00:56.002 --> 00:00:59.009
against the executeLogging method.

18
00:00:59.009 --> 00:01:02.005
Now I alluded to earlier, you don't have to do it this way.

19
00:01:02.005 --> 00:01:05.004
We could put the pointcut here,

20
00:01:05.004 --> 00:01:07.003
but I actually prefer to keep them separate.

21
00:01:07.003 --> 00:01:09.003
I think it gives me a better visualization

22
00:01:09.003 --> 00:01:12.001
of what's going on by separating them.

23
00:01:12.001 --> 00:01:14.000
And that way I can use a pointcut

24
00:01:14.000 --> 00:01:17.000
for multiple advice if I want to.

25
00:01:17.000 --> 00:01:20.001
So we will do a @Before executeLogging

26
00:01:20.001 --> 00:01:21.009
and this is a public void method.

27
00:01:21.009 --> 00:01:26.009
We're going to call this one logMethodCall

28
00:01:26.009 --> 00:01:30.009
and this is going to take a parameter of a JoinPoint.

29
00:01:30.009 --> 00:01:33.009
Now what this will do is it'll allow us to have details

30
00:01:33.009 --> 00:01:36.008
about the actual call itself,

31
00:01:36.008 --> 00:01:37.008
which is what we want to do

32
00:01:37.008 --> 00:01:40.008
if we're going to write a logging method.

33
00:01:40.008 --> 00:01:42.000
So first thing I'm going to do

34
00:01:42.000 --> 00:01:48.009
is I'm going to use StringBuilder and create a message,

35
00:01:48.009 --> 00:01:55.001
and we will simply begin this with method colon space.

36
00:01:55.001 --> 00:01:57.001
Now we want to go get our method name.

37
00:01:57.001 --> 00:02:00.006
So message.append, and to get the method name

38
00:02:00.006 --> 00:02:03.008
we'll go to the joinPoint, we will get the signature,

39
00:02:03.008 --> 00:02:06.007
which is the signature of the method

40
00:02:06.007 --> 00:02:09.006
and from that we will get the name.

41
00:02:09.006 --> 00:02:11.005
You'll see signature has many options.

42
00:02:11.005 --> 00:02:13.006
In this case we only care about name,

43
00:02:13.006 --> 00:02:16.004
but there's more on that to come.

44
00:02:16.004 --> 00:02:20.001
Now we also want to capture the arguments that were used.

45
00:02:20.001 --> 00:02:24.003
Now be very careful if you do this in production code

46
00:02:24.003 --> 00:02:28.003
because obviously sometimes these arguments are sensitive

47
00:02:28.003 --> 00:02:30.008
and you don't really always want to get them.

48
00:02:30.008 --> 00:02:33.004
But in this case we will, so we will get the args

49
00:02:33.004 --> 00:02:39.000
from the joinPoint and put that into an array of Objects.

50
00:02:39.000 --> 00:02:45.007
Now if that Object array does not equal null

51
00:02:45.007 --> 00:02:52.007
and the length of that array is greater than zero,

52
00:02:52.007 --> 00:02:54.008
then we want to add to our message.

53
00:02:54.008 --> 00:03:00.004
So we will do a message.append, double quotes, space,

54
00:03:00.004 --> 00:03:04.004
args equals, so our args, we're going to do this

55
00:03:04.004 --> 00:03:11.009
with a square bracket, space, and then a pipe to begin with,

56
00:03:11.009 --> 00:03:15.008
and a space after that pipe.

57
00:03:15.008 --> 00:03:17.007
This will just give us a little bit of structure here,

58
00:03:17.007 --> 00:03:20.005
to our log messages.

59
00:03:20.005 --> 00:03:26.005
Now, Arrays.asList args.

60
00:03:26.005 --> 00:03:28.006
I'm just going to use a lambda to here to do this

61
00:03:28.006 --> 00:03:32.006
because I can do a forEach on this.

62
00:03:32.006 --> 00:03:36.003
So for each arg

63
00:03:36.003 --> 00:03:43.004
I want to take and spit out into the message

64
00:03:43.004 --> 00:03:46.008
the argument itself,

65
00:03:46.008 --> 00:03:49.001
and then I need to put a pipe behind it.

66
00:03:49.001 --> 00:03:54.000
So we will do space, pipe, space.

67
00:03:54.000 --> 00:03:56.008
And now when all of that is done, we need to close this out.

68
00:03:56.008 --> 00:03:59.006
So we'll do a message.append

69
00:03:59.006 --> 00:04:02.002
and we will simply close this out to square bracket

70
00:04:02.002 --> 00:04:05.006
so it looks okay in our logs.

71
00:04:05.006 --> 00:04:07.003
And at the end of all of that,

72
00:04:07.003 --> 00:04:13.008
we will do a logger.info message.toString

73
00:04:13.008 --> 00:04:15.005
and we're good to go.

74
00:04:15.005 --> 00:04:16.009
Now we need somewhere to execute against.

75
00:04:16.009 --> 00:04:20.000
So this is going against a Loggable annotation.

76
00:04:20.000 --> 00:04:22.007
So let's go to our GreetingService

77
00:04:22.007 --> 00:04:24.006
and to our getGreeting method

78
00:04:24.006 --> 00:04:29.000
let's add the annotation @Loggable

79
00:04:29.000 --> 00:04:33.000
and we can then run our application.

80
00:04:33.000 --> 00:04:36.004
I'm running it against dev right now,

81
00:04:36.004 --> 00:04:38.005
but you'll see here we get into our standard out

82
00:04:38.005 --> 00:04:42.003
because I piped all of the Log4j to standard out.

83
00:04:42.003 --> 00:04:46.005
We get a LoggingAspect log, which is method getGreeting,

84
00:04:46.005 --> 00:04:49.002
args is Partner, which is what was passed in,

85
00:04:49.002 --> 00:04:51.008
and then we get our standard out from before.

86
00:04:51.008 --> 00:04:54.009
So we've applied this cost-cutting concern

87
00:04:54.009 --> 00:04:57.008
to this method through a simple interface.

88
00:04:57.008 --> 00:05:00.001
Now in the real world, I'd package this aspect up

89
00:05:00.001 --> 00:05:02.008
into its own shared component

90
00:05:02.008 --> 00:05:04.009
and share it across an entire org.

91
00:05:04.009 --> 00:05:07.005
But for this purposes, it allows us to get the basics

92
00:05:07.005 --> 00:05:09.000
of writing and aspect.

