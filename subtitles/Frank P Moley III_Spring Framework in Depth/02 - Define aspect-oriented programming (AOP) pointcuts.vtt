WEBVTT
1
00:00:00.007 --> 00:00:01.009
- [Instructor] Pointcuts are the way

2
00:00:01.009 --> 00:00:04.006
a method or class is selected

3
00:00:04.006 --> 00:00:06.008
for execution of an aspect.

4
00:00:06.008 --> 00:00:09.002
So pointcuts select a join point,

5
00:00:09.002 --> 00:00:11.005
one thing to note is that the selection

6
00:00:11.005 --> 00:00:14.006
has a syntax all of its own.

7
00:00:14.006 --> 00:00:17.006
So let's talk about the pointcut syntax now a little bit.

8
00:00:17.006 --> 00:00:19.007
So essentially you have a designator,

9
00:00:19.007 --> 00:00:21.006
and then you have some parenthesis,

10
00:00:21.006 --> 00:00:22.008
and double quotes,

11
00:00:22.008 --> 00:00:24.006
and then there's some code letters here

12
00:00:24.006 --> 00:00:25.005
and an argument.

13
00:00:25.005 --> 00:00:27.006
So let's talk about these code letters.

14
00:00:27.006 --> 00:00:29.006
R is the return type.

15
00:00:29.006 --> 00:00:32.004
So you'll start to see that these are calling down

16
00:00:32.004 --> 00:00:33.009
to a method level

17
00:00:33.009 --> 00:00:35.004
which makes sense because that's ultimately

18
00:00:35.004 --> 00:00:37.005
what we're selecting is a method.

19
00:00:37.005 --> 00:00:39.003
Even if we select a class,

20
00:00:39.003 --> 00:00:42.007
we're drilling down to a method on that class.

21
00:00:42.007 --> 00:00:45.002
So, this can be a specific return type,

22
00:00:45.002 --> 00:00:47.004
or it can be a wild card.

23
00:00:47.004 --> 00:00:49.004
Package is much the same way.

24
00:00:49.004 --> 00:00:52.000
It is the package that the class exists in

25
00:00:52.000 --> 00:00:54.005
or again, a wildcard.

26
00:00:54.005 --> 00:00:55.009
C is the class,

27
00:00:55.009 --> 00:00:57.009
and you can wildcard in there as well.

28
00:00:57.009 --> 00:01:00.007
So if it's everything foo,

29
00:01:00.007 --> 00:01:03.007
that can be defined as a class

30
00:01:03.007 --> 00:01:05.005
within the structure.

31
00:01:05.005 --> 00:01:06.006
M is method,

32
00:01:06.006 --> 00:01:09.007
again, wildcarding is available.

33
00:01:09.007 --> 00:01:12.001
And arg, it can be one arg,

34
00:01:12.001 --> 00:01:14.009
many args, no args, all args,

35
00:01:14.009 --> 00:01:16.003
it depends upon the syntax.

36
00:01:16.003 --> 00:01:18.000
And I'm not going to go into the details

37
00:01:18.000 --> 00:01:19.006
of all of the variations here

38
00:01:19.006 --> 00:01:22.000
because we'd be here all day.

39
00:01:22.000 --> 00:01:23.005
The documentation from Spring

40
00:01:23.005 --> 00:01:25.009
as well as aspectJ is very descriptive

41
00:01:25.009 --> 00:01:29.002
about how to write out these designators.

42
00:01:29.002 --> 00:01:32.003
We're going to talk about one such designator.

43
00:01:32.003 --> 00:01:34.000
But there are a few common ones

44
00:01:34.000 --> 00:01:35.002
that you need to know.

45
00:01:35.002 --> 00:01:38.000
So execution, which is an expression

46
00:01:38.000 --> 00:01:40.002
for matching method execution.

47
00:01:40.002 --> 00:01:42.008
And that's the one that we're going to use.

48
00:01:42.008 --> 00:01:45.007
Within, expressions for matching

49
00:01:45.007 --> 00:01:47.003
within certain types.

50
00:01:47.003 --> 00:01:50.006
So I talked about you can have variations within classes,

51
00:01:50.006 --> 00:01:52.005
so they have a specific name

52
00:01:52.005 --> 00:01:53.007
or a type of name.

53
00:01:53.007 --> 00:01:55.004
You can use things like within

54
00:01:55.004 --> 00:01:57.004
to get to certain types.

55
00:01:57.004 --> 00:01:59.004
Target is expressions

56
00:01:59.004 --> 00:02:02.002
for matching a specific type.

57
00:02:02.002 --> 00:02:04.004
And then the @annotation,

58
00:02:04.004 --> 00:02:06.009
which is really ultimately what we want to use

59
00:02:06.009 --> 00:02:10.000
are expressions for matching a specific annotation.

60
00:02:10.000 --> 00:02:10.009
Now, why do I say

61
00:02:10.009 --> 00:02:12.006
that we want to use this?

62
00:02:12.006 --> 00:02:13.005
The reality is that

63
00:02:13.005 --> 00:02:15.008
when you're writing application code,

64
00:02:15.008 --> 00:02:20.001
you can get too overzealous with these aspects.

65
00:02:20.001 --> 00:02:21.004
By using annotation,

66
00:02:21.004 --> 00:02:22.004
you're forcing people

67
00:02:22.004 --> 00:02:24.000
to make a conscious decision

68
00:02:24.000 --> 00:02:25.009
to apply the annotation

69
00:02:25.009 --> 00:02:28.000
which then gets the behavior.

70
00:02:28.000 --> 00:02:28.009
And in my opinion,

71
00:02:28.009 --> 00:02:31.005
that's much better than just blindly applying it

72
00:02:31.005 --> 00:02:32.007
across the board,

73
00:02:32.007 --> 00:02:35.007
because that can have unintended consequences.

74
00:02:35.007 --> 00:02:36.006
At least this way

75
00:02:36.006 --> 00:02:38.000
you can define a set of rules

76
00:02:38.000 --> 00:02:40.009
that says "Hey, everybody who writes a service

77
00:02:40.009 --> 00:02:43.001
"needs to put this logging logic in,

78
00:02:43.001 --> 00:02:44.009
"but instead of us doing it automatically,

79
00:02:44.009 --> 00:02:47.006
"use this annotation @loggable

80
00:02:47.006 --> 00:02:50.002
"and that will get the behavior added."

81
00:02:50.002 --> 00:02:51.009
So it allows you to have some control

82
00:02:51.009 --> 00:02:53.003
over the situation

83
00:02:53.003 --> 00:02:55.001
while still giving them free reign

84
00:02:55.001 --> 00:02:57.004
to encapsulate that behavior

85
00:02:57.004 --> 00:02:59.009
outside their application code.

86
00:02:59.009 --> 00:03:03.002
So let's take a look at making this work.

87
00:03:03.002 --> 00:03:04.001
So what we need to do

88
00:03:04.001 --> 00:03:05.009
is go into our pom file,

89
00:03:05.009 --> 00:03:07.003
we're going to start there.

90
00:03:07.003 --> 00:03:10.003
And we need to add a couple dependencies.

91
00:03:10.003 --> 00:03:14.000
First dependency is on aspectj itself.

92
00:03:14.000 --> 00:03:17.008
So we need the aspectjweaver,

93
00:03:17.008 --> 00:03:20.003
and we need that from org.aspectj,

94
00:03:20.003 --> 00:03:25.003
make sure you get the org.aspectj one.

95
00:03:25.003 --> 00:03:27.005
And go ahead and grab the latest version,

96
00:03:27.005 --> 00:03:32.001
which I believe right now is one nine five.

97
00:03:32.001 --> 00:03:34.003
And because we're going to write a logging aspect,

98
00:03:34.003 --> 00:03:38.003
we need to get slf4j on our class path.

99
00:03:38.003 --> 00:03:42.003
So we're going to do slf4j-log4j12,

100
00:03:42.003 --> 00:03:46.007
and that comes from org.slf4j.

101
00:03:46.007 --> 00:03:47.005
And once again,

102
00:03:47.005 --> 00:03:48.008
we're going to grab the latest version,

103
00:03:48.008 --> 00:03:52.003
which at this point in time is 1.7.30.

104
00:03:52.003 --> 00:03:55.005
Now, I also need to go get a properties file set up

105
00:03:55.005 --> 00:03:58.008
so that log4j will work properly.

106
00:03:58.008 --> 00:03:59.008
So I would recommend

107
00:03:59.008 --> 00:04:02.002
that you just grab this from the exercise files,

108
00:04:02.002 --> 00:04:07.005
because it's kind of convoluted to write this.

109
00:04:07.005 --> 00:04:08.004
Okay, like I said,

110
00:04:08.004 --> 00:04:09.002
that was a lot to type,

111
00:04:09.002 --> 00:04:12.005
so I hope you grabbed it from the exercise files

112
00:04:12.005 --> 00:04:15.004
as opposed to typing all of that in.

113
00:04:15.004 --> 00:04:19.002
So now we're going to create a package.

114
00:04:19.002 --> 00:04:26.000
And we're going to call this aspect.

115
00:04:26.000 --> 00:04:27.002
So in here,

116
00:04:27.002 --> 00:04:30.008
we're going to create a new annotation called loggable.

117
00:04:30.008 --> 00:04:35.000
To loggable, we need to set an @target.

118
00:04:35.000 --> 00:04:41.007
Now our target needs to be ElementType.METHOD.

119
00:04:41.007 --> 00:04:45.002
And our retention needs to have

120
00:04:45.002 --> 00:04:51.007
a retention policy of RUNTIME.

121
00:04:51.007 --> 00:04:54.006
And that's all we need for our interface itself.

122
00:04:54.006 --> 00:04:56.009
So now we'll create our actual aspect,

123
00:04:56.009 --> 00:05:02.004
and this is a Java class called LoggingAspect.

124
00:05:02.004 --> 00:05:06.002
Now, we will mark this as an @component.

125
00:05:06.002 --> 00:05:10.001
We will also mark this as an @aspect.

126
00:05:10.001 --> 00:05:14.002
And in here we're going to define a pointcut.

127
00:05:14.002 --> 00:05:15.008
And the pointcut that we're going to use

128
00:05:15.008 --> 00:05:23.004
is @annotation(Loggable).

129
00:05:23.004 --> 00:05:24.009
And this will just be a method,

130
00:05:24.009 --> 00:05:30.003
public void executeLogging.

131
00:05:30.003 --> 00:05:31.005
I like to do it this way,

132
00:05:31.005 --> 00:05:33.000
you definitely don't have to.

133
00:05:33.000 --> 00:05:35.004
You can put all of this in the next step

134
00:05:35.004 --> 00:05:36.009
if you choose to.

135
00:05:36.009 --> 00:05:38.006
But this is the way that I like to do it,

136
00:05:38.006 --> 00:05:40.007
is I like to have a dedicated method

137
00:05:40.007 --> 00:05:44.003
that has my pointcut definition on it.

138
00:05:44.003 --> 00:05:45.006
Now we need to do one more thing

139
00:05:45.006 --> 00:05:47.003
in order for this to be ready to go.

140
00:05:47.003 --> 00:05:50.003
So go to your application context,

141
00:05:50.003 --> 00:05:55.006
and we need to add an annotation, EnableAspectJAutoProxy.

142
00:05:55.006 --> 00:05:58.001
So this will allow our proxy to load,

143
00:05:58.001 --> 00:06:00.002
and to use this aspect.

144
00:06:00.002 --> 00:06:01.004
As we get into the next section,

145
00:06:01.004 --> 00:06:03.004
we're going to talk about writing the advice that is missing

146
00:06:03.004 --> 00:06:06.000
from our logging aspect.

