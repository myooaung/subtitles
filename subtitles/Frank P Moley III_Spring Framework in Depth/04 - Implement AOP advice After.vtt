WEBVTT
1
00:00:00.007 --> 00:00:03.001
- [Instructor] So we've seen executions through advice

2
00:00:03.001 --> 00:00:05.007
that occurred before the join point.

3
00:00:05.007 --> 00:00:08.002
Let's take a look at the execution that occurs

4
00:00:08.002 --> 00:00:11.002
after the join point.

5
00:00:11.002 --> 00:00:12.009
So in our logging aspect class,

6
00:00:12.009 --> 00:00:15.008
we are going to change the before to an after,

7
00:00:15.008 --> 00:00:18.001
but it's not just after.

8
00:00:18.001 --> 00:00:19.005
It's after returning,

9
00:00:19.005 --> 00:00:22.005
and we'll talk a little bit about that here in a moment,

10
00:00:22.005 --> 00:00:25.001
but it's important to note that there's after returning

11
00:00:25.001 --> 00:00:27.001
and after throwing.

12
00:00:27.001 --> 00:00:30.002
So we will add to this a return value.

13
00:00:30.002 --> 00:00:36.001
So this would be returning, and it will be return value,

14
00:00:36.001 --> 00:00:42.008
and that is an object that gets returned to this method.

15
00:00:42.008 --> 00:00:45.004
So now we have access to both the join point,

16
00:00:45.004 --> 00:00:51.000
so the data of the method, plus what the method returned.

17
00:00:51.000 --> 00:00:55.003
After we've done our appending of our message

18
00:00:55.003 --> 00:00:57.008
let's put a little bit more data in here.

19
00:00:57.008 --> 00:01:06.002
So if return value is an instance of a collection,

20
00:01:06.002 --> 00:01:20.002
we want to do message dot append, we'll do comma returning.

21
00:01:20.002 --> 00:01:21.007
I'm going to bring in this collection here

22
00:01:21.007 --> 00:01:27.000
real quick as an import.

23
00:01:27.000 --> 00:01:34.004
We're going to do a little casting here,

24
00:01:34.004 --> 00:01:39.004
'cause we want to get the size of that collection.

25
00:01:39.004 --> 00:01:44.002
And then I'm going to add to this instances.

26
00:01:44.002 --> 00:01:45.003
This is how we know how much

27
00:01:45.003 --> 00:01:48.000
actually returned out of our method.

28
00:01:48.000 --> 00:01:57.007
Now, else, message dot append, returning.

29
00:01:57.007 --> 00:02:01.003
Let's put a space there so we're consistent,

30
00:02:01.003 --> 00:02:03.009
and then we will append.

31
00:02:03.009 --> 00:02:07.006
Return value dot to string.

32
00:02:07.006 --> 00:02:10.002
So with that being said, what we've now done

33
00:02:10.002 --> 00:02:14.000
is we've captured a bunch of data about the call

34
00:02:14.000 --> 00:02:16.003
and then how it was returned,

35
00:02:16.003 --> 00:02:19.000
but we're doing all of this actually after

36
00:02:19.000 --> 00:02:21.008
the call is executed using the returning.

37
00:02:21.008 --> 00:02:22.009
so let's go ahead and play this,

38
00:02:22.009 --> 00:02:25.007
and while it's spinning up I want to talk about that.

39
00:02:25.007 --> 00:02:27.004
So there's a danger here.

40
00:02:27.004 --> 00:02:30.007
If my method throws an exception,

41
00:02:30.007 --> 00:02:33.008
I actually will never get this to execute,

42
00:02:33.008 --> 00:02:36.008
because this is after returning, not after throwing,

43
00:02:36.008 --> 00:02:40.000
and I'm going to show you that here in a moment.

