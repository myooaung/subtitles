WEBVTT
1
00:00:00.007 --> 00:00:03.000
- [Instructor] If you have ever used Spring Boot,

2
00:00:03.000 --> 00:00:05.006
the auto-configuration is partially achieved

3
00:00:05.006 --> 00:00:07.004
through component scanning

4
00:00:07.004 --> 00:00:10.001
mixed with conditional configurations.

5
00:00:10.001 --> 00:00:14.009
In fact for many classes external configuration isn't needed

6
00:00:14.009 --> 00:00:19.003
as component scanning can solve the configuration for you.

7
00:00:19.003 --> 00:00:22.007
The root annotation that is used for component scanning

8
00:00:22.007 --> 00:00:24.003
is that component.

9
00:00:24.003 --> 00:00:26.001
This annotation indicates

10
00:00:26.001 --> 00:00:29.006
that the class should be loaded into the BeanFactory

11
00:00:29.006 --> 00:00:32.006
and configured using annotations

12
00:00:32.006 --> 00:00:35.008
and inspections of the class itself.

13
00:00:35.008 --> 00:00:38.004
Component is the root annotation,

14
00:00:38.004 --> 00:00:41.000
but there are several stereotypes of this annotation

15
00:00:41.000 --> 00:00:42.007
that can be used.

16
00:00:42.007 --> 00:00:47.002
Often you want to use these stereotypes like @Service

17
00:00:47.002 --> 00:00:49.002
so you can write your own aspects

18
00:00:49.002 --> 00:00:53.004
to add behavior to your classes based on type.

19
00:00:53.004 --> 00:00:56.004
We will go through an example of that later on.

20
00:00:56.004 --> 00:01:00.000
Component scanning scans the base package

21
00:01:00.000 --> 00:01:02.005
and that package's sub packages

22
00:01:02.005 --> 00:01:04.009
and loads configuration automatically

23
00:01:04.009 --> 00:01:06.007
for each bean it finds.

24
00:01:06.007 --> 00:01:11.004
It uses other annotations to direct the IOC container

25
00:01:11.004 --> 00:01:14.004
to build the dependency graph.

26
00:01:14.004 --> 00:01:16.006
Dependency injection is achieved

27
00:01:16.006 --> 00:01:20.000
as mentioned through component scanning.

28
00:01:20.000 --> 00:01:24.002
It is achieved mainly through the annotation @Autowired.

29
00:01:24.002 --> 00:01:27.001
This instructs the IOC container

30
00:01:27.001 --> 00:01:32.000
to inject a bean into the needed value at that point.

31
00:01:32.000 --> 00:01:34.004
The Spring designers are very specific

32
00:01:34.004 --> 00:01:37.001
about how you should use autowiring.

33
00:01:37.001 --> 00:01:40.005
While you can put it on a class attribute,

34
00:01:40.005 --> 00:01:43.004
you should only set it on methods.

35
00:01:43.004 --> 00:01:45.008
This really aids in testing.

36
00:01:45.008 --> 00:01:47.007
If a dependency is required

37
00:01:47.007 --> 00:01:49.007
it should be set on the constructor.

38
00:01:49.007 --> 00:01:53.007
If the dependency isn't it should be on the setter.

39
00:01:53.007 --> 00:01:57.000
If you have more than one bean of the same type

40
00:01:57.000 --> 00:01:59.003
you can use the @Qualifier annotation

41
00:01:59.003 --> 00:02:03.001
to inject a specific version by name.

42
00:02:03.001 --> 00:02:05.000
But I will urge some caution here.

43
00:02:05.000 --> 00:02:08.006
This can be very difficult to manage in your application,

44
00:02:08.006 --> 00:02:13.000
and you will often find it isn't worth the effort.

45
00:02:13.000 --> 00:02:16.007
If you have properties or constants that need to be injected

46
00:02:16.007 --> 00:02:20.005
you can use the @Value annotation that we've already seen

47
00:02:20.005 --> 00:02:25.001
to instruct the IOC container to put a value into a variable

48
00:02:25.001 --> 00:02:27.002
for use elsewhere.

49
00:02:27.002 --> 00:02:29.005
To start the component scanning engine

50
00:02:29.005 --> 00:02:31.003
you need to prime the pump.

51
00:02:31.003 --> 00:02:35.003
You need some form of Java or XML configuration

52
00:02:35.003 --> 00:02:38.003
to start component scanning on your own.

53
00:02:38.003 --> 00:02:40.001
If you are using Spring Boot

54
00:02:40.001 --> 00:02:43.001
you're getting auto-configuration through this method

55
00:02:43.001 --> 00:02:47.003
by a special annotation @SpringBootApplication.

56
00:02:47.003 --> 00:02:51.008
The base package is defined within this configuration.

57
00:02:51.008 --> 00:02:54.002
Scanning occurs during startup,

58
00:02:54.002 --> 00:02:58.000
and we will go through that life cycle in the next chapter.

