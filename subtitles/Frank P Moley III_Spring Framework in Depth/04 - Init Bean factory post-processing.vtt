WEBVTT
1
00:00:00.007 --> 00:00:02.007
- [Instructor] We will now take a look at the final step

2
00:00:02.007 --> 00:00:06.006
of loading of the bean definitions into the factory.

3
00:00:06.006 --> 00:00:08.005
Once again back to our original overview,

4
00:00:08.005 --> 00:00:10.002
so we've loaded all of our bean definitions.

5
00:00:10.002 --> 00:00:14.007
Now we're in the post-process bean definition phase.

6
00:00:14.007 --> 00:00:17.005
The BeanFactory post-processors

7
00:00:17.005 --> 00:00:20.007
are a very important set of behaviors that occur,

8
00:00:20.007 --> 00:00:23.001
because all of the processing that occurs here

9
00:00:23.001 --> 00:00:26.007
happens before the objects are instantiated.

10
00:00:26.007 --> 00:00:28.006
Work that is performed here is done

11
00:00:28.006 --> 00:00:30.008
on the entire BeanFactory.

12
00:00:30.008 --> 00:00:35.002
Now that doesn't mean that every bean gets impacted,

13
00:00:35.002 --> 00:00:38.000
but every bean throughout the factory

14
00:00:38.000 --> 00:00:40.004
may have behavior done to it.

15
00:00:40.004 --> 00:00:43.003
At this point we can modify or transform

16
00:00:43.003 --> 00:00:47.001
any bean in the factory prior to its instantiation,

17
00:00:47.001 --> 00:00:48.007
and that's very important.

18
00:00:48.007 --> 00:00:52.005
We actually can change the configuration

19
00:00:52.005 --> 00:00:56.005
at this point when the BeanFactory is being loaded,

20
00:00:56.005 --> 00:00:59.002
because we haven't instantiated everything,

21
00:00:59.002 --> 00:01:02.005
because within Spring everything is a singleton.

22
00:01:02.005 --> 00:01:04.007
One of the most familiar examples of this,

23
00:01:04.007 --> 00:01:06.003
and it's one that we've already used,

24
00:01:06.003 --> 00:01:09.008
is the PropertySourcesPlaceholderConfigurer.

25
00:01:09.008 --> 00:01:11.009
If you remember in our little example application

26
00:01:11.009 --> 00:01:14.006
we loaded a properties file at one point,

27
00:01:14.006 --> 00:01:17.003
and we used that to configure our beans,

28
00:01:17.003 --> 00:01:21.005
and what happened is during this phase of the lifecycle,

29
00:01:21.005 --> 00:01:24.009
our beans were scanned and found to have that annotation

30
00:01:24.009 --> 00:01:28.005
that Spring was looking for, and that syntax that said hey,

31
00:01:28.005 --> 00:01:30.005
this is a value that needs to be loaded

32
00:01:30.005 --> 00:01:33.003
from the environment, that dollar sign curly brace,

33
00:01:33.003 --> 00:01:37.002
and it loaded it and actually changed the configuration

34
00:01:37.002 --> 00:01:40.001
before the class was initialized.

35
00:01:40.001 --> 00:01:45.000
Now, you can extend from the BeanFactoryPostProcessor

36
00:01:45.000 --> 00:01:49.000
if you need to, and this is the first extension point

37
00:01:49.000 --> 00:01:52.003
of the lifecycle, which is it's so important.

38
00:01:52.003 --> 00:01:56.002
You can use this interface to write custom components

39
00:01:56.002 --> 00:01:58.005
to impact the BeanFactory.

40
00:01:58.005 --> 00:02:00.004
So if you have something that you need to do

41
00:02:00.004 --> 00:02:03.000
to every bean, or a subset of beans,

42
00:02:03.000 --> 00:02:05.002
before they're instantiated,

43
00:02:05.002 --> 00:02:09.003
you can use the BeanFactoryPostProcessor to do it.

44
00:02:09.003 --> 00:02:12.004
Now, it's not very common to write your own,

45
00:02:12.004 --> 00:02:14.004
but this is very important to understand,

46
00:02:14.004 --> 00:02:16.009
especially if you're working within the framework,

47
00:02:16.009 --> 00:02:20.000
because you can use this to your advantage.

48
00:02:20.000 --> 00:02:23.003
Now, it is very common to use existing ones

49
00:02:23.003 --> 00:02:26.005
on registering scopes and properties and things like that,

50
00:02:26.005 --> 00:02:28.007
'cause you can create custom scopes,

51
00:02:28.007 --> 00:02:29.007
you can import properties.

52
00:02:29.007 --> 00:02:32.007
So, your use of these is much more common

53
00:02:32.007 --> 00:02:34.007
than your creation of their own,

54
00:02:34.007 --> 00:02:37.000
but there is an interface that you can implement

55
00:02:37.000 --> 00:02:41.008
if you have some use case to do work on the BeanFactory.

56
00:02:41.008 --> 00:02:42.008
Now I want to talk a little bit

57
00:02:42.008 --> 00:02:45.002
about the BeanFactoryPostProcessors,

58
00:02:45.002 --> 00:02:48.009
and using Java configuration to configure them.

59
00:02:48.009 --> 00:02:52.002
Bean definitions for a BeanFactoryPostProcessor

60
00:02:52.002 --> 00:02:54.001
must be static.

61
00:02:54.001 --> 00:02:57.000
By doing so you remove the risk of side effects

62
00:02:57.000 --> 00:02:58.009
of dynamic instances.

63
00:02:58.009 --> 00:03:03.004
So, because static classes have a firm set of behavior

64
00:03:03.004 --> 00:03:06.003
and the way that they're loaded into the class loader,

65
00:03:06.003 --> 00:03:08.006
they reduce the risk of side effects.

66
00:03:08.006 --> 00:03:12.009
So they must be static, and that is for this purpose.

67
00:03:12.009 --> 00:03:14.009
Now, once this phase is completed

68
00:03:14.009 --> 00:03:16.007
we've achieved a certain level

69
00:03:16.007 --> 00:03:19.002
of detail within our lifecycle.

70
00:03:19.002 --> 00:03:22.003
So our BeanFactory is loaded with all of our references.

71
00:03:22.003 --> 00:03:24.004
We're still references here.

72
00:03:24.004 --> 00:03:26.007
The BeanFactory is and all of the beans

73
00:03:26.007 --> 00:03:29.000
are actually at this point configured.

74
00:03:29.000 --> 00:03:31.000
So they are configured from the perspective

75
00:03:31.000 --> 00:03:34.001
of initialization and instantiation.

76
00:03:34.001 --> 00:03:36.002
No further changes will happen to a bean

77
00:03:36.002 --> 00:03:38.008
before it is instantiated.

78
00:03:38.008 --> 00:03:42.005
All system level work is completed in Spring at this point.

79
00:03:42.005 --> 00:03:45.004
Everything else is done on the individual objects

80
00:03:45.004 --> 00:03:46.003
once they are created.

81
00:03:46.003 --> 00:03:48.009
So everything from a system perspective is done,

82
00:03:48.009 --> 00:03:51.009
and everything is loaded and ready for the next phase

83
00:03:51.009 --> 00:03:55.000
when we start iterating over our beans.

