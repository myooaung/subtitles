WEBVTT
1
00:00:00.007 --> 00:00:03.004
- [Instructor] When your application begins to shut down,

2
00:00:03.004 --> 00:00:07.000
hopefully on purpose, you enter the destruction phase

3
00:00:07.000 --> 00:00:09.001
of the life cycle.

4
00:00:09.001 --> 00:00:11.007
Now, the destruction phase is really critical

5
00:00:11.007 --> 00:00:15.005
because this is when Spring itself goes out of context.

6
00:00:15.005 --> 00:00:18.004
And it begins when close is called

7
00:00:18.004 --> 00:00:20.007
on the ApplicationContext.

8
00:00:20.007 --> 00:00:24.000
So there is a method called close that you can call.

9
00:00:24.000 --> 00:00:26.006
Now, if you just shut your application down,

10
00:00:26.006 --> 00:00:30.006
close will be called as well in a roundabout way.

11
00:00:30.006 --> 00:00:34.005
Any @PreDestroy method is called when close is called

12
00:00:34.005 --> 00:00:36.004
on the ApplicationContext.

13
00:00:36.004 --> 00:00:38.006
And again, this is that life cycle method

14
00:00:38.006 --> 00:00:41.005
that gave you the last chance to do work

15
00:00:41.005 --> 00:00:44.007
before Spring itself goes out of scope.

16
00:00:44.007 --> 00:00:48.000
It's important to note that beans are not destroyed.

17
00:00:48.000 --> 00:00:48.009
This is Java.

18
00:00:48.009 --> 00:00:51.004
You can't destroy the beans anywhere.

19
00:00:51.004 --> 00:00:53.007
Only the garbage collector can do that.

20
00:00:53.007 --> 00:00:55.007
So beans are not destroyed.

21
00:00:55.007 --> 00:00:59.000
They're not de-referenced until close occurs.

22
00:00:59.000 --> 00:01:01.008
Then they are de-referenced and marked as available

23
00:01:01.008 --> 00:01:03.007
for garbage collection.

24
00:01:03.007 --> 00:01:06.002
Now, there's some caveats when dealing

25
00:01:06.002 --> 00:01:07.008
with the destruction phase.

26
00:01:07.008 --> 00:01:13.001
First and foremost, the context cannot be reused again.

27
00:01:13.001 --> 00:01:15.002
You cannot call close and then immediately get

28
00:01:15.002 --> 00:01:16.006
the context back.

29
00:01:16.006 --> 00:01:18.009
Close is final, it's done.

30
00:01:18.009 --> 00:01:20.000
End of story.

31
00:01:20.000 --> 00:01:22.000
And that's the important thing to remember

32
00:01:22.000 --> 00:01:25.002
when calling close is it's a one-way door.

33
00:01:25.002 --> 00:01:27.002
You're not coming back from that.

34
00:01:27.002 --> 00:01:30.004
Prototype beans were released once they were instantiated

35
00:01:30.004 --> 00:01:32.005
and handed to the application.

36
00:01:32.005 --> 00:01:34.006
So they have already been garbage collected

37
00:01:34.006 --> 00:01:37.006
or at least been marked available for garbage collection

38
00:01:37.006 --> 00:01:40.004
at the point in time when close is called

39
00:01:40.004 --> 00:01:42.004
on the ApplicationContext.

40
00:01:42.004 --> 00:01:45.004
And again, only garbage collection can actually

41
00:01:45.004 --> 00:01:48.006
destroy bean instances, you cannot.

42
00:01:48.006 --> 00:01:51.003
So all of this is really designed to mark things

43
00:01:51.003 --> 00:01:54.003
available for the garbage collector and that's it.

44
00:01:54.003 --> 00:01:58.002
So @PreDestroy occurs on any methods marked as such

45
00:01:58.002 --> 00:02:00.000
and then everything is marked as available

46
00:02:00.000 --> 00:02:02.008
for garbage collection and Spring goes out of scope

47
00:02:02.008 --> 00:02:04.008
and we're done with our application until we start

48
00:02:04.008 --> 00:02:06.000
it up again.

