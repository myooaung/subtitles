WEBVTT
1
00:00:00.007 --> 00:00:02.008
- [Instructor] As we get ready to dig into Spring framework

2
00:00:02.008 --> 00:00:05.003
in depth it is important to level set

3
00:00:05.003 --> 00:00:08.007
on what exactly Spring is and why it is become

4
00:00:08.007 --> 00:00:12.002
one of the most popular frameworks for the JDK.

5
00:00:12.002 --> 00:00:14.005
So what is Spring beyond just the basics

6
00:00:14.005 --> 00:00:16.001
of the framework?

7
00:00:16.001 --> 00:00:18.001
Spring is indeed a framework that provides

8
00:00:18.001 --> 00:00:21.002
the plumbing for an application so you can focus

9
00:00:21.002 --> 00:00:23.008
on the business processes or user needs

10
00:00:23.008 --> 00:00:26.004
that you are responsible for.

11
00:00:26.004 --> 00:00:29.005
But Spring is also an open source project

12
00:00:29.005 --> 00:00:33.002
backed by Pivotal, now owned once again by VMware.

13
00:00:33.002 --> 00:00:36.009
The power of Spring really starts with this community.

14
00:00:36.009 --> 00:00:39.008
The core committers are all fantastic developers

15
00:00:39.008 --> 00:00:42.007
and the community only makes them better.

16
00:00:42.007 --> 00:00:45.001
They're all very active in answering questions,

17
00:00:45.001 --> 00:00:48.004
responding to bugs, and sharing their opinions

18
00:00:48.004 --> 00:00:51.008
on how to use Spring in the most effective manner.

19
00:00:51.008 --> 00:00:54.007
Spring was and still is to a large part

20
00:00:54.007 --> 00:00:58.001
still focused on enterprise abstractions.

21
00:00:58.001 --> 00:01:02.000
It is really the bread-and-butter of its operational usage.

22
00:01:02.000 --> 00:01:05.001
However, Spring is fully capable of supporting

23
00:01:05.001 --> 00:01:07.006
internet focused applications.

24
00:01:07.006 --> 00:01:10.002
In the advent of micro services architectures

25
00:01:10.002 --> 00:01:12.008
where Java is the language of choice,

26
00:01:12.008 --> 00:01:15.004
Spring really shines with Spring Boot

27
00:01:15.004 --> 00:01:18.006
and embedded application servers.

28
00:01:18.006 --> 00:01:20.008
Spring is really lightweight.

29
00:01:20.008 --> 00:01:22.007
I know many users of other frameworks

30
00:01:22.007 --> 00:01:24.006
will laugh at that comment.

31
00:01:24.006 --> 00:01:27.005
But if you look at the feature sets Spring provides

32
00:01:27.005 --> 00:01:29.006
and the way the projects are broken apart

33
00:01:29.006 --> 00:01:34.003
to optimize workflows, it really is a lightweight framework.

34
00:01:34.003 --> 00:01:38.001
Consider especially traditional Jakarta EE implementations,

35
00:01:38.001 --> 00:01:41.000
formally known as Java enterprise edition,

36
00:01:41.000 --> 00:01:45.003
the Spring packaging and abstractions are much smaller.

37
00:01:45.003 --> 00:01:48.002
Spring is also very unobtrusive.

38
00:01:48.002 --> 00:01:51.007
If you build your applications using best practices

39
00:01:51.007 --> 00:01:54.001
and current recommended strategies,

40
00:01:54.001 --> 00:01:56.007
you can dramatically reduce the dependency

41
00:01:56.007 --> 00:02:00.000
on imports from the Spring catalog.

42
00:02:00.000 --> 00:02:02.006
Through the use of abstractions and facades

43
00:02:02.006 --> 00:02:04.008
you can actually keep your business logic

44
00:02:04.008 --> 00:02:08.000
completely intact while not requiring

45
00:02:08.000 --> 00:02:12.002
any Spring imports in those class files.

46
00:02:12.002 --> 00:02:14.000
So let's spend a moment and talk about

47
00:02:14.000 --> 00:02:16.007
the most popular use case for Spring

48
00:02:16.007 --> 00:02:19.006
and that is the enterprise itself.

49
00:02:19.006 --> 00:02:22.004
With Spring, especially Spring Boot,

50
00:02:22.004 --> 00:02:25.009
there is no need for heavy application servers.

51
00:02:25.009 --> 00:02:28.005
Even if you don't use Spring Boot,

52
00:02:28.005 --> 00:02:32.002
Tomcat is sufficient to run your packaged WAR file.

53
00:02:32.002 --> 00:02:34.008
However, most users today are building

54
00:02:34.008 --> 00:02:39.005
executable Jar files with the app server embedded in it.

55
00:02:39.005 --> 00:02:41.009
Spring achieves much of this abstraction

56
00:02:41.009 --> 00:02:44.007
from the heavy enterprise system APIs

57
00:02:44.007 --> 00:02:47.001
that come with Jakarta EE.

58
00:02:47.001 --> 00:02:49.004
That doesn't mean that you don't still have

59
00:02:49.004 --> 00:02:52.002
access to technologies like JMS.

60
00:02:52.002 --> 00:02:55.007
You just abstract them away from the application server.

61
00:02:55.007 --> 00:02:59.005
By leveraging this in your ecosystem your code is simpler

62
00:02:59.005 --> 00:03:02.003
but so is your operational burden.

63
00:03:02.003 --> 00:03:05.005
By leveraging dedicated systems instead of large

64
00:03:05.005 --> 00:03:09.002
do everything application server implementations

65
00:03:09.002 --> 00:03:13.006
you make your code easier to distribute and scale as well.

66
00:03:13.006 --> 00:03:16.003
Now I've mentioned business logic a lot already.

67
00:03:16.003 --> 00:03:18.007
But it's a key win for Spring.

68
00:03:18.007 --> 00:03:20.009
Think of how complex and repetitive it is

69
00:03:20.009 --> 00:03:24.005
to set up a JDBC connection, build a query,

70
00:03:24.005 --> 00:03:27.009
execute it, and then read the results into an object

71
00:03:27.009 --> 00:03:31.001
all while shutting down the result set in connection.

72
00:03:31.001 --> 00:03:33.009
Now repeat that for every database query

73
00:03:33.009 --> 00:03:35.005
in your application.

74
00:03:35.005 --> 00:03:40.001
Then expand that to every other common system that you use.

75
00:03:40.001 --> 00:03:43.000
This litters your code with copy and paste

76
00:03:43.000 --> 00:03:45.005
that is error-prone at best.

77
00:03:45.005 --> 00:03:48.002
With Spring this just goes away.

78
00:03:48.002 --> 00:03:50.004
The framework handles it for you.

79
00:03:50.004 --> 00:03:53.003
So your code is just business logic

80
00:03:53.003 --> 00:03:57.005
and ultimately that is what you really care about.

81
00:03:57.005 --> 00:03:59.003
Another big benefit of Spring

82
00:03:59.003 --> 00:04:03.001
is the dependency injection aspect of the framework.

83
00:04:03.001 --> 00:04:06.006
Spring manages all of your runtime dependencies

84
00:04:06.006 --> 00:04:09.008
by allowing the framework to maintain those objects

85
00:04:09.008 --> 00:04:12.003
so you don't have to deal with the creation and maintenance

86
00:04:12.003 --> 00:04:14.005
of those objects themselves.

87
00:04:14.005 --> 00:04:18.000
This greatly decreases the complexity of your code

88
00:04:18.000 --> 00:04:21.001
which of course improves your maintainability.

89
00:04:21.001 --> 00:04:24.002
It also helps you avoid some of the most common issues

90
00:04:24.002 --> 00:04:27.007
around memory management that can creep into Java

91
00:04:27.007 --> 00:04:31.001
even though it has automatic garbage collection.

92
00:04:31.001 --> 00:04:34.003
With Spring you create those objects once.

93
00:04:34.003 --> 00:04:36.003
This is done either through configuration

94
00:04:36.003 --> 00:04:39.003
of the application context or through formal

95
00:04:39.003 --> 00:04:43.004
object creation and configuration in Java config.

96
00:04:43.004 --> 00:04:45.008
At the point your object is configured

97
00:04:45.008 --> 00:04:49.003
it is maintained by the application context however

98
00:04:49.003 --> 00:04:51.009
until the application closes.

99
00:04:51.009 --> 00:04:54.006
This is a technique that does take some getting used to

100
00:04:54.006 --> 00:04:58.000
as with any dependency injection based framework.

101
00:04:58.000 --> 00:05:00.006
But we are going to spend some time talking about that

102
00:05:00.006 --> 00:05:03.000
in much more detail later.

