WEBVTT
1
00:00:00.007 --> 00:00:02.001
- [Instructor] I alluded to the fact earlier

2
00:00:02.001 --> 00:00:03.008
that there are some differences

3
00:00:03.008 --> 00:00:06.004
in the initialization phase based

4
00:00:06.004 --> 00:00:08.000
on the configuration types,

5
00:00:08.000 --> 00:00:09.003
and I do want to just spent a moment

6
00:00:09.003 --> 00:00:12.007
and talk about some of those differences.

7
00:00:12.007 --> 00:00:16.000
This actually occurred during the instantiate bean

8
00:00:16.000 --> 00:00:20.002
and setters called phases, for the most part.

9
00:00:20.002 --> 00:00:24.001
With Java config, those two sections,

10
00:00:24.001 --> 00:00:26.004
the instantiation and the setters being called,

11
00:00:26.004 --> 00:00:28.000
or actually merged into one,

12
00:00:28.000 --> 00:00:29.009
and you do that with the method

13
00:00:29.009 --> 00:00:32.005
that you annotate with @Bean.

14
00:00:32.005 --> 00:00:35.005
So each one is executed in proper order still

15
00:00:35.005 --> 00:00:38.005
by the framework, but only the works specified

16
00:00:38.005 --> 00:00:40.008
within the @Bean method

17
00:00:40.008 --> 00:00:44.000
is executed during the Bean lifecycle.

18
00:00:44.000 --> 00:00:45.004
So as the bean's coming up,

19
00:00:45.004 --> 00:00:46.009
if you don't put it in that method,

20
00:00:46.009 --> 00:00:50.003
it doesn't get done, which is why those two steps

21
00:00:50.003 --> 00:00:54.006
are merged when you're dealing with Java configuration.

22
00:00:54.006 --> 00:00:59.005
Now autoconfiguration, instantiation of all beans

23
00:00:59.005 --> 00:01:01.007
are scanned, so everything is scanned

24
00:01:01.007 --> 00:01:04.009
in order to be instantiated.

25
00:01:04.009 --> 00:01:07.008
All constructors marked with @Autowired,

26
00:01:07.008 --> 00:01:09.007
with caveat that, when there's only one,

27
00:01:09.007 --> 00:01:12.003
it will automatically be called,

28
00:01:12.003 --> 00:01:14.003
then during setter injection,

29
00:01:14.003 --> 00:01:18.009
any fields or any methods that aren't setters,

30
00:01:18.009 --> 00:01:20.006
that are annotated with @Autowire,

31
00:01:20.006 --> 00:01:23.007
will get called during the setter part.

32
00:01:23.007 --> 00:01:26.001
Now, again, I want to talk about fields for just a moment,

33
00:01:26.001 --> 00:01:28.008
and I know it sounds a little bit like a soapbox,

34
00:01:28.008 --> 00:01:32.001
but you should not annotate fields with @Autowired,

35
00:01:32.001 --> 00:01:34.001
and there's lots of reasons for that,

36
00:01:34.001 --> 00:01:36.003
and you can go look at the main articles written

37
00:01:36.003 --> 00:01:39.002
by Spring designers and Spring contributors

38
00:01:39.002 --> 00:01:41.002
as to why that's bad.

39
00:01:41.002 --> 00:01:43.008
Now, XML configuration, we didn't talk much

40
00:01:43.008 --> 00:01:46.006
about it here, but it's important to note, again,

41
00:01:46.006 --> 00:01:50.000
that legacy applications may still be using it,

42
00:01:50.000 --> 00:01:51.007
and you may work on a team where XML

43
00:01:51.007 --> 00:01:54.002
is still the preferred methodology.

44
00:01:54.002 --> 00:01:57.001
In this case, instantiation of all beans

45
00:01:57.001 --> 00:02:00.004
and constructor arg injection occurs

46
00:02:00.004 --> 00:02:03.003
during the instantiation phase,

47
00:02:03.003 --> 00:02:06.004
then you have all property injection.

48
00:02:06.004 --> 00:02:07.008
So, when you're dealing with XML,

49
00:02:07.008 --> 00:02:10.005
you can have P and C values,

50
00:02:10.005 --> 00:02:13.005
so the P injection happens when setters are called,

51
00:02:13.005 --> 00:02:17.000
and the C injection happens during instantiation.

52
00:02:17.000 --> 00:02:19.005
So, those differences kind of make sense

53
00:02:19.005 --> 00:02:22.004
if you think about it from the perspective of a language.

54
00:02:22.004 --> 00:02:25.004
So with Java, you're handing classes that are already ready

55
00:02:25.004 --> 00:02:28.004
to the bean factory, with component scanning,

56
00:02:28.004 --> 00:02:31.003
it goes and figures out everything that needs to be loaded,

57
00:02:31.003 --> 00:02:33.003
calls instantiation and then setters,

58
00:02:33.003 --> 00:02:35.008
based on annotations, and with XML,

59
00:02:35.008 --> 00:02:38.001
you're telling it which ones to call,

60
00:02:38.001 --> 00:02:40.002
much like you did with Java config,

61
00:02:40.002 --> 00:02:41.009
but because you're not handing it classes,

62
00:02:41.009 --> 00:02:45.008
you're handing it XML, it can do it in the proper order,

63
00:02:45.008 --> 00:02:49.000
based on the lifecycle framework.

