WEBVTT
1
00:00:00.007 --> 00:00:03.006
- There's a concept in Spring of Bean Scopes

2
00:00:03.006 --> 00:00:06.006
that is very important to understand.

3
00:00:06.006 --> 00:00:10.000
Well they aren't used that often in normal practice,

4
00:00:10.000 --> 00:00:12.004
it is important to be exposed to them,

5
00:00:12.004 --> 00:00:14.000
so that you can use them

6
00:00:14.000 --> 00:00:16.007
whenever you may need to.

7
00:00:16.007 --> 00:00:20.006
The most common bean scope is the Singleton Scope.

8
00:00:20.006 --> 00:00:23.008
The singleton is the default scope of all beans

9
00:00:23.008 --> 00:00:26.008
defined for the application context.

10
00:00:26.008 --> 00:00:29.008
If you did not specify a specific scope,

11
00:00:29.008 --> 00:00:31.003
you get a singleton,

12
00:00:31.003 --> 00:00:36.005
you get one instance of the object per context definition.

13
00:00:36.005 --> 00:00:38.006
Now you can declare two beans

14
00:00:38.006 --> 00:00:41.003
of the same type in a context,

15
00:00:41.003 --> 00:00:46.001
but you have to do some work to get them injected properly

16
00:00:46.001 --> 00:00:47.002
and most often,

17
00:00:47.002 --> 00:00:51.000
this becomes very cumbersome and isn't recommended.

18
00:00:51.000 --> 00:00:54.005
One thing to be aware of as we previously mentioned,

19
00:00:54.005 --> 00:00:57.004
is that you need to be careful with state

20
00:00:57.004 --> 00:01:00.003
because you have one instance of the class

21
00:01:00.003 --> 00:01:03.004
all state essentially becomes available

22
00:01:03.004 --> 00:01:05.005
to all instances of the object

23
00:01:05.005 --> 00:01:07.009
so even though there's only one instance,

24
00:01:07.009 --> 00:01:10.007
every class that has it as a dependency

25
00:01:10.007 --> 00:01:13.008
could potentially have access to that state.

26
00:01:13.008 --> 00:01:15.002
Now I have run into some issues

27
00:01:15.002 --> 00:01:17.007
with this very thing more than once,

28
00:01:17.007 --> 00:01:20.008
especially early in my spring career.

29
00:01:20.008 --> 00:01:24.009
Keep in mind how state impacts behavior of methods,

30
00:01:24.009 --> 00:01:28.001
as some other thread may change your data,

31
00:01:28.001 --> 00:01:31.007
or you may change it for some other thread.

32
00:01:31.007 --> 00:01:33.001
Now the Prototype scope

33
00:01:33.001 --> 00:01:35.004
is the next one that we will discuss.

34
00:01:35.004 --> 00:01:39.008
A prototype bean is one that you get a new instance,

35
00:01:39.008 --> 00:01:41.009
every time it's referenced.

36
00:01:41.009 --> 00:01:43.008
This means that once the instance

37
00:01:43.008 --> 00:01:46.004
is no longer needed or referenced,

38
00:01:46.004 --> 00:01:49.006
it becomes available for garbage collection.

39
00:01:49.006 --> 00:01:51.006
A definition of the prototype

40
00:01:51.006 --> 00:01:54.006
is stored in the IoC container.

41
00:01:54.006 --> 00:01:56.003
When instance is needed

42
00:01:56.003 --> 00:01:59.008
it is created based on the definition

43
00:01:59.008 --> 00:02:02.001
Spring then hands that instance over

44
00:02:02.001 --> 00:02:04.009
and releases its own handle.

45
00:02:04.009 --> 00:02:07.002
A prototype bean is never stored

46
00:02:07.002 --> 00:02:10.009
as an instantiated object in the IoC container.

47
00:02:10.009 --> 00:02:14.008
These bean types are very useful for transient data,

48
00:02:14.008 --> 00:02:19.000
or interface types that can flex based on application state,

49
00:02:19.000 --> 00:02:22.005
which is how I've used them almost exclusively.

50
00:02:22.005 --> 00:02:26.009
Now Session beans are very similar to prototype beans,

51
00:02:26.009 --> 00:02:29.008
they only apply however in web environments

52
00:02:29.008 --> 00:02:32.007
as you might guess by the name,

53
00:02:32.007 --> 00:02:34.007
you get one instance of the bean

54
00:02:34.007 --> 00:02:36.007
per user session

55
00:02:36.007 --> 00:02:40.000
this allows you to keep session data separate

56
00:02:40.000 --> 00:02:42.007
from other sessions when needed

57
00:02:42.007 --> 00:02:44.006
and like a prototype bean

58
00:02:44.006 --> 00:02:47.008
the definition is stored in the IoC container,

59
00:02:47.008 --> 00:02:50.006
but the instance itself is never stored,

60
00:02:50.006 --> 00:02:52.004
and when the session goes out of scope,

61
00:02:52.004 --> 00:02:56.001
that bean is available for garbage collection.

62
00:02:56.001 --> 00:02:57.009
The final scope that we're going to talk about

63
00:02:57.009 --> 00:03:00.001
is Request Scope Beans,

64
00:03:00.001 --> 00:03:02.000
which are very similar to session

65
00:03:02.000 --> 00:03:04.004
and prototype scoped beans.

66
00:03:04.004 --> 00:03:07.003
Once again these only apply to web environments

67
00:03:07.003 --> 00:03:10.006
and you might again guess that from the name,

68
00:03:10.006 --> 00:03:12.002
you get one instance of the bean

69
00:03:12.002 --> 00:03:15.000
per request into the application,

70
00:03:15.000 --> 00:03:17.004
so instead of session which is multiple requests

71
00:03:17.004 --> 00:03:18.006
and responses,

72
00:03:18.006 --> 00:03:21.003
this is one per request

73
00:03:21.003 --> 00:03:24.001
and the definition is once again stored

74
00:03:24.001 --> 00:03:25.008
in the IoC container,

75
00:03:25.008 --> 00:03:27.004
but the instance is not

76
00:03:27.004 --> 00:03:29.007
and once that request is done,

77
00:03:29.007 --> 00:03:34.000
that class is available for garbage collection.

