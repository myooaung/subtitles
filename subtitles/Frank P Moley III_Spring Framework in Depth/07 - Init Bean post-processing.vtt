WEBVTT
1
00:00:00.008 --> 00:00:02.005
- [Narrator] In our IoC Container,

2
00:00:02.005 --> 00:00:06.007
we have fully baked objects that are almost ready for use.

3
00:00:06.007 --> 00:00:09.007
We now enter the bean post-processing section

4
00:00:09.007 --> 00:00:10.009
of the life cycle,

5
00:00:10.009 --> 00:00:15.009
which is three distinct steps, but we discuss them as one.

6
00:00:15.009 --> 00:00:19.000
So, where we are is, we're now at the last three steps

7
00:00:19.000 --> 00:00:20.004
of the forage bean.

8
00:00:20.004 --> 00:00:23.009
So, we've got pre-init bean post processors,

9
00:00:23.009 --> 00:00:26.005
posting it, bean post processors,

10
00:00:26.005 --> 00:00:29.007
and right in the middle is our initializer.

11
00:00:29.007 --> 00:00:33.000
Let's talk a little bit about being post-processing.

12
00:00:33.000 --> 00:00:36.008
This is the final point of configuration manipulation.

13
00:00:36.008 --> 00:00:40.008
This is our last opportunity to do work on the beans

14
00:00:40.008 --> 00:00:44.006
themselves before they are served to a running application.

15
00:00:44.006 --> 00:00:48.006
Each bean may have additional behaviors added during

16
00:00:48.006 --> 00:00:51.006
the bean post-processing event.

17
00:00:51.006 --> 00:00:53.009
There are two types of extensible

18
00:00:53.009 --> 00:00:57.000
and generic processing before

19
00:00:57.000 --> 00:00:59.009
and after initializer.

20
00:00:59.009 --> 00:01:03.009
The initializer, we've actually already seen this is

21
00:01:03.009 --> 00:01:07.004
the second bean post-processor action.

22
00:01:07.004 --> 00:01:10.001
So again, we've got pre-initializer, then initializer,

23
00:01:10.001 --> 00:01:12.001
then post initializer.

24
00:01:12.001 --> 00:01:14.004
This is a very special case.

25
00:01:14.004 --> 00:01:17.007
Methods annotated with @PostConstruct,

26
00:01:17.007 --> 00:01:19.003
which is one of those lifecycle methods

27
00:01:19.003 --> 00:01:22.001
that we saw are called here.

28
00:01:22.001 --> 00:01:25.002
So, spring has basically done everything it needs

29
00:01:25.002 --> 00:01:28.005
to do for you to use this being at this point.

30
00:01:28.005 --> 00:01:31.001
So, you can now call PostConstruct,

31
00:01:31.001 --> 00:01:32.007
but you're still not in the use phase.

32
00:01:32.007 --> 00:01:35.007
And that's how that PostConstruct works in order

33
00:01:35.007 --> 00:01:38.006
to allow you to use spring, but be guarantee

34
00:01:38.006 --> 00:01:40.006
that the application won't be available

35
00:01:40.006 --> 00:01:42.008
for others to consume.

36
00:01:42.008 --> 00:01:46.006
And the framework actually provides many initializers.

37
00:01:46.006 --> 00:01:48.003
There's many things that could happen during

38
00:01:48.003 --> 00:01:51.001
this initialization phase, not just the ones

39
00:01:51.001 --> 00:01:55.002
that you marked with @PostConstruct.

40
00:01:55.002 --> 00:01:58.003
Now, the bean post-processor interface

41
00:01:58.003 --> 00:02:00.002
is what you would use to do the pre

42
00:02:00.002 --> 00:02:03.001
or post initializer steps.

43
00:02:03.001 --> 00:02:07.003
This interface allows you to inject common behavior

44
00:02:07.003 --> 00:02:09.005
to a class of beans, and when I say,

45
00:02:09.005 --> 00:02:11.004
class of beans like that,

46
00:02:11.004 --> 00:02:13.003
what I'm referring to is you can have

47
00:02:13.003 --> 00:02:17.002
the bean post-process or qualify uncertain bean types based

48
00:02:17.002 --> 00:02:21.003
on criteria and then add their behavior.

49
00:02:21.003 --> 00:02:24.002
This still operate on specific beans,

50
00:02:24.002 --> 00:02:27.001
so it's not applying to the entire bean factory,

51
00:02:27.001 --> 00:02:29.006
it's on specific beans.

52
00:02:29.006 --> 00:02:31.005
And there are two types there's before

53
00:02:31.005 --> 00:02:34.004
and after initializers we've already talked about,

54
00:02:34.004 --> 00:02:37.006
and once again, the framework leverages lots of these

55
00:02:37.006 --> 00:02:39.007
and a lot of proxies are built during

56
00:02:39.007 --> 00:02:42.008
this pre-phase especially.

57
00:02:42.008 --> 00:02:45.002
Now, when this phase is complete,

58
00:02:45.002 --> 00:02:49.002
your beans have been instantiated and initialized.

59
00:02:49.002 --> 00:02:52.008
Dependencies have been fully injected into any constructor

60
00:02:52.008 --> 00:02:56.003
and any method annotated with that auto wire,

61
00:02:56.003 --> 00:03:00.001
any setter methods specifically, beans are ready.

62
00:03:00.001 --> 00:03:02.004
So, post-construction has been called proxies

63
00:03:02.004 --> 00:03:03.005
have been added.

64
00:03:03.005 --> 00:03:07.003
All of the customization that you do to the framework have

65
00:03:07.003 --> 00:03:09.000
also been done at this point.

66
00:03:09.000 --> 00:03:12.002
And now you're ready to use your application.

67
00:03:12.002 --> 00:03:14.008
And that really is pretty powerful that amount

68
00:03:14.008 --> 00:03:19.003
of work happens in a second or two in a running application

69
00:03:19.003 --> 00:03:20.009
because this allows your application

70
00:03:20.009 --> 00:03:25.000
to operate more efficiently at runtime.

