WEBVTT
1
00:00:00.006 --> 00:00:01.008
- [Instructor] One of the coolest features

2
00:00:01.008 --> 00:00:03.006
with Spring in my opinion

3
00:00:03.006 --> 00:00:06.002
is how easy it is to leverage aspects

4
00:00:06.002 --> 00:00:10.003
to add global behavior to your application.

5
00:00:10.003 --> 00:00:13.004
Let's talk a little bit about what aspects are.

6
00:00:13.004 --> 00:00:16.001
Essentially, they're reusable blocks of code

7
00:00:16.001 --> 00:00:21.002
that you can inject into your application at runtime.

8
00:00:21.002 --> 00:00:24.008
These are very powerful tools for adding behavior,

9
00:00:24.008 --> 00:00:29.006
especially behavior that applies to cross-cutting concerns,

10
00:00:29.006 --> 00:00:31.008
because you can write the code in one spot

11
00:00:31.008 --> 00:00:35.007
and automatically apply it to many locations

12
00:00:35.007 --> 00:00:38.003
throughout your application.

13
00:00:38.003 --> 00:00:42.005
So what are some of the common applications of aspects

14
00:00:42.005 --> 00:00:45.000
in modern application development?

15
00:00:45.000 --> 00:00:46.009
First and foremost is logging.

16
00:00:46.009 --> 00:00:50.001
Everybody needs logging, needs metrics, needs tracing,

17
00:00:50.001 --> 00:00:53.003
and I'm kind of wrapping these up into one block.

18
00:00:53.003 --> 00:00:57.000
And this allows you to apply a default set of rules

19
00:00:57.000 --> 00:01:00.000
to every method or a subset of methods

20
00:01:00.000 --> 00:01:03.009
based on whatever your criteria may be.

21
00:01:03.009 --> 00:01:06.005
Transaction management is another common use

22
00:01:06.005 --> 00:01:09.009
of aspects across the applications base,

23
00:01:09.009 --> 00:01:13.004
and in fact, Spring provides an aspect for you

24
00:01:13.004 --> 00:01:16.008
at transactional to do this work.

25
00:01:16.008 --> 00:01:19.008
And it's an aspect that's applied on top of an adaptation,

26
00:01:19.008 --> 00:01:22.006
which in my opinion, is the easiest way

27
00:01:22.006 --> 00:01:25.008
to implement an aspect in the Spring world.

28
00:01:25.008 --> 00:01:30.001
Caching is another very useful opportunity for aspects.

29
00:01:30.001 --> 00:01:33.007
And again, Spring provides an annotation to do this.

30
00:01:33.007 --> 00:01:35.006
But I find that sometimes that I like

31
00:01:35.006 --> 00:01:39.001
to have my own custom caching app behavior,

32
00:01:39.001 --> 00:01:42.003
so I often have written my own in certain use cases

33
00:01:42.003 --> 00:01:44.007
where I've needed to abstract caching

34
00:01:44.007 --> 00:01:48.007
across a broad swath of applications.

35
00:01:48.007 --> 00:01:51.006
And how can we stop without talking about security?

36
00:01:51.006 --> 00:01:52.008
Security is one of those things

37
00:01:52.008 --> 00:01:54.007
that gets applied all over the place,

38
00:01:54.007 --> 00:01:56.007
but it's a pain to write.

39
00:01:56.007 --> 00:01:59.002
So by using aspects for security things

40
00:01:59.002 --> 00:02:01.001
like encryption and decryption

41
00:02:01.001 --> 00:02:03.005
and transformation and hashing

42
00:02:03.005 --> 00:02:05.008
and logging security events,

43
00:02:05.008 --> 00:02:08.006
which kind of crosses a little bit of the boundary there.

44
00:02:08.006 --> 00:02:10.001
But by doing that with an aspect,

45
00:02:10.001 --> 00:02:13.004
we can apply everywhere and right at once.

46
00:02:13.004 --> 00:02:14.008
Which alludes us to why.

47
00:02:14.008 --> 00:02:17.002
So, imagine a logging routine

48
00:02:17.002 --> 00:02:19.008
that applies to every service method.

49
00:02:19.008 --> 00:02:24.009
Now, if you do this in code every single time,

50
00:02:24.009 --> 00:02:26.007
you've got code duplication.

51
00:02:26.007 --> 00:02:29.009
And we have this method of DRY, or don't repeat yourself,

52
00:02:29.009 --> 00:02:33.003
that we'd be violating if we did this logging routine

53
00:02:33.003 --> 00:02:35.003
in every service method.

54
00:02:35.003 --> 00:02:37.007
You're also kind of mixing concerns in this case.

55
00:02:37.007 --> 00:02:38.008
You have a service method

56
00:02:38.008 --> 00:02:40.009
that's doing some business functionality,

57
00:02:40.009 --> 00:02:43.001
and we have to break out of the business functionality

58
00:02:43.001 --> 00:02:46.006
to apply a logging routine, when in reality,

59
00:02:46.006 --> 00:02:50.004
we should just be maintaining our application logic.

60
00:02:50.004 --> 00:02:53.007
And by using aspects, we can apply the logging routine

61
00:02:53.007 --> 00:02:57.000
without it ever being in our code.

62
00:02:57.000 --> 00:03:00.003
So let's talk about how Spring uses aspecting.

63
00:03:00.003 --> 00:03:02.008
So, first and foremost it's AspectJ-based.

64
00:03:02.008 --> 00:03:06.001
They use AspectJ for all of their aspecting.

65
00:03:06.001 --> 00:03:08.000
They do byte code modification,

66
00:03:08.000 --> 00:03:10.004
which is run time interweaving.

67
00:03:10.004 --> 00:03:14.004
AspectJ actually has a lot more ways of doing aspects,

68
00:03:14.004 --> 00:03:16.007
including compile time interweaving,

69
00:03:16.007 --> 00:03:19.009
but Spring does it through run time interweaving.

70
00:03:19.009 --> 00:03:21.008
It's all dynamic proxy-based.

71
00:03:21.008 --> 00:03:23.008
So remember, Spring is all proxy-based.

72
00:03:23.008 --> 00:03:25.003
There's a reason for that.

73
00:03:25.003 --> 00:03:28.003
It's cause a lot of its behavior is done through aspects.

74
00:03:28.003 --> 00:03:31.001
So, Spring aspects should behave the same

75
00:03:31.001 --> 00:03:33.003
as every other proxy within the system.

76
00:03:33.003 --> 00:03:37.000
They're dynamic proxy-based aspects.

77
00:03:37.000 --> 00:03:38.008
There are several things that we need to talk about

78
00:03:38.008 --> 00:03:41.001
from a terminology perspective

79
00:03:41.001 --> 00:03:44.009
when dealing with an aspect, especially a Spring aspect.

80
00:03:44.009 --> 00:03:46.009
First and foremost is a join point,

81
00:03:46.009 --> 00:03:49.007
and this is the spot in the execution of code

82
00:03:49.007 --> 00:03:53.008
where a cross-cutting concern can be applied.

83
00:03:53.008 --> 00:03:57.002
This is in your code, and it's not your aspect code,

84
00:03:57.002 --> 00:03:59.007
this is in your business logic.

85
00:03:59.007 --> 00:04:05.008
A pointcut is a routine used as the selection criteria

86
00:04:05.008 --> 00:04:11.006
to select the join point to apply that crosscutting concern.

87
00:04:11.006 --> 00:04:13.001
Those two can get mixed up a lot.

88
00:04:13.001 --> 00:04:15.004
So a join point is your code.

89
00:04:15.004 --> 00:04:18.007
The pointcut is what selects your code.

90
00:04:18.007 --> 00:04:22.005
The advice is the code that is then applied

91
00:04:22.005 --> 00:04:26.008
to the join point when selected by the pointcut.

92
00:04:26.008 --> 00:04:27.007
This is the code

93
00:04:27.007 --> 00:04:31.002
that applies the crosscutting concern logic.

94
00:04:31.002 --> 00:04:35.007
So, that logging routine would be executed in advice

95
00:04:35.007 --> 00:04:39.004
that is selected by a pointcut to a join point

96
00:04:39.004 --> 00:04:42.000
that is your application code.

97
00:04:42.000 --> 00:04:44.002
And an aspect in Spring is the entire package.

98
00:04:44.002 --> 00:04:46.006
So it's all of this, it's the advice and the pointcut

99
00:04:46.006 --> 00:04:48.006
and ultimately the join point

100
00:04:48.006 --> 00:04:51.000
that that advice is applied to.

