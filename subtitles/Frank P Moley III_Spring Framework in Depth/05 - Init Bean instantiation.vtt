WEBVTT
1
00:00:00.007 --> 00:00:02.008
- So, as promised, we're now going to start

2
00:00:02.008 --> 00:00:05.003
taking a look at actions that are taken

3
00:00:05.003 --> 00:00:09.000
on each individual bean in the factory

4
00:00:09.000 --> 00:00:11.007
with the instantiation phase.

5
00:00:11.007 --> 00:00:13.003
So once again, back to our big chart.

6
00:00:13.003 --> 00:00:15.009
So the entire bean factory's been processed.

7
00:00:15.009 --> 00:00:18.006
We're now going to iterate over each bean individually

8
00:00:18.006 --> 00:00:21.000
and do the work that is necessary

9
00:00:21.000 --> 00:00:23.008
following these steps.

10
00:00:23.008 --> 00:00:25.008
So, we're going to construct some objects

11
00:00:25.008 --> 00:00:28.004
and let's talk about what that means.

12
00:00:28.004 --> 00:00:31.004
So beans are instantiation in the factory

13
00:00:31.004 --> 00:00:33.000
using the constructors.

14
00:00:33.000 --> 00:00:35.005
Of course, you have to construct an object

15
00:00:35.005 --> 00:00:39.000
using a constructor in the Java programming language.

16
00:00:39.000 --> 00:00:40.004
Now the most important thing

17
00:00:40.004 --> 00:00:42.006
and something that we alluded to earlier,

18
00:00:42.006 --> 00:00:45.000
is that these are done in the correct order

19
00:00:45.000 --> 00:00:49.008
to insure that dependencies are always created first.

20
00:00:49.008 --> 00:00:52.008
So classes that have the most dependencies

21
00:00:52.008 --> 00:00:55.007
are going to actually be done towards the end

22
00:00:55.007 --> 00:00:57.002
because they've got to have everything else

23
00:00:57.002 --> 00:01:00.009
created for them before they are created.

24
00:01:00.009 --> 00:01:03.005
The handle to the class instance remains

25
00:01:03.005 --> 00:01:06.003
in the bean factory for the lifecycle

26
00:01:06.003 --> 00:01:08.009
of the application for singletons.

27
00:01:08.009 --> 00:01:12.002
Again, this only applies to singletons at this point.

28
00:01:12.002 --> 00:01:14.002
Anything other than a singleton bean

29
00:01:14.002 --> 00:01:16.008
will not actually be constructed

30
00:01:16.008 --> 00:01:18.007
because they're prototypes or sessions

31
00:01:18.007 --> 00:01:21.001
that have very specific use cases

32
00:01:21.001 --> 00:01:23.001
that we will discuss.

33
00:01:23.001 --> 00:01:26.006
Now there is a concept of Eager versus Lazy

34
00:01:26.006 --> 00:01:28.004
construction of beans.

35
00:01:28.004 --> 00:01:33.006
By default, all beans are instantiated eagerly.

36
00:01:33.006 --> 00:01:34.007
All beans

37
00:01:34.007 --> 00:01:36.000
instantiated eagerly.

38
00:01:36.000 --> 00:01:37.007
That's important to note

39
00:01:37.007 --> 00:01:40.003
because to truly be a lazy bean,

40
00:01:40.003 --> 00:01:43.004
there can be nothing that depends on them.

41
00:01:43.004 --> 00:01:45.006
And the reality is, most of the time

42
00:01:45.006 --> 00:01:48.001
we're trying to save a little bitta RAM at runtime

43
00:01:48.001 --> 00:01:51.003
and none of this really matters from that perspective

44
00:01:51.003 --> 00:01:54.007
on most modern systems, but a bean to be lazy,

45
00:01:54.007 --> 00:01:55.008
it can't have anything dependent on it

46
00:01:55.008 --> 00:01:57.009
because otherwise it has to be constructed first,

47
00:01:57.009 --> 00:01:59.005
and that just makes sense.

48
00:01:59.005 --> 00:02:03.008
Now lazy beans you can specify a bean as lazy,

49
00:02:03.008 --> 00:02:06.006
but the ApplicationContext reserves the right

50
00:02:06.006 --> 00:02:08.008
to ignore it, and often it will.

51
00:02:08.008 --> 00:02:10.006
So even though you may mark a bean as lazy

52
00:02:10.006 --> 00:02:12.007
it may still be constructed

53
00:02:12.007 --> 00:02:15.003
because the ApplicationContext doesn't have to

54
00:02:15.003 --> 00:02:17.003
really follow those rules

55
00:02:17.003 --> 00:02:19.005
and it may have a reason for doing so,

56
00:02:19.005 --> 00:02:23.000
specifically that there's some unintended consequence

57
00:02:23.000 --> 00:02:25.001
of not constructing it.

58
00:02:25.001 --> 00:02:28.002
So, when this phase is complete,

59
00:02:28.002 --> 00:02:31.009
the bean pointer is still referenced in the BeanFactory.

60
00:02:31.009 --> 00:02:33.008
And that's going to remain unchanged.

61
00:02:33.008 --> 00:02:35.003
Objects have been constructed

62
00:02:35.003 --> 00:02:37.001
but they're not ready for use.

63
00:02:37.001 --> 00:02:40.002
So even though we have objects in the BeanFactory,

64
00:02:40.002 --> 00:02:41.009
we can't use 'em, we can't play with 'em,

65
00:02:41.009 --> 00:02:43.002
and that's by design.

66
00:02:43.002 --> 00:02:46.004
And we're going to talk about what happens afterwards

67
00:02:46.004 --> 00:02:47.006
that's really critical to know

68
00:02:47.006 --> 00:02:49.001
because we talked a little bit ago

69
00:02:49.001 --> 00:02:50.006
about lifecycle methods

70
00:02:50.006 --> 00:02:52.001
and those are going to come into play.

71
00:02:52.001 --> 00:02:54.009
So that's how we can still hold this handle

72
00:02:54.009 --> 00:02:56.004
to the lifecycle starting up

73
00:02:56.004 --> 00:03:00.000
but not let the application fully run.

