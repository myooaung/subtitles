WEBVTT
1
00:00:00.001 --> 00:00:05.008
(upbeat music)

2
00:00:05.008 --> 00:00:07.006
- [Instructor] Now that you have had your chance,

3
00:00:07.006 --> 00:00:09.009
it's time forme to show you my solution

4
00:00:09.009 --> 00:00:12.006
to this challenge exercise.

5
00:00:12.006 --> 00:00:16.006
I choose to solve this aspect through an annotation.

6
00:00:16.006 --> 00:00:19.005
I created an annotation called countable

7
00:00:19.005 --> 00:00:23.004
and I created a corresponding aspect for it.

8
00:00:23.004 --> 00:00:26.007
So, I created a logger called LIL Application Counter

9
00:00:26.007 --> 00:00:29.004
for LinkedIn Learning Application Counter.

10
00:00:29.004 --> 00:00:32.006
I created an internal map element aspect

11
00:00:32.006 --> 00:00:36.006
to hold both the method name and an integer

12
00:00:36.006 --> 00:00:38.004
for the number of times it was counted.

13
00:00:38.004 --> 00:00:40.005
And that's on line 20.

14
00:00:40.005 --> 00:00:42.001
I then created my point cut,

15
00:00:42.001 --> 00:00:46.001
which looked for that annotation countable on line 22.

16
00:00:46.001 --> 00:00:48.008
Then, I went ahead and did a before on this one

17
00:00:48.008 --> 00:00:51.006
because all I care about is that the method was called.

18
00:00:51.006 --> 00:00:53.009
There was no requirements about that it returned,

19
00:00:53.009 --> 00:00:54.008
it returned data.

20
00:00:54.008 --> 00:00:56.000
None of that mattered.

21
00:00:56.000 --> 00:00:59.001
So, what I care about is that it was called.

22
00:00:59.001 --> 00:01:01.006
And I just want to simply get the name of it.

23
00:01:01.006 --> 00:01:03.008
And I'm building the name in such a way

24
00:01:03.008 --> 00:01:05.004
that it's fully qualified.

25
00:01:05.004 --> 00:01:07.002
So, I'm going to get the package name

26
00:01:07.002 --> 00:01:09.000
as well as the class name.

27
00:01:09.000 --> 00:01:12.003
And then, I'm going to take that and increment a counter,

28
00:01:12.003 --> 00:01:13.008
if I've already reseen it.

29
00:01:13.008 --> 00:01:16.009
If I haven't seen it, I will create a new one in the map

30
00:01:16.009 --> 00:01:18.006
and set it to one.

31
00:01:18.006 --> 00:01:21.005
And then, I go ahead and output it at the end

32
00:01:21.005 --> 00:01:23.006
by iterating over that map.

33
00:01:23.006 --> 00:01:28.008
So, let's put this one in action.

34
00:01:28.008 --> 00:01:31.005
Got a little bit more data here this time.

35
00:01:31.005 --> 00:01:34.009
So, the first call came through, and I got three responses.

36
00:01:34.009 --> 00:01:37.006
The second call came through, I also got three.

37
00:01:37.006 --> 00:01:40.007
I didn't mention that I put this on every single method

38
00:01:40.007 --> 00:01:42.007
in our base call stack here.

39
00:01:42.007 --> 00:01:46.002
That way, I can see them all incrementing every single time.

40
00:01:46.002 --> 00:01:47.007
And while that's doing, let's take a look

41
00:01:47.007 --> 00:01:49.003
at the first set of lines here.

42
00:01:49.003 --> 00:01:53.001
So, the first line that comes in the output,

43
00:01:53.001 --> 00:01:56.004
says that generated output was called one time.

44
00:01:56.004 --> 00:01:57.007
Then we run through it again,

45
00:01:57.007 --> 00:02:01.003
and we see that get current time was executed one time

46
00:02:01.003 --> 00:02:03.007
and generate output was executed one time.

47
00:02:03.007 --> 00:02:05.008
So, that call stack is starting to build

48
00:02:05.008 --> 00:02:07.007
and we can determine that

49
00:02:07.007 --> 00:02:10.006
because we know the structure of our code.

50
00:02:10.006 --> 00:02:13.000
The third line here, you'll see that the greeting,

51
00:02:13.000 --> 00:02:16.009
the output, and the current time, were all executed.

52
00:02:16.009 --> 00:02:19.005
And then, we see that same pattern repeated

53
00:02:19.005 --> 00:02:23.008
over and over and over again until our application closes.

54
00:02:23.008 --> 00:02:25.008
So, I have two aspects running.

55
00:02:25.008 --> 00:02:27.001
I've got my counter aspect

56
00:02:27.001 --> 00:02:29.001
and I've got the original logging aspect.

57
00:02:29.001 --> 00:02:33.001
And all of that was done with a before advice

58
00:02:33.001 --> 00:02:36.000
executing on an annotation based point cat

59
00:02:36.000 --> 00:02:37.008
that's hitting a joined point

60
00:02:37.008 --> 00:02:41.000
that I've annotated throughout my service classes.

