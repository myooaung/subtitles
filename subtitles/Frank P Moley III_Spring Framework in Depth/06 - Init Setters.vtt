WEBVTT
1
00:00:00.007 --> 00:00:02.008
- [Instructor] So after objects are constructed,

2
00:00:02.008 --> 00:00:04.007
we can now call setters on them,

3
00:00:04.007 --> 00:00:07.009
and that is what the Spring framework does next.

4
00:00:07.009 --> 00:00:09.003
So again, back to where we are.

5
00:00:09.003 --> 00:00:11.002
So we've instantiated our beans,

6
00:00:11.002 --> 00:00:14.008
and now we're ready to do setter calling.

7
00:00:14.008 --> 00:00:18.006
So, post-initialization dependency injection

8
00:00:18.006 --> 00:00:22.000
should only be done on optional beans or dynamic beans,

9
00:00:22.000 --> 00:00:24.007
and that's really important to remember that concept.

10
00:00:24.007 --> 00:00:27.007
Anything that is required for your class to operate

11
00:00:27.007 --> 00:00:30.008
should have been injected via a constructor.

12
00:00:30.008 --> 00:00:33.002
Now there's no way for the application context

13
00:00:33.002 --> 00:00:36.007
in the IOC container to know which is which.

14
00:00:36.007 --> 00:00:39.009
This is is just good development practice.

15
00:00:39.009 --> 00:00:43.002
So after all beans have been instantiated,

16
00:00:43.002 --> 00:00:45.007
we can go through and call the setter on each object,

17
00:00:45.007 --> 00:00:48.004
which, go back to object-orient programming

18
00:00:48.004 --> 00:00:50.003
and working with Java, right, you have to construct

19
00:00:50.003 --> 00:00:54.002
the object to call any methods on it including setters.

20
00:00:54.002 --> 00:00:58.003
Autowiring will occur here on all methods

21
00:00:58.003 --> 00:00:59.008
that are not constructors

22
00:00:59.008 --> 00:01:02.002
that have the autowiring annotation,

23
00:01:02.002 --> 00:01:06.000
and if you're using anything other than JavaConfig,

24
00:01:06.000 --> 00:01:07.002
this is the only way to do it,

25
00:01:07.002 --> 00:01:11.005
you have to use autowiring to get that to occur.

26
00:01:11.005 --> 00:01:13.008
JavaConfig, of course, behaves differently,

27
00:01:13.008 --> 00:01:16.005
and we're going to talk a little bit more about that in depth,

28
00:01:16.005 --> 00:01:18.000
but if you think about it, it makes sense,

29
00:01:18.000 --> 00:01:21.002
because when you create a bean with JavaConfig,

30
00:01:21.002 --> 00:01:24.001
you do everything you need to that class

31
00:01:24.001 --> 00:01:26.002
in the definition of the bean itself

32
00:01:26.002 --> 00:01:29.003
including calling setters.

33
00:01:29.003 --> 00:01:31.002
Now when this phase is complete,

34
00:01:31.002 --> 00:01:34.004
our beans are fully initialized.

35
00:01:34.004 --> 00:01:37.005
All dependencies, all of our initial dependencies

36
00:01:37.005 --> 00:01:40.005
have been injected at this point.

37
00:01:40.005 --> 00:01:43.005
However, beans are still not ready for use.

38
00:01:43.005 --> 00:01:45.003
Though technically, they could be used,

39
00:01:45.003 --> 00:01:47.009
Spring does not allow you to use them yet

40
00:01:47.009 --> 00:01:49.007
because there's still some opportunity

41
00:01:49.007 --> 00:01:51.004
for you to do work on them,

42
00:01:51.004 --> 00:01:54.000
and we're going to talk about that next.

