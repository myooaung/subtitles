WEBVTT
1
00:00:00.002 --> 00:00:02.002
- [Instructor] So we've seen the Before

2
00:00:02.002 --> 00:00:03.009
and we've seen the After Returning

3
00:00:03.009 --> 00:00:06.008
and we talked a little bit about the After Throwing.

4
00:00:06.008 --> 00:00:09.000
So now we're going to take a look at the Around Advice,

5
00:00:09.000 --> 00:00:11.006
which is the one that I use most often

6
00:00:11.006 --> 00:00:14.001
because this gives me the most flexibility

7
00:00:14.001 --> 00:00:17.005
as well as controls a lot of various situations.

8
00:00:17.005 --> 00:00:20.001
And the reality is often when I'm applying Advice,

9
00:00:20.001 --> 00:00:23.001
I need the preconditions as well as postconditions.

10
00:00:23.001 --> 00:00:26.004
And a lot of times I put timing in there as well,

11
00:00:26.004 --> 00:00:30.004
to get some concept of how long that method took to execute.

12
00:00:30.004 --> 00:00:34.001
So let's take a look at implementing an Around Advice.

13
00:00:34.001 --> 00:00:38.001
All right, so let's jump back into our logging aspect

14
00:00:38.001 --> 00:00:43.006
and let's change this to @Around.

15
00:00:43.006 --> 00:00:50.003
And in doing so, we'll get rid of the returning statements.

16
00:00:50.003 --> 00:00:52.000
Now when you are doing this,

17
00:00:52.000 --> 00:00:54.006
you need to do a couple things different.

18
00:00:54.006 --> 00:00:56.000
You can no longer return a void,

19
00:00:56.000 --> 00:00:59.004
you need to return an object

20
00:00:59.004 --> 00:01:01.006
and it's no longer just a join point,

21
00:01:01.006 --> 00:01:08.007
now it is a proceeding join point.

22
00:01:08.007 --> 00:01:11.006
As I said, a lot of times I do some timing here.

23
00:01:11.006 --> 00:01:14.008
So let's go ahead and do that.

24
00:01:14.008 --> 00:01:19.007
We will do a start time

25
00:01:19.007 --> 00:01:20.009
and we'll set that equal to

26
00:01:20.009 --> 00:01:27.006
system.current time in milliseconds.

27
00:01:27.006 --> 00:01:32.002
We'll go ahead and leave most of this code the same.

28
00:01:32.002 --> 00:01:37.000
Think maybe we'll do an object return value

29
00:01:37.000 --> 00:01:42.000
equals join points.proceed.

30
00:01:42.000 --> 00:01:46.000
Now proceed can expose a throwable.

31
00:01:46.000 --> 00:01:49.000
So add that to our method signature.

32
00:01:49.000 --> 00:01:51.006
And once again we have access to a return value

33
00:01:51.006 --> 00:01:54.002
that we used in our logging,

34
00:01:54.002 --> 00:01:57.001
but we also have this proceed.

35
00:01:57.001 --> 00:01:58.009
So what's going on here is

36
00:01:58.009 --> 00:02:01.008
everything prior to the proceed being called

37
00:02:01.008 --> 00:02:05.004
is executed before the join point.

38
00:02:05.004 --> 00:02:08.000
Once proceed is called, we get a return value,

39
00:02:08.000 --> 00:02:10.005
which is the method's return value

40
00:02:10.005 --> 00:02:15.008
and everything after that is executed after,

41
00:02:15.008 --> 00:02:18.006
including the throwable.

42
00:02:18.006 --> 00:02:22.002
Because if after returns an exception,

43
00:02:22.002 --> 00:02:24.005
throwable will get returned.

44
00:02:24.005 --> 00:02:27.008
So I can now wrap this with a try/catch block.

45
00:02:27.008 --> 00:02:31.002
So with the Around, I can handle anything before,

46
00:02:31.002 --> 00:02:36.005
anything after returning and anything after throwing.

47
00:02:36.005 --> 00:02:42.007
So let's add a little bit more data here to our log message.

48
00:02:42.007 --> 00:02:47.000
So after we get the name of our method,

49
00:02:47.000 --> 00:02:53.000
let's do a message.append.

50
00:02:53.000 --> 00:03:01.004
Total time and we will set that equal to

51
00:03:01.004 --> 00:03:11.000
appending total time and then append NOLA seconds.

52
00:03:11.000 --> 00:03:12.008
But our total time has to be set.

53
00:03:12.008 --> 00:03:16.009
So let's set that after the proceed returns.

54
00:03:16.009 --> 00:03:20.003
That way we can be much more specific.

55
00:03:20.003 --> 00:03:27.006
So total time equals system.current time in milliseconds,

56
00:03:27.006 --> 00:03:31.003
minus start time.

57
00:03:31.003 --> 00:03:34.007
Okay, one more thing to do and that is to return.

58
00:03:34.007 --> 00:03:37.008
So because we've wrapped this method,

59
00:03:37.008 --> 00:03:40.005
we need to now specify that we want the return value

60
00:03:40.005 --> 00:03:42.003
to go ahead and return.

61
00:03:42.003 --> 00:03:44.007
So again, the try/catch can catch the exception,

62
00:03:44.007 --> 00:03:46.007
but we got to send it back out.

63
00:03:46.007 --> 00:03:51.009
So everything is now done, let's run our application.

64
00:03:51.009 --> 00:03:54.007
And you will see that the first execution,

65
00:03:54.007 --> 00:03:57.002
took 14 milliseconds.

66
00:03:57.002 --> 00:04:01.001
The second one took zero, the third one also takes zero

67
00:04:01.001 --> 00:04:04.000
and that probably has to do with setting up the strings

68
00:04:04.000 --> 00:04:06.005
and doing some things like that on the first time,

69
00:04:06.005 --> 00:04:09.000
which is why it took just a touch longer.

70
00:04:09.000 --> 00:04:12.003
But what we've done here is we've gotten data out

71
00:04:12.003 --> 00:04:14.006
because this method didn't get used higher up,

72
00:04:14.006 --> 00:04:17.006
so the data was returned in order to print the message,

73
00:04:17.006 --> 00:04:18.009
Howdy Partner.

74
00:04:18.009 --> 00:04:21.006
We've gotten the method name, the arguments,

75
00:04:21.006 --> 00:04:23.003
the total time it took,

76
00:04:23.003 --> 00:04:24.005
and I hope you're starting to see

77
00:04:24.005 --> 00:04:27.006
how you can build on this convention,

78
00:04:27.006 --> 00:04:31.007
to get really good aspects that do really valuable things,

79
00:04:31.007 --> 00:04:33.006
unlike this dumb logging one that I wrote

80
00:04:33.006 --> 00:04:35.002
that doesn't do a lot.

81
00:04:35.002 --> 00:04:38.003
But you could definitely enhance this to do much more

82
00:04:38.003 --> 00:04:40.000
in a real world application.

