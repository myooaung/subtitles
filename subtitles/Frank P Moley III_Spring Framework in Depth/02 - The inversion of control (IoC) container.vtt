WEBVTT
1
00:00:00.007 --> 00:00:02.008
- [Instructor] The inversion of control pattern

2
00:00:02.008 --> 00:00:04.008
is fundamental to the operation

3
00:00:04.008 --> 00:00:06.005
of the Spring framework.

4
00:00:06.005 --> 00:00:09.002
It is critical for users of the Spring framework

5
00:00:09.002 --> 00:00:11.001
to understand not only the benefits

6
00:00:11.001 --> 00:00:13.002
of inversion of control

7
00:00:13.002 --> 00:00:16.000
and dependency injection in general,

8
00:00:16.000 --> 00:00:18.002
but also to understand the consequences

9
00:00:18.002 --> 00:00:20.002
of using this pattern.

10
00:00:20.002 --> 00:00:22.009
Inversion of control adds a new dimension

11
00:00:22.009 --> 00:00:25.005
to how you write your code.

12
00:00:25.005 --> 00:00:26.008
The container itself

13
00:00:26.008 --> 00:00:29.004
maintains all of the classes

14
00:00:29.004 --> 00:00:32.006
including the dependency classes.

15
00:00:32.006 --> 00:00:35.005
This is a critical aspect of IoC.

16
00:00:35.005 --> 00:00:37.004
While the containers handles the maintenance

17
00:00:37.004 --> 00:00:38.009
of these objects,

18
00:00:38.009 --> 00:00:41.004
your business logic doesn't have to.

19
00:00:41.004 --> 00:00:43.008
Objects are injected at runtime,

20
00:00:43.008 --> 00:00:46.004
usually during a startup operation.

21
00:00:46.004 --> 00:00:47.009
This allows the container

22
00:00:47.009 --> 00:00:49.002
to maintain the objects

23
00:00:49.002 --> 00:00:51.007
and hand them as dependencies

24
00:00:51.007 --> 00:00:54.009
to other objects within that runtime.

25
00:00:54.009 --> 00:00:57.004
An object that accepts these dependencies

26
00:00:57.004 --> 00:00:59.005
usually does this through construction

27
00:00:59.005 --> 00:01:01.004
of the object itself

28
00:01:01.004 --> 00:01:04.000
or through setter injection.

29
00:01:04.000 --> 00:01:05.000
This is a topic

30
00:01:05.000 --> 00:01:07.006
that can cause some discussion.

31
00:01:07.006 --> 00:01:09.008
But the rule of thumb is this:

32
00:01:09.008 --> 00:01:12.001
if your class cannot operate

33
00:01:12.001 --> 00:01:13.008
without the dependency,

34
00:01:13.008 --> 00:01:17.002
it should be injected via constructors.

35
00:01:17.002 --> 00:01:19.004
If your class can treat the dependency

36
00:01:19.004 --> 00:01:22.000
as optional or can accept

37
00:01:22.000 --> 00:01:25.000
multiple but variable concrete instances

38
00:01:25.000 --> 00:01:26.009
of the dependency,

39
00:01:26.009 --> 00:01:31.000
then it can be injected via setter injection.

40
00:01:31.000 --> 00:01:32.001
So let's take a look

41
00:01:32.001 --> 00:01:34.008
at traditional dependency management graph,

42
00:01:34.008 --> 00:01:37.002
so we can visualize the difference,

43
00:01:37.002 --> 00:01:40.004
especially with some kind of complexity.

44
00:01:40.004 --> 00:01:43.007
So we will start with a class called main.

45
00:01:43.007 --> 00:01:45.007
Now, in the construction of main,

46
00:01:45.007 --> 00:01:48.004
you have two dependent classes.

47
00:01:48.004 --> 00:01:51.001
So you need to construct those classes

48
00:01:51.001 --> 00:01:53.004
when you construct main.

49
00:01:53.004 --> 00:01:57.006
However, in constructing one of those dependent classes,

50
00:01:57.006 --> 00:01:59.000
you need another class.

51
00:01:59.000 --> 00:02:01.000
So you need to construct that as well

52
00:02:01.000 --> 00:02:02.009
back up in main.

53
00:02:02.009 --> 00:02:07.000
And finally, that class has two dependent classes,

54
00:02:07.000 --> 00:02:08.009
so you need to construct those as well

55
00:02:08.009 --> 00:02:10.008
when you construct main.

56
00:02:10.008 --> 00:02:12.008
So when you're doing the construction of main,

57
00:02:12.008 --> 00:02:15.006
you're constructing five additional classes

58
00:02:15.006 --> 00:02:17.005
in order to get this dependency graph.

59
00:02:17.005 --> 00:02:19.004
So we're now four layers deep

60
00:02:19.004 --> 00:02:20.009
of object construction

61
00:02:20.009 --> 00:02:23.001
just to create a single class.

62
00:02:23.001 --> 00:02:25.001
This level of complexity exists

63
00:02:25.001 --> 00:02:26.004
in many Java

64
00:02:26.004 --> 00:02:28.008
or any other object oriented language

65
00:02:28.008 --> 00:02:31.008
programs that exist today.

66
00:02:31.008 --> 00:02:34.004
Now, for the IoC container model,

67
00:02:34.004 --> 00:02:37.001
we're going to use the same dependency graph.

68
00:02:37.001 --> 00:02:38.003
However this time,

69
00:02:38.003 --> 00:02:40.006
we're going to start with the IoC container

70
00:02:40.006 --> 00:02:42.005
and our main class.

71
00:02:42.005 --> 00:02:44.000
Now the IoC container

72
00:02:44.000 --> 00:02:46.008
manages every object in our graph.

73
00:02:46.008 --> 00:02:47.009
So once again,

74
00:02:47.009 --> 00:02:49.009
main has two dependencies,

75
00:02:49.009 --> 00:02:52.004
and instead of constructing them,

76
00:02:52.004 --> 00:02:55.001
it takes them as constructor arguments

77
00:02:55.001 --> 00:02:56.006
and the IoC container

78
00:02:56.006 --> 00:02:58.003
handles that injection

79
00:02:58.003 --> 00:03:00.009
at object creation for main.

80
00:03:00.009 --> 00:03:01.007
Now once again,

81
00:03:01.007 --> 00:03:04.007
the IoC created our dependent class,

82
00:03:04.007 --> 00:03:06.007
but that had a dependency.

83
00:03:06.007 --> 00:03:08.009
It once again handled the injection

84
00:03:08.009 --> 00:03:10.006
via constructor argument,

85
00:03:10.006 --> 00:03:13.009
and handed that object to its dependency.

86
00:03:13.009 --> 00:03:14.009
Now once again,

87
00:03:14.009 --> 00:03:17.007
that object has two dependencies.

88
00:03:17.007 --> 00:03:19.000
And just like before,

89
00:03:19.000 --> 00:03:23.000
the IoC container hands those dependencies.

90
00:03:23.000 --> 00:03:25.004
Now, you may immediately see

91
00:03:25.004 --> 00:03:26.008
that we have an order in which

92
00:03:26.008 --> 00:03:29.003
our dependencies must be created

93
00:03:29.003 --> 00:03:31.004
to make this model work.

94
00:03:31.004 --> 00:03:32.007
And with Spring,

95
00:03:32.007 --> 00:03:34.009
we don't have to worry about that.

96
00:03:34.009 --> 00:03:35.008
As we will see,

97
00:03:35.008 --> 00:03:38.006
the framework handles all of that for us,

98
00:03:38.006 --> 00:03:39.009
so what you will see

99
00:03:39.009 --> 00:03:44.007
is that this complexity actually becomes a simplification,

100
00:03:44.007 --> 00:03:48.000
because we only configure these classes once

101
00:03:48.000 --> 00:03:51.004
no matter how many times that dependency is used

102
00:03:51.004 --> 00:03:52.007
and once we create it,

103
00:03:52.007 --> 00:03:55.004
we don't have to worry about it again.

104
00:03:55.004 --> 00:03:56.005
So let's take a little time

105
00:03:56.005 --> 00:03:59.002
and talk about why this is an important topic

106
00:03:59.002 --> 00:04:02.006
when dealing with complex applications.

107
00:04:02.006 --> 00:04:04.002
Inversion of control

108
00:04:04.002 --> 00:04:05.006
and dependency injection

109
00:04:05.006 --> 00:04:08.002
reduce the noise in your code.

110
00:04:08.002 --> 00:04:09.003
If you have a class

111
00:04:09.003 --> 00:04:12.001
that's used in several places in your application,

112
00:04:12.001 --> 00:04:14.003
that becomes even more clear,

113
00:04:14.003 --> 00:04:16.007
because you can focus on your business code

114
00:04:16.007 --> 00:04:19.005
and not constructing and managing those dependencies

115
00:04:19.005 --> 00:04:23.005
multiple times throughout your application.

116
00:04:23.005 --> 00:04:25.007
By removing construction of objects

117
00:04:25.007 --> 00:04:27.002
within your code,

118
00:04:27.002 --> 00:04:29.001
you reduce coupling.

119
00:04:29.001 --> 00:04:31.004
You simply consume the objects

120
00:04:31.004 --> 00:04:35.006
and they become less coupled to object creation.

121
00:04:35.006 --> 00:04:37.000
This becomes even better

122
00:04:37.000 --> 00:04:39.002
if your code to interfaces.

123
00:04:39.002 --> 00:04:41.001
But more on that in a moment.

124
00:04:41.001 --> 00:04:45.001
DI and IoC also reduce the bugs that arise

125
00:04:45.001 --> 00:04:47.003
during object creation.

126
00:04:47.003 --> 00:04:51.003
We all know how repetitive behavior in code is handled,

127
00:04:51.003 --> 00:04:53.000
copy and paste.

128
00:04:53.000 --> 00:04:54.007
If a bug exists,

129
00:04:54.007 --> 00:04:55.009
you have now copied it

130
00:04:55.009 --> 00:04:57.006
into two places.

131
00:04:57.006 --> 00:04:59.005
But if you modify that behavior

132
00:04:59.005 --> 00:05:01.000
to only one spot,

133
00:05:01.000 --> 00:05:02.006
and don't in the other,

134
00:05:02.006 --> 00:05:05.003
you still have the bug.

135
00:05:05.003 --> 00:05:08.004
By allowing the IoC to handle construction,

136
00:05:08.004 --> 00:05:11.001
you can focus on the API contract

137
00:05:11.001 --> 00:05:13.001
of your dependencies.

138
00:05:13.001 --> 00:05:15.002
This allows interfaces

139
00:05:15.002 --> 00:05:16.002
to be dependencies

140
00:05:16.002 --> 00:05:18.007
instead of concrete objects.

141
00:05:18.007 --> 00:05:21.009
Again, this allows you to have cleaner code

142
00:05:21.009 --> 00:05:26.000
that is less coupled to your dependent objects.

