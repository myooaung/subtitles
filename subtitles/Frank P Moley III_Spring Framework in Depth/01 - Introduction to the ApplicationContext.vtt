WEBVTT
1
00:00:00.007 --> 00:00:03.001
- The Application Context,

2
00:00:03.001 --> 00:00:05.006
and more specifically The BeanFactory,

3
00:00:05.006 --> 00:00:07.007
is one of the most important components

4
00:00:07.007 --> 00:00:09.006
in the spring framework.

5
00:00:09.006 --> 00:00:12.004
As we dig in deeper to the framework as a whole,

6
00:00:12.004 --> 00:00:15.007
we need to fully understand the Application Context,

7
00:00:15.007 --> 00:00:17.001
and the role that it plays

8
00:00:17.001 --> 00:00:21.001
during run time of our applications.

9
00:00:21.001 --> 00:00:22.006
The first thing we need to discuss

10
00:00:22.006 --> 00:00:26.003
is the purpose of the Application Context.

11
00:00:26.003 --> 00:00:28.004
The Application Context acts as the

12
00:00:28.004 --> 00:00:31.002
heart of the Spring Application.

13
00:00:31.002 --> 00:00:33.007
This is the central element that you deal with

14
00:00:33.007 --> 00:00:35.004
from the Spring framework,

15
00:00:35.004 --> 00:00:37.007
when developing an application.

16
00:00:37.007 --> 00:00:41.003
As previously mentioned, your classes should seldom,

17
00:00:41.003 --> 00:00:44.009
if ever have imports from the Spring framework

18
00:00:44.009 --> 00:00:47.003
except in annotations.

19
00:00:47.003 --> 00:00:50.000
However , the Application Context

20
00:00:50.000 --> 00:00:55.002
and the entry point of your application is an exception.

21
00:00:55.002 --> 00:00:59.005
The Application Context encapsulates the BeanFactory.

22
00:00:59.005 --> 00:01:01.005
The BeanFactory, as we will discuss,

23
00:01:01.005 --> 00:01:04.000
is the I-o-C container itself.

24
00:01:04.000 --> 00:01:06.008
The Application Context encapsulates it

25
00:01:06.008 --> 00:01:10.002
and provides a user access to the BeanFactory

26
00:01:10.002 --> 00:01:12.008
under controlled situations.

27
00:01:12.008 --> 00:01:15.000
As such, it provides the point

28
00:01:15.000 --> 00:01:18.003
for metadata for bean creation.

29
00:01:18.003 --> 00:01:21.004
We will talk a lot about bean configuration,

30
00:01:21.004 --> 00:01:25.004
but no matter the mechanism you use to configure your beans,

31
00:01:25.004 --> 00:01:29.009
the Application Context serves to take that configuration

32
00:01:29.009 --> 00:01:32.002
and allow the framework to use it

33
00:01:32.002 --> 00:01:35.004
to build the I-o-C container itself.

34
00:01:35.004 --> 00:01:37.006
It also ensures that your beans

35
00:01:37.006 --> 00:01:40.004
are created in appropriate order.

36
00:01:40.004 --> 00:01:43.007
As we saw previously, this can be of concern

37
00:01:43.007 --> 00:01:45.008
when a central object manages

38
00:01:45.008 --> 00:01:48.007
all of the dependencies in an application.

39
00:01:48.007 --> 00:01:50.009
It must be done in proper order

40
00:01:50.009 --> 00:01:53.009
to ensure the dependencies are available

41
00:01:53.009 --> 00:01:57.003
when needed for the construction of objects.

42
00:01:57.003 --> 00:01:59.004
Spring handles that through mechanisms

43
00:01:59.004 --> 00:02:03.009
within the BeanFactory and the Application Context.

44
00:02:03.009 --> 00:02:06.004
As mentioned, the BeanFactory provides

45
00:02:06.004 --> 00:02:09.002
the Inversion of Control Container.

46
00:02:09.002 --> 00:02:11.005
This provides all the facilities for

47
00:02:11.005 --> 00:02:14.004
injection of beans at startup and run time.

48
00:02:14.004 --> 00:02:18.005
While most beans are singletons and injected at startup,

49
00:02:18.005 --> 00:02:22.001
there are other types of beans they get handled differently.

50
00:02:22.001 --> 00:02:24.004
However, all the injection is

51
00:02:24.004 --> 00:02:27.004
handled by the BeanFactory.

52
00:02:27.004 --> 00:02:29.009
Most of the developers interaction with Spring,

53
00:02:29.009 --> 00:02:33.006
is actually configuring the I-o-C container.

54
00:02:33.006 --> 00:02:36.009
We do use abstractions provided by Spring,

55
00:02:36.009 --> 00:02:39.003
but they are just pre-configured facades

56
00:02:39.003 --> 00:02:43.001
on top of repetitive processes for the most part.

57
00:02:43.001 --> 00:02:47.004
Really, using Spring is more about configuration,

58
00:02:47.004 --> 00:02:49.009
at least at its core.

59
00:02:49.009 --> 00:02:52.003
The BeanFactory maintains a handle

60
00:02:52.003 --> 00:02:55.009
to all singleton beans, in the application.

61
00:02:55.009 --> 00:02:59.009
Now what this means is that beans of type singleton

62
00:02:59.009 --> 00:03:03.002
will always be referenced in the BeanFactory.

63
00:03:03.002 --> 00:03:07.000
Even if a class goes out of scope in the main runtime,

64
00:03:07.000 --> 00:03:09.009
the BeanFactory will always have a handle.

65
00:03:09.009 --> 00:03:12.004
This also means that the instance object

66
00:03:12.004 --> 00:03:14.009
is injected everywhere it's used.

67
00:03:14.009 --> 00:03:16.009
So you need to keep that in account,

68
00:03:16.009 --> 00:03:20.002
when storing state in those objects.

69
00:03:20.002 --> 00:03:21.008
Attributes for these classes

70
00:03:21.008 --> 00:03:24.002
must be handled carefully.

71
00:03:24.002 --> 00:03:27.005
Beans that aren't singletons are handled differently

72
00:03:27.005 --> 00:03:30.006
and we'll talk about those later on.

73
00:03:30.006 --> 00:03:32.008
Now multiple Application Contexts,

74
00:03:32.008 --> 00:03:36.002
can bring a little more challenge to your application,

75
00:03:36.002 --> 00:03:38.005
and needs to be addressed.

76
00:03:38.005 --> 00:03:40.001
A Spring application can have

77
00:03:40.001 --> 00:03:43.003
more than one Application Context.

78
00:03:43.003 --> 00:03:45.006
It will always have at least one,

79
00:03:45.006 --> 00:03:49.003
but in certain situations there can exist multiple.

80
00:03:49.003 --> 00:03:51.006
Web containers, for instance always have

81
00:03:51.006 --> 00:03:54.008
Multiple Application Contexts and play.

82
00:03:54.008 --> 00:03:58.007
The parent context can interact with the child context,

83
00:03:58.007 --> 00:04:01.003
but the other's not usually possible.

84
00:04:01.003 --> 00:04:04.009
And this makes sense if you think about O-O-P in general,

85
00:04:04.009 --> 00:04:07.005
because there is always a parent context

86
00:04:07.005 --> 00:04:09.001
and the rest are children.

87
00:04:09.001 --> 00:04:12.006
Much like a dependency graph for your business objects.

88
00:04:12.006 --> 00:04:14.003
We aren't going to go into depth here on

89
00:04:14.003 --> 00:04:17.001
Multiple Application Contexts however,

90
00:04:17.001 --> 00:04:19.007
because most often it is the framework

91
00:04:19.007 --> 00:04:22.000
that controls these cases.

