WEBVTT
1
00:00:00.002 --> 00:00:01.001
[Instructor]

2
00:00:01.001 --> 00:00:02.006
- Sometimes you have behavior,

3
00:00:02.006 --> 00:00:05.000
that you need to perform within a class,

4
00:00:05.000 --> 00:00:08.007
that requires the dependency injection to be completed,

5
00:00:08.007 --> 00:00:10.007
but this behavior either needs to be done

6
00:00:10.007 --> 00:00:13.009
before the application is ready for use,

7
00:00:13.009 --> 00:00:16.008
or right before it's destroyed.

8
00:00:16.008 --> 00:00:20.004
Enter into the picture, Lifecycle Methods.

9
00:00:20.004 --> 00:00:21.008
While Spring is Starting up,

10
00:00:21.008 --> 00:00:24.006
the system itself is not usable

11
00:00:24.006 --> 00:00:29.009
and this can, occur in the same way during shut down.

12
00:00:29.009 --> 00:00:32.003
Spring proxies are not always available

13
00:00:32.003 --> 00:00:34.007
during object instantiation,

14
00:00:34.007 --> 00:00:37.006
or after destruction has started.

15
00:00:37.006 --> 00:00:40.003
This means that not everything is available

16
00:00:40.003 --> 00:00:41.006
from a spring perspective,

17
00:00:41.006 --> 00:00:44.000
including the framework itself

18
00:00:44.000 --> 00:00:46.002
during the construction of an application

19
00:00:46.002 --> 00:00:48.005
that you may need behavior-wise

20
00:00:48.005 --> 00:00:51.001
in order to perform some task.

21
00:00:51.001 --> 00:00:54.000
This will also again apply during the destruction phase

22
00:00:54.000 --> 00:00:56.001
as you have no control over the order

23
00:00:56.001 --> 00:00:58.006
of garbage collection and you need a way to do some work

24
00:00:58.006 --> 00:01:01.006
before Spring goes out of scope.

25
00:01:01.006 --> 00:01:02.006
One thing to note is that

26
00:01:02.006 --> 00:01:04.006
these annotations we're going to talk about

27
00:01:04.006 --> 00:01:06.003
for these life cycle methods,

28
00:01:06.003 --> 00:01:09.000
utilize JSR two 50 annotations.

29
00:01:09.000 --> 00:01:11.001
These are not Spring specific,

30
00:01:11.001 --> 00:01:13.004
so you won't get Spring into your classes

31
00:01:13.004 --> 00:01:15.007
when you use these.

32
00:01:15.007 --> 00:01:17.002
So the first method that we're going to talk about,

33
00:01:17.002 --> 00:01:18.006
is Post Construction

34
00:01:18.006 --> 00:01:21.007
and post-construction as the name implies,

35
00:01:21.007 --> 00:01:23.007
is a method that should be executed

36
00:01:23.007 --> 00:01:26.000
after construction of the object.

37
00:01:26.000 --> 00:01:27.006
Again in the spring world,

38
00:01:27.006 --> 00:01:29.006
this allows us to construct the object

39
00:01:29.006 --> 00:01:31.003
as part of the IOC lifecycle,

40
00:01:31.003 --> 00:01:33.004
which we're going to talk about next,

41
00:01:33.004 --> 00:01:36.002
but then do some work using Spring

42
00:01:36.002 --> 00:01:37.000
before we hand it off to the actual run time

43
00:01:37.000 --> 00:01:42.001
or use phase of the application.

44
00:01:42.001 --> 00:01:46.002
The annotation on this method is @PostConstruct.

45
00:01:46.002 --> 00:01:48.005
Now this method has some special cases.

46
00:01:48.005 --> 00:01:50.000
It must be a void method.

47
00:01:50.000 --> 00:01:52.007
It takes no parameters as the framework itself

48
00:01:52.007 --> 00:01:54.004
will run this method.

49
00:01:54.004 --> 00:01:56.006
One use that I've had for this,

50
00:01:56.006 --> 00:01:59.007
is warming in memory Caches of data.

51
00:01:59.007 --> 00:02:01.003
Now I used to work on a system that needed to

52
00:02:01.003 --> 00:02:04.002
make both web service calls as well as database calls

53
00:02:04.002 --> 00:02:07.000
to store some data in memory

54
00:02:07.000 --> 00:02:09.000
and this was a perfect use case,

55
00:02:09.000 --> 00:02:11.002
because both of these calls,

56
00:02:11.002 --> 00:02:13.002
leverage spring abstractions.

57
00:02:13.002 --> 00:02:14.006
So by using PostConstruct,

58
00:02:14.006 --> 00:02:18.009
I had Spring available, but the application wasn't running,

59
00:02:18.009 --> 00:02:23.003
in a state that this Cache would not be pre warmed.

60
00:02:23.003 --> 00:02:25.001
This method is technically called,

61
00:02:25.001 --> 00:02:28.001
after all property setting is completed.

62
00:02:28.001 --> 00:02:29.008
Now we will talk about more about this,

63
00:02:29.008 --> 00:02:31.006
during the Lifecycle chapter.

64
00:02:31.006 --> 00:02:34.002
But it's important to know that you can also use

65
00:02:34.002 --> 00:02:36.006
Optional Dependencies for your class

66
00:02:36.006 --> 00:02:39.008
during this Post construct method.

67
00:02:39.008 --> 00:02:42.003
Now this is a very simple snippet of code

68
00:02:42.003 --> 00:02:43.006
of what this would look like.

69
00:02:43.006 --> 00:02:47.003
So @PostConstruct public void init,

70
00:02:47.003 --> 00:02:50.001
I usually call mine init just cause it makes sense.

71
00:02:50.001 --> 00:02:52.004
Again, it's a parameter less method

72
00:02:52.004 --> 00:02:53.007
and then you just do some work,

73
00:02:53.007 --> 00:02:57.008
and you can leverage Spring within there as you need to.

74
00:02:57.008 --> 00:03:00.000
Now Pre Destroy, as the name implies,

75
00:03:00.000 --> 00:03:01.008
is a method that is executed

76
00:03:01.008 --> 00:03:05.009
before the class itself is marked for garbage collection.

77
00:03:05.009 --> 00:03:09.005
The annotation is @PreDestroy and this is very useful

78
00:03:09.005 --> 00:03:11.003
and you need to capture some state

79
00:03:11.003 --> 00:03:13.003
before the application closes,

80
00:03:13.003 --> 00:03:16.000
and send it to a backing database again,

81
00:03:16.000 --> 00:03:19.004
that may be using some form of a Spring abstraction.

82
00:03:19.004 --> 00:03:22.002
Once again, this is a parameter less method

83
00:03:22.002 --> 00:03:24.001
and it's also void.

84
00:03:24.001 --> 00:03:26.007
So this is executed technically

85
00:03:26.007 --> 00:03:29.007
right when the application context itself closes,

86
00:03:29.007 --> 00:03:32.003
so encloses called on that context object.

87
00:03:32.003 --> 00:03:35.001
And again, this is well before any garbage collection

88
00:03:35.001 --> 00:03:36.009
can take place.

89
00:03:36.009 --> 00:03:39.007
And once again, I provided a very simple code snippet

90
00:03:39.007 --> 00:03:45.002
@PreDestroy public void destroy parameter less method.

91
00:03:45.002 --> 00:03:47.001
You do some more work leveraging Spring,

92
00:03:47.001 --> 00:03:48.007
and anything else you need to,

93
00:03:48.007 --> 00:03:50.003
and you'll be guaranteed that this will be called,

94
00:03:50.003 --> 00:03:53.000
when the application shuts down,

95
00:03:53.000 --> 00:03:55.005
through normal operations before,

96
00:03:55.005 --> 00:03:58.000
Spring itself goes out of context.

