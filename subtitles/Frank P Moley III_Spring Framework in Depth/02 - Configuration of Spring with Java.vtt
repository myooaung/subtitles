WEBVTT
1
00:00:00.008 --> 00:00:02.000
- [Instructor] We're going to start our journey

2
00:00:02.000 --> 00:00:05.004
of configuring Spring with Java config.

3
00:00:05.004 --> 00:00:08.006
While it is not the first way to configure,

4
00:00:08.006 --> 00:00:11.005
it is the most current typed configuration

5
00:00:11.005 --> 00:00:14.001
method in use today.

6
00:00:14.001 --> 00:00:17.007
XML is still valid, but not often used,

7
00:00:17.007 --> 00:00:22.001
and has been removed from most of the examples on Spring.io.

8
00:00:22.001 --> 00:00:25.007
Generally, it's just not favored anymore.

9
00:00:25.007 --> 00:00:28.001
Sometimes, no matter what you do,

10
00:00:28.001 --> 00:00:31.007
you need to type the config for Spring applications,

11
00:00:31.007 --> 00:00:34.009
and Java config should be your first choice,

12
00:00:34.009 --> 00:00:36.008
because of the benefits.

13
00:00:36.008 --> 00:00:40.007
First off, it provides native language syntax.

14
00:00:40.007 --> 00:00:43.000
There is no other language, schema,

15
00:00:43.000 --> 00:00:46.008
or structure to consider, you just use Java.

16
00:00:46.008 --> 00:00:50.005
It also provides compile time checking of object creation

17
00:00:50.005 --> 00:00:54.003
and syntax because it is a native language.

18
00:00:54.003 --> 00:00:57.002
This compile time checking is very welcome,

19
00:00:57.002 --> 00:01:00.004
especially if you have used XML syntax

20
00:01:00.004 --> 00:01:02.004
where you would have to run the application

21
00:01:02.004 --> 00:01:05.006
to test the actual configuration.

22
00:01:05.006 --> 00:01:07.005
And because it's Java,

23
00:01:07.005 --> 00:01:11.000
it integrates better in most cases with your IDE.

24
00:01:11.000 --> 00:01:14.002
This is less critical with more modern plug ins for your

25
00:01:14.002 --> 00:01:18.009
IDE of choice, but it does offer nice syntax highlighting

26
00:01:18.009 --> 00:01:22.003
and auto completion in most IDEs.

27
00:01:22.003 --> 00:01:24.007
So let's take a look at this in real life,

28
00:01:24.007 --> 00:01:29.000
using the sample exercise files that I've provided for you.

29
00:01:29.000 --> 00:01:31.002
So I want you to open up your exercise files

30
00:01:31.002 --> 00:01:33.007
like I have done in my IDE.

31
00:01:33.007 --> 00:01:35.008
So I'm currently at this version,

32
00:01:35.008 --> 00:01:38.000
and you'll see I've got an application,

33
00:01:38.000 --> 00:01:39.005
and this application has several

34
00:01:39.005 --> 00:01:41.009
service classes that run with it.

35
00:01:41.009 --> 00:01:44.008
I'm going to go ahead and run my application.

36
00:01:44.008 --> 00:01:47.001
Now while this is running and spinning through,

37
00:01:47.001 --> 00:01:49.009
I want to talk a little bit about this exercise.

38
00:01:49.009 --> 00:01:53.007
So really this is an overly complex implementation

39
00:01:53.007 --> 00:01:55.007
of a Hello World program.

40
00:01:55.007 --> 00:01:58.006
But it's just so we can show you the details of Spring.

41
00:01:58.006 --> 00:02:01.004
This is by no means a real application,

42
00:02:01.004 --> 00:02:05.007
nor would I ever write one this simple to be this complex.

43
00:02:05.007 --> 00:02:07.008
So while this main method is running,

44
00:02:07.008 --> 00:02:11.006
and I did that through my IDE using a run configuration,

45
00:02:11.006 --> 00:02:14.006
there's various ways to run a Java main method,

46
00:02:14.006 --> 00:02:17.003
and I'll let you run through those opportunities,

47
00:02:17.003 --> 00:02:19.005
but my IDE has a nice plug in that allows me

48
00:02:19.005 --> 00:02:23.001
to just run the main method, and configure it as needed.

49
00:02:23.001 --> 00:02:25.008
All right, so let's make this thing Spring enabled,

50
00:02:25.008 --> 00:02:27.008
so we can start configuring it.

51
00:02:27.008 --> 00:02:30.007
The first thing that we want to do is open up the pom file,

52
00:02:30.007 --> 00:02:33.003
and you'll see we have a very simple pom file,

53
00:02:33.003 --> 00:02:35.003
and we're going to add some stuff to this.

54
00:02:35.003 --> 00:02:38.004
Let me close this terminal window here.

55
00:02:38.004 --> 00:02:40.009
We're going to add a dependency section,

56
00:02:40.009 --> 00:02:43.005
and to that we're going to add a couple dependencies.

57
00:02:43.005 --> 00:02:44.008
Now the first dependency that we are

58
00:02:44.008 --> 00:02:46.008
going to add is Spring core,

59
00:02:46.008 --> 00:02:54.000
and Spring core comes from org.Spring framework.

60
00:02:54.000 --> 00:02:55.005
Now we need to have a version number,

61
00:02:55.005 --> 00:02:58.005
and to do that I'm going to set a property up here

62
00:02:58.005 --> 00:03:00.008
to be Spring.version.

63
00:03:00.008 --> 00:03:07.003
And at this point in time I'm going to use 5.2.3.release.

64
00:03:07.003 --> 00:03:09.003
Now with Spring there are several

65
00:03:09.003 --> 00:03:11.003
ways to handle dependencies.

66
00:03:11.003 --> 00:03:12.009
For the purposes of this we're just

67
00:03:12.009 --> 00:03:15.005
going to use standard releases.

68
00:03:15.005 --> 00:03:18.006
Let's go ahead and set that version,

69
00:03:18.006 --> 00:03:24.004
as a Spring.version variable, from the property,

70
00:03:24.004 --> 00:03:26.000
and now we're going to add another dependency,

71
00:03:26.000 --> 00:03:29.005
and this one is Spring dash context.

72
00:03:29.005 --> 00:03:31.004
And this will allow us to actually configure

73
00:03:31.004 --> 00:03:33.006
what we're trying to do here.

74
00:03:33.006 --> 00:03:38.005
Once again, this comes from org.Spring framework,

75
00:03:38.005 --> 00:03:41.007
and we will once again share a version

76
00:03:41.007 --> 00:03:44.002
of dollar sign Spring.version.

77
00:03:44.002 --> 00:03:45.008
Now you'll notice I am using a property here,

78
00:03:45.008 --> 00:03:48.008
I think it's very important with Spring to do that,

79
00:03:48.008 --> 00:03:50.002
because you really want your versions

80
00:03:50.002 --> 00:03:53.003
to be connected in some way, shape, or form.

81
00:03:53.003 --> 00:03:56.006
If you're using Spring Boot this has all been done for you,

82
00:03:56.006 --> 00:03:58.000
through the use of a parent pom.

83
00:03:58.000 --> 00:04:00.009
So you don't have to do that in this case.

84
00:04:00.009 --> 00:04:04.001
So now let's jump over here to source main Java,

85
00:04:04.001 --> 00:04:08.001
in our package com Frank Moley L-I-L-F-I-D,

86
00:04:08.001 --> 00:04:11.008
and we want to create a new package,

87
00:04:11.008 --> 00:04:14.009
and we're going to call this package config.

88
00:04:14.009 --> 00:04:19.009
And in our config package we'll create a new class file,

89
00:04:19.009 --> 00:04:22.009
and we will simply call it application config.

90
00:04:22.009 --> 00:04:25.006
Okay, so now to our application config file

91
00:04:25.006 --> 00:04:27.008
we're going to put a few annotations in here,

92
00:04:27.008 --> 00:04:29.001
and don't worry too much about them,

93
00:04:29.001 --> 00:04:31.009
we're going to talk a lot about them later on.

94
00:04:31.009 --> 00:04:35.003
But we're going to set a value of hello,

95
00:04:35.003 --> 00:04:40.002
to a private string that we will call greeting.

96
00:04:40.002 --> 00:04:43.000
Go ahead and import that annotation,

97
00:04:43.000 --> 00:04:45.003
and now we're going to set up a bean.

98
00:04:45.003 --> 00:04:47.002
And the bean is really what we're using

99
00:04:47.002 --> 00:04:50.002
to define a Spring application.

100
00:04:50.002 --> 00:04:53.007
So we will define a time service bean,

101
00:04:53.007 --> 00:04:56.000
that we will call time service,

102
00:04:56.000 --> 00:05:00.004
and we're simply going to return a new time service,

103
00:05:00.004 --> 00:05:02.005
and for right now we'll just set it to true

104
00:05:02.005 --> 00:05:06.005
for the age 24 parameter on time service.

105
00:05:06.005 --> 00:05:08.006
Now obviously, I know what these are by heart,

106
00:05:08.006 --> 00:05:10.007
because I've written this code,

107
00:05:10.007 --> 00:05:12.007
but take a look at these classes that I'm defining

108
00:05:12.007 --> 00:05:15.007
so you can see how the constructors are set up.

109
00:05:15.007 --> 00:05:20.004
Now we're going to create an output service bean,

110
00:05:20.004 --> 00:05:24.002
called output service,

111
00:05:24.002 --> 00:05:30.001
and we will return a new output service

112
00:05:30.001 --> 00:05:36.007
that takes a greeting service and a time service.

113
00:05:36.007 --> 00:05:40.008
And we'll get those populated here in a moment,

114
00:05:40.008 --> 00:05:43.009
and now we're going to create one more bean,

115
00:05:43.009 --> 00:05:49.002
and this one is called greeting service,

116
00:05:49.002 --> 00:05:57.000
and our greeting service takes a greeting,

117
00:05:57.000 --> 00:06:02.007
and the greeting we'll provide right now is hello.

118
00:06:02.007 --> 00:06:11.007
Now we're going to annotate this class with at configuration,

119
00:06:11.007 --> 00:06:15.006
and we need to auto wire in a couple private beans here,

120
00:06:15.006 --> 00:06:31.005
just so that this will work for now.

121
00:06:31.005 --> 00:06:33.009
This is not how this is going to end up looking at the end,

122
00:06:33.009 --> 00:06:36.006
but for right now this serves its purpose.

123
00:06:36.006 --> 00:06:37.008
What I really want to show you is how

124
00:06:37.008 --> 00:06:39.009
you're going to create the application context.

125
00:06:39.009 --> 00:06:42.007
So let's jump into our application class,

126
00:06:42.007 --> 00:06:44.006
which is at the root package structure,

127
00:06:44.006 --> 00:06:48.001
and you'll see I have a very simple implementation here,

128
00:06:48.001 --> 00:06:50.004
we're going to basically nuke most of this,

129
00:06:50.004 --> 00:06:52.002
and the way that we are going to do this

130
00:06:52.002 --> 00:07:00.008
is we are going to create an instance of application context,

131
00:07:00.008 --> 00:07:02.004
and we are going to use the annotation

132
00:07:02.004 --> 00:07:05.009
config application context,

133
00:07:05.009 --> 00:07:13.003
and we will pass it our application config.class.

134
00:07:13.003 --> 00:07:17.008
Go ahead and import those values,

135
00:07:17.008 --> 00:07:21.008
and now we are going to create an output service bean,

136
00:07:21.008 --> 00:07:24.000
called output service,

137
00:07:24.000 --> 00:07:25.009
and we will get that from our context.

138
00:07:25.009 --> 00:07:28.005
So we're going to be called context get bean,

139
00:07:28.005 --> 00:07:30.003
and we need to get an instance of

140
00:07:30.003 --> 00:07:33.006
output service class from the context.

141
00:07:33.006 --> 00:07:36.003
Now you'll see we haven't actually gone and created

142
00:07:36.003 --> 00:07:38.009
any beans that we're using,

143
00:07:38.009 --> 00:07:41.002
we're pulling them out of the application context.

144
00:07:41.002 --> 00:07:44.002
So now if we run our application,

145
00:07:44.002 --> 00:07:47.001
Spring should use that Java config, wire up the application,

146
00:07:47.001 --> 00:07:50.008
and we should get the exact same results in our console

147
00:07:50.008 --> 00:07:52.001
that we had before.

148
00:07:52.001 --> 00:07:53.008
Which is nothing more than Hello World

149
00:07:53.008 --> 00:07:57.008
printed out five times, once every five seconds.

150
00:07:57.008 --> 00:08:00.003
And that's all there is to using the very basics

151
00:08:00.003 --> 00:08:05.000
of Java config to get an application context up and running.

