WEBVTT
1
00:00:00.005 --> 00:00:02.005
- [Instructor] Let's work through a few code examples

2
00:00:02.005 --> 00:00:05.004
to get more familiar with the methods on a map.

3
00:00:05.004 --> 00:00:06.005
To help us with that,

4
00:00:06.005 --> 00:00:09.000
we'll build a HashMap that tracks which room

5
00:00:09.000 --> 00:00:12.000
the guests at the London Hotel are staying in.

6
00:00:12.000 --> 00:00:14.000
So we'll start out by creating a map

7
00:00:14.000 --> 00:00:16.000
that uses a room as its key

8
00:00:16.000 --> 00:00:19.003
and stores guests as its values.

9
00:00:19.003 --> 00:00:21.008
I'm going to name this map assignments

10
00:00:21.008 --> 00:00:25.004
and then I'll use a HashMap implementation for my map.

11
00:00:25.004 --> 00:00:27.005
Okay, so now we have the map.

12
00:00:27.005 --> 00:00:30.009
Let's go ahead and add the guests into their rooms.

13
00:00:30.009 --> 00:00:34.007
So first I'm going to place Maria in Oxford

14
00:00:34.007 --> 00:00:36.009
by passing in Oxford as the key

15
00:00:36.009 --> 00:00:39.006
and then Maria as the value.

16
00:00:39.006 --> 00:00:42.003
Okay, then we can put John in his room.

17
00:00:42.003 --> 00:00:44.001
It's going to be Piccadilly,

18
00:00:44.001 --> 00:00:46.003
so we'll go ahead and use the put method

19
00:00:46.003 --> 00:00:48.007
to associate John with Piccadilly.

20
00:00:48.007 --> 00:00:49.006
Now at this point,

21
00:00:49.006 --> 00:00:52.004
let's retrieve some of the values in the map

22
00:00:52.004 --> 00:00:54.007
and print them to the console.

23
00:00:54.007 --> 00:00:57.001
So I'll use the print stream

24
00:00:57.001 --> 00:00:58.008
and then I'll just say we're getting

25
00:00:58.008 --> 00:01:01.002
the guest from Piccadilly.

26
00:01:01.002 --> 00:01:05.000
And here we can use the map to retrieve the guest

27
00:01:05.000 --> 00:01:09.000
in that room by passing in the key to the get method.

28
00:01:09.000 --> 00:01:10.009
So we'll pass in Piccadilly

29
00:01:10.009 --> 00:01:13.001
and that should get us John.

30
00:01:13.001 --> 00:01:15.004
Now let's do this again for Oxford,

31
00:01:15.004 --> 00:01:19.009
but I'm going to do this a little bit differently.

32
00:01:19.009 --> 00:01:24.000
Instead of using the exact object instance as my key

33
00:01:24.000 --> 00:01:26.005
that I'm passing into the get method,

34
00:01:26.005 --> 00:01:27.006
I'm going to create

35
00:01:27.006 --> 00:01:31.003
a new logically-equivalent instance of Oxford.

36
00:01:31.003 --> 00:01:33.009
So I'll use the new operator in the constructor,

37
00:01:33.009 --> 00:01:35.006
pass in the name Oxford.

38
00:01:35.006 --> 00:01:38.003
It's a suite that holds five people

39
00:01:38.003 --> 00:01:41.000
and costs $225 a night.

40
00:01:41.000 --> 00:01:44.008
Okay, so we're retrieving two values from our map

41
00:01:44.008 --> 00:01:47.000
using rooms as the key.

42
00:01:47.000 --> 00:01:51.000
In one instance we're using the exact same object instance

43
00:01:51.000 --> 00:01:52.009
and in another we're using

44
00:01:52.009 --> 00:01:55.009
a logically-equivalent object instance.

45
00:01:55.009 --> 00:01:58.001
Let's go ahead and execute this

46
00:01:58.001 --> 00:02:00.007
and you'll notice that our console output

47
00:02:00.007 --> 00:02:03.005
indicates that Maria is staying in Oxford

48
00:02:03.005 --> 00:02:07.007
and John is staying in Piccadilly, so that's correct.

49
00:02:07.007 --> 00:02:09.008
Now let's take a look at what happens

50
00:02:09.008 --> 00:02:14.004
when you don't override hashcode and equals properly.

51
00:02:14.004 --> 00:02:16.001
So in this example,

52
00:02:16.001 --> 00:02:19.004
it's the exact same code except for one thing.

53
00:02:19.004 --> 00:02:23.003
I'm using a different object as the key of the map

54
00:02:23.003 --> 00:02:25.006
and this object does not override

55
00:02:25.006 --> 00:02:28.005
the hashcode and equals methods properly.

56
00:02:28.005 --> 00:02:31.005
Watch what happens when I execute this code.

57
00:02:31.005 --> 00:02:35.000
You'll notice that we're unable to retrieve

58
00:02:35.000 --> 00:02:38.006
the value in the map associated with Oxford

59
00:02:38.006 --> 00:02:42.002
and that's because we've broken how the map works

60
00:02:42.002 --> 00:02:45.006
by not overriding hashcode and equals.

61
00:02:45.006 --> 00:02:48.006
Okay, let's finish up with one more example.

62
00:02:48.006 --> 00:02:52.002
Imagine that Maria and John would like to switch rooms.

63
00:02:52.002 --> 00:02:53.009
Let's see how we can do that.

64
00:02:53.009 --> 00:02:57.005
So I'm going to create a new variable guest

65
00:02:57.005 --> 00:02:59.009
and then I'm going to use our map

66
00:02:59.009 --> 00:03:01.006
and the put method.

67
00:03:01.006 --> 00:03:04.005
So first I'm going to put Maria

68
00:03:04.005 --> 00:03:07.000
into John's room, Piccadilly.

69
00:03:07.000 --> 00:03:11.001
Now I'm not just going to pass Maria in as the value

70
00:03:11.001 --> 00:03:13.006
that we would like to associate with Piccadilly.

71
00:03:13.006 --> 00:03:17.006
What I'm going to do is use the remove method

72
00:03:17.006 --> 00:03:20.007
and then I'll pass in Maria's room

73
00:03:20.007 --> 00:03:23.002
as the key which is Oxford.

74
00:03:23.002 --> 00:03:26.002
Okay, let's talk a little bit about what this does.

75
00:03:26.002 --> 00:03:29.004
First, we're going to remove Maria from her room

76
00:03:29.004 --> 00:03:32.002
and you'll recall that the remove method

77
00:03:32.002 --> 00:03:36.002
will return the value with the associated key

78
00:03:36.002 --> 00:03:38.001
we pass into the method.

79
00:03:38.001 --> 00:03:43.005
So this is going to place Maria into Piccadilly.

80
00:03:43.005 --> 00:03:46.003
Now you'll also recall that the put method

81
00:03:46.003 --> 00:03:48.002
will return the value

82
00:03:48.002 --> 00:03:51.004
previously stored within the map entry,

83
00:03:51.004 --> 00:03:56.003
so that's going to assign John into our guest variable.

84
00:03:56.003 --> 00:03:57.004
Now let's go ahead

85
00:03:57.004 --> 00:04:00.008
and we can place John into Maria's room.

86
00:04:00.008 --> 00:04:01.006
Now to do that,

87
00:04:01.006 --> 00:04:04.008
I'm going to use the putIfAbsent method

88
00:04:04.008 --> 00:04:07.004
just to make sure that Maria's out of her room.

89
00:04:07.004 --> 00:04:11.006
You'll recall that this method will not overwrite the entry

90
00:04:11.006 --> 00:04:14.006
in the map if it already exists.

91
00:04:14.006 --> 00:04:17.006
Okay, now to build the association,

92
00:04:17.006 --> 00:04:20.006
we pass in Maria's room which was Oxford.

93
00:04:20.006 --> 00:04:22.002
And then as our second argument,

94
00:04:22.002 --> 00:04:26.000
we pass in John who's assigned to the guest variable.

95
00:04:26.000 --> 00:04:27.000
All right, let me go ahead.

96
00:04:27.000 --> 00:04:29.001
We'll save our code and we'll execute it.

97
00:04:29.001 --> 00:04:33.006
And there you can see that John is now staying in Oxford

98
00:04:33.006 --> 00:04:35.003
and Maria's staying in Piccadilly.

99
00:04:35.003 --> 00:04:37.009
We successfully completed our switch.

100
00:04:37.009 --> 00:04:40.004
So that's a look at several of the methods

101
00:04:40.004 --> 00:04:42.006
that insert, update, remove,

102
00:04:42.006 --> 00:04:45.000
and retrieve objects from a map.

