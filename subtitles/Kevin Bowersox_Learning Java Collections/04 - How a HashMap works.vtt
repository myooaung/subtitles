WEBVTT
1
00:00:00.008 --> 00:00:02.001
- [Instructor] Let's talk in general about

2
00:00:02.001 --> 00:00:04.004
how a HashMap uses the hashCode

3
00:00:04.004 --> 00:00:07.007
and equals methods when storing a key value pair.

4
00:00:07.007 --> 00:00:10.000
Internally, a HashMap contains an array

5
00:00:10.000 --> 00:00:14.008
with a default size of 16 that is used to store nodes.

6
00:00:14.008 --> 00:00:17.000
In this diagram, I've reduced this down

7
00:00:17.000 --> 00:00:20.001
to three indexes to make it easier to view.

8
00:00:20.001 --> 00:00:22.008
When the put method accepts a key value pair,

9
00:00:22.008 --> 00:00:25.001
the HashMap calls the hashCode method

10
00:00:25.001 --> 00:00:27.008
on the key to get its hash value.

11
00:00:27.008 --> 00:00:30.003
It then applies logic that hashes the value

12
00:00:30.003 --> 00:00:32.009
a second time to build a new hash.

13
00:00:32.009 --> 00:00:34.009
This is used to compute the index

14
00:00:34.009 --> 00:00:37.008
where the values will be stored in the array.

15
00:00:37.008 --> 00:00:40.002
In this index, a new node is created

16
00:00:40.002 --> 00:00:43.009
that contains the key, value and derived hash value

17
00:00:43.009 --> 00:00:46.004
for the objects placed into the map.

18
00:00:46.004 --> 00:00:48.007
This process continues each time

19
00:00:48.007 --> 00:00:52.000
the put method is called with a new key value pair.

20
00:00:52.000 --> 00:00:54.008
If we have a collision of hash values

21
00:00:54.008 --> 00:00:59.001
and objects must be placed in the same index that's okay.

22
00:00:59.001 --> 00:01:02.002
The new node is linked together with the existing nodes

23
00:01:02.002 --> 00:01:05.008
to build a link list within the array index.

24
00:01:05.008 --> 00:01:08.003
So, that is the general logic of how storage

25
00:01:08.003 --> 00:01:10.007
works internally within a HashMap.

26
00:01:10.007 --> 00:01:13.009
And, admittedly, we skipped a few minor points.

27
00:01:13.009 --> 00:01:17.005
Now, let's talk about retrieving a value from a HashMap.

28
00:01:17.005 --> 00:01:20.004
When a key is passed to the get method on a HashMap,

29
00:01:20.004 --> 00:01:24.002
the map first performs the hashing and index logic

30
00:01:24.002 --> 00:01:26.006
to determine the appropriate array index

31
00:01:26.006 --> 00:01:29.000
to search for the key's value.

32
00:01:29.000 --> 00:01:31.008
So, here, we see the provided key computes

33
00:01:31.008 --> 00:01:35.005
to an index of 1, that index currently holds

34
00:01:35.005 --> 00:01:37.008
a link list with two nodes.

35
00:01:37.008 --> 00:01:40.009
If there were only a single node stored in the index,

36
00:01:40.009 --> 00:01:43.000
the search logic could easily return

37
00:01:43.000 --> 00:01:45.005
the value from that single node.

38
00:01:45.005 --> 00:01:49.000
But since there are multiple nodes stored within the index,

39
00:01:49.000 --> 00:01:52.003
the HashMap uses the equals method to compare

40
00:01:52.003 --> 00:01:56.001
the provided key with the key stored in the node.

41
00:01:56.001 --> 00:01:58.004
In this case, the first node didn't match,

42
00:01:58.004 --> 00:02:00.004
so the logic traverses the reference

43
00:02:00.004 --> 00:02:03.004
to the next node in the link list.

44
00:02:03.004 --> 00:02:06.006
Then, it performs the equals comparison again.

45
00:02:06.006 --> 00:02:09.005
This time it evaluates to true causing the value

46
00:02:09.005 --> 00:02:11.003
in the node to be returned.

47
00:02:11.003 --> 00:02:13.007
So basically the equals method resolves

48
00:02:13.007 --> 00:02:15.008
the hashCode collision, and you start

49
00:02:15.008 --> 00:02:17.009
to see why implementing the hashCode

50
00:02:17.009 --> 00:02:21.003
and equals methods is necessary for working with a map.

51
00:02:21.003 --> 00:02:24.004
The internal workings of a HashMap is sometimes assessed

52
00:02:24.004 --> 00:02:27.001
in technical interviews so now, you'll be prepared

53
00:02:27.001 --> 00:02:29.008
for the question, if it arises, and you'll have

54
00:02:29.008 --> 00:02:33.000
a better grasp on how hashing structures function.

