WEBVTT
1
00:00:00.005 --> 00:00:03.004
- [Instructor] Several core interfaces form the foundation

2
00:00:03.004 --> 00:00:06.004
that the Java collection framework is built upon.

3
00:00:06.004 --> 00:00:08.009
Let's explore what they are, their hierarchy,

4
00:00:08.009 --> 00:00:11.005
and some patterns for working with them.

5
00:00:11.005 --> 00:00:13.008
Here's a look at the top level interfaces

6
00:00:13.008 --> 00:00:17.007
where you'll find collections like list, set, and map.

7
00:00:17.007 --> 00:00:21.005
These should sound familiar from our earlier discussions.

8
00:00:21.005 --> 00:00:25.004
Within this group, inheritance is used to build a hierarchy,

9
00:00:25.004 --> 00:00:29.005
so it's common for interfaces to extend other interfaces

10
00:00:29.005 --> 00:00:31.006
in the collections framework.

11
00:00:31.006 --> 00:00:34.002
The collection interface is the common parent

12
00:00:34.002 --> 00:00:36.005
that is extended by other interfaces,

13
00:00:36.005 --> 00:00:39.000
like list, queue, and set.

14
00:00:39.000 --> 00:00:41.000
That means you'll find some of the same methods

15
00:00:41.000 --> 00:00:42.003
appearing on each of them

16
00:00:42.003 --> 00:00:45.006
because they inherit from the collection interface.

17
00:00:45.006 --> 00:00:47.008
In addition to having these things in common,

18
00:00:47.008 --> 00:00:51.008
each interface has its own unique behaviors that defines it.

19
00:00:51.008 --> 00:00:54.009
For example, the list and queue maintain an order

20
00:00:54.009 --> 00:00:57.004
among the group of elements that they store

21
00:00:57.004 --> 00:01:00.006
and the set doesn't allow for duplicate elements.

22
00:01:00.006 --> 00:01:02.007
The map interface is still considered

23
00:01:02.007 --> 00:01:04.005
a part of the collections framework,

24
00:01:04.005 --> 00:01:06.004
but you'll notice that it doesn't inherit

25
00:01:06.004 --> 00:01:08.008
from the base collection interface.

26
00:01:08.008 --> 00:01:10.008
It forms its own type hierarchy,

27
00:01:10.008 --> 00:01:13.003
but doesn't deviate too far from the patterns

28
00:01:13.003 --> 00:01:15.008
that will be used for other collections.

29
00:01:15.008 --> 00:01:17.004
We can expand upon this view

30
00:01:17.004 --> 00:01:20.002
to include some of the most common concrete classes

31
00:01:20.002 --> 00:01:22.007
the framework provides as implementations

32
00:01:22.007 --> 00:01:24.008
of these interfaces.

33
00:01:24.008 --> 00:01:27.002
These are the types you'll need to instantiate

34
00:01:27.002 --> 00:01:29.002
when working with a collection.

35
00:01:29.002 --> 00:01:31.004
The most frequently used implementations

36
00:01:31.004 --> 00:01:33.003
are ArrayList and HashMap,

37
00:01:33.003 --> 00:01:36.004
so we'll get really familiar with those.

38
00:01:36.004 --> 00:01:38.009
If you inspect the implementations closely,

39
00:01:38.009 --> 00:01:41.004
you can break them down into two parts:

40
00:01:41.004 --> 00:01:44.000
the interface which determines their methods

41
00:01:44.000 --> 00:01:45.007
and the implementation style

42
00:01:45.007 --> 00:01:49.001
for how the underlying data structure works.

43
00:01:49.001 --> 00:01:51.009
The naming conventions used by a collection

44
00:01:51.009 --> 00:01:54.000
give us some clues about how it works

45
00:01:54.000 --> 00:01:56.007
because they reveal the implementation style

46
00:01:56.007 --> 00:01:59.000
and the type of interface.

47
00:01:59.000 --> 00:02:02.002
The first part of the name defines the implementation

48
00:02:02.002 --> 00:02:05.004
and the last part tells us the interface.

49
00:02:05.004 --> 00:02:10.001
So you'll notice ArrayList, HashMap.

50
00:02:10.001 --> 00:02:13.003
First the implementation, then the interface.

51
00:02:13.003 --> 00:02:16.003
You'll also notice that multiple implementation styles

52
00:02:16.003 --> 00:02:19.001
can be combined, LinkedHashSet.

53
00:02:19.001 --> 00:02:20.009
It might be easier to understand

54
00:02:20.009 --> 00:02:24.000
if we look at some of the most commonly used implementations

55
00:02:24.000 --> 00:02:27.000
against a matrix that shows their intersection

56
00:02:27.000 --> 00:02:29.008
of the interface and implementation.

57
00:02:29.008 --> 00:02:33.009
Here, you can see the whole group on the matrix.

58
00:02:33.009 --> 00:02:36.004
At first, it might feel a little intimidating

59
00:02:36.004 --> 00:02:39.000
to learn all of these collection types,

60
00:02:39.000 --> 00:02:41.008
but don't be intimidated because if you focus

61
00:02:41.008 --> 00:02:44.001
on learning the collection interface well,

62
00:02:44.001 --> 00:02:47.003
you can quickly learn a large part of the framework.

63
00:02:47.003 --> 00:02:49.007
That's because the majority of the collection types

64
00:02:49.007 --> 00:02:52.000
inherit from the collection interface.

