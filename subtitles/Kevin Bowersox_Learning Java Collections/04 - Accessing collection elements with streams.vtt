WEBVTT
1
00:00:00.005 --> 00:00:01.009
- [Instructor] The Streams API

2
00:00:01.009 --> 00:00:04.004
and Lambdas added to Java 8 gave us

3
00:00:04.004 --> 00:00:07.004
a concise functional style for writing code.

4
00:00:07.004 --> 00:00:09.002
Let me show you through an example.

5
00:00:09.002 --> 00:00:12.001
In our application, we have a collection of rooms

6
00:00:12.001 --> 00:00:14.006
that I iterate through and check if the room

7
00:00:14.006 --> 00:00:15.009
is pet friendly.

8
00:00:15.009 --> 00:00:19.002
If it is, I write its name out to the console.

9
00:00:19.002 --> 00:00:22.009
This style of code is known as the imperative style.

10
00:00:22.009 --> 00:00:24.005
When we use an imperative style,

11
00:00:24.005 --> 00:00:28.005
we have to specify exactly how we want the code to behave.

12
00:00:28.005 --> 00:00:31.006
So I need to write the code that does the iteration,

13
00:00:31.006 --> 00:00:33.003
performs the conditional check

14
00:00:33.003 --> 00:00:35.008
and writes the information to the console.

15
00:00:35.008 --> 00:00:38.005
When we use a functional style with streams,

16
00:00:38.005 --> 00:00:39.008
it's a little bit different.

17
00:00:39.008 --> 00:00:44.000
It's more like we tell the code what we want to achieve.

18
00:00:44.000 --> 00:00:45.003
Let me show you.

19
00:00:45.003 --> 00:00:48.003
So first, think of a stream as a pipeline

20
00:00:48.003 --> 00:00:50.001
that our elements flow through

21
00:00:50.001 --> 00:00:52.007
but it never stores them like a collection.

22
00:00:52.007 --> 00:00:55.000
The elements are always moving forward

23
00:00:55.000 --> 00:00:56.006
through the stream.

24
00:00:56.006 --> 00:00:59.009
So first, we need a source of elements

25
00:00:59.009 --> 00:01:01.009
that can flow through the stream.

26
00:01:01.009 --> 00:01:04.003
We can find them in our collection.

27
00:01:04.003 --> 00:01:08.005
So on our collection, I'm going to invoke the stream method

28
00:01:08.005 --> 00:01:11.009
in order to start the pipeline that the elements

29
00:01:11.009 --> 00:01:14.003
in our collection will flow through.

30
00:01:14.003 --> 00:01:15.007
Now, on that pipeline,

31
00:01:15.007 --> 00:01:17.007
we can add operations,

32
00:01:17.007 --> 00:01:19.001
and our first one is going

33
00:01:19.001 --> 00:01:23.002
to be an intermediate operation named filter.

34
00:01:23.002 --> 00:01:26.003
It allows us to perform a test

35
00:01:26.003 --> 00:01:28.008
on the elements flowing through the stream

36
00:01:28.008 --> 00:01:31.003
that will determine if they continue on

37
00:01:31.003 --> 00:01:33.004
for further processing.

38
00:01:33.004 --> 00:01:35.002
Now, to perform that test,

39
00:01:35.002 --> 00:01:39.000
we use an object known as a predicate.

40
00:01:39.000 --> 00:01:41.002
A predicate is a functional interface.

41
00:01:41.002 --> 00:01:45.006
So I'm actually going to create an instance

42
00:01:45.006 --> 00:01:48.009
of a predicate using an anonymous class.

43
00:01:48.009 --> 00:01:50.004
This is kind of a long way

44
00:01:50.004 --> 00:01:53.002
but it's going to show you how a collection works.

45
00:01:53.002 --> 00:01:56.003
So let's go ahead and import the predicate type.

46
00:01:56.003 --> 00:01:58.000
Just hover over the type

47
00:01:58.000 --> 00:02:01.007
and then select java.util.function.predicate,

48
00:02:01.007 --> 00:02:05.007
and then in order to add the method to the body

49
00:02:05.007 --> 00:02:06.005
of the predicate,

50
00:02:06.005 --> 00:02:08.003
just hover over the type again,

51
00:02:08.003 --> 00:02:11.004
and click on add unimplemented methods.

52
00:02:11.004 --> 00:02:13.008
And here we can see the signature

53
00:02:13.008 --> 00:02:16.008
of the functional interface.

54
00:02:16.008 --> 00:02:20.004
You'll notice that it accepts a parameter of type room.

55
00:02:20.004 --> 00:02:21.003
That makes sense.

56
00:02:21.003 --> 00:02:24.006
It's the type of element that's flowing through the stream

57
00:02:24.006 --> 00:02:28.001
because it's the type of element found in our collection.

58
00:02:28.001 --> 00:02:29.009
Now, in the body of this method,

59
00:02:29.009 --> 00:02:34.002
what we do is we perform some sort of test on the room.

60
00:02:34.002 --> 00:02:35.005
And in this case,

61
00:02:35.005 --> 00:02:39.001
we just want to check if it's pet friendly.

62
00:02:39.001 --> 00:02:42.006
And it's pretty easy because PetFriendly is a Boolean

63
00:02:42.006 --> 00:02:45.008
and we're just going to return the result of the method.

64
00:02:45.008 --> 00:02:47.004
That result will determine

65
00:02:47.004 --> 00:02:49.005
whether or not the element continues

66
00:02:49.005 --> 00:02:52.005
for further processing in the pipeline

67
00:02:52.005 --> 00:02:54.006
to the next operation.

68
00:02:54.006 --> 00:02:57.004
So let's go ahead and add that operation.

69
00:02:57.004 --> 00:03:00.008
We could add another intermediate operation

70
00:03:00.008 --> 00:03:02.002
but instead, I'm going to use

71
00:03:02.002 --> 00:03:05.005
a terminal operation named forEach.

72
00:03:05.005 --> 00:03:10.003
So a terminal operation is used to end the pipeline.

73
00:03:10.003 --> 00:03:12.008
It's either going to return a result

74
00:03:12.008 --> 00:03:16.006
or modify the elements that are streamed into it.

75
00:03:16.006 --> 00:03:19.001
Now, when we use the forEach method,

76
00:03:19.001 --> 00:03:21.005
we need to supply a consumer,

77
00:03:21.005 --> 00:03:24.002
which is another functional interface.

78
00:03:24.002 --> 00:03:26.007
So I'm going to use an anonymous class

79
00:03:26.007 --> 00:03:29.003
so that we can see this as well.

80
00:03:29.003 --> 00:03:30.008
All right, so let's go ahead

81
00:03:30.008 --> 00:03:34.000
and we'll import the Consumer type,

82
00:03:34.000 --> 00:03:38.007
and then we're going to add its functional interface method.

83
00:03:38.007 --> 00:03:41.008
And you can see that it just accepts a room

84
00:03:41.008 --> 00:03:43.003
as a parameter.

85
00:03:43.003 --> 00:03:45.008
I'll go ahead and change that parameter name.

86
00:03:45.008 --> 00:03:48.000
And then inside of its body,

87
00:03:48.000 --> 00:03:52.002
we're going to print out the name of the room

88
00:03:52.002 --> 00:03:53.006
to the console.

89
00:03:53.006 --> 00:03:56.001
Now, I'm going to do one more thing here.

90
00:03:56.001 --> 00:03:58.008
I'm going to add a little bit of debugging.

91
00:03:58.008 --> 00:04:01.004
So I'll use System.out.format

92
00:04:01.004 --> 00:04:03.008
and here I can provide a pattern.

93
00:04:03.008 --> 00:04:06.006
So we can say that we're testing,

94
00:04:06.006 --> 00:04:09.006
and then we'll provide a string

95
00:04:09.006 --> 00:04:12.001
and then we'll say that we got a result,

96
00:04:12.001 --> 00:04:14.000
and we'll provide a Boolean,

97
00:04:14.000 --> 00:04:16.003
and then I'll just put a new line.

98
00:04:16.003 --> 00:04:20.006
And now we can pass in the arguments to that pattern.

99
00:04:20.006 --> 00:04:23.004
The first one will be the name of the room,

100
00:04:23.004 --> 00:04:27.002
and the second one will be the results

101
00:04:27.002 --> 00:04:29.008
of our isPetFriendly call.

102
00:04:29.008 --> 00:04:32.000
All right, so what we're doing here

103
00:04:32.000 --> 00:04:34.003
is just printing the name of the room,

104
00:04:34.003 --> 00:04:37.000
and whether or not it's pet friendly.

105
00:04:37.000 --> 00:04:40.004
And I added this so that you can see how the stream works.

106
00:04:40.004 --> 00:04:44.002
Watch what happens when I execute this code.

107
00:04:44.002 --> 00:04:46.002
You can see the elements flowing

108
00:04:46.002 --> 00:04:49.004
through the different operations in the pipeline.

109
00:04:49.004 --> 00:04:53.009
So first, the Cambridge room went through the pipeline.

110
00:04:53.009 --> 00:04:57.007
And because our predicate returned false,

111
00:04:57.007 --> 00:05:01.004
the filter method blocked it from further processing.

112
00:05:01.004 --> 00:05:03.007
Now, you can see the next room, Oxford,

113
00:05:03.007 --> 00:05:05.004
was pet friendly.

114
00:05:05.004 --> 00:05:07.009
So the filter allowed it to continue on

115
00:05:07.009 --> 00:05:09.006
for further processing

116
00:05:09.006 --> 00:05:13.008
and then our consumer printed out the name

117
00:05:13.008 --> 00:05:15.006
of the room to the console.

118
00:05:15.006 --> 00:05:16.008
And you can see what happened

119
00:05:16.008 --> 00:05:18.002
with the other two rooms as well.

120
00:05:18.002 --> 00:05:20.000
One was allowed to process

121
00:05:20.000 --> 00:05:21.008
and the other was blocked.

122
00:05:21.008 --> 00:05:24.000
So that's how a stream works

123
00:05:24.000 --> 00:05:26.008
but I probably haven't sold you on the conciseness

124
00:05:26.008 --> 00:05:29.000
of the functional programming style.

125
00:05:29.000 --> 00:05:31.006
And that's because I used those anonymous classes.

126
00:05:31.006 --> 00:05:34.007
So that's where we're going to pick up in our next lesson

127
00:05:34.007 --> 00:05:38.000
where we take a look at the lambda expression.

