WEBVTT
1
00:00:00.000 --> 00:00:05.006
(upbeat music)

2
00:00:05.006 --> 00:00:07.006
- Now it's time to put your new skills

3
00:00:07.006 --> 00:00:10.004
to the test in a programming challenge.

4
00:00:10.004 --> 00:00:13.005
The Landon Hotel is building a guest service class

5
00:00:13.005 --> 00:00:17.004
to help manage guests room preferences and check-in.

6
00:00:17.004 --> 00:00:20.002
In the class, you'll find three methods stubs

7
00:00:20.002 --> 00:00:23.007
and instructions for completing each method.

8
00:00:23.007 --> 00:00:27.004
Unit tests have also been provided like the past challenges

9
00:00:27.004 --> 00:00:29.004
to help you validate your work.

10
00:00:29.004 --> 00:00:31.004
The first method that you'll need to complete

11
00:00:31.004 --> 00:00:33.007
is filter by favorite room.

12
00:00:33.007 --> 00:00:37.004
It asks you to build a new collection of guests

13
00:00:37.004 --> 00:00:39.007
from the provided list.

14
00:00:39.007 --> 00:00:42.000
The new collection should contain guests

15
00:00:42.000 --> 00:00:44.009
who've placed the provided room in the first position

16
00:00:44.009 --> 00:00:47.006
of their preferred room list.

17
00:00:47.006 --> 00:00:51.001
The next method check-in requires you to enter a guest

18
00:00:51.001 --> 00:00:54.003
into the check-in list similar to our last lesson.

19
00:00:54.003 --> 00:00:57.007
However, you'll notice the list has now been added

20
00:00:57.007 --> 00:01:00.003
into the guest service class.

21
00:01:00.003 --> 00:01:03.005
For the challenge, the check-in method must add

22
00:01:03.005 --> 00:01:07.007
the guests provided as an argument into the check-in list.

23
00:01:07.007 --> 00:01:10.005
Guests are added into the list in the order

24
00:01:10.005 --> 00:01:13.004
they're passed to the method, with one little caveat,

25
00:01:13.004 --> 00:01:16.009
loyalty program members will be placed ahead of other guests

26
00:01:16.009 --> 00:01:19.002
that are not in the program.

27
00:01:19.002 --> 00:01:22.005
The final method you'll need to complete is swap position.

28
00:01:22.005 --> 00:01:25.001
Here you'll trade the places of two guests

29
00:01:25.001 --> 00:01:26.007
within the check-in list.

30
00:01:26.007 --> 00:01:29.002
To do this, it must check that both guests

31
00:01:29.002 --> 00:01:32.001
are in the list prior to doing the swap.

32
00:01:32.001 --> 00:01:34.001
Make sure you follow the numbering sequence

33
00:01:34.001 --> 00:01:35.007
and code this method last

34
00:01:35.007 --> 00:01:38.009
because it relies upon guests being checked in.

35
00:01:38.009 --> 00:01:40.005
So that's the challenge.

36
00:01:40.005 --> 00:01:42.003
Just be aware, the second method

37
00:01:42.003 --> 00:01:43.009
is a little bit more difficult,

38
00:01:43.009 --> 00:01:46.000
but I'm sure you're up for it.

39
00:01:46.000 --> 00:01:49.001
So go ahead and pause the video and give it a shot

40
00:01:49.001 --> 00:01:53.001
when you're ready, resume the video to see my solution.

41
00:01:53.001 --> 00:01:54.005
Hey, welcome back.

42
00:01:54.005 --> 00:01:56.009
Are you ready to see my solution?

43
00:01:56.009 --> 00:01:58.008
In the first method we were provided

44
00:01:58.008 --> 00:02:01.006
with a list of guests and a room.

45
00:02:01.006 --> 00:02:04.007
We need to find the guests in the list

46
00:02:04.007 --> 00:02:07.005
that had indicated the provided room

47
00:02:07.005 --> 00:02:10.008
was their first preference in their preferred room list.

48
00:02:10.008 --> 00:02:12.008
Now I thought this was a great candidate

49
00:02:12.008 --> 00:02:15.005
for a stream and a filter operation.

50
00:02:15.005 --> 00:02:19.000
So I took our lists of guests and I stream them

51
00:02:19.000 --> 00:02:20.008
into the filter method.

52
00:02:20.008 --> 00:02:23.001
And from here, I used a Lambda expression

53
00:02:23.001 --> 00:02:25.001
to create a predicate.

54
00:02:25.001 --> 00:02:28.003
In the predicate, I got the preferred room list

55
00:02:28.003 --> 00:02:33.000
for each guest and I invoked the index of method on it,

56
00:02:33.000 --> 00:02:36.002
passing in the room as an argument.

57
00:02:36.002 --> 00:02:38.006
This gave me the position of the room

58
00:02:38.006 --> 00:02:40.008
within the preferred room list.

59
00:02:40.008 --> 00:02:43.009
I knew that if the room was in the first position,

60
00:02:43.009 --> 00:02:45.004
it was their favorite.

61
00:02:45.004 --> 00:02:49.001
So I could go ahead and invoke the collect method

62
00:02:49.001 --> 00:02:52.006
and use a collector in order to gather

63
00:02:52.006 --> 00:02:55.000
these guests into a list.

64
00:02:55.000 --> 00:02:58.000
This satisfied the return type of the filter by favorite

65
00:02:58.000 --> 00:03:02.005
room method, and my work was complete.

66
00:03:02.005 --> 00:03:05.003
The next method check-in was made a little bit more

67
00:03:05.003 --> 00:03:09.009
difficult by some edge cases involving the loyalty program.

68
00:03:09.009 --> 00:03:13.006
The first thing that I did was I created an if statement

69
00:03:13.006 --> 00:03:15.006
that had an else block.

70
00:03:15.006 --> 00:03:18.005
Inside of the conditional for the if statement,

71
00:03:18.005 --> 00:03:22.001
I checked to see if the guests was a loyalty program member.

72
00:03:22.001 --> 00:03:25.005
Now, I also decided to do a check to make sure

73
00:03:25.005 --> 00:03:29.003
that the check-in list was not empty.

74
00:03:29.003 --> 00:03:31.004
If either of these conditions were false

75
00:03:31.004 --> 00:03:33.004
and we dropped into the else block,

76
00:03:33.004 --> 00:03:35.006
the logic was fairly simple.

77
00:03:35.006 --> 00:03:38.000
We could just go ahead and add the guest

78
00:03:38.000 --> 00:03:39.008
into the check-in list.

79
00:03:39.008 --> 00:03:42.007
That's because we didn't need to place them in any special

80
00:03:42.007 --> 00:03:46.001
position because they weren't a loyalty program member

81
00:03:46.001 --> 00:03:48.002
or the check-in list was empty

82
00:03:48.002 --> 00:03:50.005
and we just put them in the first position.

83
00:03:50.005 --> 00:03:52.008
Now, the logic got much more difficult

84
00:03:52.008 --> 00:03:56.006
if the guests were in the loyalty program.

85
00:03:56.006 --> 00:03:59.006
To handle this, I created a for loop that iterated

86
00:03:59.006 --> 00:04:03.008
through all the guests in the check-in list.

87
00:04:03.008 --> 00:04:06.000
Now, one thing I did with the for loop

88
00:04:06.000 --> 00:04:09.004
is I took the initialization statement and I moved it

89
00:04:09.004 --> 00:04:13.003
outside of the for loops declaration.

90
00:04:13.003 --> 00:04:16.007
And this allowed me to access the counter

91
00:04:16.007 --> 00:04:18.009
outside of for loop, and you'll see why

92
00:04:18.009 --> 00:04:21.000
that was important in a minute.

93
00:04:21.000 --> 00:04:25.009
Inside of the for loop, I created another if statement

94
00:04:25.009 --> 00:04:28.007
and here I used the check-in list

95
00:04:28.007 --> 00:04:32.001
to get each guest with the counter.

96
00:04:32.001 --> 00:04:35.000
So I passed the counter in, which was the index,

97
00:04:35.000 --> 00:04:37.009
and that got me each guest out of list.

98
00:04:37.009 --> 00:04:39.004
And then I just checked to see

99
00:04:39.004 --> 00:04:42.001
if they were a loyalty program member.

100
00:04:42.001 --> 00:04:45.001
If they were, I just continued the loop

101
00:04:45.001 --> 00:04:48.002
because I knew their position in the list was secure

102
00:04:48.002 --> 00:04:51.004
and we weren't going to put somebody in front of them.

103
00:04:51.004 --> 00:04:53.008
Now, if we iterated through this loop

104
00:04:53.008 --> 00:04:57.001
and a guest were not a loyalty program member,

105
00:04:57.001 --> 00:05:00.008
that would mean we wanted to put a loyalty program member

106
00:05:00.008 --> 00:05:02.004
at their position.

107
00:05:02.004 --> 00:05:05.003
So at this point I broke the loop

108
00:05:05.003 --> 00:05:08.008
and I knew that I had captured the position

109
00:05:08.008 --> 00:05:11.009
at which I broke the loop in the counter.

110
00:05:11.009 --> 00:05:17.002
So from there, what I could do was just place the guest

111
00:05:17.002 --> 00:05:20.005
into the check-in list at that position

112
00:05:20.005 --> 00:05:23.008
designated by the counter.

113
00:05:23.008 --> 00:05:26.002
So here you can see I pass in the counter

114
00:05:26.002 --> 00:05:29.000
and then I pass in the loyalty program member

115
00:05:29.000 --> 00:05:32.003
and they will assume that spot within the list.

116
00:05:32.003 --> 00:05:35.009
So that's how I solved the problem with the check-in method.

117
00:05:35.009 --> 00:05:39.000
And from there, I moved on to work on

118
00:05:39.000 --> 00:05:45.006
the swap position method.

119
00:05:45.006 --> 00:05:48.006
This method accepted two guests as arguments,

120
00:05:48.006 --> 00:05:52.008
and we needed to exchange their positions within the list.

121
00:05:52.008 --> 00:05:55.009
So to do that, the first thing that I did was

122
00:05:55.009 --> 00:05:58.003
I got the position of the first guest

123
00:05:58.003 --> 00:06:03.000
within the check-in list using the index of method.

124
00:06:03.000 --> 00:06:06.007
And then I did the same for the second guest.

125
00:06:06.007 --> 00:06:09.009
So I just created another integer position two,

126
00:06:09.009 --> 00:06:14.002
and then passed in guests two, into the index of method.

127
00:06:14.002 --> 00:06:16.006
Now I wanted to make sure that both guests

128
00:06:16.006 --> 00:06:18.007
were in the check-in list.

129
00:06:18.007 --> 00:06:21.008
So to do that, I just created an if statement

130
00:06:21.008 --> 00:06:25.009
and inside of the if statement, I checked that the position

131
00:06:25.009 --> 00:06:29.000
was not equal to negative one.

132
00:06:29.000 --> 00:06:32.003
And then I just did that for the second position as well.

133
00:06:32.003 --> 00:06:35.006
So inside of the body of this if statement,

134
00:06:35.006 --> 00:06:37.008
we could successfully perform the swap

135
00:06:37.008 --> 00:06:42.000
because we knew that both guests were in the check-in list,

136
00:06:42.000 --> 00:06:44.007
Let's go ahead and we'll work on the swap.

137
00:06:44.007 --> 00:06:47.000
We can do that using the set method.

138
00:06:47.000 --> 00:06:50.008
So all pass in position one as my index,

139
00:06:50.008 --> 00:06:55.002
and then I'll place guests to in position one.

140
00:06:55.002 --> 00:06:58.000
And then from there, I'll just do the inverse.

141
00:06:58.000 --> 00:07:01.007
I'll pass in position two as the index,

142
00:07:01.007 --> 00:07:05.007
and then guess one will be placed in position two.

143
00:07:05.007 --> 00:07:08.006
And that successfully completes our swap.

144
00:07:08.006 --> 00:07:09.008
All right, let's go ahead,

145
00:07:09.008 --> 00:07:13.000
we'll run our tests to make sure everything checks out.

146
00:07:13.000 --> 00:07:17.000
So I'll just right click, go to run as J unit test

147
00:07:17.000 --> 00:07:19.002
and there we can see our test pass.

148
00:07:19.002 --> 00:07:20.009
Now you might've gone about the solution

149
00:07:20.009 --> 00:07:23.002
for this challenge in a different way,

150
00:07:23.002 --> 00:07:25.005
and that's okay because when you're working

151
00:07:25.005 --> 00:07:29.000
with collections, there's many ways to solve a problem.

