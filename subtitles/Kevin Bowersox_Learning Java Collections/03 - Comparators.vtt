WEBVTT
1
00:00:00.005 --> 00:00:02.003
- [Instructor] If we would like to sort a collection

2
00:00:02.003 --> 00:00:05.008
using something besides its element's natural order,

3
00:00:05.008 --> 00:00:08.002
we can define our own comparator.

4
00:00:08.002 --> 00:00:11.001
So, let's imagine that we wanted to compare our rooms

5
00:00:11.001 --> 00:00:13.000
using their daily rate.

6
00:00:13.000 --> 00:00:15.002
To do this, we can build a comparator

7
00:00:15.002 --> 00:00:19.006
that overrides the natural order of the room.

8
00:00:19.006 --> 00:00:23.000
This comparison might be something that we use frequently,

9
00:00:23.000 --> 00:00:26.006
so I'm going to create the comparator as a static field

10
00:00:26.006 --> 00:00:29.002
inside of the room class.

11
00:00:29.002 --> 00:00:32.008
So I'll declare the field with a type of comparator,

12
00:00:32.008 --> 00:00:36.000
and then you'll recall that comparators are a generic type,

13
00:00:36.000 --> 00:00:39.008
so I'll specify room as its generic type.

14
00:00:39.008 --> 00:00:44.002
I'm going to name this the RATE_COMPARATOR,

15
00:00:44.002 --> 00:00:47.009
and then we can begin to create our comparator.

16
00:00:47.009 --> 00:00:51.000
To do that, I'm going to use the static methods

17
00:00:51.000 --> 00:00:55.002
found on the comparator that were added in Java 8.

18
00:00:55.002 --> 00:00:58.003
The first is the comparing method.

19
00:00:58.003 --> 00:01:01.002
This allows us to provide a field on the room

20
00:01:01.002 --> 00:01:04.002
that we would like to use for our comparison.

21
00:01:04.002 --> 00:01:07.005
So, in this case, I'm going to pass a method reference

22
00:01:07.005 --> 00:01:09.004
to the getRate field,

23
00:01:09.004 --> 00:01:13.000
so the rate will be used as the sort key.

24
00:01:13.000 --> 00:01:15.008
Okay, let's go ahead and we'll save this.

25
00:01:15.008 --> 00:01:19.000
And then we can navigate over to our application.

26
00:01:19.000 --> 00:01:21.008
Now, you'll notice that we have a list of rooms

27
00:01:21.008 --> 00:01:24.004
currently in this application.

28
00:01:24.004 --> 00:01:26.004
And if we execute the code,

29
00:01:26.004 --> 00:01:29.002
they're being sorted in their natural order.

30
00:01:29.002 --> 00:01:33.004
So, Cambridge, Oxford, then the other Oxford room,

31
00:01:33.004 --> 00:01:35.004
Piccadilly, and Victoria.

32
00:01:35.004 --> 00:01:38.002
Now, watch what happens when we shift this code over

33
00:01:38.002 --> 00:01:40.006
to use the new comparator that we built.

34
00:01:40.006 --> 00:01:42.005
So I'll pass the comparator

35
00:01:42.005 --> 00:01:45.001
into the sort method on the list.

36
00:01:45.001 --> 00:01:47.005
And then I'll go ahead and execute it.

37
00:01:47.005 --> 00:01:50.003
Now, we're sorting in ascending order

38
00:01:50.003 --> 00:01:52.004
by the room's daily rate.

39
00:01:52.004 --> 00:01:53.008
Now, within this output,

40
00:01:53.008 --> 00:01:56.000
you'll notice that we have three rooms

41
00:01:56.000 --> 00:01:58.003
that have the same rate.

42
00:01:58.003 --> 00:02:02.004
Let's add a secondary sort to our comparator.

43
00:02:02.004 --> 00:02:05.006
So I'm going to return to our room class,

44
00:02:05.006 --> 00:02:09.008
and then within the class, we can chain a call

45
00:02:09.008 --> 00:02:12.008
to the thenComparing method

46
00:02:12.008 --> 00:02:17.007
and add another method reference to our secondary sort key.

47
00:02:17.007 --> 00:02:20.007
So, I'm just going to use the room name.

48
00:02:20.007 --> 00:02:23.004
Let me go ahead and provide that method reference.

49
00:02:23.004 --> 00:02:25.008
Then we can return to our application,

50
00:02:25.008 --> 00:02:27.006
and we can execute our code.

51
00:02:27.006 --> 00:02:29.008
Now you'll notice the rooms are sorted,

52
00:02:29.008 --> 00:02:33.004
first by their rate and then by their name.

53
00:02:33.004 --> 00:02:35.003
So Victoria is last,

54
00:02:35.003 --> 00:02:38.003
but then we still have this conflict with Oxford.

55
00:02:38.003 --> 00:02:41.005
So we can head back over to the room class,

56
00:02:41.005 --> 00:02:46.008
and chain another call to build a third sort key

57
00:02:46.008 --> 00:02:48.003
into our comparator.

58
00:02:48.003 --> 00:02:51.004
So I'll just invoke thenComparing once again,

59
00:02:51.004 --> 00:02:54.003
and this time I'm going to use the type

60
00:02:54.003 --> 00:02:57.009
to break the tie in the sort.

61
00:02:57.009 --> 00:03:00.000
Now, back in the application class,

62
00:03:00.000 --> 00:03:02.001
before I execute this code,

63
00:03:02.001 --> 00:03:04.009
I'm going to invoke another method

64
00:03:04.009 --> 00:03:06.008
that's found on the comparator.

65
00:03:06.008 --> 00:03:08.006
And that's the reversed method,

66
00:03:08.006 --> 00:03:11.003
and this just reverses the order

67
00:03:11.003 --> 00:03:13.008
in which we sort the elements.

68
00:03:13.008 --> 00:03:16.009
So in this case, we're going to get the rates

69
00:03:16.009 --> 00:03:21.001
in descending order, and then we will get the name

70
00:03:21.001 --> 00:03:22.009
in reverse alphabetical order,

71
00:03:22.009 --> 00:03:25.008
followed by the type in reverse alphabetical order.

72
00:03:25.008 --> 00:03:28.003
Okay, let's go ahead and check that out.

73
00:03:28.003 --> 00:03:31.005
And you notice that we're now ordering

74
00:03:31.005 --> 00:03:33.009
in a descending order by the rate.

75
00:03:33.009 --> 00:03:37.002
Then we see the names in descending order,

76
00:03:37.002 --> 00:03:39.007
and then the types in descending order.

77
00:03:39.007 --> 00:03:42.005
In the past two lessons, you may have noticed a pattern.

78
00:03:42.005 --> 00:03:44.004
The collections framework provides us

79
00:03:44.004 --> 00:03:46.000
with methods for sorting,

80
00:03:46.000 --> 00:03:48.008
but they're all designed to rely upon logic

81
00:03:48.008 --> 00:03:51.002
that is external to the framework.

82
00:03:51.002 --> 00:03:54.005
So when you define that logic, make sure it's reusable,

83
00:03:54.005 --> 00:03:56.008
through either a comparable implementation

84
00:03:56.008 --> 00:03:58.007
for natural sort order,

85
00:03:58.007 --> 00:04:02.007
or a comparator that is used globally throughout your code.

86
00:04:02.007 --> 00:04:04.004
Then, you won't repeat yourself

87
00:04:04.004 --> 00:04:06.000
all throughout your code base.

