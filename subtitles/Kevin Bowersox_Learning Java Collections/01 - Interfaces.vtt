WEBVTT
1
00:00:00.005 --> 00:00:02.000
- [Instructor] When working with collections,

2
00:00:02.000 --> 00:00:05.008
it's important to have a good understanding of interfaces

3
00:00:05.008 --> 00:00:08.007
because they're used heavily by the framework.

4
00:00:08.007 --> 00:00:11.008
So let's just make sure you're solid on the concept.

5
00:00:11.008 --> 00:00:15.008
That way, you're successful with collections.

6
00:00:15.008 --> 00:00:17.007
On the left-hand side of my screen,

7
00:00:17.007 --> 00:00:20.009
I have an interface named Contract.

8
00:00:20.009 --> 00:00:24.004
I chose that name because the idea of a contract

9
00:00:24.004 --> 00:00:28.005
is commonly used to explain an interface.

10
00:00:28.005 --> 00:00:30.009
An interface is an abstract type,

11
00:00:30.009 --> 00:00:33.006
so that means we can't create an instance of it.

12
00:00:33.006 --> 00:00:35.007
And for our purposes right now,

13
00:00:35.007 --> 00:00:38.008
we're going to say that it cannot define methods

14
00:00:38.008 --> 00:00:42.000
with a body that contain code.

15
00:00:42.000 --> 00:00:46.003
On the interface we can define abstract methods.

16
00:00:46.003 --> 00:00:52.004
So let's go ahead and add one to the interface named term1.

17
00:00:52.004 --> 00:00:56.006
Abstract methods define the roles or terms for a class

18
00:00:56.006 --> 00:00:59.009
that wants to implement the interface.

19
00:00:59.009 --> 00:01:02.008
Any abstract method on the interface

20
00:01:02.008 --> 00:01:07.007
must appear on a class known as an implementation

21
00:01:07.007 --> 00:01:09.008
that implements the interface.

22
00:01:09.008 --> 00:01:12.003
So on the right-hand side of my screen,

23
00:01:12.003 --> 00:01:16.004
you'll notice I have a class named Implementation.

24
00:01:16.004 --> 00:01:19.001
If we would like this class to implement

25
00:01:19.001 --> 00:01:21.001
the contract interface,

26
00:01:21.001 --> 00:01:23.007
all we need to do is type implements,

27
00:01:23.007 --> 00:01:25.008
and then the name of the interface,

28
00:01:25.008 --> 00:01:28.006
which in this case, is Contract.

29
00:01:28.006 --> 00:01:30.004
Now, as soon as we do that,

30
00:01:30.004 --> 00:01:35.002
you'll notice the compiler in my IDE start to complain.

31
00:01:35.002 --> 00:01:36.006
Let's see what's up.

32
00:01:36.006 --> 00:01:38.006
So if we hover over the error,

33
00:01:38.006 --> 00:01:41.004
you'll notice that it's complaining

34
00:01:41.004 --> 00:01:43.006
because our implementation

35
00:01:43.006 --> 00:01:47.004
hasn't defined a method named term1.

36
00:01:47.004 --> 00:01:51.006
This method is required because the implementation class

37
00:01:51.006 --> 00:01:54.002
implements the contract interface.

38
00:01:54.002 --> 00:01:56.003
It's kind of like we're saying the interface,

39
00:01:56.003 --> 00:01:59.003
or the contract, is a template for what methods

40
00:01:59.003 --> 00:02:02.003
should be found on the implementation class.

41
00:02:02.003 --> 00:02:04.004
When the compiler sees the class

42
00:02:04.004 --> 00:02:07.005
doesn't match the template, it complains.

43
00:02:07.005 --> 00:02:10.005
So let's go ahead and add this method to the class.

44
00:02:10.005 --> 00:02:13.001
Just click on add unimplemented methods,

45
00:02:13.001 --> 00:02:15.009
and the IDE will automatically add it

46
00:02:15.009 --> 00:02:17.009
to the body of your class.

47
00:02:17.009 --> 00:02:19.005
Now, inside of this method,

48
00:02:19.005 --> 00:02:22.004
I'm just going to print some console output.

49
00:02:22.004 --> 00:02:24.005
That way, when we execute this code,

50
00:02:24.005 --> 00:02:27.002
we can see what methods invoked.

51
00:02:27.002 --> 00:02:31.005
Okay. So now the implementation has satisfied the terms

52
00:02:31.005 --> 00:02:33.007
of the contract interface.

53
00:02:33.007 --> 00:02:37.003
Let's see what happens if we add a new abstract method.

54
00:02:37.003 --> 00:02:40.005
So I'm just going to add another abstract method named

55
00:02:40.005 --> 00:02:43.002
term2, and look what happened.

56
00:02:43.002 --> 00:02:45.006
Immediately, the compiler complains.

57
00:02:45.006 --> 00:02:47.006
You can probably guess why.

58
00:02:47.006 --> 00:02:52.008
It's because there is a new method on our contract interface

59
00:02:52.008 --> 00:02:56.000
that isn't found on the implementation.

60
00:02:56.000 --> 00:02:59.005
So we added a new role or term to the contract,

61
00:02:59.005 --> 00:03:01.008
and it's not satisfied.

62
00:03:01.008 --> 00:03:04.004
Let's go ahead and satisfy the contract

63
00:03:04.004 --> 00:03:05.009
by adding the method.

64
00:03:05.009 --> 00:03:07.002
And then once again,

65
00:03:07.002 --> 00:03:09.009
I'm just going to add some console output

66
00:03:09.009 --> 00:03:15.003
to help us understand the execution of our code.

67
00:03:15.003 --> 00:03:16.008
All right, with that in place,

68
00:03:16.008 --> 00:03:20.002
we're going to now navigate over to the application class

69
00:03:20.002 --> 00:03:24.005
and here, we're going to use our new contract interface

70
00:03:24.005 --> 00:03:26.008
and its implementation.

71
00:03:26.008 --> 00:03:28.002
So to do that,

72
00:03:28.002 --> 00:03:31.006
I'm going to declare a variable of type contract.

73
00:03:31.006 --> 00:03:35.005
And then, I'm going to instantiate the implementation

74
00:03:35.005 --> 00:03:37.007
and assign it to the contract.

75
00:03:37.007 --> 00:03:41.002
This works because the implementation implements

76
00:03:41.002 --> 00:03:43.002
the contract interface.

77
00:03:43.002 --> 00:03:46.008
And then we can take that object and pass it to anywhere

78
00:03:46.008 --> 00:03:49.007
the contract interface is accepted.

79
00:03:49.007 --> 00:03:51.005
So you'll notice the method signature

80
00:03:51.005 --> 00:03:54.007
for the print terms method has a parameter

81
00:03:54.007 --> 00:03:56.002
of type contract.

82
00:03:56.002 --> 00:04:00.000
So we can pass our contract object into it.

83
00:04:00.000 --> 00:04:02.007
And then inside the body of the method,

84
00:04:02.007 --> 00:04:09.005
we can use that interface to invoke term1 and term2

85
00:04:09.005 --> 00:04:11.000
on our object.

86
00:04:11.000 --> 00:04:12.008
Okay, let's see what happens.

87
00:04:12.008 --> 00:04:17.001
We'll execute this code after we save everything.

88
00:04:17.001 --> 00:04:20.002
And you'll notice term1 and term2 are printed

89
00:04:20.002 --> 00:04:21.003
to the console.

90
00:04:21.003 --> 00:04:24.005
Okay, so we got to cover one final point

91
00:04:24.005 --> 00:04:25.008
that's really important.

92
00:04:25.008 --> 00:04:27.004
And that's inheritance.

93
00:04:27.004 --> 00:04:31.008
Yep, an interface can extend another interface.

94
00:04:31.008 --> 00:04:36.003
So I've created another interface named ExtendedContract.

95
00:04:36.003 --> 00:04:38.007
And on that interface,

96
00:04:38.007 --> 00:04:44.000
I've specified an abstract method named extendedTerm.

97
00:04:44.000 --> 00:04:48.005
What we're going to do is have our contract interface

98
00:04:48.005 --> 00:04:51.006
extend this new interface.

99
00:04:51.006 --> 00:04:55.001
To do that, it's just like inheritance with a class.

100
00:04:55.001 --> 00:04:57.007
We just type extends,

101
00:04:57.007 --> 00:05:00.007
and then the name of the interface

102
00:05:00.007 --> 00:05:04.004
we would like the contract interface to extend.

103
00:05:04.004 --> 00:05:09.003
Now what's going to happen is the contract interface

104
00:05:09.003 --> 00:05:13.006
is now going to expect its implementations

105
00:05:13.006 --> 00:05:17.005
to include the extended term method

106
00:05:17.005 --> 00:05:20.004
because of this inheritance relationship.

107
00:05:20.004 --> 00:05:23.001
And our old friend, the compiler's back.

108
00:05:23.001 --> 00:05:25.004
So you'll notice it's complaining.

109
00:05:25.004 --> 00:05:27.001
Probably can guess why.

110
00:05:27.001 --> 00:05:29.009
It's because our implementation class,

111
00:05:29.009 --> 00:05:33.006
which implements the contract interface,

112
00:05:33.006 --> 00:05:37.004
doesn't have the method that the contract interface

113
00:05:37.004 --> 00:05:41.003
just inherited from ExtendedContract.

114
00:05:41.003 --> 00:05:45.006
Let's go ahead, and we can add that method to the class.

115
00:05:45.006 --> 00:05:47.002
And then I'm going to add

116
00:05:47.002 --> 00:05:52.006
a little bit more debugging output here, just to help us.

117
00:05:52.006 --> 00:05:54.009
All right, so we'll just print this information

118
00:05:54.009 --> 00:05:56.005
to the console.

119
00:05:56.005 --> 00:05:57.006
And I shortened it up.

120
00:05:57.006 --> 00:05:59.000
We just said, extended.

121
00:05:59.000 --> 00:06:02.008
Now let's save all of our work.

122
00:06:02.008 --> 00:06:07.003
And then we can head over to the application class.

123
00:06:07.003 --> 00:06:10.004
And if we take a look at our contract interface,

124
00:06:10.004 --> 00:06:13.008
you'll now see the extended term method appear

125
00:06:13.008 --> 00:06:17.007
because it's now part of that interface through inheritance.

126
00:06:17.007 --> 00:06:21.001
Okay, I'm going to save this and then we can go ahead.

127
00:06:21.001 --> 00:06:23.001
We'll execute our code.

128
00:06:23.001 --> 00:06:25.005
So when we execute this code,

129
00:06:25.005 --> 00:06:28.002
you'll notice that all three methods

130
00:06:28.002 --> 00:06:31.001
defined on the contract interface

131
00:06:31.001 --> 00:06:34.008
and implemented by the implementation class

132
00:06:34.008 --> 00:06:36.005
have been invoked.

133
00:06:36.005 --> 00:06:38.000
When working with collections,

134
00:06:38.000 --> 00:06:40.009
you'll need to understand how interfaces work

135
00:06:40.009 --> 00:06:42.007
to be successful.

136
00:06:42.007 --> 00:06:45.004
The use of inheritance between interfaces

137
00:06:45.004 --> 00:06:49.001
is a central concept underlying the collections framework

138
00:06:49.001 --> 00:06:52.005
that builds relationships between the core interfaces,

139
00:06:52.005 --> 00:06:55.004
and defines what methods you'll have available

140
00:06:55.004 --> 00:06:58.000
to work with on a collection.

