WEBVTT
1
00:00:00.000 --> 00:00:05.005
(upbeat music)

2
00:00:05.005 --> 00:00:07.007
- [Instructor] We're going to do a back-to-back challenge,

3
00:00:07.007 --> 00:00:11.005
so you get more experience working with collections.

4
00:00:11.005 --> 00:00:12.005
In this challenge,

5
00:00:12.005 --> 00:00:15.009
the Landen Hotel has provided three additional methods

6
00:00:15.009 --> 00:00:19.001
on the room service class for you to implement.

7
00:00:19.001 --> 00:00:20.002
Like last time,

8
00:00:20.002 --> 00:00:23.002
they've provided a unit test for you to check your work.

9
00:00:23.002 --> 00:00:25.003
And within the body of each method,

10
00:00:25.003 --> 00:00:26.009
they've included the instructions

11
00:00:26.009 --> 00:00:29.007
for exactly what the method needs to do.

12
00:00:29.007 --> 00:00:31.008
The first method, hasRoom,

13
00:00:31.008 --> 00:00:34.005
will check if the room provided to this method

14
00:00:34.005 --> 00:00:35.009
as an argument,

15
00:00:35.009 --> 00:00:39.000
is found within our collection inventory.

16
00:00:39.000 --> 00:00:41.003
If it is, it'll return the boolean true.

17
00:00:41.003 --> 00:00:44.008
If it's not, it will return the boolean false.

18
00:00:44.008 --> 00:00:47.003
The next method, asArray,

19
00:00:47.003 --> 00:00:52.000
is going to return an array that contains all of the rooms

20
00:00:52.000 --> 00:00:54.005
found in our inventory collection

21
00:00:54.005 --> 00:00:56.007
in the order they were added.

22
00:00:56.007 --> 00:00:59.009
That last part about order is really important,

23
00:00:59.009 --> 00:01:01.006
and you'll want to keep that in mind

24
00:01:01.006 --> 00:01:04.007
while you're working on your solution.

25
00:01:04.007 --> 00:01:07.003
The final method is getByType.

26
00:01:07.003 --> 00:01:10.009
This method is expected to return a new collection

27
00:01:10.009 --> 00:01:13.009
containing all the rooms that match the type

28
00:01:13.009 --> 00:01:17.000
passed into the method as an argument.

29
00:01:17.000 --> 00:01:21.000
So you'll recall that our room class has a type field.

30
00:01:21.000 --> 00:01:23.003
You'll want to compare the argument

31
00:01:23.003 --> 00:01:26.006
that is provided into this method against that field.

32
00:01:26.006 --> 00:01:28.006
And that's going to determine whether or not

33
00:01:28.006 --> 00:01:31.001
you return the room in the new collection.

34
00:01:31.001 --> 00:01:34.003
Now there's one really important instruction here.

35
00:01:34.003 --> 00:01:38.000
The room inventory collection must not be modified,

36
00:01:38.000 --> 00:01:40.002
and the unit test will check for it.

37
00:01:40.002 --> 00:01:45.004
So here you might consider using a copy of the collection.

38
00:01:45.004 --> 00:01:47.000
Okay. That's the challenge.

39
00:01:47.000 --> 00:01:48.009
Go ahead and pause the lesson.

40
00:01:48.009 --> 00:01:49.009
Then when you're ready,

41
00:01:49.009 --> 00:01:51.000
hit the play button,

42
00:01:51.000 --> 00:01:53.001
and I'll share my solution.

43
00:01:53.001 --> 00:01:54.005
Hey, welcome back.

44
00:01:54.005 --> 00:01:57.002
That was a little bit more challenging, right?

45
00:01:57.002 --> 00:01:59.003
Let me show you my solution.

46
00:01:59.003 --> 00:02:02.000
So for the first method, hasRoom,

47
00:02:02.000 --> 00:02:04.001
I knew that the collection interface

48
00:02:04.001 --> 00:02:06.008
had the contains method on it.

49
00:02:06.008 --> 00:02:10.005
So I went ahead and invoked the contains method

50
00:02:10.005 --> 00:02:12.004
on our inventory collection

51
00:02:12.004 --> 00:02:15.007
and passed in the room that was provided to the method.

52
00:02:15.007 --> 00:02:17.006
I knew this would return the right results,

53
00:02:17.006 --> 00:02:19.009
because we had previously overridden

54
00:02:19.009 --> 00:02:22.005
the equals and hashCode methods.

55
00:02:22.005 --> 00:02:25.009
So it was just a matter of executing the statement

56
00:02:25.009 --> 00:02:29.006
and returning its results in line with the return statement.

57
00:02:29.006 --> 00:02:31.000
Okay, let's go ahead,

58
00:02:31.000 --> 00:02:34.004
and we'll move on to our next method, asArray.

59
00:02:34.004 --> 00:02:37.009
For me, this method was kind of a two-parter.

60
00:02:37.009 --> 00:02:41.004
First, I knew I needed to select the right method

61
00:02:41.004 --> 00:02:43.006
on the collection interface.

62
00:02:43.006 --> 00:02:47.001
So I ultimately went with the asArray method.

63
00:02:47.001 --> 00:02:50.002
So I invoked it on the inventory collection.

64
00:02:50.002 --> 00:02:53.000
And then I chose the overloaded form of the method

65
00:02:53.000 --> 00:02:54.009
that accepts an array.

66
00:02:54.009 --> 00:02:57.001
So I declared a new room array

67
00:02:57.001 --> 00:02:59.001
and pass that into the method.

68
00:02:59.001 --> 00:03:00.008
Now what this does for us

69
00:03:00.008 --> 00:03:03.009
is it types the array that is returned

70
00:03:03.009 --> 00:03:06.001
by the toArray method.

71
00:03:06.001 --> 00:03:09.000
This helps us avoid a cast.

72
00:03:09.000 --> 00:03:12.001
Now if we were to execute our unit tests at this point,

73
00:03:12.001 --> 00:03:13.008
they would still fail,

74
00:03:13.008 --> 00:03:18.003
because we have this requirement to maintain order.

75
00:03:18.003 --> 00:03:21.000
If we inspect the implementation that we're using

76
00:03:21.000 --> 00:03:22.000
for our collection,

77
00:03:22.000 --> 00:03:24.004
you'll notice it's the HashSet.

78
00:03:24.004 --> 00:03:27.004
The HashSet doesn't guarantee order.

79
00:03:27.004 --> 00:03:30.005
So I had to switch up the implementation

80
00:03:30.005 --> 00:03:33.002
that we were using for our collection.

81
00:03:33.002 --> 00:03:35.006
I switched over to the linked HashSet

82
00:03:35.006 --> 00:03:37.008
that maintains insertion order.

83
00:03:37.008 --> 00:03:41.003
So as we add elements into the collection,

84
00:03:41.003 --> 00:03:45.001
it's going to hold them in the order they were added.

85
00:03:45.001 --> 00:03:46.008
Now you might have chosen to use

86
00:03:46.008 --> 00:03:50.000
one of the list implementations that maintains order.

87
00:03:50.000 --> 00:03:51.008
That works.

88
00:03:51.008 --> 00:03:53.000
So at this point,

89
00:03:53.000 --> 00:03:54.005
I think we're good on the tests.

90
00:03:54.005 --> 00:03:55.006
But before we run them,

91
00:03:55.006 --> 00:03:59.008
let's go finish up our last method, getByType.

92
00:03:59.008 --> 00:04:03.001
This method was also a two-parter for me.

93
00:04:03.001 --> 00:04:05.003
So the way I started out

94
00:04:05.003 --> 00:04:08.003
was by using the removeIf method.

95
00:04:08.003 --> 00:04:10.006
I invoked it on our inventory collection.

96
00:04:10.006 --> 00:04:13.009
And then I passed in a lambda expression

97
00:04:13.009 --> 00:04:17.006
to the removeIf method that check the type of the room

98
00:04:17.006 --> 00:04:20.002
and compared it against the provided type

99
00:04:20.002 --> 00:04:22.003
and made sure they weren't equal.

100
00:04:22.003 --> 00:04:25.009
This would remove all of the rooms

101
00:04:25.009 --> 00:04:28.002
from the inventory collection

102
00:04:28.002 --> 00:04:30.006
that didn't match the provided type.

103
00:04:30.006 --> 00:04:32.001
Now before we go any further,

104
00:04:32.001 --> 00:04:35.005
let me talk a little bit about the lambda expression.

105
00:04:35.005 --> 00:04:40.000
A lambda is a function that only specifies a parameter

106
00:04:40.000 --> 00:04:41.007
and a body.

107
00:04:41.007 --> 00:04:44.003
You'll notice it doesn't have a name,

108
00:04:44.003 --> 00:04:46.009
and we don't specify the return type.

109
00:04:46.009 --> 00:04:49.003
The return type is inferred by the statement

110
00:04:49.003 --> 00:04:51.004
that I have highlighted.

111
00:04:51.004 --> 00:04:53.006
Between the parameter and the body,

112
00:04:53.006 --> 00:04:57.004
we place an arrow token to construct our lambda.

113
00:04:57.004 --> 00:04:59.004
All right, so that's a little bit about lambdas.

114
00:04:59.004 --> 00:05:01.007
We'll talk about those more later.

115
00:05:01.007 --> 00:05:03.005
Let's get back to our problem.

116
00:05:03.005 --> 00:05:05.004
Methods like removeIf,

117
00:05:05.004 --> 00:05:06.009
remove and add,

118
00:05:06.009 --> 00:05:10.001
they're going to modify the underlying collection,

119
00:05:10.001 --> 00:05:12.005
and collections are mutable.

120
00:05:12.005 --> 00:05:16.000
Our requirements say that the room inventory collection

121
00:05:16.000 --> 00:05:17.009
must not be modified.

122
00:05:17.009 --> 00:05:20.008
So I needed to find a way to handle this.

123
00:05:20.008 --> 00:05:21.008
To do that,

124
00:05:21.008 --> 00:05:24.000
I used a conversion constructor.

125
00:05:24.000 --> 00:05:28.004
So I declared a collection that had a generic type of room.

126
00:05:28.004 --> 00:05:31.004
And then I instantiated a HashSet

127
00:05:31.004 --> 00:05:34.007
and passed in the inventory collection

128
00:05:34.007 --> 00:05:37.007
to its conversion constructor.

129
00:05:37.007 --> 00:05:41.004
This created a new collection implementation

130
00:05:41.004 --> 00:05:44.004
that is not linked to the original,

131
00:05:44.004 --> 00:05:45.008
so I can modify it

132
00:05:45.008 --> 00:05:49.004
without impacting our inventory collection.

133
00:05:49.004 --> 00:05:50.005
So to do that,

134
00:05:50.005 --> 00:05:51.006
let's just go ahead,

135
00:05:51.006 --> 00:05:54.006
and we'll change over from using our inventory collection

136
00:05:54.006 --> 00:05:56.001
to the copy.

137
00:05:56.001 --> 00:05:58.000
The copy will have the rooms

138
00:05:58.000 --> 00:06:01.007
that don't match the type removed by the lambda expression.

139
00:06:01.007 --> 00:06:03.004
And then we can just go ahead

140
00:06:03.004 --> 00:06:07.009
and return that collection that has been modified.

141
00:06:07.009 --> 00:06:11.006
And all this doesn't change the room inventory collection.

142
00:06:11.006 --> 00:06:13.001
Okay. It's the big moment.

143
00:06:13.001 --> 00:06:15.000
It's time to run the tests.

144
00:06:15.000 --> 00:06:17.007
So I'll just right-click within the unit tests,

145
00:06:17.007 --> 00:06:18.009
go to Run as,

146
00:06:18.009 --> 00:06:21.004
and then I'll select JUnit test.

147
00:06:21.004 --> 00:06:23.004
Hey, it looks like things past.

148
00:06:23.004 --> 00:06:24.007
Anytime you're running tests,

149
00:06:24.007 --> 00:06:25.009
you want to see green.

150
00:06:25.009 --> 00:06:28.001
So that's how I solved the challenge.

151
00:06:28.001 --> 00:06:30.002
Maybe you found another way.

152
00:06:30.002 --> 00:06:31.007
When working with collections,

153
00:06:31.007 --> 00:06:34.001
using the right method to achieve your goals

154
00:06:34.001 --> 00:06:35.008
can save you quite a bit of code

155
00:06:35.008 --> 00:06:38.002
and build more concise solutions.

156
00:06:38.002 --> 00:06:40.007
So anytime you feel like your collections code

157
00:06:40.007 --> 00:06:42.006
is getting a little bit cluttered,

158
00:06:42.006 --> 00:06:44.002
head over to the Java docs

159
00:06:44.002 --> 00:06:45.009
and see if you can find a method

160
00:06:45.009 --> 00:06:48.000
that does exactly what you want.

