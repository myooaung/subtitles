WEBVTT
1
00:00:00.005 --> 00:00:02.009
- [Instructor] Let's explore the map implementations,

2
00:00:02.009 --> 00:00:06.002
so you'll know which one to choose for your situation.

3
00:00:06.002 --> 00:00:07.009
In this type hierarchy, we'll find

4
00:00:07.009 --> 00:00:11.004
the three most commonly used map implementations.

5
00:00:11.004 --> 00:00:14.006
The TreeMap is a map implementation that stores

6
00:00:14.006 --> 00:00:18.003
its entries in sorted order within a tree structure.

7
00:00:18.003 --> 00:00:20.008
It implements the NavigableMap interface,

8
00:00:20.008 --> 00:00:23.005
which extends from SortedMap.

9
00:00:23.005 --> 00:00:25.004
Entries in the map are sorted

10
00:00:25.004 --> 00:00:28.002
in ascending order based upon their key.

11
00:00:28.002 --> 00:00:31.005
This allows for rapid retrieval using methods and behaviors

12
00:00:31.005 --> 00:00:34.006
that are similar to what we saw in the tree set.

13
00:00:34.006 --> 00:00:37.002
We won't spend much time discussing the TreeMap

14
00:00:37.002 --> 00:00:38.008
because most of your code will deal

15
00:00:38.008 --> 00:00:41.003
with the HashMap implementation.

16
00:00:41.003 --> 00:00:43.009
A HashMap does not provide any guarantees

17
00:00:43.009 --> 00:00:45.009
about the order of its objects,

18
00:00:45.009 --> 00:00:48.007
but it has a sub-class LinkedHash set

19
00:00:48.007 --> 00:00:51.006
that can access elements in both insertion order

20
00:00:51.006 --> 00:00:53.009
or the order of their last access.

21
00:00:53.009 --> 00:00:56.008
Let's talk a little bit more about how hashing works

22
00:00:56.008 --> 00:01:00.009
because it's a key concept for storing objects in a map.

23
00:01:00.009 --> 00:01:03.006
Hashing is a technique that turns an object

24
00:01:03.006 --> 00:01:07.005
into a numeric value known as its hash value.

25
00:01:07.005 --> 00:01:11.002
To hash an object we run it through a hashing function.

26
00:01:11.002 --> 00:01:13.008
So, we might take a string like LinkedIn

27
00:01:13.008 --> 00:01:17.002
and run it through a hash function to get its hash value.

28
00:01:17.002 --> 00:01:19.006
In Java, the hashCode method is used

29
00:01:19.006 --> 00:01:21.009
to produce an object's hash value.

30
00:01:21.009 --> 00:01:24.004
Here, I've included the hashCode logic

31
00:01:24.004 --> 00:01:28.005
that is used to produce the hash value for a UTF string.

32
00:01:28.005 --> 00:01:30.005
Now, it's not important to understand

33
00:01:30.005 --> 00:01:33.000
the logic other than realizing it's computing

34
00:01:33.000 --> 00:01:36.009
a hash value based on the string's value.

35
00:01:36.009 --> 00:01:39.004
Most basic types in Java like the string

36
00:01:39.004 --> 00:01:41.004
or the wrapper classes for primitives

37
00:01:41.004 --> 00:01:43.006
implement the hashCode method.

38
00:01:43.006 --> 00:01:47.000
However, if you're using your own custom object type,

39
00:01:47.000 --> 00:01:50.005
you'll need to provide an implementation of this method.

40
00:01:50.005 --> 00:01:53.003
When we explored equality, you saw how to generate

41
00:01:53.003 --> 00:01:57.006
a hashCode and equals method using the eclipse IDE.

42
00:01:57.006 --> 00:02:01.009
For most situations, that implementation will be sufficient.

43
00:02:01.009 --> 00:02:04.004
If you need to provide your own implementation

44
00:02:04.004 --> 00:02:06.007
for hashCode, a few rules apply.

45
00:02:06.007 --> 00:02:09.006
First, the hashCode method must consistently produce

46
00:02:09.006 --> 00:02:13.004
the same integer, if it is invoked multiple times.

47
00:02:13.004 --> 00:02:16.000
The hash value can change, if values used

48
00:02:16.000 --> 00:02:19.003
in the object's equals method change.

49
00:02:19.003 --> 00:02:22.004
But, in general, you want it to be pretty stable.

50
00:02:22.004 --> 00:02:25.006
The second rule states that if two objects are equal,

51
00:02:25.006 --> 00:02:27.008
they must produce the same hash value.

52
00:02:27.008 --> 00:02:30.003
And the final rule states that two objects

53
00:02:30.003 --> 00:02:32.000
that are not equal are permitted

54
00:02:32.000 --> 00:02:35.001
to have the same hash value, this is important.

55
00:02:35.001 --> 00:02:38.004
So, you'll notice the two strings in our examples produce

56
00:02:38.004 --> 00:02:42.007
the same hash value, this is known as a collision.

57
00:02:42.007 --> 00:02:44.005
It may seem alarming, however,

58
00:02:44.005 --> 00:02:47.005
there are strategies for handling a collision.

59
00:02:47.005 --> 00:02:50.005
If you violate these rules, when implementing hashCode

60
00:02:50.005 --> 00:02:52.006
and equals the HashMap may have

61
00:02:52.006 --> 00:02:56.009
some unexpected behaviors when handling your objects.

62
00:02:56.009 --> 00:02:59.003
You'll understand why when we dive deeper

63
00:02:59.003 --> 00:03:03.000
into the inner workings of a HashMap in our next lesson.

