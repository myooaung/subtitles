WEBVTT
1
00:00:00.001 --> 00:00:05.006
(upbeat music)

2
00:00:05.006 --> 00:00:06.008
- [Instructor] Okay, I hope you're up

3
00:00:06.008 --> 00:00:08.006
for the final challenge.

4
00:00:08.006 --> 00:00:09.004
In this challenge,

5
00:00:09.004 --> 00:00:12.001
the Landon Hotel has created another class

6
00:00:12.001 --> 00:00:15.009
named BookingService that manages the booking of guests

7
00:00:15.009 --> 00:00:18.001
into rooms in the hotel.

8
00:00:18.001 --> 00:00:20.000
They've started work on the class

9
00:00:20.000 --> 00:00:22.008
by adding a hash map named bookings.

10
00:00:22.008 --> 00:00:27.000
This map will store each room and its associated guests,

11
00:00:27.000 --> 00:00:30.001
but they need your help in completing a few methods.

12
00:00:30.001 --> 00:00:32.004
The first is the book method.

13
00:00:32.004 --> 00:00:34.006
It's provided with a room

14
00:00:34.006 --> 00:00:37.002
and a guest that would like to stay in the room.

15
00:00:37.002 --> 00:00:39.004
The method will place the guest in the room

16
00:00:39.004 --> 00:00:42.005
only if another guest is not staying within it.

17
00:00:42.005 --> 00:00:45.009
The return value of the method is a Boolean that indicates

18
00:00:45.009 --> 00:00:49.006
if placing the guest in the room was successful.

19
00:00:49.006 --> 00:00:52.005
The next method totalRevenue is used to obtain

20
00:00:52.005 --> 00:00:55.004
the current amount of revenue using a calculation

21
00:00:55.004 --> 00:00:58.004
that sums the rates of all booked rooms.

22
00:00:58.004 --> 00:01:00.009
You want to make sure that you complete these methods

23
00:01:00.009 --> 00:01:02.009
in the order they're specified.

24
00:01:02.009 --> 00:01:06.000
And like other challenges, unit tests have been provided

25
00:01:06.000 --> 00:01:09.004
to validate your work once you've finished.

26
00:01:09.004 --> 00:01:13.002
So go ahead, pause the video and work on your solution.

27
00:01:13.002 --> 00:01:14.000
When you're ready,

28
00:01:14.000 --> 00:01:17.004
you can resume the video and I'll walk you through mine.

29
00:01:17.004 --> 00:01:20.001
Welcome back. Did you enjoy the challenge?

30
00:01:20.001 --> 00:01:23.001
I'm going to dive right in to my solution.

31
00:01:23.001 --> 00:01:24.006
For the first method book,

32
00:01:24.006 --> 00:01:28.004
we needed to create an association for the provided key

33
00:01:28.004 --> 00:01:31.003
and the provided guest within our map,

34
00:01:31.003 --> 00:01:34.001
but only if the room was not associated

35
00:01:34.001 --> 00:01:36.007
with a guest in the map already.

36
00:01:36.007 --> 00:01:39.003
So this was a great spot to use

37
00:01:39.003 --> 00:01:41.009
the map's putIfAbsent method.

38
00:01:41.009 --> 00:01:45.004
So on our bookings map, I went ahead and invoked it,

39
00:01:45.004 --> 00:01:49.001
passing in the room and the guest as arguments.

40
00:01:49.001 --> 00:01:52.001
This method will not create an association in the map

41
00:01:52.001 --> 00:01:56.000
if one already exists for the key that we provide.

42
00:01:56.000 --> 00:01:58.005
So if our room is already associated

43
00:01:58.005 --> 00:02:02.002
with a guest in the map, it won't create that association.

44
00:02:02.002 --> 00:02:05.007
In that case, it's just going to return the current value

45
00:02:05.007 --> 00:02:08.008
associated with the key.

46
00:02:08.008 --> 00:02:13.001
Now, if it does create a new association, it returns null.

47
00:02:13.001 --> 00:02:16.001
So I can just evaluate the return value

48
00:02:16.001 --> 00:02:18.004
of the method against null,

49
00:02:18.004 --> 00:02:20.008
which is going to produce a Boolean

50
00:02:20.008 --> 00:02:24.005
that I can return from the method to indicate whether or not

51
00:02:24.005 --> 00:02:27.004
we booked a guest in a room.

52
00:02:27.004 --> 00:02:30.000
So that completed my work for the book method.

53
00:02:30.000 --> 00:02:34.003
And I moved on to work on the totalRevenue method.

54
00:02:34.003 --> 00:02:37.006
This method required us to get the rate of each room

55
00:02:37.006 --> 00:02:40.000
in the booking map and total them

56
00:02:40.000 --> 00:02:44.001
in order to determine how much revenue the hotel is making.

57
00:02:44.001 --> 00:02:45.001
So to do this,

58
00:02:45.001 --> 00:02:48.000
I invoked the keySet method on the map

59
00:02:48.000 --> 00:02:49.007
to get a collection view

60
00:02:49.007 --> 00:02:53.005
that contained all of the keys within the map.

61
00:02:53.005 --> 00:02:57.001
So now I have a collection of the map's keys.

62
00:02:57.001 --> 00:03:01.003
And you'll recall that the map's key type is room,

63
00:03:01.003 --> 00:03:04.003
so it's a collection of rooms.

64
00:03:04.003 --> 00:03:07.002
I took that collection and I streamed it.

65
00:03:07.002 --> 00:03:08.001
On the stream,

66
00:03:08.001 --> 00:03:10.009
I was able to invoke the mapToDouble method.

67
00:03:10.009 --> 00:03:14.004
And then here. I could just pass in a method reference

68
00:03:14.004 --> 00:03:17.001
to the room's getRate method.

69
00:03:17.001 --> 00:03:19.006
This would produce a double stream

70
00:03:19.006 --> 00:03:21.001
and on that double stream,

71
00:03:21.001 --> 00:03:25.000
I could invoke the sum method to perform a calculation

72
00:03:25.000 --> 00:03:27.007
that totaled all of the rooms' rates

73
00:03:27.007 --> 00:03:29.006
and that got me the total revenue.

74
00:03:29.006 --> 00:03:32.008
Okay, let's go ahead and we'll test out that solution.

75
00:03:32.008 --> 00:03:34.002
So in the unit test,

76
00:03:34.002 --> 00:03:38.000
I'm just going to right-click go to run as and JUnit test.

77
00:03:38.000 --> 00:03:39.009
Excellent. It passed.

78
00:03:39.009 --> 00:03:43.002
So I hope you enjoyed this challenge working with the map

79
00:03:43.002 --> 00:03:46.000
and got to better know some of its methods.

