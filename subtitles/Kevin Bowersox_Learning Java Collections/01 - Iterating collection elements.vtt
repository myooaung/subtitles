WEBVTT
1
00:00:00.005 --> 00:00:02.004
- [Instructor] When working with Java Collections,

2
00:00:02.004 --> 00:00:05.006
it's common to traverse or iterate through each element

3
00:00:05.006 --> 00:00:08.003
in the collection, one after the other.

4
00:00:08.003 --> 00:00:11.007
Initially, the framework provided an iterator for the task,

5
00:00:11.007 --> 00:00:14.000
or a basic loop was used.

6
00:00:14.000 --> 00:00:17.002
Then, new versions of Java introduced language features

7
00:00:17.002 --> 00:00:18.009
like the enhanced for-each loop,

8
00:00:18.009 --> 00:00:21.002
and streams that gave us new approaches

9
00:00:21.002 --> 00:00:23.008
for navigating collection elements.

10
00:00:23.008 --> 00:00:24.007
At a high level,

11
00:00:24.007 --> 00:00:27.001
we can categorize the approaches for traversing

12
00:00:27.001 --> 00:00:29.002
a collection into three groups,

13
00:00:29.002 --> 00:00:32.002
loops, iterables, and streams.

14
00:00:32.002 --> 00:00:34.005
First let's talk about loops.

15
00:00:34.005 --> 00:00:37.006
These are the trusted while, do-while, and for loops

16
00:00:37.006 --> 00:00:40.006
that we learned when starting out with Java.

17
00:00:40.006 --> 00:00:43.007
They can be used to iterate collection implementations that

18
00:00:43.007 --> 00:00:46.004
allow positional or reference-based access

19
00:00:46.004 --> 00:00:48.009
to the elements that they hold.

20
00:00:48.009 --> 00:00:53.000
You'll notice I've placed for-each loops into this group.

21
00:00:53.000 --> 00:00:56.002
Using its concise syntax requires the object

22
00:00:56.002 --> 00:00:59.007
we are traversing to implement the iterable interface.

23
00:00:59.007 --> 00:01:01.002
So it's still a loop,

24
00:01:01.002 --> 00:01:04.005
but there's some crossover with iterables.

25
00:01:04.005 --> 00:01:07.000
Before discussing iterables and streams,

26
00:01:07.000 --> 00:01:09.008
let's talk about the collection interface methods

27
00:01:09.008 --> 00:01:12.006
that expose these capabilities.

28
00:01:12.006 --> 00:01:15.003
I've divided these methods into two subgroups

29
00:01:15.003 --> 00:01:18.004
based upon the interface they originate from.

30
00:01:18.004 --> 00:01:21.003
The first set comes from the iterable interface

31
00:01:21.003 --> 00:01:24.003
that the collection interface inherits from.

32
00:01:24.003 --> 00:01:27.003
It provides a functional style for-each method,

33
00:01:27.003 --> 00:01:30.006
and access to iterator and spliterator objects

34
00:01:30.006 --> 00:01:32.007
that we'll talk about next.

35
00:01:32.007 --> 00:01:35.006
In Java 8, the collection interface added methods

36
00:01:35.006 --> 00:01:39.003
for obtaining a stream and a parallel stream.

37
00:01:39.003 --> 00:01:43.006
Let's look closer at what the iterable interface provides.

38
00:01:43.006 --> 00:01:46.004
It defines methods for obtaining an iterator

39
00:01:46.004 --> 00:01:49.007
and spliterator, which is used for sequentially accessing

40
00:01:49.007 --> 00:01:52.002
a collection's elements.

41
00:01:52.002 --> 00:01:55.006
When using an iterator, the has next and next methods

42
00:01:55.006 --> 00:01:58.003
are paired with basic loops to step through

43
00:01:58.003 --> 00:02:00.006
the collection's elements one at a time

44
00:02:00.006 --> 00:02:02.003
in a forward direction.

45
00:02:02.003 --> 00:02:05.006
Let's move on to our last category, streams.

46
00:02:05.006 --> 00:02:08.003
Streams support a functional programming style

47
00:02:08.003 --> 00:02:09.007
within Java.

48
00:02:09.007 --> 00:02:11.001
When using this style,

49
00:02:11.001 --> 00:02:14.002
one or more intermediate operations are applied

50
00:02:14.002 --> 00:02:17.003
to a sequence of elements that flow from a source,

51
00:02:17.003 --> 00:02:20.003
like a collection, to form a pipeline.

52
00:02:20.003 --> 00:02:23.007
A single termination operation completes the pipeline

53
00:02:23.007 --> 00:02:27.004
by modifying the elements or returning a result.

54
00:02:27.004 --> 00:02:30.007
The operations used in a pipeline often accept

55
00:02:30.007 --> 00:02:33.005
Lambda expressions that determine the processing

56
00:02:33.005 --> 00:02:36.001
that will be applied to each element.

57
00:02:36.001 --> 00:02:39.004
The processing by any operation on a stream

58
00:02:39.004 --> 00:02:42.007
does not modify the underlying source collection.

59
00:02:42.007 --> 00:02:46.001
However, in some cases, it will return a new collection

60
00:02:46.001 --> 00:02:49.001
without modifying the source.

61
00:02:49.001 --> 00:02:52.003
In this chapter, we'll look closer at using iterators

62
00:02:52.003 --> 00:02:55.000
and streams with collections.

