WEBVTT
1
00:00:00.005 --> 00:00:01.007
- [Instructor] The List interface

2
00:00:01.007 --> 00:00:04.000
and its implementations are the next group

3
00:00:04.000 --> 00:00:06.009
of collections that we'll explore.

4
00:00:06.009 --> 00:00:07.008
Within this group,

5
00:00:07.008 --> 00:00:11.001
we'll find some of the most frequently used classes in Java,

6
00:00:11.001 --> 00:00:13.009
like an ArrayList and a LinkedList.

7
00:00:13.009 --> 00:00:16.002
Lists are very helpful because they allow us

8
00:00:16.002 --> 00:00:18.005
to store an ordered group of the elements

9
00:00:18.005 --> 00:00:20.009
and provide a set of methods for working

10
00:00:20.009 --> 00:00:22.008
with those elements by their position

11
00:00:22.008 --> 00:00:25.009
in the structure using random access.

12
00:00:25.009 --> 00:00:28.000
An elements position is specified

13
00:00:28.000 --> 00:00:30.000
by using a zero-based index,

14
00:00:30.000 --> 00:00:32.009
which is similar to how we work with an array.

15
00:00:32.009 --> 00:00:34.007
On the type hierarchy of the list,

16
00:00:34.007 --> 00:00:37.004
there are four basic implementations.

17
00:00:37.004 --> 00:00:40.008
Most Java developers consider the Vector and Stack types

18
00:00:40.008 --> 00:00:43.007
that came before collections to be obsolete.

19
00:00:43.007 --> 00:00:46.006
So we'll only dive deeper into the ArrayList

20
00:00:46.006 --> 00:00:49.004
and the LinkedList implementations.

21
00:00:49.004 --> 00:00:50.007
In this type hierarchy,

22
00:00:50.007 --> 00:00:53.005
you'll notice some crossover between the LinkedList

23
00:00:53.005 --> 00:00:56.000
and the hierarchy of the Queue interface.

24
00:00:56.000 --> 00:00:57.005
That's because the LinkedList

25
00:00:57.005 --> 00:01:00.001
implements the Deque interface.

26
00:01:00.001 --> 00:01:02.007
This relationship causes some additional methods

27
00:01:02.007 --> 00:01:04.006
to appear on the LinkedList

28
00:01:04.006 --> 00:01:07.003
that are not found on the ArrayList.

29
00:01:07.003 --> 00:01:09.008
Of the two, the ArrayList implementation

30
00:01:09.008 --> 00:01:12.002
is the most frequently used.

31
00:01:12.002 --> 00:01:16.004
As its name implies, it is internally backed by an array.

32
00:01:16.004 --> 00:01:19.008
This array is created with an initial capacity

33
00:01:19.008 --> 00:01:23.002
upon instantiation of the list.

34
00:01:23.002 --> 00:01:26.008
If we exceed the initial capacity of the internal array

35
00:01:26.008 --> 00:01:28.004
when adding a new element,

36
00:01:28.004 --> 00:01:31.001
the ArrayList automatically resizes

37
00:01:31.001 --> 00:01:33.001
by creating a new, larger array

38
00:01:33.001 --> 00:01:36.004
that holds the new and existing elements.

39
00:01:36.004 --> 00:01:39.002
Operations that add or remove an element

40
00:01:39.002 --> 00:01:40.007
in the middle of the array list

41
00:01:40.007 --> 00:01:42.008
will automatically adjust the position

42
00:01:42.008 --> 00:01:46.001
of the remaining elements in its internal structure.

43
00:01:46.001 --> 00:01:49.008
It does this by copying them to their new indexes.

44
00:01:49.008 --> 00:01:52.003
This can have performance implications

45
00:01:52.003 --> 00:01:54.005
if we need to insert many elements

46
00:01:54.005 --> 00:01:57.004
into the middle of a large ArrayList.

47
00:01:57.004 --> 00:01:59.009
However, reading or retrieving an item

48
00:01:59.009 --> 00:02:01.008
from the ArrayList is relatively fast

49
00:02:01.008 --> 00:02:03.009
since we can use random access

50
00:02:03.009 --> 00:02:06.007
to get an element by its position.

51
00:02:06.007 --> 00:02:10.008
The LinkedList implementation uses a doubly linked list

52
00:02:10.008 --> 00:02:13.009
as its internal structure instead of an array.

53
00:02:13.009 --> 00:02:16.005
It uses nodes that contain references

54
00:02:16.005 --> 00:02:19.006
that link objects together into a sequence

55
00:02:19.006 --> 00:02:22.005
that forms the LinkedList.

56
00:02:22.005 --> 00:02:25.004
Each node in the list holds an element,

57
00:02:25.004 --> 00:02:27.002
a reference to the next element,

58
00:02:27.002 --> 00:02:30.002
and a reference to the previous element.

59
00:02:30.002 --> 00:02:32.005
The ends of this internal structure will point

60
00:02:32.005 --> 00:02:34.004
to a null reference in memory.

61
00:02:34.004 --> 00:02:37.005
This is how we can tell if we're at the end of the list.

62
00:02:37.005 --> 00:02:40.006
So when an element is added to the LinkedList,

63
00:02:40.006 --> 00:02:43.007
the original references are broken.

64
00:02:43.007 --> 00:02:46.003
Then new references are established

65
00:02:46.003 --> 00:02:50.004
to point to the new next and new previous elements.

66
00:02:50.004 --> 00:02:52.007
The same re-linking process occurs

67
00:02:52.007 --> 00:02:55.006
when we remove an element from the LinkedList.

68
00:02:55.006 --> 00:02:57.001
In some situations,

69
00:02:57.001 --> 00:03:00.006
it provides better performance for these operations.

70
00:03:00.006 --> 00:03:02.002
This makes adding elements

71
00:03:02.002 --> 00:03:04.009
into a LinkedList relatively fast

72
00:03:04.009 --> 00:03:08.004
because we can just re-point the nodes references.

73
00:03:08.004 --> 00:03:10.008
However, a LinkedList is not ideal

74
00:03:10.008 --> 00:03:12.005
for retrieving an element.

75
00:03:12.005 --> 00:03:15.007
That's because we need to traverse all of the references

76
00:03:15.007 --> 00:03:19.003
that proceed the element that we want to access.

77
00:03:19.003 --> 00:03:21.006
Unfortunately, there's not a silver bullet

78
00:03:21.006 --> 00:03:23.008
for choosing a list implementation.

79
00:03:23.008 --> 00:03:26.009
It's going to depend on which methods you use the most

80
00:03:26.009 --> 00:03:29.003
and the number of elements that are in it.

81
00:03:29.003 --> 00:03:32.004
Now, most developers will lean heavily towards

82
00:03:32.004 --> 00:03:35.004
the ArrayList and some developers will even question

83
00:03:35.004 --> 00:03:37.004
if we need the LinkedList.

84
00:03:37.004 --> 00:03:38.008
So here's my advice.

85
00:03:38.008 --> 00:03:40.008
Start with an ArrayList

86
00:03:40.008 --> 00:03:44.002
and use the List interface as your variable type.

87
00:03:44.002 --> 00:03:46.005
Then if you encounter performance issues,

88
00:03:46.005 --> 00:03:49.000
you can just change up the implementation later.

