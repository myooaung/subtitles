WEBVTT
1
00:00:00.005 --> 00:00:02.008
- [Instructor] Next, we'll explore the interfaces

2
00:00:02.008 --> 00:00:05.003
and implementations related to queues

3
00:00:05.003 --> 00:00:07.008
within the Java collections framework.

4
00:00:07.008 --> 00:00:11.004
If you've ever stood in a line you're familiar with a queue.

5
00:00:11.004 --> 00:00:12.008
You enter at the back of the line,

6
00:00:12.008 --> 00:00:15.001
which is also known as its tail.

7
00:00:15.001 --> 00:00:17.004
Then you wait until you're at the head of the line,

8
00:00:17.004 --> 00:00:21.000
or we might say the front of the line before it's your turn.

9
00:00:21.000 --> 00:00:23.002
In Java, a queue is a collection

10
00:00:23.002 --> 00:00:25.007
that is used to hold elements for processing,

11
00:00:25.007 --> 00:00:28.000
sort of like the line we just discussed.

12
00:00:28.000 --> 00:00:30.002
Queues typically work the same way.

13
00:00:30.002 --> 00:00:33.002
The first item in the queue is the first to be processed,

14
00:00:33.002 --> 00:00:35.001
just like the first person in a line

15
00:00:35.001 --> 00:00:37.000
is the first to get their turn.

16
00:00:37.000 --> 00:00:40.009
We call this first-in, first-out, or FIFO order.

17
00:00:40.009 --> 00:00:43.008
Most implementations of a queue are FIFO,

18
00:00:43.008 --> 00:00:46.006
but there are some that use a priority ranking

19
00:00:46.006 --> 00:00:48.006
or another ordering strategy

20
00:00:48.006 --> 00:00:51.008
to arrange their elements for processing.

21
00:00:51.008 --> 00:00:54.004
To work with the queue, six methods are included

22
00:00:54.004 --> 00:00:56.006
on its interface in addition to those

23
00:00:56.006 --> 00:01:00.002
that are inherited by extending the collection interface.

24
00:01:00.002 --> 00:01:03.003
Using a visual, we can see how these methods are used

25
00:01:03.003 --> 00:01:04.008
to work with the queue.

26
00:01:04.008 --> 00:01:08.002
Methods like add or offer are used to add items

27
00:01:08.002 --> 00:01:10.000
to the tail of the queue.

28
00:01:10.000 --> 00:01:13.000
Operations like pull and remove are performed

29
00:01:13.000 --> 00:01:14.004
at the head of the queue.

30
00:01:14.004 --> 00:01:17.003
These methods are used to retrieve the next element

31
00:01:17.003 --> 00:01:19.007
in the queue for processing and will remove it

32
00:01:19.007 --> 00:01:21.000
from the collection.

33
00:01:21.000 --> 00:01:23.009
If we want to examine the element at the head of the queue

34
00:01:23.009 --> 00:01:27.008
without removing it, we can use the element or peek methods

35
00:01:27.008 --> 00:01:29.008
to get a reference to the element.

36
00:01:29.008 --> 00:01:32.003
Now, if we actually wanted to remove the element

37
00:01:32.003 --> 00:01:35.000
at the head, we would have to use poll or remove,

38
00:01:35.000 --> 00:01:36.006
which we just saw.

39
00:01:36.006 --> 00:01:38.009
You might be wondering why there are two methods

40
00:01:38.009 --> 00:01:41.008
for each of these operations on the queue.

41
00:01:41.008 --> 00:01:43.008
The difference between them is how they deal

42
00:01:43.008 --> 00:01:46.002
with a full or an empty queue.

43
00:01:46.002 --> 00:01:49.000
There are queues that have a maximum capacity,

44
00:01:49.000 --> 00:01:52.002
which are known as a bounded or blocking queue.

45
00:01:52.002 --> 00:01:55.007
If we attempt to insert an element into a bounded queue

46
00:01:55.007 --> 00:01:59.000
which is full, the add method will throw an exception,

47
00:01:59.000 --> 00:02:02.006
while the offer method will return false.

48
00:02:02.006 --> 00:02:06.001
A similar situation occurs when the queue is empty.

49
00:02:06.001 --> 00:02:09.000
If we try to remove or examine the head element

50
00:02:09.000 --> 00:02:12.004
in an empty queue, the methods remove an element

51
00:02:12.004 --> 00:02:13.009
will throw an exception,

52
00:02:13.009 --> 00:02:16.006
while poll and peek will return null.

53
00:02:16.006 --> 00:02:19.002
If we take a look at the type hierarchy for a queue,

54
00:02:19.002 --> 00:02:21.007
you'll notice that two of its implementations

55
00:02:21.007 --> 00:02:26.002
actually implement the deque interface that extends queue.

56
00:02:26.002 --> 00:02:27.007
Of these implementations,

57
00:02:27.007 --> 00:02:29.009
ArrayDeque is the most commonly used

58
00:02:29.009 --> 00:02:32.004
queue and deck implementation.

59
00:02:32.004 --> 00:02:34.006
The LinkedList is not used often,

60
00:02:34.006 --> 00:02:37.001
and the PriorityQueue uses a comparitor

61
00:02:37.001 --> 00:02:40.000
or elements implementing the comparable interface

62
00:02:40.000 --> 00:02:42.007
to determine their position within the queue.

63
00:02:42.007 --> 00:02:44.007
So it's one of those queues we mentioned

64
00:02:44.007 --> 00:02:47.002
that don't use FIFO order.

65
00:02:47.002 --> 00:02:50.001
I should point out that I've only listed types found

66
00:02:50.001 --> 00:02:52.003
in the java.util package.

67
00:02:52.003 --> 00:02:55.002
There's another group of specialized queue interfaces

68
00:02:55.002 --> 00:02:59.002
and types found within the java.util.concurrent package

69
00:02:59.002 --> 00:03:01.009
for handling multithreaded scenarios.

70
00:03:01.009 --> 00:03:04.004
We'll mainly use the ArrayDeque implementation

71
00:03:04.004 --> 00:03:06.009
for working with a deque and a queue.

72
00:03:06.009 --> 00:03:09.005
So let's first do some hands-on examples,

73
00:03:09.005 --> 00:03:12.006
working with it as a queue, then we'll take a closer look

74
00:03:12.006 --> 00:03:16.000
at the deque interfaces later in the chapter.

