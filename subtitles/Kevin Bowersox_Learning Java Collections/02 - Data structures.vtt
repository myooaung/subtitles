WEBVTT
1
00:00:00.005 --> 00:00:01.006
- [Instructor] So we established

2
00:00:01.006 --> 00:00:03.004
that the Java collections framework

3
00:00:03.004 --> 00:00:07.004
provides data structures for the Java programming language.

4
00:00:07.004 --> 00:00:10.008
Now let's talk more about what data structures do.

5
00:00:10.008 --> 00:00:12.008
That way you'll know what to expect

6
00:00:12.008 --> 00:00:16.003
when you start working with Java collections.

7
00:00:16.003 --> 00:00:18.006
At their core, data structures are used

8
00:00:18.006 --> 00:00:23.000
to store, organize, manage, and retrieve data.

9
00:00:23.000 --> 00:00:25.008
Each data structure has its own unique features

10
00:00:25.008 --> 00:00:27.009
that set it apart from the others.

11
00:00:27.009 --> 00:00:30.003
But at a high level, these capabilities

12
00:00:30.003 --> 00:00:32.008
are provided by a few common operations

13
00:00:32.008 --> 00:00:35.006
that are found on every data structure.

14
00:00:35.006 --> 00:00:39.002
First, there's operations that allow us to add values

15
00:00:39.002 --> 00:00:41.008
into the structure for storage.

16
00:00:41.008 --> 00:00:44.003
Some data structures will define the position

17
00:00:44.003 --> 00:00:46.006
where a new element is stored.

18
00:00:46.006 --> 00:00:49.004
For example, one data structure known as a queue

19
00:00:49.004 --> 00:00:52.008
pushes elements into the front of its structure.

20
00:00:52.008 --> 00:00:54.009
Other data structures, like a list,

21
00:00:54.009 --> 00:00:58.007
let us choose the position where a new element is placed.

22
00:00:58.007 --> 00:01:01.009
So we might specify that we want to add a new element

23
00:01:01.009 --> 00:01:05.002
as the third item near the middle of its structure.

24
00:01:05.002 --> 00:01:08.001
When new elements are added to a data structure,

25
00:01:08.001 --> 00:01:09.003
they're stored according

26
00:01:09.003 --> 00:01:13.001
to an internally defined organization strategy.

27
00:01:13.001 --> 00:01:15.007
This strategy is typically optimized

28
00:01:15.007 --> 00:01:17.003
for a particular operation,

29
00:01:17.003 --> 00:01:20.000
like retrieving or inserting an element.

30
00:01:20.000 --> 00:01:22.004
When working with a linear data structure,

31
00:01:22.004 --> 00:01:26.001
its elements are organized to form a sequence.

32
00:01:26.001 --> 00:01:29.007
Other data structures based on trees or hashing functions,

33
00:01:29.007 --> 00:01:32.006
will use more complicated organizational strategies

34
00:01:32.006 --> 00:01:35.000
to store their elements.

35
00:01:35.000 --> 00:01:38.005
Once elements are placed inside the structure for storage,

36
00:01:38.005 --> 00:01:41.007
we can use other operations to manage the elements

37
00:01:41.007 --> 00:01:44.005
if we need to make changes to the structure.

38
00:01:44.005 --> 00:01:48.001
For example, we might decide to remove an element.

39
00:01:48.001 --> 00:01:52.009
Or we might need to replace an element in the structure.

40
00:01:52.009 --> 00:01:56.005
Another common operation is to apply a sorting algorithm

41
00:01:56.005 --> 00:01:59.006
that rearranges the data structure's elements.

42
00:01:59.006 --> 00:02:02.005
We also need to be able to retrieve elements

43
00:02:02.005 --> 00:02:04.009
that were stored in the data structure,

44
00:02:04.009 --> 00:02:08.001
which can be achieved using several operations

45
00:02:08.001 --> 00:02:10.008
that provide access to the elements.

46
00:02:10.008 --> 00:02:13.006
Retrieving an element at a specific position

47
00:02:13.006 --> 00:02:17.004
or with a key is known as random access.

48
00:02:17.004 --> 00:02:19.004
It normally provides better performance

49
00:02:19.004 --> 00:02:21.004
because it does not need to traverse

50
00:02:21.004 --> 00:02:23.003
all the elements in the structure

51
00:02:23.003 --> 00:02:25.002
to find the target element.

52
00:02:25.002 --> 00:02:29.001
If we need to retrieve every element in the data structure,

53
00:02:29.001 --> 00:02:32.009
we can use operations or control structures like loops

54
00:02:32.009 --> 00:02:36.000
that iterate through each element.

55
00:02:36.000 --> 00:02:39.004
Finally, many data structures expose operations

56
00:02:39.004 --> 00:02:40.006
that allow us to search

57
00:02:40.006 --> 00:02:43.001
for a particular element in the structure,

58
00:02:43.001 --> 00:02:45.006
either to remove it, find its position,

59
00:02:45.006 --> 00:02:49.001
or to check if it exists.

60
00:02:49.001 --> 00:02:50.008
There's a bit more to it than that,

61
00:02:50.008 --> 00:02:52.002
but that's a high level look

62
00:02:52.002 --> 00:02:56.000
at some common operations found on data structures.

63
00:02:56.000 --> 00:03:00.002
Next, we'll start diving into the Java collections framework

64
00:03:00.002 --> 00:03:02.007
where you'll find a hierarchy of collection types

65
00:03:02.007 --> 00:03:07.000
that support different mixtures of these capabilities.

