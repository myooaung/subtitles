WEBVTT
1
00:00:00.004 --> 00:00:02.000
- [Instructor] When working with collections,

2
00:00:02.000 --> 00:00:05.003
the order of elements comes into play quite often,

3
00:00:05.003 --> 00:00:07.008
but order isn't always as straightforward

4
00:00:07.008 --> 00:00:09.000
as you might think.

5
00:00:09.000 --> 00:00:12.000
For example, if I ask you to order these coins,

6
00:00:12.000 --> 00:00:13.007
you would likely place them in order

7
00:00:13.007 --> 00:00:17.001
by their monetary value as we see in the picture.

8
00:00:17.001 --> 00:00:19.007
Things like currency, letters and numbers

9
00:00:19.007 --> 00:00:23.000
have a default way they're compared like monetary value,

10
00:00:23.000 --> 00:00:26.003
alphabetical order or numeric value.

11
00:00:26.003 --> 00:00:28.008
When we perform these default comparisons

12
00:00:28.008 --> 00:00:30.003
on a group of objects,

13
00:00:30.003 --> 00:00:35.002
it places them into an order known as their natural order.

14
00:00:35.002 --> 00:00:37.008
However, there's cases where the natural order

15
00:00:37.008 --> 00:00:39.005
isn't what's required.

16
00:00:39.005 --> 00:00:41.006
A coin collector might order the coins

17
00:00:41.006 --> 00:00:43.004
by their size for storage,

18
00:00:43.004 --> 00:00:46.007
or maybe by the year that they were minted.

19
00:00:46.007 --> 00:00:49.001
When writing code that must order objects,

20
00:00:49.001 --> 00:00:52.006
these same types of considerations appear.

21
00:00:52.006 --> 00:00:55.006
The concept of natural order also applies

22
00:00:55.006 --> 00:00:58.002
to most common Java data types.

23
00:00:58.002 --> 00:01:01.002
Dates are naturally ordered chronologically,

24
00:01:01.002 --> 00:01:04.008
numbers like int and long use their numeric value

25
00:01:04.008 --> 00:01:08.000
and strings are ordered alphabetically.

26
00:01:08.000 --> 00:01:10.008
So you might wonder how the natural order

27
00:01:10.008 --> 00:01:13.001
of these data types is determined,

28
00:01:13.001 --> 00:01:15.007
or how would we specify the natural order

29
00:01:15.007 --> 00:01:18.002
for a custom class that we built.

30
00:01:18.002 --> 00:01:21.000
In Java, the comparable interface is used

31
00:01:21.000 --> 00:01:24.003
to specify the natural order of a data type.

32
00:01:24.003 --> 00:01:26.005
Classes that implement the interface

33
00:01:26.005 --> 00:01:30.002
define a compare to method that accepts another object

34
00:01:30.002 --> 00:01:32.002
as an argument.

35
00:01:32.002 --> 00:01:36.008
This argument is evaluated against the current instance.

36
00:01:36.008 --> 00:01:39.001
The comparison logic built into the type

37
00:01:39.001 --> 00:01:40.007
can be used by other code,

38
00:01:40.007 --> 00:01:43.009
like a collection or a sort method to determine

39
00:01:43.009 --> 00:01:47.007
the natural order for a group of objects with that type.

40
00:01:47.007 --> 00:01:50.007
On the interface, you'll notice the compare to method

41
00:01:50.007 --> 00:01:54.005
returns an integer that has a special meaning.

42
00:01:54.005 --> 00:01:57.004
It indicates the result of the compare to method

43
00:01:57.004 --> 00:02:01.003
after the current instance is evaluated against the instance

44
00:02:01.003 --> 00:02:04.003
provided to the method as an argument.

45
00:02:04.003 --> 00:02:07.003
Let's call the current instance this,

46
00:02:07.003 --> 00:02:11.004
and we'll call the object that it's compared against that.

47
00:02:11.004 --> 00:02:13.002
When we compare this to that,

48
00:02:13.002 --> 00:02:15.007
the result will be one of three outcomes

49
00:02:15.007 --> 00:02:19.002
that we're going to demonstrate using some pseudocode.

50
00:02:19.002 --> 00:02:22.004
If the current instance or this is greater

51
00:02:22.004 --> 00:02:25.004
than the provided instance or that,

52
00:02:25.004 --> 00:02:28.009
the compare to method returns any positive number.

53
00:02:28.009 --> 00:02:31.001
When the method is used for sorting,

54
00:02:31.001 --> 00:02:35.008
it would cause this to be placed after that in the order.

55
00:02:35.008 --> 00:02:38.001
If this is less than that,

56
00:02:38.001 --> 00:02:40.008
the method returns any negative number.

57
00:02:40.008 --> 00:02:44.009
This outcome would cause this to appear before that

58
00:02:44.009 --> 00:02:46.003
in the sort order.

59
00:02:46.003 --> 00:02:49.001
And finally, if this is equal to that,

60
00:02:49.001 --> 00:02:50.008
the method returns zero.

61
00:02:50.008 --> 00:02:53.006
Using these values returned by the comparable

62
00:02:53.006 --> 00:02:56.000
allows objects of a type to be placed

63
00:02:56.000 --> 00:02:58.000
into their natural order.

64
00:02:58.000 --> 00:03:00.001
But sometimes we want to use something

65
00:03:00.001 --> 00:03:01.008
other than the natural order.

66
00:03:01.008 --> 00:03:05.001
For these situations, we can use a comparator.

67
00:03:05.001 --> 00:03:08.004
A comparator is another interface that is implemented

68
00:03:08.004 --> 00:03:11.009
by a class that compares two objects.

69
00:03:11.009 --> 00:03:15.001
Unlike the comparable, which performs the comparison

70
00:03:15.001 --> 00:03:17.008
inside of the type that you're comparing,

71
00:03:17.008 --> 00:03:22.003
this comparison occurs externally in another object.

72
00:03:22.003 --> 00:03:23.001
To do that,

73
00:03:23.001 --> 00:03:27.006
two objects are passed as arguments into the compare method.

74
00:03:27.006 --> 00:03:30.008
This method performs the comparison of the two objects

75
00:03:30.008 --> 00:03:33.004
and returns an integer that follows logic

76
00:03:33.004 --> 00:03:35.004
similar to the comparable.

77
00:03:35.004 --> 00:03:36.003
In Java eight,

78
00:03:36.003 --> 00:03:39.000
the comparable interface was updated to include

79
00:03:39.000 --> 00:03:41.004
many new static and default methods

80
00:03:41.004 --> 00:03:45.001
that can be used for chaining comparators.

81
00:03:45.001 --> 00:03:48.004
One trick you can use to remember how a comparator works

82
00:03:48.004 --> 00:03:52.005
is to think of it like a balancing scale with two objects.

83
00:03:52.005 --> 00:03:53.006
Like the scale,

84
00:03:53.006 --> 00:03:58.000
the comparator needs two objects to perform its comparison.

85
00:03:58.000 --> 00:04:00.003
Now that we better understand order,

86
00:04:00.003 --> 00:04:02.004
let's take a look at how collections

87
00:04:02.004 --> 00:04:05.000
are sorted in our next lesson.

