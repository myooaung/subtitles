WEBVTT
1
00:00:00.005 --> 00:00:03.001
- [Instructor] TreeSet is another set implementation

2
00:00:03.001 --> 00:00:05.001
that uses a binary search tree

3
00:00:05.001 --> 00:00:08.001
to organize the elements it stores.

4
00:00:08.001 --> 00:00:10.009
The relationships between two elements is used

5
00:00:10.009 --> 00:00:14.003
to structure the tree that stores data in a TreeSet,

6
00:00:14.003 --> 00:00:17.002
so the collection must have a way to compare

7
00:00:17.002 --> 00:00:20.002
whether an element is greater than, less than,

8
00:00:20.002 --> 00:00:22.001
or equal to another element.

9
00:00:22.001 --> 00:00:25.000
To do this, the TreeSet uses a comparator,

10
00:00:25.000 --> 00:00:28.003
or elements that implement the comparatable interface,

11
00:00:28.003 --> 00:00:32.002
to perform the relational comparison between the elements.

12
00:00:32.002 --> 00:00:34.002
Unlike the other collections we've seen,

13
00:00:34.002 --> 00:00:36.008
the TreeSet uses this relational comparison

14
00:00:36.008 --> 00:00:40.004
to evaluate elements instead of the equals method.

15
00:00:40.004 --> 00:00:42.002
This introduces some challenges

16
00:00:42.002 --> 00:00:45.004
when working with custom objects in a TreeSet.

17
00:00:45.004 --> 00:00:47.002
There can be problems that are unique

18
00:00:47.002 --> 00:00:51.001
to your exact situation, so if you're using custom objects

19
00:00:51.001 --> 00:00:54.003
make sure you refer to the Java docs.

20
00:00:54.003 --> 00:00:55.008
Let's walk through an example

21
00:00:55.008 --> 00:00:59.001
that uses a TreeSet to store integers.

22
00:00:59.001 --> 00:01:02.004
The integer is a great choice for working with the TreeSet

23
00:01:02.004 --> 00:01:05.000
because it has a natural sort order.

24
00:01:05.000 --> 00:01:06.009
This sort order places integers

25
00:01:06.009 --> 00:01:09.009
into an ascending numeric order.

26
00:01:09.009 --> 00:01:12.001
We can get started by declaring a variable

27
00:01:12.001 --> 00:01:15.004
that uses a NavigableSet as its type.

28
00:01:15.004 --> 00:01:18.002
Inside of the set I'm going to store integers,

29
00:01:18.002 --> 00:01:21.007
so I'll specify that as its generic type.

30
00:01:21.007 --> 00:01:24.007
I'm just going to call this set the numberTree,

31
00:01:24.007 --> 00:01:27.004
and then I'm going to use the TreeSet

32
00:01:27.004 --> 00:01:30.003
as my set implementation.

33
00:01:30.003 --> 00:01:34.003
Now, here, I'm going to pass in this list of numbers,

34
00:01:34.003 --> 00:01:37.001
that we've created, into the constructor.

35
00:01:37.001 --> 00:01:39.004
And then I can go ahead and import the types,

36
00:01:39.004 --> 00:01:41.008
and now I have my TreeSet.

37
00:01:41.008 --> 00:01:43.008
All right, now let's start out simple

38
00:01:43.008 --> 00:01:49.006
and we can stream this TreeSet to the console.

39
00:01:49.006 --> 00:01:53.003
So I'll just use the forEach method,

40
00:01:53.003 --> 00:01:56.008
within the stream, and that should print everything out.

41
00:01:56.008 --> 00:02:00.004
Now, watch what happens as I execute this code.

42
00:02:00.004 --> 00:02:03.003
The numbers are placed in ascending order

43
00:02:03.003 --> 00:02:07.000
in accordance with the integer sort order.

44
00:02:07.000 --> 00:02:09.002
Now, we can do some different things from here.

45
00:02:09.002 --> 00:02:11.009
If we wanted to get the set in descending order

46
00:02:11.009 --> 00:02:15.004
we can use the descendingSet method to switch it up,

47
00:02:15.004 --> 00:02:18.006
and you'll notice that now we have our integers

48
00:02:18.006 --> 00:02:20.009
iterated through in descending order

49
00:02:20.009 --> 00:02:23.009
as returned by the descendingSet.

50
00:02:23.009 --> 00:02:27.007
Another method, headSet, allows us to get

51
00:02:27.007 --> 00:02:30.004
all of the integers, in the tree,

52
00:02:30.004 --> 00:02:32.008
that are lower than a particular number,

53
00:02:32.008 --> 00:02:35.005
so, here, I'm going to get a new set

54
00:02:35.005 --> 00:02:41.002
that contains all integers lower than 1,750.

55
00:02:41.002 --> 00:02:43.004
There, you can see that set.

56
00:02:43.004 --> 00:02:45.008
It also has a counterpart, tailSet,

57
00:02:45.008 --> 00:02:47.005
which will give us all numbers

58
00:02:47.005 --> 00:02:49.007
higher than a particular number,

59
00:02:49.007 --> 00:02:51.006
so now we're going to get a set

60
00:02:51.006 --> 00:02:54.007
with numbers greater than 1750.

61
00:02:54.007 --> 00:02:59.006
There's also a subSet that allows us to pick a set

62
00:02:59.006 --> 00:03:02.007
that is between a range of two numbers,

63
00:03:02.007 --> 00:03:05.000
so I'll go ahead and pick all the numbers

64
00:03:05.000 --> 00:03:08.001
between 1750 and 2750.

65
00:03:08.001 --> 00:03:10.002
Now let's watch what happens there.

66
00:03:10.002 --> 00:03:12.004
You'll notice that I got everything

67
00:03:12.004 --> 00:03:16.008
between the two numbers that I provided.

68
00:03:16.008 --> 00:03:19.004
Now there's also methods for getting numbers

69
00:03:19.004 --> 00:03:22.004
within the proximity of another number,

70
00:03:22.004 --> 00:03:25.001
so, here, I'm going to get the number

71
00:03:25.001 --> 00:03:31.004
that is just lower than 750, and that's going to be 500.

72
00:03:31.004 --> 00:03:32.008
There's a counterpart method, here,

73
00:03:32.008 --> 00:03:37.000
higher that we can use that will give us the next number

74
00:03:37.000 --> 00:03:41.008
that is just higher than 750, and that's 1,000.

75
00:03:41.008 --> 00:03:45.000
So that's a quick glance at the TreeSet implementation,

76
00:03:45.000 --> 00:03:47.003
and we got to see a few of those methods

77
00:03:47.003 --> 00:03:50.000
that are available on the NavigableSet.

