WEBVTT
1
00:00:00.005 --> 00:00:02.002
- [Instructor] Let's walk through a few examples

2
00:00:02.002 --> 00:00:06.001
involving iterables to see how to traverse a collection.

3
00:00:06.001 --> 00:00:07.001
To get us started,

4
00:00:07.001 --> 00:00:08.009
I've created a collection of rooms

5
00:00:08.009 --> 00:00:12.000
that's backed by an array list implementation.

6
00:00:12.000 --> 00:00:14.000
If we want to create an instance

7
00:00:14.000 --> 00:00:16.004
of an iterator from this collection,

8
00:00:16.004 --> 00:00:18.009
we can declare a variable of type Iterator

9
00:00:18.009 --> 00:00:21.003
and give it a generic type of Room.

10
00:00:21.003 --> 00:00:23.000
I'll then give it a name

11
00:00:23.000 --> 00:00:24.006
and from there we can invoke

12
00:00:24.006 --> 00:00:27.008
the iterator method on our collection.

13
00:00:27.008 --> 00:00:30.000
This is a factory method that returns

14
00:00:30.000 --> 00:00:32.008
a new instance of an iterator.

15
00:00:32.008 --> 00:00:34.006
I'm going to use this iterator

16
00:00:34.006 --> 00:00:37.000
to print some output to the console.

17
00:00:37.000 --> 00:00:38.006
To do that, I'll just invoke

18
00:00:38.006 --> 00:00:41.002
the next method on the iterator.

19
00:00:41.002 --> 00:00:45.000
Now because the iterator is backed by the collection,

20
00:00:45.000 --> 00:00:49.003
we can access collection elements through the next method.

21
00:00:49.003 --> 00:00:51.005
Each time we call the next method,

22
00:00:51.005 --> 00:00:56.004
it's going to advance one position forward in the collection

23
00:00:56.004 --> 00:00:58.005
and return an element.

24
00:00:58.005 --> 00:01:01.003
That element is going to be of type Room

25
00:01:01.003 --> 00:01:04.003
because our iterator is generically typed.

26
00:01:04.003 --> 00:01:06.008
So as I look through the methods that we can invoke

27
00:01:06.008 --> 00:01:10.001
on the element returned by the next method,

28
00:01:10.001 --> 00:01:13.006
you'll see that we have all the methods from the room type.

29
00:01:13.006 --> 00:01:16.007
I'll go ahead and print the name to the console.

30
00:01:16.007 --> 00:01:19.007
Now I'm going to do this two more times

31
00:01:19.007 --> 00:01:22.003
and each time that we invoke the next method,

32
00:01:22.003 --> 00:01:26.002
the iterator's going to advance and return a room.

33
00:01:26.002 --> 00:01:29.004
Now watch what happens when we execute this code.

34
00:01:29.004 --> 00:01:32.000
The iterator advances through the collection,

35
00:01:32.000 --> 00:01:34.003
returns the room and prints the name.

36
00:01:34.003 --> 00:01:36.008
So there we can see all of the names

37
00:01:36.008 --> 00:01:39.006
of our rooms in the collection.

38
00:01:39.006 --> 00:01:41.006
Now one thing that's important to know

39
00:01:41.006 --> 00:01:43.002
about this factory method

40
00:01:43.002 --> 00:01:46.004
is that it returns a new instance of an iterator.

41
00:01:46.004 --> 00:01:48.001
So if I do something like this

42
00:01:48.001 --> 00:01:51.007
and I create a second iterator instance,

43
00:01:51.007 --> 00:01:53.005
and then in this last line of code

44
00:01:53.005 --> 00:01:56.009
I switch over to use the second iterator instance,

45
00:01:56.009 --> 00:02:00.006
watch what happens when I execute the code.

46
00:02:00.006 --> 00:02:04.008
The first iterator instance prints Piccadilly and Cambridge

47
00:02:04.008 --> 00:02:05.008
and then you'll notice

48
00:02:05.008 --> 00:02:09.007
our second iterator instance prints Piccadilly.

49
00:02:09.007 --> 00:02:12.007
That's because the second iterator instance

50
00:02:12.007 --> 00:02:15.001
only tracks its own progress

51
00:02:15.001 --> 00:02:17.009
traversing through the collection's elements.

52
00:02:17.009 --> 00:02:21.000
It's separate from the first iterator.

53
00:02:21.000 --> 00:02:22.003
So through this example,

54
00:02:22.003 --> 00:02:25.007
you can see how we get different iterator instances

55
00:02:25.007 --> 00:02:28.001
from that factory method.

56
00:02:28.001 --> 00:02:32.002
Now this isn't how we typically use an iterator.

57
00:02:32.002 --> 00:02:34.002
Normally when using an iterator

58
00:02:34.002 --> 00:02:36.008
it's in combination with a while loop.

59
00:02:36.008 --> 00:02:39.005
So let me go ahead and create a while loop

60
00:02:39.005 --> 00:02:41.001
that uses our iterator

61
00:02:41.001 --> 00:02:43.007
to traverse through the collection of rooms.

62
00:02:43.007 --> 00:02:45.002
Okay, so there we see it

63
00:02:45.002 --> 00:02:48.000
and let's start to dissect this pattern.

64
00:02:48.000 --> 00:02:50.007
One of the most important parts is this call

65
00:02:50.007 --> 00:02:54.005
to hasnext within the condition of the while loop.

66
00:02:54.005 --> 00:02:57.001
Hasnext is a method on the iterator

67
00:02:57.001 --> 00:03:00.008
that's going to return a Boolean that indicates

68
00:03:00.008 --> 00:03:05.000
if the iterator has more elements to traverse through.

69
00:03:05.000 --> 00:03:06.007
If this method returns false,

70
00:03:06.007 --> 00:03:08.008
we'll fall out of the wild loop.

71
00:03:08.008 --> 00:03:10.003
But while it's true,

72
00:03:10.003 --> 00:03:13.002
we'll continue iterating through our iterator.

73
00:03:13.002 --> 00:03:15.008
And inside of the body of our loop,

74
00:03:15.008 --> 00:03:17.007
we can invoke the next method

75
00:03:17.007 --> 00:03:20.005
to get each element from the collection.

76
00:03:20.005 --> 00:03:24.003
Now my IDE has placed a cast in here that's unnecessary,

77
00:03:24.003 --> 00:03:26.000
so I'm going to remove it

78
00:03:26.000 --> 00:03:27.009
and then I'll just print out

79
00:03:27.009 --> 00:03:30.008
each room's name to the console.

80
00:03:30.008 --> 00:03:31.008
All right, let's go ahead

81
00:03:31.008 --> 00:03:33.007
and we can execute this code,

82
00:03:33.007 --> 00:03:36.009
and there you can see how we can use a while loop

83
00:03:36.009 --> 00:03:42.003
and an iterator to traverse through a collection.

84
00:03:42.003 --> 00:03:44.002
This was a popular approach

85
00:03:44.002 --> 00:03:47.004
for iterating a collection prior to Java 5.0

86
00:03:47.004 --> 00:03:51.000
when the enhanced for loop was introduced.

87
00:03:51.000 --> 00:03:54.003
This loop, also known as the for-each loop,

88
00:03:54.003 --> 00:03:57.008
provides a concise way to iterate through a collection.

89
00:03:57.008 --> 00:03:59.006
Let's check it out.

90
00:03:59.006 --> 00:04:02.005
I'm just going to type foreach in my IDE,

91
00:04:02.005 --> 00:04:05.003
then hit control + space, then enter,

92
00:04:05.003 --> 00:04:06.009
and this will cause Eclipse

93
00:04:06.009 --> 00:04:10.001
to build out for-each loop for me.

94
00:04:10.001 --> 00:04:13.007
This for-each loop iterates through all of the elements

95
00:04:13.007 --> 00:04:15.009
in our rooms collection.

96
00:04:15.009 --> 00:04:18.008
Now let's break down its syntax.

97
00:04:18.008 --> 00:04:21.003
On the right side of the statement,

98
00:04:21.003 --> 00:04:24.007
you'll see that we have our collection of rooms

99
00:04:24.007 --> 00:04:28.003
and you'll recall that the collection interface

100
00:04:28.003 --> 00:04:30.008
extends the iterable interface.

101
00:04:30.008 --> 00:04:35.000
Any object that we place on the right side of this statement

102
00:04:35.000 --> 00:04:37.008
is going to be iterated through

103
00:04:37.008 --> 00:04:40.002
and we need that iterable interface

104
00:04:40.002 --> 00:04:42.006
to be implemented by that object

105
00:04:42.006 --> 00:04:46.004
because it's used to obtain an iterator.

106
00:04:46.004 --> 00:04:50.004
And each time that we iterate through our for loop,

107
00:04:50.004 --> 00:04:53.001
the next method on that iterator is called

108
00:04:53.001 --> 00:04:56.006
to get the next element in our collection.

109
00:04:56.006 --> 00:05:00.000
That element is going to be assigned to the variable

110
00:05:00.000 --> 00:05:03.001
declared on the left side of this statement.

111
00:05:03.001 --> 00:05:06.004
Now because our collection is generically typed,

112
00:05:06.004 --> 00:05:09.000
the internal code for the for-each loop

113
00:05:09.000 --> 00:05:10.009
can take advantage of that typing

114
00:05:10.009 --> 00:05:13.000
and it knows what type to assign

115
00:05:13.000 --> 00:05:15.006
each element retrieved from the iterator.

116
00:05:15.006 --> 00:05:17.003
Within the body of the loop,

117
00:05:17.003 --> 00:05:18.009
we can use this variable.

118
00:05:18.009 --> 00:05:21.004
So I'm just going to go ahead

119
00:05:21.004 --> 00:05:24.000
and use it to get the name of the room,

120
00:05:24.000 --> 00:05:26.002
and we can print it out to the console.

121
00:05:26.002 --> 00:05:30.000
Just remember with each iteration of this loop,

122
00:05:30.000 --> 00:05:31.006
an iterator is called

123
00:05:31.006 --> 00:05:34.003
to get the next element in our collection

124
00:05:34.003 --> 00:05:37.004
and that value is assigned to this variable.

125
00:05:37.004 --> 00:05:40.007
And we can see that in action if we execute our code

126
00:05:40.007 --> 00:05:43.006
because you'll notice that using the for-each loop,

127
00:05:43.006 --> 00:05:45.009
we were able to print out the name

128
00:05:45.009 --> 00:05:48.002
of each room in our collection.

129
00:05:48.002 --> 00:05:50.004
So those are some of the most common patterns

130
00:05:50.004 --> 00:05:54.003
involving iterables that we use to traverse a collection.

131
00:05:54.003 --> 00:05:57.005
In these patterns, loops play an important role.

132
00:05:57.005 --> 00:05:58.008
But as you'll soon see,

133
00:05:58.008 --> 00:06:01.004
we can achieve similar results in most cases

134
00:06:01.004 --> 00:06:04.000
using a functional programming style.

