WEBVTT
1
00:00:00.005 --> 00:00:01.008
- [Instructor] Let's take a closer look

2
00:00:01.008 --> 00:00:04.009
at sorting collections by walking through a few examples

3
00:00:04.009 --> 00:00:07.001
that use a natural sort order.

4
00:00:07.001 --> 00:00:10.005
We'll start by giving our room class a natural order.

5
00:00:10.005 --> 00:00:13.009
The order will sort the rooms in alphabetical order first

6
00:00:13.009 --> 00:00:16.002
by their name, and then by their type.

7
00:00:16.002 --> 00:00:18.001
To specify a natural order,

8
00:00:18.001 --> 00:00:21.007
a type must implement the comparable interface.

9
00:00:21.007 --> 00:00:24.003
So let's go ahead and honor room class.

10
00:00:24.003 --> 00:00:26.007
We'll implement the interface.

11
00:00:26.007 --> 00:00:30.000
The interface accepts a generic type argument.

12
00:00:30.000 --> 00:00:33.002
In this case, I'm going to specify that as room,

13
00:00:33.002 --> 00:00:36.009
this will allow an instance of a room to be compared

14
00:00:36.009 --> 00:00:39.003
against another instance of a room.

15
00:00:39.003 --> 00:00:42.004
Now you'll notice the compiler immediately complaints,

16
00:00:42.004 --> 00:00:44.003
and that's because we haven't satisfied

17
00:00:44.003 --> 00:00:46.002
the comparable interface.

18
00:00:46.002 --> 00:00:48.004
So just hover over the room class

19
00:00:48.004 --> 00:00:51.009
and then click on add unimplemented methods.

20
00:00:51.009 --> 00:00:55.000
And then you'll notice that within your room class,

21
00:00:55.000 --> 00:00:57.000
you'll get a CompareTo method.

22
00:00:57.000 --> 00:00:59.004
Now here we'll need to provide the logic

23
00:00:59.004 --> 00:01:03.004
that performs the comparison between the two rooms.

24
00:01:03.004 --> 00:01:04.005
So to start out,

25
00:01:04.005 --> 00:01:08.003
I'm going to declare a new integer named result.

26
00:01:08.003 --> 00:01:12.001
Our result variable will be assigned the return value

27
00:01:12.001 --> 00:01:14.004
of comparing the names of the rooms.

28
00:01:14.004 --> 00:01:17.005
So I'm going to get the name of the current room,

29
00:01:17.005 --> 00:01:21.003
and then I'm going to invoke it's CompareTo method,

30
00:01:21.003 --> 00:01:24.001
which accepts another string.

31
00:01:24.001 --> 00:01:25.005
So here you can see

32
00:01:25.005 --> 00:01:28.008
I'm leveraging the comparable implementation

33
00:01:28.008 --> 00:01:30.002
of the string object.

34
00:01:30.002 --> 00:01:33.007
I'm delegating the comparison to another type.

35
00:01:33.007 --> 00:01:36.008
Now here, we just need to provide the name

36
00:01:36.008 --> 00:01:40.000
of the other room that we're comparing against.

37
00:01:40.000 --> 00:01:42.006
This is going to result in an integer

38
00:01:42.006 --> 00:01:46.003
that's either negative, positive, or zero.

39
00:01:46.003 --> 00:01:49.004
Now, if it's anything besides zero,

40
00:01:49.004 --> 00:01:53.009
it means the comparison was resolved with our primary sort.

41
00:01:53.009 --> 00:01:55.004
So in that case,

42
00:01:55.004 --> 00:02:00.009
we can check to see if the result is not equal to zero,

43
00:02:00.009 --> 00:02:03.008
and then we can just return the result

44
00:02:03.008 --> 00:02:06.004
in this ternary expression.

45
00:02:06.004 --> 00:02:08.008
Now, if the result is zero,

46
00:02:08.008 --> 00:02:12.009
we can resolve the conflict using a secondary sort.

47
00:02:12.009 --> 00:02:15.007
So to do that, we're going to do something similar

48
00:02:15.007 --> 00:02:18.007
by getting the type of the room,

49
00:02:18.007 --> 00:02:22.000
and then we're going to invoke it's CompareTo method,

50
00:02:22.000 --> 00:02:26.002
and then we're going to pass in the type of the other room

51
00:02:26.002 --> 00:02:28.004
and this should break the tie.

52
00:02:28.004 --> 00:02:32.004
Okay, so we have our CompareTo implementation.

53
00:02:32.004 --> 00:02:36.002
Now let's head over to our application class.

54
00:02:36.002 --> 00:02:39.007
In this class, I've created a list of rooms

55
00:02:39.007 --> 00:02:42.005
and in the list are five rooms.

56
00:02:42.005 --> 00:02:45.005
Now one thing I'll point out is that two of the rooms

57
00:02:45.005 --> 00:02:48.003
have the same name, but different types.

58
00:02:48.003 --> 00:02:51.001
So here you see Oxford as a guest room

59
00:02:51.001 --> 00:02:53.006
and Oxford as a suite.

60
00:02:53.006 --> 00:02:57.002
Now let's first start out by just executing this code

61
00:02:57.002 --> 00:03:01.000
and you can see that the rooms are placed

62
00:03:01.000 --> 00:03:03.002
in their insertion order.

63
00:03:03.002 --> 00:03:06.003
Now let's go ahead and change that by sorting them

64
00:03:06.003 --> 00:03:10.002
using their natural order.

65
00:03:10.002 --> 00:03:14.003
To do this, we can use the collections class provided

66
00:03:14.003 --> 00:03:16.000
by the collections framework.

67
00:03:16.000 --> 00:03:17.006
Now don't get this confused

68
00:03:17.006 --> 00:03:20.001
with the actual collection interface.

69
00:03:20.001 --> 00:03:21.003
It's different.

70
00:03:21.003 --> 00:03:24.005
It provides static methods that we can use to work

71
00:03:24.005 --> 00:03:26.009
with a collection like a list.

72
00:03:26.009 --> 00:03:30.002
So I'm going to go ahead and invoke the sort method

73
00:03:30.002 --> 00:03:32.004
and pass in our list of rooms.

74
00:03:32.004 --> 00:03:34.007
Now watch what happens.

75
00:03:34.007 --> 00:03:37.002
You'll notice that the rooms are placed

76
00:03:37.002 --> 00:03:39.001
in alphabetical order.

77
00:03:39.001 --> 00:03:43.002
And then when we have a room that has the same name,

78
00:03:43.002 --> 00:03:46.003
we order by the type.

79
00:03:46.003 --> 00:03:52.001
So that's our natural sort order in action.

80
00:03:52.001 --> 00:03:55.002
Now there is an overloaded form of this method.

81
00:03:55.002 --> 00:03:57.008
So let's take a look at that.

82
00:03:57.008 --> 00:04:02.006
The overloaded form accepts our list and then a comparitor.

83
00:04:02.006 --> 00:04:05.002
So I can go ahead and pass in our rooms.

84
00:04:05.002 --> 00:04:07.002
And then I can use a comparitor

85
00:04:07.002 --> 00:04:10.002
that specifies the natural order.

86
00:04:10.002 --> 00:04:13.001
And you'll see that we get the same result.

87
00:04:13.001 --> 00:04:15.008
Now in more recent versions of Java,

88
00:04:15.008 --> 00:04:18.005
a sort method was added to the list.

89
00:04:18.005 --> 00:04:21.005
So we can do something like this.

90
00:04:21.005 --> 00:04:24.009
We can invoke the sort method on our room's list,

91
00:04:24.009 --> 00:04:29.005
and then we no longer need to pass in the collection.

92
00:04:29.005 --> 00:04:31.009
All we need to provide is a comparitor.

93
00:04:31.009 --> 00:04:33.000
And when we do this,

94
00:04:33.000 --> 00:04:35.007
we'll get the same results as last time.

95
00:04:35.007 --> 00:04:38.007
This is the preferred method for sorting a list

96
00:04:38.007 --> 00:04:40.006
since it's been introduced.

97
00:04:40.006 --> 00:04:42.005
When specifying the order of elements,

98
00:04:42.005 --> 00:04:44.006
be sure to leverage the language features

99
00:04:44.006 --> 00:04:46.001
that are provided to you.

100
00:04:46.001 --> 00:04:48.009
Using the existing comparable implementations

101
00:04:48.009 --> 00:04:51.002
and the comparitor static methods

102
00:04:51.002 --> 00:04:53.003
will help you write higher quality code

103
00:04:53.003 --> 00:04:55.009
that avoids logic errors that can be introduced

104
00:04:55.009 --> 00:04:58.000
by custom comparison logic.

