WEBVTT
1
00:00:00.005 --> 00:00:02.001
- [Instructor] Let's talk a little bit about

2
00:00:02.001 --> 00:00:03.002
what a collection does

3
00:00:03.002 --> 00:00:06.009
before taking a look at some code that uses a collection.

4
00:00:06.009 --> 00:00:09.004
You can think of a collection as an object

5
00:00:09.004 --> 00:00:11.008
that groups other objects together

6
00:00:11.008 --> 00:00:13.007
and provide some common operations

7
00:00:13.007 --> 00:00:15.006
for working with the group.

8
00:00:15.006 --> 00:00:18.005
A collection makes it much easier to write code

9
00:00:18.005 --> 00:00:20.006
where you're working with multiple objects,

10
00:00:20.006 --> 00:00:23.006
and the number of objects can not be predicted.

11
00:00:23.006 --> 00:00:24.009
I'll demonstrate this

12
00:00:24.009 --> 00:00:28.000
using a simple example for the Landon Hotel.

13
00:00:28.000 --> 00:00:30.003
The Landon Hotel is a fictional hotel

14
00:00:30.003 --> 00:00:33.000
that we'll be using for examples and challenges

15
00:00:33.000 --> 00:00:34.008
throughout the course.

16
00:00:34.008 --> 00:00:36.003
So to kick things off,

17
00:00:36.003 --> 00:00:38.004
let's imagine that the Landon Hotel

18
00:00:38.004 --> 00:00:40.002
would like to manage the rooms

19
00:00:40.002 --> 00:00:43.009
and understand the potential revenue from them being booked.

20
00:00:43.009 --> 00:00:46.009
We might model something like a room class.

21
00:00:46.009 --> 00:00:47.009
Within that class,

22
00:00:47.009 --> 00:00:50.001
we could place fields for the name of the room,

23
00:00:50.001 --> 00:00:54.009
its type, its capacity and its daily rate.

24
00:00:54.009 --> 00:00:57.005
You'll also notice there's a constructor for the room

25
00:00:57.005 --> 00:00:59.000
to create an instance of it

26
00:00:59.000 --> 00:01:02.000
and accessors for all of its fields.

27
00:01:02.000 --> 00:01:03.008
Then in our application,

28
00:01:03.008 --> 00:01:06.009
we might write some logic like this.

29
00:01:06.009 --> 00:01:08.001
We might create some rooms.

30
00:01:08.001 --> 00:01:11.006
So here you see we have two, Cambridge and Manchester.

31
00:01:11.006 --> 00:01:14.009
And then we would pass those rooms into a method

32
00:01:14.009 --> 00:01:18.001
that would perform the potential revenue calculation.

33
00:01:18.001 --> 00:01:21.003
So you'll notice that I've created that method,

34
00:01:21.003 --> 00:01:24.008
and it accepts two parameters of type Room.

35
00:01:24.008 --> 00:01:26.005
Inside of the method's body,

36
00:01:26.005 --> 00:01:29.001
it takes those rooms and gets their rates

37
00:01:29.001 --> 00:01:31.000
and then totals the rates together

38
00:01:31.000 --> 00:01:33.006
to calculate the potential revenue.

39
00:01:33.006 --> 00:01:37.000
Now what would happen if we wanted to add a third room

40
00:01:37.000 --> 00:01:39.000
into this calculation?

41
00:01:39.000 --> 00:01:40.000
Let's see.

42
00:01:40.000 --> 00:01:42.002
I'm going to copy our room,

43
00:01:42.002 --> 00:01:46.000
and then I'll switch it over to be a room named Piccadilly.

44
00:01:46.000 --> 00:01:49.006
So let's switch up these constructor arguments.

45
00:01:49.006 --> 00:01:53.001
I'll make Piccadilly a guest room.

46
00:01:53.001 --> 00:01:55.000
It will hold three people,

47
00:01:55.000 --> 00:01:59.001
and it's going to cost $125 per night.

48
00:01:59.001 --> 00:02:01.004
Okay. Now that we have the third room,

49
00:02:01.004 --> 00:02:05.004
we need to include it by passing it as an argument

50
00:02:05.004 --> 00:02:06.004
to the method.

51
00:02:06.004 --> 00:02:10.009
And that means we'll need to refactor this method signature

52
00:02:10.009 --> 00:02:14.000
to accept a third room parameter.

53
00:02:14.000 --> 00:02:16.006
Then we'll have to adjust the calculation

54
00:02:16.006 --> 00:02:19.000
to account for the third room.

55
00:02:19.000 --> 00:02:22.002
So you can see how brittle this code is.

56
00:02:22.002 --> 00:02:24.006
And it's not very extensible.

57
00:02:24.006 --> 00:02:26.006
If we wanted to add a fourth room,

58
00:02:26.006 --> 00:02:30.001
we would have to go through the same refactoring process.

59
00:02:30.001 --> 00:02:33.008
Now we can do this much better using a collection

60
00:02:33.008 --> 00:02:37.001
to manage all of these objects as a group.

61
00:02:37.001 --> 00:02:38.002
So let's go ahead.

62
00:02:38.002 --> 00:02:41.009
I'm going to create a collection that holds rooms.

63
00:02:41.009 --> 00:02:43.007
I'll give it a name of rooms.

64
00:02:43.007 --> 00:02:46.007
And then I'm going to use a static factory method

65
00:02:46.007 --> 00:02:50.004
on the list in order to create the collection.

66
00:02:50.004 --> 00:02:54.004
Now, instead of passing in these three arguments

67
00:02:54.004 --> 00:02:56.003
to our method,

68
00:02:56.003 --> 00:03:01.007
I'm just going to replace them with our room's collection.

69
00:03:01.007 --> 00:03:04.006
And then I'm going to place those rooms

70
00:03:04.006 --> 00:03:07.001
inside of the static factory method

71
00:03:07.001 --> 00:03:10.007
so that they are included in our collection.

72
00:03:10.007 --> 00:03:13.001
Now we'll still need to refactor

73
00:03:13.001 --> 00:03:15.003
the getPotentialRevenue method

74
00:03:15.003 --> 00:03:18.007
in order to accept a single parameter.

75
00:03:18.007 --> 00:03:19.008
So let's go ahead.

76
00:03:19.008 --> 00:03:22.007
We'll get rid of these three room parameters.

77
00:03:22.007 --> 00:03:25.002
And then I'm going to declare another parameter

78
00:03:25.002 --> 00:03:27.003
that's of type Collection,

79
00:03:27.003 --> 00:03:29.004
and I'll name it rooms.

80
00:03:29.004 --> 00:03:32.008
Then we can go ahead and adjust our calculation.

81
00:03:32.008 --> 00:03:34.008
So instead of performing this addition,

82
00:03:34.008 --> 00:03:37.008
I'm going to take our collection of rooms,

83
00:03:37.008 --> 00:03:39.004
and I'll stream it.

84
00:03:39.004 --> 00:03:43.002
And then I can use a method named mapToDouble.

85
00:03:43.002 --> 00:03:46.006
And I'll get the rate of each room

86
00:03:46.006 --> 00:03:49.007
using a lambda expression.

87
00:03:49.007 --> 00:03:50.006
And then from there,

88
00:03:50.006 --> 00:03:53.008
all I need to do is call the sum method

89
00:03:53.008 --> 00:03:58.001
to total the rate of each room in our collection.

90
00:03:58.001 --> 00:04:00.003
Okay. That's much easier.

91
00:04:00.003 --> 00:04:04.002
You'll notice we're now managing these objects together

92
00:04:04.002 --> 00:04:07.002
in a group using our collection.

93
00:04:07.002 --> 00:04:09.002
Now let's see how easy it is

94
00:04:09.002 --> 00:04:12.003
to add a fourth room into this calculation.

95
00:04:12.003 --> 00:04:15.000
So I'm going to copy Piccadilly,

96
00:04:15.000 --> 00:04:18.007
and I'll create a new room named Oxford.

97
00:04:18.007 --> 00:04:21.005
So let me adjust some of these constructor arguments.

98
00:04:21.005 --> 00:04:24.001
We'll make Oxford a suite.

99
00:04:24.001 --> 00:04:26.001
It's going to hold five people,

100
00:04:26.001 --> 00:04:29.007
and it'll cost $225 a night.

101
00:04:29.007 --> 00:04:32.001
Okay, I'm going to save that.

102
00:04:32.001 --> 00:04:33.002
So let's go ahead,

103
00:04:33.002 --> 00:04:35.004
and I'll first execute this code

104
00:04:35.004 --> 00:04:37.008
without Oxford in the collection.

105
00:04:37.008 --> 00:04:40.006
You'll notice the potential revenue of the rooms

106
00:04:40.006 --> 00:04:44.002
in our collection is $550.

107
00:04:44.002 --> 00:04:48.001
Now, once I add Oxford into the collection,

108
00:04:48.001 --> 00:04:49.004
watch what happens.

109
00:04:49.004 --> 00:04:52.004
You'll notice that the potential revenue

110
00:04:52.004 --> 00:04:54.009
increases to include Oxford

111
00:04:54.009 --> 00:04:57.008
which was recently added into our collection.

112
00:04:57.008 --> 00:05:00.004
Now here's the great part about this.

113
00:05:00.004 --> 00:05:04.005
We didn't need to refactor our getPotentialRevenue method

114
00:05:04.005 --> 00:05:06.007
in order to make that happen.

115
00:05:06.007 --> 00:05:10.007
All we needed to do was add Oxford into the collection.

116
00:05:10.007 --> 00:05:14.006
And because we're managing those objects as a group,

117
00:05:14.006 --> 00:05:18.009
it just automatically gets included in our calculation.

118
00:05:18.009 --> 00:05:23.004
So you see the flexibility that we get with collections.

119
00:05:23.004 --> 00:05:26.000
And this is just a very simple example.

120
00:05:26.000 --> 00:05:28.004
We've only scratched the surface.

121
00:05:28.004 --> 00:05:31.004
But the benefits of grouping and managing objects

122
00:05:31.004 --> 00:05:35.003
in a collection are obvious from this example.

123
00:05:35.003 --> 00:05:38.006
As we explore the details of how to use the interfaces

124
00:05:38.006 --> 00:05:40.009
and implementations in the framework,

125
00:05:40.009 --> 00:05:43.009
you'll learn how to take advantage of their prebuilt methods

126
00:05:43.009 --> 00:05:46.000
and the utilities that surround them.

