WEBVTT
1
00:00:00.005 --> 00:00:02.008
- [Instructor] Let's dive deeper into how collections

2
00:00:02.008 --> 00:00:06.005
rely upon object comparison using a code example

3
00:00:06.005 --> 00:00:09.001
based on our car analogy.

4
00:00:09.001 --> 00:00:12.002
To help with that, I built a car class that has fields

5
00:00:12.002 --> 00:00:15.007
for the make, the model, and the mileage of the car.

6
00:00:15.007 --> 00:00:18.005
You'll also find class members like a constructor

7
00:00:18.005 --> 00:00:20.005
and a to string method.

8
00:00:20.005 --> 00:00:25.008
Now, I've also built a unit test that contains methods

9
00:00:25.008 --> 00:00:29.005
which test out the collection methods that we talked about

10
00:00:29.005 --> 00:00:31.007
that rely upon comparison.

11
00:00:31.007 --> 00:00:32.008
To build the test,

12
00:00:32.008 --> 00:00:36.003
I have a setup method that runs before each test.

13
00:00:36.003 --> 00:00:39.005
In this method, it creates a collection of cars,

14
00:00:39.005 --> 00:00:42.000
and then it creates three cars,

15
00:00:42.000 --> 00:00:44.009
a Subaru, a Tesla, and a Honda.

16
00:00:44.009 --> 00:00:48.002
Then these three cars are placed in the collection.

17
00:00:48.002 --> 00:00:52.005
So essentially, the collections reset with each test.

18
00:00:52.005 --> 00:00:54.003
I also added a tear down method

19
00:00:54.003 --> 00:00:56.006
that's going to print out the collection

20
00:00:56.006 --> 00:01:00.002
after we run the test so that we can see what happen.

21
00:01:00.002 --> 00:01:02.001
Now, what we really are concerned with

22
00:01:02.001 --> 00:01:04.000
are these three tests.

23
00:01:04.000 --> 00:01:08.000
So I've added one test that is going to remove

24
00:01:08.000 --> 00:01:11.000
two of the cars so that will leave one remaining

25
00:01:11.000 --> 00:01:13.008
and I'll check that via an assertion.

26
00:01:13.008 --> 00:01:16.009
The next test will check that our collection

27
00:01:16.009 --> 00:01:19.002
contains all three cars.

28
00:01:19.002 --> 00:01:23.008
And then the final test is going to remove all of the cars

29
00:01:23.008 --> 00:01:27.000
and check that we have an empty collection.

30
00:01:27.000 --> 00:01:28.009
Now, if you look at these tests,

31
00:01:28.009 --> 00:01:33.005
you'll notice that I vary how I use the car objects.

32
00:01:33.005 --> 00:01:34.008
In some cases,

33
00:01:34.008 --> 00:01:38.007
I have a reference to the exact car in memory.

34
00:01:38.007 --> 00:01:42.002
So for example, on lines 65 and 66,

35
00:01:42.002 --> 00:01:45.005
I have the exact instance of the car

36
00:01:45.005 --> 00:01:48.005
that we put into the collection.

37
00:01:48.005 --> 00:01:51.000
Now, in other areas of the test,

38
00:01:51.000 --> 00:01:54.000
I actually instantiate a new car

39
00:01:54.000 --> 00:01:59.003
that is logically equivalent using a value-based comparison

40
00:01:59.003 --> 00:02:02.008
with a car that's found in our collection.

41
00:02:02.008 --> 00:02:07.005
So right now, if I go ahead and I run these unit tests,

42
00:02:07.005 --> 00:02:10.002
you're going to see that they fail.

43
00:02:10.002 --> 00:02:12.003
And that's because of the way

44
00:02:12.003 --> 00:02:14.005
we're performing the comparison.

45
00:02:14.005 --> 00:02:17.008
Right now, when the remove method is called,

46
00:02:17.008 --> 00:02:21.007
it's using an identity-based comparison

47
00:02:21.007 --> 00:02:23.008
as opposed to the value-based comparison

48
00:02:23.008 --> 00:02:25.006
we would like to use.

49
00:02:25.006 --> 00:02:28.003
The same is true with the other methods

50
00:02:28.003 --> 00:02:32.001
that we invoke in these tests and that's why they fail.

51
00:02:32.001 --> 00:02:36.008
This is because we haven't overridden the equals method

52
00:02:36.008 --> 00:02:39.000
in the car class.

53
00:02:39.000 --> 00:02:42.002
Right now, the car class is leveraging

54
00:02:42.002 --> 00:02:46.008
the equals implementation that it inherits from object.

55
00:02:46.008 --> 00:02:49.000
And you can see it here.

56
00:02:49.000 --> 00:02:51.008
It's using the equality operator

57
00:02:51.008 --> 00:02:55.001
to perform an identity-based comparison

58
00:02:55.001 --> 00:02:58.000
and that's what's causing our test to fail.

59
00:02:58.000 --> 00:03:00.008
So let's switch our car class over

60
00:03:00.008 --> 00:03:03.005
to use a value-based comparison

61
00:03:03.005 --> 00:03:06.004
by overriding the equals method.

62
00:03:06.004 --> 00:03:07.008
Now, to do that,

63
00:03:07.008 --> 00:03:12.004
we can use the capabilities found within the Eclipse IDE.

64
00:03:12.004 --> 00:03:17.002
So just right-click within the class, then go to source

65
00:03:17.002 --> 00:03:21.002
and then you'll find generate HashCode and equals.

66
00:03:21.002 --> 00:03:25.001
Now, you'll notice HashCode is included there too.

67
00:03:25.001 --> 00:03:28.002
That's because there's some rules in the Java doc

68
00:03:28.002 --> 00:03:33.003
that say we must override HashCode when we override equals.

69
00:03:33.003 --> 00:03:35.002
We're not going to get into that right now.

70
00:03:35.002 --> 00:03:38.005
We'll talk about it when we discuss hashing strategies.

71
00:03:38.005 --> 00:03:42.006
Just for now, know it's really important to follow the rule.

72
00:03:42.006 --> 00:03:45.002
Okay, so go ahead, click on that option,

73
00:03:45.002 --> 00:03:48.000
and this is going to bring up a dialog

74
00:03:48.000 --> 00:03:51.008
where we can select the fields that are going to be used

75
00:03:51.008 --> 00:03:54.003
in our value-based comparison.

76
00:03:54.003 --> 00:03:56.004
Now, when you select these fields,

77
00:03:56.004 --> 00:04:00.004
you want to pick fields that don't change frequently.

78
00:04:00.004 --> 00:04:02.003
So the make and the model,

79
00:04:02.003 --> 00:04:06.006
they are excellent candidates for our equals method,

80
00:04:06.006 --> 00:04:09.001
but the mileage, that's going to change daily

81
00:04:09.001 --> 00:04:13.003
so we want to omit that in our value-based comparison.

82
00:04:13.003 --> 00:04:15.004
Okay, once you have those selected,

83
00:04:15.004 --> 00:04:17.007
go ahead and hit generate,

84
00:04:17.007 --> 00:04:22.000
and this will generate the HashCode and equals method

85
00:04:22.000 --> 00:04:24.002
inside of our car class.

86
00:04:24.002 --> 00:04:25.007
Now, I'm going to come down here

87
00:04:25.007 --> 00:04:29.003
to the equals implementation that was generated for us.

88
00:04:29.003 --> 00:04:30.004
In the Java docs,

89
00:04:30.004 --> 00:04:33.007
it says that this method must be reflexive,

90
00:04:33.007 --> 00:04:36.003
symmetric, transitive, and consistent.

91
00:04:36.003 --> 00:04:37.008
That's a lot.

92
00:04:37.008 --> 00:04:41.006
Just know that if you use the IDE's capabilities,

93
00:04:41.006 --> 00:04:43.008
you don't have to worry about that.

94
00:04:43.008 --> 00:04:46.009
But if you're writing your own equals implementation,

95
00:04:46.009 --> 00:04:49.005
you should probably take a look at the Java docs

96
00:04:49.005 --> 00:04:51.001
and do your homework.

97
00:04:51.001 --> 00:04:53.001
Now, inside of this method,

98
00:04:53.001 --> 00:04:57.001
I'm actually going to log some information to the console

99
00:04:57.001 --> 00:05:01.004
so that we can see the value-based comparison be performed.

100
00:05:01.004 --> 00:05:04.003
So I'll cast the object to a car

101
00:05:04.003 --> 00:05:07.003
and then I'm going to use the format method

102
00:05:07.003 --> 00:05:10.001
on the print stream to print out

103
00:05:10.001 --> 00:05:14.002
the make and the model of each of the objects.

104
00:05:14.002 --> 00:05:16.007
So there I have my string set up.

105
00:05:16.007 --> 00:05:19.001
Now let's pass the arguments into it.

106
00:05:19.001 --> 00:05:22.009
First, the make of the current object instance,

107
00:05:22.009 --> 00:05:25.008
then the model of the current object instance,

108
00:05:25.008 --> 00:05:27.000
and then we'll look

109
00:05:27.000 --> 00:05:30.002
at the make of the object we're comparing

110
00:05:30.002 --> 00:05:33.000
and the model of the object we're comparing.

111
00:05:33.000 --> 00:05:35.006
Okay, so let me just tidy that up

112
00:05:35.006 --> 00:05:37.004
and then we're going to save that

113
00:05:37.004 --> 00:05:40.005
and now head over to our unit test.

114
00:05:40.005 --> 00:05:45.001
I'm going to go ahead right-click, go to run as JUnit test,

115
00:05:45.001 --> 00:05:45.009
and this time,

116
00:05:45.009 --> 00:05:49.005
you'll notice using the value-based comparison,

117
00:05:49.005 --> 00:05:51.009
our test pass.

118
00:05:51.009 --> 00:05:54.006
Let's take a look at the console output.

119
00:05:54.006 --> 00:05:58.002
You'll notice that when we run the contains test,

120
00:05:58.002 --> 00:06:01.008
the equals method was invoked multiple times

121
00:06:01.008 --> 00:06:03.004
to perform the comparison.

122
00:06:03.004 --> 00:06:06.004
Okay, let's scroll down here to the remove test.

123
00:06:06.004 --> 00:06:09.004
It's kind of easy to see what happened in this one.

124
00:06:09.004 --> 00:06:12.003
You'll notice the value-based comparison with equals

125
00:06:12.003 --> 00:06:14.005
was invoked multiple times.

126
00:06:14.005 --> 00:06:15.009
And using that,

127
00:06:15.009 --> 00:06:20.000
the collection was able to remove the other two cars

128
00:06:20.000 --> 00:06:23.000
and we only have the Tesla remaining.

129
00:06:23.000 --> 00:06:27.002
So once we switched from the identity-based comparison

130
00:06:27.002 --> 00:06:29.003
to the value-based comparison,

131
00:06:29.003 --> 00:06:32.000
that allowed methods on our collection,

132
00:06:32.000 --> 00:06:37.002
like remove, contains, and remove all to function properly.

133
00:06:37.002 --> 00:06:40.000
And that's why our unit tests were successful.

