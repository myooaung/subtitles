WEBVTT
1
00:00:00.005 --> 00:00:02.003
- [Instructor] Let's walk through some examples

2
00:00:02.003 --> 00:00:03.009
that demonstrate the benefit

3
00:00:03.009 --> 00:00:06.004
of using generics with collections.

4
00:00:06.004 --> 00:00:09.002
Collections can work with any type of object.

5
00:00:09.002 --> 00:00:13.000
So the same type of collection that we use to store strings

6
00:00:13.000 --> 00:00:17.001
can also be used to store custom objects like our room.

7
00:00:17.001 --> 00:00:18.007
It's not like we need a separate type

8
00:00:18.007 --> 00:00:20.002
of collection for the string

9
00:00:20.002 --> 00:00:22.002
and another for the room.

10
00:00:22.002 --> 00:00:23.006
Like we see in the example,

11
00:00:23.006 --> 00:00:27.000
we can use an array list to hold both types.

12
00:00:27.000 --> 00:00:30.005
Now collections are only meant to work with objects.

13
00:00:30.005 --> 00:00:34.000
So if we insert a primitive like this long,

14
00:00:34.000 --> 00:00:36.006
it needs to be autoboxed to its wrapper type

15
00:00:36.006 --> 00:00:38.006
to work with the collection.

16
00:00:38.006 --> 00:00:41.009
We can see this in action if we stream our collection

17
00:00:41.009 --> 00:00:45.004
and then print out the type of its elements.

18
00:00:45.004 --> 00:00:48.006
Here I'm just going to get the class of each element

19
00:00:48.006 --> 00:00:50.003
in our collection within the stream

20
00:00:50.003 --> 00:00:51.004
and print them out.

21
00:00:51.004 --> 00:00:53.002
Let's see what happens.

22
00:00:53.002 --> 00:00:55.004
You'll notice that our primitive long

23
00:00:55.004 --> 00:00:59.006
was autoboxed to its wrapper type java.lang.long.

24
00:00:59.006 --> 00:01:01.003
Now it's not a good practice,

25
00:01:01.003 --> 00:01:03.000
but right now we can add

26
00:01:03.000 --> 00:01:05.004
any type of element into our collection.

27
00:01:05.004 --> 00:01:07.006
So if I copy this room,

28
00:01:07.006 --> 00:01:08.006
I can come up here

29
00:01:08.006 --> 00:01:11.001
and add it into the collection.

30
00:01:11.001 --> 00:01:13.002
Now our collection is going to hold

31
00:01:13.002 --> 00:01:16.008
a string, a long, and a room.

32
00:01:16.008 --> 00:01:20.007
Let's say I wanted to work with the room in our stream.

33
00:01:20.007 --> 00:01:23.007
That would mean I need to cast the element

34
00:01:23.007 --> 00:01:25.006
to a type of room

35
00:01:25.006 --> 00:01:27.008
and that would allow me to access

36
00:01:27.008 --> 00:01:30.000
the methods on the room type.

37
00:01:30.000 --> 00:01:34.005
So here I can do something like get the name of our room.

38
00:01:34.005 --> 00:01:37.008
Now obviously this is going to cause a problem

39
00:01:37.008 --> 00:01:39.007
and you'll notice my IDE

40
00:01:39.007 --> 00:01:41.008
and the compiler had been trying to warn us

41
00:01:41.008 --> 00:01:43.008
about this the whole time.

42
00:01:43.008 --> 00:01:45.003
That's because all they know

43
00:01:45.003 --> 00:01:49.000
is that this collection store's an object.

44
00:01:49.000 --> 00:01:52.006
So when they see us inserting elements into it,

45
00:01:52.006 --> 00:01:54.009
they're concerned that we're potentially adding

46
00:01:54.009 --> 00:01:57.003
different types of objects.

47
00:01:57.003 --> 00:02:00.008
So there's going to be an issue when we execute this code,

48
00:02:00.008 --> 00:02:03.005
but let's run it anyway.

49
00:02:03.005 --> 00:02:06.002
You'll notice that when executing the code,

50
00:02:06.002 --> 00:02:09.006
we get a ClassCastException at runtime

51
00:02:09.006 --> 00:02:12.008
and that's because we attempted to cast

52
00:02:12.008 --> 00:02:13.009
one of these objects,

53
00:02:13.009 --> 00:02:17.009
maybe it was the string or the long, to a type room

54
00:02:17.009 --> 00:02:20.000
and it's just not compatible.

55
00:02:20.000 --> 00:02:23.001
Prior to Java 5.0 when generics were introduced,

56
00:02:23.001 --> 00:02:25.008
this is how we worked with collections.

57
00:02:25.008 --> 00:02:27.009
We had to cast every element

58
00:02:27.009 --> 00:02:31.006
that we retrieved from the collection to its type

59
00:02:31.006 --> 00:02:34.008
and you just kind of hoped there wasn't a different type

60
00:02:34.008 --> 00:02:38.002
in there that was going to throw an exception.

61
00:02:38.002 --> 00:02:42.000
Now right now our collection is known as a raw type

62
00:02:42.000 --> 00:02:44.000
and that's because we haven't provided

63
00:02:44.000 --> 00:02:48.003
any type information about the elements it holds.

64
00:02:48.003 --> 00:02:51.009
We can do that by using a generic type argument.

65
00:02:51.009 --> 00:02:53.006
So here I'll add Room

66
00:02:53.006 --> 00:02:57.000
as the generic type argument for our collection

67
00:02:57.000 --> 00:03:00.005
and then I'll add the diamond operator on the constructor.

68
00:03:00.005 --> 00:03:03.001
Now look what happens immediately.

69
00:03:03.001 --> 00:03:06.004
The compiler shifts from giving us warnings

70
00:03:06.004 --> 00:03:09.000
to giving us compile time errors

71
00:03:09.000 --> 00:03:10.007
and that's because it now has

72
00:03:10.007 --> 00:03:13.004
type information about our collection.

73
00:03:13.004 --> 00:03:16.002
It knows that it holds rooms.

74
00:03:16.002 --> 00:03:20.000
So when it sees us inserting a type like our string

75
00:03:20.000 --> 00:03:22.003
into a collection that holds rooms,

76
00:03:22.003 --> 00:03:25.002
it's going to give us a compile time error.

77
00:03:25.002 --> 00:03:27.008
So we fail fast and we fail early

78
00:03:27.008 --> 00:03:30.009
instead of experiencing this issue at runtime.

79
00:03:30.009 --> 00:03:33.008
Now let's go ahead and we can comment out this code

80
00:03:33.008 --> 00:03:36.002
because we know it's not going to work

81
00:03:36.002 --> 00:03:39.000
and then I'm going to point out one final benefit

82
00:03:39.000 --> 00:03:41.005
of using a generic.

83
00:03:41.005 --> 00:03:43.008
Because we provided that type information

84
00:03:43.008 --> 00:03:46.003
about our collection's elements,

85
00:03:46.003 --> 00:03:50.000
the compiler can infer the type of those elements

86
00:03:50.000 --> 00:03:51.007
when we retrieve them.

87
00:03:51.007 --> 00:03:54.006
So instead of performing this cast,

88
00:03:54.006 --> 00:03:57.002
we can just use the element

89
00:03:57.002 --> 00:04:02.000
and invoke methods on the generic type of our collection.

90
00:04:02.000 --> 00:04:03.007
All right, so with all that in place,

91
00:04:03.007 --> 00:04:07.000
let's go ahead and we can execute this code

92
00:04:07.000 --> 00:04:09.008
and you'll notice that it prints out the name

93
00:04:09.008 --> 00:04:11.006
of our room to the console.

94
00:04:11.006 --> 00:04:13.000
When working with collections,

95
00:04:13.000 --> 00:04:15.006
you always want to use the generic type

96
00:04:15.006 --> 00:04:17.008
and avoid using raw types.

97
00:04:17.008 --> 00:04:20.006
This will shift any issues to compile time

98
00:04:20.006 --> 00:04:23.000
and it will become much easier to discover

99
00:04:23.000 --> 00:04:26.000
and resolve those problems in your code.

