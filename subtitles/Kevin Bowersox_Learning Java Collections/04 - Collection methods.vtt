WEBVTT
1
00:00:00.005 --> 00:00:01.009
- [Instructor] Let's take a closer look

2
00:00:01.009 --> 00:00:04.003
at a few of the most frequently used methods

3
00:00:04.003 --> 00:00:05.009
on the collection interface

4
00:00:05.009 --> 00:00:09.009
using some visualizations to see their behaviors.

5
00:00:09.009 --> 00:00:11.004
Throughout the visualizations,

6
00:00:11.004 --> 00:00:13.007
we'll assume that we're working with a collection

7
00:00:13.007 --> 00:00:16.007
that has a generic type of string.

8
00:00:16.007 --> 00:00:19.001
We'll start with methods that add items

9
00:00:19.001 --> 00:00:21.001
into the collection.

10
00:00:21.001 --> 00:00:23.009
When you want to insert an element into a collection,

11
00:00:23.009 --> 00:00:26.009
you must pass an object that's type

12
00:00:26.009 --> 00:00:30.005
matches the collection's generic type.

13
00:00:30.005 --> 00:00:33.004
We pass this object into the add method,

14
00:00:33.004 --> 00:00:37.002
which places a single element into the collection.

15
00:00:37.002 --> 00:00:39.007
The add method returns a boolean

16
00:00:39.007 --> 00:00:42.003
that indicates whether the collection changed

17
00:00:42.003 --> 00:00:44.007
as a result of the operation.

18
00:00:44.007 --> 00:00:46.003
For some implementations,

19
00:00:46.003 --> 00:00:49.003
like the set that do not accept duplicates,

20
00:00:49.003 --> 00:00:53.004
it's possible the element already exists in the collection.

21
00:00:53.004 --> 00:00:56.000
So if we called this method a second time

22
00:00:56.000 --> 00:00:59.002
on a set implementation, it wouldn't be added

23
00:00:59.002 --> 00:01:02.000
and the method would return false.

24
00:01:02.000 --> 00:01:04.004
We'll see this pattern in the return type,

25
00:01:04.004 --> 00:01:07.000
which uses the boolean to indicate a change

26
00:01:07.000 --> 00:01:09.009
in the collection on other methods as well.

27
00:01:09.009 --> 00:01:12.009
Another approach is to insert multiple elements

28
00:01:12.009 --> 00:01:16.003
into the collection, using the addAll method.

29
00:01:16.003 --> 00:01:18.008
This method accepts a collection of elements

30
00:01:18.008 --> 00:01:21.005
to be inserted as its argument.

31
00:01:21.005 --> 00:01:24.000
It also uses a boolean return type

32
00:01:24.000 --> 00:01:26.008
to indicate whether the collection has changed.

33
00:01:26.008 --> 00:01:28.008
Methods on the collection interface

34
00:01:28.008 --> 00:01:32.002
that perform operations on the entire collection

35
00:01:32.002 --> 00:01:34.009
are known as bulk operations.

36
00:01:34.009 --> 00:01:38.002
Most of these methods, aside from a few exceptions,

37
00:01:38.002 --> 00:01:41.006
accept a collection as their argument.

38
00:01:41.006 --> 00:01:44.005
Now let's take a look at how we remove elements

39
00:01:44.005 --> 00:01:46.005
from a collection.

40
00:01:46.005 --> 00:01:50.000
The first option is to remove an individual element

41
00:01:50.000 --> 00:01:53.002
by passing a single object to the remove method.

42
00:01:53.002 --> 00:01:55.002
It's return type is a boolean

43
00:01:55.002 --> 00:01:58.000
that indicates if the collection has changed.

44
00:01:58.000 --> 00:02:00.004
It's possible the collection will not change

45
00:02:00.004 --> 00:02:02.007
if we pass an object to the method

46
00:02:02.007 --> 00:02:05.004
that doesn't exist in the collection.

47
00:02:05.004 --> 00:02:07.006
There is also a bulk operation

48
00:02:07.006 --> 00:02:10.008
for removing multiple items from the collection.

49
00:02:10.008 --> 00:02:13.009
The removeAll method accepts a collection of elements

50
00:02:13.009 --> 00:02:17.005
as an argument for removal from the collection.

51
00:02:17.005 --> 00:02:20.006
If we want to remove all items from the collection,

52
00:02:20.006 --> 00:02:24.007
we can use another bulk operation named clear.

53
00:02:24.007 --> 00:02:26.004
The final method we'll explore

54
00:02:26.004 --> 00:02:29.009
for removing collection elements is retainAll.

55
00:02:29.009 --> 00:02:33.000
It's a bulk operation that is sort of the inverse

56
00:02:33.000 --> 00:02:34.006
of removeAll.

57
00:02:34.006 --> 00:02:37.003
It accepts a collection as an argument,

58
00:02:37.003 --> 00:02:40.008
then removes all elements of the target collection

59
00:02:40.008 --> 00:02:45.002
that are not found within the provided collection.

60
00:02:45.002 --> 00:02:47.005
Before going any further, I want to call out

61
00:02:47.005 --> 00:02:49.008
that collections are mutable.

62
00:02:49.008 --> 00:02:52.001
That means that each of the methods we've seen

63
00:02:52.001 --> 00:02:54.005
for adding or removing items

64
00:02:54.005 --> 00:02:57.009
changes the underlying collection when invoked.

65
00:02:57.009 --> 00:03:00.009
We'll dive deeper into the side effects of mutability

66
00:03:00.009 --> 00:03:03.008
later in the course.

67
00:03:03.008 --> 00:03:06.006
Now let's move on and see a few methods

68
00:03:06.006 --> 00:03:10.000
that help us inspect the collection.

69
00:03:10.000 --> 00:03:12.000
We can use the contains method

70
00:03:12.000 --> 00:03:16.001
to determine if a collection includes a particular element.

71
00:03:16.001 --> 00:03:19.008
We just pass a single object into the method

72
00:03:19.008 --> 00:03:22.004
and it returns a boolean to indicate

73
00:03:22.004 --> 00:03:25.006
if it's found inside the collection.

74
00:03:25.006 --> 00:03:29.001
A bulk operation also exists for checking

75
00:03:29.001 --> 00:03:31.003
if an entire collection of elements

76
00:03:31.003 --> 00:03:34.004
is found within the target collection.

77
00:03:34.004 --> 00:03:38.000
The containsAll method accepts a collection of elements

78
00:03:38.000 --> 00:03:40.004
and returns of boolean to indicate

79
00:03:40.004 --> 00:03:43.004
if all elements in the provided collection

80
00:03:43.004 --> 00:03:46.000
are found in the target collection.

81
00:03:46.000 --> 00:03:48.006
Another method for inspecting a collection

82
00:03:48.006 --> 00:03:50.009
is the isEmpty method.

83
00:03:50.009 --> 00:03:54.001
As its name implies, it returns a boolean of true

84
00:03:54.001 --> 00:03:56.009
if no elements are found in the collection.

85
00:03:56.009 --> 00:03:59.004
In our example, the collection contains elements,

86
00:03:59.004 --> 00:04:01.003
so false is returned.

87
00:04:01.003 --> 00:04:04.002
The final method we'll explore, named size,

88
00:04:04.002 --> 00:04:07.004
returns an integer that denotes the number of elements

89
00:04:07.004 --> 00:04:08.007
in the collection.

90
00:04:08.007 --> 00:04:10.004
The 10 methods we reviewed

91
00:04:10.004 --> 00:04:13.009
are the most basic operations you'll use to insert,

92
00:04:13.009 --> 00:04:16.005
remove, or inspect collections.

93
00:04:16.005 --> 00:04:17.007
Later in the course,

94
00:04:17.007 --> 00:04:20.001
we'll talk about how collections are iterated,

95
00:04:20.001 --> 00:04:22.002
so you'll have a full understanding

96
00:04:22.002 --> 00:04:24.000
of the collection interface.

