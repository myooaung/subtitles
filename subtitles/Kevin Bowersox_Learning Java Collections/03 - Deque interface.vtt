WEBVTT
1
00:00:00.005 --> 00:00:02.002
- [Instructor] The next collection interface

2
00:00:02.002 --> 00:00:05.004
will explore deque extends the queue interface

3
00:00:05.004 --> 00:00:07.006
and include some other ways that we can work

4
00:00:07.006 --> 00:00:09.009
with the linear collection of elements.

5
00:00:09.009 --> 00:00:12.009
The deque interface was introduced in Java six,

6
00:00:12.009 --> 00:00:16.009
adding a double ended queue to the collections framework.

7
00:00:16.009 --> 00:00:19.009
A deque allows elements to be added or removed

8
00:00:19.009 --> 00:00:22.007
from both ends of its linear structure.

9
00:00:22.007 --> 00:00:25.004
We'll refer to these as the front and the back.

10
00:00:25.004 --> 00:00:27.005
However, you might also hear them referred to

11
00:00:27.005 --> 00:00:30.005
as the front and rear or the head and tail.

12
00:00:30.005 --> 00:00:32.008
Operations on both ends of the deque

13
00:00:32.008 --> 00:00:35.005
are performed by using a set of methods with names

14
00:00:35.005 --> 00:00:38.009
that are derived from the methods on the queue interface.

15
00:00:38.009 --> 00:00:41.006
These methods make the deque very versatile.

16
00:00:41.006 --> 00:00:44.006
In the last lesson, we used an array deque as a queue

17
00:00:44.006 --> 00:00:47.008
with a first in, first out approach,

18
00:00:47.008 --> 00:00:50.009
but it can also handle elements using a last in

19
00:00:50.009 --> 00:00:54.007
first out approach that allows it to be used as a stack.

20
00:00:54.007 --> 00:00:57.008
In fact, Java has a legacy stack implementation

21
00:00:57.008 --> 00:01:00.006
in the Java.util package, but the Java docs

22
00:01:00.006 --> 00:01:03.002
recommend using an array deque instead.

23
00:01:03.002 --> 00:01:04.009
Let's move on and take a look at

24
00:01:04.009 --> 00:01:07.008
some of the interface methods on the deque.

25
00:01:07.008 --> 00:01:10.001
To add elements to the front of a deque,

26
00:01:10.001 --> 00:01:13.003
the methods add an offer from the queue interface

27
00:01:13.003 --> 00:01:16.003
are suffix with the word first.

28
00:01:16.003 --> 00:01:18.006
The suffix first is used to indicate

29
00:01:18.006 --> 00:01:20.005
that the operations are performed

30
00:01:20.005 --> 00:01:22.007
on the front of the structure.

31
00:01:22.007 --> 00:01:25.007
If we attempt to add an element to a bounded deque

32
00:01:25.007 --> 00:01:28.008
that is full, these methods will behave the same way

33
00:01:28.008 --> 00:01:31.002
as their counterparts found on the queue.

34
00:01:31.002 --> 00:01:33.007
So add first will throw an exception,

35
00:01:33.007 --> 00:01:36.007
and offer first will return false.

36
00:01:36.007 --> 00:01:39.005
This naming pattern and the exception behavior

37
00:01:39.005 --> 00:01:42.009
is applied across many methods on the deque.

38
00:01:42.009 --> 00:01:46.000
For example, inserting elements from the back of the deque

39
00:01:46.000 --> 00:01:50.006
is achieved using the add last and offer last methods.

40
00:01:50.006 --> 00:01:54.004
So here the suffix last is applied to the method names

41
00:01:54.004 --> 00:01:57.008
from the queue interface to specify that operations

42
00:01:57.008 --> 00:02:00.002
are performed on the back of the deque.

43
00:02:00.002 --> 00:02:02.004
Removing elements from the front of the deque

44
00:02:02.004 --> 00:02:06.009
is performed with methods named remove first and pull first.

45
00:02:06.009 --> 00:02:09.000
So again, you see the pattern.

46
00:02:09.000 --> 00:02:12.004
We take the queue method name and add the suffix first

47
00:02:12.004 --> 00:02:14.008
or last depending upon what end of the deque

48
00:02:14.008 --> 00:02:16.000
we're working on.

49
00:02:16.000 --> 00:02:17.005
If you've picked up the pattern,

50
00:02:17.005 --> 00:02:19.006
you might've been able to guess that the names

51
00:02:19.006 --> 00:02:21.006
of the methods use to remove elements

52
00:02:21.006 --> 00:02:26.000
from the back of the deque are removed last and pull last.

53
00:02:26.000 --> 00:02:28.003
If we want to examine the front of the deque,

54
00:02:28.003 --> 00:02:31.000
we can use get first or peek first.

55
00:02:31.000 --> 00:02:34.003
Here, you'll notice the interface uses the verb get

56
00:02:34.003 --> 00:02:37.006
instead of element, which is what we find on the queue.

57
00:02:37.006 --> 00:02:39.009
Finally, if you want to examine the element

58
00:02:39.009 --> 00:02:41.002
in the back of the deque,

59
00:02:41.002 --> 00:02:45.000
we can use the get last or peek last methods.

60
00:02:45.000 --> 00:02:46.008
When you place these methods together,

61
00:02:46.008 --> 00:02:49.009
you can see the versatility provided by the deque,

62
00:02:49.009 --> 00:02:52.004
but that's not where it ends because the deque

63
00:02:52.004 --> 00:02:56.004
also has methods that allow it to function as a stack.

64
00:02:56.004 --> 00:03:00.006
A stack is another type of data structure that uses last in

65
00:03:00.006 --> 00:03:03.004
first out order or lifeboat.

66
00:03:03.004 --> 00:03:06.004
It works similar to a stack of dinner plates.

67
00:03:06.004 --> 00:03:09.009
We stack plates one on top of the other when storing them.

68
00:03:09.009 --> 00:03:12.001
Then when we need to retrieve a plate,

69
00:03:12.001 --> 00:03:14.004
the last plate placed on the stack

70
00:03:14.004 --> 00:03:16.005
is the first one removed from it.

71
00:03:16.005 --> 00:03:17.008
That's lifeboat order

72
00:03:17.008 --> 00:03:20.005
and it's exactly how a stack works.

73
00:03:20.005 --> 00:03:22.005
To work with the deque as a stack,

74
00:03:22.005 --> 00:03:25.008
we use the methods push, pop, and peek.

75
00:03:25.008 --> 00:03:28.006
If we envision the stack as a vertical structure

76
00:03:28.006 --> 00:03:30.003
with a top and a bottom,

77
00:03:30.003 --> 00:03:34.004
these three operations are performed at its top.

78
00:03:34.004 --> 00:03:35.009
Using these operations,

79
00:03:35.009 --> 00:03:39.001
we can push an element into the stack for storage,

80
00:03:39.001 --> 00:03:43.000
peek at the top element or pop an element to remove it

81
00:03:43.000 --> 00:03:44.005
from the top.

82
00:03:44.005 --> 00:03:46.006
Now that we've seen the structure of a deque

83
00:03:46.006 --> 00:03:48.002
and learned its operations,

84
00:03:48.002 --> 00:03:50.001
let's switch over to our next lesson

85
00:03:50.001 --> 00:03:52.000
and see some code examples.

