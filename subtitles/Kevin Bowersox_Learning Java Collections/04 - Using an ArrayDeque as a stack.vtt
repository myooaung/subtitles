WEBVTT
1
00:00:00.005 --> 00:00:02.001
- [Instructor] In Java, the ArrayDeck

2
00:00:02.001 --> 00:00:05.005
is the recommended implementation for when we need a stack,

3
00:00:05.005 --> 00:00:07.005
which is one of the most frequent ways

4
00:00:07.005 --> 00:00:09.009
that we'll work with the deck.

5
00:00:09.009 --> 00:00:11.006
Let's work through a few examples

6
00:00:11.006 --> 00:00:15.002
to see how a deck works as a stack.

7
00:00:15.002 --> 00:00:16.004
For these examples,

8
00:00:16.004 --> 00:00:20.003
let's imagine the Landon Hotel has an older voicemail system

9
00:00:20.003 --> 00:00:24.006
that uses a last in first out approach to store messages.

10
00:00:24.006 --> 00:00:26.002
So messages will be stored

11
00:00:26.002 --> 00:00:28.008
in reverse of the order that they're received.

12
00:00:28.008 --> 00:00:31.008
And we'll just say there's no random access.

13
00:00:31.008 --> 00:00:35.003
This is similar to how your smartphone stores voicemails.

14
00:00:35.003 --> 00:00:37.006
More recent messages appear at the top

15
00:00:37.006 --> 00:00:39.008
and older messages at the bottom,

16
00:00:39.008 --> 00:00:43.008
except with a smartphone, you can play them in any order.

17
00:00:43.008 --> 00:00:46.004
So let's go ahead and we'll build our stack

18
00:00:46.004 --> 00:00:48.003
to work with these messages.

19
00:00:48.003 --> 00:00:51.004
To do that, I'm going to create a new deck

20
00:00:51.004 --> 00:00:53.009
that has a generic type of string.

21
00:00:53.009 --> 00:00:55.009
I'll name it messageStack,

22
00:00:55.009 --> 00:01:00.000
and I'll use an ArrayDeck implementation.

23
00:01:00.000 --> 00:01:04.003
Okay, so now we have our ArrayDeck or our stack.

24
00:01:04.003 --> 00:01:07.005
Let's go ahead and we can push messages

25
00:01:07.005 --> 00:01:09.005
onto the top of the stack.

26
00:01:09.005 --> 00:01:12.006
And I'll keep it simple. I'll just use Message 1.

27
00:01:12.006 --> 00:01:15.001
Then I'm going to push three more messages

28
00:01:15.001 --> 00:01:17.005
onto the top of the stack.

29
00:01:17.005 --> 00:01:20.002
After that, I'm going to use our print method

30
00:01:20.002 --> 00:01:22.003
to print out the contents of the stack

31
00:01:22.003 --> 00:01:24.005
so we can see what's going on.

32
00:01:24.005 --> 00:01:28.009
So I'll just call print and pass in our message stack.

33
00:01:28.009 --> 00:01:32.002
And then I'm going to invoke this method

34
00:01:32.002 --> 00:01:34.008
after each time we push an element

35
00:01:34.008 --> 00:01:37.002
onto the top of the stack.

36
00:01:37.002 --> 00:01:39.007
Okay, let's go ahead, we'll execute this code

37
00:01:39.007 --> 00:01:42.004
and take a look at how the stack works.

38
00:01:42.004 --> 00:01:45.005
You'll notice that as we push each element

39
00:01:45.005 --> 00:01:51.001
onto the top of the stack, it's added at the first position.

40
00:01:51.001 --> 00:01:54.000
When we add another element onto the stack,

41
00:01:54.000 --> 00:01:58.004
it pushes down all the elements that were added before it

42
00:01:58.004 --> 00:02:02.004
and it takes the first position at the top of the stack.

43
00:02:02.004 --> 00:02:04.009
Okay, let's move on to our next example

44
00:02:04.009 --> 00:02:07.005
and I'm going to clean up this code some.

45
00:02:07.005 --> 00:02:10.008
So I'm going to pull each of the calls

46
00:02:10.008 --> 00:02:14.003
that push an element on the top of the stack together

47
00:02:14.003 --> 00:02:18.003
and then I'm going to remove two of our print statements,

48
00:02:18.003 --> 00:02:21.000
then I'm going to pop an element

49
00:02:21.000 --> 00:02:23.000
off of the top of the stack.

50
00:02:23.000 --> 00:02:27.000
So I'll go ahead invoke the pop method on the deck

51
00:02:27.000 --> 00:02:30.000
and then I'll pop another element as well

52
00:02:30.000 --> 00:02:34.005
and then I'm just going to take a peek at the next element.

53
00:02:34.005 --> 00:02:38.004
Okay, let's go ahead and execute this to see what happened.

54
00:02:38.004 --> 00:02:40.001
You'll notice that we push

55
00:02:40.001 --> 00:02:42.005
all of our elements into the stack.

56
00:02:42.005 --> 00:02:44.006
And then when we start to pop,

57
00:02:44.006 --> 00:02:46.003
the first element that we pop

58
00:02:46.003 --> 00:02:49.002
from the top of the stack is Message 4

59
00:02:49.002 --> 00:02:52.009
and that's because it was the last message added.

60
00:02:52.009 --> 00:02:54.008
When we invoke pop again,

61
00:02:54.008 --> 00:02:57.008
Message 3 is at the top of our stack

62
00:02:57.008 --> 00:02:59.008
and that's what we retrieve.

63
00:02:59.008 --> 00:03:03.003
Now, I just peeked at Message 2 so you'll notice

64
00:03:03.003 --> 00:03:06.005
that when we print the contents of our stack,

65
00:03:06.005 --> 00:03:10.000
Message 2 remains at its top.

66
00:03:10.000 --> 00:03:14.006
So here you can see the last in first out order in action.

67
00:03:14.006 --> 00:03:18.003
The last message that we pushed onto the top of our stack

68
00:03:18.003 --> 00:03:20.004
is the first one that's removed

69
00:03:20.004 --> 00:03:23.002
and then we proceed in that order.

70
00:03:23.002 --> 00:03:25.009
Okay, let's walk through one final example

71
00:03:25.009 --> 00:03:27.007
to close out the lesson.

72
00:03:27.007 --> 00:03:31.004
I'm going to push an element on the top of the stack

73
00:03:31.004 --> 00:03:34.002
after we've popped the second element.

74
00:03:34.002 --> 00:03:36.007
So I'll name this Message 5

75
00:03:36.007 --> 00:03:39.008
and then I'm also going to print the contents of the stack

76
00:03:39.008 --> 00:03:42.004
after we pop the second element.

77
00:03:42.004 --> 00:03:45.007
Okay, let's see how this behaves.

78
00:03:45.007 --> 00:03:49.007
So once again, we push all four elements onto the stack.

79
00:03:49.007 --> 00:03:53.000
Then we pop two of the elements.

80
00:03:53.000 --> 00:03:55.002
And now you'll notice we're only left

81
00:03:55.002 --> 00:03:58.007
with Message 2 and Message 1 on the stack

82
00:03:58.007 --> 00:04:01.004
and Message 2 is at the top.

83
00:04:01.004 --> 00:04:06.000
Now, when we push Message 5 onto the stack,

84
00:04:06.000 --> 00:04:09.006
you'll notice it takes the first position at the top.

85
00:04:09.006 --> 00:04:12.004
And then when we make this call to peek,

86
00:04:12.004 --> 00:04:16.001
it retrieves Message 5 from the top of the stack.

87
00:04:16.001 --> 00:04:19.003
So that's a look at one way that you'll most frequently work

88
00:04:19.003 --> 00:04:23.001
with the ArrayDeck, which is using it as a stack.

89
00:04:23.001 --> 00:04:25.009
There are some other situations where you might need to work

90
00:04:25.009 --> 00:04:28.000
with both ends of a double-ended queue,

91
00:04:28.000 --> 00:04:32.001
like maybe adding some undo functionality to an application.

92
00:04:32.001 --> 00:04:34.008
For most of us, those situations will be rare,

93
00:04:34.008 --> 00:04:36.006
so I'll leave it to you to test out

94
00:04:36.006 --> 00:04:40.000
some of the other methods on the deck interface.

