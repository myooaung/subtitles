WEBVTT
1
00:00:00.004 --> 00:00:02.002
- [Instructor] The collections class contains

2
00:00:02.002 --> 00:00:05.009
many static methods that help us work with the collection.

3
00:00:05.009 --> 00:00:08.006
In this lesson, we're going to explore a few of them

4
00:00:08.006 --> 00:00:11.009
that allow us to find values within a list.

5
00:00:11.009 --> 00:00:15.008
So let's start out with the classic binary search.

6
00:00:15.008 --> 00:00:18.001
When we use a binary search method

7
00:00:18.001 --> 00:00:19.009
in the collections framework,

8
00:00:19.009 --> 00:00:22.005
we need our collection to be sorted.

9
00:00:22.005 --> 00:00:25.000
So you'll notice that I have a list of rooms

10
00:00:25.000 --> 00:00:28.005
and then I've used our rate comparator to sort them.

11
00:00:28.005 --> 00:00:31.004
So let's go ahead and on the collections class,

12
00:00:31.004 --> 00:00:33.009
we can invoke the binary search method.

13
00:00:33.009 --> 00:00:36.007
And you'll notice that there's two of them.

14
00:00:36.007 --> 00:00:39.009
The first, we'll use the natural sort order

15
00:00:39.009 --> 00:00:43.006
of the collection in order to perform the search.

16
00:00:43.006 --> 00:00:46.008
The other one will accept a comparator.

17
00:00:46.008 --> 00:00:50.004
Now because we're not using the natural sort order of a room

18
00:00:50.004 --> 00:00:53.000
for our collection, we'll need to go with

19
00:00:53.000 --> 00:00:54.008
this form of the method.

20
00:00:54.008 --> 00:00:56.009
So the first argument's the collection

21
00:00:56.009 --> 00:00:58.004
that you would like to search.

22
00:00:58.004 --> 00:01:01.002
The second argument is the object

23
00:01:01.002 --> 00:01:02.009
that you would like to search for.

24
00:01:02.009 --> 00:01:05.008
In this case, I'm just going to look for Cambridge.

25
00:01:05.008 --> 00:01:08.007
And then the final argument here is your comparator.

26
00:01:08.007 --> 00:01:12.000
So I can pass in our rate comparator.

27
00:01:12.000 --> 00:01:15.008
Now this method is going to return an integer

28
00:01:15.008 --> 00:01:20.000
that denotes the index where that object is found.

29
00:01:20.000 --> 00:01:22.002
So I'm going to go ahead and assign that

30
00:01:22.002 --> 00:01:24.001
to a variable called result,

31
00:01:24.001 --> 00:01:28.004
and then I'm going to just print it to the console.

32
00:01:28.004 --> 00:01:32.007
Okay, so let's go ahead and we can perform our search.

33
00:01:32.007 --> 00:01:35.005
So you'll notice that the binary search

34
00:01:35.005 --> 00:01:39.005
indicated that Cambridge is in index one.

35
00:01:39.005 --> 00:01:41.005
And if we take a look at our list,

36
00:01:41.005 --> 00:01:45.005
you'll notice that in index one we find Cambridge.

37
00:01:45.005 --> 00:01:47.008
So that was a successful binary search.

38
00:01:47.008 --> 00:01:51.006
Let's see what happens when a search isn't successful.

39
00:01:51.006 --> 00:01:55.000
So I'm going to just copy one of our rooms

40
00:01:55.000 --> 00:01:59.007
and then I'm going to paste it in at line 20.

41
00:01:59.007 --> 00:02:02.002
And I'm going to build a new room

42
00:02:02.002 --> 00:02:04.001
that isn't in our collection.

43
00:02:04.001 --> 00:02:07.007
I'll call it New London and then I'll just change the name

44
00:02:07.007 --> 00:02:10.002
of the variable.

45
00:02:10.002 --> 00:02:14.002
Okay, now I'm going to search for New London

46
00:02:14.002 --> 00:02:18.006
inside of our collection with the binary search.

47
00:02:18.006 --> 00:02:20.008
Let's see what happens here.

48
00:02:20.008 --> 00:02:24.004
So you'll notice that the result is negative.

49
00:02:24.004 --> 00:02:27.008
That indicates that the object was not found

50
00:02:27.008 --> 00:02:30.000
within the collection.

51
00:02:30.000 --> 00:02:33.002
And then it's providing an integer of three.

52
00:02:33.002 --> 00:02:36.004
So this is known as the insertion point.

53
00:02:36.004 --> 00:02:39.001
It indicates the position in the list

54
00:02:39.001 --> 00:02:41.009
where New London would be inserted.

55
00:02:41.009 --> 00:02:44.001
And that would be here in position three,

56
00:02:44.001 --> 00:02:47.007
where we currently find Oxford.

57
00:02:47.007 --> 00:02:50.008
So let's go ahead and we can insert Oxford

58
00:02:50.008 --> 00:02:52.003
into our rooms list.

59
00:02:52.003 --> 00:02:55.006
To do that, I'm going to use the overloaded add method

60
00:02:55.006 --> 00:02:57.004
that accepts a position.

61
00:02:57.004 --> 00:03:01.006
And then I'm going to get abstract value of the result.

62
00:03:01.006 --> 00:03:05.002
And I'll also need to increment it by one.

63
00:03:05.002 --> 00:03:06.008
You'll notice when I do this,

64
00:03:06.008 --> 00:03:10.005
we can then insert New London into its proper position

65
00:03:10.005 --> 00:03:13.006
within the collection.

66
00:03:13.006 --> 00:03:16.009
Let's close out the lesson by looking at two more methods

67
00:03:16.009 --> 00:03:18.009
on the collections class.

68
00:03:18.009 --> 00:03:21.009
These methods are going to help us find the min

69
00:03:21.009 --> 00:03:26.001
and the max values within our rooms list.

70
00:03:26.001 --> 00:03:29.008
So to do that, we just invoke the methods

71
00:03:29.008 --> 00:03:32.004
on the collections class.

72
00:03:32.004 --> 00:03:37.002
The first one is min and we pass in our collection

73
00:03:37.002 --> 00:03:39.009
and then we pass in a comparator.

74
00:03:39.009 --> 00:03:42.007
So I'll pass in the room comparator,

75
00:03:42.007 --> 00:03:45.004
and then I'm just going to get the name of the room

76
00:03:45.004 --> 00:03:47.002
once we found it.

77
00:03:47.002 --> 00:03:51.009
So this is going to get the min value from the collection

78
00:03:51.009 --> 00:03:55.003
as determined by our rate comparator.

79
00:03:55.003 --> 00:03:58.005
And then to get the max, it's very similar.

80
00:03:58.005 --> 00:04:01.006
I'll just change our console output here.

81
00:04:01.006 --> 00:04:05.001
And then we'll change our method call to get the max.

82
00:04:05.001 --> 00:04:06.003
Okay, let's go ahead.

83
00:04:06.003 --> 00:04:10.004
We'll execute the code and see what we got.

84
00:04:10.004 --> 00:04:14.004
Okay, so you'll notice that our min room

85
00:04:14.004 --> 00:04:18.008
was identified as Piccadilly and it does have

86
00:04:18.008 --> 00:04:20.005
the lowest rate of the group.

87
00:04:20.005 --> 00:04:23.008
So that's correct according to our rate comparator.

88
00:04:23.008 --> 00:04:27.000
And then Victoria was identified as the max,

89
00:04:27.000 --> 00:04:29.000
and that's a little bit more difficult

90
00:04:29.000 --> 00:04:31.008
because we do have these three rooms

91
00:04:31.008 --> 00:04:36.000
that have a rate of $225.

92
00:04:36.000 --> 00:04:38.006
But you'll remember that our room comparators

93
00:04:38.006 --> 00:04:41.008
secondary sort key was the name.

94
00:04:41.008 --> 00:04:44.007
And because Victoria is deemed to be greater

95
00:04:44.007 --> 00:04:46.003
by that sort key,

96
00:04:46.003 --> 00:04:49.008
it appears as the greatest element or the max element

97
00:04:49.008 --> 00:04:52.003
in our collection.

98
00:04:52.003 --> 00:04:55.003
So that wraps up our review of the collections class

99
00:04:55.003 --> 00:04:57.006
and other utilities that we can use

100
00:04:57.006 --> 00:05:00.000
to work with collections in the framework.

