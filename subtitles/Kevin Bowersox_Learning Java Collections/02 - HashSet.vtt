WEBVTT
1
00:00:00.005 --> 00:00:02.008
- [Instructor] The set interface is nearly identical

2
00:00:02.008 --> 00:00:05.005
to the collection interface that we've studied.

3
00:00:05.005 --> 00:00:08.002
However, it does have a few additional methods,

4
00:00:08.002 --> 00:00:12.003
and its implementations have some unique behaviors.

5
00:00:12.003 --> 00:00:14.008
To see these unique characteristics of a set,

6
00:00:14.008 --> 00:00:17.003
let's walk through a few examples.

7
00:00:17.003 --> 00:00:20.008
I'm going to start out by creating a set of rooms,

8
00:00:20.008 --> 00:00:23.000
and I'm going to use a hash set

9
00:00:23.000 --> 00:00:25.008
as the implementation for my set.

10
00:00:25.008 --> 00:00:27.009
All right, let's go ahead, import the types,

11
00:00:27.009 --> 00:00:30.007
and then I'm going to start adding rooms.

12
00:00:30.007 --> 00:00:36.003
I'll first add Piccadilly, and then I'm going to add Oxford.

13
00:00:36.003 --> 00:00:40.008
Now, I'm also going to add the same exact instance of Oxford

14
00:00:40.008 --> 00:00:44.007
followed by a logically equivalent instance of Oxford

15
00:00:44.007 --> 00:00:47.000
named Oxford Duplicate.

16
00:00:47.000 --> 00:00:49.002
You can see that object here.

17
00:00:49.002 --> 00:00:51.008
If we performed a value-based comparison

18
00:00:51.008 --> 00:00:53.005
between these two objects,

19
00:00:53.005 --> 00:00:56.007
they would be logically equivalent to each other.

20
00:00:56.007 --> 00:00:59.009
Keep that in mind as we walk through the example.

21
00:00:59.009 --> 00:01:02.008
Now, I'm also going to use a stream

22
00:01:02.008 --> 00:01:05.008
in order to print out our room names.

23
00:01:05.008 --> 00:01:11.000
So using a map, I can get the name of each room

24
00:01:11.000 --> 00:01:13.006
and then I can use the For Each method

25
00:01:13.006 --> 00:01:15.006
to print that to the console.

26
00:01:15.006 --> 00:01:18.005
Okay, now, before I execute this code,

27
00:01:18.005 --> 00:01:20.008
I want to show you one more thing.

28
00:01:20.008 --> 00:01:24.001
In the room class, I've added some console output

29
00:01:24.001 --> 00:01:26.006
within our Overridden Equals method.

30
00:01:26.006 --> 00:01:29.005
It's just going to tell us more about the comparison

31
00:01:29.005 --> 00:01:32.007
so that we can see what's happening with the set internally

32
00:01:32.007 --> 00:01:36.008
as we execute this code, so let's check it out.

33
00:01:36.008 --> 00:01:40.002
You'll notice that the equals method was invoked,

34
00:01:40.002 --> 00:01:42.008
and that was for the comparison with

35
00:01:42.008 --> 00:01:47.001
the logically equivalent instance of Oxford.

36
00:01:47.001 --> 00:01:49.005
For these two objects, it's likely that

37
00:01:49.005 --> 00:01:51.006
the equality operator was used,

38
00:01:51.006 --> 00:01:54.008
and that's why we don't see equals invoked again.

39
00:01:54.008 --> 00:01:58.007
Now you'll notice, we only have one instance of Oxford,

40
00:01:58.007 --> 00:02:02.001
and that's because a set doesn't allow duplicates.

41
00:02:02.001 --> 00:02:05.007
The other thing I'll call your attention to is the order.

42
00:02:05.007 --> 00:02:08.006
The stream didn't iterate through the collection

43
00:02:08.006 --> 00:02:11.005
in the order that the elements were inserted,

44
00:02:11.005 --> 00:02:15.007
and that's because the hash set doesn't guarantee order.

45
00:02:15.007 --> 00:02:18.004
If we wanted to maintain the insertion order

46
00:02:18.004 --> 00:02:20.008
of our elements, we would have to switch over to

47
00:02:20.008 --> 00:02:23.005
a linked hash set implementation.

48
00:02:23.005 --> 00:02:26.002
So, watch what happens when I make that change.

49
00:02:26.002 --> 00:02:28.003
Now, you can see Piccadilly,

50
00:02:28.003 --> 00:02:34.009
which was inserted first into the set, prints out first.

51
00:02:34.009 --> 00:02:38.002
Okay, now let's take a look at some of the new methods

52
00:02:38.002 --> 00:02:41.001
that were added to the set interface.

53
00:02:41.001 --> 00:02:44.005
I'm going to create a new set named Other Rooms,

54
00:02:44.005 --> 00:02:47.004
and then I'm going to grab the set interface,

55
00:02:47.004 --> 00:02:49.009
and we're going to use the Of method

56
00:02:49.009 --> 00:02:52.005
to create an unmodifiable set.

57
00:02:52.005 --> 00:02:55.003
So, this is a set that you can't change.

58
00:02:55.003 --> 00:02:57.004
It can be helpful for thread safety

59
00:02:57.004 --> 00:02:59.008
or sometimes for performance.

60
00:02:59.008 --> 00:03:03.005
You'll notice that the Of method has several

61
00:03:03.005 --> 00:03:07.003
overloaded forms where we can add up to

62
00:03:07.003 --> 00:03:09.008
nine elements into the set,

63
00:03:09.008 --> 00:03:12.007
and there's even a VAR args form of this as well.

64
00:03:12.007 --> 00:03:15.005
Let's go ahead and use the overloaded form

65
00:03:15.005 --> 00:03:17.006
that accepts two elements.

66
00:03:17.006 --> 00:03:19.008
I'll pass Piccadilly into the method,

67
00:03:19.008 --> 00:03:24.002
and then I'm also going to pass in Oxford.

68
00:03:24.002 --> 00:03:27.006
Now, watch what happens when I try to change

69
00:03:27.006 --> 00:03:30.000
our unmodifiable set.

70
00:03:30.000 --> 00:03:34.002
If I use the Add method and try to place Victoria

71
00:03:34.002 --> 00:03:37.003
into the set, if we execute the code,

72
00:03:37.003 --> 00:03:39.008
you'll notice that an exception is thrown.

73
00:03:39.008 --> 00:03:41.001
Let's check it out.

74
00:03:41.001 --> 00:03:44.000
It's the unsupported operation exception.

75
00:03:44.000 --> 00:03:46.003
So on the unmodifiable set,

76
00:03:46.003 --> 00:03:49.000
you won't find any support for methods

77
00:03:49.000 --> 00:03:52.001
that are going to change the collection.

78
00:03:52.001 --> 00:03:55.000
So let's go ahead, we'll comment this out,

79
00:03:55.000 --> 00:03:58.001
and then I want to show you another method.

80
00:03:58.001 --> 00:04:00.003
So we'll come down here,

81
00:04:00.003 --> 00:04:03.004
and I'm going to create a new set of rooms.

82
00:04:03.004 --> 00:04:05.008
I'll call this More Rooms,

83
00:04:05.008 --> 00:04:08.002
and then we're going to use the Copy Of method

84
00:04:08.002 --> 00:04:10.004
on the set interface.

85
00:04:10.004 --> 00:04:13.009
This creates an unmodifiable copy of a collection.

86
00:04:13.009 --> 00:04:17.008
So let's go ahead and we'll pass in our Rooms collection.

87
00:04:17.008 --> 00:04:20.000
And just like the other set that we created,

88
00:04:20.000 --> 00:04:23.002
we can't perform any operations like an add or remove

89
00:04:23.002 --> 00:04:26.006
that are going to change this set, but let's do this.

90
00:04:26.006 --> 00:04:30.004
I'm going to change our stream

91
00:04:30.004 --> 00:04:33.002
to use more rooms as its source.

92
00:04:33.002 --> 00:04:36.009
So this is our unmodifiable set.

93
00:04:36.009 --> 00:04:40.008
And let's first go, we can print out the elements

94
00:04:40.008 --> 00:04:43.001
in that collection, and you'll notice we got

95
00:04:43.001 --> 00:04:45.002
Oxford and Piccadilly.

96
00:04:45.002 --> 00:04:48.008
Now I'm going to go ahead and add Victoria

97
00:04:48.008 --> 00:04:51.004
into the collection that we copied.

98
00:04:51.004 --> 00:04:54.004
Watch what happens now.

99
00:04:54.004 --> 00:04:57.004
You'll notice that our unmodifiable set

100
00:04:57.004 --> 00:05:01.004
is backed by the first collection that we copied.

101
00:05:01.004 --> 00:05:03.000
So, you'll have to be aware of that

102
00:05:03.000 --> 00:05:05.004
when working with an unmodifiable set.

103
00:05:05.004 --> 00:05:08.002
So, that's a look at some of the recent additions

104
00:05:08.002 --> 00:05:12.000
to the set interface and a few of its implementations.

