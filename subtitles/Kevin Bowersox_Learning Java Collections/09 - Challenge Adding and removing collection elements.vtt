WEBVTT
1
00:00:00.001 --> 00:00:05.006
(upbeat music)

2
00:00:05.006 --> 00:00:06.006
- [Instructor] Now it's your turn

3
00:00:06.006 --> 00:00:09.003
to tackle a programming challenge that will require you

4
00:00:09.003 --> 00:00:11.008
to create some collections and use their methods

5
00:00:11.008 --> 00:00:14.008
to add and remove a few elements.

6
00:00:14.008 --> 00:00:15.008
In this challenge,

7
00:00:15.008 --> 00:00:19.002
the Landon Hotel is working on a room management system

8
00:00:19.002 --> 00:00:21.000
that uses Java collections

9
00:00:21.000 --> 00:00:24.007
to manage their inventory of rooms within a service.

10
00:00:24.007 --> 00:00:27.009
They've built skeleton methods on a room service class

11
00:00:27.009 --> 00:00:29.005
and have provided some comments

12
00:00:29.005 --> 00:00:31.005
about what each method should do,

13
00:00:31.005 --> 00:00:32.006
but they'll need your help

14
00:00:32.006 --> 00:00:35.002
in completing their implementations.

15
00:00:35.002 --> 00:00:38.005
To do this, you'll need to add a collection to the class,

16
00:00:38.005 --> 00:00:42.001
then instantiate it and then work on each method

17
00:00:42.001 --> 00:00:46.001
to complete its implementation.

18
00:00:46.001 --> 00:00:49.004
Before you get started, I recommend reviewing the unit tests

19
00:00:49.004 --> 00:00:52.003
that were provided to help you validate your work.

20
00:00:52.003 --> 00:00:53.004
Once you're done,

21
00:00:53.004 --> 00:00:56.004
just run the tests by right-clicking within it

22
00:00:56.004 --> 00:01:00.000
and then going to run as JUnit test.

23
00:01:00.000 --> 00:01:02.001
If you can get this bar to turn green,

24
00:01:02.001 --> 00:01:05.008
you've got it and your work is done.

25
00:01:05.008 --> 00:01:08.002
Now here's one tip before you begin.

26
00:01:08.002 --> 00:01:10.002
You should follow the numbering sequence

27
00:01:10.002 --> 00:01:12.006
specified in the room service class

28
00:01:12.006 --> 00:01:14.007
when completing your work.

29
00:01:14.007 --> 00:01:18.005
That's because the unit tests rely upon the order.

30
00:01:18.005 --> 00:01:22.001
Okay, go ahead, hit the pause button, give it a try,

31
00:01:22.001 --> 00:01:23.006
then continue the video

32
00:01:23.006 --> 00:01:26.004
and I'll share one solution to the challenge.

33
00:01:26.004 --> 00:01:28.001
You've got this.

34
00:01:28.001 --> 00:01:31.007
So how did it go? Were you able to get your test to pass?

35
00:01:31.007 --> 00:01:34.001
Let me show you how I approached it.

36
00:01:34.001 --> 00:01:37.007
I started out by declaring a new field of type collection

37
00:01:37.007 --> 00:01:40.002
that had a generic type of room.

38
00:01:40.002 --> 00:01:42.006
I named this field inventory.

39
00:01:42.006 --> 00:01:45.008
Then within our room service constructor,

40
00:01:45.008 --> 00:01:47.004
I took the inventory field

41
00:01:47.004 --> 00:01:51.000
and assigned it a new hash set that I instantiated.

42
00:01:51.000 --> 00:01:54.008
So I'm using a hash set as my collection implementation.

43
00:01:54.008 --> 00:01:55.007
You might have chose

44
00:01:55.007 --> 00:01:57.006
to use something like an array list here.

45
00:01:57.006 --> 00:01:58.004
That's fine.

46
00:01:58.004 --> 00:01:59.008
Now for the next method,

47
00:01:59.008 --> 00:02:02.000
I might have approached it a little bit differently

48
00:02:02.000 --> 00:02:03.001
than you did.

49
00:02:03.001 --> 00:02:06.005
I decided to use a conversion constructor

50
00:02:06.005 --> 00:02:10.004
in order to create a copy of our collection.

51
00:02:10.004 --> 00:02:13.002
I did this because I wanted to protect

52
00:02:13.002 --> 00:02:15.009
the collection from modification.

53
00:02:15.009 --> 00:02:17.002
Collections are mutable,

54
00:02:17.002 --> 00:02:20.001
so if we just returned our internal collection,

55
00:02:20.001 --> 00:02:22.008
somebody could modify the elements within it.

56
00:02:22.008 --> 00:02:26.006
But by creating a defensive copy, we protect against this.

57
00:02:26.006 --> 00:02:30.009
So that's what I chose to return for this method.

58
00:02:30.009 --> 00:02:32.001
For the next method,

59
00:02:32.001 --> 00:02:36.000
we needed to take the four parameters and create a room

60
00:02:36.000 --> 00:02:38.009
and then insert it into our collection.

61
00:02:38.009 --> 00:02:43.002
So first, I invoked the add method on our collection,

62
00:02:43.002 --> 00:02:47.004
and then I used the new operator and the room constructor,

63
00:02:47.004 --> 00:02:51.000
and then I just passed in all of the parameters

64
00:02:51.000 --> 00:02:54.005
that were provided to the method into the constructor.

65
00:02:54.005 --> 00:02:56.002
This created the new room instance

66
00:02:56.002 --> 00:02:59.002
that would be added to our collection.

67
00:02:59.002 --> 00:03:02.008
The next method required us to take an array of rooms

68
00:03:02.008 --> 00:03:05.009
and insert the rooms into our collection.

69
00:03:05.009 --> 00:03:07.008
So this is a great example

70
00:03:07.008 --> 00:03:10.007
of when we can use a bulk insert operation.

71
00:03:10.007 --> 00:03:15.001
So I'm going to invoke the add all method on our collection,

72
00:03:15.001 --> 00:03:20.008
and then I need to convert the room array into a collection,

73
00:03:20.008 --> 00:03:25.002
so I'll go ahead and use the Arrays.asList method.

74
00:03:25.002 --> 00:03:29.000
This allows us to convert an array into a list.

75
00:03:29.000 --> 00:03:33.000
So then we have a collection to pass in to add all

76
00:03:33.000 --> 00:03:35.007
and all of that collection's elements

77
00:03:35.007 --> 00:03:39.002
will be inserted into our inventory collection.

78
00:03:39.002 --> 00:03:43.005
Then I moved on to the final method, removeRoom.

79
00:03:43.005 --> 00:03:46.000
This method seemed a little bit straightforward.

80
00:03:46.000 --> 00:03:49.005
We could just take our inventory collection, invoke remove,

81
00:03:49.005 --> 00:03:52.005
and pass in the room that we'd like to remove.

82
00:03:52.005 --> 00:03:55.005
But you'll notice if we execute the tests at this point,

83
00:03:55.005 --> 00:03:56.008
they're going to fail.

84
00:03:56.008 --> 00:03:59.002
Let's see that.

85
00:03:59.002 --> 00:04:02.004
That's because we haven't overridden the equals method

86
00:04:02.004 --> 00:04:06.003
in our room type and that's going to cause the remove method

87
00:04:06.003 --> 00:04:08.003
not to work properly.

88
00:04:08.003 --> 00:04:11.005
So let's head over to the room class

89
00:04:11.005 --> 00:04:13.008
and we can put that method in place.

90
00:04:13.008 --> 00:04:17.006
Once again, I'll just use the assistance provided by our IDE

91
00:04:17.006 --> 00:04:18.007
to keep it simple.

92
00:04:18.007 --> 00:04:23.005
So just right-click within the class and then go to source,

93
00:04:23.005 --> 00:04:26.005
then generate HashCode in equals.

94
00:04:26.005 --> 00:04:28.003
And then for the fields on the room

95
00:04:28.003 --> 00:04:31.006
that we'll use to perform the value-based comparison,

96
00:04:31.006 --> 00:04:35.005
I'm going to use the name and the type.

97
00:04:35.005 --> 00:04:38.004
So I'll uncheck capacity and rate.

98
00:04:38.004 --> 00:04:40.003
And those two fields will be used

99
00:04:40.003 --> 00:04:43.001
to compare two instances of a room

100
00:04:43.001 --> 00:04:46.005
using a value-based comparison.

101
00:04:46.005 --> 00:04:49.008
Okay, so I'll generate that code

102
00:04:49.008 --> 00:04:52.002
and then we can execute our tests again

103
00:04:52.002 --> 00:04:54.007
to see if we pass the challenge.

104
00:04:54.007 --> 00:04:58.008
So I'll just right-click then go to run as JUnit test

105
00:04:58.008 --> 00:05:00.009
and there you can see we've passed.

106
00:05:00.009 --> 00:05:01.008
Excellent.

107
00:05:01.008 --> 00:05:06.000
So that completes the first challenge in this chapter.

