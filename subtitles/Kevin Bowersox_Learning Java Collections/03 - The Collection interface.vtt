WEBVTT
1
00:00:00.005 --> 00:00:02.000
- [Instructor] Let's explore the design

2
00:00:02.000 --> 00:00:03.005
of the collection interface

3
00:00:03.005 --> 00:00:05.009
and take a glance at its methods.

4
00:00:05.009 --> 00:00:07.005
Since the collection interface

5
00:00:07.005 --> 00:00:10.000
is at the root of the interface hierarchy,

6
00:00:10.000 --> 00:00:11.005
that means the methods on it

7
00:00:11.005 --> 00:00:14.006
appear on every type that extends from it.

8
00:00:14.006 --> 00:00:17.004
So interfaces and concrete implementations

9
00:00:17.004 --> 00:00:20.008
of a list, set, and queue will inherit these common methods

10
00:00:20.008 --> 00:00:22.007
from the collection interface.

11
00:00:22.007 --> 00:00:25.009
Some collection methods are denoted as being optional,

12
00:00:25.009 --> 00:00:28.007
so they might appear on an implementation,

13
00:00:28.007 --> 00:00:31.002
but it's possible that a call to one of these methods

14
00:00:31.002 --> 00:00:34.009
will throw an unsupported operation exception.

15
00:00:34.009 --> 00:00:37.003
The interfaces in the collections framework

16
00:00:37.003 --> 00:00:41.000
and the collection interface itself are generic.

17
00:00:41.000 --> 00:00:42.007
So when we create a collection,

18
00:00:42.007 --> 00:00:44.005
we use a generic type argument

19
00:00:44.005 --> 00:00:48.000
to indicate the type of elements that it holds.

20
00:00:48.000 --> 00:00:49.005
The argument is declared

21
00:00:49.005 --> 00:00:52.002
by placing the type in angle brackets.

22
00:00:52.002 --> 00:00:54.000
Since the collection implementations

23
00:00:54.000 --> 00:00:55.009
are based on these interfaces,

24
00:00:55.009 --> 00:00:58.004
they use a generic type argument too.

25
00:00:58.004 --> 00:01:00.006
When instantiating the implementation,

26
00:01:00.006 --> 00:01:02.000
we can be more concise

27
00:01:02.000 --> 00:01:05.004
by using the diamond operator on the constructor.

28
00:01:05.004 --> 00:01:08.000
This operator infers the generic type

29
00:01:08.000 --> 00:01:10.008
from the declared variable's generic type.

30
00:01:10.008 --> 00:01:14.002
This generic type impacts how we use collection methods

31
00:01:14.002 --> 00:01:17.004
because it determines what arguments may be passed into them

32
00:01:17.004 --> 00:01:20.000
or what type of object they might return.

33
00:01:20.000 --> 00:01:23.005
These are the 21 methods found on the collection interface

34
00:01:23.005 --> 00:01:25.002
as of Java 11.

35
00:01:25.002 --> 00:01:26.009
I've placed them into several groups

36
00:01:26.009 --> 00:01:30.006
and added asterisks next to the optional methods.

37
00:01:30.006 --> 00:01:33.001
These groups organize the collection methods

38
00:01:33.001 --> 00:01:35.001
by their general behaviors.

39
00:01:35.001 --> 00:01:37.003
Some add or remove elements,

40
00:01:37.003 --> 00:01:39.007
others iterate or inspect the collection,

41
00:01:39.007 --> 00:01:41.003
and one is kind of a catch-all

42
00:01:41.003 --> 00:01:44.005
with comparison and array operations.

43
00:01:44.005 --> 00:01:47.004
You'll notice that methods on the collection interface

44
00:01:47.004 --> 00:01:49.004
make frequent use of generics

45
00:01:49.004 --> 00:01:53.000
and that's common throughout the entire framework.

46
00:01:53.000 --> 00:01:56.001
So now we have a grasp of the collection interface

47
00:01:56.001 --> 00:01:58.009
and the groups of behaviors that it provides.

48
00:01:58.009 --> 00:01:59.008
In the next lesson,

49
00:01:59.008 --> 00:02:02.007
we'll dive deeper into a few of the most common methods

50
00:02:02.007 --> 00:02:04.000
that you'll use.

