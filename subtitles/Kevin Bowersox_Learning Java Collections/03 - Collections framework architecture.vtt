WEBVTT
1
00:00:00.005 --> 00:00:01.008
- [Tutor] Now let's shift gears

2
00:00:01.008 --> 00:00:04.009
and focus on working with data structures in Java.

3
00:00:04.009 --> 00:00:07.001
So that means we need to start unpacking

4
00:00:07.001 --> 00:00:09.001
the collections framework.

5
00:00:09.001 --> 00:00:12.001
The framework can be broken down into three sections,

6
00:00:12.001 --> 00:00:13.001
interfaces,

7
00:00:13.001 --> 00:00:14.000
algorithms,

8
00:00:14.000 --> 00:00:16.004
and implementations.

9
00:00:16.004 --> 00:00:19.001
The interfaces are the foundation of the platform

10
00:00:19.001 --> 00:00:21.004
because they are the main abstract types

11
00:00:21.004 --> 00:00:24.005
that determine what methods are available on collections,

12
00:00:24.005 --> 00:00:27.002
like the list, set, and map.

13
00:00:27.002 --> 00:00:28.008
Without implementations,

14
00:00:28.008 --> 00:00:31.004
we can't do much with just an interface.

15
00:00:31.004 --> 00:00:34.003
So the framework also provides several classes

16
00:00:34.003 --> 00:00:36.004
that implement the core interfaces

17
00:00:36.004 --> 00:00:38.006
and provide the underlying source code

18
00:00:38.006 --> 00:00:40.009
for the data structures.

19
00:00:40.009 --> 00:00:43.006
We also find algorithms in the framework

20
00:00:43.006 --> 00:00:46.002
that support working with collections.

21
00:00:46.002 --> 00:00:48.005
These are provided through static methods

22
00:00:48.005 --> 00:00:51.003
that give us functionality for working with collections

23
00:00:51.003 --> 00:00:53.006
like sorting and searching.

24
00:00:53.006 --> 00:00:56.001
These interconnected sections of the framework

25
00:00:56.001 --> 00:00:59.008
work together to provide developers with most of the code

26
00:00:59.008 --> 00:01:03.006
they'll need to work with data structures in Java.

27
00:01:03.006 --> 00:01:06.000
Now let's talk a little history.

28
00:01:06.000 --> 00:01:09.000
Java 1.2 was when the collections framework

29
00:01:09.000 --> 00:01:10.009
was first introduced.

30
00:01:10.009 --> 00:01:11.008
Prior to that,

31
00:01:11.008 --> 00:01:14.005
there were a few classes like hash table and vector

32
00:01:14.005 --> 00:01:16.008
that supported working with objects,

33
00:01:16.008 --> 00:01:20.004
but they had some concerns about performance and quality.

34
00:01:20.004 --> 00:01:22.004
These classes were re-engineered

35
00:01:22.004 --> 00:01:26.005
to satisfy collection interfaces and to support generics.

36
00:01:26.005 --> 00:01:27.009
But for most situations,

37
00:01:27.009 --> 00:01:30.000
you'll want to use the types introduced

38
00:01:30.000 --> 00:01:32.002
with the collections framework.

39
00:01:32.002 --> 00:01:35.003
The Java community still debates if legacy collection

40
00:01:35.003 --> 00:01:36.009
should be deprecated.

41
00:01:36.009 --> 00:01:39.008
So if you're adding them into new source code,

42
00:01:39.008 --> 00:01:42.008
you should have a good reason why.

43
00:01:42.008 --> 00:01:45.002
Developers use the collections framework

44
00:01:45.002 --> 00:01:46.008
so frequently in Java

45
00:01:46.008 --> 00:01:49.005
that many of its benefits are overlooked.

46
00:01:49.005 --> 00:01:52.004
The framework contains all of the code a developer needs

47
00:01:52.004 --> 00:01:54.004
for working with data structures.

48
00:01:54.004 --> 00:01:55.009
So we're not required to build

49
00:01:55.009 --> 00:01:58.003
our own data structure implementations,

50
00:01:58.003 --> 00:02:00.002
or to design their interfaces.

51
00:02:00.002 --> 00:02:03.002
It's provided by the language.

52
00:02:03.002 --> 00:02:06.000
Since every Java developer uses the same code

53
00:02:06.000 --> 00:02:07.002
for data structures,

54
00:02:07.002 --> 00:02:08.004
it's a standard.

55
00:02:08.004 --> 00:02:10.005
So you can pick up someone else's code

56
00:02:10.005 --> 00:02:12.003
without needing to understand

57
00:02:12.003 --> 00:02:16.003
a bunch of custom data structures that they created.

58
00:02:16.003 --> 00:02:18.007
The collections framework also was built

59
00:02:18.007 --> 00:02:20.004
by some of the brightest engineers

60
00:02:20.004 --> 00:02:24.003
and has decades of use in production systems.

61
00:02:24.003 --> 00:02:26.001
So you can trust that you're using

62
00:02:26.001 --> 00:02:28.000
a high quality data structure

63
00:02:28.000 --> 00:02:32.002
that isn't riddled with bugs or performance problems.

64
00:02:32.002 --> 00:02:34.005
Because the same collections APIs

65
00:02:34.005 --> 00:02:37.003
are used by developers across the language,

66
00:02:37.003 --> 00:02:39.008
it naturally creates interoperability

67
00:02:39.008 --> 00:02:42.000
across different code bases.

68
00:02:42.000 --> 00:02:44.003
If you look at other Java technologies,

69
00:02:44.003 --> 00:02:48.000
like, Java EE, Spring, or the Apache projects,

70
00:02:48.000 --> 00:02:51.004
you'll find collection scattered across their code.

71
00:02:51.004 --> 00:02:53.009
This promotes interoperability amongst them

72
00:02:53.009 --> 00:02:56.006
and you're instantly familiar with the parts of the code

73
00:02:56.006 --> 00:02:59.001
that use collections.

74
00:02:59.001 --> 00:03:01.005
All of these benefits save you a lot of time,

75
00:03:01.005 --> 00:03:03.000
effort, and frustration

76
00:03:03.000 --> 00:03:06.001
while improving the quality of your code.

77
00:03:06.001 --> 00:03:08.004
Learning the architecture and interfaces

78
00:03:08.004 --> 00:03:09.008
of the collections framework

79
00:03:09.008 --> 00:03:13.004
is one of the best ways to level up as a Java developer,

80
00:03:13.004 --> 00:03:16.006
because you're going to see them used everywhere in code.

81
00:03:16.006 --> 00:03:18.008
So next, we'll step down the level

82
00:03:18.008 --> 00:03:22.000
and do some hands-on work with a collection.

