WEBVTT
1
00:00:00.001 --> 00:00:05.005
(upbeat music)

2
00:00:05.005 --> 00:00:07.005
- [Instructor] Now that we've explored a few ways

3
00:00:07.005 --> 00:00:08.008
to iterate collections,

4
00:00:08.008 --> 00:00:11.003
let's try a programming challenge.

5
00:00:11.003 --> 00:00:13.003
In this challenge, the Landon Hotel

6
00:00:13.003 --> 00:00:15.007
has asked you to implement three new methods

7
00:00:15.007 --> 00:00:18.004
on the RoomService class.

8
00:00:18.004 --> 00:00:20.005
The first method applies a discount

9
00:00:20.005 --> 00:00:22.003
to the rate of each room.

10
00:00:22.003 --> 00:00:24.007
The rate is provided in decimal form

11
00:00:24.007 --> 00:00:27.001
as a double argument to the method.

12
00:00:27.001 --> 00:00:28.007
You'll need to use this double

13
00:00:28.007 --> 00:00:32.009
to reduce the rate assigned to each room.

14
00:00:32.009 --> 00:00:34.005
The next method requires you

15
00:00:34.005 --> 00:00:36.006
to return a new collection of rooms

16
00:00:36.006 --> 00:00:39.001
that contain rooms from the inventory,

17
00:00:39.001 --> 00:00:42.001
which have the same or a higher capacity

18
00:00:42.001 --> 00:00:45.004
than the argument provided to the method.

19
00:00:45.004 --> 00:00:46.008
The final method is similar.

20
00:00:46.008 --> 00:00:48.008
It asks you to return a new collection

21
00:00:48.008 --> 00:00:51.004
of rooms that match a particular type

22
00:00:51.004 --> 00:00:54.000
and are below a provided rate based

23
00:00:54.000 --> 00:00:56.003
on the supplied arguments.

24
00:00:56.003 --> 00:00:59.006
This challenge uses the same format as the others.

25
00:00:59.006 --> 00:01:01.007
There's a comment in each method describing

26
00:01:01.007 --> 00:01:03.003
what needs to be achieved,

27
00:01:03.003 --> 00:01:07.000
and a unit test is provided for validating your work.

28
00:01:07.000 --> 00:01:08.005
So that's the challenge.

29
00:01:08.005 --> 00:01:11.006
I recommend trying several approaches for each one,

30
00:01:11.006 --> 00:01:13.001
like using a forEach loop,

31
00:01:13.001 --> 00:01:15.005
then trying it again with a stream.

32
00:01:15.005 --> 00:01:16.008
This will get you more familiar

33
00:01:16.008 --> 00:01:19.000
with iterating collections.

34
00:01:19.000 --> 00:01:21.001
So if you're up for a challenge,

35
00:01:21.001 --> 00:01:23.008
pause the video and work on your solution.

36
00:01:23.008 --> 00:01:25.009
When you're finished, resume the video

37
00:01:25.009 --> 00:01:28.000
and I'll show you my solution.

38
00:01:28.000 --> 00:01:30.002
Hey, welcome back.

39
00:01:30.002 --> 00:01:34.002
I'm just going to go ahead and dive right into my solution.

40
00:01:34.002 --> 00:01:36.000
So for the first method,

41
00:01:36.000 --> 00:01:38.001
we needed to apply a discount

42
00:01:38.001 --> 00:01:40.003
to each room in the collection.

43
00:01:40.003 --> 00:01:43.009
So that meant we needed to iterate over them.

44
00:01:43.009 --> 00:01:47.002
To do that, I used the forEach method provided

45
00:01:47.002 --> 00:01:49.003
by the iterable interface

46
00:01:49.003 --> 00:01:51.002
that accepts a consumer,

47
00:01:51.002 --> 00:01:53.007
which we can provide as a lambda.

48
00:01:53.007 --> 00:01:55.006
So I started out building the lambda

49
00:01:55.006 --> 00:01:58.005
by specifying its parameter as r.

50
00:01:58.005 --> 00:02:01.004
This is going to be how each room in the collection

51
00:02:01.004 --> 00:02:03.007
is passed into the lambda.

52
00:02:03.007 --> 00:02:06.002
From here, I could set the rate on the room

53
00:02:06.002 --> 00:02:08.007
but I also needed to do a little bit of math.

54
00:02:08.007 --> 00:02:10.009
So I got the original rate,

55
00:02:10.009 --> 00:02:13.006
and then I multiplied that by one

56
00:02:13.006 --> 00:02:16.004
minus the discount that was provided.

57
00:02:16.004 --> 00:02:17.009
And using this technique,

58
00:02:17.009 --> 00:02:21.000
I was able to reduce the rate of the room.

59
00:02:21.000 --> 00:02:25.003
Then I moved on to the next method, getRoomsByCapacity.

60
00:02:25.003 --> 00:02:27.004
This method accepted an integer

61
00:02:27.004 --> 00:02:29.002
and we needed to take that

62
00:02:29.002 --> 00:02:33.006
and go find rooms within our inventory collection

63
00:02:33.006 --> 00:02:36.000
that had a capacity that was greater than

64
00:02:36.000 --> 00:02:38.000
or equal to what was provided.

65
00:02:38.000 --> 00:02:40.008
To tackle this, I used a forEach loop.

66
00:02:40.008 --> 00:02:44.000
So let's go ahead and we'll put that into our code.

67
00:02:44.000 --> 00:02:46.005
Now, because I went this direction,

68
00:02:46.005 --> 00:02:49.002
it meant I needed to create a new collection

69
00:02:49.002 --> 00:02:53.004
that would hold all the rooms that matched our criteria.

70
00:02:53.004 --> 00:02:57.004
I backed this collection using a HashSet.

71
00:02:57.004 --> 00:03:00.001
So I instantiated that with its constructor

72
00:03:00.001 --> 00:03:02.009
and then inside of the forEach loop,

73
00:03:02.009 --> 00:03:04.004
I needed to check

74
00:03:04.004 --> 00:03:07.008
whether or not the room satisfied the condition.

75
00:03:07.008 --> 00:03:10.007
So I got the capacity of the room,

76
00:03:10.007 --> 00:03:12.008
and then I used the greater than

77
00:03:12.008 --> 00:03:15.001
and equal to operator

78
00:03:15.001 --> 00:03:17.007
and compared the room's capacity

79
00:03:17.007 --> 00:03:19.009
against the requiredCapacity

80
00:03:19.009 --> 00:03:22.005
that was provided into the method.

81
00:03:22.005 --> 00:03:25.009
From here, if the room satisfied the condition,

82
00:03:25.009 --> 00:03:30.000
I could just add it into our new collection,

83
00:03:30.000 --> 00:03:33.003
and then I needed to return that new collection

84
00:03:33.003 --> 00:03:37.007
with the matching rooms from the method.

85
00:03:37.007 --> 00:03:38.006
All right.

86
00:03:38.006 --> 00:03:40.004
I was able to move on at that point

87
00:03:40.004 --> 00:03:42.005
to provide an implementation

88
00:03:42.005 --> 00:03:46.003
for the getRoomByRateAndType method.

89
00:03:46.003 --> 00:03:49.009
This method accepted two parameters.

90
00:03:49.009 --> 00:03:51.008
One is a double.

91
00:03:51.008 --> 00:03:52.007
That was a rate.

92
00:03:52.007 --> 00:03:55.002
And the other was a string that's a type.

93
00:03:55.002 --> 00:03:58.001
We needed to search our collection inventory

94
00:03:58.001 --> 00:04:01.006
for rooms that had a rate lower than what was provided,

95
00:04:01.006 --> 00:04:04.009
and that matched the type that was also provided

96
00:04:04.009 --> 00:04:06.004
into the method.

97
00:04:06.004 --> 00:04:09.002
This is a perfect candidate for a stream,

98
00:04:09.002 --> 00:04:10.004
and I also felt guilty

99
00:04:10.004 --> 00:04:12.005
for not using it in the last method.

100
00:04:12.005 --> 00:04:15.001
So that's how I tackled this one.

101
00:04:15.001 --> 00:04:19.000
I got a stream from our collection of rooms,

102
00:04:19.000 --> 00:04:22.007
and then I applied two intermediate operations.

103
00:04:22.007 --> 00:04:24.005
Both were filter.

104
00:04:24.005 --> 00:04:28.006
So the filter I put in place first checked that the rate

105
00:04:28.006 --> 00:04:33.001
of the room was lower than the provided rate.

106
00:04:33.001 --> 00:04:34.004
And then I could move on

107
00:04:34.004 --> 00:04:36.007
and provide the second filter.

108
00:04:36.007 --> 00:04:38.007
And this one needed to check

109
00:04:38.007 --> 00:04:44.002
that the type of the room was equal to the provided type.

110
00:04:44.002 --> 00:04:46.001
Now, from here, I still needed

111
00:04:46.001 --> 00:04:47.008
to satisfy the method signature

112
00:04:47.008 --> 00:04:50.001
and return a collection of rooms.

113
00:04:50.001 --> 00:04:52.003
So this was a perfect situation

114
00:04:52.003 --> 00:04:55.005
to use the collect operation.

115
00:04:55.005 --> 00:04:58.002
So I specified the collect method

116
00:04:58.002 --> 00:05:02.007
and then I used a collector to gather the elements flowing

117
00:05:02.007 --> 00:05:05.008
through the stream into a list.

118
00:05:05.008 --> 00:05:08.008
Okay, so there you can see my solution.

119
00:05:08.008 --> 00:05:12.001
Let's cross our fingers and head over to the unit tests.

120
00:05:12.001 --> 00:05:14.000
I'll just right click on the test,

121
00:05:14.000 --> 00:05:16.004
go to Run As, JUnit test,

122
00:05:16.004 --> 00:05:17.007
and hey, we passed.

123
00:05:17.007 --> 00:05:18.005
Excellent.

124
00:05:18.005 --> 00:05:20.004
That still gets me excited every time

125
00:05:20.004 --> 00:05:23.000
and it wraps up our latest challenge.

