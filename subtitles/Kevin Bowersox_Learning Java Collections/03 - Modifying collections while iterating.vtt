WEBVTT
1
00:00:00.005 --> 00:00:01.007
- [Instructor] When beginning to iterate

2
00:00:01.007 --> 00:00:04.001
through collections, most Java developers

3
00:00:04.001 --> 00:00:07.000
encounter the concurrent modification exception.

4
00:00:07.000 --> 00:00:09.002
It's almost like a rite of passage.

5
00:00:09.002 --> 00:00:12.002
So I'm going to show you how to avoid that.

6
00:00:12.002 --> 00:00:15.008
In our application, I've created a collection of rooms.

7
00:00:15.008 --> 00:00:18.002
Then we have some innocent looking code

8
00:00:18.002 --> 00:00:21.007
that iterates through the rooms using a for-each loop.

9
00:00:21.007 --> 00:00:23.003
Inside of the loop's body,

10
00:00:23.003 --> 00:00:26.004
we check to see if a room is pet friendly.

11
00:00:26.004 --> 00:00:28.008
Pet friendly is a new Boolean field

12
00:00:28.008 --> 00:00:32.006
that I've added to the room type and added accessors for.

13
00:00:32.006 --> 00:00:34.005
If the room is pet friendly,

14
00:00:34.005 --> 00:00:36.005
we're going to attempt to remove it

15
00:00:36.005 --> 00:00:38.005
from the collection of rooms.

16
00:00:38.005 --> 00:00:40.006
Now let's go ahead and see what happens

17
00:00:40.006 --> 00:00:42.003
when we execute this code.

18
00:00:42.003 --> 00:00:46.004
Yup, there it is, the concurrent modification exception.

19
00:00:46.004 --> 00:00:51.002
So let's talk a little bit about why that occurred.

20
00:00:51.002 --> 00:00:53.009
The concurrent modification exception is thrown

21
00:00:53.009 --> 00:00:56.009
when the underlying collection is modified

22
00:00:56.009 --> 00:00:59.002
while we're iterating through it.

23
00:00:59.002 --> 00:01:02.001
It can be triggered if we attempt to add, remove,

24
00:01:02.001 --> 00:01:06.006
or in general change the collection inside of a loop.

25
00:01:06.006 --> 00:01:09.008
This exception protects the collection from being changed

26
00:01:09.008 --> 00:01:12.008
by another thread while we're iterating through it.

27
00:01:12.008 --> 00:01:15.000
However, the exception is still thrown

28
00:01:15.000 --> 00:01:17.009
for single-threaded code like ours.

29
00:01:17.009 --> 00:01:20.001
Changes to a collection during iteration

30
00:01:20.001 --> 00:01:23.000
can have unexpected results at runtime,

31
00:01:23.000 --> 00:01:25.005
so that's difficult to troubleshoot.

32
00:01:25.005 --> 00:01:27.009
The iterator attempts to protect us from that

33
00:01:27.009 --> 00:01:29.005
by failing fast.

34
00:01:29.005 --> 00:01:32.005
But what if we still need to remove an element

35
00:01:32.005 --> 00:01:34.009
from a collection that we're iterating?

36
00:01:34.009 --> 00:01:37.009
Let's take a look at one option.

37
00:01:37.009 --> 00:01:40.005
We can collect the elements

38
00:01:40.005 --> 00:01:43.007
we'd like to remove in a new collection.

39
00:01:43.007 --> 00:01:47.003
So what I'm going to do is create a new collection

40
00:01:47.003 --> 00:01:51.003
outside of the for-each loop where we're not iterating.

41
00:01:51.003 --> 00:01:54.009
So here we have a collection of type room

42
00:01:54.009 --> 00:01:57.004
that's backed by an array list.

43
00:01:57.004 --> 00:02:01.005
Inside of the body of our for loop,

44
00:02:01.005 --> 00:02:05.001
I can go ahead and switch up line 25.

45
00:02:05.001 --> 00:02:07.000
And instead of attempting to remove

46
00:02:07.000 --> 00:02:12.007
from the original collection, I'm just going to add the room

47
00:02:12.007 --> 00:02:16.000
to the new collection that we created

48
00:02:16.000 --> 00:02:18.005
that isn't part of the iteration.

49
00:02:18.005 --> 00:02:23.007
Now outside of the for-each loop where we're not iterating,

50
00:02:23.007 --> 00:02:27.004
what I can do is take our original collection of rooms

51
00:02:27.004 --> 00:02:31.009
and I can invoke the removeAll method on the collection.

52
00:02:31.009 --> 00:02:34.005
You'll recall this is a bulk operation

53
00:02:34.005 --> 00:02:37.002
that's provided through the collection interface.

54
00:02:37.002 --> 00:02:41.002
And if we just pass in the collection of rooms

55
00:02:41.002 --> 00:02:43.008
that we gathered during the iteration

56
00:02:43.008 --> 00:02:45.009
in a separate collection,

57
00:02:45.009 --> 00:02:49.007
we can then remove them all from the original collection.

58
00:02:49.007 --> 00:02:53.004
Okay, so let's go ahead and we can see this in action

59
00:02:53.004 --> 00:02:57.005
and you'll notice that the rooms Oxford and Victoria

60
00:02:57.005 --> 00:03:00.002
were removed from our collection.

61
00:03:00.002 --> 00:03:03.004
Those were the pet-friendly rooms. Excellent.

62
00:03:03.004 --> 00:03:06.000
Now, there's another way that we can do this

63
00:03:06.000 --> 00:03:11.003
using an iterator, so let's take a look at that.

64
00:03:11.003 --> 00:03:15.004
So first, let's get an iterator for our rooms collection.

65
00:03:15.004 --> 00:03:20.005
We can do that by invoking the iterator method on it.

66
00:03:20.005 --> 00:03:23.006
Okay, so now that we have our iterator,

67
00:03:23.006 --> 00:03:25.009
I'm going to create a while loop

68
00:03:25.009 --> 00:03:29.003
that uses the iterator to traverse the collection.

69
00:03:29.003 --> 00:03:31.005
This is the pattern that we saw before.

70
00:03:31.005 --> 00:03:34.005
And once again, my IDE attempts to perform the cast,

71
00:03:34.005 --> 00:03:36.006
so I'm going to remove that.

72
00:03:36.006 --> 00:03:40.009
And now inside of our while loop's body,

73
00:03:40.009 --> 00:03:45.000
I can just go ahead and grab this conditional statement.

74
00:03:45.000 --> 00:03:48.008
So I'll just cut that and paste it here.

75
00:03:48.008 --> 00:03:50.002
And then I'm going to go ahead

76
00:03:50.002 --> 00:03:54.007
and clean up this code that use the for-each loop.

77
00:03:54.007 --> 00:03:58.008
Now, when we're doing the iteration using the iterator,

78
00:03:58.008 --> 00:04:01.008
we can just replace line 26

79
00:04:01.008 --> 00:04:05.007
with a call to the iterator's remove method.

80
00:04:05.007 --> 00:04:10.000
And this will allow us to safely remove an element

81
00:04:10.000 --> 00:04:12.006
from a collection that we're iterating

82
00:04:12.006 --> 00:04:15.007
without throwing the concurrent modification exception.

83
00:04:15.007 --> 00:04:18.007
All right, okay, so let's go ahead and we'll save this code

84
00:04:18.007 --> 00:04:21.001
and then I'll execute it and you'll notice once again,

85
00:04:21.001 --> 00:04:23.008
we've removed the pet-friendly rooms.

86
00:04:23.008 --> 00:04:26.000
Collections often provide several ways

87
00:04:26.000 --> 00:04:27.009
to achieve the same outcome,

88
00:04:27.009 --> 00:04:30.005
but sometimes that can get us into trouble

89
00:04:30.005 --> 00:04:33.006
like when we modify a collection that we're iterating.

90
00:04:33.006 --> 00:04:35.009
So stick to the methods that I showed you

91
00:04:35.009 --> 00:04:37.005
or better yet use a stream.

92
00:04:37.005 --> 00:04:39.000
I'll show you that next.

