WEBVTT
1
00:00:00.005 --> 00:00:02.005
- [Instructor] Let's walk through a few code examples

2
00:00:02.005 --> 00:00:04.007
that create a collection.

3
00:00:04.007 --> 00:00:07.007
Collections can be declared and instantiated

4
00:00:07.007 --> 00:00:09.009
like any other object.

5
00:00:09.009 --> 00:00:12.004
We specify the type of the collection,

6
00:00:12.004 --> 00:00:14.000
provide its identifier,

7
00:00:14.000 --> 00:00:17.000
and then instantiate a new collection implementation

8
00:00:17.000 --> 00:00:19.004
that will be assigned to the variable.

9
00:00:19.004 --> 00:00:22.006
I'm using the collection interface as the variable type.

10
00:00:22.006 --> 00:00:25.009
However, if I wanted to be more specific about the type,

11
00:00:25.009 --> 00:00:28.008
I could've switched over to use the set interface.

12
00:00:28.008 --> 00:00:31.000
So let's make the change and import the set

13
00:00:31.000 --> 00:00:33.009
from java.util.set.

14
00:00:33.009 --> 00:00:36.008
Now, the reason this works is because

15
00:00:36.008 --> 00:00:40.007
the hash set implements the set interface.

16
00:00:40.007 --> 00:00:43.007
We couldn't do something like using a list

17
00:00:43.007 --> 00:00:44.007
as our variable type

18
00:00:44.007 --> 00:00:47.003
because it's not compatible with hash set.

19
00:00:47.003 --> 00:00:49.004
But let's go ahead, we'll import the list

20
00:00:49.004 --> 00:00:51.006
from java.util.list,

21
00:00:51.006 --> 00:00:55.002
and then we'll change the implementation over

22
00:00:55.002 --> 00:00:58.000
to use the array list.

23
00:00:58.000 --> 00:01:00.005
So we'll add the array list constructor,

24
00:01:00.005 --> 00:01:02.004
and now we have a list.

25
00:01:02.004 --> 00:01:06.000
Now, let's talk about one more thing that you shouldn't do.

26
00:01:06.000 --> 00:01:08.002
Sometimes, you'll see people try to

27
00:01:08.002 --> 00:01:11.007
instantiate the collection type.

28
00:01:11.007 --> 00:01:15.006
The collection type doesn't have any direct implementation,

29
00:01:15.006 --> 00:01:17.009
so you can't do something like this.

30
00:01:17.009 --> 00:01:20.006
Let's just go ahead and we'll get rid of that code.

31
00:01:20.006 --> 00:01:25.000
Now I'm going to switch back over to using a collection

32
00:01:25.000 --> 00:01:28.000
as the variable type for our object.

33
00:01:28.000 --> 00:01:31.004
Okay so, now we have a collection,

34
00:01:31.004 --> 00:01:34.007
and in that collection, I'd like to store strings.

35
00:01:34.007 --> 00:01:38.007
So I'm going to specify the generic type argument

36
00:01:38.007 --> 00:01:40.001
on the variable type.

37
00:01:40.001 --> 00:01:42.006
And then over here on the constructor,

38
00:01:42.006 --> 00:01:45.001
all use the diamond operator

39
00:01:45.001 --> 00:01:50.006
to infer the generic type from our variable types Generic.

40
00:01:50.006 --> 00:01:51.008
Okay.

41
00:01:51.008 --> 00:01:55.002
Now that that's in place, we have our new collection,

42
00:01:55.002 --> 00:01:57.004
but it's kind of empty.

43
00:01:57.004 --> 00:02:01.003
Let's go ahead and add some elements into this collection.

44
00:02:01.003 --> 00:02:03.006
I'm going to add a few of my favorite things.

45
00:02:03.006 --> 00:02:06.008
So I love to snowboard, I love Linux,

46
00:02:06.008 --> 00:02:10.003
I also love to read, and I'm so excited about snowboarding,

47
00:02:10.003 --> 00:02:12.002
I'm going to add that twice.

48
00:02:12.002 --> 00:02:15.004
All right, now our collection isn't so empty.

49
00:02:15.004 --> 00:02:18.007
Let's go ahead and print this out to the console.

50
00:02:18.007 --> 00:02:21.007
Now, I can just pass in the collection

51
00:02:21.007 --> 00:02:24.009
to the print LN method, and that's because

52
00:02:24.009 --> 00:02:29.002
collections provide their own two-string implementation.

53
00:02:29.002 --> 00:02:30.008
So with that code in place,

54
00:02:30.008 --> 00:02:33.002
we can go ahead and look at the elements

55
00:02:33.002 --> 00:02:35.000
that are found in our collection.

56
00:02:35.000 --> 00:02:37.002
So we see the snowboard, Linux books,

57
00:02:37.002 --> 00:02:39.000
and the snowboard again.

58
00:02:39.000 --> 00:02:41.000
All right, now we're going to take a look at

59
00:02:41.000 --> 00:02:45.000
another way that we can create a collection.

60
00:02:45.000 --> 00:02:48.007
Each collection implementation has a conversion constructor

61
00:02:48.007 --> 00:02:52.005
that accepts another collection as an argument.

62
00:02:52.005 --> 00:02:55.003
So we're going to take our collection C

63
00:02:55.003 --> 00:02:59.007
and convert it to a set using the conversion constructor.

64
00:02:59.007 --> 00:03:02.008
To do this, we're first going to declare

65
00:03:02.008 --> 00:03:04.006
a new variable of type collection

66
00:03:04.006 --> 00:03:06.002
with a generic type of string.

67
00:03:06.002 --> 00:03:08.001
I'm going to call it favorite things.

68
00:03:08.001 --> 00:03:11.006
And then, I'm going to use the hash set constructor

69
00:03:11.006 --> 00:03:16.005
and pass into that constructor our original collection.

70
00:03:16.005 --> 00:03:18.005
Okay, so let's do this.

71
00:03:18.005 --> 00:03:21.001
Instead of printing out the original collection,

72
00:03:21.001 --> 00:03:25.005
let's go ahead and print out the favorite things collection.

73
00:03:25.005 --> 00:03:28.006
I'm going to save it, and then watch what happens.

74
00:03:28.006 --> 00:03:31.006
Now that we've switched over to a hash set,

75
00:03:31.006 --> 00:03:34.004
we've lost one of the snowboard elements,

76
00:03:34.004 --> 00:03:39.000
and that's because a set doesn't contain duplicate elements.

77
00:03:39.000 --> 00:03:42.004
Now let's talk about one more best practice.

78
00:03:42.004 --> 00:03:44.001
When you're working with a collection,

79
00:03:44.001 --> 00:03:46.005
you want to avoid as much as possible

80
00:03:46.005 --> 00:03:48.007
doing something like this.

81
00:03:48.007 --> 00:03:52.008
So here, you'll notice that I'm using the array list,

82
00:03:52.008 --> 00:03:58.000
which is the concrete implementation, as the variable type.

83
00:03:58.000 --> 00:04:02.007
In general, you want to use the most abstract type possible.

84
00:04:02.007 --> 00:04:06.006
So that's going to be something like the list interface,

85
00:04:06.006 --> 00:04:11.000
or you would use the collection interface in this situation.

86
00:04:11.000 --> 00:04:14.002
By using the most abstract type possible

87
00:04:14.002 --> 00:04:16.007
for the variable type of your object,

88
00:04:16.007 --> 00:04:20.001
it allows you to switch the implementation

89
00:04:20.001 --> 00:04:22.002
without any consequences.

90
00:04:22.002 --> 00:04:25.009
So you'll notice, I just switched over to an array deck

91
00:04:25.009 --> 00:04:29.002
and I didn't need to change any of the code

92
00:04:29.002 --> 00:04:32.005
that relied on the collection interface.

93
00:04:32.005 --> 00:04:36.005
So this is going to make your code a lot higher quality

94
00:04:36.005 --> 00:04:38.009
if you keep this point in mind.

95
00:04:38.009 --> 00:04:42.003
I'm always on the lookout for it in a code review.

96
00:04:42.003 --> 00:04:44.000
All right, and just to prove it works,

97
00:04:44.000 --> 00:04:46.007
we'll go ahead and execute our code again.

98
00:04:46.007 --> 00:04:49.006
And there, you can see our output.

99
00:04:49.006 --> 00:04:53.003
So, just by a few examples of collections,

100
00:04:53.003 --> 00:04:55.007
you can start to see the flexibility

101
00:04:55.007 --> 00:04:58.009
that gets provided by the Java collections framework.

102
00:04:58.009 --> 00:05:00.007
It's going to be even more apparent

103
00:05:00.007 --> 00:05:04.000
when we take a deeper look at generics in our next lesson.

