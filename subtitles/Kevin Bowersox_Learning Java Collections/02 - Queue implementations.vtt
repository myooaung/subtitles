WEBVTT
1
00:00:00.005 --> 00:00:02.004
- [Instructor] Let's walk through a few examples

2
00:00:02.004 --> 00:00:05.005
to see the methods on the queue in action.

3
00:00:05.005 --> 00:00:07.007
To do this, we're going to revisit

4
00:00:07.007 --> 00:00:09.002
the check-in list scenario

5
00:00:09.002 --> 00:00:12.002
that we used when working with a list.

6
00:00:12.002 --> 00:00:13.006
You'll see that this problem

7
00:00:13.006 --> 00:00:17.007
is much better suited for a solution that uses a queue.

8
00:00:17.007 --> 00:00:18.009
So to start out,

9
00:00:18.009 --> 00:00:21.009
I'm going to create a queue that holds guests

10
00:00:21.009 --> 00:00:24.005
and I'll name it the checkinQueue.

11
00:00:24.005 --> 00:00:26.003
For the queue implementation,

12
00:00:26.003 --> 00:00:29.006
I'm going to use an array deque.

13
00:00:29.006 --> 00:00:32.009
Okay, so now we have our queue.

14
00:00:32.009 --> 00:00:35.003
The first thing that I'm going to do on this queue

15
00:00:35.003 --> 00:00:36.007
might seem a little bit odd,

16
00:00:36.007 --> 00:00:38.008
but I'm going to attempt to retrieve

17
00:00:38.008 --> 00:00:42.004
the element at the head of our empty queue

18
00:00:42.004 --> 00:00:45.002
using the remove method.

19
00:00:45.002 --> 00:00:46.000
And then from there,

20
00:00:46.000 --> 00:00:48.003
I'm just going to print that element

21
00:00:48.003 --> 00:00:49.009
or guest to the console.

22
00:00:49.009 --> 00:00:52.002
Now watch the behavior here.

23
00:00:52.002 --> 00:00:55.002
You'll notice that the method throws an exception

24
00:00:55.002 --> 00:00:57.004
because I'm trying to remove the element

25
00:00:57.004 --> 00:01:00.000
at the head of an empty queue.

26
00:01:00.000 --> 00:01:02.007
Now if I were to switch over this method

27
00:01:02.007 --> 00:01:04.006
from remove to poll,

28
00:01:04.006 --> 00:01:06.005
we'll get different behavior

29
00:01:06.005 --> 00:01:09.003
and you'll notice that it returns null.

30
00:01:09.003 --> 00:01:12.001
So that's the difference between some of those behaviors

31
00:01:12.001 --> 00:01:15.004
we discussed for the method pairs that insert, remove,

32
00:01:15.004 --> 00:01:17.005
and examine elements in the queue.

33
00:01:17.005 --> 00:01:20.008
Some throw exceptions while others return a special value

34
00:01:20.008 --> 00:01:24.004
like a null or a Boolean.

35
00:01:24.004 --> 00:01:26.007
Now let's add some guests into the queue

36
00:01:26.007 --> 00:01:28.007
so we can work with it.

37
00:01:28.007 --> 00:01:31.007
Now you'll notice we could use the add method

38
00:01:31.007 --> 00:01:35.006
and this is one of the methods that will throw an exception

39
00:01:35.006 --> 00:01:39.005
if we attempt to add too many elements to a bounded queue.

40
00:01:39.005 --> 00:01:41.008
And we can see that within the Java docs.

41
00:01:41.008 --> 00:01:43.007
it's always a good idea to take a peek

42
00:01:43.007 --> 00:01:46.003
at the behavior of the method within the IDE

43
00:01:46.003 --> 00:01:48.006
so you get the exact one you'd like.

44
00:01:48.006 --> 00:01:50.007
Now I don't want to throw an exception,

45
00:01:50.007 --> 00:01:53.004
so instead I'm going to use offer

46
00:01:53.004 --> 00:01:56.006
in order to add John into the queue.

47
00:01:56.006 --> 00:01:59.000
Okay, so now we have John in the queue.

48
00:01:59.000 --> 00:02:03.001
Let's go ahead and we'll add Bob as well.

49
00:02:03.001 --> 00:02:04.008
With both guests in the queue,

50
00:02:04.008 --> 00:02:07.000
I'm then going to use a small utility method

51
00:02:07.000 --> 00:02:08.004
that I've added to the class

52
00:02:08.004 --> 00:02:10.007
that prints out the queue's contents

53
00:02:10.007 --> 00:02:13.004
and gives us some information about what guest

54
00:02:13.004 --> 00:02:16.004
is in each position in the queue.

55
00:02:16.004 --> 00:02:17.006
So let's go ahead.

56
00:02:17.006 --> 00:02:21.001
We'll invoke that right after adding

57
00:02:21.001 --> 00:02:23.008
our guests into the queue.

58
00:02:23.008 --> 00:02:25.001
Then I'm going to go ahead

59
00:02:25.001 --> 00:02:26.008
and call that method again

60
00:02:26.008 --> 00:02:29.008
after we pull the queue and remove John.

61
00:02:29.008 --> 00:02:31.002
Okay, so let's go ahead

62
00:02:31.002 --> 00:02:32.007
and we'll execute this code,

63
00:02:32.007 --> 00:02:34.006
and you'll notice that both guests

64
00:02:34.006 --> 00:02:36.005
were added into the queue.

65
00:02:36.005 --> 00:02:39.004
First, John was added at the head of the queue

66
00:02:39.004 --> 00:02:42.004
and then Bob was inserted after him.

67
00:02:42.004 --> 00:02:44.008
Now when we polled the queue

68
00:02:44.008 --> 00:02:49.002
and removed the element at the head, it removed John

69
00:02:49.002 --> 00:02:50.007
and then you'll notice that Bob

70
00:02:50.007 --> 00:02:52.007
advanced to the head of the queue.

71
00:02:52.007 --> 00:02:56.001
So that's the behavior of first-in, first-out order.

72
00:02:56.001 --> 00:02:57.008
We inserted John first

73
00:02:57.008 --> 00:03:01.007
and he was the first to removed.

74
00:03:01.007 --> 00:03:06.003
Okay, let's now add two other guests into our queue.

75
00:03:06.003 --> 00:03:10.004
First, I'm going to add Sonia followed by Siri.

76
00:03:10.004 --> 00:03:12.007
Then I'm going to copy this block of code

77
00:03:12.007 --> 00:03:15.000
and modify it to use the peek method.

78
00:03:15.000 --> 00:03:17.002
So I'll switch over to guest1

79
00:03:17.002 --> 00:03:18.008
and then instead of polling

80
00:03:18.008 --> 00:03:20.005
I'm just going to peek,

81
00:03:20.005 --> 00:03:22.002
and then we'll print out guest1.

82
00:03:22.002 --> 00:03:24.002
Now let's see what happens here.

83
00:03:24.002 --> 00:03:26.003
So you'll notice that the four guests

84
00:03:26.003 --> 00:03:28.005
were added into the queue

85
00:03:28.005 --> 00:03:32.002
and then we polled one element from the queue

86
00:03:32.002 --> 00:03:34.009
and that got us John who was at the head.

87
00:03:34.009 --> 00:03:36.002
But then when we peeked

88
00:03:36.002 --> 00:03:39.001
we got the element at the head of the queue,

89
00:03:39.001 --> 00:03:42.003
but that element remained in the queue.

90
00:03:42.003 --> 00:03:45.005
And that's the difference between poll and peek.

91
00:03:45.005 --> 00:03:47.005
Poll is going to retrieve

92
00:03:47.005 --> 00:03:50.005
and remove the element at the head of the queue

93
00:03:50.005 --> 00:03:52.001
while peek is just going

94
00:03:52.001 --> 00:03:56.001
to retrieve it for us without removing it.

95
00:03:56.001 --> 00:03:57.005
Now throughout this example,

96
00:03:57.005 --> 00:04:00.001
I've been using all of the queue methods

97
00:04:00.001 --> 00:04:02.004
that do not throw exceptions.

98
00:04:02.004 --> 00:04:04.009
We could easily switch over to them.

99
00:04:04.009 --> 00:04:09.000
So I'm just going to replace offer with add in my code

100
00:04:09.000 --> 00:04:12.002
and then I can close that dialogue,

101
00:04:12.002 --> 00:04:15.005
and then we'll switch over from poll to remove

102
00:04:15.005 --> 00:04:19.004
and then the equivalent method for peek is element.

103
00:04:19.004 --> 00:04:22.000
So these methods would all throw exceptions

104
00:04:22.000 --> 00:04:25.000
if we were dealing with a full or an empty queue.

105
00:04:25.000 --> 00:04:26.004
Now that's not the case,

106
00:04:26.004 --> 00:04:29.003
so we don't see that when we execute them.

107
00:04:29.003 --> 00:04:32.008
But aside from the exceptions and the return types,

108
00:04:32.008 --> 00:04:37.004
the behaviors are all the same as their counterparts.

109
00:04:37.004 --> 00:04:41.001
Now I want to show you one other queue implementation.

110
00:04:41.001 --> 00:04:42.006
You'll recall that I mentioned

111
00:04:42.006 --> 00:04:46.000
not all queues are first-in, first-out order.

112
00:04:46.000 --> 00:04:47.007
That's the case when we use

113
00:04:47.007 --> 00:04:50.009
the priority queue implementation.

114
00:04:50.009 --> 00:04:53.005
This implementation allows us to provide

115
00:04:53.005 --> 00:04:55.006
a comparitor that determines the order

116
00:04:55.006 --> 00:04:58.005
that elements are stored in the queue.

117
00:04:58.005 --> 00:05:01.006
So I'm going to switch over to the priority queue

118
00:05:01.006 --> 00:05:05.001
and then we need to build a comparitor for it.

119
00:05:05.001 --> 00:05:08.008
So to do that, I'll declare a comparitor

120
00:05:08.008 --> 00:05:11.005
and it will have a generic type of guest,

121
00:05:11.005 --> 00:05:13.002
and the competitor's going to help us

122
00:05:13.002 --> 00:05:14.008
with our loyalty program.

123
00:05:14.008 --> 00:05:17.006
So I'm just going to call it programComp.

124
00:05:17.006 --> 00:05:20.007
And then in order to create the comparitor,

125
00:05:20.007 --> 00:05:23.006
I can use the static comparing method

126
00:05:23.006 --> 00:05:26.002
that is found on the comparitor type.

127
00:05:26.002 --> 00:05:29.005
From here I can pass in a method reference

128
00:05:29.005 --> 00:05:32.008
to the isLoyaltyProgramMember method

129
00:05:32.008 --> 00:05:36.000
and then I'm going to reverse the comparitor

130
00:05:36.000 --> 00:05:39.009
so that it sorts our guests in descending order.

131
00:05:39.009 --> 00:05:42.005
This is going to place loyalty program members

132
00:05:42.005 --> 00:05:46.005
ahead of non-loyalty program members.

133
00:05:46.005 --> 00:05:49.002
Okay, now once we have the comparitor,

134
00:05:49.002 --> 00:05:52.002
we just need to pass it into the constructor

135
00:05:52.002 --> 00:05:54.001
of the priority queue.

136
00:05:54.001 --> 00:05:57.002
Now watch what happens when I execute the code.

137
00:05:57.002 --> 00:05:59.000
You'll notice that our two members

138
00:05:59.000 --> 00:06:00.003
of the loyalty program, Sonia and Siri,

139
00:06:00.003 --> 00:06:06.003
advance in front of John and Bob in the queue.

140
00:06:06.003 --> 00:06:09.009
That's because John and Bob were not part of the program.

141
00:06:09.009 --> 00:06:12.006
Using a priority queue and a comparitor

142
00:06:12.006 --> 00:06:15.003
is a much simpler approach for achieving the logic

143
00:06:15.003 --> 00:06:18.002
that we need to handle loyalty program members

144
00:06:18.002 --> 00:06:20.006
within our check-in list.

145
00:06:20.006 --> 00:06:22.007
I would definitely favor the priority queue

146
00:06:22.007 --> 00:06:24.009
over the list solution that we built.

147
00:06:24.009 --> 00:06:27.006
So that wraps up our look at the queue interface

148
00:06:27.006 --> 00:06:30.000
and a few of its implementations.

149
00:06:30.000 --> 00:06:31.007
The key to working with the queue

150
00:06:31.007 --> 00:06:33.005
is understanding FIFO order

151
00:06:33.005 --> 00:06:37.000
and the subtle differences in the behavior of its methods.

