WEBVTT
1
00:00:00.005 --> 00:00:01.005
- [Instructor] In our last lesson,

2
00:00:01.005 --> 00:00:03.007
we were able to use the functional style

3
00:00:03.007 --> 00:00:06.006
to build out a pipeline using our collection,

4
00:00:06.006 --> 00:00:09.003
a stream and some operations.

5
00:00:09.003 --> 00:00:12.006
Now, it's definitely not as concise as we would like,

6
00:00:12.006 --> 00:00:16.002
and that's because we haven't used a lambda expression yet.

7
00:00:16.002 --> 00:00:17.006
Let's talk about that.

8
00:00:17.006 --> 00:00:20.002
You'll recall that a lambda is a function

9
00:00:20.002 --> 00:00:23.009
that only has parameters, an arrow and a body.

10
00:00:23.009 --> 00:00:26.002
Anything else, like a method name

11
00:00:26.002 --> 00:00:29.004
or a return type is unnecessary.

12
00:00:29.004 --> 00:00:33.002
So let's go ahead and convert these functional interfaces

13
00:00:33.002 --> 00:00:34.009
over to lambdas.

14
00:00:34.009 --> 00:00:39.000
To do that, we can remove everything to the left side

15
00:00:39.000 --> 00:00:41.004
of the parameter going into the method

16
00:00:41.004 --> 00:00:43.004
on the functional interface.

17
00:00:43.004 --> 00:00:46.002
Okay, the next thing we need is an arrow,

18
00:00:46.002 --> 00:00:49.001
and I'm just going to overwrite some

19
00:00:49.001 --> 00:00:52.006
of this syntax that was left from the previous code.

20
00:00:52.006 --> 00:00:54.006
Okay, so now we got our arrow,

21
00:00:54.006 --> 00:00:56.004
I'm going to remove this debugging as well.

22
00:00:56.004 --> 00:00:58.005
It's really not necessary.

23
00:00:58.005 --> 00:01:02.006
And then I'm going to remove everything on the right side

24
00:01:02.006 --> 00:01:04.001
of the method body.

25
00:01:04.001 --> 00:01:06.004
Okay, watch what happens.

26
00:01:06.004 --> 00:01:09.008
Now, all we're left with is the return statement.

27
00:01:09.008 --> 00:01:12.009
And that's not necessary for a lambda

28
00:01:12.009 --> 00:01:15.003
that doesn't have multiple lines.

29
00:01:15.003 --> 00:01:17.008
We can just remove the return statement,

30
00:01:17.008 --> 00:01:21.003
and now we get this nice concise lambda expression.

31
00:01:21.003 --> 00:01:24.001
Look what that did for our code.

32
00:01:24.001 --> 00:01:27.007
Okay, let's do the same thing for the forEach method

33
00:01:27.007 --> 00:01:31.001
by switching out the functional interface consumer

34
00:01:31.001 --> 00:01:32.008
with a lambda function.

35
00:01:32.008 --> 00:01:35.001
You'll recall we're going to get rid

36
00:01:35.001 --> 00:01:38.004
of everything to the left of the parameter.

37
00:01:38.004 --> 00:01:42.006
Then we're going to replace the syntax with an arrow.

38
00:01:42.006 --> 00:01:45.006
Then we're able to remove everything to the right

39
00:01:45.006 --> 00:01:47.004
of the method body.

40
00:01:47.004 --> 00:01:49.009
Then let's just tidy this up,

41
00:01:49.009 --> 00:01:51.006
and look what that does for us.

42
00:01:51.006 --> 00:01:55.002
I told you it was concise, and it gets even better.

43
00:01:55.002 --> 00:01:59.007
We can replace our lambda with a method reference.

44
00:01:59.007 --> 00:02:01.005
A method reference allows us

45
00:02:01.005 --> 00:02:05.004
to pass a method into a function.

46
00:02:05.004 --> 00:02:08.006
So here I can use the Room type,

47
00:02:08.006 --> 00:02:10.004
and then specify that we'd like

48
00:02:10.004 --> 00:02:13.001
to invoke the isPetFriendly method,

49
00:02:13.001 --> 00:02:15.005
and that will be used as the predicate

50
00:02:15.005 --> 00:02:17.006
for our filter operation.

51
00:02:17.006 --> 00:02:18.009
Look at that.

52
00:02:18.009 --> 00:02:20.007
Okay, let's go ahead, we'll execute it.

53
00:02:20.007 --> 00:02:24.002
You can see that we got the same results as last time,

54
00:02:24.002 --> 00:02:27.007
except this time, it was only three lines of code,

55
00:02:27.007 --> 00:02:30.008
and it very much does say what we want to achieve.

56
00:02:30.008 --> 00:02:32.007
We want to stream the elements

57
00:02:32.007 --> 00:02:34.006
from our collection of rooms,

58
00:02:34.006 --> 00:02:37.007
remove any rooms that are not pet friendly,

59
00:02:37.007 --> 00:02:39.009
and then write then out to the console.

60
00:02:39.009 --> 00:02:41.008
So we've only scratched the surface

61
00:02:41.008 --> 00:02:45.001
of what operations are exposed on the stream interface

62
00:02:45.001 --> 00:02:47.004
but now you should understand the pattern

63
00:02:47.004 --> 00:02:50.000
of how we work with stream operations,

64
00:02:50.000 --> 00:02:52.008
and lambdas to build out a pipeline.

65
00:02:52.008 --> 00:02:56.000
Let's take a look at a few more operations next.

