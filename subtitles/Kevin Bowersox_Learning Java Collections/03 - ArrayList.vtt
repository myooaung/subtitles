WEBVTT
1
00:00:00.005 --> 00:00:03.002
- [Instructor] To help us work with the methods on a list

2
00:00:03.002 --> 00:00:06.008
I've added a new guest class to our application.

3
00:00:06.008 --> 00:00:08.009
This class is going to store information

4
00:00:08.009 --> 00:00:11.001
about the guests of the Landon hotel,

5
00:00:11.001 --> 00:00:13.009
so things like their first name and last name.

6
00:00:13.009 --> 00:00:15.007
You'll also notice a boolean,

7
00:00:15.007 --> 00:00:19.000
loyalty program member on this class.

8
00:00:19.000 --> 00:00:22.003
This boolean is used to indicate whether or not

9
00:00:22.003 --> 00:00:24.009
a guest is a member of the loyalty program,

10
00:00:24.009 --> 00:00:26.009
which can give them some perks.

11
00:00:26.009 --> 00:00:28.006
So for example, in a minute,

12
00:00:28.006 --> 00:00:31.002
we're going to talk about a check-in list.

13
00:00:31.002 --> 00:00:33.006
The list is used to keep track of guests

14
00:00:33.006 --> 00:00:35.004
as they arrive at the hotel.

15
00:00:35.004 --> 00:00:38.008
So we know the order in which they should be checked in.

16
00:00:38.008 --> 00:00:42.005
If a guest is a member of the loyalty program,

17
00:00:42.005 --> 00:00:46.004
they are automatically placed ahead of non loyalty program

18
00:00:46.004 --> 00:00:50.000
members on the check-in list, just one of the perks.

19
00:00:50.000 --> 00:00:51.007
Now, you'll also notice I've added

20
00:00:51.007 --> 00:00:54.001
a list of rooms to this class.

21
00:00:54.001 --> 00:00:57.001
This list is going to store the rooms

22
00:00:57.001 --> 00:01:01.000
that a guest prefers to stay in while at the hotel.

23
00:01:01.000 --> 00:01:03.003
Now let's start working on our application.

24
00:01:03.003 --> 00:01:06.006
To get started, I'm going to create a list of guests

25
00:01:06.006 --> 00:01:08.007
and I'll name it check-in list.

26
00:01:08.007 --> 00:01:11.004
And then for the implementation of the list,

27
00:01:11.004 --> 00:01:14.006
I'm going to use an arry list.

28
00:01:14.006 --> 00:01:16.008
Now, one of the things I'm going to do

29
00:01:16.008 --> 00:01:21.002
is pass an integer as an argument into the constructor,

30
00:01:21.002 --> 00:01:23.002
let's just say 100.

31
00:01:23.002 --> 00:01:26.002
What this does is it declares the array list

32
00:01:26.002 --> 00:01:28.006
with a larger initial capacity.

33
00:01:28.006 --> 00:01:30.006
By default, the array list will have

34
00:01:30.006 --> 00:01:33.004
an initial capacity of 10.

35
00:01:33.004 --> 00:01:35.008
And if we're going to add a lot of items

36
00:01:35.008 --> 00:01:39.007
into the array list, it will quickly need to resize.

37
00:01:39.007 --> 00:01:43.000
So we can provide this larger initial capacity

38
00:01:43.000 --> 00:01:46.000
in order to avoid that resizing, in the event,

39
00:01:46.000 --> 00:01:48.005
we know we're going to store a lot of elements.

40
00:01:48.005 --> 00:01:52.000
So let's just imagine the Landon Hotel's going to check in

41
00:01:52.000 --> 00:01:54.006
a hundred guests today, we might want to go ahead

42
00:01:54.006 --> 00:01:56.009
and up that initial capacity.

43
00:01:56.009 --> 00:02:00.008
Okay, So we got our check-in list established just in time

44
00:02:00.008 --> 00:02:03.002
because two guests have just arrived.

45
00:02:03.002 --> 00:02:05.002
John has just walked into the lobby

46
00:02:05.002 --> 00:02:08.001
and he was followed closely by Maria.

47
00:02:08.001 --> 00:02:10.008
So we need to place John in the first position

48
00:02:10.008 --> 00:02:14.005
in our check-in list, and then Maria, in the second.

49
00:02:14.005 --> 00:02:17.001
Let's go ahead and we can do that

50
00:02:17.001 --> 00:02:18.007
using the add method.

51
00:02:18.007 --> 00:02:21.003
So I'll just go ahead, pass in John,

52
00:02:21.003 --> 00:02:25.004
and then I'll do the same thing for Maria.

53
00:02:25.004 --> 00:02:29.009
Okay, and then to see who is at what position in the list,

54
00:02:29.009 --> 00:02:33.005
I've built a small utility method that we're going to use

55
00:02:33.005 --> 00:02:35.008
to print that information to the console.

56
00:02:35.008 --> 00:02:38.006
So there, we can see John at the first position

57
00:02:38.006 --> 00:02:40.008
a nd Maria at the second.

58
00:02:40.008 --> 00:02:44.004
Now our next guest has just arrived and that's Sonia,

59
00:02:44.004 --> 00:02:46.009
she's a member of the loyalty program.

60
00:02:46.009 --> 00:02:50.004
So she needs to be placed ahead of John and Maria

61
00:02:50.004 --> 00:02:53.000
in the list, let's go ahead and do that.

62
00:02:53.000 --> 00:02:59.009
So inside of our class, we can use the overloaded add method

63
00:02:59.009 --> 00:03:03.005
on the list interface that accepts an index.

64
00:03:03.005 --> 00:03:06.007
And since Maria needs to be at the first position,

65
00:03:06.007 --> 00:03:12.002
I'll just provide a zero as the index in our first argument.

66
00:03:12.002 --> 00:03:15.001
And then we just need to pass in Sonia,

67
00:03:15.001 --> 00:03:17.003
as the second argument, that'll be the element

68
00:03:17.003 --> 00:03:20.006
added at that position, and then I'll go ahead

69
00:03:20.006 --> 00:03:23.009
and print the list so we can see what's going on.

70
00:03:23.009 --> 00:03:28.004
Okay, so now Sonia is at the first position in the list.

71
00:03:28.004 --> 00:03:32.001
Now having seen the benefits of the loyalty program,

72
00:03:32.001 --> 00:03:34.002
convinces Maria to join.

73
00:03:34.002 --> 00:03:38.006
So let's go ahead and add her into the program.

74
00:03:38.006 --> 00:03:42.000
I'm going to get Maria from the list,

75
00:03:42.000 --> 00:03:46.005
she's in the third position, so that's going to be index two

76
00:03:46.005 --> 00:03:50.003
and then I can set her loyalty program member status

77
00:03:50.003 --> 00:03:51.004
over to true.

78
00:03:51.004 --> 00:03:53.008
Okay, now she's in the program.

79
00:03:53.008 --> 00:03:56.000
Let's take a look at what we need to do.

80
00:03:56.000 --> 00:03:58.009
So Maria's in the loyalty program,

81
00:03:58.009 --> 00:04:02.004
so she needs to be ahead of John in the list.

82
00:04:02.004 --> 00:04:06.006
But right after Maria joined, Siri walked into the lobby

83
00:04:06.006 --> 00:04:09.001
and Siri's a loyalty program member.

84
00:04:09.001 --> 00:04:12.005
So now both Maria and Siri need to be placed

85
00:04:12.005 --> 00:04:14.007
ahead of John in the list,

86
00:04:14.007 --> 00:04:18.002
in positions two and three respectively.

87
00:04:18.002 --> 00:04:27.002
Let's go ahead and do that using a bulk insert operation.

88
00:04:27.002 --> 00:04:30.008
Okay, so I'm going to use our check-in list

89
00:04:30.008 --> 00:04:33.007
and then I'll invoke the add all method

90
00:04:33.007 --> 00:04:37.005
and I'll use the overloaded form that accepts an index.

91
00:04:37.005 --> 00:04:41.006
Now we're going to be placing this collection

92
00:04:41.006 --> 00:04:44.004
in the list at the second position,

93
00:04:44.004 --> 00:04:48.009
so that means we need to specify an index of one.

94
00:04:48.009 --> 00:04:51.004
Now we need to pass in the collection

95
00:04:51.004 --> 00:04:55.003
that we would like placed at that position.

96
00:04:55.003 --> 00:05:00.002
And in the collection, we're going to provide two elements.

97
00:05:00.002 --> 00:05:04.000
The first was Maria because she was in the loyalty program

98
00:05:04.000 --> 00:05:05.009
prior to Siri's arrival.

99
00:05:05.009 --> 00:05:08.002
And then the second will be Siri.

100
00:05:08.002 --> 00:05:14.000
So what will happen is at index one or position two,

101
00:05:14.000 --> 00:05:16.003
we'll insert Maria.

102
00:05:16.003 --> 00:05:19.007
And then after that, we'll insert Siri.

103
00:05:19.007 --> 00:05:22.007
We can see what that looks like by just going ahead

104
00:05:22.007 --> 00:05:25.005
and printing our list to the console, okay.

105
00:05:25.005 --> 00:05:28.003
So we knew Sonia would be in the first position.

106
00:05:28.003 --> 00:05:32.000
Then we see Maria as expected followed by Siri

107
00:05:32.000 --> 00:05:34.008
and then John who actually arrived first,

108
00:05:34.008 --> 00:05:37.003
but is not a loyalty program member

109
00:05:37.003 --> 00:05:40.002
is now in the last position in list.

110
00:05:40.002 --> 00:05:43.004
Well, kind of, you can see we have an issue here

111
00:05:43.004 --> 00:05:46.005
where we never removed Maria from the list,

112
00:05:46.005 --> 00:05:48.009
and she's no longer at that spot.

113
00:05:48.009 --> 00:05:51.005
Let's go ahead and we can take care of that

114
00:05:51.005 --> 00:05:55.001
by removing the last element in the list.

115
00:05:55.001 --> 00:05:59.008
So we can specify that index by getting the size

116
00:05:59.008 --> 00:06:03.008
of the check-in list and then just subtracting one from it.

117
00:06:03.008 --> 00:06:05.000
Okay.

118
00:06:05.000 --> 00:06:08.005
Now, if we go ahead, we can print our list again,

119
00:06:08.005 --> 00:06:10.004
and then we can see that last element,

120
00:06:10.004 --> 00:06:13.004
the duplicate of Maria was removed.

121
00:06:13.004 --> 00:06:16.008
Now at this point, John is extremely confused.

122
00:06:16.008 --> 00:06:20.005
He has no idea what position in the list he's in,

123
00:06:20.005 --> 00:06:23.008
so let's help him out and we'll tell him that.

124
00:06:23.008 --> 00:06:27.006
So to do that, I can just use the check-in list

125
00:06:27.006 --> 00:06:31.009
and I'll invoke the index of operation on the list.

126
00:06:31.009 --> 00:06:37.001
Here I pass in John, and this will return the index

127
00:06:37.001 --> 00:06:40.004
that John occupies within the list.

128
00:06:40.004 --> 00:06:42.008
Let's go ahead, we can run this code.

129
00:06:42.008 --> 00:06:45.004
And there you can see where indicating

130
00:06:45.004 --> 00:06:49.003
that John is at the third index in the list.

131
00:06:49.003 --> 00:06:51.008
Now, hopefully John knows how programmers count

132
00:06:51.008 --> 00:06:54.000
if we tell him he's at the third index,

133
00:06:54.000 --> 00:06:57.005
maybe it's best we just tell me it's in the fourth position.

134
00:06:57.005 --> 00:07:00.008
So these examples show you how position based methods

135
00:07:00.008 --> 00:07:03.005
found on the list, make it easier to manage

136
00:07:03.005 --> 00:07:05.007
groups of objects in collections,

137
00:07:05.007 --> 00:07:09.000
where we can leverage random access.

