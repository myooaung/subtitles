WEBVTT
1
00:00:00.005 --> 00:00:01.007
- [Instructor] So we're going to take a look

2
00:00:01.007 --> 00:00:03.006
at a few more stream operations

3
00:00:03.006 --> 00:00:05.004
because streams are really important

4
00:00:05.004 --> 00:00:07.001
when working with collections,

5
00:00:07.001 --> 00:00:09.004
but I can't go into the details on everything

6
00:00:09.004 --> 00:00:12.005
because I don't want to lose that focus on collections.

7
00:00:12.005 --> 00:00:14.006
So let's just walk through a few examples

8
00:00:14.006 --> 00:00:16.009
and then you might want to look at the streams API

9
00:00:16.009 --> 00:00:18.002
on your own.

10
00:00:18.002 --> 00:00:21.008
So let's imagine that we wanted to gather all

11
00:00:21.008 --> 00:00:24.007
of our pet-friendly rooms into a new collection.

12
00:00:24.007 --> 00:00:26.005
You might do something like this.

13
00:00:26.005 --> 00:00:28.002
You might declare a new collection

14
00:00:28.002 --> 00:00:30.004
and then inside of the stream,

15
00:00:30.004 --> 00:00:32.008
you're going to pass in that collection

16
00:00:32.008 --> 00:00:34.008
and add the rooms into it.

17
00:00:34.008 --> 00:00:36.006
So we're doing two things here.

18
00:00:36.006 --> 00:00:41.000
We're passing in an external object and we're modifying it

19
00:00:41.000 --> 00:00:42.002
within the stream.

20
00:00:42.002 --> 00:00:45.006
Now in general, it's okay to work with external objects

21
00:00:45.006 --> 00:00:46.009
inside of your stream.

22
00:00:46.009 --> 00:00:49.009
It's okay to modify objects inside of your stream,

23
00:00:49.009 --> 00:00:52.002
but you should never do both.

24
00:00:52.002 --> 00:00:55.008
So there's an operation we can use to handle this.

25
00:00:55.008 --> 00:00:58.005
We can use the collect operation.

26
00:00:58.005 --> 00:01:00.006
It's a terminal operation that we can use

27
00:01:00.006 --> 00:01:02.006
within our pipeline.

28
00:01:02.006 --> 00:01:06.003
And the collect operation accepts a collector

29
00:01:06.003 --> 00:01:09.007
and we get several collectors on the collector's class

30
00:01:09.007 --> 00:01:11.002
via its static methods.

31
00:01:11.002 --> 00:01:14.005
And probably the one you'll use the most is toList.

32
00:01:14.005 --> 00:01:17.001
So essentially all the elements that flow

33
00:01:17.001 --> 00:01:20.001
into the collect operation are going to be gathered

34
00:01:20.001 --> 00:01:23.006
into a list and returned by this operation.

35
00:01:23.006 --> 00:01:28.006
So all we need to do then is just assign that list

36
00:01:28.006 --> 00:01:32.004
that's returned by the operation to our new collection

37
00:01:32.004 --> 00:01:34.009
and then we can go ahead and execute the code

38
00:01:34.009 --> 00:01:37.004
and you'll see that our stream here is going

39
00:01:37.004 --> 00:01:40.007
to print those elements in the collection

40
00:01:40.007 --> 00:01:42.002
out to the console.

41
00:01:42.002 --> 00:01:43.008
Now, if we look at this stream,

42
00:01:43.008 --> 00:01:46.004
there's actually a better way we can do this.

43
00:01:46.004 --> 00:01:50.006
You'll notice that we are printing out the result

44
00:01:50.006 --> 00:01:52.004
of invoking the getName method,

45
00:01:52.004 --> 00:01:54.008
because we just want to get the name of the room.

46
00:01:54.008 --> 00:01:58.002
What we can actually use another operation to do that,

47
00:01:58.002 --> 00:02:00.002
that operation is map.

48
00:02:00.002 --> 00:02:03.004
And what the map does is it takes in the elements coming in,

49
00:02:03.004 --> 00:02:05.009
so in this case, it's our room,

50
00:02:05.009 --> 00:02:09.009
and then we apply a transformation on the element,

51
00:02:09.009 --> 00:02:13.000
and that's going to determine what element flows out

52
00:02:13.000 --> 00:02:17.006
of the operation and further down the stream for processing.

53
00:02:17.006 --> 00:02:21.008
So here, I'm going to accept the room as a parameter

54
00:02:21.008 --> 00:02:25.000
into our function that will do the mapping.

55
00:02:25.000 --> 00:02:28.001
And then we're going to return a string

56
00:02:28.001 --> 00:02:29.009
from this Lambda expression.

57
00:02:29.009 --> 00:02:33.009
And that string is what will flow to the next operation.

58
00:02:33.009 --> 00:02:37.007
There, all we need to do is use a method reference

59
00:02:37.007 --> 00:02:40.009
to go ahead and print out our stream.

60
00:02:40.009 --> 00:02:44.006
So I'll use the println method and pass that

61
00:02:44.006 --> 00:02:47.007
into the for each operation.

62
00:02:47.007 --> 00:02:51.003
And now if we execute our code, look what happens.

63
00:02:51.003 --> 00:02:54.001
So we cleaned things up a bit there.

64
00:02:54.001 --> 00:02:56.009
Now let's walk through another example.

65
00:02:56.009 --> 00:03:00.009
Let's imagine that we wanted to get the total revenue

66
00:03:00.009 --> 00:03:03.005
of all the pet friendly rooms.

67
00:03:03.005 --> 00:03:06.007
To do that, we can use the rate on the room,

68
00:03:06.007 --> 00:03:07.009
which is a double.

69
00:03:07.009 --> 00:03:09.003
We can see it here.

70
00:03:09.003 --> 00:03:11.008
Now there's another map operation

71
00:03:11.008 --> 00:03:13.009
that allows us to do this really easily

72
00:03:13.009 --> 00:03:15.006
and it's mapToDouble.

73
00:03:15.006 --> 00:03:19.006
And all we need to do is pass in a method reference

74
00:03:19.006 --> 00:03:22.004
that's going to return a double.

75
00:03:22.004 --> 00:03:26.000
So here I'll just pass in the getRate method

76
00:03:26.000 --> 00:03:29.009
and now we're going to be working with a double stream

77
00:03:29.009 --> 00:03:33.000
and this has another operation on it, sum.

78
00:03:33.000 --> 00:03:37.002
So let's go ahead and we will sum all of the doubles

79
00:03:37.002 --> 00:03:39.008
that are flowing into that operation.

80
00:03:39.008 --> 00:03:43.003
And they're going to get totaled and returned as a double.

81
00:03:43.003 --> 00:03:46.000
So let's store that in a variable

82
00:03:46.000 --> 00:03:50.001
and then we can print that variable to the console.

83
00:03:50.001 --> 00:03:53.006
Okay, and you can see we have a total of $450

84
00:03:53.006 --> 00:03:56.008
in potential revenue for our pet friendly rooms.

85
00:03:56.008 --> 00:03:58.009
So those are just a few of the methods

86
00:03:58.009 --> 00:04:01.006
from the streams API that we can use to work

87
00:04:01.006 --> 00:04:03.001
with our collections.

88
00:04:03.001 --> 00:04:04.008
This course is about collections,

89
00:04:04.008 --> 00:04:06.006
but learning more of the streams API

90
00:04:06.006 --> 00:04:09.004
will definitely improve how you work with them.

91
00:04:09.004 --> 00:04:12.003
So I'm going to sprinkle in more examples with streams

92
00:04:12.003 --> 00:04:14.000
in the remainder of the course

93
00:04:14.000 --> 00:04:17.000
and if you'd like, take a deeper look at the streams API.

