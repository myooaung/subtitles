WEBVTT
1
00:00:00.000 --> 00:00:02.007
- [Instructor The List interface has many methods

2
00:00:02.007 --> 00:00:06.003
that deal with an element's position in the list.

3
00:00:06.003 --> 00:00:07.003
To help with this,

4
00:00:07.003 --> 00:00:11.005
method signatures will often accept an index as an argument,

5
00:00:11.005 --> 00:00:15.003
or use the index as the return value.

6
00:00:15.003 --> 00:00:17.006
Let's visualize a few of these methods

7
00:00:17.006 --> 00:00:20.005
using a list of strings.

8
00:00:20.005 --> 00:00:24.002
We'll start out by inserting elements into a list.

9
00:00:24.002 --> 00:00:27.001
Using the add method from the collection interface

10
00:00:27.001 --> 00:00:31.000
causes an object to be upended at the back of the list.

11
00:00:31.000 --> 00:00:34.007
So after this first call, if we call the method again,

12
00:00:34.007 --> 00:00:38.006
the element is placed at the second position in the list.

13
00:00:38.006 --> 00:00:40.004
You'll also notice that we can add

14
00:00:40.004 --> 00:00:43.000
duplicate elements into our list.

15
00:00:43.000 --> 00:00:45.009
The List interface also has an overloaded form

16
00:00:45.009 --> 00:00:49.002
of the add method that allows us to add an element

17
00:00:49.002 --> 00:00:51.005
at a specific position.

18
00:00:51.005 --> 00:00:55.000
To do this, it accepts an integer as its first argument,

19
00:00:55.000 --> 00:00:58.005
and the object to insert as its second argument.

20
00:00:58.005 --> 00:01:01.002
The object is then placed into the list

21
00:01:01.002 --> 00:01:04.004
at the index specified by the integer.

22
00:01:04.004 --> 00:01:08.000
When calling any method on a list that accepts an index,

23
00:01:08.000 --> 00:01:10.004
we'll receive an index out of bounds exception

24
00:01:10.004 --> 00:01:12.006
if the index is negative

25
00:01:12.006 --> 00:01:17.005
or if it exceeds the size of the list.

26
00:01:17.005 --> 00:01:19.005
Another way to insert list elements

27
00:01:19.005 --> 00:01:21.009
is using the add all method.

28
00:01:21.009 --> 00:01:26.001
It performs a bulk insert operation that inserts elements

29
00:01:26.001 --> 00:01:27.006
from a provided collection

30
00:01:27.006 --> 00:01:30.005
and a specified position in the list.

31
00:01:30.005 --> 00:01:33.004
We can replace an element at a specific position

32
00:01:33.004 --> 00:01:35.003
using the list set method.

33
00:01:35.003 --> 00:01:38.005
So let's replace that letter A in the fifth position,

34
00:01:38.005 --> 00:01:40.008
that's ruining our sequence.

35
00:01:40.008 --> 00:01:43.008
The method replaces the element at the provided index

36
00:01:43.008 --> 00:01:47.006
with the object that is provided as the second argument.

37
00:01:47.006 --> 00:01:49.006
Its return value is the element

38
00:01:49.006 --> 00:01:51.008
that was in the previous position.

39
00:01:51.008 --> 00:01:54.004
In this case, that was the letter A.

40
00:01:54.004 --> 00:01:57.009
Let's move on and look at retrieving elements from our list.

41
00:01:57.009 --> 00:02:01.002
We can access an element at a specific position

42
00:02:01.002 --> 00:02:03.008
by passing an integer to the GET method.

43
00:02:03.008 --> 00:02:08.003
This will cause the element at the index to be returned.

44
00:02:08.003 --> 00:02:09.007
If we have an object

45
00:02:09.007 --> 00:02:12.006
and we need to know where it's positioned in the list,

46
00:02:12.006 --> 00:02:15.005
we can pass it to the index of method.

47
00:02:15.005 --> 00:02:18.007
This method returns an integer that denotes the index

48
00:02:18.007 --> 00:02:21.008
of the object's first occurrence in the list.

49
00:02:21.008 --> 00:02:24.000
If the object isn't in the list,

50
00:02:24.000 --> 00:02:26.003
the method returns negative one.

51
00:02:26.003 --> 00:02:28.000
Let's look at one final method

52
00:02:28.000 --> 00:02:32.002
so we can see another way to remove list elements.

53
00:02:32.002 --> 00:02:34.009
This remove method is an overloaded form

54
00:02:34.009 --> 00:02:37.009
of the remove method found on the collection interface,

55
00:02:37.009 --> 00:02:40.008
and it behaves a little bit differently.

56
00:02:40.008 --> 00:02:43.009
It accepts an integer that identifies the position

57
00:02:43.009 --> 00:02:46.007
of the element that we want to remove.

58
00:02:46.007 --> 00:02:50.002
Then, in addition to removing the element at the index,

59
00:02:50.002 --> 00:02:53.005
it also returns the element that we're removing.

60
00:02:53.005 --> 00:02:56.001
It's a nice feature if you also need to retrieve

61
00:02:56.001 --> 00:02:58.007
the element that you're taking out of the list.

62
00:02:58.007 --> 00:03:02.001
These methods are very useful when working with a list.

63
00:03:02.001 --> 00:03:04.002
And don't forget, the list interface

64
00:03:04.002 --> 00:03:06.003
extends the collection interface.

65
00:03:06.003 --> 00:03:09.000
So, you also have those methods to work with too.

