WEBVTT
1
00:00:00.005 --> 00:00:01.008
- [Instructor] In our last example,

2
00:00:01.008 --> 00:00:04.002
you might've wondered if an array could have been used

3
00:00:04.002 --> 00:00:06.008
to group the rooms instead of a collection.

4
00:00:06.008 --> 00:00:10.002
That's a valid point, but using collections overcomes

5
00:00:10.002 --> 00:00:12.009
a few disadvantages of an array.

6
00:00:12.009 --> 00:00:16.002
Let's walk through some examples and I'll show you.

7
00:00:16.002 --> 00:00:17.009
Arrays have a fixed size

8
00:00:17.009 --> 00:00:20.008
because the space for an array must be allocated

9
00:00:20.008 --> 00:00:24.005
for the number of objects that we intend to store.

10
00:00:24.005 --> 00:00:27.006
So if I want to declare a new room array,

11
00:00:27.006 --> 00:00:29.006
I need to know the number of elements

12
00:00:29.006 --> 00:00:31.005
that I'll be storing up front.

13
00:00:31.005 --> 00:00:34.009
Then I need to store each room within its index

14
00:00:34.009 --> 00:00:36.003
in the array.

15
00:00:36.003 --> 00:00:38.002
This can lead to one-off errors

16
00:00:38.002 --> 00:00:41.003
that throw index out of bounds exceptions.

17
00:00:41.003 --> 00:00:42.008
And if you look closely,

18
00:00:42.008 --> 00:00:46.000
you'll notice that we already have one.

19
00:00:46.000 --> 00:00:50.001
I wanted to declare an array of size three, but instead,

20
00:00:50.001 --> 00:00:52.006
I've declared an array of size two.

21
00:00:52.006 --> 00:00:54.008
That would have threw an error.

22
00:00:54.008 --> 00:00:56.007
Now, when we work with collections,

23
00:00:56.007 --> 00:00:59.002
we don't have these sorts of problems.

24
00:00:59.002 --> 00:01:02.006
It's relatively easy to instantiate a collection

25
00:01:02.006 --> 00:01:04.007
and add elements into it.

26
00:01:04.007 --> 00:01:06.008
You'll notice that I do not have to declare

27
00:01:06.008 --> 00:01:09.002
the size of the collection upfront.

28
00:01:09.002 --> 00:01:12.004
And if I want to add elements into the collection,

29
00:01:12.004 --> 00:01:15.004
I don't have to be concerned about a couple of things.

30
00:01:15.004 --> 00:01:17.008
So first, I don't have to worry

31
00:01:17.008 --> 00:01:22.005
about specifying the index of the element that I'm adding.

32
00:01:22.005 --> 00:01:26.006
I also don't have to worry about the collection filling up

33
00:01:26.006 --> 00:01:31.000
and getting an index out of bounds exception.

34
00:01:31.000 --> 00:01:32.006
When we work with an array,

35
00:01:32.006 --> 00:01:35.001
we don't get this sort of flexibility.

36
00:01:35.001 --> 00:01:38.001
You'll notice that our array is currently full.

37
00:01:38.001 --> 00:01:39.009
We have three indexes

38
00:01:39.009 --> 00:01:43.000
and there's three elements stored within it.

39
00:01:43.000 --> 00:01:46.001
If we would like to add a new element into this array,

40
00:01:46.001 --> 00:01:48.003
we actually have to make a copy of it.

41
00:01:48.003 --> 00:01:49.004
Here's how we do it.

42
00:01:49.004 --> 00:01:52.004
First, we declare an array that is slightly larger

43
00:01:52.004 --> 00:01:54.001
than our original array.

44
00:01:54.001 --> 00:01:57.004
So I'm going to make this an array of size four.

45
00:01:57.004 --> 00:02:00.005
Then I'm going to use the array copy method

46
00:02:00.005 --> 00:02:02.002
on the system class.

47
00:02:02.002 --> 00:02:06.001
I pass in the original array, then I pass in the new array

48
00:02:06.001 --> 00:02:10.002
and then I specify the indexes that I'm interested in.

49
00:02:10.002 --> 00:02:14.003
Okay, now we have a new array with some space in it.

50
00:02:14.003 --> 00:02:18.008
I'm then going to store the new room in the last index

51
00:02:18.008 --> 00:02:20.008
within our new array.

52
00:02:20.008 --> 00:02:24.000
So I'll just subtract one from its length

53
00:02:24.000 --> 00:02:29.000
and then I'm going to store the room into that index.

54
00:02:29.000 --> 00:02:32.001
Now, you might get the idea to build your own objects

55
00:02:32.001 --> 00:02:33.006
that handle the operations

56
00:02:33.006 --> 00:02:36.008
that you'll need to perform on the array.

57
00:02:36.008 --> 00:02:39.003
You'll get some reusability with this approach,

58
00:02:39.003 --> 00:02:42.005
but at that point, you've started to replicate the features

59
00:02:42.005 --> 00:02:45.000
provided by the collections framework.

60
00:02:45.000 --> 00:02:48.000
The best case is that you'll be less productive

61
00:02:48.000 --> 00:02:49.008
and the worst case is that you'll build

62
00:02:49.008 --> 00:02:51.008
a buggy implementation.

63
00:02:51.008 --> 00:02:54.004
By using Java's out-of-the-box collections

64
00:02:54.004 --> 00:02:56.007
instead of arrays, you'll save time

65
00:02:56.007 --> 00:02:59.001
by avoiding these types of situations

66
00:02:59.001 --> 00:03:01.000
and you'll write better code.

