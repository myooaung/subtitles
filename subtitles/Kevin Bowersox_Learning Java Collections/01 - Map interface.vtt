WEBVTT
1
00:00:00.005 --> 00:00:02.000
- [Instructor] Maps are the last group

2
00:00:02.000 --> 00:00:04.007
of collection interfaces and implementations

3
00:00:04.007 --> 00:00:05.009
that we'll explore.

4
00:00:05.009 --> 00:00:06.009
Early in the course,

5
00:00:06.009 --> 00:00:11.000
we learned that a map works by using keys and values.

6
00:00:11.000 --> 00:00:13.003
A map is sort of like a dictionary.

7
00:00:13.003 --> 00:00:15.002
The word represents the key,

8
00:00:15.002 --> 00:00:17.007
and the definition is the value.

9
00:00:17.007 --> 00:00:21.008
If we want to find the definition of a word in a dictionary,

10
00:00:21.008 --> 00:00:24.004
we start our search by looking for the word,

11
00:00:24.004 --> 00:00:26.003
because that's the part we know.

12
00:00:26.003 --> 00:00:29.005
We use the word to find the part that we need to know,

13
00:00:29.005 --> 00:00:31.005
which is the definition.

14
00:00:31.005 --> 00:00:33.006
It's a similar concept in Java.

15
00:00:33.006 --> 00:00:36.007
A map stores entries with an association

16
00:00:36.007 --> 00:00:38.008
between a key and a value.

17
00:00:38.008 --> 00:00:42.002
Just like a dictionary doesn't contain duplicate words,

18
00:00:42.002 --> 00:00:45.005
the same is true for a map, and its keys are unique.

19
00:00:45.005 --> 00:00:48.007
These characteristics of a map make it fast and efficient

20
00:00:48.007 --> 00:00:51.000
at finding values using the key.

21
00:00:51.000 --> 00:00:53.007
In the framework, the map interface is unique

22
00:00:53.007 --> 00:00:56.006
because it does not extend the collection interface.

23
00:00:56.006 --> 00:00:59.002
So we won't find some of the methods that we learned

24
00:00:59.002 --> 00:01:02.005
earlier in the course on the map interface.

25
00:01:02.005 --> 00:01:04.002
If we inspect the interface,

26
00:01:04.002 --> 00:01:07.000
we'll see it contains two generic type parameters,

27
00:01:07.000 --> 00:01:09.002
represented as K and V.

28
00:01:09.002 --> 00:01:11.003
The first is the type of the key,

29
00:01:11.003 --> 00:01:13.007
which can be any type of object.

30
00:01:13.007 --> 00:01:16.009
The key is used when looking up and storing values

31
00:01:16.009 --> 00:01:17.007
in the map.

32
00:01:17.007 --> 00:01:19.002
For the map to work correctly,

33
00:01:19.002 --> 00:01:21.002
the key's type must implement

34
00:01:21.002 --> 00:01:23.005
the hash code and equals methods.

35
00:01:23.005 --> 00:01:26.001
These methods are used by the map to distinguish

36
00:01:26.001 --> 00:01:27.006
one key from the other.

37
00:01:27.006 --> 00:01:30.008
The second generic type parameter denotes the type of the

38
00:01:30.008 --> 00:01:34.007
value stored within the map that is associated with the key.

39
00:01:34.007 --> 00:01:36.000
When working with a map,

40
00:01:36.000 --> 00:01:39.001
there are three core methods that are essential to know.

41
00:01:39.001 --> 00:01:41.003
The first is the put method.

42
00:01:41.003 --> 00:01:44.009
It's used to create or update an entry in the map.

43
00:01:44.009 --> 00:01:48.004
It accepts a key and a value as its arguments.

44
00:01:48.004 --> 00:01:52.000
If the map does not have an entry for the provided key,

45
00:01:52.000 --> 00:01:53.007
the put method will create it,

46
00:01:53.007 --> 00:01:56.007
and then null will be returned from the method.

47
00:01:56.007 --> 00:01:58.005
But what happens if the key

48
00:01:58.005 --> 00:02:00.009
is already associated with a value?

49
00:02:00.009 --> 00:02:03.004
In that case, the put method overwrites

50
00:02:03.004 --> 00:02:06.008
the pre-existing value with the value provided

51
00:02:06.008 --> 00:02:08.008
as an argument to the method.

52
00:02:08.008 --> 00:02:11.009
Then the previous value associated with the key

53
00:02:11.009 --> 00:02:14.001
is returned by the method.

54
00:02:14.001 --> 00:02:16.008
Once you have entries stored in the map,

55
00:02:16.008 --> 00:02:19.009
they can be retrieved using the get method.

56
00:02:19.009 --> 00:02:22.005
This method accepts a key as an argument,

57
00:02:22.005 --> 00:02:24.005
which is used to search the map.

58
00:02:24.005 --> 00:02:27.005
If it finds an entry associated with the key,

59
00:02:27.005 --> 00:02:29.006
it returns the entry's value.

60
00:02:29.006 --> 00:02:33.002
If an entry is not found, the method returns null.

61
00:02:33.002 --> 00:02:36.002
To remove an entry, you can call the remove method

62
00:02:36.002 --> 00:02:39.004
and pass it a key of the entry you'd like to remove.

63
00:02:39.004 --> 00:02:42.002
If an associated entry is found in the map,

64
00:02:42.002 --> 00:02:45.009
it will be removed and then returned by the method.

65
00:02:45.009 --> 00:02:48.004
So those are some of the key operations

66
00:02:48.004 --> 00:02:51.002
you'll need to know on the maps interface.

67
00:02:51.002 --> 00:02:53.007
Now let's move on to our next lesson

68
00:02:53.007 --> 00:02:56.000
to see another way of working with the map.

