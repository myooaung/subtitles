WEBVTT
1
00:00:00.000 --> 00:00:07.001
(upbeat music)

2
00:00:07.001 --> 00:00:09.003
- [Instructor] And here is my solution

3
00:00:09.003 --> 00:00:12.005
to this challenge exercise.

4
00:00:12.005 --> 00:00:15.004
So what I did in source main Java

5
00:00:15.004 --> 00:00:18.009
in my controller package underneath the root

6
00:00:18.009 --> 00:00:22.009
I created a new element called StaffRestController

7
00:00:22.009 --> 00:00:24.009
and it works very much the same way

8
00:00:24.009 --> 00:00:27.005
that my RoomRestController worked.

9
00:00:27.005 --> 00:00:30.003
So I responded /api/staff

10
00:00:30.003 --> 00:00:32.005
and that's probably not the best

11
00:00:32.005 --> 00:00:34.006
from a true rest perspective

12
00:00:34.006 --> 00:00:37.000
but for the purposes here, it'll work fine.

13
00:00:37.000 --> 00:00:40.001
I get a staff service element that I inject

14
00:00:40.001 --> 00:00:41.008
as part of my constructor

15
00:00:41.008 --> 00:00:44.006
and spring does that automatically without an auto wiring

16
00:00:44.006 --> 00:00:47.003
because that's my only constructor on this class.

17
00:00:47.003 --> 00:00:52.002
And this is a component by nature of being a controller.

18
00:00:52.002 --> 00:00:53.008
I didn't execute a get mapping

19
00:00:53.008 --> 00:00:55.004
on a method that returns a list

20
00:00:55.004 --> 00:00:58.006
of staff member elements from that service.

21
00:00:58.006 --> 00:00:59.004
So let's go ahead

22
00:00:59.004 --> 00:01:04.002
and run this application, and I'll jump back into terminal.

23
00:01:04.002 --> 00:01:10.009
I'm going to do an HTTP once again against 8080/api/staff.

24
00:01:10.009 --> 00:01:13.001
And there is my elements.

25
00:01:13.001 --> 00:01:14.000
And just to show you

26
00:01:14.000 --> 00:01:18.005
that it doesn't break room, there those that are.

27
00:01:18.005 --> 00:01:23.004
So even though online 12, you have api/staff.

28
00:01:23.004 --> 00:01:26.001
And if we go to the RoomRestController also in line 12

29
00:01:26.001 --> 00:01:28.002
we have api/rooms.

30
00:01:28.002 --> 00:01:30.009
They don't collide because there's more to it.

31
00:01:30.009 --> 00:01:33.006
And as a matter of fact, you could have multiple elements

32
00:01:33.006 --> 00:01:35.002
with the same request mapping

33
00:01:35.002 --> 00:01:39.006
as long as the methods below have defined routes.

34
00:01:39.006 --> 00:01:41.004
And in this case, since it's my only route

35
00:01:41.004 --> 00:01:42.003
I don't need to put one

36
00:01:42.003 --> 00:01:45.003
on the get mapping, but indeed I could.

37
00:01:45.003 --> 00:01:47.003
And if you take a look at the way spring does this

38
00:01:47.003 --> 00:01:49.001
it's actually straightforward across the board

39
00:01:49.001 --> 00:01:52.000
for both web service and web application.

40
00:01:52.000 --> 00:01:55.000
It all follows that same pattern.

