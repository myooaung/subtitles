WEBVTT
1
00:00:00.006 --> 00:00:01.007
- [Instructor] Auto-configuration

2
00:00:01.007 --> 00:00:03.009
is the heart of Spring Boot.

3
00:00:03.009 --> 00:00:06.006
It's what actually is the magic behind it all

4
00:00:06.006 --> 00:00:08.006
that makes it all work out.

5
00:00:08.006 --> 00:00:11.002
You notice that we got a web application in Tomcat

6
00:00:11.002 --> 00:00:14.005
up and running without doing any configuration.

7
00:00:14.005 --> 00:00:16.009
And that's because of auto-config.

8
00:00:16.009 --> 00:00:19.004
Now we're going to go into a lot more detailed down the road

9
00:00:19.004 --> 00:00:21.006
with all of this auto-configuration,

10
00:00:21.006 --> 00:00:24.008
but I at least want to give you some cursory understanding

11
00:00:24.008 --> 00:00:28.001
as we get started in this course.

12
00:00:28.001 --> 00:00:30.006
The EnableAutoConfiguration annotation

13
00:00:30.006 --> 00:00:36.000
is a powerful construct that drives much of Spring Boot.

14
00:00:36.000 --> 00:00:38.008
It is what allows for configuration classes

15
00:00:38.008 --> 00:00:43.005
to be dynamically scanned into the application context.

16
00:00:43.005 --> 00:00:46.009
It's based off JARs hat are loaded on the class path.

17
00:00:46.009 --> 00:00:50.006
Usually via Maven or Gradle dependency management.

18
00:00:50.006 --> 00:00:52.006
It's not always the case though,

19
00:00:52.006 --> 00:00:54.003
that is the JARs in the class path,

20
00:00:54.003 --> 00:00:58.003
and again, we'll go into that in a lot more detail.

21
00:00:58.003 --> 00:01:01.008
Ultimately it's driven off the spring.factories file

22
00:01:01.008 --> 00:01:04.004
that's in the medic if directory of each jar

23
00:01:04.004 --> 00:01:07.009
that gets loaded into the application itself

24
00:01:07.009 --> 00:01:11.002
via one of those dependency management systems.

25
00:01:11.002 --> 00:01:15.008
In addition, you can control the order of auto-configuration

26
00:01:15.008 --> 00:01:17.008
through a couple of annotations,

27
00:01:17.008 --> 00:01:21.006
the AutoConfigureBefore, and the AutoConfigureAfter.

28
00:01:21.006 --> 00:01:23.000
Then you may be asking,

29
00:01:23.000 --> 00:01:26.004
I never saw enable auto-configuration,

30
00:01:26.004 --> 00:01:30.003
at Spring Boot application is actually a stereotype of this

31
00:01:30.003 --> 00:01:34.008
so it includes this annotation as part of it.

32
00:01:34.008 --> 00:01:37.002
In addition to auto-configuration,

33
00:01:37.002 --> 00:01:39.009
conditional loading is what helps Spring Boot

34
00:01:39.009 --> 00:01:42.000
do what it does.

35
00:01:42.000 --> 00:01:45.005
Some conditional loading allows for configurations

36
00:01:45.005 --> 00:01:47.006
to only be loaded when and if

37
00:01:47.006 --> 00:01:51.001
there are classes specifically on the class path,

38
00:01:51.001 --> 00:01:55.008
such as the @ConditionalOnclass annotation,

39
00:01:55.008 --> 00:01:59.009
you can also drive configuration off the presence of a bean

40
00:01:59.009 --> 00:02:03.002
being defined in the application context,

41
00:02:03.002 --> 00:02:07.005
using the @ConditionalOnBean annotation.

42
00:02:07.005 --> 00:02:10.000
Furthermore, you can drive configuration

43
00:02:10.000 --> 00:02:13.001
based on specific properties being defined

44
00:02:13.001 --> 00:02:17.004
with the @ConditionalOnProperty annotation.

45
00:02:17.004 --> 00:02:20.006
And once again, you can drive configurations

46
00:02:20.006 --> 00:02:24.004
based on missing bean or class or property

47
00:02:24.004 --> 00:02:27.005
through the @ConditionalOnMissing annotations.

48
00:02:27.005 --> 00:02:30.008
And I've given you the bean example here.

49
00:02:30.008 --> 00:02:34.005
Now you may be wondering, I didn't see any of these.

50
00:02:34.005 --> 00:02:37.002
These are built into the dependencies themselves,

51
00:02:37.002 --> 00:02:38.007
and as we get through this course,

52
00:02:38.007 --> 00:02:41.002
we're going to build a Spring Boot starter,

53
00:02:41.002 --> 00:02:43.001
and these values are very useful

54
00:02:43.001 --> 00:02:46.002
if you ever find yourself building starters.

55
00:02:46.002 --> 00:02:47.008
Or if you're troubleshooting,

56
00:02:47.008 --> 00:02:52.004
while your configuration is doing what it's doing.

57
00:02:52.004 --> 00:02:56.006
Properties are also a big part of the default configuration

58
00:02:56.006 --> 00:02:58.005
for Spring Boot.

59
00:02:58.005 --> 00:03:02.000
Many of the projects include pre-configured default

60
00:03:02.000 --> 00:03:06.009
properties for the auto-configuration classes themselves.

61
00:03:06.009 --> 00:03:09.009
There's an annotation to load these properties

62
00:03:09.009 --> 00:03:13.007
called @EnabledConfigurationProperties

63
00:03:13.007 --> 00:03:17.004
and these specifies these default property sets.

64
00:03:17.004 --> 00:03:21.003
For instance, if you bring H two onto the class path,

65
00:03:21.003 --> 00:03:23.007
it will have enough configuration,

66
00:03:23.007 --> 00:03:25.009
and configuration properties

67
00:03:25.009 --> 00:03:30.002
to load an embedded H two database into your application.

68
00:03:30.002 --> 00:03:31.005
And we're going to show you that

69
00:03:31.005 --> 00:03:33.008
as we go through the course.

70
00:03:33.008 --> 00:03:36.004
Now, the thing to note about properties

71
00:03:36.004 --> 00:03:40.006
is that they can always, and I mean always be overridden

72
00:03:40.006 --> 00:03:42.008
to the way you can figure Spring itself.

73
00:03:42.008 --> 00:03:44.006
Now, there is many conditionals

74
00:03:44.006 --> 00:03:49.006
that we aren't going to talk about in detail,

75
00:03:49.006 --> 00:03:53.004
but I want to run through all of them in a high level.

76
00:03:53.004 --> 00:03:56.008
We talked about the bean, and class, and the missing bean

77
00:03:56.008 --> 00:03:59.004
and the missing class conditionals.

78
00:03:59.004 --> 00:04:03.006
Again, we also talked about the property-based conditionals.

79
00:04:03.006 --> 00:04:05.005
What we haven't talked about

80
00:04:05.005 --> 00:04:09.000
is that they're application type based conditionals.

81
00:04:09.000 --> 00:04:11.001
You can define if it's a web application

82
00:04:11.001 --> 00:04:13.001
or not a web application

83
00:04:13.001 --> 00:04:16.002
through conditional annotations,

84
00:04:16.002 --> 00:04:19.002
you can also use resource-based annotations,

85
00:04:19.002 --> 00:04:22.005
which essentially are files, but not always,

86
00:04:22.005 --> 00:04:24.007
but usually a resource is used

87
00:04:24.007 --> 00:04:28.003
when we're pointing to a file on the file system.

88
00:04:28.003 --> 00:04:30.008
Finally, there's expression based conditionals

89
00:04:30.008 --> 00:04:33.009
that allow you to use the spring expression language

90
00:04:33.009 --> 00:04:37.001
to drive conditional expectations of your class

91
00:04:37.001 --> 00:04:40.003
and what gets loaded during auto-configuration.

92
00:04:40.003 --> 00:04:44.001
Now all of this is what makes Spring Boot do what it does,

93
00:04:44.001 --> 00:04:49.000
and actually it's what provides "magic behind Spring Boot".

