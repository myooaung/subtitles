WEBVTT
1
00:00:00.005 --> 00:00:02.009
- [Instructor] Now that we're ready to dig into Spring Data,

2
00:00:02.009 --> 00:00:05.003
we need to talk about a pattern that is central

3
00:00:05.003 --> 00:00:07.005
to the operation of Spring Data

4
00:00:07.005 --> 00:00:10.007
and that is the repository pattern.

5
00:00:10.007 --> 00:00:13.001
So let's talk about how the repository pattern

6
00:00:13.001 --> 00:00:15.000
is used in Spring.

7
00:00:15.000 --> 00:00:17.001
First and foremost, as mentioned,

8
00:00:17.001 --> 00:00:20.007
most of Spring Data is based on this pattern.

9
00:00:20.007 --> 00:00:24.004
Spring JDBC can be used also to create repository

10
00:00:24.004 --> 00:00:28.008
type actions, or DAO actions, and while part of Spring Data,

11
00:00:28.008 --> 00:00:33.000
they have unfortunately lost favor with many developers.

12
00:00:33.000 --> 00:00:34.008
We will also see later in the course

13
00:00:34.008 --> 00:00:38.000
how Spring Data repositories can be used

14
00:00:38.000 --> 00:00:41.009
to create web services on their own.

15
00:00:41.009 --> 00:00:42.008
Now, I want to kind of walk

16
00:00:42.008 --> 00:00:45.009
through the pattern is itself in a nutshell.

17
00:00:45.009 --> 00:00:47.004
First of all, it was introduced

18
00:00:47.004 --> 00:00:49.007
as part of domain-driven design

19
00:00:49.007 --> 00:00:52.006
and often when we're building microservices,

20
00:00:52.006 --> 00:00:55.008
that's the design pattern that we are using.

21
00:00:55.008 --> 00:00:58.001
There are simple operations of an entity

22
00:00:58.001 --> 00:01:00.003
or business object without knowledge

23
00:01:00.003 --> 00:01:03.006
of other entities as in a DAO.

24
00:01:03.006 --> 00:01:04.007
Under this abstraction,

25
00:01:04.007 --> 00:01:09.000
the data access operations are hidden from the user.

26
00:01:09.000 --> 00:01:10.002
Now, what this really means is

27
00:01:10.002 --> 00:01:11.009
as you reach into the repository

28
00:01:11.009 --> 00:01:15.006
and you get a single entity and you do work on that entity,

29
00:01:15.006 --> 00:01:17.000
if you need multiple entities,

30
00:01:17.000 --> 00:01:19.007
those are done in separate database transactions.

31
00:01:19.007 --> 00:01:23.000
Again, the data access itself is hidden

32
00:01:23.000 --> 00:01:25.007
behind the repository.

33
00:01:25.007 --> 00:01:30.004
Now, why might you do this in a Spring Data world?

34
00:01:30.004 --> 00:01:34.001
First and foremost, databases have become the bottleneck

35
00:01:34.001 --> 00:01:36.007
for many applications.

36
00:01:36.007 --> 00:01:39.006
By using Spring Data repositories,

37
00:01:39.006 --> 00:01:41.006
you prevent data access logic

38
00:01:41.006 --> 00:01:43.009
from leaking into your business logic

39
00:01:43.009 --> 00:01:46.001
and oftentimes a lot of our bottlenecks

40
00:01:46.001 --> 00:01:49.003
come from that leakage.

41
00:01:49.003 --> 00:01:52.006
Additionally, using Spring Data repositories allows you

42
00:01:52.006 --> 00:01:54.008
to provide a layer of abstraction

43
00:01:54.008 --> 00:01:58.003
to hide the internal operations again,

44
00:01:58.003 --> 00:02:02.003
which is what you want with abstraction itself.

45
00:02:02.003 --> 00:02:04.002
And it also allows you to focus

46
00:02:04.002 --> 00:02:07.000
on single business objects at a time.

47
00:02:07.000 --> 00:02:09.006
Now in a traditional monolithic service

48
00:02:09.006 --> 00:02:11.003
that works in an enterprise,

49
00:02:11.003 --> 00:02:14.001
this may at times seem counterintuitive,

50
00:02:14.001 --> 00:02:17.003
but when you're dealing with microservice especially,

51
00:02:17.003 --> 00:02:21.000
repository patterns have a lot of power.

52
00:02:21.000 --> 00:02:23.006
So let's talk about the general creation strategy

53
00:02:23.006 --> 00:02:27.004
that we're going to employ when we build a repository.

54
00:02:27.004 --> 00:02:29.002
So first and foremost, you start

55
00:02:29.002 --> 00:02:32.005
with the repository interface in Spring Data

56
00:02:32.005 --> 00:02:36.005
or you can create your own interface using generics.

57
00:02:36.005 --> 00:02:39.009
You define common data access methods.

58
00:02:39.009 --> 00:02:41.009
Now with Spring Data repositories,

59
00:02:41.009 --> 00:02:44.002
many of those are predefined for you

60
00:02:44.002 --> 00:02:48.004
as part of the parent interface itself.

61
00:02:48.004 --> 00:02:51.009
Then, you apply any additional business logic

62
00:02:51.009 --> 00:02:54.002
to the repository instance

63
00:02:54.002 --> 00:02:58.000
and leverage that data access logic under the hood.

