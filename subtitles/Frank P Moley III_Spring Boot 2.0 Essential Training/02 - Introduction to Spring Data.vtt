WEBVTT
1
00:00:00.005 --> 00:00:03.008
- [Instructor] Spring Boot's data support is rich and robust

2
00:00:03.008 --> 00:00:05.009
and it's based on the highly successful

3
00:00:05.009 --> 00:00:08.005
Spring Data platform.

4
00:00:08.005 --> 00:00:12.005
So let's talk about Spring Boot and data specifically.

5
00:00:12.005 --> 00:00:17.000
Built-in is rich support for traditional RDBMS systems

6
00:00:17.000 --> 00:00:19.008
as well as more modern NoSQL systems.

7
00:00:19.008 --> 00:00:23.005
And again, it's built right into the platform.

8
00:00:23.005 --> 00:00:25.003
It's based almost entirely

9
00:00:25.003 --> 00:00:27.003
on the Spring Data project.

10
00:00:27.003 --> 00:00:31.002
As such, there's a lot of material on Spring Data out there

11
00:00:31.002 --> 00:00:35.002
and you're not going to get too deep into it in this course.

12
00:00:35.002 --> 00:00:37.004
So if you want to dig deeper

13
00:00:37.004 --> 00:00:39.003
I highly encourage you to check out

14
00:00:39.003 --> 00:00:42.002
Mary Ellen Bowman's course here on LinkedIn Learning

15
00:00:42.002 --> 00:00:45.001
called Spring Spring Data.

16
00:00:45.001 --> 00:00:47.004
Now as with most of Spring Boot,

17
00:00:47.004 --> 00:00:51.003
Spring Data starters leverage a lot of common defaults

18
00:00:51.003 --> 00:00:55.001
that as developers who've used spring data for a long time,

19
00:00:55.001 --> 00:00:57.009
we kind of get this copy and paste mode going

20
00:00:57.009 --> 00:01:00.004
and that's not always the same.

21
00:01:00.004 --> 00:01:01.008
But with Spring Data

22
00:01:01.008 --> 00:01:04.001
you're going to get those opinions built in.

23
00:01:04.001 --> 00:01:07.003
And that's what Spring Boot is leveraging.

24
00:01:07.003 --> 00:01:09.005
Now part of configuring a database

25
00:01:09.005 --> 00:01:11.004
in a Spring Data project

26
00:01:11.004 --> 00:01:14.002
is getting the database drivers correct.

27
00:01:14.002 --> 00:01:17.002
And when I say drivers, not just the driver classes

28
00:01:17.002 --> 00:01:20.001
but also the URL, username, password,

29
00:01:20.001 --> 00:01:24.006
and everything that goes into building that data source.

30
00:01:24.006 --> 00:01:28.007
When you include a DB technology into your class path,

31
00:01:28.007 --> 00:01:31.000
you will get a set of properties built

32
00:01:31.000 --> 00:01:33.002
that you can then use to populate

33
00:01:33.002 --> 00:01:36.000
so that Spring will either auto-configure

34
00:01:36.000 --> 00:01:38.005
or take your property overrides

35
00:01:38.005 --> 00:01:42.001
to build those database drivers for you.

36
00:01:42.001 --> 00:01:44.003
Those properties can be used to supply things

37
00:01:44.003 --> 00:01:46.002
like credentials, URLs,

38
00:01:46.002 --> 00:01:48.006
and various other activities that traditionally

39
00:01:48.006 --> 00:01:51.006
you would need to use to connect to the database

40
00:01:51.006 --> 00:01:55.007
in order to retrieve data from it or write data to it.

41
00:01:55.007 --> 00:01:59.008
Now, some databases such as H2, or SQL DB

42
00:01:59.008 --> 00:02:02.008
will auto-configure an embedded database.

43
00:02:02.008 --> 00:02:06.003
And this is great for POC work, or demo work,

44
00:02:06.003 --> 00:02:08.002
or in this course

45
00:02:08.002 --> 00:02:11.007
because that's exactly what we're going to do.

46
00:02:11.007 --> 00:02:15.003
You also have the ability to leverage common scripts

47
00:02:15.003 --> 00:02:17.004
with these embedded databases

48
00:02:17.004 --> 00:02:19.007
to prime that embedded database,

49
00:02:19.007 --> 00:02:22.002
so that when you get data from the beginning,

50
00:02:22.002 --> 00:02:24.004
instead of having to figure out some way

51
00:02:24.004 --> 00:02:26.007
to put the data into our database.

52
00:02:26.007 --> 00:02:30.002
Now this really becomes powerful in a test scenario.

53
00:02:30.002 --> 00:02:32.006
Remember how you can use different profiles

54
00:02:32.006 --> 00:02:35.000
while in the same way you can write different configs

55
00:02:35.000 --> 00:02:38.000
for testing and you can use an embedded database

56
00:02:38.000 --> 00:02:41.002
for testing and then a real database for production.

57
00:02:41.002 --> 00:02:43.002
That way you can put all the data you need

58
00:02:43.002 --> 00:02:46.009
in order to adequately test your application.

59
00:02:46.009 --> 00:02:48.009
Now, I mentioned that the data sources

60
00:02:48.009 --> 00:02:51.003
get created with the project itself,

61
00:02:51.003 --> 00:02:54.000
and then auto-configured.

62
00:02:54.000 --> 00:02:57.002
When properly configured, you will get a data source bin

63
00:02:57.002 --> 00:02:59.005
that you can inject wherever you need it

64
00:02:59.005 --> 00:03:03.006
not just into your repositories by default.

65
00:03:03.006 --> 00:03:05.000
The one caveat to this

66
00:03:05.000 --> 00:03:09.000
is that you can only have one database auto-configured.

67
00:03:09.000 --> 00:03:12.004
Any other database connections that you will need to make,

68
00:03:12.004 --> 00:03:14.006
you will have to manually configure.

69
00:03:14.006 --> 00:03:18.000
However, in modern microservices development,

70
00:03:18.000 --> 00:03:20.006
it's very rare to have multiple databases

71
00:03:20.006 --> 00:03:23.003
on a single application.

72
00:03:23.003 --> 00:03:25.006
And again, that data source can be injected

73
00:03:25.006 --> 00:03:28.009
as needed anywhere within your application.

74
00:03:28.009 --> 00:03:31.007
But Spring Boot will configure your repositories

75
00:03:31.007 --> 00:03:33.008
if you're using JPA for instance

76
00:03:33.008 --> 00:03:36.005
and inject that data source into them,

77
00:03:36.005 --> 00:03:38.007
so you don't ever have to actually mess

78
00:03:38.007 --> 00:03:40.002
with the data source bin.

79
00:03:40.002 --> 00:03:42.006
And that again is the power of Spring Boot

80
00:03:42.006 --> 00:03:46.000
and it's an opinionated auto-configuration methods.

