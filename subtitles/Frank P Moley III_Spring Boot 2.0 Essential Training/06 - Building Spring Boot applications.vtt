WEBVTT
1
00:00:00.006 --> 00:00:03.000
- [Instructor] Building a Spring Boot application

2
00:00:03.000 --> 00:00:05.007
is a relatively simple process,

3
00:00:05.007 --> 00:00:08.007
but running it is a little bit different, in many cases,

4
00:00:08.007 --> 00:00:11.006
than a traditional Java web application,

5
00:00:11.006 --> 00:00:13.009
specifically around how you package

6
00:00:13.009 --> 00:00:16.006
and deliver that application.

7
00:00:16.006 --> 00:00:18.006
Building Spring Boot applications,

8
00:00:18.006 --> 00:00:20.003
again, are relatively simple

9
00:00:20.003 --> 00:00:23.002
because you're using the build systems in place

10
00:00:23.002 --> 00:00:25.009
from the dependency management systems.

11
00:00:25.009 --> 00:00:28.005
With Maven, you simply execute

12
00:00:28.005 --> 00:00:31.004
a Maven clean package command.

13
00:00:31.004 --> 00:00:34.005
With Gradle, you can use simple build commands

14
00:00:34.005 --> 00:00:38.002
defined in the Gradle file itself.

15
00:00:38.002 --> 00:00:41.009
Spring Boot, regardless of using Gradle or Maven,

16
00:00:41.009 --> 00:00:46.000
comes packaged with scripts that call into the build

17
00:00:46.000 --> 00:00:48.008
independency management system for you.

18
00:00:48.008 --> 00:00:52.003
Spring has some great documentation on using these

19
00:00:52.003 --> 00:00:56.006
on all of their examples on their website.

20
00:00:56.006 --> 00:00:59.004
Except for Docker, all these build systems

21
00:00:59.004 --> 00:01:01.006
build an executable JAR,

22
00:01:01.006 --> 00:01:04.002
assuming that that's your packaging type,

23
00:01:04.002 --> 00:01:08.004
or an executable WAR if that is your package type.

24
00:01:08.004 --> 00:01:11.009
Both of them also build traditional JAR and WAR files

25
00:01:11.009 --> 00:01:13.004
at the same time

26
00:01:13.004 --> 00:01:17.004
and you'll see those with the word original in them.

27
00:01:17.004 --> 00:01:21.008
Spring Boot applications are best suited as JAR files.

28
00:01:21.008 --> 00:01:25.005
Josh Long coined the phrase, "Make JAR not WAR,"

29
00:01:25.005 --> 00:01:27.003
when Spring Boot first came out

30
00:01:27.003 --> 00:01:30.003
to help shift this mindset.

31
00:01:30.003 --> 00:01:33.006
So JARs should be the packaging for Spring Boot,

32
00:01:33.006 --> 00:01:36.004
at least as the preferred method.

33
00:01:36.004 --> 00:01:39.001
You can build WAR files if you prefer.

34
00:01:39.001 --> 00:01:41.008
However, in very few use cases

35
00:01:41.008 --> 00:01:46.000
is that actually required anymore today.

36
00:01:46.000 --> 00:01:50.002
The Spring Boot JAR file itself is self-executable.

37
00:01:50.002 --> 00:01:52.000
Now, what this means is that you can use

38
00:01:52.000 --> 00:01:56.006
simple java-jar command to run the application

39
00:01:56.006 --> 00:01:59.002
without any other needs from the systems,

40
00:01:59.002 --> 00:02:03.000
other than having a JVM on your machine.

41
00:02:03.000 --> 00:02:05.007
The JAR file itself can be deployed

42
00:02:05.007 --> 00:02:10.004
to some containerized frameworks to run in an unpacked form.

43
00:02:10.004 --> 00:02:12.004
Usually wiring the JAR loader

44
00:02:12.004 --> 00:02:17.008
is part of the runtime of those containerized frameworks.

45
00:02:17.008 --> 00:02:21.002
Another cool aspect of a Spring Boot JAR file

46
00:02:21.002 --> 00:02:23.009
is that they have some prepended text

47
00:02:23.009 --> 00:02:26.007
that allows them to run on servers

48
00:02:26.007 --> 00:02:31.000
via init.d or systemd registrations.

49
00:02:31.000 --> 00:02:33.004
So you can set up a simple cloud server,

50
00:02:33.004 --> 00:02:35.003
say an EC2 instance,

51
00:02:35.003 --> 00:02:38.004
and install this into systemd

52
00:02:38.004 --> 00:02:42.000
and it will start up when the server itself starts up,

53
00:02:42.000 --> 00:02:44.007
again, giving you more flexibility

54
00:02:44.007 --> 00:02:48.000
of how to run these executable JAR files.

