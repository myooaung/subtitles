WEBVTT
1
00:00:00.005 --> 00:00:02.000
- [Narrator] In real-world deployments,

2
00:00:02.000 --> 00:00:04.005
profiles can be one of the critical components

3
00:00:04.005 --> 00:00:06.005
of a spring application,

4
00:00:06.005 --> 00:00:08.007
and spring boot is no different.

5
00:00:08.007 --> 00:00:10.000
So let's talk for a moment

6
00:00:10.000 --> 00:00:12.009
about why profiles can be so important.

7
00:00:12.009 --> 00:00:15.003
So again, why our profiles are so important

8
00:00:15.003 --> 00:00:17.003
when we're dealing with it?

9
00:00:17.003 --> 00:00:21.001
Profiles give you the ability to flex your configuration

10
00:00:21.001 --> 00:00:25.004
based on the environment that the code is deployed to.

11
00:00:25.004 --> 00:00:27.004
It's really valuable in real-world,

12
00:00:27.004 --> 00:00:29.007
especially where you have many

13
00:00:29.007 --> 00:00:32.002
multi environment deployments.

14
00:00:32.002 --> 00:00:35.007
So thinking about the dev task, maybe a stage environment,

15
00:00:35.007 --> 00:00:39.000
a pre-prod and a prod, all of those environments

16
00:00:39.000 --> 00:00:41.006
may have a little bit different settings

17
00:00:41.006 --> 00:00:44.006
when it comes to the components that you're going to consume,

18
00:00:44.006 --> 00:00:49.000
and profiles in spring give you the power to do that

19
00:00:49.000 --> 00:00:52.001
without creating multiple containers.

20
00:00:52.001 --> 00:00:55.006
Finally, another use case that's not so common

21
00:00:55.006 --> 00:00:57.004
but is really very valuable

22
00:00:57.004 --> 00:01:00.008
is if you are running two different production domains.

23
00:01:00.008 --> 00:01:06.001
Consider a hot-cold scenario or a live pre-live environment.

24
00:01:06.001 --> 00:01:09.001
By using profiles, it gives you a lot of power

25
00:01:09.001 --> 00:01:10.008
because you can overlap

26
00:01:10.008 --> 00:01:13.000
where the prod environments are the same,

27
00:01:13.000 --> 00:01:15.008
but you can have slightly different profiles

28
00:01:15.008 --> 00:01:17.007
where they are not the same.

29
00:01:17.007 --> 00:01:21.004
And that's really profiles in a gist.

30
00:01:21.004 --> 00:01:25.001
One of the easiest ways to flex config based on profile

31
00:01:25.001 --> 00:01:28.000
is through the application.yaml file.

32
00:01:28.000 --> 00:01:30.006
Spring boot provides native Yaml support

33
00:01:30.006 --> 00:01:34.009
and as such, the traditional application.properties file

34
00:01:34.009 --> 00:01:37.009
becomes an application.Yaml file

35
00:01:37.009 --> 00:01:40.002
in a spring boot application

36
00:01:40.002 --> 00:01:43.008
that's going to be deployed to multiple environments.

37
00:01:43.008 --> 00:01:46.007
This allows properties to flex by profile

38
00:01:46.007 --> 00:01:48.006
among other things.

39
00:01:48.006 --> 00:01:51.005
Spring.profiles is the key value

40
00:01:51.005 --> 00:01:54.000
that you're going to put into your Yaml file

41
00:01:54.000 --> 00:01:57.001
to indicate that all of the properties below it

42
00:01:57.001 --> 00:01:59.002
are specific to that profile.

43
00:01:59.002 --> 00:02:02.001
And we're going to show you an example of that.

44
00:02:02.001 --> 00:02:05.004
Now, there are other ways to trigger configurations

45
00:02:05.004 --> 00:02:10.000
based on a profile outside of the application.Yaml file.

46
00:02:10.000 --> 00:02:12.008
And if you're really interested in looking at those,

47
00:02:12.008 --> 00:02:15.008
I've got a course called spring framework in depth

48
00:02:15.008 --> 00:02:17.007
that really digs a lot deeper

49
00:02:17.007 --> 00:02:20.001
into the concept of spring profiles

50
00:02:20.001 --> 00:02:24.001
and flexing configuration based on that profile.

51
00:02:24.001 --> 00:02:26.009
In addition, in a cloud native environment

52
00:02:26.009 --> 00:02:29.004
which has really spring boots forte,

53
00:02:29.004 --> 00:02:31.000
it provides the environment

54
00:02:31.000 --> 00:02:34.000
where you can leverage the configuration server.

55
00:02:34.000 --> 00:02:35.005
But really, as you dig into that,

56
00:02:35.005 --> 00:02:37.007
you will find out that it's nothing more

57
00:02:37.007 --> 00:02:42.002
than application.Yaml that's been externalized.

58
00:02:42.002 --> 00:02:46.001
Engaging profiles is a very simple process.

59
00:02:46.001 --> 00:02:48.004
To engage a specific profile

60
00:02:48.004 --> 00:02:51.008
in a spring boot application or any spring application

61
00:02:51.008 --> 00:02:52.009
for that matter,

62
00:02:52.009 --> 00:02:58.000
the key is the spring.profiles.active environment variable.

63
00:02:58.000 --> 00:03:01.002
You can also pass that as a command line value,

64
00:03:01.002 --> 00:03:03.005
but in the real world an environment variable

65
00:03:03.005 --> 00:03:07.002
is much more common and you can set up your run time

66
00:03:07.002 --> 00:03:11.007
ahead of time to have that environment variable ready.

67
00:03:11.007 --> 00:03:14.007
So let's take a look at what a profile will look like

68
00:03:14.007 --> 00:03:16.005
for an application.Yaml.

69
00:03:16.005 --> 00:03:19.002
Let's open up that application.properties file

70
00:03:19.002 --> 00:03:22.004
from source main resources again.

71
00:03:22.004 --> 00:03:25.001
But before we actually open it, let's refactor it

72
00:03:25.001 --> 00:03:30.007
to be a Yaml file instead of a properties file.

73
00:03:30.007 --> 00:03:31.008
Now we can go into it

74
00:03:31.008 --> 00:03:35.002
and we will delete what was there before.

75
00:03:35.002 --> 00:03:36.001
So the first thing that we'll do

76
00:03:36.001 --> 00:03:40.003
is we'll set up our spring profiles

77
00:03:40.003 --> 00:03:43.001
and we'll set the first one to be dev.

78
00:03:43.001 --> 00:03:44.003
Now in the dev profile,

79
00:03:44.003 --> 00:03:49.003
we're going to set our server port to 8,000.

80
00:03:49.003 --> 00:03:53.008
Now to separate our profiles, we will put three hyphens.

81
00:03:53.008 --> 00:03:55.004
We're going to do the same thing.

82
00:03:55.004 --> 00:03:58.005
We're going to set up spring profiles.

83
00:03:58.005 --> 00:04:02.005
And in this case, we're going to do test, and on test,

84
00:04:02.005 --> 00:04:07.008
we will run our application on 9,000.

85
00:04:07.008 --> 00:04:10.007
Now let's go into our run configuration

86
00:04:10.007 --> 00:04:14.003
and we're going to take our boot application.

87
00:04:14.003 --> 00:04:15.009
Now, we can set this value two ways.

88
00:04:15.009 --> 00:04:17.005
We can either set an environment variable,

89
00:04:17.005 --> 00:04:19.005
or we can set a program argument.

90
00:04:19.005 --> 00:04:22.001
I'm going to do the environment variable path.

91
00:04:22.001 --> 00:04:23.009
So add an environment variable.

92
00:04:23.009 --> 00:04:26.009
And again, this will look a little different on other IDEs

93
00:04:26.009 --> 00:04:29.000
but you can do all of the same things

94
00:04:29.000 --> 00:04:31.008
in each IDE that I've ever used.

95
00:04:31.008 --> 00:04:34.004
So what we were going to set here.

96
00:04:34.004 --> 00:04:40.003
So we're going to set a value of spring.profiles.active,

97
00:04:40.003 --> 00:04:44.001
and we will set its value to be dev.

98
00:04:44.001 --> 00:04:46.003
Now, if you're using IntelliJ ultimate,

99
00:04:46.003 --> 00:04:48.006
you actually get some better ways of doing this,

100
00:04:48.006 --> 00:04:52.000
but for now, let's just stick with it this way.

101
00:04:52.000 --> 00:04:58.006
So let's apply this and let's run our application.

102
00:04:58.006 --> 00:05:00.002
You'll see that with dev value set,

103
00:05:00.002 --> 00:05:03.002
I've now started on 8,000.

104
00:05:03.002 --> 00:05:04.009
So let's stop that.

105
00:05:04.009 --> 00:05:08.006
Let's edit that configuration again,

106
00:05:08.006 --> 00:05:17.007
and now let's send it to test, apply, run this.

107
00:05:17.007 --> 00:05:19.008
And you'll see once again on the second to bottom line,

108
00:05:19.008 --> 00:05:22.003
now we've started at 9,000.

109
00:05:22.003 --> 00:05:26.008
So what happens if we don't have one set?

110
00:05:26.008 --> 00:05:29.002
Let's go back in one more time

111
00:05:29.002 --> 00:05:36.003
and let's set this equal to prod.

112
00:05:36.003 --> 00:05:37.001
Before I hit run,

113
00:05:37.001 --> 00:05:41.006
can you guess what it's going to run at?

114
00:05:41.006 --> 00:05:44.003
8080, because that's the default.

115
00:05:44.003 --> 00:05:48.000
We provided a profile that we don't have configuration for,

116
00:05:48.000 --> 00:05:50.004
and as such, it will always default

117
00:05:50.004 --> 00:05:54.000
to what the default value is for that configuration.

