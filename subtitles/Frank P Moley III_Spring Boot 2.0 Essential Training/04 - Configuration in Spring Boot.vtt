WEBVTT
1
00:00:00.005 --> 00:00:03.003
- [Instructor] Part of the operational power of spring boot,

2
00:00:03.003 --> 00:00:05.007
comes from the various ways that you can change

3
00:00:05.007 --> 00:00:08.005
the configuration, of an application,

4
00:00:08.005 --> 00:00:11.009
either during runtime or during startup.

5
00:00:11.009 --> 00:00:14.000
Now, there are many ways to configure properties,

6
00:00:14.000 --> 00:00:15.006
for a spring application.

7
00:00:15.006 --> 00:00:17.007
And there are rules around precedents,

8
00:00:17.007 --> 00:00:20.009
but we'll talk about that in a couple of minutes.

9
00:00:20.009 --> 00:00:22.008
The application.properties file,

10
00:00:22.008 --> 00:00:25.003
or the application.yaml file,

11
00:00:25.003 --> 00:00:28.004
provide very basic configuration.

12
00:00:28.004 --> 00:00:31.002
And in my opinion, these two locations are good,

13
00:00:31.002 --> 00:00:34.003
really only for development and demo purposes,

14
00:00:34.003 --> 00:00:35.007
because in reality,

15
00:00:35.007 --> 00:00:39.002
the types of configurations that you're going to put,

16
00:00:39.002 --> 00:00:40.008
into a spring application,

17
00:00:40.008 --> 00:00:43.001
are going to have so much variance,

18
00:00:43.001 --> 00:00:44.004
based on the data center,

19
00:00:44.004 --> 00:00:47.003
or the environment that you're running it.

20
00:00:47.003 --> 00:00:49.006
And while the yaml file gives you a little bit

21
00:00:49.006 --> 00:00:50.009
more control,

22
00:00:50.009 --> 00:00:55.006
both of them are really development focused in my opinion.

23
00:00:55.006 --> 00:00:58.004
Environment variables are very common,

24
00:00:58.004 --> 00:01:02.003
especially for modifying the profiles that will be loaded.

25
00:01:02.003 --> 00:01:05.007
And we're going to get into those profiles in the next video.

26
00:01:05.007 --> 00:01:08.008
But this is a way to modify the runtime environment,

27
00:01:08.008 --> 00:01:12.001
to give a specific configuration properties,

28
00:01:12.001 --> 00:01:14.003
for that environment itself.

29
00:01:14.003 --> 00:01:19.001
These are very common bare metal and Kubernetes deployments.

30
00:01:19.001 --> 00:01:21.003
Similar to the environment variables.

31
00:01:21.003 --> 00:01:24.002
You can also inject at the command line,

32
00:01:24.002 --> 00:01:27.006
different properties in your spring application.

33
00:01:27.006 --> 00:01:31.000
Now while this is a less common method than using runtime

34
00:01:31.000 --> 00:01:32.008
environment variables,

35
00:01:32.008 --> 00:01:36.005
they do offer some value when you may have two

36
00:01:36.005 --> 00:01:39.009
or three applications running in the same environment.

37
00:01:39.009 --> 00:01:43.003
But serving very different functions.

38
00:01:43.003 --> 00:01:46.008
The most common way to modify properties, of a spring boot

39
00:01:46.008 --> 00:01:51.001
application is through cloud configurations.

40
00:01:51.001 --> 00:01:54.009
Through the use of things like config, server or console,

41
00:01:54.009 --> 00:01:58.003
you can change the configurations for an entire cloud

42
00:01:58.003 --> 00:02:00.008
native based application suite,

43
00:02:00.008 --> 00:02:04.000
instead of just a single application.

44
00:02:04.000 --> 00:02:05.004
That's really where the power

45
00:02:05.004 --> 00:02:08.004
of cloud configuration comes from.

46
00:02:08.004 --> 00:02:10.009
If you're unfamiliar with cloud configuration,

47
00:02:10.009 --> 00:02:14.004
or you'd like to dig more deep into this topic,

48
00:02:14.004 --> 00:02:17.003
check out my course, Spring, Spring, Cloud,

49
00:02:17.003 --> 00:02:20.009
for more information on leveraging the config server,

50
00:02:20.009 --> 00:02:24.000
to inject configuration, from a server,

51
00:02:24.000 --> 00:02:25.009
as opposed to through environment

52
00:02:25.009 --> 00:02:28.009
or through something checked in, to source control,

53
00:02:28.009 --> 00:02:32.001
like an application.properties file.

54
00:02:32.001 --> 00:02:34.005
Another way to modify the configuration

55
00:02:34.005 --> 00:02:35.007
of a spring application,

56
00:02:35.007 --> 00:02:37.008
is through the beans that are actually defined

57
00:02:37.008 --> 00:02:40.007
as part of the application context.

58
00:02:40.007 --> 00:02:41.009
Much like properties.

59
00:02:41.009 --> 00:02:43.008
There are several ways to add beans

60
00:02:43.008 --> 00:02:46.006
to a spring or spring boot application.

61
00:02:46.006 --> 00:02:49.009
Adding beans to the default application class,

62
00:02:49.009 --> 00:02:54.000
is a simple and great way to get started with configuration.

63
00:02:54.000 --> 00:02:56.001
This class can get unruly however,

64
00:02:56.001 --> 00:03:00.004
so often, I like to break things up.

65
00:03:00.004 --> 00:03:03.009
You can also add beans to separate configuration classes,

66
00:03:03.009 --> 00:03:05.003
as I was alluding to.

67
00:03:05.003 --> 00:03:08.001
And there's a couple of different ways to get those loaded

68
00:03:08.001 --> 00:03:10.008
into the application context.

69
00:03:10.008 --> 00:03:13.000
You can rely on component scanning,

70
00:03:13.000 --> 00:03:15.007
or you can define those configuration classes

71
00:03:15.007 --> 00:03:18.005
as something to import.

72
00:03:18.005 --> 00:03:22.002
You can also use XML-based configuration files.

73
00:03:22.002 --> 00:03:25.007
Now, if you're using XML-based configuration files

74
00:03:25.007 --> 00:03:30.001
for legacy application usage, great, continue doing that,

75
00:03:30.001 --> 00:03:32.008
because there's really not much need,

76
00:03:32.008 --> 00:03:36.007
to rewrite all of those applications that are legacy.

77
00:03:36.007 --> 00:03:40.005
If however, you find yourself writing a new XML file,

78
00:03:40.005 --> 00:03:44.001
to get configurations into your spring applications,

79
00:03:44.001 --> 00:03:47.007
I would stop what you're doing, rethink your decisions,

80
00:03:47.007 --> 00:03:49.004
and take a little bit deeper look,

81
00:03:49.004 --> 00:03:51.005
into Java based configuration,

82
00:03:51.005 --> 00:03:54.004
or component scan based configurations.

83
00:03:54.004 --> 00:03:57.000
And that indeed is the next way to get your beans,

84
00:03:57.000 --> 00:03:59.000
into your application.

85
00:03:59.000 --> 00:04:04.002
And by default, any component or stereotype, of component,

86
00:04:04.002 --> 00:04:07.009
that is found in a sub package, of the package containing,

87
00:04:07.009 --> 00:04:10.000
the default application class,

88
00:04:10.000 --> 00:04:13.008
for a spring boot application, will be component scanned,

89
00:04:13.008 --> 00:04:16.002
unless you tell it not to.

90
00:04:16.002 --> 00:04:18.006
Now, of course you can do a mixture of any

91
00:04:18.006 --> 00:04:21.001
or all of these that you want.

92
00:04:21.001 --> 00:04:23.002
And that's what spring allows you to do.

93
00:04:23.002 --> 00:04:25.000
Take and mix and match whatever

94
00:04:25.000 --> 00:04:28.004
you need to make your application run.

95
00:04:28.004 --> 00:04:30.004
So let's return to the application that we created a couple

96
00:04:30.004 --> 00:04:31.003
of videos ago.

97
00:04:31.003 --> 00:04:33.004
And let's make up a simple modification

98
00:04:33.004 --> 00:04:35.008
to the configuration itself.

99
00:04:35.008 --> 00:04:38.005
I want you to open up the application.properties file,

100
00:04:38.005 --> 00:04:41.005
and source main resources.

101
00:04:41.005 --> 00:04:43.006
And we're going to put a very simple property.

102
00:04:43.006 --> 00:04:46.004
We're going to type in, server.port.

103
00:04:46.004 --> 00:04:47.006
And the default is 8080.

104
00:04:47.006 --> 00:04:50.003
We're going to set it to 8,000.

105
00:04:50.003 --> 00:04:54.003
And with that, we'll start up our application.

106
00:04:54.003 --> 00:04:55.009
And I'm just running it through my IDE,

107
00:04:55.009 --> 00:04:57.009
by essentially running the main method.

108
00:04:57.009 --> 00:04:59.009
I have a run configuration built.

109
00:04:59.009 --> 00:05:02.000
You can do the same in your ID,

110
00:05:02.000 --> 00:05:03.005
or you can run it from the command line,

111
00:05:03.005 --> 00:05:06.000
whichever you find more comfortable.

112
00:05:06.000 --> 00:05:09.006
You will see in this case on the second to the last message,

113
00:05:09.006 --> 00:05:14.004
the Tomcat, this time has started at 8,000 instead of 8080.

114
00:05:14.004 --> 00:05:18.004
So let's jump to a web browser, and let's refresh,

115
00:05:18.004 --> 00:05:22.005
on 8080, and you'll see that the site cannot be reached.

116
00:05:22.005 --> 00:05:26.000
Instead let's change this to 8,000,

117
00:05:26.000 --> 00:05:27.008
and there's our webpage served.

118
00:05:27.008 --> 00:05:29.007
So with that simple property change,

119
00:05:29.007 --> 00:05:33.000
we changed the way Tomcat itself operates.

120
00:05:33.000 --> 00:05:36.002
And we'll talk more about how to configure Tomcat later.

121
00:05:36.002 --> 00:05:38.002
But this is the value of properties,

122
00:05:38.002 --> 00:05:40.004
and you can inject those properties,

123
00:05:40.004 --> 00:05:42.004
based on different priorities

124
00:05:42.004 --> 00:05:43.006
depending on your use case.

125
00:05:43.006 --> 00:05:46.004
So an environment variable will always beat,

126
00:05:46.004 --> 00:05:49.004
the property to find an application properties for instance.

127
00:05:49.004 --> 00:05:52.004
These are very well-defined in the spring documentation,

128
00:05:52.004 --> 00:05:54.005
and I encourage you to take a look at those,

129
00:05:54.005 --> 00:05:57.000
as you're moving an application into production.

