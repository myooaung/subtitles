WEBVTT
1
00:00:00.005 --> 00:00:02.000
- [Instructor] Before we get started building

2
00:00:02.000 --> 00:00:03.009
a web applications with Spring Boot,

3
00:00:03.009 --> 00:00:05.007
I want to talk a little bit about what comes

4
00:00:05.007 --> 00:00:07.003
with a web starter.

5
00:00:07.003 --> 00:00:10.005
And web applications are by far the most common places

6
00:00:10.005 --> 00:00:12.005
to start with Spring Boot.

7
00:00:12.005 --> 00:00:14.005
So we're going to use this as an example

8
00:00:14.005 --> 00:00:17.007
of what comes with the traditional starter.

9
00:00:17.007 --> 00:00:20.003
Central using web starters are baseline.

10
00:00:20.003 --> 00:00:22.002
Let's just discuss what comes with them

11
00:00:22.002 --> 00:00:24.003
with web applications.

12
00:00:24.003 --> 00:00:27.004
Now in the spring world, and especially with Spring Boot,

13
00:00:27.004 --> 00:00:29.002
there's no difference between the traditional

14
00:00:29.002 --> 00:00:33.007
HTML based-web application or one that does web services.

15
00:00:33.007 --> 00:00:37.003
As a matter of fact, a single application can contain both

16
00:00:37.003 --> 00:00:39.004
with zero effort.

17
00:00:39.004 --> 00:00:42.005
Now, both of these leverage the spring-boot-starter-web

18
00:00:42.005 --> 00:00:45.003
module in order to do the work.

19
00:00:45.003 --> 00:00:46.008
And that package has a mixture

20
00:00:46.008 --> 00:00:50.003
of components needed to get apps up and running

21
00:00:50.003 --> 00:00:52.005
quickly from the ground up.

22
00:00:52.005 --> 00:00:54.001
The dependencies that are included

23
00:00:54.001 --> 00:00:56.007
with spring-boot-starter-web include both

24
00:00:56.007 --> 00:01:00.007
spring dependencies and those from vendors like Apache

25
00:01:00.007 --> 00:01:03.006
but really Spring Boot is doing all of the management

26
00:01:03.006 --> 00:01:06.005
of the dependencies, including the versions

27
00:01:06.005 --> 00:01:10.002
to ensure that there's no version mismatch.

28
00:01:10.002 --> 00:01:11.006
One of the most popular parts

29
00:01:11.006 --> 00:01:15.004
of spring-boot-starter-web is the embedded Tomcat server.

30
00:01:15.004 --> 00:01:18.000
By default, you're going to get that out of the box,

31
00:01:18.000 --> 00:01:21.004
which is how you can build an executable JAR file

32
00:01:21.004 --> 00:01:24.006
that serves a web application.

33
00:01:24.006 --> 00:01:26.008
Now that embedded Tomcat can be replaced

34
00:01:26.008 --> 00:01:29.008
with jetty or other app servers, if you prefer.

35
00:01:29.008 --> 00:01:31.008
And there's really good documentation

36
00:01:31.008 --> 00:01:33.006
in the Spring Boot guide

37
00:01:33.006 --> 00:01:37.009
on how to do that transfer from Tomcat to something else.

38
00:01:37.009 --> 00:01:40.002
You can also remove Tomcat completely

39
00:01:40.002 --> 00:01:44.003
and create a WAR file instead of an executable JAR,

40
00:01:44.003 --> 00:01:47.006
if your use case requires that.

41
00:01:47.006 --> 00:01:50.003
Now one thing to note, is that the Tomcat you get

42
00:01:50.003 --> 00:01:54.002
is very opinionated but default configuration,

43
00:01:54.002 --> 00:01:56.007
and it's not the most secure way you can deploy

44
00:01:56.007 --> 00:01:58.004
on to Tomcat.

45
00:01:58.004 --> 00:02:00.008
So you need to consider this in your infrastructure

46
00:02:00.008 --> 00:02:04.000
especially if you are dealing with cloud deployments

47
00:02:04.000 --> 00:02:06.002
where you're going to public clouds

48
00:02:06.002 --> 00:02:08.002
without some sort of proxy layer

49
00:02:08.002 --> 00:02:10.004
in front of your applications.

50
00:02:10.004 --> 00:02:13.002
We're going to go more into how to configure Tomcat

51
00:02:13.002 --> 00:02:15.006
in the next video, but for now,

52
00:02:15.006 --> 00:02:18.005
just keep it in mind that the default configuration

53
00:02:18.005 --> 00:02:23.000
may not be the best for real-world examples.

54
00:02:23.000 --> 00:02:27.002
JSON Marshaller is another value out of Spring Boot.

55
00:02:27.002 --> 00:02:28.009
With spring-boot-starter-web,

56
00:02:28.009 --> 00:02:31.006
you get a set of JSON Marshaller specifically

57
00:02:31.006 --> 00:02:33.005
from the Jackson libraries,

58
00:02:33.005 --> 00:02:36.009
to do JSON marshaling and unmarshalling.

59
00:02:36.009 --> 00:02:41.004
Now, obviously this is very useful for RESTful web services

60
00:02:41.004 --> 00:02:43.001
but that's not the only use case

61
00:02:43.001 --> 00:02:45.009
for JSON Marshallers in an application.

62
00:02:45.009 --> 00:02:48.003
And I'm sure if you come up with some many possible

63
00:02:48.003 --> 00:02:50.007
use cases just by thinking about it,

64
00:02:50.007 --> 00:02:53.003
including things like reading from the file system

65
00:02:53.003 --> 00:02:55.001
or reading from a message listener,

66
00:02:55.001 --> 00:02:58.006
as long as they're structured in JSON format.

67
00:02:58.006 --> 00:03:01.006
Now, by default, a spring application that's serving

68
00:03:01.006 --> 00:03:05.001
a response body, or accepting a request body,

69
00:03:05.001 --> 00:03:08.008
specifically of a web service application path,

70
00:03:08.008 --> 00:03:10.005
you're going to get automatic marshaling

71
00:03:10.005 --> 00:03:13.005
and unmarshalling of the JSON payload.

72
00:03:13.005 --> 00:03:15.005
But you can always get a handle to that.

73
00:03:15.005 --> 00:03:18.001
Marshaller so that you can do your own

74
00:03:18.001 --> 00:03:21.003
in the various use cases that you come up with.

75
00:03:21.003 --> 00:03:24.007
By default, you're also going to get some test dependencies

76
00:03:24.007 --> 00:03:27.009
that help you test the web services themselves

77
00:03:27.009 --> 00:03:30.008
to things like JSON path.

78
00:03:30.008 --> 00:03:34.008
Spring Boot also includes a default logging framework .

79
00:03:34.008 --> 00:03:37.003
SLF4J is the chosen library,

80
00:03:37.003 --> 00:03:39.005
and they do all of their logging with that,

81
00:03:39.005 --> 00:03:42.006
and expose it for you to use as well.

82
00:03:42.006 --> 00:03:45.001
Now, Spring Boot does build its own loggers

83
00:03:45.001 --> 00:03:48.006
and you can leverage them or you can build your own logger

84
00:03:48.006 --> 00:03:49.009
if you choose.

85
00:03:49.009 --> 00:03:52.002
Now, I traditionally just stick with the one that comes

86
00:03:52.002 --> 00:03:56.002
with Spring Boot because it works for my needs.

87
00:03:56.002 --> 00:03:59.003
You can leverage properties to modify the logging,

88
00:03:59.003 --> 00:04:03.001
the logging formats, or the log level itself.

89
00:04:03.001 --> 00:04:05.007
You're also going to get a variation of log back logging

90
00:04:05.007 --> 00:04:09.005
included for free if you choose to use that.

91
00:04:09.005 --> 00:04:11.006
Now, of course, you're going to see spring libraries

92
00:04:11.006 --> 00:04:14.006
because after all this is Spring Boot.

93
00:04:14.006 --> 00:04:16.008
One of the first libraries that you're going to see

94
00:04:16.008 --> 00:04:19.001
is Spring Boot auto-configure.

95
00:04:19.001 --> 00:04:21.000
And we've already alluded to this,

96
00:04:21.000 --> 00:04:23.006
in how spring does auto configuration.

97
00:04:23.006 --> 00:04:25.005
And we'll dig into it a little bit more.

98
00:04:25.005 --> 00:04:26.008
But again, this is where the magic

99
00:04:26.008 --> 00:04:29.000
of Spring Boot comes from.

100
00:04:29.000 --> 00:04:31.001
You'll also see that spring-boot-starter-web

101
00:04:31.001 --> 00:04:33.003
brings in the three separate boot artifacts,

102
00:04:33.003 --> 00:04:35.009
Tomcat starter, and a logging starter,

103
00:04:35.009 --> 00:04:36.009
which you've just seen.

104
00:04:36.009 --> 00:04:41.007
All of those is a nice dependency mix that comes with it.

105
00:04:41.007 --> 00:04:43.003
But in addition to the boot starters,

106
00:04:43.003 --> 00:04:45.004
you're going to get some core spring libraries

107
00:04:45.004 --> 00:04:47.002
as you might expect.

108
00:04:47.002 --> 00:04:49.006
You're going to get spring core, spring AOP,

109
00:04:49.006 --> 00:04:52.001
beans, context, expressions,

110
00:04:52.001 --> 00:04:52.009
and those are used

111
00:04:52.009 --> 00:04:56.002
for those spring expression language constructs.

112
00:04:56.002 --> 00:04:59.004
You're also going to get the ability to load property resources

113
00:04:59.004 --> 00:05:01.007
through those core libraries.

114
00:05:01.007 --> 00:05:04.009
You're also going to get Spring Web and Spring WebMvc

115
00:05:04.009 --> 00:05:08.001
in order to do our web operations.

116
00:05:08.001 --> 00:05:09.006
Now, there's just a few more libraries here

117
00:05:09.006 --> 00:05:11.005
that you're going to get.

118
00:05:11.005 --> 00:05:12.009
One of the first ones that we've actually

119
00:05:12.009 --> 00:05:14.009
used is SnakeYAML.

120
00:05:14.009 --> 00:05:17.008
SnakeYAML is what allows us to read those YAML files

121
00:05:17.008 --> 00:05:19.002
for application at YAML,

122
00:05:19.002 --> 00:05:21.007
and convert them to properties at runtime

123
00:05:21.007 --> 00:05:25.001
which you can actually use within your application.

124
00:05:25.001 --> 00:05:28.000
Now you're also going to get a starter test module.

125
00:05:28.000 --> 00:05:30.003
And this includes J unit as well as everything

126
00:05:30.003 --> 00:05:34.000
that you need to test a Spring Boot application.

127
00:05:34.000 --> 00:05:36.001
Now each starter throughout the entire starter

128
00:05:36.001 --> 00:05:37.009
next spring that out page,

129
00:05:37.009 --> 00:05:40.003
has its own set of behaviors and properties

130
00:05:40.003 --> 00:05:41.007
that it brings in,

131
00:05:41.007 --> 00:05:45.004
many of which bring in other starters as well.

132
00:05:45.004 --> 00:05:47.006
This is going to take you quite a bit of knowledge

133
00:05:47.006 --> 00:05:49.002
to grasp what you get,

134
00:05:49.002 --> 00:05:51.009
and it's not something that we can wrap into a course.

135
00:05:51.009 --> 00:05:53.005
It's something that you're going to have to get

136
00:05:53.005 --> 00:05:56.009
by using Spring Boot in various methods

137
00:05:56.009 --> 00:06:00.000
throughout the examples that spring provides.

