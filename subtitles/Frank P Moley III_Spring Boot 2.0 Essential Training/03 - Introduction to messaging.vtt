WEBVTT
1
00:00:00.005 --> 00:00:02.004
- [Instructor] Implementing asynchronous messaging

2
00:00:02.004 --> 00:00:05.005
with Spring Boot is actually a little bit easier

3
00:00:05.005 --> 00:00:08.002
than it is with just traditional Spring.

4
00:00:08.002 --> 00:00:10.001
But that's only because Spring Boot

5
00:00:10.001 --> 00:00:12.008
provides a lot of the default plumbing

6
00:00:12.008 --> 00:00:16.003
that you used to have to configure manually.

7
00:00:16.003 --> 00:00:17.008
The first question you may be asking

8
00:00:17.008 --> 00:00:19.005
is why do you care at all

9
00:00:19.005 --> 00:00:22.000
about using asynchronous messaging?

10
00:00:22.000 --> 00:00:25.006
And I urge you to really think about this one.

11
00:00:25.006 --> 00:00:30.005
Seldom is real-time processing actually a requirement.

12
00:00:30.005 --> 00:00:31.005
All too often,

13
00:00:31.005 --> 00:00:34.009
our business expects things to happen immediately.

14
00:00:34.009 --> 00:00:37.008
But there's no real beneficial reason

15
00:00:37.008 --> 00:00:40.001
why it has to happen that way.

16
00:00:40.001 --> 00:00:42.007
Especially, when an asynchronous communication

17
00:00:42.007 --> 00:00:46.000
is only a couple of seconds behind.

18
00:00:46.000 --> 00:00:50.003
Asynchronous messaging as a whole as long as done correctly,

19
00:00:50.003 --> 00:00:54.001
can reduce the overall strain on your system,

20
00:00:54.001 --> 00:00:58.001
sometimes dramatically by simply pushing tasks a second

21
00:00:58.001 --> 00:01:02.000
or two into the future, instead of right now.

22
00:01:02.000 --> 00:01:04.003
Modern messaging systems are efficient

23
00:01:04.003 --> 00:01:07.005
for sending and receiving asynchronous messages,

24
00:01:07.005 --> 00:01:11.001
especially those with very small payloads.

25
00:01:11.001 --> 00:01:13.005
These efficiencies in sending and receiving

26
00:01:13.005 --> 00:01:16.008
also make your primary systems more efficient

27
00:01:16.008 --> 00:01:19.004
by removing blocking calls.

28
00:01:19.004 --> 00:01:20.007
And I would encourage you,

29
00:01:20.007 --> 00:01:24.005
if you start walking this journey with Async Messaging

30
00:01:24.005 --> 00:01:26.005
to consider using use cases

31
00:01:26.005 --> 00:01:30.001
where you can send simple identifiers of objects

32
00:01:30.001 --> 00:01:34.001
that need to be moved or of transactions that need to occur

33
00:01:34.001 --> 00:01:37.004
as opposed to sending the entire object graph.

34
00:01:37.004 --> 00:01:39.006
Because that will make many messaging systems

35
00:01:39.006 --> 00:01:42.005
perform significantly better.

36
00:01:42.005 --> 00:01:44.008
Now, of course, like everything in software engineering,

37
00:01:44.008 --> 00:01:46.004
there is no silver bullet.

38
00:01:46.004 --> 00:01:49.002
Because some systems are actually more efficient

39
00:01:49.002 --> 00:01:51.003
with larger payloads.

40
00:01:51.003 --> 00:01:55.004
But the idea in those cases is again, reducing the blocking

41
00:01:55.004 --> 00:01:57.004
and increasing the speed.

42
00:01:57.004 --> 00:01:58.005
But more than anything,

43
00:01:58.005 --> 00:02:00.006
you need to understand the messaging system

44
00:02:00.006 --> 00:02:04.003
that you're using and the way to use it properly.

45
00:02:04.003 --> 00:02:07.009
Now, there's two general sides of Async Messaging.

46
00:02:07.009 --> 00:02:11.001
There's the producer and the consumer.

47
00:02:11.001 --> 00:02:14.000
First, we're going to talk about the producer.

48
00:02:14.000 --> 00:02:16.008
The producing side or producer

49
00:02:16.008 --> 00:02:19.008
in general requires the use of a template

50
00:02:19.008 --> 00:02:22.009
and Spring provides one for you.

51
00:02:22.009 --> 00:02:24.000
With Spring Boot,

52
00:02:24.000 --> 00:02:26.006
you get some very default configurations

53
00:02:26.006 --> 00:02:28.009
on how to use your template,

54
00:02:28.009 --> 00:02:32.006
including connecting to the asynchronous messaging system

55
00:02:32.006 --> 00:02:35.007
that is on the local host by default.

56
00:02:35.007 --> 00:02:38.002
Now, you can modify that to a production system

57
00:02:38.002 --> 00:02:42.005
in the real world through a couple of property changes.

58
00:02:42.005 --> 00:02:45.001
For Rabbit, like we will use in this course,

59
00:02:45.001 --> 00:02:46.006
you need to provide an exchange

60
00:02:46.006 --> 00:02:49.005
and a queue name that are bound together.

61
00:02:49.005 --> 00:02:52.002
That way, when the routing goes through the exchange,

62
00:02:52.002 --> 00:02:55.001
it's tagged with the appropriate queue name

63
00:02:55.001 --> 00:02:58.006
such that the message ends up on the appropriate queue.

64
00:02:58.006 --> 00:03:01.001
And that's just how Rabbit AMQP

65
00:03:01.001 --> 00:03:04.002
is a little bit different than say traditional JMS,

66
00:03:04.002 --> 00:03:06.007
where you simply have a queue or a topic.

67
00:03:06.007 --> 00:03:08.009
And each messaging system you will find

68
00:03:08.009 --> 00:03:12.009
has little idiosyncrasies that you have to work with.

69
00:03:12.009 --> 00:03:17.000
Now with Rabbit, you have an exchange in queues and topics.

70
00:03:17.000 --> 00:03:19.005
And it gives you a little bit more control

71
00:03:19.005 --> 00:03:21.008
over how those messages go.

72
00:03:21.008 --> 00:03:25.003
Because the message may actually go to multiple queues

73
00:03:25.003 --> 00:03:29.004
depending on the data type it is and the routing key.

74
00:03:29.004 --> 00:03:32.003
Now, when you do the actual Rabbit template

75
00:03:32.003 --> 00:03:35.008
posting of a message, you can post a full object

76
00:03:35.008 --> 00:03:39.006
and allow Java to serialize, or de-serialize it.

77
00:03:39.006 --> 00:03:42.004
Or you can post a string

78
00:03:42.004 --> 00:03:45.004
which is what I often prefer to do.

79
00:03:45.004 --> 00:03:47.008
I actually created Jason string

80
00:03:47.008 --> 00:03:50.001
that I put on the message queue.

81
00:03:50.001 --> 00:03:52.001
It does a couple of things for me.

82
00:03:52.001 --> 00:03:52.009
Number one,

83
00:03:52.009 --> 00:03:56.004
it removes some of the object serialization risks

84
00:03:56.004 --> 00:03:59.008
that are native to any serialized language.

85
00:03:59.008 --> 00:04:02.009
It also allows me to view the messages on the queue

86
00:04:02.009 --> 00:04:05.005
in a native format, which is Jason.

87
00:04:05.005 --> 00:04:06.009
So, I can actually read them

88
00:04:06.009 --> 00:04:09.004
as opposed to just seeing a serialized object

89
00:04:09.004 --> 00:04:11.008
out in the message queue.

90
00:04:11.008 --> 00:04:16.001
Now, consuming messages follows a very similar pattern.

91
00:04:16.001 --> 00:04:17.008
You create a message listener.

92
00:04:17.008 --> 00:04:20.006
And what happens is Spring receives the message

93
00:04:20.006 --> 00:04:24.005
from the queue and initiates this listener response,

94
00:04:24.005 --> 00:04:26.004
which is the actual worker thread

95
00:04:26.004 --> 00:04:29.003
that occurs when a message hits the queue.

96
00:04:29.003 --> 00:04:31.007
And Spring wires all of that up.

97
00:04:31.007 --> 00:04:33.008
And by default with Spring Boot,

98
00:04:33.008 --> 00:04:37.006
you get a lot of that plumbing, as I said, for free.

99
00:04:37.006 --> 00:04:40.008
Now the response to the message on that queue happens.

100
00:04:40.008 --> 00:04:43.009
And then it executes some logic that you create.

101
00:04:43.009 --> 00:04:46.001
And that logic can be as simple

102
00:04:46.001 --> 00:04:51.003
or as complex as you need it to be based on your situation.

103
00:04:51.003 --> 00:04:54.006
And it's really based on the very same paradigm.

104
00:04:54.006 --> 00:04:56.003
And as a matter of fact,

105
00:04:56.003 --> 00:04:58.002
as we get into actually implementing it,

106
00:04:58.002 --> 00:05:00.006
you will see that there's a lot of similarities

107
00:05:00.006 --> 00:05:04.005
between the configuration of the producer and the consumer.

108
00:05:04.005 --> 00:05:05.008
It's where they're implemented

109
00:05:05.008 --> 00:05:08.001
that you'll see just a little bit different fashion

110
00:05:08.001 --> 00:05:10.000
between the two.

