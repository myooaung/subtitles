WEBVTT
1
00:00:00.005 --> 00:00:02.009
- [Narrator] So now that we've built our view in our module,

2
00:00:02.009 --> 00:00:06.000
it's time to walk through finishing our web application

3
00:00:06.000 --> 00:00:09.008
by building the controller in the model and serving it

4
00:00:09.008 --> 00:00:13.009
to the view so that we can see it in a web browser.

5
00:00:13.009 --> 00:00:16.001
So, back in our IDE, in our room web app,

6
00:00:16.001 --> 00:00:17.006
let's open it up,

7
00:00:17.006 --> 00:00:22.001
and source main Java in our base package,

8
00:00:22.001 --> 00:00:29.001
we want to create a new package and we will call it models.

9
00:00:29.001 --> 00:00:30.001
Now in models,

10
00:00:30.001 --> 00:00:36.004
we're going to create a new class called room.

11
00:00:36.004 --> 00:00:38.005
Now, room is going to have a few values here.

12
00:00:38.005 --> 00:00:40.006
So private long ID,

13
00:00:40.006 --> 00:00:43.004
and this will be used later on with our database,

14
00:00:43.004 --> 00:00:46.006
private string number,

15
00:00:46.006 --> 00:00:53.008
private string name and private string info.

16
00:00:53.008 --> 00:00:56.009
Now, I'm going to use a tool built into MyIE,

17
00:00:56.009 --> 00:00:58.007
to generate a bunch of stuff.

18
00:00:58.007 --> 00:01:00.004
Every IE can do this,

19
00:01:00.004 --> 00:01:02.006
it's just a little bit different options.

20
00:01:02.006 --> 00:01:04.006
So for me, it's Control+Enter,

21
00:01:04.006 --> 00:01:08.008
I'm going to do a constructor with no ads.

22
00:01:08.008 --> 00:01:14.003
I'm going to do a constructor with all ads,

23
00:01:14.003 --> 00:01:18.009
and I'm going to do getters and setters for all elements.

24
00:01:18.009 --> 00:01:22.000
That's all we need to do to create our room.

25
00:01:22.000 --> 00:01:24.004
Go ahead and close that file out.

26
00:01:24.004 --> 00:01:27.008
Now, we'll create another new package,

27
00:01:27.008 --> 00:01:32.002
and this one will be called controllers.

28
00:01:32.002 --> 00:01:36.000
Now in our controllers' class,

29
00:01:36.000 --> 00:01:40.003
we're going to create a new Java class,

30
00:01:40.003 --> 00:01:44.003
called room controller.

31
00:01:44.003 --> 00:01:45.006
This one we need to annotate.

32
00:01:45.006 --> 00:01:49.002
So we're going to annotate it with @controller.

33
00:01:49.002 --> 00:01:53.000
We're also going to annotate it with @requestmapping.

34
00:01:53.000 --> 00:02:00.007
And we're going to respond @rooms to an import that in.

35
00:02:00.007 --> 00:02:02.008
Now because we don't have all of our data yet,

36
00:02:02.008 --> 00:02:05.005
we're going to indeed actually mock some stuff here.

37
00:02:05.005 --> 00:02:09.005
So I'm going to create a private static, final variable.

38
00:02:09.005 --> 00:02:13.006
That is a list of room elements.

39
00:02:13.006 --> 00:02:15.009
We will call this rooms,

40
00:02:15.009 --> 00:02:19.004
and it will be equal to a new array list.

41
00:02:19.004 --> 00:02:23.003
And now I'm going to put a static block.

42
00:02:23.003 --> 00:02:24.005
And in my static block,

43
00:02:24.005 --> 00:02:27.008
I'm very simply for now going to do a four loop,

44
00:02:27.008 --> 00:02:31.000
int I equals zero.

45
00:02:31.000 --> 00:02:36.008
I is less than 10, I plus, plus.

46
00:02:36.008 --> 00:02:39.002
And we will do a rooms.add.

47
00:02:39.002 --> 00:02:41.007
We will do a new room,

48
00:02:41.007 --> 00:02:43.005
and we're just going to make up some dummy data here.

49
00:02:43.005 --> 00:02:45.006
So we'll start with I,

50
00:02:45.006 --> 00:02:50.009
we will do room plus I,

51
00:02:50.009 --> 00:02:57.006
we will do the number as R plus I,

52
00:02:57.006 --> 00:03:03.007
and we will send in some info here called Q.

53
00:03:03.007 --> 00:03:06.000
So now we can actually implement our controller.

54
00:03:06.000 --> 00:03:08.009
So we're going to do a get mapping,

55
00:03:08.009 --> 00:03:10.004
and we're going to create a method

56
00:03:10.004 --> 00:03:14.004
that returns this string called get all rooms.

57
00:03:14.004 --> 00:03:18.006
And it's going to take a model element.

58
00:03:18.006 --> 00:03:19.007
And what we will do here,

59
00:03:19.007 --> 00:03:24.009
is we will do a model.addattributes.

60
00:03:24.009 --> 00:03:27.008
We're going to pass it an attribute whose name is rooms,

61
00:03:27.008 --> 00:03:30.001
which matches our view.

62
00:03:30.001 --> 00:03:31.008
And we will simply pass it in the array

63
00:03:31.008 --> 00:03:34.000
that we created above.

64
00:03:34.000 --> 00:03:36.003
Now, we will then return rooms.

65
00:03:36.003 --> 00:03:41.007
Now, this is the name of the view that we want to resolve too.

66
00:03:41.007 --> 00:03:43.009
So, it's not the rooms that came

67
00:03:43.009 --> 00:03:46.003
from the array or anything else.

68
00:03:46.003 --> 00:03:49.008
This is the name of the template specifically,

69
00:03:49.008 --> 00:03:51.009
and that's where we go.

70
00:03:51.009 --> 00:03:54.003
So let's go ahead and run this application.

71
00:03:54.003 --> 00:03:56.001
We'll go to the main application class,

72
00:03:56.001 --> 00:04:01.002
and just run the main method.

73
00:04:01.002 --> 00:04:03.004
And you'll see that we've started up on port 8080.

74
00:04:03.004 --> 00:04:05.007
So let's open up a web browser,

75
00:04:05.007 --> 00:04:10.007
then we will go to localhost8080/rooms.

76
00:04:10.007 --> 00:04:14.000
And we have now rendered our view

77
00:04:14.000 --> 00:04:16.001
with the expanded elements

78
00:04:16.001 --> 00:04:18.005
based on what we passed into the model.

79
00:04:18.005 --> 00:04:19.008
That's really all there is

80
00:04:19.008 --> 00:04:22.007
to serving dynamic data to a webpage

81
00:04:22.007 --> 00:04:25.000
in a spring boot application.

