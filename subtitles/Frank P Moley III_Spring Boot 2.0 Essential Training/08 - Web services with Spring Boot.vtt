WEBVTT
1
00:00:00.005 --> 00:00:01.004
- [Instructor] Since we are dealing

2
00:00:01.004 --> 00:00:04.000
with the web application, now it's a great time

3
00:00:04.000 --> 00:00:07.008
to talk about web services with Spring.

4
00:00:07.008 --> 00:00:12.008
Spring Boot web services use an MVC implementation.

5
00:00:12.008 --> 00:00:16.008
The pattern is exactly the same as web applications.

6
00:00:16.008 --> 00:00:18.005
But in the case of web services,

7
00:00:18.005 --> 00:00:24.004
the view is the content type of the page, not HTML.

8
00:00:24.004 --> 00:00:27.004
You use RestController instead of Controller

9
00:00:27.004 --> 00:00:30.000
in order to not map to a view.

10
00:00:30.000 --> 00:00:35.000
Instead, an object that has been marshaled is returned.

11
00:00:35.000 --> 00:00:36.007
And once again, you get JSON

12
00:00:36.007 --> 00:00:40.000
as the default output type for the view.

13
00:00:40.000 --> 00:00:44.003
You can add things like XML if you choose to.

14
00:00:44.003 --> 00:00:45.009
Now, I'm going to build off my solution

15
00:00:45.009 --> 00:00:48.000
from the last chapter to make it easier.

16
00:00:48.000 --> 00:00:50.005
But let's take a look at how to build a web service

17
00:00:50.005 --> 00:00:53.005
in our existing application.

18
00:00:53.005 --> 00:00:57.009
In our room-web-app, I want to open up src, main, java,

19
00:00:57.009 --> 00:01:00.001
our default package, and then the controllers.

20
00:01:00.001 --> 00:01:03.006
And we're going to create a new controller.

21
00:01:03.006 --> 00:01:09.001
We're going to call this RoomRestController.

22
00:01:09.001 --> 00:01:14.003
We'll annotate this with @RestController

23
00:01:14.003 --> 00:01:17.003
and @RequestMapping,

24
00:01:17.003 --> 00:01:21.006
slash api, slash rooms.

25
00:01:21.006 --> 00:01:23.008
Now, we want to get an instance of our service,

26
00:01:23.008 --> 00:01:30.002
so private final RoomService.

27
00:01:30.002 --> 00:01:32.005
And this is why I went ahead and added those last time.

28
00:01:32.005 --> 00:01:34.008
'Cause it just makes it easier to use a service,

29
00:01:34.008 --> 00:01:36.008
and then I don't have to recreate static data

30
00:01:36.008 --> 00:01:38.006
and then fix it later.

31
00:01:38.006 --> 00:01:42.009
I'm going to go ahead and generate a constructor with that.

32
00:01:42.009 --> 00:01:45.004
Once again, your ID will have the ability

33
00:01:45.004 --> 00:01:47.004
to generate things like getters, setters,

34
00:01:47.004 --> 00:01:49.005
constructors, two strings.

35
00:01:49.005 --> 00:01:54.000
I'm just doing it with mine using Control, Enter.

36
00:01:54.000 --> 00:01:55.007
So now we need to actually do our methods.

37
00:01:55.007 --> 00:02:00.002
So we're going to do an @GetMapping public List.

38
00:02:00.002 --> 00:02:01.006
And this you'll notice is different.

39
00:02:01.006 --> 00:02:03.006
Instead of returning a string,

40
00:02:03.006 --> 00:02:06.003
I'm going to return a list of rooms.

41
00:02:06.003 --> 00:02:08.002
Call this one getAllRooms,

42
00:02:08.002 --> 00:02:10.007
and we don't pass in any parameters

43
00:02:10.007 --> 00:02:13.009
because I don't need any in order to execute this call.

44
00:02:13.009 --> 00:02:16.000
Let's go ahead and import that room.

45
00:02:16.000 --> 00:02:17.006
Import list.

46
00:02:17.006 --> 00:02:18.008
And we are simply going

47
00:02:18.008 --> 00:02:23.007
to return roomService.getAllRooms.

48
00:02:23.007 --> 00:02:25.006
And that's all there is to it.

49
00:02:25.006 --> 00:02:29.009
Go ahead and start up our web application.

50
00:02:29.009 --> 00:02:31.003
And once it's started up,

51
00:02:31.003 --> 00:02:33.009
I want to jump into a terminal window.

52
00:02:33.009 --> 00:02:36.006
Now, from the terminal window, I'm going to do an HTTP,

53
00:02:36.006 --> 00:02:39.009
which is the HTTPI application that I use.

54
00:02:39.009 --> 00:02:42.009
Again, you can use cURL if you choose to.

55
00:02:42.009 --> 00:02:47.003
I'm going to go against local host, api, rooms.

56
00:02:47.003 --> 00:02:50.004
And you'll see that I've now returned JSON data

57
00:02:50.004 --> 00:02:53.002
that represents those room elements.

58
00:02:53.002 --> 00:02:57.002
And this is all prettified, which is why I like HTTPI.

59
00:02:57.002 --> 00:02:58.001
But if you did a cURL,

60
00:02:58.001 --> 00:02:59.009
most likely, you're just going to see it raw.

61
00:02:59.009 --> 00:03:01.004
And that's okay too.

62
00:03:01.004 --> 00:03:03.002
But you can see that we made the request.

63
00:03:03.002 --> 00:03:06.003
We got a 200 back, and we got JSON elements

64
00:03:06.003 --> 00:03:08.002
based on what we had built.

65
00:03:08.002 --> 00:03:11.009
And really, that's all there is to building a web service

66
00:03:11.009 --> 00:03:13.000
with Spring Boot.

