WEBVTT
1
00:00:00.005 --> 00:00:02.002
- [Instructor] The final topic for this course

2
00:00:02.002 --> 00:00:05.006
is all about creating your own Spring Boot starter,

3
00:00:05.006 --> 00:00:08.008
and really doing so is a multi-step process.

4
00:00:08.008 --> 00:00:10.009
Now, once you've executed it once or twice,

5
00:00:10.009 --> 00:00:13.002
it becomes almost like second nature.

6
00:00:13.002 --> 00:00:14.003
And you actually find yourself

7
00:00:14.003 --> 00:00:16.001
wanting to create more starters

8
00:00:16.001 --> 00:00:18.008
once you realize the power within them,

9
00:00:18.008 --> 00:00:21.002
especially when dealing with cross-cutting concerns

10
00:00:21.002 --> 00:00:23.007
across an organization.

11
00:00:23.007 --> 00:00:25.002
So the first thing you might ask

12
00:00:25.002 --> 00:00:28.000
is why you would want to create your own starter?

13
00:00:28.000 --> 00:00:29.009
And often the answer boils down

14
00:00:29.009 --> 00:00:32.007
to the same reasons that we would implement aspects

15
00:00:32.007 --> 00:00:34.009
in traditional Java applications.

16
00:00:34.009 --> 00:00:39.001
And that has to do with those cross-cutting concerns.

17
00:00:39.001 --> 00:00:43.002
So of course, we'll have some set of common code.

18
00:00:43.002 --> 00:00:46.006
We'll also have some sort of common configuration

19
00:00:46.006 --> 00:00:51.001
which tends to be the default configuration for that code.

20
00:00:51.001 --> 00:00:53.008
By creating this as a Spring Boot starter

21
00:00:53.008 --> 00:00:56.009
for that code as well as the configuration,

22
00:00:56.009 --> 00:00:59.002
we can improve the ease of use.

23
00:00:59.002 --> 00:01:01.001
And by improving the ease of use,

24
00:01:01.001 --> 00:01:02.007
we will see its utilization

25
00:01:02.007 --> 00:01:05.003
increasing across the enterprise.

26
00:01:05.003 --> 00:01:07.007
And that's really what we often want to drive,

27
00:01:07.007 --> 00:01:09.005
is everybody using our library

28
00:01:09.005 --> 00:01:12.008
to execute one function or multiple functions

29
00:01:12.008 --> 00:01:16.008
in the exact same way across all of our applications,

30
00:01:16.008 --> 00:01:20.008
especially in a microservices based architecture.

31
00:01:20.008 --> 00:01:22.001
So the first thing that we need to do

32
00:01:22.001 --> 00:01:25.001
is we need to have a library itself.

33
00:01:25.001 --> 00:01:28.000
Now, when we create a starter project, we're often doing so

34
00:01:28.000 --> 00:01:31.007
because of a business or technical need.

35
00:01:31.007 --> 00:01:35.002
So a need such as logging, or auditing

36
00:01:35.002 --> 00:01:39.000
that has some implication across the entire system.

37
00:01:39.000 --> 00:01:40.009
And we would need to implement that

38
00:01:40.009 --> 00:01:43.002
in each and every one of our projects,

39
00:01:43.002 --> 00:01:45.006
or maybe just a subset of them.

40
00:01:45.006 --> 00:01:47.003
But when we implement them,

41
00:01:47.003 --> 00:01:49.008
we're often doing it in the exact same way,

42
00:01:49.008 --> 00:01:53.007
and then we're configuring it in the exact same way.

43
00:01:53.007 --> 00:01:56.006
So you start off by creating a library

44
00:01:56.006 --> 00:02:00.007
that solves that business or technical need.

45
00:02:00.007 --> 00:02:01.008
Now, part of the key here

46
00:02:01.008 --> 00:02:04.006
is to make sure that you've isolated your code enough

47
00:02:04.006 --> 00:02:06.003
based on its function.

48
00:02:06.003 --> 00:02:10.001
And then you build the library for that function.

49
00:02:10.001 --> 00:02:12.009
You don't want to put too much in one basket either.

50
00:02:12.009 --> 00:02:15.001
So if you've got 20 different business needs,

51
00:02:15.001 --> 00:02:17.006
you may need 20 different libraries,

52
00:02:17.006 --> 00:02:20.000
or you may need a subset of those

53
00:02:20.000 --> 00:02:22.002
based on how often they're used together

54
00:02:22.002 --> 00:02:24.005
or how similar they are.

55
00:02:24.005 --> 00:02:26.008
Really it comes down to knowing your business

56
00:02:26.008 --> 00:02:28.004
and knowing what the domains are

57
00:02:28.004 --> 00:02:30.007
that you've created the code for

58
00:02:30.007 --> 00:02:35.005
helps you to find what size library you need to create.

59
00:02:35.005 --> 00:02:37.001
Now, I want to give you a little bit

60
00:02:37.001 --> 00:02:38.008
of a word of caution here,

61
00:02:38.008 --> 00:02:42.002
and that is to consider your dependencies wisely.

62
00:02:42.002 --> 00:02:45.000
Every dependency that you bring into your project

63
00:02:45.000 --> 00:02:47.001
will then get brought into every project

64
00:02:47.001 --> 00:02:49.004
that consumes your library.

65
00:02:49.004 --> 00:02:52.006
I often like to keep my dependencies as small as possible

66
00:02:52.006 --> 00:02:54.007
when building Spring Boot starters,

67
00:02:54.007 --> 00:02:58.003
and I try to use common componentry wherever I can

68
00:02:58.003 --> 00:03:01.003
so that I don't impact what other people are doing

69
00:03:01.003 --> 00:03:04.000
by simply bringing in the starter.

70
00:03:04.000 --> 00:03:07.006
Because if I decide to use some crazy XML library,

71
00:03:07.006 --> 00:03:10.003
I may break other standard XML parsing

72
00:03:10.003 --> 00:03:14.008
because (indistinct) or something to that effect.

73
00:03:14.008 --> 00:03:16.007
Now once you've written your library,

74
00:03:16.007 --> 00:03:20.007
you're then going to go build an auto configuration module.

75
00:03:20.007 --> 00:03:22.008
Now this can be an optional build,

76
00:03:22.008 --> 00:03:25.001
you actually include your auto-configuration

77
00:03:25.001 --> 00:03:28.009
and your starter in the same project if you choose to.

78
00:03:28.009 --> 00:03:32.003
And that's what Spring Boot auto-configure starter does,

79
00:03:32.003 --> 00:03:35.001
is it brings both of them in at the same time.

80
00:03:35.001 --> 00:03:36.006
So you can include it in the starter

81
00:03:36.006 --> 00:03:41.001
or you can make it isolated, it's totally up to you.

82
00:03:41.001 --> 00:03:43.005
One thing to note is that it should not be included

83
00:03:43.005 --> 00:03:45.003
in your library.

84
00:03:45.003 --> 00:03:47.002
Your library should be able to be used

85
00:03:47.002 --> 00:03:50.003
with or without Spring Boot as it is.

86
00:03:50.003 --> 00:03:52.007
But your auto-configuration module

87
00:03:52.007 --> 00:03:55.003
should include your library as a dependency,

88
00:03:55.003 --> 00:03:57.009
so you don't have to bring both of them in

89
00:03:57.009 --> 00:04:01.002
via your dependency management system.

90
00:04:01.002 --> 00:04:03.009
Now you're going to create all of your configuration

91
00:04:03.009 --> 00:04:06.001
and all of the configuration properties

92
00:04:06.001 --> 00:04:10.004
that you need for this auto-configuration module.

93
00:04:10.004 --> 00:04:12.003
And finally, you're going to contain

94
00:04:12.003 --> 00:04:16.002
all of your spring.factories files in the META-INF directory

95
00:04:16.002 --> 00:04:18.008
that points to your auto-configuration,

96
00:04:18.008 --> 00:04:21.008
and that's how Spring Boot is going to load them.

97
00:04:21.008 --> 00:04:24.009
Now, the final step is once you have your module done,

98
00:04:24.009 --> 00:04:28.008
you're then ready to build the actual starter.

99
00:04:28.008 --> 00:04:31.000
And really traditionally, the starter module

100
00:04:31.000 --> 00:04:34.004
is nothing more than an empty jar file.

101
00:04:34.004 --> 00:04:37.006
It has a dependency on the auto-configuration module

102
00:04:37.006 --> 00:04:42.003
and the library and any other dependency that you may need,

103
00:04:42.003 --> 00:04:45.004
which can include other starter files.

104
00:04:45.004 --> 00:04:48.009
If you go through a lot of what the spring starters have,

105
00:04:48.009 --> 00:04:51.003
they include other starters as well.

106
00:04:51.003 --> 00:04:53.005
And we saw that, for instance, with web starter

107
00:04:53.005 --> 00:04:56.000
because it brought in the Tomcat starter

108
00:04:56.000 --> 00:04:58.001
as well as the logging starter.

109
00:04:58.001 --> 00:05:00.006
So it's really a common pattern for a starter

110
00:05:00.006 --> 00:05:03.008
to include other starter projects.

111
00:05:03.008 --> 00:05:06.003
Now we're not going to go into detail of building one of these,

112
00:05:06.003 --> 00:05:08.008
I just wanted you to know that this is available

113
00:05:08.008 --> 00:05:10.009
and if you find yourself in a situation

114
00:05:10.009 --> 00:05:13.001
where you want to create your own Spring Boot starter,

115
00:05:13.001 --> 00:05:15.003
I encourage you to read the Spring doc

116
00:05:15.003 --> 00:05:19.000
because it's very well written around this topic.

