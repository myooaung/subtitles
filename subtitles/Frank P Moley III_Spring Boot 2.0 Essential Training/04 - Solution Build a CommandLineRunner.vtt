WEBVTT
1
00:00:00.000 --> 00:00:07.001
(upbeat music)

2
00:00:07.001 --> 00:00:09.000
- [Instructor] Now it's time for my solution

3
00:00:09.000 --> 00:00:11.008
to this challenge.

4
00:00:11.008 --> 00:00:13.000
In order to solve this challenge

5
00:00:13.000 --> 00:00:16.006
I created a new module called fizz-buzz.

6
00:00:16.006 --> 00:00:17.007
And what's in that module,

7
00:00:17.007 --> 00:00:21.003
I actually implemented one method.

8
00:00:21.003 --> 00:00:23.009
In the application I created a beam

9
00:00:23.009 --> 00:00:26.003
of type command line runner,

10
00:00:26.003 --> 00:00:27.008
and just like we did before,

11
00:00:27.008 --> 00:00:29.004
when we walked through it together,

12
00:00:29.004 --> 00:00:31.002
I simply returned the ads.

13
00:00:31.002 --> 00:00:34.001
Now within there, I created a four loop.

14
00:00:34.001 --> 00:00:38.002
So I did four, one less than one on one

15
00:00:38.002 --> 00:00:39.008
and increment every time.

16
00:00:39.008 --> 00:00:43.000
I set the result of my string equal to blank.

17
00:00:43.000 --> 00:00:46.005
Then I added to it if there was modular three

18
00:00:46.005 --> 00:00:48.004
and that equals zero, I did fizz.

19
00:00:48.004 --> 00:00:51.006
If it was modular five, I added buzz.

20
00:00:51.006 --> 00:00:54.000
This way, if it's divisible by three, but not five,

21
00:00:54.000 --> 00:00:55.001
I get fizz.

22
00:00:55.001 --> 00:00:58.004
If it's divisible by five and not three, I get buzz.

23
00:00:58.004 --> 00:01:01.004
And if it's divisible by both, I get fizz-buzz.

24
00:01:01.004 --> 00:01:03.007
Now, if it's neither of those,

25
00:01:03.007 --> 00:01:07.003
you'll see on line 22 then that if the result is not empty,

26
00:01:07.003 --> 00:01:10.004
print the result otherwise print the number.

27
00:01:10.004 --> 00:01:12.009
And this way I get one to one hundred

28
00:01:12.009 --> 00:01:14.009
with fizz-buzz replicated.

29
00:01:14.009 --> 00:01:18.001
This is about the quickest way I've seen this done in Java

30
00:01:18.001 --> 00:01:20.008
and using Spring to show that you know

31
00:01:20.008 --> 00:01:22.008
how beams at least work,

32
00:01:22.008 --> 00:01:25.003
and that you understand some of the common interfaces

33
00:01:25.003 --> 00:01:26.006
within Spring.

34
00:01:26.006 --> 00:01:27.007
So file this one away.

35
00:01:27.007 --> 00:01:29.009
You may see it on an interview someday.

36
00:01:29.009 --> 00:01:31.009
It really is kind of a fun thing to do

37
00:01:31.009 --> 00:01:34.000
if you actually change the values

38
00:01:34.000 --> 00:01:36.009
and increase the scope of the problem set.

39
00:01:36.009 --> 00:01:38.004
It's kind of fun to figure out how to do

40
00:01:38.004 --> 00:01:42.000
some of this stuff with in different languages

41
00:01:42.000 --> 00:01:45.000
especially different frameworks within those languages.

