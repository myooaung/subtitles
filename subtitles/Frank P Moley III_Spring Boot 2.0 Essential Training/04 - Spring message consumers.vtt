WEBVTT
1
00:00:00.005 --> 00:00:02.006
- [Instructor] We'll start our journey of async messaging

2
00:00:02.006 --> 00:00:07.007
by creating a consumer and getting Rabbit up and running.

3
00:00:07.007 --> 00:00:08.007
So the first thing we need to do

4
00:00:08.007 --> 00:00:10.000
is get Rabbit up and running.

5
00:00:10.000 --> 00:00:11.002
And in the bin directory,

6
00:00:11.002 --> 00:00:15.003
once again, I have set a startup script that you can use.

7
00:00:15.003 --> 00:00:18.004
So let's do this start_rabbit.

8
00:00:18.004 --> 00:00:21.005
Again, this applies to bash-based systems.

9
00:00:21.005 --> 00:00:24.008
So now that Rabbit's up and running, let's go to our IDE.

10
00:00:24.008 --> 00:00:28.006
Let's open up the pom file and our room cleaner app,

11
00:00:28.006 --> 00:00:32.000
and let's add a dependency,

12
00:00:32.000 --> 00:00:38.004
and this one is going to be spring-boot-starter-amqp.

13
00:00:38.004 --> 00:00:42.000
That comes from org.springframework.

14
00:00:42.000 --> 00:00:44.008
We will import that.

15
00:00:44.008 --> 00:00:48.000
Now let's go to src, main, java,

16
00:00:48.000 --> 00:00:52.004
and our base package, and let's create a new package,

17
00:00:52.004 --> 00:00:55.007
and we will simply call this async.

18
00:00:55.007 --> 00:01:00.001
Now, in that package, let's create a new Java class.

19
00:01:00.001 --> 00:01:08.005
This one is going to be called AsyncPayload.

20
00:01:08.005 --> 00:01:15.003
It's going to have two attributes, so an id

21
00:01:15.003 --> 00:01:16.003
and a model.

22
00:01:16.003 --> 00:01:21.003
Let's put getters and setters on there.

23
00:01:21.003 --> 00:01:23.004
Excellent.

24
00:01:23.004 --> 00:01:27.002
Now let's create another Java class.

25
00:01:27.002 --> 00:01:33.003
This one, we will call RoomCleanerListener.

26
00:01:33.003 --> 00:01:37.002
Let's annotate this one with @Component.

27
00:01:37.002 --> 00:01:46.007
We're going to put a private_static Logger

28
00:01:46.007 --> 00:01:53.000
using the LoggerFactory.getLogger.

29
00:01:53.000 --> 00:01:54.008
We're also going to bring a couple values in

30
00:01:54.008 --> 00:01:56.007
from the application context.

31
00:01:56.007 --> 00:02:03.009
So we need to get an ObjectMapper,

32
00:02:03.009 --> 00:02:07.006
and we need to get a handle to our RoomService.

33
00:02:07.006 --> 00:02:09.009
Import to ObjectMapper.

34
00:02:09.009 --> 00:02:14.000
Let's build a constructor that takes both of those in.

35
00:02:14.000 --> 00:02:17.002
Okay, we're going to create one method on this class.

36
00:02:17.002 --> 00:02:20.000
We're going to call it receiveMessage.

37
00:02:20.000 --> 00:02:24.008
It is going to take a string version of the message.

38
00:02:24.008 --> 00:02:30.000
And we'll wrap this with a try-catch block,

39
00:02:30.000 --> 00:02:34.000
take our AsyncPayload.

40
00:02:34.000 --> 00:02:36.008
We'll get the mapper and read a value.

41
00:02:36.008 --> 00:02:39.000
So this is expecting that our string message

42
00:02:39.000 --> 00:02:48.003
is in JSON format using the AsyncPayload as a model.

43
00:02:48.003 --> 00:02:55.000
Now, this will complain because of a JSON parse exception,

44
00:02:55.000 --> 00:02:59.002
so we will simply catch a JsonProcessingException,

45
00:02:59.002 --> 00:03:03.006
and for now, we'll just printStackTrace.

46
00:03:03.006 --> 00:03:06.001
Let's come back up here under the try block.

47
00:03:06.001 --> 00:03:06.009
The first thing I want to do

48
00:03:06.009 --> 00:03:10.001
is I want to make sure that this message is for us.

49
00:03:10.001 --> 00:03:13.007
So if ROOM.equals

50
00:03:13.007 --> 00:03:17.008
payload.getModel,

51
00:03:17.008 --> 00:03:21.009
so if it's a ROOM type, then we would do some work.

52
00:03:21.009 --> 00:03:24.001
And the work that we're going to do

53
00:03:24.001 --> 00:03:27.006
is we're going to get a handle to our Room itself,

54
00:03:27.006 --> 00:03:30.001
so we're going to use the roomService,

55
00:03:30.001 --> 00:03:34.007
and we want to getById

56
00:03:34.007 --> 00:03:38.002
payload.getId,

57
00:03:38.002 --> 00:03:39.005
and finish that up.

58
00:03:39.005 --> 00:03:43.000
Now, you notice that we haven't implemented this method yet,

59
00:03:43.000 --> 00:03:44.005
and that's fine.

60
00:03:44.005 --> 00:03:48.006
Go ahead and jump over into that class by creating a method.

61
00:03:48.006 --> 00:03:50.009
All we need to do here

62
00:03:50.009 --> 00:03:58.000
is return roomRepository.findById

63
00:03:58.000 --> 00:04:02.005
and pass it our id.

64
00:04:02.005 --> 00:04:05.000
Now, you look here. This is an optional value.

65
00:04:05.000 --> 00:04:06.002
Now, because it's optional,

66
00:04:06.002 --> 00:04:08.004
all I'm going to do is do a get on it.

67
00:04:08.004 --> 00:04:09.008
Technically, I should check that,

68
00:04:09.008 --> 00:04:12.002
but for the purposes of this, we'll be fine.

69
00:04:12.002 --> 00:04:15.008
So let's jump back to our listener.

70
00:04:15.008 --> 00:04:19.007
We still need to import a room, so let's do that.

71
00:04:19.007 --> 00:04:23.003
And now we're simply going to do a log statement here.

72
00:04:23.003 --> 00:04:27.002
So ROOM

73
00:04:27.002 --> 00:04:30.005
needs to be cleaned,

74
00:04:30.005 --> 00:04:33.007
and we need to pass it

75
00:04:33.007 --> 00:04:37.001
room.getNumber,

76
00:04:37.001 --> 00:04:41.000
room.getName.

77
00:04:41.000 --> 00:04:44.006
And we'll go ahead and put an else in here,

78
00:04:44.006 --> 00:04:50.007
and we will log a warning message.

79
00:04:50.007 --> 00:04:53.000
All right, that's up and running.

80
00:04:53.000 --> 00:04:54.009
So now we need to build a config.

81
00:04:54.009 --> 00:04:59.002
So let's go back up into our config folders.

82
00:04:59.002 --> 00:05:02.009
Let's create a new class,

83
00:05:02.009 --> 00:05:10.004
and we will simply call this one AsyncConfig,

84
00:05:10.004 --> 00:05:12.002
annotate with @Configuration,

85
00:05:12.002 --> 00:05:14.004
and we've got a few things to do here.

86
00:05:14.004 --> 00:05:18.009
So, first of all,

87
00:05:18.009 --> 00:05:21.009
set our QUEUE_NAME

88
00:05:21.009 --> 00:05:28.005
equal to room-cleaner

89
00:05:28.005 --> 00:05:31.009
and our EXCHANGE_NAME

90
00:05:31.009 --> 00:05:34.005
equal to operations.

91
00:05:34.005 --> 00:05:36.001
Now let's define some beans.

92
00:05:36.001 --> 00:05:40.008
The first bean that we're going to define is of type Queue,

93
00:05:40.008 --> 00:05:47.008
and you want to get it from amqp core.

94
00:05:47.008 --> 00:05:50.008
And we will simply return a new Queue

95
00:05:50.008 --> 00:05:57.006
with a QUEUE_NAME and false.

96
00:05:57.006 --> 00:06:00.009
Now let's do another bean.

97
00:06:00.009 --> 00:06:06.003
This one is going to be a TopicExchange.

98
00:06:06.003 --> 00:06:11.008
And this time, we'll return a new TopicExchange

99
00:06:11.008 --> 00:06:15.006
using our EXCHANGE_NAME.

100
00:06:15.006 --> 00:06:18.008
Put those parentheses in there that I forgot.

101
00:06:18.008 --> 00:06:25.005
Now we're going to create a binding bean.

102
00:06:25.005 --> 00:06:30.000
We will send in our Queue

103
00:06:30.000 --> 00:06:36.009
and our TopicExchange.

104
00:06:36.009 --> 00:06:43.003
And we will return a BindingBuilder.bind the queue

105
00:06:43.003 --> 00:06:48.003
to the exchange

106
00:06:48.003 --> 00:06:54.008
with a routing key of landon.rooms.cleaner.

107
00:06:54.008 --> 00:06:57.004
Go ahead and import that in.

108
00:06:57.004 --> 00:07:02.000
Couple more beans to go.

109
00:07:02.000 --> 00:07:06.009
I'm going to create a MessageListenerAdapter,

110
00:07:06.009 --> 00:07:18.002
and we will pass this a RoomCleanerListener.

111
00:07:18.002 --> 00:07:21.005
And we pass it the method that we wanted to call,

112
00:07:21.005 --> 00:07:25.005
which we named receiveMessage.

113
00:07:25.005 --> 00:07:26.007
Now, for our final bean here,

114
00:07:26.007 --> 00:07:29.002
I'm going to reduce the side trace.

115
00:07:29.002 --> 00:07:34.006
We have a little bit more real estate.

116
00:07:34.006 --> 00:07:38.005
We're going to create a SimpleMessageListenerContainer

117
00:07:38.005 --> 00:07:41.002
called container,

118
00:07:41.002 --> 00:07:45.003
and that is going to take a ConnectionFactory

119
00:07:45.003 --> 00:07:50.006
from Rabbit itself,

120
00:07:50.006 --> 00:07:56.004
and it is going to take our MessageListenerAdapter.

121
00:07:56.004 --> 00:07:58.005
Now, in here, we need to create

122
00:07:58.005 --> 00:08:06.005
a SimpleMessageListenerContainer.

123
00:08:06.005 --> 00:08:10.003
And then we need to take that container

124
00:08:10.003 --> 00:08:11.009
and set the Connection Factory

125
00:08:11.009 --> 00:08:15.003
equal to our ConnectionFactory,

126
00:08:15.003 --> 00:08:19.000
and we need to set the Queue Name

127
00:08:19.000 --> 00:08:22.002
equal to our QUEUE_NAME text,

128
00:08:22.002 --> 00:08:27.006
and then we need to set the Message Listener

129
00:08:27.006 --> 00:08:31.001
to the listenerAdapter,

130
00:08:31.001 --> 00:08:34.006
and then we will return our container.

131
00:08:34.006 --> 00:08:36.008
Now, the next we do, we're actually going to use this.

132
00:08:36.008 --> 00:08:39.009
This was just to get everything set up on the listener side.

133
00:08:39.009 --> 00:08:42.002
You can test this however.

134
00:08:42.002 --> 00:08:43.009
If you want to start your app,

135
00:08:43.009 --> 00:08:46.003
you can go in and create a message

136
00:08:46.003 --> 00:08:48.006
by going to the Rabbit host.

137
00:08:48.006 --> 00:08:50.005
Let's go ahead and do that real quick.

138
00:08:50.005 --> 00:08:56.003
Let me start up this application.

139
00:08:56.003 --> 00:08:58.006
Make sure everything starts up.

140
00:08:58.006 --> 00:09:00.009
Let's go to a web browser.

141
00:09:00.009 --> 00:09:08.002
In the web browser, let's go to localhost:15672.

142
00:09:08.002 --> 00:09:11.009
You'll see it represented with a RabbitMQ dashboard.

143
00:09:11.009 --> 00:09:15.002
Type in guest and guest.

144
00:09:15.002 --> 00:09:16.002
Go to Queues,

145
00:09:16.002 --> 00:09:18.000
and you'll see that the queue is already registered

146
00:09:18.000 --> 00:09:20.000
'cause we got a listener running,

147
00:09:20.000 --> 00:09:22.007
so let's go into that.

148
00:09:22.007 --> 00:09:26.007
We can publish a message.

149
00:09:26.007 --> 00:09:32.002
We want to set content other type

150
00:09:32.002 --> 00:09:35.008
equal to text/plain.

151
00:09:35.008 --> 00:09:39.000
And then the payload to the message we want to do,

152
00:09:39.000 --> 00:09:41.000
it's got to be in JSON.

153
00:09:41.000 --> 00:09:45.007
So we'll set the id equal to 25

154
00:09:45.007 --> 00:09:48.001
and the model

155
00:09:48.001 --> 00:09:50.008
equal to ROOM,

156
00:09:50.008 --> 00:09:53.004
close up that curly brace,

157
00:09:53.004 --> 00:09:56.004
and now I can publish the message on the queue,

158
00:09:56.004 --> 00:09:57.006
and it tells me that.

159
00:09:57.006 --> 00:09:59.009
Let's go back to our running application,

160
00:09:59.009 --> 00:10:02.002
and you'll see in the Console up here,

161
00:10:02.002 --> 00:10:05.002
the last line says that it needs to be cleaned.

162
00:10:05.002 --> 00:10:07.000
So what we've done is we put a message on a queue.

163
00:10:07.000 --> 00:10:07.008
It's been received,

164
00:10:07.008 --> 00:10:10.003
so we know we've got the listener up and running,

165
00:10:10.003 --> 00:10:12.000
now let's go create the producer.

