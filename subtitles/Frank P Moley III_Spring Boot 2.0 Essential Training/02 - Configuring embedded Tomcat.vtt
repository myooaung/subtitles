WEBVTT
1
00:00:00.005 --> 00:00:01.007
- [Instructor] One of the biggest concerns

2
00:00:01.007 --> 00:00:03.006
that some organizations have when moving

3
00:00:03.006 --> 00:00:05.008
to Spring Boot is how do they configure

4
00:00:05.008 --> 00:00:09.004
the servlet container that their application is running in.

5
00:00:09.004 --> 00:00:11.008
Many of them have specific requirements on how

6
00:00:11.008 --> 00:00:15.006
communications are to operate over a web enabled network.

7
00:00:15.006 --> 00:00:18.000
And as such configuring Tomcat is critical

8
00:00:18.000 --> 00:00:21.007
in moving into the Spring Boot world.

9
00:00:21.007 --> 00:00:23.006
Now, one of the areas that you can configure is

10
00:00:23.006 --> 00:00:27.000
in the servlets, filters, and listeners themselves.

11
00:00:27.000 --> 00:00:30.002
Now by default Spring Boot will give you a servlet

12
00:00:30.002 --> 00:00:32.006
that responds at the context route

13
00:00:32.006 --> 00:00:35.001
and is auto configured with many of the defaults

14
00:00:35.001 --> 00:00:36.008
that we've come to love.

15
00:00:36.008 --> 00:00:40.002
At least those of us that use Spring Boot a lot.

16
00:00:40.002 --> 00:00:43.000
That being said, if you want to add your own servlet,

17
00:00:43.000 --> 00:00:45.005
or your own filter, or your own listeners

18
00:00:45.005 --> 00:00:47.008
then there's a very simple way to do that.

19
00:00:47.008 --> 00:00:49.009
And that's to configure the servlets, filters,

20
00:00:49.009 --> 00:00:52.002
and listeners as beans.

21
00:00:52.002 --> 00:00:54.002
Now, you can do that in one of two ways.

22
00:00:54.002 --> 00:00:57.000
The first is to go into one of your configuration classes

23
00:00:57.000 --> 00:00:59.007
or create one and annotate a method

24
00:00:59.007 --> 00:01:03.004
with at bean that serves one of these objects.

25
00:01:03.004 --> 00:01:06.005
The other way is to annotate the actual class file

26
00:01:06.005 --> 00:01:10.006
with that web servlet, at web filter, or at web listener,

27
00:01:10.006 --> 00:01:13.008
depending on the use, and allow it to be component scanned

28
00:01:13.008 --> 00:01:16.005
and put into the embedded container.

29
00:01:16.005 --> 00:01:17.005
And this is a great time

30
00:01:17.005 --> 00:01:20.006
for me to mention that's the Spring Boot application,

31
00:01:20.006 --> 00:01:22.004
at least a web enabled one,

32
00:01:22.004 --> 00:01:25.007
you actually have several application contexts.

33
00:01:25.007 --> 00:01:30.000
One of which is specific to the embedded Tomcat itself.

34
00:01:30.000 --> 00:01:32.003
Spring Boot knows that these types of objects,

35
00:01:32.003 --> 00:01:34.003
servlets, filters, and listeners

36
00:01:34.003 --> 00:01:37.006
belong in the embedded container.

37
00:01:37.006 --> 00:01:38.008
In addition, if you want to create

38
00:01:38.008 --> 00:01:41.002
a separate servlet context,

39
00:01:41.002 --> 00:01:44.009
you can do that using the ServletContextInitializer.

40
00:01:44.009 --> 00:01:46.007
But none of that is very common

41
00:01:46.007 --> 00:01:49.009
other than the filters use for security purposes.

42
00:01:49.009 --> 00:01:51.006
And there's a much better way to do that

43
00:01:51.006 --> 00:01:53.008
with Spring security.

44
00:01:53.008 --> 00:01:57.000
The easiest way to configure your embedded Tomcat

45
00:01:57.000 --> 00:01:58.007
is through the use of properties.

46
00:01:58.007 --> 00:02:00.005
And indeed, we've already been doing that

47
00:02:00.005 --> 00:02:03.002
through the server.port property.

48
00:02:03.002 --> 00:02:04.009
Now there's lots of properties

49
00:02:04.009 --> 00:02:07.001
for dealing with the server itself,

50
00:02:07.001 --> 00:02:09.001
such as the address that it's bound to,

51
00:02:09.001 --> 00:02:12.004
the port, and the default context path.

52
00:02:12.004 --> 00:02:14.009
But you also have access to the way that session

53
00:02:14.009 --> 00:02:16.009
is managed through cookies, time-outs,

54
00:02:16.009 --> 00:02:19.006
persistence of those sessions.

55
00:02:19.006 --> 00:02:23.008
All of that can be configured through properties.

56
00:02:23.008 --> 00:02:25.005
The default error page,

57
00:02:25.005 --> 00:02:27.005
and I'm not talking about the web error page.

58
00:02:27.005 --> 00:02:29.008
The server error page can be configured

59
00:02:29.008 --> 00:02:32.004
through properties as well.

60
00:02:32.004 --> 00:02:36.009
Now a full list of these properties is actually in the code.

61
00:02:36.009 --> 00:02:37.007
If you go to

62
00:02:37.007 --> 00:02:44.004
orb.springframework.boot.autoconfigure.web.serverproperties.

63
00:02:44.004 --> 00:02:46.007
That class actually is a placeholder

64
00:02:46.007 --> 00:02:49.008
for all of the property files that you can set

65
00:02:49.008 --> 00:02:54.002
and you can take a look at them and see what you can modify.

66
00:02:54.002 --> 00:02:56.008
Compression is another very common thing that

67
00:02:56.008 --> 00:03:02.001
people want to modify on a default Spring Boot application.

68
00:03:02.001 --> 00:03:04.003
You can easily turn compression on

69
00:03:04.003 --> 00:03:08.003
by using the server.compression.enabled property

70
00:03:08.003 --> 00:03:11.001
and set its value to true.

71
00:03:11.001 --> 00:03:15.005
By default all response types that are 2,048 bytes

72
00:03:15.005 --> 00:03:20.006
or more will be compressed if this property is set to true.

73
00:03:20.006 --> 00:03:23.004
But of course, there's a property that you can use

74
00:03:23.004 --> 00:03:27.002
to modify that value.

75
00:03:27.002 --> 00:03:29.008
Also by default there's four MIME types

76
00:03:29.008 --> 00:03:32.008
that will be compressed if they exceed this limit.

77
00:03:32.008 --> 00:03:38.002
Text/html, text/xml, text/plain, and text/css

78
00:03:38.002 --> 00:03:41.004
are the default MIME types to be compressed.

79
00:03:41.004 --> 00:03:44.003
If you want to compress other ones, guess what?

80
00:03:44.003 --> 00:03:47.001
There's a property for that as well.

81
00:03:47.001 --> 00:03:49.009
Now, by and large, the single most common way

82
00:03:49.009 --> 00:03:52.007
to change the embedded servlet container

83
00:03:52.007 --> 00:03:58.000
is to migrate it from a standard HTTP to a TLS flavor.

84
00:03:58.000 --> 00:04:00.006
This is actually a requirement for many shops

85
00:04:00.006 --> 00:04:03.006
for all web traffic that they leverage TLS

86
00:04:03.006 --> 00:04:05.001
and rightfully so.

87
00:04:05.001 --> 00:04:06.003
At this point in time,

88
00:04:06.003 --> 00:04:09.003
everything should be encrypted over the internet.

89
00:04:09.003 --> 00:04:11.003
Now there is native support via,

90
00:04:11.003 --> 00:04:14.000
as you might guess, property management.

91
00:04:14.000 --> 00:04:15.009
And as I said this is the most common

92
00:04:15.009 --> 00:04:18.004
embedded servlet change.

93
00:04:18.004 --> 00:04:19.004
Now, one thing to note,

94
00:04:19.004 --> 00:04:21.009
this requires a keystore to be available

95
00:04:21.009 --> 00:04:24.005
to your application.

96
00:04:24.005 --> 00:04:27.003
As such it also means that there's going to be a password

97
00:04:27.003 --> 00:04:30.002
for the keystore, and it has to be available

98
00:04:30.002 --> 00:04:33.009
to your application via properties or environment variables.

99
00:04:33.009 --> 00:04:35.005
So if you don't have something

100
00:04:35.005 --> 00:04:37.002
like a secret manager that connects

101
00:04:37.002 --> 00:04:41.003
to your runtime used for storing all of your credentials

102
00:04:41.003 --> 00:04:43.001
any developer that has access

103
00:04:43.001 --> 00:04:44.005
to your source control management

104
00:04:44.005 --> 00:04:47.001
or SCM potentially has access

105
00:04:47.001 --> 00:04:49.007
to all of the contents of the keystore.

106
00:04:49.007 --> 00:04:53.005
So be very careful when dealing with those passwords.

107
00:04:53.005 --> 00:04:56.001
The spring website has lots of demos around all

108
00:04:56.001 --> 00:04:59.007
of these topics and it's really very good documentation.

109
00:04:59.007 --> 00:05:01.002
So if any of these fits your needs

110
00:05:01.002 --> 00:05:03.008
and you need more specifics on how to do them

111
00:05:03.008 --> 00:05:06.000
I suggest that you go and dig in there.

