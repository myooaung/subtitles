WEBVTT
1
00:00:00.006 --> 00:00:03.003
- [Instructor] In today's world of containerization,

2
00:00:03.003 --> 00:00:05.007
Docker images are one of the most common

3
00:00:05.007 --> 00:00:08.000
build patterns for applications,

4
00:00:08.000 --> 00:00:12.003
and Spring Boot based applications are no different.

5
00:00:12.003 --> 00:00:14.004
Building a Docker image with Spring Boot

6
00:00:14.004 --> 00:00:16.009
is another one of those freebies you get

7
00:00:16.009 --> 00:00:19.001
from the Spring initializer.

8
00:00:19.001 --> 00:00:22.002
The build script, depending on your dependency management

9
00:00:22.002 --> 00:00:24.001
and build system of choice,

10
00:00:24.001 --> 00:00:27.002
provides a path to build an image.

11
00:00:27.002 --> 00:00:28.004
For Maven,

12
00:00:28.004 --> 00:00:31.001
you simply use the Spring Boot plugin

13
00:00:31.001 --> 00:00:34.006
with the build hyphen image goal.

14
00:00:34.006 --> 00:00:38.009
For Gradle, you can use the boot build image argument

15
00:00:38.009 --> 00:00:42.002
for the build command itself.

16
00:00:42.002 --> 00:00:45.000
As with any application framework or technology,

17
00:00:45.000 --> 00:00:47.000
you can always build a Dockerfile

18
00:00:47.000 --> 00:00:49.004
and control the actual life cycle

19
00:00:49.004 --> 00:00:51.004
of the Docker build process,

20
00:00:51.004 --> 00:00:54.004
which we will do together here in a moment.

21
00:00:54.004 --> 00:00:56.000
Now there are several reasons for doing this,

22
00:00:56.000 --> 00:00:59.002
but the primary reason is more control.

23
00:00:59.002 --> 00:01:01.003
You have control over how and what

24
00:01:01.003 --> 00:01:03.007
you put into your final image.

25
00:01:03.007 --> 00:01:06.008
You get control over the entire image life cycle,

26
00:01:06.008 --> 00:01:08.008
including building and testing,

27
00:01:08.008 --> 00:01:10.009
which sometimes you'll want to run in parallel,

28
00:01:10.009 --> 00:01:13.000
especially if you have to build

29
00:01:13.000 --> 00:01:17.007
many, many images as part of your CI/CD pipeline.

30
00:01:17.007 --> 00:01:20.008
This also gives you an opportunity for smaller images,

31
00:01:20.008 --> 00:01:23.001
which goes back to control.

32
00:01:23.001 --> 00:01:24.002
By only including

33
00:01:24.002 --> 00:01:27.001
the output of the build in the final image,

34
00:01:27.001 --> 00:01:30.005
you have a chance to reduce the size of your total image.

35
00:01:30.005 --> 00:01:34.005
In addition, your final image only needs the JRE,

36
00:01:34.005 --> 00:01:38.007
not the full JDK, nor does it need Maven or Gradle.

37
00:01:38.007 --> 00:01:41.000
So obviously it's going to be a smaller image

38
00:01:41.000 --> 00:01:43.005
from that perspective.

39
00:01:43.005 --> 00:01:46.005
Now, one of the primary reasons that I choose to do this

40
00:01:46.005 --> 00:01:49.009
is for full control over the base images.

41
00:01:49.009 --> 00:01:53.008
Oftentimes, you build security approved images

42
00:01:53.008 --> 00:01:58.001
and use them across your entire suite of applications.

43
00:01:58.001 --> 00:02:00.002
By building your own Dockerfile,

44
00:02:00.002 --> 00:02:02.000
you get this level of control

45
00:02:02.000 --> 00:02:05.007
because you set the base image.

46
00:02:05.007 --> 00:02:09.002
So let's start by creating our own Dockerfile.

47
00:02:09.002 --> 00:02:11.000
In our booting web directory,

48
00:02:11.000 --> 00:02:14.006
I want you to create a new file.

49
00:02:14.006 --> 00:02:17.000
We're going to call that file Dockerfile.

50
00:02:17.000 --> 00:02:18.002
Now this is the default.

51
00:02:18.002 --> 00:02:19.009
You don't have to choose that,

52
00:02:19.009 --> 00:02:20.009
but if you don't choose it,

53
00:02:20.009 --> 00:02:24.005
you have to pass it to the build argument.

54
00:02:24.005 --> 00:02:26.005
Now in our Dockerfile,

55
00:02:26.005 --> 00:02:27.003
the first thing that we need to do

56
00:02:27.003 --> 00:02:29.003
is we need to do a from command,

57
00:02:29.003 --> 00:02:32.003
and we're going to use a Maven image because we need Maven,

58
00:02:32.003 --> 00:02:40.002
and I don't really want to install it as part of this.

59
00:02:40.002 --> 00:02:42.007
We're going to create a builder based on this.

60
00:02:42.007 --> 00:02:45.003
Again, this is kind of the benefit of controlling this.

61
00:02:45.003 --> 00:02:48.001
I don't care how big this image is really,

62
00:02:48.001 --> 00:02:51.007
because I'm not going to ship this to production.

63
00:02:51.007 --> 00:02:53.001
Now I'm going to set an argument here,

64
00:02:53.001 --> 00:02:54.008
and this is just a standard practice

65
00:02:54.008 --> 00:02:58.004
that I employ across all of my builds.

66
00:02:58.004 --> 00:03:01.008
This allows me to have control over version changes

67
00:03:01.008 --> 00:03:05.008
in one place instead of multiple, if it applies.

68
00:03:05.008 --> 00:03:08.004
In this case, it's not really going to make a difference.

69
00:03:08.004 --> 00:03:11.008
It's just how I do things, so I continue here.

70
00:03:11.008 --> 00:03:13.003
Now we're going to set our work there,

71
00:03:13.003 --> 00:03:16.009
and in this case, we're going to call it build.

72
00:03:16.009 --> 00:03:21.002
And we're going to copy from our local directory the POM XML

73
00:03:21.002 --> 00:03:26.000
into the build directory in our image.

74
00:03:26.000 --> 00:03:30.008
Likewise, we're going to copy source into the build directory

75
00:03:30.008 --> 00:03:34.008
as well in a source location.

76
00:03:34.008 --> 00:03:40.003
Now we will run Maven clean package.

77
00:03:40.003 --> 00:03:42.009
Going to do one more thing here to make the next step easier.

78
00:03:42.009 --> 00:03:48.006
I'm going to copy target booting web hyphen.

79
00:03:48.006 --> 00:03:51.009
Now here's where I'm going to use that version value.

80
00:03:51.009 --> 00:03:52.009
Dot jar.

81
00:03:52.009 --> 00:03:54.003
And that's the pattern

82
00:03:54.003 --> 00:03:59.000
that Maven based Spring Boot artifacts build in.

83
00:03:59.000 --> 00:04:01.007
And I'm going to copy it to the same location,

84
00:04:01.007 --> 00:04:06.006
but I'm going to rename it to be application dot jar.

85
00:04:06.006 --> 00:04:09.001
Now I'm going to set up my actual final image.

86
00:04:09.001 --> 00:04:11.008
So this time I will use open JDK,

87
00:04:11.008 --> 00:04:16.008
11 dot 0 dot eight JRE slim.

88
00:04:16.008 --> 00:04:18.001
So I'm going to use a slim version

89
00:04:18.001 --> 00:04:22.006
of the JRE image instead of a JDK.

90
00:04:22.006 --> 00:04:25.003
I'm going to set up a workdir here.

91
00:04:25.003 --> 00:04:27.006
I'm just going to use app.

92
00:04:27.006 --> 00:04:33.004
And now I'm going to copy from the builder

93
00:04:33.004 --> 00:04:42.006
in build target application dot jar to the app directory.

94
00:04:42.006 --> 00:04:47.002
And now I'll set a command of Java hyphen jar

95
00:04:47.002 --> 00:04:51.005
app application dot jar, and that's it.

96
00:04:51.005 --> 00:04:52.008
We're done.

97
00:04:52.008 --> 00:04:55.006
So let's hop over to a terminal.

98
00:04:55.006 --> 00:04:56.004
Now in the terminal,

99
00:04:56.004 --> 00:04:59.007
I want you to go into the directory for booting web,

100
00:04:59.007 --> 00:05:02.000
and you're going to type here

101
00:05:02.000 --> 00:05:07.003
Docker build dash t booting web dot.

102
00:05:07.003 --> 00:05:09.006
So what I'm saying here is build a Docker image

103
00:05:09.006 --> 00:05:11.003
tagged with booting web,

104
00:05:11.003 --> 00:05:13.003
and that'll let us see it running later,

105
00:05:13.003 --> 00:05:15.008
and just build the current Dockerfile.

106
00:05:15.008 --> 00:05:16.007
Now, before I hit enter,

107
00:05:16.007 --> 00:05:18.004
there's two things I want to tell you.

108
00:05:18.004 --> 00:05:19.002
First of all,

109
00:05:19.002 --> 00:05:22.000
there's going to be a lot of output and time that this takes

110
00:05:22.000 --> 00:05:25.002
to build these images, especially if it's your first time.

111
00:05:25.002 --> 00:05:27.002
So I encourage you to read through the output

112
00:05:27.002 --> 00:05:29.001
and understand what's going on.

113
00:05:29.001 --> 00:05:30.003
Second.

114
00:05:30.003 --> 00:05:31.008
This is the last time in this course

115
00:05:31.008 --> 00:05:33.008
that you must use Docker.

116
00:05:33.008 --> 00:05:35.001
The other times that I use it,

117
00:05:35.001 --> 00:05:37.003
you can install the software locally,

118
00:05:37.003 --> 00:05:40.003
if for some reason you don't like using Docker.

119
00:05:40.003 --> 00:05:41.002
I prefer to use it

120
00:05:41.002 --> 00:05:43.005
because it's how I worked every single day.

121
00:05:43.005 --> 00:05:44.004
So with that being said,

122
00:05:44.004 --> 00:05:47.002
let's hit enter and take a look at the data.

123
00:05:47.002 --> 00:05:49.007
Now, your output may look a little bit different,

124
00:05:49.007 --> 00:05:51.006
but take note, if you have an error

125
00:05:51.006 --> 00:05:55.001
that indicates that the jar file could not be found,

126
00:05:55.001 --> 00:05:57.003
that's an artifact of the way that my ID

127
00:05:57.003 --> 00:06:00.005
is different from yours within my operating system.

128
00:06:00.005 --> 00:06:02.002
It's a very easy thing to fix.

129
00:06:02.002 --> 00:06:05.001
Simply run Maven clean package,

130
00:06:05.001 --> 00:06:08.000
allow the package to happen so that the jar is built,

131
00:06:08.000 --> 00:06:10.003
and then rerun your Docker command.

132
00:06:10.003 --> 00:06:12.000
And you should then see outputs

133
00:06:12.000 --> 00:06:14.004
similar to what we have on the screen.

134
00:06:14.004 --> 00:06:15.007
All right, now that we've run,

135
00:06:15.007 --> 00:06:17.006
and your output may look a little bit different

136
00:06:17.006 --> 00:06:20.006
based on what you've done before on your machine.

137
00:06:20.006 --> 00:06:25.008
But in this case, let's run a Docker run dash p.

138
00:06:25.008 --> 00:06:27.002
This is going to expose our port,

139
00:06:27.002 --> 00:06:33.009
so 8,080 is going to map to 8,080 dash d booting web.

140
00:06:33.009 --> 00:06:36.004
And our application is now up and running.

141
00:06:36.004 --> 00:06:39.005
And we can validate that in a web browser.

142
00:06:39.005 --> 00:06:40.008
If you refresh on 8,000,

143
00:06:40.008 --> 00:06:42.001
you'll see that nothing is there

144
00:06:42.001 --> 00:06:43.003
because that's where we're at before.

145
00:06:43.003 --> 00:06:45.003
Let's go to 8,080.

146
00:06:45.003 --> 00:06:48.003
And you'll see that we're now returning data.

147
00:06:48.003 --> 00:06:50.003
One more thing that you can do to take a look at this

148
00:06:50.003 --> 00:06:54.008
is you can run a Docker PS command.

149
00:06:54.008 --> 00:06:55.008
And you will see

150
00:06:55.008 --> 00:06:58.009
that we have an image running called booting web,

151
00:06:58.009 --> 00:07:00.007
and that's what we expected.

152
00:07:00.007 --> 00:07:04.009
Let's go ahead and stop this image by doing a Docker stop.

153
00:07:04.009 --> 00:07:08.003
We'll copy this image ID.

154
00:07:08.003 --> 00:07:12.000
Allow Docker to stop this image.

155
00:07:12.000 --> 00:07:13.008
And we can go back to our web browser

156
00:07:13.008 --> 00:07:15.007
and nothing is received.

157
00:07:15.007 --> 00:07:17.000
That's what is expected.

158
00:07:17.000 --> 00:07:20.000
And we've just built our application using Docker.

