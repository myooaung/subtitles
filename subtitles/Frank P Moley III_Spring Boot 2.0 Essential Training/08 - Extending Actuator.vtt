WEBVTT
1
00:00:00.005 --> 00:00:02.001
- [Tutor] So now we'll take a look at actuator

2
00:00:02.001 --> 00:00:03.007
in Spring boot application,

3
00:00:03.007 --> 00:00:05.005
and how to not only enable it,

4
00:00:05.005 --> 00:00:08.008
but also to extend it.

5
00:00:08.008 --> 00:00:12.000
Let's open up our room-web-app.

6
00:00:12.000 --> 00:00:14.008
Let's go to our pom file,

7
00:00:14.008 --> 00:00:18.002
and we're going to add a dependency.

8
00:00:18.002 --> 00:00:23.002
Spring-boot-starter-actuator.

9
00:00:23.002 --> 00:00:28.008
The group is org.springframework.boot.

10
00:00:28.008 --> 00:00:32.002
Let's run Maven.

11
00:00:32.002 --> 00:00:34.008
So, now we're going to go to source main, resources

12
00:00:34.008 --> 00:00:38.006
and open up our application on properties file.

13
00:00:38.006 --> 00:00:40.004
We want to add a few properties here.

14
00:00:40.004 --> 00:00:42.003
So the first one is

15
00:00:42.003 --> 00:00:49.007
management.endpoints.web.exposure.include.

16
00:00:49.007 --> 00:00:51.002
And we're going to go ahead and include them all

17
00:00:51.002 --> 00:00:52.007
just so we can see them.

18
00:00:52.007 --> 00:00:56.004
Again in the real world, you wouldn't want to do that.

19
00:00:56.004 --> 00:01:01.008
Management.endpoint.health.roles

20
00:01:01.008 --> 00:01:03.006
and this is an important one.

21
00:01:03.006 --> 00:01:05.008
You can define who can see this.

22
00:01:05.008 --> 00:01:07.006
Everybody or specific groups.

23
00:01:07.006 --> 00:01:09.002
We're going to say is the USER role,

24
00:01:09.002 --> 00:01:14.009
'cause that's where our user is, can see this.

25
00:01:14.009 --> 00:01:21.004
And then management details health.show-details,

26
00:01:21.004 --> 00:01:23.006
and we want to set this to when_authorized.

27
00:01:23.006 --> 00:01:25.000
You've got different choices there,

28
00:01:25.000 --> 00:01:27.000
never, always, when_authorized,

29
00:01:27.000 --> 00:01:29.004
we're going to use when_authorized.

30
00:01:29.004 --> 00:01:30.003
And that's it.

31
00:01:30.003 --> 00:01:34.002
Let's go ahead and start up our application.

32
00:01:34.002 --> 00:01:36.008
Now I'm going to do this work in the browser,

33
00:01:36.008 --> 00:01:39.006
instead of in the terminal like I normally do,

34
00:01:39.006 --> 00:01:42.000
and I'm going to show you right here in a moment.

35
00:01:42.000 --> 00:01:49.005
So let's go to localhost 8080/actuator,

36
00:01:49.005 --> 00:01:52.003
and it prompts me for username, password as I would expect.

37
00:01:52.003 --> 00:01:56.003
So user and password are the values we set.

38
00:01:56.003 --> 00:01:57.006
Log in.

39
00:01:57.006 --> 00:01:59.006
So you're seeing we have a whole bunch of data

40
00:01:59.006 --> 00:02:03.001
that populates here from actuator itself.

41
00:02:03.001 --> 00:02:07.004
Let's jump into the health endpoint.

42
00:02:07.004 --> 00:02:09.004
And you'll see that we get a status:UP.

43
00:02:09.004 --> 00:02:12.004
We also get listed in here our components,

44
00:02:12.004 --> 00:02:14.009
and the components that we can see,

45
00:02:14.009 --> 00:02:17.003
are specifically around things like our database,

46
00:02:17.003 --> 00:02:18.005
which is UP.

47
00:02:18.005 --> 00:02:21.003
You'll see that we know that it's a type PostgreSQL

48
00:02:21.003 --> 00:02:23.007
We've got our diskSpace details.

49
00:02:23.007 --> 00:02:25.009
We've got things like ping status,

50
00:02:25.009 --> 00:02:27.004
and you'll see we have rabbit there.

51
00:02:27.004 --> 00:02:30.003
So, both rabbit and PostgreSQL auto config

52
00:02:30.003 --> 00:02:31.009
for the health endpoint.

53
00:02:31.009 --> 00:02:34.000
If we did this with just a web application

54
00:02:34.000 --> 00:02:36.009
without those dependencies, you wouldn't see them.

55
00:02:36.009 --> 00:02:39.006
Those things automatically populate

56
00:02:39.006 --> 00:02:42.008
based on them being on the class path.

57
00:02:42.008 --> 00:02:47.001
Let's also take a look at the env endpoint.

58
00:02:47.001 --> 00:02:48.005
And as you scroll through here,

59
00:02:48.005 --> 00:02:50.006
you're going to see a whole bunch of values

60
00:02:50.006 --> 00:02:54.003
that populate from where things are loaded on the system,

61
00:02:54.003 --> 00:02:56.003
and what values are present.

62
00:02:56.003 --> 00:02:59.002
This can be a very dangerous thing for a bad actor,

63
00:02:59.002 --> 00:03:03.006
so you want to make sure you protect this at the very least.

64
00:03:03.006 --> 00:03:08.001
We also have things like metrics.

65
00:03:08.001 --> 00:03:09.000
And within here,

66
00:03:09.000 --> 00:03:10.007
you can see all the different metrics

67
00:03:10.007 --> 00:03:13.009
that are commonly available for me within the application,

68
00:03:13.009 --> 00:03:17.004
and I can drill down further into them as I wish.

69
00:03:17.004 --> 00:03:20.006
But for now, let's go back to our IDE.

70
00:03:20.006 --> 00:03:21.007
In our IDE,

71
00:03:21.007 --> 00:03:25.007
we're going to create a Custom endpoint.

72
00:03:25.007 --> 00:03:27.007
Now this endpoint isn't going to do a lot,

73
00:03:27.007 --> 00:03:30.006
it's just to show you how to do this.

74
00:03:30.006 --> 00:03:33.006
So, let's create a package,

75
00:03:33.006 --> 00:03:36.006
and we'll call this endpoints.

76
00:03:36.006 --> 00:03:39.006
And in our endpoints package,

77
00:03:39.006 --> 00:03:42.008
we going to create a New Java Class,

78
00:03:42.008 --> 00:03:44.002
and we are going to call this one,

79
00:03:44.002 --> 00:03:48.005
the GreetingEndpoint.

80
00:03:48.005 --> 00:03:52.002
We will annotate this with @Component,

81
00:03:52.002 --> 00:03:54.009
as well as @Endpoint.

82
00:03:54.009 --> 00:03:56.003
And on the @Endpoint,

83
00:03:56.003 --> 00:04:01.000
we want to give it an id, in this case of "greeting."

84
00:04:01.000 --> 00:04:03.006
So this let's us know where under actuator

85
00:04:03.006 --> 00:04:06.006
this Endpoint is going to show up.

86
00:04:06.006 --> 00:04:08.005
Now, we're going to do @ReadOperation,

87
00:04:08.005 --> 00:04:10.008
and there's multiple operations you can choose,

88
00:04:10.008 --> 00:04:14.000
Spring documents them very well.

89
00:04:14.000 --> 00:04:19.004
But we're simply going to return a String called getGreeting.

90
00:04:19.004 --> 00:04:23.007
And as always, whenever we're doing something demo,

91
00:04:23.007 --> 00:04:26.003
we're going to return "Hello world."

92
00:04:26.003 --> 00:04:32.004
But in this case, we'll do "Hello from actuator."

93
00:04:32.004 --> 00:04:37.002
Now, let's restart our application.

94
00:04:37.002 --> 00:04:39.007
Go back to our web browser,

95
00:04:39.007 --> 00:04:43.008
and let's go to actuator/greeting.

96
00:04:43.008 --> 00:04:45.008
Of course, it's going to require me to log in again

97
00:04:45.008 --> 00:04:47.007
because we have a new session,

98
00:04:47.007 --> 00:04:50.004
since we had the restart,

99
00:04:50.004 --> 00:04:52.003
now you'll see that we get this greeting message.

100
00:04:52.003 --> 00:04:54.004
Now, again, this is kind of a dummy example,

101
00:04:54.004 --> 00:04:57.000
it's just to show you what you can do.

102
00:04:57.000 --> 00:04:59.004
There's a lot of times where you're going to have common things

103
00:04:59.004 --> 00:05:02.004
that you need to show across all of your applications.

104
00:05:02.004 --> 00:05:04.001
These can be a great thing to add

105
00:05:04.001 --> 00:05:06.008
to your own starter that brings an actuator.

106
00:05:06.008 --> 00:05:09.001
So instead of you bringing an actuator,

107
00:05:09.001 --> 00:05:10.006
you would bring in your starter,

108
00:05:10.006 --> 00:05:13.003
and we're going to talk about how to build starters

109
00:05:13.003 --> 00:05:14.007
in the next video.

110
00:05:14.007 --> 00:05:16.008
But things like these tend to be cross-cutting,

111
00:05:16.008 --> 00:05:20.001
so you may want to consider doing these in a common starter

112
00:05:20.001 --> 00:05:22.000
for your enterprise.

