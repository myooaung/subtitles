WEBVTT
1
00:00:00.005 --> 00:00:01.008
- [Instructor] Now that we have our consumer done

2
00:00:01.008 --> 00:00:02.008
and we've tested it,

3
00:00:02.008 --> 00:00:05.006
it's time to create a Producer.

4
00:00:05.006 --> 00:00:07.001
So the first thing we're going to do

5
00:00:07.001 --> 00:00:09.003
is we're going to create a new module,

6
00:00:09.003 --> 00:00:11.001
now I'm going to use my plugin once again,

7
00:00:11.001 --> 00:00:12.004
if you don't have this,

8
00:00:12.004 --> 00:00:14.007
just use start.spring.io,

9
00:00:14.007 --> 00:00:17.008
you could do all the same things,

10
00:00:17.008 --> 00:00:20.008
like call this one

11
00:00:20.008 --> 00:00:22.005
room cleaner notifier,

12
00:00:22.005 --> 00:00:25.001
in the CLR package like we did before

13
00:00:25.001 --> 00:00:32.001
for command line runner,

14
00:00:32.001 --> 00:00:37.003
and from messaging I want to pick rabbitMQ,

15
00:00:37.003 --> 00:00:38.004
go ahead and run that

16
00:00:38.004 --> 00:00:39.009
you'll have to extract the zip

17
00:00:39.009 --> 00:00:41.006
if you're using start.spring.io

18
00:00:41.006 --> 00:00:42.008
into your exercise files,

19
00:00:42.008 --> 00:00:45.007
and then you're good to go there.

20
00:00:45.007 --> 00:00:51.008
I'm going to enable Maven support for this,

21
00:00:51.008 --> 00:00:55.008
and the first thing I want to do is open up the Palm file

22
00:00:55.008 --> 00:00:59.001
and we are going to add a dependency,

23
00:00:59.001 --> 00:01:06.000
spring boot starter JSON,

24
00:01:06.000 --> 00:01:10.005
and we'll run Maven.

25
00:01:10.005 --> 00:01:14.003
Now I want you to open up the room web application,

26
00:01:14.003 --> 00:01:17.004
there're couple of things that we need to get from here.

27
00:01:17.004 --> 00:01:18.005
The first thing I want you to do

28
00:01:18.005 --> 00:01:21.006
is to get the async payload

29
00:01:21.006 --> 00:01:31.003
and copy that into our base package.

30
00:01:31.003 --> 00:01:33.001
They don't want you to go into the config package

31
00:01:33.001 --> 00:01:36.000
and grab the async config

32
00:01:36.000 --> 00:01:39.009
and this time we're just going to grab some data from here

33
00:01:39.009 --> 00:01:40.007
and copy it,

34
00:01:40.007 --> 00:01:43.006
so the two static variables and the three beingss,

35
00:01:43.006 --> 00:01:46.001
Q, topic exchange and binding,

36
00:01:46.001 --> 00:01:48.008
you want to copy that,

37
00:01:48.008 --> 00:01:55.006
go into our application class and paste those in.

38
00:01:55.006 --> 00:01:59.001
Now, we're going to create one more class here,

39
00:01:59.001 --> 00:02:05.002
and we're going to call this class runner.

40
00:02:05.002 --> 00:02:11.002
Now runner is going to implement command line runner

41
00:02:11.002 --> 00:02:14.005
and it is going to be a component,

42
00:02:14.005 --> 00:02:16.000
and before we implement that method,

43
00:02:16.000 --> 00:02:18.005
let's bring a few things in here.

44
00:02:18.005 --> 00:02:24.001
So we need a rabbit template

45
00:02:24.001 --> 00:02:29.004
and we need the object mapper,

46
00:02:29.004 --> 00:02:32.003
and then I am going to actually auto wire

47
00:02:32.003 --> 00:02:34.007
and some of this is a little bit different,

48
00:02:34.007 --> 00:02:38.000
but I'm going to auto wire in a configurable

49
00:02:38.000 --> 00:02:41.003
application context,

50
00:02:41.003 --> 00:02:43.008
and I'll show you why we need that in a moment,

51
00:02:43.008 --> 00:02:48.008
it's called uncreated constructor,

52
00:02:48.008 --> 00:02:53.000
and now we can implement our method.

53
00:02:53.000 --> 00:02:55.005
And again, I'm just using generation,

54
00:02:55.005 --> 00:02:56.009
every ID has this,

55
00:02:56.009 --> 00:02:59.003
I just she's controlling her to pop it open,

56
00:02:59.003 --> 00:03:02.003
each ID though has a way to generate general setters,

57
00:03:02.003 --> 00:03:06.001
implement methods, override that type of thing.

58
00:03:06.001 --> 00:03:10.009
Alright, so in here, we're going to do int index

59
00:03:10.009 --> 00:03:14.007
equals and we're going to cast int

60
00:03:14.007 --> 00:03:21.003
and we're going to do a math.random times 28 minus one,

61
00:03:21.003 --> 00:03:24.006
now where am I getting 28?

62
00:03:24.006 --> 00:03:26.003
There's 28 room rows,

63
00:03:26.003 --> 00:03:30.003
so instead of trying to go figure out all of the values

64
00:03:30.003 --> 00:03:31.006
and connect to the database,

65
00:03:31.006 --> 00:03:34.001
we're just going to use this little routine

66
00:03:34.001 --> 00:03:38.007
that works just fine.

67
00:03:38.007 --> 00:03:40.006
So 28 minus one and then plus one,

68
00:03:40.006 --> 00:03:44.007
that'll give us a random number between one and 28,

69
00:03:44.007 --> 00:03:52.005
We will create a payload,

70
00:03:52.005 --> 00:03:57.009
we will set the ID equal to our index,

71
00:03:57.009 --> 00:04:03.007
we will set the model equal to room,

72
00:04:03.007 --> 00:04:09.004
now we will call rabbit template convert and send,

73
00:04:09.004 --> 00:04:13.007
we're going to use the operations exchange

74
00:04:13.007 --> 00:04:19.005
with the routing key of randon.rooms.cleaner,

75
00:04:19.005 --> 00:04:22.007
and then we'll use the object mapper,

76
00:04:22.007 --> 00:04:27.003
that right value as string,

77
00:04:27.003 --> 00:04:31.000
and we will pass it in our payload,

78
00:04:31.000 --> 00:04:32.000
and the last thing that I'm going to do

79
00:04:32.000 --> 00:04:34.000
is I'm going to call close on the context

80
00:04:34.000 --> 00:04:36.004
so it shuts down the application,

81
00:04:36.004 --> 00:04:38.001
This is a great way when you're doing rabbit

82
00:04:38.001 --> 00:04:42.006
to shut down this application context, once it's done.

83
00:04:42.006 --> 00:04:46.003
So what I want to do, is I want to start

84
00:04:46.003 --> 00:04:51.009
by starting up my room web application

85
00:04:51.009 --> 00:04:54.008
and that's up and running,

86
00:04:54.008 --> 00:05:02.001
and then when I run the main method on my notifier,

87
00:05:02.001 --> 00:05:03.004
and that has gone ahead and run,

88
00:05:03.004 --> 00:05:06.005
let's go back to the room web application,

89
00:05:06.005 --> 00:05:08.008
and you can see that it spit out some data

90
00:05:08.008 --> 00:05:10.009
that needs to be cleaned.

91
00:05:10.009 --> 00:05:17.006
So let's run our notifier again,

92
00:05:17.006 --> 00:05:19.000
and you'll see we had a different room

93
00:05:19.000 --> 00:05:20.002
that needs to be cleaned.

94
00:05:20.002 --> 00:05:21.003
And every time you run this,

95
00:05:21.003 --> 00:05:22.009
you're going to get a different room.

96
00:05:22.009 --> 00:05:24.004
So we put a message on the queue,

97
00:05:24.004 --> 00:05:27.006
we've received it and we've output some data based on that

98
00:05:27.006 --> 00:05:29.004
all by using that random number generator

99
00:05:29.004 --> 00:05:30.009
in the real world, gen will you're going to to respond

100
00:05:30.009 --> 00:05:32.007
to some event in your system,

101
00:05:32.007 --> 00:05:35.002
but nonetheless, it all works the same.

102
00:05:35.002 --> 00:05:36.003
And that's all you have to do

103
00:05:36.003 --> 00:05:38.006
to do a producer and a consumer for rabbit

104
00:05:38.006 --> 00:05:40.006
or any other messaging system,

105
00:05:40.006 --> 00:05:42.000
they're all very similar.

