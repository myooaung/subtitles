WEBVTT
1
00:00:00.005 --> 00:00:01.005
- [Instructor] So now let's build

2
00:00:01.005 --> 00:00:05.001
a CommandLineRunner for ourselves.

3
00:00:05.001 --> 00:00:06.000
The first thing that we're going to do

4
00:00:06.000 --> 00:00:07.006
is we're going to build a new module.

5
00:00:07.006 --> 00:00:10.000
And once again, I'm going to use the plugin functionality

6
00:00:10.000 --> 00:00:11.004
of my IDE.

7
00:00:11.004 --> 00:00:13.007
If you don't have that, go to start.spring.io,

8
00:00:13.007 --> 00:00:17.005
do the exact same things, import it in your IDE

9
00:00:17.005 --> 00:00:19.002
based on where your exercise files are

10
00:00:19.002 --> 00:00:20.009
and you should be good to go.

11
00:00:20.009 --> 00:00:24.009
So we'll go ahead and create that module.

12
00:00:24.009 --> 00:00:26.003
For the group this time we're going to do

13
00:00:26.003 --> 00:00:32.009
corn.frankmoley.lil.spt.clr.

14
00:00:32.009 --> 00:00:38.001
And this one will be the room clr.

15
00:00:38.001 --> 00:00:39.009
Now, this is where it's going to get a little bit different.

16
00:00:39.009 --> 00:00:42.009
We're actually not going to choose anything.

17
00:00:42.009 --> 00:00:46.006
We're just going to accept all of the defaults and hit next.

18
00:00:46.006 --> 00:00:48.005
Make sure it's where we wanted in our exercise files

19
00:00:48.005 --> 00:00:51.004
and hit finish.

20
00:00:51.004 --> 00:00:58.008
Now I'm going to enable Maven

21
00:00:58.008 --> 00:01:02.000
And allow it to do its thing.

22
00:01:02.000 --> 00:01:02.008
All right.

23
00:01:02.008 --> 00:01:03.008
So the first thing that we want to do once we get this built

24
00:01:03.008 --> 00:01:05.007
is we're going to open up our POM file

25
00:01:05.007 --> 00:01:07.008
and we do need to add a couple of dependencies.

26
00:01:07.008 --> 00:01:10.003
And we'll talk about what these are here in a moment.

27
00:01:10.003 --> 00:01:13.002
The first little one that we need to add

28
00:01:13.002 --> 00:01:19.005
is we need to add spring-boot-starter-json

29
00:01:19.005 --> 00:01:23.002
from spring boot itself.

30
00:01:23.002 --> 00:01:26.003
Now this is going to allow us to get a JSON Marshaller

31
00:01:26.003 --> 00:01:29.001
onto our class path.

32
00:01:29.001 --> 00:01:31.005
Other dependency that we need to add.

33
00:01:31.005 --> 00:01:34.009
And this one comes from spring itself.

34
00:01:34.009 --> 00:01:37.003
This is not a boot dependency.

35
00:01:37.003 --> 00:01:40.007
This is just org.springframework and it's web.

36
00:01:40.007 --> 00:01:42.008
And we don't need the version

37
00:01:42.008 --> 00:01:46.001
because the parent POM takes care of that.

38
00:01:46.001 --> 00:01:47.009
So now we've got our dependencies in place.

39
00:01:47.009 --> 00:01:51.009
Let's have Maven bring them all in.

40
00:01:51.009 --> 00:01:52.007
All right.

41
00:01:52.007 --> 00:01:53.007
Now we're going to cheat a little bit.

42
00:01:53.007 --> 00:01:55.005
We're going to go to our room web application

43
00:01:55.005 --> 00:01:58.001
open up source main Java.

44
00:01:58.001 --> 00:02:02.002
And in our models, we want to grab the room element.

45
00:02:02.002 --> 00:02:07.003
We want to bring it over here into our package.

46
00:02:07.003 --> 00:02:10.001
And then we're going to add an order for readability

47
00:02:10.001 --> 00:02:10.009
a two string methods.

48
00:02:10.009 --> 00:02:16.007
So I'm just going to generate one.

49
00:02:16.007 --> 00:02:19.004
Yeah, and we will get to the rest of that here in a moment.

50
00:02:19.004 --> 00:02:22.004
So let's go into our room, seal our application.

51
00:02:22.004 --> 00:02:23.002
We're going to do a few things in here.

52
00:02:23.002 --> 00:02:25.006
First thing I want to do is I want to create a Logger.

53
00:02:25.006 --> 00:02:28.002
So I've got a clean way to push our data.

54
00:02:28.002 --> 00:02:32.005
So private static final Logger called LOG

55
00:02:32.005 --> 00:02:37.009
and we will get it from the LoggerFactory.getLogger

56
00:02:37.009 --> 00:02:43.004
and we will simply pass it through roomClrapplication.class.

57
00:02:43.004 --> 00:02:44.006
This is pretty standard

58
00:02:44.006 --> 00:02:50.001
with SLF4J on how to get a Logger.

59
00:02:50.001 --> 00:02:51.009
Now, remember when we brought in spring web,

60
00:02:51.009 --> 00:02:52.009
there was a reason for that.

61
00:02:52.009 --> 00:02:57.000
We're going to create a rest template.

62
00:02:57.000 --> 00:03:00.002
So let's create a bean of type Rest Template.

63
00:03:00.002 --> 00:03:02.004
We will call it RestTemplate.

64
00:03:02.004 --> 00:03:09.001
And what we get auto configured is a RestTemplate builder,

65
00:03:09.001 --> 00:03:12.004
will simply call this builder

66
00:03:12.004 --> 00:03:17.008
and we will return builder.built,

67
00:03:17.008 --> 00:03:19.009
go and import in a RestTemplate.

68
00:03:19.009 --> 00:03:21.007
And now we're going to create another bean.

69
00:03:21.007 --> 00:03:24.008
And this is one way that you can do command line runner.

70
00:03:24.008 --> 00:03:27.001
Usually I actually create a separate class

71
00:03:27.001 --> 00:03:32.004
but for this purpose, it's fine to embed it here as a bean.

72
00:03:32.004 --> 00:03:35.002
So we'll do a command line runner.

73
00:03:35.002 --> 00:03:37.001
We'll simply call it run.

74
00:03:37.001 --> 00:03:41.007
We're going to pass in our RestTemplate to it.

75
00:03:41.007 --> 00:03:43.008
And this one will throw an exception.

76
00:03:43.008 --> 00:03:47.004
So we don't have to worry about trapping it.

77
00:03:47.004 --> 00:03:48.003
All right.

78
00:03:48.003 --> 00:03:54.005
Now, the first thing we want to do is we want to return args

79
00:03:54.005 --> 00:03:55.008
and we're going to build a Lambda.

80
00:03:55.008 --> 00:03:57.006
So let's go ahead and do our Lambda,

81
00:03:57.006 --> 00:03:59.009
and we'll wrap that up.

82
00:03:59.009 --> 00:04:04.001
Now, step one, let's know that we're actually starting.

83
00:04:04.001 --> 00:04:07.003
I do this often in the command line application

84
00:04:07.003 --> 00:04:10.003
because it allows me a good debug point to make sure

85
00:04:10.003 --> 00:04:13.008
on a running system that I've started up.

86
00:04:13.008 --> 00:04:23.004
And I also will finish with a log message that matches it.

87
00:04:23.004 --> 00:04:26.005
Now in between, this is the meat and potatoes.

88
00:04:26.005 --> 00:04:29.006
We're going to get a construct called a Response Entity

89
00:04:29.006 --> 00:04:31.005
and it's a templatized construct.

90
00:04:31.005 --> 00:04:36.001
And it takes in this case, a list of room elements

91
00:04:36.001 --> 00:04:37.009
and we will call this rooms.

92
00:04:37.009 --> 00:04:42.002
Let's go ahead and import all of that in.

93
00:04:42.002 --> 00:04:48.004
Now we get this from our RestTemplate.exchange.

94
00:04:48.004 --> 00:04:50.001
First thing we need to do is we need to pass in

95
00:04:50.001 --> 00:04:52.000
where we are calling to.

96
00:04:52.000 --> 00:05:02.004
We're calling to localhost:8888/API/rooms.

97
00:05:02.004 --> 00:05:04.000
We'll put a comma here

98
00:05:04.000 --> 00:05:06.008
so we can kind of break this up a little bit.

99
00:05:06.008 --> 00:05:10.007
And now we are going to call HTTP GET,

100
00:05:10.007 --> 00:05:13.005
we're going to pass it a null entity,

101
00:05:13.005 --> 00:05:17.007
and then we are going to create a new

102
00:05:17.007 --> 00:05:21.002
parameterized type reference.

103
00:05:21.002 --> 00:05:26.002
And that Parameterize type reference is list and room again.

104
00:05:26.002 --> 00:05:28.003
And then we're going to close that out.

105
00:05:28.003 --> 00:05:30.002
So what this will do is it will call rest template.

106
00:05:30.002 --> 00:05:32.003
It will exchange and get an element back.

107
00:05:32.003 --> 00:05:37.008
That element is an array of rooms in the form of a list.

108
00:05:37.008 --> 00:05:41.000
So now we can do rooms that get body

109
00:05:41.000 --> 00:05:43.000
which gets us that list.

110
00:05:43.000 --> 00:05:46.003
We'll do a ForEach on it

111
00:05:46.003 --> 00:05:49.005
and we very simply we'll do another Lambda here

112
00:05:49.005 --> 00:05:56.000
and we're going to do a log.info room.two string.

113
00:05:56.000 --> 00:05:57.005
Now, if everything's to go,

114
00:05:57.005 --> 00:06:00.004
we can start up our room web application

115
00:06:00.004 --> 00:06:06.005
in the background and allow it to fire up,

116
00:06:06.005 --> 00:06:14.002
and then we can run our CLR application.

117
00:06:14.002 --> 00:06:17.001
Yeah, well, let's take a look at our console output here

118
00:06:17.001 --> 00:06:19.005
and you'll notice we never put data in this application.

119
00:06:19.005 --> 00:06:22.003
So it ran, it started the CLR.

120
00:06:22.003 --> 00:06:26.001
It made the call to the web service on the remote system

121
00:06:26.001 --> 00:06:28.006
brought across all the data, formatted it and finished.

122
00:06:28.006 --> 00:06:30.004
And obviously this is a very trivial task.

123
00:06:30.004 --> 00:06:33.005
You'll get into much more advanced tasks as you go

124
00:06:33.005 --> 00:06:37.000
but this gives you the idea of what you can do

125
00:06:37.000 --> 00:06:40.000
and what you can start thinking about doing.

