WEBVTT
1
00:00:00.005 --> 00:00:01.005
- [Instructor] So we have a database

2
00:00:01.005 --> 00:00:04.009
wired into our application, at least an embedded one,

3
00:00:04.009 --> 00:00:09.002
so now it's time to build our first repository.

4
00:00:09.002 --> 00:00:10.001
Once again, we're going to go

5
00:00:10.001 --> 00:00:13.004
back into our room web application.

6
00:00:13.004 --> 00:00:16.000
Let's open up the Properties file once again,

7
00:00:16.000 --> 00:00:20.007
in Source, Main, Resources.

8
00:00:20.007 --> 00:00:23.008
We need to specify a very specific property,

9
00:00:23.008 --> 00:00:27.005
spring.jpa.hibernate.ddl-auto,

10
00:00:27.005 --> 00:00:29.008
and we want to set this equal to none.

11
00:00:29.008 --> 00:00:31.007
Because we have an embedded database

12
00:00:31.007 --> 00:00:34.006
that's already been populated with a schema and data,

13
00:00:34.006 --> 00:00:39.009
we don't want hibernate to create that for us.

14
00:00:39.009 --> 00:00:42.000
Next thing we need to do is we need to go modify

15
00:00:42.000 --> 00:00:43.001
one of our elements,

16
00:00:43.001 --> 00:00:47.005
so open up the models and the Room element,

17
00:00:47.005 --> 00:00:48.003
and we're going to go ahead

18
00:00:48.003 --> 00:00:50.002
and use this as our entity.

19
00:00:50.002 --> 00:00:51.009
Now, usually you're going to want

20
00:00:51.009 --> 00:00:53.000
some abstraction here,

21
00:00:53.000 --> 00:00:55.003
but for right now, this is fine.

22
00:00:55.003 --> 00:01:00.006
So @Entity to indicate that it's a javax.persistent entity,

23
00:01:00.006 --> 00:01:04.006
@Table, and we're going to put a name element here,

24
00:01:04.006 --> 00:01:06.001
and this is called Room,

25
00:01:06.001 --> 00:01:08.006
and you can get the data for this

26
00:01:08.006 --> 00:01:10.008
by opening up the Schema file.

27
00:01:10.008 --> 00:01:14.003
You'll see that we have Room as a table.

28
00:01:14.003 --> 00:01:18.007
Go ahead and import that.

29
00:01:18.007 --> 00:01:20.003
Now we're going to come down to our ID,

30
00:01:20.003 --> 00:01:23.006
and we're going to annotate it @Id,

31
00:01:23.006 --> 00:01:28.002
@Column, and we will specify a name here.

32
00:01:28.002 --> 00:01:30.000
And again, we can go back and look,

33
00:01:30.000 --> 00:01:35.003
and the name here is ROOM_ID,

34
00:01:35.003 --> 00:01:41.001
and we need to tell it that this is generated,

35
00:01:41.001 --> 00:01:47.005
and the generated value here is IDENTITY.

36
00:01:47.005 --> 00:01:49.006
Now we're going to do the same thing

37
00:01:49.006 --> 00:01:53.006
as far as the column annotation on the rest of our elements.

38
00:01:53.006 --> 00:01:58.001
So we're going to build name, room number, bed info,

39
00:01:58.001 --> 00:02:06.008
so in this case, ROOM_NUMBER,

40
00:02:06.008 --> 00:02:11.005
NAME,

41
00:02:11.005 --> 00:02:16.000
and BED_INFO.

42
00:02:16.000 --> 00:02:19.002
All right, so now that that is done,

43
00:02:19.002 --> 00:02:27.004
going to create a new package in our route called Data.

44
00:02:27.004 --> 00:02:29.009
And within that package, we're going to create

45
00:02:29.009 --> 00:02:38.002
a new interface called RoomRepository.

46
00:02:38.002 --> 00:02:45.005
Now, we will make this extend the JPARepository,

47
00:02:45.005 --> 00:02:47.006
and you'll see that this is templatized,

48
00:02:47.006 --> 00:02:48.008
and it takes two values.

49
00:02:48.008 --> 00:02:52.001
The first one is the element that this is serving,

50
00:02:52.001 --> 00:02:53.008
so the entity object.

51
00:02:53.008 --> 00:02:56.004
The second is the data type of the ID.

52
00:02:56.004 --> 00:02:59.004
In this case, it's a Long.

53
00:02:59.004 --> 00:03:03.001
And that's all there is to build this repository.

54
00:03:03.001 --> 00:03:06.009
So let's go into our service,

55
00:03:06.009 --> 00:03:09.000
specifically our RoomService,

56
00:03:09.000 --> 00:03:11.009
and let's change a few things here.

57
00:03:11.009 --> 00:03:12.008
First and foremost,

58
00:03:12.008 --> 00:03:15.008
let's get rid of all the static definition.

59
00:03:15.008 --> 00:03:21.008
We'll create a private final RoomRepository,

60
00:03:21.008 --> 00:03:24.006
and we will inject that via the constructor,

61
00:03:24.006 --> 00:03:27.009
which is good practice in Spring.

62
00:03:27.009 --> 00:03:30.008
And now we'll modify our implementation here

63
00:03:30.008 --> 00:03:33.000
of our getAllRooms method.

64
00:03:33.000 --> 00:03:39.009
We are going to return instead our RoomRepository.findAll.

65
00:03:39.009 --> 00:03:42.009
Now, if everything works correctly, we can run this

66
00:03:42.009 --> 00:03:45.004
and go back to our rooms page

67
00:03:45.004 --> 00:03:47.005
and see all of our data,

68
00:03:47.005 --> 00:03:49.002
or to our room's web service

69
00:03:49.002 --> 00:03:51.004
and likewise see all of our data.

70
00:03:51.004 --> 00:03:53.001
So let's do just that.

71
00:03:53.001 --> 00:03:54.006
Started up the application,

72
00:03:54.006 --> 00:03:56.008
I'm going to go to the web browser,

73
00:03:56.008 --> 00:04:02.008
and in our web browser, we'll go to localhost:8080/rooms,

74
00:04:02.008 --> 00:04:04.007
and we no longer have our static data.

75
00:04:04.007 --> 00:04:08.006
Instead, we have the data that came from the database,

76
00:04:08.006 --> 00:04:10.006
and that literally is how easy it is

77
00:04:10.006 --> 00:04:15.003
to wire an application to a database using Spring data.

78
00:04:15.003 --> 00:04:18.007
We wrote very little code, and of the code we wrote,

79
00:04:18.007 --> 00:04:23.000
most of it was annotations or object definitions.

