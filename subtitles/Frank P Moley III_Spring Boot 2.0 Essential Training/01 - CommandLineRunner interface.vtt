WEBVTT
1
00:00:00.004 --> 00:00:02.004
- [Narrator] One of my favorite interfaces

2
00:00:02.004 --> 00:00:04.004
in the Spring Boot ecosystem,

3
00:00:04.004 --> 00:00:07.001
and one that is very seldom talked about,

4
00:00:07.001 --> 00:00:09.005
is the CommandLineRunner.

5
00:00:09.005 --> 00:00:11.005
Now the CommandLineRunner is a very simple

6
00:00:11.005 --> 00:00:13.000
and effective tool,

7
00:00:13.000 --> 00:00:16.008
when you need to do some set amount of work.

8
00:00:16.008 --> 00:00:19.000
We don't always need to bring in web

9
00:00:19.000 --> 00:00:24.003
or some other big processes in order to do a simple task.

10
00:00:24.003 --> 00:00:27.001
Sometimes we just want to do a body of work

11
00:00:27.001 --> 00:00:31.005
and we want it deployed as a task, but we want to use spring

12
00:00:31.005 --> 00:00:33.009
in the most efficient way possible.

13
00:00:33.009 --> 00:00:35.009
So this is where I feel that spring boot

14
00:00:35.009 --> 00:00:40.003
especially with CommandLineRunner really shines.

15
00:00:40.003 --> 00:00:44.002
Now you can run it as a standalone spring boot application

16
00:00:44.002 --> 00:00:48.001
or you can run it in another spring boot application,

17
00:00:48.001 --> 00:00:52.000
say a weather application or a spring batch application,

18
00:00:52.000 --> 00:00:55.002
such that on startup, it will execute.

19
00:00:55.002 --> 00:00:58.007
In addition, you can use this as an admin

20
00:00:58.007 --> 00:01:02.000
or a batch process as part of your application

21
00:01:02.000 --> 00:01:05.000
as alluded to or in standalone fashion.

22
00:01:05.000 --> 00:01:07.002
But that's really the key, the fact that it's like admin

23
00:01:07.002 --> 00:01:11.006
or batch operations is really what we're targeting.

24
00:01:11.006 --> 00:01:14.008
Now, if we take a look at the CommandLineRunner Interface,

25
00:01:14.008 --> 00:01:18.000
it provides access to the application arguments

26
00:01:18.000 --> 00:01:20.008
and oftentimes, when we want to write

27
00:01:20.008 --> 00:01:24.004
a command line process, that's really what we need.

28
00:01:24.004 --> 00:01:26.005
We need to be able to inject those arguments

29
00:01:26.005 --> 00:01:30.008
into our Java code and then execute based on those.

30
00:01:30.008 --> 00:01:33.009
It can run simple or complex set of tasks,

31
00:01:33.009 --> 00:01:36.001
it's really up to you.

32
00:01:36.001 --> 00:01:39.006
And as I mentioned, it can be used standalone or within

33
00:01:39.006 --> 00:01:42.005
a running application, because when you get access to it,

34
00:01:42.005 --> 00:01:46.002
springs application context is up and running.

35
00:01:46.002 --> 00:01:47.008
Then you build and run your task

36
00:01:47.008 --> 00:01:49.005
and that's all you have to do to implement it.

37
00:01:49.005 --> 00:01:52.006
It is a simple run method.

38
00:01:52.006 --> 00:01:54.009
Now the CommandLineRunner interface has a cousin

39
00:01:54.009 --> 00:01:58.003
and that's the ApplicationRunner Interface.

40
00:01:58.003 --> 00:02:00.003
And really it's a very close cousin

41
00:02:00.003 --> 00:02:04.002
because they work in almost the exact same manner.

42
00:02:04.002 --> 00:02:08.007
They run a single-run method as part of their operations.

43
00:02:08.007 --> 00:02:11.001
You have access to the application arguments

44
00:02:11.001 --> 00:02:13.004
themselves with the ApplicationRunner

45
00:02:13.004 --> 00:02:16.002
just like with the CommandLineRunner.

46
00:02:16.002 --> 00:02:18.009
Now with spring, there's almost always a way

47
00:02:18.009 --> 00:02:21.007
to order behavior and CommandLineRunner

48
00:02:21.007 --> 00:02:25.002
or ApplicationRunners are no different.

49
00:02:25.002 --> 00:02:27.001
One thing to note is that you can put more

50
00:02:27.001 --> 00:02:30.005
than one of these into a given spring package.

51
00:02:30.005 --> 00:02:33.004
And when you do that, you need to control that order

52
00:02:33.004 --> 00:02:36.002
and that's really where the power comes.

53
00:02:36.002 --> 00:02:38.009
So you can use the @order annotation to determine

54
00:02:38.009 --> 00:02:41.007
which ones go first which ones go last

55
00:02:41.007 --> 00:02:43.005
by simply applying an order.

56
00:02:43.005 --> 00:02:46.001
So what you can do is if you have multiple tasks

57
00:02:46.001 --> 00:02:48.009
that must be executed in a single operation,

58
00:02:48.009 --> 00:02:52.001
you can put them into a single package, deploy them together

59
00:02:52.001 --> 00:02:55.005
and allow spring to control the order of operations.

60
00:02:55.005 --> 00:02:58.004
Kind of like when you're in bash and you pipe commands

61
00:02:58.004 --> 00:03:01.007
together, you're getting the same sort of structure

62
00:03:01.007 --> 00:03:05.000
with the CommandLineRunner and the @Order annotation.

