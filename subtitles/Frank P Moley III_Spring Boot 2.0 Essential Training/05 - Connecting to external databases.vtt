WEBVTT
1
00:00:00.006 --> 00:00:01.008
- [Instructor] Embedded databases

2
00:00:01.008 --> 00:00:04.008
are great for demo and PSC work.

3
00:00:04.008 --> 00:00:08.009
But in the real world, we will use an external database.

4
00:00:08.009 --> 00:00:11.008
With Spring Boot, it is a very simple process

5
00:00:11.008 --> 00:00:14.004
to move to such a system.

6
00:00:14.004 --> 00:00:16.007
Keep in mind once we do this change,

7
00:00:16.007 --> 00:00:18.009
you will need to be running your database

8
00:00:18.009 --> 00:00:22.009
in the background for the rest of this course.

9
00:00:22.009 --> 00:00:24.009
The first thing that I want you to do is to navigate

10
00:00:24.009 --> 00:00:26.008
to your bin directory.

11
00:00:26.008 --> 00:00:29.002
Now these bash scripts are designed to be run

12
00:00:29.002 --> 00:00:30.006
on Linux based systems.

13
00:00:30.006 --> 00:00:33.005
So if your window is 10 environment, runs full Linux

14
00:00:33.005 --> 00:00:35.001
and you have Docker installed they should work

15
00:00:35.001 --> 00:00:38.009
there as well with a few minor modifications.

16
00:00:38.009 --> 00:00:40.009
But what we're going to do is we're going to run

17
00:00:40.009 --> 00:00:45.004
the start PostgreSQL shell script that I've written.

18
00:00:45.004 --> 00:00:47.002
Now your output may be a little bit different

19
00:00:47.002 --> 00:00:49.003
if you have to download the data.

20
00:00:49.003 --> 00:00:51.004
But ultimately, what we want to see is a whole bunch

21
00:00:51.004 --> 00:00:54.003
of insert statements to know that our database

22
00:00:54.003 --> 00:00:55.009
is up and it's been primed.

23
00:00:55.009 --> 00:00:59.003
And we primed it with the data that SQL file

24
00:00:59.003 --> 00:01:02.002
in the schema.SQL file they're also located

25
00:01:02.002 --> 00:01:04.006
in our bin directory.

26
00:01:04.006 --> 00:01:08.004
So now that that's up and running, let's go to our ID.

27
00:01:08.004 --> 00:01:10.007
In our ID, let's open up our room web app.

28
00:01:10.007 --> 00:01:13.005
And let's start with our POM file.

29
00:01:13.005 --> 00:01:17.002
We are going to get rid of the h2 database.

30
00:01:17.002 --> 00:01:21.008
And instead we are going to put in the PostgreSQL

31
00:01:21.008 --> 00:01:26.005
database.

32
00:01:26.005 --> 00:01:30.009
Now we'll go ahead and let Maven run its thing.

33
00:01:30.009 --> 00:01:33.000
And now that that is done,

34
00:01:33.000 --> 00:01:36.004
let's go into our application.properties file

35
00:01:36.004 --> 00:01:42.002
in source main resources.

36
00:01:42.002 --> 00:01:43.007
We're going to go ahead and delete everything

37
00:01:43.007 --> 00:01:46.008
except for our ddl statement.

38
00:01:46.008 --> 00:01:48.008
We'll leave that first.

39
00:01:48.008 --> 00:01:51.000
We're going to add a few other ones here.

40
00:01:51.000 --> 00:01:55.004
So spring jpa database

41
00:01:55.004 --> 00:01:58.008
equals PostgreSQL

42
00:01:58.008 --> 00:02:01.005
spring data source

43
00:02:01.005 --> 00:02:03.009
platform

44
00:02:03.009 --> 00:02:07.009
also equals PostgreSQL.

45
00:02:07.009 --> 00:02:09.005
Spring

46
00:02:09.005 --> 00:02:11.003
data source

47
00:02:11.003 --> 00:02:15.000
URL and this is how we define the remote URL.

48
00:02:15.000 --> 00:02:20.005
In this case, we're going to do jdbc postgresql.

49
00:02:20.005 --> 00:02:25.002
Now, it exists in this case at localhost

50
00:02:25.002 --> 00:02:28.000
5432

51
00:02:28.000 --> 00:02:30.006
and it's the dev database within there.

52
00:02:30.006 --> 00:02:33.000
So if you go back and look at that shell script

53
00:02:33.000 --> 00:02:38.004
when I ran the Docker image, I opened up port 5432.

54
00:02:38.004 --> 00:02:41.000
And that's the port that's PostgreSQL listens to

55
00:02:41.000 --> 00:02:43.001
within the Docker image itself.

56
00:02:43.001 --> 00:02:46.002
Of course, we could have changed all of that.

57
00:02:46.002 --> 00:02:51.008
Now we're going to do a spring.datasource.username.

58
00:02:51.008 --> 00:02:54.004
And again, this is defined in the shell script,

59
00:02:54.004 --> 00:02:59.004
but we have the default value.

60
00:02:59.004 --> 00:03:04.001
And a password that is also PostgreSQL.

61
00:03:04.001 --> 00:03:09.009
Now, let's start up the application.

62
00:03:09.009 --> 00:03:11.002
Our application has started.

63
00:03:11.002 --> 00:03:13.000
Let's go to our web browser.

64
00:03:13.000 --> 00:03:18.004
And once again, go to localhost 8080/rooms

65
00:03:18.004 --> 00:03:20.001
and we loaded our data.

66
00:03:20.001 --> 00:03:23.002
We've removed h2, so it can't be coming from there.

67
00:03:23.002 --> 00:03:27.000
And to confirm that

68
00:03:27.000 --> 00:03:29.006
we can go to the h2 console and you'll see

69
00:03:29.006 --> 00:03:31.005
that it no longer exists.

70
00:03:31.005 --> 00:03:35.004
That's because we've removed everything from the database

71
00:03:35.004 --> 00:03:37.007
that originally was there and then embedded fashion

72
00:03:37.007 --> 00:03:40.006
and are now connecting to our external database.

73
00:03:40.006 --> 00:03:43.009
This time running in Docker on my local machine.

74
00:03:43.009 --> 00:03:45.004
Now one more thing, just to make sure

75
00:03:45.004 --> 00:03:48.007
that everything isn't broken.

76
00:03:48.007 --> 00:03:51.002
Let's go to the terminal again.

77
00:03:51.002 --> 00:03:54.007
Let's execute an HTTP

78
00:03:54.007 --> 00:03:58.006
at 8080/API/rooms

79
00:03:58.006 --> 00:04:02.009
and indeed it still pulls back the data as we would expect.

80
00:04:02.009 --> 00:04:04.006
And that's all there is to connecting

81
00:04:04.006 --> 00:04:07.008
to an external database versus an embedded database.

82
00:04:07.008 --> 00:04:10.000
It's all controlled by properties

83
00:04:10.000 --> 00:04:12.000
and what's on the classpath.

