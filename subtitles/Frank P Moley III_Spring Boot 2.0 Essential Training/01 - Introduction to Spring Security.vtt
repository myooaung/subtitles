WEBVTT
1
00:00:00.005 --> 00:00:02.004
- [Educator] As we get into some of the other topics

2
00:00:02.004 --> 00:00:03.006
of Spring Boot,

3
00:00:03.006 --> 00:00:07.000
the next one we're going to address is Spring Security.

4
00:00:07.000 --> 00:00:10.002
Now implementing security in Spring Boot applications is

5
00:00:10.002 --> 00:00:12.006
a little bit more complex than some

6
00:00:12.006 --> 00:00:14.006
of the other stuff that we've seen.

7
00:00:14.006 --> 00:00:16.009
And that's because well, it's security,

8
00:00:16.009 --> 00:00:20.006
which by its nature tends to be more complex.

9
00:00:20.006 --> 00:00:21.006
But that being said,

10
00:00:21.006 --> 00:00:25.008
Spring Security in a Spring Boot application is about

11
00:00:25.008 --> 00:00:30.003
as straightforward as can be done in the security realm.

12
00:00:30.003 --> 00:00:32.000
In its simplest form,

13
00:00:32.000 --> 00:00:37.002
Spring Security provides HTTP basic auth.

14
00:00:37.002 --> 00:00:40.008
When you bring in the Spring Security starter,

15
00:00:40.008 --> 00:00:44.007
just introducing that gives you basic authentication on all

16
00:00:44.007 --> 00:00:46.004
of your endpoints,

17
00:00:46.004 --> 00:00:50.000
with the exception of some of the commonly ignored ones

18
00:00:50.000 --> 00:00:54.009
that are in the static directory, like JavaScript or CSS.

19
00:00:54.009 --> 00:00:56.007
Now you get basic auth,

20
00:00:56.007 --> 00:00:59.006
but the username and password are actually generated

21
00:00:59.006 --> 00:01:03.007
at startup time, and spit out into the info messages

22
00:01:03.007 --> 00:01:05.000
of the log.

23
00:01:05.000 --> 00:01:07.001
So if you just want to play with security

24
00:01:07.001 --> 00:01:08.008
and added to a project,

25
00:01:08.008 --> 00:01:10.007
you can get the username and password from

26
00:01:10.007 --> 00:01:14.004
those log messages during the startup sequence.

27
00:01:14.004 --> 00:01:17.000
Everything within spring basic security kind

28
00:01:17.000 --> 00:01:19.002
of mixes to different areas.

29
00:01:19.002 --> 00:01:22.001
A majority of it is based on properties.

30
00:01:22.001 --> 00:01:25.002
But some of it is based on the actual configurations

31
00:01:25.002 --> 00:01:28.000
that you implement.

32
00:01:28.000 --> 00:01:32.001
Now, beyond basic authentication, which let's be honest,

33
00:01:32.001 --> 00:01:34.006
very few people are doing basic auth

34
00:01:34.006 --> 00:01:37.006
that are actually writing production systems.

35
00:01:37.006 --> 00:01:39.001
And you do get out

36
00:01:39.001 --> 00:01:42.008
of the box form based authentication as well.

37
00:01:42.008 --> 00:01:46.006
Now there's support for form based authentication has

38
00:01:46.006 --> 00:01:50.000
to be configured in order for it to work.

39
00:01:50.000 --> 00:01:52.004
Now you can take it as far as you want.

40
00:01:52.004 --> 00:01:56.005
And the default implementations rely on in memory username

41
00:01:56.005 --> 00:01:59.000
and passwords, which are not really great

42
00:01:59.000 --> 00:02:00.009
for production systems.

43
00:02:00.009 --> 00:02:03.003
But they at least get you started down the path

44
00:02:03.003 --> 00:02:06.001
of form based authentication.

45
00:02:06.001 --> 00:02:10.006
Full support comes from the web security configure adapter,

46
00:02:10.006 --> 00:02:14.009
and you tie into it an actual user details service

47
00:02:14.009 --> 00:02:20.005
that serves your username and password from a database.

48
00:02:20.005 --> 00:02:22.007
Now, it's important to note real quick

49
00:02:22.007 --> 00:02:25.009
that the Enable web security annotation,

50
00:02:25.009 --> 00:02:30.003
when you turn that on to a web security configure adapter,

51
00:02:30.003 --> 00:02:33.001
turns off basic authentication,

52
00:02:33.001 --> 00:02:35.004
that you've got to work right out of the box.

53
00:02:35.004 --> 00:02:39.009
So it's really the key to making all of this work.

54
00:02:39.009 --> 00:02:42.009
Now, as I mentioned, you can back it with a data store,

55
00:02:42.009 --> 00:02:46.004
or you can use the in memory option.

56
00:02:46.004 --> 00:02:49.002
But the in memory options should really only be used

57
00:02:49.002 --> 00:02:50.009
for demo purposes.

58
00:02:50.009 --> 00:02:54.008
And that's what we're going to do when we get to this example.

59
00:02:54.008 --> 00:02:57.003
Now, one of the things that I love about spring security,

60
00:02:57.003 --> 00:02:59.008
especially with RESTful Web Services,

61
00:02:59.008 --> 00:03:03.000
is out of the box support for OAuth2,

62
00:03:03.000 --> 00:03:05.002
there's a starter project for OAuth2.

63
00:03:05.002 --> 00:03:08.003
And when you bring that in, you have both a server

64
00:03:08.003 --> 00:03:10.009
and a client that you can implement.

65
00:03:10.009 --> 00:03:12.001
And as a matter of fact,

66
00:03:12.001 --> 00:03:16.003
many organizations implement an OAuth server using

67
00:03:16.003 --> 00:03:20.009
the base Spring Boot OAuth server construct.

68
00:03:20.009 --> 00:03:23.005
What we're going to talk about more is on the client side

69
00:03:23.005 --> 00:03:29.005
and using the at enable OAuth2 client annotation

70
00:03:29.005 --> 00:03:32.008
that allows you to tie into an OAuth server.

71
00:03:32.008 --> 00:03:34.006
And it's a powerful construct,

72
00:03:34.006 --> 00:03:38.005
especially when you're doing web service based security.

73
00:03:38.005 --> 00:03:41.009
And using method level annotations to either restrict

74
00:03:41.009 --> 00:03:44.005
or permit access to methods,

75
00:03:44.005 --> 00:03:47.006
which ultimately are service methods exposed

76
00:03:47.006 --> 00:03:51.001
via a rest controller.

77
00:03:51.001 --> 00:03:55.003
Everything within the OAuth2 spec is really annotation based

78
00:03:55.003 --> 00:03:57.000
and property driven.

79
00:03:57.000 --> 00:03:59.007
And you can customize any of it.

80
00:03:59.007 --> 00:04:02.000
So you may have some default behavior

81
00:04:02.000 --> 00:04:06.002
that you want to implement with your OAuth2 server,

82
00:04:06.002 --> 00:04:08.006
you can definitely do that in Spring Boot.

83
00:04:08.006 --> 00:04:11.007
It just takes a little bit of time and research.

84
00:04:11.007 --> 00:04:14.003
But that is all beyond the scope of the basics

85
00:04:14.003 --> 00:04:17.001
of using Spring Security in Spring Boot.

86
00:04:17.001 --> 00:04:20.001
So we'll leave that for spring Spring Security,

87
00:04:20.001 --> 00:04:23.008
which is another course that I have in this library.

88
00:04:23.008 --> 00:04:27.001
Now with OAuth2, you also have the ability

89
00:04:27.001 --> 00:04:29.002
to create a resource server,

90
00:04:29.002 --> 00:04:31.006
which is part of the OAuth2 spec.

91
00:04:31.006 --> 00:04:35.008
So you can get authorization server and a resource server.

92
00:04:35.008 --> 00:04:39.001
And often these two are implemented in the same package.

93
00:04:39.001 --> 00:04:42.005
But again, beyond the scope of this course.

94
00:04:42.005 --> 00:04:45.000
For right now, we're just going to focus on the basics

95
00:04:45.000 --> 00:04:49.006
of using Spring Security in a Spring Boot application.

96
00:04:49.006 --> 00:04:51.002
Now, I do want to take a moment

97
00:04:51.002 --> 00:04:55.007
to note something about passwords, and specifically hashing.

98
00:04:55.007 --> 00:05:00.003
Passwords should always be hashed and never encrypted.

99
00:05:00.003 --> 00:05:03.008
You have no reason to store a recoverable password

100
00:05:03.008 --> 00:05:05.006
for your customers.

101
00:05:05.006 --> 00:05:08.006
They should only be one way hashed.

102
00:05:08.006 --> 00:05:10.005
You can always tell when someone fails on this

103
00:05:10.005 --> 00:05:12.008
when they send you a password reset email

104
00:05:12.008 --> 00:05:15.005
that has your existing password,

105
00:05:15.005 --> 00:05:18.001
SHA-1 and for that matter MD5

106
00:05:18.001 --> 00:05:20.009
for goodness sake should be considered owned

107
00:05:20.009 --> 00:05:25.004
and no longer usable for production systems.

108
00:05:25.004 --> 00:05:28.005
BCrypt is really an industry standard and Spring Boot

109
00:05:28.005 --> 00:05:30.006
and Spring Security provide full support

110
00:05:30.006 --> 00:05:32.007
for the BCrypt libraries.

111
00:05:32.007 --> 00:05:35.001
So when you're doing forms based authentication,

112
00:05:35.001 --> 00:05:37.000
and you're creating passwords,

113
00:05:37.000 --> 00:05:39.001
use BCrypt to hash those passwords

114
00:05:39.001 --> 00:05:41.003
that you store in the database.

115
00:05:41.003 --> 00:05:45.006
Never ever give yourself or a bad actor access

116
00:05:45.006 --> 00:05:49.003
to your customers passwords in an encrypted format,

117
00:05:49.003 --> 00:05:52.004
or rachet a plain text format.

118
00:05:52.004 --> 00:05:54.005
So now that we've kind of built some foundation on

119
00:05:54.005 --> 00:05:55.009
what Spring Security is

120
00:05:55.009 --> 00:05:58.007
and what isn't in a Spring Boot application,

121
00:05:58.007 --> 00:06:02.000
let's jump into a simple implementation.

