WEBVTT

00:05.700 --> 00:13.620
So you at this point in the course have gotten your application back and now you're on to the bug testing.

00:13.890 --> 00:17.520
This is a crucial phase of the application process.

00:17.530 --> 00:19.200
You listened to my previous little bit.

00:19.200 --> 00:20.620
Don't be afraid of bugs.

00:20.630 --> 00:23.790
Expect the bugs and embarrass the bugs.

00:23.790 --> 00:29.610
There is no reason why the bug hunting process can't be fun because the more bugs you find the more

00:29.610 --> 00:30.830
bugs you can fix.

00:31.020 --> 00:34.920
The more bugs I find the less bugs that my users will find.

00:35.990 --> 00:38.820
I like to think of bugs kind of like panning for gold.

00:38.840 --> 00:44.780
You just strike over here or you strike over there and eventually you'll find something with software

00:44.840 --> 00:47.400
it honestly you can't find every single bug.

00:47.430 --> 00:49.040
But you want to find the big ones.

00:49.040 --> 00:55.400
So don't neglect this section and I'm going to give you some tips and tricks some warm up ideas for

00:55.400 --> 00:57.330
how you can find bugs.

00:57.330 --> 01:02.600
The general idea behind how you're going to look for all of the bugs in your mobile application or your

01:02.600 --> 01:08.750
web application or whatever your freelancer is deliver to you is just time on task.

01:08.750 --> 01:11.830
That's why we talked previously about using the poem d'Oro.

01:11.990 --> 01:17.660
Personally if I have a medium size application I will go through four to five poem Darroze and that's

01:17.750 --> 01:22.700
hour and 40 minutes of solidly hitting the Web site or the mobile application or whatever it is that

01:22.700 --> 01:23.730
you've built.

01:23.780 --> 01:30.440
You might not be as OCD as I am but I prefer I would like to see you at least hit the major areas.

01:31.940 --> 01:37.220
So the first thing I do whenever I get my application back is I start with number 1 graphics graphics

01:37.220 --> 01:41.720
is an easy one and it's a it's a kind of a sore spot I've noticed in there very often when you find

01:41.720 --> 01:47.870
problems in the graphics department now when you have a developer they most likely are not.

01:47.870 --> 01:52.790
Also the graphic designer they most likely took design from somewhere else earlier in the course we

01:52.790 --> 01:58.760
talked about getting a graphic designer and how you can get the end product which is a photoshop file

01:58.900 --> 02:01.520
their developer can convert that into your application.

02:01.760 --> 02:07.250
If you didn't get a graphic designer and you're using a template I still suggest you do a quick view

02:07.250 --> 02:09.430
of the graphics itself.

02:09.470 --> 02:15.370
It's not really the same because templates are typically designed to look good no matter what and the

02:15.380 --> 02:21.350
developers not following a set designed picture he's just using the elements that are available.

02:21.350 --> 02:26.840
Let's assume that you use a graphic designer and he has 99 designs even you have a page that you've

02:26.840 --> 02:28.670
designed for your web application.

02:28.670 --> 02:34.040
Now look at the application that your freelancer brought up or is delivered to you in a separate window

02:34.100 --> 02:38.110
open up the photoshop file of your design.

02:38.240 --> 02:39.880
If there is immediate discrepancies.

02:39.950 --> 02:42.180
Well there you go write those down.

02:42.200 --> 02:44.370
Send them to your freelancer.

02:44.660 --> 02:48.620
I want you to make sure that you're using Google Docs or this entire thing and when you use Google Docs

02:48.620 --> 02:50.590
you find a bug right next to it.

02:50.600 --> 02:53.150
The time that you find the bug at.

02:53.240 --> 02:56.700
Don't ask me why it helps later it helps the developer.

02:56.900 --> 02:58.290
It's just worth doing.

02:58.700 --> 02:59.900
You do take a quick glance.

02:59.960 --> 03:04.000
You'll look at your rear graphic design you might notice something immediately after that.

03:04.010 --> 03:06.800
Once you think you've noticed all the big things look really small.

03:06.800 --> 03:10.720
Zoom into your photoshop file and look at the application.

03:10.730 --> 03:13.050
Chances are you'll find things that are off.

03:13.070 --> 03:18.200
There is a term we use called pixel perfect pixel perfect means that the application matches every single

03:18.200 --> 03:20.220
pixel of the graphic design.

03:20.300 --> 03:23.030
It's up to you if you want to be that close to the actual design.

03:23.030 --> 03:24.410
I always go for pixel perfect.

03:24.410 --> 03:28.640
There's no reason it shouldn't be the case that the developer can make the exact same way that your

03:28.640 --> 03:30.080
graphic designer designed it.

03:30.290 --> 03:35.660
But if you want to have that strict of a guideline it's very possible that you could end up with a lot

03:35.660 --> 03:36.940
of mismatches.

03:37.010 --> 03:41.500
Do the buttons look the exact same to the pages load correctly.

03:41.510 --> 03:44.430
Are there breaks in the line pages.

03:44.660 --> 03:49.470
Look at the width of the Web site is it wider than it was in the graphic design.

03:49.770 --> 03:53.090
Is the background color match the graphic design.

03:53.120 --> 03:59.530
These are things that are very common and a lot of developers would try to cut corners by skipping over.

03:59.740 --> 04:04.780
It might even be the case that you can't put your finger on what exactly is wrong but it's worth highlighting

04:04.780 --> 04:10.420
it to the freelancer and showing them hey this doesn't look right because chances are if you drill down

04:10.420 --> 04:14.970
and zoom in you'll notice that something is off in some detail that they missed.

04:15.720 --> 04:17.520
So graphic design is fairly intuitive.

04:17.520 --> 04:23.130
Just use your eyeballs and scan it see if you notice anything that's off and make sure that you report

04:23.130 --> 04:23.760
it.

04:23.760 --> 04:27.120
If you don't want to stick to pixel perfect guideline that's up to you.

04:27.120 --> 04:31.110
But you do want to make sure that sticks to your graphic design because you liked your graphic design

04:31.110 --> 04:32.020
to begin with.

04:32.040 --> 04:33.790
There's no reason to change it at this point.

04:34.600 --> 04:37.220
The second thing I move on to you after that are forms.

04:37.240 --> 04:39.970
Chances are your application has a form somewhere in it.

04:40.060 --> 04:45.910
Well then on it's a form for logging in or a form for entering an account information you know whatever

04:45.910 --> 04:47.080
your application does.

04:47.080 --> 04:50.000
Chances are it's going to take input from the user.

04:50.050 --> 04:51.100
Look at those forms.

04:51.100 --> 04:56.210
These are problem areas every single time we build an application.

04:56.260 --> 05:01.870
Try filling them out as yourself try filling out some honest information see how that reacts after you

05:01.870 --> 05:02.320
do that.

05:02.330 --> 05:09.850
Try is bouncing around the page and try to fill out all of the functionality of your application then

05:09.850 --> 05:11.900
go back and imagine you're someone else.

05:11.950 --> 05:16.210
We call this in software design test cases.

05:16.240 --> 05:17.590
Just imagine you're someone else.

05:17.740 --> 05:22.660
If you signed up as someone who was 30 years old go back and sign up to someone who's 45 years old 6

05:22.660 --> 05:23.410
years old.

05:23.410 --> 05:24.500
Change your name.

05:24.760 --> 05:32.400
Try inserting an accent mark on top of your name just try different combinations out.

05:32.470 --> 05:33.730
It doesn't make sense to you.

05:33.730 --> 05:37.840
Thinking about it because probably you're not familiar with how the software process works but the more

05:37.840 --> 05:41.880
you do this the more likely you'll find some kind of internal error.

05:41.980 --> 05:45.130
At first you'll notice immediately there's some issues.

05:45.130 --> 05:50.140
One of my favorite things to do with forms is enter in the maximum character limit.

05:50.230 --> 05:55.510
A lot of developers forget to add the maximum character limit so meaning it says they like first name

05:55.510 --> 05:56.300
last name.

05:56.440 --> 05:59.050
What if my first name has 100 digits in it.

05:59.230 --> 06:00.340
You'd say why does that matter.

06:00.340 --> 06:02.590
Well chances are someone's going to try that.

06:02.650 --> 06:05.040
There's a good likelihood that it could crash your system.

06:05.140 --> 06:08.020
So try doing that try entering a name that has foreign foreigner characters in it.

06:08.020 --> 06:09.210
See if the system accepts it.

06:09.220 --> 06:11.170
If it doesn't accept it what happens.

06:11.170 --> 06:15.090
Try to break and try to be the worst user you possibly can.

06:15.160 --> 06:20.500
Try to enter into special characters enter in a percent sign or an asterisk or things that you wouldn't

06:20.500 --> 06:22.660
expect to put in your form.

06:22.660 --> 06:23.710
If it asked for a digit.

06:23.710 --> 06:30.470
Try putting in a word and if it asks for a word try putting in a special character try to put in everything

06:30.470 --> 06:32.390
wrong that you can think of.

06:32.480 --> 06:35.810
Like if it aspartate your city and ask for your zip code.

06:35.820 --> 06:41.540
Put your state do these kind of basic things you'll find out very quickly where the developer cut corners

06:41.750 --> 06:45.450
and things he or she might have forgotten to accommodate.

06:45.470 --> 06:51.390
Poor after you're done screwing around with your forms and anything that can take in information.

06:51.550 --> 06:53.680
Try creating multiple counts.

06:53.980 --> 06:58.210
Try making a count for a fake use or another fake use or another fake user and another fake user.

06:58.210 --> 07:01.000
Now if your application communicates between the two.

07:01.060 --> 07:04.870
Try to communicate for example with a sprint Qik application.

07:04.870 --> 07:11.110
We had one that had messaging and so in order to test the messaging it wasn't sufficient for us to create

07:11.110 --> 07:13.090
one account and send a bunch of messages.

07:13.240 --> 07:18.730
We had to create hundreds of accounts with different information and then communicate back and forth.

07:19.000 --> 07:24.260
We didn't just try to communicate in single regular text to try to communicate messages or try to communicate

07:24.250 --> 07:25.360
in special characters.

07:25.360 --> 07:30.880
We tried to communicate in numbers who tried to communicate anything that could possibly break the system.

07:30.910 --> 07:38.880
You don't have to use 100 users but you should create three or four and after you've tested out the

07:38.880 --> 07:44.730
graphics the forms you've created a bunch of accounts and you try to do any type of interaction where

07:44.730 --> 07:46.800
these accounts communicate with each other.

07:47.080 --> 07:52.380
I then typically just move on to a phase where I try to see every single screen.

07:52.380 --> 07:57.180
Now you might have forgotten all of the screens you design with your graphic designer or there are a

07:57.180 --> 07:59.430
lot of screens you might not have thought about.

07:59.490 --> 08:04.350
Try to find a page that doesn't exist if you have a search bar in your application go to a search bar

08:04.350 --> 08:06.810
and just search for all sorts of things that don't exist.

08:06.810 --> 08:08.100
See how it reacts.

08:09.070 --> 08:14.040
If your application handles images that's a big area for potential bugs.

08:14.050 --> 08:16.850
Try uploading files that aren't correct.

08:16.850 --> 08:21.610
You can ask for a jpeg PSINet a G if it takes all common image files.

08:21.610 --> 08:24.390
Try sending in a movie file to see what happens.

08:24.460 --> 08:28.880
Try sending a image that is way too large and one that's way too small.

08:29.200 --> 08:33.580
Honestly you don't even need to plan it out just see what's on your computer upload it and see what

08:33.580 --> 08:34.560
happens.

08:34.570 --> 08:39.980
Chances are you'll run into something and you can keep growing your google doc list.

08:40.000 --> 08:46.360
Now I want to stress in this lecture that there is no set plan for bug hunting.

08:46.420 --> 08:51.970
People build their entire careers off of software testing so don't expect that you're going to get every

08:51.970 --> 08:52.570
single one.

08:52.570 --> 08:55.440
Don't even expect that you're going to get 80 percent of them.

08:55.450 --> 09:00.700
There are a lot of bugs that only come out under for Ensign's performance stress.

09:00.700 --> 09:04.480
You're not going to be able to find all the bugs that happen that could potentially happen when you

09:04.480 --> 09:06.930
have thousands of users who don't expect to.

09:07.050 --> 09:10.460
Keep in mind that these things are going to happen in the future.

09:11.210 --> 09:18.310
The point to being a good bug hunter I think is just spending as much time as you can with your application.

09:18.350 --> 09:23.390
Try to flip over every single stone you can without getting too excessive.

09:23.390 --> 09:29.060
You don't want to spend tens of hours messing with your application unless you have the free time to

09:29.060 --> 09:29.560
do that.

09:29.580 --> 09:31.510
And that's worth doing for you.

09:31.520 --> 09:37.610
I typically think that it's not try to be economical with your time but at the same time make sure you're

09:37.610 --> 09:42.290
spending at least an hour playing with it because I think that in the end you'll have a much better

09:42.320 --> 09:43.670
outcome.

09:43.670 --> 09:48.870
Keep in mind also that bugs typically operate in clusters once you find one bug.

09:48.950 --> 09:53.020
It's not that you just found a bug you found an entire area that your developer hasn't thought about.

09:53.030 --> 09:55.380
So you can really kind of go after that.

09:55.470 --> 09:56.720
The mobile example.

09:56.720 --> 10:03.290
Maybe he didn't plan for how the system reacts when it's under Wi-Fi or how it reacts when it's on the

10:03.290 --> 10:04.790
edge network.

10:04.790 --> 10:09.850
When you're on say like the Edge network meaning you're really out there you have a very limited connection.

10:09.860 --> 10:14.330
How did the pages of load other sections are very browser heavy.

10:14.480 --> 10:19.650
If you try that out you might head a cluster of bugs so happy hunting.

10:19.650 --> 10:22.080
Spend as much time as you can on it.

10:22.080 --> 10:24.780
Don't get frustrated by the ones you can't find.

10:24.780 --> 10:27.760
Keep in mind you're not going to find all of them.

10:27.810 --> 10:34.380
This lecture didn't have a step by step structure bug testing unfortunately just does not have a structure.

10:34.380 --> 10:40.770
It's really kind of an art and less science so I think the best way of being a good bug hunter is to

10:40.770 --> 10:41.950
have fun with it.

10:42.030 --> 10:48.090
Try to beat your application try to break it down try to screw it up as much as you can because at the

10:48.090 --> 11:03.420
end of the day the more you do that the better the application is going to be in its final version.
