WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.320
Hello,

00:00:00.320 --> 00:00:00.960
folks.

00:00:00.960 --> 00:00:02.050
Welcome back.

00:00:02.050 --> 00:00:06.830
Let us talk about AWS Cloud Development Kit or City Gate address.

00:00:06.830 --> 00:00:07.850
It has been called.

00:00:07.850 --> 00:00:12.090
This is a new deployment framework that Amazon has launched.

00:00:12.090 --> 00:00:14.620
Two helpers Prohibition Cloud Resources.

00:00:14.620 --> 00:00:16.740
Let us go ahead and see what is wrong with it.

00:00:16.740 --> 00:00:21.090
Existing my turns off provisioning resources when you want to provision some resource on

00:00:21.090 --> 00:00:21.710
the cloud,

00:00:21.710 --> 00:00:24.550
One of the common ways of doing it is a manual way.

00:00:24.550 --> 00:00:27.070
Let s say you want to create an easy two instance.

00:00:27.070 --> 00:00:28.350
You go to the control,

00:00:28.350 --> 00:00:29.890
click on a few buttons on,

00:00:29.890 --> 00:00:31.850
then you get that resorts created.

00:00:31.850 --> 00:00:34.750
It is very easy to get started.

00:00:34.750 --> 00:00:38.960
The problem with this approach is it is not going to be easily reproducible.

00:00:38.960 --> 00:00:43.210
It is going to be error prone because you need to know where you need to click on what

00:00:43.210 --> 00:00:46.070
you're clicking it on what output it is going to produce.

00:00:46.070 --> 00:00:46.890
Likewise,

00:00:46.890 --> 00:00:49.160
it is quite time consuming as well.

00:00:49.160 --> 00:00:51.350
The other approaches a scripted approach.

00:00:51.350 --> 00:00:53.660
Maybe you will be using an AWS.

00:00:53.660 --> 00:00:58.640
A CIA light to create a resource or some other sdk is to create a resource that are some

00:00:58.640 --> 00:00:59.840
big force in this approach.

00:00:59.840 --> 00:01:00.550
For example,

00:01:00.550 --> 00:01:05.770
if you're calling an A P A on the AWS side on for some network reasons or some other delays

00:01:05.770 --> 00:01:09.570
that is AP called face how you're going toe handle that failure.

00:01:09.570 --> 00:01:11.580
Are you going to handle the failure in a script?

00:01:11.580 --> 00:01:16.640
Then your script becomes bloated with error handling on not just having resource

00:01:16.640 --> 00:01:17.270
provisioning.

00:01:17.270 --> 00:01:21.040
It is also having the difficulty off making updates.

00:01:21.040 --> 00:01:25.560
So whenever you are wanting to add more resources or want to change some resources,

00:01:25.560 --> 00:01:27.100
how do you make those updates?

00:01:27.100 --> 00:01:29.640
Because the scripts had to be watching control now.

00:01:29.640 --> 00:01:30.580
Likewise,

00:01:30.580 --> 00:01:32.530
How do you know which is the source has been created?

00:01:32.530 --> 00:01:33.950
Are you going to wait for the A P A.

00:01:33.950 --> 00:01:37.850
Call constantly pull them and find out what resource has been created?

00:01:37.850 --> 00:01:40.940
Or so if the resource has been dependent?

00:01:40.940 --> 00:01:42.350
Are you going to wait for that?

00:01:42.350 --> 00:01:43.760
Finally,

00:01:43.760 --> 00:01:45.910
if for some reason you want to roll back,

00:01:45.910 --> 00:01:49.680
how do you roll back when your script is being running or an impending state?

00:01:49.680 --> 00:01:53.350
So these are the some of the problems that you have with a scripted deployment.

00:01:53.350 --> 00:01:57.270
The other approach is using and the source provisioning engines like,

00:01:57.270 --> 00:01:57.790
for example,

00:01:57.790 --> 00:02:01.580
you can use the total formation engine are the template on the back off,

00:02:01.580 --> 00:02:04.710
which is having a Justin format or an amul format.

00:02:04.710 --> 00:02:07.630
Then you give it to the cloud formation service,

00:02:07.630 --> 00:02:09.170
that provision of the source for you.

00:02:09.170 --> 00:02:11.200
This solves some problems like,

00:02:11.200 --> 00:02:11.680
for example,

00:02:11.680 --> 00:02:13.000
it is very easy to ultimate.

00:02:13.000 --> 00:02:17.420
You can replicate the resources in multiple and amendments or multiple regions,

00:02:17.420 --> 00:02:21.210
but at the same time you need to learn a new syntax,

00:02:21.210 --> 00:02:22.700
which is not quite convenient.

00:02:22.700 --> 00:02:26.570
For many people are people who are just beginning to you store information,

00:02:26.570 --> 00:02:29.450
then the Jasons Index can be quite daunting.

00:02:29.450 --> 00:02:33.770
The other problem with this is that is not a lot of obstruction.

00:02:33.770 --> 00:02:34.330
For example,

00:02:34.330 --> 00:02:36.500
if you return a court formation template on,

00:02:36.500 --> 00:02:37.970
if you want to create a VPC,

00:02:37.970 --> 00:02:40.850
you're typically going to write about 200 lines off court.

00:02:40.850 --> 00:02:41.270
There,

00:02:41.270 --> 00:02:43.150
finally,

00:02:43.150 --> 00:02:47.650
that one more upwards that the people take when you're trying to write a resource and more

00:02:47.650 --> 00:02:52.880
document object model is using some tools like a troposphere or spark information,

00:02:52.880 --> 00:02:56.520
another layer off obstruction on top off port formation itself.

00:02:56.520 --> 00:02:58.680
So this against all some problems,

00:02:58.680 --> 00:02:59.280
for example,

00:02:59.280 --> 00:03:03.180
you're writing the entire court in the real cold format you're using an I D.

00:03:03.180 --> 00:03:09.100
You re rating in the court and fight on or Ruby or some other language on.

00:03:09.100 --> 00:03:13.760
You are also maintaining your desired state here because you're saying I want this vpc I

00:03:13.760 --> 00:03:15.290
want to submit to be this on.

00:03:15.290 --> 00:03:20.640
Then I wanted easy to instance on top offered You are informing the tool that this is the

00:03:20.640 --> 00:03:21.920
decided state you want.

00:03:21.920 --> 00:03:24.360
But there are some problems with this approach also,

00:03:24.360 --> 00:03:24.960
for example,

00:03:24.960 --> 00:03:26.600
the abstractions is not building.

00:03:26.600 --> 00:03:30.560
You need to write your own obstructions on top of confirmation.

00:03:30.560 --> 00:03:31.370
For example,

00:03:31.370 --> 00:03:32.660
if you're using troposphere,

00:03:32.660 --> 00:03:36.380
you're still writing around 200 lines off court for just creating and vpc.

00:03:36.380 --> 00:03:38.890
So this is where City Gate comes in.

00:03:38.890 --> 00:03:41.130
This is a completely a different approach.

00:03:41.130 --> 00:03:45.290
You are going to look at your entire infrastructure as competent dies,

00:03:45.290 --> 00:03:45.450
too.

00:03:45.450 --> 00:03:46.440
So in this case,

00:03:46.440 --> 00:03:48.080
if you want to create an application,

00:03:48.080 --> 00:03:49.300
you can agree a thing off.

00:03:49.300 --> 00:03:51.650
Your application has made up off different stacks,

00:03:51.650 --> 00:03:53.860
which is the same as they're called formation stack.

00:03:53.860 --> 00:03:57.600
But you're going to use the building concepts that Amazon provides you.

00:03:57.600 --> 00:03:58.030
So,

00:03:58.030 --> 00:04:02.690
using those constructs you're going to compose your infrastructure on then the city cables

00:04:02.690 --> 00:04:05.880
synthesize Ondo formation template for you,

00:04:05.880 --> 00:04:10.150
which is again deployable using your familiar deployment mechanisms.

00:04:10.150 --> 00:04:15.200
So CTK provides you on list off higher level resource constructs on.

00:04:15.200 --> 00:04:17.340
Does the source concepts have defaults built?

00:04:17.340 --> 00:04:17.520
And,

00:04:17.520 --> 00:04:18.040
for example,

00:04:18.040 --> 00:04:19.620
if you want the lunch and BBC,

00:04:19.620 --> 00:04:23.590
it already has the logic to deploy in that instance,

00:04:23.590 --> 00:04:28.620
and the greater voting tables attach an Internet gateway on all those defaults are building

00:04:28.620 --> 00:04:30.340
with some tea for security groups.

00:04:30.340 --> 00:04:30.950
Also,

00:04:30.950 --> 00:04:36.730
you can think off the constructs as an comm portable cloud components on using those

00:04:36.730 --> 00:04:39.750
components you will really complex and architectures.

00:04:39.750 --> 00:04:43.750
So when you're talking about higher level concepts or library,

00:04:43.750 --> 00:04:46.620
Amazon s published the reference documentation,

00:04:46.620 --> 00:04:51.240
which has construct library for almost all the resources on there,

00:04:51.240 --> 00:04:57.010
constantly updating it for every new service on whatever services not there that is also

00:04:57.010 --> 00:04:58.350
getting updated as we can see,

00:04:58.350 --> 00:05:02.250
some off them has been updated frequently on the questions for each of them.

00:05:02.250 --> 00:05:03.490
Keep changing on.

00:05:03.490 --> 00:05:05.440
If there is a new service that is coming up on,

00:05:05.440 --> 00:05:07.270
they do market with experimental,

00:05:07.270 --> 00:05:09.260
and then you can go ahead and use them.

00:05:09.260 --> 00:05:13.510
So the advantage of the nurses there are two levels of concepts everyone and L two.

00:05:13.510 --> 00:05:17.230
So if native CTK contact is not available,

00:05:17.230 --> 00:05:22.030
you should be able to still call on a cloud formation resource if it is supported from

00:05:22.030 --> 00:05:23.210
Siddeeq it directly.

00:05:23.210 --> 00:05:23.530
So,

00:05:23.530 --> 00:05:23.900
basically,

00:05:23.900 --> 00:05:25.180
if you're writing CD K,

00:05:25.180 --> 00:05:26.300
you can write the city.

00:05:26.300 --> 00:05:32.110
Callable resource are used the Native Cloud Formation Resource on the other advantage of

00:05:32.110 --> 00:05:33.390
using Sirikit ISS.

00:05:33.390 --> 00:05:36.130
It is a mighty language software deployment framework,

00:05:36.130 --> 00:05:40.260
meaning that you can write your court and multiple different languages.

00:05:40.260 --> 00:05:45.790
It can synthesize into an AWS court formation template which can be watching controlled in

00:05:45.790 --> 00:05:47.200
your get report centuries.

00:05:47.200 --> 00:05:50.790
So what are the different languages that are supported today?

00:05:50.790 --> 00:05:53.850
You have ah typescript JavaScript,

00:05:53.850 --> 00:05:56.680
Java Dark Ned on by dawn on,

00:05:56.680 --> 00:05:57.630
go on.

00:05:57.630 --> 00:06:01.040
It is an open source framework so that you can go ahead.

00:06:01.040 --> 00:06:01.660
Andi,

00:06:01.660 --> 00:06:03.230
extend them as required.

00:06:03.230 --> 00:06:08.680
If there is a concept that is required for your organization with some certainty Fort pre

00:06:08.680 --> 00:06:09.070
baked in.

00:06:09.070 --> 00:06:09.630
For example,

00:06:09.630 --> 00:06:11.660
if you're creating an s three bucket on,

00:06:11.660 --> 00:06:12.510
you want the extreme,

00:06:12.510 --> 00:06:16.010
but get to be encrypted by default on no public access.

00:06:16.010 --> 00:06:18.870
Then you can create another concept on top off city case.

00:06:18.870 --> 00:06:25.630
This source concepts then you can publish it to your organization so that they can go ahead

00:06:25.630 --> 00:06:26.330
and use them.

00:06:26.330 --> 00:06:29.430
So from a bigger picture,

00:06:29.430 --> 00:06:32.110
this is what is happening under the hole in Serie K.

00:06:32.110 --> 00:06:35.070
So you write your source court for CTK on.

00:06:35.070 --> 00:06:36.000
Then you ask Siri,

00:06:36.000 --> 00:06:37.490
get to compile it on.

00:06:37.490 --> 00:06:38.600
Once it is compiling,

00:06:38.600 --> 00:06:39.940
it is going to pull up the court.

00:06:39.940 --> 00:06:44.160
But do the allegations on it is going to generate and or formation template.

00:06:44.160 --> 00:06:44.800
So basically,

00:06:44.800 --> 00:06:49.380
this is the assembly language off the AWS cloud on this is into the AWS confirmation

00:06:49.380 --> 00:06:50.500
service on.

00:06:50.500 --> 00:06:51.880
Then you deploy it.

00:06:51.880 --> 00:06:57.800
Now that you are writing cold as native language is no longer your infrastructure has to be

00:06:57.800 --> 00:06:58.270
treated.

00:06:58.270 --> 00:07:01.830
Escort your since infrastructure has become course,

00:07:01.830 --> 00:07:03.670
so because you are writing it natively.

00:07:03.670 --> 00:07:05.000
So in the next lecture,

00:07:05.000 --> 00:07:08.680
we're going to see how to install CTK on get started.

