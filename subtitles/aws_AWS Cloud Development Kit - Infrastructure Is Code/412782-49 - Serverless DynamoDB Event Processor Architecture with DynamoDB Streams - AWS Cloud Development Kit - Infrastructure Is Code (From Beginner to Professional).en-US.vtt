WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.300
Hello,

00:00:00.300 --> 00:00:00.950
folks.

00:00:00.950 --> 00:00:03.550
Welcome to another lecture on CD K.

00:00:03.550 --> 00:00:08.540
The act actual pattern that we're going to see today is on databases.

00:00:08.540 --> 00:00:10.720
They went processor on in particular,

00:00:10.720 --> 00:00:12.760
we're going to talk about Dynamodb.

00:00:12.760 --> 00:00:13.450
Evans.

00:00:13.450 --> 00:00:18.460
If you have an application on that are even that are happening in your application,

00:00:18.460 --> 00:00:23.220
for example and uses signing up to your application or they're making up an order.

00:00:23.220 --> 00:00:24.230
Then based on that,

00:00:24.230 --> 00:00:26.760
even if you want to take some double stream actions,

00:00:26.760 --> 00:00:27.470
for example,

00:00:27.470 --> 00:00:29.190
if unusual is made in order,

00:00:29.190 --> 00:00:34.450
then you want to inform your warehouse two back is the order on get it ready for shipping

00:00:34.450 --> 00:00:37.330
on different user signing up for your website.

00:00:37.330 --> 00:00:41.170
Then you want to trigger an event which will send them and welcome kit also.

00:00:41.170 --> 00:00:42.790
So there are different types of scenarios,

00:00:42.790 --> 00:00:48.110
but you want to take some actions based on particular event are an entry in your databases

00:00:48.110 --> 00:00:48.110
.

00:00:48.110 --> 00:00:50.460
So this is what we're going to see today.

00:00:50.460 --> 00:00:52.510
So our demo is going to look like this.

00:00:52.510 --> 00:00:53.510
We are going to build,

00:00:53.510 --> 00:00:58.950
and I'm on TV on in that Daniel would be we're going to configure the animal devi streams,

00:00:58.950 --> 00:01:02.300
which can have on don't steam action For example,

00:01:02.300 --> 00:01:07.440
you can trigger and Lambda function as and don't see even processor on that Lambda can have

00:01:07.440 --> 00:01:09.450
any business logic that you would like.

00:01:09.450 --> 00:01:10.140
Let us say,

00:01:10.140 --> 00:01:10.670
for example,

00:01:10.670 --> 00:01:11.250
in this case,

00:01:11.250 --> 00:01:14.920
we're just going to take that in a given on Log it into our club awards,

00:01:14.920 --> 00:01:18.210
but you can go ahead and do something like a tree getting another.

00:01:18.210 --> 00:01:20.160
My core service are sending an E.

00:01:20.160 --> 00:01:23.800
May our packaging that information to another step function.

00:01:23.800 --> 00:01:25.500
So for ingesting the heavens,

00:01:25.500 --> 00:01:28.480
you can have any mobile events are easy to instance,

00:01:28.480 --> 00:01:34.170
or you can go ahead and test it out by doing Manuel entry into the demo TV or so So our

00:01:34.170 --> 00:01:36.900
architecture is going to be quite simple to services,

00:01:36.900 --> 00:01:40.180
then would be on then streams on Ben Lambert function.

00:01:40.180 --> 00:01:43.550
Let us go toe acidic a stack and see how we can build this.

00:01:43.550 --> 00:01:46.020
This is the fact that we're going to use.

00:01:46.020 --> 00:01:47.460
I have named it as solar,

00:01:47.460 --> 00:01:52.150
lest animal db Stream processor architecture with streams stack.

00:01:52.150 --> 00:01:57.030
The reason that it has a big name is so you can clearly identify what this for a stack is

00:01:57.030 --> 00:01:57.790
doing on.

00:01:57.790 --> 00:01:59.630
Then you can go ahead and could be.

00:01:59.630 --> 00:02:01.690
Take a look at the resources on right now,

00:02:01.690 --> 00:02:02.860
there are no resources.

00:02:02.860 --> 00:02:07.030
All of them are comments just to help us to see what resources are required on.

00:02:07.030 --> 00:02:08.590
There are no imports as well.

00:02:08.590 --> 00:02:12.210
So afternoon when I go ahead and add a source and if there's a dependency,

00:02:12.210 --> 00:02:17.870
I go ahead at the import on most of the imports that that necessary for this stack has

00:02:17.870 --> 00:02:20.610
already been installed in our project Repository.

00:02:20.610 --> 00:02:24.460
You can see here most off them Dynamodb lambda I am everything is there.

00:02:24.460 --> 00:02:26.900
So if you're going to do it for the first time,

00:02:26.900 --> 00:02:29.850
make sure that you're installing it while you're importing as well.

00:02:29.850 --> 00:02:33.280
So let's talk with our dynamodb like this.

00:02:33.280 --> 00:02:34.750
Go ahead and add the import.

00:02:34.750 --> 00:02:42.250
I'm going to call my TV,

00:02:42.250 --> 00:02:45.310
ask AP a TV so that that is going to be my back.

00:02:45.310 --> 00:02:47.290
And on under this,

00:02:47.290 --> 00:02:49.180
we're going to have a table on.

00:02:49.180 --> 00:02:51.170
Let us have a small scoping on.

00:02:51.170 --> 00:02:54.580
Then Texas have the name off the table as well on.

00:02:54.580 --> 00:02:58.550
I like to create my partition key as a simple string value key.

00:02:58.550 --> 00:03:01.150
Let this cool head and at that,

00:03:01.150 --> 00:03:08.810
So I'm going to call my primary key as underscore idea on it is going to be off attribute

00:03:08.810 --> 00:03:13.750
string so that it's on the partition key part.

00:03:13.750 --> 00:03:17.230
So here is where the important configuration off the streams is coming.

00:03:17.230 --> 00:03:19.600
And so I'm going to say dynamo TV,

00:03:19.600 --> 00:03:22.500
dark stream view died on here.

00:03:22.500 --> 00:03:27.690
You have many that first team you I want to create on a trigger notification for new and

00:03:27.690 --> 00:03:29.780
old images or sifters and modification.

00:03:29.780 --> 00:03:34.250
So that is what we're choosing here on adding a remora policy because I want my

00:03:34.250 --> 00:03:36.650
connectivity end up when the stock is getting deleted.

00:03:36.650 --> 00:03:38.250
It was after come out here.

00:03:38.250 --> 00:03:45.270
So we got Howard Animal DB created on me also enabled the streams.

00:03:45.270 --> 00:03:46.680
So let us go head on.

00:03:46.680 --> 00:03:51.520
Used the lambda function that will be processed or trigger when my dynamodb hasn't given.

00:03:51.520 --> 00:03:56.900
So the court that they're going to use this here you have the dynamodb same processor.

00:03:56.900 --> 00:03:57.790
I have opened it.

00:03:57.790 --> 00:04:02.350
So what this court is basically going to do is it is going to receive the event on just

00:04:02.350 --> 00:04:05.060
publish it into the cloudwatch locks.

00:04:05.060 --> 00:04:06.610
It is not going to do anything else.

00:04:06.610 --> 00:04:09.910
So we will in Justin event and see what happens.

00:04:09.910 --> 00:04:11.360
So for the stack,

00:04:11.360 --> 00:04:13.950
let's go ahead and read the lumber function first.

00:04:13.950 --> 00:04:34.160
No,

00:04:34.160 --> 00:04:36.380
we have read that Lambda Function code.

00:04:36.380 --> 00:04:38.880
They just go ahead and write the Lambda function itself.

00:04:38.880 --> 00:04:44.390
I'm going to call this as Dynamodb Stream processor.

00:04:44.390 --> 00:04:48.020
Function on it is under the land.

00:04:48.020 --> 00:04:51.090
A model if you room where we have not imported the Lambda model.

00:04:51.090 --> 00:04:53.950
So let me go ahead and import the Lambda model here.

00:04:53.950 --> 00:05:04.050
How unnamed for my function.

00:05:04.050 --> 00:05:16.900
And then the function name followed by my description which will help me to understand what

00:05:16.900 --> 00:05:20.970
this prank function is going to do with this is going to process the animal DP streaming.

00:05:20.970 --> 00:05:30.590
Did that Doings under Lambda We will have run tank on under that we will have by Don't 3.7

00:05:30.590 --> 00:05:32.230
on then the handler.

00:05:32.230 --> 00:05:35.760
So the handler is coming from here.

00:05:35.760 --> 00:05:36.490
If you go here,

00:05:36.490 --> 00:05:43.990
we have the lambda handler just going to pick this up and then say index dot handler on

00:05:43.990 --> 00:05:45.600
court is going to be in Langley already.

00:05:45.600 --> 00:05:45.940
They did.

00:05:45.940 --> 00:05:46.910
It is in this function.

00:05:46.910 --> 00:05:54.080
So that is what we're going to adhere on Going to set out my diamond.

00:05:54.080 --> 00:05:56.000
How long I want my function to run.

00:05:56.000 --> 00:05:58.450
I'm going to set it as a minimum off a boat.

00:05:58.450 --> 00:06:01.410
Three seconds or maximum in this case,

00:06:01.410 --> 00:06:03.170
off three seconds on.

00:06:03.170 --> 00:06:07.170
I'm going to reserve my concurrency so that my Randall doesn't get triggered by too many

00:06:07.170 --> 00:06:07.770
heavens.

00:06:07.770 --> 00:06:14.980
So long level finally.

00:06:14.980 --> 00:06:18.350
Now that we got our Lambda function also created,

00:06:18.350 --> 00:06:21.340
we need to connect our dynamodb strange to Orlando function.

00:06:21.340 --> 00:06:23.700
That is what we're going to to in this case,

00:06:23.700 --> 00:06:29.830
we have going toe have a variable which is going to say hip dynamodb even source on,

00:06:29.830 --> 00:06:30.960
we're going to use a new,

00:06:30.960 --> 00:06:33.410
more new called as the Lambda even sources.

00:06:33.410 --> 00:06:36.850
And since we have not important it like the school had imported,

00:06:36.850 --> 00:06:43.090
we have imported them just copying this.

00:06:43.090 --> 00:06:46.100
So just go ahead and added on the divan sources,

00:06:46.100 --> 00:06:49.280
we have something called last animal Devi one source on.

00:06:49.280 --> 00:06:52.660
Then we're going to say which table is going to trigger it if you don't where we have

00:06:52.660 --> 00:06:55.520
created a table here called us a p a t B.

00:06:55.520 --> 00:06:58.600
So you can just go on and at that on then what?

00:06:58.600 --> 00:06:59.550
From what position?

00:06:59.550 --> 00:07:01.760
So that's what we in starting position will be there.

00:07:01.760 --> 00:07:03.560
I'm going to say,

00:07:03.560 --> 00:07:11.900
lambda dot stopping position Dark trim Harriton Onda In case that is an error for any

00:07:11.900 --> 00:07:15.890
badges it that my people interest that is coming up London that is not able to trigger the

00:07:15.890 --> 00:07:16.680
lumber properly.

00:07:16.680 --> 00:07:19.350
So if you enable by sick batch on error,

00:07:19.350 --> 00:07:20.970
what is going to happen is,

00:07:20.970 --> 00:07:22.520
if there are 10 items,

00:07:22.520 --> 00:07:25.650
then it is going to send you badges or five items.

00:07:25.650 --> 00:07:28.860
That is what is going toe do when you accept this.

00:07:28.860 --> 00:07:29.010
Well,

00:07:29.010 --> 00:07:33.350
it's true now we would advise this even source to our lambda function.

00:07:33.350 --> 00:07:37.550
So dynamodb seem processor function,

00:07:37.550 --> 00:07:40.300
that ad even source on.

00:07:40.300 --> 00:07:43.110
Then we will have our events all sorts of mapped.

00:07:43.110 --> 00:07:44.960
So that is all here to do.

00:07:44.960 --> 00:07:47.700
Let's go ahead and synthesizer stack on trying.

00:07:47.700 --> 00:07:48.610
Deploy this.

00:07:48.610 --> 00:07:52.810
Let me quickly check if I have missed out anything but because when you're typing a lot of

00:07:52.810 --> 00:07:53.040
length,

00:07:53.040 --> 00:07:53.390
of course,

00:07:53.390 --> 00:07:57.090
there is possibility that you might miss out something on day.

00:07:57.090 --> 00:08:02.080
One thing that they notice here is that the read function should be like that.

00:08:02.080 --> 00:08:03.900
So that is when the weather gets red.

00:08:03.900 --> 00:08:07.620
So I think everything else seems to be flying here.

00:08:07.620 --> 00:08:11.740
We have got our AP ADP lambda Function on.

00:08:11.740 --> 00:08:13.650
But there are no errors here,

00:08:13.650 --> 00:08:15.960
so let's go ahead and synthesize.

00:08:15.960 --> 00:08:16.560
I'm trying.

00:08:16.560 --> 00:08:17.800
Deploy our stack.

00:08:17.800 --> 00:08:22.720
We got our stack completed.

00:08:22.720 --> 00:08:27.450
Let us go ahead and take it out on the console and try to test our deployment.

00:08:27.450 --> 00:08:28.990
So what?

00:08:28.990 --> 00:08:30.180
This is the confirmation.

00:08:30.180 --> 00:08:31.960
Let us go to our dynamodb.

00:08:31.960 --> 00:08:32.980
I'm in Virginia,

00:08:32.980 --> 00:08:35.050
so letters to go and check the tables.

00:08:35.050 --> 00:08:37.030
We have our table.

00:08:37.030 --> 00:08:39.530
Several is dynamodb even stream processor,

00:08:39.530 --> 00:08:39.850
that is.

00:08:39.850 --> 00:08:41.350
Open it on.

00:08:41.350 --> 00:08:43.550
Let me make some space here.

00:08:43.550 --> 00:08:45.930
So you have your triggers on the triggers.

00:08:45.930 --> 00:08:46.950
You will find that that is,

00:08:46.950 --> 00:08:48.640
and the Lambda function configured.

00:08:48.640 --> 00:08:53.430
This is the Lambda function that you will also see here on right now,

00:08:53.430 --> 00:08:58.030
this lambda function must have not executed anytime because that animal TV is not having

00:08:58.030 --> 00:08:59.420
any events at all.

00:08:59.420 --> 00:09:01.240
That you're not to be anything here on.

00:09:01.240 --> 00:09:02.800
If I go to my confrontation,

00:09:02.800 --> 00:09:04.850
you will see that it's a trigger at that fear.

00:09:04.850 --> 00:09:08.500
So what we're going to do now is we're going to in just some items.

00:09:08.500 --> 00:09:12.820
If I go to my items on creating item myself from nothing is there.

00:09:12.820 --> 00:09:14.980
Once they create an item automatically,

00:09:14.980 --> 00:09:17.500
I will see my Lambda function getting triggered on.

00:09:17.500 --> 00:09:20.560
It will process it by writing it into the cloudwatch logs.

00:09:20.560 --> 00:09:22.850
So let us go ahead and create an item.

00:09:22.850 --> 00:09:25.120
So I'm just going to put this first item,

00:09:25.120 --> 00:09:25.990
this one on,

00:09:25.990 --> 00:09:34.770
then say add another values saying message and we're going to save.

00:09:34.770 --> 00:09:35.630
I like what?

00:09:35.630 --> 00:09:37.150
I'm going to create another item.

00:09:37.150 --> 00:09:39.360
I'm going to fit,

00:09:39.360 --> 00:09:39.970
too.

00:09:39.970 --> 00:09:48.300
So let us go ahead and say this.

00:09:48.300 --> 00:09:50.810
So we have created two items with two different messages.

00:09:50.810 --> 00:09:54.750
Let us go to our lambda function and see if you got it figured.

00:09:54.750 --> 00:09:57.290
Let us go to the monitoring section on,

00:09:57.290 --> 00:09:59.010
see if our events have come up.

00:09:59.010 --> 00:10:00.110
If not the logs,

00:10:00.110 --> 00:10:02.210
at least we should be populated by now.

00:10:02.210 --> 00:10:05.940
So the humans are not showing up in my club.

00:10:05.940 --> 00:10:07.200
Watch metrics by that,

00:10:07.200 --> 00:10:11.430
if you then go ahead and down and see there that it's a two lakhs indifference.

00:10:11.430 --> 00:10:14.070
Let's go ahead and check out and Cloudwatch loves.

00:10:14.070 --> 00:10:17.180
We have a lot of Edem here.

00:10:17.180 --> 00:10:20.100
Let's go ahead and open it on.

00:10:20.100 --> 00:10:23.020
But they just opened the 1st 1 you can see here.

00:10:23.020 --> 00:10:24.990
This is the first item we ingested.

00:10:24.990 --> 00:10:30.930
That is then item one on then welcome to seek a demo on If it is processed,

00:10:30.930 --> 00:10:35.910
we would be able to see that saying total items process is one on.

00:10:35.910 --> 00:10:38.820
Then it has received the one item under knit process.

00:10:38.820 --> 00:10:40.790
Did likewise.

00:10:40.790 --> 00:10:42.780
If I go ahead and open this item,

00:10:42.780 --> 00:10:48.400
we should have received the second item on So So you can see here The item number two is

00:10:48.400 --> 00:10:52.380
also received on it has an animal even three processor on.

00:10:52.380 --> 00:10:53.040
Likewise,

00:10:53.040 --> 00:10:54.850
If I open this item,

00:10:54.850 --> 00:10:59.890
we will see that the total items received this one processes one and this is the value to

00:10:59.890 --> 00:11:03.650
summarize what we have done this we are created on dynamodb.

00:11:03.650 --> 00:11:08.530
We could configure tsum streams we created and Lambda function on connected our Lambda

00:11:08.530 --> 00:11:12.990
function to be triggered by the stream whenever that is and you like them or modification

00:11:12.990 --> 00:11:18.050
often item on being ingested some records in toward animal TV manually on.

00:11:18.050 --> 00:11:22.870
Then we saw that information being processed by my lambda execution on there were logs

00:11:22.870 --> 00:11:27.050
showing that he went to the process on it was stored in Cloudwatch.

00:11:27.050 --> 00:11:30.170
Go ahead and try different kind off streaming events.

00:11:30.170 --> 00:11:34.440
Go ahead and try to in just multiple givens and see if our lambda function is scaling

00:11:34.440 --> 00:11:39.040
automatically to process all the events that are coming from or dynamodb strings.

00:11:39.040 --> 00:11:43.580
That is how you set up db even processor in aws.

00:11:43.580 --> 00:11:45.460
Thanks for watching Happy learning.

