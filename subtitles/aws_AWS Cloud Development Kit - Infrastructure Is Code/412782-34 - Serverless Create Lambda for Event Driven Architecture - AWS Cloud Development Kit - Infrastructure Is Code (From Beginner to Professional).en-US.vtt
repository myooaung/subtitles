WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.270
Hello,

00:00:00.270 --> 00:00:00.830
folks.

00:00:00.830 --> 00:00:03.130
Welcome to another episode on City.

00:00:03.130 --> 00:00:06.330
This time we're going to talk about AWS Lambda functions.

00:00:06.330 --> 00:00:08.150
When you're talking about applications,

00:00:08.150 --> 00:00:10.800
there are many ways of running them in your servers.

00:00:10.800 --> 00:00:14.770
Sometimes you need to prohibition the server than configuring application and then execute

00:00:14.770 --> 00:00:15.390
your cord.

00:00:15.390 --> 00:00:20.410
But that I stand very want to focus only on your court on not focus on managing.

00:00:20.410 --> 00:00:21.720
Your servers are setting them up,

00:00:21.720 --> 00:00:25.120
but securing them that is when Lambda functions comes into picture,

00:00:25.120 --> 00:00:28.070
which can execute code in response to intimate.

00:00:28.070 --> 00:00:29.560
When you're talking about humans,

00:00:29.560 --> 00:00:34.020
it can be as simple somebody uploading some photos into your S three bucket or somebody

00:00:34.020 --> 00:00:38.610
signing up for your website and you want toe respond to that event by sending them and

00:00:38.610 --> 00:00:44.080
welcome email are sending them a nice updated image or enhanced image off them.

00:00:44.080 --> 00:00:46.920
So that is water under function can do for you.

00:00:46.920 --> 00:00:50.010
Let us go ahead and see how we can do this in City K.

00:00:50.010 --> 00:00:51.300
So this is a civic,

00:00:51.300 --> 00:00:55.140
a project that we have been working on on you can see here I have created a new stack

00:00:55.140 --> 00:01:00.920
called us Silver Less stacks on under the several s tax I have already created on lamb

00:01:00.920 --> 00:01:01.960
backcourt for us.

00:01:01.960 --> 00:01:04.080
So I put that under lumber,

00:01:04.080 --> 00:01:08.020
underscore sores on despite its called this constant processor on.

00:01:08.020 --> 00:01:09.290
This is nothing fancy here.

00:01:09.290 --> 00:01:12.570
I'm just taking an even difficult by don't function on.

00:01:12.570 --> 00:01:16.960
I'm just logging that he went here in the lower event and then I'm just returning it into a

00:01:16.960 --> 00:01:20.650
Jason boarding so that even if you're putting it behind an AP get with,

00:01:20.650 --> 00:01:23.170
you'll get a successful 200 cold on.

00:01:23.170 --> 00:01:26.550
Then the message body will have that you went itself so nothing fancy.

00:01:26.550 --> 00:01:26.950
Here,

00:01:26.950 --> 00:01:30.450
let us go toe our city guest act building.

00:01:30.450 --> 00:01:32.930
So this is the custom Lamba stack that we're going to build.

00:01:32.930 --> 00:01:35.210
This is going to deploy the Lambda function on.

00:01:35.210 --> 00:01:40.360
We will go to the console and try to execute the function and see how bad it is working

00:01:40.360 --> 00:01:40.930
Fine or not,

00:01:40.930 --> 00:01:42.800
part of the rules and permissions have been created.

00:01:42.800 --> 00:01:43.250
A knight.

00:01:43.250 --> 00:01:44.200
As always,

00:01:44.200 --> 00:01:47.500
the first thing is importing the conflict that we're going to use.

00:01:47.500 --> 00:01:53.460
So the first step is aws underscore CTK dot aws underscore Lambda Andi,

00:01:53.460 --> 00:01:54.110
remember,

00:01:54.110 --> 00:01:55.440
Once we have added it,

00:01:55.440 --> 00:01:58.350
which would always go head on in solid as well.

00:01:58.350 --> 00:02:01.110
So no insulation is done.

00:02:01.110 --> 00:02:03.450
Let us go toe Billy our stack.

00:02:03.450 --> 00:02:05.190
So let me close this.

00:02:05.190 --> 00:02:05.690
Fine.

00:02:05.690 --> 00:02:09.460
Just go here on import our call him.

00:02:09.460 --> 00:02:18.400
So we have imported the court on since we need the contents off this file to be passed on

00:02:18.400 --> 00:02:18.970
to our land.

00:02:18.970 --> 00:02:19.540
The handler.

00:02:19.540 --> 00:02:22.820
I'm going to use the typically familia construct off,

00:02:22.820 --> 00:02:24.490
try cats and opening the fine.

00:02:24.490 --> 00:02:26.350
So let us read that fight.

00:02:26.350 --> 00:02:28.580
So under trying,

00:02:28.580 --> 00:02:32.060
I'm going to do with open on many tick you the full part.

00:02:32.060 --> 00:02:33.820
So we're navigating from the roof.

00:02:33.820 --> 00:02:43.350
So it is going to be so unless stacks on I'm going to open it and read more on it is called

00:02:43.350 --> 00:02:50.670
this as five on were store it into a variable Corvettes gone stone function cord Andi

00:02:50.670 --> 00:02:52.620
treated from the five and seven.

00:02:52.620 --> 00:02:54.760
So this is not working.

00:02:54.760 --> 00:02:55.080
That is.

00:02:55.080 --> 00:02:56.660
Go ahead and throw an editor.

00:02:56.660 --> 00:03:02.820
So now we got our function called Let us go ahead and build a lambda functions.

00:03:02.820 --> 00:03:04.110
If I'm going to call it my function.

00:03:04.110 --> 00:03:08.620
As constant function on this is under the conflict called Is Lambda On?

00:03:08.620 --> 00:03:09.140
Inside this,

00:03:09.140 --> 00:03:10.810
we have a matter cord dysfunction,

00:03:10.810 --> 00:03:14.460
then f usually scoping toe this particular stat on,

00:03:14.460 --> 00:03:15.180
Let us go over it.

00:03:15.180 --> 00:03:15.330
And,

00:03:15.330 --> 00:03:15.620
God,

00:03:15.620 --> 00:03:18.650
this has gone stone function as my i d.

00:03:18.650 --> 00:03:21.910
And that is backed by naming your function.

00:03:21.910 --> 00:03:26.540
So we have something called as function name under function name.

00:03:26.540 --> 00:03:27.320
We should house,

00:03:27.320 --> 00:03:29.330
um name just ah,

00:03:29.330 --> 00:03:29.810
string.

00:03:29.810 --> 00:03:33.640
That easily helps us to identify what is this function is and what its function is going to

00:03:33.640 --> 00:03:33.840
do.

00:03:33.840 --> 00:03:35.930
You can have your own construct here.

00:03:35.930 --> 00:03:37.950
Next is the one thing I'm going.

00:03:37.950 --> 00:03:40.240
This is function is returned for a fighting here.

00:03:40.240 --> 00:03:44.190
So I'm going to choose a brand name which is going to support Brighton.

00:03:44.190 --> 00:03:46.380
So we have something underscored.

00:03:46.380 --> 00:03:49.150
Lambda Dark Runtime.

00:03:49.150 --> 00:03:51.160
And under this,

00:03:51.160 --> 00:03:53.810
we sure how something gorgeous bite on three or seven.

00:03:53.810 --> 00:03:55.820
So I return it for 3.7.

00:03:55.820 --> 00:04:01.760
If you want to go ahead and tested in the other questions off White and then tried to run

00:04:01.760 --> 00:04:02.180
them,

00:04:02.180 --> 00:04:04.080
So then we're going to say handler,

00:04:04.080 --> 00:04:06.280
which is so nothing by the way,

00:04:06.280 --> 00:04:09.490
in which material went to court when Lambda Function is going to Mexico.

00:04:09.490 --> 00:04:11.790
So my function handling center Lambda handle it.

00:04:11.790 --> 00:04:13.490
So that is what I'm going to say.

00:04:13.490 --> 00:04:14.860
They close this out.

00:04:14.860 --> 00:04:18.410
I'm just going to say index dark.

00:04:18.410 --> 00:04:20.610
Bland.

00:04:20.610 --> 00:04:22.640
Uh huh.

00:04:22.640 --> 00:04:23.680
That's done.

00:04:23.680 --> 00:04:29.050
So very support is coming from the court is going to come from Lambda Dark in language.

00:04:29.050 --> 00:04:33.270
We have something called as in line Scored on inside this.

00:04:33.270 --> 00:04:41.520
So this has to be a string because it is going to be passed on toe other functions of

00:04:41.520 --> 00:04:42.380
testicle string.

00:04:42.380 --> 00:04:44.070
So inside this lambda cold,

00:04:44.070 --> 00:04:47.490
we're going to say this is the fire which is going to provide us the code.

00:04:47.490 --> 00:04:49.060
So just goingto passes here.

00:04:49.060 --> 00:04:53.210
So that this done Now we have set up or run time,

00:04:53.210 --> 00:04:55.640
Let this cool head and said how long we want this function to get.

00:04:55.640 --> 00:04:55.840
I mean,

00:04:55.840 --> 00:04:56.510
if you remember,

00:04:56.510 --> 00:04:58.250
Lambda Functions campaign for 15 minutes,

00:04:58.250 --> 00:05:00.610
but we don't want a function during for such a long time,

00:05:00.610 --> 00:05:02.160
even if it is going to complete factor.

00:05:02.160 --> 00:05:05.330
So I'm going to set a high limit for the function rent.

00:05:05.330 --> 00:05:08.150
Time on this is going to be something like three seconds.

00:05:08.150 --> 00:05:09.310
Andi,

00:05:09.310 --> 00:05:11.550
do we want to have a self concurrency?

00:05:11.550 --> 00:05:12.470
What this means is,

00:05:12.470 --> 00:05:14.410
at any point given point in time,

00:05:14.410 --> 00:05:15.890
how many functions can run.

00:05:15.890 --> 00:05:19.850
So I'm just going to say I want only one from gentle when you can go all the way up.

00:05:19.850 --> 00:05:23.100
2000 That is your account limit across all the functions.

00:05:23.100 --> 00:05:27.810
So if you have one function just going to execute the multiple times that can go head on

00:05:27.810 --> 00:05:29.770
DACA by all the filled concurrency,

00:05:29.770 --> 00:05:33.850
your account and sometimes you would want to pass on some and random variables.

00:05:33.850 --> 00:05:36.350
So it's as simple as passing on and pick study here.

00:05:36.350 --> 00:05:38.120
So on the environment,

00:05:38.120 --> 00:05:41.060
what I'm going to do is I'm just going to do something like a block level.

00:05:41.060 --> 00:05:42.730
So this is nothing.

00:05:42.730 --> 00:05:44.650
But what level of why don't looking?

00:05:44.650 --> 00:05:45.850
I want to do so.

00:05:45.850 --> 00:05:50.200
Maybe I want to do something like info and that's it.

00:05:50.200 --> 00:05:53.280
So we have set up a function like just go ahead and synthesize it.

00:05:53.280 --> 00:05:58.190
So that is an editor here.

00:05:58.190 --> 00:05:59.890
Let me just fix this.

00:05:59.890 --> 00:06:02.040
Ever on admission,

00:06:02.040 --> 00:06:03.070
Decisive again.

00:06:03.070 --> 00:06:06.550
They just go ahead and deployed.

00:06:06.550 --> 00:06:10.890
No,

00:06:10.890 --> 00:06:11.870
my stack is deploying.

00:06:11.870 --> 00:06:15.460
Let us goto our AWS console and take it out here.

00:06:15.460 --> 00:06:17.920
We haven't on then on Lambda functions.

00:06:17.920 --> 00:06:21.200
We should have a new function for this constant function on under this,

00:06:21.200 --> 00:06:23.640
our courtship automatically pre populated.

00:06:23.640 --> 00:06:26.040
Here you have done everything correctly,

00:06:26.040 --> 00:06:29.950
so you can see here that index or clamber handler has been updated here.

00:06:29.950 --> 00:06:31.170
Likewise,

00:06:31.170 --> 00:06:35.850
my environment variable is also updated here on all the other settings.

00:06:35.850 --> 00:06:39.600
So the interesting thing to notice when you're writing the court here,

00:06:39.600 --> 00:06:45.680
we never set up when I am role for our function to run on the reason for that Scenic A

00:06:45.680 --> 00:06:50.150
smart enoughto understand what is the minimum level of emissions that its acquired on your

00:06:50.150 --> 00:06:54.190
London function on in provision that all automatically and attach is it to go down

00:06:54.190 --> 00:06:54.850
perfection?

00:06:54.850 --> 00:06:57.940
So if I go back here and then take you to permissions,

00:06:57.940 --> 00:07:02.020
you will find that there is a default permissions that has been added for creating clothes

00:07:02.020 --> 00:07:04.240
which local governments also.

00:07:04.240 --> 00:07:07.020
So let's go ahead and just give a simple test function here.

00:07:07.020 --> 00:07:09.970
So I'm just going to pass on this simple very well here.

00:07:09.970 --> 00:07:11.400
Click on,

00:07:11.400 --> 00:07:12.490
Create on,

00:07:12.490 --> 00:07:14.250
then let us go ahead and test it.

00:07:14.250 --> 00:07:16.380
So if everything looks flying,

00:07:16.380 --> 00:07:20.810
I should be getting the same body message that it's the status that we added us 240.

00:07:20.810 --> 00:07:22.960
It's something that we passed off it it on.

00:07:22.960 --> 00:07:24.650
If you want to go ahead and check the logs.

00:07:24.650 --> 00:07:28.950
Since we have given the permissions for Lambda Tau right to code which logs?

00:07:28.950 --> 00:07:32.420
We have our logs here on.

00:07:32.420 --> 00:07:33.360
If I call here,

00:07:33.360 --> 00:07:36.790
we should be able to see the same event that has been executed successfully.

00:07:36.790 --> 00:07:41.660
It takes a similar concept off in flat AWS less land.

00:07:41.660 --> 00:07:43.150
That's that sponsored function.

00:07:43.150 --> 00:07:46.300
So I'm going to the mountain.

00:07:46.300 --> 00:07:50.280
The simple thing here what and when you do is I'm going toe animal e describe this stack

00:07:50.280 --> 00:07:52.270
now CK destroy.

00:07:52.270 --> 00:08:01.040
What is going to happen now is this complaint is going toe try and a delete my lambda

00:08:01.040 --> 00:08:03.280
function on di am rule.

00:08:03.280 --> 00:08:06.920
It was provisioned on that it will clean up my account.

00:08:06.920 --> 00:08:09.430
But what is not goingto happen?

00:08:09.430 --> 00:08:14.210
It is not going to delete my told what law groups you can see here.

00:08:14.210 --> 00:08:15.500
It has deleted the stack,

00:08:15.500 --> 00:08:18.970
including the floor or which including the under functions,

00:08:18.970 --> 00:08:22.040
including the I am roads Like for example,

00:08:22.040 --> 00:08:23.590
if I go ahead and refresh my screen,

00:08:23.590 --> 00:08:27.650
the stack is gone on my lambda function should also be not there.

00:08:27.650 --> 00:08:29.170
So you got a zero on the functions.

00:08:29.170 --> 00:08:33.040
But my law group is not cleaned up sometimes it is helpful,

00:08:33.040 --> 00:08:33.760
for example,

00:08:33.760 --> 00:08:34.850
in production requirements.

00:08:34.850 --> 00:08:39.040
You don't want your land a function to clean up your logbooks because you want to go

00:08:39.040 --> 00:08:39.690
troubleshooter.

00:08:39.690 --> 00:08:43.640
You want to make some mattresses or want the logs for A without complaints reasons,

00:08:43.640 --> 00:08:44.940
so you want to detain it.

00:08:44.940 --> 00:08:46.490
But there are situations.

00:08:46.490 --> 00:08:49.030
Value are deploying multiple lambda functions on.

00:08:49.030 --> 00:08:52.530
You don't want to your floorboards logs to be cluttered with old dogs.

00:08:52.530 --> 00:08:54.800
So in those cases you want to treat the clothes,

00:08:54.800 --> 00:08:59.670
which looks differently on that is when I would want it deleted on,

00:08:59.670 --> 00:09:01.300
make it part of your stack itself.

00:09:01.300 --> 00:09:02.320
So in the next video,

00:09:02.320 --> 00:09:06.190
we're going to see how to create covert low groups and attach it to a lab rat function.

