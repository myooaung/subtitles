WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.270
Hello,

00:00:00.270 --> 00:00:00.740
folks.

00:00:00.740 --> 00:00:02.950
Welcome to another lecture on CD K.

00:00:02.950 --> 00:00:08.650
The act actual better that we're going to see today is how to run more than applications,

00:00:08.650 --> 00:00:11.420
which are based on containers in AWS.

00:00:11.420 --> 00:00:11.740
On.

00:00:11.740 --> 00:00:13.660
When you're talking about containers in AWS,

00:00:13.660 --> 00:00:15.140
there are many ways to run them.

00:00:15.140 --> 00:00:16.890
You confuse the easiest service.

00:00:16.890 --> 00:00:19.050
You can run them and forget you can run them.

00:00:19.050 --> 00:00:20.130
In Coburn.

00:00:20.130 --> 00:00:24.050
It is easy to or the managed Ikea service.

00:00:24.050 --> 00:00:30.010
That number that we're going to see now is going to run on simple micro service application

00:00:30.010 --> 00:00:30.010
,

00:00:30.010 --> 00:00:31.850
which is containerized on.

00:00:31.850 --> 00:00:36.510
We're going to run that container in an easiest based plaster,

00:00:36.510 --> 00:00:38.570
so the demo is going to look like this.

00:00:38.570 --> 00:00:41.650
So we are going to create and PCs cluster.

00:00:41.650 --> 00:00:43.750
And when you're talking about issues cluster,

00:00:43.750 --> 00:00:45.790
you need to provision a number of resources.

00:00:45.790 --> 00:00:46.390
For example,

00:00:46.390 --> 00:00:52.200
you needed BPC toe force the Zs Lester on inside that BPC you needed to find an auto

00:00:52.200 --> 00:00:56.910
scaling group where you're easy to instances are going to decide so that whenever there

00:00:56.910 --> 00:00:58.300
it's more load is coming in,

00:00:58.300 --> 00:01:02.540
you can add additional instances so that you can meet the demand that is comedian.

00:01:02.540 --> 00:01:05.240
Once we have auto scaling group configured.

00:01:05.240 --> 00:01:08.480
Then we go ahead on define and contain ourselves.

00:01:08.480 --> 00:01:14.470
What the service is going to say is whatever container I want to run home any I just want

00:01:14.470 --> 00:01:14.920
to run.

00:01:14.920 --> 00:01:16.380
So inside the service,

00:01:16.380 --> 00:01:18.110
we're going to create something called us.

00:01:18.110 --> 00:01:21.930
Tasks on the task will have the container definitions,

00:01:21.930 --> 00:01:22.650
for example,

00:01:22.650 --> 00:01:27.240
whether it is and Web services in Genet's container or what is the size of my container is

00:01:27.240 --> 00:01:27.710
going to be.

00:01:27.710 --> 00:01:27.970
Well,

00:01:27.970 --> 00:01:31.500
the logs they're going and whether it's authentication happening on this kind of

00:01:31.500 --> 00:01:34.120
information will be configured inside those tasks.

00:01:34.120 --> 00:01:35.700
Once you have this,

00:01:35.700 --> 00:01:38.850
then you can go ahead and create and target group.

00:01:38.850 --> 00:01:39.610
For example,

00:01:39.610 --> 00:01:42.400
you can have Web sellers created in tow,

00:01:42.400 --> 00:01:47.230
one target group and your absolutes into another target group on pointed from your

00:01:47.230 --> 00:01:48.590
application load balancer.

00:01:48.590 --> 00:01:52.010
So this has the competence that we're going to build now on.

00:01:52.010 --> 00:01:53.180
As you can see,

00:01:53.180 --> 00:01:55.290
the partner are moving pieces.

00:01:55.290 --> 00:01:56.800
But when you're coming to see decay,

00:01:56.800 --> 00:02:00.590
there are some higher level concepts which is going to help us to do this.

00:02:00.590 --> 00:02:03.980
In about just about 40 to 50 lines of court,

00:02:03.980 --> 00:02:08.020
we should be able to get this Antioch picture working let us go to our city,

00:02:08.020 --> 00:02:10.250
get stack and see how we can build this.

00:02:10.250 --> 00:02:14.810
This is the stack that we're going to use for today's demo on A have named it as

00:02:14.810 --> 00:02:19.440
containerized micro service architecture with easiest stack on as usual,

00:02:19.440 --> 00:02:21.350
I have not built any resources.

00:02:21.350 --> 00:02:23.450
We're going to start everything from scratch.

00:02:23.450 --> 00:02:24.280
Unlike wise,

00:02:24.280 --> 00:02:28.090
there's no imports except for the core off Siri K.

00:02:28.090 --> 00:02:34.070
So let's go ahead and start building or vpc on if you know that BPC is part off the easy to

00:02:34.070 --> 00:02:34.730
construct.

00:02:34.730 --> 00:02:35.510
So let me start.

00:02:35.510 --> 00:02:37.850
But importing the issue took on straight first,

00:02:37.850 --> 00:02:43.150
so we got our easy to construct important.

00:02:43.150 --> 00:02:48.270
Let me build my VPC and I'm going to scope it.

00:02:48.270 --> 00:02:52.680
I'm going to call it as micro service BBC on.

00:02:52.680 --> 00:02:57.940
I'm going to give it as minimal parameters as possible on I'm going to say my max number of

00:02:57.940 --> 00:03:04.520
cases that I want is going to be only two on I want and not get way so that my so is his

00:03:04.520 --> 00:03:05.720
publicly accessible.

00:03:05.720 --> 00:03:07.290
So under not get with,

00:03:07.290 --> 00:03:10.170
I was just say I don't want to to not get with.

00:03:10.170 --> 00:03:11.430
I just want one.

00:03:11.430 --> 00:03:12.950
If you want high availability off,

00:03:12.950 --> 00:03:13.550
not get with.

00:03:13.550 --> 00:03:17.590
Just go ahead and say to and it will be built onto over the British jobs so that it's

00:03:17.590 --> 00:03:22.480
politest there for your PPC that just go ahead and create your easiest plaster.

00:03:22.480 --> 00:03:26.810
And since we're talking about easiest on but it is a different service.

00:03:26.810 --> 00:03:28.410
I'm going to import that service,

00:03:28.410 --> 00:03:29.030
Ashwell.

00:03:29.030 --> 00:03:33.800
So let us go ahead and add it here on.

00:03:33.800 --> 00:03:38.900
Make sure if you have not installed easiest service that this go hell on install that

00:03:38.900 --> 00:03:39.510
Ashwell.

00:03:39.510 --> 00:03:41.190
If it's not already there,

00:03:41.190 --> 00:03:47.620
let us go toe a requirements wide on added and install it so I don't see Easy is here.

00:03:47.620 --> 00:03:49.250
Let me just go ahead and add it.

00:03:49.250 --> 00:03:52.360
Let me say that fine.

00:03:52.360 --> 00:03:53.840
Now we have added easiest.

00:03:53.840 --> 00:03:57.250
I'm going to install it soon.

00:03:57.250 --> 00:04:00.960
It disclosed these two times we have been stole that one on.

00:04:00.960 --> 00:04:03.570
Let us go ahead and build our easiest cluster.

00:04:03.570 --> 00:04:06.460
I'm going to call this as micro service cluster.

00:04:06.460 --> 00:04:13.950
So on the easiest you have something called as cluster model.

00:04:13.950 --> 00:04:17.600
So let's go ahead and have a scope defined on.

00:04:17.600 --> 00:04:21.830
Then we will call this as Web service plaster on.

00:04:21.830 --> 00:04:23.780
We're going to just define which BBC,

00:04:23.780 --> 00:04:25.310
This is Custer is going to be posted.

00:04:25.310 --> 00:04:25.800
That is all.

00:04:25.800 --> 00:04:27.360
It is there to define your cluster.

00:04:27.360 --> 00:04:28.720
You don't have to do anything.

00:04:28.720 --> 00:04:33.770
Now we're going to find various make list of compute capacity is going to come from on.

00:04:33.770 --> 00:04:38.160
We decided our issues festive is going to be based on easy two instances where the auto

00:04:38.160 --> 00:04:39.470
scaling group load balancers.

00:04:39.470 --> 00:04:41.220
Target groups are getting added.

00:04:41.220 --> 00:04:43.500
So we're going to to find that part now.

00:04:43.500 --> 00:04:47.950
So I'm going to say micro service clustered dark add capacity.

00:04:47.950 --> 00:04:49.570
Under this,

00:04:49.570 --> 00:04:50.950
we will define a name.

00:04:50.950 --> 00:04:54.950
Someone took on this as micro service.

00:04:54.950 --> 00:05:00.750
After scaling group my instant steps,

00:05:00.750 --> 00:05:02.440
I'm going to use a Freedia.

00:05:02.440 --> 00:05:06.010
Instances if you weren't are trying with bigger instances,

00:05:06.010 --> 00:05:07.170
go ahead and try that.

00:05:07.170 --> 00:05:11.500
That is not the ground that so instance Type on inside this.

00:05:11.500 --> 00:05:18.180
I'm going to say t to micro in case our containers not starting or having any issues.

00:05:18.180 --> 00:05:22.700
Then go ahead and change this into on large or x class or trying to reduce a container

00:05:22.700 --> 00:05:23.780
dimensions like,

00:05:23.780 --> 00:05:24.240
for example,

00:05:24.240 --> 00:05:26.200
lesser CPU on lesser memory.

00:05:26.200 --> 00:05:29.150
So we got our easy to capacity also progression.

00:05:29.150 --> 00:05:32.750
Let us go ahead and define the load balancers under service in the tasks.

00:05:32.750 --> 00:05:34.400
That is an easiest pattern,

00:05:34.400 --> 00:05:35.880
which is going to make it really,

00:05:35.880 --> 00:05:39.920
really easy for us to provision all these services in one group,

00:05:39.920 --> 00:05:40.730
for example,

00:05:40.730 --> 00:05:42.040
the load balancer,

00:05:42.040 --> 00:05:43.300
the container definition,

00:05:43.300 --> 00:05:45.900
the service and the task in one construct.

00:05:45.900 --> 00:05:48.080
So it is part of the easiest patterns.

00:05:48.080 --> 00:05:51.850
So I'm going to import the easiest pattern into our stack.

00:05:51.850 --> 00:05:57.790
So if you're in where we have not install it here,

00:05:57.790 --> 00:05:59.340
it is not that they're sort of this.

00:05:59.340 --> 00:06:07.760
Go ahead and add that since there is going to be in Lord balance and in front off this web

00:06:07.760 --> 00:06:08.200
service,

00:06:08.200 --> 00:06:10.650
I'm going to call this as Lord Balance Web service.

00:06:10.650 --> 00:06:13.970
On the easiest patterns,

00:06:13.970 --> 00:06:19.250
we have something for as application load balanced,

00:06:19.250 --> 00:06:20.940
easy to service.

00:06:20.940 --> 00:06:26.530
You can see it here on going to add the school on.

00:06:26.530 --> 00:06:28.510
Then the service itself on.

00:06:28.510 --> 00:06:30.320
We're going to say from which get plaster.

00:06:30.320 --> 00:06:32.300
You need to launch this ah service.

00:06:32.300 --> 00:06:36.150
So I'm going to say cluster equal to my micro service cluster,

00:06:36.150 --> 00:06:39.170
followed by my what is a memory for my,

00:06:39.170 --> 00:06:39.600
uh,

00:06:39.600 --> 00:06:40.520
container.

00:06:40.520 --> 00:06:45.850
So I'm going to say memory on a reservation when I say the service in.

00:06:45.850 --> 00:06:48.320
What is going to happen is this is going to be the soft limit.

00:06:48.320 --> 00:06:54.490
So easy is will try to use this man much memory only as much as possible on then,

00:06:54.490 --> 00:06:58.560
if there is a requirement for more memory than it will start grabbing more more memories.

00:06:58.560 --> 00:07:00.320
So this is going to be in soft limit.

00:07:00.320 --> 00:07:01.930
If you want to set a hard limit,

00:07:01.930 --> 00:07:02.900
there are different options.

00:07:02.900 --> 00:07:03.540
For example,

00:07:03.540 --> 00:07:06.310
here you will find the memory limit.

00:07:06.310 --> 00:07:07.800
So you this is the height limit.

00:07:07.800 --> 00:07:09.140
If you want to go ahead and set,

00:07:09.140 --> 00:07:12.190
it increases class of capacity on Bryant out.

00:07:12.190 --> 00:07:14.380
So we got our memory set,

00:07:14.380 --> 00:07:18.650
then is coming as the task image options.

00:07:18.650 --> 00:07:22.290
Under this,

00:07:22.290 --> 00:07:25.690
we need toe define Marissa container image is going to come from,

00:07:25.690 --> 00:07:35.410
So let us add image on it is going to come from the CIA's container image from registry on

00:07:35.410 --> 00:07:35.900
this time.

00:07:35.900 --> 00:07:40.400
What we're going to do is we're going to use a docker registry if you have an easier

00:07:40.400 --> 00:07:42.060
registry already on.

00:07:42.060 --> 00:07:43.370
If you have images there,

00:07:43.370 --> 00:07:48.870
you can use that also this time just to make sure everybody can try it out without having a

00:07:48.870 --> 00:07:51.310
creator off images off their own.

00:07:51.310 --> 00:07:52.810
I'm going to use a public image,

00:07:52.810 --> 00:07:54.580
which how in my own doctor help.

00:07:54.580 --> 00:07:59.480
So I'm going to call this s mystique Web sellers.

00:07:59.480 --> 00:08:05.050
So you can also go ahead and use the same doctor images on in case if you want to pass him

00:08:05.050 --> 00:08:06.230
environment variables,

00:08:06.230 --> 00:08:07.450
that is also possible.

00:08:07.450 --> 00:08:13.310
It is on the courts and this is going to be definitely on.

00:08:13.310 --> 00:08:16.530
You can add any secret or any parameter that you want to pass.

00:08:16.530 --> 00:08:17.050
For example,

00:08:17.050 --> 00:08:21.320
this you want to different which environment this container is going to be part off.

00:08:21.320 --> 00:08:23.170
Then you just go ahead at the creek,

00:08:23.170 --> 00:08:24.350
even with Paris here.

00:08:24.350 --> 00:08:28.100
So we have set everything here for our Lord balance First service.

00:08:28.100 --> 00:08:29.460
That is all it is there to do.

00:08:29.460 --> 00:08:33.920
What I'm going to do is just a small comment here to mention that decision Soft limit.

00:08:33.920 --> 00:08:38.240
So we know that container can go beyond this capacity.

00:08:38.240 --> 00:08:39.740
So to accesses web service,

00:08:39.740 --> 00:08:42.550
we need that you are also just go ahead and quickly type it out.

00:08:42.550 --> 00:08:56.380
That is all of this there.

00:08:56.380 --> 00:08:59.990
Let this go ahead and send to Cesar Stack and praying deployed.

00:08:59.990 --> 00:09:11.370
So this is our stack here I am in Ohio region Onda letters goto our resources and quickly

00:09:11.370 --> 00:09:12.040
take it out.

00:09:12.040 --> 00:09:13.140
You can see here.

00:09:13.140 --> 00:09:14.410
That is the BPC.

00:09:14.410 --> 00:09:15.470
Andi,

00:09:15.470 --> 00:09:18.010
there must be the plaster somewhere down the line.

00:09:18.010 --> 00:09:21.080
You can see here that PCs service and plaster Andi,

00:09:21.080 --> 00:09:23.510
I have I can look here and go there as well.

00:09:23.510 --> 00:09:26.350
But let me check whether you are It's also published.

00:09:26.350 --> 00:09:26.680
Yeah,

00:09:26.680 --> 00:09:27.180
we have that.

00:09:27.180 --> 00:09:27.910
You are.

00:09:27.910 --> 00:09:32.060
I'm just going to copy this and put it into the broker that will come to it later.

00:09:32.060 --> 00:09:33.580
Before that,

00:09:33.580 --> 00:09:36.370
we'll go ahead and take all the resources that has been burned here.

00:09:36.370 --> 00:09:38.090
So under clusters,

00:09:38.090 --> 00:09:41.180
I will have on easy to based Lester.

00:09:41.180 --> 00:09:41.790
You can see here,

00:09:41.790 --> 00:09:42.030
that is.

00:09:42.030 --> 00:09:45.220
The service was one under the running baskets one.

00:09:45.220 --> 00:09:47.650
And right now there's only one container Instance.

00:09:47.650 --> 00:09:52.430
So if you go head on and we will see ourselves define on under the service,

00:09:52.430 --> 00:09:56.210
we will have a task force that define So this is the task that is running on.

00:09:56.210 --> 00:09:58.250
This is the task definition on.

00:09:58.250 --> 00:09:58.700
Right now,

00:09:58.700 --> 00:10:03.360
there will be some logs that can also be pushed into our global watch logs.

00:10:03.360 --> 00:10:04.010
Right now,

00:10:04.010 --> 00:10:08.670
there have been a very simple information that is the load balancer that is can taking my

00:10:08.670 --> 00:10:09.110
container.

00:10:09.110 --> 00:10:09.640
Instance.

00:10:09.640 --> 00:10:12.050
That is a lot of information that you are seeing here.

00:10:12.050 --> 00:10:18.140
Let us go to our easy to instances.

00:10:18.140 --> 00:10:22.850
That must be one running instance because we configure with only one instance capacity.

00:10:22.850 --> 00:10:23.780
So that is why it is.

00:10:23.780 --> 00:10:27.790
There's one instance Let me take you toe auto scaling group configurations.

00:10:27.790 --> 00:10:30.060
You can see here that will be an auto scaling group.

00:10:30.060 --> 00:10:33.380
Also confident automatically so you can go ahead on schedule.

00:10:33.380 --> 00:10:34.470
Some scaling as well.

00:10:34.470 --> 00:10:40.920
So they just go to this new console on and see the new view so automatically on this please

00:10:40.920 --> 00:10:43.910
our friend up for you by civic,

00:10:43.910 --> 00:10:48.750
including the security group for your lunch configuration adding the correct port so that

00:10:48.750 --> 00:10:52.750
it is secure on any unnecessary or porter not open.

00:10:52.750 --> 00:10:54.210
Likewise,

00:10:54.210 --> 00:10:54.970
your load balance.

00:10:54.970 --> 00:10:56.080
It is also configured.

00:10:56.080 --> 00:10:57.990
That s goto our target groups.

00:10:57.990 --> 00:10:58.550
First,

00:10:58.550 --> 00:11:05.750
where our container it will be a test as on a target on it will also be checked here.

00:11:05.750 --> 00:11:07.020
So under targets,

00:11:07.020 --> 00:11:09.280
we will have one easy to instance on you.

00:11:09.280 --> 00:11:13.500
Consider very high Portis at eyes on a target is being checked.

00:11:13.500 --> 00:11:13.730
What?

00:11:13.730 --> 00:11:16.360
I'm going to do now is we're going to use the web.

00:11:16.360 --> 00:11:20.160
You are off this load balancer and the Lord balances.

00:11:20.160 --> 00:11:26.440
We can find that you weren't off our So So this is you are It will be the same thing as to

00:11:26.440 --> 00:11:29.150
be copied from our per formation.

00:11:29.150 --> 00:11:31.350
So they just go ahead and put it here.

00:11:31.350 --> 00:11:33.610
So there you go.

00:11:33.610 --> 00:11:38.710
You see the simple web application that is running from on container on PC to plaster.

00:11:38.710 --> 00:11:43.610
So what I'm going to show you is I'm going to turn off the instance and see if our auto

00:11:43.610 --> 00:11:49.890
scaling is automatically detecting that information or that island on tries to bring up on

00:11:49.890 --> 00:11:50.450
new.

00:11:50.450 --> 00:11:53.240
So on also the container as well.

00:11:53.240 --> 00:11:57.200
So let us go toe are easy to instance.

00:11:57.200 --> 00:11:58.560
Before that,

00:11:58.560 --> 00:12:02.450
what I'm going to do is I'm just going to go and open the auto scaling also here.

00:12:02.450 --> 00:12:10.620
So let us go head on the turn off our easy to instance.

00:12:10.620 --> 00:12:14.410
What I'm going to do is I'm just going toe dominate the instance.

00:12:14.410 --> 00:12:15.410
Little school here,

00:12:15.410 --> 00:12:19.420
click on Terminate Onda.

00:12:19.420 --> 00:12:24.920
Let us wait for a few minutes so that our incense health will be checked on.

00:12:24.920 --> 00:12:30.740
Then it will be notified that our incenses and no longer healthy on then a new instance

00:12:30.740 --> 00:12:32.050
will come up shortly.

00:12:32.050 --> 00:12:34.680
You can see here,

00:12:34.680 --> 00:12:38.630
this instance is still showing us healthy and still showing us in service.

00:12:38.630 --> 00:12:45.070
In a few minutes we will see the information picked up by my auto scaling Celtics Onda a

00:12:45.070 --> 00:12:45.620
new instance.

00:12:45.620 --> 00:12:46.950
With becoming up online.

00:12:46.950 --> 00:12:55.320
You can see here the life cycle is saying terminating weight because I terminated it on.

00:12:55.320 --> 00:12:59.570
But there's identified that on then the health is also become unhealthy.

00:12:59.570 --> 00:13:03.910
So very soon we will find one more instance coming up on.

00:13:03.910 --> 00:13:07.150
Then I will also be at us to the Celtics,

00:13:07.150 --> 00:13:08.850
and the container will also be launched.

00:13:08.850 --> 00:13:11.450
Let me just go ahead and refresh it Here.

00:13:11.450 --> 00:13:15.760
You can see there is one more instance that is impending state on its been started by the

00:13:15.760 --> 00:13:18.010
upper scaling the service on.

00:13:18.010 --> 00:13:21.120
We will start seeing that here on wants me.

00:13:21.120 --> 00:13:24.310
We'll head and right now if I go ahead and take my website.

00:13:24.310 --> 00:13:25.280
As you can see,

00:13:25.280 --> 00:13:26.480
that is an fine or three.

00:13:26.480 --> 00:13:28.350
So is temporary unavailable.

00:13:28.350 --> 00:13:31.320
Once my website comes online automatically,

00:13:31.320 --> 00:13:33.050
my page will also be refreshed.

00:13:33.050 --> 00:13:43.210
So my services coming up online access in service.

00:13:43.210 --> 00:13:47.850
Let me go ahead on and check our easy to Leicester also.

00:13:47.850 --> 00:13:54.560
So we have one pending dust that are no running task so myself has come online.

00:13:54.560 --> 00:14:00.240
My contain it is getting built on the service is going to do the health checks from the

00:14:00.240 --> 00:14:01.350
load balancer now.

00:14:01.350 --> 00:14:05.020
So I might ask more from pending to running.

00:14:05.020 --> 00:14:13.310
So let us go head on Take our website so you can see here we have shown how to run on micro

00:14:13.310 --> 00:14:19.880
service in PCs on if your container or you are host goes offline automatically.

00:14:19.880 --> 00:14:25.120
The auto scaling group is going to restart it To summarize we have created an easy to

00:14:25.120 --> 00:14:31.800
cluster inside and DPC antique provided the compute capacity from easy to on We created our

00:14:31.800 --> 00:14:37.230
container service on the tasks on the container definitions on connected them toe on load

00:14:37.230 --> 00:14:43.580
balancer using groups literally went ahead on tested it out by turning off our easy to it.

00:14:43.580 --> 00:14:48.290
Since I saw that a new instances automatically coming up with all the configurations we

00:14:48.290 --> 00:14:49.070
provided.

00:14:49.070 --> 00:14:50.540
So that is what we have done.

00:14:50.540 --> 00:14:55.240
Now go ahead and try different confrontations in your phone account crying with the bigger

00:14:55.240 --> 00:15:01.160
instances or multiple containers are different types of containers on to see what you can

00:15:01.160 --> 00:15:03.650
learn from that as always,

00:15:03.650 --> 00:15:05.500
Thanks for watching Happy learned.

