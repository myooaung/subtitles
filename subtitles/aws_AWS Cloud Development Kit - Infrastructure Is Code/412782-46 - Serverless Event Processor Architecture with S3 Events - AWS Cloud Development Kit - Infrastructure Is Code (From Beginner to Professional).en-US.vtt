WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.270
Hello,

00:00:00.270 --> 00:00:00.740
folks.

00:00:00.740 --> 00:00:03.690
Welcome to another lecture on CTK,

00:00:03.690 --> 00:00:09.650
one of the common architectural patterns in air abuses that whenever an object or an event

00:00:09.650 --> 00:00:11.790
that is happening in your street pocket,

00:00:11.790 --> 00:00:13.690
you want to take some downstream action,

00:00:13.690 --> 00:00:14.470
for example,

00:00:14.470 --> 00:00:16.300
of somebody's uploading a new image.

00:00:16.300 --> 00:00:21.660
You want to process it by resizing it or find some optics in that using and recognition

00:00:21.660 --> 00:00:23.660
service and started in some database.

00:00:23.660 --> 00:00:24.410
So basically,

00:00:24.410 --> 00:00:26.580
we're talking about an even driven architecture,

00:00:26.580 --> 00:00:31.650
and quite often it is possible to change your s three bucket with Lamba service for the

00:00:31.650 --> 00:00:35.260
processing engine and store that information in DYNAMODB.

00:00:35.260 --> 00:00:37.530
So that is what we're going to see now.

00:00:37.530 --> 00:00:42.450
We're going to create an extra bucket on create and notification engine There.

00:00:42.450 --> 00:00:46.520
On that notification is being sent to your lambda processor on.

00:00:46.520 --> 00:00:51.170
The Lambda will process the event that it's got coming in from your s three bucket on.

00:00:51.170 --> 00:00:53.800
It will do some actions on that event.

00:00:53.800 --> 00:00:54.420
For example,

00:00:54.420 --> 00:00:59.930
it might take the object key Onda sites off the object and store it into your dynamodb so

00:00:59.930 --> 00:01:04.920
that some other service can find the file name on the object location on processes.

00:01:04.920 --> 00:01:08.680
So before the back and we're going to use denim would be before that.

00:01:08.680 --> 00:01:12.100
So this is what we're going to pull Now let's go to our city.

00:01:12.100 --> 00:01:13.310
Guess Tack on start.

00:01:13.310 --> 00:01:17.150
But they get this is the stack that we're going to build on.

00:01:17.150 --> 00:01:22.410
I created a stack name with a big name so that it is easily a readable or techniques have

00:01:22.410 --> 00:01:24.460
also that there when you guys are looking into it.

00:01:24.460 --> 00:01:25.430
But you know that.

00:01:25.430 --> 00:01:27.030
What if this stock is going to do it?

00:01:27.030 --> 00:01:33.650
So the stock is named several s even processor architecture with ESRI Erian's on this time

00:01:33.650 --> 00:01:37.950
I have not reported any results were going to do everything from the scratch.

00:01:37.950 --> 00:01:39.270
So if you remember,

00:01:39.270 --> 00:01:41.040
we need an s three bucket on.

00:01:41.040 --> 00:01:42.890
Then we need some lambda functions on.

00:01:42.890 --> 00:01:48.600
We also need some Vanimo TV to store the data that is coming in from my press three pocket

00:01:48.600 --> 00:01:48.600
.

00:01:48.600 --> 00:01:52.020
So let us start building our resources on for building honestly,

00:01:52.020 --> 00:01:54.350
but it we need some models.

00:01:54.350 --> 00:01:57.580
So we have imported.

00:01:57.580 --> 00:02:01.150
Let us go ahead on build our bucket.

00:02:01.150 --> 00:02:03.390
I'm going to call my bucket as KK store.

00:02:03.390 --> 00:02:04.660
This is going to be a storefront.

00:02:04.660 --> 00:02:07.410
And while there are a lot of action happening on.

00:02:07.410 --> 00:02:08.820
Whenever that is an action happening,

00:02:08.820 --> 00:02:09.950
we want to process it.

00:02:09.950 --> 00:02:13.520
Andi,

00:02:13.520 --> 00:02:15.050
I'm going to give an I d.

00:02:15.050 --> 00:02:17.250
Andi,

00:02:17.250 --> 00:02:19.240
I want to question my bucket as well.

00:02:19.240 --> 00:02:21.070
So I'm just going to say what's in the quarter.

00:02:21.070 --> 00:02:21.750
True?

00:02:21.750 --> 00:02:22.620
No,

00:02:22.620 --> 00:02:24.110
we got our estate bucket.

00:02:24.110 --> 00:02:26.950
We are going to build our animal db table on for that.

00:02:26.950 --> 00:02:28.060
We need another morning.

00:02:28.060 --> 00:02:31.290
They just go ahead and imported Animal Devi model as well.

00:02:31.290 --> 00:02:36.670
We have imported.

00:02:36.670 --> 00:02:38.030
Let us start building it.

00:02:38.030 --> 00:02:39.790
So this is going to be for my store,

00:02:39.790 --> 00:02:41.630
so I'm going to call it take a store.

00:02:41.630 --> 00:02:42.550
A set stable.

00:02:42.550 --> 00:02:45.940
Under this we have a table,

00:02:45.940 --> 00:02:46.650
Morgan,

00:02:46.650 --> 00:02:48.250
scope it yourself.

00:02:48.250 --> 00:02:59.760
Have a name for your table on what is going to be my date with name on that table structure

00:02:59.760 --> 00:03:02.120
itself on partition key on.

00:03:02.120 --> 00:03:07.120
I'm going to have a very simple partition just going Teoh configured with them for i Maliki

00:03:07.120 --> 00:03:08.490
as an I d.

00:03:08.490 --> 00:03:11.470
So that we can store our history objects here.

00:03:11.470 --> 00:03:13.410
So,

00:03:13.410 --> 00:03:14.740
on the attributes on,

00:03:14.740 --> 00:03:19.710
I'm going to have a name just going to be my i d which is going to be unique across all my

00:03:19.710 --> 00:03:22.250
keys on then this is going to be type string.

00:03:22.250 --> 00:03:28.200
So that is for the table.

00:03:28.200 --> 00:03:28.940
Andi,

00:03:28.940 --> 00:03:34.010
here there is an equal two missing on If you want,

00:03:34.010 --> 00:03:35.870
you can go ahead and add more policy,

00:03:35.870 --> 00:03:37.120
usually in production,

00:03:37.120 --> 00:03:39.570
R and other scenarios.

00:03:39.570 --> 00:03:40.980
You wouldn't be using this,

00:03:40.980 --> 00:03:43.010
But if you're going to go higher than tested,

00:03:43.010 --> 00:03:45.260
just go ahead and add Destroy or retain,

00:03:45.260 --> 00:03:46.780
depending upon your scenario.

00:03:46.780 --> 00:03:49.680
Nexus for the Lambda Court on for Lambda.

00:03:49.680 --> 00:03:52.840
We need another model selected school head and import the Lambda model.

00:03:52.840 --> 00:03:57.420
So we have imported London.

00:03:57.420 --> 00:04:01.570
It does go ahead on the reader code on you can see here on the lander source.

00:04:01.570 --> 00:04:04.920
I have another file called as s three event processor.

00:04:04.920 --> 00:04:07.700
So that is a fine that we're going to read on.

00:04:07.700 --> 00:04:08.090
Duh.

00:04:08.090 --> 00:04:13.240
That is a function that is going to do the back and processing for our store.

00:04:13.240 --> 00:04:15.170
So they just go ahead and read the file.

00:04:15.170 --> 00:04:39.620
So we have rent if I let us go head on and I'm the Lambda function or create a lambda

00:04:39.620 --> 00:04:40.750
function resource itself.

00:04:40.750 --> 00:04:44.580
So that is going to be another entry here,

00:04:44.580 --> 00:04:50.600
So I'm going to call my Lambda Function is a K store process of function on the lettuce.

00:04:50.600 --> 00:04:52.650
Go ahead on build our lambda here.

00:04:52.650 --> 00:05:02.050
So under this we have a function model on the letters scope it Onda and I d name on what is

00:05:02.050 --> 00:05:03.550
going to be my function name.

00:05:03.550 --> 00:05:09.020
Bunch of name is going to be saying asked him why once in cored,

00:05:09.020 --> 00:05:16.720
it is always good to have a good description for your function so that you know what this

00:05:16.720 --> 00:05:21.700
function is processing and what is going to be a major run time.

00:05:21.700 --> 00:05:25.100
I'm most of the lambda conscience that I write are in fighting,

00:05:25.100 --> 00:05:26.820
so I'm just going to choose the right time.

00:05:26.820 --> 00:05:28.150
I support them here.

00:05:28.150 --> 00:05:32.130
I'm judging 3.7.

00:05:32.130 --> 00:05:33.820
If you have a registration go ahead.

00:05:33.820 --> 00:05:39.240
And Jews alike this wishing on what is going to be my handler and this is the function

00:05:39.240 --> 00:05:41.150
called If you just go ahead and open it,

00:05:41.150 --> 00:05:43.030
you'll have on Lambda Handler here.

00:05:43.030 --> 00:05:45.850
This is what we're going to reference in our flying here.

00:05:45.850 --> 00:05:49.230
So we have referenced our handler Onda.

00:05:49.230 --> 00:05:52.300
Let us go ahead and say that is the court is going to come from on.

00:05:52.300 --> 00:05:54.250
The core is coming in line.

00:05:54.250 --> 00:05:58.350
So here you have a cold here.

00:05:58.350 --> 00:06:00.620
So it is but the cold.

00:06:00.620 --> 00:06:05.800
What is going to be my diamond for my functions only I'm going to say my function is going

00:06:05.800 --> 00:06:08.000
to run for Greece.

00:06:08.000 --> 00:06:10.140
Thickens Andi.

00:06:10.140 --> 00:06:14.720
I want to set herself concurrency for execution so that my function will not have a run

00:06:14.720 --> 00:06:16.380
away situation on.

00:06:16.380 --> 00:06:22.290
I want to pass the dynamodb value to my lambda function so that it can perform some updates

00:06:22.290 --> 00:06:23.030
or edit.

00:06:23.030 --> 00:06:27.250
So we are going to add that to our environment were able on.

00:06:27.250 --> 00:06:32.030
I always have a log level also so that I can dynamically change what is going to be my love

00:06:32.030 --> 00:06:32.200
level.

00:06:32.200 --> 00:06:32.950
If there is an editor,

00:06:32.950 --> 00:06:34.180
I can troubleshoot as well.

00:06:34.180 --> 00:06:37.710
So by default I'm setting my log level is in for if you want,

00:06:37.710 --> 00:06:39.350
you can go ahead and change that also.

00:06:39.350 --> 00:06:44.330
So that would be table name on we can.

00:06:44.330 --> 00:06:51.360
What we can do is you can just pick it up here on then pretending people that string under

00:06:51.360 --> 00:06:58.160
this we will have a table in property so that its access that so my lambda function is also

00:06:58.160 --> 00:06:59.250
built now.

00:06:59.250 --> 00:07:02.560
So let's go ahead and add some privileges to Orlando function.

00:07:02.560 --> 00:07:04.840
We don't need any vigil privileges.

00:07:04.840 --> 00:07:07.090
If you want your lumber function to read some optics,

00:07:07.090 --> 00:07:08.460
you can go ahead and add them.

00:07:08.460 --> 00:07:11.260
But I'm not going to add any real privileges.

00:07:11.260 --> 00:07:14.090
So I'm just going to remove this on.

00:07:14.090 --> 00:07:18.250
We want our Lamberto have right level privileges toward animal TV.

00:07:18.250 --> 00:07:19.590
So that is what I'm going to do.

00:07:19.590 --> 00:07:22.750
I'm going to grant my guest your processor function.

00:07:22.750 --> 00:07:29.130
So we have our assets stable dot rant and for our function.

00:07:29.130 --> 00:07:29.550
Good.

00:07:29.550 --> 00:07:31.710
So when you're talking about the grand,

00:07:31.710 --> 00:07:33.650
you have multiple values for granted.

00:07:33.650 --> 00:07:35.740
You can see here you have brand full access,

00:07:35.740 --> 00:07:37.230
re level access or read right.

00:07:37.230 --> 00:07:39.870
You can go ahead and choose the very granular level access.

00:07:39.870 --> 00:07:40.360
For example,

00:07:40.360 --> 00:07:41.030
In this case,

00:07:41.030 --> 00:07:42.440
that isn't limited.

00:07:42.440 --> 00:07:43.040
Grant,

00:07:43.040 --> 00:07:45.910
I have given for our my function on.

00:07:45.910 --> 00:07:46.480
Finally,

00:07:46.480 --> 00:07:51.820
I also recommend you to go here on choose your A lot group so that whenever your stack is

00:07:51.820 --> 00:07:53.070
deleted or processed,

00:07:53.070 --> 00:07:55.200
all the resources should be done by the stack.

00:07:55.200 --> 00:07:56.100
So in this case,

00:07:56.100 --> 00:07:59.220
the Lambda Law Group should also be created by your stack.

00:07:59.220 --> 00:08:01.770
So I'm just going to create that now on.

00:08:01.770 --> 00:08:02.280
Remember,

00:08:02.280 --> 00:08:04.340
we are going to use the logs model,

00:08:04.340 --> 00:08:07.100
so we have not imported the logs model so far.

00:08:07.100 --> 00:08:09.250
So let the school head on do that.

00:08:09.250 --> 00:08:13.650
So we have imported our logs modern,

00:08:13.650 --> 00:08:15.250
So notice Go and build it.

00:08:15.250 --> 00:08:24.150
As for the scoop on what is going to be my law group name on the Lambda uses a familiar

00:08:24.150 --> 00:08:31.180
format off slash aws slash lambda slash function name for function name.

00:08:31.180 --> 00:08:32.610
We can dynamically build it.

00:08:32.610 --> 00:08:36.160
We can just pick up the case to a functioning on.

00:08:36.160 --> 00:08:39.950
Then you can do a dart and then we should be able to access the property here.

00:08:39.950 --> 00:08:47.090
So this should create a resource for ourselves and then also should get deleted whenever

00:08:47.090 --> 00:08:49.090
the function are stackers deleted.

00:08:49.090 --> 00:08:51.850
So I'm going to add that mobile policy also.

00:08:51.850 --> 00:08:54.610
And here also,

00:08:54.610 --> 00:08:59.030
I'm just going to choose destroy on how long you want to retain your logs.

00:08:59.030 --> 00:09:01.750
You can go ahead and choose that if you don't use it.

00:09:01.750 --> 00:09:04.110
Your lots are going to be there for a very long time.

00:09:04.110 --> 00:09:05.880
But of course we feel going to delete it.

00:09:05.880 --> 00:09:07.650
It is going to get deleted as well.

00:09:07.650 --> 00:09:14.180
So we have created our law group and finally we are going to attach our s three.

00:09:14.180 --> 00:09:16.380
Our creator Este notification toe.

00:09:16.380 --> 00:09:18.940
I'm the function on for that.

00:09:18.940 --> 00:09:27.010
We need to add our back into So I'm just going to call this a store back and on the S three

00:09:27.010 --> 00:09:27.010
.

00:09:27.010 --> 00:09:28.930
We have a new model called us yesterday.

00:09:28.930 --> 00:09:30.010
Notifications.

00:09:30.010 --> 00:09:31.870
So we need to install that.

00:09:31.870 --> 00:09:34.250
I don't have it installed in my requirements.

00:09:34.250 --> 00:09:35.200
You can see here.

00:09:35.200 --> 00:09:35.730
That's ah,

00:09:35.730 --> 00:09:36.330
a lot of things,

00:09:36.330 --> 00:09:36.910
but actually,

00:09:36.910 --> 00:09:38.440
notifications model is not there.

00:09:38.440 --> 00:09:43.540
So I'm just going to add that so we can go ahead and install it as well for all the other

00:09:43.540 --> 00:09:43.970
things.

00:09:43.970 --> 00:09:45.500
Since already it is installed,

00:09:45.500 --> 00:09:47.830
we don't have to do it by for this model.

00:09:47.830 --> 00:09:49.350
It has not been done already.

00:09:49.350 --> 00:09:52.150
So as three notifications,

00:09:52.150 --> 00:09:53.850
I say this.

00:09:53.850 --> 00:09:56.750
So I'm going to install it.

00:09:56.750 --> 00:09:59.680
So we have installed.

00:09:59.680 --> 00:10:01.650
Let us close these two files.

00:10:01.650 --> 00:10:05.150
Now we can go ahead and import it into our stack.

00:10:05.150 --> 00:10:12.530
You can see here it comes up here as s three underscore notifications.

00:10:12.530 --> 00:10:14.080
That is how I want to use it.

00:10:14.080 --> 00:10:17.560
So let us go down on DA build this.

00:10:17.560 --> 00:10:20.390
So what this is going to create is an Lambert destination.

00:10:20.390 --> 00:10:23.170
So under for ah esta notifications.

00:10:23.170 --> 00:10:26.050
You can have a SNS also and the Lambda also.

00:10:26.050 --> 00:10:30.130
So I'm just going toe create and I'm glad destination This time on,

00:10:30.130 --> 00:10:34.970
I'm going to point it toe my lumber from chinchilla So that is all we need to do as simple

00:10:34.970 --> 00:10:35.550
as that.

00:10:35.550 --> 00:10:37.310
And for what?

00:10:37.310 --> 00:10:39.160
A pope even if we want to get notified.

00:10:39.160 --> 00:10:42.620
So I'm going to say only for objects that are created.

00:10:42.620 --> 00:10:45.510
Onda not for deletes and not for modifications,

00:10:45.510 --> 00:10:46.170
not for a paid.

00:10:46.170 --> 00:10:50.740
So whenever the new object is added to my bucket I want to trigger my lambda function.

00:10:50.740 --> 00:10:54.690
So let's go ahead and do that for my bucket.

00:10:54.690 --> 00:10:58.030
I'm going toe add on.

00:10:58.030 --> 00:11:00.300
I went notification.

00:11:00.300 --> 00:11:05.860
You can see here for the bucket and matching it under this We have s three dot He went to

00:11:05.860 --> 00:11:06.350
type,

00:11:06.350 --> 00:11:11.820
not optic created on what is my notification target?

00:11:11.820 --> 00:11:14.280
This is my notification target Ongoing.

00:11:14.280 --> 00:11:15.100
Got at it here.

00:11:15.100 --> 00:11:16.770
So that is all of this.

00:11:16.770 --> 00:11:17.780
We have done everything.

00:11:17.780 --> 00:11:19.850
So let's go ahead and synthesize your stack.

00:11:19.850 --> 00:11:22.950
Clear my screen.

00:11:22.950 --> 00:11:25.810
Just go ahead and deployed.

00:11:25.810 --> 00:11:29.980
Let us go to our console and check out the resources.

00:11:29.980 --> 00:11:32.140
So this is called formation confirmation.

00:11:32.140 --> 00:11:33.680
Here letters go on.

00:11:33.680 --> 00:11:34.850
Check your bucket.

00:11:34.850 --> 00:11:40.490
We have our several Is even processor architecture bucket here on Daz off.

00:11:40.490 --> 00:11:45.640
Know that should not be any bar objects here on If I go to my property section on.

00:11:45.640 --> 00:11:47.000
If you just crawl down here,

00:11:47.000 --> 00:11:48.940
you will find the givens under.

00:11:48.940 --> 00:11:52.900
Even so you will find the automatically There's and Lambda has been created on.

00:11:52.900 --> 00:11:55.180
If I go ahead and choose this for credit,

00:11:55.180 --> 00:11:59.380
you will also find that only all object creative ones are selected.

00:11:59.380 --> 00:12:02.320
So that means that whenever an object is added to this pocket,

00:12:02.320 --> 00:12:07.900
then it will trigger this particular lamp a function that xkk store process of function on

00:12:07.900 --> 00:12:07.900
.

00:12:07.900 --> 00:12:08.420
Likewise,

00:12:08.420 --> 00:12:11.310
we should also have on dynamodb table here,

00:12:11.310 --> 00:12:13.150
so let's go ahead and check it out.

00:12:13.150 --> 00:12:16.000
Andi,

00:12:16.000 --> 00:12:20.110
currently the stable should not have any items right now.

00:12:20.110 --> 00:12:25.640
So what we're going to do now is we're going to add some objects to this bucket.

00:12:25.640 --> 00:12:26.430
Onda.

00:12:26.430 --> 00:12:28.380
The Lambda function should process those events.

00:12:28.380 --> 00:12:29.520
Basically what I have done this.

00:12:29.520 --> 00:12:34.860
I returned the Lambda function to take the object name sighs on the owner off this bucket

00:12:34.860 --> 00:12:40.410
on the bucket name and store those values into my dynamodb so you can go ahead and do any

00:12:40.410 --> 00:12:41.100
kind of processing.

00:12:41.100 --> 00:12:41.540
For example,

00:12:41.540 --> 00:12:42.450
if it is an image,

00:12:42.450 --> 00:12:43.550
you want to resize it,

00:12:43.550 --> 00:12:48.860
or if you want to go ahead and do some recognition and find out what objects out there,

00:12:48.860 --> 00:12:51.350
whether it is a cat or a dog are building,

00:12:51.350 --> 00:12:53.650
you can go ahead and store that kind of information.

00:12:53.650 --> 00:12:58.550
Onda send notifications to users so this lambda function is just a simple one.

00:12:58.550 --> 00:13:00.430
Just exit object key and stores it.

00:13:00.430 --> 00:13:02.050
So let's go ahead and upload it.

00:13:02.050 --> 00:13:04.970
Let us go where and choose the four files here.

00:13:04.970 --> 00:13:06.390
Click on open on,

00:13:06.390 --> 00:13:06.800
get on,

00:13:06.800 --> 00:13:09.750
upload on Once it is completed,

00:13:09.750 --> 00:13:13.560
what is going to happen is for each of those upload event that will be in Lambda that is

00:13:13.560 --> 00:13:17.730
happening on the back end on the Lambda will process each of those single files.

00:13:17.730 --> 00:13:18.270
For example,

00:13:18.270 --> 00:13:22.080
we should be seeing four entries into our dynamodb table,

00:13:22.080 --> 00:13:23.950
So let's go ahead and take it out.

00:13:23.950 --> 00:13:26.580
It made a first my table here.

00:13:26.580 --> 00:13:30.960
You can see all the four that I'm just going to randomly choose one on.

00:13:30.960 --> 00:13:34.080
Just let us changes to text so we can easily see them.

00:13:34.080 --> 00:13:38.180
Let me see if I can zoom it properly so you can see here.

00:13:38.180 --> 00:13:40.570
This is a bucket on da bucket.

00:13:40.570 --> 00:13:42.710
Boehner and I d undecideds off the file,

00:13:42.710 --> 00:13:43.240
Maxwell,

00:13:43.240 --> 00:13:46.210
To summarize what we have done so far,

00:13:46.210 --> 00:13:49.530
we have created an s three bucket enable the notifications.

00:13:49.530 --> 00:13:53.930
Whenever new objects are coming into the S three bucket that haven will trigger your lambda

00:13:53.930 --> 00:13:54.550
function.

00:13:54.550 --> 00:13:58.520
The Lambda function will go ahead and grab the information like your object name,

00:13:58.520 --> 00:14:04.740
size and our location on store that in a secure on the persistent way in dynamodb,

00:14:04.740 --> 00:14:06.620
go ahead and try it.

00:14:06.620 --> 00:14:12.000
Improve the Lambda function to do more than this on C where you can take it and deploy your

00:14:12.000 --> 00:14:14.250
own serverless architecture in the cloud.

00:14:14.250 --> 00:14:15.430
Until then,

00:14:15.430 --> 00:14:17.060
thanks for watching Happy learning.

