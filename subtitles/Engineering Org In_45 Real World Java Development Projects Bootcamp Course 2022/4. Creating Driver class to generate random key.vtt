WEBVTT
1
00:00:01.870 --> 00:00:05.880
If you closely look over code, we already created you.

2
00:00:05.950 --> 00:00:07.090
I mentioned this.

3
00:00:07.480 --> 00:00:09.250
So let me do one thing.

4
00:00:09.700 --> 00:00:14.680
I'm importing one default module known as Java Security.

5
00:00:15.530 --> 00:00:16.240
Let me.

6
00:00:19.030 --> 00:00:20.710
Optimized imports.

7
00:00:21.580 --> 00:00:27.940
So as using X, there is no need to import that libraries again and again.

8
00:00:27.940 --> 00:00:29.890
So let me mention here.

9
00:00:32.370 --> 00:00:36.960
Importing libraries and importing the libraries.

10
00:00:37.140 --> 00:00:42.510
So I created one class to create a symmetric key public class symmetric.

11
00:00:43.020 --> 00:00:51.750
In this class, what I'm mentioning, I mentioned my final string as is, which is static and performing

12
00:00:51.750 --> 00:01:01.980
as a US algorithm then function to create one key I mentioned function or you can method also it's commonly

13
00:01:01.980 --> 00:01:11.970
known as method, not function in java to throw exception, then it throws the exception.

14
00:01:11.970 --> 00:01:17.610
If there is an exception, secure random key is going to create random thing here with generation of

15
00:01:17.640 --> 00:01:20.940
key to 56 with a random.

16
00:01:22.430 --> 00:01:25.130
Which is basically random, and then it's going to be done with the key.

17
00:01:25.850 --> 00:01:35.450
Now, before this, what I'm I need to mention the driver driver call is basically nothing but mean

18
00:01:36.440 --> 00:01:37.860
driver I mentioned.

19
00:01:39.160 --> 00:01:44.470
So let me get ESPN or Mr. Goldman.

20
00:01:46.940 --> 00:01:57.620
ESV the main metal declaration again issue throws exception if there is an exception to the exception

21
00:01:57.620 --> 00:01:58.120
calling.

22
00:01:59.370 --> 00:01:59.760
No.

23
00:01:59.760 --> 00:02:01.230
What I'm going to mention.

24
00:02:01.830 --> 00:02:04.380
I'm going to ask.

25
00:02:04.410 --> 00:02:08.660
It's symmetric, so it's very easy security.

26
00:02:11.080 --> 00:02:15.160
Domain execute secret key with symmetric key.

27
00:02:20.400 --> 00:02:21.180
With which?

28
00:02:21.180 --> 00:02:23.280
Symmetric key dimension.

29
00:02:23.280 --> 00:02:24.210
Symmetric key.

30
00:02:29.950 --> 00:02:36.550
I want to mention here, symmetric key is equal to what is its symmetric key.

31
00:02:36.850 --> 00:02:43.810
Create a ESD, create a is so it will create a is key for me.

32
00:02:45.030 --> 00:02:45.540
No.

33
00:02:46.170 --> 00:02:52.800
What is going to mention is very simple system, not parental.

34
00:02:55.790 --> 00:02:58.570
So it should breed output for me.

35
00:03:02.750 --> 00:03:06.170
So this is my consultancy.

36
00:03:08.620 --> 00:03:11.170
And let me tell you one thing.

37
00:03:11.680 --> 00:03:13.630
Create a scheme and this function.

38
00:03:14.080 --> 00:03:19.360
So this is my function to create a ESD so it will print symmetric key for me.

39
00:03:20.850 --> 00:03:22.050
Oh, then.

40
00:03:23.210 --> 00:03:33.670
Political system brought out here only in Tennant Creek.

41
00:03:38.360 --> 00:03:38.980
Let's.

42
00:03:42.770 --> 00:03:43.390
Soon it.

43
00:03:46.070 --> 00:03:46.510
Okay.

44
00:03:47.660 --> 00:03:50.600
So I will change your little bit later.

45
00:03:50.600 --> 00:03:59.840
But now this is my create a first class which is using a key algorithm for this purpose which is going

46
00:03:59.840 --> 00:04:01.700
to change this everything.

47
00:04:02.480 --> 00:04:09.470
So now let me run this using you can go to this also or control shift f ten also I'm going to this tab

48
00:04:09.470 --> 00:04:10.790
and I'm going to run.

49
00:04:11.360 --> 00:04:13.640
It's currently building in the build thing.

50
00:04:13.700 --> 00:04:15.680
You can check it's currently building.

51
00:04:19.010 --> 00:04:20.810
It will take time to build everything.

52
00:04:25.300 --> 00:04:28.930
So it's running task, doing encryption.

53
00:04:34.480 --> 00:04:42.450
And when this is done, you can check this Java script to these things.

54
00:04:43.090 --> 00:04:43.750
But.

55
00:04:45.000 --> 00:04:45.760
Wait a minute.

56
00:04:45.780 --> 00:04:46.830
This is encoded.

57
00:04:47.220 --> 00:04:48.030
No.

58
00:04:49.080 --> 00:04:50.590
It's printing the directive.

59
00:04:51.150 --> 00:04:52.860
It's not encoded.

60
00:04:52.950 --> 00:04:54.780
So I need to encode it.

61
00:04:55.090 --> 00:04:55.980
I need to encode.

62
00:04:55.980 --> 00:04:58.410
ENCODE is just basically creating in the ciphertext.

63
00:04:58.740 --> 00:05:00.600
So this is not at all.

64
00:05:01.880 --> 00:05:03.630
This is just key specifying.

65
00:05:04.260 --> 00:05:09.510
I need to mention here more important thing to encode.

66
00:05:09.690 --> 00:05:11.880
So data type converter.

67
00:05:12.290 --> 00:05:14.190
So let me move this.

68
00:05:14.850 --> 00:05:15.180
What?

69
00:05:15.180 --> 00:05:17.940
I need to create data type converter.

70
00:05:20.670 --> 00:05:21.530
Detective.

71
00:05:24.780 --> 00:05:25.390
Converter.

72
00:05:32.440 --> 00:05:34.510
Oh, so wait a minute.

73
00:05:37.310 --> 00:05:45.200
There is a water department data type converter.

74
00:05:54.880 --> 00:05:57.480
Later converter dot.

75
00:06:00.000 --> 00:06:03.260
I need to mention some print.

76
00:06:05.210 --> 00:06:06.660
Takes hexadecimal.

77
00:06:06.660 --> 00:06:10.400
I needed to encode binary.

78
00:06:14.950 --> 00:06:16.600
So I will.

79
00:06:18.630 --> 00:06:20.640
Look at the spark converter.

80
00:06:21.510 --> 00:06:22.470
It's binary.

81
00:06:26.340 --> 00:06:26.940
Wait a minute.

82
00:06:26.940 --> 00:06:31.920
I need to use or import this also.

83
00:06:32.400 --> 00:06:35.100
So there may be no error.

84
00:06:49.110 --> 00:06:50.170
So if you.

85
00:06:53.630 --> 00:06:54.670
For.

86
00:06:55.940 --> 00:06:56.810
Taking this error.

87
00:06:56.810 --> 00:06:57.990
I will resolve this.

88
00:06:58.010 --> 00:06:59.430
It's very easy error.

89
00:07:10.840 --> 00:07:12.880
So it's extremely severe.

90
00:07:12.880 --> 00:07:14.980
So you need to.

91
00:07:17.280 --> 00:07:19.020
Object with this javelin.

92
00:07:48.630 --> 00:07:54.480
So if you are facing this error to this part, it will import.

93
00:08:13.670 --> 00:08:17.660
It will download the Java that file for you.

94
00:08:18.630 --> 00:08:22.700
It will automatically index that part.

95
00:08:25.230 --> 00:08:27.870
So wait for some time to develop this.

96
00:08:28.800 --> 00:08:34.260
Why we required this, I will tell you because that's a simple thing I created.

97
00:08:34.260 --> 00:08:37.370
But I need to mention symmetric key also.

98
00:08:37.370 --> 00:08:37.800
So.

99
00:08:41.160 --> 00:08:43.650
It's very easy in Java.

100
00:08:47.410 --> 00:08:50.710
I'm going to mention and.

101
00:08:53.460 --> 00:08:54.120
You did this.

102
00:08:55.490 --> 00:08:55.890
So.

103
00:08:58.800 --> 00:08:59.010
It's.

104
00:09:01.550 --> 00:09:02.210
So.

105
00:09:08.700 --> 00:09:10.770
It is adding the dependencies, but.

106
00:09:21.190 --> 00:09:26.850
Sometimes there may be error in this, so better to go with my dependencies.

107
00:09:27.130 --> 00:09:27.700
It will.

108
00:09:30.260 --> 00:09:32.360
Directly at that dependencies.

109
00:09:36.790 --> 00:09:37.510
We need Java.

110
00:09:37.570 --> 00:09:41.590
XML bind java basically.

111
00:09:43.150 --> 00:09:44.050
So you may.

112
00:09:51.850 --> 00:09:56.560
Directly download such dependencies on the internet which are available.

113
00:10:02.310 --> 00:10:03.000
So.

114
00:10:04.850 --> 00:10:06.380
What I'm downloading.

115
00:10:06.380 --> 00:10:12.620
You need one Java XML bind dependency to create that thing.

116
00:10:12.620 --> 00:10:13.250
So.

117
00:10:15.620 --> 00:10:16.240
I'm okay.

118
00:10:16.280 --> 00:10:17.960
I'm having that dependency.

119
00:10:18.380 --> 00:10:23.720
So what I'm going to do, I'm just going to mention that jar file here.

120
00:10:25.950 --> 00:10:30.340
So let me add one job.

121
00:10:30.360 --> 00:10:33.600
You can directly, directly add jobs here also.

122
00:10:34.730 --> 00:10:35.650
I'm here also.

123
00:10:35.800 --> 00:10:37.510
Or else go to file.

124
00:10:39.200 --> 00:10:40.520
Project structure.

125
00:10:45.380 --> 00:10:48.410
If we go to this project structure, if you can see this.

126
00:10:49.610 --> 00:10:50.720
What do libraries.

127
00:10:51.760 --> 00:10:53.920
Nothing is added like this.

128
00:10:53.920 --> 00:10:55.300
Things are added already.

129
00:10:55.540 --> 00:10:57.100
I need to mention Java.

130
00:10:58.330 --> 00:11:00.480
Or it will directly go to this.

131
00:11:00.490 --> 00:11:03.820
So let me go to where I stored that part.

132
00:11:07.120 --> 00:11:09.350
What's the maximum function?

133
00:11:12.030 --> 00:11:14.850
Equal weight will directly apply this.

134
00:11:17.300 --> 00:11:17.780
At the end.

135
00:11:26.270 --> 00:11:32.300
So now you can take these dependencies that are added like data converter, which is basically my jar

136
00:11:32.300 --> 00:11:33.370
file is missing there.

137
00:11:33.410 --> 00:11:40.490
So I didn't I did my job file and now it's going to print the same hex binary and get in cool.

138
00:11:41.000 --> 00:11:42.590
So let us run this again.

139
00:11:44.450 --> 00:11:45.620
It's currently building.

140
00:11:48.080 --> 00:11:50.930
So wait for some time to build this.

141
00:11:51.320 --> 00:11:58.760
So why are we required to create our generate this key before developing actual algorithm we are going

142
00:11:58.760 --> 00:11:59.210
to develop?

143
00:11:59.420 --> 00:12:00.410
Why required?

144
00:12:00.410 --> 00:12:01.550
We required this?

145
00:12:02.850 --> 00:12:03.630
Boombox.

146
00:12:04.010 --> 00:12:05.730
Regeneration is very important.

147
00:12:06.060 --> 00:12:09.360
First, without key generation, you cannot do anything.

148
00:12:10.200 --> 00:12:11.520
So now this is Mike.

149
00:12:12.600 --> 00:12:15.360
So let me do one thing.

150
00:12:15.720 --> 00:12:18.570
If you can see, this is my key.

151
00:12:19.320 --> 00:12:20.820
Let me copy this key.

152
00:12:22.410 --> 00:12:23.550
Now, why?

153
00:12:23.550 --> 00:12:28.080
I use the random thing here and let me paste this key for remember.

154
00:12:32.840 --> 00:12:36.790
As you can see, it is 256 which is deploying in this.

155
00:12:36.980 --> 00:12:38.180
It is 256.

156
00:12:38.390 --> 00:12:40.160
Now, let me run this again.

157
00:12:40.520 --> 00:12:42.530
What I mentioned we want to show you.

158
00:12:43.010 --> 00:12:48.890
I want to show you why I use secure random algorithm here, randomly changing the key.

159
00:12:49.820 --> 00:12:51.520
These should not be always same.

160
00:12:51.530 --> 00:12:55.580
I should not always use this same because anyone can crack this again later.

161
00:12:57.170 --> 00:13:01.520
So now you can take beat by beat.

162
00:13:01.820 --> 00:13:03.860
This key is different.

163
00:13:05.240 --> 00:13:12.380
So we developed one code which helps to create symmetric keys always.

164
00:13:12.380 --> 00:13:20.330
So this is my encryption key, which is I'm going to use to encrypt one data using that data only it

165
00:13:20.330 --> 00:13:21.800
will decrypt that part.

166
00:13:22.490 --> 00:13:26.750
Hope you understand in the next part what I'm going to do.

167
00:13:28.190 --> 00:13:31.850
Let me copy this also and let me show you this also.

168
00:13:41.550 --> 00:13:43.290
Is not probably the first part.

169
00:13:45.450 --> 00:13:49.560
So you're doing this and it's not.

170
00:13:56.040 --> 00:13:59.400
Courtney me business.

171
00:14:01.320 --> 00:14:04.260
Another different.

172
00:14:04.560 --> 00:14:10.350
So we can generate such keys using a is algorithm advanced encryption secure algorithm.

173
00:14:11.100 --> 00:14:15.300
Also I use secure random to create security random changing these keys.

174
00:14:15.330 --> 00:14:18.270
So if you want to check, you can check this.

175
00:14:20.160 --> 00:14:26.850
It is purely to 56 bits and telling about bits, he sighs.

176
00:14:27.180 --> 00:14:29.580
For me it's hexadecimal, so it's printing.

177
00:14:29.670 --> 00:14:36.090
And remember, I need one XML Java XML binding data type here, so you need to download this.

178
00:14:36.480 --> 00:14:38.910
I added to this also.

179
00:14:38.910 --> 00:14:39.480
So.

180
00:14:40.760 --> 00:14:42.450
Where is that thing?

181
00:14:42.450 --> 00:14:45.570
I'll edit the library in this also.

182
00:14:46.080 --> 00:14:49.710
I hope you understand in the next part.

183
00:14:51.620 --> 00:14:57.530
I'm going to create a virtual algorithm, how it's going to work and how it's going to encrypt and decrypt

184
00:14:57.530 --> 00:14:57.920
data.

185
00:14:58.280 --> 00:14:59.210
Hope you understand.

186
00:14:59.240 --> 00:14:59.930
Thank you.
