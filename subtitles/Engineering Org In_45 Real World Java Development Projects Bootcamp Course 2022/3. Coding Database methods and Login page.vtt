WEBVTT
1
00:00:01.470 --> 00:00:09.780
So in this video we will have a look at the database file, Java file and the log in file log in class

2
00:00:09.780 --> 00:00:17.020
will help us to create the login page and check whether the login details are valid or not.

3
00:00:17.040 --> 00:00:24.990
While the database database file on Java will be used to connect with the multiple tables in our database

4
00:00:24.990 --> 00:00:26.130
with our project.

5
00:00:27.660 --> 00:00:30.260
So let's move on the debate on file.

6
00:00:30.270 --> 00:00:35.340
So we have already talked about this connection method.

7
00:00:35.700 --> 00:00:39.360
We will be moving forward after this connection method in this class.

8
00:00:39.360 --> 00:00:40.410
So.

9
00:00:41.990 --> 00:00:48.230
Here is the next method that is public static add product to database.

10
00:00:48.230 --> 00:00:53.630
So this method will be called whenever we want to add a product to our database.

11
00:00:54.170 --> 00:01:03.560
This method is taking parameters like ID or a string type or detail of a string type or company and

12
00:01:03.560 --> 00:01:05.600
quantity of integer type.

13
00:01:06.280 --> 00:01:13.270
Now inside this method, we have called our connection method DB connection method and creates created

14
00:01:13.270 --> 00:01:18.100
the instance of connection with the help of our DB connection method, which we have just discussed

15
00:01:18.100 --> 00:01:19.420
in our previous video.

16
00:01:19.900 --> 00:01:24.790
After that, inside this method, we have created a gas block.

17
00:01:24.790 --> 00:01:26.200
Inside the trip block.

18
00:01:26.320 --> 00:01:32.380
We have defined the statement instance by using our connection instance.

19
00:01:33.420 --> 00:01:38.770
And the method create statements that this will be creating the statement and stance.

20
00:01:38.790 --> 00:01:46.080
After that, we have called execute update query, which will help us to update the database and insert

21
00:01:46.080 --> 00:01:51.930
the values in our table so inside which we have passed that insert into stock.

22
00:01:51.930 --> 00:01:57.690
So this will be inserting values in our stock table, which we have created in our last video, and

23
00:01:57.930 --> 00:02:02.850
values inside the values we have passed the ID details, company and quantity.

24
00:02:02.850 --> 00:02:07.260
So if you remember, these are also the columns of our stock table.

25
00:02:07.260 --> 00:02:11.340
So this will add those details which will be parsed here as the argument.

26
00:02:11.340 --> 00:02:16.920
Those are ID details, company and quantity after that, if that will be successful.

27
00:02:16.920 --> 00:02:20.490
So we will be showing a dialog box with the help of option pane.

28
00:02:20.670 --> 00:02:25.800
So message dialog box product added to the database, that will be the dialog box shown.

29
00:02:25.800 --> 00:02:31.320
After that, we have closed the connection by using the dot closed method on our connection instance

30
00:02:31.320 --> 00:02:39.960
inside the cache block we will be handling if any such exception occurs and we will be showing it by

31
00:02:39.960 --> 00:02:42.360
with the help of our dialog box.

32
00:02:42.360 --> 00:02:47.190
Now the next method is update to database.

33
00:02:47.190 --> 00:02:53.760
So this method will be called whenever we want to update the details of any product in our database.

34
00:02:53.760 --> 00:03:00.500
It is also taking the similar parameters like a string ID, string details, a string company and end

35
00:03:00.510 --> 00:03:01.260
quantity.

36
00:03:01.410 --> 00:03:09.660
After that, inside which we have created the instance of the connection type by using our DB connection

37
00:03:09.660 --> 00:03:10.350
method.

38
00:03:10.380 --> 00:03:16.080
After that we have created the statement instance with the help of DOT created a statement.

39
00:03:16.200 --> 00:03:23.250
After that we have defined a status inside which we have assigned the execution of the update query

40
00:03:23.250 --> 00:03:27.360
with the help of statement instance inside which we have passed the query.

41
00:03:27.360 --> 00:03:31.050
The query here is update stock set values.

42
00:03:31.050 --> 00:03:34.830
These are the query for the SQL to update any table.

43
00:03:34.830 --> 00:03:41.100
So set detail is goes to the pass detail argument, company to company, quantity to quantity and where

44
00:03:41.100 --> 00:03:44.580
the product ID is ID so where the ID will be matched.

45
00:03:44.580 --> 00:03:47.670
So at that place, these details will be updated.

46
00:03:49.330 --> 00:03:58.030
So that statement, that execute method will provide or return a value, which is one.

47
00:03:58.420 --> 00:04:01.690
It will return the value one if the update is successful.

48
00:04:01.690 --> 00:04:03.470
Otherwise it will return zero.

49
00:04:03.520 --> 00:04:07.150
If the status is equals to is close to one, we will show that product terminated.

50
00:04:07.360 --> 00:04:12.190
Otherwise, if in case of a status as equals to zero, we will show product ID not found.

51
00:04:12.280 --> 00:04:15.470
After that, we will close the connection inside the cache block.

52
00:04:15.490 --> 00:04:16.210
We will.

53
00:04:17.320 --> 00:04:19.510
Be showing the dialog box with the message.

54
00:04:19.630 --> 00:04:28.450
Then there is another method delete product to database which is having argument a string ID instead,

55
00:04:28.450 --> 00:04:30.910
which we have similarly created the connection statement.

56
00:04:30.910 --> 00:04:36.340
Inside the dialog we have created the statement instance using our dot, created dot.

57
00:04:36.370 --> 00:04:42.220
Create a statement inside the status we have again passed the statement not execute update inside which

58
00:04:42.220 --> 00:04:45.730
we have passed the argument delete from a stock where product ID will match.

59
00:04:45.730 --> 00:04:48.550
So where the product ID will match in our table is stock.

60
00:04:48.550 --> 00:04:50.950
So that table will be deleted.

61
00:04:50.950 --> 00:04:54.610
So if the statement status is equal to one, we will show that product deleted.

62
00:04:54.610 --> 00:04:57.260
If not, then when we show the product id not found.

63
00:04:57.280 --> 00:05:01.060
Similarly, inside the block we will handle the exception if any occurs.

64
00:05:01.060 --> 00:05:03.640
And so the dialog box with that exception.

65
00:05:05.580 --> 00:05:09.460
Now after that, we have another method here for search product.

66
00:05:09.480 --> 00:05:12.890
This will be used to search any product from our database.

67
00:05:12.900 --> 00:05:15.480
So first of all, we have created the connection statement.

68
00:05:15.510 --> 00:05:18.930
Similarly, we have created the statement instance by using create a statement.

69
00:05:18.960 --> 00:05:24.900
After that, we have executed the results and we have initialized the results set instance, which will

70
00:05:24.900 --> 00:05:31.080
be a statement dot execute query pass the query select extract from a stock where product ID is ID so

71
00:05:31.080 --> 00:05:35.370
where the product ID will match this results service tool the result for that.

72
00:05:36.540 --> 00:05:39.030
Particular productivity, if not results.

73
00:05:39.150 --> 00:05:44.910
So if the results are next, will contain nothing or returning zero value or one value.

74
00:05:44.910 --> 00:05:48.660
So this will show that no product, no product found with this ID.

75
00:05:48.990 --> 00:05:55.290
Otherwise, if it executes successfully, then we will show the dialog box with the product ID and the

76
00:05:55.290 --> 00:05:56.360
quantity of it.

77
00:05:56.370 --> 00:05:59.760
So this dialog box, whenever we search the product, it will show us the.

78
00:06:00.910 --> 00:06:04.210
Idea of the product and also its quantity.

79
00:06:04.300 --> 00:06:08.130
After that, we will close the connection and handle the exception in the cache block.

80
00:06:08.140 --> 00:06:13.840
Similarly for the search cache here, we have created the connection statement, statement instance,

81
00:06:13.840 --> 00:06:21.430
and then we have executed the query with the help of results such as instance select aspect from users

82
00:06:21.430 --> 00:06:22.390
where email match.

83
00:06:22.390 --> 00:06:24.310
So it is taking an argument as email.

84
00:06:24.310 --> 00:06:27.670
So where email will be matched, we will be executing that very similarly.

85
00:06:27.670 --> 00:06:32.500
If the query cannot be executed, we will show that no cashier found.

86
00:06:32.530 --> 00:06:38.950
If the query executed, we will show that that query, the email of the cashier and the password of

87
00:06:38.950 --> 00:06:39.630
the cashier.

88
00:06:39.640 --> 00:06:43.020
Then we will close the connection and an exception if occurs in the database.

89
00:06:43.030 --> 00:06:50.230
Similarly, there is another method of boolean type return type boolean verify login which will help

90
00:06:50.230 --> 00:06:54.670
us to verify log in detail which is taking a string, email and password.

91
00:06:54.670 --> 00:07:00.340
First log boolean type of log in variable is set to false establish the connection with our database.

92
00:07:00.550 --> 00:07:02.360
Create the statement inside the set.

93
00:07:02.380 --> 00:07:06.040
We will execute the query select extract from user where email and password match.

94
00:07:06.040 --> 00:07:11.080
So if the email and password match does not match successfully, then will set the login is goes to

95
00:07:11.080 --> 00:07:11.320
force.

96
00:07:11.320 --> 00:07:15.880
If match successfully we will set log in is close to true, then we will close the connection and inside

97
00:07:15.880 --> 00:07:17.350
the client catch block.

98
00:07:17.350 --> 00:07:19.780
We will show the message dialog box with the.

99
00:07:21.400 --> 00:07:25.060
Exception which will get after that inside the.

100
00:07:26.380 --> 00:07:28.870
Uh, a static void cashier method.

101
00:07:28.870 --> 00:07:29.960
We will be adding the cashier.

102
00:07:29.980 --> 00:07:32.470
Similarly, with the help of user and password.

103
00:07:32.470 --> 00:07:35.830
So similarly, we have created the connection statement and a statement.

104
00:07:35.830 --> 00:07:40.900
Insert values into users with the user and password and show the dialog box that cashier error successfully.

105
00:07:41.050 --> 00:07:46.270
Similarly for the delete cashier, we have established the connection executed the statement.

106
00:07:46.420 --> 00:07:52.780
We are delete from user where email and user email and password will match show the dialog box that

107
00:07:52.780 --> 00:07:54.700
cashier deleted otherwise cashier not phone.

108
00:07:55.510 --> 00:07:58.840
Then we search the product details for searching the product details.

109
00:07:59.890 --> 00:08:05.410
We have initialized the connection statement and a string it set as null and quantity statement.

110
00:08:05.410 --> 00:08:09.550
We have read the statement and inside the results set instance we have executed select extract from

111
00:08:09.550 --> 00:08:12.730
a stock where it is ID, so where the product will match.

112
00:08:12.730 --> 00:08:17.760
We will select all the details from that stock table and if the execution will not happen successfully,

113
00:08:17.770 --> 00:08:19.210
then we will set it to nil.

114
00:08:19.240 --> 00:08:26.110
Otherwise we will set quantity instance quantity variable to the integer parts to get a string quantity.

115
00:08:26.110 --> 00:08:29.290
So by getting the quantity we will convert it into the string.

116
00:08:29.290 --> 00:08:33.640
If the quantity is less than zero item is out of stock and if the quantity is greater than zero, then

117
00:08:33.640 --> 00:08:34.480
we will show that.

118
00:08:35.970 --> 00:08:41.100
Inside, we will show our resort in detail and it's our resort.

119
00:08:41.100 --> 00:08:42.230
Get a string company.

120
00:08:42.240 --> 00:08:48.300
So then we will execute the statement that update the stock set quantity to new quantity and where product

121
00:08:48.360 --> 00:08:49.020
is equal to zero.

122
00:08:49.020 --> 00:08:53.130
So quantity will be set in the our stock table.

123
00:08:53.160 --> 00:09:00.900
After that, there is a add sale to database which is taking our object type of data variable and ArrayList

124
00:09:00.900 --> 00:09:06.690
of string and which is company and a string name inside the database connection.

125
00:09:06.690 --> 00:09:10.950
We will create the connection, date format and a new date.

126
00:09:11.890 --> 00:09:18.100
And set the date to the string variable D inside the stable, we can create the statement for X to the

127
00:09:18.100 --> 00:09:18.880
data plan.

128
00:09:18.880 --> 00:09:27.190
So for the it will iterate over the data of length of the data and we will execute update vary in certain

129
00:09:27.190 --> 00:09:34.870
local values with the data x accompanied or get zero d which will be data x plus three, x plus four

130
00:09:34.870 --> 00:09:36.040
and name.

131
00:09:36.040 --> 00:09:38.020
So that will be updated into the cell.

132
00:09:39.280 --> 00:09:40.630
Company not remove zero.

133
00:09:40.630 --> 00:09:44.170
So this will remove the company at the zero index.

134
00:09:44.200 --> 00:09:45.410
No connection clause.

135
00:09:45.430 --> 00:09:48.700
After that we will handle the exception if any occurs.

136
00:09:48.830 --> 00:09:51.420
So there is another method get sale.

137
00:09:51.430 --> 00:09:53.200
So this will fetch the sale.

138
00:09:53.200 --> 00:09:55.180
Details from the sale table.

139
00:09:55.600 --> 00:09:56.560
Add a list of string.

140
00:09:56.560 --> 00:09:57.690
We will execute the seller.

141
00:09:57.690 --> 00:10:00.820
Select from sale where it will match and the company will match.

142
00:10:02.480 --> 00:10:06.710
After that, we will establish the connection and execute the query.

143
00:10:07.430 --> 00:10:10.340
Q So this will execute the query.

144
00:10:10.340 --> 00:10:12.170
Q And we will iterate over the date.

145
00:10:12.290 --> 00:10:17.810
Iterate over the record of the same table and show the details like date, product, ID, company and

146
00:10:17.810 --> 00:10:18.440
payment.

147
00:10:18.650 --> 00:10:24.520
After that, there is another show stock, so this will be used to show a stock details.

148
00:10:24.530 --> 00:10:27.350
Similarly, as we have shown the sale details.

149
00:10:27.560 --> 00:10:29.810
After that there is a get product details.

150
00:10:29.810 --> 00:10:35.090
So this will be showing the details of the product and updating the quantity as well.

151
00:10:36.800 --> 00:10:38.660
After that, there is a search product.

152
00:10:38.660 --> 00:10:42.920
So this will be showing the details of the product.

153
00:10:43.800 --> 00:10:49.410
And there is an update product table also, which will be used to update the details of the product.

154
00:10:50.220 --> 00:10:52.030
So this is all about the database class.

155
00:10:52.050 --> 00:10:58.170
Now let's move quickly to the login class, which will be the first login class that is defined inside

156
00:10:58.170 --> 00:10:59.100
the package store.

157
00:10:59.130 --> 00:11:04.950
We have imported the necessary packages which will help us to create a better interface for this page.

158
00:11:04.950 --> 00:11:07.700
Then we have defined the login class which is extending frame.

159
00:11:07.710 --> 00:11:14.280
There is a panel, panel, a text field, a password field, two types of string login label string

160
00:11:14.280 --> 00:11:19.230
error text invalid username a password, another label a button and another private label.

161
00:11:19.260 --> 00:11:23.190
Inside the main function, we have executed the public run method, inside which we have created the

162
00:11:23.190 --> 00:11:29.010
login instance and after that we have inside its non parameter constructor we have called the GI function.

163
00:11:29.010 --> 00:11:31.170
Let's see what inside the function.

164
00:11:31.170 --> 00:11:36.330
Inside your function we have set the title as login and are the properties of the iframe.

165
00:11:36.330 --> 00:11:40.570
After that we have content and set the bottom of the frame and set the layout as null.

166
00:11:40.590 --> 00:11:42.090
After that there is a label username.

167
00:11:42.090 --> 00:11:47.590
We have set the font bound and added that to our frame.

168
00:11:47.610 --> 00:11:50.810
After that there is a text field for that respective label.

169
00:11:50.820 --> 00:11:52.110
Then there is a label password.

170
00:11:52.110 --> 00:11:54.840
We have set font and bound of that password label.

171
00:11:54.870 --> 00:11:59.960
After that we have set the text field for that particular password, then password field adding extra

172
00:11:59.970 --> 00:12:01.270
listener to the password field.

173
00:12:01.290 --> 00:12:04.410
So public void action button, don't do click.

174
00:12:04.410 --> 00:12:07.320
So this will let us click on that button.

175
00:12:07.500 --> 00:12:11.340
After that, there is a button new dot labeled as log in.

176
00:12:11.340 --> 00:12:13.940
So in that button we have added the action listener.

177
00:12:14.370 --> 00:12:19.060
So which will fetch the password from the password and convert it into two lowercase in the string?

178
00:12:19.080 --> 00:12:24.420
Similarly, for the username and password set text is equal to null and username is goes to null.

179
00:12:24.810 --> 00:12:29.490
After that, if the password and username null, then we will set the error text else.

180
00:12:30.520 --> 00:12:34.330
Set the text to nil and then we will check for the username equals admin.

181
00:12:34.330 --> 00:12:40.180
If the username equals admin then we will verify the login with our database method which is verify

182
00:12:40.210 --> 00:12:49.690
log in and let us move the control of the programme to the admin panel if the username is not admin.

183
00:12:49.690 --> 00:12:51.160
So that must be for the cashier.

184
00:12:51.160 --> 00:12:59.110
So we will verify login with the username and password and open the generate voice method or the frame

185
00:12:59.110 --> 00:13:00.790
which will be used for the cashier.

186
00:13:01.000 --> 00:13:06.460
After that there is a button login setting the bound for the button login and adding that button to

187
00:13:06.460 --> 00:13:06.880
our.

188
00:13:08.230 --> 00:13:09.340
Frame after that.

189
00:13:09.370 --> 00:13:13.960
Error message error type of label which will be set to null after that.

190
00:13:13.960 --> 00:13:20.170
Error message for when color is read and error label bound and then error added to the frame label.

191
00:13:20.170 --> 00:13:27.970
And then error is another label is to log in and set the found for that label and adding a bound for

192
00:13:27.970 --> 00:13:28.390
that label.

193
00:13:28.390 --> 00:13:30.190
Then we will set that label to our panel.

194
00:13:30.190 --> 00:13:32.440
So this is all about the log in class.

195
00:13:33.750 --> 00:13:41.910
And so in this video we have talked about the login class and the frame of the login and also the database

196
00:13:41.910 --> 00:13:44.150
methods inside our DB Java file.

197
00:13:44.190 --> 00:13:45.510
So that's all in this video.
