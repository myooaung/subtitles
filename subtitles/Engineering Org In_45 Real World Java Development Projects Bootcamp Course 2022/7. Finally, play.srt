1
00:00:00,910 --> 00:00:06,720
So what we have done in our part, firstly we have done with the game design.

2
00:00:06,730 --> 00:00:13,340
At this stage we have defined the properties the size, the size of the playing field and tiles, which

3
00:00:13,360 --> 00:00:15,550
is the number of spots in the field.

4
00:00:16,210 --> 00:00:20,180
The tiles is a tag which is one dimensional array of integers.

5
00:00:20,200 --> 00:00:26,350
Each tag will receive a unique value in the range zero with the tiles, and here zero.

6
00:00:26,740 --> 00:00:29,950
This zero denotes an empty square.

7
00:00:29,950 --> 00:00:34,480
And another one is the blank pools which will the position of the empty square.

8
00:00:34,930 --> 00:00:36,910
Now what is the game logic?

9
00:00:37,760 --> 00:00:43,760
So we need to define a reset method used to initialize a new game position.

10
00:00:45,260 --> 00:00:50,530
We have to define a reset method used to initialize a new position.

11
00:00:50,540 --> 00:00:53,960
So we set the value for each element of the target.

12
00:00:54,740 --> 00:01:01,790
Well, then we put blank position in the last question of where we put the blank position with the last

13
00:01:01,790 --> 00:01:02,620
question of memory.

14
00:01:02,960 --> 00:01:10,610
So we need to shuffle the matter in need the shuffle marker to shuffle an area of tag so we do not include

15
00:01:10,610 --> 00:01:14,750
an empty tag in the shuffling process to leave it in the former position.

16
00:01:15,140 --> 00:01:23,330
So after that shuffling method, since only half of the possible starting position of the puzzle have

17
00:01:23,330 --> 00:01:24,170
a solution.

18
00:01:24,170 --> 00:01:31,100
So we need to check the resulting mixing result to make sure that the current layout is generally solved.

19
00:01:31,220 --> 00:01:35,180
So to do this, we define the solvable method here.

20
00:01:36,440 --> 00:01:42,310
For solving the layout, the current layout, and check the mixing results.

21
00:01:42,320 --> 00:01:48,410
So if a specific tag is preceded by the higher value here, this one.

22
00:01:48,860 --> 00:01:53,810
This is considered an inversion, so an empty tag is in place.

23
00:01:53,810 --> 00:01:59,130
The number of inversions must be even for the puzzle to be solvable.

24
00:01:59,660 --> 00:02:03,590
So we found the number of inversions return true.

25
00:02:04,130 --> 00:02:11,990
If the number is even here, the return true if the number is even and it's important to define the

26
00:02:11,990 --> 00:02:20,330
is on this matter to check if our game of the is alignment is resolved or not.

27
00:02:20,510 --> 00:02:23,180
So first we looked at the where?

28
00:02:23,180 --> 00:02:24,440
The empty tag.

29
00:02:24,680 --> 00:02:25,640
The blank tile.

30
00:02:25,690 --> 00:02:26,090
Okay.

31
00:02:26,360 --> 00:02:33,680
So we look at the empty tag as if the initial position, then the current alignment is a new one which

32
00:02:33,680 --> 00:02:35,720
has not been decided before.

33
00:02:36,050 --> 00:02:43,460
Then we iterate, then we treat with the tiles in the reverse order here.

34
00:02:44,150 --> 00:02:50,900
And if the tag value differs from the corresponding plus one index, it will return false.

35
00:02:51,170 --> 00:02:58,010
Otherwise it is time to return true at the end of the method because the puzzle has already been solved.

36
00:02:58,730 --> 00:03:03,440
Now we need another method to define the new game.

37
00:03:07,310 --> 00:03:11,430
Do we need another marker to define a new game?

38
00:03:11,450 --> 00:03:14,320
It is required to create a new instance of the game.

39
00:03:14,330 --> 00:03:21,350
So to do this, we reset the playing field, shuffle it, and then continue until the playing position

40
00:03:21,350 --> 00:03:22,700
is resolvable.

41
00:03:23,420 --> 00:03:29,600
So after that, finally, we need to program the movement of the spots in the area.

42
00:03:29,720 --> 00:03:34,760
This code will be all set up all back to respond to cursor movement.

43
00:03:34,970 --> 00:03:38,960
Our game will support multiple tile moves simultaneously.

44
00:03:38,990 --> 00:03:45,050
Thus, after we converted the press position on the screen in the tag, we get the position of the amplitude

45
00:03:45,050 --> 00:03:51,020
and look for the direction of movement to support several of its movement at the same time.

46
00:03:51,260 --> 00:03:53,450
So here we have done that thing.

47
00:03:53,450 --> 00:03:55,530
Now next thing, which we have done.

48
00:03:55,550 --> 00:03:58,340
We have left the UI on the swing API.

49
00:03:58,580 --> 00:04:01,110
So it's time to do the interface.

50
00:04:01,130 --> 00:04:03,950
So first we take the G pattern class.

51
00:04:05,700 --> 00:04:11,010
Here we have the cheap panel glass and we draw spots on the field.

52
00:04:11,460 --> 00:04:19,310
So to calculate the grid size of each, we will use the data specified in constructor parameter of a

53
00:04:19,350 --> 00:04:25,560
grid size equal to the minus two multiplied by margin, and the tile size is equal to the grid size,

54
00:04:25,560 --> 00:04:31,920
which is divided by the size margin is also a parameter specified in the game constructor.

55
00:04:32,250 --> 00:04:37,590
Now you need to now you need to define the draw grid method.

56
00:04:38,870 --> 00:04:43,340
To draw the here, here.

57
00:04:43,430 --> 00:04:48,950
So now we need to define the draw grid matter to draw a grid on the spots on the screen.

58
00:04:49,150 --> 00:04:55,070
Analyze the array of tags and convert the coordinates to the coordinates of the user interface.

59
00:04:55,400 --> 00:04:59,360
Then we draw each tag with the corresponding number in the center.

60
00:05:00,250 --> 00:05:02,200
So here we have done that thing.

61
00:05:02,230 --> 00:05:10,300
Now, finally, we define we redefine the paint component method, which is a derivative of the in class.

62
00:05:10,930 --> 00:05:15,100
This one, it is a derivative of the JP class.

63
00:05:15,100 --> 00:05:23,470
When we use the draw grid method and after that we use a draw start message method to display a message

64
00:05:23,470 --> 00:05:29,710
promoting us to click to start again, click to start new green.

65
00:05:30,550 --> 00:05:35,770
Or then we need, we need to respond to the user actions in the UI.

66
00:05:35,950 --> 00:05:38,680
So we have already seen that part.

67
00:05:39,590 --> 00:05:41,840
Through some of the user action in the UI.

68
00:05:41,840 --> 00:05:47,510
In order for the game to take its course, it is necessary to process user actions in UI.

69
00:05:47,750 --> 00:05:50,990
So to do this, we add the mouse listener here.

70
00:05:52,430 --> 00:05:57,200
This one, the mouse listener implementation on the G panel and the core.

71
00:05:58,190 --> 00:06:02,420
This one is the core for moving the already shown here.

72
00:06:03,440 --> 00:06:10,650
So we place the code in the constructor of the game 15 class and at the very end here.

73
00:06:12,650 --> 00:06:16,900
Here we call the new game method to start a new game.

74
00:06:17,660 --> 00:06:20,360
So here we will see

75
00:06:23,360 --> 00:06:23,990
this.

76
00:06:24,800 --> 00:06:26,210
This output of our game.

77
00:06:26,210 --> 00:06:29,060
So I have already solved half of the puzzle.

78
00:06:29,240 --> 00:06:31,390
Now we need to see that part.

79
00:06:31,400 --> 00:06:39,080
So here I will do EA three for c click to start new game on here.

80
00:06:39,710 --> 00:06:42,200
And this is my solid puzzle here.

81
00:06:42,770 --> 00:06:44,210
And I have done that part.

82
00:06:44,240 --> 00:06:45,950
Now what we have to do.

83
00:06:46,920 --> 00:06:48,540
Click the start menu now.

84
00:06:48,570 --> 00:06:54,930
Simply click on it and it will start a new game here and already shuffle.

85
00:06:55,290 --> 00:06:57,420
So this will be our project.
