1
00:00:00,390 --> 00:00:08,340
So we need a class of album, so we're creating a playlist player application, so we have to need a

2
00:00:08,340 --> 00:00:09,820
song and then we will.

3
00:00:09,870 --> 00:00:11,340
We need to have an album.

4
00:00:11,340 --> 00:00:16,460
So there will be a Java class and this will be called as album Java.

5
00:00:16,470 --> 00:00:18,540
So here is our album class.

6
00:00:18,540 --> 00:00:28,710
And what we have is the properties of album is the name of album and artist, which artist have created

7
00:00:28,710 --> 00:00:31,920
this album and ArrayList of songs.

8
00:00:33,090 --> 00:00:39,680
So ArrayList is basically an array, but with more functionality and more, you know, as dynamic area,

9
00:00:39,690 --> 00:00:44,430
we can see ArrayList as a dynamic area, we can add elements, remove elements.

10
00:00:44,430 --> 00:00:54,630
So here the first thing is our name, so private string name, and then we have string the name of the

11
00:00:54,630 --> 00:00:55,080
artist.

12
00:00:55,080 --> 00:01:01,260
So private string and artist and let's have user defined parameter constructor.

13
00:01:01,260 --> 00:01:04,200
So we have to initialize our ArrayList here.

14
00:01:04,440 --> 00:01:07,470
So new ArrayList of song.

15
00:01:08,580 --> 00:01:15,100
So here is our album and let's create an empty constructor also.

16
00:01:15,150 --> 00:01:21,000
But I'm not going to use it, but it is always a good practice to have an empty constructor.

17
00:01:21,000 --> 00:01:28,410
So here we are done with the properties of album and the next thing that we have is that we have need

18
00:01:28,410 --> 00:01:32,940
some functionality to add songs inside the album, right?

19
00:01:33,630 --> 00:01:46,230
So let's define that method so public and what we it will be our return type public, right?

20
00:01:46,230 --> 00:01:48,660
So we need some functionality.

21
00:01:48,660 --> 00:01:54,000
And so yeah, public and the return type is going to be the boolean because.

22
00:01:57,150 --> 00:02:05,460
We have two written songs successfully added and also public boolean.

23
00:02:05,460 --> 00:02:14,490
We call it Add Song, Add song and we have to pass in the name of song and the duration as well.

24
00:02:14,490 --> 00:02:21,060
So string title and double duration if we are going to add song to an album.

25
00:02:23,670 --> 00:02:29,250
We have to check that if that song already exists.

26
00:02:30,700 --> 00:02:32,490
In our list or not.

27
00:02:32,500 --> 00:02:39,230
So it is good to create a separate matter which checks for the song if exist or not.

28
00:02:39,250 --> 00:02:42,070
So here in this matter.

29
00:02:44,780 --> 00:02:55,130
If let's call the method do we find song so fine and we'll pass the name of the song's equal to null.

30
00:02:55,460 --> 00:02:59,530
That means the song that we are going to add in the list is NULL.

31
00:02:59,540 --> 00:03:08,510
That means that it doesn't already exist in our list of songs so that only we have to edit it if find

32
00:03:08,510 --> 00:03:11,300
song title is equal to null.

33
00:03:11,630 --> 00:03:14,870
So in that case we will add this new song.

34
00:03:14,900 --> 00:03:17,090
So as songs dot.

35
00:03:18,780 --> 00:03:19,490
All right.

36
00:03:20,060 --> 00:03:24,980
And here we have to pass that song.

37
00:03:25,010 --> 00:03:31,070
So let's create a new song because we don't have the song.

38
00:03:31,100 --> 00:03:33,260
So we have to create a new song.

39
00:03:33,500 --> 00:03:38,630
So let's pass in the title and the duration that we are getting from.

40
00:03:40,250 --> 00:03:40,970
Here.

41
00:03:41,930 --> 00:03:43,730
And after that, we will bring.

42
00:03:45,470 --> 00:03:49,820
This better means some successfully added.

43
00:03:49,820 --> 00:03:56,960
So we have added this to our list and will return true as well.

44
00:03:56,990 --> 00:04:05,420
And in the end part, we have to return false and print something we say with say song with name and

45
00:04:05,420 --> 00:04:06,400
then the title.

46
00:04:06,410 --> 00:04:12,620
So in the last part, the song already exists in the list that we are going to add.

47
00:04:12,830 --> 00:04:16,010
So let's create this find song.

48
00:04:18,260 --> 00:04:22,970
MATALIN Here we have this bumbling underwritten type is going to be the.

49
00:04:25,290 --> 00:04:28,680
So great to.

50
00:04:29,760 --> 00:04:31,350
What will we do?

51
00:04:31,380 --> 00:04:35,250
The return type is going to be the song because we are checking for the song.

52
00:04:35,550 --> 00:04:40,410
So I will be the song and let's call it the fine song.

53
00:04:40,710 --> 00:04:42,470
Of course, fine song.

54
00:04:42,480 --> 00:04:47,880
And here it takes string as title, string, title of the song.

55
00:04:48,360 --> 00:04:50,250
And then we have to check.

56
00:04:50,250 --> 00:04:54,500
Now we have to iterate through the loop, right?

57
00:04:54,510 --> 00:04:59,140
We have to iterate through the loop to check if the song exists or not.

58
00:04:59,160 --> 00:05:02,880
So for that, we are going to use enhanced for loop.

59
00:05:03,240 --> 00:05:14,070
So far we have to check for song and the variable we are going to use for the traversal is called Check

60
00:05:14,070 --> 00:05:16,380
the song or so we.

61
00:05:17,500 --> 00:05:20,110
Pipe the songs here inside the list.

62
00:05:20,110 --> 00:05:24,730
And the list is the core songs and if it already exists.

63
00:05:24,730 --> 00:05:31,900
So if chad song not get title if you remember we have.

64
00:05:32,920 --> 00:05:34,810
This getter, right?

65
00:05:34,810 --> 00:05:37,690
Get title and sign the song class.

66
00:05:38,440 --> 00:05:49,150
So if we checked some dot title equals, if this is equal to whatever passed inside this smarter title.

67
00:05:49,150 --> 00:05:53,380
So that means we have a song with this name in the song list.

68
00:05:54,260 --> 00:05:58,340
So in that case we will return whatever the song is.

69
00:05:58,340 --> 00:06:07,640
So we will return the song and else part will not as will simply return because the return type is not

70
00:06:07,640 --> 00:06:08,200
boolean.

71
00:06:08,210 --> 00:06:13,820
So if song already exist in our list, it will return that song or else it will be returned.

72
00:06:14,240 --> 00:06:14,750
NULL.

73
00:06:14,750 --> 00:06:17,840
So here we find song title is NULL.

74
00:06:18,080 --> 00:06:24,620
That means no such song exist in our list of songs.

75
00:06:24,650 --> 00:06:32,660
Then we will simply add that here we are done with add song method and.

76
00:06:37,450 --> 00:06:39,340
And yet find some other.

77
00:06:39,340 --> 00:06:48,540
And the next thing that we can do, we have we can need a functionality to add song to the playlist

78
00:06:48,550 --> 00:06:52,420
and this song must exist in our ArrayList already.

79
00:06:52,420 --> 00:06:56,020
So then only we can edit our playlist, right?

80
00:06:56,260 --> 00:06:59,530
So by the public boolean.

81
00:06:59,830 --> 00:07:03,970
And let's call this as add song to playlist.

82
00:07:03,970 --> 00:07:09,430
So we can only add those songs to the playlist that already exist in our album.

83
00:07:09,430 --> 00:07:16,540
And that makes sense because we cannot add the songs to the playlist, which doesn't even exist in our

84
00:07:16,540 --> 00:07:18,250
album, right?

85
00:07:18,250 --> 00:07:20,740
So the first thing is we need to check for the.

86
00:07:22,920 --> 00:07:23,880
Track number.

87
00:07:25,230 --> 00:07:28,920
So we will pass the track number here.

88
00:07:28,920 --> 00:07:32,100
And the second thing is going to be a link list.

89
00:07:32,700 --> 00:07:37,320
Link list as that means what playlist we are going to add the song.

90
00:07:37,320 --> 00:07:43,260
So link the list is basically a data structure which will, you know, have a reference of the next

91
00:07:43,260 --> 00:07:50,160
element and the previous element so that what makes sense while creating this playlist player app.

92
00:07:50,160 --> 00:07:51,540
We need to keep that.

93
00:07:51,540 --> 00:07:53,370
What's the next song is?

94
00:07:55,740 --> 00:08:01,730
And one of the previous songs we are going to use a linked list and this link list is going to be of

95
00:08:01,740 --> 00:08:05,040
type of song and let's call it playlist.

96
00:08:05,040 --> 00:08:06,780
This is going to be a playlist.

97
00:08:06,780 --> 00:08:15,870
And here the first thing that we need to track and we have to convert this track number to an index.

98
00:08:15,870 --> 00:08:18,240
So index have a zero indexing.

99
00:08:20,410 --> 00:08:29,030
The next our zero indexing system and but track number have one indexing system that it will start its

100
00:08:29,050 --> 00:08:32,320
numbering from 1 to 3 and so on.

101
00:08:32,320 --> 00:08:34,870
But index is start is numbering from zero.

102
00:08:34,870 --> 00:08:37,780
So zero one, two, three.

103
00:08:37,780 --> 00:08:43,960
So and index is equal to track number minus one.

104
00:08:45,400 --> 00:08:53,590
So here we have this index and we have to track that if a fast track number and everything is valid

105
00:08:55,900 --> 00:08:56,770
or not.

106
00:08:56,800 --> 00:09:02,650
So if index is greater than zero and no at the same time indexes less than.

107
00:09:03,580 --> 00:09:06,440
Equal to the list on the size of the song.

108
00:09:06,460 --> 00:09:11,260
So this song's got size.

109
00:09:11,260 --> 00:09:15,460
So index lies between zero and the size of the song.

110
00:09:15,460 --> 00:09:17,350
Then only we can add.

111
00:09:18,310 --> 00:09:19,940
That thing to our playlist.

112
00:09:19,960 --> 00:09:24,820
So in that case, playlist, which is a link list, not ad.

113
00:09:24,820 --> 00:09:29,190
And here we have to add whatever the song is in the list.

114
00:09:29,200 --> 00:09:36,610
So this dot songs now we have an access to a list and we will get the next.

115
00:09:38,530 --> 00:09:43,260
Which will have a return type of song.

116
00:09:43,270 --> 00:09:46,690
And here we have to pass in the index itself.

117
00:09:47,670 --> 00:09:56,910
Here and it says so we'll pass the index so it will red zone and which is already present in our ArrayList

118
00:09:57,120 --> 00:10:00,250
to our created display list.

119
00:10:00,270 --> 00:10:00,900
Right.

120
00:10:01,800 --> 00:10:05,550
So if we are done with this, will simply return true.

121
00:10:05,670 --> 00:10:07,220
Return true.

122
00:10:07,260 --> 00:10:13,570
And else we have to see that this album does not have a song with this track number.

123
00:10:13,590 --> 00:10:17,280
So after this outside if statement.

124
00:10:19,000 --> 00:10:26,230
We will print system, not our doctrine telling the Sultan does not have song with the track number

125
00:10:26,230 --> 00:10:33,340
and whatever track number it is, we will simply return false after this rate.

126
00:10:33,340 --> 00:10:34,780
So return false.

127
00:10:35,860 --> 00:10:47,530
Oh, here we have Muppets which are fine song this one and fine song, then the add song and then add

128
00:10:47,530 --> 00:10:54,520
to the playlist which have a track number and a linked list as playlist want.

129
00:10:54,520 --> 00:10:59,230
The next thing that we need is also have to create another method.

130
00:10:59,830 --> 00:11:05,020
Add to playlist that takes a title of the song as an input.

131
00:11:05,020 --> 00:11:12,670
And again, Links Link List, which is the playlist itself public and put it on type as a boolean as

132
00:11:12,670 --> 00:11:13,150
well.

133
00:11:13,420 --> 00:11:17,440
Then add to playlist that same name to playlist.

134
00:11:17,440 --> 00:11:27,280
And here the inputs are the basically we have to see methods but different parameters inside it.

135
00:11:27,280 --> 00:11:33,580
So user can either add songs with the track number and playlist and either we can title and the playlist.

136
00:11:33,640 --> 00:11:42,820
So we have a string title of the song and the next thing that we have is a linked list of a song as

137
00:11:42,820 --> 00:11:43,270
well.

138
00:11:43,270 --> 00:11:46,090
So song and let's again call it playlist.

139
00:11:47,800 --> 00:11:53,590
And here what we need to track is that of the song already exist in our album.

140
00:11:53,590 --> 00:12:04,150
That song already exist in in our album or not so we have to it so far let's use the enhanced for loop

141
00:12:04,150 --> 00:12:11,200
and let's call it a song song and track song inside the list.

142
00:12:11,200 --> 00:12:15,700
So this start songs and here if.

143
00:12:17,950 --> 00:12:20,340
This song already exists in our list.

144
00:12:20,350 --> 00:12:23,280
In that case, only we can add to our playlist, right?

145
00:12:23,290 --> 00:12:34,660
So if the song don't get title and this thing is equal to the end title, which is title, if this exist

146
00:12:34,660 --> 00:12:37,990
in our album, then only we can add it to our playlist.

147
00:12:38,200 --> 00:12:46,860
So playlist start and tag this song and we are going to add that song with just that song and run through

148
00:12:47,140 --> 00:12:50,950
because our operation is successful and outside this for.

149
00:12:53,530 --> 00:13:02,950
Outside this fall, you will have to prove that there is no strong title and it is there no such song.

150
00:13:03,250 --> 00:13:07,570
So an album will return false.

151
00:13:07,870 --> 00:13:15,100
So here, this is all about the album we have created and a constructor.

152
00:13:15,220 --> 00:13:20,650
And here this is all about the album and the constructor.

153
00:13:20,650 --> 00:13:29,420
And then we have find the song which will return the song that we have entered as a title under the

154
00:13:29,510 --> 00:13:31,480
knowledge there is no such song.

155
00:13:31,630 --> 00:13:38,350
And then we have this method called Add song, which will first check that the song already exists in

156
00:13:38,350 --> 00:13:39,910
our title novelist.

157
00:13:39,910 --> 00:13:44,410
And if it doesn't exist that we will simply not add that song.

158
00:13:44,410 --> 00:13:51,310
We cannot add that song because it already exists, and else if it doesn't exist, then simply add that

159
00:13:51,310 --> 00:13:52,750
song to our album.

160
00:13:52,750 --> 00:13:59,980
And then we have this add to playlist method to add the song, which is already present in the album

161
00:14:00,010 --> 00:14:07,990
to the playlist, because then only we can create a playlist if that song already exist in the album.

162
00:14:07,990 --> 00:14:12,070
And here we have two similar method, right?

163
00:14:12,280 --> 00:14:18,640
We have two similar matter, same name here, one which has a parameter of track number and then the

164
00:14:18,640 --> 00:14:22,000
playlist and where we have to add, which is a linked list.

165
00:14:22,000 --> 00:14:31,510
And the second method is which the string is parameter and the list a linked list where we have to add

166
00:14:31,510 --> 00:14:31,780
it.

167
00:14:32,770 --> 00:14:34,960
And this thing is again called playlist.

168
00:14:34,990 --> 00:14:40,270
Now if the song already exist in the album, then add it to the playlist.

169
00:14:40,270 --> 00:14:41,590
I'll simply print.

170
00:14:41,590 --> 00:14:44,710
No, here, no print.

171
00:14:44,710 --> 00:14:45,070
No.

172
00:14:45,070 --> 00:14:52,270
And here in this matter, we have to check for the track number that and the track number is valid or

173
00:14:52,270 --> 00:14:52,840
not.

174
00:14:52,840 --> 00:14:56,320
So now we are done with the album class.

175
00:14:56,320 --> 00:14:58,360
So what next we can do?

176
00:14:58,570 --> 00:15:02,580
We will create our another class and will name other object.
