WEBVTT
1
00:00:01.940 --> 00:00:07.370
So in previous things, I created one JPA with model.

2
00:00:07.760 --> 00:00:10.550
So I will tell you in short how we are going to perform.

3
00:00:10.550 --> 00:00:13.220
But in the advantages of hibernate.

4
00:00:13.250 --> 00:00:14.450
Let me explain.

5
00:00:14.690 --> 00:00:16.710
First, this is the open source and lightweight.

6
00:00:16.730 --> 00:00:19.670
Anyone can perform different actions over hibernate.

7
00:00:19.670 --> 00:00:26.330
So a wide range of hibernate classes and everything is already created with the different databases

8
00:00:26.330 --> 00:00:30.950
because each database provides different kind of utilities.

9
00:00:30.950 --> 00:00:35.420
So for that purpose, for each database, different hibernate are already created.

10
00:00:35.930 --> 00:00:42.320
Then fast performance, its performance is fast because its first level catch is enabled by default.

11
00:00:42.320 --> 00:00:49.810
So if you know the catching level catch is basically storing the local some data inside the variables.

12
00:00:49.820 --> 00:00:57.370
So it's not always fetching from that proper database, it's sometimes switching from the cache files.

13
00:00:57.380 --> 00:01:03.860
Only then data is independent query because SQL Hibernate Query Language which is object oriented version

14
00:01:03.860 --> 00:01:09.740
of fiscal which I already created that hibernate and each part, it's a language basically.

15
00:01:09.740 --> 00:01:12.860
It's not a skill, it's a hibernate query language.

16
00:01:12.860 --> 00:01:16.520
So it's some kind of object oriented language.

17
00:01:16.520 --> 00:01:20.930
So I created one object and I can use it later part also.

18
00:01:20.930 --> 00:01:23.660
So that's about how we are going to perform here.

19
00:01:23.900 --> 00:01:30.860
So let us see in ID what the things we are going to create and everything.

20
00:01:30.860 --> 00:01:38.900
So if you closely look, I created one or two things, two classes, one is employee service interface

21
00:01:38.900 --> 00:01:45.200
as putting that in the least part and putting and creating some you can catch in here.

22
00:01:45.200 --> 00:01:46.400
I'm creating here a cashier.

23
00:01:46.910 --> 00:01:53.420
Then in the employee I created one JPA to perform the database actions and everything.

24
00:01:53.420 --> 00:01:57.020
Now in the service part only I'm going to create one class.

25
00:01:57.020 --> 00:02:02.180
So if you know the how we can create class, then it's very easy.

26
00:02:05.130 --> 00:02:05.850
And.

27
00:02:08.000 --> 00:02:13.130
Let me mention that class name is employee service imp because it's important.

28
00:02:13.130 --> 00:02:14.420
So I mention this.

29
00:02:14.420 --> 00:02:15.170
Employee service.

30
00:02:15.740 --> 00:02:17.300
This then.

31
00:02:20.880 --> 00:02:23.070
In this implements.

32
00:02:24.380 --> 00:02:25.310
Employee service.

33
00:02:25.310 --> 00:02:28.190
So let me use this implementation part.

34
00:02:28.910 --> 00:02:31.040
So it's going to use that part.

35
00:02:31.700 --> 00:02:35.390
Now, let us check how how it's going to work and everything.

36
00:02:35.390 --> 00:02:35.870
So.

37
00:02:37.580 --> 00:02:42.110
Let me mention some annotations and everything here.

38
00:02:42.950 --> 00:02:43.610
So.

39
00:02:45.800 --> 00:02:50.390
Import java dot util dot store.

40
00:02:51.020 --> 00:02:51.890
It's very important.

41
00:02:51.890 --> 00:02:56.180
Then import RG Dot's ring framework.

42
00:02:56.900 --> 00:03:05.030
Then I needed different things here, but OC beans.

43
00:03:05.030 --> 00:03:06.080
I needed beans.

44
00:03:06.080 --> 00:03:07.370
Basically beans.

45
00:03:09.290 --> 00:03:14.180
And actually inside this factory

46
00:03:16.580 --> 00:03:17.900
annotations.

47
00:03:19.540 --> 00:03:20.300
Not start.

48
00:03:20.680 --> 00:03:20.940
Okay.

49
00:03:21.340 --> 00:03:22.930
So this is very important.

50
00:03:22.930 --> 00:03:23.440
So.

51
00:03:24.870 --> 00:03:29.550
As soon as we are developing, it will automatically employees and some libraries default.

52
00:03:29.640 --> 00:03:33.450
So I'm not going to work here then.

53
00:03:35.270 --> 00:03:38.030
Later we mention this as a service.

54
00:03:42.360 --> 00:03:46.200
So it will automatically deploy this service.

55
00:03:46.200 --> 00:03:47.430
So it is the service.

56
00:03:47.430 --> 00:03:50.430
Service is basically for the deploying and UI part.

57
00:03:50.550 --> 00:03:56.250
Then overhead I need to mention otherwise is basically for generating that part or to wildly.

58
00:03:57.150 --> 00:03:58.860
And the wired part.

59
00:03:58.920 --> 00:04:00.780
I need to create one repository.

60
00:04:01.960 --> 00:04:03.630
Private employee depository.

61
00:04:03.650 --> 00:04:06.830
I can, but before that.

62
00:04:07.570 --> 00:04:09.100
Employee depository.

63
00:04:09.760 --> 00:04:13.300
Let us create one thing repository class here.

64
00:04:13.300 --> 00:04:21.100
So keep it as this and let us create one more package inside this mansion as the repository.

65
00:04:21.910 --> 00:04:24.160
Because we haven't created any repository.

66
00:04:24.170 --> 00:04:26.290
So let me create one package.

67
00:04:28.360 --> 00:04:29.410
Repository.

68
00:04:29.950 --> 00:04:36.940
And inside this repository, I'm going to create one another class in repository.

69
00:04:36.940 --> 00:04:41.470
So it will help me to create one employee repository here.

70
00:04:42.010 --> 00:04:48.280
So it just basically JPA, which is going to provide me some extending part.

71
00:04:49.290 --> 00:04:55.640
So while developing this, you can closely look, this is very easy part in creating a repository.

72
00:04:56.010 --> 00:04:57.690
So let me minimize this.

73
00:04:57.690 --> 00:04:59.580
And okay, so that's it.

74
00:04:59.580 --> 00:05:03.180
And in this, what I'm going to mention is.

75
00:05:06.470 --> 00:05:11.690
And it depository, so it will definitely use this.

76
00:05:12.050 --> 00:05:16.820
Then I need to extend it to some more part of your repository.

77
00:05:17.270 --> 00:05:17.960
So.

78
00:05:18.860 --> 00:05:21.620
Exchange GPA.

79
00:05:28.190 --> 00:05:29.270
GPIO repository.

80
00:05:29.270 --> 00:05:35.300
As you can see, this is my repository and to three things I need to mention here is basically.

81
00:05:37.670 --> 00:05:39.770
Its name.

82
00:05:41.770 --> 00:05:43.810
Let me mention the name as employee.

83
00:05:45.220 --> 00:05:46.630
This is enough employee.

84
00:05:48.100 --> 00:05:48.790
Long.

85
00:05:50.800 --> 00:05:51.610
And.

86
00:05:55.050 --> 00:05:55.940
I did.

87
00:06:05.120 --> 00:06:09.140
So anything is demeaning here.

88
00:06:09.180 --> 00:06:09.730
Okay.

89
00:06:12.970 --> 00:06:13.960
Journalism puts.

90
00:06:17.110 --> 00:06:19.200
Let me import one thing here.

91
00:06:30.600 --> 00:06:31.550
Despite so.

92
00:06:34.300 --> 00:06:36.210
Now the key is.

93
00:06:41.710 --> 00:06:41.960
Okay.

94
00:06:42.000 --> 00:06:42.380
Okay.

95
00:06:42.430 --> 00:06:44.980
So I need to implement my thoughts on these things.

96
00:06:45.610 --> 00:06:48.430
So that's it in the repository.

97
00:06:48.430 --> 00:06:55.420
So I will create that method scene controller part, which is basically the controlling part in later.

98
00:06:55.420 --> 00:07:04.690
So let me mention one controller here also because I haven't created one controlling part which is going

99
00:07:04.690 --> 00:07:08.410
to handle the mapping part and everything later.

100
00:07:08.740 --> 00:07:11.650
So I will create that part in later, but.

101
00:07:12.640 --> 00:07:16.690
Or let us assume we need to implement things here.

102
00:07:18.430 --> 00:07:23.530
In the model employed on Java Open.

103
00:07:25.230 --> 00:07:25.690
Okay.

104
00:07:25.880 --> 00:07:26.320
Okay.

105
00:07:31.970 --> 00:07:34.160
So I'm implementing this and.

106
00:07:35.590 --> 00:07:37.100
I'm actually seeing everything here.

107
00:07:44.620 --> 00:07:46.370
And you said you'd be a repository.

108
00:07:46.380 --> 00:07:47.130
Yes.

109
00:07:47.370 --> 00:07:49.950
So let us check in this part.

110
00:07:51.590 --> 00:07:53.630
Which is basically employ service.

111
00:07:55.330 --> 00:07:56.850
And let me create one or two.

112
00:08:03.220 --> 00:08:03.600
And.

113
00:08:07.420 --> 00:08:09.250
So it will import the class.

114
00:08:22.270 --> 00:08:24.490
So it will automatically implement this.

115
00:08:24.490 --> 00:08:32.680
But I don't want to implement every part here in services, so I'm going to create my own methods here.

116
00:08:34.190 --> 00:08:35.090
Basically.

117
00:08:36.650 --> 00:08:37.880
For that purpose.

118
00:08:39.150 --> 00:08:43.770
Or let me use that team.

119
00:08:48.560 --> 00:08:49.100
Okay.

120
00:08:49.760 --> 00:08:54.020
So what I'm going to do is I'm accessing my own methods here.

121
00:08:55.530 --> 00:08:58.500
So the worldwide import class.

122
00:08:59.760 --> 00:09:02.400
Then sought method is nutrient input.

123
00:09:05.560 --> 00:09:08.410
And then being able to import.

124
00:09:24.570 --> 00:09:25.260
Then.

125
00:09:30.050 --> 00:09:32.990
Don't forget to do three things here.

126
00:09:33.960 --> 00:09:37.980
Which is basically the repository or.

127
00:09:44.070 --> 00:09:44.520
Okay.

128
00:09:44.700 --> 00:09:46.620
Because I mentioned as a class.

129
00:09:46.620 --> 00:09:48.510
So it's accessing as a class.

130
00:09:48.510 --> 00:09:50.460
So you need to create interface here.

131
00:09:50.580 --> 00:09:55.620
So that's a problem I created so mentioned as the interface to.

132
00:09:56.610 --> 00:09:58.830
Remove these things then.

133
00:10:01.850 --> 00:10:02.420
Okay?

134
00:10:03.110 --> 00:10:03.560
No.

135
00:10:05.770 --> 00:10:06.460
Then.

136
00:10:07.750 --> 00:10:13.480
You need to debug it again and again because sometimes it gives the error.

137
00:10:18.180 --> 00:10:19.400
Then what is the error?

138
00:10:19.410 --> 00:10:20.820
You can check here basically.

139
00:10:22.330 --> 00:10:22.780
Okay.

140
00:10:25.920 --> 00:10:26.130
No.

141
00:10:28.950 --> 00:10:30.770
Why employs me.

142
00:10:36.280 --> 00:10:36.520
Okay.

143
00:10:36.520 --> 00:10:37.630
I need to import the class.

144
00:10:37.960 --> 00:10:41.590
Just I need to import the class, and I need to mention this also.

145
00:10:41.740 --> 00:10:42.040
Okay.

146
00:10:45.780 --> 00:10:51.090
So as soon as I've done this, so it'll get removed.

147
00:10:53.090 --> 00:10:53.720
And.

148
00:10:54.660 --> 00:10:55.860
Glass is not working.

149
00:10:56.070 --> 00:10:58.080
So let me mention what I created.

150
00:10:58.080 --> 00:10:58.500
Just.

151
00:10:58.500 --> 00:10:59.730
I just debug it.

152
00:11:01.460 --> 00:11:08.600
One of the things I mentioned is already it's so related to spring, so otherwise it is just I created

153
00:11:08.600 --> 00:11:12.530
an employee repository as an interface to create a JPA repository.

154
00:11:12.530 --> 00:11:16.790
As you can see, JPA repository to store the cache files.

155
00:11:16.790 --> 00:11:22.010
As you can see inside this employee, what I'm going to do, I'm going to create a 1 to 3 methods.

156
00:11:22.010 --> 00:11:26.450
So first is or divide to create and implement the private repository.

157
00:11:26.630 --> 00:11:33.020
Then in this it's overriding this list employee and it's getting it from the employee service that list

158
00:11:33.020 --> 00:11:33.530
part.

159
00:11:34.490 --> 00:11:38.150
I mentioned the gate, cell gate, employee delete and finger.

160
00:11:38.150 --> 00:11:42.240
So I'm now creating different methods here.

161
00:11:42.260 --> 00:11:43.550
First is overriding.

162
00:11:43.570 --> 00:11:50.780
I'm overriding it to find all methods to get all employees, save all employees, to save all these

163
00:11:50.780 --> 00:11:55.010
employees in this employee as my object.

164
00:11:55.730 --> 00:12:03.230
Then in the override part, I created employee with overriding methods and.

165
00:12:04.640 --> 00:12:12.740
It's a very simple thing I created in the gate employee by ID which this employee has method with different

166
00:12:12.740 --> 00:12:13.310
things.

167
00:12:15.060 --> 00:12:24.240
And now in the overriding find these things I'm accessing the sword method here and so is very easy

168
00:12:24.240 --> 00:12:28.740
in spring you can actually see the sword method in the spring framework.

169
00:12:28.740 --> 00:12:32.640
It's already implemented there and you can use this part as a page.

170
00:12:32.640 --> 00:12:33.150
Yes.

171
00:12:33.420 --> 00:12:39.060
So now we are set with this, but we haven't created any mapping part.

172
00:12:39.300 --> 00:12:40.290
So.

173
00:12:41.340 --> 00:12:46.200
So for the mapping purposes, you need to create two or three things.

174
00:12:46.230 --> 00:12:47.100
First is mapping.

175
00:12:47.310 --> 00:12:52.410
Mapping is just basic for mapping over this back end to the front end.

176
00:12:52.410 --> 00:12:54.780
So I need to create a one controller part.

177
00:12:54.870 --> 00:12:58.020
So in the later part, I'm going to create one controller.

178
00:12:59.220 --> 00:13:00.390
So it's very easy.

179
00:13:00.390 --> 00:13:05.400
Just go to package and you need to mention controller still.

180
00:13:06.110 --> 00:13:08.180
So I am going to create one package here.

181
00:13:08.180 --> 00:13:11.450
I created one package here and I'm going to use that.

182
00:13:11.450 --> 00:13:17.530
And in the resources tab I'm going to mention the templates basically index, HTML and everything in

183
00:13:17.540 --> 00:13:19.220
later part to create a frontend.

184
00:13:19.460 --> 00:13:21.290
So hope you understand.

185
00:13:21.740 --> 00:13:22.430
Thank you.
