WEBVTT
1
00:00:01.980 --> 00:00:10.440
In previous sessions I told you the basic concepts of Java and we created three basic structures or

2
00:00:10.590 --> 00:00:12.480
three basic classes inside Java.

3
00:00:12.720 --> 00:00:16.500
First is server, second is client, and third is chat message.

4
00:00:16.950 --> 00:00:18.500
So hope you understand this part.

5
00:00:18.510 --> 00:00:22.530
You can create one package also and you can use that also here.

6
00:00:22.530 --> 00:00:25.110
But I'm going with directly like this.

7
00:00:25.410 --> 00:00:29.100
So let us see what we are going to do here now.

8
00:00:29.700 --> 00:00:39.750
So first, what I'm going to mention is here some unique IDs and private variables to establish the

9
00:00:39.750 --> 00:00:40.380
connection.

10
00:00:41.060 --> 00:00:48.500
So first is basically unique ID for each connection like I'm considering here two three clients at a

11
00:00:48.500 --> 00:00:52.460
time or for the connection client means user again.

12
00:00:53.420 --> 00:00:57.550
So for each connection we need to create unique ID for that purpose.

13
00:00:57.560 --> 00:01:00.380
What I'm going to do is I'm going to mention a private.

14
00:01:02.350 --> 00:01:02.890
Static.

15
00:01:02.890 --> 00:01:04.720
I'm using your static keyword.

16
00:01:05.550 --> 00:01:06.780
Standing in.

17
00:01:10.820 --> 00:01:11.960
Unique ID.

18
00:01:16.080 --> 00:01:23.160
So this green color, as you can see, is here because we haven't created this part.

19
00:01:24.320 --> 00:01:25.100
And.

20
00:01:27.060 --> 00:01:27.430
Okay.

21
00:01:28.500 --> 00:01:31.200
We haven't used that part then.

22
00:01:32.840 --> 00:01:35.360
I'm considering you as a realist.

23
00:01:35.630 --> 00:01:36.860
So what is the ArrayList?

24
00:01:36.980 --> 00:01:39.660
Basically, it's composed of a plus list.

25
00:01:39.680 --> 00:01:43.760
You can consider, like, that single database inside the list to keep.

26
00:01:45.750 --> 00:01:48.510
Least of all clients.

27
00:01:51.050 --> 00:01:54.110
So what I'm going to create is here again, private.

28
00:01:55.540 --> 00:01:56.470
At least.

29
00:01:59.640 --> 00:02:02.060
So it will invoke this part.

30
00:02:02.070 --> 00:02:06.930
Let me do one thing, which is basically default library released.

31
00:02:08.820 --> 00:02:10.920
Which is basically I'm going to create easier.

32
00:02:11.890 --> 00:02:12.550
Lion.

33
00:02:15.000 --> 00:02:15.530
Third.

34
00:02:16.380 --> 00:02:23.280
I haven't mentioned the client trade and etc., but here in later part I will explain what is the client?

35
00:02:23.310 --> 00:02:25.230
Read each and everything here.

36
00:02:26.460 --> 00:02:28.350
Now to display time.

37
00:02:29.580 --> 00:02:34.290
When that is mentioned, what I'm going to do is we're.

38
00:02:35.590 --> 00:02:36.310
Private.

39
00:02:36.670 --> 00:02:38.080
There is one default.

40
00:02:38.260 --> 00:02:41.410
Simple date format, which is basically debt.

41
00:02:42.400 --> 00:02:45.880
Is DFI mentioning here for simple data format.

42
00:02:47.750 --> 00:02:48.590
Then.

43
00:02:49.730 --> 00:02:51.230
World connection.

44
00:02:52.540 --> 00:02:54.460
It's also your private.

45
00:02:55.500 --> 00:02:55.890
In.

46
00:02:56.910 --> 00:02:57.480
All.

47
00:02:59.300 --> 00:03:01.280
Jake Sullivan resigning or not?

48
00:03:02.330 --> 00:03:05.150
I'm going to create this Boolean Boolean variable.

49
00:03:09.320 --> 00:03:09.590
Again.

50
00:03:09.590 --> 00:03:10.840
It should be private.

51
00:03:10.850 --> 00:03:13.670
Always private boolean.

52
00:03:15.660 --> 00:03:17.910
Keep mentioning these.

53
00:03:18.450 --> 00:03:19.590
Keep going.

54
00:03:21.450 --> 00:03:28.020
As William part and notification is basically nothing but you can say the.

55
00:03:33.350 --> 00:03:33.670
What?

56
00:03:37.720 --> 00:03:42.400
If you have seen some what we can say notification type.

57
00:03:43.610 --> 00:03:45.530
We can bring this.

58
00:03:47.080 --> 00:03:50.980
Considering Star stars three star before any notification.

59
00:03:52.820 --> 00:03:55.430
So this is all about how we can do so.

60
00:03:55.430 --> 00:03:55.980
This.

61
00:03:56.050 --> 00:03:59.180
I'm up the server basically.

62
00:03:59.450 --> 00:04:01.670
So I mentioned all things here.

63
00:04:01.850 --> 00:04:04.730
I will tell you what is client said in later part.

64
00:04:04.970 --> 00:04:06.290
But remember this.

65
00:04:07.230 --> 00:04:10.110
Now let us create one constructor here.

66
00:04:12.720 --> 00:04:14.030
Constructor.

67
00:04:20.290 --> 00:04:21.730
Instructor to.

68
00:04:24.010 --> 00:04:25.480
You sue the.

69
00:04:26.680 --> 00:04:27.250
For.

70
00:04:37.560 --> 00:04:42.000
Listen, I will tell you what is the listening and each and every part to for.

71
00:04:43.240 --> 00:04:44.500
Connection parameter.

72
00:04:45.930 --> 00:04:47.970
So I will mention it will be the.

73
00:04:49.370 --> 00:04:49.680
Okay.

74
00:04:49.760 --> 00:04:51.830
Let us consider this only.

75
00:04:52.850 --> 00:04:56.690
So the board basically forced this dot.

76
00:04:58.870 --> 00:04:59.400
Okay.

77
00:04:59.490 --> 00:05:00.600
Let me mention for.

78
00:05:02.010 --> 00:05:05.340
Public Server Default constructor.

79
00:05:05.340 --> 00:05:07.380
I'm considering your import.

80
00:05:09.010 --> 00:05:09.700
Then.

81
00:05:11.020 --> 00:05:16.750
The board is basically this dot board is equal to board.

82
00:05:18.560 --> 00:05:19.370
Then.

83
00:05:21.650 --> 00:05:22.850
Display.

84
00:05:27.600 --> 00:05:28.320
Date.

85
00:05:29.190 --> 00:05:32.430
Or the displaying date that what I'm going to create here is d f.

86
00:05:34.130 --> 00:05:35.510
Is equal to new.

87
00:05:36.780 --> 00:05:40.200
Simple format you have to mention and introduce.

88
00:05:40.210 --> 00:05:43.680
You have to mention a church or whatever we need.

89
00:05:43.680 --> 00:05:44.310
We need.

90
00:05:44.920 --> 00:05:46.000
Then circumstance.

91
00:05:46.000 --> 00:05:46.360
What am I?

92
00:05:47.400 --> 00:05:48.240
As I mentioned you.

93
00:05:48.720 --> 00:05:50.280
So this is basically the pattern.

94
00:05:51.860 --> 00:05:56.970
We need to create a list also here because I'm mentioning it.

95
00:05:58.550 --> 00:05:59.990
At least for.

96
00:06:01.160 --> 00:06:02.030
Clients.

97
00:06:03.800 --> 00:06:06.320
L is equal to new.

98
00:06:07.600 --> 00:06:09.490
And copy this part because.

99
00:06:11.380 --> 00:06:12.220
This is very.

100
00:06:13.600 --> 00:06:14.560
Similar.

101
00:06:20.800 --> 00:06:22.320
And I'm going to use this only.

102
00:06:22.530 --> 00:06:27.120
So I will tell you what is we are going to create a year and each and everything.

103
00:06:27.300 --> 00:06:30.930
So this is all about our basic setup of server.

104
00:06:31.140 --> 00:06:36.270
So in later years I will explain everything from the socket and each and everything.

105
00:06:36.510 --> 00:06:38.220
So remember what I did is here.

106
00:06:38.220 --> 00:06:44.340
I created some variables or you can say define things here.

107
00:06:44.370 --> 00:06:47.480
First is unique ID to create each and every time.

108
00:06:47.820 --> 00:06:49.530
Unique ID for each connection.

109
00:06:50.700 --> 00:06:51.660
You need ID?

110
00:06:51.810 --> 00:06:55.630
Then I created a list which consists of client traits.

111
00:06:55.650 --> 00:06:58.590
I will tell you how we can create client within each and everything.

112
00:06:58.770 --> 00:07:04.680
It is basically name as l simple date and format to mention the date and date format here.

113
00:07:05.400 --> 00:07:08.610
Then private int basically for the port connection.

114
00:07:09.060 --> 00:07:13.200
Then server running to check server is running or not.

115
00:07:13.200 --> 00:07:20.340
I'm going to create a boolean for keep going and again string to create a notification before any message

116
00:07:20.340 --> 00:07:21.480
or before anything.

117
00:07:21.480 --> 00:07:23.700
I'm creating a notification part.

118
00:07:23.820 --> 00:07:25.800
So these all things are in the.

119
00:07:27.190 --> 00:07:31.000
What we can say Java only in private.

120
00:07:31.000 --> 00:07:36.250
Only private because for the what we can see abstraction, purpose, no one can change this part.

121
00:07:36.550 --> 00:07:43.600
Then in public, I'm considering your constructor to receive port to listen basically which is public

122
00:07:43.600 --> 00:07:45.820
server import and export.

123
00:07:45.820 --> 00:07:49.750
I'm assigning directly then display date and ArrayList for the clients.

124
00:07:49.750 --> 00:07:52.740
So this is all about how we can create each and everything part.

125
00:07:52.870 --> 00:07:58.600
So in the further part, I will tell you what is the basic socket and each and everything.

126
00:07:58.930 --> 00:08:01.810
So now we are set up with our basic things.

127
00:08:03.180 --> 00:08:06.290
So let us consider what is things we are going to use here.

128
00:08:06.300 --> 00:08:09.450
So we are considering here as a socket.

129
00:08:09.840 --> 00:08:10.610
What is a socket?

130
00:08:10.620 --> 00:08:13.200
You know, the electric socket.

131
00:08:13.590 --> 00:08:16.000
Each and every plug has a socket.

132
00:08:16.020 --> 00:08:17.970
You need to put inside that socket.

133
00:08:18.060 --> 00:08:19.350
Basically electric socket.

134
00:08:19.350 --> 00:08:21.120
Or we can say electric supply socket.

135
00:08:21.600 --> 00:08:27.090
Similarly, socket is a one in point of two way communication link between two programmes running on

136
00:08:27.090 --> 00:08:27.780
the network.

137
00:08:27.990 --> 00:08:35.250
So server and client server has some socket inside that part.

138
00:08:36.000 --> 00:08:38.000
Using a port and server address.

139
00:08:38.010 --> 00:08:39.820
I'm going to create your socket.

140
00:08:39.840 --> 00:08:41.400
What clients will do?

141
00:08:41.430 --> 00:08:47.070
Clients will plug their code on that socket and it will be throughout the network.

142
00:08:47.580 --> 00:08:55.260
So using such mechanism, I'm going to create a communication link between many clients or clients and

143
00:08:55.260 --> 00:08:55.860
server.

144
00:08:56.220 --> 00:09:04.020
The socket mechanism provides internal process communication IPC by establishing name as a contact point

145
00:09:04.020 --> 00:09:05.160
between two communication.

146
00:09:05.520 --> 00:09:08.610
We again mentioned the name for that contact communication also.

147
00:09:09.030 --> 00:09:10.710
So this is the basic thing of socket.

148
00:09:10.710 --> 00:09:12.810
So we can create a socket inside server.

149
00:09:12.810 --> 00:09:15.100
We are going to create socket inside server only.

150
00:09:15.120 --> 00:09:20.340
No need to create a socket inside client because we are providing a client interface or we can say we

151
00:09:20.340 --> 00:09:26.580
are providing a user interface for clients only not we are going to create server part here.

152
00:09:27.240 --> 00:09:30.930
So for that purpose we are going to create socket inside only server.

153
00:09:32.050 --> 00:09:32.350
Here.

154
00:09:32.350 --> 00:09:34.570
I am considering TCP protocol.

155
00:09:34.600 --> 00:09:35.870
What is TCP protocol in?

156
00:09:35.880 --> 00:09:38.390
Networking is a transmission control protocol.

157
00:09:38.410 --> 00:09:46.150
Protocol is basically that user top of IP IP address to ensure the transmission of packets.

158
00:09:46.660 --> 00:09:51.610
So all the data, all we are going to use here is converted into bytecode.

159
00:09:51.610 --> 00:09:54.790
It converts into packets it will display to the another plant.

160
00:09:54.910 --> 00:10:01.560
So likewise that it will create and TCP includes some mechanisms like if lost or packet out of order

161
00:10:01.600 --> 00:10:03.010
packet corrupted packets.

162
00:10:03.220 --> 00:10:06.520
It tells you that part and also Java uses that part.

163
00:10:06.790 --> 00:10:13.180
So what is the listening is basically TCP listening is basically server is waiting for the clients to

164
00:10:13.180 --> 00:10:13.510
connect.

165
00:10:13.510 --> 00:10:15.040
That part is a listening.

166
00:10:15.040 --> 00:10:17.950
So for that purpose I created a boolean variable.

167
00:10:17.980 --> 00:10:18.700
Keep going.

168
00:10:18.850 --> 00:10:21.340
That is, my server is running.

169
00:10:21.340 --> 00:10:23.680
Now you can use that part.

170
00:10:25.030 --> 00:10:27.730
You can say you can connect any client to that server.

171
00:10:27.820 --> 00:10:31.420
So this is basic for the server.

172
00:10:31.510 --> 00:10:37.080
Or we can say it is simple thing, like I created a socket inside server.

173
00:10:37.090 --> 00:10:46.960
Now the socket I create socket which conceals many ports and any mini clients you use that part or you

174
00:10:46.960 --> 00:10:48.100
can use that socket.

175
00:10:48.100 --> 00:10:52.050
And now my server is like on the network, any client can connect that part.

176
00:10:52.450 --> 00:10:54.790
So this is all about all the things.

177
00:10:55.090 --> 00:10:57.340
So what is the server and clients basically?

178
00:10:57.370 --> 00:11:04.290
Server is basically you can system which consists all the server side code clients had some client side

179
00:11:04.300 --> 00:11:05.820
quotes throughout the internet.

180
00:11:05.830 --> 00:11:13.360
We can connect that server to I can see tell you that this is the socket for creating or connecting

181
00:11:13.360 --> 00:11:14.830
the client to the server.

182
00:11:15.910 --> 00:11:19.810
So what is the team is behind this whole system is going to work.

183
00:11:19.900 --> 00:11:25.220
If my client one is running on this, it will go through the Internet.

184
00:11:25.240 --> 00:11:26.800
It will go to the server.

185
00:11:26.980 --> 00:11:34.180
Server will use that and check that which clients he wants to or she wants to that send that.

186
00:11:34.210 --> 00:11:36.230
It will check if it's for all.

187
00:11:36.250 --> 00:11:37.900
It will go to the all.

188
00:11:38.500 --> 00:11:42.130
If not, it will go to the that particular client.

189
00:11:42.550 --> 00:11:48.430
And then that second client is also connected using the same socket, but different same socket.

190
00:11:48.430 --> 00:11:53.830
Or we can say same for each and everything, but the part or connection is different, like connecting

191
00:11:53.830 --> 00:11:57.070
to three wires inside, same socket, you can say as electrical part.

192
00:11:57.460 --> 00:11:59.110
Similarly, I'm going to do this.

193
00:11:59.740 --> 00:12:02.460
So these are all about the server client I'm going to consider.

194
00:12:02.470 --> 00:12:07.990
I'm not considering this mobile device, but I added here, but I'm not creating any mobile device interface

195
00:12:07.990 --> 00:12:08.500
or anything.

196
00:12:09.560 --> 00:12:15.320
So TCP server client process, I'm going to explain, but what is this client process and server process?

197
00:12:15.320 --> 00:12:24.860
Because as a multi trading part, as I told you, we can run many processes in Java or we can run mini

198
00:12:24.860 --> 00:12:26.270
programs inside of Java.

199
00:12:26.780 --> 00:12:30.800
So TCP is a server process and client process divided.

200
00:12:31.430 --> 00:12:35.420
So client process considering socket layer, protocol layer, device layer.

201
00:12:35.420 --> 00:12:42.620
So you can say I can use such parts and I can connect client to the server and I can connect many clients

202
00:12:42.620 --> 00:12:45.140
to that server for the connection of many client.

203
00:12:45.140 --> 00:12:50.720
I'm going to use your multithreading part, so let us see how we can create such things inside Java.

204
00:12:50.780 --> 00:12:57.140
So for as I told you, inside server program, I already created this.

205
00:12:57.230 --> 00:13:03.890
Now I need to mention a public void start so I will explain what is the basic thing is here is.

206
00:13:05.700 --> 00:13:06.630
Start.

207
00:13:08.690 --> 00:13:09.830
So what is public void?

208
00:13:09.860 --> 00:13:13.010
START is basically starting my process.

209
00:13:13.370 --> 00:13:18.080
Now I am mentioning keep going is equal to two because it should be.

210
00:13:19.370 --> 00:13:21.890
So what is life?

211
00:13:22.090 --> 00:13:23.530
Life means basically a life.

212
00:13:23.780 --> 00:13:24.590
It's running.

213
00:13:25.800 --> 00:13:26.490
No.

214
00:13:27.370 --> 00:13:29.140
I am going to create a socket.

215
00:13:30.900 --> 00:13:32.010
So good server.

216
00:13:34.190 --> 00:13:37.130
And with for connection.

217
00:13:39.390 --> 00:13:40.140
Request.

218
00:13:40.620 --> 00:13:43.380
I'm going to wait for connection request.

219
00:13:43.410 --> 00:13:46.530
Now, always remember, create a track block here first.

220
00:13:48.150 --> 00:13:50.850
But before the trial explaining the catch.

221
00:13:50.850 --> 00:13:54.270
I will create a logic inside only first.

222
00:13:55.520 --> 00:13:58.810
Socket used by server because I'm.

223
00:14:00.630 --> 00:14:05.850
Mentioning here which socket my server is going to use the areas.

224
00:14:06.650 --> 00:14:07.580
So what?

225
00:14:09.530 --> 00:14:10.460
Sock it.

226
00:14:11.920 --> 00:14:12.700
So remember this.

227
00:14:12.700 --> 00:14:15.610
I'm going to mention this again.

228
00:14:16.920 --> 00:14:18.420
What is server socket?

229
00:14:19.160 --> 00:14:22.970
So for this purpose I need to import Java eight library.

230
00:14:22.980 --> 00:14:26.140
My ID explains that you need to import Java library here.

231
00:14:26.690 --> 00:14:28.280
So what I can do is.

232
00:14:29.490 --> 00:14:30.480
I will import.

233
00:14:31.900 --> 00:14:34.730
Java dot net dot stuff.

234
00:14:37.730 --> 00:14:39.600
Also what I'm going to do is here.

235
00:14:39.620 --> 00:14:41.030
I'm going to start.

236
00:14:42.290 --> 00:14:44.780
So as you can see man, this is raining.

237
00:14:45.050 --> 00:14:49.160
So inside java need library server.

238
00:14:49.190 --> 00:14:54.920
Socket method is already no need to create from basic socket e generating.

239
00:14:56.550 --> 00:14:57.990
The syntax is very similar.

240
00:14:59.660 --> 00:15:01.280
Server socket.

241
00:15:01.280 --> 00:15:02.810
I need to mention the poor.

242
00:15:05.900 --> 00:15:06.920
So that's it.

243
00:15:07.340 --> 00:15:08.690
I'm going to create here.

244
00:15:11.370 --> 00:15:12.690
So why this is showing me?

245
00:15:12.930 --> 00:15:16.680
Because I haven't create a Clash blog, so.

246
00:15:18.220 --> 00:15:22.720
Now I'm in infinite loop to wait for connection.

247
00:15:25.670 --> 00:15:26.450
So.

248
00:15:27.870 --> 00:15:30.330
Why we need infinite loop because.

249
00:15:32.270 --> 00:15:34.730
Or our program should always.

250
00:15:39.260 --> 00:15:43.940
Our program should always listening for a request from clients to connect our server.

251
00:15:43.970 --> 00:15:47.210
For that purpose, I'm considering the infinite loop.

252
00:15:47.450 --> 00:15:52.850
So in the next part, I'm going to explain how we can create in final, infinite loop and each and everything.

253
00:15:53.090 --> 00:15:55.790
So I will use some default codes and each and everything.

254
00:15:55.790 --> 00:15:57.560
In the next part I will explain this.

255
00:15:57.650 --> 00:16:01.510
So this is all about how we can do the server socket.

256
00:16:01.520 --> 00:16:04.400
I already created a server socket which is using this.
