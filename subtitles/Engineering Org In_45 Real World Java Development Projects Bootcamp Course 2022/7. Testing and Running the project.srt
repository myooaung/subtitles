1
00:00:00,800 --> 00:00:07,250
So till now we have covered everything about the class account class and inside the option menu.

2
00:00:07,250 --> 00:00:10,910
Plus we have covered the logging part.

3
00:00:10,910 --> 00:00:17,390
Then the choosing, the type of account like which type of account the user wants to make the transactions

4
00:00:17,390 --> 00:00:18,050
into.

5
00:00:18,080 --> 00:00:26,570
Now our next concern is to create a function or like separate functions for both the saving account

6
00:00:26,570 --> 00:00:28,940
and our checking account.

7
00:00:28,940 --> 00:00:36,350
So the options displayed by both of the accounts should be covered within the different like separate

8
00:00:36,350 --> 00:00:37,070
function.

9
00:00:37,070 --> 00:00:44,210
So this public void get saving is going to be the function for savings account.

10
00:00:44,660 --> 00:00:48,920
And the argument we are going to pass is the account.

11
00:00:48,920 --> 00:00:54,920
So the type of account is going to be the argument for this get saving function.

12
00:00:55,040 --> 00:01:02,720
Now inside this in a similar way, we will be using a boolean data type for MN.

13
00:01:02,750 --> 00:01:05,540
Initially it will be set to false.

14
00:01:06,380 --> 00:01:15,080
So if we are in the working mode, we are inside the saving account so not is equal to end.

15
00:01:15,590 --> 00:01:22,790
So when we are inside the savings account and we have not entered this process, so what will happen

16
00:01:23,240 --> 00:01:24,980
using a drive lock?

17
00:01:25,580 --> 00:01:36,650
And so we have to system dot dot print in all the five choices which are to be made in order to.

18
00:01:37,460 --> 00:01:38,540
Oh, yes.

19
00:01:38,780 --> 00:01:45,860
Make any specific tasks, whether it be New Balance, withdraw deposit funds or transfer funds to the

20
00:01:45,860 --> 00:01:47,120
checking accounts.

21
00:01:47,300 --> 00:01:53,150
So writing the choices, using this out for.

22
00:01:54,760 --> 00:01:58,630
For the first function, the type one.

23
00:01:59,050 --> 00:02:02,920
So that type one is for view balance.

24
00:02:03,340 --> 00:02:07,240
So type one view balance.

25
00:02:07,450 --> 00:02:15,880
So this is the first choice inside the savings account and other choices will be made in the similar

26
00:02:15,880 --> 00:02:16,160
way.

27
00:02:16,870 --> 00:02:25,480
Okay, so inside the get saving function, we have like set all the type, like the choices to be made

28
00:02:25,480 --> 00:02:32,420
inside the savings account, whether it be view, balance, withdraw funds, deposit and transfer funds.

29
00:02:32,440 --> 00:02:36,940
And these are the list of choices inside the savings accounts.

30
00:02:36,970 --> 00:02:42,310
Now we are like using switch cases for any of the options.

31
00:02:42,310 --> 00:02:45,320
If the user chooses, then what is going to happen?

32
00:02:45,340 --> 00:02:54,670
So if the user chooses to view the balance, then it is going to like output savings account balance

33
00:02:54,670 --> 00:02:59,620
and like the variable is used for get savings balance.

34
00:02:59,830 --> 00:03:04,810
So we have already created the get saving balance thing inside the account class.

35
00:03:04,810 --> 00:03:11,200
So it is going to like access that balance from that class inside this option menu class.

36
00:03:11,230 --> 00:03:16,480
Now second case is to like withdraw saving money.

37
00:03:16,780 --> 00:03:19,870
And the third one is forget saving deposit.

38
00:03:19,870 --> 00:03:22,790
And the fourth one is the transfer input.

39
00:03:22,810 --> 00:03:31,510
So we have created all of them inside the account class, whether it be the saving transfer calculation,

40
00:03:31,510 --> 00:03:38,980
whether it be the saving withdraw input or the saving deposit input, the transfer input is going to

41
00:03:38,980 --> 00:03:45,530
be the same in both, whether it be the checking account or the savings account.

42
00:03:45,550 --> 00:03:52,330
So yes, this is going to be displayed whenever the user's calls for saving, withdraw or saving deposit

43
00:03:52,330 --> 00:03:53,320
options.

44
00:03:53,590 --> 00:03:57,490
After this, upward transfer inputs for savings.

45
00:03:57,790 --> 00:04:06,300
And if the user hits five, then the process is going to be end and the user will like exit this drive

46
00:04:06,310 --> 00:04:06,730
low.

47
00:04:08,320 --> 00:04:10,120
And back to the main menu.

48
00:04:10,660 --> 00:04:14,830
Like we have already encountered inside the working part.

49
00:04:15,220 --> 00:04:18,610
So this is all about the saving class.

50
00:04:18,640 --> 00:04:25,610
Now, our next concern is to create a similar class like this saving class for the checking class.

51
00:04:25,630 --> 00:04:30,400
So, yes, we are going to make that class also.

52
00:04:31,660 --> 00:04:39,970
So for the checking account type, it is going to display the similar choices as the savings account.

53
00:04:40,780 --> 00:04:48,190
All the five choices are going to be similar or the difference will arrive just in the switch cases.

54
00:04:48,310 --> 00:04:57,130
So if like it is going to display the balance, then the balance will be displayed for the get checking

55
00:04:57,130 --> 00:04:57,690
balance.

56
00:04:57,700 --> 00:05:03,460
It is going to call the get checking balance method inside the account.

57
00:05:03,460 --> 00:05:05,680
Plus, we have created this.

58
00:05:05,800 --> 00:05:12,430
So this is going to display the get checking balance function and it will be returned.

59
00:05:12,700 --> 00:05:21,170
So yes, similarly for the to draw like checking with the draw input and checking deposit input.

60
00:05:21,190 --> 00:05:30,130
So all of them are going to be accessed from the account plus as we have used the get method also for

61
00:05:30,130 --> 00:05:31,450
the transfer input.

62
00:05:31,480 --> 00:05:37,960
So if we want to transfer the input from the checking account to the savings account, then there is

63
00:05:37,960 --> 00:05:43,210
a dedicated function inside the account or Java for transferring money.

64
00:05:43,450 --> 00:05:46,840
We have a yes in the last part of the account.

65
00:05:46,840 --> 00:05:55,120
Plus we have covered the transfer input thing, which is covering both the check checking and the savings

66
00:05:55,120 --> 00:05:55,840
accounts.

67
00:05:55,930 --> 00:06:03,310
So yes, this is going to like output the other choices accordingly, whether it be the checking and

68
00:06:03,310 --> 00:06:03,760
the savings.

69
00:06:03,760 --> 00:06:06,970
So we are covering right now the checking account.

70
00:06:07,000 --> 00:06:08,830
Then this is going to happen.

71
00:06:09,690 --> 00:06:09,990
Okay.

72
00:06:10,080 --> 00:06:17,460
So we are done with both the get checking function and the get saving function.

73
00:06:18,090 --> 00:06:24,840
So yes, navigating through the slides, savings accounts, these options.

74
00:06:24,840 --> 00:06:35,070
So suppose if you choose this view balance, then this will be yes, the switch case will be executed.

75
00:06:35,070 --> 00:06:43,290
And similarly for all the options, the get methods is like activated and that specific function will

76
00:06:43,290 --> 00:06:44,220
be performed.

77
00:06:44,490 --> 00:06:46,770
Now what's left like?

78
00:06:47,190 --> 00:06:50,730
We have to create our account for the new user.

79
00:06:50,730 --> 00:06:58,560
We have meant created a function right now like till now we have not created any function for creating

80
00:06:58,560 --> 00:06:59,400
an account.

81
00:06:59,520 --> 00:07:04,230
So our next concern is to create a function for creating a new account.

82
00:07:04,380 --> 00:07:13,950
So yes, this public void create account is going to create a new account for our like not already existing

83
00:07:13,950 --> 00:07:14,790
customer.

84
00:07:14,880 --> 00:07:21,540
And we have like customer number which is initially set to zero.

85
00:07:21,720 --> 00:07:31,050
And inside the try block, our user is asked to enter the customer number and like the iterator will

86
00:07:31,290 --> 00:07:42,600
enter like get the entry by the customer and map it to that specific pin number so every customer number

87
00:07:42,630 --> 00:07:48,660
will be mapped to his or her PIN number and which is going to be unique.

88
00:07:48,660 --> 00:07:55,860
Like no other user can use that customer number again for making a new account.

89
00:07:56,010 --> 00:07:59,760
So this is responsible for handling that.

90
00:08:00,180 --> 00:08:04,110
And also the customer number could be an integer.

91
00:08:04,140 --> 00:08:07,710
No other data type will be allowed for customer number.

92
00:08:09,270 --> 00:08:09,620
Okay.

93
00:08:09,690 --> 00:08:19,260
So this customer number is already registered will be displayed if our user inputs already existing

94
00:08:19,260 --> 00:08:27,240
customer which we have already discussed that the customer number should be unique for every user now.

95
00:08:28,770 --> 00:08:34,140
So if the user enters anything except integers, then it is going to be input.

96
00:08:34,140 --> 00:08:42,360
Miss the mismatch exception and the invalid choice text will be displayed on the screen.

97
00:08:42,690 --> 00:08:50,100
Now for the pin number in the similar way things will be checked, but a PIN number could be, you know,

98
00:08:50,110 --> 00:08:52,770
like same for multiple users.

99
00:08:52,890 --> 00:08:56,490
Just the customer number needs to be unique for every user.

100
00:08:56,640 --> 00:09:00,090
So we are not checking things like this.

101
00:09:00,090 --> 00:09:02,430
Customer number is already registered.

102
00:09:02,460 --> 00:09:06,540
A pin can be like similar for more than one users.

103
00:09:06,930 --> 00:09:15,570
So after the entering of customer number and pin number, your account will be successfully registered

104
00:09:15,600 --> 00:09:23,790
to the system and now you can like use the benefits inside the ATM management system.

105
00:09:24,180 --> 00:09:28,500
Now, after this, we are checking the main menu.

106
00:09:28,530 --> 00:09:31,470
So the main menu is about.

107
00:09:33,200 --> 00:09:34,280
Inside this.

108
00:09:34,550 --> 00:09:36,180
This is the main menu.

109
00:09:36,200 --> 00:09:42,230
So after the successful logging, what is going to be displayed?

110
00:09:42,410 --> 00:09:44,990
Checking account, savings account and everything.

111
00:09:45,110 --> 00:09:50,720
So whenever a user enters this atrium project, then two things will be displayed.

112
00:09:50,750 --> 00:09:55,040
Type one for logging in and type two for creating a new account.

113
00:09:55,070 --> 00:10:02,760
So inside the main menu we are using try and catch block for login and creating account.

114
00:10:02,780 --> 00:10:11,390
So suppose if a user gets like logins, he or she is already existing user to the ATM system.

115
00:10:11,390 --> 00:10:16,240
Then get login will be called from the account dot java class.

116
00:10:16,250 --> 00:10:23,570
We have already created the get logging function inside this and similarly for creating account we have

117
00:10:23,570 --> 00:10:24,620
just created.

118
00:10:25,010 --> 00:10:31,970
So create account is going to simply navigate the user to create account.

119
00:10:31,970 --> 00:10:38,270
And after this create account, everything will be transferred in the similar way for the get login

120
00:10:38,270 --> 00:10:41,340
method we have created inside the account class.

121
00:10:41,780 --> 00:10:47,300
So this is the main menu after which yes, we have exception.

122
00:10:47,600 --> 00:10:51,500
Checking if the user enters wrong choices.

123
00:10:51,500 --> 00:10:54,250
We have only two options type one and type two.

124
00:10:54,260 --> 00:10:59,540
So anything apart from it will be like regarded as invalid.

125
00:11:00,080 --> 00:11:03,950
And after the end, like suppose user enters.

126
00:11:05,030 --> 00:11:09,470
So if the user enters exit in the end we have yes.

127
00:11:09,470 --> 00:11:11,360
So account.

128
00:11:11,600 --> 00:11:13,730
We do not want to access any of the account.

129
00:11:13,730 --> 00:11:16,150
We simply want to exit the project.

130
00:11:16,160 --> 00:11:21,890
So if we type three, then this system is going to print.

131
00:11:21,920 --> 00:11:29,210
Thank you for using this item and the menu input is going to be closed and system will be exit.

132
00:11:29,570 --> 00:11:35,750
So this is all about the options menu plus we have covered so far.

133
00:11:35,780 --> 00:11:41,090
So we have options for everything from the start to begin.

134
00:11:41,090 --> 00:11:48,650
We have covered everything the log in, the savings account, the checking account and everything with

135
00:11:48,650 --> 00:11:54,350
the view, balance and withdraw, deposit and transfer and then exiting it.

136
00:11:54,560 --> 00:12:01,160
So till now we have covered all the three classes that count, plus the main class and the options menu

137
00:12:01,160 --> 00:12:01,730
plus.

138
00:12:01,760 --> 00:12:07,850
Now let us try to like run this project and see that what actually happens.

139
00:12:07,850 --> 00:12:15,680
Everything is working correctly or not, and if there will be any bugs, then we will be debug debugging

140
00:12:15,680 --> 00:12:18,210
them and then again trying to run them.

141
00:12:19,210 --> 00:12:23,740
So yes, this idiom, not Java, is responsible for testing and running.

142
00:12:23,740 --> 00:12:25,330
So we are running the.

143
00:12:26,470 --> 00:12:27,310
Glass.

144
00:12:27,610 --> 00:12:35,710
And inside this we are going to suppose create a new account customer number.

145
00:12:36,650 --> 00:12:40,670
PIN number and then redirected to logging.

146
00:12:40,910 --> 00:12:41,240
Okay.

147
00:12:41,240 --> 00:12:44,270
So I think we have entered the wrong.

148
00:12:44,390 --> 00:12:46,670
So yes, let us check that section.

149
00:12:47,050 --> 00:12:47,320
Okay.

150
00:12:47,360 --> 00:12:48,610
So wrong customer number.

151
00:12:48,830 --> 00:12:52,610
So exception is working correctly now.

152
00:12:52,610 --> 00:12:54,050
Entering the right.

153
00:12:55,580 --> 00:12:57,980
Been an customer number.

154
00:12:58,190 --> 00:13:04,670
Now let us try to enter inside the checking account or deposit some money.

155
00:13:05,210 --> 00:13:08,840
So suppose we want to deposit 10,000.

156
00:13:09,000 --> 00:13:10,820
Then the balance is changed.

157
00:13:10,850 --> 00:13:15,830
Now let us try to transfer some funds to the savings account.

158
00:13:16,370 --> 00:13:23,690
Suppose we want to transfer 2000 then the current checking account balances updated to 8000.

159
00:13:23,900 --> 00:13:30,680
And so let us try to exit and enter in the savings account and check the balance.

160
00:13:30,680 --> 00:13:36,950
So perfect savings account balances 2000 Checking account balances is 8000.

161
00:13:37,250 --> 00:13:43,310
The transferring is working correctly, the view balance feature is working correctly and navigating

162
00:13:43,310 --> 00:13:46,550
between the type of account is also working correctly.

163
00:13:46,790 --> 00:13:51,880
So till now we have covered everything about this ATM management system.

164
00:13:51,890 --> 00:13:59,660
I hope that you all have gained much idea about what this project is trying to explain to us, what

165
00:13:59,660 --> 00:14:01,490
are the concepts behind it?

166
00:14:01,490 --> 00:14:08,660
And I encourage you all to make this project on your own and learn these concepts pretty well.

167
00:14:08,660 --> 00:14:16,220
And I hope that after the successful completion of this project, you all must be aware about all the

168
00:14:16,220 --> 00:14:23,960
concepts of Java ops classes and objects and everything about the data structure we have used, like

169
00:14:23,960 --> 00:14:29,870
input output, exception, hash maps and the scanner in Java.

170
00:14:29,870 --> 00:14:36,230
Like we are using the scanner in the most main thing inside this project.

171
00:14:36,230 --> 00:14:42,200
So yes, the mapping the scanner and everything you will be aware about.

172
00:14:42,200 --> 00:14:50,120
So I am completing this project on a good note and will thank you all for joining this session.

173
00:14:50,120 --> 00:14:54,080
So yes, try this on your own and thank you.
