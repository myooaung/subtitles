WEBVTT
1
00:00:00.640 --> 00:00:01.610
Hello, everyone.

2
00:00:01.630 --> 00:00:12.510
So we have successfully created functions for adding songs, finding songs and adding songs to the playlist.

3
00:00:12.520 --> 00:00:20.010
And now we are going to use those created functions inside our main Java class.

4
00:00:20.020 --> 00:00:28.420
So inside the main class we have created like two albums, album one and album to name for the first

5
00:00:28.420 --> 00:00:33.130
album is album one and name for the second album is album two.

6
00:00:33.160 --> 00:00:40.800
These are two random artists and these are some random songs that I might be adding to the music library.

7
00:00:40.810 --> 00:00:50.980
So yes, now this album is not an album is used to add songs to the album now so that we have created

8
00:00:50.980 --> 00:00:54.540
and add a list for adding songs in the album.

9
00:00:54.550 --> 00:01:00.130
Now we are using linked list for adding songs to the playlist.

10
00:01:00.130 --> 00:01:03.940
Like we have created this in songs class.

11
00:01:04.180 --> 00:01:07.300
We like the album class.

12
00:01:07.300 --> 00:01:07.840
Yes.

13
00:01:07.840 --> 00:01:09.790
So we have created a linked list.

14
00:01:09.790 --> 00:01:17.230
And I explained you the consequence of using linked list, like it has a pointer to the previous element

15
00:01:17.230 --> 00:01:19.120
and the next element.

16
00:01:19.150 --> 00:01:25.030
So the songs are connected to the previous track and the next track.

17
00:01:25.090 --> 00:01:30.940
A current song may navigate to the previous track and the current track.

18
00:01:30.940 --> 00:01:37.030
We navigate through the next track like we can navigate between the songs now.

19
00:01:37.030 --> 00:01:45.790
After that, we have created the playlist and added songs to the playlist using album Dot Get and the

20
00:01:45.790 --> 00:01:48.280
name of the playlist is Playlist one.

21
00:01:48.400 --> 00:01:57.820
So let me call this playlist method using this play list slash one.

22
00:01:58.240 --> 00:02:00.880
Yes, this is the way of calling.

23
00:02:01.750 --> 00:02:04.420
Now so that we have created this.

24
00:02:04.600 --> 00:02:08.020
We have to create a place function.

25
00:02:08.020 --> 00:02:18.790
So for creating the play function, we are going to use private, static, void and play.

26
00:02:18.820 --> 00:02:20.980
The name of the function is play.

27
00:02:21.280 --> 00:02:24.340
We have already created a mean function.

28
00:02:24.340 --> 00:02:28.690
Now we are creating a play function.

29
00:02:28.690 --> 00:02:40.300
So the arguments inside the function is song like the playlist in the format of link list and the name

30
00:02:40.300 --> 00:02:43.330
of the linked list is playlist.

31
00:02:44.080 --> 00:02:45.340
So perfect.

32
00:02:45.550 --> 00:02:51.880
We have created this function for playing the songs in the playlist.

33
00:02:52.210 --> 00:02:55.120
Now we have to scan.

34
00:02:56.200 --> 00:03:04.330
I hope that you are aware about the scanner function inside Java like it is also a concept involved

35
00:03:04.330 --> 00:03:05.260
in the basics.

36
00:03:05.260 --> 00:03:14.770
Java like basics of Java and scanner is used to scan like take some input from the user and according

37
00:03:14.770 --> 00:03:23.590
to that input it gives output to the user in the compiler like, like the running frame where the program

38
00:03:23.590 --> 00:03:24.370
is running.

39
00:03:24.400 --> 00:03:28.420
But then it may be the terminal or the separate window.

40
00:03:28.420 --> 00:03:35.290
So scanner is going to work in that way now so that we have implemented the scanner.

41
00:03:35.320 --> 00:03:45.580
Firstly, we have to import this scanner using Java util dot scanner and it is done so to use the scanner.

42
00:03:45.580 --> 00:03:50.290
Firstly, we have to import the scanner using the java util package.

43
00:03:50.290 --> 00:03:57.700
Similarly for the list iterator, we are iterating through the linked list, so we have to import that

44
00:03:57.700 --> 00:03:58.420
also.

45
00:03:58.540 --> 00:04:05.380
So we have imported the scanner, we have imported the list editor and now we are good to go.

46
00:04:05.740 --> 00:04:08.380
So moving forward.

47
00:04:09.370 --> 00:04:19.540
So now that we have inputted the value from the user, now after scanning the value like we have several

48
00:04:19.540 --> 00:04:29.590
options, we can see that we have 0123456 options from which user has to select one of them.

49
00:04:29.800 --> 00:04:34.130
And after scanning that, the word value is inputted.

50
00:04:34.180 --> 00:04:43.420
Now we will perform several tasks like firstly, if we like, if we are importing zero, then it is

51
00:04:43.420 --> 00:04:44.320
supported.

52
00:04:44.320 --> 00:04:53.290
So if it is initialized as false, like by default, it will not be created like it will remain in the

53
00:04:53.830 --> 00:04:56.410
terminal window and this will remain open.

54
00:04:56.410 --> 00:04:58.870
So by default that is no quit.

55
00:04:59.350 --> 00:05:01.940
So it is initialize false.

56
00:05:01.960 --> 00:05:11.200
Similarly for forward it is initialized as true for by default list iterator is going to iterate through

57
00:05:11.200 --> 00:05:22.630
the list of songs and then if playlist size is zero, then system is going to print like this string.

58
00:05:22.690 --> 00:05:30.160
And the string says that this playlist have no song, so this playlist has no song.

59
00:05:31.360 --> 00:05:38.920
So yes, if there are no songs in the playlist, then obviously nothing is going to be outputted in

60
00:05:38.920 --> 00:05:39.730
that terminal.

61
00:05:39.730 --> 00:05:45.280
It will obviously print that there are no songs in the playlist, of course.

62
00:05:45.280 --> 00:05:55.870
Else if there are any songs present in the playlist, then this is going to print now playing as a string

63
00:05:55.870 --> 00:06:05.640
and the object is saying that list iterator dot next to string so I can explain this here.

64
00:06:05.650 --> 00:06:14.380
So this now playing song and the title and the duration, we are using those string to convert the double

65
00:06:14.380 --> 00:06:18.460
data type of the duration in the form of a string.

66
00:06:18.580 --> 00:06:27.250
So now playing is already a string and so that we have converted everything to a string using this two

67
00:06:27.250 --> 00:06:29.170
string method in Java.

68
00:06:29.470 --> 00:06:32.350
So this is going to print the menu.

69
00:06:32.560 --> 00:06:38.830
So after this it is going to print what is going to happen next.

70
00:06:40.030 --> 00:06:44.500
And we are going to make the print menu function later.

71
00:06:44.530 --> 00:06:51.100
Firstly, we have covered this play method like play function successfully.

72
00:06:51.190 --> 00:06:55.660
Now let's see what is the next part we have to cover?

73
00:06:56.170 --> 00:07:08.380
So after this inserting like suppose if user not quit so not quit is equal like written as the exclamation

74
00:07:08.380 --> 00:07:12.550
mark and the exclamation mark signifies not.

75
00:07:13.240 --> 00:07:21.010
This is also one of the basic concepts of Java and we call this exclamation mark as not operator.

76
00:07:21.430 --> 00:07:26.860
We saw and operated already, which was a logical operator.

77
00:07:27.070 --> 00:07:35.860
Now we are coming across this note operator, which is a logical operator as well.

78
00:07:35.900 --> 00:07:42.160
So scanner is going to scan the integer and then.

79
00:07:43.490 --> 00:07:43.880
Oh.

80
00:07:44.030 --> 00:07:46.250
Bracket after which.

81
00:07:47.420 --> 00:07:51.560
The scanner is going to be written as exit or next line.

82
00:07:53.130 --> 00:07:54.510
So next line.

83
00:07:54.650 --> 00:07:55.440
Perfect.

84
00:07:56.010 --> 00:08:03.950
So now suppose that we have selected any key, like, any options.

85
00:08:03.960 --> 00:08:06.510
Now what should be done next?

86
00:08:06.630 --> 00:08:13.290
Like, what are the consequences of pressing any key, selecting any options?

87
00:08:13.560 --> 00:08:17.190
So suppose that user has selected zero.

88
00:08:17.400 --> 00:08:20.760
So what is going to happen if user selects zero?

89
00:08:21.060 --> 00:08:29.950
So the program will be quit and the random thing will stop executing and you will be out of the program

90
00:08:30.120 --> 00:08:31.530
running portion.

91
00:08:31.830 --> 00:08:34.650
Now suppose what if the user presses one?

92
00:08:34.800 --> 00:08:40.200
So we have to switch to the next song if the user presses one.

93
00:08:40.230 --> 00:08:49.890
Similarly, for case two, we have to like replay the song which is currently playing, so we have to

94
00:08:49.890 --> 00:08:53.760
write some simple functions in order to do so.

95
00:08:54.120 --> 00:09:00.270
Now if the user presses option three, so yes, we have done with option three.

96
00:09:00.270 --> 00:09:00.650
Now.

97
00:09:00.660 --> 00:09:01.140
Yes.

98
00:09:01.140 --> 00:09:05.760
So in four, we have to simply print the playlist.

99
00:09:05.890 --> 00:09:08.910
No, nothing more is required an option for.

100
00:09:09.960 --> 00:09:13.770
And again in five we have to simply print the menu.

101
00:09:13.770 --> 00:09:18.260
Again, we have a print menu function already created.

102
00:09:18.270 --> 00:09:25.710
So like we are going to create the print menu function and simply on pressing the shift option, the

103
00:09:25.710 --> 00:09:29.700
menu will again going to be printed in the terminal window.

104
00:09:30.360 --> 00:09:35.180
And the last but not the least, we are going to delete the current song.

105
00:09:35.190 --> 00:09:44.760
So for deleting the current song we simply have to check and if end ls condition and if the playlist

106
00:09:44.760 --> 00:09:52.860
size is greater than zero, then we have to simply use a remove keyboard which is going to iterate through

107
00:09:52.860 --> 00:10:02.010
the list and simply remove the currently playing song and it will link the current song to the song

108
00:10:02.280 --> 00:10:07.800
like Remove the current song and connect the previous song to the next song.

109
00:10:07.830 --> 00:10:13.080
Like we have three things up present song like current song, a previous song.

110
00:10:13.080 --> 00:10:19.110
Suppose that this is previous song, this is current song and this is the next song.

111
00:10:19.110 --> 00:10:25.200
So if we are playing this second one and we delete it now, what is going to happen in the link list?

112
00:10:25.200 --> 00:10:30.270
So the link between this and this and this and this will be broken.

113
00:10:30.270 --> 00:10:36.240
So we have to connect that in order to continue the process.

114
00:10:36.240 --> 00:10:42.790
So we will connect the state and memories together and rest will remain same.

115
00:10:43.110 --> 00:10:50.190
Just the link between stand peaches and peaches and memory will be broken and everything will remain

116
00:10:50.190 --> 00:10:50.670
set.

117
00:10:50.850 --> 00:10:55.620
No more changes will be required and we will see that.

118
00:10:56.220 --> 00:11:01.440
So we are going to create a switch type of statement.

119
00:11:01.470 --> 00:11:06.600
We have already talked about it like switch case statement.

120
00:11:07.050 --> 00:11:14.490
The program does this in the switch and if any exception arise, then it will break through the case

121
00:11:14.490 --> 00:11:16.830
and jump to the next case.

122
00:11:16.830 --> 00:11:17.910
So we will see that.
