WEBVTT
1
00:00:00.270 --> 00:00:00.540
Right.

2
00:00:00.870 --> 00:00:01.720
Hello, everyone.

3
00:00:01.740 --> 00:00:09.750
So in the previous part, we have decided that how the shapes and that buttons are going to be look

4
00:00:09.750 --> 00:00:11.160
inside the frame.

5
00:00:11.190 --> 00:00:17.280
Now, in this part, we are going to add the action listener to those added buttons.

6
00:00:17.940 --> 00:00:22.440
So we were having separate buttons for the circle.

7
00:00:22.470 --> 00:00:30.180
So when we click the circle option from the left panel, then our different options on the top back

8
00:00:30.240 --> 00:00:38.280
will going to appear similarly for the line are different or top bar will appear to the user.

9
00:00:38.370 --> 00:00:45.840
So when we click for the line had a size and the text will appear which will say that you have to drag

10
00:00:46.100 --> 00:00:50.850
our starting point to the end point then whenever you want to take the line.

11
00:00:50.850 --> 00:00:56.130
So here it is, please click first point and drag to the second points.

12
00:00:56.250 --> 00:01:01.260
So a line is basically our joint, the structure of two points.

13
00:01:01.380 --> 00:01:07.020
The joining of two points is called as a line, so we have to drag accordingly.

14
00:01:07.020 --> 00:01:08.880
That's how long we want that line.

15
00:01:08.880 --> 00:01:16.350
And also the size will contain a numbers pin model which is going to like set the width of the line

16
00:01:16.350 --> 00:01:17.580
we are going to draw.

17
00:01:17.700 --> 00:01:24.570
Now in this part, we will be adding action list notes to all of the buttons, whether it be for the

18
00:01:24.570 --> 00:01:26.400
rectangle, the circle.

19
00:01:26.430 --> 00:01:32.240
So let us come to this left bar and take it as one by one.

20
00:01:32.250 --> 00:01:38.580
So this action, listening for this save button, then the rectangle, then the one, then the line,

21
00:01:38.580 --> 00:01:40.830
and then these two buttons.

22
00:01:40.860 --> 00:01:44.550
So, okay, so this is for the save button.

23
00:01:44.550 --> 00:01:46.230
This action is not function.

24
00:01:46.740 --> 00:01:51.780
The action performed is the name of the function and it is taking an action event.

25
00:01:51.780 --> 00:01:56.850
So which indicates that how this action is going to be performed.

26
00:01:56.880 --> 00:02:02.310
Also, this is for the rectangle, the circle, the line and the remove.

27
00:02:02.310 --> 00:02:04.880
So and the clear all of course.

28
00:02:04.890 --> 00:02:13.650
So this is for the remove, like remove a specific shape at a time and discharge for clear all the shapes

29
00:02:13.650 --> 00:02:15.870
on the canvas at once.

30
00:02:15.900 --> 00:02:18.330
Now this is for the colour.

31
00:02:18.330 --> 00:02:21.270
So once we are done with the side bar.

32
00:02:21.300 --> 00:02:28.500
So if we have chosen any of the options, like suppose we have chosen the rectangle, then we have to

33
00:02:28.500 --> 00:02:33.880
set a colour for the rectangle to select whether it should be empty or full.

34
00:02:33.900 --> 00:02:36.660
So in that way this action is not is working.

35
00:02:36.660 --> 00:02:43.740
That set rectangle colour and a dialog box should appear when you get that choose colour button which

36
00:02:43.740 --> 00:02:45.810
will ask us for a colour.

37
00:02:45.810 --> 00:02:52.370
So by default the colour is going to be black and we can change the colour according to our preference.

38
00:02:52.380 --> 00:03:02.810
Now similarly for the shape and the like, whether it could be full rectangle or a light coloured rectangle.

39
00:03:02.820 --> 00:03:08.640
So we have seen this in the working part that on hitting this full, this rectangle is going to be drawn

40
00:03:09.360 --> 00:03:15.870
in a complete manner with its border full with a colour, and if it is empty then only the outlining

41
00:03:15.870 --> 00:03:16.860
is going to be done.

42
00:03:16.860 --> 00:03:22.800
So this function is going to be responsible for that, that whether the rectangle is going to be full

43
00:03:22.800 --> 00:03:23.700
or not.

44
00:03:24.810 --> 00:03:30.360
So in that similar way, we were covering this for rectangle that things are going to be same for the

45
00:03:30.360 --> 00:03:35.790
circle, but it could be the chosen colour part or the pool, an empty part.

46
00:03:36.630 --> 00:03:44.190
So yes, the rectangle and circle are like working in most of the part in same manner.

47
00:03:44.190 --> 00:03:52.230
So most of the functions we will encounter in the rectangle and circle is going to be similar, whether

48
00:03:52.230 --> 00:03:57.150
it is choosing the colour, setting the height of it, setting and full and everything.

49
00:03:57.150 --> 00:03:59.400
So coming to the line.

50
00:03:59.400 --> 00:04:01.770
So that line is bit different.

51
00:04:01.770 --> 00:04:10.860
Like when we select the line from the sidebar, then only a set colour button and the size button will

52
00:04:10.860 --> 00:04:12.150
appear to the user.

53
00:04:12.150 --> 00:04:20.220
So this is for choosing the colour so we can choose the colour for the line and like the line will be

54
00:04:20.220 --> 00:04:21.330
drawn according to that.

55
00:04:21.570 --> 00:04:27.900
So here we have drawn a black line as by default the colour is set to black and we can change the colour

56
00:04:27.900 --> 00:04:30.560
and according to our like use.

57
00:04:30.600 --> 00:04:35.550
Okay, so this snapshot, so how this snapshot part is working.

58
00:04:35.790 --> 00:04:43.530
So on our drawing frame we are having a left panel, a top panel and a drawing editing area.

59
00:04:43.530 --> 00:04:52.560
So when hitting the save button, the application is going to take a snapshot of the drawing area and

60
00:04:52.560 --> 00:04:57.030
save it to our system in the form of a JPEG image.

61
00:04:57.030 --> 00:04:59.850
So at this snapshot function.

62
00:04:59.930 --> 00:05:05.920
Is going to take a snapshot of whatever is being drawn on the drawing editing area.

63
00:05:05.930 --> 00:05:11.450
So basically the snapshot is a separate panel inside the application.

64
00:05:11.480 --> 00:05:15.350
This white area is going to be the yes.

65
00:05:15.350 --> 00:05:17.810
The subject for the snapshot.

66
00:05:18.110 --> 00:05:24.980
It would it will have us like dedicated size, dedicated height and width, of course.

67
00:05:24.980 --> 00:05:30.130
And our finger drawn on it will be saved in the form of image.

68
00:05:30.260 --> 00:05:34.640
So this file user will open the file chooser of our system.

69
00:05:35.100 --> 00:05:36.290
My title will appear.

70
00:05:36.290 --> 00:05:39.770
That file will be saved in the jpg format.

71
00:05:39.800 --> 00:05:41.100
Here we have it.

72
00:05:41.120 --> 00:05:48.140
So this file chooser opens once we click the save button and then it will show this title and not the

73
00:05:48.140 --> 00:05:50.570
normal file chooser of any text.

74
00:05:51.710 --> 00:05:55.130
So this is all about like saving the image.

75
00:05:55.670 --> 00:05:56.120
Yes.

76
00:05:56.120 --> 00:06:00.610
So this try and catch block is for selecting the part of our image.

77
00:06:00.620 --> 00:06:04.960
So here we have been asked for that where we want to save the image.

78
00:06:04.970 --> 00:06:15.980
So the application is going to throw exception if the path chosen is like containing any kind of irregular

79
00:06:15.980 --> 00:06:16.550
behavior.

80
00:06:16.550 --> 00:06:17.300
So yes.

81
00:06:18.240 --> 00:06:24.730
So once we choose the path, then we have to type of filing a file could not be empty.

82
00:06:24.750 --> 00:06:31.890
We have to set a name for our image, whether it could be any normal alphabet, any random alphabet

83
00:06:31.890 --> 00:06:33.250
on any proper name.

84
00:06:33.270 --> 00:06:40.560
We have to treat the name inside this file name input field, and then we have to hit this save button

85
00:06:40.560 --> 00:06:41.870
in order to save them.

86
00:06:42.030 --> 00:06:48.990
And once the images save, then this dialog box will appear a message that the image has been saved

87
00:06:48.990 --> 00:06:50.010
successfully.

88
00:06:50.190 --> 00:06:58.410
So this part is showing that, that if the image has been saved successfully, then show this message.

89
00:06:58.410 --> 00:07:00.750
That image has been saved successfully.

90
00:07:01.680 --> 00:07:10.310
So this was all about this snapshot function and this is the end of this main class drawing editor dot

91
00:07:10.380 --> 00:07:11.010
Java.

92
00:07:11.100 --> 00:07:14.640
This part is going to test and run the application.

93
00:07:15.150 --> 00:07:21.680
Once we run the application, then this is going to be handled how it is going to look.

94
00:07:21.690 --> 00:07:29.840
So this UI manager said look and feel is for the modern look of this file chooser and this dialog box.

95
00:07:29.850 --> 00:07:32.400
We have a conventional file chooser look.

96
00:07:32.940 --> 00:07:35.490
But on hitting this like.

97
00:07:36.270 --> 00:07:44.460
Choosing this UI manager set look and feel the modern file chooser like UI appears in our application

98
00:07:44.970 --> 00:07:50.540
and this is a void run function which is going to run the application of course.

99
00:07:50.550 --> 00:07:56.220
So this was all about our main class, the drawing editor, Java.

100
00:07:56.970 --> 00:08:05.880
This was containing a frame, of course, the panels that are left on the top one and the drawing editor

101
00:08:05.880 --> 00:08:10.200
area, which was empty in the beginning when we ran it.

102
00:08:10.200 --> 00:08:12.840
An empty drawing area will appear.

103
00:08:13.050 --> 00:08:19.860
We have to choose the shapes, set the width, colors and everything from the panel, and then we can

104
00:08:19.860 --> 00:08:21.690
start our drawing.

105
00:08:21.690 --> 00:08:29.100
Now the next class we are going to create is going to be the shape class we have discussed about it

106
00:08:29.100 --> 00:08:35.430
in the working of the application part and we will look how it is actually working.

107
00:08:35.670 --> 00:08:44.340
So let me first name the classes, shape Java and yes, it creates a public class shape.

108
00:08:44.940 --> 00:08:52.470
Inside this shape or Java file, we are going to add functionalities for the drawing area.

109
00:08:53.400 --> 00:09:02.580
So you have seen inside the circle and the rectangle class that we were using this X, Y and Z which

110
00:09:02.730 --> 00:09:09.660
were like being responsible for the width and height of that specific shape which is being drawn its

111
00:09:09.660 --> 00:09:12.630
distance from the x axis and the y axis.

112
00:09:12.630 --> 00:09:20.460
And what color the shape is like containing, whether it is the empty shape or the full shape.

113
00:09:20.460 --> 00:09:25.230
So if it is the shape, then the board that is going to contain that color.

114
00:09:25.230 --> 00:09:28.680
And if we are choosing the full, then the color.

115
00:09:28.680 --> 00:09:31.470
Color will be filled inside the shape of course.

116
00:09:31.470 --> 00:09:40.200
So inside the shape class we are going to create the same like declare the same variables first X,

117
00:09:40.200 --> 00:09:45.090
Y, W, X and a color of course.

118
00:09:45.090 --> 00:09:52.500
So it is going to be color data type and this is going to be named as simply color.

119
00:09:52.980 --> 00:10:00.120
So after this we are going to create a boolean which is going to check that whether that shape is filled

120
00:10:00.120 --> 00:10:06.510
or not, whether it is empty or filled, so is filled initially is set to false.

121
00:10:06.510 --> 00:10:14.130
So by default the shape which will be drawn is like without containing any color inside the borders,

122
00:10:14.370 --> 00:10:16.350
just simply empty image.

123
00:10:16.680 --> 00:10:20.640
Now the shape variables are being declared.

124
00:10:20.640 --> 00:10:27.420
Now we are going to create a constructor public shape and pass arguments inside it.

125
00:10:27.450 --> 00:10:31.470
The similar arguments we have passed inside this.

126
00:10:31.470 --> 00:10:41.850
So we will copy it from head up to C and simply paste it inside this shape object.

127
00:10:42.510 --> 00:10:45.390
So X, y, w, edge and color.

128
00:10:45.420 --> 00:10:46.020
See.

129
00:10:46.530 --> 00:10:55.770
So after this we are going to like how we can access that x, y, w edge and color inside this constructor.

130
00:10:55.770 --> 00:11:03.720
So we have discussed about it earlier in the sections that we will be using this keyword in order to

131
00:11:04.320 --> 00:11:09.270
set any shape, like set the dimensions to the shape.

132
00:11:09.510 --> 00:11:11.280
Anyways, we want it.

133
00:11:11.280 --> 00:11:22.080
So this dot divide, this dot W and they are going to set the values of all of them inside the constructor

134
00:11:22.080 --> 00:11:22.860
of course.

135
00:11:22.860 --> 00:11:29.280
So it is edge and the last one is going to be this dot color.

136
00:11:29.910 --> 00:11:33.960
So we will be updating the color.

137
00:11:34.920 --> 00:11:39.630
For the ship, which is being drawn on the panel.

138
00:11:39.990 --> 00:11:46.530
So this dot color and on saving it, yes, it is formatted correctly.

139
00:11:46.740 --> 00:11:51.660
Now we are done with this ship constructor.

140
00:11:52.560 --> 00:11:56.520
Now we have seen that the ship was like moving.

141
00:11:56.640 --> 00:12:02.940
We can move the ships anywhere in the frame, any random positions the ship can take.

142
00:12:03.090 --> 00:12:09.810
When we were drawing a candle inside the working of the application part, we were moving it here and

143
00:12:09.810 --> 00:12:10.360
there.

144
00:12:10.710 --> 00:12:14.230
Like dragging a ship and moving it anywhere in the frame.

145
00:12:14.250 --> 00:12:19.140
So for that, we will be creating a public void.

146
00:12:19.440 --> 00:12:22.500
Move, function and insert the move function.

147
00:12:22.620 --> 00:12:30.150
We are changing the accent via like the position of the ship with respect to the x and y axis.

148
00:12:30.180 --> 00:12:40.950
So the arguments are going to be in that manner only so in DVI and so too much of typos.

149
00:12:42.300 --> 00:12:45.180
This dot x and this dot y is going to be changed.

150
00:12:45.180 --> 00:12:49.860
So we will be accessing it with the help of this keyword only.

151
00:12:50.280 --> 00:12:53.820
So this dot y for the y axis.

152
00:12:54.720 --> 00:12:57.300
So this was all about the move function.

153
00:12:57.330 --> 00:13:05.370
Now the next part we will be covering is that a Boolean function contains which is going to contain

154
00:13:05.370 --> 00:13:13.010
the shape which will be like accessing the W of the ship with ten height of the ship.

155
00:13:13.020 --> 00:13:19.650
And that is going to be handled with the help of that contains function, which is going to check that

156
00:13:19.830 --> 00:13:28.230
whether the ship is placed properly in the editor and the written height are like properly set for that

157
00:13:28.230 --> 00:13:29.100
ship or not.

158
00:13:29.730 --> 00:13:30.060
Okay.

159
00:13:30.060 --> 00:13:38.040
So in order to access the colour component, we have to import the colour component of from the library

160
00:13:38.040 --> 00:13:40.290
so that then it will be gone.

161
00:13:40.950 --> 00:13:44.940
Initially it was showing a red underline for this colour part.

162
00:13:45.030 --> 00:13:48.420
Once we have imported the colour, then that is gone.

163
00:13:48.450 --> 00:13:53.960
Now inside the contents function, we are going to pass the arguments as X and Y.

164
00:13:53.970 --> 00:14:03.210
So this is going to check that whether the update is updated position of the image is a like other than

165
00:14:03.210 --> 00:14:08.320
the previous position and it is going to basically contains the shape.

166
00:14:08.340 --> 00:14:15.090
So it is going to return the updated position of the C and otherwise it is going to return false and

167
00:14:15.090 --> 00:14:23.610
there will be no change in the position of the shade on this x, y, w and edge and colour are like

168
00:14:23.610 --> 00:14:26.700
declared ahead as the global variables.

169
00:14:26.700 --> 00:14:34.810
But in order to access these five yes, five variables inside any of the classes we have to use get

170
00:14:34.860 --> 00:14:35.870
n okay.

171
00:14:36.030 --> 00:14:41.610
So we have to access these classes inside like access these variables inside other classes.

172
00:14:41.640 --> 00:14:49.170
Then we have to use the gate method as we are going to highlighting this x, y, w edge and colour as

173
00:14:49.170 --> 00:14:54.590
the only variables are going to be made possible with the help of this get method.

174
00:14:54.600 --> 00:15:02.640
So yes, this was all about the shape class we have created, the positions for the shift like that.

175
00:15:02.640 --> 00:15:11.640
It is going to be located from the like x axis and y axis and what is going to be its height and width

176
00:15:11.640 --> 00:15:13.500
and yes, colour of course.

177
00:15:13.500 --> 00:15:22.650
So in order to move the shape, we have to update the X and Y position like its distance from the origin,

178
00:15:22.650 --> 00:15:24.990
from the x axis and the y axis.

179
00:15:25.110 --> 00:15:29.580
And in that order only the shapes are going to be modified.

180
00:15:29.580 --> 00:15:32.130
So yes, this was all about the shape.

181
00:15:32.130 --> 00:15:37.200
Plus in the next part we are going to discuss about the drawing area.

182
00:15:37.200 --> 00:15:44.190
Plus, yes, this white space is going to be a separate class and we will be covering it in the next

183
00:15:44.190 --> 00:15:44.540
part.
