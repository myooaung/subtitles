WEBVTT
1
00:00:00.750 --> 00:00:01.790
Hello everyone.

2
00:00:01.800 --> 00:00:07.920
So I hope that you all have went through the introduction of the application part and working off the

3
00:00:07.920 --> 00:00:11.070
project part pretty well and have much to gain.

4
00:00:11.070 --> 00:00:18.300
Like a rough idea about what this application is about, how we are going to add functionality for add

5
00:00:18.300 --> 00:00:24.840
button, delete button in order to create a post order calculation, how to calculate the height of

6
00:00:24.840 --> 00:00:28.650
the tree and how to put up things inside the frame.

7
00:00:28.650 --> 00:00:35.760
So we have discussed all of them inside the working application and now we are going to actually implement

8
00:00:35.760 --> 00:00:38.040
all of them inside this coding part.

9
00:00:38.040 --> 00:00:44.520
So in this coding execution part, firstly we are going to create a new project inside our favorite

10
00:00:44.520 --> 00:00:45.100
ID.

11
00:00:45.150 --> 00:00:46.590
We lost audio code.

12
00:00:46.590 --> 00:00:51.930
So this is the welcome page of the Visual Studio code ID.

13
00:00:51.980 --> 00:01:00.000
On this welcome page, we have to click on this Explorer button on the sidebar option will appear to

14
00:01:00.000 --> 00:01:02.970
create a Java project in the bottom.

15
00:01:02.970 --> 00:01:09.540
So open folder and clone repository are the two features which we are going not going to use.

16
00:01:09.540 --> 00:01:17.020
We have to just simply click this, create the project button, then it will ask to what type of build

17
00:01:17.040 --> 00:01:19.830
tool we want to include in this project.

18
00:01:19.830 --> 00:01:26.520
So there are several tools in Java, such as Maven, Spring Boot, Cox and Micro Profile, which are

19
00:01:26.520 --> 00:01:33.450
going to provide all ready made templates for writing your code and you just have to put data inside

20
00:01:33.450 --> 00:01:37.890
that template and things will come up inside the frame automatically.

21
00:01:37.890 --> 00:01:43.860
But inside this project we are going to work directly with the source code without any tools.

22
00:01:43.860 --> 00:01:47.910
So we will selecting this no build tools option.

23
00:01:49.000 --> 00:01:51.400
So I'm hitting this noble third option.

24
00:01:51.400 --> 00:01:58.420
The file chooser of your system will open, or you can choose a location for your project folder basically

25
00:01:58.420 --> 00:02:02.800
from this file chooser so you can choose any location head.

26
00:02:02.800 --> 00:02:06.010
I am choosing desktop as the project location.

27
00:02:06.010 --> 00:02:14.080
So on hitting desktop and then clicking on this select the project location input text field will appear

28
00:02:14.080 --> 00:02:15.880
on the welcome of the ID.

29
00:02:16.270 --> 00:02:21.040
So here we have the input, a Java project name inside this input field.

30
00:02:21.340 --> 00:02:29.500
So your name should be like in a manner that it decides that what is actually this project is doing.

31
00:02:29.500 --> 00:02:37.690
So I am going to name this project in a manner that it actually defines my project that what actually

32
00:02:37.690 --> 00:02:39.880
we are going to do inside this project.

33
00:02:39.970 --> 00:02:44.980
So I am going to name this based visualization.

34
00:02:46.660 --> 00:02:47.250
All.

35
00:02:48.620 --> 00:02:53.680
And yes, this is going to be the name for the folder of my Java project.

36
00:02:53.690 --> 00:03:01.700
So BSD visualization tool and on hitting enter, we will end up inside that folder which we have just

37
00:03:01.700 --> 00:03:05.150
created in our order to write a Java code.

38
00:03:05.180 --> 00:03:11.580
So this is the in entering page of this folder based visualization code.

39
00:03:11.600 --> 00:03:19.070
It is already containing a few folders, which is basically like inbuilt folders of this based visualization

40
00:03:19.070 --> 00:03:20.060
tool project.

41
00:03:20.060 --> 00:03:27.830
So this dot, this dot vs code is going to be the folders of the compiler, which the compiler provides

42
00:03:27.830 --> 00:03:30.980
to every Java project which we create here.

43
00:03:31.100 --> 00:03:40.130
So we can simply ignore these two folders dot this dot of school as they are of no use in our project.

44
00:03:40.130 --> 00:03:48.470
So simply ignoring these 2.. vs code folders and coming to our main folder which is the SLC folder.

45
00:03:48.740 --> 00:03:54.890
So inside this SLC folder we are going to create our main application.

46
00:03:55.880 --> 00:04:02.470
What is the main file of our application should be consistent inside this RC folder only.

47
00:04:02.480 --> 00:04:10.760
So this is RC folder is the body of our application and all the parts of that body are going to be stored

48
00:04:10.760 --> 00:04:13.010
inside this SLC folder only.

49
00:04:13.130 --> 00:04:22.130
So keep in mind that all important files and folder to be stored in us RC folder not only in this project

50
00:04:22.130 --> 00:04:25.110
but any of the other projects you are making.

51
00:04:25.130 --> 00:04:32.360
You should store all the important files inside this RC folder only in order to make your application

52
00:04:32.360 --> 00:04:37.160
run executable and free of any kind of exception.

53
00:04:37.760 --> 00:04:42.290
So yes, this was all about the structure of this folder.

54
00:04:42.320 --> 00:04:50.330
Now, in order to start the coding path, we have to create a class which is going to like handle all

55
00:04:50.330 --> 00:04:52.990
the testing and running of this application.

56
00:04:53.000 --> 00:04:56.870
So let us choose the name for that file.

57
00:04:57.050 --> 00:05:02.350
So we are going to like do a visualization of binary search tree.

58
00:05:02.360 --> 00:05:06.350
So I am going to name this class also in that way.

59
00:05:06.590 --> 00:05:10.710
So BSD visualization.

60
00:05:11.450 --> 00:05:12.440
Dot Java.

61
00:05:12.710 --> 00:05:22.160
So dot java should be like must be included after every file inside the society folder we are creating

62
00:05:22.280 --> 00:05:26.960
as are only after this extension dot java.

63
00:05:26.960 --> 00:05:33.150
That application should be like perform in a Java application manner.

64
00:05:33.170 --> 00:05:40.190
So this extension is like most important thing in order to create a Java project.

65
00:05:40.340 --> 00:05:48.100
So yes, keep this in mind that adding Java extension is a must while creating a Java class.

66
00:05:48.110 --> 00:05:52.470
So I'm hitting enter like we landed inside this file.

67
00:05:52.820 --> 00:06:02.300
Now inside this we are going to create a public class and this class is basically going to handle all

68
00:06:02.300 --> 00:06:09.800
that testing and running and contain all the objects, methods, functionalities of our project.

69
00:06:09.950 --> 00:06:21.160
So BSD visualization is going to be the name for this class, as we have named the folder as BSD visualization

70
00:06:21.160 --> 00:06:22.130
dot java.

71
00:06:22.340 --> 00:06:27.890
So the name for this class should also be BSD visualization.

72
00:06:27.890 --> 00:06:39.140
And we will extend this class to day frame as we are going to put up things inside the frame only.

73
00:06:39.860 --> 00:06:40.150
Okay.

74
00:06:40.160 --> 00:06:43.810
So on hitting enter and import is made automatically.

75
00:06:43.820 --> 00:06:45.620
Java string j frame.

76
00:06:46.130 --> 00:06:56.390
This frame is a component from this Java String library, so an extended version of Java JWT frame that

77
00:06:56.390 --> 00:07:00.610
adds a support for Zfc or string component architecture.

78
00:07:00.620 --> 00:07:07.610
So basically it is going to give us a content pane inside which we are going to store our application.

79
00:07:08.180 --> 00:07:16.340
So after creating the class and extending it to AGC, now we are going to like initialize a few of the

80
00:07:16.340 --> 00:07:20.600
variables which are going to be needed inside this project.

81
00:07:20.600 --> 00:07:26.570
So the variables are private node root.

82
00:07:27.980 --> 00:07:35.510
The second one is going to be J panel for containing all of the panels.

83
00:07:35.990 --> 00:07:39.680
So a panel for top panel.

84
00:07:41.330 --> 00:07:50.870
We are going to write these names as Camel Case three panel, a panel for the three, a panel for the

85
00:07:51.110 --> 00:07:55.580
like, height and buttons and info.

86
00:07:55.580 --> 00:07:59.080
Panel in for panel.

87
00:08:00.010 --> 00:08:00.390
Okay.

88
00:08:00.740 --> 00:08:06.170
And the next one is going to be a panel for left and right.

89
00:08:06.170 --> 00:08:11.090
So let us like visualize what actually we are talking about.

90
00:08:11.750 --> 00:08:14.120
So this is the three panel.

91
00:08:14.690 --> 00:08:20.900
This is the top panel and this is the bottom panel, or we can say it as our info panel.

92
00:08:21.320 --> 00:08:27.290
Now, the next concern is to like the side panel for this left and this right.

93
00:08:27.290 --> 00:08:34.220
So this left is going to be the height one and this left is going to be add delete button text field.

94
00:08:34.910 --> 00:08:38.660
So let us declare that also.

95
00:08:38.660 --> 00:08:42.530
So we are going to copy the same code and paste it.

96
00:08:44.350 --> 00:08:45.430
In order to.

97
00:08:46.990 --> 00:08:50.560
Just changing it to top left.

98
00:08:51.730 --> 00:08:53.440
And stop, right?

99
00:08:58.370 --> 00:09:01.400
Top ten.

100
00:09:02.810 --> 00:09:07.310
So, yes, these are the two left and right panels now.

101
00:09:07.430 --> 00:09:11.540
In the next part, we are going to import a button for a button and a button.

102
00:09:11.540 --> 00:09:21.830
Delete private j button for b t add and retain delete.

103
00:09:24.440 --> 00:09:25.140
Yes.

104
00:09:25.160 --> 00:09:25.550
Okay.

105
00:09:25.550 --> 00:09:28.220
So the next one is going to be a text field.

106
00:09:28.340 --> 00:09:32.600
So private text field.

107
00:09:33.880 --> 00:09:35.920
And it is going to be a.

108
00:09:36.520 --> 00:09:43.300
So we are naming this text field as so whenever we are going to access this text field, we will be

109
00:09:43.300 --> 00:09:46.910
simply accessing it with you.

110
00:09:48.160 --> 00:09:52.660
The next one is going to be the x and y axis.

111
00:09:52.660 --> 00:10:03.370
Like how these x, x and y axis distance of this application is setting it to 300 in the beginning and

112
00:10:04.210 --> 00:10:05.320
75.

113
00:10:07.500 --> 00:10:08.970
For the Y axis.

114
00:10:09.210 --> 00:10:18.720
So we are going to draw lines and these lines are going to contain a specific distance from the x axis

115
00:10:18.720 --> 00:10:20.080
and the Y axis.

116
00:10:20.100 --> 00:10:24.920
So we have written this head in the form of a private X and Y.

117
00:10:25.170 --> 00:10:27.440
The next one is going to be graphics.

118
00:10:27.450 --> 00:10:33.330
So here you can see that we are storing the nodes in the form of a colored rectangles.

119
00:10:33.330 --> 00:10:40.470
So two axis that we are going to use graphics, private graphics, two dx.

120
00:10:43.320 --> 00:10:43.830
And.

121
00:10:46.160 --> 00:10:48.970
We are going to call it Test G two.

122
00:10:49.540 --> 00:10:51.220
So yeah, g two.

123
00:10:51.940 --> 00:11:01.720
The next one is going to be a rectangle, private rectangle, and we are going to name this rectangle

124
00:11:01.720 --> 00:11:07.270
as size as it is going to be the size of the node.

125
00:11:07.300 --> 00:11:12.640
Next one is going to be available for preorder, post order and height.

126
00:11:12.650 --> 00:11:21.460
So for labels again private label, we have already used this label for top left, right and all of

127
00:11:21.460 --> 00:11:21.870
them.

128
00:11:21.880 --> 00:11:24.370
So similarly label order.

129
00:11:26.910 --> 00:11:28.470
Label order and.

130
00:11:31.600 --> 00:11:31.930
Okay.

131
00:11:31.930 --> 00:11:38.080
So these are all the labels which are going to be needed in order pre and post order and the height

132
00:11:38.080 --> 00:11:43.510
and also for the answer of the pre order, post order and height.

133
00:11:43.660 --> 00:11:50.470
This is the label thing which is written in the board and the answer is this for all three of them.

134
00:11:50.470 --> 00:11:52.630
And what is the answer for the height?

135
00:11:53.020 --> 00:11:59.650
Now the next part is to like decide the structure for the node.

136
00:12:00.010 --> 00:12:01.840
So node structure.

137
00:12:02.710 --> 00:12:04.150
We are going to cover.

138
00:12:06.610 --> 00:12:09.010
So how the node structure is going to be.

139
00:12:09.010 --> 00:12:10.900
Let us first create a node.

140
00:12:12.140 --> 00:12:13.040
Class.

141
00:12:15.730 --> 00:12:15.990
Okay.

142
00:12:16.360 --> 00:12:18.100
So this is the node class.

143
00:12:19.870 --> 00:12:28.990
Inside this class, we are going to invoke some objects such as static and text like it is going to

144
00:12:28.990 --> 00:12:31.240
be with ten height for this node.

145
00:12:31.240 --> 00:12:32.110
So.

146
00:12:34.560 --> 00:12:36.080
Height and the exterior.

147
00:12:36.660 --> 00:12:47.160
So underscore width, which is going to be 40 in the beginning and similarly static.

148
00:12:50.000 --> 00:12:54.860
Static in text height.

149
00:12:58.910 --> 00:13:00.470
For the nodes.

150
00:13:01.770 --> 00:13:03.690
And it is going to be again for.

151
00:13:04.800 --> 00:13:08.880
So the height and width is going to be same for the north.

152
00:13:09.180 --> 00:13:15.630
Now the next one is going to be available for the data inside the node.

153
00:13:15.720 --> 00:13:28.530
So the level data, a node left a node right as we are having left and right, subtree, so separate,

154
00:13:28.530 --> 00:13:30.420
not for the right and left one.

155
00:13:30.900 --> 00:13:40.230
In order to make this like accessing this node in the later part of the program, when a point is going

156
00:13:40.230 --> 00:13:47.400
to be like declared, we will come to this point, like what actually this point is doing.

157
00:13:47.430 --> 00:13:54.670
So point B and so this was all about this node class.

158
00:13:54.690 --> 00:14:03.930
Now what this node constructor is doing, so node and info is going to be the arguments of this node

159
00:14:03.930 --> 00:14:04.980
constructor.

160
00:14:05.010 --> 00:14:09.960
Now inside this, we will be accessing that data.

161
00:14:10.620 --> 00:14:12.120
So new label.

162
00:14:14.230 --> 00:14:18.100
New label and info.

163
00:14:20.700 --> 00:14:22.170
I'm destroying.

164
00:14:25.640 --> 00:14:27.710
Swing constant center.

165
00:14:29.150 --> 00:14:37.670
So the like the data inside the node should be filled inside, like inside the node at the center.

166
00:14:37.850 --> 00:14:45.710
Basically this is the layout for the elements inside the node and a few more.

167
00:14:46.880 --> 00:14:47.180
Okay.

168
00:14:47.180 --> 00:14:55.160
So this was all about the note structure, the note which we are creating for storing the elements and

169
00:14:55.160 --> 00:14:57.670
again coming to the point structure.

170
00:14:57.680 --> 00:15:04.160
So what this point is actually so how the notes are being connected with the help of a straight line,

171
00:15:04.190 --> 00:15:09.050
you can see a thick black straight line which are connecting the notes.

172
00:15:09.050 --> 00:15:16.100
So but there is a distance between these two notes and that distance is covered with the help of this

173
00:15:16.100 --> 00:15:16.640
line.

174
00:15:16.640 --> 00:15:18.230
So how do we draw a line?

175
00:15:18.230 --> 00:15:21.050
To draw a line, we need two points.

176
00:15:21.050 --> 00:15:26.570
Basically, a line is our joining structure for two points.

177
00:15:26.570 --> 00:15:30.410
The distance between two points is covered with the help of a line.

178
00:15:30.410 --> 00:15:37.340
So these points are basically the coordinates of the node, the first one and the second one, which

179
00:15:37.340 --> 00:15:40.040
the line is like joining.

180
00:15:40.250 --> 00:15:43.160
So yes, this was the structure for the point.

181
00:15:43.160 --> 00:15:46.070
The similar way we are having a structure for the node.

182
00:15:46.100 --> 00:15:49.280
We were like making a class for the node.

183
00:15:49.280 --> 00:15:55.040
Similarly, we are making a class for the point, initially setting all of them to zero in order to

184
00:15:55.040 --> 00:15:55.610
access them.

185
00:15:55.610 --> 00:16:02.830
We are using this key word and in order to use that point again in the code, we are converting that

186
00:16:03.140 --> 00:16:10.460
coordinates in the form of a string to access later it in the code right now for storing the height

187
00:16:10.460 --> 00:16:12.050
of the root left and right.

188
00:16:12.590 --> 00:16:19.340
So everyone is having a height initially this is at the height zero, this is one, this is two.

189
00:16:19.340 --> 00:16:21.650
And similarly these are growing.

190
00:16:21.650 --> 00:16:29.690
So this is like simply storing the height of the left, right and the root initially.

191
00:16:29.720 --> 00:16:36.500
Now, we will be covering the rest part in the next part of this project.
