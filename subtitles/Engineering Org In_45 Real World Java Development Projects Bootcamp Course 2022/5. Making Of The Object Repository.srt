1
00:00:00,330 --> 00:00:00,660
Okay.

2
00:00:00,970 --> 00:00:01,250
Okay.

3
00:00:01,350 --> 00:00:09,130
So till now, we have created three of the classes required inside this contact repository interface.

4
00:00:09,150 --> 00:00:10,590
The main class.

5
00:00:11,990 --> 00:00:16,570
Which will be responsible for testing and running the contact class.

6
00:00:17,750 --> 00:00:25,940
For all the labels of the firm where the information is being treated into and I repository class.

7
00:00:25,940 --> 00:00:35,720
So we have discussed about this repository that the repository is like a file storing the feature which

8
00:00:36,110 --> 00:00:43,370
stores information and helps us to extract and update the information according to the need.

9
00:00:43,490 --> 00:00:48,950
Now the next class we are going to create is the object repository class.

10
00:00:48,950 --> 00:00:56,900
So basically object repository is a centralized storage of locators in the form of objects.

11
00:00:56,900 --> 00:01:00,590
So we are going to like make objects.

12
00:01:00,590 --> 00:01:04,700
Of course we are making this project based on object oriented programming.

13
00:01:04,700 --> 00:01:07,880
So definitely we will be creating objects.

14
00:01:07,880 --> 00:01:17,750
But had the objects are going to be acted as locators, which will be locating like several things inside

15
00:01:17,750 --> 00:01:18,650
the form.

16
00:01:18,650 --> 00:01:28,460
So suppose if we are like handling these, okay, so this first name is going to be an index for this

17
00:01:28,460 --> 00:01:29,660
input field.

18
00:01:29,660 --> 00:01:36,220
So like this file storing is in the form of key value pair format.

19
00:01:36,290 --> 00:01:41,260
So that is a key and a value associated to that key.

20
00:01:41,300 --> 00:01:47,990
So yes, let us first create the class inside the CRC folder.

21
00:01:47,990 --> 00:02:00,200
So on hitting new file on the Z, it asks for a name, so going to name it as object repository dot

22
00:02:00,200 --> 00:02:04,370
java and on hitting enter.

23
00:02:04,640 --> 00:02:14,600
We yes, we enter this class object repository and the class is created now inside this object repository

24
00:02:14,600 --> 00:02:26,450
class we are going to handle all the key value pair like locating things and like fixing values to the

25
00:02:26,450 --> 00:02:27,950
keys accordingly.

26
00:02:28,160 --> 00:02:37,250
So the first thing we have to do inside this class is creating global variables.

27
00:02:37,250 --> 00:02:44,360
So what are the things that requires acted as a key?

28
00:02:44,360 --> 00:02:54,110
So the first thing we are going to create is a private list, and this list is going to contain the

29
00:02:54,110 --> 00:02:57,400
list of contacts in the repository set.

30
00:02:57,740 --> 00:03:05,000
So the list name is her P and calling it task contacts.

31
00:03:06,440 --> 00:03:12,080
Okay, so private list contacts is created now.

32
00:03:12,530 --> 00:03:14,570
The next thing will be.

33
00:03:16,900 --> 00:03:20,860
Firstly, we have to extend this class in a manner.

34
00:03:21,130 --> 00:03:25,420
So this object repository is going to be retained as.

35
00:03:27,300 --> 00:03:30,780
De Which is a list, of course.

36
00:03:31,050 --> 00:03:34,670
And inside the D there is index.

37
00:03:36,030 --> 00:03:44,580
We are already like disgusted that we are going to handle key value pairs things inside the repository.

38
00:03:44,940 --> 00:03:50,100
So yes extends number and closing this.

39
00:03:51,140 --> 00:03:58,730
And it is going to implement the repository which we have created.

40
00:03:59,210 --> 00:04:00,830
So here it is.

41
00:04:01,370 --> 00:04:04,900
And it is going to be t comma II.

42
00:04:05,390 --> 00:04:11,150
So basically, you can see it is a hash map kind of structure.

43
00:04:12,020 --> 00:04:19,070
A hash map is basically a map which maps a specific key to a specific value.

44
00:04:19,100 --> 00:04:28,310
So here we are mapping things like a key value are mapped in between these repositories and.

45
00:04:29,410 --> 00:04:38,370
We have extended the class, so we will be continuing with declaring the global variables public.

46
00:04:39,040 --> 00:04:39,400
Okay.

47
00:04:39,420 --> 00:04:41,070
So it is private file.

48
00:04:42,700 --> 00:04:51,960
The file, the file with which is containing the list and information about the contacts.

49
00:04:52,740 --> 00:04:58,470
So input and output stream is going to be used inside this.

50
00:04:58,890 --> 00:05:03,090
We have already discussed about this input output stream.

51
00:05:03,570 --> 00:05:09,170
The application is working on input output operations.

52
00:05:09,180 --> 00:05:15,540
We are inputting the information regarding the contacts and output.

53
00:05:15,690 --> 00:05:22,350
The application is outputting that information in that manner only with the user input set.

54
00:05:22,800 --> 00:05:27,390
So basically input output streaming is performed here.

55
00:05:27,510 --> 00:05:37,230
And in the similar way we have to we have a file input stream in a similar way we will be declaring.

56
00:05:38,780 --> 00:05:39,360
Ah.

57
00:05:39,380 --> 00:05:43,100
Output like object input and.

58
00:05:44,450 --> 00:05:47,810
Object output and file input file output.

59
00:05:48,230 --> 00:05:52,340
So just changing this file to output here.

60
00:05:54,720 --> 00:05:55,050
Okay.

61
00:05:55,050 --> 00:05:56,040
So it is.

62
00:05:56,810 --> 00:06:00,590
Like object, not output.

63
00:06:00,950 --> 00:06:04,700
So file input stream object output stream.

64
00:06:05,000 --> 00:06:08,720
Replacing it here also as object.

65
00:06:09,260 --> 00:06:11,660
So file input stream.

66
00:06:11,660 --> 00:06:14,960
Object in output stream in the similar way.

67
00:06:15,620 --> 00:06:22,130
So file just change into out and head there.

68
00:06:23,840 --> 00:06:26,000
File import file output.

69
00:06:27,220 --> 00:06:29,470
Object input object output.

70
00:06:31,980 --> 00:06:37,380
So there are two types of input output streaming handled here.

71
00:06:38,620 --> 00:06:49,900
Similarly, this file will be dated to our object, so we are done with declaring all the global variables

72
00:06:50,230 --> 00:06:52,390
going to be required inside this.

73
00:06:52,420 --> 00:07:01,480
Now our next concern is to create an object repository object which will like a container, try and

74
00:07:01,480 --> 00:07:04,930
catch block to handle any kind of exceptions.

75
00:07:05,080 --> 00:07:08,680
So let us create that also.

76
00:07:11,390 --> 00:07:11,770
Okay.

77
00:07:11,840 --> 00:07:14,090
So there are.

78
00:07:14,810 --> 00:07:15,160
Yes.

79
00:07:15,200 --> 00:07:18,020
Inside this class we are going to create.

80
00:07:21,250 --> 00:07:30,820
So that areas are showing right now, few of the imports are required in order to remove this error.

81
00:07:30,970 --> 00:07:34,900
We will be importing all the required packages.

82
00:07:35,500 --> 00:07:43,810
First, let us create this constructor, which is going to contain string source as argument.

83
00:07:44,920 --> 00:07:52,450
And after this it will through class not found exception.

84
00:07:52,450 --> 00:08:00,010
So pros class not found headed this exception.

85
00:08:01,300 --> 00:08:10,210
So yes inside this object repository or object or constructor, whatever we call it, we are creating

86
00:08:10,210 --> 00:08:11,620
a drive lock.

87
00:08:11,890 --> 00:08:18,190
And this drive lock is going to like address to the files.

88
00:08:18,980 --> 00:08:23,330
So we created a file in the Global Variables section.

89
00:08:23,600 --> 00:08:29,840
So we are accessing that file inside this constructor.

90
00:08:30,800 --> 00:08:32,870
And the final source, of course.

91
00:08:34,000 --> 00:08:39,820
So inside the file now we have to create new files.

92
00:08:39,820 --> 00:08:53,020
So using file dot, create new file keyword and this will create a new file for every unique contact

93
00:08:53,020 --> 00:08:55,510
inside the repository.

94
00:08:55,750 --> 00:09:05,140
Now for the file input stream and object input stream, we are going to create the similar files again.

95
00:09:06,270 --> 00:09:06,660
Okay.

96
00:09:06,700 --> 00:09:12,700
So here we have created the drive block for the file input stream, object input stream.

97
00:09:12,700 --> 00:09:18,430
And the contacts are like our input in the form of a list.

98
00:09:18,790 --> 00:09:25,110
All the fields of the contacts are contained inside this list.

99
00:09:25,120 --> 00:09:33,730
D Now this object input end of the file input is closing after setting the list.

100
00:09:34,180 --> 00:09:38,380
After the input is complete, the input stream will be closed.

101
00:09:38,500 --> 00:09:39,430
So what?

102
00:09:39,430 --> 00:09:41,770
Actually this file input stream is.

103
00:09:41,770 --> 00:09:49,090
So the file input stream takes the input from the user and make it possible to read the contents of

104
00:09:49,090 --> 00:09:51,810
the file as a stream of bytes.

105
00:09:51,820 --> 00:09:56,070
So basically it is used for serialization.

106
00:09:56,080 --> 00:10:04,180
So we are like inputting things in a form of a serialized manner, the first name, the last name and

107
00:10:04,180 --> 00:10:06,190
everything in a serialized manner.

108
00:10:06,190 --> 00:10:14,920
So this file input stream enables us to take this read that content in the form of a stream of bytes

109
00:10:15,100 --> 00:10:18,070
and what actually this object input stream is.

110
00:10:18,070 --> 00:10:21,870
So it is used to convert that input stream to object.

111
00:10:21,880 --> 00:10:29,410
So yes, we were talking about a stream of bytes, but we have to convert that in the form of objects.

112
00:10:29,410 --> 00:10:36,850
As in Java, the classes only understand objects and methods, not the stream of bytes which the file

113
00:10:36,850 --> 00:10:39,340
was giving to the class.

114
00:10:39,340 --> 00:10:45,670
So basically this file input stream and object input stream goes hand in hand.

115
00:10:45,670 --> 00:10:52,420
The file input stream like read the contents in the form of stream of bytes, and then the object input

116
00:10:52,420 --> 00:10:56,740
stream converts that input stream in the form of object.

117
00:10:56,740 --> 00:11:04,360
So this process of conversion in the input stream to object is called the equalization.

118
00:11:04,660 --> 00:11:11,770
So yes, this things are the like inside concepts of Java code.

119
00:11:11,770 --> 00:11:20,080
Like while you study Java code, then you will get to know about this that what actually this input

120
00:11:20,080 --> 00:11:22,900
stream output stream file an object is.

121
00:11:23,110 --> 00:11:32,140
So in this project we just have to gain a little knowledge which I have make you aware about.

122
00:11:32,140 --> 00:11:40,840
So basically this little use of input streaming output stream is done here for the serialization and

123
00:11:40,840 --> 00:11:42,670
the serialization purpose.

124
00:11:42,670 --> 00:11:51,940
Now after this, we have created this giant cache block successfully in case the class is not found,

125
00:11:52,300 --> 00:11:59,260
so that a cache block will throw input output exception in the form of yes error.

126
00:11:59,260 --> 00:12:00,450
There are two types.

127
00:12:00,460 --> 00:12:00,790
Okay.

128
00:12:00,820 --> 00:12:08,350
The first one will throw exception in the list of the contents only and the form will be closed.

129
00:12:08,350 --> 00:12:10,470
Which yes, yeah.

130
00:12:10,660 --> 00:12:17,470
Object input and file input will be closed and the system will print exception.

131
00:12:17,470 --> 00:12:22,540
So yes, this object repository constructor is done.

132
00:12:22,660 --> 00:12:26,020
Now our next concern is to create.

133
00:12:26,380 --> 00:12:33,640
Okay, so we have to get that index in order to like access the justice in a similar way.

134
00:12:33,640 --> 00:12:41,620
We have this in contact Java class forgetting and setting the first name in the similar way we have

135
00:12:41,620 --> 00:12:46,050
to get that index or we are working with key value pairs.

136
00:12:46,060 --> 00:12:53,710
So we have to get and set the values in order to like access, make it accessible to any other classes

137
00:12:53,710 --> 00:12:54,970
of this project.

138
00:12:55,090 --> 00:13:05,320
So in order to do so, we will be using override function for getting the index and for adding the object.

139
00:13:05,320 --> 00:13:07,660
Like here we have add button.

140
00:13:07,660 --> 00:13:16,330
So in order to add the object to the form, we will be using the override function in order to do so.

141
00:13:17,920 --> 00:13:26,290
So after this object repository constructor, we have used this override keyword and this gets used

142
00:13:26,290 --> 00:13:32,680
to get the index for the yes integer value for the list of contacts.

143
00:13:33,030 --> 00:13:34,260
In the repository.

144
00:13:34,890 --> 00:13:41,610
This get all is to get all the information about that selected contact.

145
00:13:42,060 --> 00:13:51,090
After this, if the user wishes to add a new contact, then this boolean type of function will be executed

146
00:13:51,090 --> 00:13:56,390
which will be returning this dot contact dot add object here.

147
00:13:56,580 --> 00:14:03,440
If we add any new contact then that will be added inside this contact repository from now.

148
00:14:03,450 --> 00:14:07,020
Similarly, for updating and removing the contacts.

149
00:14:07,230 --> 00:14:09,060
Now add the last.

150
00:14:09,210 --> 00:14:19,890
When the user like ends up with updating, removing and everything, then we have to save that contact.

151
00:14:20,100 --> 00:14:25,020
All the information regarding to that specific contact should be same.

152
00:14:25,020 --> 00:14:29,490
We have already like seen this in the introduction part.

153
00:14:29,520 --> 00:14:29,910
Let.

154
00:14:29,910 --> 00:14:38,520
Once we hit that button or update button, the information will be saved to that specific selected contact.

155
00:14:38,520 --> 00:14:44,490
So yes, this is going to be done with the help of this file output stream.

156
00:14:44,490 --> 00:14:49,620
So in the similar way the input stream was working, this output stream will work.

157
00:14:50,160 --> 00:14:57,390
It will show itself for the file output stream, will convert that into the set of bytes, make it readable,

158
00:14:57,390 --> 00:15:04,830
and then the object output stream is going to like convert that stream of bytes in the form of object

159
00:15:04,830 --> 00:15:07,860
to make it readable to the class.

160
00:15:07,890 --> 00:15:14,180
We are creating classes everywhere, so then the classes only listen to the objects, nothing else.

161
00:15:14,190 --> 00:15:19,030
They are so loyal to their objects, they do not listen to any other thing.

162
00:15:19,350 --> 00:15:26,580
So this object output stream will help the stream of bytes to be converted in the form of object.

163
00:15:27,030 --> 00:15:27,530
So yes.

164
00:15:27,540 --> 00:15:30,480
And after that the output stream will be closed.

165
00:15:30,480 --> 00:15:38,970
And in case any kind of exception arises, then this cache block will be executed and return false like

166
00:15:39,360 --> 00:15:43,620
the information will not be saved in the specific context.

167
00:15:43,620 --> 00:15:47,040
So yes, in this way the save function works.

168
00:15:48,180 --> 00:15:51,690
So this is all about the object repository class.

169
00:15:51,720 --> 00:15:59,700
We have covered everything about the keyword key value pair indexing thing, the input output stream

170
00:15:59,700 --> 00:16:03,030
thing, whether it be the file one or the object one.

171
00:16:03,030 --> 00:16:06,540
And yes, this is all about this object repository class.

172
00:16:06,540 --> 00:16:10,770
Now, not only class which is left is the frame class.

173
00:16:10,770 --> 00:16:14,250
So basically we have to feed everything inside of frame.

174
00:16:14,250 --> 00:16:20,700
So in the next class we will be creating a frame and which is going to be like basically the main class

175
00:16:21,510 --> 00:16:24,360
for which will be containing everything about this project.

176
00:16:24,360 --> 00:16:26,580
So we will see that in the next part.
