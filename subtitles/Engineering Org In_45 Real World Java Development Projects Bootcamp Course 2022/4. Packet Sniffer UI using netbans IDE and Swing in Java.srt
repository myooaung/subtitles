1
00:00:02,360 --> 00:00:11,630
If you already seen the previous tutorials, you should understand that that's very primary thing I

2
00:00:11,630 --> 00:00:11,900
did.

3
00:00:12,260 --> 00:00:14,630
Just checking my.

4
00:00:15,300 --> 00:00:17,760
Oh, so like target.

5
00:00:17,850 --> 00:00:21,580
Target is nothing much any or address.

6
00:00:21,600 --> 00:00:27,180
I'm not considering any special advisor, but the source is basically our victim.

7
00:00:27,180 --> 00:00:30,900
Or we can check that that part.

8
00:00:31,050 --> 00:00:36,510
Or we can say a part is like one network or not that part we are checking.

9
00:00:37,110 --> 00:00:42,300
So it's not actually very useful thing at all, I'm telling you.

10
00:00:42,300 --> 00:00:49,110
But we can create a more advanced thing using for loop or you can check your report numbers also if

11
00:00:49,110 --> 00:00:56,490
like go check or there is in ViCAP Wireshark are also available for both checking things.

12
00:00:56,490 --> 00:00:57,750
What is the training?

13
00:00:57,780 --> 00:01:00,440
We are checking the open ports and close also.

14
00:01:00,450 --> 00:01:01,040
Which is close.

15
00:01:01,440 --> 00:01:02,780
Basically connected ports.

16
00:01:02,790 --> 00:01:06,660
If we find there is one open port as we told you, that disconnected part.

17
00:01:06,660 --> 00:01:09,720
So we know that that port is not connected at all.

18
00:01:10,050 --> 00:01:18,930
So such things like that for the source IP, that port is open now what we can do using that or we can

19
00:01:18,930 --> 00:01:20,910
connect to that source.

20
00:01:21,330 --> 00:01:27,930
So for further information gathering anything cybersecurity thing that's very important, checking the

21
00:01:27,930 --> 00:01:32,580
ports and everything according to the networking and everything.

22
00:01:32,670 --> 00:01:38,430
So that part we consider as it collecting port everything, but we are not bothered about that.

23
00:01:38,850 --> 00:01:41,610
So that's very preliminary part we created.

24
00:01:41,610 --> 00:01:44,340
That's not exactly package sniffer.

25
00:01:45,320 --> 00:01:54,290
Work for me should use that package like http or that should use some pcap files directly read that

26
00:01:54,290 --> 00:01:54,830
files.

27
00:01:55,190 --> 00:01:59,300
So for that purpose we need some prior java knowledge.

28
00:01:59,660 --> 00:02:05,120
So now what I'm considering I'm doing one java ui thing here.

29
00:02:05,150 --> 00:02:06,320
Not very.

30
00:02:07,250 --> 00:02:07,690
Difficult.

31
00:02:08,660 --> 00:02:09,380
Very simple.

32
00:02:10,400 --> 00:02:13,370
Which is going to work on a 32 bit system.

33
00:02:13,370 --> 00:02:18,890
It's not going to work for a 64 bit system, I'm telling you, because of some libraries.

34
00:02:18,890 --> 00:02:21,860
But again, it's system independent.

35
00:02:21,860 --> 00:02:26,540
But if you are using Linux system or Windows 32, which system, it will very useful.

36
00:02:26,900 --> 00:02:31,150
Plus, you can change the libraries and you can perform it later.

37
00:02:31,190 --> 00:02:34,280
But let us see how we can perform this.

38
00:02:34,280 --> 00:02:37,460
So in the later part, I'm going to use one my main project here.

39
00:02:37,460 --> 00:02:43,340
I'm going to create one project also, which is very helpful while developing this application.

40
00:02:43,340 --> 00:02:50,300
So we will check that part later and I will tell you why I'm using my one here for dependencies and

41
00:02:50,300 --> 00:02:51,500
editing everything.

42
00:02:51,950 --> 00:02:54,840
So instead of using anger, Gretel.

43
00:02:54,980 --> 00:03:01,040
Gretel, we are not at all using here because we are not performing any application was not a mobile

44
00:03:01,040 --> 00:03:02,090
application we are developing.

45
00:03:02,090 --> 00:03:08,780
So here we are considering only two scenarios and development or my own development, but for the dependencies,

46
00:03:08,780 --> 00:03:11,120
I'm going to use my will in the next project.

47
00:03:11,120 --> 00:03:18,500
So in the first part only I told you this total tutorial is based on three projects.

48
00:03:18,500 --> 00:03:22,610
So first project is we created the port checking and everything.

49
00:03:22,610 --> 00:03:23,780
That's not a project.

50
00:03:23,780 --> 00:03:25,430
That's a simple code I created.

51
00:03:25,460 --> 00:03:28,910
Now we are on the second part how we can create UI and everything.

52
00:03:29,720 --> 00:03:32,420
So let me go with Java classes and methods.

53
00:03:32,420 --> 00:03:40,670
So I am telling you such basic thing here because by developing using Maven, I'm not going to discuss

54
00:03:40,670 --> 00:03:41,290
this part.

55
00:03:41,300 --> 00:03:46,880
Second thing for the Mavin classes and methods are very important, so let us see how we can do this.

56
00:03:46,880 --> 00:03:48,980
So Java class and meters.

57
00:03:48,980 --> 00:03:50,720
So everything is in Java.

58
00:03:50,720 --> 00:03:53,000
It is associated with classes.

59
00:03:53,000 --> 00:03:55,910
Without Java you cannot create a single code offline.

60
00:03:55,910 --> 00:03:58,580
Also not even the Hello World program.

61
00:03:58,580 --> 00:04:01,400
So for that purpose class and methods.

62
00:04:01,400 --> 00:04:07,670
So Java is secure language because we can create classes and methods directly.

63
00:04:08,090 --> 00:04:08,800
Object oriented.

64
00:04:08,810 --> 00:04:13,340
It's partial object oriented, not total object oriented classes, but language.

65
00:04:13,340 --> 00:04:16,490
But we can directly create classes and methods.

66
00:04:16,490 --> 00:04:18,350
So what is class?

67
00:04:18,350 --> 00:04:19,310
In real life?

68
00:04:19,460 --> 00:04:24,410
You can consider Cartesian object and God has some attributes.

69
00:04:24,560 --> 00:04:26,800
So what is the car like?

70
00:04:26,810 --> 00:04:27,980
Car is a class.

71
00:04:28,130 --> 00:04:29,390
Honda is their object.

72
00:04:29,390 --> 00:04:36,350
I'm considering Honda when car brand for an object car has many attributes such as color anyway, but

73
00:04:36,350 --> 00:04:37,580
it has also meters.

74
00:04:37,580 --> 00:04:47,680
Also like for meters there are different things brake, then drive then open road open everything mentioned

75
00:04:47,690 --> 00:04:49,430
also excel methods.

76
00:04:49,430 --> 00:04:55,190
So what we can do, we can create one car, plus we can put some attributes, we can create methods

77
00:04:55,190 --> 00:04:57,440
and we can invoke it using Honda.

78
00:04:57,440 --> 00:05:05,090
So that's a very fundamental thing related to the classes, classes like and then object constructor,

79
00:05:05,090 --> 00:05:13,790
why we required object to invoke classes and invoke methods or use that data types like integers or

80
00:05:13,790 --> 00:05:17,510
anything we have to use while performing any coding language.

81
00:05:17,900 --> 00:05:25,070
So for that purpose we needed these classes also holds some user defined attributes, past values or

82
00:05:25,070 --> 00:05:25,400
inputs.

83
00:05:25,400 --> 00:05:28,520
Anything objects are to use classes.

84
00:05:28,820 --> 00:05:30,130
We need required object.

85
00:05:30,140 --> 00:05:35,000
Without object we cannot invoke or use particular class.

86
00:05:35,750 --> 00:05:39,320
Then let's see what is the class?

87
00:05:39,320 --> 00:05:46,100
Syntax is basically the syntax class name and this and you have to mention some more access specified

88
00:05:46,100 --> 00:05:48,200
which is public, private or anything you can do.

89
00:05:48,200 --> 00:05:50,540
Yeah, I hope you understand this.

90
00:05:50,540 --> 00:05:52,510
So understood this.

91
00:05:52,520 --> 00:05:56,030
So it's a very simple thing related to the Java class.

92
00:05:56,030 --> 00:06:00,680
So let me show you how I'm going to perform here.

93
00:06:00,980 --> 00:06:03,380
So I already coded this part.

94
00:06:04,570 --> 00:06:06,710
Okay, so.

95
00:06:08,480 --> 00:06:15,130
So we are going to use here one library name as GP cap, remember GP cap.

96
00:06:16,070 --> 00:06:23,810
Another thing, we are going to use Java X for swimming and everything and Java is one most common thing

97
00:06:23,810 --> 00:06:24,320
here.

98
00:06:24,830 --> 00:06:27,660
So let us see what is the GP cap?

99
00:06:27,680 --> 00:06:32,150
First, it's working for UDP, ICMP and different packets.

100
00:06:32,300 --> 00:06:38,660
So what I created, I created this implement packet receiver which is basically GP cap only.

101
00:06:39,110 --> 00:06:42,200
Then it's asking for it should be public.

102
00:06:42,200 --> 00:06:43,730
Remember, it should be public.

103
00:06:43,980 --> 00:06:49,710
But if you create it here private, then it acts as a private network thing.

104
00:06:49,730 --> 00:06:53,180
So it will check for PCB packets in private network only.

105
00:06:53,360 --> 00:07:01,850
So remember, consider TCP packets TCP, UDP and ICMP ICMP for the incoming message mail mailing part.

106
00:07:02,540 --> 00:07:07,440
So if you want to put it more, I'm considering only three scenarios TCP, UDP, ICMP.

107
00:07:07,460 --> 00:07:09,800
You can put different, different things here.

108
00:07:10,460 --> 00:07:12,590
Let me show you how we can perform here.

109
00:07:13,040 --> 00:07:16,400
So let me put public static.

110
00:07:18,420 --> 00:07:19,060
GDP.

111
00:07:22,560 --> 00:07:24,150
Back it goes.

112
00:07:24,720 --> 00:07:27,690
So wait a minute.

113
00:07:27,690 --> 00:07:37,740
For GDB, you need to create a class or you need to mention that part, so you need to create this class.

114
00:07:37,890 --> 00:07:41,410
So I'm not at all mentioning this, so let me remove this.

115
00:07:41,430 --> 00:07:49,110
So I am not considering HTP because it's very common and you will get full http only because once you

116
00:07:49,110 --> 00:07:54,030
connect it to the net or you are receiving HTTP packets continuously or HTTP is packets continuous.

117
00:07:54,030 --> 00:07:56,340
So I'm not considering here that part.

118
00:07:58,280 --> 00:08:00,790
Then public setting with.

119
00:08:00,800 --> 00:08:03,890
I created one list I released for this.

120
00:08:04,370 --> 00:08:06,500
Then I created one method.

121
00:08:06,590 --> 00:08:09,170
This you package with constructor.

122
00:08:09,350 --> 00:08:15,470
This respect public void and width instance of PCB package.

123
00:08:15,990 --> 00:08:23,690
So the very important part you have to mention this part in this if like I'm visiting TV packet.

124
00:08:24,890 --> 00:08:28,400
Or ad number sne for number.

125
00:08:28,910 --> 00:08:39,710
PCP linked TBC source TCP and add that as a TCP so it will add an object as a row property row in that

126
00:08:39,710 --> 00:08:43,010
at least this ArrayList released.

127
00:08:43,800 --> 00:08:47,970
And then it will add this sniffer with DCP length.

128
00:08:47,990 --> 00:08:55,750
This now let me put all the things here sniffer, which is basically our sniffing thing.

129
00:08:55,760 --> 00:08:57,710
I will tell you, what is this number?

130
00:08:57,740 --> 00:08:59,480
It means which number of packet?

131
00:08:59,870 --> 00:09:04,760
First, second, third, fourth, anything TCP length message, message of that part.

132
00:09:05,150 --> 00:09:16,010
If this is also IP, TCP just like destination IP with TCP again TCP source TCP port like what is a

133
00:09:16,010 --> 00:09:22,250
source port and distant destination port AC is just acknowledgement by TCP header.

134
00:09:22,250 --> 00:09:27,890
There is a protocol in networking, but let me tell you that TCP consider of one header.

135
00:09:27,950 --> 00:09:33,710
So header has some few fields, so it has also acknowledgement field.

136
00:09:33,860 --> 00:09:41,360
So for that purpose to check a TCP exec number, which is basically acknowledgment number data.

137
00:09:41,600 --> 00:09:43,670
Now, the data is very crucial.

138
00:09:45,240 --> 00:09:47,700
I am considering printing data directly.

139
00:09:47,970 --> 00:09:55,320
So while putting on this you can perform like I'm sending packets like username my username a, b,

140
00:09:55,320 --> 00:09:58,260
c, so packets will divide into the three part.

141
00:09:58,260 --> 00:10:04,980
First part is sending to the A, second part is B, second third part sent C so packet one has having

142
00:10:04,980 --> 00:10:11,490
data a, packet two having read a, B and packet three having read a C so that my data in ASCII codes

143
00:10:11,610 --> 00:10:18,660
or another thing also that my date data converted into ASCII code and ASCII code is converted into binary.

144
00:10:18,660 --> 00:10:26,820
So that's the TCP data not I'm going what data holds the actual data of that TCP TCP sequence.

145
00:10:26,820 --> 00:10:35,850
What is the sequence of that offset and header part is that all the heading parts modal after this default

146
00:10:35,880 --> 00:10:38,550
table mode you need to create it is.

147
00:10:40,360 --> 00:10:47,890
Swing the moon, which is going to add here sniffer level with that model and model door gate pro with

148
00:10:47,890 --> 00:10:53,350
sniffer number plus plus which is basically if that package, the sniffer will go further.

149
00:10:53,350 --> 00:11:00,820
Like when a number is given here like one, then it will print to do, it will appear in that or it

150
00:11:00,820 --> 00:11:03,040
will increase increment operator.

151
00:11:03,040 --> 00:11:03,760
I use the.

152
00:11:05,340 --> 00:11:10,930
If I found the UDP packet then again same thing I'm doing here i SNP packet form.

153
00:11:11,040 --> 00:11:13,800
I'm doing that step sensitive steps here.

154
00:11:15,050 --> 00:11:17,750
So that's done here.

155
00:11:18,260 --> 00:11:19,480
Packet receiver part.

156
00:11:19,910 --> 00:11:23,810
So now let me show you the.

157
00:11:25,150 --> 00:11:26,890
These are the Java parts.

158
00:11:26,890 --> 00:11:28,510
Not these parts.

159
00:11:29,700 --> 00:11:31,040
These are the Java part.

160
00:11:31,060 --> 00:11:32,500
That's all the back end.

161
00:11:32,500 --> 00:11:35,560
And with some utilities part I'm using here.

162
00:11:40,000 --> 00:11:43,770
This part comes, which is swing utilities, trade.

163
00:11:44,230 --> 00:11:48,000
So why I required this part, I will tell you.

164
00:11:48,010 --> 00:11:49,950
So that's all the JP cap.

165
00:11:50,170 --> 00:11:53,920
So I created there all the back end end switching part.

166
00:11:53,930 --> 00:11:57,940
But someone needs to run it again and again and again.

167
00:11:58,120 --> 00:12:01,180
For that purpose, I created this trade class.

168
00:12:01,390 --> 00:12:06,880
So these in the trade wars and everything looking to get value set value finished methods, interrupt

169
00:12:06,880 --> 00:12:11,220
methods I'm adding here and all the things we put enable interface I'm invoking.

170
00:12:11,860 --> 00:12:14,290
So now this is the sniffer.

171
00:12:14,650 --> 00:12:22,090
So this is the form method which all you can say here, but it has captured button stop buttons to button

172
00:12:22,090 --> 00:12:29,080
filter option everything with JP capacitor capacitor is basically for the capturing and everything in

173
00:12:29,080 --> 00:12:30,640
the cap folder.

174
00:12:31,390 --> 00:12:33,670
You may found it with this.

175
00:12:33,670 --> 00:12:39,330
So my recommendation is you can design here that you are directly.

176
00:12:39,340 --> 00:12:47,560
Once you choose this in the Higgs you you will find the Higgs X view capturing the for capture.

177
00:12:47,590 --> 00:12:51,370
Now the list of interfaces I will tell you what is the list of interfaces?

178
00:12:51,370 --> 00:12:56,530
So I created this for the Linux purposes, not for proper Windows.

179
00:12:56,530 --> 00:13:02,390
Windows having only one network interface, but while you are looking at a linux kernel you may find

180
00:13:02,390 --> 00:13:03,760
there are VLAN.

181
00:13:04,630 --> 00:13:11,950
Not due to the Internet, not windows are also windows are also having some interfaces, but that's

182
00:13:11,950 --> 00:13:13,110
a system dependent service.

183
00:13:13,150 --> 00:13:16,010
So for that purpose, I created this capture button.

184
00:13:16,030 --> 00:13:22,630
As you can see, this capture button, this stop, stop button, save button for the saving list of

185
00:13:22,630 --> 00:13:23,590
interfaces.

186
00:13:23,980 --> 00:13:28,150
This filter button or filter options you can choose filter here.

187
00:13:28,150 --> 00:13:30,670
I'm going to open that list again and again.

188
00:13:31,240 --> 00:13:33,280
This is packaging for one and this.

189
00:13:34,180 --> 00:13:41,560
So let me go to the source again so you can create design that part directly here, but we need to add

190
00:13:41,560 --> 00:13:43,870
some GPC themes also.

191
00:13:45,730 --> 00:13:52,810
So what is the GP captain submitting here is just basically this cap trade part, index part, I added.

192
00:13:54,090 --> 00:13:54,900
And.

193
00:13:56,490 --> 00:14:00,510
This is the interface window, so I need the window here.

194
00:14:00,870 --> 00:14:02,880
So this is the inside.

195
00:14:02,880 --> 00:14:04,920
I need this part.

196
00:14:04,920 --> 00:14:13,020
But for main purposes, I need this window so I'm not accessing this part.

197
00:14:13,030 --> 00:14:15,300
So now we are done with this.

198
00:14:15,420 --> 00:14:17,970
So let me press here.

199
00:14:18,390 --> 00:14:18,770
Clean.

200
00:14:18,780 --> 00:14:19,350
And we.

201
00:14:22,660 --> 00:14:24,280
If you look at the notion.

202
00:14:25,550 --> 00:14:26,180
What did you do?

203
00:14:27,320 --> 00:14:28,110
How could you do?

204
00:14:29,520 --> 00:14:30,210
So.

205
00:14:31,690 --> 00:14:34,990
Let us check whether this is cleaning or building anything.

206
00:14:34,990 --> 00:14:36,550
So it's clear.

207
00:14:39,260 --> 00:14:40,670
Simple glasses.

208
00:14:40,670 --> 00:14:42,950
And again, this is very basic.

209
00:14:43,280 --> 00:14:44,600
If the.

210
00:14:44,780 --> 00:14:51,590
After this, what I'm going to perform I'm going to create one my venting which is very useful, very

211
00:14:52,760 --> 00:14:53,640
powerful tool.

212
00:14:53,660 --> 00:14:54,930
I'm going to create the.

213
00:14:56,520 --> 00:14:57,960
Then we run.

214
00:15:01,820 --> 00:15:03,330
So it's not only.

215
00:15:05,980 --> 00:15:06,880
Well, you can take.

216
00:15:06,880 --> 00:15:10,990
This is my budget, but it's more than anything.

217
00:15:12,000 --> 00:15:14,370
So this is my culture part and everything.

218
00:15:14,370 --> 00:15:19,320
So let me tell you why this is not running, because it's 32 bit system.

219
00:15:19,680 --> 00:15:21,500
I'm not performing on this.

220
00:15:21,510 --> 00:15:24,720
So you can check here if I click here.

221
00:15:24,750 --> 00:15:28,410
List of interfaces you may found this error.

222
00:15:30,360 --> 00:15:32,900
JP cannot find dependent lefties.

223
00:15:33,200 --> 00:15:33,560
Why?

224
00:15:33,560 --> 00:15:42,710
It's not loading this part, it's an A2 method and you may find that it's a built in class loader is

225
00:15:42,710 --> 00:15:45,450
built in with 64 bit architecture.

226
00:15:45,470 --> 00:15:47,200
Virtual machine architecture.

227
00:15:47,210 --> 00:15:48,110
Java virtual machine.

228
00:15:48,110 --> 00:15:48,920
Not ready to build.

229
00:15:49,190 --> 00:15:55,970
If you are interested in 32 bit and running on the windows, you need to install JDK 1.8 32 weeks,

230
00:15:55,970 --> 00:15:57,860
JVM not 1.8.

231
00:15:58,040 --> 00:16:04,820
So for that purpose you needed this, but for the other purposes, you can consider this as an ideal

232
00:16:04,820 --> 00:16:05,270
UI.

233
00:16:06,260 --> 00:16:08,930
So I hope you understand this.

234
00:16:08,930 --> 00:16:15,680
In the next video or next tutorial, I'm going to deal with some venting and how we are going to use

235
00:16:15,680 --> 00:16:16,100
it.

236
00:16:16,340 --> 00:16:17,540
That part I will take.

237
00:16:17,870 --> 00:16:23,420
So if you are using 32, build any architecture.

238
00:16:23,600 --> 00:16:25,100
This is very helpful code.

239
00:16:25,340 --> 00:16:27,110
You will receive all the packets.

240
00:16:27,710 --> 00:16:36,380
And rather than using Wireshark and you're using virtual machine is very good idea why virtual machine

241
00:16:36,380 --> 00:16:39,450
is not existing system while the networking.

242
00:16:39,650 --> 00:16:46,520
So you may create one more threads on the existing system then virtual machine.

243
00:16:47,300 --> 00:16:48,200
Hope we understand.

244
00:16:48,230 --> 00:16:48,860
Thank you.
