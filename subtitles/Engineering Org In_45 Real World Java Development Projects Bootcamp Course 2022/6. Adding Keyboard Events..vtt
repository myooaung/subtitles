WEBVTT
1
00:00:01.390 --> 00:00:07.120
Now such that we have created everything about the app and the timer.

2
00:00:07.150 --> 00:00:13.430
Now we are going to see what is going to be inside the game of our window.

3
00:00:13.450 --> 00:00:21.040
So we have created a string message for the game of our thing and the font style of the game over text

4
00:00:21.040 --> 00:00:27.790
is going to be like this sans serif bold and the font size is going to be 14.

5
00:00:28.120 --> 00:00:34.270
Now the font matrix is going to be a special font like this.

6
00:00:34.750 --> 00:00:39.520
This is a bold style text showing game over text.

7
00:00:40.000 --> 00:00:47.110
Now the text color is going to be white and we have to set up font for that game over text.

8
00:00:47.590 --> 00:00:55.000
We have to draw a string which shows that the window is going to be the full size of the page.

9
00:00:55.210 --> 00:01:00.140
Like the text is going to be displayed in the middle of the page.

10
00:01:00.160 --> 00:01:08.710
And this is done with the help of this thing, 300 minus matrix string with like the width half and

11
00:01:08.710 --> 00:01:09.970
the height is halved.

12
00:01:10.180 --> 00:01:16.650
So half of the width and half of the height, this is going to be in the middle of the page.

13
00:01:16.660 --> 00:01:20.410
So we have successfully created the game over window.

14
00:01:20.440 --> 00:01:25.270
Now let us switch to check the conditions for the collision.

15
00:01:25.420 --> 00:01:32.170
Like the collisions are two way, as we already discussed, the body of the snake itself and the walls

16
00:01:32.170 --> 00:01:33.030
of the frame.

17
00:01:33.040 --> 00:01:36.460
So let me first create a function.

18
00:01:36.520 --> 00:01:43.300
Public void check collision for checking the collision path.

19
00:01:43.450 --> 00:01:54.100
So yes, we have created it the brackets and inside this we have to use a for loop for checking that

20
00:01:54.100 --> 00:02:03.640
whether the coordinates of the wall and the snake are same or the snakes .1. and the other dot has the

21
00:02:03.640 --> 00:02:12.400
same coordinates, then this thing going to happen that the game will over and a pop up will appear

22
00:02:12.400 --> 00:02:13.870
that the game is over.

23
00:02:13.870 --> 00:02:22.870
Like the popup says you are done now you can continue, which is very disheartening, I think.

24
00:02:23.970 --> 00:02:25.750
We know what we want our games to be.

25
00:02:27.070 --> 00:02:32.980
We want to play it multiple times without getting the snake die.

26
00:02:33.640 --> 00:02:40.150
So inside the if I am going to check if Z is greater than four.

27
00:02:41.030 --> 00:02:55.610
An ex of the snake and the obstacle is same, so double is equal to and then x z.

28
00:02:56.630 --> 00:03:01.790
The Z is for the snake and the O is for the snake.

29
00:03:01.790 --> 00:03:03.950
And that is for the object.

30
00:03:04.550 --> 00:03:10.520
So if Z is greater than four and and operator.

31
00:03:11.660 --> 00:03:17.000
An X zero is equal to or is equal to doubles x z.

32
00:03:17.450 --> 00:03:29.330
And similarly for the y coordinate and operator, y zero is equal double equals.

33
00:03:32.670 --> 00:03:34.620
Y Z.

34
00:03:35.490 --> 00:03:36.300
Yes.

35
00:03:36.810 --> 00:03:42.870
So this is like something the bracket closed.

36
00:03:43.870 --> 00:03:46.720
And what this is will eat.

37
00:03:46.750 --> 00:03:56.290
So the endgame, like I have already said, that the endgame is the note denoting the game is on.

38
00:03:56.530 --> 00:04:04.020
So if I am setting the game on to false, obviously the game is going to be awkward now.

39
00:04:04.600 --> 00:04:09.100
So this is the first possibility of checking the collision.

40
00:04:09.190 --> 00:04:14.650
Like if the snake hits itself, then the game is going to be over.

41
00:04:15.010 --> 00:04:22.570
The second possibility is that the snake hits one of the four walls and again the game will be over.

42
00:04:22.600 --> 00:04:30.610
So if y is like if the y coordinate of snake becomes greater than or is equal to 300.

43
00:04:30.760 --> 00:04:34.630
Like this is 300 and this is zero zero.

44
00:04:34.660 --> 00:04:36.580
This is zero 300.

45
00:04:36.610 --> 00:04:38.650
This is 300, comma zero.

46
00:04:38.650 --> 00:04:40.420
And this is 300, 300.

47
00:04:40.540 --> 00:04:42.790
So the coordinates are like this.

48
00:04:43.060 --> 00:04:46.780
So if the Y coordinate becomes greater than 300.

49
00:04:46.930 --> 00:04:52.840
Similarly, if the X coordinate becomes greater than 300.

50
00:04:53.140 --> 00:04:58.840
And if the Y coordinate becomes less than zero.

51
00:04:59.500 --> 00:05:06.400
Like there are four walls, one in the origin side and one in the 300 side.

52
00:05:06.970 --> 00:05:12.820
And also the X coordinate becomes less than.

53
00:05:14.180 --> 00:05:15.380
ZITO Yes.

54
00:05:16.220 --> 00:05:18.980
So all the four walls are set to this.

55
00:05:19.370 --> 00:05:26.780
And these are the conditions which will set in game two forth, like the game is on two falls and the

56
00:05:26.780 --> 00:05:27.740
game will be over.

57
00:05:28.310 --> 00:05:31.340
If not Endgame, then the timer is stopped.

58
00:05:31.370 --> 00:05:35.360
So if the game is over, then the timer will stop automatically.

59
00:05:35.360 --> 00:05:39.950
Like the snake will stop moving and the game over window will be pop up.

60
00:05:40.550 --> 00:05:49.190
So yes, there are five cases total, six cases covered inside this collision, like for the snake hitting

61
00:05:49.190 --> 00:05:52.040
itself, hitting any of the four walls.

62
00:05:52.040 --> 00:05:59.270
And if these five cases upwards, then the end game will become false and the timer will stop automatically.

63
00:05:59.720 --> 00:06:02.120
So we have covered this part also.

64
00:06:02.150 --> 00:06:04.250
Now move to the next part.

65
00:06:04.910 --> 00:06:12.500
Now coming to the prototype, like the mainframe, we have designed what we have covered till now.

66
00:06:12.980 --> 00:06:20.150
So we have covered seven things like we have created the project, added the image, created the frame

67
00:06:20.150 --> 00:06:24.140
place, the images inside, placed the images one behind the other.

68
00:06:24.140 --> 00:06:26.210
We have located the apple.

69
00:06:26.360 --> 00:06:32.090
We have also created a function for collisions, checking the collisions.

70
00:06:32.090 --> 00:06:34.700
So these two are also completed.

71
00:06:35.060 --> 00:06:36.760
So now what's left?

72
00:06:36.770 --> 00:06:40.160
So implementation of the keyboard events.

73
00:06:40.160 --> 00:06:43.490
So now we will jump to this directly.

74
00:06:44.270 --> 00:06:51.700
Now, in order to create the keyboard functionalities which will make the snake move, we have to create

75
00:06:51.710 --> 00:06:56.510
a class for that.

76
00:06:57.170 --> 00:07:11.150
The adapter is the name of the class and we will extend this to a component of the like swing which

77
00:07:11.150 --> 00:07:13.340
is called key adapter.

78
00:07:14.390 --> 00:07:15.050
And.

79
00:07:16.850 --> 00:07:21.860
So yes we have extends extends.

80
00:07:21.920 --> 00:07:29.660
Key adapter inside this we will create a public void.

81
00:07:29.660 --> 00:07:30.800
Depressed.

82
00:07:31.460 --> 00:07:35.510
Public void depressed.

83
00:07:37.320 --> 00:07:48.880
Which will recognize that the key is blessed breast like and in creating an event as the argument which

84
00:07:48.880 --> 00:07:49.660
says.

85
00:07:50.810 --> 00:07:53.600
The event is EA Sports.

86
00:07:54.380 --> 00:08:07.700
And inside this event we are going to create integer key which like calls the method get key.

87
00:08:09.240 --> 00:08:09.900
Code.

88
00:08:10.800 --> 00:08:14.220
So the code of the key which is being pressed.

89
00:08:15.240 --> 00:08:18.990
Now so that we have created this function.

90
00:08:19.320 --> 00:08:23.940
Now we will check using if that.

91
00:08:25.850 --> 00:08:27.620
The variable key.

92
00:08:28.680 --> 00:08:30.720
Is a key event.

93
00:08:32.760 --> 00:08:35.370
And the key event says.

94
00:08:36.760 --> 00:08:41.850
Like the key, which is pressed is the left key.

95
00:08:42.180 --> 00:08:47.910
So we write it as we left, underscore left.

96
00:08:49.210 --> 00:09:01.600
And this check if the key presses the left side key and not equal to the right direction.

97
00:09:03.190 --> 00:09:05.320
Right direction.

98
00:09:06.530 --> 00:09:12.860
Off the frame after completing this.

99
00:09:14.110 --> 00:09:16.480
So we have an extra bracket.

100
00:09:16.480 --> 00:09:26.470
And so this F is going to check that if we have pressed the left and not the right direction.

101
00:09:26.470 --> 00:09:31.240
So it will set the left direction to true.

102
00:09:32.760 --> 00:09:39.120
So let us first call these variables as the global variables above here.

103
00:09:40.170 --> 00:09:50.940
So below this I am going to create a private boolean for less direction set to false similarly for the

104
00:09:50.940 --> 00:09:59.310
right direction again setting it to false and for the up and down as well.

105
00:10:00.210 --> 00:10:02.610
So we are done with three.

106
00:10:02.940 --> 00:10:07.230
One more to go and that is down direction.

107
00:10:07.590 --> 00:10:10.710
Initially everything is set to false.

108
00:10:11.760 --> 00:10:15.090
So we have created all the global variables.

109
00:10:15.690 --> 00:10:19.110
Also, we have one more boolean variable.

110
00:10:19.920 --> 00:10:21.360
We have to face it.

111
00:10:22.080 --> 00:10:25.650
The code will look nice so if end game is true.

112
00:10:25.740 --> 00:10:29.070
So all the boolean variables are at one place.

113
00:10:29.580 --> 00:10:33.000
Now moving towards the keyboard functionality.

114
00:10:33.780 --> 00:10:41.190
Now, after checking the if condition for the left depressed, we have to set the left direction as

115
00:10:41.190 --> 00:10:44.970
true and the snake will move leftward.

116
00:10:44.970 --> 00:10:48.720
And the other two as follows.

117
00:10:49.410 --> 00:10:51.350
Now, up and down as false.

118
00:10:51.360 --> 00:10:59.370
We have already checked it for the right key above here, not right direction, which automatically

119
00:10:59.370 --> 00:11:02.130
denotes that the right direction is false.

120
00:11:02.160 --> 00:11:05.910
We do not have to bother writing it here.

121
00:11:06.090 --> 00:11:08.430
We have already set it to false.

122
00:11:08.940 --> 00:11:18.360
Now if key event for left is set, now we have to copy and paste it four more times for all the four

123
00:11:18.360 --> 00:11:21.720
keyboard keys which we are going to use.

124
00:11:22.680 --> 00:11:35.180
So pasting it four more times or the right left hand up and down, right head, right, left.

125
00:11:35.190 --> 00:11:40.350
Similarly, like we have read, wrote it for the left key.

126
00:11:40.950 --> 00:11:43.920
It is caps lock right.

127
00:11:45.590 --> 00:11:47.430
And for up.

128
00:11:49.890 --> 00:11:52.680
Moving towards the up key.

129
00:11:53.880 --> 00:12:00.810
And we have to set not further down detection.

130
00:12:02.380 --> 00:12:06.790
We will change this in sometime after completing this path.

131
00:12:07.510 --> 00:12:13.000
So yes, we are done with all the four keys and her writing up.

132
00:12:15.310 --> 00:12:17.020
So this is for.

133
00:12:17.020 --> 00:12:17.420
Right.

134
00:12:17.440 --> 00:12:23.800
So we have to set the right direction as to true we believe this.

135
00:12:25.730 --> 00:12:26.090
Okay.

136
00:12:26.090 --> 00:12:30.530
So here we have up, and here we have down.

137
00:12:31.930 --> 00:12:37.330
After which we have to pasted this place.

138
00:12:38.470 --> 00:12:45.610
So where we set the right direction as to now head the direction and down direction.

139
00:12:45.610 --> 00:12:47.950
So up is true and down is false.

140
00:12:48.490 --> 00:13:00.340
So we have to set it up to true and we have to paste right, left and right direction is false.

141
00:13:00.340 --> 00:13:03.580
So just changing it this way.

142
00:13:04.490 --> 00:13:08.730
I'm pasting the whole thing here.

143
00:13:10.210 --> 00:13:10.810
Just.

144
00:13:10.810 --> 00:13:14.440
We have to change this width down.

145
00:13:14.620 --> 00:13:15.670
Yes, down.

146
00:13:17.800 --> 00:13:25.650
So we are done with all the keyboard functionalities, like we have functions for all the four keys

147
00:13:25.660 --> 00:13:33.280
if we are going to press any of the four, that is action which will be listen after the press.

148
00:13:34.180 --> 00:13:44.740
So by far we have covered every section of the main game section aspect of the snake itself.

149
00:13:44.980 --> 00:13:53.260
So now we are going to cover that how the move function will work, like how the snake will move in

150
00:13:53.260 --> 00:13:54.340
the next part.

151
00:13:54.340 --> 00:14:01.810
And we will see that how the images are hiding behind the tail of the snake after editing the apple

152
00:14:01.810 --> 00:14:05.650
and the repeated repetition of this process.

153
00:14:06.100 --> 00:14:10.620
So yes, like all the functions are covered.

154
00:14:10.630 --> 00:14:13.810
Now, in the next part we are going to create a move function.

155
00:14:14.200 --> 00:14:15.490
See you in the next part.
