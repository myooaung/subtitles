WEBVTT
1
00:00:01.150 --> 00:00:01.320
Okay.

2
00:00:01.500 --> 00:00:05.050
So we have to define a method called a new game.

3
00:00:05.670 --> 00:00:08.760
It is required to create a new instance of the game.

4
00:00:08.850 --> 00:00:15.660
So to do this, we reset the playing field and shuffle it and continue until the playing position is

5
00:00:15.660 --> 00:00:16.800
resolvable.

6
00:00:17.040 --> 00:00:25.500
So what we have to do, we will write Private Void after this and we will define our method.

7
00:00:26.340 --> 00:00:33.420
I read void newline and this is the new bracket open.

8
00:00:33.720 --> 00:00:37.770
And firstly take the do loop, do y loop.

9
00:00:39.450 --> 00:00:41.790
So here we will reset the field.

10
00:00:44.530 --> 00:00:51.310
Are you saying the freedom here, this will really set in the initial position?

11
00:00:55.930 --> 00:00:56.290
No.

12
00:00:56.680 --> 00:01:00.040
And another thing which we have to do is the shuffling also.

13
00:01:00.370 --> 00:01:02.770
So here the shuffle matter.

14
00:01:04.960 --> 00:01:07.090
After the switch we need.

15
00:01:09.350 --> 00:01:21.170
What we need is we have to get out of this loop and here we will try while and under this we will create

16
00:01:21.170 --> 00:01:28.910
the condition is not another matter by the name is solvable.

17
00:01:30.510 --> 00:01:38.750
Now under this wild loop, what we will do, go there and start.

18
00:01:40.000 --> 00:01:40.320
Okay.

19
00:01:40.820 --> 00:01:43.700
So it will go with the solvable matter.

20
00:01:43.700 --> 00:01:47.210
So it will make it until grit will be solved.

21
00:01:47.330 --> 00:01:49.490
So make it until.

22
00:01:51.770 --> 00:01:52.950
We solvable.

23
00:01:53.420 --> 00:02:05.390
So what we will do here after this and after this fine loop over game over variable set to the false.

24
00:02:07.370 --> 00:02:12.750
So firstly, I have to read this reboot.

25
00:02:12.770 --> 00:02:13.100
Okay.

26
00:02:13.490 --> 00:02:18.680
Firstly, we have to do the for you take here create a method.

27
00:02:31.910 --> 00:02:32.190
Okay.

28
00:02:32.990 --> 00:02:34.910
So here I will do.

29
00:02:35.900 --> 00:02:39.070
After this, we will start with the research method.

30
00:02:39.080 --> 00:02:44.060
So here I will write private void reset.

31
00:02:46.160 --> 00:02:52.850
Reset parentheses curly bracket open and here I will start with my condition.

32
00:02:53.060 --> 00:03:05.570
Firstly, data for loop take int I set it to zero and after this take the I is less than two the tiles

33
00:03:06.170 --> 00:03:07.100
length

34
00:03:09.170 --> 00:03:12.590
increment the post increment of the I.

35
00:03:13.610 --> 00:03:27.920
And what we will do, we will take the tiles with the variable, i.e. initialize the plus one and we

36
00:03:27.920 --> 00:03:36.160
the reminder to the tile stored length and on what we will do after this follow.

37
00:03:36.170 --> 00:03:50.000
We set blanks at the last so we need our blank position variable initialize to lat tiles dot length.

38
00:03:52.010 --> 00:03:53.320
So okay.

39
00:03:53.450 --> 00:03:55.700
So we need the minus one here.

40
00:03:56.550 --> 00:04:02.530
Then this man said after this, what we will write.

41
00:04:02.580 --> 00:04:02.970
Okay.

42
00:04:03.090 --> 00:04:05.100
So this we said.

43
00:04:06.170 --> 00:04:09.530
Blank cell at last.

44
00:04:10.750 --> 00:04:12.500
Okay, so this is done.

45
00:04:12.530 --> 00:04:16.940
Now we need to go with the shuffling method also.

46
00:04:16.940 --> 00:04:25.790
So here I will start with the private void and shuffle bracket open.

47
00:04:25.790 --> 00:04:32.350
And here we will start with we don't include a blank tile in the shuffle.

48
00:04:32.360 --> 00:04:34.670
So leaving the solve position.

49
00:04:34.670 --> 00:04:41.840
So what we will do, we will take an initialize to the NBA tiles.

50
00:04:43.490 --> 00:04:50.450
Now take a line loop here and right while an is greater than one.

51
00:04:50.930 --> 00:04:52.220
What do we have to do?

52
00:04:52.340 --> 00:04:57.200
We will take it out and set it to the random.

53
00:04:59.270 --> 00:05:00.350
Random.

54
00:05:01.350 --> 00:05:02.700
Not next.

55
00:05:04.860 --> 00:05:11.220
I mean the end minus minus and import this random.

56
00:05:13.410 --> 00:05:13.910
Hmm.

57
00:05:14.310 --> 00:05:15.240
Okay.

58
00:05:18.240 --> 00:05:18.510
No.

59
00:05:18.630 --> 00:05:19.060
No.

60
00:05:28.490 --> 00:05:31.160
We need the random one here.

61
00:05:33.000 --> 00:05:33.710
Okay.

62
00:05:33.710 --> 00:05:35.230
Random access?

63
00:05:35.240 --> 00:05:37.250
No, only random.

64
00:05:39.580 --> 00:05:39.940
Okay.

65
00:05:39.940 --> 00:05:43.480
We have to include this no matter.

66
00:05:46.410 --> 00:05:53.700
Eventually we will import this one and what we have to write here after this.

67
00:05:55.050 --> 00:05:55.350
Okay.

68
00:05:55.350 --> 00:05:58.440
So the random we have to do random.

69
00:05:59.130 --> 00:06:08.520
So now we have to take another variable by the name in DMP and initialize to the times our position

70
00:06:08.520 --> 00:06:25.320
here and now our position times array and initialize to the here is an n here now with the tiles and

71
00:06:26.130 --> 00:06:28.770
initialize it to the DMP.

72
00:06:29.310 --> 00:06:33.000
So this will be the shuffling method done.

73
00:06:33.300 --> 00:06:39.060
Now we have we only need the half permutation of the puzzle which is solvable.

74
00:06:39.150 --> 00:06:45.690
So whenever tile is preceded by a tile with higher value, it counts as an inversion.

75
00:06:45.690 --> 00:06:52.290
So in our case, with the blank tile in the solid position, the number of inversions must be even for

76
00:06:52.290 --> 00:06:54.030
the puzzle to be solvable.

77
00:06:54.300 --> 00:07:02.220
So here I will do the one thing we will take a matter which we have created, which will have created

78
00:07:02.220 --> 00:07:02.760
here.

79
00:07:02.760 --> 00:07:04.260
This is a solvable.

80
00:07:04.710 --> 00:07:08.460
So we need that matter is solvable.

81
00:07:09.880 --> 00:07:21.410
So people here take the parenthesis, open bracket, and now under this we will create our variable

82
00:07:21.420 --> 00:07:23.290
by volume can count.

83
00:07:23.290 --> 00:07:27.400
Inversions started with zero.

84
00:07:29.680 --> 00:07:30.970
Here we need.

85
00:07:32.050 --> 00:07:32.890
Looking.

86
00:07:35.090 --> 00:07:35.510
Yeah.

87
00:07:36.910 --> 00:07:37.750
Hmm.

88
00:07:37.840 --> 00:07:38.250
Okay.

89
00:07:38.260 --> 00:07:41.110
So we need for loop first.

90
00:07:41.270 --> 00:07:52.180
And what we will do, initialize it to zero and take our which is less than two and tiles and then I

91
00:07:52.180 --> 00:07:54.460
plus plus I'm done.

92
00:07:54.820 --> 00:08:01.990
And after this we need another four loop here which will take the integer, set it to the zero here

93
00:08:02.620 --> 00:08:12.280
and the g will be less than with the I and the G with the post increment here curly bracket open.

94
00:08:12.550 --> 00:08:24.640
And now we have to take the condition if tiles -- is greater than the tiles and it.

95
00:08:26.220 --> 00:08:26.790
Okay.

96
00:08:26.850 --> 00:08:33.810
So here, what we will do, we will increment the count in one variable plus plus.

97
00:08:34.620 --> 00:08:35.340
So.

98
00:08:36.030 --> 00:08:40.650
Okay, so this is done and we have to return our.

99
00:08:41.790 --> 00:08:43.260
Okay, so we will.

100
00:08:43.260 --> 00:08:43.770
Right.

101
00:08:43.770 --> 00:08:55.500
Return count inversions and do the one thing to set it to zero here.

102
00:08:57.030 --> 00:08:58.680
So this part is done.

103
00:08:58.710 --> 00:09:03.330
We have the the half permutation of the puzzle or solvable.

104
00:09:03.420 --> 00:09:10.760
So whenever the title is preceded by a title with a higher value as an inversion.

105
00:09:10.800 --> 00:09:16.980
So in our case, with the blank file in the soil, we will position the number of inversions must be

106
00:09:16.980 --> 00:09:22.770
even so here we have take the condition must be even for the puzzle to be solvable.

107
00:09:23.370 --> 00:09:25.140
So what we need?

108
00:09:25.140 --> 00:09:29.700
We need another method of this.

109
00:09:30.540 --> 00:09:32.440
We need another method.

110
00:09:32.460 --> 00:09:33.480
So we will write.

111
00:09:33.480 --> 00:09:41.550
Private Boolean is solved and this is curly bracket open.

112
00:09:42.700 --> 00:09:47.130
And so here I will write.

113
00:09:47.310 --> 00:09:55.050
If files are time, don't length.

114
00:09:56.220 --> 00:10:03.060
The minus one is not equal to zero here.

115
00:10:03.270 --> 00:10:08.110
What we are doing if the tile is not in the solution.

116
00:10:08.130 --> 00:10:10.920
So it will be called the not solved.

117
00:10:11.100 --> 00:10:15.270
So what we will do, we will return the false.

118
00:10:17.280 --> 00:10:18.720
Yeah, we will.

119
00:10:19.380 --> 00:10:21.480
Yeah, we will return false here.

120
00:10:21.810 --> 00:10:25.020
So I will write return false.

121
00:10:26.920 --> 00:10:33.460
So this gun and what we have to do now, we will take another look for you.

122
00:10:33.490 --> 00:10:34.840
Here I will write.

123
00:10:36.220 --> 00:10:37.130
In time.

124
00:10:39.210 --> 00:10:46.200
Started with the Beatles variable and then and Beatles minus one.

125
00:10:46.980 --> 00:11:01.170
So here I is, greater or equal to zero and I minus my I am minus minus, not increment decrement.

126
00:11:01.890 --> 00:11:13.980
Here we will check with condition times with I is not is equal to I plus one.

127
00:11:14.820 --> 00:11:18.120
And under this we have to return.

128
00:11:18.120 --> 00:11:18.900
False.

129
00:11:22.830 --> 00:11:27.630
This is not and return true.

130
00:11:29.730 --> 00:11:31.380
Oh, here we have.

131
00:11:31.380 --> 00:11:34.310
The blank tile is not in the solid position.

132
00:11:34.680 --> 00:11:37.860
So now we have to know.

133
00:11:38.250 --> 00:11:41.910
So we have created this method, a new game here.

134
00:11:42.690 --> 00:11:47.130
And it is required to create a new instance of the game.

135
00:11:47.730 --> 00:11:55.940
So we take the reset matter, the playing field and shuffle it, and then continue until the playing

136
00:11:56.070 --> 00:11:57.450
creation is resolved.

137
00:11:57.930 --> 00:12:01.620
Here we have defined all that logic.
