1
00:00:00,660 --> 00:00:01,580
Hello everyone.

2
00:00:01,590 --> 00:00:08,370
So I hope that you all have went through the introduction of the application part pretty well and must

3
00:00:08,370 --> 00:00:12,530
be eager to learn that how actually this application is going to work.

4
00:00:12,540 --> 00:00:16,590
So here we are with the working of this application.

5
00:00:16,590 --> 00:00:24,570
We like how actually this application functions, how these buttons are going to work, how the height

6
00:00:24,570 --> 00:00:26,310
is going to be calculated.

7
00:00:26,310 --> 00:00:33,660
So we will be adding notes to the tree so that you can like visualize that how the height is increasing

8
00:00:33,660 --> 00:00:34,590
or decreasing.

9
00:00:34,590 --> 00:00:39,660
And of course the main part is to in order for reorder and post order calculation.

10
00:00:39,660 --> 00:00:43,020
So we will be like visualizing everything.

11
00:00:43,800 --> 00:00:49,950
We will be visually looking to these changes, how these branches and nodes are working.

12
00:00:50,280 --> 00:00:54,180
So this is the opening window of the application.

13
00:00:54,180 --> 00:00:58,980
So we were like talking about showing an AWP framework.

14
00:00:58,980 --> 00:01:06,960
So we are going to extensively use the player like panel frame buttons, menubar item and everything

15
00:01:07,290 --> 00:01:08,880
from the string library.

16
00:01:08,880 --> 00:01:15,990
So basically the structure of this application is made with the help of the frame component of the swing

17
00:01:15,990 --> 00:01:16,800
library.

18
00:01:17,160 --> 00:01:19,920
Also inside the frame we are having panels.

19
00:01:19,920 --> 00:01:27,210
So here you can see that title panel with our title of the application as binary search tree visualization

20
00:01:27,210 --> 00:01:30,360
and also an escape and minimizing button.

21
00:01:30,360 --> 00:01:36,240
So this like window closing function, we will write code for it.

22
00:01:36,240 --> 00:01:46,620
Also not on hitting on this class button, we exit this window of the application inside the application.

23
00:01:46,890 --> 00:01:56,280
After the title there is a frame which is containing a panel for height, a panel for this like a text

24
00:01:56,280 --> 00:02:00,600
field and two buttons and the middle of the frame.

25
00:02:00,600 --> 00:02:06,000
Or we can say that the middle part of this panel is containing the main tree.

26
00:02:07,290 --> 00:02:15,030
Bottom of the frame is containing all the tree traversal calculation in order to preorder and post order.

27
00:02:15,390 --> 00:02:19,230
So initially this tree is having how many nodes?

28
00:02:19,230 --> 00:02:22,020
One, two, three, four, five, six, seven, eight.

29
00:02:22,350 --> 00:02:29,100
So in this we are having three nodes like a tree, not a tree.

30
00:02:29,100 --> 00:02:38,070
Parts are root, a left subtree and a right subtree with a total of eight nodes, one of which is the

31
00:02:38,070 --> 00:02:42,900
parent our root, whatever we call it, and other segments are each child.

32
00:02:43,200 --> 00:02:52,530
So there are three nodes in the left, child part or left subtree and four nodes in the right part or

33
00:02:52,530 --> 00:02:53,550
the right subtree.

34
00:02:53,880 --> 00:02:59,460
So like let's try deleting one of the nodes first.

35
00:02:59,760 --> 00:03:05,940
So we are like initializing this application with this delete button.

36
00:03:05,940 --> 00:03:09,360
So let's see how actually it is going to work.

37
00:03:09,750 --> 00:03:12,210
So we want to delete this.

38
00:03:12,210 --> 00:03:19,430
740 you will see that the height will update and the node will be disappeared from here.

39
00:03:19,950 --> 00:03:21,360
Okay, so perfect.

40
00:03:21,750 --> 00:03:22,620
One more thing.

41
00:03:22,620 --> 00:03:29,550
We you must have observed that this in order pre and post order is also updated all three of them.

42
00:03:29,730 --> 00:03:33,210
So the height has changed to three from four.

43
00:03:33,240 --> 00:03:41,040
Initially the height was four, but once we deleted the last or we can say that the most bottom level

44
00:03:41,040 --> 00:03:45,180
of this tree, then the height is changed to three.

45
00:03:45,780 --> 00:03:53,940
Okay, so you must be wondering that what this like bottom level of this tree are called.

46
00:03:54,480 --> 00:04:03,780
So the top part is called the root and the well botanist nodes of the tree are called as the leaves

47
00:04:03,780 --> 00:04:04,830
of the tree.

48
00:04:04,830 --> 00:04:11,730
So all leaves of the tree are the most bottom presented node in that tree.

49
00:04:11,880 --> 00:04:20,400
Now we have tried the deleting function, the height is updated, the in order reorder and post order

50
00:04:20,400 --> 00:04:22,550
is also updated here.

51
00:04:22,590 --> 00:04:30,000
Okay, so let us try adding our node and let us check that how things are going to work after that.

52
00:04:30,000 --> 00:04:36,930
So think about the number which will change all over the structure of this tree.

53
00:04:36,930 --> 00:04:48,240
So if we try to enter a number lesser than 250, then this will edit this site.

54
00:04:48,330 --> 00:04:56,400
So let us try to add 225 to this tree and see how things are going to change.

55
00:04:56,970 --> 00:04:58,080
Okay, so perfect.

56
00:04:58,380 --> 00:04:59,930
So this five.

57
00:05:00,600 --> 00:05:07,620
250 is the parent of these 200 and these 200 is the parent of two.

58
00:05:07,620 --> 00:05:11,130
25 to 25 is greater than.

59
00:05:12,320 --> 00:05:13,280
200.

60
00:05:13,280 --> 00:05:16,490
So it is added in the left subtree part.

61
00:05:16,520 --> 00:05:22,460
Now the height is also updated from 3 to 4 as the height has increased.

62
00:05:22,940 --> 00:05:33,830
The in order is updated head 225 is added and also preorder in the middle and a post order in the first

63
00:05:33,830 --> 00:05:34,190
part.

64
00:05:34,640 --> 00:05:41,030
So this was all about this adding function, how this adding function is working.

65
00:05:41,060 --> 00:05:44,140
You must have encountered this on.

66
00:05:44,150 --> 00:05:51,740
Okay, so now let's try to add the number which is greater than 500 and see that how it is added and

67
00:05:51,740 --> 00:05:52,670
ready to added.

68
00:05:52,970 --> 00:05:57,000
So we will try to add a number 600.

69
00:05:57,020 --> 00:05:59,000
Suppose so.

70
00:05:59,000 --> 00:06:01,040
600 should be added.

71
00:06:02,310 --> 00:06:12,040
So 600 is added in the right subtree part of 500, and it is lesser than both 750 and 700.

72
00:06:12,090 --> 00:06:21,660
So it is added in the left subtree part and became the left child of 700 or 600 is having 700 as its

73
00:06:21,660 --> 00:06:22,200
parent.

74
00:06:22,710 --> 00:06:27,390
Now let us try to add something greater than all of them.

75
00:06:27,910 --> 00:06:28,590
Okay.

76
00:06:28,710 --> 00:06:38,130
So this 2000 that added at the most rightist part of this tree as it is greater than all of the existing

77
00:06:38,130 --> 00:06:39,720
nodes now.

78
00:06:39,870 --> 00:06:40,190
Okay.

79
00:06:40,260 --> 00:06:46,740
So let us try to add 1050 and see how the height increases.

80
00:06:48,730 --> 00:06:49,500
Riverland.

81
00:06:49,970 --> 00:06:50,590
Yes.

82
00:06:50,590 --> 00:06:54,950
So this 1050 is greater than 1000.

83
00:06:54,970 --> 00:06:58,470
And of course all of the existing present note.

84
00:06:58,480 --> 00:07:06,370
So it will be added to the most rightist part, but it is like lesser than this 2000.

85
00:07:06,370 --> 00:07:10,150
So it became the left child of 2000.

86
00:07:10,390 --> 00:07:17,740
Also, the height of the bay stays updated to five as we are having one, two, three, four branches

87
00:07:17,740 --> 00:07:20,070
and five nodes.

88
00:07:20,080 --> 00:07:26,320
So the height is basically the maximum number of nodes in any possible way.

89
00:07:26,590 --> 00:07:34,270
We can traverse any way to check that which is the largest possible path like oh yes, which is the

90
00:07:34,270 --> 00:07:39,100
largest possible path for going to the bottom node of the tree.

91
00:07:39,160 --> 00:07:45,220
Also, this is not every order and post order is updating according to like the addition.

92
00:07:45,220 --> 00:07:53,320
We are meaning to the tree now we have like checked all the functionalities of this application.

93
00:07:54,100 --> 00:08:03,850
So let us try to look that what coding path we have to include to perform all of them with the help

94
00:08:03,850 --> 00:08:04,660
of Java.

95
00:08:04,660 --> 00:08:14,410
Like what are the functions classes method we will be invoking in order to apply all of this in the

96
00:08:14,410 --> 00:08:15,280
application.

97
00:08:15,820 --> 00:08:25,390
So basically I have written all the like initial steps we are going to look up to by making this application

98
00:08:25,480 --> 00:08:33,370
like we have to firstly initialize our frame inside which all of the components are going to be consistent.

99
00:08:34,660 --> 00:08:41,590
So like after the creation of the application in the ID, we have to.

100
00:08:42,540 --> 00:08:44,400
Put up things inside the frame.

101
00:08:44,400 --> 00:08:50,550
So suppose we have created the application in the I.D. as Create Java project.

102
00:08:50,550 --> 00:08:57,870
Then we have to initialize the frame and inside the frame only we are going to add these panels for

103
00:08:57,870 --> 00:09:01,380
the title The Tree, the Height and everything.

104
00:09:01,500 --> 00:09:07,860
So yes, initialization of the frame is going to be the first concern.

105
00:09:07,860 --> 00:09:17,310
Now we have to like initialize variables for storing everything or whether it could be the height of

106
00:09:17,310 --> 00:09:19,590
the tree, the nodes.

107
00:09:19,590 --> 00:09:25,830
So we have to initialize all of them in order to access them in the rest of the code.

108
00:09:26,110 --> 00:09:35,730
Or also we have to set a layout so the layout of the application is going to be pre-decided that where

109
00:09:35,730 --> 00:09:42,870
the tree is going to be located, also where it is located in the middle of the frame here we have height

110
00:09:42,870 --> 00:09:50,550
in the left part and the buttons in the right part and the travel segment in the bottom part and of

111
00:09:50,550 --> 00:09:51,390
course, the tree.

112
00:09:51,390 --> 00:10:00,360
So these layouts have to be set initially after the declaration of the variables, all kinds of variables,

113
00:10:01,080 --> 00:10:08,880
whether it could be the node, the height, the elements of the tree and everything, that in order

114
00:10:09,210 --> 00:10:13,590
to run a pre order functions are also going to be created.

115
00:10:13,590 --> 00:10:16,500
So they will also contain some object.

116
00:10:16,500 --> 00:10:21,240
So we have to declare them initially in order to access them later.

117
00:10:21,330 --> 00:10:27,630
And yes, everything should be declared in the beginning as the global variables, the frame should

118
00:10:27,630 --> 00:10:34,500
be initialize of course, and the layout should be set in order to decide that where which path is going

119
00:10:34,500 --> 00:10:35,610
to be located.

120
00:10:36,300 --> 00:10:41,970
Now the next function will be to add elements inside the BSD.

121
00:10:41,970 --> 00:10:48,450
So we will be writing an algorithm for addition of elements inside the binary searching.

122
00:10:48,450 --> 00:10:54,810
So there is a very beautiful method of adding the elements inside this one research tree.

123
00:10:55,290 --> 00:11:02,520
We have discussed in the introduction part that, like while adding the elements inside the BSD, we

124
00:11:02,520 --> 00:11:09,750
have to keep in mind several things like the left subtree should be lesser than the parent, the right

125
00:11:09,750 --> 00:11:12,270
subtree should be greater than the parent.

126
00:11:12,270 --> 00:11:14,730
And also the like.

127
00:11:14,730 --> 00:11:23,340
Subtree, which we are talking about, should be a binary search tree itself, as the rules should not

128
00:11:23,340 --> 00:11:25,830
be violated in the subtree as well.

129
00:11:25,830 --> 00:11:32,880
We have to keep in mind that the right part is greater than the root, and the left part is like smaller

130
00:11:32,880 --> 00:11:35,820
than the root overall to this tree.

131
00:11:36,060 --> 00:11:44,370
So yes, this is like a algorithm which we are going to include for adding elements in the BSD or similarly

132
00:11:44,370 --> 00:11:47,010
for deleting the nodes from the BSD.

133
00:11:47,010 --> 00:11:52,740
So once we are deleting the node, then we have to like readjust this tree.

134
00:11:52,740 --> 00:11:56,850
So suppose that I will show you that how actually this deleting is going to work.

135
00:11:56,880 --> 00:12:05,550
So suppose we try to delete this 750 then all of this left, right, subtree and left subtree of this

136
00:12:05,550 --> 00:12:12,660
750 is going to rearrange themselves in order to become a binary search tree itself again.

137
00:12:12,660 --> 00:12:20,580
And with respect to this root, they have to like be greater than all of the elements are greater then.

138
00:12:20,580 --> 00:12:25,290
So let us try to delete 7/51 and see what happens.

139
00:12:25,290 --> 00:12:33,690
So yes, the 750 is disappeared now the like right subtree is a head became 1000.

140
00:12:33,990 --> 00:12:36,840
1000 is greater than 500 of course.

141
00:12:36,840 --> 00:12:42,330
And again, 706 hundred are greater than one are like less than 1000.

142
00:12:42,330 --> 00:12:47,160
And these are 201 050 is greater than 1000.

143
00:12:47,160 --> 00:12:51,480
So this is again following the principles of a binary search tree.

144
00:12:52,050 --> 00:12:59,220
There is no violation in the rules and all of these elements are greater than this main root.

145
00:12:59,220 --> 00:13:00,450
We can say that.

146
00:13:00,720 --> 00:13:06,090
So it is following the roots of mine resisted even after the deletion.

147
00:13:06,990 --> 00:13:14,280
So yes, you must have encountered that how beautifully things are rearranging themselves.

148
00:13:14,280 --> 00:13:22,710
So there should be plenty of code in order to handle all these functionalities and we will be looking

149
00:13:22,710 --> 00:13:24,690
up to it in detail.

150
00:13:25,740 --> 00:13:31,020
Till then we like start the programming section, so see what's left.

151
00:13:31,290 --> 00:13:39,540
Okay, so we have completed this and now this is like for taking the maximum element from the left side.

152
00:13:39,600 --> 00:13:41,520
So like.

153
00:13:42,350 --> 00:13:50,420
In order to write the logics for this, in order, pre-order and post order, we have to like rearrange

154
00:13:50,420 --> 00:13:51,680
this tree first.

155
00:13:51,680 --> 00:13:57,230
So the maximum element from the left side is going to be the.

156
00:13:58,530 --> 00:14:06,420
I test part of the left subtree and in order to calculate the in order and pre-order and post order,

157
00:14:06,420 --> 00:14:12,870
we have to write simple objects that in order is working in the manner of.

158
00:14:14,070 --> 00:14:16,170
Like a root in the left.

159
00:14:16,530 --> 00:14:18,330
It is containing the left part.

160
00:14:18,420 --> 00:14:20,840
So basically it is left root right.

161
00:14:20,850 --> 00:14:26,210
And how this created it, it is working like a root left and then right.

162
00:14:26,220 --> 00:14:33,600
So first all then all of the members of the left, subtree and then the right subtree, of course.

163
00:14:33,780 --> 00:14:39,060
And also this poster that is taking the root as it ends.

164
00:14:39,060 --> 00:14:41,970
So left subtree, right subtree.

165
00:14:41,970 --> 00:14:42,840
And then the root.

166
00:14:43,500 --> 00:14:48,870
So this is how this logic of another parent and post order is working.

167
00:14:48,960 --> 00:14:53,910
We will be writing a separate code for this functioning also.

168
00:14:54,330 --> 00:14:54,700
Okay.

169
00:14:54,780 --> 00:15:02,220
So also for the calculation of the height, we are going to traverse the tree and trace that which is

170
00:15:02,220 --> 00:15:07,050
the longest possible path in order to the leaf node.

171
00:15:07,050 --> 00:15:14,470
Like here we are having leaf sets 225 601 050 So basically what is a leaf?

172
00:15:14,470 --> 00:15:17,460
So if is a node which is having no child.

173
00:15:17,610 --> 00:15:21,360
So yes, all three of them are having no child.

174
00:15:21,360 --> 00:15:23,970
Also there is 350, which is having no child.

175
00:15:24,000 --> 00:15:29,070
So basically we are having 1 to 3 and four leaf to this tree.

176
00:15:29,640 --> 00:15:36,450
Now, in order to calculate the height, we will be traversing from the root to all the lymph nodes

177
00:15:36,450 --> 00:15:45,300
and like store the variable which is going to count the nodes in order to traverse this route from the

178
00:15:45,300 --> 00:15:51,810
leaf and which is going to be the largest, should be returned as the height of this beast.

179
00:15:51,990 --> 00:15:57,600
So, yes, all this programming logic we are going to cover in the next part.

180
00:15:58,440 --> 00:16:01,460
So calculate height of Vesta using recursive method.

181
00:16:01,470 --> 00:16:05,540
So we are going to follow a recursive method for this calculation.

182
00:16:05,550 --> 00:16:13,620
Like our same part of code will be written and this root will travel to the leaf nodes with the same

183
00:16:13,620 --> 00:16:20,370
recursive code again doing like coming back to it and then again going to any other leaf.

184
00:16:20,400 --> 00:16:24,060
So this is all going to be performed recursive.

185
00:16:24,630 --> 00:16:32,400
And then the last part is going to be our functionalities for rearranging the node after the deletion

186
00:16:32,400 --> 00:16:33,300
and addition.

187
00:16:33,330 --> 00:16:38,580
As we have seen that once we delete or add a node, then all of them rearrange them.

188
00:16:39,150 --> 00:16:44,640
Also in this tree and industry order, post order and in order.

189
00:16:44,640 --> 00:16:53,490
So after all of this we are going to like run this application and check that how everything is going

190
00:16:53,490 --> 00:16:54,720
to be put up together.

191
00:16:54,840 --> 00:16:57,840
So we will start the coding section in the next part.

192
00:16:57,840 --> 00:16:59,430
So see you in the next one.
