WEBVTT
1
00:00:00.600 --> 00:00:01.710
Hello, everyone.

2
00:00:01.740 --> 00:00:09.480
So the previous one, we have covered our A-Team class, which is going to be responsible for testing

3
00:00:09.480 --> 00:00:11.520
and running of the application.

4
00:00:11.910 --> 00:00:17.710
We have covered this account class, which has also several functionalities.

5
00:00:17.730 --> 00:00:25.500
Like initially, we have a variables for customer number, pin number, checking balance and savings

6
00:00:25.500 --> 00:00:26.160
balance.

7
00:00:26.160 --> 00:00:36.360
So basically it is handling the types of accounts and getting and setting the private accessible variables

8
00:00:36.810 --> 00:00:42.810
to like accessible by all the classes with the help of this get set methods.

9
00:00:43.020 --> 00:00:52.710
Also, we have used the calculation check for checking, withdraw savings, withdraw checking the deposit

10
00:00:52.710 --> 00:00:54.150
and savings deposit.

11
00:00:54.150 --> 00:00:59.250
And also we have our like calculator for checking that transfer.

12
00:00:59.520 --> 00:01:07.860
So this is like calculating all the types of balances, transfers taking place which we have discussed

13
00:01:07.860 --> 00:01:09.630
in the prototype section.

14
00:01:09.660 --> 00:01:16.320
Then this is going to like calculate all the amounts being transferred between the accounts.

15
00:01:16.390 --> 00:01:21.720
Also we have like get methods for checking.

16
00:01:21.720 --> 00:01:30.810
So with draw input, saving, withdraw input and deposit for both checking and savings account.

17
00:01:31.170 --> 00:01:38.970
So like basically it is checking for a valid input and if the input is valid, then performing tasks

18
00:01:38.970 --> 00:01:39.840
accordingly.

19
00:01:40.140 --> 00:01:47.760
So this get methods for both withdraw and deposit for both the types of accounts are doing that.

20
00:01:47.940 --> 00:01:55.170
Now after that, we have a get method for checking the transfers input also, which we covered in the

21
00:01:55.170 --> 00:02:03.420
last part that this transfer input is going to like check firstly the types of account which is being

22
00:02:03.420 --> 00:02:09.540
inputted, whether it be the checking account or the savings account.

23
00:02:09.540 --> 00:02:18.900
So according to that type of account chosen for transfer, then the choices will appear accordingly.

24
00:02:18.900 --> 00:02:26.370
So if we are in the checking account, then we will be transferring funds to the savings account and

25
00:02:26.370 --> 00:02:27.270
vice versa.

26
00:02:27.600 --> 00:02:37.170
And also we are using like try and catch block exception handling method for handling the exceptions

27
00:02:37.170 --> 00:02:42.180
that may arise while transferring and depositing funds.

28
00:02:42.180 --> 00:02:50.430
So yes, we are checking everything with a separate code block and we have like functions for everything.

29
00:02:50.820 --> 00:03:00.690
So this switch case we are using for like navigating between the cases, like if the choices are made

30
00:03:00.690 --> 00:03:03.780
correctly, then this loop will execute.

31
00:03:03.810 --> 00:03:10.050
Otherwise this switch case will return and nothing will be performed.

32
00:03:10.260 --> 00:03:19.020
The default case is that if not a valid choices like entered by the user to their keyboard, then it

33
00:03:19.020 --> 00:03:24.420
will go in, go to like show output like invalid choice.

34
00:03:24.420 --> 00:03:28.650
So yes, this is the overall thing we covered till now.

35
00:03:28.830 --> 00:03:38.040
Now in this part like we are going to cover the third class we discussed about earlier is the options

36
00:03:38.040 --> 00:03:39.210
menu class.

37
00:03:39.210 --> 00:03:46.890
So the options menu class is going to cover all the options which are going to be like displayed.

38
00:03:46.890 --> 00:03:49.590
We have discussed this in introduction.

39
00:03:49.590 --> 00:03:50.280
Yes.

40
00:03:50.280 --> 00:03:57.360
All the options like this type one, two, three, four, five and for these checking and exits also

41
00:03:57.570 --> 00:04:02.310
are going to be handled with the help of of options menu plus.

42
00:04:02.310 --> 00:04:10.560
Similarly for these checking, we have types and these types are basically the members of the options

43
00:04:10.560 --> 00:04:11.190
menu.

44
00:04:11.640 --> 00:04:20.040
So these options menu are going to contain all these types and attachable functions with those specific

45
00:04:20.040 --> 00:04:27.240
choices and what actions to be performed on the call of that specific choice.

46
00:04:27.540 --> 00:04:33.660
So whatever the call is performed is going to be accessed with the help of this account.

47
00:04:33.660 --> 00:04:41.010
Plus we have like functions for every choice to be made in the Options menu class.

48
00:04:41.010 --> 00:04:48.540
So yes, we are going to call this savings deposit or whether it be anything we have used to get the

49
00:04:48.540 --> 00:04:49.020
method.

50
00:04:49.020 --> 00:04:58.560
So with the help of this get method, we can use these all the global variables which are private inside

51
00:04:58.560 --> 00:04:59.850
the account class inside.

52
00:04:59.980 --> 00:05:01.280
Option menu glass.

53
00:05:01.300 --> 00:05:03.170
So we will see all that.

54
00:05:03.280 --> 00:05:08.680
Now let us first create a new file inside the ASIC folder.

55
00:05:09.040 --> 00:05:13.030
Call it as option menu dot Java.

56
00:05:13.570 --> 00:05:23.320
So this file inside the ASIC folder is going to create a public class called AS or Option Menu.

57
00:05:23.440 --> 00:05:33.460
And this class is basically going to contain all the options list and the exception handling regarding

58
00:05:33.730 --> 00:05:34.270
choices.

59
00:05:35.020 --> 00:05:44.560
So inside this public class we are going to initially or scanner will be called as if the user is going

60
00:05:44.560 --> 00:05:46.960
to put any choice.

61
00:05:46.960 --> 00:05:56.560
So what is going to be the like method to grab the choice like to grasp the choice entered by the user.

62
00:05:56.560 --> 00:06:02.320
So we are using this scanner for scanning the specific input.

63
00:06:02.890 --> 00:06:05.440
We are using this new scanner.

64
00:06:07.480 --> 00:06:15.400
So this scanner is going to create our scanner method and the argument is going to be system button.

65
00:06:16.510 --> 00:06:22.450
So this system is going to be the argument inside this scanner.

66
00:06:23.560 --> 00:06:26.950
So yes, this is like, yes.

67
00:06:27.430 --> 00:06:34.270
So we are done with the creation of this scanner, which is going to like scan all the.

68
00:06:35.140 --> 00:06:37.360
The types entered by the user.

69
00:06:37.930 --> 00:06:44.200
So after the creation of this scanner, we will be displaying the money format.

70
00:06:44.200 --> 00:06:53.560
So like the decimal format is going to be used as the format for the money displaying.

71
00:06:54.010 --> 00:06:56.110
So money format.

72
00:06:56.950 --> 00:07:04.780
And a new decimal format object is going to be created for taking inputs.

73
00:07:04.990 --> 00:07:15.820
So yes, the sign for the decimal format of the money input is going to be yes, our dollar sign we

74
00:07:15.820 --> 00:07:16.870
can use.

75
00:07:17.620 --> 00:07:23.650
Also closing this with a single inverted comma.

76
00:07:24.680 --> 00:07:30.300
On the AFT after this closure, we are using this slash.

77
00:07:30.320 --> 00:07:35.900
So basically, these are the methods for displaying the money.

78
00:07:35.940 --> 00:07:49.540
So suppose we have $20,000, so we are going to be displaying it at 20,000 and daughter dot like .00.

79
00:07:49.550 --> 00:07:56.300
So this is going to be basically the format of the displaying the format of money.

80
00:07:56.540 --> 00:08:04.100
So three slashes and a comma then to slash is 0.00.

81
00:08:04.580 --> 00:08:13.280
So initially we have like this by default value in our money format and later it will be updated accordingly.

82
00:08:13.820 --> 00:08:21.410
We discussed about hash maps in the beginning and what actually these hash maps are.

83
00:08:21.560 --> 00:08:32.210
So these hash maps are going to be the links between the types of choices and the functions attached

84
00:08:32.300 --> 00:08:35.660
to the specific choices like in this.

85
00:08:35.660 --> 00:08:37.130
We can see that.

86
00:08:37.640 --> 00:08:40.280
Let me first create this hash map.

87
00:08:40.460 --> 00:08:45.770
So this is the syntax for creating a hash map in Java.

88
00:08:46.760 --> 00:08:51.830
Hash map is basically a function like a data type.

89
00:08:51.830 --> 00:09:02.240
We can see that we use inside Java and this data type will help us to link things and like they can

90
00:09:02.240 --> 00:09:05.420
perform tasks integrated manner.

91
00:09:06.140 --> 00:09:12.200
Like if we okay, we will be explaining this with the help of these slides.

92
00:09:12.470 --> 00:09:18.590
So suppose we are choosing type one and the functions attached with it is view balance.

93
00:09:18.590 --> 00:09:23.020
So this attachment is due to the mercy of the hash maps.

94
00:09:23.030 --> 00:09:32.420
So you can see that in the hash maps we are having two arguments, integer and account and these hash

95
00:09:32.420 --> 00:09:37.660
maps are helping us to initially for suppose these types of accounts.

96
00:09:37.670 --> 00:09:46.560
So these links between type one and the type of specific account is due to the help of hash maps.

97
00:09:46.580 --> 00:09:49.760
So hash maps helps us to map things.

98
00:09:50.000 --> 00:09:58.460
We can attach indexes to specific options and then our tasks will be performed accordingly.

99
00:09:59.390 --> 00:10:07.460
For like specific choices, we have already discussed it in the working video part that hash maps are

100
00:10:07.460 --> 00:10:14.170
going to link things and then tasks will be performed according to that specific link.

101
00:10:14.180 --> 00:10:23.720
So this helps us to make sure that this type one is attached to only checking account and not any other

102
00:10:23.720 --> 00:10:27.910
thing, and this type two is attached to this savings account.

103
00:10:27.920 --> 00:10:35.420
So once we hit choice two, then we enter in those savings accounts only, not any other options.

104
00:10:35.630 --> 00:10:39.470
So yes, this is the benefit of using hash maps.

105
00:10:40.270 --> 00:10:49.150
So after this we made several imports which are going to be required inside this option menu class such

106
00:10:49.150 --> 00:10:58.300
as decimal format for this hash maps for integrating the options with specific functions in input output

107
00:10:58.300 --> 00:10:59.170
exceptions.

108
00:10:59.170 --> 00:11:05.800
Suppose that there are any kinds of exception then that is going to be handled inside this package.

109
00:11:05.950 --> 00:11:10.480
And similarly for integer iterator map and scanners.

110
00:11:10.480 --> 00:11:18.460
So these imports will help us to like call the components in the different parts of code.

111
00:11:18.460 --> 00:11:22.150
So inside this get log in.

112
00:11:22.900 --> 00:11:23.830
Function.

113
00:11:24.040 --> 00:11:32.060
This is going to throw exception when the login is like not happening correctly.

114
00:11:32.080 --> 00:11:38.920
Suppose that the user entered the correct customer number but mistakenly entered the wrong pin number.

115
00:11:39.130 --> 00:11:43.120
So that is going to be an exception.

116
00:11:43.120 --> 00:11:52.000
And according to which output will be generated, that invalid customer number or pin number and if

117
00:11:52.300 --> 00:12:00.010
any of the invalid characters entered by the user, suppose that numerical value is not entered some

118
00:12:00.010 --> 00:12:02.380
alphabetical or anything is entered.

119
00:12:02.560 --> 00:12:08.530
We are allowing only integers in the customer pin number, customer number and pin number.

120
00:12:08.620 --> 00:12:17.020
So yes, if any invalid characters are entered then the input mismatch exception will be called and

121
00:12:17.020 --> 00:12:22.810
this will throw this statement that invalid character only numbers are allowed.

122
00:12:22.810 --> 00:12:30.580
And yes, we have discovered this that customer pin and yes, the customer number and pin number should

123
00:12:30.580 --> 00:12:38.650
be correctly entered by the user, whatever is used while creating the specific account which the user

124
00:12:38.650 --> 00:12:39.720
is trying to log in.

125
00:12:40.900 --> 00:12:48.850
Now looking at the next step, like initially we were being asked to for the time of logging the customer

126
00:12:48.850 --> 00:12:50.140
number and pin number.

127
00:12:50.170 --> 00:12:54.570
The next step was to get that type of account.

128
00:12:54.610 --> 00:13:02.890
So for getting that type of account from the option menu, we are using this get account type function

129
00:13:02.890 --> 00:13:10.560
passing account as that human account we have already created as a class inside this account Java file.

130
00:13:10.570 --> 00:13:15.940
And this is going to like show options like checking account, savings account and exit.

131
00:13:16.270 --> 00:13:19.480
So we have to make choices between these three.

132
00:13:20.080 --> 00:13:27.820
Now we are using like a switch case for entering into that specific account, which is like chosen by

133
00:13:27.820 --> 00:13:28.490
the user.

134
00:13:28.510 --> 00:13:35.380
So if the user choose the checking account, then we are calling this get checking method for entering

135
00:13:35.380 --> 00:13:37.290
the checking account type.

136
00:13:37.330 --> 00:13:43.300
Now the options will be displayed according to only checking account type option.

137
00:13:43.330 --> 00:13:51.820
Similarly with the savings account and if there is any kind of exception, like users inputs, any other

138
00:13:51.820 --> 00:13:57.630
value rather than one, two or three, then it will throw exception that invalid choices made.

139
00:13:57.640 --> 00:14:00.490
And similarly for the catch block.

140
00:14:00.550 --> 00:14:09.160
If anything other than these types are entered, then error will be displayed that you made an invalid

141
00:14:09.160 --> 00:14:09.790
choice.

142
00:14:09.850 --> 00:14:12.040
Try making a valid choice.

143
00:14:12.490 --> 00:14:17.250
So looking up to what is supposed to be performed next.

144
00:14:17.260 --> 00:14:20.590
So we have successfully logged in.

145
00:14:20.620 --> 00:14:26.650
We have choose the type or type of account we want to make transactions into.

146
00:14:26.800 --> 00:14:35.440
Then the next step is to display the options view balance, withdraw funds, deposit funds, transfer

147
00:14:35.440 --> 00:14:42.730
funds according to that chosen account, whether it be the saving account or the checking account.

148
00:14:42.760 --> 00:14:51.880
So yes, the next step is to create a function for get saving and then later forget checking.

149
00:14:51.880 --> 00:14:58.240
So we will be creating separate function for saving account options and checking the account option.

150
00:14:59.000 --> 00:15:05.000
So we will be covering that specific functions in the next part.
