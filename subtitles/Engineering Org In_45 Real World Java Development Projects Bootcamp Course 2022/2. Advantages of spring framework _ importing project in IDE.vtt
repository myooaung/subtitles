WEBVTT
1
00:00:01.730 --> 00:00:06.710
In a previous tutorial, I told you, what is the spring framework?

2
00:00:06.740 --> 00:00:16.670
What is our project outline and what we are going to do in this COVID 19 cases tracker application using

3
00:00:16.670 --> 00:00:17.240
Java.

4
00:00:17.390 --> 00:00:24.430
So we are going with spring application and we already have seen how we already created the spring initialize

5
00:00:24.440 --> 00:00:25.910
or part and each and everything.

6
00:00:25.910 --> 00:00:33.710
So I downloaded zip file from that part with Spring Initialize and I'm going to open it.

7
00:00:33.740 --> 00:00:39.680
So for the opening idea, basically this is our IDE, this is front page of IDE.

8
00:00:39.920 --> 00:00:43.220
What I'm going to do, I'm going to click open here.

9
00:00:43.520 --> 00:00:47.600
Once this is click open, you can see all the things.

10
00:00:47.600 --> 00:00:54.260
So this is my application, which is I downloaded the zip file, I extracted the zip file and this is

11
00:00:54.260 --> 00:00:55.520
my application.

12
00:00:55.730 --> 00:00:56.390
I'm clicking.

13
00:00:56.390 --> 00:00:57.170
Okay here.

14
00:00:58.000 --> 00:01:03.310
So you can say this in browser and loading room.

15
00:01:03.730 --> 00:01:06.070
So trust this project first.

16
00:01:06.370 --> 00:01:08.920
As I'm opening the third party project.

17
00:01:08.920 --> 00:01:12.550
As you can see, I have to mention this IntelliJ idea.

18
00:01:12.550 --> 00:01:15.370
Interestingly intelligent is very intelligent.

19
00:01:15.370 --> 00:01:22.780
It will load all the components, adding the dependencies and etc. etc. It will take care of it.

20
00:01:26.150 --> 00:01:30.790
So my idea is opening currently, so it will take time to opening me.

21
00:01:31.220 --> 00:01:32.990
The current thing.

22
00:01:34.580 --> 00:01:36.740
So let us check first.

23
00:01:38.040 --> 00:01:40.650
So it's our project is my main project.

24
00:01:40.650 --> 00:01:43.340
So it will take time to load each and everything.

25
00:01:44.030 --> 00:01:45.260
Once it is loaded.

26
00:01:45.260 --> 00:01:48.230
I will tell you what we are going to do here, basically.

27
00:01:52.280 --> 00:01:54.230
So now you can.

28
00:01:55.190 --> 00:01:56.170
It closed its doors.

29
00:01:57.160 --> 00:01:59.020
Now you can see everything here.

30
00:02:00.120 --> 00:02:04.440
So this is our project and I'm going to package a small post.

31
00:02:06.430 --> 00:02:09.700
So it is taking time to load everything here.

32
00:02:14.670 --> 00:02:17.490
It will take time to load each and everything.

33
00:02:19.130 --> 00:02:23.210
Once this is done, you can get your everything.

34
00:02:24.720 --> 00:02:25.720
You are only.

35
00:02:27.020 --> 00:02:32.900
So let me check to my that part also.

36
00:02:34.540 --> 00:02:37.270
It contains contains everything.

37
00:02:38.600 --> 00:02:39.290
They're only.

38
00:02:43.700 --> 00:02:50.210
So it is taking time to load each and everything because as you can see, there is loading but also

39
00:02:50.210 --> 00:02:50.600
there.

40
00:02:52.120 --> 00:02:56.080
While this is loading, I will explain the PGP part.

41
00:02:58.230 --> 00:03:03.750
We can see the thing I'm going to explain this here is spring work.

42
00:03:03.750 --> 00:03:11.700
So as I told you, spring is a lightweight framework for your development and it's a framework of frameworks

43
00:03:11.820 --> 00:03:12.930
for different things.

44
00:03:13.200 --> 00:03:15.900
So inversion of control.

45
00:03:15.900 --> 00:03:18.000
IOC What is the inversion of control?

46
00:03:18.060 --> 00:03:21.240
Before any projects you have seen actually.

47
00:03:21.270 --> 00:03:27.530
These are using some what we can say system enabled dependencies.

48
00:03:27.540 --> 00:03:29.850
We are adding libraries manually.

49
00:03:30.360 --> 00:03:36.360
But in this thing, what we can do, we can inject our libraries in XML.

50
00:03:36.600 --> 00:03:38.160
It is basically properties XML.

51
00:03:38.160 --> 00:03:38.820
You can say.

52
00:03:39.800 --> 00:03:43.130
So this is all about how we are going to do this.

53
00:03:43.870 --> 00:03:49.570
Also let us check what is the design patterns in removing the dependencies?

54
00:03:50.650 --> 00:03:52.270
Consider this example.

55
00:03:53.430 --> 00:03:55.800
It's easier to maintain and test also.

56
00:03:55.830 --> 00:03:59.140
I see this is class employees address.

57
00:03:59.140 --> 00:04:03.660
Address is another thing and I'm assigning employee address to this part.

58
00:04:04.720 --> 00:04:10.690
So it is basically direct dependency of between we can employ and at this.

59
00:04:10.870 --> 00:04:13.840
So this is very tight coupling I'm displaying directly.

60
00:04:14.020 --> 00:04:18.930
So what happens if I'm having error in address then there is a error in employee class.

61
00:04:18.940 --> 00:04:22.840
Also, if there is a Iranian employee class, then error address class also.

62
00:04:23.530 --> 00:04:27.160
But I can maintain both applications separate.

63
00:04:27.160 --> 00:04:32.770
I can run, employ separately, I can run, address separately if there are no runtime errors.

64
00:04:33.310 --> 00:04:36.400
So this is all about how we are going to do this.

65
00:04:36.580 --> 00:04:42.610
So let us check what is the basic thing in this is or.

66
00:04:43.850 --> 00:04:46.190
It's basically tight coupling scenario.

67
00:04:46.580 --> 00:04:52.950
But using inversion control, what we can do, we can use dependency injection.

68
00:04:52.970 --> 00:04:55.040
What is the dependency injection in this?

69
00:04:55.190 --> 00:05:04.760
We can add dependencies with some XML tags in XML, so it will download that dependencies from the net.

70
00:05:04.940 --> 00:05:07.700
Or we can say that's a real time thing you can do.

71
00:05:08.480 --> 00:05:10.910
So this is all about how we can do this.

72
00:05:10.910 --> 00:05:14.460
But what is the importance of this?

73
00:05:14.480 --> 00:05:16.370
What is the advantages of disease?

74
00:05:16.580 --> 00:05:19.300
It makes God loosely curable.

75
00:05:19.670 --> 00:05:22.760
And let me tell you what is the loosely coupled.

76
00:05:22.760 --> 00:05:28.030
First, as you can see, class employees address employees, employee address, address.

77
00:05:28.040 --> 00:05:29.740
So I'm making another variable for them.

78
00:05:30.590 --> 00:05:32.930
So what it will do it will copy that.

79
00:05:32.930 --> 00:05:34.430
It is copy that.

80
00:05:34.700 --> 00:05:35.980
It's secure in copy.

81
00:05:35.990 --> 00:05:39.380
So I'm copying that address using this keyword.

82
00:05:39.380 --> 00:05:44.000
So now there is no direct dependency, we can say.

83
00:05:44.980 --> 00:05:51.850
We can use the address part here and we are putting here and that employee is also satisfying this address.

84
00:05:51.850 --> 00:05:55.090
So if there is an employee, we can run address class or vice versa.

85
00:05:55.090 --> 00:05:59.500
If there is an error in address class, we can execute at least employee class.

86
00:05:59.680 --> 00:06:01.960
So this is a very good practice file.

87
00:06:01.960 --> 00:06:04.660
Developing any app news coupling.

88
00:06:04.690 --> 00:06:07.930
Do not maintain a tight coupling while you are developing a software.

89
00:06:07.930 --> 00:06:13.630
There are two terms are used tight coupling and loose coupling while writing the object part.

90
00:06:13.780 --> 00:06:16.300
So what we can say object chart.

91
00:06:16.330 --> 00:06:23.590
There are some maintain we can say for the tight coupling like you have some security purpose on line

92
00:06:23.590 --> 00:06:24.710
authentication or two.

93
00:06:24.730 --> 00:06:29.200
Basically you need tight coupling there because it's very crucial, important for each and every username.

94
00:06:29.200 --> 00:06:34.000
There should be unique password or we can say of each and every username should be unique for that purpose

95
00:06:34.000 --> 00:06:35.350
you can use tight coupling but.

96
00:06:36.090 --> 00:06:41.280
In such cases, collecting the data, representing a data data visualization.

97
00:06:41.280 --> 00:06:43.830
In Java, we can use loose couplings.

98
00:06:44.280 --> 00:06:47.010
So this is the basic thing of loose coupling.

99
00:06:47.250 --> 00:06:51.780
In spring framework I use the container which is which is basically inversion of control.

100
00:06:52.230 --> 00:06:55.290
I use a container is responsible for inject the dependency.

101
00:06:55.680 --> 00:06:57.450
Just injecting the dependency.

102
00:06:57.450 --> 00:07:00.030
No need to use direct library.

103
00:07:01.490 --> 00:07:04.670
While we are not using the library, we need to download it.

104
00:07:04.670 --> 00:07:07.280
Then we need to specify the path each and etc..

105
00:07:07.310 --> 00:07:10.310
Instead of this, what you can do, you can just do.

106
00:07:11.280 --> 00:07:15.090
Or some on downloading that part.

107
00:07:16.340 --> 00:07:24.710
No downloading will take buy ID ID will check everything dependency it will download dependency on etc..

108
00:07:25.600 --> 00:07:31.000
What we do, we provide the only metadata of to the container that XML file or annotation.

109
00:07:31.000 --> 00:07:34.570
We can use annotations there and we can proceed with metadata.

110
00:07:34.990 --> 00:07:42.220
So advantages of dependency injection is it makes code loosely, so it is easier to contain and makes

111
00:07:42.220 --> 00:07:50.170
code easy to test as our testing purpose is very important while developing any app or we required one

112
00:07:50.350 --> 00:07:54.670
thing or we don't want to test it again and again.

113
00:07:55.900 --> 00:07:57.590
We need to maintain the loose oligopoly.

114
00:07:57.610 --> 00:08:03.460
If I'm not developed til employee class, we can say there are two classes we need to maintain, employ

115
00:08:03.460 --> 00:08:03.930
and address.

116
00:08:03.940 --> 00:08:06.880
Consider the scenario we want to implement such part.

117
00:08:07.030 --> 00:08:12.340
But unfortunately, while testing purpose or due to time constraint, I cannot consider the employee

118
00:08:12.340 --> 00:08:12.840
class.

119
00:08:12.850 --> 00:08:15.730
I don't want to focus on employee class.

120
00:08:15.730 --> 00:08:17.680
I just want to test address class.

121
00:08:18.130 --> 00:08:19.810
This is a unit testing case basically.

122
00:08:19.810 --> 00:08:25.690
So for that purpose we can use address class only or we can run address class when it is loosely coupled.

123
00:08:25.870 --> 00:08:30.640
So this is basically of efficiency of dependency injection.

124
00:08:30.640 --> 00:08:37.360
So in these only, I'm going to explain how we are going to dependency inject and I'm using CC data

125
00:08:37.360 --> 00:08:42.040
which is basically comma separated files data or as you know, the XML things also.

126
00:08:42.040 --> 00:08:48.330
And in Excel thing also, we can store that data in the CSP format, which is basically commercial associated

127
00:08:48.340 --> 00:08:48.730
format.

128
00:08:48.730 --> 00:08:52.690
So I'm going to use dependency to produce it as a tabular manner.

129
00:08:52.690 --> 00:08:55.050
Or we can say header manner, rule manner.

130
00:08:55.060 --> 00:09:00.100
So for that purpose I'm using, I'm going to use one free dependency, we can say Apache dependency

131
00:09:00.100 --> 00:09:00.880
for that purpose.

132
00:09:00.880 --> 00:09:02.920
And further videos, I'm going to explain that.

133
00:09:03.560 --> 00:09:06.170
So this is all about how we are going to do this.

134
00:09:06.170 --> 00:09:10.810
So take time to download each and everything.

135
00:09:10.820 --> 00:09:19.340
If it's your first time like me only I just you can see this is my output and you can say this is loading

136
00:09:19.730 --> 00:09:25.640
so it will take time to load each and etc. So give the time to ID to load everything.

137
00:09:25.640 --> 00:09:27.500
You're seeing the data.

138
00:09:27.500 --> 00:09:31.670
It will take a huge amount of time as this is my main project, it's not a simple end project.

139
00:09:31.670 --> 00:09:34.370
It will take time for load each and everything.

140
00:09:34.370 --> 00:09:40.700
If this is your first time project, as I deleted everything related to my in my system, it takes time

141
00:09:40.700 --> 00:09:43.970
to download everything so you can check here.

142
00:09:44.000 --> 00:09:47.990
This is downloading and you can share the index libraries.

143
00:09:47.990 --> 00:09:49.640
You can check each and everything here.

144
00:09:50.370 --> 00:09:53.040
So give it give the time to this.

145
00:09:53.190 --> 00:10:01.200
Meanwhile, while this time I will check this also which plugin plugins is downloading, which is basically

146
00:10:01.200 --> 00:10:03.540
this is Android Jar files.

147
00:10:03.540 --> 00:10:09.690
Then some Mavin library is also downloading because these are files are using, so it will take time.

148
00:10:11.370 --> 00:10:17.370
So meanwhile this project let us see the why we are going with some.

149
00:10:18.420 --> 00:10:19.310
Spitting application.

150
00:10:19.320 --> 00:10:21.600
Why we are not deploying using servlet application.

151
00:10:21.600 --> 00:10:23.220
Yes, we can do it servlet.

152
00:10:23.340 --> 00:10:26.130
But what is the disadvantage of servlet you need?

153
00:10:26.980 --> 00:10:30.500
Instead of using spring, you need one dedicated server.

154
00:10:30.520 --> 00:10:31.600
You need to deploy that.

155
00:10:31.960 --> 00:10:37.330
Second thing spring is a framework so you can use hibernate and all the dependencies directly inside

156
00:10:37.330 --> 00:10:37.480
this.

157
00:10:37.480 --> 00:10:43.120
So it is a dependency already contained dependencies things in spring framework.

158
00:10:44.590 --> 00:10:49.510
Third, most disadvantage of servlet is you have to run it again and again.

159
00:10:49.870 --> 00:10:52.900
If JSP is there, you have to reload it at least.

160
00:10:54.430 --> 00:11:01.450
And one more thing is there is no dependency injection conception servlet.

161
00:11:01.480 --> 00:11:04.960
You can use servlet concepts and see what we can say.

162
00:11:04.960 --> 00:11:06.010
Spring Framework.

163
00:11:06.400 --> 00:11:12.220
I'm telling the servlet concepts like creating an HTML file, deploying in that HTML, but you can use

164
00:11:12.220 --> 00:11:18.220
the solid part, but for the main thing or the total back end thing we need to require.

165
00:11:19.010 --> 00:11:20.240
When the spring framework.

166
00:11:20.270 --> 00:11:23.210
And third most thing, it's a purely Java thing.

167
00:11:23.240 --> 00:11:27.950
You can use some HTTP libraries and you're going to work with that in the servlet.

168
00:11:27.980 --> 00:11:32.510
You have to invoke that servlet HTTP response request class.

169
00:11:32.510 --> 00:11:37.940
And this is very rudimentary technically, I can say, and it is very old technique to fetch the data

170
00:11:37.940 --> 00:11:43.690
requests the data from the database or we can say server instead of this, we can use this.

171
00:11:43.720 --> 00:11:47.060
This is most advanced thing plus.

172
00:11:47.180 --> 00:11:52.760
So as I told you, it uses struts, hibernate, JJP, IGP.

173
00:11:53.630 --> 00:11:57.230
These are the basic frameworks for developing any web application.

174
00:11:57.590 --> 00:11:59.870
So spring framework is very helpful.

175
00:11:59.900 --> 00:12:04.520
Plus Spring Frameworks provides the security, spring boot each and etc..

176
00:12:04.520 --> 00:12:07.520
So these are the multiple types of spring things inside this.

177
00:12:07.520 --> 00:12:16.880
As I told you, we already while developing a any or we are initializing that thing we already installed

178
00:12:17.000 --> 00:12:26.600
some direct dependencies like spring day, then spring HTML for accessing the HTML files and each everything.

179
00:12:26.690 --> 00:12:31.060
Also we added spring web application dependency also there.

180
00:12:31.100 --> 00:12:34.010
So it will be very helpful for doing this.

181
00:12:35.090 --> 00:12:37.760
Advantages of what we can bring.

182
00:12:38.670 --> 00:12:40.020
Redefine templates.

183
00:12:40.790 --> 00:12:48.260
Spitting Premier provides template for GBC, Hibernian GP technologies, so no need to require or to

184
00:12:48.260 --> 00:12:49.430
write from scratch.

185
00:12:49.430 --> 00:12:57.200
If you are invoking gdb file it will directly due to some code related to that and these are some basic,

186
00:12:58.490 --> 00:13:00.230
basic steps of these technologies.

187
00:13:00.410 --> 00:13:04.240
So let us make one example of glib stability.

188
00:13:04.250 --> 00:13:10.430
You don't need to write a code for exception handling, creating connection, creating statements,

189
00:13:10.430 --> 00:13:12.620
committing transaction, closing connection.

190
00:13:12.620 --> 00:13:20.870
So is already invoke that or we can say string framework already contains that part to require directly

191
00:13:21.110 --> 00:13:21.740
queries.

192
00:13:21.740 --> 00:13:24.290
So you need to write a code to executing queries only.

193
00:13:24.290 --> 00:13:26.600
So it saves a lot of GDB code.

194
00:13:28.020 --> 00:13:29.370
Segmenting loose coupling.

195
00:13:30.130 --> 00:13:33.460
As I told you, what is the loose coupling in dependency injection?

196
00:13:33.490 --> 00:13:37.030
The spring applications are loosely coupled because it's dependency injected.

197
00:13:37.060 --> 00:13:38.710
We are using dependency injection.

198
00:13:38.710 --> 00:13:45.940
We are going to specify our libraries in what we can say form XML, property XML and it will use that

199
00:13:45.940 --> 00:13:46.540
part on it.

200
00:13:46.840 --> 00:13:48.700
Again, it is easy to test.

201
00:13:49.490 --> 00:13:55.040
So I will tell you why it is easy to test the dependency injection makes easier to test application

202
00:13:55.040 --> 00:13:55.570
as true.

203
00:13:55.580 --> 00:13:59.660
So the application runs requires a server to run application.

204
00:13:59.660 --> 00:14:02.570
But our sprint framework doesn't require a server.

205
00:14:02.570 --> 00:14:08.570
We can invoke or check our application in our what we can say command prompt only if it's working or

206
00:14:08.570 --> 00:14:11.750
not or if I'm going to deploy on a web.

207
00:14:11.750 --> 00:14:13.340
So I need to require your server.

208
00:14:13.340 --> 00:14:19.040
But Apache is already server given in the what we can say spring framework defined pre defined.

209
00:14:19.050 --> 00:14:24.320
So we need to just call it so it is very helpful to deploy this on the server.

210
00:14:24.770 --> 00:14:25.550
So.

211
00:14:27.160 --> 00:14:28.450
Let us check my ID.

212
00:14:28.480 --> 00:14:30.070
As you can see, this is very.

213
00:14:31.070 --> 00:14:34.850
As you can see, shared indexes are downloaded each and everything.

214
00:14:35.000 --> 00:14:39.770
And as you can see, Spring Framework is also doing this work.

215
00:14:39.950 --> 00:14:41.660
Here you can see spring plug in.

216
00:14:43.320 --> 00:14:46.500
Here is my when each and everything is installed now.

217
00:14:48.540 --> 00:14:50.850
So let me minimize this part.

218
00:14:51.780 --> 00:14:54.330
So before going further.

219
00:14:57.380 --> 00:15:05.270
Let me check my ID or we can see what I'm going to check here is basically project structure.

220
00:15:05.270 --> 00:15:11.090
I'm going to go going to project structure because I mentioned your 16th version.

221
00:15:11.180 --> 00:15:14.720
If my application runs on another version, you have to check that.

222
00:15:14.870 --> 00:15:17.210
So go to Project Check Project SDK.

223
00:15:18.310 --> 00:15:20.350
So let me zoom on this first.

224
00:15:23.250 --> 00:15:23.820
This project.

225
00:15:23.820 --> 00:15:25.110
Project is this.

226
00:15:25.110 --> 00:15:27.660
So I'm using this only project SDK.

227
00:15:27.690 --> 00:15:29.290
Click, click, enter.

228
00:15:30.880 --> 00:15:34.390
So that's what you can do if you want to change it.

229
00:15:34.440 --> 00:15:37.120
Anything extra, you can mention that also.

230
00:15:37.510 --> 00:15:40.780
So this is all about how we are going with this project.

231
00:15:41.380 --> 00:15:47.560
So in further thing, I'm going to explain how we are proceeding with this application specifies.

232
00:15:47.560 --> 00:15:53.980
So this is just how we can invoke our import project in our ID before going to project.

233
00:15:54.430 --> 00:15:56.740
Let me tell you what I'm going to specify.

234
00:15:56.740 --> 00:15:57.160
I'm.

235
00:15:58.370 --> 00:15:59.720
Let me open the packages, man.

236
00:15:59.720 --> 00:16:01.900
Not only because I want to check the packages, man.

237
00:16:03.020 --> 00:16:05.990
So inside the searching, I'm going to explain something here.

238
00:16:06.320 --> 00:16:08.540
So let us check for further things.

239
00:16:09.030 --> 00:16:11.270
How I'm going to explain each and everything.
