WEBVTT
1
00:00:00.600 --> 00:00:07.230
So till the last part, we have covered everything about the like initializing the variables which are

2
00:00:07.230 --> 00:00:11.670
going to be required inside this visualization class.

3
00:00:11.670 --> 00:00:15.960
So basically we declared all the variables globally.

4
00:00:16.560 --> 00:00:19.980
Now this is the structure for the node of the tree.

5
00:00:20.310 --> 00:00:23.310
So head is the tree, head is the node.

6
00:00:23.310 --> 00:00:26.040
And we have discussed about points.

7
00:00:26.040 --> 00:00:29.190
So there is a structure for points also.

8
00:00:29.190 --> 00:00:37.110
And these points are the distance between two nodes which this line is joining and this line here we

9
00:00:37.110 --> 00:00:39.600
consider as branches of this tree.

10
00:00:39.600 --> 00:00:46.350
So this is the root, this is the branch, and this is the another node also.

11
00:00:46.350 --> 00:00:50.880
And the leaf at the bottom is part of this tree.

12
00:00:51.630 --> 00:00:56.220
So everything was covered in the node structure and point structure.

13
00:00:56.220 --> 00:01:04.320
We also have like declared variables for storing the height of root, left and right children and now

14
00:01:04.320 --> 00:01:05.760
coming to this graph.

15
00:01:06.150 --> 00:01:15.300
So we have discussed that this node is like being stored in a form of a rectangle which is painted green.

16
00:01:15.300 --> 00:01:24.000
So here we are using the graphics component of the JWT library, which is helping us to like draw this

17
00:01:24.000 --> 00:01:31.740
node whenever we hit like add button or even if we hit delete button, then this graphics are changing

18
00:01:31.740 --> 00:01:32.970
their structures.

19
00:01:33.060 --> 00:01:43.140
So yes, this graphics is passed as an argument and these the nodes are like appearing in a form of

20
00:01:43.140 --> 00:01:47.010
a painted man now coming to these tags.

21
00:01:47.010 --> 00:01:51.510
So we are storing these nodes in the form of a stack.

22
00:01:51.540 --> 00:01:58.440
Stack is also a data structure which follows last in first out principle.

23
00:01:58.440 --> 00:02:01.020
So we call it as leaf principle.

24
00:02:01.020 --> 00:02:09.030
So suppose if a like a node is entered at last at the tree so it will be deleted first.

25
00:02:09.030 --> 00:02:14.280
Like this is the most easiest part to remove a leaf from this tree.

26
00:02:14.280 --> 00:02:22.260
Like to delete a node from this tree and it is like a bit difficult to remove the middle part or the

27
00:02:22.770 --> 00:02:27.960
like, whether it is a left child, but it is present in the middle part.

28
00:02:27.960 --> 00:02:30.720
Basically we call them as non leaf nodes.

29
00:02:30.720 --> 00:02:31.800
So yes.

30
00:02:31.800 --> 00:02:41.490
And the algorithm is like it is following the stack principle of leaf last in first out here this node

31
00:02:41.490 --> 00:02:46.710
is containing a like object or we can call it as a method.

32
00:02:46.710 --> 00:02:48.150
So this is current.

33
00:02:48.360 --> 00:02:56.430
This current is storing the root at the beginning and these points are like joining one node from the

34
00:02:56.430 --> 00:02:56.910
other.

35
00:02:56.910 --> 00:03:03.450
So suppose we want to like we have a root which is stored as current.

36
00:03:03.450 --> 00:03:13.530
See you are now we want to add something in this tree so a line will be drawn and then the like supposed

37
00:03:13.950 --> 00:03:15.820
to be added will be attached here.

38
00:03:16.590 --> 00:03:21.540
So this is done like we have to use this offset.

39
00:03:22.050 --> 00:03:26.520
This offset is basically containing the height of this tree.

40
00:03:26.520 --> 00:03:33.990
Initially the height is zero when the tree is only containing this node one, the height or like a node

41
00:03:33.990 --> 00:03:39.480
is added to the tree, the height will increase and offset will contain another value.

42
00:03:39.510 --> 00:03:47.670
This offset will like increase this line and then attach a rectangular node to that tree.

43
00:03:48.630 --> 00:03:56.460
Okay, so this while loop is for suppose this stack is empty in the beginning or so one only one of

44
00:03:56.460 --> 00:04:02.040
these conditions should we need to be true in order to enter inside this loop.

45
00:04:02.040 --> 00:04:08.750
So either the stack is empty, like not empty or current is not equal to none.

46
00:04:08.820 --> 00:04:12.120
So this is like basically meaning the tree is empty.

47
00:04:12.120 --> 00:04:21.150
So we have to push that current into the stack and then it will point to current will point to current

48
00:04:21.150 --> 00:04:21.630
left.

49
00:04:21.720 --> 00:04:29.490
So yes, if that stack is empty or we can say that there is no node present in the tree, then we will

50
00:04:30.180 --> 00:04:36.390
like push this node inside the stack and this will become the root of the tree.

51
00:04:37.140 --> 00:04:43.840
And this is how this graphic is drawing the line and the rectangle for storing the other note.

52
00:04:43.890 --> 00:04:49.350
So this is drawing a line in order to join our element to the tree.

53
00:04:49.710 --> 00:04:57.930
So this was all about like graphics which were attaching nodes once we are hitting on our button by

54
00:04:57.930 --> 00:04:59.820
inputting any integer now.

55
00:05:00.820 --> 00:05:06.520
Let us initialize this best visualization class.

56
00:05:06.790 --> 00:05:17.560
So best visualization and calling the initialize function which is basically going to initialize the

57
00:05:17.560 --> 00:05:18.130
frame.

58
00:05:19.150 --> 00:05:26.800
We have discussed this in the prototype part that we have to initialize the frame after declaring all

59
00:05:26.800 --> 00:05:28.000
the variables.

60
00:05:28.510 --> 00:05:32.830
Now let us create this initialize as a function.

61
00:05:32.830 --> 00:05:36.550
So public void initialize.

62
00:05:37.390 --> 00:05:45.250
And this initialize is like going to set up the structure for the frame and the layout also.

63
00:05:45.490 --> 00:05:48.010
So initialize inside this.

64
00:05:48.100 --> 00:05:51.550
We are going to set a size for the frame.

65
00:05:51.550 --> 00:05:53.050
So set size.

66
00:05:54.020 --> 00:05:56.510
And the dimensions are going to be.

67
00:05:57.300 --> 00:05:57.470
Okay.

68
00:05:57.680 --> 00:06:02.660
So suppose there are 1307 hundred.

69
00:06:03.950 --> 00:06:04.610
Oh, yes.

70
00:06:04.820 --> 00:06:12.230
We are setting the dimensions as 1307 hundred, which is ultimately the size of the frame.

71
00:06:12.440 --> 00:06:17.660
Now, size will get bounce.

72
00:06:17.660 --> 00:06:22.820
Like boundaries get bounce and.

73
00:06:23.910 --> 00:06:25.170
After this.

74
00:06:26.420 --> 00:06:28.010
X is going to.

75
00:06:28.980 --> 00:06:31.110
Store signs don't wait.

76
00:06:34.360 --> 00:06:35.260
By the.

77
00:06:36.920 --> 00:06:37.490
Okay.

78
00:06:38.270 --> 00:06:42.330
So this is all about the size for the frame.

79
00:06:42.350 --> 00:06:44.180
Now coming to the panel.

80
00:06:44.300 --> 00:06:53.390
So top panel, we have initial initialize this panels on the top of this.

81
00:06:54.090 --> 00:06:54.660
Yes.

82
00:06:54.660 --> 00:06:59.300
Here we have initialized the stock panel, three panel, four panel and everything.

83
00:06:59.310 --> 00:07:04.890
So we are going to call this top panel as a new panel.

84
00:07:05.790 --> 00:07:08.070
And inside this panel.

85
00:07:09.130 --> 00:07:10.810
A new border layout.

86
00:07:13.100 --> 00:07:15.320
Is going to be okay.

87
00:07:15.320 --> 00:07:19.010
So we have to use this border layout structure.

88
00:07:22.670 --> 00:07:24.920
And after this.

89
00:07:26.320 --> 00:07:31.630
Our bracket, of course, as we are calling this border layout as a function.

90
00:07:31.690 --> 00:07:35.860
Now a rectangle is drawn at the top.

91
00:07:37.220 --> 00:07:38.390
Rectangle.

92
00:07:40.850 --> 00:07:42.200
And stop.

93
00:07:44.320 --> 00:07:45.460
Top panel.

94
00:07:47.480 --> 00:07:48.130
Not yet.

95
00:07:48.390 --> 00:07:56.360
Once again, that top panel will get a rectangular, bounded kind of structure.

96
00:07:56.980 --> 00:08:01.900
So this top panel is basically this title panel.

97
00:08:02.410 --> 00:08:12.970
And after this, we are going to cover the top left panel, which is for the biased height thing and

98
00:08:12.970 --> 00:08:16.720
again, for the top right, which is for the buttons.

99
00:08:16.720 --> 00:08:21.670
And we have a three panel also for containing the three.

100
00:08:22.150 --> 00:08:29.470
And then we are having an info panel which is basically containing the in order reorder and the post

101
00:08:29.470 --> 00:08:29.830
order.

102
00:08:30.730 --> 00:08:30.980
Okay.

103
00:08:31.150 --> 00:08:38.290
So yes, as we have discussed that this is for the left panel, this is for the top right panel.

104
00:08:38.620 --> 00:08:41.590
This three panel is containing the three.

105
00:08:41.920 --> 00:08:51.040
So everything is here panel, whether it is the title or this beastie height or this buttons or the

106
00:08:51.040 --> 00:08:52.660
tree or the info panel.

107
00:08:52.750 --> 00:08:56.260
So everything is stored inside the panel.

108
00:08:56.290 --> 00:09:03.540
We are using that panel component of the string package and storing everything inside the panel only.

109
00:09:04.180 --> 00:09:06.460
Yes, also this info panel.

110
00:09:06.790 --> 00:09:15.610
Now after like initializing the frame, calling this initialize function, setting panels for everything

111
00:09:15.640 --> 00:09:17.620
coming towards the labels.

112
00:09:17.620 --> 00:09:23.740
So suppose the first thing we want to discuss is the VSD height.

113
00:09:23.740 --> 00:09:31.990
So firstly we have to set a title for that label like the label is going to be Beastie Hide.

114
00:09:32.530 --> 00:09:41.890
Also, there is some form which in which this Beastie Height is written and this answer for the Beastie

115
00:09:41.890 --> 00:09:52.420
Hide is covered inside this pack like we are inputting the like any tree and the algo is calculating

116
00:09:52.420 --> 00:09:57.280
the height for the tree and showing it in the height of beastie.

117
00:09:57.280 --> 00:10:01.150
Answer part So yes, this is a J label.

118
00:10:01.150 --> 00:10:04.810
Of course that is some height, that is some size.

119
00:10:04.810 --> 00:10:09.100
And also okay, so let's see what's next in the row.

120
00:10:09.100 --> 00:10:17.530
So we have covered this top left panel now coming to this top right panel which is containing a text

121
00:10:17.530 --> 00:10:23.050
field for getting the data by the user and add button and a delete button.

122
00:10:23.590 --> 00:10:32.500
So for the like text field we have, we have already declared this text field STF Now again invoking

123
00:10:32.500 --> 00:10:34.300
it here as a method.

124
00:10:34.300 --> 00:10:43.570
So this is going to be a text field initially it is going to contain an empty text, like no text will

125
00:10:43.570 --> 00:10:46.120
be displayed initially in the text field.

126
00:10:46.360 --> 00:10:57.610
The next thing is to set up font for this set font and we are going to set Arial as this text fields

127
00:10:57.610 --> 00:10:58.120
font.

128
00:10:58.150 --> 00:11:05.260
Like when the user will input some odd number inside the text field, then there should be a font for

129
00:11:05.260 --> 00:11:06.130
that text.

130
00:11:07.030 --> 00:11:09.640
I will show you how this is working.

131
00:11:09.730 --> 00:11:13.450
Like suppose here we have entered 400 inside this.

132
00:11:13.840 --> 00:11:22.090
Then that is basically a font style for this, a font thickness like font weight, we can say that and

133
00:11:22.090 --> 00:11:24.240
a bold text in the padding here.

134
00:11:24.280 --> 00:11:27.610
So we will write the code according to that only.

135
00:11:27.760 --> 00:11:30.010
So setting the font as.

136
00:11:31.130 --> 00:11:36.140
Inside this new phone, again, a bracket containing area.

137
00:11:38.130 --> 00:11:41.810
And a font is like a bold font.

138
00:11:41.820 --> 00:11:49.500
So we have to like decide everything in the beginning, only not how this font is going to appear.

139
00:11:49.740 --> 00:11:55.710
So font dot bold and the weight of the font is going to be 20.

140
00:11:57.010 --> 00:11:59.440
So this is all about the fun thing.

141
00:11:59.620 --> 00:12:02.800
Now, the next thing, we are going to cover this.

142
00:12:03.190 --> 00:12:05.500
So we have to enclose this inside.

143
00:12:06.600 --> 00:12:09.990
This part, only the initialize function.

144
00:12:10.140 --> 00:12:14.220
Now the next thing is yes, the button.

145
00:12:14.220 --> 00:12:18.510
And so we have to look up to the add button.

146
00:12:20.490 --> 00:12:20.850
Okay.

147
00:12:20.850 --> 00:12:24.200
So after the text feel we are coming to the end button.

148
00:12:24.210 --> 00:12:30.490
So we are creating our button j button components from the string library here.

149
00:12:30.540 --> 00:12:33.240
Java Export String J button.

150
00:12:33.240 --> 00:12:40.860
So this J button is coming from that string library only and it is containing a text added here you

151
00:12:40.860 --> 00:12:45.660
can see that this button is created in this way.

152
00:12:46.080 --> 00:12:51.060
We have set a font style, a bold font and the font weight for that.

153
00:12:51.120 --> 00:12:58.650
Now we have added an action listener to that add button how that button is going to look.

154
00:12:59.520 --> 00:13:06.330
So and how that button is going to work, we have to decide it inside that initialize function only.

155
00:13:06.960 --> 00:13:14.880
Similarly for the delete button, the add button and delete button are totally similar to each other.

156
00:13:15.910 --> 00:13:21.620
The font style and the font weight and everything is going to seem like look like the same thing.

157
00:13:21.640 --> 00:13:26.080
Just the difference is that we are adding action list.

158
00:13:26.350 --> 00:13:33.380
So this is like this action list that will be invoked with the help of this weight and data and for

159
00:13:33.400 --> 00:13:40.810
delete it is going to invoke with be then delete now are creating a label for the terror cells also

160
00:13:40.810 --> 00:13:43.860
like that in order post order and pre order.

161
00:13:43.870 --> 00:13:50.290
So basically this is containing a label title and answer for that label.

162
00:13:50.290 --> 00:13:54.880
So this is the text in order and the answer for this in order.

163
00:13:55.240 --> 00:14:02.560
So basically there are two things a label and the answer so in order label is covered.

164
00:14:02.560 --> 00:14:09.850
Using this we have used times New Roman as the font and we have added that to the info panel.

165
00:14:10.870 --> 00:14:19.600
Using label in order for the answer we have created and set in order function the object.

166
00:14:19.600 --> 00:14:25.030
We can say that and we will invoke this using our answer in order.

167
00:14:25.930 --> 00:14:26.090
Okay.

168
00:14:26.230 --> 00:14:29.800
So this info panel is added in the form of a box.

169
00:14:29.800 --> 00:14:33.520
Like you can see that this is a box.

170
00:14:33.520 --> 00:14:34.990
Basically it is resizable.

171
00:14:34.990 --> 00:14:42.310
It can increase its size as the members inside the tree will increase, then it will change its size

172
00:14:42.310 --> 00:14:43.000
accordingly.

173
00:14:43.330 --> 00:14:49.600
So these things are going to work similarly for the pre order and post order also.

174
00:14:50.260 --> 00:14:59.470
Yes, we are going to add all three of them inside the frame with the help of info panel add as this

175
00:14:59.470 --> 00:15:01.930
is consisting inside the info panel.

176
00:15:01.960 --> 00:15:06.430
So we are adding this to the frame with the help of info panel.

177
00:15:06.730 --> 00:15:13.660
Add given there are dimensions for the text field, like how we can add this.

178
00:15:14.790 --> 00:15:22.320
There is a length like a dimension for the text field which is containing this in order answer, preorder,

179
00:15:22.320 --> 00:15:23.940
answer and post utterance.

180
00:15:24.750 --> 00:15:30.600
Now suppose that there is no notes inside the tree.

181
00:15:30.630 --> 00:15:32.560
Suppose the tree is empty.

182
00:15:32.580 --> 00:15:37.670
Then here we are going to display that we it stays empty in all three of them.

183
00:15:37.680 --> 00:15:44.670
So basically this label is containing beasties empty in the answer section if there is no node inside

184
00:15:44.670 --> 00:15:45.240
the tree.

185
00:15:46.110 --> 00:15:53.330
So this was all about the like labels inside the panel, like how we are adding the labels for the height,

186
00:15:53.340 --> 00:15:55.920
the add button, the text field and everything.

187
00:15:56.700 --> 00:16:00.000
So this text field is request, focus and window.

188
00:16:00.000 --> 00:16:03.360
We have to enable these text fields focus in the window.

189
00:16:03.480 --> 00:16:10.770
Initially there is no text, but when we enter any text, then there are cursor is appearing that yes,

190
00:16:10.770 --> 00:16:14.750
we have entered a text and this is for the title panel.

191
00:16:14.910 --> 00:16:22.380
So we have discussed it in the first part while we were discussing the in working of this application

192
00:16:22.380 --> 00:16:25.140
that there is a closed button and there is a title.

193
00:16:25.410 --> 00:16:30.150
So yes, this was all about this initialize function of the frame.
