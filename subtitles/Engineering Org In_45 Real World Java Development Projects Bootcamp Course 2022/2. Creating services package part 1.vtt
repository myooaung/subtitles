WEBVTT
1
00:00:01.230 --> 00:00:08.820
So we have already seen we are going with our project and that will be establish our team.

2
00:00:08.820 --> 00:00:13.830
So I will tell you how we can proceed with further regarding to this.

3
00:00:15.660 --> 00:00:16.610
Different things.

4
00:00:16.620 --> 00:00:17.490
So.

5
00:00:18.930 --> 00:00:21.090
Currently you can check here.

6
00:00:21.690 --> 00:00:22.980
I created everything.

7
00:00:22.980 --> 00:00:27.570
So now in the XML I added one theme dependency.

8
00:00:28.140 --> 00:00:31.140
You can add it directly from the dependency manager.

9
00:00:31.530 --> 00:00:35.730
Go do this or you can do these packages also.

10
00:00:35.970 --> 00:00:44.700
So here you can check there are only one packages added which is basically this so packages view.

11
00:00:44.700 --> 00:00:46.380
So what I'm going to tell you.

12
00:00:48.750 --> 00:00:52.140
Basically what we can do is very easy.

13
00:00:52.140 --> 00:00:54.300
Things just go to this package.

14
00:00:56.110 --> 00:00:56.590
He didn't.

15
00:01:00.880 --> 00:01:02.020
All right, click.

16
00:01:02.710 --> 00:01:03.730
Go to New.

17
00:01:04.090 --> 00:01:10.390
It will take some time for the first thing or after that it will automatically do your thing, then

18
00:01:10.390 --> 00:01:19.660
go to package your packages package or don't delete this part, but keep it this further part.

19
00:01:19.660 --> 00:01:25.120
I'm going to add service and hit enter so it will create me a service package for me.

20
00:01:25.630 --> 00:01:33.520
So in that service package, what I'm going to do, I'm going to add some services or Java course classes.

21
00:01:33.760 --> 00:01:37.270
So I will show you how I'm going to add that part also.

22
00:01:47.300 --> 00:01:55.150
So let us see how I'm going to add or let me add one thing here in the services it.

23
00:01:56.100 --> 00:01:57.150
That thing again.

24
00:01:58.430 --> 00:02:02.060
Would Java class in view employee source.

25
00:02:02.830 --> 00:02:06.370
So it will create one class, default class.

26
00:02:06.370 --> 00:02:09.490
It will create for you for this purpose.

27
00:02:10.800 --> 00:02:11.350
Oh.

28
00:02:11.370 --> 00:02:12.570
So this is my employee.

29
00:02:13.050 --> 00:02:15.270
Let's see how we are going to do this class and.

30
00:02:18.150 --> 00:02:18.660
So.

31
00:02:20.360 --> 00:02:21.200
Let me.

32
00:02:25.380 --> 00:02:25.740
Okay.

33
00:02:25.770 --> 00:02:27.120
So now we're done with this.

34
00:02:27.120 --> 00:02:27.720
So.

35
00:02:29.340 --> 00:02:30.550
Oh, no.

36
00:02:30.570 --> 00:02:36.900
You need to three different different examples currently, which is considered some model and everything.

37
00:02:36.900 --> 00:02:39.180
We are going to later take that part.

38
00:02:39.540 --> 00:02:46.600
But let me change this class to interface so I will tell you what is interface.

39
00:02:46.870 --> 00:02:51.570
Interface is nothing but some percent abstraction.

40
00:02:51.570 --> 00:02:54.390
You can see it will achieve me.

41
00:02:54.390 --> 00:02:58.860
It will give me 100% abstraction for this purpose.

42
00:02:58.860 --> 00:03:02.190
So what I'm going to do, I'm going to add some list of employees.

43
00:03:02.190 --> 00:03:04.380
I'm going to create a list of employees here.

44
00:03:05.070 --> 00:03:07.260
So let me add list.

45
00:03:09.520 --> 00:03:13.240
So I'm going to add one class also to face that part.

46
00:03:13.240 --> 00:03:19.090
So I'm going to add that class directly here because I'm giving the name currently.

47
00:03:19.090 --> 00:03:23.680
The name is not accessible here, as you can see.

48
00:03:25.980 --> 00:03:28.170
So I will create that methods later.

49
00:03:28.170 --> 00:03:30.720
But get all.

50
00:03:35.100 --> 00:03:36.300
In not.

51
00:03:41.240 --> 00:03:44.990
So currently these are things giving me error because I haven't created any employee part.

52
00:03:44.990 --> 00:03:47.420
So I will tell you how I'm going to add that part.

53
00:03:47.900 --> 00:03:49.850
Then we'll save employee.

54
00:03:49.850 --> 00:03:51.880
I'm going to create one method void.

55
00:03:52.580 --> 00:03:53.070
Stay.

56
00:03:54.270 --> 00:04:00.930
Employee which is basically saving that employee part with again same.

57
00:04:02.220 --> 00:04:02.760
Chloe.

58
00:04:04.010 --> 00:04:04.670
Employee.

59
00:04:04.910 --> 00:04:11.660
So what I'm going to do is I'm I created one method, same employee which consists employee.

60
00:04:11.660 --> 00:04:18.860
So I will create that class Java class later in another package, but it will invoke that employee and

61
00:04:18.860 --> 00:04:21.320
it will store that employee the saving part.

62
00:04:21.440 --> 00:04:26.720
So now with ID part, ID part, I'm going to switch.

63
00:04:26.720 --> 00:04:29.870
So employee get employee by ID I need to create.

64
00:04:29.900 --> 00:04:34.670
So let me create employee.

65
00:04:34.670 --> 00:04:36.530
So I'm adding here.

66
00:04:36.560 --> 00:04:41.960
I already created some part, so I'm going to add that part in later.

67
00:04:42.170 --> 00:04:46.970
So I'm mentioning this part earlier, but it will be very helpful by.

68
00:04:49.070 --> 00:04:50.570
Employee buy ID.

69
00:04:52.980 --> 00:04:53.610
Later part.

70
00:04:56.370 --> 00:04:56.940
And.

71
00:04:58.730 --> 00:04:59.740
Long 80.

72
00:05:01.420 --> 00:05:02.170
So.

73
00:05:04.830 --> 00:05:08.590
Let me go with the camel case only so there will be no error.

74
00:05:09.180 --> 00:05:10.110
So this is the camel case.

75
00:05:10.620 --> 00:05:11.020
Then.

76
00:05:11.020 --> 00:05:15.150
Now again, create some.

77
00:05:22.290 --> 00:05:23.550
Delete employee.

78
00:05:24.910 --> 00:05:26.610
So I'm going to delete employee.

79
00:05:27.840 --> 00:05:29.180
But I'd.

80
00:05:31.750 --> 00:05:32.530
Long.

81
00:05:34.690 --> 00:05:35.320
IDM.

82
00:05:36.580 --> 00:05:44.270
And the next part of what I'm going to do is I'm going to add one page here and I will tell you how

83
00:05:44.290 --> 00:05:47.120
I'm going to work that on that page in the letter.

84
00:05:47.350 --> 00:05:55.350
So first thing, you may hear some errors, but these ignore these errors.

85
00:05:55.360 --> 00:05:57.670
I'm going to create employee part later.

86
00:05:58.120 --> 00:06:01.480
But let me add here, which is basically.

87
00:06:03.740 --> 00:06:07.940
When library which is very simple import or not.

88
00:06:07.940 --> 00:06:10.190
Spring spring framework.

89
00:06:12.150 --> 00:06:15.480
Then I need to add your data.

90
00:06:17.430 --> 00:06:18.750
Dot domain.

91
00:06:19.170 --> 00:06:21.660
You can add star but.

92
00:06:22.830 --> 00:06:24.570
I'm going to add your page.

93
00:06:27.720 --> 00:06:32.820
So the library to incorporate with data with the pages.

94
00:06:32.820 --> 00:06:35.760
So this is the basic library and going to use it.

95
00:06:36.630 --> 00:06:41.430
So in the next part, what I'm going to tell you or the spring and everything.

96
00:06:41.430 --> 00:06:47.280
So to see what the spring frame was and how it's going to go, well, I told you about the spring,

97
00:06:47.280 --> 00:06:49.470
but what is the functionality of spring?

98
00:06:49.740 --> 00:06:52.680
Spring, having some inversion of control, which is basically.

99
00:06:52.680 --> 00:06:53.550
I see.

100
00:06:54.000 --> 00:06:57.390
So there are different patterns to remove the dependency of programming code.

101
00:06:57.540 --> 00:07:03.060
So if we have learned Java, you need some external libraries.

102
00:07:03.060 --> 00:07:07.500
Java is also for that purpose, but inversion of control.

103
00:07:08.760 --> 00:07:09.810
What we can do.

104
00:07:10.500 --> 00:07:14.400
We are not performing a tight coupling in the dependency.

105
00:07:14.520 --> 00:07:22.730
Tight complete coupling means if one is dependent on second, then if one value is changed.

106
00:07:22.740 --> 00:07:24.570
Second values also change.

107
00:07:24.570 --> 00:07:27.930
So that's very dangerous in deploying any application.

108
00:07:28.200 --> 00:07:32.470
So regardless of that, what you can do, you can use couple things here.

109
00:07:33.000 --> 00:07:39.200
Now, let me consider one example class employee which contains address address within this class.

110
00:07:39.220 --> 00:07:44.940
Imagine class and employee and I'm sending address is equal to new address directly to the class.

111
00:07:45.600 --> 00:07:53.340
So what happens if in the employee class I'm changing the value of some different attributes, it will

112
00:07:53.340 --> 00:07:55.830
automatically change that part in address also.

113
00:07:57.290 --> 00:07:57.840
Cool.

114
00:07:57.860 --> 00:08:00.300
So that's really interesting why they need planting.

115
00:08:00.350 --> 00:08:07.430
So it is tight coupling but inversion of control you can take you can use this IOC also you can use.

116
00:08:08.030 --> 00:08:14.880
But the beautiful thing of spring is you can use injection dependency so that I added dependency part

117
00:08:14.900 --> 00:08:17.870
in XML is basically injection dependency.

118
00:08:18.290 --> 00:08:24.560
It's advantages of injection dependency or dependency injection is loosely coupled, easy to maintain,

119
00:08:24.590 --> 00:08:28.670
easy to test, because you can take that dependency, set it or not.

120
00:08:28.700 --> 00:08:34.160
It's not very tough job for that purpose, but you can choose that part later.

121
00:08:35.660 --> 00:08:37.550
So I will tell you advantages.

122
00:08:37.580 --> 00:08:44.690
These pre-defined plans come with gbk hibernate technologies already, so no need to create from this

123
00:08:44.700 --> 00:08:45.200
dictum.

124
00:08:45.470 --> 00:08:51.560
You you are getting some default templates for that purpose, like creating steam statements, creating

125
00:08:51.560 --> 00:08:52.160
connection.

126
00:08:52.160 --> 00:08:56.060
No need to require to add that you are you just need to add the properties.

127
00:08:56.060 --> 00:09:03.380
It's very easy then lose coupling that I told you using dependency injection string framework is easy

128
00:09:03.380 --> 00:09:04.100
to maintain.

129
00:09:04.700 --> 00:09:10.280
Again, easy to do is because its application are required to server, but in the spring framework there

130
00:09:10.280 --> 00:09:11.000
is one embedded.

131
00:09:11.020 --> 00:09:15.980
So local, local or state server is already embedded in that.

132
00:09:15.980 --> 00:09:20.090
So no need to worry about how I'm going to add external server.

133
00:09:20.480 --> 00:09:24.770
So for the requirements also, I'm not mentioning you need external server, you just need a string

134
00:09:24.770 --> 00:09:25.250
framework.

135
00:09:26.480 --> 00:09:28.760
That part is already added in the spring.

136
00:09:28.760 --> 00:09:29.150
Simple.

137
00:09:30.960 --> 00:09:36.120
So let me move to the ID part, and we already created this part.

138
00:09:36.570 --> 00:09:43.790
So in the project thing you can say here, in the next case I'm going to add some things, but I added

139
00:09:43.800 --> 00:09:44.730
interfaces.

140
00:09:44.730 --> 00:09:45.630
I will tell you later.

141
00:09:45.630 --> 00:09:47.070
You will understand that part later.

142
00:09:47.400 --> 00:09:48.270
I hope you understand.

143
00:09:48.720 --> 00:09:49.260
Thank you.
