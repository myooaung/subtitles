1
00:00:00,900 --> 00:00:01,210
Okay.

2
00:00:01,260 --> 00:00:09,180
So till now we have created all the classes which is going to be required inside the project, the main

3
00:00:09,180 --> 00:00:17,190
class, the home class, the schedule class, the help and then class, and then this plot part.

4
00:00:17,190 --> 00:00:19,680
We are going to conclude this project.

5
00:00:19,680 --> 00:00:26,220
Basically, we are going to create the final class, the timeline class, which is going to contain

6
00:00:26,220 --> 00:00:31,500
this timeline, which we can call the main part of the project head only.

7
00:00:31,500 --> 00:00:39,420
We are like showing how the tasks are aligned inside this number line type of structure that is a done

8
00:00:39,420 --> 00:00:43,920
button and a timer which is running at two places.

9
00:00:43,920 --> 00:00:50,340
So this timeline class is going to contain our most important part of this project.

10
00:00:50,370 --> 00:00:55,920
This is aligning the tasks accordingly we have set inside this scheduled class.

11
00:00:55,920 --> 00:01:01,740
So let us start creating the timeline class inside the Z folder only.

12
00:01:01,740 --> 00:01:05,940
So firstly, create a file timeline dot java.

13
00:01:07,440 --> 00:01:13,950
And yes, so the timeline class is created, extending it to G panel first.

14
00:01:14,520 --> 00:01:25,500
And inside this class, we are going to firstly set the ArrayList, which is going to be the yes.

15
00:01:25,500 --> 00:01:33,630
So this ArrayList is going to contain this task B, C, D, and it is going to be this as well as we

16
00:01:33,630 --> 00:01:38,280
do not know in the beginning how many tasks the user want to enter.

17
00:01:38,280 --> 00:01:43,230
So we will be using ArrayList only in order to set that tasks.

18
00:01:43,230 --> 00:01:50,340
So again, ArrayList and this ArrayList is going to be in a string format.

19
00:01:50,400 --> 00:01:58,950
So calling string here, closing this list, and we will simply name this error list as S-T.

20
00:01:58,980 --> 00:02:07,800
So is this text is going to contain the list of the tasks we are adding to the timeline, a string for

21
00:02:07,800 --> 00:02:08,940
on top.

22
00:02:09,600 --> 00:02:11,610
So there is a top timer.

23
00:02:12,600 --> 00:02:14,070
We are having three panels.

24
00:02:14,070 --> 00:02:16,570
Basically the top is containing a timer.

25
00:02:16,770 --> 00:02:24,290
The middle is containing the number line kind of structure, which is like containing the clock 12 to

26
00:02:24,290 --> 00:02:27,450
12 in the day and then 12 to 12 through the night.

27
00:02:27,630 --> 00:02:34,230
So the middle has m the bottom should be B and.

28
00:02:35,030 --> 00:02:41,620
Oh, find hours, find minute integer kind of data type should be declared here.

29
00:02:41,630 --> 00:02:47,210
So integer find hours integer find minutes.

30
00:02:48,350 --> 00:02:55,070
Like how many minutes and hours are left for a specific task to be completed?

31
00:02:55,940 --> 00:02:58,370
And the base, of course.

32
00:02:59,440 --> 00:03:03,940
So, yes, this is all we need to declare inside it.

33
00:03:05,290 --> 00:03:08,890
And the message here or the message which we are displaying.

34
00:03:08,890 --> 00:03:18,970
And then it should also be like taken from this timeline, only as once we hit the done button, then

35
00:03:18,970 --> 00:03:20,770
only the message is updated.

36
00:03:20,770 --> 00:03:23,530
There are wasted or saved left.

37
00:03:23,560 --> 00:03:25,690
How many time we wasted or saved?

38
00:03:25,870 --> 00:03:29,500
Now creating that constructor timeline.

39
00:03:31,010 --> 00:03:39,940
And inside it we are going to pass again base B as the bottom is already set to be.

40
00:03:39,950 --> 00:03:41,750
So base B.

41
00:03:42,840 --> 00:03:45,900
And inside it we are going to call the base.

42
00:03:45,900 --> 00:03:51,990
So the base will be showing this card layout which will contain this appearance.

43
00:03:51,990 --> 00:03:53,250
So, yes.

44
00:03:53,940 --> 00:03:57,030
On the next thing is the setting layout part.

45
00:03:57,030 --> 00:04:03,880
So there are three layers the middle, the top and the bottom, as we have already discussed.

46
00:04:03,900 --> 00:04:07,950
So setting the layout as grid layout.

47
00:04:10,890 --> 00:04:18,840
And that great layout is going to be three ish to one basically as there are three parts in the frame.

48
00:04:19,290 --> 00:04:27,780
So three ish to one a bracket inside it and a bracket again to close this new grid layout.

49
00:04:28,020 --> 00:04:30,450
So we are setting this layout.

50
00:04:30,480 --> 00:04:32,820
So set layout.

51
00:04:34,280 --> 00:04:34,640
Okay.

52
00:04:34,640 --> 00:04:36,740
So let us handle it first.

53
00:04:37,430 --> 00:04:41,930
We just have to set the layout head only so new.

54
00:04:43,270 --> 00:04:44,440
Great layout.

55
00:04:45,400 --> 00:04:46,540
Please do one.

56
00:04:47,900 --> 00:04:48,930
Comma one.

57
00:04:49,220 --> 00:04:49,940
Perfect.

58
00:04:50,150 --> 00:04:52,230
So this grade level part is set.

59
00:04:52,250 --> 00:04:57,920
Now we have to declare variables for finding message hours and minutes.

60
00:04:57,930 --> 00:05:00,710
So let us copy it from here.

61
00:05:01,460 --> 00:05:04,580
Message and all three of them.

62
00:05:04,730 --> 00:05:08,690
So pasting it and removing the data type.

63
00:05:09,650 --> 00:05:13,070
And setting it to an empty string in the beginning.

64
00:05:13,070 --> 00:05:24,380
So the message is not containing anything that our size zero and the minutes are also zero for the message.

65
00:05:25,430 --> 00:05:27,140
So yes, this is all.

66
00:05:28,220 --> 00:05:29,390
Also the.

67
00:05:30,160 --> 00:05:32,260
Timeline is null in the beginning.

68
00:05:32,260 --> 00:05:37,360
That is not passed since inside the timeline and the end page.

69
00:05:38,200 --> 00:05:39,770
This end is for the end page.

70
00:05:39,790 --> 00:05:43,120
Everything is declared as null in the beginning.

71
00:05:43,660 --> 00:05:49,630
So yes, this is all we need to declare inside this timeline class.

72
00:05:49,660 --> 00:05:57,910
Now let us move to this this setting colors like colors, type of structure inside the clock.

73
00:05:57,910 --> 00:06:02,620
Number nine, let how the tasks should be attached inside this timeline.

74
00:06:02,950 --> 00:06:09,460
Now coming to the layout of this timeline page first what it is actually containing, there are three

75
00:06:09,460 --> 00:06:10,150
parts.

76
00:06:10,150 --> 00:06:14,860
The above part is containing a timer which is continuously moving.

77
00:06:14,860 --> 00:06:18,400
We have encountered it in the working of the application part.

78
00:06:18,550 --> 00:06:21,010
These two timers are showing the same time.

79
00:06:21,010 --> 00:06:28,210
That is a middle, middle of the frame which is containing a black border number clock line.

80
00:06:28,210 --> 00:06:35,500
We can say that it is a clock number line and that is a bottom which is containing a done button.

81
00:06:35,500 --> 00:06:43,570
So this done button is displaying the name of the task which we have created and a timer is also attached

82
00:06:43,570 --> 00:06:44,380
to it also.

83
00:06:44,650 --> 00:06:51,670
So inside this error list, we have attached all three of the panels, the top one, the middle one

84
00:06:51,670 --> 00:06:55,960
and the bottom one, and added all three of them inside the frame.

85
00:06:55,960 --> 00:07:04,390
This revalidate and repaint is updating it according to the user updates the tasks every day.

86
00:07:04,810 --> 00:07:07,330
So suppose users enter a task.

87
00:07:07,330 --> 00:07:10,390
So this will paint itself again.

88
00:07:10,390 --> 00:07:14,020
And if the task is done then the new task is again created.

89
00:07:14,020 --> 00:07:17,650
Then it will again repaint itself and revalidate.

90
00:07:17,650 --> 00:07:23,620
So revalidate is basically for removing all of the layout which is present and then again repainting

91
00:07:23,620 --> 00:07:23,860
it.

92
00:07:23,860 --> 00:07:28,330
It is continuously changing whenever the user enters any new tasks.

93
00:07:28,450 --> 00:07:33,220
And also we have encountered that the colors are also changing every time.

94
00:07:33,220 --> 00:07:39,550
So revalidate and repainting that enables in Java to update the frame.

95
00:07:39,640 --> 00:07:44,800
Now this top we are extending it as the panel also attaching action.

96
00:07:45,400 --> 00:07:50,380
So this top is basically containing the frame, top timer.

97
00:07:50,380 --> 00:07:59,860
The frame is containing a timer at the top and this timer is like a used with the help of timer import.

98
00:07:59,860 --> 00:08:07,420
We have made our above header, simple date format and calendar which is taking the date like suppose

99
00:08:07,420 --> 00:08:13,600
to this date the calendar takes checks the time or what is the time right now.

100
00:08:13,600 --> 00:08:19,000
So check date and time is a component we have used from the AWP library.

101
00:08:19,720 --> 00:08:25,470
So according to the today's date, whatever the date we have created our tasks.

102
00:08:25,480 --> 00:08:27,370
This will update itself.

103
00:08:27,370 --> 00:08:30,460
Suppose that we have created the tasks to today.

104
00:08:30,580 --> 00:08:37,180
Right now it is suppose a 6 p.m. or so and we have created a task for 9 to 10 p.m..

105
00:08:37,210 --> 00:08:46,060
Then this timer will update itself according to that date that yes, we have 4 hours, 2:10 p.m. and

106
00:08:46,060 --> 00:08:49,840
3 hours to 9 p.m. right now if suppose it's 6 p.m..

107
00:08:49,840 --> 00:08:52,780
So it will update itself accordingly.

108
00:08:53,500 --> 00:09:00,070
And this is how this calendar function is updating the timer every time the user creates a new task.

109
00:09:00,190 --> 00:09:04,780
Now this middle is containing a number type of layout.

110
00:09:04,780 --> 00:09:09,970
We can see that a number clock line or a clock number line, whatever we call it.

111
00:09:09,970 --> 00:09:14,380
And it is the setting of white color line.

112
00:09:14,380 --> 00:09:21,700
And that specific interval which the user has set the tasks for will be painted in a different color.

113
00:09:21,700 --> 00:09:27,040
So we have created that also with the help of this draw rectangle.

114
00:09:27,070 --> 00:09:35,110
So basically it is a rectangle which we have drawn and there are pixels for the number of tasks we have

115
00:09:35,110 --> 00:09:35,890
created.

116
00:09:35,920 --> 00:09:40,660
The different colors rectangle are present for different number of tasks.

117
00:09:40,660 --> 00:09:44,140
So this middle is responsible for that.

118
00:09:44,140 --> 00:09:45,820
Now coming to the bottom.

119
00:09:45,820 --> 00:09:50,830
So what this bottom part is, so we have a task, the action listener to the bottom.

120
00:09:50,980 --> 00:09:54,700
We are not attaching actions to all of them, but just to the bottom.

121
00:09:54,700 --> 00:10:01,570
So this bottom is containing a done button on hitting the done button that we are navigating to the

122
00:10:01,570 --> 00:10:02,230
end page.

123
00:10:02,230 --> 00:10:08,260
And it is showing a message that what is the number of time we have saved or wasted in order to complete

124
00:10:08,260 --> 00:10:09,100
our tasks?

125
00:10:09,100 --> 00:10:17,080
So the application is calculating the time on which we have hit the done button and it is setting itself

126
00:10:17,080 --> 00:10:19,540
like any time minus time of hours.

127
00:10:19,540 --> 00:10:25,750
So what was that time we have sent for the task to end basically the deadline we have sent and what

128
00:10:25,750 --> 00:10:28,960
is the time right now it will subtracted self and then.

129
00:10:29,080 --> 00:10:31,990
Sure the message to the end paid accordingly.

130
00:10:32,020 --> 00:10:39,140
So this is showing the end page that whether the user has saved that time or wasted their time.

131
00:10:39,160 --> 00:10:41,140
So, yes, and this is the reminder.

132
00:10:41,140 --> 00:10:47,130
So suppose if the user is about to complete the task but haven't completed the task yet.

133
00:10:47,140 --> 00:10:51,810
So a reminder will also shown in the frame on the top of the left panel.

134
00:10:51,820 --> 00:10:57,850
So let us try running the application and check that how actually all of them are working.

135
00:10:57,850 --> 00:10:59,320
So run Java.

136
00:11:00,920 --> 00:11:01,250
Okay.

137
00:11:01,250 --> 00:11:02,410
So there are some errors.

138
00:11:02,420 --> 00:11:03,890
Let us try to debug it.

139
00:11:04,520 --> 00:11:09,950
So we need a basis here to complete the whole class.

140
00:11:10,310 --> 00:11:17,300
We missed this race and now let us again try to run the application in order to check that it is working

141
00:11:17,300 --> 00:11:18,530
perfectly or not.

142
00:11:19,700 --> 00:11:21,770
So are the open.

143
00:11:22,040 --> 00:11:26,010
The image, a path linking is not working, so we will fix it.

144
00:11:26,030 --> 00:11:30,350
Now let us try to check that whether the task adding is working perfectly or not.

145
00:11:30,350 --> 00:11:40,820
So let us try to add one task A, B, C and set the time 9 p.m. for the task to 10 p.m. or we can say

146
00:11:40,820 --> 00:11:41,720
11 p.m..

147
00:11:42,080 --> 00:11:44,240
So yes, this time goes well.

148
00:11:44,930 --> 00:11:48,950
This is a busy task we have created and hit can continue.

149
00:11:48,950 --> 00:11:49,670
So perfect.

150
00:11:49,670 --> 00:11:52,250
The task is created inside the timeline.

151
00:11:52,250 --> 00:11:59,510
The time left for us to complete the task is four hour, 44 minutes and a beautiful clock number line

152
00:11:59,510 --> 00:12:02,390
is appearing in the timeline dot java class.

153
00:12:02,390 --> 00:12:08,420
So this is the title, this is the close operation, this is the resize button and the time.

154
00:12:08,420 --> 00:12:15,830
So suppose we have already completed this task ABC and we want to hit on this done with ABC button to

155
00:12:15,830 --> 00:12:20,630
check that what is the time we have saved or wasted in order to complete this task?

156
00:12:20,630 --> 00:12:26,120
So I am writing this down button and the end pages are pairing, which is showing a message that you

157
00:12:26,120 --> 00:12:28,790
have saved 4 hours and 42 minutes.

158
00:12:28,790 --> 00:12:32,510
So this is showing a message that I have saved this time.

159
00:12:32,540 --> 00:12:39,230
Now I will again go back to the home page and check that if the help page made perfectly or not.

160
00:12:39,230 --> 00:12:41,270
So yes, this is the help page.

161
00:12:41,270 --> 00:12:46,760
There are three questions which we have added to one, Q2, Q3 and the three answers to the question.

162
00:12:46,790 --> 00:12:51,290
Again, there is a back to home page button on hitting this back to home page button.

163
00:12:51,290 --> 00:12:54,830
We will be navigated back to the home page of our application.

164
00:12:54,830 --> 00:13:00,920
Now let us try to fix the image issue that while the image is not appearing here, let us try to fix

165
00:13:00,920 --> 00:13:01,130
it.

166
00:13:01,610 --> 00:13:06,830
Okay, so coming back to the homework assignment, check what's wrong with the image linking.

167
00:13:06,830 --> 00:13:12,290
So yes, this is the get image and the look at the path of this image.

168
00:13:12,290 --> 00:13:16,220
So this image is located outside the services folder.

169
00:13:16,220 --> 00:13:23,870
So to come out of this RC folder, we have to add a dot and a backslash or in order to link the image

170
00:13:23,870 --> 00:13:24,620
properly.

171
00:13:24,620 --> 00:13:32,510
Now let us try to run again and check that if image is coming or not perfect, the image is visible

172
00:13:32,510 --> 00:13:32,990
now.

173
00:13:33,020 --> 00:13:36,710
Now these are home pages are completely working fine.

174
00:13:36,740 --> 00:13:38,810
That is a start now button.

175
00:13:39,080 --> 00:13:41,150
We can add tasks again.

176
00:13:41,300 --> 00:13:48,350
If we add five tasks then five add a list manner of tasks and it will be updating.

177
00:13:48,350 --> 00:13:56,540
Also, this is for the mutability and resize ability check of this schedule class which we have created

178
00:13:56,540 --> 00:13:57,140
here.

179
00:13:57,140 --> 00:14:02,930
So this was all about this time management tool we were making today.

180
00:14:02,960 --> 00:14:08,510
So this was the complete code of this project which we were discussing right now.

181
00:14:08,510 --> 00:14:15,410
And I would encourage you all to try this project on your own to learn more and more about these concepts

182
00:14:15,410 --> 00:14:17,780
we were looking up till now.

183
00:14:17,780 --> 00:14:23,840
So I would thank you all for joining this session of Time Management Tool Project.

184
00:14:23,840 --> 00:14:31,070
And again, I would suggest you all to try making this project on your own and learn this wonderful

185
00:14:31,070 --> 00:14:31,940
application.

186
00:14:31,940 --> 00:14:33,470
So thank you.

187
00:14:33,500 --> 00:14:35,390
I wish you a happy learning.
