1
00:00:00,090 --> 00:00:00,390
Okay.

2
00:00:00,390 --> 00:00:07,350
So till the last part, we have created our main function, the timeline and the home dot java class.

3
00:00:07,350 --> 00:00:12,060
So these two classes, we have already created the timeline around the home.

4
00:00:12,090 --> 00:00:17,730
This is responsible for testing and running of the application and this is responsible for the home

5
00:00:17,730 --> 00:00:19,080
page which is appearing here.

6
00:00:19,260 --> 00:00:27,030
Now, in this part, we are going to create this schedule inside the scheduled Java file and see how

7
00:00:27,030 --> 00:00:27,690
it works.

8
00:00:27,690 --> 00:00:30,690
So what are the functionalities we need to attach inside?

9
00:00:31,050 --> 00:00:37,860
So initially a text field and a continue button should appear and the bottom should contain a continue

10
00:00:37,860 --> 00:00:38,520
button.

11
00:00:38,520 --> 00:00:46,770
Once we hit any integer head then or that number of steps which should appear in the frame where whether

12
00:00:46,770 --> 00:00:48,060
we hit 510.

13
00:00:48,060 --> 00:00:56,160
So accordingly that number of text fields containing a task dash like whatever one, two, three, four,

14
00:00:56,160 --> 00:00:56,700
five.

15
00:00:57,120 --> 00:01:03,510
According to that, we have to contain that much of the text field to attach tasks to our frame.

16
00:01:03,510 --> 00:01:09,090
So let's first create a file inside the SRT folder.

17
00:01:09,090 --> 00:01:15,090
So new file and we are going to name it as the old dot java.

18
00:01:15,450 --> 00:01:15,740
Okay.

19
00:01:15,810 --> 00:01:19,320
So this is how this scheduled class is created.

20
00:01:19,470 --> 00:01:25,410
Now, again, we are going to extend it to the panel in a similar way.

21
00:01:25,410 --> 00:01:27,450
We were extending all of them.

22
00:01:29,160 --> 00:01:34,800
So this import is made and also we are going to implement action listeners to the button.

23
00:01:34,980 --> 00:01:39,120
So implement action listeners.

24
00:01:41,680 --> 00:01:43,990
Actually, it's not here.

25
00:01:44,070 --> 00:01:47,500
Okay, so this class is made for this schedule.

26
00:01:47,530 --> 00:01:54,340
Now, inside this class, we are going to declare some of the variables private base.

27
00:01:54,580 --> 00:01:59,410
So we have to declare base in all of the classes we are making.

28
00:01:59,680 --> 00:02:05,740
You must have been observing this private for that.

29
00:02:05,740 --> 00:02:09,100
How many tasks we have to complete.

30
00:02:09,100 --> 00:02:12,460
So we should name it of how many?

31
00:02:13,250 --> 00:02:16,640
And calling it as a chimp in short form.

32
00:02:17,000 --> 00:02:19,340
So how many a chimp?

33
00:02:20,090 --> 00:02:23,750
And that's how many tasks we have to complete now.

34
00:02:23,750 --> 00:02:27,860
A private variable for the tasks.

35
00:02:28,280 --> 00:02:35,360
So the tasks list which we are going to create for all the tasks, but whatever the number is.

36
00:02:36,430 --> 00:02:39,640
And Andre button for continues so private.

37
00:02:41,960 --> 00:02:42,980
De Botton.

38
00:02:44,990 --> 00:02:51,500
For Conte Conte contest for the continue button.

39
00:02:51,620 --> 00:02:55,520
Now we have to store the tasks in a form.

40
00:02:55,790 --> 00:02:57,200
It should be resizable.

41
00:02:57,200 --> 00:02:57,920
Definitely.

42
00:02:57,920 --> 00:03:06,050
As initially we do not know that how many tasks we want to add to the timeline so we can use our data

43
00:03:06,050 --> 00:03:08,990
type analyst we already talked about analyst.

44
00:03:09,010 --> 00:03:12,580
Analyst is an expanded form of error.

45
00:03:12,590 --> 00:03:16,520
It gives resizable content like we can.

46
00:03:16,520 --> 00:03:22,850
We do not have to fix any size to the analyst, but we only contain five or six elements.

47
00:03:23,270 --> 00:03:24,350
It is mutable.

48
00:03:24,350 --> 00:03:29,660
Basically, we can mutate the number of size, how many tasks we have to add.

49
00:03:29,660 --> 00:03:33,290
It will bend itself according to that number.

50
00:03:33,290 --> 00:03:39,110
So yes, this manageable list we are going to use for adding our tasks.

51
00:03:39,110 --> 00:03:47,690
So Private ArrayList and this ArrayList will be storing all of the tasks and what will be the name.

52
00:03:48,020 --> 00:03:53,510
So this list is going to contain the info, so we will name it as in info.

53
00:03:54,370 --> 00:03:55,900
ArrayList again.

54
00:03:57,580 --> 00:04:01,420
And this list is going to be in a string format.

55
00:04:01,900 --> 00:04:05,410
It is going to contain the tasks in the string format.

56
00:04:06,220 --> 00:04:08,710
So double closing it and calling it info.

57
00:04:09,980 --> 00:04:17,150
So yes, this is the list containing that task one name, task to name and the time attached to it in

58
00:04:17,150 --> 00:04:18,260
a string format.

59
00:04:18,470 --> 00:04:23,900
And the next part, we are going to create schedule or constructor, we can call it.

60
00:04:24,290 --> 00:04:30,690
So, yes, passing based as all of the previously created classes.

61
00:04:30,710 --> 00:04:37,770
And inside this constructor, again, setting a layout for the schedule page.

62
00:04:37,790 --> 00:04:42,900
So this schedule page is containing a border layout again.

63
00:04:42,920 --> 00:04:46,730
So new border layout.

64
00:04:48,070 --> 00:04:55,870
And this border layout is going to contain no arguments in the beginning of the end, calling the base

65
00:04:55,870 --> 00:04:56,980
as we head.

66
00:04:57,160 --> 00:05:02,410
So whenever we need to access it, the base, we use the crib.

67
00:05:02,830 --> 00:05:06,640
Now the next thing is new tasks.

68
00:05:07,180 --> 00:05:09,490
So B is for creating tasks.

69
00:05:09,490 --> 00:05:14,470
We have already initialized it and to access it we are using this keyboard.

70
00:05:15,280 --> 00:05:20,020
The next part is for the how many tasks we are creating.

71
00:05:20,170 --> 00:05:27,070
So a again new how many we named it as how many?

72
00:05:28,160 --> 00:05:36,980
So new, how many is going to set the tasks like number of tasks we want to add inside our schedules

73
00:05:37,280 --> 00:05:44,120
and definitely the Continue button, which is going to give us the number of text field according to

74
00:05:44,120 --> 00:05:53,330
the number of tasks we have added inside the how many actually so new button for the continue and inside

75
00:05:53,330 --> 00:05:59,180
the g button or string is going to like a pair continue.

76
00:05:59,360 --> 00:06:05,060
You must have seen it in the introduction, but the button is containing a text.

77
00:06:05,060 --> 00:06:06,020
Continue.

78
00:06:06,620 --> 00:06:07,640
You can see it.

79
00:06:08,050 --> 00:06:08,510
Yes.

80
00:06:08,510 --> 00:06:17,090
So this is the button and this is the how many text fields and we have added the of the how many things

81
00:06:17,090 --> 00:06:21,920
like the text field, the continue button and the tasks to the frame.

82
00:06:21,920 --> 00:06:28,670
With the help of this add keyword admitted, we can call it we have added all three of them inside the

83
00:06:28,820 --> 00:06:36,290
frame or we have also made several imports like similarly we have made inside the home dot java file

84
00:06:36,410 --> 00:06:40,850
or basically all of them are same as the home class.

85
00:06:40,850 --> 00:06:48,860
You can see the imports are almost same and again we are going to use the paint component function in

86
00:06:48,860 --> 00:06:57,350
the schedule plus also as this paint component is going to paint that text field according to the user

87
00:06:57,350 --> 00:07:01,780
and tells it like how many tasks the user want to enter inside it.

88
00:07:02,120 --> 00:07:06,320
The paint component will paint this in the form of graph assets.

89
00:07:06,560 --> 00:07:07,070
Yes.

90
00:07:07,460 --> 00:07:11,810
So also there is other continue button here also.

91
00:07:11,810 --> 00:07:13,280
So coming to that.

92
00:07:13,490 --> 00:07:13,820
Okay.

93
00:07:13,850 --> 00:07:18,350
But firstly, let us add the action listener to this continue button.

94
00:07:18,350 --> 00:07:25,190
Like if we are adding a number of text inside whatever it is, integer one, two, three, four, five

95
00:07:25,190 --> 00:07:29,930
and on hitting this continue button, what action is going to be performed?

96
00:07:29,930 --> 00:07:36,530
So we have to create an action for phone function which will attach the action listener to the continue

97
00:07:36,530 --> 00:07:46,160
button according to the how many method it is going to create that many text fields for the specific

98
00:07:46,160 --> 00:07:49,010
tasks the user has entered for.

99
00:07:49,160 --> 00:07:56,660
So action event as the argument and the event is e here and inside this action perform function.

100
00:07:56,660 --> 00:07:57,830
We are going to use this.

101
00:07:57,830 --> 00:08:01,700
If so, if the user enters in.

102
00:08:01,700 --> 00:08:05,420
This is the method to write it as e don't get source.

103
00:08:05,660 --> 00:08:09,950
So inside the get source we are going to count.

104
00:08:09,950 --> 00:08:12,110
We like hit the continue button.

105
00:08:12,840 --> 00:08:20,910
So yes, if they get search support, the user hits the continue button, then an array is going to

106
00:08:20,910 --> 00:08:24,690
be returned in the form of task list.

107
00:08:25,320 --> 00:08:30,480
So this info is going to be contain the list of the task.

108
00:08:30,510 --> 00:08:32,850
Basically the ArrayList, we can call it.

109
00:08:33,030 --> 00:08:43,790
So return an array array for storing the tasks that many number of now there is a time also.

110
00:08:43,800 --> 00:08:53,130
So we are calling the time method as we have to set time for that specific task.

111
00:08:53,490 --> 00:08:56,820
So this time method will help us to do so.

112
00:08:56,940 --> 00:09:01,400
So with every task attached, there is a timeline

113
00:09:03,840 --> 00:09:05,190
time So.

114
00:09:05,190 --> 00:09:08,040
BASH Now showing that time.

115
00:09:08,610 --> 00:09:11,880
So showing the time to the frame.

116
00:09:12,120 --> 00:09:15,230
And this show it will show the label.

117
00:09:15,240 --> 00:09:21,720
So here we are, like seeing this label last time and you can see that this is the task one name, the

118
00:09:21,720 --> 00:09:23,590
textual and the time.

119
00:09:23,610 --> 00:09:27,270
So we will enter the string as time.

120
00:09:29,370 --> 00:09:31,230
So this is for the time thing.

121
00:09:31,470 --> 00:09:34,500
Now, this was the action perform.

122
00:09:34,500 --> 00:09:37,800
The action is not attached to the continue button.

123
00:09:37,830 --> 00:09:43,680
Now the next action listener we are going to attach is for the like.

124
00:09:43,680 --> 00:09:46,080
We have other continue button also.

125
00:09:46,410 --> 00:09:46,830
Okay.

126
00:09:46,830 --> 00:09:49,410
So first let us create our function for this.

127
00:09:49,410 --> 00:09:55,650
How many and this task as it is appearing, then once we create a class, then this red underline will

128
00:09:55,650 --> 00:09:56,610
be gone.

129
00:09:56,850 --> 00:10:00,870
So creating a class for how many?

130
00:10:01,350 --> 00:10:05,430
Again, extending it to Japan and attaching action.

131
00:10:05,430 --> 00:10:06,600
Less notes to it.

132
00:10:07,170 --> 00:10:10,350
So implement action listener.

133
00:10:10,350 --> 00:10:12,600
Action listener to it.

134
00:10:12,630 --> 00:10:20,520
Now inside this, how many class we are going to declare some of the variables such as task, how many

135
00:10:20,520 --> 00:10:23,190
continue button and number of tasks.

136
00:10:23,190 --> 00:10:29,730
And again, inside the how many constructor which we are going to create, we will pass tasks as the

137
00:10:29,730 --> 00:10:30,560
argument.

138
00:10:30,570 --> 00:10:31,980
We will set a layout.

139
00:10:31,980 --> 00:10:37,450
So we are using a flow layout for the number of tasks entered by the user.

140
00:10:37,470 --> 00:10:44,400
So this is going to be a pair in the form of a flow layout of flow layout resizes itself accordingly.

141
00:10:44,400 --> 00:10:47,760
So if there are two sizes, then this distance is this.

142
00:10:48,120 --> 00:10:52,510
We have entered five tasks, so the distance between these two tasks will be decreased.

143
00:10:52,530 --> 00:10:59,870
So this is what actually flow layout does and the text field will be adding and continue button and

144
00:10:59,880 --> 00:11:07,320
we will be adding inside the how many class as well as this continue button is happening.

145
00:11:07,320 --> 00:11:13,260
Once we are hitting this continue and this list is appending, then only this continue button is updating.

146
00:11:13,260 --> 00:11:18,860
So we will be creating that continue button again inside this Harmony constructor.

147
00:11:18,870 --> 00:11:20,160
So let us see.

148
00:11:20,790 --> 00:11:23,880
So here we have created how many class.

149
00:11:23,880 --> 00:11:30,570
Inside this we have declared some of the global variables such as tasks, how many continue button and

150
00:11:30,570 --> 00:11:31,680
number of tasks.

151
00:11:31,680 --> 00:11:38,910
So this how many constructor as we have already discussed that we contain a layout will contain a text

152
00:11:38,910 --> 00:11:39,350
field.

153
00:11:39,360 --> 00:11:41,040
So this is the text field.

154
00:11:41,070 --> 00:11:45,360
How many text string and are the continue button of course.

155
00:11:45,360 --> 00:11:51,690
So on hitting the continue button, the action is not attached to the continue button will come into

156
00:11:51,690 --> 00:11:55,550
action then adding this harmony and continue to the frame.

157
00:11:55,560 --> 00:11:59,640
Now this integer is getting the number of tasks.

158
00:11:59,640 --> 00:12:02,610
So how many tasks we are entering?

159
00:12:02,610 --> 00:12:11,010
Will this integer grab and then return the array list according to that integer which is entered now

160
00:12:11,220 --> 00:12:14,820
this action list now which is attached to the continue button.

161
00:12:14,820 --> 00:12:23,100
So if the user enters like hits this continue button, then we will provide the user with that number

162
00:12:23,100 --> 00:12:29,160
of text field with that task one, task two, task three and whatever the number is, enter name and

163
00:12:29,160 --> 00:12:30,240
also a timer.

164
00:12:30,240 --> 00:12:36,600
So this is going to return the text field according to the number entered by the user.

165
00:12:36,600 --> 00:12:43,380
And if there are any kind of exception, then this catch block will execute, returning it as something

166
00:12:43,380 --> 00:12:44,040
went wrong.

167
00:12:44,070 --> 00:12:46,050
Try entering a proper integer.

168
00:12:46,050 --> 00:12:50,640
So suppose we enter anything except integers in the text field.

169
00:12:50,640 --> 00:12:53,550
How many text will and then hit this continue button?

170
00:12:53,550 --> 00:12:57,900
Then this exception will arise and throw this string as output.

171
00:12:58,260 --> 00:13:01,920
So yes, this was all about the continue button coming to the tasks.

172
00:13:01,920 --> 00:13:06,750
So this is the main thing inside the schedule plus the number of tasks we are creating.

173
00:13:06,750 --> 00:13:12,000
That is a class for the task, extending it as the panel and these are all the.

174
00:13:12,580 --> 00:13:16,930
Feel that name, that time and everything from the yes.

175
00:13:16,930 --> 00:13:19,930
So here you can see there are several things that are attached.

176
00:13:19,930 --> 00:13:23,740
One name and a text field and a time, then two blocks then.

177
00:13:23,810 --> 00:13:27,310
And so this all of them are covered here.

178
00:13:27,340 --> 00:13:35,110
You can like come to them one by one in detail and relate to them how they are working.

179
00:13:35,110 --> 00:13:42,910
So yes, after declaring all of the variables now inside the task constructor, we have created the

180
00:13:42,940 --> 00:13:46,480
text field for them and we have declared all of them here.

181
00:13:46,480 --> 00:13:54,430
We have decided that how they are going to look inside the frame and beam all of them on once the user

182
00:13:54,430 --> 00:14:01,840
enters a name, then a time, then are like AMPM and these all are functioning in that manner.

183
00:14:02,260 --> 00:14:03,100
Action is not.

184
00:14:03,100 --> 00:14:05,950
It is attached to this AMPM button.

185
00:14:05,950 --> 00:14:12,310
Basically this AMPM is a button and there is action is not attached to them which will navigate between

186
00:14:12,310 --> 00:14:13,480
the AMPM.

187
00:14:13,480 --> 00:14:14,650
This is the action list.

188
00:14:15,070 --> 00:14:21,670
So if the user hits PM, then the time should change itself to PM and in that timeline it is going to

189
00:14:21,670 --> 00:14:22,870
appear in that menu.

190
00:14:23,140 --> 00:14:29,290
Now, after declaring all of them or how these things are appearing on the screen, they are appearing

191
00:14:29,290 --> 00:14:30,970
in the form of ArrayList.

192
00:14:30,970 --> 00:14:33,010
Basically, they are resizable.

193
00:14:33,040 --> 00:14:40,030
How many tasks the user want to enter every time it is changing according to that, and for that only

194
00:14:40,030 --> 00:14:42,970
we are using this revalidate and repaint function.

195
00:14:42,970 --> 00:14:49,000
So yes, this repaint and revalidate changes this layout accordingly.

196
00:14:49,000 --> 00:14:53,560
Whenever the user changes the number of tasks then hit the continue button.

197
00:14:53,560 --> 00:15:02,050
So yes, this is a great layout type of yes, the appearance is a great layout type of function or method.

198
00:15:02,050 --> 00:15:03,790
We can call it the grid layout.

199
00:15:03,790 --> 00:15:10,150
We can decide if the user enters three, then the three is to one should appear and according to the

200
00:15:10,150 --> 00:15:12,430
user enters whatever it should appear.

201
00:15:12,460 --> 00:15:16,390
We have used a for loop for the grid layout setting, so whatever.

202
00:15:16,390 --> 00:15:23,860
Then a user enters the for loop will run and return as the number of text field, whatever is the input

203
00:15:23,860 --> 00:15:24,880
entered by the user.

204
00:15:24,880 --> 00:15:32,590
And this list is taking care of the time entered by the user that if it is am then we should shift to

205
00:15:32,590 --> 00:15:39,610
it that night time and if it is PM, then we have to shift it to the evening or on the afternoon time.

206
00:15:39,610 --> 00:15:45,580
So yes, this list is handling everything about that time part which is present here.

207
00:15:45,670 --> 00:15:52,690
Now in the next part we will be creating this this help page first and this end page first and then

208
00:15:52,690 --> 00:15:55,480
we will be creating this main thing, the timeline.

209
00:15:55,630 --> 00:15:57,130
So I'll see you in the next part.
