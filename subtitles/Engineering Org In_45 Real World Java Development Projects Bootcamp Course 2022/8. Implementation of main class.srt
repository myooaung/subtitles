1
00:00:00,060 --> 00:00:02,190
Now this will be our main class.

2
00:00:02,190 --> 00:00:15,120
Finally minesweeper down Java here we have to take firstly our class extends three and now under this

3
00:00:15,120 --> 00:00:23,220
we need a private label name as a status bar

4
00:00:25,710 --> 00:00:32,460
and now we need a public constructor, the minesweeper.

5
00:00:32,550 --> 00:00:42,990
And under that we need to create a method by the name initial UI, which will be the layout of our game.

6
00:00:44,490 --> 00:00:48,930
Here I have created my master by the name initially.

7
00:00:48,930 --> 00:00:58,500
Right here I will take the to spot and set it to the new label and this.

8
00:00:59,400 --> 00:01:00,660
Inverted commas.

9
00:01:00,660 --> 00:01:11,580
And then now we have to add and need status more comma, more than layout.

10
00:01:13,320 --> 00:01:17,760
Don't we need to set in the sound string?

11
00:01:17,760 --> 00:01:18,650
And then.

12
00:01:19,410 --> 00:01:22,560
Now we need to add a board here.

13
00:01:23,100 --> 00:01:36,060
So I will write new bold to the status bar, need the set resizable matter and set it to the phones

14
00:01:36,480 --> 00:01:41,760
by default and need the pack method here.

15
00:01:41,790 --> 00:01:45,210
Now we need to send the titles of our game.

16
00:01:45,570 --> 00:01:56,310
Here I will write Minesweeper and we need to output of our game in the middle of the screen.

17
00:01:56,970 --> 00:01:58,530
So set.

18
00:01:58,800 --> 00:01:59,990
Related

19
00:02:02,070 --> 00:02:02,880
set.

20
00:02:07,960 --> 00:02:20,650
Here I will write said location relative to if to the null and here will need to default close operation

21
00:02:20,650 --> 00:02:21,370
also.

22
00:02:22,060 --> 00:02:29,020
So here I will write g frame not exit down close.

23
00:02:30,250 --> 00:02:30,930
Done.

24
00:02:31,120 --> 00:02:35,050
Now we need to define the main matter also.

25
00:02:35,950 --> 00:02:42,130
So after that I will write public static void mean.

26
00:02:42,910 --> 00:02:44,530
Read the string.

27
00:02:45,710 --> 00:02:49,550
Air Chiefs here and here.

28
00:02:49,550 --> 00:02:51,620
I will need an event.

29
00:02:51,660 --> 00:02:52,430
Q.

30
00:02:54,380 --> 00:03:09,020
I need to give the parentheses, the hyphen and don curly bracket open here I will take the variable

31
00:03:09,020 --> 00:03:18,320
x add it to the new the class name here and x not.

32
00:03:19,780 --> 00:03:31,180
Sent visible to infected with the true value here and here we have created the window has fixed the

33
00:03:31,180 --> 00:03:31,870
size.

34
00:03:32,020 --> 00:03:40,030
So for this we have to use the resizable multilayer and this will be our main class.

35
00:03:40,810 --> 00:03:44,800
So we will run our program.

36
00:03:50,440 --> 00:03:51,550
Okay.

37
00:03:59,650 --> 00:04:07,750
So here we have got everyone on board the Swan Hill here.

38
00:04:08,620 --> 00:04:15,190
So yeah, you can see now here this to the game.

39
00:04:15,190 --> 00:04:16,150
Last pitch.

40
00:04:16,480 --> 00:04:16,900
Okay.

41
00:04:17,020 --> 00:04:20,970
Bits and pieces.

42
00:04:20,980 --> 00:04:21,510
Okay.

43
00:04:22,300 --> 00:04:24,340
Yeah, it's working.

44
00:04:24,760 --> 00:04:25,180
Okay.

45
00:04:26,210 --> 00:04:26,500
Yeah.

46
00:04:26,510 --> 00:04:31,670
So we had Brutus perfectly in the way, and now we can.

47
00:04:31,850 --> 00:04:34,670
We should see what we have done.

48
00:04:35,030 --> 00:04:39,260
So that will be our first, last and final output.

49
00:04:40,010 --> 00:04:45,470
So we have the world class here.

50
00:04:45,470 --> 00:04:48,310
There are 13 images used in this game.

51
00:04:48,320 --> 00:04:51,560
A cell can be surrounded by a maximum of eight mind.

52
00:04:51,570 --> 00:04:53,780
So we need numbers one through eight.

53
00:04:54,290 --> 00:04:59,630
We need images for an empty mind, a covered cell and a cell.

54
00:04:59,630 --> 00:05:07,130
And finally, for a wrongly marked cell, the size of each of the images is of 15 cross, 15 trucks

55
00:05:07,670 --> 00:05:10,310
and a mile field is an array of numbers.

56
00:05:10,310 --> 00:05:14,300
So the mindset represents a cell that contains a mind.

57
00:05:15,660 --> 00:05:19,800
The coal mine centers used to fill that cover and contains a mine.

58
00:05:19,890 --> 00:05:25,470
Among the mines here, it's covered mine, so that was marked by the user.

59
00:05:25,500 --> 00:05:34,460
These constraints determine whether to draw mine a mine, cover a market, or only sell the mine here.

60
00:05:34,470 --> 00:05:38,160
So the mine field in our game has 40 hidden mines.

61
00:05:38,940 --> 00:05:43,830
So what you don't mind is the 16 rules on the 16 columns here in the field.

62
00:05:44,010 --> 00:05:48,540
So there will be 226 cells together in the mine field.

63
00:05:49,110 --> 00:05:54,780
Here the field is an array of numbers we have and now we have.

64
00:05:54,780 --> 00:06:01,770
The individual variable determines whether we are in the game or the game is over and the mines left

65
00:06:01,770 --> 00:06:05,610
variable the number of mines to be marked left here.

66
00:06:07,200 --> 00:06:08,430
Reload here.

67
00:06:08,430 --> 00:06:17,820
We load our images into the imagery and the next thing we will we have done we have a new game master

68
00:06:17,820 --> 00:06:20,190
which will initiate the minesweeper game.

69
00:06:20,790 --> 00:06:22,600
These lines are a minefield.

70
00:06:22,620 --> 00:06:34,530
Every cell covered by default in the wine cycle here we randomly push all mines in the field and here

71
00:06:34,710 --> 00:06:38,850
we have turned in the find empty cell method.

72
00:06:38,850 --> 00:06:40,410
We find empty cell.

73
00:06:40,530 --> 00:06:43,430
If the player clicks on a mind cell, the game is over.

74
00:06:43,440 --> 00:06:50,730
If it clicks on the cell adjacent to a mine, he uncovers a number indicating how many mines the cells

75
00:06:50,730 --> 00:06:51,750
adjacent to.

76
00:06:52,170 --> 00:06:59,730
So the clicking on an empty cell leads to uncovering many other empty cells, plus cells with a number

77
00:06:59,730 --> 00:07:03,330
that form a border around the space of empty borders.

78
00:07:03,510 --> 00:07:08,070
So we use a recursive algorithm to find these empty cells.

79
00:07:08,400 --> 00:07:15,840
So in this one, this line or the code, we check the cell that is located to the left to an empty cell.

80
00:07:16,290 --> 00:07:20,250
If it is not empty, it is uncovered.

81
00:07:20,280 --> 00:07:27,030
If it is empty, we repeat the whole process here by recursively calling the find empty cell.

82
00:07:29,050 --> 00:07:35,920
And we have the paint component matter, which will turn snowmen into images here.

83
00:07:36,370 --> 00:07:38,200
The game is over and we lost.

84
00:07:38,200 --> 00:07:43,660
We should all uncover the mines, if any, and show all wrongly mob cells, if any.

85
00:07:44,320 --> 00:07:53,830
So the score line draws every cell on the window, the sun and what we have done.

86
00:07:54,370 --> 00:07:54,740
Okay.

87
00:07:54,910 --> 00:08:00,910
So if there is nothing left to uncover, even if the in-game variable was set to false.

88
00:08:02,130 --> 00:08:08,010
We have lost in the mouse pressed matter how we react to mouse click the mouse.

89
00:08:08,370 --> 00:08:11,910
The minesweeper game is controlled solely by mouse.

90
00:08:12,210 --> 00:08:15,780
We react to left and right mouse clicks.

91
00:08:16,800 --> 00:08:20,970
We have determined the x and y coordinates of the mouse pointer.

92
00:08:21,060 --> 00:08:28,080
We compute the corresponding column and row of the minefield and we check that we are located in the

93
00:08:28,080 --> 00:08:29,760
area of the minefield or not.

94
00:08:30,180 --> 00:08:37,350
The uncovering of the mice is done with the right mouse button and if right click on unmarked side,

95
00:08:37,350 --> 00:08:40,890
we add mark to the number representing the cell.

96
00:08:41,520 --> 00:08:47,730
This leads to drawing a curve itself with a mark in the paint component method.

97
00:08:49,140 --> 00:08:57,180
So if we left click on a cell that has been already marked, we remove the mark and increase the number

98
00:08:57,180 --> 00:08:58,860
of cells to be mark.

99
00:08:59,220 --> 00:09:00,750
So then nothing happens.

100
00:09:00,750 --> 00:09:08,400
If we click on the uncovered and the mark, then it must first uncovered by the right click, and only

101
00:09:08,400 --> 00:09:18,600
then it is possible to left click on it and let also a left click because it removes a cover from the

102
00:09:18,600 --> 00:09:19,050
cell.

103
00:09:19,770 --> 00:09:22,680
In case we left click on the mine.

104
00:09:22,680 --> 00:09:23,740
The game is over.

105
00:09:23,760 --> 00:09:25,650
If we left, click on an empty cell.

106
00:09:25,650 --> 00:09:32,910
We call the final result method, which recursively finds all adjacent empty cell.

107
00:09:33,450 --> 00:09:34,500
Here this.

108
00:09:35,210 --> 00:09:36,470
See the.

109
00:09:38,790 --> 00:09:39,780
That's right.

110
00:09:39,780 --> 00:09:40,410
Click here.

111
00:09:42,700 --> 00:09:44,110
You will see that.

112
00:09:45,280 --> 00:09:46,840
If you right click

113
00:09:49,330 --> 00:09:56,530
on the cell, we add mark for cell to the number representing the cell.

114
00:09:58,060 --> 00:10:06,280
This leads to drawing a covered cell with a mark in the paint component and if left, click on cell

115
00:10:06,520 --> 00:10:08,890
that has been removed.

116
00:10:09,370 --> 00:10:12,070
We remove the mark on.

117
00:10:13,390 --> 00:10:17,620
The we remove the mark and increase the number of cell.

118
00:10:19,550 --> 00:10:20,480
We marked.

119
00:10:23,500 --> 00:10:24,150
This one.

120
00:10:26,310 --> 00:10:26,790
Okay.

121
00:10:26,850 --> 00:10:33,510
So if nothing happens, if we click on the cover in the map, it must be first uncovered by another

122
00:10:33,510 --> 00:10:35,520
right click here.

123
00:10:36,410 --> 00:10:37,550
Can you see this?

124
00:10:38,610 --> 00:10:39,030
Yeah.

125
00:10:42,250 --> 00:10:49,660
This one left click remove the cover cover from the cell in case we left click on a mine.

126
00:10:49,660 --> 00:10:51,390
The game is over here.

127
00:10:51,400 --> 00:10:52,390
The game lost.

128
00:10:52,720 --> 00:10:54,090
This is the game is over.

129
00:10:54,100 --> 00:10:56,080
Every left click on an empty cell.

130
00:10:56,080 --> 00:11:03,510
We call the find empty cell matter, which recursively finds all empty cells here.

131
00:11:08,340 --> 00:11:11,430
See who we are marking this.

132
00:11:11,540 --> 00:11:16,710
Now, if I click on see here, can you see?

133
00:11:17,010 --> 00:11:23,260
So the board needs to be repainted, for instance, or a marker set or removed.

134
00:11:23,280 --> 00:11:25,500
We call the repaint method here.

135
00:11:25,920 --> 00:11:28,080
So this is on our project.

136
00:11:30,070 --> 00:11:32,200
This has our output.
