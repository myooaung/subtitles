1
00:00:01,030 --> 00:00:02,170
Hello, everyone.

2
00:00:02,290 --> 00:00:09,730
So I hope that you all have went through the introduction part and the working of the application part

3
00:00:09,730 --> 00:00:19,810
pretty well and have again much idea about what actually this project is about and what are the functionalities

4
00:00:19,810 --> 00:00:27,100
which we are going to attach while making this project, what are the classes and what's inside the

5
00:00:27,100 --> 00:00:34,540
classes or the like methods we are going to add in order to make this project properly functional.

6
00:00:34,570 --> 00:00:42,160
So this is like the internal initialization of the programming section.

7
00:00:42,580 --> 00:00:50,290
We are going to make a new project in our favorite indie Visual Studio code, and then after we are

8
00:00:50,290 --> 00:00:58,540
going to like add classes and functions in order to make this system functional.

9
00:00:59,230 --> 00:01:04,990
So this is the welcome page of our ID Visual Studio code.

10
00:01:05,230 --> 00:01:12,940
And inside this welcome page we are going to create a new project on clicking this Explorer tab.

11
00:01:13,210 --> 00:01:20,770
Our option will appear and we have to select Create Java project from that sidebar option.

12
00:01:20,770 --> 00:01:29,620
And in inside this we have to like choose the type of build tools we are going to attach in our project.

13
00:01:29,740 --> 00:01:33,330
So this is our basic project.

14
00:01:34,000 --> 00:01:39,340
You, we are going to use code Java in the programming section of this project.

15
00:01:39,340 --> 00:01:43,690
So we will not be attaching any external build tools.

16
00:01:44,140 --> 00:01:51,370
Otherwise we have several tools in Java such as Maven, Spring Boot, Cox Micro Profile, and these

17
00:01:51,370 --> 00:01:57,580
are a lot like very important tools in making most of the projects.

18
00:01:57,580 --> 00:02:04,810
So yes, in this project we are going to work with the source code directly without any build tools.

19
00:02:04,810 --> 00:02:08,140
So we will be selecting no build tools.

20
00:02:08,140 --> 00:02:13,900
Now after that, a file chooser of your system will open and ask you for that.

21
00:02:13,960 --> 00:02:22,480
What is the location of the project you want to keep of the folder which will be created, which will

22
00:02:22,480 --> 00:02:25,750
be containing all the files regarding this project?

23
00:02:25,840 --> 00:02:33,730
So choose our like correct location for your project in order to like if you want to find that project

24
00:02:33,730 --> 00:02:38,560
in future, then you can find it without any mess easily.

25
00:02:38,560 --> 00:02:47,800
So I am choosing desktop as my project location and on hitting the Select Project Location button.

26
00:02:47,830 --> 00:02:54,340
We will enter this input field which will be asking for the Java project name.

27
00:02:54,340 --> 00:03:02,980
So choose our like a good project name, which is going to be the name of the folder containing the

28
00:03:02,980 --> 00:03:03,610
project.

29
00:03:03,610 --> 00:03:12,580
So like Choose Your Name Wisely, which defines your project that what actually this project is doing

30
00:03:12,580 --> 00:03:21,130
so that if in future you like going through all of your projects just by listening to the name, like

31
00:03:21,130 --> 00:03:27,730
reading the name of the project, you can like remember everything that what is happening inside the

32
00:03:27,730 --> 00:03:28,420
project.

33
00:03:28,420 --> 00:03:33,700
So do not choose any fancy or anonymous thing as a name of your project.

34
00:03:33,970 --> 00:03:42,880
Just simply name your project with what actually the like files are doing inside the project.

35
00:03:42,880 --> 00:03:50,740
So I am going to name this project in management system.

36
00:03:50,890 --> 00:03:57,130
So a data management system is going to be the name of my project.

37
00:03:57,130 --> 00:04:04,690
You can choose any name for your project according to your choice, but to make sure that it defines

38
00:04:04,690 --> 00:04:07,210
the meaning of the project pretty well.

39
00:04:07,360 --> 00:04:12,220
And there should be no anonymous kind of names for the folder.

40
00:04:12,220 --> 00:04:17,170
So a data management system is my choice of name for this project.

41
00:04:17,170 --> 00:04:24,130
On hitting Enter we will enter the window of the project which we are going to make.

42
00:04:24,430 --> 00:04:27,910
This is the folder management system.

43
00:04:27,910 --> 00:04:36,550
There are some subfolders inside this which are like already present in this kind of folders on creating

44
00:04:36,550 --> 00:04:37,960
this Java project.

45
00:04:37,960 --> 00:04:46,840
So we have created this project project on hitting this Explorer option from the sidebar and then creating

46
00:04:46,840 --> 00:04:47,770
a Java project.

47
00:04:47,770 --> 00:04:51,280
Now selecting a location and naming the project.

48
00:04:51,280 --> 00:04:56,020
We enter this project like interface in our compiler.

49
00:04:56,410 --> 00:05:00,010
So this dot day standard has codes of.

50
00:05:00,090 --> 00:05:04,500
Borders of this project are due to the mercy of this compiler.

51
00:05:04,520 --> 00:05:08,960
We are having no use of these two folders in our projects.

52
00:05:08,990 --> 00:05:18,040
These are just like in folders of the compilers which have no use, zero use for us right now.

53
00:05:18,050 --> 00:05:24,650
So yes, they start based on the dot vs code folders can be ignored right now.

54
00:05:24,680 --> 00:05:32,660
Now after this, the SLC folder, which is going to be the main folder of our project, this SLC folder

55
00:05:32,660 --> 00:05:40,430
is going to like contain all the main files or the folders which are going to be involved or containing

56
00:05:40,430 --> 00:05:44,630
the classes and functionalities of our data management system.

57
00:05:44,720 --> 00:05:51,380
So basically we can understand this as this folder is the body of this project.

58
00:05:51,380 --> 00:05:59,210
And inside this body we are going to have different body parts which are going to like handle this complete

59
00:05:59,210 --> 00:05:59,950
system.

60
00:05:59,960 --> 00:06:09,370
So inside this RC folder there is already present file and this file is containing a class called F.

61
00:06:09,380 --> 00:06:14,780
So the name of the file is after Java and it is containing a class app.

62
00:06:14,780 --> 00:06:22,130
Inside this class we are having a function, a main function which are containing string as argument

63
00:06:22,130 --> 00:06:28,070
and this will run whenever this application will throw a runtime error.

64
00:06:28,100 --> 00:06:36,230
So we are like handling the exceptions with the help of this app class and whenever there will be exception

65
00:06:36,230 --> 00:06:36,980
this will print.

66
00:06:37,020 --> 00:06:37,400
Hello.

67
00:06:37,880 --> 00:06:42,980
So we can like signify that yes, there is some runtime error.

68
00:06:42,980 --> 00:06:51,470
So we have to like debug things and try running the project again in order to avoid any kind of exception.

69
00:06:51,470 --> 00:06:59,180
So yes, this is going to be like the structure of the project once you create a new Java project in

70
00:06:59,180 --> 00:07:01,070
the beginning in your compiler.

71
00:07:01,190 --> 00:07:09,020
So now what actually we have to do, firstly, we have to like we have discussed in the prototype section

72
00:07:09,470 --> 00:07:15,800
that we have to create a main class which is going to be responsible for testing and running of the

73
00:07:15,800 --> 00:07:16,520
program.

74
00:07:16,940 --> 00:07:23,780
So the main class is going to be the class, of course.

75
00:07:23,870 --> 00:07:29,720
So I am going to name this class as a theme dot java.

76
00:07:29,720 --> 00:07:34,340
So the file is created and we are inside the file.

77
00:07:34,670 --> 00:07:43,130
We have a public class item created already and this class is going to like, as we said, responsible

78
00:07:43,130 --> 00:07:45,650
for testing and running of the application.

79
00:07:45,860 --> 00:07:55,430
So yes, now inside this class we will be creating a main function, of course, whereas we have to

80
00:07:55,430 --> 00:08:00,110
create a main function to like test and run the program.

81
00:08:00,110 --> 00:08:09,380
So public static, void main and again string arguments are going to be parsed inside this function,

82
00:08:10,050 --> 00:08:13,700
a square bracket and acts of course.

83
00:08:13,940 --> 00:08:20,420
So the arguments are strings and this will throw exception.

84
00:08:22,240 --> 00:08:23,800
Are you exception?

85
00:08:25,550 --> 00:08:35,450
And this iOS exception will be thrown whenever there will be like any kind of exception all while running

86
00:08:35,450 --> 00:08:36,600
of this project.

87
00:08:36,620 --> 00:08:41,390
So inside this we are going to create Option Menu.

88
00:08:41,870 --> 00:08:50,270
So we have discussed already in the prototype section that we are going to integrate every options inside

89
00:08:50,270 --> 00:08:52,100
the options menu class.

90
00:08:52,100 --> 00:09:01,100
And that option menu class will be responsible for handling everything about the care like inputs and

91
00:09:01,100 --> 00:09:05,570
the like functions attached to every choices.

92
00:09:05,900 --> 00:09:07,700
So option menu.

93
00:09:08,600 --> 00:09:18,380
And this new method is created inside the main class now calling the introduction.

94
00:09:19,550 --> 00:09:24,880
And the introduction will be called as a method or the constructor.

95
00:09:24,890 --> 00:09:30,590
We can say that or we will be creating this inside the other classes.

96
00:09:30,650 --> 00:09:32,180
So option menu.

97
00:09:32,180 --> 00:09:42,020
Yes, dot main menu will be like reflected as soon as we execute the program.

98
00:09:42,320 --> 00:09:47,750
So we will be creating this option menu later in this project.

99
00:09:48,650 --> 00:09:57,200
Just in the main class, we are making things clear that what is going to happen whenever we run the

100
00:09:57,200 --> 00:09:57,890
project.

101
00:09:58,160 --> 00:10:09,080
So is the introduction class or the function we have created is going to be like containing our sets

102
00:10:09,080 --> 00:10:09,830
out.

103
00:10:10,010 --> 00:10:19,160
So since out is the shortcut for system dot dot print, which is going to like print anything to your

104
00:10:19,610 --> 00:10:23,570
terminal or the output window, we can see that.

105
00:10:23,570 --> 00:10:29,330
So let us like capitalize everything welcome all for a better like view.

106
00:10:29,810 --> 00:10:33,830
So welcome to the Eden Project.

107
00:10:34,700 --> 00:10:39,380
And yes, so welcome to the Eden Project.

108
00:10:40,010 --> 00:10:44,340
Exclamation mark goes well with it and here we are.

109
00:10:44,480 --> 00:10:47,230
So we are done with the main class.

110
00:10:47,230 --> 00:10:57,860
So as far as I can see that of yes, you can see that we have called this exception our type of exception

111
00:10:57,860 --> 00:10:58,550
handler.

112
00:10:58,550 --> 00:11:07,970
So automatically this Java exception package is imported to our class and what actually this import

113
00:11:07,970 --> 00:11:08,540
does.

114
00:11:08,540 --> 00:11:17,030
So in case there is any kind of input output exception as we are like inputting values from our keyboard

115
00:11:17,030 --> 00:11:24,830
and according to that the compiler is outputting the like regarding function to that specific choice.

116
00:11:24,830 --> 00:11:30,050
So everything is going to be handled with the help of input output function.

117
00:11:30,050 --> 00:11:38,900
So any kind of exception will be handled with the help of your exception package of the Java Library.

118
00:11:38,900 --> 00:11:42,830
So yes, this is going to be our main class.

119
00:11:42,950 --> 00:11:48,320
This will be like running at the time of testing and running of the project.

120
00:11:48,440 --> 00:11:55,520
So let us first create some like real working things to the project.

121
00:11:55,520 --> 00:12:00,560
So the second concern was to create an account class.

122
00:12:00,770 --> 00:12:12,650
So account dot Java is going to be the name of the second class we are creating inside this account

123
00:12:12,650 --> 00:12:13,730
that Java.

124
00:12:18,040 --> 00:12:28,210
We are having our account class and everything about the like we have mentioned it that this account

125
00:12:28,210 --> 00:12:35,470
class is going to handle the types of account, the customer verification process and the operations

126
00:12:35,470 --> 00:12:40,830
regarding the balance calculation will be mentioned inside the account class.

127
00:12:40,840 --> 00:12:48,670
Only the exception handling for the invalid choices will be also handled inside this account class.

128
00:12:48,670 --> 00:12:51,690
So yes, everything will be handled.

129
00:12:51,700 --> 00:12:59,320
So our first step should be like declaring some global variables inside this account class.

130
00:12:59,560 --> 00:13:12,250
So we will move forward with the help of this private access pacifier integer for customer number and

131
00:13:12,880 --> 00:13:14,030
for a pin number.

132
00:13:14,050 --> 00:13:21,700
So initially we were being asked for a customer number and a PIN number and both of them are going to

133
00:13:21,700 --> 00:13:22,660
be integers.

134
00:13:22,660 --> 00:13:24,820
So I will be copying this.

135
00:13:25,300 --> 00:13:34,810
And again for a PIN number, just changing this customer to pin and things are going to be working the

136
00:13:34,810 --> 00:13:35,470
same way.

137
00:13:35,770 --> 00:13:45,790
The third and the fourth integer like double global variables will be checking balance and savings balance.

138
00:13:46,840 --> 00:13:48,640
So private.

139
00:13:50,180 --> 00:13:50,990
Double.

140
00:13:54,400 --> 00:13:57,220
And checking balance.

141
00:13:57,910 --> 00:14:03,430
So checking balance and saving balance in the similar way.

142
00:14:04,630 --> 00:14:14,740
This should be in small and initially the checking balance value will be set to zero as initially we

143
00:14:14,740 --> 00:14:16,960
have no balance in our account.

144
00:14:17,260 --> 00:14:26,710
Once the user deposits the money, then only the balance will be updated, whether it be the savings

145
00:14:26,710 --> 00:14:28,990
balance or the checking balance.

146
00:14:29,140 --> 00:14:34,480
So here we are done with the declaration of all the global variables.

147
00:14:34,510 --> 00:14:42,490
Now the next concern is to introduce the scanner, which is going to like scan the choices inputted

148
00:14:42,490 --> 00:14:43,620
by the user.

149
00:14:43,630 --> 00:14:52,450
And then our next concern will be to get and set all the values which we have declared here, like the

150
00:14:52,450 --> 00:14:58,690
variables, customer number, pin number, as we have declared everything as private in the beginning.

151
00:14:58,690 --> 00:15:07,360
So in order to access these variables on objects, we can see by any other classes we have to use,

152
00:15:07,360 --> 00:15:16,000
get and set method in Java so that it can be accessed by any class without any exception.

153
00:15:16,000 --> 00:15:18,880
So yes, we will be seeing that in the next part.
