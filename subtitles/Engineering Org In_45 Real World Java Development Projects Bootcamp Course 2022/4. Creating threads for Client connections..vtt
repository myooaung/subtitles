WEBVTT
1
00:00:01.630 --> 00:00:10.480
In previous part I told you how we created the server side using java for the DHCP server and client.

2
00:00:10.960 --> 00:00:15.430
So if you observe inside our ID or code.

3
00:00:16.350 --> 00:00:23.370
I'm using your port number as 1500 1500 as a port number.

4
00:00:23.520 --> 00:00:27.390
So as you can see, I'm using some default things here.

5
00:00:27.660 --> 00:00:32.010
So you should require this Java eight library.

6
00:00:32.220 --> 00:00:34.860
And by default, it reads TCP connection.

7
00:00:35.940 --> 00:00:41.640
Internally using TCP protocol, protocol, all the closing and each and everything.

8
00:00:42.060 --> 00:00:47.550
So what I'm going to do is now I'm need to create some client threads.

9
00:00:47.550 --> 00:00:51.480
As I mentioned here, I'm using client, but what is the client thread?

10
00:00:51.630 --> 00:00:55.560
It will use some multithreading concepts.

11
00:00:55.770 --> 00:00:59.520
So before that I will explain multi-threading concepts.

12
00:00:59.910 --> 00:01:01.170
So TCP server client.

13
00:01:01.170 --> 00:01:05.310
As I told you, there is one client process and server process.

14
00:01:06.210 --> 00:01:10.260
What it will be happen when server code runs on the server side.

15
00:01:10.560 --> 00:01:11.450
It will be live.

16
00:01:11.460 --> 00:01:12.960
Or we can say online.

17
00:01:13.380 --> 00:01:19.950
Now client will ask to server or request the server to join me inside that server.

18
00:01:20.460 --> 00:01:29.890
So this is one client process inside that it consists TCP IP network, which network driver throughout

19
00:01:29.910 --> 00:01:31.980
the network and another network driver.

20
00:01:31.980 --> 00:01:33.420
It will be connected to this.

21
00:01:33.600 --> 00:01:39.510
So there is one socket layer, device layer, protocol layer each and everything inside TCP server client

22
00:01:39.840 --> 00:01:40.460
process.

23
00:01:40.470 --> 00:01:46.680
So this is only one client, but in our case we need more processes, which is basically more clients.

24
00:01:47.850 --> 00:01:55.620
For that purpose, we can create more processes, but our servers program or we can say server configuration,

25
00:01:55.620 --> 00:01:58.860
which is I'm considering your localhost, my own machine.

26
00:01:59.660 --> 00:02:03.470
It is very less compatible for handling such processes.

27
00:02:03.480 --> 00:02:06.240
It can handle around ten process, 12 process.

28
00:02:06.390 --> 00:02:13.650
But in a real scenario, we want to connect more clients like in a group of your any chat system you

29
00:02:13.650 --> 00:02:15.220
have on participants.

30
00:02:15.570 --> 00:02:17.160
Basically 100 clients.

31
00:02:17.400 --> 00:02:21.850
Similarly, I want to create such a scenario for that purpose.

32
00:02:21.870 --> 00:02:25.470
What I'm going to do, I'm going to handle it by multithreading.

33
00:02:25.920 --> 00:02:27.390
So what is Multithreading?

34
00:02:27.810 --> 00:02:29.190
You know the process.

35
00:02:29.700 --> 00:02:30.780
What you can do.

36
00:02:30.810 --> 00:02:34.170
You can divide that process into task one and task.

37
00:02:35.390 --> 00:02:37.730
So that is the multi trade concept.

38
00:02:37.760 --> 00:02:44.690
You can divide the process into different, different threads and you can create as a task and you can

39
00:02:44.690 --> 00:02:46.380
use that process as a task.

40
00:02:46.400 --> 00:02:56.330
So consider like you want to take some or you want to buy some vegetables from market, but you have

41
00:02:56.330 --> 00:02:59.330
given the sequence like first then.

42
00:02:59.540 --> 00:03:03.770
Or you can say you have to buy buy some three vegetables for vegetables.

43
00:03:03.770 --> 00:03:08.260
But sequence is not given what you can do and you want to buy also fruits.

44
00:03:08.270 --> 00:03:12.230
So meanwhile, you can buy one vegetable, you can buy one fruit.

45
00:03:12.590 --> 00:03:14.540
After that, you can buy two vegetables.

46
00:03:14.540 --> 00:03:16.040
You can buy one fruit again.

47
00:03:16.790 --> 00:03:22.850
According to timestamp, the system requirement system configuration multi trade will be handled through

48
00:03:22.850 --> 00:03:23.960
the virtual machine.

49
00:03:23.960 --> 00:03:31.970
So if that such task like process divided into the task for tasks five task is divided for second task

50
00:03:32.000 --> 00:03:34.310
if it's taking too much time.

51
00:03:35.710 --> 00:03:39.700
Over the Java virtual machine actually calculates how much time it requires.

52
00:03:40.180 --> 00:03:49.240
But if that time is more than other process tasks, it will use that process and it simultaneously runs

53
00:03:49.240 --> 00:03:50.260
both processes.

54
00:03:51.300 --> 00:03:53.880
In this time will be very less.

55
00:03:54.210 --> 00:03:56.520
Or we can say time, complexity will be very less.

56
00:03:56.850 --> 00:03:59.760
Our system utilization is at maximum level.

57
00:03:59.970 --> 00:04:04.620
So Multithreading is a good application part for our chat.

58
00:04:05.400 --> 00:04:07.200
So what is Multithreading in the Java?

59
00:04:07.350 --> 00:04:13.030
Multithreading in Java is a process of executing multiple threads simultaneously, as I told you.

60
00:04:13.050 --> 00:04:17.940
Threads are basically tasks in our sub process, as you can say.

61
00:04:18.210 --> 00:04:20.850
So you can execute multi thread simultaneously.

62
00:04:21.390 --> 00:04:29.010
A thread is lightweight, so process smallest unit of processing, multi processing and multithreading.

63
00:04:29.280 --> 00:04:32.010
Both are used to achieve multitasking.

64
00:04:32.340 --> 00:04:33.240
What is multitasking?

65
00:04:33.240 --> 00:04:36.210
Now we can say I'm connecting a client.

66
00:04:36.210 --> 00:04:39.650
As I'm telling you, I'm creating client thread here.

67
00:04:39.750 --> 00:04:46.350
So what it will be do it will similarly give that client information to server simultaneously.

68
00:04:46.350 --> 00:04:50.310
It will connect that client to the server simultaneously.

69
00:04:50.310 --> 00:04:52.530
It will ask name for that client.

70
00:04:52.530 --> 00:04:55.320
Then simultaneously it will ask for a message.

71
00:04:55.560 --> 00:04:58.920
Simultaneously, server can do some another utilization also.

72
00:04:59.460 --> 00:05:09.180
So what it will be do while inviting a client or inviting a user's server never be done.

73
00:05:09.180 --> 00:05:11.130
We can say server always be like.

74
00:05:12.450 --> 00:05:17.340
So Multithreading is a Java feature that allows concurrent execution of two or more parts of program

75
00:05:17.460 --> 00:05:19.380
for the maximum utilization of CPU.

76
00:05:19.390 --> 00:05:22.230
Or you can say process or your system.

77
00:05:22.260 --> 00:05:27.780
Each part of such program is called thread, so thread is a lightweight process within the process.

78
00:05:28.380 --> 00:05:34.410
So what you can do, you can perform threads using two mechanism, expanding the thread class, implementing

79
00:05:34.410 --> 00:05:36.780
the enable base interface basically.

80
00:05:36.780 --> 00:05:38.340
So these are the two methods.

81
00:05:38.340 --> 00:05:42.000
Or you can say two given types of Java, both works similar.

82
00:05:42.000 --> 00:05:44.280
There is no difference between of them.

83
00:05:44.640 --> 00:05:48.150
There are slight difference in the Enable interface and trade class.

84
00:05:48.870 --> 00:05:56.160
Here I am creating another class client thread and I'm going to expand that to the thread class, which

85
00:05:56.160 --> 00:05:57.540
is basically default class.

86
00:05:59.060 --> 00:06:01.280
So let me go with that.

87
00:06:05.190 --> 00:06:10.710
So as I told you, we are done with this with some clientele.

88
00:06:10.740 --> 00:06:13.980
Now, what I'm going to do is I'm mentioning the class here.

89
00:06:20.720 --> 00:06:26.660
The class name should be client thread because as I mentioned already.

90
00:06:29.820 --> 00:06:30.450
Nine.

91
00:06:31.220 --> 00:06:31.580
Today.

92
00:06:32.760 --> 00:06:33.630
Exchange.

93
00:06:37.340 --> 00:06:37.650
Trade.

94
00:06:41.440 --> 00:06:48.940
So as you can see, I invoke that client part and you can see now this is working like that class is

95
00:06:48.940 --> 00:06:49.870
invoking here.

96
00:06:50.890 --> 00:06:52.630
Client three each and every everything.

97
00:06:53.840 --> 00:06:54.650
As a top.

98
00:06:54.890 --> 00:06:59.060
I know this program is very lengthy, so I'm explaining step by step.

99
00:06:59.660 --> 00:07:04.640
Then I need to what I need to create is there is only one instance.

100
00:07:04.640 --> 00:07:05.780
I will explain it.

101
00:07:07.550 --> 00:07:08.990
One instance.

102
00:07:12.110 --> 00:07:12.620
Of.

103
00:07:13.290 --> 00:07:14.370
This thread.

104
00:07:16.630 --> 00:07:17.260
Will.

105
00:07:19.240 --> 00:07:22.010
But then for each client.

106
00:07:22.340 --> 00:07:25.100
So for each client, it will execute one thing.

107
00:07:25.610 --> 00:07:36.920
And we can create more than 102,000 trades in Java according to the that Java as a virtual machine.

108
00:07:36.920 --> 00:07:46.310
So we no need to require some any higher computer or we can say you can invoke it as what you want.

109
00:07:47.620 --> 00:07:52.750
Then I need to create sock it here, sock it to get message.

110
00:07:53.200 --> 00:07:55.840
So what I'm going to do is I'm going to mention socket.

111
00:07:55.840 --> 00:07:56.350
Socket.

112
00:07:59.030 --> 00:08:00.170
That socket then.

113
00:08:00.650 --> 00:08:05.780
Object input stream I need to maintain because why I'm using object input stream.

114
00:08:05.780 --> 00:08:06.500
You will understand.

115
00:08:06.500 --> 00:08:08.990
Here, let me put this.

116
00:08:09.860 --> 00:08:10.400
It's.

117
00:08:13.000 --> 00:08:15.020
You already mentioned here.

118
00:08:15.040 --> 00:08:18.190
Let me check where I mentioned that as input.

119
00:08:19.000 --> 00:08:26.020
So as input, it's for the putting that inside the S or we can say in object output stream as this is

120
00:08:26.020 --> 00:08:32.730
the ArrayList I need to create object output string input string for that purpose I created a input

121
00:08:32.740 --> 00:08:34.330
variable here already.

122
00:08:34.330 --> 00:08:37.750
I mentioned here now because I created that part.

123
00:08:37.960 --> 00:08:43.600
If you want to create, you can create flows client plus client ID and you can go to the main part.

124
00:08:43.600 --> 00:08:44.470
But I'm going.

125
00:08:47.770 --> 00:08:50.620
Then I need to mention object on stream.

126
00:08:53.020 --> 00:08:54.070
Its output.

127
00:08:57.860 --> 00:08:58.670
Then.

128
00:09:01.490 --> 00:09:04.040
New dimension, unique ID.

129
00:09:06.460 --> 00:09:11.410
By UniCredit, it is easier for de connexion de connecting everything.

130
00:09:11.440 --> 00:09:14.560
It is very easier if you are visiting that part.

131
00:09:16.640 --> 00:09:17.690
Username.

132
00:09:20.720 --> 00:09:22.280
Which is basically string.

133
00:09:27.380 --> 00:09:30.170
As I told you, I already created each and every thing here.

134
00:09:31.750 --> 00:09:32.470
Then.

135
00:09:33.270 --> 00:09:34.980
Message object.

136
00:09:36.470 --> 00:09:36.980
Who?

137
00:09:38.140 --> 00:09:39.490
This new message.

138
00:09:52.280 --> 00:09:53.700
So what did we do?

139
00:09:54.380 --> 00:09:55.610
It's a chat message.

140
00:09:56.120 --> 00:09:57.200
Chat message?

141
00:09:58.160 --> 00:09:59.020
See him.

142
00:10:00.030 --> 00:10:03.150
So I will tell you why I'm using your chat message.

143
00:10:03.150 --> 00:10:04.710
And what is the chat message here?

144
00:10:04.740 --> 00:10:07.640
I already created this chat message, as you can see in this class.

145
00:10:07.650 --> 00:10:12.660
So I will create one program here and I'm using that programming service I haven't created.

146
00:10:12.660 --> 00:10:13.800
I will create that part.

147
00:10:15.840 --> 00:10:17.160
I'm for that time.

148
00:10:17.160 --> 00:10:19.830
What I'm mentioning here is string date.

149
00:10:21.680 --> 00:10:27.380
Then I need to create a constructor because for the passing value you can directly pass through the

150
00:10:28.760 --> 00:10:32.120
what you can say arguments or you can create a constructor for that purpose.

151
00:10:32.750 --> 00:10:36.020
Or that is what I'm going to client in same name.

152
00:10:37.250 --> 00:10:38.520
Socket should be there.

153
00:10:43.160 --> 00:10:44.300
So it should be there.

154
00:10:46.590 --> 00:10:49.350
Or you can see arguments.

155
00:10:50.890 --> 00:10:51.550
Again.

156
00:10:51.550 --> 00:10:56.380
ID I.D. is very important because ID is equal to plus plus unique ID.

157
00:11:02.420 --> 00:11:03.200
So.

158
00:11:14.280 --> 00:11:18.580
So what is this unique idea I'm going to do is I'm going to create that letter.

159
00:11:18.630 --> 00:11:19.500
I will tell you.

160
00:11:21.240 --> 00:11:21.990
So.

161
00:11:23.450 --> 00:11:26.300
Let me check all the things here.

162
00:11:26.330 --> 00:11:26.870
Okay.

163
00:11:31.070 --> 00:11:36.470
Now what I'm going to do is plus plus incredibly basically what I'm going to do is.

164
00:11:37.530 --> 00:11:38.640
Then socket.

165
00:11:39.000 --> 00:11:39.900
Socket.

166
00:11:41.770 --> 00:11:42.940
Is equal to socket.

167
00:11:43.210 --> 00:11:47.110
So it will definitely go further and further and assigning to that part.

168
00:11:53.610 --> 00:11:57.240
And what I'm going to mention is here's some statement.

169
00:11:58.240 --> 00:12:01.120
To check everything, correct or not.

170
00:12:01.150 --> 00:12:05.080
Or you can say trade is trying to create each and everything you can do.

171
00:12:07.850 --> 00:12:09.340
I will bring this here.

172
00:12:10.840 --> 00:12:12.370
Objective streams.

173
00:12:13.600 --> 00:12:16.090
So we already created this part.

174
00:12:16.090 --> 00:12:18.250
And what I'm going to do is know.

175
00:12:19.070 --> 00:12:20.150
Or.

176
00:12:21.260 --> 00:12:22.280
I'm going to.

177
00:12:23.530 --> 00:12:27.310
Check here basically because I made a mistake in naming part.

178
00:12:31.130 --> 00:12:33.350
Basically this should be.

179
00:12:34.280 --> 00:12:36.290
Because it should be plus plus in that part.

180
00:12:36.340 --> 00:12:38.750
Now, so what I did is just.

181
00:12:40.270 --> 00:12:41.080
Is the part.

182
00:12:42.380 --> 00:12:43.370
What he's doing is.

183
00:12:48.580 --> 00:12:49.180
Okay.

184
00:12:49.750 --> 00:12:56.530
So why it is giving me the error is basically because of I created a private static unified.

185
00:12:59.750 --> 00:13:05.240
And what I did is I closed that class already.

186
00:13:07.190 --> 00:13:09.310
Or inside main metal.

187
00:13:09.320 --> 00:13:10.880
You can see this class.

188
00:13:11.090 --> 00:13:16.050
So what I can do is instead of closing this class inside this, I can close this.

189
00:13:16.070 --> 00:13:16.850
Inside this.

190
00:13:18.140 --> 00:13:20.480
So now you can say you will be running.

191
00:13:21.890 --> 00:13:23.330
The errors will be less severe.

192
00:13:29.540 --> 00:13:30.570
This is for the server.

193
00:13:30.590 --> 00:13:32.390
This is for the client threads.

194
00:13:32.390 --> 00:13:33.540
And this is for the client.

195
00:13:34.610 --> 00:13:35.510
So.

196
00:13:37.060 --> 00:13:37.590
Insert this.

197
00:13:37.600 --> 00:13:39.100
I need to create each and everything.

198
00:13:39.100 --> 00:13:41.350
I need to invoke that socket.

199
00:13:41.650 --> 00:13:43.330
So what I'm going to do is.

200
00:13:45.850 --> 00:13:47.050
After this is done.

201
00:13:49.120 --> 00:13:55.390
I need to create one or begin creating chocolate or creating a connection.

202
00:13:55.420 --> 00:14:02.830
I already mentioned each and everything above, but I need to mention the output as input each and everything.

203
00:14:03.220 --> 00:14:05.710
So let me do that stuff first.

204
00:14:08.030 --> 00:14:11.120
It should be in large block.

205
00:14:12.030 --> 00:14:14.070
So what is the significance of this is.

206
00:14:15.360 --> 00:14:15.810
Oh.

207
00:14:18.140 --> 00:14:19.310

208
8:00 catch clothes.

209
00:14:19.310 --> 00:14:21.980
We need to mention the exception also.

210
00:14:23.060 --> 00:14:23.370
You're.

211
00:14:24.410 --> 00:14:24.700
Okay.

212
00:14:24.950 --> 00:14:26.390
So I will explain it later.

213
00:14:26.600 --> 00:14:28.280
Let me do that first.

214
00:14:28.310 --> 00:14:36.410
What I am mentioning is I created a stream and inside this I'm putting that input in as I told you I

215
00:14:36.410 --> 00:14:37.460
created already.

216
00:14:37.670 --> 00:14:45.110
Similarly for the input using this, I'm reading the username and putting that object and I'm broadcasting

217
00:14:45.110 --> 00:14:48.290
it directly to the notify.

218
00:14:49.320 --> 00:14:51.180
Which is basically that start, start.

219
00:14:52.350 --> 00:14:58.800
And after after this catch close, I need to mention that catch extra catch clause for the class.

220
00:14:58.800 --> 00:15:00.270
Not also.

221
00:15:02.760 --> 00:15:04.320
So these are also required.

222
00:15:05.120 --> 00:15:08.210
So now you can see the object will be gone.

223
00:15:08.210 --> 00:15:15.710
And what I'm going to do is system, dot, dot print and I'm printing that stuff.

224
00:15:16.070 --> 00:15:22.610
So how we can mention this and after this I need to mention the date also because it should print a

225
00:15:22.610 --> 00:15:23.120
date.

226
00:15:23.240 --> 00:15:25.520
So after this, it will bring the date.

227
00:15:26.350 --> 00:15:30.610
Read how you can create this client constructor and each and everything.

228
00:15:30.820 --> 00:15:36.380
So now we are remaining with some more extra part with get username concepts and each and everything.

229
00:15:36.400 --> 00:15:41.570
I will tell you in these only how we are going to do that stops.

230
00:15:41.590 --> 00:15:42.460
And.

231
00:15:43.190 --> 00:15:44.480
Hope you understand this.

232
00:15:44.960 --> 00:15:46.340
Stick to this topic.

233
00:15:46.340 --> 00:15:50.780
And in a later part I'm going to create some Java swing also.

234
00:15:50.780 --> 00:15:51.980
So I will tell you.

235
00:15:51.980 --> 00:15:55.100
But inside that I'm not mentioning all the stops.

236
00:15:55.100 --> 00:15:59.090
I mentioned the only light part and some string concepts.

237
00:15:59.990 --> 00:16:02.960
So this is how we can create a server.

238
00:16:02.960 --> 00:16:04.640
But we are remaining with client.

239
00:16:04.640 --> 00:16:06.800
But also client part is very easy.

240
00:16:06.950 --> 00:16:12.400
So we can create in within around 50 lines of code and chat message.

241
00:16:12.410 --> 00:16:14.390
I'm going to mention all the chat messages.

242
00:16:14.390 --> 00:16:19.550
So once we establish all the server connection, we can proceed with client and chat message also.
