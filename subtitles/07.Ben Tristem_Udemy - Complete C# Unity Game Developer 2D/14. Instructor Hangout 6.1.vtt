WEBVTT
1
1

00:00:00.000  -->  00:00:05.760
[MUSIC]
2

2

00:00:05.760  -->  00:00:07.190
Hello again, we've got Ben with us,
3

3

00:00:07.190  -->  00:00:11.960
it's been a while since you've seen
his handsome face and heard his voice.
4

4

00:00:11.960  -->  00:00:13.780
We're gonna do a bit of
an instructor hang out and
5

5

00:00:13.780  -->  00:00:16.790
talk about some code architecture and
some deep stuff.
6

6

00:00:16.790  -->  00:00:18.140
How you doing today Ben?
7

7

00:00:18.140  -->  00:00:20.140
I am wonderful Rick,
despite speaking to you.
8

8

00:00:20.140  -->  00:00:22.775
Thank you very much for asking.
&gt;&gt; Goodness me, what a charmer.
9

9

00:00:22.775  -->  00:00:23.640
&gt;&gt; [LAUGH]
10

10

00:00:23.640  -->  00:00:24.230
&gt;&gt; Okay, so
11

11

00:00:24.230  -->  00:00:26.560
what we see on screen
here is our character.
12

12

00:00:26.560  -->  00:00:29.330
We now have him doing some
pretty basic functionality.
13

13

00:00:29.330  -->  00:00:31.602
&gt;&gt; I call him Mr Malacid because
14

14

00:00:31.602  -->  00:00:36.330
of the speed he's moving at.
&gt;&gt; Don't worry upcoming videos will
15

15

00:00:36.330  -->  00:00:40.680
make him a lot more snappy but
at the moment [SOUND] bump.
16

16

00:00:40.680  -->  00:00:43.050
What should we look at first?
&gt;&gt; Well,
17

17

00:00:43.050  -->  00:00:45.550
let's just make sure that
the flips bright code is clear.
18

18

00:00:45.550  -->  00:00:48.410
So let's dive into the player script and
19

19

00:00:48.410  -->  00:00:49.870
have a little look at the way
that we're doing this.
20

20

00:00:49.870  -->  00:00:53.780
So basically this video, what I want
to ram home is the difference between
21

21

00:00:53.780  -->  00:00:57.480
calculating something when you need it,
or caching or keeping a copy of it.
22

22

00:00:57.480  -->  00:01:01.666
And I wanna say that for
us as beginners, we wanna make sure,
23

23

00:01:01.666  -->  00:01:06.262
if we have a seesaw here and
we have a choice, between our code being
24

24

00:01:06.262  -->  00:01:10.884
really kind of clean and
easy to read versus being performance,.
25

25

00:01:10.884  -->  00:01:13.850
Then I'm holding a lot more
weight on the clean side.
26

26

00:01:13.850  -->  00:01:17.164
So we're going for clean code, it's not
necessarily the fastest stuff around,
27

27

00:01:17.164  -->  00:01:19.677
it doesn't matter at the moment,
it's plenty fast enough.
28

28

00:01:19.677  -->  00:01:22.630
[CROSSTALK].
29

29

00:01:22.630  -->  00:01:25.300
I believe it's called
a teeter-totter in North America.
30

30

00:01:25.300  -->  00:01:27.120
&gt;&gt; A teeter-totter, okay,
31

31

00:01:27.120  -->  00:01:28.380
well I call it a see-saw.
&gt;&gt; Yeah, or
32

32

00:01:28.380  -->  00:01:31.050
in Canada at least that's for sure.
&gt;&gt; [LAUGH] But hey,
33

33

00:01:31.050  -->  00:01:32.273
tomato, tomato, whatever.
34

34

00:01:32.273  -->  00:01:33.935
[LAUGH]
&gt;&gt; So what I'm saying is
35

35

00:01:33.935  -->  00:01:35.105
&gt;&gt; The thing is that if we've got a choice
36

36

00:01:35.105  -->  00:01:39.655
of calculating something, and keeping
a copy of it, caching it, maybe for speed.
37

37

00:01:39.655  -->  00:01:42.655
Remember that a weapons cache is like,
here's a massive supply centre,
38

38

00:01:42.655  -->  00:01:44.955
here's the frontline of battle,
here are little weapons caches.
39

39

00:01:44.955  -->  00:01:48.485
And we pull the weapons into the caches,
so that the little troops can use them.
40

40

00:01:48.485  -->  00:01:52.145
We're going to avoid using caches for
now, because they are copies and
41

41

00:01:52.145  -->  00:01:53.620
they are confusing.
42

42

00:01:53.620  -->  00:01:57.920
So what we're doing here with this,
sprite flipping.
43

43

00:01:57.920  -->  00:02:02.310
[CROSSTALK]
&gt;&gt; So when you, just to clarify Ben,
44

44

00:02:02.310  -->  00:02:02.950
sorry to interrupt.
45

45

00:02:02.950  -->  00:02:05.290
When you talk about we're
not going to use caching,
46

46

00:02:05.290  -->  00:02:07.540
you're just talking about flipping
the sprite at the moment.
47

47

00:02:07.540  -->  00:02:12.020
Cuz we're using caching throughout
this section, it's just this example.
48

48

00:02:12.020  -->  00:02:13.030
&gt;&gt; Yeah, so in this case here,
49

49

00:02:13.030  -->  00:02:13.930
this is a cache, right?
50

50

00:02:13.930  -->  00:02:18.310
This is a cache of the rigidBody
component, we make ourself an instance
51

51

00:02:18.310  -->  00:02:21.620
variable here, that the player instance
has a reference to the rigidBody.
52

52

00:02:21.620  -->  00:02:24.680
We go find it on start,
caching it, this is a cache.
53

53

00:02:24.680  -->  00:02:28.970
And then we use it wherever we use it
down here, etc, and here, and here, okay?
54

54

00:02:28.970  -->  00:02:31.580
And it's because we use it
in multiple places that we
55

55

00:02:31.580  -->  00:02:34.920
make it an instance variable, that's
why we out it at the top of the class.
56

56

00:02:34.920  -->  00:02:37.880
So that from a scope point of
view it is available everywhere
57

57

00:02:37.880  -->  00:02:39.670
&gt;&gt; But also the consequence of putting
58

58

00:02:39.670  -->  00:02:43.290
anything up here as an instance variable,
is a cache.
59

59

00:02:43.290  -->  00:02:47.850
It is you store something in it and then
that thing may or may not be necessary.
60

60

00:02:47.850  -->  00:02:52.360
We could do this GetComponent Rigidbody
every time that we see my rigid body,
61

61

00:02:52.360  -->  00:02:54.230
we could not use my rigid body.
62

62

00:02:54.230  -->  00:02:57.294
And in this instance here we
could not use myRigidBody, but
63

63

00:02:57.294  -->  00:03:00.350
rather use this
GetComponent RigidBody in there.
64

64

00:03:00.350  -->  00:03:03.600
And we could do the same thing
everywhere that we see myRigidBody.
65

65

00:03:03.600  -->  00:03:06.738
In fact you could literally do a find and
replace of myRigidBody with
66

66

00:03:06.738  -->  00:03:10.730
GetComponent Rigidbody which is what
Rick's doing now, and it will still work.
67

67

00:03:11.840  -->  00:03:13.150
What will happen is it will go and
68

68

00:03:13.150  -->  00:03:16.860
get that component every
single time it needs to.
69

69

00:03:16.860  -->  00:03:20.050
And it might be slow But I don't care.
70

70

00:03:20.050  -->  00:03:24.880
I'm saying that on the teeter totter,
we're focusing on clean versus performing.
71

71

00:03:26.290  -->  00:03:28.980
But it's actually the other point
is that this is easier to read.
72

72

00:03:28.980  -->  00:03:34.600
It's easier to read myRigidBody than
it is to read all this stuff here.
73

73

00:03:34.600  -->  00:03:36.890
So that's the main reason I'm caching it.
74

74

00:03:36.890  -->  00:03:39.160
But we need to be aware
that this is a cache.
75

75

00:03:39.160  -->  00:03:44.080
There is a performance difference between
getting something that's a component
76

76

00:03:44.080  -->  00:03:46.960
right on this game object.
77

77

00:03:46.960  -->  00:03:50.221
So we're currently on the player and
getting something on the player.
78

78

00:03:50.221  -->  00:03:51.990
Compared to saying search through our
79

79

00:03:51.990  -->  00:03:54.020
entire project to find something right.
&gt;&gt; Yep.
80

80

00:03:54.020  -->  00:03:56.070
&gt;&gt; If we do a find object of type
81

81

00:03:56.070  -->  00:03:58.740
it's going to be out there looking for
everything.
82

82

00:03:58.740  -->  00:03:59.740
This is pretty quick.
83

83

00:04:00.830  -->  00:04:04.170
This is probably pretty quick but
we don't care at the moment.
84

84

00:04:04.170  -->  00:04:06.240
I'm mainly saying that it reads better.
85

85

00:04:06.240  -->  00:04:08.880
So when we decide this code, it's like
that myRigidBody reads better but
86

86

00:04:08.880  -->  00:04:09.930
it is a consequence.
87

87

00:04:09.930  -->  00:04:12.150
What's the consequence of doing this?
88

88

00:04:12.150  -->  00:04:14.010
I wonder if the students can
every think about what that is.
89

89

00:04:15.060  -->  00:04:18.040
Well, the risk is as follow.
90

90

00:04:18.040  -->  00:04:24.210
In fact, let's do it, let's play
the game and now at this moment,
91

91

00:04:24.210  -->  00:04:30.740
this player instance has got
a reference to this rigid body right?
92

92

00:04:30.740  -->  00:04:33.550
So from a code point of view,
the rigid body is set to that.
93

93

00:04:33.550  -->  00:04:34.980
Now if you delete this component right?
94

94

00:04:34.980  -->  00:04:37.370
Let's kill the rigid body
component altogether.
95

95

00:04:37.370  -->  00:04:39.280
Just delete it at run time.
96

96

00:04:39.280  -->  00:04:42.040
Now try and do something in the game,
click back in the game window and try and
97

97

00:04:42.040  -->  00:04:42.820
move around.
98

98

00:04:42.820  -->  00:04:46.930
And we're gonna get, if we look in the
console, we're gonna get a object of type
99

99

00:04:46.930  -->  00:04:49.350
rigid body has been destroyed and
you're still trying to access it.
100

100

00:04:49.350  -->  00:04:52.110
It's gonna get really upset with us, okay?
101

101

00:04:52.110  -->  00:05:00.890
So this is the risk of the cache.
&gt;&gt; Because in here, we've already,
102

102

00:05:00.890  -->  00:05:03.270
that's not as much of a problem as
what we're doing down here, right?
103

103

00:05:03.270  -->  00:05:05.080
So it's saying,
I don't know where that is.
104

104

00:05:05.080  -->  00:05:07.960
I can't find it, I can't find it.
&gt;&gt; Yeah, so we set that.
105

105

00:05:07.960  -->  00:05:09.390
We set myRigidBody, it's valid.
106

106

00:05:09.390  -->  00:05:10.570
We deleted myRigidBody.
107

107

00:05:10.570  -->  00:05:14.570
Then here, we're assuming that myRigidBody
is still a reference to a RigidBody, and
108

108

00:05:14.570  -->  00:05:15.580
it isn't anymore.
109

109

00:05:15.580  -->  00:05:18.320
Now if you were to do this GetComponent
down here, you'd still have the same
110

110

00:05:18.320  -->  00:05:20.450
error because it wouldn't be able
to find a RigidBody component.
111

111

00:05:20.450  -->  00:05:21.160
Well you'd have a slightly
112

112

00:05:21.160  -->  00:05:21.990
different error.
&gt;&gt; Right.
113

113

00:05:21.990  -->  00:05:23.200
&gt;&gt; Rather than it saying hey, the thing
114

114

00:05:23.200  -->  00:05:25.970
you were trying to access is destroyed,
it'll go I can't find a rigid body.
115

115

00:05:25.970  -->  00:05:28.530
So either way,
it's not error-tolerant like this.
116

116

00:05:28.530  -->  00:05:30.040
But I just wanna be, make you aware that
117

117

00:05:30.040  -->  00:05:30.950
that's what's going on.
&gt;&gt; Yeah.
118

118

00:05:30.950  -->  00:05:33.040
&gt;&gt; Anyway, little example of caching.
119

119

00:05:33.040  -->  00:05:36.210
So let's move, now we'll talk about
the way that the flight sprite flips.
120

120

00:05:36.210  -->  00:05:37.575
Just to reiterate that.
121

121

00:05:37.575  -->  00:05:42.910
So if you just move the x up and
down Rick for a moment of the player.
122

122

00:05:42.910  -->  00:05:44.690
Just drag the x value up and down.
&gt;&gt; Like that?
123

123

00:05:44.690  -->  00:05:46.009
&gt;&gt; Just wanna make sure that we're clear
124

124

00:05:46.009  -->  00:05:48.160
that if the x value is increasing
the velocity is to the right.
125

125

00:05:48.160  -->  00:05:49.300
Rick's already covered this.
126

126

00:05:49.300  -->  00:05:51.730
So therefore the sprite scale is positive.
127

127

00:05:51.730  -->  00:05:54.215
Then if the velocity is decreasing i.e.
128

128

00:05:54.215  -->  00:05:56.735
he's moving to the left so
if we do that for a sec.
129

129

00:05:56.735  -->  00:05:58.315
We want him facing left and
130

130

00:05:58.315  -->  00:06:02.025
facing left means we want this
sprint scale at a value of -1.
131

131

00:06:02.025  -->  00:06:05.455
So if you just flip that around to -1 in
the inspector Rick so people can see.
132

132

00:06:06.660  -->  00:06:11.390
So we could and we did in the prototype
briefly, over in the code, if we take
133

133

00:06:11.390  -->  00:06:15.290
a look at the code, we did temporarily
store, and you'll see a lot of this on
134

134

00:06:15.290  -->  00:06:18.260
the web when you go and look up people's
code, you'll see something like this.
135

135

00:06:18.260  -->  00:06:21.170
Bool is facing right or
136

136

00:06:21.170  -->  00:06:25.480
something like that, is facing right,
is what we used to have.
137

137

00:06:25.480  -->  00:06:26.380
Okay, and you could say,
138

138

00:06:26.380  -->  00:06:28.380
we don't care whether you
initialize it to true or false.
139

139

00:06:28.380  -->  00:06:32.350
In fact, the fact that you don't know what
to initialize it to slightly worries me.
140

140

00:06:32.350  -->  00:06:35.140
Because it's like when it doesn't have
a natural value in the beginning,
141

141

00:06:35.140  -->  00:06:36.880
who knows which way he's facing.
142

142

00:06:36.880  -->  00:06:39.500
So you could store whether
he's facing left or
143

143

00:06:39.500  -->  00:06:43.050
right, calculate it somehow,
well how do you calculate it?
144

144

00:06:43.050  -->  00:06:44.590
Well you're gonna calculate
it something like this.
145

145

00:06:44.590  -->  00:06:47.610
If you stay still on the scroll for a
minute, we're gonna calculate it something
146

146

00:06:47.610  -->  00:06:52.790
like that, which is, is my velocity
positive in the X direction or not.
147

147

00:06:52.790  -->  00:06:55.830
If we are going right,
then this value will come out as +1, and
148

148

00:06:55.830  -->  00:06:58.750
if we're going left this
value will come out as -1.
149

149

00:06:58.750  -->  00:07:01.940
So if you're gonna calculate that to
work out whether you're facing right or
150

150

00:07:01.940  -->  00:07:03.760
not, why store it?
151

151

00:07:03.760  -->  00:07:05.130
Why not just calculate
it when you need it?
152

152

00:07:05.130  -->  00:07:07.400
This is fast to do, just calculate it.
153

153

00:07:07.400  -->  00:07:11.100
And then you don't have a risk that
your "is facing right" gets out of sync
154

154

00:07:11.100  -->  00:07:13.200
with what direction
you're actually facing.
155

155

00:07:13.200  -->  00:07:17.790
So the reason we've done this is to, in
one fell swoop, face the direction we're
156

156

00:07:17.790  -->  00:07:21.550
actually moving at the moment
that we decide to do the flip.
157

157

00:07:21.550  -->  00:07:23.630
No caching, no storing, nothing else.
158

158

00:07:23.630  -->  00:07:24.670
So that's that.
159

159

00:07:24.670  -->  00:07:26.840
There's another place that we
are also not caching here,
160

160

00:07:26.840  -->  00:07:30.960
which is that whether the player has
horizontal speed, we rake a Boolean.
161

161

00:07:30.960  -->  00:07:33.640
Why, by the way,
do we not just take this code and
162

162

00:07:33.640  -->  00:07:35.110
stick it straight in those brackets?
163

163

00:07:37.680  -->  00:07:38.970
Nothing to do with caching.
164

164

00:07:38.970  -->  00:07:39.900
It's just readability.
165

165

00:07:41.340  -->  00:07:42.810
That is the same calculation.
166

166

00:07:42.810  -->  00:07:44.660
It's gonna do this calculation, boom, and
167

167

00:07:44.660  -->  00:07:46.810
then use the result of
that calculation there.
168

168

00:07:46.810  -->  00:07:50.680
What I'm doing here is attaching
meaning to the calculation.
169

169

00:07:50.680  -->  00:07:55.130
This thing is fairly meaningless,
this thing on the right here, oops, God.
170

170

00:07:55.130  -->  00:07:57.550
If you look at,
I'm struggling with my annotations,
171

171

00:07:57.550  -->  00:07:59.100
let me just try again.
&gt;&gt; Yeah.
172

172

00:07:59.100  -->  00:07:59.960
&gt;&gt; Just wait for it to clear,
173

173

00:07:59.960  -->  00:08:03.047
there's a little delay [CROSSTALK]
&gt;&gt; Shove it in there.
174

174

00:08:03.047  -->  00:08:05.610
&gt;&gt; That stuff that Rick's highlighting is
175

175

00:08:11.005  -->  00:08:13.655
the same calculation as
when we do the boolean,
176

176

00:08:13.655  -->  00:08:15.865
but when your brain tries
to read the code here,
177

177

00:08:15.865  -->  00:08:20.045
what you're trying to do is tokenize this,
you're trying to say what does that mean?
178

178

00:08:20.045  -->  00:08:21.255
And you have to think about it, or
179

179

00:08:21.255  -->  00:08:25.410
you end up putting a comment in
that says what it does, even worse.
180

180

00:08:25.410  -->  00:08:29.270
Because you can say a comment,
it says, if it is facing right or no.
181

181

00:08:29.270  -->  00:08:30.920
Make a boolean that
says it's facing right.
182

182

00:08:30.920  -->  00:08:33.750
Because if you then go and
change this maths,
183

183

00:08:33.750  -->  00:08:38.190
my question is what is keeping you
honest to updating this comment.
184

184

00:08:39.380  -->  00:08:40.970
What makes you update it?
185

185

00:08:40.970  -->  00:08:43.420
Nothing properly keeps you honest.
186

186

00:08:43.420  -->  00:08:48.280
So rather than saying if this is facing
right, just do the thing that is not gonna
187

187

00:08:48.280  -->  00:08:50.890
slow the thing down or cause you
any problems, just make a boolean.
188

188

00:08:50.890  -->  00:08:52.380
It's self commenting code.
189

189

00:08:53.430  -->  00:08:56.710
This tells you what it does, now your
brain can focus on the if statement and
190

190

00:08:56.710  -->  00:09:00.780
say if the player has horizontal speed,
and then if you really wanted to
191

191

00:09:00.780  -->  00:09:04.380
go over the top you'd take this out
into another method and say flip sprite.
192

192

00:09:04.380  -->  00:09:09.140
But you don't need to because
It's only one line of code, but
193

193

00:09:09.140  -->  00:09:13.530
if you did several things when
he's got horizontal speed,
194

194

00:09:13.530  -->  00:09:15.940
of course you would take all of this lot,
take it out into another method.
195

195

00:09:15.940  -->  00:09:19.010
&gt;&gt; I think a similar conversation is when
196

196

00:09:19.010  -->  00:09:24.606
we name variables such as i, or move,
197

197

00:09:24.606  -->  00:09:30.310
out something that doesn't make any sense,
or v for velocity.
198

198

00:09:30.310  -->  00:09:33.480
If we have that,
then who knows what that means.
199

199

00:09:33.480  -->  00:09:34.930
And you absolutely will be coming back and
200

200

00:09:34.930  -->  00:09:38.400
looking at your code in a couple of weeks
time and saying I don't even know what
201

201

00:09:38.400  -->  00:09:39.940
this is supposed to do.
&gt;&gt; But
202

202

00:09:39.940  -->  00:09:41.460
it's quicker to type I hear you ask.
203

203

00:09:41.460  -->  00:09:45.540
Well that's rubbish, complete that to
velocity for a minute ready for example.
204

204

00:09:45.540  -->  00:09:47.100
Use the IDE here.
205

205

00:09:47.100  -->  00:09:50.900
And now, just delete that velocity and
then start retyping it.
206

206

00:09:50.900  -->  00:09:51.850
But just keep the v.
207

207

00:09:54.070  -->  00:09:55.460
Open brackets v.
208

208

00:09:55.460  -->  00:09:58.330
Now because it knows about,
if we just go back to that once
209

209

00:09:58.330  -->  00:10:02.530
more without hitting the Return,
because it knows about the context,
210

210

00:10:02.530  -->  00:10:06.240
it knows about the scope of this variable,
hitting v already brings up velocity.
211

211

00:10:06.240  -->  00:10:08.000
So you've got one extra key press.
212

212

00:10:08.000  -->  00:10:10.110
With a small number of local variables.
213

213

00:10:10.110  -->  00:10:12.320
Another reason to keep
the variables local, right?
214

214

00:10:12.320  -->  00:10:16.195
It says the most likely thing that you're
trying to access here is the local
215

215

00:10:16.195  -->  00:10:18.340
variable starting with V.
216

216

00:10:18.340  -->  00:10:22.980
So you've got one extra key
press to go from V to velocity.
217

217

00:10:22.980  -->  00:10:25.950
&gt;&gt; Dropping here then, if we hit V It's
218

218

00:10:25.950  -->  00:10:28.010
not gonna go straight to velocity, is it?
&gt;&gt; No.
219

219

00:10:28.010  -->  00:10:30.370
It's gonna find all sorts of stuff
that comes from the monobehavior.
220

220

00:10:31.540  -->  00:10:33.510
So just use the IDE,
221

221

00:10:33.510  -->  00:10:37.510
we're years away from when people used
to use, name things with single letters.
222

222

00:10:37.510  -->  00:10:42.100
Use full, long, descriptive method names.
&gt;&gt; Yeah.
223

223

00:10:42.100  -->  00:10:43.280
&gt;&gt; Not so long it's slow to read, but
224

224

00:10:43.280  -->  00:10:44.010
really good point, Rick.
225

225

00:10:45.080  -->  00:10:46.420
So, let me just check my list.
226

226

00:10:46.420  -->  00:10:49.970
So why, caching this took for
a second, if we've got time.
227

227

00:10:49.970  -->  00:10:50.790
Have we got time?
228

228

00:10:50.790  -->  00:10:52.340
Yeah, I think we've got a few minutes.
229

229

00:10:52.340  -->  00:10:56.370
Let's talk for
a second about caching versus calculating.
230

230

00:10:56.370  -->  00:10:59.500
So some of you who know a little bit more
about this, if you bring up that webpage
231

231

00:10:59.500  -->  00:11:04.350
Rick, might say, well this is all
very well calculating as you go.
232

232

00:11:04.350  -->  00:11:10.520
Back in the days when processes
&gt;&gt; Were of a similar speed,
233

233

00:11:10.520  -->  00:11:13.410
if you just stay still for a sec,
were of a similar speed to memory.
234

234

00:11:14.650  -->  00:11:16.570
Then it's okay to just,
it doesn't really make any difference.
235

235

00:11:16.570  -->  00:11:17.990
You calculate, you store,
it doesn't matter.
236

236

00:11:17.990  -->  00:11:24.540
These days, processors are really really
fast, which might make you just say hey,
237

237

00:11:24.540  -->  00:11:26.440
I should just calculate
everything when I need it.
238

238

00:11:26.440  -->  00:11:29.830
But the problem is that memory, and
memory bandwidth, is very slow.
239

239

00:11:30.840  -->  00:11:36.100
So if you store stuff in memory,
it's really slow to go and get it.
240

240

00:11:36.100  -->  00:11:39.930
So you need to think that these days
actually the most expensive thing to do
241

241

00:11:39.930  -->  00:11:40.910
is go to memory.
242

242

00:11:40.910  -->  00:11:43.650
It depends entirely on the platform
you're working on, the environment you're
243

243

00:11:43.650  -->  00:11:46.310
working in, and all sorts else.
&gt;&gt; But it just reinforces my point,
244

244

00:11:46.310  -->  00:11:48.500
that to calculate is absolutely fine.
245

245

00:11:48.500  -->  00:11:51.400
Your little CPU is sitting there with
loads of calls on it all going a billion
246

246

00:11:51.400  -->  00:11:52.580
times a second.
247

247

00:11:52.580  -->  00:11:56.030
They can calculate which way to
flip that play very, very fast.
248

248

00:11:56.030  -->  00:11:58.895
If you go and store that in memory,
it could take an age from a process to
249

249

00:11:58.895  -->  00:12:02.017
the point of many, many hundreds of
nanoseconds to go and get back [CROSSTALK]
250

250

00:12:02.017  -->  00:12:04.731
&gt;&gt; Now it's probably people sitting there
251

251

00:12:04.731  -->  00:12:07.215
thinking is that the same on mobile.
252

252

00:12:07.215  -->  00:12:11.550
Are we seeing the same processor
memory gap on mobile devices.
253

253

00:12:11.550  -->  00:12:12.250
&gt;&gt; Yeah, broadly
254

254

00:12:13.390  -->  00:12:14.536
&gt;&gt; Broadly, broadly the same.
255

255

00:12:14.536  -->  00:12:17.388
&gt;&gt; Yep, yep, cool.
256

256

00:12:17.388  -->  00:12:19.480
&gt;&gt; Okay, so there you go, that's that.
257

257

00:12:19.480  -->  00:12:23.410
So basically if you don't cache it if
you can calculate it is the thing to
258

258

00:12:23.410  -->  00:12:24.606
take home.
259

259

00:12:24.606  -->  00:12:28.210
Keeps you toy your code more functional,
260

260

00:12:28.210  -->  00:12:32.370
which means it just does something when it
needs it and then calculates the result.
261

261

00:12:32.370  -->  00:12:35.520
Makes life a lot easier,
removes bugs, all good.
262

262

00:12:35.520  -->  00:12:36.970
So hopefully, that's a helpful hang out.
263

263

00:12:36.970  -->  00:12:38.960
If you like these hang outs,
I don't know what you can do.
264

264

00:12:38.960  -->  00:12:40.290
How can they reward us for liking that?
265

265

00:12:40.290  -->  00:12:42.260
You can leave us another five star review.
266

266

00:12:42.260  -->  00:12:44.270
You could buy all of our other courses.
267

267

00:12:45.690  -->  00:12:48.410
You could say, thanks very much,
both on the community side and
268

268

00:12:48.410  -->  00:12:51.180
in the [INAUDIBLE] Q and A Yeah.
269

269

00:12:51.180  -->  00:12:52.970
That would do.
&gt;&gt; And
270

270

00:12:52.970  -->  00:12:55.140
most importantly you can finish your game.
271

271

00:12:55.140  -->  00:12:56.010
Put them out there.
272

272

00:12:56.010  -->  00:12:58.290
And make amazing games
that we can play and
273

273

00:12:58.290  -->  00:13:00.750
enjoy as well.
&gt;&gt; That's it.
274

274

00:13:00.750  -->  00:13:02.630
That's it.
And then we fullfill anyways,
275

275

00:13:02.630  -->  00:13:04.470
it's been nice to chat with you guys.
&gt;&gt; See you guys.
276

276

00:13:06.340  -->  00:13:08.670
&gt;&gt; I'll leave you in his capable hands.
277

277

00:13:08.670  -->  00:13:09.250
Back into it!
278

278

00:13:09.250  -->  00:13:10.000
Back into the course!
279

279

00:13:10.000  -->  00:13:13.340
Let's get cracking and make some cool
functionality in the next few videos.
280

280

00:13:13.340  -->  00:13:14.838
Get our player jumping and
281

281

00:13:14.838  -->  00:13:17.459
climbing up ladders.
&gt;&gt; Yeah, and as you can see these are not
282

282

00:13:17.459  -->  00:13:19.950
rehearsed these hangouts,
in fact we didn't rehearse this at all.
283

283

00:13:19.950  -->  00:13:23.113
And that's half the point of them you're
hanging out with us rather then us being
284

284

00:13:23.113  -->  00:13:26.663
all stiff and collared, although I am
a little stiff and collared, but anyway.
