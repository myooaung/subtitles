WEBVTT
1
1

00:00:00.050  -->  00:00:04.087
[MUSIC]
2

2

00:00:04.087  -->  00:00:07.829
Hello again, and in this video, we're
gonna be talking about how C# is broadly
3

3

00:00:07.829  -->  00:00:11.240
organized and the statements,
methods, classes, namespaces.
4

4

00:00:11.240  -->  00:00:13.350
We're gonna be looking
at an issue of scope.
5

5

00:00:13.350  -->  00:00:16.550
And also, we're gonna be,
when we push up on the keyboard,
6

6

00:00:16.550  -->  00:00:19.480
it's going to print out our variable,
our guest variable of 500.
7

7

00:00:19.480  -->  00:00:22.190
So let's jump in and
make a bit more magic.
8

8

00:00:22.190  -->  00:00:25.650
We're in our script here, I'm gonna do
a quick recap of our game mechanics.
9

9

00:00:25.650  -->  00:00:27.860
Scroll down to the bottom and
give myself some white space.
10

10

00:00:27.860  -->  00:00:29.660
I've got my pen tool here.
11

11

00:00:29.660  -->  00:00:34.521
We're asking the player to choose between
1000 and 1, somewhere in that range.
12

12

00:00:34.521  -->  00:00:39.130
We'll say, for example,
the player's chosen 687 as their number.
13

13

00:00:39.130  -->  00:00:40.950
And I think that's a pretty cool number.
14

14

00:00:40.950  -->  00:00:43.940
And where our starting point
is to say well, is it 500?
15

15

00:00:43.940  -->  00:00:50.410
We take right in the middle
of those 2 values, is it 500?
16

16

00:00:50.410  -->  00:00:54.070
Which is 1000 +1 divided by 2, and
technically that would give us 500 and
17

17

00:00:54.070  -->  00:00:55.010
a half.
18

18

00:00:55.010  -->  00:00:57.518
And we have to round it down,
and that will give us 500.
19

19

00:00:59.899  -->  00:01:03.950
From here, the player's gonna say, well,
no, my number is higher than that.
20

20

00:01:03.950  -->  00:01:06.340
In which case,
we know the maximum is still 1000.
21

21

00:01:06.340  -->  00:01:10.650
This was our max of 1000,
this is our min of 1.
22

22

00:01:10.650  -->  00:01:13.590
Our max is still 1000, but
what is our minimum now?
23

23

00:01:13.590  -->  00:01:17.350
Well, our minimum is
the same as our guess.
24

24

00:01:17.350  -->  00:01:19.380
Our guess was 500.
25

25

00:01:19.380  -->  00:01:26.750
Now we can say that our minimum is 500 or
we can say that our minimum equals guess.
26

26

00:01:27.910  -->  00:01:31.680
And we can assign a variable
as another variable.
27

27

00:01:31.680  -->  00:01:34.320
So if we're to say,
guess as a variable equals 500.
28

28

00:01:34.320  -->  00:01:40.040
Now I wanna say, min=guess, that's in
other words saying min equals 500.
29

29

00:01:40.040  -->  00:01:44.260
And then now we're gonna take
the midpoint between those 2.
30

30

00:01:44.260  -->  00:01:48.730
So it'll be 1000+500 divided by 2,
31

31

00:01:48.730  -->  00:01:54.280
is going to equal 750, which means
our guess is going to equal 750.
32

32

00:01:54.280  -->  00:01:58.210
And we say to the player,
is it higher or lower?
33

33

00:01:58.210  -->  00:02:01.000
The player's gonna say well that's higher
than my number, you need to guess lower.
34

34

00:02:01.000  -->  00:02:07.120
That's great, in which case our new
range 750 becomes our new maximum.
35

35

00:02:07.120  -->  00:02:13.230
And our minimum is 500, and
then we take a guess from there as well.
36

36

00:02:13.230  -->  00:02:18.290
So by taking a guess, we are redefining
either the minimum or the maximum.
37

37

00:02:18.290  -->  00:02:19.940
And then we're having another guess.
38

38

00:02:19.940  -->  00:02:22.900
And then we're redefining the minimum and
the maximum, and so on.
39

39

00:02:22.900  -->  00:02:25.110
If we go under our Start method here.
40

40

00:02:25.110  -->  00:02:28.690
underneath int min = 1;, let's create
a new variable, which is guess.
41

41

00:02:28.690  -->  00:02:33.365
So int guess = 500, we'll start it at 500.
42

42

00:02:33.365  -->  00:02:38.105
We'll get a bit more sophisticated
soon with our 1,000+ 1 divided by 2.
43

43

00:02:38.105  -->  00:02:40.515
But for now, we'll just put
it in as our starting guess.
44

44

00:02:40.515  -->  00:02:43.195
You can see that Visual Studio is
saying you haven't used this yet.
45

45

00:02:43.195  -->  00:02:45.005
That's great, we've only just created it.
46

46

00:02:45.005  -->  00:02:47.315
We're gonna come down
into our Update method.
47

47

00:02:47.315  -->  00:02:48.965
This is where we wanna use it.
48

48

00:02:48.965  -->  00:02:52.480
If the player hits the up arrow,
49

49

00:02:52.480  -->  00:02:56.910
they're saying that their number is
higher than the number we chose,
50

50

00:02:56.910  -->  00:03:01.340
which means that our minimum is now,
undo that.
51

51

00:03:01.340  -->  00:03:08.600
Sometimes autocomplete's
a little bit crazy, min = guess.
52

52

00:03:08.600  -->  00:03:11.242
We can define a variable
as another variable.
53

53

00:03:11.242  -->  00:03:15.040
So this variable up here
is being defined as 500.
54

54

00:03:15.040  -->  00:03:21.106
Therefore, when we define min as guess,
min takes on 500 as its value.
55

55

00:03:21.106  -->  00:03:24.190
The problem we're seeing is a whole
bunch of red squiggly lines.
56

56

00:03:24.190  -->  00:03:27.490
And that's a lot of the topic for
this lecture for this conversation.
57

57

00:03:27.490  -->  00:03:30.930
If we mouse over it, the name min does
not exist in the current context.
58

58

00:03:30.930  -->  00:03:31.870
Why is that?
59

59

00:03:31.870  -->  00:03:33.980
Well it's because it's out of scope.
60

60

00:03:33.980  -->  00:03:35.360
And I'm gonna show you
a couple of things here,
61

61

00:03:35.360  -->  00:03:37.000
couple of slides as well
to make this super clear.
62

62

00:03:37.000  -->  00:03:38.440
I've zoomed out a little bit, and
63

63

00:03:38.440  -->  00:03:42.730
do a little bit more scratching on
the screen again to show you context.
64

64

00:03:42.730  -->  00:03:45.540
So the code blocks that we talked
about in the previous video
65

65

00:03:45.540  -->  00:03:47.760
are also a definition for scope.
66

66

00:03:47.760  -->  00:03:50.486
So you see our curly bracket here or
curly brace,
67

67

00:03:50.486  -->  00:03:56.420
curly brace there within our
start method anything we declare.
68

68

00:03:56.420  -->  00:04:00.220
So we're declaring and
initializing these 3 variables
69

69

00:04:00.220  -->  00:04:05.140
can only be used as a variable,
can only be used in the Start method.
70

70

00:04:06.400  -->  00:04:07.750
Update will have no knowledge of it.
71

71

00:04:07.750  -->  00:04:09.080
So up here we have Update.
72

72

00:04:09.080  -->  00:04:13.710
It is its own method with its curly
braces in here, that's a code block.
73

73

00:04:13.710  -->  00:04:19.440
And it can't see, it can't access,
it has no way of accessing
74

74

00:04:19.440  -->  00:04:22.860
those particular variables,
cuz it's out of scope.
75

75

00:04:22.860  -->  00:04:25.160
Let me give you a diagram on
this to make it super clear.
76

76

00:04:25.160  -->  00:04:27.890
I'm gonna go a little bit slow on
this to really have it sink in and
77

77

00:04:27.890  -->  00:04:28.822
make it super clear.
78

78

00:04:28.822  -->  00:04:32.150
Use an analogy of Russian dolls,
we've got the big doll and
79

79

00:04:32.150  -->  00:04:35.713
inside that sits the littler doll, and
the littler doll and the littler doll.
80

80

00:04:35.713  -->  00:04:38.780
And they can all be grouped
together as this cluster.
81

81

00:04:38.780  -->  00:04:42.690
So we can look at our code as statements,
statementA, statementB.
82

82

00:04:42.690  -->  00:04:45.750
Jumping back over here,
we've got these statements under debug.
83

83

00:04:45.750  -->  00:04:49.040
We've got these statements,
our if statement and
84

84

00:04:49.040  -->  00:04:51.540
then within that we've
got our debug statement.
85

85

00:04:52.710  -->  00:04:54.950
So we've got a bunch of statements,
statementA; statementB;.
86

86

00:04:54.950  -->  00:04:57.510
They're grouped into methods or functions.
87

87

00:04:57.510  -->  00:05:00.650
We use the word method and
the word function interchangeably.
88

88

00:05:00.650  -->  00:05:06.030
For all intents and purposes, they
are the same thing for what we're doing.
89

89

00:05:06.030  -->  00:05:09.050
And our methods are grouped into a class.
90

90

00:05:09.050  -->  00:05:12.740
We can see back in our script here
the class right up at the very top public
91

91

00:05:12.740  -->  00:05:15.410
class our class is NumberWizard.
92

92

00:05:15.410  -->  00:05:19.270
That means at this level, everything
within here is part of the class.
93

93

00:05:19.270  -->  00:05:22.195
It's probably cleaner if I draw it over
here isn't it where we can see it along
94

94

00:05:22.195  -->  00:05:23.080
our line.
95

95

00:05:23.080  -->  00:05:24.660
This is all part of the class.
96

96

00:05:24.660  -->  00:05:30.665
If something was declared in our class,
it could then be used in all the methods.
97

97

00:05:30.665  -->  00:05:33.020
In our final grouping, our classes, oops,
98

98

00:05:33.020  -->  00:05:36.410
wrong way,
our classes are grouped into namespaces.
99

99

00:05:36.410  -->  00:05:38.330
Now, at the top here we can see using.
100

100

00:05:38.330  -->  00:05:40.710
When we see using,
that's using a particular namespace,
101

101

00:05:40.710  -->  00:05:42.670
our namespace is UnityEngine.
102

102

00:05:42.670  -->  00:05:46.480
And that's another way of grouping
all of our content in here
103

103

00:05:46.480  -->  00:05:47.700
into a particular namespace.
104

104

00:05:47.700  -->  00:05:50.010
We'll be talking about
namespaces more in later videos.
105

105

00:05:50.010  -->  00:05:53.708
For now we're focusing on this level
of class, method and statement.
106

106

00:05:53.708  -->  00:05:57.653
Let's build upon this and understand
about our scope issue at the moment.
107

107

00:05:57.653  -->  00:06:01.167
We have our class, NumberWizard,
within our cross we have Start,
108

108

00:06:01.167  -->  00:06:03.274
our Start method and our Update method.
109

109

00:06:03.274  -->  00:06:07.323
If we declare a variable within start,
say we're declaring variableA and
110

110

00:06:07.323  -->  00:06:08.745
variableB within Start.
111

111

00:06:08.745  -->  00:06:11.830
Then those variables are not
accessible within Update.
112

112

00:06:11.830  -->  00:06:16.370
If we declare our variableC within Update,
it's not accessible within Start.
113

113

00:06:16.370  -->  00:06:21.550
If we declare a variableD in our class, so
not within Start, not within Update, but
114

114

00:06:21.550  -->  00:06:26.820
within our class level, then it can be
accessible in both Start and in Update.
115

115

00:06:26.820  -->  00:06:32.150
And any of the other methods
that we have within our class.
116

116

00:06:32.150  -->  00:06:35.730
And this variable declared at the class
level is called an instance variable.
117

117

00:06:35.730  -->  00:06:39.750
Because it's available to this entire
instance, or this entire class.
118

118

00:06:39.750  -->  00:06:43.070
And you might say to yourself, well why
not just put all the variables up there?
119

119

00:06:43.070  -->  00:06:44.690
That seems to be better.
120

120

00:06:44.690  -->  00:06:49.090
There's a great reason, which has to
do with the organization of our code.
121

121

00:06:49.090  -->  00:06:52.660
And to keep our code as
compartmentalized as possible.
122

122

00:06:52.660  -->  00:06:57.870
If we allow ourselves to access anything,
at any time, anywhere, then it opens
123

123

00:06:57.870  -->  00:07:02.570
our whole code up to accidental mistakes
and things that we just don't plan on.
124

124

00:07:02.570  -->  00:07:04.740
And mostly it makes it difficult to debug.
125

125

00:07:04.740  -->  00:07:07.110
If something's not going right,
we can look in at Start and
126

126

00:07:07.110  -->  00:07:11.644
say I know that the only place that these
variables are being used to change,
127

127

00:07:11.644  -->  00:07:14.340
manipulate, or modify is within Start.
128

128

00:07:14.340  -->  00:07:16.130
As soon as we move it up a level,
129

129

00:07:16.130  -->  00:07:19.210
then we have to look in more
places to find what's going on.
130

130

00:07:19.210  -->  00:07:21.350
So it's a way to keep things grouped,
and organized, and
131

131

00:07:21.350  -->  00:07:25.660
tidy and to protect ourselves from some
accidents that might happen in our code.
132

132

00:07:25.660  -->  00:07:27.442
Let's jump back over into our script here.
133

133

00:07:27.442  -->  00:07:29.630
Zoom in a little bit more, so
we can see what's going on.
134

134

00:07:30.720  -->  00:07:35.390
Back to our problem, we have min
that's being used in Update, but
135

135

00:07:35.390  -->  00:07:37.590
declared in Start, which is not possible.
136

136

00:07:37.590  -->  00:07:41.800
All we need to do is grab these 3
variables that we're declaring in Start,
137

137

00:07:41.800  -->  00:07:46.750
cut them, Ctrl+X, up to the top of
our script, underneath class, but
138

138

00:07:46.750  -->  00:07:49.012
above where we've got our Start method.
139

139

00:07:49.012  -->  00:07:53.310
Give myself a couple of lines in here,
and paste those variables in.
140

140

00:07:53.310  -->  00:07:57.800
So we've got int max, int min, and
int guess all being declared and
141

141

00:07:57.800  -->  00:08:01.340
initialized, cuz we've given them a value,
at the class level.
142

142

00:08:01.340  -->  00:08:05.150
So these now can be used in any
of our methods within the class.
143

143

00:08:05.150  -->  00:08:07.700
Tidy up our Start method here.
144

144

00:08:07.700  -->  00:08:08.200
Back down,
145

145

00:08:08.200  -->  00:08:11.598
you can see that the red squiggley lines
have gone away, which is excellent.
146

146

00:08:11.598  -->  00:08:14.650
And as a last step,
let's just print out our guess.
147

147

00:08:14.650  -->  00:08:23.678
So Debug.Log{guess}; if
we hit save on that.
148

148

00:08:23.678  -->  00:08:26.500
Back over into Unity, click on play.
149

149

00:08:27.580  -->  00:08:32.150
We can see it prints 2 things,
up arrow key was pressed and 500.
150

150

00:08:32.150  -->  00:08:35.290
Excellent, if we keep pushing it,
see the numbers going up over here.
151

151

00:08:35.290  -->  00:08:37.030
It keeps guessing 500 over and
over and over.
152

152

00:08:37.030  -->  00:08:43.010
I've got a really simple challenge for you
just to complete one other step of this.
153

153

00:08:43.010  -->  00:08:47.360
And you've probably guessed it
already is to if the number is lower,
154

154

00:08:47.360  -->  00:08:49.190
assign max = guess.
155

155

00:08:49.190  -->  00:08:52.580
And print out of the console our
new guess if the number is lower.
156

156

00:08:52.580  -->  00:08:54.640
So, pause the video now,
pretty simple step.
157

157

00:08:54.640  -->  00:08:56.840
Just replicate what we've done in min,
do that for max.
158

158

00:08:56.840  -->  00:08:57.959
And I'll see you back here in a moment.
159

159

00:09:00.572  -->  00:09:04.707
Right, so pretty straightforward,
we will say max = guess,
160

160

00:09:04.707  -->  00:09:09.430
in the instance that the player
said the down arrow was pushed.
161

161

00:09:09.430  -->  00:09:18.340
And we'll just again, log out Debug.Log,
guess to make sure that this is working.
162

162

00:09:18.340  -->  00:09:20.970
Back over to Unity, click on play.
163

163

00:09:20.970  -->  00:09:26.170
And if we click on the down arrow then
it says 500 as well, up arrow 500.
164

164

00:09:26.170  -->  00:09:28.690
Okay, so really not anything
of a game at the moment.
165

165

00:09:28.690  -->  00:09:32.570
But we've created the foundation in
terms of having our guess variable.
166

166

00:09:32.570  -->  00:09:36.120
We've talked about scope, understanding
now that we need to be declaring
167

167

00:09:36.120  -->  00:09:41.260
our variables at this class level if we
wish to use them in Start and in Update.
168

168

00:09:41.260  -->  00:09:44.620
And in our next video we'll get more
detailed in terms of properly calculating
169

169

00:09:44.620  -->  00:09:45.770
what the guess is.
170

170

00:09:45.770  -->  00:09:48.770
So that we get more of a game
in our game flow here.
171

171

00:09:48.770  -->  00:09:49.910
Okay, see you in the next video
