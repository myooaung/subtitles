WEBVTT
0
1
00:00:04.610 --> 00:00:09.740
In this video we're going to have our play a moving left and right based upon keyboard input.
1

2
00:00:09.870 --> 00:00:14.670
And although it doesn't look very spiffy yet it's the foundation it's the starting point for our character
2

3
00:00:14.670 --> 00:00:17.480
doing awesome things in our game.
3

4
00:00:17.490 --> 00:00:18.690
Let's have a look at what we need to do.
4

5
00:00:18.690 --> 00:00:21.630
Here we first of all need a way for our player to be moving left or right.
5

6
00:00:21.630 --> 00:00:26.940
That requires us to add a script and to put some movement information within that script and from an
6

7
00:00:27.030 --> 00:00:28.460
architecture point of view.
7

8
00:00:28.500 --> 00:00:34.340
Are we looking to have just one class that is Player class that does everything to do with the player.
8

9
00:00:34.350 --> 00:00:40.200
Or should we have a player movement CLASS AT PLAY A Death Class A play a level of class so that we have
9

10
00:00:40.200 --> 00:00:42.750
them separated out at this point we don't know.
10

11
00:00:42.750 --> 00:00:48.120
So if you're working on your game and you're in the early stages it's in a way safer to have it just
11

12
00:00:48.180 --> 00:00:54.090
as player and not to get sidetracked or go down the rabbit hole of trying to figure everything out now
12

13
00:00:54.360 --> 00:00:59.370
so that when we do get to the point of our play a class gets too large or too too difficult to work
13

14
00:00:59.370 --> 00:00:59.520
in.
14

15
00:00:59.520 --> 00:01:04.590
Then we can split it out into more manageable classes and individual scripts.
15

16
00:01:04.590 --> 00:01:11.430
So I'll jump over to add component and I will type in here player and a new script and create an add
16

17
00:01:11.430 --> 00:01:17.370
that and I'd like to anchor something really tightly here just in case it hasn't been anchored for you.
17

18
00:01:17.370 --> 00:01:21.480
This is a real beginner key point that I'll point out here but really it's to be clear that when we
18

19
00:01:21.480 --> 00:01:26.800
create the player script you can see over here it creates the Player class.
19

20
00:01:26.820 --> 00:01:31.290
So when we talk about adding a script and adding in class we often do that interchangeably because it's
20

21
00:01:31.290 --> 00:01:32.040
doing the same thing.
21

22
00:01:32.040 --> 00:01:37.110
New script means new class but we need to be paying attention to these classes because we'll be doing
22

23
00:01:37.110 --> 00:01:42.990
a lot of classes speaking to other classes or accessing methods from other classes throughout this section.
23

24
00:01:42.990 --> 00:01:49.030
So sort of make it super clear that we are now creating a player class and anything that is within the
24

25
00:01:49.030 --> 00:01:53.100
script will be part of this player class.
25

26
00:01:53.130 --> 00:01:57.630
If you look at this and you say yep I know how to move my player left or right I've got this in the
26

27
00:01:57.630 --> 00:02:02.610
bag then post a video now and go ahead and do that yourself and come up with a solution that you think
27

28
00:02:02.610 --> 00:02:07.510
works well even if it's not matching the solution I show you when you come back it is excellent.
28

29
00:02:07.530 --> 00:02:11.970
You've gone through that process if you want some clues let me give you some clues now for the challenge
29

30
00:02:11.970 --> 00:02:13.740
of moving your player at any point.
30

31
00:02:13.740 --> 00:02:18.480
If you think you've got it impose a video and jump in and do the challenge first thing we need to do
31

32
00:02:18.480 --> 00:02:24.170
is import the cross platform in's input asset package because Will you be using that to move our player
32

33
00:02:24.180 --> 00:02:24.820
left or right.
33

34
00:02:25.120 --> 00:02:31.200
And if you're using a different version of unity to the one I'm using in particular a later newer version
34

35
00:02:31.230 --> 00:02:36.090
then you might not find the cross platform input manager here you'll need to go to the unity asset store
35

36
00:02:36.120 --> 00:02:42.130
and download the cross platform input manager from the "Unity Standard Assets". I've given you a link against
36

37
00:02:42.130 --> 00:02:48.030
this lecture where you can go and find that and import it just as you would any other asset pack.
37

38
00:02:48.030 --> 00:02:49.860
The next step is to create a method.
38

39
00:02:49.980 --> 00:02:53.100
I'm going to call the run method which is called in update.
39

40
00:02:53.100 --> 00:02:56.760
So each frame it is calling run and knows what's going on.
40

41
00:02:56.880 --> 00:03:02.370
And within that we will be using my rigid body dot velocity to move your player.
41

42
00:03:02.460 --> 00:03:07.210
So we're moving the rigid body of the player.
42

43
00:03:07.280 --> 00:03:12.800
We also need to serialize a run speed variable so that we have control over the player speed.
43

44
00:03:12.830 --> 00:03:15.500
If you look at this and say this is so simple then.
44

45
00:03:15.620 --> 00:03:16.820
Excellent good work.
45

46
00:03:16.820 --> 00:03:19.130
Jump in and do that now if you look and say I've got no idea.
46

47
00:03:19.310 --> 00:03:20.360
Excellent as well.
47

48
00:03:20.360 --> 00:03:24.770
Jump in and give it your best shot and I'll see you back here when you've given it your best shot.
48

49
00:03:26.570 --> 00:03:26.950
Right.
49

50
00:03:26.960 --> 00:03:33.400
So first thing for me to do here is jump over to assets import package cross platform import.
50

51
00:03:33.440 --> 00:03:38.270
This will take a moment to import and pause the video now now be back in a second after it is imported
51

52
00:03:38.270 --> 00:03:39.260
all of this.
52

53
00:03:39.470 --> 00:03:39.710
Okay.
53

54
00:03:39.710 --> 00:03:40.520
Mission accomplished.
54

55
00:03:40.520 --> 00:03:45.140
I'm going to go to standard assets that's been brought in and I'm going to grab my 2D extras master
55

56
00:03:45.170 --> 00:03:49.130
and just drop that in a standard assets as well to tidied up a little bit to get it out of the way.
56

57
00:03:49.130 --> 00:03:51.280
I think it's pretty much a standard asset.
57

58
00:03:51.290 --> 00:03:55.050
I'm also going to create a folder for my scripts.
58

59
00:03:55.130 --> 00:03:59.420
Let's call these groups to keep everything nice and tidy that'll get pretty full by the end of this
59

60
00:03:59.420 --> 00:04:00.230
project.
60

61
00:04:00.270 --> 00:04:04.010
So exciting now that we have access to our cross platform input.
61

62
00:04:04.010 --> 00:04:06.050
Let's go and have a look at what's going on there.
62

63
00:04:06.050 --> 00:04:11.160
Jump up to edit projects settings input and we can see our axes.
63

64
00:04:11.170 --> 00:04:13.980
We need to pay attention that we want to move along the horizontal.
64

65
00:04:13.990 --> 00:04:15.580
So the name of horizontal is horizontal.
65

66
00:04:15.580 --> 00:04:16.380
Good for us Dan Oakes.
66

67
00:04:16.390 --> 00:04:22.060
We have to put that in as a string and then when it comes to moving that we've got the A button in the
67

68
00:04:22.060 --> 00:04:22.930
D button.
68

69
00:04:22.930 --> 00:04:25.180
And I believe also the left and the right.
69

70
00:04:25.210 --> 00:04:29.650
And if you remember from our going to salt we have a sensitivity setting that says how quickly we reached
70

71
00:04:29.650 --> 00:04:35.440
the maximum left or maximum right settings on this on the horizontal so maximum negative one all the
71

72
00:04:35.440 --> 00:04:39.900
way up to maximum positive one if the sensitivity is low it will take longer if it's very high it'll
72

73
00:04:39.910 --> 00:04:40.990
be a lot quicker.
73

74
00:04:40.990 --> 00:04:45.460
So it's good for us to remember in terms of the speed that our character moves is in a tuning we can
74

75
00:04:45.460 --> 00:04:48.470
do in there to say how responsive our character is going to feel.
75

76
00:04:48.790 --> 00:04:56.110
Okay back over to our script now that we've had a look at that we need to start off by using the
76

77
00:04:56.140 --> 00:05:01.730
UnityStandardAssets.CrossPlatformInput.
77

78
00:05:01.790 --> 00:05:09.090
Next we need to add our run methods so void run tab and you can see it's auto filled in private here.
78

79
00:05:09.110 --> 00:05:15.800
That's because if you go Tools Options and tools for unity you'll see that appear unity message scope
79

80
00:05:16.070 --> 00:05:16.940
is private.
80

81
00:05:16.970 --> 00:05:21.010
So whenever we type this method and it auto completes it adds private in there.
81

82
00:05:21.290 --> 00:05:27.290
If I wanted to remove that I would put default and if I just type void then I would reset and there
82

83
00:05:27.290 --> 00:05:28.360
should be run.
83

84
00:05:28.520 --> 00:05:33.310
Then it would add it wouldn't add the private in there if I change it to public.
84

85
00:05:33.320 --> 00:05:34.520
Then it would put in public.
85

86
00:05:34.550 --> 00:05:38.760
Let me just changes to run and because it supposed to be run not reset.
86

87
00:05:38.780 --> 00:05:40.310
OK good.
87

88
00:05:40.340 --> 00:05:46.280
And so I'm gonna leave this in here and make a habit in this section of the course to always say whether
88

89
00:05:46.280 --> 00:05:50.170
it is private or public for our methods because we'll be doing a lot of that.
89

90
00:05:50.240 --> 00:05:55.220
Public private can we use it from this class or another class and how do we access other classes throughout
90

91
00:05:55.220 --> 00:05:59.070
this section so to make that really explicit by leaving private in that case.
91

92
00:05:59.080 --> 00:06:00.590
Next what do we need to do.
92

93
00:06:00.680 --> 00:06:06.920
What we need to get the access the horizontal axis from the cross platform input manager and create
93

94
00:06:07.100 --> 00:06:13.580
some way to store that so we'll create a float which will call control through very similar to argon
94

95
00:06:13.630 --> 00:06:17.930
assault control throw the throw means throwing from left or right.
95

96
00:06:17.930 --> 00:06:24.800
In this instance and it will be cross platform input manager dot get access and what is the axis the
96

97
00:06:24.800 --> 00:06:30.410
axis is horizontal are horizontal horizontal.
97

98
00:06:30.440 --> 00:06:35.330
And this value is going to be I'll just make a quick note in here it's going to be from minus one to
98

99
00:06:35.480 --> 00:06:36.820
plus one.
99

100
00:06:36.890 --> 00:06:41.750
Sorry the value is between is between minus 1 and plus 1.
100

101
00:06:41.750 --> 00:06:45.170
Just so that we're really clear on that when we're doing other calculations.
101

102
00:06:45.170 --> 00:06:50.120
Next we need to create a vector to add in the section it's going to be all about vector 2s if you're
102

103
00:06:50.120 --> 00:06:54.800
in the habit of typing vector 3 My take like me you might take a few moments to just get your brain
103

104
00:06:54.800 --> 00:07:00.650
into vector 2s and we'll call this player velocity player velocity is the player moving around what
104

105
00:07:00.680 --> 00:07:07.910
will this be well we'll create a new vector 2 and then what are we looking for in here let's have a
105

106
00:07:07.910 --> 00:07:15.050
look at the parameters float x and float y so the float x we will say for now is just the control throw
106

107
00:07:15.220 --> 00:07:20.330
so this is what we've been grabbing up in here this is gonna be from minus one to plus one.
107

108
00:07:20.420 --> 00:07:24.320
So we're gonna need to put a modifier on that because that's probably not going to be fast enough but
108

109
00:07:24.320 --> 00:07:29.960
for now we'll leave it at that and then on the y axis while the y axis we don't want to change we just
109

110
00:07:29.960 --> 00:07:36.110
want to say keep the y axis doing whatever the y axis is doing and not reset it to zero if we put in
110

111
00:07:36.110 --> 00:07:39.220
zero then it's going to have to play a stop on the on the y axis.
111

112
00:07:39.220 --> 00:07:45.340
So for here we need to go and get what is going on with the players rigid body so we'll jump up this
112

113
00:07:45.470 --> 00:07:58.100
top here and make a reference to this we will say my rigid sorry it was a rigid body rigid body 2D is
113

114
00:07:58.160 --> 00:08:09.980
my rigid body and then in start we will get that will say my rigid body equals get component and what
114

115
00:08:09.980 --> 00:08:20.590
type is this it's a rigid body to day so if cashed it and we have got it and we have forgotten how parentheses.
115

116
00:08:20.620 --> 00:08:26.650
So now back in our run method under the X we have control through throw and Y will be my rigid body
116

117
00:08:26.890 --> 00:08:30.690
dot velocity dot y.
117

118
00:08:30.700 --> 00:08:36.470
So basically saying whatever your current velocity is then that is your kind of velocity and then as
118

119
00:08:36.470 --> 00:08:42.420
a final point we'll say my rigid body dot velocity equals.
119

120
00:08:43.070 --> 00:08:48.200
So the overall speed of the player the arrow velocity of the player the player's rigid body is going
120

121
00:08:48.200 --> 00:08:52.430
to be this player velocity that we've just defined above.
121

122
00:08:52.430 --> 00:08:55.210
Player velocity okay.
122

123
00:08:55.250 --> 00:08:57.720
So this is us saying get the axis.
123

124
00:08:57.750 --> 00:09:00.030
It's on the horizontal axis.
124

125
00:09:00.180 --> 00:09:06.290
Create a vector to which is player velocity and that will be our X and our y control throw.
125

126
00:09:06.300 --> 00:09:13.190
And the current y velocity and then the velocity of the rigid body is the player velocity.
126

127
00:09:13.200 --> 00:09:16.550
We could combine these two lines and have them all together.
127

128
00:09:16.560 --> 00:09:20.270
As you know but we've split them out just to make it as readable as possible.
128

129
00:09:20.280 --> 00:09:24.870
Again this will be an ongoing conversation in this section when you keep them together when you split
129

130
00:09:24.870 --> 00:09:25.310
them out.
130

131
00:09:25.320 --> 00:09:30.600
When you have two lines when you have three lines we'll show you a way that is favoring readability.
131

132
00:09:30.600 --> 00:09:31.940
That's usually the mantra.
132

133
00:09:31.950 --> 00:09:35.700
If it's more readable then it's gonna be better when we come back to try to figure out what's going
133

134
00:09:35.700 --> 00:09:36.120
on here.
134

135
00:09:36.360 --> 00:09:40.540
So that's why we've got these three lines here but we could do it as well in two lines.
135

136
00:09:40.950 --> 00:09:44.070
Let's save that and have a look at what we've got in here.
136

137
00:09:44.070 --> 00:09:45.620
We'll jump back into our scene.
137

138
00:09:45.750 --> 00:09:54.510
Click on play see if we've got any errors open up our console and if we hit left and right nothing happening
138

139
00:09:54.510 --> 00:09:55.110
here.
139

140
00:09:55.110 --> 00:10:03.260
Let's go and figure out why that's the case because in update we're yet to say run so run needs to be
140

141
00:10:03.260 --> 00:10:06.700
called so each frame we are running left.
141

142
00:10:06.700 --> 00:10:11.170
Slide slide slide writes line slide slides says a couple of things in here we do have it moving.
142

143
00:10:11.170 --> 00:10:12.150
That's really cool.
143

144
00:10:12.160 --> 00:10:14.570
Couple of things are going wrong is going way too slow.
144

145
00:10:14.590 --> 00:10:22.450
So as I said two in the challenge let's go and create ourselves a serialized field up here a variable
145

146
00:10:22.770 --> 00:10:26.270
serialized field the variable will be and float.
146

147
00:10:26.320 --> 00:10:31.250
We'll call this run speed and we'll initialize that and we'll say 5.
147

148
00:10:31.330 --> 00:10:35.440
Not sure what it should be we'll start off with five run speed and then we come back down in here into
148

149
00:10:35.440 --> 00:10:41.650
the plane's velocity on this x axis instead of it just being control 3 which is minus one to plus 1.
149

150
00:10:41.740 --> 00:10:46.120
Let's multiply that by our run speed.
150

151
00:10:46.120 --> 00:10:51.960
So it's now gonna be from minus five to plus five back into the game.
151

152
00:10:52.090 --> 00:10:53.190
Click on play
152

153
00:10:55.810 --> 00:10:56.430
go play
153

154
00:10:59.390 --> 00:11:04.430
and it's a bit faster which is cool and we can see that on our player we have the ability to increase
154

155
00:11:04.430 --> 00:11:05.600
that if we make it 10.
155

156
00:11:05.600 --> 00:11:07.220
How fast is the play go.
156

157
00:11:07.280 --> 00:11:11.930
Zing zing conical blip and drops down with a little bit of the gravity there.
157

158
00:11:11.930 --> 00:11:18.410
The other thing that I'm going to do here is jump back over into edit project settings input and change
158

159
00:11:18.410 --> 00:11:19.490
the sensitivity.
159

160
00:11:19.510 --> 00:11:23.820
Let's change these to ten and see what impact that has on our players speed.
160

161
00:11:24.110 --> 00:11:27.290
So basically it should be quicker ramp up time.
161

162
00:11:27.290 --> 00:11:29.490
I'm gonna make that even higher I'm gonna make it 20.
162

163
00:11:29.510 --> 00:11:30.920
I'd like to have it really responsive.
163

164
00:11:30.920 --> 00:11:35.570
So it's basically it's immediately saying I'm moving I'm not moving we'll see what happens if we put
164

165
00:11:35.570 --> 00:11:40.350
it to 50 boink boink I guess that should be pretty immediate.
165

166
00:11:40.350 --> 00:11:42.260
So that's our plan moving left and right.
166

167
00:11:42.260 --> 00:11:45.970
The animation doesn't change yet and the character's not flipping so we have some things to do.
167

168
00:11:46.080 --> 00:11:47.650
Coming to make it look correct.
168

169
00:11:47.660 --> 00:11:50.240
But for now we've got some moving great work.
169

170
00:11:50.240 --> 00:11:51.410
I'll see you in the next video.
