WEBVTT
1
1

00:00:00.000  -->  00:00:04.465
[MUSIC]
2

2

00:00:04.465  -->  00:00:07.798
In this video, we're gonna have our
character move to the right when we push
3

3

00:00:07.798  -->  00:00:10.730
to the right and flip on its x-axis
when we're moving to the left.
4

4

00:00:10.730  -->  00:00:13.350
So he looks like he's facing
in the right direction and
5

5

00:00:13.350  -->  00:00:16.720
not just doing the moonwalk all
the time and walking backwards.
6

6

00:00:16.720  -->  00:00:18.110
Okay, let's jump in and get started.
7

7

00:00:19.620  -->  00:00:23.050
Now to flip our sprite, we need to do a
similar thing to that which we do with our
8

8

00:00:23.050  -->  00:00:27.640
tiles, which is to change our scale
on the x-axis from minus one to
9

9

00:00:27.640  -->  00:00:30.330
to look left to plus one to look right.
10

10

00:00:30.330  -->  00:00:31.229
We need to do that in code.
11

11

00:00:31.229  -->  00:00:35.738
So let's go over to the player script and
12

12

00:00:35.738  -->  00:00:42.520
add a new method in here and
call it private void FlipSprite.
13

13

00:00:42.520  -->  00:00:45.634
And just write out a couple of notes
in here in terms of what we need to do.
14

14

00:00:45.634  -->  00:00:52.676
So if the player is moving horizontally,
we don't care so much about vertically.
15

15

00:00:52.676  -->  00:00:56.250
It's just if they're moving horizontally,
then we want to flip them left or right.
16

16

00:00:56.250  -->  00:00:57.340
Then, what do we do?
17

17

00:00:57.340  -->  00:01:04.200
We need to reverse the current
scaling of the x-axis.
18

18

00:01:05.490  -->  00:01:08.220
Okay, so
there's our mapping that out for that.
19

19

00:01:08.220  -->  00:01:11.970
Now I wanna show you a couple of
concepts here that we use in this code,
20

20

00:01:11.970  -->  00:01:13.980
some of them you'll have seen before.
21

21

00:01:13.980  -->  00:01:14.638
Just two of them here.
22

22

00:01:14.638  -->  00:01:17.205
Actually I'm saying some if there's 1,000.
23

23

00:01:17.205  -->  00:01:18.077
There's just two.
24

24

00:01:18.077  -->  00:01:21.850
So Mathf.Abs, as in absolute,
gives us the absolute value.
25

25

00:01:21.850  -->  00:01:23.724
So returns the absolute value of f.
26

26

00:01:23.724  -->  00:01:27.680
So if f is minus 37,
then it will return plus 37, or
27

27

00:01:27.680  -->  00:01:30.622
the absolute value, just return 37.
28

28

00:01:30.622  -->  00:01:36.795
All right, that's the first concept,
and the second concept is Mathf.Sign,
29

29

00:01:36.795  -->  00:01:41.692
which returns a value of 1,
as in positive 1, if the f values of
30

30

00:01:41.692  -->  00:01:46.454
the float value is positive or
0 and minus 1 if f is negative.
31

31

00:01:46.454  -->  00:01:49.784
So if our float is positive,
it will return.
32

32

00:01:49.784  -->  00:01:52.750
If our float is negative, it returns -1.
33

33

00:01:52.750  -->  00:01:58.445
So this helps us when we need to give
a scale value of minus 1 to plus 1,
34

34

00:01:58.445  -->  00:02:04.070
then we can be using this sign to
return either plus 1 or minus 1.
35

35

00:02:04.070  -->  00:02:05.550
Okay, so
let's jump back to our code now and
36

36

00:02:05.550  -->  00:02:07.180
have a look at what we need to do in here.
37

37

00:02:07.180  -->  00:02:10.050
Now we know we can get the velocity
of the player by looking at
38

38

00:02:10.050  -->  00:02:12.210
the myRigidBody.velocity.
39

39

00:02:12.210  -->  00:02:14.930
And we can look at the .x
instead of the .y.
40

40

00:02:14.930  -->  00:02:18.370
Over here, we can look at .x
in terms of the velocity.
41

41

00:02:18.370  -->  00:02:21.150
And generally, because we're doing a flip,
we're toggling from one to
42

42

00:02:21.150  -->  00:02:25.840
the other backwards and forwards,
it is a great spot for us to use a bool.
43

43

00:02:25.840  -->  00:02:28.650
So what I'm gonna create here is a bool.
44

44

00:02:28.650  -->  00:02:34.901
And we'll call this
playerHasHorizontalSpeed,
45

45

00:02:34.901  -->  00:02:39.150
we'll call it HorizontalSpeed.
46

46

00:02:39.150  -->  00:02:41.414
And we'll define this as to do it there,
47

47

00:02:41.414  -->  00:02:46.423
it's gonna be the myRidgidBody.velocity.x,
but we want the absolute value of that.
48

48

00:02:46.423  -->  00:02:48.350
So we use our Mathf.Abs, and then within
that we'll say, myRigidBody.velocity.x.
49

49

00:02:48.350  -->  00:02:53.789
And if that is greater than 0,
50

50

00:02:53.789  -->  00:02:57.345
or we don't use 0,
51

51

00:02:57.345  -->  00:03:01.740
we use Mathf.Epsilon,
52

52

00:03:01.740  -->  00:03:07.450
then our bool will be true.
53

53

00:03:07.450  -->  00:03:12.370
So that is when the absolute value
of the movement is greater than 0 or
54

54

00:03:12.370  -->  00:03:17.270
greater than Mathf.Epsilon,
our bool will return as true, excellent.
55

55

00:03:17.270  -->  00:03:19.910
So then, next step is to create out if.
56

56

00:03:19.910  -->  00:03:23.450
So if the player has horizontal speed.
57

57

00:03:23.450  -->  00:03:27.252
So if this is true, if the bool is true,
that is we are moving,
58

58

00:03:27.252  -->  00:03:30.412
we're greater than 0,
then what do we want to do?
59

59

00:03:30.412  -->  00:03:33.931
Well, this is where I'm gonna give you a
little bit of a challenge to complete this
60

60

00:03:33.931  -->  00:03:34.551
line of code.
61

61

00:03:34.551  -->  00:03:36.670
We're gonna use a couple
of things in there.
62

62

00:03:36.670  -->  00:03:38.830
I'll give you some details and
hints on that.
63

63

00:03:38.830  -->  00:03:40.870
So flip the horizontal
scaling of your sprite so
64

64

00:03:40.870  -->  00:03:43.477
that it changes direction when
a player changes direction.
65

65

00:03:43.477  -->  00:03:45.932
There's just one line of
code to put in there.
66

66

00:03:45.932  -->  00:03:47.600
And I'll give you a couple of hints,
if you would like them.
67

67

00:03:47.600  -->  00:03:51.200
Hint number one is use
transform.localScale,
68

68

00:03:51.200  -->  00:03:56.043
that's how we can access our scale
on our sprite, on our player.
69

69

00:03:56.043  -->  00:04:01.078
And the second hint is to use
Mathf.Sign to feed in the plus 1 or
70

70

00:04:01.078  -->  00:04:03.260
the minus 1 into that.
71

71

00:04:03.260  -->  00:04:04.480
So have a go at that.
72

72

00:04:04.480  -->  00:04:09.190
See how you go and see if you can flip
the sprite on the horizontal axis.
73

73

00:04:12.070  -->  00:04:12.964
Okay, welcome back.
74

74

00:04:12.964  -->  00:04:17.105
We're gonna start with
transform.localScale.
75

75

00:04:18.160  -->  00:04:18.670
And what do we need this to be?
76

76

00:04:18.670  -->  00:04:23.201
Well, we need to define a new Vector2, and
77

77

00:04:23.201  -->  00:04:26.660
this is going to be Mathf.sign.
78

78

00:04:26.660  -->  00:04:29.649
Cuz I wanna return the sign plus 1 or
minus 1 of what?
79

79

00:04:29.649  -->  00:04:34.417
It's gonna be of
the myRigidBody.velocity.x.
80

80

00:04:34.417  -->  00:04:37.680
So it's gonna be the sign
either moving to the right,
81

81

00:04:37.680  -->  00:04:42.251
which is a positive velocity, or
moving to the left, negative velocity,
82

82

00:04:42.251  -->  00:04:46.695
is gonna produce that sign, which
returns a value of plus 1 or minus 1.
83

83

00:04:46.695  -->  00:04:50.534
And given that we're looking for
a Vector2 in here,
84

84

00:04:50.534  -->  00:04:54.300
the Vector2 takes in the x and
then it takes in the y.
85

85

00:04:54.300  -->  00:04:56.914
And the y here, we're just gonna say is 1.
86

86

00:04:56.914  -->  00:05:00.020
So w ekeep the y as it is
in terms of the scaling.
87

87

00:05:00.020  -->  00:05:03.236
We don't need to change
the scaling of the y-axis,
88

88

00:05:03.236  -->  00:05:05.508
we don't need to flip it up and down.
89

89

00:05:05.508  -->  00:05:08.280
So that entire method
is flipping the sprite.
90

90

00:05:08.280  -->  00:05:12.260
If we're moving, then this ball is true,
and what happens if it's true?
91

91

00:05:12.260  -->  00:05:17.039
Then, we say that our Vector2
becomes plus 1 or minus 1,
92

92

00:05:17.039  -->  00:05:22.600
depending upon the sign of the movement
and the y stays as 1f, okay?
93

93

00:05:22.600  -->  00:05:26.600
The last thing we need to do is
a place to call this method.
94

94

00:05:26.600  -->  00:05:30.410
So we'll go into Update,
we'll say FlipSprite in here,
95

95

00:05:30.410  -->  00:05:32.150
so we'll be running this on every frame.
96

96

00:05:32.150  -->  00:05:34.760
Go back into our scene in here.
97

97

00:05:34.760  -->  00:05:37.270
Hit Play, and
we'll see what behavior we get.
98

98

00:05:37.270  -->  00:05:40.820
Left and right, left and right,
excellent, left and right.
99

99

00:05:40.820  -->  00:05:43.700
Okay, so you now have your character
flipping from left to right.
100

100

00:05:43.700  -->  00:05:45.100
Well done.
I'll see you in the next video.
