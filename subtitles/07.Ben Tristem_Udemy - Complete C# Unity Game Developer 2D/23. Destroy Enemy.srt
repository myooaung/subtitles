1
1

00:00:00,012  -->  00:00:04,844
[SOUND]
In this video
2

2

00:00:04,844  -->  00:00:09,311
we're gonna be shooting and destroying
our enemies when they get below 0 health.
3

3

00:00:09,311  -->  00:00:11,197
So let's jump in and get started.
4

4

00:00:11,197  -->  00:00:12,666
Okay, let's kill Roger.
5

5

00:00:12,666  -->  00:00:15,885
Sorry about that, Roger, but
it's time for you to perish.
6

6

00:00:15,885  -->  00:00:18,980
First of all, you know what
I'm gonna do in this lecture?
7

7

00:00:18,980  -->  00:00:22,128
I think I'll highlight the general
area we need to focus on,
8

8

00:00:22,128  -->  00:00:23,807
which is within our Enemy.cs.
9

9

00:00:23,807  -->  00:00:27,648
And we're looking at health, and something
needs to happen if the health hits 0.
10

10

00:00:27,648  -->  00:00:31,128
And that something that needs to
happen is you taking on a challenge.
11

11

00:00:31,128  -->  00:00:33,222
[LAUGH] Yeah, see what I did there,
yeah, very clever.
12

12

00:00:33,222  -->  00:00:36,042
Okay, so destroy the enemy.
13

13

00:00:36,042  -->  00:00:39,253
So if the enemy's health drops below 0,
destroy the enemy.
14

14

00:00:39,253  -->  00:00:40,830
It should be reasonably straightforward,
15

15

00:00:40,830  -->  00:00:42,583
we've done this sort of
thing a couple of times.
16

16

00:00:42,583  -->  00:00:45,047
So jump in, take on that challenge.
17

17

00:00:45,047  -->  00:00:46,727
However, do it in the way that works,
18

18

00:00:46,727  -->  00:00:49,100
then we can clean it up
a little bit later on together.
19

19

00:00:49,100  -->  00:00:51,725
We can look to see how we can
optimize it and refactor it.
20

20

00:00:51,725  -->  00:00:55,583
But for now, just destroy the enemy
when its health gets to 0.
21

21

00:00:58,220  -->  00:01:03,723
Okay, so pretty simple in our
OnTriggerEnter method here.
22

22

00:01:03,723  -->  00:01:11,172
What I'll do is say, if (health &lt;= 0).
23

23

00:01:11,172  -->  00:01:12,793
I'm gonna say less than 0,
24

24

00:01:12,793  -->  00:01:16,723
just in case you hit it with a big
hit that takes it to negative 200.
25

25

00:01:16,723  -->  00:01:19,801
And we wanna say less than and
equal to, just in case you,
26

26

00:01:19,801  -->  00:01:23,540
it starts off with 100 and
you do 100 damage, and it gets to 0.
27

27

00:01:23,540  -->  00:01:27,727
You don't want to say just less than 0,
cuz then it'll be sitting there,
28

28

00:01:27,727  -->  00:01:31,655
sitting on 0 health, which if
you've reach 0, you should be gone.
29

29

00:01:31,655  -->  00:01:34,035
So you'd say, less than or equal to 0 and
30

30

00:01:34,035  -->  00:01:37,103
then we'll add our code
block with our curly braces.
31

31

00:01:37,103  -->  00:01:43,554
And here we'll say,
Destroy(gameObject), straightforward?
32

32

00:01:45,488  -->  00:01:48,251
Semi-colon, save that up, see how we go.
33

33

00:01:48,251  -->  00:01:51,886
Jump back over into our scene,
how much health has Roger got, 500,
34

34

00:01:51,886  -->  00:01:53,293
it should be a quick burst.
35

35

00:01:53,293  -->  00:01:56,034
We should see him disappear,
so click on Play.
36

36

00:01:58,707  -->  00:02:02,249
Make sure we're not getting any errors,
cool burst, burst, burst, he's gone.
37

37

00:02:02,249  -->  00:02:06,231
And these other new Rogers that are coming
into the scene are also getting gone as
38

38

00:02:06,231  -->  00:02:07,251
well, excelente.
39

39

00:02:07,251  -->  00:02:12,245
So we've created a pretty straightforward,
just having our enemy be destroyed.
40

40

00:02:12,245  -->  00:02:15,199
In the future we'll be adding some
particle effects and some sound effects.
41

41

00:02:15,199  -->  00:02:17,522
So we'll make it a lot more of a moment.
42

42

00:02:17,522  -->  00:02:21,123
Presently, it's not a moment, this is
a bit of an anticlimax, just disappears.
43

43

00:02:21,123  -->  00:02:23,912
But we'll put some work into that,
for now it's functionality.
44

44

00:02:23,912  -->  00:02:26,641
But what I wanted to do a little
bit more of was just tidy this up.
45

45

00:02:26,641  -->  00:02:29,917
You can see that our OnTriggerEnter
method is starting to get busy.
46

46

00:02:29,917  -->  00:02:32,078
We're doing the, okay, who bumped into me.
47

47

00:02:32,078  -->  00:02:34,676
And we're also doing the,
should I die or shouldn't I die?
48

48

00:02:34,676  -->  00:02:38,196
So I'd like to factor out this process of,
should I or
49

49

00:02:38,196  -->  00:02:41,180
should I not be dying,
at this point in time.
50

50

00:02:41,180  -->  00:02:44,654
So what I'm gonna do is highlight
everything from health, down to the end of
51

51

00:02:44,654  -->  00:02:48,804
our destroy code block, Right-click, Quick
Actions and refactors &gt; Extract Method.
52

52

00:02:48,804  -->  00:02:55,206
And so I'll rename this as ProcessHit,
and hit Enter, okay.
53

53

00:02:55,206  -->  00:02:57,280
And something really
cool has happened here,
54

54

00:02:57,280  -->  00:02:59,312
that Visual Studio has
helped us out a bunch.
55

55

00:02:59,312  -->  00:03:02,432
It's saying, okay, you wanna
create a new method, that's great.
56

56

00:03:02,432  -->  00:03:07,037
But I know within this new method you need
some information that was in the previous
57

57

00:03:07,037  -->  00:03:10,052
method, because you've
created a local variable.
58

58

00:03:10,052  -->  00:03:13,987
It's just local within this code block
here, within our onTriggerEnter,
59

59

00:03:13,987  -->  00:03:15,225
called damageDealer.
60

60

00:03:15,225  -->  00:03:20,825
And for you to do what you want to do down
here, you need to know about damageDealer.
61

61

00:03:20,825  -->  00:03:24,024
So therefore let's create
ourselves a signature,
62

62

00:03:24,024  -->  00:03:26,578
let's create a parameter requirement.
63

63

00:03:26,578  -->  00:03:29,294
The way we do that is in
our parentheses here,
64

64

00:03:29,294  -->  00:03:31,731
we've created ProcessHit as a method.
65

65

00:03:31,731  -->  00:03:35,570
And it's saying when
anything calls ProcessHit,
66

66

00:03:35,570  -->  00:03:38,525
we need to know, who is damageDealer?
67

67

00:03:38,525  -->  00:03:41,811
We need you to pass into us
something of type damageDealer, and
68

68

00:03:41,811  -->  00:03:44,110
we'll call it damageDealer as a variable.
69

69

00:03:44,110  -->  00:03:46,954
We could call this anything,
we could call it Bob if we wanted, or
70

70

00:03:46,954  -->  00:03:50,497
it would be a lowercase B, if we called
it Bob, but we'll call it damageDealer.
71

71

00:03:50,497  -->  00:03:54,110
Cuz then it makes a lot more sense
that we're actually referring to
72

72

00:03:54,110  -->  00:03:55,217
the damageDealer.
73

73

00:03:55,217  -->  00:03:58,078
And this damageDealer is
gonna come from above.
74

74

00:03:58,078  -->  00:03:59,255
Where we're saying okay,
75

75

00:03:59,255  -->  00:04:02,387
when something bumps into us,
let's find out who the damageDealer is.
76

76

00:04:02,387  -->  00:04:06,760
I'm gonna call ProcessHit, which is
nice and cleanly represented down here.
77

77

00:04:06,760  -->  00:04:08,805
And I know as a requirement,
78

78

00:04:08,805  -->  00:04:13,418
I absolutely have to pass into
it this damageDealer parameter.
79

79

00:04:13,418  -->  00:04:17,922
If I was to remove this and just say let's
push in ProcessHit, then it is going to
80

80

00:04:17,922  -->  00:04:21,973
give us the red squiggly line,
saying you can't call me at the moment.
81

81

00:04:21,973  -->  00:04:23,360
Cuz you haven't told me,
82

82

00:04:23,360  -->  00:04:26,904
there's no argument given that
corresponds to the requirement.
83

83

00:04:26,904  -->  00:04:29,220
So you'd mouse over it, and
it says I need an argument.
84

84

00:04:29,220  -->  00:04:32,394
That's another way of referring
to what we've got here,
85

85

00:04:32,394  -->  00:04:34,874
argument that is requiring this parameter.
86

86

00:04:34,874  -->  00:04:37,659
Okay, let's save that,
check that it works.
87

87

00:04:37,659  -->  00:04:41,482
And just a side note, we will be doing
a lot more with this moment where we say
88

88

00:04:41,482  -->  00:04:45,505
destroy the enemy, and when we do,
we might have some sound effects in there.
89

89

00:04:45,505  -->  00:04:49,393
We might be adding score and
doing a few other things.
90

90

00:04:49,393  -->  00:04:54,252
And as we add more content in here, for
example, that's where we would factor
91

91

00:04:54,252  -->  00:04:58,755
this out and create some sort of die
method that we would have down below.
92

92

00:04:58,755  -->  00:05:00,920
We're not gonna do that yet,
cuz we've just got this one line.
93

93

00:05:00,920  -->  00:05:05,530
But just taking note of this domino
effect or this waterfall effect of that.
94

94

00:05:05,530  -->  00:05:09,983
As we add more stuff into our method, we
factor it out, to just clean up our code,
95

95

00:05:09,983  -->  00:05:14,518
and to have things only have one or two
things that they're doing within a method.
96

96

00:05:14,518  -->  00:05:17,122
Okay, let's save, just double-check
that this has all worked.
97

97

00:05:17,122  -->  00:05:20,257
Hopefully, that point about arguments and
parameters makes sense.
98

98

00:05:20,257  -->  00:05:22,628
We've talked about it a couple of times,
yeah, this all works.
99

99

00:05:22,628  -->  00:05:26,958
So hopefully it's cementing, and
the logic of why we have to do it.
100

100

00:05:26,958  -->  00:05:30,368
Okay, and always, if you have any
questions about what we've covered,
101

101

00:05:30,368  -->  00:05:33,999
in particular with our argument or our
parameter that we have within our method
102

102

00:05:33,999  -->  00:05:37,684
here, how we're doing it or why we're
doing it, then feel free to throw it into
103

103

00:05:37,684  -->  00:05:40,294
the discussion, into the questions,
and let us know.
104

104

00:05:40,294  -->  00:05:43,303
And if you have an understanding,
if you want to reiterate, this is my
105

105

00:05:43,303  -->  00:05:47,031
understanding of this works, then put that
in there as well, so you can verbalize it.
106

106

00:05:47,031  -->  00:05:50,794
Sometimes speaking it out loud and saying,
this is what I think is going on, or
107

107

00:05:50,794  -->  00:05:53,942
this is how I think it works,
really helps cement your learning.
108

108

00:05:53,942  -->  00:05:57,646
So great work, and we'll jump into
more functionality in a moment, so
109

109

00:05:57,646  -->  00:05:59,140
see you in the next lecture.
