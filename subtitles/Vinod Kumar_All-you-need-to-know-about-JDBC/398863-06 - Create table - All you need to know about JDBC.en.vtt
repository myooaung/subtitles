WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.940
Let's now create a table using a Java program off course.

00:00:04.940 --> 00:00:05.810
Practically,

00:00:05.810 --> 00:00:07.130
we never do this.

00:00:07.130 --> 00:00:07.890
Generally,

00:00:07.890 --> 00:00:13.760
you create a table using a script file and under scripted directly on your DB Flynt,

00:00:13.760 --> 00:00:19.050
such as the browser console we have for its to and just for the sake of demonstration,

00:00:19.050 --> 00:00:21.140
create the table using the program.

00:00:21.140 --> 00:00:23.800
So I'm gonna right click on my package on.

00:00:23.800 --> 00:00:26.850
I cleared a new class and I'm gonna call it us.

00:00:26.850 --> 00:00:28.180
Create table.

00:00:28.180 --> 00:00:33.780
Let's also include public static wide main click finish that's getting off this studio.

00:00:33.780 --> 00:00:40.130
And first create a string SQL equals toe a command that we want to execute.

00:00:40.130 --> 00:00:42.060
Let me full screen this editor.

00:00:42.060 --> 00:00:45.350
Instead of typing the complete command over here,

00:00:45.350 --> 00:00:50.920
I'm gonna type the command in a text editor and then copy and paste that over here so

00:00:50.920 --> 00:00:52.800
opened We should Studio court.

00:00:52.800 --> 00:00:55.000
You can use any text editor you want.

00:00:55.000 --> 00:00:56.550
I just want to type in one.

00:00:56.550 --> 00:00:58.850
Go and then copy paste the command over here.

00:00:58.850 --> 00:00:59.500
Sal,

00:00:59.500 --> 00:01:00.150
type here,

00:01:00.150 --> 00:01:01.350
create table.

00:01:01.350 --> 00:01:06.750
The name of the table I want to create is called products that open and close the bracket

00:01:06.750 --> 00:01:08.780
on the columns go.

00:01:08.780 --> 00:01:09.630
Something like this.

00:01:09.630 --> 00:01:16.690
Let's have an I D is going to be off a type called into Primary Key on That's Man did

00:01:16.690 --> 00:01:18.410
really well because of Primary Key.

00:01:18.410 --> 00:01:21.680
Let's also have a column for name of the product.

00:01:21.680 --> 00:01:23.920
Let's call it as worker off safe,

00:01:23.920 --> 00:01:24.960
for example.

00:01:24.960 --> 00:01:27.280
100 on it is mandatory.

00:01:27.280 --> 00:01:28.350
So let's say not known.

00:01:28.350 --> 00:01:34.550
We can also type here some description so I can say Worker offset to Fight.

00:01:34.550 --> 00:01:38.960
It's also have a column called Category A Worker Off.

00:01:38.960 --> 00:01:39.600
Let's say,

00:01:39.600 --> 00:01:40.590
for example,

00:01:40.590 --> 00:01:45.620
101 last thing that we want to have is the price off the product.

00:01:45.620 --> 00:01:47.940
Let's make it off type double.

00:01:47.940 --> 00:01:52.030
And now I can copy this and then come down over here,

00:01:52.030 --> 00:01:54.050
and then when you taste it,

00:01:54.050 --> 00:01:59.100
you will see that Eclipse automatically adds the necessary new line character,

00:01:59.100 --> 00:01:59.950
tab,

00:01:59.950 --> 00:02:01.480
character and so on.

00:02:01.480 --> 00:02:05.500
So this is a nice way off adding other ways.

00:02:05.500 --> 00:02:08.840
I have to type all these things in eclipse manually.

00:02:08.840 --> 00:02:09.330
Of course,

00:02:09.330 --> 00:02:12.920
new line characters are tab characters of the spaces.

00:02:12.920 --> 00:02:14.460
They don't actually matter,

00:02:14.460 --> 00:02:19.800
but at least I had to do all those things that would be a scope off others.

00:02:19.800 --> 00:02:20.690
Anyway,

00:02:20.690 --> 00:02:25.950
I have my SQL command ready and now I want to execute this command against the levy that we

00:02:25.950 --> 00:02:26.270
have,

00:02:26.270 --> 00:02:29.790
Unlike the previous case where I usedto throw the exception.

00:02:29.790 --> 00:02:31.850
This time I want to handle exceptions.

00:02:31.850 --> 00:02:38.250
Jammeh seven introduced a nice feature called Otto Closing off resources.

00:02:38.250 --> 00:02:39.260
For example,

00:02:39.260 --> 00:02:42.610
if I open a DB connection behind the scene,

00:02:42.610 --> 00:02:46.050
the DB connection would be making us off some native A p A s,

00:02:46.050 --> 00:02:51.080
which means that you are actually making yourself some cold written in C plus plus,

00:02:51.080 --> 00:02:56.400
which may have used to some memory areas which are not going to be released.

00:02:56.400 --> 00:02:57.850
If you're not closing the connections,

00:02:57.850 --> 00:03:03.420
it is not only applicable for connection but also for other type of interfaces,

00:03:03.420 --> 00:03:05.460
like statement or results,

00:03:05.460 --> 00:03:06.280
said etcetera.

00:03:06.280 --> 00:03:10.710
So the best way to handle this would be toe use a try block,

00:03:10.710 --> 00:03:16.420
but it's called Try with Resources blocks so the private resources block contains now a

00:03:16.420 --> 00:03:18.750
round bracket and then a curly bracket.

00:03:18.750 --> 00:03:22.160
So this is very are trying out all the statements,

00:03:22.160 --> 00:03:27.600
but this is where you're declaring variables which are automatically closed when you exit

00:03:27.600 --> 00:03:27.800
this.

00:03:27.800 --> 00:03:28.450
Try block.

00:03:28.450 --> 00:03:33.470
The try block may also have an associate ID catch block if you want to catch and handle

00:03:33.470 --> 00:03:34.240
exceptions.

00:03:34.240 --> 00:03:36.640
Or you may even have a finally blood,

00:03:36.640 --> 00:03:42.000
which is typically not required because the whole idea off having this is to automatically

00:03:42.000 --> 00:03:42.910
close on.

00:03:42.910 --> 00:03:46.900
The only thing in the finally would do is to close the resources so we don't need to read

00:03:46.900 --> 00:03:47.950
the finally anymore.

00:03:47.950 --> 00:03:49.200
So in this case,

00:03:49.200 --> 00:03:51.460
I'm gonna put a catch block and say,

00:03:51.460 --> 00:03:52.750
any exception is there.

00:03:52.750 --> 00:03:53.710
Give it to me.

00:03:53.710 --> 00:03:57.850
I would like to log them and typically should do the lager for logging.

00:03:57.850 --> 00:04:03.540
But this time I'm gonna simply say system dart er dot print Ellen off E.

00:04:03.540 --> 00:04:03.760
X.

00:04:03.760 --> 00:04:07.350
So whatever the e x object is that I'm just gonna print it out.

00:04:07.350 --> 00:04:13.340
This bracket is where I would like toa open the connection as well as declare few other

00:04:13.340 --> 00:04:16.120
variables salmon roe expand this.

00:04:16.120 --> 00:04:19.440
And then inside that I'm gonna write your connection.

00:04:19.440 --> 00:04:22.000
Con equals toe de beautiful,

00:04:22.000 --> 00:04:25.710
dark get connection connection needs to be imported.

00:04:25.710 --> 00:04:27.890
So let's just imported from Java rescuers.

00:04:27.890 --> 00:04:34.560
Now it's not going to give you any better because this is very are tryingto open a resource

00:04:34.560 --> 00:04:36.880
on at the end of the strike H block.

00:04:36.880 --> 00:04:40.590
It automatically gets closed if it is open in the first place.

00:04:40.590 --> 00:04:42.950
Now that the connection is ready,

00:04:42.950 --> 00:04:47.400
what we want is an object that is capable of executing this.

00:04:47.400 --> 00:04:48.050
Now,

00:04:48.050 --> 00:04:48.610
remember,

00:04:48.610 --> 00:04:49.660
this isn't a skill.

00:04:49.660 --> 00:04:53.230
Command on the command has to be executed on the server.

00:04:53.230 --> 00:04:56.670
That means we only have to supply this particular skill command.

00:04:56.670 --> 00:04:57.850
So the back end,

00:04:57.850 --> 00:04:59.680
which is H two and H two,

00:04:59.680 --> 00:05:03.790
will take care of executing the actual command is not executive over here.

00:05:03.790 --> 00:05:07.700
So this being a string and string doesn't have any functionality.

00:05:07.700 --> 00:05:09.790
Toe pass this to the underlying BB.

00:05:09.790 --> 00:05:14.290
We need a specialized object and the object is called statement.

00:05:14.290 --> 00:05:20.890
So statement is an object that represents a way off executing or passing.

00:05:20.890 --> 00:05:26.410
They still command to the backend server on probably retrieving the return value from the

00:05:26.410 --> 00:05:26.860
server.

00:05:26.860 --> 00:05:27.840
For example,

00:05:27.840 --> 00:05:29.580
in case off select statement,

00:05:29.580 --> 00:05:32.610
you may wish to get some records back over here,

00:05:32.610 --> 00:05:34.680
so let's type your statement.

00:05:34.680 --> 00:05:42.660
S t empty equals toe conduct create statement state minutes to be imported from Java SQL

00:05:42.660 --> 00:05:44.630
not from Java beans.

00:05:44.630 --> 00:05:45.260
Anyway,

00:05:45.260 --> 00:05:47.670
you can also press command shift Oh,

00:05:47.670 --> 00:05:49.350
to automatically import that.

00:05:49.350 --> 00:05:52.840
And since there is a ambiguity between job order,

00:05:52.840 --> 00:05:55.490
beanstalk statement and javelin skilled statement.

00:05:55.490 --> 00:05:57.710
We have to resolve that self course.

00:05:57.710 --> 00:05:59.290
I have to select the shower.

00:05:59.290 --> 00:06:00.550
Let's kill that statement.

00:06:00.550 --> 00:06:07.350
And now we have a statement object that is capable off sending the still command and all I

00:06:07.350 --> 00:06:13.190
have to do here is to say the same thing by typing ste empty dot Execute on.

00:06:13.190 --> 00:06:16.900
You can see that there are many execute variations.

00:06:16.900 --> 00:06:20.450
Number one executive that takes the s still command.

00:06:20.450 --> 00:06:21.700
So there is an execute.

00:06:21.700 --> 00:06:28.050
There is an executive batch which can a low multiple SQL statements to be executed at one

00:06:28.050 --> 00:06:28.460
shot.

00:06:28.460 --> 00:06:31.380
So instead of visiting the servant again and again and again,

00:06:31.380 --> 00:06:36.450
we can collect all their still commands as a batch and then send it across at one shot.

00:06:36.450 --> 00:06:38.590
There is an executive quietly.

00:06:38.590 --> 00:06:42.800
This is used only for select statement or not for anything else.

00:06:42.800 --> 00:06:45.380
And then you have your executor update,

00:06:45.380 --> 00:06:50.810
which can be used for insert off dead or tillage statements which are called Deimel

00:06:50.810 --> 00:06:51.480
statements.

00:06:51.480 --> 00:06:53.720
So we're going to see them later.

00:06:53.720 --> 00:06:55.020
But for the time being,

00:06:55.020 --> 00:06:59.250
I can use the executive function and supply this SQL command.

00:06:59.250 --> 00:07:03.530
So that s still command is going to be executive on the server.

00:07:03.530 --> 00:07:05.840
So this is only going to send it across.

00:07:05.840 --> 00:07:08.650
Why are the connection object?

00:07:08.650 --> 00:07:11.350
Once the execution is successful,

00:07:11.350 --> 00:07:13.110
it will come back without a problem.

00:07:13.110 --> 00:07:14.510
There is no exception.

00:07:14.510 --> 00:07:16.540
So the try catch block is over,

00:07:16.540 --> 00:07:18.400
so statement gets closed,

00:07:18.400 --> 00:07:19.520
connection gets close.

00:07:19.520 --> 00:07:24.520
So any resources that a C plus plus code would have used behind the theme would now be

00:07:24.520 --> 00:07:25.120
released.

00:07:25.120 --> 00:07:25.940
However,

00:07:25.940 --> 00:07:30.810
in case if there was any exception during the execution of this SQL Command,

00:07:30.810 --> 00:07:33.420
probably because you don't have the permission,

00:07:33.420 --> 00:07:38.190
you're not the right kind of user are there is a thin tax center in your A still command

00:07:38.190 --> 00:07:41.110
all forward over the practical reasons you got another.

00:07:41.110 --> 00:07:43.570
This statement would throw an exception.

00:07:43.570 --> 00:07:47.850
That is what is going to be handled and you're coming out of the catch block once again

00:07:47.850 --> 00:07:49.020
because you're coming off.

00:07:49.020 --> 00:07:49.950
Try catch block.

00:07:49.950 --> 00:07:53.970
Both statement and connection get close so you don't have to manually close them.

00:07:53.970 --> 00:07:55.530
So if everything is OK,

00:07:55.530 --> 00:07:58.630
I want to give him a teacher that the table got created.

00:07:58.630 --> 00:08:04.290
So I'm gonna take your system dot about dot print Ellen and then I'll tape your table

00:08:04.290 --> 00:08:05.100
created.

00:08:05.100 --> 00:08:05.960
Save it.

00:08:05.960 --> 00:08:07.120
If there is a problem,

00:08:07.120 --> 00:08:09.950
we have this system that we are not print.

00:08:09.950 --> 00:08:10.360
Ellen,

00:08:10.360 --> 00:08:12.270
If there is no problem,

00:08:12.270 --> 00:08:13.960
I'm gonna get this table creator.

00:08:13.960 --> 00:08:16.880
So for the first time in around this court,

00:08:16.880 --> 00:08:20.300
since there is no problem in this particular skill command,

00:08:20.300 --> 00:08:21.550
I hope there is no problem.

00:08:21.550 --> 00:08:24.050
This should be expected.

00:08:24.050 --> 00:08:25.010
However,

00:08:25.010 --> 00:08:26.420
if on the second time,

00:08:26.420 --> 00:08:29.350
because the table already exist in the baby.

00:08:29.350 --> 00:08:31.670
This will now be a problem.

00:08:31.670 --> 00:08:37.130
And the system that are not printed and will be skipped goes into the catch block and then

00:08:37.130 --> 00:08:38.220
it's gonna bring this one.

00:08:38.220 --> 00:08:39.820
So let's see what happens.

00:08:39.820 --> 00:08:43.130
I'm no select run Ash Jolla application.

00:08:43.130 --> 00:08:43.890
As you can see,

00:08:43.890 --> 00:08:49.380
it's a stable created so we can go back to the browser Go that it's to console.

00:08:49.380 --> 00:08:52.460
I have opened this for quite some time.

00:08:52.460 --> 00:08:55.520
I may have to do a refresh on when I do a refresh.

00:08:55.520 --> 00:08:56.970
It says here you have been logged out.

00:08:56.970 --> 00:08:57.790
So logging again,

00:08:57.790 --> 00:08:58.850
I clicked on connect,

00:08:58.850 --> 00:09:01.400
and now we see there is a table called products.

00:09:01.400 --> 00:09:02.690
If I expand that,

00:09:02.690 --> 00:09:07.770
you see that there is an I D i d the integer not Nall name is working.

00:09:07.770 --> 00:09:10.840
All the data that that argument have taken automatically.

00:09:10.840 --> 00:09:12.700
The primary key comes as an index.

00:09:12.700 --> 00:09:13.370
Over here,

00:09:13.370 --> 00:09:15.390
everything is taken automatically.

00:09:15.390 --> 00:09:15.910
Of course,

00:09:15.910 --> 00:09:19.880
I can also click on this and automatically a select start from products comes up.

00:09:19.880 --> 00:09:23.310
I execute this by clicking the run button on you see,

00:09:23.310 --> 00:09:25.150
it says that there are no rules.

00:09:25.150 --> 00:09:26.040
However,

00:09:26.040 --> 00:09:27.290
if I go back on,

00:09:27.290 --> 00:09:30.280
then run this court again on this time,

00:09:30.280 --> 00:09:33.330
it's gonna fail because the table already exists,

00:09:33.330 --> 00:09:35.960
and I should see an appropriate error message as well.

00:09:35.960 --> 00:09:37.520
So I'm going to right click on,

00:09:37.520 --> 00:09:37.910
say,

00:09:37.910 --> 00:09:44.140
run as Java application and you should see an editor That's his table products already

00:09:44.140 --> 00:09:44.850
exists.

00:09:44.850 --> 00:09:47.020
A skilled statement saved.

00:09:47.020 --> 00:09:53.640
So I hope you understood the concept off opening a connection or statement inside a try

00:09:53.640 --> 00:09:54.810
with resource block.

00:09:54.810 --> 00:09:57.820
How do we executor create table command,

00:09:57.820 --> 00:10:00.900
although generally we don't execute create table commands.

00:10:00.900 --> 00:10:05.960
But in some rare cases where you may have read this command from a text file and then

00:10:05.960 --> 00:10:07.740
executing get the job done,

00:10:07.740 --> 00:10:10.260
you may have to do that in the next lecture.

00:10:10.260 --> 00:10:15.540
Let's see how we can insert record into the table that we just know created

