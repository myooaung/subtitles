WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.650
Jdb sees an acronym for Java database connectivity,

00:00:03.650 --> 00:00:06.860
which is a vendor independent Java A P A.

00:00:06.860 --> 00:00:08.940
For connecting toe a database.

00:00:08.940 --> 00:00:13.250
It all those a Java program to communicate with the database using SQL commands.

00:00:13.250 --> 00:00:16.770
The JBC AP A provides a vendor neutral mechanism.

00:00:16.770 --> 00:00:21.350
Why are standard interfaces that are actually implemented by third parties,

00:00:21.350 --> 00:00:23.710
such as my insecure article?

00:00:23.710 --> 00:00:24.250
Etcetera?

00:00:24.250 --> 00:00:31.320
A typical job application simply uses the GBC interface Variables toe either connect or

00:00:31.320 --> 00:00:34.060
executive skill commands or managed transactions,

00:00:34.060 --> 00:00:34.670
etcetera.

00:00:34.670 --> 00:00:41.120
But at the runtime deep into face variables refer toa instances off some pluses provided by

00:00:41.120 --> 00:00:42.660
1/3 party or DB,

00:00:42.660 --> 00:00:43.450
windows To us,

00:00:43.450 --> 00:00:49.350
the process of creating instances off the implementing classes is completely transparent.

00:00:49.350 --> 00:00:50.200
Toe a program.

00:00:50.200 --> 00:00:56.310
This matter allows us to easily switch between any databases by simply changing the jelly.

00:00:56.310 --> 00:00:58.500
Bc connection information This way,

00:00:58.500 --> 00:01:03.150
our application is very loosely coupled with the underlying hardly bms itself.

00:01:03.150 --> 00:01:09.280
The only information that changes from one DB toe another TV is a database driver class

00:01:09.280 --> 00:01:09.550
name,

00:01:09.550 --> 00:01:11.080
connection string.

00:01:11.080 --> 00:01:12.350
We call it as you are.

00:01:12.350 --> 00:01:15.640
They're using him and password to the actual data base.

00:01:15.640 --> 00:01:22.000
The key player in a JBC application is the driver class so the very first thing that you

00:01:22.000 --> 00:01:25.940
might have to do in any application in order to work with Jerry Busiest Toe Lord,

00:01:25.940 --> 00:01:28.780
the driver plus into the Jello Virtual Machine.

00:01:28.780 --> 00:01:31.700
There are four types of Jerry busy drivers that exists,

00:01:31.700 --> 00:01:35.730
out of which only the last one is in use today.

00:01:35.730 --> 00:01:40.000
The taipan drivers are also known as J D B C or D Busy Bridge.

00:01:40.000 --> 00:01:43.440
These trailers are not in practical use anymore.

00:01:43.440 --> 00:01:45.140
In the earlier days of Java,

00:01:45.140 --> 00:01:48.780
most of the databases were accessed using the A D B C drivers.

00:01:48.780 --> 00:01:53.830
The audio visit drivers are written in C or C Plus plus ONDA.

00:01:53.830 --> 00:02:00.440
A suitable database climb to driver must be installed in order to work with this or limited

00:02:00.440 --> 00:02:02.160
driver the way Jenny B,

00:02:02.160 --> 00:02:09.250
C or D busy bridge works is you first register DB specific or BBC client to driver with the

00:02:09.250 --> 00:02:10.190
operating system,

00:02:10.190 --> 00:02:14.880
and there will be a name associated with this on in your job application.

00:02:14.880 --> 00:02:16.510
You will load a J,

00:02:16.510 --> 00:02:18.150
BBC or BBC driver,

00:02:18.150 --> 00:02:20.890
and then you will say that we want to connect.

00:02:20.890 --> 00:02:21.170
Oh,

00:02:21.170 --> 00:02:23.670
that specific revisit driver with the name,

00:02:23.670 --> 00:02:29.220
then your application communicates toe the party visit driver and then the only busy driver

00:02:29.220 --> 00:02:33.960
talks to the underlying database for practicality issues and performance problems.

00:02:33.960 --> 00:02:36.150
Days are not used anymore.

00:02:36.150 --> 00:02:40.700
The type to driver is also known as partial job a driver.

00:02:40.700 --> 00:02:41.440
In this,

00:02:41.440 --> 00:02:46.290
the GBC method calls would be converted into native C or C plus plus calls,

00:02:46.290 --> 00:02:46.950
which,

00:02:46.950 --> 00:02:48.870
very from one database to another.

00:02:48.870 --> 00:02:51.670
These native AP is are part of the PBMs.

00:02:51.670 --> 00:02:53.120
After that you're working with.

00:02:53.120 --> 00:02:53.850
For example,

00:02:53.850 --> 00:02:55.290
if you're working with Oracle,

00:02:55.290 --> 00:02:58.350
you must install the oracle,

00:02:58.350 --> 00:03:03.710
climb to driver on your computer and then your job application communicates with that one.

00:03:03.710 --> 00:03:08.310
The drawback off this approach is on every off the computers were,

00:03:08.310 --> 00:03:10.570
Javal claimed applications being executed.

00:03:10.570 --> 00:03:13.850
We have to install the native plant a PS as well.

00:03:13.850 --> 00:03:17.690
This is a huge overhead when the number of clients are more.

00:03:17.690 --> 00:03:18.920
In the olden days,

00:03:18.920 --> 00:03:23.780
Java applications were typically installed on hundreds off client missions on,

00:03:23.780 --> 00:03:29.940
you may have to install the DB climbed driver on each one off them that this type of A was

00:03:29.940 --> 00:03:32.580
were in used during the in leaders of Java,

00:03:32.580 --> 00:03:35.790
where the industry used to to their architectures.

00:03:35.790 --> 00:03:41.770
Predominantly type three drivers are also known as your job try was for database middleware

00:03:41.770 --> 00:03:45.150
in the early days off multitude architecture for applications.

00:03:45.150 --> 00:03:51.040
Some of the delivers windows provided a pure job GBC driver that communicates to a

00:03:51.040 --> 00:03:52.000
middleweight terrible,

00:03:52.000 --> 00:03:57.860
on which either or BBC or needed client driver would have been installed that driver on the

00:03:57.860 --> 00:04:00.730
middleware for their communicate to the actual rd BMS.

00:04:00.730 --> 00:04:06.150
A huge advantage of this approach is that there is no need off any set up to be done on the

00:04:06.150 --> 00:04:07.250
client mission itself,

00:04:07.250 --> 00:04:10.750
which follows us to increase the number of planes drastically.

00:04:10.750 --> 00:04:12.030
On the downside,

00:04:12.030 --> 00:04:18.030
we have to set up a middle way server Type four is the most efficient and the most commonly

00:04:18.030 --> 00:04:18.810
used to one.

00:04:18.810 --> 00:04:21.750
This is also known as pure jobber driven.

00:04:21.750 --> 00:04:23.170
This driver,

00:04:23.170 --> 00:04:25.650
usually provided by the database vendor,

00:04:25.650 --> 00:04:30.450
directly communicates with the RTB Emma's using Java sockets.

00:04:30.450 --> 00:04:31.630
By far,

00:04:31.630 --> 00:04:36.150
this is the best performing driver compared toa all other types of drivers

