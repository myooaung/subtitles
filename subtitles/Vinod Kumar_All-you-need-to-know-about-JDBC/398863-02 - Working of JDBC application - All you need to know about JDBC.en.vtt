WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.880
Let's understand the working off Jerry BC using this illustration.

00:00:03.880 --> 00:00:08.690
Consider a gel application that wants to connect toe different databases.

00:00:08.690 --> 00:00:09.580
For example,

00:00:09.580 --> 00:00:11.260
assume that we have Oracle.

00:00:11.260 --> 00:00:17.490
We have my SQL are we have hitched to on the Java application In orderto communicate with

00:00:17.490 --> 00:00:22.360
the different data business uses variables off Java today.

00:00:22.360 --> 00:00:24.640
Still that connection Jabara rescued out.

00:00:24.640 --> 00:00:30.620
Statement prepared statement callable statement results it We know that digital interfaces

00:00:30.620 --> 00:00:31.710
on somewhere.

00:00:31.710 --> 00:00:35.290
We have tohave implementation for all these interfaces.

00:00:35.290 --> 00:00:41.290
And this is where the DB windows provide Jerry busy implementations on these generously

00:00:41.290 --> 00:00:42.250
implementations.

00:00:42.250 --> 00:00:45.290
They know exactly how to communicate back to the TV.

00:00:45.290 --> 00:00:46.100
For example,

00:00:46.100 --> 00:00:51.870
the Jade ABC implementation from Oracle knows how to communicate to the Oracle database On

00:00:51.870 --> 00:00:52.370
Likewise,

00:00:52.370 --> 00:00:55.850
my SQL implementation knows how to communicate with my SQL.

00:00:55.850 --> 00:00:56.710
Similarly,

00:00:56.710 --> 00:01:01.620
the very busy implementation from hedge to knows how to communicate back toe hedge to So we

00:01:01.620 --> 00:01:03.030
have the interfaces,

00:01:03.030 --> 00:01:04.480
we have the implementations.

00:01:04.480 --> 00:01:09.810
However the names off these classes that are implemented by the vendors we don't know about

00:01:09.810 --> 00:01:10.160
them.

00:01:10.160 --> 00:01:15.510
This is where we want an automated way off creating objects off these implementation

00:01:15.510 --> 00:01:19.760
classes So everything starts by obtaining a connection once you have a connection,

00:01:19.760 --> 00:01:23.210
you can clear the statement off prepared statement or callable statements.

00:01:23.210 --> 00:01:26.380
And once you have them and if you ever feel select statement,

00:01:26.380 --> 00:01:29.110
then you can get the results it and so on and so forth.

00:01:29.110 --> 00:01:32.550
The starting point is the getting off a connection object,

00:01:32.550 --> 00:01:36.010
since we have a connection into face and we want an object off.

00:01:36.010 --> 00:01:40.380
Some different implementation on the implementation may change based on our settings.

00:01:40.380 --> 00:01:43.880
We want to make it off a factory design pattern.

00:01:43.880 --> 00:01:47.120
And there is a class called Driver Manager,

00:01:47.120 --> 00:01:48.890
which exactly does the same thing.

00:01:48.890 --> 00:01:56.040
Driver manager acts as factory off connection object so we need to supply some perimeters

00:01:56.040 --> 00:01:57.010
and based on that,

00:01:57.010 --> 00:01:59.140
it's going toe fetch connection,

00:01:59.140 --> 00:02:01.280
object off appropriate type.

00:02:01.280 --> 00:02:08.450
The way this works is the driver manager maintains a collection off all the known drivers.

00:02:08.450 --> 00:02:09.360
Off course.

00:02:09.360 --> 00:02:12.700
We have to register these drivers with the driver manager,

00:02:12.700 --> 00:02:18.000
and typically this is done by using a very simple function called class Start for name.

00:02:18.000 --> 00:02:23.190
On that the plaster for name does is it loads a class into the William.

00:02:23.190 --> 00:02:25.830
But if that plans happens to be a driver class,

00:02:25.830 --> 00:02:26.930
then driver class,

00:02:26.930 --> 00:02:27.560
according to jail.

00:02:27.560 --> 00:02:31.320
BBC stratification has to register itself with the driver manager.

00:02:31.320 --> 00:02:32.440
In other words,

00:02:32.440 --> 00:02:39.250
the driver manager maintains a collection filled with all the driver objects that you want

00:02:39.250 --> 00:02:39.250
.

00:02:39.250 --> 00:02:40.460
So in our case,

00:02:40.460 --> 00:02:42.420
we have three driver objects.

00:02:42.420 --> 00:02:43.520
Article driver,

00:02:43.520 --> 00:02:45.760
my SQL driver on hits to driver.

00:02:45.760 --> 00:02:49.950
So to obtain a DB connection for a given database,

00:02:49.950 --> 00:02:55.650
the driver manager has a function called get connection and that takes few perimeters on

00:02:55.650 --> 00:02:56.520
the perimeters.

00:02:56.520 --> 00:03:02.090
Include a connection string in the form of what's called you are the user name that the

00:03:02.090 --> 00:03:02.610
popular,

00:03:02.610 --> 00:03:03.560
depending on the DB,

00:03:03.560 --> 00:03:09.950
that you're going to use this get connection function now uses a loop or illiterates over

00:03:09.950 --> 00:03:11.700
each of the drivers that it has.

00:03:11.700 --> 00:03:13.660
So we do have three drivers over here,

00:03:13.660 --> 00:03:19.500
so it is going to use the loop and then check whether any of these drivers understand this

00:03:19.500 --> 00:03:20.460
particular you are.

00:03:20.460 --> 00:03:24.560
So what it does is it's going toe passed the urine and then to say,

00:03:24.560 --> 00:03:24.770
Hey,

00:03:24.770 --> 00:03:25.560
oracle flavour.

00:03:25.560 --> 00:03:26.450
Do you understand this?

00:03:26.450 --> 00:03:26.880
You are.

00:03:26.880 --> 00:03:29.180
And if the article driver says Yes,

00:03:29.180 --> 00:03:32.200
I understand what it does is it's going toe,

00:03:32.200 --> 00:03:37.280
create an object off an article connection and then returns the same thing toe program.

00:03:37.280 --> 00:03:40.740
If the Ural that your God is not an article Europe.

00:03:40.740 --> 00:03:42.770
But if it's a my SQL Yoran,

00:03:42.770 --> 00:03:47.650
then my instilled driver is responsible for creating a connection object,

00:03:47.650 --> 00:03:50.250
which is for the return back to your application.

00:03:50.250 --> 00:03:51.010
However,

00:03:51.010 --> 00:03:53.370
if the Europe is each to Europe,

00:03:53.370 --> 00:03:56.210
then the hits to driver will accept this on.

00:03:56.210 --> 00:04:01.070
Then it's to driver will create a connection to the H two database and then written the

00:04:01.070 --> 00:04:02.050
same thing to us.

00:04:02.050 --> 00:04:04.060
So once you have the connection,

00:04:04.060 --> 00:04:08.090
you now can create the statement of prepared statement or callable statement,

00:04:08.090 --> 00:04:09.560
depending on your needs.

00:04:09.560 --> 00:04:10.250
And then,

00:04:10.250 --> 00:04:10.650
of course,

00:04:10.650 --> 00:04:12.780
if you executor in SQL Select Statement,

00:04:12.780 --> 00:04:16.000
you can handle the same thing using the Java door.

00:04:16.000 --> 00:04:21.810
SQL Lord results that so I hope you understood the working off a J BBC application.

