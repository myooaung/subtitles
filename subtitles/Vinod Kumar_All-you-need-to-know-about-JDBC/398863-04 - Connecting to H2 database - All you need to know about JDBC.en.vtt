WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.250
throughout this program,

00:00:01.250 --> 00:00:05.830
I would be using Eclipse as an I D for developing our applications.

00:00:05.830 --> 00:00:12.780
If you're comfortable with other ideas such as net beans or intelligent idea,

00:00:12.780 --> 00:00:14.440
please go ahead and use the same thing.

00:00:14.440 --> 00:00:16.300
But if you would like Toa,

00:00:16.300 --> 00:00:19.490
follow along with me and use Eclipse i d.

00:00:19.490 --> 00:00:20.750
With it.

00:00:20.750 --> 00:00:25.030
Eclipse that R slash downloads go to the download packages.

00:00:25.030 --> 00:00:31.120
Make sure you select the eclipse i d for Enterprise Java developers although the

00:00:31.120 --> 00:00:37.060
applications that we would be creating now would be only limited toe regular cordial A

00:00:37.060 --> 00:00:42.190
applications choose your operating system and then downloaded the appropriate build and

00:00:42.190 --> 00:00:43.720
then start using the same thing.

00:00:43.720 --> 00:00:46.500
I have already opened eclipse Over here.

00:00:46.500 --> 00:00:51.200
I have created my workspace on the stop called GBC Training.

00:00:51.200 --> 00:00:57.300
You can see currently it is clear the main one project or job R E project etcetera.

00:00:57.300 --> 00:00:58.390
However,

00:00:58.390 --> 00:01:01.050
I want to create a simple jello project.

00:01:01.050 --> 00:01:03.950
So I goto file new.

00:01:03.950 --> 00:01:06.450
I don't see a Java project over here.

00:01:06.450 --> 00:01:10.160
This is primarily because of the current perspective.

00:01:10.160 --> 00:01:12.920
If you goto window perspective,

00:01:12.920 --> 00:01:14.190
open perspective,

00:01:14.190 --> 00:01:16.400
you can see that there is job over here,

00:01:16.400 --> 00:01:18.510
but the default is Java E.

00:01:18.510 --> 00:01:20.500
If you click on Java perspective.

00:01:20.500 --> 00:01:20.980
Over here,

00:01:20.980 --> 00:01:26.300
you can see that the Project Explorer has gone and Package Explorer has come on a few other

00:01:26.300 --> 00:01:27.370
genius over here.

00:01:27.370 --> 00:01:28.270
In addition,

00:01:28.270 --> 00:01:31.310
you also see File New Java Project.

00:01:31.310 --> 00:01:33.090
Now I click on that,

00:01:33.090 --> 00:01:38.580
and then I simply give you a name called GBC Demo application.

00:01:38.580 --> 00:01:40.920
My current washing of Java is wondered.

00:01:40.920 --> 00:01:41.240
Eight.

00:01:41.240 --> 00:01:43.120
So I would like to stick with Java,

00:01:43.120 --> 00:01:43.400
etc.

00:01:43.400 --> 00:01:44.490
Wondered eight itself.

00:01:44.490 --> 00:01:46.470
No changes over here.

00:01:46.470 --> 00:01:47.630
In the next step,

00:01:47.630 --> 00:01:52.540
we may have to refer to the hedge to database jar file that we don't wrote it earlier.

00:01:52.540 --> 00:01:57.290
You can also do the same thing later by going toe Project Properties part.

00:01:57.290 --> 00:01:58.260
Since we're here,

00:01:58.260 --> 00:02:00.040
let's do that step also.

00:02:00.040 --> 00:02:02.060
So I'm gonna go to the library's over here.

00:02:02.060 --> 00:02:02.850
Currently,

00:02:02.850 --> 00:02:05.550
I have access to the Jerry System Library,

00:02:05.550 --> 00:02:09.080
all the jobs that are available as part of the Jerry.

00:02:09.080 --> 00:02:14.240
But we want to add the jar file that we got from May 1 repository.

00:02:14.240 --> 00:02:18.270
So we go to the external jobs and then select from desktop.

00:02:18.270 --> 00:02:22.450
The Jar file hits to dash one dot for 1.0.1 97 job.

00:02:22.450 --> 00:02:24.440
That's all here.

00:02:24.440 --> 00:02:27.700
There's no the next step like unfinished toe come out of the same.

00:02:27.700 --> 00:02:30.410
And now we see you about your project,

00:02:30.410 --> 00:02:36.150
with the reference library hitched to dash one dot for that 1 97 job file.

00:02:36.150 --> 00:02:37.570
If you expand,

00:02:37.570 --> 00:02:42.920
you will see all the packages over here and off all the classes and interfaces in all these

00:02:42.920 --> 00:02:43.460
packages.

00:02:43.460 --> 00:02:48.790
The only one that is important for us is the are got hitched to that driver.

00:02:48.790 --> 00:02:52.640
So this is the key for connecting toe.

00:02:52.640 --> 00:02:53.690
It's two database.

00:02:53.690 --> 00:02:55.190
Let's use that a bit later.

00:02:55.190 --> 00:02:56.270
First,

00:02:56.270 --> 00:02:59.230
let's create a program under our SRC,

00:02:59.230 --> 00:03:05.440
so you can either right click on a South Sea or on your project and then say New job class

00:03:05.440 --> 00:03:06.240
first,

00:03:06.240 --> 00:03:09.110
let's get the package name as cord out.

00:03:09.110 --> 00:03:11.800
We note you can give any other package name,

00:03:11.800 --> 00:03:17.090
but typically the package name is a combination off your website address and the project

00:03:17.090 --> 00:03:18.350
name and so on and so forth.

00:03:18.350 --> 00:03:19.200
In my case,

00:03:19.200 --> 00:03:21.130
my website is we know dot Co,

00:03:21.130 --> 00:03:23.800
so I every once the task ordered me not over here,

00:03:23.800 --> 00:03:24.970
the name of the class.

00:03:24.970 --> 00:03:27.440
I want to give it as a test connection.

00:03:27.440 --> 00:03:32.540
I also would like to have a public static wide mean so that we can execute that and test it

00:03:32.540 --> 00:03:32.950
out.

00:03:32.950 --> 00:03:38.670
I take on finish and now you'll see that we have our Jolla class over here.

00:03:38.670 --> 00:03:41.890
So I'm gonna increase the foreign sites by person,

00:03:41.890 --> 00:03:44.870
command plus or control Plus in Windows.

00:03:44.870 --> 00:03:46.300
It's getting off this to do.

00:03:46.300 --> 00:03:50.570
The only thing that we want to do in this particular program is toe establish a connection

00:03:50.570 --> 00:03:51.900
to the DB successfully.

00:03:51.900 --> 00:03:53.080
For that,

00:03:53.080 --> 00:03:54.310
we have two steps.

00:03:54.310 --> 00:03:56.320
The number one step is toe.

00:03:56.320 --> 00:03:58.300
Know the DB driver.

00:03:58.300 --> 00:04:01.580
This is the rightful driver were trained load into the VM.

00:04:01.580 --> 00:04:05.960
But the way you can do is either create an object off that particular class.

00:04:05.960 --> 00:04:08.190
So before creating an object of the class,

00:04:08.190 --> 00:04:08.820
J.

00:04:08.820 --> 00:04:11.940
R E will automatically load the class into the GBM.

00:04:11.940 --> 00:04:17.050
That's the whole thing that we want to do the second way to do without creating our

00:04:17.050 --> 00:04:21.740
referencing to that particular class name because we don't want any tight coupling toe hits

00:04:21.740 --> 00:04:22.330
to hear.

00:04:22.330 --> 00:04:23.010
Basically,

00:04:23.010 --> 00:04:26.140
we don't want to say any import statement related to hits,

00:04:26.140 --> 00:04:26.400
too,

00:04:26.400 --> 00:04:32.690
and that can be done by using something called class dark for me on the name of the driver

00:04:32.690 --> 00:04:36.650
in string format and the name of the driver is our dark.

00:04:36.650 --> 00:04:38.950
It's two dot de caps driver.

00:04:38.950 --> 00:04:44.510
Now this actually throws a checked exception called class not formed.

00:04:44.510 --> 00:04:45.990
Exception just in case.

00:04:45.990 --> 00:04:50.960
If you have got this particular file name wrong are you haven't added the job for you to

00:04:50.960 --> 00:04:51.930
your libraries.

00:04:51.930 --> 00:04:56.160
So this would actually then say I did not find this particular driver class anywhere,

00:04:56.160 --> 00:04:58.010
So that is going to be an exception.

00:04:58.010 --> 00:05:00.570
And since this being a checked exception,

00:05:00.570 --> 00:05:03.950
we just have to either surround with a try catch.

00:05:03.950 --> 00:05:05.060
We can do that.

00:05:05.060 --> 00:05:05.590
Andi,

00:05:05.590 --> 00:05:09.350
tell the user that there is another in locating this particular driver.

00:05:09.350 --> 00:05:09.810
Plus,

00:05:09.810 --> 00:05:13.280
are at this point in time I can simply say add throws,

00:05:13.280 --> 00:05:18.300
declarations toe the main function so that whoever is calling the main function,

00:05:18.300 --> 00:05:22.550
which is the Jerry Daddy love to handle this particular exception,

00:05:22.550 --> 00:05:23.890
which is okay with me for now.

00:05:23.890 --> 00:05:29.640
So what this particular statement is going to do is tow locate this particular class in the

00:05:29.640 --> 00:05:30.300
class ponte,

00:05:30.300 --> 00:05:34.220
and if it finds its going toe lord that into the Veum,

00:05:34.220 --> 00:05:35.330
that's all it's going to do.

00:05:35.330 --> 00:05:41.290
But when a J BBC driver class is loaded according to the GBC specification.

00:05:41.290 --> 00:05:48.200
What it is supposed to do is tow instance shit an object off itself and register with

00:05:48.200 --> 00:05:50.150
something called driver manager.

00:05:50.150 --> 00:05:55.510
So think off driver manager having a collection off all the drivers on now.

00:05:55.510 --> 00:05:59.450
This statement will add another entry into that.

00:05:59.450 --> 00:06:01.060
So in other words,

00:06:01.060 --> 00:06:06.890
even though this is nothing to do with the J BBC command because this is coming from job

00:06:06.890 --> 00:06:07.940
order blank package,

00:06:07.940 --> 00:06:08.790
not from job ordered,

00:06:08.790 --> 00:06:09.290
a skill.

00:06:09.290 --> 00:06:13.480
So this is a very general statement only toe lord,

00:06:13.480 --> 00:06:15.170
a Java class into the William.

00:06:15.170 --> 00:06:17.350
Nothing to do with the GBC but,

00:06:17.350 --> 00:06:18.150
in effect,

00:06:18.150 --> 00:06:21.140
a Jedi basic class that is loaded automatically.

00:06:21.140 --> 00:06:21.530
Instead,

00:06:21.530 --> 00:06:24.260
shits itself registers with a driver manager.

00:06:24.260 --> 00:06:28.570
Then the driver manager can make use of the trailer object and then connect to the baby.

00:06:28.570 --> 00:06:30.430
And that's the second step.

00:06:30.430 --> 00:06:34.200
So the second step is to tell the driver manager toe,

00:06:34.200 --> 00:06:39.890
Make use off all the drivers that are available and then try establishing a connection to

00:06:39.890 --> 00:06:40.750
the given.

00:06:40.750 --> 00:06:42.880
You are with the user name and password,

00:06:42.880 --> 00:06:44.290
so let's create a string.

00:06:44.290 --> 00:06:46.310
You are to represent a connection.

00:06:46.310 --> 00:06:51.390
String on a Ural typically has a couple off known parts.

00:06:51.390 --> 00:06:53.490
Number one is the protocol.

00:06:53.490 --> 00:06:57.400
Now think off your visiting a website called http.

00:06:57.400 --> 00:07:02.100
Cool And we know dot co typically use a browser toe visit a website.

00:07:02.100 --> 00:07:06.570
So the browser is an http client and the server is an http server.

00:07:06.570 --> 00:07:09.790
So the client answer were used the same protocol.

00:07:09.790 --> 00:07:15.300
So we simply say http or https but in case of Jerry BC,

00:07:15.300 --> 00:07:17.380
the client is Java,

00:07:17.380 --> 00:07:20.620
but the server can be in this cage to tomorrow.

00:07:20.620 --> 00:07:25.250
It can be my skill or it could be article Are some other db server?

00:07:25.250 --> 00:07:31.870
So the protocol from Java is called GBC and from the server side it varies.

00:07:31.870 --> 00:07:33.910
So if you're connecting to my SQL,

00:07:33.910 --> 00:07:34.980
you would probably type.

00:07:34.980 --> 00:07:36.010
You're my estelle.

00:07:36.010 --> 00:07:41.180
But since we're connecting tow hitch to the type of critical this time we want to connect

00:07:41.180 --> 00:07:45.900
toe because we are trained to connect toe a standalone saltwater and not an embedded db.

00:07:45.900 --> 00:07:48.880
So it's gonna be hitched to Colon DCP.

00:07:48.880 --> 00:07:53.470
So this is what is defined by hitch to so we don't have much control on that.

00:07:53.470 --> 00:07:56.840
We just aren't toe read the documentation and understand that.

00:07:56.840 --> 00:07:59.610
So this is the critical from the client side.

00:07:59.610 --> 00:08:01.450
This is the protocol from the starboard side.

00:08:01.450 --> 00:08:07.090
So this is equal and of http colon double slash as what we generally type in the browser

00:08:07.090 --> 00:08:07.950
for a website.

00:08:07.950 --> 00:08:12.780
But this is a protocol combination from Java client toe,

00:08:12.780 --> 00:08:14.470
hedge toe database server.

00:08:14.470 --> 00:08:20.060
And then comes the location off your computer and the location off your computer where the

00:08:20.060 --> 00:08:23.100
server is running is always given us double slash,

00:08:23.100 --> 00:08:28.250
and then either an I P address or the name of the computer are in this case,

00:08:28.250 --> 00:08:29.350
local host.

00:08:29.350 --> 00:08:34.830
Then you need to give the location off the file that represents your DB.

00:08:34.830 --> 00:08:35.520
Now,

00:08:35.520 --> 00:08:36.050
in our case,

00:08:36.050 --> 00:08:42.610
the file is in the home directories over type your tilda slash GBC dash training.

00:08:42.610 --> 00:08:44.780
And that is the file that missile earlier,

00:08:44.780 --> 00:08:51.020
Jerry Busy training dot Every door BB on that file is the binary file that represents the

00:08:51.020 --> 00:08:52.940
entire database information.

00:08:52.940 --> 00:08:59.040
So this is going to be our connection string or you are that we want to connect over

00:08:59.040 --> 00:08:59.650
database.

00:08:59.650 --> 00:09:02.550
The next thing is the user name,

00:09:02.550 --> 00:09:04.180
which I give it us we note,

00:09:04.180 --> 00:09:05.820
and then the password,

00:09:05.820 --> 00:09:07.350
which I gave it a secret.

00:09:07.350 --> 00:09:09.820
With this information,

00:09:09.820 --> 00:09:15.130
I can now tell the driver manager as the name indicates driver manager is supposed to

00:09:15.130 --> 00:09:22.280
manage the driver objects We have loaded a driver class into the JBM Driver manager is

00:09:22.280 --> 00:09:28.500
aware off that driver manager will now use an object off this class and praise to establish

00:09:28.500 --> 00:09:30.250
a connection with this information.

00:09:30.250 --> 00:09:32.920
The will you can do that is driver,

00:09:32.920 --> 00:09:34.390
manager dark,

00:09:34.390 --> 00:09:41.480
get connection and then specify the Yuanan user name and then the password.

00:09:41.480 --> 00:09:44.080
This statement also throws an exception,

00:09:44.080 --> 00:09:45.410
which is checked exception.

00:09:45.410 --> 00:09:48.550
The exceptions could be because the u Early is wrong.

00:09:48.550 --> 00:09:54.920
You may have given some unknown db are probably the name of the computer is wrong,

00:09:54.920 --> 00:09:59.350
or the protocol is something that is not known to the given driver.

00:09:59.350 --> 00:10:02.710
Are the user name can be incorrect or the password can be incorrect.

00:10:02.710 --> 00:10:06.030
So with all these various erroneous possibilities,

00:10:06.030 --> 00:10:09.840
this throws a checked exception on I'm not interested in handling the exception,

00:10:09.840 --> 00:10:12.240
Cermeno through that from the main function,

00:10:12.240 --> 00:10:13.600
just like the previous case,

00:10:13.600 --> 00:10:15.850
so that is taken care off.

00:10:15.850 --> 00:10:19.800
The return value of this function basically is object,

00:10:19.800 --> 00:10:22.050
often interface called connection.

00:10:22.050 --> 00:10:25.830
Let's assign the return ability variable con,

00:10:25.830 --> 00:10:28.230
but the variable has not been declared,

00:10:28.230 --> 00:10:34.850
so eclipse is giving me an editor indicating that Khan is not created as any variable.

00:10:34.850 --> 00:10:38.790
It has to be declared before using with eclipse.

00:10:38.790 --> 00:10:40.890
We have lot off sharp cuts that help us.

00:10:40.890 --> 00:10:42.120
So I can press here,

00:10:42.120 --> 00:10:47.490
command one on windows control one and you see you get create local variable corn.

00:10:47.490 --> 00:10:48.830
You press enter.

00:10:48.830 --> 00:10:53.350
You can see based on the return data type off this particular function.

00:10:53.350 --> 00:10:57.500
It has automatically picked up a data type which is nothing but Jaouad.

00:10:57.500 --> 00:10:58.990
Our SQL dot connection,

00:10:58.990 --> 00:11:01.790
we know know that if there is a problem,

00:11:01.790 --> 00:11:02.880
it would throw an exception.

00:11:02.880 --> 00:11:04.110
But if everything is OK,

00:11:04.110 --> 00:11:10.240
I have an object called con and now I can check whether Khan exists or not.

00:11:10.240 --> 00:11:11.040
And if it exists,

00:11:11.040 --> 00:11:12.650
what kind of an object is that?

00:11:12.650 --> 00:11:18.750
One very important point to remember at this point in time is connection is an inter fish.

00:11:18.750 --> 00:11:21.460
We have a variable of an interface,

00:11:21.460 --> 00:11:26.870
but we wanted an object of some class and that is where this particular function acting as

00:11:26.870 --> 00:11:30.500
a factory mattered to manufacture connection objects.

00:11:30.500 --> 00:11:37.730
So it has taken this particular you are in Andi supplied toe all the known driver object

00:11:37.730 --> 00:11:43.920
that this driver manager contained one off which is this one based on the driver that has

00:11:43.920 --> 00:11:45.560
picked up this particular Ural,

00:11:45.560 --> 00:11:48.700
the driver would have created a connection object in that connection.

00:11:48.700 --> 00:11:50.150
Object is being written to us.

00:11:50.150 --> 00:11:56.410
So in order to know what kind of class is this actual con refers to an object off.

00:11:56.410 --> 00:12:01.270
Let's type your system 0.0 dot print Ellen on then type your con.

00:12:01.270 --> 00:12:08.210
Don't get class dot Get name for a cynical and state our file run.

00:12:08.210 --> 00:12:12.930
This scored by either clicking here or I can do a rate click and then say,

00:12:12.930 --> 00:12:15.450
Run as Java application.

00:12:15.450 --> 00:12:19.890
You can also press control f Levin toe run the application on.

00:12:19.890 --> 00:12:24.220
We should see that we get an object off something called ardor.

00:12:24.220 --> 00:12:30.490
Hitch told our chili bc dart jelly bc connection by just slapping the information like

00:12:30.490 --> 00:12:32.940
driver name you are using impasse,

00:12:32.940 --> 00:12:39.390
for we will be getting a different object off different class provided by different render

00:12:39.390 --> 00:12:39.390
.

00:12:39.390 --> 00:12:46.650
So this way your application is completely transparent off Dunblane Database server.

00:12:46.650 --> 00:12:50.300
So I hope you understood the concepts explaining this lecture.

00:12:50.300 --> 00:12:51.520
That's all for now.

00:12:51.520 --> 00:12:53.100
See you in the next lecture

