1
00:00:01,080 --> 00:00:04,130
The AWS Systems Manager Parameter Store,

2
00:00:04,130 --> 00:00:07,510
which you'll sometimes see referred to as the SSM Parameter Store

3
00:00:07,510 --> 00:00:10,690
(and SSM stands for Simple Systems Manager,

4
00:00:10,690 --> 00:00:13,650
that's an old name for the AWS Systems Manager,

5
00:00:13,650 --> 00:00:15,940
but the acronym still lives on),

6
00:00:15,940 --> 00:00:20,840
offers a centralized place to store and manage your secrets.

7
00:00:20,840 --> 00:00:23,300
So instead of hardcoding your parameter value,

8
00:00:23,300 --> 00:00:27,440
your application will call Parameter Store to get that value instead.

9
00:00:27,440 --> 00:00:30,130
And it's important to note that Parameter Store is just one

10
00:00:30,130 --> 00:00:33,310
small offering within AWS Systems Manager,

11
00:00:33,310 --> 00:00:35,680
which handles all sorts of things beyond the scope of this

12
00:00:35,680 --> 00:00:38,720
course but also includes things like inventory,

13
00:00:38,720 --> 00:00:42,200
compliance, patch management, and many other things.

14
00:00:42,200 --> 00:00:44,880
But we're going to focus on Parameter Store in this course.

15
00:00:44,880 --> 00:00:49,400
It's free, and you can store up to 10,000 secrets per region,

16
00:00:49,400 --> 00:00:52,760
each one up to 4 KB in size within its standard tier.

17
00:00:52,760 --> 00:00:56,010
There is also an advanced tier that scales up to

18
00:00:56,010 --> 00:00:59,270
100,000 secrets up to 8 KB each.

19
00:00:59,270 --> 00:01:02,590
But there is a per‑parameter cost associated with that.

20
00:01:02,590 --> 00:01:06,020
Access to Parameter Store is controlled through IAM.

21
00:01:06,020 --> 00:01:08,900
So it's important that you configure the proper IAM roles

22
00:01:08,900 --> 00:01:12,320
within your account for EC2 or Lambda, for instance,

23
00:01:12,320 --> 00:01:15,030
depending on where your application is running so that you

24
00:01:15,030 --> 00:01:17,840
will be able to access these parameters.

25
00:01:17,840 --> 00:01:20,410
Parameter Store allows you to store secrets as

26
00:01:20,410 --> 00:01:23,390
plaintext strings or lists of strings,

27
00:01:23,390 --> 00:01:25,690
and these are good for secrets that you don't want to store in your

28
00:01:25,690 --> 00:01:28,420
code but maybe aren't too sensitive in nature.

29
00:01:28,420 --> 00:01:30,460
But for more sensitive secrets,

30
00:01:30,460 --> 00:01:34,000
so maybe for something like a privileged account password or something

31
00:01:34,000 --> 00:01:36,840
that requires an additional layer of protection,

32
00:01:36,840 --> 00:01:40,030
we can use something called a SecureString parameter.

33
00:01:40,030 --> 00:01:44,490
And SecureString parameters are actually encrypted using keys managed in KMS,

34
00:01:44,490 --> 00:01:47,140
which you'll recall we talked about in the last module,

35
00:01:47,140 --> 00:01:51,500
so you can actually use a key policy, in addition to IAM roles,

36
00:01:51,500 --> 00:01:54,170
to further restrict access to the secret.

37
00:01:54,170 --> 00:01:54,830
In other words,

38
00:01:54,830 --> 00:01:58,940
I might have an IAM policy that allows me access to Parameter Store.

39
00:01:58,940 --> 00:02:02,160
But if I don't have access via the key policy to the KMS

40
00:02:02,160 --> 00:02:06,680
key used to encrypt that parameter, I won't be able to decrypt it,

41
00:02:06,680 --> 00:02:09,650
and this is useful if perhaps you have a compliance requirement

42
00:02:09,650 --> 00:02:11,700
that dictates your secrets need to be encrypted,

43
00:02:11,700 --> 00:02:14,580
in addition to having restricted access.

44
00:02:14,580 --> 00:02:18,340
Now let's see Parameter Store in action.

45
00:02:18,340 --> 00:02:19,310
In this demo,

46
00:02:19,310 --> 00:02:22,240
we will store our connection string secret in the AWS

47
00:02:22,240 --> 00:02:24,480
Systems Manager Parameter Store.

48
00:02:24,480 --> 00:02:26,860
First, we'll store it as a String parameter,

49
00:02:26,860 --> 00:02:29,700
and then we'll use a KMS key to encrypt it and store

50
00:02:29,700 --> 00:02:32,090
it as a SecureString parameter.

51
00:02:32,090 --> 00:02:36,810
So I'll start by going to SSM, and here I'll choose Systems Manager,

52
00:02:36,810 --> 00:02:40,790
and under Application Management, I'll select Parameter Store.

53
00:02:40,790 --> 00:02:44,700
And to create my parameter, I'll click Create parameter.

54
00:02:44,700 --> 00:02:46,490
And this is a very simple interface here.

55
00:02:46,490 --> 00:02:48,620
So I enter a name for my parameter.

56
00:02:48,620 --> 00:02:51,740
And remember that these names are meant to be in a hierarchy,

57
00:02:51,740 --> 00:02:54,500
so like a URL or a folder structure.

58
00:02:54,500 --> 00:02:58,240
So, for instance, I might have a dev path and test and production paths,

59
00:02:58,240 --> 00:02:59,640
things like that.

60
00:02:59,640 --> 00:03:04,940
But for this example, I'll just enter /dev/dbconnectionstring.

61
00:03:04,940 --> 00:03:06,770
Now I could enter a description here, and you see,

62
00:03:06,770 --> 00:03:09,480
I have the choice between standard, which is the free tier,

63
00:03:09,480 --> 00:03:16,050
and advanced, so if I needed more than 10,000 parameters or up to 8 KB in size.

64
00:03:16,050 --> 00:03:17,810
But keep in mind, there is a cost for these,

65
00:03:17,810 --> 00:03:19,570
so I'm going to leave this as standard.

66
00:03:19,570 --> 00:03:22,610
For this example, I'm going to leave this as String.

67
00:03:22,610 --> 00:03:26,140
We'll see how SecureStrings work in just a second here.

68
00:03:26,140 --> 00:03:28,640
And I'll come down here for the value and paste in my

69
00:03:28,640 --> 00:03:31,440
connection string example from my code.

70
00:03:31,440 --> 00:03:33,990
I'll click Create parameter, and that's it.

71
00:03:33,990 --> 00:03:37,480
So here's my parameter, but let's go into the command line interface,

72
00:03:37,480 --> 00:03:41,940
or CLI, and see how we can retrieve this value.

73
00:03:41,940 --> 00:03:45,130
So I'm doing this from a PowerShell window with the CLI here.

74
00:03:45,130 --> 00:03:47,320
But you could perform similar operations with the

75
00:03:47,320 --> 00:03:51,510
AWS SDK in your Java code or .NET, Ruby,

76
00:03:51,510 --> 00:03:53,070
Go, Python, really,

77
00:03:53,070 --> 00:03:57,340
just about any language is supported to do this from your application.

78
00:03:57,340 --> 00:04:03,210
So the command line operation is aws ssm get‑parameter

79
00:04:03,210 --> 00:04:05,170
with the name of our parameter here.

80
00:04:05,170 --> 00:04:09,100
And now you see here's the type and the value and the version.

81
00:04:09,100 --> 00:04:12,310
So keep in mind, these parameters are versioned as well.

82
00:04:12,310 --> 00:04:15,370
So now, instead of hardcoding this value in my application,

83
00:04:15,370 --> 00:04:18,370
I've stored it in Parameter Store and can update and

84
00:04:18,370 --> 00:04:20,920
maintain it separately from my code.

85
00:04:20,920 --> 00:04:22,130
But it still isn't encrypted.

86
00:04:22,130 --> 00:04:25,680
So what if I had a requirement to encrypt all of my parameters?

87
00:04:25,680 --> 00:04:28,250
Well, that's what the SecureString parameter type is for.

88
00:04:28,250 --> 00:04:31,560
So let's hop back over to the console,

89
00:04:31,560 --> 00:04:35,310
and we will create a SecureString parameter to hold this value.

90
00:04:35,310 --> 00:04:37,380
Now you might think that you could just drill in here and click

91
00:04:37,380 --> 00:04:40,160
Edit and be able to change the parameter type.

92
00:04:40,160 --> 00:04:42,860
But as you can see, I'm not able to change it here.

93
00:04:42,860 --> 00:04:45,830
So we'll need to create a new parameter instead.

94
00:04:45,830 --> 00:04:49,140
So I'll come back here, and I'll click Create parameter again.

95
00:04:49,140 --> 00:04:53,550
And this time I'll call my parameter /dev/dbconnectionstringsecure,

96
00:04:53,550 --> 00:04:58,960
and this time I'll make it a SecureString parameter.

97
00:04:58,960 --> 00:04:59,900
So when I choose this,

98
00:04:59,900 --> 00:05:02,600
now you see it's prompting me to choose the source for the KMS

99
00:05:02,600 --> 00:05:05,510
key that will be used to encrypt this value.

100
00:05:05,510 --> 00:05:09,040
So I can choose my account or another account.

101
00:05:09,040 --> 00:05:12,110
But within my account here, you see the default AWS key for SSM.

102
00:05:12,110 --> 00:05:17,640
And if I click this, you'll also see the keys we created in the last module.

103
00:05:17,640 --> 00:05:20,660
So I'll just go ahead and choose mycmk and paste in my

104
00:05:20,660 --> 00:05:23,620
value here and click Create parameter.

105
00:05:23,620 --> 00:05:25,550
So here are both of my parameters now.

106
00:05:25,550 --> 00:05:28,190
And now I'll go back into the CLI,

107
00:05:28,190 --> 00:05:32,500
and this time I'll call ssm get‑parameter again and change

108
00:05:32,500 --> 00:05:34,590
the name to cbconnectionstringsecure.

109
00:05:34,590 --> 00:05:37,180
And you'll see the value here.

110
00:05:37,180 --> 00:05:39,600
But, wait, this isn't the value I entered.

111
00:05:39,600 --> 00:05:42,280
But that's because this value is encrypted.

112
00:05:42,280 --> 00:05:44,740
So how do I get the decrypted value?

113
00:05:44,740 --> 00:05:48,730
Well, assuming I have access to the KMS key that was used to encrypt the value,

114
00:05:48,730 --> 00:05:50,440
which in this case I do,

115
00:05:50,440 --> 00:05:55,320
I can call this same command but add a ‑‑with‑decryption switch here,

116
00:05:55,320 --> 00:05:58,440
and here you'll see the decrypted value.

117
00:05:58,440 --> 00:06:01,420
But you see how this can add a layer of security because not only did I

118
00:06:01,420 --> 00:06:04,840
need the IAM permissions to access Parameter Store,

119
00:06:04,840 --> 00:06:08,380
but in this case I also needed access to the KMS key in

120
00:06:08,380 --> 00:06:14,000
order to decrypt the string value. So that is Parameter Store.

