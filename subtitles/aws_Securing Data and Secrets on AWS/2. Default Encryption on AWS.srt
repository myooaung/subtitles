1
00:00:01,040 --> 00:00:03,700
So there's one simple thing you can do to increase the

2
00:00:03,700 --> 00:00:06,100
security of items stored in your S3 buckets,

3
00:00:06,100 --> 00:00:09,940
and that's to turn on default encryption for the bucket.

4
00:00:09,940 --> 00:00:11,400
And I'll show you in the upcoming demo,

5
00:00:11,400 --> 00:00:14,510
it's one little radio button to set the default encryption at

6
00:00:14,510 --> 00:00:17,820
rest for new items uploaded to the bucket,

7
00:00:17,820 --> 00:00:21,200
and you can enable or disable this at any time.

8
00:00:21,200 --> 00:00:25,090
Now it won't retroactively encrypt any data that's already in the bucket,

9
00:00:25,090 --> 00:00:27,760
but it will automatically encrypt anything you upload to the

10
00:00:27,760 --> 00:00:31,340
bucket from that point forward after you enable it.

11
00:00:31,340 --> 00:00:36,590
And you can do this default encryption with either an AWS S3 managed key,

12
00:00:36,590 --> 00:00:40,540
which is referred to as SSE for server‑side encryption,

13
00:00:40,540 --> 00:00:46,950
S3, or a key you manage yourself within the AWS Key Management Service,

14
00:00:46,950 --> 00:00:54,410
or SSE‑KMS, which we'll talk about later in this module.

15
00:00:54,410 --> 00:00:56,840
Beyond these two encryption options that you get with

16
00:00:56,840 --> 00:01:01,840
default encryption SSE‑S3 and SSE‑KMS,

17
00:01:01,840 --> 00:01:06,040
there are a couple of other ways you could encrypt data at rest in S3.

18
00:01:06,040 --> 00:01:11,530
One is to use server‑side encryption with customer‑provided keys or SSE‑C,

19
00:01:11,530 --> 00:01:15,330
and the other is client‑side encryption.

20
00:01:15,330 --> 00:01:19,830
And there's an important distinction here between SSE‑KMS and SSE‑C.

21
00:01:19,830 --> 00:01:25,350
With SSE‑C, you, the customer, are still managing the key yourself,

22
00:01:25,350 --> 00:01:28,340
but completely outside of AWS.

23
00:01:28,340 --> 00:01:32,970
So this is useful if you already have keys that you're using outside of AWS.

24
00:01:32,970 --> 00:01:35,580
Or maybe there are compliance requirements that prevent

25
00:01:35,580 --> 00:01:37,810
you from storing your keys in AWS.

26
00:01:37,810 --> 00:01:40,460
When you use SSE‑C,

27
00:01:40,460 --> 00:01:44,860
you have to provide your key in the request header every time you upload or

28
00:01:44,860 --> 00:01:49,830
download an object because that key isn't stored in AWS at all.

29
00:01:49,830 --> 00:01:56,090
But AWS still needs the key in order to encrypt or decrypt the data on its end.

30
00:01:56,090 --> 00:01:57,080
And this is important.

31
00:01:57,080 --> 00:02:00,490
Keep in mind that AWS is still doing the encryption and

32
00:02:00,490 --> 00:02:03,130
decryption operations with your key.

33
00:02:03,130 --> 00:02:06,040
It just isn't storing the key anywhere.

34
00:02:06,040 --> 00:02:07,740
With client‑side encryption,

35
00:02:07,740 --> 00:02:10,920
and you'll notice it doesn't have an SSE acronym because the

36
00:02:10,920 --> 00:02:13,490
encryption doesn't happen server side.

37
00:02:13,490 --> 00:02:14,460
Instead,

38
00:02:14,460 --> 00:02:17,520
you manage your own keys and encrypt the data

39
00:02:17,520 --> 00:02:20,840
yourself before you upload it into S3.

40
00:02:20,840 --> 00:02:21,540
Similarly,

41
00:02:21,540 --> 00:02:24,080
this means that you also decrypt the data yourself

42
00:02:24,080 --> 00:02:26,390
after you download it from S3.

43
00:02:26,390 --> 00:02:31,200
With client‑side encryption, AWS never knows anything about the key

44
00:02:31,200 --> 00:02:34,800
or the encryption algorithm you choose because you are performing

45
00:02:34,800 --> 00:02:37,540
your own encryption and decryption.

46
00:02:37,540 --> 00:02:40,800
So there may be some instances where security policy dictates

47
00:02:40,800 --> 00:02:47,000
that you do client‑side encryption so that AWS can't see your key at all or something like that.

