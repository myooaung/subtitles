WEBVTT
1
00:00:00.940 --> 00:00:01.350
Hi,

2
00:00:01.350 --> 00:00:03.800
my name is Danny Jessee, and I would like to welcome you to

3
00:00:03.800 --> 00:00:08.640
this module, Secure Parameter Storage using AWS. Let's talk a

4
00:00:08.640 --> 00:00:11.410
little more about parameters.

5
00:00:11.410 --> 00:00:12.620
If you're a developer,

6
00:00:12.620 --> 00:00:15.000
the concept of accessing data from your application's

7
00:00:15.000 --> 00:00:17.540
code should be very familiar to you.

8
00:00:17.540 --> 00:00:20.870
Applications often use variables to maintain parameters in the

9
00:00:20.870 --> 00:00:24.660
form of key‑value pairs, such as API keys,

10
00:00:24.660 --> 00:00:27.750
database connection strings, credentials, or other

11
00:00:27.750 --> 00:00:30.840
application‑specific configuration data.

12
00:00:30.840 --> 00:00:34.580
And it should go without saying that it's never a good idea to store these

13
00:00:34.580 --> 00:00:38.140
kinds of secrets directly in your application's source code.

14
00:00:38.140 --> 00:00:41.230
After all, they're called secrets for a reason.

15
00:00:41.230 --> 00:00:44.120
You probably don't want anyone who happens to get their hands on your

16
00:00:44.120 --> 00:00:47.330
source code to also know your database password,

17
00:00:47.330 --> 00:00:50.510
and in some cases, you as the application developer may not

18
00:00:50.510 --> 00:00:52.860
even be allowed to know these secrets either.

19
00:00:52.860 --> 00:00:56.140
And if any of these secret values happen to change down the road,

20
00:00:56.140 --> 00:00:58.550
you don't want to have to recompile and redeploy your

21
00:00:58.550 --> 00:01:01.210
application just to reflect this change.

22
00:01:01.210 --> 00:01:03.670
Now you're probably already familiar with the concept of a

23
00:01:03.670 --> 00:01:06.700
configuration file where parameters can be stored

24
00:01:06.700 --> 00:01:08.900
separately from your source code.

25
00:01:08.900 --> 00:01:12.410
And configuration files are a great first step when keeping secrets

26
00:01:12.410 --> 00:01:15.430
outside of your code, but wouldn't it be nice to leverage

27
00:01:15.430 --> 00:01:18.450
cloud‑based managed services to ensure we are applying best

28
00:01:18.450 --> 00:01:21.210
practices for secure parameter storage?

29
00:01:21.210 --> 00:01:26.550
AWS provides two such services that we will discuss in this module, the AWS

30
00:01:26.550 --> 00:01:31.040
Systems Manager Parameter Store and the AWS Secrets Manager.

31
00:01:31.040 --> 00:01:31.810
In this module,

32
00:01:31.810 --> 00:01:35.090
we will leverage both of these services to store and retrieve a simple

33
00:01:35.090 --> 00:01:39.690
application secret, a database connection string.

34
00:01:39.690 --> 00:01:42.230
Now here's what a connection string might look like if you were

35
00:01:42.230 --> 00:01:44.920
to directly hard code it in your application,

36
00:01:44.920 --> 00:01:48.290
which we've already said is a terrible security practice.

37
00:01:48.290 --> 00:01:50.960
What we want to do instead is store the secret outside of

38
00:01:50.960 --> 00:01:53.730
our code in one of these AWS services,

39
00:01:53.730 --> 00:01:58.150
so either in Parameter Store or Secrets Manager and instead call that

40
00:01:58.150 --> 00:02:01.490
service from our code to get our parameter's value.

41
00:02:01.490 --> 00:02:11.000
So let's get started by discussing the AWS Systems Manager Parameter Store and how we can use it to securely store and retrieve this secret.

