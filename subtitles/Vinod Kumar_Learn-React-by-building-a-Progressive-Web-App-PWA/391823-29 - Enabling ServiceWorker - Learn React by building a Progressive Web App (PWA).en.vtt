WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:04.490 --> 00:00:06.390
Welcome back.

00:00:06.390 --> 00:00:12.330
In this lecture, Let's have a look at our service worker JS and enable the same thing.

00:00:12.330 --> 00:00:15.855
So our offline caching is taken care off.

00:00:15.855 --> 00:00:19.380
A Service Worker is basically a JavaScript file that runs in

00:00:19.380 --> 00:00:23.580
background and assist in offline first web application development.

00:00:23.580 --> 00:00:27.779
A service worker cannot directly interact with the webpage,

00:00:27.779 --> 00:00:32.550
nor it can directly access the DOM as it runs on a different thread,

00:00:32.550 --> 00:00:36.105
but can communicate with the webpages through something called messages.

00:00:36.105 --> 00:00:38.790
One of the key point you have to keep in mind is that

00:00:38.790 --> 00:00:42.770
the service workers been designed to be fully asynchronous.

00:00:42.770 --> 00:00:44.480
As a result of this,

00:00:44.480 --> 00:00:46.640
if you are trying to use synchronous XML,

00:00:46.640 --> 00:00:49.175
HTTP request, or local storage,

00:00:49.175 --> 00:00:52.070
they can't be used inside a service worker script.

00:00:52.070 --> 00:00:54.635
But since it is working on a different thread,

00:00:54.635 --> 00:00:56.945
it doesn't block your application anyways,

00:00:56.945 --> 00:00:59.360
salaries workers are terminated when they

00:00:59.360 --> 00:01:02.015
are not in use and the restaurant when they are required.

00:01:02.015 --> 00:01:04.700
And it acts as a programmable network proxy,

00:01:04.700 --> 00:01:09.530
allowing developers to handle how network requests from webpage is handled.

00:01:09.530 --> 00:01:14.825
So the developers can take appropriate action based on the availability of the network.

00:01:14.825 --> 00:01:18.920
One other great feature about service workers are that they are designed to

00:01:18.920 --> 00:01:23.119
handle network requests and assist in offline first development.

00:01:23.119 --> 00:01:25.445
So to register a service worker,

00:01:25.445 --> 00:01:28.130
we first have to check if the browser supports it,

00:01:28.130 --> 00:01:30.455
and then we have to register.

00:01:30.455 --> 00:01:33.800
Now if you look at the Service Worker dot JS that we have here,

00:01:33.800 --> 00:01:39.035
the function register with an optional config object over here,

00:01:39.035 --> 00:01:40.610
each trying to do the same thing.

00:01:40.610 --> 00:01:43.880
And one of the thing that you can see here is that there is

00:01:43.880 --> 00:01:47.060
a function called check valid service worker.

00:01:47.060 --> 00:01:51.065
And that function is defined right below that somewhere here you can see.

00:01:51.065 --> 00:01:53.600
And all it's doing is it's checking whether

00:01:53.600 --> 00:01:57.185
your browser supports this particular service worker or not.

00:01:57.185 --> 00:02:01.760
And the service worker registration lifecycle contains three steps.

00:02:01.760 --> 00:02:04.114
Download, install, and activate.

00:02:04.114 --> 00:02:08.120
A Service Worker is downloaded when a user accesses

00:02:08.120 --> 00:02:13.505
the webpage and installation is done if the file is found to be new.

00:02:13.505 --> 00:02:16.865
Now that means that this entire registration happens only one time.

00:02:16.865 --> 00:02:20.120
After that, it is immediately activated.

00:02:20.120 --> 00:02:22.610
So to make use of these areas, worker dot js,

00:02:22.610 --> 00:02:26.360
we don't have to do a single piece of change over here.

00:02:26.360 --> 00:02:30.095
All I have to do is to go to the index.js and then

00:02:30.095 --> 00:02:34.055
change this function from unregistered to register.

00:02:34.055 --> 00:02:35.285
Save this.

00:02:35.285 --> 00:02:37.070
Now we are good to go.

00:02:37.070 --> 00:02:40.235
Of course, according to the React JS documentation,

00:02:40.235 --> 00:02:44.990
this particular service worker has some pitfalls which you can improvise.

00:02:44.990 --> 00:02:46.310
So there are many,

00:02:46.310 --> 00:02:50.735
many articles and tutorials as how you can create your own service workers.

00:02:50.735 --> 00:02:53.165
But for the sake of demonstration,

00:02:53.165 --> 00:02:55.580
disservice worker definitely works.

00:02:55.580 --> 00:02:57.305
So that's all for this lecture.

00:02:57.305 --> 00:02:58.520
In the next lecture,

00:02:58.520 --> 00:03:03.960
let's redeploy and re-evaluate our application agonists, PWA.
