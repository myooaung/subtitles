WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.980
Welcome back in this lecture.

00:00:06.980 --> 00:00:14.250
Let's try to get the movies from the Net using oil mdb ap a dot com as well as a jacks.

00:00:14.250 --> 00:00:15.110
For this,

00:00:15.110 --> 00:00:18.480
we want to use 1/3 party AP called Axios.

00:00:18.480 --> 00:00:24.650
You can use J Query or the building jobs could fetch a P A if you want,

00:00:24.650 --> 00:00:27.280
but Axios is much simpler to use,

00:00:27.280 --> 00:00:29.450
so let's go and see how to use the same thing.

00:00:29.450 --> 00:00:32.250
So I'm gonna go back toe my command,

00:00:32.250 --> 00:00:37.260
prompt and good and your tab Andi in the new tab,

00:00:37.260 --> 00:00:40.010
make sure that I'm in the right working directory,

00:00:40.010 --> 00:00:42.350
which is my the abdomen desktop,

00:00:42.350 --> 00:00:45.720
how to type NPM I for install.

00:00:45.720 --> 00:00:48.100
And then they acsi us on.

00:00:48.100 --> 00:00:55.580
This is gonna take a minute or less on installs Axios dependency for our project that

00:00:55.580 --> 00:00:58.050
updates the package dot Jason as well.

00:00:58.050 --> 00:01:04.510
You can ignore these adults because at the end off it it's going toe install in some

00:01:04.510 --> 00:01:13.650
different means and you can see that Axios $0.19 to Washington has been added to my project

00:01:13.650 --> 00:01:13.650
.

00:01:13.650 --> 00:01:15.230
I can just come back here,

00:01:15.230 --> 00:01:20.960
look at the packaged or Jason and you can see that it has added the Axios AP a tow my

00:01:20.960 --> 00:01:22.740
project dependency list as well.

00:01:22.740 --> 00:01:27.560
Let's come back to our movie list on this is where I have the movie list.

00:01:27.560 --> 00:01:29.470
I don't want this away anymore,

00:01:29.470 --> 00:01:32.850
So I'm gonna go removed this from here to the end.

00:01:32.850 --> 00:01:36.810
Onda put an empty bracket because that's what we want right now.

00:01:36.810 --> 00:01:38.680
So we just have an empty array.

00:01:38.680 --> 00:01:39.810
So if I say what,

00:01:39.810 --> 00:01:43.300
you can see that the movie list is gone because we don't have any movies.

00:01:43.300 --> 00:01:46.470
But we want to get the movies from the Internet.

00:01:46.470 --> 00:01:51.250
So this is where I'm generate a function called fetch movies.

00:01:51.250 --> 00:01:52.600
You gonna name it?

00:01:52.600 --> 00:01:59.030
Anything you want equals two and then you can write an arrow function like this.

00:01:59.030 --> 00:02:04.270
So let's assume that the search keyword that we have year let's call it a search text

00:02:04.270 --> 00:02:05.620
equals toe.

00:02:05.620 --> 00:02:07.350
Let a instill off island man.

00:02:07.350 --> 00:02:09.050
I'm gonna type Spider Man.

00:02:09.050 --> 00:02:11.290
This is the search takes for the timing.

00:02:11.290 --> 00:02:12.290
I'm hard coding it,

00:02:12.290 --> 00:02:17.650
but eventually we want to be ableto typing over here and get the details from that.

00:02:17.650 --> 00:02:18.530
So,

00:02:18.530 --> 00:02:19.320
for the time being,

00:02:19.320 --> 00:02:20.960
let's keep it us hard.

00:02:20.960 --> 00:02:21.480
Good value.

00:02:21.480 --> 00:02:21.850
Here.

00:02:21.850 --> 00:02:30.380
I'm gonna type your ax es which is supposed to be imported from the Axios model dot Get,

00:02:30.380 --> 00:02:34.400
You can see that there is a bunch of functions like get post put delete,

00:02:34.400 --> 00:02:34.980
etcetera.

00:02:34.980 --> 00:02:37.680
Based on http request methods,

00:02:37.680 --> 00:02:38.850
you can call one of them,

00:02:38.850 --> 00:02:41.050
so I want to make it get request this time.

00:02:41.050 --> 00:02:42.150
Andi,

00:02:42.150 --> 00:02:45.340
your model here is supposed to be for him to be a p a.

00:02:45.340 --> 00:02:46.700
That come along with my 80.

00:02:46.700 --> 00:02:47.160
A key.

00:02:47.160 --> 00:02:49.790
I need to search for this particular text.

00:02:49.790 --> 00:02:54.980
So I'm going to use the year six templates sitting over here by using a backcourt.

00:02:54.980 --> 00:02:57.630
Not that it is not a single guarded his backcourt.

00:02:57.630 --> 00:03:01.650
It is the key below the escape key on your keypad.

00:03:01.650 --> 00:03:03.550
It is the same thing as the tilde,

00:03:03.550 --> 00:03:04.950
but without shift.

00:03:04.950 --> 00:03:06.650
I hear that I want to type.

00:03:06.650 --> 00:03:07.580
Http.

00:03:07.580 --> 00:03:18.120
Colon double slash www Oh mdb ap a dot com slash And then you type here cushion mark a p a

00:03:18.120 --> 00:03:21.720
ki equals to one of the a p a key that I have.

00:03:21.720 --> 00:03:24.350
So I'm gonna copy that A p queue from here.

00:03:24.350 --> 00:03:25.620
In fact,

00:03:25.620 --> 00:03:32.150
I can copy the whole string from here and replace this end of stuff.

00:03:32.150 --> 00:03:37.210
And the only thing that I have to change is that s equals two instead of Iron Man,

00:03:37.210 --> 00:03:39.210
I want this search text,

00:03:39.210 --> 00:03:42.830
so I'm gonna type your dollar search text.

00:03:42.830 --> 00:03:44.250
That's the variable that I have.

00:03:44.250 --> 00:03:50.110
So there's the advantage of using the template setting where we can m Byrd value from

00:03:50.110 --> 00:03:53.740
another variable and build a new string here.

00:03:53.740 --> 00:03:54.090
Right,

00:03:54.090 --> 00:03:59.240
So now that we got this Axios don't get the Britons that promise.

00:03:59.240 --> 00:04:01.230
But when the promises result,

00:04:01.230 --> 00:04:04.080
we get the actual response.

00:04:04.080 --> 00:04:05.750
So let's see,

00:04:05.750 --> 00:04:06.980
we get the response.

00:04:06.980 --> 00:04:07.960
But for the timing,

00:04:07.960 --> 00:04:09.610
I just want to do a console log.

00:04:09.610 --> 00:04:13.470
I'm gonna do a console log off rest now,

00:04:13.470 --> 00:04:16.890
in case if you want toe just to display using a console,

00:04:16.890 --> 00:04:18.940
log off whatever that you received,

00:04:18.940 --> 00:04:24.610
you can simply type your console dot log because this is nothing but a function that

00:04:24.610 --> 00:04:27.220
receives a perimeter and printed on the screen.

00:04:27.220 --> 00:04:31.550
So I'm gonna put a semicolon notice that dysfunction is never called.

00:04:31.550 --> 00:04:34.150
So we need to call this at some point in time.

00:04:34.150 --> 00:04:35.390
So for the time being,

00:04:35.390 --> 00:04:40.110
I'm gonna go to the render function here and then call this dot fetch movies.

00:04:40.110 --> 00:04:44.110
So any member you should always refer to that using this.

00:04:44.110 --> 00:04:45.390
So I'm gonna say this.

00:04:45.390 --> 00:04:46.660
Go back to the browser,

00:04:46.660 --> 00:04:47.920
go to my application.

00:04:47.920 --> 00:04:49.530
I don't see anything over here.

00:04:49.530 --> 00:04:51.150
But if I go to the developer,

00:04:51.150 --> 00:04:57.200
console our JavaScript console by going to view developer JavaScript consumed.

00:04:57.200 --> 00:05:01.150
You should now see that there is a object being displayed.

00:05:01.150 --> 00:05:03.510
The object is the result off console log.

00:05:03.510 --> 00:05:06.480
And it has a member called data.

00:05:06.480 --> 00:05:07.180
Not.

00:05:07.180 --> 00:05:10.030
This is the standard convention Axios follows.

00:05:10.030 --> 00:05:13.150
Whatever the response body is there that's coming as data.

00:05:13.150 --> 00:05:15.780
And then there is a status to understate its text.

00:05:15.780 --> 00:05:16.280
Okay,

00:05:16.280 --> 00:05:17.960
if I expand this data,

00:05:17.960 --> 00:05:22.870
you'll see that there is a search which is an array off 10 movies over here.

00:05:22.870 --> 00:05:28.640
And it also says that there is a total result off 197 movies with the Spider Man as the

00:05:28.640 --> 00:05:29.080
title.

00:05:29.080 --> 00:05:30.950
So we are interested in this data.

00:05:30.950 --> 00:05:35.550
So now we can say that whenever you get the response,

00:05:35.550 --> 00:05:39.300
you give me the response dot data,

00:05:39.300 --> 00:05:41.880
so that's gonna be my return value from here.

00:05:41.880 --> 00:05:46.510
And this being a promise I can again say here dot Then now,

00:05:46.510 --> 00:05:47.550
when I get the data,

00:05:47.550 --> 00:05:52.160
I'm more interested in the data dot search and that's gonna be my movies.

00:05:52.160 --> 00:05:55.080
I can say here data dot search.

00:05:55.080 --> 00:05:58.450
So now that the data dot search represents an R e,

00:05:58.450 --> 00:06:02.590
I can say dot Then I will call it as movies,

00:06:02.590 --> 00:06:06.380
and now I have to take that movies and pass it on toe.

00:06:06.380 --> 00:06:09.900
The state Onda state is immutable.

00:06:09.900 --> 00:06:11.680
So which means you can't simply say this.

00:06:11.680 --> 00:06:14.820
Start ST dot movies equals toe movies.

00:06:14.820 --> 00:06:15.890
This is wrong.

00:06:15.890 --> 00:06:17.930
If you assign a value toe,

00:06:17.930 --> 00:06:20.750
this movie's its value gets changed.

00:06:20.750 --> 00:06:24.080
But the render function is never in ward again,

00:06:24.080 --> 00:06:26.790
so it's only the state being changed inside.

00:06:26.790 --> 00:06:28.890
Object inside your component,

00:06:28.890 --> 00:06:31.910
but it doesnt reflect on the browser.

00:06:31.910 --> 00:06:37.830
So if you want this render function to be involved again because there is a change in the

00:06:37.830 --> 00:06:38.450
data,

00:06:38.450 --> 00:06:39.690
what do you have to do?

00:06:39.690 --> 00:06:40.610
Is tow you,

00:06:40.610 --> 00:06:41.050
say,

00:06:41.050 --> 00:06:42.850
distort set state?

00:06:42.850 --> 00:06:45.250
And then you say that Hey,

00:06:45.250 --> 00:06:47.810
there is a state called Movies,

00:06:47.810 --> 00:06:48.750
So that's what we want.

00:06:48.750 --> 00:06:54.410
Toe design So you can see movies colon movies because we are receiving movies over here on

00:06:54.410 --> 00:06:55.120
movies.

00:06:55.120 --> 00:06:57.380
Colon movies can be sharp formed in tow,

00:06:57.380 --> 00:06:58.250
just movies.

00:06:58.250 --> 00:07:01.190
So this dark said state off movies Now,

00:07:01.190 --> 00:07:03.150
because we're calling a function.

00:07:03.150 --> 00:07:04.040
Not only that,

00:07:04.040 --> 00:07:05.700
it assigns a value to this,

00:07:05.700 --> 00:07:09.910
but it is also going to call the rendered function again and notice that in the render

00:07:09.910 --> 00:07:13.610
function we are actually making use of the movies.

00:07:13.610 --> 00:07:16.920
And then we're constructing an array off movie cards on.

00:07:16.920 --> 00:07:20.890
That is the reason why you have to call the set state and not assign it directly.

00:07:20.890 --> 00:07:24.650
There is one big problem in this particular chord.

00:07:24.650 --> 00:07:25.480
As off now.

00:07:25.480 --> 00:07:30.970
Notice that when the render function is called for the first time we're calling the fetch

00:07:30.970 --> 00:07:31.610
movies.

00:07:31.610 --> 00:07:35.890
The fetch movies is going to make it off this access to get the data.

00:07:35.890 --> 00:07:37.540
When the movies is available,

00:07:37.540 --> 00:07:39.990
it's going to change the such state on the set.

00:07:39.990 --> 00:07:41.470
State will involve this.

00:07:41.470 --> 00:07:43.240
Render again on that.

00:07:43.240 --> 00:07:46.150
This goes on forever and you will have a problems.

00:07:46.150 --> 00:07:48.550
So because this leads to recur Shin,

00:07:48.550 --> 00:07:50.540
let's not give this over here.

00:07:50.540 --> 00:07:54.630
But instead let's go and add another life cycle function,

00:07:54.630 --> 00:07:57.880
which is called Component did mount.

00:07:57.880 --> 00:08:01.030
So component did mount is a lifecycle function,

00:08:01.030 --> 00:08:06.750
which is called exactly once for the component when it is initially rendered.

00:08:06.750 --> 00:08:10.450
So here is where we say this start fetch movies.

00:08:10.450 --> 00:08:16.410
So first time complimented Mount is going toward the fetch movies.

00:08:16.410 --> 00:08:17.200
A fetch.

00:08:17.200 --> 00:08:21.540
Morris is going to get the data from the Internet once the movie list is available,

00:08:21.540 --> 00:08:26.850
then the render is going to be called because there is a change in the state on that

00:08:26.850 --> 00:08:29.060
actually makes her the latest state,

00:08:29.060 --> 00:08:34.090
which consists off all the movies from the actual state object or here.

00:08:34.090 --> 00:08:35.750
So let's say this.

00:08:35.750 --> 00:08:38.650
Go back to the browser and see what's going on day on.

00:08:38.650 --> 00:08:38.950
Lt.

00:08:38.950 --> 00:08:41.910
Now that it has made a request on the Internet,

00:08:41.910 --> 00:08:46.550
you can also go and check the network time here and you can see in the network tab under

00:08:46.550 --> 00:08:47.350
Exeter.

00:08:47.350 --> 00:08:51.350
There is one request that brings up Spiderman movies.

00:08:51.350 --> 00:08:55.760
Let's go and change the search string from Spiderman Toe.

00:08:55.760 --> 00:08:56.730
Let it par,

00:08:56.730 --> 00:09:02.270
save it and go back and you should not see all the movies related to the key.

00:09:02.270 --> 00:09:04.750
Words are are being displayed over here.

00:09:04.750 --> 00:09:06.330
So that's it for this lecture.

00:09:06.330 --> 00:09:07.680
In the next lecture,

00:09:07.680 --> 00:09:10.500
let's see what is routing all about

