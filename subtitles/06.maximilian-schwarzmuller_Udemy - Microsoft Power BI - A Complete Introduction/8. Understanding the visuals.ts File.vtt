WEBVTT

00:02.960 --> 00:08.750
In the last lecture, we installed Visual Studio Code, let's now understand this Typescript code and understand

00:09.290 --> 00:15.890
how it is rendering this visual we're seeing here. Now you don't need to be a Typescript expert

00:15.980 --> 00:20.790
but some programming knowledge of course helps as it does for this whole section.

00:21.110 --> 00:26.420
What we do have here as we bundle all our code into a module and that's not that important, it just

00:26.430 --> 00:29.120
bundles it into one logical unit,

00:29.120 --> 00:32.080
then we export a class and we may ignore the export

00:32.090 --> 00:40.430
but a class is a certain programming construct which again kind of bundles a couple of functionalities

00:40.430 --> 00:41.880
into one object

00:42.050 --> 00:47.480
and if this is all brand new to you, I strongly recommend picking up some basic programming course first

00:47.780 --> 00:52.090
because without any programming knowledge, this is going to be hard.

00:52.100 --> 00:54.400
So what do we have here?

00:54.410 --> 00:56.980
This class implements an interface,

00:57.020 --> 01:04.550
IVisual and an interface is just a contract which forces this class to have a certain method

01:04.550 --> 01:08.380
for example, in this case, to have an update method.

01:08.630 --> 01:14.060
If I were to remove this method, it would fail, it would get an error, we would get this error here

01:14.060 --> 01:16.500
in the command prompt where our server runs

01:16.700 --> 01:21.950
and as a side note, keep this running, don't access this process, it will automatically recompile your

01:21.950 --> 01:25.130
code whenever you change something and ship a new version

01:25.120 --> 01:28.220
of our visual to the Power BI service.

01:28.700 --> 01:34.280
So this is where we would get an error and that is what the contract forces us to do, include this update

01:34.280 --> 01:35.000
method.

01:35.190 --> 01:37.040
Why do we need this contract?

01:37.430 --> 01:44.330
Well keep in mind that here in Power BI and that is also true if we later run it in Power BI Desktop

01:44.330 --> 01:51.680
which of course also works then, that there, if we resize the visual for example, we need to be able to

01:51.770 --> 01:56.630
call some method which changes, which updates our visual

01:56.930 --> 02:03.290
and if we were free to choose any name we want, how would Power BI service know which method to call?

02:03.710 --> 02:04.670
It wouldn't know it,

02:04.670 --> 02:05.490
right?

02:05.540 --> 02:12.770
So we have this contract which ensures that when Power BI service or Power BI Desktop calls an update

02:12.770 --> 02:16.180
method in our own visual, that this method exists

02:16.280 --> 02:18.020
and this is what IVisual does,

02:18.020 --> 02:25.370
it forces us to have an update method because it is in this update method that our logic lives, where

02:25.370 --> 02:31.850
we actually display the visual we could say. We do create the visual in the constructor which is a method

02:31.850 --> 02:35.910
which is called once this visual is created for the first time

02:36.020 --> 02:44.180
but all we do there beside some logging is we get access to the visual, so to the root element, to this

02:44.180 --> 02:51.470
wrapping container where the visual sits in. We do this with this options element property call here, options is

02:51.470 --> 02:52.610
simply an object

02:52.710 --> 02:58.890
Power BI passes to this constructor automatically. So with that, we know where to create a

02:58.970 --> 03:05.660
visual, we have a place where to render it, we have this wrapping HTML element so to say. Then we initialize

03:05.660 --> 03:11.680
our updated counter, we set it to 0 initially, both target and update count are properties

03:11.720 --> 03:18.920
so data fields of that class, that's a Typescript feature and most object or all object oriented programming

03:18.920 --> 03:20.460
language have that feature

03:20.900 --> 03:26.690
and then the update method is called right after the visual was created and on every update, so whenever

03:26.690 --> 03:34.340
we resize it and so on and there, all we do is we output the update count.

03:34.460 --> 03:37.130
We do this by getting access to this target,

03:37.160 --> 03:44.410
this wrapping element, this wrapping HTML element, calling the innerHTML property which is a property

03:44.420 --> 03:46.580
all HTML elements have

03:46.880 --> 03:49.250
and then we set this equal to a paragraph

03:49.250 --> 03:56.060
basically, that is a string but that is HTML markup in that string where we also, have wrapped in this

03:56.150 --> 03:59.800
emphasis HTML tag, our update count.

03:59.990 --> 04:03.580
And this strange syntax is a feature supported by Typescript,

04:03.620 --> 04:07.090
notice that we use back ticks here and not single quotation marks,

04:07.160 --> 04:13.310
that creates a string where we can actually put dynamic variables or where we can put variables inside

04:13.340 --> 04:18.770
of it with this ${} syntax you see here and then we can output them right in the

04:18.770 --> 04:23.040
string without having to concatenate it with pluses and so on.

04:23.240 --> 04:25.750
That is what happens and that is what we see here

04:25.910 --> 04:32.720
and therefore if we were to change something here, let's say start at 10 for example and hit save,

04:32.930 --> 04:37.910
it will recompile this here in our command prompt which is why you see a new line here,

04:38.000 --> 04:46.310
change detected and then if we go to our visual and we click reload visual code, you see we at 10

04:46.460 --> 04:48.760
just because of that change.

04:48.800 --> 04:50.350
So that's what's happening here,

04:50.360 --> 04:53.970
now let's have a look at all the other files and folders which were created for us.
