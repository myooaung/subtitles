WEBVTT

00:02.680 --> 00:09.080
We want to add some information to an existing query and we are not sure how to do that by now,

00:09.550 --> 00:11.560
let's find a way to solve the problem.

00:12.880 --> 00:19.190
So this is the problem we have, we have two queries, that codes-country-region query and our Regions-FullNamess

00:19.190 --> 00:26.460
and this region name should become part of that query as an additional column

00:26.950 --> 00:30.690
and we know that we have something that both queries have in common,

00:31.560 --> 00:35.820
so we see that Region-Code right here and that Region-Code right there,

00:35.820 --> 00:39.260
so there should be kind of a way on how to connect those two queries.

00:39.330 --> 00:45.600
The good answer is there is of course a way and the way can be found in the home ribbon, in the combine

00:45.600 --> 00:52.910
area and here I already talked about the append queries, so that we basically add the queries next to each other,

00:52.950 --> 01:01.450
so we add rows to say it simple and then we can also find that merge queries command and merge queries,

01:01.500 --> 01:08.010
that's kind of the same thing like append queries with the difference that we can add columns with the

01:08.070 --> 01:09.420
merge queries function

01:09.420 --> 01:11.220
and that's what we want to do right here, right?

01:11.220 --> 01:14.260
We want to add that for region name column,

01:14.260 --> 01:15.790
now let's have a look.

01:16.110 --> 01:19.170
If we click on to that arrow, we see that we have two options again,

01:19.320 --> 01:22.950
we have merge queries and merge queries as new.

01:23.040 --> 01:24.730
Now you learned already what that means,

01:25.050 --> 01:31.530
if we want to merge the queries in a totally new query, then we use the second option. If we want to merge

01:31.530 --> 01:35.400
queries to an existing query, then we use the first option,

01:35.400 --> 01:39.090
so in our case we should use the first option.

01:39.320 --> 01:45.290
But before we do that, we should take a closer look on how we can merge the queries and what things we

01:45.290 --> 01:46.760
have to be aware of,

01:46.790 --> 01:49.200
let's take a look. Now

01:49.220 --> 01:55.370
if you look at the title of this upcoming illustration, you'll see two things, you'll see merge queries

01:55.490 --> 01:57.100
and this is what we want to do

01:57.410 --> 02:03.260
and you'll see that join kind. This join kind is quite important because this join kind defines

02:03.500 --> 02:09.200
how the queries are merged and this can make a big difference as we learn right now.

02:09.770 --> 02:12.910
Now the starting point are two separate queries,

02:12.920 --> 02:14.900
we have Query 1, the left query,

02:14.960 --> 02:18.340
important to note that and the right query, Query 2.

02:18.630 --> 02:22.170
Now if you look at those queries, you'll see that they have something in common,

02:22.190 --> 02:25.470
this is this ID column and that's an important note.

02:25.700 --> 02:32.870
You can only merge queries if you have a column which is named equal and which contains values that

02:32.900 --> 02:39.110
allow Power BI to identify the things those two queries have in common.

02:39.110 --> 02:44.510
So you cannot merge sales and region by just selecting sales and region as a merge column,

02:44.510 --> 02:46.500
so this has to be done with ID.

02:46.850 --> 02:52.010
So if I talk about the selected column throughout the next minutes, I'll just talk about that ID because that's

02:52.010 --> 02:55.070
the column that will do the merge for us.

02:55.070 --> 03:01.220
An important note however, if you look at this ID column, you'll see that there is a difference. In the left query,

03:01.460 --> 03:05.760
we have ABC, in the right query, we have ABBC,

03:05.990 --> 03:11.410
so there was one role which is not kind of equal. Let's see how we can work with that

03:11.420 --> 03:16.600
but before we do that, let's take a look at the second column, so the sales and the region because that's

03:16.610 --> 03:22.130
the reason why we want to merge that queries because we want to see where the sales, so in which region

03:22.270 --> 03:24.050
the sales were generated.

03:24.050 --> 03:28.570
Having said that, let's see how we can merge the queries. Now to do that,

03:28.640 --> 03:32.590
we have different join kinds and that's why we have to talk about that right now.

03:32.810 --> 03:39.140
So the first join kind is an outer join and the outer join has different options,

03:39.140 --> 03:46.360
one option is the left outer join. If you do such a left outer join, you find the following result.

03:46.400 --> 03:48.390
So why can we find that result?

03:48.590 --> 03:54.380
Well that's pretty easy actually. As it's called left outer join, Power BI simply start taking a

03:54.380 --> 03:59.150
look at the ID column, the selected column you remember in the left query,

03:59.240 --> 04:03.670
this will later be the top query in Power BI but we'll see that in a few minutes.

04:03.830 --> 04:11.930
However Power BI now goes through that ID row by row and sees what it can find in the table that we want

04:11.930 --> 04:12.540
to merge,

04:12.680 --> 04:19.070
so in our case it goes to the ID, finds the ID, find the sales and find the region, USA because it can

04:19.070 --> 04:21.770
find the ID in both queries.

04:21.850 --> 04:28.910
Now if it goes on to B, then it finds B in the first query with the 50 but B cannot be found in the second

04:28.910 --> 04:29.660
query,

04:29.690 --> 04:32.010
that's why we have that and A right here.

04:32.360 --> 04:34.520
And then we go on with the third row,

04:34.520 --> 04:35.520
this is C

04:35.780 --> 04:37.640
and we can find that in both queries again

04:37.730 --> 04:39.740
and that's why we see that table.

04:39.800 --> 04:42.090
So that's left outer query,

04:42.270 --> 04:43.720
no that's the left outer join,

04:43.740 --> 04:45.140
sorry for that.

04:45.140 --> 04:47.160
Let's now take a look at another option

04:47.330 --> 04:51.350
and as you might imagine, we also have a right outer join.

04:51.470 --> 04:55.230
Now this works the other way round, this time the right query

04:55.300 --> 05:02.000
is the starting point and again, Power BI goes now through the ID column but of the right query and finds

05:02.060 --> 05:08.180
A, though for the region USA and find sales of 10 in the corresponding row with the corresponding ID

05:08.450 --> 05:16.000
in the left query. It then goes on to the second row, here it finds BB, BB we have the region Europe,

05:16.020 --> 05:19.940
this is fine but BB cannot be found in the left query,

05:19.950 --> 05:26.100
that's why we have an A right here now. And for the ID C, this is clear again because we have that ID

05:26.250 --> 05:29.540
in both the right query and the left query.

05:29.910 --> 05:33.070
So that was the second outer join, we have a left,

05:33.090 --> 05:34.210
we have a right,

05:34.410 --> 05:36.990
we also have a full outer join

05:37.080 --> 05:41.760
and as you can imagine, the full outer join simply combines what we just did with the left and right

05:41.760 --> 05:47.060
join because we now start in the ID column in the first query,

05:47.250 --> 05:53.770
so ABC and we know the result from the left outer join but now we also do a right outer join

05:54.120 --> 05:59.590
and because of that, as a result we get all the IDs in one table.

05:59.760 --> 06:01.400
Of course with the corresponding errors,

06:01.560 --> 06:07.280
so we don't have data for ID B and the region and for ID BB for the sales.

06:07.410 --> 06:08.910
Now that's the first join kind,

06:08.910 --> 06:10.220
the outer join,

06:10.530 --> 06:14.650
let's take a look at another join kind, the anti-join.

06:14.850 --> 06:17.190
We have the anti-join again in two ways,

06:17.190 --> 06:20.740
we have a left anti-join which looks something like this

06:20.820 --> 06:27.690
and if you think back about the left outer join, you might see that the difference to the outer join

06:28.020 --> 06:33.150
is that we now only see the row that cannot be found in both queries.

06:33.150 --> 06:40.920
So in that case, this is ID B, important note, of course we start in the left column again and that's why

06:40.920 --> 06:44.330
we don't see BB right here because it's the same logic as with the left

06:44.360 --> 06:46.370
outer query, just vice-versa,

06:46.380 --> 06:53.580
so now with the IDs it cannot find in the right query. The same logic can be applied to the right

06:53.610 --> 06:54.660
anti-join,

06:54.810 --> 07:00.660
here we only find BB because now Power BI has a look at the ID column of the right query

07:00.990 --> 07:04.580
and finds that BB cannot be found in the left query

07:04.890 --> 07:06.840
and that's why we have that result right here.

07:08.050 --> 07:09.110
That's not everything,

07:09.190 --> 07:11.590
we have one last join kind

07:12.160 --> 07:14.610
and that's the inner join.

07:14.880 --> 07:21.730
Now you might imagine what it is. The inner join simply joins all the IDs that can be found in both

07:21.730 --> 07:22.420
queries,

07:22.630 --> 07:30.030
so in our case, this is ID A and ID C, ID B or ID BB is not named right here.

07:30.250 --> 07:35.830
So you might get loss of some data if you're not careful what join kind you are using

07:36.100 --> 07:41.620
and that brings me back to our project because what we want to do is we want to add that for region

07:41.620 --> 07:46.590
names now to our initial country-codes query that we imported

07:46.870 --> 07:53.680
but as the database for the full names is that country-codes query, we are sure that we allocated each

07:53.680 --> 07:58.360
country to a region and that's why it doesn't make a difference at the moment if we use an inner

07:58.360 --> 08:05.650
join or a left outer join, an anti-join wouldn't work because we don't have any anti, so we can match

08:05.740 --> 08:09.940
every ID basically to translate that into the language of that example.

08:10.270 --> 08:14.390
Nevertheless, let's go back to our project and see how we can apply it right there.

08:14.800 --> 08:20.470
So what we want to do right now is we want to add that region-names column to that query,

08:20.740 --> 08:26.350
so let's do that by selecting the home ribbon, go to combine and merge queries,

08:26.350 --> 08:29.560
click on the arrow and press merge queries and

08:29.560 --> 08:34.640
now we have to select the country ID or I'm not sure at the moment to be honest,

08:34.640 --> 08:37.030
let's see, I think it's the region-code.

08:37.070 --> 08:40.510
Yes we have to select the region-code in the first query.

08:40.530 --> 08:44.510
Now to think back about the example, the first query,

08:44.510 --> 08:47.450
so the top query is the left query,

08:47.570 --> 08:48.990
this might be confusing,

08:49.100 --> 08:53.720
so left is top right here and right is bottom and that's just what it is.

08:53.880 --> 08:58.540
However, we selected the region-code right here and we have to select the region-code right there

08:58.790 --> 09:04.610
and as you can see down here, we selected a left outer join, we could also change that to the inner join

09:04.610 --> 09:08.050
for instance and we can see that we matched all of our rows.

09:08.240 --> 09:09.990
That's what I just explained,

09:10.130 --> 09:16.880
as we build the full region-name table based on that initial codes-country-region table, we know we

09:16.880 --> 09:22.760
are sure that we allocated all of the regions or all of the region codes to full region names.

09:22.990 --> 09:24.120
Now that we know that,

09:24.170 --> 09:25.350
let's press OK

09:26.090 --> 09:28.400
and we see that we have a new column.

09:28.400 --> 09:33.620
However this new column doesn't really look good right because we don't see any information in here

09:33.620 --> 09:39.830
now. We can easily solve that by pressing onto that little symbol right here, like this,

09:39.830 --> 09:43.580
now we have to decide what columns we want to display right here.

09:43.850 --> 09:48.460
All the columns in our case, I don't think so because the region-code is already there,

09:48.500 --> 09:49.740
we can see it right here.

09:49.810 --> 09:55.700
So we unselect the region code and we unselect something else and that's that use the original column

09:55.700 --> 09:57.040
name as prefix and

09:57.290 --> 10:03.560
what happens then is that the original column name, this new column right here would be added and then

10:03.830 --> 10:04.940
comes the region name,

10:04.970 --> 10:07.810
so the name would be new column, region name. Not good,

10:07.820 --> 10:13.280
so we unselect that, so the column name would be region-name, lots of names now.

10:13.610 --> 10:14.940
So let's press OK

10:15.350 --> 10:22.470
and now we see that we perfectly added that region-name column to our existing columns in the query.

10:22.820 --> 10:29.920
However we are not done yet right because at the moment, we only worked in those regions-countries group

10:30.260 --> 10:32.470
and actually we want to create a data model,

10:32.480 --> 10:35.330
so we want to work in the DIM region query.

10:35.390 --> 10:40.750
Now we have to add that region-names also to the DIM region query,

10:40.910 --> 10:43.470
let's see how this works in the next video.
