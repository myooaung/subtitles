WEBVTT

00:02.480 --> 00:08.670
In the last lecture, we had a look at how we could import and use JSON data in our project, in our Power BI

00:08.820 --> 00:14.430
project and it was a bit difficult because we had to drill down into the data structure and make sure

00:14.430 --> 00:17.280
we transform it into a two dimensional table

00:17.280 --> 00:20.200
we can actually work with. In this lecture

00:20.200 --> 00:26.820
now, I want to take it to the next level and whilst we will in the end still use JSON data, I want

00:26.820 --> 00:32.840
to show you how to get this data by directly querying a restful API service and which better service to

00:32.880 --> 00:35.280
query than the Star Wars API.

00:35.370 --> 00:42.960
So feel free to Google for Star Wars API so that you can visit swapi.co and here you'll find an

00:42.960 --> 00:45.600
explanation on how it works and what you might query

00:45.810 --> 00:47.820
and I'll show it here on your webpage.

00:47.850 --> 00:54.510
You can simply for example query all the people, so the full URL would be to http://www.swapi.co/api/people

00:54.540 --> 00:56.640
for example

00:56.640 --> 01:00.900
and if we send this request, we would get back JSON data which looks like this.

01:01.020 --> 01:06.810
So an object which has the overall count of people and then the result which is a list of the individual

01:06.810 --> 01:09.100
characters we have in the Star War movies.

01:09.390 --> 01:12.230
So that's really interesting, I hope,

01:12.420 --> 01:13.780
so let's copy that

01:13.830 --> 01:14.910
URL here,

01:14.940 --> 01:18.060
the API part at least, we'll have to add people manually

01:18.150 --> 01:25.160
and let's go back to Power BI. In there we can click get data and then we could click web or of course

01:25.170 --> 01:28.500
also on a more tiered bottom, web

01:28.680 --> 01:32.230
and that's also how you could import full webpages. Here

01:32.260 --> 01:37.110
however, we're just getting JSON data and Power BI will automatically find out which data it receives

01:37.110 --> 01:38.870
and handle that correctly.

01:38.910 --> 01:41.250
So here, we can enter the URL,

01:41.280 --> 01:45.580
don't forget to add people or whatever you plan on querying at the end

01:45.960 --> 01:48.120
and then we can also switch to advanced.

01:48.180 --> 01:49.830
Now what can you do here

01:49.860 --> 01:57.140
under advanced? We get the URL parts for example and this would allow you to structure your

01:57.150 --> 02:03.990
URL, so you could either enter the full URL or you could also enter people here and that should

02:04.050 --> 02:07.710
also create a URL of all these parts.

02:07.710 --> 02:10.060
So that is how you can also query that, so

02:10.100 --> 02:15.970
let's use this way for example sake, you'll see the full URL previewed down here then.

02:16.380 --> 02:21.990
Here you can specify in a timeout if you have some service which might take a bit longer, you could

02:22.200 --> 02:28.050
specify that after one minute of inactivity, so after one minute of not getting any result, you want to

02:28.050 --> 02:28.720
quit

02:28.860 --> 02:34.070
so that Power BI doesn't keep on querying that and doesn't wait for a response. Here

02:34.080 --> 02:40.590
I'll leave this empty which means wait until the data is there. And you can also set some custom headers,

02:40.590 --> 02:46.320
now maybe you have a service where you need to pass some authorisation header or some other header to

02:46.530 --> 02:49.770
have it work correctly and have it return the correct data,

02:49.980 --> 02:55.080
you could set these HTTP headers there and you set typical HTTP headers.

02:55.290 --> 03:02.430
For me I don't need that here, so let's just hit OK to query that API as it is and we get back JSON

03:02.490 --> 03:03.000
data

03:03.090 --> 03:04.910
as you already knew it.

03:04.950 --> 03:08.190
Now let's transform this into a table to begin with

03:08.610 --> 03:15.560
and then we can again drill down into the JSON data, for example into that list here.

03:15.570 --> 03:19.210
Now where is that expand item

03:19.210 --> 03:20.830
we were looking for?

03:21.060 --> 03:23.440
If we have a look at this, we can't click it,

03:23.460 --> 03:24.930
why?

03:24.930 --> 03:28.970
Because only one of the items here is actually a list.

03:28.980 --> 03:34.140
So if we wanted to transform this, we would have to do it differently here,

03:34.440 --> 03:41.460
we could drill into the list here and convert this to a table which now if we click OK will actually

03:41.490 --> 03:47.010
override our people query so that it's no longer our original data but just that list

03:47.160 --> 03:50.810
and of course you could have save this as a new query if you want to keep both.

03:51.180 --> 03:55.090
Now with this, we get our column and now we can split this

03:55.090 --> 04:02.010
and now you see we have all these fields, name, height, mass and so on for all the characters

04:02.010 --> 04:07.530
and if you scroll over, you see you could drill down more into a list of films and so on.

04:07.530 --> 04:13.410
Now with that data being loaded like this, you could drill down further into it and transform it however

04:13.410 --> 04:17.670
you want to transform it to get the analysis you want to get,

04:17.700 --> 04:24.390
I think it became clear how you can connect your HTTP Service, get data the service returns and of course

04:24.400 --> 04:25.910
this doesn't have to be JSON,

04:25.950 --> 04:31.530
that's also important. Power BI is not only able to work with JSON, earlier in the course you already

04:31.530 --> 04:35.980
saw how it works with a webpage which loads HTML,

04:36.120 --> 04:41.210
here you see it works with JSON and if that would return csv, that works too.

04:41.460 --> 04:48.660
Basically and that's a key takeaway, the web data source is like a wrapper around other data sources which

04:48.660 --> 04:56.310
you can handle in Power BI too, like csv, text files, whatever it is and whatever your service here returns, Power BI

04:56.600 --> 04:58.760
will then be able to handle it.
