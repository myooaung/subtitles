1
00:00:01,840 --> 00:00:04,840
Okay, it's time to test our web app.

2
00:00:04,840 --> 00:00:09,340
Let's quickly pop into the basement, and don't forget to grab your hacker hoody.

3
00:00:09,340 --> 00:00:12,140
The website has now HTTPS enabled.

4
00:00:12,140 --> 00:00:15,060
The hacker can no longer sniff the network traffic or

5
00:00:15,060 --> 00:00:17,540
perform many of the previous attacks.

6
00:00:17,540 --> 00:00:20,140
There is still one vulnerability here.

7
00:00:20,140 --> 00:00:24,140
If we look at the communication between the browser and the server,

8
00:00:24,140 --> 00:00:29,440
the initial redirect request and response is via HTTP,

9
00:00:29,440 --> 00:00:32,740
hence it's susceptible to a man‑in‑the‑middle attack.

10
00:00:32,740 --> 00:00:36,420
The hacker could intercept the response from the server and inject

11
00:00:36,420 --> 00:00:40,730
malicious content like scripts or simply change the redirect to their

12
00:00:40,730 --> 00:00:43,440
malicious site by changing the header.

13
00:00:43,440 --> 00:00:46,240
And it's a lot easier than you might think.

14
00:00:46,240 --> 00:00:51,640
Here is the GUI for the WiFi Pineapple, which costs around 100 bucks off eBay,

15
00:00:51,640 --> 00:00:57,140
and it can open up a fake Wi‑Fi endpoint with any SSID you want.

16
00:00:57,140 --> 00:01:00,340
Here I have set one up for CRYPTO_CONF.

17
00:01:00,340 --> 00:01:03,140
Now if the user connects to this SSID,

18
00:01:03,140 --> 00:01:05,740
they are exposed to a man‑in‑the‑middle attack,

19
00:01:05,740 --> 00:01:10,510
and these days, users expect there to be free Wi‑Fi everywhere in restaurants,

20
00:01:10,510 --> 00:01:12,240
cafes, conferences,

21
00:01:12,240 --> 00:01:15,950
you name it. Even planes and trains are starting to implement them.

22
00:01:15,950 --> 00:01:19,740
And the user doesn't even have to specifically connect to this network.

23
00:01:19,740 --> 00:01:23,110
When they connect to an SSID at home or anywhere,

24
00:01:23,110 --> 00:01:25,940
their device remembers that point,

25
00:01:25,940 --> 00:01:30,700
and it will automatically reconnect to that network when it is in range.

26
00:01:30,700 --> 00:01:35,340
It does this through probe requests, continuously searching for these networks.

27
00:01:35,340 --> 00:01:38,100
The Pineapple can actually detect these probes and

28
00:01:38,100 --> 00:01:43,340
masquerade as the exact same SSID, tricking your device into connecting to it.

29
00:01:43,340 --> 00:01:46,840
Now once a user is connected to this malicious Wi‑Fi spot,

30
00:01:46,840 --> 00:01:49,550
they would be using the DNS server of the device,

31
00:01:49,550 --> 00:01:51,940
and the hacker can use DNS spoofing.

32
00:01:51,940 --> 00:01:59,140
Here we add the AWS domain and map it to a malicious server IP address.

33
00:01:59,140 --> 00:02:02,010
Now if the user decides to check their portfolio while

34
00:02:02,010 --> 00:02:04,340
connected to this malicious Wi‑Fi,

35
00:02:04,340 --> 00:02:07,940
they receive a familiar bland default login page.

36
00:02:07,940 --> 00:02:11,240
But notice, it's not HTTPS.

37
00:02:11,240 --> 00:02:14,040
Now the user probably wouldn't even notice this.

38
00:02:14,040 --> 00:02:20,240
If they log in, the hacker now has their credentials.

39
00:02:20,240 --> 00:02:24,120
Now you can imagine if this site was popular among crypto investors,

40
00:02:24,120 --> 00:02:27,380
the hacker could gather quite a lot of passwords in a conference.

41
00:02:27,380 --> 00:02:29,350
Now fortunately, Spring, by default,

42
00:02:29,350 --> 00:02:33,370
helps protect against this by adding the HSTS HTTP

43
00:02:33,370 --> 00:02:40,000
Strict‑Transport‑Security header. We will discuss this in the next section.

