1
00:00:01,940 --> 00:00:03,990
If you recall the previous module,

2
00:00:03,990 --> 00:00:08,840
Spring Boot configured both form and basic authentication.

3
00:00:08,840 --> 00:00:11,070
When we accessed the demo site,

4
00:00:11,070 --> 00:00:16,540
Spring Security redirected us to the default login page to authenticate.

5
00:00:16,540 --> 00:00:19,160
If we inspect the source, it's a simple form,

6
00:00:19,160 --> 00:00:22,220
submitting a POST request to the login endpoint.

7
00:00:22,220 --> 00:00:26,240
In the body, it sends the username and password.

8
00:00:26,240 --> 00:00:31,140
Now I have put a breakpoint in the username and password authentication filter,

9
00:00:31,140 --> 00:00:35,640
and you can see it extracts the username and password from the request body,

10
00:00:35,640 --> 00:00:38,040
creates an authentication token,

11
00:00:38,040 --> 00:00:43,440
and then asks the authentication manager to authenticate the request.

12
00:00:43,440 --> 00:00:47,890
That's form authentication in a nutshell, nice and simple.

13
00:00:47,890 --> 00:00:51,170
It's a simple POST request to the login endpoint with

14
00:00:51,170 --> 00:00:54,240
the username and password in the body.

15
00:00:54,240 --> 00:00:57,440
Next is basic authentication.

16
00:00:57,440 --> 00:01:00,610
This is simply the concatenation of the username and

17
00:01:00,610 --> 00:01:03,520
password separated by a colon.

18
00:01:03,520 --> 00:01:06,870
It can be transmitted in the header or the URL.

19
00:01:06,870 --> 00:01:13,440
However, via the URL is now duplicated by RFC 3986.

20
00:01:13,440 --> 00:01:16,960
But Spring still supports it. When transmitting in the

21
00:01:16,960 --> 00:01:21,240
header, it's additionally Base64 encoded.

22
00:01:21,240 --> 00:01:25,420
The intent of the encoding is to encode nonHTTP‑compatible

23
00:01:25,420 --> 00:01:29,440
characters that may be in the username or password.

24
00:01:29,440 --> 00:01:30,690
This can, however,

25
00:01:30,690 --> 00:01:34,830
often be mistaken as being more secure than form

26
00:01:34,830 --> 00:01:38,560
authentication as the credentials are not readable.

27
00:01:38,560 --> 00:01:42,240
But don't be fooled by the Base64 encoding.

28
00:01:42,240 --> 00:01:45,190
It does not offer any security benefits.

29
00:01:45,190 --> 00:01:48,670
It's not encrypted and can easily be decoded.

30
00:01:48,670 --> 00:01:51,560
There are sites on the web you can simply paste in the basic

31
00:01:51,560 --> 00:01:54,910
token and convert it back to human‑readable text.

32
00:01:54,910 --> 00:01:59,040
So essentially, it's transmitting the password plaintext,

33
00:01:59,040 --> 00:02:02,400
just like form authentication only in the header

34
00:02:02,400 --> 00:02:04,740
and not the body of the request.

35
00:02:04,740 --> 00:02:08,140
Now to demonstrate basic, I'm going to switch to curl.

36
00:02:08,140 --> 00:02:12,140
If I access the site, I get a 401 as expected.

37
00:02:12,140 --> 00:02:14,590
Now if I include the basic header,

38
00:02:14,590 --> 00:02:17,640
you can see I get access to the web application.

39
00:02:17,640 --> 00:02:18,280
Next,

40
00:02:18,280 --> 00:02:27,000
let's see how we can customize the authentication strategy to only support either form or basic, but not both.

