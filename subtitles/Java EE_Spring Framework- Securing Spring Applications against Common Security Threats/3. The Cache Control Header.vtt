WEBVTT
1
00:00:01.640 --> 00:00:05.050
The Cache‑Control header added by Spring Security tells

2
00:00:05.050 --> 00:00:07.900
your browser to disable all caching.

3
00:00:07.900 --> 00:00:13.640
Now, this at first might seem draconian as caching can improve performance.

4
00:00:13.640 --> 00:00:18.840
But if caching is enabled, even after the user logs out of the application,

5
00:00:18.840 --> 00:00:21.830
the computer and the browser could look up the user's

6
00:00:21.830 --> 00:00:24.430
history or cached browser data.

7
00:00:24.430 --> 00:00:27.540
Let's look at a potential scenario here.

8
00:00:27.540 --> 00:00:32.850
Victoria logs into her crypto portfolio application while on holiday

9
00:00:32.850 --> 00:00:36.840
using a public computer provided by the resort.

10
00:00:36.840 --> 00:00:39.330
She views her account details and profile,

11
00:00:39.330 --> 00:00:43.490
her portfolio, and once completed, she logs off.

12
00:00:43.490 --> 00:00:47.440
Now a hacker could then view the cached data on that computer,

13
00:00:47.440 --> 00:00:52.440
and voila, you can see Victoria's previously cached pages,

14
00:00:52.440 --> 00:00:57.140
which contain her personal data and her portfolio positions.

15
00:00:57.140 --> 00:00:59.140
This could then be used.

16
00:00:59.140 --> 00:01:05.740
Now this data can then be used for identity theft or targeted phishing attacks.

17
00:01:05.740 --> 00:01:09.140
Or it could be enough information to reset her password.

18
00:01:09.140 --> 00:01:12.740
And now the hacker even knows the potential windfall of a

19
00:01:12.740 --> 00:01:16.340
successful attack on Victoria's crypto position.

20
00:01:16.340 --> 00:01:21.640
This is why, by default, Spring tells the browser to block everything.

21
00:01:21.640 --> 00:01:27.340
Now if you do want this header removed, don't disable all the default headers,

22
00:01:27.340 --> 00:01:30.840
but disable the Cache‑Control one specifically by using its

23
00:01:30.840 --> 00:01:33.440
builder method on the header's builder.

24
00:01:33.440 --> 00:01:35.240
Ideally, however,

25
00:01:35.240 --> 00:01:38.260
if you require caching, then you should do it for

26
00:01:38.260 --> 00:01:42.700
individual pages you want to enable caching for. Here, I

27
00:01:42.700 --> 00:01:44.870
have a view that just returns prices.

28
00:01:44.870 --> 00:01:46.100
It's not sensitive data,

29
00:01:46.100 --> 00:01:49.360
so we can specifically tell Spring Security to enable cache

30
00:01:49.360 --> 00:01:53.500
controls for this view only, and in Spring, we'll include the

31
00:01:53.500 --> 00:01:55.640
appropriate cache headers for this page,

32
00:01:55.640 --> 00:02:03.000
while all others continue to have the default cache settings of blocking everything.

