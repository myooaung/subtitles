WEBVTT
1
00:00:01.840 --> 00:00:05.500
I have rewritten the demo application with a React

2
00:00:05.500 --> 00:00:08.230
front end and a Spring back end.

3
00:00:08.230 --> 00:00:11.940
We will use Spring Security to secure the back end.

4
00:00:11.940 --> 00:00:16.240
The main difference from our previous Spring MVC application

5
00:00:16.240 --> 00:00:19.060
is that we are now using REST controllers,

6
00:00:19.060 --> 00:00:24.540
as the React application will be rendered client‑side in the browser.

7
00:00:24.540 --> 00:00:29.620
But it will make AJAX calls to the REST controllers to retrieve data in

8
00:00:29.620 --> 00:00:32.710
JSON format that it might need to render the page,

9
00:00:32.710 --> 00:00:36.440
like the portfolio positions or transactions,

10
00:00:36.440 --> 00:00:38.840
which are stored in a database.

11
00:00:38.840 --> 00:00:43.140
Now to initially load the React application in the user's browser,

12
00:00:43.140 --> 00:00:46.820
you can create an index.html page under the static

13
00:00:46.820 --> 00:00:50.260
folder and add the links to this page.

14
00:00:50.260 --> 00:00:54.300
Now these are located in the js folder under static.

15
00:00:54.300 --> 00:00:55.680
This works well.

16
00:00:55.680 --> 00:01:01.310
As my default, Spring will look out for this page and use it as a welcome page.

17
00:01:01.310 --> 00:01:06.620
So, when Victoria accesses the application URL with that e path,

18
00:01:06.620 --> 00:01:11.540
Spring, by default, will return the index.html page. However,

19
00:01:11.540 --> 00:01:14.310
because we have enabled Spring Security,

20
00:01:14.310 --> 00:01:19.130
that initial request will first be intercepted by the Spring Security filters.

21
00:01:19.130 --> 00:01:22.900
And because our security configuration requires an

22
00:01:22.900 --> 00:01:26.840
authenticated principal to access any resource,

23
00:01:26.840 --> 00:01:29.200
and we have formLogin configured,

24
00:01:29.200 --> 00:01:34.360
the user will first be redirected to the Spring Security default login page.

25
00:01:34.360 --> 00:01:40.450
Once they authenticate, then the index.html page will be sent to their browser,

26
00:01:40.450 --> 00:01:42.670
which then loads the React application.

27
00:01:42.670 --> 00:01:44.770
As you can see, behind the scenes,

28
00:01:44.770 --> 00:01:49.220
the React application is making AJAX calls to the portfolio REST

29
00:01:49.220 --> 00:01:52.470
controller to retrieve the user's position.

30
00:01:52.470 --> 00:01:55.390
For these requests, the browser will include the cookie,

31
00:01:55.390 --> 00:01:58.640
just like in the MVC web application.

32
00:01:58.640 --> 00:02:02.400
The server is maintaining a session for the principal,

33
00:02:02.400 --> 00:02:06.320
and hence these requests will be automatically authenticated, and the

34
00:02:06.320 --> 00:02:09.440
user doesn't have to re‑enter their credentials.

35
00:02:09.440 --> 00:02:18.000
This is a good start, but there's still more we need to configure. Next, let's look at how we can configure cross‑site request forgery protection.

