WEBVTT
1
00:00:01.640 --> 00:00:02.740
In the previous clip,

2
00:00:02.740 --> 00:00:07.190
we saw that just by adding a single Spring Boot starter dependency,

3
00:00:07.190 --> 00:00:08.460
to our project,

4
00:00:08.460 --> 00:00:12.060
Spring Boot configured Spring Security to provide form‑based

5
00:00:12.060 --> 00:00:16.940
authentication and secured all the endpoints for us.

6
00:00:16.940 --> 00:00:22.220
Additionally, it also created a test user for us to get started.

7
00:00:22.220 --> 00:00:26.240
Basically, everything you would need on a new project.

8
00:00:26.240 --> 00:00:29.960
Spring Boot achieved this by being very opinionated.

9
00:00:29.960 --> 00:00:32.910
It notices changes in your configuration,

10
00:00:32.910 --> 00:00:35.240
your code, last path,

11
00:00:35.240 --> 00:00:39.040
and then makes assumptions on what you actually want to achieve.

12
00:00:39.040 --> 00:00:39.990
In our case,

13
00:00:39.990 --> 00:00:44.590
it noticed the Spring Security starter dependency was added and

14
00:00:44.590 --> 00:00:48.120
hence assumed we wanted to secure our application.

15
00:00:48.120 --> 00:00:53.050
Now this is achieved by configuration classes within Spring Boot,

16
00:00:53.050 --> 00:00:57.320
such as this one, SecurityAutoConfiguration.

17
00:00:57.320 --> 00:01:00.830
These configuration classes typically lay dormant

18
00:01:00.830 --> 00:01:03.300
until certain conditions are met.

19
00:01:03.300 --> 00:01:04.810
Example, here,

20
00:01:04.810 --> 00:01:08.840
the ConditionalOnClass triggers this configuration class into

21
00:01:08.840 --> 00:01:13.630
action when the DefaultAuthenticationEventPublisher class makes

22
00:01:13.630 --> 00:01:16.040
it into your application's class path.

23
00:01:16.040 --> 00:01:19.650
Hence why Spring Security magically appeared in our application

24
00:01:19.650 --> 00:01:22.730
when we added this Spring Boot starter dependency.

25
00:01:22.730 --> 00:01:27.410
This class then imports additional configuration classes,

26
00:01:27.410 --> 00:01:31.540
like the SpringBootWebSecurityConfiguration class,

27
00:01:31.540 --> 00:01:36.990
which determined that this was a web application and configured the web

28
00:01:36.990 --> 00:01:41.940
security adapter, or the WebSecurityEnablerConfiguration,

29
00:01:41.940 --> 00:01:44.970
which configured a Spring configuration class with the

30
00:01:44.970 --> 00:01:48.840
EnableWebSecurity annotation and so forth.

31
00:01:48.840 --> 00:01:49.330
Basically,

32
00:01:49.330 --> 00:01:53.010
all the tedious boilerplate code and configuration

33
00:01:53.010 --> 00:01:54.890
you would have to do manually.

34
00:01:54.890 --> 00:02:00.040
In the UserDetailsServiceAutoConfiguration class,

35
00:02:00.040 --> 00:02:05.610
the UserDetailsServiceAutoConfiguration class checked our application and

36
00:02:05.610 --> 00:02:09.100
determined that we did not configure a user repository.

37
00:02:09.100 --> 00:02:12.540
And without users, you can't authenticate.

38
00:02:12.540 --> 00:02:16.580
So it created a default in‑memory implementation for us.

39
00:02:16.580 --> 00:02:20.930
And here you can see it even printed out the password for us in the logs.

40
00:02:20.930 --> 00:02:22.430
Thanks, Spring Boot.

41
00:02:22.430 --> 00:02:23.130
Again,

42
00:02:23.130 --> 00:02:26.910
the ConditionalOnMissingBean means that as soon as we

43
00:02:26.910 --> 00:02:29.240
provide our own implementation like, for example,

44
00:02:29.240 --> 00:02:33.040
maybe a database implementation or LDAP implementation,

45
00:02:33.040 --> 00:02:35.440
Spring Boot will back off.

46
00:02:35.440 --> 00:02:37.810
Now if you have worked with Spring in the past,

47
00:02:37.810 --> 00:02:41.540
you would probably be well aware of what a pain in the debug it

48
00:02:41.540 --> 00:02:43.740
used to be to maintain the correct dependencies,

49
00:02:43.740 --> 00:02:47.140
the order, and to simply configure everything.

50
00:02:47.140 --> 00:02:49.200
After 10 years working with Spring,

51
00:02:49.200 --> 00:02:58.000
I definitely appreciate what Spring Boot is doing here. Next, let's take a closer look at the Spring Security architecture.

