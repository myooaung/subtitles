1
00:00:01,840 --> 00:00:05,640
Spring also protects your site against cross‑site request forgery,

2
00:00:05,640 --> 00:00:07,140
or session riding,

3
00:00:07,140 --> 00:00:11,710
which is an attack that forces an end user to execute unwanted actions on a

4
00:00:11,710 --> 00:00:15,540
web application in which they're currently authenticated.

5
00:00:15,540 --> 00:00:18,780
The way it works is your user authenticates with your

6
00:00:18,780 --> 00:00:22,120
website. The web server will return a cookie,

7
00:00:22,120 --> 00:00:26,040
which is stored by the browser against that domain.

8
00:00:26,040 --> 00:00:30,160
This is so all future requests to that domain do not have to reauthenticate.

9
00:00:30,160 --> 00:00:32,650
The browser will just automatically include the cookie

10
00:00:32,650 --> 00:00:34,840
for all future requests to the server.

11
00:00:34,840 --> 00:00:38,750
If while the user is still logged in they access a malicious site,

12
00:00:38,750 --> 00:00:40,540
perhaps in another tab,

13
00:00:40,540 --> 00:00:44,580
and submit something to that malicious site, the malicious site can

14
00:00:44,580 --> 00:00:47,440
submit a request to the target server domain,

15
00:00:47,440 --> 00:00:51,540
and the browser will automatically add the cookie to that request.

16
00:00:51,540 --> 00:00:54,030
Now cross‑site request forgery attacks are only viable

17
00:00:54,030 --> 00:00:57,220
for state changing operations like PUT, POST,

18
00:00:57,220 --> 00:01:03,340
or DELETE as the response is returned back to the user's browser; however,

19
00:01:03,340 --> 00:01:06,240
the malicious site could submit a change of content,

20
00:01:06,240 --> 00:01:09,070
deleting content, transferring funds perhaps,

21
00:01:09,070 --> 00:01:11,840
or even trying to reset the password to give the

22
00:01:11,840 --> 00:01:14,410
hacker access to the user's account.

23
00:01:14,410 --> 00:01:15,440
Spring, by default,

24
00:01:15,440 --> 00:01:17,980
protects against cross‑site request forgery using

25
00:01:17,980 --> 00:01:20,440
the synchronizer token pattern.

26
00:01:20,440 --> 00:01:23,600
The way it works is when a user logs into your web application,

27
00:01:23,600 --> 00:01:26,480
the server returns the response,

28
00:01:26,480 --> 00:01:30,050
which includes both the cookie and, additionally,

29
00:01:30,050 --> 00:01:32,440
a randomly generated token.

30
00:01:32,440 --> 00:01:35,340
The browser will store the cookie against the domain,

31
00:01:35,340 --> 00:01:39,540
but it has no knowledge of the token as it's application‑specific.

32
00:01:39,540 --> 00:01:43,280
Spring Security then expects both the cookie and the token

33
00:01:43,280 --> 00:01:46,340
to be returned for all future requests.

34
00:01:46,340 --> 00:01:48,940
The malicious site has no access to the token.

35
00:01:48,940 --> 00:01:52,140
Hence, when it submits the request to your domain,

36
00:01:52,140 --> 00:01:54,940
Spring Security will reject it.

37
00:01:54,940 --> 00:01:58,210
Like most things in Spring Security, there is a filter,

38
00:01:58,210 --> 00:02:00,270
the cross‑site request forgery filter,

39
00:02:00,270 --> 00:02:02,480
that performs the checks and adds the token to the

40
00:02:02,480 --> 00:02:04,770
response bed. From my experience,

41
00:02:04,770 --> 00:02:09,100
this is the most common default security feature disabled, mainly because

42
00:02:09,100 --> 00:02:13,680
developers just don't understand what cross‑site request forgery is and the

43
00:02:13,680 --> 00:02:16,350
implications to their users of disabling it.

44
00:02:16,350 --> 00:02:18,190
So when they first experience the error,

45
00:02:18,190 --> 00:02:21,530
they simply Google it and see the first solution,

46
00:02:21,530 --> 00:02:24,240
which recommends disabling the filter.

47
00:02:24,240 --> 00:02:24,940
Well,

48
00:02:24,940 --> 00:02:28,570
let's see the consequences to Victoria's portfolio if we

49
00:02:28,570 --> 00:02:31,230
disable this protection in our application.

50
00:02:31,230 --> 00:02:35,840
Previously, the hacker was able to view Victoria's sensitive cached page.

51
00:02:35,840 --> 00:02:39,470
So they now know her details, her email,

52
00:02:39,470 --> 00:02:41,840
her crypto portfolio position,

53
00:02:41,840 --> 00:02:45,850
and hence they can now target her with a phishing email,

54
00:02:45,850 --> 00:02:50,330
and using her personal details makes it look more legit.

55
00:02:50,330 --> 00:02:54,330
Now the hacker sends her a malicious link where apparently she can

56
00:02:54,330 --> 00:02:57,680
get free crypto by submitting her wallet address,

57
00:02:57,680 --> 00:03:00,240
and who doesn't want free crypto?

58
00:03:00,240 --> 00:03:03,280
Now if she's also logged into her portfolio at the same

59
00:03:03,280 --> 00:03:08,240
time as accessing this malicious site, perhaps in a new tab,

60
00:03:08,240 --> 00:03:11,240
and then she submits the malicious form,

61
00:03:11,240 --> 00:03:13,140
her portfolio is now empty.

62
00:03:13,140 --> 00:03:15,340
She will definitely not be impressed.

63
00:03:15,340 --> 00:03:17,860
If we look at the source code of the malicious site,

64
00:03:17,860 --> 00:03:22,480
it's simply a post request directed at the crypto portfolio domain.

65
00:03:22,480 --> 00:03:24,290
And on the way out, the browser included the

66
00:03:24,290 --> 00:03:27,140
cookie. It's stored for that domain.

67
00:03:27,140 --> 00:03:31,440
Now, if we re‑enable the cross‑site request forgery protection,

68
00:03:31,440 --> 00:03:34,940
you can see that Spring Security now blocks the malicious site,

69
00:03:34,940 --> 00:03:39,640
as the request did not include the cross‑site request forgery token.

70
00:03:39,640 --> 00:03:46,000
Now the hacker still has another option up their sleeves. Let's look at that next.

