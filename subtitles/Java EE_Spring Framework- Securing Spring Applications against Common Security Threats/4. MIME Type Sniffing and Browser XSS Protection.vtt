WEBVTT
1
00:00:01.840 --> 00:00:04.880
Most browsers have built‑in support for filtering

2
00:00:04.880 --> 00:00:07.640
out cross‑site scripting attacks.

3
00:00:07.640 --> 00:00:11.840
The most common of these are reflective cross‑site scripting attacks.

4
00:00:11.840 --> 00:00:15.450
These occur when an attacker injects browser executable

5
00:00:15.450 --> 00:00:19.040
code within a single HTTP response.

6
00:00:19.040 --> 00:00:22.810
Now the best way to get your head around this is via an example.

7
00:00:22.810 --> 00:00:27.040
Here is a form to submit support queries in our application,

8
00:00:27.040 --> 00:00:29.850
which will then be viewed by the administration team.

9
00:00:29.850 --> 00:00:30.450
Now,

10
00:00:30.450 --> 00:00:34.430
if a malicious party enters some JavaScript and then

11
00:00:34.430 --> 00:00:37.240
the admin views the support query,

12
00:00:37.240 --> 00:00:40.540
when the server sends the HTML back to the browser,

13
00:00:40.540 --> 00:00:44.050
the administrator's browser notices the JavaScript,

14
00:00:44.050 --> 00:00:47.840
and rather than displaying it, the script is executed.

15
00:00:47.840 --> 00:00:49.820
Perhaps the strings are still the admin's cookie

16
00:00:49.820 --> 00:00:52.640
session or any number of nefarious _____.

17
00:00:52.640 --> 00:00:54.360
Now, in this case,

18
00:00:54.360 --> 00:00:56.760
this header did not protect the admin from a

19
00:00:56.760 --> 00:00:58.590
reflective cross‑site scripting attack,

20
00:00:58.590 --> 00:01:02.570
but because I was using another templating framework called Thymeleaf.

21
00:01:02.570 --> 00:01:06.220
By default, Thymeleaf imports our output back to the browser,

22
00:01:06.220 --> 00:01:09.240
which protects against script being executed.

23
00:01:09.240 --> 00:01:10.020
Now for the demo,

24
00:01:10.020 --> 00:01:13.510
I had to specifically use a tag that did not encode it to demonstrate

25
00:01:13.510 --> 00:01:15.810
what a reflective cross‑site scripting attack is.

26
00:01:15.810 --> 00:01:20.840
Again, another reason why using frameworks can save you.

27
00:01:20.840 --> 00:01:21.640
Now,

28
00:01:21.640 --> 00:01:25.720
as you saw this header is not foolproof and generally cross‑site scripting

29
00:01:25.720 --> 00:01:29.000
protection is already enabled by default in the browser,

30
00:01:29.000 --> 00:01:30.850
but including this header doesn't hurt,

31
00:01:30.850 --> 00:01:33.240
and it makes sure that if the browser does support it,

32
00:01:33.240 --> 00:01:34.840
it will enforce it.

33
00:01:34.840 --> 00:01:35.580
And also,

34
00:01:35.580 --> 00:01:37.820
it instructs the browser that in the event of

35
00:01:37.820 --> 00:01:39.940
detecting a cross‑site scripting attack,

36
00:01:39.940 --> 00:01:41.880
the response should be blocked,

37
00:01:41.880 --> 00:01:45.470
as some browsers might try to be clever and change the content or do some

38
00:01:45.470 --> 00:01:50.450
magic that still try and render the page or content and that in itself

39
00:01:50.450 --> 00:01:52.940
could then lead to a cross‑site scripting attack,

40
00:01:52.940 --> 00:01:54.970
so this tells the browser, just block it.

41
00:01:54.970 --> 00:01:59.840
Now, this then leads to a similar header, the X‑Content‑Type nosniff.

42
00:01:59.840 --> 00:02:03.700
Now historically, because of poor HTML coding practices,

43
00:02:03.700 --> 00:02:06.070
such as leaving out the content type,

44
00:02:06.070 --> 00:02:09.340
browsers try to be clever and guess the type.

45
00:02:09.340 --> 00:02:14.420
This was known as content sniffing, and it was to improve the user experience.

46
00:02:14.420 --> 00:02:20.110
However, malicious parties exploited this by using polyglot file,

47
00:02:20.110 --> 00:02:23.640
which are files that are valid in multiple content types,

48
00:02:23.640 --> 00:02:28.080
so as an image and also as a valid JavaScript.

49
00:02:28.080 --> 00:02:29.470
Hence, when viewed in the browser,

50
00:02:29.470 --> 00:02:32.920
it was a lottery if the browse decided that it was an image and

51
00:02:32.920 --> 00:02:36.240
displayed it or decided it was script and executed it,

52
00:02:36.240 --> 00:02:44.000
basically, a cross‑site scripting attack. Now this header just tells the browser disable content sniffing, period.

