WEBVTT
1
00:00:01.340 --> 00:00:03.350
If we look at our filterChain,

2
00:00:03.350 --> 00:00:07.840
the last filter in the list is the FilterSecurityInterceptor.

3
00:00:07.840 --> 00:00:10.540
When the request reaches this filter,

4
00:00:10.540 --> 00:00:15.040
it checks if the principle is authorized to access the intended resource.

5
00:00:15.040 --> 00:00:18.140
If we access our demo app for the first time,

6
00:00:18.140 --> 00:00:21.130
the interceptor will detect that this resource requires

7
00:00:21.130 --> 00:00:24.140
the principle to be authenticated.

8
00:00:24.140 --> 00:00:28.640
Remember, however, not all resources will require authentication.

9
00:00:28.640 --> 00:00:32.760
You can expose some resources, like the login page or landing pages,

10
00:00:32.760 --> 00:00:35.740
to be accessed by an anonymous user.

11
00:00:35.740 --> 00:00:37.540
However, in this case,

12
00:00:37.540 --> 00:00:42.500
the interceptor filter will throw a 403 AuthenticationException,

13
00:00:42.500 --> 00:00:46.840
as the portfolio resource requires an authenticated user.

14
00:00:46.840 --> 00:00:51.240
This exception will then propagate up the filterChain and be

15
00:00:51.240 --> 00:00:54.440
intercepted by the ExceptionsTranslationFilter,

16
00:00:54.440 --> 00:00:58.440
which, as the name suggests, translates exceptions.

17
00:00:58.440 --> 00:01:01.380
So it will catch the AuthenticationException,

18
00:01:01.380 --> 00:01:05.540
which will then delegate it to the authenticationEntryPoint.

19
00:01:05.540 --> 00:01:09.940
Now, as Spring Security supports many ways of authentication,

20
00:01:09.940 --> 00:01:12.340
each will have its own entry point,

21
00:01:12.340 --> 00:01:15.410
and generally the entry point will have its own way of

22
00:01:15.410 --> 00:01:19.700
informing the user that they need to authenticate.

23
00:01:19.700 --> 00:01:24.240
For formLogin, it will redirect the user to the login page,

24
00:01:24.240 --> 00:01:28.720
while for basic, it will return the header informing them that basic is required.

25
00:01:28.720 --> 00:01:31.490
Now if we look at our demo's entry point,

26
00:01:31.490 --> 00:01:36.840
because we have formLogin, it's the LoginUrlAuthenticationEntryPoint.

27
00:01:36.840 --> 00:01:40.740
This is why we are redirected to the login page.

28
00:01:40.740 --> 00:01:43.930
If the user enters in their credentials and submits the

29
00:01:43.930 --> 00:01:46.840
request to the AuthenticationEndPoint,

30
00:01:46.840 --> 00:01:50.140
this will then be an authentication request and be

31
00:01:50.140 --> 00:01:53.030
intercepted by an authentication filter.

32
00:01:53.030 --> 00:01:56.940
In our case, it's the UsernamePasswordAuthenticationFilter,

33
00:01:56.940 --> 00:02:00.160
which will extract the credentials and attempt authentication.

34
00:02:00.160 --> 00:02:03.980
If the user, however, enters the wrong credentials,

35
00:02:03.980 --> 00:02:07.660
then it's the filter and not interceptor that will throw

36
00:02:07.660 --> 00:02:10.340
an authentication failure exception.

37
00:02:10.340 --> 00:02:14.140
An AuthorizationException, on the other hand,

38
00:02:14.140 --> 00:02:17.840
would be thrown by the interceptor filter if the user was

39
00:02:17.840 --> 00:02:22.180
authenticated but no authorized to access the resource.

40
00:02:22.180 --> 00:02:25.780
For example, our demo application has an admin page.

41
00:02:25.780 --> 00:02:28.950
We could configure this URL to require the user to be

42
00:02:28.950 --> 00:02:31.830
authenticated and have the role of admin.

43
00:02:31.830 --> 00:02:36.240
Now, if we access this page as our test user,

44
00:02:36.240 --> 00:02:38.910
dave, who doesn't have the admin role,

45
00:02:38.910 --> 00:02:42.680
this time it will be an AuthorizationException,

46
00:02:42.680 --> 00:02:44.700
401 Forbidden.

47
00:02:44.700 --> 00:02:47.430
The ExceptionTranslationFilter would then redirect the

48
00:02:47.430 --> 00:02:49.920
request to the accessDeniedHandler.

49
00:02:49.920 --> 00:02:51.820
Now by default.

50
00:02:51.820 --> 00:02:55.640
it would just render a whitelabel default error page.

51
00:02:55.640 --> 00:02:57.620
If you recall, by default,

52
00:02:57.620 --> 00:03:02.140
Spring Boot configured both form and basic authentication,

53
00:03:02.140 --> 00:03:08.140
but also by default, the entry point was the LoginUrlAuthenticationEntryPoint.

54
00:03:08.140 --> 00:03:12.050
So if an anonymous user accessed the portfolio URL,

55
00:03:12.050 --> 00:03:15.940
the user was redirected to the formLogin page.

56
00:03:15.940 --> 00:03:21.740
If, however, you wanted the user to be prompted with basic authentication,

57
00:03:21.740 --> 00:03:25.910
then you could use the ExceptionsHandlerBuilder to use the

58
00:03:25.910 --> 00:03:30.040
BasicAuthenticationEntryPoint, also a different entry point.

59
00:03:30.040 --> 00:03:33.230
This would then return the BasicAuthentication header,

60
00:03:33.230 --> 00:03:37.540
and the browser would prompt the user for their credentials.

61
00:03:37.540 --> 00:03:45.000
Next, let's look at authentication exceptions due to invalid authentication attempts.

