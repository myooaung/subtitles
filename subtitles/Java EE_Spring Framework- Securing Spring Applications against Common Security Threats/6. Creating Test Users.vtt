WEBVTT
1
00:00:01.740 --> 00:00:05.840
When it comes to authentication, there are many ways to authenticate.

2
00:00:05.840 --> 00:00:06.810
In Spring,

3
00:00:06.810 --> 00:00:11.590
each method of authentication has its own authentication filter that

4
00:00:11.590 --> 00:00:17.030
knows how to intercept and pass that specific authentication request

5
00:00:17.030 --> 00:00:20.240
and create an authentication token.

6
00:00:20.240 --> 00:00:25.940
At this point, it will then hand the token over to the AuthenticationManager,

7
00:00:25.940 --> 00:00:30.440
who, as the name suggests, manages the actual authentication.

8
00:00:30.440 --> 00:00:33.170
Hence, to configure our test user,

9
00:00:33.170 --> 00:00:35.620
we need to customize the AuthenticationManager.

10
00:00:35.620 --> 00:00:36.710
Again,

11
00:00:36.710 --> 00:00:40.880
we extend the Configure class that gives us access to the

12
00:00:40.880 --> 00:00:43.350
AuthenticationManager builder object.

13
00:00:43.350 --> 00:00:44.920
By default,

14
00:00:44.920 --> 00:00:50.130
Spring Boot configured an in‑memory authentication and created a

15
00:00:50.130 --> 00:00:54.240
default user and printed the password in the logs.

16
00:00:54.240 --> 00:00:58.110
Now that's annoying as you have to copy and paste the password

17
00:00:58.110 --> 00:01:02.010
each time we are restarting our application. And now we also

18
00:01:02.010 --> 00:01:04.050
want a user with an admin role.

19
00:01:04.050 --> 00:01:09.190
So let's create our own in‑memory implementation with a test user,

20
00:01:09.190 --> 00:01:14.740
Victoria. We'll give her a password and also the admin role.

21
00:01:14.740 --> 00:01:18.860
Now we need to append the noop before the password.

22
00:01:18.860 --> 00:01:23.440
Now the reason for this is that Spring Security expects each password to be

23
00:01:23.440 --> 00:01:30.230
encoded and, by default, uses a delegating password encoder. Now there are

24
00:01:30.230 --> 00:01:37.830
many different algorithms for passwords like Bcrypt, Scrypt, MD5, etc. So

25
00:01:37.830 --> 00:01:40.710
depending on the prefix before the password,

26
00:01:40.710 --> 00:01:43.850
the decoder will use the appropriate algorithm.

27
00:01:43.850 --> 00:01:47.870
Now this has a number of benefits as overtime

28
00:01:47.870 --> 00:01:51.310
algorithms for passwords fall out of favor,

29
00:01:51.310 --> 00:01:55.340
such as MD5, which is now no longer recommended.

30
00:01:55.340 --> 00:01:58.940
And so most likely you will need to upgrade users' credentials to

31
00:01:58.940 --> 00:02:02.470
more secure algorithms in the future. However,

32
00:02:02.470 --> 00:02:08.740
there is no way to simply upgrade an MD5 hash to a Bcrypt hash.

33
00:02:08.740 --> 00:02:12.320
You'll need to ask the user to change their password and encode

34
00:02:12.320 --> 00:02:15.040
their new password with the new algorithm.

35
00:02:15.040 --> 00:02:19.720
But that takes time to migrate all users, and they

36
00:02:19.720 --> 00:02:21.260
won't all do it at the same time.

37
00:02:21.260 --> 00:02:24.950
So delegating through the password encoder allows your application

38
00:02:24.950 --> 00:02:27.840
to support different encodings at the same time.

39
00:02:27.840 --> 00:02:32.550
Hence, the need for the prefix. Now noop is actually no encoding.

40
00:02:32.550 --> 00:02:37.470
It's basically plaintext and should only be used for testing.

41
00:02:37.470 --> 00:02:42.140
You can see Spring Security has it deprecated to warn against this. A

42
00:02:42.140 --> 00:02:46.290
better way is to actually inject the password encoder and encode our

43
00:02:46.290 --> 00:02:49.560
password. Now by default, it will be set to Bcrypt.

44
00:02:49.560 --> 00:02:54.600
Okay, now if we restart our application, we can see our new test user.

45
00:02:54.600 --> 00:02:58.550
Now I'd like to reiterate that in memory is not designed for production.

46
00:02:58.550 --> 00:03:00.900
And you can see the AuthenticationManager allows you to

47
00:03:00.900 --> 00:03:11.000
configure JDBC or LDAP or even your own. For now, at the early stages of the development, this works real well.

