1
00:00:01,840 --> 00:00:03,770
Even for single‑page applications,

2
00:00:03,770 --> 00:00:08,300
you would still need CSRF protection. If I tried to submit a

3
00:00:08,300 --> 00:00:12,530
transaction, basically anything that is not a GET request,

4
00:00:12,530 --> 00:00:18,190
like a PUT or a POST, you can see Spring Security returns a 403, as

5
00:00:18,190 --> 00:00:22,840
we did not include the CSRF token in the request.

6
00:00:22,840 --> 00:00:27,040
However, unlike with classic MVC applications,

7
00:00:27,040 --> 00:00:32,720
because the views are not rendered server side, the CSRF token cannot be

8
00:00:32,720 --> 00:00:37,420
included in the response HTML by Spring Security, hence it needs to be

9
00:00:37,420 --> 00:00:40,830
included in a cookie sent to the user's browser.

10
00:00:40,830 --> 00:00:46,320
To configure this, on the HttpSecurity object using the

11
00:00:46,320 --> 00:00:52,460
CSRF builder, you can set the CsrfTokenRepository to be

12
00:00:52,460 --> 00:00:56,440
the CookieCsrfTokenRepository.

13
00:00:56,440 --> 00:01:00,190
You also need to set the HttpOnly to false.

14
00:01:00,190 --> 00:01:02,760
Now the reason for this is our React application will need to

15
00:01:02,760 --> 00:01:07,140
extract the CSRF token from this cookie.

16
00:01:07,140 --> 00:01:10,740
In order to do so, you need permission to read the cookie.

17
00:01:10,740 --> 00:01:15,770
But by default, browsers block any JavaScript accessing cookies in the browser.

18
00:01:15,770 --> 00:01:18,710
This is to protect against cross‑site scripting attacks.

19
00:01:18,710 --> 00:01:22,790
Now the browser will only allow JavaScript access to this cookie from

20
00:01:22,790 --> 00:01:25,940
JavaScript that originates from the same domain.

21
00:01:25,940 --> 00:01:27,840
If we submit our transaction again,

22
00:01:27,840 --> 00:01:34,940
you can see the new cookie named XSRF‑TOKEN with the XSRF‑TOKEN inside it.

23
00:01:34,940 --> 00:01:37,140
Now if you're using Angular or React,

24
00:01:37,140 --> 00:01:47,000
the good news is they will automatically detect this cookie, and extract the token, and include it in any outgoing requests for you.

