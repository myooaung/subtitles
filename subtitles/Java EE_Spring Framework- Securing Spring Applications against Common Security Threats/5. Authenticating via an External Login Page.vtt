WEBVTT
1
00:00:01.640 --> 00:00:04.550
You will most likely want to have your login page as

2
00:00:04.550 --> 00:00:06.830
part of your single‑page application.

3
00:00:06.830 --> 00:00:10.140
You might want to have it on your landing page or if

4
00:00:10.140 --> 00:00:12.130
the user is not yet authenticated.

5
00:00:12.130 --> 00:00:16.970
Here in our React demo application, I have included it on the landing page.

6
00:00:16.970 --> 00:00:20.650
Now the simplest way to achieve this if you're authenticating with only the

7
00:00:20.650 --> 00:00:24.940
username and password is to use basic authentication.

8
00:00:24.940 --> 00:00:27.150
Now let's take a look at the security configuration

9
00:00:27.150 --> 00:00:29.050
required to make this happen.

10
00:00:29.050 --> 00:00:32.680
We still enable cookie‑based cross‑site request forgery protection.

11
00:00:32.680 --> 00:00:36.540
Now previously we relied on Spring Security to render the login page,

12
00:00:36.540 --> 00:00:39.710
hence, all the endpoints required authentication,

13
00:00:39.710 --> 00:00:41.950
including the index.html page.

14
00:00:41.950 --> 00:00:46.480
However, now since our login page is in the React application,

15
00:00:46.480 --> 00:00:52.340
we have to allow the index.html page and also the portfolio path

16
00:00:52.340 --> 00:00:56.360
to be accessed without authentication so that our React

17
00:00:56.360 --> 00:01:00.280
application can load in the user's browser and prompt them for

18
00:01:00.280 --> 00:01:02.490
their credentials with the login page.

19
00:01:02.490 --> 00:01:05.860
Now when the React app loads in the user's browser,

20
00:01:05.860 --> 00:01:10.040
it won't know if this session on the server is authenticated,

21
00:01:10.040 --> 00:01:11.680
and if login is required.

22
00:01:11.680 --> 00:01:16.670
What you can do is create a RestController with an endpoint which returns

23
00:01:16.670 --> 00:01:20.460
the principal object or some information about the user.

24
00:01:20.460 --> 00:01:23.520
Then our React application can call this endpoint,

25
00:01:23.520 --> 00:01:28.110
and if it receives a 200 response code and the user information back,

26
00:01:28.110 --> 00:01:30.440
it knows that the user is authenticated,

27
00:01:30.440 --> 00:01:33.170
and now it also has some data about them,

28
00:01:33.170 --> 00:01:38.090
like they're name, which they can use to perhaps display on the page somewhere.

29
00:01:38.090 --> 00:01:40.980
If, however, it gets an unauthorized error back,

30
00:01:40.980 --> 00:01:43.940
it can then prompt the user to authenticate.

31
00:01:43.940 --> 00:01:47.160
Now we can authenticate with Spring Security by simply including a

32
00:01:47.160 --> 00:01:52.500
basic authorization header with the username:password Base64

33
00:01:52.500 --> 00:01:55.760
encoded in a request to this endpoint.

34
00:01:55.760 --> 00:01:59.830
This will be intercepted by the basic authentication filter,

35
00:01:59.830 --> 00:02:02.740
which will authenticate the user.

36
00:02:02.740 --> 00:02:03.710
For the logout,

37
00:02:03.710 --> 00:02:08.190
we no longer have to reload the page in our single‑page application,

38
00:02:08.190 --> 00:02:10.940
as it now renders its own login page,

39
00:02:10.940 --> 00:02:14.890
so we can simply have Spring Security redirect the user back

40
00:02:14.890 --> 00:02:17.560
to the landing page on successful logout.

41
00:02:17.560 --> 00:02:21.660
If we restart our application, hmm, nothing is loading.

42
00:02:21.660 --> 00:02:23.960
If we look at the Network tab in our browser,

43
00:02:23.960 --> 00:02:26.960
you can see the index.html page was loaded,

44
00:02:26.960 --> 00:02:30.700
and it then requested the js bundle files from the web server,

45
00:02:30.700 --> 00:02:35.680
but Spring Security blocked them, as by default we have it blocking everything,

46
00:02:35.680 --> 00:02:38.390
apart from the index and /portfolio.

47
00:02:38.390 --> 00:02:42.940
Hence, we need Spring Security to ignore the js folder.

48
00:02:42.940 --> 00:02:46.030
We can achieve this via the WebSecurity builder.

49
00:02:46.030 --> 00:02:49.950
There, much better, the user can now log in.

50
00:02:49.950 --> 00:02:53.550
You can see the React app sends the basic authentication header,

51
00:02:53.550 --> 00:02:57.380
and then all subsequent Ajax requests to Spring only need

52
00:02:57.380 --> 00:03:02.240
to include the cookie to authenticate, and the browser does this for you.

53
00:03:02.240 --> 00:03:04.140
Nice and simple.

54
00:03:04.140 --> 00:03:07.850
If we log out, and log in with an invalid password,

55
00:03:07.850 --> 00:03:11.930
you can see the browser pops up the basic authentication login.

56
00:03:11.930 --> 00:03:16.850
It did this because the basic authentication entry point returned

57
00:03:16.850 --> 00:03:20.540
an unauthorized with a WWW‑Authenticate header.

58
00:03:20.540 --> 00:03:24.520
The browser sees this and automatically prompts the user for their credentials,

59
00:03:24.520 --> 00:03:25.920
but we don't want that.

60
00:03:25.920 --> 00:03:29.460
We want our single‑page application to prompt them for their credentials,

61
00:03:29.460 --> 00:03:30.220
hence,

62
00:03:30.220 --> 00:03:34.060
we can add our own authentication entry point to return

63
00:03:34.060 --> 00:03:37.180
an unauthorized 401 header instead.

64
00:03:37.180 --> 00:03:39.040
There, all done.

65
00:03:39.040 --> 00:03:42.320
Now, basic authentication works really well,

66
00:03:42.320 --> 00:03:45.770
but perhaps you need to include some additional information in your

67
00:03:45.770 --> 00:03:49.140
login requests other than the username and password.

68
00:03:49.140 --> 00:03:51.550
Hence, you might want to use formLogin.

69
00:03:51.550 --> 00:03:55.710
Now to achieve this, the security configuration will look very similar,

70
00:03:55.710 --> 00:04:02.300
apart from the formLogin builder where we also provide the loginProcessingUrl.

71
00:04:02.300 --> 00:04:05.550
And we no longer need a custom entry point.

72
00:04:05.550 --> 00:04:08.990
This is the endpoint our single‑page application submits

73
00:04:08.990 --> 00:04:11.390
the user credentials for authentication.

74
00:04:11.390 --> 00:04:12.240
Now,

75
00:04:12.240 --> 00:04:16.040
the main difference in our React demo app is that this time

76
00:04:16.040 --> 00:04:20.040
the login request is to an MVC endpoint,

77
00:04:20.040 --> 00:04:24.480
so a POST with form‑data, not REST JSON data.

78
00:04:24.480 --> 00:04:28.430
You can see the Content‑Type is form‑data,

79
00:04:28.430 --> 00:04:33.540
and we're including the username and password in the body of the request.

80
00:04:33.540 --> 00:04:34.280
That's it.

81
00:04:34.280 --> 00:04:38.350
This time the username and password authentication filter

82
00:04:38.350 --> 00:04:41.050
will intercept the authentication request,

83
00:04:41.050 --> 00:04:44.390
extract the credentials, and authenticate the user.

84
00:04:44.390 --> 00:04:46.520
Nice and simple.

85
00:04:46.520 --> 00:04:47.540
Next,

86
00:04:47.540 --> 00:04:51.720
let's wrap up and discuss where you can go for more information about more

87
00:04:51.720 --> 00:05:01.000
advanced topics for single‑page application security, like using stateless services, JWTs, and OAuth.

