1
00:00:01,740 --> 00:00:03,020
Throughout this course,

2
00:00:03,020 --> 00:00:07,290
the demo application we will secure with Spring Security is a

3
00:00:07,290 --> 00:00:10,640
Crypto Portfolio management application.

4
00:00:10,640 --> 00:00:15,860
Users can register and create a portfolio of crypto currencies to keep track of

5
00:00:15,860 --> 00:00:19,160
their value and brag about it to their friends and family,

6
00:00:19,160 --> 00:00:20,540
of course.

7
00:00:20,540 --> 00:00:26,550
Now let's say Victoria wants to access the application to view her portfolio.

8
00:00:26,550 --> 00:00:30,510
The application will first need to identify who she is in

9
00:00:30,510 --> 00:00:33,170
order to retrieve the direct portfolio.

10
00:00:33,170 --> 00:00:37,640
It also needs to verify she is really who she claims to be.

11
00:00:37,640 --> 00:00:40,640
This process is known as authentication,

12
00:00:40,640 --> 00:00:46,140
the process or action of verifying the identity of a user or a process.

13
00:00:46,140 --> 00:00:49,040
Spring Security has a class that encapsulates this,

14
00:00:49,040 --> 00:00:51,790
and it's called the authentication class.

15
00:00:51,790 --> 00:00:55,010
Now there are many ways to authenticate a user,

16
00:00:55,010 --> 00:00:59,000
and, out of the box, Spring Security supports basic,

17
00:00:59,000 --> 00:01:04,750
form, digest, certificates, and it's also very customizable,

18
00:01:04,750 --> 00:01:07,340
so you can implement your own solutions.

19
00:01:07,340 --> 00:01:11,940
If you look at the authentication object, you can see the principal field.

20
00:01:11,940 --> 00:01:16,570
The principal in Spring Security is basically the logged‑in user and

21
00:01:16,570 --> 00:01:20,440
hence often referred to as the authenticated principal.

22
00:01:20,440 --> 00:01:23,900
Now when a user accesses a web server, generally,

23
00:01:23,900 --> 00:01:25,710
it will create a session for them.

24
00:01:25,710 --> 00:01:29,040
Now once Spring Security authenticates a user,

25
00:01:29,040 --> 00:01:32,040
it will store the authentication object with the

26
00:01:32,040 --> 00:01:35,560
authentication principal in the session. The web server will

27
00:01:35,560 --> 00:01:37,910
then send a cookie to the user's browser,

28
00:01:37,910 --> 00:01:42,640
which will be included in all subsequent requests to the server by the browser.

29
00:01:42,640 --> 00:01:43,170
This way,

30
00:01:43,170 --> 00:01:47,440
the user will not have to reauthenticate for the duration of the session.

31
00:01:47,440 --> 00:01:51,840
Now the authenticated principal represents the user in the application,

32
00:01:51,840 --> 00:01:54,340
but it could also represent a non‑human entity,

33
00:01:54,340 --> 00:01:59,470
like maybe a service or a machine. And users can potentially have multiple

34
00:01:59,470 --> 00:02:03,740
accounts with an application, hence multiple principals.

35
00:02:03,740 --> 00:02:08,440
Maybe the user is an administrator in their day job and has an admin account,

36
00:02:08,440 --> 00:02:11,840
but also has a personal account to track their portfolio.

37
00:02:11,840 --> 00:02:15,800
Here, each principal has a different level of privilege and

38
00:02:15,800 --> 00:02:20,900
potentially authentication checks as the admin principal might

39
00:02:20,900 --> 00:02:23,840
require more scrutiny when authenticating.

40
00:02:23,840 --> 00:02:27,220
Now once Spring Security identifies the principal a request

41
00:02:27,220 --> 00:02:31,560
is for, it needs to determine what the principal can do and

42
00:02:31,560 --> 00:02:34,030
what resources it can access.

43
00:02:34,030 --> 00:02:38,150
Now this is known as authorization, the function of specifying

44
00:02:38,150 --> 00:02:41,540
access rights and privileges to resources.

45
00:02:41,540 --> 00:02:45,790
For example, Victoria is authorized to access her own portfolio,

46
00:02:45,790 --> 00:02:56,000
but she's not authorized to access Joe's or any other users. Next, let's take a closer look at the Spring Security project.

