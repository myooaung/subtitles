WEBVTT
1
00:00:00.982 --> 00:00:03.993
We can implement exponential back off in Spring Retry by swapping

2
00:00:03.993 --> 00:00:08.955
our fixed back off policy with an exponential back off policy and

3
00:00:08.955 --> 00:00:12.462
specifying the three setter methods, setInitialInterval,

4
00:00:12.462 --> 00:00:14.703
setMaxInterval, and setMultiplier.

5
00:00:14.703 --> 00:00:18.792
We are already familiar with initial interval and multiplier.

6
00:00:18.792 --> 00:00:22.285
SetMaxInterval basically allows us to specify a back off

7
00:00:22.285 --> 00:00:25.572
period ceiling such that if we reach it,

8
00:00:25.572 --> 00:00:27.846
the service will stop retrying.

9
00:00:27.846 --> 00:00:32.847
Let's get back to the code and implement exponential back off.

10
00:00:32.847 --> 00:00:34.933
Starting in our properties file,

11
00:00:34.933 --> 00:00:40.369
let's add three new properties called retry.exponential .initialBackoffInterval,

12
00:00:40.369 --> 00:00:45.157
which we'll set to 500, retry.exponential .maxBackoffInterval,

13
00:00:45.157 --> 00:00:50.052
which we'll set to 2000, and retry.exponential .backoffMultiplier,

14
00:00:50.052 --> 00:00:52.902
which we'll set to 1.8.

15
00:00:52.902 --> 00:00:55.037
Switching to our BassTrackerServiceApplication file,

16
00:00:55.037 --> 00:00:58.808
let's retrieve the properties we just added and pass

17
00:00:58.808 --> 00:01:01.340
them into the RetryTemplate bean.

18
00:01:01.340 --> 00:01:05.663
We then create a new ExponentialBackoffPolicy and setInitialInterval,

19
00:01:05.663 --> 00:01:09.672
maxInterval, and Multiplier to the properties we specified.

20
00:01:09.672 --> 00:01:13.130
The last thing to do is swap the fixedBackOffPolicy on our

21
00:01:13.130 --> 00:01:16.883
RetryTemplate with the new exponentialBackOffPolicy.

22
00:01:16.883 --> 00:01:19.402
Switching to lake-profile-service,

23
00:01:19.402 --> 00:01:22.334
we're keeping it the same as the fixedBackOffPolicy demo by

24
00:01:22.334 --> 00:01:26.353
throwing an exception on getLakeProfile.

25
00:01:26.353 --> 00:01:31.218
We will run it and then switch back to bass-tracker-service and run that.

26
00:01:31.218 --> 00:01:35.862
In the logs, we see that our backoff duration started at about 500 ms,

27
00:01:35.862 --> 00:01:41.923
then we multiplied that by 1.8 to get a backoff duration of about 900 ms,

28
00:01:41.923 --> 00:01:44.639
then we multiplied that by 1.8 to get a backoff

29
00:01:44.639 --> 00:01:47.653
duration of about 1640 milliseconds.

30
00:01:47.653 --> 00:01:49.093
How cool is that?

31
00:01:49.093 --> 00:01:54.106
At this point, feel free to add exponential back off to your resume skill list.

32
00:01:54.106 --> 00:01:55.010
I'm kidding, of course,

33
00:01:55.010 --> 00:02:00.123
but I hope you can see that Spring Retry support for custom policies is no joke.

34
00:02:00.123 --> 00:02:02.846
Let's see what custom policies can do for SaaS Bass's

35
00:02:02.846 --> 00:02:09.000
pain points and see if we can finally take care of their pesky resource race condition.

