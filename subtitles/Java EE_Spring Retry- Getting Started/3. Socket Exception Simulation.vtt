WEBVTT
1
00:00:01.015 --> 00:00:04.212
Now that we've implemented a basic Spring Retry configuration,

2
00:00:04.212 --> 00:00:10.538
let's examine which of SaaS Bass's pain points are alleviated by retry.

3
00:00:10.538 --> 00:00:14.288
We'll start by simulating socket exceptions.

4
00:00:14.288 --> 00:00:19.996
In SaaS Bass's case, socket exceptions are caused by a temporary server overload.

5
00:00:19.996 --> 00:00:23.142
The server is shedding incoming requests until it

6
00:00:23.142 --> 00:00:25.688
has the resources to handle them.

7
00:00:25.688 --> 00:00:31.668
Let's see if adding basic retry has alleviated this pain point for SaaS Bass.

8
00:00:31.668 --> 00:00:34.591
To follow along with this demo for the Bass Tracker Service,

9
00:00:34.591 --> 00:00:39.862
check out the adding-retry-to-rest-template-socket-exception branch.

10
00:00:39.862 --> 00:00:41.422
For the Lake Profile Service,

11
00:00:41.422 --> 00:00:46.358
also check out the adding-retry-to-rest-template-socket-exception branch.

12
00:00:46.358 --> 00:00:48.717
Here in the Lake Profile Service's Endpoint class,

13
00:00:48.717 --> 00:00:53.647
we've simulated a temporary server overload by throwing a socket exception

14
00:00:53.647 --> 00:00:57.421
the first two times each POST and GET request are made.

15
00:00:57.421 --> 00:00:59.928
After the first two attempts,

16
00:00:59.928 --> 00:01:03.958
the GET and POST endpoints can proceed handling their requests.

17
00:01:03.958 --> 00:01:07.097
Let's run the lake-profile-service.

18
00:01:07.097 --> 00:01:10.789
Now, let's switch over to the bass-tracker-service.

19
00:01:10.789 --> 00:01:13.403
We haven't made any modifications for this simulation,

20
00:01:13.403 --> 00:01:17.125
so we should expect that the CommandLineRunner will attempt to

21
00:01:17.125 --> 00:01:19.917
create the LakeProfile in a separate thread,

22
00:01:19.917 --> 00:01:24.749
wait for 3 seconds, and then try to get the newly created profile.

23
00:01:24.749 --> 00:01:28.676
If either request fails, it should retry up to three times.

24
00:01:28.676 --> 00:01:32.290
Let's run it and see what happens.

25
00:01:32.290 --> 00:01:35.363
Sure enough, we see that each request is attempted three times,

26
00:01:35.363 --> 00:01:39.588
and because we set up the Lake Profile endpoints to throw a socket exception,

27
00:01:39.588 --> 00:01:43.915
only the first two attempts were able to create and get the Lake Profile

28
00:01:43.915 --> 00:01:50.000
successfully in the event of a temporary socket exception, thanks to Spring Retry.

