1
00:00:01,366 --> 00:00:04,265
To add Spring Retry to the Bass Tracker Service's LakeProfileClient,

2
00:00:04,265 --> 00:00:09,800
we first need to add Spring Retry to our Maven dependencies.

3
00:00:09,800 --> 00:00:10,089
Then,

4
00:00:10,089 --> 00:00:14,058
we will create a RetryTemplate bean in our application bean config file

5
00:00:14,058 --> 00:00:17,702
and pass it into the LakeProfileClient's constructor.

6
00:00:17,702 --> 00:00:18,325
And lastly,

7
00:00:18,325 --> 00:00:20,816
we'll wrap the RestTemplate methods in our

8
00:00:20,816 --> 00:00:24,580
LakeProfileClient with the default RetryTemplate.

9
00:00:24,580 --> 00:00:27,681
To follow along with this demo, for the Bass Tracker Service,

10
00:00:27,681 --> 00:00:30,303
check out either the initial branch if you want to code along,

11
00:00:30,303 --> 00:00:33,087
or the final branch if you want to follow along.

12
00:00:33,087 --> 00:00:36,226
For the Lake Profile Service, we're not making any changes in this module,

13
00:00:36,226 --> 00:00:38,641
so check out the branch with the module name.

14
00:00:38,641 --> 00:00:41,053
If you have no idea what I'm talking about,

15
00:00:41,053 --> 00:00:45,674
please refer to the Setup clip in the Getting Started with Spring Retry module,

16
00:00:45,674 --> 00:00:47,952
which will walk you through cloning the repositories

17
00:00:47,952 --> 00:00:49,797
and setting up the demo services.

18
00:00:49,797 --> 00:00:51,904
If you're on the correct branch,

19
00:00:51,904 --> 00:00:56,161
let's open the Bass Tracker Service and get started.

20
00:00:56,161 --> 00:00:57,751
Here in our bass-tracker-service,

21
00:00:57,751 --> 00:01:00,694
the first thing we want to do is navigate to our Maven

22
00:01:00,694 --> 00:01:03,580
pom.xml file and find our dependencies block.

23
00:01:03,580 --> 00:01:07,419
Then, we'll add the Spring Retry dependency.

24
00:01:07,419 --> 00:01:11,026
Next, we'll navigate to the bass-tracker- service application file,

25
00:01:11,026 --> 00:01:15,051
which is where we define our application beans.

26
00:01:15,051 --> 00:01:19,361
Because we added the Spring Retry dependency to our pom.xml file,

27
00:01:19,361 --> 00:01:25,538
we can now create a new RetryTemplate bean and import the RetryTemplate class.

28
00:01:25,538 --> 00:01:27,875
This RetryTemplate bean doesn't have any customizations,

29
00:01:27,875 --> 00:01:32,853
so it effectively inherits all retry defaults that we mentioned before.

30
00:01:32,853 --> 00:01:33,081
Namely,

31
00:01:33,081 --> 00:01:39,111
that it doesn't have a back off period and its max attempts is default to 3.

32
00:01:39,111 --> 00:01:39,620
While we're here,

33
00:01:39,620 --> 00:01:42,136
let's take the opportunity to pass the RetryTemplate

34
00:01:42,136 --> 00:01:45,307
bean to the LakeProfileClient bean.

35
00:01:45,307 --> 00:01:45,513
Now,

36
00:01:45,513 --> 00:01:48,318
let's switch over to the LakeProfileClient class and

37
00:01:48,318 --> 00:01:52,151
add RetryTemplate to its constructor.

38
00:01:52,151 --> 00:01:54,425
Now that we have a RetryTemplate in the LakeProfileClient,

39
00:01:54,425 --> 00:01:59,418
let's wrap the getForObject method in the RestTemplate's execute method.

40
00:01:59,418 --> 00:02:03,106
We'll also add a log when a GET request is attempted

41
00:02:03,106 --> 00:02:05,901
or a POST request is attempted.

42
00:02:05,901 --> 00:02:09,784
Then, we'll do the same on the postForObject method.

43
00:02:09,784 --> 00:02:10,221
That's it.

44
00:02:10,221 --> 00:02:14,587
That's how simple it is to add retry to an existing HTTP client.

45
00:02:14,587 --> 00:02:16,950
Now, let's see it in action.

46
00:02:16,950 --> 00:02:21,008
The simplest way to test if retry is working is to run the Bass Tracker

47
00:02:21,008 --> 00:02:23,897
Service without the Lake Profile Service running.

48
00:02:23,897 --> 00:02:26,504
This effectively simulates the Lake Profile server being down,

49
00:02:26,504 --> 00:02:29,543
so we should see that the Bass Tracker Service makes

50
00:02:29,543 --> 00:02:32,820
three createLakeProfile requests, and then fails,

51
00:02:32,820 --> 00:02:36,201
and three getLakeProfile requests, and then fails.

52
00:02:36,201 --> 00:02:39,080
Let's run it and see what happens.

53
00:02:39,080 --> 00:02:42,515
In the logs, we can count three create attempts with a failure,

54
00:02:42,515 --> 00:02:47,000
and three get attempts with a failure. Very cool.

