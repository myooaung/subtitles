1
00:00:00,826 --> 00:00:02,460
Last, but not least,

2
00:00:02,460 --> 00:00:07,619
let's simulate a resource race condition and see if adding basic Spring

3
00:00:07,619 --> 00:00:11,508
Retry can alleviate this pain point for SaaS Bass.

4
00:00:11,508 --> 00:00:12,796
As a reminder,

5
00:00:12,796 --> 00:00:16,356
resource race conditions are a hazard introduced by the

6
00:00:16,356 --> 00:00:19,781
asynchronous nature of microservice environments.

7
00:00:19,781 --> 00:00:22,965
To follow along with this demo, for the Bass Tracker Service,

8
00:00:22,965 --> 00:00:27,707
check out the adding-retry-to-rest-template-resource- race-condition branch.

9
00:00:27,707 --> 00:00:29,307
For the Lake Profile Service,

10
00:00:29,307 --> 00:00:31,866
also check out the adding-retry-to-rest-

11
00:00:31,866 --> 00:00:36,605
template-resource-race-condition branch.

12
00:00:36,605 --> 00:00:38,466
Starting with the lake-profile-service,

13
00:00:38,466 --> 00:00:41,306
you can see that we haven't made any changes from the

14
00:00:41,306 --> 00:00:46,495
module branch for this simulation, so let's go ahead and run it.

15
00:00:46,495 --> 00:00:48,696
Switching over to the bass-tracker-service,

16
00:00:48,696 --> 00:00:50,235
we've made one simple change,

17
00:00:50,235 --> 00:00:53,777
and that is to bypass the sleep between creating and

18
00:00:53,777 --> 00:00:56,686
getting the LakeProfile resource.

19
00:00:56,686 --> 00:01:00,962
This simulates a truly asynchronous situation in which the resource is

20
00:01:00,962 --> 00:01:05,497
being both created and requested at the same time.

21
00:01:05,497 --> 00:01:07,847
Let's run the service and see what happens.

22
00:01:07,847 --> 00:01:08,386
Oh no.

23
00:01:08,386 --> 00:01:11,380
It seems we've found the pain point that can't be alleviated

24
00:01:11,380 --> 00:01:14,537
with a basic Spring Retry implementation.

25
00:01:14,537 --> 00:01:15,592
As you can see,

26
00:01:15,592 --> 00:01:20,139
we get a 404 not found error because the resource can't be created fast

27
00:01:20,139 --> 00:01:24,346
enough before Spring Retry stops attempting to get it.

28
00:01:24,346 --> 00:01:25,970
This is because, by default,

29
00:01:25,970 --> 00:01:30,655
Spring Retry does not wait or back off in between attempts.

30
00:01:30,655 --> 00:01:31,748
Not to worry though,

31
00:01:31,748 --> 00:01:35,217
in the next module we're going to add custom retry policies and,

32
00:01:35,217 --> 00:01:41,000
spoiler alert, fix this pain point for SaaS Bass. Stay tuned.

