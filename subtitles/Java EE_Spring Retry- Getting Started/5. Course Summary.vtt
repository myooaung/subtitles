WEBVTT
1
00:00:00.666 --> 00:00:05.759
To wrap up this course, let's revisit the key benefits to using Spring Retry.

2
00:00:05.759 --> 00:00:09.384
Spring Retry is a top-level Spring project at the same level as

3
00:00:09.384 --> 00:00:12.294
the likes of Spring Framework and Spring Boot.

4
00:00:12.294 --> 00:00:14.936
That should give you confidence knowing that it's

5
00:00:14.936 --> 00:00:16.958
well implemented and supported.

6
00:00:16.958 --> 00:00:20.119
Spring Retry provides a standardized platform for retry

7
00:00:20.119 --> 00:00:22.608
that is also highly configurable.

8
00:00:22.608 --> 00:00:25.608
Spring Retry wraps existing microservice clients so there's no

9
00:00:25.608 --> 00:00:28.556
need to start from scratch to implement retry.

10
00:00:28.556 --> 00:00:29.121
Lastly,

11
00:00:29.121 --> 00:00:33.580
Spring Retry follows familiar Spring and Java integration and configuration

12
00:00:33.580 --> 00:00:37.557
patterns using bean dependency injection with properties files,

13
00:00:37.557 --> 00:00:42.048
so adding it should feel familiar to most Java developers.

14
00:00:42.048 --> 00:00:42.738
In this course,

15
00:00:42.738 --> 00:00:47.038
we've taken a realistic microservice application from good to great.

16
00:00:47.038 --> 00:00:50.049
We increased its reliability tremendously and removed three

17
00:00:50.049 --> 00:00:52.591
common pain points thanks to Spring Retry.

18
00:00:52.591 --> 00:00:57.180
We achieved this by introducing retry in their existing RestTemplate client,

19
00:00:57.180 --> 00:01:01.295
by adding custom retry policies for back off and max attempts,

20
00:01:01.295 --> 00:01:04.680
and by specifying retryable exceptions.

21
00:01:04.680 --> 00:01:05.849
So, what's next?

22
00:01:05.849 --> 00:01:08.538
My challenge to you is to go and do.

23
00:01:08.538 --> 00:01:12.508
Look at your existing microservice applications and implement Spring Retry.

24
00:01:12.508 --> 00:01:15.326
You'll be amazed at how easy it can be.

25
00:01:15.326 --> 00:01:18.409
I'd also encourage you to look at Pluralsight's Core Spring path to fill

26
00:01:18.409 --> 00:01:22.081
in any gaps you may have with Spring technologies.

27
00:01:22.081 --> 00:01:29.000
I sincerely thank you for taking this journey with me, and wish you the best in your technology learning endeavors.

