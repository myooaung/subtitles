WEBVTT
1
00:00:00.180 --> 00:00:06.820
And there we see the title and body values that we just submitted, we also see the created date fields.

2
00:00:07.200 --> 00:00:14.550
However, there's one very important thing missing from this document, and that is the author of this

3
00:00:14.550 --> 00:00:15.300
document.

4
00:00:15.690 --> 00:00:16.020
Right.

5
00:00:16.020 --> 00:00:21.410
We want to keep track of which user account created, which posts documents.

6
00:00:21.960 --> 00:00:28.470
So we would want another field here named author, but we would not want to set its value to the user's

7
00:00:28.470 --> 00:00:33.240
user name because in most applications, users can change their user name.

8
00:00:33.660 --> 00:00:36.630
So we would want it to be something that never changes.

9
00:00:36.900 --> 00:00:43.950
Well, remember that in Mongo DB, whenever you create a new document, it's going to generate an underscore

10
00:00:43.950 --> 00:00:45.180
ID for you.

11
00:00:45.570 --> 00:00:53.640
So for an example, if we look at our users collection, I have this document that represents my brat

12
00:00:53.640 --> 00:00:54.570
account user.

13
00:00:55.050 --> 00:01:00.240
And just like any other Mongo DB document, it has a unique ID value.

14
00:01:00.660 --> 00:01:06.600
This is what we would want to store as the author value within a post document.

15
00:01:07.050 --> 00:01:08.970
So how can we set this up?

16
00:01:09.150 --> 00:01:12.080
Well, let's jump in to our post comptroller file.

17
00:01:12.870 --> 00:01:20.430
So the post controller within the create function, when we say let lowercase post equal a new instance

18
00:01:20.430 --> 00:01:26.730
of uppercase post, we're already passing in this submitted form data and we could just include a comma

19
00:01:26.730 --> 00:01:31.380
here and then also pass in the current user ID from session data.

20
00:01:31.770 --> 00:01:37.830
Now, if we're going to do that, we need to make sure that whenever a user logs in or registers that

21
00:01:37.830 --> 00:01:43.520
we're actually storing that ID value in the current session data to make sure that we're doing that.

22
00:01:43.530 --> 00:01:46.220
Let's jump in to our user controller file.

23
00:01:46.860 --> 00:01:54.360
So in our controllers folder, user controller within the login function, if the login is successful,

24
00:01:54.540 --> 00:02:00.570
we are setting up a bit of session data, as we can see here now, currently we're only assigning values

25
00:02:00.570 --> 00:02:07.500
for Avatar and username, but we would also want to store their unique underscore ID.

26
00:02:07.920 --> 00:02:15.090
So right after user data username, let's just add a comma and let's add a property named Underscore

27
00:02:15.090 --> 00:02:21.080
ID and let's just set it to user data dot underscore ID.

28
00:02:21.720 --> 00:02:26.410
Let's also go do the same thing within the register function in this same file.

29
00:02:27.780 --> 00:02:30.390
So in user controller, here is our register function.

30
00:02:30.870 --> 00:02:34.330
If a user successfully registers, we're going to set a bit of session data.

31
00:02:34.740 --> 00:02:42.390
So at the end of this, let's just add on another property and say underscore ID equals user dot data

32
00:02:42.390 --> 00:02:44.310
dot underscore ID.

33
00:02:44.760 --> 00:02:46.530
Let's go ahead and save this.

34
00:02:46.680 --> 00:02:53.160
And now within our post controller we can leverage this underscore ID property that's going to exist

35
00:02:53.160 --> 00:02:54.500
in session data.

36
00:02:55.050 --> 00:03:01.830
So back in post controller, when we say let post equal a new instance of uppercase post right after

37
00:03:01.830 --> 00:03:04.410
request body, just include a comma.

38
00:03:04.410 --> 00:03:12.840
And the second argument, let's give it request session dot user dot underscore ID, let's save that.

39
00:03:12.840 --> 00:03:16.620
And then finally we just need to go leverage it within our post model.

40
00:03:16.840 --> 00:03:23.190
So in our post model, up at the very top within our constructor function right now we just have the

41
00:03:23.190 --> 00:03:29.520
one parameter to receive the incoming request body lets out a second parameter to receive that incoming

42
00:03:29.520 --> 00:03:30.360
user ID.

43
00:03:30.750 --> 00:03:32.190
You could name this anything you want.

44
00:03:32.190 --> 00:03:35.820
Let's just call it user ID within the constructor function.

45
00:03:35.820 --> 00:03:42.840
Let's store it so that we can access it from our other methods so we can say this dot user ID equals

46
00:03:42.840 --> 00:03:44.480
user ID, OK?

47
00:03:44.550 --> 00:03:50.130
And then within our cleanup function, within this area where we say get rid of any bogus properties,

48
00:03:50.280 --> 00:03:53.280
we've already added on a property of created date.

49
00:03:53.700 --> 00:03:58.680
I'm just treating this as an area where I can add on additional properties that weren't necessarily

50
00:03:58.680 --> 00:04:00.060
submitted by the user.

51
00:04:00.240 --> 00:04:08.160
So right after created date, let's just say comma and let's add a property named author and let's give

52
00:04:08.160 --> 00:04:11.820
it a value of this dot user ID.

53
00:04:12.330 --> 00:04:18.660
However, within Mongo DB, it's a best practice to not just store this as a simple string of text,

54
00:04:19.020 --> 00:04:23.850
but to actually store it as an object ID object type.

55
00:04:24.240 --> 00:04:30.960
Essentially Mongu DB has a special way of treating ID values and to honor that, here's what we can

56
00:04:30.960 --> 00:04:33.330
do up at the very top of this file.

57
00:04:33.690 --> 00:04:42.480
Right after line number one, let's add a new line and say const object ID and let's just set this to

58
00:04:42.480 --> 00:04:47.340
equal and then let's require in the Mongu DB package.

59
00:04:47.520 --> 00:04:49.530
But we don't need the entire package here.

60
00:04:49.860 --> 00:04:52.650
We're just interested in a certain constructor function.

61
00:04:52.950 --> 00:04:56.070
So at the end here we can just say dot object.

62
00:04:56.070 --> 00:04:59.950
I said essentially this is a tool from within the Mongo de.

63
00:05:00.120 --> 00:05:08.280
Package and we can pass it a simple string of text and it will return that as a special object ID object

64
00:05:08.280 --> 00:05:08.680
type.

65
00:05:09.060 --> 00:05:11.370
So now we just need to go leverage this.

66
00:05:12.120 --> 00:05:19.020
So back down here where we are setting author to this user ID instead, what we would want to do, let's

67
00:05:19.020 --> 00:05:21.330
delete that and say author should equal.

68
00:05:22.050 --> 00:05:28.200
Let's call the object I.D. tool and give it this dot user ID.

69
00:05:28.650 --> 00:05:32.850
So that will return an ID object that Mongo DB is more than happy with.

70
00:05:33.240 --> 00:05:35.860
Lets go ahead and save this and test it out.

71
00:05:37.170 --> 00:05:43.100
Now back in the browser we are going to want to sign out and then sign back in before trying this.

72
00:05:43.440 --> 00:05:50.190
That way our server has a chance to regenerate a new session for us using that new piece of session

73
00:05:50.190 --> 00:05:51.390
data that we are storing.

74
00:05:51.570 --> 00:05:51.990
Right.

75
00:05:52.020 --> 00:05:53.960
The ID of the current user.

76
00:05:54.270 --> 00:05:55.710
So let's log back in.

77
00:06:00.440 --> 00:06:06.830
OK, and then I want to create a post, let's say my second post for the content.

78
00:06:07.370 --> 00:06:09.380
This is a wonderful post.

79
00:06:09.860 --> 00:06:11.540
Go ahead and submit that.

80
00:06:12.980 --> 00:06:18.500
OK, now let's check our database, so within my database, I'm interested in the Post's collection.

81
00:06:19.430 --> 00:06:27.440
So it now has two documents, here is my second post and perfect, we see it has a field named author,

82
00:06:27.740 --> 00:06:37.250
which is a Mongo DB Object ID type, and this value perfectly matches the Brad user accounts ID perfect.

83
00:06:37.430 --> 00:06:42.500
Now we have a way of keeping track which user account created which post.

84
00:06:42.920 --> 00:06:47.900
While we're at it, let's go ahead and delete the post document that does not have an author field.

85
00:06:48.920 --> 00:06:51.620
So I'm just going to click the trashcans symbol on that click delete.

86
00:06:53.380 --> 00:06:58.310
Cool, that's going to bring this lesson to a close in our next lesson.

87
00:06:58.480 --> 00:07:04.900
We are going to work on the ability to view a post within our Web app instead of just this private Mongo

88
00:07:04.900 --> 00:07:06.190
DB database screen.

89
00:07:06.640 --> 00:07:06.960
Right.

90
00:07:06.970 --> 00:07:09.880
We would want each post to have its own unique.

91
00:07:09.880 --> 00:07:12.980
You are well, this should be a lot of fun to set up.

92
00:07:13.000 --> 00:07:15.550
So let's keep things rolling and I'll see you then.
