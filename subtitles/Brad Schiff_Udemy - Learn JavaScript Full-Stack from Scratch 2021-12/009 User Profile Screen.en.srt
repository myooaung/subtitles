1
00:00:01,620 --> 00:00:02,640
Hello, everyone.

2
00:00:02,880 --> 00:00:10,080
In this lesson, we are going to work on creating a user profile screen, so, for example, when you're

3
00:00:10,080 --> 00:00:17,070
logged in, you would always be able to click on your profile photo in the top right to visit your profile,

4
00:00:17,550 --> 00:00:23,010
or if you're looking at a post created by someone else, you would also see their author name listed

5
00:00:23,010 --> 00:00:28,170
here and you could click on that link to go to their profile visually.

6
00:00:28,170 --> 00:00:31,440
A profile screen should look something like this.

7
00:00:32,070 --> 00:00:38,520
So for our first step in this lesson, let's create a new Ejaz template to create this interface.

8
00:00:39,180 --> 00:00:42,390
Now, again, we're not going to type this HTML out by hand.

9
00:00:42,700 --> 00:00:44,290
Let's just copy and paste it.

10
00:00:44,700 --> 00:00:50,610
As always, you can look within our repository under complex app and HTML templates.

11
00:00:50,890 --> 00:01:01,890
And right now we are interested in the template named profile dash posts dot html to open that up and

12
00:01:01,890 --> 00:01:08,760
then you can click raw and we're not interested in the header or footer, we just want the unique middle

13
00:01:08,760 --> 00:01:09,860
portion of the code.

14
00:01:10,320 --> 00:01:17,100
So find where it says header ends here and only begin selecting right below that line and select until

15
00:01:17,100 --> 00:01:21,330
you see this message that says footer begins.

16
00:01:21,330 --> 00:01:23,770
Just select right before that begins.

17
00:01:24,370 --> 00:01:31,380
OK, let's copy that into our clipboard and then in our text editor within our Views folder, let's

18
00:01:31,380 --> 00:01:32,540
create a new file.

19
00:01:34,050 --> 00:01:37,860
Let's name this file profile Dot Aeger.

20
00:01:37,920 --> 00:01:38,460
Yes.

21
00:01:39,660 --> 00:01:44,040
Go ahead and paste in your clipboard up at the very, very top of this file.

22
00:01:44,040 --> 00:01:46,830
Let's add a new line and let's include our header.

23
00:01:47,070 --> 00:01:55,730
So it's less than percentage Dasch include and look in the includes folder for the file named header.

24
00:01:56,370 --> 00:01:58,380
Let's close out this dynamic tag.

25
00:01:58,620 --> 00:02:01,630
Let's just copy and paste this so we can do the same thing for the footer.

26
00:02:02,010 --> 00:02:07,710
Copy that down at the very bottom, pasted in and change header to footer.

27
00:02:08,940 --> 00:02:11,400
OK, let's go ahead and save this.

28
00:02:11,700 --> 00:02:17,580
And now let's talk about what you r-al you should be able to visit a user's profile from.

29
00:02:18,150 --> 00:02:26,430
So for example for posts we said slash post, slash whatever post you're looking for, how about four

30
00:02:26,430 --> 00:02:32,520
profiles, its slash profile slash and then their username.

31
00:02:33,300 --> 00:02:36,750
So to set that up, let's jump into our router file.

32
00:02:37,260 --> 00:02:42,420
So within the root of our project, let's open up router JS.

33
00:02:44,130 --> 00:02:51,270
I suppose we could say a user profile screen would fall under a user related route, but just to stay

34
00:02:51,270 --> 00:02:58,650
organized, maybe under that we could create a separate comment and say profile related routes under

35
00:02:58,650 --> 00:02:59,490
this new comment.

36
00:02:59,490 --> 00:03:09,930
Let's say router, dot git and for the route, let's say slash profile slash and then to make something

37
00:03:09,930 --> 00:03:15,870
dynamic we can say colon and then we can make up a name, let's call it user name.

38
00:03:16,470 --> 00:03:22,080
OK, then after the closing quote, let's include a comma and include a function that we want to run

39
00:03:22,200 --> 00:03:23,220
for this route.

40
00:03:23,760 --> 00:03:25,970
Let's actually list two functions here.

41
00:03:25,980 --> 00:03:29,580
So first, let's dig into our user controller.

42
00:03:30,030 --> 00:03:38,760
And this function doesn't exist yet, but we can create it very shortly and let's call it if user exists.

43
00:03:39,300 --> 00:03:46,680
OK, then let's include a comma and then we would want to run another function, let's say user controller

44
00:03:47,040 --> 00:03:47,580
DOT.

45
00:03:48,300 --> 00:03:55,410
And again, this function doesn't exist yet, but let's imagine profile posts screen.

46
00:03:56,100 --> 00:03:58,650
All right, let's go ahead and save this file.

47
00:03:58,860 --> 00:04:03,570
And now we better go into our user controller and create these matching function names.

48
00:04:03,780 --> 00:04:13,680
So if user exists and profile posts screen so within our controllers folder, let's open up user controller

49
00:04:13,680 --> 00:04:14,820
dot js.

50
00:04:15,750 --> 00:04:20,130
Let's scroll down to the bottom and let's create a new function.

51
00:04:20,130 --> 00:04:31,170
So exports dot if user exists and let's set that to equal a function within the parentheses for this

52
00:04:31,170 --> 00:04:31,590
function.

53
00:04:31,590 --> 00:04:38,790
Let's not only include request and response, but also include next within the body of this function.

54
00:04:39,000 --> 00:04:41,770
For now, let's just immediately call next.

55
00:04:41,970 --> 00:04:45,330
So essentially at this moment this function is completely pointless.

56
00:04:45,630 --> 00:04:51,600
But a bit later in this lesson, we will circle back to this and actually do something interesting and

57
00:04:51,600 --> 00:04:54,120
worthwhile before calling next.

58
00:04:54,720 --> 00:04:57,960
For the time being, let's create another function in this file.

59
00:04:58,110 --> 00:05:00,870
So down here, let's say exports dot.

60
00:05:01,980 --> 00:05:11,550
Profile posts screen, and let's set that to equal a function within the parentheses for this function,

61
00:05:11,550 --> 00:05:14,130
it only needs request and response.

62
00:05:14,790 --> 00:05:19,440
OK, and then in the body of this function, let's just render our new profile template.

63
00:05:19,800 --> 00:05:24,730
So response render in the name of that was simply profile.

64
00:05:25,800 --> 00:05:28,090
Let's go ahead and save this and test it out.

65
00:05:28,560 --> 00:05:38,010
So back in the browser, if I visit a U rl of localhost, call in three thousand slash profile slash

66
00:05:38,010 --> 00:05:39,890
and then just choose random characters.

67
00:05:41,910 --> 00:05:42,270
Cool.

68
00:05:42,270 --> 00:05:43,470
We see that new template.

69
00:05:43,800 --> 00:05:47,660
Now obviously this is all just fake, hard coded data at the moment.

70
00:05:48,120 --> 00:05:54,150
So the question becomes, how do we pull in real relevant data for whichever user you're looking for?

71
00:05:54,510 --> 00:05:57,460
Well, let's divide that task up into two parts.

72
00:05:57,810 --> 00:06:01,070
That's why I had us create two different functions.

73
00:06:01,710 --> 00:06:08,340
So first, within our if user exist function, let's get rid of this next call so we have a clean slate

74
00:06:08,340 --> 00:06:08,760
again.

75
00:06:09,300 --> 00:06:18,350
And let's begin by pretending our uppercase user model has a function named find by user name.

76
00:06:19,080 --> 00:06:24,120
OK, and then we would pass that the user name that's included at the end of the current U.

77
00:06:24,120 --> 00:06:24,620
RL.

78
00:06:25,380 --> 00:06:26,970
So to get that ending U.

79
00:06:26,970 --> 00:06:32,620
RL segment, we can just say request forams dot username.

80
00:06:33,240 --> 00:06:38,370
Now we have not set up this function yet within our user model, but you can imagine that when we do

81
00:06:38,370 --> 00:06:42,440
in just a couple of moments, we can set it up so that it returns a promise.

82
00:06:42,870 --> 00:06:49,800
So if this is going to return a promise, then at the end of it we can just say dot then dot catch within

83
00:06:49,800 --> 00:06:52,110
both the then and catch parentheses.

84
00:06:52,110 --> 00:06:53,610
Let's provide functions.

85
00:06:54,150 --> 00:07:00,750
So function parentheses, curly brackets, dropdown within catch function, parentheses, curly brackets.

86
00:07:01,200 --> 00:07:08,010
OK, now if our promise resolves we can set it up so that it resolves with the value of the user document

87
00:07:08,010 --> 00:07:13,800
that it found in the database that matches the requested username that would get passed into this function.

88
00:07:13,810 --> 00:07:18,450
So let's receive it with a parameter here and say user document.

89
00:07:18,810 --> 00:07:25,730
And then within this function, let's store that user document that we just found based on username.

90
00:07:25,980 --> 00:07:30,980
Let's store it somewhere so that the next function for this route can access it.

91
00:07:31,320 --> 00:07:35,460
So what we can do is just create a new property on the request object.

92
00:07:35,710 --> 00:07:42,750
We could name this whatever we want, but let's name it profile user and just set that to equal the

93
00:07:42,750 --> 00:07:44,100
document that we just found.

94
00:07:44,100 --> 00:07:50,000
So user document, OK, right after this line then we can call next.

95
00:07:50,640 --> 00:07:52,330
OK, and what about the catch.

96
00:07:52,740 --> 00:08:00,480
Well if this find by username promis rejects or fails, that means there is no matching user in our

97
00:08:00,480 --> 00:08:01,110
database.

98
00:08:01,350 --> 00:08:06,150
So what we'd want to do here is just render a 404 or page not found screen.

99
00:08:06,300 --> 00:08:12,240
So response dot render and let's choose the 404 template.

100
00:08:12,720 --> 00:08:13,860
Let's save this.

101
00:08:13,860 --> 00:08:20,280
But before we test it out, let's go and do our user model and create a function with this name find

102
00:08:20,280 --> 00:08:21,240
by user name.

103
00:08:21,990 --> 00:08:26,350
So within our models folder, let's jump in to uppercase user J.

104
00:08:26,400 --> 00:08:29,070
Yes, let's scroll down to the bottom.

105
00:08:31,230 --> 00:08:38,670
And right before this closing module dot exports equals user line right above that, let's say uppercase

106
00:08:38,670 --> 00:08:39,360
user.

107
00:08:40,020 --> 00:08:44,790
And we're not taking an object oriented approach here, so we don't need to add it to the prototype.

108
00:08:44,790 --> 00:08:51,090
We can literally just say uppercase user dot find by user name.

109
00:08:51,810 --> 00:08:57,000
Let's set this to equal a function within the parentheses for this function.

110
00:08:57,000 --> 00:09:00,090
Let's include a parameter, let's name it user name.

111
00:09:00,750 --> 00:09:01,020
Right.

112
00:09:01,020 --> 00:09:05,900
Because our controller is going to pass in whatever username is at the end of the euro.

113
00:09:06,330 --> 00:09:10,980
OK, now within the body of this function, we want it to return a promise.

114
00:09:11,220 --> 00:09:16,770
So return new promise within these parentheses.

115
00:09:16,770 --> 00:09:24,150
We want to be sure to include, resolve and reject, OK, within the body of this function, let's first

116
00:09:24,150 --> 00:09:29,370
check to make sure that whatever is getting passed in as the username, let's make sure that it's just

117
00:09:29,370 --> 00:09:30,600
a string of text.

118
00:09:30,870 --> 00:09:36,720
If a malicious user tried to pass in an object, we would not want to pass that on to Mongo DB.

119
00:09:37,170 --> 00:09:47,580
So let's say if parentheses curly brackets within the if let's say if type of username if that does

120
00:09:47,580 --> 00:09:54,810
not equal a string, well then in the if block we would just immediately want to reject.

121
00:09:54,990 --> 00:10:00,390
And also after that we'd want to return to prevent the further execution of this function.

122
00:10:01,400 --> 00:10:04,130
OK, but below the closing of this block.

123
00:10:04,880 --> 00:10:09,920
Well, we know that that username is just an innocent string of text, so let's go ahead and query our

124
00:10:09,920 --> 00:10:17,330
database to see if there's a matching username document so we can use our users collection object.

125
00:10:18,140 --> 00:10:21,680
And let's look inside it and call its find one method.

126
00:10:22,340 --> 00:10:23,470
Within these parentheses.

127
00:10:23,480 --> 00:10:27,940
We include an object and we tell Mongo DB what we're trying to find.

128
00:10:28,430 --> 00:10:35,720
So we would want to document where the user name field matches whatever username value was at the end

129
00:10:35,720 --> 00:10:36,580
of the URL.

130
00:10:36,590 --> 00:10:37,830
So username.

131
00:10:38,900 --> 00:10:42,610
Now we know that this Mongo DB method is going to return a promise.

132
00:10:42,860 --> 00:10:48,200
So at the end of this line, let's just say dot then dot catch.

133
00:10:48,950 --> 00:10:52,460
Let's provide functions within both of those sets of parentheses.

134
00:10:55,670 --> 00:10:59,280
So that's then let's do the same thing for ketch include a function.

135
00:10:59,960 --> 00:11:05,230
Now if this Mongo DB method rejects, that does not mean that it couldn't find a matching document.

136
00:11:05,450 --> 00:11:08,350
That means that it actually ran into some sort of error.

137
00:11:08,930 --> 00:11:14,660
If that's the case, let's just reject technically, this wouldn't be rejecting because we couldn't

138
00:11:14,660 --> 00:11:20,690
find a user ID be rejecting for some sort of unexpected technical error or database connection problem.

139
00:11:21,140 --> 00:11:26,390
But as far as the end users of our application are concerned, they can just see a 404 screen for the

140
00:11:26,390 --> 00:11:27,010
time being.

141
00:11:27,590 --> 00:11:33,800
OK, but if the Mongo DB operation is successful and resolves well, it would resolve with the data

142
00:11:33,800 --> 00:11:34,490
it found.

143
00:11:34,500 --> 00:11:40,190
So potentially a document so we can receive that within these then function parentheses.

144
00:11:41,000 --> 00:11:44,680
Let's include a parameter and call it user doc, OK.

145
00:11:44,690 --> 00:11:48,100
And then within the body of this function, let's just write an if statement.

146
00:11:48,110 --> 00:11:54,620
So if parentheses curly brackets at the end of the if closing bracket, let's also include an else block

147
00:11:55,340 --> 00:12:03,230
and let's say if user doc exists, if it's not empty, well then we would want our promise to resolve

148
00:12:03,590 --> 00:12:07,670
or else if it couldn't find a matching user we would want to reject.

149
00:12:08,690 --> 00:12:14,570
Now on this line where we resolve, we'd actually want to resolve with a value within these parentheses,

150
00:12:15,140 --> 00:12:21,590
because if we successfully found a user, our controller is going to want to save that user data onto

151
00:12:21,590 --> 00:12:28,370
the request object so that we can use it later to actually display the profile user's user name and

152
00:12:28,370 --> 00:12:33,940
their avatar and also know their IDs so that we can find posts written by them.

153
00:12:34,640 --> 00:12:40,760
Now, we could just resolve with the entire user document, but that contains information like their

154
00:12:40,760 --> 00:12:41,720
password.

155
00:12:42,380 --> 00:12:48,410
And even though that password value is hashed, I like to make it a practice of not letting my model

156
00:12:48,620 --> 00:12:54,490
unnecessarily leak out or expose data that I really don't want it to into the controller.

157
00:12:55,040 --> 00:13:01,460
So what I'm going to do right above this resolve line, still within the if block, I'm just going to

158
00:13:01,460 --> 00:13:03,890
customize or clean up that user document.

159
00:13:03,900 --> 00:13:08,870
So let's say user doc equals a new instance of our user blueprint.

160
00:13:09,110 --> 00:13:11,150
Passed it in user doc.

161
00:13:11,810 --> 00:13:13,750
Let's give it a second argument of true.

162
00:13:14,000 --> 00:13:20,810
So this way we're taking that raw data from the database that has fields like username and email, and

163
00:13:20,810 --> 00:13:27,800
we're using that to create a new user document and we're feeding that into our user blueprint and saying

164
00:13:27,800 --> 00:13:28,210
true.

165
00:13:28,220 --> 00:13:33,620
So remember, that's going to automatically get the avatar based on their email address.

166
00:13:34,340 --> 00:13:42,330
OK, now after this, let's also say user doc equals and let's just spell out an object bit by bit.

167
00:13:42,680 --> 00:13:46,750
So this way we aren't passing the password or any other data into our controller.

168
00:13:47,240 --> 00:13:48,850
So what would we want this to have?

169
00:13:48,860 --> 00:13:55,250
Well, we'd want it to have an underscore I.D. so that later on in this request, we can look up posts

170
00:13:55,250 --> 00:13:56,240
by this user.

171
00:13:56,870 --> 00:14:01,900
So we could just say user doc dot data, dot underscore ID click, comma.

172
00:14:02,270 --> 00:14:04,340
We'd also want it to include their username.

173
00:14:04,340 --> 00:14:12,200
So username, Kolan user data, dot user name, and we'd want it to include an Avatar property.

174
00:14:12,710 --> 00:14:15,190
So user dog dot avatar.

175
00:14:15,740 --> 00:14:16,100
Cool.

176
00:14:16,100 --> 00:14:20,090
So now these are the only three properties that will get passed back into the controller.

177
00:14:20,480 --> 00:14:25,030
So within resolve parentheses just include user dog.

178
00:14:25,730 --> 00:14:26,090
Cool.

179
00:14:26,420 --> 00:14:28,910
Let's go ahead and save this and test it out.

180
00:14:29,150 --> 00:14:37,670
So back in the browser, if you visit a new RL of slash profile slash and then if this ending part is

181
00:14:37,670 --> 00:14:43,060
not a user name that exists in your database, we should see some sort of error message.

182
00:14:43,070 --> 00:14:43,340
Yep.

183
00:14:43,760 --> 00:14:44,150
Whoops.

184
00:14:44,150 --> 00:14:45,560
We cannot find that page.

185
00:14:46,010 --> 00:14:52,340
But if you do just this ending, you are segments to be a username that does exist in my case.

186
00:14:52,340 --> 00:14:54,650
Brad cool.

187
00:14:54,650 --> 00:15:00,890
We see the profile template, OK, and now let's just begin pulling in real data.

188
00:15:00,890 --> 00:15:07,670
Instead of this fake hardcoded content to work on this, let's jump back into our user controller.

189
00:15:08,750 --> 00:15:14,330
So end user controller this if user exists, function is done for now.

190
00:15:14,540 --> 00:15:17,840
Let's focus on profile posts screen.

191
00:15:18,950 --> 00:15:24,290
So on this line of code where we are rendering the profile template within these parentheses, let's

192
00:15:24,290 --> 00:15:30,050
give it a second argument and it's going to be an object of data that we pass into that template.

193
00:15:30,800 --> 00:15:36,010
Feel free to drop down in between these curly brackets for organization reasons, OK?

194
00:15:36,050 --> 00:15:38,510
And we can make up any property names we want.

195
00:15:38,990 --> 00:15:46,640
So for example, let's say profile user name should have a value of and this is where we can leverage

196
00:15:46,640 --> 00:15:52,310
that data from our previous function because we stored it on the request object.

197
00:15:52,820 --> 00:15:54,020
So down here we can just say.

198
00:15:54,810 --> 00:15:59,160
Request profile user dot username.

199
00:16:00,030 --> 00:16:07,860
OK, let's do the same thing for their Avatar profile, Avatar should have a value of request.

200
00:16:07,870 --> 00:16:11,710
Dot profile user dot avatar.

201
00:16:12,840 --> 00:16:14,730
Let's go ahead and save this.

202
00:16:14,910 --> 00:16:21,000
And now let's jump into that profile, the Aegis template, and actually use these values.

203
00:16:21,810 --> 00:16:27,510
So within our Views folder, let's jump in to profile DOT SJS.

204
00:16:29,700 --> 00:16:33,720
Around line number four, you'll see an opening heading level to tag.

205
00:16:34,380 --> 00:16:39,150
It contains an image element and we are interested in the source value for the image.

206
00:16:39,540 --> 00:16:48,010
Let's get rid of this existing Eurail for the photo and instead let's do something dynamic so less than

207
00:16:48,010 --> 00:16:50,070
a percentage equal sign.

208
00:16:50,070 --> 00:16:56,550
Let's close out that tag percentage greater then and then let's just say profile avatar.

209
00:16:57,150 --> 00:17:00,810
Just to the right of this, we see a hardcoded value for the username.

210
00:17:01,050 --> 00:17:02,370
So get rid of that.

211
00:17:02,640 --> 00:17:07,000
And instead we'd want to say less than percentage equal sign.

212
00:17:07,410 --> 00:17:12,230
Close that out in between profile username.

213
00:17:12,960 --> 00:17:16,470
Let's save this and test it out back in the browser.

214
00:17:17,100 --> 00:17:24,300
When I refresh, I don't see any difference because the fake hardcoded values were already set to Brad

215
00:17:24,480 --> 00:17:25,460
and my face.

216
00:17:26,280 --> 00:17:30,570
However, you likely see new values now to demonstrate this.

217
00:17:30,580 --> 00:17:38,280
If I go up into the address bar and if I visit the profile for Bark's a lot behind the scenes, I created

218
00:17:38,280 --> 00:17:40,130
a new user account for a dog.

219
00:17:41,190 --> 00:17:41,550
Cool.

220
00:17:41,550 --> 00:17:46,080
So it pulls in the user name and photo for the current profile that we're visiting.

221
00:17:46,590 --> 00:17:52,440
Feel free to jump in to an incognito window and create alternate accounts so you can test this out as

222
00:17:52,440 --> 00:17:52,740
well.

223
00:17:53,370 --> 00:18:00,810
Let me go back to the Brad profile and our next step would be to load in the posts that this author

224
00:18:00,810 --> 00:18:01,710
has created.

225
00:18:02,220 --> 00:18:07,560
And that's exactly what we're going to work on when we continue this lesson in the next video.

226
00:18:07,890 --> 00:18:10,520
So let's keep things rolling and I'll see you then.
