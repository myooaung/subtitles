WEBVTT
1
00:00:02.040 --> 00:00:03.030
Hello, everyone.

2
00:00:03.300 --> 00:00:10.530
In this lesson, we are going to make several improvements to our user registration feature to begin,

3
00:00:10.560 --> 00:00:17.340
let's set things up so that if a user has validation errors when they submit this form, let's just

4
00:00:17.340 --> 00:00:24.570
redirect them back to the same home page and use flash messages to show the errors right here.

5
00:00:25.380 --> 00:00:27.960
So let's jump into our text editor to get started.

6
00:00:28.440 --> 00:00:37.320
And I want you to open up your user controller JS file, scroll down until you find your register function.

7
00:00:37.680 --> 00:00:40.740
So that line will begin with exports dot register.

8
00:00:41.190 --> 00:00:49.050
And remember, we have this if else area where if there are validation errors, then we are going to

9
00:00:49.050 --> 00:00:50.340
send them here.

10
00:00:50.640 --> 00:00:51.930
Otherwise we just send back.

11
00:00:51.930 --> 00:00:52.600
Congrats.

12
00:00:52.860 --> 00:00:56.160
So we are interested in this area if there are errors.

13
00:00:56.550 --> 00:00:58.560
So let's get rid of this response.

14
00:00:58.600 --> 00:01:06.810
Dot send user errors line and instead we want to use the flash package to add those same errors into

15
00:01:06.810 --> 00:01:08.030
our session data.

16
00:01:08.340 --> 00:01:12.330
Then once we've done that, we can just redirect back to the home page.

17
00:01:12.840 --> 00:01:20.490
So on this line, let's begin working with our array of validation errors so user dot errors.

18
00:01:20.820 --> 00:01:26.340
And we know that all arrays have access to a method named for each.

19
00:01:26.850 --> 00:01:27.960
Within these parentheses.

20
00:01:27.960 --> 00:01:33.480
We give it a function as a function, parentheses, curly brackets, and for each is going to call this

21
00:01:33.480 --> 00:01:37.200
function once for each item in this array.

22
00:01:37.470 --> 00:01:40.980
So within these parentheses, for our function, let's include a parameter.

23
00:01:41.220 --> 00:01:42.390
You could call this anything.

24
00:01:42.390 --> 00:01:46.530
You could call it X or item or message or error.

25
00:01:46.830 --> 00:01:49.930
I'll go with the aptly named error, OK.

26
00:01:49.950 --> 00:01:56.550
And then within the body of this function, let's just say request dot flash and let's create a new

27
00:01:56.550 --> 00:02:00.400
collection or array of messages within our flash session data.

28
00:02:00.990 --> 00:02:05.100
Let's call it reg errors short for registration errors.

29
00:02:05.550 --> 00:02:10.770
And then for the second argument, it's just the item that you would want to push onto this array.

30
00:02:11.400 --> 00:02:15.200
So that would just be our parameter or the current item from our original array.

31
00:02:15.810 --> 00:02:16.650
So error.

32
00:02:17.610 --> 00:02:23.160
OK, now, after these new three lines of code, but still within the if block, let's add a new line.

33
00:02:23.490 --> 00:02:27.420
And this is where we just want to redirect back to the home page.

34
00:02:27.420 --> 00:02:33.990
You RL, however, because Flash is going to adjust our session data, that's going to require a trip

35
00:02:33.990 --> 00:02:34.920
to the database.

36
00:02:35.370 --> 00:02:40.680
So we don't actually want to redirect until that database action has completed.

37
00:02:41.070 --> 00:02:44.280
So let's manually tell our session to save.

38
00:02:44.910 --> 00:02:48.510
So request session, save.

39
00:02:48.840 --> 00:02:54.540
Within these parentheses, we give it a function, function, parentheses, curly brackets, OK, and

40
00:02:54.540 --> 00:03:01.350
now this function will not run until the session data in the database has actually had a chance to complete

41
00:03:01.350 --> 00:03:02.180
and be updated.

42
00:03:02.490 --> 00:03:10.110
So now this is where we can redirect, let's say response, dot redirect and the value of slash for

43
00:03:10.110 --> 00:03:10.980
the home page.

44
00:03:11.440 --> 00:03:16.940
OK, and now let's just go adjust our home function to use that session data.

45
00:03:17.670 --> 00:03:18.660
Let me show you what I mean.

46
00:03:18.660 --> 00:03:23.850
So if we scroll down in the same file, we should see an export home function.

47
00:03:24.360 --> 00:03:24.780
All right.

48
00:03:24.780 --> 00:03:26.790
We are interested in this else block.

49
00:03:27.180 --> 00:03:27.480
Right.

50
00:03:27.480 --> 00:03:32.100
That's going to render the guest template if the user has not successfully logged in.

51
00:03:32.490 --> 00:03:36.750
This second argument here is the data that we are passing into that template.

52
00:03:37.110 --> 00:03:40.170
So we've already given it one property named errors.

53
00:03:40.470 --> 00:03:43.980
Let's just give it a second property named Reg Errors.

54
00:03:44.400 --> 00:03:51.510
So right after the closing quote and parentheses for that flash package, but before the closing curly

55
00:03:51.510 --> 00:03:58.800
bracket just out of comma, we want to add a new property, let's call it Reg Errors Colon and just

56
00:03:58.800 --> 00:04:00.810
set that to pull in the flash data.

57
00:04:00.810 --> 00:04:04.920
So request flash within the parentheses.

58
00:04:04.920 --> 00:04:08.520
We're interested in the collection named Reg Errors.

59
00:04:08.970 --> 00:04:11.130
OK, let's go ahead and save this.

60
00:04:11.370 --> 00:04:14.310
And now let's jump in to the home dash.

61
00:04:14.360 --> 00:04:14.670
Yes.

62
00:04:14.670 --> 00:04:19.980
Template and leverage this data within your project's views folder.

63
00:04:20.160 --> 00:04:30.330
Jump in to the file named home dash guest SJS and scroll down to line number 46 or at least to that

64
00:04:30.330 --> 00:04:31.560
ballpark area.

65
00:04:31.830 --> 00:04:37.860
And you should see an opening form tag with an action of register.

66
00:04:38.280 --> 00:04:43.050
So that's the registration form right below this opening form tag line.

67
00:04:43.050 --> 00:04:49.590
Let's add a new line and this is where we would want to show any potential registration errors.

68
00:04:50.040 --> 00:04:56.340
And now in order to save a lot of typing, let's just copy and paste and recycle code from our previous

69
00:04:56.340 --> 00:04:56.820
lesson.

70
00:04:57.270 --> 00:05:01.440
What I mean by this is if we scroll back up a bit for me, it's around.

71
00:05:01.510 --> 00:05:08.770
Line number thirty six, remember, we already wrote code that's going to loop through the errors array

72
00:05:09.010 --> 00:05:15.850
and for each error it would show a div, this is the red rectangle div and then it's going to display

73
00:05:15.850 --> 00:05:17.360
that individual message.

74
00:05:17.680 --> 00:05:23.340
So this is already set up to loop through an array with potentially multiple errors or messages.

75
00:05:23.830 --> 00:05:27.490
So let's just copy these three lines of code into our clipboard.

76
00:05:28.420 --> 00:05:32.260
Go ahead and copy that and then scroll back down again.

77
00:05:32.260 --> 00:05:38.500
We are looking for the opening form tag that's pointing towards the register right below that we can

78
00:05:38.500 --> 00:05:40.150
just paste in our clipboard.

79
00:05:41.510 --> 00:05:48.050
OK, and all we need to do is change this from instead of working with the errors array, we would want

80
00:05:48.050 --> 00:05:53.560
to work with the Reg Errors Array, write the registration errors.

81
00:05:53.840 --> 00:05:59.490
The only other change we need to make is let's get rid of this class of text center.

82
00:05:59.960 --> 00:06:05.930
This is just a stylistic or visual change, but let's get rid of Tech Center and replace it with small.

83
00:06:06.650 --> 00:06:09.780
OK, let's go ahead and save this and test it out.

84
00:06:10.670 --> 00:06:16.760
So back in the browser, if I leave all of these fields blank and try to submit, I should see three

85
00:06:16.760 --> 00:06:17.810
error messages.

86
00:06:19.400 --> 00:06:24.560
Awesome, you can see I'm redirected to the homepage and there are the three errors, you must provide

87
00:06:24.560 --> 00:06:27.450
a username, you must provide a valid email, you must provide a password.

88
00:06:28.130 --> 00:06:31.610
Let's test it out where we would only expect to see one error message.

89
00:06:31.610 --> 00:06:36.680
So if I choose a username, choose a valid email, but maybe choose a password.

90
00:06:36.680 --> 00:06:40.160
That's only two characters long if I try to submit.

91
00:06:41.640 --> 00:06:46.120
Could we just see the one error message password must be at least 12 characters.

92
00:06:46.590 --> 00:06:50.340
So at this point, flash messages for the registration form are working.

93
00:06:50.820 --> 00:06:56.940
But before we move on, you might be thinking, hey, wouldn't it be better if we used browser side

94
00:06:56.940 --> 00:06:59.670
JavaScript to enforce our rules for this form?

95
00:07:00.180 --> 00:07:00.440
Right.

96
00:07:00.450 --> 00:07:05.390
That way, we could enforce the rules before we actually let the visitors submit the data.

97
00:07:05.760 --> 00:07:05.940
Right.

98
00:07:06.000 --> 00:07:13.230
We could perform live on the fly validation after every keystroke, potentially, and we could easily

99
00:07:13.230 --> 00:07:18.060
show the error messages directly on top of the related field for that message.

100
00:07:18.660 --> 00:07:25.290
Well, if you're thinking that you are absolutely correct and we are indeed going to set that up, just

101
00:07:25.290 --> 00:07:30.660
not right now, towards the end of this course, we are going to circle back to the registration form

102
00:07:30.870 --> 00:07:34.070
and add that live on the fly validation.

103
00:07:34.470 --> 00:07:40.190
We've already spent a good deal of time on user registration and user logging in and out.

104
00:07:40.440 --> 00:07:44.780
So I don't want us to get bogged down even further with this feature right now.

105
00:07:45.210 --> 00:07:51.930
Also, just know that it's good that we have this traditional server side validation set up anyways,

106
00:07:52.200 --> 00:08:00.120
because you can never actually rely or trust browser side validation because an end user can disable

107
00:08:00.120 --> 00:08:01.620
browser site JavaScript.

108
00:08:01.800 --> 00:08:05.100
So that would disable any browser side checking or validation.

109
00:08:05.520 --> 00:08:08.760
So the fact that we have server side validation set up is great.

110
00:08:09.030 --> 00:08:13.560
We can rest assured that our rules are enforced server side no matter what.

111
00:08:13.950 --> 00:08:20.070
And then later on in the course, we can circle back to this and add browser side validation just to

112
00:08:20.070 --> 00:08:22.140
enhance the user experience.

113
00:08:22.500 --> 00:08:23.370
Big picture.

114
00:08:23.370 --> 00:08:30.450
You want validation on both sides, the server side for security reasons and the browser side for user

115
00:08:30.450 --> 00:08:31.270
experience.

116
00:08:31.740 --> 00:08:33.510
All right, let's change gears.

117
00:08:33.690 --> 00:08:40.710
And for our next task in this lesson, let's add the validation rules that make sure that your username

118
00:08:40.920 --> 00:08:43.460
and email have not already been taken.

119
00:08:44.010 --> 00:08:44.310
Right.

120
00:08:44.310 --> 00:08:45.270
We want to enforce that.

121
00:08:45.270 --> 00:08:48.110
Your username and email are unique.

122
00:08:48.660 --> 00:08:56.370
So to set that up, let's jump into our text editor and we need to open up our uppercase user JS model

123
00:08:56.370 --> 00:08:56.890
file.

124
00:08:57.300 --> 00:09:00.030
The model is where we want to enforce our rules.

125
00:09:00.420 --> 00:09:04.220
Let's go ahead and scroll down until we find our validation function.

126
00:09:04.950 --> 00:09:12.600
It's the line that begins with user prototype validate so within the body of this function, but below

127
00:09:12.600 --> 00:09:20.040
all these existing rules or if statements, let's add a new line and let's write a comment to ourselves

128
00:09:20.040 --> 00:09:31.970
so we stay organized and let's say only if username is valid, then check to see if it's already taken.

129
00:09:32.550 --> 00:09:38.730
The idea here is there's no sense in wasting a trip to our database to see if the username exists already,

130
00:09:38.970 --> 00:09:41.400
if it's not even a valid username.

131
00:09:41.730 --> 00:09:46.110
Obviously, if it doesn't meet our validation checks, then it would have never ended up in the database

132
00:09:46.110 --> 00:09:47.100
in the first place.

133
00:09:47.430 --> 00:09:52.890
And any time we can save an unnecessary trip to the database is great for performance.

134
00:09:53.430 --> 00:09:59.880
So right below this comment, let's first write an IF statement to see if the username is valid and

135
00:09:59.880 --> 00:10:04.250
then within that if statement, we can check the database to see if that name exists or not.

136
00:10:04.830 --> 00:10:12.450
So let's say if parentheses curly brackets for our if condition in these parentheses, let's say this

137
00:10:12.960 --> 00:10:22.470
this data username length, let's say if it's greater than two characters, long meaning it's three

138
00:10:22.470 --> 00:10:31.560
or greater and so double ampersand and this dot data username dot link is less than thirty one.

139
00:10:32.080 --> 00:10:38.880
In other words, we're saying if it's between three and thirty characters long and then let's say and

140
00:10:38.880 --> 00:10:45.570
or ampersand ampersand and it only contains alphanumeric characters so we can use our validator.

141
00:10:46.170 --> 00:10:53.010
And remember it has a method named is alpha numeric and then we just pass it.

142
00:10:53.040 --> 00:10:55.200
This data username.

143
00:10:55.860 --> 00:10:56.130
Cool.

144
00:10:56.130 --> 00:11:02.790
So only if all three of those checks evaluate to true then would we actually want to check the database

145
00:11:02.880 --> 00:11:05.360
to see if the current username has been taken or not.

146
00:11:06.030 --> 00:11:13.950
So within the if block, let's do this, let's create a variable and name it user name exists for now.

147
00:11:13.950 --> 00:11:16.620
Let's not worry about setting this to equal anything.

148
00:11:16.830 --> 00:11:18.870
We can circle back to that in just a minute.

149
00:11:19.380 --> 00:11:26.100
But below this line, let's write another if statement and let's say if parentheses.

150
00:11:26.100 --> 00:11:29.340
And this time the curly brackets can all stay on just one line like this.

151
00:11:29.340 --> 00:11:37.800
Let's say if username exists, if this would evaluate true, then within the curly brackets, let's

152
00:11:37.800 --> 00:11:41.100
just push an error onto our array of error.

153
00:11:41.280 --> 00:11:47.250
Just like we did for all of our other validation rules, so if username exists within the brackets,

154
00:11:47.250 --> 00:11:51.360
this dot errors dot push for the value.

155
00:11:51.360 --> 00:11:56.850
We can just say that username is already taken.

156
00:11:57.390 --> 00:12:02.990
OK, now we just need to circle back to this variable and give it a value that makes sense.

157
00:12:03.300 --> 00:12:09.030
So when we say let username exists, let's add an equal sign and let's do this.

158
00:12:09.180 --> 00:12:15.600
Let's begin with our Mongo DB users collection so users collection.

159
00:12:16.110 --> 00:12:20.370
And then inside that, let's look for a method named find one.

160
00:12:20.370 --> 00:12:27.960
So Dot find one for the argument within these parentheses, we give it an object as an argument.

161
00:12:28.380 --> 00:12:31.860
And this is where we tell Mongo DB what we are trying to find.

162
00:12:32.220 --> 00:12:39.630
We want to find the first document where the user name fields are property, colon matches, whatever

163
00:12:39.630 --> 00:12:41.460
the user just tried to register with.

164
00:12:41.460 --> 00:12:49.680
So this DOT data user name, the idea is that if Mongo DB does find a matching document, that's what

165
00:12:49.680 --> 00:12:51.860
this promise is going to resolve to.

166
00:12:52.170 --> 00:12:57.030
So username exists would equal an object that represents a document.

167
00:12:57.480 --> 00:13:04.470
On the other hand, if Mongo does not find a matching document, this promise will resolve to null and

168
00:13:04.470 --> 00:13:12.060
within the context of an if statement condition null will evaluate to false, whereas an object of any

169
00:13:12.060 --> 00:13:14.800
sort will always evaluate to true.

170
00:13:15.210 --> 00:13:16.950
So this would make perfect sense.

171
00:13:16.950 --> 00:13:19.420
If username exists, throw this error.

172
00:13:19.890 --> 00:13:21.650
Now here's where things get interesting.

173
00:13:22.020 --> 00:13:28.500
We know that communicating with a database is an asynchronous action, meaning it's going to take some

174
00:13:28.500 --> 00:13:34.980
time and it's going to run in the background and it's almost guaranteed that it's not going to complete

175
00:13:35.190 --> 00:13:38.280
before JavaScript begins running this next operation.

176
00:13:38.640 --> 00:13:43.290
And obviously this line of code depends on this line, right?

177
00:13:43.290 --> 00:13:45.770
We need that variable to have its value.

178
00:13:46.170 --> 00:13:51.730
So the question becomes, how can we coordinate the timing of these two operations?

179
00:13:52.110 --> 00:13:57.810
Well, luckily for us, the Mongo DB node package is relatively modern.

180
00:13:58.140 --> 00:14:03.120
And I know for a fact that this find one method returns a promise.

181
00:14:03.300 --> 00:14:08.760
And remember, before a promise, we can just include the word awaked.

182
00:14:09.480 --> 00:14:17.370
And now JavaScript will wait or freeze further operations until this promise actually resolves or rejects.

183
00:14:17.760 --> 00:14:24.630
However, remember that the await feature is only available within an asynchronous function.

184
00:14:24.930 --> 00:14:31.920
So the function that this code lives within can be found up here on the user's prototype that validate

185
00:14:31.920 --> 00:14:32.340
line.

186
00:14:32.760 --> 00:14:38.670
And right before the word function here, we just need to include the word async.

187
00:14:39.090 --> 00:14:42.960
Cool with this in place, the await feature will work perfectly.

188
00:14:43.380 --> 00:14:49.860
Now that we've set up our unique username check, lets just copy and paste these five lines of code

189
00:14:50.040 --> 00:14:52.320
to do the same thing for the email address.

190
00:14:52.590 --> 00:14:52.890
Right.

191
00:14:52.890 --> 00:14:55.920
To check if the email is unique or already taken.

192
00:14:56.220 --> 00:15:02.300
So I'm just going to select these five lines of code into my clipboard to save a bunch of typing, copy

193
00:15:02.340 --> 00:15:05.100
it into my clipboard right below it, just paste.

194
00:15:05.700 --> 00:15:06.720
Let's change the comment.

195
00:15:06.720 --> 00:15:14.400
So only if email is valid, then check to see if it's already taken for the condition to see if the

196
00:15:14.400 --> 00:15:15.450
email is valid.

197
00:15:15.450 --> 00:15:18.630
We can get rid of these three checks from before.

198
00:15:21.070 --> 00:15:27.730
So empty out those if parentheses and for an email address, all we need to do is leverage our validator

199
00:15:27.730 --> 00:15:36.140
package and call its method that is named is email and then just pass it this DOT data email.

200
00:15:36.490 --> 00:15:43.210
OK, let's change this variable name to email exists, OK?

201
00:15:43.210 --> 00:15:49.210
And then within our users collection, let's find a document where let's change this from user name

202
00:15:49.210 --> 00:15:56.050
to the email field and then change the matching value to this dot data dot email.

203
00:15:56.320 --> 00:16:05.620
OK, and then on this line we can say if email exists, then push on an error message that says that

204
00:16:05.620 --> 00:16:08.670
email is already being used.

205
00:16:09.160 --> 00:16:14.320
Just a quick note that has nothing to do with programming and everything to do with the English language

206
00:16:14.530 --> 00:16:15.520
in this comment.

207
00:16:15.760 --> 00:16:18.760
There should be an apostrophe in the it's contraction.

208
00:16:21.030 --> 00:16:22.360
OK, moving on.

209
00:16:22.750 --> 00:16:29.740
Now that our validate function is asynchronous and is going to take a while to complete, we need to

210
00:16:29.740 --> 00:16:33.740
take that into account when we actually call this function.

211
00:16:34.180 --> 00:16:36.910
Let me show you what I mean within this same file.

212
00:16:36.910 --> 00:16:39.740
Let's scroll down and find our register function.

213
00:16:40.720 --> 00:16:42.850
This should be towards the bottom of the file.

214
00:16:42.850 --> 00:16:47.050
And it's the area that begins with user dot prototype, dot register.

215
00:16:47.440 --> 00:16:50.040
This is what our user controller is going to call.

216
00:16:50.320 --> 00:16:54.940
So first we clean up the data and then we run our validation rules.

217
00:16:55.330 --> 00:17:00.520
However, we just added asynchronous actions to this validate function.

218
00:17:00.850 --> 00:17:07.810
So we need to be very careful to make sure that it actually completes before JavaScript would move on

219
00:17:07.810 --> 00:17:08.830
to this action.

220
00:17:09.250 --> 00:17:15.040
Right before we check to see if there are errors or not, we better first complete running all of our

221
00:17:15.040 --> 00:17:21.220
validation checks, including those asynchronous calls to the database to check for the uniqueness of

222
00:17:21.220 --> 00:17:22.300
username and email.

223
00:17:22.660 --> 00:17:30.220
So to accomplish that, let's just go adjust our validate function to return a promise and then we can

224
00:17:30.220 --> 00:17:33.310
await that promise down here in the register function.
