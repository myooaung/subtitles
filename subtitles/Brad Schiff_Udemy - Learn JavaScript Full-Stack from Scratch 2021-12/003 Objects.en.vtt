WEBVTT
1
00:00:01.690 --> 00:00:06.070
Hello, everyone, and welcome back to the 10 days of JavaScript.

2
00:00:06.610 --> 00:00:08.850
Here we are in day number three.

3
00:00:09.220 --> 00:00:13.500
And in this lesson, we are going to learn about objects.

4
00:00:13.930 --> 00:00:16.430
So what in the world is an object?

5
00:00:16.930 --> 00:00:22.140
Well, let's not waste time talking and instead let's just jump right into the action.

6
00:00:22.600 --> 00:00:24.800
So I want you to follow along with me.

7
00:00:25.240 --> 00:00:27.220
So right now, go to code pen.

8
00:00:27.550 --> 00:00:34.450
And just like we did in our previous lesson and the top right, we can click create new pen or you can

9
00:00:34.450 --> 00:00:38.140
just keep using the same pen from the previous lesson if you still have it up.

10
00:00:38.650 --> 00:00:45.100
OK, and again, in this course, we are interested in JavaScript, so I can actually just click and

11
00:00:45.100 --> 00:00:50.890
drag this border to hide the other two languages and let's get started.

12
00:00:51.250 --> 00:00:58.030
OK, now before I show you what an object is, let me first show you what an object is.

13
00:00:58.030 --> 00:01:02.650
Not so that we understand what problems objects solve.

14
00:01:03.010 --> 00:01:10.860
Or in other words, before we learn how to use objects, let's learn why we would use objects.

15
00:01:11.260 --> 00:01:15.120
So first we can sort of practice what we've learned in the last two lessons.

16
00:01:15.580 --> 00:01:19.150
So let's imagine that we want to store a bit of data about a cat.

17
00:01:19.690 --> 00:01:22.920
To start, we would need to store the name of the cat.

18
00:01:23.380 --> 00:01:33.100
So maybe I would create a variable and say Let Cat name equal quotes and then I'll give it a name of

19
00:01:33.100 --> 00:01:33.820
Fluffy.

20
00:01:34.480 --> 00:01:40.840
OK, next, let's imagine we need to store the cat's age or how old the cat is.

21
00:01:41.230 --> 00:01:42.580
So maybe create a variable.

22
00:01:42.580 --> 00:01:45.970
Let Cat Age.

23
00:01:46.240 --> 00:01:48.160
I'm just making up these variable names.

24
00:01:48.160 --> 00:01:52.240
You could choose any names you want, but let Cat Age equal.

25
00:01:52.720 --> 00:01:54.490
Let's say the cat is four years old.

26
00:01:55.240 --> 00:02:00.010
OK, and finally, let's say that this cat should have the ability to meow.

27
00:02:00.520 --> 00:02:03.100
So meowing is an action or a verb.

28
00:02:03.310 --> 00:02:07.360
So we know that we could maybe create a function named meow.

29
00:02:07.900 --> 00:02:08.790
So let's try that.

30
00:02:08.800 --> 00:02:17.950
Let's say function meow parentheses, curly brackets and inside the body of the function or inside the

31
00:02:17.950 --> 00:02:21.160
curly brackets, let's just show an alert message.

32
00:02:21.160 --> 00:02:26.070
So alert and in the pop up we can say meow.

33
00:02:26.590 --> 00:02:30.010
OK, now all of this code is perfectly valid.

34
00:02:30.340 --> 00:02:37.690
It works without any problems and we can access the data by simply typing the name of the variable or

35
00:02:37.690 --> 00:02:38.790
the name of the function.

36
00:02:39.430 --> 00:02:39.720
Right.

37
00:02:39.730 --> 00:02:46.000
So for example, if we needed to access the cat's name, we can just type out cat name.

38
00:02:46.420 --> 00:02:49.420
We can access their age by just typing cat age.

39
00:02:49.420 --> 00:02:56.080
And we can call the meow function by simply saying meow parentheses and that will execute the function.

40
00:02:56.080 --> 00:02:57.280
There we see meow.

41
00:02:57.970 --> 00:03:07.810
However, even though this code technically works, it is not ideal from a staying organized perspective,

42
00:03:08.230 --> 00:03:13.380
because you and I know that these variables and functions are related, right.

43
00:03:13.390 --> 00:03:14.950
They all have to do with a cat.

44
00:03:15.340 --> 00:03:22.690
But as far as the computer or browser is concerned, these variables and functions have absolutely nothing

45
00:03:22.690 --> 00:03:23.740
to do with each other.

46
00:03:24.220 --> 00:03:26.920
And this is not ideal for many reasons.

47
00:03:27.220 --> 00:03:33.520
But probably the biggest reason is if we were going to collaborate and work with another person on this

48
00:03:33.520 --> 00:03:39.070
code, they would not immediately know that these functions and variables are related.

49
00:03:39.550 --> 00:03:46.780
They would need to read all of the names and see cat name, cat age, meow, and they would have to

50
00:03:46.780 --> 00:03:53.710
sit there and think and use their own deductive reasoning and decide, oh yes, these are all cat related.

51
00:03:54.340 --> 00:04:02.320
So the question becomes, how can we write our code in a way so that it's painfully obvious that there's

52
00:04:02.320 --> 00:04:08.240
a relationship between the name of the cat, the age of the cat and the ability to meow.

53
00:04:08.890 --> 00:04:11.800
Well, the answer is objects.

54
00:04:12.190 --> 00:04:19.030
So let's delete everything that we've got here and let me show you how I would code or write that same

55
00:04:19.030 --> 00:04:22.460
data, but using an object instead.

56
00:04:23.050 --> 00:04:24.220
So we're starting fresh.

57
00:04:24.220 --> 00:04:25.450
Type this out with me.

58
00:04:25.960 --> 00:04:29.830
Let cat equal.

59
00:04:30.400 --> 00:04:36.850
And now in this context, since this has nothing to do with the function in this context, curly brackets

60
00:04:36.850 --> 00:04:39.460
are how we can create an object.

61
00:04:40.060 --> 00:04:46.270
So inside these pair of curly brackets, we can include multiple pieces of data.

62
00:04:46.750 --> 00:04:53.440
So I want you to think of an object as a container and we can store whatever we want inside it.

63
00:04:53.920 --> 00:05:00.640
So the first property that I want to store inside this new empty object is the cat's name.

64
00:05:01.150 --> 00:05:10.030
So let's say name Colin and then quotes Fluffy and then let's create another property that stores the

65
00:05:10.030 --> 00:05:11.200
cat's age.

66
00:05:11.590 --> 00:05:19.120
So after the quotes for Fluffy, let's say comma, and then on the new line, I can say age, Colin,

67
00:05:20.050 --> 00:05:24.940
for now I know the syntax here is a bit weird or unfamiliar.

68
00:05:24.970 --> 00:05:30.520
So let's review what's going on, because I know that in a previous lesson we learned that you can store

69
00:05:30.520 --> 00:05:36.130
a bit of data or create a variable by saying Let my name equal Brad.

70
00:05:36.550 --> 00:05:40.810
And this syntax that we learned that uses left and the equals sign.

71
00:05:41.020 --> 00:05:42.130
This is correct.

72
00:05:42.430 --> 00:05:47.300
However, inside an object, we need to do things a bit differently.

73
00:05:47.800 --> 00:05:55.200
So, for example, outside the context of an object down here, this is how we create a variable, right?

74
00:05:55.210 --> 00:06:00.340
You choose a name and then you use the equal symbol and you store whatever data you're wanting to store

75
00:06:00.970 --> 00:06:04.090
within an object instead of a variable.

76
00:06:04.090 --> 00:06:05.880
We call it a property.

77
00:06:06.310 --> 00:06:09.610
So inside the curly brackets, what do we want to store in this object?

78
00:06:09.850 --> 00:06:17.800
We just include the name of whatever property we want, some name or age or eye color or fur color.

79
00:06:18.160 --> 00:06:25.180
And then after that name for the property, instead of equal sine, we include a colon, then we include

80
00:06:25.180 --> 00:06:26.950
whatever data we want to store.

81
00:06:27.310 --> 00:06:28.660
And then this is important.

82
00:06:28.960 --> 00:06:33.470
When you want to include another property, we need to separate them with a comma.

83
00:06:33.850 --> 00:06:40.150
OK, so just like down here where we created a variable that is a simple string of text.

84
00:06:40.480 --> 00:06:46.810
Well, up here we are creating a variable named cat, but instead of a simple string of text or a number,

85
00:06:47.140 --> 00:06:49.090
it is an object.

86
00:06:49.450 --> 00:06:51.680
It is of the object data type.

87
00:06:52.120 --> 00:06:55.140
This object can store as many properties as we want.

88
00:06:55.150 --> 00:07:05.560
So we've got name fluffy age for we could add another once a comma eye color, Colen blue.

89
00:07:06.580 --> 00:07:07.030
Cool.

90
00:07:07.030 --> 00:07:14.290
So one of the advantages of using an object is that it is now immediately clear that these properties

91
00:07:14.290 --> 00:07:15.760
are related to one another.

92
00:07:16.270 --> 00:07:22.990
The idea is that anything that has to do with this cat lives within this object this way, instead of

93
00:07:22.990 --> 00:07:29.350
having a bunch of different variables floating around with different names, we just have this one cat

94
00:07:29.350 --> 00:07:34.390
object or this one cat variable that is self-contained, it's independent.

95
00:07:34.390 --> 00:07:36.540
It stores everything it needs.

96
00:07:36.940 --> 00:07:41.680
Now, you might be wondering how can we access or use these properties?

97
00:07:42.160 --> 00:07:43.090
It's super easy.

98
00:07:43.100 --> 00:07:44.590
So check this out down here.

99
00:07:44.800 --> 00:07:52.420
If I wanted to access the cat's name, you just type cat dot name, right?

100
00:07:52.430 --> 00:08:00.190
So we start with the name of the variable cat and then we just use the dot or the period to look inside

101
00:08:00.190 --> 00:08:01.270
an object.

102
00:08:01.810 --> 00:08:04.750
So cat dot name would evaluate too fluffy.

103
00:08:05.050 --> 00:08:11.560
We could say cat dot age that would evaluate to for obviously cat dot eye color would return blue.

104
00:08:12.280 --> 00:08:13.210
You get the idea.

105
00:08:13.660 --> 00:08:18.370
However, you might be wondering what happened to the cat's ability to meow.

106
00:08:18.580 --> 00:08:21.730
Remember before we had a function named Meow.

107
00:08:22.150 --> 00:08:23.410
Well check this out.

108
00:08:23.680 --> 00:08:31.930
Instead of just simple properties that contain a string of text or no, an object can also contain functions

109
00:08:31.930 --> 00:08:32.650
inside it.

110
00:08:33.070 --> 00:08:40.420
So after I color blue, let's say comma and then let's say mã parentheses.

111
00:08:40.420 --> 00:08:40.690
Right.

112
00:08:40.690 --> 00:08:42.040
That's how you create a function.

113
00:08:42.370 --> 00:08:44.950
Then after the parentheses we have curly brackets.

114
00:08:45.340 --> 00:08:52.720
So inside the body of this function, let's create an alert message that says meow, OK.

115
00:08:52.750 --> 00:08:59.050
And then down here at the very bottom outside our object, let's try to run or call the meow function.

116
00:08:59.560 --> 00:09:01.070
So we start with cat, right.

117
00:09:01.090 --> 00:09:03.520
That's the overall container or object.

118
00:09:04.690 --> 00:09:08.440
And then we look inside it with a dot and then we can just call Meow.

119
00:09:08.440 --> 00:09:13.390
So the name of the function and then parentheses there we see our alert meow.

120
00:09:14.680 --> 00:09:15.280
Perfect.

121
00:09:15.610 --> 00:09:19.280
So in our previous lesson we learned about functions, right.

122
00:09:19.300 --> 00:09:22.420
This is how you execute or run or call a function.

123
00:09:22.690 --> 00:09:25.420
You type out its name and then parentheses.

124
00:09:25.750 --> 00:09:27.520
And what we're doing here is no different.

125
00:09:27.520 --> 00:09:32.980
We're just looking inside our object, right with the period cat dot meow.

126
00:09:33.220 --> 00:09:40.900
However, even though technically this is a function meow, when a function lives inside an object or

127
00:09:40.900 --> 00:09:45.010
belonged to an object, we refer to it as a method.

128
00:09:45.400 --> 00:09:50.530
So the idea is that an object contains properties and methods.

129
00:09:51.070 --> 00:09:51.490
Cool.

130
00:09:51.610 --> 00:09:55.270
So I think you're starting to see why an object is so useful.

131
00:09:55.690 --> 00:10:01.000
You can create this one single entity that contains all of the data and.

132
00:10:01.060 --> 00:10:07.420
All of the abilities or functions or methods that that object needs, right, it's organized, it's

133
00:10:07.420 --> 00:10:08.590
self-contained.

134
00:10:08.920 --> 00:10:13.800
Everything that has to do with the cat lives within these overall curly brackets.

135
00:10:14.170 --> 00:10:19.090
And then whenever you want to use it or access it, you just type out the name of the object and look

136
00:10:19.090 --> 00:10:21.070
inside it with a dot or a period.

137
00:10:21.460 --> 00:10:27.840
And this is cool because it allows us to mirror our data after the way things work in real life.

138
00:10:28.030 --> 00:10:28.310
Right.

139
00:10:28.340 --> 00:10:30.910
So in the real world, I'm a human being.

140
00:10:30.910 --> 00:10:34.390
I'm an object and I'm a self-contained entity.

141
00:10:34.390 --> 00:10:34.650
Right.

142
00:10:34.660 --> 00:10:37.860
I contain all of my properties and all of my abilities.

143
00:10:38.650 --> 00:10:41.450
So Brad dot eye color, right?

144
00:10:41.470 --> 00:10:44.290
Or Brad dot age.

145
00:10:44.890 --> 00:10:46.030
Brad height.

146
00:10:46.030 --> 00:10:46.320
Right.

147
00:10:46.330 --> 00:10:47.950
All of the information about me.

148
00:10:48.130 --> 00:10:52.190
And then I also have abilities like Brad Walk right.

149
00:10:52.240 --> 00:10:54.790
The name of the method or function parentheses.

150
00:10:54.790 --> 00:10:58.870
Brad OutWalk Brad dot run Brad dot jump.

151
00:10:59.350 --> 00:10:59.740
Cool.

152
00:10:59.980 --> 00:11:06.820
Now before we move on, I just want to clarify that outside the context of an object, when you create

153
00:11:06.820 --> 00:11:12.760
a function, you do want to use the keyword function like function jump like this.

154
00:11:13.060 --> 00:11:15.690
This is what we practiced in our previous lesson.

155
00:11:16.150 --> 00:11:22.930
However, within the context of an object, we do not need to include the key word function.

156
00:11:23.170 --> 00:11:29.380
So just like we have the names of our properties name, age, eye color, we just include another comma

157
00:11:29.380 --> 00:11:33.190
and then the name of the function, parentheses, curly brackets.

158
00:11:33.610 --> 00:11:40.480
And again, remember, when a function lives inside an object like this, we refer to it as a method.

159
00:11:40.690 --> 00:11:42.840
So this is the MIAOW method.

160
00:11:43.300 --> 00:11:44.410
Another quick note.

161
00:11:44.560 --> 00:11:47.470
I don't want you to be confused by the curly brackets.

162
00:11:47.680 --> 00:11:53.260
So in programming, the same character can mean something different in a different context.

163
00:11:53.590 --> 00:12:00.190
So on the first line of code, this curly bracket here is signifying the opening or beginning of our

164
00:12:00.190 --> 00:12:01.000
object.

165
00:12:01.300 --> 00:12:01.570
Right.

166
00:12:01.570 --> 00:12:08.020
And then down on the very last line, this is closing our object, but then with our MÃ method in this

167
00:12:08.020 --> 00:12:14.380
context, the curly brackets represent the body of this function or the body of this method.

168
00:12:14.860 --> 00:12:16.690
Hopefully that's not too confusing.

169
00:12:16.690 --> 00:12:21.280
But even if it is, don't worry, because we are going to practice this again and again.

170
00:12:21.490 --> 00:12:25.210
And you don't need to remember it perfectly right here, right now.

171
00:12:25.690 --> 00:12:27.040
Now, I do have some good news.

172
00:12:27.220 --> 00:12:31.270
In just a minute or two from now, we are going to do something practical.

173
00:12:31.720 --> 00:12:38.410
We are going to leverage the Web browsers built in objects to make something happen when the visitor

174
00:12:38.410 --> 00:12:42.400
clicks somewhere on our Web page right down here on the preview section.

175
00:12:42.640 --> 00:12:49.960
However, before we get to that, I do want to show you one more theoretical aspect of objects, and

176
00:12:49.960 --> 00:12:54.340
that is that within an object, you can nest another object.

177
00:12:54.670 --> 00:13:00.220
So follow along with me, for example, maybe after this age property, so age.

178
00:13:00.220 --> 00:13:02.290
And then we've got four and then the comma.

179
00:13:02.530 --> 00:13:06.580
Let's create another new property named Foods.

180
00:13:06.910 --> 00:13:08.290
So Foods Colon.

181
00:13:09.220 --> 00:13:15.910
And then instead of including a simple string of text or a number, let's include another object.

182
00:13:16.300 --> 00:13:20.980
So curly brackets to create an object, let's include a comma afterwards.

183
00:13:21.250 --> 00:13:27.550
OK, but then within these curly brackets for this new object, why don't we drop down and we could

184
00:13:27.550 --> 00:13:31.930
create two new properties maybe named favorite.

185
00:13:31.930 --> 00:13:32.280
Right.

186
00:13:32.440 --> 00:13:42.070
Their favorite food, let's say tuna and then comma create another property, maybe least favorite colon,

187
00:13:42.790 --> 00:13:44.020
maybe oranges.

188
00:13:44.590 --> 00:13:48.550
So the idea here is that within our overall object we have these properties.

189
00:13:48.550 --> 00:13:48.790
Right?

190
00:13:49.000 --> 00:13:53.590
So name is a string of text, age is a number.

191
00:13:54.400 --> 00:13:58.990
And now in this case, the food's property is an object itself.

192
00:13:59.290 --> 00:14:06.040
So this curly bracket starts the object, this curly bracket closes the object, and then it can have

193
00:14:06.040 --> 00:14:09.600
its own properties like favorite and least favorite.

194
00:14:10.000 --> 00:14:16.360
So now outside of the object, if we want it to access the cat's favorite or least favorite foods,

195
00:14:16.750 --> 00:14:22.510
we would just type cat dot foods dot favorite.

196
00:14:23.260 --> 00:14:29.860
The key idea here is that we can use multiple dots within a line of code like this to just keep looking

197
00:14:30.040 --> 00:14:32.890
one level deeper inside the objects.

198
00:14:33.310 --> 00:14:34.900
So we start with the cat object.

199
00:14:35.050 --> 00:14:41.320
We drill inside that and find the foods object and then we can drill inside that to find the value of

200
00:14:41.320 --> 00:14:44.770
favorite or the least favorite properties.

201
00:14:45.250 --> 00:14:46.240
So you're not limited.

202
00:14:46.240 --> 00:14:49.960
You can nest your data as many layers deep as you need to go.

203
00:14:50.290 --> 00:14:56.920
OK, now, having said all of that, let's move on to the practical or fun part of this lesson and let's

204
00:14:56.920 --> 00:15:00.850
set things up so that any time a visitor clicks on this.

205
00:15:00.970 --> 00:15:05.170
Preview, part of the Web page, right, this is a preview of what our code is building.

206
00:15:05.530 --> 00:15:11.890
Let's set it up so that any click opens up an alert message that says hello there.

207
00:15:12.370 --> 00:15:13.510
So how would we do that?

208
00:15:14.050 --> 00:15:20.680
Well, our JavaScript environment, in this case, the Web browser, it brings to the table a bunch

209
00:15:20.680 --> 00:15:23.130
of its own pre-built objects.

210
00:15:23.680 --> 00:15:30.850
So just like how you and I created the cat object that stored the data and abilities of the cat, the

211
00:15:30.850 --> 00:15:38.110
web browser has pre-built objects that store the data and abilities of the Web page and of these different

212
00:15:38.110 --> 00:15:38.920
objects.

213
00:15:39.040 --> 00:15:45.600
Perhaps one of the most useful is the browsers document object.

214
00:15:46.000 --> 00:15:49.630
We will learn more about the document object later on in the course.

215
00:15:49.930 --> 00:15:56.770
But for now, all you need to know is that it sort of represents the Web page as a whole, meaning it's

216
00:15:56.770 --> 00:16:00.940
an object that contains all sorts of properties and methods.

217
00:16:01.480 --> 00:16:07.450
In this case, if we want to show an alert message, any time someone clicks down here on the page,

218
00:16:07.960 --> 00:16:13.410
then technically speaking, that means we want to be on the lookout for the click event.

219
00:16:13.900 --> 00:16:17.920
So let's look inside the browsers document object.

220
00:16:17.920 --> 00:16:27.190
So document DOT and the document object contains a method named ad event listener.

221
00:16:28.500 --> 00:16:35.650
OK, so we are running or calling this method add event listener and within the parentheses we need

222
00:16:35.650 --> 00:16:37.620
to pass it to arguments.

223
00:16:38.020 --> 00:16:45.790
So just as a placeholder I would say a comma B so the first argument instead of A we want to pass it,

224
00:16:45.790 --> 00:16:48.050
which event we are listening for.

225
00:16:48.430 --> 00:16:52.890
So for example you could say click or what are some other Web page events.

226
00:16:52.900 --> 00:16:58.300
You could try scroll or key down when someone pushes a key on their keyboard.

227
00:16:59.110 --> 00:17:00.400
But we're going to go with click.

228
00:17:00.730 --> 00:17:05.380
OK, but the idea is that the browser has different event keywords that you can listen for.

229
00:17:05.740 --> 00:17:07.240
We're listening for the click event.

230
00:17:07.750 --> 00:17:14.080
And then the second argument that we want to pass into this function, or I should say this method is

231
00:17:14.080 --> 00:17:18.910
a function that we want to run every time this event happens.

232
00:17:19.540 --> 00:17:25.720
So maybe right below this code, why don't we create our own brand new function so function and we can

233
00:17:25.720 --> 00:17:27.180
give it any name we want.

234
00:17:27.640 --> 00:17:36.810
I will never mind my amazing function, parentheses, curly brackets and inside the body of the function,

235
00:17:36.820 --> 00:17:40.480
why don't we just create an alert that says hello there?

236
00:17:41.320 --> 00:17:44.080
OK, so we've created this function definition.

237
00:17:44.290 --> 00:17:49.780
This is the name of the function now up on this line of code when we are calling the Web browsers,

238
00:17:49.810 --> 00:17:54.640
add event listener method for the second argument instead of the B placeholder.

239
00:17:55.000 --> 00:18:03.010
I'm just going to say my amazing function and notice, and this is really important that I did not include

240
00:18:03.010 --> 00:18:09.430
a new pair of parentheses right after the function name here to actually call the function because we

241
00:18:09.430 --> 00:18:14.020
don't want to run or call or execute this function right here, right now.

242
00:18:14.440 --> 00:18:17.470
Instead, we are just passing along the name.

243
00:18:17.770 --> 00:18:25.030
We are just passing a reference to the function and it's up to the Web browsers add event listener method

244
00:18:25.210 --> 00:18:28.550
to know when to call this function right.

245
00:18:28.570 --> 00:18:33.930
In this case, it's going to call the function any time we click anywhere on the page.

246
00:18:34.510 --> 00:18:41.440
So if I shrink this so we can actually see the preview area down here and if I click anywhere on the

247
00:18:41.440 --> 00:18:45.070
preview page, we see that our function successfully runs.

248
00:18:45.550 --> 00:18:50.200
And if I close the alert and click on the preview page again, perfect.

249
00:18:50.410 --> 00:18:53.920
We can see that the ADD event listener method is doing its job.

250
00:18:54.550 --> 00:19:00.970
So the idea is that we can leverage the web browsers built in objects in order to make the Web page

251
00:19:00.970 --> 00:19:03.850
do whatever we want at just the right moment.

252
00:19:04.330 --> 00:19:08.370
Now, if everything in this lesson was not crystal clear, that's OK.

253
00:19:08.740 --> 00:19:14.440
I do not expect you to remember exactly how we created our cat object from scratch.

254
00:19:14.830 --> 00:19:17.230
We will practice that again later in the course.

255
00:19:17.620 --> 00:19:25.150
Right now, all you need to know about objects is that you can look inside of them with the dot, if

256
00:19:25.150 --> 00:19:26.560
that's at all familiar to you.

257
00:19:26.560 --> 00:19:29.290
If it makes even a little bit of sense, you're right on track.

258
00:19:29.680 --> 00:19:33.670
Now, in our very next lesson, we are going to learn about arrays.

259
00:19:34.030 --> 00:19:36.060
So what in the world is an array?

260
00:19:36.460 --> 00:19:37.970
Let's keep our momentum rolling.

261
00:19:38.140 --> 00:19:42.460
Let's answer that question and I will see you in the next lesson.
