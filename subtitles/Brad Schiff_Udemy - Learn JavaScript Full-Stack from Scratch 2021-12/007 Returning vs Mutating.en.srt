1
00:00:01,770 --> 00:00:05,730
Hello, everyone, welcome back to the 10 days of JavaScript.

2
00:00:06,360 --> 00:00:08,400
Here we are in day number seven.

3
00:00:08,850 --> 00:00:15,750
And in this lesson, we're going to talk about the difference between returning and mutating.

4
00:00:16,170 --> 00:00:17,130
Now, don't worry.

5
00:00:17,160 --> 00:00:21,060
I do not expect you to know what I mean by those two words right now.

6
00:00:21,510 --> 00:00:27,420
And before we try to jump right into the concepts, let's first begin by just giving ourselves a bit

7
00:00:27,420 --> 00:00:31,830
of sample data to work with or experiment with.

8
00:00:32,310 --> 00:00:34,520
And I want you to type this out with me.

9
00:00:34,920 --> 00:00:42,720
So let's create a variable and name it pets, and I'm going to set it to equal an array of square brackets.

10
00:00:43,140 --> 00:00:47,760
And I actually want each item in this array to be an object.

11
00:00:47,970 --> 00:00:50,870
So to create an object, we include curly brackets.

12
00:00:51,210 --> 00:00:56,150
Let's give this first object a property of name and then colon and then give it a value.

13
00:00:56,490 --> 00:01:02,940
I'm going to name this first pet meows a lot right after the quotes for that name value.

14
00:01:02,940 --> 00:01:09,570
I'm going to include a comma and then give it another property of species and give it a value of cat.

15
00:01:10,020 --> 00:01:12,150
And then finally, comma, one more property.

16
00:01:12,480 --> 00:01:15,570
I'm going to give it an age of two.

17
00:01:15,780 --> 00:01:19,090
OK, so we've got one object that represents a cat.

18
00:01:19,650 --> 00:01:25,620
Now I want to create additional objects within this array, but just for the sake of staying organized,

19
00:01:25,860 --> 00:01:30,060
I don't want this line of code to become super long and difficult to read.

20
00:01:30,660 --> 00:01:35,690
So what I'm going to do is write in between the beginning square bracket and curly bracket here.

21
00:01:36,030 --> 00:01:42,000
I can just drop down and then right after the closing curly bracket for our object, I can drop down

22
00:01:42,000 --> 00:01:42,600
again.

23
00:01:43,320 --> 00:01:49,410
OK, and now we can just add a comma at the end of this line and we can include another pet object.

24
00:01:49,600 --> 00:01:51,090
So then we can have one per line.

25
00:01:51,270 --> 00:01:52,290
So it's easy to read.

26
00:01:52,650 --> 00:01:53,730
So let's create a dog.

27
00:01:53,730 --> 00:01:57,780
This time I'm going to give it a name of barks.

28
00:01:57,780 --> 00:02:04,440
A lot species should be dog and let's say ages three.

29
00:02:05,130 --> 00:02:07,770
And while we're at it, let's create one more animal object.

30
00:02:07,770 --> 00:02:09,510
So name one.

31
00:02:09,510 --> 00:02:10,050
Name this one.

32
00:02:10,050 --> 00:02:14,610
Purrs loud, give it a species of cat.

33
00:02:15,090 --> 00:02:17,250
And I will say that it's eight years old.

34
00:02:18,090 --> 00:02:22,800
OK, now if you want to pause the video lesson right now to give yourself a minute to type this out,

35
00:02:22,800 --> 00:02:23,510
that's OK.

36
00:02:23,940 --> 00:02:26,040
And next, let's do a quick review.

37
00:02:26,340 --> 00:02:32,670
So two or three lessons ago, we learned that we can programmatically add on to the end of an array

38
00:02:33,030 --> 00:02:37,710
by using the method named push, so we could start with our variable pets.

39
00:02:37,710 --> 00:02:41,160
And then in JavaScript, arrays have access to a method.

40
00:02:41,400 --> 00:02:47,850
So dot push and then let's imagine that we want to add on a dog to the array.

41
00:02:48,240 --> 00:02:50,640
So curly brackets to create an object.

42
00:02:50,760 --> 00:02:53,250
Let's give it a name of upstair.

43
00:02:54,780 --> 00:02:59,680
Let's give it a species of dog and I'll give an age of one.

44
00:03:00,310 --> 00:03:01,900
OK, now let's test this out.

45
00:03:02,080 --> 00:03:08,770
Let's log out the Pets Arae to the console and see if the new dog was successfully added.

46
00:03:09,400 --> 00:03:12,880
And just to be clear, you want to open your console by right.

47
00:03:12,880 --> 00:03:19,480
Clicking down in the preview area of code pen and then choose, inspect and then click on to the console

48
00:03:19,480 --> 00:03:19,840
tab.

49
00:03:20,080 --> 00:03:27,800
OK, so back in our code, we could say console, dot log and then just log out our pets variable.

50
00:03:28,420 --> 00:03:32,110
So if I check the console, we see an array with four items.

51
00:03:32,560 --> 00:03:34,330
If I expand it, awesome.

52
00:03:34,330 --> 00:03:37,360
We see the final object is that new pups store dog.

53
00:03:37,930 --> 00:03:38,260
Cool.

54
00:03:38,290 --> 00:03:39,770
Now, this is not new.

55
00:03:39,970 --> 00:03:43,880
We already learned about the push method several lessons ago.

56
00:03:44,260 --> 00:03:50,290
The reason I'm showing it again right now is because it's a great example of understanding the difference

57
00:03:50,290 --> 00:03:53,150
between mutating and returning.

58
00:03:53,530 --> 00:03:59,170
So in this context, the word mutating just means changing or modifying.

59
00:03:59,620 --> 00:04:07,900
What I mean by this is when we called the push method on this array, it's going to modify or change

60
00:04:07,900 --> 00:04:16,240
or mutate that original array right after this line of code runs, the pet's array has changed.

61
00:04:16,730 --> 00:04:21,060
However, that's not all that the push method does.

62
00:04:21,490 --> 00:04:24,190
It also returns a value.

63
00:04:24,670 --> 00:04:28,750
It returns the number of items that are now in the array.

64
00:04:29,260 --> 00:04:32,230
So in this case, it would return the value of the number.

65
00:04:32,230 --> 00:04:40,780
For however, we are not seeing that value of four because we didn't store this in a variable, nor

66
00:04:40,780 --> 00:04:45,020
did we log it out to the console, nor did we output it on to the Web page.

67
00:04:45,520 --> 00:04:51,700
So right now, the value that this push method is returning is just sort of sitting in outer space,

68
00:04:51,910 --> 00:04:53,440
sort of a no man's land.

69
00:04:53,830 --> 00:05:01,300
Now, just as a test, we can see the value that it returns by maybe logging this entire line to the

70
00:05:01,300 --> 00:05:02,020
console.

71
00:05:02,560 --> 00:05:03,310
So check this out.

72
00:05:03,340 --> 00:05:08,020
I want you to cut this entire pitstop push line into your clipboard.

73
00:05:08,990 --> 00:05:17,080
I'm going to select this, cut it, and then let's right out console dot log and then in the parentheses,

74
00:05:17,080 --> 00:05:19,660
just paste in your clipboard, OK?

75
00:05:19,670 --> 00:05:25,980
Now, if I check the console there, we see that value that the push method is returning.

76
00:05:26,410 --> 00:05:29,590
So it returns a simple no value.

77
00:05:29,980 --> 00:05:36,220
But the line of code also still ran and mutated the array, because when we logged out the array, we

78
00:05:36,220 --> 00:05:42,850
see that there are still four items and the pop star object was successfully pushed on to the array.

79
00:05:43,300 --> 00:05:47,800
So we could almost say that the push method lives a double life.

80
00:05:48,160 --> 00:05:52,060
On the one hand, it performs an action on the array.

81
00:05:52,540 --> 00:05:58,270
It changes or mutates the array, and then on the other hand, it returns a value.

82
00:05:58,720 --> 00:06:02,560
Now, the real question here is, why is this interesting?

83
00:06:03,190 --> 00:06:09,670
Well, the reason this distinction between mutating and returning is important is because there are

84
00:06:09,670 --> 00:06:16,640
other array methods that do not mutate or change the array and they only return a value.

85
00:06:17,440 --> 00:06:24,940
Now, up until this point, the array methods that we've seen like push and splice, well, really,

86
00:06:24,940 --> 00:06:31,840
the main reason you would use these methods is to mutate or change the array and the values that these

87
00:06:31,840 --> 00:06:37,910
functions return almost seems like a weird side effect that would never be very useful.

88
00:06:38,470 --> 00:06:46,720
However, right now I want to show you to array methods that are extremely useful, even though all

89
00:06:46,720 --> 00:06:49,170
they do is return a value, right.

90
00:06:49,180 --> 00:06:51,970
They do not mutate the original array.

91
00:06:52,480 --> 00:06:57,580
And those two methods that I want to show you are map and filter.

92
00:06:58,120 --> 00:06:59,240
So let's do this.

93
00:06:59,260 --> 00:07:03,310
I'm going to erase this console log pets line at the very bottom.

94
00:07:04,630 --> 00:07:11,110
OK, below this on a new line of code, I want to show you the map method.

95
00:07:11,800 --> 00:07:14,910
But first, let's give ourselves a goal to work towards.

96
00:07:15,280 --> 00:07:23,110
So let's imagine that we want to create a new array of these same paths except in the new array, instead

97
00:07:23,110 --> 00:07:28,900
of each animal being represented as an object with these different properties like name and species

98
00:07:28,900 --> 00:07:29,710
and age.

99
00:07:30,130 --> 00:07:34,390
Maybe in this new array we only want the name of each animal.

100
00:07:34,810 --> 00:07:38,230
So we would literally want an array that just said miaows a lot.

101
00:07:38,230 --> 00:07:42,250
And then the next item is barks a lot in the next item was purs loud and upstair.

102
00:07:42,880 --> 00:07:44,260
So how can we achieve this?

103
00:07:44,590 --> 00:07:52,390
Well luckily the map method is perfect when you want to create a new array that is based on another

104
00:07:52,390 --> 00:07:52,840
array.

105
00:07:53,710 --> 00:07:54,010
Let me.

106
00:07:54,050 --> 00:08:00,020
Show you what I mean, so down on this new line of code, let's begin with our pets array and then say

107
00:08:00,020 --> 00:08:01,350
Dot Mac.

108
00:08:02,090 --> 00:08:06,140
So in JavaScript, every array has access to a method named map.

109
00:08:06,470 --> 00:08:09,350
And Map is a higher order function.

110
00:08:09,860 --> 00:08:12,530
It accepts a function as an argument.

111
00:08:12,950 --> 00:08:18,320
Now, before we pass a function into these parentheses here, let's talk a little bit about what map

112
00:08:18,320 --> 00:08:19,840
is actually going to do.

113
00:08:20,270 --> 00:08:25,580
So the map method does not mutate or change the array that you call it from.

114
00:08:26,450 --> 00:08:34,530
Instead, it simply returns a new value and the value that it returns is a brand new separate array.

115
00:08:35,150 --> 00:08:40,640
Let's include a function within the parentheses here and then I will explain how the map method really

116
00:08:40,640 --> 00:08:41,150
works.

117
00:08:41,570 --> 00:08:43,310
So I'm going to make up a function name.

118
00:08:43,310 --> 00:08:46,010
Let's call it name only.

119
00:08:46,680 --> 00:08:50,650
OK, then on a new line, let's create a matching function with that new name.

120
00:08:50,660 --> 00:08:55,670
So function name only parentheses, curly brackets.

121
00:08:56,360 --> 00:09:03,810
And now what the map method is going to do is call this function once for each item in the pets array.

122
00:09:04,310 --> 00:09:06,310
So it's going to loop through the array.

123
00:09:06,440 --> 00:09:08,720
In our case, our array has four items.

124
00:09:08,730 --> 00:09:11,090
So it's going to call this function four times.

125
00:09:11,090 --> 00:09:16,100
But if your array had 500 items, it would call the function 500 times.

126
00:09:16,580 --> 00:09:23,600
Now, ultimately, the map method returns a brand new array and how it works is each time it calls our

127
00:09:23,600 --> 00:09:30,620
function, whatever this function returns is what's going to get added on to the brand new array.

128
00:09:31,160 --> 00:09:34,670
Now, don't worry, I do not expect this to make sense just yet.

129
00:09:35,030 --> 00:09:41,000
I think in about 60 seconds from now, it's going to start making sense just as a test within the body

130
00:09:41,000 --> 00:09:41,980
of our function here.

131
00:09:42,320 --> 00:09:46,590
Let's return a string of text that simply says hello.

132
00:09:47,180 --> 00:09:55,010
Now, ultimately, on this line of code, the map method is going to return a brand new array that simply

133
00:09:55,010 --> 00:09:57,770
contains the word hello four times.

134
00:09:58,070 --> 00:10:04,490
But as of this moment, that array value that the map method is going to return is going to get returned

135
00:10:04,490 --> 00:10:06,940
into outer space or no man's land.

136
00:10:07,340 --> 00:10:11,110
So instead, why don't we save this into a new variable?

137
00:10:11,840 --> 00:10:18,290
So at the beginning of this, Pets' thought Maplin, let's say let and you can make up any variable

138
00:10:18,290 --> 00:10:18,590
name.

139
00:10:18,600 --> 00:10:20,570
I'm going to call it our test.

140
00:10:21,110 --> 00:10:25,280
Let it equal whatever pitstop math is going to return.

141
00:10:25,790 --> 00:10:32,720
Now, just as a test down here, let's log out to the console, the our test variable so we can say

142
00:10:32,720 --> 00:10:35,930
console log our test.

143
00:10:36,530 --> 00:10:42,680
And if we check the console, we do indeed see an array with four items and it simply, hello, hello,

144
00:10:42,680 --> 00:10:43,400
hello, hello.

145
00:10:44,110 --> 00:10:47,000
This is where things might start to make sense for you.

146
00:10:47,390 --> 00:10:50,060
There are four items in the pets array.

147
00:10:50,360 --> 00:10:56,570
And because the function that we provided, the map method simply always returns a value of hello,

148
00:10:57,050 --> 00:11:00,960
that's what gets added on to the brand new array map is creating.

149
00:11:01,880 --> 00:11:03,550
Now let's get back to the goal at hand.

150
00:11:03,710 --> 00:11:09,590
Remember, we wanted to create a brand new array that was simply the name of each pet.

151
00:11:09,930 --> 00:11:10,850
So check this out.

152
00:11:11,060 --> 00:11:17,810
When MAP calls the function that we provided, it passes into the function, the current item that it's

153
00:11:17,810 --> 00:11:18,650
looping through.

154
00:11:19,010 --> 00:11:25,010
So down in our function, inside the parentheses, right after our function name, let's include a parameter.

155
00:11:25,340 --> 00:11:31,940
I'm just going to say X because it's easy to type, but you could call it pet or animal or item.

156
00:11:32,270 --> 00:11:34,190
The name of the parameter does not matter.

157
00:11:34,790 --> 00:11:41,480
The idea, though, is that the first time the map method calls our function X or this parameter would

158
00:11:41,480 --> 00:11:43,970
represent the myalgia object.

159
00:11:44,240 --> 00:11:50,150
And then the second time map calls our function X would represent the bark's a lot object.

160
00:11:50,750 --> 00:11:55,040
So instead of returning the word hello, let's get rid of the quote hello.

161
00:11:56,090 --> 00:12:03,020
And if X represents the current pet object that's being passed into our function, we know that you

162
00:12:03,020 --> 00:12:10,970
can look inside an object with the DOT and we are interested in the value of the name property so we

163
00:12:10,970 --> 00:12:12,890
can just say x dot name.

164
00:12:13,520 --> 00:12:20,570
And if we check the console, awesome, we see an array with four items and it is simply the names of

165
00:12:20,570 --> 00:12:21,230
each animal.

166
00:12:21,860 --> 00:12:23,180
Now let's change gears.

167
00:12:23,450 --> 00:12:26,480
So we just saw the map method in a nutshell.

168
00:12:26,870 --> 00:12:33,770
And before we finally get to the fun part or the aha moment part of this lesson, I want to show you

169
00:12:33,770 --> 00:12:37,430
one more array method that is named filter.

170
00:12:37,910 --> 00:12:39,470
Let's give ourselves a quick goal.

171
00:12:39,890 --> 00:12:48,470
Let's imagine that we want to create a new array that only contains the dogs from the pets array.

172
00:12:48,950 --> 00:12:51,350
So no cats, only dogs.

173
00:12:51,710 --> 00:12:52,890
How can we achieve this?

174
00:12:53,150 --> 00:12:53,960
Well, luckily.

175
00:12:54,260 --> 00:12:59,540
In JavaScript, all arrays have access to a method named filter.

176
00:12:59,990 --> 00:13:07,460
So check this out, we can go ahead and get rid of this console that log our test line and let's say

177
00:13:07,790 --> 00:13:14,290
pets', dot, filter, filter is very similar to the map method.

178
00:13:14,600 --> 00:13:18,010
So it does not mutate or change the array that we call it from.

179
00:13:18,380 --> 00:13:24,690
It simply returns a value that is a brand new array and it's also a higher order function.

180
00:13:25,010 --> 00:13:27,380
So let's try this at the beginning of this line.

181
00:13:27,590 --> 00:13:29,440
Let's save this into a variable.

182
00:13:29,450 --> 00:13:36,260
So let's say let dogs equal whatever pets filter is going to return.

183
00:13:36,620 --> 00:13:39,910
Now, within these parentheses, lets pass filter function.

184
00:13:40,220 --> 00:13:41,840
I'm going to make up a function name.

185
00:13:41,840 --> 00:13:45,030
Let's call it only dogs, OK?

186
00:13:45,080 --> 00:13:48,050
And now let's actually create a function with that matching name.

187
00:13:48,050 --> 00:13:56,750
So function only dogs, parentheses, curly brackets and just like with map filter is going to call

188
00:13:56,750 --> 00:14:01,140
our function once for each item in the pet's array.

189
00:14:01,700 --> 00:14:08,270
The difference is that with filter, our function doesn't specify exactly what should get added to the

190
00:14:08,270 --> 00:14:08,890
new array.

191
00:14:09,290 --> 00:14:14,780
Instead, we simply return either true or false.

192
00:14:15,590 --> 00:14:17,230
Let me explain what I mean by this.

193
00:14:17,240 --> 00:14:23,060
So within the parentheses for our only dog's function, let's include X as a parameter, right?

194
00:14:23,330 --> 00:14:30,320
And the first time that filter calls our function X, the X parameter is going to represent the first

195
00:14:30,320 --> 00:14:34,250
item in our array, which happens to be the miaows a lot object.

196
00:14:35,300 --> 00:14:44,600
So down in our brand new function, if we return a value of true that miaows a lot object will be added

197
00:14:44,600 --> 00:14:47,090
to our brand new filtered array.

198
00:14:47,480 --> 00:14:53,490
If we return false, that item will be skipped and it will not be added to the new array.

199
00:14:53,930 --> 00:14:59,480
So since we learned about true and false values in an earlier lesson, check this out.

200
00:14:59,720 --> 00:15:08,840
If we only want dogs, we can simply say x dot species' equal sine equals sign dog.

201
00:15:09,380 --> 00:15:16,610
The double equals sign comparison operator is going to boil down to either true or false based on the

202
00:15:16,610 --> 00:15:19,110
values to its left and to its right.

203
00:15:19,610 --> 00:15:24,010
So in other words, this is only going to return true if the item is a dog.

204
00:15:24,350 --> 00:15:26,600
So let's test this out down here.

205
00:15:26,600 --> 00:15:34,310
Let's log out to the console, our dog's array so we can say console dialog dogs.

206
00:15:34,640 --> 00:15:37,610
If we check the console, we see an array with two items.

207
00:15:37,910 --> 00:15:39,710
If I expand it, awesome.

208
00:15:39,710 --> 00:15:43,100
It only contains barks a lot and punster.

209
00:15:43,640 --> 00:15:44,420
Now, really quick.

210
00:15:44,420 --> 00:15:49,700
I just want to do one more thing before we finally get to the aha moment of this lesson.

211
00:15:50,030 --> 00:15:56,270
Back in our code, right beneath our only dog's function, why don't we create a brand new function

212
00:15:56,270 --> 00:15:58,550
and call it only babies.

213
00:15:59,150 --> 00:16:06,170
So function only babies parentheses curly brackets and we could use this function if you imagine that

214
00:16:06,170 --> 00:16:11,000
we only wanted an array of pets that were younger than the age of three.

215
00:16:11,450 --> 00:16:17,360
So within the parentheses, let's include a parameter to work with the current item and let's say only

216
00:16:17,360 --> 00:16:23,270
return true if x dot age is less than three.

217
00:16:23,850 --> 00:16:28,340
OK, now this is finally the aha moment of the lesson down here.

218
00:16:28,340 --> 00:16:33,410
Let's get rid of the console log dogs line and check this out.

219
00:16:33,980 --> 00:16:41,240
Let's imagine that we want to create a new array that is simply the names of the dogs that are under

220
00:16:41,240 --> 00:16:42,350
the age of three.

221
00:16:42,740 --> 00:16:50,360
So we can create a variable and say let baby dog names equal and then we can begin with our pets array

222
00:16:50,660 --> 00:16:55,010
and call the filter method and filter out for only dogs.

223
00:16:55,340 --> 00:17:01,730
And now this is the cool part because this highlighted section of code is going to return an array.

224
00:17:02,030 --> 00:17:07,100
Well, we can just look inside that array that it's going to return and filter it again.

225
00:17:07,430 --> 00:17:12,740
Now, what we just did is super important in terms of understanding JavaScript.

226
00:17:13,130 --> 00:17:16,010
So you've already heard me say this about a hundred times.

227
00:17:16,250 --> 00:17:26,060
But when I say that all arrays have access to these methods, I literally mean all arrays, not only

228
00:17:26,060 --> 00:17:32,600
arrays that have been already saved into a variable, but even arrays that are just sort of floating

229
00:17:32,600 --> 00:17:34,880
in outer space or in no man's land.

230
00:17:35,330 --> 00:17:42,170
So as soon as this highlighted part returns its value or its array, that array is just sort of floating

231
00:17:42,170 --> 00:17:44,240
in memory or floating in outer space.

232
00:17:44,240 --> 00:17:50,300
But then we can tack on to it and say, hey, that's an array, just like any other array, it must

233
00:17:50,300 --> 00:17:52,900
have access to these array methods.

234
00:17:53,090 --> 00:17:53,630
So another.

235
00:17:54,080 --> 00:18:01,700
Filter, and this time we can filter for only babies and finally, if we want this array to only contain

236
00:18:01,700 --> 00:18:08,630
the name property and not the age or species, well, we know that this is going to return an array

237
00:18:08,630 --> 00:18:12,590
so we can just look inside that array and call the map method.

238
00:18:13,040 --> 00:18:20,330
And remember, our old function was named name only, and it also returns an array and that is what

239
00:18:20,330 --> 00:18:23,810
we can finally let get saved into our variable.

240
00:18:24,400 --> 00:18:27,400
Let's go ahead and test things out by logging this to the console.

241
00:18:27,410 --> 00:18:30,680
So console that log baby dog names.

242
00:18:30,980 --> 00:18:33,710
And if we check the console, awesome.

243
00:18:33,710 --> 00:18:36,880
It's an array with just one item and it's only the name.

244
00:18:37,550 --> 00:18:44,810
The big takeaway point for this lesson is that even though these methods do not mutate or change the

245
00:18:44,810 --> 00:18:48,530
original array, they are still incredibly powerful.

246
00:18:48,890 --> 00:18:50,870
They are powerful on their own.

247
00:18:51,110 --> 00:18:58,400
But then once we realized that we can chain together multiple actions like this, we begin to see the

248
00:18:58,400 --> 00:19:04,760
true nature of JavaScript and how creative we can get with our code chaining together.

249
00:19:04,760 --> 00:19:08,690
Actions like this is not limited to only arrays.

250
00:19:08,900 --> 00:19:12,530
We can do this with basically any data type in JavaScript.

251
00:19:12,950 --> 00:19:19,460
If it's not crystal clear, do not worry, because this is a concept that we are going to practice again

252
00:19:19,460 --> 00:19:23,810
and again throughout the course that's going to bring this lesson to a close.

253
00:19:24,050 --> 00:19:29,660
In our next lesson, we are going to learn about scope and context.

254
00:19:29,990 --> 00:19:33,710
So what in the world do those words mean in relation to JavaScript?

255
00:19:34,100 --> 00:19:38,480
Well, let's keep things rolling and let's find out in the next lesson.
