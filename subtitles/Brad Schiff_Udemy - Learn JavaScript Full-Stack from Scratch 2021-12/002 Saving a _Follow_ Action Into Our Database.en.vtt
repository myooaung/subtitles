WEBVTT
1
00:00:00.330 --> 00:00:06.420
OK, let's go ahead and save this file, and now we better go jump in to our follow model and make sure

2
00:00:06.420 --> 00:00:09.920
that it has a function named create that returns a promise.

3
00:00:10.620 --> 00:00:18.480
So jump into uppercase, follow J.S. below the constructor function, but above the module exports line.

4
00:00:18.810 --> 00:00:20.130
Let's add a few methods.

5
00:00:20.640 --> 00:00:25.110
So first, let's say uppercase followed up prototype dot create.

6
00:00:25.890 --> 00:00:27.630
This should equal a function.

7
00:00:29.610 --> 00:00:31.170
We want it to return a promise.

8
00:00:31.170 --> 00:00:34.640
So return a new instance of promise.

9
00:00:35.520 --> 00:00:36.960
Let's give it an arrow function.

10
00:00:38.250 --> 00:00:41.670
Be sure to pass in parameters of resolve and reject.

11
00:00:42.660 --> 00:00:44.020
Close out the arrow function.

12
00:00:44.530 --> 00:00:52.440
OK, and just like within our post model and use model right here, let's run this dot cleanup and this

13
00:00:52.440 --> 00:00:53.910
dot validate.

14
00:00:54.660 --> 00:00:57.570
Let's make sure that we have methods with those matching names.

15
00:00:57.810 --> 00:01:06.000
So maybe right above the create method we can say follow dot prototype dot cleanup that should equal

16
00:01:06.000 --> 00:01:06.730
a function.

17
00:01:07.410 --> 00:01:12.170
Let's also create follow dot prototype dot validate.

18
00:01:13.320 --> 00:01:14.350
That should be a function.

19
00:01:15.660 --> 00:01:21.690
OK, and now before we start cleaning up and validating the input, let's first go up to our constructor

20
00:01:21.690 --> 00:01:25.540
function and within these parentheses, let's receive the input.

21
00:01:26.040 --> 00:01:31.170
So remember, back in our controller when we called this model, we were passing it to things.

22
00:01:31.590 --> 00:01:34.950
We were passing it the followed user name.

23
00:01:35.670 --> 00:01:35.930
Right.

24
00:01:35.940 --> 00:01:41.580
This is the username of the account that the current visitor wants to begin following, comma.

25
00:01:41.700 --> 00:01:44.550
And we were also passing it, the current user ID.

26
00:01:44.730 --> 00:01:52.170
So let's say author I.D. Now within the body of this constructor function, let's create properties

27
00:01:52.170 --> 00:01:54.020
to store these values.

28
00:01:54.240 --> 00:02:01.130
So this dot followed user name equals that parameter followed username.

29
00:02:02.310 --> 00:02:10.380
Let's also say this dot author ID equals author ID while we're in this constructor function.

30
00:02:10.380 --> 00:02:14.850
Let's also say this dot errors equals an empty array.

31
00:02:15.270 --> 00:02:16.520
So square brackets.

32
00:02:17.220 --> 00:02:17.580
Cool.

33
00:02:17.790 --> 00:02:19.580
Now let's work on our cleanup method.

34
00:02:19.920 --> 00:02:24.620
The only thing we need to clean or sanitize is the followed username.

35
00:02:25.710 --> 00:02:34.350
So within cleanup, let's just say if parentheses curly brackets for the condition if type of and then

36
00:02:34.350 --> 00:02:38.210
pass it this dot followed username.

37
00:02:38.790 --> 00:02:45.330
If that does not equal a string, well then within the curly brackets let's just set it to an empty

38
00:02:45.330 --> 00:02:49.360
string so we'd want to overwrite the weird or malicious value.

39
00:02:49.380 --> 00:02:56.130
So this dot followed username equals an empty pair of quotes.

40
00:02:56.980 --> 00:02:59.150
OK, now within VALIDATE.

41
00:02:59.400 --> 00:03:01.370
Let's begin with something very simple.

42
00:03:01.710 --> 00:03:08.010
Let's check to make sure that the username they want to follow actually matches with an existing account.

43
00:03:08.940 --> 00:03:10.770
So you can write a comment here to yourself.

44
00:03:10.770 --> 00:03:19.570
If you wanted to stay organized and say followed username must exist in database to check if it exists.

45
00:03:19.590 --> 00:03:20.340
Let's do this.

46
00:03:20.340 --> 00:03:28.740
Let's create a variable, let's say let followed account equal and then let's talk to our Mongo DB database.

47
00:03:28.920 --> 00:03:34.970
Let's look within our users collection and see if there is a document with this matching username.

48
00:03:35.340 --> 00:03:40.470
Now, in order to do that, in order to talk to our database, we need to go up to the very top of this

49
00:03:40.470 --> 00:03:45.030
file and import or require in our database file.

50
00:03:45.750 --> 00:03:46.840
Let me show you what I mean.

51
00:03:46.860 --> 00:03:55.920
So up at the very top of our model, let's say const users collection equals and then require.

52
00:03:56.790 --> 00:03:58.680
We want to give it a file path.

53
00:03:58.680 --> 00:04:03.510
So let's say dot, dot, slash to move up out of the models folder.

54
00:04:04.140 --> 00:04:08.650
And then in that root folder of our project, we have a file named DB.

55
00:04:09.360 --> 00:04:14.990
This file actually exports a Mongo DB client, not the database itself.

56
00:04:15.360 --> 00:04:21.930
So at the end of this line, let's also call DOT DB to select the actual database and then after that

57
00:04:21.930 --> 00:04:28.320
we can call DOT collection and the collection that we are interested in is users.

58
00:04:29.250 --> 00:04:34.890
While we're at it, let's go ahead and copy and paste and duplicate this line and on this new copy,

59
00:04:34.890 --> 00:04:39.210
let's change it from user's collection to follows collection.

60
00:04:39.720 --> 00:04:45.430
Then at the very end, the collection that we'd be interested then instead of users is follows.

61
00:04:46.950 --> 00:04:47.370
Cool.

62
00:04:47.550 --> 00:04:50.310
Now let's jump back down to our validate method.

63
00:04:50.940 --> 00:04:55.260
And remember, we want to check to see if the username exists.

64
00:04:55.650 --> 00:04:55.890
Right.

65
00:04:55.890 --> 00:04:59.960
You should only be able to follow the username for an account that is in our database.

66
00:05:01.200 --> 00:05:06.930
So we're creating a variable let followed account, and we just want to pull in the Mongo DB document

67
00:05:07.080 --> 00:05:10.680
that represents that matching user based on their user name.

68
00:05:11.250 --> 00:05:18.200
So let's say users collection and then use the Mongo DB method name to find one.

69
00:05:19.110 --> 00:05:21.870
Give it an object to describe what we're looking for.

70
00:05:22.350 --> 00:05:28.700
And we're looking for a document where the user name property, so user name Colen is a match with our

71
00:05:28.710 --> 00:05:31.710
this dot followed user name.

72
00:05:33.210 --> 00:05:33.540
Cool.

73
00:05:33.810 --> 00:05:36.950
Now this Mongo DB method is going to return a promise.

74
00:05:36.960 --> 00:05:42.840
So right before users collection here, we can just say, oh wait, we know that we can only use this

75
00:05:42.840 --> 00:05:44.440
within an async function.

76
00:05:44.670 --> 00:05:50.590
So right after prototype dot cleanup equals right before function, say async.

77
00:05:51.930 --> 00:05:59.730
OK, now below this let followed account line, let's just write an if statement if parentheses curly

78
00:05:59.730 --> 00:06:02.210
brackets after the if block.

79
00:06:02.220 --> 00:06:07.110
Let's also add and else block for the condition within these parentheses.

80
00:06:07.110 --> 00:06:15.000
Let's just say followed account because if we are able to find the document in the user's collection

81
00:06:15.000 --> 00:06:19.320
that matches that username, well that's great else.

82
00:06:19.320 --> 00:06:21.480
Otherwise we have a problem.

83
00:06:21.750 --> 00:06:29.460
So in the else block, let's say this DOT errors push, let's push a message onto our array of errors

84
00:06:29.460 --> 00:06:35.790
and say you cannot follow a user that does not exist.

85
00:06:36.510 --> 00:06:43.350
On the other hand, if we do find a matching account based on that username, let's store the ID of

86
00:06:43.350 --> 00:06:44.280
that document.

87
00:06:44.670 --> 00:06:44.910
Right.

88
00:06:44.910 --> 00:06:47.750
Because in most apps you're allowed to change your username.

89
00:06:48.510 --> 00:06:51.030
We haven't built that functionality into our app.

90
00:06:51.300 --> 00:06:56.640
But the idea is that when it comes to storing in the database, which user is following which other

91
00:06:56.640 --> 00:06:57.090
user?

92
00:06:57.330 --> 00:07:03.720
We want to use their ID, something that is permanent, not their username, but it's OK to look a user

93
00:07:03.720 --> 00:07:05.090
up by their username.

94
00:07:05.700 --> 00:07:13.830
So if there's a matching account, let's just say this dot followed ID equals the document that we found

95
00:07:13.830 --> 00:07:14.580
in the database.

96
00:07:14.580 --> 00:07:19.550
So followed account dot underscore id.

97
00:07:20.310 --> 00:07:24.300
OK, for now this is the only validation check we're going to worry about.

98
00:07:24.570 --> 00:07:28.740
We can circle back in the later lesson and add additional validation checks.

99
00:07:28.740 --> 00:07:32.550
But for now, let's just scroll down to our create method.

100
00:07:33.120 --> 00:07:35.670
This is where we're calling clean up and calling validate.

101
00:07:35.880 --> 00:07:41.670
Let's be sure to add a wait before validate because now it's an asynchronous function that's going to

102
00:07:41.670 --> 00:07:42.960
take a minute to complete.

103
00:07:43.720 --> 00:07:46.980
OK, and then right below this, let's just set up an if else.

104
00:07:46.980 --> 00:07:55.200
So if parentheses curly brackets also add an else block and let's just check to see if the errors is

105
00:07:55.200 --> 00:07:55.960
empty or not.

106
00:07:56.790 --> 00:08:00.000
So this dot errors dot length.

107
00:08:00.750 --> 00:08:06.450
This would evaluate to true as long as there were one or more items in that array to check for the opposite

108
00:08:06.450 --> 00:08:08.840
of that, we can say exclamation point here.

109
00:08:09.390 --> 00:08:14.910
OK, so if there are no errors, this is where we would actually want to store the follow data in the

110
00:08:14.910 --> 00:08:18.410
database or else this would mean there are errors.

111
00:08:18.660 --> 00:08:20.120
Let's take care of that first.

112
00:08:20.430 --> 00:08:25.940
So this is where we would want our promise to reject let's reject the value of our errors.

113
00:08:25.950 --> 00:08:29.880
So this dot errors within the if block.

114
00:08:29.910 --> 00:08:33.690
This is where we are ready to actually store something in our database.

115
00:08:34.050 --> 00:08:34.860
So let's do this.

116
00:08:34.860 --> 00:08:39.960
Let's say follows collection dot insert one.

117
00:08:40.080 --> 00:08:40.370
Right.

118
00:08:40.380 --> 00:08:46.590
We want to insert one document into the collection parentheses to create an object that represents this

119
00:08:46.590 --> 00:08:46.950
item.

120
00:08:47.670 --> 00:08:50.040
Let's give it to fields or to properties.

121
00:08:50.040 --> 00:08:53.070
So followed ID is the first.

122
00:08:53.760 --> 00:09:02.760
That would be this dot followed id the ID of the user account that you want to begin following comma.

123
00:09:02.940 --> 00:09:06.060
The other property or field would be named author.

124
00:09:06.330 --> 00:09:09.520
I'd write the user that's doing the following.

125
00:09:09.960 --> 00:09:10.800
So Colon.

126
00:09:10.920 --> 00:09:19.410
And let's set this to a new instance of the Mongo DB object IDE data type within these parentheses we

127
00:09:19.410 --> 00:09:20.160
just pass it.

128
00:09:20.400 --> 00:09:22.620
This dot author.

129
00:09:23.070 --> 00:09:25.360
I'd cool.

130
00:09:25.440 --> 00:09:30.900
Now let's remember that this Mongo DB method of insert one is going to return a promise and it's going

131
00:09:30.900 --> 00:09:32.210
to take a moment to finish.

132
00:09:32.460 --> 00:09:39.360
So at the start of this line, let's say a wait now since we're using the await feature here and here,

133
00:09:39.480 --> 00:09:42.900
we want to make sure that the inclosing function is asynchronous.

134
00:09:43.710 --> 00:09:49.190
So within the parentheses for Promis before our parameters here, let's just say async.

135
00:09:51.000 --> 00:09:57.540
OK, and finally, after we wait for this, insert one database action to complete right below that

136
00:09:57.540 --> 00:09:59.880
line, our promise is.

137
00:09:59.920 --> 00:10:01.370
Ready to resolve.

138
00:10:02.680 --> 00:10:03.050
Cool.

139
00:10:03.430 --> 00:10:05.690
Just one more detail before we test this out.

140
00:10:06.520 --> 00:10:12.580
We better go up to the top of this file and make sure that object I.D. is pointing towards something

141
00:10:12.580 --> 00:10:15.130
or that a variable with this name exists.

142
00:10:16.270 --> 00:10:17.270
Let me show you what I mean.

143
00:10:17.470 --> 00:10:23.680
So back up at the very top of this file, maybe right below when we create our collection variables,

144
00:10:23.680 --> 00:10:32.950
let's say const object ID equals and then just require in the Mongo DB package.

145
00:10:33.310 --> 00:10:36.220
But in this case, we're not interested in the entire package.

146
00:10:36.400 --> 00:10:39.490
Just dot object ID.

147
00:10:40.510 --> 00:10:43.510
Cool, let's go ahead and save this and test it out.

148
00:10:44.750 --> 00:10:45.070
Oops.

149
00:10:45.070 --> 00:10:48.630
Looks like we actually have an error within our validate function.

150
00:10:48.880 --> 00:10:54.280
We are using the await feature, but we forgot to add async right before this function.

151
00:10:56.620 --> 00:11:03.550
Let's give that another save and now back in the browser, be sure to refresh, so the form for the

152
00:11:03.550 --> 00:11:06.250
follow button has the updated action value.

153
00:11:06.710 --> 00:11:09.790
OK, and in this window, I'm logged in as the Brad user.

154
00:11:10.060 --> 00:11:12.760
And if I want to start following the bark's a lot user.

155
00:11:12.760 --> 00:11:13.960
Let's click on follow.

156
00:11:16.610 --> 00:11:21.800
Cool, it took me back to the Bark's lot profile, successfully followed Bachs lot, now the way that

157
00:11:21.800 --> 00:11:28.250
we can test things to see if this is actually working is to jump into our Mongo DB Atlus account.

158
00:11:29.610 --> 00:11:35.970
From the collection screen, make sure you're on your complex app database and then if we click, refresh.

159
00:11:38.660 --> 00:11:46.820
Now you can see there's a new collection named Follows, if I click on to that cool, there's one document

160
00:11:47.400 --> 00:11:54.650
this document represents the Brat Account or the author ID following the bark's a lot of count or the

161
00:11:54.920 --> 00:11:57.590
followed ID cool.

162
00:11:57.770 --> 00:12:02.140
That's going to bring this lesson to a close in our next lesson.

163
00:12:02.240 --> 00:12:07.790
Not only will we add additional validation checks, but we'll also set things up so that once you're

164
00:12:07.790 --> 00:12:13.580
following a user, this button should now be a red button that says stop following.

165
00:12:14.340 --> 00:12:14.500
Right.

166
00:12:14.740 --> 00:12:19.380
The page should be aware that I'm following and it should give me an equal but opposite action to take.

167
00:12:19.400 --> 00:12:22.360
Now, setting this up should be a lot of fun.

168
00:12:22.370 --> 00:12:25.130
So let's keep things rolling and I'll see you then.
