1
00:00:01,900 --> 00:00:02,830
Hello, everyone.

2
00:00:03,130 --> 00:00:10,900
In this lesson, we are going to learn how to receive form data from a visitor and work with that data

3
00:00:10,900 --> 00:00:11,890
in our server.

4
00:00:12,340 --> 00:00:17,980
Let me show you what I mean by giving you a sneak peek of the finished product of what we're going to

5
00:00:17,980 --> 00:00:19,960
build together in this lesson.

6
00:00:20,410 --> 00:00:21,760
So we see a bit of text.

7
00:00:21,760 --> 00:00:24,720
What color is the sky on a clear and sunny day?

8
00:00:25,060 --> 00:00:27,290
And then here is a text input field.

9
00:00:27,580 --> 00:00:35,110
Now, if I type in an incorrect answers, if I say orange and then click to submit, we see.

10
00:00:35,140 --> 00:00:37,030
Sorry, that is incorrect.

11
00:00:37,660 --> 00:00:45,010
But if I click back to the home page and then type in blue and submit, we see congrats.

12
00:00:45,190 --> 00:00:46,450
That is the correct answer.

13
00:00:47,050 --> 00:00:54,280
Now, this may not seem very impressive or exciting, but trust me, being able to respond to user input

14
00:00:54,280 --> 00:01:00,850
like this marks a huge milestone in your journey towards becoming a full stack developer.

15
00:01:01,270 --> 00:01:01,480
Right.

16
00:01:01,570 --> 00:01:08,620
If you think about how you log into your bank's website or your email or any online account, you have

17
00:01:08,620 --> 00:01:15,220
to fill out a username field and then you have to fill out a password field and then you submit and

18
00:01:15,220 --> 00:01:18,790
then the server decides if what you typed in is correct or not.

19
00:01:19,300 --> 00:01:24,310
So we're starting simple here and just checking to see if the user types in blue or not.

20
00:01:24,520 --> 00:01:27,360
But we need to learn how to walk before we can run.

21
00:01:27,970 --> 00:01:30,400
So how can we start building this together?

22
00:01:30,670 --> 00:01:31,690
Where do we begin?

23
00:01:32,260 --> 00:01:40,390
Well, in our previous lesson, we used the HTP functionality of node to set up a basic server.

24
00:01:40,930 --> 00:01:45,160
So as we've already seen, we can technically create a server this way.

25
00:01:45,490 --> 00:01:52,660
But the truth is, is that you can use node to build just about anything, not just Web servers.

26
00:01:53,140 --> 00:02:00,340
Now, this open ended nature and flexibility of node is great, but in the real world, we have a specific

27
00:02:00,340 --> 00:02:00,920
goal, right?

28
00:02:00,940 --> 00:02:08,080
We want to create a Web server so it makes more sense to use a solution that is less open ended and

29
00:02:08,080 --> 00:02:13,330
instead is specifically designed for the purpose of creating Web servers.

30
00:02:13,690 --> 00:02:18,580
And that's exactly where something named Express comes into play.

31
00:02:19,090 --> 00:02:21,130
So what in the world is express?

32
00:02:21,550 --> 00:02:25,730
Well, let's start with their official description or slogan and then I will explain it.

33
00:02:26,170 --> 00:02:33,520
So it says that Express is a fast on opinionated, minimalist web framework for Node J.

34
00:02:33,670 --> 00:02:36,990
Yes, but what does that mean in plain English?

35
00:02:37,330 --> 00:02:44,350
So I would say that Express is a bunch of pre written JavaScript code for the node environment that

36
00:02:44,350 --> 00:02:45,520
we can leverage.

37
00:02:46,000 --> 00:02:52,810
So Express takes care of a thousand different details for us so that we can avoid reinventing the wheel

38
00:02:52,990 --> 00:02:56,200
and also so that we can keep our code more organized.

39
00:02:56,470 --> 00:03:02,700
Now, personally, I'm not always a fan of leveraging pre written JavaScript code like this.

40
00:03:02,950 --> 00:03:09,670
However, I am a huge fan of Xpress largely because of these two words that I've highlighted here,

41
00:03:10,000 --> 00:03:13,930
because it is an opinion dated and minimalist.

42
00:03:14,380 --> 00:03:17,890
Express doesn't automatically do a ton for us.

43
00:03:18,070 --> 00:03:24,100
It doesn't babysit us so much that it prevents us from learning and it doesn't really force any rigid

44
00:03:24,100 --> 00:03:26,140
or dogmatic ideas on us.

45
00:03:26,530 --> 00:03:32,380
It simply provides functions or methods that are specifically designed for creating Web servers.

46
00:03:32,680 --> 00:03:35,830
You can think of it like this node on its own.

47
00:03:35,830 --> 00:03:38,770
Without express is like Legos.

48
00:03:39,010 --> 00:03:44,170
There's all kinds of different Lego block types, some that you'll want to use, a bunch that you will

49
00:03:44,170 --> 00:03:45,310
not need to use.

50
00:03:45,580 --> 00:03:49,720
And you can use these Lego blocks to build anything.

51
00:03:50,110 --> 00:03:54,880
On the other hand, if we use Express, we are still using node.

52
00:03:55,090 --> 00:04:03,340
But Express gives us new Lego block types that were specifically designed to be used to build the one

53
00:04:03,340 --> 00:04:08,080
thing that we're trying to build a Web server if that metaphor didn't make any sense.

54
00:04:08,110 --> 00:04:08,710
That's OK.

55
00:04:08,770 --> 00:04:09,910
Let's keep things moving.

56
00:04:10,330 --> 00:04:17,860
But before we move on, I do want to let you know that Express is not some small, seldomly used framework.

57
00:04:18,310 --> 00:04:22,450
So by us using Express, I'm not forcing some odd opinion on you.

58
00:04:22,690 --> 00:04:30,280
Express is absolutely the industry standard when it comes to creating Web servers with node in the real

59
00:04:30,280 --> 00:04:30,670
world.

60
00:04:30,670 --> 00:04:35,920
You are going to run into express all over the place to give you a frame of reference.

61
00:04:36,160 --> 00:04:42,780
Just in the last week alone, Express has been downloaded over five million times.

62
00:04:43,270 --> 00:04:49,170
So at this point the question becomes how do we use or download express?

63
00:04:49,630 --> 00:04:54,920
Well, we actually do not download anything from the Express Web site.

64
00:04:55,280 --> 00:05:01,390
Instead, let's jump back to our text editor or more specifically, jump back to our.

65
00:05:01,460 --> 00:05:06,950
Command line, so I'm using voice code so I can just click view and then terminal.

66
00:05:08,300 --> 00:05:16,820
And then in your command line, I want you to run the following command NPM and then Espace and then

67
00:05:16,820 --> 00:05:21,500
install and then a space and then express.

68
00:05:21,740 --> 00:05:26,790
Now, before I push enter to actually run that command, I want to explain what's going on here.

69
00:05:27,290 --> 00:05:30,020
So first of all, what is NPM?

70
00:05:30,710 --> 00:05:38,170
Well, when you installed node on your computer, it automatically installed something else named NPM.

71
00:05:38,690 --> 00:05:42,860
These letters stand for node package manager.

72
00:05:43,340 --> 00:05:51,430
For now we can think of NPM as a giant grocery store of pre written JavaScript goodies that we can leverage.

73
00:05:51,950 --> 00:05:52,120
Right.

74
00:05:52,200 --> 00:05:57,920
So, for example, if you were baking a cake in real life, you probably are not creating your own flour

75
00:05:57,920 --> 00:05:58,600
from wheat.

76
00:05:58,940 --> 00:06:02,930
Instead, you're probably just go into the grocery store and picking up a bit of flour.

77
00:06:03,260 --> 00:06:10,460
So NPM is the centralized place where we can grab all sorts of pre written JavaScript goodies or packages.

78
00:06:10,910 --> 00:06:11,240
Right.

79
00:06:11,240 --> 00:06:13,130
Node package manager.

80
00:06:13,490 --> 00:06:16,010
And then the second word here is install.

81
00:06:16,010 --> 00:06:17,510
We want to install something.

82
00:06:17,870 --> 00:06:19,070
What do we want to install?

83
00:06:19,670 --> 00:06:20,530
Express?

84
00:06:20,870 --> 00:06:23,120
That's the name of the package that we are interested in.

85
00:06:23,390 --> 00:06:26,360
So let's go ahead and push enter to run the command.

86
00:06:29,950 --> 00:06:36,400
Give it a few seconds, and now you'll notice that in the left hand side bar, NPM automatically created

87
00:06:36,400 --> 00:06:40,150
a new folder for us named Node Modules.

88
00:06:40,570 --> 00:06:47,050
And if we look inside that folder and if you look through this list, you'll see Ahar Express.

89
00:06:47,780 --> 00:06:54,700
If you're wondering why NPM downloaded all of these other packages, aside from Express is because Express

90
00:06:54,910 --> 00:06:57,670
depends on these other packages.

91
00:06:58,240 --> 00:07:03,400
To be honest, there's never really a need to actually open the node modules folder and look at all

92
00:07:03,400 --> 00:07:04,470
the different packages.

93
00:07:04,780 --> 00:07:10,940
I'm only doing that to show you that NPM successfully downloaded the package for us.

94
00:07:11,350 --> 00:07:16,990
You'll also notice that NPM created this new file named Package Lock JSON.

95
00:07:17,290 --> 00:07:21,190
For now, we do not need to worry about this file later on in the course.

96
00:07:21,190 --> 00:07:22,480
We will learn more about it.

97
00:07:23,050 --> 00:07:29,560
Before we move on, I do want to let you know that when you run and NPM install command, NPM is going

98
00:07:29,560 --> 00:07:35,800
to create these files and folders for you in whatever directory your command line is currently pointing

99
00:07:35,800 --> 00:07:36,370
towards.

100
00:07:36,820 --> 00:07:44,080
Remember, in my case, I created that folder on my desktop named First Node Experiment, and that's

101
00:07:44,080 --> 00:07:47,610
the directory that my voice code command line is pointing towards.

102
00:07:47,920 --> 00:07:52,870
But if you're not using VX code and you're using a standalone command line, that's just something I

103
00:07:52,870 --> 00:07:54,160
want you to be aware of.

104
00:07:54,630 --> 00:07:55,840
OK, now, moving on.

105
00:07:56,230 --> 00:08:01,540
We have successfully used NPM to download or install Xpress.

106
00:08:01,870 --> 00:08:05,070
So now let's begin using Express in our code.

107
00:08:05,500 --> 00:08:11,800
So within my test file, the file that we've been writing all of our code and so far I actually want

108
00:08:11,800 --> 00:08:15,330
you to select everything and delete it.

109
00:08:15,820 --> 00:08:19,720
We want a completely brand new clean slate in this file.

110
00:08:20,380 --> 00:08:24,790
This time around, we are going to create a server using Xpress.

111
00:08:25,030 --> 00:08:26,970
So things are going to be a little bit different.

112
00:08:27,550 --> 00:08:33,670
Now, just to jog your memory, remember that our goal is to create this application that receives the

113
00:08:33,670 --> 00:08:37,790
user input and then we evaluate whether they typed blue or something else.

114
00:08:38,740 --> 00:08:46,180
OK, so back in our text editor, our first step, if we want to leverage express, is to import or

115
00:08:46,180 --> 00:08:49,240
include or require in express.

116
00:08:49,690 --> 00:08:51,690
So type this out with me and then I will explain it.

117
00:08:51,700 --> 00:09:03,040
So say let's express equal require and then parentheses inside the parentheses quotes express.

118
00:09:03,670 --> 00:09:10,690
Now this syntax is identical to when we said let htp equal require http.

119
00:09:11,020 --> 00:09:16,600
The difference here is that Express is not a built in part of node meaning.

120
00:09:16,600 --> 00:09:23,320
Before we wrote this line of code, we needed to use NPM to actually go out onto the Internet and download

121
00:09:23,320 --> 00:09:24,640
Express for us.

122
00:09:25,060 --> 00:09:33,010
So when we say require in the express package, node will know to look inside a folder named node modules

123
00:09:33,250 --> 00:09:34,540
and it will know where to look.

124
00:09:35,230 --> 00:09:37,980
OK, so this line of code gets expressed ready.

125
00:09:38,170 --> 00:09:45,310
Now we can actually begin leveraging express and that's exactly what we're going to do in the next part

126
00:09:45,310 --> 00:09:46,330
of this lesson.

127
00:09:46,660 --> 00:09:51,460
So with this first part of the lesson coming to a close, you'll know that you're on track.

128
00:09:51,640 --> 00:10:00,220
If you ran the NPM install express command and it created a node modules folder in your project folder,

129
00:10:00,610 --> 00:10:02,770
as long as you've got that, you're good to go.

130
00:10:02,830 --> 00:10:04,050
You're right on track.

131
00:10:04,420 --> 00:10:09,010
So let's keep things rolling and begin writing code to actually use Express.

132
00:10:09,310 --> 00:10:13,480
And to get to that, I will see you in the next part of this lesson.
