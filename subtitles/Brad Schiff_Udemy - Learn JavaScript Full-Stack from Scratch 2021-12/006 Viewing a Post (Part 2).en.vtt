WEBVTT
1
00:00:00.390 --> 00:00:07.350
Either way, you'll see a random string of characters in the euro that represents that specific post.

2
00:00:07.800 --> 00:00:13.530
So with that in mind, let's jump back into our post comptroller and work on the function that will

3
00:00:13.530 --> 00:00:15.420
be called for a route like this.

4
00:00:16.230 --> 00:00:19.020
So jump back into post comptroller.

5
00:00:19.500 --> 00:00:23.520
And we are working on this function down here named View Single.

6
00:00:24.110 --> 00:00:29.790
OK, so within the body of this function, before we render this template, we're going to need to talk

7
00:00:29.790 --> 00:00:35.240
to our post model and request that it looks up a document in the database.

8
00:00:35.730 --> 00:00:39.900
We know that that would be an asynchronous action that takes some time to complete.

9
00:00:40.260 --> 00:00:43.580
So we know that our post model is going to return a promise.

10
00:00:43.950 --> 00:00:49.260
So let's do this right before the word function here for review single.

11
00:00:49.500 --> 00:00:52.720
Let's include the word async, OK?

12
00:00:52.770 --> 00:00:57.810
And then within the body of this function, let's get rid of this line just to give ourselves a clean

13
00:00:57.810 --> 00:00:58.320
slate.

14
00:00:58.890 --> 00:00:59.430
All right.

15
00:00:59.430 --> 00:01:01.950
Let's go ahead and set up a try block.

16
00:01:02.980 --> 00:01:09.970
And right after its closing curly bracket, let's also set up a catch block, so let's do this within

17
00:01:09.970 --> 00:01:14.910
the tribe, like, let's say let post equal.

18
00:01:15.520 --> 00:01:22.050
And so far, the pattern we've been following would be to say a new instance of our blueprint or model.

19
00:01:22.510 --> 00:01:28.840
But in this case, because we are not creating a post or updating a post or needing to validate anything,

20
00:01:29.350 --> 00:01:32.870
I don't necessarily like this object oriented approach.

21
00:01:33.220 --> 00:01:37.080
So instead, let's just say let post equal.

22
00:01:37.540 --> 00:01:43.300
We're still going to use our post model, but let's just look inside it and pretend that we have a function

23
00:01:43.300 --> 00:01:51.670
named Find single by I.D. There's nothing special about this name.

24
00:01:51.670 --> 00:01:52.810
I just made it up.

25
00:01:53.410 --> 00:01:56.070
But I do think it's aptly named right.

26
00:01:56.080 --> 00:02:03.940
We want to load or find or retrieve a single post document and we want to find it by its ID.

27
00:02:04.780 --> 00:02:12.490
So within these parentheses, we would just want to pass the final segment of whatever you call a visitor

28
00:02:12.490 --> 00:02:13.360
is trying to visit.

29
00:02:13.660 --> 00:02:18.120
Right, because that's the ID of the single post they want to view.

30
00:02:18.580 --> 00:02:22.870
So let me show you how we can access that within our request.

31
00:02:22.870 --> 00:02:31.480
Object Express is going to have a Paramo object short for parameters and inside that we can just look

32
00:02:31.480 --> 00:02:32.920
for ID.

33
00:02:33.610 --> 00:02:40.780
This name corresponds with the colon ID or that dynamic part that we set up in the router.

34
00:02:41.300 --> 00:02:44.890
OK, now at the moment this function doesn't actually exist yet.

35
00:02:44.890 --> 00:02:46.540
We're going to need to go create it.

36
00:02:46.810 --> 00:02:52.650
But we can imagine that when we do create it, we would set it up so that it returns a promise.

37
00:02:53.170 --> 00:02:57.520
So right before this, let's just include the word awaked.

38
00:02:58.000 --> 00:03:03.880
OK, now below that line, this is where we would want to render out our single post template.

39
00:03:04.540 --> 00:03:13.570
So down here, let's just say response render the name of the template is single dash post, dash screen.

40
00:03:14.290 --> 00:03:16.900
And then we'd want to include a second argument.

41
00:03:17.240 --> 00:03:21.880
This would be an object of data that we want to pass into the template.

42
00:03:22.480 --> 00:03:28.870
So let's just include a properly named post and set its value to our post variable.

43
00:03:29.380 --> 00:03:31.540
So post colon post.

44
00:03:32.330 --> 00:03:34.240
OK, but what about the catch block?

45
00:03:34.810 --> 00:03:38.260
Well, we wouldn't want our promise to always resolve.

46
00:03:38.410 --> 00:03:43.030
Sometimes we'd want it to reject, for example, if someone typed in a U.

47
00:03:43.030 --> 00:03:49.210
RL that didn't make any sense, meaning they tried to include malicious code at the end of the Eurail,

48
00:03:49.600 --> 00:03:53.680
or they type something in that in no way looked like a mango DB did.

49
00:03:54.280 --> 00:04:00.760
Or even if they do type something in that looks like a mango devide, but it doesn't find any documents

50
00:04:00.760 --> 00:04:05.740
in our database in any of those cases we would want our promise to reject.

51
00:04:06.190 --> 00:04:06.460
Right.

52
00:04:06.460 --> 00:04:08.440
Because it's not going to find a post.

53
00:04:08.920 --> 00:04:15.550
So if it does down in our sketch block, we can just render a 404 or sorry, we can't find what you're

54
00:04:15.550 --> 00:04:16.620
looking for template.

55
00:04:17.080 --> 00:04:18.910
Now, let's not get too sidetracked for now.

56
00:04:18.910 --> 00:04:20.440
We can just send back a response.

57
00:04:20.440 --> 00:04:26.680
So response dot send and let's just say for a for template, we'll go here later on.

58
00:04:26.680 --> 00:04:32.160
We can circle back and set this up to actually render a page not found template.

59
00:04:32.740 --> 00:04:38.680
OK, now that we have this set up, we better go in to our post model and create a function with this

60
00:04:38.710 --> 00:04:39.670
matching name.

61
00:04:40.180 --> 00:04:42.340
So let's go ahead and save this file.

62
00:04:42.730 --> 00:04:51.070
And then within our models folder, let's jump in to post JS and let's remember that this time around

63
00:04:51.160 --> 00:04:56.740
we are not taking an object oriented approach, meaning back in our controller.

64
00:04:56.860 --> 00:05:02.260
We are not trying to create a new instance of a post based on this blueprint.

65
00:05:02.770 --> 00:05:09.220
So this time around we don't need to worry about our constructor function and the this key word and

66
00:05:09.220 --> 00:05:12.940
adding methods to its prototype this time around.

67
00:05:12.940 --> 00:05:13.870
All we need to do.

68
00:05:13.870 --> 00:05:20.440
Let's scroll down to the very bottom of this file and right above this final line where we export everything.

69
00:05:20.830 --> 00:05:27.640
Let's just do this, let's say uppercase post dot and then let's just make up our function name.

70
00:05:27.640 --> 00:05:35.640
So find single by IDE and let's set that to equal a function.

71
00:05:37.270 --> 00:05:39.250
Now, you might be confused by this.

72
00:05:39.580 --> 00:05:44.950
We know that uppercase post is a function right up at the top of this file.

73
00:05:44.950 --> 00:05:48.460
That's where we have our constructor function named uppercase post.

74
00:05:48.910 --> 00:05:54.820
So you might be wondering how can we add properties or a function to a function?

75
00:05:55.300 --> 00:06:01.750
Well, remember that in JavaScript a function is an object just like any other object.

76
00:06:02.080 --> 00:06:02.500
Meaning?

77
00:06:02.620 --> 00:06:08.710
We can use its name space or meaning we can store properties within it by just saying DOT and then a

78
00:06:08.710 --> 00:06:09.290
property.

79
00:06:09.760 --> 00:06:16.810
This is great because now within our controller, we can leverage uppercase post either as a constructor,

80
00:06:17.080 --> 00:06:17.380
right.

81
00:06:17.380 --> 00:06:24.110
From an object oriented perspective, or we can just simply call a really simple function on it.

82
00:06:24.610 --> 00:06:30.160
Now, I didn't invent this strategy of being able to use a function in multiple ways like this.

83
00:06:30.490 --> 00:06:37.510
If you've ever used the popular Mongo DB object modeling tool named Mongoose, then this setup might

84
00:06:37.510 --> 00:06:39.400
be familiar to you, right?

85
00:06:39.420 --> 00:06:45.760
You know that within your controller, you can leverage your mongoose model both to create new objects

86
00:06:45.760 --> 00:06:50.200
with it as a blueprint, but you can also call simple functions from it as well.

87
00:06:50.750 --> 00:06:55.530
OK, let's get back to the actual task at hand within the parentheses for this function.

88
00:06:55.720 --> 00:06:59.370
Let's receive the incoming ID, OK?

89
00:06:59.380 --> 00:07:03.490
And then within the body of this function, we would want to return a promise.

90
00:07:03.520 --> 00:07:09.820
So return a new instance of promise within the parentheses for promise.

91
00:07:09.830 --> 00:07:18.160
You include a function and within the parentheses for that function is where we would include resolve

92
00:07:18.160 --> 00:07:19.430
and reject.

93
00:07:20.620 --> 00:07:26.920
OK, now within the body of this function, before we actually try to look any data up in our database,

94
00:07:27.160 --> 00:07:32.830
let's first make sure that the requested I.D. makes sense and isn't malicious.

95
00:07:33.280 --> 00:07:40.330
So within our function, let's set up an if statement if parentheses curly brackets for our condition

96
00:07:40.330 --> 00:07:47.470
within these parentheses, let's say type of which gets its own set of parentheses inside it.

97
00:07:47.470 --> 00:07:56.560
Let's pass in the incoming requested ID and let's say if that does not equal string, meaning if a user

98
00:07:56.560 --> 00:08:01.450
is trying to send over an object or anything, that's not just a simple string.

99
00:08:01.810 --> 00:08:06.550
That means they could be a malicious user trying to perform an injection attack.

100
00:08:07.000 --> 00:08:14.110
In other words, any time we're going to use user input data to build a query and Mongo DB, we need

101
00:08:14.110 --> 00:08:18.100
to make sure that it's just a simple string of text and not an object.

102
00:08:18.700 --> 00:08:24.250
OK, now after the quotes for string here, but still within our parentheses for the condition let's

103
00:08:24.250 --> 00:08:28.180
say, or and then we can include another condition.

104
00:08:28.180 --> 00:08:31.110
So I could say two plus two equals four.

105
00:08:31.690 --> 00:08:34.290
So this is the old symbol in JavaScript.

106
00:08:34.660 --> 00:08:41.860
If this is true or if this is true, to create one of these characters, it's just the key to the right

107
00:08:41.860 --> 00:08:43.930
of your closing curly bracket key.

108
00:08:44.230 --> 00:08:48.200
And also be sure to hold down the shift key when you press that game.

109
00:08:48.330 --> 00:08:50.890
We want two of those to create the OR.

110
00:08:51.490 --> 00:08:51.790
All right.

111
00:08:51.790 --> 00:08:56.020
Now for our second condition, we don't actually want two plus two equals four.

112
00:08:56.650 --> 00:09:03.940
But we want to do here is make sure that the incoming ID is a valid Mongo DB object ID.

113
00:09:04.420 --> 00:09:09.580
What I mean by this is in Mongu DB the ID for a document.

114
00:09:09.820 --> 00:09:10.100
Right.

115
00:09:10.120 --> 00:09:16.480
This unique string of characters, not only does it need to be a certain length, but also only certain

116
00:09:16.480 --> 00:09:18.340
characters are allowed in here.

117
00:09:18.700 --> 00:09:21.540
So if the final segment of our U.

118
00:09:21.550 --> 00:09:27.820
RL is not even a valid Mongul divide, we do not need to waste a trip to our database.

119
00:09:28.330 --> 00:09:31.510
We could just immediately send a page not found message.

120
00:09:31.960 --> 00:09:39.550
So after the other symbol than, let's say, object I.D., we already required this in at the top of

121
00:09:39.550 --> 00:09:45.010
this file and let's look inside it and call is valid within the parentheses.

122
00:09:45.010 --> 00:09:51.340
Let's pass it the requested ID and this would return true if it was a valid ID.

123
00:09:51.820 --> 00:09:59.680
Let's include an exclamation mark at the beginning of this to say if it's not a valid ID, OK, so if

124
00:09:59.680 --> 00:10:06.550
the idea is not just a simple string of text or if it's not a valid Mongo devide, well then within

125
00:10:06.550 --> 00:10:09.130
our if curly brackets, let's drop down.

126
00:10:09.730 --> 00:10:16.480
And not only would we want to reject this promise, but below that we would also want to return.

127
00:10:16.750 --> 00:10:21.290
We'd want to prevent any further execution of this function.

128
00:10:22.000 --> 00:10:22.480
All right.

129
00:10:22.480 --> 00:10:28.260
Now, after this if statement, so after this closing curly bracket for the F, let's drop down.

130
00:10:28.870 --> 00:10:35.320
And if JavaScript ever gets to this point, that means we have an ID value, that we are safe to try

131
00:10:35.320 --> 00:10:37.000
and look up in our database.

132
00:10:37.390 --> 00:10:42.250
So let's create a variable, let's name it post and let's set it to equal.

133
00:10:42.490 --> 00:10:45.580
And then we can just use a Mongo DB crud function.

134
00:10:46.090 --> 00:10:53.140
So we know that we can work with our collection of post documents by using our posts collection variable.

135
00:10:53.590 --> 00:10:57.880
And let's look inside it for a method named Find One.

136
00:10:58.630 --> 00:11:02.320
Within these parentheses, we tell Mongo what we're trying to find.

137
00:11:02.920 --> 00:11:10.540
So let's give it an object, and we want to find a document where the underscore ID field has a value

138
00:11:10.540 --> 00:11:15.120
that matches the incoming requested ID from the euro.

139
00:11:15.670 --> 00:11:24.280
So down here, let's create a new instance of the Mongo DB Object ID and that gets its own set of parentheses.

140
00:11:24.280 --> 00:11:26.740
And in there we can just pass in the requested ID.

141
00:11:27.680 --> 00:11:28.050
Cool.

142
00:11:28.520 --> 00:11:34.460
OK, now below this line, we can just write one more if statement, let's say, if parentheses curly

143
00:11:34.460 --> 00:11:42.530
brackets and after the closing curly brackets for if, let's also add an else block, OK, for our condition

144
00:11:42.530 --> 00:11:48.950
within these parentheses, we can just say post this variable that we created on this line, because

145
00:11:49.160 --> 00:11:54.860
if this Mongo DB method finds a document, that's what it's going to resolve to.

146
00:11:55.190 --> 00:11:59.580
If it doesn't find a document, then this variable would essentially be empty.

147
00:11:59.870 --> 00:12:01.690
So this would not evaluate to true.

148
00:12:02.240 --> 00:12:04.580
Now we do need to be careful with the timing of things.

149
00:12:04.580 --> 00:12:12.050
So we would not want to execute this until this action had a chance to actually complete or resolve.

150
00:12:12.350 --> 00:12:15.860
Now we know that this Mongo DB method is going to return a promise.

151
00:12:16.220 --> 00:12:22.580
So right at the start of this, we can just say, oh, wait this way, JavaScript will wait for this

152
00:12:22.580 --> 00:12:26.330
promise to complete before moving on to further operations.

153
00:12:26.630 --> 00:12:31.630
Now, if we're going to use a wait, we need to be sure that we are within an async function.

154
00:12:32.030 --> 00:12:37.370
So up on this line where we say return new promise and then give it a function right before that word

155
00:12:37.370 --> 00:12:40.190
function, just include async.

156
00:12:41.180 --> 00:12:42.490
Cool with that in place.

157
00:12:42.500 --> 00:12:44.680
Let's get back to our if else.

158
00:12:45.170 --> 00:12:53.480
So if we successfully found a post, let's just have our promise resolve with a value of that post document

159
00:12:54.000 --> 00:12:54.680
else.

160
00:12:54.890 --> 00:12:59.570
If there is no matching post document for that ID, let's just reject.

161
00:13:00.260 --> 00:13:03.040
OK, let's go ahead and save this and test it out.

162
00:13:03.500 --> 00:13:08.750
Be sure that you also saved your latest changes to your post controller and then back in the browser,

163
00:13:09.320 --> 00:13:16.220
if we visit SGB Post Slash and then just random letters that you type in, we should see a message that

164
00:13:16.220 --> 00:13:18.920
says 404 template will go here.

165
00:13:19.310 --> 00:13:19.530
Right.

166
00:13:19.580 --> 00:13:26.300
Clearly, this is not a real post ID, but to really test this out, let's go into our Mongo DB database

167
00:13:27.110 --> 00:13:34.550
and within our posts collection, just find the post document from our previous lesson and click in

168
00:13:34.550 --> 00:13:36.140
to its ID field.

169
00:13:36.470 --> 00:13:42.170
And we just want to copy and paste this unique string of characters within this object ID.

170
00:13:42.650 --> 00:13:44.150
We don't need to include the quotes.

171
00:13:44.150 --> 00:13:45.740
We're only interested in that string.

172
00:13:45.740 --> 00:13:52.100
So click into this field, just select the string of characters, copy that in your clipboard, back

173
00:13:52.100 --> 00:13:58.130
in the tab with our web app, then just paste that in as the final section for you URL.

174
00:14:00.480 --> 00:14:07.890
Cool, so that template is being rendered now let's just go ahead and pull in the actual title and the

175
00:14:07.890 --> 00:14:14.110
actual created on date and the actual body content to refresh your memory of how we can do that.

176
00:14:14.340 --> 00:14:18.470
Let's jump back into our post controller to back and post controller.

177
00:14:19.050 --> 00:14:25.140
Remember that when we are rendering that single post screen, we're also passing a bit of data into

178
00:14:25.140 --> 00:14:25.290
it.

179
00:14:25.800 --> 00:14:31.260
We're passing a property of post, which is going to be the document from the database.

180
00:14:31.590 --> 00:14:36.130
Right, because that's what this promise resolves to and that's what we're storing in this variable.

181
00:14:36.750 --> 00:14:44.010
So let's jump into this single post screen template, then your views folder, single post screen,

182
00:14:44.220 --> 00:14:49.080
SJS around line number five, we see a heading level two.

183
00:14:49.350 --> 00:14:53.690
So instead of this fake hardcoded title, let's get rid of that.

184
00:14:54.450 --> 00:15:01.020
So just empty heading level to tags and instead let's do something dynamic in an Ejaz template.

185
00:15:01.020 --> 00:15:07.290
So less than percentage equal signed output to close that tag is just percentage greater then.

186
00:15:07.620 --> 00:15:14.050
And we could just say post dot title, let's give that a save and test it out.

187
00:15:14.070 --> 00:15:18.250
So back in the browser, when I refresh, we would expect this title to change.

188
00:15:19.050 --> 00:15:19.760
Perfect.

189
00:15:19.890 --> 00:15:22.140
That's the real value from the database.

190
00:15:22.780 --> 00:15:27.500
OK, up next, for now, let's not worry about pulling in the actual author.

191
00:15:27.690 --> 00:15:29.350
We can circle back to that later.

192
00:15:29.820 --> 00:15:32.660
For now, let's focus on the created on date.

193
00:15:33.090 --> 00:15:41.750
So back in our SJS template around line number 16, we see posted by the author on and then the date.

194
00:15:42.300 --> 00:15:48.950
So let's get rid of this fake hardcoded date and instead let's output something dynamic so less than

195
00:15:48.960 --> 00:15:50.570
percentage equal sign.

196
00:15:51.090 --> 00:15:52.400
Let's close that tag out.

197
00:15:53.220 --> 00:16:00.060
We want to begin working with our post document and look inside it for the created date field.

198
00:16:00.480 --> 00:16:08.010
And then first, we're just interested in the month so we can say dot get month and now in JavaScript

199
00:16:08.010 --> 00:16:14.100
months are zero based, meaning January is represented by a zero instead of a one.

200
00:16:14.580 --> 00:16:18.810
February is represented as one instead of two, so on and so forth.

201
00:16:19.170 --> 00:16:23.580
So after this we can just say plus one to get around that.

202
00:16:24.030 --> 00:16:26.040
OK, that will pull in the month value.

203
00:16:26.280 --> 00:16:32.640
After that, let's add a slash and then we would want to pull in the day value so less than percentage

204
00:16:32.640 --> 00:16:33.210
equal.

205
00:16:33.210 --> 00:16:36.000
Close that out percentage greater than in here.

206
00:16:36.010 --> 00:16:38.820
Let's work with our post, get the created date.

207
00:16:39.630 --> 00:16:44.190
And in JavaScript, all date objects have a method named git date.

208
00:16:45.060 --> 00:16:46.740
So that's going to be the day of the month.

209
00:16:47.020 --> 00:16:48.840
Finally, we're interested in the year.

210
00:16:49.200 --> 00:16:54.230
So after this closing tag, let's say slash and then the year.

211
00:16:54.240 --> 00:16:59.760
So to output that less than percentage equal, close that tag out in here.

212
00:16:59.760 --> 00:17:06.360
We want to work with Post, get the created date and JavaScript date objects have a method named git

213
00:17:06.960 --> 00:17:08.480
full year.

214
00:17:09.240 --> 00:17:09.600
Cool.

215
00:17:09.780 --> 00:17:11.790
I realized that was a lot to type out.

216
00:17:11.970 --> 00:17:12.840
Do you remember that?

217
00:17:12.840 --> 00:17:17.850
You can always take a look at the completed example files for particular lesson.

218
00:17:18.060 --> 00:17:21.300
And if you want to copy and paste this line of code, that's OK.

219
00:17:22.260 --> 00:17:24.590
Let's go ahead and save this and test it out.

220
00:17:25.020 --> 00:17:27.330
So if I refresh, let's pay attention to the date.

221
00:17:28.020 --> 00:17:28.560
Awesome.

222
00:17:28.560 --> 00:17:31.110
This is now real data from the database.

223
00:17:31.590 --> 00:17:34.920
Next, let's pull in the real actual body content.

224
00:17:35.550 --> 00:17:42.630
So back in our template around line number eighteen, we see a div with the class of body content.

225
00:17:42.960 --> 00:17:46.980
Let's delete the sample hardcoded paragraphs within that div.

226
00:17:47.370 --> 00:17:53.280
OK, so now we just have an empty body content div and let's just output so less than percentage equal

227
00:17:53.280 --> 00:17:55.170
sine close that tag.

228
00:17:55.350 --> 00:18:02.340
Let's just output our post object's body field or body property postop body.

229
00:18:02.340 --> 00:18:03.480
Let's give that a save.

230
00:18:04.330 --> 00:18:05.160
We refresh.

231
00:18:06.300 --> 00:18:06.990
Perfect.

232
00:18:08.070 --> 00:18:14.250
So now that we've pulled in the content, the created on date and the title, it's time to circle back

233
00:18:14.250 --> 00:18:20.790
to the author of this post pulling in this data from the database is going to be a bit more challenging.

234
00:18:21.210 --> 00:18:24.330
This is because let me jump to Mongo DB Atlus.

235
00:18:24.960 --> 00:18:32.010
If we look at a document for a post, we aren't actually storing the author's username aggravator.

236
00:18:32.220 --> 00:18:35.730
We're only storing the ID of the user account.

237
00:18:35.730 --> 00:18:36.990
They authored the post.

238
00:18:37.590 --> 00:18:43.830
So when we're looking up post documents in our post model, we need to learn how to perform a second

239
00:18:43.830 --> 00:18:49.800
step of looking up the relevant user document that is listed here as the author.

240
00:18:50.100 --> 00:18:50.360
Right.

241
00:18:50.370 --> 00:18:57.330
We need to look up this matching user document to actually know its user name and email to find its

242
00:18:57.330 --> 00:18:57.900
gravity.

243
00:18:58.560 --> 00:18:59.880
Well, luckily for us.

244
00:19:00.220 --> 00:19:06.790
Mongo DB has a feature that will let us do exactly that, and that's what we're going to cover in our

245
00:19:06.790 --> 00:19:07.680
next lesson.

246
00:19:08.110 --> 00:19:10.560
Let's keep things rolling and I'll see you then.
