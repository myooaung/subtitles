WEBVTT
1
00:00:01.930 --> 00:00:02.920
Hello, everyone.

2
00:00:03.160 --> 00:00:07.890
In this lesson, we're going to learn how to let users log out.

3
00:00:08.200 --> 00:00:14.590
So in our previous lesson, we learned more about sessions and we allowed users to see this template

4
00:00:14.710 --> 00:00:15.820
when they logged in.

5
00:00:16.210 --> 00:00:21.860
Also now in the top right corner, instead of seeing a log in form, they see this menu.

6
00:00:22.300 --> 00:00:27.640
Now, our goal in this lesson is to make this sign out button come to life.

7
00:00:28.120 --> 00:00:28.360
Right?

8
00:00:28.400 --> 00:00:33.890
We want to give users the ability to sign out or destroy their current session.

9
00:00:34.330 --> 00:00:41.410
So our first step towards making this happen would be to dig in to the HTML template for this and make

10
00:00:41.410 --> 00:00:48.740
sure we are aware of where this form is going to submit once a user clicks on this sign out button.

11
00:00:49.300 --> 00:00:50.470
Let me show you what I mean.

12
00:00:50.500 --> 00:00:55.220
So right now, let's jump into our text editor within our Views folder.

13
00:00:55.270 --> 00:01:02.220
Let's jump into the file named Home Dash Dashboard online number 23.

14
00:01:03.760 --> 00:01:08.100
We see that sign out button and it lives within a form.

15
00:01:08.500 --> 00:01:13.140
Now, currently, the action for this form is set to a placeholder hash tag.

16
00:01:13.480 --> 00:01:19.420
Let's get rid of this placeholder and instead say slash log out.

17
00:01:20.020 --> 00:01:20.350
Right.

18
00:01:20.350 --> 00:01:23.840
That's the fuel that this form is going to submit to.

19
00:01:24.280 --> 00:01:26.440
So let's go ahead and save this file.

20
00:01:26.710 --> 00:01:32.350
And now let's jump in to our file that is named Rouda Dot J.S..

21
00:01:32.620 --> 00:01:32.910
Right.

22
00:01:32.920 --> 00:01:37.660
We would want to set up a new route to handle this slash logout.

23
00:01:37.660 --> 00:01:42.640
You are so jump into Rueter dot J.S. right below these lines.

24
00:01:42.640 --> 00:01:47.560
Let's add a new line and let's say Rueter dot post.

25
00:01:47.590 --> 00:01:47.810
Right.

26
00:01:47.860 --> 00:01:54.280
This is going to be a post request because a form is being submitted and for the euro, we're looking

27
00:01:54.280 --> 00:01:56.950
out for it's slash logout.

28
00:01:57.580 --> 00:01:58.990
And then for the second argument.

29
00:01:58.990 --> 00:02:03.110
So comma, what function do we want to call in response to this?

30
00:02:03.640 --> 00:02:10.700
Well, let's imagine that within our user controller, we are going to have a function named logout.

31
00:02:11.290 --> 00:02:14.260
OK, let's go ahead and save this file.

32
00:02:14.590 --> 00:02:19.800
And now let's jump in to our user controller and build out that log out function.

33
00:02:20.230 --> 00:02:26.650
So within our controllers folder, let's jump into the file that is named user controller Dot Gorgias.

34
00:02:27.040 --> 00:02:33.910
And in an earlier lesson, I already created this empty skeleton function named Log Out.

35
00:02:34.210 --> 00:02:36.300
If you don't already have this, that's OK.

36
00:02:36.310 --> 00:02:38.290
Just pause the video and set this up.

37
00:02:38.650 --> 00:02:44.710
OK, but for this log out function within its parentheses, let's include two parameters, right?

38
00:02:44.890 --> 00:02:47.130
RFQ and RSS.

39
00:02:47.560 --> 00:02:53.590
Now, within the body of this function, all we need to do is say request dot session.

40
00:02:53.890 --> 00:02:54.220
Right.

41
00:02:54.220 --> 00:02:58.870
That's how we can access the session object and now it has a method.

42
00:02:58.900 --> 00:03:03.830
So let's look inside it with the dot and call the method named destroy.

43
00:03:05.050 --> 00:03:12.100
So if the current incoming request from a browser has a cookie with a valid or matching session ID,

44
00:03:12.340 --> 00:03:16.720
this is going to find that in our database and destroy that session.

45
00:03:17.080 --> 00:03:20.140
OK, then after this line, let's send back a response.

46
00:03:20.140 --> 00:03:22.720
So let's just say a response dot send.

47
00:03:22.870 --> 00:03:27.920
And just as a quick test, we can say you are now logged out.

48
00:03:28.780 --> 00:03:31.750
All right, let's go ahead and save this and test it out.

49
00:03:32.110 --> 00:03:35.100
So back in the browser, be sure to refresh.

50
00:03:35.110 --> 00:03:38.290
So the sign out form has the updated action value.

51
00:03:38.470 --> 00:03:43.270
OK, and now if I click sign out, we see you are now logged out.

52
00:03:43.570 --> 00:03:50.950
And if I go into my Mongo DB Atlus account and within my sessions collection, if I click find to reload

53
00:03:50.950 --> 00:03:57.910
in the latest data, you can see instead of there being two documents now there's only one session document

54
00:03:58.240 --> 00:04:01.770
and this is the one where username is Cat, right.

55
00:04:01.790 --> 00:04:04.830
That's my other Mozilla Firefox web browser.

56
00:04:05.020 --> 00:04:09.850
The idea is the session document for the user was successfully deleted.

57
00:04:10.360 --> 00:04:17.260
So as you might expect, with that session being gone back in my browser where I was logged in as Brad,

58
00:04:17.260 --> 00:04:22.120
if I now visit the home page or base, you rl cool.

59
00:04:22.120 --> 00:04:24.580
It successfully treats me as a guest.

60
00:04:24.970 --> 00:04:26.350
I'm no longer logged in.

61
00:04:26.740 --> 00:04:30.880
So the log out feature is working, but let's make an improvement.

62
00:04:31.120 --> 00:04:33.850
So just as a quick test, let me log back in.

63
00:04:37.630 --> 00:04:45.400
OK, and then if I visit the home page URL, we can see I am logged in and the improvement I want to

64
00:04:45.400 --> 00:04:47.880
make is when a user logs out.

65
00:04:48.340 --> 00:04:55.780
So if I click sign out again, instead of showing a user this awkward, you are now logged out screen

66
00:04:56.050 --> 00:04:57.760
from the slash log out.

67
00:04:57.760 --> 00:04:58.420
You are out.

68
00:04:58.870 --> 00:05:03.820
Instead of this, it would make more sense to redirect them to the home.

69
00:05:03.820 --> 00:05:08.640
You Ã³rale instead of this weird, awkward intermediate you URL and message.

70
00:05:09.100 --> 00:05:09.390
Right.

71
00:05:09.400 --> 00:05:13.390
So let's just redirect them to the home and they will see the guest home page.

72
00:05:13.720 --> 00:05:14.910
Let me show you what I mean.

73
00:05:14.920 --> 00:05:21.940
So back in our user controller file within our log out function, let's get rid of this line where we

74
00:05:21.940 --> 00:05:24.340
say response dot send.

75
00:05:24.340 --> 00:05:25.600
You are now logged out.

76
00:05:28.100 --> 00:05:36.470
Instead of response send, we want to use response dot redirect, however, because this destroy method

77
00:05:36.470 --> 00:05:38.510
is going to have to deal with our database.

78
00:05:38.780 --> 00:05:41.360
It's not going to complete immediately.

79
00:05:41.780 --> 00:05:47.330
And because we want to be sure that that task has completed before redirecting them to the home page.

80
00:05:47.570 --> 00:05:52.390
What we need to do is worry about the timing or coordination of these events.

81
00:05:52.850 --> 00:05:56.920
So let's do this within the parentheses for destroy.

82
00:05:57.140 --> 00:05:59.090
Let's provide a callback function.

83
00:05:59.390 --> 00:06:05.300
Now, if you just had a little voice in the back of your head, say, couldn't we use a promise instead

84
00:06:05.300 --> 00:06:07.910
of a callback function, kudos to you.

85
00:06:08.090 --> 00:06:14.390
However, as of the time of this recording, I do not believe the session package functions, return

86
00:06:14.390 --> 00:06:15.320
promises.

87
00:06:15.620 --> 00:06:19.100
Don't worry, we will make extensive use of promises a bit later on.

88
00:06:19.550 --> 00:06:25.340
Anyways, within these destroyed parentheses, let's include a function, parentheses, curly brackets.

89
00:06:25.850 --> 00:06:26.360
All right.

90
00:06:26.360 --> 00:06:31.970
And once the destroy function has had a chance to actually complete the task of deleting that session

91
00:06:31.970 --> 00:06:41.450
in the database, then we just want to say response dot redirect and let's just redirect them to slash

92
00:06:41.450 --> 00:06:42.600
or the home page.

93
00:06:43.070 --> 00:06:48.500
The reason we didn't need to wait for this to complete before is because we were just showing a simple

94
00:06:48.500 --> 00:06:54.290
message that said you are now logged out, whereas now when we want to redirect them to the home page,

95
00:06:54.530 --> 00:07:00.380
remember that the home page is going to be different depending on whether you have a user session or

96
00:07:00.380 --> 00:07:00.800
not.

97
00:07:01.370 --> 00:07:04.970
It's going to render a different template depending on that condition.

98
00:07:05.300 --> 00:07:09.700
So in this case, we really do need to wait until the session has been destroyed.

99
00:07:10.220 --> 00:07:10.610
All right.

100
00:07:10.640 --> 00:07:13.940
With this setup, let's go ahead and save this and test it out.

101
00:07:14.330 --> 00:07:19.470
So back in my browser, I would need to send a new request to the home page to log in again.

102
00:07:19.880 --> 00:07:21.500
Be sure that you do that as well.

103
00:07:21.560 --> 00:07:27.920
Do not just click the back button in your browser because your browser would be using a cached copy

104
00:07:28.100 --> 00:07:29.290
of this you url.

105
00:07:29.720 --> 00:07:34.280
So visually, your browser would make it look like you're logged in even though you're really not.

106
00:07:34.520 --> 00:07:39.080
So be sure to go up to the address bar and send a fresh request to this.

107
00:07:39.080 --> 00:07:39.450
You are.

108
00:07:39.450 --> 00:07:41.540
Well, OK, let's log in.

109
00:07:41.860 --> 00:07:44.150
So Brad, type in your password.

110
00:07:45.350 --> 00:07:45.920
OK, we see.

111
00:07:45.920 --> 00:07:46.490
Congrats.

112
00:07:46.640 --> 00:07:50.990
Don't worry, we're also going to fix this awkward intermediate login screen as well.

113
00:07:50.990 --> 00:07:59.240
But now if I go back to the home page, you rl I'm successfully logged in and now let's test out the

114
00:07:59.240 --> 00:08:00.230
log out function.

115
00:08:00.440 --> 00:08:06.230
So hopefully it's a lot smoother now I click sign out, there's no awkward intermediate screen.

116
00:08:06.560 --> 00:08:08.900
It just redirects me to the home page.

117
00:08:09.050 --> 00:08:12.170
But obviously that section is successfully destroyed.

118
00:08:12.590 --> 00:08:13.220
Awesome.

119
00:08:13.610 --> 00:08:20.600
Next, let's make a similar improvement for the logging in action, meaning let's get rid of that awkward

120
00:08:20.600 --> 00:08:25.550
intermediate congrats screen that you would see after a successful login.

121
00:08:25.910 --> 00:08:28.920
Instead, let's just redirect the user to the home page.

122
00:08:28.920 --> 00:08:34.820
You are only now, since they would have a session, they would see the actual application instead.

123
00:08:35.330 --> 00:08:41.390
So to set that up, let's jump back into our text editor and we're going to be working within our login

124
00:08:41.390 --> 00:08:41.990
function.

125
00:08:42.380 --> 00:08:49.730
So if the user login method is successful, if the promise resolves, then this then code will run.

126
00:08:50.300 --> 00:08:55.280
So what we want to do is get rid of this awkward intermediate screen where we send back a little bit

127
00:08:55.280 --> 00:08:56.690
of congrats text.

128
00:08:56.930 --> 00:08:58.580
So let's delete that line.

129
00:08:59.270 --> 00:09:02.120
And instead we just want to redirect to the home page.

130
00:09:02.360 --> 00:09:06.320
However, again, we do need to worry about the timing of our events.

131
00:09:06.800 --> 00:09:13.550
What I mean by this is when we say request session user, the session package is going to recognize

132
00:09:13.550 --> 00:09:21.260
that we are changing the session data and in response is going to automatically update that session

133
00:09:21.260 --> 00:09:23.120
data in the database for us.

134
00:09:23.420 --> 00:09:24.080
This is great.

135
00:09:24.080 --> 00:09:30.140
It's very helpful that it does this automatically, however, because updating data in a database is

136
00:09:30.140 --> 00:09:33.650
an asynchronous action that's going to take a while to complete.

137
00:09:33.980 --> 00:09:41.120
We don't just want to run response dot redirect right here because there's no guarantee that the database

138
00:09:41.120 --> 00:09:45.560
will have actually been updated in time before the redirect runs.

139
00:09:46.100 --> 00:09:47.270
So here's what we can do.

140
00:09:47.660 --> 00:09:54.110
Even though the session package would usually automatically update or save the session data for us,

141
00:09:54.380 --> 00:09:56.750
we can manually tell it to save.

142
00:09:57.230 --> 00:10:05.240
So right here, let's say this request session dot save and save as a method.

143
00:10:05.240 --> 00:10:07.500
So parentheses to call it OK.

144
00:10:07.590 --> 00:10:14.030
And now within these parentheses we give it a callback function and it will not call that function until

145
00:10:14.030 --> 00:10:19.160
it's actually had a chance to complete that action of saving the new data to the database.

146
00:10:19.760 --> 00:10:25.820
So within these parentheses we just say function, parentheses, curly brackets and within the body

147
00:10:25.820 --> 00:10:26.630
of this function.

148
00:10:26.870 --> 00:10:34.820
This is where we can finally say response, redirect and just redirect them to slash or the base, you

149
00:10:34.820 --> 00:10:36.120
are so cool.

150
00:10:36.320 --> 00:10:38.800
Let's give this file to save and test it out.

151
00:10:39.260 --> 00:10:42.470
So back in the browser, if I perform a successful log in.

152
00:10:46.930 --> 00:10:53.560
Perfect, there's no awkward intermediate screen, I'm just redirected to the same you URL only now

153
00:10:53.560 --> 00:10:58.010
the server recognizes my newly created session and I am logged in.

154
00:10:58.720 --> 00:10:59.140
Cool.

155
00:10:59.140 --> 00:11:05.050
So now at this point, both the actions of logging in and logging out feel a lot smoother.

156
00:11:05.500 --> 00:11:08.170
However, this does raise one question.

157
00:11:08.650 --> 00:11:10.430
Let me show you that question right now.

158
00:11:10.450 --> 00:11:18.750
So if I log back out, the question I want to pose is what if I perform a failed logging attempt?

159
00:11:18.970 --> 00:11:19.240
Right.

160
00:11:19.300 --> 00:11:22.870
What if I don't provide a correct username and password?

161
00:11:24.160 --> 00:11:30.880
Well, instead of this awkward intermediate screen of just invalid usernames password, I think it would

162
00:11:30.880 --> 00:11:36.970
make more sense to instead redirect the user back to this same guest page.

163
00:11:37.540 --> 00:11:44.320
Only maybe we could have a little red warning rectangle box here that says invalid username and password.

164
00:11:44.330 --> 00:11:45.100
Try again.

165
00:11:45.580 --> 00:11:49.600
A common name for this type of feature is flash messaging.

166
00:11:49.870 --> 00:11:54.550
And that is exactly what we are going to learn how to set up in our next lesson.

167
00:11:54.950 --> 00:11:57.490
So let's keep things rolling and I'll see you then.
