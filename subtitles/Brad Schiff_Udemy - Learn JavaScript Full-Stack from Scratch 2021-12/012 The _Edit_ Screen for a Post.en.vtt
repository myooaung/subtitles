WEBVTT
1
00:00:00.210 --> 00:00:05.230
Let's set up the ref or link value for this edit button, right?

2
00:00:05.250 --> 00:00:09.840
The question is, if a user clicks on this, what you URL should it take them to?

3
00:00:10.170 --> 00:00:16.560
Well, let's jump back into our text editor and online number eight, we see an element.

4
00:00:17.070 --> 00:00:22.440
So this is the element right below the span and right above this form tag.

5
00:00:22.890 --> 00:00:26.030
Currently, it's HCF is just a placeholder hash tag.

6
00:00:26.430 --> 00:00:27.570
Let's get rid of that.

7
00:00:27.750 --> 00:00:37.590
And instead, let's say slash post slash and then just as a placeholder, let's say I.D. and then slash

8
00:00:37.590 --> 00:00:41.760
edit, I just made up the structure, but I think it will work nicely.

9
00:00:42.150 --> 00:00:49.650
Now let's make the IDE segment of the URL actually dynamic, so get rid of ID and in its place drop

10
00:00:49.650 --> 00:00:50.970
into SJS.

11
00:00:53.580 --> 00:01:01.650
And we can just say post dot, underscore I.D., let's go ahead and save that and now back in the browser,

12
00:01:01.650 --> 00:01:05.640
if I refresh and now if I click on the edit icon.

13
00:01:06.390 --> 00:01:06.780
Cool.

14
00:01:06.790 --> 00:01:12.690
So this new URL tells the server that we want to work with a post which post we're interested in and

15
00:01:12.690 --> 00:01:14.660
what we would want to do at that post.

16
00:01:15.090 --> 00:01:18.570
Now we see an error because we have not actually set up a route for this.

17
00:01:18.870 --> 00:01:20.120
But let's do that right now.

18
00:01:20.280 --> 00:01:21.890
Let's go jump into our router.

19
00:01:22.290 --> 00:01:30.000
So in the root of our project folder, jump into rutabagas towards the bottom under this post related

20
00:01:30.000 --> 00:01:39.720
route's comment, let's add a new line and say router dot target and then give it a value of slash post

21
00:01:39.720 --> 00:01:41.580
slash Colen.

22
00:01:41.580 --> 00:01:46.560
I'd slash edit OK for the second argument.

23
00:01:46.560 --> 00:01:54.420
So comma, let's list a controller function so post controller and then let's make up a name, let's

24
00:01:54.420 --> 00:01:57.480
call it view edit screen.

25
00:01:58.260 --> 00:01:59.880
Let's go ahead and save this.

26
00:01:59.880 --> 00:02:04.850
And now we better go into our post controller and create a function with this matching name.

27
00:02:05.280 --> 00:02:11.370
So in your controllers folder open up post controller, let's scroll down to the very bottom and let's

28
00:02:11.370 --> 00:02:13.080
create a brand new function.

29
00:02:13.080 --> 00:02:17.820
So exports dot view, edit screen.

30
00:02:18.360 --> 00:02:22.290
Let's set that to a function within these parentheses.

31
00:02:22.290 --> 00:02:24.680
Be sure to include a request and response.

32
00:02:25.140 --> 00:02:29.910
OK, and now within the body of this function, we just need to do two things.

33
00:02:30.480 --> 00:02:34.560
We need to ask our post model for the data for this relevant post.

34
00:02:34.950 --> 00:02:35.250
Right.

35
00:02:35.250 --> 00:02:40.200
We'd need the existing title and body content so that the user could update or edit it.

36
00:02:40.620 --> 00:02:44.130
And then after that, we just want to render an edit screen template.

37
00:02:44.580 --> 00:02:51.570
Let's actually begin with the template, let's say response render and imagine that we're going to have

38
00:02:51.570 --> 00:02:54.750
a template named edit post.

39
00:02:55.320 --> 00:03:00.930
Before we go any further, let's go ahead and save this and make sure that we have a file or template

40
00:03:00.930 --> 00:03:02.100
with this matching name.

41
00:03:02.580 --> 00:03:10.290
So within our project's views folder, let's right click and choose new file and let's name the new

42
00:03:10.290 --> 00:03:10.830
file.

43
00:03:11.310 --> 00:03:15.770
Edit Dash Post, DOT SJS.

44
00:03:16.710 --> 00:03:23.130
Now if we think about it and edit post, the screen is going to look very similar to the create post

45
00:03:23.130 --> 00:03:23.580
screen.

46
00:03:24.090 --> 00:03:31.230
So let's actually just jump in to create dash post, select everything into our clipboard and copy and

47
00:03:31.230 --> 00:03:34.500
then back in our new empty edit post, just paste it in.

48
00:03:35.160 --> 00:03:38.220
There's only a few key differences for now.

49
00:03:38.220 --> 00:03:41.190
Let's just make one change down towards the bottom.

50
00:03:41.190 --> 00:03:49.410
We see this button element instead of saying save new post, let's have it say save updates.

51
00:03:49.920 --> 00:03:52.350
Now let's save this template and test it out.

52
00:03:52.350 --> 00:03:57.090
So back in the browser now if we visit the edit URL for a post.

53
00:03:57.090 --> 00:03:58.110
So if I refresh.

54
00:04:00.150 --> 00:04:04.110
Cool, so we have title and body fields and there's the save update's button.

55
00:04:04.440 --> 00:04:10.950
Now, just imagine if these fields were populated with the existing title and body values for the relevant

56
00:04:10.950 --> 00:04:11.460
post.

57
00:04:11.460 --> 00:04:12.480
For this, you are out.

58
00:04:13.110 --> 00:04:16.520
Well, to make that happen, let's just go back to our post comptroller.

59
00:04:16.890 --> 00:04:24.360
So in our post comptroller file within our view, edit screen function right above the render line with,

60
00:04:24.360 --> 00:04:34.350
say, look within our post model and let's call a function find single by I.D., OK, and then we just

61
00:04:34.350 --> 00:04:36.630
want to pull the ID from the current U.

62
00:04:36.630 --> 00:04:41.800
RL, so request programs, dot I.D..

63
00:04:42.450 --> 00:04:48.240
Now remember, this function that we created is going to return a promise and we wouldn't want to render

64
00:04:48.240 --> 00:04:51.120
our template until we actually have this data.

65
00:04:51.540 --> 00:04:54.750
So at the start of this line, let's just say a wait.

66
00:04:55.230 --> 00:04:58.830
We can only use the await feature within an async function.

67
00:04:58.860 --> 00:05:07.140
So right before the word function here to say async, OK, also whatever value this promise is going

68
00:05:07.140 --> 00:05:10.600
to resolve to is going to be the post that we're interested in.

69
00:05:11.010 --> 00:05:18.420
So at the start of this line, let's just say let post equal whatever value this promise resolves with,

70
00:05:18.720 --> 00:05:22.800
OK, and then that's what we would want to pass into our template.

71
00:05:23.280 --> 00:05:27.150
So let's add a second argument when we render the template, comma.

72
00:05:27.810 --> 00:05:34.620
We want to pass it an object and let's just have a property named Post with a value of post.

73
00:05:35.160 --> 00:05:42.060
However, let's remember that this promise of ours is going to reject, if it's not a valid I.D. that

74
00:05:42.060 --> 00:05:49.080
you're sending over to it, or if a post doesn't exist with that I.D. So to account for that, let's

75
00:05:49.260 --> 00:05:57.120
cut these two lines into our clipboard and let's set up a try block and below that, a catch block.

76
00:05:58.820 --> 00:06:05.060
Within the tribe block, we can just paste in our code and within the catch block, let's just render

77
00:06:05.060 --> 00:06:06.530
our 404 template.

78
00:06:06.530 --> 00:06:12.050
So response render 404, OK, let's save this.

79
00:06:12.200 --> 00:06:17.480
And now let's go into our edit post template and use the relevant post data.

80
00:06:17.840 --> 00:06:22.130
So right now, let's jump into our edit dash postgrads file.

81
00:06:22.430 --> 00:06:28.970
And we just want to use that post data to pre populate the title field and body field.

82
00:06:29.390 --> 00:06:32.450
So around line number seven, we see an input element.

83
00:06:32.880 --> 00:06:38.390
It doesn't matter exactly where, but somewhere on this input tag, let's give it a new attribute.

84
00:06:38.630 --> 00:06:42.740
Let's say value equals quotes.

85
00:06:43.010 --> 00:06:50.870
And in between those quotes, we want to drop into an Ejaz tag and we just want to pull in post DOT

86
00:06:51.080 --> 00:06:53.480
title to save some typing.

87
00:06:53.480 --> 00:06:58.220
You can copy this SJS bit of code because we're going to do the same thing with body.

88
00:06:58.820 --> 00:07:03.640
So if I copy that into my clipboard, then find the text area.

89
00:07:04.010 --> 00:07:06.410
This element is the body field.

90
00:07:06.860 --> 00:07:13.640
Since text areas usually have a matching closing tag, we can just place our cursor in between those

91
00:07:13.640 --> 00:07:22.130
opening and closing tags right here, paste in our clipboard and change post title to post DOT forty.

92
00:07:23.060 --> 00:07:26.920
With this in place, let's go ahead and save this and test it out.

93
00:07:26.930 --> 00:07:34.730
So back in the browser, if I refresh this edit screen for a post perfect, it pulls in the values from

94
00:07:34.730 --> 00:07:39.650
the database for this particular post and up in the address bar.

95
00:07:39.830 --> 00:07:45.710
If I just type in a bit of random nonsense for the ID and then push enter cool.

96
00:07:45.710 --> 00:07:47.860
It renders the 404 template.

97
00:07:48.380 --> 00:07:50.720
Let me go back to that real post now.

98
00:07:50.720 --> 00:07:57.740
A bit later on we will want to restrict things so that only the author or owner of a post can even see

99
00:07:57.740 --> 00:07:58.970
this edit screen.

100
00:07:59.420 --> 00:08:05.960
However, for now I actually want to leave this route unprotected so that even people who are not the

101
00:08:05.960 --> 00:08:08.450
owner of this post can visit this.

102
00:08:08.450 --> 00:08:09.680
You are on screen.

103
00:08:09.980 --> 00:08:17.090
I'm doing this so that in our next lesson, when we work on letting this form actually submit and update,

104
00:08:17.090 --> 00:08:24.470
this data in the database will be able to test and make sure that only the owner of the post can actually

105
00:08:24.470 --> 00:08:26.810
submit data to update a post.

106
00:08:27.020 --> 00:08:32.780
Once we've set up those permissions or that restriction, then we can go back and make sure that only

107
00:08:32.780 --> 00:08:35.210
the owner can even view the edit screen.

108
00:08:35.690 --> 00:08:42.830
So up next, we are going to work on actually submitting any updated data that the user types in and

109
00:08:42.830 --> 00:08:46.960
saving those new values in the database for this existing document.

110
00:08:47.420 --> 00:08:49.880
Let's keep things rolling and I'll see you then.
