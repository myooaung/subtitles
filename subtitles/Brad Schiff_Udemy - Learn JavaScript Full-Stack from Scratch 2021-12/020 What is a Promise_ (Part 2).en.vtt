WEBVTT
1
00:00:00.390 --> 00:00:08.400
So the question becomes, how can we coordinate these four events so that each one waits until the previous

2
00:00:08.400 --> 00:00:11.370
one has actually completed?

3
00:00:11.910 --> 00:00:18.390
Well, let's first use the traditional callback approach and then after that, we can try promises instead.

4
00:00:18.870 --> 00:00:23.310
So starting on line number two, let's delete the calls to the four functions and start over.

5
00:00:23.940 --> 00:00:26.550
So we would first call eat breakfast.

6
00:00:27.000 --> 00:00:27.500
All right.

7
00:00:27.510 --> 00:00:31.330
And I've configured these functions to accept the callback function.

8
00:00:31.830 --> 00:00:37.620
So within the parentheses, we can give eat breakfast, a function, function, parentheses, curly

9
00:00:37.620 --> 00:00:38.350
brackets.

10
00:00:38.970 --> 00:00:44.100
Now, eat breakfast will not call this function until it has actually completed.

11
00:00:44.500 --> 00:00:48.330
So within the body of this function, we could call eat lunch.

12
00:00:49.020 --> 00:00:49.370
Cool.

13
00:00:49.380 --> 00:00:53.630
You can see that they are in the expected order and then we can just do the same thing again.

14
00:00:53.640 --> 00:00:57.780
We can give eat lunch a function within these parentheses as an argument.

15
00:00:57.780 --> 00:01:01.800
So we could say function, parentheses, curly brackets.

16
00:01:02.220 --> 00:01:07.200
Inside this function we could call eat dinner inside those parentheses, we could give that a function

17
00:01:07.380 --> 00:01:10.520
and inside that we could finally call eat dessert.

18
00:01:11.160 --> 00:01:11.510
Cool.

19
00:01:11.520 --> 00:01:17.940
So now they are actually completing in the order that we would expect or want breakfast, lunch, dinner,

20
00:01:17.940 --> 00:01:18.420
dessert.

21
00:01:18.720 --> 00:01:25.830
However, look at the code that we had to write in order to coordinate multiple asynchronous events.

22
00:01:26.550 --> 00:01:33.580
Having to continually nest one level deeper and one level deeper for each action is not desirable.

23
00:01:34.020 --> 00:01:39.270
This leads to code that is very difficult to look at and immediately understand.

24
00:01:39.840 --> 00:01:44.260
Not to mention it's a nightmare to be nested this many layers deep.

25
00:01:44.640 --> 00:01:47.610
Now, clearly, this code technically works.

26
00:01:47.610 --> 00:01:48.840
It gets the job done.

27
00:01:49.140 --> 00:01:56.700
But if we can avoid this nesting, we should because in the long run our code will be much more manageable

28
00:01:56.700 --> 00:01:57.910
and easy to maintain.

29
00:01:58.470 --> 00:02:04.830
So now that we've seen this example with multiple asynchronous events that we need to coordinate, we're

30
00:02:04.830 --> 00:02:12.510
starting to see the downside of callbacks that can lead to these messy, infinitely nested setups that

31
00:02:12.510 --> 00:02:14.070
are just a nightmare to maintain.

32
00:02:14.580 --> 00:02:21.810
So at this point, I want you to pause the video and now click on the second code, Penn Link, which

33
00:02:21.810 --> 00:02:23.670
should look something like this.

34
00:02:23.880 --> 00:02:30.810
And in this example, we are going to achieve the same thing, only we're going to use promises instead

35
00:02:30.810 --> 00:02:31.850
of callbacks.

36
00:02:32.430 --> 00:02:38.220
So in this new second code Penn link, I've set up the eat breakfast, lunch and dinner dessert functions

37
00:02:38.430 --> 00:02:40.690
to return a promise.

38
00:02:41.430 --> 00:02:42.390
So check this out.

39
00:02:42.390 --> 00:02:47.210
Within this new code, Penn link on line number three, typed this out with me.

40
00:02:47.700 --> 00:02:54.300
So first we would want to eat breakfast and now we know that all of these functions are going to return

41
00:02:54.300 --> 00:02:55.100
a promise.

42
00:02:55.410 --> 00:03:02.640
So after this, we can say, DOT, then for now, let's not worry about the dot catch in case there's

43
00:03:02.640 --> 00:03:05.660
an error, we can circle back to that at the very end.

44
00:03:06.150 --> 00:03:12.510
So within the parentheses for then we can give it a function that will run when this promise actually

45
00:03:12.510 --> 00:03:14.150
or eventually resolves.

46
00:03:14.940 --> 00:03:19.470
So inside these then parentheses to say function, parentheses, curly brackets.

47
00:03:19.980 --> 00:03:20.850
Now check this out.

48
00:03:20.850 --> 00:03:28.890
Within the body of this function, let's return and then call eat lunch, because we know that that's

49
00:03:28.890 --> 00:03:31.440
going to return another promise.

50
00:03:31.890 --> 00:03:38.940
So all together at the very end of this line of code, ultimately what this is all returning is another

51
00:03:38.940 --> 00:03:39.590
promise.

52
00:03:39.810 --> 00:03:45.780
So then we could chain on and just called then again for the new promise of eat lunch.

53
00:03:46.170 --> 00:03:49.470
So then within these then parentheses, we could include a function.

54
00:03:50.970 --> 00:03:58.590
And then return eat dinner and then this is all still one line of code, just broken down on two separate

55
00:03:58.590 --> 00:04:00.180
lines for organization.

56
00:04:00.210 --> 00:04:04.790
So now ultimately what it's returning is a promise from eat dinner.

57
00:04:05.220 --> 00:04:12.540
So again, after a promise, we can say then give it a function, parentheses, curly brackets, and

58
00:04:12.540 --> 00:04:16.620
then we can return, eat dessert, cool.

59
00:04:16.620 --> 00:04:21.680
And you can see that they are running and actually completing in the desired order.

60
00:04:22.200 --> 00:04:29.460
So when we need to coordinate multiple asynchronous events, one of the big benefits of using promises

61
00:04:29.700 --> 00:04:35.540
is that you don't need to keep nesting one level deeper for each event with promises.

62
00:04:35.550 --> 00:04:36.960
It's all very flat.

63
00:04:37.260 --> 00:04:43.770
Each action is really just returning another promise and we can chain them together like this for as

64
00:04:43.770 --> 00:04:44.790
long as we want.

65
00:04:45.330 --> 00:04:52.380
We can make this code even easier to look at and immediately understand by using arrow functions instead

66
00:04:52.380 --> 00:04:53.760
of traditional functions.

67
00:04:54.270 --> 00:04:59.670
So check this out up within our first, then let's convert this into an arrow function.

68
00:04:59.670 --> 00:05:05.930
So get rid of the word function after the parentheses include equal greater than for the arrow symbol.

69
00:05:06.480 --> 00:05:11.440
OK, and now because the body of this function can easily fit on one line, right.

70
00:05:11.460 --> 00:05:13.500
We're only performing one operation.

71
00:05:13.800 --> 00:05:16.910
There's really no need for it to have its own line like this.

72
00:05:16.920 --> 00:05:22.920
So right before the word return, we can just backspace up onto the same line and then do the same thing

73
00:05:23.220 --> 00:05:24.750
at the beginning of this line.

74
00:05:25.650 --> 00:05:30.600
Also, if your arrow function fits on a single line, you don't need the curly brackets.

75
00:05:30.810 --> 00:05:35.210
So we could get rid of the opening curly bracket in this closing curly bracket right here.

76
00:05:35.850 --> 00:05:41.490
Finally, with an arrow function, if it fits on a single line, you also don't need the word return.

77
00:05:41.760 --> 00:05:45.780
So we could get rid of that like this to stay further organized.

78
00:05:45.780 --> 00:05:49.830
We could keep each dot then on its own line like this.

79
00:05:51.160 --> 00:05:54.850
Just to see how clean this can look, I will convert these to erro functions as well.

80
00:05:54.850 --> 00:06:00.780
So get rid of the word function and the arrow symbol, have it all on a single line.

81
00:06:00.790 --> 00:06:06.610
We don't need return or the curly brackets have this dropdown to its own line like this.

82
00:06:06.610 --> 00:06:13.360
Get rid of the word function, add the arrow symbol, have it set on a single line and get rid of the

83
00:06:13.360 --> 00:06:15.520
word return and the curly brackets.

84
00:06:16.850 --> 00:06:17.130
Cool.

85
00:06:17.150 --> 00:06:23.390
So this is still working breakfast, lunch, dinner, dessert only now look how clean and instantly

86
00:06:23.390 --> 00:06:25.010
readable our code is.

87
00:06:25.310 --> 00:06:31.130
It's not infinitely nested and we can just continue to chain on as many further promises as we need

88
00:06:31.130 --> 00:06:31.430
to.

89
00:06:31.790 --> 00:06:37.480
And then finally, at the very end of it, we can add on a catch and we can just provide a function.

90
00:06:37.730 --> 00:06:42.330
And now another nice thing with promises instead of callbacks is error handling.

91
00:06:42.590 --> 00:06:48.350
So within the parentheses, we just receive an error and then we can log that to the console or send

92
00:06:48.350 --> 00:06:50.490
it to the browser or whatever we need to do with it.

93
00:06:50.870 --> 00:06:57.380
The cool part is that we don't need to micromanage or babysit each of our actions listening for errors

94
00:06:57.380 --> 00:06:59.150
like we would with callbacks.

95
00:06:59.480 --> 00:07:01.580
We can just have one single catch.

96
00:07:01.580 --> 00:07:06.790
And if any of our promises reject instead of resolve, this will take care of it.

97
00:07:07.190 --> 00:07:11.440
So maybe now the advantage of promises is starting to come into focus.

98
00:07:11.810 --> 00:07:19.970
Hopefully we can agree that this code is easier to understand or manage than the infinitely nested callback

99
00:07:19.970 --> 00:07:20.570
approach.

100
00:07:20.990 --> 00:07:24.830
I don't know about you, but I would much rather work with this code.

101
00:07:25.430 --> 00:07:31.460
Now, before we bring this lesson to a close, I do want to show you an alternate way of working with

102
00:07:31.460 --> 00:07:37.970
promises, a way that is potentially even cleaner than the then catch approach.

103
00:07:38.450 --> 00:07:41.420
I'm actually going to delete this code that we just wrote.

104
00:07:41.750 --> 00:07:45.740
You're free to copy and paste it into another file for reference if you'd like to.

105
00:07:45.890 --> 00:07:52.850
But I'm going to delete it and I want to show you something that is referred to as async awaked.

106
00:07:53.360 --> 00:07:55.290
So what in the world does that phrase mean?

107
00:07:55.640 --> 00:07:56.410
Let me show you.

108
00:07:56.570 --> 00:08:02.730
Let's actually bring things full circle and go back to just calling each function one by one.

109
00:08:02.750 --> 00:08:04.160
So eat breakfast.

110
00:08:04.490 --> 00:08:07.460
And then below that on a new line, eat lunch.

111
00:08:07.730 --> 00:08:09.020
Below that on a new line.

112
00:08:09.320 --> 00:08:12.540
Eat dinner below that, eat dessert.

113
00:08:12.860 --> 00:08:15.410
Now we know that this will not work, right?

114
00:08:15.410 --> 00:08:18.140
So we see dessert, lunch, dinner, breakfast.

115
00:08:18.290 --> 00:08:19.970
We already went over in detail.

116
00:08:19.970 --> 00:08:21.580
Why this approach does not work.

117
00:08:22.160 --> 00:08:29.870
However, what if I told you that with promises we can just magically include the word a weight before

118
00:08:29.870 --> 00:08:38.900
them and then JavaScript will indeed let this asynchronous operational promise resolve or complete however

119
00:08:38.900 --> 00:08:42.560
long that takes before moving on to the next operation?

120
00:08:42.830 --> 00:08:44.870
Well, this dream is a reality.

121
00:08:44.870 --> 00:08:47.870
We can simply just add a weight like this.

122
00:08:49.760 --> 00:08:54.440
We wouldn't need it for eat dessert because we don't need to coordinate an action after that.

123
00:08:54.440 --> 00:08:54.670
Right.

124
00:08:54.680 --> 00:08:55.820
It's the last action.

125
00:08:56.300 --> 00:09:02.780
Now, there's only one catch with this, a weight feature, and that is that you can only use a weight

126
00:09:02.990 --> 00:09:06.050
if you are within an asynchronous function.

127
00:09:06.560 --> 00:09:07.280
So check it out.

128
00:09:07.280 --> 00:09:11.330
I want you to cut these four lines into your clipboard.

129
00:09:12.170 --> 00:09:15.620
So cut those and then let's create a function.

130
00:09:15.620 --> 00:09:16.790
So function.

131
00:09:16.820 --> 00:09:18.020
Let's give it a name.

132
00:09:18.380 --> 00:09:19.520
You could call it anything.

133
00:09:19.670 --> 00:09:21.140
Unicorn pizza.

134
00:09:21.380 --> 00:09:22.910
Go start.

135
00:09:23.450 --> 00:09:28.640
I will call it run our actions parentheses, curly brackets.

136
00:09:28.850 --> 00:09:32.300
And now within the body of this function, just paste in your clipboard.

137
00:09:33.710 --> 00:09:40.970
OK, now remember I said that this magical await word only works within an async function.

138
00:09:41.480 --> 00:09:48.200
So when we are defining this function right before the word function, we just say async.

139
00:09:48.500 --> 00:09:49.040
That's it.

140
00:09:49.070 --> 00:09:50.360
That's all we need to do.

141
00:09:50.570 --> 00:09:57.070
This is now an asynchronous or async function and it has the await feature available within it.

142
00:09:57.470 --> 00:10:00.500
So we created this function definition named Run Our Actions.

143
00:10:00.620 --> 00:10:08.120
Now let's just actually call that functions right below it, run our actions and look at that.

144
00:10:08.270 --> 00:10:10.880
They are running in the order that we want them to.

145
00:10:11.360 --> 00:10:15.350
I don't know about you, but this code looks really clean to me.

146
00:10:15.800 --> 00:10:22.010
This is my preferred way of using or leveraging promises before a promise.

147
00:10:22.010 --> 00:10:29.810
You can include the word awaked and then JavaScript will freeze the world and wait for it to finish

148
00:10:29.960 --> 00:10:33.380
before it ever moves on to further operations.

149
00:10:33.710 --> 00:10:39.710
In terms of error handling with async away, it's also very simple to add error handling.

150
00:10:39.710 --> 00:10:43.340
Let's just cut and paste these four lines of code into our clipboard again.

151
00:10:44.300 --> 00:10:47.630
So I'll cut those and we can set up a try block.

152
00:10:47.630 --> 00:10:51.740
So try and in curly brackets, drop down within the try block.

153
00:10:51.740 --> 00:10:53.450
Go ahead and paste in your clipboard.

154
00:10:55.550 --> 00:11:02.990
Right after the closing curly bracket for try, we can have a catch block, catch curly brackets now

155
00:11:02.990 --> 00:11:08.260
right after the word catch, we can include parentheses and we can include a parameter.

156
00:11:08.270 --> 00:11:11.140
So either E or E, R or error.

157
00:11:11.420 --> 00:11:15.350
And then within the catch block, we can use that error however we see fit.

158
00:11:15.380 --> 00:11:18.980
So, for example, you can log into the console or send it to the browser.

159
00:11:19.340 --> 00:11:27.250
And actually now that we added error handling, we would indeed want to add a weight before our eat

160
00:11:27.260 --> 00:11:28.470
dessert operation.

161
00:11:28.490 --> 00:11:32.330
So right here I would add a weight that way.

162
00:11:32.330 --> 00:11:36.250
We are waiting for eat dessert to either resolve or reject.

163
00:11:36.680 --> 00:11:39.170
And if it does reject, if there is an error.

164
00:11:39.500 --> 00:11:43.940
Well, since we waited for it to finish, the catch block can do its job.

165
00:11:44.510 --> 00:11:51.350
The idea is that if any of our asynchronous operations result in an error or if they reject instead

166
00:11:51.350 --> 00:11:54.500
of resolve, well, then our catch block will run.

167
00:11:54.830 --> 00:11:57.920
And again, we don't need to babysit or micromanage the errors.

168
00:11:58.070 --> 00:12:02.760
Whichever operation rejects first, that error will be passed into this.

169
00:12:03.230 --> 00:12:09.310
So again, this async a wait method is my favorite way of working with promises.

170
00:12:09.740 --> 00:12:15.760
However, we are not going to rewrite the area where we leverage our promise within our user, control

171
00:12:15.760 --> 00:12:16.300
their file.

172
00:12:16.790 --> 00:12:22.880
So within user control or digest, I'm not going to have us rewrite this to use async wait instead of

173
00:12:22.890 --> 00:12:26.530
DOT then because we've already rewritten this code once.

174
00:12:26.660 --> 00:12:29.530
I don't want to make you rewrite the same thing yet again.

175
00:12:29.960 --> 00:12:36.440
Just know that going forward we are going to use the async await strategy over and over again.

176
00:12:36.860 --> 00:12:37.360
All right.

177
00:12:37.370 --> 00:12:44.210
Now this lesson is winding down to a close, and I realized that we covered a lot of new material in

178
00:12:44.210 --> 00:12:45.110
this one lesson.

179
00:12:45.500 --> 00:12:51.380
And I want you to know that I do not expect you to fully remember everything from this lesson.

180
00:12:51.380 --> 00:12:52.580
One hundred percent.

181
00:12:53.180 --> 00:13:01.190
All you really need to know is that a promise is an object that represents the eventual completion of

182
00:13:01.190 --> 00:13:02.900
an asynchronous operation.

183
00:13:03.350 --> 00:13:10.790
Even if you don't remember any of the syntax from this lesson and you just have a general idea of promises

184
00:13:10.790 --> 00:13:16.700
dealing with uncertain timings and they help us coordinate actions and there an alternative to traditional

185
00:13:16.700 --> 00:13:18.980
callbacks, if that's all you remember.

186
00:13:19.160 --> 00:13:19.940
That's great.

187
00:13:20.090 --> 00:13:21.350
And you're right on track.

188
00:13:21.890 --> 00:13:26.090
We are going to continue to use promises throughout the remainder of this course.

189
00:13:26.420 --> 00:13:29.870
So you're going to have plenty of chances to practice working with them.

190
00:13:30.320 --> 00:13:36.280
Big picture, just like a promise in real life is dealing with something happening in the future.

191
00:13:36.770 --> 00:13:42.750
And just like in real life, you can either keep your promise or fail to deliver your promise.

192
00:13:43.250 --> 00:13:47.720
Well, in JavaScript, a promise can either resolve or reject.

193
00:13:48.110 --> 00:13:48.490
Cool.

194
00:13:48.740 --> 00:13:50.960
Now, that's enough about promises for now.

195
00:13:51.230 --> 00:13:58.610
In our next lesson, we are going to talk about a completely unrelated best practice, which is not

196
00:13:58.610 --> 00:14:06.830
storing user passwords in plain text in our database, but instead hashing the user's password so that

197
00:14:06.830 --> 00:14:14.060
if our database was ever compromised or leaked, we wouldn't actually be revealing users passwords to

198
00:14:14.060 --> 00:14:15.630
the malicious user or attacker.

199
00:14:16.190 --> 00:14:16.700
Don't worry.

200
00:14:16.700 --> 00:14:18.920
In the next lesson, I'll explain what I'm getting at.

201
00:14:19.280 --> 00:14:23.810
So let's keep things rolling and I will see you in the next lesson.
