1
00:00:01,780 --> 00:00:02,770
Hello, everyone.

2
00:00:03,190 --> 00:00:10,510
In this lesson, we are going to update the rest of our application to work with our new system of protection.

3
00:00:11,080 --> 00:00:12,320
Let me show you what I mean.

4
00:00:12,340 --> 00:00:18,100
So at the end of our previous lesson, we saw that if a innocent user tries to sign out.

5
00:00:20,650 --> 00:00:25,030
Our application now considers that a cross site request, forgery attempt.

6
00:00:25,660 --> 00:00:32,890
This is because we set up the sign out button to submit a form that sends a post request to our server.

7
00:00:33,370 --> 00:00:41,380
And we are now using the C surf package that's going to demand a six R.F. token on any post request.

8
00:00:41,860 --> 00:00:49,090
Now, remember, we already updated our create post form screen to include that matching CSS, RF token

9
00:00:49,090 --> 00:00:49,580
value.

10
00:00:49,990 --> 00:00:53,080
So now we just need to do the same thing for our other forms.

11
00:00:54,160 --> 00:00:55,470
Let me show you what I would do.

12
00:00:55,720 --> 00:01:04,120
So within your text editor, jump back into the create dash post SJS template right within your views

13
00:01:04,120 --> 00:01:04,580
folder.

14
00:01:05,230 --> 00:01:12,230
Remember, we set up this hidden input with the name of Underscore RF and the value of the CSS RF token.

15
00:01:13,150 --> 00:01:19,060
Go ahead and copy this entire input line into your clipboard because we're going to be pasting this

16
00:01:19,270 --> 00:01:21,400
into several locations in our app.

17
00:01:22,120 --> 00:01:26,230
So with that in your clipboard now, I want you to jump into your header file.

18
00:01:27,070 --> 00:01:34,380
So within the views folder, look in the includes subfolder and then jump into header Ejaz.

19
00:01:36,030 --> 00:01:38,430
OK, we are looking for the logout form.

20
00:01:38,800 --> 00:01:41,680
For me it's a round line number twenty four.

21
00:01:42,430 --> 00:01:46,430
So you should see a form element with an action of slash logout.

22
00:01:47,560 --> 00:01:51,390
Let's do this within the form, maybe right above the submit button element.

23
00:01:51,400 --> 00:01:52,990
Just paste in your clipboard.

24
00:01:53,980 --> 00:01:57,230
Let's go ahead and give that a save and now let's test things out.

25
00:01:57,700 --> 00:02:02,170
Be sure to reload the page so your front end has that new CSF token.

26
00:02:03,130 --> 00:02:09,750
So now if I try to sign out, perfect, I was successfully logged out.

27
00:02:10,090 --> 00:02:12,400
However, if I try to log back in.

28
00:02:17,030 --> 00:02:23,180
Notice that attempt fails, so we would also just need to dig into our header and add the RF token to

29
00:02:23,180 --> 00:02:24,940
the login form.

30
00:02:25,790 --> 00:02:31,960
So for me, around line number 30, I see a form that points towards slash log in.

31
00:02:32,480 --> 00:02:38,930
So maybe towards the end of that form, right above the sign in submit button to drop a new line and

32
00:02:38,930 --> 00:02:40,290
paste in your clipboard.

33
00:02:41,000 --> 00:02:42,110
Let's save that.

34
00:02:42,110 --> 00:02:48,890
And now if I try to log in, by the way, be sure to refresh your page, because if you don't refresh

35
00:02:48,890 --> 00:02:53,010
the front end, your front end isn't going to have that new RF token.

36
00:02:53,600 --> 00:02:53,930
All right.

37
00:02:53,930 --> 00:02:55,430
But now if I try to log in.

38
00:02:58,610 --> 00:02:59,340
Perfect.

39
00:02:59,690 --> 00:03:05,660
Now, even though we are logged in, let's not forget about new users that would see the guest registration

40
00:03:05,660 --> 00:03:06,810
form, right.

41
00:03:06,920 --> 00:03:10,790
So let's go update that right now within your views folder.

42
00:03:10,820 --> 00:03:17,180
I want you to find the file that is named Home Dash Ghast SJS.

43
00:03:17,750 --> 00:03:17,990
Right.

44
00:03:17,990 --> 00:03:22,680
When new users come to the website and try to register or sign up, this is what they will see.

45
00:03:23,210 --> 00:03:27,040
So he received a form with an action of slash register.

46
00:03:28,130 --> 00:03:33,890
So maybe down towards the bottom of the form, here is the button that submits the form right above

47
00:03:33,890 --> 00:03:34,160
that.

48
00:03:34,190 --> 00:03:35,950
I would just paste in my clipboard.

49
00:03:36,650 --> 00:03:37,640
Let's save that.

50
00:03:37,640 --> 00:03:40,430
And then just really quick to test that if I logout.

51
00:03:42,220 --> 00:03:44,000
And then try to fill out this form.

52
00:03:44,350 --> 00:03:49,540
You'll notice that no matter what I choose as my username, it's going to tell me that it's already

53
00:03:49,540 --> 00:03:50,180
been taken.

54
00:03:50,920 --> 00:03:58,690
So before we can test to make sure that this form can submit without a ceasefire, we first need to

55
00:03:58,690 --> 00:04:03,550
update our front end JavaScript that powers the live validation.

56
00:04:04,060 --> 00:04:10,540
Because remember, we used Axios to send off a post request to check to see if a certain username has

57
00:04:10,540 --> 00:04:11,170
been taken.

58
00:04:11,410 --> 00:04:17,110
So that asynchronous post request would also need to send along the RF token.

59
00:04:18,310 --> 00:04:19,850
Let me show you what I'm referring to.

60
00:04:20,140 --> 00:04:28,750
So in your text, Ed, I want you to look within your front and dash Jase's folder and look in the module's

61
00:04:28,750 --> 00:04:33,030
subfolder and jump into registration form dodginess.

62
00:04:34,090 --> 00:04:36,220
So let's do this up in the constructor.

63
00:04:36,460 --> 00:04:43,540
Let's create a property that grabs the X R.F. value from one of the hidden inputs on the page.

64
00:04:44,440 --> 00:04:50,170
So I would just create a new property in the constructor, say this DOT, let's call it underscore C

65
00:04:50,170 --> 00:04:59,980
SRF and set that to equal and then just say document dot query selector and then let's select that input

66
00:04:59,980 --> 00:05:01,360
based on its name.

67
00:05:01,750 --> 00:05:07,920
Now selecting based on name instead of a class or an ID is a bit trickier, but type this out with me.

68
00:05:08,200 --> 00:05:17,530
So a pair of single quotes and then square brackets and then say name equals and then a pair of double

69
00:05:17,530 --> 00:05:21,070
quotes and within that say underscore C.

70
00:05:21,070 --> 00:05:22,270
S R.F..

71
00:05:23,020 --> 00:05:25,840
OK, so this will select that input.

72
00:05:26,020 --> 00:05:31,020
And then at the very end of this, after the closing parentheses, just say dot value.

73
00:05:31,750 --> 00:05:31,970
Cool.

74
00:05:32,050 --> 00:05:36,620
So now we are storing that matching RF token value in this property.

75
00:05:37,300 --> 00:05:42,090
So now when we send off our axios requests, let's just pass this along with it.

76
00:05:43,270 --> 00:05:44,050
So let's do this.

77
00:05:44,050 --> 00:05:47,470
Let's scroll down and find our user name after delay method.

78
00:05:48,040 --> 00:05:50,220
Here it is, user name after delay.

79
00:05:50,650 --> 00:05:57,660
And remember, we said if there are no errors, then send off a post request using Axios.

80
00:05:58,360 --> 00:06:02,760
Now, at the moment we're just sending over an object with one property of username.

81
00:06:03,160 --> 00:06:12,550
But let's do this maybe right before that user name we can say underscore C SRF Colon and then just

82
00:06:12,550 --> 00:06:18,280
give it a value of this dot, underscore CSS R.F. Be sure to include a comma.

83
00:06:19,030 --> 00:06:19,350
Cool.

84
00:06:19,360 --> 00:06:26,020
So now the data that we're sending to the server has two properties username and underscore CSS, RF

85
00:06:26,560 --> 00:06:31,690
while we're at it, let's do the same thing for the e-mail check that sends a request to see if an email

86
00:06:31,690 --> 00:06:32,880
has already been used.

87
00:06:33,280 --> 00:06:36,340
So find your email after delay method.

88
00:06:38,050 --> 00:06:38,740
Here it is.

89
00:06:39,460 --> 00:06:45,100
And we said if there are no errors related to email, then send off an Axios post request.

90
00:06:45,550 --> 00:06:51,730
So right within this object that we're sending over, just say underscore kowsar f colon.

91
00:06:52,240 --> 00:07:00,160
Give it a value of this dot, underscore css R.F. Be sure to include the comma after that property value

92
00:07:00,160 --> 00:07:00,520
pair.

93
00:07:01,270 --> 00:07:01,600
Cool.

94
00:07:01,600 --> 00:07:04,420
And now let's save this and test it out.

95
00:07:04,420 --> 00:07:06,910
So be sure to refresh on the front end.

96
00:07:07,630 --> 00:07:14,320
And now if I try to sign up with a random name, perfect, it's still available and if I type in a valid

97
00:07:14,320 --> 00:07:20,260
email address and email and password and then try to submit.

98
00:07:22,550 --> 00:07:27,630
Cool, the forum went through perfectly without triggering any RF problems.

99
00:07:28,340 --> 00:07:34,940
Now, while we're at it, let's also fix our live search feature that is powered by front end JavaScript,

100
00:07:35,270 --> 00:07:41,000
because remember, after you type something into the search bar, it's going to send off an asynchronous

101
00:07:41,000 --> 00:07:43,260
post request to our server.

102
00:07:44,270 --> 00:07:50,150
So let's do this back in your text editor within the registration form file that we were just in, scroll

103
00:07:50,150 --> 00:07:57,050
back up to the very top so that we can copy this line into our clipboard, this line that adds an underscore

104
00:07:57,050 --> 00:07:58,610
CSS, RF property.

105
00:07:59,150 --> 00:08:03,350
Just copy that entire line and then let's do this.

106
00:08:03,350 --> 00:08:05,940
Let's jump into our front end search file.

107
00:08:06,530 --> 00:08:14,570
So within your front end JS folder and within the modules folder, jump into search dot J.S. towards

108
00:08:14,570 --> 00:08:16,190
the very top of the constructor.

109
00:08:16,190 --> 00:08:19,130
Let's just drop down and paste in our clipboard.

110
00:08:19,670 --> 00:08:25,280
OK, now let's just scroll down and find the method that is named send request for me.

111
00:08:25,280 --> 00:08:29,480
It's around line number fifty, but here we can see axios post.

112
00:08:29,840 --> 00:08:33,100
So in the objective data that we're sending, just give it a new property.

113
00:08:34,340 --> 00:08:40,430
So underscore c srf colon this dot underscore s R.F..

114
00:08:40,880 --> 00:08:42,280
Be sure to include the comma.

115
00:08:43,040 --> 00:08:44,570
Let's go ahead and save.

116
00:08:44,570 --> 00:08:51,320
And now on the front end, if I refresh and then try to perform a search, maybe if I search for lorem

117
00:08:51,320 --> 00:08:55,340
ipsum or just search for something that you know will bring back results.

118
00:08:56,000 --> 00:08:56,380
Cool.

119
00:08:56,390 --> 00:08:57,630
There we see the results.

120
00:08:58,250 --> 00:08:59,720
So at this point, let's review.

121
00:09:00,500 --> 00:09:06,940
We've adjusted our sign in, sign out and registration and search form.

122
00:09:07,490 --> 00:09:11,210
We know that in the previous lesson we adjusted our create post form.

123
00:09:11,750 --> 00:09:16,520
Why don't we go update our edit or update post form right off camera?

124
00:09:16,550 --> 00:09:19,390
Let me sign back into my account, OK?

125
00:09:19,490 --> 00:09:26,900
And if I go to my profile to view one of my existing posts, so innocent post if I try to edit this

126
00:09:26,900 --> 00:09:27,530
post.

127
00:09:29,060 --> 00:09:32,240
So it takes me to this screen because that was a request.

128
00:09:32,510 --> 00:09:39,310
But if I make a change to the post and then try to perform a post request, we should see a six hour

129
00:09:39,320 --> 00:09:39,880
F error.

130
00:09:40,220 --> 00:09:40,570
Yep.

131
00:09:40,910 --> 00:09:44,030
So all we need to do is update that edit form.

132
00:09:44,700 --> 00:09:51,340
So within your text editor, let's save ourselves a bit of typing by jumping back into our create dash

133
00:09:51,350 --> 00:09:59,870
post SJS template and just make sure that you had the hidden CSF input copied into your clipboard.

134
00:10:00,890 --> 00:10:02,060
So I will copy that.

135
00:10:02,920 --> 00:10:10,460
OK, and then I want you to jump into the template that is named edit dash post dot SJS towards the

136
00:10:10,460 --> 00:10:13,400
bottom of the form right above the submit button.

137
00:10:13,760 --> 00:10:15,470
Just paste in your clipboard.

138
00:10:16,280 --> 00:10:17,240
Let's save that.

139
00:10:17,240 --> 00:10:20,750
And now we should be able to go back and try to edit one of our posts.

140
00:10:24,030 --> 00:10:32,550
Maybe I'll add a few exclamations and then hit Save Perfect, next, let's cover the ability to delete

141
00:10:32,550 --> 00:10:38,550
an existing post, for example, maybe I will try to delete this post that's titled Hahaha, you've

142
00:10:38,550 --> 00:10:39,270
been hacked.

143
00:10:40,390 --> 00:10:45,640
So if I view that post and then try to click the red trashcan, we're probably going to see the CSS

144
00:10:45,660 --> 00:10:46,380
RF error.

145
00:10:46,980 --> 00:10:47,330
Yep.

146
00:10:47,970 --> 00:10:56,490
So to fix this, just jump in to the exact template that is named single dash post dash screen.

147
00:10:58,380 --> 00:11:00,690
And for me it's a round line number 12.

148
00:11:00,690 --> 00:11:08,520
But you're looking for a form that has a class of delete post form, as you might have guessed, just

149
00:11:08,520 --> 00:11:11,910
right above that submit button paste in your clipboard.

150
00:11:12,550 --> 00:11:13,770
Let's give that a save.

151
00:11:13,770 --> 00:11:21,090
And now if I go back to that post refresh and try to delete it, it should go through successfully.

152
00:11:21,720 --> 00:11:22,470
Perfect.

153
00:11:22,950 --> 00:11:27,840
At this point, we just need to update our Biggin following and stop following actions.

154
00:11:28,620 --> 00:11:32,030
So visit a user profile for someone other than yourself.

155
00:11:32,160 --> 00:11:38,910
So if I go to the Bachs lot profile, let's just update the stop following and begin following form

156
00:11:38,910 --> 00:11:39,590
submits.

157
00:11:40,020 --> 00:11:41,400
So within your text editor.

158
00:11:41,940 --> 00:11:48,420
So within your views folder, look in the includes subfolder and then jump into the file that is named

159
00:11:48,420 --> 00:11:49,740
Profile Shared.

160
00:11:51,620 --> 00:11:51,920
Cool.

161
00:11:51,950 --> 00:11:56,600
So here we see the form to remove a follow, as you might have guessed right above that submit button,

162
00:11:56,600 --> 00:12:00,560
just paste in your clipboard and do the same thing for the ad follow form.

163
00:12:00,800 --> 00:12:06,840
So right above the button paste, lets go ahead and save this and refresh the front end.

164
00:12:07,700 --> 00:12:10,750
So let's make sure that I can stop following Bachs a lot.

165
00:12:12,740 --> 00:12:17,840
Cool successfully stopped following barks a lot, and then if I change my mind and want to begin following

166
00:12:17,840 --> 00:12:19,640
them again, just click follow.

167
00:12:21,840 --> 00:12:27,950
Perfect, successfully followed barks a lot, and that's actually going to bring this lesson to a close,

168
00:12:28,470 --> 00:12:35,940
we have successfully protected our application against CSF attacks and we've also updated all of our

169
00:12:35,940 --> 00:12:40,860
features and forms with this new Ceaser Tolkan requirement in place.

170
00:12:41,400 --> 00:12:49,500
In our next lesson, we are going to work on our final feature before we push this application up onto

171
00:12:49,500 --> 00:12:50,050
the Web.

172
00:12:50,520 --> 00:12:54,090
We're going to learn how we would set up our own API.

173
00:12:54,450 --> 00:12:58,130
If you have no idea what an API is, that's OK.

174
00:12:58,380 --> 00:12:59,430
We will review that.

175
00:12:59,800 --> 00:13:03,780
Let's keep things rolling and I will see you in the next lesson.
