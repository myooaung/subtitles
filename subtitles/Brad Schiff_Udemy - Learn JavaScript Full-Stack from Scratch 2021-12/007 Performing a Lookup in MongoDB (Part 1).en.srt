1
00:00:01,960 --> 00:00:03,020
Hello, everyone.

2
00:00:03,370 --> 00:00:09,650
In this lesson, we are going to continue working on the ability to view a post from our Web app.

3
00:00:10,000 --> 00:00:16,480
Now, before we jump into the real topic or challenge of this lesson, which is pulling in the username

4
00:00:16,480 --> 00:00:25,270
and avatar of the author for a post, let's first go ahead and set up our 404 or page not found template.

5
00:00:25,840 --> 00:00:26,110
Right.

6
00:00:26,110 --> 00:00:30,550
Because if someone includes a segment at the end of the post, you are URL.

7
00:00:30,850 --> 00:00:32,680
That is not a real post.

8
00:00:33,140 --> 00:00:35,200
So if you just type in a few random letters.

9
00:00:36,660 --> 00:00:42,300
Instead of just plain text here, we would instead want to see a template that looks something like

10
00:00:42,300 --> 00:00:42,890
this.

11
00:00:43,530 --> 00:00:46,510
It's got our uniform header and footer with a bit of text here.

12
00:00:46,770 --> 00:00:48,460
We cannot find that page.

13
00:00:48,480 --> 00:00:51,330
You can always visit the home page to get a fresh start.

14
00:00:51,810 --> 00:00:56,410
So right now, let's set up a new Ejaz file for this template.

15
00:00:57,390 --> 00:01:05,310
As always, you can pull up the repository and look in the complex app and then the HTML templates folder.

16
00:01:05,950 --> 00:01:11,740
And right now, the template that we are interested in is named 404 HTML.

17
00:01:12,180 --> 00:01:15,240
So open that up from the GitHub website.

18
00:01:15,240 --> 00:01:17,810
You can just click on Raw for that file.

19
00:01:19,050 --> 00:01:26,610
And now actually instead of copying this entire file, let's ignore the header and footer because those

20
00:01:26,610 --> 00:01:29,340
should pull from our reuseable include files.

21
00:01:29,730 --> 00:01:37,560
So let's scroll down and right below this comment that says header ends here, let's begin selecting

22
00:01:37,560 --> 00:01:44,130
and copying and then we only need to select just a few lines because we do not need the footer begins

23
00:01:44,130 --> 00:01:44,590
area.

24
00:01:45,060 --> 00:01:47,760
So go ahead and copy this section into your clipboard.

25
00:01:48,300 --> 00:01:54,540
And then within our text editor within our views folder, let's create a new file so I can right.

26
00:01:54,540 --> 00:01:56,210
Click on Views new file.

27
00:01:56,670 --> 00:02:06,120
Let's just name it 404 DOT SJS in the new file, paste in your clipboard and then to save a bit of typing,

28
00:02:06,330 --> 00:02:10,670
we can just copy and paste the include header line from another template.

29
00:02:11,010 --> 00:02:17,850
So for example, if I jump in to create post SJS here is that include line that you can copy into your

30
00:02:17,850 --> 00:02:25,470
clipboard and then back in 404 up the very top, just paste that in and then down at the very bottom

31
00:02:25,650 --> 00:02:29,390
again paste it in but change header to footer.

32
00:02:30,240 --> 00:02:36,320
OK, let's go ahead and save this file and now let's jump in to our post controller file.

33
00:02:36,750 --> 00:02:45,510
So in controllers post controller and within our view, single function, if our find single by ID Promis

34
00:02:45,510 --> 00:02:49,440
rejects instead of resolves, then our sketch block will run.

35
00:02:49,860 --> 00:02:57,000
So instead of sending back plaintext, let's get rid of this response send line and instead you say

36
00:02:57,300 --> 00:03:02,660
response, render and then render the template that is named 404.

37
00:03:03,360 --> 00:03:09,570
So if we save this and then back in the browser, if we send a new refresh to a U.

38
00:03:09,570 --> 00:03:12,030
RL that does not have a matching post.

39
00:03:13,960 --> 00:03:21,520
Cool, we now see a styled uniform 404 page now that this is set up, let's go back to our real post

40
00:03:21,520 --> 00:03:22,000
example.

41
00:03:22,000 --> 00:03:27,190
You, Orell, if this isn't still in your browser history, remember, you can always just go into your

42
00:03:27,190 --> 00:03:32,770
Mongo DB Atlus account and find the ID from one of your post documents.

43
00:03:33,220 --> 00:03:33,520
Right.

44
00:03:33,520 --> 00:03:38,650
And then just visit slash post, slash that ID, OK?

45
00:03:38,890 --> 00:03:44,020
Our real goal in this lesson is to pull in the author's username.

46
00:03:44,020 --> 00:03:50,620
And Granovetter, the reason this is more challenging than just pulling in the post title or content

47
00:03:50,890 --> 00:03:59,490
is because if we look at a post document, remember it only stores the I.D. of the author or user account.

48
00:03:59,800 --> 00:04:04,360
We're not actually storing their user name or avatar in our post document.

49
00:04:04,870 --> 00:04:12,800
But luckily for us, Mongo DB has an operator named Lookup that is perfect for this situation.

50
00:04:13,420 --> 00:04:19,560
So right now, let's jump back into our text editor and let's work on our post model.

51
00:04:19,990 --> 00:04:27,310
So in our Models folder, let's jump into postgraduates towards the bottom of this file.

52
00:04:27,310 --> 00:04:34,200
We have our find single by IDE function, and right now we're interested in this line of code.

53
00:04:34,720 --> 00:04:40,520
So this is where we talk to our Mongo DB collection and ask it to find one document.

54
00:04:40,840 --> 00:04:45,920
Well, right now we need to do something a bit more complex than just find one.

55
00:04:46,480 --> 00:04:54,010
So right after posts collection DOT, I want you to begin selecting at the beginning of find one and

56
00:04:54,010 --> 00:04:56,990
just select until the end of this line and delete.

57
00:04:57,640 --> 00:05:01,310
So this line of code should look something like this now, OK?

58
00:05:01,480 --> 00:05:09,280
And from our posts collection, instead of calling find one we want to call something called aggregate.

59
00:05:09,880 --> 00:05:15,140
Aggregate is great when you need to perform complex or multiple operations.

60
00:05:15,520 --> 00:05:22,120
Now Aggregate is going to return data that makes sense from a Mongo DB perspective, but maybe not just

61
00:05:22,120 --> 00:05:24,280
from a plain JavaScript perspective.

62
00:05:24,730 --> 00:05:30,270
So at the end of this line, we want to be sure to call DOT to array.

63
00:05:31,180 --> 00:05:36,790
Now, in this case, we're only interested in one single post, but that's just the way this works.

64
00:05:36,790 --> 00:05:43,090
It's going to return an array, even if that array only contains one item, because we're only interested

65
00:05:43,090 --> 00:05:44,590
in the first item in the array.

66
00:05:44,800 --> 00:05:50,500
Our instinct might be to include square brackets here and say zero, just give us the first item in

67
00:05:50,500 --> 00:05:50,990
the array.

68
00:05:51,340 --> 00:05:53,050
However, we don't want to do that.

69
00:05:53,290 --> 00:05:56,710
Ultimately, we need this line of code to return a promise.

70
00:05:57,040 --> 00:06:03,940
Right, because talking to a database is an asynchronous operation and ultimately to array here is what's

71
00:06:03,940 --> 00:06:05,430
going to return a promise.

72
00:06:05,680 --> 00:06:08,190
So we do want to end the statement with that.

73
00:06:08,710 --> 00:06:11,250
So let's do this at the start of this line.

74
00:06:11,260 --> 00:06:17,080
Let's change let post to be let posts as in plural now.

75
00:06:17,530 --> 00:06:23,560
Right, because it's going to be an array of posts and then within our if checked down here for the

76
00:06:23,560 --> 00:06:28,480
condition, let's just say if posts dot length.

77
00:06:29,470 --> 00:06:29,800
Right.

78
00:06:29,800 --> 00:06:35,140
Meaning if that array has more than zero items in it, this will evaluate to true.

79
00:06:35,500 --> 00:06:41,800
And then for the value that we're going to resolve instead of post, we'd want to resolve posts and

80
00:06:41,800 --> 00:06:47,470
then square brackets zero to just return the first item in that array.

81
00:06:47,740 --> 00:06:52,210
OK, now the real question here, though, is how does aggregate work?

82
00:06:52,540 --> 00:06:56,770
Well, aggregate lets us run multiple operations.

83
00:06:57,100 --> 00:07:00,610
So within these parentheses we give it an array.

84
00:07:01,420 --> 00:07:06,100
So square brackets in between the opening and closing square brackets here.

85
00:07:06,100 --> 00:07:08,350
Let's drop down to stay organized.

86
00:07:08,830 --> 00:07:11,080
So we're passing aggregate an array.

87
00:07:11,260 --> 00:07:12,790
But an array of what?

88
00:07:13,240 --> 00:07:15,820
Well, an array of database operations.

89
00:07:16,180 --> 00:07:18,060
Let's start with at least two.

90
00:07:18,370 --> 00:07:20,590
So each operation is an object.

91
00:07:20,590 --> 00:07:26,260
So there's one object, comma, then there's a second object for the first operation.

92
00:07:26,380 --> 00:07:28,100
Let's perform a match.

93
00:07:28,120 --> 00:07:34,600
So Dollar Sign Match will tell Mongo DB that that's what we want to do, then include a colon and then

94
00:07:34,600 --> 00:07:35,920
we include an object.

95
00:07:35,920 --> 00:07:39,970
And this is basically describing documents that we want to match with.

96
00:07:40,450 --> 00:07:49,030
So we're interested in a document where underscore I.D. matches the incoming or requested ID for this

97
00:07:49,030 --> 00:07:51,090
route or coming from our controller.

98
00:07:51,610 --> 00:08:00,130
So down here we would just say a new instance of Mongu DHBs Object ID that gets its own parentheses

99
00:08:00,340 --> 00:08:03,280
in those we would just pass in the requested ID.

100
00:08:03,790 --> 00:08:06,220
OK, so that's our first operation.

101
00:08:06,730 --> 00:08:12,490
We're performing a match by the requested I.D. Now let's perform our second operation.

102
00:08:12,790 --> 00:08:13,090
So.

103
00:08:13,120 --> 00:08:21,700
Within this empty object, let's say dollar signs look up and then Colen and then provide an object

104
00:08:21,700 --> 00:08:21,950
here.

105
00:08:22,330 --> 00:08:25,900
So currently we are within the Post's collection.

106
00:08:26,260 --> 00:08:31,320
But what we want to do here is look up documents from another collection.

107
00:08:31,750 --> 00:08:32,130
Right.

108
00:08:32,140 --> 00:08:39,010
Remember, our ultimate goal here is to pull in the relevant user account document so that we can access

109
00:08:39,010 --> 00:08:41,950
its user name and email address for aggravators.

110
00:08:42,340 --> 00:08:46,630
So within this object for Look-Up, we're just going to give it a few different properties.

111
00:08:47,230 --> 00:08:56,260
First, let's add a property named from Colen and let's set this to a value of users, meaning the users

112
00:08:56,260 --> 00:08:56,920
collection.

113
00:08:57,370 --> 00:09:02,920
So, again, we're currently in the Post's collection and now we're saying the document that we want

114
00:09:02,920 --> 00:09:07,060
to look up should be pulled from the user's collection.

115
00:09:07,420 --> 00:09:15,100
OK, after those quotes, let's include a comma and another property, let's say local field colon,

116
00:09:15,550 --> 00:09:18,470
and let's give it a value of author.

117
00:09:19,360 --> 00:09:25,660
So this is saying when we're looking in the user's collection for matching documents, the local field

118
00:09:25,840 --> 00:09:32,290
or the field from within, the current post item that we want to perform that match on is the author

119
00:09:32,290 --> 00:09:32,830
field.

120
00:09:33,580 --> 00:09:33,870
Right.

121
00:09:33,890 --> 00:09:36,680
That's what contains the idea of the matching user.

122
00:09:36,970 --> 00:09:45,550
After this, we include a comma and then another property named Foreign Field Colon, and this would

123
00:09:45,550 --> 00:09:51,550
be underscore I.D. So local means the current collection, that's the post collection.

124
00:09:51,550 --> 00:09:57,250
Foreign means the other collection that we're trying to look up within the field in those documents

125
00:09:57,250 --> 00:09:58,090
that we want to perform.

126
00:09:58,090 --> 00:10:01,420
The look up or match on is the IDE field.

127
00:10:01,750 --> 00:10:08,350
After the quotes, let's include comma and let's include a property named as Colon and let's give that

128
00:10:08,350 --> 00:10:18,130
a value of we could make up any name we want, but let's choose author document Mongo DB will use this

129
00:10:18,130 --> 00:10:24,530
name when it adds on a virtual field or property with the matching user document to this post.

130
00:10:25,030 --> 00:10:30,940
Now I realize this was a lot to follow along with, so if everything didn't make perfect sense, that's

131
00:10:30,940 --> 00:10:31,410
OK.

132
00:10:31,810 --> 00:10:37,030
A bit later on in the lesson we will visualize the data that this results in.

133
00:10:37,540 --> 00:10:43,290
And once we see the data that it returns with our own two eyes, I think things will start to make sense.

134
00:10:43,750 --> 00:10:49,810
For now, though, let's go ahead and save this and let's make sure that we can still view a post from

135
00:10:49,810 --> 00:10:50,520
the front end.

136
00:10:51,550 --> 00:10:58,090
So if I refresh the screen, cool, we can see our app is still successfully pulling in these values

137
00:10:58,090 --> 00:10:59,140
from the database.

138
00:10:59,590 --> 00:11:02,510
Only now we have a bit of extra data to work with.

139
00:11:02,980 --> 00:11:04,200
Let me show you what I mean.

140
00:11:04,210 --> 00:11:10,630
So back in our editor right below the match and look up operations that we just added, just a line

141
00:11:10,630 --> 00:11:11,470
or two below that.

142
00:11:11,470 --> 00:11:13,360
We have this, if else statement.

143
00:11:13,600 --> 00:11:20,290
And when we resolve with that first item in the array right before this resolve line, let's add a new

144
00:11:20,290 --> 00:11:23,830
line and let's say console dot log.

145
00:11:24,190 --> 00:11:27,220
And let's just log the first item in that post.

146
00:11:27,220 --> 00:11:30,480
Soraya's post square brackets, zero.

147
00:11:30,880 --> 00:11:37,900
I want us to be able to see with our own two eyes the data that this aggregate and lookup operator are

148
00:11:37,900 --> 00:11:38,490
returning.

149
00:11:39,520 --> 00:11:44,830
So let's go ahead and save this and then make sure that your command line is visible.

150
00:11:45,530 --> 00:11:52,180
OK, now back in your browser, just refresh or send one more request, this post screen, and now we

151
00:11:52,180 --> 00:11:54,070
should see a bit of data in the console.

152
00:11:54,700 --> 00:11:54,970
Cool.

153
00:11:54,970 --> 00:11:56,950
So there's our post object.

154
00:11:57,340 --> 00:12:05,050
We see the post ID, the post title Body Content Created Date, the idea of the author, but there's

155
00:12:05,050 --> 00:12:08,520
that new author document name that we chose.

156
00:12:08,830 --> 00:12:14,890
So the lookup operation is adding this new property to the returned object.

157
00:12:15,220 --> 00:12:20,830
And we can see that it's an array of any matching documents based on that look up.

158
00:12:21,430 --> 00:12:21,670
Right?

159
00:12:21,700 --> 00:12:27,330
It's an array of any user documents that's ID matches this author ID.

160
00:12:27,940 --> 00:12:34,330
Now, keep in mind that our aggregate operations are not actually manipulating any data in the database.

161
00:12:34,600 --> 00:12:38,590
It's simply returning data that we can use however we want.

162
00:12:38,980 --> 00:12:45,160
In this case, we know that we want to use this data within our controller and ultimately our controller

163
00:12:45,160 --> 00:12:48,900
is just passing it on to an HTML or Ejaz template.

164
00:12:49,330 --> 00:12:56,110
What I'm getting at here is that in terms of this HTML template, we don't need that to know the author

165
00:12:56,110 --> 00:12:56,770
ID.

166
00:12:57,220 --> 00:13:04,300
Instead, we'd really just want the author property to be an object that contains the user name and

167
00:13:04,300 --> 00:13:05,160
their avatar.

168
00:13:05,650 --> 00:13:12,460
So our first step towards making that happen is to use another aggregate operator named Project.

169
00:13:13,010 --> 00:13:16,530
Let me hide my console and show you what we can do within our code.

170
00:13:17,180 --> 00:13:21,610
So right now we just have two items in our array of aggregate operations.

171
00:13:21,980 --> 00:13:23,060
Let's add a third.

172
00:13:23,540 --> 00:13:29,630
So at the very end of this Look-Up line, we can just add a comma and then create another object.

173
00:13:30,410 --> 00:13:36,080
And this time we want to use the operator named Dollar Sign Project Colon.

174
00:13:36,080 --> 00:13:39,850
And then we give that an object in between these curly brackets.

175
00:13:39,860 --> 00:13:42,370
Feel free to drop down just to stay organized.

176
00:13:42,620 --> 00:13:49,910
So what project does is it allows us to spell out exactly what fields we want the resulting object to

177
00:13:49,910 --> 00:13:56,690
have this way instead of just returning every single field for that document, we have a bit of fine

178
00:13:56,690 --> 00:13:58,480
grained control on what we return.

179
00:13:58,940 --> 00:14:02,000
So we know that we want to include the title of the post.

180
00:14:02,150 --> 00:14:09,250
So title Colon one to mean true or yes, do include it, comma.

181
00:14:09,260 --> 00:14:12,320
Let's also be sure to include the body field.

182
00:14:12,320 --> 00:14:20,330
So body one, let's also be sure to include the created date of created date call and one comma.

183
00:14:20,360 --> 00:14:23,510
And finally for the author field.

184
00:14:23,780 --> 00:14:25,370
We don't want to just say one.

185
00:14:26,310 --> 00:14:31,590
Because that would just be what's already being stored in the post document, right, just a reference

186
00:14:31,590 --> 00:14:39,300
to the matching user ID instead we would want the user property to be that author document.

187
00:14:39,600 --> 00:14:39,870
Right.

188
00:14:39,870 --> 00:14:43,400
Or the entire user document instead of just the ID.

189
00:14:43,830 --> 00:14:48,510
So instead of one here, we can include an object and type this out with me.

190
00:14:48,870 --> 00:15:01,200
Dollar sign array Ellem at Colen and then square brackets and then quotes, let's say dollar sign author

191
00:15:01,410 --> 00:15:05,600
document after the quotes comma zero.

192
00:15:06,210 --> 00:15:07,580
Let's unpack this code.

193
00:15:07,770 --> 00:15:11,450
So let's actually start here and work our way backwards.

194
00:15:11,910 --> 00:15:18,030
So for this data that's ultimately going to get passed into our HTML template, we would want the author

195
00:15:18,030 --> 00:15:23,990
property to be an object with the user's username and their avatar.

196
00:15:24,570 --> 00:15:27,840
So that's what we're setting it to with author document.

197
00:15:27,840 --> 00:15:28,130
Right?

198
00:15:28,290 --> 00:15:31,170
That's the document that was found during the lookup.

199
00:15:31,590 --> 00:15:36,780
So Mongo DB will see the dollar sign here and know that we don't just mean a simple string of text.

200
00:15:37,140 --> 00:15:40,260
This means to actually pull in that author document.

201
00:15:40,710 --> 00:15:46,770
OK, and now remember, Look-Up is ultimately going to return an array, but because we know there's

202
00:15:46,770 --> 00:15:53,200
only ever going to be one author document, we're just returning the first item in that array.

203
00:15:53,790 --> 00:15:54,080
Right.

204
00:15:54,110 --> 00:16:01,100
So we're interested in the array element at the zero position.

205
00:16:01,770 --> 00:16:04,100
So this way, author will not be an array.

206
00:16:04,260 --> 00:16:08,070
It will just be that one single object representing that user.

207
00:16:08,500 --> 00:16:12,930
Let's go ahead and save this and then make sure that your command line is visible.

208
00:16:13,500 --> 00:16:17,730
And let's go send a new request in our browser to trigger the console dialog.

209
00:16:19,080 --> 00:16:20,660
Refresh back in the console.

210
00:16:21,090 --> 00:16:22,670
Let's go ahead and expand this.

211
00:16:23,880 --> 00:16:25,620
So this is our post object.

212
00:16:25,740 --> 00:16:33,750
And now we can see that the author property, instead of just the user ID, is an object and it contains

213
00:16:33,750 --> 00:16:39,290
useful things like the username and the email address that we can use to pull in their graviton.

214
00:16:39,660 --> 00:16:43,740
However, we don't need to pass this entire document to the controller.
