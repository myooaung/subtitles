1
00:00:01,830 --> 00:00:02,740
Hello, everyone.

2
00:00:03,090 --> 00:00:09,180
In this lesson, we are going to learn how to set up a user avatar or profile photo.

3
00:00:09,600 --> 00:00:15,900
So as we can see here, once you're logged in in this top right menu, it's going to show your avatar

4
00:00:15,900 --> 00:00:17,610
or little profile photo.

5
00:00:17,940 --> 00:00:23,400
Now, for the moment, this is hard coded to a placeholder image of a cat, but we would want this to

6
00:00:23,400 --> 00:00:30,970
be specific to the currently logged in user also, once we add the ability to let users create posts.

7
00:00:31,470 --> 00:00:35,610
This is the photo that would show up alongside a post, right.

8
00:00:35,610 --> 00:00:38,790
It would show the photo of the author for that post.

9
00:00:38,920 --> 00:00:43,490
So we're going to use this profile photo in several places throughout our application.

10
00:00:43,770 --> 00:00:47,390
But in this lesson, we're just going to focus on the top right menu.

11
00:00:47,760 --> 00:00:48,300
All right.

12
00:00:48,300 --> 00:00:49,760
Now to power this feature.

13
00:00:50,100 --> 00:00:54,060
We are going to leverage a service named Granovetter.

14
00:00:54,450 --> 00:01:00,030
If you've never heard of Gravitron, just stands for globally recognized Avatar.

15
00:01:00,490 --> 00:01:06,480
Essentially, you sign up or register for an Avatar account and then potentially any website in the

16
00:01:06,480 --> 00:01:11,440
world can pull in your aggravator based on your email address.

17
00:01:11,700 --> 00:01:17,520
So, for example, instead of me being logged in with the puppy account, imagine I was logged in with

18
00:01:17,520 --> 00:01:24,400
my cat at cat dot com account and imagine I had a Gravitron account that used that email address.

19
00:01:24,690 --> 00:01:25,440
Well, if you.

20
00:01:25,440 --> 00:01:25,800
Right.

21
00:01:25,800 --> 00:01:33,720
Click on this profile photo and choose open image in new tab, you can see the URL for that image.

22
00:01:34,080 --> 00:01:39,750
So it's just graviton dotcom slash avatar and then a hash tag value.

23
00:01:40,050 --> 00:01:44,220
And then at the end there's a size parameter where you can say how large the image should be.

24
00:01:44,580 --> 00:01:47,540
Now the thing we want to focus on here is the hash.

25
00:01:47,940 --> 00:01:53,920
This is just the user's email address, but Hashd using the MD five library.

26
00:01:54,360 --> 00:02:01,400
The reason this is so cool is because now we can show this photo publicly on our Web application.

27
00:02:01,740 --> 00:02:01,990
Right.

28
00:02:02,030 --> 00:02:04,590
So on any articles created by this user.

29
00:02:04,920 --> 00:02:08,790
But we aren't publicly leaking that user's email address.

30
00:02:09,120 --> 00:02:13,350
If anyone comes to our website, this is the Eurail they're going to see.

31
00:02:13,590 --> 00:02:16,550
And remember, pashing is a one way street.

32
00:02:16,890 --> 00:02:22,050
There's no way for someone to decrypt this back into the user's email address.

33
00:02:22,350 --> 00:02:25,830
So this graviton system is going to give us the best of both worlds.

34
00:02:26,190 --> 00:02:32,010
We can pull in a profile photo by simply knowing a user's email address, but we're not revealing that

35
00:02:32,010 --> 00:02:35,070
email address to anyone that views that photo.

36
00:02:35,370 --> 00:02:35,820
All right.

37
00:02:35,830 --> 00:02:41,030
Now, without further ado, let's jump into our text editor and begin working on this feature.

38
00:02:41,400 --> 00:02:48,600
I want you to open up your uppercase user JS model file because this feature relies on the data for

39
00:02:48,600 --> 00:02:49,230
a user.

40
00:02:49,380 --> 00:02:51,940
It makes sense to include this in a model.

41
00:02:52,350 --> 00:02:54,570
Let's go ahead and create a new function.

42
00:02:55,000 --> 00:03:00,870
So I'm going to scroll down towards the bottom and maybe right above this module, the exports line.

43
00:03:00,870 --> 00:03:07,830
Let's add a new line and let's say uppercase user dot, prototype dot.

44
00:03:08,130 --> 00:03:09,630
Let's make up a function name.

45
00:03:09,630 --> 00:03:13,040
Let's call it git avatar.

46
00:03:13,740 --> 00:03:18,480
OK, let's set that to equal a function, OK?

47
00:03:18,490 --> 00:03:23,820
And within this function, let's just set this DOT avatar.

48
00:03:24,330 --> 00:03:30,180
So we're just going to add a new property onto our main object and let's set this to equal.

49
00:03:30,420 --> 00:03:37,080
And then instead of a string of text using quotes, let's create a template literal with back ticks

50
00:03:37,590 --> 00:03:38,750
within the two back text.

51
00:03:38,820 --> 00:03:53,370
Type out this you with me htp s Colen forward slash forward slash gravois tar dot com slash avatar slash

52
00:03:53,520 --> 00:03:54,390
email.

53
00:03:54,840 --> 00:03:58,500
And then we can include a parameter that says how large the photo should be.

54
00:03:58,500 --> 00:04:05,110
So questionmark s equals and let's say one hundred and twenty eight pixels.

55
00:04:05,610 --> 00:04:05,920
Cool.

56
00:04:05,940 --> 00:04:13,500
Now all we need to do to make this actually work is replace the word email here with the current user's

57
00:04:13,500 --> 00:04:14,460
email address.

58
00:04:14,460 --> 00:04:17,770
But Hashd using the MD five library.

59
00:04:18,120 --> 00:04:20,560
Don't worry, we're going to walk through this step by step.

60
00:04:20,610 --> 00:04:27,810
So right now, let's go out to the JavaScript grocery store or NPM and pick up the MD five package.

61
00:04:28,350 --> 00:04:29,940
So open up your command line.

62
00:04:29,940 --> 00:04:34,590
If your app is running press control, see to stop and let's install a package.

63
00:04:34,590 --> 00:04:41,250
So NPM install in the name of the package is M d five.

64
00:04:41,790 --> 00:04:47,420
This will give us access to the specific hashing algorithm that the gravitas service expects.

65
00:04:47,820 --> 00:04:50,280
So let's go ahead and press enter to install this.

66
00:04:51,520 --> 00:04:56,770
OK, then let's tell our app to start running again, so npm run watch.

67
00:04:57,980 --> 00:05:04,190
OK, within this user model file, let's go require in that new package, so scroll up to the very top,

68
00:05:04,790 --> 00:05:11,150
maybe right below this validator line, let's add a new line and just say const M.D. five equals and

69
00:05:11,150 --> 00:05:15,110
then require in that package package name was MDE five.

70
00:05:15,890 --> 00:05:22,780
OK, now let's just leverage this so that scroll back down to the bottom within our new git avatar function.

71
00:05:23,390 --> 00:05:29,960
And because this is a template literal using these tactics, check this out, we can just hollow out

72
00:05:29,960 --> 00:05:37,100
or delete the word email here and in its place we can say dollar sign curly brackets.

73
00:05:37,340 --> 00:05:40,730
And now within these curly brackets, we can do something dynamic.

74
00:05:41,240 --> 00:05:48,340
So let's use the MD five package parentheses to call it, and then we just pass it in email address.

75
00:05:48,740 --> 00:05:53,090
So to get the current user's email, we can just say this dot data.

76
00:05:53,090 --> 00:05:54,210
Dot email.

77
00:05:54,680 --> 00:05:55,130
Cool.

78
00:05:55,130 --> 00:05:58,750
So now a user object will have a property named Avatar.

79
00:05:59,090 --> 00:06:01,560
That is a huge URL that points towards a photo.

80
00:06:02,120 --> 00:06:06,060
Now we just need to call this function at the appropriate times.

81
00:06:06,590 --> 00:06:10,940
So first, let's go call it once a user has successfully logged in.

82
00:06:11,270 --> 00:06:15,690
So within this same file, we can just scroll up and look for our login function.

83
00:06:16,430 --> 00:06:16,970
Here it is.

84
00:06:16,970 --> 00:06:19,080
User dot, prototype dot login.

85
00:06:19,580 --> 00:06:20,010
OK.

86
00:06:20,030 --> 00:06:25,550
And if the login attempt was successful, so that would be this area where we say resolve.

87
00:06:25,850 --> 00:06:32,930
So right above this resolve line, let's just call our this dot get avatar function.

88
00:06:33,200 --> 00:06:33,450
Right.

89
00:06:33,470 --> 00:06:37,490
That's going to populate a property named Avatar on our object.

90
00:06:38,000 --> 00:06:39,890
OK, that takes care of logging in.

91
00:06:40,100 --> 00:06:45,240
Let's also call our avatar function when a user successfully registers.

92
00:06:45,740 --> 00:06:49,490
So if you scroll down a little bit, we should see our register function, right?

93
00:06:49,520 --> 00:06:51,690
User dot, prototype, dot register.

94
00:06:52,340 --> 00:06:57,110
And again, if this registration is successful, this is that area.

95
00:06:57,110 --> 00:06:57,280
Right.

96
00:06:57,350 --> 00:06:59,030
We're going to call resolve.

97
00:06:59,720 --> 00:07:06,260
So right before we call resolve right above that line, let's just call this dot, get Avatar.

98
00:07:06,710 --> 00:07:11,270
I should explain why I'm including this after the database action.

99
00:07:11,720 --> 00:07:15,710
It's because I don't actually want to store the avatar.

100
00:07:15,710 --> 00:07:19,300
You are in the database permanently, right?

101
00:07:19,310 --> 00:07:24,020
Because what if in the future the gravitas service changes there you are URL structure.

102
00:07:24,290 --> 00:07:30,500
At that point, I would have to go through every user account in my database and update their Avatar

103
00:07:30,500 --> 00:07:31,550
database field.

104
00:07:31,940 --> 00:07:33,080
I wouldn't want to do that.

105
00:07:33,290 --> 00:07:38,930
Instead, it makes more sense to just generate there you are on the fly when we need it.

106
00:07:39,260 --> 00:07:44,770
It's not a big deal because an MD five hashing operation is a very cheap, quick operation.

107
00:07:45,170 --> 00:07:49,250
So in other words, I'm not worried about storing this permanently in the database.

108
00:07:49,430 --> 00:07:53,570
I'm just storing this in memory on the user object.

109
00:07:54,080 --> 00:08:01,400
Let's go ahead and save this file and then let's jump into our user controller and actually leverage

110
00:08:01,580 --> 00:08:04,130
that Avatar property on our object.

111
00:08:04,520 --> 00:08:11,630
So within your controllers folder, jump into the file named user controller Dot J.S. and let's work

112
00:08:11,630 --> 00:08:15,250
on the login feature first and then the register feature.

113
00:08:15,740 --> 00:08:22,310
So if a user successfully logs in, this is where we are storing a bit of session data about that current

114
00:08:22,310 --> 00:08:22,830
user.

115
00:08:23,270 --> 00:08:24,380
So check this out.

116
00:08:24,590 --> 00:08:29,120
Instead of this made up property of favorite color, let's just change this.

117
00:08:29,480 --> 00:08:33,140
Change the proper name from fav color to Avatar.

118
00:08:33,770 --> 00:08:42,830
And for the value, let's just get rid of quotes blue and instead say lower case user dot avatar.

119
00:08:43,340 --> 00:08:43,610
Right.

120
00:08:43,610 --> 00:08:45,020
Just two lines above this.

121
00:08:45,260 --> 00:08:50,270
We just created a user variable using our model as a blueprint.

122
00:08:50,630 --> 00:08:55,610
So we know that in memory there's going to be a property named Avatar on that object.

123
00:08:55,910 --> 00:08:56,210
Cool.

124
00:08:56,210 --> 00:08:57,890
And we're saving it in a session.

125
00:08:58,070 --> 00:09:03,320
So as long as that user stays logged in, we don't need to calculate their avatar again.

126
00:09:03,650 --> 00:09:07,430
Before we save this file, let's go do the same thing in our register function.

127
00:09:07,580 --> 00:09:09,800
So scroll down, OK?

128
00:09:09,830 --> 00:09:14,660
If a user successfully registers, we are setting a bit of session data.

129
00:09:15,110 --> 00:09:21,200
The first property we're setting is username, but let's just go ahead and set another property avatar

130
00:09:21,200 --> 00:09:24,710
and just set it to user dot avatar.

131
00:09:25,250 --> 00:09:32,840
OK, and now the question becomes, how can we access that piece of session data from within our home

132
00:09:32,840 --> 00:09:35,180
dashboard HTML template?

133
00:09:35,600 --> 00:09:39,500
Because ultimately that's where we want to use this data, right.

134
00:09:39,500 --> 00:09:43,790
We would want to update the source attribute of this image element.

135
00:09:44,510 --> 00:09:52,070
So to accomplish this within this same user controlled or not JS file, let's just scroll down to our

136
00:09:52,070 --> 00:09:53,150
home function.

137
00:09:53,450 --> 00:09:57,320
So on this line, if we users logged in, we're going to read.

138
00:09:57,390 --> 00:10:06,030
There are home dashboard HTML template, and for this second argument where we pass data into the template,

139
00:10:06,330 --> 00:10:12,260
you can see we're already sending it a username that's being pulled from session data.

140
00:10:12,900 --> 00:10:15,470
So let's just do the same thing for Avatar.

141
00:10:15,930 --> 00:10:20,370
So right after this session, user username, just Atacama.

142
00:10:20,640 --> 00:10:30,020
We want to add one more property and let's just say Avatar Colen and give it a value of request session.

143
00:10:30,360 --> 00:10:31,410
Dot user.

144
00:10:31,590 --> 00:10:32,950
Dot Avatar.

145
00:10:33,270 --> 00:10:33,700
Cool.

146
00:10:33,720 --> 00:10:35,820
Now, let's go ahead and save this.

147
00:10:36,060 --> 00:10:41,590
And now let's jump in to that HTML template and actually leverage this piece of data.

148
00:10:42,270 --> 00:10:47,610
So within our project folder, I want you to look within your views, Subfolder.

149
00:10:48,830 --> 00:10:55,490
And let's open up our file that is named Home Dash Dashboard, Dot, SJS.

150
00:10:56,800 --> 00:11:04,630
Within this template, on about line number 20, we see an opening, a tag, and within it we see an

151
00:11:04,630 --> 00:11:10,480
opening image tag within this image element, let's find its source attribute.

152
00:11:10,660 --> 00:11:11,860
So if I scroll over.

153
00:11:13,240 --> 00:11:21,130
Here we see Source or SAAC, and it's currently pointed towards a hardcoded gravity euro, so let's

154
00:11:21,130 --> 00:11:23,730
hollow out or delete the source values.

155
00:11:23,730 --> 00:11:25,870
So within the quotes, just delete everything.

156
00:11:28,400 --> 00:11:34,220
OK, so now our source attribute is just an empty pair of quotes within these quotes, we want to do

157
00:11:34,220 --> 00:11:38,240
something dynamic because we are within an Aegis template.

158
00:11:38,240 --> 00:11:41,090
We can just say less than percentage.

159
00:11:41,090 --> 00:11:48,170
And then to close that, it's percentage greater than in between these two tags, we can just say Avatar,

160
00:11:48,710 --> 00:11:49,000
right.

161
00:11:49,010 --> 00:11:54,440
That property is getting passed into our template now because we don't just want to access this, but

162
00:11:54,440 --> 00:11:57,020
we actually want to output it or print it.

163
00:11:57,380 --> 00:12:02,390
We want to include an equal sign right after this opening percentage.

164
00:12:02,750 --> 00:12:05,880
OK, let's go ahead and save this and test it out.

165
00:12:06,590 --> 00:12:13,040
So back in the browser, I'm going to sign out to give the server a chance to regenerate a new session

166
00:12:13,040 --> 00:12:16,100
for me using all of our new code and new logic.

167
00:12:17,560 --> 00:12:21,280
So sign out and then let's sign back in so it generates a new session.

168
00:12:25,920 --> 00:12:33,090
Cool, so there's the default or fallback avatar profile icon, the account that I just logged in with

169
00:12:33,090 --> 00:12:40,170
has an email address of Brad at Brad dot com, which obviously is not a real email address, but to

170
00:12:40,170 --> 00:12:41,880
test this out and truly see it.

171
00:12:41,880 --> 00:12:43,320
User profile photo here.

172
00:12:43,320 --> 00:12:49,440
If I log back out and if I register for an account using my real email address.

173
00:12:49,950 --> 00:12:53,370
So, Brad, to and for the email choose a password.

174
00:12:54,690 --> 00:12:56,370
And if I go ahead and sign up.

175
00:12:59,080 --> 00:13:06,100
Awesome, you can see let me zoom in, even for you, it successfully pulled in my profile photo from

176
00:13:06,280 --> 00:13:13,000
Avatar, you can test this out yourself by signing up for a graviton account and then whatever email

177
00:13:13,000 --> 00:13:19,660
address you sign up for Graviton with, just use that email address when you sign up on our sample application.

178
00:13:20,200 --> 00:13:20,470
Cool.

179
00:13:20,470 --> 00:13:22,180
So it remembered me when I registered.

180
00:13:22,180 --> 00:13:28,930
And if I sign out and signed back into that brand to account, it should also be able to calculate and

181
00:13:28,930 --> 00:13:30,070
pull in my Gravitron.

182
00:13:33,820 --> 00:13:38,950
Woops, it's actually only pulling in the default photo, so there's a problem here, I'm pretty sure

183
00:13:38,950 --> 00:13:43,600
I know exactly what the issue is, so be sure to follow along and perform this fix with me.

184
00:13:43,810 --> 00:13:51,850
All we need to do back in our text editor, jump into your uppercase user JS model file and within the

185
00:13:51,850 --> 00:13:59,500
model's login function before we call our git avatar function, we need to make sure that our users

186
00:13:59,500 --> 00:14:06,910
email address is present on this object because the user only typed in their username and password to

187
00:14:06,910 --> 00:14:09,120
log in and not their email address.

188
00:14:09,370 --> 00:14:14,630
We need to grab the associated email with that user account from the database.

189
00:14:15,010 --> 00:14:22,300
Now, luckily, we already have this attempted user that represents the associated user document in

190
00:14:22,300 --> 00:14:23,110
the database.

191
00:14:23,560 --> 00:14:32,680
So right before we call this doGet avatar, let's just say this DOT data and let's just populated with

192
00:14:32,680 --> 00:14:33,640
the database data.

193
00:14:33,640 --> 00:14:37,060
So attempted user cool.

194
00:14:37,060 --> 00:14:43,020
So now when our get avatar function runs, it's going to have access to the user's email address.

195
00:14:43,750 --> 00:14:46,220
Let's go ahead and save this and test it out.

196
00:14:46,960 --> 00:14:48,220
So if I log out.

197
00:14:49,560 --> 00:14:56,340
And then log back in with that brand to account, right, to give it a chance to regenerate my session.

198
00:14:57,480 --> 00:15:03,720
Perfect, there is the profile photo that's going to bring this lesson to a close and more importantly,

199
00:15:03,870 --> 00:15:07,530
that's going to bring this chapter or section to a close.

200
00:15:08,040 --> 00:15:14,640
Now that we've set up the basic functionality of registering and logging in and out, we can finally

201
00:15:14,640 --> 00:15:22,650
move on to the first real feature of our app, which is letting users create posts or articles.

202
00:15:23,220 --> 00:15:28,770
It should be a lot of fun to change gears and work on something completely new, and it's going to feel

203
00:15:28,770 --> 00:15:31,800
like we're making a ton of progress on our app.

204
00:15:32,100 --> 00:15:36,240
So let's keep things rolling and I will see you in the next section.
