1
00:00:01,940 --> 00:00:02,900
Hello, everyone.

2
00:00:03,140 --> 00:00:10,190
In this lesson, we are going to begin building our simple to do app, let's dive right into the action.

3
00:00:10,610 --> 00:00:16,190
So this is a sneak preview of the finished product of what we are going to build together.

4
00:00:16,460 --> 00:00:22,640
And we definitely will not complete the app in this lesson, but we should be able to get a nice skeleton

5
00:00:22,640 --> 00:00:23,430
up and running.

6
00:00:23,810 --> 00:00:25,880
So go ahead and follow along with me.

7
00:00:26,060 --> 00:00:31,640
Our first step is to create a new folder anywhere on your computer that you can easily find again.

8
00:00:31,940 --> 00:00:37,040
And let's just create a brand new empty folder where we can begin to create a new app.

9
00:00:37,490 --> 00:00:40,930
So in my case, I'll just right click on my desktop, click new folder.

10
00:00:41,300 --> 00:00:43,390
Feel free to name the folder, whatever you like.

11
00:00:43,400 --> 00:00:46,070
I'm going to name it to do dash app.

12
00:00:47,700 --> 00:00:52,070
OK, and then you need to open up this folder within your text editing program.

13
00:00:52,460 --> 00:00:54,980
In my case, that's visual studio code.

14
00:00:55,520 --> 00:00:56,060
All right.

15
00:00:56,060 --> 00:00:59,990
Now, within this brand new empty folder, what is our first goal?

16
00:01:00,410 --> 00:01:05,180
Well, let's create a JavaScript file that will run in the node environment.

17
00:01:05,360 --> 00:01:10,630
And our goal in this new file will be to create a server that listens for incoming requests.

18
00:01:11,060 --> 00:01:13,240
So in our new folder, let's create a new file.

19
00:01:13,490 --> 00:01:17,420
I'm going to name it Server Dot J.S..

20
00:01:17,870 --> 00:01:21,160
Technically, you can name it whatever you want, as long as it ends in danger.

21
00:01:21,250 --> 00:01:25,730
Yes, but just so you and I are on the same page, let's go with the name of server.

22
00:01:26,180 --> 00:01:27,670
Yes, OK.

23
00:01:27,680 --> 00:01:32,780
In this new empty file, our goal is to create a server that listens for incoming requests.

24
00:01:33,080 --> 00:01:39,830
And as we learned earlier in the course, if that's your goal, it makes a lot of sense to use the express

25
00:01:39,830 --> 00:01:40,700
framework.

26
00:01:41,180 --> 00:01:50,240
So let's create a variable, say, let express equal and then let's require or load or import in and

27
00:01:50,240 --> 00:01:52,280
then inside the parentheses after require.

28
00:01:52,610 --> 00:01:55,880
Let's just say quotes express.

29
00:01:56,360 --> 00:02:01,810
But remember, the express framework is not a bundled or native part of node.

30
00:02:02,240 --> 00:02:08,690
So before we can actually use express like this, we first need to go out onto the Internet or go to

31
00:02:08,690 --> 00:02:13,730
the JavaScript grocery store and pick it up and bring it home to our project.

32
00:02:14,150 --> 00:02:17,990
To do that, we need to open up our command line in voice code.

33
00:02:17,990 --> 00:02:23,570
You can push the control until the key to open the command line, or you can just click on View and

34
00:02:23,570 --> 00:02:24,740
then terminal.

35
00:02:26,390 --> 00:02:33,080
OK, now down in the command line, before we actually run the command to download and install Express,

36
00:02:33,410 --> 00:02:39,110
let's first run a command that will create a grocery list that will keep track of all the different

37
00:02:39,110 --> 00:02:41,010
ingredients that our app needs.

38
00:02:41,420 --> 00:02:43,790
I'll explain what I mean by that a bit later on.

39
00:02:43,790 --> 00:02:50,630
But for now, in the command line, type this out with me and PM and then a space and then a minute

40
00:02:51,140 --> 00:02:56,750
I and I t and then the space and then dash y and then press enter.

41
00:02:58,160 --> 00:03:02,870
You'll notice that that command just created a new file in our folder named Package.

42
00:03:03,080 --> 00:03:06,260
Jason, we will circle back to this file in just a minute.

43
00:03:06,500 --> 00:03:12,470
But for now, let's jump back down into the command line and this time let's actually install Express.

44
00:03:12,950 --> 00:03:21,740
So to do that type in the command NPM install and what package do we want to install express.

45
00:03:22,340 --> 00:03:25,880
So NPM install, express and then push, enter.

46
00:03:29,250 --> 00:03:31,420
All right, now, two things just happened.

47
00:03:31,620 --> 00:03:38,940
Number one, the actual files or ingredients for the express package got stored in our Noad Modules

48
00:03:38,940 --> 00:03:41,770
folder that lives within our project folder.

49
00:03:42,330 --> 00:03:46,710
So that's like when you get home from the grocery store and you unload the groceries into your cupboards

50
00:03:46,710 --> 00:03:47,760
and your refrigerator.

51
00:03:48,090 --> 00:03:56,790
But the other thing that just happened is our packaged JSON file was modified to include express in

52
00:03:56,790 --> 00:03:58,530
its list of dependencies.

53
00:03:58,950 --> 00:04:04,260
That means that this package, JSON file is like our grocery list or our recipe.

54
00:04:04,570 --> 00:04:10,510
It keeps a running list of all the ingredients our application needs in order to run.

55
00:04:10,950 --> 00:04:16,430
Now we will learn why that's so important and why that's necessary later on in the course.

56
00:04:16,740 --> 00:04:20,810
But for now, I don't want to get dragged down into a tangent for now.

57
00:04:20,820 --> 00:04:26,490
All you need to know is that this file is very important and that we will circle back to it a bit later

58
00:04:26,490 --> 00:04:26,760
on.

59
00:04:27,060 --> 00:04:33,150
For the time being, let's get back to the task at hand and build our server that listens for incoming

60
00:04:33,150 --> 00:04:34,010
requests.

61
00:04:34,260 --> 00:04:45,360
So within our server JS file on a new line, let's say let app equal and then let's just call Express

62
00:04:46,390 --> 00:04:48,270
Express and then parentheses to call it.

63
00:04:48,810 --> 00:04:53,820
OK, on a new line, let's tell our app to begin listening for incoming requests.

64
00:04:54,180 --> 00:05:00,720
So let's just say app dot listen parentheses to call that listen method in between the parentheses,

65
00:05:00,720 --> 00:05:02,250
let's tell it to listen on PT..

66
00:05:02,250 --> 00:05:03,150
Three thousand.

67
00:05:03,600 --> 00:05:06,150
OK, and then maybe right above that app.

68
00:05:06,390 --> 00:05:12,480
Listen line, let's add one more new line and tell our app what it should do if it receives an incoming

69
00:05:12,480 --> 00:05:14,760
request to the homepage url.

70
00:05:15,270 --> 00:05:21,300
So let's say app dot get meaning if it receives a gett request.

71
00:05:21,810 --> 00:05:26,880
And the first argument inside these parentheses should be the euro that we're looking out for.

72
00:05:27,330 --> 00:05:33,930
So we can just say quotes forwards to represent the base or homepage you rl then let's include a comma

73
00:05:34,170 --> 00:05:39,870
and the next argument should be a function that will run when this request happens.

74
00:05:40,260 --> 00:05:42,570
So let's include an anonymous function.

75
00:05:42,900 --> 00:05:51,240
So function parentheses, curly brackets, feel free to drop down in between the parentheses for the

76
00:05:51,240 --> 00:05:51,750
function.

77
00:05:51,750 --> 00:05:59,370
Let's include parameters that are named RFQ in our S for request and response.

78
00:05:59,850 --> 00:06:06,540
OK, and then within the body of the function, let's just respond to this incoming request by sending

79
00:06:06,540 --> 00:06:10,740
back a bit of HTML or text that says welcome to our app.

80
00:06:11,400 --> 00:06:14,010
So to do that, let's just say RSS for response.

81
00:06:14,010 --> 00:06:22,350
Look inside it for a method named send, call that method and pass it a string of text that says Hello,

82
00:06:23,100 --> 00:06:24,390
welcome to our app.

83
00:06:25,200 --> 00:06:31,080
OK, at this point, let's go ahead and save this file in our text editor and then try to visit our

84
00:06:31,080 --> 00:06:32,580
server in a Web browser.

85
00:06:33,000 --> 00:06:36,240
So let's first make sure to tell our server to begin running.

86
00:06:36,570 --> 00:06:43,410
So down in the command line area, let's run a command and say node and then the name of this file that

87
00:06:43,410 --> 00:06:45,450
we want to feed into the node environment.

88
00:06:45,990 --> 00:06:47,790
So the name of the file is server.

89
00:06:47,880 --> 00:06:49,490
You can leave off the dot js.

90
00:06:49,560 --> 00:06:51,570
So just say node server, press enter.

91
00:06:52,680 --> 00:06:53,880
OK, it's up and running.

92
00:06:53,880 --> 00:07:01,740
Now if we jump over to the web browser and try to visit local host Colen three thousand.

93
00:07:03,090 --> 00:07:03,450
Cool.

94
00:07:03,450 --> 00:07:03,960
We see.

95
00:07:03,960 --> 00:07:05,820
Hello and welcome to our app.

96
00:07:06,240 --> 00:07:10,530
However, this is not what we actually want to send to a visitor.

97
00:07:10,830 --> 00:07:17,580
What we actually want to send is each HTML that will create this user interface.

98
00:07:17,880 --> 00:07:25,950
However, this is not a course in HTML, so I'm not going to walk through keystroke by keystroke and

99
00:07:25,950 --> 00:07:28,890
type out an HTML template with you.

100
00:07:29,310 --> 00:07:36,150
So instead I've included the bare bones skeleton of an HTML template up on the Web.

101
00:07:36,330 --> 00:07:41,580
And right now I'm going to show you how you can visit it, so then you can just copy and paste the basic

102
00:07:41,580 --> 00:07:42,080
template.

103
00:07:42,420 --> 00:07:52,440
So right now, open up a new tab in your Web browser and I want you to visit git hub, dot com slash,

104
00:07:52,860 --> 00:08:00,510
learn web code, slash JavaScript if you need to pause the video while you type out this URL.

105
00:08:00,510 --> 00:08:01,410
That's OK.

106
00:08:01,740 --> 00:08:05,850
I will also include a link to this in the resources for this lesson.

107
00:08:06,120 --> 00:08:10,890
OK, from this GitHub page, if you scroll down a bit towards the bottom of the page, you'll see a

108
00:08:10,890 --> 00:08:16,710
list of files or folders click on the folder that's named O one underscore simple app.

109
00:08:19,000 --> 00:08:24,160
Then you'll see one file named Template HTML, click on that.

110
00:08:25,150 --> 00:08:30,010
And then finally, at the bottom of this page, you'll see the actual code that we're going to work

111
00:08:30,010 --> 00:08:36,220
with now, instead of trying to select this to copy and paste it, I actually recommend you first click

112
00:08:36,220 --> 00:08:41,320
this button here that says raw once you click the raw button.

113
00:08:41,920 --> 00:08:45,160
Now, all this on your screen is the raw HTML code.

114
00:08:45,350 --> 00:08:52,000
So just select all of this or press command or control a to select at all and then just copy it into

115
00:08:52,000 --> 00:08:52,720
your clipboard.

116
00:08:53,520 --> 00:09:00,040
OK, then jump back into your text editing program and on this line where we say response dot send,

117
00:09:00,310 --> 00:09:01,520
let's get rid of this.

118
00:09:01,540 --> 00:09:03,390
Hello and welcome to our app.

119
00:09:04,060 --> 00:09:06,400
And let's also even get rid of the quotes.

120
00:09:07,240 --> 00:09:10,870
Let's replace those quotes with Back Tick's, two of them.

121
00:09:10,880 --> 00:09:16,420
So this is the character to the left of the one key or right above the tab key in between those two

122
00:09:16,420 --> 00:09:16,990
back decks.

123
00:09:16,990 --> 00:09:18,970
I want you to paste in your clipboard.

124
00:09:21,210 --> 00:09:21,730
Awesome.

125
00:09:21,870 --> 00:09:28,050
Now, we did not miss an educational opportunity by simply copying and pasting because there is no JavaScript

126
00:09:28,050 --> 00:09:35,730
code going on in this, all we pasted in was simple HTML, a basic user interface template that will

127
00:09:35,730 --> 00:09:38,190
create the overall look that we're going after.

128
00:09:38,640 --> 00:09:44,790
Now, I do want to mention that in the real world, you would not mix in your HTML template with the

129
00:09:44,790 --> 00:09:48,120
rest of your server code in a single file like this.

130
00:09:48,450 --> 00:09:50,430
What we just did is very messy.

131
00:09:50,760 --> 00:09:57,540
But don't worry, when we build our more complex app or app number two later on in the course, we will

132
00:09:57,540 --> 00:10:02,810
learn how to stay organized and keep our HTML template in a separate file.

133
00:10:03,090 --> 00:10:09,330
But for now, this simplistic approach of having everything in a single file will work just fine at

134
00:10:09,330 --> 00:10:09,750
this point.

135
00:10:09,760 --> 00:10:16,830
Go ahead and save this file again and then let's come down into our command line and press control and

136
00:10:16,830 --> 00:10:21,270
see to stop the server and then let's just fire the server up again.

137
00:10:21,270 --> 00:10:22,650
So node server.

138
00:10:24,290 --> 00:10:30,980
OK, then jump back to your Web browser where you were visiting Localhost Colen three thousand and refresh

139
00:10:30,980 --> 00:10:31,570
the page.

140
00:10:32,450 --> 00:10:32,980
Awesome.

141
00:10:32,990 --> 00:10:34,990
You should see something that looks like this.

142
00:10:35,270 --> 00:10:40,190
So it's our to do app and it has three fake hardcoded items.

143
00:10:40,670 --> 00:10:43,980
So this data is not being read from a database.

144
00:10:44,300 --> 00:10:50,070
This is just static HTML content and none of these buttons do anything.

145
00:10:50,510 --> 00:10:56,530
So trust me, we did not miss any educational opportunities by just copying and pasting this code.

146
00:10:56,870 --> 00:11:00,130
It's our job now to bring this interface to life.

147
00:11:00,620 --> 00:11:06,950
Now, before we worry about learning how to connect to a Mongo DB database, let's first just be able

148
00:11:06,950 --> 00:11:12,550
to respond to this form being submitted right before we worry about a database.

149
00:11:12,560 --> 00:11:19,130
Let's first be able to extract whatever value the user types into this field and then tries to send

150
00:11:19,130 --> 00:11:20,930
to our server to do that.

151
00:11:20,930 --> 00:11:27,080
Let's jump back into our text editor, scroll down to the very bottom of our server, not just file.

152
00:11:28,150 --> 00:11:37,930
And maybe right above our app listen line, let's add a new line and say app dot post within these parentheses,

153
00:11:37,930 --> 00:11:40,350
we want to pass this method to arguments.

154
00:11:40,360 --> 00:11:42,330
So A comma B is placeholders.

155
00:11:42,760 --> 00:11:46,140
The first argument is that you are l that we want to look out for.

156
00:11:46,150 --> 00:11:50,530
So let's say quotes and then a slash and then you could make up whatever you want.

157
00:11:50,530 --> 00:11:54,030
But I'm going to go with create dash item.

158
00:11:54,640 --> 00:12:00,280
So the idea here is when the web browser sends a post request to this U.

159
00:12:00,280 --> 00:12:03,160
RL, well what do we want to do in response?

160
00:12:03,610 --> 00:12:04,950
We want to run a function.

161
00:12:05,140 --> 00:12:12,420
So instead of this placeholder B include an anonymous function, function, parentheses, curly brackets,

162
00:12:12,780 --> 00:12:15,510
it's dropdown within the function parentheses.

163
00:12:15,520 --> 00:12:22,670
Be sure to include request and response that the express framework is going to pass into our function.

164
00:12:23,090 --> 00:12:29,210
OK, and now within the body of this function, what do we want to do in response to this incoming request?

165
00:12:29,500 --> 00:12:31,000
Well, let's do two things.

166
00:12:31,360 --> 00:12:33,640
First, let's log out to the console.

167
00:12:33,640 --> 00:12:42,010
So console dot log and ultimately as a test, I want to log to the console whatever value the user typed

168
00:12:42,010 --> 00:12:43,210
into this field here.

169
00:12:43,630 --> 00:12:50,340
But for the time being, let's just include a test that says make this dynamic in a minute from now.

170
00:12:50,350 --> 00:12:52,410
So we will circle back to this line of code.

171
00:12:52,870 --> 00:12:58,390
But aside from logging that to the console, let's also add another line and send a response back to

172
00:12:58,390 --> 00:13:01,830
the Web browser that just says thank you for submitting the form.

173
00:13:01,840 --> 00:13:02,740
So let's say R.

174
00:13:02,820 --> 00:13:11,200
S and then send and then let's just send back a little bit of text so quotes and say thanks for submitting

175
00:13:11,200 --> 00:13:11,770
the form.

176
00:13:12,440 --> 00:13:20,260
OK, next, what we need to do is adjust our HTML template so that when someone actually does submit

177
00:13:20,260 --> 00:13:24,520
this form, it sends a request to the u r l that we're expecting.

178
00:13:24,850 --> 00:13:26,520
Right, because we just wrote code.

179
00:13:26,530 --> 00:13:29,590
That's assuming the form is going to submit to this U.

180
00:13:29,590 --> 00:13:32,470
RL slash create item.

181
00:13:32,950 --> 00:13:38,350
So let's scroll up to the top of this file and let's dig into this HTML template.

182
00:13:39,380 --> 00:13:45,590
Scroll down through the HTML template, and we are looking for the opening form tag, if you find the

183
00:13:45,590 --> 00:13:49,240
opening body tag, it should just be about five lines below that.

184
00:13:49,580 --> 00:13:57,440
So on the opening form tag, we want to give it an action attribute, say action equals and then quotes

185
00:13:57,770 --> 00:14:01,160
and then say slash create item.

186
00:14:01,520 --> 00:14:07,040
This controls which you orell the form sends its request to when the user submits the form.

187
00:14:07,640 --> 00:14:14,540
And then finally, also we want to add another attribute named method and say equals and then quotes

188
00:14:14,870 --> 00:14:18,740
and say post all uppercase post.

189
00:14:19,190 --> 00:14:20,570
OK, let's make another change.

190
00:14:20,840 --> 00:14:23,270
Just two lines below the opening form tag.

191
00:14:23,270 --> 00:14:25,070
We see an input element.

192
00:14:25,640 --> 00:14:28,760
This is the field that users actually type into.

193
00:14:29,000 --> 00:14:36,410
And right after the word input, let's give it an attribute of name and say equals quotes and give it

194
00:14:36,410 --> 00:14:37,870
a name value of item.

195
00:14:38,210 --> 00:14:40,250
There's nothing special about the word item.

196
00:14:40,500 --> 00:14:44,990
You could choose any word here, but choose item just because it's easy to remember and you'll be on

197
00:14:44,990 --> 00:14:46,230
the same page as I am.

198
00:14:46,580 --> 00:14:53,170
OK, and now that we've told our form where to submit to and we've given that input field a name.

199
00:14:53,480 --> 00:14:57,150
Now let's jump back to the very bottom of this file, OK?

200
00:14:57,200 --> 00:15:00,560
And within our app post area, right.

201
00:15:00,560 --> 00:15:06,320
The area where we say thanks for submitting the form instead of logging out this make this dynamic in

202
00:15:06,320 --> 00:15:07,640
a minute from now to the console.

203
00:15:07,640 --> 00:15:09,830
So let's get rid of that and get rid of the quotes, too.

204
00:15:10,100 --> 00:15:16,640
And just as a test, what we actually want to log out to the console is whatever value the user types

205
00:15:16,640 --> 00:15:17,660
into this field.

206
00:15:18,230 --> 00:15:18,440
Right.

207
00:15:18,440 --> 00:15:24,340
We want to make sure that we can successfully extract that value before we even worry about a database.

208
00:15:24,680 --> 00:15:30,590
So back in our code, let's say console, dot log and look inside the request object.

209
00:15:30,590 --> 00:15:38,780
So HQ look inside it for the body object and then look inside that for the item property, because that's

210
00:15:38,780 --> 00:15:42,590
the name of that input field that we just adjusted in the HTML.

211
00:15:43,020 --> 00:15:47,590
OK, now we just have one more step before we can save this and test it out.

212
00:15:48,110 --> 00:15:54,830
Let's scroll up to the very, very top of this file and right below our LET app Equal Express Line.

213
00:15:54,860 --> 00:16:02,630
Let's add a new line and we just need to tell Express to add all form values to a body object and then

214
00:16:02,630 --> 00:16:08,410
add that body object to the request object because by default, express does not do this.

215
00:16:08,900 --> 00:16:10,910
So this is just a bit of boilerplate code.

216
00:16:10,910 --> 00:16:13,730
It's not very educational, but type this out with me.

217
00:16:14,090 --> 00:16:26,720
App dot use inside of the use parentheses, let's say express dot u rl encoded parentheses to call that

218
00:16:26,720 --> 00:16:33,740
inside that create an object with curly brackets and then set the extended property so extended colon

219
00:16:33,980 --> 00:16:35,690
and set it to false.

220
00:16:36,260 --> 00:16:43,040
Again, this just configures the express framework to include a very convenient body object that gets

221
00:16:43,040 --> 00:16:44,990
added on to the request object.

222
00:16:45,140 --> 00:16:50,180
In other words, it makes it very easy to access the users form data that they are submitting.

223
00:16:50,450 --> 00:16:55,370
OK, at this point, let's go ahead and save the file, come down to our command line and restart the

224
00:16:55,370 --> 00:16:55,820
server.

225
00:16:55,820 --> 00:16:57,140
So control easy to quit.

226
00:16:57,530 --> 00:16:58,550
Fire it up again.

227
00:16:59,600 --> 00:17:02,630
Jump back to your web browser and refresh.

228
00:17:02,630 --> 00:17:10,760
Localhost three thousand and go ahead and type something into this form, I will say by cinnamon and

229
00:17:10,760 --> 00:17:13,040
as soon as I submit the form I see.

230
00:17:13,040 --> 00:17:14,270
Thank you for submitting the form.

231
00:17:14,270 --> 00:17:20,510
But more importantly, back in the command line we see that that value of by cinnamon was locked to

232
00:17:20,510 --> 00:17:21,230
the console.

233
00:17:21,560 --> 00:17:22,220
Awesome.

234
00:17:22,430 --> 00:17:29,720
So we now have our HTML user interface up and running and we are able to successfully access whatever

235
00:17:29,720 --> 00:17:31,130
value the user types in.

236
00:17:31,700 --> 00:17:35,690
This means we are 100 percent ready to learn how to connect.

237
00:17:35,690 --> 00:17:39,920
Are no JS application to a Mongo DB database.

238
00:17:40,280 --> 00:17:46,010
Right, because we want to permanently store or save whatever value the user types in.

239
00:17:46,460 --> 00:17:52,760
This is where the Big three JavaScript technologies all come together seamlessly to create a meaningful

240
00:17:52,760 --> 00:17:53,660
experience.

241
00:17:53,930 --> 00:17:56,810
Setting this up is going to be a ton of fun.

242
00:17:57,020 --> 00:18:01,610
So let's keep our momentum rolling and I will see you in the next lesson.
