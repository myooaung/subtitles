WEBVTT
1
00:00:01.820 --> 00:00:02.900
Hello, everyone.

2
00:00:03.140 --> 00:00:08.660
In this lesson, we're going to begin working on our live search results feature.

3
00:00:09.200 --> 00:00:10.920
Let me show you what I'm referring to.

4
00:00:11.270 --> 00:00:18.410
So when the user clicks on this search icon in the top right header, we can have browser side JavaScript,

5
00:00:18.410 --> 00:00:21.110
open up a full screen search interface.

6
00:00:21.380 --> 00:00:27.230
And then as the user is typing in what they're searching for without even waiting for them to submit

7
00:00:27.230 --> 00:00:33.590
a form, we can begin showing them real live search results with data from our server.

8
00:00:33.980 --> 00:00:41.090
All of this can happen on the fly or asynchronously thanks to our browser side JavaScript skills.

9
00:00:41.720 --> 00:00:49.220
Before we get started, I do want to let you know that a search does not need to be live or asynchronous

10
00:00:49.220 --> 00:00:49.880
like this.

11
00:00:50.150 --> 00:00:56.900
If we wanted to, we could use zero browser based JavaScript and just set up a traditional form that

12
00:00:56.900 --> 00:01:03.650
submits just like the traditional forms we've already set up in this app to create a new post or to

13
00:01:03.650 --> 00:01:06.400
login or register a new user.

14
00:01:06.890 --> 00:01:13.130
I just think when it comes to search results, this will be a fun exercise of receiving live data from

15
00:01:13.130 --> 00:01:16.340
our server on the fly as the user types.

16
00:01:16.520 --> 00:01:22.430
And this will really show off the asynchronous nature and potential of front end JavaScript.

17
00:01:22.910 --> 00:01:28.040
Now, big picture, this search feature can really be broken up into two tasks.

18
00:01:28.400 --> 00:01:36.830
Task one involves front end or browser based JavaScript, and task two involves backend or server side

19
00:01:36.830 --> 00:01:37.670
JavaScript.

20
00:01:38.120 --> 00:01:43.590
In this lesson, let's start with the first task, which is the browser side or front end JavaScript.

21
00:01:44.150 --> 00:01:50.150
Now, this marks the first time in this application that we're going to be writing browser based JavaScript

22
00:01:50.510 --> 00:01:56.570
and we've been so good about keeping our server side code organized and split up into separate files

23
00:01:56.570 --> 00:02:02.510
with unique responsibilities that I don't want all of that organization to go out the window now that

24
00:02:02.510 --> 00:02:04.760
we're working with front end JavaScript.

25
00:02:05.180 --> 00:02:12.530
What I mean by this is I do not want us to just create one big messy spaghetti code file in our public

26
00:02:12.530 --> 00:02:16.520
folder with all of our browser based JavaScript.

27
00:02:17.090 --> 00:02:22.880
Now, yes, eventually we do need to have a JavaScript file in the public folder that the browser can

28
00:02:22.880 --> 00:02:25.160
download with the front end JavaScript.

29
00:02:25.550 --> 00:02:28.580
But that's our end goal or our destination.

30
00:02:28.850 --> 00:02:33.230
We don't want to start here and just create a messy, unorganized file.

31
00:02:33.590 --> 00:02:40.400
Instead, we can set things up in a much more organized fashion and then have an automated tool, bundle

32
00:02:40.400 --> 00:02:43.360
everything up into one file, into the public folder.

33
00:02:43.670 --> 00:02:45.110
Let me show you what I'm getting at.

34
00:02:45.140 --> 00:02:54.320
So within the root of our project folder, let's create a brand new folder and let's name it Front and

35
00:02:54.620 --> 00:02:55.740
dash J.

36
00:02:56.960 --> 00:03:01.340
I do want you to use the same folder name just so we're on the same page.

37
00:03:01.730 --> 00:03:07.400
So it's front and dash jets' within this new folder.

38
00:03:07.400 --> 00:03:12.380
Let's create a new file and let's name this main dot.

39
00:03:12.650 --> 00:03:13.250
Yes.

40
00:03:14.540 --> 00:03:17.150
We will circle back to this file in just a moment.

41
00:03:17.360 --> 00:03:23.390
For now, within our front end JS folder, I actually want us to create a sub folder within it.

42
00:03:23.780 --> 00:03:24.500
So if I right.

43
00:03:24.500 --> 00:03:32.110
Click on the front end jazz folder, choose new folder and let's give this subfolder a name of module's.

44
00:03:33.110 --> 00:03:39.770
The idea is that for each new feature we work on, we create a separate file within the modules folder.

45
00:03:40.190 --> 00:03:43.240
So the task at hand right now is the search feature.

46
00:03:43.520 --> 00:03:47.450
So within this modules folder, let's create a new file and let's name it.

47
00:03:47.720 --> 00:03:57.820
Search JS in the future will also create files in this folder named chat or registration form, not

48
00:03:57.860 --> 00:04:01.160
just within each one of our module files.

49
00:04:01.160 --> 00:04:07.130
We would just want to export code that our main JS file can import.

50
00:04:07.640 --> 00:04:14.210
Then we can set up an automation tool that will bundle up everything that main JS imports and it will

51
00:04:14.210 --> 00:04:18.290
create a file that will automatically be placed in our public folder.

52
00:04:18.680 --> 00:04:20.900
This way we get the best of both worlds.

53
00:04:21.140 --> 00:04:26.840
The front end JS folder is our source code and we can be as organized as we want to be.

54
00:04:27.200 --> 00:04:33.650
But one big messy file still ends up in the public folder that the browser can actually download from

55
00:04:34.040 --> 00:04:34.420
cool.

56
00:04:34.610 --> 00:04:39.560
Now, right now, within our search dogs file, let's just export a bit of code.

57
00:04:39.830 --> 00:04:44.450
So let's say export and we're going to use a new syntax for now.

58
00:04:44.450 --> 00:04:49.160
I'm just going to type it out and then we can circle back to this later to really understand what's

59
00:04:49.160 --> 00:04:49.820
going on.

60
00:04:50.540 --> 00:05:01.070
But let's say export default, class search and then a pair of curly brackets within these curly brackets.

61
00:05:01.070 --> 00:05:01.280
Let's.

62
00:05:01.350 --> 00:05:09.480
Say, constructor, parentheses, curly brackets again, don't worry, I do not expect you to understand

63
00:05:09.480 --> 00:05:14.480
the syntax at all, I promise we will circle back to this a little bit later in the lesson.

64
00:05:14.910 --> 00:05:19.350
But for now, within these curly brackets after constructor, let's drop down.

65
00:05:19.680 --> 00:05:30.270
And just as an annoying test, let's create an annoying alert pop up that says search J.S. is successfully

66
00:05:30.270 --> 00:05:33.120
being executed this way.

67
00:05:33.120 --> 00:05:37.920
A bit later in the lesson when we want to test to make sure that everything's working and connected

68
00:05:37.920 --> 00:05:41.490
properly, we should see an alert pop up message in the browser.

69
00:05:42.210 --> 00:05:44.940
OK, let's go ahead and save this file.

70
00:05:45.180 --> 00:05:54.450
And now I want you to jump into Main J.S. and let's just import in that search file, let's say import

71
00:05:54.840 --> 00:05:58.710
search from and then we provide a file path.

72
00:05:58.740 --> 00:06:01.960
So dot slash to look within this current folder.

73
00:06:02.100 --> 00:06:07.380
Let's dig into the modules folder and pull in the file that is named Search.

74
00:06:08.280 --> 00:06:14.280
You might be scratching your head right now saying this is not the way we've been importing files throughout

75
00:06:14.280 --> 00:06:15.750
the majority of this course.

76
00:06:16.050 --> 00:06:16.210
Right.

77
00:06:16.290 --> 00:06:19.040
You might be thinking where is the required function?

78
00:06:19.500 --> 00:06:25.440
A bit later in the lesson, we can circle back to this import syntax and discuss why we can use this

79
00:06:25.440 --> 00:06:25.680
here.

80
00:06:26.160 --> 00:06:32.100
For now, let's drop down to a new line and let's just create a new instance of search.

81
00:06:32.700 --> 00:06:36.470
We will also revisit what we're doing with this code in just a few minutes.

82
00:06:36.750 --> 00:06:39.240
For now, let's go ahead and save this file.

83
00:06:39.570 --> 00:06:46.140
And now the question becomes, what is this automated tool I've been describing that will bundle this

84
00:06:46.140 --> 00:06:49.560
file up and place it in the public folder for us?

85
00:06:50.160 --> 00:06:56.880
Well, this tool that I've been describing is named Web PIAC Web Pack is insanely popular.

86
00:06:57.120 --> 00:07:02.690
It was downloaded over seven million times from NPM just in the last week.

87
00:07:03.270 --> 00:07:08.580
Hopefully that number is large enough to convince you that using Web pack is not some weird personal

88
00:07:08.580 --> 00:07:13.630
opinion of mine, but rather it's an industry standard or general best practice.

89
00:07:14.220 --> 00:07:17.460
Having said that, right now, let's open up our command line.

90
00:07:17.880 --> 00:07:21.060
If your server is currently running press control, see to stop it.

91
00:07:21.420 --> 00:07:25.050
And let's install a few packages to type this out with me.

92
00:07:25.470 --> 00:07:28.020
NPM install.

93
00:07:28.590 --> 00:07:35.880
The first package that we're interested in is Web pack, and then we can include a space and name another

94
00:07:35.880 --> 00:07:37.710
package that we'd like to download.

95
00:07:38.130 --> 00:07:43.140
So let's also say Web pack dash Seelie.

96
00:07:43.860 --> 00:07:46.320
We're also interested in a few more packages.

97
00:07:46.320 --> 00:07:55.350
So include another space and we want to install at Symbol Bable Forward Slash Core.

98
00:07:56.070 --> 00:07:57.240
Then let's include a space.

99
00:07:57.240 --> 00:08:08.190
We want another package named at Symbol Label Slash Preset Dash N.V. and finally include one more space.

100
00:08:08.190 --> 00:08:15.270
And the last package we're interested in right now is Bable without the at symbol just bable dash loader.

101
00:08:16.080 --> 00:08:21.450
I just zoomed out my command line a bit so that all of this will fit on a single line if you need to

102
00:08:21.450 --> 00:08:25.500
pause the video to type in this entire command with me, that's OK.

103
00:08:25.770 --> 00:08:32.630
But once you've got this typed out, go ahead and press enter since it needs to go download five packages.

104
00:08:32.640 --> 00:08:38.340
This could take a minute, but as soon as it does complete, we now have access to Web pack.

105
00:08:38.640 --> 00:08:45.810
Now out of the box web pack doesn't have any idea about our project folder structure and our file names.

106
00:08:46.200 --> 00:08:51.810
Web pack has no way of knowing where the files that we want to bundle up live.

107
00:08:52.140 --> 00:08:54.780
In other words, Web pack can't read our minds.

108
00:08:54.990 --> 00:09:02.730
So what we need to do within the route of our project folder is create a file named Web Pack config.

109
00:09:03.460 --> 00:09:10.080
Let me show you what I mean so that my top level folder, I'll create a new file and the name of this

110
00:09:10.080 --> 00:09:11.640
file is very important.

111
00:09:11.910 --> 00:09:19.440
It must be named web pack dot config dot js.

112
00:09:20.190 --> 00:09:25.170
Now when we leverage web back, it's going to know to look for a file with this name.

113
00:09:25.810 --> 00:09:30.900
OK, now within this new file, we'd want to tell Westpac where our files live.

114
00:09:31.080 --> 00:09:36.930
So our front end JS folder, we'd want to tell Westpac where it should export or bundle them to.

115
00:09:37.290 --> 00:09:38.880
So that would be our public folder.

116
00:09:39.210 --> 00:09:42.810
And we'd also want to tell Westpac any additional features we want to use.

117
00:09:43.500 --> 00:09:49.230
Now, I do not want this to turn into a course about workflow and configuring tools.

118
00:09:49.740 --> 00:09:56.370
So we are not going to manually type out our configuration for Web back instead of actually already

119
00:09:56.370 --> 00:10:01.110
created a Web configuration for us that we are just going to copy and paste.

120
00:10:02.280 --> 00:10:07.090
So right now in your Web browser, I want you to visit the repository for this course.

121
00:10:07.560 --> 00:10:16.980
Remember, it has a trail of GitHub, dot com slash lern web code slash JavaScript if you look within

122
00:10:16.980 --> 00:10:19.350
the otha complex app folder.

123
00:10:20.040 --> 00:10:27.180
Aside from this templates folder that we've been working with, we also see a file here named Web Config.

124
00:10:27.390 --> 00:10:27.890
Yes.

125
00:10:28.260 --> 00:10:35.850
So just open up that file and then you can click raw here in the browser and just go ahead and select

126
00:10:35.850 --> 00:10:42.690
everything here, copy it into your clipboard and then back in our text editor within our empty web

127
00:10:42.690 --> 00:10:44.280
page config just pasted in.

128
00:10:44.940 --> 00:10:51.900
Essentially, I'm just telling WINPAC where our desired JavaScript files live, where we want to export

129
00:10:51.900 --> 00:10:52.500
them to.

130
00:10:53.190 --> 00:10:56.160
And I'm also setting up use of Bable.

131
00:10:56.940 --> 00:11:04.620
Bable lets us write ultramodern JavaScript code and syntax and then it converts it into JavaScript that

132
00:11:04.620 --> 00:11:08.460
will be supported by basically every web browser under the sun.

133
00:11:08.790 --> 00:11:14.550
Well, that's a bit of an exaggeration, but the idea is that we can write bleeding edge JavaScript

134
00:11:14.760 --> 00:11:21.630
and within the exported, bundled up file, Bable is going to convert it into safer or more traditional

135
00:11:21.630 --> 00:11:28.140
code so that if someone with a slightly older Web browser visits our app, the code will still run without

136
00:11:28.140 --> 00:11:29.020
any problems.

137
00:11:29.460 --> 00:11:29.780
Cool.

138
00:11:29.790 --> 00:11:37.050
Let's go ahead and save this config file and now let's set things up so that any time we save a change

139
00:11:37.050 --> 00:11:43.590
to one of our front end JavaScript files, Web Pack is watching and it automatically triggers a rebuild

140
00:11:43.590 --> 00:11:45.900
and rebundle to the public folder.

141
00:11:46.380 --> 00:11:53.460
Now, remember, we've already set up an NPM run watch task that will automatically watch for safe changes

142
00:11:53.460 --> 00:11:57.580
to our main backend files and restart our server accordingly.

143
00:11:57.930 --> 00:12:03.780
So let's just tack on our Web pack auto bundling into that same watch task.

144
00:12:04.350 --> 00:12:06.390
Let me show you what I mean right now.

145
00:12:06.390 --> 00:12:12.060
Jump into the file named package DOT, JSON that lives within the root of our project.

146
00:12:13.650 --> 00:12:14.610
Within this file.

147
00:12:14.610 --> 00:12:19.740
Remember, under the scripts area, this is where we created our watch task.

148
00:12:20.040 --> 00:12:27.060
So whenever we run that command of NPM Run watch, then the node MOND package is going to run our application,

149
00:12:27.540 --> 00:12:27.920
remember?

150
00:12:27.990 --> 00:12:34.590
We begin with our database JS file and then it's going to automatically restart on any saved change.

151
00:12:34.980 --> 00:12:37.130
Well, we don't want to prevent that from happening.

152
00:12:37.140 --> 00:12:41.430
We want to keep that only now we want to add on a second action.

153
00:12:41.820 --> 00:12:50.130
So still within these quotes, but right after the DB, let's say, and or ampersand web pack and then

154
00:12:50.610 --> 00:12:53.630
a space and dash, dash watch.

155
00:12:54.300 --> 00:12:54.690
Cool.

156
00:12:54.710 --> 00:13:01.560
So now when we run npm run watch any time we save a change to a file and appropriate action is going

157
00:13:01.560 --> 00:13:03.900
to automatically run in response.

158
00:13:04.200 --> 00:13:07.380
Before we save this file, we do need to make a few adjustments though.

159
00:13:07.770 --> 00:13:12.780
Let's tell our node one task to ignore our front end JavaScript folder.

160
00:13:13.150 --> 00:13:18.480
That way, when we save changes to our browser based JavaScript, we don't bother restarting our node

161
00:13:18.480 --> 00:13:19.000
server.

162
00:13:19.500 --> 00:13:30.240
So right after DB, we can just say dash, dash, ignore and then space and then the front and dash

163
00:13:30.240 --> 00:13:31.370
JS folder.

164
00:13:31.770 --> 00:13:37.950
Let's also tell it to ignore the public folder because it's not like anytime a new bundled up file jumps

165
00:13:37.950 --> 00:13:40.830
into that folder, we actually want to restart our node server.

166
00:13:41.190 --> 00:13:46.470
So dash dash ignore public slash cool.

167
00:13:46.680 --> 00:13:53.730
Only at this point I really need your attention if you are using windows because if you're using a Unix

168
00:13:53.730 --> 00:13:59.370
based operating system, so either Linux or Mac, this code will work perfectly.

169
00:13:59.970 --> 00:14:06.210
But if you're using Windows and the default command line in Windows, you're going to run into a problem

170
00:14:06.210 --> 00:14:08.030
related to the ampersand here.

171
00:14:08.460 --> 00:14:16.800
So in Unix based operating systems, the ampersand lets us run multiple tasks in parallel or concurrently.

172
00:14:16.800 --> 00:14:21.420
At the same time, however, in windows, that's not going to happen.

173
00:14:21.720 --> 00:14:24.000
Windows is just going to begin this task.

174
00:14:24.510 --> 00:14:30.000
And since it's ongoing and sits around watching forever, it's really never going to get to our Web

175
00:14:30.000 --> 00:14:30.930
pack task.

176
00:14:31.560 --> 00:14:35.150
So let me show you how we can get around this in Windows.

177
00:14:35.340 --> 00:14:37.970
This is what I do on my Windows 10 computer.

178
00:14:38.340 --> 00:14:44.550
All we need to do is right before the word node mond just include the word start here.

179
00:14:45.180 --> 00:14:51.430
OK, also right before the Web pack task also include start there as well.

180
00:14:52.230 --> 00:14:56.850
Finally change the single ampersand into a double ampersand.

181
00:14:57.300 --> 00:14:57.830
Cool.

182
00:14:57.870 --> 00:14:59.090
That's all you need to do.

183
00:14:59.100 --> 00:15:01.110
This will work perfectly on windows now.

184
00:15:01.720 --> 00:15:08.890
The only difference is that now on Windows, when you run npm, run watch, it's going to open up to

185
00:15:08.980 --> 00:15:13.460
separate command line Windows one for each of these tasks.

186
00:15:14.080 --> 00:15:16.510
This will not prevent them from working properly.

187
00:15:16.720 --> 00:15:22.470
The only downside is that now when you want to stop your server instead of just pressing control, see

188
00:15:22.480 --> 00:15:27.490
once from within your text editor, you'll need to go to these new command line windows.

189
00:15:27.640 --> 00:15:31.140
There will be two of them and you'll need to press control see in each of them.

190
00:15:31.720 --> 00:15:32.030
Cool.

191
00:15:32.200 --> 00:15:38.620
Now, before I save this file, I do want to point out that this new syntax is only for Windows users.

192
00:15:38.920 --> 00:15:44.500
If you're on Mac or Linux, your code should look like this are original setup.

193
00:15:45.130 --> 00:15:49.030
So we do not need the start commands, nor do we need the double ampersand.

194
00:15:49.030 --> 00:15:50.710
We just want single ampersand.

195
00:15:51.130 --> 00:15:51.490
Cool.

196
00:15:51.790 --> 00:15:57.400
Now, if you're working on a development team with multiple developers and you're all collaborating

197
00:15:57.580 --> 00:16:02.500
and you're working with a shared repository and you've got members on your team from different operating

198
00:16:02.500 --> 00:16:09.550
systems, in that case you would need a platform agnostic way of running several tasks at the same time.

199
00:16:09.910 --> 00:16:13.570
So you wouldn't really need this for the educational purposes of this course.

200
00:16:13.810 --> 00:16:21.060
But if you do find yourself in that situation on a team, I recommend the NPM package named concurrently.

201
00:16:21.610 --> 00:16:25.060
It is indeed platform or operating system agnostic.

202
00:16:25.360 --> 00:16:30.250
But for this course, that would just introduce one more dependency or one more complication.

203
00:16:30.770 --> 00:16:38.530
OK, at this point, let's go ahead and save our package dot JSON file and let's test out our NPM run

204
00:16:38.530 --> 00:16:39.480
watch command.

205
00:16:39.820 --> 00:16:46.030
So in our command line, let's say npm run watch.

206
00:16:49.690 --> 00:16:55.710
Cool to see if our new Web functionality is doing its job, look within your public folder.

207
00:16:56.830 --> 00:17:02.770
You should now see a new file named Main Dash bundled dot jets.

208
00:17:03.370 --> 00:17:08.950
Now within all of our Aegis templates, let's just tell the browser to download this file.

209
00:17:09.490 --> 00:17:15.460
Luckily for us, we set up an include file named Footer so we can just make this change in one file.

210
00:17:15.850 --> 00:17:22.660
So right now, jump into your views folder and then the include subfolder and then jump into footrot.

211
00:17:22.720 --> 00:17:29.940
SJS towards the very bottom of this file, right above the closing body tag.

212
00:17:30.280 --> 00:17:33.940
Let's add a new line and type this out with me.

213
00:17:34.300 --> 00:17:39.480
Opening script tag and a closing script tag on the opening tag.

214
00:17:39.490 --> 00:17:48.550
Let's just give it an attribute of SIRC and set that to equal and then just slash main dash bundled

215
00:17:49.180 --> 00:17:50.080
J.S..

216
00:17:50.350 --> 00:17:50.670
Cool.

217
00:17:50.680 --> 00:17:52.230
Let's go ahead and save this.

218
00:17:52.480 --> 00:18:00.520
And now back in the browser, if I refresh any page in the application, I see an annoying alert pop

219
00:18:00.520 --> 00:18:01.420
up search.

220
00:18:01.420 --> 00:18:04.370
J.S. is successfully being executed.

221
00:18:04.960 --> 00:18:05.560
Perfect.

222
00:18:05.710 --> 00:18:11.120
Now let's refresh our memory of where this code is coming from before we bring this lesson to a close.

223
00:18:11.770 --> 00:18:19.170
So back in our text editor within our front end James folder jumped back into Main Jass.

224
00:18:19.960 --> 00:18:26.470
Remember, I said I would explain this new import syntax that we're using instead of node's require

225
00:18:26.470 --> 00:18:27.030
function?

226
00:18:27.700 --> 00:18:34.840
Well, remember that the Bable tool is converting all of our ultra modern JavaScript code into more

227
00:18:34.840 --> 00:18:40.180
traditional code that will work in a wide range of slightly older Web browsers.

228
00:18:40.510 --> 00:18:47.380
And a relatively modern addition to the JavaScript language is native module imports and exports.

229
00:18:48.040 --> 00:18:54.370
So the require function that we've been using in this course is node specific, whereas this import

230
00:18:54.370 --> 00:18:57.790
syntax is part of the JavaScript language itself.

231
00:18:58.240 --> 00:19:05.410
What's interesting is that in node, even as a version 10, you still cannot use this modern import

232
00:19:05.410 --> 00:19:08.740
syntax without using experimental flags.

233
00:19:09.250 --> 00:19:16.630
So as of today, within our server based code, we're going to continue using require to import in modules

234
00:19:16.630 --> 00:19:23.770
or files, but encode that we know is going to be processed and bundled and transpired by our Web pack

235
00:19:23.770 --> 00:19:24.750
and bable set up.

236
00:19:25.240 --> 00:19:30.610
Well, we are safe to use the latest and greatest JavaScript features and syntax.

237
00:19:31.330 --> 00:19:39.850
This also explains why in our search dogs file, instead of using node's syntax of module exports,

238
00:19:39.850 --> 00:19:42.610
we instead just said export default.

239
00:19:43.130 --> 00:19:49.190
OK, now on a different note, you might be very interested in this word class here.

240
00:19:49.600 --> 00:19:51.030
Well, I've got some good news.

241
00:19:51.250 --> 00:19:54.610
That's exactly what we're going to cover in our next lesson.

242
00:19:54.880 --> 00:19:57.550
So let's keep things rolling and I'll see you then.
