WEBVTT
1
00:00:01.770 --> 00:00:08.520
Hello, everyone, welcome back to the 10 days of JavaScript, here we are in day number nine.

2
00:00:08.850 --> 00:00:16.020
And in this lesson, we are going to learn about five or six different topics that are all important,

3
00:00:16.350 --> 00:00:21.060
but maybe each one didn't deserve its own standalone dedicated lesson.

4
00:00:21.370 --> 00:00:28.870
OK, now, without further ado, let's jump in to the first topic, and that is anonymous functions.

5
00:00:29.310 --> 00:00:31.900
So what in the world is an anonymous function?

6
00:00:32.310 --> 00:00:38.690
Well, throughout this course, usually when we create a function, we give it a name, right.

7
00:00:38.720 --> 00:00:40.290
So we would say function.

8
00:00:40.500 --> 00:00:49.740
And then my cool function, parentheses, curly brackets, as well as the name suggests an anonymous

9
00:00:49.740 --> 00:00:53.060
function would simply be if we got rid of the name.

10
00:00:53.850 --> 00:00:54.150
Right.

11
00:00:54.330 --> 00:01:00.930
So if we just had this now at first glance, you might think, what is the point of this if it doesn't

12
00:01:00.930 --> 00:01:01.920
have a name?

13
00:01:02.130 --> 00:01:06.120
How can we ever call or execute it later on in our code?

14
00:01:06.390 --> 00:01:11.700
Well, let me show you an example of when we could use an anonymous function.

15
00:01:12.120 --> 00:01:15.120
So let's erase this and let's give ourselves a goal.

16
00:01:15.540 --> 00:01:21.300
Let's imagine that we want to set things up so that whenever the user clicks anywhere on the Web page,

17
00:01:21.420 --> 00:01:27.060
so anywhere down here, whenever they click, we want to show an annoying alert pop up message that

18
00:01:27.060 --> 00:01:29.030
says thank you for clicking.

19
00:01:29.430 --> 00:01:34.770
Now, we've already done this in an earlier lesson, but this time I want to show you how we can use

20
00:01:34.770 --> 00:01:36.120
an anonymous function.

21
00:01:36.360 --> 00:01:43.230
So because we are speaking JavaScript in the Web browser environment, we have access to the document

22
00:01:43.230 --> 00:01:49.200
object and we can look inside it and call the ADD event listener method.

23
00:01:49.710 --> 00:01:52.320
And then remember, we give this method to arguments.

24
00:01:52.710 --> 00:01:57.450
The first is the event that we want to look out for in this case click.

25
00:01:57.840 --> 00:02:04.740
And then the second argument is a function that this method will call at the appropriate time.

26
00:02:05.220 --> 00:02:12.090
Now, up until this point in the course, we've always included the name of a function here and then

27
00:02:12.090 --> 00:02:15.240
maybe created that function with the matching name down here.

28
00:02:16.020 --> 00:02:17.760
And that's a great approach.

29
00:02:18.000 --> 00:02:24.180
If you think there's even a one percent chance that you would ever need to call or use that function

30
00:02:24.420 --> 00:02:28.430
somewhere else in your code besides just this line.

31
00:02:28.980 --> 00:02:36.050
But what if we're pretty darn confident that this is the only place where we would need to use the function?

32
00:02:36.540 --> 00:02:42.840
Well, in that case, we can actually just include an anonymous function right here for the second argument.

33
00:02:43.230 --> 00:02:50.100
Or in other words, instead of just the name of a function here, we can actually include the recipe

34
00:02:50.280 --> 00:02:51.630
for the function itself.

35
00:02:52.110 --> 00:02:52.800
So check this out.

36
00:02:52.800 --> 00:03:01.290
We can get rid of B and say function, parentheses, curly brackets, and we could even drop down in

37
00:03:01.290 --> 00:03:03.090
between the curly brackets like normal.

38
00:03:03.720 --> 00:03:07.110
And remember, our goal was to create an alert pop up message.

39
00:03:07.110 --> 00:03:10.710
So alert and have it say thank you for clicking.

40
00:03:11.550 --> 00:03:15.930
OK, now if I come down to the preview part of the web page and click anywhere in here.

41
00:03:17.060 --> 00:03:20.990
Awesome, you can see that that function successfully executed.

42
00:03:22.670 --> 00:03:29.780
Now, again, because this is an anonymous function, it has no name, so we have no way of referencing

43
00:03:29.780 --> 00:03:36.980
it or calling it anywhere else in our code, but that's not a bad thing if we don't need to call it

44
00:03:36.980 --> 00:03:37.850
anywhere else.

45
00:03:38.300 --> 00:03:40.090
OK, now let's change gears.

46
00:03:40.400 --> 00:03:43.270
We've seen anonymous functions in a nutshell.

47
00:03:43.610 --> 00:03:49.540
Now, the next topic I want to talk about in this lesson is aero functions.

48
00:03:49.820 --> 00:03:52.340
So what in the world is an arrow function?

49
00:03:52.790 --> 00:04:00.110
And arrow function is a special type of function that uses an alternate syntax or we could say a cleaner

50
00:04:00.110 --> 00:04:02.510
or more minimalistic syntax.

51
00:04:02.660 --> 00:04:07.310
And it also has a few other key differences from a traditional function like this.

52
00:04:07.700 --> 00:04:11.900
But first, let's start with the syntax of an arrow function.

53
00:04:12.350 --> 00:04:13.120
So check this out.

54
00:04:13.130 --> 00:04:18.080
It's very easy to convert this traditional function into an arrow function.

55
00:04:18.530 --> 00:04:23.990
We begin by removing the word function, but keeping the parentheses right after it.

56
00:04:24.020 --> 00:04:27.140
So literally, let's just get rid of the word function here.

57
00:04:30.200 --> 00:04:36.890
OK, now, in between the parentheses and the curly brackets, we include an arrow symbol, which is

58
00:04:36.890 --> 00:04:41.720
really just an equal sign and then a greater than sine smooshed together.

59
00:04:42.170 --> 00:04:43.520
And that's all we need to do.

60
00:04:43.760 --> 00:04:47.440
So congratulations, you just created your first arrow function.

61
00:04:47.810 --> 00:04:52.420
We can test it out, come down to the preview area and click awesome.

62
00:04:53.690 --> 00:04:59.960
Now, believe it or not, but we can actually make the syntax for an arrow function, even cleaner or

63
00:04:59.960 --> 00:05:01.660
even more minimalistic.

64
00:05:02.030 --> 00:05:05.950
So let's do this inside the curly brackets for our function.

65
00:05:06.230 --> 00:05:09.800
Let's not jump down to a new line like we usually do.

66
00:05:10.250 --> 00:05:14.960
So don't replace my cursor right at the beginning of alert and just hit backspace a few times.

67
00:05:15.860 --> 00:05:21.590
And then down at the beginning of this line, we can backspace to put it all up on a single line and

68
00:05:21.590 --> 00:05:28.850
now with an arrow function, if the body of your function sits on a single line, we actually do not

69
00:05:28.850 --> 00:05:35.270
need the curly brackets surrounding the body so we can get rid of this opening curly bracket here and

70
00:05:35.270 --> 00:05:37.640
get rid of the closing curly bracket right here.

71
00:05:38.960 --> 00:05:43.690
And if we test out our code and click down here, we see that it works just the same.

72
00:05:44.090 --> 00:05:48.020
So an arrow function really lets our code be a bit cleaner.

73
00:05:48.470 --> 00:05:54.680
Now, before we move on to the next topic, there are two more features of the Arrow function that I

74
00:05:54.680 --> 00:05:55.640
want to show to you.

75
00:05:56.060 --> 00:06:01.730
The first feature is that when the body of our function sits on a single line like this, the arrow

76
00:06:01.730 --> 00:06:06.220
function is automatically going to return whatever we include here.

77
00:06:06.590 --> 00:06:12.290
Now, in this case, we don't need to return the alert message, but in the case where you do want to

78
00:06:12.290 --> 00:06:19.070
return a value, this can save us even further typing and let our code be even more minimalistic.

79
00:06:19.520 --> 00:06:20.620
Let me show you what I mean.

80
00:06:20.630 --> 00:06:22.220
So let's get rid of this example.

81
00:06:23.150 --> 00:06:30.440
And let's imagine we have an array, let's call it my numbers, and let's just set the array to hold

82
00:06:30.440 --> 00:06:32.510
a few values like ten.

83
00:06:33.380 --> 00:06:36.240
Five hundred and two thousand.

84
00:06:36.850 --> 00:06:44.630
OK, now let's imagine we want to use the map method to create a brand new array where each item from

85
00:06:44.630 --> 00:06:50.370
this array has been doubled so we could create a new variable to store the new array.

86
00:06:50.780 --> 00:06:57.080
We could call it doubled numbers and set it to equal the original array my numbers and then call the

87
00:06:57.080 --> 00:06:58.220
map method.

88
00:06:58.730 --> 00:07:00.380
And now practice makes perfect.

89
00:07:00.390 --> 00:07:02.720
So let's do this within these parentheses.

90
00:07:02.840 --> 00:07:09.350
Let's first include an anonymous function that's just a traditional function and then we can practice

91
00:07:09.350 --> 00:07:12.160
converting it into an arrow function.

92
00:07:12.680 --> 00:07:18.260
So for an anonymous function, I would spell out the word function and in parentheses, curly brackets.

93
00:07:18.920 --> 00:07:24.500
We know that each time the method calls our function, it's going to pass into it whichever item from

94
00:07:24.500 --> 00:07:25.880
the array it is looped to.

95
00:07:26.240 --> 00:07:32.060
So within our function parentheses, we want to include a parameter to work with the current item and

96
00:07:32.060 --> 00:07:38.780
then in the body of our function, we would just return that number or that parameter times two to double

97
00:07:38.780 --> 00:07:38.900
it.

98
00:07:39.290 --> 00:07:40.520
So now let's test this.

99
00:07:40.520 --> 00:07:44.030
Outlet's log out to the console, our new array.

100
00:07:44.030 --> 00:07:46.790
So console dialog doubled numbers.

101
00:07:47.600 --> 00:07:53.630
And if we checked the console cool, we see that the numbers from the original array were successfully

102
00:07:53.630 --> 00:07:54.140
doubled.

103
00:07:54.680 --> 00:07:58.090
Now let's make it our goal to turn this into an arrow function.

104
00:07:58.460 --> 00:08:03.890
So first we just get rid of the word function, but we keep the parentheses with our parameter.

105
00:08:04.430 --> 00:08:10.760
Then in between the parentheses and the curly brackets, we include an arrow symbol which is just equal

106
00:08:10.760 --> 00:08:16.280
sine and then greater than OK, and then let's adjust it so that the body of the function sits on the

107
00:08:16.280 --> 00:08:17.090
same line.

108
00:08:17.780 --> 00:08:20.960
Backspace here and backspace down here.

109
00:08:21.890 --> 00:08:24.950
If it sits on a single line, we don't need the curly brackets.

110
00:08:26.370 --> 00:08:32.880
Also, if it sits on a single line, we do not need to include the word return here, return is just

111
00:08:32.880 --> 00:08:36.350
sort of implied in this sentence so he can actually get rid of that.

112
00:08:36.840 --> 00:08:38.950
And another tip to clean up our code.

113
00:08:39.240 --> 00:08:42.360
We do not need the parentheses around our parameter.

114
00:08:42.360 --> 00:08:50.040
If it's just one single parameter, we only need the parentheses if we have zero parameters or if we

115
00:08:50.040 --> 00:08:51.900
had multiple parameters.

116
00:08:52.200 --> 00:08:58.060
If you just have one, though, we can actually get rid of the surrounding parentheses like this.

117
00:08:58.830 --> 00:09:04.320
Now, at first, this syntax looks really weird because it's not what we've practiced throughout the

118
00:09:04.320 --> 00:09:04.850
course.

119
00:09:05.280 --> 00:09:11.760
However, as we can see, it has the potential to really clean up our code instead of having a separate

120
00:09:11.760 --> 00:09:17.430
function down here with the word function and a function name in parentheses, in curly brackets, in

121
00:09:17.430 --> 00:09:21.350
the word return, we literally just have these few characters.

122
00:09:21.930 --> 00:09:22.250
Cool.

123
00:09:22.440 --> 00:09:28.140
Now, there's just one more feature of the Arrow function that I want to show you before we move on

124
00:09:28.140 --> 00:09:30.090
to the next topic in the lesson.

125
00:09:30.540 --> 00:09:33.510
And you do not need to type this out with me.

126
00:09:33.630 --> 00:09:34.640
You can just watch.

127
00:09:35.130 --> 00:09:39.690
So I'm going to delete what we have here and actually just paste in my clipboard.

128
00:09:39.960 --> 00:09:43.550
And this example should look familiar from our previous lesson.

129
00:09:43.860 --> 00:09:50.520
Remember, this is the code we had when we were learning about context and the this keyword.

130
00:09:50.910 --> 00:09:58.020
And right now I want us to focus on this inner function because remember, in this context, the this

131
00:09:58.020 --> 00:10:03.600
keyword is pointing towards the global object instead of the John object.

132
00:10:03.870 --> 00:10:06.750
And this behavior of JavaScript can be confusing.

133
00:10:06.750 --> 00:10:13.020
It can seem unintuitive, but that's just the way it is when we call a function that doesn't belong

134
00:10:13.020 --> 00:10:14.160
to an object.

135
00:10:14.430 --> 00:10:20.460
Or I should say when we call a function that isn't a method, JavaScript considers the object that is

136
00:10:20.460 --> 00:10:25.350
calling or executing that function to be the environments global object.

137
00:10:25.630 --> 00:10:26.670
So that's just review.

138
00:10:26.670 --> 00:10:28.290
We learned that in the previous lesson.

139
00:10:28.710 --> 00:10:36.210
Now the question is, what if within this function we really, really wanted that this key word to point

140
00:10:36.210 --> 00:10:37.160
towards John?

141
00:10:37.620 --> 00:10:39.450
Well, we have a few different options.

142
00:10:39.660 --> 00:10:43.710
We could use the call method that we learned about in our previous lesson.

143
00:10:44.160 --> 00:10:48.920
But remember, the topic at hand right now is erro functions.

144
00:10:49.230 --> 00:10:55.830
So the final feature of Arrow functions that I want to talk about is that they do not have their own

145
00:10:55.830 --> 00:10:57.510
new this keyword.

146
00:10:57.990 --> 00:11:03.150
So if for whatever reason, we really wanted to break our code up into an inner function like this and

147
00:11:03.150 --> 00:11:09.330
we really wanted the this keyword to still point towards the John object, we could just use an arrow

148
00:11:09.330 --> 00:11:09.860
function.

149
00:11:10.320 --> 00:11:13.710
So I'm going to get rid of this entire function declaration right here.

150
00:11:14.040 --> 00:11:20.130
I'm going to keep the call to the function, but I will get rid of the function declaration and we instead

151
00:11:20.130 --> 00:11:29.640
could create a variable, call it, I'm a function, not a method, and set that variable to equal an

152
00:11:29.640 --> 00:11:30.630
arrow function.

153
00:11:32.100 --> 00:11:37.970
And just as a test, I will log out to the console, the this keyword inside of this function.

154
00:11:38.590 --> 00:11:41.070
We're still calling it just like a regular old function.

155
00:11:41.370 --> 00:11:42.870
But if I check the console.

156
00:11:44.340 --> 00:11:46.210
Right above, John Doe is driving a car.

157
00:11:46.230 --> 00:11:52.200
We see that the this keyword is pointing towards our John object instead of the global object.

158
00:11:52.470 --> 00:11:53.100
Awesome.

159
00:11:53.550 --> 00:12:01.200
The reason this happens is because Arrow functions do not have their own knew this key word the way

160
00:12:01.200 --> 00:12:03.750
that a regular traditional function does.

161
00:12:04.170 --> 00:12:10.350
And arrow functions use the same variable lookup strategy that we learned about in the previous lesson

162
00:12:10.350 --> 00:12:11.090
with scope.

163
00:12:11.550 --> 00:12:18.330
So JavaScript is going to say, OK, does this keyword exist within this current local scope or within

164
00:12:18.330 --> 00:12:19.620
the body of this function?

165
00:12:20.130 --> 00:12:21.370
No, it doesn't.

166
00:12:21.600 --> 00:12:28.620
So I'm going to look one level up or one level outside of this, which would be the block for our drive

167
00:12:28.620 --> 00:12:29.460
car method.

168
00:12:29.910 --> 00:12:30.240
Right.

169
00:12:30.240 --> 00:12:36.060
And we know that inside that, like where the cursor is right now, we know that the this keyword does

170
00:12:36.060 --> 00:12:42.470
exist and it's pointing towards exactly what we would expect it to point towards the John object.

171
00:12:42.960 --> 00:12:47.820
So long story short, I know that was a bit of a ramble, but this can be a really confusing topic.

172
00:12:47.820 --> 00:12:50.020
So I wanted to go over it in slow motion.

173
00:12:50.400 --> 00:12:52.560
Long story short, a simpler way of wording.

174
00:12:52.560 --> 00:12:59.910
This is that arrow functions do not change the value of the this keyword, whatever the this keyword

175
00:12:59.910 --> 00:13:00.900
was pointing towards.

176
00:13:00.900 --> 00:13:05.910
In your current context, that's still what it's going to be pointing towards, even inside of your

177
00:13:05.910 --> 00:13:06.450
function.

178
00:13:06.870 --> 00:13:10.800
And this makes Arrow functions a really nice tool to have up our sleeve.

179
00:13:11.310 --> 00:13:14.220
OK, so that's Arrow functions in a nutshell.

180
00:13:14.550 --> 00:13:21.030
Now let's move on to the next topic in this lesson, which is function hoisting.

181
00:13:21.390 --> 00:13:23.010
Let me delete all of this code.

182
00:13:23.010 --> 00:13:26.430
And what in the world is function hoisting?

183
00:13:26.760 --> 00:13:28.230
Well, let me show you an example.
