WEBVTT
1
00:00:00.330 --> 00:00:07.710
However, we just added asynchronous actions to this validate function, so we need to be very careful

2
00:00:07.860 --> 00:00:13.770
to make sure that it actually completes before JavaScript will move on to this action.

3
00:00:14.190 --> 00:00:19.980
Right before we check to see if there are errors or not, we better first complete running all of our

4
00:00:19.980 --> 00:00:26.160
validation checks, including those asynchronous calls to the database to check for the uniqueness of

5
00:00:26.160 --> 00:00:27.230
username and email.

6
00:00:27.570 --> 00:00:35.160
So to accomplish that, let's just go adjust our validate function to return a promise and then we can

7
00:00:35.160 --> 00:00:38.220
await that promise down here in the register function.

8
00:00:38.640 --> 00:00:39.750
Let me show you what I mean.

9
00:00:39.750 --> 00:00:42.690
Let's scroll back up to our validate function.

10
00:00:43.140 --> 00:00:48.560
And in order to wrap this into a promise, let's temporarily cut this into our clipboard.

11
00:00:48.930 --> 00:00:53.120
So I want you to begin selecting right after the equals sign.

12
00:00:53.610 --> 00:01:01.280
So begin selecting right before the word async and select all the way until the very end of that function.

13
00:01:01.890 --> 00:01:08.250
So including the closing curly bracket for that overall function, cut that entire thing into your clipboard.

14
00:01:08.880 --> 00:01:13.920
So now all that we're left with is user dot, prototype, dot, validate equals.

15
00:01:14.370 --> 00:01:21.750
And now let's set that to equal an anonymous functions of function, parentheses, curly brackets within

16
00:01:21.750 --> 00:01:23.270
the body of this function.

17
00:01:23.280 --> 00:01:25.580
Let's return a new promise.

18
00:01:25.980 --> 00:01:30.270
So return new uppercase promise.

19
00:01:30.720 --> 00:01:35.790
And then within these parentheses, you just need to give a promise, a function with two parameters,

20
00:01:35.790 --> 00:01:36.090
right?

21
00:01:36.300 --> 00:01:38.130
Resolve and reject.

22
00:01:38.490 --> 00:01:42.270
So actually within these parentheses we can just paste in our clipboard.

23
00:01:44.260 --> 00:01:48.470
Now, it should look something like this within the parentheses for that function.

24
00:01:48.490 --> 00:01:56.410
Let's give it resolve and reject parameters and then let's also convert it into an arrow function so

25
00:01:56.410 --> 00:02:00.100
that this keyword still points towards our overall object.

26
00:02:00.460 --> 00:02:03.190
To do that, we can just get rid of the word function here.

27
00:02:04.990 --> 00:02:09.670
And then right after the parentheses with our parameters, we can just include the squished together

28
00:02:10.000 --> 00:02:12.280
equal sign, greater than arrow symbol.

29
00:02:12.880 --> 00:02:13.390
All right.

30
00:02:13.390 --> 00:02:16.390
Now to complete this promise, let's scroll down.

31
00:02:17.480 --> 00:02:24.890
And after our email check to see if the email has already been taken right after the closing of that

32
00:02:24.890 --> 00:02:33.890
if block, so right here, let's just call resolve to signify that this operation or promise has actually

33
00:02:33.890 --> 00:02:34.610
completed.

34
00:02:35.150 --> 00:02:39.980
OK, now let's go leverage this validate promis down in our register function.

35
00:02:40.490 --> 00:02:42.020
So back down and register.

36
00:02:42.620 --> 00:02:45.910
Now, this validate function is going to return a promise.

37
00:02:46.220 --> 00:02:49.850
So before a promise you can just include the word awaked.

38
00:02:50.720 --> 00:02:56.540
So now all of our validation checks will actually complete before this code runs.

39
00:02:57.170 --> 00:03:01.540
Now again, you can only use the await feature within an asynchronous function.

40
00:03:01.820 --> 00:03:06.730
So right before the word function here, let's just add a sink, OK?

41
00:03:06.740 --> 00:03:10.950
And now we just have one final issue to hurdle before this is complete.

42
00:03:11.480 --> 00:03:17.930
Now that this is an asynchronous function, we need to pay attention to where and how we are calling

43
00:03:17.930 --> 00:03:22.160
it this register function is what our user controller is calling.

44
00:03:22.700 --> 00:03:29.630
So back in our user controller file, if we find the line that begins with exports, dot register,

45
00:03:30.350 --> 00:03:30.680
right.

46
00:03:30.710 --> 00:03:34.370
This is where we are calling the user register method.

47
00:03:34.640 --> 00:03:40.910
And now that that's an asynchronous function, we need to make sure that we give it a chance to actually

48
00:03:40.910 --> 00:03:44.090
complete before this next operation would begin.

49
00:03:44.780 --> 00:03:45.960
So hang in there with me.

50
00:03:45.980 --> 00:03:46.900
We're almost done.

51
00:03:47.210 --> 00:03:53.360
We just want to adjust our register function so that it returns a promise and then we can await that

52
00:03:53.360 --> 00:03:55.280
promise here within our controller.

53
00:03:55.700 --> 00:03:58.100
This will not be as overwhelming as it might sound.

54
00:03:58.370 --> 00:04:04.570
So let's jump back into our user model and down towards the bottom where we see USRAP prototype dot

55
00:04:04.580 --> 00:04:05.260
register.

56
00:04:05.540 --> 00:04:08.400
Let's just wrap this to live within a promise.

57
00:04:08.780 --> 00:04:11.720
So just begin selecting right before the word async.

58
00:04:12.440 --> 00:04:15.340
Select all the way down until the closing curly bracket.

59
00:04:15.800 --> 00:04:17.570
Let's cut that into our clipboard.

60
00:04:18.690 --> 00:04:22.370
OK, so now it's just user dot prototype dot register equals.

61
00:04:22.670 --> 00:04:27.140
Let's set it to an anonymous function within this function.

62
00:04:27.140 --> 00:04:32.300
We want to return a promise, so return new promise.

63
00:04:32.810 --> 00:04:36.770
Within these parentheses we can just paste back in that function that's in our clipboard.

64
00:04:37.940 --> 00:04:43.580
OK, within these functions parentheses, we want to include the parameters, resolve and reject.

65
00:04:44.060 --> 00:04:48.620
And we also want this to be an arrow function so that it doesn't change that this key word.

66
00:04:49.160 --> 00:04:50.930
So we just get rid of the word function.

67
00:04:51.650 --> 00:04:54.980
And then right after these parentheses, add the arrow symbol.

68
00:04:55.370 --> 00:05:02.220
Now, to complete this promise, we just need to call either resolve or reject at the right time.

69
00:05:02.810 --> 00:05:09.200
So down here, when we say if there are no errors, then actually register the user.

70
00:05:09.710 --> 00:05:13.640
Well, right after that closing curly bracket for the if block.

71
00:05:14.000 --> 00:05:18.950
So right here, let's also add and else block so else curly brackets.

72
00:05:19.460 --> 00:05:23.000
OK, now if this code runs, that means things were successful.

73
00:05:23.210 --> 00:05:28.730
So right below this line where we work with the database, let's just call resolve and actually let's

74
00:05:28.730 --> 00:05:34.100
make sure that this database action completes before we call resolve so we can just include the word

75
00:05:34.140 --> 00:05:35.210
await here.

76
00:05:35.750 --> 00:05:36.020
Right.

77
00:05:36.020 --> 00:05:39.110
Because we know that Mongo DB methods return a promise.

78
00:05:39.590 --> 00:05:44.950
OK, but if this else block runs, that means that there were errors.

79
00:05:45.290 --> 00:05:51.800
So within the else block, we can just call reject and why don't we go ahead and reject with our array

80
00:05:51.800 --> 00:05:52.570
of errors.

81
00:05:52.580 --> 00:05:56.990
So within these reject parentheses, we can just say this dot errors.

82
00:05:57.680 --> 00:06:02.060
OK, so we've successfully set up our register function to return a promise.

83
00:06:02.420 --> 00:06:04.070
Let's go ahead and save this.

84
00:06:04.340 --> 00:06:10.760
And now the final step is to just jump back into user controller and leverage that promise within our

85
00:06:10.760 --> 00:06:12.620
controller's register function.

86
00:06:12.890 --> 00:06:16.040
We're actually going to get rid of this if else block.

87
00:06:16.550 --> 00:06:22.670
But before we delete it, in order to save ourselves a lot of typing, I want us to cut this into our

88
00:06:22.670 --> 00:06:23.390
clipboard.

89
00:06:24.080 --> 00:06:31.370
So I want you to begin selecting inside the block and then select down to this closing curly bracket

90
00:06:31.370 --> 00:06:37.430
in parentheses for request session save with those six lines of code selected.

91
00:06:37.430 --> 00:06:40.220
Let's cut into our clipboard, OK?

92
00:06:40.280 --> 00:06:43.430
And now let's just delete this entire if else block.

93
00:06:46.530 --> 00:06:51.690
All right, so this is all that we have left, if you need to pause the video to set up your register

94
00:06:51.690 --> 00:06:53.860
function to look like this, that's OK.

95
00:06:54.210 --> 00:07:01.580
Now, we know that our user register method is going to return a promise so we could use the await feature.

96
00:07:01.950 --> 00:07:08.650
But in this case, I actually think it feels cleaner or more intuitive to use the DOT than catch approach.

97
00:07:09.120 --> 00:07:10.820
So this is going to return a promise.

98
00:07:10.830 --> 00:07:17.400
So right after it we can say DOT then and after that we can say dot catch.

99
00:07:18.090 --> 00:07:22.290
If our promise is successful and resolves, then we'll take care of it.

100
00:07:22.560 --> 00:07:25.450
If it rejects catch, we'll take care of it.

101
00:07:25.860 --> 00:07:29.850
So within these parentheses, let's give both then and catch functions.

102
00:07:30.480 --> 00:07:31.920
Let's use arrow functions.

103
00:07:31.920 --> 00:07:36.710
So set of parentheses, the arrow symbol, curly brackets dropdown.

104
00:07:37.140 --> 00:07:43.300
So do the same thing within catch parentheses, arrow symbol, curly brackets.

105
00:07:44.070 --> 00:07:47.040
All right, now the catch is going to run if our promise rejects.

106
00:07:47.040 --> 00:07:50.280
So within this catch function we can just paste in our clipboard.

107
00:07:52.100 --> 00:07:56.810
Within these parentheses for our catch function, let's actually include a parameter, let's call it

108
00:07:56.810 --> 00:08:04.100
regg errors, and this will be the value that the promise rejects with let's reference that instead

109
00:08:04.100 --> 00:08:05.690
of users errors here.

110
00:08:06.200 --> 00:08:09.940
Just so this way, our controller doesn't have to be aware of the data structure.

111
00:08:10.280 --> 00:08:16.250
It's only calling the promise and letting the model deal with all of the data and the variable names,

112
00:08:16.460 --> 00:08:17.650
so on and so forth.

113
00:08:18.110 --> 00:08:23.450
So on this line, I would change users errors to just regg errors.

114
00:08:24.500 --> 00:08:28.470
And now we just need to say what we want to do if the registration is successful.

115
00:08:29.030 --> 00:08:34.790
Now, instead of sending users to an awkward intermediate screen that just says congrats, why don't

116
00:08:34.790 --> 00:08:40.910
we instead just redirect them to the home page, but update their session data so that they're actually

117
00:08:40.910 --> 00:08:41.590
logged in.

118
00:08:42.080 --> 00:08:46.060
So within our then function, let's begin working with session data.

119
00:08:46.070 --> 00:08:50.210
So request session dot user, right.

120
00:08:50.210 --> 00:08:51.860
To actually log them in.

121
00:08:51.860 --> 00:08:57.530
We'd want to create a user property on the session and let's just set that to equal an object.

122
00:08:57.830 --> 00:09:01.280
And for now, all we really need is to store their user name.

123
00:09:01.310 --> 00:09:07.820
So we'll give it a property of username and set that to whatever username they just successfully registered

124
00:09:07.820 --> 00:09:08.120
with.

125
00:09:08.720 --> 00:09:11.690
So lowercase user data dot username.

126
00:09:12.320 --> 00:09:17.360
In the future we can set things up so that our controller doesn't even need to be aware of this data

127
00:09:17.360 --> 00:09:22.330
structure and instead our promise would resolve back with the necessary data.

128
00:09:22.580 --> 00:09:25.410
But for now, this will do the job OK.

129
00:09:25.610 --> 00:09:31.370
After we've set this session data, then we just want to redirect the user back to the home page URL

130
00:09:31.940 --> 00:09:33.080
to save a bit of typing.

131
00:09:33.080 --> 00:09:39.560
We can just recycle these three lines of code that will manually save the session data and then once

132
00:09:39.560 --> 00:09:42.350
that's actually completed, perform the redirect.

133
00:09:42.740 --> 00:09:48.620
So let's just grab these three lines of code, copy them then R then function after we update the session.

134
00:09:48.620 --> 00:09:51.410
Data dropdown paste in your clipboard.

135
00:09:51.980 --> 00:09:52.430
Cool.

136
00:09:52.440 --> 00:09:54.320
Here it is all on the screen at once.

137
00:09:54.320 --> 00:09:57.290
If you need to pause the video to catch up, that's OK.

138
00:09:57.740 --> 00:10:00.290
Let's go ahead and save this and test it out.

139
00:10:01.570 --> 00:10:07.510
So back in the browser, you can always just refresh to get rid of the previous flash validation message.

140
00:10:09.670 --> 00:10:15.850
OK, first, let's test out the unique username and email features, so if I try to register with the

141
00:10:15.850 --> 00:10:22.270
name Brad and Brad at Brad Dotcom, the system should recognize that those are already taken.

142
00:10:23.140 --> 00:10:23.740
Awesome.

143
00:10:23.890 --> 00:10:25.570
That username is already taken.

144
00:10:25.690 --> 00:10:27.790
That email is already being used.

145
00:10:28.390 --> 00:10:36.790
But if I choose a unique username of puppy and my email is puppy puppy dotcom and I choose a valid password

146
00:10:37.420 --> 00:10:38.860
as soon as I click to submit.

147
00:10:42.010 --> 00:10:47.100
Awesome, you can see it redirects me to the homepage, you URL, and thanks to that session data,

148
00:10:47.260 --> 00:10:52.080
it recognizes me as actually and successfully logged in.

149
00:10:52.480 --> 00:10:53.380
Hello puppy.

150
00:10:53.410 --> 00:10:54.540
Your feed is empty.

151
00:10:55.180 --> 00:10:57.550
That's going to bring this lesson to a close.

152
00:10:57.550 --> 00:11:04.240
But you might have noticed in the top right menu that it shows a little avatar or profile photo.

153
00:11:04.630 --> 00:11:11.050
But so far it doesn't matter if I'm logged in as the Brad user account or the cat user account or even

154
00:11:11.050 --> 00:11:13.000
now the puppy user account.

155
00:11:13.390 --> 00:11:15.730
That Avatar is always the same image.

156
00:11:16.220 --> 00:11:21.060
That's because it's hard coded to this placeholder image for the time being.

157
00:11:21.460 --> 00:11:28.570
But in our very next lesson, we're going to learn how to pull in a relevant image from the gravitas

158
00:11:28.570 --> 00:11:32.800
service based on the current logged in users email address.

159
00:11:33.220 --> 00:11:39.430
Not only should this be a lot of fun to set up, but what's cool is it will also be our final lesson

160
00:11:39.610 --> 00:11:47.320
before we change topics from user accounts and sessions and move on to letting users actually create

161
00:11:47.320 --> 00:11:48.090
posts.

162
00:11:48.730 --> 00:11:55.060
So let's take care of this profile photo and then we will start making a lot of progress very quickly

163
00:11:55.270 --> 00:11:56.290
in this course.

164
00:11:56.710 --> 00:12:00.940
Let's keep our momentum rolling and I will see you in the next lesson.
