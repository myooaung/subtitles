WEBVTT
1
00:00:01.680 --> 00:00:08.360
Hello, everyone, welcome back to the 10 days of JavaScript, here we are in day number four.

2
00:00:08.370 --> 00:00:12.750
And in this lesson, we are going to learn about a raise.

3
00:00:13.290 --> 00:00:15.780
So what in the world is an array?

4
00:00:16.350 --> 00:00:21.690
Well, let's ask ourselves in the English language, how would we use the word array?

5
00:00:22.230 --> 00:00:29.880
Well, for example, a car dealership might say that they have cars available in a wide array of colors,

6
00:00:30.390 --> 00:00:33.610
and that just means they have a lot of available colors.

7
00:00:34.110 --> 00:00:37.700
So when we hear the word array, just think of a collection.

8
00:00:38.100 --> 00:00:44.040
It doesn't matter what the collection is of just that there's a collection made up of multiple items.

9
00:00:44.730 --> 00:00:46.350
That's enough of an introduction.

10
00:00:46.650 --> 00:00:52.980
Now, let's jump right into the code in the action and have you roll up your sleeves and create your

11
00:00:52.980 --> 00:00:55.960
first array with JavaScript code.

12
00:00:56.460 --> 00:00:58.800
So go ahead and open up code pen again.

13
00:00:59.190 --> 00:01:04.160
You can create a new pen or just use the same pen from the previous lesson if you still have it open.

14
00:01:04.800 --> 00:01:10.100
So in a previous lesson, we learned how to store a single value like this.

15
00:01:10.590 --> 00:01:15.890
Let my favorite number equal seven.

16
00:01:16.680 --> 00:01:24.620
However, what if we wanted to store multiple numbers so plural a collection of numbers?

17
00:01:25.110 --> 00:01:27.360
Well, we could do this on a new line.

18
00:01:27.360 --> 00:01:32.700
I would say let my favorite numbers equal.

19
00:01:33.240 --> 00:01:34.970
The variable name doesn't really matter.

20
00:01:34.980 --> 00:01:40.980
You could make anything up, but let's set it to equal square brackets.

21
00:01:41.550 --> 00:01:46.230
If you're not familiar with these characters, it's directly to the right of the PECKY.

22
00:01:46.590 --> 00:01:52.140
So it's the same key as the curly bracket key, except this time we do not hold down shift.

23
00:01:52.680 --> 00:01:59.730
So in JavaScript, a pair of square brackets like this is how you create an array inside the square

24
00:01:59.730 --> 00:02:00.360
brackets.

25
00:02:00.370 --> 00:02:02.850
We can include multiple values.

26
00:02:03.330 --> 00:02:10.410
So the number nine and then comma and I can include another value, maybe two comma, a comma three

27
00:02:10.410 --> 00:02:11.460
comma, seven comma.

28
00:02:11.460 --> 00:02:15.780
For the idea is that an array is a collection.

29
00:02:16.410 --> 00:02:16.670
Right.

30
00:02:16.730 --> 00:02:25.230
So now this variable, my favorite numbers is storing a collection of all of these numbers in memory

31
00:02:25.620 --> 00:02:28.250
and arrays are not limited to just numbers.

32
00:02:28.440 --> 00:02:36.420
So on a new line, we could say let my words equal square brackets for an array and then we could say

33
00:02:36.420 --> 00:02:41.010
read comma, orange, comma, yellow.

34
00:02:42.120 --> 00:02:45.920
OK, so this array is a collection of strings of text.

35
00:02:46.710 --> 00:02:54.350
This arrays a collection of numbers, or we could even create an array that is a collection of objects.

36
00:02:55.380 --> 00:03:02.040
So on a new line, we could say let my pets equal an array.

37
00:03:02.050 --> 00:03:10.080
So square brackets and then instead of including a simple number or a string of text within the empty

38
00:03:10.080 --> 00:03:13.500
pair of square brackets, let's include an object.

39
00:03:14.040 --> 00:03:19.620
So this pair of curly brackets could represent a pet and then we could include another pet by just saying

40
00:03:19.620 --> 00:03:22.530
comma and include another object.

41
00:03:22.960 --> 00:03:26.490
OK, and then just as a quick example, we could build out these objects.

42
00:03:26.760 --> 00:03:32.640
So within the first pair of curly brackets, our first object could be a cat and we could give it a

43
00:03:32.640 --> 00:03:33.960
property of name.

44
00:03:34.320 --> 00:03:43.230
So name calling and give it a value of miaows a lot after the quotes for meows a lot we could say comma

45
00:03:43.230 --> 00:03:50.280
and include another property species colon and maybe give it a value of cat.

46
00:03:50.970 --> 00:03:51.270
Right.

47
00:03:51.280 --> 00:03:58.710
So we practiced this object syntax in our previous lesson from this curly bracket to this curly bracket

48
00:03:58.710 --> 00:04:02.700
represents an independent entity or an object.

49
00:04:02.700 --> 00:04:05.700
In this case, a cat named Meow is a lot.

50
00:04:06.270 --> 00:04:08.640
OK, so this is the first pet in the array.

51
00:04:09.060 --> 00:04:14.940
Then in our second pet within these curly brackets, we could create an object name.

52
00:04:15.840 --> 00:04:17.070
Let's have it be a dog.

53
00:04:17.070 --> 00:04:19.170
So let's give it a name of barks a lot.

54
00:04:21.600 --> 00:04:28.260
After the quotes, comma, because we want another property within this object, Ensay species, Colen

55
00:04:28.830 --> 00:04:31.420
dog, you get the idea.

56
00:04:32.010 --> 00:04:38.280
OK, now let's ask the really important question that you've probably been screaming at your screen

57
00:04:38.280 --> 00:04:39.900
for the last four and a half minutes.

58
00:04:40.380 --> 00:04:44.350
And that is why why would we do this?

59
00:04:44.640 --> 00:04:48.060
Why would we want to create collections of values like this?

60
00:04:48.630 --> 00:04:54.810
Well, the answer is because collections like these, especially collections of objects like this,

61
00:04:55.380 --> 00:04:59.670
this is really no different from how most apps or websites work.

62
00:05:00.270 --> 00:05:06.630
For example, Facebook is really just an array of post objects that you scroll through.

63
00:05:07.260 --> 00:05:14.310
Twitter is really just an array of tweet objects that you scroll through or your email inbox is really

64
00:05:14.310 --> 00:05:17.970
just an array of email objects that you scroll through.

65
00:05:18.630 --> 00:05:25.620
So we had an array of pet objects, but imagine if it was your email inbox instead of name.

66
00:05:25.650 --> 00:05:31.770
Maybe this property would be from and it would have the from email address and then instead of species,

67
00:05:32.040 --> 00:05:37.740
maybe this would be too and then it would have the two email address and then maybe there would be another

68
00:05:37.740 --> 00:05:42.790
property named Body and that would contain the actual email message itself.

69
00:05:43.290 --> 00:05:49.160
The point that I'm trying to make here is that a lot of programming is really just working with arrays.

70
00:05:49.620 --> 00:05:56.040
For example, if you were on Facebook and you posted or created a new post, you're really just adding

71
00:05:56.040 --> 00:05:59.010
a new item to the array of posts.

72
00:05:59.520 --> 00:06:06.390
Or if you were in your email inbox and you deleted an email, you're really just removing an item from

73
00:06:06.390 --> 00:06:06.960
an array.

74
00:06:07.530 --> 00:06:14.820
So right now, why don't we practice adding a new item to one of our existing arrays and also we can

75
00:06:14.820 --> 00:06:18.700
practice removing an item from one of our arrays.

76
00:06:19.050 --> 00:06:20.710
Let's start with adding an item.

77
00:06:21.120 --> 00:06:29.130
So imagine down here we want to write a new line of code that maybe adds the word green to our existing

78
00:06:29.130 --> 00:06:30.590
my words array.

79
00:06:30.960 --> 00:06:31.260
Right.

80
00:06:31.290 --> 00:06:35.900
So as of this moment, the array contains the words red, orange and yellow.

81
00:06:36.240 --> 00:06:42.750
So down here, how can we write a bit of code to programmatically add the word green onto the end of

82
00:06:42.750 --> 00:06:43.530
this collection?

83
00:06:44.040 --> 00:06:46.770
Well, let's begin by working with this variable name.

84
00:06:46.770 --> 00:06:52.500
So it's my words and then a dot to look inside it.

85
00:06:52.510 --> 00:06:59.010
And now, right now, you might be thinking to yourself why a dot isn't a dot or period how we look

86
00:06:59.010 --> 00:07:00.270
inside an object.

87
00:07:00.780 --> 00:07:02.430
And the answer is yes, it is.

88
00:07:02.850 --> 00:07:07.260
An array is actually just a special type of object.

89
00:07:07.680 --> 00:07:13.770
It's not exactly the same type of object as we learned about in our previous lesson, but it's a special

90
00:07:13.770 --> 00:07:18.450
type of object that has access to its own abilities or methods.

91
00:07:18.810 --> 00:07:23.580
And these are abilities and methods that we do not need to add or create ourselves.

92
00:07:23.850 --> 00:07:28.590
But rather these are abilities that the array just has out of the box.

93
00:07:28.840 --> 00:07:32.340
They are provided by the JavaScript language itself.

94
00:07:32.850 --> 00:07:38.700
So, for example, all arrays have access to a method named push.

95
00:07:40.020 --> 00:07:43.380
So we can say my words dot push.

96
00:07:43.590 --> 00:07:51.150
So we are calling this function or method named push, and this is how we can add an item onto the end

97
00:07:51.150 --> 00:07:52.420
of an existing array.

98
00:07:52.920 --> 00:07:59.070
So within the parentheses for this method or function, we can just include an argument of green.

99
00:07:59.820 --> 00:08:02.070
OK, and now how can we test this out?

100
00:08:02.220 --> 00:08:05.580
How can we make sure that the array was actually updated?

101
00:08:06.000 --> 00:08:11.970
Well, in previous lessons, we used the alert annoying pop up to try and test something out.

102
00:08:12.210 --> 00:08:15.500
But now I want to show you something a bit easier to use.

103
00:08:15.990 --> 00:08:22.950
So our JavaScript environment in this case, the Web browser has an object named console and we can

104
00:08:22.950 --> 00:08:31.770
say console, dot, log and anything we include within these parentheses will get output or logged to

105
00:08:31.770 --> 00:08:32.480
the console.

106
00:08:32.880 --> 00:08:35.190
So this is a great way to test your code.

107
00:08:35.370 --> 00:08:40.830
It lets you see your values visually so you can make sure that it's working the way that you expect.

108
00:08:41.110 --> 00:08:47.950
So why don't we log the my words array out to the console so we can see what it contains.

109
00:08:48.390 --> 00:08:55.050
So console dot, log in the parentheses, just say my words, OK, and then how do we actually see the

110
00:08:55.050 --> 00:08:55.780
console?

111
00:08:56.460 --> 00:08:57.300
Well, if you just.

112
00:08:57.300 --> 00:08:57.660
Right.

113
00:08:57.660 --> 00:09:04.290
Click down here in the preview part of Code Pen, I'm going to choose the inspect option.

114
00:09:05.880 --> 00:09:10.950
Remember that opens your developer tools and then just look for the tab named console.

115
00:09:11.730 --> 00:09:17.610
OK, now you might need to make a slight change to your code in order to have code and execute everything

116
00:09:17.610 --> 00:09:18.240
once again.

117
00:09:18.660 --> 00:09:20.640
So maybe get rid of this and just console.

118
00:09:20.700 --> 00:09:27.960
So log the word hello, and then if you check your console, let me make this a bit easier to read there

119
00:09:27.970 --> 00:09:29.110
it can see hello.

120
00:09:29.920 --> 00:09:32.320
OK, so now we can just change this back instead of hello.

121
00:09:32.320 --> 00:09:38.260
What we actually want to log out to the console is are my words variable are array.

122
00:09:38.680 --> 00:09:45.190
So now if we check the console and here we see the contents of our array and noticed the last item is

123
00:09:45.190 --> 00:09:52.380
green, that means that this line of code successfully added green to the end of that array.

124
00:09:52.900 --> 00:09:58.930
And this is cool because we did not need to create a function or method name to push.

125
00:09:59.440 --> 00:10:06.700
The push method is just a native built in part of the JavaScript language that arrays automatically

126
00:10:06.700 --> 00:10:07.860
get access to.

127
00:10:08.260 --> 00:10:12.360
And this actually brings us to one of the neatest aspects of JavaScript.

128
00:10:12.880 --> 00:10:20.350
So in the JavaScript language, almost everything, not everything, but almost everything is actually

129
00:10:20.350 --> 00:10:26.230
an object or at the very least gets treated or interpreted as an object.

130
00:10:26.680 --> 00:10:33.250
So this is not just the case with arrays, but also even simple strings of text or numbers.

131
00:10:33.760 --> 00:10:41.170
Each type of data gets access to its own set of super powers or abilities or we should say, functions

132
00:10:41.170 --> 00:10:42.440
or methods.

133
00:10:42.940 --> 00:10:48.850
So, for example, and this has nothing to do with arrays, but it's important to understanding JavaScript.

134
00:10:49.450 --> 00:10:58.570
So if down here, if we created a variable and named it my name and set it to equal a string of text

135
00:10:58.570 --> 00:11:00.240
in this case, whatever your name is.

136
00:11:00.730 --> 00:11:04.270
Yes, this is just a simple string of text, right?

137
00:11:04.300 --> 00:11:08.940
It does not look like the cat object that we created in our previous lesson.

138
00:11:09.580 --> 00:11:17.410
However, behind the scenes, JavaScript is actually going to treat the string of text as if it was

139
00:11:17.410 --> 00:11:18.220
an object.

140
00:11:18.640 --> 00:11:25.540
And it's actually going to get access to abilities or methods that are specific to strings of text.

141
00:11:25.900 --> 00:11:27.630
So, for example, try this out with me.

142
00:11:27.910 --> 00:11:35.160
We could say console, dot, log and log out our my name variable in the console.

143
00:11:35.200 --> 00:11:36.060
There you can see it.

144
00:11:36.850 --> 00:11:41.930
However, if we wanted all of the letters in our name to be capitalized.

145
00:11:42.160 --> 00:11:42.970
Check this out.

146
00:11:43.330 --> 00:11:48.760
Instead of just my name, we can say my name dot to uppercase.

147
00:11:51.400 --> 00:11:56.830
So strings of text have access to a method or ability named to uppercase.

148
00:11:57.040 --> 00:12:00.610
And then we just include parentheses to run or call that method.

149
00:12:00.910 --> 00:12:05.830
And if I check the console, they we see our name in all capital letters.

150
00:12:06.340 --> 00:12:12.370
And really quick, just for fun, I want to show you that even the number data type gets access to its

151
00:12:12.370 --> 00:12:13.750
own special abilities.

152
00:12:14.140 --> 00:12:22.240
So let me delete these two lines of test code where we said my name equals Brad and let's say let my

153
00:12:22.240 --> 00:12:26.190
number equal seven point eight nine.

154
00:12:26.740 --> 00:12:29.440
So this is just a simple number, right?

155
00:12:29.570 --> 00:12:31.660
It doesn't look like an object.

156
00:12:31.930 --> 00:12:38.320
However, behind the scenes, JavaScript is going to give it access to methods or abilities related

157
00:12:38.320 --> 00:12:39.250
to numbers.

158
00:12:39.730 --> 00:12:48.670
So on a new line, if we log this out to the console console, log my number there we see the number

159
00:12:48.670 --> 00:12:49.950
seven point eight nine.

160
00:12:50.140 --> 00:12:54.760
And now imagine if we wanted to round that to the nearest whole number.

161
00:12:55.240 --> 00:13:01.270
Well, in JavaScript, we could just say my number dot two fixed.

162
00:13:02.770 --> 00:13:06.190
So parentheses to call or run the two fixed method.

163
00:13:06.460 --> 00:13:10.930
And if we check the console, seven point eight nine got rounded up to eight.

164
00:13:11.620 --> 00:13:12.080
Cool.

165
00:13:12.520 --> 00:13:16.350
Now, if the last three minutes did not make perfect sense, that's OK.

166
00:13:16.750 --> 00:13:23.770
It was a bit of a tangent, but the big picture idea is simply that different types of data have access

167
00:13:23.770 --> 00:13:26.030
to different abilities or methods.

168
00:13:26.470 --> 00:13:29.770
Now back to the topic at hand, which is a raise.

169
00:13:30.550 --> 00:13:34.340
So let's delete these two lines of code for my number, OK?

170
00:13:34.510 --> 00:13:39.850
And back on track, we've learned how to add an item to an existing array.

171
00:13:40.390 --> 00:13:43.880
Now let's learn how to remove an item from an array.

172
00:13:44.320 --> 00:13:52.480
So let's imagine that down here, we want to write a new line of code that maybe removes the word orange

173
00:13:52.690 --> 00:13:54.850
from the my words array.

174
00:13:55.420 --> 00:14:00.280
So down here we can just say my words, Dot.

175
00:14:01.120 --> 00:14:09.100
And there is a method named Splice and the splice method lets us remove a particular item from an array

176
00:14:10.270 --> 00:14:11.350
within the parentheses.

177
00:14:11.350 --> 00:14:14.160
We want to pass this method to arguments.

178
00:14:14.440 --> 00:14:20.410
So just as placeholders, I'm going to say A comma B now the first argument is the.

179
00:14:20.590 --> 00:14:23.410
Index of which item you want to get rid of.

180
00:14:23.890 --> 00:14:24.820
So what does that mean?

181
00:14:24.850 --> 00:14:32.230
Well, if we look at our array up here, red, orange, yellow, and each item is represented with a

182
00:14:32.230 --> 00:14:33.730
numerical index.

183
00:14:34.210 --> 00:14:39.520
Now, you might think that red would be one, orange would be two and yellow would be three.

184
00:14:39.820 --> 00:14:46.030
But arrays in JavaScript are zero based, which really just means we start counting at zero instead

185
00:14:46.030 --> 00:14:46.530
of one.

186
00:14:46.870 --> 00:14:51.880
So Red would have an index of zero and then one and then two.

187
00:14:52.750 --> 00:14:59.560
So if our hypothetical goal is to remove orange, Orange has an index of one, right.

188
00:14:59.620 --> 00:15:01.990
Zero one two.

189
00:15:02.440 --> 00:15:06.250
So down here in splice for the first argument, let's say one.

190
00:15:06.670 --> 00:15:12.610
And then the second argument is how many items you want to remove starting from that index.

191
00:15:12.910 --> 00:15:15.810
So we're just going to say, one, we only want to get rid of one item.

192
00:15:16.300 --> 00:15:17.790
And now let's test this out.

193
00:15:18.040 --> 00:15:20.620
Let's see if it's doing what we expect it to do.

194
00:15:20.980 --> 00:15:29.380
So let's log out our array to the console console log and let's just log out my words, our array.

195
00:15:29.920 --> 00:15:34.900
And now if I check the console, perfect, we just have red, yellow, green.

196
00:15:35.380 --> 00:15:36.790
Now, practice makes perfect.

197
00:15:36.790 --> 00:15:40.210
And I know the idea of the numerical index might be confusing.

198
00:15:40.210 --> 00:15:44.070
So instead of removing orange, what if we wanted to get rid of red?

199
00:15:44.470 --> 00:15:48.360
Well, red is the first item, so it has an index of zero.

200
00:15:48.610 --> 00:15:54.850
So down here and splice we would say zero and we still only want to remove one item starting from that

201
00:15:54.850 --> 00:15:55.480
index.

202
00:15:55.790 --> 00:15:59.730
If we check the console, we see that red got removed.

203
00:16:00.520 --> 00:16:01.160
Perfect.

204
00:16:01.450 --> 00:16:08.800
And this concept of the numerical index is also how we can access the value of a particular item in

205
00:16:08.800 --> 00:16:09.400
an array.

206
00:16:09.790 --> 00:16:16.420
So, for example, let's take our my favorite numbers array and let's imagine that we wanted to access

207
00:16:16.420 --> 00:16:20.560
the value of the third item in the collection.

208
00:16:20.950 --> 00:16:23.140
So we know that it's a value of eight.

209
00:16:23.410 --> 00:16:30.250
But if we wanted to access it programmatically down here at the bottom, we could say console log.

210
00:16:30.670 --> 00:16:37.300
And the variable name is my favorite numbers, my favorite numbers.

211
00:16:37.720 --> 00:16:44.170
And then to look up an item in an array by its index, we just include a pair of square brackets after

212
00:16:44.170 --> 00:16:47.730
the array and then we include the numerical index.

213
00:16:48.070 --> 00:16:53.940
So if we wanted the third item, we don't type three because remember, arrays are zero based.

214
00:16:54.340 --> 00:16:59.110
So the third item would be to write zero one two.

215
00:16:59.650 --> 00:17:02.500
So if I checked the console, cool.

216
00:17:02.500 --> 00:17:03.700
There we see the number eight.

217
00:17:04.300 --> 00:17:09.400
If we wanted to get the fourth item from the array, we could just change this from a two to a three.

218
00:17:10.510 --> 00:17:11.650
You get the idea.

219
00:17:12.040 --> 00:17:15.490
Let's practice accessing an item in an array one more time.

220
00:17:16.000 --> 00:17:24.940
Let's imagine that we want to access the species of the second pet in our my pets array of objects.

221
00:17:25.210 --> 00:17:30.820
So we know that that's a value of dog, but how would we access that programmatically?

222
00:17:31.270 --> 00:17:39.040
So down here at the bottom, let's say console log, start with the my pets array square brackets and

223
00:17:39.040 --> 00:17:41.770
we are interested in the second item in the array.

224
00:17:42.100 --> 00:17:45.760
So zero would be the first item, one would be the second item.

225
00:17:46.420 --> 00:17:49.570
This would retrieve us, the entire pet object.

226
00:17:49.900 --> 00:17:55.300
But then we want to look inside that object for the species value.

227
00:17:55.810 --> 00:17:59.520
So if we check the console, cool, there we see dog.

228
00:18:00.070 --> 00:18:05.370
Now let's bring this lesson to a close and explain why arrays are so important.

229
00:18:05.950 --> 00:18:12.880
So in addition to adding and removing items from an array, it's also very easy to make the computer

230
00:18:13.090 --> 00:18:17.650
sort an array alphabetically or sort by some other quality.

231
00:18:17.890 --> 00:18:25.210
Or perhaps most importantly of all, computers are really good at automating tasks.

232
00:18:25.480 --> 00:18:32.590
So once we have a collection or an array, it's super easy to make the computer do something once for

233
00:18:32.590 --> 00:18:39.400
each item in that array, for example, maybe displaying it visually onto the Web page.

234
00:18:39.760 --> 00:18:45.040
And then remember, at the end of our previous lesson, we learned how to do something every time the

235
00:18:45.040 --> 00:18:47.140
user clicked anywhere on the page.

236
00:18:47.560 --> 00:18:52.240
Well, you can imagine that we can watch for clicks on a particular button on the page.

237
00:18:52.570 --> 00:18:59.080
And then in response to that event, we can maybe add an item to an array or remove an item from an

238
00:18:59.080 --> 00:19:05.180
array or sort the array or just work with the array in some interesting way that the user wants.

239
00:19:05.530 --> 00:19:11.470
OK, now, at this point, I do not expect you to be an expert on arrays and you don't need to have

240
00:19:11.470 --> 00:19:13.360
remembered everything in this lesson.

241
00:19:13.840 --> 00:19:20.260
All you need to know is that an array is a collection of items and that arrays have an.

242
00:19:20.310 --> 00:19:28.920
Access to different methods like push and splice that let us manipulate or work with the array, if

243
00:19:28.920 --> 00:19:33.960
that makes even a little bit of sense, then you're on track and you're ready to move on to the next

244
00:19:33.960 --> 00:19:34.450
lesson.

245
00:19:34.920 --> 00:19:39.270
Up next, we are going to learn how to make decisions in our code.

246
00:19:39.780 --> 00:19:42.210
This is going to open up so many doors.

247
00:19:42.390 --> 00:19:46.740
So let's keep things rolling and I will see you in the next lesson.
