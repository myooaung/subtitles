WEBVTT
1
00:00:02.160 --> 00:00:04.560
Hello, everyone, in this video.

2
00:00:04.770 --> 00:00:11.370
Part two of this lesson we're picking up right where we left off, so we're still working on the update

3
00:00:11.370 --> 00:00:17.640
or edit feature for an item, and we've already set things up so that when you click on the edit button.

4
00:00:18.780 --> 00:00:20.730
You can type in new text.

5
00:00:21.240 --> 00:00:22.290
Hello, there.

6
00:00:23.550 --> 00:00:28.170
And we are successfully receiving that value within our node server.

7
00:00:28.530 --> 00:00:36.570
So now our goal for this video is to write node code, to actually talk to our MongoDB database and

8
00:00:36.570 --> 00:00:39.870
update the correct document with that new value.

9
00:00:40.440 --> 00:00:45.090
So without further ado, let's get started on that from within your server.

10
00:00:45.390 --> 00:00:49.020
James file I want you to scroll down to the very bottom.

11
00:00:49.620 --> 00:00:56.490
So this is where we set up our express server to receive that incoming post request to the URL of update

12
00:00:56.490 --> 00:00:56.930
item.

13
00:00:57.330 --> 00:01:00.930
And then just as a test, we were logging that value to the console.

14
00:01:01.320 --> 00:01:06.360
But what we actually want to do here is communicate with our MongoDB database.

15
00:01:06.780 --> 00:01:07.770
So let's do this.

16
00:01:07.770 --> 00:01:12.960
Let's delete that console that log line and also delete this response dot send line.

17
00:01:13.290 --> 00:01:17.550
Let's just give ourselves a clean, empty slate within the body of this function.

18
00:01:18.030 --> 00:01:18.360
All right.

19
00:01:18.360 --> 00:01:23.700
And then type this out with me so deep because we want to begin working with our database.

20
00:01:24.420 --> 00:01:26.970
Let's look inside it and call the collection method.

21
00:01:27.480 --> 00:01:30.390
We are interested in our collection that is named items.

22
00:01:30.930 --> 00:01:31.340
All right.

23
00:01:31.350 --> 00:01:35.450
And then at the end here, we know that we can tack on and call a crud method.

24
00:01:35.970 --> 00:01:43.290
In this case, what we want to do is find one and update.

25
00:01:43.860 --> 00:01:48.240
Yes, this is perhaps the most descriptive method name that you'll ever see.

26
00:01:48.780 --> 00:01:54.930
This method will find one document in your collection and then allow you to update it.

27
00:01:55.500 --> 00:01:59.430
Now, within the parentheses for this method, we want to give it three arguments.

28
00:01:59.760 --> 00:02:02.820
So as a placeholder, let's say a comma, be Kamasi.

29
00:02:03.270 --> 00:02:09.840
All right, this first argument is where we tell MongoDB which document we want to update.

30
00:02:10.320 --> 00:02:16.140
For now, let's just leave this as the a placeholder, and we can circle back to this in a few minutes.

31
00:02:16.740 --> 00:02:21.270
For the time being, let's focus on the be placeholder or the second argument.

32
00:02:21.780 --> 00:02:26.640
This is where we told MongoDB what we want to update on that document.

33
00:02:27.180 --> 00:02:28.230
Let me show you what I mean.

34
00:02:28.240 --> 00:02:32.550
So instead of this, be placeholder, let's create a JavaScript object.

35
00:02:32.550 --> 00:02:37.740
So curly brackets and inside it, let's include a property with a very special name.

36
00:02:38.160 --> 00:02:41.700
We have to give it a name of dollar sign set.

37
00:02:42.270 --> 00:02:46.830
Then let's say colon, and let's set that to equal another JavaScript object.

38
00:02:47.040 --> 00:02:48.870
So another pair of curly brackets.

39
00:02:49.200 --> 00:02:54.240
And then this is where you say which fields or properties you actually want to update.

40
00:02:54.690 --> 00:03:00.060
Now, in our case, because our to do application is so simple, our documents only really have the

41
00:03:00.060 --> 00:03:02.070
one property named text.

42
00:03:02.520 --> 00:03:08.370
However, it's very common for Mongo DB documents to have many different fields or properties.

43
00:03:08.760 --> 00:03:14.910
So the idea here is that you only need to provide the fields of properties that are actually being updated.

44
00:03:15.150 --> 00:03:21.720
You do not need to include the full document here only include what's being changed so we can just say

45
00:03:22.080 --> 00:03:28.140
text and then set that to whatever our user typed in and submitted to our server.

46
00:03:28.140 --> 00:03:31.500
So request body DHCP text.

47
00:03:32.010 --> 00:03:34.230
All right, that takes care of that second argument.

48
00:03:34.470 --> 00:03:38.520
Now let's work on the C placeholder or the third argument.

49
00:03:38.970 --> 00:03:44.880
This is where we include a function that will get called once this database action has had a chance

50
00:03:44.880 --> 00:03:45.570
to complete.

51
00:03:45.900 --> 00:03:53.700
So instead of this C placeholder at the end here, let's include an anonymous function function, parentheses,

52
00:03:53.700 --> 00:03:57.960
curly brackets within the body of that new function that we just created.

53
00:03:58.260 --> 00:04:02.110
Let's just send back a response to the browser, right?

54
00:04:02.130 --> 00:04:05.370
This is what happens once our database update action is complete.

55
00:04:05.790 --> 00:04:12.930
Let's just say response dot send and let's just pass a string of text and say success.

56
00:04:13.560 --> 00:04:14.040
All right.

57
00:04:14.220 --> 00:04:19.140
Now all that's missing is this first argument or the a placeholder.

58
00:04:19.560 --> 00:04:24.690
Again, this is where we tell MongoDB which document we want to update.

59
00:04:25.170 --> 00:04:30.960
So that means that when a user clicks on one of our edit buttons, not only do we want to receive the

60
00:04:30.960 --> 00:04:37.710
text that they typed in, but we need to keep track of which item they click the edit button for.

61
00:04:38.100 --> 00:04:40.890
Now, you might be wondering how in the world can we do that?

62
00:04:41.280 --> 00:04:46.590
Well, this is where the ID field of a MongoDB document comes into play.

63
00:04:47.070 --> 00:04:54.600
If you jump into your MongoDB Atlas account and click on collections and then view your to do app items

64
00:04:54.600 --> 00:05:00.720
collection, you'll notice that each document that we created in addition to our text, property or

65
00:05:00.720 --> 00:05:04.590
field also has an underscore ID field.

66
00:05:05.070 --> 00:05:08.700
And you can see that each one is unique by grapes.

67
00:05:08.700 --> 00:05:11.760
Ends in eighty to DC walk.

68
00:05:11.760 --> 00:05:14.410
The dog ends in two eight four four.

69
00:05:14.430 --> 00:05:15.420
You get the idea.

70
00:05:15.810 --> 00:05:17.130
So let's do this.

71
00:05:17.400 --> 00:05:17.790
Let's.

72
00:05:18.050 --> 00:05:26.300
Just our HTML template that gets sent for the home page to include that I.D. value for each one of our

73
00:05:26.300 --> 00:05:26.990
items.

74
00:05:27.500 --> 00:05:28.670
Let me show you what I mean.

75
00:05:28.910 --> 00:05:35.750
Let's jump back into our server, not file and scroll up to where we have our HTML template for the

76
00:05:35.750 --> 00:05:36.500
home page.

77
00:05:37.220 --> 00:05:42.920
Scroll down in this HTML template until you find the area with the unordered list.

78
00:05:43.370 --> 00:05:50.450
OK, and this item's dot map area is where we included a bit of each HTML that will be repeated once

79
00:05:50.570 --> 00:05:51.860
for each of our items.

80
00:05:52.550 --> 00:05:54.890
What we're looking for is this edit button.

81
00:05:55.490 --> 00:06:00.560
So here we see the opening button tag and the closing button tag, and here it says the word edit.

82
00:06:01.340 --> 00:06:04.790
Here's what I want you to do on the opening button tag.

83
00:06:05.030 --> 00:06:10.430
Let's add a new attribute, and let's call it data dash IDE.

84
00:06:11.150 --> 00:06:15.860
You could name it data dash anything data dash pizza data dash unicorn.

85
00:06:16.040 --> 00:06:18.620
But the first part should be data dash.

86
00:06:19.160 --> 00:06:24.500
This is an HTML five feature that lets us embed data right in our HTML.

87
00:06:24.530 --> 00:06:29.190
So let's say data dash, I'd set it to equal and then quotes.

88
00:06:29.570 --> 00:06:37.460
And in the quotes, just like we used this syntax to output the actual text, field or property, let's

89
00:06:37.460 --> 00:06:39.530
do the same thing here only with the ID.

90
00:06:39.740 --> 00:06:44.990
So let's say dollar sign curly brackets to do something dynamic within a template literal.

91
00:06:45.260 --> 00:06:47.150
And then let's just look inside our item.

92
00:06:47.780 --> 00:06:55.010
So Item Dot and we're interested in underscore I'd do make sure that you include this underscore here.

93
00:06:55.400 --> 00:06:57.950
That's a potentially frustrating typo to miss.

94
00:06:58.520 --> 00:07:01.070
Just I'd will not work, right?

95
00:07:01.160 --> 00:07:09.200
That unique ID that MongoDB automatically generates for each document for us is underscore ID, not

96
00:07:09.200 --> 00:07:09.800
just ID.

97
00:07:10.990 --> 00:07:17.260
All right, now, if we go ahead and save this file and then refresh in the browser, I want you to

98
00:07:17.260 --> 00:07:21.550
right click on one of the edit buttons and choose Inspect.

99
00:07:22.600 --> 00:07:23.140
Perfect.

100
00:07:23.170 --> 00:07:28.810
There's the button element, and our data I'd attribute is set to that unique ID.

101
00:07:29.530 --> 00:07:34.780
So now each one of our edit buttons has a unique ID associated with it.

102
00:07:35.260 --> 00:07:42.580
Now we just need to adjust our browser based JavaScript so that when we use Axios to send off our asynchronous

103
00:07:42.580 --> 00:07:49.660
request to our server, not only do we send along the text that the user typed in, but we also send

104
00:07:49.660 --> 00:07:56.410
along the appropriate I.D. so that we can tell Mongo which document the user wants to update.

105
00:07:56.830 --> 00:07:59.560
I know that was a mouthful, so let me explain what I mean.

106
00:07:59.950 --> 00:08:05.500
Back in our text editor, I want you to jump in to our browser JS file.

107
00:08:06.040 --> 00:08:12.640
Remember, this is the code that's going to run any time we user clicks on one of those edit buttons.

108
00:08:13.000 --> 00:08:20.290
Now, within this ActionScript post line, I want to focus on this object or this data that we are sending

109
00:08:20.320 --> 00:08:22.180
to our server at the moment.

110
00:08:22.180 --> 00:08:25.480
This object we're sending only has the one property name text.

111
00:08:25.780 --> 00:08:28.680
But check this out right after user input.

112
00:08:28.690 --> 00:08:32.530
Let's just add a comma and let's include a new property.

113
00:08:32.890 --> 00:08:34.720
We can name it anything we'd like.

114
00:08:34.780 --> 00:08:37.330
Let's go with ID and then colon.

115
00:08:37.330 --> 00:08:39.490
And what do we want to set its value to?

116
00:08:39.940 --> 00:08:46.150
Well, we just want to pull in that data ID value for whichever button just got clicked on.

117
00:08:46.510 --> 00:08:47.290
So check this out.

118
00:08:47.290 --> 00:08:54.520
Back in our code, we know that we can use E Dot Target to access the HTML element that was actually

119
00:08:54.520 --> 00:08:55.150
clicked on.

120
00:08:55.480 --> 00:08:59.170
So for this ID property right here, let's just say.

121
00:09:00.170 --> 00:09:10.070
E Dot Target Dot get attribute, which is a method, so include a new set of parentheses or getting

122
00:09:10.070 --> 00:09:15.380
an attribute of that particular element, and in these parentheses, we just include a string of text

123
00:09:15.530 --> 00:09:18.610
and name the attribute that we are interested in.

124
00:09:18.620 --> 00:09:20.960
So that's data dash IED.

125
00:09:21.380 --> 00:09:29.150
OK, so now when Axios sends off our request to our server, not only are we sending along the new desired

126
00:09:29.150 --> 00:09:34.640
updated text, but we are also sending along which document should be updated.

127
00:09:35.000 --> 00:09:37.310
So let's go ahead and save this file.

128
00:09:37.610 --> 00:09:44.630
And now we just need to jump back into Server Dot Jess and scroll down to the very bottom and within

129
00:09:44.630 --> 00:09:47.570
this post request for the URL of update item.

130
00:09:47.870 --> 00:09:50.720
Remember, we just need to fill in this a placeholder.

131
00:09:51.020 --> 00:09:54.710
This is where we tell Mongo which document we want to update.

132
00:09:55.040 --> 00:09:59.270
So instead of that, a placeholder, I want you to include a JavaScript object.

133
00:09:59.270 --> 00:10:03.410
So curly brackets, and we want to find a document based on its IDE.

134
00:10:03.860 --> 00:10:11.240
So within these brackets, let's say underscore IDE and then colon, and let's set it to whatever IDE

135
00:10:11.720 --> 00:10:14.210
was just sent along from this request.

136
00:10:14.690 --> 00:10:20.990
But MongoDB works with IDs in a special way, so we cannot just include a simple string of text here.

137
00:10:21.440 --> 00:10:30.470
Instead, we need to create a new instance of something called object IDE in parentheses to call it,

138
00:10:30.470 --> 00:10:35.870
and that's an uppercase O and then an uppercase ie, but lowercase D.

139
00:10:36.410 --> 00:10:40.490
Now this object ID is not a built in part of JavaScript.

140
00:10:40.760 --> 00:10:44.060
Instead, it's a tool from the MongoDB package.

141
00:10:44.570 --> 00:10:48.500
So up at the very top of our file, let's be sure to import it.

142
00:10:49.070 --> 00:10:55.610
So on this line of code where we are d structuring the MongoDB package right after Mongo client still

143
00:10:55.610 --> 00:10:58.280
in those curly brackets, we can just add a comma.

144
00:10:58.730 --> 00:11:02.210
And let's say we also want to pull in object IDE.

145
00:11:03.260 --> 00:11:03.530
Cool.

146
00:11:03.540 --> 00:11:07.250
Now let's just scroll back down to where we were actually using object ID.

147
00:11:07.880 --> 00:11:14.030
All right now, within these parentheses, that's where we can include that simple string of text representation

148
00:11:14.030 --> 00:11:14.610
of the IDE.

149
00:11:15.200 --> 00:11:20.810
So we know that that was in our request object and it lives within the body object and the name of that

150
00:11:20.810 --> 00:11:22.400
property was IED.

151
00:11:22.950 --> 00:11:27.530
OK, and with this in place now, let's save this file and test it out.

152
00:11:28.130 --> 00:11:34.370
So back in the browser, if I refresh, you do want to be sure to refresh so your browser based JavaScript

153
00:11:34.370 --> 00:11:38.210
will have that new ability of sending along the IDE in its request.

154
00:11:38.690 --> 00:11:38.950
All right.

155
00:11:38.960 --> 00:11:47.150
But if I click on the edit button for this first buy grapes item and say Buy two bags of grapes today

156
00:11:47.750 --> 00:11:51.290
and submit, we won't see any change on the front end.

157
00:11:51.560 --> 00:11:55.460
But if I go look at my MongoDB database in Atlas.

158
00:11:55.910 --> 00:11:56.210
Right.

159
00:11:56.210 --> 00:12:00.590
So click on collections and then to do app and look in the items collection.

160
00:12:01.190 --> 00:12:06.710
You can click on the Find or reset button here to refresh or reload all of the data.

161
00:12:08.620 --> 00:12:15.400
And awesome, you can see that that new text was successfully updated on the correct document in the

162
00:12:15.400 --> 00:12:21.910
database just to test it out again, let's edit the walk the dog item to include several exclamation

163
00:12:21.910 --> 00:12:29.480
points at the end, so I'll click Edit for Walk the dog, say walk the dog exclamation.

164
00:12:29.920 --> 00:12:33.640
Submit that and then go refresh in MongoDB Atlas.

165
00:12:33.640 --> 00:12:35.530
Click this Find button or reset.

166
00:12:37.070 --> 00:12:43.190
Cool, so we still only have five total documents, and you can see Walk the Dog now has a bunch of

167
00:12:43.190 --> 00:12:44.120
exclamations.

168
00:12:44.690 --> 00:12:51.920
This means that the database aspect of our update feature is complete, but our user interface aspect

169
00:12:51.920 --> 00:12:53.840
is not complete, right?

170
00:12:53.840 --> 00:12:58.820
As soon as that database action is complete, our front end should update on the fly.

171
00:12:59.360 --> 00:13:06.590
Now, if we perform a hard refresh, if we actually reload or refresh the page, we will see those new

172
00:13:06.590 --> 00:13:07.310
values.

173
00:13:07.670 --> 00:13:12.650
But the user should not have to refresh like that as soon as they type in their new text, it should

174
00:13:12.650 --> 00:13:14.180
just appear in place.

175
00:13:14.690 --> 00:13:17.600
So let's do this in your text editor.

176
00:13:17.750 --> 00:13:20.880
I want you to jump into browser jazz.

177
00:13:21.470 --> 00:13:27.500
You'll remember in our last video, we wrote this comment or reminder to ourselves that says, Do something

178
00:13:27.500 --> 00:13:29.480
interesting here in the next video.

179
00:13:29.780 --> 00:13:36.950
So within the body of this function here, this is what will run once our Axios request has had a chance

180
00:13:36.950 --> 00:13:37.730
to complete.

181
00:13:38.180 --> 00:13:44.540
And we know that our node server is not going to send back its response until its database action is

182
00:13:44.540 --> 00:13:45.170
complete.

183
00:13:45.770 --> 00:13:53.750
That means that where this comment is will be the perfect time to actually manipulate the HTML interface

184
00:13:54.050 --> 00:13:57.560
or the current item to show the new input text.

185
00:13:58.280 --> 00:14:00.050
So let me show you how I would do that.

186
00:14:00.590 --> 00:14:02.110
Let's get rid of this comment.

187
00:14:04.210 --> 00:14:11.110
And the first question is, how do we know which item to update or which little piece of text to update?

188
00:14:11.500 --> 00:14:15.680
Well, let's just begin with whichever edit button was clicked on.

189
00:14:16.180 --> 00:14:22.510
So we know that we can access that with dot, target and then whichever button got clicked on.

190
00:14:22.750 --> 00:14:26.410
Let's just look for it's each HTML ancestor element.

191
00:14:26.770 --> 00:14:35.050
So we can say dot parent element, and I won't bore you with the structure of our HTML template, but

192
00:14:35.050 --> 00:14:40.120
we actually want to go up one more level and look for the parent of even this element.

193
00:14:40.390 --> 00:14:43.300
So dot parent element again.

194
00:14:43.900 --> 00:14:47.410
So that will select the overall row for the current item.

195
00:14:47.710 --> 00:14:48.730
And then let's do this.

196
00:14:48.940 --> 00:14:54.550
Let's just look for that span of text that houses the actual text value.

197
00:14:55.460 --> 00:15:02.300
So after the second parent element, we can say dot query selector, which is a method, and then we

198
00:15:02.300 --> 00:15:07.580
can just give it a string of text and say Dot item dash text.

199
00:15:08.210 --> 00:15:14.390
If you go dig through our HTML template, you will see that there is a span element with this exact

200
00:15:14.390 --> 00:15:19.640
class of item dash text and that's wrapped around the actual text value.

201
00:15:19.940 --> 00:15:28.610
So then let's just look inside that for its inner HTML property and set that to equal whatever value

202
00:15:28.610 --> 00:15:34.100
the user typed into the prompt, which we stored in a variable named user input.

203
00:15:34.850 --> 00:15:41.120
All right now, with this line of code in place, that's going to update this part of the user interface

204
00:15:41.420 --> 00:15:44.210
once our database action is complete.

205
00:15:44.690 --> 00:15:52.610
So let's be sure to save that browser JSE file and then let's refresh on the front end and let's test

206
00:15:52.610 --> 00:15:52.910
it out.

207
00:15:53.420 --> 00:16:00.290
I will click on the edit button for buy coffee and I will change it to buy lots of coffee.

208
00:16:01.400 --> 00:16:03.440
Click OK, awesome.

209
00:16:03.440 --> 00:16:05.720
You can see that was updated in real time.

210
00:16:06.140 --> 00:16:10.010
And just to confirm if we go into Atlas and reset that database.

211
00:16:11.150 --> 00:16:13.580
There we can see by lots of coffee.

212
00:16:14.120 --> 00:16:19.490
All right, and finally, let's make two more tiny changes that will improve the user experience.

213
00:16:20.030 --> 00:16:26.180
First, let's set it up so that when the user clicks the edit button, the prompt is pre-populated with

214
00:16:26.180 --> 00:16:30.230
the current or existing value instead of being completely blank.

215
00:16:30.560 --> 00:16:37.430
After we do that, let's also set things up so that if the user clicks cancel instead of OK, we don't

216
00:16:37.430 --> 00:16:42.350
even send off an asynchronous request because check this out if I click Cancel.

217
00:16:43.130 --> 00:16:46.970
Our Axios request still was sent off, but it didn't have a value.

218
00:16:47.180 --> 00:16:48.590
So now you can see it's blank.

219
00:16:49.310 --> 00:16:56.570
So let me put that back to buy coffee, and let's set up the first feature where we pre populate that

220
00:16:56.570 --> 00:16:58.520
prompt field with the current value.

221
00:16:58.940 --> 00:17:06.170
So back in our browser jazz file on this line of code where we open that prompt and say, enter your

222
00:17:06.170 --> 00:17:11.060
desired new text right after the closing quote for that string of text.

223
00:17:11.390 --> 00:17:19.280
If we add a comma, we can include a second argument that will be pre-populated into the prompt so we

224
00:17:19.280 --> 00:17:20.630
could just say hello.

225
00:17:20.870 --> 00:17:25.250
But instead of that, we want to dynamically take the current or existing value.

226
00:17:25.580 --> 00:17:29.570
So to do that, let's begin with the edit button that was clicked on.

227
00:17:29.840 --> 00:17:34.040
And then just look up its HTML ancestry and do the same thing.

228
00:17:34.040 --> 00:17:36.320
We can find the span element again.

229
00:17:36.920 --> 00:17:39.800
So type this out with me for the second argument.

230
00:17:39.800 --> 00:17:51.650
Here we will say e dot target dot parent element dot parent element dot query selector, which is a

231
00:17:51.650 --> 00:17:58.250
method, and then just give it quotes and a dot to represent a class and say Item Dash text.

232
00:17:58.760 --> 00:18:03.350
OK, and then in between these two closing parentheses right after the first one, we want to include

233
00:18:03.350 --> 00:18:10.400
a dot and look for the inner HTML property, which will pull in the text value of the span element.

234
00:18:11.150 --> 00:18:15.530
OK, let's go ahead and save this file and refresh in the browser.

235
00:18:16.490 --> 00:18:22.340
And now when I click on Edit for Buy Coffee, you can see that that's pre-populated in the field.

236
00:18:22.790 --> 00:18:23.180
Cool.

237
00:18:23.390 --> 00:18:26.750
This feels like more of the edit behavior that a user would expect.

238
00:18:26.990 --> 00:18:30.470
So then they can change it if they see fit and we are in business.

239
00:18:31.070 --> 00:18:36.860
Now, finally, let's set things up so that if the user clicks on edit and then changes their mind and

240
00:18:36.860 --> 00:18:41.060
clicks cancel, the item is not set to a blank value.

241
00:18:41.450 --> 00:18:43.850
Let me put that back to buy coffee really quick.

242
00:18:44.990 --> 00:18:51.740
OK, back in our code, all we need to do is wrap the Axios code within an if statement.

243
00:18:52.190 --> 00:18:53.000
So do this with me.

244
00:18:53.000 --> 00:19:00.650
Select from the beginning of Axios down five lines to where the closing curly bracket and parentheses

245
00:19:00.650 --> 00:19:00.950
are.

246
00:19:01.310 --> 00:19:03.620
So I have five lines of code selected.

247
00:19:03.740 --> 00:19:05.660
Let's cut that into our clipboard.

248
00:19:06.960 --> 00:19:12.900
And write an if statement, say if parentheses curly brackets within the condition for our if statement,

249
00:19:12.900 --> 00:19:15.990
let's say if user input.

250
00:19:16.290 --> 00:19:17.100
That's all we need.

251
00:19:17.280 --> 00:19:20.130
As long as this is not blank, right?

252
00:19:20.130 --> 00:19:23.160
And this represents the value of what they typed into the prompt.

253
00:19:23.550 --> 00:19:27.330
As long as this exists and is not blank, it will evaluate to true.

254
00:19:27.630 --> 00:19:31.530
So then within the body of our if statement, just paste back in your clipboard.

255
00:19:32.520 --> 00:19:32.910
Cool.

256
00:19:33.090 --> 00:19:37.410
Let's go ahead and save that and refresh in the browser.

257
00:19:38.250 --> 00:19:44.070
Now, if I click on Edit for my coffee but changed my mind and click Cancel, everything is still fine.

258
00:19:44.640 --> 00:19:45.210
Awesome.

259
00:19:45.480 --> 00:19:47.730
And that brings this lesson to a close.

260
00:19:48.060 --> 00:19:53.670
In our next lesson, we will learn how to set up the functionality for our delete buttons.

261
00:19:54.270 --> 00:19:58.410
Let's keep our momentum rolling, and I will see you in the next lesson.
