1
00:00:02,070 --> 00:00:03,000
Hello, everyone.

2
00:00:03,420 --> 00:00:09,720
This lesson is completely optional, but in this video, we're going to convert the dot then syntax

3
00:00:09,720 --> 00:00:17,190
way of waiting on a promise to instead use the async await syntax throughout the course.

4
00:00:17,190 --> 00:00:20,670
We've seen both approaches, which I think is very real.

5
00:00:20,670 --> 00:00:26,880
World long term projects that you work on or inherit will definitely have everything.

6
00:00:26,880 --> 00:00:29,820
We'll have callbacks they'll have, then they'll use async.

7
00:00:29,820 --> 00:00:30,270
Wait.

8
00:00:30,690 --> 00:00:34,810
So it's good that you are familiar with all of the different ways of writing your code.

9
00:00:34,830 --> 00:00:42,540
However, now that async await has been around for several, several years, it's definitely the standard.

10
00:00:42,780 --> 00:00:48,510
And so I thought it would be useful to walk through a few examples with you where we convert Dot, then

11
00:00:48,510 --> 00:00:50,940
to instead use async await.

12
00:00:51,540 --> 00:00:52,920
Let's jump into the action.

13
00:00:52,920 --> 00:00:58,710
So here I have the code for our complex app, and let's give ourselves a goal for this video.

14
00:00:58,920 --> 00:01:05,310
So I'm just going to replace any dot then inside our post model and our post controller that should

15
00:01:05,310 --> 00:01:08,430
give us a good amount of practice several examples.

16
00:01:08,610 --> 00:01:13,290
And then if you want to do this for all of your files, absolutely go for it.

17
00:01:13,710 --> 00:01:20,010
But right now on camera, let's begin with the post dot JS model file.

18
00:01:20,730 --> 00:01:22,020
So I'm going to jump into that file.

19
00:01:22,020 --> 00:01:28,860
If I perform a controller command f search for Dot, then OK, I can see there's just one instance of

20
00:01:28,860 --> 00:01:33,600
that, and it's in the create method for creating a new post.

21
00:01:34,170 --> 00:01:40,410
So the promise that we're using then on is the Mongo DB insert one method.

22
00:01:40,890 --> 00:01:46,950
So let me walk you through my own thought process of how I would convert this code to instead use async

23
00:01:46,950 --> 00:01:47,430
await.

24
00:01:47,910 --> 00:01:54,020
So the first thing I'm noticing is that we want to have access to this parameter called info, right?

25
00:01:54,030 --> 00:01:58,200
Whenever this action completes, we want to be able to access that info value.

26
00:01:58,620 --> 00:02:00,570
So that's where I'm going to start my code.

27
00:02:00,690 --> 00:02:07,140
So maybe right below this comment, I'll leave the old code in place, but I'll start writing my new

28
00:02:07,140 --> 00:02:08,160
version of the code.

29
00:02:08,670 --> 00:02:15,540
So I would say contest info equals and then I want to await something.

30
00:02:15,930 --> 00:02:19,650
And then it would just be posts collection dot.

31
00:02:19,650 --> 00:02:23,550
Insert one parentheses to call it in the parentheses.

32
00:02:23,550 --> 00:02:25,440
It looks like we had this dot data.

33
00:02:25,440 --> 00:02:27,300
So this dot data.

34
00:02:27,480 --> 00:02:29,310
So we've recreated this only now.

35
00:02:29,310 --> 00:02:30,360
It's very flat.

36
00:02:30,360 --> 00:02:33,720
We're not nested in several layers indented.

37
00:02:34,170 --> 00:02:36,060
So literally right below this line.

38
00:02:36,060 --> 00:02:41,160
Now we would have this resolved line so you can just copy and paste that right here.

39
00:02:41,700 --> 00:02:45,510
It's not going to run until this has actually finished.

40
00:02:46,080 --> 00:02:46,460
Cool.

41
00:02:46,560 --> 00:02:52,050
But now we do need to address the whole, you know, if this is successful, do this if it fails to

42
00:02:52,050 --> 00:02:52,860
do this.

43
00:02:53,460 --> 00:02:56,130
So here's what I would do again, right above our new code.

44
00:02:56,130 --> 00:03:02,550
Maybe below this comment, I would just set up a try block and then right below that, a catch block.

45
00:03:03,240 --> 00:03:08,400
If you know that you don't need to access this specific error, you don't even need the parentheses.

46
00:03:08,400 --> 00:03:15,600
After the word catch, I got in the habit of always including them because certain old versions of Microsoft

47
00:03:15,600 --> 00:03:20,190
Edge or Microsoft Internet Explorer would throw an error if you didn't have them.

48
00:03:20,580 --> 00:03:24,270
So if you ever look at my code, you'll see I'm in the habit of just including that.

49
00:03:24,890 --> 00:03:29,670
But what I would do is then take these two new lines of code that we wrote and just cut them into the

50
00:03:29,670 --> 00:03:32,280
try block just like that.

51
00:03:32,280 --> 00:03:38,610
And then if things fail, right, if there's an error when it tries to run these two lines of code,

52
00:03:38,850 --> 00:03:39,690
what do we want to do?

53
00:03:40,260 --> 00:03:44,130
Well, I would just take these two lines of code from the catch block down here.

54
00:03:44,520 --> 00:03:48,390
So just those two lines cut those into our catch block up here.

55
00:03:48,900 --> 00:03:49,560
And that's it.

56
00:03:49,950 --> 00:03:53,310
So now you can delete this entire old bit of code.

57
00:03:53,310 --> 00:04:01,290
So from post collection down to this catch block with the closing curly brackets in parentheses, just

58
00:04:01,290 --> 00:04:04,650
like that, we scroll back up so it fits on the screen all at once.

59
00:04:04,680 --> 00:04:05,970
So I'm going to save this.

60
00:04:06,240 --> 00:04:07,650
And now let's go test it out.

61
00:04:08,220 --> 00:04:10,350
So in the browser, I'm logged in.

62
00:04:10,950 --> 00:04:11,370
Woops.

63
00:04:11,370 --> 00:04:14,040
And this is actually a great issue to leave in the video.

64
00:04:14,040 --> 00:04:15,720
I'm not going to edit out this mistake.

65
00:04:16,020 --> 00:04:19,380
I forgot to include the word async right.

66
00:04:19,380 --> 00:04:24,870
So back in our code, you can only use a tweet if you are within an asynchronous function.

67
00:04:25,200 --> 00:04:28,380
Now it needs to be the nearest parent function.

68
00:04:28,530 --> 00:04:33,900
So instead of adding async right here where my cursor is, we would actually add it right here, right?

69
00:04:33,900 --> 00:04:40,590
Because this arrow function is the direct function that's housing this code right before the parentheses.

70
00:04:40,590 --> 00:04:47,010
For those two parameters right here, I would just say async just like this, let's give that a save

71
00:04:47,880 --> 00:04:48,750
back in the browser.

72
00:04:48,750 --> 00:04:52,530
If I refresh cool, let me try to create a post just to test that out.

73
00:04:54,270 --> 00:04:57,450
Quick test post lorem ipsum.

74
00:04:59,300 --> 00:04:59,660
Cool.

75
00:04:59,750 --> 00:05:03,470
It automatically redirected me to the new URL for that post.

76
00:05:04,070 --> 00:05:05,840
However, we can do better.

77
00:05:06,200 --> 00:05:08,540
So why don't we clean up this code a little bit?

78
00:05:08,930 --> 00:05:13,310
In particular, I'm talking about this bit of code that I'm highlighting right now.

79
00:05:13,760 --> 00:05:18,060
So let's take advantage of what an async function truly is.

80
00:05:18,080 --> 00:05:23,540
Or I should say, let's take advantage of what an async function returns, which is a promise.

81
00:05:24,140 --> 00:05:29,720
So if this async function returns a promise, then we don't need to explicitly spell things out like

82
00:05:29,720 --> 00:05:30,150
this.

83
00:05:30,680 --> 00:05:35,230
So let's still return something, but we don't need to spell out a new promise.

84
00:05:35,240 --> 00:05:38,660
So I'm going to get rid of new promise in this opening parentheses like this.

85
00:05:39,870 --> 00:05:44,670
We're just going to return our async function because an async function returns a promise.

86
00:05:45,090 --> 00:05:47,840
Anyways, we got rid of that opening parentheses up here.

87
00:05:47,850 --> 00:05:52,950
So now let's get rid of the closing extra parentheses right down here.

88
00:05:54,000 --> 00:05:54,510
OK.

89
00:05:54,720 --> 00:06:01,200
Now, since we're not explicitly spelling out a promise using that traditional syntax, that means we

90
00:06:01,200 --> 00:06:03,420
no longer have resolve and reject.

91
00:06:03,750 --> 00:06:05,070
So let's get rid of those.

92
00:06:05,070 --> 00:06:05,940
We don't need those.

93
00:06:05,940 --> 00:06:07,290
They don't make sense any longer.

94
00:06:07,800 --> 00:06:08,190
Cool.

95
00:06:08,220 --> 00:06:10,800
So for now, just an empty arrow function like this.

96
00:06:11,040 --> 00:06:13,590
But now we do need to change our terminology down here.

97
00:06:13,590 --> 00:06:16,140
We can't use, resolve and reject.

98
00:06:16,440 --> 00:06:22,500
So instead, in an async function, you can just return something instead of resolving a value.

99
00:06:22,770 --> 00:06:26,700
So I would just change this line instead of resolve in parentheses.

100
00:06:26,700 --> 00:06:33,480
I would just say return info, dot inserted ID just like this, OK?

101
00:06:33,480 --> 00:06:40,580
And then instead of using reject like this, you can instead just throw an error or just throw a value,

102
00:06:40,590 --> 00:06:44,640
and that's going to behave very similarly to rejecting with a value.

103
00:06:45,000 --> 00:06:51,750
So instead of this line, I would say, throw this dot errors, let me get rid of the reject line like

104
00:06:51,750 --> 00:06:52,050
that.

105
00:06:52,650 --> 00:06:54,100
Do the same thing down here.

106
00:06:54,120 --> 00:06:59,880
So instead of this, it would be throw this dot errors.

107
00:07:00,510 --> 00:07:00,870
Cool.

108
00:07:00,990 --> 00:07:06,960
We can still clean this up a little bit more, though we no longer need this extra wrapper function

109
00:07:07,230 --> 00:07:13,570
because its sole purpose was just to prevent the immediate execution of a new promise, right?

110
00:07:13,590 --> 00:07:17,640
As soon as JavaScript sees a promise, it's going to try to start executing it.

111
00:07:18,000 --> 00:07:23,520
So our solution was to wrap it in a function, and only when you call that function with the promise

112
00:07:23,520 --> 00:07:24,360
then exist.

113
00:07:24,720 --> 00:07:31,620
Well, if we're using an asynchronous function, we no longer need that the promise that this async

114
00:07:31,620 --> 00:07:37,590
function returns won't actually exist until someone calls or executes the async function.

115
00:07:38,070 --> 00:07:43,980
So to clean this up even further on this line, where we say prototype tocreate equals, we can get

116
00:07:43,980 --> 00:07:49,710
rid of the function, parentheses, curly brackets and then on this line, just bring that back up and

117
00:07:49,710 --> 00:07:51,120
we don't need the word return.

118
00:07:51,450 --> 00:07:54,480
We're just setting it to equal our async function.

119
00:07:54,660 --> 00:07:59,280
With that in place, we no longer need this very closing curly bracket right down here.

120
00:07:59,280 --> 00:08:00,210
So I get rid of that.

121
00:08:00,870 --> 00:08:07,260
And then to fix the indentation, you can just select all of these lines and then press control or command

122
00:08:07,260 --> 00:08:11,340
and the left square bracket key on your keyboard to just indent back a little bit.

123
00:08:11,970 --> 00:08:13,710
OK, and then one last detail.

124
00:08:13,830 --> 00:08:19,380
We do need to address the fact that just a moment ago, this overall function here was an anonymous

125
00:08:19,380 --> 00:08:21,510
function instead of an arrow function.

126
00:08:21,960 --> 00:08:27,780
That's a big deal, because that's what's allowing that this keyword to point towards the overall object

127
00:08:27,780 --> 00:08:29,100
that we would expect it to.

128
00:08:29,520 --> 00:08:33,900
Remember that when you use an arrow function, the this keyword doesn't change.

129
00:08:34,260 --> 00:08:38,880
And in this case, we do not want the this keyword to just be pointing towards the global object.

130
00:08:39,210 --> 00:08:44,130
We want it to be pointing towards this instance of our overall post class.

131
00:08:44,670 --> 00:08:49,080
So in order for that, this keyword to point towards what we want it, to just change this from an arrow

132
00:08:49,080 --> 00:08:51,180
function to an anonymous function.

133
00:08:51,180 --> 00:08:56,520
So just change this arrow symbol to just say function parentheses just like this.

134
00:08:56,940 --> 00:09:03,180
So now if we go ahead and save this, let's truly test it out by both creating a new post successfully

135
00:09:03,510 --> 00:09:09,060
and making sure that when we're throwing the errors like this, that they actually successfully get

136
00:09:09,060 --> 00:09:10,290
to the controller.

137
00:09:10,590 --> 00:09:14,160
So first, let me try to create a post successfully.

138
00:09:15,150 --> 00:09:17,010
Brand new post.

139
00:09:17,310 --> 00:09:17,940
Hello.

140
00:09:19,480 --> 00:09:20,800
Cool, so that works.

141
00:09:21,010 --> 00:09:25,780
However, let me try to create a new post, and you can do this if you want to to make sure those error

142
00:09:25,780 --> 00:09:26,840
messages are getting through.

143
00:09:26,860 --> 00:09:32,980
We need to open up your developer tools and just remove the required attribute on one of these fields.

144
00:09:33,550 --> 00:09:34,420
All right, click off it.

145
00:09:34,600 --> 00:09:40,330
Now, if I try to post this while leaving it blank and we removed the required attribute well, our

146
00:09:40,330 --> 00:09:43,630
server side validation should kick in and should prevent this from working.

147
00:09:43,630 --> 00:09:50,500
So if I click Save New Post, Oops, let me remove the required from that overall text area to in this

148
00:09:50,500 --> 00:09:53,470
div on the text area, just remove the required attribute.

149
00:09:53,860 --> 00:09:54,880
Click Save New Post.

150
00:09:55,150 --> 00:09:55,840
Perfect.

151
00:09:56,410 --> 00:10:02,230
The array of error messages successfully made it from our model when we used to throw this dot errors,

152
00:10:02,500 --> 00:10:06,040
and that made it into the controller using this syntax.

153
00:10:06,580 --> 00:10:06,940
Cool.

154
00:10:07,180 --> 00:10:10,600
Now that was the only instance of Dot then in our model file.

155
00:10:10,780 --> 00:10:16,630
So at this point, let's change gears and in our controllers folder, let's jump into post controller

156
00:10:16,630 --> 00:10:17,590
dot Jess.

157
00:10:17,980 --> 00:10:22,270
And now let's begin converting then to use async await.

158
00:10:22,840 --> 00:10:27,340
So let me walk you through my thought process right above this line where we're using Dot then.

159
00:10:27,820 --> 00:10:31,870
For now, I'll leave this text in place so we can look at it as a reference, but above it, I'll write

160
00:10:31,870 --> 00:10:32,590
the new code.

161
00:10:32,920 --> 00:10:37,780
So first, I would begin by setting up a try block and then right below that, a catch block.

162
00:10:38,140 --> 00:10:41,710
And I'm going to give the catch block this parameter of errors.

163
00:10:42,460 --> 00:10:47,680
I'm giving it this specific name because in our original code down here, we're already looking for

164
00:10:47,680 --> 00:10:49,990
a parameter with that exact name of errors.

165
00:10:50,350 --> 00:10:50,710
Cool.

166
00:10:50,980 --> 00:10:54,820
So we've got to try catch blocks set up in the try block.

167
00:10:54,820 --> 00:10:55,660
What do we want to do?

168
00:10:56,110 --> 00:11:01,780
Well, we want to call this create method, but I'm noticing we are interested in the new ID value that's

169
00:11:01,780 --> 00:11:04,060
going to arise or be returned from it.

170
00:11:04,450 --> 00:11:14,170
So I would begin by saying Konst new ID equals a and then it's just post Doc Create, then directly

171
00:11:14,170 --> 00:11:20,170
below that line, but still in the try block, I would just move so cut or copy and paste everything

172
00:11:20,170 --> 00:11:21,990
that was in the body of this function right here.

173
00:11:22,000 --> 00:11:23,680
So send SendGrid lines.

174
00:11:23,860 --> 00:11:27,760
And then these two lines where we're saying request, dot, flash and request dot session.

175
00:11:28,240 --> 00:11:30,040
So I would just cut that into my clipboard.

176
00:11:30,490 --> 00:11:33,730
Paste it right below this line in the try block.

177
00:11:34,210 --> 00:11:36,460
And then if there's an error, if there's a problem.

178
00:11:37,840 --> 00:11:43,510
I would just cut or copy and paste these two lines in my clipboard, paste that into this tribe block

179
00:11:43,510 --> 00:11:44,230
just like that.

180
00:11:44,410 --> 00:11:47,470
Now we can get rid of this code called delete it.

181
00:11:48,100 --> 00:11:51,340
And now let's save this and take it for a test drive.

182
00:11:51,970 --> 00:11:55,390
So it's the same overall action, just creating a post on the website.

183
00:11:55,870 --> 00:11:57,400
So does it create post?

184
00:11:57,820 --> 00:12:03,490
And once again, you were probably screaming at the screen, but I forgot to include the word async.

185
00:12:03,520 --> 00:12:09,160
So back in our code, we can only use this tweet feature if we are within an async function.

186
00:12:09,160 --> 00:12:13,210
So right before function here, just say async, save that again.

187
00:12:13,210 --> 00:12:14,350
Let's give it a refresh.

188
00:12:15,550 --> 00:12:16,180
Perfect.

189
00:12:16,210 --> 00:12:20,020
So new Test one, two three.

190
00:12:21,010 --> 00:12:21,640
Perfect.

191
00:12:22,180 --> 00:12:28,510
If we want to see those error messages on purpose, let's just remove the required attribute from the

192
00:12:28,510 --> 00:12:32,580
text area and then I'll provide a value for the title, but not for the body.

193
00:12:32,590 --> 00:12:33,730
Click Save New Post.

194
00:12:34,180 --> 00:12:35,020
Perfect.

195
00:12:36,220 --> 00:12:39,900
So that takes care of the create post functionality in this file.

196
00:12:39,910 --> 00:12:43,360
I'm just going to push control or command F and search for Dot then.

197
00:12:43,870 --> 00:12:47,710
So it looks like the next instance is in this API create function.

198
00:12:48,220 --> 00:12:51,690
And for the rest of these examples, I don't believe there are any new concepts.

199
00:12:51,700 --> 00:12:54,100
So now we're going to really start moving quickly.

200
00:12:54,400 --> 00:12:55,390
So here's what I would do.

201
00:12:55,750 --> 00:13:02,320
Right above that, all the code, I would just set up the try block with the catch block.

202
00:13:03,280 --> 00:13:10,810
In the try block, I would say Konst new ID equals await post-hoc create right below it.

203
00:13:10,810 --> 00:13:14,800
I would just cut and paste this congrats line in the catch block.

204
00:13:14,800 --> 00:13:18,340
Just cut and paste this cool.

205
00:13:18,520 --> 00:13:22,060
We no longer need this old code and I almost did it again.

206
00:13:22,120 --> 00:13:25,570
Do not forget to include async right here just like that.

207
00:13:26,290 --> 00:13:26,640
Cool.

208
00:13:26,650 --> 00:13:27,820
Let's move on to the next one.

209
00:13:27,820 --> 00:13:32,380
So Controller Command F four then looks like it's in our edit function.

210
00:13:33,100 --> 00:13:34,930
So here's the old code using DOT.

211
00:13:34,930 --> 00:13:44,260
Then right above that, I would just set up try catch blocks, so try catch with errors in the tri block.

212
00:13:44,260 --> 00:13:48,790
It looks like we would want to run this, but we're interested in whatever status value it returns.

213
00:13:49,150 --> 00:13:55,030
So I would say Konst status equals a weight post and then call update.

214
00:13:55,690 --> 00:14:00,400
Then directly below that line to still the try block, I would just cut and paste and move all of this.

215
00:14:00,850 --> 00:14:03,040
So from this comment down.

216
00:14:05,040 --> 00:14:09,720
Until the else bloc closes right here, so I would cut all of that.

217
00:14:11,100 --> 00:14:15,690
Paste it right below this line that we wrote in our tribe lock for our catch block.

218
00:14:15,810 --> 00:14:18,210
Well, I would just take all of this content.

219
00:14:19,620 --> 00:14:26,040
Cut that pasted into this catch block and then just get rid of this old dot, then dot catch code like

220
00:14:26,040 --> 00:14:26,310
that.

221
00:14:27,360 --> 00:14:30,930
Let's give this a save and give it a quick test to make sure that it still works.

222
00:14:30,940 --> 00:14:33,510
So that was the edit or update functionality.

223
00:14:33,870 --> 00:14:38,190
So if I go to my profile, yes, I did it again.

224
00:14:38,490 --> 00:14:41,010
This would need to be an async function.

225
00:14:41,010 --> 00:14:43,110
So don't forget async, give that to save.

226
00:14:43,290 --> 00:14:48,630
Now, if I go back to my profile and try to edit one of my existing posts, so maybe if I try to add

227
00:14:48,870 --> 00:14:52,500
a few exclamation marks, give that a save.

228
00:14:53,160 --> 00:14:53,550
Cool.

229
00:14:55,280 --> 00:14:56,520
Let's move on to the next one.

230
00:14:56,540 --> 00:15:01,310
So if I search for then in this file, it looks like it's the delete functionality.

231
00:15:01,640 --> 00:15:06,470
So above that line, I would set up a try, catch blocks or try catch.

232
00:15:07,790 --> 00:15:12,260
This time around, it doesn't look like we're interested in any value that it returns or resolves with,

233
00:15:12,500 --> 00:15:14,210
so we don't need to set up a variable.

234
00:15:14,450 --> 00:15:21,440
We can just literally say a wait uppercase post, dot delete and then you can just copy and paste these

235
00:15:21,440 --> 00:15:23,430
values inside the parentheses.

236
00:15:23,450 --> 00:15:27,290
So it's a request dot parameter ID and request dot or idea.

237
00:15:27,290 --> 00:15:31,160
Just move those or paste them right below that line.

238
00:15:31,160 --> 00:15:38,420
But still, in our new try block, I would just cut and paste or move these two lines of code paste

239
00:15:38,420 --> 00:15:40,570
that here for the catch area.

240
00:15:40,580 --> 00:15:42,500
Again, just move those two lines of code.

241
00:15:43,820 --> 00:15:44,420
Just like this.

242
00:15:44,420 --> 00:15:47,570
We no longer need this old code, but save this.

243
00:15:47,570 --> 00:15:53,580
And before I even test it out, I'm not going to forget to include async right before function.

244
00:15:53,600 --> 00:15:57,770
So save it, refresh if I try to delete this post.

245
00:15:58,340 --> 00:15:59,030
Perfect.

246
00:15:59,840 --> 00:16:03,440
Let's command F for the next instance of it then.

247
00:16:03,590 --> 00:16:06,440
So it's our API delete right above it.

248
00:16:06,440 --> 00:16:14,990
I would just set up try, block, catch block in the try block, await uppercase postcard delete.

249
00:16:15,500 --> 00:16:18,080
You can even just copy and paste these values.

250
00:16:20,040 --> 00:16:25,200
Right below that line, just move this line of code in vs code, if you want to hold down the altar

251
00:16:25,200 --> 00:16:28,950
option key, you can use the arrow keys to just move a line of code like this.

252
00:16:31,550 --> 00:16:37,850
In the catch block, you would just move this line, so alter option up call, we no longer need this

253
00:16:37,850 --> 00:16:38,540
bit of code.

254
00:16:39,670 --> 00:16:41,680
Make sure that's an async function.

255
00:16:43,180 --> 00:16:47,500
OK, the next one looks like and this is the final one, it's our search functionality.

256
00:16:47,710 --> 00:16:53,680
Let's actually change it up and begin by turning and turning it into an async function and then just

257
00:16:53,680 --> 00:16:55,510
set up try block.

258
00:16:57,540 --> 00:17:03,420
Catch block this time around, we are interested in the value that gets returned or resolved, so I

259
00:17:03,420 --> 00:17:09,690
would say contest posts equals await uppercase post call search.

260
00:17:10,380 --> 00:17:13,050
You can just copy and paste the value in the parentheses.

261
00:17:13,050 --> 00:17:15,480
Like this right below that line.

262
00:17:15,490 --> 00:17:18,600
I would just move this response that JSON online.

263
00:17:20,280 --> 00:17:20,640
Cool.

264
00:17:20,640 --> 00:17:24,600
And then in the catch block, I would just remove this empty JSON array line.

265
00:17:25,020 --> 00:17:26,790
We no longer need this old code.

266
00:17:27,150 --> 00:17:29,550
Let me save this and let's test it out.

267
00:17:29,790 --> 00:17:35,160
So to test out the live functionality of the live search functionality if I search for the word brand

268
00:17:35,520 --> 00:17:36,770
should just be that one post.

269
00:17:36,780 --> 00:17:38,190
Yep, brand new post.

270
00:17:39,180 --> 00:17:39,570
Cool.

271
00:17:39,960 --> 00:17:46,890
So that was all instances of the DOT then syntax in our post model and post controller using these concepts

272
00:17:47,160 --> 00:17:51,900
feel free to adjust all of the other models and controllers if you're interested in doing that.

273
00:17:51,900 --> 00:17:53,850
But I think this was a good bit of practice.

274
00:17:54,210 --> 00:17:59,880
This is definitely the modern or standard way of dealing with asynchronous actions in JavaScript.

275
00:18:00,090 --> 00:18:06,780
Behind the scenes, it's all still promise based, but this bit of syntactic sugar makes the code a

276
00:18:06,780 --> 00:18:07,620
good bit cleaner.

277
00:18:08,130 --> 00:18:09,900
That's going to bring this video to a close.

278
00:18:10,260 --> 00:18:13,470
Let's keep our momentum rolling, and I will see you in the next one.
