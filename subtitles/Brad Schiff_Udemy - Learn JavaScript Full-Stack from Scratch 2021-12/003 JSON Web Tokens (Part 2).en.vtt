WEBVTT
1
00:00:00.410 --> 00:00:00.720
Cool.

2
00:00:01.010 --> 00:00:06.460
Now, obviously, if we clicked send, this would not work because we have not created this route yet.

3
00:00:06.920 --> 00:00:11.970
So let's go do that within your text editor, within the route of your project.

4
00:00:11.990 --> 00:00:19.990
I want you to jump into Rueter Dash API jazz right below our log in route.

5
00:00:20.000 --> 00:00:21.350
Let's just add a new route.

6
00:00:21.380 --> 00:00:31.250
So API router dot post quotes and the route would be slash create dash post after the quotes include

7
00:00:31.250 --> 00:00:33.730
a comma and now we include a function.

8
00:00:34.040 --> 00:00:38.510
But remember, we don't want strangers or guests to be able to create a post.

9
00:00:38.690 --> 00:00:41.710
You must be a logged in registered user.

10
00:00:42.290 --> 00:00:49.190
Now, you might remember in our original router file within our user controller, we set up a function

11
00:00:49.190 --> 00:00:53.450
named must be logged in.

12
00:00:54.290 --> 00:00:54.590
Right.

13
00:00:54.590 --> 00:00:59.200
And if you are logged in, it will carry you on to the next function for this route.

14
00:00:59.810 --> 00:01:05.630
So then we could say comma post controller dot api create.

15
00:01:06.440 --> 00:01:11.570
But if you're not logged in, then this function will stop or end this request.

16
00:01:12.260 --> 00:01:12.470
Right?

17
00:01:12.500 --> 00:01:15.220
If you're not logged in, you'll never even get to this function.

18
00:01:15.800 --> 00:01:17.960
Well, our original must be logged in.

19
00:01:17.960 --> 00:01:22.220
Function only makes sense within the context of a web browser.

20
00:01:22.580 --> 00:01:26.780
Right, because it's going to look for a cookie and session data and it's going to redirect you.

21
00:01:27.020 --> 00:01:29.870
All of that is tightly coupled to the Web browser.

22
00:01:30.200 --> 00:01:33.380
So instead, let's do this right at the beginning of its name.

23
00:01:33.710 --> 00:01:39.640
Let's just say API and then we can capitalize the M and must OK.

24
00:01:39.710 --> 00:01:43.340
And now we can just go create a new version of this middleware function.

25
00:01:43.790 --> 00:01:49.670
And then once we do that, we can go create a new function in our post controller named API, create

26
00:01:50.150 --> 00:01:51.150
one step at a time.

27
00:01:51.170 --> 00:01:56.930
So right now, let's go ahead and save this file and let's jump into our user controller and set up

28
00:01:56.930 --> 00:01:57.610
this function.

29
00:01:58.340 --> 00:02:04.850
So within your project folder, look in the controllers folder and jump into user controller Gorgias

30
00:02:06.050 --> 00:02:07.280
within the user controller.

31
00:02:07.280 --> 00:02:09.080
We just want to create a new function.

32
00:02:09.350 --> 00:02:18.920
So to create a new function, let's say exports DOT API must be logged in, set.

33
00:02:18.920 --> 00:02:20.570
That's equal a function.

34
00:02:21.350 --> 00:02:25.880
And within the function parentheses, we want to give it three parameters instead of two.

35
00:02:26.270 --> 00:02:28.250
So request response.

36
00:02:28.580 --> 00:02:35.900
And next now within the body of this function, let's set up try and catch blocks.

37
00:02:36.680 --> 00:02:43.850
So try curly brackets dropdown in between and then after the closing, try block at a catch block.

38
00:02:44.120 --> 00:02:47.660
So catch curly brackets within the try block.

39
00:02:47.660 --> 00:02:55.940
This is what we want to try, let's say JWT and let's look inside it for a method named Verify.

40
00:02:56.720 --> 00:02:59.900
Within these parentheses we give verify to arguments.

41
00:02:59.900 --> 00:03:06.680
So Acom will be the first argument is a token that you want to verify, right?

42
00:03:06.680 --> 00:03:14.120
So we want to verify or determine if the incoming token in the request is malicious and made up and

43
00:03:14.120 --> 00:03:20.240
fake, or if it's a real trustworthy token that our server did indeed generate.

44
00:03:20.900 --> 00:03:28.010
So instead of the a placeholder we would say request body dot token.

45
00:03:28.490 --> 00:03:35.420
And then the second argument instead of the B placeholder, this is just our JWT secret phrase.

46
00:03:35.870 --> 00:03:44.630
So instead of B, we would say process DOT, N.V., dot and then all uppercase JWT secret.

47
00:03:45.830 --> 00:03:52.880
OK, now if the verified method determines that this is a valid token that our server generated, it's

48
00:03:52.880 --> 00:03:57.460
going to return with the payload or data that was stored in the token.

49
00:03:57.950 --> 00:04:03.800
So remember, in our token we had an object with just the one property of underscore ID.

50
00:04:04.280 --> 00:04:09.110
So if that's what this is going to return with, we don't want that value to just float in outer space.

51
00:04:09.440 --> 00:04:10.760
We'd want to hold on to it.

52
00:04:11.150 --> 00:04:18.560
So at the start of this line, let's say request dot API user, I just made up this property name,

53
00:04:18.560 --> 00:04:22.610
but let's say equals whatever this returns, OK?

54
00:04:22.610 --> 00:04:27.260
And then still within the tribe block, but on a new line, let's just call next.

55
00:04:27.860 --> 00:04:28.110
Right.

56
00:04:28.130 --> 00:04:35.090
So then in the next function for this route, we would be able to access this request API user and that

57
00:04:35.090 --> 00:04:38.060
way we could grab the user ID for the current user.

58
00:04:38.690 --> 00:04:42.110
OK, now that is if the incoming token is valid.

59
00:04:42.620 --> 00:04:47.180
If it's not valid, then the verify method is going to throw an error.

60
00:04:47.720 --> 00:04:50.300
So that's where our catch block comes into play.

61
00:04:50.930 --> 00:04:54.980
So if someone's sending a fake token, we would just want to respond.

62
00:04:55.310 --> 00:04:59.810
So response that JSON and say sorry, you must.

63
00:04:59.930 --> 00:05:08.030
Provide a valid token at this point, let's go ahead and save this file and now let's go work on the

64
00:05:08.030 --> 00:05:12.400
next function for this route to refresh your memory.

65
00:05:12.500 --> 00:05:18.470
If I jump back into router API, that would be post controller and then we need to create a function

66
00:05:18.470 --> 00:05:20.430
named API create.

67
00:05:21.080 --> 00:05:28.610
So right now in your controllers folder, jump into post controller dot J.S. within post controller.

68
00:05:28.610 --> 00:05:33.690
We can save a bit of typing by just duplicating our existing create function.

69
00:05:34.010 --> 00:05:40.250
So find the line that begins with exports dot create equals and I'm just going to select and copy that

70
00:05:40.250 --> 00:05:46.280
entire function and then right below it, just paste in a duplicated copy and then let's change the

71
00:05:46.280 --> 00:05:52.320
name of this function to API Uppercase C for create, OK.

72
00:05:52.340 --> 00:05:54.250
And then we just need to make a few adjustments.

73
00:05:54.560 --> 00:06:00.530
So on this first line where we say let post equal, we can leave this first argument the same, but

74
00:06:00.530 --> 00:06:02.780
we do need to change the second argument.

75
00:06:03.290 --> 00:06:03.510
Right.

76
00:06:03.530 --> 00:06:09.140
So this is where we want to pass along the user ID so we are no longer using sessions.

77
00:06:09.140 --> 00:06:16.400
So let's get rid of this second argument and instead say request dot API user.

78
00:06:17.090 --> 00:06:21.200
So this would be that object of data or the payload that was stored in the token.

79
00:06:21.500 --> 00:06:25.030
And then let's look inside it for underscore idee.

80
00:06:25.810 --> 00:06:29.690
OK, now from here, the post model will decide if the post is valid, right.

81
00:06:29.690 --> 00:06:33.260
If it has a title and body field, so on and so forth.

82
00:06:33.270 --> 00:06:38.330
So if the post is successfully created, our then function will run.

83
00:06:38.600 --> 00:06:42.520
So we no longer want to show a flash message or redirect the user.

84
00:06:42.920 --> 00:06:48.170
So let's get rid of these two lines within our then function and instead let's just send back a bit

85
00:06:48.170 --> 00:06:48.800
of JSON.

86
00:06:48.800 --> 00:06:51.770
So response that JSON and just say congrats.

87
00:06:52.520 --> 00:06:58.490
If we were truly building out an API, we'd want to include the new idea of the post that was just created.

88
00:06:58.790 --> 00:07:02.650
But for now, this will do the job OK within our catch function.

89
00:07:02.660 --> 00:07:08.870
Let's get rid of these two lines and instead just say response JSON.

90
00:07:09.320 --> 00:07:14.870
And actually instead of the quotes, we could just respond with our array of errors.

91
00:07:15.440 --> 00:07:17.340
Right, that our model is going to create for us.

92
00:07:17.340 --> 00:07:18.680
So we could just say errors.

93
00:07:19.170 --> 00:07:22.510
OK, let's go ahead and save this and test it out.

94
00:07:22.760 --> 00:07:31.250
So in Postman, remember, we are sending a new request to slash API slash create post within the body

95
00:07:31.250 --> 00:07:31.940
of our request.

96
00:07:31.940 --> 00:07:36.170
We have a bit of JSON with title body and token.

97
00:07:36.650 --> 00:07:38.480
Let's go ahead and send this request.

98
00:07:39.440 --> 00:07:43.610
If I scroll down, we can see the server responded with congrats.

99
00:07:44.150 --> 00:07:45.800
Let's go see if that truly worked.

100
00:07:45.800 --> 00:07:51.710
So in the Web browser, you can see I'm not logged in with any account, but if in the address bar I

101
00:07:51.710 --> 00:07:53.930
go visit the profile for the Brad user.

102
00:07:54.410 --> 00:07:57.350
So slash profile slash Brad.

103
00:07:58.820 --> 00:07:59.420
Awesome.

104
00:07:59.420 --> 00:08:03.230
The newest post by Brad is my new post through the API.

105
00:08:03.230 --> 00:08:07.760
And if I click on it, in addition to the title, we do see the body content.

106
00:08:08.270 --> 00:08:15.890
However, if I go back into post man and adjust my body JSON maybe to not include a title property and

107
00:08:15.890 --> 00:08:17.090
send off the request.

108
00:08:17.480 --> 00:08:23.360
Now the response from the server is you must provide a title and perhaps most importantly, if I add

109
00:08:23.360 --> 00:08:29.510
that title back in, but I do not include a token or better yet, if I do include a token.

110
00:08:29.510 --> 00:08:34.340
But it's not a valid token, so maybe just even change one character.

111
00:08:34.670 --> 00:08:40.490
So just literally change the very first character of the token and it will no longer be valid.

112
00:08:40.490 --> 00:08:45.260
So if I send that request, sorry, you must provide a valid token.

113
00:08:45.770 --> 00:08:46.400
Perfect.

114
00:08:46.520 --> 00:08:52.100
And this brings us to the number one question that I think you might have right now for the majority

115
00:08:52.100 --> 00:08:52.850
of this video.

116
00:08:52.850 --> 00:08:59.360
You've probably been yelling at the screen wondering how in the world are we trusting this token?

117
00:09:00.020 --> 00:09:06.650
Right, because it's not like sessions where the cookie just stored the session identifier, but then

118
00:09:06.830 --> 00:09:10.310
the actual session data was stored on our server.

119
00:09:10.790 --> 00:09:11.060
Right.

120
00:09:11.060 --> 00:09:13.850
And we know that our server is a trusted environment.

121
00:09:14.240 --> 00:09:21.320
Whereas with this token based approach, remember, if we go back into our user controller file and

122
00:09:21.320 --> 00:09:30.290
find our API log in function, remember when we call JWT signed, we are actually storing data in the

123
00:09:30.290 --> 00:09:30.860
token.

124
00:09:31.340 --> 00:09:37.760
And then when the user sends that token back to us, we're actually using and trusting and believing

125
00:09:37.760 --> 00:09:38.410
this data.

126
00:09:38.990 --> 00:09:44.330
Now, at first glance, this seems to violate everything we've learned up until this point in the course,

127
00:09:44.780 --> 00:09:45.070
right.

128
00:09:45.080 --> 00:09:49.160
Normally you can't implicitly trust what users send you.

129
00:09:49.490 --> 00:09:53.120
However, this is the beauty of JSON Web tokens.

130
00:09:53.660 --> 00:09:58.790
We only ever trust this payload data if we've determined the token is valid.

131
00:09:59.120 --> 00:09:59.660
This is why.

132
00:09:59.730 --> 00:10:06.690
We're not just sending the data in the token, we are signing it or giving it a signature with our unique

133
00:10:06.690 --> 00:10:15.240
or secret phrase, this makes it nearly cryptographically impossible for a malicious user to manipulate

134
00:10:15.450 --> 00:10:19.580
or try to edit their token to have someone else's user ID.

135
00:10:20.070 --> 00:10:28.530
Right, because within our API must be logged in function when we call JWT verify this will have no

136
00:10:28.530 --> 00:10:32.120
problems determining fake or manipulated tokens.

137
00:10:32.520 --> 00:10:32.780
Right.

138
00:10:32.790 --> 00:10:36.150
It's going to check to see if the signature is a match.

139
00:10:36.690 --> 00:10:43.410
If it is a match, that means it's a token that we ourselves signed and generated, which in that case

140
00:10:43.410 --> 00:10:47.590
we can implicitly trust the data payload from the token.

141
00:10:48.360 --> 00:10:51.000
So now the question is, why is this a big deal?

142
00:10:51.210 --> 00:10:54.660
Or I should say, why are JSON Web tokens so popular?

143
00:10:54.960 --> 00:11:01.170
Well, it's because they allow for something that is called stateless authentication, meaning we don't

144
00:11:01.170 --> 00:11:03.840
need to keep track of session data on our server.

145
00:11:04.200 --> 00:11:09.270
And this can greatly simplify and speed up what's going on on our server.

146
00:11:09.600 --> 00:11:15.870
So if we don't need to store session data in memory or in a database, that's just one less thing that

147
00:11:15.870 --> 00:11:17.070
our server needs to do.

148
00:11:17.370 --> 00:11:19.830
It's just one less thing we need to keep track of.

149
00:11:20.270 --> 00:11:26.010
So big picture, we don't need to keep track of session data because the tokens contain all of the data

150
00:11:26.010 --> 00:11:29.640
we need to authenticate and identify requests.

151
00:11:30.210 --> 00:11:36.600
Now, this stateless authentication approach is great and in my opinion, for an API, it's a perfect

152
00:11:36.600 --> 00:11:36.900
fit.

153
00:11:37.500 --> 00:11:41.040
But that doesn't mean tokens are a perfect fit for everything.

154
00:11:41.580 --> 00:11:48.090
Now, I'm not going to get into the politics or the debate of sessions versus tokens because largely

155
00:11:48.090 --> 00:11:49.970
I think that whole debate is misguided.

156
00:11:50.340 --> 00:11:55.530
I think both sessions and tokens each have their pros and cons and in different situations, I think

157
00:11:55.530 --> 00:11:57.320
one would make sense over the other.

158
00:11:57.840 --> 00:12:03.120
The reason I bring this up is because there are people online who would have you believe that going

159
00:12:03.120 --> 00:12:09.420
forward everything should use tokens and nothing should ever use sessions, which in my opinion, that

160
00:12:09.420 --> 00:12:10.980
is completely misguided.

161
00:12:11.280 --> 00:12:17.760
In fact, if we look at the top Fortune 500 companies or even the top Fortune 100 companies, most of

162
00:12:17.760 --> 00:12:20.570
their websites still indeed use sessions.

163
00:12:21.060 --> 00:12:22.530
So this is just my opinion.

164
00:12:22.530 --> 00:12:28.320
But there are certain situations and applications where I would use tokens and there are other situations

165
00:12:28.320 --> 00:12:29.570
where I would use sessions.

166
00:12:30.030 --> 00:12:36.210
Now, I'm not going to jump into a fully in-depth list of the pros and cons of tokens and sessions.

167
00:12:36.570 --> 00:12:39.660
I'll just say that I don't think you should have a dogmatic approach.

168
00:12:39.840 --> 00:12:46.170
And if this topic interests you, I encourage you to Google for tokens versus sessions or tokens and

169
00:12:46.170 --> 00:12:52.370
sessions, pros and cons and do a bit of your own research really within the context of this course,

170
00:12:52.680 --> 00:12:58.660
all that matters is that you understand both approaches and you know how to implement both approaches.

171
00:12:59.100 --> 00:13:01.470
I'm not here to force you to use one or the other.

172
00:13:01.800 --> 00:13:05.970
In my opinion, a good developer has both in their toolbox and can use either.

173
00:13:06.730 --> 00:13:08.400
OK, that's enough for this ramble.

174
00:13:08.640 --> 00:13:15.720
In our next video, we are going to set up the API route for deleting one of your existing posts and

175
00:13:15.720 --> 00:13:21.360
will also set up a bonus route where you can receive an array of posts for a particular author.

176
00:13:21.630 --> 00:13:26.750
And we will learn how to open up that route so that other domains can easily connect to it.

177
00:13:27.390 --> 00:13:33.570
So we'll go into code pattern and practice programmatically loading posts by an author like Browed or

178
00:13:33.570 --> 00:13:39.840
Barks A Lot or your user account, which should really drive home the point that an API is about opening

179
00:13:39.840 --> 00:13:42.960
up your data and making it universally available.

180
00:13:43.530 --> 00:13:47.640
Let's keep things rolling and I will see you in the next video.
