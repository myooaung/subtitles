WEBVTT
1
00:00:01.890 --> 00:00:02.880
Hello, everyone.

2
00:00:03.210 --> 00:00:10.230
In this lesson, we are going to create our very first server without further ado, let's jump right

3
00:00:10.230 --> 00:00:11.160
into the action.

4
00:00:11.820 --> 00:00:17.850
So go ahead and make sure that you have the folder that you created in the previous lesson open in a

5
00:00:17.850 --> 00:00:19.370
text editing program.

6
00:00:19.770 --> 00:00:26.110
And here we can see that I have opened the test JS file that I created in the previous lesson.

7
00:00:26.550 --> 00:00:33.270
Let's go ahead and a race or delete everything inside that file and give ourselves a clean slate.

8
00:00:33.750 --> 00:00:37.860
Or if you wanted to, you could just create a brand new file within that same folder.

9
00:00:38.250 --> 00:00:40.140
OK, so we've got a clean slate.

10
00:00:40.260 --> 00:00:41.980
What is our goal for this lesson?

11
00:00:42.420 --> 00:00:49.920
Well, we want to create a server that listens for incoming requests so that we can visit that server

12
00:00:49.920 --> 00:00:56.490
in our Web browser and have the server send back a response that says something simple, like maybe

13
00:00:56.670 --> 00:00:59.950
Hello World, or welcome to our Web page.

14
00:01:00.690 --> 00:01:07.150
So back in our text editor, the question is, how can we use code to create a server?

15
00:01:07.710 --> 00:01:11.520
The answer is that we need to use environmental jargon.

16
00:01:12.000 --> 00:01:20.040
So the first step is to realize that we are writing code for the node environment, not the web browser

17
00:01:20.040 --> 00:01:20.780
environment.

18
00:01:21.210 --> 00:01:27.330
So back when we were writing code for the Web browser environment, we could use the JavaScript language

19
00:01:27.330 --> 00:01:28.210
itself, right?

20
00:01:28.230 --> 00:01:29.520
The core of the language.

21
00:01:29.770 --> 00:01:34.140
We could say something like let favorite number equal seven.

22
00:01:34.500 --> 00:01:34.800
Right.

23
00:01:34.800 --> 00:01:38.810
And that's valid JavaScript, no matter which environment we are in.

24
00:01:39.180 --> 00:01:45.480
However, back in the Web browser, if we wanted to do something Web browser ish, like respond to a

25
00:01:45.480 --> 00:01:52.980
click event or select an element, we needed to use special words like, remember, the Web browser

26
00:01:52.980 --> 00:01:59.820
has an object named document and document is not part of the JavaScript language itself.

27
00:02:00.060 --> 00:02:05.790
It's just a word that the Web browser brings to the table so that we as programmers can leverage the

28
00:02:05.790 --> 00:02:07.170
environment that we are in.

29
00:02:07.800 --> 00:02:10.260
Well, we need to do the same thing with node.

30
00:02:10.620 --> 00:02:16.830
So we are in the node environment and we want to do something no dish like setting up a server.

31
00:02:17.190 --> 00:02:20.310
So we need to use nodes, special words.

32
00:02:20.640 --> 00:02:30.630
So typed this out with me h, t, p and then we want to look inside that and call a method named create

33
00:02:31.140 --> 00:02:34.500
server parentheses to call the method.

34
00:02:34.890 --> 00:02:36.000
And just a quick note.

35
00:02:36.000 --> 00:02:43.590
If you're using voice code as your text editor like I am, you might notice that when you type HTP.

36
00:02:44.670 --> 00:02:51.120
It gives you all of these suggestions, and if you try to type a dot right after that, it's going to

37
00:02:51.120 --> 00:02:52.940
use one of the suggestions.

38
00:02:53.310 --> 00:02:58.980
So what you can do is type HTTP and then either hit the escape key on your keyboard to get rid of the

39
00:02:58.980 --> 00:03:05.100
suggestions or just push the arrow keys on your keyboard to move around a little bit and then you can

40
00:03:05.100 --> 00:03:10.080
include the DOT and then create server parentheses.

41
00:03:10.680 --> 00:03:18.780
Now HTP is not part of the JavaScript language itself, but just like the Web browser has the document

42
00:03:18.780 --> 00:03:25.830
object that we can leverage, the node environment has this HTTP object that we're going to leverage

43
00:03:26.310 --> 00:03:26.730
now.

44
00:03:26.740 --> 00:03:32.990
We don't want the server that this method is going to create to just float around in outer space.

45
00:03:33.510 --> 00:03:36.260
So instead let's store it in a variable.

46
00:03:36.750 --> 00:03:44.010
So at the beginning of this line we can just say let and then I'm going to say our app equals.

47
00:03:44.010 --> 00:03:47.120
But you could choose whatever variable name you want.

48
00:03:47.460 --> 00:03:49.310
You don't have to use our app.

49
00:03:49.320 --> 00:03:52.370
You could call it pizza or unicorn or anything.

50
00:03:52.770 --> 00:03:59.340
OK, but the point is, is that we now have this variable that is a server and we know that the job

51
00:03:59.340 --> 00:04:03.390
of a server is to listen for incoming requests.

52
00:04:03.750 --> 00:04:06.780
So let's tell the server to begin listening.

53
00:04:07.360 --> 00:04:12.810
So on a new line, I'm going to say our app dot listen.

54
00:04:13.590 --> 00:04:13.890
Right.

55
00:04:13.950 --> 00:04:20.400
So just like way back in one of our very first lessons when we had a dog object and told it to jump

56
00:04:20.850 --> 00:04:28.260
or we had a cat object and told it to meow, in this case we have a server object and we are telling

57
00:04:28.260 --> 00:04:29.850
it to begin listening.

58
00:04:30.480 --> 00:04:38.670
Next, what we need to do is tell the server what exactly it should do when it does receive a request.

59
00:04:39.150 --> 00:04:39.480
Right.

60
00:04:39.540 --> 00:04:43.740
What should the server do in response to an incoming request?

61
00:04:43.980 --> 00:04:48.720
Well, that's exactly what these parentheses up on the first line of code are for.

62
00:04:49.140 --> 00:04:57.600
When we call the http dot create server method, we want to pass it a function as an argument and then

63
00:04:57.600 --> 00:05:04.470
the server is going to run or execute or call that function every time it receives an incoming request.

64
00:05:05.010 --> 00:05:11.850
So you could make up a name for a function here and then down here, define a function with that matching

65
00:05:11.850 --> 00:05:12.260
name.

66
00:05:12.810 --> 00:05:18.240
However, since we don't really need to call this function anywhere else, why don't we just go ahead

67
00:05:18.240 --> 00:05:22.740
and create an anonymous function right within these parentheses?

68
00:05:23.310 --> 00:05:30.060
So I'm going to say function, parentheses, curly brackets and feel free to drop down inside the curly

69
00:05:30.060 --> 00:05:30.750
brackets.

70
00:05:31.560 --> 00:05:37.410
And actually, before we start writing the body of our function here, let's first give our function

71
00:05:37.650 --> 00:05:38.970
to parameters.

72
00:05:39.390 --> 00:05:46.140
So right after the word function within these parentheses, let's say RFQ, which is short for request,

73
00:05:46.500 --> 00:05:53.340
and then let's include a comma and include another parameter and name it address, which is short for

74
00:05:53.460 --> 00:05:54.540
response.

75
00:05:55.080 --> 00:06:00.210
Technically, you could make up any two names you want for the parameters, but these names make a whole

76
00:06:00.210 --> 00:06:02.870
lot of sense, request and response.

77
00:06:03.270 --> 00:06:10.800
OK, and now within the body of our function, we can leverage the request and response objects that

78
00:06:10.800 --> 00:06:15.730
the server is going to pass into our function every time it calls the function.

79
00:06:16.200 --> 00:06:21.810
Now we will learn more about the request object in a few minutes, but for now, all we really need

80
00:06:21.810 --> 00:06:24.030
is the response object.

81
00:06:24.420 --> 00:06:26.430
So remember our goal for this lesson?

82
00:06:26.670 --> 00:06:33.360
When someone sends a request to our server, we simply want to respond by saying hello and welcome to

83
00:06:33.360 --> 00:06:34.100
our Web site.

84
00:06:34.410 --> 00:06:41.000
So within the body of our function, let's use the response object and call a method named and write.

85
00:06:41.100 --> 00:06:50.550
We want to end our response by sending a little bit of text that says hello and welcome to our website.

86
00:06:51.520 --> 00:06:58.530
OK, now, before we save this file until node to actually run it, there are two tiny details that

87
00:06:58.530 --> 00:06:59.650
we need to address.

88
00:07:00.210 --> 00:07:09.150
So first, in the node environment, whenever we use a special node word or ability in this case HTP,

89
00:07:09.540 --> 00:07:16.890
we need to explicitly tell node to load or import or require in that functionality or that ability.

90
00:07:17.310 --> 00:07:25.350
So even though HTP is part of node, we still need to add a new line of code up the very top of our

91
00:07:25.350 --> 00:07:36.760
file and say let HTP equal and then we tell node to load or import or require in that ability.

92
00:07:36.990 --> 00:07:39.990
So we just say require parentheses.

93
00:07:39.990 --> 00:07:43.440
And in those parentheses we say quotes htp.

94
00:07:43.860 --> 00:07:44.190
No.

95
00:07:44.360 --> 00:07:50.060
We'll know what we mean with this chunk of code, and then we are storing that functionality in a variable

96
00:07:50.450 --> 00:07:51.910
named HTP.

97
00:07:51.910 --> 00:07:57.380
So then in our code down here, node will know what we mean when we say HTP.

98
00:07:57.870 --> 00:08:02.720
OK, there's only one more detail that we need to take care of before we save the file and take it for

99
00:08:02.720 --> 00:08:09.020
a test drive down on our very bottom line within the parentheses for the listen method.

100
00:08:09.320 --> 00:08:10.460
We need to pass it.

101
00:08:10.580 --> 00:08:11.450
A port.

102
00:08:11.450 --> 00:08:13.160
No, as an argument.

103
00:08:13.730 --> 00:08:15.710
Let's say three thousand.

104
00:08:16.160 --> 00:08:21.710
Don't worry, I do not expect this number of three thousand to make sense right now, but it will come

105
00:08:21.710 --> 00:08:23.360
into focus very soon.

106
00:08:23.600 --> 00:08:30.650
OK, now let's go ahead and save this file and then let's use the command line to tell Node to run or

107
00:08:30.650 --> 00:08:31.930
execute our file.

108
00:08:32.300 --> 00:08:38.690
If you're using voice code, you can open up your command line by pushing control in the till the key,

109
00:08:39.440 --> 00:08:43.420
or you can always click the view menu and then choose terminal.

110
00:08:43.880 --> 00:08:49.960
OK, in the command line, let's say node and then a space and then the name of our file.

111
00:08:50.360 --> 00:08:52.310
So my file is named Test.

112
00:08:52.610 --> 00:08:56.420
James, yours might be named something different, so keep that in mind.

113
00:08:56.690 --> 00:09:00.080
But after you type in node in the final name, push enter.

114
00:09:01.640 --> 00:09:05.810
And now at this point our server is up and running right now.

115
00:09:05.810 --> 00:09:11.260
I want you to jump over to your Web browser and let's try to send a request to the server.

116
00:09:11.840 --> 00:09:19.700
So up in the address bar, type this in with me, clear out the address bar and let's say localhost

117
00:09:20.240 --> 00:09:23.960
localhost is the address for your own computer.

118
00:09:24.260 --> 00:09:29.090
And then we can say Colen and then the port number that our server is running on.

119
00:09:29.420 --> 00:09:32.360
And remember, we chose a port number of three thousand.

120
00:09:32.720 --> 00:09:35.690
So localhost Colen three thousand push enter.

121
00:09:36.540 --> 00:09:37.250
Awesome.

122
00:09:37.280 --> 00:09:39.300
There we see the response from our server.

123
00:09:39.650 --> 00:09:42.360
Hello and welcome to our Web site.

124
00:09:42.920 --> 00:09:46.760
So at this point, we've accomplished the original goal of this lesson.

125
00:09:47.030 --> 00:09:52.610
We created a server that listens for incoming requests and it sends back a response.

126
00:09:52.940 --> 00:09:54.670
Well, that didn't take too long.

127
00:09:54.860 --> 00:09:58.370
So let's give ourselves another new goal for this lesson.

128
00:09:58.670 --> 00:10:05.120
So with a real world website or Web application, we know that you can visit different are to visit

129
00:10:05.120 --> 00:10:06.260
different pages.

130
00:10:06.620 --> 00:10:11.120
For example, a lot of websites have an about page or an about US page.

131
00:10:11.540 --> 00:10:18.200
So if we came up into the address bar and after the three thousand added a slash about and tried to

132
00:10:18.200 --> 00:10:22.670
visit that URL, we still see the exact same response.

133
00:10:23.120 --> 00:10:29.810
So let's give ourselves the goal of sending back different responses, depending on the you are all

134
00:10:29.930 --> 00:10:31.550
that the visitor is trying to visit.

135
00:10:31.940 --> 00:10:33.890
How about if someone visits the base?

136
00:10:33.890 --> 00:10:36.050
You URL just localhost three thousand.

137
00:10:36.050 --> 00:10:39.980
We send back text that says hello and welcome to our home page.

138
00:10:40.460 --> 00:10:46.340
And if they visit maybe about we say thank you for the interest in our company.

139
00:10:46.700 --> 00:10:48.510
So how can we accomplish that?

140
00:10:49.010 --> 00:10:55.640
Well, let's jump back into our text editor and this is a great time to learn about the request object.

141
00:10:56.060 --> 00:11:01.470
Remember that every time the server receives an incoming request, it's going to run our function.

142
00:11:01.760 --> 00:11:07.190
Now, we've already leveraged the response object that gets passed into our function.

143
00:11:07.700 --> 00:11:09.050
We called response DOT.

144
00:11:09.050 --> 00:11:16.010
And to send back this response, well, now let's leverage the request object that gets passed into

145
00:11:16.010 --> 00:11:16.700
our function.

146
00:11:17.150 --> 00:11:23.170
The request object contains a bunch of information about the current incoming request.

147
00:11:23.600 --> 00:11:29.870
So if we want to be aware of which you are URL, the users trying to visit, all we need to do is dig

148
00:11:29.870 --> 00:11:31.300
in to the request object.

149
00:11:31.760 --> 00:11:37.070
Let me show you what I mean within the body of our function here, maybe right before this response,

150
00:11:37.070 --> 00:11:38.240
not end line.

151
00:11:38.720 --> 00:11:43.370
Let's add a brand new line and say console dot log.

152
00:11:43.910 --> 00:11:52.430
And what we want to log is our Q or request and then dot and look inside it for a property named you

153
00:11:52.430 --> 00:12:00.320
are l OK, go ahead and save the file and then we need to close or quit the current instance of node

154
00:12:00.320 --> 00:12:03.590
that is running our old file or our outdated file.

155
00:12:03.890 --> 00:12:09.650
So down in the command line, push control and see on your keyboard at the same time.

156
00:12:10.610 --> 00:12:17.120
OK, that just told Node to stop running our previous version of our code because the listen method

157
00:12:17.120 --> 00:12:19.130
is open ended or ongoing.

158
00:12:19.340 --> 00:12:23.480
It's just going to keep listening until we tell it to stop listening.

159
00:12:24.020 --> 00:12:29.660
So we stopped our server and now that we've saved the changes to this file, we just want to start the

160
00:12:29.660 --> 00:12:31.040
server back up again.

161
00:12:31.520 --> 00:12:37.220
So just run the exact same command node test or whatever the name of your file is.

162
00:12:38.090 --> 00:12:44.060
OK, now if we go back into the Web browser and if we try to visit localhost three thousand.

163
00:12:44.200 --> 00:12:51.790
Slash about and then jump back into the command line, you can see that that got logged out to the console,

164
00:12:51.910 --> 00:12:53.520
that slash about.

165
00:12:54.010 --> 00:12:58.570
So now each time a request comes into the server, are functions going to run?

166
00:12:58.570 --> 00:13:00.020
And we're going to see that value.

167
00:13:00.220 --> 00:13:05.950
So if you typed slash pizza and tried to visit that URL, you better believe that you're going to see

168
00:13:05.950 --> 00:13:09.820
that in the node console and back in the Web browser.

169
00:13:09.820 --> 00:13:16.750
If we just visited the base URL localhost Kolan three thousand, we just see a forward slash with nothing

170
00:13:16.750 --> 00:13:17.230
after it.

171
00:13:17.860 --> 00:13:22.120
Now this might seem basic, but this really opens up the door to a lot of possibilities.

172
00:13:22.480 --> 00:13:23.690
Let me show you what I mean.

173
00:13:23.920 --> 00:13:25.120
So back up in our code.

174
00:13:25.120 --> 00:13:27.880
Let's get rid of this console log line.

175
00:13:29.650 --> 00:13:34.090
And then let's go ahead and cut this response and line into our clipboard.

176
00:13:35.140 --> 00:13:36.070
So cut that.

177
00:13:36.310 --> 00:13:43.810
OK, now let's use an if statement to send back a different response, depending on the euro, the users

178
00:13:43.810 --> 00:13:44.590
trying to visit.

179
00:13:45.370 --> 00:13:46.300
Let me show you what I mean.

180
00:13:46.310 --> 00:13:53.440
So let's say if parentheses, curly brackets and for the condition in the if parentheses, we can just

181
00:13:53.440 --> 00:13:56.380
say if request you are URL.

182
00:13:57.570 --> 00:14:02.850
Equals quotes and then just a forward slash, that would be the home page.

183
00:14:03.510 --> 00:14:08.490
So within the curly brackets for the statement, you can paste in your clipboard and let's adjust it

184
00:14:08.490 --> 00:14:12.960
to say hello and welcome to our home page.

185
00:14:14.510 --> 00:14:20.480
OK, and then right below this if statement was just set up, another if statement, say if parentheses

186
00:14:20.480 --> 00:14:26.720
curly brackets for this condition, let's say if requested, you are all equals.

187
00:14:27.860 --> 00:14:35.120
And again, that's double equals sign to check for equality instead of assigning a value if it equals

188
00:14:35.120 --> 00:14:42.710
quotes about well then within the curly brackets for that if statement based in your clipboard, let's

189
00:14:42.710 --> 00:14:45.770
send back a response relevant to the about page.

190
00:14:46.250 --> 00:14:49.880
Say thank you for the interest in our company.

191
00:14:52.310 --> 00:14:58.640
OK, now let's go ahead and save the file and test it out, so down in the command line, let's quit

192
00:14:58.670 --> 00:15:00.080
this instance of Noad.

193
00:15:00.740 --> 00:15:01.920
So control see?

194
00:15:02.780 --> 00:15:08.030
Be sure to click onto the command line area of your screen before trying to push control.

195
00:15:08.030 --> 00:15:13.890
See, and we just want to fire the server up again using the newest version of our code in this file.

196
00:15:14.180 --> 00:15:16.040
So again, we just say no test.

197
00:15:17.180 --> 00:15:19.360
And over in the Web browser, let's try it out.

198
00:15:19.370 --> 00:15:21.950
So if we visit, just localhost three thousand.

199
00:15:23.240 --> 00:15:25.100
Hello and welcome to our home page.

200
00:15:25.100 --> 00:15:27.800
If we visit Slash about.

201
00:15:28.730 --> 00:15:30.730
Thank you for the interest in our company.

202
00:15:31.280 --> 00:15:31.900
Awesome.

203
00:15:32.150 --> 00:15:37.100
Now, while we're at it, why don't we add a fallback so that if someone tries to visit a different

204
00:15:37.110 --> 00:15:42.020
Eurail, the world doesn't end and our server doesn't just sit there and hang or throw an error?

205
00:15:42.560 --> 00:15:44.780
Let me show you what I mean back in our text editor.

206
00:15:45.110 --> 00:15:50.780
If neither of these if statements is true, meaning if someone tries to visit a neutral that is not

207
00:15:50.780 --> 00:15:56.240
the base you URL, nor is it about, well, we just want to handle that situation.

208
00:15:56.600 --> 00:16:02.780
So maybe right below this second if statement, let's just paste in our clipboard or you can just manually

209
00:16:02.780 --> 00:16:11.510
type it out and say response our end and say we cannot find the page you are looking for.

210
00:16:16.200 --> 00:16:21.210
OK, I'm going to save the file, come down to the command line, click anywhere in this command line

211
00:16:21.210 --> 00:16:27.870
area and push control C to stop the old server and then fire up the latest version of our codes of no

212
00:16:27.870 --> 00:16:30.630
test, come back to the Web browser.

213
00:16:31.620 --> 00:16:33.810
So we see that our about page still works.

214
00:16:34.110 --> 00:16:35.460
The home page still works.

215
00:16:35.460 --> 00:16:42.810
But if I try to visit a bogus URL, we cannot find the page you are looking for at this point.

216
00:16:42.820 --> 00:16:48.210
I want you to give yourself a pat on the back because you just created your first server.

217
00:16:48.630 --> 00:16:55.950
Now I realize this super basic server might not seem very impressive, but it does open the door to

218
00:16:55.950 --> 00:16:57.890
all sorts of possibilities.

219
00:16:58.290 --> 00:17:01.050
So the question becomes, what's next?

220
00:17:01.080 --> 00:17:02.280
Where do we go from here?

221
00:17:02.580 --> 00:17:09.360
Well, so far, our server or app can respond to the role of the incoming request.

222
00:17:09.360 --> 00:17:16.110
But do you know it would make our server a thousand times more interesting if we could respond to the

223
00:17:16.110 --> 00:17:19.910
value that users type into form fields?

224
00:17:20.400 --> 00:17:24.300
And that's exactly what we're going to learn about in the next lesson.

225
00:17:24.660 --> 00:17:29.790
We will learn how to work with user submitted data in our server.

226
00:17:30.210 --> 00:17:37.410
So perhaps we could include a question on our Web page that reads What color is the sky on a clear,

227
00:17:37.410 --> 00:17:38.190
sunny day?

228
00:17:38.550 --> 00:17:44.100
And then we could have a text input field where the user can type and then we can have a submit button

229
00:17:44.100 --> 00:17:52.200
that they can click and then we can use our server to evaluate their answer and either send back a congratulations

230
00:17:52.200 --> 00:17:58.830
response that says, yep, that's the correct answer, or send back a sorry response that says, nope,

231
00:17:58.830 --> 00:17:59.490
try again.

232
00:17:59.490 --> 00:18:00.420
That's incorrect.

233
00:18:00.990 --> 00:18:09.140
This process of working with an evaluating user submitted data is crucial to becoming a full stack developer.

234
00:18:09.510 --> 00:18:15.240
However, before we jump into that next lesson, I do have an important quick note to share.

235
00:18:15.600 --> 00:18:21.990
When it comes to the server that we built in this lesson, I want you to know that you are the only

236
00:18:21.990 --> 00:18:25.100
person who can access or view your server.

237
00:18:25.470 --> 00:18:29.490
Remember, that's what the localhost in our address stands for.

238
00:18:29.730 --> 00:18:32.100
It means your specific computer.

239
00:18:32.430 --> 00:18:37.830
In the real world, we would want other people to be able to access our server or application.

240
00:18:38.190 --> 00:18:43.500
So in the real world, we would send our code, our code that creates the server.

241
00:18:43.620 --> 00:18:46.080
We would send that to a hosting company.

242
00:18:46.470 --> 00:18:50.430
That company would host our server for us and make it publicly available.

243
00:18:50.730 --> 00:18:58.620
And then instead of localhost three thousand, the address for our server could be our app dot com or

244
00:18:58.620 --> 00:19:01.920
super awesome app dot com or whatever your domain is.

245
00:19:02.450 --> 00:19:04.170
Big picture for right now.

246
00:19:04.260 --> 00:19:11.010
You can rest assured that later on in the course we will indeed learn how to make a server publicly

247
00:19:11.010 --> 00:19:11.700
available.

248
00:19:11.910 --> 00:19:17.070
And when that time comes, you will be able to share the address to your server with your friends and

249
00:19:17.070 --> 00:19:20.730
family and they will be able to access it and see what you built.

250
00:19:21.060 --> 00:19:25.710
Because let's be honest, sharing something that you created with the people in your life that you care

251
00:19:25.710 --> 00:19:31.110
about is the funnest aspect of learning anything new, and that includes programming.

252
00:19:31.440 --> 00:19:33.540
But for now, we are just getting started.

253
00:19:33.720 --> 00:19:35.610
We are just learning the basics.

254
00:19:35.820 --> 00:19:41.280
So it's OK that we are using localhost and that we are the only ones that can view the server.

255
00:19:41.790 --> 00:19:48.420
OK, having said that, we are ready to move on to our next lesson and learn how to work with user submitted

256
00:19:48.420 --> 00:19:48.930
data.

257
00:19:49.320 --> 00:19:53.430
Let's keep our momentum rolling and I will see you in the next lesson.
