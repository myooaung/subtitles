WEBVTT
1
00:00:01.820 --> 00:00:02.840
Hello, everyone.

2
00:00:03.050 --> 00:00:10.040
In this lesson, we are going to finish our example API, so at the end of our previous video, we had

3
00:00:10.040 --> 00:00:15.570
successfully set up our API slash create post wrapped.

4
00:00:16.250 --> 00:00:21.620
Well, now let's set up a route that would let a user delete one of their existing posts.

5
00:00:22.100 --> 00:00:25.600
So do this with me within our actual Web application.

6
00:00:26.000 --> 00:00:28.350
Find a post that you would want to delete.

7
00:00:28.940 --> 00:00:34.520
So in my case, from the Brad profile, I would want to delete this newest post through the API.

8
00:00:34.520 --> 00:00:40.850
So if I click on it to view that individual post and then I would want you to grab the ID for this post,

9
00:00:41.060 --> 00:00:43.460
which is the final segment of this, you are out.

10
00:00:43.820 --> 00:00:48.380
So just go ahead and copy the idea of a post that you want to delete into your clipboard.

11
00:00:49.880 --> 00:00:53.870
OK, and then back in Postman, let's adjust the euro.

12
00:00:53.990 --> 00:01:02.930
So it would still be slash API and then let's say slash post slash and then paste in the idea that you'd

13
00:01:02.930 --> 00:01:03.600
want to delete.

14
00:01:04.340 --> 00:01:07.550
Now you might be saying, hey, where is the word delete in this route?

15
00:01:07.970 --> 00:01:10.040
Well, check this out to the left.

16
00:01:10.040 --> 00:01:13.010
We can choose the type of request now.

17
00:01:13.010 --> 00:01:13.430
Yes.

18
00:01:13.430 --> 00:01:19.730
Within the context of a traditional HTML form, there are only options of git in post.

19
00:01:20.390 --> 00:01:26.030
But if you're sending requests programmatically through front end JavaScript or through another languages

20
00:01:26.030 --> 00:01:29.300
syntax, there are additional types of requests.

21
00:01:29.870 --> 00:01:32.660
And here we see that one of the types is delete.

22
00:01:33.140 --> 00:01:34.050
So select that.

23
00:01:34.850 --> 00:01:42.770
So now we are sending a delete http request to slash API slash post and then the idea of the post.

24
00:01:43.200 --> 00:01:47.120
OK, now click on the body tab and then make sure RAW is selected.

25
00:01:47.330 --> 00:01:52.280
And in terms of the JSON that we want to send over, we no longer need title or body.

26
00:01:52.610 --> 00:01:55.220
We only need one property named Token.

27
00:01:56.030 --> 00:02:01.400
And at some point in the previous lesson I adjusted the token to be wrong or invalid on purpose.

28
00:02:01.760 --> 00:02:01.970
Right.

29
00:02:01.970 --> 00:02:05.390
Just so we can test to make sure that the server would indeed send back.

30
00:02:05.390 --> 00:02:08.030
Sorry, you must provide a valid token.

31
00:02:08.510 --> 00:02:13.820
If you did the same thing, just make sure you paste back in your valid real token, or if you need

32
00:02:13.820 --> 00:02:19.130
to generate a new token, just send a new request to slash API slash login.

33
00:02:19.760 --> 00:02:24.280
Anyways, I'm copying and pasting my token that I still had in this text editor file.

34
00:02:24.980 --> 00:02:27.360
So let me paste back in the correct token.

35
00:02:29.090 --> 00:02:29.410
Cool.

36
00:02:29.600 --> 00:02:34.640
Now, obviously, if I sent this request, it would not work because we have not set up this route yet.

37
00:02:35.000 --> 00:02:41.540
So let's go do that within our text editor within the route of your project, jump into Rueter Dash

38
00:02:41.540 --> 00:02:43.750
API J.S..

39
00:02:44.630 --> 00:02:47.060
OK, right below this route, let's just set up a new one.

40
00:02:47.060 --> 00:02:54.530
So API router and instead of doGet or post, let's say dot delete.

41
00:02:55.280 --> 00:02:55.470
Right.

42
00:02:55.520 --> 00:03:04.300
If someone sends a delete request two quotes, slash post slash and then it would be colon.

43
00:03:04.760 --> 00:03:12.680
I'd OK after the quotes, let's say comma and let's begin by calling our API must be logged in function.

44
00:03:13.160 --> 00:03:22.670
So user controller let me hide the sidebar so there's a bit more room user controller dot api must be

45
00:03:22.850 --> 00:03:31.970
logged in comma and then finally we'd want to call post controller and this function doesn't exist yet

46
00:03:31.970 --> 00:03:36.460
but let's say dot api uppercase D for delete.

47
00:03:37.310 --> 00:03:43.280
OK, let's save this file and now we better go jump in post controller and create this function.

48
00:03:44.420 --> 00:03:51.560
So within your controllers folder jump into post control Airgas within our post controller.

49
00:03:51.560 --> 00:03:55.700
Let's save a bit of typing by finding our existing delete function.

50
00:03:56.480 --> 00:04:01.550
So for me it's around line number seventy nine is the line that begins with exports.

51
00:04:01.550 --> 00:04:03.290
Dot delete equals.

52
00:04:04.010 --> 00:04:10.280
So I would just copy and paste this entire function right below it, create the pasted duplicate copy

53
00:04:10.490 --> 00:04:15.650
and change the name of this copy to API uppercase delete.

54
00:04:16.190 --> 00:04:21.890
OK, and then let's just adjust this to not be tightly coupled to the web browser experience.

55
00:04:22.310 --> 00:04:28.130
So we'd still want to work with our post model and use its delete method and we'd still want the first

56
00:04:28.130 --> 00:04:31.610
argument to be the ID parameter from the URL.

57
00:04:32.180 --> 00:04:34.790
But we do need to change this second argument.

58
00:04:35.360 --> 00:04:35.620
Right.

59
00:04:35.630 --> 00:04:38.750
This is the idea of the current user that's making the request.

60
00:04:39.200 --> 00:04:43.700
So instead of requesting visitor ID, we can actually keep the RFQ dot.

61
00:04:43.970 --> 00:04:50.810
So just get rid of visitor ID and instead say API user dot underscore ID.

62
00:04:51.530 --> 00:04:53.780
Right, because our API must be logged in.

63
00:04:53.780 --> 00:04:55.400
Function will make this available.

64
00:04:55.880 --> 00:05:01.130
OK, now you might be starting to see the true benefits of the MVC pattern are.

65
00:05:01.520 --> 00:05:06.770
Models delete method is going to take care of all of the validation checks and permission checks and

66
00:05:06.770 --> 00:05:07.740
business logic.

67
00:05:08.090 --> 00:05:14.330
So if this user is the owner of this post and the delete goes through successfully, then R then function

68
00:05:14.330 --> 00:05:14.840
would run.

69
00:05:15.290 --> 00:05:19.580
So let's get rid of these requests, flash and sessions, save lines.

70
00:05:20.160 --> 00:05:21.770
So just delete these two lines.

71
00:05:23.550 --> 00:05:30.270
And instead, maybe just respond to Jason and say success, but if the user is not the owner of this

72
00:05:30.270 --> 00:05:33.100
requested post, then our catch function will run.

73
00:05:33.570 --> 00:05:35.250
So let's get rid of these two lines.

74
00:05:35.850 --> 00:05:40.260
And instead we can just say response that Jason, bit of text.

75
00:05:40.530 --> 00:05:45.300
You do not have permission to perform that action.

76
00:05:46.400 --> 00:05:49.470
OK, let's go ahead and save this and test it out.

77
00:05:49.880 --> 00:05:54.570
So back in our Web application, maybe I'll go back to the Brad profile, OK?

78
00:05:54.650 --> 00:05:57.690
And now through Postman, I'm going to try to delete this post.

79
00:05:58.040 --> 00:05:59.050
Let's see if it works.

80
00:05:59.060 --> 00:06:02.000
So in Postman, everything's good to go.

81
00:06:02.000 --> 00:06:02.960
We've got our token.

82
00:06:02.960 --> 00:06:04.260
We're sending it to this room.

83
00:06:04.520 --> 00:06:05.990
Let's go ahead and click send.

84
00:06:07.810 --> 00:06:13.840
If I scroll down to the bottom, we see success cool, so back in the browser, I'm assuming if I refresh

85
00:06:14.200 --> 00:06:15.390
that post is gone.

86
00:06:15.490 --> 00:06:16.180
Perfect.

87
00:06:16.630 --> 00:06:21.550
Now let's perform a quick test to make sure that I'm not allowed to delete someone else's post.

88
00:06:22.030 --> 00:06:28.060
So maybe if I go to a different profile, like the bark's a lot profile and maybe if I click on this,

89
00:06:28.060 --> 00:06:29.110
being a dog is fun.

90
00:06:29.110 --> 00:06:35.320
Post and grab the I.D. So to follow along with me, if you have multiple users, just grab the idea

91
00:06:35.320 --> 00:06:40.930
of a post where you are not the author of the post, or I should say, whichever user account you use

92
00:06:40.930 --> 00:06:46.090
to log in to get your JSON Web token, grab an idea of a post from a different user.

93
00:06:46.360 --> 00:06:48.580
So copy that back in Postman.

94
00:06:48.940 --> 00:06:51.360
If I try to delete this post, it should not work.

95
00:06:51.670 --> 00:06:57.790
So up in the address bar if I paste in that new ID and then click send.

96
00:06:59.840 --> 00:07:02.040
I scroll down perfect.

97
00:07:02.060 --> 00:07:05.850
You do not have permission to perform that action at this point.

98
00:07:05.870 --> 00:07:07.160
Let's change gears.

99
00:07:07.490 --> 00:07:14.180
So we've completed all of our example API routes that rely on logging in and authenticating or identifying

100
00:07:14.180 --> 00:07:14.960
requests.

101
00:07:15.500 --> 00:07:18.980
Now, let's focus on a request that should work no matter who you are.

102
00:07:19.310 --> 00:07:19.490
Right?

103
00:07:19.640 --> 00:07:22.720
A request that should just be publicly available to anyone.

104
00:07:23.150 --> 00:07:26.380
So remember, the posts on our site are all public.

105
00:07:26.720 --> 00:07:29.500
So let's set up a new goal for our API.

106
00:07:29.900 --> 00:07:33.470
Let's change the type of request to a get request.

107
00:07:33.800 --> 00:07:34.040
Right.

108
00:07:34.100 --> 00:07:45.380
If someone wants to get data and then let's change the route to be this slash API slash posts by author

109
00:07:46.400 --> 00:07:48.520
Slash and then the author's name.

110
00:07:48.530 --> 00:07:53.900
So in this case, I will say, Brad, but you can include your username and then you can imagine we

111
00:07:53.900 --> 00:08:00.860
would want the server to respond with Jason or I should say an array of objects where each object is

112
00:08:00.860 --> 00:08:01.480
a post.

113
00:08:02.090 --> 00:08:03.530
So let's make that happen.

114
00:08:03.830 --> 00:08:10.780
Back in your text editor, jump into Rouda Dash API, JS below these routes.

115
00:08:10.790 --> 00:08:12.140
Let's just create a new one.

116
00:08:12.140 --> 00:08:24.950
So API router dot git and then quotes if someone sends a request to the API is assumed and then slash

117
00:08:25.160 --> 00:08:35.750
posts by author Slash and then Colen username after the quote, let's include a comma and then the function

118
00:08:35.750 --> 00:08:41.720
that we would want to run would be well if we were building out 100 percent of our functionality in

119
00:08:41.720 --> 00:08:47.660
the API, I would take the extra time to be super organised and maybe create different functions.

120
00:08:47.840 --> 00:08:52.490
And so I would have one that would be user controller dot API.

121
00:08:52.490 --> 00:08:57.320
Does user exist and then if it does, that would call the next function for this route.

122
00:08:57.480 --> 00:09:03.170
And then finally I would have one called post controller dot API get posts by user.

123
00:09:03.470 --> 00:09:08.360
But we're not recreating our application 100 percent in depth through the API.

124
00:09:08.600 --> 00:09:14.180
So just for a quick example, and since our user controller already loads both our post model and user

125
00:09:14.180 --> 00:09:15.590
model, let's just do this.

126
00:09:15.590 --> 00:09:18.860
Let's say user controller DOT.

127
00:09:19.580 --> 00:09:22.670
This function doesn't exist yet, but we can create it in just a moment.

128
00:09:22.670 --> 00:09:27.670
Let's say API get posts by username.

129
00:09:28.520 --> 00:09:33.860
OK, let's go ahead and save this file and now go into user controller and create this function.

130
00:09:35.180 --> 00:09:38.720
So within our controllers folder I would jump into user controller.

131
00:09:40.950 --> 00:09:47.160
We can create this function anywhere within this file, so I'll just scroll up to the very top, let's

132
00:09:47.160 --> 00:09:47.970
create a new line.

133
00:09:47.970 --> 00:09:59.970
Let's say exports dot API, get posts by username that set that to equal a function and give it parameters

134
00:09:59.970 --> 00:10:04.420
of request and response within the body of this function.

135
00:10:04.650 --> 00:10:13.110
Let's set up try and catch blocks to try her the brackets after that catch curly brackets within the

136
00:10:13.110 --> 00:10:13.490
tribe.

137
00:10:13.560 --> 00:10:14.460
OK, let's do this.

138
00:10:14.460 --> 00:10:20.930
Let's say let author dock equal and then I would want to await a promise.

139
00:10:21.210 --> 00:10:24.800
Now, if we're going to use a wait, we want to be sure that this is an async function.

140
00:10:24.810 --> 00:10:28.270
So right before the word function here, let's say a sink.

141
00:10:28.980 --> 00:10:30.630
OK, and what do I want to await?

142
00:10:31.020 --> 00:10:35.640
Well, I would just use our user model and you can see VTS code is reading my mind.

143
00:10:35.820 --> 00:10:40.110
We already have a method on the user model named find by username.

144
00:10:40.560 --> 00:10:47.400
So user defined by username parentheses, call it within these parentheses.

145
00:10:47.400 --> 00:10:49.680
Let's just pull the username from the current U.

146
00:10:49.680 --> 00:10:50.760
RL request.

147
00:10:51.060 --> 00:10:54.180
So that's request dot forams dot username.

148
00:10:54.840 --> 00:10:59.460
Now if the requested username is a bit of malicious code, that doesn't look like a simple string of

149
00:10:59.460 --> 00:11:05.250
text, or if it's a name that doesn't exist in our database, this promise is going to reject.

150
00:11:05.820 --> 00:11:05.960
Right.

151
00:11:06.060 --> 00:11:07.980
In that case, our catch block would run.

152
00:11:07.980 --> 00:11:15.630
So in the sketch area, let's just say response JSON sorry, invalid user requested.

153
00:11:16.310 --> 00:11:21.510
OK, but if this does successfully find a user with that username, then right below that, still within

154
00:11:21.510 --> 00:11:28.530
the tribe block, I would say let posts equal and then I would await a promise, the promise that I

155
00:11:28.530 --> 00:11:33.420
want to await lives within our post model and the name of the method that's going to return.

156
00:11:33.420 --> 00:11:43.290
The promise is fine by author Idy parentheses to call that and then we can just grab the user ID from

157
00:11:43.290 --> 00:11:44.910
our author Doch Object.

158
00:11:45.990 --> 00:11:49.550
So author Dog Dot underscore idee.

159
00:11:50.130 --> 00:11:55.680
OK, so that's going to return an array of posts by that author and we're storing that in this post

160
00:11:55.680 --> 00:11:56.250
variable.

161
00:11:56.460 --> 00:12:00.630
So that new line, that's what I would want to send back as in my response.

162
00:12:00.630 --> 00:12:05.300
So response JSON within the parentheses to say posts.

163
00:12:06.120 --> 00:12:09.690
Let's go ahead and save this and test it out in Postman.

164
00:12:10.470 --> 00:12:18.810
So make sure that it's a get request to slash API slash posts by author slash and then a username.

165
00:12:19.650 --> 00:12:22.250
In this case, we don't need anything in this data.

166
00:12:22.270 --> 00:12:24.690
You don't need to include JSON or tokens.

167
00:12:24.700 --> 00:12:31.770
You can completely clear that out or actually just click this nun option under the body tab and lets

168
00:12:31.770 --> 00:12:34.740
click send cool down here.

169
00:12:34.740 --> 00:12:35.790
We can see the response.

170
00:12:35.790 --> 00:12:38.040
So opening square bracket, it's an array.

171
00:12:38.310 --> 00:12:39.450
Here's an object.

172
00:12:39.990 --> 00:12:42.360
So the title of this post is Innocent Post.

173
00:12:42.360 --> 00:12:45.900
If I scroll down, the next title is CSFs is Great.

174
00:12:46.260 --> 00:12:49.920
You get the idea and if we change this to Bachs a lot.

175
00:12:49.920 --> 00:12:50.130
Right.

176
00:12:50.130 --> 00:12:55.740
If I want to get posts by the Bachs a lot user send a new request.

177
00:12:57.300 --> 00:12:57.690
Cool.

178
00:12:57.840 --> 00:13:05.820
We see an array of posts when the poor barks a lot user got hacked by the RF attack and then also being

179
00:13:05.820 --> 00:13:07.080
a dog is fun.

180
00:13:07.620 --> 00:13:09.600
Cool, but our job is not done yet.

181
00:13:09.870 --> 00:13:17.940
So yes, this route is working within Postman, but there's something named Cause or Congress that is

182
00:13:17.940 --> 00:13:22.350
preventing this from working in Web browsers or I should say in Web browsers.

183
00:13:22.350 --> 00:13:26.640
When you're on a domain other than our localhost call in three thousand.

184
00:13:27.120 --> 00:13:28.290
Let me show you what I mean.

185
00:13:28.470 --> 00:13:31.350
And I promise this is the last section of this lesson.

186
00:13:31.740 --> 00:13:35.430
So in your Web browser, open up a new tab and go to code pen.

187
00:13:36.060 --> 00:13:38.430
Go ahead and create a brand new empty pen.

188
00:13:39.270 --> 00:13:45.480
OK, and within the JavaScript column, click the gear or setting icon near the jazz title.

189
00:13:46.380 --> 00:13:50.460
And here we see add external scripts and there's a search bar.

190
00:13:50.460 --> 00:13:54.600
Just begin searching for Axios concedes the first result.

191
00:13:55.530 --> 00:13:59.910
Go ahead and click on Axios and then we can close this pop up.

192
00:14:00.450 --> 00:14:07.800
OK, and in the JavaScript tab, let me make that a bit wider and let's give ourselves the goal of sending

193
00:14:07.800 --> 00:14:13.770
off an axios request to our server to fetch posts by a certain author.

194
00:14:14.280 --> 00:14:18.900
So we would start with the Axios package and then call its git method.

195
00:14:19.470 --> 00:14:24.390
And then after that we would include dot then and dot catch.

196
00:14:25.110 --> 00:14:31.560
Now, within the git parentheses, we include a u r l so quotes and then we can actually just copy and

197
00:14:31.560 --> 00:14:37.770
paste the URL from postman write http localhost get post by author.

198
00:14:37.770 --> 00:14:39.690
So copy that and then.

199
00:14:39.760 --> 00:14:46.170
Back in code, pen paste that in for the get quotes and then let's provide functions for both then and

200
00:14:46.170 --> 00:14:46.590
catch.

201
00:14:46.590 --> 00:14:53.550
So in the then parentheses, function, parentheses, curly brackets do the same thing for catch function,

202
00:14:53.550 --> 00:14:57.120
parentheses, curly brackets within the catch function parentheses.

203
00:14:57.120 --> 00:15:03.450
Let's say e for error or I should say e r and then within the body of that function we could just say

204
00:15:03.450 --> 00:15:12.660
console log e r within our then function within these parentheses let's say response and then in the

205
00:15:12.660 --> 00:15:19.920
body of the then function, let's say console dialog and then let's look inside the response for its

206
00:15:19.920 --> 00:15:20.490
data.

207
00:15:20.490 --> 00:15:22.260
So response dot data.

208
00:15:22.800 --> 00:15:25.560
OK, now let's check the console and see what's happening.

209
00:15:25.980 --> 00:15:28.020
So down in the preview area if I right.

210
00:15:28.020 --> 00:15:35.610
Click and choose inspect that opens my dev tools and then if I click on the console link how we have

211
00:15:35.610 --> 00:15:40.410
errors and notice those letters I just mentioned Cause or SEO.

212
00:15:41.820 --> 00:15:47.310
So this is an acronym that stands for Cross Origin Resource Sharing.

213
00:15:48.030 --> 00:15:56.130
So Web browsers will not send off asynchronous requests to other domains unless that other domain explicitly

214
00:15:56.130 --> 00:15:57.850
says that it's OK to do so.

215
00:15:58.320 --> 00:16:04.680
So in this case, since we want our API to be available to everyone and we would want users to be able

216
00:16:04.680 --> 00:16:09.480
to access it from code pen or any other domain, here's what we need to do.

217
00:16:10.110 --> 00:16:12.870
Jump into your text editor or command line.

218
00:16:13.590 --> 00:16:17.700
Your app is most likely running, so go ahead and press control, see to stop it.

219
00:16:18.270 --> 00:16:20.970
And we want to install an NPM package.

220
00:16:21.270 --> 00:16:25.710
So run this command with me, NPM install.

221
00:16:26.250 --> 00:16:33.380
And the name of the package that we're interested in is Cause or SEO are s go ahead and press enter.

222
00:16:34.890 --> 00:16:38.160
Now that we have that package, let's tell our server to begin running again.

223
00:16:38.160 --> 00:16:40.050
So npm run watch.

224
00:16:41.280 --> 00:16:43.500
OK, and now let's go use that package.

225
00:16:43.680 --> 00:16:44.850
So here's what we need to do.

226
00:16:44.850 --> 00:16:52.200
Go into your router API JS file and up at the top where we are requiring in different files, let's

227
00:16:52.200 --> 00:16:58.650
just add a line and say const cause equals and then require in the course package.

228
00:16:59.160 --> 00:17:05.220
And then right below this we want to use the course package on all of our API router routes.

229
00:17:05.640 --> 00:17:12.570
So I would just say API router use and this will be applied to any routes listed below this line.

230
00:17:12.900 --> 00:17:20.130
So let's just call cause this will configure all of our routes that are listed below this to set the

231
00:17:20.130 --> 00:17:25.230
cross origin resource sharing policy so that it is allowed from any domain.

232
00:17:25.890 --> 00:17:27.630
Let's go ahead and save this.

233
00:17:27.870 --> 00:17:34.650
And now if we jump back into code pen and maybe down at the bottom, just add a comment to trigger a

234
00:17:34.650 --> 00:17:36.360
refresh of our JavaScript.

235
00:17:36.720 --> 00:17:40.050
And now if we look at the console, cool.

236
00:17:40.050 --> 00:17:45.120
The most recent console message is an array with two posts or I should say two objects.

237
00:17:45.600 --> 00:17:45.810
Cool.

238
00:17:45.810 --> 00:17:48.420
We see the IDs of the post and we see the titles.

239
00:17:49.410 --> 00:17:55.500
At this point, it's up to the world to use our API in an interesting way in the real world.

240
00:17:55.500 --> 00:18:01.230
Back in our Web application, maybe in the footer somewhere, we would have a link to our documentation

241
00:18:01.230 --> 00:18:02.960
for the API, right?

242
00:18:03.000 --> 00:18:08.580
So that way developers could read the documentation and we would list the different routes and what

243
00:18:08.580 --> 00:18:13.500
we expect in terms of properties and how our token system works, so on and so forth.

244
00:18:13.800 --> 00:18:19.260
But the idea is that any developer that reads our documentation, as long as they're working in an environment

245
00:18:19.260 --> 00:18:24.030
that can send an HTTP request and every modern environment can do that.

246
00:18:24.030 --> 00:18:31.140
Right, iOS, Android, Windows, Mac, Linux, then they are free to use our API however they see fit.

247
00:18:31.710 --> 00:18:37.020
And now that we've walked through the few examples of our login Tolkan route and our create post and

248
00:18:37.020 --> 00:18:43.920
delete post and get post by all the routes, you now have everything you need to take an API as far

249
00:18:43.920 --> 00:18:44.970
as you want to take it.

250
00:18:45.570 --> 00:18:48.300
And that's going to bring this lesson to a close.

251
00:18:48.750 --> 00:18:55.620
In our next lesson, we are finally ready to push this application up onto the Web.

252
00:18:55.950 --> 00:19:02.640
Completing and launching our complex app is going to be a huge milestone and definitely one that I think

253
00:19:02.640 --> 00:19:03.770
is worth celebrating.

254
00:19:04.140 --> 00:19:05.460
So this should be a lot of fun.

255
00:19:05.730 --> 00:19:09.990
Let's keep things rolling and I will see you in the next lesson.
