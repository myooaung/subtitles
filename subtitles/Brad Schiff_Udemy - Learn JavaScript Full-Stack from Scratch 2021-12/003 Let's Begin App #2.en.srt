1
00:00:01,990 --> 00:00:02,890
Hello, everyone.

2
00:00:03,100 --> 00:00:09,820
In this lesson, we are going to get started creating our next new act together, let's not waste any

3
00:00:09,820 --> 00:00:10,190
time.

4
00:00:10,450 --> 00:00:18,540
Let's begin by creating a completely brand new empty folder on our computer for this new project.

5
00:00:19,060 --> 00:00:26,890
So on my desktop here, I'm going to create a brand new folder and I will give it a name of complex

6
00:00:26,890 --> 00:00:27,380
app.

7
00:00:28,060 --> 00:00:31,810
So right now, be sure that you create a brand new empty folder with me.

8
00:00:32,200 --> 00:00:35,350
Just create it somewhere that you can easily find again in the future.

9
00:00:35,590 --> 00:00:41,170
And then we want to go ahead and open this new empty folder within our text editing program.

10
00:00:41,620 --> 00:00:45,540
OK, and now let's create a new file within this folder.

11
00:00:46,540 --> 00:00:50,620
Let's name this new file app, Dot J.S..

12
00:00:51,400 --> 00:00:51,960
All right.

13
00:00:51,970 --> 00:00:58,240
And within this file, this is where we will use the express framework to create a server that listens

14
00:00:58,240 --> 00:00:59,760
for incoming requests.

15
00:01:00,040 --> 00:01:06,220
So we're going to need to go out to the JavaScript grocery store or NPM to pick up Express.

16
00:01:06,640 --> 00:01:08,590
So let's open up our command line.

17
00:01:09,160 --> 00:01:16,210
And before we install any packages, let's first create our package, JSON file that will act as our

18
00:01:16,210 --> 00:01:27,430
recipe list or ingredient list to do this type in this command with me, npm inmet and then dash y press

19
00:01:27,430 --> 00:01:27,930
enter.

20
00:01:28,750 --> 00:01:29,190
Cool.

21
00:01:29,200 --> 00:01:36,040
So that created this package JSON file, which will keep track of all of the packages that our app needs.

22
00:01:36,370 --> 00:01:39,550
So with that in place now, let's install Express.

23
00:01:40,240 --> 00:01:42,310
So in the command line, run this with me.

24
00:01:42,670 --> 00:01:48,340
NPM install in the name of the package is Xpress.

25
00:01:48,700 --> 00:01:50,020
Go ahead and press enter.

26
00:01:52,740 --> 00:02:00,120
OK, and now within our empty aptness file, we can actually use Express, so for our first line of

27
00:02:00,120 --> 00:02:01,560
code, write this out with me.

28
00:02:01,920 --> 00:02:05,160
Let's create a variable and name it express instead.

29
00:02:05,160 --> 00:02:12,840
It's equal and then just require in the express package now just a random JavaScript tip instead of

30
00:02:12,840 --> 00:02:17,730
using let here let's get rid of let we can instead say consed.

31
00:02:18,300 --> 00:02:24,740
The difference between const and let is that a let variable can be reassigned.

32
00:02:25,110 --> 00:02:29,850
So with let we can give it an initial value and then later on we can change that value.

33
00:02:29,860 --> 00:02:35,870
We could come down here and say, you know what, express should actually equal the number five.

34
00:02:36,360 --> 00:02:38,000
That would be valid JavaScript.

35
00:02:38,250 --> 00:02:45,330
However, if instead of let we say const this stands for constant, it means that we cannot reassign

36
00:02:45,330 --> 00:02:46,390
it with a new value.

37
00:02:46,890 --> 00:02:52,560
So if we came down here and said, now express should equal the number five JavaScript would throw an

38
00:02:52,560 --> 00:02:58,400
error telling us that we are not allowed to reassign a constant variable.

39
00:02:58,890 --> 00:03:04,710
So the idea here is that if you're in a situation where you're never going to need to change the variable,

40
00:03:05,130 --> 00:03:08,040
it's best to use const instead of let.

41
00:03:08,370 --> 00:03:13,600
Const is a nice contextual clue that improves the readability of our code.

42
00:03:13,980 --> 00:03:19,650
Now, when we or any of our co-workers look at our code, we immediately see CONSED and know that this

43
00:03:19,650 --> 00:03:22,740
variable is not going to change big picture.

44
00:03:22,740 --> 00:03:25,050
That sort of predictability is a good thing.

45
00:03:25,350 --> 00:03:28,230
It's just nice to have another tool in your toolbox.

46
00:03:28,470 --> 00:03:29,730
In some situations.

47
00:03:29,730 --> 00:03:31,260
Let will be the right call.

48
00:03:31,260 --> 00:03:32,520
In other situations.

49
00:03:32,520 --> 00:03:34,110
CONST makes more sense.

50
00:03:34,350 --> 00:03:35,940
All right, enough with that tangent.

51
00:03:36,210 --> 00:03:40,760
Now that we have this constant variable named Express, let's actually use it.

52
00:03:41,130 --> 00:03:47,400
So on a new line, let's create another constant variable named app and let's set it to equal and then

53
00:03:47,400 --> 00:03:49,110
just call Express.

54
00:03:49,560 --> 00:03:56,370
Next up, let's tell our app what it should do if it receives a get request to the base uttara so we

55
00:03:56,370 --> 00:04:01,980
can say app dot get for the first argument, just a forward slash to represent the home page.

56
00:04:01,980 --> 00:04:02,640
You are l.

57
00:04:02,940 --> 00:04:03,870
Let's include a comma.

58
00:04:03,870 --> 00:04:06,420
And for the second argument, we just provide a function.

59
00:04:07,320 --> 00:04:11,480
So function parentheses, curly brackets within our functions.

60
00:04:11,490 --> 00:04:12,240
Parentheses.

61
00:04:12,240 --> 00:04:19,170
Let's include parameters of our Q and our Yes Right Express is going to pass those objects into our

62
00:04:19,170 --> 00:04:20,730
function when it calls our function.

63
00:04:21,120 --> 00:04:25,620
And just as a quick test within the body of our function, let's just send back a response.

64
00:04:25,620 --> 00:04:27,420
So response send.

65
00:04:27,600 --> 00:04:33,180
And for now let's just have it be a string of text that says welcome to our new app.

66
00:04:33,720 --> 00:04:34,110
Cool.

67
00:04:34,120 --> 00:04:40,350
Finally for now, down at the very bottom of this file, let's tell our app to begin listening for incoming

68
00:04:40,350 --> 00:04:41,160
requests.

69
00:04:41,700 --> 00:04:42,750
So we just say app.

70
00:04:43,350 --> 00:04:47,940
Listen, let's tell it to listen on PT. three thousand four.

71
00:04:47,940 --> 00:04:52,830
Now, let's go ahead and save this file and test it out by trying to visit in our browser.

72
00:04:53,160 --> 00:04:59,040
So down in the command line, let's launch our app by running node and then the name of our file.

73
00:04:59,850 --> 00:05:05,970
So in this case, node app, go ahead and press enter and then over in our Web browser, if we visit

74
00:05:06,180 --> 00:05:09,660
local host Colen three thousand.

75
00:05:10,470 --> 00:05:10,980
Awesome.

76
00:05:10,980 --> 00:05:11,400
We see.

77
00:05:11,400 --> 00:05:12,630
Welcome to our new app.

78
00:05:13,080 --> 00:05:16,740
Now, this is not what we actually want to send to our visitors.

79
00:05:17,130 --> 00:05:23,460
What we actually want to send is the HTML that will create this Web page.

80
00:05:23,850 --> 00:05:28,920
But this is not a course about HTML and success.

81
00:05:29,370 --> 00:05:31,650
This is a course about JavaScript.

82
00:05:32,070 --> 00:05:38,790
So it would not be an efficient use of our time to type out this HTML template together, character

83
00:05:38,790 --> 00:05:39,570
by character.

84
00:05:39,960 --> 00:05:45,720
Instead, let me show you where you can copy and paste this HTML template from.

85
00:05:46,170 --> 00:05:55,080
So right now, open up a new tab in your web browser and I want you to visit GitHub dot com slash learn

86
00:05:55,080 --> 00:05:58,170
web code, slash JavaScript.

87
00:05:58,650 --> 00:06:03,450
Now, there are a couple of different ways that you can copy and paste the reference code if you'd like

88
00:06:03,450 --> 00:06:03,690
to.

89
00:06:03,690 --> 00:06:07,410
You can download a copy of this entire repo to your computer.

90
00:06:07,650 --> 00:06:13,350
So if you look for this green clone or download button and then click on that, there's an option here

91
00:06:13,380 --> 00:06:20,490
named download it this way, you can find the folders and files on your computer and use a text editing

92
00:06:20,490 --> 00:06:25,940
program on your computer to open up the relevant file and then copy and paste its contents.

93
00:06:26,400 --> 00:06:32,040
That's one way, another way, just directly in your Web browser would be to click onto this.

94
00:06:32,370 --> 00:06:36,420
Oh, to underscore complex underscore app folder.

95
00:06:37,840 --> 00:06:44,980
And from this screen, we are interested in this folder named O1 underscore HTML templates, and even

96
00:06:44,980 --> 00:06:49,920
if you downloaded the zip file for this rebo, you would still need to navigate this folder structure.

97
00:06:50,530 --> 00:06:58,570
But within this O1 HTML templates folder, this is where you'll find all of the different static HTML

98
00:06:58,570 --> 00:07:05,200
templates that we are going to use for this complex application or app number two for right now.

99
00:07:05,200 --> 00:07:11,530
In this particular instance, in order to create this user interface, this home page that a guest or

100
00:07:11,530 --> 00:07:20,590
someone who is not logged in would see, we are interested in this file named Home Dash Guest HTML.

101
00:07:21,040 --> 00:07:26,230
If you downloaded the zip, you'll just want to open up this file and copy everything inside of it or

102
00:07:26,230 --> 00:07:27,310
within your Web browser.

103
00:07:27,310 --> 00:07:33,790
You can just click on this home dash guest and then from this screen you can finally click on this raw

104
00:07:33,790 --> 00:07:39,340
button and that will show you the raw contents of the file from here.

105
00:07:39,370 --> 00:07:46,840
I just want you to select everything you can press control A or command AI to select everything, and

106
00:07:46,840 --> 00:07:49,510
then just copy that into your clipboard.

107
00:07:50,560 --> 00:07:51,160
All right.

108
00:07:51,160 --> 00:07:58,060
So now in our clipboard, we have the HTML that will create this page or this user interface.

109
00:07:58,480 --> 00:08:00,930
So now back to our express application.

110
00:08:01,510 --> 00:08:04,750
Remember, at the moment, it's just saying welcome to our new app.

111
00:08:05,110 --> 00:08:11,650
So let's jump back into our text editor and remember that this time around with this application, we

112
00:08:11,650 --> 00:08:15,400
do not want to create a tangled mess of spaghetti code.

113
00:08:15,730 --> 00:08:22,660
So instead of just including everything within our Apgar's file, let's start breaking things out into

114
00:08:22,660 --> 00:08:26,430
separate files where each file has its own responsibility.

115
00:08:26,710 --> 00:08:32,970
In other words, we do not want to paste in that HTML template in place right here.

116
00:08:33,340 --> 00:08:39,310
Instead, I'm going to show you a much more organized way of handling this within the root of our brand

117
00:08:39,310 --> 00:08:40,570
new project folder.

118
00:08:40,780 --> 00:08:47,080
I want you to create a new subfolder so I can right click in this area and choose new folder.

119
00:08:48,030 --> 00:08:53,500
And technically, we could name this folder anything, but just so you and I are on the same page.

120
00:08:53,520 --> 00:09:02,910
Let's both name this new folder views and this new folder will contain all of our HTML templates or

121
00:09:03,000 --> 00:09:03,780
views.

122
00:09:04,200 --> 00:09:07,860
Now, let's go ahead and create a new file in our views folder.

123
00:09:09,060 --> 00:09:18,690
And let's name this file home dash ghast dot SJS, do not worry, I will explain what the dot means

124
00:09:18,690 --> 00:09:19,860
in just a minute or two.

125
00:09:20,190 --> 00:09:26,280
OK, and within that brand new empty file of home dash guest, I want you to paste in your clipboard.

126
00:09:27,340 --> 00:09:31,120
Cool, so we now have this dedicated file just for this template.

127
00:09:31,150 --> 00:09:32,220
Be sure to save that.

128
00:09:32,440 --> 00:09:35,150
And now let's jump back into Applegate's.

129
00:09:35,560 --> 00:09:42,310
So now, instead of responding to this request by sending a bit of text, we instead just want to render

130
00:09:42,310 --> 00:09:43,810
that entire template file.

131
00:09:44,290 --> 00:09:48,210
To be able to do that, we need to configure our express application a bit.

132
00:09:48,580 --> 00:09:55,810
So right above this app, Dot Getline, let's write a new line of code and let's say app dot set and

133
00:09:55,810 --> 00:09:58,630
we want to set the views configuration option.

134
00:09:58,930 --> 00:10:02,200
So views in quotes and then comma next argument.

135
00:10:02,410 --> 00:10:07,050
And then this is where we provide the name of whatever folder we created for our views.

136
00:10:07,390 --> 00:10:10,280
So this first part needs to be exactly views.

137
00:10:10,330 --> 00:10:11,950
This is an express option.

138
00:10:12,130 --> 00:10:16,650
And then this second views just happens to be viewed because that's what we named our folder.

139
00:10:16,870 --> 00:10:20,150
You could have named it something else, though, and then that value would go here.

140
00:10:20,650 --> 00:10:27,190
OK, so now Express knows where to look to find our views or our templates on the next line of code,

141
00:10:27,400 --> 00:10:32,440
we need to let express know which templating engine or which template system we are using.

142
00:10:32,830 --> 00:10:34,300
So we say app dot set.

143
00:10:34,490 --> 00:10:42,780
First argument is view engine and then the second argument for now I'm just going to include an X placeholder.

144
00:10:43,180 --> 00:10:46,780
This is where we tell Express which template engine we are using.

145
00:10:47,110 --> 00:10:50,830
We have many different options to choose from in the JavaScript community.

146
00:10:51,190 --> 00:10:57,820
You might have heard of popular choices such as Pug or Handlebars or SJS.

147
00:10:58,120 --> 00:11:01,840
SJS is actually the one that we're going to use in this course.

148
00:11:02,120 --> 00:11:05,920
So that's why we named our file, ending with DOT SJS.

149
00:11:06,400 --> 00:11:10,590
Each different template language has its own syntax and features.

150
00:11:10,930 --> 00:11:18,330
So back to this line of code instead of the X placeholder, let's include quotes and just say SJS.

151
00:11:18,880 --> 00:11:24,670
Now, if we're telling Express here that we want to use the Aegis engine, we better go out to the JavaScript

152
00:11:24,670 --> 00:11:29,130
grocery store or NPM and actually install SJS.

153
00:11:29,650 --> 00:11:35,230
So let's go down to our command line, press control, see to quit the server and type this in with

154
00:11:35,230 --> 00:11:35,470
me.

155
00:11:35,740 --> 00:11:42,040
NPM install in the name of the package is simply SJS.

156
00:11:42,400 --> 00:11:43,660
Go ahead and press enter.

157
00:11:44,470 --> 00:11:44,850
Cool.

158
00:11:45,100 --> 00:11:50,050
So now that we've configured our view or template engine, we are ready to actually use it.

159
00:11:50,350 --> 00:11:56,950
So check this out for this git request for the homepage instead of saying response dot send, let's

160
00:11:56,950 --> 00:11:57,760
get rid of that.

161
00:11:58,180 --> 00:12:05,500
And in the body of this function we can instead say response dot render within the parentheses for this

162
00:12:05,500 --> 00:12:06,340
render method.

163
00:12:06,550 --> 00:12:09,640
We just give it the name of a template or a view.

164
00:12:10,060 --> 00:12:14,530
So quotes we named our file home dash guest.

165
00:12:14,920 --> 00:12:19,900
You do not need to include the DOT SJS at the end here when referencing the template.

166
00:12:20,350 --> 00:12:20,740
All right.

167
00:12:20,740 --> 00:12:24,250
With this in place, let's go ahead and save this file and test it out.

168
00:12:24,730 --> 00:12:27,580
So down the command line, be sure to start up your server again.

169
00:12:27,970 --> 00:12:29,350
Node app.

170
00:12:30,610 --> 00:12:31,060
All right.

171
00:12:31,060 --> 00:12:35,500
And then back in our browser at localhost three thousand if we refresh.

172
00:12:35,620 --> 00:12:36,100
Cool.

173
00:12:36,430 --> 00:12:41,890
Although we can see that we're missing a bit of success or styling this top header bar should be a very

174
00:12:41,890 --> 00:12:43,210
dark gray or black.

175
00:12:43,660 --> 00:12:44,260
That's OK.

176
00:12:44,260 --> 00:12:47,740
We can go ahead and set up that txt file or those styles.

177
00:12:47,740 --> 00:12:54,850
Right now let's jump back to our text editor and we want to create a new subfolder within our main project

178
00:12:54,850 --> 00:12:55,390
folder.

179
00:12:55,810 --> 00:12:56,710
So new folder.

180
00:12:56,710 --> 00:12:59,740
And let's name this new folder public.

181
00:13:00,550 --> 00:13:03,400
Remember, we set this up for our to do app as well.

182
00:13:03,640 --> 00:13:10,960
And this is the folder where we can keep things like CSC files or our browser based JavaScript files

183
00:13:11,230 --> 00:13:14,650
that we want to be accessible by anyone who views our app.

184
00:13:15,010 --> 00:13:20,830
So now that we've created this new public folder, we want to tell our express server to make that folder

185
00:13:20,830 --> 00:13:21,640
accessible.

186
00:13:21,910 --> 00:13:28,540
So maybe right above these app set lines, let's add a new line and say app dot use.

187
00:13:29,760 --> 00:13:36,810
Inside the parentheses, we can just say express dot static, which is a method so it gets its own set

188
00:13:36,810 --> 00:13:41,980
of parentheses, and inside those we just include a string of text and include that folder name.

189
00:13:42,510 --> 00:13:43,680
Be sure to save that.

190
00:13:43,920 --> 00:13:48,250
And now we just want to add a CSC file into this public folder.

191
00:13:48,690 --> 00:13:54,870
So back in your browser tab where you visited the GitHub repository a few minutes ago, if you click

192
00:13:54,870 --> 00:13:57,840
back into that HTML templates folder.

193
00:13:59,400 --> 00:14:06,300
Right, the same directory where you found the home dash guest HTML file within this same directory,

194
00:14:06,300 --> 00:14:12,060
you'll also find a file named Main Dot CSX big picture.

195
00:14:12,060 --> 00:14:15,010
We just want to include this file within our public folder.

196
00:14:15,420 --> 00:14:21,570
So if earlier you downloaded an entire zip of this repo, you can just copy and paste or move this file

197
00:14:21,570 --> 00:14:28,140
into the public folder or in your browser, you can just click on Maned Access and then click this raw

198
00:14:28,140 --> 00:14:28,590
button.

199
00:14:30,080 --> 00:14:36,140
And then just select all of this and copy it into your clipboard and then back in our text editor.

200
00:14:36,350 --> 00:14:42,530
Let's create a new file in that public folder and I will name it main success.

201
00:14:43,490 --> 00:14:49,370
Inside that file, just paste in your clipboard and save cool, this includes all of the matching styles

202
00:14:49,370 --> 00:14:53,090
and custom styles for the HTML templates that we will be using.

203
00:14:53,600 --> 00:14:56,060
Finally, one more CSFs related change.

204
00:14:56,210 --> 00:15:03,470
I want you to go back into our home dash guest, Ejaz File and online No.11.

205
00:15:03,830 --> 00:15:09,800
I want you to find the attribute and write before the letter M in Maine.

206
00:15:09,800 --> 00:15:13,560
I just want you to add in a forward slash just like this.

207
00:15:13,970 --> 00:15:19,850
The reason I didn't include the forward slash here for you by default is because if you wanted to download

208
00:15:19,850 --> 00:15:26,060
that zip file for the repo, you could actually just double click each of those HTML templates to preview

209
00:15:26,060 --> 00:15:26,330
them.

210
00:15:26,720 --> 00:15:27,020
Right.

211
00:15:27,020 --> 00:15:32,030
And it would be able to find the CSFs file so you could visually see what the template is going to look

212
00:15:32,030 --> 00:15:32,410
like.

213
00:15:32,810 --> 00:15:38,260
But for this to work within the context of our application, we do want to include a forward slash here.

214
00:15:38,810 --> 00:15:39,230
All right.

215
00:15:39,230 --> 00:15:45,140
Let's go ahead and save this file and then let's be sure to quit our server and relaunch it down in

216
00:15:45,140 --> 00:15:45,960
the command line.

217
00:15:46,340 --> 00:15:51,070
Don't worry, we can set up automatic restarts for our application in just a minute or two.

218
00:15:51,620 --> 00:15:55,760
So in the command line or press control, see to quit and then just fire up the app again.

219
00:15:56,660 --> 00:15:59,750
And if we refresh in the browser, awesome.

220
00:15:59,900 --> 00:16:02,810
Now we have all of the custom styles ready to go.

221
00:16:03,230 --> 00:16:09,440
Now, since no one enjoys having to manually quit and relaunch a node app every time you make changes.

222
00:16:09,830 --> 00:16:14,680
Before we bring this video to a close, let's set up automatic restarts.

223
00:16:15,170 --> 00:16:20,660
So back in our text editor, the first step would be to quit our server because we want to go out to

224
00:16:20,660 --> 00:16:23,510
the JavaScript grocery store and pick up a package.

225
00:16:23,870 --> 00:16:28,730
So type in this command with me, NPM install.

226
00:16:29,120 --> 00:16:31,910
And the name of the package is Node Maun.

227
00:16:32,210 --> 00:16:34,720
You might remember that we use this in our to do app.

228
00:16:35,300 --> 00:16:36,620
Let's go ahead and press enter.

229
00:16:37,750 --> 00:16:47,240
OK, and then to actually use that node MOND package, we want to jump in to our package JSON file towards

230
00:16:47,240 --> 00:16:48,860
the top of packaged JSON.

231
00:16:48,860 --> 00:16:55,250
We see this area code named Scrimps within scripts, maybe right above this test line.

232
00:16:55,250 --> 00:17:02,420
Let's add a new line and let's say quotes and let's name this watch and then a colon and then a pair

233
00:17:02,420 --> 00:17:04,060
of quotes after the pair of quotes.

234
00:17:04,070 --> 00:17:05,570
Be sure to include a comma.

235
00:17:06,050 --> 00:17:06,500
All right.

236
00:17:06,500 --> 00:17:10,430
But inside the quotes, we can just say Node Gnomon app.

237
00:17:11,030 --> 00:17:17,540
If you named your main server file something other than Applegate's, you would use the file name here.

238
00:17:17,780 --> 00:17:21,170
We just don't need to include the dot js to reference it here.

239
00:17:21,590 --> 00:17:22,040
All right.

240
00:17:22,040 --> 00:17:28,280
Now, if we go ahead and save this file, we can run this watch command by going to the command line

241
00:17:28,280 --> 00:17:32,600
and running NPM run watch.

242
00:17:34,550 --> 00:17:40,160
Cool, so our application is still available from localhost three thousand, except now we are free

243
00:17:40,160 --> 00:17:46,190
to make changes without having to quit and relaunch, quit and relaunch, and that's actually going

244
00:17:46,190 --> 00:17:48,330
to bring this lesson to a close.

245
00:17:48,620 --> 00:17:56,570
Looking ahead to our next lesson, we are going to learn how to make our app JS file even more organized.

246
00:17:57,020 --> 00:18:02,540
For the moment, we only have this one euro or this one route to look out for.

247
00:18:02,900 --> 00:18:08,000
But you can imagine that as your application grows in complexity, you're going to have quite a few

248
00:18:08,000 --> 00:18:09,680
routes to be listening for.

249
00:18:10,130 --> 00:18:14,510
And we don't want to clutter up this main app that just file right.

250
00:18:14,510 --> 00:18:18,280
With larger projects, organization becomes more and more important.

251
00:18:18,770 --> 00:18:23,660
So we want to start creating separate files with distinct responsibilities.

252
00:18:23,960 --> 00:18:29,270
With that in mind, in our next lesson, we are going to learn how to create something that is called

253
00:18:29,270 --> 00:18:30,170
a router.

254
00:18:30,590 --> 00:18:34,220
Setting up a router is an essential part of staying organized.

255
00:18:34,490 --> 00:18:38,870
So let's keep the momentum rolling and I will see you in the next lesson.
