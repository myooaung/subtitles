1
00:00:01,860 --> 00:00:02,880
Hello, everyone.

2
00:00:03,210 --> 00:00:08,870
In this lesson, we are going to learn about a security vulnerability related to cookies.

3
00:00:09,420 --> 00:00:14,190
Remember, our application does indeed use cookies for session management.

4
00:00:14,730 --> 00:00:20,820
The type of attack that we're going to learn about in this lesson is named a C SRF attack.

5
00:00:21,270 --> 00:00:26,850
The Casares acronym stands for Cross Site Request Forgery.

6
00:00:27,360 --> 00:00:33,450
Now, instead of trying to explain what that means with just words, let's instead look at an example

7
00:00:33,600 --> 00:00:35,600
of a six R.F. attack.

8
00:00:36,210 --> 00:00:39,870
So here I am logged into our application with my brat account.

9
00:00:40,170 --> 00:00:43,950
And let's imagine that I am an innocent, normal regular user.

10
00:00:44,670 --> 00:00:51,260
However, imagine I receive an email from someone who's targeting users of our application.

11
00:00:51,720 --> 00:00:57,960
In other words, imagine one of your innocent users perhaps clicking on to a page that they should not

12
00:00:57,960 --> 00:00:58,970
have clicked on to.

13
00:00:59,370 --> 00:01:03,530
So in code pen, I've set up an example, malicious page.

14
00:01:04,140 --> 00:01:09,760
So imagine this wasn't code pen and it was just a full screen, regular website without the code visible.

15
00:01:10,380 --> 00:01:17,490
So the idea is that one of the innocent users of our application is now viewing a potentially malicious

16
00:01:17,490 --> 00:01:18,070
website.

17
00:01:18,600 --> 00:01:22,460
So this is on a domain that has nothing to do with our app or project.

18
00:01:22,830 --> 00:01:25,410
So visually, it looks like a normal Web site.

19
00:01:25,740 --> 00:01:33,570
But if you look at the HTML, it actually contains a form and the action is pointing towards our apps

20
00:01:33,570 --> 00:01:35,070
create post route.

21
00:01:35,820 --> 00:01:42,160
And then look, there are hidden input fields with the title and body names and look at the values.

22
00:01:42,570 --> 00:01:48,780
Now, what's scary about the Web is there is nothing within the default behavior of Web browsers to

23
00:01:48,780 --> 00:01:50,460
stop this from working.

24
00:01:51,000 --> 00:01:56,610
As soon as this form is submitted due to the nature of cookies, this attack will be successful.

25
00:01:56,910 --> 00:02:01,440
Now, the innocent user would not even need to necessarily click on the submit button.

26
00:02:01,800 --> 00:02:07,760
Notice there's a bit of JavaScript that's going to select the form element and then tell it to submit

27
00:02:07,950 --> 00:02:10,030
and this is going to run on page load.

28
00:02:10,410 --> 00:02:15,960
Now, the only reason this attack did not already go through the millisecond I opened this malicious

29
00:02:15,960 --> 00:02:23,720
page is because our local application is running on HTTP instead of https.

30
00:02:24,210 --> 00:02:26,650
So this has nothing to do with a kharif attack.

31
00:02:27,060 --> 00:02:30,960
This is just because code pen uses http s.

32
00:02:31,230 --> 00:02:35,480
So my browser is not going to load any resources from HTTP.

33
00:02:35,910 --> 00:02:36,170
Right.

34
00:02:36,180 --> 00:02:42,000
But you can imagine that if our application was actually launched and public, clearly it's not going

35
00:02:42,000 --> 00:02:47,220
to be localhost, it would be our app dot com or whatever our domain is.

36
00:02:47,400 --> 00:02:50,630
And in that case it would probably be https.

37
00:02:51,000 --> 00:02:51,260
Right.

38
00:02:51,270 --> 00:02:56,790
In just a few lessons, we are going to learn how to push our application up to Heroku and at that point

39
00:02:56,790 --> 00:03:00,270
it would indeed begin with https.

40
00:03:00,990 --> 00:03:06,630
What I'm getting at is that in Google Chrome, as of this moment, the attack did not go through.

41
00:03:06,630 --> 00:03:11,040
So we see this little icon up here and it says insecure content blocked.

42
00:03:11,580 --> 00:03:15,710
This has nothing to do with the topic at hand of CSR attacks.

43
00:03:16,080 --> 00:03:21,120
This is just because our local site is not using https to get around this.

44
00:03:21,120 --> 00:03:27,030
I can click load unsafe scripts and as soon as I do that, our attack was successful.

45
00:03:28,670 --> 00:03:31,870
Can see our application new post successfully created.

46
00:03:32,950 --> 00:03:38,440
You have been hacked, and if I go back to the tab where I'm logged in with Brad and I go to my profile,

47
00:03:38,980 --> 00:03:42,240
you can see the newest post created on my behalf.

48
00:03:42,700 --> 00:03:43,410
Ha ha ha.

49
00:03:43,420 --> 00:03:47,820
You have been hacked to see a cleaner example of this attack in this window.

50
00:03:47,830 --> 00:03:52,840
I'm using Mozilla Firefox and you can see I'm logged in with my Bachs lot account.

51
00:03:53,110 --> 00:04:00,660
Now, as of today, Firefox does not care if you load an HTTP resource from an resource.

52
00:04:01,150 --> 00:04:06,220
So imagine if our poor, innocent Bachs, a lot users somehow ended up on the malicious page.

53
00:04:07,570 --> 00:04:10,390
Notice that the attack just works immediately.

54
00:04:10,750 --> 00:04:11,980
So poor Bachs a lot.

55
00:04:11,980 --> 00:04:18,610
If I go back to their profile, they just had a ha ha you have been hacked post created on their behalf.

56
00:04:19,270 --> 00:04:22,090
At this point, you probably have two questions.

57
00:04:22,390 --> 00:04:29,650
Number one, how and why in the world is this super simple attack actually working?

58
00:04:30,190 --> 00:04:36,730
And question number two, how can we adjust our application to protect ourselves or to prevent this

59
00:04:36,730 --> 00:04:37,890
sort of thing from happening?

60
00:04:38,410 --> 00:04:44,440
Let's start with question number one, which is how is something this simple, just a basic form submit?

61
00:04:44,650 --> 00:04:46,450
How is this actually working?

62
00:04:46,990 --> 00:04:48,550
Well, the answer is cookies.

63
00:04:48,550 --> 00:04:50,080
The cookies are the culprit.

64
00:04:50,290 --> 00:04:51,580
Cookies are to blame.

65
00:04:52,060 --> 00:04:57,850
So when a user logs into our application, remember, we set up sessions and cookies.

66
00:04:58,090 --> 00:05:03,010
So the server tells the browser to store a cookie with their session ID.

67
00:05:03,310 --> 00:05:10,460
And then remember, the nature of cookies is that on every subsequent request for that domain.

68
00:05:10,480 --> 00:05:17,890
So in this case, localhost in three thousand for every future request to that domain, the web browser

69
00:05:17,890 --> 00:05:22,030
just automatically sends the cookie along with the request.

70
00:05:22,570 --> 00:05:24,370
So back to this malicious page.

71
00:05:24,700 --> 00:05:30,970
If I zoom in on the HTML, even though this code is not executing from this domain.

72
00:05:31,360 --> 00:05:33,040
Right, we're currently on code pen.

73
00:05:33,430 --> 00:05:34,330
That doesn't matter.

74
00:05:34,630 --> 00:05:40,600
This is just a traditional HTML form and we are telling it to submit to this you url.

75
00:05:41,140 --> 00:05:48,220
So our Web browser, Google Chrome or Mozilla Firefox, it sees this domain and it goes, aha, I have

76
00:05:48,220 --> 00:05:50,380
a cookie associated with that domain.

77
00:05:50,680 --> 00:05:53,830
I'm going to send the cookie along with this request.

78
00:05:54,400 --> 00:06:00,970
Our server sees that that cookie is tied to a valid and current session ID because this Web browser

79
00:06:01,240 --> 00:06:04,450
is indeed signed into our application.

80
00:06:04,840 --> 00:06:06,550
So the request goes through.

81
00:06:07,120 --> 00:06:11,350
Now the next question is, well, how in the world do we stop this from happening?

82
00:06:11,680 --> 00:06:11,940
Right.

83
00:06:11,980 --> 00:06:16,380
How can we adjust our app to protect ourselves from this sort of attack?

84
00:06:16,840 --> 00:06:22,510
Well, to answer that, we need to learn a little bit more about what this attack can and cannot do.

85
00:06:22,990 --> 00:06:30,940
So what it can do is send off traditional HTML form, submits to your apps, you URLs.

86
00:06:31,360 --> 00:06:37,780
So worst case scenario, imagine our application was a bank website and they submitted a form request

87
00:06:37,780 --> 00:06:38,260
to a U.

88
00:06:38,260 --> 00:06:48,880
RL that ended in transfer money and then they had a hidden field with the name of transfer amount and

89
00:06:48,880 --> 00:07:01,060
they set the value to nine billion trillion quadrillion dollars and they set the transfer to and then

90
00:07:01,060 --> 00:07:05,290
they set the value to malicious person.

91
00:07:05,290 --> 00:07:09,490
Smith So really this is all a CSS RF attack can do.

92
00:07:09,970 --> 00:07:16,300
It's relying on the innocent user already being logged in to an existing application.

93
00:07:16,510 --> 00:07:20,230
And then the malicious site just sends a request to a U.

94
00:07:20,230 --> 00:07:26,320
RL that they know makes sense and where they know the names of the fields that the server is expecting.

95
00:07:26,740 --> 00:07:29,520
So that's what a six hour R.F. attack can do.

96
00:07:29,830 --> 00:07:33,550
Now, let's talk about what this type of attack cannot do.

97
00:07:33,880 --> 00:07:41,530
So at no point can this type of attack actually see or access the application itself.

98
00:07:42,160 --> 00:07:42,400
Right.

99
00:07:42,400 --> 00:07:47,320
So thankfully, Web browsers do protect you on a tab to tab basis.

100
00:07:47,530 --> 00:07:47,860
Right.

101
00:07:47,980 --> 00:07:56,740
So any HTML and JavaScript in this tab cannot access the DOM or the HTML from this tab.

102
00:07:57,280 --> 00:08:03,040
With this in mind, it becomes very easy to protect ourselves from a CSS RF attack.

103
00:08:03,370 --> 00:08:11,890
So let's take our create post action as an example so our actual innocent real users can see this HTML

104
00:08:11,890 --> 00:08:15,430
form right where they type in a title and body content.

105
00:08:16,150 --> 00:08:22,610
But there's no way for the malicious page to read this HTML template, right.

106
00:08:22,630 --> 00:08:26,230
The malicious code is just blindly sending off post requests.

107
00:08:26,470 --> 00:08:33,850
A different Jarrell's, so to protect ourselves when the server sends this HTML template to the browser,

108
00:08:34,120 --> 00:08:40,360
we could just send along a random string of characters and then set things up so that when this form

109
00:08:40,360 --> 00:08:47,680
is submitted, in addition to a title and body content value, you must also provide that random string

110
00:08:47,680 --> 00:08:48,460
of characters.

111
00:08:48,760 --> 00:08:53,560
If you don't provide that random string of characters, we will reject this request.

112
00:08:53,740 --> 00:08:59,920
Right, because we will know that it was not a normal, safe, valid request, because if you are actually

113
00:08:59,920 --> 00:09:06,160
logged in and viewing our application, you should have no problem grabbing that random string of characters

114
00:09:06,160 --> 00:09:07,490
that the server sent along.

115
00:09:08,080 --> 00:09:14,620
But if your request is coming from a malicious cross site request, forgery attempt, well, you would

116
00:09:14,620 --> 00:09:18,400
have no way of accessing that random string of characters.

117
00:09:18,910 --> 00:09:25,390
In other words, the only thing the cookie with our matching session ID proves is that the request is

118
00:09:25,390 --> 00:09:28,920
coming from a Web browser that has recently been logged in.

119
00:09:29,260 --> 00:09:35,340
It does not prove that the user of said web browser actually wants to perform that request.

120
00:09:35,590 --> 00:09:39,620
So that's the whole idea of our randomly generated string that we're going to require.

121
00:09:40,120 --> 00:09:43,650
There's no way that an outside source could ever get access to it.

122
00:09:43,870 --> 00:09:50,680
So as long as we are not allowing malicious JavaScript to actually run on our page itself, then the

123
00:09:50,680 --> 00:09:57,250
random generated string proves that the current request is actually desired by the user.

124
00:09:57,760 --> 00:10:04,960
OK, so now that we've covered the big picture of what a cross site request forgery attack is, let

125
00:10:04,960 --> 00:10:08,350
me show you the easiest way to protect ourselves, right?

126
00:10:08,360 --> 00:10:14,740
The easiest way to implement or require this randomly generated string idea I've been talking about.

127
00:10:15,160 --> 00:10:16,510
Let me show you what I would do.

128
00:10:16,810 --> 00:10:23,100
So within your text editor or I should say within your command line, we want to install a new package.

129
00:10:23,380 --> 00:10:31,210
So if your server is already running press control, see to stop it and run this command with me, npm

130
00:10:31,780 --> 00:10:32,920
install.

131
00:10:33,370 --> 00:10:37,540
And the name of the package that we are interested in is C.

132
00:10:37,960 --> 00:10:39,780
S U RF.

133
00:10:40,240 --> 00:10:42,970
So it's a play on words or a play on sounds.

134
00:10:43,270 --> 00:10:47,030
If you sound it out CSF, it would sound like Ceaser.

135
00:10:47,800 --> 00:10:51,880
So npm install C CERV go ahead and press enter.

136
00:10:53,800 --> 00:10:57,160
Once that finishes then we would just want to start running our app again.

137
00:10:57,160 --> 00:10:59,940
So npm run watch.

138
00:11:01,540 --> 00:11:04,120
All right, now let's go leverage that new package.

139
00:11:04,360 --> 00:11:11,500
So within the root of your project, I want you to jump into app jacks up at the top.

140
00:11:11,500 --> 00:11:13,330
Let's require in that new package.

141
00:11:13,660 --> 00:11:18,550
So maybe right above the line where we say CONSED app equals and then we call Express.

142
00:11:18,550 --> 00:11:21,910
Let's add a new line and let's say const.

143
00:11:22,300 --> 00:11:29,560
You could make up any name you want, but I'm going to say C srf let that equal and then just require

144
00:11:29,560 --> 00:11:37,210
in the package that was named C SIRF, you could name your variable C serve if you wanted to.

145
00:11:37,480 --> 00:11:42,490
I just think if I review this code maybe a year or two from now, this name would make more sense to

146
00:11:42,490 --> 00:11:42,710
me.

147
00:11:43,420 --> 00:11:47,790
Now let's scroll down to the area where we are actually using our router.

148
00:11:48,400 --> 00:11:50,980
So for me it's around line number forty eight.

149
00:11:51,700 --> 00:11:58,930
So right above this line where we say app use forward slash router, let's add a new line above that

150
00:11:59,470 --> 00:12:04,210
and let's say app dot use within the use parentheses.

151
00:12:04,210 --> 00:12:05,890
Let's just call that new variable.

152
00:12:05,890 --> 00:12:06,640
So C.

153
00:12:06,640 --> 00:12:10,960
S RF parentheses to call it OK.

154
00:12:10,990 --> 00:12:18,520
And now this will set things up so that any of our post put delete or any requests that modify state

155
00:12:18,850 --> 00:12:25,090
will need to have a valid and matching CSS, RF token or else the request will be rejected and we'll

156
00:12:25,090 --> 00:12:25,930
throw an error.

157
00:12:26,320 --> 00:12:33,340
So right after this, let's set up a piece of middleware to make the RF token available from within

158
00:12:33,340 --> 00:12:35,140
our HTML templates.

159
00:12:35,680 --> 00:12:40,600
So I would just say app use within these use parentheses.

160
00:12:40,600 --> 00:12:47,800
Let's provide a function, function parentheses, curly brackets within the parentheses for this function.

161
00:12:47,800 --> 00:12:51,910
Be sure to include parameters of request response.

162
00:12:52,240 --> 00:13:01,600
And next, OK, now within this function, let's say response dot locals dot and then you can make up

163
00:13:01,600 --> 00:13:04,350
any name you want, but I'm going to name it C.

164
00:13:04,390 --> 00:13:06,250
S RF token.

165
00:13:06,970 --> 00:13:11,440
So this will contain that token value that I want to output into the HTML template.

166
00:13:11,950 --> 00:13:18,520
So let's set it to equal request dot and then call the function from the package that will generate

167
00:13:18,520 --> 00:13:19,180
that token.

168
00:13:19,510 --> 00:13:20,170
So C.

169
00:13:20,170 --> 00:13:25,660
S RF token parentheses to call it finally right below this line.

170
00:13:25,660 --> 00:13:26,050
Be sure to.

171
00:13:26,160 --> 00:13:35,460
All next, OK, now let's jump in to one of our HTML or Ejaz templates and actually leverage this property.

172
00:13:36,030 --> 00:13:37,710
So let's save this file.

173
00:13:37,890 --> 00:13:45,060
And then within your Views folder, I want you to jump into the file that is named Create Dash Post,

174
00:13:45,060 --> 00:13:46,590
DOT, SJS.

175
00:13:47,670 --> 00:13:54,330
OK, so we see a form element that is submitting a post request to slash create post.

176
00:13:54,690 --> 00:13:54,920
Right.

177
00:13:54,930 --> 00:13:58,130
And we have an input for the title and input for the body.

178
00:13:58,710 --> 00:14:01,740
Well maybe right above the submit button.

179
00:14:01,740 --> 00:14:05,460
Let's add a new line and let's add a hidden input.

180
00:14:06,030 --> 00:14:12,990
So input element and let's give it an attribute of type that equals hidden and then let's give it a

181
00:14:12,990 --> 00:14:17,400
name of a underscore C SRF.

182
00:14:18,000 --> 00:14:20,100
Finally, let's give it a value.

183
00:14:20,550 --> 00:14:22,730
And this is where we want to do something dynamic.

184
00:14:22,740 --> 00:14:24,750
So drop in to SJS.

185
00:14:28,200 --> 00:14:34,910
And remember, we just created that property in response to our locals that was named C.S. R.F. Token.

186
00:14:35,730 --> 00:14:38,090
Now the name of this is very important.

187
00:14:38,100 --> 00:14:42,450
It needs to be exactly underscore C SRF.

188
00:14:42,780 --> 00:14:46,240
That's the name that the C serve package is going to be looking for.

189
00:14:46,710 --> 00:14:50,350
Let's go ahead and save this and let me show you what it's doing for us.

190
00:14:50,730 --> 00:14:58,050
So now back on the create post template, if we refresh that input that we just added is hidden, but

191
00:14:58,050 --> 00:14:59,700
I want to show it to you visually.

192
00:15:00,090 --> 00:15:00,780
So maybe if you.

193
00:15:00,780 --> 00:15:01,080
Right.

194
00:15:01,080 --> 00:15:07,140
Click on the body content field and choose inspect that will open your developer tools.

195
00:15:07,320 --> 00:15:10,710
And then right below the divide, the text area lives within.

196
00:15:11,070 --> 00:15:13,580
We should see an input type of hidden.

197
00:15:13,980 --> 00:15:15,240
And here's the important part.

198
00:15:15,540 --> 00:15:16,660
Look at its value.

199
00:15:17,220 --> 00:15:22,140
This value is what's going to protect us from CSR if attacks.

200
00:15:22,710 --> 00:15:28,670
There's no way for code from another browser tab to access this string of characters.

201
00:15:29,160 --> 00:15:36,960
So by including this underscore our value in our request, we are proving to the sea serve package that

202
00:15:36,960 --> 00:15:39,900
this is a valid, trustworthy request.

203
00:15:40,540 --> 00:15:41,250
So let's do this.

204
00:15:41,250 --> 00:15:42,690
Let's try to create a post.

205
00:15:42,780 --> 00:15:52,080
So I will give it a title of innocent post and give it body content of this is a real post.

206
00:15:52,530 --> 00:15:54,570
And then if we go ahead and submit.

207
00:15:56,570 --> 00:16:02,140
Cool, you can see the post went through successfully and now let me go try the malicious code Penn

208
00:16:02,150 --> 00:16:03,800
page and it should fail now.

209
00:16:04,220 --> 00:16:12,890
So if I visit the malicious code pen, cool, we can see forbidden error, invalid CSS, RF token.

210
00:16:13,520 --> 00:16:15,470
And just to confirm that that did not work.

211
00:16:15,470 --> 00:16:20,510
If I go to my profile, you can see the newest post is Innocent Post.

212
00:16:20,750 --> 00:16:24,200
There's not another copy of hahaha you have been hacked.

213
00:16:24,710 --> 00:16:30,290
Now we wouldn't actually want to display an error message like this on the front end of our website.

214
00:16:30,800 --> 00:16:33,950
We would want to handle the error in a more graceful fashion.

215
00:16:34,340 --> 00:16:42,260
So maybe we could have a red flash error message that says cross site request forgery detected and redirect

216
00:16:42,260 --> 00:16:43,920
the user back to the home page.

217
00:16:44,540 --> 00:16:46,440
Let me show you how I would set that up.

218
00:16:46,460 --> 00:16:55,130
So back in App Jass, let's scroll down a bit and maybe right before we begin with the concept server

219
00:16:55,130 --> 00:17:02,510
and IO lines right above that, let's add a new line and let's say app dot use.

220
00:17:02,750 --> 00:17:05,240
And within these parentheses, let's give it a function.

221
00:17:06,800 --> 00:17:11,660
We're going to do something a little bit different from the parameters for this function instead of

222
00:17:11,660 --> 00:17:17,870
giving it to parameters like request and response, and instead of giving it three parameters like request

223
00:17:17,870 --> 00:17:18,320
response.

224
00:17:18,320 --> 00:17:22,010
And next, we're actually going to give it four parameters.

225
00:17:22,820 --> 00:17:27,520
So let's say Aarav for error and then request and response.

226
00:17:27,530 --> 00:17:31,360
And next, within this function, let's write an if statement.

227
00:17:31,370 --> 00:17:38,780
So if parentheses curly brackets for the condition, let's say if there is an error, then inside this

228
00:17:38,780 --> 00:17:41,000
if statement, let's write another if statement.

229
00:17:41,840 --> 00:17:46,130
And after that let's also add an else block to it for the condition.

230
00:17:46,140 --> 00:17:54,920
Let's say this e r code if that and then double equals signed a check for equality if that equals and

231
00:17:54,920 --> 00:18:02,000
then quotes E bad C srf token all capital.

232
00:18:02,660 --> 00:18:10,450
So if the error is related to the CSF token not being a match, then let's do this, let's set a flash

233
00:18:10,460 --> 00:18:15,050
message so requestor flash onto the errors collection.

234
00:18:15,590 --> 00:18:17,390
Give it a second argument with the message.

235
00:18:17,390 --> 00:18:23,450
Let's say cross site request forgery detected.

236
00:18:24,080 --> 00:18:27,110
OK, then I would drop down and manually save session data.

237
00:18:27,110 --> 00:18:34,370
So request session save was provide that an arrow function and then I would just redirect to the home

238
00:18:34,370 --> 00:18:38,870
page show response redirect to forward slash.

239
00:18:39,320 --> 00:18:42,020
OK, but else that means there's an error.

240
00:18:42,020 --> 00:18:45,650
But the error had nothing to do with our CSS RF token logic.

241
00:18:45,920 --> 00:18:52,270
In that case you could create a generic error template or I'm just going to render our 404 template.

242
00:18:52,280 --> 00:18:54,950
So response render 404.

243
00:18:55,400 --> 00:18:55,730
All right.

244
00:18:55,730 --> 00:18:57,440
Let's go ahead and save this.

245
00:18:57,740 --> 00:19:02,300
And now if I tried the malicious code pend screen again, so if I force it to reload.

246
00:19:05,290 --> 00:19:11,620
Perfect, it tried to perform its request, but it kicked me back to the home page and here we see the

247
00:19:11,620 --> 00:19:15,010
red air message cross site request forgery detected.

248
00:19:15,610 --> 00:19:21,160
This is great, but our work is not done yet because if I go back to the tab where I'm actually logged

249
00:19:21,160 --> 00:19:28,810
in, yes, I was able to create a new post because we added the CSS RF token to our create post template.

250
00:19:29,230 --> 00:19:36,340
However, if I try to do anything else, for example, even just signing out, you can see I'm not signed

251
00:19:36,340 --> 00:19:39,250
out and we see cross site request forgery detected.

252
00:19:39,670 --> 00:19:44,800
So in the next video, we just need to go through our application and anywhere where we are performing

253
00:19:44,800 --> 00:19:50,260
a post request, we need to pass along that matching CSS RF token.

254
00:19:50,740 --> 00:19:53,440
Don't worry, it should be a lot quicker than it might sound.

255
00:19:53,800 --> 00:19:57,760
Let's keep things rolling and I will see you in the next lesson.
