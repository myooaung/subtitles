WEBVTT
1
00:00:01.860 --> 00:00:02.820
Hello, everyone.

2
00:00:03.150 --> 00:00:07.380
In this lesson, we are going to ask the question, what about security?

3
00:00:07.890 --> 00:00:13.050
Because while we've been building this application, we never asked ourselves what would happen if a

4
00:00:13.050 --> 00:00:16.440
malicious or evil user visited the app?

5
00:00:16.830 --> 00:00:22.350
Now, up until this point, that's been OK because this app lives on our personal computer and we are

6
00:00:22.350 --> 00:00:24.120
the only ones that can access it.

7
00:00:24.660 --> 00:00:32.460
But in our next lesson, we are going to learn how to push our application up onto the internet so that

8
00:00:32.460 --> 00:00:34.290
the entire world can access it.

9
00:00:34.680 --> 00:00:40.590
So we need to take a few security precautions to make sure that our app is ready for that kind of exposure.

10
00:00:41.010 --> 00:00:44.430
Big picture in this lesson, we are going to do two things.

11
00:00:44.820 --> 00:00:51.360
Number one, we are going to add basic password protection to our app so that even if a random stranger

12
00:00:51.360 --> 00:00:58.140
finds out our apps public internet address, they will still not be able to actually access it unless

13
00:00:58.140 --> 00:00:59.880
they know our secret password.

14
00:01:00.420 --> 00:01:04.830
This way, we can share the password only with our friends and family that we really trust.

15
00:01:05.250 --> 00:01:05.580
All right.

16
00:01:05.580 --> 00:01:11.010
And then after that, we are also going to add an insurance policy so that even if a malicious user

17
00:01:11.010 --> 00:01:17.160
finds our app and somehow guesses our secret password, we can protect ourselves from their basic hacking

18
00:01:17.160 --> 00:01:17.760
attempts.

19
00:01:18.300 --> 00:01:24.990
OK, so right now, let's start with task number one and add basic password protection to our application.

20
00:01:25.620 --> 00:01:31.680
Essentially, when someone tries to visit our app, we want their browser to first prompt them to enter

21
00:01:31.680 --> 00:01:33.180
a username and password.

22
00:01:33.600 --> 00:01:35.370
Let me show you how we can set this up.

23
00:01:35.880 --> 00:01:43.020
So in our text editor within Server Dot J.S., if we scroll down just a bit here we see the area for

24
00:01:43.020 --> 00:01:45.630
App Doggett and it's a forward slash.

25
00:01:45.640 --> 00:01:48.490
This is representing the home page, right?

26
00:01:48.510 --> 00:01:55.030
This is the area where we are sending the HTML template, maybe right above this app Doggett line.

27
00:01:55.080 --> 00:01:56.580
Let's write a new line of code.

28
00:01:57.330 --> 00:02:00.510
Let's create a function and let's give it a name.

29
00:02:01.050 --> 00:02:05.280
The name could be anything but just so you and I are on the same page, let's name it.

30
00:02:05.640 --> 00:02:13.710
Password protected parentheses, curly brackets and within the parentheses for our new function, let's

31
00:02:13.710 --> 00:02:15.270
give it three parameters.

32
00:02:15.690 --> 00:02:17.880
Let's go with our AQ for request.

33
00:02:18.130 --> 00:02:22.770
R.C.S for response and the new one next.

34
00:02:23.460 --> 00:02:26.760
OK, now within the body of our new function, let's do two things.

35
00:02:27.060 --> 00:02:30.840
First, just as a test, let's log a message to the app's console.

36
00:02:31.200 --> 00:02:33.150
So let's say console dot log.

37
00:02:33.150 --> 00:02:37.440
And let's just say our custom function just ran.

38
00:02:38.250 --> 00:02:41.730
OK, and then right below that, let's also call the next parameter.

39
00:02:42.240 --> 00:02:45.720
Now let me explain what in the world is going on here and what this means.

40
00:02:46.500 --> 00:02:53.220
So in the Express Library, remember, Express is the framework we are using to create web applications

41
00:02:53.220 --> 00:02:53.880
with Node.

42
00:02:54.270 --> 00:03:01.950
And we know that Express offers this basic syntax where we can say either APT Get or App Dot post,

43
00:03:02.160 --> 00:03:06.390
and then for the first argument, you spell out the URL that you're listening for.

44
00:03:07.170 --> 00:03:12.960
And then we know that the second argument is a function that you provide that express will call when

45
00:03:12.960 --> 00:03:14.280
this request happens.

46
00:03:14.790 --> 00:03:16.140
So we're familiar with that.

47
00:03:16.140 --> 00:03:22.440
But what we are not familiar with is the idea that we can provide multiple functions here.

48
00:03:22.920 --> 00:03:23.760
So check this out.

49
00:03:23.760 --> 00:03:30.210
Instead of just having two arguments, write the URL and this anonymous function right after this comma,

50
00:03:30.420 --> 00:03:32.940
I want you to type out the name of our new function.

51
00:03:33.360 --> 00:03:37.500
It's password protected and then a comma.

52
00:03:38.100 --> 00:03:42.270
So now we are giving this app target three arguments.

53
00:03:42.840 --> 00:03:45.810
If we wanted to, we can give it five or ten arguments.

54
00:03:46.140 --> 00:03:52.560
The idea is that after you provided the URL you're listening for, you can provide multiple functions

55
00:03:52.830 --> 00:03:57.690
and Express is going to call each function one at a time in a row.

56
00:03:58.200 --> 00:04:01.440
This is where that new next parameter comes into play.

57
00:04:01.830 --> 00:04:08.220
So when someone visits our home page now, Express is first going to call our password protected function.

58
00:04:08.760 --> 00:04:12.450
It's going to run, and then it's going to see that we're calling next.

59
00:04:12.900 --> 00:04:14.640
That's our way of telling Express.

60
00:04:14.670 --> 00:04:15.060
OK.

61
00:04:15.360 --> 00:04:16.770
This function is done.

62
00:04:16.950 --> 00:04:22.440
Now, go ahead and move on to the next function or the next argument that you included here at this

63
00:04:22.440 --> 00:04:22.710
point.

64
00:04:22.740 --> 00:04:24.180
Let's take it for a test drive.

65
00:04:24.270 --> 00:04:29.880
So if we save this file and then be sure to have your command line open so you can see the message being

66
00:04:29.880 --> 00:04:31.320
logged to the console.

67
00:04:31.890 --> 00:04:33.870
Also, make sure that your app is up and running.

68
00:04:33.870 --> 00:04:40.020
But then if we go to our browser and send a new request or refresh the home page back in our command

69
00:04:40.020 --> 00:04:43.410
line or console, we see our custom function just ran.

70
00:04:43.980 --> 00:04:44.430
Cool.

71
00:04:44.550 --> 00:04:48.300
Now we don't actually want to send a message to the console like that.

72
00:04:48.750 --> 00:04:54.960
Instead, what we actually want to do is prompt the visitor to enter a username and password.

73
00:04:55.470 --> 00:04:58.240
So let's get rid of that console, that log test line.

74
00:04:58.530 --> 00:05:01.080
And instead, let's say response.

75
00:05:01.400 --> 00:05:02.830
Dot set.

76
00:05:03.710 --> 00:05:08.660
And we're going to give it to arguments, let's say a comma b for the first placeholder instead of a

77
00:05:08.690 --> 00:05:15.200
let's give it a string of text and say W w w dash authenticate.

78
00:05:15.950 --> 00:05:20.480
This will ask the web browser to enter a username and password to authenticate itself.

79
00:05:20.780 --> 00:05:25.850
And then for the second argument, instead of the B placeholder, let's add a string of text and we

80
00:05:25.850 --> 00:05:27.970
basically just give our application a name.

81
00:05:27.980 --> 00:05:34.400
So we say basic realm equals and then include an opening double quotes.

82
00:05:34.400 --> 00:05:39.890
And let's just call it simple to do app and then close out those double quotes.

83
00:05:40.670 --> 00:05:41.120
All right.

84
00:05:41.130 --> 00:05:48.020
And then on the next line, let's temporarily get rid of this next call and in its place, let's add

85
00:05:48.020 --> 00:05:49.490
an if statement.

86
00:05:50.090 --> 00:05:57.140
So if parentheses curly brackets right after the closing curly brackets for the F, let's also add an

87
00:05:57.140 --> 00:06:00.230
else so else and then curly brackets.

88
00:06:00.650 --> 00:06:03.380
And for our condition or within the parentheses.

89
00:06:03.380 --> 00:06:10.760
For the if statement, let's say only if the username and password that the visitor enters equals something

90
00:06:10.760 --> 00:06:11.600
specific.

91
00:06:12.110 --> 00:06:20.990
So we can say request dot headers, dot authorization to access the username and password that they

92
00:06:20.990 --> 00:06:21.620
typed in.

93
00:06:22.040 --> 00:06:28.790
And then we can say only if that equals again, double equals sign to check for equality instead of

94
00:06:28.790 --> 00:06:31.520
assigning a value only if that equals.

95
00:06:31.520 --> 00:06:37.400
And then for now, let's just say a string of text that says placeholder, and we can circle back to

96
00:06:37.400 --> 00:06:38.750
this value in just a minute.

97
00:06:39.350 --> 00:06:45.230
All right now, the idea is that if the visitor does type in the correct username and password, if

98
00:06:45.230 --> 00:06:50.930
this evaluates to true, well, only then would we want to call next, right?

99
00:06:50.990 --> 00:06:57.290
We would only want to let people with the secret password ever actually run the real function that sends

100
00:06:57.290 --> 00:06:58.520
them to the home page.

101
00:06:59.150 --> 00:07:05.450
But within our else brackets here, if they did not enter the correct username and password, then let's

102
00:07:05.450 --> 00:07:07.130
send back an error message.

103
00:07:07.130 --> 00:07:14.840
Let's say response dot status, and we'll send back in http code of 401, which means unauthorized.

104
00:07:15.350 --> 00:07:22.220
And then we can say Dot Send and let's send back a message to the browser that just says authentication

105
00:07:22.220 --> 00:07:26.600
required before we go ahead and save this and test it out.

106
00:07:26.810 --> 00:07:30.170
Let's add one more line right above our if statement.

107
00:07:30.620 --> 00:07:36.920
And let's just log out to the console or console the log and let's log whatever the user had typed in

108
00:07:36.920 --> 00:07:38.240
for username and password.

109
00:07:39.080 --> 00:07:44.660
So our AQ dot headers dot authorization.

110
00:07:46.460 --> 00:07:49.730
OK, at this point, I'm going to save this and take it for a test drive.

111
00:07:50.150 --> 00:07:55.700
Also, make sure that my command line is visible so we can see the username and password that's getting

112
00:07:55.700 --> 00:07:57.020
logged to the console.

113
00:07:57.440 --> 00:08:03.980
Now, back in the browser, I refresh, you can see that I'm prompted with a username and password field.

114
00:08:04.460 --> 00:08:10.760
Now we are checking for some magical placeholder value that doesn't really make immediate sense of how

115
00:08:10.760 --> 00:08:12.740
that would match to feels right.

116
00:08:12.920 --> 00:08:15.170
Two separate fields of username and password.

117
00:08:16.010 --> 00:08:21.650
But just as a quick test type in a random value for username and a random value for password.

118
00:08:22.100 --> 00:08:28.910
Now, when we submit that as soon as we go back to our console, we see that it was encoded into Base

119
00:08:28.910 --> 00:08:30.380
64 format.

120
00:08:31.190 --> 00:08:38.000
Now we can leverage this in terms of what we check for to see if they typed in the quote correct username

121
00:08:38.000 --> 00:08:38.810
and password.

122
00:08:39.500 --> 00:08:40.580
Let me show you what I mean.

123
00:08:40.590 --> 00:08:42.740
So back in the browser, let's try this again.

124
00:08:43.130 --> 00:08:48.050
You're free to choose your own username and password that you want to share with your friends and family.

125
00:08:48.380 --> 00:08:56.210
But in my case, I'm going to choose a username of learn, and I'm going to choose a password of JavaScript.

126
00:08:58.500 --> 00:09:01.380
In your case, just choose something that you can easily remember.

127
00:09:01.680 --> 00:09:03.000
Now click Sign in.

128
00:09:03.300 --> 00:09:09.660
And now back in Arkansas, this value of basic and then a space and then this string of characters,

129
00:09:10.020 --> 00:09:14.520
that is the value that we want to check against instead of quotes placeholder.

130
00:09:14.850 --> 00:09:20.000
So in your command line, just copy the word basic and then that string.

131
00:09:20.040 --> 00:09:21.750
Copy that into your clipboard.

132
00:09:23.490 --> 00:09:29.160
And then in our if statement, when we're checking for the equality of get rid of the quotes, placeholder

133
00:09:30.000 --> 00:09:32.910
and say quotes and then just paste in your clipboard.

134
00:09:33.900 --> 00:09:40.380
Now let's save this and test it out now, because just a moment ago, I typed in the correct username

135
00:09:40.380 --> 00:09:41.880
and password into my browser.

136
00:09:42.150 --> 00:09:43.710
It's going to remember that.

137
00:09:44.160 --> 00:09:46.860
That's why it's giving me access to the application.

138
00:09:47.160 --> 00:09:52.860
If you want to test things out, you'd probably need to either quit your browser application entirely

139
00:09:53.100 --> 00:09:58.500
and then relaunch your browser, or you could always open up an incognito or private window.

140
00:09:58.770 --> 00:10:04.050
So, for example, here is an incognito window that's not going to remember that username and password

141
00:10:04.050 --> 00:10:05.640
that I just typed in a moment ago.

142
00:10:06.030 --> 00:10:15.210
And so now if I visit local host colon three thousand cool, so visitors have zero access to her application.

143
00:10:15.900 --> 00:10:21.390
If they type in an incorrect username and password, it's just going to keep asking them to try again

144
00:10:21.930 --> 00:10:23.490
if they click Cancel.

145
00:10:23.610 --> 00:10:27.300
They're going to see authentication required, right?

146
00:10:27.330 --> 00:10:29.910
This is the code that runs from our class bracket.

147
00:10:30.330 --> 00:10:35.550
If they do not enter the correct credentials, but if they do enter the correct credentials.

148
00:10:35.550 --> 00:10:43.200
So if I refresh and type, learn for the username and JavaScript for the password, you can see that

149
00:10:43.200 --> 00:10:49.500
our if statement evaluated to true and we were successfully carried on to the next function for that

150
00:10:49.500 --> 00:10:50.100
URL.

151
00:10:50.910 --> 00:10:51.570
Perfect.

152
00:10:52.440 --> 00:10:56.100
But we don't want to only protect our home page URL.

153
00:10:56.430 --> 00:11:03.750
We would also want to protect all of our other URLs, such as create dash item and Update Dash item

154
00:11:03.750 --> 00:11:05.070
and delete dash item.

155
00:11:05.910 --> 00:11:12.040
So our first instinct might be to go into server logs and scroll down until we find apt.

156
00:11:12.300 --> 00:11:20.490
Post four Create Item and just after this comma type in password protected comma.

157
00:11:20.820 --> 00:11:22.200
Now this would work.

158
00:11:22.560 --> 00:11:28.050
There's nothing inherently wrong with this, but it would be very repetitive and we would have to list

159
00:11:28.050 --> 00:11:30.030
that out several more times.

160
00:11:30.300 --> 00:11:32.400
So let's actually get rid of this.

161
00:11:33.890 --> 00:11:40.940
And let's even scroll up to our home page Route AppKit for the base URL, and let's even get rid of

162
00:11:40.940 --> 00:11:46.640
password protected here, because instead I want to show you a more efficient way where you can add

163
00:11:46.640 --> 00:11:50.810
a function to all of your routes or URLs.

164
00:11:51.470 --> 00:11:54.020
Check this out right above this app target line.

165
00:11:54.170 --> 00:11:57.950
Let's simply add a new line and say App Dot Use.

166
00:11:58.370 --> 00:12:05.030
And then within these parentheses, we just list our function name password protected.

167
00:12:05.870 --> 00:12:10.820
This tells Express to use our function for all routes.

168
00:12:11.330 --> 00:12:16.490
So it's going to get added on as the first function for all of our URLs.

169
00:12:17.120 --> 00:12:22.700
And then when our custom function calls next, that will call whatever the next function for that route

170
00:12:22.700 --> 00:12:23.120
would be.

171
00:12:23.840 --> 00:12:27.590
OK, so that takes care of the basic password protection for our app.

172
00:12:27.980 --> 00:12:30.530
Now let's change gears and work on a new task.

173
00:12:31.010 --> 00:12:36.050
So we are only going to share that username and password with friends and family that we trust.

174
00:12:36.260 --> 00:12:43.370
But if a malicious user did somehow guess that username and password, I want us to still be safe.

175
00:12:43.790 --> 00:12:49.790
So for example, at the moment, I want to show you what could happen if a malicious user got into our

176
00:12:49.790 --> 00:12:50.150
app.

177
00:12:50.570 --> 00:12:53.550
They could enter the following into our create field.

178
00:12:53.810 --> 00:12:59.380
And you do not need to worry about pausing the video and typing this in this exact code does not matter.

179
00:12:59.660 --> 00:13:01.970
All that matters is that it's malicious.

180
00:13:02.360 --> 00:13:03.740
So they could add this.

181
00:13:04.160 --> 00:13:10.610
So it created a link that says, Click this and if I click on it, it runs a JavaScript pop up.

182
00:13:11.000 --> 00:13:12.370
Now I have some bad news.

183
00:13:12.380 --> 00:13:18.740
If a malicious user is able to run a JavaScript pop up, that means they can run anything they want.

184
00:13:19.160 --> 00:13:24.860
And this is a security nightmare because now anyone that visits our application, any of our friends

185
00:13:24.860 --> 00:13:29.750
and family will be exposed to this potentially dangerous JavaScript.

186
00:13:30.110 --> 00:13:34.490
And as a developer, we never want to endanger the visitors of our app like that.

187
00:13:34.820 --> 00:13:41.810
We never want to let one user execute JavaScript in another user's web browser like this now in our

188
00:13:41.810 --> 00:13:45.080
future, more complex app app number two.

189
00:13:45.320 --> 00:13:52.190
We will have a proper template engine generating our HTML view, and in that case, the user's input

190
00:13:52.190 --> 00:13:55.100
would never actually be executed like this.

191
00:13:55.370 --> 00:14:00.560
Instead, it would just show up visually like this, which is completely harmless.

192
00:14:00.980 --> 00:14:05.300
But in this simple To-Do app or app number one, that's not the case.

193
00:14:05.630 --> 00:14:09.770
We don't have a traditional template engine to escape the user's content.

194
00:14:10.310 --> 00:14:13.820
So we are vulnerable to malicious JavaScript like this.

195
00:14:14.330 --> 00:14:20.150
So in this case, our best bet for now is to just prevent the user from ever being able to enter that

196
00:14:20.150 --> 00:14:22.370
malicious code into our database at all.

197
00:14:23.060 --> 00:14:29.600
In other words, when someone typed something into this field, let's use our node server to clean up

198
00:14:29.600 --> 00:14:36.860
or sanitize and make sure that it's normal and innocent before we actually accept it into our database.

199
00:14:37.370 --> 00:14:39.260
Let me show you how we can set this up.

200
00:14:39.500 --> 00:14:45.380
So back in our text editor, I'll let you know that luckily, we don't need to write all of the logic

201
00:14:45.590 --> 00:14:49.610
to detect HTML or JavaScript within a string of text.

202
00:14:49.910 --> 00:14:56.180
Instead, all we need to do is go out to the JavaScript grocery store or npm and pick up a package.

203
00:14:56.510 --> 00:15:02.420
So open up your command line lets press control C to quit our server because we want to run a command.

204
00:15:02.780 --> 00:15:03.830
Type this in with me.

205
00:15:04.220 --> 00:15:14.630
NPM install and the name of the package that we are interested in is sanitize Dash H html.

206
00:15:15.050 --> 00:15:16.220
Go ahead and press enter.

207
00:15:17.290 --> 00:15:23.110
All right, now, up at the top of our server dog's file, let's import or require in that new package.

208
00:15:23.620 --> 00:15:32.680
So let's say let sanitize each HTML equal and then just require it in Sanitize Dash HTML.

209
00:15:33.220 --> 00:15:38.860
We can make up the variable name, but this name needs to be exactly like this all lowercase with the

210
00:15:38.860 --> 00:15:39.400
dash.

211
00:15:40.030 --> 00:15:42.400
All right, now, let's go leverage this package.

212
00:15:42.970 --> 00:15:46.750
Let's find our URL or route for the create item.

213
00:15:47.050 --> 00:15:50.680
So below the HTML template, we're looking for this area where we say APT.

214
00:15:50.860 --> 00:15:52.270
Post four create item.

215
00:15:52.930 --> 00:15:56.800
This is where we are using the Insert one method on our database collection.

216
00:15:57.220 --> 00:15:59.190
So this is the user's input.

217
00:15:59.240 --> 00:16:00.100
We are storing.

218
00:16:00.850 --> 00:16:03.520
And this is what could be potentially malicious.

219
00:16:03.910 --> 00:16:08.260
So before we inserted into the database, we just want to clean it up or sanitize it.

220
00:16:08.830 --> 00:16:09.640
So check this out.

221
00:16:09.820 --> 00:16:13.480
Right before this debate collection line, let's write a new line.

222
00:16:13.810 --> 00:16:17.800
Let's create a new variable and call it safe text.

223
00:16:18.160 --> 00:16:20.660
You could name it anything, but let's be on the same page.

224
00:16:21.190 --> 00:16:22.810
And let's just set it to equal.

225
00:16:22.810 --> 00:16:31.180
And then let's call our Sanitize HTML package, and we give this to arguments so a comma be the first

226
00:16:31.180 --> 00:16:31.840
argument.

227
00:16:31.840 --> 00:16:37.390
Instead of this, a placeholder is the text or input that you want to sanitize or clean up.

228
00:16:37.840 --> 00:16:42.430
So that would be request dot, body up, text, whatever the user typed in.

229
00:16:42.850 --> 00:16:46.150
And then the second argument instead of this placeholder be.

230
00:16:46.540 --> 00:16:48.700
This is where we include a few options.

231
00:16:49.030 --> 00:16:52.510
So we include a JavaScript object, so curly brackets.

232
00:16:53.140 --> 00:16:57.370
This package has one option named allowed tags.

233
00:16:57.760 --> 00:17:01.690
And let's set that to equal so colon and just an empty array.

234
00:17:01.690 --> 00:17:09.890
So empty square brackets because we do not want to allow any HTML tags after the closing square bracket.

235
00:17:09.910 --> 00:17:11.020
Let's include a comma.

236
00:17:11.300 --> 00:17:20.410
We're interested in another option named Allowed Attributes column and set that to equal an empty JavaScript

237
00:17:20.410 --> 00:17:21.130
object.

238
00:17:21.670 --> 00:17:25.990
This way, we are not allowing any HTML tags or attributes.

239
00:17:26.560 --> 00:17:32.440
So now whatever the user typed in will be stored in this safe text property, and it's only going to

240
00:17:32.440 --> 00:17:36.790
be plain cleaned up text nothing evil or malicious.

241
00:17:37.060 --> 00:17:39.610
So now that's what we want to save into the database.

242
00:17:40.150 --> 00:17:46.750
So within this insert, one method where we are setting text to equal something, just get rid of this

243
00:17:46.750 --> 00:17:51.790
request that body text and instead include safe text.

244
00:17:52.210 --> 00:17:57.880
Also on this line where we're saying response dot JSON for this text property instead of request dot

245
00:17:57.880 --> 00:18:01.330
body dot text, it would be safe text.

246
00:18:02.440 --> 00:18:05.770
Now let's do the same thing for our update item route.

247
00:18:06.190 --> 00:18:06.380
Right?

248
00:18:06.400 --> 00:18:10.720
Because the user could also click on the edit button and include malicious code there.

249
00:18:11.140 --> 00:18:18.310
So to save a bunch of typing, let's just copy and paste that new let safe text line into our clipboard.

250
00:18:18.760 --> 00:18:20.440
So grab this entire line.

251
00:18:21.940 --> 00:18:22.510
Copy it.

252
00:18:24.240 --> 00:18:30.690
And then down within our update item route, right above its collection line, just paste in your clipboard.

253
00:18:31.350 --> 00:18:36.000
And then within its find one and update method, but scroll over a little bit.

254
00:18:36.300 --> 00:18:42.630
We're looking for the dollar, Sign said, because that's where text is being set to the user's typed

255
00:18:42.630 --> 00:18:43.200
in input.

256
00:18:43.770 --> 00:18:49.500
So let's get rid of this request dot body, not text and replace it with safe text.

257
00:18:50.190 --> 00:18:50.520
All right.

258
00:18:50.550 --> 00:18:53.940
At this point, let's go ahead and save this file and test it out.

259
00:18:54.420 --> 00:18:56.370
Be sure to fire up your application again.

260
00:18:56.370 --> 00:18:59.610
So in the command line 21:00 Run Watch.

261
00:19:00.210 --> 00:19:05.280
First, I want to show you that this malicious item from the beginning of the video was indeed stored

262
00:19:05.280 --> 00:19:06.210
in my database.

263
00:19:06.420 --> 00:19:12.330
So here's my MongoDB Atlas account, and you can see that that code actually made it into the database.

264
00:19:12.990 --> 00:19:18.330
However, now if I delete this item and try to enter that malicious code again.

265
00:19:19.560 --> 00:19:25.680
And if I go back over to MongoDB Atlas and refresh my database, you can see that all that made it through

266
00:19:25.860 --> 00:19:28.290
is literally just the words Click this.

267
00:19:28.560 --> 00:19:29.570
There's no code in there.

268
00:19:29.580 --> 00:19:30.930
It's just plain English.

269
00:19:31.470 --> 00:19:36.750
This is because that was the only innocent part of this string of text that I tried to enter.

270
00:19:37.260 --> 00:19:44.070
All of the potential HTML and JavaScript got stripped out or cleaned out or sanitized out.

271
00:19:44.580 --> 00:19:45.180
Awesome.

272
00:19:45.780 --> 00:19:48.090
And that brings this lesson to a close.

273
00:19:48.360 --> 00:19:55.260
In our next lesson, we are going to learn how to push this application up onto the web so you can share

274
00:19:55.260 --> 00:19:56.730
it with your friends and family.

275
00:19:57.120 --> 00:19:59.280
Let's keep things rolling, and I'll see you then.
