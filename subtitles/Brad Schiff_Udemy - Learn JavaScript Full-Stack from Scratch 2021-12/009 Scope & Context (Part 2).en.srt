1
00:00:00,240 --> 00:00:05,550
Remember, you can always use console log to check the value, OK, at this point.

2
00:00:05,580 --> 00:00:06,810
Let's change gears.

3
00:00:06,990 --> 00:00:11,640
We've talked about SCOP, now let's talk about context.

4
00:00:12,090 --> 00:00:16,870
So I'm actually going to delete all of the code that we have and start fresh.

5
00:00:17,160 --> 00:00:20,310
OK, so SCOP is about variables.

6
00:00:20,820 --> 00:00:24,100
Context is about objects.

7
00:00:24,540 --> 00:00:30,290
So with this in mind, let's go ahead and give ourselves an example object to experiment with.

8
00:00:30,810 --> 00:00:37,200
So I'm going to create a variable and I'll give it a name of John and set it to equal an object.

9
00:00:37,200 --> 00:00:42,450
So curly brackets, let's give it a property of first name instead.

10
00:00:42,450 --> 00:00:49,740
It's equal John, and then let's give it another property of last name and give it a value of go.

11
00:00:50,400 --> 00:00:56,550
OK, and then let's also give this object a method named drive car.

12
00:00:57,180 --> 00:00:59,760
So drive car, parentheses, curly brackets.

13
00:00:59,970 --> 00:01:07,230
And let's imagine we want this method to log out to the console, a bit of text that says John Doe is

14
00:01:07,230 --> 00:01:08,570
driving a car.

15
00:01:09,030 --> 00:01:12,270
So console dot log only.

16
00:01:12,270 --> 00:01:17,670
We don't want to necessarily hard code John into the string of text.

17
00:01:17,910 --> 00:01:23,400
Instead, it would make more sense to pull in the value of the first name property.

18
00:01:23,820 --> 00:01:24,120
Right.

19
00:01:24,120 --> 00:01:30,120
Because that way, if in the future they ever legally change their name to Jonathan or something different,

20
00:01:30,690 --> 00:01:35,320
our drive car method would automatically pull in that value.

21
00:01:35,850 --> 00:01:42,120
So the question is inside of a method like this, right inside this function that belongs to the object,

22
00:01:42,430 --> 00:01:44,820
how can we reference this property?

23
00:01:45,390 --> 00:01:53,760
Well, instead of just saying first name, we instead want to say this dot first name.

24
00:01:54,390 --> 00:02:01,680
Now, the entire topic of context in JavaScript is centered around the this keyword.

25
00:02:02,160 --> 00:02:05,340
I will explain how the this keyword works in just a minute.

26
00:02:05,340 --> 00:02:08,130
But first, let's finish out our line of code here.

27
00:02:08,490 --> 00:02:15,030
So right after a first name, let's say plus and then a string of text with a space in it and then let's

28
00:02:15,030 --> 00:02:16,340
add on their last name.

29
00:02:16,590 --> 00:02:25,310
So this dot last name and then let's add on a string of text that says is driving a car.

30
00:02:26,010 --> 00:02:31,350
OK, now, really quick, let's test out this method and then we can dive in to really understanding

31
00:02:31,350 --> 00:02:32,370
the this keyword.

32
00:02:32,790 --> 00:02:38,280
So maybe down here at the very bottom of our code, below our object, we can say, John, to work with

33
00:02:38,280 --> 00:02:44,580
the object, look inside it with a dot, and then call that method drive car parentheses to call the

34
00:02:44,580 --> 00:02:45,000
method.

35
00:02:45,300 --> 00:02:50,850
And if we check the console awesome, we see John Doe is driving a car again.

36
00:02:50,850 --> 00:02:51,750
This is nothing new.

37
00:02:51,750 --> 00:02:52,870
We've done this before.

38
00:02:53,100 --> 00:02:59,490
The reason I'm showing it to you this time is because this is a chance to dissect the key word this.

39
00:03:00,000 --> 00:03:01,980
So what in the world does this mean?

40
00:03:02,430 --> 00:03:04,170
Well, that's a loaded question.

41
00:03:04,530 --> 00:03:09,960
Even some of the best JavaScript developers in the world, if they're being honest at one point in their

42
00:03:09,960 --> 00:03:13,980
career, they were definitely confused by the this keyword.

43
00:03:14,430 --> 00:03:21,240
So in our current example, the this keyword is pointing towards our John object.

44
00:03:21,630 --> 00:03:28,440
So if we use our imagination, we are basically saying John Dot, first name, John Dot, last name.

45
00:03:28,770 --> 00:03:29,010
Right.

46
00:03:29,010 --> 00:03:33,660
We know that to look inside an object, you just say Dot and then whichever property you're interested

47
00:03:33,660 --> 00:03:33,870
in.

48
00:03:34,320 --> 00:03:37,530
Now, at this point, you might be thinking, what's the big deal?

49
00:03:37,530 --> 00:03:38,770
What's so confusing?

50
00:03:38,790 --> 00:03:39,090
Right.

51
00:03:39,090 --> 00:03:40,920
This seems really straightforward.

52
00:03:41,490 --> 00:03:48,180
You might be thinking that within a method, the this keyword simply always points towards the enclosing

53
00:03:48,180 --> 00:03:48,930
object.

54
00:03:49,410 --> 00:03:51,480
However, that's not the case.

55
00:03:52,140 --> 00:03:59,580
So in a search for the truth, let me confuse you on purpose just for a minute to show you why the this

56
00:03:59,580 --> 00:04:02,520
keyword gives developers so much trouble.

57
00:04:02,880 --> 00:04:06,210
Check this out right above this console, that logline.

58
00:04:06,210 --> 00:04:11,670
But still within our drive car method, let's create a brand new function.

59
00:04:12,300 --> 00:04:14,700
So function and let's name it.

60
00:04:15,210 --> 00:04:20,190
I'm a function, not a method.

61
00:04:21,070 --> 00:04:26,530
And parentheses, curly brackets, this name is just for fun, you could choose any function name you

62
00:04:26,530 --> 00:04:33,280
want, but we are nesting a function inside of this method and check this out inside the body of this

63
00:04:33,280 --> 00:04:37,780
function, lets log out to the console, the this keyword.

64
00:04:38,560 --> 00:04:42,090
Now, currently, this function would never actually run, right?

65
00:04:42,100 --> 00:04:45,930
This is just a function definition or the recipe for the function.

66
00:04:46,420 --> 00:04:48,050
So then maybe right below it.

67
00:04:48,070 --> 00:04:49,930
Why don't we try and call that function?

68
00:04:50,560 --> 00:04:57,160
So I'm a function, not a method parentheses to call it.

69
00:04:57,490 --> 00:05:03,190
And if I check the console right above, our John Doe is driving a car.

70
00:05:03,190 --> 00:05:05,470
We see this window object.

71
00:05:06,070 --> 00:05:09,580
Let's not get too hung up on what window is for.

72
00:05:09,580 --> 00:05:15,370
Now, I can tell you that in the web browser window is the root or global object.

73
00:05:15,700 --> 00:05:21,670
We could say that it's the top level object that houses or contains all of the web browsers, other

74
00:05:21,670 --> 00:05:22,450
objects.

75
00:05:22,840 --> 00:05:26,190
For now, let's just call window the global object.

76
00:05:26,590 --> 00:05:32,500
Now, the important concept here is that the this keyword is pointing to two different things at two

77
00:05:32,500 --> 00:05:33,520
different times.

78
00:05:33,940 --> 00:05:34,330
Right.

79
00:05:34,450 --> 00:05:41,440
In this context, this line of code that I'm highlighting, the this key word pointed towards our John

80
00:05:41,440 --> 00:05:42,220
object.

81
00:05:42,460 --> 00:05:48,010
But then on this line of code, the this keyword is pointing towards the global object.

82
00:05:48,400 --> 00:05:54,910
So the million dollar question, the question that confuses programmers all around the world, the question

83
00:05:54,910 --> 00:06:02,230
that they're ripping their hair out of their head over is how does JavaScript decide what this keyword

84
00:06:02,240 --> 00:06:03,470
should be pointing towards?

85
00:06:03,820 --> 00:06:04,840
Well, here's the answer.

86
00:06:05,260 --> 00:06:10,690
The this keyword does not point towards the enclosing object.

87
00:06:10,990 --> 00:06:12,550
Clearly, that's not the case.

88
00:06:12,700 --> 00:06:18,130
If that was the case, then this instance of the this keyword would be pointing towards John.

89
00:06:18,550 --> 00:06:19,420
But it's not.

90
00:06:19,750 --> 00:06:27,940
So the real answer here it is, is that the this keyword points towards the object that is executing

91
00:06:27,940 --> 00:06:34,330
or calling the current function, or in other words, instead of focusing on these two lines of code

92
00:06:34,330 --> 00:06:35,660
that used the this keyword.

93
00:06:35,680 --> 00:06:42,670
So this line and this line, what we should really be focusing on are the two lines of code where we

94
00:06:42,670 --> 00:06:44,190
are calling the functions.

95
00:06:44,410 --> 00:06:53,950
So this line and this line on this line of code, the object that is calling or executing the function

96
00:06:54,130 --> 00:06:55,660
is the John object.

97
00:06:55,900 --> 00:07:01,990
So that's the object that the this keyword is going to point towards inside that function.

98
00:07:02,470 --> 00:07:04,270
Now, here's where the confusion comes from.

99
00:07:04,570 --> 00:07:11,350
You might be thinking to yourself, well, hey, this line of code lives inside that drive car function.

100
00:07:11,740 --> 00:07:16,870
So why on this line of code is that this key word also not pointing towards John?

101
00:07:17,140 --> 00:07:23,050
Well, the answer is because that's not the context in which this function is actually being called

102
00:07:23,050 --> 00:07:23,890
or executed.

103
00:07:24,100 --> 00:07:30,430
The only reason that this function ever actually runs is because we are calling it right here.

104
00:07:30,970 --> 00:07:38,290
Now, on this line of code, it's painfully obvious which object is calling or executing the drive car

105
00:07:38,290 --> 00:07:40,540
function or we should say the drive car method.

106
00:07:41,020 --> 00:07:43,780
But on this line of code, it's not as obvious, right?

107
00:07:44,140 --> 00:07:47,760
It's not like there's an object right in front of it and then a dot.

108
00:07:48,190 --> 00:07:54,640
So in cases like this, when we are calling a regular old function, JavaScript essentially says, you

109
00:07:54,640 --> 00:08:00,510
know what, let's say that it's the global object that is calling or executing this function.

110
00:08:01,030 --> 00:08:06,440
So that's what the this keyword gets set to when the function runs.

111
00:08:07,090 --> 00:08:07,780
Don't worry.

112
00:08:07,780 --> 00:08:10,130
I do not expect you to fully grasp this yet.

113
00:08:10,450 --> 00:08:17,080
My only goal right now is for you to just be aware that the this key word exists, that what it points

114
00:08:17,080 --> 00:08:24,280
towards changes depending on the context, and that it's a source of confusion for developers of all

115
00:08:24,280 --> 00:08:27,040
different skill levels, not just beginners.

116
00:08:27,400 --> 00:08:28,240
In the future.

117
00:08:28,240 --> 00:08:33,940
When you were creating applications, I guarantee that you're going to run into that this keyword.

118
00:08:34,210 --> 00:08:39,850
And I can also guarantee that at some point your code is not going to work the way that you want it

119
00:08:39,850 --> 00:08:40,390
to work.

120
00:08:40,570 --> 00:08:46,180
And there's a good chance that it's because the this keyword is not pointing towards what you think

121
00:08:46,180 --> 00:08:47,370
it's pointing towards.

122
00:08:47,740 --> 00:08:48,280
Don't worry.

123
00:08:48,290 --> 00:08:53,110
This is a concept that we can review and practice again later on in the course.

124
00:08:53,410 --> 00:09:00,790
Now, really quick, before we bring this lesson to a close, I want to answer the question of why why

125
00:09:00,790 --> 00:09:02,920
does this key keyword even exist?

126
00:09:03,310 --> 00:09:11,430
We just spent a lot of energy trying to understand how to use it, but what about why we would use it?

127
00:09:11,830 --> 00:09:14,260
So let's give ourselves a quick goal now.

128
00:09:14,290 --> 00:09:17,740
Right now, we just have this one object named John.

129
00:09:18,010 --> 00:09:20,440
But imagine we had 500.

130
00:09:20,520 --> 00:09:28,380
And other objects that represented people in cats and dogs and imagine that we wanted to give all of

131
00:09:28,380 --> 00:09:36,060
those objects a method named breathe and maybe the breathe method logs out to the console, the message

132
00:09:36,060 --> 00:09:40,020
that says their name and then it says they just inhaled and exhaled.

133
00:09:40,440 --> 00:09:47,010
Now, technically, we could just type out a function like we did for drive car and then copy and paste

134
00:09:47,010 --> 00:09:49,110
it into all five hundred objects.

135
00:09:49,110 --> 00:09:51,660
But that would be terrible code, right?

136
00:09:51,680 --> 00:09:53,180
That's super repetitive.

137
00:09:53,490 --> 00:09:55,500
So let me show you what else we can do.

138
00:09:56,250 --> 00:09:57,320
Maybe down here.

139
00:09:58,050 --> 00:10:01,320
Let's create a brand new function function.

140
00:10:01,320 --> 00:10:04,770
Let's call it breathe parentheses, curly brackets.

141
00:10:05,250 --> 00:10:10,200
Now if you're more experienced in programming and you're just watching these lessons as a review, you

142
00:10:10,200 --> 00:10:17,220
might be screaming at the screen right now wondering why I wouldn't just use a prototype or class syntax

143
00:10:17,220 --> 00:10:18,000
and inheritance.

144
00:10:18,300 --> 00:10:21,800
But those are concepts that we have not gotten to yet in this course.

145
00:10:21,900 --> 00:10:22,840
So bear with me.

146
00:10:23,190 --> 00:10:29,730
So we've got this new function and imagine inside it we say console log.

147
00:10:30,180 --> 00:10:36,090
And then to save a bit of typing, we can literally just copy and paste the code that I'm highlighting

148
00:10:36,090 --> 00:10:36,740
right now.

149
00:10:37,110 --> 00:10:37,410
Right.

150
00:10:37,430 --> 00:10:44,250
So up in the drive car method, I'm going to highlight from this until the closing of the quote.

151
00:10:45,680 --> 00:10:50,660
And then paste that into our brand new function and then for the ending part of the string, let's just

152
00:10:50,660 --> 00:10:55,730
change it to say just inhaled and exhaled.

153
00:10:56,540 --> 00:10:59,630
OK, so now we've got this new function named Breathe.

154
00:10:59,960 --> 00:11:05,570
Now, what if we want to let our John object use the breathe function?

155
00:11:05,990 --> 00:11:06,290
Right.

156
00:11:06,310 --> 00:11:11,810
So we would expect it to say John Doe just inhaled and exhaled.

157
00:11:12,260 --> 00:11:15,500
Well, at first glance, this function looks hopeless, right?

158
00:11:15,500 --> 00:11:20,270
Because it's a stand alone function, not a method that belongs to an object.

159
00:11:20,720 --> 00:11:27,710
Meaning how in the world do we expect this to point towards anything meaningful if we tried to call

160
00:11:27,710 --> 00:11:34,040
or execute the breathe function down here because it's just a regular old function, JavaScript is going

161
00:11:34,040 --> 00:11:39,380
to consider the global object, the object that is calling it meaning.

162
00:11:39,380 --> 00:11:43,190
That's what the this keyword is going to get set to the global object.

163
00:11:43,430 --> 00:11:49,880
And clearly, there's no first name and last name properties attached to the global object.

164
00:11:50,150 --> 00:11:51,960
However, check this out.

165
00:11:52,340 --> 00:11:57,430
Here's an example of why it's so amazing to be comfortable with this key word.

166
00:11:57,980 --> 00:12:00,260
We can begin with our breathe function.

167
00:12:00,560 --> 00:12:06,680
And in JavaScript, a function is an object just like any other object or entity.

168
00:12:07,040 --> 00:12:14,750
And functions have access to a method named call so we can include the name of our function.

169
00:12:14,750 --> 00:12:21,980
And then instead of parentheses right after it, to call it directly, we can say dot call and the call

170
00:12:21,980 --> 00:12:29,390
method is going to call or execute our function, but not before first giving us a chance to control

171
00:12:29,390 --> 00:12:36,530
the this keyword, meaning whatever we place inside these parentheses here call will make the this keyword

172
00:12:36,530 --> 00:12:37,750
point towards that.

173
00:12:38,030 --> 00:12:44,780
So if we want our John object to be able to use the breathe function, well, this function would make

174
00:12:44,780 --> 00:12:49,430
a whole lot of sense if the this keyword was pointing towards John.

175
00:12:49,430 --> 00:12:49,810
Right.

176
00:12:50,240 --> 00:12:54,260
So down here inside the call parentheses, let's just pass in our John object.

177
00:12:54,680 --> 00:12:58,340
And now if we check the console, awesome.

178
00:12:58,400 --> 00:13:01,190
John Doe just inhaled and exhaled.

179
00:13:01,700 --> 00:13:05,860
So maybe now you're starting to see the purpose of this keyword.

180
00:13:06,140 --> 00:13:08,630
It allows our code to be flexible.

181
00:13:08,930 --> 00:13:15,890
If we had another object named Jane or miaows a lot or barks a lot, we could just as easily include

182
00:13:15,890 --> 00:13:16,490
that here.

183
00:13:16,850 --> 00:13:22,280
And thanks to the this keyword, this function is flexible enough that it would still make sense and

184
00:13:22,280 --> 00:13:24,710
work perfectly in the future.

185
00:13:24,710 --> 00:13:31,040
We will learn about other situations where you use the this key word that are even ten times more useful

186
00:13:31,040 --> 00:13:31,970
than this example.

187
00:13:32,450 --> 00:13:35,100
OK, that's going to bring this lesson to a close.

188
00:13:35,540 --> 00:13:42,620
To be fair, you probably didn't need to know this much about scope in context this early on in your

189
00:13:42,620 --> 00:13:43,820
JavaScript career.

190
00:13:44,270 --> 00:13:49,670
I usually try to air on the side of protecting you from complicated topics early on.

191
00:13:50,030 --> 00:13:56,480
But really, I just feel like scope and context are such a common source of confusion for developers

192
00:13:56,480 --> 00:14:04,520
that even if none of this makes sense right now, we at least planted the seeds in your mind and maybe

193
00:14:04,520 --> 00:14:09,050
a week or two down the road, if your code is not working and you're super confused and frustrated,

194
00:14:09,470 --> 00:14:14,690
maybe a little light bulb will go off in your mind and you'll go, aha, maybe it's scope that's causing

195
00:14:14,690 --> 00:14:17,840
the problem or maybe it's context that's causing the problem.

196
00:14:18,110 --> 00:14:21,110
And you might even need to come back and watch this lesson.

197
00:14:21,380 --> 00:14:26,210
But big picture, I think you're going to be happy that you learned about these topics.

198
00:14:26,660 --> 00:14:27,130
Cool.

199
00:14:27,140 --> 00:14:33,110
Now, looking ahead to our next lesson, we are going to learn about miscellaneous features of the JavaScript

200
00:14:33,110 --> 00:14:40,040
language that are super useful, but maybe didn't need an entire video just for themselves.

201
00:14:40,310 --> 00:14:44,750
So it's going to be sort of a fun grab bag of useful tips and syntax and tricks.

202
00:14:45,110 --> 00:14:48,320
It's going to be a much shorter lesson than this one, I promise you that.

203
00:14:48,620 --> 00:14:53,180
So let's keep our momentum rolling and I will see you in the next lesson.
