1
00:00:02,040 --> 00:00:03,040
Hello, everyone.

2
00:00:03,390 --> 00:00:09,590
In this lesson, we are going to continue working on our registration form in our previous lesson,

3
00:00:09,600 --> 00:00:17,490
we set things up for the username field so that if you actually change its value, we detect that and

4
00:00:17,490 --> 00:00:19,260
show this annoying alert pop up.

5
00:00:19,740 --> 00:00:26,130
So right now, let's go get rid of this alert, pop up and do something more meaningful within registration

6
00:00:26,130 --> 00:00:26,550
form.

7
00:00:26,790 --> 00:00:33,150
James, I want you to scroll down to your username handler method within the method.

8
00:00:33,150 --> 00:00:38,040
Let's get rid of that alert line and instead, let's do this.

9
00:00:38,670 --> 00:00:45,630
Let's set up the skeleton that will run some code immediately and run other code after a delay.

10
00:00:46,230 --> 00:00:49,820
Now, this method doesn't exist yet, but we can create it in just a moment.

11
00:00:50,100 --> 00:00:55,560
Let's say this dot user name immediately.

12
00:00:56,610 --> 00:00:58,800
We can set this method up in just a moment.

13
00:00:58,800 --> 00:01:03,750
But this is where our validation checks that should run immediately will live.

14
00:01:04,680 --> 00:01:12,360
OK, now, right below this, let's create a time out that will only run after maybe eight hundred milliseconds.

15
00:01:12,780 --> 00:01:15,720
So I would say this dot username.

16
00:01:16,170 --> 00:01:17,520
Dot timer.

17
00:01:17,820 --> 00:01:18,050
Right.

18
00:01:18,090 --> 00:01:27,840
I'm creating a new property on this property and I would set this to equal so equal set time out and

19
00:01:27,840 --> 00:01:29,450
then we give this to arguments.

20
00:01:29,460 --> 00:01:34,350
So A comma B for the first argument I will give it an arrow function.

21
00:01:34,350 --> 00:01:36,960
So parentheses arrow symbol.

22
00:01:37,110 --> 00:01:40,830
We don't need curly brackets if we're just on one line with one statement.

23
00:01:41,340 --> 00:01:43,620
But let's call a method that doesn't exist yet.

24
00:01:43,620 --> 00:01:45,050
But we will create in just a moment.

25
00:01:45,060 --> 00:01:55,200
So let's say this dot user name after delay parentheses to call it OK, and then instead of the B placeholder,

26
00:01:55,440 --> 00:01:58,060
we say how many milliseconds we'd want to wait.

27
00:01:58,800 --> 00:02:01,320
In reality, I'd probably go with 800.

28
00:02:01,530 --> 00:02:05,730
But just to really prove the point that this is working, let's go with something large, like maybe

29
00:02:05,730 --> 00:02:06,830
three thousand.

30
00:02:07,530 --> 00:02:12,740
OK, now this method is going to run after every keystroke that changes the field's value.

31
00:02:13,170 --> 00:02:17,280
Now, after each one of those keystrokes, I would want to reset this timer.

32
00:02:17,940 --> 00:02:18,160
Right?

33
00:02:18,180 --> 00:02:24,540
If someone types rapidly, I don't want this to run only if they have not typed in a new character after

34
00:02:24,540 --> 00:02:26,010
three thousand milliseconds.

35
00:02:26,280 --> 00:02:28,050
What I ever want to run this method.

36
00:02:28,420 --> 00:02:35,790
So right above that line, we can just say clear time out and in the parentheses, just provide at the

37
00:02:35,790 --> 00:02:36,940
time out we want to clear.

38
00:02:37,410 --> 00:02:41,540
So this dot username, dot timer.

39
00:02:42,510 --> 00:02:49,290
OK, now let's just create methods with these matching names of username immediately and username after

40
00:02:49,290 --> 00:02:49,740
delay.

41
00:02:50,610 --> 00:02:55,650
So let's create a brand new method username immediately.

42
00:02:55,980 --> 00:02:57,870
Parentheses curly brackets.

43
00:02:59,160 --> 00:03:05,970
For now, just as a test, let's log to the council and say immediate method just ran.

44
00:03:07,200 --> 00:03:15,270
OK, then let's create a new method named user name after delay, user name after delay.

45
00:03:17,830 --> 00:03:25,590
And in this case, let's show an annoying alert, pop up and stay alert after DeLay method finally ran.

46
00:03:27,490 --> 00:03:27,720
Cool.

47
00:03:27,850 --> 00:03:30,690
Let's go ahead and save this and test it out.

48
00:03:31,660 --> 00:03:38,410
So back in the browser, if I refresh and make sure that my browsers console is visible, so if I click,

49
00:03:38,410 --> 00:03:41,170
inspect and then choose the console tab.

50
00:03:42,630 --> 00:03:49,200
Notice that as soon as I begin typing in this field, we see these messages, but only after three thousand

51
00:03:49,200 --> 00:03:49,990
milliseconds.

52
00:03:50,010 --> 00:03:56,640
Does this eventually display now, as long as I just keep typing and never stop and wait three thousand

53
00:03:56,640 --> 00:04:00,040
milliseconds, that alert is not going to display.

54
00:04:00,570 --> 00:04:01,430
This is perfect.

55
00:04:01,440 --> 00:04:05,610
But if I actually do stop typing and wait three thousand milliseconds.

56
00:04:06,060 --> 00:04:06,870
There you have it.

57
00:04:07,500 --> 00:04:07,860
Cool.

58
00:04:08,040 --> 00:04:12,300
At this point, let's actually begin setting up the validation checks.

59
00:04:12,960 --> 00:04:18,270
Let's begin with one of the validation checks that should run immediately, and that is if you include

60
00:04:18,270 --> 00:04:22,800
a special character, write a character that is not alphanumeric.

61
00:04:23,580 --> 00:04:29,910
So if you include any character that's not a through zero through nine, we should immediately display

62
00:04:29,910 --> 00:04:36,510
a validation message right here that says we only allow numbers and letters in our usernames.

63
00:04:37,320 --> 00:04:39,280
Let me show you how I would set that up.

64
00:04:39,720 --> 00:04:46,440
So within our user name immediately method, let's get rid of this console, that log test line in its

65
00:04:46,440 --> 00:04:46,800
place.

66
00:04:46,800 --> 00:04:48,380
Let's write an if statement.

67
00:04:48,390 --> 00:04:56,700
So if parentheses curly brackets now for the if condition, we would want to check to see if that field

68
00:04:56,700 --> 00:04:59,820
contains any non alphanumeric characters.

69
00:05:00,300 --> 00:05:07,530
Now in the past we achieved that on the server side by leveraging the validator package from NPM.

70
00:05:07,950 --> 00:05:13,280
However, in this case, this is JavaScript that's going to run on the client side.

71
00:05:13,590 --> 00:05:19,500
So in this case, I don't want to have to bundle the validator package along with our front end JavaScript,

72
00:05:19,830 --> 00:05:26,400
because even when minified, the validator package is an extra thirty four kilobits that our visitors

73
00:05:26,400 --> 00:05:27,480
would have to download.

74
00:05:27,880 --> 00:05:31,370
In other words, let's go ahead and write this check ourselves.

75
00:05:31,980 --> 00:05:32,760
So let's do this.

76
00:05:32,760 --> 00:05:42,600
Let's say if this dot username dot value, let's first make sure that it's not completely empty or blank.

77
00:05:43,140 --> 00:05:52,890
So if it does not equal an empty pair of quotes and so double ampersand and if it does contain a non

78
00:05:52,890 --> 00:05:59,340
alphanumeric character, right then in here we could show the validation message that says that's not

79
00:05:59,340 --> 00:05:59,860
allowed.

80
00:06:00,270 --> 00:06:06,930
So for the second condition here, in order to check, to see if it contains a non alphanumeric character,

81
00:06:07,170 --> 00:06:11,200
I would actually use something that's called a regular expression.

82
00:06:11,580 --> 00:06:17,460
Now, we are not going to jump into a fully in-depth explanation of regular expressions.

83
00:06:17,850 --> 00:06:20,210
That could be an hour or two rabbit hole.

84
00:06:20,490 --> 00:06:24,030
So the next minute or two is not going to be very educational.

85
00:06:24,330 --> 00:06:31,350
But if this intrigues you, I encourage you to learn more by researching on Google for regular expressions

86
00:06:31,350 --> 00:06:32,580
in JavaScript.

87
00:06:33,210 --> 00:06:38,280
OK, but let's go ahead and type this out forward slash and then a carrot.

88
00:06:38,290 --> 00:06:45,450
So that's shift and then the six key and then a pair of parentheses within the parentheses include a

89
00:06:45,450 --> 00:06:56,970
pair of square brackets and then say lowercase a dash lowercase z and then uppercase a dash uppercase

90
00:06:56,970 --> 00:06:57,500
Z.

91
00:06:58,020 --> 00:07:06,000
And then the number zero dash, the number nine after the closing square bracket include a plus sign

92
00:07:06,630 --> 00:07:10,210
and then after the closing parentheses include a dollar sign.

93
00:07:11,220 --> 00:07:13,490
Finally include a forward slash.

94
00:07:14,070 --> 00:07:20,910
So from the forward slash to the closing forward slash, this is a regular expression and now we can

95
00:07:20,910 --> 00:07:21,300
use it.

96
00:07:21,300 --> 00:07:29,400
We can say dot, text parentheses and we would just want to test it against whatever the user has typed

97
00:07:29,400 --> 00:07:30,350
into that field.

98
00:07:30,720 --> 00:07:34,760
So just this dot username dot value.

99
00:07:35,790 --> 00:07:38,100
Now this would evaluate to true.

100
00:07:38,280 --> 00:07:44,370
If they've only typed in alphanumeric characters, we would want to check for the opposite of that.

101
00:07:44,940 --> 00:07:45,160
Right.

102
00:07:45,180 --> 00:07:48,020
We want to know if they typed in something that's not allowed.

103
00:07:48,450 --> 00:07:54,570
So right before this opening forward slash to check for the opposite, we can just have an exclamation

104
00:07:55,260 --> 00:07:55,650
cool.

105
00:07:55,860 --> 00:08:01,890
Now within the curly brackets for this if block, let's just have an annoying alert message that says

106
00:08:02,340 --> 00:08:09,190
username can only contain letters and numbers, OK?

107
00:08:09,280 --> 00:08:14,820
And since we've already proved that our username after delay is working, let's get rid of that annoying

108
00:08:14,820 --> 00:08:15,750
alert message.

109
00:08:16,980 --> 00:08:20,070
Let's go ahead and save this and test it out.

110
00:08:20,250 --> 00:08:26,700
So back in the browser, if I refresh, I'm free to type in a name with alphanumeric characters.

111
00:08:27,420 --> 00:08:31,500
But the millisecond I try to use a character, that's not alphanumeric.

112
00:08:31,890 --> 00:08:34,800
So for example, exclamation cool.

113
00:08:34,800 --> 00:08:39,650
We immediately see the alert username can only contain letters and numbers.

114
00:08:40,410 --> 00:08:41,880
Now we don't actually want.

115
00:08:41,940 --> 00:08:48,300
To show an alert, we actually want to show a validation message right here, so let's make that happen

116
00:08:48,840 --> 00:08:53,850
back in our text editor within our IF statement, let's get rid of this alert line.

117
00:08:54,510 --> 00:08:59,690
And in its place, this method doesn't exist yet, but we can create it in just a moment.

118
00:09:00,210 --> 00:09:09,120
Let's say this DOT show the validation, error, parentheses to call it, and this is going to be a

119
00:09:09,120 --> 00:09:10,350
reuseable method.

120
00:09:10,620 --> 00:09:13,620
So we'd want to give it to arguments to make it dynamic.

121
00:09:14,070 --> 00:09:17,420
First, let's tell it which element or field we're working with.

122
00:09:17,430 --> 00:09:23,640
So this dot username, comma, and then let's give it the message that we would want to display.

123
00:09:24,270 --> 00:09:32,010
So quotes I will say username can only contain letters and numbers.

124
00:09:33,300 --> 00:09:41,760
OK, now let's just go create a method with this matching name right below this new method show validation,

125
00:09:41,760 --> 00:09:45,860
error, parentheses, curly brackets within its parentheses.

126
00:09:45,870 --> 00:09:47,310
Let's have two parameters.

127
00:09:47,340 --> 00:09:53,160
Let's call it E-L, short for element, comma and then message.

128
00:09:53,910 --> 00:10:00,060
OK, within the body of this method, let's begin working with the element in question and then let's

129
00:10:00,060 --> 00:10:07,080
look for the next HTML element right after it, because we know that that's going to be those red validation

130
00:10:07,080 --> 00:10:09,450
boxes that we set up in a previous lesson.

131
00:10:09,750 --> 00:10:14,640
So DOT next element sibling.

132
00:10:15,270 --> 00:10:15,540
Right?

133
00:10:15,540 --> 00:10:17,640
Remember those empty divs that we added?

134
00:10:17,910 --> 00:10:25,440
Well, now we would just want to select its inner HTML and set that to equal whatever message is being

135
00:10:25,590 --> 00:10:26,910
passed into this method.

136
00:10:27,390 --> 00:10:32,220
And then we'd also want to make the red div box visible instead of invisible.

137
00:10:32,670 --> 00:10:40,110
So on a new line, let's also select that element, look for its next element sibling, and then let's

138
00:10:40,110 --> 00:10:42,210
adjust its class list.

139
00:10:42,900 --> 00:10:52,430
And I would want to add a class of live validate message dash, dash visible.

140
00:10:53,310 --> 00:10:56,190
All right, let's save this and test it out.

141
00:10:56,580 --> 00:10:57,630
It's back in the browser.

142
00:10:57,630 --> 00:11:02,340
If I refresh, if I type in an innocent username, nothing happens.

143
00:11:02,730 --> 00:11:04,950
I can type in any of the numbers as well.

144
00:11:05,160 --> 00:11:12,810
But if I include an exclamation cool you see immediately username can only contain letters and numbers.

145
00:11:13,270 --> 00:11:19,890
Next, let's set things up so that the millisecond I get rid of the character that's causing the problem,

146
00:11:20,520 --> 00:11:23,660
then the red validation box should disappear again.

147
00:11:24,270 --> 00:11:26,400
Let me show you how I would set that up.

148
00:11:26,910 --> 00:11:30,690
I want you to find your show Validation Error Method.

149
00:11:31,200 --> 00:11:36,180
Let's add a new line within this method and let's deal with the element in question.

150
00:11:36,300 --> 00:11:43,650
So l dot and then let's just create a new property on that called errors and let's set it to true.

151
00:11:44,400 --> 00:11:44,670
Right.

152
00:11:44,670 --> 00:11:50,130
Because if we ever call this method, that means that there is a problem or there is an error with this

153
00:11:50,130 --> 00:11:50,640
field.

154
00:11:51,150 --> 00:11:58,950
OK, now let's go find our user name handler method and lets out a line at the very start of the body

155
00:11:58,950 --> 00:11:59,700
of this method.

156
00:12:00,000 --> 00:12:06,830
And let's say this dot user name dot errors equals false.

157
00:12:07,410 --> 00:12:11,520
So this way, each time this runs, we're giving the user a clean slate.

158
00:12:11,880 --> 00:12:13,980
We're assuming that there are no errors.

159
00:12:13,980 --> 00:12:19,540
We're setting this to false and then it's up to our validation checks to check each time.

160
00:12:20,100 --> 00:12:26,490
Now, remember, our goal is if the user enters a problem character, write something that's not alphanumeric.

161
00:12:26,790 --> 00:12:28,470
We would want to show this message.

162
00:12:28,650 --> 00:12:35,490
But then on a future keystroke that removes the problem characters, we would want to hide this validation

163
00:12:35,490 --> 00:12:36,060
message.

164
00:12:36,510 --> 00:12:39,630
So let's do this within our user name immediately.

165
00:12:39,630 --> 00:12:41,760
Method right below this.

166
00:12:41,760 --> 00:12:49,500
If the checks for alphanumeric, let's add a new line and let's say if parentheses curly brackets and

167
00:12:49,500 --> 00:12:50,520
for the condition.

168
00:12:50,520 --> 00:12:58,500
Let's say if this username dot errors and then let's just check for the opposite of that.

169
00:12:58,500 --> 00:13:00,570
So include an exclamation here.

170
00:13:01,110 --> 00:13:08,010
So we're saying if errors is set to false meaning, if there are no errors, then within the if curly

171
00:13:08,010 --> 00:13:11,160
brackets, let's hide that red error rectangle.

172
00:13:11,700 --> 00:13:16,020
Now, the following method does not exist yet, but we can create it in just a moment.

173
00:13:16,380 --> 00:13:24,990
Let's say this dot hide validation, error, parentheses to call that.

174
00:13:25,350 --> 00:13:29,190
And then we'd want to tell it which field or which element we're talking about.

175
00:13:29,940 --> 00:13:32,130
So let's just say this DOT username.

176
00:13:33,120 --> 00:13:36,060
OK, now let's go create a method with this matching name.

177
00:13:37,080 --> 00:13:39,690
So maybe right above show validation error.

178
00:13:39,690 --> 00:13:46,350
We can create a new method and say hide validation, error, parentheses, curly brackets.

179
00:13:46,680 --> 00:13:48,540
Be sure to give it one parameter.

180
00:13:48,570 --> 00:13:54,930
Let's call it L short for element and then to save a bit of typing, you can actually look within show

181
00:13:54,930 --> 00:14:01,950
validation error and just copy and paste this line where we add the class of dash dash visible.

182
00:14:02,340 --> 00:14:09,060
So I would just copy that line of code and then within hyd validation error just pasted in only instead

183
00:14:09,060 --> 00:14:11,670
of adding the class that makes it visible.

184
00:14:12,060 --> 00:14:15,060
Let's just change add to remove.

185
00:14:16,100 --> 00:14:18,870
Let's go ahead and save this and test it out.

186
00:14:19,220 --> 00:14:20,360
So if I refresh.

187
00:14:22,130 --> 00:14:24,650
I choose a username of new user.

188
00:14:25,670 --> 00:14:32,030
Everything looks OK, but if I add an exclamation mark or an at symbol or anything else, we see the

189
00:14:32,030 --> 00:14:32,780
error message.

190
00:14:33,050 --> 00:14:38,750
But the millisecond I get rid of all of those problematic characters, you can see the message goes

191
00:14:38,750 --> 00:14:39,030
away.

192
00:14:39,110 --> 00:14:40,010
Perfect.

193
00:14:40,670 --> 00:14:46,640
Next, let's set things up so that if you type in more than 30 characters for your username, you should

194
00:14:46,640 --> 00:14:49,370
immediately see a validation message.

195
00:14:50,120 --> 00:14:57,890
So back in our text editor within our user name, immediately method right below the if statement that

196
00:14:57,890 --> 00:14:59,460
checks for alphanumeric.

197
00:14:59,660 --> 00:15:01,430
Let's set up a new if statement.

198
00:15:02,480 --> 00:15:12,830
Let's say if parentheses curly brackets for the condition, let's say this dot user name, dot value,

199
00:15:13,190 --> 00:15:14,490
dot length.

200
00:15:15,410 --> 00:15:20,570
If that is greater than 30, if this is the case, that's a problem.

201
00:15:20,930 --> 00:15:28,080
So within our F block, we can just say this dot show validation error.

202
00:15:28,580 --> 00:15:29,980
Let's give this to arguments.

203
00:15:29,990 --> 00:15:35,630
So the first argument is the element in questions of this dot user name, comma, then we give it a

204
00:15:35,630 --> 00:15:36,320
message.

205
00:15:36,330 --> 00:15:44,580
So quotes, let's say user name cannot exceed 30 characters.

206
00:15:45,980 --> 00:15:48,740
Let's go ahead and save that and test it out.

207
00:15:49,000 --> 00:15:49,850
If I refresh.

208
00:15:51,370 --> 00:15:56,730
If I start typing once I hit the limit of 30, you can see that message immediately appears.

209
00:15:56,830 --> 00:16:01,960
If I go back down below 30 characters, it immediately hides the validation message.

210
00:16:02,540 --> 00:16:07,030
If I go back over the limit and then if I go back under the limit, you get the idea.

211
00:16:07,240 --> 00:16:10,850
It's giving me validation messages truly in real time.

212
00:16:11,770 --> 00:16:18,220
Next, let's set up the validation check that says that your username must be at least three characters

213
00:16:18,220 --> 00:16:18,720
long.

214
00:16:19,210 --> 00:16:26,920
So within our text editor, let's look for the method that is named username after delay within the

215
00:16:26,920 --> 00:16:27,900
body of that method.

216
00:16:27,910 --> 00:16:36,280
I would just set up an if statement if parentheses curly brackets for the condition this dot username,

217
00:16:36,280 --> 00:16:41,800
dot value, dot length if that is less than three.

218
00:16:42,910 --> 00:16:44,740
If that's the case, we have a problem.

219
00:16:44,740 --> 00:16:51,070
So within the if block I would say this dot show validation error.

220
00:16:51,910 --> 00:16:59,740
The element in question is this dot username comma and then include a message of username must be at

221
00:16:59,740 --> 00:17:02,230
least three characters.

222
00:17:03,760 --> 00:17:06,440
Let's go ahead and save this and test it out.

223
00:17:07,930 --> 00:17:12,910
So the idea is that the millisecond I begin typing, I would not want to see an annoying message telling

224
00:17:12,910 --> 00:17:14,500
me my name is not long enough.

225
00:17:15,130 --> 00:17:22,000
So if I begin typing, but I never wait three thousand milliseconds in between each letter, we don't

226
00:17:22,000 --> 00:17:23,100
see the message right.

227
00:17:25,710 --> 00:17:31,500
But if I only type in a letter or two and then actually wait, the three thousand milliseconds we do

228
00:17:31,500 --> 00:17:35,610
indeed see username must be at least three characters.

229
00:17:36,240 --> 00:17:42,090
And then as soon as I correct that problem and type in additional letters, you can see the validation

230
00:17:42,090 --> 00:17:43,260
message goes away.

231
00:17:43,950 --> 00:17:48,360
And that's actually going to bring this portion of the lesson to a close.

232
00:17:48,720 --> 00:17:54,600
In our next video, we are going to work on the validation rule that checks to see if the user name

233
00:17:54,600 --> 00:17:56,520
has already been taken or not.

234
00:17:57,060 --> 00:18:02,220
Setting up that feature should be a lot of fun because it's going to use both the front end and the

235
00:18:02,220 --> 00:18:02,970
back end.

236
00:18:03,510 --> 00:18:09,510
So in addition to our live search feature, it should be fun to work on another feature that leverages

237
00:18:09,690 --> 00:18:10,790
the Web browser.

238
00:18:11,310 --> 00:18:14,530
No J.S. and Mongo DB.

239
00:18:15,360 --> 00:18:21,570
I'm excited to set this up with you, so let's keep things rolling and I will see you in the next lesson.
