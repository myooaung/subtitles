WEBVTT
1
00:00:01.980 --> 00:00:03.010
Hello, everyone.

2
00:00:03.420 --> 00:00:10.600
In this lesson, we are going to begin working on our login feature, let's jump right into the action.

3
00:00:11.100 --> 00:00:11.670
All right.

4
00:00:11.670 --> 00:00:17.360
So in the top right corner of our design, we have this username and password login form.

5
00:00:17.760 --> 00:00:24.840
And our goal in this lesson is to let users submit this form and then determine if the username and

6
00:00:24.840 --> 00:00:27.710
password that they typed in is correct.

7
00:00:28.200 --> 00:00:28.530
Right.

8
00:00:28.560 --> 00:00:34.770
Is it successfully matching one of the existing user documents in our database?

9
00:00:35.280 --> 00:00:39.540
If it is correct, we can send back a message that says congratulations.

10
00:00:39.900 --> 00:00:46.200
If it's incorrect, we can send back a message that says invalid username and password.

11
00:00:46.620 --> 00:00:52.770
OK, so our first step to get started with this is to add a new route to our app.

12
00:00:53.190 --> 00:00:58.080
Actually, before we add a new route, we need to make sure that we know which you are.

13
00:00:58.110 --> 00:01:01.530
All this HTML form is submitting to.

14
00:01:01.890 --> 00:01:03.010
Let me show you what I mean.

15
00:01:03.300 --> 00:01:12.370
So jump into your text editor and within our views folder, open up the file named home dash guest dot

16
00:01:12.390 --> 00:01:13.500
SJS.

17
00:01:14.630 --> 00:01:24.130
A round line number 17 we see in opening form tag, this is the login form right now, we can see its

18
00:01:24.130 --> 00:01:32.630
action is set to a placeholder hash tag, but let's go ahead and change that hash tag to a slash login.

19
00:01:33.130 --> 00:01:33.300
Right.

20
00:01:33.420 --> 00:01:39.910
So this way, when the user submits this form, the browser is going to send a post request to that.

21
00:01:39.910 --> 00:01:40.700
You are out.

22
00:01:41.230 --> 00:01:43.420
Let's go ahead and save this file.

23
00:01:43.580 --> 00:01:47.050
And now let's go set up the route to match this.

24
00:01:47.050 --> 00:01:47.790
You are out.

25
00:01:48.220 --> 00:01:52.030
So in our project folder, open up router J.S..

26
00:01:53.920 --> 00:02:02.170
Maybe right below this route or post register line, let's add a new line and let's say router dot post,

27
00:02:02.170 --> 00:02:02.460
right.

28
00:02:02.470 --> 00:02:06.700
This is if they send a post request, not a request.

29
00:02:07.060 --> 00:02:13.450
And for the first argument, it would just be quotes and then slash login and then a comma.

30
00:02:13.450 --> 00:02:19.510
And the second argument is a function that we want to call in response to this happening.

31
00:02:20.110 --> 00:02:25.570
So we would want to use our user controller and we would want to look inside it.

32
00:02:25.810 --> 00:02:30.540
And in just a minute or two from now, we can create a function named log in.

33
00:02:31.210 --> 00:02:33.400
Let's go ahead and save this file.

34
00:02:33.580 --> 00:02:38.860
And now we better go create a function with this matching name within our user controller.

35
00:02:39.130 --> 00:02:39.350
Right.

36
00:02:39.390 --> 00:02:42.490
We don't want to call a function that doesn't actually exist.

37
00:02:43.030 --> 00:02:47.530
So within our project folder, let's dig in to our controllers folder.

38
00:02:48.190 --> 00:02:56.710
And inside it, let's open up user controller J.S. You can see that I actually already have a function

39
00:02:56.710 --> 00:02:58.050
named log in.

40
00:02:58.480 --> 00:03:04.090
You might remember that we created these empty functions back when we first set up our user controller,

41
00:03:04.360 --> 00:03:08.560
just as an example to show you that our controller will have multiple functions.

42
00:03:08.890 --> 00:03:14.320
So if you don't already have this code that I'm highlighting right now, go ahead and type this in.

43
00:03:14.680 --> 00:03:16.120
So it's within our user controller.

44
00:03:16.120 --> 00:03:21.910
We're just saying exports dot login equals an anonymous function.

45
00:03:22.600 --> 00:03:30.570
Now, within the parentheses for this function, let's add two parameters, request and response, OK?

46
00:03:30.580 --> 00:03:38.590
And then within the body of this function, let's use our user model to create a new user object so

47
00:03:38.590 --> 00:03:47.830
we can just say let lowercase user equal a new instance of uppercase user within the parentheses for

48
00:03:47.830 --> 00:03:48.700
uppercase user.

49
00:03:48.700 --> 00:03:52.480
Let's pass it the form data that the user just submitted.

50
00:03:52.930 --> 00:03:55.030
So request dot body.

51
00:03:55.540 --> 00:04:00.130
OK, and then on the next line of code, let's look inside our lowercase user object.

52
00:04:00.490 --> 00:04:06.640
So user dot and then let's call an imaginary method that does not even exist yet.

53
00:04:07.240 --> 00:04:10.060
But let's call user dot login.

54
00:04:10.810 --> 00:04:17.170
OK, now we can just go within our user model file and create a method named log in.

55
00:04:17.530 --> 00:04:24.160
Remember, it's the model, not the controller, that should handle all of our business logic and managing

56
00:04:24.160 --> 00:04:25.110
all of our data.

57
00:04:25.480 --> 00:04:31.150
So in terms of looking up a user name and password in the database, that should definitely be done

58
00:04:31.150 --> 00:04:33.580
in our model, not in our controller.

59
00:04:33.910 --> 00:04:41.860
So let's go ahead and save this file and then let's jump in to our models folder and open up the file

60
00:04:41.860 --> 00:04:44.530
named uppercase user J.S..

61
00:04:45.550 --> 00:04:48.790
OK, now we want to add a method named log in.

62
00:04:49.240 --> 00:04:55.480
So I'm going to scroll down a bit and maybe right after our validate function is where I will add log

63
00:04:55.480 --> 00:04:55.690
in.

64
00:04:56.080 --> 00:05:02.530
So right below validate and right above our register function, I'll add a new line and just say user

65
00:05:03.010 --> 00:05:15.130
and that's uppercase user Dot Prototyp dot log in equals an anonymous function, OK, within the body

66
00:05:15.130 --> 00:05:19.180
of this function, let's begin by calling our clean up method.

67
00:05:19.630 --> 00:05:27.580
So this dot clean up, remember this will check to make sure that the values are strings of text.

68
00:05:28.000 --> 00:05:35.710
OK, after that what we want to do is look in our database and before we even worry about the password

69
00:05:35.710 --> 00:05:39.520
value at all, we want to focus on the user name value.

70
00:05:39.820 --> 00:05:46.450
Meaning is there even an existing user document with the matching user name that a visitor just tried

71
00:05:46.450 --> 00:05:47.470
to log in with?

72
00:05:47.830 --> 00:05:55.480
So right below this this clean up line, let's add a new line and let's use our users collection.

73
00:05:56.050 --> 00:05:56.290
Right.

74
00:05:56.320 --> 00:06:02.530
This is an object that represents our database collection and then we can perform CRUD operations on

75
00:06:02.530 --> 00:06:02.650
it.

76
00:06:03.190 --> 00:06:07.540
In this case, we are interested in the ah in crud which is read.

77
00:06:07.720 --> 00:06:11.350
We want to read or load or look up data from the database.

78
00:06:11.740 --> 00:06:18.310
So let's call a method so users collection dot and the name of the method is find one.

79
00:06:19.000 --> 00:06:24.760
We're going to give this method to arguments so we could say A comma B as placeholders for the first

80
00:06:24.760 --> 00:06:25.360
argument.

81
00:06:25.360 --> 00:06:28.840
Instead of this a placeholder, we want to give it an object.

82
00:06:28.840 --> 00:06:30.220
So curly brackets.

83
00:06:30.520 --> 00:06:33.910
And this is where we tell Mongo what we are trying to find.

84
00:06:34.210 --> 00:06:41.860
So let's say we are trying to find a document where the user name, property or field, so username

85
00:06:41.860 --> 00:06:45.580
name is matching whatever the user just typed in.

86
00:06:46.060 --> 00:06:50.200
So that would be this dot data dot user name.

87
00:06:50.960 --> 00:06:53.260
OK, now for the second argument in.

88
00:06:53.260 --> 00:07:01.240
Instead of this be placeholder, we provide a function that find one is going to call once this operation

89
00:07:01.240 --> 00:07:06.850
has had a chance to complete because we don't know how long it's going to take the database to perform

90
00:07:06.850 --> 00:07:11.920
the find action could take five milliseconds or it could take five thousand milliseconds.

91
00:07:12.310 --> 00:07:18.310
So let's get rid of the B placeholder and provide an anonymous function function parentheses, curly

92
00:07:18.310 --> 00:07:20.950
brackets within the parentheses.

93
00:07:20.950 --> 00:07:29.920
For this function, let's provide two parameters IRR for error and attempted user.

94
00:07:30.340 --> 00:07:31.660
I just made this name up.

95
00:07:31.660 --> 00:07:33.660
You could technically choose anything here.

96
00:07:34.030 --> 00:07:42.310
The idea is that if Mongo DB does find a user that matches our condition, it's going to pass that document

97
00:07:42.670 --> 00:07:45.310
as this parameter into our function.

98
00:07:45.770 --> 00:07:49.390
OK, now within the curly brackets for our function, let's drop down.

99
00:07:50.290 --> 00:07:53.920
I just zoomed out a bit so it's easier to see all of this code at once.

100
00:07:54.480 --> 00:07:59.230
OK, now within the body of our function, let's set up an if else.

101
00:07:59.740 --> 00:08:07.710
So if parentheses curly brackets right after that closing curly bracket, let's say else curly brackets.

102
00:08:08.140 --> 00:08:15.280
OK, and now let's set up the if condition to check to see if the username and password is a successful

103
00:08:15.280 --> 00:08:15.870
match.

104
00:08:16.270 --> 00:08:22.060
So within the parentheses, let's first just see if attempted user exists at all.

105
00:08:22.420 --> 00:08:28.990
Right, because if Mongo is not able to find a document with that matching username, then this variable

106
00:08:28.990 --> 00:08:30.960
will just not exist at all here.

107
00:08:31.090 --> 00:08:37.870
So this will only evaluate to true if there is a matching username and then still within our condition

108
00:08:37.870 --> 00:08:39.130
parentheses, let's say.

109
00:08:39.460 --> 00:08:48.310
And and and now we just want to check to see if the password for that user document matches the password

110
00:08:48.310 --> 00:08:49.950
that the visitor just sent over.

111
00:08:50.530 --> 00:09:00.670
So after our ampersands will just say attempted user dot password and then double equals sign to check

112
00:09:00.670 --> 00:09:04.870
for equality and then just check it against whatever the visitor just submitted.

113
00:09:04.900 --> 00:09:08.580
So this data dot password.

114
00:09:09.130 --> 00:09:14.830
However, in this context, we need to be sure that the this keyword is not going to come back to bite

115
00:09:14.830 --> 00:09:15.250
us.

116
00:09:15.640 --> 00:09:23.290
What I mean is when the find one method calls our callback function well, because it's not an object

117
00:09:23.290 --> 00:09:30.280
directly calling our function JavaScript is actually going to consider the global object to be what's

118
00:09:30.280 --> 00:09:31.350
calling our function.

119
00:09:31.750 --> 00:09:38.500
So that's what it's going to set this keyword to instead of our lowercase user object that we created

120
00:09:38.500 --> 00:09:39.550
from our blueprint.

121
00:09:39.940 --> 00:09:42.460
Luckily, there's an easy way to get around this.

122
00:09:42.940 --> 00:09:50.770
Instead of providing a regular or traditional anonymous function, we can instead provide an arrow function

123
00:09:51.250 --> 00:09:53.630
to convert this into an arrow function.

124
00:09:53.920 --> 00:10:00.340
All we need to do is get rid of the word function, but still keep the parentheses right after where

125
00:10:00.340 --> 00:10:01.810
the word function was.

126
00:10:02.650 --> 00:10:10.660
And then right after these parameter parentheses and before the curly brackets, we just say equal sign

127
00:10:10.660 --> 00:10:14.350
greater than squished together to form this arrow shape.

128
00:10:14.890 --> 00:10:21.900
One of the great things about an arrow function is that it does not manipulate or change the this keyword.

129
00:10:22.360 --> 00:10:28.150
So whatever the this keyword was set to outside of this function is what it will still equal.

130
00:10:28.540 --> 00:10:34.480
In other words, now when we say this dot data, dot password, this will be pointing towards what we

131
00:10:34.480 --> 00:10:36.250
want it to be pointing towards.

132
00:10:36.670 --> 00:10:39.670
OK, now let's fill out our if else.

133
00:10:40.210 --> 00:10:47.680
So if this is true, that means the user just typed in a correct username and password.

134
00:10:48.160 --> 00:10:50.980
It matches something in our existing database.

135
00:10:51.340 --> 00:10:58.410
So within the if curly brackets, just as a test, why don't we log to the console and say congrats

136
00:10:59.410 --> 00:11:06.580
and then within the else we can log to the console and say invalid username, password.

137
00:11:07.600 --> 00:11:14.500
So console log, invalid username and password.

138
00:11:15.010 --> 00:11:20.050
All right, let's go ahead and save this file and then be sure to open up your command line.

139
00:11:20.260 --> 00:11:22.570
And now let's go take it for a test drive.

140
00:11:22.960 --> 00:11:30.550
So within the browser, be sure to refresh your homepage so that your form submits to log in.

141
00:11:30.850 --> 00:11:37.120
After you refresh, lets try to log in first with a bogus username and a bogus password.

142
00:11:38.500 --> 00:11:40.720
So back in our console, cool.

143
00:11:40.750 --> 00:11:43.720
We see invalid username slash password.

144
00:11:44.020 --> 00:11:45.580
All right, let's try again in the browser.

145
00:11:45.580 --> 00:11:48.580
If you refresh the homepage, localhost three thousand.

146
00:11:49.480 --> 00:11:52.750
Let's try to log in with a valid username, but with a.

147
00:11:52.950 --> 00:12:00.860
OGAs password back in the command line again, perfect, we see invalid username and password, OK,

148
00:12:00.890 --> 00:12:03.560
back in the browser, let's try to successfully log in.

149
00:12:03.860 --> 00:12:10.490
So type in your real username and your real password back in the console.

150
00:12:10.910 --> 00:12:11.600
Awesome.

151
00:12:11.600 --> 00:12:12.140
We see.

152
00:12:12.350 --> 00:12:18.680
Congrats, except we don't actually want to log these result messages to the console.

153
00:12:19.010 --> 00:12:23.600
What we actually want to do is send back a response to the visitors browser.

154
00:12:23.900 --> 00:12:24.140
Right.

155
00:12:24.140 --> 00:12:31.460
Because if I go back to the browser, eventually it's going to time out because our slash login route

156
00:12:31.700 --> 00:12:33.770
never sends back a response.

157
00:12:34.280 --> 00:12:43.010
So instead of these console log messages here, we would want to use response dot send, except it's

158
00:12:43.010 --> 00:12:47.590
not the job of our model to send back a response for that route.

159
00:12:47.900 --> 00:12:50.070
That is the job of our controller.

160
00:12:50.480 --> 00:12:57.980
So right now, let's switch files and jump into our user controller JS file within the controllers log

161
00:12:57.980 --> 00:12:58.670
in function.

162
00:12:58.670 --> 00:13:04.880
You can see we are creating a user object and then we are calling the login method that we just set

163
00:13:04.880 --> 00:13:06.320
up in our model file.

164
00:13:06.650 --> 00:13:11.840
So our first instinct would be maybe right below that to send back a response.

165
00:13:11.840 --> 00:13:15.110
So response send and then a bit of text.

166
00:13:15.470 --> 00:13:22.460
But we would run into the issue of how do we know whether to send back a congrats message or a sorry

167
00:13:22.460 --> 00:13:24.700
invalid username password message?

168
00:13:25.010 --> 00:13:31.610
Well, there's many different ways we could set this up so we could set up our user model to add a property

169
00:13:31.820 --> 00:13:36.080
onto our object, and that could say whether it's been successful or not.

170
00:13:36.260 --> 00:13:42.950
And then we could access that property by just saying user dot success or user login status.

171
00:13:43.280 --> 00:13:46.700
But even with that approach, we'd still run into an issue.

172
00:13:46.940 --> 00:13:52.220
And that is we're not exactly sure when to send back our response.

173
00:13:52.730 --> 00:13:54.860
The key word there is when.

174
00:13:55.250 --> 00:13:57.400
So let's delete this response dot send line.

175
00:13:57.680 --> 00:14:05.630
The problem here is we don't know how long this login method is going to take because it's working with

176
00:14:05.630 --> 00:14:06.470
the database.

177
00:14:06.740 --> 00:14:10.040
It could take five milliseconds or it could take twenty seconds.

178
00:14:10.190 --> 00:14:11.350
We just don't know.

179
00:14:11.810 --> 00:14:19.370
So the question becomes within our controller here, how can we wait until login has had a chance to

180
00:14:19.370 --> 00:14:24.380
do its job and then send back our response to the browser?

181
00:14:24.740 --> 00:14:29.240
Well, there are many different ways that we could set this up in this lesson.

182
00:14:29.240 --> 00:14:31.790
We are going to use the traditional approach.

183
00:14:32.150 --> 00:14:38.360
And then in our next lesson, we can learn about the modern best practice approach just because I don't

184
00:14:38.360 --> 00:14:42.770
want to introduce too many new concepts or tasks in this one lesson.

185
00:14:43.190 --> 00:14:47.150
So the traditional approach is called a callback function.

186
00:14:47.630 --> 00:14:53.000
Since we don't know how long this is going to take, we can provide it a function as an argument.

187
00:14:53.390 --> 00:14:57.320
So within these parentheses we could say function, parentheses, curly brackets.

188
00:14:57.680 --> 00:15:03.410
OK, so this function is an argument that's going to get passed in to our login function.

189
00:15:03.680 --> 00:15:05.840
So now back in our user model file.

190
00:15:06.590 --> 00:15:07.340
Back in user.

191
00:15:07.760 --> 00:15:08.300
Yes.

192
00:15:08.720 --> 00:15:14.930
When we are defining what that login function should be within the parentheses for the function, let's

193
00:15:14.930 --> 00:15:17.570
receive that incoming function with the parameter.

194
00:15:17.990 --> 00:15:19.910
Let's call it callback.

195
00:15:20.390 --> 00:15:22.400
OK, now we can leverage this.

196
00:15:22.670 --> 00:15:30.590
So instead of console dialog, congrats, let's get rid of that and instead call our callback function

197
00:15:30.980 --> 00:15:37.370
and we can give it an argument of a string of text and say congrats then let's do the same thing for

198
00:15:37.370 --> 00:15:38.600
the fail message.

199
00:15:38.870 --> 00:15:44.480
So instead of console log here, we can say callback for an argument, give it a string of text that

200
00:15:44.480 --> 00:15:48.470
says invalid username and password.

201
00:15:49.160 --> 00:15:53.150
OK, let's go ahead and save that and then jump back into our controller.

202
00:15:53.720 --> 00:15:58.670
I realize there's a lot of moving parts here and room for confusion, but hang in there with me.

203
00:15:59.000 --> 00:16:02.750
So we're passing this function as an argument into log in.

204
00:16:03.020 --> 00:16:10.490
And then when we define that login function, we are waiting until the perfect moment to call this function.

205
00:16:11.120 --> 00:16:17.180
In other words, we know that this function is not going to run until the appropriate moment once the

206
00:16:17.180 --> 00:16:19.490
database action has had a chance to complete.

207
00:16:19.820 --> 00:16:25.220
Now, let's also remember that when we called our callback function, we gave it these strings of text

208
00:16:25.220 --> 00:16:26.120
as an argument.

209
00:16:27.050 --> 00:16:32.930
So back in our controller within the parentheses here for this function, let's include a parameter,

210
00:16:33.230 --> 00:16:34.880
let's call it result.

211
00:16:35.540 --> 00:16:40.970
OK, now, within the body of this function, we can actually say response dot send.

212
00:16:40.970 --> 00:16:41.180
Right.

213
00:16:41.180 --> 00:16:46.700
We want to send a response back to the Web browser only instead of typing out a string of text here.

214
00:16:47.240 --> 00:16:49.100
Let's just include result.

215
00:16:49.640 --> 00:16:52.640
So whatever our model included when it called callback.

216
00:16:53.290 --> 00:16:58.360
I realized there was a lot of room for confusion there, so you might need to watch this section back

217
00:16:58.360 --> 00:17:04.600
a couple of times, or even if this is not making perfect sense, that's OK, because in our next lesson,

218
00:17:04.600 --> 00:17:09.080
we are going to learn about a more modern and elegant way of setting this up.

219
00:17:09.340 --> 00:17:14.800
However, I felt like I'd be doing you a disservice if I didn't first show you the traditional callback

220
00:17:14.800 --> 00:17:15.160
way.

221
00:17:15.520 --> 00:17:20.560
To be fair, the modern approach that we are going to learn in the next lesson is not as impressive

222
00:17:20.560 --> 00:17:24.580
or fun unless you're aware of this old traditional way first.

223
00:17:24.790 --> 00:17:29.920
So you have a frame of reference until fairly recently, until the last couple of years.

224
00:17:30.220 --> 00:17:34.480
This callback method is the way that you would typically handle this situation.

225
00:17:34.870 --> 00:17:35.260
All right.

226
00:17:35.260 --> 00:17:38.730
Let's go ahead and save this and take it for a test drive.

227
00:17:39.280 --> 00:17:44.470
So back in the browser, if I visit the home page, you are localhost three thousand.

228
00:17:44.980 --> 00:17:48.250
If I try a bogus login, cool.

229
00:17:48.250 --> 00:17:54.220
We see invalid username and password, but if I go back and try my correct log in.

230
00:17:56.290 --> 00:17:58.220
Awesome, we see congrats.

231
00:17:58.690 --> 00:18:05.170
Now, before we worry about doing something actually useful, instead of just showing a congrats or

232
00:18:05.170 --> 00:18:12.760
sorry message or in other words, before we actually learn how to, quote, log a user in, I first

233
00:18:12.760 --> 00:18:15.330
want to cover a couple of best practices.

234
00:18:15.790 --> 00:18:22.890
So in our very next lesson, we are going to learn about a replacement to the traditional callback approach.

235
00:18:23.380 --> 00:18:26.530
We're going to learn about something called a promise.

236
00:18:26.890 --> 00:18:32.430
Trust me, understanding promises is a huge part of working with modern JavaScript.

237
00:18:32.890 --> 00:18:34.070
That should be a lot of fun.

238
00:18:34.090 --> 00:18:36.790
So let's keep things rolling and I'll see you then.
