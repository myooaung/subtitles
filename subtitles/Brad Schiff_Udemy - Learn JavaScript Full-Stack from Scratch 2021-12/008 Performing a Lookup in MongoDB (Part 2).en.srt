1
00:00:00,480 --> 00:00:06,900
This is our post object, and now we can see that the author property, instead of just a user ID,

2
00:00:07,110 --> 00:00:14,280
is an object and it contains useful things like the username and the email address that we can use to

3
00:00:14,280 --> 00:00:15,630
pull in their graviton.

4
00:00:16,020 --> 00:00:20,100
However, we don't need to pass this entire document to the controller.

5
00:00:20,610 --> 00:00:20,860
Right.

6
00:00:20,880 --> 00:00:23,760
We would not want to include the password field here.

7
00:00:24,450 --> 00:00:25,590
So let's do this.

8
00:00:25,590 --> 00:00:26,820
Let's hide the console.

9
00:00:27,270 --> 00:00:34,080
And right after this line where we say Daudt to Arae right below that, let's add a new line.

10
00:00:35,220 --> 00:00:45,690
Let's add a comment to ourselves to stay organized and let's say clean up author property in each post

11
00:00:45,690 --> 00:00:46,590
object.

12
00:00:47,380 --> 00:00:48,990
OK, so let's make this happen.

13
00:00:49,380 --> 00:00:55,710
Ultimately, we know that we're going to have a variable named posts and it's going to be an array in

14
00:00:55,710 --> 00:00:56,270
this case.

15
00:00:56,280 --> 00:00:58,440
It's only going to contain one post.

16
00:00:58,440 --> 00:01:02,370
But let's write reusable code that we can leverage in future lessons.

17
00:01:02,700 --> 00:01:02,960
Right?

18
00:01:02,990 --> 00:01:09,150
We know there are going to be other times where we do want to pull in multiple posts, for example,

19
00:01:09,150 --> 00:01:13,790
a user's homepage feed or search results for a user's profile.

20
00:01:14,100 --> 00:01:16,130
So let's do this under this comment.

21
00:01:16,140 --> 00:01:24,630
Let's work with our array of posts so posts and let's set that to equal and then let's loop through

22
00:01:24,630 --> 00:01:25,980
each item in that array.

23
00:01:26,010 --> 00:01:29,100
So let's say posts, dot map.

24
00:01:29,550 --> 00:01:33,390
Remember, map lets us return a brand new array.

25
00:01:33,750 --> 00:01:38,190
So essentially we're going to create a new array based on the posts array.

26
00:01:38,520 --> 00:01:44,010
And then that new array that map generates is what we're ultimately going to save or overwrite into

27
00:01:44,010 --> 00:01:46,800
this variable within the map parentheses.

28
00:01:46,800 --> 00:01:51,240
Let's give it a function within the function parentheses.

29
00:01:51,240 --> 00:01:58,170
Let's include a parameter, let's name it post within the body of this function, we are going to return

30
00:01:58,350 --> 00:01:59,070
post.

31
00:01:59,400 --> 00:02:04,320
But the idea is that before this line than the body of the function, we can add a new line.

32
00:02:04,650 --> 00:02:10,510
Anything we do before this, we are essentially manipulating the current item in the array.

33
00:02:11,100 --> 00:02:12,060
So let's do this.

34
00:02:12,060 --> 00:02:21,300
Let's say post dot author equals and then we want to create an object and we're just going to customize

35
00:02:21,300 --> 00:02:23,730
or overwrite the author object.

36
00:02:23,940 --> 00:02:27,290
Right, because we don't want to include things like the user's password.

37
00:02:27,720 --> 00:02:33,480
So within these curly brackets, let's drop down and just manually spell out what should be in this

38
00:02:33,480 --> 00:02:34,560
author object.

39
00:02:34,890 --> 00:02:37,020
So we know for sure we want their user name.

40
00:02:37,320 --> 00:02:44,640
So user name calling and we can just say post dot author, dot username, comma.

41
00:02:44,850 --> 00:02:47,340
And we also know that we want their avatar.

42
00:02:47,940 --> 00:02:50,370
So Avatar Colen for now.

43
00:02:50,370 --> 00:02:52,310
Let's just put a placeholder X here.

44
00:02:52,860 --> 00:02:53,190
Cool.

45
00:02:53,190 --> 00:02:57,530
So those are the only two properties that we want the author object to have.

46
00:02:57,900 --> 00:03:03,600
Now the question becomes, how can we use the user's email address to pull in their Gravitron?

47
00:03:03,600 --> 00:03:04,590
You are Elvir.

48
00:03:04,950 --> 00:03:07,710
Well, let's just reuse our user model.

49
00:03:08,100 --> 00:03:11,360
So up at the very top of this file, right.

50
00:03:11,370 --> 00:03:15,360
We are within our post model, maybe right below line number two.

51
00:03:15,360 --> 00:03:22,770
Let's just require in our user model, so let's say const uppercase user equals and then just require

52
00:03:22,770 --> 00:03:24,480
in a file path.

53
00:03:24,480 --> 00:03:30,030
Look in the current directory because we're already in the models directory and look for uppercase user.

54
00:03:30,270 --> 00:03:36,480
OK, now back in that function that we were working on right within this author object that just has

55
00:03:36,480 --> 00:03:39,510
these two properties for Avatar, let's do this.

56
00:03:39,540 --> 00:03:46,620
Let's create a new instance of user using our blueprint in terms of what we want to pass the constructor

57
00:03:46,620 --> 00:03:47,160
function.

58
00:03:47,400 --> 00:03:49,680
Let's just say post dot author.

59
00:03:49,950 --> 00:03:54,330
Let's also say comma and give it another argument of true.

60
00:03:54,750 --> 00:03:57,060
Don't worry, I will explain this very shortly.

61
00:03:57,360 --> 00:04:01,200
For now, let's actually jump in to our user model file.

62
00:04:01,560 --> 00:04:08,910
So within our models folder, let's jump into user Gorgias up towards the top within our user constructor

63
00:04:08,910 --> 00:04:09,510
function.

64
00:04:09,930 --> 00:04:15,510
Right now we just have the one parameter well lets out a comma here and include a second parameter.

65
00:04:15,990 --> 00:04:19,530
We can name it anything, but let's name it, get Avatar.

66
00:04:19,980 --> 00:04:26,880
Let's set things up so that if this is true, then within the constructor function, we just automatically

67
00:04:26,880 --> 00:04:29,130
call our git avatar function.

68
00:04:29,730 --> 00:04:35,190
If this is false or if you call this constructor function without including a second argument at all,

69
00:04:35,460 --> 00:04:39,990
then we just won't automatically call that function within our constructor.

70
00:04:39,990 --> 00:04:41,430
Here, let's add a new line.

71
00:04:41,970 --> 00:04:51,600
Let's say if parentheses curly brackets for the condition if get avatar equals undefined meaning.

72
00:04:51,600 --> 00:04:56,460
If you call this constructor function and you don't include a second argument at all, this would be

73
00:04:56,460 --> 00:04:57,030
the case.

74
00:04:57,360 --> 00:04:59,880
Well, let's just provide a default value then.

75
00:05:00,070 --> 00:05:09,040
So let's say get Avatar should equal balls, OK, then below this, let's say if parentheses curly brackets,

76
00:05:09,370 --> 00:05:17,010
if you get Avatar, if that's true, then just call our method this dot get Avatar right.

77
00:05:17,050 --> 00:05:22,840
We know that that method is going to automatically create a hash based on the current email and then

78
00:05:22,840 --> 00:05:24,680
generate that avatar you are.

79
00:05:25,360 --> 00:05:29,220
So let's go ahead and save this and then jump back into our post model.

80
00:05:29,710 --> 00:05:30,100
Cool.

81
00:05:30,120 --> 00:05:37,690
So this is going to return an object and because that get Avatar method ran, it's going to have a property

82
00:05:37,900 --> 00:05:39,650
named Avatar.

83
00:05:40,300 --> 00:05:44,320
Let's go ahead and save this and make sure your command line is open.

84
00:05:44,650 --> 00:05:49,930
And then if we go back to the browser and refresh or send a new request, we should see new data in

85
00:05:49,930 --> 00:05:50,650
the console.

86
00:05:51,580 --> 00:05:52,330
Perfect.

87
00:05:52,480 --> 00:05:54,100
So it's the post object.

88
00:05:55,010 --> 00:06:02,510
Now, the author property is just an object that literally only contains the two things were after username

89
00:06:02,900 --> 00:06:03,880
and Avatar.

90
00:06:04,310 --> 00:06:06,620
Cool to bring this lesson to a close.

91
00:06:06,620 --> 00:06:10,700
Let's just go use these values within our HTML template.

92
00:06:11,390 --> 00:06:21,160
So within our views folder, let's jump into single post screen SJS on line number 15.

93
00:06:21,170 --> 00:06:23,770
That's where we see the image for the Avatar.

94
00:06:24,560 --> 00:06:27,440
Let's just get rid of this hardcoded source value.

95
00:06:28,580 --> 00:06:35,270
So for source, let's just empty out the quotes and instead we want to do something dynamic so less

96
00:06:35,270 --> 00:06:41,870
than percentage equal, let's close that out with percentage greater then and then we can just say post

97
00:06:41,870 --> 00:06:50,270
dot author Dot Avatar, OK, on the line of code right below this we see posted by.

98
00:06:50,270 --> 00:06:53,070
And then here is a fake hardcoded username.

99
00:06:53,420 --> 00:06:59,440
Let's just get rid of that and replace it with this opening dynamic tag.

100
00:06:59,450 --> 00:07:01,150
Let's close that out within there.

101
00:07:01,160 --> 00:07:06,130
We would just say post dot author dot username.

102
00:07:06,770 --> 00:07:09,050
Let's give this a save and go refresh.

103
00:07:10,070 --> 00:07:13,520
Currently, it's the fake hardcoded Kitty Doe, but if I refresh.

104
00:07:15,360 --> 00:07:21,840
Cool, it pulls in the real user name and photo for this posts author that's going to bring this lesson

105
00:07:21,840 --> 00:07:22,680
to a close.

106
00:07:23,010 --> 00:07:28,320
In our next lesson, we are going to start working on the user profile screen.

107
00:07:28,710 --> 00:07:34,830
So that way, if you click on the user's username link here or if you click your own avatar in your

108
00:07:34,830 --> 00:07:39,930
top right header, either way, you should be taken to a profile for a particular user.

109
00:07:40,230 --> 00:07:43,580
And we would want that template to look something like this.

110
00:07:44,340 --> 00:07:47,480
So it will show all posts created by that author.

111
00:07:47,760 --> 00:07:53,940
And this way, we don't have to keep going into our database to find the ID for a post to paste that

112
00:07:53,940 --> 00:07:54,540
into a U.

113
00:07:54,540 --> 00:07:55,080
RL.

114
00:07:55,470 --> 00:08:01,260
Right this way we could just click on one of the posts and it would automatically take us to the appropriate

115
00:08:01,260 --> 00:08:01,750
you are.

116
00:08:01,750 --> 00:08:08,490
Now, I know that this lesson that we just worked through was very tedious, but I think this next upcoming

117
00:08:08,490 --> 00:08:10,980
profile lesson should be a lot of fun.

118
00:08:11,400 --> 00:08:14,040
So let's keep things rolling and I'll see you then.
