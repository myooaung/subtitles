WEBVTT
1
00:00:02.030 --> 00:00:03.050
Hello, everyone.

2
00:00:03.380 --> 00:00:07.860
In this lesson, we are going to add validation to our model.

3
00:00:08.300 --> 00:00:10.450
Let's jump right into the action.

4
00:00:11.000 --> 00:00:14.720
So right now I'm in our user controller, James File.

5
00:00:14.930 --> 00:00:18.830
And in our previous lesson, we created an object.

6
00:00:18.830 --> 00:00:25.910
We named it lowercase user, which is being created from our uppercase user blueprint or model, and

7
00:00:25.910 --> 00:00:27.290
then still within our controller.

8
00:00:27.290 --> 00:00:32.030
Once we've created that object, we are then calling its register method.

9
00:00:32.360 --> 00:00:38.720
So our goal in this lesson is to make that register method actually do something right.

10
00:00:38.740 --> 00:00:43.730
That's where we want to enforce our business logic that none of these three fields are allowed to be

11
00:00:43.730 --> 00:00:44.350
blank.

12
00:00:44.690 --> 00:00:48.360
And we also need to make sure that the value for each one makes sense.

13
00:00:48.920 --> 00:00:50.660
So let's get started right now.

14
00:00:50.670 --> 00:00:52.580
Do this with me in your text editor.

15
00:00:52.820 --> 00:00:56.390
Jump in to our user JSC model file.

16
00:00:56.840 --> 00:01:01.880
Towards the end of our previous lesson, we created this empty function named Register.

17
00:01:02.090 --> 00:01:07.970
And right now, within the body of this function, let's add a few comments just to give ourselves a

18
00:01:07.970 --> 00:01:10.280
few big picture goals of where we're going.

19
00:01:10.680 --> 00:01:17.010
So let's add one comment and say, step number one, validate user data.

20
00:01:17.900 --> 00:01:22.850
This is where we can check to make sure that none of the fields are empty and also that the values make

21
00:01:22.860 --> 00:01:23.510
sense.

22
00:01:23.940 --> 00:01:33.320
And then below this, let's add another comment and say step number two, only if there are no validation

23
00:01:33.320 --> 00:01:34.010
errors.

24
00:01:34.550 --> 00:01:36.740
And then you could keep typing all on one line.

25
00:01:36.740 --> 00:01:39.920
But I'm going to drop down just so you can see this all on the screen at once.

26
00:01:39.920 --> 00:01:48.530
But let's say only if there are no validation errors, then save the user data into a database.

27
00:01:48.980 --> 00:01:49.310
Right.

28
00:01:49.310 --> 00:01:51.890
That's the end goal of a user registry.

29
00:01:52.310 --> 00:01:58.370
We want to permanently store their user name, email and password so that we can reference it when that

30
00:01:58.370 --> 00:02:00.650
user tries to log in again in the future.

31
00:02:01.070 --> 00:02:05.140
Now, in this particular lesson, we are not going to connect to a database yet.

32
00:02:05.450 --> 00:02:09.560
In this lesson, we are going to spend our time focusing on step number one.

33
00:02:09.890 --> 00:02:12.050
Right, validating the user's data.

34
00:02:12.320 --> 00:02:17.720
Now, we could start spelling out our code right underneath this comment here, but instead let's create

35
00:02:17.720 --> 00:02:20.450
a separate function to stay organized.

36
00:02:20.840 --> 00:02:27.710
So maybe right above this register function line, let's add a brand new line and let's say user dot,

37
00:02:28.070 --> 00:02:35.780
prototype, dot, validate, and let's set that to equal an anonymous functions, function, parentheses,

38
00:02:35.780 --> 00:02:36.760
curly brackets.

39
00:02:37.250 --> 00:02:41.810
OK, then down within our register function right underneath that step number one line.

40
00:02:42.050 --> 00:02:49.700
Let's just call that new validate function so we can just say this dot and then call validate.

41
00:02:50.600 --> 00:02:53.800
If you're confused by the this keyword, that's OK.

42
00:02:54.110 --> 00:02:55.280
Here's a quick review.

43
00:02:55.430 --> 00:03:00.780
We know that the this keyword points towards whatever is calling or executing the current function.

44
00:03:01.370 --> 00:03:04.480
So in this case, the current function is our register function.

45
00:03:05.030 --> 00:03:06.410
So what's causing that?

46
00:03:06.620 --> 00:03:13.640
Well, if we jump back to our user controller, it's our lowercase user object that is calling the register

47
00:03:13.640 --> 00:03:14.090
method.

48
00:03:14.450 --> 00:03:19.420
So that lowercase user object is what the this keyword is going to be pointing towards.

49
00:03:20.810 --> 00:03:27.110
So then when we say this dot validate, it's almost like we're just saying lowercase user dot validate.

50
00:03:27.560 --> 00:03:34.220
And because we added a validate function to our uppercase user blueprint, we know that that lowercase

51
00:03:34.220 --> 00:03:36.920
user object will have access to this method.

52
00:03:37.410 --> 00:03:43.370
OK, now within this validate function, there are a million different ways that we could validate the

53
00:03:43.370 --> 00:03:43.840
data.

54
00:03:44.300 --> 00:03:45.790
There's no right or wrong way.

55
00:03:45.890 --> 00:03:48.170
I'm just going to show you the way that I would do it.

56
00:03:48.710 --> 00:03:54.110
I'm going to list out several if statements of problems with the data that I would want to look out

57
00:03:54.110 --> 00:03:54.530
for.

58
00:03:54.780 --> 00:04:01.910
So, for example, I will say if and then list my condition inside these parentheses and then curly

59
00:04:01.910 --> 00:04:05.810
brackets where I say what should happen if this condition is true?

60
00:04:06.140 --> 00:04:12.010
So let's say if they left their username field blank, right.

61
00:04:12.140 --> 00:04:15.740
If they leave this username field blank, that is a big problem.

62
00:04:16.220 --> 00:04:25.070
So let's say this within our condition, within these parentheses, let's say if this DOT data dot username,

63
00:04:25.730 --> 00:04:32.480
if that equals just an empty pair of quotes, not even a space in between them, just nothing.

64
00:04:32.480 --> 00:04:33.860
Just two quotations.

65
00:04:34.220 --> 00:04:39.650
If they left that username feel completely blank, then what do we want to do within these curly brackets?

66
00:04:40.040 --> 00:04:43.190
Well, again, there are a million different ways you could set this up.

67
00:04:43.310 --> 00:04:49.610
But here's what I'm going to do up at the very top of this file within our constructor function below

68
00:04:49.620 --> 00:04:51.860
this this data equals data line.

69
00:04:51.980 --> 00:04:58.410
Let's say this DOT errors equals an empty array.

70
00:04:58.670 --> 00:05:01.100
So just an opening and closing square brackets.

71
00:05:01.930 --> 00:05:08.260
So what I like to do is I check for a potential problem, and if this is true, if they left that field

72
00:05:08.260 --> 00:05:15.060
blank within the curly brackets, I'm going to push a new item onto our errors array.

73
00:05:15.490 --> 00:05:22.090
So within these curly brackets, let's say this dot errors, dot push and push is an array method.

74
00:05:22.090 --> 00:05:23.470
So parentheses to call it.

75
00:05:24.040 --> 00:05:29.720
And let's give it a string of text and say you must provide a username.

76
00:05:30.340 --> 00:05:34.980
OK, but what if they leave the email or password fields completely blank.

77
00:05:35.710 --> 00:05:40.420
Well, let's just copy this line of code into our clipboard, so copy that.

78
00:05:40.600 --> 00:05:45.940
And then right below this line of code, just paste it in, just duplicate it and then let's just change

79
00:05:46.390 --> 00:05:51.550
this data username, change the username to email.

80
00:05:52.480 --> 00:05:59.830
And then in the message that we are pushing on to the array, let's say you must provide a valid email

81
00:05:59.830 --> 00:06:00.580
address.

82
00:06:01.790 --> 00:06:07.780
Let's not forget about the password, so below that line, paste in your clipboard again, this time

83
00:06:07.790 --> 00:06:13.370
let's change this data username to this DataDot password.

84
00:06:13.790 --> 00:06:20.640
If that is left blank, then let's just change this to say you must provide a password.

85
00:06:21.470 --> 00:06:25.380
Now, there are still several other conditions that I would want to check for.

86
00:06:25.670 --> 00:06:31.260
For example, I'd still want to make sure that their password is at least 12 characters long for security.

87
00:06:31.820 --> 00:06:36.170
I'd want to make sure that whatever they typed for their email contains the at symbol.

88
00:06:36.350 --> 00:06:36.680
Right.

89
00:06:36.680 --> 00:06:39.010
That it looks like a valid email address.

90
00:06:39.320 --> 00:06:45.590
I'd want to make sure that their username doesn't contain any weird characters, so on and so forth.

91
00:06:45.830 --> 00:06:47.260
So we're not done here yet.

92
00:06:47.420 --> 00:06:51.290
There are additional things that we would want to check for within our validate function.

93
00:06:51.650 --> 00:06:55.300
But for the time being, let's go ahead and test this out.

94
00:06:55.790 --> 00:06:58.780
We can already leverage this from within our controller.

95
00:06:59.360 --> 00:07:06.520
So let's go ahead and save this model file and then jump back into our user controller JS file.

96
00:07:06.980 --> 00:07:12.860
Now, right after we say lower case user dot register right below that, let's get rid of this line

97
00:07:12.860 --> 00:07:19.610
where we send back a generic response that says thanks for trying to register and instead let's include

98
00:07:19.790 --> 00:07:25.880
if statement, if parentheses, curly brackets, let's drop down within the curly brackets.

99
00:07:25.880 --> 00:07:31.940
And then after the closing curly bracket, let's also say else, and then a new pair of curly brackets.

100
00:07:32.450 --> 00:07:35.140
OK, and what are we checking for with this if statement?

101
00:07:35.570 --> 00:07:37.610
Well, within the parentheses for our condition.

102
00:07:37.610 --> 00:07:49.190
Let's say if lowercase user dot errors dot lank remember our errors property is an array and in JavaScript

103
00:07:49.190 --> 00:07:54.500
every array has a property name length that counts how many items are in that array.

104
00:07:54.860 --> 00:07:57.980
So that array starts out as an empty array.

105
00:07:58.470 --> 00:08:04.520
So the only way that this value would be anything larger than zero is if there actually is a problem

106
00:08:04.520 --> 00:08:05.320
or an error.

107
00:08:05.750 --> 00:08:11.870
Now, when it comes to conditions within an IF statement, any number larger than zero evaluates to

108
00:08:11.870 --> 00:08:12.370
true.

109
00:08:12.740 --> 00:08:14.660
So just as a test, let's do this.

110
00:08:15.110 --> 00:08:20.330
If there are indeed validation errors, let's just send them back to the user.

111
00:08:20.750 --> 00:08:25.970
So let's just say response dot send and let's just send back that array of errors.

112
00:08:25.970 --> 00:08:34.070
So user dot errors, OK, and then else otherwise if there are no validation errors, just as a test,

113
00:08:34.070 --> 00:08:35.480
let's send back to the user.

114
00:08:35.480 --> 00:08:40.730
So response send and let's just include a string of text says congrats.

115
00:08:41.240 --> 00:08:43.460
There are no errors now.

116
00:08:43.460 --> 00:08:48.770
In the future we will learn how to set things up so that our controller does not even need to have this

117
00:08:48.770 --> 00:08:51.770
basic logic of checking the air zarei.

118
00:08:52.160 --> 00:08:59.180
Ideally, from an MVC perspective, even that sort of logic should be left to the model, not the controller.

119
00:08:59.540 --> 00:09:02.900
But for the time being, this setup will work just fine.

120
00:09:03.350 --> 00:09:07.400
So let's go ahead and save this file and then take it for a test drive.

121
00:09:07.880 --> 00:09:13.910
So in the browser, imagine I fill in my username and password, but leave the email field blank.

122
00:09:13.910 --> 00:09:20.150
So I say username Brad, leave email blank, but then fill in a password and then submit the form.

123
00:09:20.630 --> 00:09:21.170
Perfect.

124
00:09:21.170 --> 00:09:24.770
We see you must provide a valid email address.

125
00:09:25.310 --> 00:09:32.000
Or if I go back and leave all of the fields blank and submit the form, we see all of the messages.

126
00:09:32.000 --> 00:09:35.900
You must provide a username, you must provide a valid email, you must provide a password.

127
00:09:36.530 --> 00:09:42.530
Or if I go back and don't leave any of the fields blank, we see.

128
00:09:43.130 --> 00:09:43.820
Congrats.

129
00:09:43.820 --> 00:09:45.770
There are no errors now.

130
00:09:45.770 --> 00:09:53.360
Obviously sending back just plain simple text like this instead of a styled HTML template to match the

131
00:09:53.360 --> 00:09:58.940
design of our site is not the pinnacle of user experience, but we'll get to that later.

132
00:09:59.300 --> 00:10:02.870
For now, let's keep working on our validation rules.

133
00:10:03.380 --> 00:10:10.190
So let's jump back into our editor, jump back into our user model file and within our validate function,

134
00:10:10.520 --> 00:10:18.140
let's add a check to make sure that the password is at least twelve characters long for security reasons.

135
00:10:18.770 --> 00:10:25.430
So let's say if parentheses curly brackets for the condition inside the parentheses, we can say if

136
00:10:25.760 --> 00:10:35.300
this dot data dot password and in JavaScript you can see how many characters a string consists of by

137
00:10:35.300 --> 00:10:36.830
looking for its length.

138
00:10:36.830 --> 00:10:39.800
Property said the selected code will pull in.

139
00:10:39.800 --> 00:10:45.500
How many characters long it is and let's say if that is greater than zero.

140
00:10:45.830 --> 00:10:46.160
Right.

141
00:10:46.190 --> 00:10:52.100
If they typed in something because we want this to be a distinct message from just the generic, you

142
00:10:52.100 --> 00:10:55.130
must provide a password if it's left completely blank.

143
00:10:55.490 --> 00:11:01.160
So we'll say if the length of what they typed in is greater than zero and.

144
00:11:01.290 --> 00:11:12.060
So ampersand, ampersand and its length is less than 12, so this data, not password length, is less

145
00:11:12.060 --> 00:11:16.030
than 12 anyways within the curly brackets.

146
00:11:16.260 --> 00:11:24.120
If this is the case, let's just say this dot errors, dot push and let's just push on a string of text

147
00:11:24.120 --> 00:11:31.680
that says password must be at least 12 characters.

148
00:11:32.490 --> 00:11:39.720
And then below that line of code, let's set something up so that their password cannot exceed 100 characters.

149
00:11:40.080 --> 00:11:43.510
From a security standpoint, the longer the password, the better.

150
00:11:43.710 --> 00:11:47.880
So we could even set the upward limit to something like two hundred or five hundred.

151
00:11:48.240 --> 00:11:58.530
But let's just say if parentheses curly brackets, let's say if this data dot password dot lane is greater

152
00:11:58.530 --> 00:12:04.430
than, let's say, one hundred, well then in the curly brackets we would push on an error message.

153
00:12:04.440 --> 00:12:10.740
So this dot errors and then call the push method and give it a string of text.

154
00:12:11.130 --> 00:12:17.180
Password cannot exceed 100 characters.

155
00:12:18.010 --> 00:12:22.320
OK, so we just checked for the minimum and maximum length of the password.

156
00:12:22.620 --> 00:12:25.740
Now let's do the same thing for the length of the username.

157
00:12:25.950 --> 00:12:32.060
We can save a lot of typing by just copying and pasting and duplicating those last two lines.

158
00:12:32.400 --> 00:12:38.490
So I'm just going to copy that and then right below that paste in my clipboard and then on these bottom

159
00:12:38.490 --> 00:12:46.200
two lines, just change the reference to password to the username, do the same thing on the last line

160
00:12:46.200 --> 00:12:46.690
as well.

161
00:12:48.120 --> 00:12:54.090
And on this first user name line, let's say if the user name is greater than zero characters, but

162
00:12:54.090 --> 00:13:00.960
less than instead of 12, let's just say three, your username needs to be at least three characters

163
00:13:00.960 --> 00:13:01.350
long.

164
00:13:01.680 --> 00:13:04.500
These are all just arbitrary rules that I'm making up.

165
00:13:04.500 --> 00:13:07.620
But you get the idea right below this value of three.

166
00:13:07.620 --> 00:13:11.970
Make sure that we change password here to username.

167
00:13:13.200 --> 00:13:19.380
And then be sure to customize the error message, so instead of saying password must be at least 12

168
00:13:19.380 --> 00:13:25.950
characters, it should say user name must be at least three characters.

169
00:13:26.490 --> 00:13:33.510
OK, and then for this last line, let's say that the maximum username length should be 30 characters.

170
00:13:33.810 --> 00:13:36.440
So instead of a hundred, let's change that to 30.

171
00:13:36.840 --> 00:13:44.340
And then for the custom error message, let's just say user name cannot exceed 30 characters.

172
00:13:44.850 --> 00:13:51.330
Now let's move on and check to make sure that whatever the user types for their e-mail is a valid email

173
00:13:51.330 --> 00:13:58.630
address, meaning it should have a beginning portion and then the ACT symbol and then some sort of domain.

174
00:13:59.310 --> 00:14:05.370
Now we could write out the code that would check for that by learning about something called a regular

175
00:14:05.370 --> 00:14:06.150
expression.

176
00:14:06.630 --> 00:14:09.450
But I don't think this is the time or place for that.

177
00:14:09.840 --> 00:14:16.740
Instead, I recommend we go out to the JavaScript grocery store or NPM and pick up a package that has

178
00:14:16.740 --> 00:14:23.050
a bunch of useful validator checks and one of them happens to be an email validator check.

179
00:14:23.400 --> 00:14:24.570
Let me show you what I mean.

180
00:14:24.580 --> 00:14:30.570
So right now, be sure to open up your command line and I'm going to press control, see to quit the

181
00:14:30.570 --> 00:14:34.210
current app and let's install a package from NPM.

182
00:14:34.650 --> 00:14:36.390
So let's run this command together.

183
00:14:36.390 --> 00:14:39.240
NPM install.

184
00:14:39.570 --> 00:14:42.990
And the name of the package is Validator.

185
00:14:44.910 --> 00:14:47.850
Go ahead and type that command in and then let's press enter.

186
00:14:50.310 --> 00:14:54.570
OK, with that package installed, I'm going to go ahead and start my application up again.

187
00:14:54.900 --> 00:14:57.630
So to do that, it's NPM run watch.

188
00:14:58.760 --> 00:15:06.110
OK, and now up at the very top of our user model file, let's require or import in that package that

189
00:15:06.110 --> 00:15:07.160
we just downloaded.

190
00:15:08.100 --> 00:15:15.260
So let's create a constant let's call it validator and let's set it to equal and then just require in

191
00:15:15.260 --> 00:15:16.160
that package.

192
00:15:17.570 --> 00:15:20.180
OK, now we can leverage validator.

193
00:15:20.810 --> 00:15:25.610
So within our validate function, the second rule is for our email.

194
00:15:26.640 --> 00:15:33.630
Right, we said if the email is left blank, well, let's just change this logic, let's empty out the

195
00:15:33.630 --> 00:15:35.340
parentheses for that condition.

196
00:15:35.730 --> 00:15:37.830
So it's just an empty pair of parentheses.

197
00:15:38.100 --> 00:15:39.630
And instead, let's write this.

198
00:15:39.930 --> 00:15:50.160
If Validator DOT is email and is email is a method, so it gets its own set of parentheses to call it.

199
00:15:50.550 --> 00:15:57.330
And now whatever we pass within the is email parentheses, this is email method is going to return either

200
00:15:57.330 --> 00:15:59.000
true or false.

201
00:15:59.490 --> 00:16:03.360
So within those parentheses, let's pass at the email that the user just submitted.

202
00:16:03.630 --> 00:16:07.150
So that would be this dot data, dot email.

203
00:16:07.860 --> 00:16:12.690
OK, and now if what they typed is a valid email address, this is going to return.

204
00:16:12.690 --> 00:16:13.230
True.

205
00:16:13.680 --> 00:16:18.720
But we only want to push this error if what they typed is not a valid email.

206
00:16:19.230 --> 00:16:25.180
So to check for the opposite right before validator, we can just include an exclamation mark.

207
00:16:25.740 --> 00:16:29.520
In this case, the exclamation sort of reverses whatever comes after it.

208
00:16:29.520 --> 00:16:31.530
So if it was true before, now it's false.

209
00:16:31.770 --> 00:16:33.780
If it was false before, now it's true.

210
00:16:34.170 --> 00:16:40.170
So altogether we're saying if what they typed in is not an email, then push this error.

211
00:16:40.650 --> 00:16:42.840
Let's go ahead and save this and test it out.

212
00:16:43.290 --> 00:16:45.560
I'll say, Brad, for my username, for email.

213
00:16:45.600 --> 00:16:50.010
Just say, Brad, clearly that's not a valid email address for password.

214
00:16:50.010 --> 00:16:55.770
I'll choose something that's over 12 characters and then try to sign up cuz we see you must provide

215
00:16:55.770 --> 00:16:57.210
a valid email address.

216
00:16:57.540 --> 00:17:05.910
But if I go back and say Brad at Brad dot com, that should be considered a valid email address.

217
00:17:06.420 --> 00:17:07.300
Let's test it out.

218
00:17:07.680 --> 00:17:08.100
Cool.

219
00:17:08.280 --> 00:17:09.000
Congrats.

220
00:17:09.010 --> 00:17:10.260
There are no errors.

221
00:17:10.750 --> 00:17:13.380
OK, and let's add one more validation check.

222
00:17:13.590 --> 00:17:20.090
Let's make sure that whatever they choose for a username does not contain any weird characters or symbols.

223
00:17:20.580 --> 00:17:26.580
Let's set it so you can only choose from the 26 letters of the alphabet and then numbers like zero through

224
00:17:26.580 --> 00:17:27.150
nine.

225
00:17:27.720 --> 00:17:33.090
So to check for this, back in our text editor, maybe right above that email line that we just wrote.

226
00:17:33.090 --> 00:17:39.630
Let's add a new line and let's say if parentheses curly brackets for the condition, let's make sure

227
00:17:39.630 --> 00:17:42.360
that they typed something in for the username.

228
00:17:42.370 --> 00:17:51.600
So let's say if this data username does not equal an empty pair of quotes, so instead of double equals,

229
00:17:51.600 --> 00:17:52.890
sign the check for equality.

230
00:17:52.890 --> 00:17:57.780
We can say exclamation equals sign to check for the opposite of equality.

231
00:17:58.260 --> 00:18:04.680
And then still within that same set of parentheses, let's say, and and so ampersand, ampersand,

232
00:18:05.100 --> 00:18:14.790
if they typed something in and and then validator dot is alpha numeric and that's a method.

233
00:18:14.790 --> 00:18:16.800
So it gets its own set of parentheses.

234
00:18:17.250 --> 00:18:21.130
So within those parentheses, let's passing this dot data dot username.

235
00:18:21.960 --> 00:18:23.280
Now this is going to return.

236
00:18:23.280 --> 00:18:23.760
True.

237
00:18:23.910 --> 00:18:28.260
If it is alphanumeric, we would want to check for the opposite of that.

238
00:18:28.260 --> 00:18:33.750
So right before validator just include an exclamation then within these curly brackets, let's push

239
00:18:33.750 --> 00:18:34.370
on an error.

240
00:18:34.890 --> 00:18:45.840
So this dot errors dot push, then those parentheses, let's say user name can only contain letters

241
00:18:45.840 --> 00:18:47.400
and numbers.

242
00:18:48.090 --> 00:18:50.420
Let's go ahead and save this and test it out.

243
00:18:51.240 --> 00:18:56.670
So if I say Brad and then I include some curly brackets or square brackets and then let me fill in the

244
00:18:56.670 --> 00:18:57.450
other fields.

245
00:19:00.370 --> 00:19:06.490
Cool, we see username can only contain letters and numbers, but if I just choose from the letters

246
00:19:06.490 --> 00:19:09.250
of the alphabet and maybe even a few numbers.

247
00:19:12.800 --> 00:19:19.460
Awesome, we see congrats, there are no errors, and that's going to bring this lesson to a close in

248
00:19:19.460 --> 00:19:25.160
our next lesson, we're going to make sure that the visitor doesn't try to send a value that is not

249
00:19:25.160 --> 00:19:27.890
a string of text for one of these properties.

250
00:19:28.310 --> 00:19:33.020
For example, we would not want to accept an array or an object.

251
00:19:33.290 --> 00:19:35.570
We only want strings of text.

252
00:19:36.050 --> 00:19:42.080
And we also want to make sure that we do not accept any extra properties or feels that a visitor might

253
00:19:42.080 --> 00:19:43.190
try and send over.

254
00:19:43.550 --> 00:19:46.640
Setting these safety checks up should be very, very quick.

255
00:19:46.850 --> 00:19:53.780
And then after that we can finally work on actually saving the user data into a database.

256
00:19:54.260 --> 00:19:58.130
Let's keep things rolling and I will see you in the next lesson.
