WEBVTT
1
00:00:01.870 --> 00:00:02.960
Hello, everyone.

2
00:00:03.490 --> 00:00:05.810
This is sort of a bigger picture video.

3
00:00:06.160 --> 00:00:08.320
We are not going to be writing any code.

4
00:00:08.620 --> 00:00:13.210
Instead in this video, we are going to answer three questions.

5
00:00:13.720 --> 00:00:19.120
So, number one, why was the app that we built in our previous lessons so important?

6
00:00:19.840 --> 00:00:25.570
Number two, what is the missing ingredient that will let us build more advanced apps?

7
00:00:25.930 --> 00:00:31.200
And finally, number three, what are we going to be doing for the remainder of this course?

8
00:00:31.750 --> 00:00:37.990
Let's start up at the top with number one and ask ourselves why was this application that we just built

9
00:00:37.990 --> 00:00:38.950
so important?

10
00:00:39.580 --> 00:00:46.060
Well, it's because we are now at least a little bit familiar with the process of receiving an incoming

11
00:00:46.060 --> 00:00:53.120
request, making a decision based on the user's input and then sending back a response.

12
00:00:53.740 --> 00:01:01.600
Now, understanding this basic cycle of request and response request and response is insanely powerful

13
00:01:01.870 --> 00:01:04.920
because that's really all any application does.

14
00:01:05.410 --> 00:01:11.610
The real question becomes what do we do in between the request and response?

15
00:01:11.980 --> 00:01:13.860
So I want you to think of a sandwich.

16
00:01:14.320 --> 00:01:19.100
Typically the most interesting part of a sandwich is whatever is in between the bread.

17
00:01:19.600 --> 00:01:26.050
So if we think of the incoming request as one piece of bread and the response that our server sends

18
00:01:26.050 --> 00:01:31.540
back as the other piece of bread, that would mean that the peanut butter and jelly or the meat of our

19
00:01:31.540 --> 00:01:36.750
sandwich is our if statement that checks the user sky color value.

20
00:01:37.240 --> 00:01:42.410
Now, granted, that's a pretty boring and simple sandwich that we made, but that's not the point.

21
00:01:42.430 --> 00:01:46.150
The point is that we now know how to make a sandwich at all.

22
00:01:46.540 --> 00:01:47.370
That's huge.

23
00:01:47.710 --> 00:01:52.530
Now we just need to learn how to put more interesting ingredients into our sandwich.

24
00:01:52.960 --> 00:01:55.750
Which brings us to the second question of this video.

25
00:01:56.020 --> 00:02:02.010
What is the missing ingredient that will let us build more interesting or advanced applications?

26
00:02:02.530 --> 00:02:09.040
Well, if we look at our course overview, we are now at least a little bit familiar with the first

27
00:02:09.040 --> 00:02:10.150
three items.

28
00:02:10.660 --> 00:02:15.370
So as you can probably guess, the missing ingredient is Mongo DB.

29
00:02:15.820 --> 00:02:19.810
Technically, the missing ingredient is any database system.

30
00:02:20.110 --> 00:02:24.310
But in this course, we are going to be using Mongo DB in particular.

31
00:02:24.700 --> 00:02:30.280
Now, before we worry about what a database is, let's first look at the big picture.

32
00:02:30.910 --> 00:02:36.430
So the app or server that we built in our previous lesson can read the user's input.

33
00:02:36.950 --> 00:02:37.230
Right.

34
00:02:37.240 --> 00:02:44.440
We were able to determine if they typed in blue or not, but as soon as the server sends back its response,

35
00:02:44.770 --> 00:02:48.220
that data that the user typed in and submitted is gone.

36
00:02:48.520 --> 00:02:53.940
Our server does not remember it now for certain simple applications, that's OK.

37
00:02:54.310 --> 00:03:00.450
But for most complex applications, we need to have some sort of permanency, right?

38
00:03:00.460 --> 00:03:05.830
Eventually we are going to want to remember or store the user's data.

39
00:03:06.190 --> 00:03:08.870
And this is where databases come into play.

40
00:03:09.160 --> 00:03:15.310
So, for example, what if instead of asking the user what color is the sky, what if instead we were

41
00:03:15.310 --> 00:03:21.940
asking them to register for a new account so they would need to enter a username and password?

42
00:03:22.480 --> 00:03:28.270
Well, we would want to permanently remember those values that they choose so that we can reference

43
00:03:28.270 --> 00:03:30.570
them the next time they try to log in.

44
00:03:31.210 --> 00:03:32.410
That's just one example.

45
00:03:32.410 --> 00:03:34.180
There are millions of examples.

46
00:03:34.420 --> 00:03:36.700
Databases are everywhere.

47
00:03:36.970 --> 00:03:43.180
Any time you post a comment on Instagram, it's getting saved into a database or anytime on Twitter,

48
00:03:43.180 --> 00:03:46.930
you send out a new tweet that's being saved into a database.

49
00:03:47.350 --> 00:03:52.480
Really anything you do on the Internet that is permanent likely involves a database.

50
00:03:52.990 --> 00:04:00.020
Now, instead of us learning about databases in a cold, soulless, academic, isolated vacuum, we

51
00:04:00.040 --> 00:04:07.390
are going to learn about them within the holistic context of creating applications to be more specific,

52
00:04:07.390 --> 00:04:10.330
full stack JavaScript applications.

53
00:04:10.810 --> 00:04:13.060
Which segues nicely into the third.

54
00:04:13.060 --> 00:04:15.070
And final question of this video.

55
00:04:15.550 --> 00:04:19.030
What are we going to do for the remainder of this course?

56
00:04:19.600 --> 00:04:25.240
Well, aside from a few bonus or extra credit topics, at the very end of the course, we are going

57
00:04:25.240 --> 00:04:29.410
to spend the rest of our time together building to applications.

58
00:04:29.920 --> 00:04:33.370
Let's call them app number one and number two.

59
00:04:33.850 --> 00:04:39.910
App number one is small, unorganized and messy and oversimplified.

60
00:04:40.330 --> 00:04:45.940
On the other hand, app number two is big, organized and very real world.

61
00:04:46.420 --> 00:04:51.310
Now, you might be wondering why we're going to build two apps instead of just one, right?

62
00:04:51.310 --> 00:04:56.710
You might think, why not just skip the small unorganized project and just focus all of our effort on

63
00:04:56.710 --> 00:04:58.870
the big organized project right away?

64
00:04:59.320 --> 00:05:01.330
Well, trust me, there is a method to my.

65
00:05:01.360 --> 00:05:07.220
Madness, so right now, our focus is on learning the very basics of a database.

66
00:05:07.240 --> 00:05:13.270
However, if we jumped straight into ACT number two, we would need to worry about things like templating

67
00:05:13.270 --> 00:05:20.380
engines, user registration, user authentication, security error handling, how to keep our code and

68
00:05:20.380 --> 00:05:22.790
files organized and much, much more.

69
00:05:23.320 --> 00:05:26.160
Trust me, we don't want to deal with all of that in this moment.

70
00:05:26.500 --> 00:05:32.470
So for the time being, we need a project that is complex enough to need permanency and a database,

71
00:05:32.860 --> 00:05:38.350
but simple enough that we don't overwhelm ourselves with all of these topics on the screen right now.

72
00:05:38.680 --> 00:05:42.660
That's actually my biggest pet peeve with other courses and instructors.

73
00:05:43.060 --> 00:05:49.060
They structure their example projects in a way to where you're being introduced to ten new topics at

74
00:05:49.060 --> 00:05:54.610
once and you just drown in a sea of new topics, all fighting for your brain's horsepower at the same

75
00:05:54.610 --> 00:05:55.050
time.

76
00:05:55.420 --> 00:06:02.020
So the idea in this course is that app no one will get us comfortable with the big picture, the basic

77
00:06:02.020 --> 00:06:04.390
mechanics of building a full stack app.

78
00:06:04.660 --> 00:06:10.450
And then once we've absorbed some of that and some of it becomes second nature, we can move on to app

79
00:06:10.450 --> 00:06:17.170
number two, where we do worry about real world complications and best practices and so on and so forth.

80
00:06:17.470 --> 00:06:23.740
Now, really quick right now, I want to show you a sneak peak of both app number one and number two,

81
00:06:23.980 --> 00:06:25.430
just so you know what to expect.

82
00:06:25.930 --> 00:06:31.750
So here is app number one, and this is the finished final product that we are going to be building

83
00:06:31.750 --> 00:06:32.410
together.

84
00:06:32.770 --> 00:06:34.750
It's a very simple to do app.

85
00:06:35.020 --> 00:06:36.760
And you can see there's a text field here.

86
00:06:36.760 --> 00:06:43.960
And if I type in, feed the dog and then either push, enter or click the blue submit button, it adds

87
00:06:43.960 --> 00:06:44.620
it down here.

88
00:06:44.860 --> 00:06:53.860
And let me add a few more items, maybe pay attention to the cat and maybe buy fruits and vegetables.

89
00:06:54.720 --> 00:06:58.990
OK, so now I've got this list of items and each item has two different actions.

90
00:06:58.990 --> 00:07:00.390
You can edit it or delete it.

91
00:07:00.820 --> 00:07:07.210
So if I click edit on Feed the Dog, this little pop up appears and I can type something new in.

92
00:07:07.210 --> 00:07:10.810
I can say feed the dog, maybe add the word today at the end of it.

93
00:07:11.470 --> 00:07:17.080
OK, you can see it gets updated and then obviously I'm free to delete any of the items I want.

94
00:07:17.080 --> 00:07:20.360
So if I want to delete by fruits and vegetables, just click delete.

95
00:07:20.780 --> 00:07:21.870
We see this little pop up.

96
00:07:22.120 --> 00:07:25.340
Do you really want to delete by fruits and vegetables permanently?

97
00:07:25.540 --> 00:07:26.130
Yes, I do.

98
00:07:26.140 --> 00:07:28.270
So click OK, and it's gone.

99
00:07:28.660 --> 00:07:35.200
Now, the whole point of this application is that our list of items is being permanently stored in a

100
00:07:35.200 --> 00:07:36.040
database.

101
00:07:36.370 --> 00:07:42.220
So even if I closed my Web browser and then came back and revisited this app maybe a year or two from

102
00:07:42.220 --> 00:07:46.630
now, this data, these items would still be here waiting for me.

103
00:07:47.050 --> 00:07:52.030
Or better yet, I could step away from my computer and maybe use my phone or tablet.

104
00:07:52.210 --> 00:07:58.030
And my data would still be available to me because instead of just localhost, we are also going to

105
00:07:58.030 --> 00:08:03.750
learn how to push this app up onto the Internet so you can share it with your friends and family.

106
00:08:04.120 --> 00:08:07.060
So in the address bar, if I instead visit this U.

107
00:08:07.090 --> 00:08:14.280
URL because our data and database lives in the cloud, you can access it from any device.

108
00:08:14.320 --> 00:08:15.280
So this is pretty fun.

109
00:08:15.280 --> 00:08:16.270
You will get a U.

110
00:08:16.270 --> 00:08:19.130
RL that you can share with your friends and family.

111
00:08:19.360 --> 00:08:20.680
This is just my example.

112
00:08:20.680 --> 00:08:21.580
Temporary U.

113
00:08:21.580 --> 00:08:28.830
RL, you will receive a new unique URL for yourself and then you can see them add new items to the list.

114
00:08:29.290 --> 00:08:30.010
Big picture.

115
00:08:30.010 --> 00:08:35.260
There's not a whole lot going on with this app, but it is great practice of learning how to stitch

116
00:08:35.260 --> 00:08:35.710
together.

117
00:08:35.710 --> 00:08:38.170
Are three environments the web browser?

118
00:08:38.410 --> 00:08:43.510
No, just for the server and Mongo DB for the permanency or database layer.

119
00:08:43.900 --> 00:08:46.300
OK, so that's a review of app No.

120
00:08:46.300 --> 00:08:48.370
One that we are going to build together.

121
00:08:48.910 --> 00:08:52.390
Now let's take a look at the more complex app number two.

122
00:08:53.230 --> 00:08:55.330
So this is what the homepage looks like.

123
00:08:55.330 --> 00:09:00.700
If you are not logged in, it shows you a registration form to sign up for a new account.

124
00:09:01.120 --> 00:09:06.100
If you try to sign up for a username that already exists that someone has already used, you get a real

125
00:09:06.100 --> 00:09:07.600
time feedback message.

126
00:09:07.870 --> 00:09:09.520
That username is already taken.

127
00:09:09.850 --> 00:09:12.850
So if I add unique at the end of it, good to go.

128
00:09:12.850 --> 00:09:16.900
If you add something that is not a valid email address, you get a warning in real time.

129
00:09:17.170 --> 00:09:18.070
You get the idea.

130
00:09:18.370 --> 00:09:23.170
Now, instead of creating an account in this moment, let's just log in to an existing account, show

131
00:09:23.170 --> 00:09:24.850
you around up in the header.

132
00:09:24.850 --> 00:09:28.720
You can log in as soon as I sign in.

133
00:09:28.720 --> 00:09:31.180
You can see the homepage looks very different.

134
00:09:31.570 --> 00:09:34.900
By the way, this is a journal or diary type of application.

135
00:09:35.200 --> 00:09:39.820
So you can see the homepage now that I'm logged in, reads the latest from those you follow.

136
00:09:40.270 --> 00:09:43.990
This is essentially a very basic social network type of application.

137
00:09:44.320 --> 00:09:49.360
These are articles or journal entries written by the people that I follow so I can see this one is titled

138
00:09:49.360 --> 00:09:52.570
Destroying Furniture is Fun, written by Kitty Doe.

139
00:09:52.570 --> 00:09:53.710
So if I click on that.

140
00:09:55.590 --> 00:10:00.390
Here is their article, and I can even click on their name to go to their profile.

141
00:10:03.260 --> 00:10:07.730
Up in the top right menu bar, I can click on my own circle to go to my own profile.

142
00:10:09.680 --> 00:10:14.240
So I have three posts, I have one follower, I'm following two accounts we can click on that.

143
00:10:14.240 --> 00:10:16.040
You can see I'm following barks a lot.

144
00:10:16.040 --> 00:10:18.980
And Kitty Doe also back up in the header.

145
00:10:18.980 --> 00:10:22.670
I can click on this icon to search for the content that I'm interested in.

146
00:10:23.450 --> 00:10:25.550
So if I search for the word furniture.

147
00:10:27.260 --> 00:10:31.790
In real time, we get search results, so we see destroying furniture is fun, that existing article

148
00:10:31.790 --> 00:10:36.330
by Kitty Doe by search for something that's going to return multiple results like the word post.

149
00:10:36.590 --> 00:10:37.070
There we go.

150
00:10:37.070 --> 00:10:38.650
Because I use that word in my title.

151
00:10:38.810 --> 00:10:39.780
You get the idea.

152
00:10:39.800 --> 00:10:42.080
Let's close this live search results feature.

153
00:10:42.770 --> 00:10:47.810
I can click on this green create post button to obviously create a new post or article.

154
00:10:48.380 --> 00:10:53.070
Obviously, a user is able to edit or delete their own existing articles.

155
00:10:53.510 --> 00:10:54.950
OK, changing gears.

156
00:10:54.950 --> 00:10:59.120
If we look up in the header, we can see a chat or conversation looking icon.

157
00:10:59.420 --> 00:11:02.840
If you click that, it opens chat box, connects you to the chat room.

158
00:11:03.050 --> 00:11:06.790
And this is not a one on one direct messaging inbox system.

159
00:11:07.130 --> 00:11:10.970
This is more of an old school traditional public chat room.

160
00:11:11.540 --> 00:11:13.790
So I can type in a message and say hello.

161
00:11:14.810 --> 00:11:19.670
And any and all users that are logged in will be placed into this same chat room with me.

162
00:11:20.030 --> 00:11:24.890
In the real world, the public chat room like this would probably just be taken advantage of by weirdos

163
00:11:24.890 --> 00:11:26.540
and creeps and malicious users.

164
00:11:26.960 --> 00:11:31.250
But in the context of this course, I think it's a fun programming exercise.

165
00:11:31.700 --> 00:11:36.770
So I'm logged in as the Brad user in this browser, but I actually have a secondary browser in this

166
00:11:36.770 --> 00:11:37.070
window.

167
00:11:37.070 --> 00:11:39.320
I'm logged in as the Kitty Doe account.

168
00:11:39.560 --> 00:11:43.940
So if I connect to the chat room here, I can say Meow.

169
00:11:45.500 --> 00:11:51.200
And back in this window, you can see that that message appears again, this is just a fun programming

170
00:11:51.200 --> 00:11:53.600
exercise to see what a server can really do.

171
00:11:53.960 --> 00:12:00.190
Being able to have real time to direction communication of data like this is a lot of fun to set up.

172
00:12:00.710 --> 00:12:06.950
OK, and then finally, if I jump back to the home page of the application, remember, this is my personalized

173
00:12:06.950 --> 00:12:08.680
feed because I'm logged in.

174
00:12:08.960 --> 00:12:12.380
However, if I use this button in the top right to sign out.

175
00:12:13.860 --> 00:12:18.270
You can see the homepage now correctly treats me as if I'm a guest, all right.

176
00:12:18.270 --> 00:12:23.850
And that concludes the sneak preview of the finished product of app number two that we are going to

177
00:12:23.850 --> 00:12:27.460
build together in this course now to bring this full circle.

178
00:12:27.570 --> 00:12:31.200
What do app number two and app number one have in common?

179
00:12:31.740 --> 00:12:36.690
Well, they both use a database to store data permanently.

180
00:12:37.140 --> 00:12:43.260
In the case of this simple app, number one, that's just the to do list items in the case of the more

181
00:12:43.260 --> 00:12:44.200
complex app.

182
00:12:44.220 --> 00:12:51.960
Number two, the database is storing the usernames, the passwords, the article posts, the relationships

183
00:12:51.960 --> 00:12:56.140
of which users are following, which other users, so on and so forth.

184
00:12:56.760 --> 00:12:58.410
So where do we go from here?

185
00:12:58.800 --> 00:13:05.730
Well, in our very next lesson, we are going to begin learning about databases, in particular a system

186
00:13:05.730 --> 00:13:07.700
named Mongo DB.

187
00:13:08.070 --> 00:13:14.850
And as soon as we learn even just a little tiny bit about Mongo DB, we can begin to create this to

188
00:13:14.850 --> 00:13:16.610
do list app together.

189
00:13:17.070 --> 00:13:23.580
I'm super excited because this marks the point in the course where we can finally begin to build real

190
00:13:23.580 --> 00:13:26.220
meaningful fun applications.

191
00:13:26.730 --> 00:13:29.430
We've eaten enough of our metaphorical broccoli.

192
00:13:30.000 --> 00:13:34.790
We worked through the 10 days of JavaScript to understand the programming language itself.

193
00:13:35.190 --> 00:13:38.760
We learned a bit about the Web browser as a JavaScript environment.

194
00:13:39.180 --> 00:13:45.150
We just learned a little bit about Know James and how it can be used to create a server and what the

195
00:13:45.150 --> 00:13:46.860
whole point of a server even is.

196
00:13:47.370 --> 00:13:53.400
And now finally, we just need to fold in a little bit of understanding of what a database is and we

197
00:13:53.400 --> 00:13:55.770
will be off to the races.

198
00:13:56.410 --> 00:13:58.110
So let's keep our momentum rolling.

199
00:13:58.140 --> 00:14:00.030
Let's get excited for databases.

200
00:14:00.210 --> 00:14:02.910
And I will see you in the next lesson.
