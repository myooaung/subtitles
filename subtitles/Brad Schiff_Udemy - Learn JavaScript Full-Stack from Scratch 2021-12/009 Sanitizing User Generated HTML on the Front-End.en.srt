1
00:00:01,850 --> 00:00:08,350
Hello, everyone, I know in the last video, I promised that in this lesson we begin our follow feature.

2
00:00:08,690 --> 00:00:14,090
However, there's one quick important security note that I do want to cover first.

3
00:00:14,540 --> 00:00:21,050
OK, so in this lesson, I want to talk again about cross site scripting attacks, because in our previous

4
00:00:21,050 --> 00:00:27,470
lesson, we set things up so that we are rendering user generated content.

5
00:00:27,470 --> 00:00:34,820
And because we generated this HTML ourselves using template literals, we did not have a template language

6
00:00:34,820 --> 00:00:38,940
like SJS automatically escaping everything for us.

7
00:00:39,350 --> 00:00:42,640
So as of right now, we are in an interesting security position.

8
00:00:43,040 --> 00:00:50,780
We are not actually open to cross site scripting attacks because our post model enforces its own HTML

9
00:00:50,780 --> 00:00:54,470
sanitisation before accepting data into the database.

10
00:00:54,830 --> 00:01:01,820
However, whenever you're generating HTML from user generated content, you want to assume the worst

11
00:01:02,270 --> 00:01:03,260
on the front end.

12
00:01:03,260 --> 00:01:08,060
It's a best practice to assume that somehow your back end was compromised.

13
00:01:08,480 --> 00:01:12,550
Right, and there is malicious code waiting for us in the database.

14
00:01:13,040 --> 00:01:20,510
This way, even in a worst case scenario, our front end still does not actually execute malicious JavaScript.

15
00:01:20,990 --> 00:01:22,910
So right now, let's walk through an example.

16
00:01:23,210 --> 00:01:28,490
Go ahead and create a new post right now and let's name it test post.

17
00:01:29,030 --> 00:01:30,950
Give it a bit of content test.

18
00:01:31,700 --> 00:01:33,500
Let's save this, OK?

19
00:01:33,660 --> 00:01:38,630
And now, even if we tried to include malicious code in those fields, it wouldn't have mattered because

20
00:01:38,630 --> 00:01:40,860
our post model would have sanitized it.

21
00:01:41,490 --> 00:01:45,140
However, let's create a situation that assumes the worst.

22
00:01:45,560 --> 00:01:52,130
So right now, I need you to jump into your Mongo DB Atlus account from collections, look in your complex

23
00:01:52,130 --> 00:01:55,900
app database and then jump into the Post's collection.

24
00:01:56,450 --> 00:02:00,920
If you were already on the screen, you might need to click the green find button to load the latest

25
00:02:00,920 --> 00:02:01,610
posts.

26
00:02:02,600 --> 00:02:05,210
But let's find that test post that we just created.

27
00:02:05,690 --> 00:02:06,350
Here it is.

28
00:02:06,620 --> 00:02:12,620
Now, let's assume that we are in some alternate universe where somehow malicious HTML or JavaScript

29
00:02:12,890 --> 00:02:14,860
did make it into this field.

30
00:02:15,410 --> 00:02:17,090
Realistically, this wouldn't happen.

31
00:02:17,090 --> 00:02:21,110
But the idea is that our front end should always prepare for the worst.

32
00:02:21,470 --> 00:02:26,900
So if for some reason our back wasn't doing a great job with security, at least we're not vulnerable

33
00:02:26,900 --> 00:02:28,970
to front end JavaScript attacks.

34
00:02:29,420 --> 00:02:33,290
So to assume the worst, let's click this pencil icon to edit this test post.

35
00:02:33,710 --> 00:02:36,110
And for the title field, let's do this.

36
00:02:36,500 --> 00:02:45,560
Let's rap test post within a div and on the opening div tag, let's give it an attribute of on mouse

37
00:02:45,620 --> 00:02:53,120
over equals pair of quotes, use the double quotations instead of single quotations and then in the

38
00:02:53,120 --> 00:03:03,650
middle let's say alert parentheses in those parentheses single quotes and let's say Moha evil J.S. here.

39
00:03:04,430 --> 00:03:07,010
OK, let's go ahead and update that in the database.

40
00:03:09,300 --> 00:03:15,900
OK, and now back on our Web site, if you view the individual listing for that, you are URL for that

41
00:03:15,900 --> 00:03:21,750
post, we will not have our security compromised, even though this is a worst case scenario on the

42
00:03:21,750 --> 00:03:26,660
back end, because this template is being rendered with the Aegis Library.

43
00:03:27,060 --> 00:03:31,380
Remember, SJS is going to automatically escape values for us.

44
00:03:32,220 --> 00:03:38,310
So in our code, if I look at single post screen here, is that H2 for the title?

45
00:03:38,670 --> 00:03:41,280
Because we include an equal sign right here.

46
00:03:41,550 --> 00:03:43,880
Ejaz is going to escape that.

47
00:03:44,460 --> 00:03:48,380
So we see the code, but it's not actually going to execute.

48
00:03:48,780 --> 00:03:49,830
This is a good thing.

49
00:03:50,250 --> 00:03:56,790
Even if our server side validation and sanitisation fails, our front end is not actually executing

50
00:03:56,790 --> 00:03:59,300
malicious JavaScript, however.

51
00:03:59,580 --> 00:04:00,470
Watch this.

52
00:04:00,870 --> 00:04:05,970
What if we perform a live search for test to pull in that test post?

53
00:04:06,510 --> 00:04:09,300
Well, watch what happens when I hover over that title.

54
00:04:10,530 --> 00:04:13,770
It actually executed that malicious JavaScript.

55
00:04:14,430 --> 00:04:21,510
This is because we are generating this HTML using our own JavaScript and template literals and we're

56
00:04:21,510 --> 00:04:25,960
not using a templating engine like SJS that will escape values for us.

57
00:04:26,610 --> 00:04:34,440
So in situations like this where I need to sanitize HTML on the browser or front end side, I like to

58
00:04:34,440 --> 00:04:39,060
leverage a package from NPM that is named Dom Purify.

59
00:04:39,570 --> 00:04:40,960
Let me show you how we can use it.

60
00:04:40,980 --> 00:04:46,350
So right now in our text editor, open up your command line if your server's running, let's go ahead

61
00:04:46,350 --> 00:04:50,550
and stop it and run npm install.

62
00:04:50,910 --> 00:04:58,440
And the name of the package that we want is Dom or Dom purify all one word.

63
00:04:58,890 --> 00:05:00,180
Go ahead and press enter.

64
00:05:03,480 --> 00:05:09,240
OK, now that we've installed that, let's go ahead and start our server back up again, npm run watch,

65
00:05:10,470 --> 00:05:17,520
OK, and let's jump into our search dogs front end JavaScript file up at the very top where we are already

66
00:05:17,520 --> 00:05:19,080
importing axios.

67
00:05:19,350 --> 00:05:22,500
Let's also import that new domme purify package.

68
00:05:23,070 --> 00:05:29,310
So let's say import domme purify from quotes.

69
00:05:29,310 --> 00:05:32,840
And the actual name of the package was lowercase dom purify.

70
00:05:33,300 --> 00:05:38,730
OK, now let's go leverage this within our render results HTML method.

71
00:05:39,100 --> 00:05:40,290
So let's scroll down.

72
00:05:41,280 --> 00:05:43,740
OK, here's our render results html.

73
00:05:44,490 --> 00:05:48,240
This is where we are creating that template literal for all of the HTML.

74
00:05:48,870 --> 00:05:50,030
Here's what I want you to do.

75
00:05:50,220 --> 00:05:57,210
Begin selecting this opening back tick and select all the way down until the closing div and closing

76
00:05:57,210 --> 00:05:57,960
back tick.

77
00:05:58,710 --> 00:06:01,030
Let's go ahead and cut that into our clipboard.

78
00:06:01,830 --> 00:06:07,230
So now we just have this, this dot results area in our HTML equals blink.

79
00:06:07,680 --> 00:06:16,740
Well, now let's just use our DOM Purify package and look inside it for a method named sanitize parentheses

80
00:06:16,740 --> 00:06:20,610
to call sanitize and then we can just pass it in our clipboard.

81
00:06:20,610 --> 00:06:24,480
So paste and that's all we need to do.

82
00:06:24,750 --> 00:06:31,500
The Dom Purify package will automatically remove any malicious code that could create a cross site scripting

83
00:06:31,500 --> 00:06:32,040
attack.

84
00:06:32,580 --> 00:06:34,190
Let's go ahead and save this.

85
00:06:34,530 --> 00:06:37,620
And now back on the front end if we refresh.

86
00:06:40,010 --> 00:06:47,720
And if I perform a search for test, pull in that post, notice that now when I hover over that title,

87
00:06:48,110 --> 00:06:49,250
nothing happens.

88
00:06:49,820 --> 00:06:53,480
You'll notice that the title is still sitting on a different line from the Avatar.

89
00:06:53,900 --> 00:06:58,560
This is because the Dom Purify package does not remove all HTML.

90
00:06:58,760 --> 00:07:02,680
So remember we added a div tag around that title.

91
00:07:03,200 --> 00:07:06,830
The Dom Purify package is not going to remove the div itself.

92
00:07:07,100 --> 00:07:12,950
It's just going to remove any potentially malicious places where JavaScript could be being executed.

93
00:07:13,370 --> 00:07:19,160
Technically we could use the HTML sanitised package on the front end instead of dom purify.

94
00:07:19,550 --> 00:07:28,160
However, that package is over 600 kilobits on minified, whereas Dom Purify is only about 40 kilobits

95
00:07:28,160 --> 00:07:28,940
on minified.

96
00:07:29,180 --> 00:07:35,420
And since this is browser based, our front end JavaScript, we're needing to send those libraries to

97
00:07:35,420 --> 00:07:36,650
the front end to download.

98
00:07:37,160 --> 00:07:40,010
So in this case, I'm a big fan of Dom Purify.

99
00:07:40,400 --> 00:07:42,980
Remember, this is just our last line of defense.

100
00:07:43,200 --> 00:07:48,320
Our server will already be removing any HTML from the content.

101
00:07:48,740 --> 00:07:53,840
We had to artificially go into the database to create an absolutely worst case scenario.

102
00:07:54,170 --> 00:08:00,600
And Dom Purifies still protected us from any actual cross site scripting attacks taking place.

103
00:08:00,950 --> 00:08:01,340
Cool.

104
00:08:01,610 --> 00:08:05,020
That's going to bring this lesson to a close in our next lesson.

105
00:08:05,210 --> 00:08:08,840
We will indeed begin working on the following feature.

106
00:08:09,390 --> 00:08:11,870
Let's keep things rolling and I'll see you then.
