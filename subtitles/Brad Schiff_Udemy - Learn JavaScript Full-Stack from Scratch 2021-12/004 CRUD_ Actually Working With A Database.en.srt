1
00:00:02,090 --> 00:00:03,110
Hello, everyone.

2
00:00:03,230 --> 00:00:09,740
In this lesson, we are going to learn what in the world the CRUD acronym stands for and how it can

3
00:00:09,740 --> 00:00:12,580
help us make sense of working with databases.

4
00:00:13,220 --> 00:00:14,310
Let's dive right in.

5
00:00:14,330 --> 00:00:22,160
So in our previous lesson, we created a Mongo DB Atlus account and we also created a cluster, which

6
00:00:22,160 --> 00:00:25,410
is just a place on the Internet where a database can live.

7
00:00:25,820 --> 00:00:28,720
So our next step is to add a database here.

8
00:00:29,150 --> 00:00:30,580
So I want you to do this with me.

9
00:00:30,590 --> 00:00:34,550
I want you to follow along from your Mongo DB Atlas screen.

10
00:00:34,550 --> 00:00:36,460
That should look something like this.

11
00:00:36,920 --> 00:00:42,410
I want you to look underneath this overview section, and here we see a few different buttons.

12
00:00:43,100 --> 00:00:46,220
We see connect, we see metrics and we see collections.

13
00:00:46,580 --> 00:00:49,190
I want you to click on collections.

14
00:00:50,540 --> 00:00:56,150
As soon as I click on collections, you can see this new screen appears and here we see a button named

15
00:00:56,300 --> 00:00:57,710
Create Database.

16
00:00:58,010 --> 00:01:00,980
I want you to go ahead and click on Create Database.

17
00:01:02,240 --> 00:01:04,560
The name of this database does not matter.

18
00:01:04,610 --> 00:01:09,410
This is just a testing database just for practice, just to get your feet wet.

19
00:01:09,740 --> 00:01:10,880
You could name it anything.

20
00:01:10,880 --> 00:01:14,960
For example, I'm going to name it just a test, OK?

21
00:01:14,960 --> 00:01:17,000
And then we need to enter a collection name.

22
00:01:17,300 --> 00:01:21,740
A Mongo DB database can have many different collections inside of it.

23
00:01:22,220 --> 00:01:28,190
For example, if we were creating a database for a pet adoption app, we would have one collection named

24
00:01:28,190 --> 00:01:28,880
Pets.

25
00:01:29,240 --> 00:01:36,830
We would have another collection named users and maybe another collection named locations or stores.

26
00:01:37,400 --> 00:01:42,760
The idea is that you can create multiple different collections to help you keep your data organized.

27
00:01:43,250 --> 00:01:44,650
So again, the name doesn't matter.

28
00:01:44,660 --> 00:01:45,770
You can choose anything.

29
00:01:45,770 --> 00:01:50,390
But just to follow along with me in this example, why don't you go ahead and name it pets?

30
00:01:50,930 --> 00:01:53,480
OK, finally, let's go ahead and click this create button.

31
00:01:59,590 --> 00:02:05,590
OK, and now you can see instead of being in the overview tab, we are in the collections tab and we

32
00:02:05,590 --> 00:02:09,250
now have a brand new database named Just a Test.

33
00:02:09,580 --> 00:02:11,860
You can also see the name of the database here.

34
00:02:12,100 --> 00:02:17,130
And inside of that database is an empty collection named Pets.

35
00:02:17,560 --> 00:02:22,680
So let's start experimenting by working with a bit of data inside the pets collection.

36
00:02:23,170 --> 00:02:25,530
But the question becomes, where do we begin?

37
00:02:25,720 --> 00:02:27,090
What do we do first?

38
00:02:27,400 --> 00:02:30,610
How do we even know what our options are or what we can even do?

39
00:02:30,940 --> 00:02:32,560
Well, I've got some good news.

40
00:02:32,860 --> 00:02:36,730
There's an acronym that can help us remember what our options are.

41
00:02:36,970 --> 00:02:38,890
And the acronym is Crud.

42
00:02:39,400 --> 00:02:45,640
Crud stands for Create, Read, Update and Delete.

43
00:02:46,360 --> 00:02:51,190
These four actions are the heart and soul of working with the database.

44
00:02:51,640 --> 00:02:58,900
So I really want to burn this acronym into your brain, into your memory crud, create, read, update

45
00:02:58,900 --> 00:02:59,530
and delete.

46
00:03:00,130 --> 00:03:05,090
Once we learn how to perform these four actions, we can do just about anything.

47
00:03:05,680 --> 00:03:10,710
So right now, let's go through and practice each of these actions one by one.

48
00:03:11,200 --> 00:03:15,040
Let's start up at the top with the C in crud, which is create.

49
00:03:15,460 --> 00:03:22,510
OK, so with the pets collection selected, let's create a new item inside of it to use more technical

50
00:03:22,510 --> 00:03:28,910
language in Mongo DB we call each item that lives inside a collection, a document.

51
00:03:29,350 --> 00:03:33,400
So in this case, let's create a document that will represent a pet.

52
00:03:33,910 --> 00:03:37,690
So you'll notice this green button that says insert document.

53
00:03:37,690 --> 00:03:38,980
Let's go ahead and click that.

54
00:03:39,870 --> 00:03:45,390
And in this case, the word insert could really be replaced with the word create, so from this new

55
00:03:45,390 --> 00:03:47,880
pop up, we can create a new document.

56
00:03:48,270 --> 00:03:53,250
You can see my cursor is placed right about here, and this is where we can choose the name of the first

57
00:03:53,250 --> 00:03:55,360
field or property for the document.

58
00:03:55,800 --> 00:03:58,790
For example, we know that every pet needs a name.

59
00:03:59,010 --> 00:04:05,700
So let's create a field or property with the name of a name and then for its value here we can type

60
00:04:05,700 --> 00:04:08,050
in maybe miaows a lot.

61
00:04:09,750 --> 00:04:16,410
OK, now if I press tab on my keyboard, you can see I am ready to add another field or property.

62
00:04:16,830 --> 00:04:22,050
You're free to choose any name for the field that you want, but I'm going to go with species and then

63
00:04:22,050 --> 00:04:24,780
if I had to begin, I can set the value for that.

64
00:04:24,780 --> 00:04:27,300
So I will say that miaows a lot is a cat.

65
00:04:27,960 --> 00:04:31,590
OK, for now I think just these two fields of properties will do the trick.

66
00:04:31,830 --> 00:04:37,200
OK, so to actually create this document or this pet, let's just click this green insert button.

67
00:04:41,320 --> 00:04:47,740
And congratulations, you just created your first entry in a database right here, we can see total

68
00:04:47,740 --> 00:04:51,520
documents in our pets collection is now one instead of zero.

69
00:04:51,970 --> 00:04:59,440
Let's practice creating a few more pet documents just so we have multiple pets to experiment with later

70
00:04:59,440 --> 00:05:00,460
on in this lesson.

71
00:05:01,000 --> 00:05:08,440
So let's click the insert document button once again, set the first field to name and give it a value

72
00:05:08,440 --> 00:05:15,190
of maybe purs loud and then give it another feel the name species and send it's a cat.

73
00:05:16,340 --> 00:05:17,710
OK, go ahead, insert that.

74
00:05:22,380 --> 00:05:28,770
So we now have two documents in our collection, let's add one more, and this time let's set the species

75
00:05:28,770 --> 00:05:30,410
to something other than cat.

76
00:05:31,050 --> 00:05:34,950
So let's say the name can have a value of barks a lot.

77
00:05:37,650 --> 00:05:42,060
And let's set a field named species to have a value of dog.

78
00:05:43,320 --> 00:05:45,540
Let's go ahead and create or insert that.

79
00:05:49,320 --> 00:05:56,550
OK, now let's circle back to the CRUD acronym, so we've taken care of the C, we just walked through

80
00:05:56,550 --> 00:05:59,970
an example of how to create a document in the database.

81
00:06:00,270 --> 00:06:04,950
Now, let's change gears and talk about the R, which stands for Read.

82
00:06:05,340 --> 00:06:11,100
In this case, read could really be interchanged with the word load or retrieve.

83
00:06:11,580 --> 00:06:15,200
It just means you are reading or retrieving data from the database.

84
00:06:15,420 --> 00:06:21,150
So from this basic screen where we can see all of the pet documents that we just created, well, the

85
00:06:21,150 --> 00:06:28,250
Mongo DB Atlas admin interface that we're looking at, it just performed a read operation for us, right.

86
00:06:28,260 --> 00:06:33,850
Because it is loaded this data or it has read this data from the database.

87
00:06:34,290 --> 00:06:41,070
Another example of the R and crud of reading from a database would be if we performed a query on our

88
00:06:41,070 --> 00:06:41,680
collection.

89
00:06:42,270 --> 00:06:46,130
So imagine we only wanted to see the cats in this collection.

90
00:06:46,290 --> 00:06:51,680
Well, in this filter area, you can click onto that field and then type this out with me.

91
00:06:51,690 --> 00:06:55,320
Let's include a pair of curly brackets to create an object.

92
00:06:55,620 --> 00:06:55,880
Right?

93
00:06:55,910 --> 00:06:59,000
This is basic JavaScript syntax inside there.

94
00:06:59,010 --> 00:07:01,200
Let's set the species property.

95
00:07:01,530 --> 00:07:05,550
So Colen not equal sign because this is inside an object.

96
00:07:06,210 --> 00:07:11,220
So species' colon and then just say quotes and give it a value of cat.

97
00:07:11,700 --> 00:07:16,560
Now, as soon as you press, enter or click the fine button, you will perform that query.

98
00:07:17,970 --> 00:07:22,430
And now you can see there are only two documents, right, and those are both of the cat documents.

99
00:07:22,860 --> 00:07:26,760
So that query is an example of a read action, right?

100
00:07:26,770 --> 00:07:29,560
We just read data from the database.

101
00:07:30,030 --> 00:07:32,310
What if we only wanted to see the dogs in the database?

102
00:07:32,320 --> 00:07:38,010
We could just come into this filter, change the value to dog, run the query again or perform another

103
00:07:38,010 --> 00:07:40,520
read action and there you have it.

104
00:07:40,950 --> 00:07:42,660
So back to the acronym of CRUD.

105
00:07:42,780 --> 00:07:50,340
The order or read just means that you are loading or retrieving or reading data from the database.

106
00:07:50,910 --> 00:07:53,370
OK, next up, let's move on to the U.

107
00:07:53,580 --> 00:07:55,480
Which stands for Update.

108
00:07:55,920 --> 00:08:01,650
So back in the Mongo DB Atlas screen, go ahead and click this reset button here to clear out your custom

109
00:08:01,650 --> 00:08:02,160
filter.

110
00:08:02,430 --> 00:08:05,760
So that way it's just showing all of the documents once again.

111
00:08:06,230 --> 00:08:07,710
OK, let's talk about the U.

112
00:08:07,710 --> 00:08:09,420
In Crud or update.

113
00:08:09,930 --> 00:08:17,670
As you can probably guess, update just means that you edit or update an existing document, for example.

114
00:08:17,670 --> 00:08:20,250
Let's imagine that I want to update this.

115
00:08:20,250 --> 00:08:23,520
Barks a lot dog document perhaps.

116
00:08:23,520 --> 00:08:27,240
I want to change its name from barks a lot to barks loud.

117
00:08:27,780 --> 00:08:34,050
Well, as you're hovering over a document, you'll notice these icons here and the first icon looks

118
00:08:34,050 --> 00:08:34,880
like a pencil.

119
00:08:35,250 --> 00:08:39,900
Go ahead and click on that to edit or make changes to that document.

120
00:08:40,590 --> 00:08:45,990
So as soon as I click that pencil icon, now, these fields are editable, so I can just click my cursor

121
00:08:45,990 --> 00:08:53,550
onto the barks a lot, name value and change it to barks loud and then come down here and click this

122
00:08:53,550 --> 00:08:54,480
update button.

123
00:08:57,410 --> 00:09:00,470
And there you have it, the document was successfully updated.

124
00:09:01,040 --> 00:09:06,980
Let's jump back to the cret acronym and we can move on to the final letter D, which is for delete.

125
00:09:07,460 --> 00:09:10,330
I'm sure you can guess what delete means in this context.

126
00:09:10,550 --> 00:09:16,490
So if you hover over any one of your documents again, you'll see these icons here and on the far right,

127
00:09:16,680 --> 00:09:18,260
it looks like a little trash bin.

128
00:09:18,260 --> 00:09:24,320
If you click on that, you'll see this message that this document is flagged for deletion and then you

129
00:09:24,320 --> 00:09:26,090
can choose between cancel and delete.

130
00:09:26,230 --> 00:09:32,400
If you actually click that little delete button again, that document gets deleted and that's it.

131
00:09:32,420 --> 00:09:38,480
That is the CRUD acronym in a nutshell, create, read, update and delete.

132
00:09:38,780 --> 00:09:42,890
And you just learned how to perform these actions on a Mongo DB database.

133
00:09:43,190 --> 00:09:47,780
Now, at this point, you might be thinking to yourself, hmm, this felt too easy.

134
00:09:48,030 --> 00:09:50,480
I thought that working with the database would be harder.

135
00:09:50,780 --> 00:09:56,930
Well, if you're thinking that you are correct, working with the database usually is a bit more difficult

136
00:09:56,930 --> 00:10:03,620
than what we just saw in this lesson, performing the CRUD operations in this lesson or super easy because

137
00:10:03,620 --> 00:10:11,900
we were within the Mongo DB Atlas admin interface, meaning we didn't write any code to programmatically

138
00:10:11,900 --> 00:10:15,700
have Mongo DB perform CRUD operations for us.

139
00:10:16,130 --> 00:10:20,990
We were simply clicking on interface buttons and doing everything manually.

140
00:10:21,350 --> 00:10:27,620
Now, where the real challenge comes into play and where the real value of a database comes into play

141
00:10:28,010 --> 00:10:35,100
is when we learn how to perform CRUD operations on our database remotely from a node server.

142
00:10:35,360 --> 00:10:41,250
So remember the idea of the server and its request and response request and response pattern?

143
00:10:41,600 --> 00:10:47,360
Well, imagine if in between the request and response slices of bread, imagine if we did something

144
00:10:47,360 --> 00:10:54,260
really interesting in the middle of the sandwich, like load data from a database or create a new document

145
00:10:54,260 --> 00:10:59,150
in a database or update an existing document or delete an existing document.

146
00:10:59,510 --> 00:11:04,170
That is how you can begin to create meaningful applications.

147
00:11:04,520 --> 00:11:11,450
So just like we use JavaScript syntax here to perform a query on the database, we can use JavaScript

148
00:11:11,450 --> 00:11:16,500
code from within a node JS server to communicate with the database.

149
00:11:17,030 --> 00:11:22,340
So in this lesson, we learned how to perform the four CRUD operations by clicking on simple buttons.

150
00:11:22,670 --> 00:11:30,560
But now our next big picture goal is to be able to perform those same actions by writing code, by writing

151
00:11:30,560 --> 00:11:31,460
JavaScript.

152
00:11:31,950 --> 00:11:37,920
So that's why in our very next lesson, we are going to begin creating this to do app.

153
00:11:38,270 --> 00:11:43,820
Now, what we are looking at right now is a sneak preview of the finished product of what we are going

154
00:11:43,820 --> 00:11:44,780
to build together.

155
00:11:45,020 --> 00:11:52,730
But the general idea is if you add an item with this field, so if I say feed the dog and click, add

156
00:11:52,730 --> 00:11:55,510
new item that gets added to a database.

157
00:11:55,700 --> 00:12:02,600
So the important idea is that that action of saving this to the database needs to be automated.

158
00:12:02,990 --> 00:12:03,250
Right.

159
00:12:03,260 --> 00:12:09,380
Because when someone uses your app, you're not going to be sitting at your desk waiting to see what

160
00:12:09,380 --> 00:12:16,220
they typed in and then be able to manually go over to the database admin screen and manually insert

161
00:12:16,220 --> 00:12:17,690
a document and type in there.

162
00:12:17,690 --> 00:12:20,210
Same values that would be crazy.

163
00:12:20,510 --> 00:12:29,030
Instead, we need our no JS server or our app to be able to automatically connect to the Mongo DB database

164
00:12:29,330 --> 00:12:37,280
and perform those CRUD operations on demand with whatever data the user is including in their request.

165
00:12:37,800 --> 00:12:37,950
Right.

166
00:12:38,080 --> 00:12:44,120
So when you add a new item that is the C and crud, you are creating an item as soon as the app load.

167
00:12:44,160 --> 00:12:51,050
So if I refresh the page, it is loading or reading the existing data from the database for the you

168
00:12:51,050 --> 00:12:51,710
and crud.

169
00:12:51,710 --> 00:12:58,300
You can update or edit an item by clicking on our edit button, say Feed the dog today.

170
00:12:58,880 --> 00:13:02,510
So that just performed an update action on the database.

171
00:13:02,510 --> 00:13:07,370
And then clearly if you want to delete a document in the database, that's what this delete button will

172
00:13:07,370 --> 00:13:07,660
do.

173
00:13:08,690 --> 00:13:11,630
Do you really want to delete feed the dog today permanently?

174
00:13:11,810 --> 00:13:12,590
Yes, I do.

175
00:13:13,310 --> 00:13:17,620
At this point, I think the bigger picture might be starting to come into focus.

176
00:13:17,840 --> 00:13:24,110
Hopefully you're starting to see how all of these different JavaScript technologies can play together

177
00:13:24,230 --> 00:13:26,420
to create a meaningful application.

178
00:13:26,780 --> 00:13:31,490
The Web browser can send off requests to a node server.

179
00:13:31,850 --> 00:13:38,150
And then not only can that node server send back a response to the Web browser, but the node server

180
00:13:38,150 --> 00:13:41,870
can also communicate with a Mongo DB database.

181
00:13:42,290 --> 00:13:47,150
If you're still a bit confused on how all of these puzzle pieces fit together, don't worry, because

182
00:13:47,150 --> 00:13:52,850
we're going to walk through all of it step by step as we build this application together.

183
00:13:53,120 --> 00:13:56,780
And that's exactly what we're going to begin in the next lesson.

184
00:13:57,260 --> 00:14:02,780
So let's keep our momentum rolling, this is going to be a ton of fun and I will see you in the next

185
00:14:02,780 --> 00:14:03,230
lesson.
