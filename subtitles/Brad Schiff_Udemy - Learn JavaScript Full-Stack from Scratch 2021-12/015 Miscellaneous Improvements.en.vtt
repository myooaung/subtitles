WEBVTT
1
00:00:01.800 --> 00:00:02.760
Hello, everyone.

2
00:00:03.060 --> 00:00:09.300
In this lesson, we're going to make a few miscellaneous improvements to the process of creating and

3
00:00:09.300 --> 00:00:10.410
editing posts.

4
00:00:10.800 --> 00:00:12.300
Let's jump right into it.

5
00:00:12.750 --> 00:00:13.140
OK.

6
00:00:13.170 --> 00:00:17.430
The first adjustment I want to make has to do with the edit post screen.

7
00:00:17.790 --> 00:00:19.650
So if I navigate to a post?

8
00:00:21.150 --> 00:00:23.010
And click the Blue Edit button.

9
00:00:24.090 --> 00:00:29.430
Now we've already set things up so that if you're not the owner of this post and you try to submit this

10
00:00:29.430 --> 00:00:33.570
form, you receive an error message that you don't have permission to do that.

11
00:00:34.050 --> 00:00:39.690
Now that we've tested that, that restrictions in place, let's also make it so you can't even view

12
00:00:39.690 --> 00:00:44.680
this edit form screen if you're not the owner of the post to do this.

13
00:00:44.700 --> 00:00:50.820
Let's jump into our Post controller and our editor within our Controllers folder.

14
00:00:51.240 --> 00:00:58.710
Just jump into post controller, scroll down and look for your function that is named View Edit Screen

15
00:00:59.340 --> 00:01:00.710
within the Try Block.

16
00:01:00.720 --> 00:01:01.490
Let's do this.

17
00:01:01.500 --> 00:01:05.370
Let's cut this response dot render line into our clipboard.

18
00:01:05.670 --> 00:01:08.550
We're going to use this again in about 30 seconds from now.

19
00:01:09.180 --> 00:01:10.200
So cut that.

20
00:01:11.990 --> 00:01:20.650
And instead, let's set up an if else so if parentheses curly brackets also add an L block for the condition,

21
00:01:20.660 --> 00:01:30.260
let's just say if post dot author I.D. equals double equals sign to check for equality.

22
00:01:30.830 --> 00:01:37.370
If it equals request dot visitor I.D. if that's a match, then we can just go ahead and paste in our

23
00:01:37.370 --> 00:01:39.370
clipboard and show them that edit screen.

24
00:01:39.930 --> 00:01:46.340
Else, if it's not a match, let's just add a flash message that says you do not have permission to

25
00:01:46.340 --> 00:01:50.150
perform that action and then we can redirect them back to the home page.

26
00:01:50.330 --> 00:01:54.710
So request Dot Flash add on to a collection named errors.

27
00:01:55.010 --> 00:01:55.820
Give it a value.

28
00:01:56.450 --> 00:02:01.520
You do not have permission to perform that action.

29
00:02:02.480 --> 00:02:05.570
Below this, let's manually save our session data.

30
00:02:06.020 --> 00:02:09.230
So request dot session dot save.

31
00:02:09.620 --> 00:02:10.640
Let's give this a function.

32
00:02:10.640 --> 00:02:16.490
We can actually stay all on one line if we give it an error functions parentheses, arrow symbol.

33
00:02:16.730 --> 00:02:19.940
And if you stay on a single line, you don't even need the curly brackets.

34
00:02:20.270 --> 00:02:24.920
So then we just redirect response dot redirect to the home page.

35
00:02:25.430 --> 00:02:27.860
OK, let's save this and give it a try.

36
00:02:28.700 --> 00:02:34.850
So back in this browser, I'm the owner of this post, so if I refresh, I can still successfully view

37
00:02:34.850 --> 00:02:36.230
this edit form screen.

38
00:02:36.590 --> 00:02:43.220
However, if I copy this URL into my clipboard and then in this window where I'm logged in as the barks

39
00:02:43.220 --> 00:02:44.000
excellent account.

40
00:02:45.280 --> 00:02:47.450
I try to paste in and visit that URL.

41
00:02:48.080 --> 00:02:49.620
It kicks me back to the home page.

42
00:02:49.640 --> 00:02:52.010
You do not have permission to perform that action.

43
00:02:52.520 --> 00:02:53.270
Perfect.

44
00:02:53.510 --> 00:02:58.400
Now let's change gears and work on another feature or detail that I want to implement.

45
00:02:58.760 --> 00:03:05.210
So within our edit post form screen, I think it would be nice if towards the top there was a link that

46
00:03:05.210 --> 00:03:11.210
said back to view post or back to permalink for post this way.

47
00:03:11.210 --> 00:03:16.190
When you're done editing a post and you want to actually view it again, you don't need to rely on your

48
00:03:16.190 --> 00:03:18.380
web browsers, history or back button.

49
00:03:18.800 --> 00:03:26.450
To add this, let's jump into our text editor and within our Views folder, let's open up edit dash

50
00:03:26.450 --> 00:03:34.960
post dot e.j.'s OK right below the include for Flash and right above this form tag.

51
00:03:34.970 --> 00:03:37.130
Let's just say a new line.

52
00:03:37.430 --> 00:03:39.560
Let's create an element or link.

53
00:03:40.130 --> 00:03:42.140
Let's give it an h ref attribute.

54
00:03:42.140 --> 00:03:45.020
And for the value, let's just include a hashtag.

55
00:03:45.020 --> 00:03:50.030
For now, let's close that out for the actual text that you would click on.

56
00:03:50.030 --> 00:03:53.270
Let's say back to post permalink.

57
00:03:54.410 --> 00:03:58.340
Also, right before back, we can add a left facing arrow symbol.

58
00:03:58.970 --> 00:04:04.880
To do that, we can just say Ampersand L a q uo semicolon.

59
00:04:05.390 --> 00:04:09.320
OK, now let's circle back to the actual URL that we'd want to point towards.

60
00:04:09.740 --> 00:04:15.500
Let's get rid of the hashtag and say slash post and then slash.

61
00:04:15.500 --> 00:04:19.580
I'd only instead of ID, we would want the dynamic value.

62
00:04:19.970 --> 00:04:25.430
So let's jump into E.j.'s and just say Post Dot underscore IDE.

63
00:04:26.690 --> 00:04:27.060
Cool.

64
00:04:27.080 --> 00:04:28.510
Let's go ahead and save this.

65
00:04:28.520 --> 00:04:31.460
And now back on the edit screen if I refresh.

66
00:04:32.120 --> 00:04:32.420
Cool.

67
00:04:32.430 --> 00:04:37.610
But I think it would look better if it was a bit smaller, if it was bold and if there was more vertical

68
00:04:37.610 --> 00:04:39.870
spacing in between it and the form.

69
00:04:40.820 --> 00:04:47.930
So let's do this on the opening tag before the draft, we can give it a class attribute and give it

70
00:04:47.930 --> 00:04:51.620
values of small and font weight.

71
00:04:51.920 --> 00:04:52.520
Bold.

72
00:04:53.240 --> 00:04:53.600
OK.

73
00:04:53.630 --> 00:04:58.190
Let's also add a space in between the word back and that left facing arrow.

74
00:04:59.300 --> 00:05:06.320
Finally, to add vertical spacing on the form tag right below it, we can just give that a class of

75
00:05:06.680 --> 00:05:10.970
empty three, which stands for margin top three.

76
00:05:11.360 --> 00:05:12.560
I didn't invent this.

77
00:05:12.740 --> 00:05:16.850
I'm using the popular Bootstrap Library for visual styling in the app.

78
00:05:17.270 --> 00:05:18.620
Let's go ahead and save that.

79
00:05:18.920 --> 00:05:20.090
Now, if we refresh.

80
00:05:20.930 --> 00:05:21.340
Cool.

81
00:05:21.350 --> 00:05:22.400
I think that looks good.

82
00:05:23.060 --> 00:05:24.230
And if I click on it?

83
00:05:24.950 --> 00:05:25.610
Perfect.

84
00:05:26.180 --> 00:05:26.630
OK.

85
00:05:26.660 --> 00:05:28.700
Moving on, let's work on a new feature.

86
00:05:29.210 --> 00:05:35.600
Up next, let's set it up so that when you create a new post, so create a new post.

87
00:05:35.600 --> 00:05:42.890
Give it a title of sample post number one sample content here and submit.

88
00:05:43.850 --> 00:05:50.540
Instead of this awkward intermediate screen, I think we should instead redirect the user back to the

89
00:05:50.540 --> 00:05:59.030
View post for this new URL and have a green success message that says Post successfully created to set

90
00:05:59.030 --> 00:05:59.470
that up.

91
00:05:59.480 --> 00:06:01.970
Let's jump into our post controller.

92
00:06:02.630 --> 00:06:06.770
You should already have that tab open, so just jump back into it post controller.

93
00:06:07.370 --> 00:06:12.200
I believe our create function is towards the top is the line that begins with exports.

94
00:06:12.200 --> 00:06:13.010
Dot Create.

95
00:06:13.550 --> 00:06:17.210
OK, so this post create method is going to return a promise.

96
00:06:17.600 --> 00:06:20.510
If it's successful, that means the post was created.

97
00:06:20.930 --> 00:06:23.570
Let's get rid of this response dot send.

98
00:06:25.010 --> 00:06:27.250
And instead, let's set a flash message.

99
00:06:27.260 --> 00:06:29.090
So request dot flash.

100
00:06:29.720 --> 00:06:38.360
Let's add on to a collection named success and give it a value of new post successfully created.

101
00:06:39.080 --> 00:06:45.170
OK, after that, let's manually save our session data requests dot session, dot save, give it an

102
00:06:45.170 --> 00:06:47.960
arrow function and then we would want to redirect.

103
00:06:47.960 --> 00:06:55.340
So response dot redirect actually, instead of quotes for this value, let's use back ticks.

104
00:06:56.030 --> 00:07:03.440
We'd want to redirect them to slash post and then slash the ID of this newly created post.

105
00:07:03.890 --> 00:07:08.000
Let's circle back to this and actually make it dynamic in just a moment.

106
00:07:08.510 --> 00:07:11.900
For now, let's address the situation where this promise fails.

107
00:07:12.350 --> 00:07:14.900
So that would mean that there are validation errors.

108
00:07:15.560 --> 00:07:22.880
So let's get rid of this response dot send line and instead, let's loop through any validation errors.

109
00:07:23.210 --> 00:07:26.270
So errors dot for each.

110
00:07:26.780 --> 00:07:32.210
Remember, this is the array of validation errors that are promised rejects with within this.

111
00:07:32.210 --> 00:07:34.610
For each, we'd want to run a function for each item.

112
00:07:35.270 --> 00:07:37.310
We can actually use an arrow function here.

113
00:07:37.580 --> 00:07:43.820
If you have exactly one parameter, you don't even need a set of parentheses, so we can just give our

114
00:07:43.820 --> 00:07:44.390
parameter.

115
00:07:44.540 --> 00:07:46.670
Error arrow symbol.

116
00:07:46.880 --> 00:07:50.030
And again, if it's on a single line, you don't even need curly brackets.

117
00:07:50.450 --> 00:07:55.250
So we just want to create a flash message for each errors of request dot flash.

118
00:07:55.760 --> 00:07:57.620
Push it on to the errors collection.

119
00:07:57.890 --> 00:08:00.380
Give it a value of that parameter error.

120
00:08:01.040 --> 00:08:01.440
OK?

121
00:08:01.460 --> 00:08:05.030
After that line, let's just manually save our session and redirect.

122
00:08:05.630 --> 00:08:07.310
So request dot session.

123
00:08:07.310 --> 00:08:08.150
Dot Save.

124
00:08:08.480 --> 00:08:16.000
Give it an arrow function and then response dot redirect back to create Dash.

125
00:08:16.400 --> 00:08:23.150
Post OK, at this point, let's circle back to this idea that we need to make dynamic right?

126
00:08:23.300 --> 00:08:28.670
If the post is successfully created, we want to redirect them to view that new post.

127
00:08:29.240 --> 00:08:36.440
However, since the post didn't exist when this request began, how can we know it's I'd write that

128
00:08:36.440 --> 00:08:41.540
I'd value will not even exist until the database operation is completed.

129
00:08:42.140 --> 00:08:47.810
Well, what we can do is set up our postdoc create function that returns a promise.

130
00:08:48.140 --> 00:08:53.090
We can adjust it so that it resolves with a value that is that new posts IDE.

131
00:08:53.690 --> 00:08:54.800
Let me show you what I mean.

132
00:08:55.070 --> 00:09:00.410
So right now, let's jump in to our post model within our post model file.

133
00:09:00.530 --> 00:09:03.290
Scroll down until you find the Create method.

134
00:09:04.130 --> 00:09:07.000
So it begins with post-op prototype doc.

135
00:09:07.010 --> 00:09:12.560
Create on this line of code where we say Posts Collection Dot Insert one.

136
00:09:13.010 --> 00:09:16.400
This is where we're actually performing that database action.

137
00:09:16.910 --> 00:09:22.220
Well, this MongoDB method is going to return a promise and win that promise resolves.

138
00:09:22.460 --> 00:09:27.770
It's going to resolve with a bunch of information about the database action that just took place.

139
00:09:28.370 --> 00:09:32.360
So let's do this within the then within this function.

140
00:09:32.600 --> 00:09:36.470
Within these parentheses, let's add a parameter and call it info.

141
00:09:37.340 --> 00:09:41.870
OK, now on this line, when our promise is resolving, let's just resolve with a value.

142
00:09:42.260 --> 00:09:44.090
So let's look inside info.

143
00:09:44.540 --> 00:09:54.890
So Info Dot and then MongoDB will have a property on this called inserted ID in the eye in ID is capitalized.

144
00:09:55.430 --> 00:09:55.750
Cool.

145
00:09:55.760 --> 00:10:00.340
So now our promise is going to resolve with that brand new, newly created ID.

146
00:10:01.220 --> 00:10:02.630
Let's go ahead and save that.

147
00:10:03.140 --> 00:10:10.190
And then back in our controller, when we leverage post, doc, create within the function we're giving,

148
00:10:10.190 --> 00:10:12.530
then let's just include a parameter here.

149
00:10:12.770 --> 00:10:20.600
Let's call it new I.D. And then that's the idea that we would want to use in the URL when we redirect

150
00:10:20.600 --> 00:10:21.170
the user.

151
00:10:21.650 --> 00:10:26.720
So for the successful redirect, instead of this simple string of text of ID, get rid of that.

152
00:10:27.080 --> 00:10:28.400
Let's do something dynamic.

153
00:10:28.400 --> 00:10:35.900
So dollar sign curly brackets and just say new ID, let's save this and see how it comes together.

154
00:10:36.410 --> 00:10:44.630
So back in the browser, if I go back and create another new post, create post, maybe a title of new

155
00:10:44.630 --> 00:10:45.690
sample post.

156
00:10:45.710 --> 00:10:50.510
Number two, this is the latest post submit.

157
00:10:52.710 --> 00:10:53.340
Perfect.

158
00:10:53.370 --> 00:10:56.690
The redirect is aware of that newly created Post I.D..

159
00:10:57.090 --> 00:11:01.950
And there we see the content, not to mention this uplifting green success message.

160
00:11:02.520 --> 00:11:08.040
At this point, there's just one more feature or tiny detail I want to implement before we move on to

161
00:11:08.040 --> 00:11:10.050
the fun part of this lesson.

162
00:11:10.530 --> 00:11:17.610
Let's set things up so that both the edit screen URL route and the post route where you would actually

163
00:11:17.610 --> 00:11:18.690
submit this form.

164
00:11:19.080 --> 00:11:24.600
Let's protect both of those routes with our must be logged in controller function.

165
00:11:24.990 --> 00:11:30.930
The idea here is that if a visitor doesn't have a user object in session data, meaning they're not

166
00:11:30.930 --> 00:11:31.710
logged in.

167
00:11:31.920 --> 00:11:34.410
Well, we're already looking within that session data.

168
00:11:34.650 --> 00:11:39.840
There's no sense in wasting another trip to the database to see if they're the owner of this post.

169
00:11:40.110 --> 00:11:42.870
We know they're not the owner of the Post, they're not even logged in.

170
00:11:43.350 --> 00:11:49.980
So in our editor, jump into our router JS file and towards the bottom.

171
00:11:50.340 --> 00:11:57.390
For both of these edit routes, let's set the first function to be user controller.

172
00:11:57.750 --> 00:12:06.930
Dot must be logged in comma, and then you can just copy and paste this for the post route as well.

173
00:12:07.680 --> 00:12:09.300
Let's go ahead and save that.

174
00:12:09.630 --> 00:12:14.850
And because I'm still logged in, I'm still able to successfully view those screens.

175
00:12:15.480 --> 00:12:20.910
OK, at this point, we can now work on the feature that should be at least a little bit fun to set

176
00:12:20.910 --> 00:12:21.090
up.

177
00:12:21.690 --> 00:12:28.650
So from either the edit post screen or the Create New Post screen, try this out with me within the

178
00:12:28.650 --> 00:12:30.060
body content field.

179
00:12:30.240 --> 00:12:33.000
You can try to create paragraphs by dropping down.

180
00:12:36.060 --> 00:12:39.030
Or you could even try to create a bit of bold text.

181
00:12:40.410 --> 00:12:45.150
This should be bold and rap, the bold word and strong tags.

182
00:12:46.590 --> 00:12:48.660
OK, then let's go ahead and submit this.

183
00:12:51.220 --> 00:12:59.350
And now if I go actually view that post, you can see that the resulting HTML not only ignores our line

184
00:12:59.350 --> 00:13:06.460
breaks, right, there's no separate paragraphs, but also it's literally showing us the strong tags

185
00:13:06.460 --> 00:13:11.950
or the HTML instead of actually rendering it and making this actually bold.

186
00:13:12.550 --> 00:13:20.650
This is because our template engine, in our case, E.j.'s is doing its job and escaping this content.

187
00:13:21.070 --> 00:13:27.940
Escaping HTML just means that the HTML that our server is going to send to the browser is this.

188
00:13:28.390 --> 00:13:32.570
It's not literally sending actual raw HTML.

189
00:13:32.590 --> 00:13:35.800
Here we see the word board that we wanted to wrap and strong tags.

190
00:13:36.220 --> 00:13:39.190
E.j.'s is escaping this text for us.

191
00:13:39.580 --> 00:13:47.080
So instead of the actual less than symbol and greater than symbol to create an opening HTML tag, it

192
00:13:47.080 --> 00:13:50.530
instead sends over these escaped versions of those characters.

193
00:13:50.950 --> 00:13:55.830
Escaping user generated content like this is great for security reasons.

194
00:13:55.930 --> 00:13:56.830
It's a must.

195
00:13:57.010 --> 00:13:58.120
It's a necessity.

196
00:13:58.270 --> 00:14:06.280
In other words, if E.j.'s was not escaping this content, we would be 100 percent vulnerable to a cross-site

197
00:14:06.280 --> 00:14:07.330
scripting attack.

198
00:14:07.780 --> 00:14:14.710
So, yes, this current setup is good for security, but it also prevents innocent, well-intentioned

199
00:14:14.710 --> 00:14:19.000
users from including basic formatting in their post content.

200
00:14:19.540 --> 00:14:27.250
So the question becomes How can we prevent malicious code while also allowing innocent things like paragraph

201
00:14:27.250 --> 00:14:30.550
line breaks and bold text and headlines?

202
00:14:30.940 --> 00:14:38.440
Well, the answer is that we're going to leverage a super popular tool named Mark down instead of trying

203
00:14:38.440 --> 00:14:40.750
to explain what markdown is with words.

204
00:14:41.050 --> 00:14:44.770
Let's just go install it in npm and see it in action.

205
00:14:45.250 --> 00:14:46.930
So do this with me right now.
