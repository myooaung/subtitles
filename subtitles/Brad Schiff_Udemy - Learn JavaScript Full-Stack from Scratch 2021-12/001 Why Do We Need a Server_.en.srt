1
00:00:01,920 --> 00:00:04,830
Hello, everyone, and welcome to the next chapter.

2
00:00:05,400 --> 00:00:07,880
Let's take a quick look at where we are.

3
00:00:08,580 --> 00:00:12,670
So we've learned the basics of the JavaScript language itself.

4
00:00:13,350 --> 00:00:18,470
We've also learned the basics of how to use JavaScript in the Web browser environment.

5
00:00:19,020 --> 00:00:25,160
And now our next step is to learn how to use JavaScript in a server environment.

6
00:00:25,710 --> 00:00:26,760
But why?

7
00:00:27,180 --> 00:00:29,490
So we need to ask ourselves a few questions.

8
00:00:29,880 --> 00:00:33,660
What is a server and why do we want to use one?

9
00:00:34,140 --> 00:00:35,850
Let's start with what is a server?

10
00:00:36,690 --> 00:00:44,310
So when I visit Google dot com, my web browser sends off a request to the Google server and the Google

11
00:00:44,310 --> 00:00:49,710
server sends back a response with the HTML to display this page.

12
00:00:50,190 --> 00:00:57,360
Now, when I search for something, so if in the main Google field I search for JavaScript, my Web

13
00:00:57,360 --> 00:01:03,990
browser sends off a request to the Google server with JavaScript as my search term, and then the Google

14
00:01:03,990 --> 00:01:09,670
server sends back a response with the data needed to display these results.

15
00:01:10,560 --> 00:01:11,830
So what is a server?

16
00:01:12,180 --> 00:01:19,380
Well, my own oversimplified answer is that a server is the thing that we can talk to in order to send

17
00:01:19,380 --> 00:01:20,640
and receive data.

18
00:01:20,910 --> 00:01:28,560
As a user of an app or website, we can send requests to a server and then the server sends back a response.

19
00:01:29,070 --> 00:01:33,000
For now, that's as deep as we need to go in terms of what is a server.

20
00:01:33,540 --> 00:01:36,930
Now, let's move on to why we want or need a server.

21
00:01:37,440 --> 00:01:39,750
I would say there are two main reasons.

22
00:01:40,140 --> 00:01:43,770
No one is directly related to what a server is, right?

23
00:01:43,920 --> 00:01:44,970
Communication.

24
00:01:45,390 --> 00:01:47,580
Our app needs to be a good listener.

25
00:01:48,100 --> 00:01:52,410
It needs to listen for incoming requests and then it can send back a response.

26
00:01:52,860 --> 00:01:57,180
Or in other words, we need a way for our users to access our app.

27
00:01:57,810 --> 00:02:04,110
And that's the case even if we're building the simplest website ever, even if it's just a simple brochure,

28
00:02:04,110 --> 00:02:08,630
website that is literally just a headline that says hello.

29
00:02:09,090 --> 00:02:14,970
Even in that case, we still need a server that visitors can connect to in order to view the page.

30
00:02:15,330 --> 00:02:21,960
Even if that server is just serving up the file system and sending back statically created basic HTML

31
00:02:21,960 --> 00:02:26,400
files, it's still a server that's listening for incoming requests.

32
00:02:26,780 --> 00:02:30,390
OK, so that's reason number one for why we want a server.

33
00:02:30,720 --> 00:02:32,250
Now, here's reason number two.

34
00:02:32,610 --> 00:02:39,090
If we want to build something a bit more complex than just a static read only brochure type of website,

35
00:02:39,300 --> 00:02:46,050
and we want to let our visitors actually perform actions instead of just viewing pages, we need a server

36
00:02:46,050 --> 00:02:46,980
of some sort.

37
00:02:47,250 --> 00:02:54,600
And the reason for this is because we cannot implicitly trust the Web browser or incoming requests.

38
00:02:55,020 --> 00:02:56,280
Let me explain why.

39
00:02:56,280 --> 00:02:58,310
And also just sort of what I'm talking about.

40
00:02:58,710 --> 00:03:05,610
For example, let's imagine that we wanted to use our banks website to transfer money from one bank

41
00:03:05,610 --> 00:03:06,690
account to another.

42
00:03:07,150 --> 00:03:12,780
So instead of Google Dotcom, imagine right now I was logged in to my bank's website.

43
00:03:13,200 --> 00:03:19,260
Well, from a code perspective, perhaps the bank website would send a bit of JavaScript to me and my

44
00:03:19,260 --> 00:03:20,010
Web browser.

45
00:03:20,760 --> 00:03:25,550
Maybe they would send over an object money transfer and you don't have to type this out.

46
00:03:25,890 --> 00:03:28,200
This is just for a quick explanation.

47
00:03:28,680 --> 00:03:30,600
There's no need to follow along with this code.

48
00:03:30,600 --> 00:03:34,110
But maybe the bank server would send over to me an object.

49
00:03:34,110 --> 00:03:41,790
So say money transfer equals and they would set the from account to whatever my logged in user is.

50
00:03:41,790 --> 00:03:42,120
Right.

51
00:03:43,560 --> 00:03:48,570
And then the two account would be whoever I wanted to send money to.

52
00:03:49,080 --> 00:03:54,120
So they would probably pull this value from the input field of whoever's name I type in.

53
00:03:54,570 --> 00:04:00,540
And we could imagine there would be a property named amount which again would pull in the value of a

54
00:04:00,540 --> 00:04:03,270
user input field of how much I want to give to someone.

55
00:04:03,780 --> 00:04:08,850
And then finally, we could imagine there would be a property named Message, which is a place for a

56
00:04:08,850 --> 00:04:11,830
memo or a brief description of the money transfer.

57
00:04:12,280 --> 00:04:19,790
Now, most people are not evil and most people are not familiar with code and their browsers console.

58
00:04:20,400 --> 00:04:24,660
However, what if we were an evil or malicious user?

59
00:04:24,930 --> 00:04:30,360
We could log into our bank's website, come into our browsers console, and we could just change this

60
00:04:30,360 --> 00:04:31,500
stuff programmatically.

61
00:04:31,500 --> 00:04:31,830
Right?

62
00:04:32,220 --> 00:04:38,340
We can fire up our console and say money transferred from account should not be the logged in user that

63
00:04:38,340 --> 00:04:39,320
I actually am.

64
00:04:39,690 --> 00:04:42,630
It should be really rich person.

65
00:04:42,630 --> 00:04:45,870
Smith and the two account should be me.

66
00:04:46,080 --> 00:04:52,260
Give me the money and the amount should be some disgustingly large amount and the message should be

67
00:04:54,630 --> 00:04:55,620
my money.

68
00:04:55,620 --> 00:05:01,290
Now, right now I could add that into my web browsers memory and then if I.

69
00:05:01,330 --> 00:05:07,990
Went back to the bank screen, I could click a button that says perform money transfer and if the bank's

70
00:05:07,990 --> 00:05:12,370
server implicitly trusted me, I would now be a very rich man.

71
00:05:12,430 --> 00:05:12,810
Right.

72
00:05:12,850 --> 00:05:14,240
The request would go through.

73
00:05:14,710 --> 00:05:17,250
Now, obviously, that's not the world we live in.

74
00:05:17,680 --> 00:05:23,860
If servers implicitly trusted you and your requests, the world would spin out of control into complete

75
00:05:23,860 --> 00:05:26,140
chaos in about two minutes.

76
00:05:26,560 --> 00:05:33,520
The reason we have any sort of sanity in this digital age is because a server has the job of making

77
00:05:33,520 --> 00:05:37,180
sure that you really are the person that you're claiming to be.

78
00:05:37,540 --> 00:05:43,510
Now, you might be thinking to yourself, why couldn't we just use JavaScript to send over an if statement

79
00:05:43,510 --> 00:05:44,490
to the Web browser?

80
00:05:44,920 --> 00:05:45,180
Right.

81
00:05:45,220 --> 00:05:48,510
We already learned how to make decisions in our code.

82
00:05:48,760 --> 00:05:52,090
So imagine the bank assigns you a variable when you first log in.

83
00:05:52,090 --> 00:05:54,700
Maybe let user equal your name.

84
00:05:55,180 --> 00:05:55,510
Right.

85
00:05:55,510 --> 00:06:02,410
And then maybe you think we could use an if statement and say only if the following is true.

86
00:06:02,410 --> 00:06:08,890
Only if user equals money transfer, not from account.

87
00:06:09,130 --> 00:06:09,390
Right.

88
00:06:09,400 --> 00:06:10,870
So only if this is the case.

89
00:06:11,140 --> 00:06:15,820
Only if the user is who they say they are, then let the money transfer go through.

90
00:06:16,300 --> 00:06:18,280
Well, this line of thinking is good.

91
00:06:18,550 --> 00:06:22,360
This is similar to the line of thinking that we would use on the server side.

92
00:06:22,690 --> 00:06:28,930
The problem is just that we cannot rely on this on the client side or the Web browser side or the user

93
00:06:28,930 --> 00:06:36,610
side, because there's nothing stopping a malicious user from simply saying, well, users should equal

94
00:06:37,210 --> 00:06:39,070
really rich person Smith.

95
00:06:40,840 --> 00:06:45,640
Right, they could modify the user variable in their Web browser, and then this if statement would

96
00:06:45,640 --> 00:06:52,480
evaluate to true or better yet, a malicious user could simply modify the JavaScript that you send over

97
00:06:52,480 --> 00:06:58,990
to them and just get rid of the if statement check or a malicious user could just completely disable

98
00:06:58,990 --> 00:07:00,940
JavaScript in their browser entirely.

99
00:07:01,360 --> 00:07:08,680
So getting back to reason number two of why we want a server trust issues, we need to run this decision

100
00:07:08,680 --> 00:07:15,780
making code in a trusted environment and we can never truly trust the user's Web browser.

101
00:07:16,120 --> 00:07:22,600
So the idea is that with a server, we can write JavaScript code, we can write if statements and all

102
00:07:22,600 --> 00:07:26,380
sorts of things to make sure that it's a legitimate request.

103
00:07:26,920 --> 00:07:34,420
So long story short, a server is really just a place where we can write code that cannot be tampered

104
00:07:34,420 --> 00:07:37,950
with or manipulated by the user of the application.

105
00:07:38,320 --> 00:07:43,360
And for now, that's really as deep as we need to go in terms of why we want or need a server.

106
00:07:43,630 --> 00:07:49,750
Now, before we bring this video to a close and start talking about our next steps, I first want to

107
00:07:49,750 --> 00:07:53,070
address two common questions that you might have right now.

108
00:07:53,500 --> 00:07:57,450
So question number one, you might be thinking, OK, sure.

109
00:07:57,460 --> 00:08:03,880
So you could write this if statement on the server side, but couldn't the user still just send along

110
00:08:03,880 --> 00:08:07,540
a fake user value and try to impersonate someone?

111
00:08:07,990 --> 00:08:09,310
And the answer is yes.

112
00:08:09,460 --> 00:08:11,400
Malicious users will try to do that.

113
00:08:11,710 --> 00:08:15,070
However, I don't want you to worry about that right now.

114
00:08:15,370 --> 00:08:20,380
We are absolutely going to learn about authentication later in this course.

115
00:08:20,680 --> 00:08:23,920
But I don't want you to burden your mind with it right now.

116
00:08:24,220 --> 00:08:24,820
Don't worry.

117
00:08:24,820 --> 00:08:30,340
We have a lot of tricks up our sleeves on the server side and we can get creative in terms of making

118
00:08:30,340 --> 00:08:32,770
sure that users are who they claim to be.

119
00:08:33,190 --> 00:08:39,490
For now, all you need to know is that if our app is even going to have a chance of being secure, we

120
00:08:39,490 --> 00:08:46,600
need to run our verification and authentication code in a trusted environment, not in an environment

121
00:08:46,630 --> 00:08:48,250
that the user is in control of.

122
00:08:48,610 --> 00:08:49,690
So we need a server.

123
00:08:50,470 --> 00:08:52,180
So that's common question number one.

124
00:08:52,390 --> 00:08:58,930
Common question number two is, hey, Brad, what about serverless applications?

125
00:08:59,440 --> 00:09:01,990
I keep hearing this phrase serverless app.

126
00:09:01,990 --> 00:09:03,910
It's a really popular buzzword right now.

127
00:09:03,910 --> 00:09:05,380
There's a lot of hype surrounding it.

128
00:09:05,710 --> 00:09:10,510
So if an app can be Cervalis, do we really need a server?

129
00:09:10,900 --> 00:09:14,980
And my answer to this question is that it's really just a matter of semantics.

130
00:09:15,370 --> 00:09:18,420
Serverless apps still use servers.

131
00:09:18,820 --> 00:09:24,220
The difference is that instead of writing an entire server and then pushing it up onto the Internet

132
00:09:24,550 --> 00:09:31,300
with a Serverless app, you're just writing individual functions and then you're handing those functions

133
00:09:31,300 --> 00:09:35,710
off to a big company like Amazon, Google or IBM.

134
00:09:36,250 --> 00:09:40,900
And then those billion dollar companies are hosting your functions for you.

135
00:09:41,320 --> 00:09:42,790
It's the same idea, though.

136
00:09:42,970 --> 00:09:45,580
You are writing server side functions.

137
00:09:45,730 --> 00:09:49,030
You are having a place that is trustworthy and private.

138
00:09:49,450 --> 00:09:55,510
It's just that you're letting some other company, host or individual functions instead of you needing

139
00:09:55,510 --> 00:09:58,120
to host your entire server yourself.

140
00:09:58,420 --> 00:10:04,090
Now, if everything I just said made zero sense and you've never heard of the phrase serverless apps,

141
00:10:04,360 --> 00:10:05,050
that's OK.

142
00:10:05,050 --> 00:10:08,250
You can just forget the last 60 seconds ever happened.

143
00:10:08,710 --> 00:10:14,920
Rest assured that later on in the course I will briefly talk about and explain Serverless apps.

144
00:10:15,130 --> 00:10:17,950
But for now, we do not need to worry about that.

145
00:10:18,460 --> 00:10:24,430
And I can tell you with the utmost certainty that whether you want to create a traditional app or a

146
00:10:24,430 --> 00:10:29,320
serverless app, you are going to need to write server side code.

147
00:10:29,740 --> 00:10:36,160
And in the JavaScript universe, as soon as you want to start writing code outside the context of a

148
00:10:36,160 --> 00:10:44,680
Web browser, you need to learn about something named Node JS after the Web browser node is by far the

149
00:10:44,680 --> 00:10:47,900
most common or popular JavaScript environment.

150
00:10:48,400 --> 00:10:54,370
Now Node can be used for just about anything, so I don't want you to think that it's just for creating

151
00:10:54,370 --> 00:10:58,660
servers that just happens to be one of its many use cases.

152
00:10:59,170 --> 00:11:05,440
Big picture learning about node is going to open up so many doors for us and it's exactly what we're

153
00:11:05,440 --> 00:11:08,210
going to start learning about in our very next lesson.

154
00:11:08,680 --> 00:11:14,740
This is an exciting portion of the course because when you start to learn about node, you can legitimately

155
00:11:14,740 --> 00:11:17,470
call yourself a JavaScript developer.

156
00:11:17,920 --> 00:11:22,390
So let's keep our momentum rolling and I will see you in the next lesson.
