1
00:00:01,940 --> 00:00:03,020
Hello, everyone.

2
00:00:03,290 --> 00:00:08,840
I know that I promised we'd connect our app to a database in the next lesson, but I have a really quick

3
00:00:08,840 --> 00:00:11,350
productivity tip that I need to share with you.

4
00:00:11,570 --> 00:00:16,370
I promise this lesson will be short and quick, and then we will be right on our way to focusing on

5
00:00:16,370 --> 00:00:17,150
the database.

6
00:00:17,570 --> 00:00:23,930
OK, now the productivity tips that I want to share with you has to do with the annoying need of manually

7
00:00:23,930 --> 00:00:27,450
restarting your NOAD app every time you make changes to it.

8
00:00:27,890 --> 00:00:33,770
So, for example, in my command line we can see that I'm currently running my node server or app and

9
00:00:33,770 --> 00:00:36,190
so I'm able to visit it in my Web browser.

10
00:00:36,590 --> 00:00:42,470
Now, just for an example, what if I wanted to edit this headline here to include an exclamation point

11
00:00:42,470 --> 00:00:43,270
at the end?

12
00:00:43,700 --> 00:00:50,210
So if I go into my text editor and inside that server, James File, if I scroll down into the HTML

13
00:00:50,210 --> 00:00:53,980
template here, is that heading level one here you can see to do app.

14
00:00:54,320 --> 00:01:01,880
So if I add a few exclamation points at the end of that and save this file, if I refresh the browser,

15
00:01:02,120 --> 00:01:03,850
we do not see that change.

16
00:01:04,370 --> 00:01:09,740
This is because once you launch a node app, once you go to the command line and say node and then the

17
00:01:09,740 --> 00:01:17,360
name of the file node is going to keep your app running in memory node is not going to keep reloading

18
00:01:17,360 --> 00:01:20,910
and looking at your code file every time a new request comes in.

19
00:01:21,260 --> 00:01:26,840
That's why we've had to perform that annoying pattern of coming into the command line and pressing control

20
00:01:26,840 --> 00:01:31,570
C to quit the server and then running the command to start the server back up again.

21
00:01:32,180 --> 00:01:35,930
Right now, if I refresh, we do see that change now.

22
00:01:35,930 --> 00:01:41,900
Having to manually go into the command line and quit the server and relaunch the server is a huge waste

23
00:01:41,900 --> 00:01:42,490
of time.

24
00:01:42,860 --> 00:01:46,880
Instead, it would be nice if we could automate that process somehow.

25
00:01:47,030 --> 00:01:54,110
For example, it would be great if any time we saved a change to this file node, detected that change

26
00:01:54,110 --> 00:01:58,610
to the file and then just automatically restarted the server for us.

27
00:01:58,850 --> 00:02:04,370
Well, learning how to set up automatic restarts like that is exactly what we're going to do in this

28
00:02:04,370 --> 00:02:04,850
lesson.

29
00:02:05,180 --> 00:02:08,040
It's going to save us a ton of time in the long run.

30
00:02:08,420 --> 00:02:14,060
So right now, I want you to follow along with me right now if your node, app or server is running.

31
00:02:14,090 --> 00:02:17,810
Be sure to go into the command line and press control, see to quit the server.

32
00:02:18,260 --> 00:02:26,540
OK, now our first real step is to go out to the JavaScript grocery store or NPM and install a package

33
00:02:26,660 --> 00:02:29,060
that makes this automatic restart possible.

34
00:02:29,360 --> 00:02:31,790
So in the command line, type this out with me.

35
00:02:32,490 --> 00:02:44,330
NPM install in the name of the package that we want to install is Node, Maun and Demona.

36
00:02:44,540 --> 00:02:45,770
OK, then press enter.

37
00:02:46,920 --> 00:02:51,300
And depending on the speed of your computer and Internet connection, it could take a few seconds.

38
00:02:51,310 --> 00:02:52,320
So be patient.

39
00:02:52,680 --> 00:02:59,370
But as soon as the install command completes, the question becomes, how do we actually use this node

40
00:02:59,490 --> 00:03:00,450
on package?

41
00:03:00,900 --> 00:03:05,700
Well, essentially, what we want to do and this is just a demonstration, you do not need to type this

42
00:03:05,700 --> 00:03:05,970
out.

43
00:03:06,120 --> 00:03:12,390
But instead of saying node and then the name of our file, what we really want to do now is run a command

44
00:03:12,390 --> 00:03:15,550
that says Node Mohn and then the name of our file.

45
00:03:16,020 --> 00:03:19,560
This way, the node one package will watch our file for us.

46
00:03:19,800 --> 00:03:24,970
And any time it detects a change, it will automatically relaunch the app for us.

47
00:03:25,470 --> 00:03:32,950
So not only this node Mohn initially start your app, but then it monitors your app for future changes.

48
00:03:33,300 --> 00:03:40,200
It's a great time saver, however, being able to run this command directly in the command line node.

49
00:03:40,200 --> 00:03:41,850
Mohn and then the name of your file.

50
00:03:42,240 --> 00:03:49,380
This would require us to install Node Mohn globally on our computer, whereas we just installed Node

51
00:03:49,380 --> 00:03:52,630
Mond locally just for this particular project.

52
00:03:52,980 --> 00:03:53,300
Right.

53
00:03:53,310 --> 00:03:59,130
We just installed Node Mond into our node modules folder that lives within this project folder.

54
00:03:59,520 --> 00:04:01,230
This means we installed it locally.

55
00:04:01,500 --> 00:04:07,920
Now there is nothing wrong with installing a package globally, but from my experience, many, many

56
00:04:07,920 --> 00:04:13,740
people and students run into technical difficulties when trying to install a package globally.

57
00:04:14,190 --> 00:04:18,810
So we are not going to run the command directly in the command line like this.

58
00:04:20,100 --> 00:04:27,270
Instead, we're going to leverage our package JSON file to be able to run Node Mond locally.

59
00:04:27,750 --> 00:04:33,010
This is a great way of setting things up because you're way less likely to run into technical difficulties.

60
00:04:33,360 --> 00:04:40,950
So right now in your text, Ed, I want you to open up our package JSON file, not the package dash,

61
00:04:40,980 --> 00:04:41,930
lock, file.

62
00:04:42,420 --> 00:04:45,390
We're looking for the file that is packaged JSON.

63
00:04:45,600 --> 00:04:49,680
So go ahead and open that file just for fun towards the bottom.

64
00:04:49,680 --> 00:04:51,780
You can see this dependencies area.

65
00:04:52,230 --> 00:04:52,580
Cool.

66
00:04:52,590 --> 00:04:53,520
We can see that node.

67
00:04:53,520 --> 00:04:56,100
Mohn was added to our list of dependencies.

68
00:04:56,460 --> 00:04:59,600
However, that's not why I wanted us to jump into this file.

69
00:05:00,030 --> 00:05:06,510
So, yes, one of the responsibilities of this file is to keep a running list of our dependencies.

70
00:05:07,050 --> 00:05:13,250
But if we scroll up to the top of this file, we can see an area named Scrimps.

71
00:05:13,770 --> 00:05:17,710
This is where we can create our own custom commands.

72
00:05:18,090 --> 00:05:24,600
So check this out once you find the area named scripts and then we see a colon and then an opening curly

73
00:05:24,600 --> 00:05:30,750
bracket right after that opening curly bracket, I want you to create a new line or dropdown to a new

74
00:05:30,750 --> 00:05:31,890
line just like this.

75
00:05:32,400 --> 00:05:38,340
OK, let's create our own custom scripts or command named Watch.

76
00:05:39,150 --> 00:05:46,620
So quotes watch, then include a colon, then include a pair of quotes, a beginning and an ending quote

77
00:05:46,830 --> 00:05:49,710
include a comma right after that pair of quotes.

78
00:05:50,040 --> 00:05:57,480
OK, now in between the quotes, we can type out our command, so type this out with me Node Maun and

79
00:05:57,480 --> 00:05:59,410
then the space and then the name of our file.

80
00:05:59,430 --> 00:06:00,630
So just server.

81
00:06:01,140 --> 00:06:06,660
Even though we would not be able to run this command in the command line directly because we didn't

82
00:06:06,660 --> 00:06:14,310
install node Hmong globally, NPM is smart enough to look in our package Dodgson's scripts area and

83
00:06:14,310 --> 00:06:21,270
within that context it will be able to intelligently look in our node modules folder for the node MOND

84
00:06:21,270 --> 00:06:21,960
package.

85
00:06:22,180 --> 00:06:27,200
So setting up a command or script like this is a great way of organising things.

86
00:06:27,660 --> 00:06:32,190
With this in place, go ahead and save your package, not JSON file.

87
00:06:32,550 --> 00:06:35,570
And now check this out down in your command line.

88
00:06:35,760 --> 00:06:45,270
I want you to type this command with me, NPM and then run and then we just type in whatever we named

89
00:06:45,270 --> 00:06:46,640
our script or command.

90
00:06:46,800 --> 00:06:48,930
So we named it Watch.

91
00:06:49,910 --> 00:06:55,170
So in the command line, npm run watch, that's going to run our command.

92
00:06:55,190 --> 00:06:56,420
Go ahead and press enter.

93
00:06:58,240 --> 00:07:02,330
And we see these Gnomon messages, it says that it's starting up our server.

94
00:07:02,560 --> 00:07:06,490
So if I go to the browser and refresh, I can visit our app.

95
00:07:07,700 --> 00:07:15,380
Here we can see the three exclamation points, but if I go back into my text, Ed back into server J.S.

96
00:07:15,380 --> 00:07:21,500
right, the file that's powering our app, if I look through the HTML template and what if I get rid

97
00:07:21,500 --> 00:07:23,100
of those exclamation points?

98
00:07:23,870 --> 00:07:26,720
Now, check this out as soon as I save this file.

99
00:07:28,130 --> 00:07:32,330
It happened really quick, so you might have missed it, but we saw new lines appear down in the command

100
00:07:32,330 --> 00:07:36,370
line, Noad man said, restarting due to changes.

101
00:07:36,920 --> 00:07:38,400
So it's relaunching the app for us.

102
00:07:38,420 --> 00:07:40,670
I didn't have to do anything in the command line.

103
00:07:40,910 --> 00:07:46,000
And now if I refresh my app in the browser, you can see those changes took effect.

104
00:07:46,550 --> 00:07:47,170
Awesome.

105
00:07:47,780 --> 00:07:53,600
This may not seem very impressive, but trust me, in the long run, this is going to save you so much

106
00:07:53,600 --> 00:07:54,080
time.

107
00:07:54,560 --> 00:07:59,720
Now, you don't need to constantly go to the command line to quit and restart, quit and restart.

108
00:08:00,080 --> 00:08:05,450
You're free to just make changes to your application, save it and then refresh in the browser.

109
00:08:05,960 --> 00:08:06,920
And life is good.

110
00:08:07,370 --> 00:08:13,430
OK, so just to recap, back in package, Jason, here is the line of code that I added in the scripts

111
00:08:13,430 --> 00:08:13,800
area.

112
00:08:13,800 --> 00:08:15,980
If you need to pause the video and type this in.

113
00:08:17,080 --> 00:08:23,650
OK, now if I come to the command line and actually do want to quit my server, so control see, and

114
00:08:23,650 --> 00:08:28,540
I just want to let you know that throughout the following chapters in this course, you are not going

115
00:08:28,540 --> 00:08:32,530
to see me use node server to launch my app any longer.

116
00:08:32,920 --> 00:08:42,070
Instead of that, I am now going to use NPM Run Watch to launch my application and that will trigger

117
00:08:42,070 --> 00:08:44,970
this script or command that we just set up.

118
00:08:45,340 --> 00:08:49,900
Don't worry, if you feel like you can't remember this command, that's OK, because you're going to

119
00:08:49,900 --> 00:08:53,500
see me run this command in the following lessons again and again.

120
00:08:53,890 --> 00:08:54,240
Cool.

121
00:08:54,400 --> 00:08:58,990
Now that we've covered this productivity tip, that's going to save us a lot of time, we are ready

122
00:08:58,990 --> 00:09:07,530
to move on to the next lesson where we will indeed connect our node application to a Mongo DB database.

123
00:09:08,140 --> 00:09:09,490
This is going to be a lot of fun.

124
00:09:09,490 --> 00:09:12,100
Let's keep things rolling and I will see you then.
