WEBVTT
1
00:00:00.330 --> 00:00:03.180
OK, so that's aero functions in a nutshell.

2
00:00:03.510 --> 00:00:09.990
Now let's move on to the next topic in this lesson, which is function hoisting.

3
00:00:10.380 --> 00:00:11.970
Let me delete all of this code.

4
00:00:11.970 --> 00:00:15.420
And what in the world is function hoisting?

5
00:00:15.720 --> 00:00:17.220
Well, let me show you an example.

6
00:00:17.610 --> 00:00:25.170
Let's imagine we have a function named cool and maybe it just logs out to the console a bit of text

7
00:00:25.170 --> 00:00:27.510
that says this is super cool.

8
00:00:28.690 --> 00:00:35.670
OK, now imagine right above this function declaration upon the very first line I try to call the function.

9
00:00:36.450 --> 00:00:39.780
If I check the console, we see this is super cool.

10
00:00:40.210 --> 00:00:42.370
So our code is working successfully.

11
00:00:42.690 --> 00:00:48.710
However, the only reason this code works is because of function hoisting.

12
00:00:49.110 --> 00:00:57.190
What I mean by this is usually the ordering of our lines matters in JavaScript, right?

13
00:00:57.210 --> 00:01:01.860
Like if down here I created a variable called Strawbery Count.

14
00:01:03.890 --> 00:01:13.190
And set it to 100, I can only access the strawbery count variable below this line of code, right?

15
00:01:13.210 --> 00:01:18.130
I can't expect to be able to access Strawbery Count before it's been created.

16
00:01:18.500 --> 00:01:27.230
So if above this line I've tried to log out to the console strawbery count and then try to check the

17
00:01:27.230 --> 00:01:30.380
console, we see uncaught reference error.

18
00:01:30.380 --> 00:01:32.900
Strawbery count is not defined.

19
00:01:33.410 --> 00:01:37.300
So clearly the ordering of our lines matters.

20
00:01:37.910 --> 00:01:44.180
So the question is why are we able to call this function before we've even created the function?

21
00:01:44.750 --> 00:01:49.760
Well, the answer is because JavaScript has something called function hoisting.

22
00:01:50.390 --> 00:01:56.330
As far as JavaScript is concerned, this section of code might as well be up at the very, very, very

23
00:01:56.330 --> 00:01:58.070
top of our code.

24
00:01:58.610 --> 00:02:00.050
Hence the name hoisting.

25
00:02:00.410 --> 00:02:00.700
Right.

26
00:02:00.710 --> 00:02:07.610
We can consider this code hoisted or moved up to the very top, even though it's not there physically.

27
00:02:07.610 --> 00:02:12.760
In our code, however, not all functions get hoisted.

28
00:02:13.280 --> 00:02:17.000
So yes, a function declaration like this will be hoisted.

29
00:02:17.300 --> 00:02:24.110
A function declaration is where we actually use the key word function and give it a name.

30
00:02:24.590 --> 00:02:27.630
But we know that there are other ways to create a function.

31
00:02:28.010 --> 00:02:28.900
So check this out.

32
00:02:29.330 --> 00:02:37.000
What if instead we create a variable and call it cool and set it to equal an anonymous function, so

33
00:02:37.010 --> 00:02:42.680
function parentheses, curly brackets, and then we try to log out to the console and say, hey, well,

34
00:02:42.680 --> 00:02:46.110
if we check the console, we just see uncaught reference error.

35
00:02:46.310 --> 00:02:47.930
Cool is not defined.

36
00:02:48.560 --> 00:02:54.470
So just be aware that unless you create a function with the actual keyword function and then the name,

37
00:02:54.740 --> 00:02:57.080
your function is not going to get hoisted.

38
00:02:57.590 --> 00:03:04.580
So in this case, with this example, we would need to call the function below where we are creating

39
00:03:04.580 --> 00:03:05.980
the function like this.

40
00:03:06.380 --> 00:03:07.570
Now it works just fine.

41
00:03:08.180 --> 00:03:14.390
So big picture with a traditional function declaration, you can get a bit lazy with the ordering of

42
00:03:14.390 --> 00:03:20.600
your lines, but if you create a function in any other fashion, you need to pay attention to your line

43
00:03:20.600 --> 00:03:20.960
order.

44
00:03:21.500 --> 00:03:23.030
OK, now let's change gears.

45
00:03:23.210 --> 00:03:25.580
So that was function hoisting in a nutshell.

46
00:03:25.790 --> 00:03:31.580
Let's move on to the next topic in this lesson, which is template literals.

47
00:03:31.820 --> 00:03:34.350
So what in the world is a template literal?

48
00:03:34.670 --> 00:03:37.290
Well, I'm going to delete this code and start fresh.

49
00:03:37.670 --> 00:03:44.270
So let's imagine we have a variable called my name and we set it to equal whatever your name is.

50
00:03:44.690 --> 00:03:53.390
And then imagine we want to log out to the console, a bit of text that says, hello, my name is blank.

51
00:03:53.390 --> 00:03:53.780
Right.

52
00:03:53.780 --> 00:04:00.020
And then it pulls in the variable and then we also add on and the sky is blue.

53
00:04:00.950 --> 00:04:01.230
Right.

54
00:04:01.310 --> 00:04:06.840
So if we check the console all together, we see that that pulls in the value for the my name variable.

55
00:04:07.370 --> 00:04:14.150
So our code is working as we would expect, but this syntax can be really awkward, I'm sure, if you're

56
00:04:14.150 --> 00:04:14.840
being honest.

57
00:04:14.840 --> 00:04:19.790
There was a point throughout the course so far where you got frustrated with the having to open up a

58
00:04:19.790 --> 00:04:25.430
quote and then closed the quote and then plus simple variable plus symbol, new quotes.

59
00:04:25.820 --> 00:04:29.100
It just gets awkward to type and it's not ideal.

60
00:04:29.450 --> 00:04:36.290
So right now, I want to show you a new tool called a Template Literal, which is going to make our

61
00:04:36.290 --> 00:04:37.750
life a lot easier.

62
00:04:38.240 --> 00:04:45.020
So let's get rid of this entire string of text and instead use to back Tick's.

63
00:04:46.010 --> 00:04:52.310
This character is directly to the left of the one key or right above the tab key.

64
00:04:52.760 --> 00:04:59.360
So instead of a string of text, we would call back tick's like this, a template literal, but really

65
00:04:59.360 --> 00:05:03.290
we can just think of it as a string of text with superpower's.

66
00:05:03.710 --> 00:05:04.520
So check this out.

67
00:05:04.520 --> 00:05:11.010
We can just say hello, my name is blank and the sky is blue.

68
00:05:12.020 --> 00:05:14.840
Now obviously we don't actually want the word blank here.

69
00:05:15.080 --> 00:05:16.970
We want to do something dynamic.

70
00:05:17.090 --> 00:05:22.300
We want to include an expression or we should say we want to pull in the value of this variable.

71
00:05:22.880 --> 00:05:29.570
So within a template literal, when you want to do something dynamic, you just include dollar sign,

72
00:05:29.570 --> 00:05:30.800
curly brackets.

73
00:05:31.190 --> 00:05:36.260
And inside here we can include an expression or I should say we can do something dynamic.

74
00:05:36.620 --> 00:05:42.290
So instead of just a string of text that's going to be interpreted literally, we could say two plus

75
00:05:42.290 --> 00:05:50.900
two and this would say hello, my name is for or what we really want to do is just pull in the variable.

76
00:05:51.470 --> 00:05:52.040
Awesome.

77
00:05:52.040 --> 00:05:53.360
So that gets the job done.

78
00:05:53.600 --> 00:05:57.920
And in my opinion, this is so much easier to type out and work with.

79
00:05:58.130 --> 00:06:02.810
We don't have to use the plus symbol and we don't have to keep dropping in and out of the quotations

80
00:06:03.230 --> 00:06:03.430
when.

81
00:06:03.510 --> 00:06:09.150
Want to do something dynamic, you just say dollar sign curly brackets and remember to create a template

82
00:06:09.150 --> 00:06:17.370
literal where we have this superpower, we just wrap our text within back ticks instead of regular quotes.

83
00:06:17.860 --> 00:06:20.640
OK, so that's template literals in a nutshell.

84
00:06:21.000 --> 00:06:27.330
Now, let's move on to the final topic in this lesson, and that is semicolons.

85
00:06:27.690 --> 00:06:29.220
So let's give ourselves a goal.

86
00:06:29.640 --> 00:06:36.480
What if we wanted these two lines of code here to be squished together and just sit on a single line

87
00:06:36.480 --> 00:06:41.310
of code that's really long so we could just delete the white space like this?

88
00:06:41.640 --> 00:06:43.720
But this is not valid JavaScript.

89
00:06:43.770 --> 00:06:45.090
This is throwing an error.

90
00:06:45.120 --> 00:06:48.200
JavaScript cannot make sense of what we are trying to do here.

91
00:06:48.690 --> 00:06:55.120
However, where my cursor is right now, if we just place a semicolon, everything's fine.

92
00:06:55.830 --> 00:06:58.560
This is perfectly valid JavaScript code.

93
00:06:59.130 --> 00:07:06.030
So the idea is that a semicolon is sort of the period at the end of a JavaScript sentence.

94
00:07:06.480 --> 00:07:11.260
It's our way of taking a breath or letting JavaScript know that this thought is complete.

95
00:07:11.670 --> 00:07:13.050
Now, here's the interesting part.

96
00:07:13.260 --> 00:07:16.890
Without the semicolon here, the code breaks.

97
00:07:16.920 --> 00:07:18.390
It doesn't make any sense.

98
00:07:18.840 --> 00:07:23.040
But if we just drop down to a new line, everything is fine.

99
00:07:23.370 --> 00:07:25.100
This code will run perfectly.

100
00:07:25.680 --> 00:07:34.170
This is because the JavaScript language has something called automatic semicolon insertion, meaning

101
00:07:34.170 --> 00:07:40.640
behind the scenes, JavaScript is going to automatically add a semicolon here for us.

102
00:07:41.130 --> 00:07:47.490
So as long as we keep our code organized with line breaks and whitespace, we don't need a semicolon

103
00:07:47.490 --> 00:07:47.800
here.

104
00:07:48.210 --> 00:07:54.750
Now, I do want to let you know that this is just my personal, subjective opinion in the JavaScript

105
00:07:54.750 --> 00:07:55.330
community.

106
00:07:55.350 --> 00:08:01.920
This is one of the most hotly debated arguments of all time, the debate of whether we should include

107
00:08:01.920 --> 00:08:03.720
a semicolon here or not.

108
00:08:04.290 --> 00:08:09.110
Now, again, if our code is squished together on a single line, there is no debate.

109
00:08:09.510 --> 00:08:15.170
We flat out need a semicolon here or JavaScript cannot make sense of what we're trying to do.

110
00:08:15.900 --> 00:08:22.710
The debate is if we stay organized with white space and line breaks, do we omit the semicolon here

111
00:08:22.710 --> 00:08:30.560
and let JavaScript automatic semicolon insertion do its job, or do we manually include the semicolons?

112
00:08:30.870 --> 00:08:35.430
Now, I don't want to brainwash you and tell you to never use semicolons.

113
00:08:35.790 --> 00:08:38.430
I'm just letting you know that that's my personal preference.

114
00:08:38.670 --> 00:08:42.420
So you're not going to see me use semicolons in the course.

115
00:08:43.260 --> 00:08:50.730
OK, now that's actually going to bring this lesson to a close in our next lesson, day 10, the finale

116
00:08:50.730 --> 00:08:56.340
of this first chapter, we are going to finally build something practical and concrete.

117
00:08:56.670 --> 00:09:03.780
We are going to use the Web browsers, objects and vocabulary or lingo to build a simple to do list

118
00:09:03.780 --> 00:09:04.870
web application.

119
00:09:05.340 --> 00:09:08.940
This is going to leverage everything we've learned so far in the course.

120
00:09:09.270 --> 00:09:13.620
It should be a lot of fun and something that you can show to your friends and family.

121
00:09:13.890 --> 00:09:18.330
So let's keep things rolling and I will see you in the next lesson.
