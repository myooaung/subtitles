WEBVTT
1
00:00:01.840 --> 00:00:02.830
Hello, everyone.

2
00:00:03.190 --> 00:00:08.260
In this lesson, we are going to begin setting up an API for our application.

3
00:00:08.890 --> 00:00:12.250
But first, what in the world is an API?

4
00:00:12.820 --> 00:00:18.630
Well, it's an acronym that stands for application programming interface.

5
00:00:19.150 --> 00:00:20.560
But what does that mean?

6
00:00:21.130 --> 00:00:27.940
Well, I think the simplest way to put it into words is if we add an API to our application, the API

7
00:00:27.940 --> 00:00:35.020
will allow other applications to communicate with our application, or in other words, an API will

8
00:00:35.020 --> 00:00:42.430
make our data and functionality accessible through programmatic requests instead of just available through

9
00:00:42.430 --> 00:00:45.890
clicking on buttons within our HTML templates.

10
00:00:46.570 --> 00:00:52.660
So, for example, we've been working on a web application, but what if we wanted to create an iOS

11
00:00:52.660 --> 00:00:55.960
version or an Android native version of our app?

12
00:00:56.410 --> 00:01:02.930
Or what if we wanted to create a native Windows, Mac or Linux desktop version of our application?

13
00:01:03.340 --> 00:01:08.740
The point being, what if we wanted to create a version of our application where the user interface

14
00:01:08.740 --> 00:01:12.730
is not powered by an HTML rendering engine?

15
00:01:13.330 --> 00:01:19.750
Well, we'd want our express server that we've been working on to be able to expose the data and functionality

16
00:01:19.750 --> 00:01:26.800
of our app in a way that is decoupled from HTML and cookies and just the Web browser environment in

17
00:01:26.800 --> 00:01:27.360
general.

18
00:01:27.850 --> 00:01:28.050
Right.

19
00:01:28.060 --> 00:01:34.540
We want to expose our data and functionality in a very open ended and flexible and just sort of raw

20
00:01:34.540 --> 00:01:35.650
data fashion.

21
00:01:36.010 --> 00:01:43.000
Now, we're not going to recreate 100 percent of our apps functionality through our API in this lesson,

22
00:01:43.390 --> 00:01:48.190
because not only would that make this lesson too long, but it would also be very repetitive.

23
00:01:48.610 --> 00:01:54.400
So we're just going to walk through a few examples and then you will have everything you need to take

24
00:01:54.400 --> 00:01:56.860
the API as far as you want to take it.

25
00:01:57.430 --> 00:02:03.700
So, for example, we are not going to make user registration available through our API.

26
00:02:04.390 --> 00:02:10.480
Let's just make up an arbitrary rule that if you want to register for our application, you must do

27
00:02:10.480 --> 00:02:11.950
it through our Web app.

28
00:02:12.730 --> 00:02:20.110
However, let's imagine that we do want to allow existing users to be able to log in and authenticate

29
00:02:20.380 --> 00:02:22.900
programmatically through our API.

30
00:02:23.410 --> 00:02:30.430
So big picture, our goals for this lesson will be to let a user log in, create a new post and delete

31
00:02:30.430 --> 00:02:36.970
one of their existing posts all through our API so they would be able to perform those actions from

32
00:02:36.970 --> 00:02:41.970
anywhere, any application environment that can send an HTTP request.

33
00:02:42.310 --> 00:02:48.560
So that could be an iOS and Android app, a desktop app for Windows, Mac or Linux, anything.

34
00:02:49.000 --> 00:02:56.620
Now, obviously, it's outside the scope of this course to actually create an iOS or Android or desktop

35
00:02:56.620 --> 00:02:56.920
app.

36
00:02:57.340 --> 00:03:00.250
So we're not actually going to create another app.

37
00:03:00.550 --> 00:03:05.400
We're just making the functionality of this app available from anywhere.

38
00:03:05.740 --> 00:03:05.980
Right.

39
00:03:05.990 --> 00:03:11.770
We are exposing the data and functionality of this app to be leveraged in a universal way.

40
00:03:12.250 --> 00:03:18.340
Now, since we're not actually creating an iOS or Android or Windows app, the question becomes, how

41
00:03:18.340 --> 00:03:20.250
are we going to test things right?

42
00:03:20.410 --> 00:03:23.870
How are we going to send a request to our apps API?

43
00:03:24.460 --> 00:03:32.470
Well, the industry standard answer to that question is Postman Postman is a free tool that is incredibly

44
00:03:32.470 --> 00:03:38.650
helpful while building an API, not only is it free to download, but you don't need to sign up for

45
00:03:38.650 --> 00:03:40.140
an account whatsoever.

46
00:03:40.570 --> 00:03:45.120
So right now, I want you to pause this video, download and install postman.

47
00:03:45.580 --> 00:03:53.620
You can either just Google for Postman or the domain is get postman dot com from the homepage, look

48
00:03:53.620 --> 00:03:54.970
for a download link.

49
00:03:55.240 --> 00:04:01.510
Or as of the day that I'm recording this video, this gets started button on the homepage on a larger

50
00:04:01.510 --> 00:04:01.830
screen.

51
00:04:01.840 --> 00:04:03.010
It will be on the left hand side.

52
00:04:03.010 --> 00:04:08.620
Just click the get started button and then that should take you to a screen where it's very obvious

53
00:04:08.620 --> 00:04:09.970
where to download it from.

54
00:04:10.600 --> 00:04:14.890
Whether you're on Windows, Mac or Linux, there's a version available for you.

55
00:04:15.400 --> 00:04:19.750
So go ahead and pause the video while you download and install Postman.

56
00:04:20.380 --> 00:04:25.210
OK, at this point I will assume that anyone moving forward has installed Postman.

57
00:04:25.510 --> 00:04:27.900
So this is what the application looks like.

58
00:04:27.940 --> 00:04:31.660
Or by default, I believe the left hand sidebar might be visible.

59
00:04:32.380 --> 00:04:35.890
Either way, you can toggle the sidebar with this button in the bottom left corner.

60
00:04:36.850 --> 00:04:41.560
OK, let's go ahead and send our first request using Postman.

61
00:04:42.100 --> 00:04:45.430
If you don't already see a screen that looks like this, that's OK.

62
00:04:45.730 --> 00:04:48.040
Just go ahead and click this plus symbol.

63
00:04:48.220 --> 00:04:53.860
It almost looks like you would create a new tab in a web browser or you should be able to also press

64
00:04:53.860 --> 00:04:59.830
control T on Windows or command T on Mac to open up a new tab for a new request.

65
00:05:00.940 --> 00:05:01.360
So he.

66
00:05:01.440 --> 00:05:07.210
You see a text field where we can enter a Eurail, and at first glance you might be thinking, Brad,

67
00:05:07.230 --> 00:05:09.030
what is the point of this application?

68
00:05:09.360 --> 00:05:13.230
Can't we just send an HTTP get request to a U.

69
00:05:13.230 --> 00:05:15.060
RL from within our Web browser?

70
00:05:15.420 --> 00:05:21.210
Well, yes, you could, but Postman makes it very easy to send any type of request.

71
00:05:21.210 --> 00:05:28.560
Right, get request, a post request, and then outside the context of a traditional HTML form, there

72
00:05:28.560 --> 00:05:31.480
are all sorts of other request types.

73
00:05:32.220 --> 00:05:38.280
So not only the postman make it easy to choose your request, but also it makes it very easy to add

74
00:05:38.280 --> 00:05:43.380
whatever sort of body fields or JSON payload or headers.

75
00:05:43.920 --> 00:05:50.430
Basically, Postman makes it very easy to send different types of requests instead of having to write

76
00:05:50.430 --> 00:05:55.340
front end JavaScript or program the web browser to send a certain type of request.

77
00:05:55.680 --> 00:05:58.980
I would almost prefer to postman as a request playground.

78
00:05:59.460 --> 00:05:59.630
Right.

79
00:05:59.710 --> 00:06:06.570
It's this program where it's very easy to send very specific types of requests wherever and however

80
00:06:06.570 --> 00:06:07.110
you want.

81
00:06:07.650 --> 00:06:09.300
So let's give ourselves an example.

82
00:06:09.810 --> 00:06:10.620
Let's imagine.

83
00:06:10.620 --> 00:06:20.550
So type this into the request you are imagine we want to send a request to HTP Colon Eglash local host

84
00:06:21.090 --> 00:06:26.730
colon three thousand slash API slash log in.

85
00:06:27.360 --> 00:06:27.600
Right.

86
00:06:27.610 --> 00:06:29.580
Remember, we had a few goals for this lesson.

87
00:06:29.730 --> 00:06:35.940
We want to let our users log in programmatically and we also wanted them to create a post and be able

88
00:06:35.940 --> 00:06:37.590
to delete one of their posts.

89
00:06:38.250 --> 00:06:40.520
So we're going to start with the login ability.

90
00:06:41.130 --> 00:06:49.740
So imagine they would send a post request to change this to a post request to this you URL.

91
00:06:50.310 --> 00:06:55.080
And in order to log in, you would also need to send along your username and password.

92
00:06:55.470 --> 00:07:01.860
So to do that, let's just send a bit of JSON data along with this request to do that, I want you to

93
00:07:01.860 --> 00:07:04.740
click on the headers tab down here.

94
00:07:06.300 --> 00:07:12.080
So once you click on headers, we just want to click into this area under key and for the key value

95
00:07:12.090 --> 00:07:23.280
type in uppercase C for content dash type and then for its matching value type in lowercase application

96
00:07:23.520 --> 00:07:25.260
slash JSON.

97
00:07:26.010 --> 00:07:28.950
OK, now click on to the body tab.

98
00:07:29.160 --> 00:07:31.930
And this is where we include the actual JSON data.

99
00:07:32.190 --> 00:07:36.030
Go ahead and click on the raw option here and now.

100
00:07:36.030 --> 00:07:37.770
This is where we can type in JSON.

101
00:07:37.770 --> 00:07:44.760
So an object, so curly brackets and then in between those, let's give it a property in JSON.

102
00:07:44.760 --> 00:07:48.000
You actually need to wrap your property names in quotes.

103
00:07:48.000 --> 00:07:48.960
So double quotes.

104
00:07:49.440 --> 00:07:56.070
The first property would be user name after the quotes include a colon and then quotes with your username.

105
00:07:56.070 --> 00:07:57.480
So for me, that's Brad.

106
00:07:58.080 --> 00:07:58.320
Right.

107
00:07:58.320 --> 00:08:02.790
So that's just the username that you've been using to log into our app for the entire course.

108
00:08:03.600 --> 00:08:10.560
And then we would say comma and then give it another property in quotes, let's say password, colon

109
00:08:11.190 --> 00:08:17.820
and then quotes and I'm going to give it a wrong password on purpose just so we can really test out

110
00:08:17.820 --> 00:08:21.630
the server to make sure that it's rejecting invalid login attempts.

111
00:08:22.230 --> 00:08:25.110
So you can just include anything for the password value.

112
00:08:25.800 --> 00:08:32.580
OK, and now if we actually send this request to our server, obviously it's not going to work because

113
00:08:32.580 --> 00:08:37.800
we never set up a route for slash API slash login.

114
00:08:38.370 --> 00:08:40.320
So let's go do that right now.

115
00:08:40.680 --> 00:08:47.520
So jump into your text editor and we just want to tell our Express app what it should do for that route.

116
00:08:47.550 --> 00:08:47.860
Right.

117
00:08:47.880 --> 00:08:50.100
Slash API slash log in.

118
00:08:50.640 --> 00:08:56.550
Now, believe it or not, instead of jumping into our rutabagas file, I actually want us to go into

119
00:08:56.550 --> 00:08:58.890
our app JS file.

120
00:09:00.270 --> 00:09:06.840
And what we're going to do is create a separate router just for slash API roots.

121
00:09:07.410 --> 00:09:14.880
And we would not need any of this code to be applied to those API raft's because the API routes are

122
00:09:14.880 --> 00:09:22.620
not going to need anything to do with sessions or cookies or HTML templates or SRF tokens.

123
00:09:22.860 --> 00:09:29.310
We don't need to worry about any of that for our API roots, so we want our API roots to be lean, mean,

124
00:09:29.310 --> 00:09:30.720
clean and lightweight.

125
00:09:31.380 --> 00:09:35.370
So let's do this up at the top of this file right below.

126
00:09:35.370 --> 00:09:41.640
When you say CONSED app equals express, if you have a couple of other packages that you're including

127
00:09:41.640 --> 00:09:42.990
after that, that's OK.

128
00:09:43.290 --> 00:09:49.050
But we just want to make sure that we add this new line before any of our code that adds features to

129
00:09:49.050 --> 00:09:49.770
our roots.

130
00:09:50.400 --> 00:09:58.140
Essentially, any time you see app use, that's going to run those functions for every route or I should

131
00:09:58.140 --> 00:10:01.170
say for every route that's listed below.

132
00:10:01.510 --> 00:10:07.930
Those aptness lines, so what we want to do is up at the very top, just after we've included all of

133
00:10:07.930 --> 00:10:16.240
our required packages, let's say this app use within those parentheses for the first argument, let's

134
00:10:16.240 --> 00:10:23.470
say a string of text that is slash API, OK, and then comma for the second argument.

135
00:10:23.740 --> 00:10:25.530
This file doesn't exist yet.

136
00:10:25.550 --> 00:10:27.250
We can create it in just a moment.

137
00:10:27.550 --> 00:10:35.460
Let's just require in a file so required within those parentheses quotes and then dot forward slash

138
00:10:35.470 --> 00:10:41.740
to look in the current directory and we're going to name our new file, Rueter Dash API.

139
00:10:42.520 --> 00:10:49.480
OK, now since we set up the router towards the top of the file, all of the code that says app use,

140
00:10:49.930 --> 00:10:52.570
none of these will be applied to these routes.

141
00:10:53.590 --> 00:10:57.250
So they should be very lightweight, very fast and responsive.

142
00:10:57.730 --> 00:11:02.700
However, we do need to go move or cut and paste two features to live above this line.

143
00:11:03.370 --> 00:11:07.600
So for me, it's a round line, number 43 and 44.

144
00:11:08.230 --> 00:11:14.560
It'll likely be a bit different for you, but you need to go find the lines that are app use, express.

145
00:11:14.560 --> 00:11:19.210
You are all encoded and app use express JSON.

146
00:11:19.870 --> 00:11:23.680
If you need to pause the video while you go find these two lines of code, that's OK.

147
00:11:23.680 --> 00:11:27.280
But once you find them, go ahead and cut those into your clipboard.

148
00:11:28.690 --> 00:11:36.250
OK, so we got rid of them down here and then up at the top, just right above our new app use API line

149
00:11:36.760 --> 00:11:37.510
right above that.

150
00:11:37.510 --> 00:11:38.920
Just paste in your clipboard.

151
00:11:39.430 --> 00:11:39.850
Cool.

152
00:11:39.880 --> 00:11:44.980
This way, Express will still be able to read incoming body request data and JSON data.

153
00:11:45.610 --> 00:11:49.080
But really, that's all we need to apply to our API roots.

154
00:11:49.450 --> 00:11:55.770
So at this point, let's go ahead and save this file and now let's go create our new router API file.

155
00:11:56.620 --> 00:12:00.040
So within the root of your project, just create a new file.

156
00:12:00.970 --> 00:12:11.770
Let's name it router dash API JS within this brand new empty file, let's say CONSED and you could make

157
00:12:11.770 --> 00:12:18.670
up any variable name you want, but let's call it API router equals and then we would just require in

158
00:12:18.670 --> 00:12:20.260
the official express router.

159
00:12:20.260 --> 00:12:23.710
So require the official express package.

160
00:12:24.160 --> 00:12:31.090
And then at the very end of that line after the parentheses say dot uppercase router, OK, on a new

161
00:12:31.090 --> 00:12:34.300
line we would want to export this right.

162
00:12:34.300 --> 00:12:37.960
So that it's available from our main file that's importing this file.

163
00:12:38.770 --> 00:12:47.470
So down at the very bottom of this file, say module dot exports equals the constant variable name we

164
00:12:47.470 --> 00:12:48.160
just chose.

165
00:12:48.160 --> 00:12:51.580
So API router cool.

166
00:12:51.760 --> 00:12:55.210
Now in between these two lines, we are free to add routes.

167
00:12:55.900 --> 00:13:01.430
So for example, we would just say API router and then if you wanted a git request, it would be get

168
00:13:01.450 --> 00:13:03.640
in this case, we want a post request.

169
00:13:05.020 --> 00:13:11.410
The first argument is the you the route that you want to listen for and this would be slash login.

170
00:13:12.190 --> 00:13:16.990
We actually do not need to include the beginning slash API slash login.

171
00:13:17.620 --> 00:13:25.810
We don't need to include that because back in Applegate's we said use this router for the API routes.

172
00:13:26.620 --> 00:13:32.500
So the API is just sort of assumed or pretended to any of our routes within this file.

173
00:13:32.860 --> 00:13:39.700
So back in our new router file, we don't need to include the beginning slash API, so just log in,

174
00:13:40.300 --> 00:13:40.510
OK?

175
00:13:40.520 --> 00:13:45.970
And then after this first arguments or after those quotes, let's say comma and include a function that

176
00:13:45.970 --> 00:13:51.430
we want to run for this route before we worry about hooking up our user controller, let's just include

177
00:13:51.430 --> 00:13:52.480
an anonymous function.

178
00:13:52.480 --> 00:13:59.860
Right here is a function parentheses curly brackets within these function parentheses include request,

179
00:14:00.250 --> 00:14:01.360
comma response.

180
00:14:01.960 --> 00:14:05.650
And then in the body of this function, let's just send back a bit of JSON.

181
00:14:05.650 --> 00:14:09.640
So response JSON quotes.

182
00:14:09.640 --> 00:14:14.920
Let's just say thank you for trying to log in from our API.

183
00:14:16.030 --> 00:14:18.010
OK, let's go ahead and save this.

184
00:14:18.220 --> 00:14:25.630
Also, make sure you've saved app J.S. And now if we jump back into Postman right where we were going

185
00:14:25.630 --> 00:14:31.360
to send a post request to localhost, call in three thousand slash API slash login.

186
00:14:31.870 --> 00:14:35.020
Well go ahead and click the send button to send that request.

187
00:14:35.620 --> 00:14:39.430
Well now towards the bottom of your screen, you might need to scroll down if your screen is small,

188
00:14:39.580 --> 00:14:41.680
but here we see the response from the server.

189
00:14:42.370 --> 00:14:47.680
But this response is not very interesting because it's going to be this exact response whether you typed

190
00:14:47.680 --> 00:14:50.550
in a correct username and password or not.

191
00:14:51.040 --> 00:14:58.480
So at this point, let's jump back into our new router file and let's go ahead and import in our controller

192
00:14:58.480 --> 00:15:01.000
files and then work on plugging in.

193
00:15:01.080 --> 00:15:05.160
Logic to see if the username and password were actually correct or not.

194
00:15:05.670 --> 00:15:11.670
Now, when it comes to importing our controller files here, we can save a ton of typing by just jumping

195
00:15:11.670 --> 00:15:14.240
into our original main router file.

196
00:15:14.610 --> 00:15:21.240
So jump into router rutabagas and up towards the top here we see the three lines that require in our

197
00:15:21.240 --> 00:15:22.620
three different controllers.

198
00:15:23.310 --> 00:15:26.640
So I would just select those three controller lines, copy that.

199
00:15:27.270 --> 00:15:33.780
And then back in our new router file up at the top right after our API router line, just paste in your

200
00:15:33.780 --> 00:15:34.350
clipboard.

201
00:15:35.310 --> 00:15:35.640
Cool.

202
00:15:35.670 --> 00:15:37.230
Now let's update this route.

203
00:15:37.240 --> 00:15:39.540
Let's get rid of this anonymous function.

204
00:15:40.230 --> 00:15:42.600
So essentially get rid of the second argument.

205
00:15:42.990 --> 00:15:43.210
Right.

206
00:15:43.230 --> 00:15:47.100
So now we just have the route and then a comma and then let's do this.

207
00:15:47.340 --> 00:15:50.520
Let's look within our user controller.

208
00:15:51.060 --> 00:15:56.640
And this function doesn't exist yet, but let's call API uppercase.

209
00:15:56.640 --> 00:15:57.330
Log in.

210
00:15:58.080 --> 00:16:00.150
OK, let's go ahead and save this.

211
00:16:00.360 --> 00:16:05.260
And now we better go into our user controller file and create a function with this matching name.

212
00:16:05.970 --> 00:16:13.230
So within our controllers folder, jump into user controller and in order to save a ton of typing,

213
00:16:13.410 --> 00:16:17.240
let's actually find our current function that is named login.

214
00:16:17.940 --> 00:16:20.490
So for me, it's around line number fifty two.

215
00:16:20.730 --> 00:16:24.330
It begins with exports, login equals.

216
00:16:24.900 --> 00:16:30.870
And what I would do is just select this function, copy and paste it and then rename the new copy.

217
00:16:31.260 --> 00:16:37.890
So select the exports that log in function, copy it and then right below it, just paste it in and

218
00:16:37.890 --> 00:16:44.360
on this new duplicate copy, change the name to API and then uppercase log in.

219
00:16:45.330 --> 00:16:51.390
OK, now this code is already going to talk to the user model and it already has the logic to determine

220
00:16:51.390 --> 00:16:53.730
if the username and password are correct or not.

221
00:16:54.240 --> 00:16:59.970
So really, all we need to do is just decouple this from the web browser environment so we don't need

222
00:16:59.970 --> 00:17:01.590
to worry about sessions.

223
00:17:01.920 --> 00:17:07.500
We don't need to worry about flash messages, and we don't need to worry about redirecting anywhere.

224
00:17:07.900 --> 00:17:08.700
So let's do this.

225
00:17:08.700 --> 00:17:12.960
If the login is successful, the then function will run.

226
00:17:13.630 --> 00:17:15.370
So let's just hollow out that function.

227
00:17:15.390 --> 00:17:21.410
So I would begin deleting from request session, not user and then also delete this request session

228
00:17:21.420 --> 00:17:22.290
to save.

229
00:17:22.770 --> 00:17:24.960
So I would delete these four lines of code.

230
00:17:25.800 --> 00:17:27.930
And for now, let's just send back a response.

231
00:17:27.930 --> 00:17:35.400
So response JSON and let's just say just as a quick test and a bit of a joke, we can say good job,

232
00:17:35.650 --> 00:17:38.040
that is a real username and password.

233
00:17:39.390 --> 00:17:43.470
And then if the username and password are not correct, then the catch function will run.

234
00:17:43.470 --> 00:17:45.540
So again, just hollow out that function.

235
00:17:45.780 --> 00:17:49.830
So delete these four lines and let's say response JSON.

236
00:17:50.580 --> 00:17:53.910
Sorry, your values are not correct.

237
00:17:54.770 --> 00:17:59.730
OK, let's go ahead and save this and now jump back into Postman and test it out.

238
00:18:00.750 --> 00:18:06.210
So if I scroll back up, remember I'm purposely sending over an incorrect password.

239
00:18:06.570 --> 00:18:12.390
So if I go ahead and send this request once again, click the send button, scroll down to see the servers

240
00:18:12.390 --> 00:18:12.930
response.

241
00:18:12.930 --> 00:18:21.150
Sorry, your values are not correct, but if I go back up to the postman body area and change the password

242
00:18:21.150 --> 00:18:27.330
value to the super secure value of Quartey Quartey and then if I click send.

243
00:18:28.920 --> 00:18:30.550
Now I see the response from the server.

244
00:18:30.750 --> 00:18:33.870
Good job, that is a real username and password.

245
00:18:34.410 --> 00:18:38.590
But let's be honest, this type of response is not very interesting either.

246
00:18:39.060 --> 00:18:44.690
However, this video was mainly about laying out the groundwork or skeleton for our API.

247
00:18:45.090 --> 00:18:51.300
So at this point, we've set up a brand new router designed for our API roots and we are successfully

248
00:18:51.300 --> 00:18:57.270
leveraging our controllers that are talking to our models, looking up data in the database and performing

249
00:18:57.270 --> 00:18:58.080
our logic.

250
00:18:58.500 --> 00:19:04.290
All of that to say that I know this sort of message is not very exciting, but we are perfectly set

251
00:19:04.290 --> 00:19:08.010
up to make a ton of progress in the next video.

252
00:19:08.490 --> 00:19:14.730
So assuming a user does type in a matching username and password, what would we actually want to send

253
00:19:14.730 --> 00:19:19.020
them back as a response that will allow them to do meaningful things?

254
00:19:19.560 --> 00:19:19.720
Right.

255
00:19:19.820 --> 00:19:25.330
How can we authenticate them so that they could create a post or delete one of their existing posts?

256
00:19:25.890 --> 00:19:32.280
Well, in our next video, we are going to learn about a technology named JSON Web tokens.

257
00:19:32.730 --> 00:19:36.760
And I think you're going to be legitimately surprised at how powerful they are.

258
00:19:37.260 --> 00:19:41.580
So let's keep things rolling and I will see you in the next video.
