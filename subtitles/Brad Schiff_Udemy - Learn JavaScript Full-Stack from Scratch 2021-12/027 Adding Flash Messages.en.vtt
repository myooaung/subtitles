WEBVTT
1
00:00:01.790 --> 00:00:02.750
Hello, everyone.

2
00:00:03.050 --> 00:00:08.630
In this lesson, we are going to learn how to set up flash messages.

3
00:00:09.020 --> 00:00:12.940
If you have no idea what I mean by flash messages, that's OK.

4
00:00:13.250 --> 00:00:14.150
Let me explain.

5
00:00:14.450 --> 00:00:21.320
So in our previous lesson, we set things up so that after a successful login, the user no longer sees

6
00:00:21.320 --> 00:00:26.840
that weird intermediate congrats screen and they are instead just redirected to this page.

7
00:00:26.840 --> 00:00:28.230
But now they are logged in.

8
00:00:28.700 --> 00:00:36.050
Well, our focus in this lesson is if someone performs a failed login attempt, so, for example, like

9
00:00:36.050 --> 00:00:44.300
this, we no longer want to show them this weird, awkward or intermediate you URL and screen instead.

10
00:00:44.300 --> 00:00:50.810
We would just want to redirect them back to this same you and homepage and maybe show a little red error

11
00:00:50.810 --> 00:00:58.550
message box here that says invalid username and password showing temporary messages like this is commonly

12
00:00:58.550 --> 00:01:01.150
referred to as a flash message.

13
00:01:01.520 --> 00:01:04.430
So let me show you how we can implement this.

14
00:01:04.790 --> 00:01:06.650
So let's jump into our text editor.

15
00:01:07.190 --> 00:01:09.770
Our first step is to install a new package.

16
00:01:10.100 --> 00:01:14.090
So down in the command line, if you're a server is running press control, see to stop it.

17
00:01:14.510 --> 00:01:19.010
And let's run this command NPM install.

18
00:01:19.340 --> 00:01:28.010
And the name of the package that we're interested in is connect, dash, flash, npm install, connect,

19
00:01:28.010 --> 00:01:28.820
dash, flash.

20
00:01:28.820 --> 00:01:29.450
Go ahead and press.

21
00:01:29.450 --> 00:01:29.900
Enter.

22
00:01:31.130 --> 00:01:35.180
Now that we've installed that package, let's tell our server to begin running again.

23
00:01:35.180 --> 00:01:37.640
So npm run watch.

24
00:01:38.990 --> 00:01:41.880
All right, and now let's go leverage that package.

25
00:01:42.350 --> 00:01:46.250
So let's jump in to our app James File.

26
00:01:47.210 --> 00:01:53.130
So Applegate's is the file where we enable new features within our express application.

27
00:01:53.420 --> 00:02:00.320
So first, let's require in that new flash package, maybe right below this const Mongo store line at

28
00:02:00.320 --> 00:02:00.770
the top.

29
00:02:00.770 --> 00:02:07.850
Let's add a new line and let's say CONSED, let's name it Flash and then set that to equal and then

30
00:02:07.850 --> 00:02:08.600
require.

31
00:02:08.870 --> 00:02:13.340
And the package name was Connect Dasch Flash.

32
00:02:13.580 --> 00:02:16.130
OK, now we can leverage this.

33
00:02:16.400 --> 00:02:25.460
So maybe down below this line where we begin using sessions right below this, let's say app dock use

34
00:02:25.820 --> 00:02:29.750
and within the use parentheses, let's call that flash package.

35
00:02:29.750 --> 00:02:32.120
So flash parentheses.

36
00:02:32.810 --> 00:02:33.210
Cool.

37
00:02:33.230 --> 00:02:36.890
So at this point we've added the flash feature to our application.

38
00:02:37.100 --> 00:02:38.210
Now let's go use it.

39
00:02:38.630 --> 00:02:43.770
So let's save this file and then let's jump into our user controller file.

40
00:02:44.060 --> 00:02:51.980
So within our controllers folder, open up user controller J.S. And we are interested in the login function

41
00:02:52.460 --> 00:02:56.790
to be more specific if someone performs a failed login attempt.

42
00:02:57.230 --> 00:03:05.030
So this is a promise and if a promise rejects or if it's not successful, then the catch will take care

43
00:03:05.030 --> 00:03:06.020
of that situation.

44
00:03:06.410 --> 00:03:12.980
So instead of just responding with that weird intermediate screen where it just says invalid username,

45
00:03:13.400 --> 00:03:17.640
instead of that, we just want to redirect the user back to the home page.

46
00:03:18.110 --> 00:03:25.550
So within our function for catch, let's get rid of this response dot send line and instead say response

47
00:03:25.550 --> 00:03:28.580
dot redirect for its value.

48
00:03:28.580 --> 00:03:34.850
Just include quotes in a slash to represent the home page or base you are at this point we run into

49
00:03:34.850 --> 00:03:39.340
an interesting situation and this is where flash messages can help us.

50
00:03:39.800 --> 00:03:45.440
So if we perform a redirect, that's going to be considered a new separate request.

51
00:03:45.830 --> 00:03:51.080
Since we're redirecting to the home page, our router is going to call our home function.

52
00:03:51.500 --> 00:03:51.730
Right.

53
00:03:51.740 --> 00:03:56.120
So down at the very bottom of this file, remember, we have a function for home.

54
00:03:56.660 --> 00:04:02.630
And since there's not going to be a user object within the session because the login just failed, our

55
00:04:02.630 --> 00:04:03.910
else block would run.

56
00:04:04.250 --> 00:04:06.500
So we are rendering the guest template.

57
00:04:06.950 --> 00:04:13.760
Now the question becomes, how can we render this guest template so that it includes a little red warning

58
00:04:13.760 --> 00:04:17.960
box or box that says invalid username and password?

59
00:04:18.410 --> 00:04:23.960
Now, we did learn in an earlier lesson, if we look at this line of code that when you call response

60
00:04:23.960 --> 00:04:30.780
dot render, you can provide a second argument and that's how you can pass data into a template.

61
00:04:31.250 --> 00:04:39.590
However, we need to remember the stateless nature of HTTP requests, meaning when this request runs,

62
00:04:39.860 --> 00:04:43.700
our server has no memory, a login just failed.

63
00:04:44.090 --> 00:04:50.570
And it's not like we always want to show a message that says invalid username and password whenever

64
00:04:50.570 --> 00:04:52.530
we render the guest homepage.

65
00:04:52.940 --> 00:05:00.470
So as we've learned when we need some sort of persistent memory of a previous request, we can leverage

66
00:05:00.470 --> 00:05:01.460
sessions.

67
00:05:01.880 --> 00:05:02.630
So check this out.

68
00:05:02.630 --> 00:05:10.520
Let's go back up to our login function and within our sketch area, right above this response dot redirect

69
00:05:10.520 --> 00:05:10.880
line.

70
00:05:10.880 --> 00:05:12.200
Let's add a new line.

71
00:05:12.500 --> 00:05:15.800
And this is where we can leverage that flash package.

72
00:05:16.160 --> 00:05:24.470
The flash package is going to add a flash object onto the request object so we can say request dot flash.

73
00:05:24.710 --> 00:05:27.770
And now within these parentheses, we give it to arguments.

74
00:05:28.100 --> 00:05:34.430
The first argument is the name of a collection or an array of messages that we want to start building

75
00:05:34.760 --> 00:05:35.950
or adding on to.

76
00:05:36.200 --> 00:05:39.170
So we could call it anything, but let's call it errors.

77
00:05:39.740 --> 00:05:42.740
So quotes errors and then comma.

78
00:05:42.740 --> 00:05:48.650
And for the second argument, this is where you would include the actual message that you want to add

79
00:05:48.650 --> 00:05:50.340
on to this array or collection.

80
00:05:50.750 --> 00:05:56.690
So this could be a string of text that says, sorry, there was a problem.

81
00:05:57.260 --> 00:06:04.100
But in this case, instead of directly typing out a string here, let's instead just say E, right.

82
00:06:04.100 --> 00:06:07.430
Because that's the value that our promise is going to reject with.

83
00:06:07.580 --> 00:06:09.920
And so that will get passed into this function.

84
00:06:10.400 --> 00:06:15.740
So essentially, this is just a string of text that says invalid username, password.

85
00:06:16.190 --> 00:06:23.600
And really all this flash package is going to do is help us add and remove data from our session.

86
00:06:23.960 --> 00:06:25.820
The flash package is super simple.

87
00:06:25.820 --> 00:06:28.700
It's actually only eighty two lines of code.

88
00:06:29.090 --> 00:06:32.420
So we don't really need the flash package.

89
00:06:32.900 --> 00:06:38.480
We could write similar code ourselves, but as we'll see in a few minutes, this package does make our

90
00:06:38.480 --> 00:06:39.670
lives a bit simpler.

91
00:06:39.980 --> 00:06:44.990
So all this line of code here is really doing and you do not need to type this out.

92
00:06:45.020 --> 00:06:46.640
This is just a quick explanation.

93
00:06:47.030 --> 00:06:52.370
But this line is really just going to result in the following, so it's going to look in our sessions

94
00:06:52.370 --> 00:06:58.870
or request session now in a previous lesson, we added a property or object to the session named user.

95
00:06:59.390 --> 00:07:04.130
In this case, it's going to add a property or object named Flash.

96
00:07:04.700 --> 00:07:10.820
And then inside that object, there's going to be a property named errors because that's what we named

97
00:07:10.820 --> 00:07:11.720
our collection.

98
00:07:12.020 --> 00:07:15.970
And this is going to be an array so equals array.

99
00:07:16.370 --> 00:07:21.050
And in this case, we've only pushed one item onto the array, which is that message that's going to

100
00:07:21.050 --> 00:07:23.820
say invalid usernames, password.

101
00:07:24.290 --> 00:07:25.360
Let me get rid of this.

102
00:07:25.610 --> 00:07:31.220
I only type that out to let you know that the flash package is not doing anything amazing.

103
00:07:31.220 --> 00:07:33.140
It's not performing rocket science.

104
00:07:33.470 --> 00:07:36.780
But as we will see shortly, it does simplify things a bit.

105
00:07:37.220 --> 00:07:37.730
All right.

106
00:07:37.730 --> 00:07:43.430
So now that we know that this line of code is going to modify our session data and because we know that's

107
00:07:43.430 --> 00:07:48.920
going to require a trip to the database, which can take some time, we want to be sure to not perform

108
00:07:48.920 --> 00:07:53.510
the redirect until that database action has actually completed.

109
00:07:53.780 --> 00:07:59.900
Our session package will automatically saved the database any time we call response thoughts and or

110
00:07:59.900 --> 00:08:01.280
response redirect.

111
00:08:01.700 --> 00:08:07.040
But there's no guarantee that it would finish in time before the redirect.

112
00:08:07.340 --> 00:08:14.060
So what we can do right below this flash line, let's get rid of this response dot redirect line and

113
00:08:14.060 --> 00:08:22.970
instead let's manually tell our session to save the request session, dot save and then we can provide

114
00:08:22.970 --> 00:08:29.170
it a callback function that it will call once it's actually updated that session data in the database.

115
00:08:29.480 --> 00:08:34.580
So within these parentheses function and now we can redirect.

116
00:08:34.580 --> 00:08:37.190
So response dot redirect.

117
00:08:37.700 --> 00:08:40.580
Let's give it a value of just forward slash for the home page.

118
00:08:40.810 --> 00:08:47.240
OK, and now before we worry about actually displaying an error message on the homepage, let's first

119
00:08:47.450 --> 00:08:51.320
visually see the new session data in our database.

120
00:08:51.500 --> 00:08:57.170
I'm a big fan of visualizing data, so let's go ahead and save this and test it out.

121
00:08:57.200 --> 00:09:01.940
So back in the browser, let's perform a failed log in on purpose.

122
00:09:02.570 --> 00:09:03.980
So just random values.

123
00:09:06.430 --> 00:09:08.990
OK, and we see that it redirected us to the home page.

124
00:09:09.300 --> 00:09:14.110
Now, obviously, there's no error message here because we didn't actually add that yet.

125
00:09:14.380 --> 00:09:17.530
But right now, let's go look at our database.

126
00:09:17.710 --> 00:09:20.220
And I think this will make things crystal clear.

127
00:09:20.680 --> 00:09:28.060
So in Mongo DB Atlas, under collections, under our complex app database, let's look in our sessions

128
00:09:28.060 --> 00:09:28.780
collection.

129
00:09:29.380 --> 00:09:34.120
If you already had this screen open, you might need to click the find button to pull in the latest

130
00:09:34.120 --> 00:09:34.550
data.

131
00:09:34.960 --> 00:09:41.770
OK, but we see one document representing one session and if I click on this session value to actually

132
00:09:41.770 --> 00:09:46.020
expand it and view it, it's got information about the cookie that should be created.

133
00:09:46.030 --> 00:09:51.190
But if I scroll over to the right, you can see after the cookie property, there's a property named

134
00:09:51.190 --> 00:09:54.010
Flash and it's an object.

135
00:09:54.010 --> 00:09:58.660
And you can see it has a property named Errors, which is just an array right within see the square

136
00:09:58.660 --> 00:09:59.350
brackets.

137
00:09:59.600 --> 00:10:03.460
And there's that failed log in, reject message from our login promise promis.

138
00:10:03.730 --> 00:10:04.120
Cool.

139
00:10:04.130 --> 00:10:11.470
So just like before we added a user object onto our session, well now we're adding a flash object to

140
00:10:11.470 --> 00:10:14.890
store any potential messages we would want to show to the user.

141
00:10:15.190 --> 00:10:20.470
And the idea here is that because it's in a session, it's persistent, it's going to stick around for

142
00:10:20.470 --> 00:10:20.920
a while.

143
00:10:21.160 --> 00:10:24.040
So it will be available even after a redirect.

144
00:10:24.520 --> 00:10:26.070
Let me show you what I'm getting at here.

145
00:10:26.080 --> 00:10:29.650
Let's jump back into our text editor within our user controller.

146
00:10:29.660 --> 00:10:31.090
Let's scroll down to the bottom.

147
00:10:31.780 --> 00:10:33.930
We're interested in our home function.

148
00:10:34.480 --> 00:10:39.580
So if a user is not logged in, it's going to render our home guest template.

149
00:10:40.000 --> 00:10:42.940
Well, let's give this render method a second argument.

150
00:10:43.480 --> 00:10:44.320
So comma.

151
00:10:44.470 --> 00:10:47.460
Remember, this is how we can pass data into a template.

152
00:10:47.890 --> 00:10:55.150
So you give it an object and imagine we want it to have a property named Errors Colon and then for its

153
00:10:55.150 --> 00:10:59.730
value, we would just want that errors away from our session data.

154
00:11:00.130 --> 00:11:07.240
We could access that manually by typing request session, dot, flash, dot errors.

155
00:11:07.630 --> 00:11:11.230
But and this is a big reason why I use the flash package.

156
00:11:11.530 --> 00:11:17.800
We don't only want to access that data, we also want to delete it from the session as soon as we've

157
00:11:17.800 --> 00:11:18.550
accessed it.

158
00:11:18.970 --> 00:11:19.270
Right.

159
00:11:19.270 --> 00:11:22.710
Because we only want to show this message to the user once.

160
00:11:22.990 --> 00:11:28.690
So with the flash package, as soon as you access it, it's also going to delete it for you from the

161
00:11:28.690 --> 00:11:29.180
session.

162
00:11:29.590 --> 00:11:31.300
So this does simplify things a bit.

163
00:11:31.300 --> 00:11:38.590
We can just say request flash and give it the name of the collection or array of messages that we are

164
00:11:38.590 --> 00:11:39.230
interested in.

165
00:11:39.250 --> 00:11:47.170
So errors, let's go ahead and save this file and now let's go leverage this data from within our home

166
00:11:47.170 --> 00:11:48.280
guest template.

167
00:11:48.730 --> 00:11:54.400
So within our views folder, let's open up home dash guest SJS.

168
00:11:55.000 --> 00:11:58.930
Let's scroll down to about line number thirty four here.

169
00:11:58.930 --> 00:12:05.680
We should see an opening div with a class of container and p MD five right below that.

170
00:12:05.920 --> 00:12:12.940
That's where we can include that red rectangle error message that says invalid usernames password.

171
00:12:13.330 --> 00:12:20.830
So within an Ejaz template to do something dynamic, we can just say less than percentage and then to

172
00:12:20.830 --> 00:12:25.390
close that tag, it's percentage greater than OK within these tags.

173
00:12:25.390 --> 00:12:30.190
Let's start working with our errors property and it's going to be an array.

174
00:12:30.490 --> 00:12:34.360
Even if there are no errors, it will still be an empty array.

175
00:12:34.840 --> 00:12:40.390
Now, in JavaScript, every array has a method named for each.

176
00:12:40.990 --> 00:12:43.510
Within these parentheses we can provide a function.

177
00:12:43.510 --> 00:12:50.110
So function parentheses, curly brackets and JavaScript will call this function once for each item in

178
00:12:50.110 --> 00:12:52.060
the array within the parentheses.

179
00:12:52.060 --> 00:12:56.410
For our function, let's include a parameter, let's call it message.

180
00:12:56.890 --> 00:13:02.230
OK, and then on this line we would just want to output or print a bit of HTML with that message.

181
00:13:02.410 --> 00:13:09.520
So at the end of this line, let's drop out of dynamic JavaScript mode so percent greater than again

182
00:13:09.520 --> 00:13:14.980
this highlighted part is in Ejaz feature, not a native JavaScript feature.

183
00:13:15.220 --> 00:13:21.010
OK, but then at the beginning of this line we would want to have another opening tag to do something.

184
00:13:21.010 --> 00:13:23.620
Dynamics of less than percentage sign.

185
00:13:24.070 --> 00:13:27.310
OK, now in the middle, let's just output a bit of HTML.

186
00:13:27.640 --> 00:13:29.050
Let's output a div.

187
00:13:30.280 --> 00:13:37.630
So opening and closing div tags and let's give it a few classes of class equals, let's say alert space.

188
00:13:37.630 --> 00:13:39.820
Let's also say alert dash danger.

189
00:13:40.510 --> 00:13:42.880
Let's also say text dash center.

190
00:13:43.270 --> 00:13:47.830
OK, and then in between the div tags, what text do we actually want to include.

191
00:13:48.310 --> 00:13:54.220
Well we want the value of the current item in the array which we can access from this message parameter.

192
00:13:54.670 --> 00:14:01.000
So less than percentage and then percentage greater than in between that we can just say message and

193
00:14:01.000 --> 00:14:05.830
because we would actually want to print or output this instead of just executing this.

194
00:14:06.430 --> 00:14:13.320
We do want to include an equal sign right here, cool, let's go ahead and save this and test it out

195
00:14:13.870 --> 00:14:14.970
back in the browser.

196
00:14:15.070 --> 00:14:19.560
If I refresh without even trying to log in again, I should see that message.

197
00:14:20.520 --> 00:14:25.900
This is just the one time calk that you'll only run into as you're actually in the middle of developing

198
00:14:25.900 --> 00:14:26.500
the feature.

199
00:14:26.860 --> 00:14:29.390
If we refresh again, it should be gone.

200
00:14:30.010 --> 00:14:36.760
The only reason we saw that without actually failing at logging in is because we already had that save

201
00:14:36.760 --> 00:14:38.890
into our session data, remember?

202
00:14:38.890 --> 00:14:40.150
And we tested that out.

203
00:14:40.150 --> 00:14:41.920
We actually saw it in the database.

204
00:14:42.250 --> 00:14:47.830
But the code that deletes it from the session once you've retrieved it, we didn't set that in place

205
00:14:47.830 --> 00:14:51.730
until very recently, but now it's all set up and good to go.

206
00:14:52.060 --> 00:14:56.830
So a new visitor can come to the site if they perform a failed log in.

207
00:14:59.510 --> 00:15:04.190
Cool, it takes him right back to the home page, they see this error message, but if they ever came

208
00:15:04.190 --> 00:15:09.670
back to our website again or if they refreshed or sent a new request, that message goes away.

209
00:15:10.130 --> 00:15:10.840
Perfect.

210
00:15:11.300 --> 00:15:16.670
And just to visually confirm that that session data is now gone, if you go back into Atlas and click

211
00:15:16.670 --> 00:15:19.310
find to reload the latest data.

212
00:15:20.560 --> 00:15:24.680
And then dig into this, you can see now the flash object is empty.

213
00:15:25.210 --> 00:15:32.440
So back in our user controller, the idea is that as soon as we use the flash package to retrieve a

214
00:15:32.440 --> 00:15:38.650
collection instead of updating a collection, it's going to know that we are then ready to remove that

215
00:15:38.650 --> 00:15:39.670
from the session.

216
00:15:40.060 --> 00:15:44.960
And this creates that perfect scenario where the user will see the message once and that's it.

217
00:15:45.580 --> 00:15:46.990
Now, let's change gears.

218
00:15:47.320 --> 00:15:54.750
So at this point, both failed login attempts and successful login attempts are handled smoothly.

219
00:15:55.180 --> 00:16:01.840
Now that we've learned about sessions and flash messages, let's go ahead and improve our user registration

220
00:16:01.840 --> 00:16:02.660
experience.

221
00:16:03.100 --> 00:16:08.950
So first, if there are validation errors with their form data when they submit this form instead of

222
00:16:08.950 --> 00:16:15.430
this awkward intermediate screen with these plain text errors, I think it would make more sense to

223
00:16:15.430 --> 00:16:21.520
show those validation errors in small red rectangles right above the registration form.

224
00:16:22.060 --> 00:16:25.560
Well, that's exactly what we're going to set up in our next lesson.

225
00:16:25.930 --> 00:16:28.440
So let's keep things rolling and I'll see you then.
