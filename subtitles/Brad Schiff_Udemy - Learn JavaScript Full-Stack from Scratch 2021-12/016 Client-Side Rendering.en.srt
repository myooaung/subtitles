1
00:00:02,060 --> 00:00:03,030
Hello, everyone.

2
00:00:03,200 --> 00:00:09,830
In this lesson, we are going to learn about client side rendering, so first of all, what in the world

3
00:00:09,830 --> 00:00:11,690
is client side rendering?

4
00:00:12,050 --> 00:00:18,320
Well, it ties in to the duplicated code from our previous lesson that I promised we would solve in

5
00:00:18,320 --> 00:00:19,060
this lesson.

6
00:00:19,490 --> 00:00:28,160
So remember, the HTML template for a row item or list item was originally only in our server JS file,

7
00:00:28,490 --> 00:00:34,390
but then we improved our create feature to use asynchronous or on the fly requests.

8
00:00:34,790 --> 00:00:41,480
So we needed a way to visually add a new list item to the user interface without a page reload.

9
00:00:41,780 --> 00:00:48,490
And that required us to also include that HTML template in our front end or browser JS file.

10
00:00:48,890 --> 00:00:55,790
But in a perfect world, we usually want to avoid duplicating code like this because then in the future,

11
00:00:55,790 --> 00:01:03,320
if we ever wanted to change the HTML template for a list item, we would need to update that HTML code

12
00:01:03,320 --> 00:01:08,220
in multiple places or in multiple files and that would be a pain.

13
00:01:08,840 --> 00:01:12,350
So how can we avoid this duplication of code?

14
00:01:12,860 --> 00:01:18,040
Well, one answer would be client side rendering or browser side rendering.

15
00:01:18,530 --> 00:01:24,860
Let's jump into a text editor and I'll explain what that means within our server JS file.

16
00:01:24,860 --> 00:01:28,520
Let's scroll down until we see our HTML template.

17
00:01:29,000 --> 00:01:35,870
And in particular we are looking for the unordered list where we then generate a list item for each

18
00:01:35,870 --> 00:01:37,340
document in our collection.

19
00:01:37,880 --> 00:01:40,520
So the question is what is client side rendering?

20
00:01:40,770 --> 00:01:48,770
It just means that instead of generating HTML for our dynamic data on the server side and then sending

21
00:01:48,770 --> 00:01:55,550
that HTML to the Web browser instead of that with client side rendering, the server would only send

22
00:01:55,550 --> 00:01:57,830
the browser the raw data.

23
00:01:58,010 --> 00:02:05,150
In this case, our array named items and then it would be up to the web browser or client to use that

24
00:02:05,150 --> 00:02:08,660
raw data to generate the appropriate HTML.

25
00:02:09,170 --> 00:02:16,250
So basically we're just offloading the responsibility of generating HTML from the server over to the

26
00:02:16,250 --> 00:02:16,960
browser.

27
00:02:17,480 --> 00:02:24,680
So to get started implementing client side rendering, our first step is to send over the raw data or

28
00:02:24,680 --> 00:02:27,080
our items array to the Web browser.

29
00:02:27,440 --> 00:02:28,210
So check this out.

30
00:02:28,460 --> 00:02:33,170
Scroll down towards the bottom of this HTML template and towards the bottom.

31
00:02:33,170 --> 00:02:37,400
We see these two script tags right above those script tags.

32
00:02:37,400 --> 00:02:40,640
Let's add a new line and type this out with me.

33
00:02:40,970 --> 00:02:43,400
Let's add another script tag pair.

34
00:02:44,300 --> 00:02:47,780
And in between the two script tags, let's type this.

35
00:02:47,780 --> 00:02:49,190
Let's create a variable.

36
00:02:49,550 --> 00:02:54,710
Remember anything inside the script tags will be interpreted as JavaScript by the web browser.

37
00:02:54,980 --> 00:03:00,290
So we are creating a variable, let's name it items and let's set it to equal.

38
00:03:00,800 --> 00:03:02,780
And then we are within a template literal.

39
00:03:02,780 --> 00:03:05,540
So to do something dynamic we can say dollar sign.

40
00:03:05,540 --> 00:03:11,990
Curly brackets in the web browser has a built in object named JSON.

41
00:03:12,320 --> 00:03:20,420
Again, JSON stands for JavaScript object notation and it's a super popular way of sending data back

42
00:03:20,420 --> 00:03:21,010
and forth.

43
00:03:21,260 --> 00:03:29,450
Now we can look inside the JSON object for a method named Dring Afie and what this will do is convert

44
00:03:29,450 --> 00:03:33,410
JavaScript data or JSON into a string of text.

45
00:03:33,740 --> 00:03:37,580
So within these parentheses we just let it know which data we want to convert.

46
00:03:37,880 --> 00:03:39,230
Let's say items.

47
00:03:39,500 --> 00:03:44,720
Right, because that is the name of our array of database objects or database documents.

48
00:03:45,150 --> 00:03:45,470
All right.

49
00:03:45,470 --> 00:03:51,290
Now, with this in place, go ahead and save this file and then let's refresh on the front end.

50
00:03:51,800 --> 00:03:53,720
And what I want you to do is right.

51
00:03:53,720 --> 00:03:56,750
Click and choose view page source.

52
00:03:59,000 --> 00:04:04,190
This is the HTML that makes up our Web page, and if we scroll down to the very bottom here, we see

53
00:04:04,190 --> 00:04:06,200
that new script tag that we just added.

54
00:04:06,360 --> 00:04:10,940
And this is the raw data for our items array.

55
00:04:11,390 --> 00:04:11,650
Right.

56
00:04:11,660 --> 00:04:17,930
We see it's an array of objects and each object has a property of underscore ID and text.

57
00:04:17,930 --> 00:04:21,530
And here we see things like walk the dog by coffee.

58
00:04:22,010 --> 00:04:29,420
This means that our server is successfully sending over the raw data to our browser or to our client.

59
00:04:29,930 --> 00:04:30,960
With this in place.

60
00:04:30,980 --> 00:04:37,890
Let's take a leap of faith and actually delete the list item HTML template from our server code.

61
00:04:38,360 --> 00:04:39,410
Let me show you what I mean.

62
00:04:39,590 --> 00:04:42,230
Back in our text editor and server EGAS.

63
00:04:42,620 --> 00:04:46,330
Scroll back up until you find the unordered list area.

64
00:04:46,790 --> 00:04:52,220
And remember, this is where we used Map to loop through our items array and generate this template

65
00:04:52,220 --> 00:04:53,180
once for each item.

66
00:04:53,390 --> 00:04:59,030
Let's delete all of this so that the unordered list is completely hollowed out and empty.

67
00:04:59,870 --> 00:05:05,550
So just delete all of the lines of code in between the opening you will and the closing you will.

68
00:05:06,140 --> 00:05:06,530
All right.

69
00:05:06,830 --> 00:05:12,130
If we save that and then refresh, obviously that area is now completely empty.

70
00:05:12,530 --> 00:05:20,300
But the idea is that we can now use browser based or client based JavaScript to generate that same exact

71
00:05:20,300 --> 00:05:21,440
user interface.

72
00:05:21,950 --> 00:05:22,250
Right.

73
00:05:22,250 --> 00:05:26,790
Because our front end JavaScript has access to this raw data.

74
00:05:27,500 --> 00:05:30,920
So let's start writing a bit of browser based JavaScript.

75
00:05:31,250 --> 00:05:35,180
Back in our text editor, we are done with server Gorgias.

76
00:05:35,450 --> 00:05:41,810
Instead, let's jump into our file named browser Gorgias towards the top of the file, maybe right above

77
00:05:41,810 --> 00:05:43,430
our create feature area.

78
00:05:43,700 --> 00:05:50,210
Let's create a new comment to stay organized and let's say initial page load render.

79
00:05:50,840 --> 00:05:56,540
OK, and let's begin by selecting that empty unordered list element.

80
00:05:56,840 --> 00:06:00,640
You can see we gave that an ID of item Dasht list.

81
00:06:01,160 --> 00:06:11,300
So back in our browser, not just let's say document dot git element by IDE and had an ID of item Dasch

82
00:06:11,300 --> 00:06:11,990
list.

83
00:06:12,410 --> 00:06:20,750
OK, once we've selected that element then we want to tack on and say dot insert adjacent HTML.

84
00:06:21,410 --> 00:06:23,030
We give this method to arguments.

85
00:06:23,030 --> 00:06:28,910
The first argument is where we want to add on the HTML so we can say before end.

86
00:06:29,570 --> 00:06:33,920
And then the second argument is the HTML that we actually want to add to it.

87
00:06:34,490 --> 00:06:37,520
Just so this line of code doesn't get super long and unreadable.

88
00:06:37,520 --> 00:06:45,410
Let's make up a variable name, for example, maybe our HTML and then on the line of code right before

89
00:06:45,410 --> 00:06:51,650
this new line of code, let's just create a variable named our HTML and let's set it to equal something

90
00:06:52,010 --> 00:06:53,120
now for a quick test.

91
00:06:53,120 --> 00:06:56,030
We could set it to a string of text that is just hello.

92
00:06:56,510 --> 00:07:01,120
And if I save that and refresh, we see that it's in the right place.

93
00:07:01,520 --> 00:07:08,970
So now instead of hello, we just need to leverage this raw data to generate the appropriate HTML.

94
00:07:09,320 --> 00:07:15,560
So let's take note that this data is being stored in a variable named items and this variable does not

95
00:07:15,560 --> 00:07:16,850
live within a function.

96
00:07:17,060 --> 00:07:19,970
So that means it's available in the global scope.

97
00:07:20,390 --> 00:07:25,610
So we will have no trouble accessing it from anywhere within our code to check this out back in our

98
00:07:25,610 --> 00:07:29,570
file instead of setting our HTML to equal quotes.

99
00:07:29,580 --> 00:07:31,120
Hello, that's get rid of the quotes.

100
00:07:31,120 --> 00:07:31,580
Hello.

101
00:07:32,180 --> 00:07:36,640
And let's begin by working with that item's variable that contains the raw data.

102
00:07:36,920 --> 00:07:42,410
We know that it is an array and all arrays have access to the map method.

103
00:07:42,890 --> 00:07:46,820
The MAP method will create a new array based on the original array.

104
00:07:47,150 --> 00:07:50,510
So within the map parentheses we just give it a function.

105
00:07:50,810 --> 00:07:57,290
So function parentheses, curly brackets that it will run once for each item in this array within these

106
00:07:57,290 --> 00:07:57,920
parentheses.

107
00:07:57,920 --> 00:08:03,680
For the function, let's include a parameter named item, OK, within the body of our function, let's

108
00:08:03,680 --> 00:08:04,970
just return.

109
00:08:05,300 --> 00:08:10,430
And our goal here is to return the HTML template for each list item.

110
00:08:10,790 --> 00:08:18,560
Well, luckily in our previous lesson we already created a function up here at the very top named item

111
00:08:18,560 --> 00:08:20,570
template and we set things up.

112
00:08:20,570 --> 00:08:26,690
So you just pass this function a bit of data for the current item and then it will generate the appropriate

113
00:08:26,690 --> 00:08:28,490
dynamic HTML.

114
00:08:29,240 --> 00:08:33,110
So within our our HTML equals area, what do we want to return?

115
00:08:33,500 --> 00:08:41,900
Let's just call our item template function and within these parentheses, let's just pass in the current

116
00:08:41,900 --> 00:08:43,070
item from the array.

117
00:08:43,850 --> 00:08:44,900
So item.

118
00:08:45,470 --> 00:08:48,380
All right, now the method is going to return an array.

119
00:08:48,650 --> 00:08:50,570
We don't actually want an array.

120
00:08:50,570 --> 00:08:52,340
We want a string of text.

121
00:08:52,520 --> 00:08:52,790
Right.

122
00:08:52,790 --> 00:08:54,340
A string of HTML.

123
00:08:54,860 --> 00:08:58,400
So after this closing parentheses here for map, let's.

124
00:08:58,450 --> 00:09:05,250
Say, Dot, join, join, will convert an array into a string of text, and then instead of having them

125
00:09:05,250 --> 00:09:11,640
be separated by commas, if we just include an empty pair of quotes, they will not be separated by

126
00:09:11,640 --> 00:09:12,920
anything cool.

127
00:09:12,930 --> 00:09:19,560
So this variable will now contain a big string of HTML text and then we're adding that in to our empty

128
00:09:19,560 --> 00:09:20,670
unordered list.

129
00:09:21,180 --> 00:09:23,530
Let's go ahead and save that and test it out.

130
00:09:23,580 --> 00:09:28,050
So back in the browser, if I refresh the application, awesome.

131
00:09:28,050 --> 00:09:32,790
We are in business, we can test it out by maybe trying to delete this by carrot's item.

132
00:09:34,970 --> 00:09:40,370
It's gone, and if I refresh, you can see it's still permanently gone, so this solved are duplicated

133
00:09:40,370 --> 00:09:45,440
code issue and it was a super simple example of client side rendering.

134
00:09:45,890 --> 00:09:49,210
At this point, our application is complete.

135
00:09:49,610 --> 00:09:50,780
So where do we go from here?

136
00:09:51,020 --> 00:09:55,310
Well, in our next lesson, we are going to talk briefly about security.

137
00:09:55,580 --> 00:10:02,540
And then in the lesson after that, we are going to push our application up onto the Internet so you

138
00:10:02,540 --> 00:10:04,560
can share it with your friends and family.

139
00:10:04,970 --> 00:10:11,690
Trust me, it's going to be a great feeling to have people, you know, use and add items to your application.

140
00:10:12,170 --> 00:10:16,220
So let's keep things rolling and I will see you in the next lesson.
