1
00:00:02,250 --> 00:00:09,870
Hello, everyone, in this lesson, we are going to work on our home page feed for users that are logged

2
00:00:09,870 --> 00:00:14,930
in the home page should show the latest posts from the people they follow.

3
00:00:15,660 --> 00:00:22,500
If a user has not followed anyone or if the people they follow have not created any posts yet, then

4
00:00:22,500 --> 00:00:26,080
we would expect to see this message that your feed is empty.

5
00:00:26,640 --> 00:00:32,730
However, I know that my browed account is following the Bachs a lot account and I know that Bachs a

6
00:00:32,730 --> 00:00:38,250
lot has created at least one post, so we should see that on our homepage feed.

7
00:00:38,760 --> 00:00:45,600
So our goal in this lesson is to swap out this hard coded HTML and make this page come to life with

8
00:00:45,600 --> 00:00:48,410
dynamic logic to get started.

9
00:00:48,420 --> 00:00:52,800
Let's dig into the controller function that powers this homepage root.

10
00:00:53,400 --> 00:01:01,590
So in your text editor within your controllers folder, I want you to dig into user controller J.S.

11
00:01:02,970 --> 00:01:06,840
Within this file, we're looking for a function named home.

12
00:01:07,380 --> 00:01:10,950
For me, it's around line number seventy seven.

13
00:01:11,790 --> 00:01:17,460
Yours will likely be on a different line number, but we're looking for the area that begins with exports

14
00:01:17,490 --> 00:01:18,530
dot home.

15
00:01:19,500 --> 00:01:22,710
This is where we've already set up, if else blocks.

16
00:01:23,190 --> 00:01:28,350
If you were logged in with user session data, you see the home dashboard.

17
00:01:28,710 --> 00:01:32,280
If you're not logged in, you see the guest registration page.

18
00:01:32,970 --> 00:01:36,990
In this case, we're only interested if you are indeed logged in.

19
00:01:37,380 --> 00:01:41,790
So maybe right above this response, not render home dashboard line.

20
00:01:42,660 --> 00:01:52,050
Let's add a comment to stay organized and let's say fetch feed of posts for current user.

21
00:01:52,950 --> 00:01:55,650
OK, now, right below this, let's create a variable.

22
00:01:55,650 --> 00:02:03,030
So I will say let posts equal and then you can imagine that we would want to use our post model.

23
00:02:03,420 --> 00:02:09,360
So uppercase post and we have not created this function yet, but we can create it in just a moment.

24
00:02:09,570 --> 00:02:15,180
So let's say post dot git feed again.

25
00:02:15,180 --> 00:02:19,950
We have not created a function with this name yet, but you can imagine that in order for it to do its

26
00:02:19,950 --> 00:02:24,420
job, it needs to know which user to create a feed for.

27
00:02:25,050 --> 00:02:33,270
So within these parentheses here, let's include the current logged in users id so request dot session

28
00:02:33,630 --> 00:02:37,350
dot user dot underscore ID.

29
00:02:38,220 --> 00:02:44,640
OK, now you can imagine that when we create this git feed function we will set it up to return a promise.

30
00:02:45,030 --> 00:02:51,780
So right before this we want to be sure to include awaked and since we're using a wait, we want to

31
00:02:51,780 --> 00:02:54,720
be sure that we are within an asynchronous function.

32
00:02:55,440 --> 00:03:02,220
So up on this line, when we say exports dot home right before function, just include async.

33
00:03:03,030 --> 00:03:03,420
Cool.

34
00:03:03,570 --> 00:03:09,900
So now when it comes time to render the home dashboard, we will have a list of posts that we want to

35
00:03:09,900 --> 00:03:11,400
pass into it and render.

36
00:03:12,150 --> 00:03:19,560
So right after the quotes for Home Dashboard include a comma and then an object so curly brackets.

37
00:03:20,100 --> 00:03:27,180
And let's pass this template, a property named posts with a value of our posts variable here.

38
00:03:27,180 --> 00:03:29,670
So posts Kolan posts.

39
00:03:30,420 --> 00:03:36,930
OK, at this point let's go ahead and save this file and now we better jump into our post model and

40
00:03:36,930 --> 00:03:39,810
create a function with this name git feed.

41
00:03:41,010 --> 00:03:47,010
So within our models folder, I want you to jump into post JS.

42
00:03:48,420 --> 00:03:56,160
Let's scroll down to the very bottom of this file and right above the closing module exports.

43
00:03:56,160 --> 00:03:59,790
Let's add a new line and we want to create a new function.

44
00:04:00,120 --> 00:04:04,740
So uppercase post dot git feed.

45
00:04:05,340 --> 00:04:11,430
Let's set this to equal a function within the parentheses for this function.

46
00:04:11,430 --> 00:04:14,580
Let's be sure to receive the incoming ID.

47
00:04:15,660 --> 00:04:20,550
OK, now within the body of this function, let's analyze what we need to do.

48
00:04:21,120 --> 00:04:23,070
Let's use comments to break it down.

49
00:04:23,070 --> 00:04:35,550
So our first task, so comment would be to create an array of the user IDs that the current user follows.

50
00:04:36,120 --> 00:04:42,360
Right, because if I follow twenty different users, I would want to see the latest posts from all of

51
00:04:42,360 --> 00:04:43,020
those people.

52
00:04:43,620 --> 00:04:49,650
So in order to query the posts collection, we need to know which authors of posts to look for.

53
00:04:50,070 --> 00:04:51,360
So this is our first step.

54
00:04:51,600 --> 00:04:55,590
Create an array of the user IDs that the current user follows.

55
00:04:56,310 --> 00:04:59,520
Then after that, let's dropdown and add another comment.

56
00:05:00,330 --> 00:05:01,640
Then we'd want to look.

57
00:05:02,030 --> 00:05:14,420
For posts where the author is in the above array of followed users, right, and then that collection

58
00:05:14,420 --> 00:05:19,370
of posts is ultimately what we want this function to return or resolve with.

59
00:05:19,880 --> 00:05:20,930
So let's get to work.

60
00:05:20,940 --> 00:05:22,820
Let's start with step number one.

61
00:05:23,390 --> 00:05:27,720
We need to create an array of the user IDs that the current user follows.

62
00:05:28,280 --> 00:05:35,600
Now, technically, depending on how strictly you want to follow the MVC pattern, you could have your

63
00:05:35,600 --> 00:05:43,010
user controller ask the follow model for this data and then pass that data into this post model.

64
00:05:43,370 --> 00:05:49,550
But personally, I'm OK with looking directly in the follows collection from within this post model,

65
00:05:50,000 --> 00:05:55,320
since I'm not modifying the follow data in any way, shape or form, I'm OK with this.

66
00:05:55,850 --> 00:06:01,970
So in order to complete this step, number one, let's scroll up to the very top of this file, because

67
00:06:01,970 --> 00:06:04,850
we need to be able to work with our follows collection.

68
00:06:05,390 --> 00:06:10,700
We can actually just duplicate line number one, where we create posts collection.

69
00:06:11,160 --> 00:06:18,020
So if you just select that line, copy it right below it, paste it in the new copy, change the name

70
00:06:18,020 --> 00:06:22,190
from Post's collection to follows collection.

71
00:06:22,790 --> 00:06:28,610
And then at the end, the collection that we want to work with instead of posts, it would be follows.

72
00:06:29,350 --> 00:06:33,430
OK, now let's scroll back down to the function that we were just working on.

73
00:06:34,100 --> 00:06:40,640
So back down at the very bottom, our posts get feed function right below the comment for step number

74
00:06:40,640 --> 00:06:40,940
one.

75
00:06:40,940 --> 00:06:41,720
Let's do this.

76
00:06:41,720 --> 00:06:43,220
Let's create a variable.

77
00:06:43,220 --> 00:06:47,570
So let and let's name it followed users.

78
00:06:48,770 --> 00:06:54,350
Let's set this to equal and then let's begin working with our follows collection.

79
00:06:55,280 --> 00:07:00,230
Let's look inside that for the Mongo DB method named Find.

80
00:07:01,190 --> 00:07:07,070
And actually at the very end of this line, since Find is going to return data that makes sense to Mongo

81
00:07:07,070 --> 00:07:11,150
DB but maybe doesn't make sense from our raw JavaScript perspective.

82
00:07:11,450 --> 00:07:15,520
Let's also tack on dot to array.

83
00:07:16,550 --> 00:07:21,320
OK, now within the parentheses for find, which documents do we want to look for?

84
00:07:21,710 --> 00:07:29,390
Well, let's provide an object so curly brackets and we're interested in follow documents where the

85
00:07:29,840 --> 00:07:37,780
author IDE Colon would match whatever ID was passed into this overall function.

86
00:07:38,330 --> 00:07:43,730
Now the idea that stored in session data is just a string of text, so we'd first want to convert it

87
00:07:43,730 --> 00:07:47,410
into a Mongu DB Object ID object type.

88
00:07:48,020 --> 00:07:54,380
So right after the colon here, we just say a new instance of object ID.

89
00:07:55,510 --> 00:07:59,210
It gets its own set of parentheses and then we just pass an I.D..

90
00:08:00,660 --> 00:08:03,780
OK, now ultimately this is going to return a promise.

91
00:08:04,120 --> 00:08:07,870
So before this, let's be sure to include the word awaked.

92
00:08:08,800 --> 00:08:13,080
And if we're using a wait, we want to be sure that we are within an asynchronous function.

93
00:08:13,480 --> 00:08:17,370
So right before the word function here, let's include a sink.

94
00:08:18,110 --> 00:08:22,240
OK, so now we have this variable named followed users.

95
00:08:22,450 --> 00:08:25,460
That is going to be an array of follow documents.

96
00:08:26,200 --> 00:08:29,760
Now, each one of these documents is going to have several properties.

97
00:08:30,130 --> 00:08:36,490
If we look at our Mongu DB database in Atlus within our follows collection, if we take a look at a

98
00:08:36,490 --> 00:08:44,710
document each followed has an idea of its own and then it has the user IDs for the user that is doing

99
00:08:44,710 --> 00:08:47,500
the following and the user that they want to follow.

100
00:08:48,130 --> 00:08:55,270
However, in this case, the only property or value that we actually care about is the followed I.D.

101
00:08:56,710 --> 00:08:58,980
This represents the user that they follow.

102
00:08:59,410 --> 00:09:00,460
So let's do this.

103
00:09:00,460 --> 00:09:08,320
Let's adjust this array of documents to not be an array of objects with multiple properties, but instead

104
00:09:08,320 --> 00:09:10,990
just an array of various user IDs.

105
00:09:11,710 --> 00:09:12,840
Let me show you what I mean.

106
00:09:12,850 --> 00:09:20,980
So right below this line, let's say followed users equals and then let's just use the map method.

107
00:09:20,980 --> 00:09:29,260
So followed users dot map map will create a new array and it will let us specify the value for each

108
00:09:29,260 --> 00:09:30,610
item in that new array.

109
00:09:31,240 --> 00:09:37,240
So within these parentheses, we give map a function within these function parentheses.

110
00:09:37,240 --> 00:09:41,680
Let's be sure to include a parameter, let's call it follow doc.

111
00:09:42,400 --> 00:09:52,620
And then within the body of this new function, let's just return follow doc dot followed ID right.

112
00:09:52,630 --> 00:09:58,180
And then ultimately this new array that map returns is what we are storing in this same variable name

113
00:09:58,540 --> 00:09:59,540
followed users.

114
00:09:59,830 --> 00:10:07,210
So this way followed users is now an array that doesn't contain anything other than the actual specific

115
00:10:07,210 --> 00:10:08,780
values that we are interested in.

116
00:10:09,610 --> 00:10:14,980
So if someone came to our home page and they followed 15 different people, it would just be an array

117
00:10:14,980 --> 00:10:17,840
with 15 different user IDs.

118
00:10:18,640 --> 00:10:19,030
Cool.

119
00:10:19,330 --> 00:10:24,250
Now, that is an array that we can very easily leverage in step number two.

120
00:10:24,970 --> 00:10:26,040
Let me show you what I mean.

121
00:10:26,050 --> 00:10:29,530
So below this comment for step number two, let's add a new line.

122
00:10:30,220 --> 00:10:36,040
And remember, ultimately, we just want this function to return or resolve with a collection of posts

123
00:10:36,220 --> 00:10:37,920
that would make up the user's feed.

124
00:10:38,500 --> 00:10:39,750
So let's do this down here.

125
00:10:39,820 --> 00:10:43,110
Let's return another promise.

126
00:10:43,480 --> 00:10:50,800
Remember that we've already created uppercase post DOT Reuseable post query.

127
00:10:51,520 --> 00:10:56,380
This function is going to do several things, but in this case it's useful because it's going to look

128
00:10:56,380 --> 00:10:59,820
up the author's username and figure out their aggravator.

129
00:11:00,280 --> 00:11:07,090
Now, within the parentheses for this function, we give it an array of aggregate operations within

130
00:11:07,090 --> 00:11:08,750
these square brackets for this array.

131
00:11:08,770 --> 00:11:12,940
Let's drop down and each aggregate operation is an object.

132
00:11:12,940 --> 00:11:17,970
So curly brackets for the first operation, let's perform a match.

133
00:11:18,790 --> 00:11:20,710
So dollar sign match colon.

134
00:11:21,130 --> 00:11:29,380
And then we give that an object and we want to look for any post documents where the author field author

135
00:11:29,380 --> 00:11:31,750
Colon and then check this out.

136
00:11:31,750 --> 00:11:37,230
Instead of just looking for a specific or single value, we can include another object here.

137
00:11:37,240 --> 00:11:45,400
So another pair of curly brackets and say dollar sign in colon and then we can give it an array.

138
00:11:45,790 --> 00:11:49,020
So this is where our followed users array comes in.

139
00:11:49,030 --> 00:11:52,250
So let's just say followed users.

140
00:11:53,620 --> 00:12:02,200
So altogether this is saying find any post document where the author value is a value that is in our

141
00:12:02,200 --> 00:12:03,960
array of follow users.

142
00:12:04,510 --> 00:12:04,870
Cool.

143
00:12:04,900 --> 00:12:09,070
After this, let's just include a comma and include one more aggregate operation.

144
00:12:09,370 --> 00:12:12,800
Let's sort things so that the newest posts are up at the top.

145
00:12:13,330 --> 00:12:21,430
So dollar signs sort colon give that an object created de colon and then negative one.

146
00:12:21,440 --> 00:12:23,950
So the newest values are up at the top.

147
00:12:24,700 --> 00:12:25,110
Cool.

148
00:12:25,120 --> 00:12:26,920
Let's go ahead and save this.

149
00:12:27,160 --> 00:12:32,170
And now let's jump back into our user controller to refresh our memory of what we're doing.

150
00:12:33,150 --> 00:12:40,600
So in user controller, within our exports home function, we are creating a variable named posts and

151
00:12:40,600 --> 00:12:44,730
is leveraging that function that we just created in the model git feed.

152
00:12:45,400 --> 00:12:52,210
So ultimately this function returns a promise from the reusable query function and then we are awaiting

153
00:12:52,210 --> 00:12:53,080
that promise.

154
00:12:53,830 --> 00:12:54,220
Cool.

155
00:12:54,370 --> 00:12:55,000
Now we've already.

156
00:12:55,040 --> 00:13:00,840
Set things up to pass the posts into the template, right, that's what's going on here.

157
00:13:01,100 --> 00:13:08,540
So now all we need to do is go into our home dash dashboard file and actually leverage or output this

158
00:13:08,540 --> 00:13:08,960
data.

159
00:13:09,470 --> 00:13:10,500
Let me show you what I mean.

160
00:13:10,760 --> 00:13:19,160
So in the root of your project, open up your views folder and I want you to dig into home dash dashboard

161
00:13:19,790 --> 00:13:24,010
SJS around line number seven.

162
00:13:24,020 --> 00:13:27,800
We see this div with a class of text center.

163
00:13:28,530 --> 00:13:34,750
This content should only be displayed if there are no relevant posts to display.

164
00:13:35,480 --> 00:13:36,490
So let's do this.

165
00:13:36,500 --> 00:13:39,500
I want you to cut this div into your clipboard.

166
00:13:42,200 --> 00:13:47,300
So now the template should look like this, there's just the one closing div that matches the opening

167
00:13:47,300 --> 00:13:51,260
container div and in the place of that code that we just cut.

168
00:13:51,560 --> 00:13:53,770
Let's set up an if statement.

169
00:13:54,350 --> 00:13:56,650
So let's open up in each section.

170
00:13:56,870 --> 00:14:02,540
We do not need an equal sign here because we're not immediately trying to output something.

171
00:14:02,540 --> 00:14:04,600
We just want to run a bit of JavaScript.

172
00:14:04,910 --> 00:14:06,340
So we want an if statement.

173
00:14:06,350 --> 00:14:14,710
So if parentheses curly brackets right after the closing curly bracket let's also add and else block.

174
00:14:15,800 --> 00:14:23,690
OK, now for the parentheses or for our condition, let's just say if posts length.

175
00:14:24,710 --> 00:14:27,740
So if there are posts to display we can show them here.

176
00:14:27,920 --> 00:14:32,460
But first, let's take care of the else within the else block.

177
00:14:32,480 --> 00:14:35,300
This is where we can paste back in our clipboard.

178
00:14:36,440 --> 00:14:40,890
Right, because this is only going to run if their feed is empty.

179
00:14:41,630 --> 00:14:48,230
OK, now in terms of what we want to do, if there are posts to display, instead of reinventing the

180
00:14:48,230 --> 00:14:54,110
wheel and writing a bunch of code here, we can actually just recycle code from our profile template.

181
00:14:54,770 --> 00:14:57,690
Let me show you what I mean within your views folder.

182
00:14:57,800 --> 00:15:04,880
I want you to jump in to profile Dot Ajay's around line number eight.

183
00:15:04,880 --> 00:15:07,520
You'll see a div with a class of list group.

184
00:15:07,910 --> 00:15:15,470
We've already written code that will loop through a collection of posts and for each post it will create

185
00:15:15,470 --> 00:15:16,280
a link.

186
00:15:17,000 --> 00:15:17,170
Right.

187
00:15:17,270 --> 00:15:23,060
And that will include the title of the post, the author's avatar and the created date.

188
00:15:23,540 --> 00:15:24,470
So let's do this.

189
00:15:24,470 --> 00:15:28,160
Let's just copy this entire div with a class of list group.

190
00:15:28,580 --> 00:15:32,930
So I will begin selecting here and then grab the one closing div tag.

191
00:15:33,500 --> 00:15:34,400
Let's copy that.

192
00:15:35,480 --> 00:15:41,070
And then back in our home dashboard file within the if block, just paste in your clipboard.

193
00:15:42,710 --> 00:15:46,970
OK, now I do want to make one adjustment on the profile screen.

194
00:15:46,970 --> 00:15:49,230
We do not list the author's username.

195
00:15:49,610 --> 00:15:54,650
This is because if you're viewing someone's profile, it's safe to assume the list of posts are all

196
00:15:54,650 --> 00:15:56,330
by that particular author.

197
00:15:56,810 --> 00:16:01,970
But in the context of our homepage feed, we would want to display the author's username.

198
00:16:02,390 --> 00:16:08,810
So maybe right after this strong tag with the title of the post, let's wrap everything after that in

199
00:16:08,810 --> 00:16:09,620
a span.

200
00:16:09,980 --> 00:16:16,220
So opening span element, you can see that Vrsaljko code just trying to automatically close the spane

201
00:16:16,220 --> 00:16:16,990
element for me.

202
00:16:17,000 --> 00:16:17,810
I don't want that.

203
00:16:17,810 --> 00:16:20,660
So I'm going to get rid of that closing span tag.

204
00:16:20,900 --> 00:16:26,440
And then at the very end of this line is where I would want the closing span tag.

205
00:16:27,080 --> 00:16:29,540
Now, let's go back to that opening span tag.

206
00:16:30,140 --> 00:16:38,360
And just for styling reasons, I want to give it a class of text dash muted and a class of small.

207
00:16:39,110 --> 00:16:45,050
OK, now, within that span tag, the first thing I wanted to say is by and then the author name.

208
00:16:45,770 --> 00:16:53,420
So we would just drop in to SJS and output post dot author dot username.

209
00:16:54,290 --> 00:16:54,650
Cool.

210
00:16:54,650 --> 00:16:57,250
We just have one more detail before we test this out.

211
00:16:58,040 --> 00:17:05,420
Right above this div with a class of list group, let's add a heading level two so H two within it,

212
00:17:05,420 --> 00:17:11,420
let's say the latest from those you follow.

213
00:17:12,140 --> 00:17:20,420
And just for styling reasons, let's give this heading level to a class of text dash center and M.V.

214
00:17:20,420 --> 00:17:24,330
Dash four for margin bottom for cool.

215
00:17:24,380 --> 00:17:29,120
Now before we save this file, let's be sure to pay attention to where we are dropping out and in of

216
00:17:29,130 --> 00:17:30,020
SJS.

217
00:17:30,410 --> 00:17:36,050
So, for example, on this line where we have our IF statement after this opening curly bracket, let's

218
00:17:36,050 --> 00:17:41,450
end our SJS and then on the line where our else block begins.

219
00:17:42,050 --> 00:17:45,620
At the start of that line, we see the closing curly bracket for the IF statement.

220
00:17:45,620 --> 00:17:48,920
So let's drop back in to SJS there.

221
00:17:49,760 --> 00:17:56,650
At the very end of this line, we will exit SJS and then finally, when our else block closes right

222
00:17:56,660 --> 00:17:59,630
before that, we'd want to drop back in to Ejaz.

223
00:18:00,350 --> 00:18:00,740
Cool.

224
00:18:00,890 --> 00:18:03,850
Let's go ahead and save this and test it out.

225
00:18:04,370 --> 00:18:09,620
So back on the home page, if I refresh, I should see one post from Barzilai.

226
00:18:10,400 --> 00:18:11,030
Awesome.

227
00:18:11,030 --> 00:18:15,080
The latest from those you follow and there is the post from Bachs alot.

228
00:18:15,800 --> 00:18:22,070
Now just to test things out and make sure that this works with multiple posts and from multiple authors.

229
00:18:22,070 --> 00:18:24,500
Let's do this in this window.

230
00:18:24,500 --> 00:18:29,480
I'm logged in with the Kitty Doe account, so let me create a post with Kitty Doe.

231
00:18:30,500 --> 00:18:33,530
Catnip is delicious.

232
00:18:35,110 --> 00:18:43,630
It's very good to create that post and then back in this window where I'm logged in as the Brad account,

233
00:18:44,020 --> 00:18:54,100
if I search for catnip and if I click on that post and maybe I really enjoy this, so I want to view

234
00:18:54,100 --> 00:18:57,310
that author's profile and begin following them.

235
00:19:00,050 --> 00:19:04,970
Well, now, if I go back to the home page, I should see that post by Kitty Doe.

236
00:19:05,390 --> 00:19:05,930
Perfect.

237
00:19:05,930 --> 00:19:10,010
And you can see they are sorted so that the newest post is on top.

238
00:19:10,910 --> 00:19:14,030
And that actually brings this lesson to a close.

239
00:19:14,450 --> 00:19:20,090
In our next lesson, we are going to work on our chat room or live chat feature.

240
00:19:20,810 --> 00:19:26,730
This will use an entirely new technology to allow for real time, two way communication of data.

241
00:19:27,080 --> 00:19:29,180
This should be a lot of fun to set up.

242
00:19:29,480 --> 00:19:32,150
So let's keep things rolling and I'll see you then.
