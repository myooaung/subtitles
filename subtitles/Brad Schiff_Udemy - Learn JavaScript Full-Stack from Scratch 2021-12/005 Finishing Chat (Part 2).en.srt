1
00:00:00,300 --> 00:00:07,490
For our next task, we should probably set things up so that messages from you yourself appear differently,

2
00:00:08,010 --> 00:00:13,800
maybe if it's a message that you sent, it's aligned to the right instead of the left, and maybe it

3
00:00:13,800 --> 00:00:16,490
has a blue background instead of a gray background.

4
00:00:17,190 --> 00:00:23,970
Also, if we think about it, it's a waste of server resources to send your own message back to you.

5
00:00:24,570 --> 00:00:29,800
Your message data would really only need to be sent to all of the other connected browsers.

6
00:00:30,330 --> 00:00:31,810
Let me show you what I'm getting at.

7
00:00:31,830 --> 00:00:39,490
So back within our app James file, when we receive an incoming message, right.

8
00:00:39,580 --> 00:00:46,530
So socketed on chat message from browser, we are responding by sending it out to everyone on this line.

9
00:00:47,040 --> 00:00:52,710
However, this is actually sending it to everyone, including the person who sent the message in the

10
00:00:52,710 --> 00:00:57,810
first place, when really if you think about it, the author of a message doesn't need that data.

11
00:00:57,990 --> 00:00:59,200
They're the one that sent it.

12
00:00:59,670 --> 00:01:11,520
So instead, if we change this from I omit to get rid of the IO and say socket dot broadcast dot imit,

13
00:01:12,360 --> 00:01:19,530
this will emit this event to any and all connected browsers except the socket connection that sent the

14
00:01:19,530 --> 00:01:20,880
message in the first place.

15
00:01:21,630 --> 00:01:27,840
So now we can set things up in our front end JavaScript so that when you send a message to the server,

16
00:01:28,290 --> 00:01:33,670
well, the browser just grabs whatever text was in that field and adds it into the chat log.

17
00:01:34,110 --> 00:01:40,710
However, our browser based JavaScript would still need to know the username and avatar of the current

18
00:01:40,710 --> 00:01:42,360
user that you're logged in as.

19
00:01:42,960 --> 00:01:48,120
So let's do this within app dot js right below this line.

20
00:01:48,120 --> 00:01:54,360
When we say let user equal right below that, let's drop down and let's do this.

21
00:01:54,360 --> 00:01:59,270
Let's say socket dot imit and let's omit a new event time.

22
00:01:59,340 --> 00:02:00,750
We can name it whatever we want.

23
00:02:00,760 --> 00:02:01,640
I'm going to name it.

24
00:02:01,650 --> 00:02:02,380
Welcome.

25
00:02:02,910 --> 00:02:03,130
Right.

26
00:02:03,210 --> 00:02:10,140
So this is going to run when a new connection is established and then let's include a comma and an object.

27
00:02:10,140 --> 00:02:10,340
Right.

28
00:02:10,350 --> 00:02:12,930
A bit of data that we want to send along with this event.

29
00:02:13,320 --> 00:02:18,850
And I just want to send to the browser the current user name and avatar from session data.

30
00:02:19,590 --> 00:02:27,150
So within these curly brackets, let's say username, Kolan user, dot username, comma, one more property

31
00:02:27,150 --> 00:02:31,700
named Avatar, Kolan user dot avatar.

32
00:02:32,730 --> 00:02:34,530
Let's go ahead and save this.

33
00:02:34,710 --> 00:02:39,770
And now let's go adjust our front end JavaScript to leverage this welcome event.

34
00:02:40,680 --> 00:02:48,180
So back in chat, James, I want you to look for the method that is named open connection, maybe right

35
00:02:48,180 --> 00:02:54,150
above this line where we say this dot socket on chat message from server right above that lets out a

36
00:02:54,150 --> 00:03:02,190
new line and let's say this dot socket dot on within those parentheses, we're going to give it to arguments.

37
00:03:02,190 --> 00:03:05,550
So A comma B is placeholders for the first argument.

38
00:03:05,550 --> 00:03:06,660
Let's say quotes.

39
00:03:07,050 --> 00:03:07,850
Welcome.

40
00:03:08,400 --> 00:03:08,640
Right.

41
00:03:08,640 --> 00:03:12,510
When we first open a connection, the server is going to send a welcome event.

42
00:03:12,990 --> 00:03:15,300
And when that happens, we just want to run a function.

43
00:03:15,300 --> 00:03:18,840
So get rid of the B placeholder and let's create an arrow function.

44
00:03:21,120 --> 00:03:26,250
Within the parentheses for our aero function, let's say data, technically, since we only have one

45
00:03:26,250 --> 00:03:28,220
argument, we don't even need the parentheses.

46
00:03:29,190 --> 00:03:36,480
OK, then within the body of this function, let's just store that data within our overall object so

47
00:03:36,480 --> 00:03:42,030
we could say this dot user name equals data dot username.

48
00:03:43,210 --> 00:03:51,670
And then we can also say this avatar equals data avatar, now that we've stored those values in memory,

49
00:03:51,790 --> 00:03:53,740
we can use them again later on.

50
00:03:54,340 --> 00:03:59,830
So now let's go find our method that is named send message to server for me.

51
00:03:59,830 --> 00:04:02,770
It's up towards the top around line number twenty five.

52
00:04:03,310 --> 00:04:08,470
And remember, when you send a message, the server is no longer going to send it back to you.

53
00:04:08,680 --> 00:04:14,140
It's going to send it to any and all connected browsers except for the person who originally sent that

54
00:04:14,140 --> 00:04:14,750
message.

55
00:04:15,250 --> 00:04:22,180
This means that within send message to server we would now want to handle adding the HTML to the chat

56
00:04:22,180 --> 00:04:22,660
log.

57
00:04:23,530 --> 00:04:29,890
So let's do this within send message to server, maybe right below this this socket emit.

58
00:04:30,130 --> 00:04:44,440
Let's add a new line here and let's say this dot chat log dot insert adjacent html parentheses for the

59
00:04:44,470 --> 00:04:49,510
first argument before and comma for the second argument.

60
00:04:49,510 --> 00:04:53,470
Let's include back ticks within the two back ticks.

61
00:04:53,470 --> 00:04:57,940
Let's drop down, I'll drop down one more line so we have this clean empty line.

62
00:04:58,150 --> 00:05:02,020
And now I don't expect you to type out a bunch of HTML by hand.

63
00:05:02,380 --> 00:05:09,730
So instead let's jump back to GitHub and within this same chat, Dasch visible the HTML template.

64
00:05:10,360 --> 00:05:18,310
I want you to look for line number sixty two so you'll see a comment that says template for your own

65
00:05:18,310 --> 00:05:18,970
message.

66
00:05:19,420 --> 00:05:22,530
And here we see a comment that reads End Template.

67
00:05:23,170 --> 00:05:28,720
So I just want you to select these eight lines of code and copy those into your clipboard.

68
00:05:31,050 --> 00:05:36,070
OK, now back in our text editor within the two back text, just paste in your clipboard.

69
00:05:37,320 --> 00:05:42,600
OK, now let's just hollo things out and make everything dynamic, so let's get rid of this hardcoded.

70
00:05:42,630 --> 00:05:43,780
Hello, how are you?

71
00:05:44,820 --> 00:05:50,910
In its place, let's say dollar sign curly brackets, and we would just want to grab whatever value

72
00:05:51,030 --> 00:05:53,600
the user has currently typed into this textfield field.

73
00:05:54,870 --> 00:06:02,190
So within the dollar sign curly brackets, we could just say this dot Chatfield dot value.

74
00:06:02,890 --> 00:06:05,400
OK, and then let's make the Avatar dynamic.

75
00:06:05,640 --> 00:06:12,540
So instead of this hardcoded value for an avatar, get rid of that https until the end of the quotes.

76
00:06:14,250 --> 00:06:20,210
Now within the quotes we can say dollar sign curly brackets and just say this dot avatar.

77
00:06:20,910 --> 00:06:25,130
It turns out we don't actually need this username property we set up.

78
00:06:25,560 --> 00:06:26,270
That's OK.

79
00:06:26,280 --> 00:06:27,480
I think you get the idea.

80
00:06:27,840 --> 00:06:31,320
We did still need to hold on to that avatar value in memory.

81
00:06:31,560 --> 00:06:32,540
So you get the point.

82
00:06:33,060 --> 00:06:40,140
Let's go ahead and save this and take it for a test drive back in the browser, refresh all connected

83
00:06:40,140 --> 00:06:47,030
browsers and if I reopen up the chat, I can say hello.

84
00:06:48,090 --> 00:06:48,570
Perfect.

85
00:06:48,580 --> 00:06:51,720
So since I'm the author of the message, it's aligned to the right.

86
00:06:51,930 --> 00:06:53,370
It has a blue background.

87
00:06:53,550 --> 00:06:59,610
But in this window for Barbes a lot, it's aligned to the left and has a gray background and then it

88
00:06:59,610 --> 00:07:02,810
barks a lot, says please feed me.

89
00:07:04,440 --> 00:07:05,040
Perfect.

90
00:07:05,050 --> 00:07:05,850
You get the idea.

91
00:07:06,030 --> 00:07:11,970
It's displayed this way for the author of the message, but for all other connected users, it's displayed

92
00:07:11,970 --> 00:07:14,250
like this at this point.

93
00:07:14,250 --> 00:07:17,700
Let's change gears and work on a few final details.

94
00:07:18,270 --> 00:07:23,990
So, for example, once there are enough chat messages to make this area, I have to scroll.

95
00:07:24,480 --> 00:07:27,690
So let me spam a bunch of messages to show you what I'm referring to.

96
00:07:29,940 --> 00:07:36,180
It becomes clear that after each new message, we would want to automatically tell this div to scroll

97
00:07:36,180 --> 00:07:40,020
down to its bottom so that the newest message can be seen.

98
00:07:40,560 --> 00:07:40,860
Right.

99
00:07:40,860 --> 00:07:46,800
We can't expect users to continuously be manually scrolling down as new messages come in.

100
00:07:47,490 --> 00:07:52,130
So let me show you how I would set this up back in Chatterji.

101
00:07:52,230 --> 00:08:00,450
Yes, within our send message to server method, maybe right after our HTML template and right before

102
00:08:00,450 --> 00:08:07,230
this line where we reset the value of the field, lets out a new line and we can just say this dot chat

103
00:08:07,230 --> 00:08:11,040
log dot scroll top.

104
00:08:11,700 --> 00:08:15,300
This will let us say how far down the element should be scrolled.

105
00:08:15,720 --> 00:08:21,240
So we would just want it to be scrolled down all the way to the very bottom so we can just set this

106
00:08:21,240 --> 00:08:28,470
to equal this dot chat log dot scroll height.

107
00:08:29,400 --> 00:08:33,630
So this will set its scroll position to its exact scroll high value.

108
00:08:34,260 --> 00:08:36,380
In other words, it'll scroll to the very bottom.

109
00:08:36,930 --> 00:08:40,290
Now, let's go ahead and copy this line of code that we just wrote.

110
00:08:40,470 --> 00:08:47,490
Copy it into your clipboard because, yes, we've updated send message to server, but we need to go

111
00:08:47,490 --> 00:08:51,480
update our display message from server method as well.

112
00:08:54,000 --> 00:09:00,420
So for me, that's a round line number sixty five, right, display message from server right after

113
00:09:00,420 --> 00:09:02,770
the end of this HTML template.

114
00:09:02,790 --> 00:09:08,020
So right after the back take and closing parentheses, I'll just drop down and paste in my clipboard.

115
00:09:08,670 --> 00:09:11,140
Let's go ahead and save this and test it out.

116
00:09:12,270 --> 00:09:18,750
So if I refresh in the browser and I'll refresh in the bark's lot window as well and open up the chart

117
00:09:18,750 --> 00:09:19,080
again.

118
00:09:21,270 --> 00:09:25,560
So now if I spam enough messages to create vertical scrolling, let's see.

119
00:09:29,340 --> 00:09:29,710
Cool.

120
00:09:30,570 --> 00:09:35,550
Now, the user never has to worry about scrolling to the bottom to see the newest messages, and if

121
00:09:35,550 --> 00:09:41,080
I check the box a lot, browser, cool, we can see it's working for messages from other users as well.

122
00:09:41,760 --> 00:09:47,630
Let's take care of one more miscellaneous detail before we change our focus and think about security.

123
00:09:48,300 --> 00:09:54,840
Let's set things up so that when you first open the chat feature, this field is automatically focused,

124
00:09:55,440 --> 00:09:55,710
right?

125
00:09:55,710 --> 00:09:59,880
My cursor should be blinking in that field so I can just begin typing immediately.

126
00:10:00,450 --> 00:10:03,100
So to make that happen back in Chattooga.

127
00:10:03,130 --> 00:10:10,470
Yes, I would just find our method that is named show chat at the very end of this method.

128
00:10:10,480 --> 00:10:18,120
So maybe below this line and add a new line and just say this dot chat field and then call the focus

129
00:10:18,120 --> 00:10:18,570
method.

130
00:10:19,360 --> 00:10:20,520
Let's give that a save.

131
00:10:20,820 --> 00:10:28,530
And now if I reload, notice how as soon as I click the chat icon, my cursor is blinking down here

132
00:10:28,530 --> 00:10:29,850
and I don't have to click anywhere.

133
00:10:29,850 --> 00:10:31,800
I can just immediately begin typing.

134
00:10:32,700 --> 00:10:33,090
Cool.

135
00:10:33,300 --> 00:10:36,510
At this point, let's change gears and talk about security.

136
00:10:37,200 --> 00:10:43,320
Actually, instead of trying to use words to explain the security vulnerability here, let me just show

137
00:10:43,320 --> 00:10:44,160
you visually.

138
00:10:44,760 --> 00:10:49,040
So imagine I'm logged in to our application, but I am a malicious user.

139
00:10:49,590 --> 00:10:51,780
Well, in the chat box, I could do this.

140
00:10:51,780 --> 00:10:54,300
I could create a span element, right.

141
00:10:54,300 --> 00:11:02,440
In HTML element and inside the tags, I could say, hi, how are you?

142
00:11:03,000 --> 00:11:12,240
But on the opening span tag, I could say on mouse over equals quotes and then I could create a JavaScript

143
00:11:12,240 --> 00:11:20,730
alert message that says ha ha, JavaScript just ran close out the single quotes, close out the parentheses.

144
00:11:21,210 --> 00:11:29,310
Cool if I push enter and then if anyone hovered over this message, it runs the JavaScript code now

145
00:11:29,310 --> 00:11:34,680
instead of an alert box, that could be something malicious, that could be anything JavaScript is executing.

146
00:11:34,680 --> 00:11:35,430
And look at this.

147
00:11:35,700 --> 00:11:39,810
It's executing for anyone connected to the chat right now.

148
00:11:39,810 --> 00:11:43,050
If poor old innocent barks, a lot hovers over that message.

149
00:11:43,680 --> 00:11:49,860
Their account on our app is compromised and potentially they're having malware installed on their computer.

150
00:11:50,430 --> 00:11:56,190
So to protect our users from malicious users in the chat like this, let me show you what I would do.

151
00:11:56,700 --> 00:12:03,590
Let's begin on the server side and let's sanitize any incoming messages before we broadcast them out

152
00:12:03,590 --> 00:12:05,820
to any and all other connected users.

153
00:12:06,690 --> 00:12:09,480
So jump into app dot J.S..

154
00:12:10,670 --> 00:12:17,090
And towards the bottom of this file, remember, we have this area where we say Eyo on connection and

155
00:12:17,090 --> 00:12:23,560
then six or seven lines down, we have this area that says sock it on chat message from browser.

156
00:12:24,230 --> 00:12:26,630
So we are receiving an incoming message.

157
00:12:26,810 --> 00:12:31,130
And then this line is where we broadcast it out to any and all other users.

158
00:12:31,540 --> 00:12:38,930
So let's just do this for the data that we're sending out for the message property after message call.

159
00:12:39,050 --> 00:12:48,820
Let's get rid of data on message and instead, let's say sanitize each HTML parentheses to call it.

160
00:12:49,910 --> 00:12:55,310
So we've already included this package up towards the top of Applegate's, so we are free to leverage

161
00:12:55,310 --> 00:12:56,140
it here again.

162
00:12:57,020 --> 00:12:59,360
So within these parentheses, we give it two things.

163
00:12:59,360 --> 00:13:04,660
A, comma, B, the first argument is the string of text that we want to sanitize.

164
00:13:04,790 --> 00:13:08,360
So that would be data dot message.

165
00:13:08,780 --> 00:13:14,180
And then the second argument instead of the B placeholder would be an object.

166
00:13:14,180 --> 00:13:17,330
So curly brackets and we just give it a few options.

167
00:13:17,780 --> 00:13:26,090
So let's give it a property of allowed tags, colon and I don't want to allow any HTML tags.

168
00:13:26,090 --> 00:13:30,520
So an empty array, so empty square brackets, comma.

169
00:13:30,890 --> 00:13:39,890
Then we say aloud attributes colon and I don't want to allow any attributes so just an empty object.

170
00:13:40,640 --> 00:13:41,030
Cool.

171
00:13:41,030 --> 00:13:43,590
Let's go ahead and save this and test it out.

172
00:13:43,910 --> 00:13:49,310
Now remember we set things up so that when you send a message the server doesn't send it back to you,

173
00:13:49,310 --> 00:13:52,100
the author, it just sends it to everyone else.

174
00:13:52,550 --> 00:13:58,340
Meaning at the moment, if a malicious user tried to send over a bit of malicious code, yes, they'd

175
00:13:58,340 --> 00:14:03,770
be able to add it to their own chat log because that's not being processed by the server.

176
00:14:04,610 --> 00:14:06,890
So we can see the JavaScript still executes.

177
00:14:07,100 --> 00:14:11,100
But the idea is they're not able to do that for other or innocent users.

178
00:14:11,390 --> 00:14:14,480
So in this window, the bark's a lot window.

179
00:14:14,720 --> 00:14:18,350
Now, if I hover over that message, nothing bad happens.

180
00:14:18,350 --> 00:14:21,800
It has been sanitized to make the issue obvious.

181
00:14:21,800 --> 00:14:26,330
Back in this window, I could create a heading level one and say, hey there.

182
00:14:27,110 --> 00:14:33,140
And it's truly a heading level one for this user because the server isn't sanitizing it.

183
00:14:33,500 --> 00:14:37,520
But for all other users, clearly it's not a heading level one.

184
00:14:37,520 --> 00:14:37,740
Right.

185
00:14:37,790 --> 00:14:39,220
It's been sanitized.

186
00:14:39,740 --> 00:14:43,370
OK, let's take one extra security precaution.

187
00:14:43,970 --> 00:14:45,200
Let's assume the worst.

188
00:14:45,350 --> 00:14:51,680
Let's assume for some reason that server side sanitisation did not work for innocent users.

189
00:14:51,680 --> 00:14:56,600
We'd still want some sort of last line of defense within the client side.

190
00:14:57,310 --> 00:15:00,380
Let me show you what I would do back in our text editor.

191
00:15:00,380 --> 00:15:02,180
Let's jump in to chat.

192
00:15:02,720 --> 00:15:11,690
James, up at the very top of this file, I want to import in a package so even above the export default

193
00:15:11,690 --> 00:15:22,640
line, let's add a new line and let's say import dom, purify from quotes and then all lowercase dom

194
00:15:23,240 --> 00:15:23,990
purify.

195
00:15:24,470 --> 00:15:29,570
This is a package we've already used earlier in the course, so we do not need to worry about running

196
00:15:29,570 --> 00:15:31,030
NPM install.

197
00:15:31,580 --> 00:15:33,920
OK, and then I would just go leverage this.

198
00:15:34,250 --> 00:15:37,850
So let's find our display message from server method.

199
00:15:38,750 --> 00:15:42,980
For me it's around line number sixty eight and here's what I would do.

200
00:15:43,460 --> 00:15:46,700
So we are inserting adjacent HTML before the end.

201
00:15:46,970 --> 00:15:53,960
I would just select this entire template literal into my clipboard so I would begin selecting this first

202
00:15:53,960 --> 00:16:00,470
back tick and then I would just select until the closing back tick and I would cut all of that into

203
00:16:00,470 --> 00:16:03,230
my clipboard in its place.

204
00:16:03,230 --> 00:16:12,770
I would just say Dom, purify, dot, sanitize and sanitize as a method so it gets its own parentheses

205
00:16:12,770 --> 00:16:13,370
to call it.

206
00:16:13,610 --> 00:16:19,160
And then in those parentheses we can just paste back in our clipboard while we're at it.

207
00:16:19,160 --> 00:16:22,700
We could also do the same thing for send message to server.

208
00:16:23,900 --> 00:16:25,280
So if we scroll back up.

209
00:16:27,530 --> 00:16:33,590
Here is the send a message to server method now modifying this method would not actually enhance the

210
00:16:33,590 --> 00:16:34,980
security, right?

211
00:16:35,060 --> 00:16:41,690
We don't care if a malicious user wants to infect their own browser, but if you wanted to, you could

212
00:16:41,690 --> 00:16:49,430
do the same thing here so you could find the insert adjacent HTML, copy the entire back tick template

213
00:16:49,430 --> 00:16:58,370
into your clipboard copier, cut that and then just say Dom purified, sanitize parentheses and then

214
00:16:58,580 --> 00:17:00,020
paste back in that template.

215
00:17:00,020 --> 00:17:00,440
Literal.

216
00:17:01,040 --> 00:17:03,440
Let's go ahead and save this and test it out.

217
00:17:03,920 --> 00:17:11,360
So now back in the browser, if I refresh and if I pretend I'm a malicious user and paste in that span

218
00:17:11,360 --> 00:17:18,710
on mouseover code, you can see now even if I hover over it, that JavaScript has been sanitized or

219
00:17:18,710 --> 00:17:19,970
removed now.

220
00:17:19,970 --> 00:17:25,460
Yes, a malicious user could modify the JavaScript on their client side, but you get the idea.

221
00:17:25,670 --> 00:17:33,080
Dom Purify is now running both for messages from yourself and for messages from other users.

222
00:17:33,740 --> 00:17:39,890
So now, even if our server side sanitisation for some reason failed, we can rest assured that our

223
00:17:39,890 --> 00:17:44,400
innocent users still have client side sanitisation to protect them.

224
00:17:45,170 --> 00:17:47,270
That takes care of the security aspect.

225
00:17:47,390 --> 00:17:53,780
Now, one final detail before we bring this lesson to a close, and that is it would be nice if we could

226
00:17:53,780 --> 00:17:59,500
link to a user's profile when you hover over their username or avatar in the chat.

227
00:18:00,140 --> 00:18:04,670
So let me show you how we can set that up back within Chattooga.

228
00:18:04,700 --> 00:18:05,140
Yes.

229
00:18:05,150 --> 00:18:12,860
Let's find our display message from server method and within the HTML template, just find the link

230
00:18:12,860 --> 00:18:14,480
that is wrapped around the image.

231
00:18:15,020 --> 00:18:22,940
And instead of this hash tag for the graph, we could just say slash profile slash and then we'd want

232
00:18:22,940 --> 00:18:28,760
their username so we could say dollar sign, curly brackets and then DataDot username.

233
00:18:30,020 --> 00:18:36,110
We'd want to do the same thing as well for when you hover over their username so we could just copy

234
00:18:36,110 --> 00:18:38,570
and paste this value within these quotes.

235
00:18:39,230 --> 00:18:39,880
Copy that.

236
00:18:39,890 --> 00:18:45,370
And then within this HSF hash tag, replace that and paste in your clipboard.

237
00:18:46,160 --> 00:18:47,920
Lets go ahead and save that.

238
00:18:47,930 --> 00:18:57,790
And now if I refresh both instances of the front end and then say, hey, check out my profile.

239
00:18:58,760 --> 00:19:04,970
Well for all the users that would see that message, they see my username and avatar and you can see

240
00:19:04,970 --> 00:19:09,200
down in the bottom left corner when they hover over it, it would take them to that uttara.

241
00:19:10,070 --> 00:19:14,570
For example, if I click on this Avatar takes me to the Brad profile.

242
00:19:15,650 --> 00:19:16,010
Cool.

243
00:19:16,220 --> 00:19:20,810
That's going to bring this lesson to a close in our next lesson.

244
00:19:20,810 --> 00:19:25,910
We're going to change gears and it's going to be a quick miscellaneous fix, but we're going to learn

245
00:19:25,910 --> 00:19:32,840
how to make the title for each of our pages dynamic right now, no matter which page you go to, it

246
00:19:32,840 --> 00:19:36,830
always just says our app as the title, for example.

247
00:19:36,830 --> 00:19:43,850
It would be nice if when you go to a post if the title of the post was reflected in the title for this

248
00:19:43,850 --> 00:19:50,150
page, not only would this help with search engine optimization, but it's also just a nice change in

249
00:19:50,150 --> 00:19:50,690
general.

250
00:19:51,080 --> 00:19:55,550
So let's keep things rolling and I will see you in the next lesson.
