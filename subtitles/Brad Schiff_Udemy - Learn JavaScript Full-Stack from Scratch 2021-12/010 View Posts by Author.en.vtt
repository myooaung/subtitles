WEBVTT
1
00:00:01.890 --> 00:00:07.470
Hello, everyone, in this video we're going to pick up right where we left off in the previous lesson.

2
00:00:07.980 --> 00:00:14.010
All right, in your text, Ed, I want you to jump in to your user, control their file towards the

3
00:00:14.010 --> 00:00:14.400
bottom.

4
00:00:14.400 --> 00:00:17.960
You'll have a function named profile posts screen.

5
00:00:18.510 --> 00:00:24.390
Now, when we render this template, we're already passing it relevant username and avatar values.

6
00:00:24.660 --> 00:00:30.440
But we're also going to want to pass it the actual list of posts for this current author.

7
00:00:30.990 --> 00:00:33.440
So let me show you how I would set this up.

8
00:00:34.050 --> 00:00:38.700
So right above this response dot render line, but still within the function.

9
00:00:39.000 --> 00:00:42.960
Let's add a new line and we could write a comment here to stay organized.

10
00:00:42.960 --> 00:00:51.930
Let's say ask our post model for posts by a certain author I.D..

11
00:00:52.470 --> 00:00:57.330
So before we write the code to make this happen, we want to go up to the top of this user controller

12
00:00:57.330 --> 00:01:01.100
file and import or require in our post model.

13
00:01:01.500 --> 00:01:04.830
So scroll up to the top to save some typing.

14
00:01:04.830 --> 00:01:08.970
You could even just copy and paste this line where we require in the user model.

15
00:01:09.600 --> 00:01:16.950
So select that copy at right below it, paste it, change const to post and require in a file named

16
00:01:17.220 --> 00:01:17.880
post.

17
00:01:18.540 --> 00:01:19.020
All right.

18
00:01:19.020 --> 00:01:23.850
Now back down at the bottom of this file, underneath this comment that we just wrote to ourselves,

19
00:01:23.850 --> 00:01:26.400
let's say post dot.

20
00:01:26.790 --> 00:01:30.660
And this function doesn't exist yet, but we can create it in just a moment.

21
00:01:31.230 --> 00:01:40.440
We can choose any name we want, but let's call it Find by author I.D. This action would definitely

22
00:01:40.440 --> 00:01:42.000
need to talk to our database.

23
00:01:42.150 --> 00:01:47.420
So it's going to take a bit of time to complete so we could set this function up to return a promise.

24
00:01:47.820 --> 00:01:52.380
So right after it, we could just say dot then dot catch.

25
00:01:53.310 --> 00:01:57.360
Let's provide functions in both the then and catch parentheses.

26
00:01:59.960 --> 00:02:07.760
Do the same thing for catch if our promise rejected, so if the catch ran, it would have to be some

27
00:02:07.760 --> 00:02:14.230
unforeseen or technical issue and I wouldn't want to show the end user any sort of technical error message.

28
00:02:14.510 --> 00:02:21.770
So for the time being, just as a quick fix, we would just render our 404 so responsive, render 404.

29
00:02:22.310 --> 00:02:27.370
Unless something super unexpected happens, the promise is going to resolve successfully.

30
00:02:28.100 --> 00:02:33.200
Now, when we set up this promise, we're going to create it so that it resolves with a value.

31
00:02:33.680 --> 00:02:36.020
The value will be an array of posts.

32
00:02:36.620 --> 00:02:41.420
So within these function parentheses, let's include a parameter, let's call it posts.

33
00:02:42.020 --> 00:02:42.290
Right.

34
00:02:42.290 --> 00:02:45.580
Whatever the promise resolves with is going to get passed into this function.

35
00:02:46.250 --> 00:02:51.250
OK, and then within the body of this function is where we would want to actually render our template.

36
00:02:51.590 --> 00:02:55.360
So let's just cut and paste these four lines of code, right.

37
00:02:55.380 --> 00:02:57.980
We just want to move the response, not render command.

38
00:02:57.980 --> 00:03:00.050
So select that, cut it.

39
00:03:01.490 --> 00:03:05.330
And then up within our then function, just paste in your clipboard.

40
00:03:05.960 --> 00:03:11.600
By the time this code runs, we will have access to an array of posts which we would want to pass into

41
00:03:11.600 --> 00:03:12.200
our template.

42
00:03:12.800 --> 00:03:17.810
So right above this line, let's just add a property named posts.

43
00:03:18.690 --> 00:03:20.840
Give that a value of posts.

44
00:03:20.840 --> 00:03:22.520
Be sure to include a comma at the end.

45
00:03:23.270 --> 00:03:23.710
Cool.

46
00:03:23.840 --> 00:03:25.400
Let's go ahead and save this.

47
00:03:25.610 --> 00:03:33.620
And now we just need to go into our post model and create a function with this matching name that returns

48
00:03:33.620 --> 00:03:38.740
with a promise that eventually will resolve with the expected data from the database.

49
00:03:39.230 --> 00:03:46.180
Actually, one really important detail that I missed here within the parentheses for find by authorized,

50
00:03:46.520 --> 00:03:50.050
clearly we'd want to pass it in authorized to look for.

51
00:03:50.420 --> 00:03:59.060
So within these parentheses, let's just say request dot profile user dot underscore.

52
00:03:59.090 --> 00:04:00.800
I'd cool.

53
00:04:01.040 --> 00:04:04.310
Let's save this and now jump in to our post model.

54
00:04:04.700 --> 00:04:14.180
So within our models folder jump in to post J.S. Let's scroll down to the bottom and right above the

55
00:04:14.180 --> 00:04:17.090
closing module that exports equals post line.

56
00:04:17.090 --> 00:04:26.300
Let's add a new line and say post and that's uppercase post post dot find by author.

57
00:04:26.330 --> 00:04:32.660
I said let's set that to equal a function within these function parentheses.

58
00:04:32.660 --> 00:04:35.540
Let's include a parameter of author.

59
00:04:35.570 --> 00:04:41.510
I'd write because our controller is going to pass in the authorized that we're interested in.

60
00:04:41.900 --> 00:04:48.380
Now, before we begin building out the body of this function, I first want to point out that this function

61
00:04:48.380 --> 00:04:54.280
is going to be dangerously similar to our find single by IDE function.

62
00:04:55.130 --> 00:05:00.320
So if you scroll up we can find that function, find single by ID.

63
00:05:00.590 --> 00:05:07.160
The only real difference between these two functions is that one looks in the database for a match based

64
00:05:07.160 --> 00:05:13.730
on post ID, whereas the other would want to look in the database for a match where posts have a certain

65
00:05:13.730 --> 00:05:14.770
author ID.

66
00:05:15.380 --> 00:05:17.960
Aside from that, all of this is the same.

67
00:05:18.290 --> 00:05:23.960
We're still going to want to perform the look up the projection and we're still going to want to clean

68
00:05:23.960 --> 00:05:25.900
up the post author data.

69
00:05:26.420 --> 00:05:33.050
So if the only real unique difference between these two functions is going to be what comes in the aggregate

70
00:05:33.050 --> 00:05:39.650
before the lookup, so basically from here up, it doesn't make sense to have this much duplication

71
00:05:39.650 --> 00:05:40.250
going on.

72
00:05:40.730 --> 00:05:47.210
So in order to save a ton of duplication, what I want us to do is create a new function that both of

73
00:05:47.210 --> 00:05:49.040
these functions can leverage.

74
00:05:49.490 --> 00:05:50.710
Let me show you what I mean.

75
00:05:51.080 --> 00:05:59.270
So scroll up to where we see our find single BIID begins and let's just duplicate or copy and paste

76
00:05:59.270 --> 00:06:01.030
this entire function.

77
00:06:01.640 --> 00:06:09.770
So begin selecting from the start of this line all the way down until the closing curly bracket here.

78
00:06:10.400 --> 00:06:16.670
So you'll know to stop selecting ones you see post find by author ID do not select that.

79
00:06:17.420 --> 00:06:19.250
Just stop at this closing curly bracket.

80
00:06:19.250 --> 00:06:24.020
Let's copy that into our clipboard and then scroll back up above.

81
00:06:24.020 --> 00:06:27.610
Find single my ID and let's just paste it in.

82
00:06:28.250 --> 00:06:35.300
OK, so now we have this duplicate copy that we are free to manipulate and sort of hollow out on this

83
00:06:35.300 --> 00:06:36.320
duplicate copy.

84
00:06:36.320 --> 00:06:38.360
Let's change its name obviously.

85
00:06:38.390 --> 00:06:48.440
So let's get rid of this and say uppercase post dot, let's name it reuseable post query within the

86
00:06:48.440 --> 00:06:49.100
parentheses.

87
00:06:49.100 --> 00:06:54.230
For this function we can get rid of the ID parameter in this reuseable function.

88
00:06:54.230 --> 00:06:56.180
We do not need this if check.

89
00:06:56.720 --> 00:06:58.670
So go ahead and delete those for.

90
00:06:58.680 --> 00:06:59.670
More lines of code.

91
00:07:00.880 --> 00:07:08.910
OK, next, when we call aggregate on our posts collection, we no longer need to have this right because

92
00:07:08.910 --> 00:07:16.080
this is going to be the one operation that's unique between our find by authorized and fine by single

93
00:07:16.080 --> 00:07:16.950
post idee.

94
00:07:17.460 --> 00:07:19.320
So let's get rid of that line.

95
00:07:19.620 --> 00:07:25.200
And now everything in this aggregate is something that we'd want to do in both cases.

96
00:07:25.620 --> 00:07:26.300
OK, cool.

97
00:07:26.310 --> 00:07:27.550
Let's keep scrolling down.

98
00:07:28.110 --> 00:07:32.370
We definitely want to keep this logic that cleans up the post author property.

99
00:07:32.850 --> 00:07:37.110
Let's keep scrolling down within this new reuseable function.

100
00:07:37.320 --> 00:07:40.220
We no longer need this if else section.

101
00:07:40.800 --> 00:07:47.130
So just begin deleting from the start of if and end your deletion right after the closing curly bracket

102
00:07:47.130 --> 00:07:48.300
for the else block.

103
00:07:49.230 --> 00:07:51.000
Delete that in its place.

104
00:07:51.000 --> 00:07:55.250
Let's simply resolve with the value of posts.

105
00:07:55.890 --> 00:08:02.010
OK, now let's scroll back up and adjust the way that we are working with these aggregate options,

106
00:08:02.550 --> 00:08:10.080
since the only thing that's going to be unique is the operations that we call before this lookup operation.

107
00:08:10.710 --> 00:08:17.700
What we can do is this on the line where we create our reuseable post query function within these top

108
00:08:17.700 --> 00:08:20.040
level parentheses for our outer function.

109
00:08:20.310 --> 00:08:25.530
Let's include a parameter, let's name it, unique operations.

110
00:08:26.250 --> 00:08:28.500
I just made this name up, but let's go with this.

111
00:08:28.500 --> 00:08:30.820
So we're on the same page, OK?

112
00:08:30.900 --> 00:08:37.230
And now right before this line where we say let posts equal a wait post collection, let's add a new

113
00:08:37.230 --> 00:08:39.720
line and let's create a new variable.

114
00:08:39.720 --> 00:08:45.710
Let's say let ag operations short for aggregate operations.

115
00:08:46.080 --> 00:08:51.630
Let's set that to equal whatever array of operations was passed into this function.

116
00:08:51.720 --> 00:08:54.690
So unique operations.

117
00:08:54.960 --> 00:08:57.180
And then we can use an array method.

118
00:08:57.180 --> 00:09:01.950
So every array in JavaScript has a method named Concat.

119
00:09:02.790 --> 00:09:09.330
Concat is going to return a new array and whatever we give it in these parentheses, it's going to add

120
00:09:09.330 --> 00:09:11.510
that onto the original array.

121
00:09:12.120 --> 00:09:19.380
So within these concat parentheses, let's just move all of these aggregate operations, right?

122
00:09:19.440 --> 00:09:22.850
We want to move this entire array of operations.

123
00:09:23.430 --> 00:09:29.220
So on this line, when we call posts, collection, aggregate, begin selecting at the start of the

124
00:09:29.220 --> 00:09:30.840
square bracket for the array.

125
00:09:31.080 --> 00:09:33.980
We just want to cut and paste this entire array.

126
00:09:34.380 --> 00:09:40.830
So select the opening square bracket and then stop selecting at this closing square bracket.

127
00:09:41.430 --> 00:09:48.030
So cut that into your clipboard and then within the concat parentheses, we can just paste in your clipboard.

128
00:09:48.600 --> 00:09:52.500
OK, and then on this line where we say let posts equal.

129
00:09:53.100 --> 00:09:59.190
Well, now within the aggregate parentheses, we can just pull in our ag operations array.

130
00:09:59.490 --> 00:10:05.610
Right, because that's going to take the only unique parts and then add on the shared or common parts.

131
00:10:06.420 --> 00:10:09.660
So add operations.

132
00:10:10.350 --> 00:10:10.740
Cool.

133
00:10:10.740 --> 00:10:14.490
At this point, our reuseable post query function is complete.

134
00:10:14.850 --> 00:10:16.350
Now let's go leverage it.

135
00:10:16.800 --> 00:10:23.620
So let's scroll down until we find our find single by IDE function, OK?

136
00:10:23.670 --> 00:10:28.350
And now we can delete a bunch of otherwise duplicated code within this function.

137
00:10:28.950 --> 00:10:35.130
Begin deleting at the start of this let posts line and let's select and keep scrolling down.

138
00:10:36.120 --> 00:10:37.110
Keep scrolling.

139
00:10:37.950 --> 00:10:44.430
You can stop selecting right before this if post length line.

140
00:10:44.940 --> 00:10:50.370
So I'm stopping my selection to delete right after this closing curly bracket in parentheses that comes

141
00:10:50.370 --> 00:10:51.780
after return post.

142
00:10:52.200 --> 00:10:53.220
Let's delete that.

143
00:10:54.150 --> 00:10:56.520
OK, in its place, let's do this.

144
00:10:56.520 --> 00:11:03.240
Let's say let posts equal and we know that our reuseable function returns a promise.

145
00:11:03.240 --> 00:11:09.660
So let's say a wait uppercase post reuseable post query.

146
00:11:10.290 --> 00:11:15.510
And then all we need to include in these parentheses is the one part of the query that's unique.

147
00:11:15.810 --> 00:11:18.900
So we give it an array of aggregate operations.

148
00:11:19.050 --> 00:11:21.720
So square brackets to create an array.

149
00:11:22.170 --> 00:11:28.350
We only need one operation, the match operation, but feel free to dropdown just to stay organized.

150
00:11:28.680 --> 00:11:31.020
So each operation is an object.

151
00:11:31.410 --> 00:11:35.640
And then we would say dollar sign, match colon.

152
00:11:36.420 --> 00:11:41.190
And then we'd give that an object and then we would just match it based on the field that we're interested

153
00:11:41.190 --> 00:11:41.370
in.

154
00:11:41.370 --> 00:11:50.520
So underscore ID should match and then we just say a new instance of Mongu DHBs Object ID and we give

155
00:11:50.520 --> 00:11:51.720
that ID.

156
00:11:52.560 --> 00:11:57.000
Cool, so we've leveraged our reusable post query from within this function.

157
00:11:57.330 --> 00:12:04.860
Now let's scroll down and within our empty find by author IDX function, let's just leverage that reusable

158
00:12:04.860 --> 00:12:11.580
function again now, because in this case, we are completely OK with returning an empty array of posts.

159
00:12:11.970 --> 00:12:15.600
Right, because maybe an author doesn't have any posts yet.

160
00:12:16.140 --> 00:12:23.010
Since that's the case, we don't need really any logic in this function, meaning since our reusable

161
00:12:23.010 --> 00:12:31.050
function returns a promise, we can just say return and then call that reusable functions of post dot,

162
00:12:31.470 --> 00:12:33.620
reusable post query.

163
00:12:34.380 --> 00:12:37.850
And since it returns a function, that's what this is going to return.

164
00:12:38.130 --> 00:12:44.360
So ultimately, our controller will still be working with the promise when it calls find by authorized.

165
00:12:44.640 --> 00:12:51.840
OK, now within the reusable parentheses here, we just want an array of aggregate operations so square

166
00:12:51.840 --> 00:12:54.060
brackets feel free to dropdown.

167
00:12:54.930 --> 00:12:57.090
Each operation should be an object.

168
00:12:57.090 --> 00:12:58.270
So curly brackets.

169
00:12:58.830 --> 00:13:03.860
So first, let's say match and that should have an object as its value.

170
00:13:04.560 --> 00:13:08.670
We would want to match by the author field write.

171
00:13:08.670 --> 00:13:13.550
Each post is going to contain an author field with a matching ID.

172
00:13:14.160 --> 00:13:19.820
So we're interested in any documents where that set to whatever is getting passed into this function.

173
00:13:19.830 --> 00:13:27.140
So author I said, OK, now we are going to want a second operation in this array.

174
00:13:27.300 --> 00:13:35.190
So at the end of this line, comma, and then a new object, let's say dollar signs sort essentially

175
00:13:35.190 --> 00:13:39.660
we just want to sort things so that the newest posts are at the top.

176
00:13:40.230 --> 00:13:40.490
Right.

177
00:13:40.500 --> 00:13:42.230
The most recent should come first.

178
00:13:42.570 --> 00:13:48.870
So a new object, the field that we want to sort by should be the created de colon.

179
00:13:49.290 --> 00:13:56.090
We can give it a value of one for ascending order or a value of negative one for descending order.

180
00:13:56.610 --> 00:13:58.080
In this case, that's what we want.

181
00:13:58.440 --> 00:14:01.290
Let's go ahead and save this and test it out.

182
00:14:01.710 --> 00:14:04.710
To refresh your memory, let's jump into user controller.

183
00:14:05.820 --> 00:14:09.960
So remember, we are working on the profile posts screen.

184
00:14:10.530 --> 00:14:12.840
This is what it would look like in the Web browser.

185
00:14:13.170 --> 00:14:18.360
And now we just want to pull in and use real data for this list of posts.

186
00:14:19.050 --> 00:14:24.720
So we are already passing posts into our render template.

187
00:14:25.050 --> 00:14:31.750
So all we need to do is jump into our profile template and leverage the posts array.

188
00:14:32.190 --> 00:14:33.290
Let me show you what I mean.

189
00:14:33.540 --> 00:14:42.570
So jump into profile SJS and around line number 17, you'll see a div with a class of list group.

190
00:14:43.140 --> 00:14:46.140
Inside it you'll see three elements.

191
00:14:46.650 --> 00:14:50.190
So example, post one, two and three.

192
00:14:50.730 --> 00:14:53.700
So we want to hollow this out and make it dynamic.

193
00:14:54.060 --> 00:15:00.390
So let's copy and paste one of the elements into our clipboard so we can use it as a template.

194
00:15:00.930 --> 00:15:04.230
So just select these four lines of code for the example.

195
00:15:04.230 --> 00:15:08.310
First aliment, copy that into your clipboard, OK?

196
00:15:08.310 --> 00:15:11.700
And now let's delete all three of those elements.

197
00:15:13.760 --> 00:15:20.480
OK, instead, we want to do something dynamic, so let's say less than percentage, and then to close

198
00:15:20.480 --> 00:15:26.300
that percentage greater than what we want to do is begin working with our posts.

199
00:15:26.300 --> 00:15:34.430
Ouray, we would want to do something once for each item in this array so we can say posts dot for each

200
00:15:35.120 --> 00:15:37.280
in these parentheses, we would give it a function.

201
00:15:39.340 --> 00:15:45.550
In the parentheses, let's include a parameter named post, OK, now in the body of that function on

202
00:15:45.550 --> 00:15:47.840
this line, just paste in your clipboard.

203
00:15:48.760 --> 00:15:53.730
Now we do need to handle the dropping in and out of dynamic mode in Ejaz.

204
00:15:53.980 --> 00:16:00.790
So at the end of this line, after the opening curly bracket, let's say percentage greater than and

205
00:16:00.790 --> 00:16:05.940
then on this line at the start of it, let's say less than percentage.

206
00:16:06.400 --> 00:16:06.710
Cool.

207
00:16:07.000 --> 00:16:13.020
Now we just need to go through this HTML template and use dynamic values where it makes sense.

208
00:16:13.570 --> 00:16:15.960
So first we see an H ref value.

209
00:16:16.900 --> 00:16:23.380
This should be the oral if you click on one of these list items or one of these links.

210
00:16:24.040 --> 00:16:30.990
So we would want to keep a value of slash post slash, but then we would want this to be unique.

211
00:16:31.600 --> 00:16:39.430
So get rid of this hard coded post ID and instead, let's say less than percentage equal sine percentage

212
00:16:39.430 --> 00:16:44.040
greater than in between post dot underscore ID.

213
00:16:44.710 --> 00:16:48.810
OK, next, let's update the author Avatar for each post.

214
00:16:49.180 --> 00:16:59.170
So on this image element, let's get rid of its source value and instead do something dynamic and say

215
00:16:59.320 --> 00:17:05.900
post dot author Dot Avatar on the next line of code.

216
00:17:05.920 --> 00:17:08.110
This should be the title of the post.

217
00:17:08.530 --> 00:17:10.350
So get rid of that hard coded value.

218
00:17:10.660 --> 00:17:15.400
Do something dynamic and just say post dot title.

219
00:17:15.910 --> 00:17:22.870
OK, and finally for the date, in order to save a bunch of typing, let's just copy and paste the dynamic

220
00:17:22.870 --> 00:17:26.220
date code from another file where we already set that up.

221
00:17:26.770 --> 00:17:38.170
So in your views folder, jump into single dash post dash screen SJS around line number sixteen.

222
00:17:38.170 --> 00:17:41.260
If we scroll over to the right a bit, you'll see the date.

223
00:17:41.590 --> 00:17:49.660
So just begin selecting right after the word on here and just select all the way until the closing percentage

224
00:17:49.660 --> 00:17:50.680
greater than simple.

225
00:17:51.160 --> 00:17:56.260
So copy that into your clipboard and then back in profile dot SJS.

226
00:17:57.070 --> 00:18:01.240
Just get rid of this hardcoded date value and paste in your clipboard.

227
00:18:02.050 --> 00:18:06.940
OK, let's go ahead and save this and test it out to back in the browser.

228
00:18:07.420 --> 00:18:10.660
If I refresh this profile screen for the Brad user.

229
00:18:11.290 --> 00:18:11.890
Awesome.

230
00:18:11.890 --> 00:18:16.540
We just see one post my second post created on June 9th.

231
00:18:16.540 --> 00:18:20.740
And if I click on this, it takes me to the individual.

232
00:18:20.740 --> 00:18:22.840
You URL for that one post.

233
00:18:23.260 --> 00:18:23.590
Cool.

234
00:18:23.590 --> 00:18:29.950
Let's go back to the user profile screen and let's create another post just to make sure that this template

235
00:18:29.950 --> 00:18:32.020
works with multiple posts.

236
00:18:32.410 --> 00:18:40.480
So up in the header I will click create post, give it a title of yet another post and the content can

237
00:18:40.480 --> 00:18:40.840
be.

238
00:18:41.500 --> 00:18:47.560
I am very skilled at creating posts, but submit that.

239
00:18:48.980 --> 00:18:54.950
We can fix this awkward intermediate screen a bit later on, but in your address bar, just go back

240
00:18:54.950 --> 00:18:55.880
to your profile.

241
00:18:55.880 --> 00:18:58.540
You are our profile.

242
00:18:58.550 --> 00:19:00.140
Slash your username.

243
00:19:01.250 --> 00:19:04.160
If you use your browser back button, you might need to refresh.

244
00:19:04.160 --> 00:19:05.120
But awesome.

245
00:19:05.450 --> 00:19:08.600
We see multiple posts at this point.

246
00:19:08.600 --> 00:19:11.860
We've made significant progress on the post feature.

247
00:19:12.290 --> 00:19:20.210
If we think back to the CRUD acronym, so far we've taken care of the first two letters create and read.

248
00:19:20.600 --> 00:19:23.140
Up next in the acronym would be the U.

249
00:19:23.150 --> 00:19:24.860
Which stands for Update.

250
00:19:25.280 --> 00:19:28.400
And that's exactly what we're going to cover in the next lesson.

251
00:19:28.820 --> 00:19:34.550
So if you click on one of these to view that individual post, you'll notice that there's this blue

252
00:19:35.060 --> 00:19:36.260
edit button here.

253
00:19:36.710 --> 00:19:40.760
If you're the author of a post, you should be able to edit or update it.

254
00:19:41.270 --> 00:19:43.100
This should be a fun feature to work on.

255
00:19:43.220 --> 00:19:47.480
So let's keep things rolling and I'll see you in the next lesson.
