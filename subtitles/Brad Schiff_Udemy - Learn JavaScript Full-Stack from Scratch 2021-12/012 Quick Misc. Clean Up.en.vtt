WEBVTT
1
00:00:01.890 --> 00:00:02.880
Hello, everyone.

2
00:00:03.270 --> 00:00:09.240
This lesson should be very quick, I just want us to set up a few more precautions regarding the data

3
00:00:09.240 --> 00:00:10.950
that visitors are sending over.

4
00:00:11.370 --> 00:00:17.380
And then at the end of this lesson, we can segway into actually saving this data into a database.

5
00:00:17.730 --> 00:00:18.090
All right.

6
00:00:18.090 --> 00:00:20.770
Without further ado, let's jump right into the action.

7
00:00:21.090 --> 00:00:27.300
So first, I want to make sure that a visitor is not allowed to send anything for these values other

8
00:00:27.300 --> 00:00:29.190
than a simple string of text.

9
00:00:29.550 --> 00:00:35.030
So I do not want to accept an object or an array or anything that's not a string.

10
00:00:35.520 --> 00:00:42.090
So let me show you how I would set this up within our text editor, within our user model file towards

11
00:00:42.090 --> 00:00:44.760
the bottom, within our register function.

12
00:00:45.120 --> 00:00:48.800
This is where we are actually calling our validate function.

13
00:00:49.230 --> 00:00:54.690
Well, right above this line where we say this dot validate and call that right above that.

14
00:00:54.690 --> 00:00:58.530
Let's add a new line and say this dot clean up.

15
00:00:59.010 --> 00:01:00.240
I just made this name up.

16
00:01:00.240 --> 00:01:03.720
But now let's go ahead and create a function with this matching name.

17
00:01:04.560 --> 00:01:09.630
The idea is that I just want to keep this code separate from our validation rules.

18
00:01:10.260 --> 00:01:15.120
So I named it lowercase, clean and then uppercase you it for up cleanup.

19
00:01:15.570 --> 00:01:22.200
So maybe right above our validate function definition, let's add a new line and say uppercase user

20
00:01:22.200 --> 00:01:31.960
dot prototype dot clean up equals and then just set it to equal a function of parentheses, curly brackets.

21
00:01:32.460 --> 00:01:38.310
Now within this clean up function, let's do this, let's check to see if whatever they submitted for

22
00:01:38.310 --> 00:01:41.420
the user name is anything other than a string.

23
00:01:42.270 --> 00:01:50.100
So let's say if parentheses curly brackets for our condition, let's say if and then in JavaScript there's

24
00:01:50.100 --> 00:01:57.900
a function named type of now depending on what we pass into this function, it's going to return that

25
00:01:57.900 --> 00:01:59.640
type of value that it is.

26
00:02:00.030 --> 00:02:07.980
So within these parentheses, let's pass in this dot data dot username and then in between these two

27
00:02:07.980 --> 00:02:14.460
closing parentheses, let's say if that does not equal string.

28
00:02:14.880 --> 00:02:23.190
So all together we're saying if the user name value does not have a type of string, well, then within

29
00:02:23.190 --> 00:02:28.530
these curly brackets, let's just set the user name value to be an empty pair of quotes.

30
00:02:28.950 --> 00:02:34.520
So this dot data dot username equals empty pair of quotes.

31
00:02:35.310 --> 00:02:42.740
This way we are getting rid of or completely ignoring whatever non string value this was set to previously

32
00:02:43.140 --> 00:02:46.860
instead of we're just setting it to a completely safe, empty string of text.

33
00:02:47.040 --> 00:02:51.820
And then from there are other validation rules can take care of that, right?

34
00:02:51.840 --> 00:02:55.020
It will catch that the user name is blank and it will throw this error.

35
00:02:55.290 --> 00:02:56.940
You must provide a user name.

36
00:02:57.330 --> 00:03:03.450
OK, now within our cleanup function, let's copy and paste or duplicate this line of code.

37
00:03:03.870 --> 00:03:09.000
So let's copy this and let's actually paste it once and twice.

38
00:03:09.360 --> 00:03:11.400
So we had the same line of code three times.

39
00:03:11.610 --> 00:03:18.120
Let's just adjust things for the second and third line to check the email and password respectively.

40
00:03:18.510 --> 00:03:21.300
So on the second line, change this to email.

41
00:03:22.020 --> 00:03:28.440
If the email is something other than a string, let's just set this data email to an empty pair of quotes

42
00:03:28.680 --> 00:03:31.470
and then finally do the same thing on this line for password.

43
00:03:31.980 --> 00:03:33.920
Change it here as well as at the end here.

44
00:03:35.550 --> 00:03:37.500
OK, let's change gears now.

45
00:03:37.500 --> 00:03:44.280
Let's set things up so that if the request has any extra bogus properties other than just these three

46
00:03:44.280 --> 00:03:49.720
username, email and password, well, we would want to ignore those other properties.

47
00:03:50.160 --> 00:03:51.990
Let me show you how I would set this up.

48
00:03:52.290 --> 00:03:57.960
So right below this line, but still within our cleanup function, let's add a new line and we can even

49
00:03:57.960 --> 00:04:04.710
write a comment here to stay organized and say get rid of any bogus properties.

50
00:04:05.310 --> 00:04:11.430
And to do this, I would just say this data equals an object.

51
00:04:11.430 --> 00:04:17.880
So curly brackets and then within those curly brackets, I would just manually spell out the fields

52
00:04:17.880 --> 00:04:19.320
that I actually want.

53
00:04:19.650 --> 00:04:24.990
So I would say user name should be this dot data username, comma.

54
00:04:25.080 --> 00:04:30.270
I would say email is this dot data, dot email, comma.

55
00:04:30.270 --> 00:04:34.680
And then I'd say password should be this dot data dot password.

56
00:04:35.580 --> 00:04:39.210
This way we are cleaning up or purifying our data property.

57
00:04:39.420 --> 00:04:49.170
If the visitor sent over any bogus properties like sky color or Bhave food.

58
00:04:49.590 --> 00:04:49.890
Right.

59
00:04:49.920 --> 00:04:51.270
We don't care about that.

60
00:04:51.390 --> 00:04:55.950
We just want to completely ignore that and get that out of our data property.

61
00:04:56.310 --> 00:05:01.200
So this way we are overwriting or updating our data property.

62
00:05:01.570 --> 00:05:07.870
To refresh your memory back in user controller, remember when we say lower case user equals a new instance

63
00:05:07.870 --> 00:05:12.670
of our upper case user blueprint, that's where we are passing in as an argument.

64
00:05:12.880 --> 00:05:15.260
The form data that was just submitted, right.

65
00:05:15.360 --> 00:05:16.440
Request body.

66
00:05:16.870 --> 00:05:22.270
So back in user model, that's what we are receiving with this data parameter and that's what we're

67
00:05:22.270 --> 00:05:24.130
saving into this data.

68
00:05:24.610 --> 00:05:31.810
So in case that included any bogus properties, we're just updating it or overwriting it again by manually

69
00:05:31.810 --> 00:05:34.490
spelling out which properties we actually want.

70
00:05:34.840 --> 00:05:37.490
Now, while we're at it, we can also clean things up further.

71
00:05:38.080 --> 00:05:45.670
So, for example, on the user name, right after we say this data user name here, let's say dot trim

72
00:05:46.270 --> 00:05:51.340
the trim method, we'll get rid of any empty spaces at the beginning or end of the value.

73
00:05:51.760 --> 00:05:57.130
So, for example, if someone typed the username of space, space, space, space, Brad, and then

74
00:05:57.130 --> 00:06:02.320
five more spaces, well, we don't want to acknowledge or accept those spaces.

75
00:06:02.530 --> 00:06:05.470
We would want to trim that empty white space.

76
00:06:05.650 --> 00:06:09.580
So we just end up with the actual characters that they typed in.

77
00:06:10.690 --> 00:06:13.830
So the trim method will take care of that on a string of text.

78
00:06:14.140 --> 00:06:19.510
Let's also after Trem say dot to lower case.

79
00:06:20.080 --> 00:06:20.280
Right.

80
00:06:20.320 --> 00:06:23.740
So that way we are forcing the user name to be all lowercase letters.

81
00:06:23.740 --> 00:06:25.660
It will convert whatever they typed in.

82
00:06:26.080 --> 00:06:28.320
OK, let's do the same thing for their email address.

83
00:06:28.320 --> 00:06:37.300
So after email here, let's say Dot Trem and let's also call to lowercase and then for the password.

84
00:06:37.420 --> 00:06:41.410
We do not want to trim or convert to lowercase for the password.

85
00:06:41.650 --> 00:06:48.010
In the case of a password, we do want to honor or respect them pressing the space key however many

86
00:06:48.010 --> 00:06:49.640
times they see fit right.

87
00:06:49.660 --> 00:06:56.920
A space is a valid part of a password and obviously we would want to allow for lowercase and uppercase

88
00:06:56.920 --> 00:07:00.860
letters in the password so it doesn't need trem or to lowercase.

89
00:07:01.300 --> 00:07:07.360
OK, let's go ahead and save this file and that's really all we needed to accomplish in this lesson.

90
00:07:07.690 --> 00:07:13.120
So we have now protected ourselves from visitors trying to submit something other than simple strings

91
00:07:13.120 --> 00:07:13.840
of text.

92
00:07:14.170 --> 00:07:18.220
We've also ignored any extra bogus properties they try to send over.

93
00:07:18.910 --> 00:07:23.530
And we also trimmed and converted the email and username to lowercase cool.

94
00:07:23.710 --> 00:07:28.270
At this point, we're ready to try saving a user into a database.

95
00:07:28.630 --> 00:07:34.570
If you scroll down to the bottom of our user model file, remember that within our register function

96
00:07:35.050 --> 00:07:37.180
we already wrote ourselves comments, right?

97
00:07:37.180 --> 00:07:40.140
We said step number one, validate the user data.

98
00:07:40.150 --> 00:07:40.960
So we've done that.

99
00:07:41.110 --> 00:07:43.570
We've cleaned up the data and we validated it.

100
00:07:43.960 --> 00:07:51.760
Now, step number two, only if there are zero validation errors, then let's actually save the data

101
00:07:51.760 --> 00:07:52.750
into a database.

102
00:07:53.200 --> 00:07:57.130
And that is exactly what we are ready to set up in our next lesson.

103
00:07:57.130 --> 00:08:00.550
Now, let's keep things rolling and I will see you then.
