1
00:00:00,600 --> 00:00:06,930
At this point, let's save this file and now we need to jump in to our post model and create a function

2
00:00:06,930 --> 00:00:14,490
named update that returns a promise and we'll either resolve or reject in a way that follows this pattern

3
00:00:14,490 --> 00:00:15,990
or structure that we just set up.

4
00:00:16,530 --> 00:00:24,300
So let's jump into our uppercase postgrads model file and let's scroll down and find our create method.

5
00:00:25,710 --> 00:00:28,140
So here is a post prototype.

6
00:00:28,470 --> 00:00:30,870
Create maybe right below this.

7
00:00:30,870 --> 00:00:32,850
Let's create our update method.

8
00:00:34,500 --> 00:00:42,810
So right above our postdoc reusable query, I'm going to add a new line and say Post Dot Prototyp DOT

9
00:00:43,140 --> 00:00:43,840
update.

10
00:00:44,400 --> 00:00:46,980
Let's set that to equal a function.

11
00:00:47,800 --> 00:00:51,810
And remember, our controller expects this function to return a promise.

12
00:00:52,200 --> 00:00:58,520
So return a new instance of promise within the parentheses for promise.

13
00:00:58,530 --> 00:01:01,690
Let's give it an arrow function parentheses.

14
00:01:01,860 --> 00:01:04,890
Be sure to include resolve and reject.

15
00:01:05,520 --> 00:01:10,950
After those parentheses, we can include the arrow symbol and then a pair of curly brackets.

16
00:01:11,880 --> 00:01:19,410
OK, now within this function, our first step should be to find the relevant post document in the database,

17
00:01:19,710 --> 00:01:26,010
because before we worry about updating anything, we want to make sure that the post ID that was just

18
00:01:26,010 --> 00:01:27,540
included in this URL.

19
00:01:27,720 --> 00:01:29,280
Well, does it even exist?

20
00:01:29,550 --> 00:01:31,350
Is that even a valid ID?

21
00:01:31,680 --> 00:01:39,210
And we need to know who the author of it is so we could directly use the Mongo DB, find one method

22
00:01:39,210 --> 00:01:40,200
on our collection.

23
00:01:40,590 --> 00:01:48,780
However, we've already created a method named Bind single by ID and that functions already going to

24
00:01:48,780 --> 00:01:55,200
check to make sure that the incoming ID is valid, that it's a string of text and not a malicious object.

25
00:01:55,470 --> 00:02:01,920
And it's also going to automatically run the check to see if the current visitor is the owner of that

26
00:02:01,920 --> 00:02:02,490
post.

27
00:02:02,850 --> 00:02:03,870
So let's do this.

28
00:02:03,870 --> 00:02:11,880
Let's set up a try block and then right below that, let's set up a catch block, OK, within the tribe

29
00:02:11,880 --> 00:02:12,210
block.

30
00:02:12,210 --> 00:02:13,680
What do we want to try to do?

31
00:02:14,130 --> 00:02:21,180
Let's create a variable named post and let's set that to equal and then just call our find single by

32
00:02:21,180 --> 00:02:21,960
IDE method.

33
00:02:21,960 --> 00:02:26,610
So uppercase post find single by IDE.

34
00:02:27,240 --> 00:02:30,660
To refresh your memory, we'd want to give this function to arguments.

35
00:02:30,660 --> 00:02:36,420
So Akama be the first argument is the post idy that you want to look up.

36
00:02:36,810 --> 00:02:42,660
Now back in our controller, when we said that we wanted to create a new instance of our post blueprint,

37
00:02:42,990 --> 00:02:46,920
we made sure to pass into it the requested post ID.

38
00:02:47,430 --> 00:02:51,030
So let's do this, let's scroll up to the very top of this file.

39
00:02:51,390 --> 00:02:55,530
And this is our constructor function within the parentheses.

40
00:02:55,530 --> 00:02:59,130
We already have two parameters, data and user ID.

41
00:02:59,490 --> 00:03:05,430
Let's out a third, so comma and let's call it requested post ID.

42
00:03:06,210 --> 00:03:15,720
OK then within our constructor function, let's just say this dot requested post ID equals and then

43
00:03:15,720 --> 00:03:17,310
just pull in the parameter value.

44
00:03:17,310 --> 00:03:20,010
So requested post ID.

45
00:03:20,430 --> 00:03:20,850
Cool.

46
00:03:21,030 --> 00:03:24,990
Now we can access this from within any of our prototype methods.

47
00:03:25,440 --> 00:03:28,170
So let's go back down to our update method.

48
00:03:30,060 --> 00:03:33,990
OK, and remember we are calling our find single by ID.

49
00:03:34,290 --> 00:03:43,280
So this first argument should be the post ID instead of a we can just say this dot requested post ID.

50
00:03:43,830 --> 00:03:48,690
OK, the second argument instead of B, this should be the current visitor ID.

51
00:03:49,230 --> 00:03:55,950
We've already stored that on our object so we can just say this dot user ID, OK, now right below this

52
00:03:55,950 --> 00:03:58,110
line, still within the tribe block.

53
00:03:58,290 --> 00:04:00,600
We're going to want to set up an if statement.

54
00:04:00,870 --> 00:04:05,220
However, let's not forget that this is going to return a promise.

55
00:04:05,610 --> 00:04:07,530
It's going to take some time to complete.

56
00:04:07,830 --> 00:04:15,330
So right before it in between post and the equals sign, let's add a weight also since we can only use

57
00:04:15,330 --> 00:04:20,210
a weight within an async function right before the parentheses for our arrow function.

58
00:04:20,220 --> 00:04:22,890
So right here, let's just say async.

59
00:04:23,310 --> 00:04:23,730
Cool.

60
00:04:23,730 --> 00:04:28,620
So now on this line we can reliably access this post variable.

61
00:04:28,920 --> 00:04:32,160
It's going to be the post document that this resolves with.

62
00:04:32,340 --> 00:04:38,970
And since this function uses our reusable query function, it's going to already have a property named

63
00:04:39,270 --> 00:04:40,620
is visiter owner.

64
00:04:41,040 --> 00:04:45,390
So we're going to write an if statement on this line, but I don't want to get sidetracked yet.

65
00:04:45,390 --> 00:04:49,830
So I'm just going to write a little comment here that says if and we can circle back to this.

66
00:04:50,250 --> 00:04:57,200
But first, let's ask ourselves, what if this function can't find a post with the matching ID write?

67
00:04:57,210 --> 00:04:59,820
What if someone sends a bogus you URL with something that.

68
00:04:59,880 --> 00:05:01,860
Is not a valid ID at all.

69
00:05:02,160 --> 00:05:08,250
Well, we've already set up this promise to reject if that's the case, right.

70
00:05:08,270 --> 00:05:14,280
If this is not a valid, innocent I.D. or if it's not an ID that exists in our database, this promise

71
00:05:14,280 --> 00:05:15,060
rejects.

72
00:05:15,360 --> 00:05:21,780
And since we are within a tri block, if this promise rejects, our catch will automatically take care

73
00:05:21,780 --> 00:05:22,050
of it.

74
00:05:22,500 --> 00:05:25,020
So big picture within the catch block.

75
00:05:25,050 --> 00:05:28,560
This is where we would want our overall promise to reject.

76
00:05:29,700 --> 00:05:32,850
OK, now let's circle back to this if statement that we want to.

77
00:05:32,850 --> 00:05:33,180
Right.

78
00:05:33,720 --> 00:05:38,970
Let's say this if parentheses curly brackets right after that.

79
00:05:38,970 --> 00:05:40,800
Let's also add an else block.

80
00:05:41,640 --> 00:05:52,290
And for our condition, let's just say if lowercase post DOT is visiter owner, if this is true, then

81
00:05:52,320 --> 00:05:55,820
we are safe to actually update the database document.

82
00:05:56,190 --> 00:06:01,120
So let's write a comment to ourselves, actually update the DB.

83
00:06:01,770 --> 00:06:05,930
We'd also want to resolve our promise here, but else.

84
00:06:05,940 --> 00:06:11,930
Otherwise, if this is false, that means whoever is trying to send this request is up to no good.

85
00:06:11,960 --> 00:06:12,150
Right?

86
00:06:12,240 --> 00:06:14,480
They're not the owner or creator of the post.

87
00:06:14,790 --> 00:06:18,660
So then the else block we would just want this promise to reject.

88
00:06:19,260 --> 00:06:19,830
All right.

89
00:06:19,830 --> 00:06:22,530
Now let's circle back to this area where we have the comment.

90
00:06:22,860 --> 00:06:30,060
Actually, update the DB We could write the code that talks to the Mongo DB database right here, but

91
00:06:30,060 --> 00:06:33,800
we are already indented several layers deep here.

92
00:06:34,530 --> 00:06:40,290
So just for the sake of organization and not being indented, even several layers deeper, let's do

93
00:06:40,290 --> 00:06:43,080
this right below this comment line.

94
00:06:43,380 --> 00:06:48,030
Let's say this DOT actually update.

95
00:06:48,810 --> 00:06:52,250
This method doesn't exist yet, but we can create it in just a moment.

96
00:06:52,560 --> 00:06:57,510
Let's set it up to return a promise and then right before it, we can just say, oh, wait.

97
00:06:58,110 --> 00:07:03,720
So within this method, actually update is where we will talk to the Mongo DB database.

98
00:07:03,930 --> 00:07:08,890
And then once that has actually completed, this overall promise will resolve.

99
00:07:09,330 --> 00:07:12,510
So let's go create this actually update method.

100
00:07:12,900 --> 00:07:16,290
Let's scroll down right after our update method ends.

101
00:07:16,290 --> 00:07:21,900
And right before this reuseable post query, let's create a brand new line and say uppercase post,

102
00:07:22,290 --> 00:07:25,840
prototype dot actually update.

103
00:07:26,310 --> 00:07:30,840
Let's set this to equal a function within the body of the function.

104
00:07:30,840 --> 00:07:36,960
Let's return a promise to return a new instance of promise within these parentheses.

105
00:07:36,960 --> 00:07:39,630
Let's give it an async arrow function.

106
00:07:39,630 --> 00:07:46,020
So async parentheses, arrow symbol, curly brackets within those parentheses.

107
00:07:46,020 --> 00:07:49,590
Let's be sure to give it resolve and reject.

108
00:07:50,160 --> 00:07:58,290
OK, within this function, let's call this clean up and let's call r this dot validate.

109
00:07:58,710 --> 00:08:01,350
OK, after that let's run an if statement.

110
00:08:01,350 --> 00:08:04,290
Let's say if parentheses curly brackets.

111
00:08:04,530 --> 00:08:09,030
Let's also include an else block for the condition within the parentheses.

112
00:08:09,030 --> 00:08:15,300
Let's say this dot errors dot link, let's actually check for the opposite of that.

113
00:08:15,300 --> 00:08:17,730
So include an exclamation right before this.

114
00:08:18,030 --> 00:08:24,060
So we're saying if there are no validation errors then we would actually want to make these updates

115
00:08:24,060 --> 00:08:25,140
in the database.

116
00:08:25,500 --> 00:08:29,730
So let's use our object that represents the Mongo DB posts collection.

117
00:08:30,090 --> 00:08:34,170
We've already set that up at the top of this files of posts collection.

118
00:08:34,740 --> 00:08:41,750
Let's look inside it for the Mongo DB method named Find One and update.

119
00:08:42,330 --> 00:08:48,840
We need to pass this to arguments so Eikon will be the first argument is the object that you want to

120
00:08:48,840 --> 00:08:49,470
find.

121
00:08:49,470 --> 00:08:50,790
So curly brackets.

122
00:08:51,090 --> 00:08:57,480
We're interested in a document where the underscore ID and then colon and then when you're trying to

123
00:08:57,480 --> 00:09:03,990
match an ID in Mongu DB instead of just giving it a simple string of text, we actually want to create

124
00:09:03,990 --> 00:09:08,070
a new instance of the Mongo DB Object ID.

125
00:09:08,520 --> 00:09:15,900
OK, then within those parentheses is where we would say this DOT requested post ID.

126
00:09:16,260 --> 00:09:16,740
All right.

127
00:09:16,740 --> 00:09:22,680
Now for the second argument, instead of this placeholder B, we would also provide an object so curly

128
00:09:22,680 --> 00:09:23,310
brackets.

129
00:09:23,490 --> 00:09:27,240
And now this is where we say what we want to do with that document that we find.

130
00:09:27,510 --> 00:09:31,070
So let's say dollar sign set and what do we want to set?

131
00:09:31,080 --> 00:09:35,580
We just give it an object and now we just list the properties that we would want to change.

132
00:09:35,580 --> 00:09:40,140
So we want to change the title title Colon to use the new title.

133
00:09:40,140 --> 00:09:48,060
So this data, not title comma, we'd also want to update the body property or fields of body colon,

134
00:09:48,750 --> 00:09:50,580
this data body.

135
00:09:50,970 --> 00:09:56,550
OK, now back at the beginning of this line, this Mongo DB method is going to return a promise.

136
00:09:56,760 --> 00:09:59,610
So at the start of this line, let's be sure to await.

137
00:09:59,660 --> 00:10:00,620
Its completion.

138
00:10:00,830 --> 00:10:06,890
OK, and then right below this line, let's just resolve this promise, so resolve now.

139
00:10:06,890 --> 00:10:08,630
Let's take care of our else block.

140
00:10:08,840 --> 00:10:12,530
If this evaluates to false, that means there's validation errors.

141
00:10:12,770 --> 00:10:17,240
So within the else block, we would also want to resolve except in the else.

142
00:10:17,240 --> 00:10:24,530
Let's resolve with the value of failure and in the IFLA, let's resolve the value of success.

143
00:10:25,160 --> 00:10:28,670
OK, this actually update function is now complete.

144
00:10:28,880 --> 00:10:32,900
Now let's just scroll back to our update method and let's do this.

145
00:10:32,900 --> 00:10:36,130
Find the comment that says actually update DB.

146
00:10:36,530 --> 00:10:42,260
And at the start of this line before a wait, let's just say let status equal.

147
00:10:42,590 --> 00:10:47,070
And we know that this promise is going to resolve the value of either success or failure.

148
00:10:47,450 --> 00:10:51,260
So then that's what this overall promise can resolve with status.

149
00:10:52,400 --> 00:10:55,640
OK, at this point, our work in the model is complete.

150
00:10:55,950 --> 00:10:57,510
But before we go, test this out.

151
00:10:57,800 --> 00:11:05,240
Remember that in relation to this promise, either resolving or rejecting our controller is making extensive

152
00:11:05,240 --> 00:11:09,930
use of flash messages to show relevant messages to the user.

153
00:11:10,310 --> 00:11:17,420
Let's also not forget that instead of only red error messages, we also want to display a green success

154
00:11:17,420 --> 00:11:20,570
flash message if the update actually happened.

155
00:11:20,930 --> 00:11:30,440
So right now, let's save this file and let's jump in to our edit dash postgrads file and make sure

156
00:11:30,440 --> 00:11:32,480
that flash messages are set up.

157
00:11:32,860 --> 00:11:37,510
OK, so within this template, right below this div with the class of container.

158
00:11:37,820 --> 00:11:41,970
So right here is where we would want to display flash messages.

159
00:11:42,290 --> 00:11:45,440
Now there's no sense in typing out the code to make that happen.

160
00:11:45,750 --> 00:11:48,360
We've already written that code in another template.

161
00:11:48,830 --> 00:11:54,780
So right now, let's go copy and paste and borrow from our home dash guest template.

162
00:11:55,250 --> 00:12:00,950
So in our views folder, jump in to home, dash just towards the top.

163
00:12:00,960 --> 00:12:04,520
We see these three lines of code that power flash messages.

164
00:12:04,880 --> 00:12:11,150
Go ahead and copy those three lines into your clipboard and then back in our edit dash post template,

165
00:12:11,390 --> 00:12:12,530
just paste right here.

166
00:12:12,890 --> 00:12:16,460
However, this only takes care of red error messages.

167
00:12:16,760 --> 00:12:19,160
What about green success messages?

168
00:12:19,460 --> 00:12:24,740
Well, after these three lines of code, let's just dropdown and paste in our clipboard again.

169
00:12:25,250 --> 00:12:32,030
Only this time, instead of looking within an array named errors, let's look within an array named

170
00:12:32,030 --> 00:12:38,810
success and then in the HTML that we would output instead of alert dash danger.

171
00:12:39,140 --> 00:12:42,730
Let's change this to alert dash success.

172
00:12:43,190 --> 00:12:43,740
All right.

173
00:12:43,760 --> 00:12:49,550
And if you stop and think about it, we would actually want this code at the top of almost every template

174
00:12:49,550 --> 00:12:50,570
in our project.

175
00:12:50,930 --> 00:12:51,170
Right.

176
00:12:51,180 --> 00:12:55,450
There's a lot of different cases where we want to display different types of flash messages.

177
00:12:55,700 --> 00:13:00,800
So in order to avoid a ton of duplication, let's select all of this.

178
00:13:01,400 --> 00:13:07,520
So the code for the errors and the success, let's copy all of that into our clipboard and let's create

179
00:13:07,520 --> 00:13:10,360
a shared or reusable include file.

180
00:13:10,550 --> 00:13:15,590
So within our views folder, within the sub folder named includes this right.

181
00:13:15,590 --> 00:13:17,080
Click and choose new file.

182
00:13:17,750 --> 00:13:21,380
Let's name the new file Flash Ejaz.

183
00:13:22,130 --> 00:13:24,950
OK, within that new file, just paste in your clipboard.

184
00:13:25,160 --> 00:13:26,320
Go ahead and save that.

185
00:13:26,570 --> 00:13:33,050
And now back in edit Dasch Post, we can get rid of all of this and just include that file.

186
00:13:33,920 --> 00:13:41,540
So SJS with a dash and then include give it a path includes dash flash.

187
00:13:41,870 --> 00:13:46,610
Let's close out this SJS tag and now let's copy this include command.

188
00:13:46,820 --> 00:13:52,430
And now let's just insert it in almost all of our templates with that in my clipboard.

189
00:13:53,000 --> 00:13:59,420
Let's first of all, save this file, but then let's jump in to create dash post and end up at the top

190
00:13:59,420 --> 00:14:00,920
right below that container div.

191
00:14:01,730 --> 00:14:04,820
Just paste it in, save that.

192
00:14:04,970 --> 00:14:08,360
Let's also jump into single dash post.

193
00:14:08,360 --> 00:14:09,440
Dash screen.

194
00:14:10,680 --> 00:14:17,770
Paste it right below that container div, let's also update both our home dashboard and home guests.

195
00:14:17,770 --> 00:14:24,180
So Home Dashboard first right below that container div just paste it in your own home dash guest.

196
00:14:24,450 --> 00:14:27,690
We can replace these three lines of code that were powering the errors.

197
00:14:28,170 --> 00:14:29,430
Place that with the include.

198
00:14:30,240 --> 00:14:31,170
Go ahead and save.

199
00:14:31,680 --> 00:14:32,220
All right.

200
00:14:32,220 --> 00:14:37,920
Now we just have one more task before everything comes together, since we potentially want to leverage

201
00:14:37,920 --> 00:14:40,470
flash messages in almost every template.

202
00:14:40,620 --> 00:14:46,860
It would become tiring to manually pass flash data into the template every single time.

203
00:14:47,250 --> 00:14:48,360
To show you what I mean.

204
00:14:48,360 --> 00:14:54,300
Right now, let's jump into our user controller file in the controller's folder, jump into user controller,

205
00:14:55,140 --> 00:14:58,260
and I want you to scroll down and find our home function.

206
00:14:59,830 --> 00:15:06,130
So the line begins with exports home and pay attention to this line where we are rendering the home

207
00:15:06,130 --> 00:15:07,000
guess template.

208
00:15:07,180 --> 00:15:09,810
So this is where we're passing data into the template.

209
00:15:10,060 --> 00:15:15,850
And here you can see we're manually creating a property named Errors and then calling Flash to get the

210
00:15:15,850 --> 00:15:16,840
appropriate data.

211
00:15:17,350 --> 00:15:23,830
This works perfectly, except we probably don't want to have to include this same code every time we

212
00:15:23,830 --> 00:15:24,830
render a template.

213
00:15:25,210 --> 00:15:31,360
So for this home dash guess template, let's leave the registration errors because those are unique

214
00:15:31,360 --> 00:15:32,320
to the home page.

215
00:15:32,750 --> 00:15:34,600
But let's get rid of this errors.

216
00:15:34,600 --> 00:15:36,700
Colen request dot flash.

217
00:15:37,300 --> 00:15:39,940
So delete that and the common space.

218
00:15:40,210 --> 00:15:44,520
So now all we're passing into home guess template is the registration errors.

219
00:15:45,010 --> 00:15:46,720
Let's go ahead and save this.

220
00:15:46,930 --> 00:15:53,920
And now within our main Apgar's file, we can set up a function that will run for every request to sort

221
00:15:53,920 --> 00:15:57,140
of automate what we were doing here manually just a moment ago.

222
00:15:57,670 --> 00:16:05,740
So let's jump in to our app JS file and scroll down to the area that begins with app use.

223
00:16:05,740 --> 00:16:07,780
And then we have our own custom function.

224
00:16:08,110 --> 00:16:13,960
You might see comments in here like make current user IDs available on the request object and make user

225
00:16:13,960 --> 00:16:17,780
session data available from within view templates within this function.

226
00:16:17,800 --> 00:16:26,270
Let's just add a new line and let's add a new comment and let's say make all error and success flash

227
00:16:26,290 --> 00:16:30,310
messages available from all templates.

228
00:16:30,970 --> 00:16:40,630
So to do this, we can just say response dot locals dot errors should equal request dot flash errors

229
00:16:40,990 --> 00:16:42,840
and then do the same thing for success.

230
00:16:43,330 --> 00:16:45,850
So those will be the green success messages.

231
00:16:46,240 --> 00:16:52,730
Response dot locals dot success equals request dot flash success.

232
00:16:53,290 --> 00:16:53,650
Cool.

233
00:16:53,670 --> 00:16:59,460
So now we don't need to manually pass that data into our templates within all of our post controllers.

234
00:16:59,770 --> 00:17:03,290
Let's go ahead and save this and test everything out.

235
00:17:03,790 --> 00:17:10,690
So back in the browser within the edit post screen, be sure to refresh so your browser has the updated

236
00:17:10,690 --> 00:17:12,310
action value for the form.

237
00:17:12,790 --> 00:17:17,410
Let me try to update this post by maybe just adding a few exclamations at the end.

238
00:17:19,420 --> 00:17:21,040
Let me go ahead and submit.

239
00:17:23,930 --> 00:17:30,230
Perfect, we see the success message and that latest data, you can test this out by going up to your

240
00:17:30,230 --> 00:17:36,140
address bar and if we get rid of the slash edit at the end and just go back to viewing that post, we

241
00:17:36,140 --> 00:17:38,610
do indeed see those updated values.

242
00:17:39,200 --> 00:17:43,100
Next, let's see what happens if I try to edit a post I don't own.

243
00:17:43,460 --> 00:17:47,600
So if I go back to that edit screen for this post, I'm logged in.

244
00:17:47,600 --> 00:17:49,730
So yes, I am the author of this post.

245
00:17:49,730 --> 00:17:56,420
But if I copy this, you RL and then in this window where I'm logged in with my Bachs alone account,

246
00:17:56,780 --> 00:18:00,610
if I try to visit that you URL and submit a bit of data, don't worry.

247
00:18:00,620 --> 00:18:05,150
In our next lesson we'll set things up so that you can't even view this screen if you're not the owner.

248
00:18:05,510 --> 00:18:09,560
But if I try to submit a bit of new data, send off that form.

249
00:18:10,740 --> 00:18:17,190
It kicks me right back to the homepage and says you do not have permissions to perform that action perfect.

250
00:18:17,590 --> 00:18:20,400
And that's going to bring this lesson to a close.

251
00:18:20,730 --> 00:18:26,760
In our next lesson, we're going to work on several different features, but probably the most noteworthy

252
00:18:26,760 --> 00:18:31,820
feature will be letting users include Mark down in their posts.

253
00:18:32,130 --> 00:18:34,640
If you've never heard of Mark down, don't worry.

254
00:18:34,860 --> 00:18:42,810
Essentially, it's just going to let users include bold content or italic content or create different

255
00:18:42,810 --> 00:18:45,600
headings within their plain text content.

256
00:18:45,600 --> 00:18:47,940
Here, it should be a lot of fun to set up.

257
00:18:48,060 --> 00:18:52,830
And by the end of our next lesson, this application is really going to start coming together.

258
00:18:53,160 --> 00:18:57,450
So let's keep our momentum rolling and I will see you in the next lesson.
