1
00:00:00,630 --> 00:00:09,300
This function doesn't exist yet, but let's say does email exist, let's save this and then jump into

2
00:00:09,300 --> 00:00:12,360
our user controller and create a function with this name.

3
00:00:13,020 --> 00:00:17,670
So in user controller up at the top, we've already created this.

4
00:00:17,670 --> 00:00:19,380
Does user name exist function?

5
00:00:19,710 --> 00:00:22,730
Maybe right below that I would just create a new function.

6
00:00:22,740 --> 00:00:34,030
So exports dot does email exist, set that to equal a function within the parentheses for the function.

7
00:00:34,050 --> 00:00:36,600
Be sure to include request and response.

8
00:00:37,230 --> 00:00:42,450
OK, now within this function, we know that we are going to want to leverage our uppercase user model.

9
00:00:42,840 --> 00:00:45,680
But from here there are several different directions you could go in.

10
00:00:46,080 --> 00:00:52,830
You could create a method named find by email that would potentially be useful somewhere else in the

11
00:00:52,830 --> 00:00:54,480
application down the road.

12
00:00:54,690 --> 00:00:57,420
At this point, I don't think we would use that anywhere else.

13
00:00:57,420 --> 00:01:03,030
But sometimes it's a good idea to create functions that you can imagine being useful in other scenarios.

14
00:01:03,570 --> 00:01:07,590
Or we could just create a method named does email exist?

15
00:01:08,100 --> 00:01:08,260
Right.

16
00:01:08,370 --> 00:01:12,420
And its job would literally just be to return a value of true or false.

17
00:01:12,840 --> 00:01:15,310
So that's actually the approach I'm going to go with.

18
00:01:15,660 --> 00:01:21,540
So uppercase user DOT, does email exist?

19
00:01:22,970 --> 00:01:29,090
Now, you can imagine that we will set this up on the model to be a promise, so let's actually do this.

20
00:01:29,090 --> 00:01:31,550
Let's tell this function to be async.

21
00:01:32,420 --> 00:01:36,530
And then at the start of this line, I would say let email.

22
00:01:36,530 --> 00:01:43,160
Bool Bhullar short for Boulin, meaning true or false, I would set that to equal this and then I would

23
00:01:43,160 --> 00:01:45,230
just say awaked right.

24
00:01:45,230 --> 00:01:49,340
This promise is going to resolve with a value of either true or false.

25
00:01:49,700 --> 00:01:55,230
So then right below this line, well, that's what I would send back as my response to the Web browser.

26
00:01:55,250 --> 00:02:00,470
So just response JSON with the value of email boole.

27
00:02:01,550 --> 00:02:02,960
OK, let's save this.

28
00:02:03,110 --> 00:02:07,390
And now we just need to go into our user model and create a method with this name.

29
00:02:07,670 --> 00:02:09,260
Does email exist?

30
00:02:10,230 --> 00:02:18,060
So within your project folder, look in the models folder, and I want you to jump in to user J.S..

31
00:02:19,530 --> 00:02:26,220
Let's scroll down to the very bottom of user, not Jess, and right before the closing module exports,

32
00:02:26,220 --> 00:02:32,820
let's say upper case user DOT, does email exist?

33
00:02:33,270 --> 00:02:37,830
And let's set this to equal a function, a function parentheses, curly brackets.

34
00:02:38,190 --> 00:02:41,250
And I just realized we forgot to step in our previous file.

35
00:02:41,460 --> 00:02:45,300
So jump back in the user controller, back in the controller.

36
00:02:45,300 --> 00:02:50,640
When we say uppercase user DOT, does email exist within these parentheses?

37
00:02:50,640 --> 00:02:52,890
We need to give it an email in question.

38
00:02:53,190 --> 00:02:54,800
Which email address are we checking?

39
00:02:55,290 --> 00:02:58,280
So request body email.

40
00:02:58,740 --> 00:03:01,130
OK, let's save that and jump back into the model.

41
00:03:02,100 --> 00:03:08,300
So within the parentheses for this function, we'd want to receive that incoming email address email.

42
00:03:08,820 --> 00:03:15,120
OK, now within the body of this function, we want it to return a promise to return a new instance

43
00:03:15,120 --> 00:03:18,180
of uppercase promise within these parentheses.

44
00:03:18,180 --> 00:03:20,010
Let's give it an async function.

45
00:03:20,010 --> 00:03:26,070
So async function, parentheses, curly brackets within the function parentheses.

46
00:03:26,070 --> 00:03:29,820
Let's include parameters of resolve and reject.

47
00:03:30,880 --> 00:03:37,320
OK, now within this function, let's begin by checking to see if the email value is just an innocent

48
00:03:37,320 --> 00:03:38,670
string of text or not.

49
00:03:39,150 --> 00:03:46,770
So I would begin by saying if parentheses curly brackets for the condition I'd say if type of and then

50
00:03:46,770 --> 00:03:53,730
check the incoming email and I'd say if that does not equal a string then we have a problem.

51
00:03:54,060 --> 00:03:59,010
If that's the case, I would just want to resolve with the value of false.

52
00:03:59,610 --> 00:04:05,880
But more importantly, I would want to return I'd want to stop any further execution of this function

53
00:04:06,150 --> 00:04:11,070
because I don't want this value getting anywhere near my Mongo DB database.

54
00:04:11,610 --> 00:04:15,150
OK, now after this if statement, let's drop down.

55
00:04:16,080 --> 00:04:21,180
And now this is where I would just want to check within my database to see if there's a user with this

56
00:04:21,180 --> 00:04:21,720
email.

57
00:04:22,080 --> 00:04:30,840
So I would say let user equal and then I would just await and then I would use a Mongo DB method so

58
00:04:30,930 --> 00:04:36,540
we'd look within our users collection and call a method named find one.

59
00:04:37,020 --> 00:04:38,280
We give this an object.

60
00:04:38,460 --> 00:04:45,480
And I'm looking for a document where the email field has a matching value of whatever email value is

61
00:04:45,480 --> 00:04:49,020
just passed into this function right below this line.

62
00:04:49,020 --> 00:04:55,830
I would just say if parentheses curly brackets right after that closing if adeno else block.

63
00:04:55,830 --> 00:05:03,660
And I would just say if user write because if it found a user at all, that will be an object that evaluates

64
00:05:03,660 --> 00:05:04,230
to true.

65
00:05:04,740 --> 00:05:10,500
If it does not find a matching user, then this variable will essentially be empty, which would evaluate

66
00:05:10,500 --> 00:05:11,150
to false.

67
00:05:11,790 --> 00:05:19,290
So within the if block I'd say resolve with the value of true within the else block, I'd say resolve

68
00:05:19,290 --> 00:05:21,000
with a value of false.

69
00:05:21,840 --> 00:05:25,090
Let's go ahead and save this and test it out.

70
00:05:25,920 --> 00:05:32,450
So back in the browser, if I refresh, if you type in an email address that you have not used yet,

71
00:05:33,000 --> 00:05:34,260
everything should be OK.

72
00:05:34,500 --> 00:05:38,430
But if you type in an email address that you have already used.

73
00:05:40,790 --> 00:05:44,190
Perfect, that email is already being used.

74
00:05:44,720 --> 00:05:50,450
Also notice that if you type in an email address that is not valid, that does not contain the at symbol

75
00:05:50,450 --> 00:05:56,540
and then additional text, you see, you must provide a valid email address, but then if you fix it.

76
00:06:00,930 --> 00:06:07,680
And type in an email that has not already been used, that message gets hidden perfect, that takes

77
00:06:07,680 --> 00:06:09,210
care of the email field.

78
00:06:09,480 --> 00:06:11,490
Now let's work on the password field.

79
00:06:11,920 --> 00:06:16,510
It should be very simple and quick to set up because it does not require a trip to the server.

80
00:06:16,890 --> 00:06:21,450
Really, the only thing we need to check for is the minimum length and maximum length.

81
00:06:21,960 --> 00:06:25,680
So let's do this back within our registration form.

82
00:06:25,850 --> 00:06:27,000
Gorgias, right.

83
00:06:27,000 --> 00:06:28,220
Our front end file.

84
00:06:28,560 --> 00:06:35,160
Let's scroll up to the top and within our constructor, right below the two lines that begin with this

85
00:06:35,460 --> 00:06:36,120
email.

86
00:06:36,120 --> 00:06:37,100
Let's add a new line.

87
00:06:37,470 --> 00:06:44,610
Let's say this dot password equals and then just select it's a document query selector.

88
00:06:45,060 --> 00:06:46,230
It has an ID.

89
00:06:46,230 --> 00:06:57,300
So hash tag of password dash register I below that, let's say this dot password dot previous value

90
00:06:57,720 --> 00:06:59,830
equals an empty pair of quotes.

91
00:07:00,300 --> 00:07:00,750
All right.

92
00:07:00,750 --> 00:07:03,920
Now let's listen for keyboard presses on that field.

93
00:07:04,230 --> 00:07:10,860
So within our events area, let's just copy and paste these three lines of code that were for the email

94
00:07:10,860 --> 00:07:11,370
field.

95
00:07:12,300 --> 00:07:14,760
So copy that right below paste.

96
00:07:15,270 --> 00:07:22,680
Let's change this email to this DOT password and then let's change the first argument from this email

97
00:07:22,680 --> 00:07:30,090
to this dot password instead of email handler, let's say password handler.

98
00:07:31,170 --> 00:07:36,890
OK, now let's go find our username handler and we can just copy and paste this.

99
00:07:37,170 --> 00:07:41,880
So just duplicate the username handler method, copy paste right below it.

100
00:07:42,330 --> 00:07:47,460
Let's change this new copy to be named password handler.

101
00:07:47,880 --> 00:07:53,370
Let's change this username errors to this dot password errors.

102
00:07:53,940 --> 00:07:59,670
We do want afunction to run immediately because that will check the maximum character length.

103
00:08:00,030 --> 00:08:05,970
So let's change your username immediately to password immediately.

104
00:08:06,690 --> 00:08:13,200
Let's still keep a time out, but change it from this dot username to this dot password and then let's

105
00:08:13,200 --> 00:08:17,700
change this username timer to password timer.

106
00:08:18,660 --> 00:08:25,040
And then finally, username after delay should now be password after delay.

107
00:08:25,470 --> 00:08:33,810
OK, now right below this, let's create a method named password immediately password immediately parentheses

108
00:08:33,810 --> 00:08:38,100
curly brackets within this method, let's set up an if statement.

109
00:08:38,100 --> 00:08:47,670
So if parentheses curly brackets for the condition, I will just say this dot password dot value dot

110
00:08:47,670 --> 00:08:48,360
length.

111
00:08:48,750 --> 00:08:52,590
If that is greater than fifty, we have a problem.

112
00:08:53,070 --> 00:08:58,770
So within the if curly brackets I would just say this dot show validation error.

113
00:08:59,370 --> 00:09:04,590
The element in question is this dot password comma and then we give it a message.

114
00:09:04,590 --> 00:09:10,260
So password cannot exceed fifty characters.

115
00:09:10,860 --> 00:09:18,030
Now after this if statement but still within password immediately I would say if parentheses curly brackets

116
00:09:18,360 --> 00:09:26,370
for the condition if this dot password dot errors and then right before this I check for the opposite.

117
00:09:26,390 --> 00:09:27,420
So exclamation.

118
00:09:27,720 --> 00:09:31,740
If there are no errors then I would want to hide the validation message.

119
00:09:32,310 --> 00:09:39,690
So this dot hide validation error element in question is this dot password.

120
00:09:40,500 --> 00:09:49,500
OK, now below this method let's create a new method named password after delay, password after delay

121
00:09:50,040 --> 00:09:51,660
parentheses curly brackets.

122
00:09:52,410 --> 00:09:55,020
Let's say if parentheses curly brackets.

123
00:09:55,020 --> 00:10:01,170
The condition is just this dot password dot value length.

124
00:10:01,650 --> 00:10:05,550
If that is less than twelve then we have a problem.

125
00:10:05,880 --> 00:10:09,420
So I would say this show validation error.

126
00:10:10,290 --> 00:10:18,090
The element in question is this dot password comma and let's just give it a message of password.

127
00:10:18,090 --> 00:10:23,190
Must be at least twelve characters.

128
00:10:23,790 --> 00:10:26,610
Let's go ahead and save this and test it out.

129
00:10:26,850 --> 00:10:32,940
So if I refresh, if I only type in one or two characters from my password and then wait eight hundred

130
00:10:32,940 --> 00:10:34,380
milliseconds perfect.

131
00:10:35,040 --> 00:10:37,530
As soon as I begin typing again it gives me a chance.

132
00:10:37,530 --> 00:10:44,610
But if I go over the limit we immediately see you cannot exceed fifty and the millisecond I go back

133
00:10:44,610 --> 00:10:45,990
under fifty it goes away.

134
00:10:46,590 --> 00:10:48,180
Not to bring this to a close.

135
00:10:48,180 --> 00:10:55,650
Let's set things up so that if you try to click on the submit button, we prevent the browser from actually

136
00:10:55,650 --> 00:10:59,630
submitting the form unless we are perfectly happy with all.

137
00:10:59,750 --> 00:11:03,480
Revalues, let me show you how I would set that up.

138
00:11:03,950 --> 00:11:10,130
So back in our registration form, not just let's scroll to the very top and at the beginning of our

139
00:11:10,130 --> 00:11:16,300
constructor, let's add a new line and let's select the overall HTML form element.

140
00:11:16,730 --> 00:11:27,030
So I would just say this dot form equals document query selector and it has an ID of registration Dasch

141
00:11:27,050 --> 00:11:27,610
form.

142
00:11:28,340 --> 00:11:28,750
All right.

143
00:11:28,760 --> 00:11:34,850
Now, before we listen for the event of that form being submitted, I first want to do this at the end

144
00:11:34,850 --> 00:11:38,680
of our constructor right after the this dot password lines.

145
00:11:38,960 --> 00:11:45,530
Let's set the is unique value for both our email and username to be false by default.

146
00:11:45,980 --> 00:11:54,380
So I would just say this dot username dot is unique, set that to be false when the page first loads

147
00:11:54,740 --> 00:11:59,630
and do the same thing for the email said this email is unique set.

148
00:11:59,630 --> 00:12:01,970
It defaults this way.

149
00:12:01,970 --> 00:12:09,170
It's up to our axios requests to actually run and update these to a value of true before we would ever

150
00:12:09,170 --> 00:12:11,420
let our form actually submit.

151
00:12:12,020 --> 00:12:13,050
Let me show you what I mean.

152
00:12:13,340 --> 00:12:19,820
So within our events area at the top of the events method, let's listen for the overall form being

153
00:12:19,820 --> 00:12:20,470
submitted.

154
00:12:20,900 --> 00:12:30,530
So this dot form, dot add event listener, the event that we're listening for is submit, right?

155
00:12:30,530 --> 00:12:36,980
It's not click, it's not give up, it is submit and then comma for the second argument, let's give

156
00:12:36,980 --> 00:12:38,180
it an arrow function.

157
00:12:38,180 --> 00:12:42,590
So parentheses arrow symbol and then curly brackets.

158
00:12:43,010 --> 00:12:45,860
Let's dropdown within the parentheses.

159
00:12:45,860 --> 00:12:49,820
Let's give it one parameter of E short for event.

160
00:12:50,720 --> 00:12:56,000
And if you only have one parameter you don't need the parentheses within the body of this function.

161
00:12:56,000 --> 00:12:59,590
Let's say e dot prevent default.

162
00:12:59,960 --> 00:13:00,280
Right.

163
00:13:00,290 --> 00:13:05,220
We do not want to let the form submit which is its default behaviour.

164
00:13:05,750 --> 00:13:10,880
OK, and then after that let's just call a method that doesn't exist yet, but one that we can create

165
00:13:10,880 --> 00:13:11,990
in just a few seconds.

166
00:13:11,990 --> 00:13:19,880
So let's say this dot form submit handler parentheses to call that OK.

167
00:13:19,880 --> 00:13:22,790
And now let's go create a method with that matching name.

168
00:13:23,090 --> 00:13:25,670
Let's scroll down underneath our methods area.

169
00:13:25,670 --> 00:13:32,600
Let's create a new method form submit handler parentheses, curly brackets.

170
00:13:33,050 --> 00:13:37,520
OK, now let's ask ourselves, what do we want to happen when this runs.

171
00:13:38,000 --> 00:13:39,020
Because think about it.

172
00:13:39,530 --> 00:13:45,830
Someone could visit this page and before they trigger any key press events on any of the fields, they

173
00:13:45,830 --> 00:13:47,810
could just click submit right away.

174
00:13:48,380 --> 00:13:53,900
But before we let the form submit, we would still want all of our validation rules and checks to run.

175
00:13:54,320 --> 00:13:56,750
So here's what I would do within our form.

176
00:13:56,750 --> 00:13:57,710
Submit handler.

177
00:13:57,890 --> 00:14:01,760
I would just manually run all of our validation checks.

178
00:14:02,330 --> 00:14:06,950
So this DOT username immediately call that.

179
00:14:07,280 --> 00:14:10,610
It's also called this DOT username after delay.

180
00:14:11,240 --> 00:14:20,780
Let's also call this DOT email after delay and let's call this dot password immediately and this dot

181
00:14:20,780 --> 00:14:23,180
password after delay.

182
00:14:23,750 --> 00:14:29,900
OK, so after we manually run all of our validation checks, then let's write an if statement.

183
00:14:30,050 --> 00:14:36,560
So if parentheses curly brackets, the condition will be if everything is perfect, just the way we

184
00:14:36,560 --> 00:14:39,590
want it, then we can let the form submit.

185
00:14:39,920 --> 00:14:46,130
So within our if curly brackets, what we would want to do is this dot form which selects the overall

186
00:14:46,130 --> 00:14:49,850
form element, and then we just want to call the submit method.

187
00:14:50,360 --> 00:14:56,540
Now let's focus on the condition that needs to be true in order for us to actually allow it to submit.

188
00:14:56,990 --> 00:15:01,250
So within these parentheses, first, I'd want to make sure that their user name is unique.

189
00:15:01,700 --> 00:15:05,750
So this dot username DOT is unique.

190
00:15:06,320 --> 00:15:07,670
That would need to be true.

191
00:15:08,120 --> 00:15:14,930
And so to ampersands, I'd want to check for the opposite of this dot username dot errors.

192
00:15:15,440 --> 00:15:15,690
Right?

193
00:15:15,710 --> 00:15:17,930
Only if there are no errors on the field.

194
00:15:18,350 --> 00:15:24,980
So exclamation to see if this is false and I would need their email address to be unique.

195
00:15:24,980 --> 00:15:27,650
So this email dot is unique.

196
00:15:28,310 --> 00:15:29,960
We need to add more conditions here.

197
00:15:29,960 --> 00:15:33,200
But I'm already running out of horizontal space here on my screen.

198
00:15:33,500 --> 00:15:37,610
So I do want to let you know that you can break up conditions on the separate lines.

199
00:15:37,940 --> 00:15:43,190
So, for example, after the opening, if parentheses, you can drop down and then I could also drop

200
00:15:43,190 --> 00:15:46,100
down after every double ampersand like this.

201
00:15:47,150 --> 00:15:49,370
So this way we have one condition per line.

202
00:15:50,000 --> 00:15:51,020
So let's add another one.

203
00:15:51,170 --> 00:15:55,790
And I would want there to not be any email errors.

204
00:15:56,120 --> 00:15:59,150
So exclamation this email errors.

205
00:15:59,810 --> 00:16:07,150
And I wouldn't want there to be any password either, so exclamation this dot password, dot errors

206
00:16:07,910 --> 00:16:12,320
and then if you wanted to, you could also drop down right before the closing parentheses.

207
00:16:13,200 --> 00:16:17,180
And then if you wanted to just to make things look more organized, you could indent these conditions

208
00:16:17,180 --> 00:16:17,480
a bit.

209
00:16:18,140 --> 00:16:18,480
Cool.

210
00:16:19,100 --> 00:16:22,050
Let's go ahead and save this and test it out.

211
00:16:22,550 --> 00:16:28,640
So if I refresh and if I never even click into any of these fields and just try to submit the form right

212
00:16:28,640 --> 00:16:29,020
away.

213
00:16:29,900 --> 00:16:30,300
Perfect.

214
00:16:30,360 --> 00:16:35,930
Do you see the form was not submitted and I have different validation messages at this point.

215
00:16:35,930 --> 00:16:40,450
There's just one more detail I want to take care of before we bring this lesson to a close.

216
00:16:40,790 --> 00:16:48,560
So if I refresh and if I type in a username of fluffy cat, we see that that is a valid username.

217
00:16:48,830 --> 00:16:54,500
Now, clearly, if I had a character that's not allowed, for example, a period we see the message

218
00:16:54,500 --> 00:16:54,730
right.

219
00:16:54,740 --> 00:16:56,930
Username can only contain letters and numbers.

220
00:16:57,350 --> 00:16:59,900
But watch this if I add the period.

221
00:16:59,900 --> 00:17:05,750
But then immediately after I press that key, I press the tab key to switch off to the next field.

222
00:17:06,140 --> 00:17:13,730
So if I press dot tab super quickly like this notice it doesn't trigger the validation error message.

223
00:17:14,120 --> 00:17:15,260
Clearly that's an issue.

224
00:17:15,270 --> 00:17:20,990
So if a user types in a value really quick, it is common for them to hit tab and immediately go down

225
00:17:20,990 --> 00:17:21,880
to the next field.

226
00:17:22,220 --> 00:17:28,800
So what I would do to get around this is just also listen for the on Blu event for each field.

227
00:17:29,480 --> 00:17:30,600
Let me show you what I mean.

228
00:17:30,680 --> 00:17:34,030
So back in our ED scroll up to the events area.

229
00:17:34,580 --> 00:17:38,960
Now, at the moment, we are listening for the key up event on our three fields.

230
00:17:39,290 --> 00:17:43,030
So what I would do is just duplicate all of these events.

231
00:17:43,430 --> 00:17:46,850
We don't need to duplicate the event that listens for the form being submitted.

232
00:17:46,850 --> 00:17:54,440
But for these three key up events, I would just copy all three right below it, Paiste and on the new

233
00:17:54,440 --> 00:17:58,910
three copies just change the key up event to the blurr event.

234
00:17:59,450 --> 00:18:00,380
Blur runs.

235
00:18:00,380 --> 00:18:06,200
When you exit off of or when a field loses focus, change those to blur.

236
00:18:06,200 --> 00:18:07,560
Let's go ahead and save.

237
00:18:08,750 --> 00:18:10,190
OK, now back in the browser.

238
00:18:10,190 --> 00:18:14,060
If I refresh, I choose the name of Fluffy Cat.

239
00:18:14,240 --> 00:18:19,820
Clearly we see the error message if I say dot, but if I hit dot and tab instantly like this.

240
00:18:20,390 --> 00:18:20,780
Cool.

241
00:18:21,500 --> 00:18:23,110
The problem is still being caught.

242
00:18:23,630 --> 00:18:27,260
Now if I try to submit the form cool it's also going to let me know.

243
00:18:27,260 --> 00:18:29,090
Hey, you need to enter a password first.

244
00:18:29,400 --> 00:18:31,640
Now let's go ahead and fill out the form properly.

245
00:18:36,970 --> 00:18:42,700
All right, so there are no problems with any of my fields, and now if I try to submit the form, you

246
00:18:42,700 --> 00:18:48,370
can see that that submit request actually goes through and I am now logged in with that new account.

247
00:18:48,730 --> 00:18:49,390
Perfect.

248
00:18:49,810 --> 00:18:53,230
And that's actually going to bring this lesson to a close.

249
00:18:53,680 --> 00:18:58,280
In our next lesson, we are going to learn about security to be more specific.

250
00:18:58,300 --> 00:19:02,950
We're going to learn how to protect ourselves from a cookie related vulnerability.

251
00:19:03,730 --> 00:19:07,780
Let's keep things rolling and I will see you in the next lesson.
