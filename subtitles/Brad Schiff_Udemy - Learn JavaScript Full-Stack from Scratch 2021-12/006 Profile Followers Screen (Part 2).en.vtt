WEBVTT
1
00:00:00.870 --> 00:00:07.290
At this point, let's go ahead and save this file, and now we better go into our follow model and set

2
00:00:07.290 --> 00:00:10.760
up a method named Get Followers by I.D..

3
00:00:11.700 --> 00:00:20.520
So in our models folder, let's dig into the file named Follow J.S. Within this file, let's scroll

4
00:00:20.520 --> 00:00:21.990
down to the very bottom.

5
00:00:23.430 --> 00:00:29.640
And right before the module DOT exports line, we can create a new function, let's say uppercase follow

6
00:00:29.850 --> 00:00:37.190
dot, get followers by I.D. This should equal a function.

7
00:00:38.070 --> 00:00:41.930
Let's be sure to include a parameter to receive the incoming ID.

8
00:00:43.080 --> 00:00:43.550
All right.

9
00:00:43.560 --> 00:00:45.850
And we want this function to return a promise.

10
00:00:46.140 --> 00:00:49.710
So let's say return new promise.

11
00:00:50.730 --> 00:00:53.600
Let's give the promise and async arrow function.

12
00:00:53.610 --> 00:00:57.990
So async parentheses, arrow symbol, curly brackets.

13
00:00:58.650 --> 00:01:02.570
Let's be sure to give it parameters of resolve and reject.

14
00:01:03.450 --> 00:01:03.870
All right.

15
00:01:03.880 --> 00:01:09.660
And now within the body of this function, let's create a variable, let's name it follower's, let

16
00:01:09.900 --> 00:01:11.460
follower's equal.

17
00:01:12.360 --> 00:01:16.710
And now we'd want to start working with our follows collection in the database.

18
00:01:17.010 --> 00:01:21.390
So we already created a variable for that named follows collection.

19
00:01:21.810 --> 00:01:28.830
And now instead of running a simple command like find or find one, we actually want to do something

20
00:01:28.830 --> 00:01:30.140
a bit more complex.

21
00:01:30.390 --> 00:01:33.150
So let's say dot aggregate.

22
00:01:34.110 --> 00:01:41.460
Before we worry about what to include in these parentheses, let's first end this line with DOT to array

23
00:01:42.660 --> 00:01:48.510
because aggregate is going to return data that makes sense to Mongo DB but maybe wouldn't make sense

24
00:01:48.510 --> 00:01:52.110
to our application from a raw JavaScript perspective.

25
00:01:52.680 --> 00:01:57.310
This just makes sure that what it ultimately returns is a simple JavaScript array.

26
00:01:57.840 --> 00:02:03.960
Also, I should say that this is not going to return an array as much as it's going to resolve with

27
00:02:03.960 --> 00:02:07.640
the value of an array, because this is going to return with a promise.

28
00:02:08.670 --> 00:02:14.760
So at the start of it right here, we can just say, oh, wait, now before things go any further,

29
00:02:14.760 --> 00:02:17.690
let's remember to wrap this within a try block.

30
00:02:18.120 --> 00:02:26.400
So just cut this line of code into your clipboard and then let's say try curly brackets and then catch

31
00:02:26.670 --> 00:02:27.720
curly brackets.

32
00:02:28.950 --> 00:02:32.910
Let's go ahead and paste our code back into the tribe locked in the catch block.

33
00:02:32.910 --> 00:02:35.250
We could just tell our promise to reject.

34
00:02:36.060 --> 00:02:41.820
OK, at this point, let's focus on what we want to include in the parentheses for aggregate.

35
00:02:42.420 --> 00:02:49.620
Let's begin with a pair of square brackets, because we want to provide an array of operations within

36
00:02:49.620 --> 00:02:50.390
the square brackets.

37
00:02:50.400 --> 00:02:51.300
We could drop down.

38
00:02:51.930 --> 00:02:54.660
Each operation is represented as an object.

39
00:02:54.870 --> 00:03:01.740
So curly brackets, let's begin with dollar sign, match colon and then give that an object.

40
00:03:02.130 --> 00:03:09.630
And we're interested in finding any documents in our follows collection where the followed ID field

41
00:03:09.990 --> 00:03:13.400
matches whatever ID was passed into this function.

42
00:03:13.890 --> 00:03:15.060
So just ID.

43
00:03:16.110 --> 00:03:21.000
OK, and now before we move on to the second operation, let's walk through an example.

44
00:03:21.810 --> 00:03:27.840
If instead of viewing my profile, I was viewing the Bark's a lot profile and then I wanted to click

45
00:03:27.840 --> 00:03:31.920
on followers to see all of the users that are following Bachs a lot.

46
00:03:32.550 --> 00:03:37.500
Well, in that case, this method would get called get followers by ID.

47
00:03:38.700 --> 00:03:42.600
The ID that would get passed into it would be the user ID of barks a lot.

48
00:03:43.680 --> 00:03:51.630
So we would look in our follows collection for any documents where the followed ID matches bark's allots

49
00:03:51.630 --> 00:03:52.110
ID.

50
00:03:52.500 --> 00:03:59.580
So if I go into Mongo DB Atlus in my follows collection, here's that one document that represents the

51
00:03:59.580 --> 00:04:02.220
Brad user following the Bachs lot user.

52
00:04:02.700 --> 00:04:06.540
And yes, this document represents that follow relationship to us.

53
00:04:06.840 --> 00:04:12.150
But in terms of what we actually want to display on the front end, if you clicked on Follower's here,

54
00:04:12.390 --> 00:04:17.880
you would want to see the user names and avatars of the people that are following a lot.

55
00:04:18.360 --> 00:04:21.660
You wouldn't just want to see their user ID.

56
00:04:22.260 --> 00:04:23.820
So here's what we need to do next.

57
00:04:24.330 --> 00:04:32.280
This operation is going to find any matching follow documents, but then we need to use the authorized

58
00:04:32.550 --> 00:04:37.080
to look up the related user document that this is pointing towards.

59
00:04:37.800 --> 00:04:43.980
In this example, we would want to find the user document for the Brad account so that we could grab

60
00:04:43.980 --> 00:04:48.080
its user name and its email to determine its Avatar photo.

61
00:04:48.720 --> 00:04:52.620
So let me show you how we can do that at the end of this line.

62
00:04:52.620 --> 00:04:56.640
Let's add a comma and then let's add another operation this time.

63
00:04:56.640 --> 00:04:58.230
Let's say dollar sign.

64
00:04:58.230 --> 00:04:59.940
Look up colon.

65
00:05:00.360 --> 00:05:07.170
Give that an object now we just spell out a few properties, so from should be the collection that we

66
00:05:07.170 --> 00:05:08.260
want to look within.

67
00:05:08.550 --> 00:05:11.340
So that would be the user's collection, comma.

68
00:05:11.370 --> 00:05:15.300
Then we provide a property named local field.

69
00:05:15.990 --> 00:05:23.460
And in this case, that would be author I.D., local field.

70
00:05:23.460 --> 00:05:29.130
Meaning which field in the following document do you want to perform this look up or match by.

71
00:05:30.070 --> 00:05:38.740
OK, then we can say comma foreign field and this would be underscore I'd right.

72
00:05:38.790 --> 00:05:46.440
We're looking in the user's collection for documents where the I.D. matches the author's ID from the

73
00:05:46.440 --> 00:05:47.450
follow document.

74
00:05:48.180 --> 00:05:56.070
And finally after the ID, we would say comma and add a property named as and we can make up any name,

75
00:05:56.070 --> 00:05:58.080
but let's call it user doc.

76
00:05:59.010 --> 00:06:04.830
OK, so all together, what the lookup is going to do is now the object that's going to be returned

77
00:06:05.100 --> 00:06:12.450
instead of only having ID followed ID and author ID, it's going to have another virtual field of property

78
00:06:12.810 --> 00:06:14.460
named User Doc.

79
00:06:14.670 --> 00:06:20.330
Write that as name that we just chose and it's actually going to be an array of objects.

80
00:06:20.850 --> 00:06:26.280
However, in this case, we know that there's only going to be one user object that would match this

81
00:06:26.280 --> 00:06:29.390
ID, so we don't need a separate array.

82
00:06:29.760 --> 00:06:35.610
So at the very end of this line, let's add a comma and let's add one more operation this time.

83
00:06:35.610 --> 00:06:41.990
Let's say Dollar Sign Project Colon and then give it curly brackets.

84
00:06:42.750 --> 00:06:49.260
OK, this is our chance to spell out what should exist in the object that this ultimately returns.

85
00:06:50.220 --> 00:06:55.950
This is using more of an opt in approach than an opt out approach, meaning if you don't specifically

86
00:06:55.950 --> 00:06:59.130
list a property here, it's not going to be included.

87
00:06:59.760 --> 00:07:04.140
So we don't need to include authorized or followed ID.

88
00:07:04.710 --> 00:07:08.730
Now that we've performed the match in the lookup, those are completely irrelevant to us.

89
00:07:09.330 --> 00:07:15.360
All we really want to return is the user name and email from this matching user account.

90
00:07:16.200 --> 00:07:21.270
So let's say username Colen, give it an object.

91
00:07:21.780 --> 00:07:33.600
Let's say dollar sign array elim at Colen square brackets quotes dollar sign user doch dot username

92
00:07:35.190 --> 00:07:37.080
after the quotes comma zero.

93
00:07:37.830 --> 00:07:44.640
Because remember user doch is actually going to be an array of any matching looked up documents.

94
00:07:45.270 --> 00:07:48.470
We know that we're only going to be interested in the first item in that array.

95
00:07:48.510 --> 00:07:55.920
So we're setting a username property and on that first item in the array we're grabbing the user name

96
00:07:55.920 --> 00:07:56.430
property.

97
00:07:57.450 --> 00:07:57.860
Cool.

98
00:07:57.870 --> 00:08:02.790
Let's do the same thing for email so we can actually just copy this line and duplicate it.

99
00:08:03.030 --> 00:08:10.350
Be sure to add a comma at the end of this first line and then let's change this to email and then change

100
00:08:10.350 --> 00:08:13.340
the DOT username to dot email.

101
00:08:14.160 --> 00:08:17.220
So ultimately what this is going to return is an array.

102
00:08:17.790 --> 00:08:24.510
Each item in the array will be an object that has properties, username and email of the person that's

103
00:08:24.510 --> 00:08:26.990
following the current profile user.

104
00:08:27.600 --> 00:08:31.260
Now, we don't actually want to display their email address on the front end.

105
00:08:31.590 --> 00:08:36.750
We're only interested in their email in order to calculate their graviton photo.

106
00:08:37.650 --> 00:08:40.890
So let's do this right after this.

107
00:08:40.890 --> 00:08:47.280
To Array ends, let's add a new line and let's just modify the array that this is returning.

108
00:08:47.640 --> 00:08:56.310
So we're storing it in this follower's variable so we can just say follower's equals follower's dot

109
00:08:56.310 --> 00:09:02.100
net and now we can give this a function to do something once for each item in that array.

110
00:09:02.410 --> 00:09:06.380
It's a function parentheses, curly brackets in the parentheses.

111
00:09:06.390 --> 00:09:10.850
Be sure to include a parameter, call it follower, OK?

112
00:09:11.070 --> 00:09:16.110
And now whatever we return within this function is what will get added on to the new array.

113
00:09:16.830 --> 00:09:19.920
Before we go any further right here, let's write ourselves a comment.

114
00:09:19.920 --> 00:09:23.160
Let's say create a user.

115
00:09:23.670 --> 00:09:26.670
OK, we can circle back to this in about twenty seconds from now.

116
00:09:27.030 --> 00:09:34.410
Let's go up to the top of this file and import in our user model, because our user model has the code

117
00:09:34.560 --> 00:09:38.100
to look up aggravator based on a user's email address.

118
00:09:38.400 --> 00:09:41.610
So we can just recycle that up at the top of this file.

119
00:09:42.900 --> 00:09:45.060
Let's just add a new variable at the very top.

120
00:09:45.060 --> 00:09:52.710
Let's say const user equals and then just require n we're already in the models folder.

121
00:09:52.710 --> 00:09:58.980
So just look within the same folder dot slash for a file named uppercase user.

122
00:10:00.050 --> 00:10:06.380
Now we can leverage this, so scroll back down to that comment we just left ourselves right within our

123
00:10:06.380 --> 00:10:08.400
follow get followers by idee.

124
00:10:08.420 --> 00:10:12.380
Here's that create a user comment instead of that comment.

125
00:10:12.390 --> 00:10:13.220
Let's say this.

126
00:10:13.760 --> 00:10:21.380
Let's say let lower case user equal a new instance of upper case user for the first argument.

127
00:10:21.380 --> 00:10:23.780
Let's just pass in the current follower object.

128
00:10:24.200 --> 00:10:24.500
Right.

129
00:10:24.500 --> 00:10:29.270
That will be the data that populates this constructor function, comma.

130
00:10:29.270 --> 00:10:30.850
And then let's just say true.

131
00:10:31.640 --> 00:10:37.040
Remember, we set this up so that when you call the user constructor, if you say true here, it's going

132
00:10:37.040 --> 00:10:42.090
to automatically figure out the graviton based on the user's email address.

133
00:10:42.650 --> 00:10:47.240
So then ultimately within this map function, we would just return an object.

134
00:10:47.690 --> 00:10:54.410
And let's say the object should have a property named username, which could just be follower dot username,

135
00:10:54.710 --> 00:10:55.340
comma.

136
00:10:55.550 --> 00:11:03.020
It should also have a property named Avatar, which would just be lowercase user dot avatar.

137
00:11:03.830 --> 00:11:04.640
Perfect, right.

138
00:11:04.640 --> 00:11:09.700
Because those are the two pieces of data we would actually want to show on the front end of our website,

139
00:11:10.250 --> 00:11:15.570
the user name of whoever is doing the following and the avatar of whoever is doing the following.

140
00:11:16.190 --> 00:11:21.740
Now, right after this closing curly bracket in parentheses for our map, let's just add a new line

141
00:11:22.040 --> 00:11:26.990
and we are ready to resolve with our followers as the value.

142
00:11:27.800 --> 00:11:34.040
Lets go ahead and save this and then let's jump back into user controller to refresh our memory of what

143
00:11:34.040 --> 00:11:34.540
we're doing.

144
00:11:35.930 --> 00:11:42.290
Remember, we created this controller function named profile follower screen, and ultimately we just

145
00:11:42.290 --> 00:11:49.340
want to render a template named Profile Dash Follower's so that when you click on Follower's here on

146
00:11:49.340 --> 00:11:53.960
a user profile, you would see a list of all the users that are following this user.

147
00:11:54.620 --> 00:12:01.100
So we just set things up so that now this will be populated with a list of those users and avatars.

148
00:12:01.700 --> 00:12:01.940
Right.

149
00:12:01.940 --> 00:12:03.740
And then we're passing that into our template.

150
00:12:04.130 --> 00:12:10.790
This means we are ready to go create a template with this name, profile dash followers and then just

151
00:12:10.790 --> 00:12:12.630
loop through this array of followers.

152
00:12:13.220 --> 00:12:18.260
So right now, within the route of our project folder, look for the views folder.

153
00:12:18.930 --> 00:12:21.660
Let's right click on views and choose a new file.

154
00:12:22.400 --> 00:12:25.040
Let's name this new file profile.

155
00:12:25.340 --> 00:12:29.080
Dash Follower's SJS.

156
00:12:30.620 --> 00:12:32.870
Now, there's no sense starting from scratch here.

157
00:12:33.200 --> 00:12:34.970
Let's just go into our profile.

158
00:12:35.180 --> 00:12:39.020
SJS file, select everything into our clipboard.

159
00:12:40.340 --> 00:12:41.030
Copy that.

160
00:12:41.030 --> 00:12:45.230
And then back in the new profile, dash follower's just paste in your clipboard.

161
00:12:46.370 --> 00:12:50.120
The only thing we'd need to change is the array that we're looping through.

162
00:12:50.540 --> 00:12:55.910
So around line number nine, you can see I'm working with the posts variable and then trying to loop

163
00:12:55.910 --> 00:12:56.480
through it.

164
00:12:57.080 --> 00:13:06.740
So instead of posts for each, let's say, follower's dot for each, let's change the name of the parameter

165
00:13:06.740 --> 00:13:10.250
being passed in from post to follower.

166
00:13:11.150 --> 00:13:17.300
OK, for the opening attack, let's change the RF value, so let's hollow out those quotes.

167
00:13:17.630 --> 00:13:24.950
Instead, we'd want to link to slash profile slash and then their user name only to do something dynamic.

168
00:13:24.950 --> 00:13:30.910
We would say SJS just follower dot username.

169
00:13:31.860 --> 00:13:38.790
OK, on the next line for the image of their avatar, you can see the source is already a dynamic Ejaz

170
00:13:38.840 --> 00:13:39.290
tag.

171
00:13:39.650 --> 00:13:45.470
Instead of post author Avatar, it would just be follower dot avatar.

172
00:13:46.190 --> 00:13:51.200
OK, and then finally for this last line, you could show their user name in bold, but I would just

173
00:13:51.200 --> 00:13:57.890
want regular non bold text so I would just hollow out this last line completely and instead just drop

174
00:13:57.890 --> 00:14:01.280
into SJS and say follower dot username.

175
00:14:02.660 --> 00:14:06.020
Cool, let's go ahead and save this and test it out.

176
00:14:07.160 --> 00:14:08.840
So I know that barks a lot.

177
00:14:08.840 --> 00:14:10.880
Should have one follower, the brat account.

178
00:14:11.690 --> 00:14:13.580
So if I click on Follower's.

179
00:14:16.250 --> 00:14:16.680
Cool.

180
00:14:16.700 --> 00:14:23.480
We see the user for now, don't worry about the fact that it still looks like the posts screen is selected

181
00:14:23.480 --> 00:14:24.320
or highlighted.

182
00:14:25.000 --> 00:14:26.220
We'll cover that shortly.

183
00:14:26.840 --> 00:14:30.720
For now, let's make sure that this would work with multiple users to display.

184
00:14:31.370 --> 00:14:35.270
So in this window, I'm logged in with an account named Kitty Doe.

185
00:14:35.930 --> 00:14:41.600
Let's imagine this Kitty Doe account wants to begin following the Bark's lot account so I could search

186
00:14:41.660 --> 00:14:42.890
a search for dog.

187
00:14:43.790 --> 00:14:49.270
I would find a post by barks a lot, then I could click on to their profile and click follow.

188
00:14:51.690 --> 00:14:53.630
OK, and then from the barks a lot profile.

189
00:14:53.630 --> 00:14:56.890
If I click on Follower's Cool.

190
00:14:56.900 --> 00:15:00.620
That list of followers now has two users, Brad and Kirito.

191
00:15:01.220 --> 00:15:05.390
That's going to bring this lesson to a close in our next lesson.

192
00:15:05.600 --> 00:15:11.570
Not only will we set up the following screen to list out the relevant users, but we will also adjust

193
00:15:11.570 --> 00:15:17.840
things so that the current page looks visually highlighted instead of it just always looking like the

194
00:15:17.840 --> 00:15:20.440
posts link is active or selected.

195
00:15:21.260 --> 00:15:25.070
Let's keep things rolling and I will see you in the next lesson.
