1
00:00:01,780 --> 00:00:09,580
Hello, everyone, welcome back to the 10 days of JavaScript, here we are in day number 10, the finale

2
00:00:09,580 --> 00:00:10,810
of this first chapter.

3
00:00:11,200 --> 00:00:19,510
And in this lesson, we are going to finally move from theoretical to practical or from abstract to

4
00:00:19,510 --> 00:00:20,300
concrete.

5
00:00:20,650 --> 00:00:26,710
I want to begin by showing you the finished product of what we are going to build together in this lesson.

6
00:00:27,220 --> 00:00:29,610
So we've got a headline here to do that.

7
00:00:29,920 --> 00:00:36,970
And then we have a form or input field which I can type into feed cat, submit it.

8
00:00:36,970 --> 00:00:41,480
It gets added to this need to do list and I can add a few others.

9
00:00:41,480 --> 00:00:45,940
So by carrots, walk dog wash car.

10
00:00:46,270 --> 00:00:52,450
And now if I want to get rid of one, maybe by Carrot's, maybe I completed that task, I can just click

11
00:00:52,450 --> 00:00:55,070
the delete button for that one and it's gone.

12
00:00:55,450 --> 00:00:58,360
Now clearly this app is very simple, right?

13
00:00:58,360 --> 00:00:59,940
There's not a whole lot going on here.

14
00:01:00,220 --> 00:01:06,460
However, it gives us enough to sink our teeth into for us to really learn a lot about front end JavaScript

15
00:01:06,670 --> 00:01:08,370
and working with the Web browser.

16
00:01:08,740 --> 00:01:11,820
So without further ado, let's jump right into the action.

17
00:01:12,010 --> 00:01:14,650
Go ahead and create a brand new code pen.

18
00:01:15,070 --> 00:01:20,110
And instead of JavaScript, let's actually begin with a bit of HTML.

19
00:01:20,590 --> 00:01:25,630
Let's begin by creating a heading level, one that reads to do app.

20
00:01:27,430 --> 00:01:34,310
And just a quick note that I want to keep the focus in this course on JavaScript instead of HTML.

21
00:01:34,690 --> 00:01:40,450
Now, even if you've never worked with HTML before, the syntax is fairly simple.

22
00:01:40,630 --> 00:01:45,340
So you might be able to just follow along with me and have it somewhat make sense.

23
00:01:45,790 --> 00:01:51,850
But if it's super confusing, you might just want to pause this lesson and go search Google or YouTube

24
00:01:51,850 --> 00:01:54,400
for a quick HTML beginner guide.

25
00:01:54,640 --> 00:01:56,450
You don't need to do that preemptively.

26
00:01:56,590 --> 00:02:02,440
I would only do that if the HTML is making zero sense to you and you're super confused.

27
00:02:02,680 --> 00:02:04,540
OK, let's keep the train rolling.

28
00:02:04,780 --> 00:02:09,100
So after the heading level one, let's create a form element.

29
00:02:10,970 --> 00:02:19,430
So opening tag, closing tag inside this forum, let's give it two things, a text input field for the

30
00:02:19,430 --> 00:02:24,250
user to type into and then a button that they can click on to submit the form.

31
00:02:24,650 --> 00:02:27,050
So to create the field, we can just say input.

32
00:02:27,620 --> 00:02:29,810
Let's give it a type of text.

33
00:02:31,310 --> 00:02:38,330
I'm also going to set its autocomplete to off just because I don't like the annoying little pop up on

34
00:02:38,330 --> 00:02:42,020
the field that tries to suggest things that you've typed in the past.

35
00:02:42,380 --> 00:02:51,320
OK, next, let's include the button that the user clicks so button and let's have the button read create

36
00:02:51,320 --> 00:02:51,920
item.

37
00:02:52,550 --> 00:02:59,690
OK, and then finally below the form down here, let's create a heading level three that reads need

38
00:03:00,050 --> 00:03:01,100
to do.

39
00:03:02,480 --> 00:03:08,150
And while we're at it, let's also add a bullet hit list with a few hard coded example items.

40
00:03:08,570 --> 00:03:13,730
So you go for unordered list and a quick code pen HTML tip.

41
00:03:13,910 --> 00:03:18,650
You can actually just type the name of the tag you want without any of the less than and greater than

42
00:03:18,650 --> 00:03:24,440
symbols and then push tab on your keyboard and it automatically does that for you.

43
00:03:24,830 --> 00:03:28,550
OK, inside the unordered list, let's create a couple of list items.

44
00:03:29,070 --> 00:03:31,460
Ultimately, we want the user to create these.

45
00:03:31,460 --> 00:03:36,350
We don't want to preemptively hardcoded them, but let's just do this to give ourselves something to

46
00:03:36,350 --> 00:03:37,030
work with.

47
00:03:37,580 --> 00:03:43,190
So I will say buy carrots and then we want to include a button here that says delete.

48
00:03:43,790 --> 00:03:47,500
And I'm just going to copy and paste this a few times just so we have something to look at.

49
00:03:47,500 --> 00:03:51,560
So maybe buy apples by lettuce.

50
00:03:52,010 --> 00:03:58,910
OK, now all together, this HTML should look something like this in the Web browser, right?

51
00:03:59,000 --> 00:04:02,330
So this is our basic user interface for the app.

52
00:04:02,960 --> 00:04:08,270
Now, when a user visits the app, we don't want there to actually already be items like this.

53
00:04:08,480 --> 00:04:14,750
We would expect this to be empty and then the user would use the input form to add the items.

54
00:04:15,110 --> 00:04:24,920
So big picture, it's the job of HTML to display content on the Web page, but HTML on its own just

55
00:04:24,920 --> 00:04:28,070
sort of sits there and doesn't move or do anything.

56
00:04:28,370 --> 00:04:32,590
So it's the job of JavaScript to make this come to life.

57
00:04:32,930 --> 00:04:35,340
So where should we begin with our JavaScript?

58
00:04:35,780 --> 00:04:42,260
Well, I think we should focus on our form input now before we jump right into the JavaScript column

59
00:04:42,260 --> 00:04:50,470
and start coding, let's first adjust our HTML to give the form element a unique identifier.

60
00:04:50,720 --> 00:04:55,880
In other words, we need some sort of way to hook on to this form in JavaScript.

61
00:04:56,390 --> 00:05:02,210
So in our HTML on this opening form tag, we can just give it an ID.

62
00:05:03,440 --> 00:05:09,890
So maybe say ID equals the name doesn't really matter, but I'm just going to choose our form.

63
00:05:10,340 --> 00:05:17,050
The idea here is that now we can search for the element that has this ID over in our JavaScript.

64
00:05:17,450 --> 00:05:20,330
So now let's switch gears and go into the JavaScript column.

65
00:05:22,460 --> 00:05:29,270
Now, in the past, we've learned about the document object, which represents the Web pages, content

66
00:05:29,270 --> 00:05:36,020
and abilities, and in the past, when we want it to be on the lookout for an event, we would use add

67
00:05:36,020 --> 00:05:40,200
event listener write, this is how we would listen for click events.

68
00:05:40,490 --> 00:05:47,600
However, in this case, we don't want to use our event listener for the Web page as a whole, so we

69
00:05:47,600 --> 00:05:50,200
don't want to use it directly on the document object.

70
00:05:50,570 --> 00:05:56,360
Instead, we want to select just that one particular form element.

71
00:05:56,960 --> 00:05:58,100
So check this out.

72
00:05:58,100 --> 00:06:08,120
Over in our JavaScript we can say document dot get element by IDE for the argument.

73
00:06:08,120 --> 00:06:09,560
We just give it the IDs.

74
00:06:09,560 --> 00:06:11,480
So we called it our form.

75
00:06:11,990 --> 00:06:19,710
And this method is going to return an object that represents that HTML form element.

76
00:06:20,120 --> 00:06:26,270
Now, since that's what this method is going to return, we could just add a dot here and say add event

77
00:06:26,270 --> 00:06:28,910
listener all on one line like that.

78
00:06:29,930 --> 00:06:33,860
But instead what I like to do is save the object.

79
00:06:34,040 --> 00:06:36,940
This is going to return into a variable.

80
00:06:37,550 --> 00:06:45,250
So at the beginning of this line we could say let our form equal the object that this is going to return

81
00:06:45,680 --> 00:06:46,070
this way.

82
00:06:46,070 --> 00:06:48,380
Our koja stays a little bit easier to read.

83
00:06:48,770 --> 00:06:54,380
So then on a brand new line, we can say our form and then we want to add an event listener.

84
00:06:54,380 --> 00:06:56,540
So add event listener.

85
00:06:57,080 --> 00:07:01,160
And just as a quick test, because we are familiar with it, let's pass it click.

86
00:07:01,760 --> 00:07:07,300
And then remember, the second argument is the function that you want to run when this event happens.

87
00:07:07,700 --> 00:07:12,250
So let's just include an anonymous function here or even one step better.

88
00:07:12,560 --> 00:07:20,960
Why don't we use an arrow function so parentheses and then the arrow symbol and then curly brackets

89
00:07:20,960 --> 00:07:23,480
and we can drop down inside the curly brackets.

90
00:07:23,810 --> 00:07:29,270
And just as a test, when someone clicks anywhere on the form, let's show an annoying alert pop up

91
00:07:29,270 --> 00:07:33,410
message that says thanks for clicking the form.

92
00:07:34,390 --> 00:07:40,180
OK, now let's test out our code if we come down to the preview area, notice that if I click somewhere

93
00:07:40,180 --> 00:07:44,860
random on the Web page, like the heading level one title, nothing happens.

94
00:07:45,100 --> 00:07:49,020
But if I click onto the form, we see the alert.

95
00:07:49,450 --> 00:07:50,050
Awesome.

96
00:07:50,440 --> 00:07:57,190
I think you can already see that adding an event listener to a particular element instead of the document

97
00:07:57,190 --> 00:07:57,940
as a whole.

98
00:07:58,180 --> 00:08:00,730
This already opens up so many doors.

99
00:08:01,060 --> 00:08:06,670
Now, we don't actually want anything to happen when the user simply clicks onto the form.

100
00:08:07,060 --> 00:08:12,650
So instead, the event that we want to be on the lookout for is actually called submit.

101
00:08:13,060 --> 00:08:19,290
So up in our JavaScript code, instead of click here, let's get rid of that and say submit.

102
00:08:20,230 --> 00:08:24,630
So any time the user submits this form, we want to do something in response.

103
00:08:24,940 --> 00:08:31,240
However, the default behavior of a Web browser, when you submit a form, is that it's going to try

104
00:08:31,240 --> 00:08:33,700
to send that data off somewhere.

105
00:08:34,120 --> 00:08:38,530
In this case, we want to handle things completely from within our JavaScript.

106
00:08:38,920 --> 00:08:42,320
So we don't want the Web browser to try and send the data anywhere.

107
00:08:42,550 --> 00:08:47,590
So what we can do within the parentheses for our function here, let's include a parameter.

108
00:08:47,860 --> 00:08:50,830
I'm going to call it E, but you could name it whatever you want.

109
00:08:51,270 --> 00:08:56,560
OK, and then inside the body of our function, we want to look inside that parameter.

110
00:08:56,710 --> 00:09:02,470
Now, I named it E because the ADD event listener method is going to pass our function.

111
00:09:02,740 --> 00:09:06,400
A bunch of information about the event that just happened.

112
00:09:06,880 --> 00:09:15,730
So the E is short for event, but basically down here in our code we want to say e dot prevent default

113
00:09:16,300 --> 00:09:18,100
and parentheses to call the method.

114
00:09:18,480 --> 00:09:21,580
I realize this is a bit confusing and not very intuitive.

115
00:09:21,850 --> 00:09:25,990
It's just one of the intricacies of the Web browser that we have to deal with.

116
00:09:26,440 --> 00:09:26,760
Right.

117
00:09:26,770 --> 00:09:32,920
Its default behavior is to try and refresh or reload the Web page and send that data off somewhere.

118
00:09:33,280 --> 00:09:34,510
We don't want that to happen.

119
00:09:34,510 --> 00:09:36,220
So we are just preventing it.

120
00:09:36,640 --> 00:09:38,310
OK, now let's check out our app again.

121
00:09:38,320 --> 00:09:41,950
So now I'm free to click onto the form and nothing happens.

122
00:09:42,250 --> 00:09:45,610
But as soon as I tried to submit it, awesome.

123
00:09:45,610 --> 00:09:46,680
We see our alert.

124
00:09:47,170 --> 00:09:51,220
OK, now, next, we don't actually want to show this annoying pop up.

125
00:09:51,580 --> 00:09:58,060
So when the user submits the form, what we really want to do is grab the value of whatever they typed

126
00:09:58,060 --> 00:10:02,440
into this field and then add it as a new item into the list.

127
00:10:02,920 --> 00:10:08,250
So we are going to need to be able to access this input field from within our JavaScript.

128
00:10:08,620 --> 00:10:14,840
So let's go into our HTML and give it a unique ID so we have something to hook on to.

129
00:10:15,630 --> 00:10:17,620
So back up in our HTML column.

130
00:10:19,390 --> 00:10:25,740
Here is the input that lives in our form and maybe right after the word input, let's give it an I.D.

131
00:10:26,410 --> 00:10:33,360
and you could come up with any name you want, but I'm going to call it our field, OK, our field.

132
00:10:33,460 --> 00:10:39,850
So then over in our JavaScript, just like we did with the form, remember, we created a variable that

133
00:10:39,850 --> 00:10:43,440
stored the object that represents that HTML element.

134
00:10:43,780 --> 00:10:45,580
Let's do the same thing for our field.

135
00:10:45,730 --> 00:10:56,590
So up here, I'm going to say let our field equal document get element by ID and it had an idea of our

136
00:10:56,620 --> 00:10:57,220
field.

137
00:10:57,850 --> 00:11:03,580
OK, now inner function that runs when the form gets submitted instead of this annoying alert pop up.

138
00:11:03,580 --> 00:11:04,630
Let's get rid of that.

139
00:11:05,050 --> 00:11:12,940
And just as a test, let's log out to the console, whatever the user has typed in to that input field.

140
00:11:13,360 --> 00:11:13,600
Right.

141
00:11:13,600 --> 00:11:20,830
We want to practice accessing the user's input so we know that that field is represented by this our

142
00:11:20,830 --> 00:11:22,090
field object.

143
00:11:22,090 --> 00:11:29,830
So we can just say our field and in the Web browser, the object that represents that form field has

144
00:11:29,830 --> 00:11:34,560
a property so we can look inside the object for the property named value.

145
00:11:34,990 --> 00:11:36,110
Let's test this out.

146
00:11:36,130 --> 00:11:42,970
So back on our Web page, be sure to open up your console if I type into this field.

147
00:11:43,540 --> 00:11:44,380
Hello there.

148
00:11:44,830 --> 00:11:48,280
And submit awesome in the console.

149
00:11:48,280 --> 00:11:48,910
We see.

150
00:11:49,090 --> 00:11:49,860
Hello there.

151
00:11:50,470 --> 00:11:53,530
Now, we don't actually want to just log it to the console.

152
00:11:53,830 --> 00:11:57,490
What we really want to do is add a new item to the bulleted list.

153
00:11:57,880 --> 00:12:05,950
So why don't we go into our HTML and give this unordered list and ID so that we can hook on to it from

154
00:12:05,950 --> 00:12:07,200
within our JavaScript.

155
00:12:07,780 --> 00:12:12,100
So in the HTML down towards the bottom.

156
00:12:12,100 --> 00:12:16,990
Remember, the bulleted list is contained in this unordered list element.

157
00:12:17,530 --> 00:12:24,100
So on the opening you'll tag to say ID equals the name I'm going to choose is our list.

158
00:12:24,610 --> 00:12:26,820
OK, so we can hook on to this in our JavaScript.

159
00:12:26,830 --> 00:12:33,730
So back in our JS code, up at the top, let's create an object that represents that unordered list

160
00:12:33,730 --> 00:12:34,240
element.

161
00:12:34,990 --> 00:12:42,610
So let our list equal document, get elements by ID our list.

162
00:12:43,280 --> 00:12:50,230
OK, now we could write the necessary code right within this arrow function, but I want to stay organized

163
00:12:50,710 --> 00:12:57,700
so that at the very bottom of our code, let's create a brand new function and name it create item.

164
00:12:57,940 --> 00:12:58,900
The name doesn't matter.

165
00:12:58,900 --> 00:13:00,070
That's just what I'm going with.

166
00:13:00,430 --> 00:13:02,260
So parentheses curly brackets.

167
00:13:02,570 --> 00:13:09,220
OK, now up in our arrow function, instead of logging to the console that value that the user typed

168
00:13:09,220 --> 00:13:13,480
in instead, why don't we just pass it to our new function?

169
00:13:13,930 --> 00:13:19,090
So instead of console log, let's just say create item.

170
00:13:19,450 --> 00:13:24,850
OK, now if we are passing this as an argument into the function, we want to be able to receive it

171
00:13:24,850 --> 00:13:25,870
as a parameter.

172
00:13:26,200 --> 00:13:31,480
So in our create item function, let's just include an X or something easy to type for the parameter.

173
00:13:31,810 --> 00:13:35,320
OK, now here's the fun part in the body of this function.

174
00:13:35,530 --> 00:13:38,860
Let's select our our list object.

175
00:13:39,010 --> 00:13:46,090
Remember, this object represents that bulleted list and then let's look inside it and call a method

176
00:13:46,510 --> 00:13:52,030
named insert adjacent HTML.

177
00:13:53,440 --> 00:13:59,980
So we give this method to arguments, the first argument is where in the element do we want to add the

178
00:13:59,980 --> 00:14:01,240
new bit of content?

179
00:14:01,540 --> 00:14:06,720
Well, I would expect that a new item gets added to the very end of the list.

180
00:14:07,300 --> 00:14:16,120
So in our code for the first argument, I'm going to say before and and then the second argument is

181
00:14:16,120 --> 00:14:20,350
just the content or HTML that you want to add to this element.

182
00:14:20,800 --> 00:14:26,860
So we could just say a string of text that says hello or some sort of test, but instead we know that

183
00:14:26,860 --> 00:14:29,170
we can just include our parameter here.

184
00:14:29,170 --> 00:14:33,910
Right, because this parameter represents whatever the user typed into the field.

185
00:14:34,420 --> 00:14:34,660
Right.

186
00:14:34,660 --> 00:14:36,850
Because that's what we're passing into our function.

187
00:14:37,300 --> 00:14:39,610
So for the second argument, I'm just going to say X..

188
00:14:40,180 --> 00:14:41,360
Now, let's test this out.

189
00:14:41,770 --> 00:14:47,970
So if we come down to our app, I will type in, wash my car and then submit the form.

190
00:14:48,580 --> 00:14:51,220
Awesome gets added to the end of our list.

191
00:14:51,520 --> 00:14:52,990
Now, it doesn't look quite right.

192
00:14:52,990 --> 00:14:58,620
And that's because we need to wrap it in Elai Tag, just like we did with the other elements.

193
00:14:58,870 --> 00:15:01,300
So let's actually go back into our HTML.

194
00:15:03,390 --> 00:15:06,180
And we don't need these anymore, right?

195
00:15:06,230 --> 00:15:11,970
We want the list to be empty when the user comes to the app, but why don't we copy and paste one of

196
00:15:11,970 --> 00:15:16,200
them as an example to save ourselves a bit of typing in the JavaScript?

197
00:15:16,950 --> 00:15:22,590
So I'm just going to copy the first one, copy that into my clipboard, and then we can get rid of all

198
00:15:22,590 --> 00:15:29,270
of these hard coded items, but keep the empty, hollowed out unordered list, OK?

199
00:15:29,340 --> 00:15:35,100
And then back in our JavaScript, down in our create item function instead of just X.

200
00:15:35,220 --> 00:15:41,020
So instead of just literally adding the word that the user typed, we want to add a bit of HTML.

201
00:15:41,400 --> 00:15:46,790
So here's what I'm going to do inside this function, right above this line.

202
00:15:46,800 --> 00:15:50,600
Let's create a variable and call it our HTML.

203
00:15:50,610 --> 00:15:51,620
The name doesn't matter.

204
00:15:51,630 --> 00:15:52,710
That's just what I'm picking.

205
00:15:52,950 --> 00:15:58,290
And then let's create a template literal so to back ticks inside the template, literal.

206
00:15:58,290 --> 00:15:59,850
Let's just paste in our clipboard.

207
00:16:00,730 --> 00:16:05,760
So this is the template for an item and then let's hollow out by carrot's.

208
00:16:05,760 --> 00:16:07,830
We don't want it to be hard coded to that.

209
00:16:10,070 --> 00:16:14,930
We want to do something dynamic, so in a template literal, you can say dollar sign, curly brackets,

210
00:16:15,380 --> 00:16:20,120
and that is where we would pull in the X parameter, whatever the user typed in.

211
00:16:20,600 --> 00:16:24,470
OK, so now we have this HTML template for the new item.

212
00:16:24,800 --> 00:16:26,510
We saved it into this variable.

213
00:16:26,810 --> 00:16:35,290
So down here, instead of adding X into that unordered list, let's just add our our HTML variable like

214
00:16:35,300 --> 00:16:36,440
this nice little template.

215
00:16:37,010 --> 00:16:39,260
So let's test this out down in our app.

216
00:16:39,830 --> 00:16:43,020
Let's say feed cat, submit the form.

217
00:16:43,400 --> 00:16:43,910
Awesome.

218
00:16:43,920 --> 00:16:44,570
There it is.

219
00:16:45,620 --> 00:16:47,870
Create another one by carrot's.

220
00:16:48,320 --> 00:16:48,980
Perfect.

221
00:16:49,520 --> 00:16:50,870
Let's do two more things.

222
00:16:51,050 --> 00:16:57,140
First, let's set it up so that when you submit this form, it erases the current item that you've typed.

223
00:16:57,350 --> 00:16:57,620
Right.

224
00:16:57,620 --> 00:17:02,710
Because if we successfully added by carrot's to the list, we don't need that in the field anymore.

225
00:17:03,020 --> 00:17:07,720
We want to be able to just type a new item in instead of having to select it and delete it.

226
00:17:08,060 --> 00:17:12,530
And then after we set that up, let's also make it so that when you click the delete button for one

227
00:17:12,530 --> 00:17:15,320
of these, something actually happens.
