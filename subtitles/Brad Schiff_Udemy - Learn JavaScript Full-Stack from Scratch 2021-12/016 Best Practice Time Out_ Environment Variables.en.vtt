WEBVTT
1
00:00:01.770 --> 00:00:02.790
Hello, everyone.

2
00:00:03.210 --> 00:00:06.750
This video is going to be a very short and quick tangent.

3
00:00:07.110 --> 00:00:12.540
I know I promised that we would work on the login feature in this video, but there's a best practice

4
00:00:12.540 --> 00:00:14.400
that I really want to share with you first.

5
00:00:14.730 --> 00:00:19.980
So this video should be super short and quick, and then we will indeed work on the login feature in

6
00:00:19.980 --> 00:00:20.940
the next video.

7
00:00:21.240 --> 00:00:22.380
All right, let's get started.

8
00:00:22.680 --> 00:00:29.220
So in our previous lesson within this new DB Dogs file, we included our connection string.

9
00:00:29.550 --> 00:00:36.180
Now, clearly, this setup technically works, but from a best practice standpoint, we can do better.

10
00:00:36.660 --> 00:00:42.660
There are two main issues why hard coding something like this in our file is a bad idea.

11
00:00:43.050 --> 00:00:45.300
Number one is just basic security.

12
00:00:45.690 --> 00:00:51.870
So because this connection string includes a username and password, well, we probably want to take

13
00:00:51.870 --> 00:00:52.920
extra care with it.

14
00:00:53.340 --> 00:01:01.410
For example, if you pushed your source code up to a free GitHub account, well, all free GitHub repositories

15
00:01:01.410 --> 00:01:02.970
are publicly viewable.

16
00:01:03.330 --> 00:01:09.540
So in other words, if you posted this repo up to a free GitHub account, then anyone in the world can

17
00:01:09.540 --> 00:01:13.830
now view your MongoDB username and password.

18
00:01:14.250 --> 00:01:15.210
Just a quick update.

19
00:01:15.210 --> 00:01:22.140
This is Brad from December of 2021, and yes, now free GitHub accounts can have private repositories.

20
00:01:22.470 --> 00:01:28.170
Back when I wrote the outline for this original video, free accounts could only create public repos,

21
00:01:28.170 --> 00:01:29.850
but the idea still stands.

22
00:01:30.090 --> 00:01:36.060
You probably don't want to have super sensitive usernames and passwords in your source code on GitHub

23
00:01:36.060 --> 00:01:36.420
at all.

24
00:01:36.540 --> 00:01:38.730
Whether it's a private or public repo.

25
00:01:39.090 --> 00:01:42.870
So that's one reason why you would not want a hard code, something like this.

26
00:01:43.230 --> 00:01:47.730
Another reason is what if we want to connect to a different database?

27
00:01:47.970 --> 00:01:50.970
Depending on the environment in which our app is running?

28
00:01:51.360 --> 00:01:57.450
So, for example, maybe on our personal physical computer right within our development playground,

29
00:01:57.450 --> 00:01:59.760
we would want to connect to one database.

30
00:02:00.000 --> 00:02:05.490
But then maybe when we push our app up onto the web and we're dealing with the real copy that the general

31
00:02:05.490 --> 00:02:06.840
public is going to visit.

32
00:02:07.140 --> 00:02:11.250
In that case, maybe we'd want our app to connect to a different database.

33
00:02:11.610 --> 00:02:16.290
So in short, we would want this to be a different value, depending on the current environment.

34
00:02:16.650 --> 00:02:21.870
Well, this is exactly where something called environment variables come into play.

35
00:02:22.290 --> 00:02:28.530
I think it's easier to simply see an environment variable in action instead of trying to explain it

36
00:02:28.530 --> 00:02:29.490
just with words.

37
00:02:29.850 --> 00:02:35.010
So right now, I want you to follow along with me within the root of our project folder.

38
00:02:35.220 --> 00:02:41.970
I want you to create a brand new file, so new file, and I want you to name this new file.

39
00:02:42.420 --> 00:02:46.600
Dot, E and V so nothing before the dot.

40
00:02:46.620 --> 00:02:49.410
It actually begins with a dot dot EMV.

41
00:02:50.100 --> 00:02:54.120
Within this empty new file, we can create environment variables.

42
00:02:54.420 --> 00:03:00.030
You can name one of these variables whatever you want, but in the programming world, it is a common

43
00:03:00.030 --> 00:03:03.360
convention to name it with all capital letters.

44
00:03:03.690 --> 00:03:05.030
So type this in with me.

45
00:03:05.040 --> 00:03:10.330
Let's create an environment variable named connection string.

46
00:03:11.070 --> 00:03:17.640
Now in this file, we do not use JavaScript syntax, so we don't even include a space after the name

47
00:03:17.640 --> 00:03:19.080
we just say equals.

48
00:03:19.320 --> 00:03:22.740
And then we do not include quotes for a string of text.

49
00:03:22.950 --> 00:03:25.600
You simply start typing your string of text.

50
00:03:25.650 --> 00:03:26.490
So let's do this.

51
00:03:26.490 --> 00:03:29.610
Let's say connection string equals.

52
00:03:29.610 --> 00:03:36.900
And then let's jump back into our DB dogs file and I want you to copy your connection string value into

53
00:03:36.900 --> 00:03:37.650
your clipboard.

54
00:03:39.870 --> 00:03:44.220
So copy that and then back in our new Dot EMV file.

55
00:03:44.490 --> 00:03:46.020
Just paste in your clipboard.

56
00:03:47.040 --> 00:03:49.380
So your new file should look something like this.

57
00:03:49.560 --> 00:03:52.110
Notice there's no quotes around the value.

58
00:03:52.530 --> 00:03:59.780
All right, now, let's go ahead and save this file and then jump back in to DVD jazz at this point,

59
00:03:59.790 --> 00:04:00.810
as you might have guessed.

60
00:04:00.960 --> 00:04:07.320
We no longer want to hard code this value here in these quotes from Mongo client, we instead want to

61
00:04:07.320 --> 00:04:09.990
pull in an environment variable.

62
00:04:10.290 --> 00:04:16.530
Now, in order to easily load an environment variable from our Dot, E and V file, we're going to want

63
00:04:16.530 --> 00:04:23.190
to go out to the JavaScript grocery store or npm and pick up a package so down in your command line.

64
00:04:23.190 --> 00:04:30.640
Press Control, see if your app is currently running and type this command in with me npm install.

65
00:04:30.930 --> 00:04:34.230
And the name of the package is Dot EMV.

66
00:04:34.800 --> 00:04:40.800
This is a super popular package that is downloaded several million times per week.

67
00:04:41.250 --> 00:04:44.940
OK, so npm install dot EMV, then press enter.

68
00:04:46.560 --> 00:04:50.910
All right now up at the very top of our DB D.J.s file, let's do this.

69
00:04:50.910 --> 00:04:52.710
Let's require in that package.

70
00:04:53.400 --> 00:05:01.770
So let's say Konst Dot EMV equals and then just use require so require and its name was dot EMV.

71
00:05:02.430 --> 00:05:10.140
OK, and then on the next line, let's say dot EMV, dot config and config is a method, so parentheses

72
00:05:10.140 --> 00:05:10.680
to call it.

73
00:05:11.010 --> 00:05:14.670
And that's all we need to do as soon as we run config here.

74
00:05:14.820 --> 00:05:22.710
That package is going to load in all of the values that we defined within our Dot EMV file, so it knows

75
00:05:22.710 --> 00:05:26.260
specifically to look for a file named Dot EMV.

76
00:05:26.490 --> 00:05:28.170
And it's going to take care of the rest.

77
00:05:28.410 --> 00:05:33.540
So now when we use Mongo client right here, just hollow out the parentheses, so get rid of the quotes

78
00:05:33.540 --> 00:05:34.140
are value.

79
00:05:34.140 --> 00:05:43.890
Everything just like this and we can just say process, dot, EMV, dot and then the name of the environment

80
00:05:43.890 --> 00:05:44.550
variable.

81
00:05:44.820 --> 00:05:49.230
So we named it all uppercase connection string.

82
00:05:49.980 --> 00:05:55.110
So in the Node.js environment, this is how you access environment variables.

83
00:05:55.440 --> 00:05:59.580
Process, dot, EMV, dot and then the name of the variable.

84
00:06:00.120 --> 00:06:03.450
All right, let's go ahead and save this and take it for a test drive.

85
00:06:03.780 --> 00:06:06.600
So be sure in your command line to fire up your app again.

86
00:06:06.900 --> 00:06:09.150
NPM run watch.

87
00:06:11.350 --> 00:06:16.780
And if I jump into the browser and test my app, maybe if I try to register another user, so username,

88
00:06:16.780 --> 00:06:18.280
cat, email cat.

89
00:06:18.550 --> 00:06:21.010
Cat Gqom, choose a password.

90
00:06:23.740 --> 00:06:24.190
Congrats.

91
00:06:24.220 --> 00:06:29.530
There are no errors, and if I check my MongoDB Atlas account and click Find to refresh the data.

92
00:06:30.430 --> 00:06:30.910
Awesome.

93
00:06:30.910 --> 00:06:33.100
There we see a second document for Cat.

94
00:06:33.610 --> 00:06:35.980
So this means that our application is still working.

95
00:06:35.980 --> 00:06:41.800
It's still able to connect to the database and we have successfully set up environment variables.

96
00:06:42.220 --> 00:06:43.660
Now, practice makes perfect.

97
00:06:43.660 --> 00:06:50.710
So before I explain why this is truly useful and desirable, let's set up one more environment variable.

98
00:06:50.950 --> 00:06:55.360
So, for example, we are telling our app to listen on Port three thousand.

99
00:06:55.660 --> 00:07:01.150
Now that's great for our local development environment, but we might need to listen on a different

100
00:07:01.150 --> 00:07:07.900
port number when we actually push this up to its production or live or real environment that the general

101
00:07:07.900 --> 00:07:08.830
public can visit.

102
00:07:09.250 --> 00:07:15.490
For example, when we pushed our to do app up to Heroku, we needed to use the Heroku approved port

103
00:07:15.490 --> 00:07:19.620
number instead of just hard coding this to always be three thousand.

104
00:07:19.990 --> 00:07:23.590
So let's do this within our Dot EMV file.

105
00:07:23.860 --> 00:07:28.780
Let's add a new line, and let's create another environment variable this time.

106
00:07:28.780 --> 00:07:30.280
Let's name it port.

107
00:07:31.060 --> 00:07:32.920
So let's say port equals.

108
00:07:32.920 --> 00:07:34.960
And then let's just say three thousand.

109
00:07:35.860 --> 00:07:37.240
Let's go ahead and save that.

110
00:07:37.570 --> 00:07:41.710
And then back in our DB tags file on this app.

111
00:07:41.970 --> 00:07:51.550
Listen, line, let's get rid of the hardcoded three thousand and instead say Process Dot EMV dot port.

112
00:07:52.670 --> 00:07:59.150
OK, let's go ahead and save that, and if I go back to the browser and refresh, you can see our home

113
00:07:59.150 --> 00:08:00.350
page is still available.

114
00:08:00.470 --> 00:08:00.860
Cool.

115
00:08:01.250 --> 00:08:06.110
Now let's go back and understand why this is a desirable way to set things up.

116
00:08:06.590 --> 00:08:10.160
So reason number one, let's talk about privacy or security.

117
00:08:10.430 --> 00:08:17.930
So now, even if you post in your source code to a public GitHub account, your MongoDB username and

118
00:08:17.930 --> 00:08:24.200
password would not be leaked because what you could do when you first set up your git repository is

119
00:08:24.200 --> 00:08:26.600
within your dot git ignore file.

120
00:08:26.840 --> 00:08:35.090
You could just say to ignore your Dot EMV file so you would keep a copy of this Dot EMV file on your

121
00:08:35.090 --> 00:08:39.920
personal computer, but you would not include this file within your repository.

122
00:08:40.310 --> 00:08:40.730
OK.

123
00:08:40.760 --> 00:08:47.630
Another reason why this setup is desirable is now it's super easy for your application to change and

124
00:08:47.630 --> 00:08:50.660
adjust, depending on the current environment.

125
00:08:51.050 --> 00:08:57.530
So, for example, these values are great for when we are working on our local development copy and

126
00:08:57.530 --> 00:09:04.010
then when we finish our application and are ready to push it up to Heroku, well, we will just not

127
00:09:04.010 --> 00:09:07.110
push our dot EMV file up to Heroku.

128
00:09:07.460 --> 00:09:10.640
Instead, this would pull in whatever the environment variable.

129
00:09:10.760 --> 00:09:17.840
They've already set port to be within the Heroku environment, and we can just manually create an environment

130
00:09:17.840 --> 00:09:21.650
variable named connection string within our Heroku account.

131
00:09:22.220 --> 00:09:29.060
So this way you're managing the individual environment variables instead of having to change your actual

132
00:09:29.060 --> 00:09:29.660
code.

133
00:09:30.140 --> 00:09:33.350
Right this way, your important values are not hard coded.

134
00:09:33.770 --> 00:09:37.070
Now you can keep all sorts of things in your EMV file.

135
00:09:37.340 --> 00:09:42.530
So, for example, any secret API keys that you're using to connect to third party apps?

136
00:09:42.740 --> 00:09:43.760
They can go in here.

137
00:09:44.060 --> 00:09:49.790
And then when it's time to push your app up to a real hosting environment like Heroku, you just manually

138
00:09:49.790 --> 00:09:56.090
add those environment variables and you can set those up either within the dashboard for Heroku or just

139
00:09:56.090 --> 00:09:58.010
with a simple command line command.

140
00:09:58.340 --> 00:10:02.720
Don't worry, when that time comes, I will walk you through the steps of setting that up.

141
00:10:03.110 --> 00:10:09.770
For the time being, all you need to know is that we are now following the best practice of using environment

142
00:10:09.770 --> 00:10:10.610
variables.

143
00:10:11.090 --> 00:10:12.890
That's going to bring this video to a close.

144
00:10:13.100 --> 00:10:19.580
In our next video, we will indeed get started building the log in functionality.

145
00:10:20.240 --> 00:10:22.730
Let's keep things rolling, and I will see you then.
