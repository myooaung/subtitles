1
00:00:01,720 --> 00:00:02,660
Hello, everyone.

2
00:00:03,100 --> 00:00:09,280
In this lesson, we are going to continue working on the feature where a user can edit one of their

3
00:00:09,280 --> 00:00:10,550
existing posts.

4
00:00:11,020 --> 00:00:11,560
All right.

5
00:00:11,560 --> 00:00:15,100
So we've already set things up so that you can visit your profile.

6
00:00:15,880 --> 00:00:22,120
And then if you visit one of your posts, you can click this blue icon to go to the edit screen.

7
00:00:22,780 --> 00:00:28,170
And we are successfully pulling in the existing values for this post from the database.

8
00:00:28,630 --> 00:00:33,660
Now, in this lesson, we want to work on what should happen when this form is submitted.

9
00:00:33,970 --> 00:00:41,260
So let's begin by jumping into this SJS template and paying attention to the forms action value.

10
00:00:41,740 --> 00:00:41,940
Right.

11
00:00:42,040 --> 00:00:43,220
Where is it going to submit?

12
00:00:43,690 --> 00:00:52,270
So in our text editor in your Views folder, jump in to edit Dasch post DOT SJS towards the top on this

13
00:00:52,270 --> 00:00:53,580
opening form tag.

14
00:00:53,800 --> 00:01:03,400
Let's change the action value, so let's get rid of slash create post and instead say slash post slash

15
00:01:03,580 --> 00:01:06,900
and then we'll pull in the idea and then slash edit.

16
00:01:07,840 --> 00:01:14,890
Now we don't actually just want this hard coded text of ID, we want to pull in the actual ID, so jump

17
00:01:14,890 --> 00:01:21,340
into SJS and then in there we can just say post dot underscore I.D..

18
00:01:22,000 --> 00:01:26,410
OK, let's save this file and now we need to set up a route for this.

19
00:01:26,410 --> 00:01:27,520
You are URL pattern.

20
00:01:27,970 --> 00:01:34,630
We've already used this exact pattern, but before that was a request, whereas a form submit this is

21
00:01:34,630 --> 00:01:36,580
going to be a post request.

22
00:01:36,910 --> 00:01:44,680
So within the root of your folder, jump into Routon J.S. down towards the bottom to save a bit of typing.

23
00:01:44,680 --> 00:01:51,280
You can actually just duplicate this line where we say router target post idy edit.

24
00:01:51,880 --> 00:01:58,090
So I'm just going to duplicate that pasted in below and let's just change it from a git request to a

25
00:01:58,750 --> 00:02:00,220
post request.

26
00:02:00,640 --> 00:02:05,890
OK, and then for the second argument, in terms of a function we would want to run, we can still look

27
00:02:05,890 --> 00:02:07,150
within our post controller.

28
00:02:07,150 --> 00:02:12,670
But instead of you edit screen, let's imagine that we're going to have a function that's just named

29
00:02:13,000 --> 00:02:13,510
edit.

30
00:02:14,290 --> 00:02:19,960
OK, let's save this and now we better go into our post controller and create a function with this matching

31
00:02:19,960 --> 00:02:20,320
name.

32
00:02:20,710 --> 00:02:24,070
So within your controllers folder, jump into post controller.

33
00:02:24,700 --> 00:02:28,300
Let's scroll down to the very bottom and let's add a new function.

34
00:02:29,140 --> 00:02:36,280
So exports dot edit set it to a function within these parentheses.

35
00:02:36,280 --> 00:02:38,650
Be sure to include request and response.

36
00:02:38,920 --> 00:02:48,220
OK, now within the body of this function, let's say let lowercase post equal a new instance of uppercase

37
00:02:48,220 --> 00:02:48,820
post.

38
00:02:49,270 --> 00:02:53,140
So this is the same pattern we used when we created a post.

39
00:02:53,410 --> 00:02:53,680
Right.

40
00:02:53,680 --> 00:02:58,090
So then in these parentheses we would pass our blueprint, the submitted form data.

41
00:02:58,090 --> 00:02:59,740
So request dogsbody.

42
00:03:00,250 --> 00:03:04,300
OK, and then below this, let's use that new object that it's going to create.

43
00:03:04,490 --> 00:03:10,030
So lowercase post and let's just imagine that it's going to have a method named update.

44
00:03:10,660 --> 00:03:15,580
It doesn't actually have this method yet, but we can go create it in just a minute or two, OK?

45
00:03:15,580 --> 00:03:19,630
And when we do create it, we can set it up so that it returns a promise.

46
00:03:20,020 --> 00:03:24,340
So right after this, let's use the dot, then catch syntax.

47
00:03:24,910 --> 00:03:27,640
So dot then dot catch.

48
00:03:28,210 --> 00:03:32,050
Let's provide functions within both the then and catch parentheses.

49
00:03:32,530 --> 00:03:35,770
I'll use arrow functions just because they're a bit shorter or cleaner.

50
00:03:36,130 --> 00:03:37,660
Add one for catch as well.

51
00:03:40,570 --> 00:03:46,390
So at this point, I would start leaving comments to myself that explain how I would expect this promise

52
00:03:46,390 --> 00:03:52,390
to work, then when we're actually creating this promise, we'll have some sort of plan in terms of

53
00:03:52,390 --> 00:03:55,060
when and how we want it to resolve or reject.

54
00:03:55,460 --> 00:03:58,690
OK, so let's start first with if the promise rejects.

55
00:03:58,990 --> 00:04:05,080
This would be if a post with the request, that idea doesn't exist.

56
00:04:08,410 --> 00:04:16,510
Or if the current visitor is not the owner of the requested post.

57
00:04:17,080 --> 00:04:22,360
So if either of these things is the case, I probably just want to redirect the user back to the home

58
00:04:22,360 --> 00:04:29,290
page with a red error message that says you do not have permission to perform that action or something

59
00:04:29,290 --> 00:04:30,330
along those lines.

60
00:04:30,820 --> 00:04:31,820
So let's set that up.

61
00:04:31,840 --> 00:04:33,580
I would use the flash package.

62
00:04:33,590 --> 00:04:40,120
So request flash and add on to a collection named Errors and I'd give it a string of text.

63
00:04:40,120 --> 00:04:46,360
Says you do not have permission to perform that action, OK.

64
00:04:46,380 --> 00:04:51,790
After that, I'd want to manually save the session data and then redirect them back to the home page.

65
00:04:52,510 --> 00:05:00,340
So request session, save, give it a function and then finally redirect them as a response.

66
00:05:00,760 --> 00:05:03,400
Redirect back to the home page.

67
00:05:04,060 --> 00:05:05,950
OK, so that takes care of the catch.

68
00:05:06,160 --> 00:05:09,190
If this update promise rejects.

69
00:05:09,190 --> 00:05:11,240
But what if the promise resolves.

70
00:05:12,130 --> 00:05:15,280
So let's start adding a few comments here to stay organized.

71
00:05:15,790 --> 00:05:23,890
If the promise is successful, that would mean that either A The Post was successfully updated in the

72
00:05:23,890 --> 00:05:29,700
database or it could also mean that this user does indeed have permission.

73
00:05:29,710 --> 00:05:30,010
Right.

74
00:05:30,190 --> 00:05:32,500
They are indeed the owner of this post.

75
00:05:32,740 --> 00:05:39,430
But maybe there was a validation error, meaning maybe they left the title field blank or the body field

76
00:05:39,430 --> 00:05:41,280
blank, which is not allowed.

77
00:05:41,290 --> 00:05:41,500
Right.

78
00:05:41,510 --> 00:05:43,540
You must provide content for these.

79
00:05:43,960 --> 00:05:49,630
So even though they had permissions to modify the post, it still didn't successfully go through.

80
00:05:50,230 --> 00:05:57,900
So I could just say or user did have permission, but there were validation errors.

81
00:05:58,480 --> 00:06:04,840
Now, in order to know which one of these is the case, we could just set up our update promise to resolve

82
00:06:04,840 --> 00:06:06,370
with a status value.

83
00:06:06,640 --> 00:06:06,940
Right.

84
00:06:06,940 --> 00:06:11,140
So it could just be a string of text that either says success or failure.

85
00:06:11,650 --> 00:06:13,450
So we'd want to receive that value.

86
00:06:13,450 --> 00:06:18,640
So within these parentheses for this arrow function, let's just make up a parameter, let's call it

87
00:06:18,880 --> 00:06:19,840
status.

88
00:06:20,260 --> 00:06:23,020
Now, below these comments, we can just set up an if statement.

89
00:06:23,410 --> 00:06:30,040
So if parentheses curly brackets, let's also set up an else block for the condition.

90
00:06:30,040 --> 00:06:40,030
We can just say if status equals success, well, that means the Post was actually updated in the database.

91
00:06:40,510 --> 00:06:42,280
We can leave a comment here to ourselves.

92
00:06:42,460 --> 00:06:46,750
Post was updated in DB else.

93
00:06:46,750 --> 00:06:49,720
Otherwise that means the user had permission.

94
00:06:49,990 --> 00:06:54,340
But there were validation errors like maybe they left the title or body fields blank.

95
00:06:54,730 --> 00:07:00,220
If that's the case, I would just want to redirect the user back to that same edit screen and show them

96
00:07:00,220 --> 00:07:08,380
red error rectangles with the validation errors so we can just say lowercase post dot errors.

97
00:07:08,560 --> 00:07:12,280
We would want to loop through those and create a flash message for each one.

98
00:07:12,670 --> 00:07:15,760
So for each give that a function.

99
00:07:17,380 --> 00:07:22,840
But then those parentheses, let's work with the current item so we could say error within this.

100
00:07:22,840 --> 00:07:26,530
For each function we could just say request dot flash.

101
00:07:27,040 --> 00:07:33,010
We want to add on to a collection named Errors and the value should just be the current item in the

102
00:07:33,010 --> 00:07:33,790
errors array.

103
00:07:33,790 --> 00:07:40,030
So error, OK, after that I just want to manually save the session data and then redirect them.

104
00:07:41,110 --> 00:07:44,800
So request session save give that a function.

105
00:07:48,970 --> 00:07:55,990
To redirect, just response, redirect, and now instead of quotes, let's actually use back tactics,

106
00:07:56,290 --> 00:08:03,340
so let's redirect them to slash post slash I.D., slash edit only.

107
00:08:03,340 --> 00:08:08,710
Instead of hard coding this to ID, we'd want to do something dynamic's a dollar sign curly brackets

108
00:08:09,070 --> 00:08:13,200
and then we can just say request Paramo I.D..

109
00:08:13,930 --> 00:08:14,160
Right.

110
00:08:14,170 --> 00:08:16,630
That's the idea of the post they were trying to edit.

111
00:08:17,290 --> 00:08:22,740
OK, finally, let's circle back to this area where we say Post was updated in database.

112
00:08:23,170 --> 00:08:27,900
So this is if everything went perfectly, so what would we want to do in that case?

113
00:08:28,330 --> 00:08:33,700
I'd probably want to redirect them back to that same edit screen that just submitted from so they could

114
00:08:33,700 --> 00:08:37,130
continue making edits if they needed to, only up at the top.

115
00:08:37,150 --> 00:08:41,530
I would include a flash message only instead of a red error message.

116
00:08:41,530 --> 00:08:47,800
It could be a green success message that says Post successfully updated.

117
00:08:48,130 --> 00:08:50,380
So let's get started right underneath this comment.

118
00:08:50,410 --> 00:08:53,260
Let's say request dot flash.

119
00:08:53,710 --> 00:08:59,710
We'd want to add on to a collection, let's call it success, or you could call it success messages

120
00:08:59,710 --> 00:09:00,520
to be plural.

121
00:09:00,520 --> 00:09:01,330
It's up to you.

122
00:09:01,570 --> 00:09:04,720
But let's give this a second argument with the message that we want.

123
00:09:04,720 --> 00:09:08,800
So post successfully updated.

124
00:09:09,340 --> 00:09:15,280
OK, below that, I would want to manually save the session data and redirect them back to that same

125
00:09:15,280 --> 00:09:15,970
edit screen.

126
00:09:16,000 --> 00:09:22,890
So request session save give that a function, let's redirect them.

127
00:09:22,900 --> 00:09:25,090
So response stop redirect.

128
00:09:25,420 --> 00:09:33,490
Instead of quotes, I'm going to use tactics and redirect them to slash post slash idee slash edit.

129
00:09:34,210 --> 00:09:36,730
Let's hollow out that I'd make it dynamic.

130
00:09:36,730 --> 00:09:42,280
So dollar sign curly brackets and just say request Ramsgate id.

131
00:09:42,700 --> 00:09:50,350
OK now before we save this and then jump into our model to actually create this update function, let's

132
00:09:50,350 --> 00:09:55,660
first make sure that when we are using our blueprint, we're giving it all the information it needs

133
00:09:55,660 --> 00:09:58,390
to do its job and perform the permission check.

134
00:09:58,870 --> 00:10:04,630
So when we're creating a new instance of our post blueprint, let's give it additional arguments within

135
00:10:04,630 --> 00:10:09,730
these parentheses so common we need to give it the ID of the current visitor.

136
00:10:09,730 --> 00:10:18,460
So request visitor ID, comma, and we need to give it the ID for the current post that is being requested

137
00:10:18,460 --> 00:10:18,910
to edit.

138
00:10:19,480 --> 00:10:21,820
That's part of the Eurail for this request.

139
00:10:21,820 --> 00:10:24,550
So we can just say request programs.

140
00:10:25,180 --> 00:10:32,410
ID cool at this point, let's save this file and now we need to jump in to our post model and create

141
00:10:32,410 --> 00:10:39,880
a function named update that returns a promise and we'll either resolve or reject in a way that follows

142
00:10:39,880 --> 00:10:42,130
this pattern or structure that we just set up.

143
00:10:42,640 --> 00:10:46,810
So let's jump into our uppercase postgrads model file.
