1
00:00:02,210 --> 00:00:03,180
Hello, everyone.

2
00:00:03,470 --> 00:00:09,980
In this lesson, we are going to continue working on the front end or browser side JavaScript for our

3
00:00:09,980 --> 00:00:11,730
live search results.

4
00:00:12,380 --> 00:00:14,520
Let's jump right back into the action.

5
00:00:14,990 --> 00:00:22,610
OK, first of all, as of right now, if I visit any page in my application, I see this annoying search

6
00:00:22,610 --> 00:00:24,980
just as successfully being executed.

7
00:00:25,220 --> 00:00:28,040
So right now, let's go get rid of this alert message.

8
00:00:28,790 --> 00:00:35,990
So jump into your text editor and within your front end James folder, dig into the modules folder and

9
00:00:35,990 --> 00:00:38,180
jump into search dogs.

10
00:00:38,870 --> 00:00:41,440
OK, let's get rid of this alert line.

11
00:00:43,070 --> 00:00:50,440
But before we move on any further than that, let's first discuss the words class and constructor.

12
00:00:51,170 --> 00:01:01,040
If you've ever worked with another language besides JavaScript, such as C++, Java, Python or countless

13
00:01:01,040 --> 00:01:06,890
others, then throughout this course, when you've heard me say, let's create a blueprint that can

14
00:01:06,890 --> 00:01:12,740
be used to create new objects, you've probably been scratching your head and wondering why is he calling

15
00:01:12,740 --> 00:01:16,700
it a blueprint instead of just a class in many other languages?

16
00:01:16,700 --> 00:01:24,760
Aside from JavaScript, the official or correct or technical name for a blueprint for objects is a class.

17
00:01:25,250 --> 00:01:29,990
However, JavaScript does not actually have classes.

18
00:01:30,530 --> 00:01:38,540
Yes, we are successfully using the word class here and then in our main file we are successfully creating

19
00:01:38,540 --> 00:01:41,160
a new instance using that class.

20
00:01:41,570 --> 00:01:46,090
So yes, clearly JavaScript knows what we mean when we use the word class.

21
00:01:46,400 --> 00:01:54,200
But behind the scenes or underneath the hood, JavaScript is still using prototypes and it's not actually

22
00:01:54,200 --> 00:01:56,110
using classical inheritance.

23
00:01:56,450 --> 00:02:01,720
So in JavaScript, classes are what's known as syntactic sugar.

24
00:02:02,060 --> 00:02:09,290
It's an alternate syntax that might feel cleaner or more familiar or easier to read for many developers.

25
00:02:09,560 --> 00:02:14,680
But it's really just a different way of achieving the same thing that we set up before.

26
00:02:15,050 --> 00:02:16,220
So you don't need to type this.

27
00:02:16,220 --> 00:02:24,620
But remember earlier when we would create a function, maybe function search and we could say this DOT

28
00:02:25,100 --> 00:02:31,280
example property and set that to something and then we could leverage this constructor function so we

29
00:02:31,280 --> 00:02:34,670
could create a new instance from that constructor.

30
00:02:35,180 --> 00:02:35,420
Right.

31
00:02:35,450 --> 00:02:37,340
And that would return a new object.

32
00:02:37,670 --> 00:02:44,510
And then we could add functions or methods to this by saying search dot, prototype dot.

33
00:02:44,780 --> 00:02:47,970
My cool method equals a function.

34
00:02:48,740 --> 00:02:54,830
The idea is that in JavaScript we can use class syntax to achieve this same thing.

35
00:02:55,100 --> 00:03:01,850
Only our code can feel a bit cleaner or more readable or familiar because so many other languages do

36
00:03:01,850 --> 00:03:03,080
support classes.

37
00:03:03,470 --> 00:03:07,280
So it has a special reserved method name of constructor.

38
00:03:07,850 --> 00:03:13,520
And just like this syntax, this is what's going to run as a new object is being created.

39
00:03:13,880 --> 00:03:18,050
So just like in our traditional constructor function, this is where we could say something like this

40
00:03:18,050 --> 00:03:21,470
dot example property equals a value.

41
00:03:22,190 --> 00:03:28,970
And then in terms of making a method available to any object that is created using this class, well,

42
00:03:28,970 --> 00:03:34,400
right after the constructor still within our search class, you can just list out a method name so you

43
00:03:34,400 --> 00:03:40,010
can just say my cool method and we don't need to set that to equal a function.

44
00:03:40,010 --> 00:03:41,720
It can just be the function.

45
00:03:42,290 --> 00:03:46,700
I think we can all agree this feels a lot cleaner than this.

46
00:03:47,270 --> 00:03:53,150
But at the end of the day, both of these techniques are achieving the same thing behind the scenes.

47
00:03:53,150 --> 00:03:58,370
JavaScript is still going to convert this into using a prototype based approach.

48
00:03:58,790 --> 00:04:01,820
But as the developer, we don't really need to worry about that.

49
00:04:02,060 --> 00:04:04,150
We can just write class code like this.

50
00:04:04,700 --> 00:04:06,200
That's enough theory for now.

51
00:04:06,210 --> 00:04:12,860
So let me get rid of this example code and let's get back to the actual task at hand.

52
00:04:13,130 --> 00:04:17,240
So if you need to pause the video to make sure that your file looks like this, so we're on the same

53
00:04:17,240 --> 00:04:18,680
page, that's OK.

54
00:04:19,190 --> 00:04:24,860
But at this point, we're going to begin work on the search feature for our first task.

55
00:04:24,860 --> 00:04:31,040
Let's set things up so that when you click on this search icon, maybe then we show an annoying alert

56
00:04:31,040 --> 00:04:31,670
message.

57
00:04:32,120 --> 00:04:32,250
Right.

58
00:04:32,390 --> 00:04:37,520
Our first task is to just capture the action of a user clicking on this icon.

59
00:04:37,940 --> 00:04:44,930
So back in our search dogs file, let me show you my personal, subjective approach towards writing

60
00:04:44,930 --> 00:04:46,760
browser based classes.

61
00:04:47,270 --> 00:04:53,240
I like to break things down into three areas so the constructor and we can leave comments to ourselves

62
00:04:53,240 --> 00:04:54,230
to stay organized.

63
00:04:54,230 --> 00:04:55,250
So I'd say no one.

64
00:04:55,550 --> 00:05:01,460
So in the constructor, I like to create properties that select DOM elements, so then I can just easily.

65
00:05:01,500 --> 00:05:10,170
Reference those later in the code, so for a comment, maybe, say, select DOM elements and keep track

66
00:05:10,170 --> 00:05:18,930
of any useful data, OK, below the constructor, let's add a comment and say this is our second area

67
00:05:19,230 --> 00:05:21,770
and this is where I like to keep track of my events.

68
00:05:22,020 --> 00:05:28,470
So things like a user clicking on something or the user scrolling or the user pushing a key on their

69
00:05:28,470 --> 00:05:29,280
keyboard.

70
00:05:29,670 --> 00:05:29,820
Right.

71
00:05:29,910 --> 00:05:32,340
These are the events that I want to respond to.

72
00:05:32,850 --> 00:05:37,530
And then finally, for a third area, this is where I include my methods.

73
00:05:38,250 --> 00:05:39,980
OK, let's walk through an example.

74
00:05:40,200 --> 00:05:46,800
So first we would need to select the HTML element that is this little search icon.

75
00:05:47,270 --> 00:05:50,670
So back in our code, I would do that in the constructor.

76
00:05:50,850 --> 00:05:59,190
So let's make up a property this dot, let's call it header search icon and set that to equal.

77
00:05:59,340 --> 00:06:02,140
And then we just want to look in the browser for that element.

78
00:06:02,160 --> 00:06:09,840
So document is the browser object and then it has a method named query selector and I can let you know

79
00:06:09,840 --> 00:06:13,470
that that icon has a class, an HTML class.

80
00:06:13,470 --> 00:06:18,720
This has nothing to do with a JavaScript class but to look for a HTML or CSS class.

81
00:06:18,720 --> 00:06:24,690
We say DOT and its class name is header dash, search dash ikon.

82
00:06:25,230 --> 00:06:25,710
Cool.

83
00:06:25,740 --> 00:06:29,220
Now that we've stored that element, we won't need to retrieve it again.

84
00:06:29,970 --> 00:06:30,260
Cool.

85
00:06:30,310 --> 00:06:34,740
So now in our events area, let's create a method named events.

86
00:06:34,740 --> 00:06:42,320
So events, parentheses, curly brackets and let's just add an event listener to this element.

87
00:06:42,450 --> 00:06:50,460
So this dot header search icon, dot add event listener.

88
00:06:50,940 --> 00:06:53,040
We give this to arguments a comma be.

89
00:06:53,040 --> 00:06:56,370
The first argument is the browser event we want to listen for.

90
00:06:56,700 --> 00:06:58,530
In this case it's a click.

91
00:06:59,010 --> 00:07:01,830
The second argument is a function that we want to run.

92
00:07:01,830 --> 00:07:08,100
In response to that, let's provide an arrow function so that the this keyword is not changed.

93
00:07:09,520 --> 00:07:16,410
OK, now, because this is an a or link element, you'll notice that when I click it, it adds a hash

94
00:07:16,410 --> 00:07:17,690
tag to the euro.

95
00:07:18,180 --> 00:07:21,810
I set this up to be an element instead of a button or spane.

96
00:07:22,020 --> 00:07:27,570
This way, if you wanted to, you could set up a fallback search page that doesn't use browser side

97
00:07:27,570 --> 00:07:28,440
JavaScript.

98
00:07:28,770 --> 00:07:29,010
Right.

99
00:07:29,010 --> 00:07:35,370
Instead of having this point towards hash tag, you could have this point towards slash search or slash

100
00:07:35,370 --> 00:07:36,630
traditional search.

101
00:07:37,230 --> 00:07:41,910
Setting up a traditional search might be a nice extra credit assignment, but for now, we're just going

102
00:07:41,910 --> 00:07:44,010
to focus on the JavaScript solution.

103
00:07:44,700 --> 00:07:50,370
I bring this up because I would want to prevent the default behavior of clicking on a link.

104
00:07:50,580 --> 00:07:50,790
Right.

105
00:07:50,820 --> 00:07:53,760
I don't want to add the hash tag to the user's you.

106
00:07:53,760 --> 00:07:54,270
Órale.

107
00:07:54,840 --> 00:07:59,970
So back in your code, within our parentheses for this function, let's pass it a parameter.

108
00:08:00,480 --> 00:08:06,720
Let's say E and then in the body of our function, we can just say e dot prevent default.

109
00:08:07,150 --> 00:08:11,460
OK, then what do we actually want to do when someone clicks on that icon?

110
00:08:11,850 --> 00:08:16,370
We'd want to open up our full screen search interface or search overlay.

111
00:08:16,830 --> 00:08:21,420
So in about 30 seconds from now, we can create a method named open overlay.

112
00:08:22,170 --> 00:08:27,140
So we can just call that here, this dot open overlay.

113
00:08:27,840 --> 00:08:30,750
OK, now let's go create a method with that matching name.

114
00:08:30,750 --> 00:08:38,550
So down here under Section three with this comment, we can just say open overlay parentheses, curly

115
00:08:38,550 --> 00:08:39,270
brackets.

116
00:08:39,960 --> 00:08:47,340
And now just as a quick test, let's show an alert message that says open overlay method just ran.

117
00:08:47,910 --> 00:08:53,520
OK, and then finally, before we saved this file, we just have one last step up at the very top in

118
00:08:53,520 --> 00:08:57,780
our constructor when a new object is created using this class.

119
00:08:57,780 --> 00:09:03,390
Let's not forget as our final action in the constructor to call the events method.

120
00:09:03,690 --> 00:09:09,840
So this DOT events this way we can stay organized and keep all of the events we're listening for in

121
00:09:09,840 --> 00:09:12,720
one area without cluttering up our constructor.

122
00:09:12,960 --> 00:09:17,880
But they will indeed begin listening or running as soon as the object is created.

123
00:09:18,480 --> 00:09:21,210
Let's go ahead and save this and test it out.

124
00:09:21,210 --> 00:09:26,850
So back in the browser, if I refresh, you can see the annoying alert on page load is gone.

125
00:09:27,090 --> 00:09:33,750
But now if I click on the search icon, perfect open overlay method just ran.

126
00:09:34,260 --> 00:09:39,600
Now that we're successfully responding to that click event, we don't actually want to show an alert.

127
00:09:39,870 --> 00:09:45,120
Instead, we want to show a full screen search interface that looks something like this.

128
00:09:45,990 --> 00:09:47,910
So there wouldn't be any results at first.

129
00:09:47,910 --> 00:09:53,190
Your cursor would just automatically be placed into the search field and then you can type what you're

130
00:09:53,190 --> 00:09:53,910
looking for.

131
00:09:54,450 --> 00:10:00,150
Then a little spinning progress load or icon could appear here while the browser sends off a request

132
00:10:00,150 --> 00:10:00,900
to the server.

133
00:10:01,050 --> 00:10:07,150
The server talks to the database and then responds with raw JSON data for the appropriate results.

134
00:10:07,440 --> 00:10:13,020
Then our front end passes that JSON and outputs HTML that will look like this.

135
00:10:13,740 --> 00:10:16,320
But let's not get ahead of ourselves for now.

136
00:10:16,320 --> 00:10:19,760
Let's not worry about actually sending off a request to the server.

137
00:10:20,100 --> 00:10:25,940
Let's just worry about showing this interface when someone clicks on the search icon.

138
00:10:26,460 --> 00:10:30,990
So we're going to need the HTML to create this full screen search overlay.

139
00:10:31,290 --> 00:10:38,280
And again, this is not a course about HTML, so let's just copy and paste it from the same repository

140
00:10:38,280 --> 00:10:39,440
that we've been working with.

141
00:10:39,930 --> 00:10:47,100
So from the GitHub Dotcoms, Learn Web code, slash JavaScript, Rebo, dig into the complex app folder

142
00:10:47,340 --> 00:10:49,950
and then the HTML templates folder.

143
00:10:50,400 --> 00:10:56,850
In this case, the template we're interested in is search dash visible dot html.

144
00:10:57,480 --> 00:11:01,000
Go ahead and click that and then click on raw.

145
00:11:02,430 --> 00:11:04,710
We do not need to copy this entire template.

146
00:11:04,950 --> 00:11:11,940
If you scroll down even below this area where we see footer begins, we see a new comment that says

147
00:11:12,210 --> 00:11:14,360
search feature begins.

148
00:11:14,880 --> 00:11:21,540
So begin selecting right below that HTML comment and then if you scroll down, you'll see search feature

149
00:11:21,540 --> 00:11:24,710
end so we can stop copying right below that.

150
00:11:25,230 --> 00:11:29,760
Go ahead and copy that into your clipboard and then back in our JavaScript file.

151
00:11:30,480 --> 00:11:36,810
Let's do this down at the bottom below our open overlay method, but still within the overall closing

152
00:11:36,810 --> 00:11:38,400
curly bracket of our class.

153
00:11:38,670 --> 00:11:39,930
Let's add a new method.

154
00:11:40,350 --> 00:11:42,180
We could name it anything, but let's name it.

155
00:11:42,570 --> 00:11:47,580
Inject HTML parentheses, curly brackets.

156
00:11:48,510 --> 00:11:54,750
OK, now in this method, let's just insert a bit of HTML at the end of the body element.

157
00:11:55,140 --> 00:12:03,000
So document body dot insert adjacent HTML.

158
00:12:03,990 --> 00:12:05,370
We give this to arguments.

159
00:12:05,370 --> 00:12:14,010
So A comma B the first is where in that element you want to add the new code let's say before and so

160
00:12:14,040 --> 00:12:15,990
right before the closing or ending tag.

161
00:12:16,380 --> 00:12:20,640
And then for the B placeholder argument, this is just the code that you want.

162
00:12:21,060 --> 00:12:26,910
So I would include two back ticks and then in between those we are free to paste in our clipboard.

163
00:12:27,340 --> 00:12:34,650
OK, now before we save this file, let's be sure to scroll up to the very top and within our constructor,

164
00:12:34,770 --> 00:12:38,610
let's make sure the very first thing we do is call that function.

165
00:12:38,880 --> 00:12:45,870
So this dot inject HTML, let's give this a save and test it out.

166
00:12:45,990 --> 00:12:54,110
So back in the browser, if I refresh the app, the good news is that we do see the search interface.

167
00:12:54,390 --> 00:12:59,070
The bad news is that we would not want to see this until the user clicks on the search icon.

168
00:12:59,520 --> 00:13:06,870
So let's do this back within that inject HTML method towards the very beginning of the code that we

169
00:13:06,870 --> 00:13:07,550
pasted in.

170
00:13:07,560 --> 00:13:14,280
You'll see a div with the class of search overlay, but it also has a secondary class of search overlaid,

171
00:13:14,280 --> 00:13:15,840
dash dash visible.

172
00:13:16,350 --> 00:13:18,660
Let's delete this class.

173
00:13:19,080 --> 00:13:21,730
So then it just has the one class of search overlay.

174
00:13:22,260 --> 00:13:27,810
Now if we save and refresh, the overlay is not visible.

175
00:13:28,080 --> 00:13:34,170
Now we can just set things up so that our open overlay method add that class back on to that div.

176
00:13:34,830 --> 00:13:41,040
So let's do this up at the top of our search, not just file within our constructor.

177
00:13:41,040 --> 00:13:42,480
Let's add a new property.

178
00:13:42,510 --> 00:13:48,030
Let's say this dot overlay and then let's select that div.

179
00:13:48,030 --> 00:13:55,700
So document dot query selector and it had a class of search dash overlay.

180
00:13:56,760 --> 00:14:00,420
OK, now we can leverage this within our open overlay method.

181
00:14:01,800 --> 00:14:11,340
So within open overlay, get rid of the alert line and instead let's say this dot overlay dot class

182
00:14:11,340 --> 00:14:21,600
list dot add and let's just give it back that class of search dash overlay dash dash visible.

183
00:14:22,440 --> 00:14:28,890
Let's save that data for a test drive, refresh and click on the search icon.

184
00:14:30,030 --> 00:14:30,750
Perfect.

185
00:14:31,080 --> 00:14:36,450
Now let's set things up so that if they click on this X, we close or hide the overlay.

186
00:14:37,020 --> 00:14:39,990
It would be as simple as just removing that visible class.

187
00:14:40,560 --> 00:14:46,470
So I'll let you know that this X element here has a class of close live search.

188
00:14:47,130 --> 00:14:49,890
So let's do this back up in our constructor.

189
00:14:50,370 --> 00:14:53,760
Let's create a new property that selects that closing icons.

190
00:14:53,850 --> 00:15:00,540
This dot close icon set that to equal document dot.

191
00:15:00,960 --> 00:15:08,160
Query selector, and it has a class of close live search.

192
00:15:08,910 --> 00:15:15,810
OK, now within our events area, let's create a new event that listens for that close icon being clicked

193
00:15:15,810 --> 00:15:16,070
on.

194
00:15:16,680 --> 00:15:25,710
So maybe right above this event, we can add on a new event and say this dot close icon, dot add event

195
00:15:25,710 --> 00:15:26,490
listener.

196
00:15:27,300 --> 00:15:32,220
The event we're listening for is a click and the function that we want to run in response.

197
00:15:32,700 --> 00:15:34,550
Well, let's give it an arrow function.

198
00:15:34,560 --> 00:15:36,870
So the this keyword is not changed.

199
00:15:37,290 --> 00:15:41,790
And because this fits on a single line and we only have one action, we want to run, we don't even

200
00:15:41,790 --> 00:15:43,880
need the curly brackets for the arrow function.

201
00:15:44,250 --> 00:15:47,400
We can just call a method that will create in 10 seconds from now.

202
00:15:47,790 --> 00:15:56,730
So this dot close overlay parentheses to actually call that, OK, now within our method area, we can

203
00:15:56,730 --> 00:16:00,710
just copy and paste open overlay to avoid a bit of typing.

204
00:16:00,930 --> 00:16:03,120
So I would just duplicate that right below it.

205
00:16:04,200 --> 00:16:04,860
Pasted in.

206
00:16:04,860 --> 00:16:13,080
Let's change its name to close overlay and then all we would need to change is removing instead of adding

207
00:16:13,080 --> 00:16:13,860
a class.

208
00:16:14,700 --> 00:16:14,920
Right.

209
00:16:14,970 --> 00:16:16,950
Remove the class that makes it visible.

210
00:16:18,150 --> 00:16:19,890
Let's give this a save and test it out.

211
00:16:20,790 --> 00:16:27,090
So if I refresh so I can click the search icon to view it, don't worry, we will get rid of this tooltip

212
00:16:27,090 --> 00:16:28,500
bug in the next lesson.

213
00:16:29,010 --> 00:16:31,680
And then if I click the X, it hides it.

214
00:16:32,190 --> 00:16:34,590
That's going to bring this lesson to a close.

215
00:16:34,920 --> 00:16:41,030
In our next lesson, we'll begin working on the behavior for when you begin typing into this field.

216
00:16:42,510 --> 00:16:48,810
This should be a lot of fun to set up because this is where our application really starts to feel interactive

217
00:16:48,810 --> 00:16:49,800
and responsive.

218
00:16:50,040 --> 00:16:54,360
So let's keep things rolling and I will see you in the next lesson.
