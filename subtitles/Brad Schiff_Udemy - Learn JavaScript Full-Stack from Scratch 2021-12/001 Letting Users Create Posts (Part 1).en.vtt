WEBVTT
1
00:00:01.750 --> 00:00:02.710
Hello, everyone.

2
00:00:03.040 --> 00:00:08.830
In this lesson, we are going to begin working on letting users create posts.

3
00:00:09.250 --> 00:00:15.700
So up until this point, almost everything we've worked on within this new complex app has been related

4
00:00:15.700 --> 00:00:17.050
to a user.

5
00:00:17.440 --> 00:00:17.740
Right.

6
00:00:17.740 --> 00:00:21.960
And that's why we've had our user controller and our user model.

7
00:00:22.420 --> 00:00:30.010
Well, in this lesson, we're going to begin work on letting logged in users create a post or article,

8
00:00:30.430 --> 00:00:35.530
meaning we will have a post controller and a post model.

9
00:00:36.100 --> 00:00:39.290
It should be fun to change gears and work on a new feature.

10
00:00:39.700 --> 00:00:43.530
I think this is when our application is really going to start feeling alive.

11
00:00:43.750 --> 00:00:44.260
All right.

12
00:00:44.260 --> 00:00:46.740
Now, without further ado, let's get started.

13
00:00:47.230 --> 00:00:53.740
First, let's ask ourselves, what do we want to happen if a logged in user clicks on this green create

14
00:00:53.740 --> 00:00:54.580
post button?

15
00:00:55.000 --> 00:01:01.360
Well, we would just want to take them to a new neutral that renders a new HTML template to be more

16
00:01:01.360 --> 00:01:03.390
specific, this template.

17
00:01:03.730 --> 00:01:06.520
So there's a field for a post or article title.

18
00:01:07.210 --> 00:01:14.630
Sky is blue and there's a place for body content and then obviously a blue save or submit button.

19
00:01:14.980 --> 00:01:20.470
Now remember, this is not a course about HTML, so we're not going to type out this template.

20
00:01:20.660 --> 00:01:22.750
Instead, we're just going to copy and paste.

21
00:01:23.330 --> 00:01:27.310
So like before you can always jump over to this GitHub repository.

22
00:01:27.790 --> 00:01:34.030
You should be able to find a link to this within the resources for this lesson and within the same complex

23
00:01:34.030 --> 00:01:36.580
app HTML templates folder.

24
00:01:36.970 --> 00:01:43.380
Right now we are interested in the template named Create Dash Post Dot HTML.

25
00:01:43.900 --> 00:01:49.900
So either open that up on your hard drive or just click on it here from the GitHub web page and then

26
00:01:49.900 --> 00:01:51.850
you can click on this raw button.

27
00:01:53.530 --> 00:02:01.110
Cool, and then just select all of this raw HTML, so control or command a copy it into your clipboard.

28
00:02:01.480 --> 00:02:09.830
And now let's go create a new SJS file in our views folder in our text editor within our Views folder.

29
00:02:10.030 --> 00:02:12.530
We just want to create a new template with that code.

30
00:02:12.550 --> 00:02:13.000
So I'm going to.

31
00:02:13.000 --> 00:02:13.240
Right.

32
00:02:13.240 --> 00:02:15.740
Click on Views, click new file.

33
00:02:16.630 --> 00:02:22.480
Why don't we name this template, create dash post dot SJS.

34
00:02:23.140 --> 00:02:26.260
OK, and then in that new file, just paste in your clipboard.

35
00:02:26.870 --> 00:02:28.180
Go ahead and save that.

36
00:02:28.460 --> 00:02:34.900
OK, now that we've created that template, our next step is to adjust this green create post button

37
00:02:35.260 --> 00:02:38.290
to point towards a specific route or you Ã³rale.

38
00:02:38.560 --> 00:02:44.750
If we user clicks on this, why don't we send them to a Eurail of slash create dash post?

39
00:02:45.160 --> 00:02:46.830
Let me show you how we can set that up.

40
00:02:46.840 --> 00:02:55.090
So back in our editor within our Views folder, let's open up home dash dashboard, SJS and around line

41
00:02:55.090 --> 00:02:58.900
number twenty one, you'll see an opening element.

42
00:02:59.140 --> 00:03:02.230
And we're interested in its HSF attribute.

43
00:03:03.380 --> 00:03:03.670
Right.

44
00:03:03.670 --> 00:03:05.910
So we can see this is that create post link.

45
00:03:06.400 --> 00:03:13.990
So for atrip instead of the placeholder hash tag, let's get rid of that and just say slash create dash

46
00:03:13.990 --> 00:03:14.730
post.

47
00:03:15.250 --> 00:03:17.010
Let's go ahead and save this template.

48
00:03:17.380 --> 00:03:24.460
OK, let's just go set up a route for this matching you URL within our router file and our project folder.

49
00:03:24.850 --> 00:03:31.960
Jump into rutabagas and below this router, top post slash log outline.

50
00:03:32.320 --> 00:03:39.310
Let's add a comment to ourselves to stay organized and say post related routes.

51
00:03:39.790 --> 00:03:41.950
So these are all of our user related routes.

52
00:03:41.950 --> 00:03:43.690
You could add a comment here if you wanted to.

53
00:03:43.690 --> 00:03:51.070
User related routes, OK, and under post related routes, let's say router not get for the route.

54
00:03:51.070 --> 00:03:57.460
Let's say slash, create dash post for the second arguments of comma.

55
00:03:57.760 --> 00:04:01.390
We'd want to look inside our post controller.

56
00:04:01.990 --> 00:04:07.480
We haven't actually created a post controller yet, but you can imagine that in just a minute or two.

57
00:04:07.480 --> 00:04:08.020
We will.

58
00:04:08.470 --> 00:04:12.010
And when we do, you can imagine that maybe we'll create a function.

59
00:04:12.010 --> 00:04:19.060
So look inside that and let's imagine we're going to call the function view create screen.

60
00:04:19.540 --> 00:04:25.360
Obviously, at this moment, this function doesn't exist yet, but we can set that up very shortly before

61
00:04:25.360 --> 00:04:26.770
we save our router file.

62
00:04:26.770 --> 00:04:31.560
Let's be sure up at the top to require in our post controller file.

63
00:04:31.840 --> 00:04:40.480
So right below this line where we required in our user controller, let's say const post controller

64
00:04:40.810 --> 00:04:44.860
and just set that to equal and then require in a file path.

65
00:04:44.860 --> 00:04:52.390
So dot slash and then look inside the controllers folder and the file will be named post controller.

66
00:04:53.080 --> 00:04:53.650
All right.

67
00:04:53.650 --> 00:04:58.960
Now let's go ahead and save this file and then jump in to that post controller file.

68
00:04:59.470 --> 00:05:05.740
So within our controllers folder, you might remember that I already had us create three different controller

69
00:05:05.740 --> 00:05:06.280
files.

70
00:05:06.460 --> 00:05:13.180
So far we've only actually worked on user controller, but you likely have these empty follow and post

71
00:05:13.180 --> 00:05:14.920
controller files, just like I do.

72
00:05:15.580 --> 00:05:20.380
If you don't just go ahead and create a post controller JS file right now.

73
00:05:20.770 --> 00:05:25.000
So I'm going to jump in to post controller within post controller.

74
00:05:25.000 --> 00:05:28.540
Let's just start exporting functions that the router can call.

75
00:05:28.990 --> 00:05:33.190
So we just say exports dot and then we can make up a function name.

76
00:05:33.850 --> 00:05:37.240
Let's choose that exact matching name that we made up a minute ago.

77
00:05:37.240 --> 00:05:46.450
Remember, it was view create screen and let's just set that to equal a function within these function

78
00:05:46.450 --> 00:05:47.170
parentheses.

79
00:05:47.170 --> 00:05:53.860
Let's be sure to include request and response and then within the body of the function, let's just

80
00:05:53.860 --> 00:06:00.970
say response stop render in the name of the template is create Dasch Post.

81
00:06:01.540 --> 00:06:04.420
Let's go ahead and save this and test it all out.

82
00:06:04.990 --> 00:06:06.100
Back in the browser.

83
00:06:06.100 --> 00:06:11.950
Be sure to refresh so that the Green Create Post Button has its updated RF value.

84
00:06:12.460 --> 00:06:18.430
So if I refresh and then click on Create Post, awesome.

85
00:06:18.430 --> 00:06:20.110
There is that new template.

86
00:06:20.740 --> 00:06:27.130
Now before we move on any further, we'd want to make sure that you can only visit this route if you're

87
00:06:27.130 --> 00:06:28.060
logged in.

88
00:06:28.420 --> 00:06:28.690
Right.

89
00:06:28.690 --> 00:06:32.620
You should need to have a user account in order to create posts.

90
00:06:32.890 --> 00:06:39.220
We don't want just random guest visitors creating posts, only legitimate user accounts.

91
00:06:39.550 --> 00:06:46.330
So if you're not logged in and you visit this Yooralla route, you should be redirected to the home

92
00:06:46.330 --> 00:06:53.050
page with a red flag error message that says you must be logged in to perform that at.

93
00:06:53.820 --> 00:07:01.110
Now, we could add that logic into our controller function here, but I think you can imagine that that's

94
00:07:01.110 --> 00:07:04.530
going to be a pretty common thing that we want to do, right.

95
00:07:04.530 --> 00:07:08.240
Restrict a route so that only logged in users can access it.

96
00:07:08.580 --> 00:07:15.870
So instead of duplicating the logic that enforces that in maybe 20 or 30 different controller functions,

97
00:07:16.260 --> 00:07:23.820
why don't we instead just create one single reusable function within our user controller and we can

98
00:07:23.820 --> 00:07:31.440
name it must be logged in actually before we even create said function, let me first show you how we're

99
00:07:31.440 --> 00:07:32.520
going to leverage it.

100
00:07:33.210 --> 00:07:39.360
So right now, I want you to jump back into our router JS file and for any route that we would want

101
00:07:39.360 --> 00:07:40.140
to protect.

102
00:07:40.140 --> 00:07:42.650
So the only logged in users can access it.

103
00:07:43.020 --> 00:07:45.720
Let's take this create post route for an example.

104
00:07:46.320 --> 00:07:52.920
In between the first and second arguments, we can just add another argument so we could just say user

105
00:07:52.920 --> 00:08:00.510
controller and then imagine we're going to create a function named must be logged in and be sure to

106
00:08:00.510 --> 00:08:01.430
include a comma.

107
00:08:01.830 --> 00:08:08.970
So the idea is that Express lets us include multiple functions that we want to run in response for a

108
00:08:08.970 --> 00:08:09.780
given route.

109
00:08:10.260 --> 00:08:15.930
So now within this function, we can just check to see if there is a user object within the current

110
00:08:15.930 --> 00:08:16.620
session.

111
00:08:16.920 --> 00:08:21.540
If there's not, we can just redirect them to the home page with an error message.

112
00:08:21.870 --> 00:08:28.230
But if there is a user object on the session, we can just say next where we tell Express to run the

113
00:08:28.230 --> 00:08:30.310
next function for that route.

114
00:08:30.600 --> 00:08:36.510
So then Express actually would call this, but effectively only logged in users would ever actually

115
00:08:36.510 --> 00:08:37.080
get there.

116
00:08:37.410 --> 00:08:39.390
Let me show you how we can set this up.

117
00:08:39.540 --> 00:08:43.080
So we just made up this name must be logged in.

118
00:08:43.380 --> 00:08:47.770
So let's go create a function with that matching name within our user controller.

119
00:08:48.270 --> 00:08:54.630
So in the controllers folder, jump into user controller Dot J.S. and right up at the top here, maybe

120
00:08:54.630 --> 00:09:02.880
right before the log in function, let's create a new line and just say exports dot must be logged in

121
00:09:03.480 --> 00:09:08.550
equals a function within our parentheses for this function.

122
00:09:08.560 --> 00:09:16.080
Let's not only include request and response, but also a third parameter and let's name it next.

123
00:09:16.760 --> 00:09:20.490
OK, now within the body of this function, let's begin with an if statement.

124
00:09:20.490 --> 00:09:27.180
Let's say, if so, parentheses curly brackets right after the closing curly brackets for the if.

125
00:09:27.180 --> 00:09:33.690
Let's also include an else block, OK, for our if condition within these parentheses, let's say if

126
00:09:34.320 --> 00:09:42.510
request session user write, because there's only ever going to be a user object within the session

127
00:09:42.510 --> 00:09:45.690
data if a user has successfully logged in.

128
00:09:46.360 --> 00:09:52.830
OK, if that's the case, then within the if block we would just want to call next write, tell, express

129
00:09:52.830 --> 00:09:57.870
to call the next function for this route now within the else block.

130
00:09:58.050 --> 00:10:00.660
This means that a visitor is not logged in.

131
00:10:01.410 --> 00:10:04.340
So let's just create a flash error message.

132
00:10:04.920 --> 00:10:09.120
So let's say request dot flash for the first argument.

133
00:10:09.120 --> 00:10:14.130
Let's say we want to add a message on to a collection or array named errors.

134
00:10:14.880 --> 00:10:17.340
For the second argument, we just include the message.

135
00:10:17.640 --> 00:10:24.540
So let's say you must be logged in to perform that action.

136
00:10:25.160 --> 00:10:32.280
OK, right below this request line and still within the else block, we would now just want to redirect

137
00:10:32.280 --> 00:10:33.710
to the home page you are out.

138
00:10:34.200 --> 00:10:40.980
However, before we do that, let's first manually save our session data so we can be sure that it actually

139
00:10:40.980 --> 00:10:43.290
completes before we redirect.

140
00:10:43.770 --> 00:10:49.410
So request session, save within those save parentheses include a function.

141
00:10:51.210 --> 00:10:54.600
And within this function is where we would actually redirect.

142
00:10:54.600 --> 00:10:59.520
So response dot redirect to the base or home page you are l.

143
00:11:00.030 --> 00:11:02.610
Let's go ahead and save this and test it out.

144
00:11:03.300 --> 00:11:03.630
Oops.

145
00:11:03.630 --> 00:11:06.030
I actually forgot to save my router, not just fine.

146
00:11:06.030 --> 00:11:07.410
I'll be sure to save that as well.

147
00:11:07.920 --> 00:11:15.180
OK, and then back in the browser in this window where I am logged in, if I refresh I can still visit

148
00:11:15.180 --> 00:11:16.800
the create dash post.

149
00:11:16.800 --> 00:11:25.290
You are however in an incognito window or in this case Mozilla Firefox where I am not logged in if I

150
00:11:25.290 --> 00:11:29.340
try to visit, slash, create dash post.

151
00:11:30.530 --> 00:11:36.100
You see, it kicks me right back to the home page, you must be logged in to perform that action.

152
00:11:36.680 --> 00:11:37.520
Perfect.

153
00:11:37.950 --> 00:11:43.460
So that's a reuseable function that we can use to protect a lot of our future routes as well.

154
00:11:43.880 --> 00:11:49.670
Now, let's move on to another task you might have noticed in the window where I'm logged in that in

155
00:11:49.670 --> 00:11:56.630
the top right header menu, when we are visiting the create post route, this is using fake or hard

156
00:11:56.630 --> 00:12:02.900
coded data, meaning it's not using that dynamic avatar image source that we set up, nor would the

157
00:12:02.900 --> 00:12:05.220
logout form actually point anywhere.

158
00:12:05.780 --> 00:12:12.190
This is because when we made those header adjustments, we did so within our home dash dashboard template.

159
00:12:12.740 --> 00:12:14.820
But this is an entirely different template.

160
00:12:14.840 --> 00:12:17.500
This is Create Postgrads.

161
00:12:17.900 --> 00:12:24.680
Now, before we update or fix our Create Post SJS template, let's first make sure that we pass into

162
00:12:24.680 --> 00:12:29.170
it the relevant session data to power the unique Granovetter.

163
00:12:29.690 --> 00:12:32.530
Let's jump in to our post controller file.

164
00:12:32.900 --> 00:12:38.390
And when we render that create post template, let's just give this a second argument.

165
00:12:39.260 --> 00:12:40.790
Let's send it to an object.

166
00:12:40.790 --> 00:12:43.540
And this is the data that gets passed into the template.

167
00:12:44.180 --> 00:12:50.960
Let's give it a property named username and let's pull that from request session user dot username.

168
00:12:51.440 --> 00:13:00.800
And let's also give it a property named Avatar and set that to request session dot user dot avatar.

169
00:13:01.250 --> 00:13:03.310
OK, let's go ahead and save that.

170
00:13:04.070 --> 00:13:08.730
Then let's jump in to our new create post mortgagers template.

171
00:13:09.140 --> 00:13:13.340
So within our Views folder, jump back in to create dash post.

172
00:13:13.970 --> 00:13:20.630
Now we could dig through this template and make the same updates to its header that we've already made

173
00:13:20.630 --> 00:13:23.920
to home dash dashboard SJS.

174
00:13:24.260 --> 00:13:29.090
But that line of thinking would result in a lot of duplication very quickly.

175
00:13:29.330 --> 00:13:36.440
What I mean is just about every template in our app is going to need this same uniform header.

176
00:13:36.950 --> 00:13:44.180
So instead of duplicating it and spelling it out in every file, let's just create one single reusable

177
00:13:44.180 --> 00:13:47.210
template file that's just for the header.

178
00:13:47.390 --> 00:13:50.330
And then all of the other templates can pull in that file.

179
00:13:50.810 --> 00:13:52.550
Let me show you how we can set this up.

180
00:13:52.550 --> 00:13:59.720
So within our text editor, within our views folder, let's actually create a sub folder inside the

181
00:13:59.720 --> 00:14:00.550
views folder.

182
00:14:00.860 --> 00:14:01.550
I'm going to right.

183
00:14:01.550 --> 00:14:03.860
Click on the views folder and choose a new folder.

184
00:14:04.220 --> 00:14:10.910
And let's name this new subfolder includes technically we can name it anything, but this is a common

185
00:14:10.910 --> 00:14:11.750
name to use.

186
00:14:12.190 --> 00:14:12.590
All right.

187
00:14:12.590 --> 00:14:15.800
Now, inside the includes folder, let's create a new file.

188
00:14:17.090 --> 00:14:20.600
And let's name it header SJS.

189
00:14:21.710 --> 00:14:25.040
Now the question becomes, what would we want to live in this file?

190
00:14:25.520 --> 00:14:30.970
Well, we've already started working on the header back on our home page template.

191
00:14:31.490 --> 00:14:31.750
Right.

192
00:14:31.760 --> 00:14:32.950
This pulls in the gravitas.

193
00:14:32.960 --> 00:14:34.880
It's got a working sign out form.

194
00:14:35.060 --> 00:14:42.340
So let's just jump into this home dashboard template and copy that header portion into our clipboard.

195
00:14:42.860 --> 00:14:47.030
So in our views folder, let's jump into home dash dashboard.

196
00:14:47.030 --> 00:14:55.430
Ejaz, begin selecting from line number one all the way down until about line number twenty seven or

197
00:14:55.430 --> 00:14:58.100
wherever you see this closing header tag.

198
00:14:58.370 --> 00:15:05.270
So include that closing header tag and then let's cut that into our clipboard in its place.

199
00:15:05.270 --> 00:15:10.160
We can just write a little note to ourselves and say include header file here.

200
00:15:10.580 --> 00:15:17.570
We will circle back to this in about ten seconds, but let's jump back into that empty new header file

201
00:15:17.570 --> 00:15:21.260
that lives in the includes folder and just paste in our clipboard.

202
00:15:22.040 --> 00:15:23.920
OK, go ahead and save that.

203
00:15:24.170 --> 00:15:29.030
And now back in home Dash Dashboard, let's get rid of this note to ourselves.

204
00:15:29.780 --> 00:15:32.960
Let's also delete this comment that says header ends here.

205
00:15:34.010 --> 00:15:40.910
And now all we need to do to pull in that reusable header include file is say less than percentage,

206
00:15:40.910 --> 00:15:44.620
and then to close this tag, it's percentage greater than in the middle.

207
00:15:44.630 --> 00:15:52.070
Let's just say include this is an exact function we can leverage and then we just give it a path towards

208
00:15:52.070 --> 00:15:52.730
that file.

209
00:15:52.730 --> 00:15:57.380
So look within the includes folder and that files name is header.

210
00:15:58.070 --> 00:16:03.530
And because this isn't just JavaScript that we want to execute, but instead we want to actually output

211
00:16:03.530 --> 00:16:10.700
or print this, we could include an equal sign here, but the equal sign is going to escape this value.

212
00:16:11.030 --> 00:16:15.380
And since this is pulling from a template that we trust, obviously we created it.

213
00:16:15.650 --> 00:16:17.680
We don't need to escape it once again.

214
00:16:18.020 --> 00:16:23.420
So instead of an equal sign here, let's just include a dash or subtraction sign.

215
00:16:23.820 --> 00:16:28.300
OK, now let's also go do the same thing in our new create post template.

216
00:16:28.640 --> 00:16:33.230
Let's delete the existing header and then just use this include command.

217
00:16:33.530 --> 00:16:36.020
So to save some typing, let's copy this.

218
00:16:36.020 --> 00:16:43.790
Include Command in your clipboard, copy and then let's jump into our newly created create dash post

219
00:16:44.150 --> 00:16:46.910
Ejaz and let's start deleting.

220
00:16:46.910 --> 00:16:53.630
So begin selecting from line number one and delete all the way down until line number twenty eight where

221
00:16:53.630 --> 00:16:58.550
it says header ends here, delete that and then in its place just paste in your clipboard.

222
00:16:59.060 --> 00:16:59.390
Right.

223
00:16:59.390 --> 00:17:02.030
We just want to include in the header file.

224
00:17:02.600 --> 00:17:04.190
Let's go ahead and save that.

225
00:17:04.580 --> 00:17:04.910
Oops.

226
00:17:04.910 --> 00:17:07.850
Looks like I forgot to save my home dash dashboard file.

227
00:17:07.850 --> 00:17:10.180
Save that too and let's test it out.

228
00:17:10.670 --> 00:17:15.170
So if I refresh the homepage, it's still pulling in my real avatar.

229
00:17:15.530 --> 00:17:18.200
And now if I visit the create post screen.

230
00:17:18.710 --> 00:17:21.740
Awesome, it's using that uniform new header file.

231
00:17:22.220 --> 00:17:27.450
Now another area in our code where we can remove duplication is when we pass.
