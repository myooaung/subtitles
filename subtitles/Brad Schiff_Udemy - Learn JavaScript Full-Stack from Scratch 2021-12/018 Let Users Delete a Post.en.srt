1
00:00:01,790 --> 00:00:02,750
Hello, everyone.

2
00:00:03,080 --> 00:00:08,400
In this lesson, we are going to let a user delete one of their existing posts.

3
00:00:08,750 --> 00:00:10,570
Let's dive right into the action.

4
00:00:11,030 --> 00:00:15,170
So if I visit my profile and then visit one of my posts.

5
00:00:16,260 --> 00:00:24,130
We've already set up the functionality for the blue edit icon, now let's work on the red delete icon.

6
00:00:24,570 --> 00:00:30,050
Let's begin by finding this icon in the Ejaz template that powers this screen.

7
00:00:30,990 --> 00:00:40,230
So in our text editor within your Views folder, jump into single dash post dash screen around line

8
00:00:40,230 --> 00:00:42,120
number 13, you'll see a button.

9
00:00:42,540 --> 00:00:48,280
It has a class of delete post button and this button lives within a form element.

10
00:00:48,870 --> 00:00:51,030
Currently this forms action.

11
00:00:51,030 --> 00:00:53,400
Attribute is a placeholder hashtag.

12
00:00:53,700 --> 00:01:01,560
Let's get rid of that hash tag and instead say slash post slash IDE.

13
00:01:01,560 --> 00:01:03,570
And we can make this dynamic in just a moment.

14
00:01:03,780 --> 00:01:05,880
But slash delete.

15
00:01:06,540 --> 00:01:10,740
OK, now let's circle back to I.D. We want that to be dynamic.

16
00:01:10,740 --> 00:01:19,920
So delete that and jump into SJS and we can just say post dot underscore ID cool.

17
00:01:20,100 --> 00:01:24,840
Let's go ahead and save this and now let's jump into our router and set up a root.

18
00:01:25,680 --> 00:01:28,320
So the root of our project folder routed out J.S..

19
00:01:29,690 --> 00:01:35,990
Down at the bottom, we already have this comment post related routes, you can actually just duplicate

20
00:01:35,990 --> 00:01:38,590
this bottom one for the edit post route.

21
00:01:38,990 --> 00:01:42,980
So I will just select that into my clipboard below that, paste it in.

22
00:01:43,400 --> 00:01:47,300
So make sure that this is post not get write a form.

23
00:01:47,300 --> 00:01:49,340
Submit is a post request.

24
00:01:49,610 --> 00:01:55,760
And let's just change the ending segment of the euro from edit to delete.

25
00:01:56,690 --> 00:02:01,280
OK, we would still indeed want to check to make sure the current visitor is logged in.

26
00:02:01,460 --> 00:02:02,780
They must be logged in.

27
00:02:03,080 --> 00:02:07,760
And then for the second function, let's still look within our post controller only.

28
00:02:07,760 --> 00:02:13,400
Let's imagine that we have a function named delete with this in place.

29
00:02:13,400 --> 00:02:14,720
Let's go ahead and save.

30
00:02:14,900 --> 00:02:19,630
And now let's jump into our post controller and create a function with this matching name.

31
00:02:20,150 --> 00:02:27,500
So within our controllers folder, let's dig into post controller Dot J.S. We can scroll down to the

32
00:02:27,500 --> 00:02:30,950
very bottom and just create a brand new function.

33
00:02:30,950 --> 00:02:35,780
Let's say exports dot delete equals a function.

34
00:02:36,500 --> 00:02:41,810
Let's be sure to give this parameters of request and response and let's look inside our model.

35
00:02:41,810 --> 00:02:46,160
So uppercase post and column method named delete.

36
00:02:47,120 --> 00:02:50,660
This doesn't exist yet, but in just a couple of minutes we can set it up.

37
00:02:51,050 --> 00:02:53,300
We can imagine that it will return a promise.

38
00:02:53,510 --> 00:02:59,990
So then at the end we can say dot then dot catch within the parentheses for both then and catch.

39
00:02:59,990 --> 00:03:01,490
Let's provide functions.

40
00:03:01,520 --> 00:03:05,240
I'll use an arrow function, do the same thing for catch.

41
00:03:07,490 --> 00:03:13,310
Now before we worry about what we would want to do if the promise resolves or rejects, let's first

42
00:03:13,310 --> 00:03:16,670
pay attention to what data we should be passing into this function.

43
00:03:17,330 --> 00:03:21,380
First, we would need to give it the ID of the post that we're trying to delete.

44
00:03:22,130 --> 00:03:26,480
So request param idee, comma.

45
00:03:26,660 --> 00:03:32,270
And the second argument should be the idea of the current user that is trying to perform this delete

46
00:03:32,270 --> 00:03:32,840
action.

47
00:03:33,410 --> 00:03:36,270
So request dot visitor.

48
00:03:36,320 --> 00:03:43,760
I said, OK, now if this promise is successful, if it resolves, then on this line let's just add

49
00:03:43,760 --> 00:03:51,140
a green success message that says Post successfully deleted and then we can redirect the user back to

50
00:03:51,140 --> 00:03:52,370
their profile screen.

51
00:03:52,910 --> 00:03:54,830
So request dot flash.

52
00:03:55,070 --> 00:03:58,160
Let's add on to a collection named Success.

53
00:03:58,700 --> 00:03:58,960
Let's go.

54
00:03:58,970 --> 00:04:03,170
The value of post successfully deleted.

55
00:04:03,710 --> 00:04:09,080
OK, then let's manually save our session data or request session save.

56
00:04:09,890 --> 00:04:14,060
Let's give this an arrow function and then we would want to redirect.

57
00:04:14,510 --> 00:04:18,980
So response dot redirect instead of quotes.

58
00:04:19,010 --> 00:04:27,080
Let's actually give this back tick's and let's say slash profile slash and then we would want the current

59
00:04:27,080 --> 00:04:28,160
users username.

60
00:04:28,670 --> 00:04:33,530
Now we know that they would never get to this point in the route unless they already made it past our

61
00:04:33,680 --> 00:04:35,630
must be logged in function.

62
00:04:36,140 --> 00:04:40,970
So we should be safe here to look for our user object with the property of username.

63
00:04:41,420 --> 00:04:46,790
So within the tactics of a template literal, we can say dollar sign curly brackets to do something

64
00:04:46,790 --> 00:04:54,110
dynamic and then let's say request session dot user dot user name.

65
00:04:54,950 --> 00:04:57,890
OK, but what if this promise rejects?

66
00:04:58,370 --> 00:05:04,340
What if it's not a valid post ID or that post doesn't exist or the person that's trying to perform this

67
00:05:04,490 --> 00:05:06,350
is not the owner of that post?

68
00:05:06,770 --> 00:05:14,030
Well, within this catch area, let's just add a flash message request dot flash, add on to a collection

69
00:05:14,030 --> 00:05:22,670
named Errors and let's say you do not have permission to perform that action.

70
00:05:23,810 --> 00:05:26,520
Then let's save our session data request session.

71
00:05:26,710 --> 00:05:29,570
Save within save, provide a function.

72
00:05:31,700 --> 00:05:38,780
And just redirect them back to the home page, so response, redirect the base, you URL actually since

73
00:05:38,780 --> 00:05:41,040
we used an arrow function all on one line.

74
00:05:41,240 --> 00:05:47,150
We do not need the curly brackets around the body of our function so we can also get rid of them on

75
00:05:47,150 --> 00:05:47,720
this line.

76
00:05:51,510 --> 00:05:51,910
Cool.

77
00:05:52,320 --> 00:05:58,590
Let's go ahead and save this, and now we better go into our post model and create a function named

78
00:05:58,590 --> 00:05:59,190
delete.

79
00:05:59,670 --> 00:06:02,490
So in our models folder, jump into post.

80
00:06:03,960 --> 00:06:10,020
Let's scroll down to the very bottom of this post model file right before the closing module DOT exports

81
00:06:10,020 --> 00:06:18,370
line, let's say uppercase post, dot delete, set this to a function within the body of this function.

82
00:06:18,390 --> 00:06:25,380
Remember, we want it to return a promise, so return new promise within the promise parentheses.

83
00:06:25,380 --> 00:06:30,180
Let's provide it an asynchronous arrow functions async parentheses.

84
00:06:30,180 --> 00:06:35,880
Let's give it parameters of resolve and reject arrow symbol curly brackets.

85
00:06:36,810 --> 00:06:42,090
OK, let's give ourselves a try block and right after that a catch block.

86
00:06:43,140 --> 00:06:51,500
Within the tribe block, let's say let post equal and then we can just leverage our find single by IDE

87
00:06:51,510 --> 00:07:00,720
function post dot find single by ID within these parentheses before we give this function what it needs.

88
00:07:00,900 --> 00:07:04,840
Let's first address the parentheses of our outermost function for delete.

89
00:07:05,400 --> 00:07:10,680
Remember when we call this function from within our controller, we're passing into it the requested

90
00:07:10,680 --> 00:07:11,640
post ID.

91
00:07:11,760 --> 00:07:13,250
So let's add a parameter here.

92
00:07:13,710 --> 00:07:21,230
We could make up any name we want, but let's call it post idy to delete comma.

93
00:07:21,360 --> 00:07:25,650
Remember, we're also passing into this function the current visitor ID.

94
00:07:26,160 --> 00:07:30,600
Right, the person that's trying to perform this delete action for this parameter name.

95
00:07:30,600 --> 00:07:33,680
I will say current user I.D..

96
00:07:34,320 --> 00:07:37,520
OK, so that data is now available within this function.

97
00:07:37,800 --> 00:07:46,920
So when we're calling our find single by ID, let's just give it that data post ID to delete and current

98
00:07:47,190 --> 00:07:48,420
user ID.

99
00:07:49,260 --> 00:07:53,340
OK, now remember this function is going to return a promise.

100
00:07:53,610 --> 00:08:00,930
So right before it we can just await then right below this line let's just write an if statement.

101
00:08:01,320 --> 00:08:07,740
So if parentheses curly brackets right after that including else block, remember that this reuseable

102
00:08:07,740 --> 00:08:14,870
function we created is automatically going to create a property on the post named is visiter owner.

103
00:08:15,330 --> 00:08:24,120
So within these if parentheses if post dot is visiter owner, if that's true, this is where we would

104
00:08:24,120 --> 00:08:29,250
actually want to find that document in the database and delete it else.

105
00:08:29,250 --> 00:08:32,670
Otherwise this is where we would want our promise to reject.

106
00:08:33,360 --> 00:08:37,500
Also, if this catch block ever runs, we would also want to reject.

107
00:08:38,280 --> 00:08:42,660
If this runs, that means the post ID is not valid or the post doesn't exist.

108
00:08:42,990 --> 00:08:49,010
If this LS block runs, that means someone is up to no good trying to delete a post they don't own.

109
00:08:49,470 --> 00:08:51,690
Either way, we want this promise to reject.

110
00:08:52,230 --> 00:08:57,140
OK, but within this if block, this is where we can actually delete that document.

111
00:08:57,510 --> 00:09:04,200
So let's start working with our object that represents the Mongo DB Collection Posts collection.

112
00:09:05,260 --> 00:09:11,680
Let's look inside that and call a method named delete one, but then these parentheses, we just give

113
00:09:11,680 --> 00:09:15,990
it an object and describe the document we're trying to find and delete.

114
00:09:16,870 --> 00:09:18,330
So it would have an underscore.

115
00:09:18,340 --> 00:09:20,620
I'd love to find it.

116
00:09:20,620 --> 00:09:28,420
Let's create a new instance of the Mongo DB Object I.D. Within those parentheses we can just pass in

117
00:09:28,750 --> 00:09:29,500
the post.

118
00:09:29,650 --> 00:09:32,050
Need to delete post.

119
00:09:32,350 --> 00:09:34,660
I need to delete.

120
00:09:36,000 --> 00:09:41,520
OK, this Mongo DB method is going to return a promise, so at the start of this line, let's just be

121
00:09:41,520 --> 00:09:46,720
sure to await that and then right below this line, our promise is ready to resolve.

122
00:09:47,040 --> 00:09:50,340
So just call resolve at this point.

123
00:09:50,340 --> 00:09:53,610
Let's go ahead and save this file and take it for a test drive.

124
00:09:54,210 --> 00:09:57,840
So back in the browser, be sure to refresh.

125
00:09:57,870 --> 00:10:00,910
So this delete form has the updated action value.

126
00:10:01,890 --> 00:10:02,410
OK.

127
00:10:02,460 --> 00:10:03,420
If I click delete.

128
00:10:04,350 --> 00:10:06,920
Well, not quite perfect, but almost there.

129
00:10:07,230 --> 00:10:09,330
So you'll notice that post is gone now.

130
00:10:09,330 --> 00:10:14,550
It was successfully deleted but we didn't see a green success flash message.

131
00:10:14,970 --> 00:10:20,950
I'm pretty sure this is just because we never included the flash code at the top of the profile template.

132
00:10:21,360 --> 00:10:22,720
Let's do that right now.

133
00:10:22,980 --> 00:10:29,350
So back in your views folder, let's jump into a template that we know we can copy and paste from.

134
00:10:29,730 --> 00:10:36,360
So if we jump in to edit post, for example, we just want to copy this flash command that pulls in

135
00:10:36,360 --> 00:10:39,300
that shareable includes for the flash code.

136
00:10:39,780 --> 00:10:47,640
So copy that into your clipboard and then let's jump into our profile template up at the top, right

137
00:10:47,640 --> 00:10:51,720
below this container div just dropdown and paste in your clipboard.

138
00:10:52,650 --> 00:10:55,230
OK, let's go ahead and save this.

139
00:10:55,750 --> 00:11:01,800
And now back in the browser, I can test things out by trying to delete this post that's named Sample

140
00:11:01,800 --> 00:11:02,490
Post No.

141
00:11:02,490 --> 00:11:02,820
One.

142
00:11:03,180 --> 00:11:04,200
So click on to that.

143
00:11:04,620 --> 00:11:05,830
Click the delete icon.

144
00:11:07,350 --> 00:11:08,190
Perfect.

145
00:11:09,030 --> 00:11:11,200
We no longer see it in my list of posts.

146
00:11:11,200 --> 00:11:13,920
It's been deleted and there's the success message.

147
00:11:14,520 --> 00:11:17,250
Let's test out the permission logic that we set up.

148
00:11:17,490 --> 00:11:23,190
So, for example, in this window, I'm logged in with the Brat account, but in this window I'm logged

149
00:11:23,190 --> 00:11:25,130
in with the Bark's a lot account.

150
00:11:25,620 --> 00:11:27,410
Let me show you how we can test this out.

151
00:11:27,420 --> 00:11:32,220
So in a secondary account, I can create a post dog post.

152
00:11:32,220 --> 00:11:35,480
No one content here.

153
00:11:36,180 --> 00:11:37,020
Submit that.

154
00:11:38,130 --> 00:11:39,780
OK, now try this out with me.

155
00:11:40,050 --> 00:11:45,390
Let's pretend that the barks a lot of count is someone who's malicious and is trying to delete someone

156
00:11:45,390 --> 00:11:46,260
else's post.

157
00:11:46,470 --> 00:11:51,300
Well, first of all, someone like this would probably use a tool like Post Man to send requests, but

158
00:11:51,300 --> 00:11:53,760
this is an easy way to do it right from within your browser.

159
00:11:54,030 --> 00:11:54,390
If I.

160
00:11:54,390 --> 00:11:54,840
Right.

161
00:11:54,840 --> 00:12:02,190
Click on the delete icon and choose inspect, I can see that form element and here's its action.

162
00:12:02,520 --> 00:12:10,410
So I could just change the ID portion of the are to be one of the IDs for a post by the Brat account.

163
00:12:11,010 --> 00:12:17,850
So for example, the Brat account has this post named yet another post and anyone can publicly view

164
00:12:17,850 --> 00:12:21,090
that and see it's posted in your address bar.

165
00:12:21,360 --> 00:12:28,590
So imagine if I copied that into my clipboard and then back in this window where I'm the malicious barks

166
00:12:28,590 --> 00:12:35,670
a lot user, I could just modify the form action you rl to use Brads post ID.

167
00:12:37,380 --> 00:12:41,820
OK, now if I click this red icon I should see a failed message.

168
00:12:42,210 --> 00:12:42,720
Perfect.

169
00:12:42,720 --> 00:12:44,190
It kicks me back to the home page.

170
00:12:44,550 --> 00:12:47,100
You do not have permission to perform that action.

171
00:12:47,610 --> 00:12:54,510
Beautiful, but if I go back to Bachs alot profile and click on a post that I actually own and try to

172
00:12:54,510 --> 00:12:57,980
delete it that goes through without any problems.

173
00:12:58,380 --> 00:12:59,130
Excellent.

174
00:12:59,460 --> 00:13:01,860
That's going to bring this lesson to a close.

175
00:13:02,190 --> 00:13:06,570
In our next lesson, we're going to start work on a new feature in the header.

176
00:13:06,570 --> 00:13:08,820
You might notice this search icon.

177
00:13:09,570 --> 00:13:15,450
Well, when the user clicks on that, it should use front end or browser based JavaScript to open a

178
00:13:15,450 --> 00:13:17,250
full screen search interface.

179
00:13:17,490 --> 00:13:24,000
And then as a user types in what they're looking for, after every keystroke, we can query our server

180
00:13:24,000 --> 00:13:25,650
for live results.

181
00:13:26,130 --> 00:13:31,260
Not only is this a great chance to practice our front end JavaScript, but it should also make our app

182
00:13:31,260 --> 00:13:36,840
really feel tied together because as you can see from your empty home page, your feed is empty.

183
00:13:37,140 --> 00:13:43,170
The search feature is how you can find content from other users and then follow those users.

184
00:13:43,590 --> 00:13:47,730
But for right now, let's not get ahead of ourselves too far and worry about following a user.

185
00:13:47,940 --> 00:13:51,600
For now, let's stay focused on the search feature.

186
00:13:52,050 --> 00:13:54,690
I'm excited to dig into this with you in the next lesson.

187
00:13:54,930 --> 00:13:57,630
So let's keep things rolling and I'll see you then.
