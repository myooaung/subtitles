1
00:00:01,510 --> 00:00:02,620
Hello, everyone.

2
00:00:02,980 --> 00:00:09,240
In this lesson, we are going to add real time validation to our registration form.

3
00:00:09,700 --> 00:00:16,810
So earlier in the course we added server side validation to this form, and that's a necessity.

4
00:00:16,990 --> 00:00:24,010
You always need to validate data on the server side because a malicious user could disable client side

5
00:00:24,010 --> 00:00:26,060
or front end validation.

6
00:00:26,500 --> 00:00:33,910
So while it is true that we can never trust client side validation in this case, we don't need to be

7
00:00:33,910 --> 00:00:34,830
able to trust it.

8
00:00:35,380 --> 00:00:38,470
We're just going to add it to enhance the user experience.

9
00:00:38,680 --> 00:00:45,610
And if a malicious user should disable the client side validation, we don't care because we know that

10
00:00:45,610 --> 00:00:50,710
we have the server side validation that's still going to do its job no matter what.

11
00:00:51,310 --> 00:00:59,050
So our goal in this lesson is to write browser based JavaScript that will run after every keystroke

12
00:00:59,230 --> 00:01:05,950
and show any potential validation messages right above that particular field in real time.

13
00:01:06,550 --> 00:01:09,070
Without further ado, let's get started.

14
00:01:09,670 --> 00:01:14,430
Let's begin by creating a brand new JavaScript file just for this feature.

15
00:01:14,770 --> 00:01:20,070
So do this with me in your text editor within your front and JS folder.

16
00:01:20,890 --> 00:01:25,720
Look for the modules subfolder and on that modules folder.

17
00:01:25,750 --> 00:01:28,080
Let's right click and choose new file.

18
00:01:29,110 --> 00:01:39,310
Let's name this new file registration form JS within this new empty file, we'd want to export something

19
00:01:39,550 --> 00:01:41,760
so that it can be imported from another file.

20
00:01:42,130 --> 00:01:53,340
So let's say export default class and let's give it a name of registration form curly brackets, OK,

21
00:01:53,500 --> 00:01:57,760
within the curly brackets you know that I like to break things up into three sections.

22
00:01:58,090 --> 00:02:05,350
So the first section is a constructor constructor, parentheses, curly brackets after the constructor.

23
00:02:05,350 --> 00:02:12,160
I like to have an area for my events, so let's add a comment and then say events, parentheses, curly

24
00:02:12,160 --> 00:02:19,840
brackets and then below that I like to have a section named Method's OK now within our constructor,

25
00:02:19,840 --> 00:02:21,830
let's be sure to call events.

26
00:02:21,830 --> 00:02:28,680
So this dot events parentheses and then just as a test within events, let's have an annoying alert

27
00:02:28,720 --> 00:02:36,130
pop up that says registration form J.S. is running cool.

28
00:02:36,310 --> 00:02:38,410
Let's go ahead and save this file.

29
00:02:38,620 --> 00:02:42,460
And now I want you to jump into Main JS.

30
00:02:42,880 --> 00:02:47,170
So within your front end folder you should have a file named Main James.

31
00:02:47,560 --> 00:02:52,660
And at the top of that file, let's import in our new registration form code.

32
00:02:53,050 --> 00:03:03,040
So add a new line and say import registration form from and then quotes and then dot forward slash and

33
00:03:03,040 --> 00:03:09,170
then let's look in the modules folder and the name of the file was registration form.

34
00:03:10,720 --> 00:03:11,110
Cool.

35
00:03:11,230 --> 00:03:18,070
Now right below that, let's write an if statement to only actually run this code if the registration

36
00:03:18,070 --> 00:03:20,350
form exists on the current Web page.

37
00:03:20,830 --> 00:03:29,680
So I would say if parentheses curly brackets for the condition we can just say document dot, query

38
00:03:29,920 --> 00:03:41,080
selector and then quotes and then a hash tag of registration dash for ok then within the if curly brackets

39
00:03:41,110 --> 00:03:46,450
we would just create a new instance of uppercase registration form.

40
00:03:49,640 --> 00:03:57,530
Parentheses to call that constructor cool, let's go ahead and save this and then be sure to refresh

41
00:03:57,530 --> 00:04:05,960
your front end and you should see an annoying alert that says registration form JS is running now for

42
00:04:05,960 --> 00:04:07,580
our first real task.

43
00:04:07,610 --> 00:04:15,780
Let's use browser based JavaScript to insert a red validation message above each of the three fields.

44
00:04:17,690 --> 00:04:19,480
Let me show you how I would do that.

45
00:04:19,490 --> 00:04:26,990
So back within registration form J.S., since we know that it's working, we can get rid of that annoying

46
00:04:26,990 --> 00:04:31,120
alert within the event's area and up in the constructor.

47
00:04:31,130 --> 00:04:32,000
Let's do this.

48
00:04:32,630 --> 00:04:38,450
Let's add a property and let's say this dot all fields.

49
00:04:38,960 --> 00:04:47,480
Let's set this to equal document dot query selector only don't type in the parentheses yet.

50
00:04:47,840 --> 00:04:54,320
We actually want to call a method named query selector all and now add the parentheses.

51
00:04:54,770 --> 00:05:01,540
Instead of returning a single element, this will return an array or a collection of multiple elements.

52
00:05:02,150 --> 00:05:09,440
So within it, let's give it quotes and let's say hash tag, registration, Dasch form, but then we

53
00:05:09,440 --> 00:05:15,700
can have a space to look inside it and let's select any element that has a class.

54
00:05:15,710 --> 00:05:19,940
So a dot of form Dasch control.

55
00:05:20,840 --> 00:05:24,320
OK, so this should return an array of three different elements.

56
00:05:24,620 --> 00:05:27,980
Right, the fields for username, email and password.

57
00:05:28,670 --> 00:05:31,040
And now right below this line, let's do this.

58
00:05:31,220 --> 00:05:35,750
Let's call a method that doesn't exist yet, but one that we can create in just a moment.

59
00:05:35,840 --> 00:05:45,710
So let's say this dot insert validation elements, parentheses to call it OK, and now down and our

60
00:05:45,710 --> 00:05:48,470
methods area, let's create a method with this name.

61
00:05:48,950 --> 00:05:56,840
So down here I would add a new line and say insert validation elements, parentheses curly brackets

62
00:05:58,430 --> 00:05:59,390
within this method.

63
00:05:59,390 --> 00:06:05,840
I'd begin by working with the this dot all fields property, which is actually an array.

64
00:06:06,260 --> 00:06:13,160
And we know that all arrays have access to a method named for each within these parentheses.

65
00:06:13,160 --> 00:06:20,240
Let's provide for each a function, so function parentheses, curly brackets within the parentheses.

66
00:06:20,240 --> 00:06:22,340
For this function, let's include a parameter.

67
00:06:22,550 --> 00:06:26,960
We could name it anything, but let's name it l short for element.

68
00:06:27,560 --> 00:06:34,220
OK, now within the body of this function we can say L and now we can do something to each one of those

69
00:06:34,220 --> 00:06:35,390
three fields.

70
00:06:35,840 --> 00:06:36,830
Let's do this.

71
00:06:37,280 --> 00:06:46,910
So l dot insert adjacent html parentheses to call that and then we give it to arguments.

72
00:06:46,910 --> 00:06:48,080
So a comma be.

73
00:06:48,410 --> 00:06:52,310
The first argument is where you want to insert the HTML.

74
00:06:52,670 --> 00:07:01,100
In this case I would actually say after and so right after each form field I want to add in a bit of

75
00:07:01,100 --> 00:07:07,240
HTML instead of the B placeholder, we just include the HTML that we want to add.

76
00:07:07,730 --> 00:07:10,730
So let's say quotes and then let's add a div.

77
00:07:10,730 --> 00:07:14,270
So opening and closing div tag on the opening tag.

78
00:07:14,270 --> 00:07:19,880
Let's give it a class of be sure that you use different types of quotes here.

79
00:07:19,880 --> 00:07:27,950
So the entire HTML string I have wrapped in single quotes and then for my HTML attributes inside here

80
00:07:27,950 --> 00:07:37,190
I'm using double quotes, but let's give it a class of alert space and then alert dash danger and then

81
00:07:37,190 --> 00:07:48,560
a space small and then a space and then live and then uppercase v validate and then uppercase M message

82
00:07:49,490 --> 00:07:51,050
and then finally space.

83
00:07:51,050 --> 00:07:59,360
And just as a test let's give it a class of live validate message dash dash visible.

84
00:08:00,680 --> 00:08:05,180
OK, once you've given it all of these classes, go ahead and save this.

85
00:08:05,420 --> 00:08:11,390
And now if we refresh in the browser you should see these little red boxes above each field.

86
00:08:11,960 --> 00:08:16,430
The styling and sizing looks a bit off because we don't have any text in the device.

87
00:08:16,850 --> 00:08:23,690
So if we went back in and just as a test in between the opening and closing div tags, if you said hello

88
00:08:24,440 --> 00:08:26,930
and then if we save that and refresh.

89
00:08:28,270 --> 00:08:29,210
You get the idea.

90
00:08:29,950 --> 00:08:35,590
So that's where you would include the validation message, such as that username is already taken or

91
00:08:35,800 --> 00:08:41,750
that's not a valid email address, or your password must be at least 12 characters long.

92
00:08:42,280 --> 00:08:46,650
Now, we don't actually want to preemptively show these red boxes.

93
00:08:47,050 --> 00:08:49,360
So let's go back into our code and do this.

94
00:08:49,750 --> 00:08:54,190
First of all, let's get rid of the text in between the opening and closing div tags.

95
00:08:55,960 --> 00:09:00,310
And then let's also get rid of this class that ended in dash dash visible.

96
00:09:03,450 --> 00:09:10,260
So now I just have alert, alert, danger, small and live, validate message, let's give that to save.

97
00:09:10,590 --> 00:09:14,720
So now each field has its own area for validation messages.

98
00:09:15,090 --> 00:09:17,470
Obviously they're not going to show it first.

99
00:09:18,030 --> 00:09:21,270
Now it's up to us to show them at just the right moment.

100
00:09:21,780 --> 00:09:24,670
Let's begin with the user name field.

101
00:09:25,290 --> 00:09:29,550
Let's begin with the rules that enforce how long your username should be.

102
00:09:30,240 --> 00:09:33,680
Let's think about when we should show the validation message.

103
00:09:34,050 --> 00:09:40,890
So if someone begins to type in their name at this point, their user name is only two characters long.

104
00:09:41,130 --> 00:09:47,250
But I wouldn't want to immediately show a message that says your username must be at least three characters

105
00:09:47,580 --> 00:09:51,420
because we haven't even waited long enough to give the user a chance to type.

106
00:09:52,080 --> 00:09:55,850
What I'm getting at here is for certain validation checks.

107
00:09:55,860 --> 00:10:02,670
We would not want to run immediately after each keystroke, but if the user started typing in a really

108
00:10:02,670 --> 00:10:10,380
long name and they surpassed our 30 character limit for the username, then we would immediately want

109
00:10:10,380 --> 00:10:14,750
to show the message that says username cannot exceed 30 characters.

110
00:10:15,240 --> 00:10:21,480
Also, if a user used a character that we are not allowing, right, we're only allowing alphanumeric

111
00:10:21,480 --> 00:10:28,890
characters so A through Z and zero through nine the millisecond they used a special character that's

112
00:10:28,890 --> 00:10:32,190
not allowed, I would want to show them the validation message.

113
00:10:32,580 --> 00:10:38,280
On the other hand, another example where I would want to wait for a delay would be to check to see

114
00:10:38,280 --> 00:10:40,860
if the user name has already been taken or not.

115
00:10:41,340 --> 00:10:45,300
So let's assume someone else named Brad was trying to register that username.

116
00:10:45,930 --> 00:10:51,570
I would not want to send a request to the server to see if there's a username of B, and then after

117
00:10:51,570 --> 00:10:54,930
they type R and A and D, right.

118
00:10:54,930 --> 00:11:00,060
You don't want to flood your server with network requests after every single keystroke.

119
00:11:00,390 --> 00:11:06,270
So, again, just like I'd probably want to give the user five to eight hundred milliseconds to type

120
00:11:06,270 --> 00:11:08,600
something in that's longer than two characters.

121
00:11:08,880 --> 00:11:14,880
I also want to give them a certain number of milliseconds before I waste a network trip to see if that

122
00:11:14,880 --> 00:11:16,560
username has already been taken.

123
00:11:16,920 --> 00:11:18,360
So, again, big picture.

124
00:11:18,570 --> 00:11:24,600
I just want you to be aware of the fact that some checks should run immediately, but other checks should

125
00:11:24,600 --> 00:11:25,750
run after a delay.

126
00:11:26,280 --> 00:11:30,870
Just be aware of that because it is going to slightly complicate our coding setup.

127
00:11:31,290 --> 00:11:35,010
OK, having said all of that, at this point, let's start moving forward.

128
00:11:35,430 --> 00:11:39,660
I would begin by selecting this username field.

129
00:11:40,230 --> 00:11:47,430
So within our constructor, maybe right below this insert validation elements line, let's say this

130
00:11:47,430 --> 00:12:00,390
dot username equals document, dot query selector quotes and hash tag because it has an idea of username

131
00:12:00,390 --> 00:12:02,550
Dasch register.

132
00:12:03,390 --> 00:12:08,550
OK, now let's just listen for each keystroke event on that element.

133
00:12:08,910 --> 00:12:19,170
So within our events area, I would add a new event so we can just say this dot username dot add event

134
00:12:19,350 --> 00:12:20,250
listener.

135
00:12:20,940 --> 00:12:23,490
Within these parentheses we would give it to arguments.

136
00:12:23,490 --> 00:12:26,340
So A comma, B for the first argument.

137
00:12:26,340 --> 00:12:29,340
We're interested in the key up event.

138
00:12:29,910 --> 00:12:34,830
Now, the second argument would be a function that we would want to run in response to that event.

139
00:12:35,280 --> 00:12:41,310
But this is where things get interesting, because if we think about it, if I select that field, what

140
00:12:41,310 --> 00:12:45,210
if I press a key that does not in any way change the value of the field?

141
00:12:45,750 --> 00:12:50,940
For example, what if the user pressed one of their arrow keys right, the left, right, up or down

142
00:12:50,940 --> 00:12:51,660
Iraqis?

143
00:12:51,660 --> 00:12:56,820
Or what if they pressed the shift key or the control key or the caps lock key?

144
00:12:57,240 --> 00:12:58,290
You get the idea.

145
00:12:58,500 --> 00:13:05,490
We wouldn't need to actually do anything unless the key that they just pressed actually somehow just

146
00:13:05,490 --> 00:13:07,410
changed the value of the field.

147
00:13:07,800 --> 00:13:12,110
And if we think about it, that's going to be the case for all three of the fields.

148
00:13:12,450 --> 00:13:18,900
So in terms of the function that we want to run in response to this, why don't we create a reuseable

149
00:13:18,900 --> 00:13:23,320
function that will check to see if the field has changed its value?

150
00:13:23,790 --> 00:13:26,100
Trust me, this should make sense in a couple of minutes.

151
00:13:26,100 --> 00:13:27,000
But let's do this.

152
00:13:27,330 --> 00:13:30,000
So instead of the B placeholder, let's create a function.

153
00:13:30,180 --> 00:13:32,460
Let's actually use an arrow function.

154
00:13:32,460 --> 00:13:36,240
So parentheses, arrow symbol, curly brackets.

155
00:13:36,480 --> 00:13:40,110
I'm using an arrow function so that the this keyword doesn't change.

156
00:13:40,320 --> 00:13:47,850
Let's dropdown inside those curly brackets and let's say this dot is different.

157
00:13:48,510 --> 00:13:53,280
So I just made up this name, but now let's go create a method with this name.

158
00:13:53,670 --> 00:13:57,510
So down here in our methods area, let's create a new method name.

159
00:13:57,510 --> 00:14:02,130
It is different parentheses, curly brackets.

160
00:14:02,550 --> 00:14:08,030
And now let's do this when we call this method, let's provide it with two arguments.

161
00:14:08,490 --> 00:14:11,250
First, let's give it the element in question.

162
00:14:11,370 --> 00:14:14,670
So that would be this username karma.

163
00:14:14,970 --> 00:14:22,080
Then let's give it a function that we would want to run if the value of the field has actually changed.

164
00:14:22,830 --> 00:14:25,740
We haven't created this method yet, but we will in just a moment.

165
00:14:26,010 --> 00:14:35,670
So let's say this dot user name handler, OK, now, when we create this is different method inside

166
00:14:35,670 --> 00:14:40,700
these parentheses, let's include two parameters to receive those two incoming arguments.

167
00:14:41,190 --> 00:14:47,940
So for the first one, I would say E-L short for Element comma and then let's say handler.

168
00:14:48,760 --> 00:14:54,750
OK, now within the body of this method, what we really want to do is see if the field's value has

169
00:14:54,750 --> 00:14:56,900
changed after this key press.

170
00:14:57,510 --> 00:14:59,510
Let me show you how I would handle this.

171
00:14:59,820 --> 00:15:06,120
So up in the constructor at the very top, right after this DOT username, I just create another line

172
00:15:07,140 --> 00:15:17,060
and say this dot username, dot previous value and I would set this to equal an empty string.

173
00:15:17,910 --> 00:15:23,580
OK, now with that in place, let's go back down to is different and within the body of is different.

174
00:15:23,580 --> 00:15:25,370
I would just create an if statement.

175
00:15:25,380 --> 00:15:32,610
So if parentheses curly brackets for the condition check I would just say if the element in question

176
00:15:32,880 --> 00:15:43,350
dot previous value, if that does not equal the element in question's current value, well that means

177
00:15:43,350 --> 00:15:44,790
the value has changed.

178
00:15:44,910 --> 00:15:48,720
So then in this if block we would just call the handler function.

179
00:15:49,230 --> 00:15:55,680
OK, but right after this if block but still within the is different method, let's say the element

180
00:15:55,680 --> 00:16:01,610
in question dot previous value should now be set to equal the current value.

181
00:16:01,920 --> 00:16:05,730
So then the next time when this runs, these values will make sense.

182
00:16:06,120 --> 00:16:06,370
Right.

183
00:16:06,390 --> 00:16:10,020
And it will actually keep track of the previous value each time.

184
00:16:10,680 --> 00:16:14,220
If the value is actually different, it's going to call the handler function.

185
00:16:14,520 --> 00:16:14,760
Right.

186
00:16:14,790 --> 00:16:17,130
Which is the second argument or parameter.

187
00:16:17,550 --> 00:16:23,370
And in this case for the username, we are telling it to run a function named username handler.

188
00:16:23,790 --> 00:16:31,650
So let's create a method with that matching name, user name handler, parentheses, curly brackets.

189
00:16:31,890 --> 00:16:39,780
And just as a test within this method, let's have an annoying alert message that says username handler

190
00:16:39,780 --> 00:16:42,110
just ran cool.

191
00:16:42,300 --> 00:16:47,040
Now, before we save this and test it out, and once we test it, I think it will start to make sense.

192
00:16:47,040 --> 00:16:53,640
But before we get to that, we do need to address the this keyword when our handler method runs.

193
00:16:53,640 --> 00:16:59,790
We do want to make sure that within it the this keyword is still pointing towards our overall object.

194
00:17:00,270 --> 00:17:06,840
However, because we are calling the handler like this, JavaScript is going to consider the this keyword

195
00:17:06,840 --> 00:17:08,970
to just be the global object.

196
00:17:09,300 --> 00:17:09,510
Right.

197
00:17:09,510 --> 00:17:11,460
Because there's no object right before it.

198
00:17:11,460 --> 00:17:15,090
That's obviously calling it to get around this.

199
00:17:15,090 --> 00:17:16,080
Here's what we can do.

200
00:17:16,770 --> 00:17:22,170
Let's get rid of the parentheses after handler here and let's say handler dot call.

201
00:17:22,980 --> 00:17:25,650
Coal is a method that is available to functions.

202
00:17:25,890 --> 00:17:29,790
And now within these parentheses, we can just say this.

203
00:17:30,390 --> 00:17:35,640
So now call will run this function and it will make sure that the this keyword is whatever we set it

204
00:17:35,640 --> 00:17:40,680
to, which in this context is still pointing towards our overall object.

205
00:17:41,310 --> 00:17:46,440
Let's go ahead and save this and let me refresh your memory of what we're really trying to achieve here.

206
00:17:46,740 --> 00:17:53,250
So if you reload in the browser, if you click into the username field and push a key that does not

207
00:17:53,250 --> 00:17:58,350
change the value, like an arrow key, like left, right, up, down, or if you push caps, lock or

208
00:17:58,350 --> 00:18:00,690
shift noticed, nothing happens.

209
00:18:00,900 --> 00:18:10,020
But as soon as we actually type in a letter like B cool, we see username handler just ran perfect and

210
00:18:10,020 --> 00:18:10,980
now we can reuse.

211
00:18:10,980 --> 00:18:14,340
That is different function for these two fields as well.

212
00:18:15,030 --> 00:18:18,720
This actually brings us to a good stopping point for this video.

213
00:18:19,200 --> 00:18:24,510
It may not seem like we've accomplished very much, but we have laid the foundation and groundwork.

214
00:18:24,660 --> 00:18:29,070
And I think you'll be surprised how far we will get in the next video.

215
00:18:29,580 --> 00:18:34,650
That's when we will display error messages at just the right moment with just the right message.

216
00:18:35,040 --> 00:18:39,450
So let's keep things rolling and I will see you in the next lesson.
