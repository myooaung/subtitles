WEBVTT
1
00:00:01.800 --> 00:00:02.730
Hello, everyone.

2
00:00:03.060 --> 00:00:07.540
In this lesson, we're going to continue working on our live search feature.

3
00:00:08.100 --> 00:00:14.700
Let's jump right into the action, OK, for our first task in this lesson, let's set things up so that

4
00:00:14.850 --> 00:00:21.180
as soon as you click on the search icon, you should be able to begin immediately typing, meaning your

5
00:00:21.180 --> 00:00:27.720
cursor should be placed into this field or this field should be selected or focused for you to make

6
00:00:27.720 --> 00:00:28.320
this happen.

7
00:00:28.350 --> 00:00:32.860
Let's begin by selecting this text input field with our JavaScript.

8
00:00:33.360 --> 00:00:40.560
So within your text editor in our search JS file, within our constructor, let's create a new property

9
00:00:40.560 --> 00:00:48.720
and say this dot, let's name it input field and let's set that to equal and then just use document

10
00:00:49.020 --> 00:00:51.540
dot query selector.

11
00:00:52.080 --> 00:00:55.490
And I can let you know that that field element has an idea.

12
00:00:55.500 --> 00:01:01.050
So hash tag, it has an idea of live dash search, dash field.

13
00:01:01.500 --> 00:01:01.950
All right.

14
00:01:01.950 --> 00:01:05.100
Now let's go down to our event for open overlay.

15
00:01:05.490 --> 00:01:10.170
And as soon as we add the class that will make the overlay visible, then right below that we can just

16
00:01:10.170 --> 00:01:16.350
say this dot input field and then call a method on it named focus.

17
00:01:16.710 --> 00:01:21.810
This will focus the element or in other words, placed the user's cursor there so they can begin typing

18
00:01:21.810 --> 00:01:22.620
into the field.

19
00:01:23.040 --> 00:01:29.640
However, because the div that this field lives within was hidden until this line of code ran, certain

20
00:01:29.640 --> 00:01:33.140
browsers will run into issues and not be able to focus this element.

21
00:01:33.570 --> 00:01:39.630
What we can do to get around this is after we make the search overlay visible, let's wait maybe 50

22
00:01:39.630 --> 00:01:42.870
milliseconds and then focus that TextField.

23
00:01:43.320 --> 00:01:50.910
So cut this focus line into your clipboard and let's set a time out, set time out and we just give

24
00:01:50.910 --> 00:01:51.720
this to arguments.

25
00:01:51.720 --> 00:01:55.570
So Akama, be the first is a function that you want to run.

26
00:01:55.920 --> 00:01:59.540
The second is how long you want to wait before running it.

27
00:02:00.150 --> 00:02:06.330
So for the second argument, let's just say maybe 50 milliseconds, something that will not be noticeable

28
00:02:06.330 --> 00:02:11.370
to the user, but will give the browser enough time to realize that that div is now visible.

29
00:02:11.500 --> 00:02:15.480
So, yes, you can focus the TextField instead of a placeholder.

30
00:02:15.480 --> 00:02:17.430
Let's create an arrow function here.

31
00:02:18.690 --> 00:02:22.050
We don't need curly brackets and we can just paste in our clipboard.

32
00:02:22.620 --> 00:02:27.750
Let's go ahead and save this and test it out back in the browser by refresh.

33
00:02:28.230 --> 00:02:34.590
As soon as I click the search icon, you can see my cursor is blinking and I can immediately begin typing.

34
00:02:35.040 --> 00:02:35.760
Perfect.

35
00:02:36.270 --> 00:02:42.000
Now, before we begin programming, what should happen once the user does start typing in text, let's

36
00:02:42.000 --> 00:02:48.000
first make a quick fix for browsers that are not logged in and therefore they don't see a search icon.

37
00:02:48.000 --> 00:02:49.470
They just see a log in form.

38
00:02:49.860 --> 00:02:57.090
Let's do this within our text editor, within our main JS file, where we are importing in the search

39
00:02:57.090 --> 00:03:03.180
module when we actually create a new instance of search, which is what triggers our constructor from

40
00:03:03.180 --> 00:03:05.160
the class and sets everything in motion.

41
00:03:05.550 --> 00:03:08.400
Let's just wrap this within an if statement.

42
00:03:08.940 --> 00:03:15.090
So cut that into your clipboard and then let's say if the parentheses curly brackets for the condition,

43
00:03:15.090 --> 00:03:23.640
if document dot, query selector and then let's look for an element that has a class of header search

44
00:03:23.640 --> 00:03:24.210
icon.

45
00:03:24.630 --> 00:03:31.560
Only if that element exists on the current page, then do this whatever we include in the curly brackets

46
00:03:32.040 --> 00:03:33.990
so we can just paste in our clipboard.

47
00:03:34.620 --> 00:03:36.090
Let's go ahead and save that.

48
00:03:36.300 --> 00:03:40.770
Now, in a browser where I'm logged in, you can see our search.

49
00:03:40.770 --> 00:03:46.740
JavaScript is still working, but for users that are not logged in, their browser will not even worry

50
00:03:46.770 --> 00:03:49.140
executing any of that search javascript.

51
00:03:49.560 --> 00:03:49.940
Cool.

52
00:03:50.160 --> 00:03:51.930
Now let's get back to the task at hand.

53
00:03:52.170 --> 00:03:58.140
So once a user actually starts typing something into this field, the question becomes, what do we

54
00:03:58.140 --> 00:03:59.480
want to do in response?

55
00:04:00.030 --> 00:04:05.370
Well, first of all, we know that we do not want the search results area to be showing right away.

56
00:04:05.910 --> 00:04:08.100
Instead, we'd want this area to be empty.

57
00:04:08.370 --> 00:04:15.000
And then as soon as the user begins typing in a value, let's show a spinning progress load or icon

58
00:04:15.000 --> 00:04:15.900
right about here.

59
00:04:16.350 --> 00:04:22.350
OK, so let's jump into our search J.S. file and up in the constructor.

60
00:04:22.590 --> 00:04:27.630
Let's begin by creating a property that selects this results area.

61
00:04:29.280 --> 00:04:36.390
So within the constructor, let's create a new property, this dot and let's name it results area and

62
00:04:36.390 --> 00:04:40.680
set that to equal document query selector.

63
00:04:41.130 --> 00:04:48.480
And it has a class of live search results to make sure that that area is not visible.

64
00:04:48.480 --> 00:04:54.630
At first we can just go down to our HTML template within our inject HTML method.

65
00:04:55.080 --> 00:05:00.930
And in between these two chunks of code we see a line break in this second chunk of code, about four

66
00:05:00.930 --> 00:05:01.260
lines.

67
00:05:01.330 --> 00:05:08.290
Into it, we see a div with a class of live search results and then it has a second class of live search

68
00:05:08.290 --> 00:05:10.270
results, dash, dash visible.

69
00:05:10.780 --> 00:05:14.610
Let's get rid of this second class, OK?

70
00:05:14.620 --> 00:05:17.000
And that alone should hide that results area.

71
00:05:17.470 --> 00:05:19.510
So if I refresh, click on search.

72
00:05:19.900 --> 00:05:20.550
Perfect.

73
00:05:21.160 --> 00:05:26.530
Now let's set things up so that as soon as you start typing into this field in response, we show a

74
00:05:26.530 --> 00:05:28.840
spinning progress load or icon here.

75
00:05:29.470 --> 00:05:36.400
So back in our text editor up in our constructor, let's begin by creating another property, let's

76
00:05:36.400 --> 00:05:41.080
say this dot and let's name it loader icon.

77
00:05:41.770 --> 00:05:49.560
Let's set that to equal document dot query selector and it has a class of circle loader.

78
00:05:50.080 --> 00:05:54.950
So I've already included an element with this class in the HTML template.

79
00:05:55.330 --> 00:06:00.310
So now all we need to do is add a class to it to make it visible at the right moment.

80
00:06:00.640 --> 00:06:04.600
And the right moment is as soon as someone starts typing into this field.

81
00:06:04.870 --> 00:06:09.150
So let's just set up a new event within our events area.

82
00:06:09.700 --> 00:06:15.130
Let's just add a new line here and let's say this DOT input field, right.

83
00:06:15.130 --> 00:06:17.440
That's the text field they can begin typing into.

84
00:06:17.830 --> 00:06:19.060
Let's add an event to it.

85
00:06:19.060 --> 00:06:27.130
So dot an event listener in this case instead of click, the event that we're interested in listening

86
00:06:27.130 --> 00:06:29.200
for is key.

87
00:06:30.250 --> 00:06:35.290
So once they press a key on their keyboard and then release their finger from that key and that key

88
00:06:35.290 --> 00:06:39.460
comes up, this event will be triggered, let's say, comma.

89
00:06:39.460 --> 00:06:43.360
And the second argument is a function that we want to run in response.

90
00:06:43.900 --> 00:06:48.070
Let's provide an arrow function so that the this keyword is not changed.

91
00:06:48.670 --> 00:06:52.290
And let's just call a method that we can create ten seconds from now.

92
00:06:52.630 --> 00:07:01.690
So this dot and let's name it key press handler parentheses to actually call it the reason we're not

93
00:07:01.690 --> 00:07:07.540
just directly including code here to show the spinner icon is because we actually are going to need

94
00:07:07.660 --> 00:07:13.750
some decently complex logic to determine when we should show the loader versus when we should do something

95
00:07:13.750 --> 00:07:14.230
else.

96
00:07:14.710 --> 00:07:17.170
But let's not get ahead of ourselves for now.

97
00:07:17.170 --> 00:07:19.630
Let's just create a method with this matching name.

98
00:07:19.930 --> 00:07:21.310
So key press handler.

99
00:07:22.030 --> 00:07:30.220
So within our methods area, I will create a new method, let's name it key press handler parentheses

100
00:07:30.220 --> 00:07:32.770
curly brackets within this method.

101
00:07:32.770 --> 00:07:36.430
Let's start simple before we build out any complex logic.

102
00:07:36.790 --> 00:07:39.730
Let's begin by just showing the spinning or icon.

103
00:07:40.300 --> 00:07:47.530
We haven't created this method yet, but you can imagine we could just call this dot show loader icon.

104
00:07:48.490 --> 00:07:49.570
OK, then right below this.

105
00:07:49.570 --> 00:07:51.970
Let's create a method with this matching name.

106
00:07:51.970 --> 00:07:57.130
So show load or icon parentheses, curly brackets.

107
00:07:57.730 --> 00:08:04.000
Now, within this method, we just need to select an HTML element from our template and then add a class

108
00:08:04.000 --> 00:08:05.470
to it that will make it visible.

109
00:08:05.950 --> 00:08:17.710
Let's say this dot loader icon dot class list, dot add and let's give it a class of circle dash loader

110
00:08:18.220 --> 00:08:20.050
dash dash visible.

111
00:08:20.770 --> 00:08:23.290
Let's go ahead and save this and test it out.

112
00:08:23.530 --> 00:08:33.220
So if I refresh and click on the search icon, as soon as I begin typing, you can see this spinner

113
00:08:33.220 --> 00:08:34.180
icon appears.

114
00:08:35.410 --> 00:08:37.120
Now here's where things get interesting.

115
00:08:37.420 --> 00:08:44.980
The question becomes exactly when do we want to send off an asynchronous request to our server to find

116
00:08:44.980 --> 00:08:46.750
posts about catnip?

117
00:08:47.230 --> 00:08:52.210
Because we don't actually want to send off a new request after every keystroke.

118
00:08:52.480 --> 00:08:59.830
For example, if a user typed in catnip, they begin by pressing C, so we wouldn't want to send off

119
00:08:59.830 --> 00:09:02.350
a network request to search for just see.

120
00:09:02.740 --> 00:09:05.920
And then when they type in a we wouldn't want to just search for K.

121
00:09:06.790 --> 00:09:13.810
So instead of sending off a new search request after every keystroke instead, why don't we wait maybe

122
00:09:14.170 --> 00:09:20.140
five to seven hundred milliseconds after they've stopped typing in new characters.

123
00:09:20.920 --> 00:09:24.910
This way we don't flood our server with unnecessary requests.

124
00:09:25.240 --> 00:09:25.510
Right.

125
00:09:25.510 --> 00:09:31.300
If someone wants to search for puppy, we don't need to send off a search for just P and then P you

126
00:09:31.420 --> 00:09:32.680
and then P p.

127
00:09:33.130 --> 00:09:38.320
Let's just wait a tiny bit after they've stopped typing and then send off a request.

128
00:09:38.920 --> 00:09:43.960
So to keep track of that timing, let's do this within our constructor.

129
00:09:44.440 --> 00:09:53.260
Let's create a new property so this dot and let's name it typing wait timer.

130
00:09:53.590 --> 00:09:56.440
For now we don't need to set it to equal anything.

131
00:09:56.860 --> 00:10:01.150
We're just making sure that this property exists on our object so that we can.

132
00:10:01.220 --> 00:10:06.740
Work with it later, also, before we continue, I want to point something else out back in the browser

133
00:10:06.740 --> 00:10:09.750
if I refresh and open up the search.

134
00:10:10.220 --> 00:10:14.650
What if a user presses the left or right arrow key on their keyboard?

135
00:10:15.560 --> 00:10:20.840
There's no sense in showing the spinner icon because they didn't actually type anything into the field.

136
00:10:21.320 --> 00:10:27.770
So let's also set things up so that we keep track of the previous value in between each keystroke.

137
00:10:27.950 --> 00:10:35.300
And only if the value of this field has changed would we consider that an event worth paying attention

138
00:10:35.300 --> 00:10:35.610
to.

139
00:10:36.200 --> 00:10:39.980
So within our constructor, let's create another property.

140
00:10:40.010 --> 00:10:49.040
Let's name it this dot previous value to start, let's set it to equal an empty string or an empty pair

141
00:10:49.040 --> 00:10:49.800
of quotes.

142
00:10:50.360 --> 00:10:50.870
All right.

143
00:10:50.870 --> 00:10:55.470
Now let's go use these two new variables within our key press handler.

144
00:10:56.600 --> 00:10:57.650
So here's that method.

145
00:10:57.650 --> 00:10:58.670
Key press handler.

146
00:10:59.300 --> 00:11:03.610
Let's actually cut this show load or icon line into our clipboard.

147
00:11:04.490 --> 00:11:06.220
OK, so we have a clean slate.

148
00:11:06.800 --> 00:11:14.180
Let's begin by creating a variable, let's name it value and let's set it to equal the current value

149
00:11:14.180 --> 00:11:15.280
of the TextField.

150
00:11:15.290 --> 00:11:24.480
So this input field value then at the very end of this function, let's update our previous value.

151
00:11:24.500 --> 00:11:28.600
So this previous value equals value.

152
00:11:29.030 --> 00:11:32.780
Now, in between these two lines, let's do something interesting.

153
00:11:33.650 --> 00:11:42.410
Let's say if parentheses curly brackets for the condition, let's say if value is not empty.

154
00:11:43.190 --> 00:11:50.270
And so ampersand, ampersand, and it's different than the previous value, meaning whatever key they

155
00:11:50.270 --> 00:11:54.140
just pressed actually changed the value of the TextField.

156
00:11:54.140 --> 00:12:00.220
So value does not equal this dot previous value.

157
00:12:01.070 --> 00:12:06.310
If this evaluates to true, then we actually would want to show the lotus icon.

158
00:12:06.530 --> 00:12:08.300
So you could paste in your clipboard here.

159
00:12:08.570 --> 00:12:10.240
This does show lower icon.

160
00:12:10.790 --> 00:12:13.250
This is also where we can begin a timer.

161
00:12:13.760 --> 00:12:20.240
Remember, we wanted to wait maybe seven hundred milliseconds after they've stopped typing to actually

162
00:12:20.240 --> 00:12:21.500
send off a request.

163
00:12:22.010 --> 00:12:33.410
So let's say this dot typing wait timer equals and then we can use JavaScript, set time out and we

164
00:12:33.410 --> 00:12:37.280
give it two arguments, A comma, B, the first is a function.

165
00:12:37.430 --> 00:12:44.000
The second is how many milliseconds you want to wait before running that, let's say seven hundred and

166
00:12:44.000 --> 00:12:49.010
fifty milliseconds actually to test that this delay feature is working.

167
00:12:49.310 --> 00:12:51.980
Let's choose an absurdly large value here.

168
00:12:52.400 --> 00:12:59.030
So maybe three thousand milliseconds once we can test things out and confirm that it's working as expected,

169
00:12:59.300 --> 00:13:05.030
we can choose a much lower value here, OK, for the function that we'd want to run after this delay,

170
00:13:05.360 --> 00:13:09.920
let's imagine that we have a method that will send off a request to our server.

171
00:13:10.250 --> 00:13:16.280
Instead of listing a function here directly, let's actually provide an arrow function so that the this

172
00:13:16.280 --> 00:13:17.840
keyword does not change.

173
00:13:18.170 --> 00:13:27.230
So then we can call this dot and imagine will create a method named send request parentheses to call

174
00:13:27.230 --> 00:13:27.380
it.

175
00:13:27.920 --> 00:13:29.330
Now, here's the important part.

176
00:13:29.600 --> 00:13:36.020
We don't want to just queue up a new request for each keystroke and simply wait three seconds after

177
00:13:36.020 --> 00:13:38.420
they press the key to send off a request.

178
00:13:38.690 --> 00:13:41.200
However, that's what this current code would achieve.

179
00:13:41.570 --> 00:13:48.830
So what we need to do instead, maybe at the start of this, if block is clear, the previous timer,

180
00:13:48.950 --> 00:13:54.870
so we can say clear time out and then we just tell it which time out we want to clear.

181
00:13:54.890 --> 00:13:58.760
So this dot typing wait timer.

182
00:13:59.360 --> 00:14:00.470
So think of it like this.

183
00:14:00.710 --> 00:14:03.170
Let's say someone's trying to search for the word puppy.

184
00:14:03.560 --> 00:14:04.820
They type in P.

185
00:14:05.750 --> 00:14:07.340
This would evaluate to true.

186
00:14:07.910 --> 00:14:14.750
Since they just pressed that key, our timer gets set to zero, then we begin counting towards our 3000

187
00:14:14.750 --> 00:14:15.620
milliseconds.

188
00:14:15.860 --> 00:14:17.140
So the clock is ticking.

189
00:14:17.510 --> 00:14:22.700
Who knows, maybe they're very slow at typing and this gets all the way up to two thousand milliseconds

190
00:14:22.700 --> 00:14:24.390
before they press the U.

191
00:14:24.650 --> 00:14:25.970
The second letter in puppy.

192
00:14:26.360 --> 00:14:28.970
At that point the timer would reset.

193
00:14:29.180 --> 00:14:30.890
We are clearing that time out.

194
00:14:31.070 --> 00:14:35.990
So then it would have to start over again and begin from zero counting up to this delay.

195
00:14:36.350 --> 00:14:41.900
But when they actually do stop typing for this long, then this will finally happen.

196
00:14:42.380 --> 00:14:45.890
So to test this out right now, let's create a method with this name.

197
00:14:46.400 --> 00:14:49.610
And just as a test, we can show an annoying alert message.

198
00:14:50.630 --> 00:14:53.930
So let's create a new method, maybe right above show load or icon.

199
00:14:54.710 --> 00:14:58.970
Let's say send request parentheses, curly brackets.

200
00:14:59.600 --> 00:15:00.980
And just for a test, we can say.

201
00:15:01.070 --> 00:15:05.100
Alert send request method just ran.

202
00:15:05.690 --> 00:15:08.460
Let's go ahead and give this a save and test it out.

203
00:15:09.110 --> 00:15:17.090
So if I refresh and open up the search, if I just keep pressing different letters on my keyboard and

204
00:15:17.090 --> 00:15:22.100
never wait three thousand milliseconds, you'll notice that nothing ever happens.

205
00:15:22.460 --> 00:15:26.900
However, if I stop typing and then we wait three seconds.

206
00:15:28.130 --> 00:15:31.000
Perfect send request method just ran.

207
00:15:31.520 --> 00:15:39.350
OK, now for our final task in this lesson, let's adjust that send request method to actually send

208
00:15:39.350 --> 00:15:42.220
off an asynchronous request to our server.

209
00:15:42.740 --> 00:15:49.280
We could use the web browsers built in or native feature named Fetch, but I prefer to use a library

210
00:15:49.280 --> 00:15:53.100
named Axios to send off asynchronous requests.

211
00:15:53.540 --> 00:16:00.200
Luckily, since we're using Web pack to bundle up our front end JavaScript, we can very easily leverage

212
00:16:00.200 --> 00:16:01.720
NPM packages.

213
00:16:02.180 --> 00:16:03.970
So let's open up our command line.

214
00:16:04.490 --> 00:16:09.520
If your server is currently running press control, see to quit and let's install a package.

215
00:16:09.540 --> 00:16:16.630
So NPM install in the package we're interested in is Axios.

216
00:16:17.180 --> 00:16:21.590
So that's a axios go ahead and press enter.

217
00:16:24.370 --> 00:16:28.750
OK, then let's start up our server again, so npm run watch.

218
00:16:31.230 --> 00:16:38.250
OK, now up at the very top of our search dogs file, even before we include export default, let's

219
00:16:38.250 --> 00:16:46.850
add a new line at the very top and say import axios from the axios package.

220
00:16:47.250 --> 00:16:47.640
Cool.

221
00:16:47.640 --> 00:16:50.290
So that's similar to requiring in a package.

222
00:16:50.580 --> 00:16:54.930
Now we can leverage it so down within our send request method.

223
00:16:55.740 --> 00:16:56.280
Here it is.

224
00:16:56.430 --> 00:17:04.020
Instead of that annoying alert message, let's say Axios, let's use its post method to send a post

225
00:17:04.020 --> 00:17:06.840
request and we give this to arguments.

226
00:17:07.110 --> 00:17:08.460
The first is a U.

227
00:17:08.460 --> 00:17:10.800
RL that we want to send a request to.

228
00:17:11.070 --> 00:17:16.860
So let's just say forward slash the base of this current domain and then let's say search.

229
00:17:17.490 --> 00:17:25.350
In our next lesson, we can set up a route in our Express app that matches a post request to slash search.

230
00:17:26.070 --> 00:17:32.640
OK, for the second argument, instead of this placeholder B, we include an object with any data that

231
00:17:32.640 --> 00:17:34.770
we want to send along to the server.

232
00:17:35.070 --> 00:17:44.340
Let's include a property named search term and then let's set it so Colen to whatever this text field

233
00:17:44.340 --> 00:17:45.390
currently holds.

234
00:17:46.350 --> 00:17:53.070
So that would just be this dot input field dot value.

235
00:17:53.730 --> 00:17:54.150
Cool.

236
00:17:54.330 --> 00:17:57.710
Now the Axios library is going to return a promise.

237
00:17:58.230 --> 00:18:04.200
So at the end of this, let's use the dot, then dot catch syntax.

238
00:18:04.680 --> 00:18:10.390
Let's provide functions within both then and catch so we can use an arrow function.

239
00:18:11.430 --> 00:18:12.960
Let's do the same thing for catch.

240
00:18:15.400 --> 00:18:21.280
Now, as of this moment in Express, we have not set up a route for a search, so this promise is going

241
00:18:21.280 --> 00:18:23.020
to reject instead of resolve.

242
00:18:23.680 --> 00:18:29.510
So just as a test within catch, let's just show an alert and say hello.

243
00:18:30.070 --> 00:18:31.560
The request failed.

244
00:18:32.200 --> 00:18:37.320
Let's go ahead and save this and test it out back in the browser by refresh.

245
00:18:38.620 --> 00:18:42.760
He click the search icon type and then wait three seconds.

246
00:18:45.200 --> 00:18:45.870
Perfect.

247
00:18:45.890 --> 00:18:49.320
I've never been happier to see a message say that something failed.

248
00:18:49.640 --> 00:18:52.270
This means the Axios library is doing its job.

249
00:18:52.550 --> 00:18:56.020
It's sent off an asynchronous network request to our server.

250
00:18:56.240 --> 00:19:03.550
And now all we need to do in our next lesson is set up a slash search route in our express app.

251
00:19:04.130 --> 00:19:06.870
That is when everything will really start to come together.

252
00:19:07.220 --> 00:19:11.540
So let's keep things rolling and I will see you in the next lesson.
