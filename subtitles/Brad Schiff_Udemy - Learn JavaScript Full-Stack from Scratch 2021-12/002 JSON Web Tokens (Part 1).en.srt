1
00:00:01,700 --> 00:00:02,730
Hello, everyone.

2
00:00:03,050 --> 00:00:08,990
In this lesson, we are going to continue working on our API to be more specific.

3
00:00:09,020 --> 00:00:14,270
We are going to learn how to leverage a technology named JSON Web tokens.

4
00:00:14,990 --> 00:00:15,550
All right.

5
00:00:15,560 --> 00:00:23,180
So at the end of our previous video, we had set up a new route of slash API slash log in.

6
00:00:23,780 --> 00:00:30,110
And if you send a post request to that route, including a bit of JSON with a valid username and password,

7
00:00:30,410 --> 00:00:33,490
then the server will respond back with good job.

8
00:00:33,950 --> 00:00:36,490
That is a real username and password only.

9
00:00:36,500 --> 00:00:44,330
This is not an interesting or exciting response because remember, our goal for this API is to let users

10
00:00:44,330 --> 00:00:46,370
create and delete posts.

11
00:00:46,910 --> 00:00:52,550
And if you think about our application, remember, we set things up so that you need to be logged in

12
00:00:52,550 --> 00:00:54,230
in order to create a post.

13
00:00:54,710 --> 00:00:59,960
And then obviously to delete a post, you would need to be the owner or author of that post.

14
00:01:00,590 --> 00:01:08,120
So what I'm getting at here is if someone sends a valid username and password combo to our API slash

15
00:01:08,120 --> 00:01:14,870
login route, then we should respond with something that would allow that person to authenticate or

16
00:01:14,870 --> 00:01:17,780
prove to us that they are who they just claim to be.

17
00:01:18,230 --> 00:01:18,550
Right.

18
00:01:18,560 --> 00:01:24,680
Something that they can use for their future requests when they try to create a post that would identify

19
00:01:24,680 --> 00:01:24,950
them.

20
00:01:25,370 --> 00:01:32,750
Now, when we created the Web browser version of our app, we used cookies and sessions to handle authentication.

21
00:01:33,200 --> 00:01:39,380
But this time around for our API, we are going to do something entirely different.

22
00:01:39,980 --> 00:01:47,210
If you think back to several chapters ago when we first learned about authentication and identifying

23
00:01:47,210 --> 00:01:51,440
requests, I mentioned that there are two main ways of handling it.

24
00:01:52,160 --> 00:01:57,560
No one is sessions and number two is tokens.

25
00:01:58,010 --> 00:02:04,790
And as of today, the most common way of handling token based authentication is using something named

26
00:02:05,000 --> 00:02:06,950
JSON Web tokens.

27
00:02:07,400 --> 00:02:14,150
Instead of trying to explain with words what a JSON Web token is, let's instead just use them and see

28
00:02:14,150 --> 00:02:17,350
them in action and then I can explain things along the way.

29
00:02:17,930 --> 00:02:24,140
Now, when you want to use JSON Web tokens in a node application, we simply need to go to the JavaScript

30
00:02:24,140 --> 00:02:26,070
grocery store or NPM.

31
00:02:26,810 --> 00:02:30,050
So right now, jump into your text editor or command line.

32
00:02:30,680 --> 00:02:33,290
And if your app is currently running, just press control.

33
00:02:33,290 --> 00:02:37,340
See, because I want to run this command with you, so type this in with me.

34
00:02:37,910 --> 00:02:49,400
NPM install in the name of the package that we're interested in is Jason Webb tokin all lowercase,

35
00:02:49,400 --> 00:02:50,440
all one word.

36
00:02:51,050 --> 00:02:54,530
So that's Jason Webb token.

37
00:02:55,040 --> 00:02:56,390
Go ahead and press enter.

38
00:02:58,160 --> 00:03:02,830
And just so you know that I'm not forcing you to install random obscure packages.

39
00:03:03,170 --> 00:03:10,730
This is the official NPM website and you can see that the JSON Web Tokens package just in the last week

40
00:03:11,000 --> 00:03:15,230
has been downloaded over two point six million times.

41
00:03:15,830 --> 00:03:22,040
So in the world of JavaScript, this is the industry standard way of implementing JSON Web tokens.

42
00:03:22,640 --> 00:03:27,800
OK, back in our command line, now that we've installed that package, let's tell our server to begin

43
00:03:27,800 --> 00:03:28,460
running again.

44
00:03:28,460 --> 00:03:34,850
So NPM run watch and now let's go leverage that package.

45
00:03:35,220 --> 00:03:41,660
So within your controllers folder, I want you to jump into user controller J.S..

46
00:03:42,200 --> 00:03:47,750
OK, now up at the top of this file, let's require in the JSON Web token package.

47
00:03:48,290 --> 00:03:56,810
So I would just say const you can name it anything you want, but for sure I'll name it JWT equals and

48
00:03:56,810 --> 00:04:03,660
then just require in that package of quotes, its name was JSON Web Token.

49
00:04:04,310 --> 00:04:07,970
OK, now let's go actually use this within this file.

50
00:04:07,970 --> 00:04:11,360
Look for your function that is named API log in.

51
00:04:11,810 --> 00:04:13,580
So we set this up in the previous lesson.

52
00:04:13,580 --> 00:04:18,170
For me it's around line number sixty eight, but it's the line that begins with exports.

53
00:04:18,170 --> 00:04:20,540
Dot API log in.

54
00:04:21,200 --> 00:04:22,160
So let's do this.

55
00:04:22,430 --> 00:04:24,320
If the login is successful.

56
00:04:24,320 --> 00:04:29,630
Right, if it's the real correct username and password, we still want to send back a response with

57
00:04:29,630 --> 00:04:30,320
Jason.

58
00:04:30,560 --> 00:04:33,410
But let's just get rid of this message text.

59
00:04:34,130 --> 00:04:36,470
So get rid of the quotes with the text.

60
00:04:36,470 --> 00:04:40,400
So now it's just response JSON and empty parentheses.

61
00:04:40,880 --> 00:04:44,630
So instead, what we want to send as a response is a token.

62
00:04:45,050 --> 00:04:52,370
So this is where we would use the JSON Web token package, let's say JWT and then let's look inside

63
00:04:52,370 --> 00:04:59,690
it for a method named sine parentheses to callsign within the sine parentheses.

64
00:04:59,690 --> 00:05:01,070
We're going to give it three.

65
00:05:01,190 --> 00:05:08,690
Arguments, so just as placeholders, let's say a comma, B, Kamasi, for the first argument, instead

66
00:05:08,690 --> 00:05:13,420
of the A placeholder, let's provide an object so curly brackets.

67
00:05:13,760 --> 00:05:18,330
And this is where we include any data that we want to store in this token.

68
00:05:19,000 --> 00:05:25,940
So previously when we used cookies and sessions, we stored things in session data like the user ID,

69
00:05:26,150 --> 00:05:32,990
the user's username, maybe their avatar in this case with the API, really the only thing we'd need

70
00:05:32,990 --> 00:05:34,900
to store is their user ID.

71
00:05:35,510 --> 00:05:40,730
We don't need their user name or gravitas because we're not going to power a visual user interface.

72
00:05:41,150 --> 00:05:48,830
So we really only need one property, let's say underscore Idy colon and then just give it a value of

73
00:05:48,830 --> 00:05:53,320
lowercase user data, underscore ID.

74
00:05:54,140 --> 00:05:57,220
So this is the only property we need in this object of data.

75
00:05:57,230 --> 00:06:00,310
But the idea is you're free to include whatever you see fit.

76
00:06:00,950 --> 00:06:05,110
OK, for the second argument, instead of this be placeholder.

77
00:06:05,450 --> 00:06:11,570
This is where we include a secret phrase or a secret string of characters that the package will use

78
00:06:11,570 --> 00:06:13,020
when it generates the token.

79
00:06:13,700 --> 00:06:19,190
Now you could just include the string of text right here, but instead I'm going to include it in our

80
00:06:19,190 --> 00:06:20,740
dot envy file.

81
00:06:21,170 --> 00:06:23,960
So right now, do this with me in the root of your project.

82
00:06:23,960 --> 00:06:27,080
I want you to jump in to the DOT N.V. file.

83
00:06:28,520 --> 00:06:36,530
Let's drop down to a new line and we could make up any name we want, but let's call it JWT secret,

84
00:06:37,040 --> 00:06:42,470
all capital letters and then include an equal sign, no spaces in between just the name and then equal

85
00:06:42,470 --> 00:06:42,950
sign.

86
00:06:43,400 --> 00:06:47,210
And now we don't even need quotes, but just go ahead and type in a random phrase.

87
00:06:47,210 --> 00:06:55,100
So I'll say my super secret phrase and then you could even just add in a few random numbers.

88
00:06:55,910 --> 00:07:01,160
You get the idea it doesn't matter what you type here, just as long as it's difficult to guess.

89
00:07:01,520 --> 00:07:03,310
Go ahead and save this file.

90
00:07:03,830 --> 00:07:10,370
And now back in our user controller instead of the B placeholder, let's pull in that environment variable

91
00:07:10,370 --> 00:07:11,300
that we just created.

92
00:07:12,050 --> 00:07:20,990
So that's process DOT, N.V. Dot and we named it all uppercase JWT secret.

93
00:07:21,920 --> 00:07:28,760
OK, for the third and final argument, instead of the C placeholder, this is where we give it an object

94
00:07:28,760 --> 00:07:29,780
of options.

95
00:07:30,380 --> 00:07:37,220
By default, the token that this generates will never expire, which in my opinion maybe isn't the best

96
00:07:37,220 --> 00:07:37,730
idea.

97
00:07:37,970 --> 00:07:40,480
So I would want to set an expiration date.

98
00:07:40,970 --> 00:07:50,540
So in the options object, I would say expires in uppercase II and then Colon quotes and then you can

99
00:07:50,540 --> 00:07:55,250
say thirty m four minutes or thirty four hours.

100
00:07:55,280 --> 00:07:57,320
The point is you can use any number in the letter.

101
00:07:57,320 --> 00:08:04,790
So if you wanted a month you could say 30 D for 30 days or if you wanted a week you could say seventy

102
00:08:04,790 --> 00:08:05,870
for seven days.

103
00:08:06,140 --> 00:08:11,660
You get the idea, let's go ahead and save this and test it out in Postman.

104
00:08:11,990 --> 00:08:19,550
So back in the Postman app, go ahead and send a new post request to slash API slash login.

105
00:08:19,970 --> 00:08:26,060
Make sure that under the body tab you have raw selected and you have a bit of JSON with your correct

106
00:08:26,060 --> 00:08:29,420
username and password also in your headers tab.

107
00:08:29,420 --> 00:08:35,420
Make sure you have content type set to application JSON.

108
00:08:35,960 --> 00:08:36,320
Cool.

109
00:08:36,320 --> 00:08:41,930
Let's go ahead and send this new request and if we scroll down to the bottom, we see that the server

110
00:08:41,930 --> 00:08:44,180
responded with this token.

111
00:08:44,870 --> 00:08:51,740
Now, no matter if it's an iOS, Android, Windows, Mac or Linux app or even just a Web app, it's

112
00:08:51,740 --> 00:08:59,810
up to the application that's leveraging our API to save or store or hold on to this token in some fashion

113
00:09:00,080 --> 00:09:02,600
so that it can use this token again in the future.

114
00:09:02,960 --> 00:09:10,730
Because this token proves to our server that you are the user that just logged in this token authenticate

115
00:09:10,730 --> 00:09:12,310
you or identifies you.

116
00:09:12,860 --> 00:09:18,830
So since we're not actually building another standalone application right now, I just want you to copy

117
00:09:18,830 --> 00:09:21,860
and paste this token somewhere where you can hold on to it.

118
00:09:22,280 --> 00:09:26,150
Actually, I don't know if it's just my computer, but I noticed the weird bug where if I.

119
00:09:26,150 --> 00:09:26,480
Right.

120
00:09:26,480 --> 00:09:29,420
Click on this to copy, it doesn't actually work.

121
00:09:29,840 --> 00:09:35,590
So with it selected, try using your keyboard shortcut of control, see on windows or command, see

122
00:09:35,600 --> 00:09:41,330
on Mac and then we don't need to permanently save it anywhere but just temporarily maybe in your text

123
00:09:41,330 --> 00:09:45,080
editor open a new file or a new window and just paste it in.

124
00:09:45,740 --> 00:09:48,200
Even if you lost this token, it's not a big deal.

125
00:09:48,380 --> 00:09:52,850
You can just send a new request to slash API slash log in.

126
00:09:53,360 --> 00:10:00,560
Anyways, moving on, now that our API is handing out tokens, let's set up a new route that would allow

127
00:10:00,560 --> 00:10:00,950
users.

128
00:10:00,990 --> 00:10:08,640
To create a post from our API, so do this up in the euro or address bar, change the ending portion

129
00:10:08,640 --> 00:10:13,640
of the URL from log in to create Dasch post.

130
00:10:14,220 --> 00:10:14,480
Right.

131
00:10:14,490 --> 00:10:18,450
So now its API slash create post.

132
00:10:19,080 --> 00:10:26,640
Let's also scroll up and make sure you click on the body tab and then have the raw option selected and

133
00:10:26,640 --> 00:10:32,040
instead of a username and password, now we would want to include title and body values.

134
00:10:32,940 --> 00:10:33,660
So let's do this.

135
00:10:33,660 --> 00:10:42,540
Let's change the first property to title and give it a value of my new post through the API.

136
00:10:43,050 --> 00:10:51,900
And then let's change the second property to body and just give it a value of this is the content for

137
00:10:51,900 --> 00:10:56,810
my first post created through the API.

138
00:10:57,410 --> 00:11:01,800
OK, and then in addition to title in body, let's include one more property.

139
00:11:02,190 --> 00:11:08,160
So at the end of this line include a comma dropdown and let's include one more property.

140
00:11:08,160 --> 00:11:10,830
So quotes and let's call it token.

141
00:11:12,090 --> 00:11:18,030
We could name it anything, but that's just what I'm going to name it Colon and then quotes and then

142
00:11:18,030 --> 00:11:20,320
in between the quotes, just paste in your clipboard.

143
00:11:20,610 --> 00:11:22,500
The token should still be in your clipboard.

144
00:11:23,190 --> 00:11:23,550
Cool.

145
00:11:23,790 --> 00:11:29,250
Now, obviously, if we clicked send, this would not work because we have not created this route yet.

146
00:11:29,730 --> 00:11:30,840
So let's go do that.
