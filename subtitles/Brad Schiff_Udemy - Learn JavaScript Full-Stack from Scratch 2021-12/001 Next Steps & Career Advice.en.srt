1
00:00:01,860 --> 00:00:02,880
Hello, everyone.

2
00:00:03,360 --> 00:00:08,470
In this video, we're going to talk about our next steps or where we go from here.

3
00:00:08,970 --> 00:00:14,070
Let's go ahead and take a look at the overview or topics that we're going to cover in this video.

4
00:00:14,850 --> 00:00:17,430
First, we'll talk about front end framework's.

5
00:00:17,970 --> 00:00:23,270
After that, will talk about a technology or paradigm known as Cervalis.

6
00:00:23,730 --> 00:00:27,390
And finally, no, this is not just a cheesy motivational topic.

7
00:00:27,540 --> 00:00:30,180
It's something that I really believe wholeheartedly.

8
00:00:30,460 --> 00:00:32,640
We'll talk about how you are enough.

9
00:00:33,150 --> 00:00:34,680
OK, let's go ahead and get started.

10
00:00:34,710 --> 00:00:39,060
So up at the top, our first topic, front and framework's.

11
00:00:39,510 --> 00:00:45,510
You might have noticed that on our backend or server side, we did indeed use a framework.

12
00:00:45,630 --> 00:00:45,930
Right.

13
00:00:45,930 --> 00:00:54,300
We used Express, however, for our front end or browser based JavaScript, we did not use a framework.

14
00:00:54,690 --> 00:00:56,670
We did this because Xpress.

15
00:00:56,670 --> 00:00:56,910
Right.

16
00:00:56,910 --> 00:01:01,500
The framework we used on the server side is very un opinionated.

17
00:01:01,980 --> 00:01:06,380
But what does that word un opinionated mean within the context of technology?

18
00:01:06,840 --> 00:01:10,710
It means that Express doesn't really force a lot of ideas on us.

19
00:01:11,160 --> 00:01:16,890
It gives us a few tools to work with that can save us a lot of time, but it doesn't tell us exactly

20
00:01:16,890 --> 00:01:19,230
how we should set things up or view the world.

21
00:01:19,470 --> 00:01:20,250
And that's great.

22
00:01:20,340 --> 00:01:22,850
And that's why we used it for our back end.

23
00:01:23,220 --> 00:01:29,700
However, when it comes to the front end, there is no such thing as an unhappen united framework.

24
00:01:30,000 --> 00:01:32,500
They are all incredibly opinionated.

25
00:01:33,000 --> 00:01:34,640
Now, that's not a bad thing.

26
00:01:35,010 --> 00:01:40,580
The complex nature of Web browsers demands an opinionated or creative solution.

27
00:01:40,920 --> 00:01:47,220
It's just that from an educational perspective, that's not something we want to run or rush into because

28
00:01:47,220 --> 00:01:53,700
there's no sense in trying to wrap your head around the opinions and idiosyncrasies of a framework before

29
00:01:53,700 --> 00:01:57,290
you've even had a chance to wrap your head around the Web browser itself.

30
00:01:57,750 --> 00:02:02,760
But the good news is that now that you've worked your way through this course, you have wrap your head

31
00:02:02,760 --> 00:02:03,900
around the Web browser.

32
00:02:04,170 --> 00:02:11,070
And so now it makes perfect sense to take on that extra challenge of understanding and adhering to the

33
00:02:11,070 --> 00:02:14,910
opinions and philosophies of a particular front end framework.

34
00:02:15,450 --> 00:02:20,700
Now, there are a hundred different reasons to learn a front end framework, but I think there are two

35
00:02:20,700 --> 00:02:23,880
reasons in particular that are especially exciting.

36
00:02:24,310 --> 00:02:26,250
So let's talk about those reasons.

37
00:02:26,280 --> 00:02:29,580
Number one is front and routing.

38
00:02:29,940 --> 00:02:30,480
Don't worry.

39
00:02:30,480 --> 00:02:32,430
I will explain what that is in just a moment.

40
00:02:32,430 --> 00:02:37,340
And reason number two is efficient updating of the DOM.

41
00:02:37,830 --> 00:02:40,620
So before I explain what that is, let's start with number one.

42
00:02:40,630 --> 00:02:42,490
So what is front end routing?

43
00:02:43,050 --> 00:02:47,600
Well, to explain this, let's use our app's search feature as an example.

44
00:02:47,910 --> 00:02:51,360
So let's say I search for something like lorem ipsum.

45
00:02:52,730 --> 00:02:59,030
And then maybe I want to click on this, being a dog is fun post now currently if I did that, it would

46
00:02:59,030 --> 00:03:05,060
send me to an entirely different euro and the Web browser would not only have to wait for the servers

47
00:03:05,060 --> 00:03:10,460
response before doing anything, but then even once the browser does receive the response from the server,

48
00:03:10,760 --> 00:03:18,020
our browser has to reload the entire page, which, if we think about it, is not the fastest or most

49
00:03:18,020 --> 00:03:18,830
efficient way.

50
00:03:19,190 --> 00:03:20,060
So picture this.

51
00:03:20,240 --> 00:03:26,840
What if instead, when I clicked on this link, we used browser based JavaScript to send off an asynchronous

52
00:03:26,840 --> 00:03:32,540
request to fetch this data and then as soon as we did fetch the data, we could hide this search overlay

53
00:03:33,260 --> 00:03:39,200
and only update the one div on the page that would need to show that new content for that post.

54
00:03:39,920 --> 00:03:46,250
That way, our Web browser never has to lock up and then re render an entire page and render the entire

55
00:03:46,250 --> 00:03:46,790
dom.

56
00:03:47,240 --> 00:03:53,060
That approach would feel way faster and more responsive and instantaneous for our visitors.

57
00:03:53,450 --> 00:03:57,210
Now we already have all of the skills to make that happen, right?

58
00:03:57,260 --> 00:04:02,540
We know how to manipulate elements on the page with browser based JavaScript and we know how to send

59
00:04:02,540 --> 00:04:05,540
off asynchronous requests with Axios.

60
00:04:05,960 --> 00:04:12,200
But we'd be forgetting about one crucial aspect of Web development, and that is the address bar or

61
00:04:12,200 --> 00:04:12,590
the U.

62
00:04:12,590 --> 00:04:13,940
RL, right.

63
00:04:13,940 --> 00:04:19,730
Because if we used browser based JavaScript to load the content for the link we clicked on and then

64
00:04:19,730 --> 00:04:22,550
just render that one div to display it here.

65
00:04:22,910 --> 00:04:24,960
Well, the address bar would not update.

66
00:04:25,610 --> 00:04:29,720
So even though I clicked on being a dog is fun, I wouldn't have a U.

67
00:04:29,720 --> 00:04:34,020
RL that I could easily share with friends and family or on social media.

68
00:04:34,340 --> 00:04:37,520
Now, yes, I'm aware the year is not nineteen ninety five.

69
00:04:37,760 --> 00:04:39,950
We can have our cake and eat it too.

70
00:04:40,310 --> 00:04:47,210
We could implement front end JavaScript that micromanages or babysits the euro and then we could also

71
00:04:47,210 --> 00:04:51,380
write JavaScript to listen to back button clicks and forward button clicks.

72
00:04:51,860 --> 00:04:57,030
And our JavaScript could update the user interface portion depending on the current you are out.

73
00:04:57,320 --> 00:04:59,840
All of that is possible with JavaScript.

74
00:04:59,990 --> 00:05:03,710
And no, we would not need a front end framework to do that.

75
00:05:04,130 --> 00:05:09,500
We just need to learn a little bit about the pop state event on the global window object and also the

76
00:05:09,500 --> 00:05:12,290
browser's history push state method.

77
00:05:12,800 --> 00:05:19,790
However, setting up the code to power that in a way that is organized and not repetitive and easy to

78
00:05:19,790 --> 00:05:20,600
dig through the code.

79
00:05:20,600 --> 00:05:23,660
A year later after you set it up and have it still makes sense to you.

80
00:05:24,110 --> 00:05:26,750
It's actually a bit trickier than you might think.

81
00:05:27,170 --> 00:05:33,440
But if we use a front end framework, client side routing like that becomes a piece of cake.

82
00:05:33,830 --> 00:05:40,250
All of the big front end frameworks either come bundled with a router or they have a community supported

83
00:05:40,250 --> 00:05:43,670
or sort of standard router plug in that is bulletproof.

84
00:05:44,180 --> 00:05:45,350
So that's the big reason.

85
00:05:45,350 --> 00:05:51,650
Number one, to learn a front end framework, you can implement simple organized client side routing.

86
00:05:51,960 --> 00:05:53,450
OK, that was reason number one.

87
00:05:53,450 --> 00:05:59,540
Let's talk about reason number two to learn a front end framework which is efficient updating of the

88
00:05:59,540 --> 00:05:59,960
domain.

89
00:06:00,320 --> 00:06:06,440
So you can imagine that as your applications become more complex, you're going to need to update more

90
00:06:06,440 --> 00:06:09,200
and more elements on the screen with data changes.

91
00:06:09,560 --> 00:06:15,290
Now, we are familiar with selecting an element with browser based JavaScript and then manipulating

92
00:06:15,290 --> 00:06:16,880
its content on the fly.

93
00:06:17,300 --> 00:06:24,350
But micromanaging or babysitting 20 different elements on the page can become very tedious very quickly.

94
00:06:24,740 --> 00:06:31,370
So instead, if you were using a front end framework, you can just spell out your whole HTML template

95
00:06:31,370 --> 00:06:37,700
or user interface in one convenient template or view, and then you can have that template be powered

96
00:06:37,700 --> 00:06:39,440
by raw data and values.

97
00:06:39,620 --> 00:06:45,380
And then as those data and values get updated, your template is just automatically re rendered.

98
00:06:45,980 --> 00:06:50,240
Now, at first you might say, Brad, why do we need a front end framework to make that happen?

99
00:06:50,660 --> 00:06:56,870
Couldn't we just write a big giant back tick template, literal template and then re output it or render

100
00:06:56,870 --> 00:06:58,490
it every time our data changes?

101
00:06:58,940 --> 00:07:03,230
Well, yes, you absolutely could do that, but that would be terrible for performance.

102
00:07:03,860 --> 00:07:09,650
Any time we update an element in the DOM and force the browser to re render or repaint it, that is

103
00:07:09,650 --> 00:07:15,830
a fairly expensive operation from a performance standpoint, meaning we want to update as little as

104
00:07:15,830 --> 00:07:19,670
possible or only the content that we truly need to update.

105
00:07:19,880 --> 00:07:25,220
We don't want to just constantly be re rendering our entire template just because one little piece of

106
00:07:25,220 --> 00:07:26,570
data somewhere updated.

107
00:07:26,990 --> 00:07:29,900
But that's the beauty of front end frameworks.

108
00:07:30,170 --> 00:07:35,780
They all have brilliant rendering engines that take what your updated template would look like with

109
00:07:35,780 --> 00:07:42,710
the newest data and then compare that against what the browser currently has on screen and then only

110
00:07:42,710 --> 00:07:46,730
changes the specific elements that would actually be different.

111
00:07:47,390 --> 00:07:52,130
This gives you the best of both worlds you no longer need to select each into.

112
00:07:52,140 --> 00:07:58,470
Visual element and babysit its value, you can just have one declarative template and you're also getting

113
00:07:58,470 --> 00:08:03,750
lightning fast performance because the browser doesn't have to render your entire template.

114
00:08:04,350 --> 00:08:08,820
So in my opinion, those are the two biggest reasons to begin learning a front end framework.

115
00:08:09,270 --> 00:08:13,170
Now, if you're thinking, Brad, these features sound amazing, why didn't we use a front end framework

116
00:08:13,170 --> 00:08:13,980
in this course?

117
00:08:14,400 --> 00:08:19,430
Well, that takes us back to the whole topic of front end frameworks being very opinionated.

118
00:08:19,980 --> 00:08:24,150
They each have their own unique way of doing things and their little idiosyncrasies.

119
00:08:24,450 --> 00:08:30,990
And I feel that to cover a front end framework properly, it really deserves its own course dedicated

120
00:08:30,990 --> 00:08:31,960
to that topic.

121
00:08:32,430 --> 00:08:38,430
I didn't want this course to become dominated by the opinions and philosophies of one particular front

122
00:08:38,430 --> 00:08:39,210
end framework.

123
00:08:39,630 --> 00:08:44,310
But before we move on to the next topic in this video, I just want to let you know that learning a

124
00:08:44,310 --> 00:08:49,130
front end framework should definitely should absolutely be your next focus.

125
00:08:49,500 --> 00:08:56,940
Now, as of today, there are three big popular frameworks that you can choose from react, view and

126
00:08:56,940 --> 00:08:57,560
angular.

127
00:08:58,050 --> 00:09:01,410
I'll let you perform your own research and make your own choice.

128
00:09:01,740 --> 00:09:08,400
But if I had to give my own totally subjective and personal opinion, I would recommend react.

129
00:09:09,120 --> 00:09:15,240
OK, now let's move on and talk about the next topic in this video, which is Cervalis.

130
00:09:15,780 --> 00:09:23,100
Before we even get into what the word Serverless means, I need to say that it is a big topic so big

131
00:09:23,100 --> 00:09:28,290
that to cover it properly, it definitely deserves its own dedicated, devoted course.

132
00:09:28,800 --> 00:09:34,800
Having said that, Cervalis is so hot right now that I feel like I'd be doing you a disservice if we

133
00:09:34,800 --> 00:09:36,580
didn't at least briefly discuss it.

134
00:09:37,110 --> 00:09:43,470
I think the best introduction to the Serverless paradigm within the context of JavaScript and Web development

135
00:09:43,800 --> 00:09:47,340
is this website titled Jamm Stack Dawg.

136
00:09:47,910 --> 00:09:51,480
Let's begin by breaking down the letters of the JAM acronym.

137
00:09:51,840 --> 00:09:59,260
So it stands for JavaScript APIs and markup markup just means HTML.

138
00:09:59,820 --> 00:10:05,520
I encourage you to read through this website at some point, but for now, let me explain Cervalis by

139
00:10:05,520 --> 00:10:14,880
doing this so I have a file on my desktop named Home HTML and I'm literally just going to drag this

140
00:10:14,880 --> 00:10:17,880
file on top of Mozilla Firefox.

141
00:10:19,150 --> 00:10:25,800
So clearly, this is not being powered by a server I'm just viewing in HTML file in my Web browser,

142
00:10:26,320 --> 00:10:30,870
so it's got a heading, a paragraph, a link you should read about my favorite colors.

143
00:10:30,880 --> 00:10:37,090
And if I click on that link, it takes me to a new HTML file, my favorite colors.

144
00:10:37,090 --> 00:10:41,130
I like blue, green and purple and then a link back to the home page.

145
00:10:41,500 --> 00:10:43,660
So really, that's all the website is, right?

146
00:10:43,660 --> 00:10:46,030
It's connected HTML pages.

147
00:10:46,270 --> 00:10:47,830
You can take a look at those two files.

148
00:10:47,830 --> 00:10:52,450
Here they are on my text editor writes, Just adding a level one paragraph aliments.

149
00:10:53,170 --> 00:10:58,300
Now, at first glance, we might think that Web pages like this can't do anything dynamic, right?

150
00:10:58,300 --> 00:11:01,120
Because they're not being served up by a Web server.

151
00:11:01,480 --> 00:11:05,340
They can run dynamic code and serve up new, interesting things.

152
00:11:05,650 --> 00:11:09,110
This is just a static HTML file.

153
00:11:09,730 --> 00:11:17,590
However, let's not forget about the power of JavaScript and APIs within this static HTML file.

154
00:11:17,590 --> 00:11:24,550
I could very easily include a bit of browser based JavaScript to send off an asynchronous request to

155
00:11:24,550 --> 00:11:31,720
an API to fetch a bit of dynamic data or maybe send in a username and password to get a Jason Web token.

156
00:11:31,990 --> 00:11:36,880
And then once we have a token, we know that we could connect to an API and create a post or delete

157
00:11:36,880 --> 00:11:38,210
a post or do anything.

158
00:11:38,620 --> 00:11:44,350
So if you really think about it, even though we're just viewing a static HTML file, we're really not

159
00:11:44,350 --> 00:11:44,980
limited.

160
00:11:45,490 --> 00:11:47,430
Maybe we don't need a server at all.

161
00:11:47,740 --> 00:11:49,930
Hence the name Cervalis.

162
00:11:50,530 --> 00:11:55,300
However, what if we don't just want to leverage other people's APIs?

163
00:11:55,630 --> 00:11:58,840
What if we want to create our own API?

164
00:11:59,380 --> 00:12:06,400
Because, yes, we don't need a server to run static HTML and JavaScript requests to an API, but we

165
00:12:06,430 --> 00:12:11,500
absolutely do need a server to power, said API write.

166
00:12:11,500 --> 00:12:17,620
The server is our trusted safe environment that a malicious user cannot tamper with, and it's where

167
00:12:17,620 --> 00:12:22,270
we would check the incoming username and password to determine if they are valid or not.

168
00:12:22,660 --> 00:12:25,300
So wouldn't we still need a server after all?

169
00:12:25,720 --> 00:12:27,820
Well, this is where we get into semantics.

170
00:12:28,030 --> 00:12:31,660
It turns out we don't really need an entire server.

171
00:12:32,110 --> 00:12:38,480
All that we really need is a safe, trusted environment where we can run individual functions.

172
00:12:38,920 --> 00:12:41,870
Let me show you a real world example of what I'm talking about.

173
00:12:42,280 --> 00:12:47,440
So back in this browser, I want to show you a service named Net Lafi.

174
00:12:47,950 --> 00:12:53,500
I'm not affiliated with Net Lafi in any way, shape or form, although I'd like to be in the future

175
00:12:53,860 --> 00:12:54,340
anyways.

176
00:12:54,340 --> 00:12:56,460
I just think they are an amazing service.

177
00:12:56,860 --> 00:12:58,340
So what is net lafi?

178
00:12:58,780 --> 00:13:07,180
Well, you send them your static HTML and KSN JavaScript files and they host it for you, but it goes

179
00:13:07,180 --> 00:13:07,910
beyond that.

180
00:13:08,320 --> 00:13:13,960
Remember when I said that we don't need a server, but we do need a safe, trusted environment where

181
00:13:13,960 --> 00:13:16,120
we can run individual functions?

182
00:13:16,480 --> 00:13:23,230
Well, Net Lafi offers that even on their completely free plan, they offer this so net.

183
00:13:23,230 --> 00:13:29,500
Lafi makes it really easy to set up what is commonly referred to as a serverless function or a cloud

184
00:13:29,500 --> 00:13:36,910
function, essentially, in addition to the static HTML, CSC and JavaScript files that you send a net

185
00:13:36,910 --> 00:13:44,110
lafi, you also send them individual functions and these functions would be written in JavaScript for

186
00:13:44,110 --> 00:13:46,090
the node environment.

187
00:13:46,510 --> 00:13:49,000
Write a server side environment net.

188
00:13:49,000 --> 00:13:55,090
Lafi will handle all of the configuration, but essentially they are going to run your node server side

189
00:13:55,090 --> 00:14:02,560
functions on Amazon Web Services hardware, which believe me, is a safe, trusted environment that

190
00:14:02,560 --> 00:14:05,290
malicious users cannot tamper with anyways.

191
00:14:05,290 --> 00:14:06,940
Then Net Lafi gives you a U.

192
00:14:06,940 --> 00:14:13,900
RL that points towards your function and that you URL is what you can use to make your API requests

193
00:14:13,930 --> 00:14:19,540
within your front end javascript so your node functions would do the same type of things we were doing

194
00:14:19,540 --> 00:14:20,350
within our apps.

195
00:14:20,350 --> 00:14:22,360
Controller functions, right?

196
00:14:22,360 --> 00:14:27,220
Talking to a database, performing validation, responding back with a bit of JSON.

197
00:14:27,550 --> 00:14:32,830
The only difference is you're no longer building a holistic or monolithic app or server.

198
00:14:33,130 --> 00:14:36,810
Each one of your cloud functions needs to be able to stand on its own.

199
00:14:37,270 --> 00:14:42,760
Which brings us to the entire advantage in point of adopting the Serverless paradigm in the first place.

200
00:14:43,210 --> 00:14:50,530
With the Serverless paradigm, our applications can scale infinitely and effortlessly because we don't

201
00:14:50,530 --> 00:14:53,260
need to worry about our apps server crashing.

202
00:14:53,620 --> 00:14:58,990
We no longer think in terms of servers, we think in terms of individual functions.

203
00:14:59,200 --> 00:15:03,820
And our functions are running on the hardware from the richest company in the world.

204
00:15:03,820 --> 00:15:04,180
Right.

205
00:15:04,210 --> 00:15:05,890
Amazon Web Services.

206
00:15:06,250 --> 00:15:09,070
They can handle infinite amounts of traffic.

207
00:15:09,370 --> 00:15:16,180
However, I don't want you to think that the serverless paradigm is inherently tied to Amazon Web Services.

208
00:15:16,630 --> 00:15:18,480
That's just the solution that Netflix.

209
00:15:18,730 --> 00:15:28,900
Uses, there's also Microsoft's Azure functions, Google offers Google cloud functions and IBM has IBM

210
00:15:28,900 --> 00:15:30,910
cloud functions, you get the idea.

211
00:15:31,420 --> 00:15:38,770
Anyways, that wraps up our big picture, super oversimplified explanation of the serverless paradigm.

212
00:15:39,370 --> 00:15:45,610
If you are even one percent interested in Cervalis, I encourage you to read up on the Jam Stacked Dog

213
00:15:45,610 --> 00:15:52,450
website and also definitely sign up for a free net account to play around and experiment with.

214
00:15:52,840 --> 00:15:58,990
Now, before we move on to our next topic, I do want to stress that you don't need to adopt the Serverless

215
00:15:58,990 --> 00:15:59,640
paradigm.

216
00:15:59,980 --> 00:16:02,800
It's not always the right choice for every project.

217
00:16:03,070 --> 00:16:10,300
Even though Serverless is very hot right now, there's also a beloved framework named next J.S..

218
00:16:10,840 --> 00:16:13,150
I won't even get into what next is.

219
00:16:13,300 --> 00:16:20,890
But one of the features that it advertises and is proud of is its server side rendering and its thanks

220
00:16:20,890 --> 00:16:27,580
to its server side rendering that it can claim things like exceptional performance, search engine optimization

221
00:16:27,580 --> 00:16:29,150
benefits and much more.

222
00:16:29,620 --> 00:16:35,680
My point here is that sometimes the Internet can't figure out what it thinks is the next biggest, hottest

223
00:16:35,680 --> 00:16:36,460
technology.

224
00:16:36,910 --> 00:16:41,720
There is no one right or best way to build a website or web application.

225
00:16:42,160 --> 00:16:44,080
Ultimately, the choice is up to you.

226
00:16:44,470 --> 00:16:49,420
At the very least, Serverless is a very interesting trend that's worth understanding.

227
00:16:49,810 --> 00:16:56,440
And being able to say on your resume that you're familiar with both monolithic servers and the serverless

228
00:16:56,440 --> 00:16:58,960
paradigm definitely will not hurt.

229
00:16:59,590 --> 00:17:06,070
Now, speaking of resumes, that brings us to the final topic in this video, which is just a bit of

230
00:17:06,070 --> 00:17:14,290
career advice, and that is that you are enough as of today, as of this very minute, you are enough.

231
00:17:14,470 --> 00:17:17,470
I know it can be very tempting to think I'm not ready.

232
00:17:17,620 --> 00:17:19,540
I need to learn a front end framework.

233
00:17:19,540 --> 00:17:21,130
I need to learn about Serverless.

234
00:17:21,310 --> 00:17:26,050
There's five hundred other billion technologies I need to learn about, and I'm not going to apply for

235
00:17:26,050 --> 00:17:27,850
any jobs until I'm ready.

236
00:17:28,240 --> 00:17:33,880
Well, even though it's totally normal and natural and tempting to think that way, I urge you not to

237
00:17:33,880 --> 00:17:34,350
do that.

238
00:17:34,870 --> 00:17:38,520
The truth is, none of us are ever truly ready.

239
00:17:39,010 --> 00:17:43,270
Technology changes at such a fast rate that we're all always learning.

240
00:17:43,720 --> 00:17:49,000
Now, I've been on the hiring side of developer interviews before, and so I just want to leave you

241
00:17:49,000 --> 00:17:50,170
with a single story.

242
00:17:50,680 --> 00:17:55,990
I once had a student who had never had a job in the tech industry complaining to me that they couldn't

243
00:17:55,990 --> 00:18:01,900
get a job because they didn't know super advanced topics A, B, C and X, Y and Z.

244
00:18:02,350 --> 00:18:08,290
And I told this student that I really don't think you need to know all of that and that I personally,

245
00:18:08,290 --> 00:18:14,290
in my real life, knew senior developers and chief technology officers who didn't even know all of those

246
00:18:14,290 --> 00:18:14,800
things.

247
00:18:15,280 --> 00:18:18,340
And this student said to me, No, Brad, you're wrong.

248
00:18:18,340 --> 00:18:21,850
I don't know topics A, B and C, it is hopeless.

249
00:18:21,850 --> 00:18:22,930
I can't get a job.

250
00:18:23,560 --> 00:18:29,560
The moral of the story here is that I think when we have a goal that seems difficult, we have a tendency

251
00:18:29,560 --> 00:18:32,770
to make it seem impossibly difficult.

252
00:18:33,130 --> 00:18:33,370
Right.

253
00:18:33,370 --> 00:18:34,720
We blow it out of proportion.

254
00:18:35,200 --> 00:18:41,380
Now, don't get me wrong, landing your first tech job can be very, very challenging, but you absolutely

255
00:18:41,380 --> 00:18:45,100
do not need to be an expert in every programming topic.

256
00:18:45,550 --> 00:18:52,630
There are all sorts of jobs, beginner focused jobs, junior developer jobs, mid level roles.

257
00:18:53,020 --> 00:18:58,180
And to tell you the truth, when I was on the hiring side of dev interviews, the biggest qualities

258
00:18:58,180 --> 00:19:04,720
that I looked for were a positive attitude, open mindedness in the ability to cooperate with others.

259
00:19:05,110 --> 00:19:05,300
Right.

260
00:19:05,380 --> 00:19:08,230
Because those are the sort of things that you can't really teach.

261
00:19:08,380 --> 00:19:10,660
Someone either has those qualities or they don't.

262
00:19:11,270 --> 00:19:18,130
So the biggest thing I want you to walk away from this course with is an unshakable confidence that

263
00:19:18,130 --> 00:19:19,000
you are enough.

264
00:19:19,220 --> 00:19:25,780
As of today, as of this moment, you are enough, even if you only absorbed twenty percent of the material

265
00:19:25,780 --> 00:19:26,620
in this course.

266
00:19:26,980 --> 00:19:33,190
If you take that and you put your willingness to learn on full display, I'm very confident there's

267
00:19:33,190 --> 00:19:35,440
a job out there with your name on it.

268
00:19:35,950 --> 00:19:43,360
And that's going to bring this video and this course to a close from the bottom of my heart.

269
00:19:43,360 --> 00:19:46,720
I want to thank you for coming along on this journey with me.

270
00:19:47,140 --> 00:19:49,870
I wish you nothing but the absolute best.

271
00:19:50,230 --> 00:19:52,600
And until next time, take care.
