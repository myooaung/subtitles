1
00:00:01,760 --> 00:00:08,660
Hello, everyone, and welcome back to the 10 days of JavaScript, here we are in day number six.

2
00:00:09,050 --> 00:00:14,220
And in this lesson, we are going to learn about higher order functions.

3
00:00:14,810 --> 00:00:16,190
Let's begin with the question.

4
00:00:16,460 --> 00:00:19,300
What in the world is a higher order function?

5
00:00:19,910 --> 00:00:28,340
So the boring technical definition is a higher order function is a function that either accepts a function

6
00:00:28,340 --> 00:00:33,650
as an argument or a function that returns a function as a result.

7
00:00:34,640 --> 00:00:40,550
OK, so that wasn't helpful at all, because if you learned the way that I learn technical answers like

8
00:00:40,550 --> 00:00:46,460
that, do nothing for me, I need to see examples in order for me to actually learn anything.

9
00:00:46,670 --> 00:00:49,890
So this lesson is going to be broken up into three parts.

10
00:00:50,360 --> 00:00:55,310
First, we will look at an example of a function that accepts a function as an argument.

11
00:00:55,850 --> 00:01:03,040
After that, we will create our own brand new higher order function that returns a function as a result.

12
00:01:03,380 --> 00:01:09,290
And finally, at the end of the video, we will learn about some of the most useful, higher order functions

13
00:01:09,620 --> 00:01:16,040
that are part of the core JavaScript language that you would leverage in the real world on a daily basis.

14
00:01:16,610 --> 00:01:23,800
OK, so let's begin up at the top and look at a function that accepts another function as an argument.

15
00:01:24,290 --> 00:01:28,640
So believe it or not, we've actually already seen a function that does this.

16
00:01:29,090 --> 00:01:30,370
So type this out with me.

17
00:01:30,370 --> 00:01:40,400
If we say document dot, add event listener, and this is a function or method that belongs to the document

18
00:01:40,400 --> 00:01:41,000
object.

19
00:01:41,000 --> 00:01:44,870
So we include parentheses to run or call the function.

20
00:01:45,320 --> 00:01:47,910
And you might remember that it takes two arguments.

21
00:01:48,260 --> 00:01:52,240
So the first argument is which event you want to be on the lookout for.

22
00:01:52,580 --> 00:01:57,950
So we could say quotes, click and then a comma to include another argument.

23
00:01:57,950 --> 00:02:04,820
And remember that the second argument is supposed to be a function that you want to run when this event

24
00:02:04,820 --> 00:02:05,510
happens.

25
00:02:06,110 --> 00:02:13,250
So we could say our amazing function and then down on a new line, we could create a function with this

26
00:02:13,250 --> 00:02:14,170
matching name.

27
00:02:14,180 --> 00:02:23,510
So function our amazing function, parentheses, curly brackets, and maybe we just alert a pop up message

28
00:02:23,510 --> 00:02:26,240
that says thank you for clicking.

29
00:02:27,080 --> 00:02:32,140
OK, now if I check out the preview area of this and click down here, we see the pop up.

30
00:02:32,150 --> 00:02:33,110
Thank you for clicking.

31
00:02:33,740 --> 00:02:34,760
We've done this before.

32
00:02:34,760 --> 00:02:35,840
It's not impressive.

33
00:02:36,050 --> 00:02:40,730
The reason I'm showing you this is I want to point out what a higher order function is.

34
00:02:41,000 --> 00:02:48,260
We would say that this ad event, listener method or function is a higher order function because the

35
00:02:48,260 --> 00:02:52,340
second argument that it expects to receive is a function.

36
00:02:52,850 --> 00:02:58,040
If you've never worked with another programming language before, you might not see what's so special

37
00:02:58,040 --> 00:02:59,660
or noteworthy about this.

38
00:02:59,970 --> 00:03:06,860
However, in certain programming languages, you are not allowed to pass a function as an argument.

39
00:03:07,250 --> 00:03:12,590
You can usually only pass simple values like a string of text or a number.

40
00:03:13,040 --> 00:03:20,630
So JavaScript is special in the sense that functions are not considered weird or special entities with

41
00:03:20,630 --> 00:03:25,010
their own unique set of rules of where and how they can be used.

42
00:03:25,430 --> 00:03:29,810
In JavaScript, a function is just like any other entity or value.

43
00:03:30,140 --> 00:03:34,010
To explain what I mean by that, let's jump in to our next example.

44
00:03:34,340 --> 00:03:36,830
But really quick back to the definition.

45
00:03:37,220 --> 00:03:37,470
Right?

46
00:03:37,490 --> 00:03:46,040
So a higher order function is a function that accepts a function as an argument and or returns a function

47
00:03:46,040 --> 00:03:47,020
as its result.

48
00:03:47,720 --> 00:03:51,170
So we just saw an example of the first part of that definition.

49
00:03:51,470 --> 00:03:51,690
Right.

50
00:03:51,710 --> 00:03:55,670
We saw a function that accepts a function as an argument.

51
00:03:56,000 --> 00:04:01,700
And now the last part of the definition, a function that returns a function as a result.

52
00:04:02,210 --> 00:04:04,640
That is a bit trickier to understand.

53
00:04:05,030 --> 00:04:09,110
So right now, I'm going to get rid of this code and let's start fresh.

54
00:04:09,110 --> 00:04:11,960
And I want you to type this out with me first.

55
00:04:11,960 --> 00:04:16,820
Let's begin with a simple function that is not a higher order function.

56
00:04:17,330 --> 00:04:24,410
So let's create a function and name it double mi parentheses, curly brackets, and imagine that we

57
00:04:24,410 --> 00:04:29,210
want this function to double whatever number you give it and then return that value.

58
00:04:29,600 --> 00:04:34,880
So within its parentheses we can include a parameter and then inside the body of the function we could

59
00:04:34,880 --> 00:04:42,380
just say return that parameter times to OK and then below this function we could test it out.

60
00:04:42,680 --> 00:04:46,310
So maybe we could write a sample number out to the Web page down here.

61
00:04:46,310 --> 00:04:49,190
We could say document dot.

62
00:04:49,310 --> 00:04:49,850
Right.

63
00:04:50,990 --> 00:04:53,810
And then let's say double me 20.

64
00:04:55,620 --> 00:04:58,650
Cool, so down the private area, we see that it worked properly.

65
00:04:58,680 --> 00:04:59,630
Right, we see 40.

66
00:05:00,030 --> 00:05:05,760
So the point here is that this double meat function is not a higher order function.

67
00:05:06,210 --> 00:05:09,450
Clearly, it does not accept a function as an argument.

68
00:05:09,630 --> 00:05:14,660
We expect it to receive a number and it also does not return a function.

69
00:05:14,670 --> 00:05:14,890
Right.

70
00:05:15,000 --> 00:05:16,860
It just returns a simple number.

71
00:05:17,220 --> 00:05:22,620
Now, if you're like me, you might be scratching your head and wondering when would it ever be useful

72
00:05:23,040 --> 00:05:26,010
for a function to return a function?

73
00:05:26,640 --> 00:05:28,170
Well, let me give you an example.

74
00:05:28,920 --> 00:05:34,590
So let's imagine that we also wanted a function named Triple Mi and quadruple MI.

75
00:05:35,570 --> 00:05:41,930
So we could just copy and paste our double function, right, and change the name to Triple MI and then

76
00:05:41,930 --> 00:05:49,730
adjust this to multiply by three and then we could paste it again and name this one quadruple mi and

77
00:05:49,730 --> 00:05:52,240
change the multiplier to for you get the idea.

78
00:05:52,610 --> 00:05:55,070
But this code is getting repetitive.

79
00:05:55,550 --> 00:06:00,210
Literally, the only thing that's changing is the number that we are multiplying by.

80
00:06:00,710 --> 00:06:08,690
So just like each one of these functions returns or generates a value, what we can do is create a new

81
00:06:08,690 --> 00:06:14,270
function that generates or returns one of these multiplier functions.

82
00:06:15,050 --> 00:06:18,860
Let me show you what I mean, because it's really confusing until you see it in action.

83
00:06:19,220 --> 00:06:24,890
So I'm going to get rid of the triple and quadruple my functions and let's create a brand new function.

84
00:06:25,340 --> 00:06:33,050
The name doesn't matter, but I'm going to name it, create multiplier parentheses, curly brackets

85
00:06:33,740 --> 00:06:34,760
in these parentheses.

86
00:06:34,760 --> 00:06:35,960
Let's give it a parameter.

87
00:06:36,470 --> 00:06:39,360
I'm going to say multiplier, OK?

88
00:06:39,440 --> 00:06:48,080
And then in the body of this function, instead of returning a number, we can literally return another

89
00:06:48,080 --> 00:06:51,400
function, function, parentheses, curly brackets.

90
00:06:52,040 --> 00:06:57,560
And now let's just pretend that this function is the double main function, but let's make it flexible.

91
00:06:58,010 --> 00:06:58,310
Right.

92
00:06:58,330 --> 00:07:01,880
So within its parentheses, we could include X as a parameter.

93
00:07:02,150 --> 00:07:02,420
Right.

94
00:07:02,480 --> 00:07:07,040
This would represent whichever number is getting doubled or tripled or quadrupled.

95
00:07:08,180 --> 00:07:15,350
And then in the body of this function, we would just return that number times and then this is where

96
00:07:15,350 --> 00:07:16,400
we make it flexible.

97
00:07:16,640 --> 00:07:23,720
So instead of doubling it or tripling it or quadrupling it, let's just pull in this parameter, the

98
00:07:23,720 --> 00:07:25,050
multiplier parameter.

99
00:07:26,690 --> 00:07:30,200
Now, don't worry, I do not expect this to make sense yet.

100
00:07:30,920 --> 00:07:33,980
OK, now, at this point, we can get rid of our double function.

101
00:07:35,180 --> 00:07:36,170
Now check this out.

102
00:07:36,380 --> 00:07:40,550
This is where it will start to make a little bit of sense down here.

103
00:07:40,550 --> 00:07:50,240
We can say let double me equal and then we can just use this create multiplier function to create our

104
00:07:50,240 --> 00:07:54,290
Doublemint function so we can say create multiplier.

105
00:07:55,630 --> 00:08:03,580
To right, and then we could try to get we could say, let triple me equal, create multiplier three

106
00:08:04,300 --> 00:08:11,680
and then let quadruple me equal, create multiplier for.

107
00:08:12,100 --> 00:08:18,850
OK, now before we actually try to use these new double, triple, quadruple functions, let's take

108
00:08:18,850 --> 00:08:25,510
a minute to understand what's actually going on here, because there are two really interesting and

109
00:08:25,510 --> 00:08:28,400
potentially confusing things taking place here.

110
00:08:28,840 --> 00:08:37,150
So first, our create multiplier function is considered a higher order function because instead of just

111
00:08:37,150 --> 00:08:43,070
returning a simple string of text or a number or an array, it's returning a function.

112
00:08:43,600 --> 00:08:49,930
Now, that may not seem very special or interesting, but it's noteworthy because in other programming

113
00:08:49,930 --> 00:08:58,000
languages, functions are considered special entities with their own weird or unique set of rules governing

114
00:08:58,000 --> 00:09:02,050
when and where they can be used in other programming languages.

115
00:09:02,050 --> 00:09:07,540
We might only be allowed to return a simple number or string of text within a function right here.

116
00:09:07,900 --> 00:09:16,960
But in JavaScript, a function is an entity just like any other value, which also means that not only

117
00:09:16,960 --> 00:09:23,830
can we return a function within a function, but we can also assign a function to a variable like we

118
00:09:23,830 --> 00:09:24,770
see down here.

119
00:09:25,330 --> 00:09:30,610
So just like in previous lessons and you do not need to type out this part, just like in previous lessons,

120
00:09:30,610 --> 00:09:35,520
how we would set Let Strawbery Count Equal 20.

121
00:09:36,010 --> 00:09:44,230
So just like in the past where we would set a variable to equal a number or a string of text or an array.

122
00:09:47,350 --> 00:09:54,220
Well, in JavaScript, we can set a variable to equal a function, and that's exactly what's going on

123
00:09:54,220 --> 00:09:54,640
here.

124
00:09:55,060 --> 00:10:01,930
Now, again, this might not seem super interesting, but it is because we cannot necessarily do this

125
00:10:01,930 --> 00:10:03,900
in other programming languages.

126
00:10:04,300 --> 00:10:11,560
So the point here is that JavaScript is special in the sense that functions are considered first class

127
00:10:11,560 --> 00:10:13,210
citizens or entities.

128
00:10:13,780 --> 00:10:16,060
So we can pass them around as arguments.

129
00:10:16,270 --> 00:10:21,670
We can return them inside of a function and we can even assign them to a variable.

130
00:10:22,150 --> 00:10:28,640
And believe it or not, but this makes JavaScript a very flexible and powerful language.

131
00:10:29,080 --> 00:10:35,980
OK, now, just to prove to ourselves that this code works, let's test out these double Metropol mean

132
00:10:35,980 --> 00:10:37,420
quadruple MI functions.

133
00:10:37,900 --> 00:10:42,270
So let's output a sample value down into the preview area down here.

134
00:10:42,670 --> 00:10:47,410
So maybe below our code we can say document dot.

135
00:10:47,680 --> 00:10:48,430
Right.

136
00:10:49,180 --> 00:10:55,570
And then let's try doubling the number 10 so we can call one of these functions just like we would any

137
00:10:55,570 --> 00:10:56,350
other function.

138
00:10:56,620 --> 00:11:02,890
We just type out its name and then a set of parentheses to actually call the function and then in the

139
00:11:02,890 --> 00:11:04,510
parentheses, just give it an argument.

140
00:11:04,660 --> 00:11:07,090
So 10, we see that it gets doubled.

141
00:11:07,640 --> 00:11:09,960
We could try tripling the number five.

142
00:11:09,970 --> 00:11:19,070
So Triple MI five, it helps if I spelled triple correctly, but there we see 15 and then we could try

143
00:11:19,070 --> 00:11:20,650
to quadruple MI really quick.

144
00:11:20,650 --> 00:11:23,020
So quadruple mi.

145
00:11:25,080 --> 00:11:25,600
Awesome.

146
00:11:25,650 --> 00:11:31,040
There we see 20, if you're still a little bit confused as to how this is working, we can take double

147
00:11:31,050 --> 00:11:32,030
me as an example.

148
00:11:32,370 --> 00:11:36,420
So we are creating a variable and saying let double me equal.

149
00:11:36,810 --> 00:11:40,140
Whatever this create multiplier function returns.

150
00:11:40,620 --> 00:11:44,680
And we know that that function returns a function.

151
00:11:45,150 --> 00:11:51,870
So then literally the dummy variable is going to equal this function that gets returned here and then

152
00:11:51,870 --> 00:11:54,240
we can call it just like any other function.

153
00:11:54,840 --> 00:11:55,380
All right.

154
00:11:55,380 --> 00:12:02,160
So now that we've covered both halves of the definition of a higher order function, let's move on to

155
00:12:02,160 --> 00:12:04,820
the third and final part of this lesson.

156
00:12:05,280 --> 00:12:07,880
So I'm going to erase everything we have so far.

157
00:12:08,340 --> 00:12:14,760
We begin this lesson by looking at an example of a higher order function that the Web browser environment

158
00:12:14,760 --> 00:12:15,480
offers.

159
00:12:15,900 --> 00:12:20,460
And then in the second part of this lesson, we created our own functions.

160
00:12:21,160 --> 00:12:27,480
OK, and now in this third and final part, I want to show you a few higher order functions that are

161
00:12:27,480 --> 00:12:30,900
part of the core JavaScript language itself.

162
00:12:31,500 --> 00:12:38,100
And actually some of the most useful ones that you would run into on a daily basis all have to do with

163
00:12:38,100 --> 00:12:39,070
arrays.

164
00:12:39,660 --> 00:12:42,600
So let's begin by pretending that we have an array.

165
00:12:42,630 --> 00:12:44,000
You can type this out with me.

166
00:12:44,400 --> 00:12:51,600
I'm going to say let my colors equal and then square brackets to create the array.

167
00:12:52,020 --> 00:12:55,080
And then I'm just going to spell out the first few colors of the rainbow.

168
00:12:57,380 --> 00:12:59,450
OK, so we've got this example.

169
00:13:00,230 --> 00:13:05,730
Now, let's imagine that we want to do something once for each item in the array.

170
00:13:06,170 --> 00:13:11,930
For example, let's imagine we want to output down onto the preview part of the Web page, a little

171
00:13:11,930 --> 00:13:19,170
bit of text that says the color red is a great color and then the color orange is a great color.

172
00:13:19,520 --> 00:13:21,440
The color yellow is a great color.

173
00:13:21,800 --> 00:13:22,020
Right.

174
00:13:22,050 --> 00:13:26,510
So we want to perform this repetitive task and do it once for each item.

175
00:13:27,230 --> 00:13:30,570
Well, check this out in the JavaScript language.

176
00:13:30,890 --> 00:13:32,570
Let's begin working with our variable.

177
00:13:32,580 --> 00:13:42,110
So my colors in the JavaScript language, all arrays have access to a method named for each.

178
00:13:42,740 --> 00:13:48,560
And just based on its name, you might be able to guess what it does within its parentheses for the

179
00:13:48,560 --> 00:13:49,070
argument.

180
00:13:49,070 --> 00:13:56,330
We just give it a function and then it's going to run that function once for each item in the collection.

181
00:13:56,780 --> 00:13:57,950
Let me show you how it works.

182
00:13:57,950 --> 00:14:02,360
So maybe down on a new line, let's create a brand new function and name it.

183
00:14:02,780 --> 00:14:04,930
Say something nice.

184
00:14:05,870 --> 00:14:07,370
The name of the function doesn't matter.

185
00:14:07,380 --> 00:14:08,650
That's just what I'm going with.

186
00:14:09,260 --> 00:14:12,080
So I've got the name and then parentheses curly brackets.

187
00:14:12,500 --> 00:14:15,920
OK, now we can spell out what this function should do in just a minute.

188
00:14:15,920 --> 00:14:19,430
But on this line, within the parentheses four for each.

189
00:14:19,430 --> 00:14:21,310
Let's pass it that function.

190
00:14:21,710 --> 00:14:24,890
So say something nice.

191
00:14:25,460 --> 00:14:28,940
And now this line of code almost makes sense in plain English.

192
00:14:29,390 --> 00:14:35,870
We've got our array of colors and we are saying for each, for each item in that array, say something

193
00:14:35,870 --> 00:14:36,350
nice.

194
00:14:37,430 --> 00:14:38,360
So now check this out.

195
00:14:38,370 --> 00:14:43,700
Down in the actual function definition within these parentheses, we need to create a parameter.

196
00:14:43,700 --> 00:14:47,840
So you could just say X, which is easy to type or we could say color.

197
00:14:48,020 --> 00:14:49,750
The name of the parameter doesn't matter.

198
00:14:50,240 --> 00:14:54,320
But then down here in the body of the function, let's say document.

199
00:14:54,680 --> 00:14:55,150
Right.

200
00:14:55,490 --> 00:15:01,040
Because remember, we want to output something down here that says the color blank is a great color.

201
00:15:01,640 --> 00:15:08,280
So I'm just going to say quotes the color and then space and then add on our parameter.

202
00:15:08,450 --> 00:15:14,570
So for you, it might be X or whatever you name the parameter and then add on another string of text.

203
00:15:14,570 --> 00:15:19,700
Begin with the space and say is a great color, cool.

204
00:15:19,700 --> 00:15:21,410
And there we see the color.

205
00:15:21,410 --> 00:15:25,130
Red is a great color, color orange, the color yellow.

206
00:15:25,550 --> 00:15:30,140
If you want each one to sit on its own line, it's just a matter of HTML.

207
00:15:30,290 --> 00:15:33,290
So right after this period we could just add a brake tag.

208
00:15:34,460 --> 00:15:35,060
Perfect.

209
00:15:35,660 --> 00:15:41,090
Now, this may not seem that impressive, but it's cool because our code is now flexible, meaning in

210
00:15:41,090 --> 00:15:47,660
the future, if we ever added new colors to our array, it's going to automatically display onto the

211
00:15:47,660 --> 00:15:48,340
Web page.

212
00:15:48,650 --> 00:15:55,610
So if we came up here and at the end of the array added on Karmal Green, that's all we need to do.

213
00:15:55,610 --> 00:15:56,780
And now we see the color.

214
00:15:56,780 --> 00:15:58,370
Green is a great color.

215
00:15:58,820 --> 00:16:04,580
Now, the real reason we just learned about this for each function is to show you that it is a higher

216
00:16:04,580 --> 00:16:09,380
order function that is part of the core JavaScript language itself.

217
00:16:09,740 --> 00:16:10,070
Right.

218
00:16:10,250 --> 00:16:13,310
For its argument, it accepts a function.

219
00:16:13,910 --> 00:16:21,860
However, indirectly, we also just learned why arrays can be so useful once you have items in a collection

220
00:16:21,860 --> 00:16:29,600
like this, computers are very skilled at performing a repetitive task or looping through the array

221
00:16:29,810 --> 00:16:32,100
and doing something once for each item.

222
00:16:32,600 --> 00:16:40,370
So we could just as well imagine that each one of these was an email in your inbox or a post on Facebook

223
00:16:40,370 --> 00:16:42,980
or a photo post on Instagram.

224
00:16:43,440 --> 00:16:47,340
OK, anyway, so that was a quick look at the for each method.

225
00:16:47,750 --> 00:16:54,470
Now two of the other most useful higher order functions in JavaScript that I leverage on a daily basis

226
00:16:54,740 --> 00:16:59,420
also have to do with arrays and you do not need to type this out.

227
00:16:59,420 --> 00:17:00,590
But they are.

228
00:17:02,790 --> 00:17:12,570
Map and filter, I only typed out the name of our array variable here to show you that these are functions

229
00:17:12,570 --> 00:17:17,500
or methods that all arrays automatically get access to.

230
00:17:17,940 --> 00:17:25,200
Now, we actually are not going to learn about map and filter in this lesson because we've already covered

231
00:17:25,200 --> 00:17:27,810
enough new ground and material for one lesson.

232
00:17:28,110 --> 00:17:32,580
But we are going to learn about map and filter in our very next lesson.

233
00:17:32,970 --> 00:17:39,480
And this is great because these functions are the perfect segue way into our next topic.

234
00:17:39,930 --> 00:17:47,310
Now, this next topic might seem like a minor detail, but in actuality it's crucial to understanding

235
00:17:47,310 --> 00:17:48,070
JavaScript.

236
00:17:48,390 --> 00:17:53,580
It's a concept that might be obvious if you're familiar with another programming language.

237
00:17:53,880 --> 00:17:59,850
But I know that personally, in my own experience, I wish that someone would have stressed this concept

238
00:17:59,850 --> 00:18:02,070
to me when I was first starting out.

239
00:18:02,430 --> 00:18:03,800
And what is that concept?

240
00:18:04,380 --> 00:18:10,530
It's the difference between returning a value and mutating a value.

241
00:18:10,990 --> 00:18:12,810
So what in the world does that even mean?

242
00:18:13,200 --> 00:18:15,870
Well, we're going to learn all about it in our next lesson.

243
00:18:16,170 --> 00:18:19,010
So let's keep things rolling and I'll see you then.
