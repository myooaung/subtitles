1
00:00:01,750 --> 00:00:02,680
Hello, everyone.

2
00:00:03,010 --> 00:00:10,390
In this lesson, we are going to work on letting a user update or edit one of their existing posts.

3
00:00:10,750 --> 00:00:13,400
Without further ado, let's jump into the action.

4
00:00:13,780 --> 00:00:20,230
OK, so from the home page, assuming you're logged in, let's set things up so that you can click on

5
00:00:20,230 --> 00:00:24,140
your profile photo in the top right to go to your profile.

6
00:00:24,610 --> 00:00:30,880
That way, we don't need to go up to the address bar and manually type in profile and then slash your

7
00:00:30,880 --> 00:00:31,500
username.

8
00:00:31,930 --> 00:00:38,320
So to set up this link, let's jump into our text editor and within our views folder, let's open up

9
00:00:38,590 --> 00:00:49,530
the includes subfolder and then jump into header SJS around line number 22 will see an opening, a element.

10
00:00:49,960 --> 00:00:54,810
You'll know it's the right element if it contains an image with the title of my profile.

11
00:00:55,210 --> 00:01:04,630
So on the opening, a tag for the ref just change it from this hash tag to slash profile slash and then

12
00:01:04,630 --> 00:01:12,070
let's do something dynamic so less than percentage equal sign and then close that out percentage greater

13
00:01:12,070 --> 00:01:17,090
than in between, let's just say user dot user name.

14
00:01:17,750 --> 00:01:19,950
OK, let's go ahead and save that.

15
00:01:20,380 --> 00:01:26,170
And now back on the home page, if you refresh, you can simply click that to go to your profile.

16
00:01:27,530 --> 00:01:27,990
Cool.

17
00:01:28,040 --> 00:01:30,680
Now let's visit one of our existing posts.

18
00:01:32,100 --> 00:01:38,310
OK, now, before we actually set things up so that clicking on this blue edit button takes you to an

19
00:01:38,310 --> 00:01:45,720
edit screen, let's first adjust things so that only the author or owner or creator of this post would

20
00:01:45,720 --> 00:01:48,300
see these edit or delete buttons.

21
00:01:48,780 --> 00:01:55,680
For example, if I visit this same you URL in an incognito window or in a different browser entirely.

22
00:01:55,710 --> 00:02:02,430
So this is Mozilla Firefox where I'm not logged in as any account I should be able to visit that you

23
00:02:02,430 --> 00:02:05,430
are well and see the post content, right.

24
00:02:05,430 --> 00:02:12,890
The post itself should be publicly viewable, but I should not see these edit or delete buttons.

25
00:02:13,320 --> 00:02:19,250
It only makes sense for the actual creator or owner of this particular post to see those.

26
00:02:19,620 --> 00:02:26,130
So in order to set up that restriction or that bit of logic, let's go to the controller that is powering

27
00:02:26,130 --> 00:02:26,850
this route.

28
00:02:27,420 --> 00:02:35,520
So back in our text editor, look inside our controllers folder and jump into post controller Dot JS

29
00:02:36,120 --> 00:02:36,960
towards the bottom.

30
00:02:36,960 --> 00:02:39,560
We have a function named View single.

31
00:02:40,020 --> 00:02:41,340
Now, here's the important part.

32
00:02:41,580 --> 00:02:48,320
When we call our post model and ask it to find a single post by a certain ID.

33
00:02:48,870 --> 00:02:55,470
Well, if we just include a second argument within these parentheses, that argument being the user

34
00:02:55,470 --> 00:03:02,190
ID of the current visitor, then our model will have all of the data it needs to determine if that user

35
00:03:02,190 --> 00:03:03,690
ID is the same.

36
00:03:03,690 --> 00:03:06,390
User ID is the author for a given post.

37
00:03:06,810 --> 00:03:12,480
Now, if the current visitor is a guest, meaning they're not logged into any account, then obviously

38
00:03:12,480 --> 00:03:14,250
they will not have a user ID.

39
00:03:14,820 --> 00:03:19,320
So to set things up in a reusable and fail proof way, let's do this.

40
00:03:19,620 --> 00:03:25,080
Let's set up a piece of code that will run at the start of every request and it will check to see if

41
00:03:25,080 --> 00:03:28,590
the current visitor has a user object in session data.

42
00:03:28,860 --> 00:03:31,200
If they do, we can grab their user ID.

43
00:03:31,500 --> 00:03:38,010
If they don't, we'll just consider their user ID to be zero and that zero can signify that their guest.

44
00:03:38,430 --> 00:03:47,340
So to set up something that will run for every request, let's jump into our main app, JS file within

45
00:03:47,340 --> 00:03:53,880
app that just for me it's around line number eighteen or right below the area where we set up session

46
00:03:53,880 --> 00:03:54,720
in Flash.

47
00:03:55,110 --> 00:04:00,090
You'll see that we've already created a function that's going to run for every request.

48
00:04:00,450 --> 00:04:06,060
It begins with app use and then we have this function that's going to take the current user session

49
00:04:06,060 --> 00:04:13,640
object and make that available within response that locals meaning so we can access it from our templates.

50
00:04:14,130 --> 00:04:19,020
Well, since this function is going to run for every request, we can just write a bit of additional

51
00:04:19,020 --> 00:04:19,770
code within it.

52
00:04:20,130 --> 00:04:24,930
Let's add a comment here just to stay organized and let's describe what we're doing on this line.

53
00:04:25,450 --> 00:04:27,030
Slash slash for a comment.

54
00:04:27,030 --> 00:04:35,010
Let's say make user session data available from within view templates.

55
00:04:35,730 --> 00:04:37,200
OK, now above this.

56
00:04:37,200 --> 00:04:46,740
Let's write another comment and let's say make current user ID available on the request object.

57
00:04:47,610 --> 00:04:50,010
OK, now all we need to do is write an if statement.

58
00:04:50,010 --> 00:04:56,940
So if parentheses curly brackets, let's say if request session user.

59
00:04:57,270 --> 00:05:04,440
If that exists then within the curly brackets, let's say request and let's make up a new property that

60
00:05:04,440 --> 00:05:06,540
we're going to add to the request object.

61
00:05:06,540 --> 00:05:09,480
Let's call it visitor ID.

62
00:05:10,450 --> 00:05:18,250
And we would set that to request session users underscore ID at the end of this line after the closing

63
00:05:18,250 --> 00:05:21,310
curly bracket, let's add an else block and say else.

64
00:05:21,550 --> 00:05:27,940
Otherwise, let's set request visitor I.D. to equal zero.

65
00:05:28,540 --> 00:05:28,950
Cool.

66
00:05:29,170 --> 00:05:34,300
So now, no matter which control or function we're in, we can reliably know that there's going to be

67
00:05:34,300 --> 00:05:38,200
a visitor ID property on the request object.

68
00:05:38,530 --> 00:05:41,350
If the users logged in, it will be their actual ID.

69
00:05:41,530 --> 00:05:43,650
If they're not logged in, it will just be a zero.

70
00:05:43,990 --> 00:05:47,890
Let's go ahead and save this and then jump back into our post comptroller.

71
00:05:48,520 --> 00:05:54,610
OK, within our view, single function, when we are leveraging our post model and telling it to find

72
00:05:54,610 --> 00:05:57,930
a post, let's just give it a second argument here.

73
00:05:58,180 --> 00:06:08,350
So right after a request up Ramsgate ID, let's say Kamma and then just say request dot visitor id cool.

74
00:06:08,350 --> 00:06:14,170
At this point, our post model has everything it needs to determine if the visitor is the owner or author

75
00:06:14,170 --> 00:06:14,920
of a post.

76
00:06:15,370 --> 00:06:20,050
We're telling you which post to look up for the current You URL and we're also telling it the current

77
00:06:20,050 --> 00:06:21,040
visitor ID.

78
00:06:21,400 --> 00:06:23,110
Let's go ahead and save this.

79
00:06:23,290 --> 00:06:26,260
And now let's jump in to our post model.

80
00:06:26,950 --> 00:06:31,600
So within our models folder, jump in to post JS.

81
00:06:32,560 --> 00:06:39,520
So our controller is calling a model function named Find Single by I.D. So let's scroll down in our

82
00:06:39,520 --> 00:06:41,080
model to find that function.

83
00:06:42,160 --> 00:06:50,350
Here it is, upper case post finds single by Idy now ultimately this function is leveraging our reuseable

84
00:06:50,350 --> 00:06:51,770
post query function.

85
00:06:52,150 --> 00:06:59,140
So let's do this within this outermost function named Find single by Idy within its parentheses, let's

86
00:06:59,140 --> 00:07:05,010
add a second parameter to receive the incoming visitor ID.

87
00:07:05,740 --> 00:07:13,210
OK then when we use our reuseable post query function, the first argument is an array of aggregate

88
00:07:13,210 --> 00:07:13,900
options.

89
00:07:14,170 --> 00:07:16,270
But we can just provide a second argument.

90
00:07:16,270 --> 00:07:17,590
That's the visitor ID.

91
00:07:17,950 --> 00:07:23,590
So right after this closing square bracket to close out that array or first argument we can say comma

92
00:07:24,220 --> 00:07:25,740
visitor ID.

93
00:07:26,410 --> 00:07:33,810
OK, now let's just go into our reuseable post query function and actually leverage that visitor ID.

94
00:07:34,450 --> 00:07:41,650
So if we scroll up, we're looking for the area that begins with uppercase post dot reuseable post query

95
00:07:42,220 --> 00:07:43,930
within this function's parentheses.

96
00:07:43,930 --> 00:07:52,630
Let's receive that incoming visitor I.D. So comma visitor I.D. And now if we scroll down to this area

97
00:07:52,630 --> 00:08:00,490
where we see posts equals post dot map within this map function, we're already filtering the data or

98
00:08:00,490 --> 00:08:01,740
customizing it a bit.

99
00:08:02,110 --> 00:08:08,860
So I think this would be a great place to add on a property onto the post named is visiter owner.

100
00:08:09,310 --> 00:08:14,930
And then we can just check to see if the Post author ID matches that passed in Visitor ID.

101
00:08:15,520 --> 00:08:17,020
Let me show you what I have in mind.

102
00:08:17,020 --> 00:08:23,590
So right above this line where we say post dot author equals an object right above that.

103
00:08:23,920 --> 00:08:25,630
Still within our map function.

104
00:08:25,900 --> 00:08:36,010
Let's say post DOT is visitor owner, OK, and for now let's just set that to equal a temporary placeholder

105
00:08:36,010 --> 00:08:38,830
X and we can circle back to this in just a moment.

106
00:08:39,280 --> 00:08:43,840
Really, what we need to pull in here is the author ID for the current post.

107
00:08:44,140 --> 00:08:51,520
However, up in our aggregate operations, we already changed what the author property is ultimately

108
00:08:51,520 --> 00:08:53,120
going to return, right?

109
00:08:53,200 --> 00:09:00,790
Originally it did contain the author ID, but we changed things here so that it's going to be the object

110
00:09:00,790 --> 00:09:03,660
for the related user to get around this.

111
00:09:03,670 --> 00:09:10,510
What we can do maybe right after this created date line, we can just add a new line and say Author

112
00:09:10,690 --> 00:09:11,470
I.

113
00:09:11,470 --> 00:09:17,320
D So I just made up this property name and then we can just give it a value of quotes.

114
00:09:17,650 --> 00:09:19,660
Dollar Sign author.

115
00:09:20,220 --> 00:09:23,500
Be sure to end this line with a comma in Mongo DB.

116
00:09:23,500 --> 00:09:28,990
If you include a dollar sign within quotes, it knows that you're talking about that actual field,

117
00:09:29,290 --> 00:09:31,360
not a literal string of text.

118
00:09:31,690 --> 00:09:36,250
So I'm just making up a new property that's going to have that original authorized value.

119
00:09:36,580 --> 00:09:43,450
So now we can leverage that down on this line within our post dot map area where we are saying post

120
00:09:43,450 --> 00:09:50,330
dot is visitor owner should equal and then we want this to either be a true or false value.

121
00:09:50,800 --> 00:09:51,940
Well, check this out.

122
00:09:52,240 --> 00:09:56,800
Instead of the X, we can just say post dot author.

123
00:09:57,010 --> 00:10:01,240
I said this will be a Mongo DB Object ID.

124
00:10:01,570 --> 00:10:07,420
We can look inside it and call a method that it has named equals in these parentheses.

125
00:10:07,420 --> 00:10:10,120
We can just give it something that we want to compare it against.

126
00:10:10,570 --> 00:10:14,110
So let's just use that Pastan visitor ID.

127
00:10:14,620 --> 00:10:14,960
Cool.

128
00:10:14,980 --> 00:10:19,960
Now this equals method is going to return either a value of true or false.

129
00:10:20,470 --> 00:10:23,110
Let's go ahead and save this and test it out.

130
00:10:23,710 --> 00:10:28,990
What I mean by that is let's jump into the Edge's template that powers this screen.

131
00:10:29,320 --> 00:10:32,770
What we can do is around these two edit and delete buttons.

132
00:10:32,950 --> 00:10:35,620
We can wrap them within an if statement.

133
00:10:35,830 --> 00:10:41,230
We can just say if post DOT is visiter owner only.

134
00:10:41,230 --> 00:10:43,540
If that's true, then display these.

135
00:10:44,020 --> 00:10:51,970
So within our editor, let's look in our views folder and let's jump into the file that is named single

136
00:10:51,970 --> 00:10:53,080
dash post.

137
00:10:53,080 --> 00:11:01,120
Dash screen within single post screen on a round line number six or write below this heading level two

138
00:11:01,120 --> 00:11:01,960
with the title.

139
00:11:02,140 --> 00:11:03,730
We see a span element.

140
00:11:04,120 --> 00:11:10,840
I want you to go ahead and select that span down until the closing span tag and cut that into your clipboard.

141
00:11:12,020 --> 00:11:13,870
OK, now let's do something dynamic.

142
00:11:13,870 --> 00:11:15,550
Let's write an if statement.

143
00:11:15,940 --> 00:11:21,130
So less than a percentage percentage greater, then let's just use an if statement.

144
00:11:21,130 --> 00:11:30,790
So if parentheses curly brackets for the condition, we can just say post DOT is visiter owner.

145
00:11:31,330 --> 00:11:31,600
Right.

146
00:11:31,600 --> 00:11:36,970
Is the current visitor the owner or creator of this post at the end of this line, let's be sure to

147
00:11:36,970 --> 00:11:39,130
drop out of Ejaz dynamic mode.

148
00:11:39,490 --> 00:11:41,500
And then at the start of this line, let's.

149
00:11:41,640 --> 00:11:46,920
Dropped back into dynamic mode and now on this line, we can just paste in our clipboard.

150
00:11:47,460 --> 00:11:49,550
OK, let's go ahead and save that.

151
00:11:49,770 --> 00:11:54,420
And now in the window where I am logged in as the bride account by refresh.

152
00:11:55,440 --> 00:12:01,590
Cool, I still see the edit and delete icons, but back in the window where I'm not logged in, if I

153
00:12:01,590 --> 00:12:03,040
refresh, they're gone.

154
00:12:03,390 --> 00:12:06,390
Also if I log in with my Bachs slot account.

155
00:12:10,580 --> 00:12:13,550
And then view that same post created by the browed account.

156
00:12:14,270 --> 00:12:20,240
Cool, the system knows that, yes, I'm logged in, but I'm not logged in with the account that authored

157
00:12:20,240 --> 00:12:21,560
or created this post.

158
00:12:22,010 --> 00:12:26,840
And aside from just visually hiding those icons, we can reuse that.

159
00:12:26,840 --> 00:12:34,370
Same is visiter owner property when it comes to the routes that will actually let you edit and delete

160
00:12:34,370 --> 00:12:35,060
a post.

161
00:12:35,630 --> 00:12:41,530
But before we get to that, let's set up the ref or link value for this edit button.

162
00:12:41,990 --> 00:12:42,260
Right.

163
00:12:42,280 --> 00:12:46,870
The question is, if a user clicks on this, what you URL should it take them to?

164
00:12:47,210 --> 00:12:49,460
Well, let's jump back into our text editor.
