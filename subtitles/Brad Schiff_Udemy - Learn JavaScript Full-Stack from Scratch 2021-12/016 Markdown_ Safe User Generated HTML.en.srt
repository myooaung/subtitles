1
00:00:00,240 --> 00:00:07,740
Well, the answer is that we're going to leverage a super popular tool named Mark down instead of trying

2
00:00:07,740 --> 00:00:10,050
to explain what markdown is with words.

3
00:00:10,350 --> 00:00:14,070
Let's just go install it in npm and see it in action.

4
00:00:14,550 --> 00:00:16,260
So do this with me right now.

5
00:00:16,620 --> 00:00:18,180
Open up your command line.

6
00:00:18,720 --> 00:00:26,730
If your app is currently running, Press Control C to quit and run the following command npm install.

7
00:00:27,120 --> 00:00:34,650
And in the JavaScript universe, there's a popular package named Markt that will give us access to markdown.

8
00:00:35,130 --> 00:00:38,040
So npm install marked.

9
00:00:38,400 --> 00:00:39,520
Go ahead and press enter.

10
00:00:40,710 --> 00:00:43,020
OK, and let's get our server back up and running.

11
00:00:43,020 --> 00:00:44,850
So npm run watch.

12
00:00:46,260 --> 00:00:53,580
All right, now, let's jump into our main app Dot JS File and leverage markdown towards the top.

13
00:00:53,580 --> 00:00:55,290
Let's require in that package.

14
00:00:55,620 --> 00:01:03,300
So maybe right below this flash line, let's say Konst markdown equals and then just require in the

15
00:01:03,300 --> 00:01:05,910
package that was named marked.

16
00:01:06,750 --> 00:01:10,620
OK, so we now have this constant variable named markdown.

17
00:01:11,040 --> 00:01:16,410
Now I want you to scroll down to the function that we have that's going to run for every request.

18
00:01:16,830 --> 00:01:19,710
So it begins with App Dot use and then it's a function.

19
00:01:19,710 --> 00:01:22,770
And then we have several comments in here towards the top.

20
00:01:22,800 --> 00:01:34,170
Let's just add a new comment and let's say make our markdown function available from within E.j.'s templates.

21
00:01:34,770 --> 00:01:35,250
All right.

22
00:01:35,790 --> 00:01:41,760
So let's begin working with response dot locals because we can access that from within our templates.

23
00:01:42,120 --> 00:01:44,310
And let's just create a function.

24
00:01:44,580 --> 00:01:52,530
We can name it anything we want, but let's name it, maybe filter user HTML and let's set that to equal

25
00:01:52,530 --> 00:01:56,570
a function within these parentheses.

26
00:01:56,580 --> 00:02:04,080
Let's add a parameter, let's say content and then within the body of the function, let's just return.

27
00:02:04,590 --> 00:02:07,500
And then we will use the markdown package.

28
00:02:07,920 --> 00:02:14,280
Well, the package name marked, but we name the variable markdown and look inside it for a method called

29
00:02:14,280 --> 00:02:14,880
pass.

30
00:02:15,150 --> 00:02:21,450
Now, be careful, this code will try to recommend something called uppercase parser, so do not let

31
00:02:21,450 --> 00:02:23,460
voice code perform the autocomplete.

32
00:02:23,790 --> 00:02:30,540
We want a lowercase method named pass, so you can see as I tried to type that in vs code corrected

33
00:02:30,540 --> 00:02:30,930
it for me.

34
00:02:30,960 --> 00:02:31,890
We don't want that.

35
00:02:32,070 --> 00:02:35,850
So press the escape key on your keyboard right about here.

36
00:02:36,510 --> 00:02:38,310
So that auto suggestion goes away.

37
00:02:38,430 --> 00:02:44,370
And then just parentheses to call it like this in these parentheses, let's pass it content.

38
00:02:45,000 --> 00:02:51,360
Don't worry, I do not expect this to make sense right now, but I think in about 20 to 30 seconds,

39
00:02:51,570 --> 00:02:52,740
it'll be crystal clear.

40
00:02:53,190 --> 00:02:55,020
Let's go ahead and save this.

41
00:02:55,500 --> 00:03:01,740
And now let's jump in to the E.j.'s template that powers this screen where you're viewing an individual

42
00:03:01,740 --> 00:03:02,340
post.

43
00:03:02,820 --> 00:03:11,400
So within our Views folder, let's open the file that is named Single Dash Post Dash screen towards

44
00:03:11,400 --> 00:03:15,030
the bottom, we see a div with a class of body content.

45
00:03:15,330 --> 00:03:21,060
And here is where we are actually outputting that body field content from the database.

46
00:03:21,480 --> 00:03:22,980
Well, let's adjust this a bit.

47
00:03:23,250 --> 00:03:26,580
So within the E.j.'s tags, get rid of post-op body.

48
00:03:26,880 --> 00:03:29,670
And instead, let's call that function we just set up.

49
00:03:30,390 --> 00:03:33,510
We named it filter user.

50
00:03:33,750 --> 00:03:34,830
Each HTML.

51
00:03:35,550 --> 00:03:39,150
And let's just pass this function post dot body.

52
00:03:39,750 --> 00:03:41,640
Let's go ahead and save this.

53
00:03:41,850 --> 00:03:44,760
And now I can show you what markdown is.

54
00:03:45,090 --> 00:03:46,350
So back in our browser?

55
00:03:46,560 --> 00:03:52,230
Let's try editing an existing post within the body field.

56
00:03:52,230 --> 00:03:57,780
Let's give ourselves a clean start, and let's say this should be bold.

57
00:03:58,020 --> 00:04:01,200
And imagine we wanted this word to actually be bold.

58
00:04:01,650 --> 00:04:08,940
Well, in markdown, you can just wrap it in two stars or asterisks in markdown if you drop down two

59
00:04:08,940 --> 00:04:09,720
lines like this.

60
00:04:09,900 --> 00:04:13,800
It will automatically create each HTML paragraphs for you.

61
00:04:14,400 --> 00:04:18,840
Let's imagine we want something to be italic, so we could say this should be italic.

62
00:04:19,740 --> 00:04:26,130
You would just wrap this in one star or asterisk if you want it to create a heading level one.

63
00:04:26,220 --> 00:04:31,320
You can just include one hash tag and then say, This is my H1.

64
00:04:31,710 --> 00:04:34,710
If you wanted to create a heading level two, it's two of them.

65
00:04:34,890 --> 00:04:36,450
This is my H2.

66
00:04:36,660 --> 00:04:39,720
So on and so forth, all the way up to a heading level six.

67
00:04:40,470 --> 00:04:46,590
If you want to create a bulleted list, you can just include a dash at the start of the line item one

68
00:04:46,590 --> 00:04:48,270
and then item two.

69
00:04:48,270 --> 00:04:50,130
Item three.

70
00:04:50,640 --> 00:04:51,450
You get the idea.

71
00:04:51,660 --> 00:04:53,640
Let's go ahead and click Save.

72
00:04:55,530 --> 00:04:57,960
OK, now let's actually view that post.

73
00:04:59,220 --> 00:05:08,010
The idea is that we didn't write any HTML, but Mark Down will convert its own unique syntax into HTML.

74
00:05:08,430 --> 00:05:15,210
So line breaks automatically turn in paragraphs, double asterisks automatically turn into strong tags.

75
00:05:15,570 --> 00:05:20,760
The hash tags or pound symbols automatically turned into heading level one and heading level two.

76
00:05:21,000 --> 00:05:24,270
And here we see an unordered list with list items.

77
00:05:24,930 --> 00:05:25,980
So that's the good news.

78
00:05:26,160 --> 00:05:33,900
The bad news is that because E.j.'s is protecting us and escaping this, we still don't actually see

79
00:05:33,900 --> 00:05:35,070
any of this formatting.

80
00:05:35,790 --> 00:05:37,620
Well, let's try a quick experiment.

81
00:05:37,890 --> 00:05:44,850
So back in our text editor on this line, where we are outputting that content on the opening E.j.'s

82
00:05:44,850 --> 00:05:45,270
tag.

83
00:05:45,540 --> 00:05:53,670
If we change this equal sign into a dash instead, E.j.'s will no longer protect us.

84
00:05:53,910 --> 00:06:00,540
It's no longer going to escape this, and we would now potentially be open to cross-site scripting attacks.

85
00:06:00,810 --> 00:06:03,570
So if we save this and refresh.

86
00:06:04,590 --> 00:06:07,710
The downside is that our security is now totally gone.

87
00:06:08,070 --> 00:06:13,760
The upside is that users can now provide basic formatting really quick.

88
00:06:13,770 --> 00:06:16,110
Let me show you why this is a malicious users.

89
00:06:16,290 --> 00:06:24,120
While this fantasy, if we go into the edit screen for this post and within the content, since nothing

90
00:06:24,120 --> 00:06:33,390
is escaping any potential HTML, I could just open up a script tag and within it I could say alert.

91
00:06:33,790 --> 00:06:35,310
Ha ha ha ha ha.

92
00:06:35,340 --> 00:06:46,140
Evil JavaScript is being executed here, OK, and then if I submit this and then go back to actually

93
00:06:46,140 --> 00:06:50,820
view it, this is our worst nightmare as a developer.

94
00:06:51,150 --> 00:06:57,840
If a user is able to actually execute JavaScript from the front end of your app, it's game over.

95
00:06:57,990 --> 00:07:05,520
You've lost the security battle because now anyone that visits this URL is going to have this JavaScript

96
00:07:05,520 --> 00:07:11,130
execute, and you can use your imagination instead of a weird alert pop up message like this.

97
00:07:11,370 --> 00:07:18,390
You could instead use JavaScript to program the web browser to send off an asynchronous HTTP request

98
00:07:18,390 --> 00:07:24,090
to the server, and you would be doing so on behalf of their account or their browser.

99
00:07:24,090 --> 00:07:29,820
Whoever's viewing this page effectively allowing the malicious user to do whatever they want on your

100
00:07:29,820 --> 00:07:30,360
behalf.

101
00:07:30,600 --> 00:07:32,130
They can delete all your posts.

102
00:07:32,370 --> 00:07:35,280
They could create a bunch of weird posts on your behalf.

103
00:07:35,670 --> 00:07:38,400
If this was a bank website, they could take all your money.

104
00:07:38,880 --> 00:07:44,310
Not to mention about five other billion bad things they could do if they're allowed to run JavaScript

105
00:07:44,310 --> 00:07:45,600
on the front end of your site.

106
00:07:45,960 --> 00:07:48,600
Big picture you never want to allow this.

107
00:07:49,260 --> 00:07:56,700
So the question becomes How can we let our E.j.'s template not escape this output so that users can

108
00:07:56,700 --> 00:08:02,010
use markdown while at the same time protecting ourselves from things like this?

109
00:08:02,880 --> 00:08:10,500
Well, let's go ahead and leave this as a dash instead of an equal sign, meaning E.j.'s is not protecting

110
00:08:10,500 --> 00:08:10,830
us.

111
00:08:11,160 --> 00:08:16,080
And instead, let's go into our post model and take care of the protection ourselves.

112
00:08:16,530 --> 00:08:21,980
So in your models folder, jump into Post Dot J.S. towards the top.

113
00:08:21,990 --> 00:08:24,560
We have a method named clean up, right?

114
00:08:24,630 --> 00:08:26,670
Post up prototype dot cleanup.

115
00:08:27,120 --> 00:08:32,460
Within that method, we have a comment that says get rid of any bogus properties, and this is also

116
00:08:32,460 --> 00:08:37,470
where we are trimming any empty whitespace at the beginning or end of the title or body.

117
00:08:37,830 --> 00:08:47,250
Well, let's just go ahead and use a sanitized HTML package to remove any and all HTML tags, attributes,

118
00:08:47,250 --> 00:08:49,860
script tag style tags, everything.

119
00:08:50,130 --> 00:08:55,470
We can just aggressively strip out all of that before we store this in our database.

120
00:08:56,010 --> 00:08:59,010
So let's go out to npm and pick up a package.

121
00:08:59,400 --> 00:09:03,990
So open your command line First Control C to stop your server.

122
00:09:04,020 --> 00:09:10,980
Let's run npm install and the name of the package is sanitized.

123
00:09:11,130 --> 00:09:13,500
Dash HD html.

124
00:09:14,010 --> 00:09:15,270
Go ahead and press Enter.

125
00:09:17,430 --> 00:09:19,680
OK, then let's start our server up again.

126
00:09:19,680 --> 00:09:24,150
NPM run watch OK at the top of our post model.

127
00:09:24,150 --> 00:09:26,130
Let's require in that new package.

128
00:09:26,130 --> 00:09:36,750
So Konst sanitize each HTML, set that to equal and then just require in and its name was sanitized.

129
00:09:36,750 --> 00:09:38,940
Dash HD html.

130
00:09:39,720 --> 00:09:45,460
OK, let's go leverage this within our clean up method right below this.

131
00:09:45,480 --> 00:09:46,950
Get rid of bogus properties.

132
00:09:46,950 --> 00:09:50,760
Comment for the value of this body property.

133
00:09:50,760 --> 00:09:54,360
Let's just cut this into our clipboard from this.

134
00:09:54,570 --> 00:10:03,060
To the closing trim, cut that and then let's call our sanitize each HTML package within these parentheses,

135
00:10:03,060 --> 00:10:08,370
we'd want to give it to arguments, so a column will be the first argument is what you're trying to

136
00:10:08,370 --> 00:10:09,210
sanitize.

137
00:10:09,480 --> 00:10:13,170
So this is where we could just get rid of the placeholder and paste in our clipboard.

138
00:10:13,650 --> 00:10:20,370
And the second argument instead of the placeholder be is where we provide an object with a few configuration

139
00:10:20,370 --> 00:10:21,060
options.

140
00:10:21,570 --> 00:10:26,520
I want to aggressively strip out just about everything that isn't plain text.

141
00:10:26,760 --> 00:10:33,660
So I'm going to say aloud tags, colon and I don't want to allow any tags.

142
00:10:33,660 --> 00:10:41,100
So I would just set this to an empty array comma and then allowed attributes column.

143
00:10:41,430 --> 00:10:45,600
I don't want to allow any attributes, so just an empty object.

144
00:10:46,110 --> 00:10:50,580
So that takes care of the body field in terms of the title of a post.

145
00:10:50,910 --> 00:10:53,850
We're never going to output that unless it's escaped.

146
00:10:54,120 --> 00:10:55,350
So it's not a big threat.

147
00:10:55,350 --> 00:10:59,550
But while we're at it, we could also sanitize it to save a bit of typing.

148
00:10:59,560 --> 00:11:05,130
You could just begin selecting at the start of sanitized HTML and just copy the rest of the end of that

149
00:11:05,130 --> 00:11:05,520
line.

150
00:11:05,850 --> 00:11:06,540
Copy that.

151
00:11:06,900 --> 00:11:10,020
And then for title, just get rid of this value.

152
00:11:10,020 --> 00:11:17,070
Paste in your clipboard, except change this dot data dot body to this dot data dot title.

153
00:11:17,620 --> 00:11:21,300
Anyways, let's go ahead and save this and test it out.

154
00:11:22,050 --> 00:11:26,220
So back in the browser, let's try to edit this existing post.

155
00:11:29,160 --> 00:11:32,040
So we've got our evil, malicious JavaScript here.

156
00:11:32,880 --> 00:11:38,460
Just a further show off our sanitized HTML functionality below this, we could try to add in our own

157
00:11:38,460 --> 00:11:39,870
custom HTML.

158
00:11:40,620 --> 00:11:46,710
We could create a development and inside it say this is my custom HTML.

159
00:11:47,400 --> 00:11:54,810
OK, and then if we save or submit this now, our model can do its job and sanitize all of this.

160
00:11:55,200 --> 00:11:57,240
So you can see it completely removed.

161
00:11:57,240 --> 00:12:03,870
The script tags, the JavaScript is gone, and it's stripped the device on either side of this.

162
00:12:04,140 --> 00:12:05,970
This is my custom HTML.

163
00:12:06,480 --> 00:12:12,090
But if we go back to actually view this post, cool markdown is doing its job.

164
00:12:12,540 --> 00:12:13,680
Text is bold.

165
00:12:13,680 --> 00:12:16,740
Italic, we've got headers and bulleted lists.

166
00:12:17,100 --> 00:12:20,340
We now have the best of both worlds are innocent.

167
00:12:20,340 --> 00:12:26,850
Well-intentioned users can style or format their posts, and malicious users cannot enter any sort of

168
00:12:26,850 --> 00:12:29,340
JavaScript or custom HTML.

169
00:12:29,760 --> 00:12:36,240
However, before we close this out, I would not want to allow users to add links to their content.

170
00:12:36,900 --> 00:12:39,510
However, markdown does allow links.

171
00:12:39,900 --> 00:12:48,180
Let me show you what I need if I go into edit this and if I say square brackets, click on me and then

172
00:12:48,600 --> 00:12:55,500
parentheses each http colon malicious link and save that.

173
00:12:57,840 --> 00:12:58,860
And go back to view it.

174
00:12:59,430 --> 00:13:03,180
You can see that because I knew the markdown syntax to create a link.

175
00:13:03,630 --> 00:13:04,770
Well, here's a link.

176
00:13:05,220 --> 00:13:09,930
I'm not comfortable letting users of my app include links in their content.

177
00:13:10,410 --> 00:13:11,850
So here's what I'm going to do.

178
00:13:12,150 --> 00:13:15,150
Let's jump in to our app Dot JS file.

179
00:13:15,840 --> 00:13:20,880
And remember, this is where we set up the function that will be available within response dot locals

180
00:13:20,880 --> 00:13:22,020
within our templates.

181
00:13:22,710 --> 00:13:30,450
Now, when we are creating this function, filter user HTML, let's just use our sanitized HTML package

182
00:13:30,630 --> 00:13:33,660
to sanitize whatever markdown outputs.

183
00:13:34,140 --> 00:13:37,350
We can list a few innocent elements that we would want to allow.

184
00:13:37,530 --> 00:13:40,380
And just not include the a or link element.

185
00:13:40,890 --> 00:13:49,830
So up at the top of this file, I would require in that sanitize HTML package Konst Sanitize HTML equals

186
00:13:49,830 --> 00:13:50,750
required in.

187
00:13:52,890 --> 00:13:56,760
OK, then go back down to our function instead of just returning.

188
00:13:56,760 --> 00:13:58,310
What markdown returns?

189
00:13:58,320 --> 00:14:02,850
Let's say this let's call sanitize HTML.

190
00:14:03,150 --> 00:14:04,710
We're going to give it to arguments.

191
00:14:05,100 --> 00:14:07,590
The first argument is what we want to sanitize.

192
00:14:07,740 --> 00:14:09,750
So that would be what markdown returns.

193
00:14:10,140 --> 00:14:14,780
So instead of a placeholder, it would just be markdown dot.

194
00:14:14,790 --> 00:14:17,530
Look inside it for lowercase pass again.

195
00:14:17,760 --> 00:14:19,020
Press escape right here.

196
00:14:19,030 --> 00:14:25,440
So VSCO doesn't go with its auto suggestion parentheses to call it and feed it content.

197
00:14:26,220 --> 00:14:31,080
And then the second argument is just an object, and we can configure a few options.

198
00:14:31,860 --> 00:14:34,650
So let's say aloud tags.

199
00:14:35,070 --> 00:14:36,720
And this should be an array.

200
00:14:37,440 --> 00:14:46,530
And I would only allow really innocent things like a paragraph or a line break or an unordered list

201
00:14:46,530 --> 00:14:55,470
or a ordered list and a list item or a strong tag or a bold tag or italic.

202
00:14:57,810 --> 00:15:02,280
And then maybe heading level one all the way through heading level six.

203
00:15:05,550 --> 00:15:07,830
You don't absolutely have to do this with me.

204
00:15:08,580 --> 00:15:11,610
Maybe you want to allow links in your content.

205
00:15:12,180 --> 00:15:18,390
OK, and then after that closing square bracket for the array, I would say comma allowed attributes

206
00:15:18,720 --> 00:15:20,700
and set that to an empty object.

207
00:15:21,390 --> 00:15:26,100
OK, now if we save this and then go back to the browser and refresh.

208
00:15:27,900 --> 00:15:34,650
Markdowns still tried to convert this into a link, but then our sanitized HTML function ran and disallowed

209
00:15:34,650 --> 00:15:34,800
it.

210
00:15:35,280 --> 00:15:41,370
But because I specifically listed out the elements that I do want to allow things like bold or strong

211
00:15:41,370 --> 00:15:46,110
m or italic headings and lists, all of this is still allowed.

212
00:15:46,650 --> 00:15:47,010
Cool.

213
00:15:47,340 --> 00:15:49,710
That's going to bring this lesson to a close.

214
00:15:50,250 --> 00:15:55,950
If you're curious about markdown and you want to learn more about its syntax, I recommend this website.

215
00:15:56,550 --> 00:15:57,930
It's a wiki on GitHub.

216
00:15:57,930 --> 00:16:04,020
You can type in this URL, or you should just be able to Google for markdown cheat sheet.

217
00:16:04,740 --> 00:16:06,180
This is a great reference.

218
00:16:06,750 --> 00:16:13,800
OK, looking ahead to our next lesson, we are going to work on the ability for a user to delete one

219
00:16:13,800 --> 00:16:15,360
of their existing posts.

220
00:16:15,930 --> 00:16:21,060
This should be exciting because as soon as we finish the delete ability, we can really change gears

221
00:16:21,300 --> 00:16:26,250
and begin working on the live search functionality of our application.

222
00:16:26,640 --> 00:16:30,630
So let's keep things rolling, and I'll see you in the next lesson.
