WEBVTT
1
00:00:01.800 --> 00:00:02.850
Hello, everyone.

2
00:00:03.030 --> 00:00:09.600
In this lesson, we're going to continue working on our search feature now, we ended our previous lesson

3
00:00:09.600 --> 00:00:13.360
by sending off in asynchronous request to our server.

4
00:00:13.800 --> 00:00:19.050
So let's begin this lesson by adding a matching route for that request.

5
00:00:19.560 --> 00:00:24.450
Let me show you what I mean in our text editor within the route of our project folder.

6
00:00:24.600 --> 00:00:31.800
I want you to jump in to router J.S. under this comment that says post related routes.

7
00:00:32.100 --> 00:00:39.450
Let's add a new route, let's say router dot post for the first argument.

8
00:00:39.450 --> 00:00:42.360
Let's say slash search.

9
00:00:42.870 --> 00:00:43.130
Right.

10
00:00:43.140 --> 00:00:49.020
If someone sends a post request to this route, well, then the second argument is what we want to do

11
00:00:49.020 --> 00:00:49.890
in response.

12
00:00:50.370 --> 00:00:56.010
So you can imagine that we would want to look in our post controller and in 20 seconds from now, we

13
00:00:56.010 --> 00:00:58.820
can create a function named search.

14
00:00:59.430 --> 00:01:01.470
Let's go ahead and save this file.

15
00:01:01.710 --> 00:01:06.640
And now let's jump into our post controller and create a function with this matching name.

16
00:01:07.050 --> 00:01:14.340
So in the controllers folder, post controller, let's scroll down to the bottom and let's add a new

17
00:01:14.340 --> 00:01:14.910
function.

18
00:01:14.910 --> 00:01:20.490
So exports dot search equals a function.

19
00:01:21.270 --> 00:01:24.980
Let's be sure to give it parameters of request and response.

20
00:01:25.840 --> 00:01:30.990
OK, in the body of this function, we can imagine that in our post model.

21
00:01:31.350 --> 00:01:36.980
So uppercase post in a minute or two we can create a function named search.

22
00:01:38.070 --> 00:01:43.110
The only thing we need to pass into this is the search term that the user just searched for.

23
00:01:43.140 --> 00:01:43.410
Right.

24
00:01:43.440 --> 00:01:50.720
So if they searched for puppy, we'd want our controller to pass that value into this model function.

25
00:01:51.180 --> 00:01:57.930
So to do that, but then these parentheses, we can just say request dot body, dot search term.

26
00:01:58.560 --> 00:02:01.920
Remember when we used Axios to send off a request?

27
00:02:02.190 --> 00:02:06.120
We included an object with a property name of search term.

28
00:02:06.660 --> 00:02:12.090
OK, now you can imagine that when we create this search function within our model, we can set it up

29
00:02:12.090 --> 00:02:13.450
to return a promise.

30
00:02:14.040 --> 00:02:21.090
So if this returns a promise, then at the end we can use the dot, then dot catch syntax.

31
00:02:21.630 --> 00:02:24.420
Let's provide functions for both then and catch.

32
00:02:24.720 --> 00:02:26.340
So let's use arrow functions.

33
00:02:27.570 --> 00:02:28.920
Do the same thing for catch.

34
00:02:31.160 --> 00:02:37.220
If the promise is successful and resolves, we would just want to send back the raw JSON data to the

35
00:02:37.220 --> 00:02:45.620
browser, so response dot JSON and we can set things up so that the promise resolves with a value.

36
00:02:45.860 --> 00:02:50.440
The value will be the data or the posts from the database that it finds.

37
00:02:50.930 --> 00:02:55.220
So within the parentheses for this arrow function, let's include a parameter.

38
00:02:55.220 --> 00:02:58.970
We can make up any name we want, but I'm going to call it posts.

39
00:02:59.420 --> 00:03:01.010
And just a quick syntax note.

40
00:03:01.010 --> 00:03:06.860
When you're using an arrow function, if you have exactly one parameter, you don't need the parentheses

41
00:03:06.860 --> 00:03:07.370
around it.

42
00:03:08.390 --> 00:03:12.030
OK, now that's what we would want to send back as JSON data.

43
00:03:12.320 --> 00:03:15.080
So in these parentheses posts.

44
00:03:15.880 --> 00:03:16.400
All right.

45
00:03:16.400 --> 00:03:22.530
And if there's an error, if the promise rejects for any reason, let's just send back an empty array.

46
00:03:22.550 --> 00:03:26.890
So response JSON empty square brackets.

47
00:03:27.500 --> 00:03:29.510
Let's go ahead and save this file.

48
00:03:29.720 --> 00:03:34.110
And now we better go into our post model and create a function with this matching name.

49
00:03:34.640 --> 00:03:38.630
So within our models folder, jump in to post JS.

50
00:03:39.650 --> 00:03:47.630
Let's scroll down to the very bottom right before this closing module exports, let's say uppercase

51
00:03:47.630 --> 00:03:53.540
post dot search should equal a function within these parentheses.

52
00:03:53.540 --> 00:03:59.830
We better include a parameter to receive the incoming search term within the body of this function.

53
00:03:59.840 --> 00:04:05.740
We know that we want it to return a promise, so return new promise.

54
00:04:06.410 --> 00:04:12.320
Let's give this promise a function so arrow function within the parentheses.

55
00:04:12.320 --> 00:04:15.640
We want to be sure to include, resolve and reject.

56
00:04:16.430 --> 00:04:22.640
OK, now, within this function, before we perform any database operations, let's make sure that this

57
00:04:22.640 --> 00:04:29.810
incoming search term is a string of text, not an object, and to make sure that it's not undefined.

58
00:04:30.360 --> 00:04:34.300
So let's set up an if statement if parentheses curly brackets.

59
00:04:34.310 --> 00:04:43.130
Let's also add an else block for the condition we can just say type of and then pass that search term.

60
00:04:43.790 --> 00:04:47.270
Let's say only if that equals string.

61
00:04:47.630 --> 00:04:49.340
This will do two things for us.

62
00:04:49.610 --> 00:04:55.340
It will prevent malicious users from being able to pass an object into a Mongo DB operation.

63
00:04:55.760 --> 00:04:59.570
This greatly reduces the chances of a no sequel injection attack.

64
00:04:59.750 --> 00:05:04.430
And it also makes sure that if someone sends a weird request to this route without a search term at

65
00:05:04.430 --> 00:05:08.330
all, well, then this would be type of undefined.

66
00:05:08.630 --> 00:05:09.560
So big picture.

67
00:05:09.590 --> 00:05:15.350
If this is not true, then in the else block we would just want our promise to reject.

68
00:05:15.860 --> 00:05:20.480
But if this is true, then let's go ahead and perform the database operation.

69
00:05:21.290 --> 00:05:23.000
Let's go ahead and create a variable.

70
00:05:23.150 --> 00:05:31.790
So let let's name it posts and let's set that to equal and then we can just leverage our uppercase post

71
00:05:31.940 --> 00:05:35.770
dot reuseable post query function.

72
00:05:36.200 --> 00:05:38.390
Remember this is going to return a promise.

73
00:05:38.570 --> 00:05:44.180
So right at the start of this we could just say awaked and if we're going to use a wait, we better

74
00:05:44.180 --> 00:05:46.100
be within an async function.

75
00:05:46.760 --> 00:05:51.800
So right before the parentheses with resolve and reject, just say async.

76
00:05:52.550 --> 00:05:59.290
OK, after this let posts aquiline, then we would just want to resolve and we'd want to resolve with

77
00:05:59.300 --> 00:06:02.580
the value of the posts that we found from our database.

78
00:06:03.110 --> 00:06:09.170
Now let's circle back to the parentheses for this reuseable post query to refresh your memory.

79
00:06:09.170 --> 00:06:16.280
We give it an array, so square brackets and this should be an array of aggregate operations.

80
00:06:16.850 --> 00:06:22.490
Remember, we just give it the beginning or unique operations and then this function will add on all

81
00:06:22.490 --> 00:06:24.650
of the ending or boilerplate code.

82
00:06:25.220 --> 00:06:31.700
So within these square brackets, let's drop down so we can include one operation per line, curly brackets,

83
00:06:32.300 --> 00:06:36.950
let's say dollar sign, match colon, give that an object.

84
00:06:37.610 --> 00:06:38.990
And now this is new for us.

85
00:06:39.170 --> 00:06:43.730
We don't want to match based on a perfect and complete match for a field.

86
00:06:44.060 --> 00:06:49.460
Instead, we want to perform a text search, meaning we don't need a perfect match.

87
00:06:49.640 --> 00:06:54.800
We're just looking for anything that contains our search term anywhere within its value.

88
00:06:55.220 --> 00:07:02.780
So we can say dollar sign, text, colon, give that an object and then dollar sign, search colon.

89
00:07:02.960 --> 00:07:05.920
And then we include our actual search term that we're looking for.

90
00:07:05.930 --> 00:07:12.890
So search term at the end of this line, let's include a comma and we just need one more operation.

91
00:07:12.890 --> 00:07:22.130
So curly brackets, let's say dollar signs, sort colon, give that an object and we want to sort by

92
00:07:22.160 --> 00:07:22.970
score.

93
00:07:23.390 --> 00:07:26.690
In the past we had sorted our posts by created date.

94
00:07:27.140 --> 00:07:29.900
Well, now, since this is a search we want.

95
00:07:29.960 --> 00:07:35.700
A sort by their relevancy score, right, we want the best match for your search term at the top.

96
00:07:36.050 --> 00:07:44.830
So score Colen, give that an object dollar sign Medda in quotes, text score.

97
00:07:45.620 --> 00:07:47.360
Let's go ahead and save this.

98
00:07:47.540 --> 00:07:53.270
But we're not ready to test things out yet because when you want to perform a text search and Mongo

99
00:07:53.270 --> 00:07:58.880
DB, meaning you're not looking for an exact value match, but instead you're just looking to see if

100
00:07:58.880 --> 00:08:05.480
these fields contain certain text within them, that can be an expensive operation for a database to

101
00:08:05.480 --> 00:08:06.080
perform.

102
00:08:06.500 --> 00:08:06.690
Right.

103
00:08:06.830 --> 00:08:11.270
Having to comb through every single document and look in every single field.

104
00:08:11.570 --> 00:08:19.280
So in order to make that operation not so incredibly expensive and taxing Mongo DB uses indexes.

105
00:08:19.790 --> 00:08:20.910
Let me show you what I mean.

106
00:08:20.930 --> 00:08:28.880
So right now, I need you to sign in to your Mongo DB Atlus account, navigate to your collection screen,

107
00:08:28.880 --> 00:08:34.340
and then pull up your complex app database and click into your posts collection.

108
00:08:34.880 --> 00:08:39.530
On the right hand side here we find indexes and aggregation.

109
00:08:39.840 --> 00:08:42.290
I want you to click on indexes.

110
00:08:44.510 --> 00:08:50.420
We can see that by default out of the box, there's only one index for this collection and it's based

111
00:08:50.420 --> 00:08:56.570
on their underscore I.D. This way, when you want to find a document by its ID, that operation is very

112
00:08:56.570 --> 00:09:00.290
quick and responsive and not super taxing on the database.

113
00:09:00.740 --> 00:09:07.430
Well, right now, we want to set things up so that the title and body fields of a post are also indexed

114
00:09:07.970 --> 00:09:08.510
that way.

115
00:09:08.510 --> 00:09:13.700
When we want to search within those fields, it's not a super slow and taxing operation.

116
00:09:14.240 --> 00:09:18.140
So we can just click create index from this screen.

117
00:09:18.140 --> 00:09:21.920
Let's adjust the fields area instead of fields one.

118
00:09:21.920 --> 00:09:28.430
Let's just have it so quotes and say title and then instead of type in the greater than less than just

119
00:09:28.430 --> 00:09:29.870
say text.

120
00:09:30.650 --> 00:09:30.890
Right.

121
00:09:30.890 --> 00:09:36.650
We want to create a text based index that can be searched for the title field on this line.

122
00:09:36.660 --> 00:09:38.630
Let's do the same thing for the body field.

123
00:09:39.200 --> 00:09:44.960
So quotes body and then just quotes text.

124
00:09:45.810 --> 00:09:49.670
OK, with that set up then towards the bottom we can just click create.

125
00:09:50.840 --> 00:09:53.450
It's asking us if we want to confirm this operation.

126
00:09:53.450 --> 00:09:56.800
Please confirm that you would like to create an index in this collection.

127
00:09:56.840 --> 00:09:57.830
Yes we do.

128
00:09:57.950 --> 00:09:59.300
So we can just click confirm.

129
00:10:01.280 --> 00:10:07.220
OK, and now on the indexes screen you can see we have two indexes, one for the ID and there's our

130
00:10:07.220 --> 00:10:09.860
new one for title text and body text.

131
00:10:10.310 --> 00:10:10.700
Cool.

132
00:10:10.700 --> 00:10:15.710
So now our search will be able to do its job perfectly to test this out.

133
00:10:15.710 --> 00:10:22.340
Let's just jump back into our front end search dogs file and let's find our method where we're sending

134
00:10:22.340 --> 00:10:24.740
off an axios request to our server.

135
00:10:26.110 --> 00:10:26.280
Right.

136
00:10:26.570 --> 00:10:28.910
So we have this method named send request.

137
00:10:29.120 --> 00:10:34.400
This is what's going to happen after that three second typing delay within the then area.

138
00:10:34.430 --> 00:10:40.910
This will run if the promise is successful, if Axios is able to send off a request to our server and

139
00:10:40.910 --> 00:10:48.260
receive a response well within the parentheses for this then function, let's say response.

140
00:10:48.680 --> 00:10:52.730
And remember, if you have exactly one parameter, you don't need the parentheses around it.

141
00:10:53.420 --> 00:10:57.440
OK, so this parameter represents the servers response.

142
00:10:57.590 --> 00:10:59.870
In this case, it's going to be JSON data.

143
00:11:00.260 --> 00:11:04.100
So within this function, just as a test, let's log to the console.

144
00:11:04.100 --> 00:11:09.080
So console that log response dot data.

145
00:11:09.650 --> 00:11:09.920
Right.

146
00:11:09.920 --> 00:11:10.970
Just as a test.

147
00:11:11.150 --> 00:11:16.700
We want to be able to visually see the data that the server is sending back to the Web browser.

148
00:11:17.180 --> 00:11:18.710
Let's save this file.

149
00:11:18.920 --> 00:11:24.770
But before we truly test this out, I want to create a few additional posts just so we have additional

150
00:11:24.770 --> 00:11:25.880
data to search from.

151
00:11:26.450 --> 00:11:32.750
So create post, I'll give it a title of JavaScript is great for the body.

152
00:11:33.320 --> 00:11:35.690
Web development is fun.

153
00:11:36.500 --> 00:11:37.910
Lorem ipsum.

154
00:11:39.140 --> 00:11:39.800
Save that.

155
00:11:42.760 --> 00:11:51.100
Maybe create another post, success is great, web development is fun, lorem ipsum.

156
00:11:54.590 --> 00:11:59.540
OK, cool, if you already had sample post to work with, just make sure that you refresh your front

157
00:11:59.540 --> 00:12:04.610
end and let's try to perform a search actually before we perform a search.

158
00:12:04.640 --> 00:12:06.200
Be sure to open up your console.

159
00:12:06.590 --> 00:12:07.040
So right.

160
00:12:07.040 --> 00:12:11.160
Click and choose, inspect and then click on the console tab.

161
00:12:11.780 --> 00:12:17.720
And now if I search for Lorem, since that's included in multiple posts, if you wait three thousand

162
00:12:17.720 --> 00:12:18.530
milliseconds.

163
00:12:19.190 --> 00:12:20.060
Hello everyone.

164
00:12:20.090 --> 00:12:24.850
This is a quick update note from Future Brad in March of twenty twenty one.

165
00:12:24.860 --> 00:12:29.320
So up until very recently we would have successfully seen the results here.

166
00:12:29.840 --> 00:12:35.600
However, Mongo DB has recently had an update and we do need to change our code a bit to get things

167
00:12:35.600 --> 00:12:36.110
to work.

168
00:12:36.590 --> 00:12:42.440
So back in the command line, you can see that our back end crashed and the error message is field path.

169
00:12:42.440 --> 00:12:44.890
Field names may not start with dollar sign.

170
00:12:45.290 --> 00:12:50.090
Now, this is not a very helpful error message and I actually had to do a bit of Googling.

171
00:12:50.570 --> 00:12:56.600
It turns out that dollar signs sort needs to come after dollar signs project.

172
00:12:57.020 --> 00:13:00.290
If the thing you're sorting by is text score.

173
00:13:00.800 --> 00:13:06.590
And if you think about the way that our reuseable post query function works, it's adding these aggregate

174
00:13:06.590 --> 00:13:13.400
operations at the beginning and then adds on the other boilerplate operations after that, meaning that

175
00:13:13.400 --> 00:13:19.040
the dollar sign project from our reasonable post query is going to come after sort in.

176
00:13:19.040 --> 00:13:22.130
This causes the problem with the newest version of Mongo DB.

177
00:13:22.160 --> 00:13:27.920
So let me show you how I would solve this so that we don't have to completely refactor all of our code

178
00:13:28.550 --> 00:13:29.000
right now.

179
00:13:29.000 --> 00:13:32.030
Let's go find our reuseable post query function.

180
00:13:32.750 --> 00:13:34.760
So for me it's round line number seventy nine.

181
00:13:34.760 --> 00:13:37.640
This is where we're creating that function right now.

182
00:13:37.640 --> 00:13:39.170
It just has two parameters.

183
00:13:39.410 --> 00:13:42.470
I'd actually add on a third parameters of karma.

184
00:13:42.620 --> 00:13:49.760
You could call it whatever you want, but I'll call it final operations and we can give it a default

185
00:13:49.760 --> 00:13:52.090
value of just an empty array.

186
00:13:52.520 --> 00:13:56.960
So this way, even though we don't pass in third argument, every single time we call this function,

187
00:13:57.170 --> 00:13:59.180
things will still work out just fine.

188
00:13:59.870 --> 00:14:06.680
OK, so we're taking the unique operations that come in and then we're catting on this boilerplate code

189
00:14:06.980 --> 00:14:08.720
and here's the dollar sign project.

190
00:14:08.720 --> 00:14:11.480
So we just want the sort to come after this.

191
00:14:11.840 --> 00:14:17.510
So what I would do is down here where this array ends and then after these closing parentheses, I would

192
00:14:17.510 --> 00:14:25.730
just say dot concat and then just add on final operations, final operations.

193
00:14:25.880 --> 00:14:30.290
OK, with this update in place, let's go back down to our search query.

194
00:14:31.280 --> 00:14:33.140
This is the code we wrote earlier in the lesson.

195
00:14:33.350 --> 00:14:37.730
And now we just want to adjust the way that we're calling reasonable post query.

196
00:14:38.120 --> 00:14:42.100
So this entire support line, I would just copy or cut that into your clipboard.

197
00:14:42.110 --> 00:14:43.010
So get rid of it.

198
00:14:44.000 --> 00:14:46.820
And then we no longer need this comma at the end of this line.

199
00:14:47.390 --> 00:14:52.460
And now when we're calling this reuseable post query function, this array is our first argument.

200
00:14:52.820 --> 00:14:54.560
After that array, let's have a comma.

201
00:14:54.710 --> 00:14:56.030
Let's have our second value.

202
00:14:56.030 --> 00:15:00.470
Just be undefined because in this case, the visitor ID doesn't matter.

203
00:15:00.620 --> 00:15:05.300
We're only including this second argument so that we can have a third argument and this will be our

204
00:15:05.300 --> 00:15:06.470
final operation.

205
00:15:06.470 --> 00:15:10.550
So I would just include square brackets and then just paste back in your clipboard.

206
00:15:11.210 --> 00:15:13.670
This way sort will come after project.

207
00:15:14.090 --> 00:15:16.040
Now, you don't always need it to come after.

208
00:15:16.520 --> 00:15:21.830
But in this case, since we were sorting by text score, this is necessary with the newest version of

209
00:15:21.830 --> 00:15:22.580
Mongo DB.

210
00:15:22.580 --> 00:15:24.830
So let's go ahead and save this file.

211
00:15:25.820 --> 00:15:29.300
Now, back in the browser if I search for Lorem once again.

212
00:15:34.940 --> 00:15:42.410
In my console, perfect, cool, we see an array with two items, so each one's an object and then we

213
00:15:42.410 --> 00:15:45.040
can see their title and their body content.

214
00:15:45.470 --> 00:15:48.260
But if I search for something that should only have one result.

215
00:15:48.290 --> 00:15:50.090
So JavaScript.

216
00:15:55.030 --> 00:16:01.270
Cool, we see an array with just one object in it now in our next lesson, we're going to take this

217
00:16:01.270 --> 00:16:07.860
raw JSON data and use it to generate HTML that will look like this.

218
00:16:08.200 --> 00:16:10.860
Only the data will be real and dynamic.

219
00:16:11.320 --> 00:16:17.350
However, before we jump into our next lesson, I do want to cover one detail within this JSON.

220
00:16:17.530 --> 00:16:25.120
If we expand an object, you can see that in addition to tidal and body, we're also making a property

221
00:16:25.120 --> 00:16:27.050
named Author ID available.

222
00:16:27.580 --> 00:16:32.650
Now, this is not a huge vulnerability, but in my opinion, there's no need for the general public

223
00:16:32.860 --> 00:16:36.220
to be able to see the user ID of another account.

224
00:16:36.670 --> 00:16:42.880
A general practice that I like to follow is that my model should not leak out or expose any data that

225
00:16:42.880 --> 00:16:46.470
I don't 100 percent need it to expose and leak out.

226
00:16:47.080 --> 00:16:53.500
In this case, the front end of our website has absolutely no need for the authorized right.

227
00:16:53.500 --> 00:16:59.860
We're only using that on the server side to determine the value for this is visiter owner property.

228
00:17:00.310 --> 00:17:07.060
So within our post model, let's set things up so that we strip out this authorized property before

229
00:17:07.060 --> 00:17:09.530
actually returning data to our controller.

230
00:17:10.000 --> 00:17:17.850
So back in our text editor, back in uppercase post model, let's look for our reusable post query function.

231
00:17:18.430 --> 00:17:21.340
It's the line that begins with post reuseable.

232
00:17:21.340 --> 00:17:23.490
Post query equals a function.

233
00:17:24.190 --> 00:17:29.890
So after we perform our aggregate operations, if we scroll down a bit here, we see the area where

234
00:17:29.890 --> 00:17:33.340
we are using map to loop through our array of posts.

235
00:17:33.610 --> 00:17:39.610
And on this line, we clearly do need the authority to determine if the current visitor is the owner

236
00:17:39.610 --> 00:17:40.420
of this post.

237
00:17:40.870 --> 00:17:47.830
However, below this line, we now have no need for the authorized, so let's just get rid of it in

238
00:17:47.830 --> 00:17:49.770
the object that this is going to return.

239
00:17:50.410 --> 00:17:57.700
Now, we could say delete post DOT author ID and that would work perfectly.

240
00:17:57.970 --> 00:18:01.660
But studies have shown that this is a rather slow operation.

241
00:18:01.870 --> 00:18:08.020
If you're going to be looping through an array and performing it multiple times instead, it's much

242
00:18:08.020 --> 00:18:15.790
more efficient to just say post dot author IDE should equal undefined.

243
00:18:16.480 --> 00:18:18.220
Let's go ahead and save this.

244
00:18:18.370 --> 00:18:24.310
And then back on the front end of our site, I perform one more search, maybe if I search for success.

245
00:18:27.440 --> 00:18:28.760
Here we see the new results.

246
00:18:28.790 --> 00:18:34.910
It's just an array with one item, and if I expand it cool, you can see that authorized property is

247
00:18:34.910 --> 00:18:35.300
gone.

248
00:18:35.720 --> 00:18:36.980
That wasn't a huge deal.

249
00:18:37.100 --> 00:18:43.960
But now we can rest assured that the only data being exposed is data that the front end absolutely needs.

250
00:18:44.540 --> 00:18:45.920
Cool at this point.

251
00:18:45.920 --> 00:18:52.610
We're ready to jump in to our next lesson where we begin generating HTML based on this raw data.

252
00:18:53.240 --> 00:18:55.300
This should be a lot of fun to set up.

253
00:18:55.580 --> 00:18:58.130
So let's keep things rolling and I'll see you then.
