WEBVTT
1
00:00:01.980 --> 00:00:02.910
Hello, everyone.

2
00:00:03.210 --> 00:00:06.460
In this lesson, we are going to set up a controller.

3
00:00:06.930 --> 00:00:10.920
Don't worry, I do not expect you to know what a controller is at this point.

4
00:00:11.310 --> 00:00:15.330
Towards the end of this lesson, we will start to understand what a controller is.

5
00:00:15.660 --> 00:00:20.730
But at the beginning of this lesson, let's talk about the need that a controller feels.

6
00:00:21.240 --> 00:00:28.050
So in our previous lesson, we created our router not just final, and it has the responsibility of

7
00:00:28.050 --> 00:00:30.030
directing traffic, right.

8
00:00:30.040 --> 00:00:32.540
If a request comes in with this route.

9
00:00:32.820 --> 00:00:33.840
This should happen.

10
00:00:34.170 --> 00:00:37.590
If a request comes in with this route, then this should happen.

11
00:00:38.070 --> 00:00:38.880
And that's great.

12
00:00:39.210 --> 00:00:46.860
But it would be even better if our router didn't have to contain these actual functions and instead

13
00:00:46.860 --> 00:00:51.750
could just call said functions that actually live in a separate file.

14
00:00:52.170 --> 00:00:55.950
Now, at the moment, these functions only contain one real line of code, right?

15
00:00:55.960 --> 00:00:58.980
All this is doing is rendering a view or a template.

16
00:00:59.520 --> 00:01:03.180
So you might be thinking that our current setup is perfectly organized.

17
00:01:03.510 --> 00:01:11.670
However, once we start actually building an application and including all of its logic and validation

18
00:01:11.670 --> 00:01:18.240
and database interactions, there is going to be a lot more code here, a lot more.

19
00:01:18.840 --> 00:01:24.570
And the idea is that the router file should not have to store all of that logic and code.

20
00:01:24.930 --> 00:01:29.120
The router should just be a simple list of your routes, right.

21
00:01:29.130 --> 00:01:31.740
That should be its only real responsibility.

22
00:01:32.280 --> 00:01:37.640
So instead we can split these functions out so that they live in a separate file.

23
00:01:37.950 --> 00:01:42.400
And this is exactly where the idea of a controller comes into play.

24
00:01:43.050 --> 00:01:44.600
So let's do this right now.

25
00:01:44.610 --> 00:01:51.660
I want you to follow along with me and let's create a new folder in the root of our project folder.

26
00:01:52.170 --> 00:01:57.600
And let's name this new subfolder controllers.

27
00:01:58.260 --> 00:02:01.140
Technically, you could name this new folder, anything you want.

28
00:02:01.140 --> 00:02:05.310
But just so you and I are on the same page, let's go with this name of controllers.

29
00:02:05.950 --> 00:02:09.450
OK, now, within this new folder, let's create a new file.

30
00:02:10.820 --> 00:02:15.590
Actually, while we're at it, let's create three new files for the first five.

31
00:02:15.620 --> 00:02:20.540
Let's name a user controller, J.S..

32
00:02:21.820 --> 00:02:29.610
OK, then let's create a second file in the controllers folder and let's name this file post controller,

33
00:02:29.620 --> 00:02:38.440
Dot J.S. And finally, let's create one more file in that new folder and let's name it Falo controller

34
00:02:38.710 --> 00:02:39.870
Dot J.S..

35
00:02:40.810 --> 00:02:43.000
There's nothing special about these names.

36
00:02:43.150 --> 00:02:47.340
I just chose these file names due to the nature of our Web application.

37
00:02:47.770 --> 00:02:53.560
We know that we are going to have user accounts that you can register for or log in and log out of.

38
00:02:54.010 --> 00:02:59.890
We know that those users can create posts, right, with a title and a bit of body text.

39
00:03:00.250 --> 00:03:04.000
And we also know that this app should let the users follow each other.

40
00:03:04.600 --> 00:03:13.940
So big picture, we know that we are going to have to set up code to manage users posts and follows.

41
00:03:14.350 --> 00:03:21.520
So the idea is that each one of these files or controllers will contain relevant functions for that

42
00:03:21.520 --> 00:03:22.040
feature.

43
00:03:22.450 --> 00:03:27.600
So, for example, back in rutabagas, you do not need to type this in.

44
00:03:27.610 --> 00:03:29.200
This is just example code.

45
00:03:29.440 --> 00:03:37.720
But you could imagine if someone sends a post request to create post, well, then our router could

46
00:03:37.720 --> 00:03:44.230
just look inside the post controller for the create function that we have inside that file.

47
00:03:44.710 --> 00:03:51.970
Or if a user wants to log in, they would probably send a post request to a neutral of log in and then

48
00:03:51.970 --> 00:03:58.340
our router could just look inside the user controller for its function named Log In.

49
00:03:58.930 --> 00:04:04.660
So the idea here is that we can just create different functions that live within our controller files

50
00:04:04.930 --> 00:04:09.460
and then our router can easily call or execute those functions.

51
00:04:10.030 --> 00:04:16.540
Not only will this keep our code organized by feature, but it also allows our router to only have that

52
00:04:16.540 --> 00:04:20.280
one responsibility of really just listing out the routes.

53
00:04:20.680 --> 00:04:26.860
Now, at the moment, our controller files do not actually contain any functions.

54
00:04:27.490 --> 00:04:29.330
They're just empty files at this point.

55
00:04:29.590 --> 00:04:31.880
That's why this was just example code.

56
00:04:32.200 --> 00:04:38.650
So right now I will delete those example lines of code and also I'm going to delete this slash about

57
00:04:38.650 --> 00:04:42.720
route, because that was also just an example from the previous lesson.

58
00:04:43.240 --> 00:04:46.000
So now we can actually get to work.

59
00:04:46.330 --> 00:04:54.190
Let's set things up so that our base, you, RL or homepage you R-AL simply calls a function from one

60
00:04:54.190 --> 00:04:55.470
of our controllers here.

61
00:04:55.930 --> 00:04:57.140
Let me show you what I mean.

62
00:04:57.190 --> 00:05:04.840
So right now I want you to follow along with me and jump in to our file named user controller Dot J.S..

63
00:05:05.380 --> 00:05:11.930
Our goal in this file is to export multiple functions that can be accessed from another JavaScript file.

64
00:05:12.190 --> 00:05:17.050
Now, in our previous lesson, we learned about module exports.

65
00:05:17.530 --> 00:05:17.790
Right.

66
00:05:17.800 --> 00:05:20.260
You can set this to equal whatever you want.

67
00:05:20.500 --> 00:05:25.300
And that's what's going to get returned when you require this file from another file.

68
00:05:25.810 --> 00:05:30.850
Now, you do not need to type in the following, because I'm going to show you a cleaner way of setting

69
00:05:30.850 --> 00:05:32.980
this up in about 30 seconds from now.

70
00:05:33.400 --> 00:05:40.660
But if we wanted to export multiple functions, we could set module exports to equal an object.

71
00:05:40.870 --> 00:05:45.310
And then within that object, we could include multiple properties that are just methods.

72
00:05:45.670 --> 00:05:50.590
So we could have one named log in and set that to be a function, and then we could have another one

73
00:05:50.590 --> 00:05:53.290
named Logout and set that to be a function.

74
00:05:53.770 --> 00:05:56.350
And this syntax would work perfectly.

75
00:05:56.770 --> 00:06:03.580
But it is a bit awkward to have to nest a function within a property and within an extra set of curly

76
00:06:03.580 --> 00:06:04.690
brackets like this.

77
00:06:05.230 --> 00:06:11.120
So right now, I want to show you an alternative way that we can set up the exports for our file.

78
00:06:11.520 --> 00:06:15.760
I'm going to delete all of this, and this is what I actually want you to type out with me.

79
00:06:16.390 --> 00:06:23.620
We can say exports dot, and then we can make up a property name, for example, log in and then we

80
00:06:23.620 --> 00:06:27.550
can set that to equal whatever we want in this case, a function.

81
00:06:27.730 --> 00:06:30.020
So function parentheses, curly brackets.

82
00:06:30.580 --> 00:06:35.050
Now, when the node environment sees this code, it's going to know what to do with it.

83
00:06:35.470 --> 00:06:41.930
It's going to make sure that a property named log in is added to what's getting exported from this file.

84
00:06:42.520 --> 00:06:43.240
Big picture.

85
00:06:43.240 --> 00:06:49.000
We are achieving the same thing in terms of exporting something from this file is just that in this

86
00:06:49.000 --> 00:06:51.900
situation, this syntax feels a bit cleaner.

87
00:06:52.390 --> 00:06:57.240
So the idea is that then you could just copy and paste this for all the functions that we need.

88
00:06:57.370 --> 00:07:03.550
So you could paste that and say that we are going to have a log out function and then paste it in again.

89
00:07:03.550 --> 00:07:09.610
We are going to have a register function, right, because we are within the user controller file.

90
00:07:10.070 --> 00:07:15.280
So within the context of a user, they can log in, they can log out, they can register.

91
00:07:15.670 --> 00:07:20.950
And why don't we also create one more function and we can either call it home or.

92
00:07:21.050 --> 00:07:23.670
Dashboard, the name doesn't matter.

93
00:07:23.690 --> 00:07:28.460
Why don't we just go with home so we are on the same page, but the idea is that this is the function

94
00:07:28.460 --> 00:07:31.220
that will get called when someone visits the base.

95
00:07:31.220 --> 00:07:32.800
You are all right.

96
00:07:32.840 --> 00:07:36.770
If they are logged in, they would see their personalized dashboard.

97
00:07:37.340 --> 00:07:41.440
But if they are not logged in, then they should just see the guest homepage template.

98
00:07:41.960 --> 00:07:47.800
Now, for the time being, we have not actually set up the ability to register or log in yet.

99
00:07:48.110 --> 00:07:54.080
So for the time being, within this home function, we would just want to render that home guest HTML

100
00:07:54.080 --> 00:07:54.610
template.

101
00:07:54.920 --> 00:07:56.420
So let's set that up right now.

102
00:07:56.420 --> 00:08:01.880
Within this function, within the parentheses for this function, we would want to include parameters

103
00:08:01.970 --> 00:08:05.270
such as request and response write.

104
00:08:05.270 --> 00:08:10.940
This function is no different from all of the anonymous functions we've been creating for expressed

105
00:08:10.940 --> 00:08:11.600
so far.

106
00:08:11.900 --> 00:08:18.170
If we jump back into rutabagas, it's the exact same thing as this second argument.

107
00:08:18.710 --> 00:08:22.130
We're simply defining a function that should run for that root.

108
00:08:22.790 --> 00:08:26.650
So backing user controller exists within this home function.

109
00:08:26.660 --> 00:08:35.450
Let's just say response dot render and the name of our view or the name of our template was Home Dasch

110
00:08:35.450 --> 00:08:36.080
guest.

111
00:08:36.630 --> 00:08:42.620
OK, let's go ahead and save this file and then we just need to jump in to rutabagas.

112
00:08:42.890 --> 00:08:47.200
And our first step is to import or require in that new file.

113
00:08:47.660 --> 00:08:52.880
So up towards the top, maybe right below this const router line, let's add a new line and let's say

114
00:08:53.120 --> 00:09:01.730
const and let's name the variable user controller and just set it to equal and then just use the require

115
00:09:01.730 --> 00:09:02.330
function.

116
00:09:02.900 --> 00:09:04.910
And we provided a file path.

117
00:09:05.390 --> 00:09:11.030
So we begin with dot forward slash to look within the current directory and then we want to look in

118
00:09:11.030 --> 00:09:19.220
the folder named controllers and then we want to find the file named user controller again.

119
00:09:19.220 --> 00:09:21.110
You do not need to include the DOT.

120
00:09:21.680 --> 00:09:23.300
When you are requiring a file.

121
00:09:23.960 --> 00:09:28.970
OK, now that we've loaded that file in, let's just change the route for our homepage.

122
00:09:29.210 --> 00:09:32.720
So we want to keep router target and the euro that we're looking for.

123
00:09:32.840 --> 00:09:37.940
But we do want to get rid of the second argument, which is the function so you can keep this comma,

124
00:09:37.940 --> 00:09:41.000
but just get rid of function all the way until it's close.

125
00:09:41.000 --> 00:09:42.080
Closing curly brackets.

126
00:09:42.680 --> 00:09:42.950
Right.

127
00:09:42.950 --> 00:09:46.520
So we're back to this when someone sends a request for this euro.

128
00:09:46.760 --> 00:09:53.570
And then for the second argument, we just say user controller, the variable that we just created,

129
00:09:53.570 --> 00:09:56.240
that's going to be the exports of our controller file.

130
00:09:56.540 --> 00:10:02.390
And then we look inside it for our home function or our home method.

131
00:10:03.060 --> 00:10:05.240
Let's go ahead and save this file.

132
00:10:05.570 --> 00:10:10.550
And then if you need to jump into the command line and make sure that your app is running, you can

133
00:10:10.550 --> 00:10:16.630
always just run the command npm run watch and then let's jump over to the browser and test it out.

134
00:10:16.640 --> 00:10:25.010
So if I refresh localhost Colen three thousand, we see that everything is still working perfectly cool.

135
00:10:25.460 --> 00:10:31.790
Now that we have the basic organization of a router and a controller set up, let's look ahead to our

136
00:10:31.790 --> 00:10:34.010
next actual task.

137
00:10:34.460 --> 00:10:39.710
I think it would make sense to focus on the ability of a visitor to register for an account.

138
00:10:40.220 --> 00:10:47.150
So for our first step, let's go into our view or HTML template for this homepage and make sure that

139
00:10:47.150 --> 00:10:51.170
we were aware of what you rl this form attempts to post to.

140
00:10:51.440 --> 00:10:54.330
In other words, where is it going to send its request to.

141
00:10:54.890 --> 00:10:58.940
So back in our text editor, let's look within our views.

142
00:10:58.940 --> 00:11:07.790
Subfolder for the file named home dash guest SJS and scroll down to line number 42.

143
00:11:10.060 --> 00:11:16.270
Online 42, you'll see an opening form tag right now, you can see the action attribute is set to a

144
00:11:16.270 --> 00:11:17.740
placeholder hashtag.

145
00:11:18.160 --> 00:11:25.560
Let's get rid of that and say Slash and you could make up any Eurail, but let's just go a slash register.

146
00:11:26.140 --> 00:11:32.890
Let's go ahead and save that and then jump into our rutabagas file and tell our application what it

147
00:11:32.890 --> 00:11:35.470
should do when it receives a post request to that.

148
00:11:35.470 --> 00:11:41.710
You are so right below this router target line, let's add a new line and say rude or not post.

149
00:11:42.490 --> 00:11:46.660
The first argument should be a neutral of slash register.

150
00:11:47.230 --> 00:11:53.560
And for the second argument, let's just look within our user controller for the function or method

151
00:11:53.560 --> 00:11:55.080
named Register.

152
00:11:55.780 --> 00:11:59.670
Let's save that and then jump in to our user controller file.

153
00:12:00.460 --> 00:12:03.880
Remember, we set up these empty or placeholder functions.

154
00:12:04.120 --> 00:12:10.510
So for the register function within the parentheses for the function, let's be sure to include request

155
00:12:10.510 --> 00:12:15.370
and response and within the body of this function for the time being.

156
00:12:15.370 --> 00:12:17.410
Let's just send back a bit of text.

157
00:12:17.410 --> 00:12:23.270
So response dot send and just say thanks for trying to register.

158
00:12:23.800 --> 00:12:27.020
Be sure to save this file and then let's test it out.

159
00:12:27.040 --> 00:12:29.740
So back in the browser, be sure to refresh.

160
00:12:29.740 --> 00:12:34.510
And then if we try to submit this registration form, if you just click the large green button.

161
00:12:35.860 --> 00:12:36.080
Cool.

162
00:12:36.130 --> 00:12:36.610
We see.

163
00:12:36.620 --> 00:12:38.140
Thanks for trying to register.

164
00:12:38.560 --> 00:12:45.730
We included this fake sample message because actually registering a user is a big topic that needs its

165
00:12:45.730 --> 00:12:46.620
own lesson.

166
00:12:46.960 --> 00:12:52.360
For example, we cannot trust visitors to enter valid information into this form.

167
00:12:52.750 --> 00:12:57.500
On the server side, we need to make sure that they did not leave any of the fields blank.

168
00:12:57.880 --> 00:13:02.440
We need to make sure that their password contains enough characters for security reasons.

169
00:13:02.800 --> 00:13:05.910
We need to make sure they entered a valid email address.

170
00:13:06.220 --> 00:13:10.290
We need to make sure that their username doesn't contain any weird or strange characters.

171
00:13:10.630 --> 00:13:15.490
We need to make sure that both their username and email are unique and not already in use.

172
00:13:15.790 --> 00:13:17.040
So on and so forth.

173
00:13:17.530 --> 00:13:23.710
Now, in the name of staying organized, we do not want to include all of that business logic and data

174
00:13:23.710 --> 00:13:25.580
modeling in our controller.

175
00:13:26.050 --> 00:13:32.080
Instead, we want to keep that code that enforces all of those rules I just described in a separate

176
00:13:32.080 --> 00:13:35.290
file so that our controller does not become bloated.

177
00:13:35.770 --> 00:13:41.140
Now, at this point, I realize you might be getting frustrated with the seemingly endless cycle of

178
00:13:41.140 --> 00:13:43.320
splitting code into separate files.

179
00:13:43.660 --> 00:13:49.630
Don't worry, there's a method to the madness and we only have one more piece of this file splitting

180
00:13:49.630 --> 00:13:50.860
puzzle left to go.

181
00:13:51.280 --> 00:13:53.680
So where is all this file splitting leading us?

182
00:13:54.070 --> 00:14:00.040
Well, for this app we are following the super popular MVC pattern.

183
00:14:00.400 --> 00:14:06.940
MVC is an acronym that stands for Model View Controller.

184
00:14:07.360 --> 00:14:14.530
The idea with the MVC pattern is to keep your code organized into these three distinct components so

185
00:14:14.530 --> 00:14:19.420
that you avoid a tangled up spaghetti mess of code that becomes unmanageable.

186
00:14:19.720 --> 00:14:25.420
And really quick, let's go over the three letters or the three components of the MVC pattern.

187
00:14:25.840 --> 00:14:32.470
So first is the M, which stands for model and the model is where we would include all of our business

188
00:14:32.470 --> 00:14:37.170
logic or all of the rules that we want to enforce on our data.

189
00:14:37.780 --> 00:14:40.870
So, for example, a user's username must be unique.

190
00:14:41.140 --> 00:14:45.460
Their password must be at least twelve characters long, so on and so forth.

191
00:14:45.670 --> 00:14:49.330
Essentially the model is where we model our data.

192
00:14:49.660 --> 00:14:50.050
All right.

193
00:14:50.050 --> 00:14:58.210
Moving on to the V in MVC, the stands for View and the View is self-explanatory in the context of a

194
00:14:58.210 --> 00:14:58.990
Web app.

195
00:14:58.990 --> 00:15:06.370
The View is our HTML template or view file, and that's just the HTML that the users will see in their

196
00:15:06.370 --> 00:15:07.150
Web browser.

197
00:15:07.420 --> 00:15:10.510
We already created a views folder in our project.

198
00:15:10.510 --> 00:15:13.830
So again, I think views is pretty self-explanatory.

199
00:15:14.200 --> 00:15:19.960
OK, and finally, moving on to the last letter and MVC C stands for controller.

200
00:15:20.350 --> 00:15:26.200
The controller is a bit harder to wrap your mind around and it might seem unnecessary at first.

201
00:15:26.470 --> 00:15:33.070
It's the responsibility of the controller to accept input in this case, network requests to our different

202
00:15:33.070 --> 00:15:39.400
routes and then the controller needs to convert that input into appropriate commands for our models

203
00:15:39.400 --> 00:15:40.240
and views.

204
00:15:40.570 --> 00:15:43.120
So we could say the controller is the middleman.

205
00:15:43.450 --> 00:15:47.920
Depending on the incoming request, the controller will call the appropriate model.

206
00:15:48.400 --> 00:15:52.780
Right, with the appropriate business logic and rules that we want to enforce on the data.

207
00:15:53.080 --> 00:15:59.290
And then once that's done, the controller will call the appropriate view and pass it any relevant dynamic

208
00:15:59.290 --> 00:16:00.520
data from the model.

209
00:16:01.030 --> 00:16:07.570
Now, if everything from the last two minutes about MVC is a blur and you're confused, don't worry.

210
00:16:07.780 --> 00:16:08.980
That's completely fine.

211
00:16:09.430 --> 00:16:16.870
No one in recorded human history has ever absorbed or fully understood MVC the first time they heard

212
00:16:16.870 --> 00:16:17.280
about it.

213
00:16:17.590 --> 00:16:24.490
So for now, as long as you're aware that MVC is an acronym to help us keep our code organized and you

214
00:16:24.490 --> 00:16:29.680
remember that the three words, our model, view and controller, even if that's all you absorbed,

215
00:16:29.680 --> 00:16:30.850
then you're right on track.

216
00:16:30.850 --> 00:16:33.480
And you know everything that I expect you to know.

217
00:16:33.850 --> 00:16:38.110
We learn through repetition and throughout the process of building this application.

218
00:16:38.260 --> 00:16:43.120
We're going to practice and review the MVC pattern again and again and again.

219
00:16:43.450 --> 00:16:49.010
And once you see it in action with all three parts working together, it will start to make sense.

220
00:16:49.480 --> 00:16:52.840
Now, keep in mind, though, that this is all just opinion.

221
00:16:53.200 --> 00:16:53.500
Right?

222
00:16:53.500 --> 00:17:00.490
At the end of the day, the MVC pattern or any pattern for organizing a code is all just subjective

223
00:17:00.490 --> 00:17:01.420
preferences.

224
00:17:01.810 --> 00:17:05.360
There's no, quote, right or wrong way to organize your code.

225
00:17:05.740 --> 00:17:11.800
Now, granted, when it comes to MVC, these aren't my super personal and unique opinions as much as

226
00:17:11.800 --> 00:17:15.460
they are just common industry standards that I've picked up over the years.

227
00:17:15.460 --> 00:17:17.730
But still, it's a subjective matter.

228
00:17:18.160 --> 00:17:22.480
So I do want to emphasize that you don't have to organize your project this way.

229
00:17:22.840 --> 00:17:28.360
As we already saw from app number one, you can create an app without any organization.

230
00:17:28.810 --> 00:17:34.690
Big picture MVC is just a very common pattern that you're going to come across in the industry.

231
00:17:34.840 --> 00:17:36.720
And so I want you to be familiar with it.

232
00:17:37.120 --> 00:17:43.390
Now, looking ahead in our next lesson, we're going to learn about the final puzzle piece in the MVC

233
00:17:43.390 --> 00:17:49.210
pattern that we have not covered yet, which is the model setting up our first model should be a lot

234
00:17:49.210 --> 00:17:49.600
of fun.

235
00:17:49.600 --> 00:17:52.180
So let's keep things rolling and I'll see you then.
