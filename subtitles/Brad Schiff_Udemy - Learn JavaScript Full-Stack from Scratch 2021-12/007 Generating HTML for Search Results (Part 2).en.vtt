WEBVTT
1
00:00:00.240 --> 00:00:06.470
We just need to do two things, number one, let's set it so the delay is no longer three thousand milliseconds.

2
00:00:06.780 --> 00:00:11.470
Let's set the delay to maybe seven hundred and fifty milliseconds, OK?

3
00:00:11.550 --> 00:00:17.610
And then after that, let's adjust this so that it uses the raw data instead of this hard coded static

4
00:00:17.610 --> 00:00:19.710
HTML for each link.

5
00:00:20.400 --> 00:00:25.560
Back in our text editor within our key press handler in the second if statement.

6
00:00:26.250 --> 00:00:31.110
When we say this typing wait time equals this is where we've set our delay.

7
00:00:31.500 --> 00:00:36.450
So instead of three thousand milliseconds, now that we've confirmed that's working, as we would expect,

8
00:00:36.840 --> 00:00:40.410
let's change this to maybe seven hundred or seven hundred and fifty.

9
00:00:41.260 --> 00:00:42.720
It's not an exact science.

10
00:00:42.720 --> 00:00:45.210
It's up to you to choose a number that feels right to you.

11
00:00:45.690 --> 00:00:46.680
I'll go with this.

12
00:00:47.310 --> 00:00:52.590
OK, now let's scroll down to the function named Render Results HTML.

13
00:00:53.040 --> 00:00:58.780
And all we need to do is create a dynamic template for each one of these elements.

14
00:00:59.310 --> 00:01:06.030
Let me show you how I would set this up so I would just copy one of the elements into my clipboard as

15
00:01:06.030 --> 00:01:06.680
a template.

16
00:01:07.470 --> 00:01:08.790
So just select one of them.

17
00:01:09.210 --> 00:01:10.000
Copy that.

18
00:01:10.380 --> 00:01:13.410
Now we are free to delete all of the elements.

19
00:01:16.320 --> 00:01:22.860
Right, there's four of these fake or hardcoded examples, so delete those and now within this template,

20
00:01:22.860 --> 00:01:28.200
literal, we can do something dynamic by saying dollar sign curly brackets.

21
00:01:28.800 --> 00:01:34.800
Now, remember, when we call this function, we're passing into it that raw JSON data or that array

22
00:01:34.800 --> 00:01:35.780
of posts.

23
00:01:36.270 --> 00:01:42.270
So within our dollar sign curly brackets, we'd want to begin working with that dynamic array posts.

24
00:01:42.840 --> 00:01:46.390
And we know that all arrays have access to a map method.

25
00:01:46.920 --> 00:01:51.070
Let's circle back to these parentheses, but we know that that's going to return a new array.

26
00:01:51.480 --> 00:01:53.340
We actually want a string of text.

27
00:01:53.340 --> 00:01:56.820
So then we could just call DOT join by default.

28
00:01:56.820 --> 00:02:01.730
It's going to separate the items with a comma as it converts an array into a string of text.

29
00:02:02.190 --> 00:02:07.660
But if we just say quotes with nothing in between, well, then nothing will be separating them.

30
00:02:07.950 --> 00:02:10.460
So this is perfect for HTML output.

31
00:02:11.010 --> 00:02:16.950
Now, within the parentheses for MAP, let's provide a function that will run once for each item in

32
00:02:16.950 --> 00:02:23.940
the posts array so we can use an arrow function parentheses arrow symbol, curly brackets within the

33
00:02:23.940 --> 00:02:28.740
body of this function, let's say return to back ticks in between them.

34
00:02:28.740 --> 00:02:30.310
Just paste in your clipboard.

35
00:02:30.990 --> 00:02:33.380
OK, that's the template for a link.

36
00:02:33.390 --> 00:02:39.870
Now we just need to hollow out certain values to use our actual data in order to do that within the

37
00:02:39.870 --> 00:02:44.400
parentheses for our function, we'd want to receive the current item that's being looped too.

38
00:02:44.790 --> 00:02:50.520
So we could just say post and remember, with an arrow function, if you have exactly one parameter,

39
00:02:50.670 --> 00:02:52.250
you don't need the parentheses.

40
00:02:52.860 --> 00:02:55.580
Now we can just begin hollowing out certain values.

41
00:02:55.860 --> 00:03:02.790
So the source for this image should be the author for this post so we can just get rid of the source.

42
00:03:05.250 --> 00:03:10.710
So its source equals empty quotes within those quotes, we can say dollar sign, curly brackets and

43
00:03:10.710 --> 00:03:15.180
then just post dot author Dot Avatar.

44
00:03:16.560 --> 00:03:21.900
OK, next up would be the title for this post wrapped in bold or strong tags.

45
00:03:22.200 --> 00:03:29.850
So get rid of the fake hardcoded title of example, post number one, and instead sign curly brackets

46
00:03:29.850 --> 00:03:33.060
and just say post dot title.

47
00:03:33.990 --> 00:03:37.970
OK, the next bit of dynamic data would be the author username here.

48
00:03:37.980 --> 00:03:46.680
So get rid of the hardcoded barks a lot dollar sign curly brackets instead and just say post dot author

49
00:03:46.890 --> 00:03:48.390
dot username.

50
00:03:49.110 --> 00:03:53.840
OK finally let's make be created on or published on date for the post dynamic.

51
00:03:54.240 --> 00:04:00.160
Now just so we don't need to create a new date object for the month and the day and the year.

52
00:04:00.390 --> 00:04:05.730
Let's do this within this function for map B for the return line.

53
00:04:05.730 --> 00:04:16.020
Let's add a new line and let's say let post date equal a new instance of the JavaScript date object

54
00:04:16.290 --> 00:04:20.630
and let's feed it in post dot created date.

55
00:04:21.240 --> 00:04:21.570
Cool.

56
00:04:21.570 --> 00:04:26.780
So now we can just reuse this one date object for the month, year and the day.

57
00:04:27.300 --> 00:04:29.280
So we named it post date.

58
00:04:29.850 --> 00:04:34.560
So for the month instead of zero, that's hard coded dollar sign curly brackets.

59
00:04:35.220 --> 00:04:38.900
Just say post date dot get month.

60
00:04:39.390 --> 00:04:48.540
OK, instead of the hardcoded day of fourteens, a dollar sign curly brackets post date dot get date

61
00:04:49.380 --> 00:04:57.960
and then instead of the hardcoded year dollar sign curly brackets post date dot get full year.

62
00:04:58.680 --> 00:04:59.070
Cool.

63
00:04:59.340 --> 00:05:02.400
Let's go ahead and save this and test it all out.

64
00:05:03.030 --> 00:05:05.460
So back in the browser be sure to refresh.

65
00:05:06.240 --> 00:05:11.160
If I perform a search for JavaScript there should be only one result.

66
00:05:11.940 --> 00:05:12.450
Cool.

67
00:05:12.450 --> 00:05:17.690
If I search for web development there should be at least two or three results.

68
00:05:18.150 --> 00:05:18.480
Yep.

69
00:05:18.900 --> 00:05:19.380
All right.

70
00:05:19.380 --> 00:05:24.480
And if I search for something that would return zero results, just a random string of text.

71
00:05:25.590 --> 00:05:25.980
Perfect.

72
00:05:25.980 --> 00:05:30.300
We see a red rectangle that says, sorry, we could not find any results for that search.

73
00:05:30.840 --> 00:05:34.260
Really quick, though, let's go back to a search that does pull in results.

74
00:05:36.940 --> 00:05:42.520
Let's make this hard coded number of four that always says that there's four items found, let's make

75
00:05:42.520 --> 00:05:43.440
that dynamic.

76
00:05:44.350 --> 00:05:52.160
So back in our text editor towards the top of this render results HTML method, we see this did with

77
00:05:52.160 --> 00:05:56.770
the class of list group dash item and we see search results.

78
00:05:56.770 --> 00:05:59.020
And to the right of that, we see four items found.

79
00:05:59.600 --> 00:06:00.430
Let's do this.

80
00:06:00.550 --> 00:06:05.380
Let's get rid of this hard coded for and say dollar sign curly brackets.

81
00:06:06.040 --> 00:06:08.200
We have a few options on how to handle this.

82
00:06:08.470 --> 00:06:14.590
If there's only one item or one result, does it really make sense to use the plural of the word items?

83
00:06:15.130 --> 00:06:19.300
It should just say one item, not one items found.

84
00:06:19.720 --> 00:06:25.720
So you could just wrap the S in parentheses here, or since we're using a programming language, we

85
00:06:25.720 --> 00:06:27.070
could make this dynamic.

86
00:06:27.400 --> 00:06:32.860
So let's get rid of the words items found here and let's handle all of that within this dollar sign

87
00:06:32.860 --> 00:06:33.910
curly brackets.

88
00:06:34.540 --> 00:06:40.000
Now, we are not allowed to have an if statement within a template literal, but we can use something

89
00:06:40.000 --> 00:06:41.950
called the ternary operator.

90
00:06:42.370 --> 00:06:44.920
So check this out with a ternary operator first.

91
00:06:44.920 --> 00:06:46.210
You include a condition.

92
00:06:46.210 --> 00:06:56.140
So let's say if posts length is greater than one, then we include a question mark and say what we would

93
00:06:56.140 --> 00:06:56.650
want to do.

94
00:06:56.650 --> 00:06:59.950
If that's the case for now, just place an X here.

95
00:07:00.250 --> 00:07:05.290
Then we include a colon and say what we would want to do if this is not the case.

96
00:07:05.770 --> 00:07:09.790
So I'll just include another X placeholder for this first X.

97
00:07:09.790 --> 00:07:12.100
That's where we would want to say plural.

98
00:07:12.760 --> 00:07:14.860
There are multiple results, more than one.

99
00:07:15.430 --> 00:07:23.380
So let's add back ticks and let's say just as a placeholder, five items found only we'd want the five

100
00:07:23.380 --> 00:07:24.280
to be dynamic.

101
00:07:24.280 --> 00:07:32.740
So get rid of that dollar, sign curly brackets and just say posts dot length, OK, for the second

102
00:07:32.740 --> 00:07:37.420
X, well, we just want to include either quotes or back tactics.

103
00:07:38.140 --> 00:07:40.240
In this case, we don't need to do anything dynamic.

104
00:07:40.240 --> 00:07:44.980
So just regular quotes would work and just say one item, right.

105
00:07:44.980 --> 00:07:46.990
Singular, one item found.

106
00:07:47.560 --> 00:07:49.660
Let's go ahead and save that and test it out.

107
00:07:50.950 --> 00:07:57.760
So be sure to refresh in the browser if I search for something that only has one result, perfect.

108
00:07:57.970 --> 00:07:59.740
One item found.

109
00:07:59.740 --> 00:08:09.070
But if I search for lorem cool two items plural found and I just noticed I missed an incredibly important

110
00:08:09.070 --> 00:08:09.670
detail.

111
00:08:09.940 --> 00:08:13.480
You should be able to click on one of these links to visit that post.

112
00:08:13.900 --> 00:08:14.590
That's OK.

113
00:08:14.710 --> 00:08:18.520
We just need to update the value within our map function.

114
00:08:18.970 --> 00:08:28.570
So let's do this within our post stop map area on that opening element or a tag instead of the placeholder

115
00:08:28.570 --> 00:08:30.070
hash tag for HSF.

116
00:08:30.340 --> 00:08:34.360
Let's just say slash post slash.

117
00:08:34.360 --> 00:08:38.650
I'd only we don't actually want the two letters ID here.

118
00:08:38.830 --> 00:08:41.020
Instead we'd want to do something dynamic.

119
00:08:41.320 --> 00:08:49.690
So let's say dollar sign curly brackets and just type in post dot underscore ID.

120
00:08:50.320 --> 00:08:51.880
Let's go ahead and save this.

121
00:08:52.620 --> 00:09:01.840
If I go back to the browser and refresh, perform a search for web development, maybe I'm interested

122
00:09:01.840 --> 00:09:03.070
in this success.

123
00:09:03.130 --> 00:09:03.880
Great post.

124
00:09:03.880 --> 00:09:04.600
Click on that.

125
00:09:05.860 --> 00:09:06.490
Perfect.

126
00:09:06.490 --> 00:09:08.110
It takes me to the appropriate U.

127
00:09:08.110 --> 00:09:15.460
RL before we close out this lesson, let's make sure that the avatars for a search are actually pulling

128
00:09:15.460 --> 00:09:16.630
in the correct value.

129
00:09:17.050 --> 00:09:22.180
What I mean by this is right now all of the posts are created by my same Brad user account.

130
00:09:22.570 --> 00:09:28.900
But in this window where I'm logged in with the Bark's alone account, I can create a post for the title.

131
00:09:28.900 --> 00:09:33.970
Maybe being a dog is fun for the body content.

132
00:09:33.970 --> 00:09:39.250
Let's give it a key word of lorem ipsum so that it will show up in a search with other posts.

133
00:09:39.700 --> 00:09:40.690
So Lamaism.

134
00:09:40.960 --> 00:09:42.980
I like playing catch.

135
00:09:43.780 --> 00:09:44.890
Go ahead and save that.

136
00:09:45.910 --> 00:09:52.690
OK, now if I perform a new search for lorem ipsum perfect.

137
00:09:52.690 --> 00:09:55.420
We do indeed see results from multiple users.

138
00:09:55.420 --> 00:09:57.370
Right Brad and barks a lot.

139
00:09:57.550 --> 00:10:00.670
We see their username, we see the date that it was created on.

140
00:10:01.240 --> 00:10:03.490
Everything is working as expected.

141
00:10:03.970 --> 00:10:06.160
That's going to bring this lesson to a close.

142
00:10:06.160 --> 00:10:09.040
But this segues nicely into our next feature.

143
00:10:09.460 --> 00:10:13.750
So let's say the Brat account searches for the keyword dog.

144
00:10:14.710 --> 00:10:15.940
They see this bit of content.

145
00:10:15.940 --> 00:10:17.380
Oh, being a dog is fun.

146
00:10:17.770 --> 00:10:19.390
Maybe I would click on that.

147
00:10:20.410 --> 00:10:26.200
And if I'm genuinely impressed by this quality content, I might want to begin following this.

148
00:10:26.200 --> 00:10:27.400
Barks a lot user.

149
00:10:27.970 --> 00:10:28.330
Right?

150
00:10:28.330 --> 00:10:34.120
Following users is a key part of this, that if you go back to your home page, remember when you log

151
00:10:34.120 --> 00:10:35.860
in, you're supposed to see a feed here.

152
00:10:36.270 --> 00:10:42.600
Of the latest posts from the users you follow, so in our very next lesson, we're going to begin working

153
00:10:42.780 --> 00:10:44.490
on the follow feature.

154
00:10:45.010 --> 00:10:47.310
Let's keep things rolling and I'll see you then.
