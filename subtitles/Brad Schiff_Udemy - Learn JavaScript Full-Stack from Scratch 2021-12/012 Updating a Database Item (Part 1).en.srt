1
00:00:02,000 --> 00:00:03,000
Hello, everyone.

2
00:00:03,230 --> 00:00:09,460
In this lesson, we are going to learn how to update an existing database item or document.

3
00:00:09,950 --> 00:00:16,940
So, for example, what if the user wanted to change this existing by graps item to instead, say,

4
00:00:17,420 --> 00:00:19,730
buy two bags of grapes today?

5
00:00:20,150 --> 00:00:26,840
Well, before we even worry about how to write a. code that will talk to the Mongo DB database and actually

6
00:00:26,840 --> 00:00:34,430
update this document, we need to first take care of the user interface or user experience question

7
00:00:34,430 --> 00:00:42,170
of how and where do we give the user a new place to begin typing their updated desired text?

8
00:00:42,440 --> 00:00:48,290
If we want it to use what we already know, we can set things up so that when you click on this edit

9
00:00:48,290 --> 00:00:55,430
button, it takes you to a new page and you URL specifically for this document and that new page.

10
00:00:55,430 --> 00:01:01,220
And you would have a form and a text field that you could type into and then you could submit that form.

11
00:01:01,550 --> 00:01:08,750
But taking the user to an entirely different page just for a simple task like typing in a new value

12
00:01:09,050 --> 00:01:13,720
does not seem like the pinnacle of interface design and user experience.

13
00:01:14,060 --> 00:01:18,290
So instead of setting things up like that, let's learn something new in this lesson.

14
00:01:18,810 --> 00:01:25,400
Now, up until this point, the only way that we've known how to have the Web browser send user typed

15
00:01:25,400 --> 00:01:28,940
in data to our server is by submitting a form.

16
00:01:29,360 --> 00:01:31,080
But there's actually another way.

17
00:01:31,370 --> 00:01:37,880
So if we write a bit of JavaScript for the Web browser environment, we can actually program the browser

18
00:01:38,150 --> 00:01:46,580
to send data and requests to our server behind the scenes or on the fly without a hard page, refresh

19
00:01:46,580 --> 00:01:47,970
or reload or redirect.

20
00:01:48,440 --> 00:01:54,920
Now, this technology of being able to send seemless on the fly requests without a reload or form submit

21
00:01:55,100 --> 00:01:58,790
has absolutely nothing to do with databases.

22
00:01:58,970 --> 00:02:02,110
But this is a great time to learn about this new technique.

23
00:02:02,450 --> 00:02:07,490
So this lesson is actually going to be broken up into two videos in this first video.

24
00:02:07,640 --> 00:02:14,240
Our goal is to handle the user interface aspect and just get the user's new text value sent over to

25
00:02:14,240 --> 00:02:15,260
our node server.

26
00:02:15,620 --> 00:02:16,010
All right.

27
00:02:16,040 --> 00:02:23,330
Then in our next video in part two, we will actually use our node server to update that document in

28
00:02:23,330 --> 00:02:25,010
the Mongo DB database.

29
00:02:25,460 --> 00:02:28,370
OK, now let's jump into the action for this video.

30
00:02:28,730 --> 00:02:35,090
And we want to begin by writing JavaScript code for the Web browser environment, not the node environment.

31
00:02:35,540 --> 00:02:43,610
So let's jump into our text editor and within our server JS file, let's find the HTML template that

32
00:02:43,610 --> 00:02:46,100
we are sending back to the browser for the home page.

33
00:02:46,100 --> 00:02:50,270
You are out towards the bottom of this HTML template.

34
00:02:50,600 --> 00:02:55,790
We will see a closing body tag now right before or above that body tag.

35
00:02:55,790 --> 00:03:02,300
Let's add a new line and say script for an opening script tag and then let's close the script tag.

36
00:03:03,020 --> 00:03:08,720
And now in between this tag pair, we can include JavaScript designed for the web browser environment

37
00:03:08,720 --> 00:03:10,370
and it will execute it right.

38
00:03:10,430 --> 00:03:15,950
So just as a test, we could create an annoying alert pop up message so we could stay alert and then

39
00:03:15,950 --> 00:03:17,720
parentheses to call the alert method.

40
00:03:17,720 --> 00:03:23,960
And let's include quotes in a string of text says hello, OK, let's save this file just to test it

41
00:03:23,960 --> 00:03:24,260
out.

42
00:03:24,500 --> 00:03:28,040
OK then back in the browser, if I refresh, you can see that annoying.

43
00:03:28,220 --> 00:03:29,630
Hello alert pop up.

44
00:03:30,170 --> 00:03:30,560
Cool.

45
00:03:31,320 --> 00:03:32,840
So technically this works.

46
00:03:32,840 --> 00:03:36,230
We can include JavaScript for the web browser environment right here.

47
00:03:36,650 --> 00:03:43,310
But in order for us to stay mentally organized, I think we should create an entirely separate file

48
00:03:43,550 --> 00:03:45,840
for our browser based JavaScript.

49
00:03:46,250 --> 00:03:47,690
That way we don't get confused.

50
00:03:47,690 --> 00:03:47,990
Right.

51
00:03:47,990 --> 00:03:55,160
So we can have server GSB for our server based code and we can have a file named Browser ARGs for our

52
00:03:55,160 --> 00:03:56,420
browser based code.

53
00:03:56,810 --> 00:03:59,700
So let's do this in between the opening and closing script tag.

54
00:03:59,720 --> 00:04:00,680
Delete this code.

55
00:04:01,340 --> 00:04:08,450
But on the opening script tag, let's include an attribute and say SIRC for source and then say equals

56
00:04:08,450 --> 00:04:11,090
and then quotes in between the quotes.

57
00:04:11,090 --> 00:04:16,670
Let's point towards forward slash which is the root of the server, and then let's just point towards

58
00:04:16,670 --> 00:04:23,090
a non-existent file named browser JS and we will create this new file in just a minute or two.

59
00:04:23,450 --> 00:04:25,880
Now, there's nothing special about the name of this file.

60
00:04:25,880 --> 00:04:30,050
You could have chose Pizza, Jass or Unicorn Doorjambs.

61
00:04:30,320 --> 00:04:36,290
The idea is that we're just telling the browser to load a file that lives at this location and file

62
00:04:36,290 --> 00:04:36,540
name.

63
00:04:37,090 --> 00:04:43,850
OK, now, before we actually create this file, we need to recognize that by default, visitors of

64
00:04:43,850 --> 00:04:48,680
our website or web application do not have access to the root of our folder.

65
00:04:49,100 --> 00:04:52,630
So we don't want to just create browser JS right here.

66
00:04:53,060 --> 00:04:59,360
Instead, let's create a new subfolder within our project folder and then we can give special permissions

67
00:04:59,360 --> 00:05:00,150
to that folder.

68
00:05:00,650 --> 00:05:01,430
Let me show you what I.

69
00:05:01,450 --> 00:05:08,260
I mean, so within our overall project folder that contains our server and package that Jason just create

70
00:05:08,260 --> 00:05:15,190
a new subfolder and let's name it public, technically the name doesn't matter, but just go with public.

71
00:05:15,190 --> 00:05:17,010
So you and I are on the same page.

72
00:05:17,350 --> 00:05:22,520
OK, now, within that public folder, that's where we want to create our new JavaScript file.

73
00:05:22,840 --> 00:05:23,560
So I'm going to right.

74
00:05:23,560 --> 00:05:29,590
Click on the public folder and click new file, let's name it browser J.S..

75
00:05:30,340 --> 00:05:34,720
And within this brand new empty file, just as a test, let's alert out, pop up.

76
00:05:34,720 --> 00:05:38,940
That says hello from browser, James.

77
00:05:39,640 --> 00:05:41,500
Let's give that to save, OK?

78
00:05:41,590 --> 00:05:48,580
And now we just need to tell our Express app or server to allow incoming requests to have access to

79
00:05:48,580 --> 00:05:50,500
the public folder and its contents.

80
00:05:50,890 --> 00:05:57,220
So back in server, just scroll up to the very top and let's do this maybe right below this.

81
00:05:57,220 --> 00:05:58,420
Let DB line.

82
00:05:58,420 --> 00:06:07,660
Let's add a new line and say app dot use call the use method inside the parentheses, let's say express

83
00:06:07,900 --> 00:06:11,230
dot and then call a method named Statik.

84
00:06:11,950 --> 00:06:15,100
This is how we can serve up static existing files.

85
00:06:15,370 --> 00:06:21,280
So within these parentheses we just include the name of our folders of quotes and we named it public.

86
00:06:21,850 --> 00:06:26,700
This will make the contents of that folder available from the root of our server.

87
00:06:27,130 --> 00:06:28,620
Let's go ahead and save that.

88
00:06:29,020 --> 00:06:33,190
And now if we refresh in the Web browser, cool.

89
00:06:33,190 --> 00:06:34,510
We see hello from browser.

90
00:06:34,720 --> 00:06:41,500
James, now that we have that set up for our first actual bit of business, let's use JavaScript to

91
00:06:41,500 --> 00:06:46,960
tell the Web browser to listen for the event that one of the edit buttons is clicked on.

92
00:06:47,380 --> 00:06:54,520
So in our text editor, let's jump into the new browser JS file and let's get rid of this alert test

93
00:06:54,520 --> 00:06:58,020
line so we have a clean slate and write this out with me.

94
00:06:58,660 --> 00:07:04,570
Let's begin with the overall document object and then let's look inside it and call a method named ad

95
00:07:05,170 --> 00:07:06,340
event listener.

96
00:07:07,060 --> 00:07:08,470
We're going to give this to arguments.

97
00:07:08,470 --> 00:07:15,430
So a comma B for the first argument instead of this a placeholder, we are interested in the click event

98
00:07:16,450 --> 00:07:17,740
for the second argument.

99
00:07:18,010 --> 00:07:21,940
This is a function that we want to run when this event happens.

100
00:07:22,510 --> 00:07:27,830
So instead of B, let's create an anonymous function, function, parentheses, curly brackets.

101
00:07:28,390 --> 00:07:32,140
Now, we did not specify which element we are listening for clicks on.

102
00:07:32,140 --> 00:07:34,780
We just said the entire page or document.

103
00:07:35,290 --> 00:07:40,680
Now, if we want to listen for only clicks on these edit buttons instead of just clicking anywhere,

104
00:07:40,690 --> 00:07:45,820
even an empty space, we can do this within the parentheses for our function here.

105
00:07:45,820 --> 00:07:47,080
We can include a parameter.

106
00:07:47,350 --> 00:07:49,360
Let's just call it E for event.

107
00:07:49,600 --> 00:07:51,400
The name of this parameter doesn't really matter.

108
00:07:51,580 --> 00:07:54,640
But now within the body of our function, we can use this.

109
00:07:55,030 --> 00:08:02,650
So let's write out an if statement and say if parentheses curly brackets inside the parentheses for

110
00:08:02,650 --> 00:08:03,550
our if statement.

111
00:08:03,550 --> 00:08:08,290
Let's say only if and then say e dot target.

112
00:08:08,950 --> 00:08:14,470
This E parameter contains all sorts of information about the event that just took place and we can look

113
00:08:14,470 --> 00:08:20,320
inside it for the target property and that's going to be the HTML element that actually got clicked

114
00:08:20,320 --> 00:08:20,650
on.

115
00:08:21,040 --> 00:08:30,790
Now after target we can say dot class list DOT contains and contains is a method, so parentheses to

116
00:08:30,790 --> 00:08:31,810
call contains.

117
00:08:32,140 --> 00:08:37,870
Now in between these parentheses we can say quotes and let's type out edit me.

118
00:08:38,380 --> 00:08:45,490
So all together we're saying only if the element that was actually clicked on contains a class of edit

119
00:08:45,490 --> 00:08:49,990
me do we want our code here to actually run.

120
00:08:50,480 --> 00:08:56,110
OK, now within the body of our IF statement here, just as a test, why don't we alert a pop up message

121
00:08:56,110 --> 00:09:00,040
that says you clicked the edit button.

122
00:09:00,920 --> 00:09:07,330
OK, let's go ahead and save that and then let's jump in the browser and refresh now when I click one

123
00:09:07,330 --> 00:09:08,350
of the edit buttons.

124
00:09:08,770 --> 00:09:09,250
Awesome.

125
00:09:09,250 --> 00:09:16,360
We see that alert, you click the edit button and this will work for any of the edit buttons, but we

126
00:09:16,360 --> 00:09:19,930
don't actually want to display an annoying alert pop up.

127
00:09:20,230 --> 00:09:25,930
Instead, what we actually want to do is give the user a place where they can type in a new value.

128
00:09:26,260 --> 00:09:29,500
So back in our editor, let's actually get rid of this alert line.

129
00:09:29,830 --> 00:09:37,420
And in its place, let's call a Web browser function named prompt within the parentheses for prompt.

130
00:09:37,420 --> 00:09:43,810
We can give it a string of text and let's say enter your desired new text.

131
00:09:44,350 --> 00:09:46,600
OK, let's save that and test it out.

132
00:09:46,600 --> 00:09:49,150
So be sure to refresh back in the Web browser.

133
00:09:49,540 --> 00:09:51,910
And now when I click on one of the edit buttons.

134
00:09:52,330 --> 00:09:56,680
Cool, we see enter your desired new text and there's a place where we can type.

135
00:09:57,550 --> 00:10:01,270
However, right now, even if I click on the OK button that.

136
00:10:01,330 --> 00:10:08,080
Value is not being stored anywhere, so let's do this back in our ED at the beginning of this prompt

137
00:10:08,080 --> 00:10:13,120
line, let's say let and then a space and let's make up a variable name.

138
00:10:13,120 --> 00:10:18,400
I will call it user input and then a space and say equals and a space.

139
00:10:18,700 --> 00:10:23,980
So we're just saving whatever the user types in from this prompt into this variable.

140
00:10:24,430 --> 00:10:29,380
We can make sure this is working by maybe dropping down on a new line still within the body of our IF

141
00:10:29,380 --> 00:10:30,010
statement.

142
00:10:30,280 --> 00:10:35,440
And let's just log that variable to the console console log.

143
00:10:35,560 --> 00:10:37,830
The name of the variable is user input.

144
00:10:38,650 --> 00:10:40,140
Let's go ahead and save that.

145
00:10:40,150 --> 00:10:42,820
And back in the browser, be sure to refresh.

146
00:10:43,390 --> 00:10:50,290
And when we said console that log, that is the Web browsers console, not the no JS server console.

147
00:10:50,620 --> 00:10:52,810
So be sure to open up your browsers console.

148
00:10:53,200 --> 00:10:53,460
Right.

149
00:10:53,470 --> 00:10:56,590
Click and choose, inspect and then click console.

150
00:10:57,370 --> 00:10:57,600
OK.

151
00:10:57,820 --> 00:11:03,650
Now if I click on one of the edit buttons and maybe say testing, one, two, three, four or five and

152
00:11:03,650 --> 00:11:03,850
hit.

153
00:11:03,850 --> 00:11:09,200
OK, back in the browser console we see the value that the user typed in.

154
00:11:09,790 --> 00:11:13,660
Now we don't actually want to log this value to the browsers console.

155
00:11:13,990 --> 00:11:18,490
What we actually want to do is send this value to our node server.

156
00:11:18,880 --> 00:11:25,930
Now, this is going to be one of the aha moments of becoming a JavaScript developer because we can actually

157
00:11:25,930 --> 00:11:33,730
tell the Web browser to send a request to our server without submitting a form or visiting a new URL.

158
00:11:34,150 --> 00:11:38,320
We can just send a request to the server on the fly or behind the scenes.

159
00:11:38,560 --> 00:11:45,670
To do this, we could use a feature that modern Web browsers have that is named Fetch, but instead

160
00:11:45,670 --> 00:11:49,390
I like to leverage a solution named Axios.

161
00:11:49,720 --> 00:11:54,850
Axios lets us keep the code that we write super clean and super minimal.

162
00:11:55,180 --> 00:11:56,230
Let me show you what I mean.

163
00:11:56,240 --> 00:11:59,470
So right now, do this in a new Web browser tab.

164
00:11:59,650 --> 00:12:08,200
I want you to Google for Axios JS and within the first few results, what we are looking for is GitHub

165
00:12:08,200 --> 00:12:12,610
dot com slash, axios, slash, axios.

166
00:12:12,950 --> 00:12:15,580
Go ahead and click on that from that GitHub screen.

167
00:12:15,580 --> 00:12:20,890
If you scroll down a bit below all the list of files, you'll see a bit of instructions.

168
00:12:21,310 --> 00:12:22,540
Keep scrolling down.

169
00:12:22,930 --> 00:12:25,480
Look for this area named installing.

170
00:12:25,750 --> 00:12:31,690
If you scroll down a little bit further, we see this area named using CDN and then it offers this little

171
00:12:31,690 --> 00:12:32,680
snippet of code.

172
00:12:33,220 --> 00:12:37,630
What I want you to do is copy that snippet of code into your clipboard.

173
00:12:37,780 --> 00:12:38,980
So I'm going to select it.

174
00:12:39,550 --> 00:12:40,230
Copy it.

175
00:12:41,020 --> 00:12:43,450
OK, now let's jump back into our text editor.

176
00:12:44,050 --> 00:12:51,490
And in our server JS file, I want you to find the HTML template that we are sending for the home page.

177
00:12:51,700 --> 00:12:58,330
Scroll down to the bottom of the HTML template and right before the line where we include our browser

178
00:12:58,480 --> 00:13:01,510
JS file right above that line.

179
00:13:01,510 --> 00:13:03,370
I want you to paste in your clipboard.

180
00:13:04,480 --> 00:13:04,870
Cool.

181
00:13:05,140 --> 00:13:09,310
This code will make the Axios library available to us.

182
00:13:09,640 --> 00:13:17,050
So let's save this file and then jump back into our browser JS file and let's get rid of this console

183
00:13:17,050 --> 00:13:22,900
dot log line and in its place instead we want to send that data to our node server.

184
00:13:23,140 --> 00:13:30,040
So let's use the Axios library and then look inside it and call a method name to post.

185
00:13:30,490 --> 00:13:37,270
This is how we can send an on the fly post request to a server right after the parentheses for post.

186
00:13:37,270 --> 00:13:43,720
Let's also include a dot and then call a method named then and then after that let's include a dot and

187
00:13:43,720 --> 00:13:45,860
finally call a method named Catch.

188
00:13:46,540 --> 00:13:49,650
Now let's go through this line of code and understand what's going on.

189
00:13:49,990 --> 00:13:54,190
So within the parentheses for post, we want to give it to arguments.

190
00:13:54,550 --> 00:13:57,580
Let's say A comma, B as placeholders.

191
00:13:58,030 --> 00:14:00,040
This first argument is the U.

192
00:14:00,040 --> 00:14:02,930
RL that we want to send a post request to.

193
00:14:03,490 --> 00:14:08,410
So instead of the placeholder a, let's include a string of text with quotes and let's just make up

194
00:14:08,410 --> 00:14:08,680
a U.

195
00:14:08,680 --> 00:14:14,920
RL, let's say forward slash and then let's go with update Dasch item.

196
00:14:15,370 --> 00:14:22,180
OK, for the second argument, instead of this B placeholder, we include a JavaScript object, so curly

197
00:14:22,180 --> 00:14:28,120
brackets and this is the data that's going to get sent along with the request to that.

198
00:14:28,120 --> 00:14:29,440
You are all right.

199
00:14:29,440 --> 00:14:31,840
This is the data that the server will receive.

200
00:14:32,170 --> 00:14:34,480
So within our object, let's just create a property.

201
00:14:34,480 --> 00:14:40,990
We could give any name, but I'm going to go with text and let's just set it to equal so colon and then

202
00:14:40,990 --> 00:14:44,470
let's just pull in the value of this variable, whatever the user typed in.

203
00:14:44,500 --> 00:14:46,000
So that's user input.

204
00:14:46,690 --> 00:14:48,550
User input.

205
00:14:49,030 --> 00:14:49,540
All right.

206
00:14:49,540 --> 00:14:54,340
Now, this axios post method is going to return a promise.

207
00:14:54,580 --> 00:14:58,180
And this is the first time in the course that we have heard of a promise.

208
00:14:58,510 --> 00:15:01,060
We will learn more about promises later on in the.

209
00:15:01,170 --> 00:15:07,890
Course, for now, all you need to know is that a promise is very useful when we're not sure how long

210
00:15:07,890 --> 00:15:09,510
an action is going to take.

211
00:15:10,020 --> 00:15:10,310
Right.

212
00:15:10,320 --> 00:15:16,500
This action of sending request to the server could take one millisecond or it could take five thousand

213
00:15:16,500 --> 00:15:17,290
milliseconds.

214
00:15:17,340 --> 00:15:18,190
We don't know.

215
00:15:18,450 --> 00:15:23,100
So instead of the familiar callback function pattern that we've been seeing when we're not sure how

216
00:15:23,100 --> 00:15:27,210
long an action is going to take, this is another way of handling that situation.

217
00:15:27,550 --> 00:15:34,410
Basically, once you have a promise, you can then say dot then and inside the then parentheses is where

218
00:15:34,410 --> 00:15:41,070
you include a function that is not going to run until the action has had a chance to complete.

219
00:15:41,490 --> 00:15:46,680
And then finally, within the catch parentheses, this is where you include a function that will run

220
00:15:46,680 --> 00:15:48,820
if the action runs into a problem.

221
00:15:49,380 --> 00:15:52,470
So let's start with the then parentheses inside the then.

222
00:15:52,470 --> 00:15:54,720
Let's just include an anonymous function.

223
00:15:55,140 --> 00:15:59,340
It's a function parentheses, curly brackets for the time being.

224
00:15:59,340 --> 00:16:04,100
Let's not worry about doing anything on the browser side once this action completes.

225
00:16:04,290 --> 00:16:09,840
So inside the body of this function, let's just include a comment to ourselves with two forward slashes

226
00:16:10,260 --> 00:16:16,950
and say, do something interesting here in the next video, OK?

227
00:16:16,980 --> 00:16:22,890
And then finally, within the catch parentheses, let's include an anonymous function function, parentheses,

228
00:16:22,890 --> 00:16:23,900
curly brackets.

229
00:16:24,270 --> 00:16:29,790
For now, if we run into a problem list, just log a message to the browser console and say, please

230
00:16:29,940 --> 00:16:31,110
try again later.

231
00:16:32,100 --> 00:16:34,530
So now let's go ahead and save this file.

232
00:16:34,740 --> 00:16:41,460
And our final step in this video or this part of the lesson will be to receive that from the server

233
00:16:41,460 --> 00:16:42,000
side.

234
00:16:42,450 --> 00:16:43,580
Let me show you what I mean.

235
00:16:43,890 --> 00:16:49,940
So let's jump into our server JS file, and I want you to scroll down to the very bottom.

236
00:16:50,550 --> 00:16:56,850
So at the very, very bottom, let's add a brand new line and say app dot post, give it to arguments,

237
00:16:56,850 --> 00:17:03,360
a comma B for the first argument that you are all we are interested in would be slash update item.

238
00:17:03,600 --> 00:17:07,500
And then for the B argument, let's include an anonymous function.

239
00:17:07,530 --> 00:17:12,300
So function parentheses, curly brackets within the function parentheses.

240
00:17:12,300 --> 00:17:13,770
Let's include the parameters.

241
00:17:13,980 --> 00:17:15,720
Are you and R yes.

242
00:17:16,140 --> 00:17:22,920
Now in the next video, this is where we will actually communicate with the database to update a document.

243
00:17:23,280 --> 00:17:30,390
But for this video, let's just log the users typed in new value to the node or server console just

244
00:17:30,390 --> 00:17:33,860
to make sure that our server is successfully receiving that data.

245
00:17:34,440 --> 00:17:37,110
So let's say console, dot log.

246
00:17:37,470 --> 00:17:38,430
What do we want to log?

247
00:17:38,460 --> 00:17:42,330
Well, let's look inside the request object for the body object.

248
00:17:42,660 --> 00:17:47,640
This is the data that the axios request is sending over and inside that object.

249
00:17:47,640 --> 00:17:50,280
We are interested in the property named text.

250
00:17:50,760 --> 00:17:50,900
Right.

251
00:17:51,030 --> 00:17:52,800
That's the name we chose just a moment ago.

252
00:17:53,130 --> 00:17:56,640
Once we've logged that to the console, let's add one more line and just say R.

253
00:17:56,710 --> 00:17:59,970
S response and call the send method.

254
00:18:00,330 --> 00:18:04,580
And let's just send back a little bit of text that says success.

255
00:18:05,310 --> 00:18:08,520
Now, before we save this file, let's take care of one more detail.

256
00:18:08,730 --> 00:18:11,430
Scroll up to the very top of this file.

257
00:18:11,880 --> 00:18:16,650
And I want you to find the line of code where we say App Use Express.

258
00:18:16,890 --> 00:18:18,150
You are encoded.

259
00:18:18,540 --> 00:18:24,690
Remember, this line of code tells Express to automatically take submitted form data and add it to a

260
00:18:24,690 --> 00:18:27,690
body object that lives on the request object.

261
00:18:28,080 --> 00:18:33,690
Well, we just want to tell expressed to do that same thing only instead of four submitted forms.

262
00:18:33,840 --> 00:18:36,750
We want it for asynchronous requests.

263
00:18:37,230 --> 00:18:40,620
So right above this line of code, let's just add a new line and say app.

264
00:18:41,190 --> 00:18:49,980
Don't use inside the use parentheses, just say Express DOT, JSON and Jason is a method in this case,

265
00:18:49,980 --> 00:18:51,780
so include a pair of parentheses for it.

266
00:18:52,200 --> 00:18:57,960
All right, let's go ahead and save this file and be sure to have your command line visible so you can

267
00:18:57,960 --> 00:18:59,790
see our servers console.

268
00:19:00,300 --> 00:19:06,810
Let's go to the browser, be sure to refresh the application and if we click on an edit button and I'll

269
00:19:06,810 --> 00:19:13,830
just type something in like unicorn pizza, click, OK, jump back to our server console and there we

270
00:19:13,830 --> 00:19:14,910
see that value.

271
00:19:15,360 --> 00:19:21,300
This may not seem like a big deal, but this is a huge milestone in your JavaScript career.

272
00:19:21,690 --> 00:19:29,880
You just set up browser side JavaScript code to asynchronously, send a request to our node JS server.

273
00:19:30,360 --> 00:19:37,320
This means you are successfully using JavaScript on the front end and JavaScript on the back end.

274
00:19:37,920 --> 00:19:42,480
This, my friends, is what's referred to as full stack JavaScript.

275
00:19:42,870 --> 00:19:48,930
And in our very next lesson, we are going to learn how to take this data from our node server and actually

276
00:19:48,930 --> 00:19:52,860
update an existing document in our Mongo DB database.

277
00:19:53,370 --> 00:19:55,110
So excited to set this up with you.

278
00:19:55,140 --> 00:19:58,620
Let's keep our momentum rolling and I will see you in the next lesson.
