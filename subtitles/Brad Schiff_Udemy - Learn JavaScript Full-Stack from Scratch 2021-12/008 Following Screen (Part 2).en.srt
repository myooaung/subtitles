1
00:00:00,300 --> 00:00:07,440
Perfect now for our one final task in this lesson, let's set things up so that these values or these

2
00:00:07,440 --> 00:00:13,410
numbers in these links actually make sense and are actually pulling in real data.

3
00:00:14,010 --> 00:00:14,280
Right.

4
00:00:14,280 --> 00:00:20,670
Because at the moment, as we can see in our HTML or Ajay's template, these numbers are hard coded

5
00:00:20,670 --> 00:00:21,690
and fake.

6
00:00:22,620 --> 00:00:29,700
So within our user controller, we would want to ask our model to retrieve those real number or count

7
00:00:29,700 --> 00:00:37,650
values now instead of including the code to request those count numbers three times within our profile

8
00:00:37,650 --> 00:00:44,310
post screen and our profile follower screen and our profile following screen, let's instead remember

9
00:00:44,310 --> 00:00:50,190
that up at the very top of this file within user controller for you, it might not be at the very top

10
00:00:50,190 --> 00:00:57,650
of the file, but somewhere in our user controller you should have a function named shared profile data.

11
00:00:58,290 --> 00:01:06,060
Remember, all three of our profile based routes call this function, which makes it the perfect place

12
00:01:06,240 --> 00:01:08,530
to fetch these count numbers.

13
00:01:09,540 --> 00:01:15,540
So let's do this towards the bottom of the function, maybe right before we call.

14
00:01:15,540 --> 00:01:18,960
Next, let's add a comment to stay organized.

15
00:01:19,200 --> 00:01:26,070
Let's say retrieve post follower and following counts.

16
00:01:26,970 --> 00:01:27,420
All right.

17
00:01:27,420 --> 00:01:29,730
And let's begin with the post count.

18
00:01:30,750 --> 00:01:31,010
Right.

19
00:01:31,020 --> 00:01:35,430
We would want to know how many posts this current user has created.

20
00:01:36,270 --> 00:01:46,020
So let's say let post count equal and then we'd want to begin working with our post model.

21
00:01:46,680 --> 00:01:48,750
And this method doesn't exist yet.

22
00:01:48,900 --> 00:01:56,670
But you can imagine that it would have a method or function named count posts by author.

23
00:01:57,480 --> 00:02:01,930
And we can imagine that when we create this function, it should return a promise.

24
00:02:02,280 --> 00:02:09,630
So then we would want to await right before calling it OK, after this line, we would want to count

25
00:02:09,810 --> 00:02:17,670
how many followers this user has so we could create a variable, say, let follower count equal.

26
00:02:18,360 --> 00:02:22,020
And then you could imagine we'd want to use our follow model.

27
00:02:22,380 --> 00:02:30,360
And we haven't created this function yet, but we could call it Count Followers by Idy.

28
00:02:31,200 --> 00:02:35,210
And again, when we create this, we can set it up to return a promise.

29
00:02:35,520 --> 00:02:38,040
So we would await that promise.

30
00:02:38,670 --> 00:02:44,340
And then finally, we'd want following count so you could just copy and paste and duplicate this line

31
00:02:45,120 --> 00:02:48,390
and change this to let the following count.

32
00:02:48,840 --> 00:02:54,120
And we could call a function named count following by ID.

33
00:02:54,930 --> 00:03:01,740
OK, and then finally, we just want to add these values onto the request object and then we can call

34
00:03:01,740 --> 00:03:02,420
next.

35
00:03:02,730 --> 00:03:10,680
However, this is not the most optimal way of setting things up from a performance or speed perspective.

36
00:03:10,680 --> 00:03:12,110
We can do much better.

37
00:03:12,780 --> 00:03:20,580
This current setup would make sense if each one of our promises relied on the previous promise completing

38
00:03:20,730 --> 00:03:23,220
before we wanted to begin the next promise.

39
00:03:23,820 --> 00:03:29,610
However, in this case, we're just grabbing the counts of different values and none of these things

40
00:03:29,610 --> 00:03:31,140
rely on one another.

41
00:03:31,650 --> 00:03:36,990
In other words, all three of these tasks can run independently from one another.

42
00:03:37,500 --> 00:03:44,370
None of them depend on a value from the other, meaning there's no sense in a weighting or freezing

43
00:03:44,370 --> 00:03:47,850
the execution of further JavaScript actions like this.

44
00:03:48,570 --> 00:03:54,630
So instead of telling this action to begin and then freezing the world while we wait it to complete

45
00:03:54,780 --> 00:04:01,230
and then doing the same thing here, let's instead let all three of the promises begin running at the

46
00:04:01,230 --> 00:04:07,290
same time and then wait for all three to complete before calling next.

47
00:04:08,020 --> 00:04:09,810
Let me show you how we can do this.

48
00:04:10,470 --> 00:04:11,550
So first things first.

49
00:04:11,550 --> 00:04:15,180
Let's get rid of the word a wait here in all three instances.

50
00:04:15,450 --> 00:04:19,600
So delete a weight, OK?

51
00:04:19,800 --> 00:04:25,320
And since we're no longer waiting for these promises to complete or resolve, it really doesn't make

52
00:04:25,320 --> 00:04:27,840
sense to name these variables count.

53
00:04:28,170 --> 00:04:32,790
Instead, for example, we should name this post count promise.

54
00:04:33,540 --> 00:04:33,810
Right.

55
00:04:33,810 --> 00:04:37,350
Because that's what this is going to immediately return a promise.

56
00:04:37,710 --> 00:04:38,940
So let's do the same thing here.

57
00:04:38,940 --> 00:04:47,130
Let's say follower count promise equals and do the same thing here following count promise equals.

58
00:04:47,670 --> 00:04:51,900
And now check this out below all three of these promise lines.

59
00:04:51,900 --> 00:04:59,790
We can say a wait uppercase promise dot all within the parentheses for.

60
00:04:59,880 --> 00:05:06,750
All we give it an array, so square brackets, and then you just provide promises, so let's include

61
00:05:06,750 --> 00:05:07,500
all three of these.

62
00:05:07,510 --> 00:05:20,700
So post count, promise, karma, follower count, promise, karma following count, promise this approach

63
00:05:20,700 --> 00:05:24,220
will be noticeably faster from a performance standpoint.

64
00:05:24,810 --> 00:05:28,950
Now, there's no guarantee which one of these will complete or resolve first.

65
00:05:29,280 --> 00:05:30,790
But in this case, it doesn't matter.

66
00:05:31,350 --> 00:05:33,530
We don't care which one completes first.

67
00:05:33,570 --> 00:05:39,840
We are just waiting for all of them to complete before moving on.

68
00:05:40,710 --> 00:05:44,850
Now, ultimately, this all method is going to return an array.

69
00:05:45,480 --> 00:05:50,320
It will be an array with the values that each one of these promises resolves with.

70
00:05:50,880 --> 00:05:53,240
Now we want to keep track of those values.

71
00:05:53,460 --> 00:06:02,540
So at the very beginning of this line, let's say let results equal the array that all is going to return.

72
00:06:03,390 --> 00:06:11,280
So, for example, we could now say let post count equal and then look in the results array and grab

73
00:06:11,280 --> 00:06:13,020
the first item in the array.

74
00:06:13,860 --> 00:06:17,130
And then we could say let follower count equal.

75
00:06:17,280 --> 00:06:19,660
The second item in the array.

76
00:06:20,580 --> 00:06:26,280
Now, this approach would work just fine, but I actually am going to delete these two lines and instead

77
00:06:26,280 --> 00:06:30,380
show you a cleaner approach named Array D structuring.

78
00:06:31,320 --> 00:06:39,030
So instead of saying let results equal, let's get rid of results here and instead include square brackets

79
00:06:39,630 --> 00:06:48,870
within these square brackets, let's say post count, comma, follower count, comma, following count.

80
00:06:50,070 --> 00:06:57,030
This will create three different variables with these names and the first item will use the first value

81
00:06:57,210 --> 00:06:59,610
from the array that we are structuring.

82
00:07:00,240 --> 00:07:05,970
As you can guess, the second item will use the second value from the array that we are d structuring.

83
00:07:06,840 --> 00:07:07,250
Cool.

84
00:07:07,260 --> 00:07:13,810
So finally, let's just add these variables on to the request object before we call next.

85
00:07:14,280 --> 00:07:24,120
So down here we can just say request dot post count equals post count and then let's say request dot

86
00:07:24,420 --> 00:07:34,660
follower count equals follower count and request dot following count equals following count.

87
00:07:35,700 --> 00:07:38,380
OK, and then at that point we are ready to call next.

88
00:07:38,700 --> 00:07:45,750
Now before we save this file and then go actually create these promises, let's first be sure to include

89
00:07:45,750 --> 00:07:48,690
the current IDE within these parentheses.

90
00:07:49,290 --> 00:07:49,560
Right.

91
00:07:49,560 --> 00:07:54,960
In order for any of these three functions to do their job, they need to know which profile user we're

92
00:07:54,960 --> 00:07:55,690
looking for.

93
00:07:56,130 --> 00:08:04,800
So, for example, within the parentheses for count posts by author, let's say request dot profile

94
00:08:04,800 --> 00:08:13,440
user dot underscore ID and then you can just select that and copy and paste it into the parentheses

95
00:08:13,440 --> 00:08:18,680
for count follower's by idy in the parentheses for count following by id.

96
00:08:19,590 --> 00:08:19,970
Cool.

97
00:08:20,160 --> 00:08:27,030
Let's go ahead and save this file and now let's go jump into our post model and create a function with

98
00:08:27,030 --> 00:08:30,960
this matching name count posts by author.

99
00:08:31,650 --> 00:08:39,540
So within the root of our project, let's dig into our models folder and open up post Jass.

100
00:08:40,890 --> 00:08:48,810
Let's go ahead and scroll down to the very bottom of this file and right before the closing module exports,

101
00:08:48,810 --> 00:08:57,290
let's add a new line and say uppercase post dot count posts by author.

102
00:08:58,050 --> 00:09:02,610
Let's set this to equal a function within the parentheses.

103
00:09:02,610 --> 00:09:08,670
For this function, we'd want to receive the incoming ID and then within the body of the function,

104
00:09:08,670 --> 00:09:10,350
we'd want to return a promise.

105
00:09:10,350 --> 00:09:16,920
So return a new instance of uppercase promise within the parentheses for Promis.

106
00:09:16,920 --> 00:09:19,410
Let's give it an async arrow function.

107
00:09:19,410 --> 00:09:28,890
So async parentheses with parameters of resolve and reject and then the arrow symbol and then curly

108
00:09:28,890 --> 00:09:29,640
brackets.

109
00:09:30,720 --> 00:09:33,060
Within this function, let's create a variable.

110
00:09:33,060 --> 00:09:40,820
Let's say let post count equal and then let's begin working with our Mongo DB collection.

111
00:09:41,370 --> 00:09:44,520
So in this case, that's posts collection.

112
00:09:44,700 --> 00:09:51,000
We created this variable up at the top of this file and then we want to look inside it and call a Mongo

113
00:09:51,000 --> 00:09:55,230
DB method named Count Documents.

114
00:09:56,070 --> 00:09:58,800
Within these parentheses, we give it an object.

115
00:09:59,730 --> 00:10:06,180
Describing which documents we want to look for and count, so in this case, it would be a post document

116
00:10:06,180 --> 00:10:14,640
where the author field, so author Colvin matches whatever I.D. was passed into this overall function.

117
00:10:14,910 --> 00:10:18,210
So we can just say I'd cool.

118
00:10:18,220 --> 00:10:21,510
Now, this Mongo DB method is going to return a promise.

119
00:10:21,840 --> 00:10:27,840
So right after let post count equal, we would just include a wait here.

120
00:10:28,980 --> 00:10:36,720
OK, now below this line, let's say resolve our promise is ready to resolve with this as its value.

121
00:10:38,100 --> 00:10:41,300
So resolve in these parentheses post count.

122
00:10:42,150 --> 00:10:48,330
Now in order to save a bunch of typing, we can actually just copy and paste this entire function and

123
00:10:48,330 --> 00:10:49,930
use it in our follow model.

124
00:10:50,460 --> 00:10:51,720
Let me show you what I'm referring to.

125
00:10:51,730 --> 00:10:58,350
So copy this function into your clipboard, then let's go ahead and save this file.

126
00:10:58,620 --> 00:11:01,190
And now I want you to jump into the follow model.

127
00:11:01,770 --> 00:11:09,510
So in our project, look in your models folder and then jump in to followed JS down at the very bottom

128
00:11:09,510 --> 00:11:13,110
of this file, right above module exports.

129
00:11:13,110 --> 00:11:21,540
We can paste in our clipboard and then instead of uppercase post, let's change this to uppercase follow

130
00:11:22,110 --> 00:11:29,370
and then instead of count posts by author, this should be count follower's by IDE.

131
00:11:30,060 --> 00:11:32,070
OK then let's change this variable name.

132
00:11:32,070 --> 00:11:39,390
So instead of let post count we could say let follower count and then instead of working with our posts

133
00:11:39,390 --> 00:11:43,560
collection, we want to work with our follows collection.

134
00:11:44,340 --> 00:11:50,670
And then in terms of which documents we're trying to find to count instead of the author field matching

135
00:11:50,670 --> 00:11:57,870
our ID, we would want the followed ID to match the current ID.

136
00:11:59,190 --> 00:11:59,540
Cool.

137
00:11:59,550 --> 00:12:03,030
And then when this promise resolves, we'd want to resolve with this value.

138
00:12:03,450 --> 00:12:07,710
So instead of post count, we'd resolve with follower count.

139
00:12:08,610 --> 00:12:08,970
Cool.

140
00:12:08,980 --> 00:12:16,170
Now we just need to create one more function named count following by ID so you could go ahead and copy

141
00:12:16,170 --> 00:12:23,550
these lines into your clipboard and then right below this, just paste and change this name to count

142
00:12:24,900 --> 00:12:26,940
following by ID.

143
00:12:27,630 --> 00:12:33,120
You could change this variable from follower count to maybe just lowercase count.

144
00:12:34,050 --> 00:12:39,240
We'd still want to work with our follows collection only in terms of the documents that we want to count.

145
00:12:39,480 --> 00:12:47,550
Instead of performing a match on the followed ID field, we would want this to be the author ID field.

146
00:12:48,270 --> 00:12:54,600
And then in terms of the value that we resolve, we can just resolve with lowercase count.

147
00:12:55,950 --> 00:12:57,180
Cool at this point.

148
00:12:57,180 --> 00:12:59,430
Let's go ahead and save this file.

149
00:12:59,730 --> 00:13:05,280
And now let's jump back into our user controller file to refresh our memory of what we're doing.

150
00:13:05,970 --> 00:13:12,780
So within your projects folder, inside your controller folder, jump into user controller J.S..

151
00:13:13,680 --> 00:13:19,920
OK, so all of those promises that we just set up are ultimately running within our shared profile data

152
00:13:19,920 --> 00:13:20,490
function.

153
00:13:21,270 --> 00:13:28,020
Remember, this function is going to run for all three of our routes, the Post's route, the followers

154
00:13:28,020 --> 00:13:29,760
route and the following route.

155
00:13:30,390 --> 00:13:37,710
So now that we have these numbers or values, we just need to dig into the profile posts, screen function

156
00:13:37,980 --> 00:13:42,630
and actually pass that number into the template that's getting rendered.

157
00:13:43,230 --> 00:13:47,190
And then also do the same thing for the follower screen and the following screen.

158
00:13:47,760 --> 00:13:48,920
Let me show you what I mean.

159
00:13:49,350 --> 00:13:56,520
So within our user controller file, I want you to find the function that is named profile posts screen.

160
00:13:57,870 --> 00:14:00,000
For me, it's around line number ninety four.

161
00:14:00,000 --> 00:14:04,020
It begins with exports, dot profile posts screen.

162
00:14:04,800 --> 00:14:07,320
So let's do this when we are rendering our template.

163
00:14:07,620 --> 00:14:09,270
So response dot render.

164
00:14:10,170 --> 00:14:13,860
We just want to update the data that we are passing into the template.

165
00:14:14,460 --> 00:14:21,390
How about at the end of all of these properties we can add a comma and add one more, let's say counts

166
00:14:21,810 --> 00:14:24,960
colon and then let's set it to be an object.

167
00:14:24,960 --> 00:14:33,210
So curly brackets and let's give it a property named post count which should be request dot post count,

168
00:14:33,990 --> 00:14:44,130
comma, follower count, which should be request dot follower count, comma and then following count

169
00:14:44,400 --> 00:14:47,750
which should be request dot following count.

170
00:14:49,870 --> 00:14:50,020
Cool.

171
00:14:50,190 --> 00:14:57,240
Now we can just go ahead and copy this entire line into our clipboard and then we added it to the profile

172
00:14:57,240 --> 00:14:59,580
posts screen, but then we could paste into.

173
00:14:59,750 --> 00:15:07,730
To the profile, follower's screen and profile following screen, so be sure to select this new counts

174
00:15:07,730 --> 00:15:15,680
line into your clipboard, so copy that and then let's scroll down and find our profile follower's screen

175
00:15:15,680 --> 00:15:16,250
function.

176
00:15:16,700 --> 00:15:17,170
Here it is.

177
00:15:17,180 --> 00:15:23,000
And when we are rendering that template at the end of all these properties, just add a comma at the

178
00:15:23,000 --> 00:15:25,850
end dropdown and then paste in your clipboard.

179
00:15:26,780 --> 00:15:27,050
Cool.

180
00:15:27,050 --> 00:15:29,510
So the following screen now has that counts property.

181
00:15:29,750 --> 00:15:33,240
Let's scroll down and add it to our profile following screen.

182
00:15:33,800 --> 00:15:37,160
So within response to our render, let's just add one more property.

183
00:15:37,160 --> 00:15:40,300
So comma, dropdown and paste.

184
00:15:41,450 --> 00:15:41,780
Cool.

185
00:15:42,020 --> 00:15:44,030
Let's go ahead and save this.

186
00:15:44,300 --> 00:15:49,410
And now we just need to go into that shared template that powers this HTML.

187
00:15:50,150 --> 00:15:56,690
So remember that lives within your views folder and then the includes folder and its name is Profile

188
00:15:56,690 --> 00:15:58,790
Shared SJS.

189
00:15:59,480 --> 00:16:02,810
Remember, down at the bottom we have the three links.

190
00:16:02,840 --> 00:16:05,050
So the first link is the post count.

191
00:16:05,300 --> 00:16:14,450
Let's get rid of the hardcoded number of three and instead drop into SJS and we can just say counts

192
00:16:14,690 --> 00:16:16,750
dot post count.

193
00:16:17,540 --> 00:16:22,100
You can just copy and paste this section and do the same thing for these two lines.

194
00:16:22,100 --> 00:16:28,730
So get rid of the hardcoded three four follower's paste in your clipboard, change this to follower

195
00:16:28,730 --> 00:16:34,790
count and then let's get rid of the hardcoded two for following Paiste on your clipboard and change

196
00:16:34,790 --> 00:16:37,750
this to the following count.

197
00:16:38,450 --> 00:16:41,990
But go ahead and save this and test it out in the browser.

198
00:16:43,070 --> 00:16:45,590
So from the Brad profile, if I refresh.

199
00:16:48,120 --> 00:16:54,990
Perfect, I'm following one user, I don't have any followers, and if I click on posts, you can see

200
00:16:54,990 --> 00:16:58,270
that I yes, do indeed have four posts.

201
00:16:58,860 --> 00:17:00,950
Let's go check out the Bark's lot profile.

202
00:17:00,960 --> 00:17:03,420
So if I click on following go to Bachs a lot.

203
00:17:04,630 --> 00:17:04,950
Cool.

204
00:17:04,950 --> 00:17:05,760
We see Bachs a lot.

205
00:17:05,770 --> 00:17:09,300
Yes, they have one post click on followers.

206
00:17:09,300 --> 00:17:09,680
Yep.

207
00:17:09,720 --> 00:17:13,640
They have two followers and they are following zero users.

208
00:17:14,520 --> 00:17:15,180
Perfect.

209
00:17:15,510 --> 00:17:18,360
That's going to bring this lesson to a close.

210
00:17:18,720 --> 00:17:24,120
In our next lesson, we are finally going to set up our homepage feed.

211
00:17:24,930 --> 00:17:26,880
This should be a lot of fun to set up.

212
00:17:27,180 --> 00:17:30,120
So let's keep things rolling and I will see you then.
