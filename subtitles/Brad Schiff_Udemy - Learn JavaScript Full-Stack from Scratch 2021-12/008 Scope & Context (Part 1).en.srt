1
00:00:01,620 --> 00:00:05,770
Hello, everyone, and welcome back to the 10 days of JavaScript.

2
00:00:06,360 --> 00:00:08,420
Here we are in day number eight.

3
00:00:08,730 --> 00:00:14,000
And in this lesson, we are going to talk about scope and context.

4
00:00:14,460 --> 00:00:17,460
So what is scope and what is context?

5
00:00:17,880 --> 00:00:20,970
Well, here are my own sarcastic definitions.

6
00:00:21,330 --> 00:00:27,780
So I would say that scope is the biggest source of confusion regarding variables.

7
00:00:28,140 --> 00:00:34,390
And my definition for context would be the biggest source of confusion regarding objects.

8
00:00:34,890 --> 00:00:41,160
Now, these tongue in cheek definitions are not actually helpful, but right away they do let us know

9
00:00:41,160 --> 00:00:48,140
that scope has to do with variables and context has to do with objects.

10
00:00:48,570 --> 00:00:50,570
But beyond that, let's dive deeper.

11
00:00:50,940 --> 00:00:52,500
So let's start with scope.

12
00:00:52,500 --> 00:00:56,490
And then in the second half of this lesson, we can cover context.

13
00:00:56,880 --> 00:01:03,450
Now, instead of trying to explain the scope with only words, let's work through a few examples together

14
00:01:03,690 --> 00:01:05,780
where we can see scope in action.

15
00:01:06,240 --> 00:01:07,800
So imagine we have a variable.

16
00:01:07,810 --> 00:01:12,630
I'm going to say let my name equal a string of text.

17
00:01:13,520 --> 00:01:19,910
And now let's try to access this variable from within a function, so maybe down here, let's create

18
00:01:19,910 --> 00:01:20,960
a brand new function.

19
00:01:21,170 --> 00:01:22,900
You can name it whatever you want.

20
00:01:22,910 --> 00:01:29,480
I'm going to name it maybe amazing function, parentheses, curly brackets.

21
00:01:30,230 --> 00:01:36,470
And just as an example, let's try to log out to the console, the my name variable, just to see if

22
00:01:36,470 --> 00:01:37,540
we have access to it.

23
00:01:37,940 --> 00:01:47,000
So console dot, log my name, OK, and then let's actually call or execute this function to test it

24
00:01:47,000 --> 00:01:48,550
out on a new line.

25
00:01:48,580 --> 00:01:53,260
You can just call that function amazing function, OK.

26
00:01:53,360 --> 00:01:54,890
Now if we check the console.

27
00:01:55,490 --> 00:01:56,110
Awesome.

28
00:01:56,720 --> 00:01:58,100
Now this is just review.

29
00:01:58,280 --> 00:01:59,900
We've already done this before.

30
00:01:59,900 --> 00:02:02,510
So the question is why am I showing this to you?

31
00:02:02,960 --> 00:02:09,630
Well, it's because the topic of scope has to do with where we can access a variable from.

32
00:02:10,160 --> 00:02:11,370
Let me show you what I mean.

33
00:02:11,600 --> 00:02:17,420
So this code is working perfectly, but what if we move this first line of code here?

34
00:02:17,750 --> 00:02:20,910
What if we cut and paste it to live within the function?

35
00:02:21,410 --> 00:02:22,340
Let's try that out.

36
00:02:22,580 --> 00:02:24,770
Let's cut this first line into our clipboard.

37
00:02:27,890 --> 00:02:33,170
And then inside the body of our function, maybe right above the console line, paste in your clipboard,

38
00:02:33,780 --> 00:02:37,580
OK, and then let's cut and paste this console log line.

39
00:02:38,060 --> 00:02:43,070
Let's cut that into our clipboard and let's move it down below this function call.

40
00:02:44,770 --> 00:02:50,900
Now, at first glance, as a beginning programmer, we would think that this would work right.

41
00:02:50,950 --> 00:02:57,190
We've got this function that's going to create a variable named my name, and then we are calling the

42
00:02:57,190 --> 00:02:57,730
function.

43
00:02:57,730 --> 00:03:00,520
So we know that that code is going to get executed.

44
00:03:01,060 --> 00:03:05,050
So we would think that we would be able to log out to the console my name.

45
00:03:05,380 --> 00:03:13,570
But if I checked the console, we just see a big error message that says my name is not defined.

46
00:03:14,200 --> 00:03:17,130
So we just smashed our head up against a brick wall.

47
00:03:17,380 --> 00:03:22,190
And this is our first example of running in to an issue with scope.

48
00:03:22,780 --> 00:03:28,990
Now, before we worry about what the word scope means in this sense, let's first answer the question

49
00:03:28,990 --> 00:03:31,380
as to why this code is not working.

50
00:03:31,870 --> 00:03:35,080
Why are we receiving that error message in the console?

51
00:03:35,680 --> 00:03:42,520
Well, it's because within the body of this function, or I should say within this block of code, within

52
00:03:42,520 --> 00:03:50,890
these curly brackets, as far as variables are concerned, we are in our own little new world that is

53
00:03:50,890 --> 00:03:54,100
separate or private from the outside world.

54
00:03:54,520 --> 00:04:04,030
So we would say that this variable is scoped to this block, these curly brackets, meaning it cannot

55
00:04:04,030 --> 00:04:06,810
be accessed from outside the block.

56
00:04:07,210 --> 00:04:13,960
So down here, when we try to access that variable, as far as this line of code is concerned, this

57
00:04:13,960 --> 00:04:15,850
variable doesn't even exist.

58
00:04:16,300 --> 00:04:22,210
Now, let me put things back to the way they were at the beginning of the lesson and explain why that

59
00:04:22,210 --> 00:04:22,890
was working.

60
00:04:23,530 --> 00:04:29,980
So let me cut the variable line back up out of the function up at the very top here and let me cut and

61
00:04:29,980 --> 00:04:33,070
paste the console logline back into the function.

62
00:04:33,790 --> 00:04:36,150
Now, this code will work just fine.

63
00:04:36,460 --> 00:04:43,450
It works because up on this line, when we are creating the variable, we are not inside a block or

64
00:04:43,450 --> 00:04:44,650
any curly brackets.

65
00:04:45,040 --> 00:04:45,340
Right.

66
00:04:45,340 --> 00:04:49,840
We are just out in the open in what we would call the global scope.

67
00:04:50,620 --> 00:04:54,370
This works because SCOP is like a one way street.

68
00:04:54,760 --> 00:04:57,820
The traffic only flows in one direction.

69
00:04:58,360 --> 00:05:04,060
Code can reach outwards to access a variable, but it cannot reach inwards.

70
00:05:04,600 --> 00:05:05,380
Now, don't worry.

71
00:05:05,380 --> 00:05:07,650
I don't expect you to understand what I just said.

72
00:05:07,900 --> 00:05:09,640
That's what we're going to work through.

73
00:05:09,640 --> 00:05:14,390
A new example right now to understand what I mean by inwards and outwards.

74
00:05:14,800 --> 00:05:17,560
So right now, make sure your code looks like mine.

75
00:05:17,830 --> 00:05:21,430
If you need to pause the video for a second to catch up, that's OK.

76
00:05:22,030 --> 00:05:26,320
Inside our function, I want you to cut the console log line.

77
00:05:26,560 --> 00:05:29,920
So just cut it into your clipboard and in its place.

78
00:05:29,920 --> 00:05:31,720
Let's write an if statement.

79
00:05:32,110 --> 00:05:35,620
So let's say if parentheses for the condition.

80
00:05:35,620 --> 00:05:41,260
Why don't we say if two plus two double equals sign four.

81
00:05:41,710 --> 00:05:42,070
Right?

82
00:05:42,070 --> 00:05:45,610
Because we know that will always be true right after these parentheses.

83
00:05:45,610 --> 00:05:52,600
Let's include curly brackets and dropdown and now inside the if statement, let's just paste back in

84
00:05:52,870 --> 00:05:54,900
the console log line.

85
00:05:55,560 --> 00:06:00,850
OK, now if I check the console, we see that things are working just like before the if statement.

86
00:06:01,270 --> 00:06:04,900
So you might be wondering why I even added this if statement at all.

87
00:06:05,500 --> 00:06:12,790
Well, it's because it's a great example to explain what I mean when I say that scope begins inwards

88
00:06:12,790 --> 00:06:14,560
and moves outwards.

89
00:06:14,890 --> 00:06:15,190
Right.

90
00:06:15,190 --> 00:06:18,550
That analogy when I said that scope is a one way street.

91
00:06:18,910 --> 00:06:28,060
So when this line of code runs JavaScript, its first instinct is to see if there is a my name variable

92
00:06:28,390 --> 00:06:35,500
as close to home as possible, meaning within this scope, within this block, within the curly brackets

93
00:06:35,500 --> 00:06:36,670
for the IF statement.

94
00:06:36,940 --> 00:06:41,980
So just as a quick test within the if statement, right above the console, that log line, if I say

95
00:06:41,980 --> 00:06:52,780
let my name equal Brad the third and then check the console, we see Brad the third.

96
00:06:53,230 --> 00:06:59,710
However, if we either delete this line or just put two forward slashes to comment it out and pretend

97
00:06:59,710 --> 00:07:07,270
that it's deleted, if JavaScript sees that there is no my name variable within the current local scope,

98
00:07:07,810 --> 00:07:13,540
well, it's then going to look up the scope chain or look one level outside of itself.

99
00:07:13,870 --> 00:07:18,520
So outside of this scope, the next closest scope is within the body of our function.

100
00:07:18,820 --> 00:07:29,040
So just as a test, if we said let my name equal Brad Junior and check the console, we see Brad Jr,

101
00:07:29,620 --> 00:07:29,890
OK?

102
00:07:29,950 --> 00:07:36,160
And then finally, if we either deleted this line or just got rid of it with two forward slashes, JavaScript

103
00:07:36,160 --> 00:07:42,550
would say, OK, there's no my name inside the local block, there's no my name in the block.

104
00:07:42,550 --> 00:07:43,630
That's one level up.

105
00:07:44,020 --> 00:07:44,280
Why don't.

106
00:07:44,340 --> 00:07:50,310
We check another level up from that, and that would finally land us in the global scope and it would

107
00:07:50,310 --> 00:07:55,700
see that, aha, that variable exists, if we check the console, it's back to just Brad.

108
00:07:56,190 --> 00:08:02,520
So the idea is that when a line of code runs and you're looking for a variable, JavaScript is first

109
00:08:02,520 --> 00:08:07,650
going to look for that variable as close to home as possible within the current scope.

110
00:08:08,010 --> 00:08:14,340
If it's not there, it's just going to keep moving up the scope chain one level at a time until it finds

111
00:08:14,340 --> 00:08:15,300
what it's looking for.

112
00:08:15,930 --> 00:08:19,050
Now, it's important that we really understand what's going on here.

113
00:08:19,320 --> 00:08:20,190
So really quick.

114
00:08:20,370 --> 00:08:28,560
This is not a case of these lines overwriting or updating this original variable.

115
00:08:29,100 --> 00:08:36,090
That is not what's happening, even though these three variables of my name all have the same identifier

116
00:08:36,090 --> 00:08:41,490
or label name, they are three completely independent and separate variables.

117
00:08:41,820 --> 00:08:47,670
Let me show you not only how we can prove that, but also what I mean, because I remember when I first

118
00:08:47,670 --> 00:08:54,920
learned programming and I saw an example like this, I actually misinterpreted it and saw it backwards.

119
00:08:55,260 --> 00:09:00,990
I saw it as, OK, we're creating the variable in the global scope and then we are updating the variable

120
00:09:00,990 --> 00:09:03,750
in this scope and then we're updating it again in this scope.

121
00:09:04,020 --> 00:09:05,360
That is not the case.

122
00:09:05,580 --> 00:09:12,780
These are three completely separate variables and I can prove that to you by removing the slashes to

123
00:09:12,780 --> 00:09:14,630
uncommented out these two lines.

124
00:09:14,940 --> 00:09:21,240
So let's get rid of the SIGIR and then get rid of the stigma here and now.

125
00:09:21,240 --> 00:09:27,750
Let's do this within our innermost block of code, within the if statement, inside the console that

126
00:09:27,760 --> 00:09:28,150
log.

127
00:09:28,170 --> 00:09:37,380
Let's begin by saying inside the if statement and then a comma and then output are variable.

128
00:09:37,950 --> 00:09:42,990
OK, now, right after the if statement, but still within our function.

129
00:09:43,170 --> 00:09:46,500
So right here, let's log out to the console and say.

130
00:09:48,220 --> 00:09:56,650
Inside our function and then comma and then our variable and then finally down at the very bottom on

131
00:09:56,650 --> 00:09:59,200
the last line of code after we call the function.

132
00:09:59,530 --> 00:10:00,930
So we are in the global scope.

133
00:10:00,940 --> 00:10:09,940
Now, let's log out to the console and say in the global scope and then comma and then output my name.

134
00:10:10,360 --> 00:10:16,810
OK, now if we check the console we see inside the if statement is one variable with its value inside,

135
00:10:16,810 --> 00:10:20,530
our function is a different variable with its own value.

136
00:10:20,800 --> 00:10:25,030
And in the global scope, that's another variable with a different value.

137
00:10:25,450 --> 00:10:27,070
What was the point of this experiment?

138
00:10:27,310 --> 00:10:33,580
It's to show you that these are three completely separate variables, even though they have the same

139
00:10:33,580 --> 00:10:36,190
identifier or label, it doesn't matter.

140
00:10:36,580 --> 00:10:41,590
The left statement creates a variable within the current local scope.

141
00:10:42,010 --> 00:10:47,170
It does not matter if that identifier or label name has been used in outer scope.

142
00:10:47,590 --> 00:10:53,740
Remember that inside a block of code, inside these curly brackets, it's like our own new private little

143
00:10:53,740 --> 00:10:59,890
world as far as variables are concerned, meaning it's almost like we get a clean slate.

144
00:11:00,130 --> 00:11:02,620
We can reuse the same variable names.

145
00:11:03,100 --> 00:11:07,990
And JavaScript knows that we do not want to affect any of the variables in outer scope.

146
00:11:08,380 --> 00:11:13,840
We just want to create a brand new separate variable that is scoped to this block.

147
00:11:14,390 --> 00:11:20,470
Now, you might be scratching your head right now and wondering, well, what if we wanted to mutate

148
00:11:20,800 --> 00:11:25,390
the global original variable from within our innermost block?

149
00:11:25,750 --> 00:11:27,190
Is there a way we can do that?

150
00:11:27,640 --> 00:11:29,740
And the answer is yes, absolutely.

151
00:11:30,220 --> 00:11:32,620
Just to save confusion, why don't we get rid of this?

152
00:11:32,950 --> 00:11:34,870
Let my name Brad Jr..

153
00:11:36,640 --> 00:11:40,780
And let's also get rid of the two console loglines within our function.

154
00:11:44,490 --> 00:11:51,870
OK, now, within the if statement, what if we wanted to update or mutate or change the value of the

155
00:11:51,870 --> 00:11:54,080
global scoped my name variable?

156
00:11:54,810 --> 00:11:59,550
Well, all we would need to do is remove the word left from this line of code.

157
00:12:00,000 --> 00:12:05,250
The left statement says create a new variable for this local scope.

158
00:12:05,760 --> 00:12:11,850
But if we get rid of that now, we are just trying to work or access the variable and we're setting

159
00:12:11,850 --> 00:12:12,930
it to equal something.

160
00:12:13,170 --> 00:12:14,850
So here's what JavaScript is going to do.

161
00:12:15,090 --> 00:12:22,200
It's going to see this variable and ask itself, does this variable already exist within this current

162
00:12:22,200 --> 00:12:23,080
local scope?

163
00:12:23,610 --> 00:12:24,410
It doesn't.

164
00:12:24,420 --> 00:12:28,190
So then it's going to look one level up just within the function.

165
00:12:28,830 --> 00:12:31,550
It's going to see that it doesn't exist there either.

166
00:12:31,890 --> 00:12:37,440
And then it's going to check one level up and it's going to say, OK, it does exist in the global scope.

167
00:12:37,860 --> 00:12:40,460
That must be what you're talking about right here.

168
00:12:40,710 --> 00:12:44,330
So I'm going to let you update or change that variable.

169
00:12:44,790 --> 00:12:50,550
This is what I was talking about earlier when I said that scope moves in one direction.

170
00:12:50,550 --> 00:12:59,160
It's a one way street inside code can reach outwards for variables, but outside code cannot reach inside

171
00:12:59,160 --> 00:13:00,060
four variables.

172
00:13:00,600 --> 00:13:03,450
So long story short, we set it to equal the third.

173
00:13:03,690 --> 00:13:09,660
And now down here where we are logging out to the console in the global scope and then our variable,

174
00:13:09,660 --> 00:13:12,990
if we check the console, we see browed the third.

175
00:13:13,620 --> 00:13:14,260
Awesome.

176
00:13:14,750 --> 00:13:20,640
Now, before we switch gears in this lesson and move on to the second half and talk about context instead

177
00:13:20,640 --> 00:13:24,420
of scope, there's one more scope related thing we need to cover.

178
00:13:24,600 --> 00:13:29,970
So throughout this course, when we've been creating or declaring a variable, we've been using the

179
00:13:29,970 --> 00:13:31,290
word let.

180
00:13:31,890 --> 00:13:40,140
However, until about three or four years ago, there was no let in JavaScript and instead we had to

181
00:13:40,140 --> 00:13:47,990
create variables by saying VAR and then the label or identifier and otherwise the syntax is the same.

182
00:13:48,120 --> 00:13:48,460
Right.

183
00:13:48,750 --> 00:13:55,680
So if you're looking at older code or if you inherit a project from someone, you might see var being

184
00:13:55,680 --> 00:13:57,090
used instead of let.

185
00:13:57,480 --> 00:14:00,540
Now there are several subtle differences between VAR and let.

186
00:14:00,780 --> 00:14:06,140
But right now I want to show you the one big, huge glaring difference between the two.

187
00:14:06,390 --> 00:14:17,310
The biggest difference between VAR and Let is that let uses block scope whereas var uses function scope.

188
00:14:18,150 --> 00:14:19,980
So what in the world does that mean.

189
00:14:20,340 --> 00:14:21,130
Let me show you.

190
00:14:21,330 --> 00:14:28,170
So within our if statement at the beginning of this line of code, if we put the word let here, we

191
00:14:28,170 --> 00:14:33,420
know that that's going to create a variable that is scoped to this block.

192
00:14:33,870 --> 00:14:34,170
Right.

193
00:14:34,170 --> 00:14:36,850
Scoped to the if statements curly brackets.

194
00:14:37,140 --> 00:14:43,650
So let is going to look for the nearest enclosing block and a block can be several different things.

195
00:14:43,920 --> 00:14:44,170
Right.

196
00:14:44,200 --> 00:14:47,310
We know that an if statement uses a block, these curly brackets.

197
00:14:47,550 --> 00:14:51,150
We know that a while loop uses the curly brackets in a block.

198
00:14:51,690 --> 00:14:54,540
Clearly the body of a function uses a block.

199
00:14:54,820 --> 00:15:01,320
OK, but the idea here is that LET is going to make it so that this variable is only accessible from

200
00:15:01,320 --> 00:15:04,080
within the nearest enclosing block.

201
00:15:04,500 --> 00:15:11,330
So right now we would not be able to access the variable right here outside of the IF statement.

202
00:15:11,610 --> 00:15:19,530
However, if we changed this to a var instead of let var uses function scope instead of block scope.

203
00:15:19,950 --> 00:15:26,190
So VAR is going to say, you know what, I don't care that the if statement has curly brackets and that

204
00:15:26,190 --> 00:15:32,820
it's a block since I'm a var, I only care about the curly brackets of a function.

205
00:15:33,060 --> 00:15:37,580
Right, because var uses function scop instead of block scope.

206
00:15:38,100 --> 00:15:46,650
This means that this var variable is accessible anywhere inside it's inclosing function, even outside

207
00:15:46,650 --> 00:15:47,630
of the if statement.

208
00:15:47,640 --> 00:15:51,480
So we could access my name right here within the function.

209
00:15:52,020 --> 00:15:55,830
Now again, historically that's how we created variables in JavaScript.

210
00:15:56,160 --> 00:16:01,050
But in the last three or four years, JavaScript finally got access to let.

211
00:16:01,620 --> 00:16:08,970
And the reason that 99 percent of developers used the word let instead of VAR is because almost all

212
00:16:08,970 --> 00:16:14,550
other programming languages besides JavaScript use block scope instead of function.

213
00:16:14,550 --> 00:16:18,400
SCOP block scope is just what most of us are used to.

214
00:16:18,510 --> 00:16:24,450
It's a paradigm that we are familiar with and it's a super popular opinion that Block SCOP leads to

215
00:16:24,450 --> 00:16:30,050
less confusing code, less scope confusion and just less problems overall.

216
00:16:30,360 --> 00:16:33,510
So long story short, that's the difference between let and VAR.

217
00:16:33,720 --> 00:16:40,950
But in the current year and looking forward, I encourage you to always use the word let and never or

218
00:16:40,950 --> 00:16:43,290
I should say basically never.

219
00:16:43,630 --> 00:16:44,560
Use the word Hvar.

220
00:16:44,920 --> 00:16:51,600
All right, and that's SCOP in a nutshell, if you're still a bit confused regarding SCOP, that's OK.

221
00:16:51,760 --> 00:16:53,130
That's completely normal.

222
00:16:53,500 --> 00:16:59,650
In fact, I have worked with professional mid-level developers who were even sometimes still confused

223
00:16:59,650 --> 00:17:00,280
by SCOP.

224
00:17:00,640 --> 00:17:01,420
Big picture.

225
00:17:01,420 --> 00:17:04,480
You do not need to be a scope guru at this point.

226
00:17:04,840 --> 00:17:07,450
I just want the topic to be on your radar.

227
00:17:07,720 --> 00:17:09,790
It's something you need to be aware of.

228
00:17:10,060 --> 00:17:14,650
And if your code isn't working, you might want to double or triple check your scope and make sure your

229
00:17:14,650 --> 00:17:18,280
variables are pointing towards what you think they are pointing towards.

230
00:17:18,640 --> 00:17:22,630
Remember, you can always use console log to check the value.

231
00:17:22,930 --> 00:17:25,240
OK, at this point, let's change gears.

232
00:17:25,420 --> 00:17:27,040
We've talked about SCOP.

233
00:17:27,370 --> 00:17:30,070
Now let's talk about context.

234
00:17:30,520 --> 00:17:35,290
So I'm actually going to delete all of the code that we have and start fresh.
