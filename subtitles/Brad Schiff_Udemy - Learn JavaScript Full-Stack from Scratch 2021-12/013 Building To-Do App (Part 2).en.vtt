WEBVTT
1
00:00:00.330 --> 00:00:04.710
And then after we set that up, let's also make it so that when you click the delete button for one

2
00:00:04.710 --> 00:00:07.470
of these, something actually happens.

3
00:00:08.730 --> 00:00:12.200
OK, but let's start with auto clearing the field when you submit it.

4
00:00:12.870 --> 00:00:20.760
So up in our code, inside our create item function, why don't we just add a new line and say our field.

5
00:00:21.090 --> 00:00:21.420
Right.

6
00:00:21.420 --> 00:00:23.580
The object that represents that element.

7
00:00:24.790 --> 00:00:31.410
Let's look inside it to access its value and then let's just set its value to equal an empty string,

8
00:00:31.960 --> 00:00:32.220
OK?

9
00:00:32.290 --> 00:00:39.280
Also, if the user clicks the submit button instead of hitting enter or return on their keyboard, I

10
00:00:39.280 --> 00:00:46.030
think it would be cool if when they submit if the TextField got automatically selected or focused again

11
00:00:46.270 --> 00:00:50.580
so that if they wanted to add another item, they wouldn't need to manually click the field again.

12
00:00:50.890 --> 00:00:53.590
It would just already be selected and ready for them to type.

13
00:00:54.010 --> 00:01:01.480
So in our code we can also say our field dot and then call a method named focus.

14
00:01:01.850 --> 00:01:03.820
OK, let's test this out and see how it works.

15
00:01:04.480 --> 00:01:12.040
So by Karatz, it got rid of it for me and I can just keep typing feed cat and even if I use the submit

16
00:01:12.040 --> 00:01:17.660
button, so walk dog and I click this, it automatically selects it.

17
00:01:17.710 --> 00:01:18.220
Awesome.

18
00:01:18.700 --> 00:01:23.410
Now let's finish up our app by working on the delete functionality.

19
00:01:23.950 --> 00:01:28.500
So we want to respond to the event of the delete button getting clicked.

20
00:01:28.900 --> 00:01:33.880
Now our first instinct might be to try and use the add event listener method.

21
00:01:34.270 --> 00:01:34.510
Right?

22
00:01:34.550 --> 00:01:39.970
So maybe try to select all of the delete buttons and then call out event listener.

23
00:01:40.270 --> 00:01:46.390
But we would run into an issue and that is that when the app first loads or when the Web page first

24
00:01:46.390 --> 00:01:49.510
loads, there aren't going to be any items.

25
00:01:49.510 --> 00:01:49.780
Right?

26
00:01:49.810 --> 00:01:51.300
This area is going to be empty.

27
00:01:51.520 --> 00:01:53.170
So there would be no delete buttons.

28
00:01:53.500 --> 00:01:59.840
And in JavaScript you cannot add an event listener to something that doesn't exist yet.

29
00:02:00.250 --> 00:02:02.770
Now, there are several ways around this problem.

30
00:02:02.980 --> 00:02:07.420
This issue of adding events for future elements don't exist yet.

31
00:02:07.750 --> 00:02:11.850
But right now, I'm going to show you probably the simplest way of handling it.

32
00:02:12.310 --> 00:02:15.090
Why don't we do this down at the very bottom of our code?

33
00:02:15.250 --> 00:02:18.600
Let's create a brand new function to function.

34
00:02:18.760 --> 00:02:21.310
Let's name it delete item.

35
00:02:21.760 --> 00:02:22.750
The name doesn't matter.

36
00:02:22.760 --> 00:02:23.950
That's just what I'm going with.

37
00:02:24.340 --> 00:02:30.100
Parentheses, curly brackets and inside the body of this function, just as a test, let's create an

38
00:02:30.100 --> 00:02:34.270
alert pop up that says delete requested.

39
00:02:35.770 --> 00:02:41.980
OK, now the question is how can we run or call or execute this function when the user clicks on one

40
00:02:41.980 --> 00:02:43.250
of the delete buttons?

41
00:02:43.270 --> 00:02:50.560
Well, in our create item function, remember this line of code where we are creating the HTML template

42
00:02:50.560 --> 00:02:51.290
for an item?

43
00:02:51.730 --> 00:02:54.600
Well, here's the HTML for the delete button.

44
00:02:54.970 --> 00:02:57.790
So check this out on the opening button tag.

45
00:02:58.150 --> 00:03:06.370
We can just say on click equals and then we can just give it a little bit of code to execute so we can

46
00:03:06.370 --> 00:03:11.010
just say delete item parentheses to call that function.

47
00:03:11.350 --> 00:03:13.630
So let's test this out down or code.

48
00:03:13.630 --> 00:03:19.540
If I add an item by karats and if I click the delete button, awesome.

49
00:03:19.540 --> 00:03:21.550
We see that delete requested popup.

50
00:03:21.880 --> 00:03:24.340
OK, now we don't actually want to show a pop up.

51
00:03:24.520 --> 00:03:28.230
What we really want to do is delete this list item from the list.

52
00:03:28.780 --> 00:03:32.740
However, imagine we have maybe several items in the list.

53
00:03:36.230 --> 00:03:41.630
When we click a button, we need to know which item just got clicked on, right?

54
00:03:41.660 --> 00:03:44.090
We need to know which list item to delete.

55
00:03:44.570 --> 00:03:51.880
So check this out within our HTML template, inside the parentheses for delete item we're calling it.

56
00:03:52.340 --> 00:03:59.920
We can just say this because the Web browser considers each HTML element an object.

57
00:04:00.170 --> 00:04:04.400
Well, when this function runs, what is the object that is calling it?

58
00:04:04.940 --> 00:04:05.690
You guessed it.

59
00:04:06.020 --> 00:04:07.330
It's the element.

60
00:04:07.790 --> 00:04:12.920
So if JavaScript considers that the object that is executing this function, that's what it's going

61
00:04:12.920 --> 00:04:15.710
to set the this keyword to.

62
00:04:16.190 --> 00:04:16.700
Awesome.

63
00:04:16.730 --> 00:04:22.130
So that means the element that needs to get deleted from the page is going to get passed into our function.

64
00:04:22.520 --> 00:04:24.670
So in these parentheses, we can create a parameter.

65
00:04:24.680 --> 00:04:30.140
I'm going to call it the name doesn't matter, but I will name it element to delete.

66
00:04:30.630 --> 00:04:37.830
OK, and then instead of that annoying pop up, let's just access that element element to delete.

67
00:04:38.240 --> 00:04:40.850
Now this is going to point towards the delete button.

68
00:04:40.850 --> 00:04:44.090
They got clicked, but we don't just want to get rid of the delete button.

69
00:04:44.360 --> 00:04:53.090
We want to get rid of the entire bulleted list item so we can just say dot parent element and that's

70
00:04:53.090 --> 00:04:56.780
going to select the HTML element that is housing this element.

71
00:04:57.060 --> 00:05:03.800
OK, so once you've selected that, then we can just call dot remove to remove the element altogether.

72
00:05:03.800 --> 00:05:09.950
Let's test it out by carrot's walk dog feed cat.

73
00:05:10.400 --> 00:05:13.550
And if I want to get rid of walk dog let's click delete.

74
00:05:14.150 --> 00:05:14.810
Awesome.

75
00:05:15.290 --> 00:05:18.920
Now that's going to bring the hands on portion of the lesson to a close.

76
00:05:19.280 --> 00:05:27.050
But let's talk about where we go from here, because there's one huge glaring problem with our app,

77
00:05:27.500 --> 00:05:35.060
and that is that every time the webpage gets reloaded or refreshed, all of the users items and data

78
00:05:35.060 --> 00:05:36.440
is going to get reset.

79
00:05:36.770 --> 00:05:37.040
Right.

80
00:05:37.040 --> 00:05:42.440
If I come up to our code and even just add a couple of forward slashes to force code pen to reload the

81
00:05:42.440 --> 00:05:44.860
page, all of our data is gone.

82
00:05:45.260 --> 00:05:46.930
Obviously, this is a big problem.

83
00:05:46.940 --> 00:05:51.740
So in the real world, we would need to store this data somewhere.

84
00:05:52.040 --> 00:05:59.690
Now we could save it to the user's physical device using a Web browser feature named local storage.

85
00:06:00.020 --> 00:06:06.020
But that's not ideal, because if the user switched from their phone to their laptop to their desktop

86
00:06:06.020 --> 00:06:09.820
to their work computer, their data is not going to follow them around.

87
00:06:09.980 --> 00:06:18.290
So in the real world, the only practical solution for some sort of persistent data is to send it to

88
00:06:18.290 --> 00:06:24.420
a server or some computer that's, quote, in the cloud in order to save it to a database.

89
00:06:24.680 --> 00:06:32.570
Now, databases do not understand Web page elements, meaning we can't exactly just send a bulleted

90
00:06:32.570 --> 00:06:35.620
list of HTML content over to a database.

91
00:06:36.200 --> 00:06:44.210
Instead, we want to send raw plain data like strings of text or objects or arrays.

92
00:06:44.600 --> 00:06:51.080
So that's why we spent so much time in this chapter learning about the JavaScript language itself and

93
00:06:51.080 --> 00:06:57.620
working with raw data, because as we saw in this lesson, working with the Web browser is relatively

94
00:06:57.620 --> 00:06:58.170
easy.

95
00:06:58.640 --> 00:07:04.990
The challenge comes when we realize that we need to manage two completely different things.

96
00:07:05.270 --> 00:07:07.550
So one is the raw data.

97
00:07:08.210 --> 00:07:19.550
For example, write an array of the user's items like this by carrot's walk, dog feed, cat write servers

98
00:07:19.550 --> 00:07:23.030
and data bases want raw data like this.

99
00:07:23.360 --> 00:07:29.870
But raw data like this doesn't mean anything to the users that are actually using our app.

100
00:07:30.110 --> 00:07:30.380
Right.

101
00:07:30.380 --> 00:07:34.840
So the other thing that we need to manage is the visual user interface.

102
00:07:35.270 --> 00:07:40.040
Now, managing those two different things at the same time can be very overwhelming.

103
00:07:40.250 --> 00:07:47.150
And this is why libraries like React and Viajes and Angular are so incredibly popular.

104
00:07:47.390 --> 00:07:52.370
Now, ultimately, in the real world, I do recommend using one of those libraries.

105
00:07:52.580 --> 00:07:58.910
However, until you can clearly understand and describe the problem that these libraries are solving,

106
00:07:59.120 --> 00:08:05.390
I recommend staying away from them because I've seen countless beginning developers suffer from the

107
00:08:05.390 --> 00:08:10.850
disease that is called trying to learn everything at once and getting confused and giving up.

108
00:08:11.270 --> 00:08:14.600
This is a disease that plagues millions of people around the planet.

109
00:08:15.170 --> 00:08:17.150
Now, I'm not proposing anything extreme.

110
00:08:17.390 --> 00:08:22.850
I'm not saying that you need to be skilled enough to create your own library before you use someone

111
00:08:22.850 --> 00:08:23.440
else's.

112
00:08:23.660 --> 00:08:25.840
I totally disagree with that line of thinking.

113
00:08:26.180 --> 00:08:31.280
All I'm saying is give yourself a chance to understand the bigger picture, how all of the puzzle pieces

114
00:08:31.280 --> 00:08:34.550
fit together and at least understand the problem.

115
00:08:34.980 --> 00:08:42.000
The library is solving before using said library, because I guarantee if you genuinely understand the

116
00:08:42.000 --> 00:08:48.960
need for a library and how it fits into what you're trying to achieve, it makes learning the library

117
00:08:49.380 --> 00:08:51.120
500 percent easier.

118
00:08:51.360 --> 00:08:52.590
It makes it a piece of cake.

119
00:08:52.950 --> 00:08:57.420
OK, but learning a particular library is not the goal of this course.

120
00:08:57.840 --> 00:09:03.660
Our goal is to understand the full scope, the full stack of an application.

121
00:09:04.110 --> 00:09:09.220
In this lesson, we saw the general idea of how JavaScript can control the Web browser.

122
00:09:09.630 --> 00:09:16.890
So up next in our next chapter, we're going to dive deeper into why we need a server or at least a

123
00:09:16.890 --> 00:09:20.250
third party service where we can send our data to.

124
00:09:20.460 --> 00:09:25.800
Now, a lot of people get intimidated when they hear the word server or cloud.

125
00:09:26.130 --> 00:09:30.510
But I can tell you right now that with the right guidance, there's nothing to be scared of.

126
00:09:30.730 --> 00:09:36.120
We're going to walk through the server side of things together and it's actually surprisingly simple.

127
00:09:36.450 --> 00:09:41.840
So let's keep things going, because this is where our progress is just going to start skyrocketing.

128
00:09:42.150 --> 00:09:48.300
We understand the basics of the JavaScript language itself, and now it's time to just see how all of

129
00:09:48.300 --> 00:09:50.910
the different environments work together.

130
00:09:51.150 --> 00:09:51.470
Right.

131
00:09:51.480 --> 00:09:53.100
We just took a look at the Web browser.

132
00:09:53.340 --> 00:09:58.950
Up next, we're going to learn about Node and then eventually we can learn about Mongo DB and how to

133
00:09:58.950 --> 00:10:00.480
save our data in a database.

134
00:10:00.630 --> 00:10:06.420
If you can seamlessly tie these three environments together, you are a full stack developer and you

135
00:10:06.420 --> 00:10:08.280
are incredibly in demand.

136
00:10:08.490 --> 00:10:13.230
So let's keep our momentum rolling and I will see you in the next chapter.
