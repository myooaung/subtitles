1
00:00:00,210 --> 00:00:03,670
Hello, everyone, welcome to part two of this lesson.

2
00:00:04,080 --> 00:00:06,150
Let's pick up right where we left off.

3
00:00:06,420 --> 00:00:12,060
In the first part of this lesson, we used NPM in the command line to download Express.

4
00:00:12,420 --> 00:00:16,850
And up in our file, we've written this line of code to get express ready.

5
00:00:17,340 --> 00:00:23,340
Now we can actually begin to write code that uses Express to build the server.

6
00:00:23,730 --> 00:00:25,830
So let's create a new variable.

7
00:00:26,370 --> 00:00:33,690
So let and then you can name anything you want, but I'm going to name it our app and let's set it to

8
00:00:33,690 --> 00:00:36,890
equal and then just call Express.

9
00:00:37,590 --> 00:00:42,120
So this will create or return an express application or server.

10
00:00:42,540 --> 00:00:42,800
Right.

11
00:00:42,810 --> 00:00:46,320
That's leveraging that pre written JavaScript code that we downloaded.

12
00:00:46,620 --> 00:00:51,010
And now we have a server that lives in this variable named our app.

13
00:00:51,570 --> 00:00:56,850
So now let's tell our server to begin listening for incoming requests.

14
00:00:57,360 --> 00:01:05,010
So on a new line, we can just say our app and then dot and call the listen method and let's listen

15
00:01:05,010 --> 00:01:05,640
on PT..

16
00:01:05,760 --> 00:01:08,340
Three thousand, OK.

17
00:01:08,340 --> 00:01:15,150
And then right above this listen line, let's add a new line to tell our server what it should do if

18
00:01:15,150 --> 00:01:17,970
someone sends a request to our homepage.

19
00:01:18,510 --> 00:01:25,500
So let's use our our app variable and then call a method so dot and the method is named Git.

20
00:01:26,490 --> 00:01:31,230
I will explain what the word get means in this context a bit later on in the lesson.

21
00:01:31,740 --> 00:01:38,970
But for now, all we need to know is that we give it to arguments so we could say A comma B as placeholders.

22
00:01:39,450 --> 00:01:43,890
The first argument is the you are L that you want to be on the lookout for.

23
00:01:44,100 --> 00:01:47,700
So let's just say quotes and then a forward slash.

24
00:01:48,000 --> 00:01:50,340
This represents the home page or base.

25
00:01:50,340 --> 00:01:52,050
You all right.

26
00:01:52,050 --> 00:01:59,910
And then the second argument is a function that express is going to run any time someone sends a request

27
00:01:59,910 --> 00:02:00,600
to this U.

28
00:02:00,600 --> 00:02:01,110
RL.

29
00:02:01,680 --> 00:02:05,220
So instead of this placeholder B, let's write an anonymous function.

30
00:02:05,610 --> 00:02:11,910
So function parentheses, curly brackets and then dropdown inside those curly brackets.

31
00:02:12,420 --> 00:02:16,470
When Express calls this function, it's going to pass it to arguments.

32
00:02:16,770 --> 00:02:23,010
So inside these parentheses, let's include two parameters RFQ comma R.

33
00:02:23,040 --> 00:02:28,500
S OK, now within the body of our function here, what do we actually want to do?

34
00:02:28,980 --> 00:02:35,190
Well, when someone sends a request to the home page URL in response, we just want to send back a bit

35
00:02:35,190 --> 00:02:40,740
of HTML that would create this page with this text and form field.

36
00:02:41,130 --> 00:02:47,610
So back in our code within the body of our function, we can use the response object from Express and

37
00:02:47,610 --> 00:02:52,560
then look inside it with a dot and then call an express method named send.

38
00:02:53,310 --> 00:02:54,870
And what do we want to send?

39
00:02:55,200 --> 00:03:01,050
Well, instead of just simple quotes for a string of text, let's actually use back ticks.

40
00:03:01,350 --> 00:03:05,820
Remember, this is the key to the left of your one key or right above your tab key.

41
00:03:06,240 --> 00:03:12,300
And in between the back ticks, we are free to break down onto separate lines like this.

42
00:03:12,960 --> 00:03:14,280
You don't have to do this.

43
00:03:14,280 --> 00:03:21,300
I'm doing this just to stay organized because I think HTML is easier to read for the human eye if it's

44
00:03:21,300 --> 00:03:22,770
on separate lines.

45
00:03:23,130 --> 00:03:25,200
So now we can just start writing HTML.

46
00:03:25,200 --> 00:03:26,910
Let's create a form element.

47
00:03:27,210 --> 00:03:35,790
So in opening form tag, closing form tag inside that form, why don't we create a paragraph and inside

48
00:03:35,790 --> 00:03:46,110
the paragraph we can say what color is the sky on a clear and sunny day, maybe right below that paragraph.

49
00:03:46,110 --> 00:03:50,700
Let's create a form input field that the user can type into.

50
00:03:51,150 --> 00:03:53,070
So just create an input element.

51
00:03:53,520 --> 00:03:59,910
Input does not need a matching closing tag, but on the opening input tag, let's give it a name so

52
00:03:59,910 --> 00:04:04,620
name equals and then quotes and let's say sky color.

53
00:04:05,280 --> 00:04:07,350
I just made this name up of sky color.

54
00:04:07,350 --> 00:04:08,130
It doesn't matter.

55
00:04:08,130 --> 00:04:10,710
It could be unicorn or pizza or anything.

56
00:04:11,020 --> 00:04:17,520
OK, let's also give this input an attribute named auto complete and set that to off.

57
00:04:18,030 --> 00:04:19,170
You don't need to do this.

58
00:04:19,170 --> 00:04:23,880
I just don't like the annoying pop up auto suggestion feature in the browser.

59
00:04:24,270 --> 00:04:29,820
OK, and then right below the input element, let's create a button so the user can click on it to submit

60
00:04:29,820 --> 00:04:30,330
the form.

61
00:04:30,750 --> 00:04:32,460
So opening button tag.

62
00:04:32,580 --> 00:04:37,920
Closing button tag and we can say submit answer.

63
00:04:38,340 --> 00:04:43,200
OK, now before we save the file, let's address the opening form tag.

64
00:04:43,680 --> 00:04:45,480
Let's give it a couple of attributes.

65
00:04:45,780 --> 00:04:47,490
Let's say action.

66
00:04:48,620 --> 00:04:52,820
Quotes and let's say forward slash answer.

67
00:04:53,990 --> 00:05:00,480
And then after those quotes, let's give it one more attribute named method and set that equal quotes

68
00:05:00,480 --> 00:05:03,980
and say all capital post post.

69
00:05:04,620 --> 00:05:11,010
Now I realize I did not explain what action equals answer or what method equals post means.

70
00:05:11,460 --> 00:05:14,730
Don't worry, we will circle back to that in just about a minute from now.

71
00:05:15,240 --> 00:05:21,120
For the time being, let's go ahead and save this file and then come down into the command line and

72
00:05:21,120 --> 00:05:22,410
take it for a test drive.

73
00:05:22,840 --> 00:05:27,780
So let's run the command node test or whatever your file is named.

74
00:05:27,870 --> 00:05:28,620
Push, enter.

75
00:05:28,980 --> 00:05:34,500
And then if you jump over to your Web browser and visit, localhost three thousand, you might need

76
00:05:34,500 --> 00:05:39,100
to refresh the page, but you should see something that looks almost identical to this.

77
00:05:39,480 --> 00:05:41,120
Now here's where things get interesting.

78
00:05:41,130 --> 00:05:44,180
Let's try to fill out and submit the form feel right.

79
00:05:44,190 --> 00:05:45,380
So click into the field.

80
00:05:45,720 --> 00:05:51,270
Doesn't matter what you type, but just go ahead and submit the form and we see some good news and some

81
00:05:51,270 --> 00:05:52,020
bad news.

82
00:05:52,260 --> 00:06:00,900
The good news is if you look up in the euro or address bar, our form redirected us to a slash answer

83
00:06:00,900 --> 00:06:01,710
you R-AL.

84
00:06:02,130 --> 00:06:05,940
That means that we typed out the HTML for that form correctly.

85
00:06:06,210 --> 00:06:10,530
And as you might have guessed, this is where the slash answer comes into play.

86
00:06:10,890 --> 00:06:15,760
Whatever you set as the action for an HTML form.

87
00:06:16,080 --> 00:06:21,010
Well, that's the Eurail that the browser is going to send the form results to.

88
00:06:21,360 --> 00:06:26,070
Now I just randomly chose the word answer here, but there's nothing special about that.

89
00:06:26,190 --> 00:06:29,860
You could have set this to pizza or unicorn or anything.

90
00:06:30,210 --> 00:06:32,970
OK, so that explains the action attribute.

91
00:06:33,150 --> 00:06:35,540
But what about the method attribute?

92
00:06:35,910 --> 00:06:38,680
What in the world does method equal post mean?

93
00:06:39,300 --> 00:06:46,410
Well, this controls the type of request that the browser is going to send to the server in the land

94
00:06:46,410 --> 00:06:49,230
of the Internet and HTTP requests.

95
00:06:49,440 --> 00:06:52,830
There are actually many different types of requests.

96
00:06:53,130 --> 00:06:58,530
But for now, in the context of this lesson, we really only need to be aware of two different types

97
00:06:58,530 --> 00:07:02,990
of requests, a request and a post request.

98
00:07:03,540 --> 00:07:05,670
So in your Web browser, when you visit a U.

99
00:07:05,670 --> 00:07:06,160
RL.

100
00:07:06,360 --> 00:07:08,700
So if I typed in Google dot com.

101
00:07:10,070 --> 00:07:17,060
My browser just sent a gett request to the Google servers, or if I clicked on one of these navigation

102
00:07:17,060 --> 00:07:22,940
links at the top of Google, like if I clicked on there about Link to go to the about page, my browser

103
00:07:22,940 --> 00:07:26,240
sent a get request to that about you URL.

104
00:07:26,600 --> 00:07:31,400
So when you're surfing the web, a get request is sort of the standard type of request.

105
00:07:31,670 --> 00:07:37,790
If you manually type in a Eurail or if you click on a traditional navigation link, it's a request.

106
00:07:37,910 --> 00:07:41,140
You're saying to the server you want to get a bit of information.

107
00:07:41,660 --> 00:07:48,740
So if I go back to local host, call in three thousand, my browser sends a request to the server.

108
00:07:49,250 --> 00:07:57,260
However, if I fill out this form and then tried to submit it, my browser not only wants to get information

109
00:07:57,260 --> 00:08:03,200
about that new Eurail of answer, but it also needs to send along its own data to that.

110
00:08:03,200 --> 00:08:04,070
You are right.

111
00:08:04,220 --> 00:08:07,430
It needs to send along whatever I typed into the form fields.

112
00:08:07,880 --> 00:08:14,600
So it needs to send that data or in other words, it needs to post that data, hence the word post.

113
00:08:15,060 --> 00:08:19,940
So if I submit this form, we see cannot post to answer.

114
00:08:20,270 --> 00:08:26,750
And that's because we never told our express server what it should do in response to receiving a request

115
00:08:26,990 --> 00:08:29,180
to the answer you RL.

116
00:08:29,570 --> 00:08:35,900
Now, before we worry about actually evaluating the user's answer, let's first make sure that we actually

117
00:08:35,900 --> 00:08:40,240
understand the difference between a get request and a post request.

118
00:08:40,580 --> 00:08:45,530
Trust me, I've seen many different full stack development courses and I feel like they always gloss

119
00:08:45,530 --> 00:08:49,240
over this difference and it's usually confusing and a bit blurry.

120
00:08:49,580 --> 00:08:56,000
So let's run through a quick exercise to make that difference between git and post crystal-clear back

121
00:08:56,000 --> 00:08:56,860
in our code.

122
00:08:57,110 --> 00:09:01,730
Perhaps this method named Git right here is starting to make a bit more sense.

123
00:09:02,270 --> 00:09:07,940
We are telling our app what it should do if it receives a get request to this U.

124
00:09:07,940 --> 00:09:08,450
RL.

125
00:09:09,020 --> 00:09:09,800
So let's do this.

126
00:09:09,800 --> 00:09:14,900
Let's scroll down to the bottom of this code and maybe right above this listen line.

127
00:09:14,930 --> 00:09:19,340
Let's add a new line and say our app.

128
00:09:19,670 --> 00:09:24,290
And then instead of Dawngate, let's say Dot Post.

129
00:09:24,950 --> 00:09:32,360
So we are going to tell our app what it should do if it receives a post request to the slash answer.

130
00:09:32,360 --> 00:09:35,450
You are going just like with the git method.

131
00:09:35,450 --> 00:09:38,180
We want to give the post method a second argument.

132
00:09:38,180 --> 00:09:45,470
So comma, and then we include a function that Express will run in response to this request occurring.

133
00:09:45,920 --> 00:09:52,730
So after this comma include an anonymous function function in parentheses, curly brackets inside the

134
00:09:52,730 --> 00:09:56,540
parentheses for the function include the parameters are Q and R.

135
00:09:56,600 --> 00:09:59,720
S inside the body of our function.

136
00:09:59,720 --> 00:10:05,960
Let's just send back a bit of text that reads Thank you for submitting the form so we can use the response

137
00:10:05,960 --> 00:10:09,290
object and call the send method a bit of text.

138
00:10:09,590 --> 00:10:12,350
Thank you for submitting the form.

139
00:10:13,050 --> 00:10:18,470
OK, now before we save this and test it out, I want to do something to make the difference between

140
00:10:18,470 --> 00:10:20,810
a get request and a post request.

141
00:10:21,020 --> 00:10:21,980
Crystal clear.

142
00:10:22,490 --> 00:10:28,040
What I want you to do is select these three new lines of code that we just wrote, copy them into your

143
00:10:28,040 --> 00:10:30,560
clipboard and then right below this.

144
00:10:30,560 --> 00:10:34,970
But before the listen line, just paste in your clipboard, so duplicate it.

145
00:10:35,480 --> 00:10:41,570
And on this new copy, I want you to change this word post to get so on the second copy.

146
00:10:41,570 --> 00:10:43,370
It's our app yet.

147
00:10:43,820 --> 00:10:49,340
So if someone sends a post request to this answer you URL, this makes sense.

148
00:10:49,340 --> 00:10:54,680
But if someone sends a request to that same you rl let's do this instead.

149
00:10:54,890 --> 00:10:59,300
Let's just send back a bit of text that says, are you lost?

150
00:11:00,230 --> 00:11:02,510
There is nothing to see here.

151
00:11:02,900 --> 00:11:07,940
OK, at this point let's go ahead and save the file and then test it out in our browser.

152
00:11:08,270 --> 00:11:14,690
So let's come down into the command line and press control, see to stop the old server and then let's

153
00:11:14,690 --> 00:11:15,080
just run.

154
00:11:15,080 --> 00:11:19,220
No test to fire up a new copy of the server with our latest code.

155
00:11:19,820 --> 00:11:20,240
All right.

156
00:11:20,240 --> 00:11:28,280
And then back in the browser, if I just go to localhost three thousand and fill out the form, submit,

157
00:11:28,850 --> 00:11:30,530
thank you for submitting the form.

158
00:11:30,740 --> 00:11:35,140
So this is in response to the post request to answer.

159
00:11:35,450 --> 00:11:42,920
However, if I go back to the home page and then up in the euro address bar, if I manually type in

160
00:11:42,920 --> 00:11:47,210
slash answer, that is a get request.

161
00:11:47,240 --> 00:11:48,170
So that's why we see.

162
00:11:48,380 --> 00:11:49,340
Are you lost?

163
00:11:49,460 --> 00:11:50,840
There is nothing to see here.

164
00:11:51,320 --> 00:11:56,690
So hopefully this illustrates the difference between a request and a post request.

165
00:11:57,170 --> 00:12:03,500
A get request happens when you type in a neutral or you click on a traditional navigation link.

166
00:12:03,920 --> 00:12:09,030
A post request typically happens when you submit a form, right?

167
00:12:09,050 --> 00:12:09,170
When.

168
00:12:09,220 --> 00:12:16,910
The user wants to send or post a bit of data to the server, so even though in both cases the Eurail

169
00:12:16,960 --> 00:12:24,490
ends with slash answer, our server is able to respond differently depending on whether it's a get request

170
00:12:24,790 --> 00:12:26,260
or a post request.

171
00:12:26,890 --> 00:12:27,520
All right.

172
00:12:27,520 --> 00:12:34,000
So now that we have at least a very general understanding of what a post request is, let's get back

173
00:12:34,000 --> 00:12:36,090
to the actual task at hand.

174
00:12:36,460 --> 00:12:41,770
So when someone submits the form, we don't want to just say thank you for submitting.

175
00:12:41,990 --> 00:12:47,530
We want to actually evaluate their answer and tell them if it's correct or incorrect.

176
00:12:47,830 --> 00:12:48,160
Right.

177
00:12:48,160 --> 00:12:51,640
And we are asking them what color is the sky on a clear and sunny day?

178
00:12:52,120 --> 00:12:59,050
So the question becomes, how can we access the data that the user submits from within our server?

179
00:12:59,620 --> 00:13:02,790
Well, the good news is that Express makes it very simple.

180
00:13:03,220 --> 00:13:09,010
So let's jump back into our code and within the hour app dot post area.

181
00:13:09,580 --> 00:13:09,830
Right.

182
00:13:09,850 --> 00:13:12,870
This is what's going to occur when someone submits the form.

183
00:13:13,180 --> 00:13:17,310
Let's actually get rid of this response send line.

184
00:13:17,890 --> 00:13:23,680
So now we just have an empty body of the function because before we send back a response, we need to

185
00:13:23,680 --> 00:13:26,850
decide if they typed in the correct answer or not.

186
00:13:27,250 --> 00:13:30,310
So we know that in JavaScript we have a tool to do just that.

187
00:13:30,550 --> 00:13:32,470
And that is the if statement.

188
00:13:32,800 --> 00:13:39,550
So let's say if parentheses curly brackets inside the curly brackets, let's drop down right after those

189
00:13:39,550 --> 00:13:40,330
curly brackets.

190
00:13:40,330 --> 00:13:43,430
We can say ls a new set of curly brackets.

191
00:13:43,870 --> 00:13:45,820
OK, and let's fill in the condition.

192
00:13:46,100 --> 00:13:48,010
So in the parentheses right after the word.

193
00:13:48,010 --> 00:13:53,200
If let's say if X equal equal sign blue.

194
00:13:53,800 --> 00:13:57,150
Now I just typed in X as a temporary placeholder.

195
00:13:57,340 --> 00:14:03,800
So now the million dollar question is how do we actually access the user's typed in value here?

196
00:14:04,090 --> 00:14:10,450
Well, instead of the placeholder X, get rid of that and let's say R e q for request.

197
00:14:10,870 --> 00:14:17,980
This is the request object that express passes into our function, which contains all sorts of information

198
00:14:17,980 --> 00:14:19,770
about the incoming request.

199
00:14:20,170 --> 00:14:29,390
So within our IF statement, we can say if our Q dot body dot sky color equals blue.

200
00:14:29,950 --> 00:14:34,270
So the request object and then body is the body of the post of what they're sending.

201
00:14:34,270 --> 00:14:35,860
It's the main meat and potatoes.

202
00:14:36,010 --> 00:14:42,580
And then we are looking inside that for the sky color property because an HTML form could contain multiple

203
00:14:42,580 --> 00:14:43,210
fields.

204
00:14:43,360 --> 00:14:47,520
So we need to specify which specific field or value we are interested in.

205
00:14:47,980 --> 00:14:50,740
If you're wondering where this name Sky Color came from.

206
00:14:50,920 --> 00:14:57,040
Remember that this will be exactly whatever you typed in for the input name when we were building the

207
00:14:57,040 --> 00:14:58,900
HTML for our form.

208
00:15:00,370 --> 00:15:05,480
OK, so if this evaluates to true, then the user typed in the correct answer.

209
00:15:05,800 --> 00:15:10,530
So within our IF statement curly brackets, let's just send back a congrats message.

210
00:15:11,020 --> 00:15:13,720
So response dot send.

211
00:15:14,120 --> 00:15:18,130
I'm going to include back tick so I can drop down onto multiple lines.

212
00:15:18,820 --> 00:15:25,650
And in between the tactics let's just send an HTML paragraph that says congrats.

213
00:15:26,350 --> 00:15:28,960
That is the correct answer.

214
00:15:29,350 --> 00:15:31,180
And then maybe right below the paragraph.

215
00:15:31,180 --> 00:15:36,250
Let's include an HTML link that they can click on to go back to the home page.

216
00:15:36,790 --> 00:15:45,490
So a four anchor in the middle, let's say back to home page and on the opening attack, let's give

217
00:15:45,490 --> 00:15:51,730
it an H ref and then let's just say forward slash to represent the home page.

218
00:15:52,280 --> 00:15:56,530
OK, but if the user types in something other than blue, that's incorrect.

219
00:15:56,530 --> 00:15:59,530
So we need to fill in this else part of our code.

220
00:16:00,010 --> 00:16:05,470
So to save a bit of typing, let's just copy and paste these lines right here from the start of our

221
00:16:05,470 --> 00:16:09,610
S to the end of the closing parentheses for the send.

222
00:16:10,510 --> 00:16:12,910
So I'm just going to select that and then copy it.

223
00:16:12,910 --> 00:16:16,870
And then in the else brackets, I'm going to paste in my clipboard.

224
00:16:17,680 --> 00:16:21,190
This time around, we just want to change the message that's in the paragraph.

225
00:16:21,760 --> 00:16:23,890
So this time we'll just say sorry.

226
00:16:24,880 --> 00:16:27,430
That is incorrect.

227
00:16:27,880 --> 00:16:28,450
All right.

228
00:16:28,450 --> 00:16:34,180
Now, before we save our file and test it out, we need to do one more thing by default.

229
00:16:34,180 --> 00:16:41,320
Out of the box Express actually will not add the user's inputs to the body object that belongs to the

230
00:16:41,320 --> 00:16:42,490
request object.

231
00:16:42,820 --> 00:16:48,100
So in order for this code that I'm selecting right now, in order for this to work, we need to tell

232
00:16:48,100 --> 00:16:50,770
Express to enable that feature.

233
00:16:51,280 --> 00:16:52,150
So do this with me.

234
00:16:52,150 --> 00:16:58,570
Scroll up to the very top of our file and right below this line where we say let our app equal and then

235
00:16:58,570 --> 00:17:00,820
we call Express right below that.

236
00:17:00,820 --> 00:17:09,040
Let's add a new line and let's just say our app dot use and now the rest of this line of code.

237
00:17:09,120 --> 00:17:12,240
Is not going to be educational in the slightest.

238
00:17:12,720 --> 00:17:18,840
This is more of boilerplate code that you would find on the Express Documentation website and then you

239
00:17:18,840 --> 00:17:23,610
would just copy and paste it and include it in each of your new express projects.

240
00:17:23,910 --> 00:17:26,630
So this is not something that you need to memorize.

241
00:17:27,030 --> 00:17:35,100
But let's say express dot, you are l encoded parentheses to call that method.

242
00:17:35,290 --> 00:17:36,750
Then we give it an object.

243
00:17:36,750 --> 00:17:44,070
So curly brackets inside those brackets, we include a property named Extended and then Colon and set

244
00:17:44,070 --> 00:17:45,300
it to false.

245
00:17:45,960 --> 00:17:49,940
You might need to pause the video lesson for a minute to type this in with me.

246
00:17:50,280 --> 00:17:55,590
But again, I'm not going to explain it because this is just boilerplate code and it's not educational.

247
00:17:55,890 --> 00:18:02,520
All it's doing is enabling that feature and express so that the user's input is easily accessible from

248
00:18:02,520 --> 00:18:05,570
the request body object at this point.

249
00:18:05,580 --> 00:18:07,110
Let's go ahead and save our file.

250
00:18:07,350 --> 00:18:12,000
Come down to the command line, stop the old server, fire up the new server.

251
00:18:13,170 --> 00:18:19,830
Let's go back to the browser by refresh the homepage and type in something other than blue simit.

252
00:18:20,520 --> 00:18:27,390
Sorry, that is incorrect, but if I go back to the home page and type in blue, congrats.

253
00:18:27,390 --> 00:18:28,580
That is the correct answer.

254
00:18:29,010 --> 00:18:34,710
Now you might be thinking to yourself, what if someone types in all capitals blue or just the first

255
00:18:34,710 --> 00:18:36,060
letter capitalized?

256
00:18:36,600 --> 00:18:37,110
We see.

257
00:18:37,110 --> 00:18:40,020
Sorry, that is incorrect, even though that is the correct answer.

258
00:18:40,350 --> 00:18:45,660
So really quick to make our code case insensitive instead of case sensitive.

259
00:18:46,050 --> 00:18:52,050
All we need to do is come into our IF statement and right after the request body dot sky color.

260
00:18:52,050 --> 00:18:59,190
Just say dot to upper case parentheses to call that method.

261
00:18:59,340 --> 00:19:04,860
So whatever the user typed in will be converted to all capitals and then we can just check to see if

262
00:19:04,860 --> 00:19:05,760
that equals.

263
00:19:05,760 --> 00:19:09,810
And then for here we can just say all uppercase blue.

264
00:19:10,680 --> 00:19:18,360
So let me save that and then restart the server, jump back into the browser if I type blue or maybe

265
00:19:18,360 --> 00:19:22,950
leave the E lowercase just to really prove a point and submit congrats.

266
00:19:22,950 --> 00:19:24,240
That is the correct answer.

267
00:19:24,600 --> 00:19:28,200
And that's actually going to bring this lesson to a close.

268
00:19:28,650 --> 00:19:31,710
In our next lesson, we are going to do two things.

269
00:19:32,040 --> 00:19:36,360
Number one, we will review why this example app was so important.

270
00:19:36,660 --> 00:19:43,050
And number two, we will identify the missing ingredient that is going to let us create more advanced

271
00:19:43,050 --> 00:19:44,160
applications.

272
00:19:44,550 --> 00:19:48,390
Let's keep our momentum rolling and I will see you in the next lesson.
