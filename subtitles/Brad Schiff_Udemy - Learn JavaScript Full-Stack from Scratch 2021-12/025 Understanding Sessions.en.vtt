WEBVTT
1
00:00:01.780 --> 00:00:02.690
Hello, everyone.

2
00:00:02.980 --> 00:00:07.420
In this lesson, we are going to continue learning about Sessions.

3
00:00:07.810 --> 00:00:09.340
Let's dive right in.

4
00:00:09.640 --> 00:00:16.420
So in our previous lesson, we implemented sessions and towards the end we learned that because we were

5
00:00:16.420 --> 00:00:24.160
storing session data in the memory of our server, that meant that any time our server quit or restarted,

6
00:00:24.430 --> 00:00:26.980
we would lose all of that session data.

7
00:00:27.490 --> 00:00:34.780
So let's set things up so that instead we store session data within our MongoDB database.

8
00:00:35.170 --> 00:00:41.530
Not only will this allow our node server to restart without losing our session data, but it will also

9
00:00:41.530 --> 00:00:43.870
help us from an educational standpoint.

10
00:00:44.200 --> 00:00:49.840
It will allow us to visualize or see a session with our own two eyes.

11
00:00:50.170 --> 00:00:52.570
Without further ado, let's get started.

12
00:00:52.930 --> 00:00:58.990
So jump into your text editor, and the first thing we're going to do is download a new package from

13
00:00:58.990 --> 00:01:03.580
npm, so open up your command line apps running Press Control.

14
00:01:03.580 --> 00:01:08.680
See, and let's run this command npm install.

15
00:01:09.220 --> 00:01:21.370
And the name of the package is Connect Dash, Mongo So NPM Install, Connect, Dash, Mongo Press Enter

16
00:01:21.370 --> 00:01:25.780
to install that, OK, then we can tell our server to begin running again.

17
00:01:25.780 --> 00:01:27.610
So npm run watch.

18
00:01:28.660 --> 00:01:35.560
All right, and now let's jump in to our app Typekit JS file and leverage that new package.

19
00:01:36.100 --> 00:01:43.630
Essentially, we're just going to modify our session options here in app D.J.s until it's a store session

20
00:01:43.630 --> 00:01:45.520
data within MongoDB.

21
00:01:45.820 --> 00:01:53.500
So up towards the top, maybe right below this line where we require in express session right below

22
00:01:53.500 --> 00:02:00.580
that, let's add a new line and say Konst, we could name it anything, but let's name it Mongo store.

23
00:02:01.270 --> 00:02:06.550
OK, but let's set this to equal, and then let's require in that new package.

24
00:02:06.730 --> 00:02:09.730
So connect Dash Mongo.

25
00:02:10.390 --> 00:02:16.210
OK, so now that we've set up Mongo Store, we can use that within our session options.

26
00:02:16.780 --> 00:02:24.660
So maybe right below this secret line, let's add a new line, and let's add an option named Store Coleman.

27
00:02:25.330 --> 00:02:31.840
By default, this session package will store session data in memory, but we can override that default

28
00:02:31.840 --> 00:02:33.910
with this option here store.

29
00:02:34.210 --> 00:02:38.230
So let's set this to Mongo Store.

30
00:02:38.350 --> 00:02:41.260
Look inside it for a method called Create.

31
00:02:41.950 --> 00:02:42.190
OK.

32
00:02:42.220 --> 00:02:44.590
Be sure to include a comma at the end of this line.

33
00:02:45.100 --> 00:02:51.400
Now, within the parentheses for this create method, we need to pass it in object so curly brackets

34
00:02:51.820 --> 00:02:54.790
and we only need this object to have one property.

35
00:02:55.210 --> 00:02:57.640
So we need a property named client.

36
00:02:58.180 --> 00:03:03.070
So Client Colon and then we provide it with a MongoDB client.

37
00:03:03.520 --> 00:03:10.660
Now, luckily for us, we've already set up a standalone, reusable file that connects to our database.

38
00:03:11.200 --> 00:03:16.540
Remember, in the root of our project, we have a file named DB Dot Jass.

39
00:03:16.990 --> 00:03:21.190
So let's just import or require in that db js file right here.

40
00:03:21.760 --> 00:03:28.960
So right after the client colon just say required within the parentheses, give it quotes and then just

41
00:03:29.290 --> 00:03:34.780
dot slash to look in the current directory and grab the file that is named DB.

42
00:03:35.680 --> 00:03:37.260
Now there's some good news and bad news.

43
00:03:37.270 --> 00:03:40.570
The good news is that we do have this re-usable database file.

44
00:03:40.900 --> 00:03:48.130
But the bad news is that it's currently set up to export a database, not the MongoDB client.

45
00:03:48.820 --> 00:03:50.530
But I guess there's more good news.

46
00:03:50.530 --> 00:03:52.900
The good news is that this is very easy to fix.

47
00:03:53.230 --> 00:03:55.330
So right now, I want you to do this with me.

48
00:03:55.570 --> 00:03:59.410
I want you to jump in to our DB dot js file.

49
00:04:00.390 --> 00:04:05.040
Within this DB file, I want you to look for the area where we are exporting something.

50
00:04:05.310 --> 00:04:09.690
So it's the line of code where we say module dot exports equals.

51
00:04:09.960 --> 00:04:15.900
Well, instead of setting this to equal client and then dot and call DB, let's just get rid of the

52
00:04:15.900 --> 00:04:17.070
Dot DB call.

53
00:04:18.510 --> 00:04:22.230
So it's now just module exports equals client.

54
00:04:22.740 --> 00:04:29.490
Go ahead and save that, then jump back into our app J.S. file and go ahead and save these latest changes

55
00:04:29.490 --> 00:04:29.970
as well.

56
00:04:30.570 --> 00:04:35.790
Now we just need to make one more change since we changed what our DB file exports.

57
00:04:36.000 --> 00:04:38.010
We also want to update our model.

58
00:04:38.610 --> 00:04:41.370
Let me show you what I mean within the route of your project.

59
00:04:41.580 --> 00:04:47.730
Look within your models folder and I want you to jump in to uppercase user a.j.'s.

60
00:04:48.930 --> 00:04:55.530
Remember, at the very top of this file, we created our users collection variable and we used our reusable

61
00:04:55.530 --> 00:04:56.490
DB file.

62
00:04:56.970 --> 00:05:03.930
And since this file is now exporting the MongoDB client instead of a database, we need to do this right

63
00:05:03.930 --> 00:05:05.940
before this dock collection.

64
00:05:06.510 --> 00:05:11.280
I want you to say dot db and then parentheses to call DB.

65
00:05:11.790 --> 00:05:12.840
So just like this?

66
00:05:13.110 --> 00:05:16.020
Go ahead and save this file and test it out.

67
00:05:16.950 --> 00:05:18.060
So in the browser?

68
00:05:18.420 --> 00:05:21.150
Let's go ahead and perform a successful log in.

69
00:05:21.660 --> 00:05:23.490
So use your correct values.

70
00:05:25.760 --> 00:05:26.790
OK, we see congrats.

71
00:05:26.810 --> 00:05:29.730
And if I go back to the base or root URL.

72
00:05:30.320 --> 00:05:32.440
Welcome to the actual application.

73
00:05:32.690 --> 00:05:39.980
But what's really important here is if we go into our MongoDB Atlas account and click on to the collection

74
00:05:39.990 --> 00:05:43.160
screen, you might need to click this refresh button.

75
00:05:45.420 --> 00:05:53.130
But now notice within our complex app database, we used to only have the one collection named users.

76
00:05:53.640 --> 00:05:57.720
Now we have this other collection named Sessions.

77
00:05:58.230 --> 00:06:00.630
So let's go ahead and click on that to take a look at it.

78
00:06:01.530 --> 00:06:04.830
And within this collection, we do see one document.

79
00:06:05.250 --> 00:06:07.740
So it has one field named I.D..

80
00:06:08.010 --> 00:06:10.950
We will circle back to this value in just a minute or two.

81
00:06:11.310 --> 00:06:15.870
It has an expired field and it also has a field named session.

82
00:06:16.500 --> 00:06:20.700
Now the value for this session field, if we click into this, it's an object.

83
00:06:20.700 --> 00:06:26.850
The first property is cookie, and then it contains the instructions of how the cookie should be created

84
00:06:26.850 --> 00:06:27.890
in the web browser.

85
00:06:28.200 --> 00:06:30.150
So it has the maximum age, right?

86
00:06:30.150 --> 00:06:32.040
We set that to 24 hours.

87
00:06:32.850 --> 00:06:38.490
You could set it to a week or a month if you wanted to, and then if we scroll over further, we also

88
00:06:38.490 --> 00:06:42.420
see this user property within the session field.

89
00:06:42.840 --> 00:06:49.380
So user is set to an object and it has one property named Favorite Color Blue and username is set to

90
00:06:49.380 --> 00:06:50.010
Brad.

91
00:06:50.460 --> 00:06:52.380
Now this data should look familiar to you.

92
00:06:52.650 --> 00:06:55.890
This is what we said back in our user controller.

93
00:06:56.850 --> 00:07:04.650
Remember, we said user dot log in and if the log in is correct and successful, then we set a new user

94
00:07:04.650 --> 00:07:09.900
property within the session object and we set it to equal this object.

95
00:07:10.380 --> 00:07:13.170
Favorite color blue username should be the current username.

96
00:07:13.710 --> 00:07:17.790
So now we are actually seeing that data being stored.

97
00:07:18.480 --> 00:07:23.160
Now let's circle back to the IDE fields or this ID value.

98
00:07:23.880 --> 00:07:27.900
This is the unique session identifier or ID.

99
00:07:28.650 --> 00:07:34.440
And right now, I want to show you something related to this that I believe will make everything crystal

100
00:07:34.440 --> 00:07:34.980
clear.

101
00:07:35.430 --> 00:07:40.740
Go ahead and jump back into the tab where we see welcome to the actual application.

102
00:07:41.250 --> 00:07:47.010
And let's go ahead and take a look at our cookies in our browser so you can right click from this page

103
00:07:47.010 --> 00:07:55.320
and choose Inspect that will open your developer tools, then click on the Application tab in the left

104
00:07:55.320 --> 00:07:59.490
hand sidebar under cookies, select local host column three thousand.

105
00:07:59.940 --> 00:08:05.850
We should just have the one cookie named Kinect port side and pay attention to the value here.

106
00:08:06.270 --> 00:08:09.510
After these initial four values, we can ignore those for now.

107
00:08:09.810 --> 00:08:15.960
After those, you'll see a randomly generated string of characters so yours are going to be different

108
00:08:15.960 --> 00:08:16.650
than mine.

109
00:08:16.650 --> 00:08:19.830
But just for the sake of this video, we see that on my screen.

110
00:08:19.830 --> 00:08:25.870
It's I d8 VR to oh, underscore ZITTI.

111
00:08:25.950 --> 00:08:26.740
You get the idea.

112
00:08:27.060 --> 00:08:37.470
Well, back in our MongoDB database, that is the matching ID, right ID VA VR 2.0 ZITTI, it's a match.

113
00:08:37.740 --> 00:08:45.600
So this explains how the server can now remember or trust the browser session because every time a web

114
00:08:45.600 --> 00:08:53.340
browser sends an HTTP request, it's going to send along with it any and all cookies for the current

115
00:08:53.340 --> 00:08:53.910
domain.

116
00:08:54.480 --> 00:08:57.810
We don't have to write any browser side code to make that happen.

117
00:08:58.020 --> 00:09:00.990
That's just the normal default behavior of browsers.

118
00:09:01.200 --> 00:09:03.930
They always send along their cookies with the request.

119
00:09:04.590 --> 00:09:11.430
So our server is going to see this unique session identifier and it's going to say, Hey, that matches

120
00:09:11.430 --> 00:09:13.660
this session ID in our database.

121
00:09:14.100 --> 00:09:19.590
And the only way a visitor or browser would have this value is if we just send it to them, meaning

122
00:09:19.590 --> 00:09:27.180
we can trust they are the same browser or visitor that just successfully logged in, and we can associate

123
00:09:27.180 --> 00:09:29.640
that visitor with our session data, right?

124
00:09:29.670 --> 00:09:35.480
We created a user property and hypothetically, that current user's favorite color might be blue.

125
00:09:35.490 --> 00:09:36.960
Their username is Brad.

126
00:09:37.170 --> 00:09:41.550
And none of this session data is stored in the browser's cookie.

127
00:09:41.970 --> 00:09:49.050
All that gets stored in the cookie is the unique session identifier, but all of the actual session

128
00:09:49.050 --> 00:09:51.960
data lives on the server side or database side.

129
00:09:52.410 --> 00:09:59.190
Let's run through one more example to make all of this crystal clear so you're already logged in in

130
00:09:59.190 --> 00:10:00.660
one web browser window.

131
00:10:01.050 --> 00:10:06.120
Right now, I want you to open an incognito window or a different browser entirely.

132
00:10:06.540 --> 00:10:08.460
So, for example, this is Google Chrome.

133
00:10:08.970 --> 00:10:11.250
This window is Mozilla Firefox.

134
00:10:11.490 --> 00:10:14.760
You could also just use an incognito window and Google Chrome.

135
00:10:15.030 --> 00:10:21.690
But what I'm getting at here is let's go ahead and register for a new user account within this new browser

136
00:10:21.690 --> 00:10:23.880
session or new browser window.

137
00:10:24.510 --> 00:10:26.340
I will choose a username of Cat.

138
00:10:26.370 --> 00:10:33.290
I'll set my email as Kat at Kat dot com and I'll choose a password of Curti Curti.

139
00:10:35.040 --> 00:10:35.700
Cool, we see.

140
00:10:35.700 --> 00:10:36.240
Congrats!

141
00:10:36.240 --> 00:10:37.610
There are no errors now.

142
00:10:37.650 --> 00:10:43.560
In the future, we will set things up so that if you successfully register, the system automatically

143
00:10:43.560 --> 00:10:44.400
logs you in.

144
00:10:44.810 --> 00:10:46.700
But for right now, we haven't set that up yet.

145
00:10:47.000 --> 00:10:52.670
So now we would need to go back to the homepage and use the top right login form to log in with that

146
00:10:52.670 --> 00:10:53.300
new account.

147
00:10:53.300 --> 00:10:56.740
So it was username Cat Curti, Curti.

148
00:10:57.860 --> 00:11:01.520
OK, so now I'm successfully logged in with that new cat account.

149
00:11:01.880 --> 00:11:04.310
And if I go back to the base URL?

150
00:11:04.940 --> 00:11:05.270
Cool.

151
00:11:05.270 --> 00:11:07.160
We can see the server remembers me.

152
00:11:07.160 --> 00:11:09.890
It says, welcome to the actual application.

153
00:11:10.280 --> 00:11:11.690
And now here's the interesting part.

154
00:11:11.990 --> 00:11:16.910
Back in MongoDB, if we click the Find button to refresh this collection.

155
00:11:17.930 --> 00:11:24.230
Now we see there are two documents in the session collection, so you can see this new document has

156
00:11:24.230 --> 00:11:28.790
a totally different and unique session identifier or I.D..

157
00:11:29.480 --> 00:11:35.000
And if I click into its session value at the end, we see it has a user property, and this time we

158
00:11:35.000 --> 00:11:38.720
see the username is set to cat and I won't bore you with it.

159
00:11:38.720 --> 00:11:45.590
But if I went into Mozilla Firefox and checked the browser cookie, it would have a value that matches

160
00:11:45.590 --> 00:11:47.900
this unique session identifier.

161
00:11:48.230 --> 00:11:56.030
So that's a general overview of how a server can identify or distinguish or trust incoming requests.

162
00:11:56.720 --> 00:12:03.440
Now, for the second half of this lesson, let's change gears, and let's give ourselves a realistic

163
00:12:03.440 --> 00:12:04.760
and satisfying goal.

164
00:12:05.180 --> 00:12:11.870
So when a user is logged in and they visit the root URL of our app, we don't actually want to just

165
00:12:11.870 --> 00:12:14.390
send them plain text that says welcome.

166
00:12:14.840 --> 00:12:20.150
What we would actually want to do is show them in h html template.

167
00:12:20.390 --> 00:12:24.470
That looks like this, and we could even personalize this.

168
00:12:24.470 --> 00:12:28.500
So it uses their real username instead of just this placeholder username.

169
00:12:28.990 --> 00:12:29.150
Right?

170
00:12:29.180 --> 00:12:32.090
It could say Hello, Brad or hello cat.

171
00:12:32.690 --> 00:12:38.270
OK, so serving this HTML template to logged in users is our goal.

172
00:12:38.750 --> 00:12:40.220
Let's get started on that goal.

173
00:12:40.850 --> 00:12:44.690
Now, remember, this is not a course on HTML.

174
00:12:45.080 --> 00:12:51.050
So instead of typing out that template by hand, we're just going to copy and paste it so you can visit

175
00:12:51.050 --> 00:12:54.710
this same GitHub repo from earlier in the course.

176
00:12:55.010 --> 00:13:01.610
Again, the address is GitHub dot com slash learn web code slash JavaScript.

177
00:13:02.060 --> 00:13:09.560
Within this repo, we would want to go into the folder named Oh Too Complex app, and then we'd want

178
00:13:09.560 --> 00:13:12.860
to go into the folder named Oh one HTML templates.

179
00:13:13.850 --> 00:13:19.400
And for the moment, we're interested in the template that is named home logged in.

180
00:13:19.760 --> 00:13:22.850
No results dot h html.

181
00:13:23.240 --> 00:13:28.640
So if you downloaded this repo earlier in the course, just open up that file, select and copy all

182
00:13:28.640 --> 00:13:29.600
of its contents.

183
00:13:30.320 --> 00:13:32.330
Or you don't need to download these files.

184
00:13:32.330 --> 00:13:35.390
You can literally just click on it right here from GitHub.

185
00:13:36.230 --> 00:13:38.810
From this screen, you can then click the raw button.

186
00:13:40.400 --> 00:13:41.990
Of course, this is just the raw code.

187
00:13:42.170 --> 00:13:47.150
Go ahead and select everything so you can press, control or command a on Mac.

188
00:13:47.600 --> 00:13:49.130
Copy that into your clipboard.

189
00:13:49.670 --> 00:13:57.140
OK, and now back in our text editor, let's create a new file within our Views subfolder.

190
00:13:57.440 --> 00:14:01.100
So on the Views folder, I can right click and choose New File.

191
00:14:02.060 --> 00:14:09.950
You can name this file anything but just so we're on the same page, let's name it Home Dash dashboard,

192
00:14:10.490 --> 00:14:14.360
and the file extension should be Dot E.j.'s.

193
00:14:14.840 --> 00:14:18.380
Remember, we're using a template engine named E.j.'s.

194
00:14:18.770 --> 00:14:22.910
OK, now within this brand new empty file, go ahead and paste in your clipboard.

195
00:14:23.750 --> 00:14:25.670
OK, then be sure to save this file.

196
00:14:25.910 --> 00:14:32.630
And now I want you to jump in to our user controller file within user controller, not if we scroll

197
00:14:32.630 --> 00:14:33.710
down to the bottom.

198
00:14:34.040 --> 00:14:36.810
Remember, we have this function called home.

199
00:14:37.310 --> 00:14:40.830
We've already set up if LS blocks here, right?

200
00:14:40.850 --> 00:14:47.840
If the current session has a user object, that means we would want to send them the actual application.

201
00:14:48.230 --> 00:14:51.290
Otherwise, send them the guest version of the home page.

202
00:14:52.040 --> 00:14:56.570
So instead of just sending over this plain text, let's get rid of that.

203
00:14:56.960 --> 00:15:03.050
And instead, we would want to response Dot render within the parentheses.

204
00:15:03.050 --> 00:15:08.570
The name of that new template is Home Dash dashboard.

205
00:15:09.290 --> 00:15:15.620
Let's go ahead and save this and take it for a test drive back in the browser in the tab where I am

206
00:15:15.620 --> 00:15:19.970
logged in if I send a new request or refresh the base URL.

207
00:15:22.060 --> 00:15:23.620
Awesome, we see that template.

208
00:15:24.040 --> 00:15:27.700
Now the question becomes, instead of this place, hold their hair.

209
00:15:27.970 --> 00:15:31.960
How can we actually pull in the correct current username?

210
00:15:32.290 --> 00:15:36.790
Well, check this out back in our code when you render a template.

211
00:15:37.060 --> 00:15:42.820
Obviously, the first argument should be the name of the template you want to render, but we can include

212
00:15:42.820 --> 00:15:45.340
a second argument here so comma.

213
00:15:45.910 --> 00:15:52.000
And now we can provide an object so curly brackets, and now we can include any data that we want to

214
00:15:52.360 --> 00:15:54.610
pass into this template.

215
00:15:54.940 --> 00:16:01.600
You can make up any property names you want, but let's make up a property named username.

216
00:16:02.110 --> 00:16:06.220
And let's set that to the username for the current session.

217
00:16:06.670 --> 00:16:11.530
So we know that we can access the current session from request dot session.

218
00:16:11.980 --> 00:16:14.410
So let's say request dot session.

219
00:16:14.980 --> 00:16:22.330
We're interested in the user property and then inside of that, we know that there is a username property,

220
00:16:22.810 --> 00:16:23.080
right?

221
00:16:23.090 --> 00:16:28.840
And if you were confused, you could always just go look at your MongoDB session document and see this

222
00:16:28.840 --> 00:16:29.980
structure reflected.

223
00:16:30.280 --> 00:16:32.290
So let's go ahead and save this.

224
00:16:32.560 --> 00:16:40.090
And now we will have a property of username available to us from within that E.j.'s template.

225
00:16:40.660 --> 00:16:41.500
So check this out.

226
00:16:41.710 --> 00:16:49.490
Jump back in to that new Home Dash dashboard file and online number 32.

227
00:16:49.720 --> 00:16:56.020
You'll see a heading level two that says hello, and then the placeholder username is wrapped in bold

228
00:16:56.020 --> 00:16:57.130
or strong tags.

229
00:16:57.640 --> 00:16:58.450
So check this out.

230
00:16:58.720 --> 00:17:06.160
Let's get rid of this placeholder username value, and within the E.j.'s template language, you're

231
00:17:06.160 --> 00:17:08.320
free to include HTML.

232
00:17:08.710 --> 00:17:13.690
And then when you want to do something dynamic, when you want to run a bit of JavaScript, you can

233
00:17:13.690 --> 00:17:15.190
just open these tags.

234
00:17:15.550 --> 00:17:19.840
The opening tag is the less than symbol and then a percentage sign.

235
00:17:20.140 --> 00:17:24.280
The closing tag is a percentage sign and then greater than now.

236
00:17:24.280 --> 00:17:30.220
Within these tags, we can run a bit of JavaScript, so we would just want to pull in that username

237
00:17:30.220 --> 00:17:32.570
property now in E.j.'s.

238
00:17:32.590 --> 00:17:35.830
This is how you can do something dynamic or run JavaScript.

239
00:17:36.160 --> 00:17:43.840
But if you want to specifically output something or print something after the opening percentage sign,

240
00:17:43.840 --> 00:17:46.420
you would include an equal sign here.

241
00:17:46.930 --> 00:17:52.840
All right, let's go ahead and save this file and then back in the browser if we refresh.

242
00:17:55.680 --> 00:17:56.760
Awesome, we see.

243
00:17:57.090 --> 00:17:57.960
Hello, Brad.

244
00:17:58.350 --> 00:18:05.820
And if I jump over to my Mozilla Firefox window or I'm logged in as the cat user, if I refresh or send

245
00:18:05.820 --> 00:18:07.920
a new request to the base URL.

246
00:18:08.520 --> 00:18:09.390
Hello, cat!

247
00:18:10.050 --> 00:18:10.470
Cool.

248
00:18:10.470 --> 00:18:12.870
So things are really starting to take shape.

249
00:18:13.530 --> 00:18:17.970
This is starting to look and feel almost like a real application.

250
00:18:18.480 --> 00:18:24.720
And now that we're presenting logged in users with this top right menu instead of the log in form,

251
00:18:25.050 --> 00:18:31.480
I think the perfect next task for us to focus on is the sign out button, right?

252
00:18:31.500 --> 00:18:38.130
We want to give the users the ability to log out or destroy their current session, and that's exactly

253
00:18:38.130 --> 00:18:40.560
what we're going to set up in our next lesson.

254
00:18:41.040 --> 00:18:43.530
So let's keep things rolling, and I'll see you then.
