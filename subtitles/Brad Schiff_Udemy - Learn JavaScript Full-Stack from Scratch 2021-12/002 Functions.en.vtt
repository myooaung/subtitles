WEBVTT
1
00:00:01.690 --> 00:00:05.710
Hello, everyone, welcome back to the 10 days of JavaScript.

2
00:00:06.350 --> 00:00:08.200
Here we are in day number two.

3
00:00:08.470 --> 00:00:12.640
And in this lesson, we're going to learn about functions.

4
00:00:13.240 --> 00:00:16.710
So we will answer the question, what is a function?

5
00:00:17.140 --> 00:00:24.010
However, before we get to that, let's first talk about where we are going to type our code in this

6
00:00:24.010 --> 00:00:24.530
lesson.

7
00:00:24.970 --> 00:00:30.370
So in our previous lesson, we learned how to open up the Web browsers console.

8
00:00:30.910 --> 00:00:31.180
Right.

9
00:00:31.230 --> 00:00:32.320
So remember, you can right.

10
00:00:32.320 --> 00:00:37.750
Click on a Web page, choose, inspect, and that opens up your developer tools.

11
00:00:37.750 --> 00:00:43.150
And then you just look for the tab or button that's named console, OK?

12
00:00:43.180 --> 00:00:49.480
Remember in the previous lesson we learned how to type down here, two plus two press enter.

13
00:00:49.480 --> 00:00:57.190
We see for now the console is great for experimenting and typing out these single lines of code and

14
00:00:57.190 --> 00:00:58.360
then pressing enter.

15
00:00:58.660 --> 00:01:06.430
But in the real world, you're going to want to write multiple lines of code at once, meaning when

16
00:01:06.430 --> 00:01:11.770
you push enter, you don't want the computer to execute or run your code right away.

17
00:01:12.190 --> 00:01:19.270
So almost like a word processing document with multiple sentences and paragraphs, we want to be able

18
00:01:19.270 --> 00:01:26.290
to write out multiple lines of JavaScript code and then have the computer run everything that we just

19
00:01:26.290 --> 00:01:26.770
typed.

20
00:01:27.490 --> 00:01:35.140
Now, the easiest way to get started practicing this is actually not the console, but instead a website

21
00:01:35.560 --> 00:01:37.290
named Code Pen.

22
00:01:37.750 --> 00:01:44.410
And right now, I want you to follow along with me so you can either Google for code pen or you can

23
00:01:44.410 --> 00:01:48.490
just visit the address, which is code pen dot I.

24
00:01:49.360 --> 00:01:55.600
So right now, this very minute, I want you to pause this lesson if you need to, while you go open

25
00:01:55.600 --> 00:01:58.960
code pen in a new tab so you can follow along.

26
00:01:59.620 --> 00:02:03.730
In my opinion, code pen is the easiest way to get started.

27
00:02:03.970 --> 00:02:11.260
Actually writing code it's free to use and if you do not want to, you don't even have to create or

28
00:02:11.260 --> 00:02:12.550
sign up for an account.

29
00:02:12.910 --> 00:02:17.420
You can literally just come to this website and click the create button.

30
00:02:17.450 --> 00:02:19.090
Should be somewhere towards the top.

31
00:02:19.090 --> 00:02:19.420
Right.

32
00:02:21.100 --> 00:02:25.750
And then from this menu that appears, choose the new pen option.

33
00:02:26.980 --> 00:02:28.210
So create new pen.

34
00:02:29.650 --> 00:02:31.630
OK, so what's going on now?

35
00:02:31.630 --> 00:02:32.810
What is this screen?

36
00:02:33.340 --> 00:02:41.950
Well, each pen that we create is like an empty canvas or a playground or playpen or an experiment where

37
00:02:41.950 --> 00:02:42.880
we can code.

38
00:02:43.240 --> 00:02:45.580
So we see that there are three columns.

39
00:02:46.000 --> 00:02:48.190
The first is each HTML.

40
00:02:49.440 --> 00:02:54.400
And then success and then J.S. or JavaScript.

41
00:02:54.990 --> 00:03:01.350
Now, this is a course that is focused on JavaScript, so we are not going to worry too much about these

42
00:03:01.350 --> 00:03:02.640
first two columns.

43
00:03:03.330 --> 00:03:10.680
But the big picture idea is that these are the three languages that Web pages are created with.

44
00:03:11.280 --> 00:03:16.180
And how code pen works is that as you type in a column, let me shrink this.

45
00:03:16.200 --> 00:03:19.550
You can actually see as you type in a column.

46
00:03:19.560 --> 00:03:28.620
So in the HTML column, if I say hello there, as soon as I stop typing for a second, a preview is

47
00:03:28.620 --> 00:03:32.370
shown to me down here of what my code creates.

48
00:03:33.030 --> 00:03:33.690
Perfect.

49
00:03:33.840 --> 00:03:37.170
Except this is not a course on each HTML.

50
00:03:37.530 --> 00:03:40.580
We want to learn about JavaScript.

51
00:03:41.160 --> 00:03:48.750
So just to make it really easy to focus on JavaScript for right now, why don't we hide the HTML and

52
00:03:48.750 --> 00:03:50.010
CSS columns?

53
00:03:50.430 --> 00:03:54.570
So to do that, all I did was drag on the border.

54
00:03:55.350 --> 00:03:55.530
Right.

55
00:03:55.630 --> 00:04:01.140
This vertical line right between success and JavaScript, hover over that and then click and drag to

56
00:04:01.140 --> 00:04:01.750
the left.

57
00:04:02.220 --> 00:04:06.270
So that way the JavaScript column takes up most of our screen.

58
00:04:06.330 --> 00:04:09.680
Right, because that's the language that we want to practice.

59
00:04:10.140 --> 00:04:10.600
Cool.

60
00:04:10.650 --> 00:04:12.380
Now, you do not need to do that.

61
00:04:12.420 --> 00:04:16.380
It just gives you more room as we're going to be typing in this column.

62
00:04:17.820 --> 00:04:24.180
So we now have a perfect environment to start practicing because in this JavaScript column, we can

63
00:04:24.180 --> 00:04:27.360
now type out multiple lines and just keep pressing enter.

64
00:04:27.840 --> 00:04:33.780
And each time we type a bit of new code, the computer is going to execute everything that we wrote

65
00:04:33.810 --> 00:04:38.670
all at once together, just like an actual real world computer program.

66
00:04:39.060 --> 00:04:45.720
OK, now, having said all of that, let's get back to the actual goal of this particular lesson.

67
00:04:46.110 --> 00:04:46.420
Right.

68
00:04:46.440 --> 00:04:49.250
And that is the topic of functions.

69
00:04:49.560 --> 00:04:52.380
So what in the world is a function?

70
00:04:53.100 --> 00:04:56.970
Well, I like to think of functions as action words.

71
00:04:57.390 --> 00:05:05.320
So if we were comparing JavaScript to a language like English or Spanish, a function would be a verb.

72
00:05:06.030 --> 00:05:15.870
So, for example, if our pet dog was a computer that spoke JavaScript, we could say run or jump or

73
00:05:15.870 --> 00:05:16.380
sit.

74
00:05:17.570 --> 00:05:23.720
So you simply type out the name of the action or the name of the function, and then you include a pair

75
00:05:23.720 --> 00:05:24.950
of parentheses.

76
00:05:25.460 --> 00:05:27.470
However, let's be realistic.

77
00:05:27.630 --> 00:05:36.090
Our Web browser is not a dog, so it can't run, jump or sit, but it can do web browser ish things.

78
00:05:36.620 --> 00:05:43.640
So, for example, let's delete these three lines of code and we can create an annoying pop up by calling

79
00:05:43.640 --> 00:05:46.580
the browsers alert function.

80
00:05:47.030 --> 00:05:51.770
So alert and then parentheses and we can see this pop up appears.

81
00:05:52.070 --> 00:05:55.910
So this is how you can alert the visitor of the site with a message.

82
00:05:56.420 --> 00:05:56.630
Right.

83
00:05:56.710 --> 00:06:00.800
So if you really want to get their attention, you can include a custom message right about here.

84
00:06:01.260 --> 00:06:04.580
So let's go ahead and click the button to dismiss the alert pop up.

85
00:06:05.620 --> 00:06:11.350
And within the parentheses for this alert, we can include quotes and then say, hey.

86
00:06:12.800 --> 00:06:17.100
And here you can see in the new Pop-Up, there is our custom message cool.

87
00:06:17.240 --> 00:06:19.750
Let's go ahead and close or dismiss this pop up.

88
00:06:20.360 --> 00:06:27.380
So the idea is that within the parentheses, you can pass along a bit of data to the function and it's

89
00:06:27.380 --> 00:06:30.500
up to the function as to how it uses that data.

90
00:06:31.040 --> 00:06:33.220
So back to the dog example, right?

91
00:06:33.260 --> 00:06:40.130
If our dog spoke JavaScript, we could say jump and maybe first we want to tell the dog to jump high,

92
00:06:40.430 --> 00:06:44.790
but then we could also tell the dog to jump again and maybe this time jump low.

93
00:06:45.350 --> 00:06:52.070
So to review, you can call a function simply by including the word and then parentheses and then inside

94
00:06:52.070 --> 00:06:55.060
the parentheses, we can pass along a bit of data.

95
00:06:55.490 --> 00:07:00.760
The technical name for a piece of data that we pass along is an argument.

96
00:07:01.340 --> 00:07:09.440
So altogether we are calling or executing the browser's alert function and we are passing it an argument

97
00:07:09.440 --> 00:07:17.510
of, hey, OK, so the browser has these different action words or functions like alert that we can

98
00:07:17.510 --> 00:07:17.960
call.

99
00:07:18.320 --> 00:07:25.850
But we are not limited to only those functions because just like you can teach a dog a new trick, we

100
00:07:25.850 --> 00:07:32.610
can also teach our JavaScript environment new tricks by creating our own brand new functions.

101
00:07:33.230 --> 00:07:35.330
So, for example, let's get rid of this line.

102
00:07:35.630 --> 00:07:42.860
And if I type out, greet and then parentheses, the web browser does not know what this means.

103
00:07:43.250 --> 00:07:47.110
The browser does not have a function named greet.

104
00:07:47.630 --> 00:07:53.300
So when I say greet and then parentheses, this would be like telling a dog to bake a cake.

105
00:07:53.630 --> 00:07:56.500
It's not going to know what you mean and it's just going to look at you funny.

106
00:07:56.870 --> 00:08:05.300
However, as a programmer, we can create our own brand new function named Greet and we simply explain

107
00:08:05.300 --> 00:08:07.730
what that action or function should do.

108
00:08:07.940 --> 00:08:10.880
And then it will be added to the browser's vocabulary.

109
00:08:10.880 --> 00:08:16.420
And we can use or call it just like we would alert or any of the built in functions.

110
00:08:17.000 --> 00:08:20.290
So the question becomes, how do we create a function?

111
00:08:20.600 --> 00:08:20.840
Right.

112
00:08:20.840 --> 00:08:24.790
We've learned how to call or execute or run a function.

113
00:08:25.190 --> 00:08:25.410
Right.

114
00:08:25.440 --> 00:08:27.350
This is how you issue a command.

115
00:08:27.530 --> 00:08:30.380
You simply type the name of the function and then parentheses.

116
00:08:30.740 --> 00:08:36.590
But how do you actually create the recipe or the instructions or the logic for the function?

117
00:08:37.160 --> 00:08:38.140
Well, let me show you.

118
00:08:38.480 --> 00:08:47.030
So let's start fresh and we begin by typing the word function and then a space and then we get to make

119
00:08:47.030 --> 00:08:49.970
up whatever name we want for our new function.

120
00:08:50.810 --> 00:08:52.120
The name does not matter.

121
00:08:52.130 --> 00:08:59.180
You could call it pizza or unicorn, but in this case, I'm going to name it greet.

122
00:09:00.260 --> 00:09:07.180
Then we include a pair of parentheses and then after the parentheses we include a pair of curly brackets.

123
00:09:07.520 --> 00:09:13.100
If you're not familiar with these characters, you can create them by holding the shift key and then

124
00:09:13.100 --> 00:09:16.300
pressing the key directly to the right of the pecky.

125
00:09:16.760 --> 00:09:22.940
OK, and now you don't have to do this, but in between the two curly brackets, I like to push, enter

126
00:09:22.940 --> 00:09:27.890
or return and drop down to a new line like this just for visual clarity.

127
00:09:28.340 --> 00:09:33.470
OK, but in between the curly brackets where my cursor is blinking right now, this is what is referred

128
00:09:33.470 --> 00:09:36.410
to as the body of the function.

129
00:09:36.920 --> 00:09:40.260
And this is where we are free to do just about anything.

130
00:09:40.460 --> 00:09:44.140
So this is where we explain what the function should actually do.

131
00:09:44.480 --> 00:09:51.020
So just as a quick test, let's set things up so that when you call or run the greet function, an alert

132
00:09:51.020 --> 00:09:55.580
popup should appear that says, hello, my name is and then whatever your name is.

133
00:09:56.010 --> 00:10:02.990
So inside the curly brackets, let's call the alert function and say hello, my name is.

134
00:10:03.350 --> 00:10:05.870
And then you could put your name instead of my name.

135
00:10:06.500 --> 00:10:07.040
All right.

136
00:10:07.040 --> 00:10:12.050
And now you might be wondering why an alert pop up message is not appearing right away.

137
00:10:12.500 --> 00:10:18.800
And it's because all we've done here is describe the function or define the function.

138
00:10:19.460 --> 00:10:22.640
So this is the recipe for our new greet action.

139
00:10:22.940 --> 00:10:29.450
And now if we want it to actually happen, if we want to tell the browser to actually perform the function,

140
00:10:29.720 --> 00:10:33.680
maybe down here we could just say greet and then parentheses.

141
00:10:33.680 --> 00:10:33.890
Right.

142
00:10:33.890 --> 00:10:35.120
That's how you call a function.

143
00:10:35.510 --> 00:10:37.430
And there we can see the pop up appears.

144
00:10:37.760 --> 00:10:45.140
Hello, my name is Brad and if we called the function again, we call again grippe second time, it

145
00:10:45.140 --> 00:10:46.080
should appear twice.

146
00:10:46.130 --> 00:10:47.270
So here it is once I click.

147
00:10:47.270 --> 00:10:49.300
OK, there it is a second time.

148
00:10:49.700 --> 00:10:50.360
Perfect.

149
00:10:51.020 --> 00:10:57.410
So we just taught the browser a new trick, a new action, or we should say a new function.

150
00:10:58.010 --> 00:11:04.070
Now, before we move on, let's improve our function because it would be nice if it was flexible.

151
00:11:04.520 --> 00:11:06.250
Let me explain what I mean by that.

152
00:11:06.500 --> 00:11:07.610
So follow along with me.

153
00:11:07.610 --> 00:11:10.100
Let's delete these two function calls for Gry.

154
00:11:10.970 --> 00:11:12.290
And remember when I used the.

155
00:11:12.310 --> 00:11:19.250
For example, that a dog can jump, but you could also tell it to jump high or to jump low.

156
00:11:19.870 --> 00:11:24.660
And we learned that the data you pass within the parentheses is referred to as an argument.

157
00:11:25.150 --> 00:11:25.420
Right.

158
00:11:25.420 --> 00:11:28.990
And it's up to the function to perhaps use that data in some way.

159
00:11:29.500 --> 00:11:33.790
Well, wouldn't it be cool if our greet function was flexible?

160
00:11:34.060 --> 00:11:39.450
And when you called it, you could pass in a name instead of hard coding the name right here?

161
00:11:39.970 --> 00:11:45.400
So, for example, wouldn't it be neat if we could, say, greet and pass it a value of John and then

162
00:11:45.400 --> 00:11:47.620
it would say, hello, my name is John.

163
00:11:48.640 --> 00:11:53.440
And then you could call it again and say, greet with a value of Jane and then it would say, hello,

164
00:11:53.440 --> 00:11:54.270
my name is Jane.

165
00:11:55.870 --> 00:11:57.850
So let me show you how we can set that up.

166
00:11:58.060 --> 00:12:03.400
I'm going to go ahead and delete these two function calls so code pen doesn't drive me insane and keep

167
00:12:03.400 --> 00:12:06.100
showing those pop ups after every keystroke.

168
00:12:06.520 --> 00:12:08.500
OK, so back to the task at hand.

169
00:12:08.710 --> 00:12:11.110
How can we make this function flexible?

170
00:12:11.470 --> 00:12:18.010
Well, it starts with these parentheses right after the name of our function within these parentheses.

171
00:12:18.010 --> 00:12:22.450
Let's type the letter X. I'm just making that up because it's easy to type.

172
00:12:22.450 --> 00:12:27.030
But you could also say the name or pizza or unicorn or anything.

173
00:12:27.430 --> 00:12:34.780
So by including this here, we have created a parameter named X and we can use this parameter within

174
00:12:34.780 --> 00:12:36.400
the body of the function.

175
00:12:36.790 --> 00:12:38.130
Let me show you what that means.

176
00:12:38.140 --> 00:12:41.410
So down here where we would actually run or call the function.

177
00:12:44.160 --> 00:12:51.120
I'm going to place a cigar right in front of it to comment it out, I'm only doing this so Code Penn

178
00:12:51.120 --> 00:12:54.630
doesn't try to show the pop up after every couple of keystrokes.

179
00:12:54.900 --> 00:12:57.880
But the idea is within the parentheses for our function.

180
00:12:57.930 --> 00:13:01.350
We call it if we include quotes and a name.

181
00:13:01.350 --> 00:13:08.940
So great, John, this data that we're passing along, John, we want to be able to access that within

182
00:13:08.940 --> 00:13:11.090
our function, within the body of our function.

183
00:13:11.400 --> 00:13:18.100
So by including X here as a parameter X is going to equal the value of whatever gets passed in.

184
00:13:18.120 --> 00:13:19.590
So in this case, it would be John.

185
00:13:20.010 --> 00:13:24.250
So now within the body of our function, we can use that to type this out with me.

186
00:13:24.450 --> 00:13:26.030
Let's get rid of your name here.

187
00:13:26.760 --> 00:13:32.820
So just have hello, my name is Space and then the quote and then let's say plus.

188
00:13:33.740 --> 00:13:41.030
X and then let's also add on quotes and a closing period to close out the sentence.

189
00:13:41.570 --> 00:13:47.900
So now down here, if we removed the two forward slashes, the browser or code pen will not actually

190
00:13:47.900 --> 00:13:49.490
run or execute it again.

191
00:13:50.770 --> 00:13:51.700
And here we see.

192
00:13:51.940 --> 00:13:57.330
Hello, my name is John, and again, we don't need to use X as the parameter.

193
00:13:57.610 --> 00:14:03.250
So up in our function definition, within these parentheses, we could say the name and then within

194
00:14:03.250 --> 00:14:07.540
the body of our function, we would just say instead of X the name.

195
00:14:09.000 --> 00:14:10.380
And it works just the same.

196
00:14:11.650 --> 00:14:15.600
OK, so it's a review down here we are calling our Greek function.

197
00:14:15.930 --> 00:14:19.170
We are passing it an argument of John.

198
00:14:19.650 --> 00:14:26.520
And then within our function definition, we've included a matching parameter named the one name that's

199
00:14:26.520 --> 00:14:31.550
going to temporarily store that value and then we can use it however we want.

200
00:14:32.280 --> 00:14:38.550
So down here, we could call the Greek function again and say greet and pass it the value of Jane.

201
00:14:40.090 --> 00:14:44.680
So when our code runs, we see the first one for John click, OK, there's the one for Jane.

202
00:14:44.950 --> 00:14:45.540
Perfect.

203
00:14:45.910 --> 00:14:52.810
Now, before we move on, I want to show you that you can pass along multiple arguments when you call

204
00:14:52.810 --> 00:14:53.500
a function.

205
00:14:54.040 --> 00:14:55.330
Let me show you what I mean.

206
00:14:55.570 --> 00:14:59.410
But first, let's comment out these two lines with Eglash.

207
00:14:59.770 --> 00:15:05.710
Just a code pen doesn't drive us insane with the alerts each time we modify the function, OK?

208
00:15:05.710 --> 00:15:11.220
And let's assume that we want to change our grep function to now include the person's favorite color.

209
00:15:11.560 --> 00:15:16.510
So, hello, my name is blank and then let's say plus.

210
00:15:17.510 --> 00:15:22.570
Pair of quotes, space, and my favorite color is.

211
00:15:23.570 --> 00:15:33.620
Space, and then let's plus fav color and then add in the quotes for the closing period, OK, and then

212
00:15:33.620 --> 00:15:34.690
how would we use this?

213
00:15:34.700 --> 00:15:40.250
Well, down in the function calls when we say greet and give it a value of John, after the quotes,

214
00:15:40.250 --> 00:15:43.780
we can just say comma and pass along a second argument.

215
00:15:44.300 --> 00:15:51.710
So let's say John's favorite color is blue and then with Jane after her quotes, comma, and let's say

216
00:15:51.710 --> 00:15:53.660
her favorite color is green.

217
00:15:54.750 --> 00:16:00.660
Now, if we're including two arguments when we call the function, we want to be sure that we include

218
00:16:01.020 --> 00:16:04.490
two parameters up in the function definition.

219
00:16:04.890 --> 00:16:10.710
So the first thing that gets passed and is done name and then up here we could say comma, fav color.

220
00:16:11.310 --> 00:16:13.460
Right, because that's the name that I chose right here.

221
00:16:14.190 --> 00:16:19.280
So as soon as I remove these forward slashes to uncommented out our code, we see.

222
00:16:19.290 --> 00:16:20.160
Hello, my name is John.

223
00:16:20.160 --> 00:16:21.450
My favorite color is Blue.

224
00:16:21.900 --> 00:16:26.060
And hello, my name is Jane and my favorite color is green.

225
00:16:26.670 --> 00:16:27.270
Perfect.

226
00:16:28.110 --> 00:16:29.780
Now practice makes perfect.

227
00:16:29.790 --> 00:16:35.240
So before we bring this lesson to a close, I want to write one more function with you.

228
00:16:35.640 --> 00:16:40.830
So first I'm going to comment about these two lines so code pen doesn't keep showing me those pop ups.

229
00:16:41.430 --> 00:16:49.140
OK, and right below that, down here, let's create a function named Triple Me, or you could do double

230
00:16:49.140 --> 00:16:50.730
me or quadruple me.

231
00:16:51.000 --> 00:16:57.210
But let's set up a function so that when you pass it a number, maybe it triples that number.

232
00:16:57.570 --> 00:17:03.990
So imagine we could say triple me and then as the argument, just give it a number of five and we would

233
00:17:03.990 --> 00:17:07.740
expect this function to return a value of fifteen.

234
00:17:08.310 --> 00:17:09.600
So let's walk through this.

235
00:17:10.230 --> 00:17:14.730
So first we create the function definition or the recipe for the function.

236
00:17:15.180 --> 00:17:20.100
So let's say function space and then the name you can make one up.

237
00:17:20.100 --> 00:17:26.570
I'm calling it triple me and then parentheses and then after the parentheses curly brackets.

238
00:17:27.720 --> 00:17:33.300
OK, now within the parentheses, right after triple my, let's include X as a parameter and now we

239
00:17:33.300 --> 00:17:35.540
can use that within the body of the function.

240
00:17:35.970 --> 00:17:42.060
Now I do want to let you know that within the body of our function we do not need to call a browser

241
00:17:42.060 --> 00:17:44.460
function like alert instead.

242
00:17:44.460 --> 00:17:50.430
Actually a function in its purest form simply returns a value.

243
00:17:50.820 --> 00:17:54.660
So let's say return and then what do we want to return?

244
00:17:55.080 --> 00:18:02.130
Well, the function is named tripple me, so why don't we just say three and then asterisk for multiplication

245
00:18:02.460 --> 00:18:06.900
and then whatever number is getting passed in through the argument and parameter.

246
00:18:07.350 --> 00:18:07.650
Right.

247
00:18:07.650 --> 00:18:11.070
In this case I chose X, OK, and then let's test this function out.

248
00:18:11.070 --> 00:18:15.060
So down here, let's create a variable that stores a number.

249
00:18:15.070 --> 00:18:24.900
So let's say let my favorite number equal and then let's use our function, let's say triple me.

250
00:18:25.110 --> 00:18:25.400
Right.

251
00:18:25.410 --> 00:18:31.800
We're calling or executing the function and let's pass it a value of twelve, OK?

252
00:18:31.800 --> 00:18:35.540
And then finally, we want to test things to make sure that it's actually working.

253
00:18:35.970 --> 00:18:41.790
So finally, let's just alert out the value of my favorite number just so we can see it with our own

254
00:18:41.790 --> 00:18:42.590
two eyes.

255
00:18:42.960 --> 00:18:47.340
So finally we can say alert my favorite number.

256
00:18:47.970 --> 00:18:48.480
Perfect.

257
00:18:48.480 --> 00:18:50.160
And there we see thirty six.

258
00:18:50.190 --> 00:18:50.580
Right.

259
00:18:50.580 --> 00:18:53.550
If you triple twelve, you get thirty six.

260
00:18:53.970 --> 00:18:59.610
I know I moved a lot faster for this second example of me, but I just wanted to give you something

261
00:18:59.610 --> 00:19:00.900
to experiment with.

262
00:19:01.200 --> 00:19:05.100
And if you need to watch this part a couple of times, that's OK.

263
00:19:05.550 --> 00:19:10.740
If everything in this lesson was not crystal clear and you're still a bit confused, that's OK.

264
00:19:11.250 --> 00:19:16.530
All you really need to have remembered from this lesson is that there are functions.

265
00:19:16.860 --> 00:19:19.970
You can create a function by saying function jump.

266
00:19:20.940 --> 00:19:26.640
This creates the recipe or the definition for that function and then you are free to run or call that

267
00:19:26.640 --> 00:19:30.480
function wherever you want, however many times you want.

268
00:19:30.690 --> 00:19:34.920
And then of course, we learn that you can pass that data inside the parentheses.

269
00:19:35.400 --> 00:19:40.740
If this concept is even a little bit familiar to you, if it's making even just a little bit of sense,

270
00:19:40.980 --> 00:19:41.940
then you're doing great.

271
00:19:42.240 --> 00:19:45.930
You're right on track and you're ready to move on to the next lesson.

272
00:19:46.260 --> 00:19:47.850
So we just cover functions.

273
00:19:47.850 --> 00:19:50.070
Up next, objects.

274
00:19:50.400 --> 00:19:52.290
So what in the world is an object?

275
00:19:52.620 --> 00:19:54.120
Let's keep our momentum rolling.

276
00:19:54.270 --> 00:19:58.590
Let's answer that question and I will see you in the next lesson.
