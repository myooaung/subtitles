WEBVTT
1
00:00:01.830 --> 00:00:02.880
Hello, everyone.

2
00:00:03.150 --> 00:00:08.790
In this lesson, we're going to learn how to send email through an application.

3
00:00:09.300 --> 00:00:15.630
So, for example, maybe when you create a new post and actually submit it, then the system could send

4
00:00:15.630 --> 00:00:19.980
you an email and say congrats, your new post is up and live.

5
00:00:20.460 --> 00:00:26.340
Or maybe when you first register for your new account on the app, the app sends you a welcome email.

6
00:00:26.670 --> 00:00:30.780
Or maybe when someone follows your account, you get the idea.

7
00:00:30.790 --> 00:00:36.810
There are tons of different instances in which it would be nice if our app could send an email to a

8
00:00:36.810 --> 00:00:37.290
user.

9
00:00:37.980 --> 00:00:42.840
Now, right away, I should mention that the email method that I'm going to recommend in this lesson

10
00:00:43.110 --> 00:00:50.250
is a very hands off approach, meaning I'm not going to try and configure our server or the hosting

11
00:00:50.250 --> 00:00:53.340
environment to actually send the emails.

12
00:00:53.700 --> 00:00:59.970
Instead, I'm going to use a third party service that is completely devoted and dedicated to sending

13
00:00:59.970 --> 00:01:00.540
email.

14
00:01:01.030 --> 00:01:03.790
I'm a big fan of this approach for several reasons.

15
00:01:04.080 --> 00:01:10.380
Reason number one is it's going to work even if our application moves from different hosting companies.

16
00:01:10.620 --> 00:01:16.440
And it's also going to seamlessly work whether we're testing on our local personal computer or if we're

17
00:01:16.440 --> 00:01:18.300
testing on our production server.

18
00:01:18.750 --> 00:01:23.730
In other words, there's no server configuration settings to experiment with and troubleshoot.

19
00:01:24.000 --> 00:01:27.290
This solution just works right out of the box.

20
00:01:27.810 --> 00:01:34.010
Also, I don't believe Hiroku allows you to send email directly from their servers anyways.

21
00:01:34.440 --> 00:01:41.580
So in my opinion, the simplest way to begin sending email from our node application is to use a service

22
00:01:41.580 --> 00:01:43.530
named Send Grid.

23
00:01:44.130 --> 00:01:47.880
I am not affiliated with Sen Grid in any way, shape or form.

24
00:01:48.210 --> 00:01:49.740
I just think it's a great service.

25
00:01:50.040 --> 00:01:55.420
And I should say that they have a free plan where you don't even need to enter a credit card or anything.

26
00:01:56.100 --> 00:02:02.340
So for example, if I click on pricing up here and then scroll down a bit, we can see the free plan

27
00:02:02.340 --> 00:02:10.110
lets you send 40000 emails for the first month, and then after that you can still send a hundred emails

28
00:02:10.110 --> 00:02:12.320
each day, free forever.

29
00:02:12.900 --> 00:02:17.870
Now, for testing and educational purposes, 100 emails a day is perfect.

30
00:02:18.360 --> 00:02:23.970
Now, if you do need to start sending more than 100 emails per day and you're not a big fan of SEN grids

31
00:02:23.970 --> 00:02:25.760
pricing, that's OK.

32
00:02:25.770 --> 00:02:31.680
I would still you send Grid just as a testing and educational platform for getting your email ready

33
00:02:32.160 --> 00:02:38.460
just because it's so easy to integrate within a node environment so you can use it to set up your different

34
00:02:38.460 --> 00:02:43.080
emails for different events and get your different HTML email templates ready.

35
00:02:43.500 --> 00:02:47.610
And then when it comes time that you would actually need to send more than one hundred emails per day,

36
00:02:47.910 --> 00:02:51.960
you can shop around on the market and find a different email solution if you want to.

37
00:02:52.770 --> 00:02:57.510
Either way, I recommend signing up for a completely free centigrade account right now.

38
00:02:58.140 --> 00:03:00.660
So in the top right corner, we see start for free.

39
00:03:00.690 --> 00:03:01.890
Lets go ahead and click that.

40
00:03:04.630 --> 00:03:10.210
OK, yes, I'm interested in this price, zero dollars per month, no credit card required, so just

41
00:03:10.210 --> 00:03:14.290
go ahead and enter your username, password and email and then submit this form.

42
00:03:14.950 --> 00:03:18.030
OK, this next screen is asking for a bit of information.

43
00:03:18.520 --> 00:03:20.680
It's up to you how you fill this information out.

44
00:03:21.250 --> 00:03:24.730
But once you've entered something into the required fields, go ahead and click.

45
00:03:24.730 --> 00:03:25.540
Get started.

46
00:03:28.520 --> 00:03:34.550
OK, once you're taken to your dashboard or the welcome screen, then we want to look for the settings

47
00:03:34.550 --> 00:03:35.090
screen.

48
00:03:35.750 --> 00:03:41.150
So as of today in the left hand side bar towards the bottom of it, we see settings.

49
00:03:41.870 --> 00:03:44.150
Go ahead and click on that to expand the menu.

50
00:03:44.330 --> 00:03:48.260
And then we're looking for API keys, right.

51
00:03:48.260 --> 00:03:53.450
Because we want to send an email programmatically through our node server.

52
00:03:53.840 --> 00:03:59.070
And as we've learned, an API is how two applications can communicate with each other.

53
00:03:59.540 --> 00:04:03.280
So go ahead and click on to API keys, OK?

54
00:04:03.380 --> 00:04:07.260
And then from this screen, there should be a create API key button somewhere.

55
00:04:07.520 --> 00:04:11.090
Go ahead and click on that for the first field.

56
00:04:11.090 --> 00:04:12.250
We just give it a name.

57
00:04:12.710 --> 00:04:15.650
You could choose any name you want, but I'm going to name mine.

58
00:04:16.670 --> 00:04:21.170
Complex app, email key.

59
00:04:22.280 --> 00:04:29.090
I will let this API give have full access and then towards the bottom we see create and view.

60
00:04:29.090 --> 00:04:30.110
Go ahead and click that.

61
00:04:32.310 --> 00:04:36.890
OK, now I've blurred out the screen down here so you can't steal my API key.

62
00:04:37.280 --> 00:04:43.280
I would also encourage you to be protective over your key inreality, since this is not tied to an account

63
00:04:43.280 --> 00:04:49.040
with our credit card on file, it's not the end of the world if your key was leaked, but you get the

64
00:04:49.040 --> 00:04:53.180
idea in general, you want to be very secretive with your API keys.

65
00:04:53.720 --> 00:04:59.780
So the string of characters that you see down here is what's going to give our node application permission

66
00:05:00.050 --> 00:05:04.070
to send emails on behalf of our send great account.

67
00:05:04.640 --> 00:05:10.310
So right now, go ahead and select and copy that string of characters into your clipboard.

68
00:05:10.940 --> 00:05:15.920
OK, now let me show you how we can leverage this key back in your text editor.

69
00:05:16.190 --> 00:05:19.520
I want you to jump into your DOT EMV file.

70
00:05:21.200 --> 00:05:28.250
Let's just add a new line and we could make up any name we want, but let's call it send grid.

71
00:05:28.250 --> 00:05:29.840
And this is all capital letters.

72
00:05:30.050 --> 00:05:35.600
Send Grid API key and then an equal sign.

73
00:05:35.600 --> 00:05:37.880
And then I want you to paste in your clipboard.

74
00:05:38.720 --> 00:05:41.870
Go ahead and save this file and then we can close out of it.

75
00:05:43.160 --> 00:05:46.460
OK, now let's give ourselves a goal just for fun.

76
00:05:46.460 --> 00:05:52.910
Let's imagine that any time a user creates a new post through our Web application, we want to send

77
00:05:52.910 --> 00:05:55.280
a random test email to ourselves.

78
00:05:55.760 --> 00:06:01.400
So not even to the author of the post, just to us, the owner of the site, just as an educational

79
00:06:01.400 --> 00:06:02.180
experience.

80
00:06:02.810 --> 00:06:08.750
So to begin working with that event of a new post being created, I would jump into our controller,

81
00:06:09.080 --> 00:06:10.850
our post controller, to be specific.

82
00:06:10.850 --> 00:06:18.500
So within the project folder, looking your controllers folder and then jump into post controller JS.

83
00:06:19.610 --> 00:06:25.700
OK, up towards the top of this file, I would just require in the official send grid package.

84
00:06:26.060 --> 00:06:30.700
So let's go out to the JavaScript grocery store or NPM and pick that up.

85
00:06:31.430 --> 00:06:36.950
So in your command line, if your app is already running, just press control, see, and then type

86
00:06:36.950 --> 00:06:48.200
in this command with me, npm install and the name of the package is the at symbol and then send grid

87
00:06:48.680 --> 00:06:50.930
forward slash mail.

88
00:06:52.250 --> 00:06:53.540
Go ahead and press enter.

89
00:06:56.480 --> 00:07:01.570
OK, now that we have that package, I would tell the server to begin running again, so npm run watch.

90
00:07:02.540 --> 00:07:06.670
OK, now at the top of our post controller, I would just require that package in.

91
00:07:07.010 --> 00:07:17.690
So I would say consed send grid equals and then just require in and its name was at Simbel send grid

92
00:07:17.690 --> 00:07:19.010
slash mail.

93
00:07:19.980 --> 00:07:22.310
OK, now check this out right below this line.

94
00:07:22.490 --> 00:07:28.160
We're going to use our API key to make sure that we have permission to work with our send great account.

95
00:07:28.520 --> 00:07:38.990
So we just say send grid and then we look inside it and call a method named set API key just to avoid

96
00:07:38.990 --> 00:07:39.590
frustration.

97
00:07:39.590 --> 00:07:42.060
Notice that the P and I are lowercase.

98
00:07:42.590 --> 00:07:45.620
OK, within these parentheses we just provide our API key.

99
00:07:46.160 --> 00:07:54.860
So since we started in our E and V file, we would just say Process N.V. dot and then all uppercase

100
00:07:55.190 --> 00:07:58.670
send grid API key.

101
00:07:59.620 --> 00:08:05.030
OK, and now with this in place, sending an email could not be more intuitive.

102
00:08:05.510 --> 00:08:12.050
So if we want to send an email, when someone creates a post, just find your exports create function.

103
00:08:12.620 --> 00:08:14.660
So that's going to leverage our post model.

104
00:08:15.050 --> 00:08:19.820
And if a new post is successfully created, then our then function will run.

105
00:08:20.510 --> 00:08:26.060
So maybe right above when we see requests dot flash with the success, just add a new line right above

106
00:08:26.060 --> 00:08:33.710
that and let's say send grid and then look inside it for a method named send.

107
00:08:34.310 --> 00:08:37.100
Within these parentheses we just give it an object.

108
00:08:37.100 --> 00:08:41.810
So curly brackets and now we just spell out a few properties.

109
00:08:42.500 --> 00:08:44.960
So feel free to drop down within the curly brackets.

110
00:08:45.620 --> 00:08:52.430
Let's set up a property of two so two colon and then quotes and then go ahead and type in your email

111
00:08:52.430 --> 00:08:53.090
address.

112
00:08:53.120 --> 00:08:53.390
Right.

113
00:08:53.390 --> 00:08:56.210
So you can test to see if this actually works.

114
00:08:56.810 --> 00:09:03.680
OK then a comma, let's have another property named from so from Colon and I'm just going to say test

115
00:09:03.680 --> 00:09:06.640
that test dot com comma.

116
00:09:06.770 --> 00:09:11.000
Let's have another property of subject colon.

117
00:09:11.330 --> 00:09:18.610
So quotes and then I would say congrats on creating a new post comma.

118
00:09:18.650 --> 00:09:24.230
Let's have another property named text quotes and this is the plain text.

119
00:09:24.410 --> 00:09:30.590
So if someone's email program doesn't support each HTML or rich content emails, this is what they would

120
00:09:30.590 --> 00:09:30.910
see.

121
00:09:31.520 --> 00:09:40.750
So I just say you did a great job of creating a post comma and let's have one more property named each

122
00:09:40.820 --> 00:09:41.570
HTML.

123
00:09:41.810 --> 00:09:44.720
So HTML Colon and then quotes.

124
00:09:45.080 --> 00:09:47.080
And this is similar to text, right.

125
00:09:47.090 --> 00:09:53.450
This is going to be the body content of the email, but now we are free to use HTML in case the user's

126
00:09:53.450 --> 00:09:55.190
email application supports that.

127
00:09:55.190 --> 00:10:01.790
So we could say you did a and then maybe we want the word great to be bold so we could have a strong

128
00:10:01.790 --> 00:10:09.920
tag inside the strong tag, include the word great and then say you did a great job of creating a post.

129
00:10:10.820 --> 00:10:14.960
You get the idea, let's go ahead and save this and test it out.

130
00:10:15.350 --> 00:10:19.520
So back in the Web application, go ahead and create a new post.

131
00:10:20.030 --> 00:10:24.980
Quick test sample content goes here.

132
00:10:25.550 --> 00:10:26.570
Go ahead and submit.

133
00:10:29.870 --> 00:10:35.630
And I'm not going to show you my email inbox, but I can let you know that the email did come through

134
00:10:35.630 --> 00:10:36.480
successfully.

135
00:10:36.980 --> 00:10:41.930
It did take a good minute or two to come through, but that's really out of our control.

136
00:10:42.290 --> 00:10:43.810
In plenty of other instances.

137
00:10:43.820 --> 00:10:46.760
I've seen a single email come through within a second or two.

138
00:10:47.330 --> 00:10:52.850
If after a good two or three minutes you still don't see the email, you might want to check your spam

139
00:10:52.850 --> 00:10:53.450
box.

140
00:10:54.050 --> 00:10:58.850
If you still don't see the email, then you might want to watch this video and make sure you didn't

141
00:10:58.850 --> 00:10:59.630
miss a step.

142
00:11:00.140 --> 00:11:05.970
OK, but moving on, I'm not going to set up real email events for everything in our application.

143
00:11:06.290 --> 00:11:09.320
I feel like that would be a waste of time and very repetitive.

144
00:11:09.890 --> 00:11:10.490
From here.

145
00:11:10.490 --> 00:11:16.940
You have everything you need to do, whatever you want to do with email so you can trigger this send

146
00:11:16.940 --> 00:11:23.570
grid, send method on any event in our application, you can work with our user model to return the

147
00:11:23.570 --> 00:11:25.640
user email at the appropriate time.

148
00:11:26.360 --> 00:11:32.690
So maybe if one user follows another user or you email the author when they create a post or when they

149
00:11:32.690 --> 00:11:34.490
delete one of their posts, anything.

150
00:11:34.820 --> 00:11:39.470
Also feel free to get creative with your HTML template that you send over.

151
00:11:39.860 --> 00:11:46.160
For example, instead of just quotes, this can be back ticks and then you could do truly dynamic things

152
00:11:46.160 --> 00:11:52.670
within your HTML template, like include the user's username or the username of who just followed them,

153
00:11:52.850 --> 00:11:54.260
so on and so forth.

154
00:11:54.920 --> 00:11:58.430
So feel free to take your email experience as far as you want to take it.

155
00:11:58.940 --> 00:12:04.540
But for the remainder of this lesson, I'm going to show you how I would push this setup up to Hiroku.

156
00:12:05.150 --> 00:12:10.550
So our first step would be to make sure that our Hiroku has the Sen grid API key.

157
00:12:11.030 --> 00:12:16.240
So right now in a new browser tab, go ahead and log in to your Heroku dashboard.

158
00:12:17.300 --> 00:12:26.900
In my case here I can see complex app, so I will click on that and then I will click on settings and

159
00:12:26.900 --> 00:12:34.610
I'm looking for config vars so I will click reveal config vars and I would just want to add a new key

160
00:12:34.610 --> 00:12:37.840
with that exact name of send.

161
00:12:38.180 --> 00:12:47.240
And again, this is all uppercase send grid API key and then for the value just jump back into your

162
00:12:47.570 --> 00:12:52.490
N.V. file and copy the key into your clipboard, OK.

163
00:12:52.490 --> 00:12:57.170
And then just paste it into the value field and then be sure to click add.

164
00:13:00.010 --> 00:13:06.420
OK, now, with that in place, all we need to do is push our latest files up to Hiroku, right?

165
00:13:06.580 --> 00:13:13.480
So that's the changes we just made to our post comptroller and also our package on file that lists the

166
00:13:13.480 --> 00:13:15.180
send grid package that we need.

167
00:13:16.450 --> 00:13:25.240
So I would just open up my command line if your apps running press control see, let's say get add dash

168
00:13:25.510 --> 00:13:34.330
uppercase A. That will stage all of your changed files, then I would say get commit lowercase M and

169
00:13:34.330 --> 00:13:45.100
for the commit message inside the quotes I would say added send grid support to our create post controller.

170
00:13:45.760 --> 00:13:46.930
Go ahead and press enter.

171
00:13:47.960 --> 00:13:50.920
OK, so I've committed those changes to my local repository.

172
00:13:51.140 --> 00:13:54.100
Now I just want to push that rebo up to Hiroku.

173
00:13:54.400 --> 00:13:58.690
So that's get push Hiroku Master.

174
00:14:00.530 --> 00:14:06.350
Once you've typed that in, go ahead and press enter and now Hiroku will take a minute or two, so be

175
00:14:06.350 --> 00:14:06.910
patient.

176
00:14:07.760 --> 00:14:13.760
I just edited out my waiting time, but once it completes, then back in your browser, go ahead and

177
00:14:13.760 --> 00:14:15.870
visit your application to test it out.

178
00:14:16.040 --> 00:14:18.800
So if you already have your app bookmarked, that's great.

179
00:14:18.800 --> 00:14:22.490
But you can also use the Open App Link here in Hiroku Dashboard.

180
00:14:23.960 --> 00:14:27.740
So now instead of localhost, I'm on my actual live application.

181
00:14:27.740 --> 00:14:31.060
Let me log in and I'm just going to test out that email function.

182
00:14:32.060 --> 00:14:35.450
So now that I'm logged in, I can test it up by just creating a new post.

183
00:14:37.310 --> 00:14:39.580
Heroku email test.

184
00:14:40.430 --> 00:14:42.160
Email is wonderful.

185
00:14:42.920 --> 00:14:47.050
Go ahead and submit that cool.

186
00:14:47.060 --> 00:14:51.440
And again, I'm not going to show you my inbox, but this time I only had to wait three or four seconds

187
00:14:51.440 --> 00:14:54.530
before I saw it pop up in my inbox.

188
00:14:55.220 --> 00:14:58.100
And that's going to bring this lesson to a close.

189
00:14:58.550 --> 00:15:03.280
In our next lesson, we're going to talk about next steps, right.

190
00:15:03.320 --> 00:15:04.460
Where do we go from here?

191
00:15:04.620 --> 00:15:08.520
What do I recommend learning next or focusing your energy on?

192
00:15:08.900 --> 00:15:14.230
I also want to include a few big picture career tips and just general words of advice.

193
00:15:14.810 --> 00:15:17.210
I'm so glad you came along on this journey with me.

194
00:15:17.420 --> 00:15:22.170
And in our next lesson, we're going to get a bit of perspective and see where we go from here.

195
00:15:22.640 --> 00:15:25.160
Let's keep things rolling and I'll see you then.
