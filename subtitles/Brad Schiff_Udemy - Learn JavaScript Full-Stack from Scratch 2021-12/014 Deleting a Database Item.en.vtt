WEBVTT
1
00:00:01.670 --> 00:00:02.610
Hello, everyone.

2
00:00:02.960 --> 00:00:10.310
In this lesson, we are going to learn how to delete an existing item or document from a MongoDB collection.

3
00:00:10.790 --> 00:00:13.580
Without further ado, let's jump right into the action.

4
00:00:13.940 --> 00:00:14.480
All right.

5
00:00:14.480 --> 00:00:21.140
So when someone clicks on one of our delete buttons, we want to program the web browser to send off

6
00:00:21.140 --> 00:00:27.800
a request to our node server with the particular I.D. of the document that should be deleted.

7
00:00:28.220 --> 00:00:32.840
So this is very similar to the functionality we set up for the edit buttons.

8
00:00:33.320 --> 00:00:34.310
So let's do this.

9
00:00:34.580 --> 00:00:40.400
Let's jump into our text editor and be sure that you are in the browser JS file.

10
00:00:41.000 --> 00:00:46.880
And remember, we set up this area where we said if the element that just got clicked on contains a

11
00:00:46.880 --> 00:00:54.080
class of edit me, well, we just want to do the same thing, but for a class of delete me.

12
00:00:54.440 --> 00:00:56.480
So let's do this just to stay organized.

13
00:00:56.720 --> 00:01:01.340
Maybe right above this if line, let's add a new line, and let's add a comment.

14
00:01:01.340 --> 00:01:05.220
So slash slash and let's say update feature.

15
00:01:05.780 --> 00:01:08.090
So the web browser will ignore this comment.

16
00:01:08.120 --> 00:01:10.340
This is just for our own organization.

17
00:01:10.820 --> 00:01:12.470
Can then right above that.

18
00:01:12.500 --> 00:01:16.610
Why don't we create another comment and say Delete feature?

19
00:01:17.030 --> 00:01:17.380
All right.

20
00:01:17.390 --> 00:01:20.720
And this is where we can write our new code for this lesson.

21
00:01:21.230 --> 00:01:26.210
All right now, to save some typing, we could even just copy and paste this line of code.

22
00:01:26.570 --> 00:01:30.680
So I'm just going to select this entire line of code that checks from the class list.

23
00:01:31.070 --> 00:01:31.820
Copy that.

24
00:01:32.450 --> 00:01:35.090
Up here on the delete feature, just paste in your clipboard.

25
00:01:35.630 --> 00:01:42.230
Now we only copied this open in curly brackets, so be sure to add manually here a closing curly bracket,

26
00:01:42.890 --> 00:01:44.720
but then feel free to drop down in between.

27
00:01:45.290 --> 00:01:50.690
OK, let's change this class that we're checking for from edit me to delete me.

28
00:01:51.050 --> 00:01:56.630
OK, so now what's the first thing that we actually want to do when someone clicks the delete button?

29
00:01:56.990 --> 00:02:01.010
I think we should start with a pop up that asks the user if they're really sure.

30
00:02:01.250 --> 00:02:03.860
Do you really want to delete this item permanently?

31
00:02:04.340 --> 00:02:07.940
So within this if statement, let's set up another if statement.

32
00:02:07.940 --> 00:02:14.180
So if parentheses curly brackets for this condition in these parentheses, we can use a web browser

33
00:02:14.180 --> 00:02:19.550
feature named to confirm confirm as a method, so be sure to call it with parentheses.

34
00:02:19.910 --> 00:02:26.810
Inside these parentheses, let's provide a string of text, and let's say, do you really want to delete

35
00:02:26.960 --> 00:02:29.900
this item permanently?

36
00:02:30.590 --> 00:02:32.330
You don't have to type this out, exactly.

37
00:02:32.330 --> 00:02:34.040
You can include your own message here.

38
00:02:34.310 --> 00:02:40.460
But the idea is that this will give the user a chance to click either yes or no or confirm or cancel.

39
00:02:40.880 --> 00:02:48.050
So now only if the user clicks the yes or affirmative button will our code in these curly brackets actually

40
00:02:48.050 --> 00:02:48.530
run.

41
00:02:48.860 --> 00:02:56.000
So this is where we want to use Axios to have the browser send off an asynchronous or on the fly request

42
00:02:56.000 --> 00:02:57.140
to our node server.

43
00:02:57.410 --> 00:03:03.890
Now, in order to save a ton of typing, we can just copy and paste or reuse this Axios chunk of code

44
00:03:03.890 --> 00:03:06.320
down here from our edit feature.

45
00:03:06.650 --> 00:03:12.860
So down in the update code that we wrote in the previous lesson I want you to copy and paste these five

46
00:03:12.860 --> 00:03:13.850
lines of code.

47
00:03:14.180 --> 00:03:20.750
So starting from the A in Axios, down five lines to the closing curly bracket in parentheses here,

48
00:03:21.200 --> 00:03:26.750
let's just copy those five lines of code into our clipboard and then up within our delete feature within

49
00:03:26.750 --> 00:03:29.960
this inner nested if statement, let's just paste in our clipboard.

50
00:03:31.350 --> 00:03:34.680
OK, now let's change some of this to make sense for our delete feature.

51
00:03:34.950 --> 00:03:42.570
So instead of sending a post request to this URL of update item, let's change it to a URL of delete

52
00:03:42.570 --> 00:03:43.050
item.

53
00:03:43.500 --> 00:03:47.850
In a minute or two, we can set up our node app to listen for this URL request.

54
00:03:48.450 --> 00:03:48.780
All right.

55
00:03:48.810 --> 00:03:52.890
Next, in terms of what data do we actually want to send to our server?

56
00:03:53.580 --> 00:03:56.130
Remember, this is a JavaScript object that we are sending.

57
00:03:56.430 --> 00:04:01.090
We no longer need to send in updated custom text that the user typed.

58
00:04:01.110 --> 00:04:05.370
So let's get rid of this first property of text and the comma right after it.

59
00:04:06.090 --> 00:04:12.900
So now we just need to send a property of I.D. and this code will grab the ID value of the button that

60
00:04:12.900 --> 00:04:13.860
was just clicked on.

61
00:04:14.280 --> 00:04:20.400
With this in mind, we do need to make sure that our HTML template includes the I.D. on the delete button,

62
00:04:20.550 --> 00:04:22.260
just like it did for the edit button.

63
00:04:22.650 --> 00:04:23.920
Let me show you what I mean.

64
00:04:23.940 --> 00:04:27.990
So right now, I want you to jump in to our server JS file.

65
00:04:28.350 --> 00:04:34.980
Scroll down until you see our HTML template and we're looking for the unordered list that contains the

66
00:04:34.980 --> 00:04:36.300
template for each item.

67
00:04:36.840 --> 00:04:38.010
So we see two buttons.

68
00:04:38.010 --> 00:04:39.600
The first is the edit button.

69
00:04:39.870 --> 00:04:44.790
And remember, we gave it this data ID attribute of the Document ID.

70
00:04:45.390 --> 00:04:49.050
So we just want to do the same thing for this delete button down here.

71
00:04:49.650 --> 00:04:53.160
So what I'm going to do is just copy and paste from this data ID.

72
00:04:53.670 --> 00:04:56.490
And so the closing quotes for that attribute and values.

73
00:04:56.550 --> 00:04:57.210
Copy that.

74
00:04:57.660 --> 00:05:00.000
And then just add it onto this second button.

75
00:05:00.090 --> 00:05:01.520
This is the delete buttons right here.

76
00:05:01.530 --> 00:05:04.210
Just paste in your clipboard and we're in business.

77
00:05:04.230 --> 00:05:09.000
Let's go ahead and save this file and jump back into our Browser Dogs file.

78
00:05:09.570 --> 00:05:14.590
OK, so we will now be successfully sending the correct I.D. to this URL.

79
00:05:14.790 --> 00:05:19.260
And now the only other thing we need to change in this chunk of code is this line of code.

80
00:05:19.710 --> 00:05:25.620
This is what's going to run once our server has had a chance to perform the database action and then

81
00:05:25.620 --> 00:05:27.960
send its response back to the web browser.

82
00:05:28.260 --> 00:05:34.650
Now for our update feature, remember, this is where we selected this little bit of text for the current

83
00:05:34.650 --> 00:05:40.330
item and then manipulated or updated it in this case with our delete feature in mind.

84
00:05:40.350 --> 00:05:46.920
We would just want to select the entire row or the entire list item and delete it completely.

85
00:05:47.370 --> 00:05:48.390
Let me show you what I mean.

86
00:05:49.290 --> 00:05:54.660
So currently, this line of code starts with at Target that's going to select the button that was clicked

87
00:05:54.660 --> 00:05:57.750
on, and then we are looking for its parent element.

88
00:05:58.140 --> 00:06:01.520
And then we are looking for the parent element of that right now.

89
00:06:01.530 --> 00:06:05.430
I'm going to jump into our HTML template just so this code makes sense.

90
00:06:06.490 --> 00:06:11.530
So here is our delete button that's going to get clicked on its parent element or that element that

91
00:06:11.530 --> 00:06:13.900
it lives within is this div element.

92
00:06:14.320 --> 00:06:20.290
And then the parent of this div element is the overall list item that makes up the entire row for this

93
00:06:20.290 --> 00:06:20.770
item.

94
00:06:21.340 --> 00:06:27.430
So with our update feature, we were looking within that list item and then we were using query selector

95
00:06:27.610 --> 00:06:32.380
to find the element that had a class of item dash text, right?

96
00:06:32.380 --> 00:06:35.230
So we were looking inside this element to find this element.

97
00:06:35.230 --> 00:06:36.640
There's that matching class.

98
00:06:37.000 --> 00:06:43.030
And then this is where we were just manipulating its inner HTML to have the user's new typed in input

99
00:06:43.630 --> 00:06:45.580
this time around with the delete feature.

100
00:06:45.790 --> 00:06:47.710
We don't need to look for this element.

101
00:06:48.130 --> 00:06:51.580
So let's get rid of this dark query selector on this line.

102
00:06:52.000 --> 00:06:56.290
So after the second parent element, I'm just going to delete the entire rest of that line.

103
00:06:57.340 --> 00:07:02.050
So now we just have this exact target parent element dot parent element.

104
00:07:02.050 --> 00:07:03.220
And now watch this.

105
00:07:03.490 --> 00:07:08.620
Once you've selected that list item, we can just say Dot Remove, and that's a method.

106
00:07:08.620 --> 00:07:10.240
So include parentheses to call it.

107
00:07:10.900 --> 00:07:11.500
And that's it.

108
00:07:12.130 --> 00:07:18.790
Now let's go ahead and save this file, and now we're only remaining step is to tell our node app or

109
00:07:18.790 --> 00:07:25.120
express server what to do if it receives a post request to this delete item URL.

110
00:07:25.510 --> 00:07:31.840
So right now, I want you to jump into Server Dot J.S. and go ahead and scroll down to the very bottom.

111
00:07:32.410 --> 00:07:35.380
Let's add a new line down here at the very, very bottom.

112
00:07:35.740 --> 00:07:39.510
And let's say at dot post, right?

113
00:07:39.550 --> 00:07:47.200
If we receive an incoming post request two and then let's say for the URL of slash delete item.

114
00:07:47.830 --> 00:07:52.950
For the second argument, we include a function of what we want to do if we do receive this request.

115
00:07:52.960 --> 00:07:56.050
So anonymous function function, parentheses.

116
00:07:56.050 --> 00:07:57.010
Curly brackets.

117
00:07:58.100 --> 00:08:04.100
But then these parentheses be sure to include RFQ and R.C.S within the body of our function.

118
00:08:04.580 --> 00:08:07.910
We want to work with our database DB Dot.

119
00:08:07.910 --> 00:08:11.660
We want to select our collection that is named items.

120
00:08:12.470 --> 00:08:17.780
And now this is where we perform a crud operation on this collection of documents.

121
00:08:18.110 --> 00:08:24.740
So in the past, we used methods like insert one to create a document or find one and update.

122
00:08:25.100 --> 00:08:32.000
In this case, we're interested in the aptly named method of delete one, right?

123
00:08:32.030 --> 00:08:34.850
We want to delete one document from this collection.

124
00:08:35.210 --> 00:08:38.620
Now, inside these parentheses, we want to give this method to arguments.

125
00:08:38.630 --> 00:08:41.690
So a column will be for the first argument.

126
00:08:41.690 --> 00:08:44.540
We want to select the document that we want to delete.

127
00:08:44.900 --> 00:08:47.840
Let's actually circle back to that argument in a minute from now.

128
00:08:48.110 --> 00:08:50.030
For now, let's set up this second argument.

129
00:08:50.040 --> 00:08:55.850
So instead of this be placeholder, this is where we include a function that will run once this method

130
00:08:55.850 --> 00:08:58.310
or database action has had a chance to complete.

131
00:08:58.910 --> 00:09:02.660
So let's say function, parentheses, curly brackets.

132
00:09:03.200 --> 00:09:10.670
Once our action completes, let's just send back a response to the browser's response dot send and let's

133
00:09:10.770 --> 00:09:12.500
send back the word success.

134
00:09:12.920 --> 00:09:15.470
All right, now, let's circle back to this a placeholder.

135
00:09:15.920 --> 00:09:21.890
This is where we told MongoDB which document we want to delete now in order to save a bit of typing,

136
00:09:21.890 --> 00:09:25.220
we can just recycle this code from our update feature.

137
00:09:25.700 --> 00:09:32.510
Remember when we called the Find one and Update method, its first argument is also to select the correct

138
00:09:32.510 --> 00:09:33.200
document.

139
00:09:33.710 --> 00:09:34.760
So do this with me.

140
00:09:34.940 --> 00:09:40.200
Select from this opening curly bracket within the Find one and update method.

141
00:09:40.220 --> 00:09:42.050
Let's just select this object.

142
00:09:43.200 --> 00:09:48.990
So from the first opening curly bracket until the first closing curly bracket copy that.

143
00:09:49.970 --> 00:09:55.340
Then down in our delete feature, so that a placeholder down here, just paste in your clipboard.

144
00:09:56.150 --> 00:09:56.480
All right.

145
00:09:56.480 --> 00:09:58.580
At this point, go ahead and save this file.

146
00:09:58.940 --> 00:10:02.240
Also, make sure that your browser dogs file has been saved.

147
00:10:02.570 --> 00:10:04.670
And let's go test this out in the browser.

148
00:10:05.090 --> 00:10:06.340
Be sure to refresh.

149
00:10:06.350 --> 00:10:12.470
So the web browser has the newest front in JavaScript code, and I will try to delete this first item

150
00:10:12.470 --> 00:10:14.270
of buy two bags of grapes today.

151
00:10:14.420 --> 00:10:17.120
So if I click on Delete, this pop up appears.

152
00:10:17.120 --> 00:10:19.640
Do you really want to delete this item permanently?

153
00:10:19.850 --> 00:10:26.300
I will click OK, OK, we see that it disappeared from the front end, but that doesn't necessarily

154
00:10:26.300 --> 00:10:29.000
mean that it was successfully deleted in our database.

155
00:10:29.420 --> 00:10:35.780
So to be 100 percent sure that it actually worked, let's go into our MongoDB Atlas account and within

156
00:10:35.780 --> 00:10:41.270
our To-Do App Items collection, you can see here is that item by two bags of grapes today.

157
00:10:41.810 --> 00:10:47.690
But if I go ahead and click, find or reset here to refresh the latest data, awesome.

158
00:10:47.690 --> 00:10:50.360
We can see there's only four documents instead of five.

159
00:10:50.630 --> 00:10:53.210
And that item or document is now gone.

160
00:10:53.900 --> 00:10:58.350
This means that technically our application is complete, right?

161
00:10:58.370 --> 00:11:02.390
We've set up all four of the major crud actions.

162
00:11:02.750 --> 00:11:04.550
The C in crud is create.

163
00:11:04.550 --> 00:11:06.320
We've set that up with this form.

164
00:11:06.920 --> 00:11:08.960
The orange crud is for read.

165
00:11:08.960 --> 00:11:13.720
That's what happens when you reload or view the page right, it reads in the existing documents.

166
00:11:14.120 --> 00:11:19.370
The use stands for Update, which is our edit feature, and the D stands for Delete, which is what

167
00:11:19.370 --> 00:11:20.060
we just set up.

168
00:11:20.510 --> 00:11:28.580
However, since we set up our update and delete features to use on the fly or asynchronous requests.

169
00:11:28.970 --> 00:11:36.620
We might as well go back and improve our create feature to also use that same technology because currently,

170
00:11:36.620 --> 00:11:44.090
if we type something into this field by carrots and then if I submit the form, it's actually going

171
00:11:44.090 --> 00:11:51.470
to send a traditional form submit request, meaning the browser has to perform a hard or full page reload

172
00:11:51.470 --> 00:11:56.090
or refresh and then rewrite render the entire web page from scratch again.

173
00:11:56.420 --> 00:12:01.670
Now there's nothing inherently wrong with that, and in many applications or situations, you would

174
00:12:01.670 --> 00:12:03.400
want a traditional form submit.

175
00:12:03.830 --> 00:12:09.950
But within the context of this application, I think it makes sense for the create feature to be as

176
00:12:09.950 --> 00:12:13.100
seamless and instantaneous as possible.

177
00:12:13.550 --> 00:12:20.030
So when the user tries to submit their input here, instead of relying on our node app to redirect us

178
00:12:20.030 --> 00:12:27.680
to this same URL and then re render the entire page just to see their new item, let's instead use Axios

179
00:12:27.680 --> 00:12:33.410
to send off an asynchronous or on the fly request with whatever value they typed in.

180
00:12:33.680 --> 00:12:41.120
And then we can use front end JavaScript to simply add on one new list item at the bottom of this list.

181
00:12:41.540 --> 00:12:43.820
This way, the user experience is seamless.

182
00:12:44.060 --> 00:12:49.250
The entire page does not get re rendered and the interface is just updated on the fly.

183
00:12:49.700 --> 00:12:52.460
This is exactly what we're going to set up in our next lesson.

184
00:12:52.670 --> 00:12:55.310
So let's keep things rolling, and I'll see you then.
