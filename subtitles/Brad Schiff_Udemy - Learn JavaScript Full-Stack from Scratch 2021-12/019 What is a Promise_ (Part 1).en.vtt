WEBVTT
1
00:00:01.790 --> 00:00:02.780
Hello, everyone.

2
00:00:03.140 --> 00:00:07.820
In this lesson, we are going to answer the question, what is a promise?

3
00:00:08.300 --> 00:00:15.740
So in our previous lesson, I said that we would learn about a more modern and elegant way of handling

4
00:00:15.740 --> 00:00:19.910
this unknown timing situation of our log-in function.

5
00:00:20.300 --> 00:00:20.600
Right.

6
00:00:20.600 --> 00:00:26.330
We don't want to send back our response to the browser until our login function has had a chance to

7
00:00:26.330 --> 00:00:29.870
complete and we don't know how long it's going to take to complete.

8
00:00:30.350 --> 00:00:36.530
So we set up this traditional callback approach to handle this situation and it works perfectly.

9
00:00:36.860 --> 00:00:42.970
And throughout the majority of JavaScript history, this is how you would handle a situation like this.

10
00:00:43.370 --> 00:00:52.580
However, recently JavaScript added something called Promises to the Language, and promises were specifically

11
00:00:52.850 --> 00:00:58.020
designed from the ground up for this exact unknown timing situation.

12
00:00:58.430 --> 00:01:06.500
So in this lesson, our goal is to convert this traditional callback approach to instead use a promise.

13
00:01:06.980 --> 00:01:08.330
Now, just a fair warning.

14
00:01:08.520 --> 00:01:15.440
At first you might not see the big difference or benefit between a promise and the traditional callback

15
00:01:15.440 --> 00:01:15.940
approach.

16
00:01:16.220 --> 00:01:17.180
That's OK.

17
00:01:17.210 --> 00:01:24.470
And to be expected, just know that towards the end of this lesson, we will walk through another example

18
00:01:24.680 --> 00:01:29.020
that will make the benefit of promises crystal clear.

19
00:01:29.510 --> 00:01:30.100
All right.

20
00:01:30.200 --> 00:01:32.720
Without further ado, let's get started.

21
00:01:33.230 --> 00:01:40.340
So right now, I want you to follow along with me and let's jump in to our uppercase user GFS model

22
00:01:40.340 --> 00:01:42.620
file within our user model.

23
00:01:42.620 --> 00:01:46.130
Let's scroll down until we find our login function.

24
00:01:46.670 --> 00:01:50.960
So it's the line that begins with user prototype dot login.

25
00:01:51.410 --> 00:01:56.420
Since we are no longer going to use the traditional callback approach, let's actually get rid of the

26
00:01:56.420 --> 00:01:58.880
word callback here within these parentheses.

27
00:02:00.110 --> 00:02:05.740
OK, and next, what I want us to do is empty out the body of this function.

28
00:02:06.170 --> 00:02:08.960
Now, we don't actually want to delete all of this code.

29
00:02:09.200 --> 00:02:13.040
Instead, I just want us to temporarily cut it into our clipboard.

30
00:02:13.520 --> 00:02:21.140
So select from the beginning of this clean up down to this closing curly bracket in parentheses, and

31
00:02:21.140 --> 00:02:23.270
then let's cut this into our clipboard.

32
00:02:24.140 --> 00:02:28.550
So at this point, login simply equals an empty, anonymous function.

33
00:02:29.120 --> 00:02:32.570
Now, within the body of this empty function, type this in with me.

34
00:02:32.930 --> 00:02:37.510
We want to return a new promise.

35
00:02:38.150 --> 00:02:42.100
Now, notice that promise here begins with an uppercase or capital letter.

36
00:02:42.710 --> 00:02:48.800
This is because it's a blueprint or a constructor that we can use to create new promises.

37
00:02:49.250 --> 00:02:54.470
So the JavaScript language itself has this blueprint that we can leverage.

38
00:02:54.800 --> 00:03:00.950
So now when we call this log in function from within our user controller, this function is going to

39
00:03:00.950 --> 00:03:03.740
return a new object.

40
00:03:03.740 --> 00:03:05.150
That is a promise.

41
00:03:05.540 --> 00:03:11.360
Now, when you create a promise like this within these parentheses, we want to pass it a function.

42
00:03:11.900 --> 00:03:17.900
So inside our promise parentheses, let's include an anonymous function, function, parentheses, curly

43
00:03:17.900 --> 00:03:18.620
brackets.

44
00:03:19.280 --> 00:03:24.770
I realize I still have not explained what in the world the promise really is, but trust me, we're

45
00:03:24.770 --> 00:03:25.550
almost there.

46
00:03:25.850 --> 00:03:31.550
So within the parentheses for this function that we're passing into promise, we need to give it to

47
00:03:31.550 --> 00:03:32.450
parameters.

48
00:03:32.870 --> 00:03:37.910
Technically, you can name these whatever you want, but the industry standard or common convention

49
00:03:37.910 --> 00:03:42.320
names are resolve and reject.

50
00:03:42.920 --> 00:03:47.060
Now, these two words, let us begin to see what a promise is.

51
00:03:47.450 --> 00:03:54.770
So now within the body of this function, we can perform asynchronous operations or operations that

52
00:03:54.770 --> 00:03:56.960
are going to take some time to complete.

53
00:03:57.320 --> 00:04:03.400
And then whenever those actions are complete, we just call resolve or reject.

54
00:04:04.010 --> 00:04:10.580
That's how we let JavaScript know that this promise has either completed in the case of resolve or had

55
00:04:10.580 --> 00:04:13.790
a chance to fail in the case of reject.

56
00:04:14.330 --> 00:04:15.440
Let me show you what I mean.

57
00:04:15.440 --> 00:04:21.170
So within the body of this function that we are passing into promise, I want you to paste in your clipboard.

58
00:04:23.240 --> 00:04:30.680
OK, now remember our database action of finding one document in the user's collection that's going

59
00:04:30.680 --> 00:04:36.020
to take some time, it might take five milliseconds or it could take five thousand milliseconds.

60
00:04:36.710 --> 00:04:42.930
The idea is that when it does have a chance to complete, then we were calling our callback function.

61
00:04:43.400 --> 00:04:47.720
Well, now that we're using a promise instead of a callback, check this out.

62
00:04:48.110 --> 00:04:55.400
Within this success area, instead of calling callback, we can just change callback to resolve and

63
00:04:55.400 --> 00:04:58.850
then within this else bracket in case things failed.

64
00:04:58.880 --> 00:04:59.180
Right.

65
00:04:59.180 --> 00:05:02.330
In case it was an invalid username or password.

66
00:05:02.630 --> 00:05:07.240
Well, in that case, instead of calling callback, we can just call reject.

67
00:05:07.850 --> 00:05:08.330
All right.

68
00:05:08.330 --> 00:05:14.390
Now, we are very close from being able to use this promise from within our user controller file.

69
00:05:14.690 --> 00:05:21.230
Before we do that, we need to take care of one last detail that has nothing to do with promises but

70
00:05:21.230 --> 00:05:25.780
has everything to do with this keyword in JavaScript.

71
00:05:26.240 --> 00:05:30.740
So when we create a promise, we give it a function as an argument.

72
00:05:31.160 --> 00:05:37.370
But a traditional anonymous function like this is going to change this key word within it.

73
00:05:37.760 --> 00:05:43.670
To get around this, we can use an arrow function instead of a traditional function like this, right.

74
00:05:43.670 --> 00:05:47.410
Because an arrow function does not manipulate the this keyword.

75
00:05:47.780 --> 00:05:53.330
So right within the parentheses for our promise, let's get rid of this word function.

76
00:05:54.410 --> 00:06:00.470
And then right after the closing parentheses, after a reject, let's add in this equal sign greater

77
00:06:00.470 --> 00:06:03.050
than symbols squished together the arrow.

78
00:06:03.410 --> 00:06:04.590
And now we're good to go.

79
00:06:04.760 --> 00:06:06.760
Now the this keyword will not change.

80
00:06:06.770 --> 00:06:13.740
So these references to this outdated username and this outdated password will still make sense.

81
00:06:14.030 --> 00:06:21.470
OK, now that we've set up our first promise, let's go ahead and save this file and now go try to actually

82
00:06:21.650 --> 00:06:25.710
use or leverage this promise from within our controller.

83
00:06:26.360 --> 00:06:32.020
So let's jump into user controller DOT just now within our login function here.

84
00:06:32.330 --> 00:06:38.750
We still want to call user log in, but we no longer want to use this callback approach.

85
00:06:39.020 --> 00:06:43.930
So let's hollow or empty out the parentheses for user login.

86
00:06:44.630 --> 00:06:49.160
So I would just delete from the beginning of function here to this closing curly bracket.

87
00:06:49.620 --> 00:06:54.920
OK, so if you need to pause the video to catch up so that your login function looks like this, that's

88
00:06:54.920 --> 00:06:55.400
OK.

89
00:06:55.850 --> 00:07:02.090
The idea is we are creating this lowercase user object from the uppercase user blueprint and then we

90
00:07:02.090 --> 00:07:04.220
are calling its login method.

91
00:07:04.700 --> 00:07:09.340
Now we know that this login method is going to return a promise.

92
00:07:09.680 --> 00:07:15.470
So the big question is how do you use or leverage a promise once you've created one?

93
00:07:15.830 --> 00:07:25.850
Well, check this out after user log in after the closing parentheses, we want to say dot, then parentheses

94
00:07:25.850 --> 00:07:30.170
and then after that dot catch parentheses.

95
00:07:30.710 --> 00:07:35.420
Now, using a promise is as simple as saying what you want to do.

96
00:07:35.420 --> 00:07:41.780
If the promise was successful within the then parentheses and saying what you want to do within the

97
00:07:41.780 --> 00:07:44.660
catch parentheses if the promise failed.

98
00:07:45.260 --> 00:07:46.350
Let me show you what I mean.

99
00:07:46.370 --> 00:07:50.580
So within both then and catch, we just provide a function.

100
00:07:50.960 --> 00:07:56.240
So within the then parentheses, let's say function, parentheses, curly brackets.

101
00:07:56.990 --> 00:08:03.140
And if our promise was successful, meaning our promise called resolve instead of reject.

102
00:08:03.440 --> 00:08:07.490
Well, in that case we would just want to say response dot send.

103
00:08:07.790 --> 00:08:08.040
Right.

104
00:08:08.070 --> 00:08:13.880
We want to send a response back to the Web browser and then we can receive whatever value the promise

105
00:08:13.880 --> 00:08:18.020
resolved with by including a parameter within these parentheses.

106
00:08:18.440 --> 00:08:24.050
You could call it whatever you want, you could call it X or Unicorn or pizza, but let's just call

107
00:08:24.050 --> 00:08:25.080
it result.

108
00:08:25.550 --> 00:08:28.490
OK, and then that's what we would want to send back to the user.

109
00:08:28.490 --> 00:08:31.220
So response that send result.

110
00:08:31.920 --> 00:08:39.070
OK, but what if things go wrong or in other words, what if the promise calls reject instead of resolve.

111
00:08:39.410 --> 00:08:47.210
Well, we just provide a function within each so function parentheses, curly brackets and then let's

112
00:08:47.210 --> 00:08:49.040
just send back response to the browser.

113
00:08:49.040 --> 00:08:54.800
So response dot send and we'd want to send the message that's getting passed in from reject.

114
00:08:55.070 --> 00:08:55.290
Right.

115
00:08:55.310 --> 00:09:01.130
It's going to say sorry, that password and username are invalid so we can receive that reject value

116
00:09:01.130 --> 00:09:03.560
by adding a parameter within these parentheses.

117
00:09:03.860 --> 00:09:08.750
You could name the parameter whatever you want, but it's an industry standard to usually call it either

118
00:09:09.080 --> 00:09:12.310
E for error or error or error.

119
00:09:12.770 --> 00:09:15.770
I'm just going to call it E and then that's what we would want.

120
00:09:15.770 --> 00:09:17.150
Our response to be a response.

121
00:09:17.150 --> 00:09:18.590
Dot send E.

122
00:09:19.170 --> 00:09:22.070
OK, now let's go ahead and save this file and.

123
00:09:22.160 --> 00:09:28.040
Test it out, so back in the browser, if I try to log in with bogus values.

124
00:09:30.480 --> 00:09:36.720
I see invalid username, password, but if I go back and login with my actual correct values.

125
00:09:38.300 --> 00:09:40.230
Awesome, we see congrats.

126
00:09:40.610 --> 00:09:47.000
So things are working, but at this point, I realize that you might be thinking, what's the big deal

127
00:09:47.030 --> 00:09:49.340
or why are promises so great?

128
00:09:49.700 --> 00:09:56.570
Because you might look at this code and think that it looks just as messy or even messier than the traditional

129
00:09:56.570 --> 00:09:58.310
callback approach we had before.

130
00:09:58.730 --> 00:10:01.000
That is a completely normal reaction.

131
00:10:01.340 --> 00:10:07.340
Don't worry, in a couple of minutes, we will walk through another example where we will see the benefits

132
00:10:07.340 --> 00:10:08.750
of using promises.

133
00:10:09.170 --> 00:10:14.390
But before we get to that, I want to jump back in to our user model file.

134
00:10:14.690 --> 00:10:21.410
And I want to be consistent, meaning since we're using promises, let's go ahead and adjust our database

135
00:10:21.410 --> 00:10:26.240
action to also use a promise instead of the traditional callback approach.

136
00:10:26.540 --> 00:10:26.810
Right.

137
00:10:26.810 --> 00:10:32.930
Because we are using our Mongo DB object here users collection and then we are calling the find one

138
00:10:32.930 --> 00:10:33.560
method.

139
00:10:33.830 --> 00:10:39.500
And after this first argument where we tell it what we want to find in the database, then we are providing

140
00:10:39.500 --> 00:10:42.590
a second argument that is just a callback function.

141
00:10:42.890 --> 00:10:43.210
Right.

142
00:10:43.220 --> 00:10:50.090
This Mongo DB method is going to call our callback function at the appropriate time, meaning we are

143
00:10:50.090 --> 00:10:53.700
still using the callback approach for this database action.

144
00:10:54.230 --> 00:11:01.340
Now, luckily, the Mongo DB package is very modern and up to date, meaning, yes, we can use its

145
00:11:01.340 --> 00:11:03.620
methods with a traditional callback approach.

146
00:11:03.950 --> 00:11:09.080
But this function of find one will also return a promise.

147
00:11:09.500 --> 00:11:14.600
I believe almost all of the Mongo DB methods actually return promises.

148
00:11:14.810 --> 00:11:15.620
And this is great.

149
00:11:15.650 --> 00:11:20.150
So check this out to convert this into using promises instead of a callback.

150
00:11:20.390 --> 00:11:24.980
Let's just cut and paste this if else block into our clipboard.

151
00:11:25.710 --> 00:11:31.640
So I'm going to begin selecting right before the word if and then select down to the closing curly bracket

152
00:11:31.640 --> 00:11:32.390
for else.

153
00:11:32.660 --> 00:11:36.140
So let's cut that into our clipboard, OK?

154
00:11:36.170 --> 00:11:42.440
And then within the find one parentheses, let's get rid of the second argument, which is this function

155
00:11:42.440 --> 00:11:42.740
here.

156
00:11:43.650 --> 00:11:51.000
So I would begin selecting right before this comma, so include the comma and then select down until

157
00:11:51.000 --> 00:11:57.580
this closing curly bracket, but stop right before this closing parentheses now.

158
00:11:57.600 --> 00:12:02.700
Be sure to just hit the delete or backspace key on your keyboard because we do not want to overwrite

159
00:12:02.700 --> 00:12:03.510
our clipboard.

160
00:12:03.780 --> 00:12:04.600
All right, perfect.

161
00:12:04.620 --> 00:12:06.360
So now we are calling the database.

162
00:12:06.360 --> 00:12:09.980
Find one method and we are giving it just this one argument.

163
00:12:10.500 --> 00:12:11.040
All right.

164
00:12:11.040 --> 00:12:15.800
Now, because I know that the Mongo DB method is going to return a promise.

165
00:12:16.230 --> 00:12:18.380
This means that at the end of this line.

166
00:12:18.630 --> 00:12:27.150
So after the closing parentheses here, we can just say dot then parentheses, dot, catch parentheses.

167
00:12:27.570 --> 00:12:30.580
OK, then let's just provide a function within each of these.

168
00:12:30.750 --> 00:12:34.370
So within the then parentheses, let's provide an arrow function.

169
00:12:34.860 --> 00:12:39.650
So pair of parentheses and then the arrow symbol and then curly brackets.

170
00:12:39.660 --> 00:12:42.240
Let's drop down in between the curly brackets.

171
00:12:42.690 --> 00:12:45.390
OK, and then this is where we can just paste in our clipboard.

172
00:12:47.110 --> 00:12:54.160
OK, now we want to be able to access the document that the database might find and before we were accessing

173
00:12:54.160 --> 00:12:55.880
it by saying attempted user.

174
00:12:56.260 --> 00:13:02.260
Now, if the database finds a document, it's going to pass that when it calls resolve.

175
00:13:02.680 --> 00:13:07.180
So we can receive that by including a parameter within our parentheses here.

176
00:13:07.540 --> 00:13:13.720
You could name it anything, but let's name it attempted user just so it matches our previous code.

177
00:13:14.260 --> 00:13:19.860
OK, so that takes care of the situation where the database operation completes successfully.

178
00:13:20.200 --> 00:13:24.130
But what if there's some sort of database error or unexpected error?

179
00:13:24.490 --> 00:13:26.200
Well, that's what the catch is for.

180
00:13:26.470 --> 00:13:31.270
So within the catch parentheses, let's provide a function, function, parentheses, curly brackets

181
00:13:31.540 --> 00:13:37.330
and let's just reject with a generic message of please try again later.

182
00:13:37.930 --> 00:13:43.120
So this is just sort of a generic error message implying that there's something wrong with the server

183
00:13:43.120 --> 00:13:46.150
or some unforeseen error that we didn't account for.

184
00:13:46.390 --> 00:13:46.690
Right.

185
00:13:46.690 --> 00:13:53.200
Meaning we're not sure why, but the Mongo DB method failed for one reason or another, meaning it has

186
00:13:53.200 --> 00:13:57.340
nothing to do with the user typing in an incorrect username or password.

187
00:13:57.640 --> 00:14:00.240
It's just an error on our side as a developer.

188
00:14:00.790 --> 00:14:03.960
Let's go ahead and save this and take it for a test drive.

189
00:14:04.570 --> 00:14:13.570
So back in the browser, if I tried to log in with bogus values, cool invalid username, password,

190
00:14:13.570 --> 00:14:18.220
but if I go back and actually use my correct values, awesome.

191
00:14:18.220 --> 00:14:18.580
We see.

192
00:14:18.580 --> 00:14:19.420
Congrats.

193
00:14:19.930 --> 00:14:22.030
OK, at this point, let's review things.

194
00:14:22.030 --> 00:14:26.560
So far we've learned how to create our own promise and then leverage it.

195
00:14:26.890 --> 00:14:33.700
And we learned how to leverage a pre-existing promise that the Mongo DB package provided or created.

196
00:14:33.940 --> 00:14:41.340
But it's still not clear why promises are useful or preferable over traditional callbacks.

197
00:14:41.620 --> 00:14:47.950
So right now, I want to jump in to a new example exercise that will make the advantages of promises

198
00:14:48.190 --> 00:14:49.290
crystal clear.

199
00:14:49.630 --> 00:14:55.510
So in the resources for this lesson, you'll find two links to code pen examples.

200
00:14:55.840 --> 00:15:00.640
Right now, I want you to pause the video and open up the first code and link.

201
00:15:01.000 --> 00:15:02.710
It should look something like this.

202
00:15:02.710 --> 00:15:09.430
And at the top of the JavaScript column, we see this comment that says use the functions that are named,

203
00:15:09.850 --> 00:15:17.170
eat breakfast, eat lunch, eat dinner and eat dessert to eat your meals in the traditional order.

204
00:15:17.470 --> 00:15:22.300
And then we see this comment that says, do not modify below this line until instructed to do so.

205
00:15:22.510 --> 00:15:27.940
And this is where I've created functions named eat breakfast, eat lunch, so on and so forth.

206
00:15:28.270 --> 00:15:30.820
So the idea here is on line number two.

207
00:15:31.090 --> 00:15:33.100
I want you to use those functions.

208
00:15:33.610 --> 00:15:37.930
So right here, let's call eat breakfast parentheses to call it.

209
00:15:38.650 --> 00:15:42.580
We see down in the preview area that adds you just ate breakfast.

210
00:15:42.640 --> 00:15:48.670
OK, right below that, let's call eat lunch and then right below that, let's call eat dinner and then

211
00:15:48.670 --> 00:15:50.760
right below that call, eat dessert.

212
00:15:51.610 --> 00:15:57.820
Now, notice in the preview area down here that these are not in the order that we would expect, even

213
00:15:57.820 --> 00:16:02.020
though we called them in the traditional order of breakfast, lunch, dinner, dessert.

214
00:16:02.020 --> 00:16:04.090
We see you just eat dessert.

215
00:16:04.090 --> 00:16:05.170
You just ate lunch.

216
00:16:05.170 --> 00:16:07.180
You just eat dinner, you just eat breakfast.

217
00:16:07.810 --> 00:16:15.130
This is because when I created or defined these functions, I included random amounts of delays before

218
00:16:15.130 --> 00:16:19.060
they actually complete or add that text to the Web page.

219
00:16:19.420 --> 00:16:25.180
So the breakfast function is going to wait eight hundred milliseconds before actually performing that

220
00:16:25.180 --> 00:16:25.720
action.

221
00:16:26.110 --> 00:16:28.750
Eat lunch is going to wait three hundred milliseconds.

222
00:16:28.750 --> 00:16:33.280
Dinner is going to wait six hundred and desserts only going to wait forty milliseconds.

223
00:16:33.670 --> 00:16:39.010
I did this to simulate the nature of asynchronous actions.

224
00:16:39.310 --> 00:16:39.640
Right.

225
00:16:39.640 --> 00:16:45.760
When we do something like talk to a database or send out a request to another server, we don't know

226
00:16:45.760 --> 00:16:48.190
how long those actions are going to take.

227
00:16:48.640 --> 00:16:50.380
Now, here's where things get interesting.

228
00:16:50.830 --> 00:16:53.770
Even though this order is unpredictable, right.

229
00:16:54.430 --> 00:16:59.410
Clearly, the functions did not complete in the same order that we called them, even though that's

230
00:16:59.410 --> 00:17:00.310
the case, if you.

231
00:17:00.310 --> 00:17:00.670
Right.

232
00:17:00.670 --> 00:17:03.550
Click anywhere in this open area and choose, inspect.

233
00:17:04.750 --> 00:17:11.590
And then if you click on to the console tab, you see that these messages are in the order that we would

234
00:17:11.590 --> 00:17:12.040
want.

235
00:17:12.040 --> 00:17:12.390
Right?

236
00:17:12.400 --> 00:17:14.620
Breakfast, lunch, dinner, dessert.

237
00:17:14.950 --> 00:17:16.210
So what's going on here?

238
00:17:16.600 --> 00:17:19.720
Well, let's take the breakfast function as an example.

239
00:17:20.110 --> 00:17:26.920
So in Code Penn, if we go to about line number nine, we see the function definition for eat breakfast

240
00:17:27.280 --> 00:17:30.790
and we see that it begins by logging this message to the console.

241
00:17:31.240 --> 00:17:33.880
The eat breakfast function just started executing.

242
00:17:34.270 --> 00:17:41.410
However, it doesn't actually add its message to the webpage of you just ate breakfast until this eight

243
00:17:41.410 --> 00:17:43.550
hundred millisecond delay completes.

244
00:17:44.020 --> 00:17:45.270
Now, remember these costs.

245
00:17:45.390 --> 00:17:51.900
Old out loud messages, those were executed in the order that we would expect breakfast, lunch, dinner,

246
00:17:51.900 --> 00:17:52.350
dessert.

247
00:17:52.950 --> 00:17:57.630
That's what we see in the console, however, and this is where the confusion comes into play.

248
00:17:57.940 --> 00:18:04.920
You might think in a perfect world that the eat lunch function would not run until the eat breakfast

249
00:18:04.920 --> 00:18:06.120
function has completed.

250
00:18:06.600 --> 00:18:11.390
Now, I suppose that's true in a sense, but ultimately it's not the case.

251
00:18:11.670 --> 00:18:17.880
What I mean by this is, yes, they eat breakfast function is going to begin running before JavaScript

252
00:18:17.880 --> 00:18:19.710
moves on to call eat lunch.

253
00:18:20.260 --> 00:18:23.090
That's why we see this line does appear first.

254
00:18:23.310 --> 00:18:26.330
The breakfast function just started executing in the console.

255
00:18:26.730 --> 00:18:32.850
However, then we have this asynchronous function or this function that's going to take time to complete.

256
00:18:33.150 --> 00:18:40.890
And JavaScript is not going to freeze the world and sit around waiting for this to take its eight hundred

257
00:18:40.890 --> 00:18:45.160
milliseconds before JavaScript moves on to the next operation.

258
00:18:45.690 --> 00:18:51.660
So, yes, at a basic level, JavaScript is going to run these function calls in the order that we would

259
00:18:51.660 --> 00:18:58.500
expect, but it's not going to sit around and wait for any asynchronous code within one of these functions

260
00:18:58.680 --> 00:19:00.790
to come back or complete or return.

261
00:19:01.230 --> 00:19:04.620
That's why the order down here is not what we might expect.

262
00:19:05.280 --> 00:19:13.320
So the question becomes, how can we coordinate these four events so that each one waits until the previous

263
00:19:13.320 --> 00:19:16.290
one has actually completed?

264
00:19:16.830 --> 00:19:23.280
Well, let's first use the traditional callback approach and then after that we can try promises instead.
