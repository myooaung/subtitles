1
00:00:01,950 --> 00:00:02,970
Hello, everyone.

2
00:00:03,270 --> 00:00:08,700
In this lesson, we are going to save a registered user into a database.

3
00:00:09,270 --> 00:00:11,340
Let's jump right into the action.

4
00:00:11,910 --> 00:00:19,020
So in our previous lesson within our User Dogs model file towards the bottom, we set up this register

5
00:00:19,020 --> 00:00:25,770
function and we know that this is what our user controller is going to call when someone submits the

6
00:00:25,890 --> 00:00:27,420
user registration form.

7
00:00:27,810 --> 00:00:34,530
Now we've already set up our validation checks and assuming that there are zero validation errors,

8
00:00:34,800 --> 00:00:35,030
right?

9
00:00:35,040 --> 00:00:40,500
Assuming that we are happy with the username, email and password they chose, well, we are ready to

10
00:00:40,500 --> 00:00:43,500
now actually save that into a database.

11
00:00:43,950 --> 00:00:48,120
So our first step is to make sure that we have a database to save into.

12
00:00:48,390 --> 00:00:55,200
Technically, you could reuse the same database from our To-Do app, but I strongly encourage you to

13
00:00:55,200 --> 00:00:59,460
create a new database for each application that you create.

14
00:00:59,970 --> 00:01:04,800
So right now, I want you to jump into your MongoDB Atlas account.

15
00:01:05,250 --> 00:01:12,210
So in a new tab, you can just visit MongoDB dot com and then sign in and to create a new database for

16
00:01:12,210 --> 00:01:13,920
this new project we're working on.

17
00:01:14,220 --> 00:01:16,410
We can click on this collections button.

18
00:01:19,030 --> 00:01:23,020
From this collection screen, we see this create database button here.

19
00:01:23,050 --> 00:01:29,140
Let's go ahead and click on that for the database name, you can name it either our app or you can name

20
00:01:29,140 --> 00:01:29,270
it.

21
00:01:29,290 --> 00:01:32,160
Complex app the name doesn't matter.

22
00:01:32,170 --> 00:01:34,540
Just choose something that will make sense to you.

23
00:01:34,840 --> 00:01:36,910
And then for the collection name.

24
00:01:37,300 --> 00:01:41,830
Let's have our first collection be named users, right?

25
00:01:41,830 --> 00:01:46,720
Because the first feature we are working on is saving a user into the database.

26
00:01:47,410 --> 00:01:53,110
So within this user's collection, each document will represent one user.

27
00:01:53,410 --> 00:01:56,650
So collection name users, and then let's go ahead and click Create.

28
00:01:59,080 --> 00:02:03,580
All right now from this collection screen, you can see complex app is listed here.

29
00:02:04,000 --> 00:02:09,850
In my case, it did not select that new database by default, so you actually have to click on it and

30
00:02:09,850 --> 00:02:12,280
then I can click into the user's collection.

31
00:02:13,330 --> 00:02:17,620
OK, and here we can see that collection is completely empty with zero results.

32
00:02:18,040 --> 00:02:24,400
So our goal for this lesson is to connect our app to this new database so that when someone submits

33
00:02:24,400 --> 00:02:32,560
this user registration form with valid values, well, we would expect to see a new user document appear

34
00:02:32,740 --> 00:02:33,850
in this collection.

35
00:02:34,360 --> 00:02:36,400
So how can we make that happen?

36
00:02:36,970 --> 00:02:44,350
Well, our first instinct might be to go into our user model file and down here under step number to

37
00:02:44,620 --> 00:02:47,260
open a connection to that new database.

38
00:02:47,680 --> 00:02:53,650
However, if we think about the big picture and look ahead, we know that we are also going to have

39
00:02:53,650 --> 00:02:59,500
a post-Games model file to describe what a post or article should be.

40
00:02:59,980 --> 00:03:06,220
And we're also going to have a follow J.S. model file to describe what a follow should be.

41
00:03:06,790 --> 00:03:13,510
What I'm getting at is instead of connecting to the database in each of our model files, why don't

42
00:03:13,510 --> 00:03:20,710
we instead connect to the database once in a separate file whose entire job is just to connect to the

43
00:03:20,710 --> 00:03:21,460
database?

44
00:03:21,730 --> 00:03:26,860
And then we can leverage that one single file from within each of our models?

45
00:03:27,190 --> 00:03:28,400
Let me show you what I mean.

46
00:03:28,420 --> 00:03:35,260
So right now, within the root of our project folder, I want you to create a brand new file.

47
00:03:35,650 --> 00:03:36,850
So new file.

48
00:03:37,510 --> 00:03:39,520
And let's name this new file.

49
00:03:39,940 --> 00:03:47,020
D.B. Dot, J.S. we could name it anything, but let's go with this just so we're on the same page.

50
00:03:47,950 --> 00:03:54,160
All right now, within this new empty file, we want to open a connection to a MongoDB database.

51
00:03:54,550 --> 00:04:00,880
Now, in order to do that, we need to go out to npm and grab the official MongoDB package.

52
00:04:01,210 --> 00:04:03,430
So to do that, let's open up our command line.

53
00:04:03,790 --> 00:04:07,580
If your app is already running, be sure to press Control C to quit the app.

54
00:04:07,600 --> 00:04:12,530
So now we can run this command npm install.

55
00:04:13,000 --> 00:04:16,240
And the name of the package is Mongo DB.

56
00:04:17,190 --> 00:04:19,050
All lowercase, all one word.

57
00:04:19,290 --> 00:04:20,580
Go ahead and press enter.

58
00:04:21,720 --> 00:04:26,000
OK, now up within our new file, let's require in that package.

59
00:04:26,040 --> 00:04:27,450
So let's create a variable.

60
00:04:27,750 --> 00:04:32,970
And instead of spelling out a name, let's actually have curly brackets to restructure or pull something

61
00:04:32,970 --> 00:04:34,110
out of the package.

62
00:04:34,500 --> 00:04:39,900
So in these curly brackets, let's say Mongo client, now we are not making this name up.

63
00:04:40,170 --> 00:04:42,990
This is the name of a property from within the package.

64
00:04:43,200 --> 00:04:48,240
So after that will say equals require in the MongoDB package.

65
00:04:48,630 --> 00:04:55,170
The idea is that the overall package object contains all sorts of different things, but right now there's

66
00:04:55,170 --> 00:04:58,920
one property called Mongo Client with Capital M Capital C.

67
00:04:59,220 --> 00:05:01,330
That's really the only thing we're interested in.

68
00:05:01,710 --> 00:05:02,070
Cool.

69
00:05:02,280 --> 00:05:03,920
Now on a new line, we can use it.

70
00:05:03,930 --> 00:05:05,850
We can say Konst Client.

71
00:05:05,850 --> 00:05:07,440
So we are making up this name.

72
00:05:07,440 --> 00:05:08,520
This could have been anything.

73
00:05:08,520 --> 00:05:15,840
But Konst client equals a new instance of Mongo client for now.

74
00:05:15,840 --> 00:05:20,520
In these parentheses, let's just have an empty string of text, so empty quotes and we will circle

75
00:05:20,520 --> 00:05:23,130
back to what this value should be in just a minute.

76
00:05:23,460 --> 00:05:29,790
However, for now, below this line, we can leverage our lowercase client variable to create a connection

77
00:05:29,790 --> 00:05:31,410
to a MongoDB database.

78
00:05:31,800 --> 00:05:36,630
We don't know how long it will take to create that connection could be one millisecond could be five

79
00:05:36,630 --> 00:05:37,230
seconds.

80
00:05:37,560 --> 00:05:40,370
So let's use the async await syntax.

81
00:05:40,380 --> 00:05:47,760
So we'll create an asynchronous function, async function, you can name it anything start go unicorn

82
00:05:47,760 --> 00:05:48,330
pizza.

83
00:05:48,510 --> 00:05:51,090
So just create an async function, then right below it.

84
00:05:51,360 --> 00:05:52,920
Call it whatever renamed it.

85
00:05:53,550 --> 00:05:59,520
In the body of that function, let's use our client variable and look inside it for a connect method

86
00:05:59,520 --> 00:06:00,240
and call that.

87
00:06:00,720 --> 00:06:04,170
Now this is the line that we don't know how long it will take to create that connection.

88
00:06:04,170 --> 00:06:07,620
So at the start of this line, let's be sure to include a weight.

89
00:06:08,160 --> 00:06:10,830
So once this line of code finally finishes.

90
00:06:11,340 --> 00:06:16,140
Well, now below that we can say client dot and call a method of DB.

91
00:06:16,470 --> 00:06:22,260
This will return what we're truly interested in an object that represents a real database that we are

92
00:06:22,260 --> 00:06:23,160
connected to.

93
00:06:23,430 --> 00:06:29,070
Now, before we worry about actually leveraging whatever this DB method returns, let's first circle

94
00:06:29,070 --> 00:06:34,410
back to this empty string of text here on this line when we created a new instance of Mongo client.

95
00:06:34,410 --> 00:06:39,300
So in these empty quotes, this is where we want to provide a connection string.

96
00:06:39,720 --> 00:06:45,360
Now remember in a new tab in your browser, you can go into your MongoDB Atlas Cloud account to find

97
00:06:45,360 --> 00:06:46,440
your connection string.

98
00:06:46,710 --> 00:06:50,460
However, here's what I like to do to save yourself some time.

99
00:06:50,700 --> 00:06:52,770
Go ahead and open up your server.

100
00:06:53,010 --> 00:06:58,830
Just file from our previous to do app project when we set up our To-Do app.

101
00:06:58,860 --> 00:07:01,560
We already configured the connection stream.

102
00:07:01,920 --> 00:07:08,520
So if you dig into that old file of yours, it will already have the username, password and your MongoDB

103
00:07:08,520 --> 00:07:09,570
Atlas address.

104
00:07:09,990 --> 00:07:16,710
So go ahead and pause this video while you go and open up your old to do app server dogs file and then

105
00:07:16,710 --> 00:07:22,650
just go ahead and copy and paste your connection string value from that file into this file.

106
00:07:23,250 --> 00:07:26,010
So once you do that, it should look something like this.

107
00:07:26,580 --> 00:07:32,880
You will have a different username and password value, but scroll to the very right edge or end of

108
00:07:32,880 --> 00:07:39,330
this line of code at the end of your connection stream right before retry rights equals true.

109
00:07:39,600 --> 00:07:45,090
Right before that, we see a question mark and then the name of the database that you want to work with.

110
00:07:45,420 --> 00:07:51,090
In this case, let's get rid of this To-Do app, and let's replace that with the new database that you

111
00:07:51,090 --> 00:07:54,420
just created a couple of moments ago for this lesson.

112
00:07:54,810 --> 00:07:59,070
So in my case, I would get rid of To-Do app and replace it with complex app.

113
00:08:00,120 --> 00:08:00,530
Cool.

114
00:08:00,540 --> 00:08:04,530
So this connection string is now good to go at this point.

115
00:08:04,560 --> 00:08:08,970
Let's circle back to this DB method down here, Client DB.

116
00:08:09,450 --> 00:08:10,380
So let's do this.

117
00:08:10,620 --> 00:08:14,340
This is going to return the database object that we're interested in.

118
00:08:14,580 --> 00:08:17,670
So let's be sure to store or saved this somewhere.

119
00:08:18,000 --> 00:08:23,430
Actually, instead of saving it to a traditional variable, let's do this at the beginning of this line

120
00:08:23,430 --> 00:08:32,610
right before client, let's say module dot exports equals client DB.

121
00:08:33,060 --> 00:08:39,780
So this way, if we require this file from within another file, it's going to return the database that

122
00:08:39,780 --> 00:08:40,770
we can work with.

123
00:08:41,220 --> 00:08:44,250
Now, before we save this file, let's do one last thing.

124
00:08:44,670 --> 00:08:51,780
Let's set it up so that this DB D.J.s file is our opening or starting file meaning to start our node

125
00:08:51,780 --> 00:08:56,280
application instead of starting up our app digest file.

126
00:08:56,520 --> 00:09:03,180
We would want to start our DB D.J.s file, meaning we don't even want to launch or begin our application

127
00:09:03,420 --> 00:09:07,620
until we've had a chance to establish a connection to our database.

128
00:09:08,160 --> 00:09:13,200
Because remember, we don't know how long it's going to take to create a connection to the database.

129
00:09:13,500 --> 00:09:17,940
It could take five milliseconds or it could take 5000 milliseconds.

130
00:09:18,360 --> 00:09:20,670
But we do know that this line of code.

131
00:09:20,800 --> 00:09:23,980
Isn't going to run until we actually do have that connection.

132
00:09:24,610 --> 00:09:31,540
So right below this line within this function, this is where we would want to actually start our express

133
00:09:31,540 --> 00:09:34,000
app, right, because our database will be ready.

134
00:09:34,390 --> 00:09:36,750
So let me show you what we can do right now.

135
00:09:36,760 --> 00:09:40,480
I want you to open up our app JS file.

136
00:09:41,690 --> 00:09:45,440
Within App Dogs, scroll down to the very bottom.

137
00:09:46,400 --> 00:09:51,440
The file ends with App Dot, listen, and then we're listening on Port three thousand.

138
00:09:51,920 --> 00:09:53,600
Let's get rid of that line.

139
00:09:53,750 --> 00:09:55,010
Delete it entirely.

140
00:09:55,310 --> 00:10:01,490
And instead, let's just say module dot exports equals app.

141
00:10:02,150 --> 00:10:07,340
So in this way, we are still creating an express application under this variable app.

142
00:10:07,640 --> 00:10:13,040
But instead of telling it to actually start listening, we're just exporting it from this file.

143
00:10:13,430 --> 00:10:16,000
So let's go ahead and save App Dot J.S..

144
00:10:16,400 --> 00:10:22,700
And then back within DB Dot J.S. right below module dot exports equals client DB.

145
00:10:22,700 --> 00:10:29,630
Let's say this let's create a variable named app, so Konst app equals and then let's require in our

146
00:10:29,630 --> 00:10:30,950
main app file.

147
00:10:31,250 --> 00:10:37,790
So require quotes and then dot slash to look within the current directory and its name is app.

148
00:10:38,210 --> 00:10:41,270
OK, so that requires in the express application.

149
00:10:41,540 --> 00:10:46,250
And then right below that line, we can just tell it to actually start listening, right listening for

150
00:10:46,250 --> 00:10:52,070
incoming requests so we can just say App Dot listen on Port three thousand.

151
00:10:52,580 --> 00:10:55,430
If this is not making perfect sense yet, that's OK.

152
00:10:55,640 --> 00:10:57,680
We're going to review it again in just a minute.

153
00:10:58,070 --> 00:11:00,920
For now, let's go ahead and save this file.

154
00:11:01,640 --> 00:11:03,380
And now we just have one last step.

155
00:11:04,010 --> 00:11:07,820
I want you to jump in to our package doc JSON file.

156
00:11:08,660 --> 00:11:16,390
Remember, when we want to run our server, we type in the command npm run watch well within this package.

157
00:11:16,580 --> 00:11:21,500
JSON file is where we defined what that watch command should do.

158
00:11:21,830 --> 00:11:28,640
Basically, we were telling it to monitor our app JS file and restart it any time we saved a change.

159
00:11:28,940 --> 00:11:36,140
Well, let's just change this from App Dot J.S. to DB Dogs only we don't need to actually include the

160
00:11:36,160 --> 00:11:37,060
Dodgers.

161
00:11:37,520 --> 00:11:44,360
So now when we run npm run watch, it's going to monitor and restart the DB file for us.

162
00:11:44,750 --> 00:11:47,870
So let's go ahead and save that file and test it out.

163
00:11:48,170 --> 00:11:55,130
So down at our command line to start up our server again, run npm run watch.

164
00:11:56,540 --> 00:12:01,910
Let's test it out if you go in your browser and refresh local host Colin 3000.

165
00:12:02,900 --> 00:12:06,220
Everything should still work perfectly and you should see this homepage.

166
00:12:06,710 --> 00:12:11,780
And to review why this is so cool, let's jump back into our DB Scott JS file.

167
00:12:12,350 --> 00:12:15,980
So our express application is running just like it always has.

168
00:12:16,280 --> 00:12:24,590
Only now it's not going to begin until we've already had a chance to export the MongoDB database.

169
00:12:25,040 --> 00:12:32,240
This means that we can now very easily access and work with our database from within any file where

170
00:12:32,240 --> 00:12:36,020
we just require in this DB dogs file.

171
00:12:36,380 --> 00:12:40,970
In other words, this setup is perfect for our MVC setup.

172
00:12:41,270 --> 00:12:47,180
So right now, you can go ahead and close all of your files except our uppercase user gorgeous model

173
00:12:47,180 --> 00:12:47,720
file.

174
00:12:48,140 --> 00:12:52,440
Remember, down at the bottom of our user model file, this is where we have.

175
00:12:52,460 --> 00:12:55,790
Step one Validate the data and then step two.

176
00:12:56,000 --> 00:12:59,930
If there are no validation problems, actually save it into the database.

177
00:13:00,290 --> 00:13:02,060
So now we are ready to do that.

178
00:13:02,390 --> 00:13:03,230
So check this out.

179
00:13:03,260 --> 00:13:07,700
Up at the very top of our user model file, let's create a new variable.

180
00:13:08,090 --> 00:13:15,710
And let's say Konst, and let's name this user's collection and let's set it to equal.

181
00:13:15,920 --> 00:13:19,430
And then we can just require in that new DB file.

182
00:13:19,940 --> 00:13:22,540
So require provided a file path.

183
00:13:22,550 --> 00:13:23,390
So quotes.

184
00:13:23,810 --> 00:13:30,140
Dot Dot slash to go up out of the models folder into the root of our project, and then we want to pull

185
00:13:30,140 --> 00:13:31,370
in the DB file.

186
00:13:31,670 --> 00:13:37,400
So remember, within that file, we sent module dot exports to be the database object.

187
00:13:37,850 --> 00:13:42,590
So that's what this is going to return and then we can look inside that.

188
00:13:43,100 --> 00:13:50,180
So dot here and we can say collection and then we just provide the name of the MongoDB collection that

189
00:13:50,180 --> 00:13:51,020
we want to work with.

190
00:13:51,110 --> 00:13:53,170
So quotes users.

191
00:13:53,640 --> 00:13:54,280
Awesome.

192
00:13:54,290 --> 00:14:00,770
So we now have this variable user's collection that we can perform crud operations on.

193
00:14:01,010 --> 00:14:06,020
So let's scroll down to the very bottom of this file and under step number two.

194
00:14:06,050 --> 00:14:06,970
Let's do this.

195
00:14:07,400 --> 00:14:09,960
Let's check to see if there are any validation errors.

196
00:14:09,960 --> 00:14:18,200
So let's say if parentheses curly brackets, let's say if this dot errors dot length.

197
00:14:18,860 --> 00:14:24,080
Now this would evaluate to true if there was one or more errors, so we would want to check for the

198
00:14:24,080 --> 00:14:25,040
opposite of that.

199
00:14:25,160 --> 00:14:28,820
So let's just put an exclamation mark right before the this.

200
00:14:29,420 --> 00:14:34,820
So essentially, we're saying only if the errors array is empty, then do this.

201
00:14:35,150 --> 00:14:41,000
So now within these curly brackets, we can drop down and let's just add or insert a new document into

202
00:14:41,000 --> 00:14:47,900
that database collection so we can use our users collection variable and then look inside it and we

203
00:14:47,900 --> 00:14:49,880
want to perform a crud operation.

204
00:14:50,060 --> 00:14:53,780
We want to create a new document in MongoDB.

205
00:14:53,780 --> 00:15:01,040
The command name for that is insert one, and within these parentheses we give it an object that we

206
00:15:01,040 --> 00:15:03,170
would want to save as a document.

207
00:15:03,470 --> 00:15:11,450
In this case, we can just type this dot data right because we've already cleaned up and validated that

208
00:15:11,450 --> 00:15:11,900
data.

209
00:15:12,260 --> 00:15:18,710
We know that this code is only going to run if there are no validation problems so that data is safe

210
00:15:18,710 --> 00:15:20,090
to store in the database.

211
00:15:20,540 --> 00:15:23,030
Let's go ahead and save that and test it out.

212
00:15:23,510 --> 00:15:27,100
So back in the browser, let's choose valid values here.

213
00:15:27,110 --> 00:15:34,700
So for username Brad, email Brad at Brad dot com and then choose a password that is at least 12 characters.

214
00:15:34,910 --> 00:15:35,870
And let's sign up.

215
00:15:36,830 --> 00:15:37,870
So we see congrats.

216
00:15:37,880 --> 00:15:44,030
There are no errors, but more importantly, if we go into our MongoDB Atlas account and within our

217
00:15:44,030 --> 00:15:51,110
complex app users collection, if we click the Find button here to refresh or reload the data.

218
00:15:52,420 --> 00:15:56,860
Awesome, we see one document, the username is Brad Brad at Broadcom.

219
00:15:57,100 --> 00:16:00,100
And here we see the super secure and safe password.

220
00:16:00,370 --> 00:16:01,270
Curti nerdy.

221
00:16:01,870 --> 00:16:02,290
Cool.

222
00:16:02,290 --> 00:16:05,800
So now that we've permanently stored these values.

223
00:16:06,190 --> 00:16:11,890
Now, when a user tries to log in, right, if they use this login form in the top right and enter a

224
00:16:11,890 --> 00:16:17,120
username and password, we can determine if those values are correct or not.

225
00:16:17,140 --> 00:16:17,420
Right.

226
00:16:17,440 --> 00:16:19,660
We have something to reference now.

227
00:16:20,110 --> 00:16:26,530
And as you might have guessed, logging in is exactly what we're going to focus on in our next lesson.

228
00:16:26,860 --> 00:16:32,950
We're going to set up this login form to submit data to our server, and then we will evaluate their

229
00:16:32,950 --> 00:16:34,720
username and password values.

230
00:16:35,110 --> 00:16:39,760
This should be a lot of fun to set up, so let's keep things rolling, and I'll see you then.
