WEBVTT
1
00:00:02.000 --> 00:00:02.960
Hello, everyone.

2
00:00:03.230 --> 00:00:09.970
In this lesson, we are going to learn how to read data from a database from within our node application.

3
00:00:10.310 --> 00:00:16.200
So if we think back to the CRUD acronym in our previous lesson, we took care of the C in CRUD.

4
00:00:16.220 --> 00:00:21.470
We created a new document in the database when a visitor submits this form.

5
00:00:21.950 --> 00:00:29.560
And now in this lesson, let's focus on the R in CRUD and learn how to read data from the database.

6
00:00:29.960 --> 00:00:30.160
Right.

7
00:00:30.230 --> 00:00:35.830
We want to read or load the existing items in the database so we can display them here.

8
00:00:36.320 --> 00:00:42.890
Now, before we learn how to do that, let's first make sure that we have multiple documents to experiment

9
00:00:42.890 --> 00:00:48.560
with because at the moment I only have that one single document named by graps.

10
00:00:49.040 --> 00:00:50.750
So right now let's do this together.

11
00:00:50.960 --> 00:00:57.260
Let's submit this form a couple of more times just so we have multiple documents in our database to

12
00:00:57.260 --> 00:00:58.370
practice reading in.

13
00:00:58.850 --> 00:01:06.800
So in this form, I will say walk the dog and submit the form and then just click the button to go back

14
00:01:06.800 --> 00:01:09.110
to that page and let's fill in the form one more time.

15
00:01:09.800 --> 00:01:13.930
I will say buy coffee and submit the form.

16
00:01:14.780 --> 00:01:20.240
Let's jump into our Mongo DB Atlas account just to confirm that those items were successfully created

17
00:01:20.240 --> 00:01:21.260
in the database.

18
00:01:21.710 --> 00:01:24.260
From this overview screen, click on collections.

19
00:01:25.340 --> 00:01:30.560
Make sure that you select the correct database, so I'm interested in the one that's named to do and

20
00:01:31.850 --> 00:01:35.080
expand that and let's click on the collection named Items.

21
00:01:35.510 --> 00:01:35.860
Cool.

22
00:01:35.870 --> 00:01:37.820
So those new items were successfully added.

23
00:01:37.820 --> 00:01:39.830
We see total documents is three.

24
00:01:40.220 --> 00:01:44.290
And down here we see by graps walk the dog and buy coffee.

25
00:01:44.810 --> 00:01:45.250
All right.

26
00:01:45.260 --> 00:01:47.840
So we now have multiple documents to work with.

27
00:01:48.050 --> 00:01:54.860
Our goal now is to write a bit of code to load those items from within our node application so we can

28
00:01:54.860 --> 00:01:56.800
display them to the user down here.

29
00:01:57.350 --> 00:01:58.290
Let's make it happen.

30
00:01:58.490 --> 00:02:05.000
So at this point, let's jump into our text editor and within our server JS file, we are looking for

31
00:02:05.000 --> 00:02:11.300
the area of code where we tell our server what it should do if someone sends a request to the base,

32
00:02:11.300 --> 00:02:13.010
you URL or the homepage.

33
00:02:13.430 --> 00:02:19.310
In other words, we're interested in this section of code that begins with App Dot get for me.

34
00:02:19.310 --> 00:02:20.540
It's on line 15.

35
00:02:20.540 --> 00:02:24.950
It could be slightly different for you, but it's right below our app use line.

36
00:02:25.550 --> 00:02:25.880
Right.

37
00:02:25.880 --> 00:02:31.340
This is where we're saying if someone sends a get request and then the forward slash represents the

38
00:02:31.340 --> 00:02:34.820
base you URL, well, then what are we going to do in response?

39
00:02:35.100 --> 00:02:40.280
We're going to send back this HTML template that builds the homepage.

40
00:02:40.700 --> 00:02:47.000
However, we no longer want to send back our response the millisecond this request comes in.

41
00:02:47.420 --> 00:02:54.170
Now, instead, we want to first read data from a database and then wait until that database action

42
00:02:54.170 --> 00:02:59.930
is complete and we have the data before we then actually send back our response.

43
00:03:00.350 --> 00:03:06.650
So let's do this within the body of this function right before this response send line.

44
00:03:06.680 --> 00:03:13.370
Let's just add a new line and let's talk to the database so we can use our DB variable that we set up

45
00:03:13.370 --> 00:03:14.630
in our previous lesson.

46
00:03:14.960 --> 00:03:20.170
And let's look inside it and call a method named collection in the parentheses, say quotes.

47
00:03:20.180 --> 00:03:26.690
We are interested in the collection named items and then on this collection we want to perform a crud

48
00:03:26.690 --> 00:03:27.470
operation.

49
00:03:27.740 --> 00:03:32.330
So right at the end of this line we can just tack on and call a method named Find.

50
00:03:32.810 --> 00:03:37.040
Find is the Mongo DB way of saying read or load.

51
00:03:37.040 --> 00:03:39.470
We want to find data in the database.

52
00:03:39.830 --> 00:03:44.630
Now, later on in this course, we will learn how to include an argument within these parentheses.

53
00:03:44.780 --> 00:03:51.230
If we wanted to find only specific data, for example, if we were running a pet adoption website within

54
00:03:51.230 --> 00:03:58.820
these find parentheses, we could say only find the dogs or only find the cats that are under the age

55
00:03:58.820 --> 00:03:59.390
of three.

56
00:03:59.750 --> 00:03:59.980
Right.

57
00:03:59.990 --> 00:04:01.520
This is where you can build a query.

58
00:04:02.000 --> 00:04:07.910
But in our case right now, we just want to find any and all documents in this collection.

59
00:04:08.300 --> 00:04:11.440
And in that case, you can just leave these find parentheses blank.

60
00:04:11.840 --> 00:04:16.910
OK, now, finally, at the end of this line, we want to tack on and call one more method dot.

61
00:04:17.060 --> 00:04:20.080
And the method is named to array.

62
00:04:20.720 --> 00:04:22.760
This method is extremely helpful.

63
00:04:23.000 --> 00:04:29.900
So Mongu DB is going to find all of the documents in our collection, but the data that it finds is

64
00:04:29.900 --> 00:04:35.750
only going to be meaningful to the Mongo DB system, meaning the data is going to be in a format that

65
00:04:35.750 --> 00:04:40.070
is not easily read by humans and is not easy to work with with JavaScript.

66
00:04:40.460 --> 00:04:47.930
So this two array method is going to convert that data into a super easy to work with JavaScript array.

67
00:04:48.410 --> 00:04:54.860
Now within the parentheses for this to array method, it's expecting a function as an argument and it's

68
00:04:54.860 --> 00:05:00.320
going to call that function whenever this database action completes, because, again, we don't know

69
00:05:00.320 --> 00:05:06.320
if it's going to take two milliseconds or two thousand milliseconds, but let's go ahead and spell out

70
00:05:06.350 --> 00:05:09.340
what we want to happen when the data is ready.

71
00:05:09.770 --> 00:05:16.850
So within these parentheses, let's include an anonymous function, function, parentheses, curly brackets.

72
00:05:17.600 --> 00:05:21.710
Let's dropdown in the parentheses right after the word function here.

73
00:05:21.710 --> 00:05:23.690
Let's include two parameters.

74
00:05:24.050 --> 00:05:29.660
Let's call the first IRR for error, comma, and let's call the second one items.

75
00:05:30.350 --> 00:05:34.940
In the future, we can learn how to leverage the error parameter to make sure that there was not an

76
00:05:34.940 --> 00:05:36.770
error reading from the database.

77
00:05:37.010 --> 00:05:42.590
But in this simplistic lesson, we're just interested in the second parameter, which is going to be

78
00:05:42.590 --> 00:05:46.490
a JavaScript array of all of our items from the database.

79
00:05:47.090 --> 00:05:52.610
So this method is going to pass that data into our function as this parameter, which means we have

80
00:05:52.610 --> 00:05:57.050
access to all of our database data from within the body of our function here.

81
00:05:57.650 --> 00:05:59.280
So what do we do next?

82
00:05:59.690 --> 00:06:06.980
Well, I'm a big fan of visualizing the data or seeing the data with my own two eyes before figuring

83
00:06:06.980 --> 00:06:08.540
out what my next step should be.

84
00:06:08.810 --> 00:06:13.670
So let's do this type this out with me within the body of our function just does a test.

85
00:06:13.910 --> 00:06:20.120
Let's log our items parameter to the console so we can visually see what kind of data we're dealing

86
00:06:20.120 --> 00:06:20.450
with.

87
00:06:20.840 --> 00:06:24.650
So console dot log inside the.

88
00:06:24.700 --> 00:06:28.190
Parentheses, let's just go with our items parameter.

89
00:06:28.660 --> 00:06:34.780
Now let's go ahead and save our file and take it for a test drive if your node server or app is not

90
00:06:34.780 --> 00:06:35.510
already running.

91
00:06:35.530 --> 00:06:43.090
Be sure to go to your command line and fire it up by running the command NPM run watch.

92
00:06:44.330 --> 00:06:50.920
OK, and we can test out this code that we just wrote by sending a request to the home page, you are

93
00:06:50.930 --> 00:06:51.150
out.

94
00:06:51.500 --> 00:06:57.290
In other words, if you go to your browser and just refresh localhost three thousand, that will trigger

95
00:06:57.290 --> 00:06:58.570
that new code that we just wrote.

96
00:06:58.580 --> 00:07:03.920
So if we jump back to the command line, we see that this was logged to the console.

97
00:07:04.380 --> 00:07:07.490
So when it comes to our items parameter, what are we dealing with?

98
00:07:07.520 --> 00:07:13.490
Well, it's an array and each item in the array is a JavaScript object.

99
00:07:13.820 --> 00:07:21.170
So all we need to do now is incorporate the value of the text property for each item in this array into

100
00:07:21.170 --> 00:07:24.470
the HTML that we send back to the visitor.

101
00:07:24.920 --> 00:07:25.220
Right.

102
00:07:25.230 --> 00:07:30.910
We just need to intertwine this data and these values into this big HTML template.

103
00:07:31.370 --> 00:07:32.540
So let's do this.

104
00:07:33.140 --> 00:07:40.670
Now that we know what this items parameter contains, let's get rid of this console log line so the

105
00:07:40.670 --> 00:07:42.830
body of our function is now empty again.

106
00:07:43.310 --> 00:07:51.050
Now what we want to do is move or cut and paste this response or send code to live within the body of

107
00:07:51.050 --> 00:07:51.730
our function.

108
00:07:52.220 --> 00:07:52.490
Right.

109
00:07:52.490 --> 00:07:58.930
Because we don't want to send back our response until this data base action has had a chance to complete.

110
00:07:59.600 --> 00:08:04.670
So to cut and paste this response, send code into the body of this function, I'm just going to place

111
00:08:04.670 --> 00:08:08.360
my cursor right at the start of that response dot send line.

112
00:08:08.720 --> 00:08:13.510
And then I want you to scroll down all the way to the bottom of this HTML template.

113
00:08:13.970 --> 00:08:19.730
And right after the closing back and the closing parentheses, hold shift on your keyboard and then

114
00:08:19.730 --> 00:08:20.990
just click right there.

115
00:08:21.590 --> 00:08:22.880
So that selects that.

116
00:08:22.880 --> 00:08:24.590
And let's cut it into our clipboard.

117
00:08:26.650 --> 00:08:32.380
OK, and now within the body of our function here, right, we're console dialogue was just 10 seconds

118
00:08:32.380 --> 00:08:32.710
ago.

119
00:08:32.710 --> 00:08:34.630
Let's go ahead and paste our clipboard.

120
00:08:35.940 --> 00:08:42.360
OK, so now this is the same HTML template that we've had for quite a while, only now we have this

121
00:08:42.360 --> 00:08:47.450
magical items parameter that we can intertwine into the template.

122
00:08:48.000 --> 00:08:55.020
So all we need to do is find the spot in the HTML template where these list items live, and then replace

123
00:08:55.020 --> 00:09:02.970
this fake hard coded data of fake example item with the real dynamic data from our items parameter.

124
00:09:03.360 --> 00:09:05.320
Let's start setting that up right now.

125
00:09:05.490 --> 00:09:12.180
So back in our code, let's start digging through this HTML template to find the unordered list where

126
00:09:12.180 --> 00:09:13.800
those list items should live.

127
00:09:14.580 --> 00:09:18.030
So after the opening body tag, we see a heading level one.

128
00:09:18.360 --> 00:09:21.900
This is the area for the form that the user can submit.

129
00:09:22.230 --> 00:09:26.870
And right below that area we see an unordered list opening tag.

130
00:09:27.270 --> 00:09:34.050
So we just want to hollow out the contents of this unordered list with real data right within this unordered

131
00:09:34.050 --> 00:09:34.440
list.

132
00:09:34.450 --> 00:09:36.440
Here is the first list item.

133
00:09:36.930 --> 00:09:44.580
There are three overall list items because there are three fake static items within this first list

134
00:09:44.580 --> 00:09:45.060
item here.

135
00:09:45.060 --> 00:09:47.480
We can see that fake hardcoded data, right.

136
00:09:47.640 --> 00:09:49.540
Fake example, item number one.

137
00:09:49.980 --> 00:09:51.330
So here's what I want you to do.

138
00:09:51.630 --> 00:09:54.600
I want you to copy this first list item.

139
00:09:55.080 --> 00:09:58.110
It should be about seven lines worth of code.

140
00:09:58.320 --> 00:10:00.920
And I want you to copy that into your clipboard.

141
00:10:01.230 --> 00:10:01.620
This way.

142
00:10:01.620 --> 00:10:05.070
We have a template of how things should look visually.

143
00:10:05.670 --> 00:10:12.270
OK, once that's in your clipboard, I actually want us to delete all of the list items that live within

144
00:10:12.270 --> 00:10:13.380
this unordered list.

145
00:10:15.380 --> 00:10:19.980
Scroll down so I will select all three of the littlest items and delete.

146
00:10:20.330 --> 00:10:24.330
So now we just have a hollowed out unordered list, right?

147
00:10:24.350 --> 00:10:26.060
The opening tag in the closing tag.

148
00:10:26.330 --> 00:10:31.220
Now, check this out in between the opening and closing tag, type this out with me.

149
00:10:31.580 --> 00:10:38.690
Dollar sign curly brackets, because we are within a template, literal meaning because this entire

150
00:10:38.690 --> 00:10:44.870
HTML template is wrapped in back ticks instead of simple quotes, we can use dollar symbol in curly

151
00:10:44.870 --> 00:10:49.940
brackets to do something dynamic within this overall larger string of text.

152
00:10:50.370 --> 00:10:55.040
Now within these curly brackets, let's begin working with our items parameter.

153
00:10:55.670 --> 00:11:00.110
Now remember, we know that this is an array of JavaScript objects.

154
00:11:00.380 --> 00:11:08.600
And as we learned back in the ten days of JavaScript, all arrays have access to a method named map.

155
00:11:08.940 --> 00:11:11.960
So let's say dot map to call that method.

156
00:11:12.380 --> 00:11:19.190
And to refresh your memory, the map method will return a new array that we can create based on this

157
00:11:19.190 --> 00:11:20.150
original array.

158
00:11:20.690 --> 00:11:26.660
This is a really convenient way of looping through this array and doing something once for each item

159
00:11:26.660 --> 00:11:27.070
in it.

160
00:11:27.380 --> 00:11:33.590
Now, within the parentheses of map, we give it a function that it's going to call once for each item

161
00:11:33.590 --> 00:11:34.210
in the array.

162
00:11:34.610 --> 00:11:41.540
So inside these parentheses, let's say function, parentheses, curly brackets, this dropdown, OK,

163
00:11:41.540 --> 00:11:47.610
now whatever we return within this function is what's going to get added on to the newly generated array.

164
00:11:47.990 --> 00:11:48.650
So check this out.

165
00:11:48.650 --> 00:11:55.280
If we just return a string of text that says hello and then go ahead and save that and then refresh

166
00:11:55.280 --> 00:11:59.530
our Web app in the browser, we see three Hallowes.

167
00:11:59.810 --> 00:12:04.610
That's because there are three documents in our database collection right by graps.

168
00:12:04.610 --> 00:12:06.580
Walk the dog and buy coffee.

169
00:12:07.160 --> 00:12:09.830
Now, we don't actually want the word hello here.

170
00:12:10.070 --> 00:12:12.710
We would want the value that got saved into the database.

171
00:12:13.010 --> 00:12:18.040
However, before we worry about that, you'll notice that there are commas in between each item.

172
00:12:18.620 --> 00:12:25.670
This is because by default, that's how JavaScript handles the automatic conversion of an array into

173
00:12:25.670 --> 00:12:26.840
a string of text.

174
00:12:27.350 --> 00:12:30.920
Right, because our code is living within a template literal.

175
00:12:31.280 --> 00:12:36.350
When JavaScript sees the array that the map method is going to return, it's going to automatically

176
00:12:36.350 --> 00:12:39.090
try to convert that array into a string of text.

177
00:12:39.350 --> 00:12:42.860
Now, we don't want these awkward commas in between each item.

178
00:12:43.160 --> 00:12:45.470
So check this out right after this.

179
00:12:45.470 --> 00:12:48.260
Closing parentheses for the map method.

180
00:12:48.980 --> 00:12:55.760
But right before this closing curly bracket in between that we can say DOT join in parentheses to call

181
00:12:55.760 --> 00:12:56.480
the join method.

182
00:12:56.750 --> 00:13:02.930
The join method will let us convert an array into a string of text in between the parentheses.

183
00:13:03.080 --> 00:13:07.850
We can control what is placed in between each item by default.

184
00:13:07.850 --> 00:13:14.150
It's a comma, but if we just include an empty pair of quotes with nothing in between them, not even

185
00:13:14.150 --> 00:13:14.960
a space.

186
00:13:15.180 --> 00:13:19.640
Well, now if we save and refresh in the browser, cool.

187
00:13:19.640 --> 00:13:22.530
Now there is nothing in between each of our items.

188
00:13:22.970 --> 00:13:29.990
So now instead of simply the word hello, let's just generate a little bit of each HTML for each item.

189
00:13:30.410 --> 00:13:32.480
This is where we're going to paste in our clipboard.

190
00:13:33.140 --> 00:13:38.930
So instead of returning the word hello, get rid of the quotes and hello instead, let's return a template

191
00:13:38.930 --> 00:13:42.020
literal so to back ticks again.

192
00:13:42.020 --> 00:13:45.020
That's right above your tab key or to the left of the one key.

193
00:13:45.410 --> 00:13:49.490
And in between the back ticks, I want you to paste in your clipboard.

194
00:13:50.330 --> 00:13:56.360
Remember, that was the HTML template to create a list item and that's going to have the edit buttons

195
00:13:56.360 --> 00:14:02.960
and delete buttons and all we really need to swap out is this FAQ example, item number one text.

196
00:14:03.230 --> 00:14:03.410
Right.

197
00:14:03.470 --> 00:14:09.020
Instead of this, we would want the actual text value that got saved into the database for the current

198
00:14:09.020 --> 00:14:09.460
item.

199
00:14:09.980 --> 00:14:15.980
So check this out within the parentheses for our function that the map method is calling within these

200
00:14:15.980 --> 00:14:17.870
parentheses, let's include a parameter.

201
00:14:18.170 --> 00:14:24.050
The name doesn't matter, but let's call it item, because each time the map method calls our function,

202
00:14:24.320 --> 00:14:28.620
it's going to pass into it the current item from the original array.

203
00:14:29.030 --> 00:14:32.990
So now we can use this parameter of item right here.

204
00:14:33.140 --> 00:14:35.720
Let's get rid of this fake example.

205
00:14:35.750 --> 00:14:40.220
Item number one and in its place, let's do something dynamic.

206
00:14:40.220 --> 00:14:45.830
So let's delete that and say dollar sign curly brackets in between the curly brackets.

207
00:14:45.830 --> 00:14:49.700
We want to use that parameter that represents the current item in the array.

208
00:14:49.910 --> 00:14:55.430
And then remember earlier when we saw the data log to the console, we saw that each item had a property

209
00:14:55.430 --> 00:14:58.790
of IDE, but also a property of text.

210
00:14:59.150 --> 00:15:01.430
And that's the property that we're interested in.

211
00:15:01.910 --> 00:15:07.340
OK, with this in place, let's go ahead and save this file and then refresh in the browser.

212
00:15:08.840 --> 00:15:15.860
Awesome, we see our real living, breathing data pulled in from the database now, before we bring

213
00:15:15.860 --> 00:15:21.580
this lesson to a close, let's streamline our application a bit currently if we add a new item.

214
00:15:21.590 --> 00:15:28.970
So if I say feed the cat and submit, it takes us to this awkward screen that says thanks for submitting.

215
00:15:29.270 --> 00:15:34.670
And then we would have to manually go back to localhost in the address bar or click the back button.

216
00:15:35.960 --> 00:15:42.070
Right, and then I would have to refresh to actually see that new item, let's improve things a bit,

217
00:15:42.230 --> 00:15:43.190
let's set it up.

218
00:15:43.190 --> 00:15:49.370
So as soon as you submit this form instead of sending you to that thank you screen, it just redirects

219
00:15:49.370 --> 00:15:51.470
you to this same home page.

220
00:15:51.980 --> 00:15:54.780
So then you would just immediately see the new item.

221
00:15:55.610 --> 00:15:56.640
Let me show you what I mean.

222
00:15:56.690 --> 00:16:01.670
So back in our code, I want you to scroll down to the very bottom of this file.

223
00:16:02.240 --> 00:16:08.730
So here we see the area where we tell our server what to do if it receives a post request to this you

224
00:16:08.790 --> 00:16:09.340
URL.

225
00:16:09.800 --> 00:16:12.860
And here's what we're going to change instead of this response.

226
00:16:12.860 --> 00:16:14.080
Dot, send the line.

227
00:16:14.390 --> 00:16:15.770
I want you to delete that.

228
00:16:15.920 --> 00:16:21.670
And in its place, then the body of this function just say response or R.

229
00:16:21.700 --> 00:16:25.850
S and look inside it for a method named redirect.

230
00:16:26.930 --> 00:16:30.860
Within these parentheses, we specify where we want to redirect the visitor to.

231
00:16:31.130 --> 00:16:35.540
So let's just say quotes forward slash to represent the home page or the base.

232
00:16:35.540 --> 00:16:36.150
You are out.

233
00:16:36.560 --> 00:16:39.720
OK, let's go ahead and save that and take it for a test drive.

234
00:16:39.770 --> 00:16:45.650
So if I refresh the homepage and let me create a new item, actually, first, let me zoom out a bit

235
00:16:45.650 --> 00:16:48.260
so we can see when the item gets added down at the bottom.

236
00:16:48.290 --> 00:16:56.690
OK, so maybe I will type in drink water and now as soon as I submit, it redirects me to that same

237
00:16:56.690 --> 00:16:58.700
page and you can see it gets added down here.

238
00:16:58.700 --> 00:16:59.480
Drink water.

239
00:16:59.930 --> 00:17:00.320
Cool.

240
00:17:00.500 --> 00:17:03.320
And that's going to bring this lesson to a close.

241
00:17:03.800 --> 00:17:10.400
If we think about the CRUD acronym, so far we've taken care of creating, we've taken care of reading.

242
00:17:11.030 --> 00:17:14.810
Now in our next lesson, let's take care of updating.

243
00:17:15.200 --> 00:17:15.510
Right.

244
00:17:15.530 --> 00:17:19.460
What if you want to edit or update the value of one of our existing items?

245
00:17:19.910 --> 00:17:23.960
Let's keep our momentum rolling and I will see you in the next lesson.
