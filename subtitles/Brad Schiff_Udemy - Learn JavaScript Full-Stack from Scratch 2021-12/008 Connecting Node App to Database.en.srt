1
00:00:02,060 --> 00:00:03,030
Hello, everyone.

2
00:00:03,290 --> 00:00:10,310
In this lesson, we are going to learn how to connect a Node.js app to a MongoDB database.

3
00:00:10,820 --> 00:00:12,770
Let's jump right into the action.

4
00:00:13,250 --> 00:00:16,190
So this is where we left off with our simple to do app.

5
00:00:16,490 --> 00:00:19,790
This is just a static HTML template at the moment.

6
00:00:20,240 --> 00:00:24,740
But remember, we did already set things up so that if the user typed into this field.

7
00:00:24,950 --> 00:00:29,960
So if I say buy dog food and then submit the form.

8
00:00:31,020 --> 00:00:36,420
Not only does the visitor see, thanks for submitting the form, but if I go look at my command line.

9
00:00:36,690 --> 00:00:40,410
We also logged the users typed input to the console.

10
00:00:40,620 --> 00:00:46,620
Now we only logged this to the console to make sure that we were able to access the user's input value.

11
00:00:47,070 --> 00:00:54,120
What we actually want to do is permanently store this data in a database, and that's exactly what we're

12
00:00:54,120 --> 00:00:56,610
going to learn how to do in this lesson.

13
00:00:56,880 --> 00:00:57,720
Let's get started.

14
00:00:57,720 --> 00:01:00,150
So right now, I want you to follow along with me.

15
00:01:00,390 --> 00:01:05,940
Make sure you have your server dot js file open and scroll down to the very bottom.

16
00:01:06,900 --> 00:01:13,290
Because that's where we have this section of code where we respond to an incoming post request to this

17
00:01:13,300 --> 00:01:13,950
URL.

18
00:01:14,340 --> 00:01:18,570
In other words, this is what we do in response to a user submitting that form.

19
00:01:19,020 --> 00:01:25,530
Now, when it comes to this line of code, we don't actually want to log this value to the console.

20
00:01:25,830 --> 00:01:29,250
This is the value that we want to instead save into a database.

21
00:01:29,640 --> 00:01:31,360
So right now, do this with me.

22
00:01:31,380 --> 00:01:38,640
Let's delete this console dot log line and in its place, let's write a bit of code that will create

23
00:01:38,640 --> 00:01:41,610
a new document in a MongoDB database.

24
00:01:42,060 --> 00:01:47,970
Let's begin with a variable named DB for the time being, do not worry about where this variable is

25
00:01:47,970 --> 00:01:48,690
coming from.

26
00:01:48,990 --> 00:01:52,530
Trust me, we will address that a bit later on in this lesson.

27
00:01:52,680 --> 00:01:54,060
So let's look inside it.

28
00:01:54,060 --> 00:01:57,270
So Dot and let's call a method named collection.

29
00:01:58,530 --> 00:02:03,330
Remember that a MongoDB database can contain multiple collections.

30
00:02:03,780 --> 00:02:10,050
Remember back to a lesson or two ago when we created a pet's collection and then created different documents

31
00:02:10,050 --> 00:02:12,450
that represented cats and dogs?

32
00:02:12,780 --> 00:02:20,130
Well, in this case, for our To-Do app instead of pets, let's imagine we have a collection named items

33
00:02:20,400 --> 00:02:23,010
so we can just say quotes items.

34
00:02:23,490 --> 00:02:29,550
OK, and now this collection method is going to select that collection in the database.

35
00:02:29,940 --> 00:02:34,690
Now that we've selected that collection, we can tack on and at the end of this line include a period.

36
00:02:34,980 --> 00:02:38,880
And this is where we can perform the basic crud operations.

37
00:02:39,180 --> 00:02:43,860
In this case, we would want to create a new document in this collection.

38
00:02:44,160 --> 00:02:49,140
So right after this dot, let's use a method named Insert one.

39
00:02:49,710 --> 00:02:55,800
In this context, the word insert essentially means create now within these parentheses, we need to

40
00:02:55,800 --> 00:02:58,740
pass this insert one method to arguments.

41
00:02:59,070 --> 00:03:05,730
So let's say a comma b as placeholders for the first argument instead of the placeholder a let's add

42
00:03:05,730 --> 00:03:09,960
a pair of curly brackets because this is where we create an object.

43
00:03:10,350 --> 00:03:14,430
This is the object that's going to be stored as a document in the database.

44
00:03:14,880 --> 00:03:18,210
So this is where you can make up different properties and values.

45
00:03:18,480 --> 00:03:24,180
For example, you can say that the name should have a value of meows a lot and then have a comma and

46
00:03:24,180 --> 00:03:27,840
say that the species should be set to cat.

47
00:03:28,590 --> 00:03:28,810
Right.

48
00:03:28,840 --> 00:03:31,830
This is just a regular old JavaScript object.

49
00:03:32,460 --> 00:03:35,910
Now, in this case, we don't actually need name and species properties.

50
00:03:36,210 --> 00:03:39,450
So let me go back to just the empty, curly brackets for an object.

51
00:03:39,720 --> 00:03:44,850
In this case, we only need one property to represent the text for a To-Do list item.

52
00:03:45,210 --> 00:03:47,430
So you could make up any property name you want.

53
00:03:47,430 --> 00:03:54,090
But let's just call it text and then colon, and then let's give it a value of whatever the user typed

54
00:03:54,090 --> 00:03:55,200
into that form field.

55
00:03:55,290 --> 00:04:01,530
So that would be the request object and then look inside it for the body object and then look inside

56
00:04:01,530 --> 00:04:03,630
that for the item property.

57
00:04:04,080 --> 00:04:04,560
Awesome.

58
00:04:04,560 --> 00:04:07,170
So that will create a new document in the database.

59
00:04:07,590 --> 00:04:08,910
That's the first argument.

60
00:04:09,000 --> 00:04:13,010
Let's move on to this be placeholder, which is the second argument.

61
00:04:13,260 --> 00:04:19,590
What the insert one method actually expects here instead of this be placeholder is a function that it

62
00:04:19,590 --> 00:04:24,270
will call once it's had a chance to actually create this item in the database.

63
00:04:24,750 --> 00:04:30,210
The idea is that as the developer, we don't know how long it will take to create that item in the database.

64
00:04:30,480 --> 00:04:34,740
It could take three milliseconds or it could take three thousand milliseconds.

65
00:04:35,160 --> 00:04:39,900
All that matters is that this method will call this function at the appropriate time.

66
00:04:40,350 --> 00:04:43,950
So let's get rid of that B placeholder, and let's just add an anonymous function.

67
00:04:44,160 --> 00:04:50,460
So let's say function parentheses curly brackets was dropped down in between the curly brackets.

68
00:04:50,880 --> 00:04:51,320
All right.

69
00:04:51,330 --> 00:04:58,320
And then let's just move or cut and paste this response dot send line to live inside this new function.

70
00:04:58,770 --> 00:05:03,060
So I'm just going to select that response dot sandline and cut it into my clipboard.

71
00:05:04,120 --> 00:05:10,450
And then inside this new function just pasted in, you might be wondering why we just moved this line.

72
00:05:10,540 --> 00:05:14,590
I don't want to display this message the millisecond the user submits the form.

73
00:05:15,040 --> 00:05:21,430
I want to wait the appropriate amount of time that it takes the insert one method to actually create

74
00:05:21,430 --> 00:05:26,500
that item in the database, whether that's five milliseconds or 5000 milliseconds.

75
00:05:26,920 --> 00:05:29,920
Anyways, that completes this section of code.

76
00:05:30,400 --> 00:05:37,660
All we need to do now in this lesson is address this magical and mysterious deep variable that I said

77
00:05:37,660 --> 00:05:38,890
we would circle back to.

78
00:05:39,250 --> 00:05:45,460
Now, I hate to break it to you, but there is no DB variable that exists by default out of the box

79
00:05:45,460 --> 00:05:46,120
like this.

80
00:05:46,540 --> 00:05:51,250
You and I need to put in a bit of work to create this variable ourselves.

81
00:05:51,790 --> 00:05:58,960
Big picture we need to set up a variable that represents a MongoDB database that we've opened a connection

82
00:05:58,960 --> 00:05:59,290
to.

83
00:05:59,710 --> 00:06:01,740
The variable could be named anything.

84
00:06:01,750 --> 00:06:03,450
It doesn't have to be DB.

85
00:06:03,490 --> 00:06:04,930
That's just a common choice.

86
00:06:05,320 --> 00:06:11,320
Anyways, right now, I want you to scroll up to the very top of our file and maybe right below this

87
00:06:11,320 --> 00:06:13,390
let app equal express line.

88
00:06:13,390 --> 00:06:17,680
Let's add a new line and say Let DB and that's it.

89
00:06:17,710 --> 00:06:20,170
We don't even need to say equals anything.

90
00:06:20,590 --> 00:06:26,110
For now, we are simply saying that a variable with this name should exist in the global scope.

91
00:06:26,620 --> 00:06:30,490
Don't worry, in a few minutes, we will update the value of this variable.

92
00:06:30,730 --> 00:06:37,510
For now, though, the question becomes How in the world do we open a connection to a MongoDB database?

93
00:06:37,900 --> 00:06:44,980
Well, I'll let you know that our first step is to go out to the JavaScript grocery store or npm and

94
00:06:44,980 --> 00:06:49,480
pick up the official MongoDB driver for the Node.js environment.

95
00:06:49,930 --> 00:06:52,840
To do that, we need to jump down to our command line.

96
00:06:53,290 --> 00:06:59,050
If your node, app or server is currently running, be sure to press Control C to quit the app or server.

97
00:06:59,530 --> 00:07:06,850
All right, and then I want you to run the following command with me npm install.

98
00:07:07,300 --> 00:07:14,980
And the name of the package that we are interested in is Mongo DB, all lowercase and all one word.

99
00:07:15,520 --> 00:07:19,150
So go ahead and press enter to install the MongoDB package.

100
00:07:19,720 --> 00:07:27,010
And this is the official package that gives Node.js the ability to work with a MongoDB database.

101
00:07:27,460 --> 00:07:31,210
So now up in our code, maybe right below this very first line.

102
00:07:31,420 --> 00:07:38,530
Let's drop down and say let MongoDB equal and then just require in the name of the package is Mongo

103
00:07:38,540 --> 00:07:43,760
DB right away, though, I do want to let you know that we're not going to use the package directly.

104
00:07:44,080 --> 00:07:47,530
Instead, we want to look inside it so you don't need to type this next part.

105
00:07:47,530 --> 00:07:53,530
But for example, in our actual code, we would need to say MongoDB Dot and look inside it for something

106
00:07:53,530 --> 00:07:55,510
called Mongo client.

107
00:07:55,990 --> 00:08:01,540
So the idea is if we know that we need to look inside it for this specific thing, why not just import

108
00:08:01,540 --> 00:08:02,890
that specific thing?

109
00:08:03,310 --> 00:08:04,540
So let me get rid of that code.

110
00:08:05,140 --> 00:08:07,300
Now there are a few different ways we could handle this.

111
00:08:07,570 --> 00:08:14,500
So option number one after this require you could just say Dot Mongo client, and then you could give

112
00:08:14,500 --> 00:08:16,060
this a name that makes sense, right?

113
00:08:16,060 --> 00:08:16,960
Like Client.

114
00:08:17,680 --> 00:08:23,710
However, what if there were two or three or four or five different things from the MongoDB package

115
00:08:23,710 --> 00:08:26,410
that we want to sort of pull out or select like that?

116
00:08:26,680 --> 00:08:29,890
Well, then you'd have to have four or five different lines of code like this.

117
00:08:30,220 --> 00:08:32,740
So instead, something you'll see a lot of developers do.

118
00:08:32,740 --> 00:08:37,640
If we get rid of this Mongo client at the end, here is something called deep structuring.

119
00:08:37,660 --> 00:08:44,020
So instead of saying let and then making up a name, we can say let curly brackets and then we don't

120
00:08:44,020 --> 00:08:45,010
make up a name.

121
00:08:45,250 --> 00:08:50,290
We choose the name of the thing that we're trying to import from this object, so we know that it has

122
00:08:50,290 --> 00:08:55,510
something inside it called Mongo Client, and that's capital M Capital C.

123
00:08:55,840 --> 00:09:00,730
And now imagine if there were two or three other things in this overall object that we wanted to make

124
00:09:00,730 --> 00:09:03,580
available from an easy to access variable name.

125
00:09:03,820 --> 00:09:08,830
You could just say comma, you know, if there was something called a something called B, you get the

126
00:09:08,830 --> 00:09:09,310
idea.

127
00:09:09,670 --> 00:09:11,440
So we're sort of doing two things at once.

128
00:09:11,440 --> 00:09:17,740
We're taking these named properties from this existing object and we're making them available from these

129
00:09:17,740 --> 00:09:18,520
variable names.

130
00:09:18,520 --> 00:09:24,070
So now anywhere in our code, we could use Mongo client or we could use A, B, C or D.

131
00:09:24,370 --> 00:09:29,710
Now, obviously, the MongoDB package doesn't actually have items called A, B, C or D, and we don't

132
00:09:29,710 --> 00:09:30,330
need those.

133
00:09:30,340 --> 00:09:32,110
So it would just be curly brackets.

134
00:09:32,380 --> 00:09:33,520
Mongo client.

135
00:09:33,880 --> 00:09:34,270
Cool.

136
00:09:34,480 --> 00:09:37,270
Now how do we actually go user leverage this?

137
00:09:37,660 --> 00:09:45,610
Well, right below this line where we said, let db, let's drop down and say Mongo Client Uppercase

138
00:09:45,610 --> 00:09:51,220
M and see parentheses to call it in these parentheses, let's just have an empty quotes or empty string

139
00:09:51,220 --> 00:09:53,050
of text will fill this in later.

140
00:09:53,290 --> 00:09:58,120
Essentially, this is the connection string to our database that gives us access or permission.

141
00:09:58,570 --> 00:10:03,540
OK, now at the very start of this line, when we called Mongo Client, we would want to create a.

142
00:10:03,650 --> 00:10:10,820
New instance of it, so new Mongo client, and then that's going to return something we don't want that

143
00:10:10,820 --> 00:10:13,370
just sitting or floating in outer space.

144
00:10:13,610 --> 00:10:14,960
We want to hold on to that.

145
00:10:15,320 --> 00:10:20,460
So also at the very start of this line, let's say let and then let's make up a name.

146
00:10:20,480 --> 00:10:25,640
I'll just call it lowercase client equals a new instance of Mongo client.

147
00:10:26,090 --> 00:10:29,560
Now on a new line, we can leverage our client variable.

148
00:10:29,570 --> 00:10:34,190
We can just say client dot, and it has a method called Connect.

149
00:10:34,220 --> 00:10:39,680
So parentheses to call that once the Connect method finishes, we will have an ongoing connection to

150
00:10:39,680 --> 00:10:40,370
the database.

151
00:10:40,700 --> 00:10:47,870
So on a new line now we can say DB equals client dot and then call its DB method.

152
00:10:48,200 --> 00:10:53,570
However, there's one big problem with this code, and that is that we need to wait for this connect

153
00:10:53,570 --> 00:10:57,500
method to actually finish or complete before we do anything else.

154
00:10:57,710 --> 00:11:00,920
Because we don't know how long this is going to take to complete could be.

155
00:11:00,920 --> 00:11:07,850
One millisecond could be 5000 milliseconds, and this line of code won't work unless we actually wait

156
00:11:08,060 --> 00:11:09,110
for this to finish.

157
00:11:09,620 --> 00:11:15,020
Now we ran into a timing situation like this down below in our code earlier in the video.

158
00:11:15,230 --> 00:11:17,900
And in that case, we used a callback function.

159
00:11:18,110 --> 00:11:20,900
But right now, I want to show you a more modern approach.

160
00:11:21,230 --> 00:11:27,110
What we can do at the very start of this client connect line is just add the word await.

161
00:11:27,500 --> 00:11:33,110
However, there is one tiny complication and that is that in JavaScript, we're only allowed to use

162
00:11:33,110 --> 00:11:37,520
the await word like this if we're inside an async function.

163
00:11:38,000 --> 00:11:39,380
So let me show you what I would do.

164
00:11:39,680 --> 00:11:41,900
Just select these three lines of code.

165
00:11:42,260 --> 00:11:43,580
Cut them into your clipboard.

166
00:11:43,590 --> 00:11:47,720
We're going to want them back in just a minute and say async function.

167
00:11:47,720 --> 00:11:51,710
You can give it any name, you could name it go or start or unicorn.

168
00:11:52,010 --> 00:11:56,630
So we're just creating a function, but we're including the word async in front of it.

169
00:11:56,900 --> 00:12:00,260
Now, right after this function, let's actually call it or execute it.

170
00:12:00,530 --> 00:12:02,330
So whatever you named it, I named Mongo.

171
00:12:02,330 --> 00:12:05,570
I'm calling it now in the body of this async function.

172
00:12:05,870 --> 00:12:07,670
You can paste your clipboard back in.

173
00:12:08,000 --> 00:12:14,390
And now, because we are within an async function, we are allowed to use this magical await keyword.

174
00:12:14,930 --> 00:12:20,030
Now, this line of code will make our database available from the global DB variable.

175
00:12:20,360 --> 00:12:24,440
So we want to make sure that that's ready before our application actually starts running.

176
00:12:24,710 --> 00:12:28,520
So to do that, all we need to do, scroll down to the very bottom of your application.

177
00:12:29,090 --> 00:12:32,300
Cut this apt listen line into your clipboard.

178
00:12:33,110 --> 00:12:37,850
Scroll back up to our asynchronous function and just right below the DB equals client line.

179
00:12:38,120 --> 00:12:39,410
Paste in your clipboard.

180
00:12:39,860 --> 00:12:40,280
Cool.

181
00:12:40,460 --> 00:12:46,490
Now, by the time our application actually starts running and tries to reference DB, it will actually

182
00:12:46,490 --> 00:12:48,140
be pointing towards our database.

183
00:12:48,530 --> 00:12:53,600
Now, at this point, we just have one more step before our app will be up and running with a database.

184
00:12:53,990 --> 00:12:57,170
We need to fill in this connection string value.

185
00:12:57,530 --> 00:13:01,940
Again, this is where we tell Mongo where or what we want to connect to.

186
00:13:02,300 --> 00:13:08,000
In our case, we want to connect to a database that lives within our Mongo DB online atlas account.

187
00:13:08,510 --> 00:13:15,260
So the MongoDB Atlas website will give us a little snippet of code that will include an address that

188
00:13:15,260 --> 00:13:18,560
points towards our database and also a username and password.

189
00:13:18,860 --> 00:13:22,280
All bundled together in one big, long string of text.

190
00:13:22,580 --> 00:13:26,930
And then we just include that here and that will get plugged into the connect method.

191
00:13:27,200 --> 00:13:33,830
And that will give us access that will give us the security or permissions in order to actually connect.

192
00:13:34,250 --> 00:13:36,140
So let's go retrieve this together.

193
00:13:36,500 --> 00:13:43,340
Right now, I want you to open up a new tab in your web browser and log in to your MongoDB Atlas account.

194
00:13:43,790 --> 00:13:44,270
All right.

195
00:13:44,270 --> 00:13:48,170
And from this main overview screen down here, we see a few buttons.

196
00:13:48,500 --> 00:13:51,260
I want you to click on the Connect button.

197
00:13:53,140 --> 00:13:55,780
And we see that we need to fill in two options.

198
00:13:56,230 --> 00:13:59,410
The first setting is where we whitelist our IP address.

199
00:13:59,830 --> 00:14:06,820
Now, in our case, we do not want to just add our current IP address of our actual computer because

200
00:14:06,820 --> 00:14:13,330
a bit later on in the course, we are going to push our application up onto the web up to a hosting

201
00:14:13,330 --> 00:14:13,870
company.

202
00:14:14,020 --> 00:14:18,160
And we have no definitive way of knowing what their IP address will be.

203
00:14:18,460 --> 00:14:19,450
So do this with me.

204
00:14:19,480 --> 00:14:25,300
Click this Add a different IP address button in this first IP address field.

205
00:14:25,330 --> 00:14:35,740
Go ahead and type in 0.0 0.0, so four zeros all separated with periods in between them and then at

206
00:14:35,740 --> 00:14:39,010
the end, a forward slash and one more zero.

207
00:14:39,220 --> 00:14:46,030
This is just our way of telling the Atlas Service that it should allow incoming connections from any

208
00:14:46,030 --> 00:14:47,170
IP address.

209
00:14:47,560 --> 00:14:54,370
And no, this is not a big security risk because you would still need our username and password to actually

210
00:14:54,370 --> 00:14:54,970
connect.

211
00:14:55,390 --> 00:15:00,220
OK, let's be sure to click this green button here that says Add IP address.

212
00:15:01,420 --> 00:15:04,990
Cool, and now we just need to create a new MongoDB user.

213
00:15:05,500 --> 00:15:07,540
So we choose a username and password.

214
00:15:07,810 --> 00:15:13,210
Now you might be a bit confused and think that you already chose a username and password when you signed

215
00:15:13,210 --> 00:15:15,310
up for your MongoDB Atlas account.

216
00:15:15,610 --> 00:15:16,990
But this is something different.

217
00:15:17,530 --> 00:15:23,770
This is the username and password that will actually be used in the connection string text that we include

218
00:15:23,770 --> 00:15:24,520
in our code.

219
00:15:25,000 --> 00:15:26,920
So go ahead and make up a username.

220
00:15:27,400 --> 00:15:30,790
I will choose to do app user.

221
00:15:31,000 --> 00:15:32,420
OK, and then choose a password.

222
00:15:32,890 --> 00:15:37,510
Make sure you choose something you can remember or write it down because we are going to need this password

223
00:15:37,510 --> 00:15:39,340
again in just a minute or two.

224
00:15:40,410 --> 00:15:43,950
OK, and then finally, click this create MongoDB user button.

225
00:15:44,820 --> 00:15:45,270
Cool.

226
00:15:45,300 --> 00:15:48,570
Now we can click this choose a connection method button down here.

227
00:15:49,980 --> 00:15:51,660
It gives us a few different options.

228
00:15:51,930 --> 00:15:56,460
We are interested in this second option that says, connect your application.

229
00:15:56,820 --> 00:15:59,310
You can see it reads Get a connection string.

230
00:15:59,550 --> 00:16:01,770
And that's exactly what we are interested in.

231
00:16:02,280 --> 00:16:03,450
So go ahead and click on that.

232
00:16:04,140 --> 00:16:08,340
By default, you can see the driver is set to no, which is perfect.

233
00:16:08,550 --> 00:16:10,290
That's our development environment.

234
00:16:10,710 --> 00:16:15,420
If for some reason your driver is not set to it, be sure to set it to node OK.

235
00:16:15,420 --> 00:16:16,230
And below that.

236
00:16:16,590 --> 00:16:18,610
This is what we've been looking for.

237
00:16:19,020 --> 00:16:21,750
This is the magical connection string.

238
00:16:22,200 --> 00:16:27,150
We just want to copy and paste this into our text editing program so you can see there's this convenient

239
00:16:27,150 --> 00:16:28,230
copy button here.

240
00:16:28,230 --> 00:16:30,420
So click that copy it into your clipboard.

241
00:16:30,810 --> 00:16:32,880
And now let's just jump into our text editor.

242
00:16:33,090 --> 00:16:36,750
Well, in between those empty quotes, paste in your clipboard.

243
00:16:37,200 --> 00:16:38,810
We're not quite done yet, though.

244
00:16:38,820 --> 00:16:44,190
We need to fill in a few details in this connection stream because you'll see that it does list your

245
00:16:44,190 --> 00:16:47,910
username that you just chose, but it does not list your password.

246
00:16:48,300 --> 00:16:52,980
Now, not only do you need to replace the word password with your actual password, but you also need

247
00:16:52,980 --> 00:16:58,170
to get rid of the less than symbol right before it and the greater than symbol right after it.

248
00:16:58,710 --> 00:17:04,680
So replace this entire selection that I have highlighted here with your actual password.

249
00:17:05,430 --> 00:17:11,730
And again, this is the password that you just chose about 30 seconds ago, not your MongoDB Atlas account

250
00:17:11,730 --> 00:17:12,390
password.

251
00:17:12,720 --> 00:17:17,190
OK, for our final step, we need to look at the very end of this line of code.

252
00:17:17,550 --> 00:17:20,700
So at the very end we see you, retry rights equals true.

253
00:17:20,700 --> 00:17:26,610
But right before that we see a question mark and right before that we see the word test instead of the

254
00:17:26,610 --> 00:17:27,580
word test.

255
00:17:27,600 --> 00:17:31,620
This is where we can include which database we want to work with.

256
00:17:31,830 --> 00:17:40,200
So really quick do this with me back in MongoDB Atlas from the main overview screen, click on collections.

257
00:17:41,620 --> 00:17:46,810
You'll remember in a previous lesson, we created this database named just a test.

258
00:17:47,200 --> 00:17:47,950
And that's fine.

259
00:17:47,950 --> 00:17:54,070
But right now, let's create a new separate database just for our To-Do application.

260
00:17:55,060 --> 00:17:57,760
So go ahead and click this create database button.

261
00:17:59,060 --> 00:18:05,040
For the database name, let's call it to do app and for the name of the first collection.

262
00:18:05,060 --> 00:18:09,710
Let's go with items, then let's go ahead and click the Create button.

263
00:18:11,690 --> 00:18:15,170
Awesome, we now have a new database just for our application.

264
00:18:15,860 --> 00:18:21,650
Now back in our code at the end of this connection string instead of the word test here, get rid of

265
00:18:21,650 --> 00:18:25,930
test and just type in whatever database name you just chose.

266
00:18:25,940 --> 00:18:28,220
In my case, I chose to do app.

267
00:18:29,030 --> 00:18:29,600
Awesome.

268
00:18:29,600 --> 00:18:36,110
At this point, we are ready to save this file and test it out as soon as you save jumped down into

269
00:18:36,110 --> 00:18:37,100
your command line.

270
00:18:37,100 --> 00:18:42,140
And let's launch our app by running npm run watch.

271
00:18:43,130 --> 00:18:43,850
Press Enter.

272
00:18:44,450 --> 00:18:49,490
OK, let's jump over to the web browser and let's visit local host 3000.

273
00:18:50,330 --> 00:18:51,380
And let's test it out.

274
00:18:51,380 --> 00:18:55,580
So in the form field, I will say buy grapes and then submit the form.

275
00:18:56,090 --> 00:18:57,330
Thanks for submitting the form.

276
00:18:57,350 --> 00:18:58,760
Now this is the moment of truth.

277
00:18:58,770 --> 00:19:02,330
We want to see if that was actually saved in the database.

278
00:19:02,810 --> 00:19:08,600
So in the Atlas tab from the collection screen, you can click on the arrow near that new database name

279
00:19:08,600 --> 00:19:10,130
to do app to expand it.

280
00:19:10,610 --> 00:19:12,890
And we can see it contains a collection named Items.

281
00:19:12,890 --> 00:19:14,840
Click on the items collection.

282
00:19:15,290 --> 00:19:15,800
Awesome.

283
00:19:15,800 --> 00:19:19,640
We see that the collection has one total documents, and there we can see it.

284
00:19:19,910 --> 00:19:24,350
It has a property name text, which is set to buy grapes.

285
00:19:24,890 --> 00:19:31,520
It may not seem like it, but what we just accomplished is a huge step forward for us as a developer

286
00:19:31,880 --> 00:19:33,710
looking ahead to our next lesson.

287
00:19:33,950 --> 00:19:41,660
We are going to learn how to read or load the existing items from the database and display them right

288
00:19:41,660 --> 00:19:43,910
here in our application, right?

289
00:19:43,910 --> 00:19:46,790
Because we just created an item named by grapes.

290
00:19:47,060 --> 00:19:49,400
So that should be appearing here in the list.

291
00:19:49,970 --> 00:19:52,580
Let's keep our momentum rolling, and I will see you then.
