WEBVTT
1
00:00:01.780 --> 00:00:02.710
Hello, everyone.

2
00:00:03.040 --> 00:00:08.440
In this lesson, we are going to work on saving posts into our database.

3
00:00:08.830 --> 00:00:15.010
So, for example, when the logged in user clicks on this create post button, we would want to save

4
00:00:15.010 --> 00:00:20.890
their title and body values for these fields into our database as a new document.

5
00:00:21.340 --> 00:00:24.940
Without further ado, let's jump into the action and make that happen.

6
00:00:25.360 --> 00:00:33.070
Our first step would be to dig into this create post SJS template and make sure that we are aware of

7
00:00:33.190 --> 00:00:35.940
where this form is submitting to.

8
00:00:36.430 --> 00:00:45.700
So in our text editor within our Views folder, let's open up, create dash post, dot SJS towards the

9
00:00:45.700 --> 00:00:46.020
top.

10
00:00:46.030 --> 00:00:53.260
We see this opening form tag and for its action, instead of this placeholder hash tag, let's set it

11
00:00:53.260 --> 00:00:57.220
to slash create dash post.

12
00:00:57.730 --> 00:01:02.710
Now you might be thinking, isn't this the same route that the user is currently visiting?

13
00:01:03.160 --> 00:01:07.450
Yes, it's the same string of text create dash post.

14
00:01:07.780 --> 00:01:14.110
But when the user is viewing this in their browser, that was a get request to that you are out.

15
00:01:14.620 --> 00:01:20.440
Whereas when this form submits, it's going to be a post request.

16
00:01:20.740 --> 00:01:25.390
As far as our server is concerned, those are two completely different requests.

17
00:01:25.720 --> 00:01:28.090
OK, let's go ahead and save this file.

18
00:01:28.300 --> 00:01:32.350
And now let's jump into our router and set up a route for this.

19
00:01:32.710 --> 00:01:37.510
So open up our router, not just file down here.

20
00:01:37.510 --> 00:01:40.360
We see this comment post related routes.

21
00:01:40.690 --> 00:01:44.620
So right below that we can just say router, top post.

22
00:01:45.310 --> 00:01:45.600
Right.

23
00:01:45.610 --> 00:01:52.030
This is a post request for the first argument, string of text, slash, create, dash post.

24
00:01:52.480 --> 00:01:56.680
And then for the second argument, let's begin by protecting this route.

25
00:01:56.860 --> 00:01:58.690
So you must be logged in.

26
00:01:59.110 --> 00:02:02.890
We can just recycle or leverage are must be logged in function.

27
00:02:03.760 --> 00:02:13.300
So user controller DOT must be logged in and then let's say comma and include another function that

28
00:02:13.300 --> 00:02:15.340
we would want to run this time.

29
00:02:15.340 --> 00:02:22.570
Let's look inside our post controller and in about ten seconds from now, we can create a function with

30
00:02:22.570 --> 00:02:24.400
the name of create.

31
00:02:24.790 --> 00:02:31.840
OK, let's save this file and now we better go create a function with this exact matching name of create.

32
00:02:32.350 --> 00:02:37.840
So within our controllers folder, let's jump in to the post controller.

33
00:02:39.430 --> 00:02:45.310
Down at the very bottom, let's add a new line and let's say exports dot create.

34
00:02:45.820 --> 00:02:51.760
Let's set that to equal a function within the parentheses for our function.

35
00:02:51.760 --> 00:02:56.110
Let's include parameters of request and response, OK?

36
00:02:56.110 --> 00:03:02.080
And now within the body of this function, we just want to store whatever values they typed into these

37
00:03:02.080 --> 00:03:08.140
fields, write the title and the body content and we want to store that in our database.

38
00:03:08.590 --> 00:03:16.150
However, remember that any sort of data management should really be done within our model, not within

39
00:03:16.150 --> 00:03:17.190
our controller.

40
00:03:17.650 --> 00:03:21.940
So right now, let's go create a post model.

41
00:03:22.510 --> 00:03:25.600
So within our models folder, I'm going to.

42
00:03:25.600 --> 00:03:28.510
Right click on that and choose a new file.

43
00:03:30.130 --> 00:03:36.430
Let's name this new file, uppercase P, let's name it post dot J.S..

44
00:03:38.040 --> 00:03:44.880
Let's temporarily leave this file empty and let's jump back into our post controller and up at the top,

45
00:03:44.880 --> 00:03:49.890
let's require in that model so let's say const uppercase post.

46
00:03:49.890 --> 00:03:50.150
Right.

47
00:03:50.160 --> 00:03:54.000
This is going to be our blueprint for creating post objects.

48
00:03:54.300 --> 00:03:59.970
So const post equals and then just require in a file path.

49
00:04:00.300 --> 00:04:04.710
So let's say dot, dot, slash to go up out of the controllers folder.

50
00:04:05.130 --> 00:04:10.370
Then we want to go into the models folder and its name is Uppercase Post.

51
00:04:10.920 --> 00:04:11.550
All right.

52
00:04:11.560 --> 00:04:13.350
And then we can leverage that.

53
00:04:13.860 --> 00:04:24.000
So within the body of our create function we could say let lowercase post equal a new instance of uppercase

54
00:04:24.000 --> 00:04:28.830
post or our blueprint or model for what a post should be.

55
00:04:29.430 --> 00:04:35.760
Within these parentheses, we would want to pass our blueprint request body, which will contain the

56
00:04:35.760 --> 00:04:38.070
form data that a visitor just submitted.

57
00:04:38.590 --> 00:04:45.990
OK, and then on a new line, we know that lowercase post is going to be an object and we haven't actually

58
00:04:45.990 --> 00:04:48.420
created any methods within our blueprint yet.

59
00:04:48.810 --> 00:04:55.770
But you can imagine that in just a couple of minutes we are going to create a method named create within

60
00:04:55.770 --> 00:04:56.340
our model.

61
00:04:57.010 --> 00:04:58.290
So let's call that here.

62
00:04:58.620 --> 00:05:04.780
And we could set this method up to return a promise and promises can either resolve or reject.

63
00:05:05.190 --> 00:05:12.600
So right after this, since it's going to return a promise, we can just say dot then dot catch, then

64
00:05:12.600 --> 00:05:13.440
we'll handle things.

65
00:05:13.440 --> 00:05:19.120
If the promise is successful or resolves, catch will handle things if it fails or rejects.

66
00:05:19.680 --> 00:05:25.620
So within both of these lists provide functions, function, parentheses, curly brackets do the same

67
00:05:25.620 --> 00:05:30.870
thing for sketch function, parentheses, curly brackets within our function.

68
00:05:30.870 --> 00:05:37.920
For then here, if a post was successfully created, what we would actually want to do is redirect the

69
00:05:37.920 --> 00:05:46.620
user to the new URL for that post and maybe have a green success flash message that says new post successfully

70
00:05:46.620 --> 00:05:47.250
created.

71
00:05:47.730 --> 00:05:50.010
But let's not get ahead of ourselves.

72
00:05:50.280 --> 00:05:52.680
We can set that up here when the time comes.

73
00:05:52.950 --> 00:05:56.670
For now, just as a test, let's just send back a response.

74
00:05:56.670 --> 00:06:01.110
So response dot send that says new post created.

75
00:06:01.830 --> 00:06:02.280
All right.

76
00:06:02.280 --> 00:06:04.260
Within the function for our catch.

77
00:06:04.800 --> 00:06:10.080
Well, we can imagine that when our promise rejects, it's going to reject back with an array of errors.

78
00:06:10.260 --> 00:06:15.840
So within these parentheses for our function, let's include a parameter, let's name it errors.

79
00:06:16.290 --> 00:06:21.950
And just for a temporary quick test within the body of the function, let's just say response stops

80
00:06:21.960 --> 00:06:23.570
and errors.

81
00:06:24.030 --> 00:06:24.420
All right.

82
00:06:24.420 --> 00:06:26.430
Now, let's go ahead and save this file.

83
00:06:26.640 --> 00:06:34.650
And now we better go make sure that our post model or post blueprint does indeed have a method named

84
00:06:34.650 --> 00:06:35.460
create.

85
00:06:35.790 --> 00:06:36.150
Right.

86
00:06:36.150 --> 00:06:38.110
And it better return a promise.

87
00:06:38.430 --> 00:06:43.980
So right now, let's jump into our uppercase P post JS model file.

88
00:06:44.310 --> 00:06:46.200
We've got a clean, empty slate.

89
00:06:46.410 --> 00:06:52.860
And let's begin by saying let uppercase post equal a function.

90
00:06:53.880 --> 00:06:57.030
And ultimately that's what we want this file to export.

91
00:06:57.360 --> 00:07:06.380
So at the very bottom, after that function, we can just say module dot exports equals uppercase post.

92
00:07:06.840 --> 00:07:12.870
OK, now when our controller uses this constructor function to create an object, remember, we are

93
00:07:12.870 --> 00:07:18.480
passing along request body, which is going to be the form data that was just submitted.

94
00:07:19.050 --> 00:07:25.740
So let's receive that incoming argument with a parameter within our parentheses here, let's say data

95
00:07:26.130 --> 00:07:28.050
and then within the body of our function.

96
00:07:28.290 --> 00:07:38.090
Let's store that data within a property on our object so we can say this data equals that incoming request

97
00:07:38.090 --> 00:07:39.030
dot body data.

98
00:07:39.540 --> 00:07:40.050
All right.

99
00:07:40.050 --> 00:07:47.040
Now, below this main constructor function, let's add a new line and let's create a method that any

100
00:07:47.040 --> 00:07:50.640
object created using this blueprint should have access to.

101
00:07:51.120 --> 00:07:59.610
So we can just say uppercase post dot, prototype dot and then we can make up method name, let's call

102
00:07:59.610 --> 00:08:00.420
it create.

103
00:08:01.260 --> 00:08:01.530
Right.

104
00:08:01.530 --> 00:08:03.600
Because that's what we referenced in our controller.

105
00:08:03.900 --> 00:08:05.940
So we better have a matching name here.

106
00:08:06.390 --> 00:08:08.460
Let's set that to equal a function.

107
00:08:09.990 --> 00:08:16.230
OK, and just like we did in our user model, we're probably also going to want to have methods named

108
00:08:16.470 --> 00:08:18.990
clean up and validate.

109
00:08:19.470 --> 00:08:25.410
So to save ourselves some typing, we can just copy and paste these three lines of code to create new

110
00:08:25.410 --> 00:08:26.070
methods.

111
00:08:26.490 --> 00:08:30.360
So copy that right above it, maybe just paste it in again.

112
00:08:31.440 --> 00:08:37.350
So let's have a function named Clean Up and then.

113
00:08:37.400 --> 00:08:42.860
Below that, let's paste in our clipboard again and let's have a method named Valide.

114
00:08:43.670 --> 00:08:50.120
All right, now it's within our create method where we would actually store a document in the database.

115
00:08:50.420 --> 00:08:56.970
But before we do that, we know that within this create method, we would want to call cleanup and validate.

116
00:08:57.380 --> 00:08:59.450
So let's spell those out right now.

117
00:08:59.480 --> 00:09:00.850
Let's start with clean up.

118
00:09:01.280 --> 00:09:09.310
Let's begin by making sure that both the title and the body content values are strings, right.

119
00:09:09.340 --> 00:09:12.290
We would not want to accept an array or an object.

120
00:09:12.500 --> 00:09:14.870
These values must be strings.

121
00:09:15.560 --> 00:09:17.240
So we then clean up.

122
00:09:17.240 --> 00:09:18.820
Let's write an if statement.

123
00:09:18.830 --> 00:09:27.060
So if parentheses curly brackets for our condition, let's say typeof and then let's pass that this

124
00:09:27.060 --> 00:09:28.910
dot data dot title.

125
00:09:29.360 --> 00:09:36.410
And let's say if that does not equal string, well, that would mean that it's set to something that

126
00:09:36.410 --> 00:09:38.120
we do not want to accept.

127
00:09:38.390 --> 00:09:41.560
So within the curly brackets, we could just overwrite that value.

128
00:09:41.570 --> 00:09:46.210
So say this data, that title now just equals an empty pair of quotes.

129
00:09:46.700 --> 00:09:51.980
Let's duplicate this line of code, so copy it and then right below it, paste it and let's just do

130
00:09:51.980 --> 00:09:54.050
the same thing for the body field.

131
00:09:54.440 --> 00:09:59.030
So change this the body and also change this to body.

132
00:09:59.890 --> 00:10:06.830
OK, also within our clean up function, let's make sure that the user didn't pass along any extra bogus

133
00:10:06.830 --> 00:10:08.710
properties in their form data.

134
00:10:09.230 --> 00:10:11.420
So within the same function, let's drop down.

135
00:10:11.600 --> 00:10:20.300
We can add a comment to ourselves to stay organized and say get rid of any bogus properties.

136
00:10:20.900 --> 00:10:28.670
And to do this I would just say this data equals an object and then just manually spell out which properties

137
00:10:28.670 --> 00:10:29.630
I wanted to have.

138
00:10:29.780 --> 00:10:35.030
So title should be this dated title comma.

139
00:10:35.030 --> 00:10:38.850
We should also have body and that should be this DOT data, not body.

140
00:10:39.500 --> 00:10:45.380
So now if the user tried to send along extra properties that we would not want to store in our database,

141
00:10:45.680 --> 00:10:48.410
we are essentially ignoring them or overriding them.

142
00:10:48.860 --> 00:10:49.150
Right.

143
00:10:49.160 --> 00:10:51.860
We are updating what this data should be.

144
00:10:52.370 --> 00:10:56.410
While we're at it, let's add another property named Created Date.

145
00:10:57.110 --> 00:10:57.380
Right.

146
00:10:57.390 --> 00:11:00.470
It would be nice to know the date that a post was created on.

147
00:11:00.470 --> 00:11:07.460
So we can say comma and we could just add a new property created date colon and we could just set its

148
00:11:07.460 --> 00:11:13.330
value to be a new instance of a date in JavaScript.

149
00:11:13.340 --> 00:11:17.750
There's a built in blueprint or constructor for date objects.

150
00:11:18.410 --> 00:11:24.430
So this will return a date object representing the current time when this code executes.

151
00:11:24.890 --> 00:11:30.260
That should be a useful piece of data to store in our database for this post while we're at it.

152
00:11:30.260 --> 00:11:37.010
Why don't we also run Trem on our title in body to ignore any empty spaces at the beginning or end of

153
00:11:37.040 --> 00:11:42.020
the values so we can say Trem do the same thing for body doctrine.

154
00:11:42.650 --> 00:11:44.890
OK, that takes care of cleanup for now.

155
00:11:45.170 --> 00:11:47.810
Now let's work on our validate function.

156
00:11:48.470 --> 00:11:55.610
Luckily for us, validating this data is going to be a lot simpler than our user registration situation.

157
00:11:56.030 --> 00:12:00.640
All we really need to do is make sure that neither of these fields are blank, right?

158
00:12:00.650 --> 00:12:05.090
We want to force the user to type something into both of these fields.

159
00:12:05.450 --> 00:12:16.310
So we then validate we can just say if parentheses curly brackets, if this data title equals just nothing

160
00:12:16.310 --> 00:12:22.220
or an empty pair of quotes, well, then within the curly brackets, we would want to add an error message.

161
00:12:22.760 --> 00:12:28.880
Before we do that, though, up in our constructor function, way up at the very top of this file,

162
00:12:29.240 --> 00:12:36.650
right below line number two, let's say this DOT errors equals an empty array.

163
00:12:36.650 --> 00:12:43.490
So square brackets, OK, now if there are validation problems, we can just push a message onto this

164
00:12:43.490 --> 00:12:46.520
array, go back down and validate.

165
00:12:47.000 --> 00:12:50.660
If there is no title, let's push on an error.

166
00:12:50.660 --> 00:12:53.210
So this dot errors dot push.

167
00:12:53.660 --> 00:13:00.410
Let's give it a message of you must provide a title to save a bit of typing.

168
00:13:00.410 --> 00:13:03.870
Let's just duplicate this line of code, so copy it right below it.

169
00:13:03.890 --> 00:13:05.600
Paste on this line.

170
00:13:05.600 --> 00:13:15.050
Let's say if this data body is empty, then let's push a message that says you must provide post content.

171
00:13:15.800 --> 00:13:19.700
OK, for now that's all we need to accomplish within our validate function.

172
00:13:20.030 --> 00:13:23.300
Now let's actually set up our create function.

173
00:13:23.840 --> 00:13:25.520
So within the body of create.

174
00:13:25.520 --> 00:13:31.250
Remember, we want this function to return a promise because remember, we need to leverage this from

175
00:13:31.250 --> 00:13:33.080
within our post controller.

176
00:13:33.680 --> 00:13:37.010
So return a new instance of.

177
00:13:37.070 --> 00:13:43.970
A promise within the promise parentheses, we give it a function, let's use an arrow function, so

178
00:13:43.970 --> 00:13:51.800
parentheses and then arrow symbol and then curly brackets within the parentheses for this arrow function,

179
00:13:51.800 --> 00:13:57.680
let's include two very important parameters of resolve and reject.

180
00:13:58.730 --> 00:13:59.240
All right.

181
00:13:59.240 --> 00:14:04.340
Within this function, let's call our cleanup methods of this clean up.

182
00:14:04.880 --> 00:14:09.370
After that, let's call our validate functions this dot validate.

183
00:14:09.910 --> 00:14:14.690
OK, now after that, let's check to see if our errors array is empty or not.

184
00:14:14.990 --> 00:14:21.650
So we can say if parentheses curly brackets, let's drop down inside those brackets and right after

185
00:14:21.650 --> 00:14:27.290
the closing if bracket let's add and else block as well for our if condition.

186
00:14:27.290 --> 00:14:32.840
Let's say if this dot errors dot length.

187
00:14:33.510 --> 00:14:38.440
So this would evaluate to true as long as our array has more than zero items in it.

188
00:14:38.810 --> 00:14:43.130
So to check for the opposite of that, we can just place an exclamation right here.

189
00:14:43.940 --> 00:14:50.150
So now we're essentially saying if that errors array is empty, well then this is where we would want

190
00:14:50.150 --> 00:14:52.640
to store a new document in the database.

191
00:14:52.910 --> 00:15:01.340
So let's write a comment here to ourselves and say save post into database, OK, but then within the

192
00:15:01.340 --> 00:15:04.600
else block, that would mean that there are validation errors.

193
00:15:04.880 --> 00:15:11.180
So here we would just want to reject and within the parentheses we could just reject with the value

194
00:15:11.180 --> 00:15:13.470
of this DOT errors.

195
00:15:14.270 --> 00:15:14.840
All right.

196
00:15:14.840 --> 00:15:16.910
Now let's circle back to the if block.

197
00:15:17.360 --> 00:15:21.700
If there are no validation errors, we want to save this post into the database.

198
00:15:22.070 --> 00:15:28.940
However, so far, this file does not have any way of accessing our database to fix that.

199
00:15:28.940 --> 00:15:34.760
Let's just go up to the very top of this file and up on line number one right before that, let's add

200
00:15:34.760 --> 00:15:43.730
a new line and let's say const and then we can make up a name, let's call it posts collection and then

201
00:15:43.730 --> 00:15:45.400
let's just set that to equal.

202
00:15:45.680 --> 00:15:52.070
And now you might remember that we've already created a file, a reuseable file that will pull in our

203
00:15:52.070 --> 00:15:56.330
database so we can just say require give it a file path.

204
00:15:56.330 --> 00:16:02.090
So dot, dot, slash to move up out of the models folder into the root folder.

205
00:16:02.240 --> 00:16:04.390
And we named the file DB.

206
00:16:04.760 --> 00:16:07.940
So this file exports the Mongo DB client.

207
00:16:08.210 --> 00:16:12.920
So then we'd want to work with that and call dot DB to get the actual database.

208
00:16:13.340 --> 00:16:19.460
And then after that we'd want to say dot collection and the collection that we want to work with is

209
00:16:19.760 --> 00:16:20.690
posts.

210
00:16:21.210 --> 00:16:23.750
OK, now let's just go leverage this.

211
00:16:24.140 --> 00:16:30.800
So back down within our create promise right below this save post in the database comment, let's say

212
00:16:31.370 --> 00:16:35.210
posts collection, let's look inside it.

213
00:16:35.210 --> 00:16:41.930
And we're interested in the CRUD operation named insert one within the parentheses.

214
00:16:41.930 --> 00:16:46.580
We just passed this an object that we would want to store as a document in our database.

215
00:16:46.940 --> 00:16:53.000
In this case, that would just be this DOT data, OK, not to complete this promise right below this

216
00:16:53.000 --> 00:16:54.380
let's call resolve.

217
00:16:55.430 --> 00:16:59.090
However, this is an asynchronous operation.

218
00:16:59.420 --> 00:17:04.910
We have no idea how long it's going to take to actually store that in the database.

219
00:17:05.270 --> 00:17:12.500
Now we know that the Mongo DB methods return promises so we could either use the then catch syntax or

220
00:17:12.500 --> 00:17:13.850
the async awaked.

221
00:17:14.240 --> 00:17:20.120
Now, in a situation where there's more going on and I'm trying to coordinate multiple things, I do

222
00:17:20.120 --> 00:17:21.680
prefer async await.

223
00:17:22.100 --> 00:17:27.410
But in a really simple situation like this where I'm just waiting for one thing to finish and then I

224
00:17:27.410 --> 00:17:32.600
want to do one more thing, I actually think then catch feels cleaner.

225
00:17:32.900 --> 00:17:33.740
So let's do this.

226
00:17:33.740 --> 00:17:35.390
Let's get rid of resolve right here.

227
00:17:36.380 --> 00:17:38.330
And we know that this will return a promise.

228
00:17:38.330 --> 00:17:43.070
So at the end of this line, we can just say dot then dot catch.

229
00:17:43.520 --> 00:17:47.150
Let's add arrow functions inside both sets of parentheses here.

230
00:17:47.870 --> 00:17:51.350
So parentheses, arrow symbol, curly brackets.

231
00:17:51.830 --> 00:17:57.050
Let's do the same thing for catch parentheses, arrow symbol, curly brackets.

232
00:17:57.530 --> 00:17:58.070
All right.

233
00:17:58.070 --> 00:18:04.100
Now, if Mongo was successful in adding that new document, let's just call resolve.

234
00:18:05.210 --> 00:18:09.680
But if Mongo runs into an error of some sort, why don't we just do this?

235
00:18:09.680 --> 00:18:15.650
Let's push an error message on to our array of errors so this errors push.

236
00:18:15.650 --> 00:18:22.700
And let's just say please try again later, because if this situation ever happens, the problem has

237
00:18:22.700 --> 00:18:25.700
nothing to do with the data that the user just entered.

238
00:18:25.910 --> 00:18:30.950
And it has everything to do with some sort of server problem or database connection problem.

239
00:18:31.320 --> 00:18:36.650
OK, now, after we've pushed on that error right below that line, let's just call reject.

240
00:18:37.120 --> 00:18:44.920
And rejected the value of this DOT errors at this point, let's go ahead and save this file and test

241
00:18:44.920 --> 00:18:45.290
it out.

242
00:18:45.730 --> 00:18:52.330
So back in the browser, be sure to refresh the create post screen so that it's submitting to the Eurail

243
00:18:52.330 --> 00:18:55.150
that we would expect for the title.

244
00:18:55.180 --> 00:18:59.500
I will say my first post for the content.

245
00:18:59.500 --> 00:19:05.260
I will say this is the greatest sentence ever written.

246
00:19:06.280 --> 00:19:07.900
This is another sentence.

247
00:19:08.710 --> 00:19:10.260
OK, let's go ahead and submit that.

248
00:19:10.270 --> 00:19:11.730
So save new post.

249
00:19:12.370 --> 00:19:15.250
We see the simple response of new post created.

250
00:19:15.580 --> 00:19:21.000
And most importantly, let's go check our database within Mongo DB Atlas.

251
00:19:21.250 --> 00:19:23.740
Here's my complex app database.

252
00:19:23.950 --> 00:19:27.970
Previously it only had collections of sessions and users.

253
00:19:27.970 --> 00:19:35.260
But if I click this refresh button here, cool, we see a new collection named Posts and if I click

254
00:19:35.260 --> 00:19:42.420
on that, there's one document and there we see the title and body values that we just submitted.

255
00:19:42.910 --> 00:19:45.240
We also see the created date fields.

256
00:19:45.640 --> 00:19:52.990
However, there's one very important thing missing from this document, and that is the author of this

257
00:19:52.990 --> 00:19:53.710
document.
