1
00:00:01,790 --> 00:00:02,870
Hello, everyone.

2
00:00:03,200 --> 00:00:09,020
In this lesson, we are going to continue working on our registration form to be more specific.

3
00:00:09,050 --> 00:00:14,960
We're going to set up the validation rule that checks to see if the user name that the user has typed

4
00:00:14,960 --> 00:00:17,510
in has already been taken or not.

5
00:00:18,080 --> 00:00:23,090
If they've typed in a name that already exists, then they should see a message here, letting them

6
00:00:23,090 --> 00:00:24,880
know that that name is not available.

7
00:00:25,430 --> 00:00:29,480
So without further ado, let me show you how I would set that up.

8
00:00:30,050 --> 00:00:38,000
Let's jump into our text editor and make sure that you've opened up the registration form JS file and

9
00:00:38,000 --> 00:00:43,280
we're going to begin by importing the NPM package named Axios.

10
00:00:43,640 --> 00:00:49,380
Axios will make it very easy to send off an asynchronous request to our server.

11
00:00:49,790 --> 00:01:00,860
So up at the very top, even above our export default line, let's say import axios from and then just

12
00:01:00,860 --> 00:01:02,840
quotes Axios.

13
00:01:03,410 --> 00:01:09,230
We already used the axios package during our live search feature, so we do not need to worry about

14
00:01:09,230 --> 00:01:12,380
going to the command line and running NPM install.

15
00:01:12,980 --> 00:01:15,320
OK, now let's go leverage Axios.

16
00:01:15,560 --> 00:01:19,950
I want you to find the method that is named username after delay.

17
00:01:20,840 --> 00:01:21,470
Here it is.

18
00:01:21,650 --> 00:01:26,690
Currently, the only thing we're doing in this method is checking to see if the username is less than

19
00:01:26,690 --> 00:01:30,950
three characters long now within this username after delay method.

20
00:01:30,950 --> 00:01:37,610
But after this existing, if Jack is right below that, let's set up a new if statement.

21
00:01:37,620 --> 00:01:44,180
So if parentheses curly brackets, I would only want to send off a request to our server if there are

22
00:01:44,180 --> 00:01:47,250
no other problems with this potential user name.

23
00:01:47,870 --> 00:01:54,560
What I'm getting at is if the user has typed something in that has invalid characters, then there's

24
00:01:54,560 --> 00:01:58,400
no point in sending a request to the server to see if that username exists.

25
00:01:59,000 --> 00:02:01,430
We know for a fact that it doesn't exist.

26
00:02:02,030 --> 00:02:11,300
So for our new IF statement for the condition, I would just say only if this dot username dot errors

27
00:02:11,660 --> 00:02:14,960
and then I would check for the opposite of that with an exclamation here.

28
00:02:16,340 --> 00:02:23,450
So only if there are no problems with the current value, then within these if curly brackets, I would

29
00:02:23,450 --> 00:02:30,050
say this axios dot post right after the parentheses for post.

30
00:02:30,050 --> 00:02:35,930
Let's include a dot then and right after those parentheses let's include a dot catch.

31
00:02:36,800 --> 00:02:44,570
Let's provide arrow functions within both the then and catch parentheses parentheses arrow symbol.

32
00:02:44,570 --> 00:02:47,210
Curly brackets do the same thing for catch.

33
00:02:47,720 --> 00:02:51,200
So parentheses arrow symbol curly brackets.

34
00:02:51,560 --> 00:02:55,400
OK, and now let's shift our focus to the parentheses right after post.

35
00:02:56,180 --> 00:02:58,700
Within these parentheses we give it to arguments.

36
00:02:58,700 --> 00:03:05,800
So A comma B and the first argument is the you are rel that we want to send a request to.

37
00:03:06,320 --> 00:03:12,260
So instead of the placeholder a let's say quotes and then let's say forward slash for the root of our

38
00:03:12,260 --> 00:03:16,070
server and then this Utrillo root does not exist yet.

39
00:03:16,280 --> 00:03:18,050
We can set it up in just a moment or two.

40
00:03:18,050 --> 00:03:23,170
But let's say does username exist.

41
00:03:23,720 --> 00:03:31,130
OK then for the second argument instead of the B placeholder we provide an object so curly brackets

42
00:03:31,460 --> 00:03:34,490
and this is any data we want to send along to the server.

43
00:03:34,850 --> 00:03:36,770
So let's give this object a property.

44
00:03:36,770 --> 00:03:40,520
We could name it anything, but let's name it username Colon.

45
00:03:40,880 --> 00:03:45,110
And then I would just grab the current value of whatever the user is typed into the field.

46
00:03:45,500 --> 00:03:49,220
So this dot username, dot value.

47
00:03:50,030 --> 00:03:50,660
All right.

48
00:03:50,660 --> 00:03:55,100
And then you can imagine that on our server we will set up a root to match this.

49
00:03:55,100 --> 00:04:03,190
You Ã³rale and the server will send back a response of either true or false based on the current username.

50
00:04:03,590 --> 00:04:09,800
Now, once Axios receives that response from the server, then our function within the then area will

51
00:04:09,800 --> 00:04:10,190
run.

52
00:04:10,580 --> 00:04:18,080
So within the parentheses for our then function, let's say response, OK, and then within the body

53
00:04:18,080 --> 00:04:22,430
of that then function, let's just set up an if statement.

54
00:04:22,520 --> 00:04:30,890
So if parentheses curly brackets right after the closing, if let's also add an else block gain for

55
00:04:30,890 --> 00:04:35,600
the if condition, let's say if response data.

56
00:04:36,500 --> 00:04:36,800
Right.

57
00:04:36,800 --> 00:04:41,540
Because this does username exist, Routt is going to respond with true or false.

58
00:04:41,850 --> 00:04:46,970
So if it responds with true, that means the username already exists.

59
00:04:47,480 --> 00:04:53,720
So if that username does already exist, then within these curly brackets we would want to show that

60
00:04:53,720 --> 00:04:55,730
red validation error message.

61
00:04:56,390 --> 00:05:01,160
So we could just say this dot show validation error.

62
00:05:02,210 --> 00:05:08,630
Give it to arguments, the first would be the element in question, so this username, comma, and then

63
00:05:08,630 --> 00:05:15,350
a message, let's say that username is already taken still within the if block.

64
00:05:15,360 --> 00:05:22,010
Let's drop down one more line and let's set a property of this username.

65
00:05:22,490 --> 00:05:27,460
DOT is unique and let's set this to false.

66
00:05:28,340 --> 00:05:30,100
This will come into play later.

67
00:05:30,410 --> 00:05:32,090
Ultimately, a bit later on.

68
00:05:32,090 --> 00:05:38,530
We will not want to let the user submit the overall form unless we are happy with all of the values.

69
00:05:38,930 --> 00:05:39,200
Right.

70
00:05:39,200 --> 00:05:45,260
So this code's only going to run if there's a problem, if that username is already taken and then within

71
00:05:45,260 --> 00:05:48,290
the else block, this would mean the username is available.

72
00:05:48,740 --> 00:05:58,720
So within the else block, let's just say this dot username dot is unique and set it to true, OK.

73
00:05:58,730 --> 00:06:04,640
And then finally within the function for catch, well this would only ever run if there's some sort

74
00:06:04,640 --> 00:06:06,940
of unexpected technical difficulty.

75
00:06:07,430 --> 00:06:13,670
So for now I would probably just log a message out to the console and say, please try again later.

76
00:06:14,330 --> 00:06:17,480
OK, at this point, let's go ahead and save this.

77
00:06:17,810 --> 00:06:24,050
And now let's set up a route within our server side or within express that matches this U.

78
00:06:24,110 --> 00:06:26,720
URL right forward slash.

79
00:06:26,990 --> 00:06:28,730
Does user name exist?

80
00:06:29,900 --> 00:06:37,100
So within the root of your project folder, look for the file that is named Rouda J.S..

81
00:06:39,080 --> 00:06:45,740
Here we see a comment that says user related routs, so maybe at the end of that section we could say

82
00:06:46,310 --> 00:06:52,400
router dot post for the first argument quotes and then slash.

83
00:06:52,850 --> 00:06:58,100
Does user name exist after the quotes?

84
00:06:58,100 --> 00:06:59,330
Let's include a comma.

85
00:06:59,330 --> 00:07:02,510
And the second argument is a function that we'd want to run.

86
00:07:02,960 --> 00:07:06,440
This function doesn't exist yet, but we can create it in just a moment.

87
00:07:06,470 --> 00:07:13,940
Let's say user controller DOT, does user name exist?

88
00:07:14,770 --> 00:07:21,140
OK, let's go ahead and save this file and now we better jump into our user controller and create this

89
00:07:21,140 --> 00:07:21,620
method.

90
00:07:22,080 --> 00:07:28,280
So within your project controllers folder, let's look for the file that is named user controller.

91
00:07:29,330 --> 00:07:32,270
Within this file, we want to create a new function.

92
00:07:32,600 --> 00:07:33,870
It doesn't matter where.

93
00:07:33,980 --> 00:07:45,470
Maybe up at the top here we can just say exports DOT does user name exist and set that to equal a function

94
00:07:46,460 --> 00:07:49,160
and then let's begin leveraging our user model.

95
00:07:49,160 --> 00:07:59,360
So uppercase user and we actually already have a method on the model named find by user name.

96
00:07:59,990 --> 00:08:01,280
Within these parentheses.

97
00:08:01,280 --> 00:08:07,100
We would just pass it the user name that we're interested in in order to do that within our overall

98
00:08:07,100 --> 00:08:13,000
functions parentheses, we'd want to include parameters of request and response.

99
00:08:13,880 --> 00:08:14,330
All right.

100
00:08:14,340 --> 00:08:21,050
And then in the find by username parentheses, we can just say request body dot user name.

101
00:08:21,500 --> 00:08:21,790
Right.

102
00:08:21,800 --> 00:08:24,930
That's what the axios request is sending over to the server.

103
00:08:25,490 --> 00:08:25,910
All right.

104
00:08:25,910 --> 00:08:29,350
Now, this method on our model is going to return a promise.

105
00:08:29,990 --> 00:08:36,290
So at the end of this line, after the parentheses, let's just say dot then and then at the end of

106
00:08:36,290 --> 00:08:38,150
that dot catch.

107
00:08:38,960 --> 00:08:44,720
Now, to refresh your memory on the way that we set up this promise, it's going to resolve with the

108
00:08:44,720 --> 00:08:45,800
user document.

109
00:08:45,800 --> 00:08:52,190
If it finds one, if it doesn't find a user document by that username, it's just going to reject.

110
00:08:52,550 --> 00:08:59,030
Now, remember, we want this does user name exist function to respond with the value of either true

111
00:08:59,180 --> 00:09:00,050
or false?

112
00:09:00,560 --> 00:09:04,280
So here's what I would do within the then parentheses.

113
00:09:04,280 --> 00:09:10,550
Let's give it a function function, parentheses, curly brackets within the body of this function.

114
00:09:10,550 --> 00:09:15,920
I would just say response JSON with the value of true.

115
00:09:16,640 --> 00:09:20,060
Right, so that's the data that our axios request will receive.

116
00:09:20,420 --> 00:09:26,600
And then within the catch parentheses I would provide a function, function, parentheses, curly brackets

117
00:09:26,930 --> 00:09:32,360
and then I would just say response JSON with a value of false.

118
00:09:33,200 --> 00:09:36,530
OK, let's go ahead and save this and test it out.

119
00:09:36,980 --> 00:09:39,200
So be sure to refresh on the front end.

120
00:09:40,040 --> 00:09:44,960
And if I choose a username of unique that should still be available.

121
00:09:45,530 --> 00:09:51,440
However, if I try to sign up with the user name of Brad and then wait three thousand milliseconds,

122
00:09:52,550 --> 00:09:53,120
perfect.

123
00:09:53,120 --> 00:09:57,380
I see that username is already taken at this point.

124
00:09:57,380 --> 00:09:59,500
We are done with the user name field.

125
00:09:59,780 --> 00:10:02,450
Now let's focus on the email field.

126
00:10:03,080 --> 00:10:05,840
So to start working on that, back in our text editor.

127
00:10:06,800 --> 00:10:12,380
Let's jump back into registration form, Gorgias, and scroll up to the very top.

128
00:10:13,070 --> 00:10:19,310
Let's look within our constructor and right below these lines that begin with this DOT username.

129
00:10:19,760 --> 00:10:27,170
Let's just drop down and add a new line and say this dot email equals and then we will select that element,

130
00:10:27,380 --> 00:10:33,410
document dot query selector and it has an ID.

131
00:10:33,410 --> 00:10:38,690
So hash tag of email, Dasch register right below that.

132
00:10:38,690 --> 00:10:46,040
Let's also say this dot e-mail dot previous value equals an empty pair of quotes.

133
00:10:46,700 --> 00:10:51,170
OK, now let's begin listening for key presses on that email field.

134
00:10:51,560 --> 00:10:58,400
So within our events area we can actually just copy and paste these three lines of code that are listening

135
00:10:58,400 --> 00:10:59,570
for the username field.

136
00:11:00,200 --> 00:11:04,790
I will select those, copy it and then right below it, still within the event's method.

137
00:11:04,790 --> 00:11:07,490
Just paste in in the new copy.

138
00:11:07,490 --> 00:11:11,210
Just change this username to this email.

139
00:11:11,870 --> 00:11:19,640
And then when we call the is different, let's change the first argument to this DOT email and then

140
00:11:19,640 --> 00:11:24,500
let's change the handler to email handler instead of user name handler.

141
00:11:25,170 --> 00:11:28,160
OK, now let's go find the username handler method.

142
00:11:28,550 --> 00:11:29,150
Here it is.

143
00:11:29,270 --> 00:11:33,170
And we can just duplicate this and name the new copy email handler.

144
00:11:33,620 --> 00:11:35,330
So I would just select all of this.

145
00:11:35,870 --> 00:11:36,470
Copy it.

146
00:11:37,460 --> 00:11:45,350
Maybe right below this, just pasted in, let's change the name to email handler and then let's change

147
00:11:45,350 --> 00:11:51,840
the first line to this email errors when it comes to the email field.

148
00:11:51,860 --> 00:11:55,850
We actually don't need to run any validation checks immediately.

149
00:11:56,360 --> 00:12:02,090
Right, because if someone begins typing in an email address well after their first few keystrokes,

150
00:12:02,330 --> 00:12:07,510
clearly that's not going to look like a valid email address with the at symbol and a domain.

151
00:12:07,820 --> 00:12:12,460
So we would want to give them a chance to type before we evaluate what they've typed in.

152
00:12:13,100 --> 00:12:17,150
So within our email handler, we can get rid of the immediately function call.

153
00:12:18,720 --> 00:12:26,400
Let's keep the clear time out, but let's change this to this dot e-mail dot timer and then let's update

154
00:12:26,400 --> 00:12:27,000
this as well.

155
00:12:27,030 --> 00:12:32,730
This email timer equals and then let's just change the function it calls after the delay.

156
00:12:33,150 --> 00:12:37,170
Change this from user name after delay to email after delay.

157
00:12:37,680 --> 00:12:43,080
And since at this point we know that the after delay functionality is working, we no longer need to

158
00:12:43,080 --> 00:12:45,240
leave these at three thousand milliseconds.

159
00:12:45,640 --> 00:12:49,390
So I would change both of these to maybe eight hundred milliseconds.

160
00:12:49,980 --> 00:12:55,510
OK, now at this point, let's go create a method with this matching name, email after delay.

161
00:12:56,490 --> 00:13:04,280
So I would just create a new method, email after delay, parentheses, curly brackets within this method.

162
00:13:04,290 --> 00:13:06,090
Let's set up an if statement.

163
00:13:06,100 --> 00:13:13,680
So if parentheses curly brackets for our condition, let's check to see if the format looks nothing

164
00:13:13,950 --> 00:13:15,350
like an email address.

165
00:13:15,690 --> 00:13:18,600
I would actually use a regular expression for this.

166
00:13:19,230 --> 00:13:22,770
So this is not going to be super educational, but typed this out with me.

167
00:13:23,220 --> 00:13:25,650
Forward slash carrot symbols.

168
00:13:25,650 --> 00:13:29,490
So hold down shift and press six backslash.

169
00:13:29,490 --> 00:13:40,250
Not a forward slash but a backslash uppercase s plus at symbol backslash s.

170
00:13:40,590 --> 00:13:49,130
And again, that's an uppercase s not a lowercase plus symbol dollar sign forward slash.

171
00:13:49,830 --> 00:13:55,730
So from the opening forward slash to the closing forward slash, this is a regular expression.

172
00:13:55,950 --> 00:13:56,810
Now we can use it.

173
00:13:56,810 --> 00:14:03,780
So at the end of it we can say dot test and we would just test it against the current value in the email

174
00:14:03,780 --> 00:14:04,250
field.

175
00:14:04,830 --> 00:14:09,140
So within these parentheses for test we'd say this email dot value.

176
00:14:09,930 --> 00:14:17,520
So this will evaluate the true if there is text and then the symbol and then additional text.

177
00:14:18,060 --> 00:14:22,560
Since we're checking for a problem, we would actually want to check for the opposite of this.

178
00:14:22,920 --> 00:14:29,160
So right before the opening forward slash, I would include an exclamation, OK, and then within the

179
00:14:29,160 --> 00:14:36,210
curly brackets for this statement, I would just say this dot show validation error.

180
00:14:36,720 --> 00:14:38,100
We give this two arguments.

181
00:14:38,100 --> 00:14:40,070
The first is the element in question.

182
00:14:40,080 --> 00:14:46,320
So this email comma, the second argument is just the message, the quotes.

183
00:14:46,860 --> 00:14:51,720
You must provide a valid email address.

184
00:14:52,420 --> 00:14:56,010
OK, if you need to pause the video to type all of this out, that's OK.

185
00:14:56,310 --> 00:14:59,930
But let's go ahead and save this and test it out.

186
00:15:00,390 --> 00:15:06,090
So if I refresh on the front end, as long as I type at a reasonable speed and don't wait eight hundred

187
00:15:06,090 --> 00:15:13,140
milliseconds in between keystrokes and I say Brad at Brad dot com, we don't see any error messages.

188
00:15:13,470 --> 00:15:19,950
But if I get rid of the at symbol so that this no longer looks like an email address at all and then

189
00:15:19,950 --> 00:15:22,710
if we wait eight hundred milliseconds perfect.

190
00:15:23,220 --> 00:15:26,010
You must provide a valid email address.

191
00:15:26,790 --> 00:15:33,450
OK, now next, assuming that they have entered a valid email address, we would want to check our server

192
00:15:33,450 --> 00:15:36,640
to see if that email address has already been used or not.

193
00:15:37,200 --> 00:15:42,210
So to set that up, let's do this within our email after delay method.

194
00:15:42,330 --> 00:15:46,330
But after this if statement, let's just set up a new if statement.

195
00:15:46,350 --> 00:15:56,370
So if parentheses curly brackets for the condition, let's say only if exclamation this email dot errors.

196
00:15:57,030 --> 00:16:00,000
In other words, only if the email address is valid.

197
00:16:00,000 --> 00:16:04,940
Only if there are no problems, then we would want to send off a request to the server.

198
00:16:05,490 --> 00:16:10,110
So within the IF statement I would just say axios dot post.

199
00:16:10,650 --> 00:16:17,730
At the end of that, let's set up the dot then dot catch, let's set up arrow functions within both

200
00:16:17,730 --> 00:16:21,840
then and catch the parentheses arrow symbol.

201
00:16:21,840 --> 00:16:27,720
Curly brackets do the same thing for catch parentheses arrow symbol curly brackets.

202
00:16:28,200 --> 00:16:32,820
OK now within the parentheses for post we give that to arguments.

203
00:16:33,060 --> 00:16:41,370
The first is the you are l that we want to send a request to quotes forward slash let's say does email

204
00:16:41,550 --> 00:16:46,980
exist or in other words, is there already a user using this email address.

205
00:16:47,410 --> 00:16:49,620
OK then comma after those quotes.

206
00:16:49,620 --> 00:16:54,090
And the second argument is an object that we want to send to the server.

207
00:16:54,510 --> 00:17:02,700
So let's give it just one property of email Colen with a value of this email value.

208
00:17:03,250 --> 00:17:09,210
OK, now you can imagine that we are going to set up a route in our express app that matches this and

209
00:17:09,210 --> 00:17:13,550
it will send back JSON response of either true or false.

210
00:17:14,130 --> 00:17:17,880
So within our then function parentheses we would want to receive.

211
00:17:18,100 --> 00:17:22,850
That response from the server, so within these parentheses, just say response.

212
00:17:23,440 --> 00:17:28,200
OK, then in the body of this arrow function, I would just write another if statement.

213
00:17:28,210 --> 00:17:36,190
So if parentheses curly brackets after the closing curly bracket, also add an else block and for the

214
00:17:36,190 --> 00:17:44,200
condition it would just be if response data, because this is just going to be either a value of true

215
00:17:44,200 --> 00:17:46,810
or false that the server responds with.

216
00:17:47,410 --> 00:17:50,470
Now remember, the question is, does email exist?

217
00:17:50,680 --> 00:17:56,380
So if this is true, that means a user has already used that email address and that's a problem.

218
00:17:56,770 --> 00:18:05,650
So within the if block, I would say this dot email dot is unique and I would set that to equal false.

219
00:18:06,070 --> 00:18:12,340
And then I would also say so new line this dot show validation error.

220
00:18:12,760 --> 00:18:13,820
Give that to arguments.

221
00:18:13,840 --> 00:18:21,400
The element in question is this dot email, comma, and then just give it an error message so that email

222
00:18:21,550 --> 00:18:24,100
is already being used.

223
00:18:24,730 --> 00:18:30,430
OK, but else if this is false, that means there is no user that's already using the email.

224
00:18:30,820 --> 00:18:39,280
So I would just set this email that is unique to true and then I would also hide any validation errors

225
00:18:39,490 --> 00:18:40,450
for this field.

226
00:18:40,480 --> 00:18:47,800
So this dot hide validation error and the element in question is this dot email.

227
00:18:48,340 --> 00:18:51,130
OK, finally, let's take care of the catch function.

228
00:18:51,520 --> 00:18:55,960
If this ever runs, that means there was some sort of unexpected technical difficulty.

229
00:18:56,320 --> 00:19:00,790
So I would just log to the console and say, please try again later.

230
00:19:01,600 --> 00:19:04,600
OK, at this point, let's go ahead and save this.

231
00:19:04,840 --> 00:19:10,270
And now we need to go into our express app router and add a root for slash.

232
00:19:10,270 --> 00:19:11,980
Does email exist?

233
00:19:12,760 --> 00:19:15,310
So jump into your rutabagas file.

234
00:19:15,970 --> 00:19:21,760
And within the commented area that says user related routes, right under this most recent route that

235
00:19:21,760 --> 00:19:26,650
we've created, we can just add a new line and let's say router dot post.

236
00:19:27,760 --> 00:19:36,500
First argument will be, does email exist after the quotes, comma, second argument is just a function.

237
00:19:36,520 --> 00:19:45,820
So let's say user controller and this function doesn't exist yet, but let's say does email exist?

238
00:19:46,480 --> 00:19:51,460
Let's save this and then jump into our user controller and create a function with this name.
