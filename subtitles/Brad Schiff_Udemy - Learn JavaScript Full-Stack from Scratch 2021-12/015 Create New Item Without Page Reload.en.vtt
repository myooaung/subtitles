WEBVTT
1
00:00:01.890 --> 00:00:02.880
Hello, everyone.

2
00:00:03.060 --> 00:00:08.130
In this lesson, we are going to improve the create feature of our application.

3
00:00:08.580 --> 00:00:15.870
In other words, we are going to write web browser based JavaScript to intercept the default behavior

4
00:00:15.870 --> 00:00:23.490
of submitting a form and instead use an asynchronous or on the fly request to send the user's typed

5
00:00:23.490 --> 00:00:24.930
in value to our server.

6
00:00:25.320 --> 00:00:30.990
And then once our server and database have had a chance to complete that new create action, we will

7
00:00:30.990 --> 00:00:36.240
again use browser based JavaScript to add the new item to the bottom of our list here.

8
00:00:36.630 --> 00:00:42.090
And all of this will happen on the fly without the need for a full page reload or re render.

9
00:00:42.420 --> 00:00:44.670
Without further ado, let's get started.

10
00:00:45.030 --> 00:00:51.270
Our first step is to jump into our text editor and make sure that we have open our browser jazz file.

11
00:00:51.630 --> 00:00:57.660
We need to write browser based JavaScript to detect the submit event for that create form.

12
00:00:57.990 --> 00:01:01.070
So let's do this up at the very, very top of this file.

13
00:01:01.080 --> 00:01:06.510
Let's add a new line at the top, and let's write a comment just to stay organized and say Create feature.

14
00:01:07.080 --> 00:01:11.700
All right now we want to begin by selecting that each HTML form element.

15
00:01:12.180 --> 00:01:13.230
Let me show you what I mean.

16
00:01:13.230 --> 00:01:20.940
So right now, jump into your server dot js file and scroll down until you see the HTML template right

17
00:01:20.940 --> 00:01:22.690
after this first chunk of code.

18
00:01:22.710 --> 00:01:24.690
Then we see this form area.

19
00:01:24.990 --> 00:01:31.710
So here is the opening form tag, and we just want to give it a unique I.D. so that it's very easy to

20
00:01:31.710 --> 00:01:33.180
select with JavaScript.

21
00:01:33.540 --> 00:01:40.950
So do this with me right after the word form say I.D. equals and then quotes, and we can make up any

22
00:01:40.950 --> 00:01:42.180
ID name we want.

23
00:01:42.720 --> 00:01:45.630
But let's go with create dash form.

24
00:01:46.230 --> 00:01:46.680
Cool.

25
00:01:46.710 --> 00:01:53.400
Now, while we're at it, let's also give a unique ID to the input field that the user actually types

26
00:01:53.400 --> 00:01:53.910
into.

27
00:01:54.240 --> 00:01:56.980
So just one or two lines down from that opening form tag.

28
00:01:57.000 --> 00:01:58.470
We see this input element.

29
00:01:58.860 --> 00:02:06.420
And let's also give it an ID and say equals quotes, and I will make up a name of create dash field.

30
00:02:07.020 --> 00:02:13.350
And finally, while we are still in this file, scroll down a little bit more and on this opening unordered

31
00:02:13.350 --> 00:02:17.400
list tag or this other element, let's also give it an ID.

32
00:02:18.240 --> 00:02:22.230
So right after you'll say ID equals quotes and I will name it.

33
00:02:22.530 --> 00:02:24.480
Item Dash List.

34
00:02:25.020 --> 00:02:25.420
Cool.

35
00:02:25.440 --> 00:02:30.270
So now we have these ideas that we can hook onto from within our browser JavaScript.

36
00:02:30.540 --> 00:02:34.550
So let's save this file and jump back into browser JS.

37
00:02:35.010 --> 00:02:39.900
All right, now, up at the top for our Create feature, let's select that form element.

38
00:02:40.320 --> 00:02:49.200
So let's say Document Dot get element by IED in parentheses to call that method.

39
00:02:49.620 --> 00:02:52.500
And then in the parentheses we just say quotes and the name of the IDE.

40
00:02:52.770 --> 00:02:54.570
So we named it create form.

41
00:02:55.050 --> 00:02:59.760
This will select that form element, and then we just want to add on to the end of it and say, Dot

42
00:03:00.510 --> 00:03:03.150
Add event listener.

43
00:03:03.570 --> 00:03:09.570
We give this method to arguments, so a card will be the first argument is the event for that element

44
00:03:09.570 --> 00:03:10.680
that we're looking out for.

45
00:03:10.920 --> 00:03:17.190
So instead of click, we are interested in the submit event because there's multiple ways to submit

46
00:03:17.190 --> 00:03:18.420
a form, right?

47
00:03:18.510 --> 00:03:24.690
You could click on the submit button or you could just press the enter or return key on your keyboard

48
00:03:24.840 --> 00:03:26.130
while you're in this field.

49
00:03:27.060 --> 00:03:31.080
So this event will take care of either of those cases, which is perfect.

50
00:03:31.590 --> 00:03:31.900
All right.

51
00:03:31.920 --> 00:03:37.110
And then instead of this be placeholder, this is where we provide a function that will be called when

52
00:03:37.110 --> 00:03:38.880
this event actually happens.

53
00:03:39.150 --> 00:03:43.500
So let's get rid of the B and C function parentheses, curly brackets.

54
00:03:44.100 --> 00:03:44.490
All right.

55
00:03:44.490 --> 00:03:46.320
And now within the body of this function.

56
00:03:46.560 --> 00:03:53.460
This is our chance to prevent the default behavior of the web browser, meaning we don't actually want

57
00:03:53.460 --> 00:03:56.250
to send off a traditional request to the server.

58
00:03:56.730 --> 00:04:01.080
So let's do this within the parentheses for that anonymous function that we just created.

59
00:04:01.320 --> 00:04:04.140
Let's include a parameter, and let's name it e.

60
00:04:04.560 --> 00:04:10.380
This will contain all sorts of information about the event that just took place now within the body

61
00:04:10.380 --> 00:04:11.040
of our function.

62
00:04:11.040 --> 00:04:16.260
We can use that and look inside it and say, Prevent default.

63
00:04:16.800 --> 00:04:18.340
Let's test this out really quick.

64
00:04:18.360 --> 00:04:22.500
So go ahead and save this file and then jump into the browser.

65
00:04:22.590 --> 00:04:23.670
Be sure to refresh.

66
00:04:23.910 --> 00:04:26.340
And now if I try to submit this form.

67
00:04:27.300 --> 00:04:32.370
Notice that nothing happens no matter how many times I try to submit, this is perfect.

68
00:04:32.580 --> 00:04:39.660
So now we just want to use JavaScript to extract whatever value the user had typed in and then use Axios

69
00:04:39.660 --> 00:04:43.050
to send off an asynchronous request to our node server.

70
00:04:43.410 --> 00:04:48.810
So let's jump back into our text editor and write below this e dot prevent default line.

71
00:04:48.820 --> 00:04:55.650
Let's add a new line, and in order to save a lot of typing, let's just recycle or copy and paste our

72
00:04:55.650 --> 00:04:59.580
Axios code from down here within our Delete feature.

73
00:04:59.940 --> 00:05:01.250
Let's just copy these five.

74
00:05:01.310 --> 00:05:08.470
Lines of code, so select from right before the A in Axios, down until the closing curly brackets and

75
00:05:08.470 --> 00:05:13.920
parentheses, let's copy that into our clipboard and then up here right after the E Dot prevent default.

76
00:05:13.930 --> 00:05:15.520
Just paste in your clipboard.

77
00:05:16.000 --> 00:05:16.420
Cool.

78
00:05:16.450 --> 00:05:21.280
Now, let's adjust this code to make sense for the create action instead of the delete action.

79
00:05:21.460 --> 00:05:28.230
So for the URL that we want to send a post request to, let's change this from delete to create dash

80
00:05:28.240 --> 00:05:28.780
item.

81
00:05:29.260 --> 00:05:29.670
All right.

82
00:05:29.680 --> 00:05:36.070
In terms of the data that we want to send to the server in this request, we don't need to send an IED.

83
00:05:36.340 --> 00:05:41.170
Instead, we need to send along the text that the user just typed into our field.

84
00:05:41.590 --> 00:05:47.690
So let's do this instead of ID here, let's say text, you can make up any property name.

85
00:05:47.710 --> 00:05:50.920
This is fitting and then let's get rid of its current value.

86
00:05:50.920 --> 00:05:51.830
So get rid of it.

87
00:05:51.850 --> 00:05:57.430
OK, target, get attribute, delete up until the closing quotes and closing parentheses.

88
00:05:58.180 --> 00:06:01.030
For now, let's just place an X here as a placeholder.

89
00:06:01.360 --> 00:06:09.310
Now what we really need to do here is select this input field that we gave a unique ID to and then extract

90
00:06:09.310 --> 00:06:10.060
its value.

91
00:06:10.480 --> 00:06:14.860
Now I'm going to read the future and let you know that we are going to need to work with this element

92
00:06:14.860 --> 00:06:16.000
more than once.

93
00:06:16.330 --> 00:06:21.790
So instead of having to repeatedly select this element, let's just create a variable that points towards

94
00:06:21.790 --> 00:06:23.920
it and then we can reuse that variable.

95
00:06:24.340 --> 00:06:31.060
So back in our code up at the very, very top right after our comment, let's add a new line and I'm

96
00:06:31.060 --> 00:06:32.080
going to create a variable.

97
00:06:32.080 --> 00:06:39.940
So say let and let's be on the same page and let's name this variable create field and let's set it

98
00:06:39.940 --> 00:06:40.630
to equal.

99
00:06:40.750 --> 00:06:48.250
And then this is where we actually select that HTML input field so we can see document Typekit element

100
00:06:48.460 --> 00:06:49.760
by idea.

101
00:06:50.260 --> 00:06:54.880
And remember, a few minutes ago we named it create dash field.

102
00:06:55.330 --> 00:06:55.750
Cool.

103
00:06:55.750 --> 00:07:01.300
So now we can reuse this variable whenever we need to access or work with that element.

104
00:07:01.750 --> 00:07:07.810
So within our Axios block of code here, instead of this X placeholder, let's get rid of that.

105
00:07:08.140 --> 00:07:14.500
And let's just use that variable create field and look inside it with a dot for its value.

106
00:07:15.340 --> 00:07:15.850
Awesome.

107
00:07:15.850 --> 00:07:22.690
So we are sending an asynchronous or on the fly post request to this URL, and the data that we're sending

108
00:07:22.690 --> 00:07:28.540
to the server is an object with a property of text, and it will have whatever value the user typed

109
00:07:28.540 --> 00:07:28.780
in.

110
00:07:29.170 --> 00:07:34.960
Now below this, this line of code is what's actually going to run once our server responds.

111
00:07:35.410 --> 00:07:41.170
So let's delete this current line here, and let's write a comment to ourselves to stay organized and

112
00:07:41.170 --> 00:07:45.790
say Create the HTML for a new item.

113
00:07:46.330 --> 00:07:51.250
All right, and we will circle back to this task a bit later on in the lesson for the time being right

114
00:07:51.250 --> 00:07:52.100
below that comment.

115
00:07:52.120 --> 00:07:59.380
Just as a test, we can create an annoying alert pop up that says you just created a new item.

116
00:07:59.980 --> 00:08:06.940
OK, but big picture what we will actually want to do here is create a new list item and add it to the

117
00:08:06.940 --> 00:08:09.100
bottom of this unordered list.

118
00:08:09.760 --> 00:08:16.060
However, before we set that up, we should adjust what our node app or express server does when it

119
00:08:16.060 --> 00:08:18.730
receives a post request to this URL.

120
00:08:19.150 --> 00:08:23.980
So go ahead and save this file and then jump in to our server J.S. file.

121
00:08:24.280 --> 00:08:29.590
If we scroll down towards the bottom, you'll remember that we already set up this area that begins

122
00:08:29.590 --> 00:08:33.670
with app post and then the URL is create item.

123
00:08:34.150 --> 00:08:39.010
Well, right now, let's just make a couple of adjustments so that this code makes sense for our new

124
00:08:39.010 --> 00:08:39.880
situation.

125
00:08:40.330 --> 00:08:46.240
First of all, when we call the insert one method on our database collection in terms of the value that

126
00:08:46.240 --> 00:08:51.850
we are setting for the text property, instead of looking in the request body for a property named item,

127
00:08:52.030 --> 00:08:59.110
we want to replace this item with text because remember, that's the property name that we just chose

128
00:08:59.110 --> 00:09:01.630
when we were setting up our asynchronous request.

129
00:09:02.230 --> 00:09:02.680
OK.

130
00:09:02.710 --> 00:09:09.670
Also, once this database action completes, instead of redirecting the browser back to the home page

131
00:09:09.670 --> 00:09:16.240
for a full page reload, let's instead get rid of this line and say Response Dot Send.

132
00:09:17.140 --> 00:09:20.230
And for now, let's just send back the word success.

133
00:09:20.890 --> 00:09:26.590
OK, now let's go ahead and test everything out so far, so be sure to save this file and then jump

134
00:09:26.590 --> 00:09:28.450
into the browser and refresh.

135
00:09:28.990 --> 00:09:37.120
And if I type into this field by T and submit, we see this alert pop up, you just created a new item.

136
00:09:37.630 --> 00:09:42.460
Now we don't see the item added to the bottom of our list because we haven't written that code yet.

137
00:09:42.760 --> 00:09:49.180
That's to be expected, but let's make sure that by T was successfully added to our database.

138
00:09:49.540 --> 00:09:55.870
So right now, jump into your MongoDB Atlas account and within your to do app item's collection.

139
00:09:56.110 --> 00:09:59.620
You can click on Find or Reset Pull in the newest data.

140
00:10:00.400 --> 00:10:00.700
Cool.

141
00:10:00.700 --> 00:10:01.180
I can see the.

142
00:10:01.280 --> 00:10:07.820
Total document count just increased from five to six, and if I scroll down here is that newest bitey

143
00:10:07.840 --> 00:10:08.260
item.

144
00:10:08.830 --> 00:10:09.340
Awesome.

145
00:10:09.490 --> 00:10:14.770
So are asynchronous request is successfully adding new items to the database.

146
00:10:15.160 --> 00:10:21.820
Now we just need to take care of the JavaScript that will add a new list item down here on the fly.

147
00:10:22.420 --> 00:10:29.650
So let's jump back into our text editor and within browser, not J.S. Find the comment that says create

148
00:10:29.650 --> 00:10:31.390
the HTML for a new item.

149
00:10:31.780 --> 00:10:37.290
This is the area we're interested in, and we don't actually want to show this annoying alert pop up.

150
00:10:37.300 --> 00:10:43.660
So get rid of that line and in its place, let's select that unordered list element that we want to

151
00:10:43.660 --> 00:10:44.560
add on to.

152
00:10:44.800 --> 00:10:49.120
So Document Dot get element by.

153
00:10:49.120 --> 00:10:56.050
I'd call that method, and the idea of that list was Item Dash List.

154
00:10:56.560 --> 00:11:04.150
OK, and once we've selected that element, we want to tack on and call a method named insert adjacent

155
00:11:04.450 --> 00:11:05.590
each HTML.

156
00:11:06.100 --> 00:11:09.040
We give this method to arguments so a comma be.

157
00:11:09.370 --> 00:11:13.450
The first argument is where you want to add on the new HTML.

158
00:11:13.840 --> 00:11:21.010
So in this case, instead of a placeholder, we are interested in quotes and we just say before and

159
00:11:21.430 --> 00:11:25.090
meaning right before the ending or closing, you'll tag.

160
00:11:25.210 --> 00:11:27.550
We want to add in a bit of new HTML.

161
00:11:28.060 --> 00:11:33.610
And the second argument the B placeholder is the HTML that we actually want to add.

162
00:11:34.240 --> 00:11:35.680
So check this instead of B.

163
00:11:35.680 --> 00:11:38.620
For now, let's just say quotes and say Hello.

164
00:11:39.070 --> 00:11:39.390
Cool.

165
00:11:39.400 --> 00:11:44.770
Now, let's test this out, so go ahead and save the file and then back in the browser refresh.

166
00:11:45.490 --> 00:11:47.520
Let me zoom out so you can see the bottom of the screen.

167
00:11:47.530 --> 00:11:47.920
Here we go.

168
00:11:48.160 --> 00:11:54.520
And if I type in by Berris and submit the form, you can see that on the fly.

169
00:11:54.700 --> 00:11:58.240
Hello was added at the end of that overall list element.

170
00:11:58.660 --> 00:12:05.440
So now, instead of simply the word hello, we just need to insert the HTML for this list item template,

171
00:12:05.920 --> 00:12:06.130
right?

172
00:12:06.130 --> 00:12:10.120
The template that's going to give us the text on the left with these two buttons on the right.

173
00:12:10.630 --> 00:12:12.760
So let's do this back in our text editor.

174
00:12:13.330 --> 00:12:17.350
Just so this line of code doesn't become so long that it's impossible to read.

175
00:12:17.530 --> 00:12:20.140
Let's first do this for the second argument.

176
00:12:20.410 --> 00:12:21.730
Let's get rid of the quotes.

177
00:12:21.730 --> 00:12:22.270
Hello.

178
00:12:22.540 --> 00:12:26.530
And instead, let's call a function that we can create in just a minute from now.

179
00:12:26.890 --> 00:12:29.490
The name doesn't matter, but just so we're on the same page.

180
00:12:29.500 --> 00:12:34.960
Let's call it item template in parentheses to call that function.

181
00:12:35.230 --> 00:12:37.930
OK, now let's go create a function with that name.

182
00:12:38.440 --> 00:12:43.870
So maybe up at the very, very top of our file, even above this create feature comment, let's add

183
00:12:43.870 --> 00:12:44.440
a new line.

184
00:12:44.440 --> 00:12:52.120
Let's create a function with the name of item template parentheses, curly brackets and within the body

185
00:12:52.120 --> 00:12:52.780
of the function.

186
00:12:52.780 --> 00:12:55.900
Let's just return a template literal.

187
00:12:55.900 --> 00:12:56.980
So back, tex.

188
00:12:57.250 --> 00:13:02.080
And for now, let's just say hello from a function.

189
00:13:02.710 --> 00:13:07.090
Let's go ahead and save this just to make sure it's working and then refresh in the browser.

190
00:13:07.630 --> 00:13:14.140
And if I type in the new items, if I say buy bananas and submit, you can see hello from a function.

191
00:13:14.650 --> 00:13:15.050
Cool.

192
00:13:15.070 --> 00:13:20.650
So now we have an organized place where we can include a lengthy bit of HTML code.

193
00:13:21.130 --> 00:13:23.920
Now we do not need to write any new HTML.

194
00:13:24.160 --> 00:13:28.660
We already have that HTML template within our server tags file.

195
00:13:29.110 --> 00:13:35.890
So do this jump into server, not just scroll up until you see the HTML template, and we are specifically

196
00:13:35.890 --> 00:13:38.470
looking for this unordered list element.

197
00:13:39.010 --> 00:13:43.870
Remember, this is where we called map on our items array to do this once for each item.

198
00:13:44.410 --> 00:13:47.650
So let's just copy and paste this HTML template.

199
00:13:47.860 --> 00:13:53.500
Begin selecting right before this opening back tick and then just grab all the way down until the closing

200
00:13:53.500 --> 00:13:54.220
back tick.

201
00:13:55.000 --> 00:13:57.970
So copy that in your clipboard and then back in Browser Dot.

202
00:13:58.230 --> 00:14:01.900
Yes, we can get rid of the hello from a function back, Tex.

203
00:14:02.410 --> 00:14:04.900
So we just return and then paste in your clipboard.

204
00:14:05.770 --> 00:14:10.930
Now, if every instinct in your body is telling you that it's bad to have duplicated code like this

205
00:14:11.200 --> 00:14:15.010
in two separate files, don't worry your instincts are correct.

206
00:14:15.280 --> 00:14:19.240
And in our next lesson, we will learn how to remove that duplication.

207
00:14:19.780 --> 00:14:22.780
But for now in this lesson, let's not worry about that.

208
00:14:23.140 --> 00:14:30.010
For right now, what I want us to focus our worry on is the MongoDB I.D. for our new document that we

209
00:14:30.010 --> 00:14:30.880
just created.

210
00:14:31.300 --> 00:14:40.660
Or in other words, how can we have the web browser be aware of that unique MongoDB I.D. that was just

211
00:14:40.660 --> 00:14:47.170
created so that we can add it on to the new edit and delete buttons for the newly created item?

212
00:14:47.770 --> 00:14:48.010
Right?

213
00:14:48.010 --> 00:14:54.340
Because theoretically, someone could create a brand new item, have the HTML show up on the fly, and

214
00:14:54.340 --> 00:14:57.310
then they could immediately want to click the new delete button.

215
00:14:57.580 --> 00:15:00.880
And in order for that delete button to work, it would have to know.

216
00:15:01.160 --> 00:15:05.420
The idea for that MongoDB document now back in our code.

217
00:15:05.720 --> 00:15:10.160
This is not going to refer to anything within the context of this function.

218
00:15:10.400 --> 00:15:14.720
We do not have a property named item to look within to grab the ID.

219
00:15:15.440 --> 00:15:16.730
But let's do this.

220
00:15:17.000 --> 00:15:19.760
I want you to jump in to your server logs.

221
00:15:19.760 --> 00:15:26.270
File and scroll down until you find the apt up post area for the Create item URL.

222
00:15:26.630 --> 00:15:32.090
Now, in terms of the response that we send back to the web browser instead of just sending a string

223
00:15:32.090 --> 00:15:41.780
of text that says success, let's get rid of that line and instead say response dot, JSON and JSON

224
00:15:41.780 --> 00:15:45.260
just stands for JavaScript object notation.

225
00:15:45.500 --> 00:15:48.830
This is a very popular way of sending data back and forth.

226
00:15:49.250 --> 00:15:56.510
And our goal here is to simply send back a JavaScript object that represents the new MongoDB document

227
00:15:56.510 --> 00:15:57.920
that was just created.

228
00:15:58.370 --> 00:16:01.610
So check this out within these parentheses for this function.

229
00:16:01.850 --> 00:16:05.450
That's going to run as soon as the database action is complete.

230
00:16:05.690 --> 00:16:11.900
Let's add a couple of parameters let's say e r for error, and let's also say info.

231
00:16:12.230 --> 00:16:16.640
Now, check this out within the body of this function, where we say response dot JSON.

232
00:16:16.970 --> 00:16:23.750
Let's just return an object with one property named Underscore ID, and we'll give that a value of info.

233
00:16:23.750 --> 00:16:30.370
Dot and MongoDB has a property called inserted and then uppercase for ID comma.

234
00:16:30.410 --> 00:16:33.860
Let's also give it a property of text and give that a value of request.

235
00:16:34.310 --> 00:16:35.840
Body Typekit text.

236
00:16:36.380 --> 00:16:41.210
All right, let's go ahead and save this file and then jump back into browser logs.

237
00:16:41.660 --> 00:16:46.280
And let's do this within our Create Feature code within our Axios request.

238
00:16:46.670 --> 00:16:50.870
Once this request is complete, it's going to call this function that we provide here.

239
00:16:51.230 --> 00:16:57.860
Now we know that our node server is sending back data as its response, and Axios makes it very easy

240
00:16:57.860 --> 00:16:59.150
to access that data.

241
00:16:59.480 --> 00:17:05.600
So within these parentheses for this function here, let's just include a parameter and name it response.

242
00:17:06.160 --> 00:17:06.370
Right?

243
00:17:06.390 --> 00:17:12.680
This is the server's response back to the browser now within the body of this function on this line

244
00:17:12.680 --> 00:17:16.700
of code where we are adding new HTML to the end of that unordered list.

245
00:17:17.510 --> 00:17:22.400
Towards the end of this line, when we are calling our item template function well, let's just pass

246
00:17:22.400 --> 00:17:23.750
that function a bit of data.

247
00:17:23.990 --> 00:17:31.970
So within these parentheses, let's say response dot data and that will access that JavaScript object

248
00:17:32.060 --> 00:17:37.220
that represents the newest document in the database that the server is sending back to our browser.

249
00:17:37.670 --> 00:17:43.130
So now all we need to do is go up towards the very top of our new item template function that we just

250
00:17:43.130 --> 00:17:47.900
created and within its parentheses just include a parameter with the name of item.

251
00:17:48.320 --> 00:17:54.260
So now all of these references to Item Dot Text and Item ID will make sense.

252
00:17:54.830 --> 00:17:58.880
Let's go ahead and save that and test it out by refresh.

253
00:17:59.270 --> 00:18:00.440
Let me delete a few of these.

254
00:18:00.440 --> 00:18:02.600
We can actually see the bottom of the screen here.

255
00:18:04.170 --> 00:18:09.450
And if I say by apricots, you can see that was added on the fly.

256
00:18:09.810 --> 00:18:15.030
And more importantly, if I tried to edit or delete that item, so if I click, edit and change it to

257
00:18:15.030 --> 00:18:21.990
buy apricots today we see that change took place, meaning these edit and delete buttons that were added

258
00:18:21.990 --> 00:18:28.800
to the page on the fly also have the correct Mongo DB I.D. associated with them just to prove that's

259
00:18:28.800 --> 00:18:32.550
working if I go into my MongoDB Atlas account and refresh.

260
00:18:33.090 --> 00:18:33.510
Awesome.

261
00:18:33.510 --> 00:18:38.370
You can see it was updated to buy apricots today for our final task.

262
00:18:38.370 --> 00:18:43.770
In this lesson, let's improve the user experience a bit so that when you submit this form, the field

263
00:18:43.770 --> 00:18:45.810
is deleted or cleared out for you.

264
00:18:45.900 --> 00:18:49.710
Right, the users should not have to manually delete their previous value.

265
00:18:50.190 --> 00:18:57.480
So back in browser logs within our Create Feature area right below this create HTML comment, let's

266
00:18:57.480 --> 00:19:00.630
add a new line right below this document git element line.

267
00:19:01.410 --> 00:19:03.250
And let's just say create field.

268
00:19:03.270 --> 00:19:08.970
That's the name of the variable that points towards the field element, let's say dot value and set

269
00:19:08.970 --> 00:19:12.150
it to just an empty string to clear out its value.

270
00:19:12.270 --> 00:19:16.590
Let's also refocus the user's cursor onto that field, so create field.

271
00:19:17.160 --> 00:19:20.490
Call the focus method, give that a save and test it out.

272
00:19:21.000 --> 00:19:22.950
So be sure to refresh on the front end.

273
00:19:22.950 --> 00:19:29.430
If I say buy strawberries, we see that not only did add it at the bottom of our list, but I don't

274
00:19:29.430 --> 00:19:34.650
even need to take my hands off the keyboard and I can just type in a new item by tomatoes.

275
00:19:36.390 --> 00:19:36.930
Awesome.

276
00:19:37.380 --> 00:19:40.200
And that's going to bring this lesson to a close.

277
00:19:40.680 --> 00:19:44.400
In our next lesson, we will complete this application.

278
00:19:44.670 --> 00:19:51.420
We are going to learn how to remove that duplication of the item HTML template so that it's not awkwardly

279
00:19:51.420 --> 00:19:54.690
sitting in both our backend code and our front end code.

280
00:19:55.110 --> 00:19:57.240
Let's keep things rolling, and I will see you then.
