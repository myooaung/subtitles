1
00:00:01,550 --> 00:00:02,600
Hello, everyone.

2
00:00:02,810 --> 00:00:06,340
In this lesson, we are going to learn how to set up a router.

3
00:00:06,800 --> 00:00:10,670
So first the question becomes, what in the world is a router?

4
00:00:11,150 --> 00:00:13,880
Well, to answer that, let's jump right into our code.

5
00:00:14,270 --> 00:00:22,940
A router has the responsibility of listing out the Urals or routes that you want to listen for and then

6
00:00:22,940 --> 00:00:25,820
say what should happen for each of those routes.

7
00:00:26,300 --> 00:00:33,740
So essentially, any time we would write app dot get or app dot post, we are defining a route.

8
00:00:33,950 --> 00:00:36,710
And so we'd want to keep all of those within a router.

9
00:00:37,100 --> 00:00:44,660
The idea is to stay organized so we keep all of our roots in a separate file and that's the only responsibility

10
00:00:44,660 --> 00:00:45,530
of that file.

11
00:00:45,650 --> 00:00:47,030
It's just the router.

12
00:00:47,630 --> 00:00:52,970
So right now, let's create a new file in the root of our project folder.

13
00:00:53,360 --> 00:00:54,740
So new file.

14
00:00:55,250 --> 00:00:57,620
Technically, we could name this file anything.

15
00:00:57,620 --> 00:01:03,500
But just so we are on the same page, let's name it router dot J.S..

16
00:01:05,260 --> 00:01:12,040
OK, now, before we actually learn how to set up roots from within this file, we first need to learn

17
00:01:12,190 --> 00:01:19,840
how to let one JavaScript file communicate with another or let one JavaScript file share its code with

18
00:01:19,840 --> 00:01:20,320
another.

19
00:01:20,680 --> 00:01:26,120
So for the next couple of minutes, this has nothing to do with Roots or Express.

20
00:01:26,440 --> 00:01:33,280
Instead, this is just a basic node, jayesh skill of learning how to share code from one file to another.

21
00:01:33,610 --> 00:01:33,820
Right.

22
00:01:33,850 --> 00:01:40,510
Because we want to be able to write code within this rutabagas and then we want to leverage it within

23
00:01:40,510 --> 00:01:42,500
our app JS file.

24
00:01:42,850 --> 00:01:49,300
Now, at the very top of our app that we see require, this is something we've used many times in the

25
00:01:49,300 --> 00:01:50,110
course already.

26
00:01:50,320 --> 00:01:56,280
We know that we can use require to load in or import in or require in a package.

27
00:01:56,650 --> 00:02:03,610
So we know that we can use require with packages that we didn't create, but we can also use require

28
00:02:03,610 --> 00:02:07,000
to pull in JavaScript files that we did create.

29
00:02:07,450 --> 00:02:08,580
Let me show you what I mean.

30
00:02:08,590 --> 00:02:15,500
Let's jump back into our new empty rutabagas file and let's write two lines of code just as a test.

31
00:02:15,880 --> 00:02:20,140
So first, let's log a message to the console console dialog.

32
00:02:20,410 --> 00:02:25,570
And let's just say I am executed immediately.

33
00:02:26,320 --> 00:02:26,770
All right.

34
00:02:26,770 --> 00:02:35,350
And then right below that line of code, let's add one more new line and let's say module dot exports.

35
00:02:36,190 --> 00:02:40,190
I know that this is our first time seeing this module exports.

36
00:02:40,570 --> 00:02:41,080
Don't worry.

37
00:02:41,080 --> 00:02:43,390
I will explain what this means in a minute from now.

38
00:02:43,900 --> 00:02:45,910
But let's set this to equal.

39
00:02:46,240 --> 00:02:55,030
And for now, let's just set it to a string of text that says I am the export for the router file.

40
00:02:55,750 --> 00:02:59,050
OK, if you need to pause the video to type this out with me, that's OK.

41
00:02:59,050 --> 00:03:01,780
But let's go ahead and save this file.

42
00:03:02,290 --> 00:03:07,990
And then back in our Apgar's file, let's use require to load that file in.

43
00:03:08,260 --> 00:03:11,980
So maybe right below this const app equals express line.

44
00:03:11,980 --> 00:03:14,770
Let's add a new line and let's say const.

45
00:03:15,490 --> 00:03:21,160
You could choose any name, but let's choose router and let's set it to equal and then we can use the

46
00:03:21,160 --> 00:03:25,480
require function and the question becomes, what do we put in these quotes?

47
00:03:25,840 --> 00:03:30,460
If we were looking for an NPM package, you can just type the name of the package.

48
00:03:30,730 --> 00:03:34,660
But in this case, we actually want to provide it with a file path.

49
00:03:35,110 --> 00:03:42,220
Right, a path that points towards that rutabagas file so we can say dot forward slash to look within

50
00:03:42,220 --> 00:03:46,130
the current folder or directory and then we just type out the file name.

51
00:03:46,540 --> 00:03:50,890
You could include the dot just at the end here, but it's not necessary.

52
00:03:51,370 --> 00:03:54,760
Now, before I save this file, I'm just going to make sure that my app is running.

53
00:03:54,970 --> 00:03:58,810
So down in the command line, I will say NPM run watch.

54
00:03:59,950 --> 00:04:06,570
OK, and now as soon as I save this file in our console, we see I am executed immediately.

55
00:04:07,030 --> 00:04:07,300
Cool.

56
00:04:07,300 --> 00:04:11,070
So that was that console, that logline that we just wrote in our router file.

57
00:04:11,560 --> 00:04:15,600
This means that we successfully executed code from a separate file.

58
00:04:16,060 --> 00:04:19,030
And this is all thanks to the require function.

59
00:04:19,540 --> 00:04:22,390
So the require function in node does two things.

60
00:04:22,660 --> 00:04:31,780
Number one, it executes said file, but number two, it also returns whatever that file exports.

61
00:04:32,140 --> 00:04:32,350
Right.

62
00:04:32,380 --> 00:04:36,340
And that's what's going to get stored into this variable that we are creating.

63
00:04:36,700 --> 00:04:44,170
So back and router, I guess that's why we wrote this line where we say module exports equals something.

64
00:04:44,650 --> 00:04:47,800
The no jazz environment knows what this means.

65
00:04:47,800 --> 00:04:50,560
It's on the lookout for this special variable.

66
00:04:50,980 --> 00:04:55,720
And whatever we set it to equal to will be returned when we require this violin.

67
00:04:56,290 --> 00:05:02,890
So just to see this come full circle back in our Apgar's file, let's try to log to the console, our

68
00:05:02,890 --> 00:05:04,060
router variable.

69
00:05:04,330 --> 00:05:09,340
So console dot log router as soon as I hit save.

70
00:05:10,260 --> 00:05:17,370
The app automatically reloads, and down here we see I am the export for the router file, so big picture

71
00:05:17,370 --> 00:05:22,170
when you require in a file, the entire file is going to get executed.

72
00:05:22,470 --> 00:05:24,540
That's going to happen immediately.

73
00:05:24,900 --> 00:05:31,350
But the idea is that whatever you export, that is going to be stored in our variable and then we can

74
00:05:31,350 --> 00:05:35,370
use that whenever and wherever we see fit.

75
00:05:35,880 --> 00:05:39,610
Right now we can use this variable later on in this file.

76
00:05:40,110 --> 00:05:46,590
Now, before we move on and change gears and actually learn how routers work and express, I do want

77
00:05:46,590 --> 00:05:54,150
to let you know one more thing about exports in node, and that is that you are free to export whatever

78
00:05:54,150 --> 00:05:54,850
you want.

79
00:05:55,230 --> 00:06:02,670
So in this example, we exported a simple string of text, but you could export a number or an array

80
00:06:02,820 --> 00:06:08,630
or a function or perhaps most commonly you can export an object.

81
00:06:09,090 --> 00:06:15,090
So, for example, instead of this string of text, you could include curly brackets to create an object

82
00:06:15,420 --> 00:06:19,080
and then just to stay organized, you could drop down in between those curly brackets.

83
00:06:19,380 --> 00:06:25,100
You could provide different properties so you could have name and set that to me as a lot comma.

84
00:06:25,110 --> 00:06:30,840
You could have another property species set that to cat comma, and then you could have another property

85
00:06:30,840 --> 00:06:32,880
that's actually a method or a function.

86
00:06:33,300 --> 00:06:37,890
So we can have a method named MÃ and that could be a function.

87
00:06:39,090 --> 00:06:43,170
And inside that function we could just log to the console and say MÃ.

88
00:06:44,030 --> 00:06:47,910
And just to clean up this example a bit, we can get rid of this console, that log.

89
00:06:47,910 --> 00:06:49,560
I am executed immediately.

90
00:06:49,560 --> 00:06:49,980
Line.

91
00:06:50,520 --> 00:06:50,900
All right.

92
00:06:50,910 --> 00:06:56,660
Now if I go ahead and save this file, you can see that object got logged to the console.

93
00:06:57,060 --> 00:07:03,930
This is because back in Applegate's, we are logging the router variable, the variable that equals

94
00:07:03,960 --> 00:07:06,220
the result of requiring that file.

95
00:07:06,900 --> 00:07:12,390
The reason I'm spending so much time explaining this is because now you are free to use that object

96
00:07:12,390 --> 00:07:15,130
and its properties anywhere in this file.

97
00:07:15,570 --> 00:07:22,150
So, for example, we could say router, name or router, not species' or router, not MÃ.

98
00:07:22,560 --> 00:07:22,840
Right.

99
00:07:22,860 --> 00:07:27,390
Because that variable is going to equal literally whatever you exported.

100
00:07:27,850 --> 00:07:33,840
This may not seem like a big deal right now, but trust me, this allows for some very powerful and

101
00:07:33,840 --> 00:07:35,790
very organized code.

102
00:07:36,360 --> 00:07:42,470
OK, so that concludes our introduction to requiring our own files at this point.

103
00:07:42,480 --> 00:07:49,680
Now we can actually learn about routers in Express because believe it or not, a router does not typically

104
00:07:49,680 --> 00:07:51,300
have a MIAOW method.

105
00:07:51,780 --> 00:07:55,980
That was just an example of working with separate files and staying organized.

106
00:07:56,250 --> 00:07:56,610
All right.

107
00:07:56,700 --> 00:08:03,390
At this point, let's get rid of this router, drop me out line, and let's also jump in to our router,

108
00:08:03,390 --> 00:08:11,250
not just file and let's delete everything so we have a clean slate and now let's actually build a router

109
00:08:11,310 --> 00:08:14,220
for our application to refresh your memory.

110
00:08:14,220 --> 00:08:20,720
It's the routers job to list out all of the Urals or routes that we are on the lookout for.

111
00:08:21,030 --> 00:08:21,480
All right.

112
00:08:21,490 --> 00:08:28,380
So within our Radagast file, let's begin by including the express framework so we can say const xpress

113
00:08:28,380 --> 00:08:31,940
equals and then just require in the express package.

114
00:08:32,370 --> 00:08:36,240
All right, then let's create our own constant variable named router.

115
00:08:36,390 --> 00:08:38,580
You could name it anything, but that's what I'm going with.

116
00:08:38,970 --> 00:08:40,740
And let's set that to equal.

117
00:08:40,740 --> 00:08:47,130
And then let's look inside the express package for something named router and parentheses, because

118
00:08:47,130 --> 00:08:48,870
we're calling it this way.

119
00:08:48,870 --> 00:08:53,610
The express framework will return sort of a mini application or a router.

120
00:08:53,910 --> 00:08:57,180
I'll explain what I mean by mini application in just a minute here.

121
00:08:57,600 --> 00:09:04,530
Down at the bottom, let's say this, let's say module dot exports and let's just export that new router

122
00:09:04,530 --> 00:09:06,030
variable that we just created.

123
00:09:06,870 --> 00:09:10,310
So module exports equals router.

124
00:09:11,130 --> 00:09:11,460
All right.

125
00:09:11,460 --> 00:09:13,620
Now, check this out above that last line.

126
00:09:13,620 --> 00:09:20,090
Let's add a new line of code and now let's use our router variable and say router dot git.

127
00:09:20,460 --> 00:09:27,360
So this is just like before when we would say app dot get for a get request or app post for a post request

128
00:09:27,660 --> 00:09:30,780
only instead of working with our overall express app.

129
00:09:30,780 --> 00:09:34,800
Now we are just working with our router, but it works the exact same way.

130
00:09:34,800 --> 00:09:41,220
So we would say router get the first argument, we will say the base you Aurel and then for the second

131
00:09:41,220 --> 00:09:47,280
argument, so comma and then a function function parentheses, curly brackets, let's dropdown.

132
00:09:47,370 --> 00:09:54,300
We know that within these parentheses we include request and response as parameters and then within

133
00:09:54,300 --> 00:09:55,440
the body of this function.

134
00:09:55,620 --> 00:09:59,430
So what do we want to do if someone sends a request to our homepage?

135
00:09:59,850 --> 00:10:04,800
We just want to respond by rendering our homepage template.

136
00:10:05,100 --> 00:10:08,790
So remember we named that template or view home dash.

137
00:10:08,790 --> 00:10:09,450
Yes.

138
00:10:10,180 --> 00:10:10,780
And that's it.

139
00:10:10,810 --> 00:10:16,330
This could might look familiar, this is the exact code that we typed into our app that file.

140
00:10:16,810 --> 00:10:22,840
This is what I meant when I said that this is sort of like a new mini express application, just like

141
00:10:22,840 --> 00:10:25,690
we told our app what to do for getting post requests.

142
00:10:25,720 --> 00:10:27,730
Well, we were telling our router what to do.

143
00:10:28,060 --> 00:10:32,710
And then obviously that router variable of ours, that's what we are exporting.

144
00:10:33,250 --> 00:10:37,640
That's what we are making available to any file that requires in this file.

145
00:10:37,990 --> 00:10:45,640
So let's go ahead and save this rutabagas file and then let's jump into our Applegate's file and now

146
00:10:45,640 --> 00:10:46,360
check this out.

147
00:10:46,810 --> 00:10:49,720
Find the area that says App Dawngate.

148
00:10:50,140 --> 00:10:53,940
And we no longer need this code because now we set that up in our router file.

149
00:10:54,370 --> 00:10:57,820
So just delete these three lines of code from Apgar's.

150
00:10:58,390 --> 00:11:04,480
And in its place, we just want to tell our overall express application to use that new router that

151
00:11:04,480 --> 00:11:08,430
we set up so we can just say app dot use.

152
00:11:08,860 --> 00:11:10,910
And in this case we want to give it to arguments.

153
00:11:10,910 --> 00:11:16,680
So A comma, B for the first argument instead of this A, we just want to tell it, which you are able

154
00:11:16,720 --> 00:11:18,280
to use this router for.

155
00:11:18,400 --> 00:11:21,580
In this case, we want this to be our overall or based router.

156
00:11:21,820 --> 00:11:24,880
So just forward to represent the base of our site.

157
00:11:25,300 --> 00:11:30,310
And then the second argument instead of this be placeholder, this is the router that we want to use

158
00:11:30,490 --> 00:11:31,720
so we can just say router.

159
00:11:31,900 --> 00:11:36,300
Right, because that is the name of the variable that imports our file.

160
00:11:36,880 --> 00:11:37,150
Right.

161
00:11:37,150 --> 00:11:40,270
That will be what that file is exporting at this point.

162
00:11:40,270 --> 00:11:44,110
We can go ahead and save our file and let's test it out.

163
00:11:44,200 --> 00:11:50,590
So if we go into the Web browser and refresh localhost column three thousand, our app should still

164
00:11:50,590 --> 00:11:51,680
be working perfectly.

165
00:11:52,270 --> 00:11:54,090
Nothing interesting is going on yet.

166
00:11:54,100 --> 00:11:55,720
This is just a static template.

167
00:11:55,720 --> 00:11:58,120
But you get the idea now really quick.

168
00:11:58,120 --> 00:12:02,930
I do want to jump back into our Radagast file and show you how this is going to work.

169
00:12:03,310 --> 00:12:05,410
Right now we just have the one you RL.

170
00:12:05,590 --> 00:12:12,670
But you could imagine if we had a slash about page, we would come into our router file and say router

171
00:12:12,670 --> 00:12:16,330
DOGGETT We would pass it to arguments for the first argument.

172
00:12:16,390 --> 00:12:17,200
It would be the U.

173
00:12:17,200 --> 00:12:18,640
RL that we're listening for.

174
00:12:18,950 --> 00:12:20,680
Second argument is a function.

175
00:12:21,010 --> 00:12:22,360
Again, you don't need to type this out.

176
00:12:22,360 --> 00:12:23,320
That's just an example.

177
00:12:23,860 --> 00:12:26,650
But within these parentheses, we would have a request and response.

178
00:12:26,980 --> 00:12:32,950
And then just as an example, I can say response dot send in reality, you'd want to render an HTML

179
00:12:32,950 --> 00:12:38,980
template, but just for a quick test, I can send back a message that says this is our about page,

180
00:12:39,760 --> 00:12:40,690
give that a save.

181
00:12:40,870 --> 00:12:49,320
And then back in the browser, if I visit Slash about, we see this is our about page.

182
00:12:49,570 --> 00:12:58,570
So the idea here is that we now have this dedicated file router, not JS, whose sole job is only responsibility

183
00:12:58,750 --> 00:13:01,830
is to list out our applications, different routes.

184
00:13:02,260 --> 00:13:04,420
This allows us to keep our main file.

185
00:13:04,420 --> 00:13:08,320
Are Apgar's file very clean and organized?

186
00:13:08,890 --> 00:13:14,110
This may not seem very impressive right now because there wasn't a whole lot of code in Apgar's even

187
00:13:14,110 --> 00:13:15,370
at the start of this lesson.

188
00:13:15,580 --> 00:13:20,680
But trust me, as we start to build out the different features of our application and the complexity

189
00:13:20,680 --> 00:13:26,380
grows, we are going to be very happy that we have separate organized files like this.

190
00:13:26,830 --> 00:13:32,500
It's going to make it very easy to know exactly where to look when we want to add a new feature or modify

191
00:13:32,500 --> 00:13:33,600
an existing feature.

192
00:13:34,060 --> 00:13:38,950
Now, in our next lesson, we are going to learn about something called a controller.

193
00:13:39,430 --> 00:13:45,730
The controller will allow our router file to stay cleaner itself, for example, instead of our router

194
00:13:45,730 --> 00:13:52,480
file having to include these functions of what we actually want to do, we can instead keep those functions

195
00:13:52,480 --> 00:13:54,070
within a controller file.

196
00:13:54,460 --> 00:13:58,750
Now, I promise this is not just me being obsessed with being organized.

197
00:13:59,080 --> 00:14:04,270
Splitting your code out into something called the controller is an industry standard practice.

198
00:14:04,660 --> 00:14:06,310
It should be a lot of fun to set up.

199
00:14:06,310 --> 00:14:10,900
So let's keep our momentum rolling and I will see you in the next lesson.
