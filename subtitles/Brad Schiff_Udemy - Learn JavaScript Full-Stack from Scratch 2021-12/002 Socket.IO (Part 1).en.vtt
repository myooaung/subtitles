WEBVTT
1
00:00:01.800 --> 00:00:02.790
Hello, everyone.

2
00:00:03.120 --> 00:00:09.490
In this lesson, we are going to continue working on our chat feature to be more specific.

3
00:00:09.510 --> 00:00:13.460
We are going to focus on actually sending and receiving data.

4
00:00:14.070 --> 00:00:20.600
So in our previous lesson, we set things up so that you can click the chat icon to open this chat box.

5
00:00:21.030 --> 00:00:25.360
And we also set up the ability to hide or close the chat box.

6
00:00:25.890 --> 00:00:31.980
So now in this lesson, let's address what should happen if we actually type a message into this field

7
00:00:31.980 --> 00:00:32.520
down here.

8
00:00:32.850 --> 00:00:34.480
Hello, how are you?

9
00:00:35.370 --> 00:00:40.020
Now, as of this moment, this is just an HTML form and textfield.

10
00:00:40.410 --> 00:00:47.910
So if I pressed enter to submit the form, that's going to reload the entire page and we can even see

11
00:00:47.910 --> 00:00:53.520
up in the address bar with the question mark, that means it tried to perform a traditional git request

12
00:00:53.850 --> 00:00:56.110
to send that data to a server somewhere.

13
00:00:56.550 --> 00:00:58.420
None of this is what we want.

14
00:00:59.190 --> 00:01:00.870
So let me open up the chat again.

15
00:01:01.470 --> 00:01:07.320
Instead, when someone types in a message here and then presses enter to try and submit the message,

16
00:01:07.620 --> 00:01:11.490
we would want to handle that event with front end JavaScript.

17
00:01:11.910 --> 00:01:12.200
Right.

18
00:01:12.210 --> 00:01:18.620
We want to send this data, their message to the server on the fly or asynchronously.

19
00:01:19.080 --> 00:01:20.910
We don't want to reload the page.

20
00:01:21.330 --> 00:01:25.170
So we've already learned technology that would let us do this right.

21
00:01:25.170 --> 00:01:31.140
We could use the axios package and send off an asynchronous JavaScript request to the server.

22
00:01:31.680 --> 00:01:37.290
And that would work because our server is always listening for incoming requests.

23
00:01:37.890 --> 00:01:40.890
So the server would receive this message that we sent it.

24
00:01:41.220 --> 00:01:48.540
But the server would then need to send this message to any and all users who also have the chat feature

25
00:01:48.540 --> 00:01:49.500
open currently.

26
00:01:50.040 --> 00:01:52.530
But how how could the server do that?

27
00:01:52.830 --> 00:01:58.840
Because think about it, the Web browser is not always listening for incoming data from the server.

28
00:01:59.310 --> 00:02:06.450
Traditionally, the browser only listens for data from the server immediately after it sends a request

29
00:02:06.450 --> 00:02:09.810
and then expects to hear a response from the server.

30
00:02:10.230 --> 00:02:16.490
And as soon as that request response lifecycle is over, the browser is not listening any longer.

31
00:02:16.980 --> 00:02:24.090
Now, to get around this limitation, we could get creative and programmed things so that every five

32
00:02:24.090 --> 00:02:31.440
or 10 seconds the browser sends off and axios request to check for any new messages, write messages

33
00:02:31.440 --> 00:02:32.760
from other users.

34
00:02:33.270 --> 00:02:38.690
But that would not be very efficient and that would not be using the right tool for the right job.

35
00:02:39.060 --> 00:02:46.590
So instead of using a traditional HTTP request, we're going to open a socket connection between the

36
00:02:46.590 --> 00:02:48.510
browser and the server.

37
00:02:49.080 --> 00:02:56.790
Once we've established a socket connection, both the server and the browser will be listening for data

38
00:02:56.790 --> 00:02:57.600
from one another.

39
00:02:58.170 --> 00:03:04.770
Now, the easiest way to create this type of connection within a node app is to leverage a package named

40
00:03:04.770 --> 00:03:06.770
Socket Io.

41
00:03:07.260 --> 00:03:13.920
So right now, let's jump into our text editor and let's go out to the JavaScript grocery store or NPM

42
00:03:14.130 --> 00:03:16.530
and download socket IO.

43
00:03:16.920 --> 00:03:18.440
So open up the command line.

44
00:03:18.720 --> 00:03:22.830
If your node server and app is already running, just press control, see.

45
00:03:23.760 --> 00:03:28.380
OK, and we want to now install a package, so type out this command with me.

46
00:03:28.800 --> 00:03:40.320
NPM install and the name of the package is socket dot i o then go ahead and press enter.

47
00:03:42.190 --> 00:03:47.770
OK, now that we have that package, let's go ahead and start our server or app up again, so just be

48
00:03:47.770 --> 00:03:50.800
sure to run npm run watch.

49
00:03:52.560 --> 00:04:01.020
OK, now, in order to begin leveraging Socket Io, I want you to jump into our app JS file to refresh

50
00:04:01.020 --> 00:04:07.560
your memory app just lives within the root folder of our project within app.

51
00:04:07.940 --> 00:04:15.840
Jess, I want you to scroll down to the very bottom and right before the closing module down exports

52
00:04:15.840 --> 00:04:18.750
line, I want you to add a new line now.

53
00:04:18.750 --> 00:04:23.460
At the moment, our server is just an express application, right?

54
00:04:23.460 --> 00:04:25.280
It's serving up our express app.

55
00:04:25.530 --> 00:04:30.510
However, we now also want the server to power socket connections.

56
00:04:31.080 --> 00:04:34.950
So we need to change things up a bit in order to do both of those things.

57
00:04:35.640 --> 00:04:37.030
Let me show you what I'm getting at.

58
00:04:37.260 --> 00:04:39.510
Let's create a new constant variable.

59
00:04:39.510 --> 00:04:43.080
So const let's name it server.

60
00:04:43.080 --> 00:04:50.510
So const server equals and then let's require in a package that is included in node by default.

61
00:04:50.820 --> 00:04:52.380
So we don't need to go install this.

62
00:04:52.380 --> 00:05:02.580
We can just say require in the name of the packages htp after the parentheses say dot create server

63
00:05:03.120 --> 00:05:06.330
and inside those parentheses include app.

64
00:05:07.350 --> 00:05:12.250
So we just created a server that is going to use our express app as its handler.

65
00:05:12.840 --> 00:05:20.820
So now on the very bottom line where we say module exports equals instead of app, let's change this

66
00:05:20.820 --> 00:05:22.480
to server.

67
00:05:23.340 --> 00:05:30.570
Now, right above this line is where we can add a new line and now add in socket functionality to this

68
00:05:30.570 --> 00:05:31.100
server.

69
00:05:31.650 --> 00:05:39.060
So let's create another constant variable, let's say const Io short for socket IO and let's say that

70
00:05:39.060 --> 00:05:45.990
should equal and then let's require in the socket IO package.

71
00:05:46.950 --> 00:05:53.340
And then at the very end of this line, let's open up another pair of parentheses and in these parentheses

72
00:05:53.340 --> 00:05:54.840
just say server.

73
00:05:55.470 --> 00:06:02.010
So now in our debuggers file that actually tells our app to begin listening on PT..

74
00:06:02.010 --> 00:06:02.970
Three thousand.

75
00:06:03.270 --> 00:06:09.210
Well now instead of it telling app to listen, it's going to tell our overall server to begin listening

76
00:06:09.210 --> 00:06:09.690
on PT..

77
00:06:09.690 --> 00:06:10.520
Three thousand.

78
00:06:10.980 --> 00:06:17.110
In other words, it's now going to power both our express app and our socket connections.

79
00:06:17.940 --> 00:06:21.300
Now, just as a test right below this line, let's dropdown.

80
00:06:21.810 --> 00:06:28.080
And when a Web browser opens a socket connection with our server, let's log a sample message to our

81
00:06:28.080 --> 00:06:33.030
command line, our servers command line that says new user connected.

82
00:06:33.810 --> 00:06:37.560
So we can just say Io dot on.

83
00:06:38.250 --> 00:06:42.360
And then in this case, the event that we are listening for is connection.

84
00:06:43.320 --> 00:06:44.670
And then the second argument.

85
00:06:44.680 --> 00:06:49.050
So karma is just a function that we would want to run in response.

86
00:06:49.350 --> 00:06:54.330
So function parentheses, curly brackets, let's just log to the console.

87
00:06:54.330 --> 00:06:58.650
So console that log a new user connected.

88
00:07:00.120 --> 00:07:00.480
Cool.

89
00:07:00.660 --> 00:07:03.630
At this point, let's go ahead and save this file.

90
00:07:03.930 --> 00:07:11.070
And now we need to make sure that our front end is loading socket IO JavaScript so that it can connect

91
00:07:11.070 --> 00:07:11.910
to the server.

92
00:07:12.390 --> 00:07:14.730
Let me show you what I'm getting at right now.

93
00:07:14.730 --> 00:07:20.400
I actually want you to jump in to your views folder and inside the views folder.

94
00:07:20.400 --> 00:07:27.030
Look in the includes subfolder and I want you to jump into Fuda SJS.

95
00:07:28.380 --> 00:07:33.840
Remember when we set up this if statement, so only if the user is logged in should they see the chat

96
00:07:33.840 --> 00:07:34.410
wrapper.

97
00:07:34.950 --> 00:07:39.840
Well within that if statement, maybe right below this div line right here.

98
00:07:39.840 --> 00:07:47.190
I want us to include a script, so an opening and closing script tag on the opening script tag.

99
00:07:47.190 --> 00:07:50.550
Let's give it a source or sirc attribute.

100
00:07:50.890 --> 00:07:58.050
So source equals and then quotes and type this in with me forward slash to look at the root of our server

101
00:07:58.050 --> 00:08:06.650
and then socket dot io slash socket dot io dot js.

102
00:08:07.470 --> 00:08:13.080
So now that our server is using socket io, it's going to make sure that a JavaScript file designed

103
00:08:13.080 --> 00:08:16.290
for the web browser is available from this U.

104
00:08:16.290 --> 00:08:16.780
RL.

105
00:08:17.610 --> 00:08:22.970
This way the web browser has all of the tools that it will need to actually open the connection.

106
00:08:23.670 --> 00:08:28.430
So let's go ahead and save this file and not to complete our test.

107
00:08:28.440 --> 00:08:36.360
Let's jump into our chat JS module file so this lives within your front end JS folder and then within

108
00:08:36.360 --> 00:08:43.020
the modules subfolder within this chat JS file, I want you to scroll down and find our method that

109
00:08:43.020 --> 00:08:44.970
is named open connection.

110
00:08:45.360 --> 00:08:50.160
Remember, this is where we have that annoying alert message that says opening a connection.

111
00:08:51.000 --> 00:08:51.480
Let's go.

112
00:08:51.590 --> 00:08:57.670
I didn't get rid of that alert and in its place, we can just call a function named IoE.

113
00:08:58.100 --> 00:09:04.730
Now, if you're using VSG code, if you try to type a parentheses after this to call it, this code

114
00:09:04.730 --> 00:09:08.110
is going to do some weird auto suggest completion nonsense.

115
00:09:08.120 --> 00:09:08.990
I don't want that.

116
00:09:09.350 --> 00:09:16.040
So you might have to type IO and then hit escape on your keyboard and then type in the parentheses.

117
00:09:16.220 --> 00:09:17.330
But this is what we want.

118
00:09:17.360 --> 00:09:19.340
We're just calling a function named IO.

119
00:09:19.940 --> 00:09:25.700
That JavaScript file that we just included in the footer is going to make this function available within

120
00:09:25.700 --> 00:09:27.340
the global browser scope.

121
00:09:28.250 --> 00:09:32.610
This function will open a connection between the browser and our server.

122
00:09:33.500 --> 00:09:36.820
Now we don't want that socket connection to just float in outer space.

123
00:09:37.010 --> 00:09:40.250
We would want to keep it somewhere so we can access it later on.

124
00:09:40.600 --> 00:09:50.960
So at the start of this line, let's say this dot socket equals and then call it cool, let's go ahead

125
00:09:50.960 --> 00:09:52.220
and save this.

126
00:09:52.460 --> 00:09:58.940
And now be sure to open up your command line so that we can see any console that log messages here in

127
00:09:58.940 --> 00:09:59.800
our text editor.

128
00:10:00.920 --> 00:10:03.240
OK, at this point back in the browser.

129
00:10:03.530 --> 00:10:04.840
Be sure to refresh.

130
00:10:04.850 --> 00:10:09.800
So you're using the latest JavaScript and now just refreshing.

131
00:10:09.800 --> 00:10:12.530
Should not show any console that log messages here.

132
00:10:12.980 --> 00:10:20.900
But when I open the chat box, so when I click on this chat icon now in our command line, we should

133
00:10:20.900 --> 00:10:23.650
see a new user connected.

134
00:10:24.290 --> 00:10:24.940
Perfect.

135
00:10:25.160 --> 00:10:30.160
We have now established an ongoing connection between the browser and server.

136
00:10:30.680 --> 00:10:33.800
At this point, let's give ourselves a new goal to work towards.

137
00:10:34.340 --> 00:10:40.460
Let's set things up so that when you type a message into the chat field and then press enter to submit

138
00:10:40.460 --> 00:10:41.120
the message.
