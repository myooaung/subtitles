1
00:00:02,060 --> 00:00:02,960
Hello, everyone.

2
00:00:03,350 --> 00:00:07,190
I want to begin by emphasizing that this video is optional.

3
00:00:07,520 --> 00:00:12,440
If you've enjoyed the way the course is structured so far, feel free to skip this video.

4
00:00:12,680 --> 00:00:20,090
However, everyone learns differently, and some people really prefer to start with the finished product

5
00:00:20,390 --> 00:00:26,210
and dissect it or reverse engineer it or break it apart just to put it back together again.

6
00:00:26,540 --> 00:00:32,180
Or for some people, if their code isn't working, it's really helpful just to see a proof of concept,

7
00:00:32,420 --> 00:00:36,020
a working example of how things are supposed to work.

8
00:00:36,380 --> 00:00:42,710
So in this lesson, I'm going to help you set up the finished product of the complex app that we build

9
00:00:42,710 --> 00:00:44,210
together throughout the course.

10
00:00:44,810 --> 00:00:50,600
Again, just to be clear, this video is entirely optional if you don't need or want to have the finished

11
00:00:50,600 --> 00:00:51,620
product right away.

12
00:00:51,980 --> 00:00:57,380
Please feel free to skip this lesson anyways if this sounds like something you're interested in.

13
00:00:57,620 --> 00:01:01,100
If this matches your learning style, here's how we can begin.

14
00:01:01,460 --> 00:01:07,460
It all starts by making sure that you have something called Docker installed on your computer.

15
00:01:08,030 --> 00:01:11,140
To be more specific, it's something called Docker desktop.

16
00:01:11,150 --> 00:01:15,080
So from the official Docker website, you can just look under products.

17
00:01:15,410 --> 00:01:17,330
Click on Docker Desktop.

18
00:01:18,520 --> 00:01:22,180
OK, and then just download the version that's appropriate for your computer.

19
00:01:23,230 --> 00:01:28,990
Now all of the default options should be great, so you can just click Next, Next, next through the

20
00:01:28,990 --> 00:01:36,130
installation process and then come back and resume this video once you've actually installed the Docker.

21
00:01:36,760 --> 00:01:40,450
OK, but once you come back and resume the video, what do we do next?

22
00:01:40,750 --> 00:01:47,950
Well, within Udemy, you'll see that there is a downloadable resource associated with this lesson called

23
00:01:48,370 --> 00:01:51,880
complex finished product ZIP.

24
00:01:52,420 --> 00:01:53,260
So go ahead.

25
00:01:53,530 --> 00:01:54,340
Pause the video.

26
00:01:54,340 --> 00:01:59,110
Download that zip file and then if you extract it, you'll have a folder.

27
00:01:59,320 --> 00:02:02,020
Now, let's take a look at what's inside that folder.

28
00:02:02,800 --> 00:02:09,520
So there's an app folder that has all of the source code, so you and I throughout this course will

29
00:02:09,520 --> 00:02:11,620
write all of this code together.

30
00:02:11,800 --> 00:02:14,100
But the idea is that this is the finished product.

31
00:02:14,110 --> 00:02:19,090
So this is what you would end up with after the very final lesson in the course.

32
00:02:19,660 --> 00:02:19,940
OK.

33
00:02:19,960 --> 00:02:26,440
There's also a DB folder that's completely empty right now, but this will store the MongoDB database

34
00:02:26,440 --> 00:02:30,610
contents of your app as soon as we actually spin up these containers.

35
00:02:31,120 --> 00:02:36,640
OK, and then finally, there's a Docker compose file and this is really cool.

36
00:02:36,640 --> 00:02:42,820
So even if you don't have Node.js installed on your computer, this will use Docker and it will create

37
00:02:42,820 --> 00:02:47,920
a Node.js environment and it will create a MongoDB server.

38
00:02:48,460 --> 00:02:50,260
The two are totally connected.

39
00:02:50,530 --> 00:02:56,170
And this command will even run npm install for you and npm run watch.

40
00:02:56,470 --> 00:02:57,330
So check this out.

41
00:02:57,340 --> 00:02:58,570
Watch how easy this is.

42
00:02:59,170 --> 00:03:04,360
Assuming you've downloaded the zip file and extracted it and you have this folder, you just need to

43
00:03:04,450 --> 00:03:09,430
have a command line or your terminal point towards this new overall folder.

44
00:03:09,820 --> 00:03:15,940
So since I have it open in vs code, I can just open up the terminal control or command j and you're

45
00:03:15,940 --> 00:03:17,170
just one command away.

46
00:03:17,440 --> 00:03:24,280
So you would type this in Docker, compose up, go ahead and press enter.

47
00:03:27,050 --> 00:03:31,820
And now you will need to wait a good minute or two or depending on your internet speed, maybe even

48
00:03:31,820 --> 00:03:33,320
up to five or 10 minutes.

49
00:03:33,860 --> 00:03:39,620
But once you no longer see a steady stream of new text in your command line, that means you're ready

50
00:03:39,620 --> 00:03:41,960
to try to view the application in the browser.

51
00:03:42,290 --> 00:03:47,030
Do be patient, though it might look fast in this video, but that's because I edited out the boring

52
00:03:47,030 --> 00:03:53,280
part of waiting the minute or two for everything to download and install back in the web browser and

53
00:03:53,280 --> 00:03:53,870
a new tab.

54
00:03:53,870 --> 00:04:00,950
Just visit local host colon and then instead of three thousand, it's 80 80.

55
00:04:02,930 --> 00:04:09,890
So if I visit that perfect really quick off camera, let me sign up for a new user, OK, and then let

56
00:04:09,890 --> 00:04:12,290
me create a post just as a proof of concept.

57
00:04:12,290 --> 00:04:21,520
So first post lorem ipsum, go ahead and create that I can create a second post, second post testing.

58
00:04:22,790 --> 00:04:25,400
Create that now I can test out the search feature.

59
00:04:25,400 --> 00:04:28,340
The live search features if I search for the word first.

60
00:04:28,820 --> 00:04:30,020
Cool first post.

61
00:04:30,770 --> 00:04:33,020
So things are working just as we would expect.

62
00:04:33,770 --> 00:04:36,740
Let's talk a little bit about how our Docker setup is working.

63
00:04:36,740 --> 00:04:38,090
So for example.

64
00:04:39,010 --> 00:04:44,140
What if you wanted to change this homepage template, maybe instead of a period right here, I wanted

65
00:04:44,140 --> 00:04:45,940
this to be an exclamation mark.

66
00:04:46,570 --> 00:04:55,570
Well, back in our code inside app and then views, there's home dashboard E.j.'s around line number

67
00:04:55,570 --> 00:04:56,380
19.

68
00:04:56,620 --> 00:04:59,920
Your feed is empty exclamation mark.

69
00:05:00,370 --> 00:05:05,740
Now, the way things are set up, an Aegis template file is not going to trigger the server to refresh.

70
00:05:06,010 --> 00:05:08,580
But what you can do is just make a save change.

71
00:05:08,590 --> 00:05:12,160
You even need to change anything, just open up any main JS file.

72
00:05:12,170 --> 00:05:19,360
So for example, if you open up app dogs or DV dogs, any of our main JS files and just press controller

73
00:05:19,360 --> 00:05:25,990
commands, even though we didn't change anything that will trigger the entire system to sort of rebuild

74
00:05:25,990 --> 00:05:26,830
or refresh.

75
00:05:27,490 --> 00:05:31,720
So now back in the browser, if I refresh or reload, we see that change.

76
00:05:31,930 --> 00:05:32,650
There it is.

77
00:05:33,040 --> 00:05:33,400
Cool.

78
00:05:33,760 --> 00:05:37,520
Now let's talk about how to stop and start this Docker project.

79
00:05:37,540 --> 00:05:43,570
So in the command line, if you press control C and then you might need to press control, see a second

80
00:05:43,570 --> 00:05:45,400
time, so that stops it.

81
00:05:45,910 --> 00:05:48,340
Now how do we start the system back up again?

82
00:05:49,180 --> 00:05:49,930
Let me clear the screen.

83
00:05:49,960 --> 00:05:55,870
Well, the first time we ran Docker compose up, but you only run that the very first time to initially

84
00:05:55,870 --> 00:05:56,740
create things.

85
00:05:57,010 --> 00:06:01,570
Going forward, what you would run is Docker compose start.

86
00:06:02,290 --> 00:06:03,220
So you can run that.

87
00:06:04,870 --> 00:06:09,730
And that's going to run in the background so you can press control, see now, and that's not going

88
00:06:09,730 --> 00:06:10,810
to do anything.

89
00:06:11,200 --> 00:06:15,640
Your Docker containers are running in the background, so they're still up and available.

90
00:06:15,640 --> 00:06:16,990
You can see I can refresh.

91
00:06:17,290 --> 00:06:17,740
Cool.

92
00:06:18,190 --> 00:06:22,390
So now if you actually want to stop the Docker containers, you would say Docker compose.

93
00:06:22,660 --> 00:06:23,260
Stop.

94
00:06:24,370 --> 00:06:24,700
Cool.

95
00:06:24,880 --> 00:06:29,620
Now those start and stop commands are really the same thing as if you went into your Docker desktop

96
00:06:29,620 --> 00:06:30,610
application.

97
00:06:30,970 --> 00:06:35,530
If you hover over your project, you see the play button or the Start button, and you also see the

98
00:06:35,530 --> 00:06:36,310
Stop button.

99
00:06:36,730 --> 00:06:42,340
Finally, let's talk about how you can connect to the database that's powering the application.

100
00:06:42,910 --> 00:06:45,580
Well, the applications already connecting to the database.

101
00:06:45,580 --> 00:06:48,490
But what if you wanted to visualize the data yourself?

102
00:06:48,970 --> 00:06:53,140
Well, there's an excellent and free tool called MongoDB Compass.

103
00:06:53,680 --> 00:06:58,780
So even though we don't have a MongoDB Atlas cloud account that we can log into and visualise our data

104
00:06:58,780 --> 00:07:01,270
with, we can just use compass instead.

105
00:07:01,960 --> 00:07:07,330
So from the official MongoDB website, or if you perform a Google search for MongoDB Compass, you'll

106
00:07:07,330 --> 00:07:08,290
find this website.

107
00:07:08,560 --> 00:07:10,180
Just go ahead and download it.

108
00:07:10,180 --> 00:07:15,790
It's a free download when you open MongoDB Compass, it'll look something like this, and now we just

109
00:07:15,790 --> 00:07:18,520
need a connection string to include here.

110
00:07:19,120 --> 00:07:27,700
So back in vs code to find the connection string, you would just look for the Dot EMV file inside the

111
00:07:27,700 --> 00:07:28,690
app folder.

112
00:07:29,020 --> 00:07:32,230
So in the app folder, here it is Dot EMV.

113
00:07:33,490 --> 00:07:39,430
So it says connection string equals and then after the equals sign, you would just copy the rest of

114
00:07:39,430 --> 00:07:40,840
this line into your clipboard.

115
00:07:41,350 --> 00:07:47,080
So just like this copy that before we actually connect encompass, make sure that your Docker container

116
00:07:47,080 --> 00:07:48,560
set up is actually running.

117
00:07:48,880 --> 00:07:53,740
So I would just use the Start button to make sure that it's actually up and running and available to

118
00:07:53,740 --> 00:07:54,580
connect to.

119
00:07:54,850 --> 00:07:55,300
Cool.

120
00:07:55,570 --> 00:08:00,040
Now, back in MongoDB Compass, you would just paste in your value here, and we just need to change

121
00:08:00,040 --> 00:08:00,730
one word.

122
00:08:01,150 --> 00:08:04,000
So we see route call and route at.

123
00:08:04,240 --> 00:08:10,630
And then instead of Mongo right here, this part that I have selected, delete that and replace it with

124
00:08:10,870 --> 00:08:13,240
local host instead.

125
00:08:13,810 --> 00:08:14,680
Just like this.

126
00:08:15,100 --> 00:08:18,370
So if I go ahead and connect cool, it works flawlessly.

127
00:08:18,370 --> 00:08:19,720
There is complex app.

128
00:08:21,290 --> 00:08:26,420
Can click into that, I can click into the Post's collection, and there are the two posts that I created

129
00:08:26,420 --> 00:08:31,220
in the browser just a moment ago, and that is going to bring this video to a close.

130
00:08:31,610 --> 00:08:33,080
Let's keep our momentum rolling.

131
00:08:33,380 --> 00:08:34,760
And I'll see you in the next one.
