1
00:00:02,290 --> 00:00:03,280
Hello, everyone.

2
00:00:03,520 --> 00:00:06,730
In this lesson, we are going to set up our first model.

3
00:00:07,180 --> 00:00:14,470
Remember that in the MVC pattern, the M or model is where we enforce rules or business logic on our

4
00:00:14,470 --> 00:00:18,400
data, or we could say it's where we model our data.

5
00:00:18,910 --> 00:00:24,610
Now, aside from learning how to stay organized, the actual task that we're working on right now is

6
00:00:24,610 --> 00:00:25,970
user registration.

7
00:00:26,380 --> 00:00:33,760
So before we go ahead and create a user model file that says what a user should be, let's first make

8
00:00:33,760 --> 00:00:40,470
sure that our user controller can successfully access this form data that gets submitted right.

9
00:00:40,500 --> 00:00:46,540
We need to make sure that our user controller can access whatever the visitor types in for these values.

10
00:00:47,170 --> 00:00:54,100
So right now, let's begin by configuring our express app so that we can easily access the user's submitted

11
00:00:54,100 --> 00:00:54,460
data.

12
00:00:55,090 --> 00:01:04,510
So in our text editor, begin by opening up our app JS file and maybe right above this app, use express

13
00:01:04,510 --> 00:01:06,760
static public line right above that.

14
00:01:06,760 --> 00:01:08,410
Let's add a couple of new lines.

15
00:01:08,830 --> 00:01:18,430
Let's say app dot use and within the parentheses, let's say express dot you URL encoded and that's

16
00:01:18,430 --> 00:01:18,850
a method.

17
00:01:18,860 --> 00:01:21,040
So it gets its own set of parentheses to call it.

18
00:01:21,370 --> 00:01:27,340
And then inside those parentheses we include an object so curly brackets and then we set a property

19
00:01:27,340 --> 00:01:30,670
of extended to false.

20
00:01:31,180 --> 00:01:35,670
Again, this is just a bit of boilerplate code and there's no need to memorize this.

21
00:01:36,130 --> 00:01:41,370
It just tells Express to add the user submitted data onto our request object.

22
00:01:41,740 --> 00:01:41,970
Right.

23
00:01:42,030 --> 00:01:47,250
So then we can access it from request body while we're at it right below this line.

24
00:01:47,260 --> 00:01:57,520
Let's also say app use inside the parentheses, let's say Express, DOT, JSON and another set of parentheses

25
00:01:57,520 --> 00:01:59,000
to call that cool.

26
00:01:59,020 --> 00:02:05,800
So now our application, except the two most common ways of submitting data on the web, a traditional

27
00:02:05,800 --> 00:02:11,180
HTML form submit and also just sending over a bit of JSON data.

28
00:02:11,650 --> 00:02:13,750
Let's go ahead and save this file.

29
00:02:13,750 --> 00:02:18,820
And now I want you to jump in to your user controller JS file.

30
00:02:19,270 --> 00:02:25,480
Remember, in our previous lesson we created this register function and our router is going to call

31
00:02:25,480 --> 00:02:26,260
this function.

32
00:02:26,440 --> 00:02:32,650
Whenever someone submits this form right at the moment, that function simply sends back a response

33
00:02:32,650 --> 00:02:35,110
that says thanks for trying to register.

34
00:02:35,470 --> 00:02:41,650
Well, just as a test right above that response that send line, let's log to the console, whatever

35
00:02:41,650 --> 00:02:47,440
data they submitted from that form, just as a test to make sure that we can successfully access that

36
00:02:47,440 --> 00:02:47,810
data.

37
00:02:48,370 --> 00:02:50,590
So let's say console the log.

38
00:02:50,950 --> 00:02:54,060
And what we want to log is just request body.

39
00:02:54,680 --> 00:03:00,400
OK, let's go ahead and save this file and then also make sure that your command line is visible so

40
00:03:00,400 --> 00:03:02,620
that we can see the console, that log message.

41
00:03:03,020 --> 00:03:04,670
OK, and now let's test this out.

42
00:03:04,690 --> 00:03:07,090
So back in the browser for username.

43
00:03:07,090 --> 00:03:13,630
If I say Brad for email, if I say Brad at localhost, you just type in a random password and then submit

44
00:03:13,630 --> 00:03:14,110
the form.

45
00:03:14,830 --> 00:03:21,340
Thanks for trying to register, but back in our command line or in the console, we see an object in

46
00:03:21,340 --> 00:03:25,810
this object has three different properties username, email and password.

47
00:03:26,110 --> 00:03:26,490
Cool.

48
00:03:26,500 --> 00:03:29,390
And there are the values that I just typed in from the browser.

49
00:03:30,070 --> 00:03:37,030
So now that we've confirmed that our controller is able to access the visitors input, our next step

50
00:03:37,030 --> 00:03:41,690
is to validate this data and enforce our rules or business logic on it.

51
00:03:42,160 --> 00:03:46,510
So, for example, we need to make sure that they didn't leave one of the fields blank.

52
00:03:47,080 --> 00:03:52,270
We need to make sure that their password is a certain number of characters long for security reasons.

53
00:03:52,660 --> 00:03:58,150
We need to make sure that their email value is a valid email address, so on and so forth.

54
00:03:58,600 --> 00:04:06,010
Now, in the MVC pattern, all of those things I just listed are the responsibility of the model, not

55
00:04:06,010 --> 00:04:07,040
of the controller.

56
00:04:07,420 --> 00:04:12,780
Now, from a conceptual standpoint, we have a general idea of what a model is.

57
00:04:13,030 --> 00:04:17,530
It's where we define the structure of our data for our user model.

58
00:04:17,530 --> 00:04:20,350
It would be where we describe what a user should be.

59
00:04:20,680 --> 00:04:23,950
So that's simple enough from a conceptual perspective.

60
00:04:24,250 --> 00:04:29,320
But from a programming or JavaScript perspective, what would a model be?

61
00:04:29,740 --> 00:04:32,700
Well, there are many different ways that we could set up a model.

62
00:04:33,040 --> 00:04:39,790
But if we really think about it when we ask ourselves, what should a user be, we're probably going

63
00:04:39,790 --> 00:04:43,180
to answer that question by using nouns and verbs.

64
00:04:43,450 --> 00:04:47,800
And you know what lines up nicely with nouns and verbs and the JavaScript world?

65
00:04:48,280 --> 00:04:50,290
I would say an object, right.

66
00:04:50,410 --> 00:04:55,360
Just like nouns and verbs and object has properties and methods.

67
00:04:55,900 --> 00:05:01,690
Now, in a model, in this case, our user model, we don't want to create an object.

68
00:05:01,930 --> 00:05:08,890
As much as we want to create a blueprint or cookie cutter mold for an object, now, luckily for us,

69
00:05:09,070 --> 00:05:16,930
JavaScript allows us to create a reusable blueprint for an object by using something called a constructor

70
00:05:16,930 --> 00:05:17,540
function.

71
00:05:17,830 --> 00:05:25,300
We can set up a constructor function that spells out all of the properties and methods that a user object

72
00:05:25,300 --> 00:05:26,080
should have.

73
00:05:26,380 --> 00:05:33,520
And we can keep that constructor function neatly tucked away in a separate file that will be our user

74
00:05:33,520 --> 00:05:33,960
model.

75
00:05:34,390 --> 00:05:41,380
Then within our user controller, we can simply import or require in that model file and use it as a

76
00:05:41,380 --> 00:05:49,390
blueprint to create a new user object specific to the current request and user submitted data.

77
00:05:49,870 --> 00:05:56,500
Remember, the idea of the MVC pattern is to create three distinct components, each with their own

78
00:05:56,500 --> 00:05:57,490
responsibility.

79
00:05:57,940 --> 00:06:04,420
So all of the logic that checks the incoming data for validation errors and all of the code that makes

80
00:06:04,420 --> 00:06:10,270
up the blueprint of what a user should be that will live in a separate user model file.

81
00:06:10,690 --> 00:06:17,170
This way, our user controller stays uncluttered and is really just a middleman, calling the appropriate

82
00:06:17,320 --> 00:06:20,590
model and view commands at the appropriate times.

83
00:06:21,070 --> 00:06:25,570
Now, don't worry, all of this sounds a lot more complicated than it actually is.

84
00:06:25,910 --> 00:06:28,480
We're going to walk through it step by step together.

85
00:06:28,810 --> 00:06:36,340
So right now, I want you to follow along with me and let's create a new folder in the root of our project

86
00:06:36,340 --> 00:06:36,880
folder.

87
00:06:37,420 --> 00:06:42,670
So new folder and let's name this new subfolder models.

88
00:06:43,880 --> 00:06:47,900
Now, within this new models folder, I want us to create a new file.

89
00:06:49,740 --> 00:06:56,790
We could name this file anything, but just so we're on the same page, let's name it user dot JS and

90
00:06:56,790 --> 00:07:00,060
have it begin with an uppercase you so user.

91
00:07:00,460 --> 00:07:04,410
Yes I will explain the uppercase first letter in just a few minutes.

92
00:07:05,040 --> 00:07:08,610
But for now in this new empty file, typed this out with me.

93
00:07:09,090 --> 00:07:13,530
Let's create a variable, let's name it user to follow along again.

94
00:07:13,530 --> 00:07:20,220
That's an uppercase you and let's set it to equal an anonymous function function parentheses, curly

95
00:07:20,220 --> 00:07:24,140
brackets and this will be our constructor function.

96
00:07:24,450 --> 00:07:29,640
This will be the reuseable blueprint that can be used to create user objects.

97
00:07:30,090 --> 00:07:35,640
In other words, we're going to want to be able to leverage this function from within our user controller

98
00:07:35,640 --> 00:07:36,050
file.

99
00:07:36,570 --> 00:07:42,810
So at the very, very bottom of this file, even below this closing curly bracket, let's be sure to

100
00:07:42,810 --> 00:07:44,730
export this function.

101
00:07:45,030 --> 00:07:53,460
So to refresh your memory, you can control what a file exports by saying module dot exports and then

102
00:07:53,460 --> 00:07:55,680
just set it to equal whatever you want.

103
00:07:55,950 --> 00:07:58,920
In this case, it would just be our user variable.

104
00:07:59,460 --> 00:08:05,130
Now, obviously, a completely empty function isn't very useful, but for the time being, let's go

105
00:08:05,130 --> 00:08:11,880
ahead and save this file, because since we've set up what it exports, that means we are ready to import

106
00:08:11,880 --> 00:08:13,730
it from within our controller file.

107
00:08:14,220 --> 00:08:21,510
So jump back into the user controller, DOT Jazz and up at the very, very top of this file, let's

108
00:08:21,510 --> 00:08:31,050
import or require in our model so we can just say const user equals and then let's use require to pull

109
00:08:31,050 --> 00:08:34,410
in that file and we're going to provide a file path.

110
00:08:34,980 --> 00:08:42,810
Let's begin with dot, dot, dot, dot, slash is how you can move up one directory or folder.

111
00:08:43,110 --> 00:08:46,980
Right, because this file lives within the controllers subfolder.

112
00:08:47,280 --> 00:08:51,120
So we want to move up one folder out of the controllers folder.

113
00:08:51,540 --> 00:08:55,380
So where our cursor is that would place us into the root of our project folder.

114
00:08:55,620 --> 00:09:01,710
And then we want to look within the models folder and then we want to pull in the file named user.

115
00:09:02,280 --> 00:09:02,850
All right.

116
00:09:03,000 --> 00:09:09,510
Now that we've taken care of the organization factor of splitting our code into separate files, let's

117
00:09:09,510 --> 00:09:17,370
get to the actual JavaScript or programming factor and learn how to create a new object using this reusable

118
00:09:17,370 --> 00:09:19,440
blueprint or constructor function.

119
00:09:19,770 --> 00:09:24,300
So check this out within our controller file, within our register function.

120
00:09:24,780 --> 00:09:33,120
Let's get rid of this console log test line and instead let's create a variable, let's name it user.

121
00:09:33,120 --> 00:09:38,880
But this time with a lowercase, you all lowercase and let's set it to equal.

122
00:09:39,180 --> 00:09:45,710
And this is the interesting part, a new instance of uppercase user.

123
00:09:46,260 --> 00:09:52,470
Now, this is our first time seeing the new keyword or new operator in JavaScript.

124
00:09:52,890 --> 00:09:54,390
So what in the world is it doing?

125
00:09:54,720 --> 00:10:02,550
Well, the oversimplified answer is that it's going to create a new object using this as its blueprint.

126
00:10:03,090 --> 00:10:05,850
This is where I'll circle back to the uppercase U.

127
00:10:05,850 --> 00:10:06,630
And user here.

128
00:10:07,080 --> 00:10:09,180
We did not have to capitalize.

129
00:10:09,180 --> 00:10:14,220
This is just a common conventional preference amongst many programmers.

130
00:10:14,430 --> 00:10:21,990
To capitalize your blueprint, we capitalize the blueprint or cookie cutter mold for objects so that

131
00:10:21,990 --> 00:10:26,730
it's easy to distinguish it between the actual object that we're creating.

132
00:10:27,150 --> 00:10:33,750
So, for example, we could have other variables like user two equals a new instance of user and user

133
00:10:33,750 --> 00:10:36,030
three equals a new instance of user.

134
00:10:36,300 --> 00:10:36,570
Right?

135
00:10:36,570 --> 00:10:40,530
So uppercase user is the reusable blueprint.

136
00:10:40,830 --> 00:10:47,250
It doesn't need to be uppercase, but it helps us distinguish it from the actual objects that are being

137
00:10:47,250 --> 00:10:50,760
created using that blueprint at this point.

138
00:10:50,760 --> 00:10:53,130
Let's try spelling out our blueprint a bit.

139
00:10:53,460 --> 00:11:01,290
So let's imagine, just as a silly experiment, that we want all of these user objects to have a property

140
00:11:01,290 --> 00:11:06,510
named Home Planet and we would want it to have a value of Earth.

141
00:11:06,900 --> 00:11:08,550
Let me show you how we could set that up.

142
00:11:08,790 --> 00:11:16,620
So in our user JS model file up on line number two within the body of our constructor function, type

143
00:11:16,620 --> 00:11:17,580
this out with me.

144
00:11:18,000 --> 00:11:23,910
This don't worry, I will explain how the this keyword works in this context in just a minute.

145
00:11:24,300 --> 00:11:33,540
But let's say this dot home planet and then just set it to equal a string of text that says Earth.

146
00:11:33,960 --> 00:11:40,620
And now any object that is created using this constructor function is going to have a property named

147
00:11:40,620 --> 00:11:41,460
Home Planet.

148
00:11:41,970 --> 00:11:49,200
So back in our controller below these three user objects, we could say lowercase user dot home planet.

149
00:11:50,010 --> 00:11:56,310
Right, and this would pull in a value of Earth and we could do the same thing for our user to object

150
00:11:56,640 --> 00:11:59,830
and our user three object, right?

151
00:11:59,850 --> 00:12:04,860
Any object that is created using that blueprint will have that property.

152
00:12:05,280 --> 00:12:08,680
Now, let's talk about how this is working from a technical standpoint.

153
00:12:09,120 --> 00:12:11,610
So let's jump back into our model file.

154
00:12:12,060 --> 00:12:15,720
And in particular, let's talk about the this key word.

155
00:12:16,230 --> 00:12:23,640
So back in the 10 days of JavaScript, we talked briefly about this key word back then to refresh your

156
00:12:23,640 --> 00:12:24,090
memory.

157
00:12:24,240 --> 00:12:31,420
We learned that this key word points towards whatever is calling or executing the current function.

158
00:12:31,830 --> 00:12:38,040
So in the case of the new operator and a constructor function, let's take this line of code for an

159
00:12:38,040 --> 00:12:38,640
example.

160
00:12:39,090 --> 00:12:43,800
The new keyword is going to create a new empty or plain object.

161
00:12:44,280 --> 00:12:50,820
And then it's essentially as if that new empty object, that's what's calling or executing the constructor

162
00:12:50,820 --> 00:12:51,300
function.

163
00:12:51,750 --> 00:12:58,230
So since that new object is what's calling the constructor function, the this keyword is going to be

164
00:12:58,230 --> 00:13:00,390
pointing towards that new object.

165
00:13:00,780 --> 00:13:08,130
So then when that function actually runs, when we say this home planet, it's like we're actually saying

166
00:13:08,550 --> 00:13:15,600
the current object that is being created, dot home planet, or, for example, on this line of code,

167
00:13:16,140 --> 00:13:22,370
the object that this is going to return is getting stored into our variable lowercase user.

168
00:13:22,680 --> 00:13:26,790
So it's almost as if we are saying lowercase user, home planet.

169
00:13:27,360 --> 00:13:33,780
And then on this line of code, when we're creating a variable named user two, it's almost as if we

170
00:13:33,780 --> 00:13:41,220
are saying user to home planet so that this keyword is what allows our blueprint to be flexible.

171
00:13:41,610 --> 00:13:45,750
It's how we point towards the current object that is going to get created.

172
00:13:46,230 --> 00:13:47,550
OK, now, moving on.

173
00:13:47,790 --> 00:13:53,910
At this point, we've seen an example of how to set up a property within our blueprint, but what about

174
00:13:53,910 --> 00:13:54,680
a method?

175
00:13:55,080 --> 00:14:01,440
So, for example, back in our controller, what if we wanted our blueprint to give our objects a method

176
00:14:01,440 --> 00:14:09,210
named jump so we could say something like user to dot, jump and then parentheses to actually call or

177
00:14:09,210 --> 00:14:10,500
execute that method?

178
00:14:10,860 --> 00:14:16,290
The idea being we would want our blueprint to spell out the basic actions that are object should be

179
00:14:16,290 --> 00:14:19,900
able to perform things like jump, run, walk.

180
00:14:20,430 --> 00:14:21,760
So how would we set this up?

181
00:14:22,110 --> 00:14:27,340
First, let's look at the obvious way and then after that we will look at the more efficient way.

182
00:14:27,930 --> 00:14:36,720
So back in our model file, right below this this home planet line, we could just say this dot jump

183
00:14:37,230 --> 00:14:39,370
and just set it to equal a function.

184
00:14:39,930 --> 00:14:44,100
This is the obvious way to set things up and there's nothing wrong with it.

185
00:14:44,290 --> 00:14:46,230
It would definitely get the job done.

186
00:14:46,540 --> 00:14:52,830
And in this example case, since we're only creating three objects, there's absolutely nothing wrong

187
00:14:52,830 --> 00:14:54,330
with that way of doing things.

188
00:14:54,680 --> 00:15:01,800
However, what if we were creating five hundred objects using this blueprint, or what if we were creating

189
00:15:01,980 --> 00:15:04,940
10000 objects using this blueprint?

190
00:15:05,340 --> 00:15:11,400
Well, in that case, this would not be the ideal way of adding a method, because JavaScript is going

191
00:15:11,400 --> 00:15:18,390
to create a copy or add this method to all 10000 objects that are being created.

192
00:15:18,720 --> 00:15:20,270
And that's a lot of duplication.

193
00:15:20,580 --> 00:15:23,990
So that's not the most efficient way from a computing standpoint.

194
00:15:24,390 --> 00:15:26,730
So let's get rid of this this dot jump line.

195
00:15:26,730 --> 00:15:32,580
And let me show you another way that you can add methods to your blueprint right below our constructor

196
00:15:32,580 --> 00:15:32,980
function.

197
00:15:33,000 --> 00:15:33,750
Let's do this.

198
00:15:33,750 --> 00:15:40,350
Let's say uppercase user dot, prototype dot.

199
00:15:40,350 --> 00:15:45,660
And then the name of the method in this case, we'll call it jump and then we can set that to equal

200
00:15:45,660 --> 00:15:48,630
a function using this syntax.

201
00:15:48,720 --> 00:15:54,060
JavaScript will not need to create a copy of this function once for each new object.

202
00:15:54,360 --> 00:16:01,730
Instead, any object created using this constructor function will simply have access to this method.

203
00:16:02,160 --> 00:16:09,600
So even if we created 10000 objects using our blueprint, JavaScript is not going to duplicate the jump

204
00:16:09,600 --> 00:16:10,170
function.

205
00:16:10,500 --> 00:16:16,980
All ten thousand objects would just point towards or have access to this one copy of the jump method,

206
00:16:17,280 --> 00:16:18,710
which is much more efficient.

207
00:16:19,200 --> 00:16:19,610
All right.

208
00:16:19,620 --> 00:16:21,540
At this point, let's change gears.

209
00:16:21,930 --> 00:16:29,370
Now that we've learned how to add both properties and methods to our object blueprint, let's get back

210
00:16:29,370 --> 00:16:36,800
to the actual task at hand of user registration and validating their form field inputs.

211
00:16:37,290 --> 00:16:44,190
So back in our user controller file, we do not actually need to call a fictitious jump method.

212
00:16:44,190 --> 00:16:45,210
So let's get rid of that.

213
00:16:45,600 --> 00:16:49,020
And we don't actually need to access a fictitious property.

214
00:16:49,130 --> 00:16:54,530
Amed home planet, let's get rid of that, nor do we need to create user to or user three.

215
00:16:54,800 --> 00:16:59,420
In this case, we just need one object to represent the current request.

216
00:16:59,780 --> 00:17:00,000
Right.

217
00:17:00,050 --> 00:17:06,200
The form that was just submitted by the current visitor also and this is important when we are creating

218
00:17:06,200 --> 00:17:07,250
this new object.

219
00:17:07,460 --> 00:17:07,730
Right.

220
00:17:07,730 --> 00:17:13,340
When we are using the new keyword and then calling the constructor function within these parentheses,

221
00:17:13,340 --> 00:17:15,110
let's pass it an argument.

222
00:17:15,530 --> 00:17:19,630
Let's posit the form field values that the visitor just submitted.

223
00:17:20,060 --> 00:17:25,080
So within these parentheses, let's just say request body, OK?

224
00:17:25,130 --> 00:17:32,030
And then back in our user model file up on the first line of code within the parentheses for our function,

225
00:17:32,240 --> 00:17:35,420
let's receive that incoming data with the parameter.

226
00:17:35,660 --> 00:17:38,870
So within these parentheses, I'll make up a parameter name of data.

227
00:17:39,200 --> 00:17:43,580
You could use any name for your parameter, but let's go with this just so you and I are on the same

228
00:17:43,580 --> 00:17:44,180
page.

229
00:17:44,390 --> 00:17:44,800
All right.

230
00:17:44,810 --> 00:17:50,060
And then within the body of this function, we don't actually need a property named Home Planet, so

231
00:17:50,060 --> 00:17:51,050
let's get rid of that.

232
00:17:51,680 --> 00:17:57,100
And instead, let's say this DOT data equals data.

233
00:17:57,560 --> 00:18:03,860
In other words, we're taking that data that just got passed in via the parameter and we're storing

234
00:18:03,860 --> 00:18:06,760
it within a property that we can access again later.

235
00:18:07,220 --> 00:18:09,140
Just a quick note to avoid confusion.

236
00:18:09,140 --> 00:18:11,290
These names do not need to match.

237
00:18:11,330 --> 00:18:15,470
This could be this dot pizza or this dot unicorn.

238
00:18:15,920 --> 00:18:18,110
The idea is that we're just creating a property.

239
00:18:18,110 --> 00:18:24,830
The name isn't important to store that form data that would otherwise be gone as soon as this function

240
00:18:24,830 --> 00:18:26,020
finished executing.

241
00:18:26,300 --> 00:18:28,460
So we are storing the user's input.

242
00:18:28,490 --> 00:18:30,510
Let me put this back to data, OK?

243
00:18:30,680 --> 00:18:36,830
And then down on this method, we don't actually need a method named jump, but let's just change this

244
00:18:36,830 --> 00:18:43,240
to register because our user object absolutely should have a method named register.

245
00:18:44,090 --> 00:18:50,780
All right, then back in our controller file, after we create our lowercase user using our constructor

246
00:18:50,780 --> 00:18:56,840
function, let's just say user dot and then call our register method.

247
00:18:57,320 --> 00:18:59,060
So let's go ahead and save that.

248
00:18:59,060 --> 00:19:06,650
And then back in our model file within that register function before we would actually register the

249
00:19:06,650 --> 00:19:14,600
user or in other words, save the user to a database, we would first want to validate their user name,

250
00:19:14,600 --> 00:19:16,400
email and password values.

251
00:19:16,550 --> 00:19:20,120
Or in other words, we would want to enforce all of our business logic.

252
00:19:20,390 --> 00:19:25,040
And that is exactly what we're going to set up here in our very next lesson.

253
00:19:25,310 --> 00:19:26,750
Just a quick note at the end here.

254
00:19:26,750 --> 00:19:33,380
If you want to see an example of the new keyword and new operator and how it works with the constructor

255
00:19:33,380 --> 00:19:40,100
function without the complication of splitting things up into separate files, you can check out a super

256
00:19:40,100 --> 00:19:46,100
simplified code pen example that I've included a link to in the resources for this lesson.

257
00:19:46,550 --> 00:19:48,830
You do not need to take a look at that example.

258
00:19:48,830 --> 00:19:53,110
It's only if the new keyword is still a bit confusing and cloudy for you.

259
00:19:53,450 --> 00:19:53,860
Cool.

260
00:19:53,990 --> 00:19:58,790
Either way, let's keep things rolling and I will see you in the next lesson.
