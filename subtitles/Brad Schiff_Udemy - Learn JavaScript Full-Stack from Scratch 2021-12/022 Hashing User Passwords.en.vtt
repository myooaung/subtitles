WEBVTT
1
00:00:01.650 --> 00:00:02.670
Hello, everyone.

2
00:00:03.000 --> 00:00:10.110
In this lesson, we are going to learn how to hash user passwords now right away, you're probably wondering

3
00:00:10.110 --> 00:00:11.820
what in the world does that mean?

4
00:00:12.210 --> 00:00:17.340
Well, to answer this, let's jump in to our Mongo DB Atlus account.

5
00:00:17.910 --> 00:00:25.050
Remember, you can just go to Mongo DB dot com and then sign in from the collection screen within our

6
00:00:25.050 --> 00:00:29.250
complex app database, within the user's collection.

7
00:00:29.550 --> 00:00:38.010
Remember, this is where we have one document per user and each document has different fields like username,

8
00:00:38.460 --> 00:00:40.590
email and password.

9
00:00:41.010 --> 00:00:47.760
Now you'll notice that we're just storing their actual password value in plain, simple text.

10
00:00:48.150 --> 00:00:55.620
This is a bad practice because worst case scenario, if our database was ever compromised or attacked

11
00:00:55.620 --> 00:01:01.230
or leaked, well, then we would be revealing the user's actual password value.

12
00:01:01.650 --> 00:01:07.980
And a lot of people use the same password for every app or service that they use.

13
00:01:08.370 --> 00:01:11.550
So with great power comes great responsibility.

14
00:01:11.880 --> 00:01:19.530
If users are trusting us with potentially the same password that they also use for their email account

15
00:01:19.530 --> 00:01:26.460
or their banks website, we want to be careful to set things up so that even in a worst case scenario,

16
00:01:26.700 --> 00:01:33.750
even if our database was leaked to an attacker, we would still not be revealing their actual password

17
00:01:33.750 --> 00:01:34.390
values.

18
00:01:34.590 --> 00:01:42.360
So what we can do is when a user registers for our app and they choose a password, we can hash that

19
00:01:42.360 --> 00:01:49.410
password value within our note server and then we can store that hash value in our database.

20
00:01:49.800 --> 00:01:53.740
Hashing a value just means converting it into a different value.

21
00:01:54.060 --> 00:02:00.990
So, for example, if a user registered and typed this in as their password, we can hash that and then

22
00:02:01.020 --> 00:02:07.230
this would be the hash value and that is what we would actually store in our database.

23
00:02:07.680 --> 00:02:13.470
The reason this is a good idea is because harshing is not the same thing as encrypting.

24
00:02:13.740 --> 00:02:19.110
When you encrypt a value, that implies that it can be decrypted, right.

25
00:02:19.130 --> 00:02:22.230
So encryption and decryption is a two way street.

26
00:02:22.650 --> 00:02:26.670
However, hashing a value is a one way street.

27
00:02:27.090 --> 00:02:30.210
I've heard people use the following metaphor with hashing.

28
00:02:30.510 --> 00:02:37.260
It's as if someone wrote a value down on a piece of paper and then you burned that piece of paper into

29
00:02:37.260 --> 00:02:41.310
ashes so you can convert paper into ash.

30
00:02:41.490 --> 00:02:43.200
But we can't go back.

31
00:02:43.380 --> 00:02:48.510
There's no way to convert those burnt ashes back into that original piece of paper.

32
00:02:48.930 --> 00:02:50.600
That's what hashing is like.

33
00:02:50.850 --> 00:02:55.470
So for this security password situation, it's the perfect fit.

34
00:02:55.920 --> 00:03:02.310
Even if an attacker somehow got access to our database, all they would see for the password are these

35
00:03:02.310 --> 00:03:03.650
hash values.

36
00:03:04.110 --> 00:03:04.510
Cool.

37
00:03:04.740 --> 00:03:08.910
Now, before we get started actually implementing this hash feature.

38
00:03:09.180 --> 00:03:14.730
Let's begin by deleting all user documents that are currently in our database.

39
00:03:15.000 --> 00:03:21.060
Right, because we want a fresh start with only secure hashed password values in our database.

40
00:03:21.390 --> 00:03:27.900
So in Mongo DB Atlas, if you hover over a user document, you'll see this trash can symbol in the top

41
00:03:27.900 --> 00:03:28.700
right corner of it.

42
00:03:28.920 --> 00:03:34.350
Go ahead and click that and just delete any sample or test users that you've created so far.

43
00:03:35.580 --> 00:03:41.900
Cool, so now that our users collection is empty, once again, let's implement a hashing feature.

44
00:03:42.330 --> 00:03:50.100
So jump into your text editor and I want you to jump in to our uppercase User Digest model file in our

45
00:03:50.100 --> 00:03:52.990
user model file within the register function.

46
00:03:53.280 --> 00:03:57.000
This is where we can convert their password into a hash value.

47
00:03:57.480 --> 00:04:03.300
Now, before we actually set this up, we need to go out to the JavaScript grocery store or NPM and

48
00:04:03.300 --> 00:04:07.360
pick up a package that will handle that converting or hashing for us.

49
00:04:07.620 --> 00:04:09.330
So open up your command line.

50
00:04:09.870 --> 00:04:15.780
If your server or app is already running, you can press control, see to stop it and run this command

51
00:04:15.780 --> 00:04:19.410
with me, npm install.

52
00:04:19.950 --> 00:04:27.960
And in the JavaScript world, there's a very popular hashing package named B Creped J.

53
00:04:28.010 --> 00:04:33.120
It's all lowercase, all one word decrypt JS.

54
00:04:33.630 --> 00:04:35.160
All right, go ahead and press enter.

55
00:04:36.150 --> 00:04:40.590
OK, now that we've installed that package, we can go ahead and tell our server to begin running again.

56
00:04:40.590 --> 00:04:42.150
So npm run watch.

57
00:04:43.480 --> 00:04:50.010
OK, now up at the very top of our user model file, let's require in that new package.

58
00:04:50.400 --> 00:04:57.690
So new line let's say const and call it B creped and let's set that to equal and then just required

59
00:04:57.690 --> 00:05:02.660
in so require in the name of the package was B Creped J.

60
00:05:02.820 --> 00:05:03.290
Yes.

61
00:05:03.690 --> 00:05:08.970
All right, so now let's go leverage B creped down in our register function.

62
00:05:10.110 --> 00:05:18.780
So scroll down in the user model until you find this area that begins User Prototyp Dot Register.

63
00:05:19.320 --> 00:05:19.740
All right.

64
00:05:19.740 --> 00:05:26.010
Now, there's no sense wasting our servers, processing power, converting a password into a hash unless

65
00:05:26.130 --> 00:05:29.940
there's no validation errors with the user's inputted data.

66
00:05:30.390 --> 00:05:37.140
So within this if statement that says only if there are no errors or in other words, right above this

67
00:05:37.140 --> 00:05:43.620
line where we say users collection, insert one right above that, let's add a new line and we can write

68
00:05:43.620 --> 00:05:45.930
a comment to ourselves to stay organized.

69
00:05:45.930 --> 00:05:52.350
We can say hash user password and using decrypt is a two step process.

70
00:05:52.530 --> 00:05:55.290
So first, we want to create something called a salt.

71
00:05:55.560 --> 00:06:06.900
So let's say let salt equal and then we use the B Creped package to call a method named Jen Salt Sync.

72
00:06:07.620 --> 00:06:10.770
Within these parentheses, let's include a value of ten.

73
00:06:11.340 --> 00:06:16.650
Anyways, once we've generated the salt now we can actually generate the hash.

74
00:06:16.980 --> 00:06:21.450
So below this line we want to overwrite the user's password value.

75
00:06:21.450 --> 00:06:31.740
So let's say this data dot password equals and then we use the decrypt package and we call a method

76
00:06:31.740 --> 00:06:34.110
named hash sync.

77
00:06:34.920 --> 00:06:36.690
We give this method to arguments.

78
00:06:36.690 --> 00:06:38.520
So a comma B as placeholders.

79
00:06:38.790 --> 00:06:42.180
The first argument is the value that you want to hash.

80
00:06:42.420 --> 00:06:49.290
So this would be the password that the user just tried to type in this dot data dot password.

81
00:06:49.950 --> 00:06:52.860
And then the second value is your salt value.

82
00:06:52.870 --> 00:07:00.750
So we created a variable named Salt and now we are good to go right, because this data is what's getting

83
00:07:00.750 --> 00:07:03.420
stored as a document in the database.

84
00:07:03.780 --> 00:07:08.820
And we just updated the password value within this DOT data.

85
00:07:09.540 --> 00:07:13.050
So let's save this file and take it for a test drive.

86
00:07:13.560 --> 00:07:18.150
So back on our website, let's try to register as a new user.

87
00:07:18.750 --> 00:07:20.100
So user name Brad.

88
00:07:20.430 --> 00:07:26.400
Brad at Brad dot com for my password I will choose quarte quarte.

89
00:07:27.750 --> 00:07:28.950
OK, let's sign up.

90
00:07:30.420 --> 00:07:31.870
Congrats, there are no errors.

91
00:07:32.040 --> 00:07:39.750
Now let's go look in our Mongo DB Atlus account within our users collection, we can click fine to reload

92
00:07:39.750 --> 00:07:40.630
the latest data.

93
00:07:41.190 --> 00:07:41.830
Awesome.

94
00:07:42.000 --> 00:07:46.140
So now in our database, look what's being stored for the password value.

95
00:07:46.860 --> 00:07:53.680
Even if an attacker somehow got access to our database, this hash value is of no use to them.

96
00:07:54.120 --> 00:07:58.250
This means we have successfully protected our users passwords.

97
00:07:58.680 --> 00:08:03.380
However, we do still need to update our login function.

98
00:08:03.930 --> 00:08:09.960
What I mean by this, if we go back to our app, back to the home page, when a user tries to log in

99
00:08:10.200 --> 00:08:16.320
and we are comparing the password that they are trying to log in with, with the actual password in

100
00:08:16.320 --> 00:08:23.190
the database, well, we need to change how that comparison works now that we are storing a hash value.

101
00:08:23.820 --> 00:08:25.120
Let me show you what I mean.

102
00:08:25.170 --> 00:08:32.430
So back in our text editor within our user model that scroll up and find the login function.

103
00:08:33.600 --> 00:08:42.180
So it begins with User Prototyp Log in and remember, we set up this if statement to see if the login

104
00:08:42.180 --> 00:08:43.720
should be successful or not.

105
00:08:44.100 --> 00:08:50.190
So the first condition is to see if the user name that they're trying to log in with actually matches

106
00:08:50.190 --> 00:08:51.630
a user in the database.

107
00:08:51.960 --> 00:08:58.950
And then for the second condition, we are checking to see if the password stored in the database double

108
00:08:58.950 --> 00:09:04.390
equals sign or matches the password that the user just tried to log in with.

109
00:09:04.710 --> 00:09:10.410
Well, when it comes to the password value that is stored in the database, now that we are storing

110
00:09:10.410 --> 00:09:15.990
a hash value, this is never going to evaluate to true right.

111
00:09:16.080 --> 00:09:23.260
If the user tries to log in with corty Cordie, that's not going to equal that long hash value.

112
00:09:23.580 --> 00:09:30.360
So for this second condition, this part that comes after the ampersand ampersand, we need to use the

113
00:09:30.360 --> 00:09:33.600
B creped package to compare values.

114
00:09:33.900 --> 00:09:40.260
So let's delete beginning right after the ampersand ampersand and delete until the closing parentheses,

115
00:09:40.260 --> 00:09:44.490
right after this dot data dot password instead.

116
00:09:44.490 --> 00:09:51.170
Let's use the decrypt package and we want to call a method that it has named compare sink.

117
00:09:51.960 --> 00:09:58.050
We give this method to arguments so we could say a comma B as placeholders for the first argument.

118
00:09:58.050 --> 00:10:00.960
Let's include the password that the user just typed in.

119
00:10:01.350 --> 00:10:03.990
This would be something that is not already hashed.

120
00:10:04.140 --> 00:10:11.280
So this dot data, dot password and then for the second value instead of B, this would be the hash

121
00:10:11.370 --> 00:10:13.020
value from our database.

122
00:10:13.320 --> 00:10:18.030
So attempted user dot password.

123
00:10:18.720 --> 00:10:24.690
OK, so Decrypt is going to perform that same hashing operation on the password that they are trying

124
00:10:24.690 --> 00:10:25.790
to log in with.

125
00:10:25.800 --> 00:10:32.430
And then if it determines that's a match with this hash value, well then compare async is going to

126
00:10:32.430 --> 00:10:34.290
return a value of true.

127
00:10:34.710 --> 00:10:36.970
If they're not a match, it returns false.

128
00:10:37.410 --> 00:10:40.170
So let's go ahead and save this and test it out.

129
00:10:40.860 --> 00:10:43.710
So back in the browser, let's try to log in.

130
00:10:44.340 --> 00:10:46.500
So username Brad first.

131
00:10:46.500 --> 00:10:48.840
I'll type an incorrect value on purpose.

132
00:10:48.840 --> 00:10:54.150
So if I log in with just a bogus value, we see invalid username password.

133
00:10:54.270 --> 00:10:54.750
Cool.

134
00:10:54.960 --> 00:11:02.580
But if I go back and use Brad and actually type the correct password of Quarte Keerthi.

135
00:11:04.460 --> 00:11:07.610
And log in, awesome, we see congrats.

136
00:11:08.090 --> 00:11:13.940
So as far as the users of our app are concerned, they have no idea that this hashing is even going

137
00:11:13.940 --> 00:11:14.330
on.

138
00:11:14.660 --> 00:11:16.850
They register with the password that they want.

139
00:11:17.030 --> 00:11:19.010
They log in with that same password.

140
00:11:19.190 --> 00:11:23.130
And all of this hashing just goes on behind the scenes.

141
00:11:23.150 --> 00:11:24.650
It's the best of both worlds.

142
00:11:24.890 --> 00:11:27.430
Users get to use whatever passwords they want.

143
00:11:27.590 --> 00:11:34.400
And this way, even if our database is ever compromised, we're not leaking those actual passwords of

144
00:11:34.400 --> 00:11:35.250
our users.

145
00:11:35.780 --> 00:11:40.150
Now, before we bring this lesson to a close, I do want to cover one detail.

146
00:11:40.550 --> 00:11:46.370
Let's jump in to our user model file, and I want you to dig into our validate function.

147
00:11:47.030 --> 00:11:50.690
So it begins with user prototype dot validate.

148
00:11:50.900 --> 00:11:57.920
This may not be the case any longer, but I know that in the past Decrypt had a maximum value limit

149
00:11:58.190 --> 00:12:02.120
and once you crossed that limit, it would start truncating the value.

150
00:12:02.390 --> 00:12:07.940
So what I'm getting at here is we would want to limit the maximum allowed password.

151
00:12:08.180 --> 00:12:10.850
We'd want to change this now that we're using decrypt.

152
00:12:11.090 --> 00:12:15.320
So previously we had the maximum password set to 100.

153
00:12:15.830 --> 00:12:22.550
I'm actually going to change this to 50 now just for the sake of decrypt and its potential maximum limits.

154
00:12:22.940 --> 00:12:24.200
So change that to 50 there.

155
00:12:24.200 --> 00:12:27.740
And then towards the end of this line, we would change the customer message.

156
00:12:28.100 --> 00:12:32.740
Password cannot exceed and then let's say 50 characters.

157
00:12:33.140 --> 00:12:33.620
Cool.

158
00:12:33.650 --> 00:12:34.730
Be sure to save that.

159
00:12:35.030 --> 00:12:38.190
And that's going to bring this lesson to a close.

160
00:12:38.640 --> 00:12:41.900
Now, I have some exciting news over the last few lessons.

161
00:12:41.900 --> 00:12:47.810
We've been learning important best practices, but we haven't really been moving closer towards completing

162
00:12:47.810 --> 00:12:48.770
the application.

163
00:12:48.950 --> 00:12:50.930
Well, in our next lesson.

164
00:12:51.170 --> 00:12:59.060
We are going to learn what it means to truly log a user in meaning if a user types in a valid username

165
00:12:59.060 --> 00:13:05.060
and password into that login form, we don't just want to show them this message that says congrats.

166
00:13:05.450 --> 00:13:08.530
We would want to show them the actual application.

167
00:13:08.750 --> 00:13:14.510
So if they went back to the homepage you URL, we would need some way to determine that the current

168
00:13:14.510 --> 00:13:18.590
request to this new URL is, quote, logged in.

169
00:13:18.860 --> 00:13:24.530
And instead of showing them this guest registration page, we should show them a template that looks

170
00:13:24.530 --> 00:13:26.560
like this big picture.

171
00:13:26.570 --> 00:13:30.950
The idea is how do we really, quote, log a user in?

172
00:13:31.250 --> 00:13:38.180
Meaning, how do we set up our server to be able to trust that subsequent requests after a successful

173
00:13:38.180 --> 00:13:41.390
login should be trusted as that user?

174
00:13:41.690 --> 00:13:45.140
This is where things get truly interesting.

175
00:13:45.410 --> 00:13:48.410
I think this is going to be an aha moment for you.

176
00:13:48.710 --> 00:13:53.180
So let's keep things rolling and I will see you in the next lesson.
