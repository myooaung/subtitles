1
00:00:00,840 --> 00:00:03,070
[Autogenerated] All right, let's dive in now.

2
00:00:03,070 --> 00:00:05,910
The first thing we're going to look at within Amazon

3
00:00:05,910 --> 00:00:09,140
CloudWatch is what's called metrics.

4
00:00:09,140 --> 00:00:09,650
Now.

5
00:00:09,650 --> 00:00:13,350
Metrics are one of the key components that make up

6
00:00:13,350 --> 00:00:15,440
the Amazon CloudWatch service.

7
00:00:15,440 --> 00:00:19,370
So CloudWatch used to be primarily just a metric

8
00:00:19,370 --> 00:00:23,640
monitoring service offered to us by A W S.

9
00:00:23,640 --> 00:00:29,940
But it's really morphed into a major critical service that offers a lot more.

10
00:00:29,940 --> 00:00:32,430
So let's go ahead and check some of this stuff out.

11
00:00:32,430 --> 00:00:37,990
Now let's go to CloudWatch in the first thing we can see over here

12
00:00:37,990 --> 00:00:42,830
on the left is the abundance of resource is and services that

13
00:00:42,830 --> 00:00:46,340
belonged to the CloudWatch services itself.

14
00:00:46,340 --> 00:00:51,120
Now the primary key components you need to know for your solutions.

15
00:00:51,120 --> 00:00:58,540
Architect exams are alarms, logs, metrics and then events,

16
00:00:58,540 --> 00:01:02,340
and we'll cover all of those here later on.

17
00:01:02,340 --> 00:01:05,400
But for now, we're going to focus on metrics.

18
00:01:05,400 --> 00:01:06,580
So let me go ahead.

19
00:01:06,580 --> 00:01:08,840
I'm going to go to metrics,

20
00:01:08,840 --> 00:01:11,990
and this brings us to a graph screen with some

21
00:01:11,990 --> 00:01:14,540
metrics listed at the bottom here.

22
00:01:14,540 --> 00:01:14,790
Now,

23
00:01:14,790 --> 00:01:19,300
metrics are strictly data about the performance of our

24
00:01:19,300 --> 00:01:22,840
systems that's reporting to CloudWatch.

25
00:01:22,840 --> 00:01:26,430
So it's important to notice here that it's not necessarily.

26
00:01:26,430 --> 00:01:31,650
Only a W s resource is if you have hybrid architectures.

27
00:01:31,650 --> 00:01:34,490
You could also push metrics to CloudWatch.

28
00:01:34,490 --> 00:01:37,940
It just takes a little bit more configuration.

29
00:01:37,940 --> 00:01:39,380
Now to build on that,

30
00:01:39,380 --> 00:01:45,460
there are two main types of monitoring offered to us by a W s.

31
00:01:45,460 --> 00:01:47,170
There's free monitoring.

32
00:01:47,170 --> 00:01:51,640
So it's built in metrics for several different resource is.

33
00:01:51,640 --> 00:01:56,500
And then there's detailed monitoring for specific resource is and that

34
00:01:56,500 --> 00:02:00,340
allows us to also publish our own application metrics.

35
00:02:00,340 --> 00:02:04,040
Okay, so now that we have a better understanding of all of that,

36
00:02:04,040 --> 00:02:06,610
let's go ahead and dig into these metrics.

37
00:02:06,610 --> 00:02:10,840
Now, on the bottom half of the screen here, we can see all metrics.

38
00:02:10,840 --> 00:02:11,040
Now,

39
00:02:11,040 --> 00:02:15,540
these metrics are specific to what metrics we have created

40
00:02:15,540 --> 00:02:18,520
and pushed to CloudWatch in our account.

41
00:02:18,520 --> 00:02:21,040
And keep in mind these error regional.

42
00:02:21,040 --> 00:02:23,240
So there are many more services.

43
00:02:23,240 --> 00:02:23,790
In fact,

44
00:02:23,790 --> 00:02:27,320
let me show you these error all the services that

45
00:02:27,320 --> 00:02:30,620
pushed to CloudWatch for metric data.

46
00:02:30,620 --> 00:02:33,040
You can see it's a lot.

47
00:02:33,040 --> 00:02:38,240
But what we see here is what we have actually used is far as services.

48
00:02:38,240 --> 00:02:44,600
So to demo this I'm going to select E c two and E C two is actually

49
00:02:44,600 --> 00:02:48,240
the name space of the metric that we're measuring.

50
00:02:48,240 --> 00:02:53,210
So if you remember, we discuss name spaces in one of those key concepts,

51
00:02:53,210 --> 00:02:55,120
and that's exactly what that is.

52
00:02:55,120 --> 00:02:55,340
E.

53
00:02:55,340 --> 00:03:00,440
C two is a group or a container of metrics that we can look for.

54
00:03:00,440 --> 00:03:03,270
And if I go back to this services screen,

55
00:03:03,270 --> 00:03:07,840
you can see the name Space is here in the middle column.

56
00:03:07,840 --> 00:03:11,800
And if you notice they all follow the same pattern,

57
00:03:11,800 --> 00:03:17,040
they start with a W s / and then the service name.

58
00:03:17,040 --> 00:03:21,440
So when you're creating custom metrics and custom name spaces,

59
00:03:21,440 --> 00:03:26,900
which you can do this prefix the A W s slash is saved.

60
00:03:26,900 --> 00:03:28,640
You cannot use that.

61
00:03:28,640 --> 00:03:30,240
So just keep that in mind.

62
00:03:30,240 --> 00:03:33,000
Let's go back to CloudWatch and will continue.

63
00:03:33,000 --> 00:03:36,440
I'm going to look at, per instance, metrics,

64
00:03:36,440 --> 00:03:41,430
and you can see we have a ton of metrics in here Now a ton is relative.

65
00:03:41,430 --> 00:03:42,620
There's only 35.

66
00:03:42,620 --> 00:03:44,880
But for a small account, that's quite a bit.

67
00:03:44,880 --> 00:03:47,300
And this can get a little overwhelming.

68
00:03:47,300 --> 00:03:51,680
So what I'm going to do is I wanna look for CPU utilization,

69
00:03:51,680 --> 00:03:56,050
so I'm gonna search for this only and then we narrow that down to two resource

70
00:03:56,050 --> 00:04:00,670
is now This is the instance IDE that I spun up and what I've done in the

71
00:04:00,670 --> 00:04:06,950
background is I spun up in easy to instance and I went ahead and stress test the

72
00:04:06,950 --> 00:04:11,840
CPU to generate some CPU utilization metrics.

73
00:04:11,840 --> 00:04:14,330
And you can see that here in this graphic that I

74
00:04:14,330 --> 00:04:17,040
clipped from my terminal session.

75
00:04:17,040 --> 00:04:20,530
So I'm going to select CPU utilization.

76
00:04:20,530 --> 00:04:25,640
And if you notice at the top of this page, it's populated our graph.

77
00:04:25,640 --> 00:04:28,200
Now, the measurement time is three hours.

78
00:04:28,200 --> 00:04:33,520
So let's go and knock this down to a custom of 15 minutes and there we go.

79
00:04:33,520 --> 00:04:35,820
That's a bit easier to see now,

80
00:04:35,820 --> 00:04:42,860
the default data point is every five minutes and a data point is a period

81
00:04:42,860 --> 00:04:46,200
of time that we're measuring data for these metrics.

82
00:04:46,200 --> 00:04:49,140
So for this graph, we have two data points.

83
00:04:49,140 --> 00:04:50,720
We have one ending at 2.

84
00:04:50,720 --> 00:04:52,090
20 UTC.

85
00:04:52,090 --> 00:04:56,080
As you can see here and then we have another one at 2.

86
00:04:56,080 --> 00:05:01,170
15 UTC that you can see over here on the left and you can see

87
00:05:01,170 --> 00:05:03,940
those both have their own metric measurement.

88
00:05:03,940 --> 00:05:10,330
So if we wanted to we can even specify a finer data point like every minute.

89
00:05:10,330 --> 00:05:14,270
But keep in mind that costs more than using the

90
00:05:14,270 --> 00:05:17,090
default of five or even greater now.

91
00:05:17,090 --> 00:05:20,940
Another tidbit to remember is that your metric data is

92
00:05:20,940 --> 00:05:25,640
going to be kept for 15 months within AWS,

93
00:05:25,640 --> 00:05:31,210
so it allows us the ability to view minute by minute data or we can.

94
00:05:31,210 --> 00:05:33,740
Go back and look at historical data.

95
00:05:33,740 --> 00:05:35,980
It's all dependent on your use case.

96
00:05:35,980 --> 00:05:38,210
So now that we have this graft here,

97
00:05:38,210 --> 00:05:42,230
you'll see that it populates are graft metrics tab.

98
00:05:42,230 --> 00:05:46,640
Now, this is where we can specify a little bit more customization.

99
00:05:46,640 --> 00:05:50,440
We see our label here, CPU utilization.

100
00:05:50,440 --> 00:05:52,840
We see our details so we have the E.

101
00:05:52,840 --> 00:05:54,400
C to name space,

102
00:05:54,400 --> 00:05:58,080
our metric label and then the instance IDE that we're

103
00:05:58,080 --> 00:06:01,330
actually measuring and we have our statistic.

104
00:06:01,330 --> 00:06:05,800
Now the statistic is essentially what we're displaying on our graph.

105
00:06:05,800 --> 00:06:09,350
So right now it's average, but you can see there's several options.

106
00:06:09,350 --> 00:06:12,140
You can do the 99th percentile.

107
00:06:12,140 --> 00:06:15,110
You can do some or we can even do maximum,

108
00:06:15,110 --> 00:06:18,550
so I'll select maximum and you can see the maximum for

109
00:06:18,550 --> 00:06:21,840
the past two data points is 100%.

110
00:06:21,840 --> 00:06:24,630
Which makes sense because I'm stressing the system out.

111
00:06:24,630 --> 00:06:31,540
Let me go back to average, and then the next thing we see is period.

112
00:06:31,540 --> 00:06:34,980
So depending on the service, you could go down to one second,

113
00:06:34,980 --> 00:06:37,740
which is detailed, extremely detailed.

114
00:06:37,740 --> 00:06:41,260
I can go up to an hour, or even if I wanted to.

115
00:06:41,260 --> 00:06:48,340
I give you 30 days within the console, so it allows for a lot of flexibility.

116
00:06:48,340 --> 00:06:51,290
Now that's going to do it for this demo on CloudWatch

117
00:06:51,290 --> 00:07:01,000
metrics and how we can measure those metrics. Let's wrap up and then we'll continue on by looking at CloudWatch dashboards.

