WEBVTT
1
00:00:01.040 --> 00:00:03.190
[Autogenerated] welcome back in this clip.

2
00:00:03.190 --> 00:00:07.840
Let's go ahead and start diving into state manager and patch manager.

3
00:00:07.840 --> 00:00:12.190
Now state manager is simply showing the state of our

4
00:00:12.190 --> 00:00:15.240
inventory associations that we've created.

5
00:00:15.240 --> 00:00:17.600
So it's a pretty easy screen to look at,

6
00:00:17.600 --> 00:00:20.740
and we've already dug into the association IDE screen,

7
00:00:20.740 --> 00:00:22.340
so I won't do that.

8
00:00:22.340 --> 00:00:26.140
But let's look at Patch Manager as well.

9
00:00:26.140 --> 00:00:33.440
Now Patch Manager allows us to automate are patching using native AWS services.

10
00:00:33.440 --> 00:00:36.380
So anyone that's ever done any sort of manual

11
00:00:36.380 --> 00:00:38.920
patching will probably fall in love.

12
00:00:38.920 --> 00:00:40.540
With this service.

13
00:00:40.540 --> 00:00:44.140
You can see they have pre defined patch baselines.

14
00:00:44.140 --> 00:00:49.040
But for the sake of this clip, let's configure patching.

15
00:00:49.040 --> 00:00:52.570
Now the first thing we have to do will look familiar.

16
00:00:52.570 --> 00:00:56.830
We have to select are managed instances that we want to target.

17
00:00:56.830 --> 00:00:57.160
Now.

18
00:00:57.160 --> 00:01:00.340
The difference here is there's a patch group,

19
00:01:00.340 --> 00:01:02.040
which we don't have,

20
00:01:02.040 --> 00:01:07.380
but what this does is it allows you to break your instances into specific

21
00:01:07.380 --> 00:01:12.140
patch groups and then run a schedule based on the Patch group.

22
00:01:12.140 --> 00:01:17.150
So an example here would be maybe you have a Prod Patch group in a Dev

23
00:01:17.150 --> 00:01:21.610
Patch group that you want to run separately or maybe even you have a

24
00:01:21.610 --> 00:01:25.510
web TLS group and then a back end patch group that you want to

25
00:01:25.510 --> 00:01:27.820
separate patching for those error.

26
00:01:27.820 --> 00:01:29.590
Just some examples.

27
00:01:29.590 --> 00:01:32.540
And really, the possibilities are endless.

28
00:01:32.540 --> 00:01:35.340
Now I'll select manually.

29
00:01:35.340 --> 00:01:37.270
We'll choose our instance again,

30
00:01:37.270 --> 00:01:41.670
and the next thing we have right here is our patching schedule.

31
00:01:41.670 --> 00:01:46.270
So how do we want to define are patching schedule we can

32
00:01:46.270 --> 00:01:49.980
select an existing maintenance window and a maintenance

33
00:01:49.980 --> 00:01:52.360
window is what it sounds like.

34
00:01:52.360 --> 00:01:58.360
It's a window that we define that will allow SSN to perform maintenance in.

35
00:01:58.360 --> 00:02:02.440
So if we had an existing one, we could select it here.

36
00:02:02.440 --> 00:02:08.440
We can skip scheduling and patch now or we can schedule in a new window.

37
00:02:08.440 --> 00:02:12.350
So here it allows us to create based on Cron or

38
00:02:12.350 --> 00:02:15.340
even a flat rate schedule builder.

39
00:02:15.340 --> 00:02:18.500
And this allows us to specify our frequency,

40
00:02:18.500 --> 00:02:22.280
whether it be rate we can select the time of day or

41
00:02:22.280 --> 00:02:25.340
we can select the day of week as well.

42
00:02:25.340 --> 00:02:27.520
We let s s m know that.

43
00:02:27.520 --> 00:02:27.830
Hey,

44
00:02:27.830 --> 00:02:30.870
we want to only allow our maintenance window for maybe

45
00:02:30.870 --> 00:02:34.240
two hours and then we give it a name.

46
00:02:34.240 --> 00:02:37.870
So I'm not going to specify a new window here.

47
00:02:37.870 --> 00:02:41.440
I'm going to skip and patch now.

48
00:02:41.440 --> 00:02:45.240
But be aware that you create maintenance windows to

49
00:02:45.240 --> 00:02:48.740
specify when you can automate your patching.

50
00:02:48.740 --> 00:02:51.540
So S S M knows when it's allowed to.

51
00:02:51.540 --> 00:02:55.760
Now you'll see are patching operation we can skin and

52
00:02:55.760 --> 00:02:58.470
install missing packages or we can.

53
00:02:58.470 --> 00:03:00.100
Just scan only.

54
00:03:00.100 --> 00:03:04.520
I'll do scan and install, and under additional settings,

55
00:03:04.520 --> 00:03:07.240
you can see they just give you a notice here.

56
00:03:07.240 --> 00:03:09.940
So let me configure patching.

57
00:03:09.940 --> 00:03:12.440
We've successfully configured it.

58
00:03:12.440 --> 00:03:18.380
Let me go to view details and check this out.

59
00:03:18.380 --> 00:03:22.540
It's actually taking us to the run command screen again.

60
00:03:22.540 --> 00:03:27.620
So what this is doing is it's using run command in the background

61
00:03:27.620 --> 00:03:31.430
to go ahead and run these different patching commands that error

62
00:03:31.430 --> 00:03:36.440
necessary for that particular instance.

63
00:03:36.440 --> 00:03:38.330
So when I expand these windows,

64
00:03:38.330 --> 00:03:43.940
we see the command that they're running here is a W s run patch baseline,

65
00:03:43.940 --> 00:03:46.560
and they're specifying the default version.

66
00:03:46.560 --> 00:03:52.940
You'll see there's two steps and then they have their parameters down there.

67
00:03:52.940 --> 00:03:57.760
So this is now patched our instantiate a Matic Lee

68
00:03:57.760 --> 00:04:00.940
based on this run command that we used.

69
00:04:00.940 --> 00:04:06.940
So if I select this and I view output, you can see that we have our statuses.

70
00:04:06.940 --> 00:04:08.280
We have our steps.

71
00:04:08.280 --> 00:04:12.410
So this ran through several shell commands,

72
00:04:12.410 --> 00:04:16.590
as you can see right here and this truncated the output

73
00:04:16.590 --> 00:04:19.570
because it's too big to view in the console.

74
00:04:19.570 --> 00:04:24.430
So what they do is you can push it to S3 or CloudWatch like we talked about,

75
00:04:24.430 --> 00:04:26.840
and then view it there.

76
00:04:26.840 --> 00:04:31.570
Now the bottom one here, Step two lets us know that Hey,

77
00:04:31.570 --> 00:04:35.240
we skipped this step because it's for Windows and you

78
00:04:35.240 --> 00:04:37.940
see the step name is patch windows.

79
00:04:37.940 --> 00:04:38.760
So that's it.

80
00:04:38.760 --> 00:04:43.740
That's how easy it can be to patch several instances

81
00:04:43.740 --> 00:04:45.760
with a single click of the button,

82
00:04:45.760 --> 00:04:50.640
you create a patch baseline as well as a maintenance window,

83
00:04:50.640 --> 00:04:56.040
and then you schedule it for however often you need to patch your instances.

84
00:04:56.040 --> 00:04:58.910
Now, one last thing before we wrap up,

85
00:04:58.910 --> 00:05:03.370
let's go ahead and view that document that they used so under shared

86
00:05:03.370 --> 00:05:08.940
resource is there's a documents section now everything in S S M

87
00:05:08.940 --> 00:05:13.750
automation wise runs via these S s M documents.

88
00:05:13.750 --> 00:05:18.850
Now, the name of that document we just looked at was run patch baseline.

89
00:05:18.850 --> 00:05:21.040
So let me find that here.

90
00:05:21.040 --> 00:05:22.600
Here it is, right here.

91
00:05:22.600 --> 00:05:29.970
So I'll select this and this brings us to the document screen.

92
00:05:29.970 --> 00:05:33.540
So I can run a command directly from this document.

93
00:05:33.540 --> 00:05:38.280
But what I want to do is I want to view the content and there we go.

94
00:05:38.280 --> 00:05:42.280
So this is what's driving these documents and you'll

95
00:05:42.280 --> 00:05:45.070
notice it's simply a JSON file.

96
00:05:45.070 --> 00:05:47.770
Now, some of these documents support Yamil.

97
00:05:47.770 --> 00:05:54.440
So keep that in mind, but you literally just define based on S S M syntax,

98
00:05:54.440 --> 00:05:59.670
certain key value pairs within this JSON that are executed.

99
00:05:59.670 --> 00:06:00.890
So, for instance,

100
00:06:00.890 --> 00:06:03.950
you'll see our precondition for this main step is

101
00:06:03.950 --> 00:06:06.940
platform type needs to be Windows,

102
00:06:06.940 --> 00:06:12.140
and then it runs a PowerShell script for patching.

103
00:06:12.140 --> 00:06:13.780
And if I scroll to the bottom,

104
00:06:13.780 --> 00:06:20.040
we'll see the Linux specific shell script that it actually ran.

105
00:06:20.040 --> 00:06:22.880
Now, last part here is under versions.

106
00:06:22.880 --> 00:06:25.040
You can see that if we owned it.

107
00:06:25.040 --> 00:06:27.850
We can view the different versions that come with this

108
00:06:27.850 --> 00:06:32.040
document and then details just shows the parameters and

109
00:06:32.040 --> 00:06:35.340
their descriptions that error used.

110
00:06:35.340 --> 00:06:36.490
So let's go ahead Well,

111
00:06:36.490 --> 00:06:45.000
in this clip here and then in the next clip will start looking at actions and change and application management

