1
00:00:02,140 --> 00:00:04,200
[Autogenerated] the first thing we're going to do is

2
00:00:04,200 --> 00:00:07,300
create a failing consumer side test.

3
00:00:07,300 --> 00:00:10,300
This is because it's the first step in the consumer

4
00:00:10,300 --> 00:00:13,840
driven contracts testing workflow.

5
00:00:13,840 --> 00:00:17,360
To do this, Robin, including an existing project,

6
00:00:17,360 --> 00:00:20,210
will make use of spring initialize er to create a

7
00:00:20,210 --> 00:00:23,680
vanilla spring boot Micro service.

8
00:00:23,680 --> 00:00:23,910
Well,

9
00:00:23,910 --> 00:00:26,660
then you spring boots to create a failing test for

10
00:00:26,660 --> 00:00:29,940
our credit card functionality.

11
00:00:29,940 --> 00:00:32,290
And then we'll try and fix our test Valya,

12
00:00:32,290 --> 00:00:37,960
by implementing functionality ourselves and finally will do some

13
00:00:37,960 --> 00:00:41,520
test failure analysis as Jesus one network harp.

14
00:00:41,520 --> 00:00:46,040
We won't be able to get our test to pass unless me introduce Steuben.

15
00:00:46,040 --> 00:00:50,640
To get started, we can visit start dot spring the I O.

16
00:00:50,640 --> 00:00:53,900
This is a website powered by sprint initialize er,

17
00:00:53,900 --> 00:00:57,530
a quick start generator for spring boot projects.

18
00:00:57,530 --> 00:00:58,470
In our case,

19
00:00:58,470 --> 00:01:01,580
it will be used to create the scaffolding for our credit card Micro

20
00:01:01,580 --> 00:01:06,380
service at the top we can select are built all maven.

21
00:01:06,380 --> 00:01:11,840
Although Grader is also supported, we can choose a language in our case Java,

22
00:01:11,840 --> 00:01:15,140
and we can also choose our screen beat version in our case,

23
00:01:15,140 --> 00:01:17,540
the latest stable release.

24
00:01:17,540 --> 00:01:18,440
Well, Entercom,

25
00:01:18,440 --> 00:01:22,210
that retail bank is our group and credit card services are artifact i.

26
00:01:22,210 --> 00:01:23,340
D.

27
00:01:23,340 --> 00:01:26,210
And we'll also add Web in the dependencies form,

28
00:01:26,210 --> 00:01:29,440
as will be built in a hasty T p a p I.

29
00:01:29,440 --> 00:01:30,720
And now we're ready to go.

30
00:01:30,720 --> 00:01:34,370
We compress the download ported and generate our project.

31
00:01:34,370 --> 00:01:37,870
The next step is to import our newly generated spring

32
00:01:37,870 --> 00:01:40,000
boot micro service into our I d.

33
00:01:40,000 --> 00:01:40,940
E.

34
00:01:40,940 --> 00:01:43,220
We'll be using intelligent A to do this,

35
00:01:43,220 --> 00:01:45,360
but as it's just a maven project,

36
00:01:45,360 --> 00:01:50,510
it should be straightforward enough to do this in any of the major alternatives.

37
00:01:50,510 --> 00:01:55,230
First will browse and select our project, then moved so quickly.

38
00:01:55,230 --> 00:01:58,340
Economy, even pump file.

39
00:01:58,340 --> 00:02:02,020
We can leave all these default sayings as they are bar in this one,

40
00:02:02,020 --> 00:02:07,240
which means our project will be completely initialized on lows.

41
00:02:07,240 --> 00:02:10,520
We can also choose our sdk in this case,

42
00:02:10,520 --> 00:02:14,930
this job or eight, as that's what will be working with for out this course.

43
00:02:14,930 --> 00:02:19,740
Finally, let's click next and finish importing the project.

44
00:02:19,740 --> 00:02:21,340
Now our projects open.

45
00:02:21,340 --> 00:02:26,270
We can take a look at what has been generated for us in our source directory.

46
00:02:26,270 --> 00:02:28,910
We have a single class with the main methods,

47
00:02:28,910 --> 00:02:33,700
which doesn't do anything overt in start our spring view application.

48
00:02:33,700 --> 00:02:38,320
As this isn't a spring boot course, we won't go into too much detail here.

49
00:02:38,320 --> 00:02:42,550
But essentially, what this means is that when we run our main method,

50
00:02:42,550 --> 00:02:47,040
our spring context will be initialized with some sensible defaults.

51
00:02:47,040 --> 00:02:49,030
Because this is a Web project,

52
00:02:49,030 --> 00:02:53,540
that will mean we get a Web server with a Haiti T p a p I that

53
00:02:53,540 --> 00:02:57,100
we can start calling right away in a test.

54
00:02:57,100 --> 00:02:59,460
If you're more interested in how this works,

55
00:02:59,460 --> 00:03:02,310
I would recommend checking out the pleura site course,

56
00:03:02,310 --> 00:03:07,710
creating your first spring beat project moving to the test directory.

57
00:03:07,710 --> 00:03:10,570
We can also see that as a skeleton spring boo

58
00:03:10,570 --> 00:03:13,880
integration test already set up for us.

59
00:03:13,880 --> 00:03:14,930
When we run this,

60
00:03:14,930 --> 00:03:18,160
our application will be fully initialized with a mock Web

61
00:03:18,160 --> 00:03:22,440
environment that we can fire some automated tests against.

62
00:03:22,440 --> 00:03:23,540
Okay,

63
00:03:23,540 --> 00:03:26,450
so now what we want is a test which applies for a

64
00:03:26,450 --> 00:03:29,080
credit card fire in a P I call on,

65
00:03:29,080 --> 00:03:33,810
then asserts a response to make sure the application has been approved.

66
00:03:33,810 --> 00:03:39,410
First of all, let's Satti all to configure Mark NBC annotation to are test class.

67
00:03:39,410 --> 00:03:40,660
This means that when we ran,

68
00:03:40,660 --> 00:03:45,380
our tests are mock NBC Bean will be in Stan Shades on Configured to Point,

69
00:03:45,380 --> 00:03:47,840
so I'm Marc Webb Environment.

70
00:03:47,840 --> 00:03:48,220
We can.

71
00:03:48,220 --> 00:03:51,710
Then Orta wired out Mark NBC being into our tests like we

72
00:03:51,710 --> 00:03:54,430
would do any off a normal spring bean on,

73
00:03:54,430 --> 00:03:56,890
then immediately start using it to make a P.

74
00:03:56,890 --> 00:04:00,010
I request to our Mark Wiebe environment.

75
00:04:00,010 --> 00:04:01,240
Maybe none said a test.

76
00:04:01,240 --> 00:04:04,120
We will give it a name should grant application.

77
00:04:04,120 --> 00:04:07,840
When credit score is high, we should be self explanatory.

78
00:04:07,840 --> 00:04:11,010
We can then start using Mark NBC to call our A P.

79
00:04:11,010 --> 00:04:12,820
I will start with a post.

80
00:04:12,820 --> 00:04:17,120
Requests to slash credit card applications will be sending Jason,

81
00:04:17,120 --> 00:04:21,400
so we'll make sure that's a content type and in the body itself.

82
00:04:21,400 --> 00:04:25,140
Or just send a citizen number on a card type were ashamed.

83
00:04:25,140 --> 00:04:28,220
Every person in the world is uniquely identifiable by

84
00:04:28,220 --> 00:04:30,830
citizen number in order to keep, for example,

85
00:04:30,830 --> 00:04:32,190
simple.

86
00:04:32,190 --> 00:04:35,020
So that's all we need to do to make our requests.

87
00:04:35,020 --> 00:04:39,900
So now we can move on to our response decision as we want some decent locking.

88
00:04:39,900 --> 00:04:43,270
When we've run the test, we'll also add a print statement.

89
00:04:43,270 --> 00:04:47,360
So all of our hates TTP responses are outputs at a console

90
00:04:47,360 --> 00:04:50,080
for easy analysis of our test failures.

91
00:04:50,080 --> 00:04:52,800
We can then start actually asserting the response,

92
00:04:52,800 --> 00:04:56,840
starting with the status code, which we will expect to be 200.

93
00:04:56,840 --> 00:04:59,090
We don't need a response body with her field.

94
00:04:59,090 --> 00:05:02,810
It states the application has been granted on a content type,

95
00:05:02,810 --> 00:05:03,780
which is application.

96
00:05:03,780 --> 00:05:06,790
Jason on this should be our test complete.

97
00:05:06,790 --> 00:05:13,570
So let's run it and see what happens as we expected.

98
00:05:13,570 --> 00:05:17,440
We've got a failure as we've yet to start implementing any fan.

99
00:05:17,440 --> 00:05:21,940
But what is that failure scrolling down from the top of the locks?

100
00:05:21,940 --> 00:05:25,340
We can see that spring boot has started successfully.

101
00:05:25,340 --> 00:05:27,880
We can also see from the mock NBC logs.

102
00:05:27,880 --> 00:05:32,560
Our request was made as we expected, but from our test assertion,

103
00:05:32,560 --> 00:05:35,810
we can see that Robin and getting a 200 status codes.

104
00:05:35,810 --> 00:05:38,050
We got forward for not found.

105
00:05:38,050 --> 00:05:41,690
This is what our spring boo application does by default when

106
00:05:41,690 --> 00:05:45,600
handling a request it has no controller mapping for.

107
00:05:45,600 --> 00:05:49,680
So the next step is to create a controller for handling our request.

108
00:05:49,680 --> 00:05:54,540
This will at least get out test a little bit fervid in the 44 error.

109
00:05:54,540 --> 00:05:59,940
We'll start by creating a new class called credit card applications controller.

110
00:05:59,940 --> 00:06:02,860
We'll annotate it with the rest controller annotation.

111
00:06:02,860 --> 00:06:07,180
So its able to handle our requests and then we'll create a handler

112
00:06:07,180 --> 00:06:10,320
mapping for the Post requests that a credit card application

113
00:06:10,320 --> 00:06:15,340
general by annotation a method with that post map in We don't need

114
00:06:15,340 --> 00:06:19,040
spring to be able to read our Jason Request body and convert it

115
00:06:19,040 --> 00:06:20,680
into a method argument.

116
00:06:20,680 --> 00:06:24,420
This can be done by simply creating a method argument with Fields,

117
00:06:24,420 --> 00:06:28,210
which match a request Body will create a class to be able to do

118
00:06:28,210 --> 00:06:31,840
this and call it apply for credit card request.

119
00:06:31,840 --> 00:06:35,430
We can use alternate ER to create and navigate to it,

120
00:06:35,430 --> 00:06:39,450
and then we can create a citizen number field on a cart tight field,

121
00:06:39,450 --> 00:06:42,140
matching the field names in our test.

122
00:06:42,140 --> 00:06:47,280
In this case, car type can be anin um, this time with a single value gold,

123
00:06:47,280 --> 00:06:50,440
which is a valued our test depends on.

124
00:06:50,440 --> 00:06:53,930
We can also generate Ghattas and status for our fields so

125
00:06:53,930 --> 00:06:55,840
spring is able to set them when stunned,

126
00:06:55,840 --> 00:06:58,750
shaky in our object and so we can get them in our

127
00:06:58,750 --> 00:07:02,000
controller switching back to our controller.

128
00:07:02,000 --> 00:07:05,840
We now have a citizen number from our request.

129
00:07:05,840 --> 00:07:08,810
What we want to do next is send out citizen number

130
00:07:08,810 --> 00:07:10,720
after our credit check service,

131
00:07:10,720 --> 00:07:14,640
which has yet to exist in order to get a credit score.

132
00:07:14,640 --> 00:07:17,550
We can then use that credit score to decide whether the

133
00:07:17,550 --> 00:07:20,840
application should be approved or not.

134
00:07:20,840 --> 00:07:24,650
In order for our service to make a request to the credit score service,

135
00:07:24,650 --> 00:07:26,840
we first need a hate TTP client.

136
00:07:26,840 --> 00:07:30,050
To be able to do this, any would be fine here,

137
00:07:30,050 --> 00:07:33,100
but in this demo will stay within the string ecosystem.

138
00:07:33,100 --> 00:07:35,330
A new spring rest template.

139
00:07:35,330 --> 00:07:39,610
First, we'll declare, is a final field on and set it in the constructor,

140
00:07:39,610 --> 00:07:41,700
meaning that spring will try and wiry in.

141
00:07:41,700 --> 00:07:45,210
When the application booze intelli J gives us an

142
00:07:45,210 --> 00:07:47,660
Carriedo on by hovering over it,

143
00:07:47,660 --> 00:07:50,470
we can see that it won't actually work because we have not

144
00:07:50,470 --> 00:07:53,760
create arrest template being to fix this,

145
00:07:53,760 --> 00:07:58,640
all we need to do is switch back to our application class and declare one.

146
00:07:58,640 --> 00:08:02,150
We can do this by creating a method that returns one on,

147
00:08:02,150 --> 00:08:06,210
then annotation it without being so.

148
00:08:06,210 --> 00:08:09,000
Now we have our rest template being Let's use.

149
00:08:09,000 --> 00:08:10,790
It's a call are yet to exist.

150
00:08:10,790 --> 00:08:12,740
Credit score service.

151
00:08:12,740 --> 00:08:15,740
First of all will do a get requests to the credit scores

152
00:08:15,740 --> 00:08:19,080
en pointe on local host Port 80 80.

153
00:08:19,080 --> 00:08:22,000
It's true that in production, the euro would be different,

154
00:08:22,000 --> 00:08:26,140
but we relieve it is local host for now and in fix it later

155
00:08:26,140 --> 00:08:29,270
will then pass in a class representing a request body with a

156
00:08:29,270 --> 00:08:31,320
citizen number called Credit Checked.

157
00:08:31,320 --> 00:08:34,310
Request a nem pass in a class representing our

158
00:08:34,310 --> 00:08:37,240
response called credit share response.

159
00:08:37,240 --> 00:08:40,600
We can then use Sultan enter to generate our credit shot request

160
00:08:40,600 --> 00:08:44,560
class at in a single citizen number fields.

161
00:08:44,560 --> 00:08:47,990
And we can also use Alston enter to generate a response,

162
00:08:47,990 --> 00:08:51,670
which in this case will now contain a single field called Score,

163
00:08:51,670 --> 00:08:52,510
which is an 18.

164
00:08:52,510 --> 00:08:54,440
Um, that only needs a value of high.

165
00:08:54,440 --> 00:08:58,040
For now.

166
00:08:58,040 --> 00:08:59,140
On completion,

167
00:08:59,140 --> 00:09:04,180
it's apparently get request isn't quite right here as our code doesn't compel.

168
00:09:04,180 --> 00:09:07,320
If we switch the post for object, that will fix things.

169
00:09:07,320 --> 00:09:10,370
As that method is able to take a request body,

170
00:09:10,370 --> 00:09:12,980
it also makes more sense as a credit check should

171
00:09:12,980 --> 00:09:15,840
never be safe nor riding potent.

172
00:09:15,840 --> 00:09:17,410
Now we have our response.

173
00:09:17,410 --> 00:09:22,480
We can check it to see whether we can grant our credit card application or no.

174
00:09:22,480 --> 00:09:23,320
First of all,

175
00:09:23,320 --> 00:09:29,540
we can check into scores high and also check if the credit card type his goals.

176
00:09:29,540 --> 00:09:34,640
If both these conditions are true, we can return our response a granted,

177
00:09:34,640 --> 00:09:37,020
just like over requests and responses.

178
00:09:37,020 --> 00:09:39,340
We can create objects for this.

179
00:09:39,340 --> 00:09:41,980
Whatever objects we returned from our method,

180
00:09:41,980 --> 00:09:45,160
Spring will convert into Jason on incent it in a

181
00:09:45,160 --> 00:09:48,740
responsible day with his status of two hundreds.

182
00:09:48,740 --> 00:09:54,340
We can call this apply for credit cards and give it a parameter of granted.

183
00:09:54,340 --> 00:09:57,520
We can then use all 10 enter to generate it and give

184
00:09:57,520 --> 00:10:01,200
it one Inam field called status.

185
00:10:01,200 --> 00:10:04,340
Finally, let's switch back to the controller.

186
00:10:04,340 --> 00:10:09,130
We can fix any compilation areas caused by our own imported class and

187
00:10:09,130 --> 00:10:12,500
also at a default room time exception which is phone.

188
00:10:12,500 --> 00:10:16,400
If our condition is no matter over time, this would go away.

189
00:10:16,400 --> 00:10:21,840
If we add more task coverage, we've now implemented RM point end to end,

190
00:10:21,840 --> 00:10:26,240
but it should be pretty obvious that our test is still not going to pass.

191
00:10:26,240 --> 00:10:29,550
This is because it will call out to the credit check service,

192
00:10:29,550 --> 00:10:31,980
which does not yet exist.

193
00:10:31,980 --> 00:10:37,810
Let's navigate to our test, and that's run it to see what happens.

194
00:10:37,810 --> 00:10:39,220
Looking at the stack trace,

195
00:10:39,220 --> 00:10:43,380
we can see a connection refused error to our credit score service.

196
00:10:43,380 --> 00:10:47,770
This is caused by a call being made to local host on our machine only for

197
00:10:47,770 --> 00:10:51,720
there to be nothing running there without contract testing.

198
00:10:51,720 --> 00:10:55,010
This is where a developer would have to make a decision to

199
00:10:55,010 --> 00:10:58,300
even stop this endpoint or end to end test.

200
00:10:58,300 --> 00:11:02,070
For the numerous reasons we've already covered in the previous modules,

201
00:11:02,070 --> 00:11:05,610
this could end up producing poor tests when stubborn um,

202
00:11:05,610 --> 00:11:06,050
point.

203
00:11:06,050 --> 00:11:08,160
There's no guarantee that it will match the rial

204
00:11:08,160 --> 00:11:10,770
endpoint on when end to end testing.

205
00:11:10,770 --> 00:11:13,440
We would have to run and coordinate multiple services

206
00:11:13,440 --> 00:11:15,880
together in an end to end test environment,

207
00:11:15,880 --> 00:11:18,240
one of which does not even exist year.

208
00:11:18,240 --> 00:11:19,400
Fortunately,

209
00:11:19,400 --> 00:11:23,090
we're working through the consumer driven contracts testing workflow.

210
00:11:23,090 --> 00:11:33,000
So this is actually the point where we will define office contract, which will ultimately be used to make artists pass

