WEBVTT
1
00:00:02.090 --> 00:00:02.980
[Autogenerated] So far,

2
00:00:02.980 --> 00:00:06.540
we've demonstrated how we can implement the consuming side of a

3
00:00:06.540 --> 00:00:10.940
message driven interaction using spring cloud contract.

4
00:00:10.940 --> 00:00:16.070
We've achieved this by using a contract to define a message to be consumed on,

5
00:00:16.070 --> 00:00:17.270
then right in a test.

6
00:00:17.270 --> 00:00:20.440
Which trick is that message with the stuff trigger?

7
00:00:20.440 --> 00:00:22.200
What we need to remember, though,

8
00:00:22.200 --> 00:00:25.420
is that our messes will still be produced by a provider,

9
00:00:25.420 --> 00:00:30.470
So we need to be sure that it meets the expectations of our contract to,

10
00:00:30.470 --> 00:00:32.180
as already explained.

11
00:00:32.180 --> 00:00:34.770
This is because by being responsible for sending the

12
00:00:34.770 --> 00:00:37.240
message to the broker in the first place,

13
00:00:37.240 --> 00:00:42.240
we need to make sure the Q name is correct and that the Mattis payload is valid.

14
00:00:42.240 --> 00:00:50.000
This sort of local contractors will provide us with much faster feedback than end to end testing.

