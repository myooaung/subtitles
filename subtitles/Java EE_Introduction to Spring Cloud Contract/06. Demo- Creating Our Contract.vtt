WEBVTT
1
00:00:01.940 --> 00:00:04.390
[Autogenerated] to get started with our provider.

2
00:00:04.390 --> 00:00:08.640
Let's return to start dot spring toe i o.

3
00:00:08.640 --> 00:00:10.940
We'll leave the defaults as they are.

4
00:00:10.940 --> 00:00:12.070
Will Entercom.

5
00:00:12.070 --> 00:00:18.240
That retail bank is our group on credit check service as our artifacts, i d.

6
00:00:18.240 --> 00:00:21.640
And also at the Web dependency.

7
00:00:21.640 --> 00:00:23.900
It's worth mentioning that we could also,

8
00:00:23.900 --> 00:00:28.140
at the spring cloud contract, verify dependency here.

9
00:00:28.140 --> 00:00:32.880
Doing so would mean that the maven palm of are generated project would

10
00:00:32.880 --> 00:00:37.140
contain all unnecessary dependencies by default.

11
00:00:37.140 --> 00:00:39.550
If you'd like to do this, go ahead.

12
00:00:39.550 --> 00:00:40.690
But we're not going to do it.

13
00:00:40.690 --> 00:00:42.180
You're in the demo.

14
00:00:42.180 --> 00:00:44.530
This is so we can learn a bit more about what's

15
00:00:44.530 --> 00:00:47.450
happening in The Palm File on also,

16
00:00:47.450 --> 00:00:50.390
so we can learn how to add Spring cloud contract

17
00:00:50.390 --> 00:00:53.430
verifier to an existing project is, well,

18
00:00:53.430 --> 00:00:55.440
as a new arm.

19
00:00:55.440 --> 00:01:01.440
Finally, let's click the download button on Import the project into our I D.

20
00:01:01.440 --> 00:01:07.940
We'll skip the import flow as it's the same as it waas in the previous demo.

21
00:01:07.940 --> 00:01:09.680
Now our project is open.

22
00:01:09.680 --> 00:01:11.640
Let's look around.

23
00:01:11.640 --> 00:01:15.170
We can see that we've got a skeleton spring boot projects,

24
00:01:15.170 --> 00:01:21.490
which is more or less identical to our last one in this project.

25
00:01:21.490 --> 00:01:24.440
We'd like to be able to create our contract,

26
00:01:24.440 --> 00:01:26.040
but before we do so,

27
00:01:26.040 --> 00:01:29.980
we need to add the required dependencies toe are made in palm file,

28
00:01:29.980 --> 00:01:33.890
so lets navigate to it and get started.

29
00:01:33.890 --> 00:01:38.580
First, we will at the spring cloud contract, verify maven Plug in.

30
00:01:38.580 --> 00:01:41.670
This will add some extra functionality to maven,

31
00:01:41.670 --> 00:01:44.380
which will allow it to generate stubs from contracts

32
00:01:44.380 --> 00:01:47.640
and generate tests from contracts.

33
00:01:47.640 --> 00:01:52.240
We'll just pick the latest stable release version at a time of recording.

34
00:01:52.240 --> 00:01:56.390
I will also add the extensions tag, as this is what allows a plug in tow.

35
00:01:56.390 --> 00:02:00.640
Add actual functionality to our maven build.

36
00:02:00.640 --> 00:02:05.880
The spring cloud contracts also falls on the day Spring Cloud Umbrella projects.

37
00:02:05.880 --> 00:02:06.840
Because of this,

38
00:02:06.840 --> 00:02:12.740
we can make use of its bomb file in order to pull in any required dependencies.

39
00:02:12.740 --> 00:02:17.430
A bomb fail or bill of materials fail is amazing constructs for

40
00:02:17.430 --> 00:02:22.440
importing dependency management sections into a palm file.

41
00:02:22.440 --> 00:02:22.970
Well, first,

42
00:02:22.970 --> 00:02:26.280
declare a dependency management section and give it one

43
00:02:26.280 --> 00:02:30.980
dependency will enter the artifacts idea that we want spring

44
00:02:30.980 --> 00:02:35.580
cloud dependencies unintelligible, all to complete the rest,

45
00:02:35.580 --> 00:02:38.780
giving his version of motor pick again.

46
00:02:38.780 --> 00:02:43.940
We'll just picked the latest stable version at the time of recording.

47
00:02:43.940 --> 00:02:47.320
Well, then give it a type in this case, palm,

48
00:02:47.320 --> 00:02:50.940
and then give it a scope of import in order to import

49
00:02:50.940 --> 00:02:55.440
spring cloud dependencies into our palm.

50
00:02:55.440 --> 00:02:58.870
After adding the bomb, we can add the spring cloud contract,

51
00:02:58.870 --> 00:03:01.240
verify a dependency.

52
00:03:01.240 --> 00:03:06.740
We don't need to specify a version number, as it's provided to is fired a bomb.

53
00:03:06.740 --> 00:03:09.910
This dependency is what will allow us to start using the

54
00:03:09.910 --> 00:03:14.410
contract dear sell on generate office contracts.

55
00:03:14.410 --> 00:03:17.910
Let's finish up by refreshing or maven dependencies.

56
00:03:17.910 --> 00:03:22.840
Then we'll be ready to go.

57
00:03:22.840 --> 00:03:27.020
Now we're ready to create our contract by default.

58
00:03:27.020 --> 00:03:32.430
Spring Cloud contract looks for contracts in a contracts directory on the test.

59
00:03:32.430 --> 00:03:38.360
Resource is so let's create up will also create one more child

60
00:03:38.360 --> 00:03:42.240
directory names after our credit card service.

61
00:03:42.240 --> 00:03:44.440
It's not necessary to do this,

62
00:03:44.440 --> 00:03:48.430
but it's good practise the reason being that it makes it easy

63
00:03:48.430 --> 00:03:51.040
to know what consumers are dependent on.

64
00:03:51.040 --> 00:03:56.200
What contracts Happiness Information makes change in a provider.

65
00:03:56.200 --> 00:03:56.660
AP I.

66
00:03:56.660 --> 00:04:02.640
Easier as Hugh to change, impacts becomes clear.

67
00:04:02.640 --> 00:04:05.540
Now let's create our contract file.

68
00:04:05.540 --> 00:04:08.300
It's best practice to give it a descriptive name,

69
00:04:08.300 --> 00:04:11.840
which describes the interaction that it represents,

70
00:04:11.840 --> 00:04:16.140
So we will call hours should grant a credit score of high to a

71
00:04:16.140 --> 00:04:20.140
citizen as eyes exactly what it will do.

72
00:04:20.140 --> 00:04:24.130
We also need to add to groovy extension as contracts agree.

73
00:04:24.130 --> 00:04:30.540
REFIles providing our definition language for a groovy DSL.

74
00:04:30.540 --> 00:04:32.120
Now that's created.

75
00:04:32.120 --> 00:04:35.140
We need to instance she ate our contracts object by

76
00:04:35.140 --> 00:04:39.140
calling contract up make Then we pass in.

77
00:04:39.140 --> 00:04:43.240
A closure for is to declare our interaction in.

78
00:04:43.240 --> 00:04:47.540
Starting with the request, we will define a request closure.

79
00:04:47.540 --> 00:04:51.900
Then we will add a method in this case post on a U.

80
00:04:51.900 --> 00:04:58.480
R L in this case, last credit scores and also our body in this case,

81
00:04:58.480 --> 00:05:01.180
um, Jason with a citizen number field,

82
00:05:01.180 --> 00:05:05.240
were for valued it much is the one in our test.

83
00:05:05.240 --> 00:05:08.690
What's really nice here about groovy is that we can use the

84
00:05:08.690 --> 00:05:12.340
triple quotes to write our Jason in line.

85
00:05:12.340 --> 00:05:16.440
If you've ever experimented with writing Jason Strings in Java,

86
00:05:16.440 --> 00:05:19.480
you'll know how messy and confusing it can be,

87
00:05:19.480 --> 00:05:24.580
with lots of plus signs and back slices making things unreadable.

88
00:05:24.580 --> 00:05:27.440
Let's also provide a had a closure.

89
00:05:27.440 --> 00:05:31.590
This time we only care about one had a content type on.

90
00:05:31.590 --> 00:05:33.620
We expect a value of application.

91
00:05:33.620 --> 00:05:38.140
Jason, as that's what we will be sending from our consumer.

92
00:05:38.140 --> 00:05:41.540
You'll also notice that instead of writing a string value,

93
00:05:41.540 --> 00:05:44.740
we call the application Jason Mufid.

94
00:05:44.740 --> 00:05:47.570
This is just one of the many ways that the spring cloud

95
00:05:47.570 --> 00:05:52.140
contract DSL will make our life easier.

96
00:05:52.140 --> 00:05:55.240
Now we have to find a request in our interaction.

97
00:05:55.240 --> 00:05:57.840
We can define the response.

98
00:05:57.840 --> 00:06:01.740
First, we can give a status code of two hundreds,

99
00:06:01.740 --> 00:06:08.110
then a Jason body containing the field with his score off high

100
00:06:08.110 --> 00:06:11.020
under header again this time application.

101
00:06:11.020 --> 00:06:13.840
Jason.

102
00:06:13.840 --> 00:06:14.840
And that's it.

103
00:06:14.840 --> 00:06:17.040
We've created our contract.

104
00:06:17.040 --> 00:06:21.700
It's very simple, with a static request and response in.

105
00:06:21.700 --> 00:06:26.540
The next module will be building some which is more complex and flexible.

106
00:06:26.540 --> 00:06:33.540
But for now, this is all we need in order to make our test pass.

107
00:06:33.540 --> 00:06:36.550
What we're going to do now is switched to the terminal

108
00:06:36.550 --> 00:06:39.840
in order to run a maven install.

109
00:06:39.840 --> 00:06:44.140
This could also be done via did guilty or I d embedded Cermeno,

110
00:06:44.140 --> 00:06:48.640
but we'll keep it this way for presentation purposes.

111
00:06:48.640 --> 00:06:51.540
Let's now run a maybe install.

112
00:06:51.540 --> 00:06:56.570
What this does is compiled a project run automated test and then build a jar

113
00:06:56.570 --> 00:07:00.940
file only in our case we have added to spring cloud contract,

114
00:07:00.940 --> 00:07:06.280
verify, applauded, which should have added some extra steps.

115
00:07:06.280 --> 00:07:10.340
We can see that the build failed due to a test failure.

116
00:07:10.340 --> 00:07:12.840
But how has this happened?

117
00:07:12.840 --> 00:07:16.110
Well, from looking at the name of the test that failed,

118
00:07:16.110 --> 00:07:20.140
validate should grant credit score of high to a citizen.

119
00:07:20.140 --> 00:07:23.740
We see that the issue is with the contract verification tests

120
00:07:23.740 --> 00:07:26.790
generated for us by the spring cloud contract.

121
00:07:26.790 --> 00:07:32.790
Verify a plug in instead of going into detail about this for now,

122
00:07:32.790 --> 00:07:35.730
we should take a step back and think about what we're

123
00:07:35.730 --> 00:07:39.250
trying to achieve here on where we are in the consumer

124
00:07:39.250 --> 00:07:42.540
driven contract testing workflow.

125
00:07:42.540 --> 00:07:46.940
We're only at the stage of making our consumer site test pass.

126
00:07:46.940 --> 00:07:51.840
We're not at the stage where we need to implement anything in our provider.

127
00:07:51.840 --> 00:07:52.780
So really,

128
00:07:52.780 --> 00:07:56.050
the only two things we need to do right now are define a

129
00:07:56.050 --> 00:07:59.380
contract and generate some stops from it.

130
00:07:59.380 --> 00:08:04.200
We simply shouldn't care about the provider side tests yet.

131
00:08:04.200 --> 00:08:08.030
So knowing this lashes Ron Maven install again.

132
00:08:08.030 --> 00:08:13.830
But this time skipped assests This way we can worry about fixing them later on.

133
00:08:13.830 --> 00:08:18.840
Focus on generating the stops, which is our immediate goal.

134
00:08:18.840 --> 00:08:19.640
Great.

135
00:08:19.640 --> 00:08:22.440
This time we have a successful build.

136
00:08:22.440 --> 00:08:24.440
It's growing note to the top again.

137
00:08:24.440 --> 00:08:27.140
We can see that it's halfs and now scared.

138
00:08:27.140 --> 00:08:30.540
And now that degenerate stops tests his run,

139
00:08:30.540 --> 00:08:34.540
these stops will be installed by local maven repository.

140
00:08:34.540 --> 00:08:41.000
We'll leave the demo here for now and go into more detail about them in the next section.

