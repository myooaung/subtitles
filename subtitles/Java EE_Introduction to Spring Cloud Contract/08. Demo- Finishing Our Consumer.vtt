WEBVTT
1
00:00:02.140 --> 00:00:05.450
[Autogenerated] we're making progress through the consumer driven contracts.

2
00:00:05.450 --> 00:00:11.780
Workflow on in this demo will be able to finish implementing Arkin Shima.

3
00:00:11.780 --> 00:00:16.440
First of all, we'll do some analysis of the stop jobs we've created,

4
00:00:16.440 --> 00:00:22.340
finding them in our local repository on inspecting the contents of the child.

5
00:00:22.340 --> 00:00:26.270
Then we'll switch back to our Kashima Project on begin to make

6
00:00:26.270 --> 00:00:30.560
our test pass will do this by first of all,

7
00:00:30.560 --> 00:00:33.540
adding the stubborn dependency.

8
00:00:33.540 --> 00:00:34.050
Well, then,

9
00:00:34.050 --> 00:00:38.690
using configured is still bring it in our tests on In Doing so will be able

10
00:00:38.690 --> 00:00:42.740
to implement the rest of our feature on May cartes pass.

11
00:00:42.740 --> 00:00:46.690
Let's continue from where we left off in terminal on Do some

12
00:00:46.690 --> 00:00:50.440
analysis of the stops that we just generated.

13
00:00:50.440 --> 00:00:55.440
Don't worry too much about doing this bit yourself as it's not really necessary.

14
00:00:55.440 --> 00:00:59.130
This is just purely for demonstration purposes as it helps us

15
00:00:59.130 --> 00:01:04.140
understand what's happening behind the scenes Looking here,

16
00:01:04.140 --> 00:01:07.510
we can see that this stuff jar was installed into our local

17
00:01:07.510 --> 00:01:11.480
maven repository on the degree an artifact I D.

18
00:01:11.480 --> 00:01:14.840
That we declared for our credit check service.

19
00:01:14.840 --> 00:01:19.060
This means it lives alongside our ordinary application jar,

20
00:01:19.060 --> 00:01:24.040
the difference in name being the minus stops classifier

21
00:01:24.040 --> 00:01:26.740
using a jar command line utility.

22
00:01:26.740 --> 00:01:29.940
We can look and see what's being packaged inside.

23
00:01:29.940 --> 00:01:33.140
Let's take a look.

24
00:01:33.140 --> 00:01:35.720
We conceded there were two directories,

25
00:01:35.720 --> 00:01:40.660
a contract directory on the mapping directory containing the contract

26
00:01:40.660 --> 00:01:45.780
we created and its respective stuck mapping file.

27
00:01:45.780 --> 00:01:47.570
In order to look further,

28
00:01:47.570 --> 00:01:50.660
we can extract the contents of the jar into our working

29
00:01:50.660 --> 00:01:55.440
directory on an Licata contents off the files.

30
00:01:55.440 --> 00:01:57.840
First comes a contract file.

31
00:01:57.840 --> 00:02:01.540
We can cat it a terminal and take a look.

32
00:02:01.540 --> 00:02:05.550
We can confirm that it is indeed the contract we declared in our

33
00:02:05.550 --> 00:02:10.540
test resource is directory more interest in Lido,

34
00:02:10.540 --> 00:02:12.710
we can cut the contents of the wire mark.

35
00:02:12.710 --> 00:02:14.680
Stop trappings fail on DSI.

36
00:02:14.680 --> 00:02:19.990
What's being generated as it's Jason, we can pay pit into Jake you.

37
00:02:19.990 --> 00:02:23.440
So it's in a nice human readable format.

38
00:02:23.440 --> 00:02:26.980
At first glance, it looks very similar to our contract.

39
00:02:26.980 --> 00:02:33.440
On it is much of the fields and values are directly maps from our DSL.

40
00:02:33.440 --> 00:02:34.830
Looking at the request,

41
00:02:34.830 --> 00:02:40.540
we can see that it contains the URL credit scores on the method post,

42
00:02:40.540 --> 00:02:44.080
just like we initially declared in our contracts.

43
00:02:44.080 --> 00:02:47.500
The request content type had There is also here but we

44
00:02:47.500 --> 00:02:50.950
concede our call to the application Jason Method has been

45
00:02:50.950 --> 00:02:57.340
converted into a string value, and a key to this part is a much is field name.

46
00:02:57.340 --> 00:03:01.940
What this means is the value of the field is a regular expression.

47
00:03:01.940 --> 00:03:04.500
So in order for a request to be most,

48
00:03:04.500 --> 00:03:07.600
the content type only needs to start with application

49
00:03:07.600 --> 00:03:11.430
Jason and could be followed by any are pretty characters

50
00:03:11.430 --> 00:03:14.540
any number of times afterwards.

51
00:03:14.540 --> 00:03:17.440
The most complex component is body,

52
00:03:17.440 --> 00:03:23.140
which is the most different What we initially declared on Here's why.

53
00:03:23.140 --> 00:03:26.340
Because the contract wants too much on Jason.

54
00:03:26.340 --> 00:03:30.740
Using an exact text comparison doesn't really make sense.

55
00:03:30.740 --> 00:03:34.420
That's because it would fail if things like white spacing changed

56
00:03:34.420 --> 00:03:38.040
despite adjacent itself remaining in the same.

57
00:03:38.040 --> 00:03:41.240
That's why Jason Path has been generated instead,

58
00:03:41.240 --> 00:03:44.940
which is a DSL for reading Jason documents.

59
00:03:44.940 --> 00:03:48.280
We are going to go into the finer details of it for now,

60
00:03:48.280 --> 00:03:51.500
But what this expression means is that will match on any

61
00:03:51.500 --> 00:03:54.980
Jason with a field called citizen number on a value off

62
00:03:54.980 --> 00:03:59.410
1234 may be known to the response.

63
00:03:59.410 --> 00:04:03.870
Things are also more or less the same as a contract One thing

64
00:04:03.870 --> 00:04:07.610
that's a little nastier is having to sort Jason and Jason

65
00:04:07.610 --> 00:04:11.140
hands needing to introduce ease, escape characters.

66
00:04:11.140 --> 00:04:14.280
But that's one of the benefits of using a contract in the first

67
00:04:14.280 --> 00:04:18.380
place as it hides this kind of stuff away.

68
00:04:18.380 --> 00:04:22.640
Okay, so that will cover are generated, stood mapping file for now.

69
00:04:22.640 --> 00:04:25.980
We'll go into more detail later when we try and implement more

70
00:04:25.980 --> 00:04:31.910
complicated contracts moving back to our project.

71
00:04:31.910 --> 00:04:36.340
Let's start by adding a new maven dependency.

72
00:04:36.340 --> 00:04:36.600
Well,

73
00:04:36.600 --> 00:04:39.700
at the Spring Cloud started contract Stop Runner

74
00:04:39.700 --> 00:04:42.640
unpicked the latest stable version.

75
00:04:42.640 --> 00:04:44.260
As the name implies,

76
00:04:44.260 --> 00:04:47.910
they swore providers with the classes required to run our stops in the

77
00:04:47.910 --> 00:04:53.430
consumer side tests switching back to our failing test.

78
00:04:53.430 --> 00:04:59.140
We can annotate our class with the auto configure stop runner annotation.

79
00:04:59.140 --> 00:05:01.520
When this gets picks up by spring boot,

80
00:05:01.520 --> 00:05:05.240
it will be why Mark and Import are stops into it.

81
00:05:05.240 --> 00:05:08.030
We need to configure this stop say it does import,

82
00:05:08.030 --> 00:05:13.340
and we do that by specifying the group I d on the artifacts i d.

83
00:05:13.340 --> 00:05:17.640
For the version number, we can also make use of the plus symbol.

84
00:05:17.640 --> 00:05:21.940
What this means is that the latest version will always be download it,

85
00:05:21.940 --> 00:05:26.640
which is useful if the contracts are changing regularly,

86
00:05:26.640 --> 00:05:28.070
will also provide the stops.

87
00:05:28.070 --> 00:05:30.140
Classify for the jar.

88
00:05:30.140 --> 00:05:34.840
I will pick a port for why Mozz run on, in this case 80 80.

89
00:05:34.840 --> 00:05:36.430
If we didn't provide this,

90
00:05:36.430 --> 00:05:40.510
that a random port would be selected instead and

91
00:05:40.510 --> 00:05:43.490
finally will sat work offline to True,

92
00:05:43.490 --> 00:05:46.150
as we will be working with our local repository.

93
00:05:46.150 --> 00:05:49.040
No, a remote warm.

94
00:05:49.040 --> 00:05:54.910
Let's set a Q R test and see what happens Now We've got a failure,

95
00:05:54.910 --> 00:06:00.440
but it's a different one to before as now we're getting a forum for status code.

96
00:06:00.440 --> 00:06:01.730
Let's go down from the top.

97
00:06:01.730 --> 00:06:04.940
It'll locks and see what's happening.

98
00:06:04.940 --> 00:06:08.420
We can see why Mark has been started by our stop runner,

99
00:06:08.420 --> 00:06:13.540
and it started successfully as a health check went green.

100
00:06:13.540 --> 00:06:16.410
We can also see our stop trappings have been imported

101
00:06:16.410 --> 00:06:21.140
into it successfully under output, as we expected.

102
00:06:21.140 --> 00:06:22.840
So what's failed?

103
00:06:22.840 --> 00:06:23.020
Well,

104
00:06:23.020 --> 00:06:26.300
this is why wire mark comes in really handy because it

105
00:06:26.300 --> 00:06:29.140
is a concept of a closest match.

106
00:06:29.140 --> 00:06:30.260
If we look here,

107
00:06:30.260 --> 00:06:34.630
we can see the request that why might receives on the stump map in that came

108
00:06:34.630 --> 00:06:39.180
closest to it in this case that stuff mapping is our one,

109
00:06:39.180 --> 00:06:42.890
as it's the only stuff mapping available.

110
00:06:42.890 --> 00:06:47.040
Let's do a visual comparison on see what's wrong.

111
00:06:47.040 --> 00:06:48.340
We can first see that the U.

112
00:06:48.340 --> 00:06:52.340
R L as much on the post method does, too.

113
00:06:52.340 --> 00:06:56.440
On thanks to the regular expression, so does a content type.

114
00:06:56.440 --> 00:06:59.640
But why it's not matched is a citizen number.

115
00:06:59.640 --> 00:07:00.170
He agreed.

116
00:07:00.170 --> 00:07:05.340
Interaction our contracts expected was a value of one t free four.

117
00:07:05.340 --> 00:07:11.340
But we have sent a value of zero because the requests may did not match a stub

118
00:07:11.340 --> 00:07:16.970
map in why Mark sends for four rather than the stop response.

119
00:07:16.970 --> 00:07:20.180
The question now is, Why are we not sending the value off?

120
00:07:20.180 --> 00:07:22.040
1234?

121
00:07:22.040 --> 00:07:28.740
Let's inspects our controller and see straight away I can see the problem.

122
00:07:28.740 --> 00:07:31.490
We forgot to add the request body annotation toe

123
00:07:31.490 --> 00:07:34.250
our method argument without this,

124
00:07:34.250 --> 00:07:39.540
the hate TTP body Jason is no marshaled into our method argument.

125
00:07:39.540 --> 00:07:43.680
So the citizen number field is defaulting to zero.

126
00:07:43.680 --> 00:07:46.720
Let's up the annotation on Let's try and run our

127
00:07:46.720 --> 00:07:51.540
tests again and see if they pass.

128
00:07:51.540 --> 00:07:56.080
Okay, so it looks like we still haven't of a failure, but that's okay.

129
00:07:56.080 --> 00:08:01.440
This is a point of TD D on the point of consumer driven contract testing.

130
00:08:01.440 --> 00:08:05.840
It's not possible to deliver anything until everything is fully functional.

131
00:08:05.840 --> 00:08:08.840
As a four eyes, we would have broken our build.

132
00:08:08.840 --> 00:08:11.110
Let's look feudal locks and see what went wrong.

133
00:08:11.110 --> 00:08:15.740
This time it looks like this time it's a problem with the

134
00:08:15.740 --> 00:08:18.740
Jason and new request we made in our house.

135
00:08:18.740 --> 00:08:24.020
Let's take a look and see what this could bay pretty obvious again.

136
00:08:24.020 --> 00:08:28.340
But this time we're missing a comma at the end of our citizen number field.

137
00:08:28.340 --> 00:08:33.440
Let's fix it and ruin our test again.

138
00:08:33.440 --> 00:08:34.340
Great.

139
00:08:34.340 --> 00:08:36.740
This time our tests passes.

140
00:08:36.740 --> 00:08:41.940
Now we can be confident that our micro services functional with our provider.

141
00:08:41.940 --> 00:08:46.740
Let's take a look feudal logs to verify what's happened

142
00:08:46.740 --> 00:08:49.610
according to why mark our request was matched on.

143
00:08:49.610 --> 00:08:52.370
We can even see the response that it returned,

144
00:08:52.370 --> 00:08:56.040
which is, of course, the response in our stop.

145
00:08:56.040 --> 00:09:01.140
Finally, we're going to make one last change, which is fixing the URL.

146
00:09:01.140 --> 00:09:04.680
As pointed out before, when the rial application runs,

147
00:09:04.680 --> 00:09:08.380
it's not going to point to a local host 80 80.

148
00:09:08.380 --> 00:09:12.200
This means we need to make the euro all of our credit check service a

149
00:09:12.200 --> 00:09:17.880
configurable property so it can change between tests and production.

150
00:09:17.880 --> 00:09:22.640
To do this, we can add the property toe application dot properties.

151
00:09:22.640 --> 00:09:27.190
We'll call it credit check service based rural and give it a value.

152
00:09:27.190 --> 00:09:28.090
Remember,

153
00:09:28.090 --> 00:09:30.800
it's only debase you are our That would change between

154
00:09:30.800 --> 00:09:33.740
environments so the other parts, like the path,

155
00:09:33.740 --> 00:09:37.340
do not need to be configurable.

156
00:09:37.340 --> 00:09:41.150
We can and wire it into a contract by making it a field and

157
00:09:41.150 --> 00:09:44.340
annotating it with the value annotation,

158
00:09:44.340 --> 00:09:46.840
giving it the proper name.

159
00:09:46.840 --> 00:09:50.050
Then we can re factor our call to the gateway,

160
00:09:50.050 --> 00:09:54.240
making use of the spring your eye components build a class

161
00:09:54.240 --> 00:09:56.520
we can programmatically provide the base.

162
00:09:56.520 --> 00:09:57.640
Cheryl,

163
00:09:57.640 --> 00:10:01.400
at the credit scored path converted into your URL

164
00:10:01.400 --> 00:10:04.640
on impassive into rest template.

165
00:10:04.640 --> 00:10:09.840
Let's rerun our test and confirmed it still goes green.

166
00:10:09.840 --> 00:10:11.980
We can see that it's the list green.

167
00:10:11.980 --> 00:10:14.160
Only now it's using the configurable.

168
00:10:14.160 --> 00:10:18.440
You're all property, which can change when we promotes an environment,

169
00:10:18.440 --> 00:10:21.430
which means you've now successfully implemented to consumer

170
00:10:21.430 --> 00:10:31.000
driven contract pattern on our consumer sides. The next stop will be fully implementing everything on the provider side

