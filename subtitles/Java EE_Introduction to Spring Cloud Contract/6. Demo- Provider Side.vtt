WEBVTT
1
00:00:02.040 --> 00:00:04.770
[Autogenerated] okay in Ness Demo will be expanding,

2
00:00:04.770 --> 00:00:08.760
and what we've already done so far in this module will take our

3
00:00:08.760 --> 00:00:12.950
existing contracts and then add an input block so weak control how

4
00:00:12.950 --> 00:00:15.840
it's triggered on the provider side.

5
00:00:15.840 --> 00:00:17.140
Once this is done,

6
00:00:17.140 --> 00:00:21.820
we will generate provide a side tests and then we will make the relevant

7
00:00:21.820 --> 00:00:26.230
changes in our provider to make our provider side tests pass.

8
00:00:26.230 --> 00:00:28.140
Starting in our provider.

9
00:00:28.140 --> 00:00:31.470
Let's run a maven install this time not skipping the

10
00:00:31.470 --> 00:00:34.390
tests in order to see what happens.

11
00:00:34.390 --> 00:00:35.600
Looking at the failure,

12
00:00:35.600 --> 00:00:40.700
we can see it's caused by our message contract Missing A property triggered by

13
00:00:40.700 --> 00:00:45.050
this is because our contract only contains what's needed for the consumer side

14
00:00:45.050 --> 00:00:48.200
of the interaction for the provider side tests.

15
00:00:48.200 --> 00:00:52.470
We need to tell the contract what causes a message to be produced.

16
00:00:52.470 --> 00:00:56.540
In order for that test to be generated correctly,

17
00:00:56.540 --> 00:01:00.780
let's navigate to our contract and then add the input method,

18
00:01:00.780 --> 00:01:05.150
which is used to tell the provider side test what input to our service causes.

19
00:01:05.150 --> 00:01:09.600
A message to be fired in our case will be using the triggered by

20
00:01:09.600 --> 00:01:13.300
methods why we can provide the name of a trigger method to be

21
00:01:13.300 --> 00:01:16.450
called by the contract verification test.

22
00:01:16.450 --> 00:01:19.280
Let's call it scores high.

23
00:01:19.280 --> 00:01:21.770
Okay, now contracts complete.

24
00:01:21.770 --> 00:01:25.240
We can rerun our tests and see what happens.

25
00:01:25.240 --> 00:01:25.960
Great.

26
00:01:25.960 --> 00:01:29.880
We got a little favor as this time we successfully generated

27
00:01:29.880 --> 00:01:33.040
our tests but had a compilation error.

28
00:01:33.040 --> 00:01:37.500
This error is caused by the score of high Mefford reference in our contract.

29
00:01:37.500 --> 00:01:39.740
Not yet existing.

30
00:01:39.740 --> 00:01:42.140
Let's navigate to degenerated test.

31
00:01:42.140 --> 00:01:44.940
Undo some analysis.

32
00:01:44.940 --> 00:01:47.300
We can see our test now has a contract.

33
00:01:47.300 --> 00:01:51.590
Verify a messaging object injected into it and also a

34
00:01:51.590 --> 00:01:54.840
contract verifier object mapping objects.

35
00:01:54.840 --> 00:01:58.690
This is because we now have a message driven contract so spring cloud

36
00:01:58.690 --> 00:02:02.940
contracts needs them in order to generate its tests.

37
00:02:02.940 --> 00:02:04.010
Scrolling down.

38
00:02:04.010 --> 00:02:06.980
We can see the score of high Mefford being called,

39
00:02:06.980 --> 00:02:10.040
which of course, does not exist.

40
00:02:10.040 --> 00:02:15.120
Okay, let's clean all of our generated tests by doing a maven clean,

41
00:02:15.120 --> 00:02:18.740
and then we'll start trying to get them to compile.

42
00:02:18.740 --> 00:02:21.900
The first thing we'll do is create a new base contract.

43
00:02:21.900 --> 00:02:25.340
Test based contract tests messaging.

44
00:02:25.340 --> 00:02:26.060
It's simpler,

45
00:02:26.060 --> 00:02:29.740
more maintainable to separate it like this rather than forging

46
00:02:29.740 --> 00:02:32.940
everything together into one base class.

47
00:02:32.940 --> 00:02:35.880
Also in our case will need a slightly different

48
00:02:35.880 --> 00:02:41.940
configuration to the hate DTP tests, as we need to start a real spring context,

49
00:02:41.940 --> 00:02:44.500
will then create a new spring boot test and then

50
00:02:44.500 --> 00:02:47.590
pointed toe our application class.

51
00:02:47.590 --> 00:02:49.870
Well, then make our task room with the spring runner.

52
00:02:49.870 --> 00:02:53.630
So our context is enabled when it executes.

53
00:02:53.630 --> 00:02:56.490
And finally we will auto configured a message

54
00:02:56.490 --> 00:02:59.440
biofire This is required to Winston.

55
00:02:59.440 --> 00:03:03.890
She ate the verifier classes that were injected into our test.

56
00:03:03.890 --> 00:03:05.210
If we didn't do this,

57
00:03:05.210 --> 00:03:09.020
they would not exist and could not be wired in will

58
00:03:09.020 --> 00:03:11.440
also create our score of high Mefford.

59
00:03:11.440 --> 00:03:17.470
So a subclass will compile when trying to call it okay, running install again.

60
00:03:17.470 --> 00:03:19.980
We should still get a failure.

61
00:03:19.980 --> 00:03:23.110
This is because our generated tests will still point to

62
00:03:23.110 --> 00:03:25.740
the old based contract has class.

63
00:03:25.740 --> 00:03:30.020
What we actually want is for all our hate TTP contracts to still

64
00:03:30.020 --> 00:03:34.450
use this original based contract test on our messaging contracts to

65
00:03:34.450 --> 00:03:38.210
use our new one to get started with.

66
00:03:38.210 --> 00:03:41.000
This will split them by directory.

67
00:03:41.000 --> 00:03:43.140
Let's create a message in directory,

68
00:03:43.140 --> 00:03:47.990
are moved the contract into it and then create a hate TTP directory.

69
00:03:47.990 --> 00:03:52.660
A move the contract into that we can then navigated

70
00:03:52.660 --> 00:03:55.360
upon a modify our configuration,

71
00:03:55.360 --> 00:03:59.390
so each contract uses a corresponding based class.

72
00:03:59.390 --> 00:04:02.130
To do this, we can declare a base class mapping,

73
00:04:02.130 --> 00:04:06.910
stag and put in two based class mapping entries will

74
00:04:06.910 --> 00:04:08.400
create one were for Red Jacks,

75
00:04:08.400 --> 00:04:12.440
which matches everything in our hates TTP package and then set

76
00:04:12.440 --> 00:04:14.900
the contract based test to our original hate.

77
00:04:14.900 --> 00:04:20.970
TTP one then will create a second one, this time with for Red Jacks,

78
00:04:20.970 --> 00:04:24.070
which matches everything in our messaging package on,

79
00:04:24.070 --> 00:04:28.440
then set the base contract test to our new messaging warm.

80
00:04:28.440 --> 00:04:34.240
Okay, let's run amazing clean install, and we'll see what happens this time.

81
00:04:34.240 --> 00:04:37.480
Although it's still fails, we've got favor again.

82
00:04:37.480 --> 00:04:40.350
This is because everything compiled the spring

83
00:04:40.350 --> 00:04:43.110
contact started during our Tash run on.

84
00:04:43.110 --> 00:04:46.780
We actually got all the way to the bit where we tried to assert the message,

85
00:04:46.780 --> 00:04:51.030
but it was no will navigate to the test and take a more

86
00:04:51.030 --> 00:04:54.470
detailed look at what's happening here.

87
00:04:54.470 --> 00:04:57.210
We can see our score of high method is called where it

88
00:04:57.210 --> 00:05:01.060
should ultimately trigger our message, but we've yet to implement it.

89
00:05:01.060 --> 00:05:03.530
We can also see the contract, verify it,

90
00:05:03.530 --> 00:05:08.000
retrieve our message from the credit scores channel and Finally,

91
00:05:08.000 --> 00:05:10.950
there are some assertions that verify is the same as

92
00:05:10.950 --> 00:05:13.880
what we declared in our contract.

93
00:05:13.880 --> 00:05:19.540
So now all that's left is implementing our feature are making the test pass.

94
00:05:19.540 --> 00:05:24.040
Let's start by navigating to the base contract test messaging class.

95
00:05:24.040 --> 00:05:28.440
We'll wire in a new object, which will call credit score producer.

96
00:05:28.440 --> 00:05:31.300
This will be the class are provider micro service

97
00:05:31.300 --> 00:05:34.500
ultimately uses to produce messages.

98
00:05:34.500 --> 00:05:37.180
We can change our score of high methods so it

99
00:05:37.180 --> 00:05:40.480
publishes a score using our producer.

100
00:05:40.480 --> 00:05:42.090
We can call them effort published.

101
00:05:42.090 --> 00:05:46.040
Score on passing a credit check response subject.

102
00:05:46.040 --> 00:05:51.440
We can animate the second argument high as this is what our contracts expects.

103
00:05:51.440 --> 00:05:53.150
The first argument, the U I.

104
00:05:53.150 --> 00:05:53.750
D.

105
00:05:53.750 --> 00:05:56.940
Must also match what our contract expects.

106
00:05:56.940 --> 00:05:59.100
Let's switch back to our contract.

107
00:05:59.100 --> 00:06:04.680
Copy it, switch back to our base contract messaging class, declare a U i.

108
00:06:04.680 --> 00:06:04.890
D.

109
00:06:04.890 --> 00:06:07.440
Variable on, then paste it.

110
00:06:07.440 --> 00:06:08.260
We can then add.

111
00:06:08.260 --> 00:06:10.280
It is an argument to our method.

112
00:06:10.280 --> 00:06:10.660
Andi.

113
00:06:10.660 --> 00:06:14.740
Some cleanup by performing some static imports.

114
00:06:14.740 --> 00:06:19.540
Finally, let's use altered enter to generate the method.

115
00:06:19.540 --> 00:06:21.690
Before we proceed any further,

116
00:06:21.690 --> 00:06:26.140
we need to add the spring cloud stream dependencies to our palm file,

117
00:06:26.140 --> 00:06:30.800
just like on the consumer side, many messaging frameworks are supported,

118
00:06:30.800 --> 00:06:34.740
but we'll be using this one to stay consistent.

119
00:06:34.740 --> 00:06:36.450
First, we'll add the spring clouds,

120
00:06:36.450 --> 00:06:39.510
start a stream rabbit dependency without a version

121
00:06:39.510 --> 00:06:42.640
number as it's provided by our bomb.

122
00:06:42.640 --> 00:06:46.770
And then we'll add the spring Cloud starter stream test support dependency,

123
00:06:46.770 --> 00:06:49.330
providing us with our test scaffolding.

124
00:06:49.330 --> 00:06:49.900
Again.

125
00:06:49.900 --> 00:06:53.840
We don't need a version number as it's provided by our bomb.

126
00:06:53.840 --> 00:06:56.220
Now we have the required dependencies.

127
00:06:56.220 --> 00:06:58.940
Let's navigate back to our producer.

128
00:06:58.940 --> 00:07:01.830
We'll make it a spring bean by adding that component

129
00:07:01.830 --> 00:07:05.720
annotation and then declare a private source field,

130
00:07:05.720 --> 00:07:10.730
making a constructor argument that will be populated by spring again.

131
00:07:10.730 --> 00:07:13.770
We're not going to go into the details of spring cloud stream

132
00:07:13.770 --> 00:07:17.440
here as the focus is on spring cloud contract,

133
00:07:17.440 --> 00:07:20.530
but basically the sources and obstruction and we will be

134
00:07:20.530 --> 00:07:23.940
using for sending a message to rob it and Q.

135
00:07:23.940 --> 00:07:28.830
To achieve this will call the output method and then call send passing in

136
00:07:28.830 --> 00:07:34.060
the message with a payload which is equal to our credit shot response will

137
00:07:34.060 --> 00:07:36.890
also navigate to our application class on,

138
00:07:36.890 --> 00:07:42.040
then annotate it with that enable binding passing our source class again,

139
00:07:42.040 --> 00:07:44.040
again without the specifics.

140
00:07:44.040 --> 00:07:48.430
This is what will bind Rub it to our source Class finally will

141
00:07:48.430 --> 00:07:52.540
model Our application Properties file will first introduce a

142
00:07:52.540 --> 00:07:57.370
spring cloud stream bindings property, which makes our content type application.

143
00:07:57.370 --> 00:08:02.370
Jason and then introduce a destination property which make sure our

144
00:08:02.370 --> 00:08:06.160
source output goes down the credit scores channel.

145
00:08:06.160 --> 00:08:08.750
Okay, so we should be good to go now.

146
00:08:08.750 --> 00:08:13.690
So let's navigate to our test run it and see what happens.

147
00:08:13.690 --> 00:08:15.980
Fantastic artists pass,

148
00:08:15.980 --> 00:08:20.120
meaning we've implemented a provider side of our interaction.

149
00:08:20.120 --> 00:08:21.400
As we can see,

150
00:08:21.400 --> 00:08:26.720
the workflow isn't that much different to hate TTP Kashima during contracts.

151
00:08:26.720 --> 00:08:29.680
The only real difference is a tiny one in a contract

152
00:08:29.680 --> 00:08:38.000
structure on the actual implementation code. Be messy, specific Robin and hates dtb specific.

