1
00:00:01,980 --> 00:00:04,970
[Autogenerated] So far, we've gone for the entire consumer driven,

2
00:00:04,970 --> 00:00:09,020
contract testing, workflow Wish win cloud contract.

3
00:00:09,020 --> 00:00:13,730
This has involved taking a consumer taking a provider,

4
00:00:13,730 --> 00:00:17,470
a news in a single contract with a single interaction between

5
00:00:17,470 --> 00:00:21,140
the two of them to implement our feature.

6
00:00:21,140 --> 00:00:23,760
Whilst has being a lot to learn along the way,

7
00:00:23,760 --> 00:00:28,040
it's still not really enough to develop a production system.

8
00:00:28,040 --> 00:00:30,470
This is because there is normally more than one

9
00:00:30,470 --> 00:00:33,780
interaction between T micro services.

10
00:00:33,780 --> 00:00:34,510
And, of course,

11
00:00:34,510 --> 00:00:40,040
these interactions will require more and more contracts to be created.

12
00:00:40,040 --> 00:00:42,930
There's no anything we have to do to get this to work,

13
00:00:42,930 --> 00:00:45,740
often create the additional contracts.

14
00:00:45,740 --> 00:00:47,410
When we generate stops,

15
00:00:47,410 --> 00:00:51,800
they will contain all of the interactions in all of the contracts on.

16
00:00:51,800 --> 00:00:56,020
Whenever we create provider side contract verification tests,

17
00:00:56,020 --> 00:01:04,190
they, too will verify ordinance or actions in all the contracts.

18
00:01:04,190 --> 00:01:08,280
So just before using more than one contract together in a demo,

19
00:01:08,280 --> 00:01:11,940
we're going to take a quick look at the matching process.

20
00:01:11,940 --> 00:01:16,630
This is what spring cloud contract or more accurately, y mark goes through.

21
00:01:16,630 --> 00:01:21,440
In order to determine which responds to give for requests to a stop.

22
00:01:21,440 --> 00:01:25,360
It's important for us to understand this as it makes it easy to handle

23
00:01:25,360 --> 00:01:29,940
multiple contracts on D book when something goes wrong.

24
00:01:29,940 --> 00:01:33,400
So we'll start with a table where each row represents a

25
00:01:33,400 --> 00:01:35,420
simple ized view off the request.

26
00:01:35,420 --> 00:01:37,340
Part of a contract.

27
00:01:37,340 --> 00:01:40,500
For example, the first row represents a contract,

28
00:01:40,500 --> 00:01:44,610
which requires a get request to slash matches under query,

29
00:01:44,610 --> 00:01:45,920
Where Mrs Must Equal.

30
00:01:45,920 --> 00:01:50,590
True, The second row represents another contract,

31
00:01:50,590 --> 00:01:55,880
which requires a get request to slash Mrs Onda query where matches must equal.

32
00:01:55,880 --> 00:02:00,840
True, the same rules apply to deferred row.

33
00:02:00,840 --> 00:02:04,590
Let's imagine these are loaded into a stop so we can fire.

34
00:02:04,590 --> 00:02:09,430
Request it it on follow through the table to see what happens.

35
00:02:09,430 --> 00:02:13,270
Let's try a get request to slash matches with a query.

36
00:02:13,270 --> 00:02:16,610
Off matches equals tree oneness.

37
00:02:16,610 --> 00:02:17,090
Request.

38
00:02:17,090 --> 00:02:18,190
It's wire mark.

39
00:02:18,190 --> 00:02:20,350
It will start with the first row on.

40
00:02:20,350 --> 00:02:26,610
Compare each cell to to request the method, get matches our request method.

41
00:02:26,610 --> 00:02:32,090
So why Mark locks and match the path also matches our request path.

42
00:02:32,090 --> 00:02:34,940
So again, why mark locks a match?

43
00:02:34,940 --> 00:02:39,780
But in the case of our query, Mrs does not equal matches,

44
00:02:39,780 --> 00:02:44,040
so we do not lock a match as every single part of the

45
00:02:44,040 --> 00:02:46,960
contract did not match the request wire.

46
00:02:46,960 --> 00:02:49,260
Mark will treat it as a miss on,

47
00:02:49,260 --> 00:02:54,090
then iterated a net contract and tried out again.

48
00:02:54,090 --> 00:03:01,240
The methods match the path is not much a slash mrs does no equal slash Much is.

49
00:03:01,240 --> 00:03:06,720
But this time the query does much again as every single part

50
00:03:06,720 --> 00:03:09,350
of the contract did not match a request.

51
00:03:09,350 --> 00:03:11,850
Why Mark will treat it as a miss.

52
00:03:11,850 --> 00:03:16,240
So again it will Iterating this time said afeard row.

53
00:03:16,240 --> 00:03:21,920
The methods match the paths much on a query matches as

54
00:03:21,920 --> 00:03:24,810
every single part of the request matches.

55
00:03:24,810 --> 00:03:28,460
We can say that this contract was met by the request.

56
00:03:28,460 --> 00:03:36,000
Following this, the response part of this contract will be returned by the stub to the client.

