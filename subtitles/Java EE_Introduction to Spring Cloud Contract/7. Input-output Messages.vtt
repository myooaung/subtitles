WEBVTT
1
00:00:01.940 --> 00:00:05.660
[Autogenerated] Whilst we have covered both consuming and producing messages,

2
00:00:05.660 --> 00:00:09.740
there is one final scenario that spring Cloud contract supports.

3
00:00:09.740 --> 00:00:14.940
Some services can be both for provider under consumer at the same time,

4
00:00:14.940 --> 00:00:18.810
which can intrinsically linked chain of messages together.

5
00:00:18.810 --> 00:00:20.060
For example,

6
00:00:20.060 --> 00:00:24.860
if we were to send a mashes to a Micra service that I'm receiving that message,

7
00:00:24.860 --> 00:00:27.540
it may output another message.

8
00:00:27.540 --> 00:00:31.640
This emperor output pattern is more common than you might think.

9
00:00:31.640 --> 00:00:32.570
For example,

10
00:00:32.570 --> 00:00:35.960
it could come from implement in a synchronous request reply call

11
00:00:35.960 --> 00:00:39.400
from a consumer or even for an asynchronous flowed.

12
00:00:39.400 --> 00:00:43.180
It still results in message chaining ive away.

13
00:00:43.180 --> 00:00:48.260
This interaction can still be captured in a contract just like the other ones.

14
00:00:48.260 --> 00:00:53.140
So to capture this interaction, we start with a contract is normal.

15
00:00:53.140 --> 00:00:56.630
The core difference this time is that when we declare an import,

16
00:00:56.630 --> 00:01:00.440
we declare an important message rather than a method trigger.

17
00:01:00.440 --> 00:01:03.740
The content of this is straightforward containing acute,

18
00:01:03.740 --> 00:01:07.640
and a message comes from a body and some Hatter's.

19
00:01:07.640 --> 00:01:17.000
Following this, we declare an output message just slight before. There's no difference in this part from our previous contracts

