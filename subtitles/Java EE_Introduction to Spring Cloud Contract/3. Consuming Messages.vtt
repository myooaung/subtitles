WEBVTT
1
00:00:02.300 --> 00:00:04.120
[Autogenerated] so the first interaction we're going

2
00:00:04.120 --> 00:00:07.040
to look at is Messi's consumption.

3
00:00:07.040 --> 00:00:08.190
Very simply,

4
00:00:08.190 --> 00:00:12.940
architecture might involve the consumer on that consumer

5
00:00:12.940 --> 00:00:16.050
may receive messages from a broker on,

6
00:00:16.050 --> 00:00:20.440
then performs on logic based on the data within them.

7
00:00:20.440 --> 00:00:23.630
In order for this interaction to function is expected,

8
00:00:23.630 --> 00:00:26.900
our consumer needs to listen to the correct que name.

9
00:00:26.900 --> 00:00:30.100
Otherwise, it would not receive the messages.

10
00:00:30.100 --> 00:00:33.430
It also needs to know what scheme of the messes payload house

11
00:00:33.430 --> 00:00:36.440
in order to be able to de serialize it.

12
00:00:36.440 --> 00:00:41.270
A ness is the information that we can capture in our contract so it can

13
00:00:41.270 --> 00:00:44.960
guarantee that when the consumer is deployed with the rial broker,

14
00:00:44.960 --> 00:00:47.390
everything will function as expected.

15
00:00:47.390 --> 00:00:51.330
So what does the spring cloud contract DSL look like when we

16
00:00:51.330 --> 00:00:54.340
want to capture this sort of interaction?

17
00:00:54.340 --> 00:00:57.750
Well, we define a contract just is normal,

18
00:00:57.750 --> 00:01:01.840
but this time it will contain slightly different data.

19
00:01:01.840 --> 00:01:04.230
We first need to provide a label.

20
00:01:04.230 --> 00:01:05.720
This is a unique I d.

21
00:01:05.720 --> 00:01:09.340
Used to trigger the contract in the consumer side tests.

22
00:01:09.340 --> 00:01:12.740
We'll go into more detail about this shortly.

23
00:01:12.740 --> 00:01:15.340
We then call the output message methods.

24
00:01:15.340 --> 00:01:19.390
This defines a message that will be produced by our contract.

25
00:01:19.390 --> 00:01:20.700
We start with Center,

26
00:01:20.700 --> 00:01:23.410
which declares a Q or channel that the message in our

27
00:01:23.410 --> 00:01:25.560
contract will be sent through with them.

28
00:01:25.560 --> 00:01:29.140
Provide a body which contains a message, payloads.

29
00:01:29.140 --> 00:01:31.390
And finally, some meshes headers.

30
00:01:31.390 --> 00:01:34.400
Once you've generated stops from our contract,

31
00:01:34.400 --> 00:01:39.440
just like how we did have hates TTP, things will work slightly differently.

32
00:01:39.440 --> 00:01:42.320
This is because instead of using why Mark,

33
00:01:42.320 --> 00:01:46.740
we use a class called to stop trigger to test our interactions.

34
00:01:46.740 --> 00:01:50.820
First of all, it's auto configured by spring cloud contract boots,

35
00:01:50.820 --> 00:01:55.640
so we can just wire it into our test class without having to do any fan.

36
00:01:55.640 --> 00:01:59.780
Then we can use it to trigger our stops fired a label.

37
00:01:59.780 --> 00:02:03.130
The reason we have to do this is because our consumer doesn't

38
00:02:03.130 --> 00:02:06.840
actually do anything itself to trigger the message.

39
00:02:06.840 --> 00:02:10.310
For example, with a hasty TP contract,

40
00:02:10.310 --> 00:02:13.890
the consumer makes a hasty TP request in order to

41
00:02:13.890 --> 00:02:17.040
initiate the interaction in that contract.

42
00:02:17.040 --> 00:02:21.520
But in the case of receiving messages, the consumer doesn't do anythin.

43
00:02:21.520 --> 00:02:26.210
It's entirely up to the provider to decide to send that message.

44
00:02:26.210 --> 00:02:29.740
That's why we need a stuffed trigger to manually cause a message to be

45
00:02:29.740 --> 00:02:34.000
dispatched as it takes a place off this provider.

46
00:02:34.000 --> 00:02:38.750
Finally, we had some assertions, which make sure once a message is received,

47
00:02:38.750 --> 00:02:41.610
the consumer does, as is expected.

48
00:02:41.610 --> 00:02:48.000
This could be a simple check, for example, to see if something's being possessed it.

