WEBVTT
1
00:00:01.240 --> 00:00:02.390
[Autogenerated] in this demo,

2
00:00:02.390 --> 00:00:07.280
we're going to create and work with a centralized contract repository.

3
00:00:07.280 --> 00:00:11.440
First, we're going to migrate our existing contracts to it.

4
00:00:11.440 --> 00:00:15.740
Well, then regenerate the stops for Arkan Sheamus side tests.

5
00:00:15.740 --> 00:00:18.720
And then we'll verify the tests still pass despite

6
00:00:18.720 --> 00:00:21.710
the location of our new contracts.

7
00:00:21.710 --> 00:00:21.920
Well,

8
00:00:21.920 --> 00:00:26.560
then generate our master contract jar regenerate our contract

9
00:00:26.560 --> 00:00:29.820
verification tests based on the contracts in that jar,

10
00:00:29.820 --> 00:00:34.350
Robin and our provider side project and finally verified

11
00:00:34.350 --> 00:00:40.740
are provided side tests still pass.

12
00:00:40.740 --> 00:00:43.470
We're going to start off with an empty project.

13
00:00:43.470 --> 00:00:44.890
You can create one yourself.

14
00:00:44.890 --> 00:00:46.640
Have you wished by your I D?

15
00:00:46.640 --> 00:00:48.040
A.

16
00:00:48.040 --> 00:00:52.040
Well, then create a directory structure to hold our contracts.

17
00:00:52.040 --> 00:00:54.180
In this project, they will live in the source.

18
00:00:54.180 --> 00:01:00.230
Main resource is contracts directory, as opposed to in test Resource is below.

19
00:01:00.230 --> 00:01:05.340
That will create a directory for our group com Retail Bank.

20
00:01:05.340 --> 00:01:08.840
Now, as we will be generating our contracts for our credit,

21
00:01:08.840 --> 00:01:12.440
Jack service will create a directory for it.

22
00:01:12.440 --> 00:01:15.380
If we were creating contracts for another service,

23
00:01:15.380 --> 00:01:17.680
it would of course, live alongside this one.

24
00:01:17.680 --> 00:01:20.540
But in a different directory,

25
00:01:20.540 --> 00:01:25.240
switching to our provide a project we can now copy is Palm file.

26
00:01:25.240 --> 00:01:26.990
We're being a bit lazy here,

27
00:01:26.990 --> 00:01:32.140
but already contains what we need for a centralized contract repository

28
00:01:32.140 --> 00:01:36.910
we condense which back to our contract repository and paste the palm or

29
00:01:36.910 --> 00:01:40.610
we don't need to do is remove all the craft keeping Only the spring

30
00:01:40.610 --> 00:01:42.940
cloud contract may even plug in.

31
00:01:42.940 --> 00:01:45.900
The reason we don't need anything else is because it was only

32
00:01:45.900 --> 00:01:49.040
used for the building intestine of our consumer.

33
00:01:49.040 --> 00:01:53.040
Now all we need is contract generation codes.

34
00:01:53.040 --> 00:01:58.440
We will also make a subdirectory for our consumer credit card service.

35
00:01:58.440 --> 00:02:03.140
This means this directory is for contracts between these two services.

36
00:02:03.140 --> 00:02:06.490
If we wanted to create contracts for a different consumer,

37
00:02:06.490 --> 00:02:08.860
then it would live in the corresponding folder at

38
00:02:08.860 --> 00:02:10.750
the same place in the hierarchy.

39
00:02:10.750 --> 00:02:16.470
Just like with our provider back in our provider this time will cut our

40
00:02:16.470 --> 00:02:20.240
contracts is they will no longer need to be stored here.

41
00:02:20.240 --> 00:02:24.330
And then we can switch back to our centralized contract repository on

42
00:02:24.330 --> 00:02:27.440
impatient in the credit card service directory.

43
00:02:27.440 --> 00:02:28.220
Again.

44
00:02:28.220 --> 00:02:31.940
It lives here because this directory the notes interactions between

45
00:02:31.940 --> 00:02:36.140
the credit card service on the credit check service.

46
00:02:36.140 --> 00:02:39.310
Now we'll switch to our terminal in order to generate our

47
00:02:39.310 --> 00:02:43.540
contracts and do some analysis of what's happening.

48
00:02:43.540 --> 00:02:44.820
Starting with fellas.

49
00:02:44.820 --> 00:02:48.400
We'll take a look at what we currently have stored for our retail bank.

50
00:02:48.400 --> 00:02:51.040
In our local maven repository,

51
00:02:51.040 --> 00:02:55.640
we can see we have some directories left behind from previous modules.

52
00:02:55.640 --> 00:02:58.980
Let's removed them using the RM command.

53
00:02:58.980 --> 00:03:04.440
And then let's double chatter gone by using ls which we can see that they are.

54
00:03:04.440 --> 00:03:05.400
Okay,

55
00:03:05.400 --> 00:03:09.400
let's navigate to our centralized construct repository directory and

56
00:03:09.400 --> 00:03:13.340
then navigates our credit check service Subdirectory.

57
00:03:13.340 --> 00:03:18.780
We can Enron maven clean install skip tests is normal and generate our contract.

58
00:03:18.780 --> 00:03:23.400
Just like we're in an ordinary provider project.

59
00:03:23.400 --> 00:03:24.740
Looking at the output,

60
00:03:24.740 --> 00:03:28.330
we can see that they have been installed is normal as if we're still in our

61
00:03:28.330 --> 00:03:33.980
original provider taking a look inside a jar using jar TF.

62
00:03:33.980 --> 00:03:38.140
We can also confirm the stubs and contracts it air.

63
00:03:38.140 --> 00:03:42.550
Okay, So back in our consumer, we can now run our tests.

64
00:03:42.550 --> 00:03:46.640
Remember, these are dependent on our stops.

65
00:03:46.640 --> 00:03:47.250
Great.

66
00:03:47.250 --> 00:03:48.540
The test pass,

67
00:03:48.540 --> 00:03:52.320
even though this time the stops a depended on were pitting the maven

68
00:03:52.320 --> 00:03:56.840
repository by a centralized contract repository bills.

69
00:03:56.840 --> 00:03:57.980
Okay.

70
00:03:57.980 --> 00:04:02.270
Now, against implement to provide aside just as a warning.

71
00:04:02.270 --> 00:04:06.240
The configuration here isn't quite a streamlined as it could bay,

72
00:04:06.240 --> 00:04:08.300
and there's a little bit of a learning curve,

73
00:04:08.300 --> 00:04:12.240
especially if you're unfamiliar with the maven assembly plug in.

74
00:04:12.240 --> 00:04:16.490
However, the source code for this is available for use a copy along with you,

75
00:04:16.490 --> 00:04:18.140
of course, assess.

76
00:04:18.140 --> 00:04:20.820
So don't worry too much if you don't understand,

77
00:04:20.820 --> 00:04:25.140
as you can re use a code we produce in this module.

78
00:04:25.140 --> 00:04:25.990
Okay,

79
00:04:25.990 --> 00:04:29.350
so first will create an assembly directory and then we'll

80
00:04:29.350 --> 00:04:32.340
add a contract star XML file to it.

81
00:04:32.340 --> 00:04:35.980
This will be a configuration file from the Maven Assembly Plug in,

82
00:04:35.980 --> 00:04:39.000
which is what we will be using to package all of the contracts

83
00:04:39.000 --> 00:04:42.610
together into a jar file will give it an I.

84
00:04:42.610 --> 00:04:43.780
D.

85
00:04:43.780 --> 00:04:47.680
Set its former as a job and then configure that jar to

86
00:04:47.680 --> 00:04:51.400
contain everything in our contract directory.

87
00:04:51.400 --> 00:04:54.060
Finally, will add some exclusions for files.

88
00:04:54.060 --> 00:04:56.680
We don't want to end up in our jar, so it's easy.

89
00:04:56.680 --> 00:04:59.000
Intelligent AML fail the idea.

90
00:04:59.000 --> 00:05:02.490
Fail on the target directories.

91
00:05:02.490 --> 00:05:07.340
Moving back to our project room, we now need to create a palm file.

92
00:05:07.340 --> 00:05:11.080
We can create a skeleton with the group an artifact ideas much

93
00:05:11.080 --> 00:05:14.940
in our project on the name and description.

94
00:05:14.940 --> 00:05:18.650
We can then declare a plug in the maven assembly plug in

95
00:05:18.650 --> 00:05:21.540
and then configure it to build a job based on the XML

96
00:05:21.540 --> 00:05:24.440
file that we configured again.

97
00:05:24.440 --> 00:05:27.770
Don't worry too much about intricacies of this as juice.

98
00:05:27.770 --> 00:05:29.100
A degenerate nature of what?

99
00:05:29.100 --> 00:05:35.070
We're doing it simply enough to take the code example and reuse it.

100
00:05:35.070 --> 00:05:36.780
Switching back to the terminal,

101
00:05:36.780 --> 00:05:41.740
we can navigate a project route and run a maven clean install.

102
00:05:41.740 --> 00:05:46.000
We can see in the locks that we have created our contracts Jar.

103
00:05:46.000 --> 00:05:48.220
Okay, Back in our provider,

104
00:05:48.220 --> 00:05:52.190
we need to configure it to use a contracts in our contract are in

105
00:05:52.190 --> 00:05:55.570
order to generate our contract verification tests.

106
00:05:55.570 --> 00:06:00.810
This is because we've deleted the existing warms from the provider repository.

107
00:06:00.810 --> 00:06:04.800
First, we need to navigate to the palm and sat contracts work off.

108
00:06:04.800 --> 00:06:06.300
Lying to true.

109
00:06:06.300 --> 00:06:09.190
This is because we've installed our contracts locally,

110
00:06:09.190 --> 00:06:12.640
so going to get them from my local repository.

111
00:06:12.640 --> 00:06:16.550
We can then use a contract dependency tag to specify that will be

112
00:06:16.550 --> 00:06:19.640
getting our contracts from an external jar.

113
00:06:19.640 --> 00:06:23.860
All we need to do here is Picard group idea and artifacts I D on.

114
00:06:23.860 --> 00:06:26.390
Then we can run the tests.

115
00:06:26.390 --> 00:06:28.770
Success are build passes.

116
00:06:28.770 --> 00:06:33.640
But how do we know that we generated contract verification tests at all?

117
00:06:33.640 --> 00:06:38.380
Well, we can navigate to our target directory and take a look here.

118
00:06:38.380 --> 00:06:41.500
We can see our contract verification Tash generated is

119
00:06:41.500 --> 00:06:46.090
normal this time from our contracts jar.

120
00:06:46.090 --> 00:06:48.770
And that's it, although a simple example.

121
00:06:48.770 --> 00:06:52.550
We can see how this can become a lot more maintainable going forward,

122
00:06:52.550 --> 00:06:55.150
especially when we have multiple providers,

123
00:06:55.150 --> 00:07:03.000
each with multiple consumers. This is because they all fit nicely together in the directory structure.

