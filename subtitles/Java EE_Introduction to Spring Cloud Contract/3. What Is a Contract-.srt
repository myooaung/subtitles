1
00:00:02,040 --> 00:00:06,640
[Autogenerated] so let's go into a little bit more depth about what contract is.

2
00:00:06,640 --> 00:00:12,130
A contract is an agreed interaction between a consumer under provider.

3
00:00:12,130 --> 00:00:13,310
Essentially,

4
00:00:13,310 --> 00:00:17,340
it states that when a specific request is made by a consumer than a

5
00:00:17,340 --> 00:00:20,820
specific response should be given by a provider.

6
00:00:20,820 --> 00:00:24,360
For example, in the case of our digital retail bank,

7
00:00:24,360 --> 00:00:27,720
a contract could state when a consumer makes a specific

8
00:00:27,720 --> 00:00:30,890
hate TTP request to an account service,

9
00:00:30,890 --> 00:00:34,280
then it should return a specific hate TTP response

10
00:00:34,280 --> 00:00:38,110
containing the cow information to elaborate.

11
00:00:38,110 --> 00:00:41,450
Any required interaction can go into a contract,

12
00:00:41,450 --> 00:00:47,240
which allows all possible cross service interactions to be fully testable.

13
00:00:47,240 --> 00:00:52,590
One key thing to emphasize is that a contract is continually tested when

14
00:00:52,590 --> 00:00:56,420
a consumer's tests Iran they run against a contract.

15
00:00:56,420 --> 00:01:01,540
When it providers tests Iran, they, too, are run against the same contract.

16
00:01:01,540 --> 00:01:05,900
This continual testing guarantees a local build failure if a

17
00:01:05,900 --> 00:01:11,380
breaking changes made whilst http comes to mind,

18
00:01:11,380 --> 00:01:16,590
the reality is the contract can represent interactions in any protocol.

19
00:01:16,590 --> 00:01:17,330
In fact,

20
00:01:17,330 --> 00:01:20,380
a contract does not even need to represent synchronous

21
00:01:20,380 --> 00:01:24,340
interactions on can represent asynchronous.

22
00:01:24,340 --> 00:01:25,460
In other words,

23
00:01:25,460 --> 00:01:30,280
the core principle of a contract is a guarantees that we're able to produce

24
00:01:30,280 --> 00:01:35,410
and consume data correctly across micro services on a technology choice that

25
00:01:35,410 --> 00:01:39,540
we used to transport that data is irrelevant.

26
00:01:39,540 --> 00:01:42,620
It's also not the same stubing, in fact,

27
00:01:42,620 --> 00:01:43,210
saying,

28
00:01:43,210 --> 00:01:46,090
But we make stops is one of the most common first

29
00:01:46,090 --> 00:01:48,400
arguments against contract testing.

30
00:01:48,400 --> 00:01:51,540
Before people fully understand the concept,

31
00:01:51,540 --> 00:01:54,730
a contract is used to verify interaction on the provider

32
00:01:54,730 --> 00:01:57,840
side as well as on the consumer side.

33
00:01:57,840 --> 00:02:03,510
Continually tested contracts on both sides guarantee that they cannot be broken,

34
00:02:03,510 --> 00:02:07,080
whereas a stop is only verified on the consumer side,

35
00:02:07,080 --> 00:02:11,520
giving the provider free rein to make any breaking chains they want or

36
00:02:11,520 --> 00:02:16,040
maybe no even comply with the stop in the first place.

37
00:02:16,040 --> 00:02:19,140
It's also no AP I documentation.

38
00:02:19,140 --> 00:02:23,570
A contract is a specifications used by a testing framework,

39
00:02:23,570 --> 00:02:26,280
whereas documentation is a description.

40
00:02:26,280 --> 00:02:31,730
Often a P I documentation is not continually tested are no

41
00:02:31,730 --> 00:02:36,550
automatically verified in both the consumer under provider.

42
00:02:36,550 --> 00:02:39,370
This means that you cannot see the impact of change in

43
00:02:39,370 --> 00:02:42,180
something when changing documentation,

44
00:02:42,180 --> 00:02:45,580
whereas if you use contracts you can automatically city

45
00:02:45,580 --> 00:02:48,440
impacts of a change within seconds.

46
00:02:48,440 --> 00:02:48,830
Well, now,

47
00:02:48,830 --> 00:02:52,760
take a look at what contracts could contain in this case

48
00:02:52,760 --> 00:02:56,140
specifically with a hasty T p a p I.

49
00:02:56,140 --> 00:02:59,590
We won't use any specific contract definition language,

50
00:02:59,590 --> 00:03:03,640
but will instead look at the interaction that it could represent.

51
00:03:03,640 --> 00:03:06,940
First of all, we would have an agreed request.

52
00:03:06,940 --> 00:03:10,210
This is a request that must be made in order for the contract

53
00:03:10,210 --> 00:03:13,520
to be complied with on the provider side.

54
00:03:13,520 --> 00:03:17,040
Its contract verification tests would made this request to

55
00:03:17,040 --> 00:03:20,500
verify the contract on on the consumer side,

56
00:03:20,500 --> 00:03:26,030
His test would make this request against the stop generated by the contract.

57
00:03:26,030 --> 00:03:29,000
Second of all, we haven't agreed Response.

58
00:03:29,000 --> 00:03:33,340
This is a response that will be given one knee agreed request is made.

59
00:03:33,340 --> 00:03:35,980
Our stub on the consumer side test would return.

60
00:03:35,980 --> 00:03:45,000
This response when they agreed to request is made on test assertions on the provider side would assert that this response is made

