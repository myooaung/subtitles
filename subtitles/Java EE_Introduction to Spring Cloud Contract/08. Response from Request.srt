1
00:00:01,640 --> 00:00:03,810
[Autogenerated] when communicating with AP eyes.

2
00:00:03,810 --> 00:00:08,840
It's quite common for the responses that they give to be based on request data.

3
00:00:08,840 --> 00:00:14,260
For example, if we were to do a get request for flights from London to Paris,

4
00:00:14,260 --> 00:00:18,900
we'd expect to get only those airports back in the response.

5
00:00:18,900 --> 00:00:22,100
If we were to change the value of these query parameters,

6
00:00:22,100 --> 00:00:24,940
for example, to Malala and Sydney,

7
00:00:24,940 --> 00:00:28,270
then we'd expect the airports in the response to change to Milan in

8
00:00:28,270 --> 00:00:33,570
Sydney to the same rules apply to all possible requests.

9
00:00:33,570 --> 00:00:34,670
For example,

10
00:00:34,670 --> 00:00:40,310
London to Berlin would always cause London and Berlin to be returned.

11
00:00:40,310 --> 00:00:45,010
So if we think about it, these examples are all of the same request,

12
00:00:45,010 --> 00:00:47,640
with only the query parameter changing.

13
00:00:47,640 --> 00:00:49,990
And again, the response is always the same,

14
00:00:49,990 --> 00:00:54,540
too, only that some values are based on the request data.

15
00:00:54,540 --> 00:00:57,480
Wouldn't it be simple if we could have a single contract

16
00:00:57,480 --> 00:01:03,340
to represent all of these interactions?

17
00:01:03,340 --> 00:01:08,540
So let's take the previous example on See how we can put it into a contract.

18
00:01:08,540 --> 00:01:13,000
Here we have a get request to slash flights on a queer parameter name,

19
00:01:13,000 --> 00:01:18,070
to which can have any value and a query permits and names from which can

20
00:01:18,070 --> 00:01:22,190
also have any value from the request point of view,

21
00:01:22,190 --> 00:01:24,600
were already achieving what we want here,

22
00:01:24,600 --> 00:01:29,740
as any airport can be provided in order for the contract to be met.

23
00:01:29,740 --> 00:01:30,970
The problem, though,

24
00:01:30,970 --> 00:01:34,810
is that regardless of the values of the airport query parameters,

25
00:01:34,810 --> 00:01:38,940
we will always return flights between Amsterdam and Tokyo.

26
00:01:38,940 --> 00:01:39,860
Obviously,

27
00:01:39,860 --> 00:01:44,650
unless you provide Amsterdam and Tokyo as a to and from queer parameter values,

28
00:01:44,650 --> 00:01:47,710
it doesn't really make sense to do this.

29
00:01:47,710 --> 00:01:48,810
Fortunately,

30
00:01:48,810 --> 00:01:52,440
the spring Cloud contract DSL has a way to work around these

31
00:01:52,440 --> 00:01:56,450
issues by providing from request method that can be used to

32
00:01:56,450 --> 00:02:00,540
interplay all data from the request.

33
00:02:00,540 --> 00:02:02,810
So by calling a from request method,

34
00:02:02,810 --> 00:02:06,480
we can substitute the value of the from queer parameter,

35
00:02:06,480 --> 00:02:10,680
and we can also substitute the value of the T query parameter.

36
00:02:10,680 --> 00:02:12,340
This means are generated.

37
00:02:12,340 --> 00:02:17,740
Stop will be dynamically populated based on data in the request.

38
00:02:17,740 --> 00:02:21,460
In this case, that means that the airports returns are the ones past,

39
00:02:21,460 --> 00:02:24,770
in which is a behavior that we want.

40
00:02:24,770 --> 00:02:29,350
This means we can define a single contract that could be used by a wide range

41
00:02:29,350 --> 00:02:36,000
of requests which will always return a sensible response. Based on that request,

