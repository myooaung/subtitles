1
00:00:01,940 --> 00:00:06,650
[Autogenerated] we can split consumer driven contrast testing into two sides.

2
00:00:06,650 --> 00:00:08,160
The consumer side,

3
00:00:08,160 --> 00:00:13,770
on the provider side as a convention is for the consumer to drive both

4
00:00:13,770 --> 00:00:17,400
the contract on the implementation of the provider.

5
00:00:17,400 --> 00:00:21,740
That is a side where we would begin to develop a feature.

6
00:00:21,740 --> 00:00:26,050
So taking a consumer, the first thing we like is to house,

7
00:00:26,050 --> 00:00:29,460
um, automated tests, which can run against it and verify it.

8
00:00:29,460 --> 00:00:30,800
It's functional.

9
00:00:30,800 --> 00:00:34,530
Thes tests might spend up in the instance of the consumer on makesem

10
00:00:34,530 --> 00:00:39,200
AP I requests against it on Make some assertions.

11
00:00:39,200 --> 00:00:43,810
The problem we have is that they may trigger an interaction with a provider on.

12
00:00:43,810 --> 00:00:48,510
We need to make sure that this interaction occurs as expected.

13
00:00:48,510 --> 00:00:52,980
In order to do this, we can create a contract I did not contract.

14
00:00:52,980 --> 00:00:56,280
We can define a response free given request.

15
00:00:56,280 --> 00:01:00,620
This request and response will be the specific interaction that consumer

16
00:01:00,620 --> 00:01:06,350
makes with the provider during our test room from a contract,

17
00:01:06,350 --> 00:01:10,860
we can then generate a stop which is done automatically by the framework.

18
00:01:10,860 --> 00:01:13,970
In our case Spring cloud contract.

19
00:01:13,970 --> 00:01:17,780
This stop will return a declared response in the contract when their

20
00:01:17,780 --> 00:01:21,010
declared request from the contract is made to it.

21
00:01:21,010 --> 00:01:24,280
This means it will be simulating our provider accurately

22
00:01:24,280 --> 00:01:27,740
because of the guarantees provided by a contract.

23
00:01:27,740 --> 00:01:28,730
This means we can run.

24
00:01:28,730 --> 00:01:30,380
Our tests are agreed.

25
00:01:30,380 --> 00:01:32,190
Request will be made on.

26
00:01:32,190 --> 00:01:37,230
Then on receiving our response, we can make our Tesco green on verified Arkin.

27
00:01:37,230 --> 00:01:43,590
Shima is fully functional on the provider side.

28
00:01:43,590 --> 00:01:47,440
We want to do what the consumer his driven is to do food a

29
00:01:47,440 --> 00:01:51,840
contract hence the term consumer driven.

30
00:01:51,840 --> 00:01:54,080
So when we first take that provider,

31
00:01:54,080 --> 00:01:57,160
we can take our contract with the agreed interaction

32
00:01:57,160 --> 00:01:59,780
between the consumer and the provider.

33
00:01:59,780 --> 00:02:05,840
A news our framework toe automatically generate contract verification tests.

34
00:02:05,840 --> 00:02:09,670
All these tests will Dio is make the agreed request specified in the

35
00:02:09,670 --> 00:02:14,340
contract to two provider and then a certain the response that provided

36
00:02:14,340 --> 00:02:18,040
gifts is equal to the response in the contract.

37
00:02:18,040 --> 00:02:22,310
Essentially, we're doing the opposite to what we did on our consumer side,

38
00:02:22,310 --> 00:02:25,140
generating tests as opposed to stops.

39
00:02:25,140 --> 00:02:26,810
Once he's test pass,

40
00:02:26,810 --> 00:02:31,320
we can be sure that our provider functions with the contract on therefore,

41
00:02:31,320 --> 00:02:33,090
with our consumer,

42
00:02:33,090 --> 00:02:35,820
everything we've covered so far so be chained

43
00:02:35,820 --> 00:02:39,340
together into the following workflow,

44
00:02:39,340 --> 00:02:42,750
always starting on the consumer side are failing.

45
00:02:42,750 --> 00:02:46,670
Shima test for a feature which crosses most service boundaries,

46
00:02:46,670 --> 00:02:49,050
will be implemented again.

47
00:02:49,050 --> 00:02:53,170
We start here because in consumer giving contract testing,

48
00:02:53,170 --> 00:02:57,510
it's a consumers that drives the contracts off the provider.

49
00:02:57,510 --> 00:03:00,180
If we think about it, that makes sense,

50
00:03:00,180 --> 00:03:03,210
as there's no point in the provider do in anything off

51
00:03:03,210 --> 00:03:05,840
it and what they can share needs.

52
00:03:05,840 --> 00:03:09,240
Following this, we will then define our contract.

53
00:03:09,240 --> 00:03:12,930
This contract contains the agreed interaction that our

54
00:03:12,930 --> 00:03:17,590
implementation code will need in order for test to pass.

55
00:03:17,590 --> 00:03:21,190
A common strategy here is to have a local copy of our provider

56
00:03:21,190 --> 00:03:25,440
project on in store contract inside Out.

57
00:03:25,440 --> 00:03:29,860
Then we can use a consumer driven contracts testing tool to generate a

58
00:03:29,860 --> 00:03:33,110
stop of the agree and interaction in our contract,

59
00:03:33,110 --> 00:03:37,040
which can in turn be used in our tests.

60
00:03:37,040 --> 00:03:39,460
Our feature can now be fully implemented.

61
00:03:39,460 --> 00:03:45,040
On our consumer side, a czar implementation code is able to call out to disturb.

62
00:03:45,040 --> 00:03:48,260
The passing test will ensure every finished functional on the

63
00:03:48,260 --> 00:03:50,890
consumer side as now we know we comply.

64
00:03:50,890 --> 00:03:54,600
If our contract once we've finished with this,

65
00:03:54,600 --> 00:03:57,280
we can switch back to the provider side.

66
00:03:57,280 --> 00:04:00,520
If working across multiple teams a common strategy

67
00:04:00,520 --> 00:04:02,620
here is to issue a poor request.

68
00:04:02,620 --> 00:04:02,940
This,

69
00:04:02,940 --> 00:04:06,630
me and somebody else could take over the work on the other side on

70
00:04:06,630 --> 00:04:11,300
and implement the code required to finish the feature evil way

71
00:04:11,300 --> 00:04:15,420
running the build of our provider would now fail as contract tests

72
00:04:15,420 --> 00:04:20,540
will automatically regenerated, executed and unveil.

73
00:04:20,540 --> 00:04:23,850
The final step is to make these tests pass by fully

74
00:04:23,850 --> 00:04:30,800
implementing everything on the provider side.

75
00:04:30,800 --> 00:04:34,380
A great quote about this workflow comes from our scene.

76
00:04:34,380 --> 00:04:37,840
One of the course been cloud contract contributors.

77
00:04:37,840 --> 00:04:44,270
He stays concious image of in contracts like TD D applied at the A P I level.

78
00:04:44,270 --> 00:04:45,740
If you think about it,

79
00:04:45,740 --> 00:04:51,940
that really is true as what we're doing is TD D only cross the network boundary.

80
00:04:51,940 --> 00:04:55,480
We start with a failing test on our consume sides.

81
00:04:55,480 --> 00:04:58,740
May not test pass and then re factor.

82
00:04:58,740 --> 00:05:02,340
We didn't start with another failing test on the provider.

83
00:05:02,340 --> 00:05:06,650
One that's automatically generated for us made that pass and

84
00:05:06,650 --> 00:05:11,500
then we can do some mori factoring the reality is that if

85
00:05:11,500 --> 00:05:13,640
you're familiar with t d day,

86
00:05:13,640 --> 00:05:17,710
then this workflow maybe a little bit familiar on a somebody

87
00:05:17,710 --> 00:05:20,280
who understands the benefits of TD day.

88
00:05:20,280 --> 00:05:22,540
This could be a libel moment.

89
00:05:22,540 --> 00:05:25,060
And fats, when you think about it,

90
00:05:25,060 --> 00:05:30,840
applying the TDD process across micro services makes complete sense.

91
00:05:30,840 --> 00:05:34,910
It means the implementation could be driven from the outside in,

92
00:05:34,910 --> 00:05:37,890
rippling across the network and helping nothing more than

93
00:05:37,890 --> 00:05:40,840
what is required to be implemented.

94
00:05:40,840 --> 00:05:45,740
We also have their aggression test coverage that comes of TDD for free,

95
00:05:45,740 --> 00:05:55,000
meaning isolated contracts s will fail when we make a breaking change in our provider or consumer.

