1
00:00:02,040 --> 00:00:03,110
[Autogenerated] in this demo,

2
00:00:03,110 --> 00:00:07,080
we're going to start with a failing consumer side test.

3
00:00:07,080 --> 00:00:10,590
The reason it will fail will be because our consumer will now be

4
00:00:10,590 --> 00:00:15,340
dependent on request data being returned in the response.

5
00:00:15,340 --> 00:00:19,640
Well, then, define a contract which we can use to make our tests pass,

6
00:00:19,640 --> 00:00:23,940
making use of the from request method in the process.

7
00:00:23,940 --> 00:00:29,230
Well, then make artists pass and finally will finish up on the provider side,

8
00:00:29,230 --> 00:00:31,810
making our contract verification test pass.

9
00:00:31,810 --> 00:00:38,670
Also starting with far Can Shima project.

10
00:00:38,670 --> 00:00:41,220
A requirement has come in to generate Are you I.

11
00:00:41,220 --> 00:00:41,540
D.

12
00:00:41,540 --> 00:00:46,240
On the consumer side Robin and getting it back from the provider.

13
00:00:46,240 --> 00:00:50,380
Let's modified a credit chat request so it provides one by adding

14
00:00:50,380 --> 00:00:54,840
the fields and also adding a getter for it.

15
00:00:54,840 --> 00:00:57,570
We're now going to skip forward in time a bit by just

16
00:00:57,570 --> 00:00:59,880
quickly writing a check to see if the U I.

17
00:00:59,880 --> 00:01:00,100
D.

18
00:01:00,100 --> 00:01:03,910
We get back from the credit check Service is the same you you i d.

19
00:01:03,910 --> 00:01:06,240
We provide in the request.

20
00:01:06,240 --> 00:01:09,500
It's a little odd to do this, but for the sake of example,

21
00:01:09,500 --> 00:01:12,960
will say that a requirement came in from the business to prevent us from

22
00:01:12,960 --> 00:01:15,760
accidentally given a result off somebody else's credit.

23
00:01:15,760 --> 00:01:19,140
Chat to them.

24
00:01:19,140 --> 00:01:23,090
Now we can go back to our test and modify it slightly.

25
00:01:23,090 --> 00:01:26,060
Well, now use Jason path to a certain response,

26
00:01:26,060 --> 00:01:28,530
making sure the status field is still equal to

27
00:01:28,530 --> 00:01:31,760
grant it and then will assert au i.

28
00:01:31,760 --> 00:01:37,050
D Field is returned by checking its not know we're being a little lady here,

29
00:01:37,050 --> 00:01:38,550
as we should use Red Jacks,

30
00:01:38,550 --> 00:01:41,990
but it's not too relevant for the purpose of this demo.

31
00:01:41,990 --> 00:01:46,740
The point is, so is that a year I D returned is now generated by a service,

32
00:01:46,740 --> 00:01:50,590
so we don't know the value of it in advance.

33
00:01:50,590 --> 00:01:57,740
Finally, we can delete our old assertion, ruin our tests and see what happens.

34
00:01:57,740 --> 00:01:58,770
As expected,

35
00:01:58,770 --> 00:02:04,220
we have our exception stating that the U ideas do not match scrolling up.

36
00:02:04,220 --> 00:02:07,650
We concede that this is because the your I D returned is a

37
00:02:07,650 --> 00:02:11,510
one statically defined in our contract and does not equal the

38
00:02:11,510 --> 00:02:14,740
one that we sent in the request.

39
00:02:14,740 --> 00:02:18,980
Switching to our provider project, we can fix this number.

40
00:02:18,980 --> 00:02:23,440
Get into our contract should grant a credit score of high to a citizen.

41
00:02:23,440 --> 00:02:25,250
We should first declared a year.

42
00:02:25,250 --> 00:02:28,580
I D must be given in our request.

43
00:02:28,580 --> 00:02:33,320
Then, using the Kashima method, we will provide a year I g rejects.

44
00:02:33,320 --> 00:02:36,750
So our stop will still support any randomly generated you

45
00:02:36,750 --> 00:02:40,310
Your i d amusing the producer method.

46
00:02:40,310 --> 00:02:46,240
We will Hard code eu I d for the request in the contract verification tests.

47
00:02:46,240 --> 00:02:47,130
Okay,

48
00:02:47,130 --> 00:02:50,540
now we can move on to the interesting part which is calling

49
00:02:50,540 --> 00:02:54,210
from request and then using Jason Path to pull out the year

50
00:02:54,210 --> 00:02:56,880
i d from the request body.

51
00:02:56,880 --> 00:02:59,320
This means the stub will always return the you your

52
00:02:59,320 --> 00:03:02,590
i d given in the request to it.

53
00:03:02,590 --> 00:03:06,670
The last step is to make our producer method a little stricter or

54
00:03:06,670 --> 00:03:11,540
is requiring the response to equal the one made in the request

55
00:03:11,540 --> 00:03:15,720
Switching to the terminal LaShawn maven clean install skip tests

56
00:03:15,720 --> 00:03:20,890
to regenerate our contracts, Then back in the consumer project.

57
00:03:20,890 --> 00:03:24,340
Let's run those tests and see if they pass.

58
00:03:24,340 --> 00:03:27,050
Great, they dio I'm scrolling up.

59
00:03:27,050 --> 00:03:30,780
We can see that the year i d in the response match the u i.

60
00:03:30,780 --> 00:03:30,980
D.

61
00:03:30,980 --> 00:03:34,930
In the request This is despite the your i d being randomly

62
00:03:34,930 --> 00:03:39,680
generated switching back to our provider project.

63
00:03:39,680 --> 00:03:42,760
Let's run a full maybe install to generate and run

64
00:03:42,760 --> 00:03:45,990
our contract verification tests.

65
00:03:45,990 --> 00:03:48,230
As expected, we have a failure.

66
00:03:48,230 --> 00:03:52,470
So lets navigate to the test and take a look.

67
00:03:52,470 --> 00:03:56,200
The reason it's failing is because of the change to our contract.

68
00:03:56,200 --> 00:04:01,140
We expect the your i d in the response to match a year I d in the request,

69
00:04:01,140 --> 00:04:04,320
but our implementation is generating a response to you.

70
00:04:04,320 --> 00:04:06,540
I d on the fly.

71
00:04:06,540 --> 00:04:10,440
We can confirm this by running the test directly.

72
00:04:10,440 --> 00:04:13,310
Yes, the error message is telling us that the U I.

73
00:04:13,310 --> 00:04:18,210
D does not match so navigate into our base contract test.

74
00:04:18,210 --> 00:04:20,940
The change here is actually quite simple.

75
00:04:20,940 --> 00:04:22,920
This is because we're using marks,

76
00:04:22,920 --> 00:04:26,500
meaning we can cheat and hard code to return GeoEye day

77
00:04:26,500 --> 00:04:29,140
to equal the one in our contract.

78
00:04:29,140 --> 00:04:33,070
Let's paste into your I d and then use alternate er to

79
00:04:33,070 --> 00:04:35,840
make it a constructive parameter.

80
00:04:35,840 --> 00:04:38,770
Well, then change the existing new your i D field.

81
00:04:38,770 --> 00:04:40,090
So it sat via addition.

82
00:04:40,090 --> 00:04:42,640
You construct the argument.

83
00:04:42,640 --> 00:04:46,440
Now let's ruin our tests and see what happens.

84
00:04:46,440 --> 00:04:47,070
Great.

85
00:04:47,070 --> 00:04:48,920
90 pass as a year I d.

86
00:04:48,920 --> 00:04:50,910
We assert, is equal to the u i.

87
00:04:50,910 --> 00:04:51,300
D.

88
00:04:51,300 --> 00:04:53,840
In the response.

89
00:04:53,840 --> 00:04:56,140
Andi, that's it For this example,

90
00:04:56,140 --> 00:04:59,080
it demonstrates a relatively straightforward yet powerful

91
00:04:59,080 --> 00:05:07,000
concept that can help the response in our contract support many types of interactions.

