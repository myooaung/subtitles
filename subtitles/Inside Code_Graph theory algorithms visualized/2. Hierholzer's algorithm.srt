1

00:00:00,180  -->  00:00:04,260
Now that we know what is a Eulerian 
trail/circuit and how to know if  

2

00:00:04,260  -->  00:00:09,480
a graph has one, we want to find it in 
the graph, not just know its existence.  

3

00:00:10,560  -->  00:00:15,720
Which is the goal of this lecture, where we 
will learn about the Hierholzer's algorithm.  

4

00:00:17,520  -->  00:00:23,640
Imagine that we have this directed graph, and 
we want to find a Eulerian circuit or at least  

5

00:00:23,640  -->  00:00:31,980
a Eulerian trail. First step, we need to check 
if we can find one. First condition is respected,  

6

00:00:31,980  -->  00:00:37,680
all edges of the underlying undirected 
graph are connected. For degrees,  

7

00:00:37,680  -->  00:00:45,540
we have 1 vertex with out-degree - in-degree = 
1, and 1 vertex with in-degree - out-degree = 1,  

8

00:00:45,540  -->  00:00:52,860
remaining ones have out-degree = in-degree. We 
deduce that we cannot find a Eulerian circuit,  

9

00:00:52,860  -->  00:00:59,940
but we can find a Eulerian trail, and A will 
be the start vertex, and E the end vertex.  

10

00:01:02,100  -->  00:01:09,420
Okay there is a Eulerian trail, but how to 
discover it? We may think of launching a  

11

00:01:09,420  -->  00:01:14,700
classic dfs traversal from the start vertex 
and stop when reaching the end vertex.  

12

00:01:14,700  -->  00:01:22,560
Let's try it and see if it works. We start from A. 
We go to B. From here we go to C. From here we go  

13

00:01:22,560  -->  00:01:30,240
to D. From here we go to E, and we reached the end 
vertex. But did we traverse all edges? No, and we  

14

00:01:30,240  -->  00:01:37,320
cannot stop here because it wouldn't be a Eulerian 
trail, a Eulerian trail has to traverse all edges.  

15

00:01:41,100  -->  00:01:46,560
Now you may tell me, we got this wrong result 
because when being on the vertex C, we should  

16

00:01:46,560  -->  00:01:53,400
have went to G before, then F, then back to C, 
then D, then E, we would get a Eulerian trail.  

17

00:01:53,940  -->  00:02:00,240
You're right, but how could we know? How could we 
know the right order of neighbors to visit to get  

18

00:02:00,240  -->  00:02:06,120
the Eulerian trail? We could not, there is no 
direct way of knowing without moving further.  

19

00:02:08,160  -->  00:02:13,260
What to do then to fix our mistake? 
We're at E and we have missing edges.  

20

00:02:13,980  -->  00:02:20,460
A solution to fix this is to go back and see what 
edges we missed and write vertices we forgot.  

21

00:02:21,540  -->  00:02:27,720
E has no outgoing edges, so we're sure there's 
nothing else to write after E, we can go back.  

22

00:02:28,320  -->  00:02:34,080
D has no remaining unvisited outgoing edges, 
so we're sure there's nothing else to write  

23

00:02:34,080  -->  00:02:42,120
between D and E, we can go back. But from C, 
we still have an unvisited outgoing edge, the  

24

00:02:42,120  -->  00:02:48,660
one that takes us to G. So after C should come G, 
we write it in the current position and go to it.  

25

00:02:49,380  -->  00:02:56,280
From G we have an outgoing edge, the one that 
goes to F, so we write F after G and we go to it.  

26

00:02:57,240  -->  00:03:02,460
From F we have an outgoing edge to C, 
we write C after F and we go to it.  

27

00:03:03,360  -->  00:03:10,560
Now C has no more unused outgoing edges, we 
go back. For F, same thing. G, same thing. C,  

28

00:03:10,560  -->  00:03:17,220
same thing. B, same thing. And A, same 
thing. We could go back until the beginning,  

29

00:03:17,220  -->  00:03:24,840
therefore we have visited all edges, we 
got this Eulerian trail, A B C G F C D E.  

30

00:03:27,600  -->  00:03:33,300
This is the idea of our algorithm, we write the 
actual vertex in the order and we move forward,  

31

00:03:33,300  -->  00:03:38,280
then while vertex still has unused 
outgoing edges, we take one of them.  

32

00:03:39,720  -->  00:03:44,460
And once we finish, we move backwards 
in the order before backtracking.  

33

00:03:46,740  -->  00:03:52,260
Moving forward and backwards in this context 
means moving the blue cursor we were using in  

34

00:03:52,260  -->  00:04:00,900
the animation. And writing means writing something 
just after the cursor. At the end of the process,  

35

00:04:00,900  -->  00:04:07,560
when the initial recursive call ends, we get our 
Eulerian trail. Or circuit if it was possible.  

36

00:04:09,720  -->  00:04:15,240
However, one problem, as you can notice, 
we're writing between elements and neither  

37

00:04:15,240  -->  00:04:21,420
at the end nor at the beginning. Which is slow 
when working with an array, all remaining elements  

38

00:04:21,420  -->  00:04:29,220
need to be shifted. I mean, we could work with 
a doubly-linked list and have an O(1) insertion  

39

00:04:29,220  -->  00:04:34,620
at the middle, but we have another solution that 
uses an array and doesn't insert at the middle,  

40

00:04:34,620  -->  00:04:41,400
let me show it to you. A mistake we made in 
this approach is to write a vertex before  

41

00:04:41,400  -->  00:04:46,440
making sure that it's in the right place, 
it's what forced us later to shift elements.  

42

00:04:47,580  -->  00:04:53,760
In this new approach, we don't write a vertex 
until it has no remaining unvisited outgoing  

43

00:04:53,760  -->  00:04:59,520
edges, because by doing so, once we write a 
vertex, we will know that we didn't forget  

44

00:04:59,520  -->  00:05:05,160
edges after it, it's in the right place when 
looking from the end of the trail, I precise,  

45

00:05:05,160  -->  00:05:10,560
from the end of the trail, we will build the 
trail from how it ends until how it starts.  

46

00:05:13,620  -->  00:05:20,340
Let's apply it with our example. We start from A, 
but we don't write it yet, it still has remaining  

47

00:05:20,340  -->  00:05:28,260
unvisited edges. Then we go to B, but same thing, 
we don't write it yet. Then C, same thing. Then D,  

48

00:05:28,260  -->  00:05:34,680
same thing, Then in E, we have no remaining 
unvisited edges, so we know that E is in the  

49

00:05:34,680  -->  00:05:40,380
right place from the end, E will be the last 
vertex the trail visits. Which is logical,  

50

00:05:40,380  -->  00:05:48,000
E is the end vertex. We go back to D, and it 
has no remaining unvisited outgoing edges,  

51

00:05:48,000  -->  00:05:54,660
we write it, we know that it will come just 
before E. Then we go back to C. We still  

52

00:05:54,660  -->  00:06:00,180
don't write C because there is another outgoing 
edge we didn't take. We take it and go to G.  

53

00:06:01,680  -->  00:06:08,100
We don't write G yet because we can go to F. 
We don't write F yet because we can go to C.  

54

00:06:08,700  -->  00:06:16,920
And here in C, no remaining outgoing edges, we can 
write it, C will come just before D. Back to F,  

55

00:06:16,920  -->  00:06:22,980
no remaining edges, we write F, because there's 
nothing anymore that can come between F and C.  

56

00:06:24,300  -->  00:06:31,080
Back to G, same thing, we write it. Back 
to C, also no remaining edges, we write it.  

57

00:06:31,080  -->  00:06:38,160
Back to B, no edges we forgot, we write. Back 
to A, also no edges we forgot, we write it.  

58

00:06:39,120  -->  00:06:46,080
The initial call ended, we got our Eulerian trail, 
and that's how the Hierholzer's algorithm works.  

59

00:06:49,800  -->  00:06:55,380
You can notice that we have repeated vertices 
in the trail, which is fine, because a Eulerian  

60

00:06:55,380  -->  00:07:00,660
trail or circuit is allowed to pass from the 
same vertex multiple times, the restriction  

61

00:07:00,660  -->  00:07:07,920
concerns edges only. This is why we won't use 
a visited set of vertices in this algorithm,  

62

00:07:07,920  -->  00:07:13,740
the visited set of vertices is used when we 
don't want to pass from the same vertex twice.  

63

00:07:16,560  -->  00:07:22,080
The example we've seen is too basic, let's see 
another example that is more complex before  

64

00:07:22,080  -->  00:07:28,800
jumping to implementation. Yes this graph is a 
bit scarier than the previous one, we have a lot  

65

00:07:28,800  -->  00:07:34,260
of edges and cycles, we even have self-loops 
and multiple edges between two vertices.  

66

00:07:36,720  -->  00:07:43,980
Let's see if our algorithm will resist. First 
step, checking existence and finding start vertex.  

67

00:07:44,520  -->  00:07:49,980
Here conditions are respected and start 
and end vertex are D and G respectively.  

68

00:07:51,540  -->  00:07:56,880
By the way, because dfs uses recursion, 
I will also show you the actual state of  

69

00:07:56,880  -->  00:08:01,740
the call stack to better understand what's 
happening and what else needs to be done.  

70

00:08:03,540  -->  00:08:09,780
The first call is on D obviously. From here we 
have 3 outgoing edges, we choose any one of them,  

71

00:08:09,780  -->  00:08:15,720
let's choose DB. You can notice that we didn't 
write in the output yet, you know the reason.  

72

00:08:17,100  -->  00:08:24,600
From here we can go to E. By the way, a yellow 
semi-transparent edge means that we traversed  

73

00:08:24,600  -->  00:08:30,000
it and we cannot do it anymore, remember, 
we must not pass from the same edge twice.  

74

00:08:31,680  -->  00:08:41,100
From E we can go to J. From J we go to F. From 
F go to G. From G we go to K. From K we go to  

75

00:08:41,100  -->  00:08:49,860
C. Then we can go to B. Then we can go to C. Then 
we can go to G. From here G has no more remaining  

76

00:08:49,860  -->  00:08:57,060
outgoing edges, we write G, and we backtrack. We 
deduce that G will be the last vertex we go to.  

77

00:08:57,780  -->  00:09:06,000
And we knew what vertex we go back to from the 
call stack. C, same thing, no remaining edges,  

78

00:09:06,000  -->  00:09:13,500
we write C and backtrack to B. B, same thing, 
we write B and backtrack to C. C, same thing,  

79

00:09:13,500  -->  00:09:21,660
we write C and backtrack to K. From K we can go 
to F. From F we can go to K. K has no more edges,  

80

00:09:21,660  -->  00:09:30,120
we write K and backtrack to F. From F we can go 
to L. From L we can go to F. No more edges from F,  

81

00:09:30,120  -->  00:09:36,060
we write it and backtrack to L. Same 
thing for L, we write and backtrack to F.  

82

00:09:36,720  -->  00:09:44,940
No edges again, we write F and backtrack to K. K 
has no more edges, we write and backtrack to G.  

83

00:09:45,600  -->  00:09:52,200
G gets written and we backtrack to F. We 
write F and backtrack to J. Once again,  

84

00:09:52,200  -->  00:09:58,440
follow the call stack to know what's the vertex we 
backtrack to when we have no more outgoing edges.  

85

00:09:59,580  -->  00:10:07,200
From J we can go to J with the self-loop. J has 
no more edges, we backtrack to J. Same thing,  

86

00:10:07,200  -->  00:10:15,960
no edges, we write J and backtrack to E. From E 
we go to A. From A we can go to D. From D we go  

87

00:10:15,960  -->  00:10:25,380
to H. From H we go to E. E has no remaining edges, 
we write and backtrack to H. H goes to I. I goes  

88

00:10:25,380  -->  00:10:34,020
to D. D goes to H. No edges in H, we write and 
backtrack to D. We write and backtrack to I. We  

89

00:10:34,020  -->  00:10:40,500
write and backtrack to H. We write and backtrack 
to D. We write and backtrack to A. Here we can  

90

00:10:40,500  -->  00:10:48,900
go to A. No edges from A, we go back to A. Same 
again, no edges from A, we backtrack to E. From  

91

00:10:48,900  -->  00:10:56,520
E we backtrack to B. From B we backtrack to D. 
D is the initial call, no edges remaining, so  

92

00:10:56,520  -->  00:11:03,900
we write D and the process ends here, we finished 
the initial call. And we got our Eulerian trail,  

93

00:11:03,900  -->  00:11:17,040
D B E A A D H I D H E J J F G K F L F K C 
B C G, by using the Hierholzer's algorithm.  

94

00:11:21,600  -->  00:11:27,420
Note that here we were writing from the end, but 
in the implementation we will start with an empty  

95

00:11:27,420  -->  00:11:32,700
array and fill it from left to right, then at 
the end we reverse it to get the right order.  

96

00:11:33,960  -->  00:11:41,400
Let's implement this algorithm. This algorithm 
uses dfs, but doesn't use a visited set.  

97

00:11:42,240  -->  00:11:47,040
Not using a visited set can lead to 
repeating the same actions, or worse,  

98

00:11:47,040  -->  00:11:53,160
being stuck in a cycle. Unless, as we were 
doing in the example, every time we use an edge,  

99

00:11:53,160  -->  00:11:59,400
we shut it down to not be able to take it 
again, which lets us avoid repeating actions.  

100

00:12:01,920  -->  00:12:07,440
Because in two dfs calls, even if on the 
same vertex, if in the first call we take  

101

00:12:07,440  -->  00:12:12,540
a particular edge, the second call won't be 
able to take it, it will take another one,  

102

00:12:12,540  -->  00:12:20,220
so actions won't be repeated. And we continue 
like that until there are no unused edges.  

103

00:12:21,060  -->  00:12:26,940
In brief, we allowed traversing the same vertex 
more than once, which is sometimes necessary to  

104

00:12:26,940  -->  00:12:33,840
traverse all edges as required by the Eulerian 
trail, but we also made sure to turn off an edge  

105

00:12:33,840  -->  00:12:39,300
as soon as we take it, to avoid repeating 
actions, to avoid being stuck in a cycle,  

106

00:12:39,300  -->  00:12:44,640
and to respect the condition that says that 
each edge must be traversed exactly once.  

107

00:12:48,180  -->  00:12:52,800
How to implement that? In our dfs 
function, we take as parameters,  

108

00:12:52,800  -->  00:12:58,500
the graph, the actual vertex, and the output 
where we will write vertices in the right order.  

109

00:12:59,220  -->  00:13:05,940
You can see that we have no visited set. Inside 
the function, we said that while we still have  

110

00:13:05,940  -->  00:13:13,020
unused outgoing edges, we choose one, go from it 
and shut it down. We write, while graph[vertex],  

111

00:13:13,020  -->  00:13:18,720
the list of edges that vertex can take, is not 
empty, we extract an edge from graph[vertex].  

112

00:13:21,300  -->  00:13:27,900
But which one? We will shut down an edge by 
removing it from the list, and removing the  

113

00:13:27,900  -->  00:13:34,920
last element in a list costs O(1) time only, so 
we will take the last one. We write, neighbor is  

114

00:13:34,920  -->  00:13:40,800
graph[vertex].pop(), the last edge destination 
on the list, it also gets popped from the list,  

115

00:13:40,800  -->  00:13:48,180
to not be able to take it again. Now we go to 
it by calling dfs again but from the neighbor.  

116

00:13:49,800  -->  00:13:54,120
After we made sure that we have no 
more outgoing edges, we're guaranteed  

117

00:13:54,120  -->  00:13:58,800
that nothing will come after vertex from 
the end, we can write it in the output.  

118

00:13:59,580  -->  00:14:05,580
This function returns nothing as you can see, it 
just traverses the graph to fill output array,  

119

00:14:05,580  -->  00:14:09,780
the reverse order of vertices we 
pass from in the Eulerian trail.  

120

00:14:11,880  -->  00:14:19,860
And in the main Hierholzer function, we can assume 
that the graph is at least semi-Eulerian. You  

121

00:14:19,860  -->  00:14:24,300
can still check if you're not sure by using the 
technique we mentioned in the previous lecture.  

122

00:14:26,400  -->  00:14:31,320
We get the start vertex, and we 
start. We create an output array,  

123

00:14:31,320  -->  00:14:36,960
we call dfs function we made from start vertex, 
and now we got the reverse order of vertices,  

124

00:14:36,960  -->  00:14:43,680
remember that we have to reverse it to get the 
right order, so we reverse it, and we return it.  

125

00:14:46,620  -->  00:14:51,420
If you want to return the traversed edges 
representation of the trail rather than vertices,  

126

00:14:51,420  -->  00:14:55,920
you can zip the list output with the same 
list starting from the second element,  

127

00:14:55,920  -->  00:14:59,580
you get a tuple that contains the 
first element with the second,  

128

00:14:59,580  -->  00:15:04,440
then a tuple that contains the second 
element with the third, and so on.  

129

00:15:09,540  -->  00:15:15,960
One small problem, this method modifies the 
initial adjacency list, it makes it empty at the  

130

00:15:15,960  -->  00:15:22,680
end. To fix this, we can either copy the adjacency 
list before starting, or work with the out-degree,  

131

00:15:22,680  -->  00:15:29,160
it represents how many outgoing edges are left. 
Every time we take an edge, we decrement it,  

132

00:15:29,160  -->  00:15:36,480
and if it reaches 0, then we have no more 
outgoing edges. In code, we start by calculating  

133

00:15:36,480  -->  00:15:42,540
the out-degree of each vertex, we pass the hash 
map to the dfs function, where we keep looping  

134

00:15:42,540  -->  00:15:50,460
while outdegree[vertex] is not 0. If it's not the 
case yet, we decrement outdegree[vertex], and the  

135

00:15:50,460  -->  00:15:58,260
edge we take is at index outdegree[vertex]. 
And we implemented Hierholzer's algorithm.  

136

00:15:59,880  -->  00:16:06,000
This implementation works in O(|V|+|E|) 
time complexity because we're traversing  

137

00:16:06,000  -->  00:16:11,280
each edge once, and even if we're traversing 
some vertices multiple times, the number  

138

00:16:11,280  -->  00:16:19,380
of traversed vertices is equal to |E|+1, a 
trail of |E| edges traverses |E|+1 vertices.  

139

00:16:24,120  -->  00:16:29,820
And by the way, the same algorithm is used to 
find Eulerian circuit, no problem with that.  

140

00:16:32,040  -->  00:16:38,580
Okay but what about undirected graphs? Is it 
the same algorithm? Yes, we can use the same  

141

00:16:38,580  -->  00:16:44,940
algorithm, but we have one extra difficulty. 
In an undirected graph, in the adjacency list,  

142

00:16:44,940  -->  00:16:52,320
an edge (u,v) can be found in neighbors of u, but 
also in neighbors of v. And if it's bidirectional,  

143

00:16:52,320  -->  00:16:59,820
in a Eulerian trail, a same edge between u and v 
has to be used only once, whether from u to v or  

144

00:16:59,820  -->  00:17:07,920
from v to u. So when using an edge (u,v), from u 
to v for example, both u and v must know that the  

145

00:17:07,920  -->  00:17:14,280
edge have been used. If we were in a simple graph, 
where there is no multiple edges between the same  

146

00:17:14,280  -->  00:17:20,820
two vertices, we could just have a set to remember 
used edges. But because we can have multiple ones  

147

00:17:20,820  -->  00:17:26,820
like in this graph, it's better to use a hash 
table where we map each couple (u,v) to the number  

148

00:17:26,820  -->  00:17:34,440
of remaining unused edges (u,v). Every time we go 
from u to v or from v to u, we decrease the value,  

149

00:17:34,440  -->  00:17:40,500
until it becomes 0, it means that there is 
no remaining unvisited edge between u and v.  

150

00:17:42,060  -->  00:17:46,860
To actually fill this hash table, 
where the default value of a key is 0,  

151

00:17:46,860  -->  00:17:53,820
we have to traverse edges (u,v) and increment. 
In code, we calculate the degree of each edge,  

152

00:17:53,820  -->  00:17:59,940
we create edges map, and for each edge (u,v) 
in the adjacency list, we increment the value  

153

00:17:59,940  -->  00:18:06,540
of the key sorted tuple (u,v). We sort the tuple 
(u,v) so that if we have an edge between A and B,  

154

00:18:06,540  -->  00:18:11,880
we get one key ('A', 'B') in the table and not 
two separate keys ('A', 'B') and ('B', 'A').  

155

00:18:13,320  -->  00:18:21,240
And in dfs function, we add an extra parameter 
edges. Inside it, while vertex still has unvisited  

156

00:18:21,240  -->  00:18:27,000
edges, we decrement its degree, and the neighbor 
is in graph[vertex] at index degree[vertex].  

157

00:18:29,340  -->  00:18:34,920
Now before taking the edge, we first make sure 
that we still have unused ones of that type,  

158

00:18:34,920  -->  00:18:42,060
we check that edges[sorted(vertex, neighbor) is 
greater than 0. If it's the case, we can go from  

159

00:18:42,060  -->  00:18:49,380
vertex to neighbor but before, we decrease the 
value in the edges map. If vertex is equal to  

160

00:18:49,380  -->  00:18:54,900
neighbor, in other terms, if we have a self-loop, 
we decrease by one, but if they're not equal,  

161

00:18:54,900  -->  00:19:01,140
we decrease by 2, because when working with 
an adjacency list of an undirected graph, the  

162

00:19:01,140  -->  00:19:07,860
same edge can be found in both vertices, so its 
value will be incremented twice, the value will  

163

00:19:07,860  -->  00:19:14,940
be twice the real number of edges so we decrease 
by 2. After it, we just call dfs on the neighbor.  

164

00:19:15,780  -->  00:19:22,860
And after we finish all edges, we write vertex in 
the output before backtracking. And we implemented  

165

00:19:22,860  -->  00:19:29,400
the algorithm for undirected graphs, at least 
how I implemented it, there may be other ways.  

166

00:19:31,200  -->  00:19:36,360
We're done with this lecture, in this one 
we learnt how to find a Eulerian trail or  

167

00:19:36,360  -->  00:19:43,080
circuit in a graph, by using the Hierholzer's 
algorithm, in both directed and undirected graphs.  

168

00:19:43,980  -->  00:19:46,500
See you in the next lecture 
for a practice problem.
