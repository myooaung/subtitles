WEBVTT
1

00:00:00.060  -->  00:00:04.620
In the previous lecture, we ended with 
an interesting question: how is a graph  

2

00:00:04.620  -->  00:00:09.900
represented in memory? It's a question that 
we need to answer, because algorithms we will  

3

00:00:09.900  -->  00:00:15.300
study in next chapters can be performed by us 
humans, but it's better to do so with a computer,  

4

00:00:15.300  -->  00:00:22.320
I don't think you would like to work on a 100000 
vertices graph. And to implement those algorithms,  

5

00:00:22.320  -->  00:00:29.100
we need to find a way to represent a graph. First 
of all, before talking about representing a graph,  

6

00:00:29.100  -->  00:00:33.780
we first should be able to represent 
a vertex and an edge. For vertices,  

7

00:00:33.780  -->  00:00:39.900
a vertex should have a unique id, to be 
able to identify it among other vertices.  

8

00:00:41.160  -->  00:00:47.040
Usually, at least for examples we will work 
with, a vertex is represented with an integer,  

9

00:00:47.040  -->  00:00:54.960
like in this graph, we have the vertex 0, the 
vertex 1, etcetera. They can also be represented  

10

00:00:54.960  -->  00:01:01.920
with strings, for example when vertices represent 
cities. Or if we need something more complex,  

11

00:01:01.920  -->  00:01:07.560
we can create a class. For example if 
vertices of our graph represent people,  

12

00:01:07.560  -->  00:01:13.800
we can create a class Person that contains 
the name, the age, and the salary for example.  

13

00:01:16.140  -->  00:01:22.980
And for edges, an edge usually contains two 
things only, the source and the destination,  

14

00:01:22.980  -->  00:01:29.640
the two vertices it connects. So we can either 
create a class Edge with two attributes,  

15

00:01:29.640  -->  00:01:38.520
or simply use a tuple of 2 elements. Note that for 
weighted graphs, we need a third attribute weight.  

16

00:01:41.940  -->  00:01:47.520
Now we can move to the implementation of 
a graph. In the introduction, we defined a  

17

00:01:47.520  -->  00:01:55.920
graph as a pair of sets V and E, V is the set of 
vertices and E the set of edges. So we can think  

18

00:01:55.920  -->  00:02:02.040
of implementing a graph like that, we create a 
class Graph where we will have two attributes: V,  

19

00:02:02.040  -->  00:02:09.180
the set of vertices, and E, the set of edges. 
For this graph, we get this initialization.  

20

00:02:11.220  -->  00:02:18.180
However, when implementing a data structure, we 
want it to be time and space efficient. Which is  

21

00:02:18.180  -->  00:02:25.080
not the case for this implementation, for example 
a main operation we will often use in graph  

22

00:02:25.080  -->  00:02:33.060
algorithms is traversing the adjacent vertices 
of a vertex, also called neighbors. And with  

23

00:02:33.060  -->  00:02:39.000
this implementation, we need to traverse all the 
edges to find neighbors, which is not efficient.  

24

00:02:41.100  -->  00:02:47.100
This is why we will now introduce a popular graph 
implementation that we will often use, it's the  

25

00:02:47.100  -->  00:02:55.560
adjacency list. Let's suppose that we have this 
graph, take a pen and a paper, or a text editor,  

26

00:02:55.560  -->  00:03:01.860
and write each vertex followed by the list of 
its neighbors, pause the video and try to do it.  

27

00:03:03.300  -->  00:03:08.220
By doing so, you should get something 
like this, we have the vertex 0,  

28

00:03:08.220  -->  00:03:16.860
its neighbors are 1 4 and 3, we have the vertex 
1, its neighbors are 0 2 5 and 4, and so on.  

29

00:03:17.880  -->  00:03:24.840
And that, is the adjacency list of this graph, 
that's the concept, we have a list of key/value  

30

00:03:24.840  -->  00:03:29.940
pairs, where the key is the vertex, and 
the value is the list of its neighbors.  

31

00:03:32.940  -->  00:03:38.340
Okay but how to implement it? You can see 
that this structure is two dimensional,  

32

00:03:38.340  -->  00:03:44.700
so we have a choice to do for each 
dimension. For the first dimension,  

33

00:03:44.700  -->  00:03:50.820
we have a list of key/value pairs, for that 
we have two main possibilities. We can either  

34

00:03:50.820  -->  00:03:58.080
use an array where the key is the index of the 
element, like 0 1 2 3 etcetera, or simply use a  

35

00:03:58.080  -->  00:04:03.780
hash table where the key is any hashable type, 
like an integer or a string or something else.  

36

00:04:06.180  -->  00:04:11.940
And for the second dimension, the list of 
neighbors, it's just a list. But even here,  

37

00:04:11.940  -->  00:04:19.200
we have multiple choices, main ones are using 
an array, using a linked list, or using a set.  

38

00:04:20.520  -->  00:04:26.100
We have 2 possibilities for the first dimension, 
3 possibilities for the second dimension,  

39

00:04:26.100  -->  00:04:32.580
so in total we have 6 possibilities. 
We can implement an adjacency list as:  

40

00:04:32.580  -->  00:04:39.120
an array of arrays, an array of linked lists, an 
array of sets, a hash table of vertex to array,  

41

00:04:39.120  -->  00:04:44.040
a hash table of vertex to linked 
list, a hash table of vertex to set.  

42

00:04:45.000  -->  00:04:53.100
Ye that's cool but huh which one to choose? To 
decide, we will once again analyze and compare,  

43

00:04:53.640  -->  00:04:57.720
that's how we do in computer science, 
we rarely choose something randomly.  

44

00:04:59.640  -->  00:05:05.160
For the first dimension, we had the choice 
between an array and a hash table. For an array,  

45

00:05:05.160  -->  00:05:10.080
we mentioned that the key is the index of 
an element, the first one has the key 0,  

46

00:05:10.080  -->  00:05:17.520
the second one has the key 1, and so on. Which is 
pretty limited, our vertices are not necessarily  

47

00:05:17.520  -->  00:05:23.460
represented with integers from 0 to n-1 like 
in this graph, what if they're represented  

48

00:05:23.460  -->  00:05:28.740
with strings for example? That's the reason 
why I think we should choose the hash table.  

49

00:05:30.840  -->  00:05:36.240
Even if accessing an element in an array is 
usually slightly faster than with a hash table,  

50

00:05:36.240  -->  00:05:41.640
we should choose the array only when we 
know that vertices of our graph will be  

51

00:05:41.640  -->  00:05:46.440
represented with integers from 0 
to n-1, like the one on the left.  

52

00:05:49.380  -->  00:05:54.480
Now for the choice of the second dimension, there 
isn't much difference between the 3 choices,  

53

00:05:54.480  -->  00:05:58.860
we can choose the set if we want fast 
edge deletion and checking adjacency,  

54

00:05:58.860  -->  00:06:09.000
otherwise we can just use an array, it uses less 
space than a set. Our final decision is that to  

55

00:06:09.000  -->  00:06:15.180
implement an adjacency list, we will generally 
use a hash table of vertex to array, a hash table  

56

00:06:15.180  -->  00:06:20.220
where the key is the id of the vertex, and the 
value is an array that contains its neighbors.  

57

00:06:22.500  -->  00:06:29.400
In code, we can have a class Graph that has an 
attribute adj_list, the adjacency list, whose the  

58

00:06:29.400  -->  00:06:36.900
type is hash table of vertex to array. Now we need 
to implement operations we've seen now. To add a  

59

00:06:36.900  -->  00:06:42.240
vertex, we have a parameter u that represents 
the id of the vertex that we want to add.  

60

00:06:42.900  -->  00:06:49.260
And to add it, after checking it doesn't already 
exist in the graph, we just give it a new array in  

61

00:06:49.260  -->  00:06:55.020
the hash table, at the key u, this is why 
we assign an empty array to adj_list[u].  

62

00:06:59.040  -->  00:07:03.360
Removing a vertex now. We have a 
vertex u that we want to remove.  

63

00:07:04.020  -->  00:07:09.840
We may think that to remove a vertex we just 
need to delete its row from the hash table. Yes,  

64

00:07:09.840  -->  00:07:16.500
we need to do that, but we also need to remove 
it from neighbor of all the other vertices, to  

65

00:07:16.500  -->  00:07:23.520
completely delete the edges, from both sides. In 
code, after making sure that the vertex we want to  

66

00:07:23.520  -->  00:07:30.660
delete exists in the graph, we delete adj_list[u], 
then we traverse remaining vertices. For each  

67

00:07:30.660  -->  00:07:36.960
one of them, if u is in adj_list[v], in other 
words, neighbors of v, we remove it from there.  

68

00:07:40.080  -->  00:07:46.560
Next operation, adding an edge. We want 
to add an edge from u to v, for that,  

69

00:07:46.560  -->  00:07:52.200
after checking that both u and v exist, 
we just need to add v in neighbors of u,  

70

00:07:52.200  -->  00:08:01.920
we write, adj_list[u].append(v), that's it. But 
if the graph is undirected, as said earlier,  

71

00:08:01.920  -->  00:08:06.180
we should also add u in neighbors of 
v, we also write adj_list[v].append(u).  

72

00:08:09.000  -->  00:08:15.540
Also, for weighted graphs, we have a third 
parameter w that represents the weight. In  

73

00:08:15.540  -->  00:08:22.200
that case, in neighbors of u we don't add v only, 
we add a tuple that contains v, the destination,  

74

00:08:22.200  -->  00:08:29.460
and w, the weight of the edge. Remember that 
an edge in a weighted graph has the source,  

75

00:08:29.460  -->  00:08:36.420
the destination, and the weight. And because 
we need to insert both v and w, we use a tuple.  

76

00:08:39.000  -->  00:08:42.060
Now for removing an edge that goes from u to v,  

77

00:08:42.060  -->  00:08:49.020
we just need to remove v from neighbors of u. If 
u exists and v is in adj_list[u], we remove v.  

78

00:08:51.420  -->  00:08:57.120
And if it's an undirected graph, we also do 
the opposite, we remove u from neighbors of v.  

79

00:08:58.980  -->  00:09:04.920
Next operation, checking if there's an 
edge from u to v. For that, if u exists,  

80

00:09:04.920  -->  00:09:11.040
we just check if v is in neighbors 
of u, that's it. Next operation,  

81

00:09:11.040  -->  00:09:18.300
traversing neighbors of a vertex u. To do so, if 
u is in the graph, we just traverse adj_list[u],  

82

00:09:18.300  -->  00:09:23.100
remember that the value in the adjacency 
list contains the neighbors of the key.  

83

00:09:25.380  -->  00:09:30.600
By the way, I want to precise something about 
neighbors. We said that neighbors of a vertex  

84

00:09:30.600  -->  00:09:36.300
are its adjacent vertices, for example here 
is the vertex 3, and here are its neighbors.  

85

00:09:36.300  -->  00:09:42.300
But in a directed graph, are neighbors of a 
vertex all vertices that it has a common edge  

86

00:09:42.300  -->  00:09:49.260
with? Or only those it can go to? Well, for 
directed graphs, we must be precise, we have  

87

00:09:49.260  -->  00:09:55.560
out-neighbors and in-neighbors, out-neighbors 
of a vertex u are vertices it can go to,  

88

00:09:56.160  -->  00:10:01.320
in other terms, vertices v such that 
there exists an edge from u to v,  

89

00:10:01.860  -->  00:10:09.000
and in-neighbors of a vertex u are vertices we 
can come from, in other terms, vertices v such  

90

00:10:09.000  -->  00:10:15.780
that there exists an edge from v to u this time. 
And in an adjacency list of a directed graph,  

91

00:10:15.780  -->  00:10:22.620
for each vertex we store out-neighbors only, 
vertices we can jump to, here is an example.  

92

00:10:24.840  -->  00:10:32.580
Last operation, building the adjacency list. We 
can build an adjacency list starting from two sets  

93

00:10:32.580  -->  00:10:38.640
V and E, we will create a function that takes them 
as parameters and insert every vertex and edge.  

94

00:10:39.540  -->  00:10:44.760
In code, we traverse vertices while 
inserting, then we traverse edges,  

95

00:10:44.760  -->  00:10:49.920
each edge has two elements, the first one 
is the source and the second one is the  

96

00:10:49.920  -->  00:10:55.080
destination, so we call add_edge() to add 
the destination to neighbors of the source.  

97

00:10:55.680  -->  00:11:00.720
If it's an undirected graph, source will 
also get added to neighbors of destination.  

98

00:11:03.960  -->  00:11:10.080
Now we've implemented the basic operations with 
an adjacency list, but know that we won't often  

99

00:11:10.620  -->  00:11:15.960
add/remove vertices and edges, this is why 
sometimes we don't even need this Graph class,  

100

00:11:15.960  -->  00:11:23.520
we directly create the hash table and start 
working. In this lecture, we learnt about the  

101

00:11:23.520  -->  00:11:28.500
adjacency list, a list of key value pairs 
where we map each vertex to its neighbors,  

102

00:11:28.500  -->  00:11:34.200
we've seen how to implement it, how to implement 
its main operations, we didn't talk about their  

103

00:11:34.200  -->  00:11:39.060
time complexity, because I wanted to let that 
for the lecture where we will compare between  

104

00:11:39.060  -->  00:11:45.240
the adjacency list, and the alternative we will 
see in the next lecture: the adjacency matrix.  

105

00:11:46.440  -->  00:11:49.980
See you in the next lecture to 
talk about the adjacency matrix.
