1

00:00:00,000  -->  00:00:05,280
In the previous lecture, we discussed the 
greedy coloring algorithm. One of the elements  

2

00:00:05,280  -->  00:00:10,860
that was impacting the result is the order of 
traversal, at least for non well-colored graphs.  

3

00:00:11,400  -->  00:00:15,600
So choosing the order is an important 
step, and we may have better ways to  

4

00:00:15,600  -->  00:00:19,980
do so than choosing it randomly. 
Today we will see two heuristics.  

5

00:00:22,740  -->  00:00:28,500
The first one we will discuss is the Welsh-Powell 
heuristic. The way it works is simple,  

6

00:00:28,500  -->  00:00:34,980
we start by sorting vertices according to their 
degrees in decreasing order. Then while we still  

7

00:00:34,980  -->  00:00:40,620
have uncolored vertices, we take a new color 
c, we traverse vertices in the sorted order,  

8

00:00:40,620  -->  00:00:46,860
and we color vertices that are uncolored, 
and not adjacent to a vertex colored with c.  

9

00:00:48,900  -->  00:00:52,140
Let's take the example we've 
been working with to understand.  

10

00:00:53,040  -->  00:01:02,760
Here's the degree of each vertex. We sort 
them in decreasing order, we get EAHBDFGIC.  

11

00:01:03,900  -->  00:01:11,400
We can start working. Let's take a first 
color, 0, let's say red for the visualization.  

12

00:01:12,420  -->  00:01:17,760
Now we traverse vertices in the sorted order 
and see what vertices do we color in red.  

13

00:01:20,880  -->  00:01:26,220
E, it's uncolored, and has no neighbors 
colored with red, so we color it with red.  

14

00:01:26,940  -->  00:01:32,880
Then A, it's uncolored but it's adjacent 
to a red vertex, E, so we don't color it,  

15

00:01:33,480  -->  00:01:40,560
we cannot have two neighbors with the same 
color. Then H, uncolored and no red neighbors,  

16

00:01:40,560  -->  00:01:48,780
we color it with red. Then B, adjacent to the red 
vertex E, we skip. Then D, also adjacent to a red  

17

00:01:48,780  -->  00:01:57,720
vertex, E, we skip. Then F, adjacent to E, we 
skip. Then G, same thing. Then I, same thing.  

18

00:01:57,720  -->  00:02:02,700
Then C, uncolored and not adjacent to 
a red vertex, we color it with red.  

19

00:02:04,140  -->  00:02:09,600
We finished traversing the order, but we still 
have uncolored vertices, so we start over  

20

00:02:09,600  -->  00:02:18,120
with the next color, 1, let's say blue for the 
visualization. E, already colored. A, uncolored  

21

00:02:18,120  -->  00:02:25,380
and not adjacent to a blue vertex, we color it 
with blue. Then H, colored. Then B, adjacent to  

22

00:02:25,380  -->  00:02:32,280
a blue vertex, we skip. Then D, uncolored and not 
adjacent to a blue vertex, we color it with blue.  

23

00:02:33,240  -->  00:02:40,380
Then F, adjacent to A which is blue. Then G, 
adjacent to D which is blue. Then I, uncolored and  

24

00:02:41,160  -->  00:02:48,600
no blue neighbors, we color it with blue. Then 
C, already colored. We finished the traversal but  

25

00:02:48,600  -->  00:02:54,900
we still have uncolored vertices, we start over 
with the next color which is 2, let's say green.  

26

00:02:55,740  -->  00:03:04,500
E, already colored. A, already colored. H, already 
colored. B, uncolored and not adjacent to a green  

27

00:03:04,500  -->  00:03:11,760
vertex, we color it with green. Then D, colored. 
Then F, it respects conditions, we color it with  

28

00:03:11,760  -->  00:03:19,680
green. Then G, same thing, we color it with green. 
Then I, already colored. And C, already colored.  

29

00:03:20,700  -->  00:03:25,860
We finished the traversal and all vertices 
are colored, so the algorithm stops,  

30

00:03:25,860  -->  00:03:30,780
and we got this coloring, by 
using the Welsh-Powell heuristic.  

31

00:03:34,860  -->  00:03:39,360
And you can see that this time we 
got the optimal number of colors, 3,  

32

00:03:39,360  -->  00:03:45,180
unlike the classic greedy algorithm we've seen 
in the previous lecture, which used 4 colors.  

33

00:03:46,860  -->  00:03:52,560
For the implementation, we start by creating 
the list of vertices. But this time we sort it  

34

00:03:52,560  -->  00:03:58,380
in decreasing order according to the degree of 
vertices. This is why we put as key the degree  

35

00:03:58,380  -->  00:04:02,700
of the vertex, which is the length of its 
array of neighbors in the adjacency list,  

36

00:04:02,700  -->  00:04:11,100
and we set reverse to true to get the result in 
decreasing order. Then we create a color map.  

37

00:04:12,120  -->  00:04:19,080
We also create our first color, 0. Now while 
color map has less keys than the adjacency list,  

38

00:04:19,080  -->  00:04:24,780
it means that we didn't color all vertices, 
some of them are missing from the color map.  

39

00:04:25,860  -->  00:04:30,720
What do we do? We start traversing 
vertices in the sorted order. For  

40

00:04:30,720  -->  00:04:34,560
each one of them, two conditions to 
check before assigning color to it:  

41

00:04:35,100  -->  00:04:41,340
First condition, being uncolored, vertex 
not in color_map, and second condition,  

42

00:04:41,340  -->  00:04:47,460
all its neighbors must not have the current color, 
we check that all neighbors are either uncolored,  

43

00:04:47,460  -->  00:04:53,340
or have a color that is different from the 
current color. In Python we do can do that  

44

00:04:53,340  -->  00:04:58,500
with list comprehension and all function, we 
calculate the boolean expression on each neighbor,  

45

00:04:58,500  -->  00:05:04,020
we get an array of boolean values as a result, 
and we check that all of them are true,  

46

00:05:04,020  -->  00:05:09,600
that all neighbors respect the condition of 
being uncolored or having a different color.  

47

00:05:13,560  -->  00:05:18,960
If both conditions are respected for the current 
vertex, we assign the current color to it.  

48

00:05:20,460  -->  00:05:25,380
After we finish traversing the vertices, 
we increment color for the next iteration.  

49

00:05:25,980  -->  00:05:31,380
And after we finish the while loop, all 
vertices are colored, we return the color map.  

50

00:05:32,220  -->  00:05:34,200
And we got the implementation.  

51

00:05:37,560  -->  00:05:41,880
For the time complexity, sorting 
n elements costs O(nlogn) time,  

52

00:05:41,880  -->  00:05:49,980
and here n is the number of vertices, we have 
O(|V|log|V|). Then we have a while loop that  

53

00:05:49,980  -->  00:05:56,520
does an iteration for each used color, we can say 
that it does c iterations, where c is the total  

54

00:05:56,520  -->  00:06:04,260
number of colors used by the algorithm. Inside 
it we're traversing vertices, |V| iterations.  

55

00:06:05,280  -->  00:06:12,600
For each one of them we're traversing neighbors, 
the cost is deg(u). So in total we have  

56

00:06:12,600  -->  00:06:21,720
|V|log|V| + c(|V|+sum of degrees of vertices). The 
sum of degrees for an undirected graph is 2|E|,  

57

00:06:21,720  -->  00:06:35,100
we get |V|log|V| + c(|V|+2|E|), it gives an 
O(|V|log|V|+c(|V|+|E|)) time complexity. At  

58

00:06:35,100  -->  00:06:40,800
least for my implementation, there may exist other 
implementations with a different time complexity.  

59

00:06:45,180  -->  00:06:51,480
For the efficiency, the Welsh-Powell heuristic 
uses at most this amount of colors, the maximum  

60

00:06:51,480  -->  00:06:57,000
among the minimum between the degree of 
the vertex i + 1 and i for each value i.  

61

00:06:58,500  -->  00:07:01,620
Which is usually better than 
the plain greedy algorithm.  

62

00:07:03,540  -->  00:07:06,420
But we have heuristics that give better results,  

63

00:07:09,780  -->  00:07:16,200
we will now discuss another one. Another 
heuristic for greedy coloring is DSatur.  

64

00:07:17,940  -->  00:07:23,520
In Welsh-Powell, the ordering was depending 
on the degree of vertices, in DSatur,  

65

00:07:23,520  -->  00:07:29,400
it mostly depends on their degree of saturation, 
hence the name DSatur, degree of saturation.  

66

00:07:30,540  -->  00:07:35,400
The degree of saturation of a vertex is 
the number of colors used by its neighbors,  

67

00:07:35,400  -->  00:07:39,360
for example the saturation of this vertex B is 2.  

68

00:07:40,560  -->  00:07:45,960
And we will traverse vertices according to 
their degree of saturation, in decreasing order.  

69

00:07:46,680  -->  00:07:51,420
And if two vertices have the same saturation, 
we choose the one with the highest degree.  

70

00:07:54,180  -->  00:07:58,380
One difference however, it's that degrees 
of vertices is known since the beginning,  

71

00:07:58,380  -->  00:08:04,740
we just need to sort vertices and start working. 
While the saturation of a vertex is dynamic,  

72

00:08:04,740  -->  00:08:10,080
at the beginning it's 0 because all vertices 
are uncolored, and it keeps changing during  

73

00:08:10,080  -->  00:08:17,820
the process. Which means that we cannot know 
the ordering since the beginning. Instead,  

74

00:08:17,820  -->  00:08:23,520
we keep track of the saturation of each vertex, 
and at each iteration, to get the next vertex  

75

00:08:23,520  -->  00:08:30,900
to visit, we extract the unvisited vertex with 
the highest saturation. And we apply the same  

76

00:08:30,900  -->  00:08:35,460
process as classic greedy algorithm, we 
search for the first available color.  

77

00:08:38,100  -->  00:08:44,520
Let's apply it with our example. At the 
beginning, saturation of all vertices is 0,  

78

00:08:44,520  -->  00:08:48,420
we didn't start coloring, the 
comparison will be done on degrees.  

79

00:08:49,980  -->  00:08:58,560
E has the highest degree, 6, we choose it. 
The smallest available color is 0. And now,  

80

00:08:58,560  -->  00:09:03,720
we need to update saturation of all its neighbors, 
because they potentially have a new color.  

81

00:09:04,560  -->  00:09:12,420
Its neighbors are A B F D G I. They all got a new 
neighbor color, their saturation increases by 1.  

82

00:09:14,400  -->  00:09:21,480
Next iteration, among uncolored vertices, the 
highest saturation is 1. But we have multiple  

83

00:09:21,480  -->  00:09:26,700
vertices with a saturation of 1, we take the 
one with the highest degree, the vertex A.  

84

00:09:29,100  -->  00:09:34,440
We cannot color it with 0 because it's used 
by its neighbor, E, so we add a new color 1.  

85

00:09:35,820  -->  00:09:40,680
And we update saturation of 
neighbors, which are B C E F H.  

86

00:09:41,520  -->  00:09:45,180
They all got a new neighbor color, 
we increment their saturation.  

87

00:09:47,460  -->  00:09:54,120
Next iteration, highest saturation is 2, for 
both B and F. To decide between them, we check  

88

00:09:54,120  -->  00:10:00,540
their degree. Their degree is also the same, 
3, then we just choose randomly, let's take F.  

89

00:10:01,800  -->  00:10:06,000
Color 0 is used by E, 1 is 
used by A, so we take 2.  

90

00:10:08,040  -->  00:10:14,520
Its neighbors are A E and I, they all got a new 
neighbor color, we increment their saturation.  

91

00:10:16,440  -->  00:10:22,140
Next iteration, we have the same scenario, 
highest saturation is 2, both B and I,  

92

00:10:22,140  -->  00:10:30,300
and their degrees are also the same. Let's 
choose I. Color 0 is used, but not 1, we take 1.  

93

00:10:31,500  -->  00:10:37,500
Its neighbors are E F and H, but they all 
already have color 1 as a neighbor color,  

94

00:10:37,500  -->  00:10:39,540
so their saturation doesn't increase.  

95

00:10:43,080  -->  00:10:49,560
Next iteration, highest saturation is 2, for 
the vertex B only, no hesitation, we take it.  

96

00:10:50,940  -->  00:10:59,340
0 and 1 are used, but not 2, we take 2. Its 
neighbors are A E and C, let's see which one  

97

00:10:59,340  -->  00:11:05,760
didn't have 2 as a neighbor color. A already has 2 
as a neighbor color, we don't increase saturation.  

98

00:11:06,360  -->  00:11:12,240
Same thing for E. But for C, it didn't have 
2 as neighbor color until now, so we increase  

99

00:11:12,240  -->  00:11:22,380
its saturation. Next iteration, C has the highest 
saturation, we take it. 0 is available, we color  

100

00:11:22,380  -->  00:11:29,700
it with the color 0. Both of its neighbors already 
had 0 as a neighbor color, we don't increment.  

101

00:11:31,680  -->  00:11:36,120
Next iteration, all vertices have 
saturation of 1, so we check degree.  

102

00:11:36,660  -->  00:11:39,960
Highest degree is the degree 
of the vertex H, we take it.  

103

00:11:40,680  -->  00:11:46,740
0 is available, we take it. All its 
neighbors already have 0 as a neighbor color.  

104

00:11:48,660  -->  00:11:54,840
Next iteration, two vertices remaining, same 
saturation and same degree, we choose randomly,  

105

00:11:54,840  -->  00:12:03,300
let's take G. 0 is used but we can color it with 
1. E and H already had 1 as a neighbor color,  

106

00:12:03,300  -->  00:12:12,120
but not D, we increment saturation of D. Last 
iteration, only one vertex left, D, we take it.  

107

00:12:13,380  -->  00:12:20,280
0 and 1 are used, we can color it with 2. 
And the saturation of G and H gets increased.  

108

00:12:21,600  -->  00:12:28,320
We colored all vertices, we finished the process. 
And you can see that we used 3 colors only instead  

109

00:12:28,320  -->  00:12:35,220
of 4 like with standard greedy coloring. We even 
got the optimal result, 3 is the minimum number  

110

00:12:35,220  -->  00:12:42,120
of colors that can be used. With this example you 
could perceive the impact of the ordering we use,  

111

00:12:42,120  -->  00:12:46,860
by just changing the way we traverse 
vertices, we obtained a better result.  

112

00:12:50,760  -->  00:12:56,340
What about the implementation? What we need to do 
is to keep track of the saturation of each vertex,  

113

00:12:56,340  -->  00:13:02,460
and at each iteration, we extract the uncolored 
vertex with the highest saturation. If we have  

114

00:13:02,460  -->  00:13:06,480
more than one such a vertex, we take the 
one with the highest degree among them.  

115

00:13:07,320  -->  00:13:13,200
And the suitable structure for this kind of 
operation is obviously the priority queue, each  

116

00:13:13,200  -->  00:13:18,600
element in the queue is a vertex, its priority 
key is its saturation followed by its degree.  

117

00:13:19,560  -->  00:13:24,840
And at each iteration, we extract the one 
with the maximum priority, it will be the next  

118

00:13:24,840  -->  00:13:31,680
vertex to color. And after coloring, we traverse 
neighbors to find ones whose saturation increases,  

119

00:13:31,680  -->  00:13:40,560
to update their keys in the priority queue. So we 
need 3 operations for our priority queue, insert,  

120

00:13:40,560  -->  00:13:45,540
to insert our vertices in the queue, extract, 
to extract the vertex with the highest priority,  

121

00:13:45,540  -->  00:13:53,760
and decrease key, to update the priority 
of a vertex. We could simply use an array,  

122

00:13:53,760  -->  00:14:00,000
inserting would be in O(1), extracting a vertex 
would be in O(|V|), and updating key in O(1).  

123

00:14:01,260  -->  00:14:06,780
But a better implementation choice would be 
the Fibonacci heap, insertion is in O(1) time,  

124

00:14:06,780  -->  00:14:12,660
extraction is in O(logn) amortized time, 
and decrease key is in O(1) amortized time.  

125

00:14:15,540  -->  00:14:19,680
Before we start implementing, we need 
to discuss what key we gonna use,  

126

00:14:19,680  -->  00:14:24,000
because as you may know nodes in a heap 
are compared according to their key.  

127

00:14:25,320  -->  00:14:31,020
At each iteration, the next vertex to color is 
the unvisited vertex with the highest saturation,  

128

00:14:31,020  -->  00:14:36,300
if there are ties, we take the one with 
the highest degree. So the key would be the  

129

00:14:36,300  -->  00:14:42,660
2-tuple (saturation, degree), because 2-tuples are 
compared this way: The first value is compared,  

130

00:14:42,660  -->  00:14:47,340
if they're equal, then the second value 
is compared, which is what we want.  

131

00:14:50,280  -->  00:14:56,100
But, a Fibonacci heap, at least in the 
library we're using, offers a min-heap only,  

132

00:14:56,100  -->  00:15:03,300
extracting operation gives us the node with the 
minimum key. It was suitable for Dijkstra's and  

133

00:15:03,300  -->  00:15:07,560
Prim's algorithm because we wanted the node 
with the minimum key, the minimum distance,  

134

00:15:07,560  -->  00:15:13,200
but in this one, we want the node with the 
maximum key, the maximum saturation or degree.  

135

00:15:13,980  -->  00:15:19,860
To counter this, we will switch the sign to use 
negative values, because given a list of values,  

136

00:15:19,860  -->  00:15:26,580
the greatest value among them is the smallest 
value when using their negative form. So the node  

137

00:15:26,580  -->  00:15:32,400
with the highest saturation is considered the one 
with the minimum key, the one that gets extracted.  

138

00:15:36,000  -->  00:15:42,480
Also, for saturation, we need the number of 
neighbor colors. Instead of always counting again,  

139

00:15:42,480  -->  00:15:51,120
we keep track of the colors used by neighbors of 
each vertex, in a set to avoid duplicates. And to  

140

00:15:51,120  -->  00:15:56,760
get the saturation of a vertex, we just get the 
cardinality of its set, its number of elements.  

141

00:15:59,880  -->  00:16:04,200
Let's start implementing. 
We first need a color map.  

142

00:16:04,740  -->  00:16:10,320
We also need to keep track of the set of adjacent 
colors of each vertex, so we create a hash table  

143

00:16:10,320  -->  00:16:15,240
neighborhood_colors that maps a vertex to the 
set of colors present in its neighborhood.  

144

00:16:17,160  -->  00:16:23,700
We also need a priority queue, of type Fibonacci 
heap. And we need to have the reference of the  

145

00:16:23,700  -->  00:16:30,000
node of each vertex to be able to update key, this 
is why we need nodes map, we will map each vertex  

146

00:16:30,000  -->  00:16:37,320
label to its node in the Fibonacci heap, same as 
in Dijkstra and Prim. Next step, creating a node  

147

00:16:37,320  -->  00:16:43,920
for each vertex and inserting it. For each vertex, 
we create a node. Its key will contain 3 things,  

148

00:16:45,000  -->  00:16:49,920
-saturation, initially 0, -degree, the 
number of its neighbors in negative form,  

149

00:16:49,920  -->  00:16:56,220
and the name of the vertex, we need to know what 
vertex we're working on when extracting a vertex.  

150

00:16:58,020  -->  00:17:05,400
We assign it to the vertex in the nodes map and we 
insert it in the Fibonacci heap. Now we can start  

151

00:17:05,400  -->  00:17:12,300
working, we keep looping while the queue still has 
elements. We start by extracting the next vertex.  

152

00:17:13,500  -->  00:17:19,200
We get a node as a result, which has a key made 
of 3 elements, the third one is the vertex label,  

153

00:17:19,200  -->  00:17:25,380
we save it in u to know which vertex we're 
working with. Then we need the colors used  

154

00:17:25,380  -->  00:17:31,200
by its neighbors. Fortunately, we already have the 
adjacent colors map, we don't need to search for  

155

00:17:31,200  -->  00:17:38,040
them again. So we search for the first available 
color as we did, we start from 0 and keep  

156

00:17:38,040  -->  00:17:42,960
iterating until we find one that is not in its 
neighborhood and we assign it to color[vertex].  

157

00:17:47,160  -->  00:17:51,900
Last step we need to do in the iteration, 
we need to update the keys of its neighbors,  

158

00:17:51,900  -->  00:17:58,020
for each neighbor, we add its color to adjacent 
colors of the neighbor. The good thing is that  

159

00:17:58,020  -->  00:18:03,180
if it was already in the set, nothing 
will change, the set avoids duplicates.  

160

00:18:04,500  -->  00:18:10,320
Also, the saturation of the neighbor may have 
changed, we update the key in the priority queue.  

161

00:18:12,300  -->  00:18:17,580
Only uncolored vertices are still in the queue, so 
we first make sure that the neighbor is uncolored,  

162

00:18:17,580  -->  00:18:27,060
by checking if its not in color map. If it's not 
the case, we update its key. The saturation is the  

163

00:18:27,060  -->  00:18:32,880
length of its set of neighborhood colors. Now we 
get its node from nodes map, and for the new key,  

164

00:18:32,880  -->  00:18:38,040
it's the saturation in negative form, the 
degree in negative form, and the vertex name.  

165

00:18:41,400  -->  00:18:45,600
After the loop, all vertices are 
colored, we return the color map,  

166

00:18:45,600  -->  00:18:49,800
and we implemented DSatur 
by using a Fibonacci heap.  

167

00:18:53,640  -->  00:18:56,880
For the time complexity, we have |V| for creating 
the adjacent colors map. Then |V| for creating a  

168

00:18:56,880  -->  00:19:02,820
node for each vertex and inserting it. Then we 
have a loop that does |V| iterations. The queue  

169

00:19:02,820  -->  00:19:10,020
is storing vertices, and we have |V| vertices, 
so extracting costs O(log|V|) amortized time.  

170

00:19:11,820  -->  00:19:17,520
We also have finding the color, which costs 
deg(u) because a vertex has at most deg(u)  

171

00:19:17,520  -->  00:19:22,740
adjacent colors. Then traversing 
the neighbors of the actual vertex,  

172

00:19:22,740  -->  00:19:29,280
deg(u) iterations, and decrease key in a 
Fibonacci heap runs in O(1) amortized time.  

173

00:19:30,180  -->  00:19:36,240
The total is |V| + |V|log|V| + twice 
the sum of degrees of vertices.  

174

00:19:38,280  -->  00:19:43,800
Remember that when we have a loop that traverses 
all the vertices and the cost of an iteration is  

175

00:19:43,800  -->  00:19:50,400
the degree of that vertex, then the total cost is 
the sum of degrees, which is 2|E| in undirected  

176

00:19:50,400  -->  00:20:01,020
graphs when using an adjacency list. We replace 
and we get |V| + |V|log|V| + 4|E|, which is in  

177

00:20:02,580  -->  00:20:10,080
O(|E|+|V|log|V|), we got an O(|E|+|V|log|V|) 
time complexity for this implementation.  

178

00:20:13,620  -->  00:20:20,280
For efficiency, DSatur usually gives similar or 
better results than Welsh-Powell, and it's quite  

179

00:20:20,280  -->  00:20:28,860
time efficient. It also guarantees the optimal 
result for bipartite, cycle, and wheel graphs.  

180

00:20:32,100  -->  00:20:37,800
Now we've seen two heuristics for graph coloring, 
there exist other ones obviously, like RLF,  

181

00:20:37,800  -->  00:20:43,500
recursive largest first, which gives good 
results, but it won't be covered in this lecture.  

182

00:20:44,940  -->  00:20:48,600
We've reached the end of this lecture, I 
hope that you understood both heuristics,  

183

00:20:48,600  -->  00:20:53,220
if you didn't, you can ask questions. 
See you in the next lecture.
