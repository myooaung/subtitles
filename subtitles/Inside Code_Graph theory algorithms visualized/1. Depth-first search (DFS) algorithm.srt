1

00:00:00,120  -->  00:00:04,980
In the previous chapters, we introduced 
graphs, we learnt some terminology, we learnt  

2

00:00:04,980  -->  00:00:10,260
how to implement a graph, we can say that we're 
ready to start learning about graph algorithms.  

3

00:00:11,340  -->  00:00:13,680
Which is what we will do in this chapter,  

4

00:00:13,680  -->  00:00:19,560
we will study two very important algorithms: 
depth-first search and breadth-first search.  

5

00:00:20,640  -->  00:00:26,820
These two algorithms give us the ability to 
traverse a graph, a necessary operation that will  

6

00:00:26,820  -->  00:00:33,480
be the foundation of many algorithms we will study 
later. We will start with depth-first search.  

7

00:00:35,400  -->  00:00:40,500
Let me put you in a situation, you are playing 
a game, and you want to do all missions.  

8

00:00:41,220  -->  00:00:48,000
You start at mission A, you complete it, and from 
here you unlocked three new missions B, C, and D.  

9

00:00:48,600  -->  00:00:54,360
How would you proceed to complete them all? 
Because you cannot do them all at the same time,  

10

00:00:54,360  -->  00:00:59,040
you get an idea, you decide to do the 
first one and all missions it unlocks,  

11

00:00:59,040  -->  00:01:04,440
you go back to your starting point, you go to the 
second one, you do it and all missions it unlocks,  

12

00:01:04,440  -->  00:01:10,140
you go back, you move to the third one, you do 
it and all missions it unlocks, and you go back.  

13

00:01:11,160  -->  00:01:17,340
By doing so, you will have finished 
all missions. Let's apply this idea,  

14

00:01:17,340  -->  00:01:25,140
we go to the first mission, B. You do it, and it 
unlocks two new missions. Once again, same idea,  

15

00:01:25,140  -->  00:01:29,520
you go to the first one, you go back, you 
go to the second one, and you go back.  

16

00:01:31,500  -->  00:01:37,200
Let's go to the first one. Now there is 
only one new mission to go to, we go to it.  

17

00:01:38,100  -->  00:01:43,500
Two unlocked missions now, you go to the 
first one. And it doesn't unlock new missions,  

18

00:01:43,500  -->  00:01:49,320
you reached the end of the actual path, so you 
go back to K, to see if it has other unlocked  

19

00:01:49,320  -->  00:01:55,980
missions we didn't complete yet. Now you 
have a second mission you didn't do yet,  

20

00:01:55,980  -->  00:02:00,300
you go to it. Then you have three new 
missions, you go to the first one,  

21

00:02:00,300  -->  00:02:06,360
no further missions so you go back, you go to the 
second one, no further missions so you go back.  

22

00:02:08,880  -->  00:02:14,400
By the way, the red mark on the floor represents 
missions you already completed, let's say that  

23

00:02:14,400  -->  00:02:19,320
you have a little notebook where you write all 
missions you finished, to avoid doing them again.  

24

00:02:20,640  -->  00:02:23,460
Third mission now. Only one unlocked mission,  

25

00:02:23,460  -->  00:02:28,380
and you can see that it's in red, we 
already finished it, so we just go back.  

26

00:02:30,600  -->  00:02:36,660
We finished all unlocked missions of this one, we 
go back. Same thing here, we go back. Same thing  

27

00:02:36,660  -->  00:02:42,600
here, we go back. Now from B we have a second 
unlocked mission, F, but we already finished it,  

28

00:02:42,600  -->  00:02:49,800
it's in red. No more missions from B, we go 
back to A. The second mission unlocked by  

29

00:02:49,800  -->  00:02:57,240
A is C, we do it. It doesn't unlock any new 
missions, we go back to A. We go complete D,  

30

00:02:57,240  -->  00:03:04,380
and it unlocks three new missions: H, I, and J. We 
start with H, it unlocks no missions, we go back.  

31

00:03:04,980  -->  00:03:12,180
We move to I, it unlocks two new missions. We 
go to O, no unlocked missions, we go back to I.  

32

00:03:12,180  -->  00:03:19,140
Second unlocked mission, J, we go to it. We can 
go to D but we already did D, so we just go back.  

33

00:03:19,860  -->  00:03:26,580
We finished all unlocked missions by I, we go 
back. D also unlocked J, but it's in red, we don't  

34

00:03:26,580  -->  00:03:33,180
need to do it again. We finished missions of D, we 
go back to A. We finished missions unlocked by A,  

35

00:03:33,180  -->  00:03:37,560
it means that we finished all missions, 
congratulations, we finished the game.  

36

00:03:40,920  -->  00:03:44,640
You obviously noticed that what you're 
seeing on the screen is a graph,  

37

00:03:44,640  -->  00:03:50,040
where a vertex represents a mission, and an edge 
between two missions means that completing one  

38

00:03:50,040  -->  00:03:55,920
mission unlocks the other. And what we did here 
is a graph traversal, we traversed all vertices,  

39

00:03:55,920  -->  00:04:02,640
which are missions, to complete them. And the way 
we used to perform this traversal is: depth-first  

40

00:04:02,640  -->  00:04:09,840
search, the algorithm we're learning about. 
Now you're wondering, how did it work exactly?  

41

00:04:09,840  -->  00:04:15,720
And why is it called depth-first search? At the 
beginning we were at A, we completed the mission,  

42

00:04:15,720  -->  00:04:24,060
and we had 3 new missions, B C and D. We decided 
to go to B. And by finishing B, we had two new  

43

00:04:24,060  -->  00:04:30,240
missions E and F. We decided to go to E. E 
unlocked one mission K, we decided to go to K.  

44

00:04:30,900  -->  00:04:36,300
Etcetera etcetera, what we're doing here is that 
we're going deeper and deeper from one path,  

45

00:04:36,300  -->  00:04:42,600
until we can't continue further, like when we 
reached P, from P we don't have new missions.  

46

00:04:44,760  -->  00:04:49,980
This is why it's called depth-first search, 
we prioritize the depth, we go as deep as  

47

00:04:49,980  -->  00:04:57,360
possible into one path before moving to another 
one. What did we do when completing P? We went  

48

00:04:57,360  -->  00:05:03,060
back to K to continue from other paths, and 
that's the main idea of depth-first search,  

49

00:05:03,060  -->  00:05:10,080
we start at a vertex, A in our example, then we go 
as far as possible from one branch, we backtrack,  

50

00:05:10,080  -->  00:05:16,260
we move to another branch, we backtrack, and so 
on until we finish traversing the whole graph.  

51

00:05:18,480  -->  00:05:22,740
And because we're working on a graph, 
some paths can have common vertices,  

52

00:05:22,740  -->  00:05:29,160
which means that if we work naively, we can visit 
the same vertex multiple times, which is useless  

53

00:05:29,160  -->  00:05:36,360
in a lot of situations. It's the reason why we 
used that notebook where we wrote all missions  

54

00:05:36,360  -->  00:05:41,880
we completed, so that before going to a mission, 
we first make sure that we didn't do it before.  

55

00:05:44,580  -->  00:05:50,820
Remembering visited vertices avoids traversing the 
same vertices more than once, but it also avoids  

56

00:05:50,820  -->  00:05:57,000
something more dangerous, having a program 
that never stops. For example we went A, B,  

57

00:05:57,000  -->  00:06:03,600
E, K, P, back, L, F. Then here we didn't 
go to B because B was in our notebook,  

58

00:06:04,140  -->  00:06:11,580
but what if we didn't remember that we already 
did B? We would go to B, then again, E, K, L, F.  

59

00:06:11,580  -->  00:06:17,040
We go to B again, then E, K, L, F, 
and it keeps going like this forever.  

60

00:06:20,040  -->  00:06:25,620
Before moving to the implementation, I know that 
you may want to see one or two other examples to  

61

00:06:25,620  -->  00:06:31,020
better understand, but what if I tell you that you 
will be able to visualize millions of examples.  

62

00:06:31,740  -->  00:06:37,500
I made a Python program that generates a random 
graph then shows you the process step by step,  

63

00:06:37,500  -->  00:06:40,080
you will be able to take all your time.  

64

00:06:42,000  -->  00:06:47,400
And obviously, if you still didn't understand 
something, reach out to me by asking a question.  

65

00:06:50,580  -->  00:06:54,660
Let's move to the implementation. 
First, let's try to understand  

66

00:06:54,660  -->  00:06:59,880
what we did with missions by writing 
pseudocode. The initial mission was A,  

67

00:06:59,880  -->  00:07:05,700
from where we want to complete all missions, so 
we may think of a function complete_missions,  

68

00:07:05,700  -->  00:07:11,700
that takes as parameters the actual mission, and 
the notebook, where we write completed missions.  

69

00:07:13,020  -->  00:07:17,940
Now in the function, we complete the actual 
mission, we write in the notebook that we  

70

00:07:17,940  -->  00:07:23,820
completed the actual mission, and we move to 
unlocked missions. For each unlocked mission,  

71

00:07:23,820  -->  00:07:30,240
we first check that we didn't complete it before, 
if it's the case, mission not in notebook, we call  

72

00:07:30,240  -->  00:07:36,660
the function on it. Yes, it's the same function, 
the process of depth-first search is recursive,  

73

00:07:36,660  -->  00:07:43,080
we complete a mission and move to unlocked ones, 
for each one of them we also complete it and move  

74

00:07:43,080  -->  00:07:49,440
to unlocked ones, for each one of them we also 
complete it and move to unlocked ones, and so on.  

75

00:07:53,220  -->  00:07:57,420
And it's this recursive process that 
is handling the action of going back,  

76

00:07:57,420  -->  00:08:03,000
remember that when we finish visiting neighbors 
of a vertex, we go back to the previous one.  

77

00:08:03,960  -->  00:08:10,800
And you need to understand how does it work. You 
probably know that when a function calls another  

78

00:08:10,800  -->  00:08:16,740
function, the first one stops, waits for the call 
to end, then it continues its instructions. And  

79

00:08:16,740  -->  00:08:22,200
this is what happens, we have the call on the 
mission A, we complete the mission, we write  

80

00:08:22,200  -->  00:08:28,020
in the notebook, then we traverse unlocked 
missions. The first unlocked mission is B,  

81

00:08:28,020  -->  00:08:33,780
so we have a new function call on B, this 
is why the call on A stops, waits for the  

82

00:08:33,780  -->  00:08:39,240
call on B to end, then continues remaining 
instructions, it moves to next neighbors.  

83

00:08:41,100  -->  00:08:45,540
And to be able to go back to A, the 
call on B stores the return address,  

84

00:08:45,540  -->  00:08:53,160
so that once it finishes all its instructions, 
it knows where it needs to go back. Anyway this  

85

00:08:53,160  -->  00:08:58,200
is something related to recursion, and if you're 
comfortable with recursion you should then already  

86

00:08:58,200  -->  00:09:03,960
know how the recursive process works, especially 
when there are multiple recursive calls like here.  

87

00:09:05,820  -->  00:09:10,620
So far, we wrote pseudocode for this 
specific example of missions and stuff,  

88

00:09:10,620  -->  00:09:16,560
but the general version is this one. We 
have a function dfs, depth-first search,  

89

00:09:16,560  -->  00:09:21,540
it takes as parameters the graph from where 
we will find neighbors, the actual vertex,  

90

00:09:21,540  -->  00:09:27,540
and a set visited where we store visited 
vertices, it represents that famous notebook.  

91

00:09:29,460  -->  00:09:34,620
Then inside the function, we process the 
actual vertex, we can print it for example,  

92

00:09:34,620  -->  00:09:39,960
we store it in visited, then for each 
neighbour, if the neighbor is not visited,  

93

00:09:39,960  -->  00:09:45,960
we call dfs on it to visit it, that's 
the pseudocode for depth-first search.  

94

00:09:49,320  -->  00:09:53,940
If you're wondering where is the base case, 
the case where we perform no recursive calls,  

95

00:09:53,940  -->  00:09:57,120
which is necessary to stop the 
recursive process at some point,  

96

00:09:57,120  -->  00:10:00,480
it's the case where we don't 
have unvisited neighbors,  

97

00:10:00,480  -->  00:10:05,820
in that case we never enter in the condition, 
hence, we don't call the function again.  

98

00:10:09,000  -->  00:10:12,960
Okay now we wrote the pseudocode, 
but how to actually implement it,  

99

00:10:12,960  -->  00:10:19,800
in Python for example. First of all, we must know 
the graph implementation, is it adjacency list or  

100

00:10:19,800  -->  00:10:25,920
adjacency matrix? We will learn to use dfs on both 
of them, there isn't much difference but still.  

101

00:10:28,380  -->  00:10:33,900
Let's start with adjacency list, we have a 
function dfs that takes as parameters the graph,  

102

00:10:33,900  -->  00:10:39,900
the actual vertex, and the set of visited 
vertices. Inside the function we process the  

103

00:10:39,900  -->  00:10:46,680
actual vertex, we can for example print it, then 
we add it to the set of visited vertices. Now we  

104

00:10:46,680  -->  00:10:52,500
start traversing neighbors. In the adjacency list 
lecture, we've seen that to traverse neighbors of  

105

00:10:52,500  -->  00:10:59,520
a vertex, we just traverse the array at key 
vertex, we write graph.adj_list[vertex], and  

106

00:10:59,520  -->  00:11:05,700
it returns that array of neighbors. This is why 
we write, for neighbor in graph.adj_list[vertex].  

107

00:11:09,120  -->  00:11:14,400
Inside the loop, we first make sure that we 
didn't visit the neighbor before, we write,  

108

00:11:14,400  -->  00:11:19,980
if neighbor not in visited. And inside 
the condition block, we call dfs again,  

109

00:11:19,980  -->  00:11:25,320
but this time, we put neighbor, we want to 
start traversing from the neighbor this time.  

110

00:11:26,400  -->  00:11:31,860
And we got our dfs function, in the 
main dfs function we create the graph,  

111

00:11:31,860  -->  00:11:36,420
we create an empty set visited, and 
we call the recursive dfs() function.  

112

00:11:41,340  -->  00:11:45,840
Note that the function we made now is 
quite basic, we're just printing vertices,  

113

00:11:45,840  -->  00:11:52,080
later we will use dfs for more advanced stuff, 
but don't worry, the principle remains the same.  

114

00:11:54,420  -->  00:12:00,480
What about the adjacency matrix now? Well, the 
function remains the same, only one thing changes,  

115

00:12:00,480  -->  00:12:07,980
the way of finding neighbors of our vertex. In an 
adjacency list, we have a vertex, let's say 'A',  

116

00:12:07,980  -->  00:12:14,580
we go to the key 'A' in the adjacency list, and 
we find the array of neighbors. In an adjacency  

117

00:12:14,580  -->  00:12:20,280
matrix, we traverse the row to find cells where 
there is a 1, by mapping back and forth between  

118

00:12:20,280  -->  00:12:27,060
vertices and their indices in the matrix, all that 
is implemented in the neighbors() method you will  

119

00:12:27,060  -->  00:12:32,700
find in notes of the adjacency matrix lecture. 
And we keep the same stuff inside the loop.  

120

00:12:35,220  -->  00:12:41,820
Question now. Does depth-first search always 
visit all the vertices? The answer is no. In  

121

00:12:41,820  -->  00:12:47,400
our example, we called depth-first search on 
A, and we've been able to reach every vertex.  

122

00:12:47,400  -->  00:12:52,980
The reason behind it is that every vertex 
is reachable from A, so we had no problem.  

123

00:12:53,700  -->  00:12:59,580
But, it's not always the case, take this 
graph for example. We call dfs on A.  

124

00:13:01,440  -->  00:13:07,800
You can see that it didn't reach every vertex, 
the reason behind it is that some vertices are not  

125

00:13:07,800  -->  00:13:15,300
reachable from A, so there is simply no path to 
visit them. What's the solution then? The solution  

126

00:13:15,300  -->  00:13:22,620
is that in the main function, we call dfs on each 
unvisited vertex. Let's do it with this example.  

127

00:13:23,220  -->  00:13:32,100
We have this graph, we call dfs on A and it visits 
some vertices, A B F and C. Then B, visited. Then  

128

00:13:32,100  -->  00:13:42,300
C, visited. Then dfs on D, it visits D H and J. 
Then E, it visits E K P L Q. Then F, visited.  

129

00:13:42,300  -->  00:13:53,160
Then H, visited. Then I, it visits I and O. Then 
J K L O P Q, all visited. Then R, it visits R.  

130

00:13:54,840  -->  00:13:59,880
We finished all vertices, you can see that 
all of them have been visited with dfs.  

131

00:14:00,780  -->  00:14:06,780
In code, in the main dfs function, we just 
write, for each vertex in the adjacency list,  

132

00:14:06,780  -->  00:14:12,960
if vertex not in visited, we call dfs 
on it. And by doing so, we will have  

133

00:14:12,960  -->  00:14:18,420
traversed all vertices of the graph, even if 
the graph is disconnected or weakly connected.  

134

00:14:21,720  -->  00:14:26,160
Last thing to talk about in this lecture, 
time complexity of depth-first search.  

135

00:14:26,760  -->  00:14:29,340
Once again, it depends on the implementation.  

136

00:14:30,540  -->  00:14:36,660
Let's start with the adjacency list. An important 
thing to understand is that the function is called  

137

00:14:36,660  -->  00:14:42,720
exactly once on each vertex. Why? Because we 
have a condition, we're calling the function  

138

00:14:42,720  -->  00:14:49,200
on a vertex only when it's not visited yet. And 
as soon as we enter a call, we set the vertex as  

139

00:14:49,200  -->  00:14:55,500
visited, which means that we won't call dfs on it 
anymore, we deduce that it will be done only once.  

140

00:14:57,600  -->  00:15:03,000
In this process, we have the cost of traversing 
vertices in the main function, and the cost of  

141

00:15:03,000  -->  00:15:09,720
traversing neighbors of each vertex. For the main 
loop function, we're traversing all vertices,  

142

00:15:09,720  -->  00:15:16,260
which costs |V|. And for function calls, we 
said that we're calling dfs on each vertex  

143

00:15:16,260  -->  00:15:22,440
exactly once, so we just do the sum. But 
what's the cost of calling dfs on a vertex?  

144

00:15:23,280  -->  00:15:28,980
Let's have a look. We have printing, done 
in O(1), then adding to the visited set,  

145

00:15:28,980  -->  00:15:36,000
which is in O(1) in average because adding to a 
set costs O(1) time in average. Then we have a  

146

00:15:36,000  -->  00:15:41,880
loop that traverses neighbors of that vertex. And 
remember what we said about traversing neighbors  

147

00:15:41,880  -->  00:15:47,340
in an adjacency list, the cost of traversing 
neighbors of a vertex depends on its degree,  

148

00:15:47,340  -->  00:15:52,980
because in a simple graph, the degree of a 
vertex represents the number of its neighbors.  

149

00:15:55,260  -->  00:16:02,640
We get that the cost of calling dfs on a vertex 
v is deg(v)+O(1), that we can simplify to deg(v).  

150

00:16:04,800  -->  00:16:10,260
We're calling dfs on each vertex once, 
so the total cost of dfs calls is the sum  

151

00:16:10,260  -->  00:16:16,320
of degrees of each vertex. And we have the 
theorem that says that in a directed graph,  

152

00:16:16,320  -->  00:16:22,140
the sum of degrees is equal to the number of 
edges, and in an undirected graph, the sum of  

153

00:16:22,140  -->  00:16:29,700
degrees is equal to twice the number of edges. So 
in total, we have |V| to traverse vertices, and  

154

00:16:29,700  -->  00:16:38,820
|E| or 2|E| to traverse neighbors in all calls. 
Which gives O(|V|+|E|) time complexity in both  

155

00:16:38,820  -->  00:16:46,320
cases, we can say that depth-first search has an 
O(|V|+|E|) time complexity with an adjacency list.  

156

00:16:49,140  -->  00:16:53,520
What about the adjacency matrix? Is 
it the same thing? Let's find out.  

157

00:16:54,360  -->  00:17:00,300
With an adjacency matrix, the only difference is 
the way we traverse neighbors. In an adjacency  

158

00:17:00,300  -->  00:17:06,120
list, the cost of traversing the neighbors of a 
vertex is its degree, but in an adjacency matrix,  

159

00:17:06,120  -->  00:17:13,200
the cost is |V|, because we traverse the whole 
row of the adjacency matrix. So in the total cost,  

160

00:17:13,200  -->  00:17:20,760
instead of having |V| + the sum of the degree 
for each vertex, we have |V| + the sum of |V|  

161

00:17:20,760  -->  00:17:28,440
for each vertex, basically we multiply |V| 
by the number of vertices, which is also |V|.  

162

00:17:28,440  -->  00:17:38,460
We get |V| + |V|*|V|, which is |V|+|V|², which 
gives O(|V|²), the time complexity of depth-first  

163

00:17:38,460  -->  00:17:48,120
search is O(|V|²) with an adjacency matrix. And 
we know that O(|V|+|E|) is asymptotically faster  

164

00:17:48,120  -->  00:17:54,240
than O(|V|²), so in terms of time, it's 
better to use an adjacency list for dfs.  

165

00:17:57,600  -->  00:18:03,540
What about space complexity? As extra space, 
we have the set of visited vertices, whose the  

166

00:18:03,540  -->  00:18:08,580
size becomes |V| at the end of the process, 
because we will have inserted all vertices.  

167

00:18:09,600  -->  00:18:15,000
And it's a recursive process, so we also have 
to take the call stack size into consideration.  

168

00:18:16,020  -->  00:18:21,660
The worst case is when there is a path that passes 
from all vertices, because when being on the last  

169

00:18:21,660  -->  00:18:27,540
one, all calls will still be active, in other 
words, they will still be on the call stack.  

170

00:18:28,320  -->  00:18:31,440
This is why the maximum call stack size is |V|.  

171

00:18:32,400  -->  00:18:38,460
In total, we have |V| for the set of visited 
vertices + |V| for the call stack size,  

172

00:18:38,460  -->  00:18:45,360
we get an O(|V|) space complexity for depth-first 
search, for both adjacency list and matrix.  

173

00:18:49,500  -->  00:18:54,900
I think that we're done with depth-first 
search, we've seen how it works, an example,  

174

00:18:54,900  -->  00:19:00,000
the implementation on both representations we've 
studied, and the time and space complexity.  

175

00:19:01,620  -->  00:19:06,480
If you're still not comfortable with depth-first 
search, it's fine, it's possible to not understand  

176

00:19:06,480  -->  00:19:15,360
everything after only one lecture. 5 suggestions 
in that case: 1. To use the visualization program  

177

00:19:15,360  -->  00:19:20,940
I mentioned before to see how dfs works on more 
and more examples. 2. To do the quiz that comes  

178

00:19:20,940  -->  00:19:26,040
after this chapter. 3. To ask questions, you can 
ask me questions. 4. To focus during the practice  

179

00:19:26,040  -->  00:19:31,800
problem we will solve in the next lecture. And 
5. To focus during lectures of the next chapters,  

180

00:19:31,800  -->  00:19:40,020
because we will use dfs to develop other graph 
algorithms. We reached the end of this lecture,  

181

00:19:40,020  -->  00:19:44,220
I hope that you understood everything 
perfectly, and see you in the next lecture!
