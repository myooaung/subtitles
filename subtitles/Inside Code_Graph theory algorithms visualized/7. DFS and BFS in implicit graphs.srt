1

00:00:00,000  -->  00:00:03,840
In this chapter, we learned 
about dfs and bfs algorithms,  

2

00:00:03,840  -->  00:00:09,720
and we applied them in explicit graph structures, 
we had an adjacency list or an adjacency matrix,  

3

00:00:09,720  -->  00:00:14,280
and we've seen how to use the 
two algorithms. But what if the  

4

00:00:14,280  -->  00:00:19,140
graph structure was not really explicit? Can we 
still apply them? Let me show you an example.  

5

00:00:20,760  -->  00:00:27,420
A good example is a grid, let's say that we have 
a grid made of 0s and 1s where 0 means that the  

6

00:00:27,420  -->  00:00:34,380
cell is free, we can walk on it, and 1 means that 
there is a wall in that cell. And starting from a  

7

00:00:34,380  -->  00:00:40,260
cell we can move to its 4-directionally adjacent 
cells if they exist and have no wall in them.  

8

00:00:40,980  -->  00:00:46,140
For example from this cell, we can go to the 
left, we cannot go to the top because it's outside  

9

00:00:46,140  -->  00:00:50,940
the grid, we cannot go to the right because 
there's a wall, and we can go to the bottom.  

10

00:00:52,440  -->  00:00:57,060
Can we use dfs and bfs to walk 
inside this grid? The answer is yes.  

11

00:00:57,720  -->  00:01:03,960
The reason behind it is that we can represent this 
grid with a graph, where each cell is represented  

12

00:01:03,960  -->  00:01:10,500
by a vertex, and an edge between two vertices 
means that we can move between those two cells.  

13

00:01:11,700  -->  00:01:17,700
Before showing you the result, try to convert this 
grid to a graph by yourself on a paper or on a  

14

00:01:17,700  -->  00:01:23,640
software, put a vertex for each cell and if we can 
move between two cells, put an edge between their  

15

00:01:23,640  -->  00:01:32,280
vertices in the graph. You should get this result, 
pause the video and compare with what you've done.  

16

00:01:35,040  -->  00:01:40,260
And starting from this graph, we can apply 
dfs and bfs to solve different problems,  

17

00:01:40,260  -->  00:01:47,220
for example we can know if it's possible to go 
from a cell A to a cell B in the grid. And to  

18

00:01:47,220  -->  00:01:52,800
actually implement this, we can think of creating 
an adjacency list, creating a key for each cell,  

19

00:01:52,800  -->  00:01:58,260
then for each cell, we check its 4-directionally 
adjacent cells, we add to neighbors every one of  

20

00:01:58,260  -->  00:02:04,560
them that is inside the grid and has no wall in 
it. Then we start working on the graph we created.  

21

00:02:05,820  -->  00:02:10,440
But we don't need to do all of this, 
we can directly work on the grid.  

22

00:02:12,300  -->  00:02:17,880
You need to understand something, to traverse 
a graph, we don't necessarily need an adjacency  

23

00:02:17,880  -->  00:02:23,820
list or an adjacency matrix, we just need two 
things: to know how are vertices represented,  

24

00:02:23,820  -->  00:02:30,000
and how to find neighbors of a vertex. Which 
are both available in this grid representation.  

25

00:02:30,840  -->  00:02:36,900
A vertex is represented by a cell, which is 
represented by its coordinates, in other words,  

26

00:02:36,900  -->  00:02:42,420
its row and its column, so a vertex is 
represented by a tuple of 2 elements,  

27

00:02:42,420  -->  00:02:46,800
the first element represents the row 
and the second element the column.  

28

00:02:48,060  -->  00:02:53,520
And to find neighbors of a vertex, we 
traverse its 4-directionally adjacent cells,  

29

00:02:53,520  -->  00:02:59,460
we take those that respect the condition, 
being inside the grid and not having a wall.  

30

00:03:01,560  -->  00:03:06,360
Let's try it now with dfs and bfs. We 
want to start from a cell in a grid,  

31

00:03:06,360  -->  00:03:11,820
and to move to all other reachable 
cells, using either dfs or bfs.  

32

00:03:13,020  -->  00:03:19,080
Let's start with dfs. Our function takes as 
parameters the grid, the coordinates i and  

33

00:03:19,080  -->  00:03:25,500
j from where we want to start, and the set of 
visited vertices. Inside the function, we start  

34

00:03:25,500  -->  00:03:31,740
by storing the dimensions of the grid in n and m, 
then we put the actual vertex in the visited set.  

35

00:03:32,460  -->  00:03:39,240
And a vertex is represented by a tuple containing 
its coordinates, i and j here, we put the tuple  

36

00:03:39,240  -->  00:03:46,200
(i, j) in visited. Then we process the vertex, 
we can for example print its coordinates.  

37

00:03:47,220  -->  00:03:53,280
Now we need to traverse adjacent cells of the 
actual cell, for that we check the 4 directions  

38

00:03:53,280  -->  00:04:01,800
in any order, bottom top right left for example. 
But how to check the 4 directions? Our cell is  

39

00:04:01,800  -->  00:04:08,700
at coordinates (i, j), so the one at the bottom 
is at (i+1, j), the one at the top is at (i-1,  

40

00:04:08,700  -->  00:04:15,060
j), the one at the right is at (i, j+1), 
and the one at the left is a t (i, j-1).  

41

00:04:16,560  -->  00:04:20,700
We traverse each couple, and we're 
traversing each adjacent cell.  

42

00:04:22,440  -->  00:04:29,040
Now we have next_i and next_j, coordinates of the 
potential neighbor, potential because we still  

43

00:04:29,040  -->  00:04:35,760
need to add a condition. Our cell must be inside 
the grid, doesn't contain a wall, and is not  

44

00:04:35,760  -->  00:04:43,920
visited, so next_i must be between 0 inclusive and 
n exclusive, next_j must be between 0 inclusive  

45

00:04:43,920  -->  00:04:51,000
and m exclusive, and grid[next_i][next_j] must 
be equal to 0, means that we can walk in it.  

46

00:04:52,140  -->  00:04:57,780
If these conditions are respected, then 
(next_i, next_j) is a neighbor of (i, j).  

47

00:04:58,560  -->  00:05:04,980
But we still have a condition to go to 
it, not being in visited. This is why we  

48

00:05:04,980  -->  00:05:12,600
add another condition, (next_i, next_j) not in 
visited. If all these conditions are respected,  

49

00:05:12,600  -->  00:05:18,900
it means that we need to move from (i, j) to 
(next_i, next_j), we call the dfs function on it.  

50

00:05:20,040  -->  00:05:24,840
And in the main function, we have as 
parameters the grid, and the coordinates (i,  

51

00:05:24,840  -->  00:05:30,840
j) of the cell from where we start. We create 
a set visited, and we call the function.  

52

00:05:35,580  -->  00:05:40,440
This was for dfs, what about 
bfs now. For bfs, same thing,  

53

00:05:40,440  -->  00:05:44,940
a vertex is now represented with a 
tuple (i, j), and to find neighbors,  

54

00:05:44,940  -->  00:05:49,860
we traverse the 4 adjacent cells and check 
those that respect the condition, that's it.  

55

00:05:51,900  -->  00:05:57,780
By the way, here in dfs we are checking the 
validity of a cell before we call the function on  

56

00:05:57,780  -->  00:06:04,320
it, so we have nothing to check at the beginning 
of a call, we know that grid[i][j] is valid. But  

57

00:06:04,320  -->  00:06:09,060
we can check after calling. We call dfs on each 
adjacent cell without checking the condition,  

58

00:06:09,060  -->  00:06:15,540
but when entering the function call, we add a base 
case, if the actual cell is outside the grid or  

59

00:06:15,540  -->  00:06:22,860
has a wall or is visited, we directly exit, it's 
not a valid cell to go to. Same thing with bfs,  

60

00:06:22,860  -->  00:06:27,120
we can enqueue directly without checking 
conditions, we check them when we dequeue  

61

00:06:27,120  -->  00:06:33,840
that cell later. And it gives the same result, 
it's just another way of implementing dfs and bfs.  

62

00:06:35,640  -->  00:06:40,980
That is quite slower because here we first need 
to enter the call before noticing that the vertex  

63

00:06:40,980  -->  00:06:45,900
is invalid, while in the implementation 
we've seen previously we don't even call.  

64

00:06:48,240  -->  00:06:54,000
Also, with a grid, we're using a visited set 
to store visited cells, which is not necessary,  

65

00:06:54,000  -->  00:06:59,760
we have another way to do so. Our 
grid actually contains 1s and 0s,  

66

00:06:59,760  -->  00:07:05,340
1 means there's a wall and 0 means 
there isn't. We can add a third value,  

67

00:07:05,340  -->  00:07:11,520
2 for example, such that a cell that has the 
value 2 means that the actual cell is visited.  

68

00:07:12,360  -->  00:07:17,640
So in our code, when we want to consider 
a cell as visited we set its value to 2,  

69

00:07:17,640  -->  00:07:22,320
and to check that a cell is not visited 
we just check that it's different from 2.  

70

00:07:24,120  -->  00:07:29,640
Here we just check if it's equal to 0 because 
0 means that it's empty and not visited.  

71

00:07:30,900  -->  00:07:35,640
And after we finish everything, we 
set all cells with a value of 2 to 0,  

72

00:07:35,640  -->  00:07:41,880
to get the original state of the grid. By 
doing so, we avoid using extra space for  

73

00:07:41,880  -->  00:07:48,360
the visited set, which can be of size n*m in 
the worst case, when we visit all the cells.  

74

00:07:52,380  -->  00:07:57,300
Okay now we learnt how to apply dfs 
and bfs on a grid, how can we use it?  

75

00:07:57,300  -->  00:08:03,060
We can use it in a lot of problems, for 
example we have the Flood fill algorithm.  

76

00:08:03,720  -->  00:08:10,020
In Paint software, we can fill a whole connected 
area with the same color, but how does it work?  

77

00:08:10,020  -->  00:08:16,080
It uses the flood fill algorithm, it starts 
from the pixel where we clicked, and it keeps  

78

00:08:16,080  -->  00:08:22,560
coloring all cells of that area with the color 
we chose, which can be done with dfs and bfs.  

79

00:08:25,320  -->  00:08:28,260
And I made a whole video on 
this algorithm on YouTube,  

80

00:08:28,260  -->  00:08:33,060
a video that you should really watch, you 
can consider it as a part of this course,  

81

00:08:33,060  -->  00:08:37,200
you can find the link below, go 
watch it just after this lecture.  

82

00:08:38,940  -->  00:08:45,840
Second example, we can solve a maze. We can have 
a maze, represented by a grid of 0s and 1s, and  

83

00:08:45,840  -->  00:08:51,840
we can apply dfs or bfs to find the way of going 
from the top-left cell to the bottom-right cell.  

84

00:08:56,400  -->  00:09:00,720
Last thing I wanted to mention for this 
lecture is that, this lecture is named  

85

00:09:00,720  -->  00:09:07,260
dfs and bfs in implicit graphs, the goal is 
to understand that graphs we work on are not  

86

00:09:07,260  -->  00:09:13,380
always defined by using an adjacency list or an 
adjacency matrix, the important is to know how  

87

00:09:13,380  -->  00:09:19,020
is a vertex represented and how to access 
neighbors. We gave an example with a grid,  

88

00:09:19,020  -->  00:09:27,840
but it's not the only case, we will discover other 
implicit graphs in future lectures. I hope that  

89

00:09:27,840  -->  00:09:33,000
you understood this lecture, and I'll let you 
with this animation of dfs and bfs in a grid.  

90

00:10:11,280  -->  00:10:13,020
See you in the next lecture.
