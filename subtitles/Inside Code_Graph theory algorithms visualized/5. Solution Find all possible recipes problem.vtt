WEBVTT
1

00:00:00.719  -->  00:00:05.830
Welcome back to the course, it's time to practice.
In this lecture we will solve this Leetcode

2

00:00:05.830  -->  00:00:13.929
problem named: Find all possible recipes from
given supplies. We have a list of n recipes.

3

00:00:13.929  -->  00:00:21.310
We also have the ingredients of each of these
recipes in a 2D array ingredients where ingredients[i]

4

00:00:21.310  -->  00:00:27.500
is the array of ingredients of recipes[i].
And we have a list supplies that represents

5

00:00:27.500  -->  00:00:34.510
ingredients we initially have, in infinite
quantity. The goal is to find out what possible

6

00:00:34.510  -->  00:00:41.800
recipes we can prepare and return that list
in any order. Note that recipes can be ingredients

7

00:00:41.800  -->  00:00:49.469
to each other. Here is an example, we have
three recipes: chicken burger, buns, and crispy

8

00:00:49.469  -->  00:00:57.120
chicken. Chicken burger requires buns, crispy
chicken, lettuce, and cheese to be prepared.

9

00:00:57.120  -->  00:01:05.100
Buns require yeast and flour. And crispy chicken
requires chicken and breadcrumbs. And as initial

10

00:01:05.100  -->  00:01:13.780
supplies, we have yeast, flour, cheese, breadcrumbs,
milk, and lettuce. As output, we get the three

11

00:01:13.780  -->  00:01:19.550
recipes, we can prepare them all. We start
by preparing the buns, we add them to supplies

12

00:01:19.550  -->  00:01:26.790
because we can use them later. Yes you have
a portal that can prepare everything. Then

13

00:01:26.790  -->  00:01:31.680
we prepare the crispy chicken, we also add
them to supplies, then we use what we made

14

00:01:31.680  -->  00:01:39.710
to make chickenburger. How to solve this problem?
This problem would have been really easy if

15

00:01:39.710  -->  00:01:46.200
recipes couldn't be ingredients of other recipes,
because we would just need to traverse recipes,

16

00:01:46.200  -->  00:01:51.799
to search for ones whose ingredients are a
subset of supplies. In other words, for each

17

00:01:51.799  -->  00:01:58.030
recipe, if all its ingredients are available,
then we can prepare it. And the traversal

18

00:01:58.030  -->  00:02:06.890
order wouldn't matter, because we have infinite
quantity of supplies. However, in this problem,

19

00:02:06.890  -->  00:02:11.720
recipes can be ingredients to each other.
What does it mean? It means that we may need

20

00:02:11.720  -->  00:02:17.750
to prepare some recipes before moving to other
ones, for example if we have two recipes A

21

00:02:17.750  -->  00:02:25.090
and B and A is an ingredient of B, we'd start
by A, we prepare it, we add it to supplies,

22

00:02:25.090  -->  00:02:31.540
then we'd move to B, to have A available in
our supplies. We deduce that the order we

23

00:02:31.540  -->  00:02:38.450
use to traverse recipes matters here. In our
initial example, let's try to traverse recipes

24

00:02:38.450  -->  00:02:45.659
this way. Buns, we can prepare them, we add
them to our output and to our supplies. Then

25

00:02:45.659  -->  00:02:51.330
chickenburger, crispy chicken is missing,
we cannot prepare it. Then crispy chicken,

26

00:02:51.330  -->  00:02:59.489
we can prepare it, we add it to our output
and to our supplies. We got 2 prepared recipes,

27

00:02:59.489  -->  00:03:06.080
but what if we used this order. Buns, we can
prepare them, we have yeast and flour. Then

28

00:03:06.080  -->  00:03:12.690
crispy chicken, we can prepare it, we have
chicken and breadcrumbs. Then chicken burger,

29

00:03:12.690  -->  00:03:21.489
we can prepare it, we have buns, crispy chicken,
lettuce, and cheese. We've been able to prepare

30

00:03:21.489  -->  00:03:28.489
3 recipes now, by just changing the order.
In this order, buns and crispy chicken, which

31

00:03:28.489  -->  00:03:33.380
are ingredients of chickenburger, came before
it, it's the right thing to do because we

32

00:03:33.380  -->  00:03:39.099
first need to prepare them before being able
to prepare chickenburger, it's like buns and

33

00:03:39.099  -->  00:03:46.220
crispy chicken are prerequisites for chicken
burger. In general, if A and B are recipes

34

00:03:46.220  -->  00:03:54.079
and A is an ingredient of B, then A must come
before B in the ordering. Prerequisites, must

35

00:03:54.079  -->  00:03:59.989
come before, ordering, we're obviously talking
about topological sort, we want a topological

36

00:03:59.989  -->  00:04:08.430
sort of recipes to know how to traverse them.
But as input, we don't have a graph, we just

37

00:04:08.430  -->  00:04:14.140
have the list of recipes, ingredients, and
supplies. This is why we first need to build

38

00:04:14.140  -->  00:04:22.100
the graph, then use topological_sort on it.
We will have a graph where vertices are recipes,

39

00:04:22.100  -->  00:04:28.220
and an edge from u to v means that u is in
ingredients of v so it must come before it.

40

00:04:28.220  -->  00:04:33.600
To build this graph, we start by creating
a vertex of each recipe, then for each couple

41

00:04:33.600  -->  00:04:40.910
of recipes (u,v), if u is in ingredients[v],
we add an edge from u to v. After building

42

00:04:40.910  -->  00:04:47.201
it, we just call topological_sort on it, and
we get the ordering we're searching for. Then

43

00:04:47.201  -->  00:04:52.419
starting from here, we can apply the strategy
we talked about at the beginning, we traverse

44

00:04:52.419  -->  00:04:58.729
recipes in the right order, for each recipe,
if its ingredients are a subset of supplies,

45

00:04:58.729  -->  00:05:06.111
we prepare it and add it to supplies, to be
able to use it for further recipes. Let's

46

00:05:06.111  -->  00:05:12.440
implement all of this. Our function takes
as parameters the list of recipes, the 2D

47

00:05:12.440  -->  00:05:18.860
list of ingredients, and the list of supplies.
But lists might not be the best structure

48

00:05:18.860  -->  00:05:25.720
to work with, let's convert them. We want
to find the ingredients of a recipe by its

49

00:05:25.720  -->  00:05:31.470
name, so we need a hash table, and we want
to check if ingredients are a subset, so it's

50

00:05:31.470  -->  00:05:37.490
better to have lists of ingredients as sets
rather than lists. This is why we convert

51

00:05:37.490  -->  00:05:44.940
the array of arrays of ingredients to a hash
table of string to set. ingredients[i] represents

52

00:05:44.940  -->  00:05:49.800
ingredients of recipes[i], so ingredients
becomes a hash table where for each index

53

00:05:49.800  -->  00:05:59.610
i, the key is the recipe's name, recipes[i],
and the value is the ingredients as a set,

54

00:05:59.610  -->  00:06:07.910
set(ingredients[i]). We also convert supplies
to set, for the .issubset() operations. Now

55

00:06:07.910  -->  00:06:13.229
we start building the graph, for that we need
an adjacency list where the key is recipe's

56

00:06:13.229  -->  00:06:19.730
name and the value is the list of recipes
it's an ingredient to. We initially just create

57

00:06:19.730  -->  00:06:27.060
the keys with empty arrays, then we start
filling edges. Now we fill edges, for each

58

00:06:27.060  -->  00:06:34.640
recipe u, for each recipe v, if u is in ingredients[v],
then u must come before v, we add an edge

59

00:06:34.640  -->  00:06:44.639
from u to v, in other words, we add v to outneighbors
of u. We have the graph, we just call topological_sort()

60

00:06:44.639  -->  00:06:50.229
on it to get the ordering, topological_sort()
is the function we made in previous lecture

61

00:06:50.229  -->  00:06:59.349
when we studied the two algorithms, so we
can either use dfs or bfs. Now that we got

62

00:06:59.349  -->  00:07:04.319
the ordering, we create an array where we
put recipes we will prepare, and we traverse

63

00:07:04.319  -->  00:07:10.319
recipes in that order. For each recipe in
ordering, if its ingredients are a subset

64

00:07:10.319  -->  00:07:16.759
of supplies, then we can prepare it, we add
it to prepared and we also add it to supplies,

65

00:07:16.759  -->  00:07:23.851
because now we can use it in next recipes.
After the loop, we just return prepared, the

66

00:07:23.851  -->  00:07:30.740
array of recipes we've been able to prepare.
At this point you think that you're done with

67

00:07:30.740  -->  00:07:36.000
this problem but you hear that something's
coming, it's an obstacle that comes with topological

68

00:07:36.000  -->  00:07:42.570
sort, it's cycles! Nothing says that there
is no cycles in the problem statement, so

69

00:07:42.570  -->  00:07:49.490
we should think about how to handle cycles.
A cycle in this graph means that some recipes

70

00:07:49.490  -->  00:07:55.759
are dependent to each other, for example to
make a recipe B we need the recipe A as ingredient,

71

00:07:55.759  -->  00:08:02.389
to make A we need C, and to make C we need
B. How to handle this? We must be aware that

72

00:08:02.389  -->  00:08:08.650
recipes involved in a cycle can't be prepared,
they need each other so none of them can be

73

00:08:08.650  -->  00:08:15.259
prepared. But not only, even recipes that
are dependent of recipes involved in a cycle

74

00:08:15.259  -->  00:08:22.159
cannot be prepared. Here is an example. We
have this graph of recipes. We have a cycle

75

00:08:22.159  -->  00:08:29.590
made of recipes D G E and H, we deduce that
they can't be prepared. To prepare I, we need

76

00:08:29.590  -->  00:08:36.140
H, which cannot be prepared, we deduce that
I also cannot be prepared, because we will

77

00:08:36.140  -->  00:08:42.690
never have all of the ingredients. Then for
J, same thing, it needs G and H which cannot

78

00:08:42.690  -->  00:08:49.870
be prepared. L, same thing, it needs I and
I cannot be prepared. And same thing for all

79

00:08:49.870  -->  00:08:57.040
of these recipes. If you remember, in the
last lecture when we were discussing Kahn's

80

00:08:57.040  -->  00:09:02.860
algorithm, when we had a cycle, the process
stopped because the queue became empty, even

81

00:09:02.860  -->  00:09:09.160
if we didn't finish all vertices. But if you
have a look at ordering, it wasn't empty,

82

00:09:09.160  -->  00:09:15.050
we had some vertices that we could finish.
In our problem, vertices that enter ordering

83

00:09:15.050  -->  00:09:20.810
before the process stops represent recipes
we can potentially prepare. So the idea is

84

00:09:20.810  -->  00:09:26.440
that we apply the process normally, and as
soon as it stops, we don't care about remaining

85

00:09:26.440  -->  00:09:31.959
recipes because we know that they can't be
prepared, they're either involved in a cycle

86

00:09:31.959  -->  00:09:37.910
or dependent on a recipe that is involved
in a cycle, so we work with recipes that entered

87

00:09:37.910  -->  00:09:46.000
the ordering only. For example with this graph,
this is what we get. Green vertices are recipes

88

00:09:46.000  -->  00:09:52.990
we can potentially prepare, they didn't get
affected by existence of cycles. To implement

89

00:09:52.990  -->  00:09:58.000
it, in the topological_sort() function, we
just don't return an empty array when we find

90

00:09:58.000  -->  00:10:03.850
a cycle, we return it as it is, because we
need those vertices, even if the ordering

91

00:10:03.850  -->  00:10:12.420
isn't complete. Our solution now handles cycles,
even if we have a cycle, topological_sort()

92

00:10:12.420  -->  00:10:20.100
will return only recipes that can potentially
be prepared. For the time complexity, we put

93

00:10:20.100  -->  00:10:25.450
n as the number of recipes, m as the sum of
number of ingredients of each recipe, and

94

00:10:25.450  -->  00:10:31.100
k as the number of initial supplies. We start
by converting ingredients to a hash table

95

00:10:31.100  -->  00:10:37.950
of sets, which requires us to traverse all
ingredients, the cost is m. Then we convert

96

00:10:37.950  -->  00:10:45.230
supplies to a set, it costs k. Then we create
a graph of n vertices, one for each recipe,

97

00:10:45.230  -->  00:10:53.861
the cost is n. After it, we fill the edges,
the outer loop traverses recipes, n iterations,

98

00:10:53.861  -->  00:10:59.200
the inner loop traverses recipes, n iterations,
and checking if u is in ingredients[v] costs

99

00:10:59.200  -->  00:11:06.410
O(1) in average, because we're working with
sets. So the cost of filling edges is n².

100

00:11:06.410  -->  00:11:14.209
Then, we call topological_sort(), which has
a cost in O(|V|+|E|) as explained in previous

101

00:11:14.209  -->  00:11:22.240
lectures. |V| here is the number of recipes,
n, and |E| is the number of dependencies between

102

00:11:22.240  -->  00:11:30.290
recipes, which cannot exceed m. Last step,
we traverse ordering. Ordering has at most

103

00:11:30.290  -->  00:11:37.380
n elements inside it, the loop does n iterations.
And checking if ingredients[recipe] is a subset

104

00:11:37.380  -->  00:11:49.620
of supplies, has a cost of k, the number of
supplies. As a total cost, we 

105

00:11:49.620  -->  00:11:57.770
have T(n,m,k) = m+k+n+n²+n+m+nk, which is
in O(n²+nk+m) time complexity. And for the

106

00:11:57.770  -->  00:12:05.270
space complexity, we have m for ingredients,
k+n for supplies, n+m for the graph, n for

107

00:12:05.270  -->  00:12:13.760
ordering, and n for prepared. supplies and
graph may not be clear, let me explain. supplies

108

00:12:13.760  -->  00:12:20.090
initially has k elements, and in the last
loop we add to it at most n recipes, remember

109

00:12:20.090  -->  00:12:27.620
that when prepare a recipe we add it to supplies,
the total is k+n. And for the graph, an adjacency

110

00:12:27.620  -->  00:12:37.899
list costs |V|+|E| space, here |V| is n and
|E| is at most m. In total we have S(n,m,k)

111

00:12:37.899  -->  00:12:46.820
= 4n+2m+k, which gives a space complexity
of O(n+m+k). We've reached the end of this

112

00:12:46.820  -->  00:12:51.070
practice lecture, I hope that you understood
how we used topological sort to solve this

113

00:12:51.070  -->  00:12:56.920
problem, if you didn't, you can ask me questions.
See you in the next lecture!
