WEBVTT
1

00:00:00.000  -->  00:00:05.580
Welcome to this lecture where we will solve a 
practice problem on MSTs: min cost to connect  

2

00:00:05.580  -->  00:00:16.440
all points, it's the leetcode problem number 
1584. We have a list of 2D points, and we want  

3

00:00:16.440  -->  00:00:23.220
to connect them, we want to have a path from any 
point to any other point, knowing that the cost of  

4

00:00:23.220  -->  00:00:30.300
connecting two points is the Manhattan distance of 
two points, given by this formula. The task is to  

5

00:00:30.300  -->  00:00:36.600
return the minimum cost to perform the connection. 
For example if we have this input, the minimum  

6

00:00:36.600  -->  00:00:43.080
cost to connect all points is 20, by setting links 
like this, you can see the cost of each link.  

7

00:00:45.480  -->  00:00:51.060
This problem reminds us of the problem of 
connecting houses of a network through cables  

8

00:00:51.060  -->  00:00:56.700
with a minimum total length of cables, we talked 
about it in the first lecture of this chapter.  

9

00:00:59.880  -->  00:01:06.480
Here we have the same problem but with 2D points 
instead of houses, and links instead of cables.  

10

00:01:08.040  -->  00:01:12.780
What we did to solve that problem was to find 
the minimum spanning tree of the network,  

11

00:01:12.780  -->  00:01:18.300
so we will do the same thing for this problem, 
we want to find the minimum spanning tree  

12

00:01:18.300  -->  00:01:24.000
and return its sum of weights, because we're 
searching for the cost and not the MST itself.  

13

00:01:25.200  -->  00:01:31.800
But wait, we don't even have a weighted graph, 
we just have a list of 2D points, no edges and  

14

00:01:31.800  -->  00:01:40.440
no weights. In reality, we have a hidden graph. 
Vertices are given points obviously. For edges, we  

15

00:01:40.440  -->  00:01:47.040
can have a link between any two points, so we can 
think of it as a complete graph. And for weights,  

16

00:01:47.040  -->  00:01:52.800
we can calculate the weight of any edge by 
calculating the Manhattan distance between its two  

17

00:01:52.800  -->  00:02:00.180
incident vertices. And from this complete graph, 
we want to extract the minimum spanning tree and  

18

00:02:00.180  -->  00:02:07.620
return the sum of its weights. For that, we apply 
one of the MST algorithms we learnt. And because  

19

00:02:07.620  -->  00:02:14.460
we have a complete graph, then it's very dense, we 
should use Prim's algorithm instead of Kruskal's.  

20

00:02:16.320  -->  00:02:22.080
What we gonna do is to take the code we made for 
Prim's algorithm and adapt it for this problem.  

21

00:02:23.760  -->  00:02:29.340
First we need a function manhattan that 
calculates the Manhattan distance of two points.  

22

00:02:29.340  -->  00:02:35.460
Then in the generic algorithm we have as parameter 
the graph, in this problem we don't have the  

23

00:02:35.460  -->  00:02:43.080
graph, we just have the list of points. We also 
changed the function name. Question, do we have  

24

00:02:43.080  -->  00:02:48.780
to build the graph? The answer is no, we don't 
need to build the graph as long as we know how to  

25

00:02:48.780  -->  00:02:57.720
access neighbors and how to calculate weights. And 
we do, neighbors are all the points except itself  

26

00:02:57.720  -->  00:03:03.660
because we have a complete graph, and weights can 
be calculated with the Manhattan distance formula.  

27

00:03:05.400  -->  00:03:11.700
What do we need to change in this code? First, as 
parameter, we don't have a graph, we have the list  

28

00:03:11.700  -->  00:03:19.260
of points, each point is a vertex. We can add an 
early exit condition here, if we have less than  

29

00:03:19.260  -->  00:03:26.040
2 points, then there is no connection, the cost 
is 0, we return 0, it's to handle the edge case.  

30

00:03:27.300  -->  00:03:32.700
And because vertices will later represent 
keys of hash tables we will use, we need  

31

00:03:32.700  -->  00:03:39.000
to make sure that a point is hashable. A point is 
currently represented with an array of 2 elements,  

32

00:03:39.000  -->  00:03:45.360
and arrays are not hashable, this is why we 
convert them to tuples, tuples are hashable.  

33

00:03:46.500  -->  00:03:50.520
Also, in this problem we're not 
interested by the mst itself,  

34

00:03:50.520  -->  00:03:57.780
we're just interested by its total cost, this is 
why we add a variable total cost initialized to 0.  

35

00:03:58.680  -->  00:04:03.360
For start vertex, we can just put the 
first point of the list, points[0].  

36

00:04:05.580  -->  00:04:11.220
What can we also change? In the loop we need 
to traverse points, we don't have a graph,  

37

00:04:11.220  -->  00:04:18.900
we write for u in points. And when we add the edge 
in the mst, we also add the cost to total_cost,  

38

00:04:18.900  -->  00:04:24.960
it's what we're searching for. Also, neighbors 
of u are just the points of our list,  

39

00:04:24.960  -->  00:04:31.140
and they don't contain the weight. So instead 
of traversing the tuple (v, w) in graph[u],  

40

00:04:31.140  -->  00:04:36.720
we traverse points v, and for the weight, 
we calculate it with the manhattan function.  

41

00:04:39.480  -->  00:04:44.280
Last thing to changed, instead of 
returning the mst, we return total_cost.  

42

00:04:45.240  -->  00:04:52.080
And we adapted Prim's algorithm for 
this problem. For the time complexity,  

43

00:04:52.080  -->  00:04:58.920
we're just applying Prim's algorithm, which 
has an O(|E|+|V|log|V|) time complexity.  

44

00:05:02.760  -->  00:05:10.380
Here |V| is the number of points, n, 
and |E| is in O(|V|²), which is O(n²),  

45

00:05:11.100  -->  00:05:18.480
because we're working on a complete graph. We 
replace, and we get an O(n²) time complexity.  

46

00:05:21.180  -->  00:05:25.500
We've reached the end of this lecture, I hope 
that you understood minimum spanning trees,  

47

00:05:25.500  -->  00:05:30.720
how to find them, and how we can use them to 
solve a problem. See you in the next lecture!
