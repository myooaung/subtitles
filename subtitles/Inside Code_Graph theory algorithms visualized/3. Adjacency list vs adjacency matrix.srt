1

00:00:00,000  -->  00:00:04,560
In previous lectures, we learnt about 
two main ways of implementing a graph:  

2

00:00:04,560  -->  00:00:09,960
the adjacency list and the adjacency 
matrix. We ended with an important question:  

3

00:00:09,960  -->  00:00:16,680
which one to choose when we want to implement a 
graph? I think that a comparison between them is  

4

00:00:16,680  -->  00:00:22,080
necessary here to decide. We will compare them 
in terms of time and space resources obviously.  

5

00:00:23,580  -->  00:00:29,880
To measure resources used by a graph, whether to 
store it or to perform operations on it, we have  

6

00:00:29,880  -->  00:00:37,440
two important values to take into consideration, 
we have |V|, the number of vertices, and |E|,  

7

00:00:37,440  -->  00:00:43,560
the number of edges, we will use them a lot when 
measuring time and space complexity of algorithms  

8

00:00:43,560  -->  00:00:50,820
we will study. Let's start with space usage. 
For an adjacency list, we have a hash table  

9

00:00:50,820  -->  00:00:58,200
whose keys are vertices, we deduce that the number 
of keys is equal to the number of vertices, |V|.  

10

00:00:59,160  -->  00:01:03,600
And for the size of the arrays, I'll try 
to make you find the answer by yourself.  

11

00:01:04,680  -->  00:01:10,260
Here we have a graph and its adjacency list, 
now count the number of edges of the graph,  

12

00:01:10,260  -->  00:01:15,780
count the sum of sizes of the arrays in the 
adjacency list, and tell me what do you notice.  

13

00:01:17,160  -->  00:01:24,000
In the graph, we have 8 edges, and in the 
adjacency list, the size of the first array is 1,  

14

00:01:24,000  -->  00:01:30,960
the size of the second one is 3, and so 
on. If we do the sum, we find 8. We can  

15

00:01:30,960  -->  00:01:36,480
notice that the sum of sizes of arrays is 
equal to the number of edges, why is that?  

16

00:01:37,020  -->  00:01:42,660
It's because every time we add an edge (u,v) 
in the graph, we insert v in neighbors of u,  

17

00:01:42,660  -->  00:01:49,320
so one of the arrays' size increases by 
1, which increases the total size by 1.  

18

00:01:49,320  -->  00:01:55,620
And this is why the sum of sizes is equal to 
the number of edges, each edge adds 1 to the  

19

00:01:55,620  -->  00:02:03,720
sum. In total, we have |V| for the keys, and |E| 
for the values, we get a space usage of |V|+|E|.  

20

00:02:06,120  -->  00:02:11,940
Note that this is for directed graphs, because 
for undirected graphs, remember that when we add  

21

00:02:11,940  -->  00:02:18,480
an edge (u,v), we add v in neighbors of u, but 
we also add u in neighbors of v. So each edge  

22

00:02:18,480  -->  00:02:25,200
adds 2 to the sum, this is why the sum of sizes 
will be 2|E| as you can see in this example.  

23

00:02:26,040  -->  00:02:34,620
But not a big deal, both |V|+|E| 
and |V|+2|E| are in O(|V|+|E|),  

24

00:02:34,620  -->  00:02:40,560
we can say that the space complexity 
of the adjacency list is O(|V|+|E|).  

25

00:02:42,900  -->  00:02:48,600
What about the adjacency matrix now? In the 
adjacency matrix, we create a matrix of size  

26

00:02:49,200  -->  00:02:56,940
|V|x|V|, which is |V|². This is why the space 
complexity of an adjacency matrix is O(|V|²),  

27

00:02:58,200  -->  00:03:04,620
the number of edges doesn't affect the size, 
whether we have 0 edges or an edge between each  

28

00:03:04,620  -->  00:03:15,000
pair of vertices, the necessary space remains 
the same, |V|². Which one is better? O(|V|+|E|)  

29

00:03:15,000  -->  00:03:22,200
of the adjacency list or O(|V|²) of the adjacency 
matrix? You need to know that in a simple graph,  

30

00:03:22,200  -->  00:03:31,320
the maximum number of edges is |V|(|V|-1), because 
we have |V| vertices, and each one of them can  

31

00:03:31,320  -->  00:03:37,200
have an edge with the other |V|-1 vertices, 
which is the case with the complete graph.  

32

00:03:38,700  -->  00:03:45,000
Look at this example, we have 5 vertices, the 
first vertex has 4 neighbors, the second vertex  

33

00:03:45,000  -->  00:03:57,840
has 4 neighbors, and so on. So in the worst case, 
|E| is |V|(|V|-1), which is |V|²-|V|. We replace,  

34

00:03:57,840  -->  00:04:06,300
we get O(|V|²) for the adjacency list, same as 
for the adjacency matrix. But in the best case,  

35

00:04:06,300  -->  00:04:13,920
we have no edges, |E| is 0, we get O(|V|) for 
adjacency list, which is way better than O(|V|²).  

36

00:04:19,020  -->  00:04:24,120
The reason behind all of that is that 
the adjacency matrix needs space for all  

37

00:04:24,120  -->  00:04:29,460
possible edges, even non-existing ones, 
this is why it's not space-efficient.  

38

00:04:30,540  -->  00:04:36,360
But an adjacency list needs space for existing 
edges only, which is better in terms of space.  

39

00:04:37,500  -->  00:04:44,220
However, one important detail: A cell in the 
adjacency matrix stores the value 0 or 1,  

40

00:04:44,220  -->  00:04:50,640
which means that 1 bit is enough. Where a cell in 
the adjacency list stores the label of a vertex,  

41

00:04:50,640  -->  00:04:56,280
which requires 32 bits if we're dealing with 
integers and using an array representation.  

42

00:04:57,900  -->  00:05:03,780
In brief, in terms of space, an adjacency list 
is more efficient if the graph is sparse enough,  

43

00:05:03,780  -->  00:05:07,080
otherwise the adjacency matrix is better.  

44

00:05:09,660  -->  00:05:15,660
Next point of comparison, main operations. 
We have the operation of adding a vertex.  

45

00:05:15,660  -->  00:05:21,480
For the adjacency list, we just add a key with an 
empty array, which has an O(1) time complexity,  

46

00:05:22,320  -->  00:05:26,580
adding a key in a hash table has 
an O(1) time complexity in average.  

47

00:05:28,320  -->  00:05:35,280
But for the adjacency matrix, it depends if the 
structure is static or dynamic. If it's static, we  

48

00:05:35,280  -->  00:05:42,060
have to create a new one from scratch, which costs 
O(|V|²) time, because we have to create a new one.  

49

00:05:42,660  -->  00:05:49,620
And if it's dynamic, we just need to add a row 
and a column of size |V|, which costs O(|V|) time.  

50

00:05:51,360  -->  00:05:58,080
Next operation, removing a vertex. With an 
adjacency list, we said that we delete the key,  

51

00:05:58,080  -->  00:06:03,480
but we also traverse other vertices to delete 
all edges going to the vertex we want to delete.  

52

00:06:04,200  -->  00:06:08,400
This last operation requires us to 
traverse the whole adjacency list,  

53

00:06:08,400  -->  00:06:15,420
which has a size in O(|V|+|E|), remember the 
explanation when we were comparing space usage.  

54

00:06:16,680  -->  00:06:24,000
We can say that deleting a vertex from an 
adjacency list has an O(|V|+|E|) time complexity.  

55

00:06:25,260  -->  00:06:31,080
And for the adjacency matrix, if the structure is 
static, we need to create a new one from scratch,  

56

00:06:31,080  -->  00:06:38,520
which costs O(|V|²) time. And if it's dynamic, 
we need to swap the ith row with the last row  

57

00:06:38,520  -->  00:06:45,360
and delete the last row, which costs O(|V|) 
time, then swap the ith cell with the last cell  

58

00:06:45,360  -->  00:06:52,380
and popping for each row, which costs O(|V|) 
time. So deleting a vertex costs O(|V|) time.  

59

00:06:54,060  -->  00:06:58,020
Next operation, adding an 
edge. For the adjacency list,  

60

00:06:58,020  -->  00:07:03,720
we have to access the array of neighbors of the 
source vertex, which costs O(1) time in average,  

61

00:07:03,720  -->  00:07:09,420
then adding the destination vertex to the 
array, which costs O(1) time amortized.  

62

00:07:09,420  -->  00:07:15,180
We can say that adding an edge in adjacency 
lists costs O(1) amortized time in average.  

63

00:07:16,740  -->  00:07:22,740
And for the adjacency matrix, we just have to put 
1 in the cell at row source at column destination,  

64

00:07:22,740  -->  00:07:29,520
and accessing an element in an array costs O(1) 
time, so adding an edge in an adjacency matrix  

65

00:07:29,520  -->  00:07:38,100
costs O(1) time. Next operation, checking if there 
is an edge from u to v. In an adjacency list,  

66

00:07:38,100  -->  00:07:43,560
we need to traverse neighbors of u, which 
costs O(deg(u)) time in the worst case.  

67

00:07:44,460  -->  00:07:50,520
For an adjacency matrix, we just check 
if matrix[u][v] is 1, it's done in O(1).  

68

00:07:52,080  -->  00:07:58,440
Next operation, deleting an edge. For the 
adjacency list, we need to access the neighbours  

69

00:07:58,440  -->  00:08:04,200
of the source, which costs O(1) time in average. 
Then deleting the destination from the array,  

70

00:08:04,200  -->  00:08:09,780
and deleting an element from an array costs n, 
where n is the number of elements of the array.  

71

00:08:09,780  -->  00:08:19,380
And in a graph, a vertex can have at most |V|-1 
vertices, so deleting costs |V|-1, O(|V|) time.  

72

00:08:20,520  -->  00:08:25,380
We can even be more precise and say that it 
depends on the degree of the source vertex,  

73

00:08:25,380  -->  00:08:29,040
which can be between 0 and |V|-1 inclusive,  

74

00:08:29,580  -->  00:08:34,260
remember that the degree in a simple graph 
represents the number of its neighbors.  

75

00:08:38,040  -->  00:08:43,680
For an adjacency matrix, we just put 
0 in matrix[u][v], which costs O(1).  

76

00:08:47,160  -->  00:08:53,700
Next operation, traversing neighbors of a vertex. 
For an adjacency list, to traverse neighbors of a  

77

00:08:53,700  -->  00:09:00,780
vertex u, we need to traverse the array at key u. 
And the length of this array depends on the number  

78

00:09:00,780  -->  00:09:07,860
of neighbors of u, its degree, which doesn't 
exceed |V|-1, we can say that the time complexity  

79

00:09:07,860  -->  00:09:16,200
is O(deg(u)). And for the adjacency matrix, 
whether the vertex u has a lot of neighbors,  

80

00:09:16,200  -->  00:09:21,540
a few neighbors, or no neighbors at all, 
we need to traverse the whole row u,  

81

00:09:21,540  -->  00:09:29,160
to find cells where the value is 1, which costs 
O(|V|), remember that the length of a row is |V|.  

82

00:09:30,780  -->  00:09:35,280
Next operation, building the 
structure. For and adjacency list,  

83

00:09:35,280  -->  00:09:41,760
we start by creating a key for each vertex, 
which costs |V| because we have |V| vertices.  

84

00:09:42,360  -->  00:09:48,660
Then we traverse edges to add each one of them. 
We just said that adding an edge in an adjacency  

85

00:09:48,660  -->  00:09:55,980
list costs O(1) time, so the cost of adding 
all the edges is |E|. In total, we get |V|+|E|,  

86

00:09:56,820  -->  00:10:04,080
building the adjacency list from a set of vertices 
and edges has an O(|V|+|E|) time complexity.  

87

00:10:06,120  -->  00:10:11,940
And for the adjacency matrix, we start by 
creating the matrix, which is of size |V|x|V|.  

88

00:10:13,380  -->  00:10:19,200
And creating such a matrix costs 
|V|x|V| obviously, which is |V|².  

89

00:10:20,400  -->  00:10:27,660
Then we traverse edges while adding each one of 
them. Adding an edge in an adjacency matrix costs  

90

00:10:27,660  -->  00:10:37,740
O(1) time, so adding them all costs |E|. In total 
we have |V|²+|E|, and we know that |E| is smaller  

91

00:10:37,740  -->  00:10:43,920
than |V|², we can say that the time complexity 
of building an adjacency matrix is O(|V|²).  

92

00:10:47,340  -->  00:10:52,920
Okay now we measured the space complexity of 
both structures + the time complexity of main  

93

00:10:52,920  -->  00:10:59,820
operations with each one of them. But what is the 
conclusion? Which one to choose? As you can see,  

94

00:10:59,820  -->  00:11:06,900
both have pros and cons, for example adjacency 
matrix is more efficient for adding, checking,  

95

00:11:06,900  -->  00:11:11,100
and removing edges, and space 
efficient when the graph is dense.  

96

00:11:12,960  -->  00:11:18,240
And the adjacency list is more efficient to 
traverse neighbors and building the structure  

97

00:11:18,240  -->  00:11:25,080
for example, so it depends on the problem. But, 
in my opinion, adjacency lists are usually more  

98

00:11:25,080  -->  00:11:30,180
preferred, because they're more efficient for 
traversing the graph, a very important operation,  

99

00:11:30,180  -->  00:11:36,660
we'll see it in the next chapter. This is why 
in this course, in algorithms we will study,  

100

00:11:36,660  -->  00:11:44,160
we will use almost exclusively an adjacency list 
for implementation. Also, in real world problems,  

101

00:11:44,160  -->  00:11:49,980
graphs are usually sparse, and an adjacency 
list is more suited for sparse graphs.  

102

00:11:52,320  -->  00:11:56,220
We've reached the end of this lecture 
where we had a comparison between space  

103

00:11:56,220  -->  00:12:00,240
and time efficiency of adjacency 
lists and adjacency matrices.  

104

00:12:01,020  -->  00:12:07,020
Now get ready to start studying graph algorithms, 
we will start with one of the most important ones:  

105

00:12:07,020  -->  00:12:12,360
depth-first search, aka DFS. 
See you in the next lecture!
