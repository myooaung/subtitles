WEBVTT
1

00:00:00.000  -->  00:00:04.080
In a graph, we can have multiple 
paths between the same two vertices.  

2

00:00:04.740  -->  00:00:09.900
For example between these two vertices, we 
can have this path, this path, this path,  

3

00:00:09.900  -->  00:00:17.340
and many other ones. But, they differ in length, 
for example the length of the first one is 5,  

4

00:00:17.340  -->  00:00:21.600
the length of second one is 2, and 
the length of the third one is 3.  

5

00:00:22.860  -->  00:00:29.820
Note that the length of a path is the number of 
edges it passes from. And given an integer n that  

6

00:00:29.820  -->  00:00:36.960
represents the number of vertices, labeled from 
0 to n-1, an array edges of undirected edges, a  

7

00:00:36.960  -->  00:00:43.020
vertex start and a vertex end, we want to find the 
minimum number of edges to go from start to end.  

8

00:00:43.920  -->  00:00:52.500
If it's not possible to go from start to end, 
return -1. In a previous lecture, we solved the  

9

00:00:52.500  -->  00:00:58.500
problem of checking if a vertex is reachable from 
another vertex, we solved it by using depth-first  

10

00:00:58.500  -->  00:01:05.160
search. We can think of using the same solution, 
we just slightly change the code, to count the  

11

00:01:05.160  -->  00:01:10.980
number of traversed edges before we reach the end 
vertex, and we get a solution for this problem.  

12

00:01:13.380  -->  00:01:19.380
But it's not a valid solution, simply because dfs 
guarantees to find a vertex when it's reachable,  

13

00:01:19.380  -->  00:01:24.840
which was enough for the previous problem, 
but doesn't guarantee to reach it by using  

14

00:01:24.840  -->  00:01:28.920
as few edges as possible, which is 
what we want to do for this problem.  

15

00:01:30.540  -->  00:01:36.660
Let me show you an example, we have this graph, 
start is A, and end is H. We start from A.  

16

00:01:37.260  -->  00:01:43.500
We're applying depth-first search by the way. 
We start from A. Its neighbors are B E F and C,  

17

00:01:43.500  -->  00:01:49.860
we go to B. Its neighbors are D E and A, 
we go to D. Neighbors of D are G E and B,  

18

00:01:49.860  -->  00:01:57.000
we go to G. Neighbors of G are D E F H and 
J, we go to H. We found the end vertex,  

19

00:01:57.000  -->  00:02:02.400
so our function would return 4, the number 
of edges we traversed before reaching end.  

20

00:02:03.660  -->  00:02:09.600
Which is not the right output, because we have 
a path that reaches end with 2 edges only.  

21

00:02:10.260  -->  00:02:16.200
We deduce that dfs, when used this way at 
least, doesn't always give us the right answer.  

22

00:02:19.500  -->  00:02:22.980
The right algorithm to use 
for this problem is bfs.  

23

00:02:23.760  -->  00:02:31.320
Why bfs? Bfs traverses vertices level by level. 
It means that it traverses vertices that are at a  

24

00:02:31.320  -->  00:02:37.920
distance of 0 from where we start, then those at a 
distance of 1, then at a distance of 2, and so on.  

25

00:02:38.880  -->  00:02:44.640
Which implies the fact that when we step on a 
vertex for the first time, its level is guaranteed  

26

00:02:44.640  -->  00:02:51.120
to represent the minimum number of edges to reach 
it. For example in this graph, at level 0 we had  

27

00:02:51.120  -->  00:02:59.100
A, it means that we need at least 0 edges to reach 
A from A. Then at level 1 we had B C D, it means  

28

00:02:59.100  -->  00:03:07.020
that we need at least 1 edge to reach B or C 
or D from A. Then at level 2 we had E F H I J,  

29

00:03:07.020  -->  00:03:12.840
it means that we need at least 2 edges to reach 
them from A. And so on for remaining vertices.  

30

00:03:13.680  -->  00:03:19.260
So to solve this problem, we apply breadth-first 
search starting from start, and as soon as we find  

31

00:03:19.260  -->  00:03:24.360
end, we return its level, because it represents 
the minimum number of edges to reach it,  

32

00:03:24.360  -->  00:03:30.900
we cannot find a shorter path, because otherwise 
we would have found end in previous levels.  

33

00:03:33.720  -->  00:03:39.660
And if after performing bfs we don't find end, it 
means that end is not reachable at all from start,  

34

00:03:39.660  -->  00:03:48.540
we return -1. Okay but how to implement this? 
In the solution explanation it's said that as  

35

00:03:48.540  -->  00:03:53.220
soon as we find end, we return its level, 
but how to know the level of a vertex?  

36

00:03:53.820  -->  00:03:58.500
To maintain levels of vertices, instead 
of storing the vertex only in the queue,  

37

00:03:58.500  -->  00:04:05.160
we store a tuple that contains the vertex and 
its level. The initial vertex has a level of 0,  

38

00:04:05.160  -->  00:04:10.980
then every time we enqueue a neighbor, we take 
the level of the actual vertex and we add 1.  

39

00:04:12.540  -->  00:04:19.500
For example here we start from A, its level is 
0. It unlocks B, C, D, their level is the level  

40

00:04:19.500  -->  00:04:28.440
of A + 1, 0+1, which is 1. Then we move to B, it 
unlocks two new vertices E and F, their level is  

41

00:04:28.440  -->  00:04:36.000
the level of B + 1, 1+1, which is 2. Then we move 
to C, it doesn't unlock anything. Then we move to  

42

00:04:36.000  -->  00:04:43.800
D, it unlocks three new vertices H I and J, their 
level is the level of D + 1, 1+1, which is 2.  

43

00:04:44.460  -->  00:04:52.500
Then we move to E, it unlocks K, its level is 
the level of E + 1, 2+1, which is 3. And so on.  

44

00:04:54.600  -->  00:05:00.900
In code, we build the graph as we did path exists 
with dfs, and we create the queue and the visited  

45

00:05:00.900  -->  00:05:07.740
set. In the queue now, initially we store a tuple 
that contains the initial vertex, and 0, its  

46

00:05:07.740  -->  00:05:14.340
level. Then while the queue still has elements, we 
extract two things now, the vertex and the level.  

47

00:05:15.180  -->  00:05:18.540
We pop once from the queue but 
it's a tuple of 2 elements,  

48

00:05:18.540  -->  00:05:21.600
we can put them in two variables vertex and level.  

49

00:05:22.800  -->  00:05:28.260
Here we check, we check if the vertex we popped 
is the one we're searching for, because if it's  

50

00:05:28.260  -->  00:05:33.900
the case, we return its level, it represents the 
minimum number of edges to go from start to it.  

51

00:05:34.980  -->  00:05:41.340
If it's not the case, we continue working, for 
each neighbor, if it's not visited, we enqueue.  

52

00:05:41.340  -->  00:05:47.640
But now we don't enqueue the neighbor only, we 
also enqueue its level. This is why we enqueue  

53

00:05:47.640  -->  00:05:54.300
a tuple of 2 elements, neighbor, and level+1. 
Level represents the level of the actual vertex,  

54

00:05:54.300  -->  00:06:00.420
so the new unvisited vertex, the neighbor, is 
at the next level, this is why we write level+1.  

55

00:06:02.100  -->  00:06:09.360
And we put neighbor in visited obviously. After 
the loop, if the function didn't return a result  

56

00:06:09.360  -->  00:06:15.000
yet it means that we didn't find end, we 
return -1, as required by the problem.  

57

00:06:18.360  -->  00:06:24.240
For the time complexity, we're creating an array 
of n elements, then we're traversing m edges to  

58

00:06:24.240  -->  00:06:31.020
fill the adjacency list, where m is the number of 
edges, then we're using breadth-first search once.  

59

00:06:31.620  -->  00:06:37.020
And when using bfs once, we don't have the 
cost of traversing the vertices, which is n,  

60

00:06:37.020  -->  00:06:43.500
we just have the cost of iterations of the while 
loop, which is in O(|E|), O(m) in this problem,  

61

00:06:43.500  -->  00:06:51.840
as explained previously. The total is 
n+m+O(m), we get O(n+m) time complexity.  

62

00:06:54.000  -->  00:06:59.100
And for the space complexity, in the 
worst case, we have n+m for the graph,  

63

00:06:59.100  -->  00:07:04.740
2n for the size of the queue, because we store 
n tuples of 2 elements, n for the size of the  

64

00:07:04.740  -->  00:07:12.300
visited set, in total we have 4n+m, this 
solution has an O(n+m) space complexity.  

65

00:07:15.240  -->  00:07:20.400
We've come to the end of this lecture, we've 
seen a problem where we compared dfs and bfs,  

66

00:07:20.400  -->  00:07:24.000
and we've seen why bfs is more 
suitable for this problem.  

67

00:07:25.020  -->  00:07:29.760
If you didn't understand something, ask 
questions, and see you in the next one.
