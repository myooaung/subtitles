1

00:00:00,000  -->  00:00:02,340
With all algorithms we've seen in this chapter,  

2

00:00:02,340  -->  00:00:07,920
we worked with weighted graphs. So we may ask 
ourselves, what if the graph is unweighted?  

3

00:00:10,920  -->  00:00:16,020
We defined the shortest path problem as the 
problem of finding the shortest path between  

4

00:00:16,020  -->  00:00:21,660
two vertices, where the shortest path is the 
one with the smallest sum of weights of edges.  

5

00:00:22,800  -->  00:00:27,780
But with an unweighted graph, we have 
no notion of weight, so how can we find  

6

00:00:27,780  -->  00:00:35,760
the shortest path? How can we compare paths to 
take the shortest one? In an unweighted graph,  

7

00:00:35,760  -->  00:00:41,820
we can define the shortest path as the path with 
the fewest number of edges, so in this graph,  

8

00:00:41,820  -->  00:00:48,420
the shortest path from A to K is this one, it 
has only 3 edges while other ones have more.  

9

00:00:50,700  -->  00:00:56,280
Okay but how to find that path? We can think 
of an unweighted graph as a special case of  

10

00:00:56,280  -->  00:01:02,280
a weighted graph where the value of all edges 
is 1, because moving a vertex to another has  

11

00:01:02,280  -->  00:01:09,000
a weight of 1, we're adding 1 edge to 
our path. If we think of it like that,  

12

00:01:09,000  -->  00:01:14,820
what we can do is to convert our unweighted graph 
to a weighted graph by putting 1 in all edges,  

13

00:01:14,820  -->  00:01:21,000
and we use algorithms we've studied before. 
We can for example use Dijkstra's algorithm,  

14

00:01:21,000  -->  00:01:27,480
as it's fast and here all edges have a 
non-negative weight so it's safe to use it. We  

15

00:01:27,480  -->  00:01:35,460
would get a time complexity of O(|E|+|V|log|V|), 
the time complexity of using Dijkstra's algorithm.  

16

00:01:38,340  -->  00:01:42,960
But with an unweighted graph, to find 
the shortest path, we can use a faster  

17

00:01:42,960  -->  00:01:49,320
and simpler algorithm. It's an algorithm that 
we studied before, it's breadth-first search.  

18

00:01:50,760  -->  00:01:56,820
The reason behind it is that BFS starts by 
traversing vertices that are 0 edges away from the  

19

00:01:56,820  -->  00:02:02,340
source, then vertices that are 1 edge away, then 
those that are 2 edges away, then 3 edges away,  

20

00:02:02,340  -->  00:02:10,020
and so on, breadth-first search traverses level 
by level. It means that once we reach a vertex,  

21

00:02:10,020  -->  00:02:16,200
we're sure that we used as few edges as possible 
to reach it, hence, we found the shortest path.  

22

00:02:18,780  -->  00:02:24,180
We did something similar in the BFS practice 
lecture, we were searching for the fewest number  

23

00:02:24,180  -->  00:02:31,140
of edges to go from source to destination, 
and return -1 if not possible. But here we  

24

00:02:31,140  -->  00:02:37,140
want to also get the path and not just the 
distance, for every vertex not just for one.  

25

00:02:38,520  -->  00:02:44,700
For that, we will also use a table dist 
and a table prev, dist[v] represents  

26

00:02:44,700  -->  00:02:50,100
the minimum number of edges to reach v, and 
prev[v] represents the previous vertex of v.  

27

00:02:51,540  -->  00:02:56,940
With this graph, we create dist and prev, 
the queue, the visited set, and we start.  

28

00:02:58,740  -->  00:03:03,960
The queue and the visited set initially 
contain the source vertex, A in this example.  

29

00:03:04,620  -->  00:03:08,400
But in this problem we need 
the vertex, but also its level,  

30

00:03:08,400  -->  00:03:13,140
because its level also represents the 
minimum number of edges to reach it from A.  

31

00:03:14,760  -->  00:03:21,780
A is at level 0 because we need 0 edges to reach 
it, we're already there. We extract it, and we  

32

00:03:21,780  -->  00:03:29,100
check its unvisited neighbors. Its unvisited 
neighbors are B C D. For each neighbor v,  

33

00:03:29,100  -->  00:03:36,060
we put A as its previous vertex, and we put its 
level, which is the level of A + 1, in dist[v].  

34

00:03:38,340  -->  00:03:42,780
We also add it to visited, and we push 
it to the queue with level of A + 1,  

35

00:03:42,780  -->  00:03:49,740
0+1 we get 1, these vertices belong to 
level 1, we need 1 edge to reach them.  

36

00:03:50,880  -->  00:03:57,300
Next element in the queue is B, its level is 1. 
We extract, and we check unvisited neighbors,  

37

00:03:57,300  -->  00:04:04,140
we have I. We put B as its previous vertex, 
we put 2 as its dist, we add it to visited,  

38

00:04:04,140  -->  00:04:09,420
and we push it to the queue. And 
the process continues like that.  

39

00:04:16,020  -->  00:04:22,080
The queue is now empty, we finished the process, 
dist now contains the minimum number of edges to  

40

00:04:22,080  -->  00:04:27,420
reach each vertex from A, and prev contains 
the previous vertex of each vertex if we  

41

00:04:27,420  -->  00:04:34,920
want to reconstruct the path. Let's implement 
this solution. We first create dist and prev,  

42

00:04:35,580  -->  00:04:42,120
dist initially infinity value for all cells and 
prev contains null, same as we did in previous  

43

00:04:42,120  -->  00:04:49,980
algorithms. Then we set dist[src] to 0, because 
we need 0 edges to go from the source to itself.  

44

00:04:51,900  -->  00:04:58,680
We also need the queue and the visited set. The 
queue initially contains a tuple that contains  

45

00:04:58,680  -->  00:05:03,660
the source, because we start from there, 
and its level, the level of the source is 0.  

46

00:05:05,340  -->  00:05:09,840
We also put the source in the visited 
set, remember that we set a vertex as  

47

00:05:09,840  -->  00:05:13,380
visited as soon as it enters the 
queue, which is the case here.  

48

00:05:14,520  -->  00:05:19,680
Now while the queue is not empty, we extract 
the next vertex and its level from the queue.  

49

00:05:20,640  -->  00:05:25,980
And the level of a vertex represents the 
minimum number of edges to reach it from source.  

50

00:05:28,020  -->  00:05:34,680
After it we traverse unvisited neighbors. For each 
neighbor in graph[vertex], if it's not visited,  

51

00:05:34,680  -->  00:05:41,340
then vertex is the first vertex that discovers 
it, we mark that vertex as the previous vertex  

52

00:05:41,340  -->  00:05:45,960
of neighbor, it's the one to follow if we want 
the shortest path from source to neighbor.  

53

00:05:47,940  -->  00:05:55,560
This is why we assign vertex to prev[neighbor]. 
We also assign level+1 to dist[neighbor],  

54

00:05:55,560  -->  00:06:00,600
remember that the level of a neighbor 
is the level of the current vertex + 1.  

55

00:06:02,760  -->  00:06:08,640
We also add neighbor to visited, and we push 
it into the queue, with its level. The level of  

56

00:06:08,640  -->  00:06:14,580
the unvisited neighbor is the level of vertex +1, 
this is why we push the tuple (neighbor, level+1).  

57

00:06:17,100  -->  00:06:21,060
After the loop, dist and prev 
are now filled, we return them.  

58

00:06:22,740  -->  00:06:28,500
And we use the same reconstruct function as for 
Dijkstra's if we want to reconstruct the path.  

59

00:06:31,020  -->  00:06:35,820
For the time complexity, we're 
just performing bfs, and bfs has  

60

00:06:35,820  -->  00:06:41,520
a time complexity of O(|V|+|E|), 
so same thing for this algorithm.  

61

00:06:45,300  -->  00:06:50,580
If you're wondering where this algorithm can be 
used, we can for example think of a grid with  

62

00:06:50,580  -->  00:06:55,680
obstacles, we have a start position, and we 
want the shortest path to go to end position.  

63

00:06:56,640  -->  00:07:00,120
We can use this algorithm by 
considering cells as vertices,  

64

00:07:00,120  -->  00:07:06,300
and we put an edge between each two adjacent 
free cells. And the minimum number of edges  

65

00:07:06,300  -->  00:07:13,320
from start to end represents the minimum number 
of moves. We've reached the end of this lecture.  

66

00:07:13,320  -->  00:07:19,080
If you didn't understand something, you can 
ask questions, see you in the next lecture.
