WEBVTT
1

00:00:00.060  -->  00:00:05.400
Welcome to this lecture where we will 
solve the leetcode problem number 332:  

2

00:00:05.400  -->  00:00:11.700
Reconstruct itinerary. Imagine 
that we have a list of airline  

3

00:00:11.700  -->  00:00:16.260
tickets where each ticket contains the 
departure and the arrival airports.  

4

00:00:16.860  -->  00:00:23.640
It turns out that all these tickets form one big 
itinerary of a man who departs from "JFK" airport.  

5

00:00:24.660  -->  00:00:32.460
The goal is to reconstruct this itinerary. Note 
that there is at least one valid itinerary, and if  

6

00:00:32.460  -->  00:00:38.040
there are multiple valid itineraries, return the 
one that has the smallest lexicographical order,  

7

00:00:38.760  -->  00:00:46.080
for example if we have ["JFK", "ABC", "BAC"] 
and ["JFK", "BAC", "ABC"], return the first one.  

8

00:00:48.180  -->  00:00:54.540
Here is an example, we have this list of tickets, 
and when reconstructing itinerary, we get this  

9

00:00:54.540  -->  00:01:01.500
result. There are other possibilities, but 
this one is the lexicographically smallest one.  

10

00:01:03.360  -->  00:01:09.120
How to solve this problem? A ticket can be 
thought as a connection from an airport to  

11

00:01:09.120  -->  00:01:14.280
another one, and every time we have a list 
of couples that may represent connections,  

12

00:01:14.280  -->  00:01:21.660
we can think of representing them with a graph. 
In our case, a vertex represents an airport,  

13

00:01:21.660  -->  00:01:29.820
and an edge represents a flight, or ticket. Here 
edges are directed because the ticket goes from  

14

00:01:29.820  -->  00:01:38.880
a destination u to another one v, the opposite 
isn't true. With our example, we got this graph.  

15

00:01:40.500  -->  00:01:47.040
What to do with this graph now? We know that 
our itinerary starts from "JFK". And it should  

16

00:01:47.040  -->  00:01:52.500
include all flights, but it shouldn't include 
the same flight twice, tickets are unique.  

17

00:01:53.760  -->  00:01:57.960
At this point you should start 
understanding how we will solve the problem.  

18

00:01:58.680  -->  00:02:05.040
Here flights are represented with edges, so an 
itinerary will be represented by an ordering of  

19

00:02:05.040  -->  00:02:10.320
tickets such that for each two consecutive 
tickets, the destination of the first one  

20

00:02:10.320  -->  00:02:16.560
is the departure airport of the second one. Or 
simply the sequence of airports we pass from.  

21

00:02:19.620  -->  00:02:26.460
And flights are represented with edges, therefore, 
we want an ordering of edges such that each two  

22

00:02:26.460  -->  00:02:32.820
consecutive edges are adjacent, we pass from 
each edge exactly once, and we start from "JFK".  

23

00:02:33.900  -->  00:02:39.480
You've guessed it, this is nothing but the 
Eulerian trail of the graph that starts from  

24

00:02:39.480  -->  00:02:45.360
the vertex "JFK", we will solve the problem 
by finding the Eulerian trail of this graph,  

25

00:02:45.360  -->  00:02:49.980
by using the Hierholzer's algorithm 
we learnt in the previous lecture.  

26

00:02:52.260  -->  00:02:57.660
One last thing, if there are multiple valid 
itineraries, which is totally possible,  

27

00:02:57.660  -->  00:03:01.680
we should return the one with the 
smallest lexicographical order,  

28

00:03:02.340  -->  00:03:08.760
how to do so? This issue has to do with 
the order we traverse neighbors with.  

29

00:03:08.760  -->  00:03:14.100
To get the smallest lexicographical order, we 
should not traverse neighbors in any order,  

30

00:03:14.100  -->  00:03:19.440
we should traverse them from the one with the 
smallest lexicographical to the biggest one,  

31

00:03:20.160  -->  00:03:28.200
this is why we should sort neighbors of each 
vertex before we start working. But, remember that  

32

00:03:28.200  -->  00:03:33.660
we're choosing the next neighbor from the end of 
the list, not from the beginning, so we sort them  

33

00:03:33.660  -->  00:03:39.480
in lexicographical order but in decreasing 
order, to get the smallest one at the end.  

34

00:03:41.880  -->  00:03:47.160
Let's implement this. Our function takes 
as parameter the list of tickets only.  

35

00:03:47.820  -->  00:03:54.060
First we need to build the graph. We create an 
empty graph, and for each ticket (start, end),  

36

00:03:54.060  -->  00:04:01.800
we add a directed edge from start to end. Then we 
can check if the graph is at least semi-Eulerian,  

37

00:04:01.800  -->  00:04:07.860
to see if we can find an itinerary, but no 
need to, it is mentioned in the description  

38

00:04:07.860  -->  00:04:14.400
that we have at least one. Now we sort 
neighbors of each vertex u in reverse order,  

39

00:04:14.400  -->  00:04:20.160
we traverse vertices u, for each one of 
them we sort graph[u] in reverse order.  

40

00:04:22.260  -->  00:04:28.260
We don't need to precise a key because Python 
sorts strings in lexicographical order by default.  

41

00:04:29.820  -->  00:04:35.580
Last thing to do, we just call hierholzer 
function and return the result, that's it.  

42

00:04:37.620  -->  00:04:42.180
By the way, for the start vertex, 
we can modify hierholzer function  

43

00:04:42.180  -->  00:04:47.820
and directly put "JFK" as start vertex, so 
that we don't waste time searching for it.  

44

00:04:48.540  -->  00:04:54.960
And we solved this problem by using our Eulerian 
trail and Hierholzer's algorithm knowledge.  

45

00:04:56.460  -->  00:05:02.880
For the time complexity, let's put n as the number 
of airports and m the number of tickets. We have  

46

00:05:02.880  -->  00:05:08.460
the cost of filling the graph, which is m because 
we traverse tickets. And the cost of sorting  

47

00:05:08.460  -->  00:05:14.700
tickets, which is in O(mlogm) in the worst case, 
and we have the cost of Hierholzer's algorithm,  

48

00:05:14.700  -->  00:05:22.980
which is in O(n+m). By doing the sum, 
we get a time complexity of O(n+mlogm).  

49

00:05:25.380  -->  00:05:29.160
We've reached the end of this lecture, 
I hope that you understood how we  

50

00:05:29.160  -->  00:05:34.080
could apply Eulerian trail to solve a 
problem, see you in the next lecture.
