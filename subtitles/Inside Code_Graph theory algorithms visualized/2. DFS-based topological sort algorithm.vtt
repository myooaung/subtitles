WEBVTT
1

00:00:00.000  -->  00:00:05.580
Welcome back to the course, we will now start 
learning how to find that topological ordering  

2

00:00:05.580  -->  00:00:13.140
we've been talking about. In this chapter, we will 
learn two algorithms to do so, one that uses dfs,  

3

00:00:13.140  -->  00:00:20.640
and one that uses bfs. We will start with 
the dfs one, we discuss it in this lecture.  

4

00:00:22.620  -->  00:00:27.840
Let's suppose that we have this graph, it's 
the example we will work with. An important  

5

00:00:27.840  -->  00:00:32.580
thing to keep in mind for this algorithm 
is that in a valid topological ordering,  

6

00:00:32.580  -->  00:00:38.700
if we put a vertex u at a certain position, 
then all its outgoing neighbors, in other  

7

00:00:38.700  -->  00:00:45.720
words vertices whose u is a prerequisite for, must 
come after it, because u must happen before them,  

8

00:00:45.720  -->  00:00:52.740
it's a prerequisite, you need to understand 
this. Now imagine that we want to search for  

9

00:00:52.740  -->  00:00:58.860
courses that can be taken at the end. Can 0 
be the last course we take? No, because it's  

10

00:00:58.860  -->  00:01:05.760
a prerequisite of courses 3 and 6, so 3 and 6 
must come AFTER it, 0 cannot be the last one.  

11

00:01:06.660  -->  00:01:12.060
So let's go to its outgoing neighbors, 
we insert them, then we go back to 0.  

12

00:01:13.260  -->  00:01:20.280
We move to 6. Can 6 be the last course? Once 
again, no, it has outgoing neighbors that we  

13

00:01:20.280  -->  00:01:27.120
didn't insert yet, they must come after 6. Here 
again, we move to them, then we go back to 6.  

14

00:01:28.140  -->  00:01:34.140
We move to 9. Can 9 be at the end? No it 
has outgoing neighbors, we traverse them.  

15

00:01:35.400  -->  00:01:41.640
We move to 12. Can 12 be at the end? Yes, it 
can, because it has no outgoing neighbors,  

16

00:01:41.640  -->  00:01:46.500
nothing needs to come after it, 
we can safely put 12 at the end.  

17

00:01:50.340  -->  00:01:56.280
We go back to 9, and we move to the second 
outgoing neighbor, 10. Can it be the before  

18

00:01:56.280  -->  00:02:02.400
last course? No, because it's a prerequisite 
for 12 and 14, so we first need to put them.  

19

00:02:03.660  -->  00:02:08.160
12 is already inserted but 
not 14, so we move to 14.  

20

00:02:08.760  -->  00:02:15.780
Can we put 14? Yes, it has no outgoing neighbors, 
we can safely take it, we put it in the ordering.  

21

00:02:17.520  -->  00:02:24.480
Back to 10, now we've inserted all its outgoing 
neighbors, we can insert it now, we put 10.  

22

00:02:24.480  -->  00:02:29.220
You can see that 14 is after 10 in the 
ordering, as required by the constraints,  

23

00:02:29.220  -->  00:02:37.380
this is why we first went to 14 then we went 
back to insert 10. Back to 9, we've inserted  

24

00:02:37.380  -->  00:02:43.020
all its outgoing neighbors, both 12 and 10, 
we can now safely put it in the next position.  

25

00:02:44.940  -->  00:02:53.040
Back to 6, we've inserted 9, but not 7 yet, we 
go to it. The only outgoing neighbor of 7 is 10,  

26

00:02:53.040  -->  00:02:57.780
and it's already visited, so it's 
already in the ordering, we can put 7.  

27

00:03:00.060  -->  00:03:03.840
You can see that we're building the 
order of vertices in reverse order,  

28

00:03:03.840  -->  00:03:09.060
we've started by the last course to take, 
then the before last one, and so on.  

29

00:03:10.500  -->  00:03:15.940
Back to 6, we've inserted all outgoing 
neighbors, we can insert it. Back  

30

00:03:16.920  -->  00:03:24.120
to 0, we move to the second neighbor, 3. 3 has two 
neighbors, and they're both visited, so they're  

31

00:03:24.120  -->  00:03:31.860
both in the ordering, we can safely put 3. Back 
to 0, we've inserted both neighbors, we can put 0.  

32

00:03:33.180  -->  00:03:39.240
And we finished the call on 0. But 
we didn't traverse all vertices,  

33

00:03:39.240  -->  00:03:45.000
because not all vertices are reachable 
from 0, we start again from unvisited ones.  

34

00:03:46.140  -->  00:03:53.940
Next vertex is 1, not visited. 1 has one neighbor, 
3, and it's inserted, so we can directly insert 1,  

35

00:03:53.940  -->  00:04:03.120
and we finished the call. Next vertex, 2. 2 has 
two neighbors 4 and 5, we first insert them. We  

36

00:04:03.120  -->  00:04:10.980
start with 4. 4 has three neighbors 3 7 and 8. 3 
and 7 are inserted, but we still need to go to 8.  

37

00:04:13.260  -->  00:04:19.380
8 has one neighbor 11, we go to it. 11 
has one neighbor 14, and it's visited,  

38

00:04:19.380  -->  00:04:27.540
so we directly insert 11, and we go back. Back 
to 8, we inserted neighbors, we can put the 8.  

39

00:04:28.740  -->  00:04:35.460
Back to 4, we can insert it. Back to 2, we 
still need to move to its second neighbor, 5.  

40

00:04:36.240  -->  00:04:42.300
It has two neighbors, both visited, we 
directly insert it. Back to 2, we insert it.  

41

00:04:43.680  -->  00:04:53.280
We continue next vertices now, 3, visited, 
4 visited, 5 6 7 8 9 10 11 12, all visited.  

42

00:04:54.900  -->  00:05:01.020
Next unvisited is 13. It has one neighbor, 
which is visited, we directly insert 13.  

43

00:05:01.020  -->  00:05:08.460
End of call for 13. Remaining vertices are 14, and 
it's visited. We finished the process, we've been  

44

00:05:08.460  -->  00:05:20.580
able to build a valid topological ordering, 
we got 13 2 5 4 8 11 1 0 3 6 7 9 10 14 12.  

45

00:05:22.380  -->  00:05:26.880
By taking courses in this order, 
we respect all prerequisites,  

46

00:05:26.880  -->  00:05:32.520
you can see that for each vertex, all its 
outgoing neighbors are positioned after it.  

47

00:05:35.580  -->  00:05:42.540
Okay what happened here? We're inserting vertices 
starting from the end right? We want to find the  

48

00:05:42.540  -->  00:05:47.400
last vertex in the ordering then the one 
before it then the one before it and so on.  

49

00:05:48.120  -->  00:05:54.120
But to insert a vertex, all its outgoing 
vertices must already be inserted starting  

50

00:05:54.120  -->  00:05:59.040
from the right, so that they can be 
after it in the ordering. For that,  

51

00:05:59.040  -->  00:06:04.020
we decided to first insert neighbors, 
then we insert the actual vertex.  

52

00:06:06.060  -->  00:06:13.440
But to insert neighbors, we first need to insert 
their neighbors. And so on and so on. And this  

53

00:06:13.440  -->  00:06:20.580
process uses depth-first search, we initially want 
to insert a vertex, doing so requires us to insert  

54

00:06:20.580  -->  00:06:25.860
its neighbors, inserting them requires 
us to insert their neighbors, and so on.  

55

00:06:28.920  -->  00:06:34.260
Before moving to the implementation, we need 
to discuss what structure do we use. We're  

56

00:06:34.260  -->  00:06:40.620
inserting vertices in the ordering in reverse 
order, the last course that gets inserted is  

57

00:06:40.620  -->  00:06:45.780
the first one that will be taken, we're 
working on a Last In First Out principle.  

58

00:06:46.680  -->  00:06:52.500
And what structure uses LIFO principle? 
The stack, we will use a stack. Every  

59

00:06:52.500  -->  00:06:56.940
time we want to insert a vertex, we 
add it on top of the stack, then, at  

60

00:06:56.940  -->  00:07:01.080
the end we just keep popping to get the 
topological sort in the right order.  

61

00:07:03.840  -->  00:07:10.260
Let's start implementing. We need a function dfs() 
that takes as parameters the graph, the actual  

62

00:07:10.260  -->  00:07:18.480
vertex, the set of visited vertices, and new 
parameter: the stack. We add the actual vertex to  

63

00:07:18.480  -->  00:07:24.600
visited, but we don't push it onto the stack yet, 
we first need to insert its neighbors. This is  

64

00:07:24.600  -->  00:07:30.660
why we traverse neighbors, for each neighbor, if 
it's not in visited, we call dfs on it to insert.  

65

00:07:32.520  -->  00:07:39.000
After we finish inserting all outgoing neighbors, 
we can insert the actual vertex, we push it onto  

66

00:07:39.000  -->  00:07:46.320
the stack. Letting this instruction after 
the loop is very important, remember that  

67

00:07:46.320  -->  00:07:51.180
we first need to push outgoing neighbors, 
to have them after vertex in the ordering.  

68

00:07:53.820  -->  00:07:58.500
Note that we could let the instruction of 
adding the vertex to visited after the loop,  

69

00:07:58.500  -->  00:08:04.140
so that visited would mean that the vertex is 
inserted, but don't worry both methods work.  

70

00:08:06.480  -->  00:08:10.140
And in the main topological_sort() 
function, we create visited,  

71

00:08:10.140  -->  00:08:15.240
we create the stack, then here we need 
to call dfs on each unvisited vertex,  

72

00:08:15.240  -->  00:08:20.340
as we did with classic dfs we've seen 
previously, to visit all the vertices.  

73

00:08:23.640  -->  00:08:30.360
For each vertex in graph, if it's not visited, 
we call dfs on it. After the loop, the stack is  

74

00:08:30.360  -->  00:08:36.180
ready. We create an array ordering, then we keep 
popping from the stack and adding to ordering.  

75

00:08:36.180  -->  00:08:43.260
At the end, we just return ordering, we got our 
topological sort, we implemented our solution.  

76

00:08:44.760  -->  00:08:50.760
However, this one assumes that the graph doesn't 
have cycles, that it has a topological order.  

77

00:08:51.600  -->  00:08:58.680
But what if it has a cycle, what would happen? We 
have this graph. We start with 0, can we insert  

78

00:08:58.680  -->  00:09:05.100
it, no we first need to insert its neighbors. We 
go to 1, to insert it, we first need to insert  

79

00:09:05.100  -->  00:09:12.000
2. We go to 2, to insert it, we first need to 
insert 3. We go to 3, to insert it, we first  

80

00:09:12.000  -->  00:09:18.900
need to insert 1. We go to 1, to insert it, we 
first need to insert 2. We go to 2, to insert it,  

81

00:09:18.900  -->  00:09:25.020
we first need to insert 3. It will continue like 
that forever, each vertex is waiting for the other  

82

00:09:25.020  -->  00:09:33.480
to end while we have mutual dependencies. What 
is the solution then? The solution then is to  

83

00:09:33.480  -->  00:09:39.240
be able to detect that there is a cycle, to stop 
and say that a topological sort is not possible.  

84

00:09:41.100  -->  00:09:46.800
We know that there is a cycle when we find 
something called a back edge. A back edge is  

85

00:09:46.800  -->  00:09:52.260
an edge that goes from the actual vertex to 
a vertex that is already in the actual path,  

86

00:09:52.260  -->  00:09:58.500
where the actual path represents the sequence of 
adjacent vertices we traversed from the source  

87

00:09:58.500  -->  00:10:06.600
to the actual vertex. For example here we start 
from 0, the actual path is 0. Then we move to 1,  

88

00:10:06.600  -->  00:10:14.280
the actual path is 0-1. Then we move to 2, 
the actual path is 0-1-2. Then we move to 3,  

89

00:10:14.280  -->  00:10:22.800
the actual path is 0-1-2-3. Then here, we have an 
edge that takes us from the vertex 3 to the vertex  

90

00:10:22.800  -->  00:10:29.700
1, the vertex 1 that is already in the path, 
so it's a back edge, we deduce that we have a  

91

00:10:29.700  -->  00:10:39.420
cycle. And in fact, we have a cycle, the cycle 
1-2-3. Here is another example of a back edge.  

92

00:10:41.700  -->  00:10:48.240
How to adapt our solution to detect back edges? 
For that we need to keep track of vertices that  

93

00:10:48.240  -->  00:10:54.240
are in the actual path, we also need to make 
our dfs function return a boolean that says if  

94

00:10:54.240  -->  00:10:59.160
yes or no we've been able to successfully 
perform the topological sort algorithm,  

95

00:10:59.160  -->  00:11:08.220
in other words, if we didn't find any back edge. 
The set visited doesn't change, but now we also  

96

00:11:08.220  -->  00:11:13.560
need a set path that holds the vertices of the 
path from the initial vertex to the actual one.  

97

00:11:14.280  -->  00:11:19.200
The difference between them is that once 
a vertex is visited, it remains visited  

98

00:11:19.200  -->  00:11:25.440
for the whole process, and a vertex enters path 
when we go to it, but just before we backtrack,  

99

00:11:25.440  -->  00:11:30.900
we remove it, because it won't be a part of the 
path anymore, we will take another direction.  

100

00:11:32.520  -->  00:11:39.720
In code we add a new parameter path. Then we add 
vertex to visited, but we also add it to the path,  

101

00:11:40.800  -->  00:11:47.580
we add a vertex to path as soon as we go 
to it. Now we traverse neighbors. In the  

102

00:11:47.580  -->  00:11:52.920
previous solution we had only two cases, 
neighbor visited and neighbor not visited,  

103

00:11:52.920  -->  00:11:59.160
that's it, we had no path to check in, no 
result to check. Which is not the case here,  

104

00:11:59.160  -->  00:12:05.040
knowing if the neighbor is in the path is 
important, and the result of calling dfs on  

105

00:12:05.040  -->  00:12:10.440
the neighbor is also important, because it says 
if we found a back edge by going from there.  

106

00:12:12.120  -->  00:12:18.960
Okay we have our neighbor, we start by checking 
if it's in path. If it's the case, then we found a  

107

00:12:18.960  -->  00:12:25.680
back edge. And having a back edge means that there 
is a problem, we cannot continue the topological  

108

00:12:25.680  -->  00:12:33.840
sort process, we return false. Else if it's not 
in path, we move to other conditions. We check if  

109

00:12:33.840  -->  00:12:39.960
it's visited. If it's the case, we do nothing, we 
just continue to the next neighbor, we just skip  

110

00:12:39.960  -->  00:12:46.200
this one. And if it's not visited, we call dfs 
on it to continue from there and fill the stack.  

111

00:12:47.880  -->  00:12:53.880
Now this dfs call returns a boolean, if it's true 
then we found no problem by going from there,  

112

00:12:53.880  -->  00:13:00.180
and if it's false then there is a back edge. 
So if dfs call returns true, we just continue  

113

00:13:00.180  -->  00:13:05.640
to the next neighbor, else if it's false, we 
return false, because we couldn't successfully  

114

00:13:05.640  -->  00:13:13.740
perform the algorithm, there is a cycle. We have 
this decision tree, in code we can implement it  

115

00:13:13.740  -->  00:13:19.800
with this condition, if neighbor in path or 
(neighbor not in visited and not dfs, means  

116

00:13:19.800  -->  00:13:26.220
dfs returns false), we return false. Else we just 
move to the next neighbor in the next iteration.  

117

00:13:29.040  -->  00:13:33.780
And if we've been able to traverse neighbors 
without finding any problem, what do we do,  

118

00:13:33.780  -->  00:13:40.320
we add the vertex to the stack as we did earlier, 
but here we also remove it from the path, and we  

119

00:13:40.320  -->  00:13:46.680
return true. We remove from the path because we're 
about to backtrack, and true because we found no  

120

00:13:46.680  -->  00:13:55.140
problems. Now in the main solution function, we 
create a set visited, another set path, the stack,  

121

00:13:55.140  -->  00:14:03.360
and we start traversing vertices. For each vertex, 
if it's not visited, we call dfs on it. But this  

122

00:14:03.360  -->  00:14:09.480
time we check the result, if it returns false 
then there is a cycle, we can't find a topological  

123

00:14:09.480  -->  00:14:17.160
sort, we can for example return an empty array. 
And if everything goes well, after the loop,  

124

00:14:17.160  -->  00:14:22.440
we pop elements of the stack into ordering 
array and we return it, as we did previously.  

125

00:14:23.640  -->  00:14:29.040
And we got our topological_sort() solution that 
handles the case where the graph has a cycle,  

126

00:14:29.040  -->  00:14:37.140
it avoids the infinite recursion. It can also be 
used to specifically detect cycles, we can call  

127

00:14:37.140  -->  00:14:42.480
this function on a graph, and if the graph is not 
empty and this function returns an empty array,  

128

00:14:42.480  -->  00:14:47.580
it means that it found a cycle, this is why 
it couldn't build a topological ordering,  

129

00:14:47.580  -->  00:14:54.180
we deduce that there is a cycle in the graph. 
This is why in the previous lecture I told you  

130

00:14:54.180  -->  00:14:58.560
that topological sort algorithms can 
be used to detect cycles in graphs.  

131

00:15:00.480  -->  00:15:05.220
What about time complexity? You can see 
that except some additional instructions,  

132

00:15:05.220  -->  00:15:11.220
we're performing a classic depth-first search. 
Additional instructions don't affect the time  

133

00:15:11.220  -->  00:15:17.160
complexity here, adding to path is in O(1) in 
average, same thing for checking if it's in path,  

134

00:15:17.160  -->  00:15:22.200
removing from the path, same thing, and 
for the loop that pops from the stack,  

135

00:15:22.200  -->  00:15:29.100
it does |V| iterations, because the stack 
contains all vertices, and we have |V| vertices.  

136

00:15:30.480  -->  00:15:36.480
Remember that dfs has an O(|V|+|E|) 
time complexity, and these additional  

137

00:15:36.480  -->  00:15:42.960
instructions don't affect it, so we get an 
O(|V|+|E|) time complexity for this solution.  

138

00:15:44.220  -->  00:15:49.500
And for the space complexity, we 
have |V| for visited, |V| for path,  

139

00:15:50.400  -->  00:15:56.700
|V| for the stack and ordering, and |V| for the 
call stack, we get an O(|V|) space complexity.  

140

00:15:58.500  -->  00:16:03.540
We reached the end of this lecture, I hope that 
you understood this topological sort algorithm.  

141

00:16:04.320  -->  00:16:09.720
If you didn't, you can ask me questions. See 
you in the next lecture to discuss another  

142

00:16:09.720  -->  00:16:16.320
top sort algorithm, based on bfs, Kahn's 
algorithm. See you in the next lecture.
