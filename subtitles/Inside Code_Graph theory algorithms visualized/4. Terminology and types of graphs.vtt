WEBVTT
1

00:00:00.170  -->  00:00:04.779
Welcome back to the course, in this lecture
we will learn about some of the types of graphs

2

00:00:04.779  -->  00:00:09.590
and some of the terminology used in graph
theory, to have some basics before we start

3

00:00:09.590  -->  00:00:11.230
studying algorithms.

4

00:00:11.230  -->  00:00:17.770
The main two types of graphs are the undirected
graph and the directed graph, you really need

5

00:00:17.770  -->  00:00:22.109
to understand these because you will hear
about them a lot.

6

00:00:22.109  -->  00:00:26.939
Both of these types of graphs still follow
the concept of having vertices that are connected

7

00:00:26.939  -->  00:00:31.930
with edges, the difference between them remains
in the nature of the edges.

8

00:00:31.930  -->  00:00:37.890
In an undirected graph, edges don't have a
particular direction, it's a two-way relationship

9

00:00:37.890  -->  00:00:44.770
between the two vertices, we can go from vertex
A to vertex B and vice versa.

10

00:00:44.770  -->  00:00:49.800
An example of that is friendship in Facebook,
if there is an edge between two people it

11

00:00:49.800  -->  00:00:56.160
means that they're friends, green is friend
with blue and blue is friend with green, it's

12

00:00:56.160  -->  00:00:57.210
reciprocal.

13

00:00:57.210  -->  00:01:02.980
But in a directed graph, also called digraph,
an edge has a particular direction, you can

14

00:01:02.980  -->  00:01:06.210
see that it has a tail and a head.

15

00:01:06.210  -->  00:01:13.100
And here the direction matters, we can go
from A to B but we cannot go from B to A.

16

00:01:13.100  -->  00:01:16.470
An example of that is following on Twitter.

17

00:01:16.470  -->  00:01:21.080
If we have two people green and blue and there
is an edge like this, it means that green

18

00:01:21.080  -->  00:01:25.960
follows blue, but the opposite isn't true
here.

19

00:01:25.960  -->  00:01:31.710
Here the edge has a defined direction, it
goes from green to blue, so green follows

20

00:01:31.710  -->  00:01:36.649
blue, it's a one-way relationship.

21

00:01:36.649  -->  00:01:43.320
Another quick example to better understand
the two types, we can mention family relationships.

22

00:01:43.320  -->  00:01:47.960
For example if we have a graph where an edge
represents sibling relationship, then we use

23

00:01:47.960  -->  00:01:54.290
an undirected graph, because if A is a sibling
of B then B is also a sibling of A, it's a

24

00:01:54.290  -->  00:01:57.100
two-way relationship.

25

00:01:57.100  -->  00:02:01.689
But if we have a graph where an edge represents
father-son relationship, we use a directed

26

00:02:01.689  -->  00:02:07.409
graph, because it's a one-way relationship,
if A is the father of B, it doesn't mean that

27

00:02:07.409  -->  00:02:13.720
B is a father of A, it's even impossible in
this example.

28

00:02:13.720  -->  00:02:18.690
We also need the direction to determine who's
the father and who's the son, for example

29

00:02:18.690  -->  00:02:22.530
here A is the father and B the son.

30

00:02:22.530  -->  00:02:29.950
But if we reverse the edge, B becomes the
father and A the son.

31

00:02:29.950  -->  00:02:35.670
Another major difference between undirected
and directed graphs is in traversal, later

32

00:02:35.670  -->  00:02:41.010
when we will learn how to traverse a graph,
we will see that in an undirected graph, we

33

00:02:41.010  -->  00:02:45.860
can jump from this vertex A to the vertex
B, but we can also jump from the vertex B

34

00:02:45.860  -->  00:02:48.890
to the vertex A, it's permissible.

35

00:02:48.890  -->  00:02:54.870
However, in a directed graph, if an edge goes
out from A and goes in to B, we can only jump

36

00:02:54.870  -->  00:03:00.550
from A to B, not the other way around, it's
like an arrow that shows us what direction

37

00:03:00.550  -->  00:03:02.660
we can take.

38

00:03:02.660  -->  00:03:09.140
Now that you hopefully understood undirected
and directed graphs, we can move to the next

39

00:03:09.140  -->  00:03:13.420
types: unweighted and weighted graphs.

40

00:03:13.420  -->  00:03:18.190
In the previous lecture, we've talked about
the example of finding the shortest path between

41

00:03:18.190  -->  00:03:19.920
two vertices.

42

00:03:19.920  -->  00:03:25.310
If you noticed, there was an integer on each
edge of the graph, that integer represents

43

00:03:25.310  -->  00:03:29.140
the distance between two vertices.

44

00:03:29.140  -->  00:03:34.440
In a more general way, that value represents
the weight of the edge.

45

00:03:34.440  -->  00:03:40.430
You've guessed it, a weighted graph is a graph
where we associate a weight to each edge,

46

00:03:40.430  -->  00:03:45.760
that weight can represent a cost, a distance,
a speed limit, it depends on the purpose of

47

00:03:45.760  -->  00:03:48.590
the graph.

48

00:03:48.590  -->  00:03:53.430
And an unweighted graph is just a graph with
no weight on its edges, like the one we've

49

00:03:53.430  -->  00:04:00.010
seen in the car rides example, an edge simply
meant that two car rides overlap, that's it,

50

00:04:00.010  -->  00:04:04.689
we don't need to add a weight to it.

51

00:04:04.689  -->  00:04:09.569
Now you know undirected and directed graphs,
unweighted and weighted graphs, important

52

00:04:09.569  -->  00:04:16.260
point, a graph being directed or undirected
is independent from being weighted or unweighted,

53

00:04:16.260  -->  00:04:22.840
so we have undirected unweighted graphs, undirected
weighted graphs, directed unweighted graphs,

54

00:04:22.840  -->  00:04:27.950
and directed weighted graphs.

55

00:04:27.950  -->  00:04:29.900
Let's move to the next point.

56

00:04:29.900  -->  00:04:35.770
A first two terms that we will learn about
are adjacent and incident.

57

00:04:35.770  -->  00:04:41.410
Two vertices are said to be adjacent if there
is an edge connecting them, these two vertices

58

00:04:41.410  -->  00:04:44.460
A and B are adjacent.

59

00:04:44.460  -->  00:04:50.460
And a vertex is said to be incident to an
edge if it's one of the two vertices it connects,

60

00:04:50.460  -->  00:04:55.590
here there is an incidence between the vertex
A and the edge, also an incidence between

61

00:04:55.590  -->  00:05:00.080
the vertex B and the edge.

62

00:05:00.080  -->  00:05:03.250
Next term, an important one: degree.

63

00:05:03.250  -->  00:05:11.000
The degree of a vertex is the number of edges
the vertex is incident to, denoted deg(v).

64

00:05:11.000  -->  00:05:16.180
For example the degree of the vertex A is
3, here are degrees of remaining vertices

65

00:05:16.180  -->  00:05:21.970
to better understand.

66

00:05:21.970  -->  00:05:27.680
For an undirected graph, a vertex is incident
to all the edges in a same way, there is no

67

00:05:27.680  -->  00:05:30.760
need to further definitions.

68

00:05:30.760  -->  00:05:36.740
But in a directed graph, the edge it has an
incidence with can be going out of the vertex,

69

00:05:36.740  -->  00:05:39.400
or going in the vertex.

70

00:05:39.400  -->  00:05:45.680
So a vertex can have edges going out of it,
their total number is named the out-degree,

71

00:05:45.680  -->  00:05:50.280
and it can also have edges going in it, their
total number is named the in-degree.

72

00:05:50.280  -->  00:05:56.920
In other words, the out-degree of a vertex
is the number of edges that start from it,

73

00:05:56.920  -->  00:06:04.180
denoted deg superscript + (v), and the in-degree
of a vertex is the number of edges that end

74

00:06:04.180  -->  00:06:10.660
in it, denoted deg superscript - (v).

75

00:06:10.660  -->  00:06:16.759
And the degree of a vertex in a directed graph
is the sum of its out-degree and its in-degree.

76

00:06:16.759  -->  00:06:22.150
Here is an example, you can see that the vertex
B has 3 edges going out of it, edges that

77

00:06:22.150  -->  00:06:26.050
start from it, this is why its out-degree
is 3.

78

00:06:26.050  -->  00:06:33.440
And it has 1 edge going in it, 1 edge that
ends in it, this is why its in-degree is 1.

79

00:06:33.440  -->  00:06:39.669
We can say that its degree is 4, 3+1, remember
that its the sum of the out-degree and the

80

00:06:39.669  -->  00:06:42.860
in-degree.

81

00:06:42.860  -->  00:06:49.780
And here are out-degrees and in-degrees of
remaining vertices.

82

00:06:49.780  -->  00:06:54.810
Speaking of degree, we can have vertices with
a degree of 0, they're not connected with

83

00:06:54.810  -->  00:06:57.190
any other vertex.

84

00:06:57.190  -->  00:07:02.960
Such vertices are named isolated vertices,
an isolated vertex is a vertex with degree

85

00:07:02.960  -->  00:07:09.730
zero, like the vertex I in this example.

86

00:07:09.730  -->  00:07:15.449
Next terms are order and size, easy ones,
the order of a graph is its number of vertices

87

00:07:15.449  -->  00:07:19.210
and the size of a graph is its number of edges.

88

00:07:19.210  -->  00:07:25.430
For example this graph has an order of 6 and
a size of 8.

89

00:07:25.430  -->  00:07:26.430
Next term, self-loop.

90

00:07:26.430  -->  00:07:33.570
A self-loop, also named loop, is an edge that
connects a vertex to itself, like in this

91

00:07:33.570  -->  00:07:37.340
example.

92

00:07:37.340  -->  00:07:41.819
Question now, can we have multiple edges between
the same two vertices?

93

00:07:41.819  -->  00:07:48.139
The answer is yes, but we need to do the distinction
between two types of graphs: simple graphs

94

00:07:48.139  -->  00:07:50.620
and multigraphs.

95

00:07:50.620  -->  00:07:55.539
Simple graphs are graphs that allow neither
multiple edges between the same two vertices

96

00:07:55.539  -->  00:07:57.909
nor self-loops.

97

00:07:57.909  -->  00:08:03.320
And multigraphs are graphs that allow multiple
edges between the same two vertices, and for

98

00:08:03.320  -->  00:08:09.150
self-loops, some authors say that they're
allowed and some others say that they're not.

99

00:08:09.150  -->  00:08:16.050
And we will usually work with simple graphs,
in this course you can assume that a graph

100

00:08:16.050  -->  00:08:22.460
is simple unless it's mentioned that it's
a multigraph.

101

00:08:22.460  -->  00:08:27.849
We also have other types of graphs you should
know about, first we have the trivial graph,

102

00:08:27.849  -->  00:08:32.029
a graph with only one vertex and no edges.

103

00:08:32.029  -->  00:08:38.510
We also have the edgeless graph, a graph with
any number of vertices but with 0 edges.

104

00:08:38.510  -->  00:08:43.959
We also have the complete graph, a graph where
there is an edge between each two pair of

105

00:08:43.959  -->  00:08:52.500
vertices, denoted Kn where n is the order
of the graph.

106

00:08:52.500  -->  00:08:59.580
We also have the star graph, a graph where
we have one vertex of degree n-1 and n-1 vertices

107

00:08:59.580  -->  00:09:06.270
of degree one, in other words, a vertex that
is connected to all other vertices, and all

108

00:09:06.270  -->  00:09:09.640
other vertices are connected to that vertex
only.

109

00:09:09.640  -->  00:09:15.880
I know that you're discovering a lot of new
terms quickly and it may be overwhelming,

110

00:09:15.880  -->  00:09:22.090
but you will still be able to have a look
at them again later in case you forget something,

111

00:09:22.090  -->  00:09:24.640
don't worry.

112

00:09:24.640  -->  00:09:27.880
Another type of graph is the bipartite graph.

113

00:09:27.880  -->  00:09:33.170
A bipartite graph is a graph whose the set
of vertices can be partitioned into two sets

114

00:09:33.170  -->  00:09:39.900
of vertices such that there is no edge between
two vertices of the same subset.

115

00:09:39.900  -->  00:09:45.620
For example this graph is bipartite, because
if we partition vertices this way, there is

116

00:09:45.620  -->  00:09:51.730
no edge between any two vertices of V1, and
same thing for V2.

117

00:09:51.730  -->  00:09:58.529
A real life example is players and clubs,
let's suppose that we have players and clubs

118

00:09:58.529  -->  00:10:03.300
that we want to represent in a graph where
an edge from A to B means that the player

119

00:10:03.300  -->  00:10:06.399
A played in the club B.

120

00:10:06.399  -->  00:10:11.550
The graph that we get is bipartite, because
we can partition the vertices into a subset

121

00:10:11.550  -->  00:10:18.920
V1 that represents players and a subset V2
that represents clubs.

122

00:10:18.920  -->  00:10:24.500
And we can't have an edge between vertices
of V1 because a player can't play in a player,

123

00:10:24.500  -->  00:10:29.779
same thing for V2, a club can't play in a
club, the relationship can only be between

124

00:10:29.779  -->  00:10:33.519
a player and a club.

125

00:10:33.519  -->  00:10:37.779
A special type of bipartite graphs is complete
bipartite graphs.

126

00:10:37.779  -->  00:10:43.720
A complete bipartite graph is a bipartite
graph where every vertex of V1 is connected

127

00:10:43.720  -->  00:10:48.990
to every vertex of V2, like in this graph.

128

00:10:48.990  -->  00:10:57.839
A complete bipartite graph is denoted Km,n
where m is the number of vertices of V1 and

129

00:10:57.839  -->  00:11:03.070
n the number of vertices of V2.

130

00:11:03.070  -->  00:11:08.360
Next type of graphs is the regular graph,
it's a graph where all vertices have the same

131

00:11:08.360  -->  00:11:12.070
degree, as you can see here.

132

00:11:12.070  -->  00:11:17.590
For directed graphs, a directed regular graph
must also satisfy the condition of having

133

00:11:17.590  -->  00:11:24.970
the out-degree equal to the in-degree for
each vertex.

134

00:11:24.970  -->  00:11:29.370
Then we have two important terms: sparse and
dense.

135

00:11:29.370  -->  00:11:34.620
A graph is said to be sparse if its number
of edges is small, much less than the total

136

00:11:34.620  -->  00:11:40.990
possible number of edges, like this one.

137

00:11:40.990  -->  00:11:46.490
And a graph is said to be dense if its number
of edges is big, close to the total possible

138

00:11:46.490  -->  00:11:52.930
number of edges, like this one.

139

00:11:52.930  -->  00:11:57.940
Last two subjects we will talk about in this
lecture are terms related to subgraphs and

140

00:11:57.940  -->  00:12:03.829
terms related to paths and cycles, we're almost
done.

141

00:12:03.829  -->  00:12:09.360
What if we have a graph G and we create a
new graph G' by taking some vertices and some

142

00:12:09.360  -->  00:12:11.779
edges from G.

143

00:12:11.779  -->  00:12:14.260
This is what we call a subgraph!

144

00:12:14.260  -->  00:12:24.360
G'=(V',E') is a subgraph of G=(V,E) if and
only if V' is a subset of V, E' is a subset

145

00:12:24.360  -->  00:12:31.670
of E, and incident vertices of every edge
in E' are in V', in other words, we cannot

146

00:12:31.670  -->  00:12:37.640
take an edge from G without taking its two
incident vertices.

147

00:12:37.640  -->  00:12:42.959
In math notation it's written that if an edge
(u, v) is in the subgraph, then both u and

148

00:12:42.959  -->  00:12:48.820
v must be in the subgraph, for example we
cannot take the orange edge without taking

149

00:12:48.820  -->  00:12:52.879
0 and 3.

150

00:12:52.879  -->  00:12:58.610
Two special kinds of subgraphs are spanning
subgraphs and induced subgraphs.

151

00:12:58.610  -->  00:13:04.440
A spanning subgraph of G is a subgraph of
G where we take all the vertices and possibly

152

00:13:04.440  -->  00:13:07.710
remove some edges.

153

00:13:07.710  -->  00:13:14.860
Look at the example, we took all vertices
of G and removed some edges.

154

00:13:14.860  -->  00:13:20.630
And an induced subgraph of G is a subgraph
of G where we can remove some vertices, but

155

00:13:20.630  -->  00:13:26.949
we take all the edges, except ones that are
incident to vertices we removed obviously,

156

00:13:26.949  -->  00:13:34.280
so the set of edges contains all edges of
E whose vertices are in the subgraph.

157

00:13:34.280  -->  00:13:40.270
In the example we removed 2 vertices and kept
all edges, except the ones that are incident

158

00:13:40.270  -->  00:13:44.130
to vertices we removed.

159

00:13:44.130  -->  00:13:49.430
And the opposite of subgraph is supergraph,
if we take a graph G and add to it some vertices

160

00:13:49.430  -->  00:13:54.279
and/or some edges, we would have created a
supergraph of G.

161

00:13:54.279  -->  00:14:02.720
We can say that if G' is a subgraph of G then
G is a supergraph of G'.

162

00:14:02.720  -->  00:14:07.950
Last topic now: terms related to paths and
cycles.

163

00:14:07.950  -->  00:14:11.080
First of all, you need to understand what
is a walk.

164

00:14:11.080  -->  00:14:16.740
A walk is a sequence of edges that connects
a sequence of vertices, basically you can

165

00:14:16.740  -->  00:14:20.070
think of it as a line that traverses vertices.

166

00:14:20.070  -->  00:14:26.779
Obviously, each vertex it traverses has to
be adjacent to the next one.

167

00:14:26.779  -->  00:14:32.500
And a walk, can have repeated vertices and/or
repeated edges, for example in this walk we

168

00:14:32.500  -->  00:14:40.380
have repeated vertices, J and D, and a repeated
edge, the one between J and D. By repeated

169

00:14:40.380  -->  00:14:46.381
vertex we mean a vertex that we pass from
more than once, and same logic for edge, a

170

00:14:46.381  -->  00:14:52.209
repeated edge is an edge that we pass from
for more than once.

171

00:14:52.209  -->  00:14:56.440
And we have two types of walks: open walks
and closed walks.

172

00:14:56.440  -->  00:15:02.410
An open walk is a walk where the first vertex
and the last vertex are different, like this

173

00:15:02.410  -->  00:15:03.540
one.

174

00:15:03.540  -->  00:15:08.970
And a closed walk is a walk where the first
vertex is equal to the last vertex, like this

175

00:15:08.970  -->  00:15:10.470
one.

176

00:15:10.470  -->  00:15:15.220
Basically it's a walk that goes back to where
it started.

177

00:15:15.220  -->  00:15:21.490
Now you know about walks, you still need to
know about trails, circuits, paths, and cycles.

178

00:15:21.490  -->  00:15:26.430
A trail is simply a walk that doesn't allow
repeated edges.

179

00:15:26.430  -->  00:15:31.930
For example this one is a trail, this one
is a trail, but this one is not, it contains

180

00:15:31.930  -->  00:15:39.440
a repeated edge, the one between J and D.
A circuit is simply a closed trail, a trail

181

00:15:39.440  -->  00:15:44.670
whose the first and the last vertices are
equal, like this one.

182

00:15:44.670  -->  00:15:50.740
And a path, is a walk, that doesn't allow
repeated edges but also vertices this time.

183

00:15:50.740  -->  00:15:56.610
For example this one is a path, this one is
not a path because it has a repeated vertex,

184

00:15:56.610  -->  00:16:01.720
and same thing for this one, not a path.

185

00:16:01.720  -->  00:16:05.000
We also have the concept of cycle, very important.

186

00:16:05.000  -->  00:16:11.560
A cycle is a closed path, a path where the
first and last vertex are the same.

187

00:16:11.560  -->  00:16:16.089
Even if it doesn't respect the condition of
having no repeated vertices, but an exception

188

00:16:16.089  -->  00:16:22.140
is made for the first and last vertex, so
a cycle is a walk with no repeated edges,

189

00:16:22.140  -->  00:16:28.120
no repeated vertices, except for the first
and last one.

190

00:16:28.120  -->  00:16:33.460
The definitions we've seen now also have their
directed version, for directed graphs, we

191

00:16:33.460  -->  00:16:40.130
have directed walk, directed closed walk,
directed trail, directed circuit, directed

192

00:16:40.130  -->  00:16:43.019
path, and directed cycle.

193

00:16:43.019  -->  00:16:47.949
The difference is that we have to respect
the direction of the edges, for example this

194

00:16:47.949  -->  00:16:53.769
one is a directed path because all edges are
in the same direction, but this one is not,

195

00:16:53.769  -->  00:16:55.930
because of this edge.

196

00:16:55.930  -->  00:17:01.529
Even if vertices are adjacent, but the direction
isn't respected.

197

00:17:01.529  -->  00:17:09.380
Basically each ending vertex of an edge must
be the starting vertex of the next edge.

198

00:17:09.380  -->  00:17:15.860
And from definitions we've seen now we discover
two new types of graphs, cyclic and acyclic

199

00:17:15.860  -->  00:17:17.280
graphs.

200

00:17:17.280  -->  00:17:23.549
An undirected cyclic graph is an undirected
graph that contains a cycle, like this one,

201

00:17:23.549  -->  00:17:28.010
one of its cycles is the orange one.

202

00:17:28.010  -->  00:17:32.100
And obviously, an undirected acyclic graph
is an undirected graph that doesn't contain

203

00:17:32.100  -->  00:17:37.280
a cycle, like this one.

204

00:17:37.280  -->  00:17:43.150
For directed graphs, a directed cyclic graph
is a directed graph that contains a directed

205

00:17:43.150  -->  00:17:49.280
cycle, like this one, an example of a cycle
inside it is the one in orange.

206

00:17:49.280  -->  00:17:56.230
And a directed acyclic graph, DAG, is a directed
graph that doesn't contain a directed cycle,

207

00:17:56.230  -->  00:17:59.240
like this one.

208

00:17:59.240  -->  00:18:04.299
Last three terms: reachable, connected, and
disconnected.

209

00:18:04.299  -->  00:18:09.169
We say that a vertex B is reachable from a
vertex A if there exists a path from A to

210

00:18:09.169  -->  00:18:17.260
B. For example here we can go from A to B,
so B is reachable from A. For connected, we

211

00:18:17.260  -->  00:18:21.740
say that a graph is connected if there exists
a path between every pair of vertices, which

212

00:18:21.740  -->  00:18:25.530
is the case in this one.

213

00:18:25.530  -->  00:18:30.600
But for this one for example, we don't have
a path between A and E, hence the graph is

214

00:18:30.600  -->  00:18:36.460
not connected, we say that it's disconnected.

215

00:18:36.460  -->  00:18:41.740
This one is for undirected graph, because
for directed graphs, we have weakly connected

216

00:18:41.740  -->  00:18:44.440
and strongly connected.

217

00:18:44.440  -->  00:18:49.120
Weakly connected graph means that there exists
an undirected path from each vertex to each

218

00:18:49.120  -->  00:18:55.280
vertex, an undirected path is a path that
doesn't take edges direction into consideration.

219

00:18:55.280  -->  00:19:04.049
In other words, if we remove edges direction,
we get a connected undirected graph.

220

00:19:04.049  -->  00:19:09.730
And for strongly connected, there must be
a directed path from each vertex to each vertex,

221

00:19:09.730  -->  00:19:16.679
here we take edges direction into consideration.

222

00:19:16.679  -->  00:19:21.400
For example this graph is weakly connected
but not strongly connected, because there

223

00:19:21.400  -->  00:19:27.880
is no directed path from A to C. But this
one is strongly connected, we have a directed

224

00:19:27.880  -->  00:19:33.290
path from any vertex to any vertex.

225

00:19:33.290  -->  00:19:37.289
And we finished this lecture where we introduced
a lot of terms and types of graphs.

226

00:19:37.289  -->  00:19:42.580
I know that you had to understand a ton of
new concepts quickly and that this lecture

227

00:19:42.580  -->  00:19:48.370
wasn't that fun, but as said earlier, you
will be able to go back to them again later

228

00:19:48.370  -->  00:19:49.980
if you forget something.

229

00:19:49.980  -->  00:19:55.169
Also, you will have a quiz where you will
be able to evaluate yourself and see if you

230

00:19:55.169  -->  00:19:58.669
understood what we talked about in this lecture.

231

00:19:58.669  -->  00:20:04.429
Okay now we know what is a graph, some of
its types, but an important question comes

232

00:20:04.429  -->  00:20:09.780
in mind, how is a graph represented in the
memory of our computer?

233

00:20:09.780  -->  00:20:12.960
This is what we will talk about in our next
lecture.

234

00:20:12.960  -->  00:20:17.169
I hope that you understood this one, and see
you in the next lecture!
