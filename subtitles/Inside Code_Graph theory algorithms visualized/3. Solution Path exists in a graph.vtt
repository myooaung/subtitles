WEBVTT
1

00:00:00.000  -->  00:00:03.180
After studying depth-first search 
algorithm, we need some practice,  

2

00:00:03.180  -->  00:00:10.800
we will attempt to solve the "Find if path exists 
in graph" problem. We are given an integer n that  

3

00:00:10.800  -->  00:00:18.660
represents the number of vertices, labeled from 0 
to n-1, and an array of undirected edges. We are  

4

00:00:18.660  -->  00:00:24.780
also given two vertices start and end, and we want 
to check if there exists a path from start to end.  

5

00:00:26.160  -->  00:00:31.080
Math notation in the bottom-right corner is 
here to give you information about the input,  

6

00:00:31.080  -->  00:00:37.320
it says that the length of an element of edges 
is 2, logic, an edge is made of 2 elements,  

7

00:00:38.040  -->  00:00:45.240
it also says that start and end are between 0 and 
n-1, we deduce that they will be in our graph.  

8

00:00:45.840  -->  00:00:53.280
And last thing, for each edge (u,v), u and v are 
between 0 and n-1, and u is different from v.  

9

00:00:54.240  -->  00:01:00.600
We deduce that we will have edges between existing 
vertices and that we will have no self-loops.  

10

00:01:02.820  -->  00:01:06.480
Here is a first example, we 
have 9 vertices, some edges,  

11

00:01:06.480  -->  00:01:14.460
and we want to know if there is a path from 0 to 
6. The result is false, 6 is not reachable from 0.  

12

00:01:16.500  -->  00:01:22.920
If we keep the same input but change start from 0 
to 3, here we get true, there is a path between 3  

13

00:01:22.920  -->  00:01:31.500
and 6. How to solve this problem? Step one, we 
need to build the graph, either as an adjacency  

14

00:01:31.500  -->  00:01:38.700
list or as an adjacency matrix. Let's choose 
the adjacency list. Vertices here are labeled  

15

00:01:38.700  -->  00:01:45.060
from 0 to n-1, which also represent indices of 
an array. So to implement the adjacency list,  

16

00:01:45.060  -->  00:01:51.840
instead of a hash table, we can just use 
an array, where the key is the index. This  

17

00:01:51.840  -->  00:01:58.260
is why we build an array of n empty arrays, the 
array i represents the neighbors of the vertex i.  

18

00:02:00.900  -->  00:02:07.380
Now we traverse edges to fill the adjacency list. 
Edges are undirected here, so for each pair (u,  

19

00:02:07.380  -->  00:02:14.460
v), we put an edge from u to v, but also from 
v to u. This is why we add v to neighbors of u,  

20

00:02:14.460  -->  00:02:21.480
and we add u to neighbors of v. Okay we 
built the graph, we can start working.  

21

00:02:22.200  -->  00:02:28.680
You need to know that when applying dfs starting 
from a vertex u, all vertices it traverses are  

22

00:02:28.680  -->  00:02:34.680
considered reachable by u. Reachable by u means 
that there is a path from u to that vertex,  

23

00:02:34.680  -->  00:02:39.900
which is the case, the path is the 
actual branch from u to that vertex.  

24

00:02:42.000  -->  00:02:47.700
For example here from A we went to C, 
from C we went to D, from D we went to H,  

25

00:02:47.700  -->  00:02:54.600
it means that H for example is reachable 
by A, the path is this one, A C D H.  

26

00:02:56.880  -->  00:03:00.840
And in our problem, we want to know 
if there is a path from start to end,  

27

00:03:00.840  -->  00:03:07.260
in other words, if end is reachable from 
start. We deduce that what we can do is  

28

00:03:07.260  -->  00:03:12.480
to apply dfs starting from start, and if we 
reach end, it means that there is a path.  

29

00:03:14.880  -->  00:03:21.840
We have our dfs function, we call it on start, 
but, how can we know that we traversed end or not.  

30

00:03:22.380  -->  00:03:28.020
We can know it by checking the visited set, 
remember that initially the set is empty,  

31

00:03:28.020  -->  00:03:33.840
and every time we visit a vertex, we add it 
there. So technically, if we visited end,  

32

00:03:33.840  -->  00:03:39.720
it should be in the visited set. This is 
why, we return this boolean expression,  

33

00:03:39.720  -->  00:03:45.120
end in visited, it will return true 
if end is in visited, false if not,  

34

00:03:45.120  -->  00:03:49.260
because it's what will determine if 
there's a path from start to end or not.  

35

00:03:51.960  -->  00:03:56.880
We can even optimize this solution a little 
bit, by stopping as soon as we find end,  

36

00:03:56.880  -->  00:04:03.300
to avoid traversing the whole remaining part of 
the graph uselessly. To do so, we transform our  

37

00:04:03.300  -->  00:04:09.780
dfs function to a boolean function that says if 
yes or no we found end, so that as soon as one of  

38

00:04:09.780  -->  00:04:15.780
the calls on neighbors returns true, we stop and 
return true, without continuing other neighbors.  

39

00:04:16.860  -->  00:04:22.440
To implement it, we first need to add a parameter 
end, that represents the vertex we're searching  

40

00:04:22.440  -->  00:04:28.200
for. Second thing, we add a base case, if the 
actual vertex is the one we're searching for,  

41

00:04:28.200  -->  00:04:32.940
we directly return true. Now 
after passing the condition,  

42

00:04:32.940  -->  00:04:38.940
we don't just call the function without doing 
nothing else with its result, here we check its  

43

00:04:38.940  -->  00:04:44.340
result. We want to return true if one of the 
neighbors return true, this is why we write,  

44

00:04:44.340  -->  00:04:51.360
if the dfs call on the neighbor returns true, 
we directly return true. And if after traversing  

45

00:04:51.360  -->  00:04:56.880
all neighbors we couldn't find what we're 
searching for, we return false, it means that  

46

00:04:56.880  -->  00:05:02.580
neither this vertex is end, nor we can find it by 
continuing from its neighbors, we return false.  

47

00:05:06.300  -->  00:05:11.280
What does it mean concretely? Let's suppose 
that we're on start, it's not equal to end,  

48

00:05:11.280  -->  00:05:18.000
we don't enter the base case. We start traversing 
neighbors, we go to the first one. Not equal to  

49

00:05:18.000  -->  00:05:24.420
end, we start traversing neighbors. This one, 
not equal to end, and it doesn't have unvisited  

50

00:05:24.420  -->  00:05:30.720
neighbors, so we can't find end from here, we 
return false. We move to the second neighbor,  

51

00:05:30.720  -->  00:05:36.600
same thing, it returns false. All neighbors 
returned false, so we return false.  

52

00:05:38.400  -->  00:05:45.240
We move to the next neighbor. Not equal to end, we 
check neighbors. Neighbor one, it's equal to end,  

53

00:05:45.240  -->  00:05:50.760
so it directly returns true. And from here, 
we don't need to check remaining neighbors,  

54

00:05:50.760  -->  00:05:56.340
we also directly return true. Same 
thing here, we directly return true.  

55

00:05:57.120  -->  00:06:03.300
It was the first call, it returned true, so there 
is a path from start to end, and we didn't need to  

56

00:06:03.300  -->  00:06:08.700
perform all the depth-first traversal, we stopped 
as soon as we found what we were searching for.  

57

00:06:12.060  -->  00:06:17.700
Back to code, in the main solution function, 
instead of calling dfs to fill the set then  

58

00:06:17.700  -->  00:06:22.080
checking if end is inside it, we just 
return the boolean function we made now,  

59

00:06:22.080  -->  00:06:27.720
remember that it returns if yes or no we 
can find end starting from the vertex,  

60

00:06:29.520  -->  00:06:35.160
this is why we call it with start, we want to 
check if we can find end by starting from start.  

61

00:06:36.240  -->  00:06:39.600
And we solved the problem with depth-first search.  

62

00:06:41.580  -->  00:06:45.840
By the way, you can notice that we 
didn't even use the Graph class,  

63

00:06:45.840  -->  00:06:51.180
we just created an array that represents the 
adjacency list, no need for something else.  

64

00:06:55.800  -->  00:07:02.760
What about the time complexity? We first have the 
cost of building the graph, which costs n+m. n is  

65

00:07:02.760  -->  00:07:07.620
the input given, which represents the number 
of vertices, and m is the length of the array  

66

00:07:07.620  -->  00:07:14.700
of edges, basically it represents the number of 
edges. n+m because we're creating an array of n  

67

00:07:14.700  -->  00:07:20.760
elements, which costs n, then we're traversing 
the m edges to fill the adjacency list, n+m.  

68

00:07:23.280  -->  00:07:31.080
Then we have the dfs call. Previously we said that 
the time complexity of dfs is O(|V|+|E|) with an  

69

00:07:31.080  -->  00:07:37.320
adjacency list, but here we're calling dfs once, 
we don't have that loop in the main function that  

70

00:07:37.320  -->  00:07:45.120
traverses all vertices. But we still have |E| as a 
cost, the cost of traversing, because in the worst  

71

00:07:45.120  -->  00:07:54.540
case, one dfs call will traverse all the edges. 
And |E| here is m, so in total we have n+m for  

72

00:07:54.540  -->  00:08:01.680
building the graph and m for the traversal, we 
get a time complexity of O(n+m). Which is also  

73

00:08:03.300  -->  00:08:09.360
O(|V|+|E|) in reality, because here n represents 
the number of vertices and m the number of edges.  

74

00:08:11.520  -->  00:08:16.080
And for the space complexity, remember 
that the space used by an adjacency list  

75

00:08:16.080  -->  00:08:21.900
is |V|+2|E| for an undirected graph, 
we said it in the previous chapter,  

76

00:08:22.560  -->  00:08:32.040
and we have |V| for the visited set, and |V| 
for the call stack. In total we get 3|V|+2|E|,  

77

00:08:32.040  -->  00:08:39.180
which gives O(|V|+|E|), which is O(n+m), 
we have an O(n+m) space complexity.  

78

00:08:41.520  -->  00:08:46.680
We reached the end of this lecture, as always, if 
you didn't understand something, don't hesitate  

79

00:08:46.680  -->  00:08:51.600
to reach out by asking questions, it's better 
to ask questions and better understand rather  

80

00:08:51.600  -->  00:08:55.860
than not be happy with the course, 
seriously. See you in the next lecture!
