WEBVTT
1

00:00:00.120  -->  00:00:06.840
Welcome back to the course, new chapter: 
Topological sort. Before we talk about what is  

2

00:00:06.840  -->  00:00:12.180
topological sort, let me introduce this chapter 
with an example that will show you a concrete  

3

00:00:12.180  -->  00:00:17.820
situation where what we will learn through this 
chapter can be useful. Imagine that you want to  

4

00:00:17.820  -->  00:00:24.240
take a bunch of courses. But, some of them are 
prerequisites for others, for example you first  

5

00:00:24.240  -->  00:00:29.820
need to take Calculus 1 and Intro to Programming 
before being able to take Discrete Math,  

6

00:00:31.560  -->  00:00:38.400
or for example you need to take Physics 1 before 
being able to take Physics 2. So you have a list  

7

00:00:38.400  -->  00:00:44.700
of courses you want to take, and a list of 
pairs (a,b), each pair (a,b) means that a is a  

8

00:00:44.700  -->  00:00:51.540
prerequisite for b. If there was no prerequisites, 
we would be able to take courses in any order we  

9

00:00:51.540  -->  00:00:58.260
want, but because there are prerequisites, we have 
to respect them, for example we can't take Linear  

10

00:00:58.260  -->  00:01:05.460
Algebra before Calculus 2. This is why we want to 
find a linear ordering of courses that respects  

11

00:01:05.460  -->  00:01:10.980
all prerequisites, we want to know in what order 
do we take the courses, what's the first course  

12

00:01:10.980  -->  00:01:18.120
we take, then what to take after it, and so on. We 
want to find an ordering such that for each pair  

13

00:01:18.120  -->  00:01:24.840
(a,b), a comes before b in the ordering, to be 
sure that we won't try to take b before taking a.  

14

00:01:26.700  -->  00:01:34.200
For this example, here is a possible ordering. 
How to find such ordering? First of all,  

15

00:01:34.200  -->  00:01:40.140
we need to represent the problem. Here we 
have elements, courses, and relationships  

16

00:01:40.140  -->  00:01:45.300
between them, requirements. So we can think 
of representing the problem with a graph,  

17

00:01:45.300  -->  00:01:51.660
where vertices are courses, and an edge from 
u to v means that u is a prerequisite for v.  

18

00:01:54.840  -->  00:02:00.180
Here why did we use directed edges and 
not undirected ones? Because it's a  

19

00:02:00.180  -->  00:02:05.760
one-way relationship, u is a prerequisite for 
v doesn't mean that v is a prerequisite for u.  

20

00:02:07.380  -->  00:02:13.320
And what we're searching for is a linear ordering 
of vertices in a way that for each edge (u,v),  

21

00:02:13.320  -->  00:02:19.080
v comes after u in the ordering. In 
other terms, for each pair (u,v) that  

22

00:02:19.080  -->  00:02:24.360
says that u is a prerequisite for v, 
v must not happen until u happens,  

23

00:02:25.200  -->  00:02:33.420
this is why we must find v after u in the 
ordering, to respect the requirement. And such  

24

00:02:33.420  -->  00:02:39.840
an ordering is called a topological ordering, or a 
topological sort, the main topic of this chapter.  

25

00:02:41.940  -->  00:02:47.940
For example if we have this graph, here is a 
valid topological ordering, u comes before v for  

26

00:02:47.940  -->  00:02:56.100
each edge (u,v). But this ordering is not a valid 
topological ordering, because 11 is a prerequisite  

27

00:02:56.100  -->  00:03:05.040
for 14, while 14 is coming before 11 in the 
ordering, which is not allowed. Four important  

28

00:03:05.040  -->  00:03:10.860
questions now, is finding a topological ordering 
always possible? Is a topological ordering unique?  

29

00:03:10.860  -->  00:03:18.000
How can we find a topological ordering? And what 
are some applications of topological sort? First  

30

00:03:18.000  -->  00:03:24.720
question, is finding a topological ordering always 
possible? The answer is no, like in this scenario.  

31

00:03:25.560  -->  00:03:32.700
We have these 3 courses D E and G, from the graph 
we see that D is a prerequisite for G, G is a  

32

00:03:32.700  -->  00:03:38.940
prerequisite for E, and E is a prerequisite for D. 
Try to find a topological ordering, I'm waiting.  

33

00:03:40.140  -->  00:03:46.860
We can't, it's impossible, we have an 
interdependency. D must come before G, we also  

34

00:03:46.860  -->  00:03:53.040
know that G must come before E and E must come 
before D, so D must come before D, contradiction.  

35

00:03:55.800  -->  00:04:00.960
And in the first chapter, if you remember, 
something like this in a graph is called a cycle,  

36

00:04:00.960  -->  00:04:07.560
so the answer is that a topological ordering is 
not possible when there is a cycle in the graph.  

37

00:04:07.560  -->  00:04:12.540
This is why in topological sort we 
work with directed acyclic graphs,  

38

00:04:12.540  -->  00:04:16.140
directed because the relationship 
is a one-way relationship,  

39

00:04:16.140  -->  00:04:21.120
and acyclic because a topological sort 
is not possible when there is a cycle.  

40

00:04:24.840  -->  00:04:31.260
Second question, is a topological ordering 
always unique? No, a graph can have multiple  

41

00:04:31.260  -->  00:04:36.900
valid orderings, for example here we had 
this ordering, but this one is also valid,  

42

00:04:36.900  -->  00:04:41.100
and there exist other ones. So yeah 
it can be unique but not always.  

43

00:04:43.620  -->  00:04:47.460
Third question, how can we 
find a topological ordering?  

44

00:04:47.460  -->  00:04:53.100
To do so, there exist algorithms that find a 
topological ordering starting from a graph,  

45

00:04:53.100  -->  00:04:58.080
we will learn about two topological sort 
algorithms in next lectures of this chapter.  

46

00:04:59.220  -->  00:05:03.480
And last question, what are some 
applications of topological sort?  

47

00:05:04.620  -->  00:05:09.720
We can imagine a lot of applications, first 
one is the example we've seen at the beginning,  

48

00:05:09.720  -->  00:05:15.360
the problem of finding the order of courses 
we want to take that respects prerequisites.  

49

00:05:16.140  -->  00:05:21.000
And we can extend this problem to a lot 
of situations, for example in project  

50

00:05:21.000  -->  00:05:26.760
management we may have a set of tasks with some 
dependencies. Like if we're building a house,  

51

00:05:26.760  -->  00:05:31.680
we can't paint the walls before building 
them. With topological sort algorithms,  

52

00:05:31.680  -->  00:05:35.520
we can find an ordering of tasks 
that respects those dependencies.  

53

00:05:38.760  -->  00:05:44.460
We can even do something more powerful, imagine 
that we know the time required for each task,  

54

00:05:44.460  -->  00:05:51.000
it's written in blue, with topological sort we can 
calculate the minimum amount of time to finish all  

55

00:05:51.000  -->  00:05:58.440
the tasks, while respecting all dependencies 
obviously. Next example, detecting cycles.  

56

00:05:59.220  -->  00:06:04.860
Some graphs contain cycles and some graphs don't, 
and to know if a given graph contains a cycle,  

57

00:06:04.860  -->  00:06:12.240
we can use topological sort. We start working 
normally, we assume that there is no cycle, and if  

58

00:06:12.240  -->  00:06:19.260
while working we face a problem that we will cover 
later, we deduce that there's a cycle. Another  

59

00:06:19.260  -->  00:06:25.020
example is with database tables. If you worked 
with databases before, you should be familiar  

60

00:06:25.020  -->  00:06:30.480
with foreign keys, a field in a table that 
references to the primary key of another table.  

61

00:06:32.580  -->  00:06:38.460
For example we have these two tables Author and 
Book, we assume that an author can have multiple  

62

00:06:38.460  -->  00:06:46.800
books but a book has a single author. If we take 
this book for example, its author id is 148.  

63

00:06:46.800  -->  00:06:55.260
And this 148 refers to the author whose 
id is 148 in the Author table. In general,  

64

00:06:55.260  -->  00:07:01.800
the author_id of a book in the table Book should 
represent an existing author in the table Author.  

65

00:07:02.700  -->  00:07:08.400
And to create this relationship between the 
two tables, we use a foreign key, to say that  

66

00:07:08.400  -->  00:07:15.780
author_id in table Book references author_id in 
table Author. It's what we write when declaring  

67

00:07:15.780  -->  00:07:22.140
the tables in MySQL for example, we declare Author 
table normally, then when declaring Book table,  

68

00:07:22.140  -->  00:07:28.020
we add this line, FOREIGN KEY author_id 
REFERENCES author_id of the table Author.  

69

00:07:30.720  -->  00:07:35.160
Okay but the problem is, Book table 
references another table Author,  

70

00:07:35.160  -->  00:07:39.720
so we can't directly load Book table 
without having loaded Author table before,  

71

00:07:39.720  -->  00:07:46.560
we have a kind of dependency here. We deduce 
that we cannot load our tables in any order,  

72

00:07:46.560  -->  00:07:54.180
here we first need to load Author then we can 
load Book. This example has two tables only,  

73

00:07:54.180  -->  00:08:01.080
but we can imagine a database schema with a lot of 
tables and a lot of dependencies, here we can use  

74

00:08:01.080  -->  00:08:07.620
topological sort algorithms to find an ordering 
of tables to load, that respects all constraints.  

75

00:08:11.640  -->  00:08:18.660
Last example, we can use topological sort to 
find the shortest path in a DAG, directed acyclic  

76

00:08:18.660  -->  00:08:25.140
graph. In a weighted graph, we may want to know 
the shortest path to go from a node A to a node B,  

77

00:08:25.140  -->  00:08:31.020
where the length of path is determined by the 
sum of weights of its edges. It can represent  

78

00:08:31.020  -->  00:08:38.040
the total distance, the total cost, or something 
else. We will have a whole chapter about that,  

79

00:08:38.040  -->  00:08:43.380
but just know that for the case of directed 
acyclic graphs, we can use topological sort.  

80

00:08:44.880  -->  00:08:48.900
We've reached the end of this introduction, 
we've seen what is topological sort,  

81

00:08:48.900  -->  00:08:54.540
when can we find one, is it unique, some 
applications, and now get ready to start  

82

00:08:54.540  -->  00:09:00.660
learning about some algorithms that will produce 
such orderings, see you in the next lecture.
