1

00:00:00,360  -->  00:00:06,120
In software development, and in computer science 
in general, we have a lot of problems to solve,  

2

00:00:06,120  -->  00:00:12,480
some people do that for the whole day. But when 
facing a problem, it may seem a bit abstract,  

3

00:00:12,480  -->  00:00:17,640
this is why we need to find a way to represent it, 
to make it clearer and be able to start thinking  

4

00:00:17,640  -->  00:00:24,480
about a solution. For example, we want to suggest 
new friends to someone in a social media, for that  

5

00:00:24,480  -->  00:00:31,080
we decide to suggest friends of his friends. We 
have a list of connections between people, who's  

6

00:00:31,080  -->  00:00:37,560
friends with who. But to better visualize them, we 
can organize them this way, the circles represent  

7

00:00:37,560  -->  00:00:44,040
people, and a connection between two circles means 
that those two people are friends, for example red  

8

00:00:44,040  -->  00:00:50,340
is a friend of grey. And from here, the problem 
becomes easy, we start from the person we want  

9

00:00:50,340  -->  00:00:55,500
to suggest friends to, we check circles he's 
connected to, they represent his actual friends.  

10

00:00:55,500  -->  00:01:01,080
And by checking adjacent circles of those 
circles, we can find friends of his friends.  

11

00:01:03,000  -->  00:01:08,160
Another interesting example is this one, 
we want to travel between two cities,  

12

00:01:08,160  -->  00:01:14,400
preferably by using the shortest path between 
them. For that we have a list of cities and  

13

00:01:14,400  -->  00:01:20,520
distances between them, and we need to find the 
shortest path. To better visualize the problem,  

14

00:01:20,520  -->  00:01:27,120
we can organize data this way, where each circle 
represents a city, and a line between two cities  

15

00:01:27,120  -->  00:01:32,040
means that we can move back and forth between 
them, the integer represents the distance.  

16

00:01:33,240  -->  00:01:39,120
From here, we just apply an algorithm that we 
will learn about later to find the shortest path,  

17

00:01:39,660  -->  00:01:47,760
we get this one for this example. Last example, 
we have a bunch of car rides to perform, we have  

18

00:01:47,760  -->  00:01:54,120
the time when each ride starts and ends. However, 
we may not be able to realize them all with the  

19

00:01:54,120  -->  00:02:00,600
same car, because some of them overlap in time. 
And the question is, what is the minimum number  

20

00:02:00,600  -->  00:02:08,280
of cars to achieve them? We can visualize the car 
rides this way, each circle represents a car ride,  

21

00:02:08,280  -->  00:02:13,080
and a line between two rides means that 
they overlap, they can't be performed with  

22

00:02:13,080  -->  00:02:19,200
the same car. Now to solve this problem, we can 
color the circles, each color represents a car.  

23

00:02:20,040  -->  00:02:26,880
But we don't color them anyhow, remember that two 
adjacent rides means that they overlap, they can't  

24

00:02:26,880  -->  00:02:33,420
be performed with the same car, in other words, 
they can't have the same color. So to solve this  

25

00:02:33,420  -->  00:02:38,940
problem, we will use an algorithm that we will 
learn about later to color the circles in a way  

26

00:02:38,940  -->  00:02:45,180
that no two connected circles have the same color, 
by using as few different colors as possible.  

27

00:02:46,260  -->  00:02:51,900
After doing so, the number of used colors 
represents the minimum number of required cars,  

28

00:02:51,900  -->  00:02:59,820
3 in this example. Okay what's the common point 
between the 3 problem examples we've seen now?  

29

00:02:59,820  -->  00:03:05,760
The common point is the structure we used to 
represent the problem, it's called: a graph.  

30

00:03:07,380  -->  00:03:12,540
A graph is simply a set of vertices that 
can be connected with edges, that's it.  

31

00:03:13,080  -->  00:03:17,700
You can think of a graph as a network 
basically. Here is an example.  

32

00:03:19,500  -->  00:03:25,140
But even with this simple concept, it remains a 
powerful tool that can be used to represent and  

33

00:03:25,140  -->  00:03:31,740
solve a huge number of problems. It even has a 
whole branch of mathematics, named graph theory.  

34

00:03:32,340  -->  00:03:38,820
Graph theory is the study of graphs, the 
structure we defined now, it has lemmas, theorems,  

35

00:03:38,820  -->  00:03:45,960
conjectures...etc. But in this course we will 
focus way more on graph theory algorithms, the  

36

00:03:45,960  -->  00:03:51,840
algorithms that will give us the ability to solve 
problems by using graphs, for example shortest  

37

00:03:51,840  -->  00:03:58,860
path algorithms, graph coloring algorithms, 
minimum spanning tree algorithms...etc. And  

38

00:03:58,860  -->  00:04:05,340
it's interesting to know how graph theory started, 
the first paper on graph theory appeared in 1736,  

39

00:04:05,340  -->  00:04:10,920
it was written by Leonhard Euler, it solved 
the Seven bridges of Königsberg problem.  

40

00:04:11,820  -->  00:04:18,120
The problem says that in the Königsberg's map at 
that time, we had seven bridges as you can see.  

41

00:04:18,120  -->  00:04:23,100
And the question is, can we find a path 
that traverses each of the seven bridges  

42

00:04:23,100  -->  00:04:29,040
exactly once? You can take some seconds 
to try. Swimming is not allowed obviously.  

43

00:04:31,680  -->  00:04:37,200
Did you find one? Hmm, I don't think so, because 
it's proven that such a path doesn't exist,  

44

00:04:37,200  -->  00:04:41,580
but why? First of all, we can 
represent this map with a graph,  

45

00:04:41,580  -->  00:04:47,040
where a vertex represents a region, and an edge 
represents a bridge that connects two regions.  

46

00:04:47,940  -->  00:04:53,100
And this graph has some properties that show 
that the path we're searching for doesn't exist,  

47

00:04:53,100  -->  00:04:57,300
we will talk about that more in 
detail in the chapter about paths.  

48

00:05:00,300  -->  00:05:04,200
Now we learnt about what is a graph, 
some examples where we can apply it,  

49

00:05:04,200  -->  00:05:09,960
but a lot of questions may come to your mind: Are 
there multiple types of graphs? Can a graph have  

50

00:05:09,960  -->  00:05:15,960
no edges? Can we have multiple edges between 
the same two vertices? And many other ones.  

51

00:05:16,860  -->  00:05:22,140
Those are interesting questions that will give 
us a better understanding of graphs, this is  

52

00:05:22,140  -->  00:05:26,640
why in a next lecture, we will focus on the 
different types of graphs and some terminology,  

53

00:05:27,240  -->  00:05:32,820
to be more comfortable when we start discussing 
algorithms. See you in the next lecture!
