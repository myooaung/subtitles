1

00:00:00,000  -->  00:00:05,280
In the previous lecture, we've seen how to check 
colorability of a graph, but with an algorithm  

2

00:00:05,280  -->  00:00:12,000
that works with k = 2 only. We want an algorithm 
that works with any strictly positive value of k,  

3

00:00:12,600  -->  00:00:18,540
this is what we will see in this lecture, we 
will check k-colorability by using backtracking.  

4

00:00:19,560  -->  00:00:26,280
The process is simple. Let's say that we have k 
colors. We can decide to color vertices one by  

5

00:00:26,280  -->  00:00:32,040
one following a given order, and if a problem 
occurs, we backtrack and try something else.  

6

00:00:32,940  -->  00:00:38,640
Because yes, we can have multiple choices 
for how to color a vertex, we try them one  

7

00:00:38,640  -->  00:00:46,620
by one until finding one that leads to a valid 
vertex coloring. But what are these choices?  

8

00:00:47,700  -->  00:00:53,520
We have k colors, and the actual vertex may 
have neighbors that are already colored,  

9

00:00:53,520  -->  00:00:59,880
then we need to choose a color that is different 
from them all. We deduce that possible choices  

10

00:00:59,880  -->  00:01:05,820
for a given vertex are the k colors minus 
the colors already used for its neighbors.  

11

00:01:06,960  -->  00:01:10,980
For example we have 5 colors red, 
blue, green, yellow, and orange,  

12

00:01:10,980  -->  00:01:17,820
and we want to color the vertex F. In neighbors 
of this vertex we can find that the colors green  

13

00:01:17,820  -->  00:01:24,780
and red are already used. Remaining choices are 
blue, green, and orange, we try them one by one.  

14

00:01:27,420  -->  00:01:33,420
For the process, we traverse vertices in any 
order, we color the first vertex with one of its  

15

00:01:33,420  -->  00:01:38,520
possible choices, we move to the second vertex, 
we color it with one of its possible choices,  

16

00:01:38,520  -->  00:01:45,780
and so on. And if at some point we're 
stuck, in other words, we cannot color  

17

00:01:45,780  -->  00:01:51,480
the actual vertex because all colors are used by 
neighbors, we backtrack and try something else.  

18

00:01:52,980  -->  00:01:59,100
And if we get to color all vertices with valid 
choices, then we found a k-coloring of the graph.  

19

00:02:02,820  -->  00:02:08,940
Let's see this process applied on this 
graph with k = 3. First we need an order of  

20

00:02:08,940  -->  00:02:14,160
traversal of vertices, because we will color 
them one by one and backtrack if necessary.  

21

00:02:15,240  -->  00:02:21,900
Orders can differ in efficiency, there are some 
orders better than others, some orders that won't  

22

00:02:21,900  -->  00:02:28,380
cause a lot of backtracking. There are even 
orders that, if followed, we directly get a  

23

00:02:28,380  -->  00:02:35,580
valid coloring without ever backtracking, which 
is done in linear time. But, because we cannot  

24

00:02:35,580  -->  00:02:45,420
know it in advance, we use a random order. 
Let's use this order for example, GBIEAHFCD.  

25

00:02:47,640  -->  00:02:54,900
We have 3 colors: 0, red, 1, blue, 
and 2, green. Let's start coloring.  

26

00:02:58,140  -->  00:03:03,360
For each vertex, we'll try to color it with 
red, if it's not possible we use blue, if  

27

00:03:03,360  -->  00:03:09,480
it's not possible we use green, if it's also not 
possible then we cannot continue, we backtrack.  

28

00:03:11,580  -->  00:03:18,900
We start with G, we can color it with red. Then 
B, we can color it with red. Then I, we can color  

29

00:03:18,900  -->  00:03:25,680
it with red. Then E, we cannot color it with 
red, because its neighbor, G, is already red.  

30

00:03:27,060  -->  00:03:31,140
But we can color it with the 
next color, blue. Then A,  

31

00:03:31,140  -->  00:03:37,020
we cannot color it with red because B is red, and 
we cannot color it with blue because E is blue.  

32

00:03:37,740  -->  00:03:44,604
But we can color it with the next color: 
green. Then H, red is not available but we  

33

00:03:44,604  -->  00:03:53,160
can color it with blue. Then F, red is taken by 
I, blue is taken by E, and green is taken by A.  

34

00:03:53,160  -->  00:03:57,240
We have only 3 colors and all 
of them are used by neighbors,  

35

00:03:57,240  -->  00:04:03,300
so we cannot color F with this configuration, 
we need to backtrack and try something else.  

36

00:04:05,220  -->  00:04:13,620
Back to H, blue didn't work, we move to the next 
color. But green is taken by A. We have no other  

37

00:04:13,620  -->  00:04:20,340
choices on how to color H, we remove its color 
and backtrack, it's important to remove the color  

38

00:04:20,340  -->  00:04:27,420
before backtracking to make it like we didn't 
come from here at all. Back to A, green didn't  

39

00:04:27,420  -->  00:04:35,460
work. And we have no other colors, we remove the 
color and backtrack. Back to E, blue didn't work,  

40

00:04:35,460  -->  00:04:42,240
next color is green. And it's available, we 
color E with green and move to the next vertex.  

41

00:04:43,140  -->  00:04:48,720
Next vertex is A, red is used but this time 
blue is available, we color it with blue.  

42

00:04:49,620  -->  00:04:56,160
Then we have H, red is taken by G and I, and 
blue is taken by A, but green is available,  

43

00:04:56,160  -->  00:05:02,880
we put green. Then we have F, red is used, 
blue is used, and green is used, we backtrack.  

44

00:05:03,660  -->  00:05:09,720
Back to H, green didn't work, and we have no 
other colors, we remove the color and backtrack.  

45

00:05:10,620  -->  00:05:14,820
Back to A, blue didn't work and 
green is not available, we backtrack.  

46

00:05:15,600  -->  00:05:20,280
Back to E, green didn't work and there 
are no colors remaining, we backtrack.  

47

00:05:21,720  -->  00:05:29,220
Back to I, red didn't work, this time we try blue. 
Then E, red is used, blue is used, we can only  

48

00:05:29,220  -->  00:05:36,600
put green. Then A, red is used, we can put blue. 
Then H, red and blue are used, we can put green.  

49

00:05:37,260  -->  00:05:42,780
Then F, red is available. Then C, red and 
blue are used, but green is available.  

50

00:05:43,620  -->  00:05:52,500
Finally D, red is used but blue is available. All 
vertex have been colored, we found a valid vertex  

51

00:05:52,500  -->  00:05:58,560
coloring of the graph by using 3 colors, 
we can say that this graph is 3-colorable.  

52

00:06:01,680  -->  00:06:06,660
And you can see that vertices of each 
of the 3 colors form an independent set.  

53

00:06:08,940  -->  00:06:13,740
Basically that's the idea of the algorithm, 
we keep coloring vertices by trying available  

54

00:06:13,740  -->  00:06:19,680
colors one by one, and if there is no remaining 
available colors to try, we backtrack to change  

55

00:06:19,680  -->  00:06:27,300
colors of previous vertices. And here's an order 
of vertices that produces no backtracking at all,  

56

00:06:27,300  -->  00:06:32,520
it walks straightforward, we can get it by 
putting vertices sorted by their color number.  

57

00:06:33,300  -->  00:06:37,860
But we could not know it since the 
beginning because we didn't know the colors.  

58

00:06:40,440  -->  00:06:45,960
Let's implement this algorithm. We're using 
backtracking, we will have a recursive function.  

59

00:06:46,920  -->  00:06:52,320
It attempts to color the vertex i, and it 
says if yes or no a valid coloring have  

60

00:06:52,320  -->  00:06:58,380
been found from that direction. It takes as 
parameters the graph, k the number of colors,  

61

00:06:58,380  -->  00:07:04,860
the list of vertices, the index of the actual 
vertex, and the color map, because we need a color  

62

00:07:04,860  -->  00:07:13,020
map here to remember the color of each vertex. 
Initially in the color map, the default value is  

63

00:07:13,020  -->  00:07:19,200
-1, -1 means uncolored, we need a default 
value to avoid key not found errors.  

64

00:07:20,520  -->  00:07:26,100
Also, we won't use 'red', 'blue', 'green', to 
represent colors, we will just use integers.  

65

00:07:27,600  -->  00:07:32,460
And we have k colors, so colors 
will be labeled from 0 to k-1.  

66

00:07:34,800  -->  00:07:41,400
When we color the vertex i, we move to the vertex 
i+1, so when i is equal to the number of vertices,  

67

00:07:41,400  -->  00:07:46,080
we know that we've been able to color 
all vertices, we return true because  

68

00:07:46,080  -->  00:07:51,360
we found a valid coloring. Else, 
we start trying available colors.  

69

00:07:53,460  -->  00:07:56,940
We will traverse the k colors, but 
to know if a color is available,  

70

00:07:56,940  -->  00:08:03,480
we must check if a neighbor has that color or 
not. So a good idea would be to identify all  

71

00:08:03,480  -->  00:08:09,600
used colors before we start traversing colors. For 
that, we traverse neighbors of the actual vertex,  

72

00:08:09,600  -->  00:08:16,320
vertices[i], and put their colors in a set to 
avoid duplicates and speed up search operation.  

73

00:08:19,560  -->  00:08:23,040
In code, we extract the color of 
the neighbor for each neighbor  

74

00:08:24,420  -->  00:08:26,580
in graph[vertices[i]], and 
we put the results in a set.  

75

00:08:30,000  -->  00:08:37,440
Now we can start traversing colors. Colors are 
integers from 0 to k-1, we write for color in  

76

00:08:37,440  -->  00:08:44,040
range(k). If color is not in used, then it's 
an available color, we can assign it to our  

77

00:08:44,040  -->  00:08:50,880
vertex and move to the next one. This is why 
if the condition is true, we assign color to  

78

00:08:50,880  -->  00:08:58,320
color_map[vertices[i]]. And we call this function 
starting from i+1, starting from the next vertex.  

79

00:08:59,340  -->  00:09:05,100
If the call returns true, then we found a valid 
coloring from there, we also return true here,  

80

00:09:05,100  -->  00:09:12,180
no need to continue. And if after trying all 
available colors, none of them returned true,  

81

00:09:12,180  -->  00:09:17,040
then we need to remove the color 
and backtrack, we assign the color  

82

00:09:17,040  -->  00:09:22,260
-1 to the actual vertex to make it 
uncolored again, and return false.  

83

00:09:25,080  -->  00:09:30,180
What about the is_k_colorable() function? 
It takes as parameters the graph, and k,  

84

00:09:30,180  -->  00:09:35,940
the number of colors. We start by creating the 
list of vertices. We can just take a random order,  

85

00:09:35,940  -->  00:09:42,900
so we just put the keys of the adjacency list as 
an array. Then we create the color map, it's a  

86

00:09:42,900  -->  00:09:49,260
hash map with -1 as a default value. Finally, 
we return the result returned by calling the  

87

00:09:49,260  -->  00:09:56,700
function we made, we said that it says if yes or 
no we could find a valid vertex coloring. You can  

88

00:09:56,700  -->  00:10:03,780
see that we've put i to 0 because we want to start 
from the first vertex. And we made our function.  

89

00:10:06,840  -->  00:10:12,060
Note that if you want the color map instead of 
just yes or no, it's possible, you can call the  

90

00:10:12,060  -->  00:10:19,920
function to fill the color map, and return it. 
For the time complexity, we have n elements,  

91

00:10:19,920  -->  00:10:25,860
each one of them has k possible values. 
So in total, we have k^n possibilities,  

92

00:10:25,860  -->  00:10:33,600
we have k^|V| possible colorings, we get an 
O(k^|V|) time complexity in the worst case.  

93

00:10:36,900  -->  00:10:41,940
Checking availability of colors reduces 
the number of possibilities we try but  

94

00:10:41,940  -->  00:10:49,020
it can still be exponential. And 
we have faster exact algorithms,  

95

00:10:49,020  -->  00:10:53,280
but they're still exponential, we're 
dealing with an NP-complete problem.  

96

00:10:57,660  -->  00:11:03,600
What about the chromatic number? We said that 
we can use is_k_colorable() function to find it.  

97

00:11:03,600  -->  00:11:08,220
Yes, we just need a function that keeps 
trying values of k in an increasing way  

98

00:11:08,220  -->  00:11:13,740
until it finds one with which the function 
returns true, it represents the smallest  

99

00:11:13,740  -->  00:11:21,660
value of k such that the graph is k-colorable, 
it's the chromatic number. But k-colorability  

100

00:11:21,660  -->  00:11:26,460
is computed in exponential time, so this 
function will run in exponential time.  

101

00:11:29,460  -->  00:11:35,100
Fortunately, there exist approximation algorithms 
for coloring a graph with the smallest possible  

102

00:11:35,100  -->  00:11:42,900
number of colors. An approximation algorithm may 
not give the most optimal answer, in other terms,  

103

00:11:42,900  -->  00:11:47,700
it may not color the graph with the minimum 
number of colors, but at least, it's fast.  

104

00:11:48,540  -->  00:11:54,060
Which is useful for large graphs, we simply 
cannot rely on an exponential time algorithm  

105

00:11:54,060  -->  00:11:59,700
for large inputs, so we may think of 
sacrificing some optimization to get  

106

00:11:59,700  -->  00:12:06,240
the result in an acceptable time, it's better 
than nothing. This is why in the next lecture,  

107

00:12:06,240  -->  00:12:11,820
we will learn about the greedy algorithm for 
graph coloring, see you in the next lecture!
