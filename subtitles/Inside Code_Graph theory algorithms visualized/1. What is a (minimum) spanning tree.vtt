WEBVTT
1

00:00:00.000  -->  00:00:05.820
Welcome to this new chapter where we will talk 
about minimum spanning trees, what are they? Why  

2

00:00:05.820  -->  00:00:11.340
do we need them? How to find it in a graph? All of 
these questions will be answered in this chapter.  

3

00:00:13.440  -->  00:00:19.200
Before knowing what are minimum spanning trees, 
we first need to know what are spanning trees.  

4

00:00:19.200  -->  00:00:26.820
In graphs terminology, we learnt about spanning 
subgraphs, a spanning subgraph of G is a subgraph  

5

00:00:26.820  -->  00:00:34.080
of G that we obtain by keeping all vertices 
and potentially removing some edges. From this  

6

00:00:34.080  -->  00:00:40.260
definition we understand that a spanning tree is 
a subgraph of G that contains all vertices of G.  

7

00:00:41.580  -->  00:00:47.100
There is also the word tree, which means 
an undirected connected acyclic graph.  

8

00:00:48.300  -->  00:00:53.400
We deduce that a spanning tree T of 
an undirected graph G is a subgraph  

9

00:00:53.400  -->  00:00:57.960
of G that is connected, acyclic, 
and contains all its vertices.  

10

00:01:00.780  -->  00:01:05.940
Here is an example, we have this graph, 
and a possible spanning tree is this one.  

11

00:01:07.560  -->  00:01:12.180
I said a possible one because a graph 
can contain multiple spanning trees,  

12

00:01:12.180  -->  00:01:19.380
here are some possible spanning trees 
of G. Why would we need it? Imagine  

13

00:01:19.380  -->  00:01:24.660
that we have a telephone network like this, 
vertices are houses and edges are cables.  

14

00:01:25.860  -->  00:01:31.560
We want to allow a communication from any 
house to any other house, in graph terms,  

15

00:01:31.560  -->  00:01:37.860
we want to have a path from any vertex to any 
other vertex, we want the graph to be connected.  

16

00:01:39.240  -->  00:01:45.420
It's the case for this graph, but as you can 
see, we have unnecessary edges, by unnecessary  

17

00:01:45.420  -->  00:01:51.000
we mean edges that we can remove while still 
respecting the property of being connected.  

18

00:01:52.980  -->  00:01:59.220
And removing cables might be something beneficial 
to do, we want to avoid spending money uselessly.  

19

00:02:00.360  -->  00:02:04.140
And this is why we need to find 
a spanning tree of this network,  

20

00:02:04.140  -->  00:02:10.320
it contains all the houses, it connects them 
all, and it doesn't contain useless cables.  

21

00:02:13.980  -->  00:02:19.020
Okay but how to find a spanning tree in 
a graph? A spanning tree should contain  

22

00:02:19.020  -->  00:02:24.960
all vertices of the graph, but only 
necessary edges. And a good solution  

23

00:02:24.960  -->  00:02:30.060
to satisfy both of these conditions is using 
depth-first search or breadth-first search.  

24

00:02:30.900  -->  00:02:36.360
I told you that these two algorithms will be 
present in a lot of algorithms we will study.  

25

00:02:37.920  -->  00:02:42.960
Let me tell you why using one of them works, 
let's take depth-first search for example.  

26

00:02:44.160  -->  00:02:50.520
We know that using dfs on a connected graph 
reaches all vertices, first condition is  

27

00:02:50.520  -->  00:02:57.240
satisfied. Also, when we know that the vertex at 
the other side of the edge is already visited,  

28

00:02:57.240  -->  00:03:04.380
we don't go to it, so we don't take that edge, 
this is why dfs doesn't use unnecessary edges.  

29

00:03:05.760  -->  00:03:12.300
So what we can do, is to use dfs starting from 
any vertex, and keep only edges that dfs used  

30

00:03:12.300  -->  00:03:18.900
to reach other vertices. Remaining ones, those 
that haven't been used, are considered useless,  

31

00:03:18.900  -->  00:03:24.840
we don't take them in our new graph. 
At the end, we get a spanning tree.  

32

00:03:27.600  -->  00:03:33.180
To visualize it, let's apply depth-first on 
this graph starting from an arbitrary vertex,  

33

00:03:33.180  -->  00:03:35.940
while emphasizing edges we passed from.  

34

00:03:43.740  -->  00:03:50.940
You can see that we got a spanning tree, it's 
undirected, connected, acyclic, and contains all  

35

00:03:50.940  -->  00:03:57.420
vertices of the initial graph, because we reached 
all vertices while saving only edges we used,  

36

00:03:57.420  -->  00:04:06.240
not ones we skipped. Note that the shape we get 
depends on the order we use to traverse neighbors,  

37

00:04:06.240  -->  00:04:10.140
if we traversed them in a different 
order we would get another shape,  

38

00:04:10.140  -->  00:04:15.600
but still a spanning tree, remember that 
a graph may have multiple spanning trees,  

39

00:04:15.600  -->  00:04:21.180
the one we get by using dfs depends on 
how we traversed neighbors of each vertex.  

40

00:04:23.520  -->  00:04:27.960
And we could use the same logic 
with bfs, here is what we get.  

41

00:04:36.480  -->  00:04:40.500
We got another spanning tree, because 
we traversed vertices differently.  

42

00:04:42.720  -->  00:04:47.700
Let's implement the solution that 
uses dfs, we will use dfs as usual,  

43

00:04:47.700  -->  00:04:51.660
we will just add code to save 
edges we traversed, that's it.  

44

00:04:52.980  -->  00:04:58.260
The dfs function takes as parameters the 
graph, the actual vertex, the visited set,  

45

00:04:58.260  -->  00:05:03.540
and additional thing this time, the spanning 
tree graph, the one that we will build.  

46

00:05:05.040  -->  00:05:11.220
As usual, we start by setting the actual 
vertex as visited. Next step, we traverse  

47

00:05:11.220  -->  00:05:17.220
unvisited neighbors. For each neighbor, if it's 
not visited, it means that we will go to it.  

48

00:05:17.220  -->  00:05:23.160
But before, we add the edge to the spanning tree, 
we add neighbor to neighbors of the actual vertex,  

49

00:05:23.160  -->  00:05:28.380
and we add the actual vertex to the neighbors 
of neighbor, in the spanning tree obviously.  

50

00:05:30.900  -->  00:05:33.660
Now we traverse the neighbor by calling dfs.  

51

00:05:36.420  -->  00:05:41.880
And in the main spanning_tree function, we start 
by creating the spanning tree, it's empty at the  

52

00:05:41.880  -->  00:05:50.280
beginning. We also need a visited set for dfs. 
And we need an arbitrary vertex to start dfs from,  

53

00:05:50.280  -->  00:05:54.420
we can just take the first one in the 
list of vertices, it doesn't matter.  

54

00:05:55.500  -->  00:06:03.060
We have everything, we can call the function we 
made to fill the spanning tree. After doing so,  

55

00:06:03.060  -->  00:06:09.480
we just return the spanning tree we made. 
Obviously, this algorithm is in O(|V|+|E|)  

56

00:06:09.480  -->  00:06:15.540
time complexity because we're just applying 
dfs, we can find a spanning tree in linear time.  

57

00:06:18.840  -->  00:06:24.720
Okay now we know how to remove unnecessary 
cables, but we can still optimize the cost of this  

58

00:06:24.720  -->  00:06:33.420
network. How? Let's see. It's obvious that not all 
cables have the same cost, one important factor is  

59

00:06:33.420  -->  00:06:40.680
the cable length, for example the cable FJ is more 
expensive than the cable DE because it's longer.  

60

00:06:41.880  -->  00:06:44.640
So removing useless cables is a good thing,  

61

00:06:44.640  -->  00:06:51.720
but removing them in a way that minimizes 
the total length of cables is better. Let  

62

00:06:51.720  -->  00:06:58.080
me explain this idea. We said that cables don't 
have the same cost, it depends on their length.  

63

00:06:58.080  -->  00:07:03.840
This is why it's better to include the length 
of cables in our graph, we get a weighted graph.  

64

00:07:05.940  -->  00:07:12.300
Now we want to remove useless cables, we want to 
get a spanning tree. But, there are many ones,  

65

00:07:12.300  -->  00:07:18.540
and a crucial difference is the total length of 
remaining cables. For example, in this network,  

66

00:07:18.540  -->  00:07:24.060
here are some of its spanning trees. I 
didn't show them all because there are a lot.  

67

00:07:26.340  -->  00:07:30.120
But if we had to choose one of 
them, we would take this one,  

68

00:07:30.120  -->  00:07:35.580
because the total length of its cables, in graph 
theory terms, the sum of weights of its edges,  

69

00:07:35.580  -->  00:07:40.980
is the smallest possible sum. And 
smaller length means smaller cost.  

70

00:07:43.860  -->  00:07:49.920
So among all possible spanning trees, we want to 
find the one with the minimum sum of weights of  

71

00:07:49.920  -->  00:07:58.680
edges, it's called the minimum spanning tree. We 
deduce that the definition of the minimum spanning  

72

00:07:58.680  -->  00:08:04.260
tree of a weighted undirected graph is the 
spanning tree with the smallest sum of weights.  

73

00:08:06.420  -->  00:08:11.820
And minimum spanning trees have a lot of 
applications, whether in networks as we've  

74

00:08:11.820  -->  00:08:16.620
seen in this lecture, or in other topics 
such as clustering and image segmentation.  

75

00:08:19.080  -->  00:08:24.360
Okay but how to find the minimum spanning tree 
of a graph? Do we use the algorithm we studied  

76

00:08:24.360  -->  00:08:30.660
at the beginning of this lecture? No, because even 
if dfs and bfs traversal produce a spanning tree,  

77

00:08:30.660  -->  00:08:36.480
it's not guaranteed to get the one with the 
minimum sum of weights. To find the minimum  

78

00:08:36.480  -->  00:08:42.840
spanning tree, we have other algorithms such 
as Prim's algorithm and Kruskal's algorithm,  

79

00:08:42.840  -->  00:08:50.280
that we will study in the next lectures of this 
chapter. I hope that you understood this lecture,  

80

00:08:50.280  -->  00:08:55.800
now get ready to learn about one of 
the MST algorithms: Prim's algorithm.
