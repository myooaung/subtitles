WEBVTT
1

00:00:00.000  -->  00:00:04.680
In the previous lecture, we've seen an exact 
algorithm that calculates the chromatic number  

2

00:00:04.680  -->  00:00:12.180
of a graph, it always gives the optimal answer. 
However, it's slow, very slow. This is why we may  

3

00:00:12.180  -->  00:00:17.100
want a fast algorithm for this problem, even 
if it doesn't always give the optimal answer.  

4

00:00:17.940  -->  00:00:23.040
This is what we will see in this lecture, the 
greedy algorithm for finding the chromatic number.  

5

00:00:24.420  -->  00:00:30.060
Imagine that we start coloring vertices one 
by one, by following an arbitrary order.  

6

00:00:30.720  -->  00:00:37.200
Ideally, we want to color all the vertices 
with one color. But, when coloring,  

7

00:00:37.200  -->  00:00:43.320
we can be on a vertex that has a neighbor already 
colored with that color, so we cannot use it.  

8

00:00:44.040  -->  00:00:50.700
In that case, we're obliged to add a new color, 
we now have two colors that can be used. We  

9

00:00:50.700  -->  00:00:56.580
keep coloring, then we find a vertex whose 
neighbors used both colors, we can't use them.  

10

00:00:57.120  -->  00:01:04.140
In that case, we're obliged to add a new color, we 
now have three colors. And it continues like that.  

11

00:01:05.100  -->  00:01:11.580
So the idea is: for each vertex, we use the first 
available color among ones we used for previous  

12

00:01:11.580  -->  00:01:18.300
vertices. And if all of them are not available, 
we're obliged to add a new one. And so on.  

13

00:01:22.140  -->  00:01:26.700
At the end, we can check the number 
of colors we used, we can find 2,  

14

00:01:26.700  -->  00:01:31.260
we can find 4, it depends on the graph and 
the order we used to traverse the vertices.  

15

00:01:31.980  -->  00:01:37.980
And that's the idea of the greedy algorithm, 
it's greedy because for each vertex we color,  

16

00:01:37.980  -->  00:01:44.580
we try to do the optimal move, which is to not add 
a new color, to use as least colors as possible.  

17

00:01:46.620  -->  00:01:50.760
Let's apply this process on the 
example of the last lecture to  

18

00:01:50.760  -->  00:01:55.020
better understand and see what happens, 
do we get the optimal result or not.  

19

00:01:57.240  -->  00:02:04.080
Let's keep same order of traversal. Initially, 
we have only one color to use, let's say red.  

20

00:02:04.980  -->  00:02:13.260
Vertex G, can we use red? Yes, no neighbor has the 
color red. Next vertex, B. Can we use red? Yes,  

21

00:02:13.260  -->  00:02:20.940
no neighbor has the color red. Next vertex, I. Can 
we use red? Yes, no neighbor has the color red.  

22

00:02:21.600  -->  00:02:28.740
Next vertex, E. Can we use red? No, it's already 
used from its neighbors. So here we need a new  

23

00:02:28.740  -->  00:02:35.700
color, let's say blue, and we assign it 
to E. Next vertex, A. Can we use red? No,  

24

00:02:35.700  -->  00:02:42.540
it's used by B. Can we use blue? No, it's 
used by E. Again, we need to add a new color,  

25

00:02:42.540  -->  00:02:50.580
let's say green, and we assign it to A. Then we 
have H. Can we use red? No. Can we use blue? Yes.  

26

00:02:52.980  -->  00:03:01.260
Next vertex, F. Can we use red? No. Blue? No. 
Green? No. No more colors, so we need to add a  

27

00:03:01.260  -->  00:03:09.240
new one, let's say purple, and we assign it to 
F. Next vertex, C. Red is used, but blue isn't,  

28

00:03:09.240  -->  00:03:16.860
we assign blue. Last vertex, D. Red is used, blue 
is used, but green is not, we assign it to C.  

29

00:03:18.900  -->  00:03:23.580
And we finished our coloring, we 
colored the graph with 4 colors.  

30

00:03:24.360  -->  00:03:30.900
But wait, in the previous lecture we found 3, we 
could color the graph with only 3 colors. Yes,  

31

00:03:30.900  -->  00:03:35.640
you're right, but as said earlier, the greedy 
algorithm is an approximation algorithm,  

32

00:03:35.640  -->  00:03:38.640
finding the optimal value isn't guaranteed.  

33

00:03:42.420  -->  00:03:48.480
Okay we know that greedy coloring doesn't always 
give the optimal value, but how bad is it? First  

34

00:03:48.480  -->  00:03:54.780
of all, the traversal order of vertices can affect 
the number of colors used. Small example, we have  

35

00:03:54.780  -->  00:04:01.980
this four-vertices path graph. if we traverse 
vertices in this order, ABCD, only 2 colors  

36

00:04:01.980  -->  00:04:08.580
are used, optimal number. But if we traverse 
them in this order, ADBC, 3 colors are used.  

37

00:04:14.340  -->  00:04:19.380
And we have two types of graphs: well-colored 
graphs and not well-colored graphs.  

38

00:04:20.100  -->  00:04:25.320
Well-colored graphs are graphs with which 
greedy coloring always gives the same result,  

39

00:04:25.320  -->  00:04:34.620
no matter the order of traversal. And it gives the 
optimal number, the chromatic number. We can say  

40

00:04:34.620  -->  00:04:39.000
that the Grundy number of a well-colored 
graph is equal to the chromatic number.  

41

00:04:39.660  -->  00:04:45.480
The Grundy number of a graph is the maximum 
number of colors that can be used when applying  

42

00:04:45.480  -->  00:04:51.360
greedy coloring on it, you can understand it as 
the worst case result of greedy coloring on it.  

43

00:04:53.100  -->  00:04:59.160
Examples of well-colored graphs are complete 
graphs, where we always get n no matter the order,  

44

00:04:59.160  -->  00:05:06.600
or complete bipartite graphs, where we 
always get 2 no matter the order. And you  

45

00:05:06.600  -->  00:05:11.220
can see that n and 2 are the optimal results 
for these two types of graphs respectively.  

46

00:05:13.860  -->  00:05:19.500
But we also have graphs that are not 
well-colored, with which the order has an impact,  

47

00:05:19.500  -->  00:05:25.560
like the small example we've seen. An example 
where order of traversal is much more visible  

48

00:05:25.560  -->  00:05:33.360
is with crown graphs. Let's take a crown graph of 
8 vertices. A crown graph is an undirected graph  

49

00:05:33.360  -->  00:05:39.660
of 2n vertices whose vertices can be divided 
into two sets A and B of size n, such that  

50

00:05:39.660  -->  00:05:46.680
there is an edge between each two vertices ai 
and bj if i isn't equal to j. In other terms,  

51

00:05:46.680  -->  00:05:53.460
for each vertex ai, there is an edge between ai 
and every vertex in the set B except one, bi.  

52

00:05:55.620  -->  00:06:01.320
In this crown graph of 8 vertices, 
A contains a0, a1, a2, and a3,  

53

00:06:02.040  -->  00:06:09.060
B contains b0, b1, b2, and b3, and the edges 
condition is verified, for example with a2,  

54

00:06:09.060  -->  00:06:15.780
there is an edge between it and b0, b1, b3, 
but no edge with b2 because i and j are equal.  

55

00:06:18.180  -->  00:06:22.980
If we follow this order, we get a 
greedy coloring that uses 2 colors only.  

56

00:06:26.160  -->  00:06:34.440
But if we follow the order a0, b0, a1, b1, and so 
on until a3, b3, greedy coloring uses 4 colors.  

57

00:06:37.800  -->  00:06:43.020
And in the general case, we have an order 
that uses only 2 colors, the optimal number,  

58

00:06:43.020  -->  00:06:48.480
it's the best case. But in the worst 
case, by following the order a0, b0,  

59

00:06:48.480  -->  00:06:56.220
a1, b1, ..., an-1, bn-1, greedy 
coloring uses |V|/2 colors,  

60

00:06:56.820  -->  00:07:04.020
so for example with a crown graph of 100 vertices, 
in the worst case greedy coloring uses 50 colors,  

61

00:07:04.020  -->  00:07:09.600
horrible. We can say that the Grundy 
number of a crown graph is |V|/2.  

62

00:07:14.400  -->  00:07:18.600
In brief, greedy coloring can 
find the optimal number of colors,  

63

00:07:18.600  -->  00:07:24.720
it's even guaranteed for well-colored graphs like 
complete graphs and complete bipartite graphs,  

64

00:07:24.720  -->  00:07:31.620
but it can also give a poor result because of a 
bad order of traversal. For well-colored graphs,  

65

00:07:31.620  -->  00:07:38.040
we have no problem, but for others, the order 
has an impact, so we want to choose a good order.  

66

00:07:39.840  -->  00:07:45.480
And there always exists an order that gives the 
optimal number of colors when applying greedy  

67

00:07:45.480  -->  00:07:51.960
coloring by following it, however, finding that 
order is an NP-hard problem, back to the initial  

68

00:07:51.960  -->  00:07:59.100
slowness problem we had. But, what we can do is to 
use heuristics to find let's say a better order,  

69

00:07:59.100  -->  00:08:05.220
not necessarily the perfect one, but an order 
that will probably give a better result than  

70

00:08:05.220  -->  00:08:11.160
the order we randomly choose as we did in 
this lecture. This is why after this lecture,  

71

00:08:11.160  -->  00:08:18.660
we will see some heuristics, like Welsh-Powell 
and DSatur. But before, we forgot an important  

72

00:08:18.660  -->  00:08:25.200
thing in this lecture, implementing the greedy 
coloring algorithm. As parameters we need the  

73

00:08:25.200  -->  00:08:32.460
graph only. Then we need the order of vertices we 
will use. For now we're randomly choosing one, so  

74

00:08:32.460  -->  00:08:37.440
let's just take the list of keys of the adjacency 
list as it is, same as with the previous lecture.  

75

00:08:40.380  -->  00:08:46.620
We also need color map, a hash map where 
the default value is -1, -1 means uncolored.  

76

00:08:47.520  -->  00:08:53.760
Now we start coloring. For each vertex in the 
order, we need to find the first available color.  

77

00:08:55.080  -->  00:08:59.280
Colors will be represented 
by integers, 0, 1, and so on.  

78

00:09:00.660  -->  00:09:05.640
How to find the next available color? 
First we need to know what colors are  

79

00:09:05.640  -->  00:09:10.740
used by our neighbors, for that we use the 
same instruction as in the last lecture,  

80

00:09:10.740  -->  00:09:16.080
we extract the color used by each neighbor 
of the actual vertex and put them in a set.  

81

00:09:17.940  -->  00:09:21.900
Second part of the process, we 
start from the first color, 0,  

82

00:09:21.900  -->  00:09:28.260
and while it's used by one of the neighbors, we 
move to the next one by incrementing. We write,  

83

00:09:28.260  -->  00:09:35.940
color equal to 0, then while color is in used, we 
increment color. Doing so will automatically move  

84

00:09:35.940  -->  00:09:40.860
to a new color if all previously used ones 
are used by neighbors of the actual vertex.  

85

00:09:43.440  -->  00:09:50.940
After we find the available color, we assign 
it to our vertex in the color map. And after we  

86

00:09:50.940  -->  00:09:56.280
color all vertices, we can either return color map 
if we want to know how we colored the vertices,  

87

00:09:56.280  -->  00:10:02.460
or if we just want the number of colors we used, 
we return the maximum color given to a vertex in  

88

00:10:02.460  -->  00:10:09.900
color map + 1, because if the max color is 3 for 
example then we used 4 colors, as in the example.  

89

00:10:13.020  -->  00:10:18.360
What about the time complexity? We're 
first making the order, the cost is |V|.  

90

00:10:18.360  -->  00:10:24.480
Then we have a loop that is traversing the |V| 
vertices. For each vertex, we're traversing its  

91

00:10:24.480  -->  00:10:30.540
neighbors to find used colors, the cost is the 
degree of the vertex. Then we're looping until  

92

00:10:30.540  -->  00:10:36.840
we find an available color. The worst case is 
when each neighbor has a unique color, in which  

93

00:10:36.840  -->  00:10:42.840
case we need to perform degree of u iterations 
before finding the color, so the cost is deg(u).  

94

00:10:45.240  -->  00:10:53.460
We have the sum of 2*deg(u) for each vertex u. 
Remember that the sum of deg(u) represents the  

95

00:10:53.460  -->  00:10:57.900
sum of degrees of vertices, which 
is 2|E| in an undirected graph.  

96

00:10:59.460  -->  00:11:07.680
In total, we get |V|+4|E|, which gives an 
O(|V|+|E|) time complexity, greedy coloring  

97

00:11:07.680  -->  00:11:15.780
runs in linear time, way faster than the algorithm 
of the previous lecture. We've reached the end of  

98

00:11:15.780  -->  00:11:20.460
this lecture where we've learnt about greedy 
coloring, in the next one, we will discuss  

99

00:11:20.460  -->  00:11:26.940
some heuristics to improve how it chooses the 
order it traverses, see you in the next lecture.
