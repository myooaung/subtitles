WEBVTT
1

00:00:00.000  -->  00:00:05.940
We introduced this course by speaking about the 
seven bridges of Königsberg problem. The problem  

2

00:00:05.940  -->  00:00:11.520
says that in the Königsberg's map at that time, we 
had seven bridges as you can see. And the question  

3

00:00:11.520  -->  00:00:16.560
is, can we find a path that traverses 
each of the seven bridges exactly once?  

4

00:00:17.400  -->  00:00:23.100
The answer was that it's impossible, in this 
video, we will talk more about this claim.  

5

00:00:25.500  -->  00:00:30.840
The title of this lecture is what 
is a Eulerian trail/circuit. Yes,  

6

00:00:30.840  -->  00:00:38.220
what is a Eulerian trail/circuit? Good question. 
In a graph G, sometimes it's possible to have  

7

00:00:38.220  -->  00:00:44.220
a trail that passes from all edges exactly 
once. And that is called a Eulerian trail,  

8

00:00:46.200  -->  00:00:52.860
a Eulerian trail is a trail that passes from each 
edge of the graph exactly once. And if the trail  

9

00:00:52.860  -->  00:00:59.160
ends at the same vertex where it started, then 
it's a cycle, it's called a Eulerian circuit.  

10

00:01:01.200  -->  00:01:07.800
A Eulerian circuit is a circuit (trail that starts 
and ends at the same vertex) that traverses each  

11

00:01:07.800  -->  00:01:15.120
edge exactly once. Note that a graph that contains 
a Eulerian circuit is called a Eulerian graph,  

12

00:01:15.120  -->  00:01:21.420
and if it contains a Eulerian trail only not 
a circuit, it's called a semi-Eulerian graph.  

13

00:01:24.060  -->  00:01:29.760
Okay but what is the relation with the seven 
bridges of Königsberg problem? Remember that  

14

00:01:29.760  -->  00:01:35.100
we could represent this problem with a graph, 
lands are vertices, and bridges are edges.  

15

00:01:35.880  -->  00:01:42.420
The problem states that we want to find a way to 
traverse each of the seven bridges exactly once.  

16

00:01:43.620  -->  00:01:50.340
Bridges are edges here, therefore, the question 
is: Can we find a way to traverse each edge  

17

00:01:50.340  -->  00:01:57.000
exactly once? In brief, can we find a Eulerian 
trail in the graph? That's the relationship.  

18

00:01:59.160  -->  00:02:04.680
And in the introduction, we answered this 
question, we claimed that it's impossible, why?  

19

00:02:05.940  -->  00:02:11.460
Sure we could try all possibilities, but the 
main reason is that not all graphs have a  

20

00:02:11.460  -->  00:02:17.880
Eulerian trail, to be Eulerian or at least 
semi-Eulerian, there are conditions that  

21

00:02:17.880  -->  00:02:23.760
the graph must respect, which is not the case 
for this graph, this is why it's impossible.  

22

00:02:25.800  -->  00:02:28.680
But what are these conditions? Let's discover.  

23

00:02:29.820  -->  00:02:35.640
Let's start with undirected graphs. For an 
undirected graph, to have a Eulerian trail,  

24

00:02:35.640  -->  00:02:43.680
two conditions must be respected: all vertices 
with non-zero degrees must be connected, and the  

25

00:02:43.680  -->  00:02:50.880
number of vertices with an odd degree must be 0 
or 2, remaining ones must all have an even degree.  

26

00:02:53.580  -->  00:02:59.700
Saying that all vertices with non-zero degrees 
must be connected is slightly different from  

27

00:02:59.700  -->  00:03:06.480
saying that the graph is connected. Vertices 
with non-zero degrees are non-isolated vertices.  

28

00:03:07.260  -->  00:03:13.140
Isolated zero degree vertices are tolerated 
because even if they're not connected to  

29

00:03:13.140  -->  00:03:18.360
other ones, they don't have an edge that we 
necessarily have to reach to make a Eulerian  

30

00:03:18.360  -->  00:03:25.980
trail, so it's fine. However, if we have 
disconnected vertices with non-zero degrees,  

31

00:03:25.980  -->  00:03:31.440
you can see that this is a problem, 
because we have edges that we cannot reach,  

32

00:03:31.440  -->  00:03:38.640
and remember that a Eulerian trail must pass from 
every edge exactly once, which is impossible.  

33

00:03:41.040  -->  00:03:48.420
Let's see if these conditions are respected by the 
seven bridges graph. First condition is respected,  

34

00:03:48.420  -->  00:03:55.260
but for the second condition, here are degrees of 
vertices. And the number of vertices of odd degree  

35

00:03:55.260  -->  00:04:02.940
is 4, neither 2 nor 0. Hence, the condition 
is not respected, the graph doesn't have a  

36

00:04:02.940  -->  00:04:11.400
Eulerian trail, we cannot traverse each of the 
seven bridges exactly once. However, if we add  

37

00:04:11.400  -->  00:04:17.040
a bridge like this, the condition becomes 
respected, and we can find a Eulerian trail.  

38

00:04:19.320  -->  00:04:26.100
What about Eulerian circuit? Same conditions? 
The first condition remains the same, but for the  

39

00:04:26.100  -->  00:04:34.020
second one, this time all vertices must have an 
even degree. Here is an example, all vertices with  

40

00:04:34.020  -->  00:04:40.980
non-zero degree are connected, all vertices have 
an even degree, we can find a Eulerian circuit.  

41

00:04:43.620  -->  00:04:49.620
By the way, when the number of vertices with odd 
degree is 2, we can only find a Eulerian trail,  

42

00:04:49.620  -->  00:04:59.160
and it necessarily starts from one of those 2 
vertices and ends at the other one. So later in  

43

00:04:59.160  -->  00:05:04.980
the algorithm, to find where we start our trail, 
we search one of the two nodes with odd degrees.  

44

00:05:07.080  -->  00:05:13.800
And when all vertices have even degree, we can 
find a Eulerian circuit, which is also a Eulerian  

45

00:05:13.800  -->  00:05:20.340
trail, and we can start from any vertex we want, 
all of them can produce a Eulerian circuit.  

46

00:05:22.500  -->  00:05:26.760
And when the number of vertices 
with odd degree is neither 0 nor 2,  

47

00:05:26.760  -->  00:05:32.280
then we have no Eulerian trail at all, 
by consequence no Eulerian circuit.  

48

00:05:35.160  -->  00:05:41.640
Let's move to directed graphs. In directed graphs, 
we have the out-degree, the number of edges going  

49

00:05:41.640  -->  00:05:46.920
out of the vertex, and the in-degree, 
the number of edges going in the vertex.  

50

00:05:48.180  -->  00:05:53.940
To have a Eulerian trail in a directed 
graph, first condition is that, by ignoring  

51

00:05:53.940  -->  00:06:00.360
direction of edges, all vertices with non-zero 
degrees are connected. And second condition,  

52

00:06:00.360  -->  00:06:07.560
we must have at most one vertex with out-degree 
- in-degree equal to 1, at most one vertex with  

53

00:06:07.560  -->  00:06:14.460
in-degree - out-degree equal to 1, and remaining 
vertices must have out-degree equal to in-degree.  

54

00:06:15.960  -->  00:06:20.520
Which is the case for this graph. 
The first condition is respected,  

55

00:06:20.520  -->  00:06:26.640
we have at most one vertex with out-degree 
- in-degree = 1, it will be our start point,  

56

00:06:26.640  -->  00:06:32.640
we have at most one vertex with in-degree 
- out-degree = 1, it will be our end point,  

57

00:06:32.640  -->  00:06:39.300
and remaining ones have out-degree = 
in-degree, we get this Eulerian trail.  

58

00:06:43.860  -->  00:06:49.140
And for Eulerian circuit, first condition 
remains the same, and the second condition  

59

00:06:49.140  -->  00:06:56.340
is that all vertices must have out-degree = 
in-degree. Which is the case for this graph,  

60

00:06:56.340  -->  00:07:01.620
and we can start from any vertex, we can 
get this Eulerian circuit for example.  

61

00:07:04.440  -->  00:07:10.860
Recap, in undirected graph, we have a Eulerian 
trail if all vertices with non-zero degree are  

62

00:07:10.860  -->  00:07:17.640
connected, and we have 0 or 2 vertices with odd 
degree, the trail starts from one of them and  

63

00:07:17.640  -->  00:07:25.020
ends in the other. We have a Eulerian circuit if 
all vertices with non-zero degree are connected,  

64

00:07:25.020  -->  00:07:30.840
and all vertices have even degree, the 
circuit starts and ends in any one of them.  

65

00:07:32.400  -->  00:07:39.000
And in a directed graph, we have a Eulerian trail 
when by ignoring direction of edges, all vertices  

66

00:07:39.000  -->  00:07:46.260
with non-zero degree are connected, and we have at 
most one vertex with out-degree - in-degree = 1,  

67

00:07:46.260  -->  00:07:52.860
it will be the start point, and at most one 
vertex with in-degree - out-degree = 1, it will  

68

00:07:52.860  -->  00:08:01.740
be the end point, and all remaining vertices have 
out-degree = in-degree. And we have a Eulerian  

69

00:08:01.740  -->  00:08:08.580
circuit if the same first condition is respected, 
and all vertices have out-degree = in-degree,  

70

00:08:08.580  -->  00:08:14.580
the circuit starts and ends at any one of 
them. For example we have this circuit.  

71

00:08:17.040  -->  00:08:21.540
To practice on this, below, you will find 
a quiz where you will be shown graphs,  

72

00:08:21.540  -->  00:08:26.640
and you will have to determine if they are 
Eulerian, semi-Eulerian, or none of them.  

73

00:08:28.740  -->  00:08:34.620
And we can find interesting applications for 
Eulerian trails and circuits, for example when  

74

00:08:34.620  -->  00:08:40.260
visiting a city, we may want to pass from all 
roads, but without passing from the same one  

75

00:08:40.260  -->  00:08:47.100
twice, here we can think of finding the Eulerian 
trail of that place, it will represent the way  

76

00:08:47.100  -->  00:08:53.160
we should traverse the city to visit all roads 
without having to pass from the same one twice.  

77

00:08:55.380  -->  00:08:59.700
We've reached the end of this lecture, I 
hope that you now know what is a Eulerian  

78

00:08:59.700  -->  00:09:04.860
trail and a Eulerian circuit, and what 
are the conditions to find one in a graph.  

79

00:09:04.860  -->  00:09:09.300
In the next lecture, we will learn how 
to find the trail or circuit itself,  

80

00:09:09.300  -->  00:09:14.220
by using the Hierholzer's algorithm, 
see you in the next lecture.
