WEBVTT
1

00:00:00.000  -->  00:00:06.840
Welcome to this new chapter: Shortest path 
algorithms. You're at home and you want to go  

2

00:00:06.840  -->  00:00:13.200
to university. So you open Google maps app and you 
enter your actual position and the destination you  

3

00:00:13.200  -->  00:00:19.500
want to go to. And here, it shows you the path 
to take, it actually shows you shortest one.  

4

00:00:20.460  -->  00:00:24.480
Then you start wondering, how come 
from thousands of roads and streets,  

5

00:00:24.480  -->  00:00:29.160
it could quickly find out that the 
shortest path is this one? Very impressive.  

6

00:00:30.000  -->  00:00:36.600
The answer is that it uses algorithms to solve the 
shortest path problem, the problem of finding a  

7

00:00:36.600  -->  00:00:42.600
path that takes us from a source to a destination 
with the minimum cost, the topic of this chapter.  

8

00:00:44.340  -->  00:00:50.820
In a graph, to move between two vertices, we may 
have multiple possible paths. And the shortest  

9

00:00:50.820  -->  00:00:56.040
path problem is the problem of finding the one 
that has the smallest sum of weights of edges.  

10

00:00:57.720  -->  00:01:03.480
And those weights can represent distance, 
cost, power, and many other things depending  

11

00:01:03.480  -->  00:01:09.600
on the situation. For example vertices can 
represent locations and weights distances,  

12

00:01:09.600  -->  00:01:17.040
or vertices can represent flights and weights 
represent the cost of the flight. Both of these  

13

00:01:17.040  -->  00:01:22.500
examples fall into the shortest path problem, 
in both of them we want to find the path between  

14

00:01:22.500  -->  00:01:28.080
two vertices with the smallest sum of weights, 
regardless of what does that weight represent.  

15

00:01:29.520  -->  00:01:35.460
In this graph, here is the shortest path from 
A to E, its sum of weights is 8, 3+2+5+(-2).  

16

00:01:39.180  -->  00:01:44.340
You can try checking other paths if you want, 
you will find other paths that go from A to E,  

17

00:01:44.340  -->  00:01:50.400
but you won't find one with a smaller sum of 
weights, the one we found is the shortest path.  

18

00:01:52.560  -->  00:01:57.720
In brief, the shortest path problem is the 
problem of finding the path that goes from s  

19

00:01:57.720  -->  00:02:04.320
to t that has the smallest total weight, such that 
the total weight of a path is the sum of weights  

20

00:02:04.320  -->  00:02:12.000
of edges it's made of. Shortest path problem 
covers both directed and undirected graphs,  

21

00:02:12.000  -->  00:02:16.560
but with directed graphs you need to 
know that we search for a directed path,  

22

00:02:16.560  -->  00:02:22.800
the direction of edges must be respected, like in 
the example we've seen, we got a directed path.  

23

00:02:25.740  -->  00:02:30.720
And the shortest path problem can also be 
called the single-pair shortest path problem,  

24

00:02:30.720  -->  00:02:35.760
because we're interested by finding the 
shortest path between only one pair of vertices.  

25

00:02:36.900  -->  00:02:42.060
But we have other variations, we have 
for example the single-source shortest  

26

00:02:42.060  -->  00:02:46.380
path problem. In this one we want to 
know the shortest path from a source  

27

00:02:46.380  -->  00:02:51.480
vertex s to all other vertices, it's 
a bit different from the previous one.  

28

00:02:52.920  -->  00:02:58.080
We also have the single-destination shortest 
path problem, where we want to know the shortest  

29

00:02:58.080  -->  00:03:05.100
path from all vertices to a single destination t. 
And we have the all-pairs shortest path problem,  

30

00:03:05.100  -->  00:03:11.220
where we want to know the shortest path from each 
vertex to each vertex, all pairs of vertices.  

31

00:03:13.620  -->  00:03:18.360
During this chapter, we will cover algorithms 
that solve each of these variations.  

32

00:03:20.880  -->  00:03:27.000
We introduced the shortest path problem, we are 
now ready to start discussing algorithms that find  

33

00:03:27.000  -->  00:03:32.760
such a path in a graph, get ready to discover 
the Dijkstra's algorithm in the next lecture.
