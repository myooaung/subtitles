1

00:00:00,000  -->  00:00:05,400
Welcome to this new chapter where we will 
talk about trees, a special type of graphs.  

2

00:00:07,320  -->  00:00:14,220
A tree in graph theory is simply an undirected 
connected acyclic graph. This definition should  

3

00:00:14,220  -->  00:00:19,620
be simple to understand because we've 
seen these three terms before. Undirected  

4

00:00:19,620  -->  00:00:25,140
means that edges don't have a particular 
direction, the relationship goes both ways.  

5

00:00:26,280  -->  00:00:33,480
Connected means that there is a path from any 
vertex to any other vertex. And acyclic means  

6

00:00:33,480  -->  00:00:39,060
that it has no cycle, it doesn't contain a 
path that starts and ends at the same vertex.  

7

00:00:41,340  -->  00:00:48,780
Here is an example of a tree, as you can see, it's 
undirected, connected, and acyclic, it's a tree.  

8

00:00:49,680  -->  00:00:55,680
However, for example this one is not a tree 
because it's disconnected and has a cycle.  

9

00:00:58,440  -->  00:01:04,260
Okay we know what is tree, but what is it used 
for, and does it have some special characteristics  

10

00:01:04,260  -->  00:01:10,620
compared to typical graphs? We will talk about it 
after introducing some trees related terminology.  

11

00:01:13,140  -->  00:01:16,860
We just introduced what is a 
tree, we move to the forest.  

12

00:01:17,460  -->  00:01:23,340
A forest is an undirected acyclic graph. 
It has a definition similar to the tree  

13

00:01:23,340  -->  00:01:27,840
but without the 'connected' condition, 
so this one is a forest for example.  

14

00:01:30,840  -->  00:01:35,460
We can think of a forest as a graph 
that contains multiple separate trees,  

15

00:01:35,460  -->  00:01:42,240
a graph whose connected components are 
trees. The term connected component will  

16

00:01:42,240  -->  00:01:47,640
be discussed in the connectivity chapter, but 
a connected component of an undirected graph  

17

00:01:47,640  -->  00:01:53,580
G is a connected subgraph of G, that is not 
a part of a bigger connected subgraph of G.  

18

00:01:54,420  -->  00:02:00,300
For example for this graph G, this subgraph is 
not a connected component because it's not even  

19

00:02:00,300  -->  00:02:07,980
connected. This one is a connected component, it's 
a subgraph of G, connected, and trying to add to  

20

00:02:07,980  -->  00:02:15,240
it any other vertex of G will make it disconnected 
so it's not a part of a bigger connected subgraph.  

21

00:02:18,900  -->  00:02:23,340
And for forests, the connected 
components of a forest are trees,  

22

00:02:23,340  -->  00:02:30,480
this forest for example has 4 connected 
components, they are trees. In other terms,  

23

00:02:30,480  -->  00:02:35,580
if we take a bunch of separate trees and 
merge them into one graph, we get a forest.  

24

00:02:38,400  -->  00:02:43,680
We also have the polytree. A polytree 
is a directed graph such that if we  

25

00:02:43,680  -->  00:02:49,020
replace its edges with undirected 
edges, we get a tree. Like this one,  

26

00:02:49,020  -->  00:02:55,680
we replace its edges with undirected edges, we 
get an undirected connected acyclic graph, a tree.  

27

00:02:56,880  -->  00:03:03,600
Then we have the polyforest. The definition of 
this one should be easy to deduce, a polyforest  

28

00:03:03,600  -->  00:03:10,200
is simply a directed graph such that if we replace 
its edges with undirected edges, we get a forest.  

29

00:03:12,180  -->  00:03:18,300
Here is an example, if we replace directed 
edges by undirected edges, we get a forest.  

30

00:03:21,300  -->  00:03:27,660
Another important concept to know is the rooted 
tree. A rooted tree is a tree but with a vertex  

31

00:03:27,660  -->  00:03:33,720
that has been selected as the root, so we take 
a tree, we design one of its nodes as the root,  

32

00:03:33,720  -->  00:03:43,020
we get a rooted tree. For example here we selected 
the node G as a root. Okay but what is a root? A  

33

00:03:43,020  -->  00:03:48,000
root works as a reference for other vertices, 
and it's kind of where the tree starts from.  

34

00:03:49,860  -->  00:03:55,380
We also have a directed rooted tree, it's 
a rooted tree but with directed edges.  

35

00:03:57,660  -->  00:04:03,420
And we have two special cases for directed 
rooted trees, the first one is the most popular,  

36

00:04:03,420  -->  00:04:08,100
it's when the orientation of edges 
is away from the root, like this,  

37

00:04:08,100  -->  00:04:15,360
no path can ever lead you to the root. This 
one is called an arborescence, or an out-tree.  

38

00:04:16,380  -->  00:04:21,600
The second case is the opposite, it's when 
the orientation of edges is towards the root,  

39

00:04:21,600  -->  00:04:29,040
like this, all paths lead to the root. This 
is called an anti-arborescence, or an in-tree.  

40

00:04:31,560  -->  00:04:36,240
And outside graph theory, the tree data 
structure, in its popular definition,  

41

00:04:36,240  -->  00:04:43,260
is in reality a directed rooted tree with edges 
going away from the root, because it has a root,  

42

00:04:43,260  -->  00:04:49,020
there is a parent/child relationship from top to 
bottom, and we can only move from a parent to a  

43

00:04:49,020  -->  00:04:55,680
child and not the opposite, it's an out-tree. 
We will talk about it more in detail in the  

44

00:04:55,680  -->  00:05:03,540
next lecture and how to convert a graph to a 
rooted tree. Okay now we know what is a tree,  

45

00:05:03,540  -->  00:05:09,000
a forest, a polytree, a polyforest, 
a rooted tree, a root, an out-tree,  

46

00:05:09,000  -->  00:05:15,540
and an in-tree. However, we still don't know why 
we do we study trees, and how to manipulate them.  

47

00:05:17,100  -->  00:05:22,980
Trees are perfect for example to represent a 
hierarchical structure, like for employees of  

48

00:05:22,980  -->  00:05:29,340
a company. We have the employee with the highest 
rank, who is a manager of some employees, who are  

49

00:05:29,340  -->  00:05:35,820
themselves managers of other employees, who are 
themselves managers of other employees, and so on.  

50

00:05:37,080  -->  00:05:42,780
Or with the file system of a computer, we 
have the root folder, which contains a bunch  

51

00:05:42,780  -->  00:05:49,020
of files and folders, those folders themselves 
contain a bunch of files of folders, and so on.  

52

00:05:51,060  -->  00:05:57,180
Trees also give the possibility to create a lot 
of useful data structures for different uses,  

53

00:05:57,180  -->  00:06:03,420
like the binary search tree, the trie, 
the heap, the B-tree, and many other ones.  

54

00:06:05,220  -->  00:06:10,920
Also, another application that has a whole 
chapter in this course is spanning trees,  

55

00:06:10,920  -->  00:06:18,300
especially minimum spanning trees. A connected 
graph has the property of having a path from  

56

00:06:18,300  -->  00:06:22,620
any vertex to any other vertex, which 
is a big advantage in some situations.  

57

00:06:23,700  -->  00:06:30,300
But some edges can be unnecessary for keeping 
this property, for example here we can remove  

58

00:06:30,300  -->  00:06:37,140
the edge GE without losing the connectedness 
property. And if we keep removing edges, we  

59

00:06:37,140  -->  00:06:44,280
reach a point where removing one more edge breaks 
the property. And that result is a spanning tree,  

60

00:06:44,280  -->  00:06:51,240
a spanning tree of a graph G is a subgraph of G 
that is a tree and includes all vertices of G.  

61

00:06:52,860  -->  00:06:55,800
A graph can have multiple spanning trees.  

62

00:06:58,320  -->  00:07:02,880
And in a weighted graph, we can calculate 
the sum of weights of a spanning tree.  

63

00:07:03,420  -->  00:07:09,180
And the spanning tree with the minimum sum of 
weights of edges is called the minimum spanning  

64

00:07:09,180  -->  00:07:15,360
tree, in the next chapter we will see some 
applications of it and some algorithms to find it.  

65

00:07:18,300  -->  00:07:23,760
Now we know why studying trees can have 
applications, but what about manipulating them,  

66

00:07:23,760  -->  00:07:31,500
is it different from graphs? Trees are simply 
graphs with some properties, so classic graph  

67

00:07:31,500  -->  00:07:37,560
algorithms we studied before can be applied 
on trees. Most important ones are depth-first  

68

00:07:37,560  -->  00:07:43,320
search and breadth-first search, they represent 
the foundation of a lot of tree algorithms.  

69

00:07:44,400  -->  00:07:48,600
And they can be applied the same 
way for trees, here is an example.  

70

00:08:01,380  -->  00:08:07,980
However, one noticeable difference, it's that 
traversing out-trees doesn't require holding a  

71

00:08:07,980  -->  00:08:12,660
set of visited vertices, pause the video 
for some seconds to think of the reason.  

72

00:08:15,360  -->  00:08:20,460
Remember that we use the set of visited 
vertices because a same vertex can have  

73

00:08:20,460  -->  00:08:26,580
multiple vertices going to it, multiple 
in-neighbours, or when there is a cycle.  

74

00:08:28,860  -->  00:08:35,640
Which implies that we may traverse a same vertex 
multiple times. Which is not desirable, usually  

75

00:08:35,640  -->  00:08:41,400
we don't want to traverse the same vertex more 
than once, to avoid repeating the same actions  

76

00:08:41,400  -->  00:08:49,020
or worse, being stuck in a cycle infinitely. 
But in out-trees, each node has only one parent,  

77

00:08:49,020  -->  00:08:55,800
only one in-neighbour, and there are no cycles, 
so each node will be accessed only once,  

78

00:08:55,800  -->  00:09:02,340
the risk of traversing a same node again doesn't 
exist, this is why we don't need the visited set.  

79

00:09:03,360  -->  00:09:10,020
Also, in out-trees, we need to call dfs or 
bfs function once, starting from the root,  

80

00:09:10,020  -->  00:09:16,920
we don't need to remember what vertices we 
called the function with. We can still use the  

81

00:09:16,920  -->  00:09:22,320
visited set, but we don't need it, we're just 
gonna lose some space and time to handle it.  

82

00:09:27,300  -->  00:09:32,340
Now we know some trees terminology, where 
they can be used, and how to manipulate them,  

83

00:09:32,340  -->  00:09:38,580
but one final question before moving to the 
next lecture: given an undirected graph G,  

84

00:09:38,580  -->  00:09:42,240
how to know if it's a tree? 
Try to answer this question.  

85

00:09:47,880  -->  00:09:54,300
A tree is an undirected connected acyclic graph, 
so we can think of verifying if G respects the  

86

00:09:54,300  -->  00:10:00,900
three conditions. For undirected, we already know 
it from the problem description. For connected,  

87

00:10:00,900  -->  00:10:05,520
to check if an undirected graph is 
connected, we just apply a traversal  

88

00:10:05,520  -->  00:10:11,580
algorithm starting from any vertex and see if 
it reaches all the vertices, in other words,  

89

00:10:11,580  -->  00:10:20,520
if the visited set contains all vertices of the 
graph. And for acyclic, we already seen how to  

90

00:10:20,520  -->  00:10:26,340
check if a graph is acyclic in the topological 
sort chapter, we apply one of the algorithms  

91

00:10:26,340  -->  00:10:31,560
we've seen and it must return a successful 
result, it shouldn't be stuck at some point.  

92

00:10:35,280  -->  00:10:40,140
We also have another approach, you need 
to know that a tree of |V| vertices,  

93

00:10:40,140  -->  00:10:46,560
has exactly |V|-1 edges, because removing 
any edge would disconnect the graph,  

94

00:10:46,560  -->  00:10:51,780
not a tree anymore, and adding any edge 
would create a cycle, not a tree anymore.  

95

00:10:52,620  -->  00:10:59,220
So if we verify one condition only, either 
acyclic of connected, we don't need to verify  

96

00:10:59,220  -->  00:11:05,580
the other one, we just need to verify that 
the graph has |V|-1 edges, which is easier.  

97

00:11:07,260  -->  00:11:11,520
Checking if a graph is connected is 
easier than checking if it's acyclic,  

98

00:11:11,520  -->  00:11:17,880
this is why in this approach, we just check 
if it's connected and has |V|-1 edges.  

99

00:11:18,840  -->  00:11:25,320
What we do is that given the adjacency list of 
the graph, we apply dfs or bfs starting from any  

100

00:11:25,320  -->  00:11:32,760
vertex while saving traversed vertices and edges. 
After it we check that the number of traversed  

101

00:11:32,760  -->  00:11:39,300
vertices is equal to the total number of vertices, 
and that the number of found edges is two times  

102

00:11:39,300  -->  00:11:46,260
the number of total vertices - 1. Two because 
remember that an adjacency list has twice the  

103

00:11:46,260  -->  00:11:54,720
number of real edges, at least for an undirected 
graph. In code, we create a set visited, an array  

104

00:11:54,720  -->  00:12:01,260
edges, and we call dfs starting from an arbitrary 
vertex. dfs will set the vertex to visited,  

105

00:12:01,260  -->  00:12:07,860
then for each neighbor, it adds the edge, and if 
the neighbor is not visited, it calls dfs on it.  

106

00:12:07,860  -->  00:12:15,960
After filling visited and edges, we check the two 
conditions as we just explained. We've reached  

107

00:12:15,960  -->  00:12:21,240
the end of this lecture where we learnt about 
trees in graph theory, in the next one we will  

108

00:12:21,240  -->  00:12:26,700
focus on out-trees and how to convert a graph 
to an out-tree. See you in the next lecture!
