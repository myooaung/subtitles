WEBVTT
1

00:00:00.060  -->  00:00:04.560
In the previous lecture, we covered 
the adjacency list, a widely used  

2

00:00:04.560  -->  00:00:10.560
way of representing graphs. In addition to the 
adjacency list, we have another way of doing so,  

3

00:00:10.560  -->  00:00:17.520
it's the one we will see in this lecture: the 
adjacency matrix. The adjacency matrix is a  

4

00:00:17.520  -->  00:00:25.740
square matrix of size |V|x|V|, where matrix[i][j] 
says if yes or no there is an edge from i to j,  

5

00:00:25.740  -->  00:00:34.680
1 if there's an edge from i to j, 0 otherwise. 
For example if matrix[1][5] is 1, it means that  

6

00:00:34.680  -->  00:00:41.100
there is an edge from 1 to 5, and 0 means that 
there isn't, quite simple to understand I think.  

7

00:00:43.020  -->  00:00:48.480
Here is an example, we can see that 
matrix[1][5] is 1, so there's an edge  

8

00:00:48.480  -->  00:00:56.460
from 1 to 5 as you can see. But matrix[4][7] is 0, 
then there's no edge from 4 to 7 as you can see.  

9

00:00:59.220  -->  00:01:04.800
For an undirected graph, edges are 
bidirectional, so if matrix[i][j] is 1,  

10

00:01:04.800  -->  00:01:12.540
matrix[j][i] will also be 1, and if 
matrix[i][j] is 0, matrix[j][i] is also 0.  

11

00:01:14.100  -->  00:01:19.080
This is why with undirected graphs, 
we get a symmetric adjacency matrix.  

12

00:01:21.240  -->  00:01:28.200
And for weighted graphs, if there is an edge from 
i to j, we put the weight in that cell, else we  

13

00:01:28.200  -->  00:01:35.340
put 0 or infinity, infinity is preferred in cases 
where the weight can be 0, to avoid ambiguity.  

14

00:01:37.680  -->  00:01:43.680
Here is an example of a weighted graph and its 
adjacency matrix, you can see that in cells where  

15

00:01:43.680  -->  00:01:48.900
there is an edge between the vertex of that row 
and the vertex of that column, we don't just put  

16

00:01:48.900  -->  00:01:57.600
1, we put the weight. And when there isn't, we 
can put infinity, to say that there is no edge.  

17

00:01:59.760  -->  00:02:07.320
For the implementation, we will use a matrix of 
size |V|x|V|, an array of arrays, all having the  

18

00:02:07.320  -->  00:02:14.700
same size. At the beginning the matrix is empty, 
we will add rows and columns either when we add a  

19

00:02:14.700  -->  00:02:22.200
vertex or when we initialize it by giving it a set 
of vertices and a set of edges. First operation:  

20

00:02:22.200  -->  00:02:30.120
add vertex. To add a vertex, we have to add a new 
row and a new column, to welcome the new vertex.  

21

00:02:31.980  -->  00:02:37.500
And here it depends on the implementation, 
if the adjacency matrix is static,  

22

00:02:37.500  -->  00:02:43.560
we have to create a new one from scratch whose 
the size is the size of the old matrix + 1,  

23

00:02:43.560  -->  00:02:52.380
and we copy values of the old matrix. And if 
it's dynamic, like in what we did, we traverse  

24

00:02:52.380  -->  00:02:58.260
rows to add a new cell at the end of each one 
of them, then we add a new row at the bottom.  

25

00:03:00.660  -->  00:03:06.600
In code, we traverse rows, we append a 0 to 
each one of them to gradually create the column,  

26

00:03:06.600  -->  00:03:11.700
then we append a new row that has the 
same size as the first one for example.  

27

00:03:14.400  -->  00:03:19.260
For removing a vertex, we need to remove 
the row and the column of that vertex,  

28

00:03:19.260  -->  00:03:26.460
for example here if we want to remove vertex 
2, we remove row and column 2. And to do so,  

29

00:03:26.460  -->  00:03:32.820
we swap row 2 with the last row, we pop to remove 
the last row, and same logic for the column,  

30

00:03:32.820  -->  00:03:38.160
we swap it with the last column and we pop 
from each row to remove the last column.  

31

00:03:39.660  -->  00:03:46.560
In code, we swap the row i with the last row, we 
pop from the matrix to remove the last row. And  

32

00:03:46.560  -->  00:03:52.920
for the column, for each row, we swap the element 
i with the last column, and we pop, that's it.  

33

00:03:54.540  -->  00:03:58.440
After the loop we will have removed 
the column we wanted to remove.  

34

00:04:01.380  -->  00:04:07.680
Next operation, adding an edge. Adding an 
edge in an adjacency matrix is really easy,  

35

00:04:07.680  -->  00:04:15.780
we just need to put 1 in the right cell. We want 
to add an edge from the vertex u to the vertex v,  

36

00:04:15.780  -->  00:04:22.920
so we put 1 in the cell at row u at column v. 
For example if we want to add an edge from vertex  

37

00:04:22.920  -->  00:04:32.820
2 to vertex 3, we put 1 in adj_matrix[2][3]. In 
code, we just put 1 in adj_mat[u][v]. And if the  

38

00:04:32.820  -->  00:04:39.120
graph is undirected, we need to also add an edge 
from v to u, so we also put 1 in adj_mat[v][u].  

39

00:04:41.460  -->  00:04:46.740
And for removing an edge, same logic 
but we put 0 instead of 1, that's it.  

40

00:04:48.660  -->  00:04:55.380
And to check if there's an edge from u to v, we 
just check the cell adj_mat[u][v], is equal to 1.  

41

00:04:57.540  -->  00:05:04.860
Next operation, traversing neighbors. Neighbors 
of a vertex u are vertices v with which there is  

42

00:05:04.860  -->  00:05:11.400
an edge between u and v, and to find them, we 
traverse the row u in the adjacency matrix and  

43

00:05:11.400  -->  00:05:18.240
check cells where there is a 1. For example in 
this matrix, in the row 4, cells where there is  

44

00:05:18.240  -->  00:05:28.440
a 1 are 0, 1, and 5, so neighbors of the vertex 4 
are 0, 1, and 5, as you can see in the graph. In  

45

00:05:28.440  -->  00:05:35.400
code, we traverse vertices v, and if adj_mat[u][v] 
is 1, then v is a neighbor, we perform the action  

46

00:05:35.400  -->  00:05:42.840
we want, for example printing it here. Last 
operation, building the adjacency matrix.  

47

00:05:43.920  -->  00:05:49.800
We have a set of vertices V and a set of edges 
E, and we want to build the adjacency matrix.  

48

00:05:51.480  -->  00:05:59.100
We know that an adjacency matrix has a size of 
|V|x|V|, one row and one column for each vertex.  

49

00:05:59.760  -->  00:06:04.320
This is why we create a matrix 
of |V| rows and |V| columns.  

50

00:06:05.460  -->  00:06:11.100
Cells are initially at 0 because we didn't 
add edges yet, we just created the vertices.  

51

00:06:12.060  -->  00:06:18.540
Next step, we traverse the edges to fill the 
cells. For each edge, we have the source and the  

52

00:06:18.540  -->  00:06:24.960
destination, so we put 1 in the cell at row source 
at column destination, it means that we have an  

53

00:06:24.960  -->  00:06:31.620
edge from source to destination. If the graph is 
undirected, we also put 1 in the opposite cell,  

54

00:06:31.620  -->  00:06:37.380
we put 1 from destination to source, we 
put 1 in adj_mat[destination][source].  

55

00:06:40.380  -->  00:06:46.440
Now we've seen how to implement an adjacency 
matrix and different operations, but we missed  

56

00:06:46.440  -->  00:06:52.140
something important. To access vertex 3 
in the adjacency matrix, we go to row 3,  

57

00:06:52.140  -->  00:06:57.420
but what if the vertex was a string for example, 
how would it work in the adjacency matrix?  

58

00:06:58.380  -->  00:07:04.680
The answer is that to allow vertices to be 
something other than integers from 0 to n-1,  

59

00:07:04.680  -->  00:07:11.940
indices, we need a hash table that stores each 
vertex and the index of its row/column, to be able  

60

00:07:11.940  -->  00:07:20.280
to access it. For example here we have 6 vertices 
A B C D E F, so we create a matrix of size 6x6.  

61

00:07:21.240  -->  00:07:28.260
Now we have 6 indexes 0 1 2 3 4 5, we can 
for example decide to give index 0 to A,  

62

00:07:28.260  -->  00:07:38.460
index 1 to B, index 2 to C, index 3 to D, index 
4 to E, and index 5 to F. By doing so, if we want  

63

00:07:38.460  -->  00:07:44.760
to access the row of the vertex C for example, 
we check the map, we find 2, so we go to row 2.  

64

00:07:46.080  -->  00:07:51.420
Little example, to add an edge from A to 
E, we check the index of A which is 0,  

65

00:07:51.420  -->  00:07:57.960
the index of E which is 4, and we put 1 in 
the cell adj_mat[0][4], we fixed the problem.  

66

00:08:00.840  -->  00:08:06.720
Now we know about the adjacency list, the 
adjacency matrix, but one question remains,  

67

00:08:06.720  -->  00:08:11.460
if we want to implement a graph, 
what implementation should we choose?  

68

00:08:12.360  -->  00:08:16.500
To answer this question, we will 
compare space usage and time complexity  

69

00:08:16.500  -->  00:08:21.240
of operations of each one of them, this 
is what we will do in the next lecture!
