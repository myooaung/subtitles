WEBVTT
1

00:00:00.290  -->  00:00:06.540
In the previous lecture, we solved the all
pairs shortest path problem by using the Floyd-Warshall

2

00:00:06.540  -->  00:00:13.460
algorithm. It had a time complexity of O(|V|^3).
And because the number of edges doesn't impact

3

00:00:13.460  -->  00:00:21.370
the running time, we concluded that it's well-suited
for dense graphs. However, for sparse graphs,

4

00:00:21.370  -->  00:00:26.480
we can find a more efficient algorithm, the
one we will see in this lecture: The Johnson's

5

00:00:26.480  -->  00:00:35.129
algorithm. Previously, we studied the Dijkstra's
algorithm, it produces the shortest path from

6

00:00:35.129  -->  00:00:41.760
a single vertex to each vertex. We can think
of using it to solve the all pairs shortest

7

00:00:41.760  -->  00:00:48.449
path problem, by calling it starting from
each vertex. However, we have the negative

8

00:00:48.449  -->  00:00:54.460
edges problem, Dijkstra's algorithm doesn't
work well with negative edges, and we want

9

00:00:54.460  -->  00:01:01.570
our solution to handle negative edges. For
that, Johnson's algorithm starts by eliminating

10

00:01:01.570  -->  00:01:08.840
negative edges, then proceeds to call Dijkstra's
on each vertex, it's a two steps process.

11

00:01:08.840  -->  00:01:17.509
We already know about Dijkstra's algorithm,
but how to remove negative edges? By removing

12

00:01:17.509  -->  00:01:22.560
negative edges we don't mean removing them
completely from the graph, which may give

13

00:01:22.560  -->  00:01:30.320
wrong results, we just mean updating their
values to not be negative anymore. A simple

14

00:01:30.320  -->  00:01:36.590
solution we may think of is to identify the
smallest weight, subtract it from all edges,

15

00:01:36.590  -->  00:01:42.360
and we have no negative edges anymore. For
example for this graph, the smallest weight

16

00:01:42.360  -->  00:01:49.850
is -3. We subtract -3 from all edges' weights,
which is equivalent to adding 3, and we get

17

00:01:49.850  -->  00:01:57.060
this updated graph, it doesn't contain negative
edges anymore. But, you need to know that

18

00:01:57.060  -->  00:02:02.049
we cannot update weights in any way, we have
to do it in a way that preserves shortest

19

00:02:02.049  -->  00:02:08.940
paths. So if the shortest path from A to E
was A-B-C-E before updating, it must remain

20

00:02:08.940  -->  00:02:19.380
A-B-C-E after updating. Let's see if it's
the case for our updated graph. Before updating,

21

00:02:19.380  -->  00:02:26.340
the shortest path from A to E was ABCE. However,
after updating, the shortest path from A to

22

00:02:26.340  -->  00:02:35.210
E changed, it became ADE. Which is wrong,
our method of removing negative edges is wrong,

23

00:02:35.210  -->  00:02:44.060
it shouldn't alter shortest paths. The way
we update weights should, for each pair (s,t),

24

00:02:44.060  -->  00:02:50.230
add the same weight for every path that goes
from s to t, to keep things right. Which,

25

00:02:50.230  -->  00:02:56.319
unfortunately, was not the case here. This
is why we will see another way of updating,

26

00:02:56.319  -->  00:03:04.650
it's the one Johnson's algorithm uses. We
start by adding a new vertex q. We add an

27

00:03:04.650  -->  00:03:11.540
edge of weight 0 from q to each other vertex.
And using Bellman-Ford algorithm, we calculate

28

00:03:11.540  -->  00:03:19.200
the shortest distance from q to each vertex,
that we put in a table named h, so h[v] represents

29

00:03:19.200  -->  00:03:25.690
the shortest distance from q to v. Then we
remove q from the graph, and for each edge

30

00:03:25.690  -->  00:03:37.590
(u, v, w), we reweight w with this formula:
w(u,v) = w(u,v) + h[u] - h[v]. With this example

31

00:03:37.590  -->  00:03:43.840
we get this updated graph. As you can see,
it contains no negative weights, and for each

32

00:03:43.840  -->  00:03:49.370
couple (s, t), it added the same weight for
each path that goes from s to t, and we will

33

00:03:49.370  -->  00:03:56.690
prove it. We need to prove two things, that
all edges won't have a negative weight, and

34

00:03:56.690  -->  00:04:01.579
that for each couple of vertices (s, t), it
adds the same weight for each path that goes

35

00:04:01.579  -->  00:04:08.900
from s to t. Let's start with the first one.
First of all, we don't have to worry about

36

00:04:08.900  -->  00:04:15.230
negative cycles, because they would be detected
in the first step, where we use Bellman-Ford,

37

00:04:15.230  -->  00:04:23.580
remember that Bellman-Ford detects negative
cycles. Imagine that we have an edge (u, v,

38

00:04:23.580  -->  00:04:31.070
w). We want to prove that the updated weight,
w(u,v) + h[u] - h[v], is greater than or equal

39

00:04:31.070  -->  00:04:38.990
to 0. We have two cases: The first case is
when the shortest path from q to v, whose

40

00:04:38.990  -->  00:04:48.440
length is h[v], passes from u and takes the
edge (u, v). So h[v] would be equal to h[u]+w(u,v).

41

00:04:48.440  -->  00:04:54.009
Which means that the shortest path from q
to v is the shortest path from q to u, + the

42

00:04:54.009  -->  00:05:03.441
edge (u,v). The condition holds. And the second
case is when the shortest path from q to v

43

00:05:03.441  -->  00:05:09.690
is found somewhere else. By definition, it's
the shortest path, there is no path that has

44

00:05:09.690  -->  00:05:15.310
a smaller weight. Which means that the path
that passes from u then takes the edge (u,v)

45

00:05:15.310  -->  00:05:22.810
cannot be shorter, so its length, h[u]+w(u,v),
is greater than or equal to h[v], because

46

00:05:22.810  -->  00:05:35.300
h[v] is the shortest distance. We take h[v]
to the other side, and the condition holds.

47

00:05:35.300  -->  00:05:45.860
From these two cases, we deduce that updated
weights are not negative. Beauty of mathematics.

48

00:05:45.860  -->  00:05:51.039
Second thing to prove, that given a couple
(s, t), applying reweighting this way adds

49

00:05:51.039  -->  00:05:58.530
the same weight to each path from s to t.
A path from s to t, starts from s, then passes

50

00:05:58.530  -->  00:06:04.680
from some vertices, then ends at t. We can
define it with the list of edges it passes

51

00:06:04.680  -->  00:06:11.790
from. The first one is (s, p0), because it
starts from s. Then we have the edge (p0,

52

00:06:11.790  -->  00:06:18.550
p1), then the edge (p1, p2), and so on and
so on, then the edge (pn-1, pn), and finally

53

00:06:18.550  -->  00:06:26.569
the edge (pn, t), it ends at t. The weight
of a path is simply the sum of weights of

54

00:06:26.569  -->  00:06:41.540
its edges, here we have w(s, p0) + w(p0, p1)
+ ... + w(pn-1, pn) + w(pn, t). This is before

55

00:06:41.540  -->  00:06:49.020
reweighting. When reweighting, for each edge
(u, v), we're adding h[u] - h[v] to its weight.

56

00:06:49.020  -->  00:07:01.569
In the expression, w(s, p0) becomes w(s, p0)
+ h[s] - h[p0]. w(p0, p1) becomes w(p0, p1)

57

00:07:01.569  -->  00:07:15.990
+ h[p0] - h[p1]. And so on and so on, w(pn,
t) becomes w(pn, t) + h[pn] - h[t]. Let's

58

00:07:15.990  -->  00:07:23.300
change position of elements. And here, we
can start cancelling opposite terms, we cancel

59

00:07:23.300  -->  00:07:33.310
- h[p0] and + h[p0], we cancel - h[p1] and
+ h[p1], and so on and so on, and we cancel

60

00:07:33.310  -->  00:07:41.030
- h[pn] + h[pn]. What remains is the sum of
weights of edges, which was the weight of

61

00:07:41.030  -->  00:07:49.979
the path before reweighting, + h[s] - h[t].
And we proved that for each couple (s, t),

62

00:07:49.979  -->  00:07:55.760
no matter what intermediate vertices we take
to go from s to t, in other words, no matter

63

00:07:55.760  -->  00:08:02.911
what vertices the path is made of, the same
weight will be added, h[s] - h[t], so it's

64

00:08:02.911  -->  00:08:09.760
guaranteed that the shortest path will not
change. It's like we have a list of people

65

00:08:09.760  -->  00:08:15.490
and Aimen is the poorest one, if we give them
the same cash bonus, Aimen will still be the

66

00:08:15.490  -->  00:08:25.389
poorest. We proved the two properties, so
our reweighting technique works, Johnson's

67

00:08:25.389  -->  00:08:32.260
algorithm works. Now that we're done with
reweighting, we apply Dijkstra's algorithm

68

00:08:32.260  -->  00:08:41.140
starting from each vertex, and we put everything
in two hash tables dist and prev. But here

69

00:08:41.140  -->  00:08:47.020
we got distances of the updated graph, we
want distances of the original graph, this

70

00:08:47.020  -->  00:08:54.960
is why we have to apply a modification to
dist table. To update weights w(u, v), we

71

00:08:54.960  -->  00:09:02.420
added h[u] - h[v]. So to do the inverse operation
and go back to the original weights, we subtract

72

00:09:02.420  -->  00:09:11.800
h[u] - h[v], which is equivalent to adding
h[v] - h[u]. This is why for each couple (u,v),

73

00:09:11.800  -->  00:09:18.630
we update dist[u][v] by adding h[v] - h[u],
to get shortest distances in the original

74

00:09:18.630  -->  00:09:31.120
graph. And this is how Johnson's algorithm
works. Let's implement all of this. First,

75

00:09:31.120  -->  00:09:36.000
because we will modify the graph, it's better
to copy it, to not modify the one we passed

76

00:09:36.000  -->  00:09:44.501
as parameter. Then we add a vertex q, by creating
a key for it in the graph. After it, we add

77

00:09:44.501  -->  00:09:52.521
an edge from q to u of weight 0 for each vertex
u. Then, we get the h table by using Bellman-ford

78

00:09:52.521  -->  00:09:59.080
starting from the vertex q. Now if h is null,
then bellman-ford returned null, we have a

79

00:09:59.080  -->  00:10:06.610
negative cycle, we directly exit by returning
null. Else, we reweight edges, for each edge

80

00:10:06.610  -->  00:10:16.270
(u, v) with a weight w, w becomes w + h[u]
- h[v]. Then we can delete the vertex q, we

81

00:10:16.270  -->  00:10:22.940
don't need it anymore. Now we create two hash
tables dist and prev. And for each vertex

82

00:10:22.940  -->  00:10:28.870
u, we apply Dijkstra's algorithm starting
from it. We get a distances table, that we

83

00:10:28.870  -->  00:10:36.860
put in dist[u], and a previous table, that
we put in prev[u]. Last step, to get distances

84

00:10:36.860  -->  00:10:42.540
of the original graph and not the updated
one, we traverse all possible couples of vertices

85

00:10:42.540  -->  00:10:51.900
(u, v), and we update dist[u][v], we add to
it h[v] - h[u]. We're done, we return dist

86

00:10:51.900  -->  00:11:00.630
and prev tables. For path reconstruction,
we make a function that takes as parameters

87

00:11:00.630  -->  00:11:07.200
prev table, source and destination. If source
is equal to destination, we return a path

88

00:11:07.200  -->  00:11:13.210
with source only, the shortest path from a
vertex to itself is by staying on itself.

89

00:11:13.210  -->  00:11:19.190
Else if prev[src][dest] is null, then we don't
have a path at all from source to destination,

90

00:11:19.190  -->  00:11:25.610
we return an empty array. Else, we keep moving
backwards as in Dijkstra and Bellman-Ford,

91

00:11:25.610  -->  00:11:31.240
we create an array path with destination in
it, we create a temporary vertex to move that

92

00:11:31.240  -->  00:11:37.670
starts at dest, and while prev[src][vertex]
exists, we go to it, and we add it to the

93

00:11:37.670  -->  00:11:47.730
path. After the loop we return the path reversed,
to get the right order of vertices. And we're

94

00:11:47.730  -->  00:11:56.200
done implementing Johnson's algorithm. For
the time complexity, we have |V|+|E| for copying

95

00:11:56.200  -->  00:12:04.190
the graph, because we traverse it, |V| for
adding edges from q to vertices, |V||E| for

96

00:12:04.190  -->  00:12:11.190
Bellman-Ford, |V|+|E| for traversing edges
and reweighting them, then we call Dijkstra's

97

00:12:11.190  -->  00:12:18.331
starting from each vertex. So we traverse
the |V| vertices, and for each vertex, we

98

00:12:18.331  -->  00:12:27.380
have |E|+|V|log|V|, the time complexity of
Dijkstra's algorithm. And finally, we have

99

00:12:27.380  -->  00:12:36.880
|V|² for traversing all couples of vertices.
In total, we get this sum. We simplify it,

100

00:12:36.880  -->  00:12:46.520
and we get an O(|V||E|+|V|²log|V|) time complexity
for Johnson's algorithm. Which is more efficient

101

00:12:46.520  -->  00:12:54.170
for sparse graphs than Floyd-Warshall. We've
reached the end of this lecture, I hope that

102

00:12:54.170  -->  00:12:59.540
you understood how Johnson's algorithm works,
ask questions if you didn't, and see you in

103

00:12:59.540  -->  00:13:00.360
the next lecture.
