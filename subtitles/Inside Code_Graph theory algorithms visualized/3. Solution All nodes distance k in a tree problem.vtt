WEBVTT
1

00:00:00.120  -->  00:00:05.220
Welcome back to the course, in this lecture we 
will have a practice problem before we move to  

2

00:00:05.220  -->  00:00:13.080
the next chapter. We have an out-tree, a start 
node, and an integer k. We want to find values of  

3

00:00:13.080  -->  00:00:20.100
nodes that are at a distance of k from that start 
node, knowing that one unit of distance is a move  

4

00:00:20.100  -->  00:00:27.300
from the node to a child or to its parent. For 
example if we have this tree, the start node is B,  

5

00:00:27.300  -->  00:00:37.200
and k is 3, nodes that are at a distance of k are 
these ones, the output should be G H I J P Q R.  

6

00:00:39.180  -->  00:00:45.240
For H for example, it's included in the output 
because there is a distance of 3 from B to H,  

7

00:00:45.240  -->  00:00:50.040
we go from B to A, then from 
A to D, then from D to H.  

8

00:00:51.720  -->  00:00:58.200
How to solve this problem? Here we're dealing 
with distance between vertices, we want to find  

9

00:00:58.200  -->  00:01:04.440
vertices of distance k. And when we talk about 
distance, by distance we mean the number of  

10

00:01:04.440  -->  00:01:10.320
edges between the two vertices, we should directly 
think of breadth-first search algorithm. Because  

11

00:01:10.320  -->  00:01:16.860
BFS traverses the structure level by level and 
can find the shortest path between two vertices.  

12

00:01:19.500  -->  00:01:25.200
Here we don't care about the shortest path because 
we're dealing with a tree, there is exactly one  

13

00:01:25.200  -->  00:01:32.220
path between each two nodes, so it's obviously 
the shortest one. But, we want nodes that are  

14

00:01:32.220  -->  00:01:38.040
at a distance of k from the source node, in other 
terms, we're searching for nodes of the level k.  

15

00:01:39.720  -->  00:01:45.180
However, even though the out-tree is a graph, 
it's not represented with an adjacency list  

16

00:01:45.180  -->  00:01:52.080
or adjacency matrix as usual, it's represented 
with Node objects, and we're given the root only,  

17

00:01:52.080  -->  00:01:57.120
knowing that the root is not necessarily 
the start node we want to start from.  

18

00:01:58.020  -->  00:02:03.420
Also, from a node, we have access to 
its children only, not its parent,  

19

00:02:03.420  -->  00:02:08.640
which is an issue because additional valid 
nodes can be found when going from the parent.  

20

00:02:10.800  -->  00:02:15.420
What's the solution then? Well, we can 
think of converting this tree to a graph  

21

00:02:15.420  -->  00:02:21.060
with adjacency list representation for example, 
and apply breadth-first search as we learnt.  

22

00:02:21.780  -->  00:02:27.540
But, we don't even need to convert, remember 
that to work with a graph, we just need to be  

23

00:02:27.540  -->  00:02:34.740
able to go from a vertex to its neighbors. 
Is it possible here? Let's see. In a tree,  

24

00:02:34.740  -->  00:02:40.800
the neighbors of a node are its children, and its 
parent, are we able to go to them? For children,  

25

00:02:40.800  -->  00:02:48.600
yes, we have the children references array stored 
in the object. But for the parent, no. No worries,  

26

00:02:48.600  -->  00:02:54.900
we can still create a hash table where the key is 
a node, and the value is its parent. We fill it,  

27

00:02:54.900  -->  00:03:01.440
and we apply bfs, we can even apply dfs if 
we want by the way, but let's stick with bfs.  

28

00:03:03.840  -->  00:03:10.500
How to fill the parents hash table? For that, 
we just apply bfs starting from the root while  

29

00:03:10.500  -->  00:03:17.400
with the actual node, for each neighbor, we set 
node as the parent of neighbor. After filling the  

30

00:03:17.400  -->  00:03:22.980
hash table, we can now apply bfs again, from 
the start node this time, to go to children  

31

00:03:22.980  -->  00:03:28.860
we use children array, and to move to parent 
we use parent map, and we solved the problem.  

32

00:03:31.740  -->  00:03:36.960
Recap before moving to code, we have an 
out-tree, represented with Node objects,  

33

00:03:36.960  -->  00:03:43.620
a node object contains its value and the array of 
its children, we have a start node, an integer k,  

34

00:03:43.620  -->  00:03:48.960
and we want to find all nodes that are at 
a distance of k from that specific node,  

35

00:03:48.960  -->  00:03:53.580
knowing that one unit of distance is 
a move to a child or to the parent.  

36

00:03:55.560  -->  00:04:01.200
To solve this problem, we can apply breadth-first 
search from the start node to find nodes of the  

37

00:04:01.200  -->  00:04:07.140
level k. However, to be able to move from 
a node to all its neighbors, we also need  

38

00:04:07.140  -->  00:04:13.380
a reference to the parent, which we don't. For 
that, we create a hash table and we apply bfs,  

39

00:04:13.380  -->  00:04:19.500
or dfs, to fill it, for each node, for each 
neighbor, we set node as the parent of neighbor.  

40

00:04:21.300  -->  00:04:27.960
Last step, we apply bfs but from the specific 
node this time, while keeping track of the level  

41

00:04:27.960  -->  00:04:34.740
of nodes. When dequeuing, if the level of the 
actual node is k, we add its value to the output.  

42

00:04:37.320  -->  00:04:43.620
Let's implement this. We first have a function 
get_parent_map, we start by creating a hash table,  

43

00:04:43.620  -->  00:04:50.820
and we know that the root has no parent so we put 
null. Now we launch bfs starting from the root,  

44

00:04:50.820  -->  00:04:55.500
we create a queue, we put root in 
it, and while the queue is not empty,  

45

00:04:55.500  -->  00:05:00.000
we dequeue a node, and we traverse its 
neighbors, in other words, its children.  

46

00:05:02.580  -->  00:05:07.200
Note that we're traversing the tree from top 
to bottom, so we don't go back to parent,  

47

00:05:07.200  -->  00:05:12.120
this is why neighbors are the children 
and we don't need a visited set because  

48

00:05:12.120  -->  00:05:18.840
we're not going back to the same node. For each 
child of the node, we set node as the parent of  

49

00:05:18.840  -->  00:05:24.120
child in the hash table. Also, we add the 
child to the queue for next iterations.  

50

00:05:26.040  -->  00:05:31.320
We finished filling the parent map, we return 
it as a result of the call in the distance_k  

51

00:05:31.320  -->  00:05:38.820
function. We move to the second part of the 
algorithm, launching bfs from the target node.  

52

00:05:39.360  -->  00:05:44.280
First we create an array output where we 
will put values we're searching for. We  

53

00:05:44.280  -->  00:05:48.540
also create a queue and put the target 
in it because we will start from there.  

54

00:05:50.340  -->  00:05:55.200
We want to also keep track of the level, 
this is why we store a tuple (node, level),  

55

00:05:55.200  -->  00:06:00.300
here the tuple (target, 0), because 
the level of the initial node is 0.  

56

00:06:01.740  -->  00:06:07.020
And we also need a visited set because we will 
move to the parent this time, so it's possible  

57

00:06:07.020  -->  00:06:12.840
to move to the same node multiple times this 
time, this is why we use visited set to avoid it.  

58

00:06:13.680  -->  00:06:22.500
Initially we set the initial node as visited, 
the start node. We can start, while the queue  

59

00:06:22.500  -->  00:06:28.020
isn't empty, we dequeue a tuple from the queue, 
we put values into two variables node and level.  

60

00:06:28.920  -->  00:06:34.920
Now if the level of the actual node is k, it's one 
of the nodes we're searching for, we add its value  

61

00:06:34.920  -->  00:06:42.480
to the output. Then, we traverse neighbors, but 
what are neighbors of the actual node? Neighbors  

62

00:06:42.480  -->  00:06:48.000
of a node are its children, and its parent, so 
we create an array neighbors that contains its  

63

00:06:48.000  -->  00:06:54.720
children + the parent that we extract from the 
hash map we made. Now for each neighbor, we need  

64

00:06:54.720  -->  00:07:00.780
3 conditions to add it to the queue. First, its 
level should be less than k, because once we reach  

65

00:07:00.780  -->  00:07:07.080
the level k, we don't need to continue further. 
Second condition, the node should not be null,  

66

00:07:07.080  -->  00:07:12.780
it should exist, because for example when we 
enqueue the root's parent we get a null value,  

67

00:07:12.780  -->  00:07:18.840
we shouldn't work with it. And last condition 
obviously, the node should not be visited.  

68

00:07:19.680  -->  00:07:25.020
If these conditions are respected, we set the 
node as visited and we enqueue it with level+1  

69

00:07:25.560  -->  00:07:33.360
because it belongs to the next level, classic 
bfs. After the loop, we just return the output,  

70

00:07:33.360  -->  00:07:39.960
it contains values of nodes at a distance of k 
from target. And we've implemented the solution.  

71

00:07:42.120  -->  00:07:48.660
For the time complexity, we're just applying bfs 
twice, we get an an O(|V|+|E|) time complexity.  

72

00:07:48.660  -->  00:07:56.040
And in a tree, the number of edges is the 
number of vertices minus one, |E| is |V|-1.  

73

00:07:56.940  -->  00:08:03.480
By replacing, we get an O(|V|) time complexity, 
where |V| is the number of nodes in the tree.  

74

00:08:05.160  -->  00:08:10.740
By the way, this problem is similar 
to the leetcode problem number 863,  

75

00:08:10.740  -->  00:08:16.440
the only difference is that in leetcode the 
given tree is a binary tree, defined with a  

76

00:08:16.440  -->  00:08:21.480
left and right children, while here we worked 
with a tree that can have more than 2 children,  

77

00:08:21.480  -->  00:08:27.660
defined with an array of children. We've reached 
the end of this lecture, now we need to start  

78

00:08:27.660  -->  00:08:33.240
talking about spanning trees and minimum 
spanning trees, see you in the next lecture!
