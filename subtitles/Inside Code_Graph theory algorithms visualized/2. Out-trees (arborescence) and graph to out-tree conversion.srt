1

00:00:00,240  -->  00:00:05,580
Welcome back to the course, in this lecture we 
will talk about out-trees and how to convert a  

2

00:00:05,580  -->  00:00:12,180
graph to an out-tree. Out-trees, also called 
arborescence, are important to know because  

3

00:00:12,180  -->  00:00:18,060
the popular tree data structure you probably 
learnt about before is in reality an out-tree,  

4

00:00:18,060  -->  00:00:24,300
a rooted tree with directed edges away from 
the root. In this lecture we will see how  

5

00:00:24,300  -->  00:00:32,220
is it represented, some terminology, and how to 
perform the conversion. An out-tree is a graph,  

6

00:00:32,220  -->  00:00:37,680
so we can represent it as we were representing 
graphs during this course, with an adjacency  

7

00:00:37,680  -->  00:00:45,120
list or an adjacency matrix. But we can also 
represent it with a recursive Node type.  

8

00:00:45,120  -->  00:00:51,840
A node contains an attribute value, it represents 
the label of the node, and an array children that  

9

00:00:51,840  -->  00:00:58,260
contains all nodes that the node can go to, it's 
like the array of a vertex in an adjacency list.  

10

00:00:59,700  -->  00:01:04,140
It's called children because in terminology 
we have a parent/child relationship.  

11

00:01:04,860  -->  00:01:11,160
For example for this node, the value is K, 
and its children are the nodes B, L, and F.  

12

00:01:13,500  -->  00:01:18,960
And you can see that a node doesn't have the 
reference to its parent, so it cannot access it,  

13

00:01:18,960  -->  00:01:25,380
this is why it's similar to a directed edge, 
we can go from a parent to a child but not the  

14

00:01:25,380  -->  00:01:32,280
opposite. If we add the parent it becomes an 
undirected edge, we can move back and forth.  

15

00:01:34,020  -->  00:01:40,380
Let's move to some terminology. We have the root, 
we talked about it before, it's from where the  

16

00:01:40,380  -->  00:01:47,340
tree originates. We also have the terms parent 
and child. In an out-tree edges are directed,  

17

00:01:47,340  -->  00:01:53,160
the node from where the edge goes out is the 
parent, and the node where it enters is the child.  

18

00:01:54,960  -->  00:01:57,900
And children of a same node are called siblings.  

19

00:02:00,000  -->  00:02:04,860
We also have leaves, nodes that are at the 
bottom of the tree, they have no children.  

20

00:02:06,000  -->  00:02:10,920
And we have internal nodes, nodes 
that are neither root nor leaves.  

21

00:02:12,780  -->  00:02:19,380
Another important term is levels. An out-tree 
can be split into levels, the level k of a tree  

22

00:02:19,380  -->  00:02:26,460
contains nodes that are at a distance of k from 
the root. So level 0 contains the root only, then  

23

00:02:26,460  -->  00:02:32,340
level 1 contains children of the root, then level 
2 children of children of the root, and so on.  

24

00:02:34,860  -->  00:02:38,640
And you have to know that traversing 
an out-tree with breadth-first search  

25

00:02:38,640  -->  00:02:43,140
will traverse nodes of the level 
0, then level 1, then level 2,  

26

00:02:43,140  -->  00:02:48,720
and so on, this is why we say that 
BFS traverses a tree level by level.  

27

00:02:52,320  -->  00:02:57,360
Another term is the depth, the depth of a 
node is simply the level where it's located,  

28

00:02:57,360  -->  00:03:03,420
which represents its distance from 
the root. We also have the height,  

29

00:03:03,420  -->  00:03:08,640
the height of a tree is the length of the 
longest path from its root to one of its leaves.  

30

00:03:10,680  -->  00:03:17,520
Last one, k-ary tree, it's a tree where each 
node has at most k children. For example a  

31

00:03:17,520  -->  00:03:23,280
binary tree is a 2-ary tree, each node has 
at most 2 children, left and right children.  

32

00:03:26,340  -->  00:03:32,280
Now imagine that we have an undirected graph, a 
node that we want to design as a root, and we want  

33

00:03:32,280  -->  00:03:39,120
to convert it to an out-tree, with a Node type 
representation. Our graph is actually represented  

34

00:03:39,120  -->  00:03:45,480
by an adjacency list, but we want the tree to be 
represented with Node objects, so starting from  

35

00:03:45,480  -->  00:03:50,280
values in the adjacency list, we will create 
a bunch of nodes and connect them together.  

36

00:03:51,660  -->  00:03:56,340
First step, we create a node root 
that contains the value of the vertex  

37

00:03:56,340  -->  00:04:02,520
we want to set at the root. We also need a 
visited set to traverse the adjacency list.  

38

00:04:03,420  -->  00:04:09,060
And now, we just apply dfs while for 
each vertex we visit, we create nodes  

39

00:04:09,060  -->  00:04:15,180
for its unvisited neighbors and add them to its 
children, we got an out-tree with G as a root.  

40

00:04:17,040  -->  00:04:24,180
How to code this. First we need a class Node, 
it contains an attribute val, the value, and  

41

00:04:24,180  -->  00:04:31,560
an attribute children, an array of nodes that is 
empty by default. Now we need a function dfs that  

42

00:04:31,560  -->  00:04:37,200
takes as parameters the graph we want to convert, 
the node we're working on, and the visited set.  

43

00:04:38,520  -->  00:04:45,780
First dfs step, add the actual vertex to visited. 
You can see that here we're adding the value and  

44

00:04:45,780  -->  00:04:52,620
not the node itself, because here node is of type 
Node, but in an adjacency list we work with the  

45

00:04:52,620  -->  00:04:58,320
values of nodes, not nodes themselves, this is 
why we add the value of the node to visited.  

46

00:05:00,120  -->  00:05:03,180
In the previous example at the beginning we would  

47

00:05:03,180  -->  00:05:06,840
add the value 'G' to visited and 
not the node with G as a value.  

48

00:05:10,260  -->  00:05:16,500
After it we traverse unvisited neighbors. 
For each unvisited neighbor, remember that  

49

00:05:16,500  -->  00:05:21,480
we need to create a node for it, add it to 
children of the actual node, and go to it.  

50

00:05:22,080  -->  00:05:26,160
And this is what we do, we create 
a node that contains its value,  

51

00:05:26,160  -->  00:05:31,560
we add it to children of the actual node, 
and we go to it by calling dfs on it.  

52

00:05:32,580  -->  00:05:39,180
And in the main to_out_tree() function, we take a 
graph as parameter, and the value of the vertex we  

53

00:05:39,180  -->  00:05:45,180
want to design as a root. Inside it, we create 
the root node, it contains the value we passed  

54

00:05:45,180  -->  00:05:52,080
as parameter, we create a visited set, and we 
call dfs to build the tree. After doing so,  

55

00:05:52,080  -->  00:05:59,520
we return root, the root of the tree we made, 
we converted graph to an out-tree. Obviously,  

56

00:05:59,520  -->  00:06:05,820
here we assumed that the graph respects the three 
conditions, undirected connected and acyclic.  

57

00:06:06,420  -->  00:06:13,260
And the algorithm is in O(|V|) time because we're 
just applying depth-first search, and in a tree,  

58

00:06:13,260  -->  00:06:21,840
the number of edges is related to the number of 
vertices, it's the number of vertices - 1. We  

59

00:06:21,840  -->  00:06:27,360
reached the end of this lecture, we learnt more 
about the out-tree and how to root a tree. In the  

60

00:06:27,360  -->  00:06:31,560
next lecture, we will solve an interesting 
trees related coding problem to practice.
