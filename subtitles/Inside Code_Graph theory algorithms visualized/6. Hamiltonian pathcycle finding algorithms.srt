1

00:00:00,000  -->  00:00:05,340
Welcome to this lecture where we will learn to 
find a Hamiltonian circuit in a graph by using  

2

00:00:05,340  -->  00:00:13,560
backtracking. The process is simple, we start 
from a vertex, and we keep trying paths and see  

3

00:00:13,560  -->  00:00:19,560
if one of them leads to completing a Hamiltonian 
cycle. If the path we're building gets stuck,  

4

00:00:19,560  -->  00:00:25,860
we backtrack and try something else. If all 
possibilities don't lead to completing a  

5

00:00:25,860  -->  00:00:34,020
Hamiltonian cycle, then we have no such a cycle in 
the graph. This process is quite simple but lacks  

6

00:00:34,020  -->  00:00:39,900
explanation, we need to explain some steps more 
in detail to have a clear idea on how it works.  

7

00:00:41,220  -->  00:00:47,040
We have to explain what do we mean by start from 
a vertex, trying paths, completing Hamiltonian  

8

00:00:47,040  -->  00:00:54,720
cycle, gets stuck, backtrack, try something else, 
all possibilities don't lead. Let's explain all  

9

00:00:54,720  -->  00:01:00,900
of these. Start from a vertex, we know what 
does it mean but what vertex to start from?  

10

00:01:00,900  -->  00:01:07,200
If a graph contains a Hamiltonian cycle starting 
from a vertex, then we can get a Hamiltonian cycle  

11

00:01:07,200  -->  00:01:15,000
by starting from any other vertex. For example if 
we have the cycle A B C E F D A, then we can just  

12

00:01:15,000  -->  00:01:24,660
kinda rotate the path and start from B, we get B C 
E F D A B. We rotate it again and get C E F D A B  

13

00:01:24,660  -->  00:01:30,660
C. We deduce that it doesn't matter from where 
we start, we just choose an arbitrary vertex.  

14

00:01:33,540  -->  00:01:39,600
Next thing to explain, trying paths. We try 
a path by choosing a neighbor to continue  

15

00:01:39,600  -->  00:01:45,300
from and remembering vertices we're adding 
to the path, and see what result it gives.  

16

00:01:47,220  -->  00:01:53,280
Completing Hamiltonian cycle, we complete a 
Hamiltonian cycle by adding the final edge.  

17

00:01:53,280  -->  00:01:58,800
To know that we can add the final edge 
from the actual vertex, two conditions:  

18

00:01:59,340  -->  00:02:04,680
All vertices must be present in the path we're 
building, and there must be an edge from the  

19

00:02:04,680  -->  00:02:11,940
actual vertex, which is the last vertex we added 
to the path, p_n-1, to the start vertex, which is  

20

00:02:11,940  -->  00:02:20,700
the first vertex we added to the path, p0. Both 
of these conditions are necessary as you can see.  

21

00:02:22,380  -->  00:02:28,740
Next term, gets stuck. Remember than we cannot 
go back to a vertex that is already in the path,  

22

00:02:28,740  -->  00:02:35,100
so when extending the actual path, when moving to 
a neighbor, we must verify that we didn't visit  

23

00:02:35,100  -->  00:02:42,720
it yet. So if a vertex can only go to visited 
vertices and has no final edge, then we're stuck,  

24

00:02:42,720  -->  00:02:50,160
we cannot continue. Backtrack, we backtrack by 
going to the previous call, for example if F  

25

00:02:50,160  -->  00:02:56,580
calls E, we do some work on E, then we backtrack 
to F, we go back to the call that called F.  

26

00:02:58,260  -->  00:03:03,120
It's what always happens in dfs, every 
time we finish a recursive dfs call,  

27

00:03:03,120  -->  00:03:08,820
it goes back to the previous call by checking 
the call stack, to finish remaining instructions.  

28

00:03:10,560  -->  00:03:15,780
Try something else, it means, now that we've 
seen that the neighbor we went from didn't  

29

00:03:15,780  -->  00:03:21,780
lead to a cycle, we move to the next unvisited 
neighbor and go from there to see if this time  

30

00:03:21,780  -->  00:03:29,280
we find a positive result. Last term, all 
possibilities don't lead. It happens when  

31

00:03:29,280  -->  00:03:35,220
all neighbors of the start vertex don't lead to 
a valid cycle, when the initial call ends without  

32

00:03:35,220  -->  00:03:41,460
returning a positive result before, we deduce 
that there is no Hamiltonian cycle in the graph.  

33

00:03:43,920  -->  00:03:49,620
Let's see how the process really works with an 
example. We can start from any vertex so let's  

34

00:03:49,620  -->  00:03:56,700
start from A, we add it to our path. We can go to 
B, C, and D, because all of them are unvisited.  

35

00:03:57,660  -->  00:04:04,320
Let's go to B, and we add it to the path. From 
B we can go to A, but it's already in the path.  

36

00:04:04,320  -->  00:04:12,360
Let's go to C instead, it's not in the path. We 
add it to the path. From C we have A, in path, B,  

37

00:04:12,360  -->  00:04:22,260
in path, D, not in path, we go to it and we add to 
the path. From D we have A, in path, C, in path,  

38

00:04:22,260  -->  00:04:30,660
E, not in path, we go. From E we have B, in path, 
C, in path, D, in path, F, not in path, we go.  

39

00:04:30,660  -->  00:04:36,540
From F, we have C, D, and E, and they're all 
in path, and we don't have an edge to finish  

40

00:04:36,540  -->  00:04:42,300
the cycle, so we're stuck, we cannot continue, 
we need to backtrack and try something else.  

41

00:04:44,100  -->  00:04:50,160
Important thing, we need to remove F from the path 
before we backtrack, it's no longer in the path.  

42

00:04:51,240  -->  00:04:57,960
Back to E, we tried all not in path neighbors and 
we didn't get a positive result, so we're stuck,  

43

00:04:57,960  -->  00:05:05,520
we remove E and we backtrack. Back to D, 
we try the next not in path neighbor, F.  

44

00:05:06,120  -->  00:05:12,780
From F we can only go to E. From E, all neighbors 
are in path, and we cannot finish the cycle  

45

00:05:12,780  -->  00:05:19,620
because we don't have an edge to A, so we're 
stuck. Back to F, we're also stuck, nowhere to go.  

46

00:05:20,340  -->  00:05:25,620
We backtrack to D, also stuck, we tried 
all not in path neighbors, we backtrack.  

47

00:05:26,280  -->  00:05:33,060
Back to C, D didn't give a positive result 
so we try something else, we go to E instead.  

48

00:05:33,060  -->  00:05:40,800
From E we can go to D. From D we can only go to F. 
But we cannot continue from F, we backtrack to D.  

49

00:05:40,800  -->  00:05:50,220
From D same thing, we backtrack to E. Now from E 
we try F. From F we can only go to D. And from D,  

50

00:05:50,220  -->  00:05:55,980
we don't have a neighbor not in path, but, 
all vertices are in the path and we have an  

51

00:05:55,980  -->  00:06:02,760
edge to A, so we close the cycle, we found 
a Hamiltonian cycle, by using backtracking.  

52

00:06:06,840  -->  00:06:12,060
Let's implement this process. Our dfs 
function needs as parameters the graph,  

53

00:06:12,060  -->  00:06:17,160
the actual vertex, the path, which is an array 
that contains vertices we visited in order.  

54

00:06:17,940  -->  00:06:23,280
And because we will check if a vertex is in the 
path, instead of performing a linear search on  

55

00:06:23,280  -->  00:06:29,220
the path array, which is in O(n), we use a 
set in_path that contains vertices that are  

56

00:06:29,220  -->  00:06:35,880
in the path, which allows searching in O(1) 
in average. At the beginning of the function,  

57

00:06:35,880  -->  00:06:41,700
we add our vertex to the path from the 
end, and we also add it to the in_path set.  

58

00:06:42,960  -->  00:06:48,240
Now we start traversing outgoing edges of 
the actual vertex, to traverse neighbors.  

59

00:06:50,160  -->  00:06:57,120
We have three cases for an edge. First case, it's 
the final edge, it happens when all vertices are  

60

00:06:57,120  -->  00:07:02,340
in the path and the destination of that 
edge is the start vertex. In that case,  

61

00:07:02,340  -->  00:07:08,340
we found a Hamiltonian cycle, so we add the start 
vertex again to the path and we return the path.  

62

00:07:09,000  -->  00:07:14,400
We do so because the path of a Hamiltonian 
cycle starts and ends at the same vertex,  

63

00:07:14,400  -->  00:07:22,200
we must add the start vertex again to close 
the cycle. Second case, the destination vertex,  

64

00:07:22,200  -->  00:07:28,920
the neighbor, is not in the path yet. In that 
case, we go to it with a dfs call as usual,  

65

00:07:28,920  -->  00:07:36,060
and see if it returns a positive result. Third 
case, when both of these conditions are false,  

66

00:07:36,060  -->  00:07:40,620
then we have nothing to do with the 
actual edge, we just move to the next one.  

67

00:07:42,480  -->  00:07:47,880
In code, for the first case, we write, if the 
length of the path is equal to the number of  

68

00:07:47,880  -->  00:07:53,820
vertices, and neighbor is the start vertex, 
that we can find at the first cell of the path.  

69

00:07:55,200  -->  00:07:59,880
If it's the case, we add start vertex 
to the path, and we return the path.  

70

00:08:02,100  -->  00:08:07,860
Else if neighbor is not in in_path, we're in 
the second case. We go to it with a dfs call  

71

00:08:07,860  -->  00:08:14,340
and store the result in a variable. 
If the returned result is not null,  

72

00:08:14,340  -->  00:08:19,620
then we found a cycle, we return it to stop 
here and avoid touching the path again.  

73

00:08:21,480  -->  00:08:28,620
We don't need to handle the third case because 
nothing happens. And if all edges don't lead to  

74

00:08:28,620  -->  00:08:34,740
a Hamiltonian cycle, we need to backtrack, but 
before, we pop the last element from the path to  

75

00:08:34,740  -->  00:08:40,800
remove the actual vertex, we remove the actual 
vertex from in_path set, and we return null.  

76

00:08:43,440  -->  00:08:48,120
Now in the main hamiltonian_cycle 
function, we take as parameter a graph,  

77

00:08:48,120  -->  00:08:51,300
and we choose an arbitrary vertex as start vertex.  

78

00:08:52,620  -->  00:08:59,400
We also create an array path and a set in_path. 
And we return the result given by the function we  

79

00:08:59,400  -->  00:09:06,600
just made, it will do all the work. And we solved 
the Hamiltonian cycle problem with backtracking.  

80

00:09:09,660  -->  00:09:15,300
But, as said earlier, exact algorithms 
for this problem are in exponential time,  

81

00:09:15,300  -->  00:09:21,480
and this one is not an exception, it 
has an O(n!) time complexity, too slow.  

82

00:09:23,040  -->  00:09:29,940
We can optimize it a little bit with dynamic 
programming, we get O(nÂ²*2^n) time, but it's still  

83

00:09:29,940  -->  00:09:37,140
exponential. However, even if it's exponential, 
it remains a solution that we can use at least  

84

00:09:37,140  -->  00:09:43,680
with small instances, like with our game, games 
like this usually don't have a lot of locations  

85

00:09:43,680  -->  00:09:50,580
in a single level. So we just build the graph, and 
run our algorithm starting from the entry point,  

86

00:09:50,580  -->  00:09:59,760
we get a path that we can take to collect all keys 
and go back, if it's possible obviously. We've  

87

00:09:59,760  -->  00:10:04,560
reached the end of this lecture, where we learnt 
about how to find a Hamiltonian cycle in a graph  

88

00:10:04,560  -->  00:10:11,340
by using backtracking, I hope that you understood 
the whole process. See you in the next lecture!
