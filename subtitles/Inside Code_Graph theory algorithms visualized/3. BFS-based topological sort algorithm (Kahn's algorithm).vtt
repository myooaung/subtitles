WEBVTT
1

00:00:00.000  -->  00:00:05.340
Welcome back to the course, in this lecture we 
will discuss a second topological sort algorithm:  

2

00:00:05.340  -->  00:00:13.680
Kahn's algorithm. The previous one was based on 
dfs, but this one is based on bfs. And personally,  

3

00:00:13.680  -->  00:00:19.320
I prefer this one and find it more intuitive, 
I think that it will also be the case for you.  

4

00:00:20.880  -->  00:00:24.720
Okay let's take the example we've 
been working with, this graph.  

5

00:00:25.380  -->  00:00:31.260
Let's suppose that we want to find what's the 
first course we will take. It can not be any one,  

6

00:00:31.260  -->  00:00:37.920
for example we cannot start with course 6 
because it has courses 0 and 3 prerequisites.  

7

00:00:39.840  -->  00:00:43.620
Courses we can start with are 
ones with no prerequisites,  

8

00:00:43.620  -->  00:00:49.560
we can directly take them. To identify them, 
we can count the in-degree of each vertex,  

9

00:00:49.560  -->  00:00:56.880
remember that the in-degree of a vertex is the 
number of edges entering in it. And a vertex with  

10

00:00:56.880  -->  00:01:03.060
an in-degree of 0 means that it has no edges 
entering in it, so it has no prerequisites.  

11

00:01:04.020  -->  00:01:12.720
In this example we have courses 0, 1, 2, and 13, 
we can start with them. We decide to take them  

12

00:01:12.720  -->  00:01:21.240
in this order, 0 1 2 13, and let's see what 
happens when doing so. We took the course 0,  

13

00:01:21.240  -->  00:01:26.880
what does it mean? It means that 0 is now a 
satisfied prerequisite, which implies that  

14

00:01:26.880  -->  00:01:33.720
all vertices whose 0 is a prerequisite for, have 
one less constraint now, because it's satisfied.  

15

00:01:34.980  -->  00:01:41.640
In our case 0 is a prerequisite for 3 and 
6, we remove that constraint from 0 to them,  

16

00:01:41.640  -->  00:01:46.440
and we subtract their in-degree because 
the edge kinda doesn't exist anymore.  

17

00:01:48.840  -->  00:01:54.960
For course 6, it still has another constraint, 
we cannot take it yet, and same thing for 3,  

18

00:01:54.960  -->  00:02:02.520
it has two other constraints. Next course 
we decided to take is 1. And by taking it,  

19

00:02:02.520  -->  00:02:09.540
we satisfy another constraint for 3, we 
decrement its in-degree. Next course we  

20

00:02:09.540  -->  00:02:15.360
decide to take is 2. It's a prerequisite 
for 4 and 5, they have one less constraint.  

21

00:02:17.880  -->  00:02:25.800
4 still has an unsatisfied one, but what about 5? 
5 had only one prerequisite, taking 2 before it,  

22

00:02:25.800  -->  00:02:31.140
which is what we did now, so it has no 
more unsatisfied ones, we can take it.  

23

00:02:31.800  -->  00:02:35.640
This is why we put it in the queue 
of courses we're planning to take.  

24

00:02:37.440  -->  00:02:43.140
Next course is 13, we take it, and 
it has one outgoing neighbor, 14.  

25

00:02:44.280  -->  00:02:48.300
But 14 still has unsatisfied 
courses, we cannot take it yet.  

26

00:02:49.860  -->  00:02:54.840
Next course is 5, we take it, and 
its outgoing neighbors are 4 and 8,  

27

00:02:54.840  -->  00:03:01.380
they have one less constraint now. 5 was 
the last unsatisfied constraint of 4,  

28

00:03:01.380  -->  00:03:07.260
so we can take 4 now, all its constraints 
have been satisfied, we add it to the queue.  

29

00:03:09.120  -->  00:03:15.540
Next one to take is 4, we take it, and now 3 
7 and 8 have one less remaining constraint.  

30

00:03:16.800  -->  00:03:21.120
3 and 8 now have 0 remaining 
constraints, we add them to the queue.  

31

00:03:22.320  -->  00:03:27.420
I think that you started understanding the 
algorithm we're using here, we started by  

32

00:03:27.420  -->  00:03:32.940
counting the in-degree of each vertex, then we 
added courses with no prerequisites to the queue,  

33

00:03:32.940  -->  00:03:38.340
those with an in-degree of 0. After 
it, for each element in the queue,  

34

00:03:38.340  -->  00:03:43.980
we take it, in other words we add it to the 
ordering, and we check its outgoing neighbors.  

35

00:03:44.820  -->  00:03:50.400
For each neighbor, we decrement the in-degree, 
because if you noticed, the in-degree here  

36

00:03:50.400  -->  00:03:55.980
represents the number of remaining unsatisfied 
constraints, this is why every time we take  

37

00:03:55.980  -->  00:04:01.620
a course, it's not unsatisfied anymore, we 
decrement in-degree of its outgoing neighbors.  

38

00:04:03.720  -->  00:04:10.260
And if the in-degree of a neighbor becomes 0, then 
we satisfied all its constraints, we can take it,  

39

00:04:10.260  -->  00:04:15.300
we add it to the queue, we just finish courses 
that entered before it and we go to it.  

40

00:04:17.880  -->  00:04:22.980
Let's continue with our example, it should 
be easier to understand now that you know  

41

00:04:22.980  -->  00:04:30.420
the method we're using. Next one is 3, we take 
it, and now 6 and 7 have one less constraint.  

42

00:04:31.140  -->  00:04:38.040
We can't take 7 yet, but 6 has no more unsatisfied 
courses, we can take it, we add it to the queue.  

43

00:04:38.640  -->  00:04:45.960
Then we have 8, we decrement in-degree of 11, it 
becomes 0, we add it to the queue. Then we have 6,  

44

00:04:45.960  -->  00:04:50.700
we decrement in-degree of 9 and 7, 
they both become 0, we add them.  

45

00:04:51.360  -->  00:05:00.600
Then 11, we decrement in-degree of 14, but it's 
not 0 yet. Then 9, we decrement 10 and 12. Then 7,  

46

00:05:00.600  -->  00:05:07.920
we decrement 10, and we can take it now. Then 
10, we decrement 12 and 14, they become 0,  

47

00:05:07.920  -->  00:05:16.080
we take them. Then 12, it has no outgoing 
neighbors, and 14, same thing. The queue is  

48

00:05:16.080  -->  00:05:27.840
empty now, so we finished the process, we got 
our ordering, 0 1 2 13 5 4 3 8 6 11 9 7 10 12.  

49

00:05:31.140  -->  00:05:34.140
You can notice that even if it's the same example,  

50

00:05:34.140  -->  00:05:40.320
we didn't get the same ordering as the one we got 
with the dfs algorithm in the previous lecture.  

51

00:05:40.320  -->  00:05:46.440
Which is not surprising because both algorithms 
behave differently, and a topological sort isn't  

52

00:05:46.440  -->  00:05:51.660
always unique as said in the introduction, 
the important is that it respects conditions.  

53

00:05:54.600  -->  00:05:59.640
During the example we've seen the pseudocode 
of this algorithm, let's try to implement  

54

00:05:59.640  -->  00:06:05.100
it. First of all we need to count the 
in-degree of each vertex, how to proceed?  

55

00:06:05.820  -->  00:06:11.520
The in-degree of a vertex is the number of 
edges entering in it, so for each edge (u,v),  

56

00:06:11.520  -->  00:06:17.340
we increment the in-degree of v, the 
destination. With an adjacency list,  

57

00:06:17.340  -->  00:06:23.520
for each edge (u,v), u is the key, the source, 
and v can be found in the array graph[u].  

58

00:06:24.360  -->  00:06:30.780
This is why we traverse vertices u, and for each 
vertex v in graph[u], we increment indegree[v].  

59

00:06:32.700  -->  00:06:39.960
In code we start by creating a hash table indegree 
with 0 as a default value, a hash table where the  

60

00:06:39.960  -->  00:06:46.140
key will be a vertex and the value its in-degree, 
0 as a default value because we didn't start  

61

00:06:46.140  -->  00:06:53.100
traversing edges yet. Now for each vertex u 
in the graph, for each vertex v in graph[u],  

62

00:06:53.100  -->  00:07:00.420
we increment indegree[v], that's it. After it 
we said that we create a queue where we put  

63

00:07:00.420  -->  00:07:06.840
vertices whose in-degree is 0, for each vertex, 
if its in-degree is 0 we add it to the queue.  

64

00:07:09.960  -->  00:07:15.060
Now we create ordering array, and we keep 
traversing vertices in the queue until it  

65

00:07:15.060  -->  00:07:22.380
becomes empty, we write while not queue.empty(). 
We extract a vertex, we add it to ordering,  

66

00:07:22.380  -->  00:07:27.660
and we traverse its neighbors to decrement 
their in-degree. For each neighbor, here we're  

67

00:07:27.660  -->  00:07:34.920
talking about outgoing ones, we decrement 
indegree[neighbor]. And if it becomes 0,  

68

00:07:34.920  -->  00:07:42.240
then we can take the vertex neighbor, we add it to 
the queue, as we were doing in the example. And it  

69

00:07:42.240  -->  00:07:47.580
keeps looping like that, we traverse vertices 
and see what neighbors each vertex unlocks.  

70

00:07:48.780  -->  00:07:55.020
After the loop, ordering is ready, we return 
it, and we finished implementing our solution.  

71

00:07:57.180  -->  00:08:00.660
But it looks like something 
is missing: the visited set,  

72

00:08:00.660  -->  00:08:07.200
we didn't use a visited set. Is it a mistake? Is 
it done on purpose? Take some seconds to think.  

73

00:08:10.380  -->  00:08:16.680
It's not a mistake, it's done on purpose, but 
why? In breadth-first search, the visited set  

74

00:08:16.680  -->  00:08:22.080
is here to avoid adding the same vertex to the 
queue multiple times, because if it happens,  

75

00:08:22.080  -->  00:08:27.480
we traverse again vertices that we traversed 
before, which is useless most of the time.  

76

00:08:28.260  -->  00:08:34.860
And a vertex is susceptible to be added multiple 
times to the queue in two cases: when itself  

77

00:08:34.860  -->  00:08:40.500
or one of its incoming neighbors has multiple 
incoming neighbors, and when there is a cycle.  

78

00:08:42.180  -->  00:08:47.340
We deduce that when a vertex is guaranteed 
to be added to the queue no more than once,  

79

00:08:47.340  -->  00:08:53.340
we don't need the visited set. Like in 
an arborescence, where the in-degree  

80

00:08:53.340  -->  00:08:59.400
of each vertex is 1 except for the root, its 
in-degree is 0, and where there is no cycle.  

81

00:09:01.140  -->  00:09:07.800
Here we don't need the visited set. But what 
about our case? That's the question. Even if the  

82

00:09:07.800  -->  00:09:13.680
in-degree of some vertices is greater than 1, each 
vertex will be added to the queue exactly once.  

83

00:09:13.680  -->  00:09:20.760
Why is that? The reason behind it is that we have 
a condition before adding to the queue, it's that  

84

00:09:20.760  -->  00:09:27.300
indegree of the vertex is 0. Which happens only 
once, when being on the last incoming neighbor.  

85

00:09:29.400  -->  00:09:36.840
Imagine this scenario, the vertex 4 has 4 
incoming neighbors 0 1 2 and 3. In classic bfs,  

86

00:09:36.840  -->  00:09:41.520
4 would be added multiple times to 
the queue if visited set isn't used.  

87

00:09:42.360  -->  00:09:50.340
But in our algorithm, when being on 0 we decrement 
in-degree of 4, but it doesn't reach 0. Then on 1,  

88

00:09:50.340  -->  00:09:56.700
we decrement, not zero yet. Then on 2, 
we decrement, same thing. Finally, on 3,  

89

00:09:56.700  -->  00:10:03.420
we decrement, and here it became 0 so we add it 
to the queue. It's getting added only once as you  

90

00:10:03.420  -->  00:10:09.540
can see, even if we had millions of incoming 
neighbors, so we don't need a set visited.  

91

00:10:13.260  -->  00:10:17.700
Same as for dfs, we initially 
assume that the graph is acyclic,  

92

00:10:17.700  -->  00:10:23.940
but what if it had cycles, what would happen 
with this algorithm? Let's see with this example.  

93

00:10:25.920  -->  00:10:32.040
Vertices with 0 as in-degree are 0 1 and 
2, we add them to the queue. We start  

94

00:10:32.040  -->  00:10:39.360
with 0, it decrements in-degree of 3. Then 1, it 
decrements in-degree of 3. Then 2, it decrements  

95

00:10:39.360  -->  00:10:47.580
in-degree of 4 and 5, 5 becomes 0 so we add it to 
the queue. Then 5, it decrements in-degree of 4.  

96

00:10:47.580  -->  00:10:54.960
The queue became empty, the process stops. We can 
see that we got no infinite loop, but the process  

97

00:10:54.960  -->  00:11:01.320
stopped without traversing all vertices, the 
ordering is incomplete. It's incomplete because  

98

00:11:01.320  -->  00:11:09.060
we found that we can take 0, after it 1, after it 
2, after it 5, but we couldn't find another vertex  

99

00:11:09.060  -->  00:11:16.020
to take, because all remaining vertices still 
have unsatisfied constraints. And because we have  

100

00:11:16.020  -->  00:11:23.100
a cycle, then we have interdependencies, here 4 
is waiting for 6 to unlock it, 6 is waiting for 3  

101

00:11:23.100  -->  00:11:29.580
to unlock it, and 3 is waiting for 4 to unlock it, 
they're kinda blocking each other from continuing.  

102

00:11:31.380  -->  00:11:35.340
This is why we have nothing to put 
in the queue, the process stops.  

103

00:11:38.520  -->  00:11:43.320
Remember that when there is a cycle, when 
we cannot find a full ordering of vertices,  

104

00:11:43.320  -->  00:11:48.780
we're returning an empty array. So after the 
while loop, we can check if we could finish  

105

00:11:48.780  -->  00:11:55.980
the process by checking the length of ordering. 
If it's smaller than the number of vertices,  

106

00:11:55.980  -->  00:12:01.980
then there was a problem, we return an empty 
array. Else we return ordering normally.  

107

00:12:03.420  -->  00:12:07.740
Our solution now handles the case 
where we have a graph with cycles,  

108

00:12:07.740  -->  00:12:14.160
you can also see that handling cycles is way 
easier in this algorithm than with the first one.  

109

00:12:14.940  -->  00:12:21.180
And same as for the dfs algorithm, this one 
can also be used to detect cycles in a graph,  

110

00:12:21.180  -->  00:12:27.240
if topological_sort returns an empty array 
and graph is not empty, then there is a cycle.  

111

00:12:28.800  -->  00:12:35.400
For the time complexity, we start by traversing 
the adjacency list to count in-degrees. The outer  

112

00:12:35.400  -->  00:12:40.740
loop does |V| iterations because it traverses 
vertices, and the inner loop's number of  

113

00:12:40.740  -->  00:12:46.440
iterations depends on the outdegree of the vertex, 
because we're traversing outgoing neighbors.  

114

00:12:48.240  -->  00:12:55.260
We know that the sum of outdegrees of vertices of 
a directed graph is the number of edges, |E|, so  

115

00:12:55.260  -->  00:13:03.960
traversing an adjacency list costs |V|+|E|. Next 
step, we search for vertices with an in-degree  

116

00:13:03.960  -->  00:13:12.420
of 0, for that we just traverse vertices, which 
costs |V|. And last step, traversing vertices in  

117

00:13:12.420  -->  00:13:18.480
breadth-first search. Even if we're not using 
a set visited, but we're making sure that  

118

00:13:18.480  -->  00:13:26.280
each vertex enters the queue once, we get a cost 
similar to the classic bfs algorithm, O(|V|+|E|).  

119

00:13:27.000  -->  00:13:34.680
By adding everything, we get an O(|V|+|E|) time 
complexity for this algorithm. And for the space  

120

00:13:34.680  -->  00:13:42.780
complexity, we have indegree, it has |V| keys, and 
we have |V| for the queue and the ordering. |V|  

121

00:13:42.780  -->  00:13:48.300
for the queue and the ordering because when we pop 
a vertex from the queue we add it to ordering, and  

122

00:13:48.300  -->  00:13:56.400
each vertex enters the queue at most once, so the 
sum of their lengths doesn't exceed |V|. We get  

123

00:13:56.400  -->  00:14:04.500
an O(|V|) space complexity. We've now studied two 
topological sort algorithms, one that uses dfs and  

124

00:14:04.500  -->  00:14:09.300
one that uses bfs, also called Kahn's algorithm, 
I hope that you understood them both, otherwise  

125

00:14:09.300  -->  00:14:14.280
you can ask me questions. See you in the next 
lecture where we will see a practice question.
