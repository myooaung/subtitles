WEBVTT
1

00:00:00.000  -->  00:00:05.460
Sudoku is a popular grid game that we 
all played once I think in our lives.  

2

00:00:06.540  -->  00:00:11.100
Let's first clearly define the problem 
then see how we can solve it with graph  

3

00:00:11.100  -->  00:00:19.620
coloring. A sudoku grid usually has a size of 9 
by 9, it has 9 rows, 9 columns, and 9 subgrids.  

4

00:00:21.000  -->  00:00:27.540
Each cell belongs to one row, one column, and 
one subgrid, and can have a value from 1 to 9.  

5

00:00:28.200  -->  00:00:34.260
The goal is, given a grid with some pre-filled 
cells, to fill it by assigning a number from 1  

6

00:00:34.260  -->  00:00:42.240
to 9 to remaining cells. But by respecting this 
condition: In each row, column, or subgrid,  

7

00:00:42.240  -->  00:00:51.000
each number must be unique, used only once. 
Here's an example of a filled sudoku grid,  

8

00:00:51.000  -->  00:00:55.860
you can see that no number is repeated 
in a same row, column, or subgrid.  

9

00:00:57.780  -->  00:01:03.480
In the YouTube channel, we've made a Sudoku 
solver by using backtracking, you can go watch  

10

00:01:03.480  -->  00:01:09.600
the video. But in this lecture, we're in the graph 
coloring chapter so we will use graph coloring.  

11

00:01:11.280  -->  00:01:15.660
In graph coloring, we have the word 
graph, so we will work on a graph.  

12

00:01:17.340  -->  00:01:21.300
While here, we just have a grid, 
which is represented by a matrix.  

13

00:01:22.140  -->  00:01:29.820
You've guessed it, we have an implicit graph. 
In graph coloring, vertices represent elements  

14

00:01:29.820  -->  00:01:35.580
we want to color, and an edge between vertices 
means that we must not give them the same color.  

15

00:01:37.080  -->  00:01:41.940
In the case of Sudoku, we need to think of 
what does a color represent in the context,  

16

00:01:41.940  -->  00:01:48.120
what elements we want to color, and how to know 
if we can give the same color to two vertices.  

17

00:01:50.880  -->  00:01:56.700
In Sudoku, a color is simply a value 
from 1 to 9, that we can give to a cell.  

18

00:01:57.240  -->  00:02:03.540
In a more general way, from 1 to n, where 
n is the size of the grid. Because that's  

19

00:02:03.540  -->  00:02:09.360
what we do in reality when playing Sudoku, we 
attribute values to cells, we kind of color them.  

20

00:02:12.180  -->  00:02:17.700
The concept of coloring in this chapter is broad, 
a color can be a real color, it can be a value,  

21

00:02:17.700  -->  00:02:23.760
a class, anything. And elements we want 
to color are the cells of the grid,  

22

00:02:23.760  -->  00:02:33.900
so they will be our vertices, we have a graph of 
81 vertices, 9 by 9. Last thing, how to know if  

23

00:02:33.900  -->  00:02:40.200
two vertices can or cannot have the same color, 
in other words, what are the edges of our graph.  

24

00:02:41.520  -->  00:02:48.060
In Sudoku, a same value cannot be repeated 
in a same row, column, or subgrid, so two  

25

00:02:48.060  -->  00:02:55.500
vertices cannot share the same value if they 
are in the same row, column, or subgrid. Which  

26

00:02:55.500  -->  00:03:00.480
means that there is an edge between two nodes 
if they share the same row, column, or subgrid.  

27

00:03:03.600  -->  00:03:09.720
It's hard to visualize it with a 9x9 grid, 
but we can see it better with a 4x4 grid.  

28

00:03:09.720  -->  00:03:15.060
As you can see, there is an edge between 
vertices of the same row, column, and subgrid.  

29

00:03:15.660  -->  00:03:19.560
For example if we take the cell at 
the third row and second column,  

30

00:03:19.560  -->  00:03:25.140
we can see that it has an edge with every 
other node in its row, column, and subgrid.  

31

00:03:27.720  -->  00:03:33.600
Last thing before launching the algorithm, 
k, the number of colors. In a 9x9 grid,  

32

00:03:33.600  -->  00:03:40.080
each cell can have a value from 1 to 9, 
we have 9 "colors". In this 4x4 grid,  

33

00:03:40.080  -->  00:03:45.960
each cell can have a value from 1 to 
4, we have 4 "colors". In general,  

34

00:03:45.960  -->  00:03:53.700
for an n by n Sudoku grid, each cell can have a 
value from 1 to n, we have n "colors", k is n.  

35

00:03:57.960  -->  00:04:01.440
You can notice that we already 
have some pre-colored vertices,  

36

00:04:01.440  -->  00:04:05.460
they represent pre-filled cells, 
we cannot change their color.  

37

00:04:06.480  -->  00:04:13.020
Now we have all the elements to launch our 
k-coloring algorithm. We want a coloring that  

38

00:04:13.020  -->  00:04:19.440
uses exactly n colors, not more, so we will use 
the backtracking algorithm, not the greedy one.  

39

00:04:22.560  -->  00:04:26.460
By applying it on this 4x4 
grid, this is what happens.  

40

00:04:42.660  -->  00:04:45.480
It solved this 4x4 Sudoku grid.  

41

00:04:47.220  -->  00:04:53.100
And obviously we can also apply it on grids 
of bigger sizes, like the classic 9x9 grid.  

42

00:04:56.220  -->  00:05:01.980
To implement this algorithm, we can simply build 
the graph and use our k-coloring algorithm. But,  

43

00:05:01.980  -->  00:05:07.800
we don't need to build the graph, we just need 
to know how are vertices represented, and how to  

44

00:05:07.800  -->  00:05:14.580
find the neighbors of a vertex. Additionally, our 
k-coloring algorithm was using a list of vertices  

45

00:05:14.580  -->  00:05:20.460
with the index of the actual vertex, and every 
time it colors a vertex, it moves to the next  

46

00:05:20.460  -->  00:05:26.340
vertex, so we also need to have the list of our 
vertices, to know how to move to the next one.  

47

00:05:28.860  -->  00:05:35.550
Let's begin. Vertices are cells of a matrix, so a 
vertex can be represented by its coordinates (r,  

48

00:05:35.550  -->  00:05:42.300
c) in the matrix. How to get the neighbors 
of a vertex (r, c)? In this context,  

49

00:05:42.300  -->  00:05:46.800
neighbors are vertices that needs to have 
a different color from the vertex (r,  

50

00:05:46.800  -->  00:05:53.040
c), which are, vertices of the row r except 
itself, vertices of the column c except itself,  

51

00:05:53.040  -->  00:05:57.480
and vertices of the subgrid where 
(r, c) is located except itself.  

52

00:05:59.700  -->  00:06:06.900
Last thing, what is the list of vertices, and 
how to move to the next vertex? First approach,  

53

00:06:06.900  -->  00:06:12.180
we can put all vertices in a list by following the 
order we get with a left-to-right top-to-bottom  

54

00:06:12.180  -->  00:06:18.540
traversal, then it's easy, the actual vertex 
is at index i and the next one is at index i+1,  

55

00:06:19.800  -->  00:06:24.360
and we know that we finished when i is 
equal to the number of elements in the list.  

56

00:06:25.560  -->  00:06:32.160
Or, we can directly work with elements of the 
grid. But it's a matrix, so a vertex won't be  

57

00:06:32.160  -->  00:06:39.240
represented with a single index i, but with two 
indices r and c. And to move to the next vertex,  

58

00:06:39.240  -->  00:06:45.540
we have two cases: Either we still have elements 
in the actual row so we just move to the next  

59

00:06:45.540  -->  00:06:51.300
column, c becomes c+1. Or we've reached the 
end of the row, in which case, we need to  

60

00:06:51.300  -->  00:06:57.900
move to the next row and start again from the 
first column, so r becomes r+1 and c becomes 0.  

61

00:07:00.180  -->  00:07:05.760
And to know that we traversed all vertices, we 
check if we finished all the rows, we check if  

62

00:07:05.760  -->  00:07:13.980
r is equal to n, it means we finished all the 
rows. Let's implement this in code. We first  

63

00:07:13.980  -->  00:07:19.500
need a function to get the neighbors of a cell, in 
other words, cells whose color must be different.  

64

00:07:20.160  -->  00:07:26.340
As parameters we just need the size of the 
grid n, the row r and the column c of the cell.  

65

00:07:27.540  -->  00:07:33.240
We create an array neighbors, and now we need 
to add cells of its row, column, and subgrid.  

66

00:07:33.900  -->  00:07:40.440
For the row, we need all cells whose row is r, 
so we traverse the n indexes of columns and we  

67

00:07:40.440  -->  00:07:47.100
add the cells (r, i). i must be different 
from c to avoid adding the actual cell.  

68

00:07:49.200  -->  00:07:54.240
For the column, almost same logic, 
we need all cells whose column is c,  

69

00:07:54.240  -->  00:07:58.620
so we traverse the n indexes of 
rows and we add the cells (i, c).  

70

00:07:59.400  -->  00:08:07.560
i must be different from r to avoid adding the 
actual cell. But for the subgrid, it's a bit  

71

00:08:07.560  -->  00:08:13.440
harder. First we need to know the dimensions 
of a subgrid. For a Sudoku grid of size n,  

72

00:08:13.440  -->  00:08:21.480
the dimensions of a subgrid are sqrt(n) by 
sqrt(n), for example if n is 9 we have 3 by 3.  

73

00:08:23.040  -->  00:08:29.520
Now we need to find in what row and column the 
subgrid starts, and traverse the next sqrt(n)  

74

00:08:29.520  -->  00:08:35.400
indices. For the row, the subgrid of a cell (r, 
c) starts at the row floor(r/sqrt(n))*sqrt(n),  

75

00:08:39.300  -->  00:08:45.120
it represents how much subgrids there are before 
the actual one multiplied by the size to know  

76

00:08:45.120  -->  00:08:52.020
exactly how much indices we need to skip. For 
column, same logic, we're in a square matrix,  

77

00:08:52.020  -->  00:08:57.180
so for the column, the subgrid of a cell (r, c) 
starts at the column floor(c/sqrt(n))*sqrt(n).  

78

00:09:04.020  -->  00:09:09.300
We now have where the subgrid starts, we traverse 
the next sqrt(n) indices starting from there.  

79

00:09:10.020  -->  00:09:15.540
So cells of the subgrid of a cell (r, c) 
are between row r_start inclusive and row  

80

00:09:15.540  -->  00:09:22.800
r_start + sqrt(n) exclusive, and between column 
c_start inclusive and c_start + sqrt(n) exclusive.  

81

00:09:24.960  -->  00:09:30.420
In code we traverse the couples (i, j) in this 
range, they represent cells of the subgrid.  

82

00:09:31.020  -->  00:09:35.400
(i, j) must be different from (r, 
c) to avoid adding the actual cell.  

83

00:09:36.600  -->  00:09:39.000
We found all neighbors, we return them.  

84

00:09:40.440  -->  00:09:46.920
Then we need a recursive function that will color 
the "graph", remember what we used in k-coloring.  

85

00:09:47.640  -->  00:09:55.560
As parameters we need the grid, and indices of the 
actual cell. We extract the size of the grid. As  

86

00:09:55.560  -->  00:10:01.500
said earlier, we know that we've been able to 
color all cells when r is equal to n, so if r  

87

00:10:01.500  -->  00:10:07.860
is equal to n, we return true. Else, we try to 
color the actual cell and move to the next one.  

88

00:10:09.600  -->  00:10:15.180
First we need to know colors used by neighbors, 
for that we put colors of neighbors in a set as  

89

00:10:15.180  -->  00:10:21.300
you can see. We also need to know the next 
cell, the next one is (r, c+1) if there are  

90

00:10:21.300  -->  00:10:27.720
remaining columns in the actual row, if c is 
smaller than n, else the next cell is (r+1, 0).  

91

00:10:30.240  -->  00:10:36.300
Now we have two cases, either the cell is 
already filled, already colored, or it's empty.  

92

00:10:36.300  -->  00:10:42.180
If it's already colored, if its value different 
from 0, then we don't touch it, we directly move  

93

00:10:42.180  -->  00:10:48.420
to the next cell by calling recursively and 
returning that result. Else, we need to try  

94

00:10:48.420  -->  00:10:55.200
the different colors. Possible colors are from 
1 to n, possible values we can give to a cell.  

95

00:10:57.240  -->  00:11:02.940
For each one of them, we first check if it's not 
used. If it's not used, we give it to the actual  

96

00:11:02.940  -->  00:11:10.740
cell, and start from the next one. We recursively 
call on the next cell, and if it returns a  

97

00:11:10.740  -->  00:11:16.800
positive result, then we've been able to solve the 
game, we return true to stop touching the grid.  

98

00:11:16.800  -->  00:11:23.100
Else, we try with the next color. If all 
colors didn't lead to a positive result,  

99

00:11:23.100  -->  00:11:29.760
we set back the cell to its original state, 
uncolored, 0 as a value, and we return false.  

100

00:11:31.140  -->  00:11:37.080
Last thing, in our solve_sudoku function, we call 
the recursive function to color the grid starting  

101

00:11:37.080  -->  00:11:44.580
from the cell (0, 0), and we return the grid. The 
returned grid will be filled with valid values,  

102

00:11:44.580  -->  00:11:51.360
if it was possible obviously. And we've been 
able to solve Sudoku game with graph coloring.  

103

00:11:52.440  -->  00:11:56.820
It's true that it's quite slow, because 
our k-coloring algorithm is exponential,  

104

00:11:56.820  -->  00:12:03.600
but for a classic Sudoku grid, where the size is 
9, it's pretty small, the runtime is acceptable.  

105

00:12:05.160  -->  00:12:09.900
We've reached the end of this lecture, I hope 
that you understood how we solved Sudoku,  

106

00:12:09.900  -->  00:12:13.440
with graph coloring. See you in the next lecture.
