WEBVTT
1

00:00:00.000  -->  00:00:05.220
Welcome back to the course where we will discuss 
shortest paths in directed acyclic graphs.  

2

00:00:07.860  -->  00:00:12.720
In this chapter we've seen shortest path 
algorithms that work with directed acyclic  

3

00:00:12.720  -->  00:00:17.940
graphs, then why are we having this lecture? 
It's because with directed acyclic graphs,  

4

00:00:17.940  -->  00:00:22.500
we have an algorithm that is faster than 
ones we've seen, so it's good to know it.  

5

00:00:24.120  -->  00:00:28.440
Let's suppose that we have this situation, 
we want to calculate the shortest distance  

6

00:00:28.440  -->  00:00:36.540
to reach the vertex K from the vertex A. K has 3 
vertices that are going to it, vertices H I and J.  

7

00:00:37.980  -->  00:00:44.520
Imagine that we know the shortest distance to go 
from A to each one of H I and J, the distance to H  

8

00:00:44.520  -->  00:00:53.580
is 28, the distance to I is 34, and the distance 
to J is 37. By the way the grey area contains  

9

00:00:53.580  -->  00:00:58.860
other vertices of the graph, it's just that we 
don't care about them for this example, we don't  

10

00:00:58.860  -->  00:01:04.260
need to know how we got these shortest distances 
to H I and J, just pretend that we have them.  

11

00:01:08.160  -->  00:01:12.060
Starting from these information, can 
you calculate the shortest distance  

12

00:01:12.060  -->  00:01:15.420
to go to K? Take some seconds to think about it.  

13

00:01:17.340  -->  00:01:23.460
K has 3 incoming neighbors H I and J, so we 
know that the shortest path will either pass  

14

00:01:23.460  -->  00:01:29.820
from H or I or J before reaching K, they 
are the only vertices that can go to K.  

15

00:01:32.100  -->  00:01:37.800
So we have 3 scenarios, we either go to H with 
a minimum distance then take the edge to K,  

16

00:01:37.800  -->  00:01:43.140
or go to I then take the edge to K, 
or go to J then take the edge to K.  

17

00:01:45.180  -->  00:01:49.200
Let's calculate the total distance 
with each situation and compare.  

18

00:01:50.820  -->  00:01:57.780
We know that the minimum distance to go to 
H is 28, +13 for the edge to K we get 41.  

19

00:01:57.780  -->  00:02:04.740
We also know that the minimum distance to go 
to I is 34, +5 for the edge to K we get 39.  

20

00:02:04.740  -->  00:02:11.760
And for J, the minimum distance to go to 
it is 37, +10 for the edge to K we get 47.  

21

00:02:15.000  -->  00:02:21.900
We have these 3 choices, we obviously take 
the one with the shortest total distance, 39.  

22

00:02:21.900  -->  00:02:27.960
So the shortest path to go to K is the shortest 
path to go to I then we take the last edge,  

23

00:02:27.960  -->  00:02:35.400
the one from I to K. You can see that 
by knowing the shortest distance to go  

24

00:02:35.400  -->  00:02:39.960
to each incoming neighbor of K, we could 
know the shortest distance to go to K.  

25

00:02:40.620  -->  00:02:45.000
The shortest distance to go to K is the 
minimum between the shortest distance to  

26

00:02:45.000  -->  00:02:50.640
go to H + the weight of the edge from H to K, and 
the shortest distance to go to I + the weight of  

27

00:02:50.640  -->  00:02:56.220
the edge from I to K, and the shortest distance 
to go to J + the weight of the edge from J to K.  

28

00:02:59.340  -->  00:03:03.840
In a general way, the shortest distance 
to go from source to a vertex v,  

29

00:03:03.840  -->  00:03:08.460
is the minimum between the shortest 
distance to go from source to u + the  

30

00:03:08.460  -->  00:03:12.900
weight of the edge from u to v, for 
each u in incoming neighbors of v.  

31

00:03:18.180  -->  00:03:21.420
We can think of applying this 
formula for each vertex and  

32

00:03:21.420  -->  00:03:26.160
we're done. But a condition to apply it 
to a vertex v is that, as you could see,  

33

00:03:26.160  -->  00:03:32.520
we need to already have the shortest distance to 
each one of its incoming neighbors, distances of  

34

00:03:32.520  -->  00:03:37.200
incoming neighbors are like prerequisites 
to be able to calculate the actual one.  

35

00:03:38.760  -->  00:03:44.700
Which is not always the case if we don't follow 
the right order. For example here if we start  

36

00:03:44.700  -->  00:03:50.700
with L, we don't know the shortest distance to its 
incoming neighbors H and I, so we can't calculate.  

37

00:03:52.800  -->  00:03:58.260
What's the right order then? What's the 
order that guarantees that for each vertex v,  

38

00:03:58.260  -->  00:04:02.520
we will have traversed its incoming 
neighbors before, to be able to calculate.  

39

00:04:03.420  -->  00:04:09.780
It's the topological order, remember that 
in a topological order, for each edge (u,v),  

40

00:04:09.780  -->  00:04:16.620
u comes before v. And this is what we're searching 
for, we want that if u is an incoming neighbor  

41

00:04:16.620  -->  00:04:22.740
of v, then we traverse u before traversing v, 
which is guaranteed by the topological order.  

42

00:04:24.900  -->  00:04:29.880
So the strategy is that we're given a 
graph, we compute the topological ordering,  

43

00:04:29.880  -->  00:04:36.960
and we traverse vertices in that order while 
applying this formula, dist[v] is equal to the  

44

00:04:36.960  -->  00:04:42.780
minimum of values dist[u]+weight of edge from 
u to v, such that u is an in-neighbor of v.  

45

00:04:46.200  -->  00:04:52.320
Let's do it with this graph. We want distances 
from D to each vertex, D is the source.  

46

00:04:54.060  -->  00:05:01.800
The topological sort algorithm returns this order. 
Now we initially put infinity for all values  

47

00:05:01.800  -->  00:05:09.480
dist[u], as we did in Dijkstra and Bellman-Ford 
for example. Then we set dist[source] to 0,  

48

00:05:09.480  -->  00:05:17.520
here source is D. We start traversing. The first 
vertex is A. It has no in-neighbors, so its dist  

49

00:05:17.520  -->  00:05:24.600
value doesn't change, it remains infinity. Then 
we have C, same thing, doesn't change, infinity.  

50

00:05:25.260  -->  00:05:31.980
Then G, same thing. Then B, it has one 
in-neighbor, A. So dist[B] will be the  

51

00:05:31.980  -->  00:05:39.180
min between dist[A]+w(A,B) and, and that's it we 
have only one choice, B has only one in-neighbor.  

52

00:05:41.460  -->  00:05:45.720
dist[A] is infinity, + 3 we get 
infinity, it's the value of dist[B].  

53

00:05:48.060  -->  00:05:53.280
But wait we're getting infinity for all values, 
is it normal? Yes, because if you notice,  

54

00:05:53.280  -->  00:05:59.640
D can go to neither A, nor C, nor G, nor 
B, so it's normal to have infinity in dist.  

55

00:06:01.380  -->  00:06:07.440
Values will start changing when we'll be 
on vertices that D can reach, like E and H.  

56

00:06:09.120  -->  00:06:17.760
Next vertex, D. D is the source, we don't 
touch it, it remains 0. Then we have E. E has 4  

57

00:06:17.760  -->  00:06:24.720
in-neighbors, A B C and D. So dist[E] will be the 
minimum between dist[A]+w(A,E), dist[B]+w(B,E),  

58

00:06:26.160  -->  00:06:30.360
dist[C]+w(C,E), and dist[D]+w(D,E). dist[A]+w(A,E) 
is infinity+5, infinity. dist[B]+w(B,E)  

59

00:06:33.480  -->  00:06:38.280
is infinity+6, infinity. 
dist[C]+w(C,E) is infinity+1,  

60

00:06:42.840  -->  00:06:51.720
infinity. And dist[D]+w(D,E) is 0+3, 
3. The minimum is 3, so dist[E] is 3.  

61

00:06:53.700  -->  00:06:59.640
And we're sure that shortest distance to E is 3 
because it cannot change later, we already have  

62

00:06:59.640  -->  00:07:05.460
shortest distance to all its in-neighbours 
and we took the minimum of dist[u]+w(u,E).  

63

00:07:08.160  -->  00:07:13.800
Then we have F, it has only one in-neighbor, 
C, so its dist value will be dist[C]+w(C,F),  

64

00:07:15.360  -->  00:07:21.300
which is infinity. Then we have H, 
it has two in-neighbors D and E.  

65

00:07:22.140  -->  00:07:32.100
dist[H] will be min between dist[D]+w(D,H) and 
dist[E]+w(E,H). Which is min between 0+7 and 3+2,  

66

00:07:32.100  -->  00:07:40.680
min between 7 and 5, which is 5. Then we 
have J, it has only one in-neighbor, G,  

67

00:07:40.680  -->  00:07:48.780
so its dist value will be dist[G]+w(G,J), 
which is infinity. Then we have I. It has  

68

00:07:48.780  -->  00:07:54.420
two in-neighbors H and F, so dist[I] will be 
min between shortest distance to go to H or  

69

00:07:54.420  -->  00:08:01.200
F + the weight of the edge that takes us to I, 
which is min between infinity and 9, we get 9.  

70

00:08:02.700  -->  00:08:10.020
After it, we have K, it has two in-neighbors H 
and J, we get min between 9 and infinity, it's 9.  

71

00:08:10.920  -->  00:08:16.560
Last vertex, L. It has two in-neighbors H 
and I, we have min between dist[H]+w(H,L)  

72

00:08:18.180  -->  00:08:27.360
and dist[I]+w(I,L), which is min between 5+9 
and 9+1, min between 14 and 10, we get 10.  

73

00:08:29.340  -->  00:08:35.820
We finished traversing vertices of the ordering, 
we got all shortest distances with D as a source.  

74

00:08:36.420  -->  00:08:41.460
And we got a lot of infinity values 
because D cannot reach those vertices.  

75

00:08:45.660  -->  00:08:51.120
Let's implement this solution. We take as 
parameters the graph and the source vertex.  

76

00:08:51.120  -->  00:08:55.920
We compute the topological ordering with 
the function we made in topsort chapter,  

77

00:08:55.920  -->  00:09:04.080
either the one based on dfs or the one based on 
bfs. If we get an empty array, then there is a  

78

00:09:04.080  -->  00:09:10.080
cycle, the graph is not acyclic, we cannot 
work on it, we return None, invalid input.  

79

00:09:12.240  -->  00:09:14.940
If there is no problem, we can start working.  

80

00:09:15.840  -->  00:09:21.540
Later we will need to traverse in-neighbors, 
while our adjacency list contains out-neighbors.  

81

00:09:21.540  -->  00:09:28.500
So we build the transpose graph to be able to 
directly read in-neighbors. Once it's done,  

82

00:09:28.500  -->  00:09:35.400
we create dist table, with infinity as a 
default value. And we put 0 is dist[src].  

83

00:09:38.280  -->  00:09:42.960
Now we start traversing vertices v of 
the ordering. For each one of them,  

84

00:09:42.960  -->  00:09:48.900
we want to find the in-neighbor u that 
gives the smallest value dist[u]+w(u,v).  

85

00:09:51.120  -->  00:09:56.280
Except if it's the source, because we don't touch 
the source, we already have its final dist value,  

86

00:09:56.280  -->  00:10:01.680
and if it doesn't have in-neighbors. 
This is why we start by making sure  

87

00:10:01.680  -->  00:10:06.060
that v is different from source, and 
has in-neighbors, in other words,  

88

00:10:06.060  -->  00:10:11.880
the length of its in-neighbors array, that we 
get from the transpose graph, is greater than 0.  

89

00:10:13.800  -->  00:10:19.380
If conditions are respected, we get the min 
among in-neighbors, which are in tgraph[v].  

90

00:10:20.640  -->  00:10:26.700
As key we put dist[u]+w(u,v), we need 
the key to precise the way we want to  

91

00:10:26.700  -->  00:10:32.160
compare in-neighbours, we want the tuple (u, 
w) that produces the smallest value dist[u]+w.  

92

00:10:35.160  -->  00:10:39.360
After we found it, we assign the 
value to dist[v], which is dist[u]+w.  

93

00:10:42.360  -->  00:10:50.280
After doing so for all vertices, we return 
dist. And we can even add prev to be able to  

94

00:10:50.280  -->  00:10:55.980
reconstruct the path later, for that we create 
prev with null as a default value, and when we  

95

00:10:55.980  -->  00:11:02.700
find the min in-neighbour of v, we also set it as 
its prev, we assign u to prev[v]. And we return  

96

00:11:02.700  -->  00:11:09.240
dist and prev. To reconstruct, we use the same 
function we used in Dijkstra and Bellman-Ford.  

97

00:11:12.480  -->  00:11:17.340
What about the time complexity? First 
we have the topological sort algorithm,  

98

00:11:17.340  -->  00:11:22.260
it costs O(|V|+|E|) as 
explained in topsort lectures.  

99

00:11:23.760  -->  00:11:31.740
We also have |V|+|E| to build the transpose 
graph. Then we're traversing |V| vertices.  

100

00:11:31.740  -->  00:11:37.020
For each one of them, we're traversing all 
its in-neighbors, the cost is in-degree(v).  

101

00:11:38.700  -->  00:11:47.280
The total is O(|V|+|E|) + O(|V|+|E|) + 
|V| + sum of in-degrees of all vertices.  

102

00:11:49.140  -->  00:11:55.980
The sum of in-degrees of vertices of a graph is 
|E|, so we get an O(|V|+|E|) time complexity.  

103

00:11:57.240  -->  00:12:01.500
Which is faster than algorithms we 
studied before. But, as you know,  

104

00:12:01.500  -->  00:12:06.000
this algorithm works for directed 
acyclic graphs only, so if you have  

105

00:12:06.000  -->  00:12:10.380
a DAG, use this fast algorithm, 
otherwise use another algorithm.  

106

00:12:14.340  -->  00:12:19.680
And for this same problem, single-source shortest 
path with weighted directed acyclic graphs,  

107

00:12:19.680  -->  00:12:24.420
we have another approach. If you 
remember, in Dijkstra's algorithm,  

108

00:12:24.420  -->  00:12:28.920
we were traversing vertices one by 
one, each vertex was traversed once.  

109

00:12:29.580  -->  00:12:34.800
And once we reach a vertex in Dijkstra's, we 
consider that we found its shortest distance,  

110

00:12:34.800  -->  00:12:39.660
because we traversed all vertices that 
can produce the shortest distance to it.  

111

00:12:40.320  -->  00:12:46.200
So what did we do? We traversed outgoing edges 
and we attempted to relax them, we traversed  

112

00:12:46.200  -->  00:12:52.440
outgoing edges (v, w), and for each one of 
them, if dist[u]+w was smaller than dist[v],  

113

00:12:52.440  -->  00:13:00.960
we were updating dist[v] by dist[u]+w, and 
putting u in prev[v]. For this second approach,  

114

00:13:00.960  -->  00:13:06.480
we will do the same thing, the only difference 
will be in determining the order of traversal.  

115

00:13:09.780  -->  00:13:15.300
In Dijkstra's, we were using a priority queue 
from where we were extracting the vertex with  

116

00:13:15.300  -->  00:13:21.960
the highest priority at each iteration. But with a 
directed acyclic graph, we don't need all of that,  

117

00:13:21.960  -->  00:13:26.700
we already have the order, the one we 
get from topological sort algorithm.  

118

00:13:27.720  -->  00:13:31.980
So we just traverse vertices u of 
the ordering, for each one of them,  

119

00:13:31.980  -->  00:13:39.780
we try to relax outgoing edges. We traverse 
outgoing edges (v, w), and if dist[u]+w is  

120

00:13:39.780  -->  00:13:47.040
smaller than dist[v], we update dist[v] by 
dist[u]+w, and put u in prev[v], that's it.  

121

00:13:49.200  -->  00:13:53.280
And we don't need the transpose graph 
here, we're traversing out-neighbors,  

122

00:13:53.280  -->  00:14:01.980
which are already present in the adjacency list of 
the graph. Here's what happens with our example.  

123

00:14:19.560  -->  00:14:23.880
You can see that we got the same 
result, both approaches work.  

124

00:14:28.020  -->  00:14:34.980
For the time complexity, we have O(|V|+|E|) 
for topological sort, we traverse |V| vertices,  

125

00:14:34.980  -->  00:14:39.540
for each one of them we traverse outgoing 
edges, the cost is out-degree(u).  

126

00:14:40.440  -->  00:14:46.080
In total, we have O(|V|+|E|) 
+ |V| + sum of out-degrees.  

127

00:14:49.020  -->  00:14:55.740
The sum of out-degrees of vertices of a graph 
is |E|, so we get an O(|V|+|E|) time complexity,  

128

00:14:55.740  -->  00:15:03.060
same as the first approach. We've reached 
the end of this lecture, I hope that you  

129

00:15:03.060  -->  00:15:08.100
understood the presented material, ask questions 
if you didn't, and see you in the next lecture.
