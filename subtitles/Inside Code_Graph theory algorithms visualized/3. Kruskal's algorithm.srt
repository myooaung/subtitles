1

00:00:00,060  -->  00:00:05,100
Welcome back to the course, in this lecture we 
will learn about another minimum spanning tree  

2

00:00:05,100  -->  00:00:13,080
algorithm: Kruskal's algorithm. The algorithm 
works like this: we have a connected undirected  

3

00:00:13,080  -->  00:00:19,140
weighted graph G, we start by sorting its edges 
according to their weight in ascending order.  

4

00:00:21,000  -->  00:00:26,700
Then during the process, we will have multiple 
trees that we will keep merging until we get  

5

00:00:26,700  -->  00:00:33,300
one single tree: the minimum spanning 
tree. At the beginning, we didn't add  

6

00:00:33,300  -->  00:00:39,360
any edge to our minimum spanning tree yet, 
so each vertex constitutes a tree by itself.  

7

00:00:40,980  -->  00:00:44,700
To better visualize, we assign 
a different color to each group,  

8

00:00:44,700  -->  00:00:49,320
then having nodes of the same color 
means that they're in the same group.  

9

00:00:51,120  -->  00:00:58,500
Now we start traversing edges in a sorted way. 
For each edge (u,v) of weight w, if u and v are  

10

00:00:58,500  -->  00:01:04,380
in different groups, we add the edge (u,v) to our 
minimum spanning tree and we connect the groups.  

11

00:01:05,280  -->  00:01:10,440
Else if they're already in the same group, we 
don't add the edge because it would form a cycle.  

12

00:01:11,820  -->  00:01:16,260
Let's see it in practice with this 
example we used in the previous lecture.  

13

00:01:17,340  -->  00:01:23,580
First edge is the one between H and I. H and I 
are in different groups, so we add the edge to  

14

00:01:23,580  -->  00:01:28,800
the MST and connect their groups, we now 
have a group that contains both H and I.  

15

00:01:30,660  -->  00:01:37,140
Next edge is between C and D. C and D are in 
different groups, we add the edge and connect the  

16

00:01:37,140  -->  00:01:44,940
groups. Next edge, between B and D. B and D are in 
different groups, we add the edge and connect the  

17

00:01:44,940  -->  00:01:52,080
groups. Next edge is between A and C. Different 
groups, we add the edge and connect groups.  

18

00:01:53,460  -->  00:01:59,280
Next edge is between I and J. Different 
groups, we add the edge and connect the groups.  

19

00:02:00,840  -->  00:02:06,420
Next edge is between H and J. And here, 
H and J are already in the same group,  

20

00:02:06,420  -->  00:02:09,480
so if we add the edge, we will get a cycle.  

21

00:02:10,980  -->  00:02:17,520
Which is undesirable, a minimum spanning tree 
doesn't contain cycles, so we just skip this edge.  

22

00:02:18,900  -->  00:02:24,960
Next edge is between G and H. Different 
groups, we add the edge and connect groups.  

23

00:02:26,220  -->  00:02:34,800
Next edge is between B and C. Same group, we skip. 
Next edge is between G and I. G and I are in the  

24

00:02:34,800  -->  00:02:43,440
same group, we just skip. Next edge is between A 
and B. Same group, we skip. Then between G and E.  

25

00:02:43,440  -->  00:02:50,760
Different groups, we add the edge and join groups. 
Then between E and F. Different groups, we add  

26

00:02:50,760  -->  00:02:57,480
the edge and join groups. Then between D and E. 
Different groups, we add the edge and join groups.  

27

00:02:58,500  -->  00:03:04,500
And now our minimum spanning tree has 
|V|-1 edges, so we finished making it.  

28

00:03:07,140  -->  00:03:13,200
Because a tree of n vertices has n-1 edges, 
all remaining edges will have their incident  

29

00:03:13,200  -->  00:03:19,080
vertices in the same group, it's useless to 
continue traversing edges, we just stop here,  

30

00:03:19,080  -->  00:03:26,700
you can verify by yourself. And here is 
the minimum spanning tree of the graph G,  

31

00:03:26,700  -->  00:03:33,420
it has a total weight of 38, we cannot find 
a spanning tree with a lower sum of weights.  

32

00:03:35,940  -->  00:03:42,000
Let's write some pseudocode. Our function 
takes as parameter a graph, we assume that  

33

00:03:42,000  -->  00:03:48,300
it's undirected and connected. We extract the 
list of vertices and the list of edges from it.  

34

00:03:48,840  -->  00:03:51,780
Then we sort the edges according to their weight.  

35

00:03:52,560  -->  00:03:59,040
After it, we create a new graph that will be 
our MST, and we create a group for each vertex.  

36

00:04:00,120  -->  00:04:07,200
Now we can start traversing edges. For each edge 
(u, v, w), if u and v don't belong to the same  

37

00:04:07,200  -->  00:04:13,740
group, we add an edge between u and v in the MST, 
and we connect the group of u with the group of v.  

38

00:04:15,060  -->  00:04:21,540
Last thing to do, if the number of edges of 
the MST is |V|-1, it means that we're done,  

39

00:04:21,540  -->  00:04:30,480
we break the loop. After the loop, we return our 
MST, and this is how Kruskal's algorithm works.  

40

00:04:32,940  -->  00:04:38,220
And by the way, same as Prim's algorithm, 
Kruskal's algorithm is also a greedy algorithm.  

41

00:04:41,040  -->  00:04:47,220
This is just pseudocode, we still need to discuss 
how to implement it, especially this part,  

42

00:04:47,220  -->  00:04:52,020
create a group for each vertex, check if 
u and v don't belong to the same group,  

43

00:04:52,020  -->  00:05:00,780
and connect their groups. We can think of having 
a list of groups where each group is a set and  

44

00:05:00,780  -->  00:05:07,200
elements are vertices of that group. Initially 
we have one group of one element for each vertex,  

45

00:05:07,200  -->  00:05:12,060
then to find the group of a vertex we 
traverse them while checking membership,  

46

00:05:12,060  -->  00:05:17,340
and to connect two groups we just move 
elements of one set to the other one.  

47

00:05:19,920  -->  00:05:24,840
But this implementation is slow, finding 
the group of a vertex or connecting two  

48

00:05:24,840  -->  00:05:32,760
groups is done in O(|V|) time, we may need 
to traverse the |V| groups. Same thing for  

49

00:05:32,760  -->  00:05:39,000
connecting groups of two vertices, we first need 
to find their group so it's done in O(|V|) time.  

50

00:05:40,140  -->  00:05:46,860
To have an efficient implementation, we will use 
the disjoint-set data structure. The disjoint-set  

51

00:05:46,860  -->  00:05:53,760
data structure, also called union-find, maintains 
a collection of disjoint sets, sets that have no  

52

00:05:53,760  -->  00:06:01,080
intersection, no common element. And gives the 
ability to add new sets, find the set to which  

53

00:06:01,080  -->  00:06:08,160
a given element belongs, and merge the two sets 
of two given elements. Perfect for Kruskal's  

54

00:06:08,160  -->  00:06:13,620
algorithm, at the beginning we add a node for 
each set, we can check if two nodes belong to  

55

00:06:13,620  -->  00:06:19,320
the same tree with the find operation, and we 
can join the two trees of the two incident nodes  

56

00:06:19,320  -->  00:06:26,280
with the union operation, because each tree is 
represented by a set whose elements are its nodes.  

57

00:06:28,800  -->  00:06:33,240
In this lecture, we won't discuss the 
implementation of this data structure,  

58

00:06:33,240  -->  00:06:38,820
because it's done in detail in this YouTube 
video that you should really watch, you can  

59

00:06:38,820  -->  00:06:42,840
consider it as a part of this course 
and a prerequisite for this lecture.  

60

00:06:44,460  -->  00:06:52,620
As said earlier, disjoint-set has 3 operations: 
make_set(x), find(x), and union(x, y).  

61

00:06:54,660  -->  00:07:01,200
Let's see how to implement Kruskal's algorithm 
by using these operations. Our kruskal function  

62

00:07:01,200  -->  00:07:07,920
takes as parameters the graph. We start by 
extracting vertices and edges. For vertices,  

63

00:07:07,920  -->  00:07:15,240
we just read the keys of the adjacency list, they 
represent vertices of our graph. And for edges,  

64

00:07:15,240  -->  00:07:21,060
we have to traverse all the adjacency list 
while adding each edge to our array of edges.  

65

00:07:23,160  -->  00:07:28,920
We add edges that go to unvisited vertices 
only, to avoid adding a same edge twice.  

66

00:07:30,240  -->  00:07:35,940
After it, we sort edges according to their 
weight, which is the third element of the tuple.  

67

00:07:37,140  -->  00:07:41,760
Now we need to create our MST 
and our disjoint-set structure.  

68

00:07:42,420  -->  00:07:49,200
For MST, we just create an empty graph that we 
will fill later. And for disjoint-set structure,  

69

00:07:49,200  -->  00:07:55,200
we use our DisjointSet class we made in the 
YouTube lecture, by passing the list of vertices,  

70

00:07:55,200  -->  00:08:03,240
because we will deal with vertices in the 
structure. Now we can start traversing edges,  

71

00:08:03,240  -->  00:08:09,300
but before, we create a variable nb_edges to 
count edges we added, to know when to stop.  

72

00:08:11,880  -->  00:08:18,960
Then for each edge (u, v, w), we check if u and v 
are in the same group. We can do so by using find  

73

00:08:18,960  -->  00:08:25,800
operation, if find(u) isn't equal to find(v), 
it means that they're in different groups.  

74

00:08:26,700  -->  00:08:30,420
When it's the case, we need to 
add the edge (u, v) to the MST,  

75

00:08:30,420  -->  00:08:35,280
increment the number of edges, connect 
the two groups, and check if we're done.  

76

00:08:36,300  -->  00:08:40,800
To add the edge (u,v) to the MST, 
we're dealing with undirected edges,  

77

00:08:40,800  -->  00:08:48,780
so we add v to neighbors of u, and add u to 
neighbors of v. We also increment nb_edges.  

78

00:08:50,460  -->  00:08:57,000
And to connect group of u and group of v, we just 
use union operation of the disjoint-set structure,  

79

00:08:57,000  -->  00:09:04,080
union(u, v). Internally, this operation will 
find the representative vertex of the set of u,  

80

00:09:04,080  -->  00:09:10,620
same thing for v, and it connects them by adding 
a link, watch the lecture to better understand.  

81

00:09:12,420  -->  00:09:18,840
Last thing, if the number of edges is equal to 
the number of vertices - 1, we break the loop,  

82

00:09:18,840  -->  00:09:26,040
it means that we're done. After the loop, we 
return mst, the result we're searching for.  

83

00:09:26,700  -->  00:09:30,060
And we implemented Kruskal's algorithm.  

84

00:09:34,560  -->  00:09:41,400
Last thing to discuss, time complexity. 
Extracting vertices costs |V|, the number  

85

00:09:41,400  -->  00:09:48,240
of vertices. Extracting edges costs |V|+|E| 
because we traverse all the adjacency list.  

86

00:09:49,260  -->  00:09:57,120
Sorting the edges costs |E|log|E|, because 
a generic sorting algorithm runs in O(nlogn)  

87

00:09:57,120  -->  00:10:02,280
time for n elements, and we're sorting 
|E| elements, the number of edges.  

88

00:10:04,080  -->  00:10:09,240
Cost of creating the disjoint-set structure 
is linear to the number of elements we put,  

89

00:10:09,240  -->  00:10:15,840
and here we're putting the vertices, we 
have |V| vertices, so the cost is |V|.  

90

00:10:17,520  -->  00:10:22,320
Now we traverse edges, we have a loop 
that does at most |E| iterations.  

91

00:10:23,880  -->  00:10:32,220
Inside it, we have find and union operations. With 
an optimized disjoint-set implementation, their  

92

00:10:32,220  -->  00:10:40,200
amortized cost is O(α(n)), where n is the number 
of elements in the disjoint-set, and α is the  

93

00:10:40,200  -->  00:10:51,720
extremely slow-growing inverse Ackermann function. 
Here n is |V|, so we have O(α(|V|)). In total,  

94

00:10:51,720  -->  00:11:03,540
we have |V|+|V|+|E|+|E|log|E|+|V|+2|E|α(|V|), 
which is 3|V|+|E|+|E|log|E|+2|E|α(|V|).  

95

00:11:11,820  -->  00:11:19,260
We have a connected graph, so |E| is at 
least |V|-1, we can ignore the 3|V| term.  

96

00:11:24,720  -->  00:11:28,980
|E|log|E| is greater than 
|E| so we can ignore |E|.  

97

00:11:30,000  -->  00:11:40,200
And log|E| is greater than α(|V|), so |E|log|E| is 
greater than |E|α(|V|), we can ignore 2|E|α(|V|).  

98

00:11:45,840  -->  00:11:55,200
We get an O(|E|log|E|) time complexity. 
And in a simple graph like this one,  

99

00:11:56,040  -->  00:12:01,320
|E| <= |V|², so log(|E|) is smaller than 
log(|V|²), so log(|E|) is smaller than 2log(|V|).  

100

00:12:05,640  -->  00:12:14,580
This is why we can replace log(|E|) by log(|V|) 
and get a time complexity of O(|E|log|V|).  

101

00:12:19,620  -->  00:12:26,040
Now we've seen how Kruskal's algorithm works, an 
example, an implementation, and time complexity,  

102

00:12:26,580  -->  00:12:32,520
we're ready to move to something else. 
Last question, what if the given graph G  

103

00:12:32,520  -->  00:12:38,400
is disconnected? In that case, we cannot 
have a minimum spanning tree. However,  

104

00:12:38,400  -->  00:12:44,880
we can have a minimum spanning forest, we just 
take each connected component of G and apply  

105

00:12:44,880  -->  00:12:52,020
an MST algorithm on it. Joining MSTs we get, 
we can form the minimum spanning forest of G.  

106

00:12:52,560  -->  00:12:57,360
You will find the corresponding code for 
this operation attached to this lecture.  

107

00:12:58,920  -->  00:13:02,580
We've reached the end of this lecture, 
I hope that you understood Kruskal's  

108

00:13:02,580  -->  00:13:07,560
algorithm, if you didn't, you can ask me 
questions. See you in the next lecture.
