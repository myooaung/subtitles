1

00:00:00,000  -->  00:00:05,700
Imagine that your company has a bunch of rides 
to perform by car in a given day, each ride has  

2

00:00:05,700  -->  00:00:12,180
a start and end time. Unfortunately, you may 
not be able to complete them with one single  

3

00:00:12,180  -->  00:00:20,040
car. Why? Because some rides overlap in time, for 
example this one starts at 2pm and ends at 4pm,  

4

00:00:20,040  -->  00:00:25,920
while this one starts at 3pm, and at 3pm 
the car is occupied by the first ride.  

5

00:00:27,780  -->  00:00:33,240
It's clear that more cars are required, 
however, cars and drivers cost money,  

6

00:00:33,240  -->  00:00:37,620
so a legitimate question is: What 
is the minimum number of required  

7

00:00:37,620  -->  00:00:42,480
cars to perform all the rides in time, and 
what rides should be assigned to each car?  

8

00:00:43,200  -->  00:00:48,900
In this example we need at least 3 cars, 
here are the rides each car can take,  

9

00:00:49,620  -->  00:00:55,980
rides taken by a car don't overlap obviously, 
that was the initial goal, avoiding overlapping.  

10

00:00:58,920  -->  00:01:04,920
Now we defined the problem, but what about 
the solution, how to find that minimum  

11

00:01:04,920  -->  00:01:10,740
number of cars given a list of rides? This 
is what we will learn about in this chapter.  

12

00:01:13,380  -->  00:01:19,380
We're learning about graph algorithms, so we will 
obviously represent our problem with a graph.  

13

00:01:19,380  -->  00:01:24,180
Vertices represent rides and 
edges can represent overlapping,  

14

00:01:24,180  -->  00:01:32,580
an edge between two rides u and v means that u 
and v time slots overlap. Edges are undirected  

15

00:01:32,580  -->  00:01:38,220
because the relation goes both ways, if 
u overlaps with v then v overlaps with u.  

16

00:01:40,320  -->  00:01:47,040
We want to assign a car to each ride in a way that 
two overlapping rides don't have the same car, so  

17

00:01:47,040  -->  00:01:53,400
starting from this graph, we want to assign a car 
value to each vertex such that if two vertices are  

18

00:01:53,400  -->  00:02:00,120
adjacent, then they don't have the same car value. 
And this can be done through graph coloring.  

19

00:02:02,280  -->  00:02:05,880
Let's first define graph coloring 
then go back to this problem.  

20

00:02:06,540  -->  00:02:12,120
Graph coloring is the action of coloring elements 
of a graph in respect to some conditions.  

21

00:02:13,140  -->  00:02:18,420
The simplest graph coloring example is 
vertex coloring, the action of coloring  

22

00:02:18,420  -->  00:02:23,760
vertices of a graph in such a way that no 
two adjacent vertices have the same color.  

23

00:02:25,140  -->  00:02:31,380
Note that there exist other forms of graph 
coloring, for example edge coloring where the task  

24

00:02:31,380  -->  00:02:37,260
is to color edges in such a way that no two edges 
with a common incident vertex have the same color.  

25

00:02:40,620  -->  00:02:47,400
Also note that even if it's called coloring, we're 
not really obliged to use colors, we can use names  

26

00:02:47,400  -->  00:02:53,880
or simply integers, the important is that no two 
adjacent vertices have the same assigned value.  

27

00:02:57,240  -->  00:03:03,780
Where can we use graph coloring? We can use it to 
solve problems where some vertices have conflicts  

28

00:03:03,780  -->  00:03:10,020
so they shouldn't be in the same color class. And 
we can find a lot of examples of this situation.  

29

00:03:10,560  -->  00:03:17,700
One of them is the example we used to introduce 
this lecture, overlapping rides. We represented  

30

00:03:17,700  -->  00:03:23,520
rides with vertices, and here vertices can have 
a conflict, when the rides overlap in time.  

31

00:03:24,060  -->  00:03:29,700
In that case, they shouldn't be in the same color 
class, they shouldn't be assigned the same car.  

32

00:03:31,440  -->  00:03:37,560
Another example, let's say that you want to invite 
a bunch of friends to a party. But some of them  

33

00:03:37,560  -->  00:03:44,040
hate each other, so you don't want to put them 
at the same table. This is why you start thinking  

34

00:03:44,040  -->  00:03:50,760
about how many tables you need to avoid problems. 
Here you think of graph coloring, vertices are  

35

00:03:50,760  -->  00:03:57,300
your friends, and you put an edge between two 
vertices if those two friends hate each other. Now  

36

00:03:57,300  -->  00:04:03,240
you just need to use a graph coloring algorithm 
to see how many tables you need, it's represented  

37

00:04:03,240  -->  00:04:08,760
by the minimum number of colors required to 
color vertices while respecting the condition.  

38

00:04:11,640  -->  00:04:17,040
And we can find a lot of other real life problems 
that can be solved through graph coloring,  

39

00:04:17,040  -->  00:04:23,820
but let's study some terminology. A graph 
cannot be colored with any number of colors,  

40

00:04:23,820  -->  00:04:30,240
sometimes it's not enough, for example we 
cannot color this graph with only two colors.  

41

00:04:31,860  -->  00:04:37,260
But if with a value k, we can color the 
graph by using at most k different colors,  

42

00:04:37,260  -->  00:04:44,460
we say that the graph is k-colorable. And 
the smallest value of k, the smallest number  

43

00:04:44,460  -->  00:04:51,180
of colors needed to color a graph, is called the 
chromatic number of the graph, denoted like this.  

44

00:04:53,460  -->  00:04:59,760
For example if we have this Petersen graph, we can 
color it with at most 5 colors, it's 5-colorable,  

45

00:05:00,360  -->  00:05:07,320
we can also color it with at most 3 colors, 
it's 3-colorable, but we cannot color it with  

46

00:05:07,320  -->  00:05:13,620
only 2 colors. The smallest value of k is 3, 
so the chromatic number of this graph is 3.  

47

00:05:16,080  -->  00:05:21,960
With the graph of our initial example, the 
chromatic number is also 3, so we need at  

48

00:05:21,960  -->  00:05:29,700
least 3 cars to perform the rides properly. And 
the chromatic number of a graph has boundaries.  

49

00:05:29,700  -->  00:05:36,120
For example we know that it's at least 1. The case 
where it's 1 is when we have an edgeless graph,  

50

00:05:36,120  -->  00:05:43,020
no conflict between vertices so we can color them 
all with the same color, we only need 1 color.  

51

00:05:44,400  -->  00:05:47,820
We also know that it's at most 
n, the number of vertices.  

52

00:05:48,660  -->  00:05:54,000
The case where it's n is when we have a 
complete graph, each vertex is adjacent  

53

00:05:54,000  -->  00:05:59,040
to all other vertices so its color must 
be different from them all. This is why  

54

00:05:59,040  -->  00:06:04,320
we need n colors, each vertex must have a 
different color from all the other ones.  

55

00:06:07,500  -->  00:06:11,340
These are quite weak bounds, 
we can find tighter bounds.  

56

00:06:12,480  -->  00:06:18,180
For example we know that the chromatic number of 
a graph is at least the size of its max clique.  

57

00:06:19,260  -->  00:06:25,080
Let's first define what is a clique and what is a 
max clique before continuing because we didn't do  

58

00:06:25,080  -->  00:06:32,160
it before in this course. A clique is a subset of 
vertices of a graph such that every two distinct  

59

00:06:32,160  -->  00:06:40,080
vertices are adjacent. It's like a small complete 
graph that we can find in a graph. For example  

60

00:06:40,080  -->  00:06:49,440
this graph has the clique {EFIJ}. It also contains 
the clique {ADEHI}. Or also this one {CFG}.  

61

00:06:51,840  -->  00:06:56,340
And the maximum clique of a graph is the 
clique with the greatest number of vertices,  

62

00:06:56,340  -->  00:07:00,720
in this graph it's this one, {ADEHI}.  

63

00:07:03,720  -->  00:07:09,600
Back to our boundary, we said that the chromatic 
number of a graph is at least the size of its  

64

00:07:09,600  -->  00:07:15,540
max clique. Which is logical, if in a graph we 
have a group of let's say 5 vertices that are  

65

00:07:15,540  -->  00:07:21,060
all adjacent to each other, then we will need 
a unique color for each one of them, we need 5  

66

00:07:21,060  -->  00:07:28,020
colors for that clique. This is why to color the 
graph, we will need at least 5 different colors,  

67

00:07:28,020  -->  00:07:33,960
at least because it can be more, the chromatic 
number isn't always equal to the size of the max  

68

00:07:33,960  -->  00:07:39,480
clique, it can be bigger, we just know that 
the size of the max clique is a lower bound.  

69

00:07:43,680  -->  00:07:51,480
We also have Δ(G)+1 as an upper bound, where Δ(G) 
is the maximum degree of a vertex in the graph G,  

70

00:07:51,480  -->  00:07:57,660
so the chromatic number of G is smaller than 
or equal to the maximum degree in G, + 1.  

71

00:08:00,120  -->  00:08:04,680
And we have other lower and upper bounds, 
we won't see them all in this lecture.  

72

00:08:07,500  -->  00:08:12,540
Another important thing to know in vertex 
coloring is that after coloring vertices,  

73

00:08:12,540  -->  00:08:20,940
vertices with the same color form a stable. 
We didn't define it before, a stable, also  

74

00:08:20,940  -->  00:08:26,520
called independent set, is like the opposite of 
a clique, it's a subset of vertices of the graph  

75

00:08:26,520  -->  00:08:33,060
such that no two vertices are adjacent. It's like 
a small edgeless graph that we find in a graph.  

76

00:08:35,340  -->  00:08:41,880
Vertices with a same color form a stable, no 
two vertices are adjacent. Which is logical  

77

00:08:41,880  -->  00:08:46,200
because if two of them were adjacent, 
then they shouldn't have the same color.  

78

00:08:49,140  -->  00:08:54,600
Okay now we know about graph coloring, 
k-colorability, chromatic number, but,  

79

00:08:54,600  -->  00:09:00,780
how to actually perform the vertex coloring of 
a graph? First of all, we need to clearly define  

80

00:09:00,780  -->  00:09:06,840
our problem, do we want to: Know if a graph 
is k-colorable? Or find the chromatic number?  

81

00:09:07,920  -->  00:09:14,580
The first one is a decision problem, the output 
is yes or no. And it's an NP-complete problem.  

82

00:09:15,420  -->  00:09:21,780
The second is not a decision problem, it's an 
optimization problem, as a result we want an  

83

00:09:21,780  -->  00:09:28,200
integer, the chromatic number. It cannot be in 
NP-complete class because it's not a decision  

84

00:09:28,200  -->  00:09:37,740
problem, however, it's an NP-hard problem. Because 
these problems are in NP-complete and NP-hard  

85

00:09:37,740  -->  00:09:43,380
respectively, we currently don't know an algorithm 
to solve them that is not in exponential time,  

86

00:09:43,380  -->  00:09:50,160
which is slow, we deduce that exact algorithms for 
finding the chromatic number of a graph are slow,  

87

00:09:50,160  -->  00:09:57,540
we had the same problem with Hamiltonian 
cycles if you remember. However,  

88

00:09:57,540  -->  00:10:02,880
it's still interesting to know a way to solve 
the problem, even if it's in exponential time.  

89

00:10:04,320  -->  00:10:09,900
A possible way to find the chromatic number of a 
graph is to first know how to check if a graph is  

90

00:10:09,900  -->  00:10:16,260
k-colorable, then find the smallest value of k for 
which the is_k_colorable() function returns true.  

91

00:10:18,120  -->  00:10:25,140
Okay but how to know if a graph is k-colorable? 
For that, we can use backtracking, we will see it  

92

00:10:25,140  -->  00:10:32,400
later in this graph coloring chapter. However, 
even if exact algorithms are currently slow,  

93

00:10:32,400  -->  00:10:38,400
we have approximation algorithms that are way 
faster and give good results that we will see  

94

00:10:38,400  -->  00:10:44,700
later in this chapter. Also, you need to know 
that when we say that a problem can be solved  

95

00:10:44,700  -->  00:10:51,300
in a certain time complexity, it can have special 
cases, special types of inputs, where it's faster.  

96

00:10:52,620  -->  00:11:00,420
Special types of graphs in this context. For 
example checking k-colorability of a graph,  

97

00:11:00,420  -->  00:11:07,920
in the general case, is in exponential time. 
But, when k = 2, it can be done in linear time.  

98

00:11:08,940  -->  00:11:14,700
Because checking 2-colorability of a graph is 
in reality checking if it's a bipartite graph.  

99

00:11:15,300  -->  00:11:22,320
By definition, a bipartite graph is a graph whose 
vertices can be partitioned into two disjoint and  

100

00:11:22,320  -->  00:11:29,100
independent sets. This is why a bipartite graph 
is 2-colorable, remember that vertices of a same  

101

00:11:29,100  -->  00:11:36,360
color class form a stable set, an independent 
set. And because we can partition vertices of a  

102

00:11:36,360  -->  00:11:42,480
bipartite graph into two disjoint and independent 
sets, two colors are enough to color it,  

103

00:11:42,480  -->  00:11:49,800
we assign the first color to the first set and the 
second color to the second set. So checking if a  

104

00:11:49,800  -->  00:11:55,500
graph is 2-colorable is equivalent to checking if 
it's a bipartite graph, and checking if a graph  

105

00:11:55,500  -->  00:12:01,080
is a bipartite graph can be done in linear 
time, as we will see in the next lecture.  

106

00:12:03,900  -->  00:12:08,280
Last thing I wanted to talk about in 
this lecture is the four color theorem.  

107

00:12:08,280  -->  00:12:14,100
First you need to know what is a planar 
graph. A planar graph is a graph that  

108

00:12:14,100  -->  00:12:19,740
can be drawn in a such a way that no two 
edges cross. For example for this graph,  

109

00:12:19,740  -->  00:12:26,280
we can draw it like this, and you can see that 
there is no edges that cross, it's a planar graph.  

110

00:12:26,880  -->  00:12:33,000
However, if we take this graph, which 
represents K5, the complete graph of order 5,  

111

00:12:33,000  -->  00:12:38,700
we cannot draw it without having at least two 
edges that cross, it's not a planar graph.  

112

00:12:40,800  -->  00:12:47,520
We can talk about the theorem now. The four color 
theorem states that for any loopless planar graph  

113

00:12:47,520  -->  00:12:54,900
G, the chromatic number of G is at most 4. In 
other terms, any loopless planar graph can be  

114

00:12:54,900  -->  00:13:02,340
colored with no more than 4 colors. First of all, 
why loopless, why does it work for loopless graphs  

115

00:13:02,340  -->  00:13:09,480
only. It's because vertex coloring doesn't work on 
graphs that contain loops. The explanation is that  

116

00:13:09,480  -->  00:13:16,260
when a vertex u has a self-loop, then there is an 
edge between u and u, so u is adjacent to itself.  

117

00:13:17,580  -->  00:13:22,260
And in vertex coloring, two adjacent 
vertices must have different colors,  

118

00:13:22,260  -->  00:13:29,640
while a vertex can only be assigned one color, it 
will necessarily have the same color as itself,  

119

00:13:29,640  -->  00:13:36,300
which is not allowed in this context. So 
the theorem requires loopless planar graphs  

120

00:13:36,300  -->  00:13:44,040
simply because graph coloring works on loopless 
graphs only. Back to the theorem. Initially,  

121

00:13:44,040  -->  00:13:50,400
the theorem wasn't proven, but after several 
attempts, the theorem has been proven, we now  

122

00:13:50,400  -->  00:13:56,940
know that yes, using four colors only is enough 
to color any planar graph, loopless of course.  

123

00:14:00,240  -->  00:14:06,180
It's the reason why geography maps you see 
can almost always be colored with 4 colors.  

124

00:14:08,100  -->  00:14:13,980
Because this type of maps can be represented with 
a planar graph such that vertices are countries,  

125

00:14:13,980  -->  00:14:19,680
and there is an edge between two countries when 
they share a common boundary that is not a corner.  

126

00:14:22,320  -->  00:14:25,560
And because four colors are 
enough to color a planar graph,  

127

00:14:25,560  -->  00:14:29,100
then four colors are enough to color such maps.  

128

00:14:31,800  -->  00:14:36,480
We've reached the end of this lecture, we've seen 
what is graph coloring, some real life examples,  

129

00:14:36,480  -->  00:14:42,660
some terminology, k-colorability and chromatic 
number problems, and the four color theorem.  

130

00:14:43,380  -->  00:14:48,060
In the next lecture, we will see how 
to check the 2-colorability of a graph,  

131

00:14:48,060  -->  00:14:53,580
which is same as checking if the graph is 
bipartite. See you in the next lecture!
