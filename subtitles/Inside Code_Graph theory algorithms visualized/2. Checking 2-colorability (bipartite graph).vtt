WEBVTT
1

00:00:00.060  -->  00:00:04.260
In the last lecture, we mentioned that 
checking the 2-colorability of a graph  

2

00:00:04.260  -->  00:00:10.200
is equivalent to checking if it's a bipartite 
graph, it's what we will learn in this lecture.  

3

00:00:11.400  -->  00:00:16.860
Reminder that a bipartite graph is a graph 
whose vertices can be partitioned into two  

4

00:00:16.860  -->  00:00:23.340
disjoint and independent sets, so the goal 
here is to try to partition vertices and see  

5

00:00:23.340  -->  00:00:28.680
if it's possible to do so. To know to which 
one of the two sets a vertex belongs to,  

6

00:00:28.680  -->  00:00:36.840
we can either use 0 and 1, or simply use colors: 
red and blue for example. Let's use colors,  

7

00:00:36.840  -->  00:00:42.900
red vertices are the ones that belong to the first 
set and blue vertices represent the second set.  

8

00:00:44.100  -->  00:00:48.540
The main idea we will use is that if 
a vertex is assigned a certain color,  

9

00:00:48.540  -->  00:00:54.240
then all its neighbors must have a different 
color, and because there are only two colors,  

10

00:00:54.240  -->  00:01:00.420
they must have the opposite color. So if a 
vertex is red, all its neighbors must be blue,  

11

00:01:00.420  -->  00:01:05.520
and vice versa, if a vertex is blue, 
then all its neighbors must be red.  

12

00:01:06.720  -->  00:01:13.020
To apply that, we can start from any vertex, we 
color it with red for example. All its neighbors  

13

00:01:13.020  -->  00:01:18.720
must be blue, so we color them with blue and 
traverse them. Then we alternate again, their  

14

00:01:18.720  -->  00:01:24.720
neighbors must be red, we color them with red 
and traverse them. And so on until we color all  

15

00:01:24.720  -->  00:01:30.900
the graph, we get a bipartite graph, we have the 
set of red vertices and the set of blue vertices.  

16

00:01:34.620  -->  00:01:40.440
This scenario is possible when the graph is 
2-colorable, we face no problem when coloring,  

17

00:01:40.440  -->  00:01:45.900
we can just traverse the graph normally while 
always assigning the opposite color of the  

18

00:01:45.900  -->  00:01:51.900
actual vertex to the neighbor. However, we can 
have the case where 2 colors are not enough,  

19

00:01:51.900  -->  00:01:58.380
here's a small example. We decide to start 
from this first vertex, we color it with red.  

20

00:01:59.820  -->  00:02:06.120
We could choose blue by the way, no big deal. 
Now we color all its neighbors with blue and  

21

00:02:06.120  -->  00:02:11.520
traverse them. We start with this neighbor, it's 
blue, so we must color its neighbors with red.  

22

00:02:12.180  -->  00:02:16.500
But wait, it has a neighbor that 
is also blue, and remember that two  

23

00:02:16.500  -->  00:02:21.240
adjacent vertices are not allowed to have 
the same color, we have a problem here.  

24

00:02:23.700  -->  00:02:29.340
What do we do? We turn the actual vertex to red? 
No, there would be a conflict with the previous  

25

00:02:29.340  -->  00:02:36.120
vertex. We turn the neighbor to red? No, also a 
conflict with the previous vertex. The answer is  

26

00:02:36.120  -->  00:02:42.660
that there's nothing to do, the graph is simply 
not 2-colorable, it's not a bipartite graph.  

27

00:02:45.120  -->  00:02:50.220
Let's see a bigger example to better 
understand. We have this graph, we can  

28

00:02:50.220  -->  00:02:57.180
start from any vertex and assign any color, 
let's assign red. Now to traverse vertices,  

29

00:02:57.180  -->  00:03:03.720
we can for example use bfs. For that we need a 
queue, where we store next vertices to be visited.  

30

00:03:04.500  -->  00:03:10.500
We traverse neighbors, we color them with the 
opposite color, blue, while also enqueuing them.  

31

00:03:12.000  -->  00:03:16.980
We dequeue the next vertex. In its 
neighbors we can find two uncolored  

32

00:03:16.980  -->  00:03:21.180
vertices, we color them and add them 
to the queue, and one colored vertex.  

33

00:03:21.900  -->  00:03:27.960
But it has the opposite so no conflict, we just 
don't enqueue it because it's already visited.  

34

00:03:30.660  -->  00:03:35.040
We dequeue the next vertex. It 
has two opposite color neighbors,  

35

00:03:35.040  -->  00:03:40.620
and one uncolored neighbor, we color it with 
the opposite color, red, and we enqueue it.  

36

00:03:41.640  -->  00:03:46.140
Next vertex, both neighbors are colored 
with the opposite color, we do nothing.  

37

00:03:47.340  -->  00:03:52.620
Next vertex, same thing, neighbors all 
colored with opposite color, we move on.  

38

00:03:53.520  -->  00:03:57.780
Next vertex, one neighbor with 
opposite color, we do nothing to it,  

39

00:03:57.780  -->  00:04:02.760
and one uncolored neighbor, we color it 
with the opposite color and we enqueue it.  

40

00:04:04.500  -->  00:04:09.120
Next vertex, all neighbors are colored 
with the opposite color, we do nothing.  

41

00:04:11.220  -->  00:04:17.100
Next vertex, one uncolored neighbor, we color 
it with red because the actual vertex is blue,  

42

00:04:17.100  -->  00:04:22.680
and we enqueue it. Next vertex, 
all neighbors have opposite color.  

43

00:04:23.640  -->  00:04:29.940
And the queue became empty. But it doesn't mean 
that we finished, we have a disconnected graph,  

44

00:04:29.940  -->  00:04:35.760
so we should start over from an unvisited vertex 
to continue, remember the lecture about bfs.  

45

00:04:37.440  -->  00:04:42.900
Let's start again from N, we color it with 
red. It has three uncolored neighbors,  

46

00:04:42.900  -->  00:04:49.140
we color them with blue and enqueue them. Next 
vertex, it has one neighbor with opposite color,  

47

00:04:49.140  -->  00:04:55.320
two uncolored neighbors, we color them and 
enqueue them, but it also has a neighbor that  

48

00:04:55.320  -->  00:05:01.320
has the same color. It means that the vertex 
coloring isn't respected, and to respect it,  

49

00:05:01.320  -->  00:05:08.220
we would need a third color. We deduce that this 
graph is not bipartite, it's not 2-colorable.  

50

00:05:09.660  -->  00:05:16.200
And as you can see, we could know it with a simple 
bfs traversal, which is done in linear time.  

51

00:05:20.280  -->  00:05:25.140
Let's implement this algorithm. For the 
implementation, we will use color_map,  

52

00:05:25.140  -->  00:05:29.040
a hash map where the key is a 
vertex and the value is its color.  

53

00:05:29.700  -->  00:05:35.100
It will also serve as a visited set, because 
a vertex that is not present in the color map  

54

00:05:35.100  -->  00:05:42.660
means that it's not visited yet, because if 
it was, it would be colored. Also, because  

55

00:05:42.660  -->  00:05:48.060
the graph may be disconnected and our algorithm 
should handle disconnected graphs, we will need  

56

00:05:48.060  -->  00:05:54.360
a bfs function that we will later call on each 
unvisited vertex, as we did in the bfs lecture.  

57

00:05:56.400  -->  00:06:01.800
Let's start making it. As parameters, it needs 
the graph, the vertex from where to start,  

58

00:06:01.800  -->  00:06:10.140
and the color map. We start by coloring the start 
vertex, let's color it with red, we put 0. Note  

59

00:06:10.140  -->  00:06:16.320
that 0 means red and 1 means blue, it's just an 
arbitrary way of labeling, we could actually write  

60

00:06:16.320  -->  00:06:23.820
'red' and 'blue' as strings but we can simply use 
0 and 1. We also need to create a queue where we  

61

00:06:23.820  -->  00:06:30.900
put the start vertex. Now we can start looping, we 
keep looping while the queue still has elements.  

62

00:06:31.500  -->  00:06:37.020
Inside the loop, we start by extracting a 
vertex. And now we traverse its neighbors.  

63

00:06:37.680  -->  00:06:43.620
For each neighbor, we have three cases: The case 
where it's uncolored, the case where it's colored  

64

00:06:43.620  -->  00:06:49.440
with the opposite color, and the case where it's 
colored with the same color. When it's uncolored,  

65

00:06:49.440  -->  00:06:55.260
we color it with the opposite color and enqueue 
it because it's not visited yet. When it's colored  

66

00:06:55.260  -->  00:06:59.940
with the opposite color, we have nothing to 
do. And when it's colored with the same color,  

67

00:06:59.940  -->  00:07:06.000
then the graph is not bipartite, we don't need to 
continue, we directly return false or something.  

68

00:07:07.320  -->  00:07:13.860
In code, for the first case, the condition is: 
neighbor not in color_map, when we cannot find  

69

00:07:13.860  -->  00:07:19.140
it as a key. In that case, we assign to 
it the opposite color, and we enqueue it.  

70

00:07:20.820  -->  00:07:26.700
The opposite color is calculated with 
1-x, where x is the color of the actual  

71

00:07:26.700  -->  00:07:33.120
vertex. Because 1-0 is 1, and 1-1 is 
0, always gives the opposite color.  

72

00:07:36.420  -->  00:07:40.860
For the third case we write, if 
color_map[neighbor] is equal to color_map[vertex],  

73

00:07:41.400  -->  00:07:47.340
we return false. And nothing happens in the 
second case so we don't need to add code for it.  

74

00:07:49.020  -->  00:07:54.540
And if we've been able to color all vertices 
traversed by this bfs traversal, we return true.  

75

00:07:56.040  -->  00:08:00.660
Now in the is_bipartite function, 
we need as parameter the graph.  

76

00:08:00.660  -->  00:08:08.040
It will be a boolean function that says if yes or 
no it's bipartite. We start by creating the color  

77

00:08:08.040  -->  00:08:13.980
map, then for each unvisited vertex, we call 
bfs on it to color its connected component.  

78

00:08:16.740  -->  00:08:20.700
If that calls returns false, then we 
found a problem in that component,  

79

00:08:20.700  -->  00:08:28.860
the graph is not bipartite, we return false. If 
we've been able to color all connected components  

80

00:08:28.860  -->  00:08:35.520
with no problem, then the graph is bipartite, 
we return true. And we solved the problem.  

81

00:08:38.460  -->  00:08:43.440
Note that if we wanted to actually get the 
colors of vertices and not just yes or no,  

82

00:08:43.440  -->  00:08:49.980
we could return the color map instead. Or 
compute the two independent sets by using  

83

00:08:49.980  -->  00:08:57.480
the color map and return them. And the time 
complexity of this algorithm is O(|V|+|E|)  

84

00:08:57.480  -->  00:09:04.140
because we're performing a simple bfs traversal, 
we can check 2-colorability in linear time.  

85

00:09:07.020  -->  00:09:12.540
Okay we can check 2-colorability in linear 
time, what about the general case? What  

86

00:09:12.540  -->  00:09:17.760
about k-colorability? Unfortunately, 
2-colorability is a special case,  

87

00:09:17.760  -->  00:09:24.360
checking k-colorability with k greater than 2 
can currently be done in exponential time only.  

88

00:09:25.500  -->  00:09:28.800
We will still see an algorithm 
for that in the next lecture,  

89

00:09:28.800  -->  00:09:33.960
an algorithm where we will use 
backtracking. See you in the next lecture.
