WEBVTT
1
00:00:00.005 --> 00:00:02.005
- [Instructor] During chunk-based processing,

2
00:00:02.005 --> 00:00:04.008
business logic can be inserted between

3
00:00:04.008 --> 00:00:09.001
when items are read and when the items are written.

4
00:00:09.001 --> 00:00:11.005
To do this logic, Spring Batch provides

5
00:00:11.005 --> 00:00:15.001
the ItemProcessor interface.

6
00:00:15.001 --> 00:00:17.009
The ItemProcessor interface is implemented

7
00:00:17.009 --> 00:00:20.008
to introduce custom business logic that occurs

8
00:00:20.008 --> 00:00:23.008
between the ItemReader and ItemWriter.

9
00:00:23.008 --> 00:00:25.008
This allows developers to address

10
00:00:25.008 --> 00:00:30.009
custom batch processing logic within chunk-based processing.

11
00:00:30.009 --> 00:00:34.006
Typical use cases for the ItemProcessor include

12
00:00:34.006 --> 00:00:38.007
transformation, validation, and filtering of the items

13
00:00:38.007 --> 00:00:41.005
flowing through chunk-based processing.

14
00:00:41.005 --> 00:00:43.004
Below you will see the contract

15
00:00:43.004 --> 00:00:45.009
for the ItemProcessor interface,

16
00:00:45.009 --> 00:00:48.006
which contains a single process method

17
00:00:48.006 --> 00:00:50.003
that must be implemented.

18
00:00:50.003 --> 00:00:53.005
It is important to note the type arguments.

19
00:00:53.005 --> 00:00:58.000
These represent the input and output of the processor.

20
00:00:58.000 --> 00:00:59.009
In the case of a transformation,

21
00:00:59.009 --> 00:01:03.006
the type accepted as input may differ from the type

22
00:01:03.006 --> 00:01:05.004
accepted as output,

23
00:01:05.004 --> 00:01:10.001
requiring the job to account for this change in type.

24
00:01:10.001 --> 00:01:12.006
In some cases, you may need to include

25
00:01:12.006 --> 00:01:16.003
multiple processors within a chunk-based step.

26
00:01:16.003 --> 00:01:19.007
To support this, Spring Batch allows processors

27
00:01:19.007 --> 00:01:24.003
to be chained using a composite ItemProcessor.

28
00:01:24.003 --> 00:01:27.001
It is important to reiterate that an ItemProcessor

29
00:01:27.001 --> 00:01:31.000
is not a required component within a chunk-based step.

30
00:01:31.000 --> 00:01:34.000
If you are simply moving data from one source to another,

31
00:01:34.000 --> 00:01:35.007
it may not be necessary,

32
00:01:35.007 --> 00:01:40.009
but most jobs will require some sort of processing.

33
00:01:40.009 --> 00:01:43.003
I've mentioned that filtering and validation

34
00:01:43.003 --> 00:01:46.008
were a typical use case for an ItemProcessor.

35
00:01:46.008 --> 00:01:49.000
Let's see an example of that chunk-based

36
00:01:49.000 --> 00:01:51.007
processing logic in action.

37
00:01:51.007 --> 00:01:54.007
In this example, I'm combining filtering and validation

38
00:01:54.007 --> 00:01:58.008
in one example because the process is very similar.

39
00:01:58.008 --> 00:02:03.006
The ItemReader will ingest the data one item at a time

40
00:02:03.006 --> 00:02:05.002
passing it to the processor,

41
00:02:05.002 --> 00:02:08.003
which decides whether to filter the item

42
00:02:08.003 --> 00:02:11.001
or determines if it is valid.

43
00:02:11.001 --> 00:02:12.009
In the case of filtering,

44
00:02:12.009 --> 00:02:16.000
we only pass items meeting the filter criteria

45
00:02:16.000 --> 00:02:18.003
to the ItemWriter.

46
00:02:18.003 --> 00:02:20.007
The same occurs for validation,

47
00:02:20.007 --> 00:02:24.003
although we could fail the job when validating.

48
00:02:24.003 --> 00:02:27.006
Valid items are then passed to the ItemWriter

49
00:02:27.006 --> 00:02:30.007
to be written to a data source.

50
00:02:30.007 --> 00:02:35.004
Another use case for an ItemProcessor is transformation.

51
00:02:35.004 --> 00:02:38.004
You will notice that I've generically typed the components

52
00:02:38.004 --> 00:02:40.004
within our chunk-based step,

53
00:02:40.004 --> 00:02:44.006
indicating the type of input or output expected.

54
00:02:44.006 --> 00:02:47.005
Once again, the ItemReader will ingest the data,

55
00:02:47.005 --> 00:02:50.007
one item at a time, passing it to the processor

56
00:02:50.007 --> 00:02:53.007
which then transforms our items

57
00:02:53.007 --> 00:02:57.007
from the type ItemA to ItemB.

58
00:02:57.007 --> 00:03:01.003
Our writer is generically typed for ItemB

59
00:03:01.003 --> 00:03:03.003
and after the transformation,

60
00:03:03.003 --> 00:03:07.002
it writes the transformed item to the data store.

61
00:03:07.002 --> 00:03:10.001
We'll see how to implement this processing logic

62
00:03:10.001 --> 00:03:11.006
in the upcoming lessons,

63
00:03:11.006 --> 00:03:15.000
along with an example of the composite ItemWriter.

