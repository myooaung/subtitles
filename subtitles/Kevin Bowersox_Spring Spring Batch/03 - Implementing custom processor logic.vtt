WEBVTT
1
00:00:00.005 --> 00:00:03.005
- [Instructor] When we need our own custom processing logic,

2
00:00:03.005 --> 00:00:05.007
spring batch allows us to create

3
00:00:05.007 --> 00:00:09.002
a custom item processor implementation.

4
00:00:09.002 --> 00:00:11.005
The logic within an item processor

5
00:00:11.005 --> 00:00:14.004
often is used to transform items

6
00:00:14.004 --> 00:00:16.008
to meet business requirements.

7
00:00:16.008 --> 00:00:19.003
Let's take a look at how we can implement

8
00:00:19.003 --> 00:00:22.002
our own custom item processor

9
00:00:22.002 --> 00:00:26.007
to transform an order for H+ Sports

10
00:00:26.007 --> 00:00:28.008
into an order that includes

11
00:00:28.008 --> 00:00:32.003
some tracking information regarding a shipment.

12
00:00:32.003 --> 00:00:36.007
So you'll notice within the working files for this lesson,

13
00:00:36.007 --> 00:00:39.000
I've added a new POJO.

14
00:00:39.000 --> 00:00:43.004
And this POJO is the tracked order POJO.

15
00:00:43.004 --> 00:00:48.002
And it extends our order objects so it has all those fields,

16
00:00:48.002 --> 00:00:52.002
but it does include two additional pieces of information.

17
00:00:52.002 --> 00:00:54.001
One is the tracking number.,

18
00:00:54.001 --> 00:00:57.002
And then another is a Boolean that indicates whether

19
00:00:57.002 --> 00:01:01.007
or not the tracked order is going to receive free shipping.

20
00:01:01.007 --> 00:01:04.008
We're going to take a look at how we can create

21
00:01:04.008 --> 00:01:07.004
an item processor implementation

22
00:01:07.004 --> 00:01:12.002
that will transform an order into a tracked order.

23
00:01:12.002 --> 00:01:16.001
To get started, let's head over to our job configuration.

24
00:01:16.001 --> 00:01:18.009
And we're going to modify

25
00:01:18.009 --> 00:01:22.008
the configuration of our chunk base step.

26
00:01:22.008 --> 00:01:26.000
Currently that step is using the order

27
00:01:26.000 --> 00:01:28.005
validating item processor.

28
00:01:28.005 --> 00:01:32.006
And we're going to remove the call to that method.

29
00:01:32.006 --> 00:01:35.003
And we're going to add our own call

30
00:01:35.003 --> 00:01:41.000
for the tracked order item processor.

31
00:01:41.000 --> 00:01:44.001
And we'll just create that method stub.

32
00:01:44.001 --> 00:01:45.006
And then we can go ahead

33
00:01:45.006 --> 00:01:50.002
and add the method to our configuration.

34
00:01:50.002 --> 00:01:55.005
And you'll see that it is placed below our chunk base step.

35
00:01:55.005 --> 00:01:59.003
Now before we go any further, we need to modify

36
00:01:59.003 --> 00:02:02.005
the configuration of our chunk base step,

37
00:02:02.005 --> 00:02:07.005
specifically the generic type arguments of the chunk.

38
00:02:07.005 --> 00:02:10.007
We're going to be receiving an order as input,

39
00:02:10.007 --> 00:02:14.001
but we're no longer going to be outputting an order

40
00:02:14.001 --> 00:02:16.004
from our chunk base step.

41
00:02:16.004 --> 00:02:20.001
Instead, it's going to be a tracked order.

42
00:02:20.001 --> 00:02:25.004
So we'll need to modify that configuration of the chunk.

43
00:02:25.004 --> 00:02:30.008
And that's going to mean we'll need to modify the signature

44
00:02:30.008 --> 00:02:33.006
of our item processor.

45
00:02:33.006 --> 00:02:37.009
So let's go ahead and change that.

46
00:02:37.009 --> 00:02:43.000
And then we're also going to have to modify our item writer.

47
00:02:43.000 --> 00:02:45.008
So let's go modify the writer.

48
00:02:45.008 --> 00:02:50.006
In order to output a tracked order,

49
00:02:50.006 --> 00:02:54.009
we'll need to also change our builder

50
00:02:54.009 --> 00:02:59.006
and our Jackson Json object marshaller, okay.

51
00:02:59.006 --> 00:03:03.000
So everything is converted over to use

52
00:03:03.000 --> 00:03:06.002
the appropriate generic type arguments.

53
00:03:06.002 --> 00:03:10.001
Now let's grab the item processor configuration,

54
00:03:10.001 --> 00:03:15.008
and we'll add it to the top of our class.

55
00:03:15.008 --> 00:03:19.007
And just like the others, we're going to define

56
00:03:19.007 --> 00:03:24.003
this item processor as a beam.

57
00:03:24.003 --> 00:03:28.006
And we'll switch over to make this method public.

58
00:03:28.006 --> 00:03:31.001
And then within this method,

59
00:03:31.001 --> 00:03:33.009
we're going to create a new instance

60
00:03:33.009 --> 00:03:37.008
of a tracked order item processor.

61
00:03:37.008 --> 00:03:43.009
And I'm just creating a stub constructor for that object.

62
00:03:43.009 --> 00:03:46.008
And we can go ahead hit Control + one.

63
00:03:46.008 --> 00:03:51.000
that's going to allow us to create that type.

64
00:03:51.000 --> 00:03:54.008
And once we get this dialog, you'll see it's selected

65
00:03:54.008 --> 00:03:58.001
the item processor interface for us.

66
00:03:58.001 --> 00:03:59.006
And here's where

67
00:03:59.006 --> 00:04:04.003
we can build out our own custom item processor.

68
00:04:04.003 --> 00:04:08.001
You'll notice that the interface is generically typed

69
00:04:08.001 --> 00:04:10.006
with the appropriate input of order,

70
00:04:10.006 --> 00:04:13.006
the appropriate output of tracked order.

71
00:04:13.006 --> 00:04:18.002
And then we have to define this single process method

72
00:04:18.002 --> 00:04:23.002
that inputs an order, and it returns a tracked order.

73
00:04:23.002 --> 00:04:26.007
So it's up to us to do that conversion.

74
00:04:26.007 --> 00:04:28.006
So let's start out.

75
00:04:28.006 --> 00:04:34.005
We're going to create an instance of a tracked order.

76
00:04:34.005 --> 00:04:38.003
And you'll see that we have a constructor

77
00:04:38.003 --> 00:04:40.003
for the tracked order

78
00:04:40.003 --> 00:04:45.004
that accepts an argument of type order.

79
00:04:45.004 --> 00:04:48.006
And what it does, it just copies all of the fields

80
00:04:48.006 --> 00:04:53.006
from the order over to our tracked order.

81
00:04:53.006 --> 00:04:56.005
And then specifically for the tracking,

82
00:04:56.005 --> 00:04:58.001
we're going to be concerned

83
00:04:58.001 --> 00:05:00.006
with setting the tracking number.

84
00:05:00.006 --> 00:05:03.008
So we can use a UUID.

85
00:05:03.008 --> 00:05:06.004
And we can just generate a random one,

86
00:05:06.004 --> 00:05:10.008
convert it to a string and set that on our tracked order.

87
00:05:10.008 --> 00:05:13.000
And then from our processor,

88
00:05:13.000 --> 00:05:17.000
we'll go ahead and return that tracked order.

89
00:05:17.000 --> 00:05:20.008
So you can see the transformation occurring right here.

90
00:05:20.008 --> 00:05:25.006
We're moving from the order item as input,

91
00:05:25.006 --> 00:05:27.006
doing some transformation,

92
00:05:27.006 --> 00:05:32.001
and then returning a tracked order, okay.

93
00:05:32.001 --> 00:05:36.009
So if we navigate back to our application,

94
00:05:36.009 --> 00:05:40.003
we can go ahead and save the changes.

95
00:05:40.003 --> 00:05:44.007
And now we're going to navigate over to the terminal,

96
00:05:44.007 --> 00:05:47.009
and we'll go ahead and launch our job with the script.

97
00:05:47.009 --> 00:05:51.000
This will cause the application to package

98
00:05:51.000 --> 00:05:55.004
and we will then run our job.

99
00:05:55.004 --> 00:05:58.000
You'll remember that we were using

100
00:05:58.000 --> 00:06:01.004
the Jason file item writer.

101
00:06:01.004 --> 00:06:04.003
So our output should have been written

102
00:06:04.003 --> 00:06:07.009
to the data directory as Jason output.

103
00:06:07.009 --> 00:06:11.006
Here we see the file, and if we inspect that file,

104
00:06:11.006 --> 00:06:15.006
you'll notice that we now have a tracking number

105
00:06:15.006 --> 00:06:17.004
included on our order.

106
00:06:17.004 --> 00:06:18.009
And that's because we were able

107
00:06:18.009 --> 00:06:21.004
to perform that transformation

108
00:06:21.004 --> 00:06:24.000
using our custom item processor.

