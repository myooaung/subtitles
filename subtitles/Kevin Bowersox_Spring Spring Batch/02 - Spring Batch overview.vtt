WEBVTT
1
00:00:00.005 --> 00:00:03.002
- [Instructor] Spring Batch is a lightweight framework

2
00:00:03.002 --> 00:00:05.008
for building Java based applications

3
00:00:05.008 --> 00:00:08.007
that perform batch processing.

4
00:00:08.007 --> 00:00:11.007
Enterprises in every industry can complete

5
00:00:11.007 --> 00:00:14.007
their business operations by using Spring Batch

6
00:00:14.007 --> 00:00:19.005
to perform long running, bulk processes behind the scenes.

7
00:00:19.005 --> 00:00:22.000
The framework runs on top of the JVM

8
00:00:22.000 --> 00:00:23.009
and it's build on top of Spring,

9
00:00:23.009 --> 00:00:27.003
so you can leverage all of Spring's capabilities within

10
00:00:27.003 --> 00:00:30.001
your batch applications.

11
00:00:30.001 --> 00:00:32.005
Batch processing has a long history

12
00:00:32.005 --> 00:00:36.002
that dates back to the earliest days of computing.

13
00:00:36.002 --> 00:00:37.009
There is a proven architecture

14
00:00:37.009 --> 00:00:41.000
that can address the traditional challenges developers

15
00:00:41.000 --> 00:00:44.008
face when building batch applications.

16
00:00:44.008 --> 00:00:47.005
Spring Batch packages this architecture

17
00:00:47.005 --> 00:00:50.000
into an easy to use framework

18
00:00:50.000 --> 00:00:52.001
so that you don't have to figure out problems

19
00:00:52.001 --> 00:00:53.009
that were solved 20 years ago if

20
00:00:53.009 --> 00:00:56.002
you want to build a batch job.

21
00:00:56.002 --> 00:00:58.008
Don't be overwhelmed by this diagram,

22
00:00:58.008 --> 00:01:00.001
we'll cover the details

23
00:01:00.001 --> 00:01:02.009
of each of these components within the architecture

24
00:01:02.009 --> 00:01:05.001
throughout the course.

25
00:01:05.001 --> 00:01:06.005
Now let's take a look at some

26
00:01:06.005 --> 00:01:09.000
of the key features found in Spring Batch

27
00:01:09.000 --> 00:01:12.005
that make it very attractive for developers.

28
00:01:12.005 --> 00:01:16.002
Out of the box Spring Batch provides the ability

29
00:01:16.002 --> 00:01:21.001
to capture the state of our batch jobs as they execute.

30
00:01:21.001 --> 00:01:25.006
During execution of a job, Spring Batch writes metadata

31
00:01:25.006 --> 00:01:29.009
to a job repository at various points in time,

32
00:01:29.009 --> 00:01:31.007
we don't even need to write any code

33
00:01:31.007 --> 00:01:33.005
to make this happen.

34
00:01:33.005 --> 00:01:35.007
This is very helpful when determining

35
00:01:35.007 --> 00:01:39.007
what jobs have executed, why a job has failed,

36
00:01:39.007 --> 00:01:43.001
and is used to support additional batch functionality

37
00:01:43.001 --> 00:01:45.008
like restarts.

38
00:01:45.008 --> 00:01:49.003
In the event a job does fail Spring Batch

39
00:01:49.003 --> 00:01:50.009
provides the capability

40
00:01:50.009 --> 00:01:54.000
to restart the job from where we left off

41
00:01:54.000 --> 00:01:58.009
based upon information about the job in the job repository.

42
00:01:58.009 --> 00:02:01.000
So if we execute this job

43
00:02:01.000 --> 00:02:04.004
and processing fails when reading the second chuck

44
00:02:04.004 --> 00:02:06.004
of data in step two,

45
00:02:06.004 --> 00:02:09.004
the entire job will be marked as failed.

46
00:02:09.004 --> 00:02:11.007
So we see step two marked as failed,

47
00:02:11.007 --> 00:02:15.004
and then our job ultimately has failed.

48
00:02:15.004 --> 00:02:19.004
We can then use the framework to relaunch the job.

49
00:02:19.004 --> 00:02:21.005
And the job will begin to execute,

50
00:02:21.005 --> 00:02:25.000
skipping those steps that have executed successfully

51
00:02:25.000 --> 00:02:29.009
and starting at our failed step, in this case step two.

52
00:02:29.009 --> 00:02:33.005
Step two will not process the first chunk of data,

53
00:02:33.005 --> 00:02:36.003
it's going to restart at the second chuck,

54
00:02:36.003 --> 00:02:39.006
and here we see that it completes successfully.

55
00:02:39.006 --> 00:02:41.006
At that point, both our step

56
00:02:41.006 --> 00:02:45.004
and job will be marked as successfully executed

57
00:02:45.004 --> 00:02:48.004
within the job repository.

58
00:02:48.004 --> 00:02:52.004
Most batch jobs need to read data from some data source,

59
00:02:52.004 --> 00:02:55.004
do some processing, then write the process data

60
00:02:55.004 --> 00:02:57.004
to another data source.

61
00:02:57.004 --> 00:02:59.008
Spring Batch provides the item reader

62
00:02:59.008 --> 00:03:01.009
and item writer interfaces

63
00:03:01.009 --> 00:03:04.002
to abstract this concept

64
00:03:04.002 --> 00:03:07.002
and provides out of the box implementations

65
00:03:07.002 --> 00:03:09.007
for consuming or writing data

66
00:03:09.007 --> 00:03:12.008
to popular data sources like flat files,

67
00:03:12.008 --> 00:03:18.003
relational databases, XML files, JSON files, and Kafka.

68
00:03:18.003 --> 00:03:20.009
So the framework handles a lot of the heavy lifting

69
00:03:20.009 --> 00:03:25.001
when it comes to reading and writing data in a batch job.

70
00:03:25.001 --> 00:03:28.002
For developers using Spring Batch it's just a matter

71
00:03:28.002 --> 00:03:31.001
of configuring the appropriate reader, or writer

72
00:03:31.001 --> 00:03:33.008
for your data store.

73
00:03:33.008 --> 00:03:37.005
I'll show you several examples of this later in the course.

74
00:03:37.005 --> 00:03:41.004
Spring Batch also provides support for transactions,

75
00:03:41.004 --> 00:03:45.006
primarily for the item writers found within the framework.

76
00:03:45.006 --> 00:03:47.007
When an item writer writes a chuck

77
00:03:47.007 --> 00:03:50.008
of data it occurs with in a transaction.

78
00:03:50.008 --> 00:03:53.005
So if the first record in the chunk is written

79
00:03:53.005 --> 00:03:55.007
and the second record fails,

80
00:03:55.007 --> 00:04:00.004
the entire chuck of data is rolled back.

81
00:04:00.004 --> 00:04:03.007
The architecture and features found within Spring Batch

82
00:04:03.007 --> 00:04:06.006
address the most common challenges developers face

83
00:04:06.006 --> 00:04:08.006
when building a batch job.

84
00:04:08.006 --> 00:04:10.003
There really isn't a good case

85
00:04:10.003 --> 00:04:11.003
for attempting to write

86
00:04:11.003 --> 00:04:14.003
your own batch application on the JVM

87
00:04:14.003 --> 00:04:16.005
with a custom architecture.

88
00:04:16.005 --> 00:04:18.005
I'll show you how to construct jobs

89
00:04:18.005 --> 00:04:20.006
using the Spring Batch framework

90
00:04:20.006 --> 00:04:22.008
so you can benefit from the years

91
00:04:22.008 --> 00:04:25.009
of batch architecture it conveniently packages

92
00:04:25.009 --> 00:04:28.000
for Java developers.

