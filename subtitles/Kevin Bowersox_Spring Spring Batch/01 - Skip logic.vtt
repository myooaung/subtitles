WEBVTT
1
00:00:00.005 --> 00:00:03.001
- [Instructor] When something goes wrong in a batch job,

2
00:00:03.001 --> 00:00:05.006
it's not a pleasant experience.

3
00:00:05.006 --> 00:00:08.002
People are called at all hours of the night

4
00:00:08.002 --> 00:00:10.003
in order to remedy the issues

5
00:00:10.003 --> 00:00:12.007
that occurred within the batch.

6
00:00:12.007 --> 00:00:15.005
Using Spring Batch's skip feature,

7
00:00:15.005 --> 00:00:18.000
we can prevent those off-hour calls

8
00:00:18.000 --> 00:00:23.002
for non-essential issues that may occur within a job.

9
00:00:23.002 --> 00:00:26.006
Some batch jobs can tolerate small errors,

10
00:00:26.006 --> 00:00:30.007
and a single data error shouldn't cause the job to fail.

11
00:00:30.007 --> 00:00:33.008
For example, if we were running a batch process

12
00:00:33.008 --> 00:00:37.008
to send customers coupon codes, it might not be too critical

13
00:00:37.008 --> 00:00:40.007
if a customer with a bad email address

14
00:00:40.007 --> 00:00:42.009
doesn't receive the code.

15
00:00:42.009 --> 00:00:45.008
In these scenarios, we can configure a step

16
00:00:45.008 --> 00:00:48.000
to allow for skips.

17
00:00:48.000 --> 00:00:50.006
Skips allow us to continue processing

18
00:00:50.006 --> 00:00:55.002
when a particular item causes an exception to be thrown.

19
00:00:55.002 --> 00:00:57.003
The job will just ignore the exception

20
00:00:57.003 --> 00:00:59.009
and continue processing.

21
00:00:59.009 --> 00:01:04.004
So let's imagine that we permit skips in this job.

22
00:01:04.004 --> 00:01:07.009
You will notice that processing of our second item

23
00:01:07.009 --> 00:01:10.002
is going to fail.

24
00:01:10.002 --> 00:01:15.001
However, our job is going to continue on processing,

25
00:01:15.001 --> 00:01:19.003
and we will able to complete the batch

26
00:01:19.003 --> 00:01:24.003
without having anybody called in the middle of the night.

27
00:01:24.003 --> 00:01:28.003
Skips are a great way to make batch jobs more resilient

28
00:01:28.003 --> 00:01:30.006
in non-critical jobs.

29
00:01:30.006 --> 00:01:32.008
Let's take a look at how they're configured

30
00:01:32.008 --> 00:01:34.000
in the next lesson.

