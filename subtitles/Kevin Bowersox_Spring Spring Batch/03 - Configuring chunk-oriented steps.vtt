WEBVTT
1
00:00:00.006 --> 00:00:01.004
- [Instructor] In this lesson,

2
00:00:01.004 --> 00:00:04.008
we're going to create our first chunk-based step

3
00:00:04.008 --> 00:00:08.000
that contains a very simple item reader

4
00:00:08.000 --> 00:00:10.008
and item writer implementation.

5
00:00:10.008 --> 00:00:12.006
So, to get us started,

6
00:00:12.006 --> 00:00:17.003
I've created a simple job within our configuration.

7
00:00:17.003 --> 00:00:20.006
And that job contains one step,

8
00:00:20.006 --> 00:00:22.004
and it's the chunk-based step.

9
00:00:22.004 --> 00:00:25.007
Now, at the moment, this step isn't defined.

10
00:00:25.007 --> 00:00:27.001
So, we're going to go ahead

11
00:00:27.001 --> 00:00:30.008
and build that out using our step builder factory.

12
00:00:30.008 --> 00:00:36.000
We're going to name our step, chunk-based step.

13
00:00:36.000 --> 00:00:41.000
And then once we have provided a name for our step,

14
00:00:41.000 --> 00:00:43.004
we're going to use a different method.

15
00:00:43.004 --> 00:00:45.005
It's going to be the chunk method.

16
00:00:45.005 --> 00:00:47.006
And the chunk method requires us

17
00:00:47.006 --> 00:00:50.008
to supply two type arguments.

18
00:00:50.008 --> 00:00:55.000
And the type arguments signify the type of input

19
00:00:55.000 --> 00:00:58.004
to the chunk and the type of output.

20
00:00:58.004 --> 00:01:01.006
So, in this case, we're going to be Working with strings,

21
00:01:01.006 --> 00:01:04.005
and then we're able to call the chunk method.

22
00:01:04.005 --> 00:01:08.001
And the method itself accepts an argument

23
00:01:08.001 --> 00:01:10.004
that determines our chunk size.

24
00:01:10.004 --> 00:01:15.001
So, our chunk size is going to be three for this step.

25
00:01:15.001 --> 00:01:17.000
The next thing we specify

26
00:01:17.000 --> 00:01:22.000
within our chunk-based configuration is the item reader.

27
00:01:22.000 --> 00:01:25.002
And we can do that using the reader method.

28
00:01:25.002 --> 00:01:29.001
And we're going to be creating our own item reader

29
00:01:29.001 --> 00:01:32.008
within a method that will declare

30
00:01:32.008 --> 00:01:34.004
that item reader as a bean.

31
00:01:34.004 --> 00:01:37.004
So, I'm just going to stub that for now.

32
00:01:37.004 --> 00:01:39.006
And then the next thing we need to do

33
00:01:39.006 --> 00:01:42.004
is define the item writer

34
00:01:42.004 --> 00:01:44.005
that we're going to be working with.

35
00:01:44.005 --> 00:01:47.005
We're going to define an item writer

36
00:01:47.005 --> 00:01:52.001
in line within the configuration of our step.

37
00:01:52.001 --> 00:01:55.001
So, we'll use the item writer interface

38
00:01:55.001 --> 00:01:59.003
and we'll give it the generic type of string

39
00:01:59.003 --> 00:02:04.004
and then within the configuration for the step,

40
00:02:04.004 --> 00:02:07.003
we can go ahead and define that item writer.

41
00:02:07.003 --> 00:02:09.000
Now, I'm just going to go ahead right now

42
00:02:09.000 --> 00:02:13.003
and build our step even though it's incomplete.

43
00:02:13.003 --> 00:02:16.009
Now, let's get to work on this item writer.

44
00:02:16.009 --> 00:02:18.006
So, the first thing we'll need to do

45
00:02:18.006 --> 00:02:21.007
is import the item writer interface.

46
00:02:21.007 --> 00:02:25.008
And then you can add the unimplemented methods.

47
00:02:25.008 --> 00:02:29.000
And you can hit Control + 1 to get these pop ups.

48
00:02:29.000 --> 00:02:32.002
And it provides you with some helpful tolling

49
00:02:32.002 --> 00:02:36.009
that will put the interface in place for you to implement.

50
00:02:36.009 --> 00:02:39.001
You'll notice the item writer interface

51
00:02:39.001 --> 00:02:41.005
has the right method.

52
00:02:41.005 --> 00:02:47.003
And that right method receives a list of items.

53
00:02:47.003 --> 00:02:50.001
So, it's not working with an individual item,

54
00:02:50.001 --> 00:02:53.001
it's working with a chunk.

55
00:02:53.001 --> 00:02:56.007
And to see that we can write some console output.

56
00:02:56.007 --> 00:02:58.008
So, I'll just format a string

57
00:02:58.008 --> 00:03:05.004
and we'll say that we received lists of size,

58
00:03:05.004 --> 00:03:09.000
and then we'll print out the size of our list.

59
00:03:09.000 --> 00:03:13.002
That way, we can see that we're getting in chunks.

60
00:03:13.002 --> 00:03:15.006
And then we'll take the item size,

61
00:03:15.006 --> 00:03:18.006
pass that as an argument to the format method.

62
00:03:18.006 --> 00:03:20.005
And then the next thing we're going to do

63
00:03:20.005 --> 00:03:23.009
is take that list, and for each item in the list,

64
00:03:23.009 --> 00:03:29.002
we can go ahead and write that to our console.

65
00:03:29.002 --> 00:03:33.003
So, I'll just use the system dot out dot println method,

66
00:03:33.003 --> 00:03:36.007
and that will output our list to the console.

67
00:03:36.007 --> 00:03:41.003
So, we have our very, very basic item writer implementation.

68
00:03:41.003 --> 00:03:44.007
Now, it's time to continue work on the item reader.

69
00:03:44.007 --> 00:03:48.001
So, I'm going to go ahead and hit Control + 1 one once again,

70
00:03:48.001 --> 00:03:52.000
that's going to allow me to create the item reader method.

71
00:03:52.000 --> 00:03:55.001
Now, I'm going to move that just above our step.

72
00:03:55.001 --> 00:03:58.005
I kind of like to keep them ordered in that way.

73
00:03:58.005 --> 00:04:02.005
And then we'll switch this over over to a public method.

74
00:04:02.005 --> 00:04:06.009
And the item reader is going to be declared as a bean.

75
00:04:06.009 --> 00:04:09.002
So, I can add that annotation.

76
00:04:09.002 --> 00:04:13.004
And then our item reader is going to handle strings.

77
00:04:13.004 --> 00:04:15.003
So, I'm going to go ahead and just modify

78
00:04:15.003 --> 00:04:17.008
that generic argument there.

79
00:04:17.008 --> 00:04:22.000
And then within the body of this method,

80
00:04:22.000 --> 00:04:25.001
we're going to instantiate the bean.

81
00:04:25.001 --> 00:04:26.002
And in this case,

82
00:04:26.002 --> 00:04:30.001
we're going to actually create an item reader.

83
00:04:30.001 --> 00:04:35.001
So here, I just create a stub for a constructor

84
00:04:35.001 --> 00:04:38.002
of a class named, simple item reader.

85
00:04:38.002 --> 00:04:41.002
And then I can hit Control + 1 once again,

86
00:04:41.002 --> 00:04:44.002
and I get the option to create the class.

87
00:04:44.002 --> 00:04:47.007
So, I'll select that and hit Finish.

88
00:04:47.007 --> 00:04:51.003
It's kind of a quick way to be able to write some code.

89
00:04:51.003 --> 00:04:53.002
So, here is our item reader.

90
00:04:53.002 --> 00:04:57.006
You'll notice that we implement the item reader interface

91
00:04:57.006 --> 00:04:59.008
and within this item reader,

92
00:04:59.008 --> 00:05:03.001
we're going to create some data that we can work with.

93
00:05:03.001 --> 00:05:08.001
I'm going to create a list of strings.

94
00:05:08.001 --> 00:05:12.008
And we'll just declare that as a new ArrayList.

95
00:05:12.008 --> 00:05:15.005
And we'll import java util dot list.

96
00:05:15.005 --> 00:05:16.009
The next thing that we'll do

97
00:05:16.009 --> 00:05:21.004
is declare a field of type iterator.

98
00:05:21.004 --> 00:05:25.009
And I'm going to name that field iterator as well.

99
00:05:25.009 --> 00:05:29.005
And we can go ahead and import that type.

100
00:05:29.005 --> 00:05:32.006
And then I'm going to add a constructor

101
00:05:32.006 --> 00:05:36.004
for our simple item reader.

102
00:05:36.004 --> 00:05:38.002
And within this constructor,

103
00:05:38.002 --> 00:05:40.004
we're going to do a couple things.

104
00:05:40.004 --> 00:05:45.009
First, we're going to add some items to our data set.

105
00:05:45.009 --> 00:05:49.006
So, I'm going to go ahead and add about five items

106
00:05:49.006 --> 00:05:51.003
to that data set.

107
00:05:51.003 --> 00:05:55.009
And we'll just kind of sequentially go through

108
00:05:55.009 --> 00:05:59.000
and add these numbers in.

109
00:05:59.000 --> 00:06:01.006
And then the next thing we're going to do

110
00:06:01.006 --> 00:06:08.000
is assign our iterator.

111
00:06:08.000 --> 00:06:10.009
So, we have some phony data setup

112
00:06:10.009 --> 00:06:13.000
that we can work with now.

113
00:06:13.000 --> 00:06:18.004
Let's focus on the read method of our item reader.

114
00:06:18.004 --> 00:06:24.000
So, this method is going to be called over and over again,

115
00:06:24.000 --> 00:06:28.001
basically until it returns null signaling to the framework

116
00:06:28.001 --> 00:06:31.009
that it has exhausted the items from the data source.

117
00:06:31.009 --> 00:06:33.002
So, in this case,

118
00:06:33.002 --> 00:06:40.005
we're going to just grab each item out of our iterator.

119
00:06:40.005 --> 00:06:44.001
So, we can check to see if the iterator

120
00:06:44.001 --> 00:06:46.009
has an item within it.

121
00:06:46.009 --> 00:06:51.001
If it does, we can go ahead and return that item.

122
00:06:51.001 --> 00:06:53.009
Otherwise, we're going to return null

123
00:06:53.009 --> 00:06:57.000
and signal to the framework that there are no items.

124
00:06:57.000 --> 00:07:00.002
So, it's important to understand that read method,

125
00:07:00.002 --> 00:07:04.006
it's going to be invoked once per each item,

126
00:07:04.006 --> 00:07:07.002
found in the chunks that are read from a data set

127
00:07:07.002 --> 00:07:09.005
when the job is processing.

128
00:07:09.005 --> 00:07:12.005
And after the item reader has read these chunks,

129
00:07:12.005 --> 00:07:16.007
they would get passed to a processor or a writer,

130
00:07:16.007 --> 00:07:19.000
depending upon what's available.

131
00:07:19.000 --> 00:07:21.003
It will definitely have to go to a writer.

132
00:07:21.003 --> 00:07:24.004
The processor is optional.

133
00:07:24.004 --> 00:07:30.005
So, let's navigate back over to our class and save it.

134
00:07:30.005 --> 00:07:37.002
And at this point, we are set up to execute our job.

135
00:07:37.002 --> 00:07:39.004
So, to execute our job,

136
00:07:39.004 --> 00:07:43.001
if you take a look within the directory for this project,

137
00:07:43.001 --> 00:07:45.006
you'll notice that I've added another script,

138
00:07:45.006 --> 00:07:49.003
the run underscore job dot sh script,

139
00:07:49.003 --> 00:07:53.002
and you can use this to quickly kick off the job

140
00:07:53.002 --> 00:07:54.005
that we've built.

141
00:07:54.005 --> 00:07:58.002
So, here it's going to package the job with Maven

142
00:07:58.002 --> 00:08:00.002
in order to build our jar.

143
00:08:00.002 --> 00:08:05.000
Then once built, it will execute our job.

144
00:08:05.000 --> 00:08:08.002
So, let's take a look at what happened here.

145
00:08:08.002 --> 00:08:10.006
You can see that we launched the job.

146
00:08:10.006 --> 00:08:14.007
And then we started reading the different items

147
00:08:14.007 --> 00:08:17.001
from the data store,

148
00:08:17.001 --> 00:08:19.000
which is our list in this case,

149
00:08:19.000 --> 00:08:21.007
and we read them in chunks of three.

150
00:08:21.007 --> 00:08:24.003
Now, you'll notice we read the first chunk of three.

151
00:08:24.003 --> 00:08:27.000
And then because we only had five items,

152
00:08:27.000 --> 00:08:30.001
the last chunk only had two.

153
00:08:30.001 --> 00:08:33.002
So, that was our first chunk-based example.

154
00:08:33.002 --> 00:08:36.007
And we were able to see the role the item reader plays

155
00:08:36.007 --> 00:08:39.001
within a chunk-based step.

156
00:08:39.001 --> 00:08:40.000
As I mentioned,

157
00:08:40.000 --> 00:08:42.006
the framework contains several implementations

158
00:08:42.006 --> 00:08:44.001
of the item reader

159
00:08:44.001 --> 00:08:46.000
that we can leverage out of the box.

160
00:08:46.000 --> 00:08:47.007
And that's what we're going to explore

161
00:08:47.007 --> 00:08:49.000
in the upcoming lessons.

