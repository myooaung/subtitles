WEBVTT
1
00:00:00.006 --> 00:00:02.004
- [Instructor] When operating batch jobs

2
00:00:02.004 --> 00:00:05.009
how a job is launched is very important.

3
00:00:05.009 --> 00:00:09.004
Jobs often have dependencies on other jobs

4
00:00:09.004 --> 00:00:12.006
and must be executed in an appropriate sequence

5
00:00:12.006 --> 00:00:15.009
for business operations to be successful.

6
00:00:15.009 --> 00:00:19.005
Spring boot and Spring batch offer a few strategies

7
00:00:19.005 --> 00:00:21.005
for launching a batch job.

8
00:00:21.005 --> 00:00:25.000
However, many enterprises prefer to launch jobs

9
00:00:25.000 --> 00:00:26.008
with a scheduler.

10
00:00:26.008 --> 00:00:29.006
Let's take a look at a few options for launching

11
00:00:29.006 --> 00:00:33.006
batch jobs and scheduling their execution.

12
00:00:33.006 --> 00:00:35.007
There are three primary strategies

13
00:00:35.007 --> 00:00:39.001
for launching the execution of Spring batch jobs,

14
00:00:39.001 --> 00:00:43.003
which include Spring Boot, schedulers, and rest.

15
00:00:43.003 --> 00:00:45.004
We've already seen Spring Boot in action

16
00:00:45.004 --> 00:00:46.005
throughout the course.

17
00:00:46.005 --> 00:00:50.004
Spring Boot includes the job launcher command line runner

18
00:00:50.004 --> 00:00:54.001
that allows us to execute jobs via an executable jar

19
00:00:54.001 --> 00:00:55.009
from the command line.

20
00:00:55.009 --> 00:00:58.003
Through the application dot properties file

21
00:00:58.003 --> 00:01:02.000
and the parameters used to launch the jar, we can control

22
00:01:02.000 --> 00:01:06.004
what jobs are launched and the job parameters they use.

23
00:01:06.004 --> 00:01:08.008
This strategy can be used with a cron

24
00:01:08.008 --> 00:01:11.008
on the operating system to schedule executions

25
00:01:11.008 --> 00:01:14.003
of job instances.

26
00:01:14.003 --> 00:01:18.001
We can also use an enterprise scheduler such as Quartz

27
00:01:18.001 --> 00:01:20.005
to launch a Spring batch job.

28
00:01:20.005 --> 00:01:23.003
By design, the Spring framework does not

29
00:01:23.003 --> 00:01:25.000
include a scheduler.

30
00:01:25.000 --> 00:01:28.006
However, many enterprise schedulers can be used

31
00:01:28.006 --> 00:01:30.001
with the framework.

32
00:01:30.001 --> 00:01:33.001
This allows you to choose your scheduler provider

33
00:01:33.001 --> 00:01:37.004
or use the scheduler preferred by your company.

34
00:01:37.004 --> 00:01:40.003
The final approach for launching a job is to set up

35
00:01:40.003 --> 00:01:43.009
a regular Spring MVC controller and launch the job

36
00:01:43.009 --> 00:01:47.003
in response to an HTTP request.

37
00:01:47.003 --> 00:01:51.000
This strategy is effective when jobs must be kicked off

38
00:01:51.000 --> 00:01:55.000
on demand or on an ad hoc basis.

39
00:01:55.000 --> 00:01:57.003
In the upcoming lessons, we'll take a look

40
00:01:57.003 --> 00:02:00.004
at a few approaches for scheduling the execution

41
00:02:00.004 --> 00:02:03.006
of Spring batch jobs using Quartz

42
00:02:03.006 --> 00:02:07.000
and the scheduling capabilities embedded within Spring.

