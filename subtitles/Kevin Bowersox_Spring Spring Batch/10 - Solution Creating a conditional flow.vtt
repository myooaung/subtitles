WEBVTT
1
00:00:00.005 --> 00:00:05.006
(high energy music)

2
00:00:05.006 --> 00:00:09.007
- Let's take a look at one way to complete the challenge.

3
00:00:09.007 --> 00:00:11.006
In order to solve the challenge,

4
00:00:11.006 --> 00:00:14.002
you needed to create two steps.

5
00:00:14.002 --> 00:00:16.000
One to thank the customer

6
00:00:16.000 --> 00:00:18.003
and one to give them a refund.

7
00:00:18.003 --> 00:00:23.008
So I'm going to go ahead and copy our LeaveAtDoorStep

8
00:00:23.008 --> 00:00:30.000
and I'll place that step within our class twice.

9
00:00:30.000 --> 00:00:32.004
And then I'm going to go ahead

10
00:00:32.004 --> 00:00:38.009
and modify it so that we have a refund step.

11
00:00:38.009 --> 00:00:43.007
And we'll just need to change the name of our method

12
00:00:43.007 --> 00:00:51.008
and then we'll change the console output

13
00:00:51.008 --> 00:00:57.003
and then we'll also create our Thank the Customer step.

14
00:00:57.003 --> 00:01:00.005
So the refund step will be executed

15
00:01:00.005 --> 00:01:04.004
when we have given the customer the incorrect item

16
00:01:04.004 --> 00:01:09.000
and the thank the customer step will be executed

17
00:01:09.000 --> 00:01:16.001
when we've given them the correct item.

18
00:01:16.001 --> 00:01:23.006
And then we'll change the console output here.

19
00:01:23.006 --> 00:01:26.005
Okay, so we have our two steps.

20
00:01:26.005 --> 00:01:31.009
Now we need to create a new job execution decider,

21
00:01:31.009 --> 00:01:35.008
so I'm going to create a new class

22
00:01:35.008 --> 00:01:40.006
and I'm going to name that class ReceiptDecider.

23
00:01:40.006 --> 00:01:43.006
And that class needs to implement

24
00:01:43.006 --> 00:01:47.005
the JobExecutionDecider interface.

25
00:01:47.005 --> 00:01:50.005
So we can go ahead and select that interface

26
00:01:50.005 --> 00:01:52.002
and then hit finish.

27
00:01:52.002 --> 00:01:56.003
And our new decider is going to be built.

28
00:01:56.003 --> 00:01:59.007
Now this decider is going to determine

29
00:01:59.007 --> 00:02:04.007
whether or not we have delivered the correct package

30
00:02:04.007 --> 00:02:05.008
to the customer.

31
00:02:05.008 --> 00:02:10.000
And we said we have a 70% chance of doing that.

32
00:02:10.000 --> 00:02:14.007
So let's add the logic to make that determination.

33
00:02:14.007 --> 00:02:17.006
So I'm going to add a new string

34
00:02:17.006 --> 00:02:19.008
and we'll name it exitCode

35
00:02:19.008 --> 00:02:24.002
and then in order to add that 70% chance,

36
00:02:24.002 --> 00:02:26.007
I'm going to use a new random

37
00:02:26.007 --> 00:02:30.004
and using that random I'm going to get a float

38
00:02:30.004 --> 00:02:36.003
and then I'll check to see if that float is less than .7.

39
00:02:36.003 --> 00:02:41.003
If it is, that means we have delivered the correct item.

40
00:02:41.003 --> 00:02:44.005
And if it is not, that means we have delivered

41
00:02:44.005 --> 00:02:46.005
the incorrect item.

42
00:02:46.005 --> 00:02:48.003
I'll add a little bit of console output

43
00:02:48.003 --> 00:02:51.008
so we can see what was decided.

44
00:02:51.008 --> 00:02:56.007
We'll just say, "The item delivered is:"

45
00:02:56.007 --> 00:03:02.001
and then we'll add our exitCode

46
00:03:02.001 --> 00:03:07.007
and then we need to return our custom exit status.

47
00:03:07.007 --> 00:03:13.002
So to do that, we create a new flow execution status

48
00:03:13.002 --> 00:03:15.003
and using its constructor,

49
00:03:15.003 --> 00:03:20.002
we simply pass in our string containing the exitCode.

50
00:03:20.002 --> 00:03:24.005
In this case, it's going to be either correct or incorrect.

51
00:03:24.005 --> 00:03:30.002
Now, if we navigate back over to our application,

52
00:03:30.002 --> 00:03:33.003
I'm going to navigate to the top of the class,

53
00:03:33.003 --> 00:03:39.007
and here we're going to define our new decider,

54
00:03:39.007 --> 00:03:46.008
or our job execution decider as a bean

55
00:03:46.008 --> 00:03:53.007
and all we need to do here is return a new ReceiptDecider.

56
00:03:53.007 --> 00:03:56.002
Okay, so we have our two steps

57
00:03:56.002 --> 00:03:58.009
and our new JobExecutionDecider,

58
00:03:58.009 --> 00:04:01.008
we just need to navigate to the bottom

59
00:04:01.008 --> 00:04:06.002
of our class to modify our job configuration

60
00:04:06.002 --> 00:04:09.009
in order to include the conditional logic.

61
00:04:09.009 --> 00:04:13.005
So the only time that we are going to execute

62
00:04:13.005 --> 00:04:17.001
this decider in this new conditional flow

63
00:04:17.001 --> 00:04:20.009
is when the customer is present

64
00:04:20.009 --> 00:04:23.008
and we give the package to the customer.

65
00:04:23.008 --> 00:04:28.002
So here we can specify the next transition

66
00:04:28.002 --> 00:04:32.009
and we're going to specify that we navigate

67
00:04:32.009 --> 00:04:35.002
to our ReceiptDecider

68
00:04:35.002 --> 00:04:38.004
and then based upon the custom exit status

69
00:04:38.004 --> 00:04:44.007
returned by that ReceiptDecider, if it is correct

70
00:04:44.007 --> 00:04:47.009
then we're going to thank our customer.

71
00:04:47.009 --> 00:04:53.007
Okay, now we need to specify the ElseIf or the From

72
00:04:53.007 --> 00:04:55.009
and we're going to be navigating

73
00:04:55.009 --> 00:05:01.002
from the ReceiptDecider and if the exit status

74
00:05:01.002 --> 00:05:07.003
returned by the ReceiptDecider is incorrect,

75
00:05:07.003 --> 00:05:12.004
then we're going to navigate to the RefundStep,

76
00:05:12.004 --> 00:05:15.002
so we want to include that step.

77
00:05:15.002 --> 00:05:18.003
And now we have the job configuration in place.

78
00:05:18.003 --> 00:05:20.005
There's one last thing we need to do.

79
00:05:20.005 --> 00:05:23.002
You'll notice we're only going to perform

80
00:05:23.002 --> 00:05:26.003
this conditional logic when the customer is present

81
00:05:26.003 --> 00:05:30.001
and so that we don't have to execute a bunch of tests,

82
00:05:30.001 --> 00:05:33.002
I'm going to go to the DeliveryDecider

83
00:05:33.002 --> 00:05:36.007
and here I'm just going to make it

84
00:05:36.007 --> 00:05:41.004
that the customer is always present.

85
00:05:41.004 --> 00:05:45.000
So right now I'm executing this afternoon

86
00:05:45.000 --> 00:05:47.006
and that's going to cause the customer

87
00:05:47.006 --> 00:05:50.009
to be present by flipping that conditional.

88
00:05:50.009 --> 00:05:53.006
Okay, so everything is in place.

89
00:05:53.006 --> 00:05:56.006
And we can navigate to the terminal

90
00:05:56.006 --> 00:06:00.000
and within the terminal, I'm just going to run

91
00:06:00.000 --> 00:06:03.004
our delivery job and we'll see

92
00:06:03.004 --> 00:06:08.004
if the customer receives the correct item.

93
00:06:08.004 --> 00:06:13.004
Okay, so you can see that the customer was present

94
00:06:13.004 --> 00:06:17.000
and we gave the package to the customer.

95
00:06:17.000 --> 00:06:20.003
Here we can see that it was the correct item,

96
00:06:20.003 --> 00:06:22.009
so we thanked the customer.

97
00:06:22.009 --> 00:06:26.001
That completes our solution for the challenge.

98
00:06:26.001 --> 00:06:28.000
I hope it tied a lot of the concepts

99
00:06:28.000 --> 00:06:30.001
in this chapter together for you

100
00:06:30.001 --> 00:06:32.002
and allowed you to get a better handle

101
00:06:32.002 --> 00:06:35.000
on job flow and execution.

