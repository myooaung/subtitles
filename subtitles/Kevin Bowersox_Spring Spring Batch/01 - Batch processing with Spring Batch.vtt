WEBVTT
1
00:00:00.005 --> 00:00:01.005
- [Kevin] Have you ever wondered

2
00:00:01.005 --> 00:00:04.005
how your biweekly paycheck is deposited?

3
00:00:04.005 --> 00:00:08.008
Or why you receive that email at the same time every week?

4
00:00:08.008 --> 00:00:10.002
It may seem like magic,

5
00:00:10.002 --> 00:00:14.006
however it is likely one of technology's unsung heroes,

6
00:00:14.006 --> 00:00:16.004
the batch job.

7
00:00:16.004 --> 00:00:19.003
Batch jobs play a critical role in our lives

8
00:00:19.003 --> 00:00:21.009
that is not widely recognized.

9
00:00:21.009 --> 00:00:27.001
Everyday batch processing executes billions of transactions

10
00:00:27.001 --> 00:00:29.007
that power important business operations

11
00:00:29.007 --> 00:00:32.002
across many industries.

12
00:00:32.002 --> 00:00:33.008
If you are a developer,

13
00:00:33.008 --> 00:00:36.007
you are no stranger to building batch jobs.

14
00:00:36.007 --> 00:00:40.005
Decade ago, when these jobs were written in COBOL,

15
00:00:40.005 --> 00:00:45.003
many best practices, patterns, and architectures emerged.

16
00:00:45.003 --> 00:00:48.006
Today, Spring Batch packages these concepts

17
00:00:48.006 --> 00:00:51.008
into a modern framework for Java developers.

18
00:00:51.008 --> 00:00:54.007
So you can benefit from strategies engineered

19
00:00:54.007 --> 00:00:57.003
in the COBOL days while building jobs

20
00:00:57.003 --> 00:01:00.005
on top of Spring's powerful framework.

21
00:01:00.005 --> 00:01:02.008
Hi, I'm Kevin Bowersox

22
00:01:02.008 --> 00:01:06.000
and I can teach you how to quickly build high quality

23
00:01:06.000 --> 00:01:11.006
batch jobs with Spring Batch that run anywhere on Java.

24
00:01:11.006 --> 00:01:14.002
This course explains how Spring Batch

25
00:01:14.002 --> 00:01:18.000
is used to simplify the development of batch jobs

26
00:01:18.000 --> 00:01:22.005
with complex logic and challenging data integrations.

27
00:01:22.005 --> 00:01:25.004
We'll go in depth into framework components

28
00:01:25.004 --> 00:01:29.005
that allow for granular control over batch execution

29
00:01:29.005 --> 00:01:31.007
and make processing more resilient

30
00:01:31.007 --> 00:01:35.000
to avoid those dreaded late night phone calls

31
00:01:35.000 --> 00:01:37.004
received when a job fails.

32
00:01:37.004 --> 00:01:40.003
So join me on my LinkedIn Learning course to build

33
00:01:40.003 --> 00:01:45.000
complex, yet fault tolerant batch jobs with Spring Batch.

