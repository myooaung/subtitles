WEBVTT
1
00:00:01.002 --> 00:00:03.003
- [Instructor] Retries can be configured to automatically

2
00:00:03.003 --> 00:00:08.000
retry a step in an attempt to recover from an exception.

3
00:00:08.000 --> 00:00:11.005
This capability increases the resilience of our job

4
00:00:11.005 --> 00:00:13.002
and can help in situations

5
00:00:13.002 --> 00:00:15.007
where the job could potentially recover

6
00:00:15.007 --> 00:00:18.005
from the exception it experienced.

7
00:00:18.005 --> 00:00:20.008
This capability is very beneficial

8
00:00:20.008 --> 00:00:24.009
in situations where some external resource like a service

9
00:00:24.009 --> 00:00:28.002
may be experiencing sporadic issues.

10
00:00:28.002 --> 00:00:30.009
Let's take a look at how we can configure a step

11
00:00:30.009 --> 00:00:33.007
to incorporate retry logic.

12
00:00:33.007 --> 00:00:35.009
Configuring a step for retries

13
00:00:35.009 --> 00:00:39.005
is very similar to configuring it for skips.

14
00:00:39.005 --> 00:00:43.004
So if we navigate to our chunk-based step,

15
00:00:43.004 --> 00:00:48.002
you'll see our configurations in place four skips already.

16
00:00:48.002 --> 00:00:52.000
Now we're going to be using the FaultTolerantStepBuilder,

17
00:00:52.000 --> 00:00:56.001
so we'll leave our call to faultTolerant in place.

18
00:00:56.001 --> 00:00:59.007
We are going to replace our skip method

19
00:00:59.007 --> 00:01:00.007
and in this case,

20
00:01:00.007 --> 00:01:04.003
we're going to replace it with the retry method.

21
00:01:04.003 --> 00:01:08.008
The retry method requires us to specify an exception,

22
00:01:08.008 --> 00:01:12.002
that would cause the framework

23
00:01:12.002 --> 00:01:16.006
to reattempt processing of a particular item.

24
00:01:16.006 --> 00:01:21.000
So in this case, if we throw an order processing exception,

25
00:01:21.000 --> 00:01:22.008
which is the exception

26
00:01:22.008 --> 00:01:27.000
thrown from our tracked Order Item processor,

27
00:01:27.000 --> 00:01:31.008
then we will reattempt processing of that particular item.

28
00:01:31.008 --> 00:01:34.004
Now, just like the configuration for a skip,

29
00:01:34.004 --> 00:01:37.004
we're able to set a retry limit.

30
00:01:37.004 --> 00:01:40.004
Now this retry limit is a little bit different.

31
00:01:40.004 --> 00:01:44.000
Instead of applying for the entire step,

32
00:01:44.000 --> 00:01:47.003
it applies for the particular item.

33
00:01:47.003 --> 00:01:48.005
So in this case,

34
00:01:48.005 --> 00:01:52.003
we're going to get three shots at processing an item.

35
00:01:52.003 --> 00:01:54.002
Once we hit that third try,

36
00:01:54.002 --> 00:01:58.000
if we fail, the entire job is going to fail.

37
00:01:58.000 --> 00:02:00.007
Okay, and then we're also able

38
00:02:00.007 --> 00:02:04.001
to configure a retry listener.

39
00:02:04.001 --> 00:02:06.006
So let's go ahead and build that.

40
00:02:06.006 --> 00:02:11.006
I'm going to create a new class, the custom retry listener.

41
00:02:11.006 --> 00:02:15.009
So here we see a stub for its constructor.

42
00:02:15.009 --> 00:02:18.005
And what we'll do is hit control one,

43
00:02:18.005 --> 00:02:20.004
and then create that class.

44
00:02:20.004 --> 00:02:22.009
And then we're going to add

45
00:02:22.009 --> 00:02:26.005
an interface that this class will implement.

46
00:02:26.005 --> 00:02:31.004
It's going to be the retry listener interface.

47
00:02:31.004 --> 00:02:39.000
And so we'll select the org.springframework retry listener.

48
00:02:39.000 --> 00:02:43.003
And then we'll go ahead and hit OK.

49
00:02:43.003 --> 00:02:44.009
So once we hit finish,

50
00:02:44.009 --> 00:02:47.003
our new class is going to be built

51
00:02:47.003 --> 00:02:48.009
and here you're going to see

52
00:02:48.009 --> 00:02:52.005
the contract for that retry listener interface.

53
00:02:52.005 --> 00:02:54.007
And what's going to happen

54
00:02:54.007 --> 00:02:57.002
within these three particular methods,

55
00:02:57.002 --> 00:02:59.008
the first time that we do a retry,

56
00:02:59.008 --> 00:03:04.006
it's going to invoke the open method the last time.

57
00:03:04.006 --> 00:03:07.001
So basically, after we fail that third attempt,

58
00:03:07.001 --> 00:03:08.009
it's going to invoke close.

59
00:03:08.009 --> 00:03:13.005
And then anytime we would fail on an actual retry,

60
00:03:13.005 --> 00:03:16.000
we would invoke on air.

61
00:03:16.000 --> 00:03:21.004
So let's just add a little bit of configuration here.

62
00:03:21.004 --> 00:03:24.001
So the first thing we're going to do,

63
00:03:24.001 --> 00:03:25.006
we're just going to check

64
00:03:25.006 --> 00:03:28.008
to make sure that we are doing a retry.

65
00:03:28.008 --> 00:03:33.000
So we'll get the retry count and make sure it's above zero.

66
00:03:33.000 --> 00:03:34.006
And in that case,

67
00:03:34.006 --> 00:03:37.006
I'm just going to print out to the console

68
00:03:37.006 --> 00:03:40.009
that we are attempting a retry.

69
00:03:40.009 --> 00:03:43.003
And then we need to return true here

70
00:03:43.003 --> 00:03:47.002
in order to continue processing.

71
00:03:47.002 --> 00:03:49.001
And then we're just going to add

72
00:03:49.001 --> 00:03:54.003
a little bit of console output within the on error message.

73
00:03:54.003 --> 00:03:57.003
So here, we'll do something similar.

74
00:03:57.003 --> 00:04:03.000
We're going to within the context, get the retry count.

75
00:04:03.000 --> 00:04:06.006
And if that retry count is greater than zero,

76
00:04:06.006 --> 00:04:09.002
then we're going to go ahead

77
00:04:09.002 --> 00:04:11.004
and print out some console output.

78
00:04:11.004 --> 00:04:17.007
We'll just say failure occurred requiring a retry.

79
00:04:17.007 --> 00:04:20.001
So let's go ahead, we'll fix that spelling error.

80
00:04:20.001 --> 00:04:22.004
Just to make sure everything's good.

81
00:04:22.004 --> 00:04:27.006
Alright, so there we have our custom retry listener.

82
00:04:27.006 --> 00:04:28.009
And we can go over

83
00:04:28.009 --> 00:04:32.007
and save our job configuration, everything's in place.

84
00:04:32.007 --> 00:04:35.006
And then we're going to turn up

85
00:04:35.006 --> 00:04:38.000
our volatility here a little bit.

86
00:04:38.000 --> 00:04:41.000
So we're going to, let's say,

87
00:04:41.000 --> 00:04:43.008
give it a 50% shot of failure.

88
00:04:43.008 --> 00:04:45.005
So in this first run,

89
00:04:45.005 --> 00:04:47.009
I'm really attempting to fail

90
00:04:47.009 --> 00:04:50.008
because we hit that fourth retry.

91
00:04:50.008 --> 00:04:53.002
So let's see what happens.

92
00:04:53.002 --> 00:04:58.009
We'll go ahead and start the job.

93
00:04:58.009 --> 00:05:01.007
Alright, so the job's kicking off.

94
00:05:01.007 --> 00:05:07.003
And you'll notice if we take a look,

95
00:05:07.003 --> 00:05:09.009
we did get a four three try.

96
00:05:09.009 --> 00:05:14.004
So there we see that item 53

97
00:05:14.004 --> 00:05:18.001
failed on its retry, its final retry,

98
00:05:18.001 --> 00:05:19.008
and that failed our job.

99
00:05:19.008 --> 00:05:22.002
So by turning that volatility up,

100
00:05:22.002 --> 00:05:24.005
we were able to fail pretty quickly.

101
00:05:24.005 --> 00:05:25.009
Now, let's go ahead,

102
00:05:25.009 --> 00:05:27.005
let's turn it down some.

103
00:05:27.005 --> 00:05:30.007
I'm just going to put it at 5%.

104
00:05:30.007 --> 00:05:33.007
Probably unlikely that we're going to fail here.

105
00:05:33.007 --> 00:05:37.001
So let me go ahead, I'll clear the console.

106
00:05:37.001 --> 00:05:39.009
And then we'll go ahead and run our job.

107
00:05:39.009 --> 00:05:45.001
And let's see what happens this time.

108
00:05:45.001 --> 00:05:47.000
Okay, so you can see

109
00:05:47.000 --> 00:05:50.007
that we did successfully complete the job,

110
00:05:50.007 --> 00:05:52.008
and we only had one retry,

111
00:05:52.008 --> 00:05:58.001
it looks like the order for order ID 421,

112
00:05:58.001 --> 00:06:00.003
failed to process the first time,

113
00:06:00.003 --> 00:06:04.000
and then it successfully processed the second time,

114
00:06:04.000 --> 00:06:07.004
once our retry logic kicked in.

115
00:06:07.004 --> 00:06:10.008
So here we saw another one of the mechanisms

116
00:06:10.008 --> 00:06:12.007
within spring batch,

117
00:06:12.007 --> 00:06:16.005
that allow us to add resiliency to our batch jobs.

118
00:06:16.005 --> 00:06:19.006
And if you're a batch job operator, that's very important

119
00:06:19.006 --> 00:06:22.000
so you don't get those phone calls at night.

