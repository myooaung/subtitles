WEBVTT
1
00:00:00.008 --> 00:00:03.004
- [Speaker] Spring Batch allows item processors

2
00:00:03.004 --> 00:00:06.002
to be chained so that multiple processors

3
00:00:06.002 --> 00:00:09.000
can be included within a step.

4
00:00:09.000 --> 00:00:12.007
This is important when multiple pieces of processing logic

5
00:00:12.007 --> 00:00:16.004
must execute within a chunk based step.

6
00:00:16.004 --> 00:00:19.000
Let's take a look at how we can include, both,

7
00:00:19.000 --> 00:00:22.001
our bean validating item processor

8
00:00:22.001 --> 00:00:25.002
and our tracked order item processor,

9
00:00:25.002 --> 00:00:29.000
within the configuration of our step.

10
00:00:29.000 --> 00:00:33.009
We're going to start by navigating to our chunk based step,

11
00:00:33.009 --> 00:00:37.001
and we're going to modify its configuration.

12
00:00:37.001 --> 00:00:40.007
Currently, it's using a single item processor,

13
00:00:40.007 --> 00:00:43.007
the tracked order item processor.

14
00:00:43.007 --> 00:00:46.005
We're going to go ahead and remove that,

15
00:00:46.005 --> 00:00:49.000
and we're going to replace it with a

16
00:00:49.000 --> 00:00:53.008
composite item processor method call.

17
00:00:53.008 --> 00:00:57.001
And this call is going to return

18
00:00:57.001 --> 00:01:01.001
a new composite item processor bean.

19
00:01:01.001 --> 00:01:03.007
So let's go ahead, we'll hit control + 1.

20
00:01:03.007 --> 00:01:05.005
We'll create that method

21
00:01:05.005 --> 00:01:08.005
and then we're going to copy it

22
00:01:08.005 --> 00:01:12.001
and move it to the top of our class.

23
00:01:12.001 --> 00:01:14.009
And from there we'll get to work on building out our

24
00:01:14.009 --> 00:01:18.004
new item processor implementation.

25
00:01:18.004 --> 00:01:23.005
We're going to annotate this method with a bean annotation.

26
00:01:23.005 --> 00:01:27.006
And then, we're going to change the method over to

27
00:01:27.006 --> 00:01:30.001
a public method.

28
00:01:30.001 --> 00:01:34.006
Now, looking at this method signature,

29
00:01:34.006 --> 00:01:40.008
we're going to need to adjust the generic type arguments.

30
00:01:40.008 --> 00:01:46.007
So I'll go ahead and remove the different extends' clauses.

31
00:01:46.007 --> 00:01:49.002
And then, inside the body of the method here,

32
00:01:49.002 --> 00:01:54.003
we're going to build out our new composite item processor.

33
00:01:54.003 --> 00:01:56.007
To do that, we're going to use

34
00:01:56.007 --> 00:02:01.009
a composite item processor builder.

35
00:02:01.009 --> 00:02:04.007
So there we can find the builder.

36
00:02:04.007 --> 00:02:08.005
You'll notice that the builder itself accepts

37
00:02:08.005 --> 00:02:12.007
generic type arguments, so we're going to pass in the order

38
00:02:12.007 --> 00:02:16.000
as the input to our composite processor.

39
00:02:16.000 --> 00:02:20.002
And then we're going to specify that the tracked order

40
00:02:20.002 --> 00:02:24.007
is the output from this composite processor.

41
00:02:24.007 --> 00:02:27.003
The next thing that we'll need to do is within

42
00:02:27.003 --> 00:02:30.002
the configuration of this processor,

43
00:02:30.002 --> 00:02:34.005
specify the other item processors

44
00:02:34.005 --> 00:02:37.009
that should be executed together

45
00:02:37.009 --> 00:02:41.001
as part of this composite item processor.

46
00:02:41.001 --> 00:02:46.002
So here we're able to specify multiple item processors

47
00:02:46.002 --> 00:02:50.004
that will execute inside of this single processor.

48
00:02:50.004 --> 00:02:53.001
In our case, the first thing we'd like to do is

49
00:02:53.001 --> 00:02:59.000
use our order validating item processor to remove all orders

50
00:02:59.000 --> 00:03:02.002
that are not for government emails.

51
00:03:02.002 --> 00:03:05.005
And then, the second thing we're going to do

52
00:03:05.005 --> 00:03:09.006
is include our tracked order item processor

53
00:03:09.006 --> 00:03:14.001
to convert those orders over to tracked orders

54
00:03:14.001 --> 00:03:16.007
that have shipping information.

55
00:03:16.007 --> 00:03:19.009
With this in place, we can go ahead, we'll invoke

56
00:03:19.009 --> 00:03:24.007
the build method on this builder

57
00:03:24.007 --> 00:03:30.007
and that's going cause our new item processor to be created.

58
00:03:30.007 --> 00:03:35.003
And that's all we need in order to run this job,

59
00:03:35.003 --> 00:03:37.007
so let's head over to the terminal

60
00:03:37.007 --> 00:03:44.005
and we'll use the script to run our job.

61
00:03:44.005 --> 00:03:46.007
There we can see that our job kicked off

62
00:03:46.007 --> 00:03:48.005
and ran successfully.

63
00:03:48.005 --> 00:03:51.000
And now, if we go and look at our data directory,

64
00:03:51.000 --> 00:03:54.009
we should have our adjacent file that was output.

65
00:03:54.009 --> 00:03:59.004
And within this file, we should only see orders for

66
00:03:59.004 --> 00:04:02.005
email address with .gov emails.

67
00:04:02.005 --> 00:04:05.001
So let's do a couple of spot checks.

68
00:04:05.001 --> 00:04:08.004
Looks like we're doing well.

69
00:04:08.004 --> 00:04:13.008
And then, those orders should also have a tracking number.

70
00:04:13.008 --> 00:04:19.006
So using a composite item processor, we were able to conjoin

71
00:04:19.006 --> 00:04:22.009
the processing that was found

72
00:04:22.009 --> 00:04:26.001
within two individual item processors

73
00:04:26.001 --> 00:04:30.005
and that combined logic was able to be applied

74
00:04:30.005 --> 00:04:33.000
within the flow of our job.

