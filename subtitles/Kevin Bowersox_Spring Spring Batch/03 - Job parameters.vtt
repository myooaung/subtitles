WEBVTT
1
00:00:00.005 --> 00:00:03.005
- [Instructor] Job instances are created using the name

2
00:00:03.005 --> 00:00:07.006
of the job and parameters passed by a job launcher.

3
00:00:07.006 --> 00:00:11.001
If a job instance has been successfully executed,

4
00:00:11.001 --> 00:00:14.009
it's not possible to rerun that same job instance.

5
00:00:14.009 --> 00:00:18.008
Instead, a new job instance must be created by passing

6
00:00:18.008 --> 00:00:22.003
a new job parameter to the job.

7
00:00:22.003 --> 00:00:25.004
So for example, when we've been running our job,

8
00:00:25.004 --> 00:00:29.004
we haven't been supplying any job parameters.

9
00:00:29.004 --> 00:00:33.004
Therefore, if we re-execute the same job,

10
00:00:33.004 --> 00:00:35.008
it will not be started by the framework,

11
00:00:35.008 --> 00:00:39.006
it will assume the job has been successfully completed,

12
00:00:39.006 --> 00:00:42.002
and it won't allow us to restart.

13
00:00:42.002 --> 00:00:45.001
So here you can see that it's signifying the step

14
00:00:45.001 --> 00:00:48.008
has already been completed, or it's not restartable.

15
00:00:48.008 --> 00:00:51.000
So if we want to relaunch this job,

16
00:00:51.000 --> 00:00:53.008
we need to do it with a new job parameter

17
00:00:53.008 --> 00:00:56.006
so that we get a new job instance.

18
00:00:56.006 --> 00:01:00.004
To help us with that, I'm going to package our job

19
00:01:00.004 --> 00:01:02.004
as a jar using Maven.

20
00:01:02.004 --> 00:01:04.006
So just right click on the project

21
00:01:04.006 --> 00:01:07.008
go to Run as and then Maven build.

22
00:01:07.008 --> 00:01:12.001
From here, we're able to specify the different goals

23
00:01:12.001 --> 00:01:15.007
for Maven to package our application.

24
00:01:15.007 --> 00:01:19.005
I'm just going to specify clean and then package.

25
00:01:19.005 --> 00:01:23.006
and that will allow Maven to build the application

26
00:01:23.006 --> 00:01:30.000
and package it as a jar.

27
00:01:30.000 --> 00:01:33.001
Once the application has been packaged,

28
00:01:33.001 --> 00:01:36.006
we can head over to our console.

29
00:01:36.006 --> 00:01:39.007
If we look within our project directory, you'll notice

30
00:01:39.007 --> 00:01:43.003
the target directory and it contains a jar file.

31
00:01:43.003 --> 00:01:46.004
This is the packaged application and we can use it

32
00:01:46.004 --> 00:01:48.002
to launch our job.

33
00:01:48.002 --> 00:01:51.002
So just specified java-jar,

34
00:01:51.002 --> 00:01:54.001
and then the name of the jar file.

35
00:01:54.001 --> 00:01:58.000
Here, we're also able to pass our job parameter.

36
00:01:58.000 --> 00:02:01.006
In this case, I'm going to supply by a new job parameter

37
00:02:01.006 --> 00:02:06.006
named item, and I'm going to give it a value of shoes.

38
00:02:06.006 --> 00:02:11.005
Once we launch the job with the new parameter,

39
00:02:11.005 --> 00:02:13.002
we'll get a new job instance

40
00:02:13.002 --> 00:02:17.002
and you'll see that we successfully package our item.

41
00:02:17.002 --> 00:02:19.009
Now, when we're working with job parameters,

42
00:02:19.009 --> 00:02:26.006
it's often useful to be able to access them within the code.

43
00:02:26.006 --> 00:02:31.005
So if we look at our step, we're able to access job

44
00:02:31.005 --> 00:02:36.002
parameters by working with the chunkContext.

45
00:02:36.002 --> 00:02:40.000
So, what we're going to do is create a new string

46
00:02:40.000 --> 00:02:45.004
named item and then we're going to use the chunkContext

47
00:02:45.004 --> 00:02:49.003
and we're going to get the stepContext and then from there,

48
00:02:49.003 --> 00:02:54.007
we can access a map containing our job parameters.

49
00:02:54.007 --> 00:02:57.004
So just like a typical map, we need a key.

50
00:02:57.004 --> 00:03:00.009
In this case, it's the name of the job parameter.

51
00:03:00.009 --> 00:03:05.002
And then because the value of the map is of type object,

52
00:03:05.002 --> 00:03:08.009
we're going to take that object to a string

53
00:03:08.009 --> 00:03:12.008
in order to assign it to our items string.

54
00:03:12.008 --> 00:03:16.000
And then we're going to declare a new job parameter

55
00:03:16.000 --> 00:03:17.005
that we're going to access.

56
00:03:17.005 --> 00:03:20.004
And this is a very common job parameter,

57
00:03:20.004 --> 00:03:23.000
it's going to be the date

58
00:03:23.000 --> 00:03:26.004
that the job was ran.

59
00:03:26.004 --> 00:03:29.009
So when we launched the job next time,

60
00:03:29.009 --> 00:03:35.002
we're going to specify a parameter run.date.

61
00:03:35.002 --> 00:03:38.008
And that's going to allow us to pass in the date

62
00:03:38.008 --> 00:03:43.008
the job was ran and then when we output this information

63
00:03:43.008 --> 00:03:46.008
within our tasklet to the console.

64
00:03:46.008 --> 00:03:50.006
Let's just use string.format to add a little bit more

65
00:03:50.006 --> 00:03:55.001
information and we can use those different job parameter

66
00:03:55.001 --> 00:03:57.002
values that are supplied.

67
00:03:57.002 --> 00:04:00.005
So instead of just generically saying the item,

68
00:04:00.005 --> 00:04:04.002
we can use an argument there to say the item name.

69
00:04:04.002 --> 00:04:09.007
And then we can also say when the item was packaged.

70
00:04:09.007 --> 00:04:12.009
So we'll just need to then supply those two arguments,

71
00:04:12.009 --> 00:04:14.008
first, the name of the item,

72
00:04:14.008 --> 00:04:17.006
and then second, the date.

73
00:04:17.006 --> 00:04:20.009
So now we got more console output, you know,

74
00:04:20.009 --> 00:04:25.003
that's going to include those values for our job parameters.

75
00:04:25.003 --> 00:04:30.003
Let's go ahead, we'll need to repackage our project.

76
00:04:30.003 --> 00:04:37.005
So we're going to have to use Maven once again, to build it.

77
00:04:37.005 --> 00:04:40.006
We'll kick off our Maven build.

78
00:04:40.006 --> 00:04:42.008
There we can see it's launching.

79
00:04:42.008 --> 00:04:44.009
Now I'm going to head back to the terminal

80
00:04:44.009 --> 00:04:46.008
and we'll clear things out.

81
00:04:46.008 --> 00:04:48.007
Now the one thing you want to do,

82
00:04:48.007 --> 00:04:50.009
you'll notice we're in that target directory.

83
00:04:50.009 --> 00:04:54.000
It's going to get deleted with our build.

84
00:04:54.000 --> 00:04:56.003
So we'll want to hop back a directory,

85
00:04:56.003 --> 00:05:00.002
make sure you're sitting within the project.

86
00:05:00.002 --> 00:05:03.008
And then once we see our target,

87
00:05:03.008 --> 00:05:07.001
we can navigate into it.

88
00:05:07.001 --> 00:05:12.009
And now we're going to launch our job again this time

89
00:05:12.009 --> 00:05:15.007
with our run.date parameter.

90
00:05:15.007 --> 00:05:20.003
So, when we want to specify multiple job parameters,

91
00:05:20.003 --> 00:05:24.005
it's best to surround each job parameter in quotes.

92
00:05:24.005 --> 00:05:26.006
So here we have item equals shoes.

93
00:05:26.006 --> 00:05:30.006
That's one job parameter item with a value of shoes.

94
00:05:30.006 --> 00:05:34.007
And now we're going to specify our next job parameter

95
00:05:34.007 --> 00:05:39.007
run.date and we can do something when supplying a date,

96
00:05:39.007 --> 00:05:41.009
After the name of the job parameter,

97
00:05:41.009 --> 00:05:44.002
just put date in parentheses,

98
00:05:44.002 --> 00:05:49.001
and that will cause the value of the job parameter

99
00:05:49.001 --> 00:05:52.001
to be typed as an actual date.

100
00:05:52.001 --> 00:05:56.007
And then when we supply a date to the framework,

101
00:05:56.007 --> 00:06:01.009
typically it is a four digit year, so we're going to use

102
00:06:01.009 --> 00:06:06.001
the first day of the year of 2020.

103
00:06:06.001 --> 00:06:09.001
So, January 1, 2020

104
00:06:09.001 --> 00:06:13.001
and we'll supply that as a job parameter.

105
00:06:13.001 --> 00:06:17.000
Okay, with that in place, let's go ahead,

106
00:06:17.000 --> 00:06:20.008
and we can kick off our job.

107
00:06:20.008 --> 00:06:23.000
And now when the job executes,

108
00:06:23.000 --> 00:06:25.002
you'll see that we got a new job instance

109
00:06:25.002 --> 00:06:28.005
so we were able to, you know, rerun the job

110
00:06:28.005 --> 00:06:32.004
and then we were able to access the value

111
00:06:32.004 --> 00:06:34.000
of those job parameters.

112
00:06:34.000 --> 00:06:37.006
So we see the shoes has been packaged,

113
00:06:37.006 --> 00:06:41.005
and then the date we passed in as our run date.

114
00:06:41.005 --> 00:06:44.006
So job parameters are very important.

115
00:06:44.006 --> 00:06:46.007
When we are scheduling jobs,

116
00:06:46.007 --> 00:06:50.004
it's often necessary to pass in job parameters

117
00:06:50.004 --> 00:06:53.006
so that we're able to get that new job instance

118
00:06:53.006 --> 00:06:57.008
and we're able to execute the run for that particular

119
00:06:57.008 --> 00:06:59.000
instance of the job.

