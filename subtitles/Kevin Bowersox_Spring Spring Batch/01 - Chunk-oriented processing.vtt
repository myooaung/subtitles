WEBVTT
1
00:00:00.006 --> 00:00:02.000
- [Instructor] Up until this point,

2
00:00:02.000 --> 00:00:05.009
every step we have configured has been a tasklet.

3
00:00:05.009 --> 00:00:09.002
We'll now start to explore chunk-based steps,

4
00:00:09.002 --> 00:00:13.007
which are another type of step found within Spring Batch.

5
00:00:13.007 --> 00:00:16.006
Chunk-based steps use three components

6
00:00:16.006 --> 00:00:18.007
to complete their processing.

7
00:00:18.007 --> 00:00:21.002
These components are an ItemReader,

8
00:00:21.002 --> 00:00:25.001
an ItemWriter, and optionally, an ItemProcessor.

9
00:00:25.001 --> 00:00:28.003
The generic logic of chunk-based processing is

10
00:00:28.003 --> 00:00:32.003
to read items from a data store using an ItemReader,

11
00:00:32.003 --> 00:00:36.001
transform the items using the ItemProcessor,

12
00:00:36.001 --> 00:00:39.004
and then we write chunks of the data to another data store

13
00:00:39.004 --> 00:00:43.005
within a transaction using the ItemWriter.

14
00:00:43.005 --> 00:00:46.006
When reading, processing, and writing the items,

15
00:00:46.006 --> 00:00:50.000
we perform these operations on subsets of the data

16
00:00:50.000 --> 00:00:52.006
referred to as chunks.

17
00:00:52.006 --> 00:00:55.005
Our step will continue reading, processing,

18
00:00:55.005 --> 00:00:57.008
and writing chunks until the items

19
00:00:57.008 --> 00:01:00.005
in the data store are exhausted.

20
00:01:00.005 --> 00:01:04.006
Let's take a closer look at how this works.

21
00:01:04.006 --> 00:01:07.008
It is important to understand how data is processed

22
00:01:07.008 --> 00:01:10.002
through the a chunk-based step.

23
00:01:10.002 --> 00:01:12.003
When performing a chunk-based step,

24
00:01:12.003 --> 00:01:15.006
we typically provide a chunk size which determines

25
00:01:15.006 --> 00:01:19.003
how many items will be found within a chunk.

26
00:01:19.003 --> 00:01:22.009
In this example, our chunk size has been set to two,

27
00:01:22.009 --> 00:01:28.002
so you'll notice that each of the chunks contains two items.

28
00:01:28.002 --> 00:01:29.008
When processing starts,

29
00:01:29.008 --> 00:01:32.009
the ItemReader will read the first item in the chunk

30
00:01:32.009 --> 00:01:37.006
and then pass it to the processor for processing.

31
00:01:37.006 --> 00:01:39.005
It then repeats this process

32
00:01:39.005 --> 00:01:42.007
for the next item within the chunk.

33
00:01:42.007 --> 00:01:44.005
Once we've met the chunk size,

34
00:01:44.005 --> 00:01:48.006
the entire chunk will be passed to the ItemWriter

35
00:01:48.006 --> 00:01:51.002
and then will be written to a data store

36
00:01:51.002 --> 00:01:54.002
within a transaction.

37
00:01:54.002 --> 00:01:56.001
Once the chunk has been written,

38
00:01:56.001 --> 00:01:58.003
this process will repeat itself,

39
00:01:58.003 --> 00:02:01.009
will read the first item in the chunk, then process it,

40
00:02:01.009 --> 00:02:06.000
then read the second item the chunk and process that one,

41
00:02:06.000 --> 00:02:09.003
and then we're going to take the entire chunk

42
00:02:09.003 --> 00:02:13.003
and use the ItemWriter to write it to a data store.

43
00:02:13.003 --> 00:02:16.007
We'll see how to configure jobs for chunk-based processing

44
00:02:16.007 --> 00:02:18.005
over the next few lessons,

45
00:02:18.005 --> 00:02:22.005
focusing specifically on the ItemReader implementations

46
00:02:22.005 --> 00:02:25.000
that read items from a data store.

