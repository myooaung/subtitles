WEBVTT
1
00:00:00.005 --> 00:00:02.003
- [Instructor] The batch status assigned

2
00:00:02.003 --> 00:00:04.006
to a job or step is important

3
00:00:04.006 --> 00:00:06.007
because it is used by the framework

4
00:00:06.007 --> 00:00:08.009
to determine if a job succeeded

5
00:00:08.009 --> 00:00:11.001
or failed, which ultimately,

6
00:00:11.001 --> 00:00:14.000
determines if a job can be restarted.

7
00:00:14.000 --> 00:00:16.002
Job flows are not always simple

8
00:00:16.002 --> 00:00:20.000
and sometimes we need control over the batch status assigned

9
00:00:20.000 --> 00:00:21.004
to a job.

10
00:00:21.004 --> 00:00:25.002
To handle this, Spring Batch provides three transitions

11
00:00:25.002 --> 00:00:29.009
to stop a job, and override the default batch status.

12
00:00:29.009 --> 00:00:34.004
These transition elements are end, fail and stop.

13
00:00:34.004 --> 00:00:37.004
By default, the batch status of a job

14
00:00:37.004 --> 00:00:39.000
is marked as completed

15
00:00:39.000 --> 00:00:41.005
if the exit status of its steps

16
00:00:41.005 --> 00:00:43.001
does not return failed

17
00:00:43.001 --> 00:00:45.009
and no transitions are specified.

18
00:00:45.009 --> 00:00:49.004
When transitions such as on are present,

19
00:00:49.004 --> 00:00:51.003
it gets a little bit more complicated.

20
00:00:51.003 --> 00:00:54.006
In some scenarios, a step can fail

21
00:00:54.006 --> 00:00:56.006
but due to an on transition,

22
00:00:56.006 --> 00:01:00.003
the batch status of the job is marked as completed.

23
00:01:00.003 --> 00:01:02.006
When we want to alter this behavior,

24
00:01:02.006 --> 00:01:06.002
we use one of the stop transitions.

25
00:01:06.002 --> 00:01:09.004
If we take a look at our job configuration,

26
00:01:09.004 --> 00:01:11.009
you'll see that we have already used

27
00:01:11.009 --> 00:01:15.005
the end stop transition.

28
00:01:15.005 --> 00:01:18.007
If we were to configure our job to fail,

29
00:01:18.007 --> 00:01:23.004
so let's go to the driveToAddressStep

30
00:01:23.004 --> 00:01:27.003
and we're going to change our Boolean to true

31
00:01:27.003 --> 00:01:29.006
to say we got lost,

32
00:01:29.006 --> 00:01:31.004
our job's going to fail

33
00:01:31.004 --> 00:01:36.003
but because we have configured our job

34
00:01:36.003 --> 00:01:40.002
to use the end stop transition,

35
00:01:40.002 --> 00:01:43.000
it's going to be marked as completed.

36
00:01:43.000 --> 00:01:45.002
So let's hop over to the terminal

37
00:01:45.002 --> 00:01:48.000
and we're going to run our job

38
00:01:48.000 --> 00:01:51.005
and we'll see that we'll receive the exception,

39
00:01:51.005 --> 00:01:53.004
because we got lost,

40
00:01:53.004 --> 00:01:56.004
but when we look at the metadata stored regarding the job,

41
00:01:56.004 --> 00:02:00.005
we'll see that the batch status is successful.

42
00:02:00.005 --> 00:02:03.003
So there we see our stack trace.

43
00:02:03.003 --> 00:02:06.005
Now if we head over to the database

44
00:02:06.005 --> 00:02:11.005
and we look in the job repository,

45
00:02:11.005 --> 00:02:15.005
and if we look at our batch job execution,

46
00:02:15.005 --> 00:02:17.009
we're going to see that it was complete

47
00:02:17.009 --> 00:02:20.008
and then when we look at the step executions,

48
00:02:20.008 --> 00:02:24.008
you'll see that our driveToAddressStep was abandoned.

49
00:02:24.008 --> 00:02:27.007
So that's not what we want to happen.

50
00:02:27.007 --> 00:02:33.001
In this case, we would never be able to deliver our package.

51
00:02:33.001 --> 00:02:36.006
So let's go ahead and clear the metadata

52
00:02:36.006 --> 00:02:40.000
within the job repository

53
00:02:40.000 --> 00:02:43.002
and I'm just doing that by dropping the tables.

54
00:02:43.002 --> 00:02:48.002
And we'll navigate back to our job configuration.

55
00:02:48.002 --> 00:02:50.007
That last status was not ideal

56
00:02:50.007 --> 00:02:55.002
so let's take a look at another status named stop.

57
00:02:55.002 --> 00:02:59.008
Stop is going to allow us to pause the job

58
00:02:59.008 --> 00:03:02.008
and then we can fix whatever the problem is

59
00:03:02.008 --> 00:03:06.000
and rerun it at a later time.

60
00:03:06.000 --> 00:03:11.005
So what we'll do is here where we are failing,

61
00:03:11.005 --> 00:03:16.001
instead of executing our storePackageStep,

62
00:03:16.001 --> 00:03:19.001
we've going to replace that with a call

63
00:03:19.001 --> 00:03:22.007
to the stop method.

64
00:03:22.007 --> 00:03:26.007
And in this case, we're just going to pause the job

65
00:03:26.007 --> 00:03:29.002
and allow for it to be manually fixed

66
00:03:29.002 --> 00:03:31.001
by a batch job operator

67
00:03:31.001 --> 00:03:33.001
and then we can rerun it.

68
00:03:33.001 --> 00:03:35.007
So let's go back to our console

69
00:03:35.007 --> 00:03:38.001
and we're going to clear it

70
00:03:38.001 --> 00:03:40.007
and then rerun our job.

71
00:03:40.007 --> 00:03:45.002
This time, the job is going to pause.

72
00:03:45.002 --> 00:03:50.001
So we'll see the exception thrown.

73
00:03:50.001 --> 00:03:51.008
There's our exception

74
00:03:51.008 --> 00:03:56.004
but you'll notice that it's in the stopped status.

75
00:03:56.004 --> 00:03:59.002
That's going to allow us to go back

76
00:03:59.002 --> 00:04:03.009
and we'll just head into our class

77
00:04:03.009 --> 00:04:07.003
and we're going to go to the driveToAddressStep

78
00:04:07.003 --> 00:04:10.002
and we're just going to manually fix the job.

79
00:04:10.002 --> 00:04:13.004
Typically this would be changing some data

80
00:04:13.004 --> 00:04:16.006
or figuring out what the problem was and resolving it.

81
00:04:16.006 --> 00:04:19.000
In our case, we're just going to flip our Boolean

82
00:04:19.000 --> 00:04:23.006
so that we can successfully execute the job.

83
00:04:23.006 --> 00:04:26.000
So here I'll clear our terminal

84
00:04:26.000 --> 00:04:27.005
and then we're going to go ahead

85
00:04:27.005 --> 00:04:29.008
and run the job again.

86
00:04:29.008 --> 00:04:31.002
You'll notice this time,

87
00:04:31.002 --> 00:04:34.008
we're able to actually restart the job

88
00:04:34.008 --> 00:04:39.002
and it can successfully process.

89
00:04:39.002 --> 00:04:40.001
Okay.

90
00:04:40.001 --> 00:04:44.000
So there we were able to successfully complete

91
00:04:44.000 --> 00:04:45.009
the driveToAddressStep

92
00:04:45.009 --> 00:04:51.000
and then we went through the remaining flow of the job.

93
00:04:51.000 --> 00:04:52.005
Now, we're going to take a look

94
00:04:52.005 --> 00:04:56.000
at an additional status that we can use

95
00:04:56.000 --> 00:04:59.005
and that's the failed status.

96
00:04:59.005 --> 00:05:04.009
So let's navigate back to our job configuration.

97
00:05:04.009 --> 00:05:09.007
I'm going to flip over to fail the job.

98
00:05:09.007 --> 00:05:11.007
We're going to get lost.

99
00:05:11.007 --> 00:05:16.004
And then if we navigate to the configuration

100
00:05:16.004 --> 00:05:19.002
of the job, instead of stopping,

101
00:05:19.002 --> 00:05:22.007
we're just going to go ahead and fail.

102
00:05:22.007 --> 00:05:29.003
And now, we'll need to first clear out our metadata

103
00:05:29.003 --> 00:05:31.004
so I'm just going to drop all the tables again.

104
00:05:31.004 --> 00:05:34.003
This is just for demonstration purposes

105
00:05:34.003 --> 00:05:38.001
and then I'm going to clear our console.

106
00:05:38.001 --> 00:05:40.006
And we'll rerun the job.

107
00:05:40.006 --> 00:05:42.005
This time, we'll notice

108
00:05:42.005 --> 00:05:44.007
that we will get lost.

109
00:05:44.007 --> 00:05:46.004
We'll throw the exception

110
00:05:46.004 --> 00:05:47.009
but the job will fail,

111
00:05:47.009 --> 00:05:52.001
which is much better than being marked as completed.

112
00:05:52.001 --> 00:05:55.001
We're explicitly marking the job as failed.

113
00:05:55.001 --> 00:05:59.006
So there you see that the status of the job is failed.

114
00:05:59.006 --> 00:06:01.006
We can take a look at that

115
00:06:01.006 --> 00:06:04.006
within our database if we want

116
00:06:04.006 --> 00:06:08.003
to query the different executions

117
00:06:08.003 --> 00:06:10.002
and their statuses.

118
00:06:10.002 --> 00:06:14.009
So here we can see that our driveToAddressStep did fail

119
00:06:14.009 --> 00:06:19.004
and if we take a look at the status for the job execution,

120
00:06:19.004 --> 00:06:21.009
it's failed as well.

121
00:06:21.009 --> 00:06:24.004
Now, with that, we can go ahead

122
00:06:24.004 --> 00:06:28.005
and within our application,

123
00:06:28.005 --> 00:06:31.001
we can resolve the problem.

124
00:06:31.001 --> 00:06:34.002
So let's go back and we're going

125
00:06:34.002 --> 00:06:37.008
to mark our Boolean as false.

126
00:06:37.008 --> 00:06:41.008
That's going to allow the job to succeed

127
00:06:41.008 --> 00:06:45.001
and if we navigate back to the terminal,

128
00:06:45.001 --> 00:06:50.005
you'll notice that we're able to rerun the job this time

129
00:06:50.005 --> 00:06:53.003
because we're in a failed status

130
00:06:53.003 --> 00:06:56.008
and the job will succeed.

131
00:06:56.008 --> 00:06:59.006
So using the different stop transitions,

132
00:06:59.006 --> 00:07:03.000
and the corresponding methods in the Java configuration,

133
00:07:03.000 --> 00:07:06.004
we're able to get better control over the batch status

134
00:07:06.004 --> 00:07:07.006
of our job.

135
00:07:07.006 --> 00:07:11.000
And that's important because these transitions

136
00:07:11.000 --> 00:07:13.000
can put our job in a state

137
00:07:13.000 --> 00:07:15.002
that allows us to rerun it.

138
00:07:15.002 --> 00:07:16.008
We need to be extra careful

139
00:07:16.008 --> 00:07:19.007
when we're using the on transition

140
00:07:19.007 --> 00:07:22.008
that we don't place a job into a state

141
00:07:22.008 --> 00:07:24.005
because of it's batch status

142
00:07:24.005 --> 00:07:28.000
that will not allow us to recover from an error.

