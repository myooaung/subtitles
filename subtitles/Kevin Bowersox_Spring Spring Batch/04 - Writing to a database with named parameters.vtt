WEBVTT
1
00:00:00.005 --> 00:00:03.008
- [Instructor] When using the JDBC batch item writer

2
00:00:03.008 --> 00:00:07.007
we have the option to to use springs JDBC template,

3
00:00:07.007 --> 00:00:09.005
which uses name parameters

4
00:00:09.005 --> 00:00:12.006
to map values to the sequel statement.

5
00:00:12.006 --> 00:00:14.009
Named parameters help prevent issues

6
00:00:14.009 --> 00:00:18.009
that pop up with ordinal values in prepared statements.

7
00:00:18.009 --> 00:00:21.003
So it's a much preferred approach.

8
00:00:21.003 --> 00:00:24.001
Let's make the switch over to the name parameters,

9
00:00:24.001 --> 00:00:26.002
which is a much simpler approach

10
00:00:26.002 --> 00:00:29.004
to writing information through our item writers

11
00:00:29.004 --> 00:00:31.003
to a data store.

12
00:00:31.003 --> 00:00:35.002
We'll continue to use the same JDBC batch item writer,

13
00:00:35.002 --> 00:00:38.004
however, we need to modify the sequel statement

14
00:00:38.004 --> 00:00:43.001
that's being used in order to use name parameters.

15
00:00:43.001 --> 00:00:46.003
So, we're going to replace these traditional question marks

16
00:00:46.003 --> 00:00:50.007
used in a prepared statement with a named parameter.

17
00:00:50.007 --> 00:00:54.001
And the format for that is going to be colon

18
00:00:54.001 --> 00:00:56.008
and then the name of your parameter.

19
00:00:56.008 --> 00:00:58.006
Now in order for this to work

20
00:00:58.006 --> 00:01:02.007
we need to match the names of the fields

21
00:01:02.007 --> 00:01:06.002
found within our order pojo.

22
00:01:06.002 --> 00:01:11.005
So, we'll go in and swap out each of these question marks

23
00:01:11.005 --> 00:01:15.008
with the corresponding field on the pojo

24
00:01:15.008 --> 00:01:17.004
as a name parameter.

25
00:01:17.004 --> 00:01:19.003
So, there's the first name.

26
00:01:19.003 --> 00:01:21.002
Here's the last name.

27
00:01:21.002 --> 00:01:23.004
And we just need to do down through the order

28
00:01:23.004 --> 00:01:26.006
they're specified here within our sequel statement.

29
00:01:26.006 --> 00:01:29.000
The next named parameter

30
00:01:29.000 --> 00:01:32.007
is going to be the item ID.

31
00:01:32.007 --> 00:01:37.006
After that we're going to specify the item name.

32
00:01:37.006 --> 00:01:42.006
Then the cost and finally our ship date.

33
00:01:42.006 --> 00:01:45.000
Okay, so that's in place.

34
00:01:45.000 --> 00:01:47.006
And now if we navigate down

35
00:01:47.006 --> 00:01:51.003
to the configuration of our item writer,

36
00:01:51.003 --> 00:01:52.007
we have to make a change.

37
00:01:52.007 --> 00:01:54.001
We're no longer using

38
00:01:54.001 --> 00:01:57.000
the item prepared statement setter.

39
00:01:57.000 --> 00:02:00.005
So, we can take out that line of our configuration.

40
00:02:00.005 --> 00:02:03.001
And then if we look within our options,

41
00:02:03.001 --> 00:02:06.007
we have this bean mapped method.

42
00:02:06.007 --> 00:02:09.007
And that's what we're going to be using.

43
00:02:09.007 --> 00:02:11.008
What that's going to do for us

44
00:02:11.008 --> 00:02:16.000
is it's going to register another component.

45
00:02:16.000 --> 00:02:20.006
So, when we add the bean mapped method

46
00:02:20.006 --> 00:02:22.006
it causes a bean property

47
00:02:22.006 --> 00:02:26.006
item sequel parameter source provider to be registered.

48
00:02:26.006 --> 00:02:29.003
Now it's a very long name, but in a nutshell,

49
00:02:29.003 --> 00:02:34.001
what it does, it's going to take those name parameters

50
00:02:34.001 --> 00:02:37.006
and look for a corresponding field on a pojo

51
00:02:37.006 --> 00:02:40.008
and when it finds it, it's going to use the value

52
00:02:40.008 --> 00:02:43.006
of that field to set the parameter

53
00:02:43.006 --> 00:02:45.008
within our insert statement.

54
00:02:45.008 --> 00:02:47.006
So, it's a lot easier

55
00:02:47.006 --> 00:02:51.003
than using those ordinal positions.

56
00:02:51.003 --> 00:02:53.008
I'm going to go ahead and save our job.

57
00:02:53.008 --> 00:02:56.004
And then before we go ahead and run it

58
00:02:56.004 --> 00:02:59.008
let's navigate over to our database

59
00:02:59.008 --> 00:03:02.008
and I'm going to truncate the output table

60
00:03:02.008 --> 00:03:08.005
just so that we can see the job in action.

61
00:03:08.005 --> 00:03:09.007
And then let's just select

62
00:03:09.007 --> 00:03:12.001
to make sure everything came out of the table.

63
00:03:12.001 --> 00:03:14.000
There we see it's empty.

64
00:03:14.000 --> 00:03:17.003
And we can head back over to the terminal.

65
00:03:17.003 --> 00:03:19.009
And here we'll kick off the job.

66
00:03:19.009 --> 00:03:24.008
And we can try out our new item writer

67
00:03:24.008 --> 00:03:30.002
that is leveraging the named parameters.

68
00:03:30.002 --> 00:03:33.000
Okay, it looks like it completed.

69
00:03:33.000 --> 00:03:34.008
Let's go back to our database

70
00:03:34.008 --> 00:03:35.009
and see what we got.

71
00:03:35.009 --> 00:03:37.009
So, we'll just right click,

72
00:03:37.009 --> 00:03:41.002
we'll select the first thousand records in the data set

73
00:03:41.002 --> 00:03:43.009
and we can see they wrote the same way

74
00:03:43.009 --> 00:03:45.008
they did with the last item writer,

75
00:03:45.008 --> 00:03:49.004
it's just using a named parameter

76
00:03:49.004 --> 00:03:53.000
as well as the beaned mapped strategy,

77
00:03:53.000 --> 00:03:54.004
it's much more efficient

78
00:03:54.004 --> 00:03:57.000
and much less error prone.

