WEBVTT
1
00:00:00.006 --> 00:00:04.003
- When we start to impact Spring Batch's Architecture

2
00:00:04.003 --> 00:00:06.007
we find two prominent concepts.

3
00:00:06.007 --> 00:00:09.000
Jobs and steps.

4
00:00:09.000 --> 00:00:11.009
A job represents the entire batch process

5
00:00:11.009 --> 00:00:13.007
that we want to execute.

6
00:00:13.007 --> 00:00:15.008
It defines one or more steps

7
00:00:15.008 --> 00:00:20.002
that execute in an order we commonly call a flow.

8
00:00:20.002 --> 00:00:23.005
A step is a phase in a batch job that defines

9
00:00:23.005 --> 00:00:26.007
how the actual processing will occur

10
00:00:26.007 --> 00:00:29.001
for that portion of the job.

11
00:00:29.001 --> 00:00:31.005
The processing logic within a step

12
00:00:31.005 --> 00:00:33.007
may read data from a data source,

13
00:00:33.007 --> 00:00:37.009
process it and then write it to another data source.

14
00:00:37.009 --> 00:00:40.003
A job can contain multiple steps

15
00:00:40.003 --> 00:00:44.004
and the flow from one step to another can be dynamic.

16
00:00:44.004 --> 00:00:48.006
Meaning it can be conditional or occur in parallel.

17
00:00:48.006 --> 00:00:52.004
The entire job is launched using a Job Launcher,

18
00:00:52.004 --> 00:00:55.006
which may pass JobParameters to the job.

19
00:00:55.006 --> 00:00:58.009
As the job runs, metadata regarding the job

20
00:00:58.009 --> 00:01:02.000
is written to the job repository.

21
00:01:02.000 --> 00:01:06.004
When running Spring Batch jobs the concept of a job instance

22
00:01:06.004 --> 00:01:10.005
and a job execution must be understood.

23
00:01:10.005 --> 00:01:13.006
When a job launcher creates a job

24
00:01:13.006 --> 00:01:16.003
it typically will pass the name of the job

25
00:01:16.003 --> 00:01:18.005
and some parameters.

26
00:01:18.005 --> 00:01:22.002
The combination of the Job Name and its parameters

27
00:01:22.002 --> 00:01:27.004
defines a new JobInstance which is created.

28
00:01:27.004 --> 00:01:31.000
When we execute a JobInstance,

29
00:01:31.000 --> 00:01:35.001
we create a new JobExecution.

30
00:01:35.001 --> 00:01:38.006
In some situations, such as failures,

31
00:01:38.006 --> 00:01:41.009
we might execute a job multiple times

32
00:01:41.009 --> 00:01:44.006
with the same parameters.

33
00:01:44.006 --> 00:01:50.003
So it is the same JobInstance because it's the same job

34
00:01:50.003 --> 00:01:53.004
with the same parameters.

35
00:01:53.004 --> 00:02:00.000
But in this case, a different JobExecution is created

36
00:02:00.000 --> 00:02:04.003
because it is the second execution

37
00:02:04.003 --> 00:02:08.002
of a particular JobInstance.

38
00:02:08.002 --> 00:02:13.000
So when we execute a job with the same parameters

39
00:02:13.000 --> 00:02:16.005
it is the same instance of a job

40
00:02:16.005 --> 00:02:21.005
and for each time that we execute a JobInstance

41
00:02:21.005 --> 00:02:25.008
we get a new JobExecution.

42
00:02:25.008 --> 00:02:30.006
Here we'll see the same job ran with different parameters,

43
00:02:30.006 --> 00:02:33.009
which creates a different JobInstance

44
00:02:33.009 --> 00:02:37.009
and a new execution of that JobInstance.

45
00:02:37.009 --> 00:02:40.008
So here we see in attempt three,

46
00:02:40.008 --> 00:02:44.002
we have the same job name but you'll notice

47
00:02:44.002 --> 00:02:49.003
that the JobParameter being passed is different.

48
00:02:49.003 --> 00:02:54.005
This means that we're going to have a different JobInstance

49
00:02:54.005 --> 00:02:58.001
and when that JobInstance is executed

50
00:02:58.001 --> 00:03:02.008
we're going to get a different JobExecution.

51
00:03:02.008 --> 00:03:06.006
As the steps execute within a job,

52
00:03:06.006 --> 00:03:11.001
there's a very similar concept that is applied.

53
00:03:11.001 --> 00:03:14.009
So each execution of a step

54
00:03:14.009 --> 00:03:20.003
is going to create a new StepExecution.

55
00:03:20.003 --> 00:03:25.008
The StepExecution is associated with a JobExecution

56
00:03:25.008 --> 00:03:29.007
and its possible to have multiple StepExecutions

57
00:03:29.007 --> 00:03:32.007
when a failure occurs in our processing

58
00:03:32.007 --> 00:03:36.003
and we need to restart a job.

59
00:03:36.003 --> 00:03:41.007
As they execute, metadata regarding JobInstance,

60
00:03:41.007 --> 00:03:44.008
JobExecutions and StepExecutions

61
00:03:44.008 --> 00:03:48.006
are all stored in the JobRepository.

62
00:03:48.006 --> 00:03:52.002
Here you see some of the tables the JobRepository uses

63
00:03:52.002 --> 00:03:56.003
to store this information in a relational database.

64
00:03:56.003 --> 00:04:00.006
Of particular interest is the status and exit code columns

65
00:04:00.006 --> 00:04:04.001
found within the execution tables.

66
00:04:04.001 --> 00:04:07.005
These columns hold information regarding the success

67
00:04:07.005 --> 00:04:09.007
or failure of a job.

68
00:04:09.007 --> 00:04:11.007
We'll be talking about these in more detail

69
00:04:11.007 --> 00:04:14.002
later in the course.

70
00:04:14.002 --> 00:04:17.009
The final item I want to discuss is the two types of steps

71
00:04:17.009 --> 00:04:20.001
found within Spring Batch.

72
00:04:20.001 --> 00:04:22.008
The first type of step is known as a tasklet

73
00:04:22.008 --> 00:04:25.003
and we've seen this in our first example.

74
00:04:25.003 --> 00:04:29.002
It contains a single method on its interface named execute,

75
00:04:29.002 --> 00:04:33.009
that runs over and over until it gives signal to stop.

76
00:04:33.009 --> 00:04:37.003
Tasklets are typically used for things like setup logic,

77
00:04:37.003 --> 00:04:40.007
stored procedures or other custom logic

78
00:04:40.007 --> 00:04:45.000
that cannot be achieved without the box components.

79
00:04:45.000 --> 00:04:50.000
The second type of step is known as a chunk-based step.

80
00:04:50.000 --> 00:04:53.009
It is used in scenarios where we need to process data

81
00:04:53.009 --> 00:04:56.000
from a data source.

82
00:04:56.000 --> 00:05:00.007
The chunk-based step leverages the ItemReader interface

83
00:05:00.007 --> 00:05:03.007
to read chunks of data from a data store.

84
00:05:03.007 --> 00:05:06.006
Then writes the chunks in a transaction

85
00:05:06.006 --> 00:05:08.007
using the ItemWriter.

86
00:05:08.007 --> 00:05:12.009
Optionally, we can include an ItemProcessor implementation

87
00:05:12.009 --> 00:05:16.007
to perform transformations on the data.

88
00:05:16.007 --> 00:05:19.009
So those are the high level concepts you will need to know

89
00:05:19.009 --> 00:05:23.006
for working with batch jobs in Spring Batch.

90
00:05:23.006 --> 00:05:24.007
Lets write some code

91
00:05:24.007 --> 00:05:28.000
and check these out with a few examples.

