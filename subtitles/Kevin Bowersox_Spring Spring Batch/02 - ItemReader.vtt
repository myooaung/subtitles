WEBVTT
1
00:00:00.005 --> 00:00:03.005
- [Instructor] Chunked-based processing requires data

2
00:00:03.005 --> 00:00:07.009
to be read as items into a batch job for processing.

3
00:00:07.009 --> 00:00:11.008
To achieve this, we use an ItemReader.

4
00:00:11.008 --> 00:00:14.007
Spring Batch provides an ItemReader interface

5
00:00:14.007 --> 00:00:17.007
with a single method named read.

6
00:00:17.007 --> 00:00:21.007
Implementations of the ItemReader interface retrieve data

7
00:00:21.007 --> 00:00:25.005
from a data store one item at a time for processing

8
00:00:25.005 --> 00:00:27.006
within the batch job.

9
00:00:27.006 --> 00:00:30.000
The framework provides several out-of-the-box

10
00:00:30.000 --> 00:00:33.003
implementations for reading from common data stores

11
00:00:33.003 --> 00:00:37.003
such as databases, files, and message queues.

12
00:00:37.003 --> 00:00:40.007
This alleviates the need for developers to write logic

13
00:00:40.007 --> 00:00:43.004
focused on pulling data from these sources

14
00:00:43.004 --> 00:00:45.001
for a batch job.

15
00:00:45.001 --> 00:00:46.009
Instead, we just configure one

16
00:00:46.009 --> 00:00:49.007
of the out-of-the-box ItemReaders.

17
00:00:49.007 --> 00:00:52.000
Let's take a look at some of the ItemReaders

18
00:00:52.000 --> 00:00:54.002
that the framework provides.

19
00:00:54.002 --> 00:00:57.004
Here's a list of those ItemReaders that are available

20
00:00:57.004 --> 00:01:01.001
within the framework that we can use to consume items

21
00:01:01.001 --> 00:01:03.005
from different data sources.

22
00:01:03.005 --> 00:01:06.008
When leveraging these ItemReaders, we'll need to provide

23
00:01:06.008 --> 00:01:10.001
some specific configuration for each reader

24
00:01:10.001 --> 00:01:13.008
that will instruct the reader how to consume the items

25
00:01:13.008 --> 00:01:16.002
from the data store.

26
00:01:16.002 --> 00:01:20.001
Typically, we'll wind up building POJOs in our object model

27
00:01:20.001 --> 00:01:24.002
that correspond with those items read by the reader.

28
00:01:24.002 --> 00:01:27.006
Those POJOs will be used for the downstream processing

29
00:01:27.006 --> 00:01:30.000
within our jobs.

30
00:01:30.000 --> 00:01:32.004
Let's get hands-on and configure a few of the most

31
00:01:32.004 --> 00:01:35.000
popular ItemReaders in the framework.

