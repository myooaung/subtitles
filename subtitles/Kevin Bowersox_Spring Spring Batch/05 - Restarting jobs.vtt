WEBVTT
1
00:00:00.005 --> 00:00:03.001
- [Narrator] Unfortunately, not every batch job

2
00:00:03.001 --> 00:00:05.005
runs successfully the first time.

3
00:00:05.005 --> 00:00:07.004
To help us handle this situation,

4
00:00:07.004 --> 00:00:11.002
Spring Batch allows failed jobs to be restarted.

5
00:00:11.002 --> 00:00:14.005
The framework only allows a job to be restarted

6
00:00:14.005 --> 00:00:17.003
if the overall status of a job execution

7
00:00:17.003 --> 00:00:20.005
is marked as failed or stopped.

8
00:00:20.005 --> 00:00:23.005
By default, it does not allow completed jobs

9
00:00:23.005 --> 00:00:25.000
to be restarted.

10
00:00:25.000 --> 00:00:26.009
When a job is restarted,

11
00:00:26.009 --> 00:00:30.001
Spring Batch will create a new job execution

12
00:00:30.001 --> 00:00:33.001
for the particular job instance that failed,

13
00:00:33.001 --> 00:00:36.007
and it will restart at the failed step,

14
00:00:36.007 --> 00:00:39.003
executing from that point forward.

15
00:00:39.003 --> 00:00:41.001
Let's see this in action

16
00:00:41.001 --> 00:00:42.005
by modifying a step

17
00:00:42.005 --> 00:00:45.004
within our job configuration to fail.

18
00:00:45.004 --> 00:00:47.009
That way we can see the results.

19
00:00:47.009 --> 00:00:51.004
So we're going to introduce some boolean logic

20
00:00:51.004 --> 00:00:55.000
within our drive to address step.

21
00:00:55.000 --> 00:00:56.000
Let's imagine that

22
00:00:56.000 --> 00:00:58.004
we can get lost while we are driving

23
00:00:58.004 --> 00:01:01.009
our package to the address for delivery.

24
00:01:01.009 --> 00:01:04.002
So, we'll just introduce a boolean,

25
00:01:04.002 --> 00:01:07.002
and we'll name that boolean Got Lost.

26
00:01:07.002 --> 00:01:10.008
And I'm going to initially set it to true.

27
00:01:10.008 --> 00:01:14.000
And then, within the execute method

28
00:01:14.000 --> 00:01:15.008
of our tasklet,

29
00:01:15.008 --> 00:01:17.009
I'm going to add a conditional

30
00:01:17.009 --> 00:01:20.005
that determines if we got lost,

31
00:01:20.005 --> 00:01:22.002
and if so,

32
00:01:22.002 --> 00:01:26.008
we're going to then throw a run time exception.

33
00:01:26.008 --> 00:01:30.003
And any time an exception is thrown

34
00:01:30.003 --> 00:01:33.003
within a Spring Batch job,

35
00:01:33.003 --> 00:01:36.004
it's going to cause the job to fail

36
00:01:36.004 --> 00:01:40.000
if we don't have any other configuration in place.

37
00:01:40.000 --> 00:01:42.005
So here we'll create our run time exception,

38
00:01:42.005 --> 00:01:48.006
we'll say "Got lost driving to the address",

39
00:01:48.006 --> 00:01:52.008
and then if the boolean is not marked as true,

40
00:01:52.008 --> 00:01:56.004
we're going to continue driving to the address

41
00:01:56.004 --> 00:01:57.006
and arrive there.

42
00:01:57.006 --> 00:01:59.005
So we just have a way to toggle

43
00:01:59.005 --> 00:02:01.006
the success or failure

44
00:02:01.006 --> 00:02:04.006
of our drive to address step.

45
00:02:04.006 --> 00:02:06.008
So let's go over to our console,

46
00:02:06.008 --> 00:02:08.004
and using our script,

47
00:02:08.004 --> 00:02:10.006
I'm going to kick off the job.

48
00:02:10.006 --> 00:02:13.001
And let's take a look at the results.

49
00:02:13.001 --> 00:02:16.004
First we'll have to build the job with Maven,

50
00:02:16.004 --> 00:02:19.009
and then we'll go ahead and launch it.

51
00:02:19.009 --> 00:02:21.008
Okay, so you can see that

52
00:02:21.008 --> 00:02:23.006
we have a stack trace,

53
00:02:23.006 --> 00:02:26.008
within the job itself,

54
00:02:26.008 --> 00:02:30.004
and that's due to the run time exception

55
00:02:30.004 --> 00:02:32.000
that was thrown.

56
00:02:32.000 --> 00:02:35.009
So we did not successfully complete our job.

57
00:02:35.009 --> 00:02:40.007
And if we navigate over to our job repository,

58
00:02:40.007 --> 00:02:43.003
we can query the job repository

59
00:02:43.003 --> 00:02:45.003
to see some information about

60
00:02:45.003 --> 00:02:47.004
what exactly happened.

61
00:02:47.004 --> 00:02:50.007
You can see that we have one job instance,

62
00:02:50.007 --> 00:02:55.002
we attempted one execution of that job instance,

63
00:02:55.002 --> 00:02:57.000
and it did fail.

64
00:02:57.000 --> 00:02:58.002
And then when we take a look at

65
00:02:58.002 --> 00:02:59.006
the step execution,

66
00:02:59.006 --> 00:03:01.004
you can see that we successfully

67
00:03:01.004 --> 00:03:03.001
packaged the item,

68
00:03:03.001 --> 00:03:07.000
but we failed in driving to the address.

69
00:03:07.000 --> 00:03:10.009
So let's go back to our code,

70
00:03:10.009 --> 00:03:11.008
and this time,

71
00:03:11.008 --> 00:03:15.008
we're just going to toggle the got lost boolean,

72
00:03:15.008 --> 00:03:17.009
and we're going to set it to false,

73
00:03:17.009 --> 00:03:19.006
that way we succeed.

74
00:03:19.006 --> 00:03:22.006
So this is going to be the second run

75
00:03:22.006 --> 00:03:24.007
of this job instance,

76
00:03:24.007 --> 00:03:28.000
and we can head back over to our terminal,

77
00:03:28.000 --> 00:03:29.006
I'll clear it out,

78
00:03:29.006 --> 00:03:31.008
and then we can run the job again.

79
00:03:31.008 --> 00:03:32.007
So this time,

80
00:03:32.007 --> 00:03:35.004
it's going to be successful,

81
00:03:35.004 --> 00:03:37.004
and what I want you to see is that

82
00:03:37.004 --> 00:03:39.005
we're not going to execute

83
00:03:39.005 --> 00:03:42.008
the package items step again,

84
00:03:42.008 --> 00:03:45.008
because it successfully completed.

85
00:03:45.008 --> 00:03:49.002
So here you can look within

86
00:03:49.002 --> 00:03:52.007
the output to the console,

87
00:03:52.007 --> 00:03:55.005
and you can see that it's not going

88
00:03:55.005 --> 00:03:57.007
to execute the package item step,

89
00:03:57.007 --> 00:04:01.005
but we do execute the drive to address step,

90
00:04:01.005 --> 00:04:03.007
because it previously had failed,

91
00:04:03.007 --> 00:04:06.003
and when we relaunch the job,

92
00:04:06.003 --> 00:04:09.003
we would like to complete it successfully.

93
00:04:09.003 --> 00:04:13.006
Now if we navigate back to the job repository,

94
00:04:13.006 --> 00:04:17.003
we can go ahead and query the database,

95
00:04:17.003 --> 00:04:19.003
and you'll now see that

96
00:04:19.003 --> 00:04:22.001
we still only have one job instance,

97
00:04:22.001 --> 00:04:24.005
because we used the same parameters.

98
00:04:24.005 --> 00:04:28.003
We have a second job execution,

99
00:04:28.003 --> 00:04:32.000
and that job execution completed successfully,

100
00:04:32.000 --> 00:04:35.005
and then if we take a look at our step execution,

101
00:04:35.005 --> 00:04:41.000
you can see that for the second job execution,

102
00:04:41.000 --> 00:04:44.009
we executed the drive to address step

103
00:04:44.009 --> 00:04:47.009
and the give package to customer step.

104
00:04:47.009 --> 00:04:51.006
Both of those steps completed successfully.

105
00:04:51.006 --> 00:04:52.005
At this point,

106
00:04:52.005 --> 00:04:55.004
it's important to understand that jobs and steps

107
00:04:55.004 --> 00:04:58.003
have specific statuses that are assigned

108
00:04:58.003 --> 00:05:02.000
based upon the results of a job execution.

109
00:05:02.000 --> 00:05:04.005
Steps have an exit status that affects

110
00:05:04.005 --> 00:05:07.005
the overall batch status.

111
00:05:07.005 --> 00:05:09.009
These statuses ultimately decide

112
00:05:09.009 --> 00:05:12.001
if a job can be restarted,

113
00:05:12.001 --> 00:05:15.002
and where the job is restarted from.

114
00:05:15.002 --> 00:05:17.003
These concepts will be important

115
00:05:17.003 --> 00:05:19.000
in later lessons.

