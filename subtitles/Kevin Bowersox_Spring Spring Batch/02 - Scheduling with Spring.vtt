WEBVTT
1
00:00:00.005 --> 00:00:03.004
- [Narrator] The spring framework provides built-in support

2
00:00:03.004 --> 00:00:05.003
for scheduling of tasks that

3
00:00:05.003 --> 00:00:08.007
can be used to schedule a spring batch job.

4
00:00:08.007 --> 00:00:10.009
Scheduling within the Spring framework

5
00:00:10.009 --> 00:00:14.001
can be achieved using an annotation-based approach

6
00:00:14.001 --> 00:00:16.009
that requires minimal configuration.

7
00:00:16.009 --> 00:00:19.008
Let's take a look at adding scheduling

8
00:00:19.008 --> 00:00:23.005
of our batch job with the spring framework.

9
00:00:23.005 --> 00:00:26.009
For this lesson, I've built a very simple job

10
00:00:26.009 --> 00:00:32.000
that is able to output the time the job has ran.

11
00:00:32.000 --> 00:00:34.002
You'll notice that we kick off the job,

12
00:00:34.002 --> 00:00:37.006
similar to the others we've built throughout the course,

13
00:00:37.006 --> 00:00:41.004
by creating a job Bean, creating a step Bean,

14
00:00:41.004 --> 00:00:45.004
and in this case our step is a tasklet.

15
00:00:45.004 --> 00:00:47.009
So, with that in place, we can get started

16
00:00:47.009 --> 00:00:50.004
with our scheduling configuration.

17
00:00:50.004 --> 00:00:53.006
And, to do that, we're going to add an annotation,

18
00:00:53.006 --> 00:00:55.004
provided by Spring Boot,

19
00:00:55.004 --> 00:00:59.004
and that's the enable scheduling annotation.

20
00:00:59.004 --> 00:01:01.007
And that's applied to our class,

21
00:01:01.007 --> 00:01:04.001
and that will enable some auto-configuration

22
00:01:04.001 --> 00:01:06.001
within Spring Boot,

23
00:01:06.001 --> 00:01:09.000
that will support the framework scheduling.

24
00:01:09.000 --> 00:01:11.002
Now, the next thing that we need to do

25
00:01:11.002 --> 00:01:15.008
is configure Spring Boot not to launch our jobs

26
00:01:15.008 --> 00:01:19.004
when we execute our Jar.

27
00:01:19.004 --> 00:01:23.004
So, to do that, we need to provide a property

28
00:01:23.004 --> 00:01:26.003
within our application.properties file.

29
00:01:26.003 --> 00:01:31.000
And that property is spring.batch.job.enabled,

30
00:01:31.000 --> 00:01:33.003
and then we just set it to false.

31
00:01:33.003 --> 00:01:37.007
And this will cause Spring Boot not to launch our jobs

32
00:01:37.007 --> 00:01:41.005
upon the initial bootstrap of the application.

33
00:01:41.005 --> 00:01:44.001
Okay, so let's go ahead and close that.

34
00:01:44.001 --> 00:01:48.002
And then we're going to head back over to our job config,

35
00:01:48.002 --> 00:01:50.001
and within this configuration,

36
00:01:50.001 --> 00:01:53.009
we need to auto-wire another dependency.

37
00:01:53.009 --> 00:01:57.001
So, we're going to add a job launcher,

38
00:01:57.001 --> 00:02:00.004
so this is part of the batch framework.

39
00:02:00.004 --> 00:02:05.002
And we're going to name this job launcher "jobLauncher,"

40
00:02:05.002 --> 00:02:08.004
and this object is going to be used to kick off

41
00:02:08.004 --> 00:02:12.004
our job within a method that we're going to declare.

42
00:02:12.004 --> 00:02:14.006
It's going to be named "runJob,"

43
00:02:14.006 --> 00:02:17.002
and it has a return type of "void."

44
00:02:17.002 --> 00:02:19.005
And on this run job method,

45
00:02:19.005 --> 00:02:22.006
here's where we can apply our scheduling.

46
00:02:22.006 --> 00:02:27.001
So, to do that, we're going to use the scheduled annotation.

47
00:02:27.001 --> 00:02:30.005
And if we take a look at the elements on that annotation,

48
00:02:30.005 --> 00:02:34.007
you'll see that we can specify a CRON expression

49
00:02:34.007 --> 00:02:37.006
that is a UNIX-like scheduler.

50
00:02:37.006 --> 00:02:40.009
So, for our CRON, we're going to

51
00:02:40.009 --> 00:02:43.006
execute the job every thirty seconds.

52
00:02:43.006 --> 00:02:50.002
So, we can specify that by adding the configuration 0/30.

53
00:02:50.002 --> 00:02:54.003
And then after that, we're just going to add five asterisks

54
00:02:54.003 --> 00:02:56.003
separated by spaces,

55
00:02:56.003 --> 00:02:59.004
and that will cause the job to be triggered

56
00:02:59.004 --> 00:03:02.009
every 30 seconds by this KRON expression.

57
00:03:02.009 --> 00:03:05.000
Now, we're also going to be passing

58
00:03:05.000 --> 00:03:07.005
parameters to our job.

59
00:03:07.005 --> 00:03:11.001
So, we're going to use a job parameters builder.

60
00:03:11.001 --> 00:03:15.005
So, I'm going to go ahead and create that object.

61
00:03:15.005 --> 00:03:17.006
I'll just call it "paramBuilder."

62
00:03:17.006 --> 00:03:19.008
And then, we use the new operator

63
00:03:19.008 --> 00:03:22.005
and the constructor to create that.

64
00:03:22.005 --> 00:03:25.009
Now, using the job parameters builder,

65
00:03:25.009 --> 00:03:32.001
we are able to then create parameters for our job.

66
00:03:32.001 --> 00:03:34.005
And these are going to be job parameters.

67
00:03:34.005 --> 00:03:39.008
So using the add date method, I'm able to build a runtime

68
00:03:39.008 --> 00:03:43.008
job parameter, and I'm simply going to assign that

69
00:03:43.008 --> 00:03:46.003
the value of a date object.

70
00:03:46.003 --> 00:03:49.008
So that will give it the current date and time,

71
00:03:49.008 --> 00:03:54.002
and then we need to import java.util.date.

72
00:03:54.002 --> 00:03:56.006
At this point, we're able to then kick off

73
00:03:56.006 --> 00:03:58.007
our job, using our job launcher.

74
00:03:58.007 --> 00:04:04.006
So, let's invoke the run method on the job launcher,

75
00:04:04.006 --> 00:04:06.008
which it uses to launch a job.

76
00:04:06.008 --> 00:04:08.000
And then, you'll remember that

77
00:04:08.000 --> 00:04:11.008
our job Bean was found within the job method.

78
00:04:11.008 --> 00:04:17.002
And then, we take our parameter builder,

79
00:04:17.002 --> 00:04:21.006
and simply invoke the two job parameters method.

80
00:04:21.006 --> 00:04:23.004
And that will cause our job parameters

81
00:04:23.004 --> 00:04:27.000
to be passed into the job launcher's run method.

82
00:04:27.000 --> 00:04:29.004
And then, we're going to have to add

83
00:04:29.004 --> 00:04:32.002
some exceptions that will be thrown

84
00:04:32.002 --> 00:04:36.000
by the job launcher in the event of an error.

85
00:04:36.000 --> 00:04:37.007
Okay, so let's go ahead and

86
00:04:37.007 --> 00:04:40.004
save this scheduling configuration,

87
00:04:40.004 --> 00:04:43.009
and then we're going to navigate over to the terminal,

88
00:04:43.009 --> 00:04:49.000
and use our script to run the job.

89
00:04:49.000 --> 00:04:51.008
So, there we see the job has started,

90
00:04:51.008 --> 00:04:53.006
but we have not launched it.

91
00:04:53.006 --> 00:04:55.009
And there, we hit our CRON,

92
00:04:55.009 --> 00:05:00.002
you can see, at the minute mark there, we ran the job.

93
00:05:00.002 --> 00:05:02.007
And now, in another 30 seconds,

94
00:05:02.007 --> 00:05:05.007
the scheduler is going to trigger the job,

95
00:05:05.007 --> 00:05:10.006
and the job launcher will execute it once again.

96
00:05:10.006 --> 00:05:14.003
And, there was that second execution at the 30 second mark,

97
00:05:14.003 --> 00:05:16.005
we can see.

98
00:05:16.005 --> 00:05:19.004
So, in this lesson, we saw a simple approach

99
00:05:19.004 --> 00:05:23.007
to scheduling using Spring's built-in scheduling support.

100
00:05:23.007 --> 00:05:27.000
All we needed to do was add a simple annotation

101
00:05:27.000 --> 00:05:32.000
to a method that kicked off our job via a job launcher.

