WEBVTT
1
00:00:00.005 --> 00:00:02.008
- [Instructor] In the early parts of the course we'll create

2
00:00:02.008 --> 00:00:06.006
a spring batch job with steps that mimic the real life job

3
00:00:06.006 --> 00:00:09.001
of delivering a package.

4
00:00:09.001 --> 00:00:12.004
Configuring a real life job will provide us a tangible

5
00:00:12.004 --> 00:00:17.001
example to relate to as we learn how to control the flow

6
00:00:17.001 --> 00:00:18.009
of a batch job.

7
00:00:18.009 --> 00:00:22.001
You can always return to this graphic as we work through

8
00:00:22.001 --> 00:00:25.002
the lessons to see what we're trying to achieve

9
00:00:25.002 --> 00:00:29.000
as we introduce more advanced concepts in later lessons

10
00:00:29.000 --> 00:00:31.008
we'll expand upon this job.

11
00:00:31.008 --> 00:00:34.006
You can see that the first step within our job

12
00:00:34.006 --> 00:00:37.002
is to package an item.

13
00:00:37.002 --> 00:00:40.006
We're going to work now to build our first batch job

14
00:00:40.006 --> 00:00:44.002
that completes the package item step.

15
00:00:44.002 --> 00:00:48.007
So to get started we're going to navigate into our project

16
00:00:48.007 --> 00:00:54.006
to the main class for the application and once we open

17
00:00:54.006 --> 00:00:58.000
that class we're going to apply

18
00:00:58.000 --> 00:01:01.009
the EnableBatchProcessing annotation.

19
00:01:01.009 --> 00:01:07.003
This annotation will cause several Beans to be registered

20
00:01:07.003 --> 00:01:10.003
by default within Spring's IoC container.

21
00:01:10.003 --> 00:01:14.003
This includes a job repository, a job launcher, a job

22
00:01:14.003 --> 00:01:18.001
registry and a transaction manager.

23
00:01:18.001 --> 00:01:21.007
There will also be two other Beans registered

24
00:01:21.007 --> 00:01:24.007
that we're going to be working with throughout this lesson

25
00:01:24.007 --> 00:01:29.002
and we're going to inject those Beans into our class.

26
00:01:29.002 --> 00:01:34.008
The first is a JobBuilderFactory and we'll add

27
00:01:34.008 --> 00:01:39.008
that as a dependency within our class and then we'll add

28
00:01:39.008 --> 00:01:45.000
the second which is a StepBuilderFactory.

29
00:01:45.000 --> 00:01:50.002
And the job in step builder factories allow us to create

30
00:01:50.002 --> 00:01:54.009
job builders or step builders and these objects provide us

31
00:01:54.009 --> 00:02:00.003
with a fluid API where we can chain method calls together

32
00:02:00.003 --> 00:02:03.009
in order to configure a job or a step.

33
00:02:03.009 --> 00:02:07.002
So if you're familiar with the builder pattern typically

34
00:02:07.002 --> 00:02:10.003
you'll invoke one method after the other until you want

35
00:02:10.003 --> 00:02:13.003
to create your object and then you'll invoke

36
00:02:13.003 --> 00:02:17.002
the build method to actually build the object.

37
00:02:17.002 --> 00:02:19.005
Let's take a look at this in action

38
00:02:19.005 --> 00:02:22.001
in order to create a job.

39
00:02:22.001 --> 00:02:25.006
So we're just going to create a new method

40
00:02:25.006 --> 00:02:30.000
that returns a type of job and typically for the name

41
00:02:30.000 --> 00:02:34.008
of the method we provide the name of our job,

42
00:02:34.008 --> 00:02:38.009
in this case it's going to be the deliverPackageJob.

43
00:02:38.009 --> 00:02:44.003
And then these jobs are actually defined as Beans so we'll

44
00:02:44.003 --> 00:02:49.009
apply the Bean annotation to this method and then within

45
00:02:49.009 --> 00:02:53.007
the body of this method we're going to leverage

46
00:02:53.007 --> 00:02:58.005
our JobBuilderFactory and a job builder to create a

47
00:02:58.005 --> 00:03:04.000
job object that will be returned from the body of the method

48
00:03:04.000 --> 00:03:06.004
and that's going to be our job bean.

49
00:03:06.004 --> 00:03:11.000
So let's use our jobBuilderFactory, and the first thing

50
00:03:11.000 --> 00:03:14.001
we'll do is we'll call it the get method.

51
00:03:14.001 --> 00:03:19.002
This method is going to return a job builder and it requires

52
00:03:19.002 --> 00:03:22.007
us to specify the name of our job.

53
00:03:22.007 --> 00:03:27.000
In this case it's going to be the deliverPackageJob

54
00:03:27.000 --> 00:03:32.003
and from there we can call the start method.

55
00:03:32.003 --> 00:03:37.006
The start method is going to allow us to specify the first

56
00:03:37.006 --> 00:03:43.003
step within our job and in this case if you remember we are

57
00:03:43.003 --> 00:03:47.009
going to be calling the packageItemStep.

58
00:03:47.009 --> 00:03:51.009
So we haven't defined it yet, I'm just going to add a stub

59
00:03:51.009 --> 00:03:55.000
for our step which will be defined later.

60
00:03:55.000 --> 00:03:58.006
So this really completes the configuration of our job

61
00:03:58.006 --> 00:04:03.009
and we'd like to build that job object so we just invoke

62
00:04:03.009 --> 00:04:08.006
the build method on our job builder.

63
00:04:08.006 --> 00:04:12.006
Okay, now let's go ahead and define our step.

64
00:04:12.006 --> 00:04:17.004
So I'm going to create that method and then we'll just pull

65
00:04:17.004 --> 00:04:24.000
it a little bit higher in our class and just like a job

66
00:04:24.000 --> 00:04:28.000
a step is defined as a Bean.

67
00:04:28.000 --> 00:04:33.005
So we're going to add the Bean annotation to our

68
00:04:33.005 --> 00:04:38.004
packageItemStep method and then within the body

69
00:04:38.004 --> 00:04:44.007
of this method we'll use our step builder to create

70
00:04:44.007 --> 00:04:48.007
the step we would like to place within our job.

71
00:04:48.007 --> 00:04:54.007
So we'll get a step builder by invoking the get method

72
00:04:54.007 --> 00:04:56.006
on the stepBuilderFactory.

73
00:04:56.006 --> 00:05:00.000
So it's very similar to our jobBuilderFactory

74
00:05:00.000 --> 00:05:04.004
and when we call get we need to provide the name

75
00:05:04.004 --> 00:05:05.009
of the step.

76
00:05:05.009 --> 00:05:10.000
In this case it's going to be the packageItemStep

77
00:05:10.000 --> 00:05:13.008
and from here we're going to define basically

78
00:05:13.008 --> 00:05:15.005
the implementation of our step.

79
00:05:15.005 --> 00:05:17.009
And it's going to be a tasklet.

80
00:05:17.009 --> 00:05:22.005
So a tasklet is a particular type of step.

81
00:05:22.005 --> 00:05:27.001
It has one method on its interface, execute,

82
00:05:27.001 --> 00:05:31.002
and that method will get called over and over again until

83
00:05:31.002 --> 00:05:35.008
the tasklet signals that it has been completed.

84
00:05:35.008 --> 00:05:40.001
So to create a tasklet just type new within the argument

85
00:05:40.001 --> 00:05:44.004
section of the method and then type tasklet and then hold

86
00:05:44.004 --> 00:05:48.007
Control and hit Space and then you'll want to select

87
00:05:48.007 --> 00:05:52.008
the first option, Anonymous Inner Type, and this is going

88
00:05:52.008 --> 00:06:00.001
to fill out the implementation of the tasklet interface.

89
00:06:00.001 --> 00:06:04.003
Here you see the execute method which we will need

90
00:06:04.003 --> 00:06:07.002
to provide the implementation for.

91
00:06:07.002 --> 00:06:10.007
In our case we're just going to write out some information

92
00:06:10.007 --> 00:06:15.009
to the console so that we can see our step execute.

93
00:06:15.009 --> 00:06:22.000
And we'll just write, "The item has been packaged,"

94
00:06:22.000 --> 00:06:24.003
and that will be all the work we do

95
00:06:24.003 --> 00:06:27.003
within our packageItemStep.

96
00:06:27.003 --> 00:06:32.000
Now as I mentioned the execute method will be called

97
00:06:32.000 --> 00:06:36.003
continuously until the tasklet signals to the framework

98
00:06:36.003 --> 00:06:38.009
that it would like to stop.

99
00:06:38.009 --> 00:06:43.002
So the way we do that is by returning a repeat status

100
00:06:43.002 --> 00:06:47.000
of finished and that will cause execution

101
00:06:47.000 --> 00:06:50.009
of that method to stop within our batch processing.

102
00:06:50.009 --> 00:06:53.003
If you'd like it to continue you can use

103
00:06:53.003 --> 00:06:57.007
the CONTINUABLE RepeatStatus but since we just want

104
00:06:57.007 --> 00:07:01.006
to execute this once I'm going to go ahead and return FINISHED.

105
00:07:01.006 --> 00:07:06.005
So now we've defined our tasklet you'll remember we're using

106
00:07:06.005 --> 00:07:12.000
a step builder so we need to go ahead and build our step

107
00:07:12.000 --> 00:07:18.000
and there we have the configuration of our job and our step.

108
00:07:18.000 --> 00:07:20.008
So we created the deliverPackageJob

109
00:07:20.008 --> 00:07:23.009
using the jobBuilderFactory in job builder.

110
00:07:23.009 --> 00:07:29.008
Within that job we have one step, the packageItemStep,

111
00:07:29.008 --> 00:07:34.000
and that step is a tasklet and that tasklet just writes

112
00:07:34.000 --> 00:07:38.003
some information to the console one time

113
00:07:38.003 --> 00:07:40.008
and then our job will stop.

114
00:07:40.008 --> 00:07:43.007
Okay, so we have all this in place, how do we go ahead

115
00:07:43.007 --> 00:07:45.001
and run this?

116
00:07:45.001 --> 00:07:48.004
Well Spring Boot makes that pretty easy for us.

117
00:07:48.004 --> 00:07:51.005
Within Spring Boot there is a job launcher.

118
00:07:51.005 --> 00:07:55.002
So a job launcher just kicks off and starts a job

119
00:07:55.002 --> 00:07:58.002
and they provide an implementation of a job launcher

120
00:07:58.002 --> 00:08:01.008
known as a job launcher command line runner.

121
00:08:01.008 --> 00:08:05.006
So basically what Spring Boot will do is scan

122
00:08:05.006 --> 00:08:09.004
the application, find all of our jobs and then run them.

123
00:08:09.004 --> 00:08:13.000
So all we need to do is right click on our application

124
00:08:13.000 --> 00:08:18.000
class, go to Run As and then Java Application.

125
00:08:18.000 --> 00:08:22.004
And then you'll notice within the console our job

126
00:08:22.004 --> 00:08:24.004
is going to launch.

127
00:08:24.004 --> 00:08:30.002
So there you can see that the deliverPackageJob starts,

128
00:08:30.002 --> 00:08:36.001
we execute the packageItemStep, and then we can see

129
00:08:36.001 --> 00:08:41.001
the console output that we specified in our tasklet,

130
00:08:41.001 --> 00:08:45.009
and then finally you can see that our step is executed

131
00:08:45.009 --> 00:08:50.001
and then our job has completed.

132
00:08:50.001 --> 00:08:53.007
So that completes our first Spring batch job.

133
00:08:53.007 --> 00:08:56.001
As we work through the course we're going to dive into

134
00:08:56.001 --> 00:09:00.002
the details of what we saw here and then learn more advanced

135
00:09:00.002 --> 00:09:02.000
techniques for building out jobs.

