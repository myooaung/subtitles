WEBVTT
1
00:00:00.005 --> 00:00:02.009
- The job step is another strategy

2
00:00:02.009 --> 00:00:06.009
that Spring Batch provides to support re-usability.

3
00:00:06.009 --> 00:00:11.000
A job step lets us nest a job within a step

4
00:00:11.000 --> 00:00:14.007
and then execute that step from another job.

5
00:00:14.007 --> 00:00:17.002
This is a little different then defining a flow

6
00:00:17.002 --> 00:00:18.008
because instead of executing

7
00:00:18.008 --> 00:00:22.000
the sequence of steps directly inside of the job

8
00:00:22.000 --> 00:00:27.003
the job step will be executed as a separate job.

9
00:00:27.003 --> 00:00:30.003
We're going to take a look at how we can nest a job

10
00:00:30.003 --> 00:00:33.000
with a job step coming up.

11
00:00:33.000 --> 00:00:36.005
In order to support us, I've created a billing job

12
00:00:36.005 --> 00:00:39.002
that has a single invoice step

13
00:00:39.002 --> 00:00:42.000
and we're going to incorporate that

14
00:00:42.000 --> 00:00:46.006
as a nested job within our deliver package job.

15
00:00:46.006 --> 00:00:49.001
So we're going to package the item,

16
00:00:49.001 --> 00:00:53.000
execute our delivery flow and then as a separate job,

17
00:00:53.000 --> 00:00:56.005
we will execute our billing job.

18
00:00:56.005 --> 00:01:01.000
So lets take a quick look at our billing job

19
00:01:01.000 --> 00:01:04.006
and you'll notice that the billing job has one step,

20
00:01:04.006 --> 00:01:06.004
send to invoice.

21
00:01:06.004 --> 00:01:08.009
And if we look a little bit above our billing job

22
00:01:08.009 --> 00:01:10.007
you'll see that step.

23
00:01:10.007 --> 00:01:12.009
It's simply going to output to the console

24
00:01:12.009 --> 00:01:15.006
that we've invoiced the customer.

25
00:01:15.006 --> 00:01:20.009
Now in order to nest the billing job within another job

26
00:01:20.009 --> 00:01:23.002
we'll need to create a job step.

27
00:01:23.002 --> 00:01:27.000
And job steps are defined as beans

28
00:01:27.000 --> 00:01:30.008
and the bean is going to be of type step.

29
00:01:30.008 --> 00:01:34.003
You'll find that building a job step is very similar

30
00:01:34.003 --> 00:01:36.008
to building an actual step.

31
00:01:36.008 --> 00:01:43.000
I'm going to name our method the nested billing job step

32
00:01:43.000 --> 00:01:45.005
and then within the body of this method,

33
00:01:45.005 --> 00:01:49.002
once again we're going to use the step builder factory.

34
00:01:49.002 --> 00:01:54.001
So very similar to when we're creating a step.

35
00:01:54.001 --> 00:01:56.003
Then we invoke the get method

36
00:01:56.003 --> 00:02:00.004
and we provide a name for our job step.

37
00:02:00.004 --> 00:02:05.001
In this case it's going to be nested billing job step.

38
00:02:05.001 --> 00:02:07.009
And then from here it gets a little bit different.

39
00:02:07.009 --> 00:02:11.006
So instead of using the start method

40
00:02:11.006 --> 00:02:14.005
we're actually going to use a method job.

41
00:02:14.005 --> 00:02:17.004
And this allows us to point to the job

42
00:02:17.004 --> 00:02:20.008
that we would like to execute within this step.

43
00:02:20.008 --> 00:02:24.000
In our case that will be our billing job

44
00:02:24.000 --> 00:02:26.009
and then once we've defined our step

45
00:02:26.009 --> 00:02:28.009
holding true to the builder pattern

46
00:02:28.009 --> 00:02:30.007
we call the build method

47
00:02:30.007 --> 00:02:34.005
and that causes our step object to be return

48
00:02:34.005 --> 00:02:39.004
and declared as a bean within Spring's IOC container.

49
00:02:39.004 --> 00:02:44.002
Okay, now we need to take our job step

50
00:02:44.002 --> 00:02:47.008
and nest it within another job.

51
00:02:47.008 --> 00:02:50.001
We mentioned that those will be done

52
00:02:50.001 --> 00:02:52.007
within our delivery job.

53
00:02:52.007 --> 00:02:56.003
So lets go to the deliver package job.

54
00:02:56.003 --> 00:03:00.007
And after we execute our delivery flow,

55
00:03:00.007 --> 00:03:04.001
we would like to then bill the customer.

56
00:03:04.001 --> 00:03:07.008
So we can use the next transition

57
00:03:07.008 --> 00:03:13.000
and then we're going to call our nested billing job step

58
00:03:13.000 --> 00:03:17.008
and that's all it takes to nest one job within another.

59
00:03:17.008 --> 00:03:19.002
We built the job step

60
00:03:19.002 --> 00:03:23.007
and then within the job configuration of the job

61
00:03:23.007 --> 00:03:26.002
that you would like to call the other

62
00:03:26.002 --> 00:03:28.005
you specify the next transition

63
00:03:28.005 --> 00:03:31.002
and call your job step.

64
00:03:31.002 --> 00:03:34.005
Okay, so let's head over to the terminal

65
00:03:34.005 --> 00:03:42.001
and we're going to run our delivery job.

66
00:03:42.001 --> 00:03:44.003
All right, let's take a look.

67
00:03:44.003 --> 00:03:48.002
You can see that we kicked into the delivery flow

68
00:03:48.002 --> 00:03:50.004
here we're leaving the package at the door,

69
00:03:50.004 --> 00:03:54.004
the customer isn't present and then you can see

70
00:03:54.004 --> 00:03:59.000
that we start to execute our nested billing job step.

71
00:03:59.000 --> 00:04:01.007
And the real important part here,

72
00:04:01.007 --> 00:04:04.007
you'll notice within the console output,

73
00:04:04.007 --> 00:04:09.005
it is executing our billing job as a separate job.

74
00:04:09.005 --> 00:04:14.001
So if we looked into the metadata in the job repository

75
00:04:14.001 --> 00:04:18.008
you're going to see this as a separate job execution.

76
00:04:18.008 --> 00:04:21.006
So this is another option you have when you want

77
00:04:21.006 --> 00:04:25.003
to achieve some re-usability within Spring Batch.

78
00:04:25.003 --> 00:04:27.009
When you're deciding between an external flow

79
00:04:27.009 --> 00:04:29.003
and a job step,

80
00:04:29.003 --> 00:04:32.009
I would recommend leaning towards an external flow

81
00:04:32.009 --> 00:04:35.001
because it's easier to manage

82
00:04:35.001 --> 00:04:38.000
then chaining these jobs together.

