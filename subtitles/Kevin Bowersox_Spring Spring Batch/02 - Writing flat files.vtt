WEBVTT
1
00:00:00.005 --> 00:00:01.005
- [Instructor] It is pretty common

2
00:00:01.005 --> 00:00:02.005
for a batch job

3
00:00:02.005 --> 00:00:04.003
to create a flat-file

4
00:00:04.003 --> 00:00:06.008
so out of the box, Spring Batch provides

5
00:00:06.008 --> 00:00:10.001
the FlatFileItemWriter implementation

6
00:00:10.001 --> 00:00:12.004
that allows us to write job output

7
00:00:12.004 --> 00:00:14.007
to a flat-file.

8
00:00:14.007 --> 00:00:15.009
We're going to be building out

9
00:00:15.009 --> 00:00:20.004
a FlatFileItemWriter implementation within our job.

10
00:00:20.004 --> 00:00:23.005
It is going to receive data

11
00:00:23.005 --> 00:00:28.003
that is read from our current ItemReader,

12
00:00:28.003 --> 00:00:31.008
which is pulling information from the SHIPPED_ORDER table.

13
00:00:31.008 --> 00:00:34.002
And we're going to use the information

14
00:00:34.002 --> 00:00:36.009
that is read by this reader

15
00:00:36.009 --> 00:00:40.006
as the output for our FlatFileItemWriter.

16
00:00:40.006 --> 00:00:44.008
We'll write the output to a CSV file located

17
00:00:44.008 --> 00:00:46.006
on the file system.

18
00:00:46.006 --> 00:00:48.003
So to get started, the first thing

19
00:00:48.003 --> 00:00:49.004
that we need to do

20
00:00:49.004 --> 00:00:52.008
is modify our job configuration.

21
00:00:52.008 --> 00:00:56.005
Currently, we have this in line ItemWriter

22
00:00:56.005 --> 00:00:58.008
and we need to replace that

23
00:00:58.008 --> 00:01:01.002
with a different implementation.

24
00:01:01.002 --> 00:01:02.007
In this case, we're going

25
00:01:02.007 --> 00:01:05.003
to be using the FlatFileItemWriter.

26
00:01:05.003 --> 00:01:09.009
I'm just going to create a stub method named itemWriter

27
00:01:09.009 --> 00:01:12.001
and that's where we're going to build out

28
00:01:12.001 --> 00:01:15.002
that configuration so once we have the stub,

29
00:01:15.002 --> 00:01:17.009
just hit Control + one while you've hovering over it

30
00:01:17.009 --> 00:01:22.004
and then you can select the create method.

31
00:01:22.004 --> 00:01:25.007
And this is going to place the method within the class.

32
00:01:25.007 --> 00:01:29.002
I'm going to go ahead and pull that up within our class.

33
00:01:29.002 --> 00:01:31.007
That way we have some space to work.

34
00:01:31.007 --> 00:01:33.006
And the first thing we need to do

35
00:01:33.006 --> 00:01:36.002
is add the Bean annotation

36
00:01:36.002 --> 00:01:40.000
because our ItemWriter will be declared as a bean

37
00:01:40.000 --> 00:01:42.006
within our Spring IOC container.

38
00:01:42.006 --> 00:01:46.004
Then I'm going to make our ItemWriter public

39
00:01:46.004 --> 00:01:49.007
and then modify the generic type argument

40
00:01:49.007 --> 00:01:53.000
to just be of type Order.

41
00:01:53.000 --> 00:01:57.003
And at this point, we're ready to start the configuration

42
00:01:57.003 --> 00:02:00.007
of our flat-file ItemWriter.

43
00:02:00.007 --> 00:02:03.003
So within the body of this method,

44
00:02:03.003 --> 00:02:08.001
I'm going to create the FlatFileItemWriter object.

45
00:02:08.001 --> 00:02:11.005
It does accept a generic argument.

46
00:02:11.005 --> 00:02:13.009
In this case, because we're writing orders,

47
00:02:13.009 --> 00:02:18.002
I'm going to go ahead and add the Order type there

48
00:02:18.002 --> 00:02:21.005
and then I'm going to name this object itemWriter

49
00:02:21.005 --> 00:02:25.005
and we can use its new operator and constructor

50
00:02:25.005 --> 00:02:29.002
in order to create an instance of it.

51
00:02:29.002 --> 00:02:32.003
So when we write this output,

52
00:02:32.003 --> 00:02:36.000
it's going to go to a file on the file system

53
00:02:36.000 --> 00:02:39.006
and we can specify what file that will be

54
00:02:39.006 --> 00:02:44.000
by setting the setResource method on the itemWriter

55
00:02:44.000 --> 00:02:45.006
and in this case, we're going

56
00:02:45.006 --> 00:02:49.005
to use a new FileSystemResource.

57
00:02:49.005 --> 00:02:52.002
So we'll go ahead and use the constructor

58
00:02:52.002 --> 00:02:56.001
for that object to specify a path

59
00:02:56.001 --> 00:02:58.008
where we would like this output to be written.

60
00:02:58.008 --> 00:03:02.004
So I'm going to write this file to the data directory

61
00:03:02.004 --> 00:03:04.008
within the root of my file system

62
00:03:04.008 --> 00:03:07.001
and then I'm going to give it the name

63
00:03:07.001 --> 00:03:09.002
of the file I would like written.

64
00:03:09.002 --> 00:03:16.002
It's going to be shipped_orders_output.csv.

65
00:03:16.002 --> 00:03:19.003
And now we've configured our ItemWriter for where

66
00:03:19.003 --> 00:03:21.006
to write the output.

67
00:03:21.006 --> 00:03:22.009
The next thing we need to do

68
00:03:22.009 --> 00:03:26.002
is give the ItemWriter instructions

69
00:03:26.002 --> 00:03:28.007
for how to take a POJO

70
00:03:28.007 --> 00:03:33.007
and turn it into a line within our CSV file.

71
00:03:33.007 --> 00:03:38.008
To do that, we use a DelimitedLineAggregator

72
00:03:38.008 --> 00:03:41.000
so we can pull in that type

73
00:03:41.000 --> 00:03:45.001
which also requires us to specify a generic type

74
00:03:45.001 --> 00:03:47.002
of the type of object

75
00:03:47.002 --> 00:03:49.007
that we're going to be writing out.

76
00:03:49.007 --> 00:03:53.001
So we're going to be using an order POJO

77
00:03:53.001 --> 00:03:55.001
and that ultimately will be converted

78
00:03:55.001 --> 00:03:57.001
to a line in our CSV.

79
00:03:57.001 --> 00:04:01.004
I'm going to name our aggregator simply aggregator

80
00:04:01.004 --> 00:04:05.006
and then once again, we use the new operator

81
00:04:05.006 --> 00:04:06.009
and a constructor

82
00:04:06.009 --> 00:04:09.004
in order to create that object.

83
00:04:09.004 --> 00:04:11.006
So this is kind of the counterpart

84
00:04:11.006 --> 00:04:13.006
to the line mapper we saw

85
00:04:13.006 --> 00:04:16.002
when we were reading a CSV file.

86
00:04:16.002 --> 00:04:19.008
The line mapper was all about decomposing a line

87
00:04:19.008 --> 00:04:22.004
in a CSV and building a POJO

88
00:04:22.004 --> 00:04:26.003
whereas the DelimitedLineAggregator

89
00:04:26.003 --> 00:04:32.000
is going to extract the field values from a POJO

90
00:04:32.000 --> 00:04:34.001
and then aggregate them together

91
00:04:34.001 --> 00:04:37.006
into that line within the CSV

92
00:04:37.006 --> 00:04:41.002
and one of the pieces of information it's going to need

93
00:04:41.002 --> 00:04:43.001
in order to build that line

94
00:04:43.001 --> 00:04:45.006
is the delimiter we'd like to use.

95
00:04:45.006 --> 00:04:47.005
Since we're building a CSV,

96
00:04:47.005 --> 00:04:50.004
I'm just going to go ahead and specify a comma there.

97
00:04:50.004 --> 00:04:52.006
And then the next piece of configuration

98
00:04:52.006 --> 00:04:54.006
is a little bit more complex.

99
00:04:54.006 --> 00:05:00.000
We need to create an object of type BeanFieldExtractor

100
00:05:00.000 --> 00:05:02.006
and this object is going

101
00:05:02.006 --> 00:05:06.001
to be used to pull the values from the fields

102
00:05:06.001 --> 00:05:08.009
in our order POJO.

103
00:05:08.009 --> 00:05:13.004
Let's go ahead and we'll name this our fieldExtractor object

104
00:05:13.004 --> 00:05:16.005
and then once again, we use the constructor

105
00:05:16.005 --> 00:05:19.002
in order to instantiate it.

106
00:05:19.002 --> 00:05:23.009
Now, we need to supply a little bit of configuration here

107
00:05:23.009 --> 00:05:27.001
and you'll see within this object,

108
00:05:27.001 --> 00:05:30.001
there is the setNames method.

109
00:05:30.001 --> 00:05:36.004
So this method accepts a string containing the names

110
00:05:36.004 --> 00:05:39.001
of the fields on the POJO we would like

111
00:05:39.001 --> 00:05:41.007
to extract the values from.

112
00:05:41.007 --> 00:05:44.002
So within our class,

113
00:05:44.002 --> 00:05:47.005
I've actually added the names

114
00:05:47.005 --> 00:05:49.007
of those fields so if we take a look

115
00:05:49.007 --> 00:05:51.000
at the top of the class,

116
00:05:51.000 --> 00:05:53.009
here's a string array named names

117
00:05:53.009 --> 00:05:57.005
and within it, I've just added, as a string,

118
00:05:57.005 --> 00:06:02.006
the name of each field we have on the order POJO.

119
00:06:02.006 --> 00:06:08.004
And we can use that within our configuration.

120
00:06:08.004 --> 00:06:11.001
Okay, the next thing that we need to do

121
00:06:11.001 --> 00:06:14.001
is on the aggregator,

122
00:06:14.001 --> 00:06:17.008
we need to set our field extractor

123
00:06:17.008 --> 00:06:22.006
so we'll simply inject the fieldExtrator instance

124
00:06:22.006 --> 00:06:24.005
into that setter method

125
00:06:24.005 --> 00:06:27.001
and then on our itemWriter,

126
00:06:27.001 --> 00:06:31.008
we need to go ahead and set our LineAggregator

127
00:06:31.008 --> 00:06:34.008
and we can just pass in the aggregator

128
00:06:34.008 --> 00:06:36.004
that we created.

129
00:06:36.004 --> 00:06:40.000
And then in the final line of this method,

130
00:06:40.000 --> 00:06:43.007
we're going to return our itemWriter

131
00:06:43.007 --> 00:06:46.003
and that itemWriter will then be used

132
00:06:46.003 --> 00:06:48.008
within our chunk-based step

133
00:06:48.008 --> 00:06:52.008
in order to write that output to a CSV file.

134
00:06:52.008 --> 00:06:55.005
Okay, so everything is configured.

135
00:06:55.005 --> 00:06:57.009
Let's head over to the terminal

136
00:06:57.009 --> 00:07:00.005
and then we're simply going to kick off our job

137
00:07:00.005 --> 00:07:02.005
with the script.

138
00:07:02.005 --> 00:07:06.002
And once the project is built into a jar,

139
00:07:06.002 --> 00:07:09.001
our job will begin to execute

140
00:07:09.001 --> 00:07:13.009
and we should have our CSV file written to the file system.

141
00:07:13.009 --> 00:07:16.007
Okay, it looks like the job completed.

142
00:07:16.007 --> 00:07:20.000
Let's navigate over to that data directory

143
00:07:20.000 --> 00:07:25.008
and there we can see the shipped_orders_output.csv file.

144
00:07:25.008 --> 00:07:27.004
We can go ahead and open that up

145
00:07:27.004 --> 00:07:29.007
and take a look at it.

146
00:07:29.007 --> 00:07:31.007
And once the file loads,

147
00:07:31.007 --> 00:07:35.001
there we can see that all of the data

148
00:07:35.001 --> 00:07:37.008
within our table in the database

149
00:07:37.008 --> 00:07:40.008
was written by our chunk-based step

150
00:07:40.008 --> 00:07:44.005
and its itemWriter to this CSV file.

151
00:07:44.005 --> 00:07:46.003
So similar to item readers,

152
00:07:46.003 --> 00:07:50.002
there are many out-of-the-box item writers provided

153
00:07:50.002 --> 00:07:52.000
by Spring Batch.

154
00:07:52.000 --> 00:07:54.004
We just need to provide the instructions

155
00:07:54.004 --> 00:07:58.002
to those item writers on how to read our POJOs

156
00:07:58.002 --> 00:08:00.003
and write out the output.

157
00:08:00.003 --> 00:08:02.000
We're going to see a few more in action

158
00:08:02.000 --> 00:08:04.000
as we work through this chapter.

