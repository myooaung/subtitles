WEBVTT
1
00:00:00.005 --> 00:00:02.008
- [Instructor] At some point in a batch job,

2
00:00:02.008 --> 00:00:06.000
you may need to take control of batch processing

3
00:00:06.000 --> 00:00:08.003
and introduce your own logic.

4
00:00:08.003 --> 00:00:11.003
That's where listeners come into play.

5
00:00:11.003 --> 00:00:13.009
Listeners provide hooks into the flow

6
00:00:13.009 --> 00:00:16.004
of a job at various points that allow you

7
00:00:16.004 --> 00:00:19.003
to introduce additional batch processing logic

8
00:00:19.003 --> 00:00:21.009
for complex use cases.

9
00:00:21.009 --> 00:00:23.005
There are many listener interfaces

10
00:00:23.005 --> 00:00:26.006
within the framework at the job, step, chunk,

11
00:00:26.006 --> 00:00:29.004
and item levels of the domain.

12
00:00:29.004 --> 00:00:32.006
Listener implementations are created by implementing

13
00:00:32.006 --> 00:00:36.003
an interface, or adding annotations to a POJO,

14
00:00:36.003 --> 00:00:38.000
then registering the listener

15
00:00:38.000 --> 00:00:41.000
at the appropriate configuration level.

16
00:00:41.000 --> 00:00:43.001
Registered listeners are notified

17
00:00:43.001 --> 00:00:45.002
by the framework at key points.

18
00:00:45.002 --> 00:00:48.007
For example, AfterStep completion.

19
00:00:48.007 --> 00:00:51.009
Once notified, job processing logic found

20
00:00:51.009 --> 00:00:54.001
in the listener is invoked to perform

21
00:00:54.001 --> 00:00:56.009
its particular logic at the appropriate point

22
00:00:56.009 --> 00:01:00.005
in the batch execution flow.

23
00:01:00.005 --> 00:01:03.004
So let's say you need to introduce some header information

24
00:01:03.004 --> 00:01:06.004
to a file created within a job.

25
00:01:06.004 --> 00:01:09.004
After the step writes the file,

26
00:01:09.004 --> 00:01:11.008
you may introduce a listener to add

27
00:01:11.008 --> 00:01:16.001
the header information once the step is executed.

28
00:01:16.001 --> 00:01:18.004
Here is a list of the available listeners

29
00:01:18.004 --> 00:01:20.006
within the framework that can be applied

30
00:01:20.006 --> 00:01:23.001
at various levels of the framework according

31
00:01:23.001 --> 00:01:24.008
to your requirements.

32
00:01:24.008 --> 00:01:27.002
You can see that a listener exists for almost

33
00:01:27.002 --> 00:01:30.002
every object within the batch domain,

34
00:01:30.002 --> 00:01:33.003
allowing logic to be introduced typically before

35
00:01:33.003 --> 00:01:37.000
and after these components execute.

36
00:01:37.000 --> 00:01:40.005
Soon, we'll be working with a step execution listener

37
00:01:40.005 --> 00:01:43.000
that allows us to interject logic before

38
00:01:43.000 --> 00:01:45.008
or after a step executes.

39
00:01:45.008 --> 00:01:50.000
The step execution listener interface defines

40
00:01:50.000 --> 00:01:53.002
a beforeStep method that is invoked prior

41
00:01:53.002 --> 00:01:58.000
to step execution and an afterStep method

42
00:01:58.000 --> 00:02:02.000
that is invoked once the step has been completed.

43
00:02:02.000 --> 00:02:05.003
Let's move on and get hands-on with this listener,

44
00:02:05.003 --> 00:02:07.000
so you can see it in action.

