WEBVTT
1
00:00:00.005 --> 00:00:01.005
- [Instructor] In this lesson,

2
00:00:01.005 --> 00:00:04.001
we'll add a StepExecutionListener

3
00:00:04.001 --> 00:00:06.000
to a new Spring batch job

4
00:00:06.000 --> 00:00:08.000
that mimics the real-life task

5
00:00:08.000 --> 00:00:10.008
of preparing flowers for delivery.

6
00:00:10.008 --> 00:00:13.003
If we look at the logic for this job,

7
00:00:13.003 --> 00:00:16.008
we're going to first start out by selecting flowers.

8
00:00:16.008 --> 00:00:19.004
If the flowers do not have thorns,

9
00:00:19.004 --> 00:00:21.009
we're going to proceed to arrange them.

10
00:00:21.009 --> 00:00:23.009
However, if they do have thorns,

11
00:00:23.009 --> 00:00:25.003
we need to remove them

12
00:00:25.003 --> 00:00:28.008
and then begin the arrangement of our flowers.

13
00:00:28.008 --> 00:00:31.008
The StepExecutionListener that we'll be creating

14
00:00:31.008 --> 00:00:35.003
is going to determine whether or not the flowers

15
00:00:35.003 --> 00:00:38.007
have thorns so that we can appropriately proceed

16
00:00:38.007 --> 00:00:41.000
to the next step.

17
00:00:41.000 --> 00:00:45.004
So if we look at our linkedin.batch application class,

18
00:00:45.004 --> 00:00:49.002
you'll see that I have placed the configuration

19
00:00:49.002 --> 00:00:52.000
for our new job within it.

20
00:00:52.000 --> 00:00:55.006
So here we see the prepareFlowers job

21
00:00:55.006 --> 00:00:58.008
and currently, it's configured to run two steps,

22
00:00:58.008 --> 00:01:00.008
the selectFlowersStep

23
00:01:00.008 --> 00:01:03.007
and the arrangeFlowersStep.

24
00:01:03.007 --> 00:01:07.009
You'll see that the steps are defined higher up

25
00:01:07.009 --> 00:01:09.008
within our class

26
00:01:09.008 --> 00:01:14.005
and then you'll also see that we have the removeThornsStep.

27
00:01:14.005 --> 00:01:19.001
This is the step that we're going to conditionally invoke

28
00:01:19.001 --> 00:01:22.006
pending the results of the x status provided

29
00:01:22.006 --> 00:01:25.003
by our StepExecutionListener.

30
00:01:25.003 --> 00:01:26.009
Now let's go ahead and start building

31
00:01:26.009 --> 00:01:29.002
that StepExecutionListener.

32
00:01:29.002 --> 00:01:31.008
We're just going to create a new class

33
00:01:31.008 --> 00:01:34.002
and we're going to name this class

34
00:01:34.002 --> 00:01:41.003
the FlowersSelectionStepExecutionListener.

35
00:01:41.003 --> 00:01:44.001
This class is going to implement

36
00:01:44.001 --> 00:01:47.006
the StepExecutionListener interface

37
00:01:47.006 --> 00:01:49.007
so we'll go ahead and select that

38
00:01:49.007 --> 00:01:52.002
and then build our new class.

39
00:01:52.002 --> 00:01:53.008
And the first thing you'll notice

40
00:01:53.008 --> 00:01:55.009
is that we have two methods

41
00:01:55.009 --> 00:01:58.005
that are added to our class

42
00:01:58.005 --> 00:02:00.003
and these are the methods defined

43
00:02:00.003 --> 00:02:03.004
on the StepExecutionListener interface.

44
00:02:03.004 --> 00:02:06.000
The fist is the beforeStep method.

45
00:02:06.000 --> 00:02:09.007
This is going to execute before our step

46
00:02:09.007 --> 00:02:11.006
is actually executed

47
00:02:11.006 --> 00:02:13.004
and we're not going to be using this

48
00:02:13.004 --> 00:02:16.001
but I will add some console output

49
00:02:16.001 --> 00:02:19.000
so that we can see where it falls

50
00:02:19.000 --> 00:02:22.002
within the batch lifecycle.

51
00:02:22.002 --> 00:02:25.006
So we'll just say Executing before step logic

52
00:02:25.006 --> 00:02:29.009
and then we're going to do the same in the afterStep method.

53
00:02:29.009 --> 00:02:33.005
This executes after our step has executed

54
00:02:33.005 --> 00:02:36.004
so we'll just change our output here

55
00:02:36.004 --> 00:02:39.007
to Executing after step logic

56
00:02:39.007 --> 00:02:42.003
and within the body of this method,

57
00:02:42.003 --> 00:02:46.005
we're going to actually grab a job parameter

58
00:02:46.005 --> 00:02:49.001
that is supplied to our job

59
00:02:49.001 --> 00:02:52.004
and it's going to be the type of flowers

60
00:02:52.004 --> 00:02:55.004
that we are going to be working with.

61
00:02:55.004 --> 00:02:57.007
So we can grab the job parameters

62
00:02:57.007 --> 00:03:00.004
from the stepExecution

63
00:03:00.004 --> 00:03:02.007
and using the getString method,

64
00:03:02.007 --> 00:03:06.002
we can supply the name of the job parameter.

65
00:03:06.002 --> 00:03:08.004
In this case, it's going to be type

66
00:03:08.004 --> 00:03:11.006
and that represents the type of flowers

67
00:03:11.006 --> 00:03:14.001
that we're going to be working with.

68
00:03:14.001 --> 00:03:17.002
Now, depending upon the type of flowers,

69
00:03:17.002 --> 00:03:22.008
we're going to return a particular exit status.

70
00:03:22.008 --> 00:03:24.008
So we're just going to do a simple check

71
00:03:24.008 --> 00:03:26.002
to see if these are roses

72
00:03:26.002 --> 00:03:28.009
because we know they have thorns.

73
00:03:28.009 --> 00:03:31.004
And if they are roses,

74
00:03:31.004 --> 00:03:35.006
we will use the ExitStatus constructor

75
00:03:35.006 --> 00:03:38.007
and create a custom ExitStatus.

76
00:03:38.007 --> 00:03:44.000
So in this case, it's going to be TRIM REQUIRED.

77
00:03:44.000 --> 00:03:46.007
And then if they're not roses,

78
00:03:46.007 --> 00:03:50.002
we're going to build another ExitStatus

79
00:03:50.002 --> 00:03:55.001
is going to be NO TRIM REQUIRED.

80
00:03:55.001 --> 00:03:57.006
So it's pretty simple.

81
00:03:57.006 --> 00:03:58.006
And at this point,

82
00:03:58.006 --> 00:04:04.004
we have our logic for our StepExecutionListener in place.

83
00:04:04.004 --> 00:04:08.009
Now, let's head back over to our configuration

84
00:04:08.009 --> 00:04:10.001
and at this point,

85
00:04:10.001 --> 00:04:15.005
we need to go ahead and register that StepExecutionListener

86
00:04:15.005 --> 00:04:17.002
as a bean.

87
00:04:17.002 --> 00:04:19.008
So I'm just going to add a bean

88
00:04:19.008 --> 00:04:23.001
and we'll declare that this bean

89
00:04:23.001 --> 00:04:28.003
is of type StepExecutionListener.

90
00:04:28.003 --> 00:04:32.007
And then we'll give that ExecutionListener a name.

91
00:04:32.007 --> 00:04:35.008
In this case, I'm going to go ahead

92
00:04:35.008 --> 00:04:45.002
and I'll name this the selectFlowerListener

93
00:04:45.002 --> 00:04:47.005
and then within the body of that method,

94
00:04:47.005 --> 00:04:48.007
all we need to do

95
00:04:48.007 --> 00:04:54.003
is return our FlowerSelectionStepExecutionListener.

96
00:04:54.003 --> 00:04:59.004
Okay, so we have the StepExecutionListener registered

97
00:04:59.004 --> 00:05:00.008
as a bean.

98
00:05:00.008 --> 00:05:02.009
Now we need to inject it

99
00:05:02.009 --> 00:05:06.003
into the configuration of our step.

100
00:05:06.003 --> 00:05:09.004
So we'll go to the selectFlowersStep

101
00:05:09.004 --> 00:05:11.003
where we can register this

102
00:05:11.003 --> 00:05:12.006
and all we need to do

103
00:05:12.006 --> 00:05:16.005
is before we build this step,

104
00:05:16.005 --> 00:05:20.000
we're going to use the listener method

105
00:05:20.000 --> 00:05:24.007
and here we can supply our new listener

106
00:05:24.007 --> 00:05:27.008
which is the selectFlowerListener.

107
00:05:27.008 --> 00:05:29.007
That will cause the listener

108
00:05:29.007 --> 00:05:32.004
and its methods to be executed

109
00:05:32.004 --> 00:05:35.004
before and after our step.

110
00:05:35.004 --> 00:05:37.004
Now, the final thing that we need to do,

111
00:05:37.004 --> 00:05:41.000
you'll remember that we are returning

112
00:05:41.000 --> 00:05:43.005
that conditional ExitStatus

113
00:05:43.005 --> 00:05:45.005
and that's going to allow us

114
00:05:45.005 --> 00:05:48.005
to conditionally execute our step

115
00:05:48.005 --> 00:05:50.008
that removes the thorns

116
00:05:50.008 --> 00:05:53.006
from our particular flowers.

117
00:05:53.006 --> 00:05:59.000
So after we perform the selectFlowersStep,

118
00:05:59.000 --> 00:06:02.009
we want to check the ExitStatus

119
00:06:02.009 --> 00:06:05.007
to see if it is TRIM REQUIRED

120
00:06:05.007 --> 00:06:09.001
and if it is, we're going to proceed

121
00:06:09.001 --> 00:06:11.006
to the removeThornsStep.

122
00:06:11.006 --> 00:06:14.007
So let's go ahead and add that configuration.

123
00:06:14.007 --> 00:06:17.001
And the next thing that we'll need to do

124
00:06:17.001 --> 00:06:21.002
is specify what we'll do if these flowers

125
00:06:21.002 --> 00:06:23.002
do not have thorns.

126
00:06:23.002 --> 00:06:26.002
So from the selectFlowersStep,

127
00:06:26.002 --> 00:06:31.002
we're going to look at the ExitStatus

128
00:06:31.002 --> 00:06:34.008
and if it's NO TRIM REQUIRED,

129
00:06:34.008 --> 00:06:38.009
then we're going to proceed directly

130
00:06:38.009 --> 00:06:42.007
to our arrangeFlowersStep.

131
00:06:42.007 --> 00:06:46.002
Now, we're also going to be arranging flowers

132
00:06:46.002 --> 00:06:48.008
in the event we remove the thorns.

133
00:06:48.008 --> 00:06:52.006
It's just going to occur at a different point in time.

134
00:06:52.006 --> 00:06:54.002
So we'll want to go ahead

135
00:06:54.002 --> 00:06:56.002
and include that step as well

136
00:06:56.002 --> 00:06:58.009
within our configuration.

137
00:06:58.009 --> 00:07:03.005
And then finally, we don't want to arrange the flowers twice

138
00:07:03.005 --> 00:07:06.001
so we'll go ahead and remove that step

139
00:07:06.001 --> 00:07:09.009
and then we need to specify the end method

140
00:07:09.009 --> 00:07:13.009
and at this point, our job is configured.

141
00:07:13.009 --> 00:07:16.004
Okay, so let's save everything

142
00:07:16.004 --> 00:07:18.009
and we'll head over to the console

143
00:07:18.009 --> 00:07:22.004
and you'll notice within the directory

144
00:07:22.004 --> 00:07:26.006
for this project, I've included another script

145
00:07:26.006 --> 00:07:29.003
and this script, if we take a look at this,

146
00:07:29.003 --> 00:07:32.003
it's going to run our flowers job

147
00:07:32.003 --> 00:07:36.007
and that job takes in our type parameter.

148
00:07:36.007 --> 00:07:40.008
So there we can see that we can pass a parameter

149
00:07:40.008 --> 00:07:43.009
into the script and it will ultimately be passed

150
00:07:43.009 --> 00:07:46.009
as a job parameter to our job.

151
00:07:46.009 --> 00:07:53.000
So I'm going to go ahead and clear this.

152
00:07:53.000 --> 00:07:58.000
And at this point, we're now able to run our flowers_job

153
00:07:58.000 --> 00:08:01.005
and I'm going to run it with roses

154
00:08:01.005 --> 00:08:08.006
and we should see our removeThornsStep invoked.

155
00:08:08.006 --> 00:08:13.007
Okay, so here we can see that we gathered the flowers

156
00:08:13.007 --> 00:08:15.004
for the order.

157
00:08:15.004 --> 00:08:18.004
You can then see our StepExecutionListener

158
00:08:18.004 --> 00:08:22.005
had its after step logic invoked.

159
00:08:22.005 --> 00:08:26.007
We can also see the before step logic was invoked as well

160
00:08:26.007 --> 00:08:28.003
and it was determined

161
00:08:28.003 --> 00:08:31.009
that we need to remove the thorns from the roses

162
00:08:31.009 --> 00:08:34.008
and then we proceeded to arrange the flowers

163
00:08:34.008 --> 00:08:36.008
for the order.

164
00:08:36.008 --> 00:08:38.005
So that concludes our lesson

165
00:08:38.005 --> 00:08:42.007
and we saw how to introduce a StepExecutionListener

166
00:08:42.007 --> 00:08:46.004
that is capable of executing logic both before

167
00:08:46.004 --> 00:08:48.000
and after a step.

