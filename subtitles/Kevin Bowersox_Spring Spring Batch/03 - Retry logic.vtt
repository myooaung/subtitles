WEBVTT
1
00:00:00.005 --> 00:00:02.007
- [Instructor] When processing chunks of data

2
00:00:02.007 --> 00:00:06.002
in a batch job, issues can arise that are just a matter

3
00:00:06.002 --> 00:00:08.009
of bad timing and they can be resolved

4
00:00:08.009 --> 00:00:12.005
by simply reattempting to process an item.

5
00:00:12.005 --> 00:00:16.009
For these types of issues, Spring Batch's retry capability

6
00:00:16.009 --> 00:00:19.003
can prevent bad timing from turning

7
00:00:19.003 --> 00:00:21.008
into late night phone calls.

8
00:00:21.008 --> 00:00:24.004
Let's imagine we kick off a job

9
00:00:24.004 --> 00:00:27.009
and that we must call a web service to process items

10
00:00:27.009 --> 00:00:29.008
within our data set.

11
00:00:29.008 --> 00:00:33.002
During processing of the second item in the chunk,

12
00:00:33.002 --> 00:00:37.006
the web service has an intermittent issue.

13
00:00:37.006 --> 00:00:39.002
It's not a hard failure.

14
00:00:39.002 --> 00:00:42.002
It could just be small network blip.

15
00:00:42.002 --> 00:00:46.001
If we have configured Spring Batch's retry capabilities,

16
00:00:46.001 --> 00:00:50.004
the framework will reattempt processing of the item.

17
00:00:50.004 --> 00:00:53.006
This time when we attempt to process the item,

18
00:00:53.006 --> 00:00:56.002
the web service has become available.

19
00:00:56.002 --> 00:00:58.003
So, when we reattempt processing,

20
00:00:58.003 --> 00:01:00.005
the item will complete successfully

21
00:01:00.005 --> 00:01:04.003
without any intervention by a batch job operator.

22
00:01:04.003 --> 00:01:06.008
Our job then can successfully complete

23
00:01:06.008 --> 00:01:10.001
without anyone losing sleep.

24
00:01:10.001 --> 00:01:12.000
Let's move onto the next lesson

25
00:01:12.000 --> 00:01:14.004
and I'll show you how to configure this feature

26
00:01:14.004 --> 00:01:16.000
within a Spring Batch job.

