WEBVTT
1
00:00:00.005 --> 00:00:02.004
- [Instructor] Writing output to a database

2
00:00:02.004 --> 00:00:05.002
is another common requirement for batch jobs

3
00:00:05.002 --> 00:00:07.006
that is supported by spring batch.

4
00:00:07.006 --> 00:00:10.000
Spring batch provides several components

5
00:00:10.000 --> 00:00:12.002
for writing information from a batch job

6
00:00:12.002 --> 00:00:13.005
to a database.

7
00:00:13.005 --> 00:00:15.008
Supporting technologies such as Hibernate,

8
00:00:15.008 --> 00:00:19.001
Jdbc, Mongo, and JPA.

9
00:00:19.001 --> 00:00:19.009
In this lesson,

10
00:00:19.009 --> 00:00:22.002
we'll learn how to use JDC support

11
00:00:22.002 --> 00:00:25.002
by using the JDBC batch item writer

12
00:00:25.002 --> 00:00:29.007
to write information to our relational database.

13
00:00:29.007 --> 00:00:33.002
To get started using the JDBC batch item writer

14
00:00:33.002 --> 00:00:38.005
we're going to remove the FlatFileItemWriter configuration

15
00:00:38.005 --> 00:00:42.002
within our item writer method.

16
00:00:42.002 --> 00:00:45.001
Once we take out that configuration,

17
00:00:45.001 --> 00:00:47.005
we can start to configure

18
00:00:47.005 --> 00:00:50.001
our new item writer implementation

19
00:00:50.001 --> 00:00:52.006
the JDBC batch item writer.

20
00:00:52.006 --> 00:00:53.006
To do that,

21
00:00:53.006 --> 00:00:58.009
we can use a JdbcBatchItemWriterBuilder.

22
00:00:58.009 --> 00:01:02.008
The jdbcBatchItemWriterBuilder does require us

23
00:01:02.008 --> 00:01:06.000
to supply a generic argument

24
00:01:06.000 --> 00:01:10.001
which is the type of the pojo we would like to write.

25
00:01:10.001 --> 00:01:13.004
From there, we can then begin the configuration

26
00:01:13.004 --> 00:01:15.002
of our new item writer.

27
00:01:15.002 --> 00:01:18.008
Since we are writing to a relational database,

28
00:01:18.008 --> 00:01:21.005
we'll need to supply a data source

29
00:01:21.005 --> 00:01:25.005
that allows us to connect to the database.

30
00:01:25.005 --> 00:01:29.002
Now, we've already created a data source field

31
00:01:29.002 --> 00:01:30.006
within this class

32
00:01:30.006 --> 00:01:32.004
when we created our item reader,

33
00:01:32.004 --> 00:01:34.004
so we can just go ahead and leverage

34
00:01:34.004 --> 00:01:36.008
that same dependency.

35
00:01:36.008 --> 00:01:38.008
The next thing that we'll need to do

36
00:01:38.008 --> 00:01:41.004
is specify the SQL statement

37
00:01:41.004 --> 00:01:45.007
that will be used to insert into our table.

38
00:01:45.007 --> 00:01:46.008
So I'm going to go ahead

39
00:01:46.008 --> 00:01:49.009
and add the SQL method

40
00:01:49.009 --> 00:01:52.002
and then within our class

41
00:01:52.002 --> 00:01:56.006
I've created a string INSERT_ORDER_SQL.

42
00:01:56.006 --> 00:01:59.000
Let's go take a look at that.

43
00:01:59.000 --> 00:02:01.009
So here is the SQL statement

44
00:02:01.009 --> 00:02:07.000
that can insert into our shipped order output table.

45
00:02:07.000 --> 00:02:10.007
So, we're simply going to read the data

46
00:02:10.007 --> 00:02:13.000
from our shipped order table

47
00:02:13.000 --> 00:02:16.007
and then we're going to write that same data

48
00:02:16.007 --> 00:02:20.006
into a table named shipped order output.

49
00:02:20.006 --> 00:02:23.008
They have the same table structure,

50
00:02:23.008 --> 00:02:26.002
and here we see that insert statement.

51
00:02:26.002 --> 00:02:28.006
So we just list all of the columns

52
00:02:28.006 --> 00:02:31.006
that we're going to insert values into

53
00:02:31.006 --> 00:02:35.004
and then we're using the different parameters

54
00:02:35.004 --> 00:02:37.001
which are ordinal based

55
00:02:37.001 --> 00:02:38.008
within that statement.

56
00:02:38.008 --> 00:02:41.003
So ultimately, this insert statement

57
00:02:41.003 --> 00:02:42.005
is going to be used

58
00:02:42.005 --> 00:02:45.000
to construct a prepared statement

59
00:02:45.000 --> 00:02:48.004
and then we're going to set each of these parameters

60
00:02:48.004 --> 00:02:51.000
by their ordinal position.

61
00:02:51.000 --> 00:02:55.007
Now, in order to facilitate setting those parameters,

62
00:02:55.007 --> 00:02:59.007
we need to provide some additional configuration

63
00:02:59.007 --> 00:03:01.005
to our item writer.

64
00:03:01.005 --> 00:03:02.006
And to do that,

65
00:03:02.006 --> 00:03:06.007
we use an itemPreparedStatementSetter.

66
00:03:06.007 --> 00:03:09.007
So we're going to use that method

67
00:03:09.007 --> 00:03:11.002
on the builder.

68
00:03:11.002 --> 00:03:13.002
And then we're going to create

69
00:03:13.002 --> 00:03:21.007
a new OrderItemPreparedStatementSetter.

70
00:03:21.007 --> 00:03:24.008
And we're just going to stub in that constructor

71
00:03:24.008 --> 00:03:28.004
and then we can call the build method

72
00:03:28.004 --> 00:03:30.000
on our builder

73
00:03:30.000 --> 00:03:32.002
and the final thing we need to do

74
00:03:32.002 --> 00:03:35.002
is just provide this implementation

75
00:03:35.002 --> 00:03:38.000
of a prepared statement setter.

76
00:03:38.000 --> 00:03:39.008
So hover over the error,

77
00:03:39.008 --> 00:03:43.004
hit Ctrl + 1, and then you can create

78
00:03:43.004 --> 00:03:45.003
a new class

79
00:03:45.003 --> 00:03:47.004
and that will bring up this dialogue.

80
00:03:47.004 --> 00:03:50.001
And it will specify the interface

81
00:03:50.001 --> 00:03:53.004
that we need to implement.

82
00:03:53.004 --> 00:03:55.000
And once we hit finish,

83
00:03:55.000 --> 00:03:56.007
here we see that interface.

84
00:03:56.007 --> 00:03:59.005
It's the itemPreparedStatementSetter.

85
00:03:59.005 --> 00:04:02.000
Has a generic type of order.

86
00:04:02.000 --> 00:04:06.000
And then it provides this set values method.

87
00:04:06.000 --> 00:04:09.000
And within the setValues method,

88
00:04:09.000 --> 00:04:12.005
we're going to basically set the different parameters

89
00:04:12.005 --> 00:04:14.008
on the PreparedStatement

90
00:04:14.008 --> 00:04:20.002
using the order that is passed into the setValues method

91
00:04:20.002 --> 00:04:22.000
as an argument.

92
00:04:22.000 --> 00:04:23.004
So, if you've ever worked

93
00:04:23.004 --> 00:04:25.003
with a PreparedStatement,

94
00:04:25.003 --> 00:04:28.007
it has different set methods on it

95
00:04:28.007 --> 00:04:31.004
that correspond with the type.

96
00:04:31.004 --> 00:04:35.004
So here if we want to set the first parameter

97
00:04:35.004 --> 00:04:38.004
within our insert statement,

98
00:04:38.004 --> 00:04:43.001
we can supply the order ID.

99
00:04:43.001 --> 00:04:46.004
And then we just need to work down through

100
00:04:46.004 --> 00:04:49.000
all of the different parameters

101
00:04:49.000 --> 00:04:51.006
within that insert statement.

102
00:04:51.006 --> 00:04:54.009
So the second parameter was the first name

103
00:04:54.009 --> 00:04:56.006
of the individual,

104
00:04:56.006 --> 00:05:00.006
and then the third parameter was the last name

105
00:05:00.006 --> 00:05:03.007
of the customer.

106
00:05:03.007 --> 00:05:08.007
So we can get that from the order.

107
00:05:08.007 --> 00:05:11.007
The next parameter that we're going to set

108
00:05:11.007 --> 00:05:17.006
is the email.

109
00:05:17.006 --> 00:05:21.004
After that, the fifth parameter

110
00:05:21.004 --> 00:05:28.006
is going to be the item ID.

111
00:05:28.006 --> 00:05:30.003
The sixth parameter

112
00:05:30.003 --> 00:05:32.001
that we're going to set

113
00:05:32.001 --> 00:05:36.009
is going to be the item name.

114
00:05:36.009 --> 00:05:38.006
And then the next parameter

115
00:05:38.006 --> 00:05:41.007
is going to be a big decimal,

116
00:05:41.007 --> 00:05:44.002
and it's the seventh parameter,

117
00:05:44.002 --> 00:05:48.003
and it's going to be the cost of the item.

118
00:05:48.003 --> 00:05:51.000
And then the last parameter we're going to set

119
00:05:51.000 --> 00:05:52.005
is the ship date.

120
00:05:52.005 --> 00:05:56.002
So we need to use the set date method.

121
00:05:56.002 --> 00:05:58.004
It's the eighth parameter.

122
00:05:58.004 --> 00:06:01.007
And then anytime we're working with a PreparedStatement

123
00:06:01.007 --> 00:06:02.009
and a date,

124
00:06:02.009 --> 00:06:07.006
we need to use the Java.SQL.Date type,

125
00:06:07.006 --> 00:06:09.006
and that's going to require us

126
00:06:09.006 --> 00:06:14.009
to convert our ship date to milliseconds,

127
00:06:14.009 --> 00:06:17.000
so we'll get the time.

128
00:06:17.000 --> 00:06:19.001
And then we want to be very careful

129
00:06:19.001 --> 00:06:22.001
when we import this final type.

130
00:06:22.001 --> 00:06:26.004
So you'll want to check Java.SQL

131
00:06:26.004 --> 00:06:28.009
in that dialogue box.

132
00:06:28.009 --> 00:06:32.001
And that completes the implementation

133
00:06:32.001 --> 00:06:35.004
of our itemPreparedStatementSetter.

134
00:06:35.004 --> 00:06:39.003
So that's basically setting all the parameters

135
00:06:39.003 --> 00:06:41.007
on the PreparedStatement.

136
00:06:41.007 --> 00:06:44.007
Now, if we head back to our job,

137
00:06:44.007 --> 00:06:47.008
we can go ahead and save our configuration

138
00:06:47.008 --> 00:06:51.000
and there's one missing piece in this puzzle.

139
00:06:51.000 --> 00:06:53.005
The shipped order output table

140
00:06:53.005 --> 00:06:56.000
currently is not on our database.

141
00:06:56.000 --> 00:06:57.001
What we can do

142
00:06:57.001 --> 00:07:00.002
is head over to the MySQL workbench

143
00:07:00.002 --> 00:07:04.002
and here we see the shipped_ordertable.

144
00:07:04.002 --> 00:07:08.000
And because we know they have the same structure

145
00:07:08.000 --> 00:07:10.001
we can go ahead and right click on that

146
00:07:10.001 --> 00:07:13.006
and copy the create statement to the clipboard,

147
00:07:13.006 --> 00:07:16.007
and then we'll just paste it into an editor

148
00:07:16.007 --> 00:07:20.006
and we'll just modify the table name

149
00:07:20.006 --> 00:07:24.002
within the create table statement.

150
00:07:24.002 --> 00:07:29.008
So now the name will be shipped_order_output.

151
00:07:29.008 --> 00:07:30.006
We'll go ahead,

152
00:07:30.006 --> 00:07:32.008
we can run that statement,

153
00:07:32.008 --> 00:07:34.006
create our table,

154
00:07:34.006 --> 00:07:37.003
and now we're set up to run the job.

155
00:07:37.003 --> 00:07:41.001
So I'm going to head over to our terminal,

156
00:07:41.001 --> 00:07:43.005
we'll kick off our script,

157
00:07:43.005 --> 00:07:47.005
and this will build our project,

158
00:07:47.005 --> 00:07:49.000
and then once built,

159
00:07:49.000 --> 00:07:50.004
it's going to run our job

160
00:07:50.004 --> 00:07:55.007
with our new item writer, the JdbcBatchItemWriter.

161
00:07:55.007 --> 00:08:00.003
And that's going to cause all of the input

162
00:08:00.003 --> 00:08:01.008
read into our job

163
00:08:01.008 --> 00:08:04.003
to be written into our new table.

164
00:08:04.003 --> 00:08:06.003
So let's just refresh.

165
00:08:06.003 --> 00:08:09.007
There's our shipped order output table.

166
00:08:09.007 --> 00:08:12.004
And if we query that,

167
00:08:12.004 --> 00:08:13.003
we're going to see

168
00:08:13.003 --> 00:08:17.006
that the data was indeed written into that table

169
00:08:17.006 --> 00:08:21.007
by our JdbcBatchItemWriter.

170
00:08:21.007 --> 00:08:22.007
So out of the box,

171
00:08:22.007 --> 00:08:25.004
the JdbcBatchItemWriter provides us

172
00:08:25.004 --> 00:08:26.005
with a convenient way

173
00:08:26.005 --> 00:08:28.000
to write data from a job

174
00:08:28.000 --> 00:08:30.002
to a relational database.

175
00:08:30.002 --> 00:08:32.004
The rights are managed by spring batch

176
00:08:32.004 --> 00:08:35.001
and executed within a transaction.

177
00:08:35.001 --> 00:08:37.005
This provides us with some fault tolerance

178
00:08:37.005 --> 00:08:39.006
in the case of a failure.

179
00:08:39.006 --> 00:08:43.000
One of the weaknesses of this approach

180
00:08:43.000 --> 00:08:46.001
is the fact that we're using the

181
00:08:46.001 --> 00:08:50.002
ordinal position when we set these parameters.

182
00:08:50.002 --> 00:08:53.001
It's very easy to get the order off

183
00:08:53.001 --> 00:08:56.001
and to incorrectly set the parameters

184
00:08:56.001 --> 00:08:58.002
within that insert statement.

185
00:08:58.002 --> 00:08:59.009
We'll take a look at some ways

186
00:08:59.009 --> 00:09:01.007
that we can be a little bit more resilient

187
00:09:01.007 --> 00:09:03.000
in upcoming lessons.

