WEBVTT
1
00:00:00.005 --> 00:00:02.006
- [Instructor] Batch jobs commonly process,

2
00:00:02.006 --> 00:00:05.008
or produce flat files, as part of their logic,

3
00:00:05.008 --> 00:00:08.005
so it's no surprise we find support for them

4
00:00:08.005 --> 00:00:10.006
out of the box in Spring Batch.

5
00:00:10.006 --> 00:00:13.004
In this lesson we'll read a flat file

6
00:00:13.004 --> 00:00:15.004
delimited in CSV format

7
00:00:15.004 --> 00:00:19.000
using Spring Batch's flat file item reader.

8
00:00:19.000 --> 00:00:21.008
We'll build a job that processes orders

9
00:00:21.008 --> 00:00:25.000
for a fictional company, H Plus Sport.

10
00:00:25.000 --> 00:00:30.003
You'll find the shipped_orders.csv file

11
00:00:30.003 --> 00:00:34.004
within a data directory included within the working files

12
00:00:34.004 --> 00:00:36.000
for the course.

13
00:00:36.000 --> 00:00:39.005
If we take a look at this CSV file

14
00:00:39.005 --> 00:00:42.005
we'll see that it contains orders

15
00:00:42.005 --> 00:00:45.006
for the H Plus Sport company.

16
00:00:45.006 --> 00:00:48.009
H Plus Sport sells different items

17
00:00:48.009 --> 00:00:52.003
related to sports and nutrition

18
00:00:52.003 --> 00:00:56.004
that customers are able to purchase on their online store.

19
00:00:56.004 --> 00:00:59.009
In our CSV file we've depicted these different orders.

20
00:00:59.009 --> 00:01:01.006
A couple things to note.

21
00:01:01.006 --> 00:01:05.004
First, you'll notice this CSV file has headers

22
00:01:05.004 --> 00:01:10.002
that correspond with the data found in each column.

23
00:01:10.002 --> 00:01:13.008
And then within the rows of the file

24
00:01:13.008 --> 00:01:16.009
we find the different orders with the associated data

25
00:01:16.009 --> 00:01:18.003
for the column.

26
00:01:18.003 --> 00:01:20.002
This is what we're going to be reading in

27
00:01:20.002 --> 00:01:23.000
using our flat file item reader.

28
00:01:23.000 --> 00:01:24.004
The job we're going to build

29
00:01:24.004 --> 00:01:26.005
will support their order processing

30
00:01:26.005 --> 00:01:28.004
and shipping operations

31
00:01:28.004 --> 00:01:32.008
and we'll be working to build out those batch jobs

32
00:01:32.008 --> 00:01:35.003
throughout the course from this point forward

33
00:01:35.003 --> 00:01:38.000
as part of a small project.

34
00:01:38.000 --> 00:01:41.005
Now if we navigate over to Eclipse,

35
00:01:41.005 --> 00:01:44.009
one thing you'll notice is we've added a pojo

36
00:01:44.009 --> 00:01:48.003
that corresponds with the data we just looked at.

37
00:01:48.003 --> 00:01:52.001
So we just have all the fields on this order class

38
00:01:52.001 --> 00:01:54.007
and then we have getters and setters

39
00:01:54.007 --> 00:01:59.007
that correspond with those fields as well.

40
00:01:59.007 --> 00:02:03.002
Now let's shift over and start building out our job.

41
00:02:03.002 --> 00:02:06.009
So within our job we're currently set up

42
00:02:06.009 --> 00:02:09.009
to process strings.

43
00:02:09.009 --> 00:02:11.004
For the order processing

44
00:02:11.004 --> 00:02:14.000
we're going to be performing for H Plus Sport

45
00:02:14.000 --> 00:02:16.002
we want to be working with orders.

46
00:02:16.002 --> 00:02:18.005
So let's go ahead

47
00:02:18.005 --> 00:02:22.006
and we're going to change our chunk to work with an order

48
00:02:22.006 --> 00:02:26.007
and we'll change both the input and the output

49
00:02:26.007 --> 00:02:29.005
to be of type order

50
00:02:29.005 --> 00:02:33.000
and that's going to cause a few issues.

51
00:02:33.000 --> 00:02:38.000
First our ItemWriter is not setup to write orders.

52
00:02:38.000 --> 00:02:43.002
So let's change its generic type over to order

53
00:02:43.002 --> 00:02:47.004
so that we can handle the order itself.

54
00:02:47.004 --> 00:02:48.006
Okay.

55
00:02:48.006 --> 00:02:53.002
Now that we've setup the item writer to handle orders

56
00:02:53.002 --> 00:02:57.002
we need to start work on our item reader.

57
00:02:57.002 --> 00:03:01.003
So the item reader currently is working with a string

58
00:03:01.003 --> 00:03:03.006
so we're going to modify that

59
00:03:03.006 --> 00:03:06.006
in order to read orders.

60
00:03:06.006 --> 00:03:09.007
We'll no longer be using our simple item reader

61
00:03:09.007 --> 00:03:12.006
and we're going to work to build out

62
00:03:12.006 --> 00:03:15.009
a flat file item reader.

63
00:03:15.009 --> 00:03:19.005
So we're going to create a new flat file item reader

64
00:03:19.005 --> 00:03:23.008
that has a generic type of order.

65
00:03:23.008 --> 00:03:29.001
We'll go ahead and name this variable itemReader

66
00:03:29.001 --> 00:03:31.005
and then we'll use the new operator

67
00:03:31.005 --> 00:03:34.008
and the FlatFileItemReader constructor

68
00:03:34.008 --> 00:03:38.000
in order to create an instance of it.

69
00:03:38.000 --> 00:03:41.000
Now we can start with the configuration

70
00:03:41.000 --> 00:03:43.007
of our flat file item reader.

71
00:03:43.007 --> 00:03:45.009
So the first thing we're going to do

72
00:03:45.009 --> 00:03:51.004
is on the item reader we're going to tell it to skip

73
00:03:51.004 --> 00:03:52.007
the first line

74
00:03:52.007 --> 00:03:55.006
because it contains the headers

75
00:03:55.006 --> 00:03:59.006
as opposed to the actual data that we'd like to process,

76
00:03:59.006 --> 00:04:03.001
so we can use the setLinesToSkip method

77
00:04:03.001 --> 00:04:05.009
in order to skip those headers.

78
00:04:05.009 --> 00:04:09.005
The next thing we need to do is tell our itemReader

79
00:04:09.005 --> 00:04:12.005
where to find its data.

80
00:04:12.005 --> 00:04:16.009
And we can do that by using the setResource method.

81
00:04:16.009 --> 00:04:22.005
And we're going to point to that csv file on our filesystem.

82
00:04:22.005 --> 00:04:28.007
Now I have placed my file within the root of the filesystem

83
00:04:28.007 --> 00:04:31.000
in a directory called data.

84
00:04:31.000 --> 00:04:34.006
So you'll need to use the corresponding path

85
00:04:34.006 --> 00:04:39.000
for this next command for where you place the file.

86
00:04:39.000 --> 00:04:40.007
In order to reference the file

87
00:04:40.007 --> 00:04:44.008
we'll create a FileSystemresource

88
00:04:44.008 --> 00:04:49.003
and then we just need to provide the path to the file.

89
00:04:49.003 --> 00:04:53.006
So I mentioned I was within the root in a data directory.

90
00:04:53.006 --> 00:05:00.002
And then the name of the file is shipped_orders.csv.

91
00:05:00.002 --> 00:05:02.006
Okay, so it knows how to find the data.

92
00:05:02.006 --> 00:05:05.003
Now we need to instruct the flat file item reader

93
00:05:05.003 --> 00:05:09.002
on how to process that data as it reads it.

94
00:05:09.002 --> 00:05:11.001
To help us with that

95
00:05:11.001 --> 00:05:16.004
we use a DefaultLineMapper object.

96
00:05:16.004 --> 00:05:20.002
So we're going to declare a new object

97
00:05:20.002 --> 00:05:23.000
of type DefaultLineMapper

98
00:05:23.000 --> 00:05:25.004
and I'm just going to name it lineMapper.

99
00:05:25.004 --> 00:05:28.002
And then we use the new operator

100
00:05:28.002 --> 00:05:30.006
and the constructor to create it.

101
00:05:30.006 --> 00:05:32.002
Using the line mapper

102
00:05:32.002 --> 00:05:35.004
we can instruct the flat file item reader

103
00:05:35.004 --> 00:05:38.008
on how to parse out the different lines of data

104
00:05:38.008 --> 00:05:40.004
within the CSV

105
00:05:40.004 --> 00:05:43.005
and then how to take those parsed tokens

106
00:05:43.005 --> 00:05:47.007
and map them to our order pojo.

107
00:05:47.007 --> 00:05:49.008
So we're going to work on that first part

108
00:05:49.008 --> 00:05:52.001
of how to parse them out.

109
00:05:52.001 --> 00:05:55.003
And to do that we're going to use another object

110
00:05:55.003 --> 00:06:00.008
and it's a DelimitedLineTokenizer.

111
00:06:00.008 --> 00:06:04.005
So by default the DelimitedLineTokenizer

112
00:06:04.005 --> 00:06:10.006
will break the line based upon a comma as a delimiter.

113
00:06:10.006 --> 00:06:12.002
Since we're using a CSV,

114
00:06:12.002 --> 00:06:15.006
we don't need to provide any additional configuration

115
00:06:15.006 --> 00:06:18.007
and we can just create the object

116
00:06:18.007 --> 00:06:21.007
using the new operator and the constructor.

117
00:06:21.007 --> 00:06:23.009
The next thing that we'll need to do

118
00:06:23.009 --> 00:06:28.001
is tell the tokenizer the name of the columns

119
00:06:28.001 --> 00:06:31.006
found within our csv file.

120
00:06:31.006 --> 00:06:36.002
And we can do that using the setNames method.

121
00:06:36.002 --> 00:06:39.003
Now this accepts an array of strings

122
00:06:39.003 --> 00:06:43.004
that correspond with the header columns

123
00:06:43.004 --> 00:06:45.007
to make life easier on us

124
00:06:45.007 --> 00:06:49.000
I've created that string array already.

125
00:06:49.000 --> 00:06:50.009
So if we take a look

126
00:06:50.009 --> 00:06:54.008
you'll notice there is a tokens string array

127
00:06:54.008 --> 00:06:56.002
at the top of the class

128
00:06:56.002 --> 00:07:00.007
that contains the name of each of the column headers

129
00:07:00.007 --> 00:07:02.009
found within our CSV file.

130
00:07:02.009 --> 00:07:08.002
So we'll simply pass that string array into the tokenizer

131
00:07:08.002 --> 00:07:12.003
and it will know how to split the different lines

132
00:07:12.003 --> 00:07:13.008
within our csv

133
00:07:13.008 --> 00:07:19.002
and it will know which position within the csv file

134
00:07:19.002 --> 00:07:22.002
corresponds with the different headers.

135
00:07:22.002 --> 00:07:24.006
Okay, the next thing we need to do

136
00:07:24.006 --> 00:07:29.005
is set the line tokenizer on our line mapper.

137
00:07:29.005 --> 00:07:32.007
So we simply pass in our newly constructed

138
00:07:32.007 --> 00:07:34.004
delimited line tokenizer

139
00:07:34.004 --> 00:07:36.004
to the line mapper.

140
00:07:36.004 --> 00:07:40.007
The next thing we need to do is instruct our line mapper

141
00:07:40.007 --> 00:07:44.003
on how to create an order object

142
00:07:44.003 --> 00:07:50.000
using the tokens parsed by the DelimitedLineTokenizer.

143
00:07:50.000 --> 00:07:56.005
So we're going to set another field on the lineMapper

144
00:07:56.005 --> 00:08:00.004
and this is going to be the FieldSetMapper.

145
00:08:00.004 --> 00:08:04.003
And from here I'm just going to stub in a constructor

146
00:08:04.003 --> 00:08:07.009
for a new object we're going to create

147
00:08:07.009 --> 00:08:11.007
which will be of type FieldSetMapper.

148
00:08:11.007 --> 00:08:14.005
So we'll just leave that in place for now

149
00:08:14.005 --> 00:08:20.002
and then we're going to set the line mapper

150
00:08:20.002 --> 00:08:22.002
on our itemReader.

151
00:08:22.002 --> 00:08:26.003
And we can do that by using the setLineMapper method

152
00:08:26.003 --> 00:08:28.009
and passing in our lineMapper.

153
00:08:28.009 --> 00:08:34.000
And then we need to return our itemReader from this method.

154
00:08:34.000 --> 00:08:37.001
Okay, so everything's almost in place.

155
00:08:37.001 --> 00:08:40.007
We just need to create our fieldSetMapper.

156
00:08:40.007 --> 00:08:44.008
So I'm just going to hover over the stub constructor,

157
00:08:44.008 --> 00:08:47.000
hit control + one,

158
00:08:47.000 --> 00:08:50.005
and then I'm going to create a new class.

159
00:08:50.005 --> 00:08:54.004
And then we can just go ahead and hit finish

160
00:08:54.004 --> 00:08:57.002
and this will generate a class

161
00:08:57.002 --> 00:09:01.002
that implements the FieldSetMapper interface.

162
00:09:01.002 --> 00:09:06.002
The FieldSetMapper is going to have one method,

163
00:09:06.002 --> 00:09:08.000
mapFieldSet,

164
00:09:08.000 --> 00:09:12.002
and it's going to receive the field sets that were parsed

165
00:09:12.002 --> 00:09:14.003
from our csv file.

166
00:09:14.003 --> 00:09:18.000
And then all we need to do is use that field set

167
00:09:18.000 --> 00:09:20.008
to create a new order object.

168
00:09:20.008 --> 00:09:23.001
So once we've instantiated an order

169
00:09:23.001 --> 00:09:26.008
we'll just go down through all the set methods

170
00:09:26.008 --> 00:09:33.002
and retrieve the corresponding field from the field set

171
00:09:33.002 --> 00:09:35.006
using one of the read methods.

172
00:09:35.006 --> 00:09:39.002
So you'll notice we have the readLong method

173
00:09:39.002 --> 00:09:42.005
that we can use to read our order_id.

174
00:09:42.005 --> 00:09:47.009
And then we're going to just proceed to the next field

175
00:09:47.009 --> 00:09:49.004
on our order to set.

176
00:09:49.004 --> 00:09:52.000
In this case we're going to set the cost.

177
00:09:52.000 --> 00:09:56.008
And the fieldSet also has a readBigDecimal method

178
00:09:56.008 --> 00:10:00.008
so we can go ahead and read the cost from the fieldSet.

179
00:10:00.008 --> 00:10:05.002
And the next field we'll set is the email.

180
00:10:05.002 --> 00:10:09.002
And using the readString method

181
00:10:09.002 --> 00:10:14.001
we can go ahead and read the email from our fieldSet.

182
00:10:14.001 --> 00:10:16.006
And then we just have a few more fields

183
00:10:16.006 --> 00:10:17.008
that we need to set.

184
00:10:17.008 --> 00:10:20.001
So we get the first name of the customer

185
00:10:20.001 --> 00:10:25.003
which is going to be a string.

186
00:10:25.003 --> 00:10:30.004
We'll also get the last name of the customer

187
00:10:30.004 --> 00:10:35.007
which is also going to be a string.

188
00:10:35.007 --> 00:10:39.003
Then we'll set the item ID

189
00:10:39.003 --> 00:10:46.001
which will read as a string from the fieldSet.

190
00:10:46.001 --> 00:10:49.001
We'll also get the item name

191
00:10:49.001 --> 00:10:53.008
and set that on our order object.

192
00:10:53.008 --> 00:10:58.004
We can read that as a string as well.

193
00:10:58.004 --> 00:11:03.006
And then finally we're going to set the ship date

194
00:11:03.006 --> 00:11:08.002
on our order that's also found within our fieldSet

195
00:11:08.002 --> 00:11:11.005
using the readDate method.

196
00:11:11.005 --> 00:11:16.002
And we just need to specify the name of that column

197
00:11:16.002 --> 00:11:18.009
as ship_date.

198
00:11:18.009 --> 00:11:24.009
And then from there we just return the order.

199
00:11:24.009 --> 00:11:29.000
Okay, so you can see the basics of the fieldSet mapper.

200
00:11:29.000 --> 00:11:32.005
We're going to get all the fields from the csv

201
00:11:32.005 --> 00:11:35.006
that were parsed out as part of this field set

202
00:11:35.006 --> 00:11:39.001
and then we just grab the corresponding field

203
00:11:39.001 --> 00:11:43.002
from the field set and set it on our order pojo.

204
00:11:43.002 --> 00:11:48.001
Ultimately we end up constructing an order instance

205
00:11:48.001 --> 00:11:53.001
that will be mapped to the row in the csv file.

206
00:11:53.001 --> 00:11:56.009
At this point we're just going to head over to the terminal

207
00:11:56.009 --> 00:11:59.007
and you'll remember that I've placed a script

208
00:11:59.007 --> 00:12:04.003
to run the job within the directory for the project

209
00:12:04.003 --> 00:12:09.000
and we'll just go ahead and execute that.

210
00:12:09.000 --> 00:12:12.005
Okay, there you can see we're processing a lot of data

211
00:12:12.005 --> 00:12:16.002
and our job completed successfully.

212
00:12:16.002 --> 00:12:22.004
So in this lesson we were able to read data from a csv file

213
00:12:22.004 --> 00:12:24.009
using a flat file item reader.

214
00:12:24.009 --> 00:12:27.006
And this is one of the out of the box item readers

215
00:12:27.006 --> 00:12:29.006
provided by the framework.

216
00:12:29.006 --> 00:12:32.002
It's very important because csv files

217
00:12:32.002 --> 00:12:35.006
are typically used within batch processing.

218
00:12:35.006 --> 00:12:38.004
While there's a little bit of configuration

219
00:12:38.004 --> 00:12:40.005
within our flat file item reader

220
00:12:40.005 --> 00:12:42.007
that might be kind of intimidating

221
00:12:42.007 --> 00:12:45.009
it's a lot easier than writing out all the code

222
00:12:45.009 --> 00:12:50.000
to parse the csv file on your own for a batch process.

