WEBVTT
1
00:00:00.005 --> 00:00:02.004
- [Instructor] The majority of the work required

2
00:00:02.004 --> 00:00:04.003
to create a spring batch job,

3
00:00:04.003 --> 00:00:09.001
is defining how jobs move from one step to another step.

4
00:00:09.001 --> 00:00:11.008
This concept is known as flow,

5
00:00:11.008 --> 00:00:13.008
and it is important to understand

6
00:00:13.008 --> 00:00:17.004
in order to address batch processing requirements.

7
00:00:17.004 --> 00:00:20.009
In simple jobs, execution flows sequentially

8
00:00:20.009 --> 00:00:22.008
from one step to another,

9
00:00:22.008 --> 00:00:26.001
as we have seen so far in our delivery job.

10
00:00:26.001 --> 00:00:30.002
We simply execute one step then the next step,

11
00:00:30.002 --> 00:00:34.004
repeating this pattern until the job completes.

12
00:00:34.004 --> 00:00:36.008
Sequential execution is achieved

13
00:00:36.008 --> 00:00:41.005
using the next transition within our job configuration.

14
00:00:41.005 --> 00:00:44.004
This transition allows us to specify

15
00:00:44.004 --> 00:00:48.001
the next step to execute upon the successful completion

16
00:00:48.001 --> 00:00:49.006
of a step.

17
00:00:49.006 --> 00:00:54.001
More complex jobs may require a conditional flow

18
00:00:54.001 --> 00:00:57.009
where the flow of the job may execute a different step,

19
00:00:57.009 --> 00:01:01.002
depending upon the result of a previous step.

20
00:01:01.002 --> 00:01:03.006
Here we see a segment of a job

21
00:01:03.006 --> 00:01:09.002
that is configured to execute Step3 ,if Step1 is successful.

22
00:01:09.002 --> 00:01:14.004
If Step1 is not successful, we'll execute Step2.

23
00:01:14.004 --> 00:01:17.002
To support this, Spring Batch provides

24
00:01:17.002 --> 00:01:21.000
the transitions on, to, and from.

25
00:01:21.000 --> 00:01:23.000
These transitions can be used

26
00:01:23.000 --> 00:01:24.009
to conditionally define the flow

27
00:01:24.009 --> 00:01:27.005
from one step to another.

28
00:01:27.005 --> 00:01:31.001
The most important of these is the on transition,

29
00:01:31.001 --> 00:01:34.003
it allows us to specify a pattern

30
00:01:34.003 --> 00:01:38.005
that if matched by the exit status of a step,

31
00:01:38.005 --> 00:01:42.006
will cause the job execution to proceed

32
00:01:42.006 --> 00:01:47.007
to the next step specified within the step configuration.

33
00:01:47.007 --> 00:01:50.008
So here we see that after Step1,

34
00:01:50.008 --> 00:01:56.000
we sue the on method to check the pattern of the exit status

35
00:01:56.000 --> 00:01:58.007
and see if it matches failed.

36
00:01:58.007 --> 00:02:01.003
If it does, we move to Step2,

37
00:02:01.003 --> 00:02:04.008
otherwise, we'll go from Step1,

38
00:02:04.008 --> 00:02:07.005
take the exit status, and compare it to

39
00:02:07.005 --> 00:02:10.005
the special pattern, asterisks.

40
00:02:10.005 --> 00:02:13.005
This pattern basically is a catch-all,

41
00:02:13.005 --> 00:02:15.008
so anything aside from failed

42
00:02:15.008 --> 00:02:19.001
will cause our job to move to Step3.

43
00:02:19.001 --> 00:02:21.006
So as we watch this job execute,

44
00:02:21.006 --> 00:02:27.001
we see Step1 is successful, and because Step1 is successful,

45
00:02:27.001 --> 00:02:30.006
that will cause us to match the asterisks pattern

46
00:02:30.006 --> 00:02:33.008
specified in the on transition.

47
00:02:33.008 --> 00:02:38.005
And that means that Step3 will be executed next.

48
00:02:38.005 --> 00:02:40.001
Now if we look at the inverse,

49
00:02:40.001 --> 00:02:43.001
let's say Step1 were to fail,

50
00:02:43.001 --> 00:02:47.004
that's going to cause our job flow

51
00:02:47.004 --> 00:02:52.005
to transition to Step2, because we're going to return failed

52
00:02:52.005 --> 00:02:56.003
as an exit status, and then that will cause

53
00:02:56.003 --> 00:03:00.003
JobExecution to proceed to Step2.

54
00:03:00.003 --> 00:03:02.002
So it's all about that pattern

55
00:03:02.002 --> 00:03:05.000
specified in the on transition

56
00:03:05.000 --> 00:03:10.004
and then the next step specified in the to following on.

57
00:03:10.004 --> 00:03:12.000
You can tell from this discussion

58
00:03:12.000 --> 00:03:14.009
that the statuses are very important,

59
00:03:14.009 --> 00:03:19.003
so let's talk a little bit more about them in depth.

60
00:03:19.003 --> 00:03:23.002
When a batch job executes, Spring Batch captures

61
00:03:23.002 --> 00:03:27.001
two statuses for the JobExecution

62
00:03:27.001 --> 00:03:30.000
and the StepExecution.

63
00:03:30.000 --> 00:03:32.007
The statuses are slightly similar

64
00:03:32.007 --> 00:03:35.008
and the differences between them is a little confusing.

65
00:03:35.008 --> 00:03:38.000
The first status we're going to discuss

66
00:03:38.000 --> 00:03:41.001
is the Batch Status.

67
00:03:41.001 --> 00:03:44.006
This status represents the overall status

68
00:03:44.006 --> 00:03:47.007
for the job or step execution.

69
00:03:47.007 --> 00:03:51.009
It is limited to an enumerated set of values.

70
00:03:51.009 --> 00:03:55.003
The second status is the Exit Status

71
00:03:55.003 --> 00:03:58.001
and when we're talking about conditional job flow,

72
00:03:58.001 --> 00:04:00.001
this is the important one.

73
00:04:00.001 --> 00:04:02.004
It represents a literal status

74
00:04:02.004 --> 00:04:07.004
that is returned from a JobExecution or a StepExecution.

75
00:04:07.004 --> 00:04:11.000
The Exit Status is the one that is used

76
00:04:11.000 --> 00:04:14.006
by our on transition for the pattern match.

77
00:04:14.006 --> 00:04:18.001
So when performing a conditional flow,

78
00:04:18.001 --> 00:04:22.004
the Exit Status will be consulted for that pattern match,

79
00:04:22.004 --> 00:04:27.009
which will ultimately determine the flow the job will take.

80
00:04:27.009 --> 00:04:30.000
Here you can see some of the most common

81
00:04:30.000 --> 00:04:33.006
BatchStatuses and ExitStatuses.

82
00:04:33.006 --> 00:04:38.000
BatchStatuses are fixed, they're specified in an enum,

83
00:04:38.000 --> 00:04:40.002
so the ones you see on the left

84
00:04:40.002 --> 00:04:44.002
are a fixed set of values and we cannot specify

85
00:04:44.002 --> 00:04:46.007
a custom BatchStatus.

86
00:04:46.007 --> 00:04:49.000
The Exit Status, on the other hand,

87
00:04:49.000 --> 00:04:51.008
uses literal values and we can define

88
00:04:51.008 --> 00:04:54.009
our own custom ExitStatuses.

89
00:04:54.009 --> 00:04:57.001
This will be important when we look at

90
00:04:57.001 --> 00:04:59.009
conditional flows moving forward.

91
00:04:59.009 --> 00:05:02.002
Over the next few lessons, we're going to see

92
00:05:02.002 --> 00:05:04.008
how to configure these conditional flows,

93
00:05:04.008 --> 00:05:08.005
and leverage that ExitStatus of a step execution

94
00:05:08.005 --> 00:05:11.000
to control the flow of a job.

