WEBVTT
1
00:00:00.005 --> 00:00:03.002
- [Instructor] Spring batch supports many schedulers,

2
00:00:03.002 --> 00:00:08.002
including an open source Java based scheduler named Quartz.

3
00:00:08.002 --> 00:00:12.003
Within Quartz, a scheduler is used to trigger a job.

4
00:00:12.003 --> 00:00:16.003
These concepts align well with those found in Spring Batch,

5
00:00:16.003 --> 00:00:18.009
making the two a great pair.

6
00:00:18.009 --> 00:00:20.007
Let's take a look at how to schedule

7
00:00:20.007 --> 00:00:23.000
a batch job with Quartz.

8
00:00:23.000 --> 00:00:25.005
When first getting started with Quartz

9
00:00:25.005 --> 00:00:28.005
you need to update your pom.xml file

10
00:00:28.005 --> 00:00:32.007
in order to include the dependencies for Quartz.

11
00:00:32.007 --> 00:00:36.005
I've already included this dependency within my pom.

12
00:00:36.005 --> 00:00:38.006
You'll notice that Spring Boot provides

13
00:00:38.006 --> 00:00:43.009
a spring-boot-starter-quartz dependency,

14
00:00:43.009 --> 00:00:47.004
which will apply many auto configurations for you

15
00:00:47.004 --> 00:00:50.002
to help you get up and running quickly.

16
00:00:50.002 --> 00:00:52.008
After updating your pom, the next thing

17
00:00:52.008 --> 00:00:57.003
that you'll need to do is have your application class

18
00:00:57.003 --> 00:01:02.000
extend a QuartzJobBean.

19
00:01:02.000 --> 00:01:07.002
Once we extend the QuartzJobBean we'll need to add

20
00:01:07.002 --> 00:01:11.002
some methods that are required by that class.

21
00:01:11.002 --> 00:01:14.005
So just hover over the marker, hit Control + one

22
00:01:14.005 --> 00:01:16.009
and add unimplemented methods.

23
00:01:16.009 --> 00:01:20.005
And then we'll scroll down to the bottom of our class

24
00:01:20.005 --> 00:01:24.003
and I'm just going to pull this up to the top of our class

25
00:01:24.003 --> 00:01:27.001
so we can apply our configuration there.

26
00:01:27.001 --> 00:01:30.000
So you'll notice that Quartz requires us

27
00:01:30.000 --> 00:01:34.007
to specify the execute internal method.

28
00:01:34.007 --> 00:01:37.007
This is where we're going to launch our job.

29
00:01:37.007 --> 00:01:40.007
Now in order to do that, we're going to have to

30
00:01:40.007 --> 00:01:44.003
auto increment some of our job parameters.

31
00:01:44.003 --> 00:01:50.001
And that means we'll need to auto wire in a JobExplorer.

32
00:01:50.001 --> 00:01:55.008
Now the JobExplorer is provided by Spring Batch it is not

33
00:01:55.008 --> 00:01:59.001
part of the Quartz dependencies.

34
00:01:59.001 --> 00:02:03.006
And once we have that JobExplorer we can begin work

35
00:02:03.006 --> 00:02:06.007
on our executeInternal method.

36
00:02:06.007 --> 00:02:10.002
So the first thing we'll do is start to build

37
00:02:10.002 --> 00:02:11.005
some job parameters.

38
00:02:11.005 --> 00:02:16.003
So I'm going to create an object of type JobParameters

39
00:02:16.003 --> 00:02:22.002
and then we'll use the JobParametersBuilder

40
00:02:22.002 --> 00:02:25.006
and within the JobParametersBuilder you'll see there

41
00:02:25.006 --> 00:02:29.003
is a constructor that accepts a jobExplorer.

42
00:02:29.003 --> 00:02:33.009
So we can pass our jobExplorer into that constructor

43
00:02:33.009 --> 00:02:38.006
and then we can invoke the get next job parameters

44
00:02:38.006 --> 00:02:42.008
and this is going to cause the job parameters

45
00:02:42.008 --> 00:02:44.009
to auto-increment.

46
00:02:44.009 --> 00:02:47.003
So let's go ahead and then pass in our job,

47
00:02:47.003 --> 00:02:50.001
which is a required argument for that method,

48
00:02:50.001 --> 00:02:54.000
and then we can call the toJobParameters method

49
00:02:54.000 --> 00:02:56.008
in order to build our JobParameters.

50
00:02:56.008 --> 00:03:01.004
Okay, so we have parameters and then we're just going to use

51
00:03:01.004 --> 00:03:05.001
our job launcher which we'll need to auto wire in

52
00:03:05.001 --> 00:03:06.006
to the class.

53
00:03:06.006 --> 00:03:14.008
So let's go ahead and auto wire that in

54
00:03:14.008 --> 00:03:18.003
and once again this is a Spring object

55
00:03:18.003 --> 00:03:21.001
that we're working with as opposed to Quartz.

56
00:03:21.001 --> 00:03:25.000
So using the jobLauncher we can then go ahead

57
00:03:25.000 --> 00:03:30.007
and run our job with the parameters that we've specified.

58
00:03:30.007 --> 00:03:35.007
Now we'll also need to catch the exceptions thrown

59
00:03:35.007 --> 00:03:37.003
from the job launcher.

60
00:03:37.003 --> 00:03:41.008
So let's go ahead and add our try catch block

61
00:03:41.008 --> 00:03:44.007
and that completes our configuration

62
00:03:44.007 --> 00:03:47.008
of the executeInternal method.

63
00:03:47.008 --> 00:03:52.008
Now we need to provide some of the Quartz dependencies.

64
00:03:52.008 --> 00:03:59.008
The first one that we're going to satisfy is the JobDetail.

65
00:03:59.008 --> 00:04:05.002
So we'll go ahead and declare a method named jobDetail

66
00:04:05.002 --> 00:04:08.004
that returns a jobDetail object.

67
00:04:08.004 --> 00:04:11.004
This is going to be a bean so we'll apply

68
00:04:11.004 --> 00:04:16.000
the Bean annotation and then within this method

69
00:04:16.000 --> 00:04:21.001
we're going to create a jobDetail which is a concept

70
00:04:21.001 --> 00:04:26.001
within Quartz and to create it we can use a jobBuilder.

71
00:04:26.001 --> 00:04:30.000
You'll notice that's the org.quartz.JobBuilder

72
00:04:30.000 --> 00:04:35.001
and this variant of the new job method allows us to specify

73
00:04:35.001 --> 00:04:37.009
a class that contains our job.

74
00:04:37.009 --> 00:04:40.001
Now in our case that's going to be

75
00:04:40.001 --> 00:04:44.004
our LinkedinBatchApplication class so let's go ahead,

76
00:04:44.004 --> 00:04:48.003
we'll pass the class to the new job method

77
00:04:48.003 --> 00:04:53.007
and then from there we're going to invoke the storeDurably

78
00:04:53.007 --> 00:04:57.005
method and this will cause information regarding our job

79
00:04:57.005 --> 00:05:00.009
to be retained and then we're just going to call

80
00:05:00.009 --> 00:05:03.005
the build method on the builder.

81
00:05:03.005 --> 00:05:08.004
So that configures our job detail bean and there's one other

82
00:05:08.004 --> 00:05:10.005
object we need to create.

83
00:05:10.005 --> 00:05:14.002
This will be a bean and it's going to be a trigger.

84
00:05:14.002 --> 00:05:19.005
So this is going to determine when we execute our job.

85
00:05:19.005 --> 00:05:24.005
So let's go ahead, we'll pull in the org.quarzt.Trigger

86
00:05:24.005 --> 00:05:30.005
and from here we can build a trigger that is based

87
00:05:30.005 --> 00:05:31.008
off of a schedule.

88
00:05:31.008 --> 00:05:36.006
So we have a simple schedule builder within Quartz

89
00:05:36.006 --> 00:05:40.007
and I'll just name this object scheduleBuilder

90
00:05:40.007 --> 00:05:45.007
and using the SimpleScheduleBuilder we can chain

91
00:05:45.007 --> 00:05:48.008
some calls together to build that schedule.

92
00:05:48.008 --> 00:05:53.003
So we specify the type of schedule as simpleSchedule

93
00:05:53.003 --> 00:05:58.001
and then we can use the with interval methods.

94
00:05:58.001 --> 00:06:00.008
So here you can see there are various intervals

95
00:06:00.008 --> 00:06:03.003
that we can use to kick off our job.

96
00:06:03.003 --> 00:06:06.008
And since we want to keep our time short here we're going

97
00:06:06.008 --> 00:06:10.002
to specify that the job kicks off every 30 seconds

98
00:06:10.002 --> 00:06:13.002
but you saw there were options for hourly as well

99
00:06:13.002 --> 00:06:18.004
as you can specify the number of minutes as an interval too.

100
00:06:18.004 --> 00:06:21.006
Okay, and then we're going to indicate that we would like

101
00:06:21.006 --> 00:06:25.002
this schedule to repeatForever.

102
00:06:25.002 --> 00:06:28.005
And now we can go ahead and build our trigger.

103
00:06:28.005 --> 00:06:33.006
So we can create a TriggerBuilder object and on it it has

104
00:06:33.006 --> 00:06:36.009
a newTrigger method and from here we can

105
00:06:36.009 --> 00:06:38.004
chain different calls.

106
00:06:38.004 --> 00:06:44.002
So our trigger is going to be for a job, so we'll specify

107
00:06:44.002 --> 00:06:50.003
the jobDetail within the forJob method

108
00:06:50.003 --> 00:06:53.006
and that's going to cause this trigger to apply

109
00:06:53.006 --> 00:06:58.009
to the job we've defined within our jobDetail method.

110
00:06:58.009 --> 00:07:02.005
The next thing we'll do is specify our schedule.

111
00:07:02.005 --> 00:07:06.009
So here we can go ahead and pass in our schedule builder

112
00:07:06.009 --> 00:07:10.002
and it will build the schedule for the job for us

113
00:07:10.002 --> 00:07:13.002
and then we just have to call the build method on this

114
00:07:13.002 --> 00:07:17.008
builder and then it's looking for this generic type,

115
00:07:17.008 --> 00:07:20.002
we can go ahead and remove that.

116
00:07:20.002 --> 00:07:23.004
Okay, so now we have a trigger.

117
00:07:23.004 --> 00:07:26.002
So there's just one last piece of configuration

118
00:07:26.002 --> 00:07:30.002
that needs to be put in place and that's adding an

119
00:07:30.002 --> 00:07:34.006
incrementer to our Spring batch configuration.

120
00:07:34.006 --> 00:07:39.003
Because we're going to be executing this job on a schedule

121
00:07:39.003 --> 00:07:42.002
we need to be able to automatically increment

122
00:07:42.002 --> 00:07:43.008
the job parameters.

123
00:07:43.008 --> 00:07:47.006
That way we get separate job instances with every run.

124
00:07:47.006 --> 00:07:51.008
To do that there's an incrementer method on the job builder

125
00:07:51.008 --> 00:07:55.007
and we can just pass in a RunIdIncrementer

126
00:07:55.007 --> 00:07:59.000
and that's essentially just going to create

127
00:07:59.000 --> 00:08:04.007
a new ID incremementing one every time we run the job.

128
00:08:04.007 --> 00:08:08.005
Okay, so everything's in place, let's head over

129
00:08:08.005 --> 00:08:12.006
to our console and we'll go ahead and run this job

130
00:08:12.006 --> 00:08:16.008
and we should see Quartz schedule the execution

131
00:08:16.008 --> 00:08:19.001
of our job every 30 seconds.

132
00:08:19.001 --> 00:08:25.008
That trigger will kick it off for us on that schedule.

133
00:08:25.008 --> 00:08:29.002
So we do see that Quartz kicked off the job initially

134
00:08:29.002 --> 00:08:34.009
and now we should see another run in 30 seconds.

135
00:08:34.009 --> 00:08:38.009
And there was our second run kicked off by Quartz.

136
00:08:38.009 --> 00:08:41.000
So this lesson showed us how to integrate

137
00:08:41.000 --> 00:08:43.006
the Quartz scheduler with Spring batch.

138
00:08:43.006 --> 00:08:46.004
It's just one of the many options you have

139
00:08:46.004 --> 00:08:48.008
when scheduling batch jobs.

140
00:08:48.008 --> 00:08:52.000
The creators of spring batch intentionally decided

141
00:08:52.000 --> 00:08:56.000
to make the scheduler agnostic so that any scheduling

142
00:08:56.000 --> 00:09:00.000
framework can be used to schedule jobs with Spring batch.

