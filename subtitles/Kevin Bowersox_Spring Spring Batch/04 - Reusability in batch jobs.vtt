WEBVTT
1
00:00:00.005 --> 00:00:02.003
- [Instructor] When building batch jobs,

2
00:00:02.003 --> 00:00:05.002
there may be consecutive sequences of steps

3
00:00:05.002 --> 00:00:08.004
that need to appear in every job you build.

4
00:00:08.004 --> 00:00:11.007
When this situation occurs it is important to remember

5
00:00:11.007 --> 00:00:14.008
the DRY principle, do not repeat yourself.

6
00:00:14.008 --> 00:00:17.002
To help us adhere to this principle,

7
00:00:17.002 --> 00:00:20.002
Spring Batch provides us with two strategies

8
00:00:20.002 --> 00:00:24.007
to reuse jobs and common step sequences.

9
00:00:24.007 --> 00:00:26.005
If we look at these two jobs,

10
00:00:26.005 --> 00:00:29.004
we can see they are not exactly the same,

11
00:00:29.004 --> 00:00:31.004
but there is some repetition in the flow

12
00:00:31.004 --> 00:00:38.000
because both jobs execute Step B and Step C in sequence.

13
00:00:38.000 --> 00:00:40.006
This part of the flow can be externalized

14
00:00:40.006 --> 00:00:43.006
into a separate flow and defined as a Bean

15
00:00:43.006 --> 00:00:46.008
using Spring Batch's Flow Builder.

16
00:00:46.008 --> 00:00:49.004
Once an external flow is constructed,

17
00:00:49.004 --> 00:00:53.002
both jobs can execute the flow using a flow step

18
00:00:53.002 --> 00:00:55.001
within their configuration

19
00:00:55.001 --> 00:01:00.004
allowing the same flow to be reused in multiple jobs.

20
00:01:00.004 --> 00:01:04.002
Using external flows is a better approach in this scenario

21
00:01:04.002 --> 00:01:06.009
because if Step B needed to change,

22
00:01:06.009 --> 00:01:09.004
the changes could be made in one place,

23
00:01:09.004 --> 00:01:14.003
however both jobs would incorporate the modified logic.

24
00:01:14.003 --> 00:01:17.006
Now let's take a look at another reusability strategy,

25
00:01:17.006 --> 00:01:19.003
nested jobs.

26
00:01:19.003 --> 00:01:21.005
If we inspect these jobs you will notice

27
00:01:21.005 --> 00:01:24.005
that the final two steps in Job One

28
00:01:24.005 --> 00:01:28.005
are the same steps found in Job Two.

29
00:01:28.005 --> 00:01:31.009
Instead of defining these steps in both places,

30
00:01:31.009 --> 00:01:34.007
it would be best just to execute Job Two

31
00:01:34.007 --> 00:01:38.001
after Step B in Job One.

32
00:01:38.001 --> 00:01:40.002
Using Spring Batch's job step,

33
00:01:40.002 --> 00:01:43.005
we can execute a job within a job,

34
00:01:43.005 --> 00:01:46.004
nesting one job inside of the other.

35
00:01:46.004 --> 00:01:48.006
This avoids repeating the same steps

36
00:01:48.006 --> 00:01:51.001
found in an existing job.

37
00:01:51.001 --> 00:01:54.004
So instead of executing Step C and D,

38
00:01:54.004 --> 00:01:58.002
we'll just use a job step after Step B in Job One

39
00:01:58.002 --> 00:02:00.004
to execute Job Two,

40
00:02:00.004 --> 00:02:03.002
then Job Two will run as a separate job

41
00:02:03.002 --> 00:02:06.007
once we have completed Step B in Job One.

42
00:02:06.007 --> 00:02:07.009
So these are two ways

43
00:02:07.009 --> 00:02:11.000
we can get some reuse within Spring Batch.

44
00:02:11.000 --> 00:02:13.000
Let's take a look at how to implement

45
00:02:13.000 --> 00:02:16.000
these strategies in the upcoming lessons.

