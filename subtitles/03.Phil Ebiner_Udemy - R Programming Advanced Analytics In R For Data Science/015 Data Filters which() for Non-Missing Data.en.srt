1
00:00:04,840 --> 00:00:08,380
Hello and welcome back to the advanced course on our programming.

2
00:00:08,610 --> 00:00:10,010
Hope enjoy the tutorial.

3
00:00:10,050 --> 00:00:17,130
And today we're starting to talk about how to filter out doorframes when they do contain missing values

4
00:00:17,130 --> 00:00:17,420
.

5
00:00:17,460 --> 00:00:26,430
So in this tutorial which will be a tutorial one of a two part series we're going to talk about how

6
00:00:26,430 --> 00:00:28,240
to filter non missing data.

7
00:00:28,260 --> 00:00:29,990
So records with non-missing done.

8
00:00:30,120 --> 00:00:32,630
So I'll give you an example of what we're talking about today.

9
00:00:33,030 --> 00:00:34,810
Let's have a look at our data set.

10
00:00:34,830 --> 00:00:37,070
And let's look at the top couple of rows.

11
00:00:37,070 --> 00:00:37,530
Right.

12
00:00:37,770 --> 00:00:44,940
And let's say I want to just single out this one row or every single row that has a revenue of nine

13
00:00:44,940 --> 00:00:48,770
million seven hundred forty six thousand two hundred seventy two dollars.

14
00:00:48,780 --> 00:00:52,080
Right so going to copy this value what would we normally do.

15
00:00:52,320 --> 00:00:58,360
We would go and say it would say fin and inside fin would obviously all this create the filter for us

16
00:00:58,360 --> 00:00:58,390
.

17
00:00:58,410 --> 00:01:04,890
Let's go step by step right so would say let's make some space and I'd say fin dollar sign.

18
00:01:04,890 --> 00:01:07,190
Revenue equals this right.

19
00:01:07,200 --> 00:01:14,010
So what does that give us and gives us a boolean vector where every road is checked and basically that

20
00:01:14,010 --> 00:01:15,540
row is picked out as true.

21
00:01:15,600 --> 00:01:23,850
So now if we apply this filter in our data frame we're safe in square brackets then the filter than

22
00:01:23,880 --> 00:01:24,840
common nothing.

23
00:01:24,840 --> 00:01:28,250
So basically that's our filter over their income and nothing.

24
00:01:28,290 --> 00:01:33,620
And if we run this you will see that that Roe has indeed been picked out.

25
00:01:33,630 --> 00:01:34,210
There it is.

26
00:01:34,350 --> 00:01:40,950
But also we have these random mysterious rows where did they come from.

27
00:01:41,070 --> 00:01:42,660
What are they doing here.

28
00:01:42,660 --> 00:01:47,880
They don't have IDs they don't have names they don't have industries anything everything is N.A. in

29
00:01:47,880 --> 00:01:48,470
these roles.

30
00:01:48,510 --> 00:01:52,280
What is going on here or why have they come up.

31
00:01:52,350 --> 00:01:59,130
So the reason why they have come up is because if you look at this filter that recreated it actually

32
00:01:59,130 --> 00:02:00,740
has an ace.

33
00:02:00,870 --> 00:02:06,400
So you can see and hear right and you can see one or here it's hiding.

34
00:02:06,420 --> 00:02:07,070
So there it is.

35
00:02:07,060 --> 00:02:08,310
So that's the end.

36
00:02:08,610 --> 00:02:10,840
That's an over there and that's a.

37
00:02:11,130 --> 00:02:18,130
So those days are coming from the fact that our daughter said actually contains values.

38
00:02:18,180 --> 00:02:24,270
If I scroll up when we're exploring here you do see that we have values that have or rows that have

39
00:02:24,330 --> 00:02:26,470
and they in the revenue column.

40
00:02:26,580 --> 00:02:30,510
And so what happens when you compare Feehan dollar revenue.

41
00:02:30,510 --> 00:02:30,750
Right.

42
00:02:30,750 --> 00:02:36,120
So when you we were basically taking this call on this whole column and we comparing it to this value

43
00:02:36,120 --> 00:02:36,390
.

44
00:02:36,390 --> 00:02:38,020
So there you go.

45
00:02:38,280 --> 00:02:40,960
So are goes through your Rosens like OK.

46
00:02:41,040 --> 00:02:42,510
MATSCH So that's true.

47
00:02:42,510 --> 00:02:43,600
And then you get to this one.

48
00:02:43,600 --> 00:02:48,930
So this won't be falls falls falls falls but when you get to this one what I would say is oh ok I'm

49
00:02:48,930 --> 00:02:53,910
comparing nine nine million 746 cells to 72 turn empty value.

50
00:02:53,910 --> 00:02:56,660
And remember what we did back then what did we do.

51
00:02:56,660 --> 00:02:57,800
We checked that.

52
00:02:57,840 --> 00:02:59,200
Does this equal turn.

53
00:02:59,580 --> 00:03:01,960
The answer is N.A. it's not true.

54
00:03:01,980 --> 00:03:05,130
It's not false so basically Our doesn't know what to do.

55
00:03:05,130 --> 00:03:09,790
Does adro past the filter or does Adderall not pass the filter because the value is empty.

56
00:03:09,840 --> 00:03:10,880
And that's why our.

57
00:03:10,880 --> 00:03:16,380
Tells you about it by supplying these rows it's telling you that hey look I found this row that you're

58
00:03:16,380 --> 00:03:17,520
looking for.

59
00:03:17,520 --> 00:03:20,110
The rest didn't pass the test except for two.

60
00:03:20,130 --> 00:03:24,990
They are two Rosing your daughter said that had a missing value in that specific column that you're

61
00:03:24,990 --> 00:03:26,130
looking for.

62
00:03:26,160 --> 00:03:28,980
And so that's why that's how I'm telling you about it.

63
00:03:28,980 --> 00:03:33,900
I'm just going to tell you that this whole there's a whole ENERO and a hole and a row again.

64
00:03:34,080 --> 00:03:38,880
So I know it might be a bit confusing like why doesn't our just bring up this whole row with it and

65
00:03:38,880 --> 00:03:40,230
say well let's think about it.

66
00:03:40,240 --> 00:03:45,930
If what the other option or could do is actually bring up all these values and write the correct values

67
00:03:45,930 --> 00:03:48,880
for that row and then keep it here and then correct values here.

68
00:03:48,900 --> 00:03:54,400
But that would imply that that Roe actually passed the test that retro matches our criteria.

69
00:03:54,600 --> 00:03:58,020
And that is one of the ones we're looking for which is not the case.

70
00:03:58,020 --> 00:04:04,720
And so in this way our is actually protecting us from making incorrect analysis or performing critical

71
00:04:04,750 --> 00:04:09,150
analysis because if we're not just looking at visually if we perform some calculation taking averages

72
00:04:09,150 --> 00:04:14,280
and so on for us we're taking the average of the number of employees for all of the rows that contain

73
00:04:14,280 --> 00:04:17,390
this desired revenue value.

74
00:04:17,400 --> 00:04:23,760
Then if it had brought up the correct values here for these roses as well then we would get an incorrect

75
00:04:23,790 --> 00:04:24,600
average.

76
00:04:24,630 --> 00:04:26,660
So that's just one of the examples.

77
00:04:26,700 --> 00:04:29,060
Basically our needs to tell you that there is.

78
00:04:29,190 --> 00:04:33,990
And they and this is the best way that they've come up of doing it.

79
00:04:33,990 --> 00:04:39,870
So just be conscious of that if you are filtering your data set which is like the standard way to filter

80
00:04:40,260 --> 00:04:41,030
a data frame.

81
00:04:41,070 --> 00:04:47,910
If you filter your data frame and then there aren't any values you'll get these mysterious rows come

82
00:04:47,910 --> 00:04:54,900
up which sometimes can cause cause issues or even make you feel a bit uncertain of where your code is

83
00:04:54,900 --> 00:04:55,680
correct.

84
00:04:56,040 --> 00:05:02,040
So what are we going to learn now is we going to learn how to deal with this how to actually correct

85
00:05:02,220 --> 00:05:04,180
filter our data set the correct way.

86
00:05:04,380 --> 00:05:08,850
So what are we going to do is simply say let's just bring that up.

87
00:05:08,850 --> 00:05:13,740
So once again we're looking for this value in our data said what we're going to do is instead of just

88
00:05:13,740 --> 00:05:15,570
performing that filter what insight.

89
00:05:15,560 --> 00:05:18,650
Here we go in to specify which operator.

90
00:05:18,840 --> 00:05:22,500
So once again let's probably start step by step.

91
00:05:22,500 --> 00:05:23,780
We're going to say which.

92
00:05:23,970 --> 00:05:29,080
And then we will put Which around these brackets and what does that do.

93
00:05:29,280 --> 00:05:35,290
Well basically let's run let's run this first and then let's run this whole.

94
00:05:35,700 --> 00:05:38,750
So as you can see we've got just one number here.

95
00:05:38,820 --> 00:05:44,820
Where is this number come from well what which does this look at the question mark which will be helpful

96
00:05:44,840 --> 00:05:45,180
.

97
00:05:45,510 --> 00:05:53,040
So let's zoom in here and it says which indices are true give the true indices of a logical object allowing

98
00:05:53,100 --> 00:05:59,900
for error indices and what that means is that which will look through your vector.

99
00:06:00,000 --> 00:06:06,080
So this is a vector and it looks through all of your vector and it only picks out the values the true

100
00:06:06,080 --> 00:06:06,480
value.

101
00:06:06,480 --> 00:06:07,620
So it doesn't.

102
00:06:07,620 --> 00:06:14,340
It ignores falses it ignores that ignores that picks out that ignores ignores ignores ignores and the

103
00:06:14,340 --> 00:06:17,370
beauty is that which also ignores and says so.

104
00:06:17,400 --> 00:06:22,440
It will completely get rid of all their names and all the forces and only return the true value and

105
00:06:22,430 --> 00:06:26,820
that way you're left with just the numbers representing the correct rows that you want.

106
00:06:26,970 --> 00:06:32,700
So basically now you're going to be parsing once we once had do this once I take this filter and pass

107
00:06:32,700 --> 00:06:36,230
it to our doorframe here and then comment nothing.

108
00:06:36,270 --> 00:06:40,170
So previously we used a logical vector to filter our data set.

109
00:06:40,170 --> 00:06:44,270
Now we're actually parsing the row numbers and as you remember you can do it.

110
00:06:44,280 --> 00:06:50,740
Either way you can say I want fin 3 4 and 5 right so obviously like that.

111
00:06:50,740 --> 00:06:55,500
That will give me the third fourth and fifth fros or I can say True true true false false false and

112
00:06:55,500 --> 00:06:57,880
so on to specify which rows exactly are 1.

113
00:06:57,870 --> 00:07:02,490
So here we are taking the second approach Preece we use the true false vector.

114
00:07:02,490 --> 00:07:08,610
Now we are overlaying the which operator on or a function on top of the true force vector which will

115
00:07:08,610 --> 00:07:12,930
now return us just the row numbers just a picture of row numbers.

116
00:07:12,930 --> 00:07:19,560
We need to pick out that correlate just to correspond just to the true values and then once we use that

117
00:07:19,860 --> 00:07:24,730
what we get is just that one row that we are after we fought those days.

118
00:07:24,900 --> 00:07:26,140
So let's have another example.

119
00:07:26,160 --> 00:07:27,540
One of those examples that say.

120
00:07:27,630 --> 00:07:30,650
Let's look at Fin or head Finn.

121
00:07:30,750 --> 00:07:31,580
Right.

122
00:07:31,830 --> 00:07:38,580
So here what I can see is that let's pick a let's say industry or no industry there'll be will be way

123
00:07:38,580 --> 00:07:40,780
too many let's say employees.

124
00:07:40,880 --> 00:07:46,120
I know that there's an end here and there is I think yeah there's this one and this whole dataset.

125
00:07:46,140 --> 00:07:53,730
So if I pick out all the companies that have 45 employees it's all good that so fin thin dollar employees

126
00:07:54,090 --> 00:07:58,550
equals forty five common nothing around that.

127
00:07:58,770 --> 00:08:03,180
You'll see that it's picked out indeed 45 45 45 45.

128
00:08:03,390 --> 00:08:09,450
Oh in fact there were two and a so there is one in a here you can see that there was a company with

129
00:08:09,480 --> 00:08:12,750
an AA in the employees and so are give you these values.

130
00:08:12,750 --> 00:08:17,190
And then there was another one and a one later further down in the data set.

131
00:08:17,190 --> 00:08:18,760
So that's what our does.

132
00:08:18,760 --> 00:08:21,720
Now how do I get rid of these emails and my final result.

133
00:08:21,720 --> 00:08:22,340
Very simple.

134
00:08:22,340 --> 00:08:26,950
I'm going to just copy this line and here I'm going to say which.

135
00:08:27,150 --> 00:08:30,620
So which of these values are actually exactly true.

136
00:08:30,930 --> 00:08:37,620
Run that as you can see just the employees just the companies with 45 employees and no NHS.

137
00:08:37,710 --> 00:08:38,280
So there we go.

138
00:08:38,280 --> 00:08:41,320
That's the power of the which operator.

139
00:08:41,430 --> 00:08:42,570
Sounds pretty funny right.

140
00:08:42,570 --> 00:08:44,140
The power of the witch.

141
00:08:44,280 --> 00:08:49,710
I hope you enjoy this Tauriel and will continue with this two part series in the next one.

142
00:08:49,710 --> 00:08:50,780
I look for you then.

143
00:08:50,850 --> 00:08:52,500
Until next time happy coding
