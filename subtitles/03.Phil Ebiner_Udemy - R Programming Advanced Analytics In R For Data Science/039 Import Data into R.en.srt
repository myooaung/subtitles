1
00:00:05,420 --> 00:00:05,950
Hello.

2
00:00:06,060 --> 00:00:10,920
Welcome back to that was of course on our program today we're kicking off the section on the up life

3
00:00:10,920 --> 00:00:15,870
having a function is going to be quite an interesting set of tutorials and quite challenging as well

4
00:00:15,870 --> 00:00:16,350
.

5
00:00:16,410 --> 00:00:22,620
And as always in this first tutorial we're going to upload the data set for the section into our studio

6
00:00:22,620 --> 00:00:23,070
.

7
00:00:23,070 --> 00:00:24,540
So let's jump into it.

8
00:00:24,540 --> 00:00:29,520
First thing we're going to do is we're going to check the working directory by running get w d and here

9
00:00:29,520 --> 00:00:35,690
you can see that even though the conjecture is the same as what we had in the previous sections actually

10
00:00:35,740 --> 00:00:40,630
the files for this section are located in a subfolder in this.

11
00:00:40,650 --> 00:00:44,580
I put them in a subfolder called weather daughter because there were quite a few files didn't want them

12
00:00:44,580 --> 00:00:45,460
to get mixed up.

13
00:00:45,720 --> 00:00:51,240
So this gives us an opportunity to practice how would we access that subfolder.

14
00:00:51,330 --> 00:01:00,190
Well one way is obviously to take this line of code and then just go set where can directory and just

15
00:01:00,210 --> 00:01:01,840
paste copy it again from here.

16
00:01:02,070 --> 00:01:07,350
So I just copied and pasted in here and then put in the folder name which is whether a daughter for

17
00:01:07,350 --> 00:01:08,010
me.

18
00:01:08,010 --> 00:01:08,400
Right.

19
00:01:08,430 --> 00:01:15,630
But this is quite a long approach and there's a shorter approach so it's just commented out and the

20
00:01:15,690 --> 00:01:19,760
shorter approach is to set the working directory thriller relative paths.

21
00:01:19,760 --> 00:01:28,260
So if you set a Daut and then a slash This means all the door actually means the current folder that

22
00:01:28,260 --> 00:01:29,370
you're already in.

23
00:01:29,370 --> 00:01:30,980
As we know that's the folder we're in.

24
00:01:30,990 --> 00:01:37,020
So that means basically this door will be automatically replaced by all of this text which is great

25
00:01:37,020 --> 00:01:37,380
.

26
00:01:37,410 --> 00:01:40,830
So all we have to do is add this last bit which is weather data.

27
00:01:40,950 --> 00:01:42,390
The name of the subfolder.

28
00:01:42,480 --> 00:01:48,080
So that way we can already access our conjectures on that and get working directory.

29
00:01:48,330 --> 00:01:52,880
Here you can see that this is exactly what we're after.

30
00:01:52,890 --> 00:01:56,750
Now bear in mind on Windows as usual the code will be a bit different.

31
00:01:56,790 --> 00:02:02,270
On Windows it'll be set to working directory and maybe it was a smooth comment for now.

32
00:02:02,400 --> 00:02:03,880
So pretty much the same thing dot.

33
00:02:03,890 --> 00:02:08,370
But then in the server side is the double backslash weather data.

34
00:02:08,370 --> 00:02:08,730
There we go.

35
00:02:08,730 --> 00:02:11,200
So that is your code for Windows.

36
00:02:11,200 --> 00:02:14,000
Otherwise on a Mac that is the code.

37
00:02:14,100 --> 00:02:18,600
If you're already in the grateful if you're not then just run something similar to that.

38
00:02:18,600 --> 00:02:19,330
There we go.

39
00:02:19,350 --> 00:02:24,990
Oh of course that is provided that you did put the files in a separate subfolder.

40
00:02:24,990 --> 00:02:25,350
All right.

41
00:02:25,370 --> 00:02:27,650
So now let's go ahead and read the data.

42
00:02:27,840 --> 00:02:30,240
Read data and let's go.

43
00:02:30,270 --> 00:02:35,670
So first we're going to read them the files one by one we have a few files to look at.

44
00:02:35,670 --> 00:02:44,190
First of all it's going to be Chicago so we'll just say read ADOT see a Svea Chicago hyphen F for Fahrenheit

45
00:02:44,610 --> 00:02:49,450
CSV and then Arrau dot names he equals one.

46
00:02:49,470 --> 00:02:50,650
Why do we need road names.

47
00:02:50,670 --> 00:02:53,760
It equals one so let's let's try without it for a second.

48
00:02:53,760 --> 00:02:57,510
So far on that and I look at Chicago so it's from Chicago.

49
00:02:57,510 --> 00:03:03,320
So here what she can see is that the road names are not picked up.

50
00:03:03,320 --> 00:03:10,620
So basically this column is being seen as a separate column in reality so the column names are always

51
00:03:10,620 --> 00:03:15,080
picked up by Reed says because that's how it operates it looks for call names.

52
00:03:15,150 --> 00:03:21,280
But then in our data set we know that we have call names and January-March hyperreal and so on.

53
00:03:21,360 --> 00:03:23,760
And also we have road names here they are.

54
00:03:23,880 --> 00:03:27,640
We don't want them to be seen as a separate column in our data set.

55
00:03:27,660 --> 00:03:30,870
We want them to be here instead of these numbers.

56
00:03:30,870 --> 00:03:33,770
So that's why we're going to say come on road dot.

57
00:03:33,810 --> 00:03:35,310
Names equals one.

58
00:03:35,430 --> 00:03:39,740
That means that take the wrong names from the first column.

59
00:03:39,960 --> 00:03:46,710
And if we're on list now and then we look at Chicago you'll see that now these values in the first column

60
00:03:46,710 --> 00:03:52,500
have actually become the names of the rows so all your daughter is contained within this block where

61
00:03:52,500 --> 00:03:55,100
all the numeric data is which is correct.

62
00:03:55,200 --> 00:03:58,710
And then you've got call names for this matrix or for this data.

63
00:03:58,980 --> 00:04:00,750
And you've got the wrong names.

64
00:04:00,930 --> 00:04:07,170
So that's why we're putting the wrong names he calls one a handy little feature that you can use in

65
00:04:07,260 --> 00:04:08,290
our.

66
00:04:08,310 --> 00:04:08,720
All right.

67
00:04:08,730 --> 00:04:13,920
And now we're just going to copy this couple times because we have four cities.

68
00:04:13,920 --> 00:04:15,820
So next will be in New York.

69
00:04:15,900 --> 00:04:20,310
We're going to go clockwise around the U.S. next on will be Houston.

70
00:04:20,310 --> 00:04:22,870
Next one will be San Francisco.

71
00:04:23,100 --> 00:04:23,480
All right.

72
00:04:23,490 --> 00:04:26,430
And don't forget to change the name or here as well.

73
00:04:26,430 --> 00:04:30,060
Otherwise that will not be correct of course.

74
00:04:30,060 --> 00:04:32,110
All right so there we go.

75
00:04:32,340 --> 00:04:35,460
And another fire ran over it around that one.

76
00:04:35,490 --> 00:04:36,730
So let's run that one.

77
00:04:36,750 --> 00:04:38,220
That one and that one.

78
00:04:38,520 --> 00:04:42,450
And of course we can now quickly check.

79
00:04:42,450 --> 00:04:42,830
All right.

80
00:04:42,840 --> 00:04:45,670
So let's say Chicago check.

81
00:04:45,810 --> 00:04:49,920
Let's check out Chicago and we'll just have a look at Chicago.

82
00:04:49,920 --> 00:04:50,980
There you go.

83
00:04:51,040 --> 00:04:54,030
Then we'll have a look at New York.

84
00:04:54,030 --> 00:04:56,310
Always good to check at the very start.

85
00:04:56,370 --> 00:05:00,900
Just to make sure you're on the right page and also to make sure that you didn't pick up any of the

86
00:05:00,990 --> 00:05:03,960
identical data so that that's 32 That's 39 OK.

87
00:05:04,010 --> 00:05:05,840
That makes sense that's different.

88
00:05:05,840 --> 00:05:07,620
Actually we don't really need these.

89
00:05:07,890 --> 00:05:13,370
Chicago New York Houston and San Francisco.

90
00:05:13,560 --> 00:05:13,890
All right.

91
00:05:13,890 --> 00:05:14,370
Beautiful.

92
00:05:14,370 --> 00:05:16,670
Looks like everything is picked up very nicely.

93
00:05:16,770 --> 00:05:22,440
And what we want to do is we you want to see how this door has been imported.

94
00:05:22,470 --> 00:05:29,770
Naturally when you use $3.60 imported as a doorframes so is check if these are indeed doorframes.

95
00:05:30,000 --> 00:05:33,930
So these are doorframes.

96
00:05:33,960 --> 00:05:40,010
So just quickly check that is dot dot frame and then we're going to say Chicago.

97
00:05:40,020 --> 00:05:45,440
So each car is going to be her test Abani for most of the section because it did come first here.

98
00:05:45,450 --> 00:05:49,560
So we're just going be working with Chicago a lot of the time when we need to work with just one of

99
00:05:49,560 --> 00:05:50,230
them.

100
00:05:50,250 --> 00:05:52,140
So is that a frame in Chicago.

101
00:05:52,140 --> 00:05:53,120
Yes it's true.

102
00:05:53,130 --> 00:05:58,980
So what we want to do is we want to convert it to a matrix Why do we want to convert to Matrix.

103
00:05:58,980 --> 00:06:03,540
Well because all the elements inside this object are actually the same they're all numeric.

104
00:06:03,540 --> 00:06:06,570
So there's no real need for it to be a door frame.

105
00:06:06,630 --> 00:06:11,010
And moreover some of the things that we're going to be practicing Don't be applicable to matrices so

106
00:06:11,010 --> 00:06:16,560
it's a good opportunity for us to quickly convert it to matrix so that we can actually get through all

107
00:06:16,560 --> 00:06:18,300
of the things that we want for the section.

108
00:06:18,300 --> 00:06:22,260
So let's convert to matrices.

109
00:06:22,260 --> 00:06:22,560
All right.

110
00:06:22,560 --> 00:06:28,660
So the first one will be we'll just override the originals just so that we don't have too many objects

111
00:06:28,660 --> 00:06:29,790
to floating around.

112
00:06:30,030 --> 00:06:37,050
So in Chicago and we're going to say as matrix so we're changing it from a doorframe to Matrix Chicago

113
00:06:37,560 --> 00:06:40,740
run that and do all of these.

114
00:06:40,740 --> 00:06:43,620
So this is going to be New York.

115
00:06:43,620 --> 00:06:51,540
This is going to be Houston and this one is going to be San Francisco built of data preparation as usual

116
00:06:51,540 --> 00:06:53,690
at the start of the section.

117
00:06:53,720 --> 00:06:57,750
It's not a worry sometimes or even always it's necessary.

118
00:06:57,750 --> 00:07:01,880
So for on that we've got these matrices and now let's check.

119
00:07:01,890 --> 00:07:04,200
So is dot matrix.

120
00:07:04,230 --> 00:07:06,930
We're asking a question Is Chicago Matrix now.

121
00:07:07,080 --> 00:07:09,120
It is it's a matrix.

122
00:07:09,150 --> 00:07:09,840
That's good.

123
00:07:09,840 --> 00:07:10,490
All right.

124
00:07:10,530 --> 00:07:13,940
And finally let's put all of these into a list.

125
00:07:13,950 --> 00:07:19,800
Let's put all of these into a list so we'll call the list.

126
00:07:19,830 --> 00:07:26,100
Whether because we're dealing with weather data and we're going to say list and here we're going to

127
00:07:26,100 --> 00:07:31,640
say Chicago New York Houston and San Francisco.

128
00:07:31,680 --> 00:07:36,320
So we really know how to deal with lists and this is the function that creates a list.

129
00:07:36,330 --> 00:07:41,710
Now if I look at whether or I see I see a list of four components.

130
00:07:41,730 --> 00:07:46,690
So there's our first component which is a matrix second component third and fourth component which is

131
00:07:46,690 --> 00:07:47,430
the matrix.

132
00:07:47,640 --> 00:07:52,920
And the only thing here is that these lists don't have all these components don't have proper names

133
00:07:52,920 --> 00:07:54,580
they just have indices.

134
00:07:54,660 --> 00:08:00,050
So we're going to give them names and we're going to use that method where we give the names.

135
00:08:00,060 --> 00:08:06,450
At that point in time when we creating the list so we're going to type in Chicago equal Chicago New

136
00:08:06,450 --> 00:08:12,060
York equals New York Houston Houston because Houston and San Francisco San Francisco.

137
00:08:12,060 --> 00:08:17,760
Remember you don't need quotation marks if you're doing it this way because our is smart enough to understand

138
00:08:17,760 --> 00:08:23,600
that these are indeed the names that you are passing to this list so far on that.

139
00:08:23,600 --> 00:08:28,620
There you go you can see now we have a list of four components and all of them have names so this is

140
00:08:28,680 --> 00:08:32,220
Chicago New York Houston and San Francisco.

141
00:08:32,250 --> 00:08:37,050
So that just makes it easier to address each one of them individually so we can say let's have a look

142
00:08:37,050 --> 00:08:37,320
.

143
00:08:37,320 --> 00:08:38,580
Let's try it out.

144
00:08:38,790 --> 00:08:46,950
We can say weather and let's say the we want to access the first element also of the third component

145
00:08:46,950 --> 00:08:48,320
on Access Houston.

146
00:08:48,480 --> 00:08:54,390
So remove the double square brackets which will give us just the component in not in a list.

147
00:08:54,390 --> 00:09:02,220
And if we want the component as a subset or we want to subset the list then we'll just say whether 3

148
00:09:02,340 --> 00:09:03,450
that will give us this.

149
00:09:03,450 --> 00:09:09,200
As you can see based on this this is indeed now a list of one component.

150
00:09:09,360 --> 00:09:14,070
Whereas if we do the double square brackets it's just the matrix by itself.

151
00:09:14,070 --> 00:09:16,830
So this is the actual component.

152
00:09:16,830 --> 00:09:19,050
And also we can say whether a dollar sign.

153
00:09:19,050 --> 00:09:24,380
Houston so far and that's exactly the same as doing the double square brackets.

154
00:09:24,390 --> 00:09:25,080
All right.

155
00:09:25,080 --> 00:09:25,460
Great.

156
00:09:25,470 --> 00:09:32,760
Now we are all set to learn about apply family functions and get some really valuable hands on experience

157
00:09:32,760 --> 00:09:33,060
.

158
00:09:33,060 --> 00:09:33,840
Are you excited.

159
00:09:33,840 --> 00:09:35,400
I'm pretty excited about this.

160
00:09:35,640 --> 00:09:38,650
And on that note let's move on to the next tutorial.

161
00:09:38,670 --> 00:09:39,390
I'll see you there.

162
00:09:39,450 --> 00:09:41,040
And until next I'm happy coding

163
00:09:43,260 --> 00:09:46,690
.
