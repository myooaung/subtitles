WEBVTT
1
00:00:05.790 --> 00:00:10.560
Hello and welcome back to that band's course on our programming and this tutorial we're going to quickly

2
00:00:10.560 --> 00:00:15.780
recap on what we learned in the section about the ply family functions.

3
00:00:15.820 --> 00:00:21.160
So in this section we learnt number one how to apply family of functions works.

4
00:00:21.210 --> 00:00:26.130
So we learned which functions are members of this family and also how these functions are structured

5
00:00:26.130 --> 00:00:31.440
how they're created why they created what their designation and purpose is.

6
00:00:31.440 --> 00:00:36.840
And this was an important tutorial because people oftentimes who come to are for the first time they

7
00:00:36.840 --> 00:00:42.780
can get confused about these apply functions because they are indeed very different to what you experience

8
00:00:42.780 --> 00:00:48.180
in other programming languages and they can be a bit of putting sometimes but so we discussed how they

9
00:00:48.180 --> 00:00:54.210
work we looked at a few theoretical examples and that was very important to get us into the mode of

10
00:00:54.570 --> 00:00:56.880
understanding how to work with these functions.

11
00:00:56.910 --> 00:01:03.990
Then we had quite an interesting tutorials well on how to recreate plie statement we have a for loop

12
00:01:03.990 --> 00:01:04.200
.

13
00:01:04.200 --> 00:01:06.600
So this is rarely covered.

14
00:01:06.600 --> 00:01:09.830
I've actually never seen this covered in tutorials on our.

15
00:01:09.900 --> 00:01:15.720
But for me personally this is what made it all click when I thought about the Apply function and I thought

16
00:01:16.230 --> 00:01:18.180
hold on like why aren't we using a loop.

17
00:01:18.180 --> 00:01:21.460
And you hear that a lot of the time like don't use loops these apply functions.

18
00:01:21.540 --> 00:01:25.080
But then I actually sat down and recreated the Apply function with a loop.

19
00:01:25.080 --> 00:01:27.720
Same thing what we did in the tural and it all made sense.

20
00:01:27.720 --> 00:01:33.390
It made sense that its foster chews up life function takes less code less effort to create but the result

21
00:01:33.450 --> 00:01:34.020
is the same.

22
00:01:34.020 --> 00:01:39.540
So when you're starting all of these apply functions if you think of them in this sense if you recreate

23
00:01:39.540 --> 00:01:44.690
a couple of them with the four loops maybe that will help you grasp their essence better.

24
00:01:44.700 --> 00:01:50.130
And for the first couple of times use them in the first five or 10 and 20 times you'll still be thinking

25
00:01:50.130 --> 00:01:51.140
in terms of loops.

26
00:01:51.210 --> 00:01:56.190
But then after a while it'll become second nature and you'll be able to just think in terms of apply

27
00:01:56.190 --> 00:01:58.240
functions and completely forget about loops.

28
00:01:58.350 --> 00:02:05.190
But perhaps sometimes this transitional step might be helpful when you're moving on from loops to apply

29
00:02:05.190 --> 00:02:11.340
functions maybe give it a go and see if you can recreate some of them and see if that helps you better

30
00:02:11.340 --> 00:02:14.760
grasp what these functions are all about and how they work.

31
00:02:14.790 --> 00:02:21.330
Next we learn when to use the plie l apply or a supply function so those are the main three that we

32
00:02:21.330 --> 00:02:28.710
talked about and we learned what the differences are so apply as applied to matrices apply apply to

33
00:02:28.710 --> 00:02:34.830
lists or vectors and it returns a list as applied is kind of a simplified version of L apply and is

34
00:02:34.830 --> 00:02:37.520
applied to also lists of vectors and also.

35
00:02:37.590 --> 00:02:42.120
But in this case it returns a vector or a matrix rather than a list.

36
00:02:42.120 --> 00:02:45.760
Next we learn how to combine apply with the square brackets operator.

37
00:02:45.840 --> 00:02:51.240
This is a very powerful combo which allows you to extract elements of components of a list so you can

38
00:02:51.240 --> 00:02:55.530
extract single elements or you can extract rows or columns.

39
00:02:55.710 --> 00:02:57.020
You can do whatever you like.

40
00:02:57.030 --> 00:03:03.810
So basically we learned that you can use the square brackets even though it doesn't look like a function

41
00:03:03.810 --> 00:03:03.990
.

42
00:03:04.020 --> 00:03:08.750
We can still use them just to put the first square brackets in quotation marks and put it into the L

43
00:03:08.760 --> 00:03:15.060
apply and that way you can access elements of Cobbe of components of that list that you're working with

44
00:03:15.060 --> 00:03:15.730
.

45
00:03:15.750 --> 00:03:21.450
Next we learnt how to nest your own functions in the applied type functions.

46
00:03:21.450 --> 00:03:29.670
Also a very useful technique because that gives you that extra versatility extra level of flexibility

47
00:03:29.670 --> 00:03:31.190
and control over your code.

48
00:03:31.320 --> 00:03:40.140
You're not limited to just functions that are pre-created in are for instance mean or rowme means or

49
00:03:40.170 --> 00:03:45.510
call means and stuff like that so you are actually able to create your own type of functions any combinations

50
00:03:45.900 --> 00:03:51.670
of operations that you want and then put those into apply functions and that is what really makes the

51
00:03:51.680 --> 00:03:54.360
Apply functions very powerful.

52
00:03:54.360 --> 00:03:59.550
Also we learned how to nest apply type functions within each other so how to nest apply if it apply

53
00:03:59.550 --> 00:04:05.380
or as apply or you can use any combinations and just like nesting your only functions feel that Plouff

54
00:04:05.610 --> 00:04:06.310
functions.

55
00:04:06.330 --> 00:04:09.720
This is a very powerful combination as well.

56
00:04:09.720 --> 00:04:16.080
And then finally we learn how to use that which emacs function and the WHICH mind functions by themselves

57
00:04:16.080 --> 00:04:16.100
.

58
00:04:16.110 --> 00:04:17.520
They're not that complicated.

59
00:04:17.520 --> 00:04:24.750
But we did apply them in a very complex example where we had a function inside an apply function inside

60
00:04:24.750 --> 00:04:25.970
another apply function.

61
00:04:26.040 --> 00:04:28.040
So that tutorial was quite advanced.

62
00:04:28.080 --> 00:04:33.330
But generally speaking the wish Max and Wichman functions are not that complicated at all.

63
00:04:33.330 --> 00:04:35.970
So hopefully you'll learn a lot from this section.

64
00:04:35.970 --> 00:04:43.530
This is the true power of R and after this section you are now ready for very complicated types of analyses

65
00:04:43.530 --> 00:04:46.710
because you're not just going to be thinking about creating loops all the time.

66
00:04:46.710 --> 00:04:53.160
You have these extremely powerful tools like apply functions and nesting with them with each other or

67
00:04:53.160 --> 00:04:58.980
nesting your own functions within apply functions which allow you to do sophisticated analysis very

68
00:04:58.980 --> 00:05:02.370
very quickly and that is one of the greatest advantages of our.

69
00:05:02.370 --> 00:05:04.730
So hopefully had fun in this section and you learnt a lot.

70
00:05:04.800 --> 00:05:06.810
And until next time happy coding
