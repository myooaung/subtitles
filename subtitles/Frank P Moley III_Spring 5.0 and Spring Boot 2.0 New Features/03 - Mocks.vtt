WEBVTT
1
00:00:00.060 --> 00:00:02.010
- [Instructor] The final section that we're going to talk about

2
00:00:02.010 --> 00:00:04.010
with Spring 5.0 in testing,

3
00:00:04.010 --> 00:00:05.080
is some of the new mock constructs

4
00:00:05.080 --> 00:00:07.060
and some of the improvements that they have made

5
00:00:07.060 --> 00:00:10.010
to the existing mock construct.

6
00:00:10.010 --> 00:00:11.020
First thing we're going to talk about

7
00:00:11.020 --> 00:00:14.030
is MockHttpServletRequest.

8
00:00:14.030 --> 00:00:16.020
Now, there's some changes in the way

9
00:00:16.020 --> 00:00:19.000
that you can actually use the servlet request mock.

10
00:00:19.000 --> 00:00:22.000
You can now get your content as a byte array,

11
00:00:22.000 --> 00:00:23.040
or as a string.

12
00:00:23.040 --> 00:00:27.060
This access to raw content, the request body for instance,

13
00:00:27.060 --> 00:00:29.000
really becomes a very powerful thing

14
00:00:29.000 --> 00:00:30.060
when you're inspecting elements,

15
00:00:30.060 --> 00:00:32.090
and I use it quite a bit with MockMvc,

16
00:00:32.090 --> 00:00:35.020
and having this here from the servlet request,

17
00:00:35.020 --> 00:00:38.080
makes itself useful for other tooling as well.

18
00:00:38.080 --> 00:00:41.030
Again, this is a small change,

19
00:00:41.030 --> 00:00:43.050
but it can be very useful if your testing

20
00:00:43.050 --> 00:00:45.080
can consume it, so if you're using

21
00:00:45.080 --> 00:00:48.000
the MockHttpServletRequest, I encourage you

22
00:00:48.000 --> 00:00:50.080
to take a look at these two new options.

23
00:00:50.080 --> 00:00:52.070
Now MockMvc, which is one of the frameworks

24
00:00:52.070 --> 00:00:54.050
that I use quite a bit,

25
00:00:54.050 --> 00:00:56.080
now has output, and I know that

26
00:00:56.080 --> 00:00:59.060
that may not seem like a lot, but for me this is huge

27
00:00:59.060 --> 00:01:02.000
and in fact I'm going to demo this here in a second,

28
00:01:02.000 --> 00:01:03.070
and the reason this is so big is

29
00:01:03.070 --> 00:01:07.000
when I'm poring through lots of Jenkins logs,

30
00:01:07.000 --> 00:01:09.090
and I want to find out why my test failed,

31
00:01:09.090 --> 00:01:13.060
actually seeing the output of the test is huge,

32
00:01:13.060 --> 00:01:16.080
especially in those use cases of Jenkins files.

33
00:01:16.080 --> 00:01:18.080
I keep bringing that up because I've used it

34
00:01:18.080 --> 00:01:21.060
considerably since Spring 5.0 came out

35
00:01:21.060 --> 00:01:25.000
because of the value of having that output.

36
00:01:25.000 --> 00:01:27.030
So you get a print() and a log() support,

37
00:01:27.030 --> 00:01:29.070
you can use either one, I usually just print it,

38
00:01:29.070 --> 00:01:31.050
because when I'm printing it,

39
00:01:31.050 --> 00:01:34.030
my log aggregator is going to pick it up anyway.

40
00:01:34.030 --> 00:01:37.070
This visual information about your test is very powerful,

41
00:01:37.070 --> 00:01:40.030
again in that CI/CD world, and I don't want to

42
00:01:40.030 --> 00:01:42.040
underestimate how big of a deal this is

43
00:01:42.040 --> 00:01:45.000
even though it's a very small addition,

44
00:01:45.000 --> 00:01:46.040
to me this is one of the best things

45
00:01:46.040 --> 00:01:48.010
that was added in Spring 5.0,

46
00:01:48.010 --> 00:01:50.060
because it makes my life easier.

47
00:01:50.060 --> 00:01:52.090
So let's take a look at how to do that.

48
00:01:52.090 --> 00:01:55.010
So I'm going to go ahead and jump over here to our IDE,

49
00:01:55.010 --> 00:01:57.060
and what I'd like you to do is to open up the test

50
00:01:57.060 --> 00:02:01.030
that we created in the last video.

51
00:02:01.030 --> 00:02:02.050
The normal row you're going to be looking at here

52
00:02:02.050 --> 00:02:04.080
is the actual output of our test,

53
00:02:04.080 --> 00:02:07.060
so let's run it as it exists today.

54
00:02:07.060 --> 00:02:10.030
So we'll run our test, and again it's

55
00:02:10.030 --> 00:02:13.040
the output that we're most interested in,

56
00:02:13.040 --> 00:02:16.060
we'll allow Spring to start up and do its thing,

57
00:02:16.060 --> 00:02:19.020
and our test runs,

58
00:02:19.020 --> 00:02:20.070
and we get just a little bit of data

59
00:02:20.070 --> 00:02:24.080
that's a test that self-ran, and then everything was good.

60
00:02:24.080 --> 00:02:27.090
So not a whole lot here to give us much indication,

61
00:02:27.090 --> 00:02:31.020
but the test passed, it's green, we're good to go, right?

62
00:02:31.020 --> 00:02:33.060
Well, sometimes I like a little bit more information.

63
00:02:33.060 --> 00:02:35.050
So what we're going to do,

64
00:02:35.050 --> 00:02:38.070
is right before our Expect,

65
00:02:38.070 --> 00:02:41.000
we're going to add a command and that command

66
00:02:41.000 --> 00:02:42.070
that we are going to add,

67
00:02:42.070 --> 00:02:47.010
is andDo, and we're simply going to tell it to print.

68
00:02:47.010 --> 00:02:50.050
Now again, we could do logging if we chose to,

69
00:02:50.050 --> 00:02:52.090
but in this case print will be sufficient.

70
00:02:52.090 --> 00:02:56.060
Now let's run our test again.

71
00:02:56.060 --> 00:02:59.010
And we'll see Spring doing it's thing as it starts up

72
00:02:59.010 --> 00:03:01.040
and the context loads, the test context

73
00:03:01.040 --> 00:03:04.020
is running for our test,

74
00:03:04.020 --> 00:03:07.080
and there it is, so at the end here

75
00:03:07.080 --> 00:03:09.080
when the test actually was running,

76
00:03:09.080 --> 00:03:13.090
we now got a servlet request and let's take a look at this.

77
00:03:13.090 --> 00:03:15.080
So the HTTP Method was POST,

78
00:03:15.080 --> 00:03:17.040
which is what we would expect.

79
00:03:17.040 --> 00:03:20.030
The URI was the context root slash presidents,

80
00:03:20.030 --> 00:03:23.080
again what we would expect, no parameters were sent,

81
00:03:23.080 --> 00:03:26.010
the content type is application json

82
00:03:26.010 --> 00:03:29.040
with a charset of UTF-8, that's what we set

83
00:03:29.040 --> 00:03:31.030
so that's what we would expect to see.

84
00:03:31.030 --> 00:03:34.060
There's the json body of our actual request,

85
00:03:34.060 --> 00:03:37.030
again, this information becomes very valuable,

86
00:03:37.030 --> 00:03:39.010
if this was not a green test,

87
00:03:39.010 --> 00:03:42.000
we would know exactly what data was sent to our servers,

88
00:03:42.000 --> 00:03:43.090
and we could then test it manually

89
00:03:43.090 --> 00:03:46.010
to determine what's breaking.

90
00:03:46.010 --> 00:03:47.080
As you go back down through you can see

91
00:03:47.080 --> 00:03:50.080
the method that was called on the handler,

92
00:03:50.080 --> 00:03:53.050
you can see whether it was synchronous or asynchronous,

93
00:03:53.050 --> 00:03:55.070
in this case it was a synchronous test,

94
00:03:55.070 --> 00:03:57.070
you can look at all kinds of information

95
00:03:57.070 --> 00:03:59.080
including the output as well.

96
00:03:59.080 --> 00:04:02.030
So this information becomes almost invaluable

97
00:04:02.030 --> 00:04:06.040
if you're troubleshooting issues on your test execution,

98
00:04:06.040 --> 00:04:08.060
especially on those Jenkins boxes.

99
00:04:08.060 --> 00:04:12.080
So dig into this, I encourage you if you're using MockMvc,

100
00:04:12.080 --> 00:04:15.020
add print to every single one of your tests.

101
00:04:15.020 --> 00:04:18.010
You can probably write a real quick script to do that,

102
00:04:18.010 --> 00:04:21.090
and you will find value out of it immediately, however,

103
00:04:21.090 --> 00:04:24.020
take note that all of this is going into your logs,

104
00:04:24.020 --> 00:04:27.000
so if you do retain your logs for any period of time,

105
00:04:27.000 --> 00:04:29.070
it may cost you money in the long run,

106
00:04:29.070 --> 00:04:31.070
so take that into account that your logs

107
00:04:31.070 --> 00:04:33.040
are going to get bigger.

108
00:04:33.040 --> 00:04:35.060
It's a trade-off, as everything in computer science

109
00:04:35.060 --> 00:04:38.000
but this one I think is very worth it.

