WEBVTT
1
00:00:00.050 --> 00:00:01.070
- [Instructor] One of the coolest changes

2
00:00:01.070 --> 00:00:04.060
to the core baseline itself, in my opinion,

3
00:00:04.060 --> 00:00:07.070
is actually the move to a non-blocking IO.

4
00:00:07.070 --> 00:00:11.010
And we're going to talk a little bit about those IO changes.

5
00:00:11.010 --> 00:00:12.080
First of all, they've given us a new method

6
00:00:12.080 --> 00:00:14.070
on the resource abstraction.

7
00:00:14.070 --> 00:00:18.030
If you haven't used resource before in your Spring code,

8
00:00:18.030 --> 00:00:20.090
I highly encourage you to check it out.

9
00:00:20.090 --> 00:00:24.050
As an IO abstraction it is a fantastic tool

10
00:00:24.050 --> 00:00:27.020
that allows you to pull resources off the file system

11
00:00:27.020 --> 00:00:30.010
or class path extremely easy.

12
00:00:30.010 --> 00:00:32.030
I use resource all the time.

13
00:00:32.030 --> 00:00:34.040
One of the things that I always ran into a problem

14
00:00:34.040 --> 00:00:38.000
with though was, is the resource itself a file?

15
00:00:38.000 --> 00:00:42.020
This new isFile method gives us a defensive strategy

16
00:00:42.020 --> 00:00:44.050
in dealing with resources.

17
00:00:44.050 --> 00:00:46.090
It allows us to determine if the resource itself

18
00:00:46.090 --> 00:00:49.030
is a file in the file system.

19
00:00:49.030 --> 00:00:52.060
When you call getFile on a resource that isn't a file

20
00:00:52.060 --> 00:00:55.010
you would get an IO exception in the past.

21
00:00:55.010 --> 00:00:57.020
So this isFile method gives us a great way

22
00:00:57.020 --> 00:01:01.020
to do a defensive check without a try catch block.

23
00:01:01.020 --> 00:01:03.080
They've also added a new readable channel

24
00:01:03.080 --> 00:01:07.090
and this is also an accessor on the resource itself.

25
00:01:07.090 --> 00:01:12.040
Now this returns nio or a non-blocking readable channel.

26
00:01:12.040 --> 00:01:14.010
And this is a very dramatic shift

27
00:01:14.010 --> 00:01:17.000
from the file input file output streams

28
00:01:17.000 --> 00:01:19.020
that we've traditionally used in Java,

29
00:01:19.020 --> 00:01:21.040
that by the way were blocking.

30
00:01:21.040 --> 00:01:25.040
So this really is a shift from non-blocking to blocking APIs

31
00:01:25.040 --> 00:01:28.000
which if you've followed anything with Project Reactor

32
00:01:28.000 --> 00:01:30.020
and how Spring is integrated with that,

33
00:01:30.020 --> 00:01:33.000
it should really be no surprise to see a shift

34
00:01:33.000 --> 00:01:36.010
in moving from blocking APIs to non-blocking.

35
00:01:36.010 --> 00:01:37.080
And we're seeing the same thing

36
00:01:37.080 --> 00:01:41.000
with the way that this readable channel operates.

37
00:01:41.000 --> 00:01:43.070
And indeed that same change is existing across

38
00:01:43.070 --> 00:01:45.070
the entire file system.

39
00:01:45.070 --> 00:01:47.030
General file system access,

40
00:01:47.030 --> 00:01:49.010
much of it behind the scenes,

41
00:01:49.010 --> 00:01:53.020
has been a complete shift to nio, or non-blocking.

42
00:01:53.020 --> 00:01:55.080
And this is really a dramatic change.

43
00:01:55.080 --> 00:01:58.030
One that you might not deal with on a regular basis,

44
00:01:58.030 --> 00:02:00.090
but if you're dealing with the operation site

45
00:02:00.090 --> 00:02:02.040
of a Java program,

46
00:02:02.040 --> 00:02:04.090
especially one that maybe is doing ETL

47
00:02:04.090 --> 00:02:07.030
or a lot of file system access,

48
00:02:07.030 --> 00:02:09.010
this is kind of a big deal,

49
00:02:09.010 --> 00:02:12.000
especially if you're running Reactive APIs.

50
00:02:12.000 --> 00:02:13.090
So this is a very exciting change,

51
00:02:13.090 --> 00:02:17.020
that's kind of small in the big picture scheme of things,

52
00:02:17.020 --> 00:02:18.050
but really gets me excited,

53
00:02:18.050 --> 00:02:21.070
because I tend to do a lot of things with file manipulation,

54
00:02:21.070 --> 00:02:24.000
as I'm building out infrastructures.

