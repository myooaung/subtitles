WEBVTT
1
00:00:00.060 --> 00:00:02.020
- [Instructor] We're going to go through some of the high-level

2
00:00:02.020 --> 00:00:05.020
construct changes within the Spring Framework 5,

3
00:00:05.020 --> 00:00:06.070
and one of the first ones that we're going to note

4
00:00:06.070 --> 00:00:08.090
is the JDK baseline.

5
00:00:08.090 --> 00:00:12.000
With 5.0, there was a Java upgrade so that a minimum

6
00:00:12.000 --> 00:00:15.000
version of 1.8 was required.

7
00:00:15.000 --> 00:00:19.030
There's also out of the box full support for JDK 9

8
00:00:19.030 --> 00:00:22.010
for both runtime and compilation.

9
00:00:22.010 --> 00:00:25.090
Now one thing to note is that longterm support for 1.8

10
00:00:25.090 --> 00:00:28.000
actually ended with Java 11.

11
00:00:28.000 --> 00:00:30.080
And as such, you really need to go to 5.1

12
00:00:30.080 --> 00:00:33.090
in order to get support for Java 11.

13
00:00:33.090 --> 00:00:35.090
Also along these lines was that the releases

14
00:00:35.090 --> 00:00:37.080
are actually de-coupled from the JDK

15
00:00:37.080 --> 00:00:40.000
due to several delays that happened.

16
00:00:40.000 --> 00:00:43.040
But full support out of the box for JDK 9

17
00:00:43.040 --> 00:00:48.070
came with Spring 5.0, and then 5.1 as I said, brought 11.

18
00:00:48.070 --> 00:00:52.050
Now, with this change you also get API support

19
00:00:52.050 --> 00:00:56.060
for Java EE or Jakarta EE for 1.7.

20
00:00:56.060 --> 00:00:59.080
And 1.8 API runtime support.

21
00:00:59.080 --> 00:01:01.090
Now, a few things that come with that

22
00:01:01.090 --> 00:01:06.040
is 1.7 gave us Servlet 3.1, Bean Validation 1.1,

23
00:01:06.040 --> 00:01:08.020
JPA 2.1,

24
00:01:08.020 --> 00:01:10.030
and JMS 2.0.

25
00:01:10.030 --> 00:01:14.030
With 1.8, we get Servlet 4.0,

26
00:01:14.030 --> 00:01:16.080
Bean Validation 2.0, JPA 2.2

27
00:01:16.080 --> 00:01:20.020
and JSON binding API 1.0.

28
00:01:20.020 --> 00:01:23.010
So Jakarta EE is really the way to go with 1.8

29
00:01:23.010 --> 00:01:25.000
as you're moving forward.

30
00:01:25.000 --> 00:01:28.050
Now as I mentioned previously, with 5.1

31
00:01:28.050 --> 00:01:30.080
we get full Java upgrades to JDK 11.

32
00:01:30.080 --> 00:01:34.050
And JDK 11 is the new LTS supported version

33
00:01:34.050 --> 00:01:36.090
of Java, from Oracle.

34
00:01:36.090 --> 00:01:39.040
We also get support for GraalVM,

35
00:01:39.040 --> 00:01:41.050
with its native image constraints on things

36
00:01:41.050 --> 00:01:43.080
like reflection and parameter names.

37
00:01:43.080 --> 00:01:46.080
We also get Reactor Core 3.2 support

38
00:01:46.080 --> 00:01:48.070
out of the box with 5.1,

39
00:01:48.070 --> 00:01:52.060
which becomes very powerful in this non-blocking model.

40
00:01:52.060 --> 00:01:54.020
Now this is the age-old question

41
00:01:54.020 --> 00:01:57.020
within software development, how should you respond?

42
00:01:57.020 --> 00:01:59.020
So Java support is critical,

43
00:01:59.020 --> 00:02:02.000
especially if you're writing web applications.

44
00:02:02.000 --> 00:02:06.020
And 1.8 LTS has been replaced with 11.

45
00:02:06.020 --> 00:02:09.040
As such you really should be moving to JDK 11,

46
00:02:09.040 --> 00:02:11.080
unless you're with open JDK that has promised

47
00:02:11.080 --> 00:02:14.040
some level of support for 1.8.

48
00:02:14.040 --> 00:02:17.050
Now out of the box, no other versions will be supported

49
00:02:17.050 --> 00:02:19.030
because 9 was deprecated with 10,

50
00:02:19.030 --> 00:02:21.050
and 10 becomes deprecated with 11.

51
00:02:21.050 --> 00:02:22.090
So if you're going to stick with Oracle

52
00:02:22.090 --> 00:02:25.090
you're going to need to move up to 11 to stay in support.

53
00:02:25.090 --> 00:02:28.060
And with security bugs and performance issues

54
00:02:28.060 --> 00:02:30.070
that happen all the time in Java,

55
00:02:30.070 --> 00:02:35.050
I'd never would recommend staying on a deprecated version.

56
00:02:35.050 --> 00:02:38.000
Now there are a few warnings that I'm going to bring with this.

57
00:02:38.000 --> 00:02:39.080
And this is just from experience.

58
00:02:39.080 --> 00:02:42.080
And if you've ever written Java or ever managed systems,

59
00:02:42.080 --> 00:02:45.000
these are going to be a no brainer.

60
00:02:45.000 --> 00:02:48.060
JDK upgrades can be painful.

61
00:02:48.060 --> 00:02:52.010
And with these changes, from 9, 10, 11

62
00:02:52.010 --> 00:02:53.080
we need to be very, very careful

63
00:02:53.080 --> 00:02:56.090
where we're using reflection and mocking frameworks.

64
00:02:56.090 --> 00:02:59.020
A lot of the changes have not been updated

65
00:02:59.020 --> 00:03:02.040
in those libraries that are required to move fully

66
00:03:02.040 --> 00:03:05.030
into these new modern JDKs.

67
00:03:05.030 --> 00:03:08.000
And I will state this again as well from experience.

68
00:03:08.000 --> 00:03:11.000
The JDK upgrade is actually probably going to be

69
00:03:11.000 --> 00:03:15.010
significantly harder than the Spring upgrade itself.

70
00:03:15.010 --> 00:03:18.010
So if you've been staying modern on your JDKs,

71
00:03:18.010 --> 00:03:19.090
this will be less of a concern than

72
00:03:19.090 --> 00:03:21.050
if you've haven't stayed modern.

73
00:03:21.050 --> 00:03:23.090
If you're still running 1.7,

74
00:03:23.090 --> 00:03:26.090
you may experience some pretty significant hurt

75
00:03:26.090 --> 00:03:28.060
moving to this new model.

76
00:03:28.060 --> 00:03:31.010
But the JDK baselines were expected

77
00:03:31.010 --> 00:03:32.060
with the changes that Oracle made

78
00:03:32.060 --> 00:03:36.000
and Spring is kept up to date with JDK changes.

