WEBVTT
1
00:00:00.000 --> 00:00:01.070
- [Instructor] As we jump into some of the more

2
00:00:01.070 --> 00:00:04.060
concrete changes of Spring 5.0,

3
00:00:04.060 --> 00:00:06.020
we're going to start with Spring Web

4
00:00:06.020 --> 00:00:07.050
and specifically, we're going to look at

5
00:00:07.050 --> 00:00:10.030
some of the major changes to the servlets.

6
00:00:10.030 --> 00:00:14.070
Now, with Spring 5.0, we got full support for Servlet 3.1.

7
00:00:14.070 --> 00:00:16.080
Now, prior to this full support,

8
00:00:16.080 --> 00:00:20.070
some of the filter methods were not fully compliant

9
00:00:20.070 --> 00:00:23.020
with the spec, and as such,

10
00:00:23.020 --> 00:00:24.040
there were some issues with the way

11
00:00:24.040 --> 00:00:27.040
that it actually implemented Servlet 3.1.

12
00:00:27.040 --> 00:00:30.050
Now, these commonly are used in things like Spring Security,

13
00:00:30.050 --> 00:00:32.050
but not every developer was actually impacted

14
00:00:32.050 --> 00:00:33.090
by these changes.

15
00:00:33.090 --> 00:00:36.030
But it's just good to know that it is now compatible

16
00:00:36.030 --> 00:00:38.060
fully with Servlet 3.1.

17
00:00:38.060 --> 00:00:42.080
A much more interesting change came from the PushBuilder API

18
00:00:42.080 --> 00:00:46.030
and that's part of the HTTP 2.0 spec.

19
00:00:46.030 --> 00:00:49.050
We can now push resources to the client

20
00:00:49.050 --> 00:00:52.080
from the server, which of course, improves download speed.

21
00:00:52.080 --> 00:00:54.070
And this is especially important for dealing

22
00:00:54.070 --> 00:00:56.080
with something like an e-commerce site,

23
00:00:56.080 --> 00:01:00.090
where page loads directly translate to capitalization

24
00:01:00.090 --> 00:01:02.060
within our website.

25
00:01:02.060 --> 00:01:05.060
By being able to push resources to the client

26
00:01:05.060 --> 00:01:08.060
instead of have it pull, we can get a much better

27
00:01:08.060 --> 00:01:10.060
page load time and ultimately,

28
00:01:10.060 --> 00:01:13.080
have a much better user experience for our customers.

29
00:01:13.080 --> 00:01:15.070
Now, in order to use this API,

30
00:01:15.070 --> 00:01:18.010
we have to be using Servlet 4.0,

31
00:01:18.010 --> 00:01:21.000
which means we need to a container like Tomcat 9.

32
00:01:21.000 --> 00:01:23.040
And essentially, you're going to inject PushBuilder

33
00:01:23.040 --> 00:01:25.090
into any method that has RequestMapping on it

34
00:01:25.090 --> 00:01:28.090
and then you can set up the push operation from there.

35
00:01:28.090 --> 00:01:31.090
So let's take a look at what that looks like in code.

36
00:01:31.090 --> 00:01:35.010
I've loaded up a base application from the exercise files

37
00:01:35.010 --> 00:01:36.060
and it's a Spring Boot application

38
00:01:36.060 --> 00:01:38.060
that I've added a few things to.

39
00:01:38.060 --> 00:01:40.090
Now, though this is really about Spring 5.0,

40
00:01:40.090 --> 00:01:41.090
we're going to use Spring Boot

41
00:01:41.090 --> 00:01:44.030
because setting up a web application

42
00:01:44.030 --> 00:01:46.000
is much easier in Spring Boot.

43
00:01:46.000 --> 00:01:49.050
And we're using an embedded Tomcat 9 to do this.

44
00:01:49.050 --> 00:01:51.020
So let's take a look at some of the changes

45
00:01:51.020 --> 00:01:52.040
that I had to make.

46
00:01:52.040 --> 00:01:55.000
In src, main, resources, I want you to take a look.

47
00:01:55.000 --> 00:01:57.030
We've got a couple of files here.

48
00:01:57.030 --> 00:01:59.010
One of them is the keystore.

49
00:01:59.010 --> 00:02:02.080
Now, in order to use Tomcat 9 and to do HTTP 2.0,

50
00:02:02.080 --> 00:02:05.030
you have to be using HTTPS,

51
00:02:05.030 --> 00:02:07.060
so you have to provide it a keystore.

52
00:02:07.060 --> 00:02:10.020
So I've gone ahead and created a self-signed keystore

53
00:02:10.020 --> 00:02:12.050
and we'll look at that here in moment.

54
00:02:12.050 --> 00:02:15.050
I've also added some application properties

55
00:02:15.050 --> 00:02:19.080
in order to enable HTTP2 to load that keystore in

56
00:02:19.080 --> 00:02:22.020
and to set some keystore password information.

57
00:02:22.020 --> 00:02:23.080
And you can set those properties

58
00:02:23.080 --> 00:02:25.070
in your application.properties.

59
00:02:25.070 --> 00:02:28.080
Or if you're using YAML, you can do the same thing.

60
00:02:28.080 --> 00:02:30.090
I've also added a template.

61
00:02:30.090 --> 00:02:33.040
And this is just a basic HTML template

62
00:02:33.040 --> 00:02:35.080
that has an h1 tag and it loads an image

63
00:02:35.080 --> 00:02:38.070
and that image, we're loading from our static images.

64
00:02:38.070 --> 00:02:41.060
Now, I'm using Thymeleaf as a view resolver.

65
00:02:41.060 --> 00:02:44.020
Even though we're not using any Thymeleaf-specific

66
00:02:44.020 --> 00:02:46.070
annotations here, it's still involved as doing

67
00:02:46.070 --> 00:02:48.080
the view resolution.

68
00:02:48.080 --> 00:02:51.000
All right, so let's jump into actually implementing this.

69
00:02:51.000 --> 00:02:52.010
So the first thing that we're going to do

70
00:02:52.010 --> 00:02:54.000
is we're going to create a new class

71
00:02:54.000 --> 00:02:56.070
and that class is going to be in com.frankmoley.lil

72
00:02:56.070 --> 00:02:58.040
in src, main, java.

73
00:02:58.040 --> 00:03:03.030
And we're going to call this PushController.

74
00:03:03.030 --> 00:03:05.070
Okay, so let's go ahead and shrink our window here,

75
00:03:05.070 --> 00:03:07.080
so we can actually see our code.

76
00:03:07.080 --> 00:03:08.060
Now, to this class,

77
00:03:08.060 --> 00:03:10.060
we're going to add a couple annotations.

78
00:03:10.060 --> 00:03:14.040
The first annotation is going to be @Controller

79
00:03:14.040 --> 00:03:18.020
and then we're going to add an @RequestMapping

80
00:03:18.020 --> 00:03:20.090
and we're going to send this to push.

81
00:03:20.090 --> 00:03:24.000
Go ahead and import that in.

82
00:03:24.000 --> 00:03:26.030
Now, we're going to add a couple methods.

83
00:03:26.030 --> 00:03:30.000
So the first one, we're going to annotate with @GetMapping

84
00:03:30.000 --> 00:03:31.040
and we're going to call this one with,

85
00:03:31.040 --> 00:03:33.040
so this will be the one that has our PushBuilder

86
00:03:33.040 --> 00:03:34.060
actually on it.

87
00:03:34.060 --> 00:03:36.030
So we're going to give that method a signature.

88
00:03:36.030 --> 00:03:38.020
Public String

89
00:03:38.020 --> 00:03:40.070
demoWithPush.

90
00:03:40.070 --> 00:03:44.090
And we will set in the PushBuilder as a parameter

91
00:03:44.090 --> 00:03:47.020
and Spring will go ahead and inject that in

92
00:03:47.020 --> 00:03:50.040
as part of the servlet request.

93
00:03:50.040 --> 00:03:52.030
Go ahead and make sure that it's populated.

94
00:03:52.030 --> 00:03:55.040
So if null does not equal PushBuilder,

95
00:03:55.040 --> 00:04:00.080
we're going to do a PushBuilder.path.

96
00:04:00.080 --> 00:04:02.030
And the path we're going to set is

97
00:04:02.030 --> 00:04:04.070
actually the same that's in our template.

98
00:04:04.070 --> 00:04:06.080
And it's going to be an absolute path,

99
00:04:06.080 --> 00:04:14.010
so /img/LinkedInLearning.jpg

100
00:04:14.010 --> 00:04:16.010
and then .push.

101
00:04:16.010 --> 00:04:19.010
And then we will simply return

102
00:04:19.010 --> 00:04:20.040
our push

103
00:04:20.040 --> 00:04:22.020
view.

104
00:04:22.020 --> 00:04:25.070
Now, we're going to replicate basically the same method here

105
00:04:25.070 --> 00:04:28.010
but this time, we're going to do it on without.

106
00:04:28.010 --> 00:04:30.040
Public String

107
00:04:30.040 --> 00:04:33.050
demoWithoutPush.

108
00:04:33.050 --> 00:04:35.070
This time, we're not going to pass in a parameter

109
00:04:35.070 --> 00:04:38.060
and we will simply return our view.

110
00:04:38.060 --> 00:04:41.020
Right, so that's all there is to it.

111
00:04:41.020 --> 00:04:45.010
Make sure you put in your semicolons.

112
00:04:45.010 --> 00:04:47.050
Now, I have a feature in IntelliJ Ultimate Edition

113
00:04:47.050 --> 00:04:50.060
that allows me to just run a Spring application.

114
00:04:50.060 --> 00:04:52.050
If you're not using IntelliJ Ultimate Edition,

115
00:04:52.050 --> 00:04:54.070
you may not have something like this.

116
00:04:54.070 --> 00:04:57.090
What essentially it does is it goes to this NewFeaturesApp.

117
00:04:57.090 --> 00:05:00.040
You're just going to run the main method.

118
00:05:00.040 --> 00:05:03.000
Now, I get this built-in with IntelliJ Ultimate Edition.

119
00:05:03.000 --> 00:05:05.060
It does all of that configuration for me.

120
00:05:05.060 --> 00:05:07.080
So I'm going to go ahead and leverage that.

121
00:05:07.080 --> 00:05:09.060
We'll allow Maven to do the compilation

122
00:05:09.060 --> 00:05:12.030
and build of our application and start up.

123
00:05:12.030 --> 00:05:15.050
And once it's got started here,

124
00:05:15.050 --> 00:05:17.060
we'll jump over into Chrome.

125
00:05:17.060 --> 00:05:18.090
And in our Chrome window, I want you to go ahead

126
00:05:18.090 --> 00:05:21.040
and open up Developer Tools.

127
00:05:21.040 --> 00:05:23.010
And we're first going to navigate to

128
00:05:23.010 --> 00:05:32.070
https://localhost:8080/pushwithout.

129
00:05:32.070 --> 00:05:34.010
Now, you're going to notice first thing

130
00:05:34.010 --> 00:05:36.060
is that you're going to get a Connection is not Private warning

131
00:05:36.060 --> 00:05:39.030
and that's because we're using a self-signed certificate.

132
00:05:39.030 --> 00:05:42.060
Go ahead and accept that.

133
00:05:42.060 --> 00:05:44.040
In the real world, I wouldn't recommend doing that,

134
00:05:44.040 --> 00:05:46.090
but for the purpose of this demo, we're fine.

135
00:05:46.090 --> 00:05:49.000
Now, what you'll see here is that there's this big latency

136
00:05:49.000 --> 00:05:50.020
as I was waiting for that,

137
00:05:50.020 --> 00:05:54.050
so let's go ahead and remove our resource

138
00:05:54.050 --> 00:05:56.020
from the cache.

139
00:05:56.020 --> 00:05:59.040
Just going to right-click on it and remove it from cache

140
00:05:59.040 --> 00:06:01.070
and we'll do the same for the HTML.

141
00:06:01.070 --> 00:06:03.060
And now, we'll reload our page.

142
00:06:03.060 --> 00:06:05.090
Now, we get a more realistic image of what time

143
00:06:05.090 --> 00:06:07.080
it actually took to load this.

144
00:06:07.080 --> 00:06:10.040
So this loaded up at 114 milliseconds.

145
00:06:10.040 --> 00:06:12.030
And you'll see that we loaded the page

146
00:06:12.030 --> 00:06:15.030
and then we actually had the loading of the image

147
00:06:15.030 --> 00:06:17.010
and it was pull after the fact.

148
00:06:17.010 --> 00:06:20.050
And that's what we're trying to avoid by doing this.

149
00:06:20.050 --> 00:06:22.020
So just to make everything good,

150
00:06:22.020 --> 00:06:25.090
let's go ahead and remove our HTML

151
00:06:25.090 --> 00:06:29.080
and remove our image from our browser cache once again.

152
00:06:29.080 --> 00:06:33.000
Now, this time, we'll go to the with page

153
00:06:33.000 --> 00:06:34.080
and you'll see we have a much different view

154
00:06:34.080 --> 00:06:37.010
on our waterfall here in DevTools.

155
00:06:37.010 --> 00:06:41.020
Let me go and expand this out a little bit.

156
00:06:41.020 --> 00:06:43.080
You'll see that we actually have now pushed the resource

157
00:06:43.080 --> 00:06:46.050
to the page instead of pulled it.

158
00:06:46.050 --> 00:06:47.080
Another thing I want you to notice,

159
00:06:47.080 --> 00:06:50.060
I added in a protocol column into my view,

160
00:06:50.060 --> 00:06:55.070
which shows that this is HTTP2 by showing this h2 value.

161
00:06:55.070 --> 00:06:59.010
But the really important thing here is this actual view

162
00:06:59.010 --> 00:07:02.090
of the waterfall showing me how the content was pushed

163
00:07:02.090 --> 00:07:07.000
to our application instead of actually having it pulled.

164
00:07:07.000 --> 00:07:09.080
So you'll see we see Receiving Push.

165
00:07:09.080 --> 00:07:13.090
Now, while our time didn't really improve by doing this,

166
00:07:13.090 --> 00:07:16.010
the simple fact is we're only loading one resource.

167
00:07:16.010 --> 00:07:18.070
Imagine a page with lots of resources,

168
00:07:18.070 --> 00:07:20.060
like an e-commerce application that shows

169
00:07:20.060 --> 00:07:22.050
lots of product images.

170
00:07:22.050 --> 00:07:25.040
This is where you start to really see the value of push

171
00:07:25.040 --> 00:07:27.030
in a real world application.

172
00:07:27.030 --> 00:07:28.020
So give it a try.

173
00:07:28.020 --> 00:07:30.090
It may help you have some page load time improvements,

174
00:07:30.090 --> 00:07:33.010
which will always make your customers happy

175
00:07:33.010 --> 00:07:35.000
and your boss happy.

