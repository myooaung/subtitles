WEBVTT
1
00:00:00.060 --> 00:00:02.020
- [Instructor] Now the last big-picture change

2
00:00:02.020 --> 00:00:05.060
that we're going to talk about, is the Nullable annotation

3
00:00:05.060 --> 00:00:08.090
that we now have support for in Spring 5.

4
00:00:08.090 --> 00:00:11.040
Nullable is part of JSR 305,

5
00:00:11.040 --> 00:00:14.000
which is a set of annotations used primarily

6
00:00:14.000 --> 00:00:16.050
for software defect detection.

7
00:00:16.050 --> 00:00:20.070
In fact a lot of static analysis leverages JSR 305

8
00:00:20.070 --> 00:00:23.020
to determine if null checks need to be included

9
00:00:23.020 --> 00:00:25.000
in the code or not.

10
00:00:25.000 --> 00:00:28.080
IDE support also is leveraging JSR 305

11
00:00:28.080 --> 00:00:32.090
to give you compiler warnings as you're writing your code.

12
00:00:32.090 --> 00:00:35.060
Now Spring is using the Nullable annotation

13
00:00:35.060 --> 00:00:39.040
as part of its IoC container in version of control,

14
00:00:39.040 --> 00:00:40.090
or dependency injection, depending on

15
00:00:40.090 --> 00:00:42.050
how you want to look at that, but it's all

16
00:00:42.050 --> 00:00:44.040
really the same thing.

17
00:00:44.040 --> 00:00:48.040
This is an indication of optional injection points.

18
00:00:48.040 --> 00:00:50.050
And that's really key there because we're getting

19
00:00:50.050 --> 00:00:53.030
optional injection points that can be used

20
00:00:53.030 --> 00:00:56.020
for other JVM languages, and we're going to talk about that

21
00:00:56.020 --> 00:00:57.050
in a little bit.

22
00:00:57.050 --> 00:01:00.020
We get field-level annotation through the use

23
00:01:00.020 --> 00:01:02.060
of the @Nullable annotation.

24
00:01:02.060 --> 00:01:05.000
We also get parameter-level annotation

25
00:01:05.000 --> 00:01:08.010
using that same Nullable annotation.

26
00:01:08.010 --> 00:01:11.000
Indeed we can put it on the return value method,

27
00:01:11.000 --> 00:01:15.080
a parameter of a method, or a field-level value in a class.

28
00:01:15.080 --> 00:01:18.010
Now at the package level we get an annotation

29
00:01:18.010 --> 00:01:21.090
of NonNullApi, that can be applied to all of the methods

30
00:01:21.090 --> 00:01:23.050
within a package.

31
00:01:23.050 --> 00:01:25.040
One thing that you can't help but ignore

32
00:01:25.040 --> 00:01:28.010
is that the beauty of Kotlin has really influenced

33
00:01:28.010 --> 00:01:30.030
a lot of this within the JVM,

34
00:01:30.030 --> 00:01:33.000
and specifically within Spring.

35
00:01:33.000 --> 00:01:36.070
Spring has a very strong affinity towards Kotlin,

36
00:01:36.070 --> 00:01:38.060
and it appears to me that it really has become

37
00:01:38.060 --> 00:01:43.000
the defacto language of choice when you're not using Java

38
00:01:43.000 --> 00:01:45.080
for developing Spring applications.

39
00:01:45.080 --> 00:01:48.010
Kotlin itself has native support

40
00:01:48.010 --> 00:01:51.040
for non-null safety, and that's key.

41
00:01:51.040 --> 00:01:53.000
Because when you declare a variable

42
00:01:53.000 --> 00:01:55.090
you say whether it can be null or not.

43
00:01:55.090 --> 00:01:58.050
And if it is not nullable, you don't need

44
00:01:58.050 --> 00:01:59.050
to put null checks.

45
00:01:59.050 --> 00:02:02.040
But if it is nullable, you need to have null checks

46
00:02:02.040 --> 00:02:04.000
across your code.

47
00:02:04.000 --> 00:02:05.090
And this is really designed to remove

48
00:02:05.090 --> 00:02:08.010
a lot of that code bloat that happens

49
00:02:08.010 --> 00:02:11.010
when we write good-quality defensive code.

50
00:02:11.010 --> 00:02:13.020
Now I am a fan of defensive code.

51
00:02:13.020 --> 00:02:15.080
I think it's very easy to read and very clean,

52
00:02:15.080 --> 00:02:18.010
and it let's me actually check what I'm doing.

53
00:02:18.010 --> 00:02:19.080
But I'm probably in the minority

54
00:02:19.080 --> 00:02:22.070
when it comes to the beauty of that in my eyes.

55
00:02:22.070 --> 00:02:25.050
And of course beauty is always in the eye of the beholder,

56
00:02:25.050 --> 00:02:27.040
so I don't have a problem with that.

57
00:02:27.040 --> 00:02:30.000
But if you're a fan of not having null checks

58
00:02:30.000 --> 00:02:32.070
in your code and not being as defensive,

59
00:02:32.070 --> 00:02:34.070
check out the Nullable annotation.

60
00:02:34.070 --> 00:02:36.070
You might really like it, especially when

61
00:02:36.070 --> 00:02:39.000
you're writing a Spring application.

