WEBVTT
1
00:00:00.050 --> 00:00:01.040
- [Instructor] In the Spring world,

2
00:00:01.040 --> 00:00:03.060
reactive development is some of the hottest craze

3
00:00:03.060 --> 00:00:05.010
that's going on right now,

4
00:00:05.010 --> 00:00:07.030
and I'm not going to get too deep into reactive,

5
00:00:07.030 --> 00:00:09.020
but I do want to point out some of the changes

6
00:00:09.020 --> 00:00:11.020
that came across with Spring 5

7
00:00:11.020 --> 00:00:13.030
and Spring Boot 2.0.

8
00:00:13.030 --> 00:00:15.030
So there's some library changes that came across

9
00:00:15.030 --> 00:00:17.010
with this version upgrade of Spring.

10
00:00:17.010 --> 00:00:20.070
So we have Reactor version 3.1 of Flux and Mono,

11
00:00:20.070 --> 00:00:23.040
RxJava 3.1 and 2.1,

12
00:00:23.040 --> 00:00:25.090
and we now can return Flux or Mono

13
00:00:25.090 --> 00:00:27.060
from MVC controller methods

14
00:00:27.060 --> 00:00:30.070
by using this new upgraded library.

15
00:00:30.070 --> 00:00:32.050
We also get a new construct called WebClient,

16
00:00:32.050 --> 00:00:36.060
and WebClient is comparable to RestTemplate,

17
00:00:36.060 --> 00:00:37.080
but it supports both functional

18
00:00:37.080 --> 00:00:41.010
and reactive API calls over HTTP.

19
00:00:41.010 --> 00:00:44.060
It is non-blocking and it supports streaming,

20
00:00:44.060 --> 00:00:48.030
and it replaces the now deprecated AsyncRestTemplate

21
00:00:48.030 --> 00:00:51.080
that was not nearly as efficient as WebClient is.

22
00:00:51.080 --> 00:00:54.090
There's also a new module called spring-webflux,

23
00:00:54.090 --> 00:00:59.030
and this is an alternative to traditional spring-webmvc.

24
00:00:59.030 --> 00:01:01.020
As you might guess, it's reactive.

25
00:01:01.020 --> 00:01:03.070
It's asynchronous and non-blocking.

26
00:01:03.070 --> 00:01:06.070
It supports event loops and backpressure.

27
00:01:06.070 --> 00:01:09.000
And there are associated changes that go with this

28
00:01:09.000 --> 00:01:10.030
in spring-core,

29
00:01:10.030 --> 00:01:11.050
and we've talked about some of those,

30
00:01:11.050 --> 00:01:14.000
especially around the NIO changes.

31
00:01:14.000 --> 00:01:16.090
There's also now WebFlux Controller,

32
00:01:16.090 --> 00:01:18.040
and this should be very familiar

33
00:01:18.040 --> 00:01:20.000
for anyone who's done web development

34
00:01:20.000 --> 00:01:24.020
with the @Controller annotation like we did previously.

35
00:01:24.020 --> 00:01:26.080
But this is now specifically for WebFlux

36
00:01:26.080 --> 00:01:29.000
or reactive programming.

37
00:01:29.000 --> 00:01:30.070
Again, there's backpressure support

38
00:01:30.070 --> 00:01:34.050
all the way to the socket for non-blocking IO.

39
00:01:34.050 --> 00:01:37.000
We have Undertow and Netty support

40
00:01:37.000 --> 00:01:39.010
for this WebFlux Controller,

41
00:01:39.010 --> 00:01:43.050
and there's also a new WebFlux.fn functional model

42
00:01:43.050 --> 00:01:47.020
as an alternative to the @Controller annotation,

43
00:01:47.020 --> 00:01:49.000
and that's new with Spring 5.

44
00:01:49.000 --> 00:01:50.070
Now, I'm not really going to get too much deeper

45
00:01:50.070 --> 00:01:51.080
into reactive programming.

46
00:01:51.080 --> 00:01:53.080
There's a whole course out in the library

47
00:01:53.080 --> 00:01:56.030
on reactive development with Spring.

48
00:01:56.030 --> 00:01:58.060
But just know that there were some changes and upgrades,

49
00:01:58.060 --> 00:02:00.040
and I think it's pretty clear to say

50
00:02:00.040 --> 00:02:02.060
that this is the direction that we will see

51
00:02:02.060 --> 00:02:06.020
a lot of web going over the next two to three years,

52
00:02:06.020 --> 00:02:09.000
especially in the Spring framework itself.

