WEBVTT
1
00:00:00.070 --> 00:00:02.050
- One of those features that really got me

2
00:00:02.050 --> 00:00:04.090
excited with Spring 5.0 is the ability

3
00:00:04.090 --> 00:00:08.090
to have immutable objects, especially in your web APIs.

4
00:00:08.090 --> 00:00:11.030
As a security-minded developer, immutability

5
00:00:11.030 --> 00:00:14.060
within your object stack is always a great thing.

6
00:00:14.060 --> 00:00:16.070
In more than security, when you're looking

7
00:00:16.070 --> 00:00:18.060
at encapsulating objects, especially those

8
00:00:18.060 --> 00:00:22.030
DTO objects, this is a really, really good thing.

9
00:00:22.030 --> 00:00:24.050
So many people like to protect their DTOs,

10
00:00:24.050 --> 00:00:27.020
myself included, and immutability gives us

11
00:00:27.020 --> 00:00:29.010
the ability to do that.

12
00:00:29.010 --> 00:00:31.000
Well, this has always kind of been impossible

13
00:00:31.000 --> 00:00:33.050
with Spring MVC because it had to have

14
00:00:33.050 --> 00:00:36.050
a nullable constructor in order to do its work.

15
00:00:36.050 --> 00:00:39.000
Now, thank you to Kotlin and Lombok we now

16
00:00:39.000 --> 00:00:41.080
have a driver to make this possible,

17
00:00:41.080 --> 00:00:43.090
and with Spring 5.0 we get it.

18
00:00:43.090 --> 00:00:45.070
Now just a quick overview of why

19
00:00:45.070 --> 00:00:47.070
this is important before we look at the code.

20
00:00:47.070 --> 00:00:49.060
This gives us the ability to have protection

21
00:00:49.060 --> 00:00:51.050
of our objects.

22
00:00:51.050 --> 00:00:53.080
It also gives us a way to prevent application

23
00:00:53.080 --> 00:00:56.000
state from changing unexpectedly.

24
00:00:56.000 --> 00:00:58.070
Once I create an object, it's done, that's it,

25
00:00:58.070 --> 00:01:01.000
and that's really the value of immutability

26
00:01:01.000 --> 00:01:03.010
and it allows us to have much stronger contracts

27
00:01:03.010 --> 00:01:07.030
because no one can change those objects unexpectedly.

28
00:01:07.030 --> 00:01:09.060
So let's take a look at this in code.

29
00:01:09.060 --> 00:01:11.000
We're going to load up our application.

30
00:01:11.000 --> 00:01:12.050
Now there's a couple things that we need to do

31
00:01:12.050 --> 00:01:14.050
before we can get started, and that's just

32
00:01:14.050 --> 00:01:17.010
because some of the tooling that exists out there

33
00:01:17.010 --> 00:01:19.000
doesn't yet support HTTP2.

34
00:01:19.000 --> 00:01:23.070
So we actually need to go turn off all of our HTTP2.

35
00:01:23.070 --> 00:01:26.040
So I'm just going to comment out all of those properties.

36
00:01:26.040 --> 00:01:28.020
I don't really want to get rid of 'em.

37
00:01:28.020 --> 00:01:30.010
We may use 'em later.

38
00:01:30.010 --> 00:01:32.000
And now that that's done, let's open up source

39
00:01:32.000 --> 00:01:34.090
main java and enter main package here.

40
00:01:34.090 --> 00:01:37.040
We are going to create a new class file

41
00:01:37.040 --> 00:01:40.050
and we're going to call that class president.

42
00:01:40.050 --> 00:01:43.000
To our president we're going to add a Lombok

43
00:01:43.000 --> 00:01:46.070
annotation called at value.

44
00:01:46.070 --> 00:01:48.060
Now this is another one of those things

45
00:01:48.060 --> 00:01:50.090
that I may be a great feature of IntelliJ

46
00:01:50.090 --> 00:01:54.020
Ultimate Edition that your IDE doesn't have.

47
00:01:54.020 --> 00:01:56.070
IntelliJ Ultimate Edition actually fully supports

48
00:01:56.070 --> 00:01:58.040
Lombok out of the box.

49
00:01:58.040 --> 00:02:01.050
Check with your IDE provider and see if it's available.

50
00:02:01.050 --> 00:02:04.000
It may not be and you may have to rely just on

51
00:02:04.000 --> 00:02:06.050
having errors in your IDE that actually get

52
00:02:06.050 --> 00:02:08.070
resolved at compilation time.

53
00:02:08.070 --> 00:02:10.050
Some of the value of Lombok is that I don't

54
00:02:10.050 --> 00:02:12.090
actually have to play getters and setters.

55
00:02:12.090 --> 00:02:13.090
So I'm going to go ahead and put a couple

56
00:02:13.090 --> 00:02:16.070
attributes here, the first being an integer

57
00:02:16.070 --> 00:02:20.060
of name ID.

58
00:02:20.060 --> 00:02:24.060
The second being a string of first name.

59
00:02:24.060 --> 00:02:28.070
And the last one being a string of last name.

60
00:02:28.070 --> 00:02:29.070
And that's it.

61
00:02:29.070 --> 00:02:31.010
The add value annotation's actually going to give

62
00:02:31.010 --> 00:02:32.090
me a constructor that takes all

63
00:02:32.090 --> 00:02:37.090
of those arguments and getters but no setters on this class.

64
00:02:37.090 --> 00:02:39.030
Let's go ahead and close that down and we're

65
00:02:39.030 --> 00:02:42.030
going to create another new class, and this one

66
00:02:42.030 --> 00:02:46.070
we are going to call president controller.

67
00:02:46.070 --> 00:02:48.060
And then to our president controller we are going

68
00:02:48.060 --> 00:02:52.070
to add a rest controller annotation as well

69
00:02:52.070 --> 00:02:59.090
as a request mapping annotation.

70
00:02:59.090 --> 00:03:02.000
And now we are going to create an internal

71
00:03:02.000 --> 00:03:10.040
memory store, so a list of president objects.

72
00:03:10.040 --> 00:03:16.030
Call this presidents, set it equal to a new array list.

73
00:03:16.030 --> 00:03:19.070
This is just so we have somewhere to put our stuff later on.

74
00:03:19.070 --> 00:03:23.000
We're going to set a post mapping

75
00:03:23.000 --> 00:03:25.050
and on that post mapping we will return

76
00:03:25.050 --> 00:03:31.010
a president object, but we are going to add a president.

77
00:03:31.010 --> 00:03:40.000
We will take a request body of type president

78
00:03:40.000 --> 00:03:44.040
and we will simply do a presidents dot add,

79
00:03:44.040 --> 00:03:50.000
add our president, and then return him.

80
00:03:50.000 --> 00:03:51.050
Now I'm going to make one more quick change here.

81
00:03:51.050 --> 00:03:57.000
I'm actually going to remove my push controller

82
00:03:57.000 --> 00:03:58.070
'cause I don't want that push handler to get

83
00:03:58.070 --> 00:04:02.020
in the way now that we've actually turned off HTTP20.

84
00:04:02.020 --> 00:04:06.000
And we'll start up our application.

85
00:04:06.000 --> 00:04:11.000
We'll let it start up here.

86
00:04:11.000 --> 00:04:13.080
Now, prior to having the support for immutability

87
00:04:13.080 --> 00:04:15.080
what I'm about to show you would've never worked.

88
00:04:15.080 --> 00:04:17.040
It actually would've failed and said that it

89
00:04:17.040 --> 00:04:19.070
didn't have a default constructor.

90
00:04:19.070 --> 00:04:22.000
Let's jump over to a terminal window.

91
00:04:22.000 --> 00:04:25.010
So we're going to use the curl command here,

92
00:04:25.010 --> 00:04:31.060
dash x post at local host 8080 slash presidents

93
00:04:31.060 --> 00:04:40.080
dash h with a content type application slash json.

94
00:04:40.080 --> 00:04:44.050
We're going to do a dash d, open curly brace,

95
00:04:44.050 --> 00:05:02.070
ID one, first name J-E-O-R-G-E, last name Washington.

96
00:05:02.070 --> 00:05:05.040
Then that out and we'll go ahead and hit return.

97
00:05:05.040 --> 00:05:07.000
And we got a response back.

98
00:05:07.000 --> 00:05:10.080
And that response came from the actual server.

99
00:05:10.080 --> 00:05:12.050
So we're going to do an HTTP action,

100
00:05:12.050 --> 00:05:15.080
and this the HTTPIE tool that I use.

101
00:05:15.080 --> 00:05:17.030
If you don't have it, you can do a similar

102
00:05:17.030 --> 00:05:19.090
action with curl or you can install this.

103
00:05:19.090 --> 00:05:21.050
It's totally up to you.

104
00:05:21.050 --> 00:05:27.060
We're going to do a post at local host 8080 slash presidents.

105
00:05:27.060 --> 00:05:31.090
We're going to set our ID equal to one, our first

106
00:05:31.090 --> 00:05:37.030
name equal to George, then our last name

107
00:05:37.030 --> 00:05:40.010
equal to Washington.

108
00:05:40.010 --> 00:05:42.070
And we're going to set that to verbose.

109
00:05:42.070 --> 00:05:44.080
So what you'll see here is we actually did a post

110
00:05:44.080 --> 00:05:47.030
over it should be one, one, with a first name

111
00:05:47.030 --> 00:05:48.070
ID and last name.

112
00:05:48.070 --> 00:05:50.020
And then we got that response back out

113
00:05:50.020 --> 00:05:52.010
which is what we would expect, but most

114
00:05:52.010 --> 00:05:54.050
importantly we got a 200 out.

115
00:05:54.050 --> 00:05:55.090
Now the interesting thing here is if you'd done

116
00:05:55.090 --> 00:05:59.010
this prior to version 5.0 of Spring, again

117
00:05:59.010 --> 00:06:00.090
it would've failed because it didn't actually

118
00:06:00.090 --> 00:06:03.050
have a constructor that it could call.

119
00:06:03.050 --> 00:06:05.060
But we now have that, so we now have an immutable

120
00:06:05.060 --> 00:06:08.070
object in our application that we could call

121
00:06:08.070 --> 00:06:10.000
through the web API.

