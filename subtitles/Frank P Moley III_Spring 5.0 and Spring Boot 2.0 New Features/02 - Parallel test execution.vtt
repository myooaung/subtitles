WEBVTT
1
00:00:00.000 --> 00:00:01.050
- [Instructor] One of the bigger improvements

2
00:00:01.050 --> 00:00:04.020
from a testing perspective with Spring 5

3
00:00:04.020 --> 00:00:08.000
is the ability to now execute our tests in parallel.

4
00:00:08.000 --> 00:00:10.010
Now, this really is an important consideration,

5
00:00:10.010 --> 00:00:11.080
especially if you have a lot of tests.

6
00:00:11.080 --> 00:00:14.090
Very large test suites take a lot of time to run.

7
00:00:14.090 --> 00:00:16.070
It makes sense.

8
00:00:16.070 --> 00:00:20.000
Today, CI/CD pipelines must be quick

9
00:00:20.000 --> 00:00:22.060
and really, that quickness is key because if you have

10
00:00:22.060 --> 00:00:25.020
too many tests, it slows down your builds.

11
00:00:25.020 --> 00:00:26.040
People are going to start complaining,

12
00:00:26.040 --> 00:00:28.040
which means they start removing tests,

13
00:00:28.040 --> 00:00:30.030
which of course, reduces the quality

14
00:00:30.030 --> 00:00:32.050
and security of your application.

15
00:00:32.050 --> 00:00:35.030
So really, to do this, we've got to get concurrency.

16
00:00:35.030 --> 00:00:38.070
And this concurrent execution of tests can,

17
00:00:38.070 --> 00:00:40.090
and I want to emphasize the word can,

18
00:00:40.090 --> 00:00:42.090
reduce the total test time,

19
00:00:42.090 --> 00:00:46.050
especially when dealing with very large suites of tests.

20
00:00:46.050 --> 00:00:48.090
Now, in order to make this possible in Spring 5,

21
00:00:48.090 --> 00:00:51.090
there's a couple tooling changes that had to happen.

22
00:00:51.090 --> 00:00:56.050
The TestContextManager now leverages a thread-local version

23
00:00:56.050 --> 00:00:58.000
of the TestContext.

24
00:00:58.000 --> 00:01:00.040
So each thread has its own TestContext

25
00:01:00.040 --> 00:01:03.000
and it's running, so that the tests on those threads

26
00:01:03.000 --> 00:01:05.040
have access to that context

27
00:01:05.040 --> 00:01:08.000
and they don't collide on top of each other.

28
00:01:08.000 --> 00:01:10.090
We still need a runner, however, that can support

29
00:01:10.090 --> 00:01:13.040
running tests in parallel.

30
00:01:13.040 --> 00:01:15.040
And the good thing there is that Surefire works

31
00:01:15.040 --> 00:01:16.040
out of the box

32
00:01:16.040 --> 00:01:19.020
and that's what we're going to use in our example.

33
00:01:19.020 --> 00:01:20.080
Now, there's just one other thing that I want to say

34
00:01:20.080 --> 00:01:24.000
and that is that JUnit 5, at the time of this recording,

35
00:01:24.000 --> 00:01:27.030
is not set up for parallel execution.

36
00:01:27.030 --> 00:01:30.030
We really need to get Jupiter 5.3 out and at that point,

37
00:01:30.030 --> 00:01:33.030
parallel execution is only going to be experimental.

38
00:01:33.030 --> 00:01:36.070
So maybe by 5.4, 5.5, it'll be actually prime time,

39
00:01:36.070 --> 00:01:39.030
ready to go, no holds barred.

40
00:01:39.030 --> 00:01:42.040
But I want you to think about this aspect for just a moment.

41
00:01:42.040 --> 00:01:44.060
When you're writing really large test suites,

42
00:01:44.060 --> 00:01:47.030
parameterized tests run in parallel.

43
00:01:47.030 --> 00:01:50.000
That will be amazing from a time perspective,

44
00:01:50.000 --> 00:01:53.020
especially when looking at large arrays of boundary tests

45
00:01:53.020 --> 00:01:54.060
that we can very easily run

46
00:01:54.060 --> 00:01:57.060
through a parameterized test framework.

47
00:01:57.060 --> 00:02:00.040
So let's jump into code and see how to turn this on.

48
00:02:00.040 --> 00:02:01.060
So over here in our IDE,

49
00:02:01.060 --> 00:02:03.070
we're going to go ahead and open up our application.

50
00:02:03.070 --> 00:02:05.050
The first place that we're going to go

51
00:02:05.050 --> 00:02:07.080
is we're going to go to the pom.

52
00:02:07.080 --> 00:02:09.030
And in our pom, we're going to make a couple changes.

53
00:02:09.030 --> 00:02:11.020
The first thing that I want to do

54
00:02:11.020 --> 00:02:13.010
is actually remove the JSON-B.

55
00:02:13.010 --> 00:02:15.010
We don't need it anymore

56
00:02:15.010 --> 00:02:18.040
and I don't want to have it get in the way.

57
00:02:18.040 --> 00:02:20.040
So we're going to come down here into the build section

58
00:02:20.040 --> 00:02:22.090
and we're going to add a new plugin.

59
00:02:22.090 --> 00:02:25.020
And technically, we're not adding a plugin.

60
00:02:25.020 --> 00:02:28.010
We're actually just configuring an existing plugin.

61
00:02:28.010 --> 00:02:30.070
The plugin that we're going to configure

62
00:02:30.070 --> 00:02:32.080
is Maven Surefire.

63
00:02:32.080 --> 00:02:34.080
With the Maven Surefire plugin,

64
00:02:34.080 --> 00:02:37.030
I'm going to pass in a configuration.

65
00:02:37.030 --> 00:02:40.000
And the configuration that we're going to pass it

66
00:02:40.000 --> 00:02:44.020
is parallel and we're going to set that equal to method.

67
00:02:44.020 --> 00:02:47.030
Now, what this says is that you can parallelized the tests

68
00:02:47.030 --> 00:02:48.080
at the method level.

69
00:02:48.080 --> 00:02:50.070
You have many options here and I encourage you

70
00:02:50.070 --> 00:02:53.020
to take a look at this documentation

71
00:02:53.020 --> 00:02:56.050
to see which option will work best for your situation.

72
00:02:56.050 --> 00:02:59.040
We're also going to give it a little bit of leeway here

73
00:02:59.040 --> 00:03:02.080
and we're going to allow it to use unlimited threads.

74
00:03:02.080 --> 00:03:04.060
Now, with all that said and done,

75
00:03:04.060 --> 00:03:07.090
we're ready to actually go implement a test.

76
00:03:07.090 --> 00:03:11.040
So let's go to src, test, java,

77
00:03:11.040 --> 00:03:15.060
and we'll go ahead and reuse our existing application test.

78
00:03:15.060 --> 00:03:17.010
So the first thing that we're going to do here

79
00:03:17.010 --> 00:03:19.040
is we're going to add an annotation

80
00:03:19.040 --> 00:03:22.050
to @AutoConfigureMockMvc.

81
00:03:22.050 --> 00:03:25.070
And we'll go ahead and get rid of this ContextLoads test.

82
00:03:25.070 --> 00:03:27.090
Doesn't really do a lot after we've actually got

83
00:03:27.090 --> 00:03:29.070
a real test working.

84
00:03:29.070 --> 00:03:34.010
We're going to add Autowired in now, an instance

85
00:03:34.010 --> 00:03:36.060
of MockMvc.

86
00:03:36.060 --> 00:03:37.070
Let me shrink this window down,

87
00:03:37.070 --> 00:03:39.040
so we've got a little bit more room.

88
00:03:39.040 --> 00:03:41.030
Now, MockMvc is a great tool

89
00:03:41.030 --> 00:03:44.060
when you're calling into web APIs or websites.

90
00:03:44.060 --> 00:03:46.060
And I highly encourage you to study up on it

91
00:03:46.060 --> 00:03:48.080
if you've never used it before.

92
00:03:48.080 --> 00:03:50.090
We're going to create a new test.

93
00:03:50.090 --> 00:03:53.050
Just like always, so public void,

94
00:03:53.050 --> 00:03:57.050
addPresident, and we'll let this throw an exception.

95
00:03:57.050 --> 00:04:00.020
Now, what might be kind of fun for your example

96
00:04:00.020 --> 00:04:02.050
is to copy this test a whole bunch of times

97
00:04:02.050 --> 00:04:04.060
and run this through your test runner.

98
00:04:04.060 --> 00:04:05.090
But we're going to run this in the IDE

99
00:04:05.090 --> 00:04:08.000
and really, we don't have a good benchmark

100
00:04:08.000 --> 00:04:10.010
'cause we're not going to write thousands of tests

101
00:04:10.010 --> 00:04:12.040
to be able to show the parallel execution.

102
00:04:12.040 --> 00:04:14.030
But I am going to show you how a test would run

103
00:04:14.030 --> 00:04:15.080
in a parallel thread.

104
00:04:15.080 --> 00:04:19.030
So within this, we'll go ahead and create our test.

105
00:04:19.030 --> 00:04:24.010
And I'm going to do a little bit of JSON here in a string,

106
00:04:24.010 --> 00:04:28.040
so we're going to pass in an id with a value of one

107
00:04:28.040 --> 00:04:31.090
and then we will set firstName

108
00:04:31.090 --> 00:04:33.050
equal George.

109
00:04:33.050 --> 00:04:36.010
Remember to escape those quotes

110
00:04:36.010 --> 00:04:38.070
'cause you need them in the JSON payload.

111
00:04:38.070 --> 00:04:41.080
And then we are going to do lastName.

112
00:04:41.080 --> 00:04:43.010
It's a little hard to think about

113
00:04:43.010 --> 00:04:45.070
what you're actually typing here.

114
00:04:45.070 --> 00:04:48.020
So take your time and make sure you get all of this right

115
00:04:48.020 --> 00:04:49.040
or else you're going to be frustrated

116
00:04:49.040 --> 00:04:52.000
when things aren't working the way you expect.

117
00:04:52.000 --> 00:04:53.090
And remember to close that out.

118
00:04:53.090 --> 00:04:57.040
So that's our JSON payload that we're going to pass

119
00:04:57.040 --> 00:04:58.060
to our post command.

120
00:04:58.060 --> 00:05:02.020
And in order to do that, we'll execute on MockMvc

121
00:05:02.020 --> 00:05:03.080
the perform action.

122
00:05:03.080 --> 00:05:07.000
And to the perform action, we will send a post

123
00:05:07.000 --> 00:05:10.080
and we are going to post to /presidents

124
00:05:10.080 --> 00:05:13.070
and we will set our content

125
00:05:13.070 --> 00:05:16.080
equal to our president JSON string.

126
00:05:16.080 --> 00:05:18.010
Go ahead and import that in,

127
00:05:18.010 --> 00:05:21.030
so that I get some auto-complete here.

128
00:05:21.030 --> 00:05:24.010
And now, we're going to set our content type

129
00:05:24.010 --> 00:05:28.000
equal to MediaType.APPLICATION_JSON

130
00:05:28.000 --> 00:05:29.040
and we'll go ahead and set UTF8.

131
00:05:29.040 --> 00:05:31.000
That should be fun.

132
00:05:31.000 --> 00:05:33.040
And now, we will add

133
00:05:33.040 --> 00:05:35.010
andExpect.

134
00:05:35.010 --> 00:05:37.080
And we will simply ask it to tell us that it is

135
00:05:37.080 --> 00:05:39.080
an OK status.

136
00:05:39.080 --> 00:05:42.030
Do our final imports here.

137
00:05:42.030 --> 00:05:46.000
Make that a method call.

138
00:05:46.000 --> 00:05:47.030
Clean that one up.

139
00:05:47.030 --> 00:05:50.010
Excellent, so now, I can actually just run my test.

140
00:05:50.010 --> 00:05:51.080
Now, I'm going to run this with the IDE

141
00:05:51.080 --> 00:05:53.020
just to show that the test runs

142
00:05:53.020 --> 00:05:54.090
and that Surefire didn't break

143
00:05:54.090 --> 00:05:58.030
because a Maven compilation is happening in the background.

144
00:05:58.030 --> 00:06:00.050
However, in the real world, we're not going to see this

145
00:06:00.050 --> 00:06:03.010
with the IDE, so we're actually going to need to run this

146
00:06:03.010 --> 00:06:05.020
through a build machine like Jenkins.

147
00:06:05.020 --> 00:06:07.000
And again, we'd have to have lots of tests

148
00:06:07.000 --> 00:06:09.010
to feel the benefit of this.

149
00:06:09.010 --> 00:06:11.010
But what you would find is that as you are adding

150
00:06:11.010 --> 00:06:14.030
more and more tests, you would get some reduction in time

151
00:06:14.030 --> 00:06:15.050
by running them in parallel

152
00:06:15.050 --> 00:06:16.090
and that is again, a big deal

153
00:06:16.090 --> 00:06:18.090
when you're building large systems.

154
00:06:18.090 --> 00:06:22.000
So our test ran, everything is fine, good to go.

