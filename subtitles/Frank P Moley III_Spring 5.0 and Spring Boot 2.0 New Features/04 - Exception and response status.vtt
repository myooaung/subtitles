WEBVTT
1
00:00:00.050 --> 00:00:02.080
- [Narrator] Of all the changes in spring 5.0,

2
00:00:02.080 --> 00:00:05.000
I think the changes to the exception handling,

3
00:00:05.000 --> 00:00:06.080
especially in the web world

4
00:00:06.080 --> 00:00:09.070
is the one area that will save you the most amount of time,

5
00:00:09.070 --> 00:00:12.040
especially if you've ever done exception handling

6
00:00:12.040 --> 00:00:13.090
using response status.

7
00:00:13.090 --> 00:00:16.020
Let's jump in here and take a look at that.

8
00:00:16.020 --> 00:00:17.020
First of all, there's some changes

9
00:00:17.020 --> 00:00:19.060
to the actual exception handler.

10
00:00:19.060 --> 00:00:23.010
You now have the ability to have redirect attributes.

11
00:00:23.010 --> 00:00:25.060
These redirect attributes give you flash attributes

12
00:00:25.060 --> 00:00:27.090
that you can add to a redirect,

13
00:00:27.090 --> 00:00:30.030
which is really useful for providing messaging

14
00:00:30.030 --> 00:00:33.000
around page redirects due to an error.

15
00:00:33.000 --> 00:00:36.060
And that's if you're using the exception handler API.

16
00:00:36.060 --> 00:00:38.060
I don't like using exception handler,

17
00:00:38.060 --> 00:00:42.090
I think it's too much abstraction away from the actual code.

18
00:00:42.090 --> 00:00:45.040
And to date, I've always used response status,

19
00:00:45.040 --> 00:00:48.060
which is just an annotation that you put on an exception

20
00:00:48.060 --> 00:00:51.040
that allows you to actually control the response status

21
00:00:51.040 --> 00:00:54.020
in the messaging that goes with that exception.

22
00:00:54.020 --> 00:00:56.020
The problem is doing that,

23
00:00:56.020 --> 00:00:58.010
that you actually get exception bloat

24
00:00:58.010 --> 00:00:59.060
because you have all kinds of exceptions

25
00:00:59.060 --> 00:01:04.040
that are slight variations of the same exact thing.

26
00:01:04.040 --> 00:01:06.000
Spring has now addressed this

27
00:01:06.000 --> 00:01:08.050
with the response status exception,

28
00:01:08.050 --> 00:01:11.040
which is a runtime exception that you can use

29
00:01:11.040 --> 00:01:13.070
to actually control the response status

30
00:01:13.070 --> 00:01:16.070
and messaging of your application.

31
00:01:16.070 --> 00:01:20.050
This is a huge decoupling that comes from this change

32
00:01:20.050 --> 00:01:22.070
and to me this is really powerful,

33
00:01:22.070 --> 00:01:25.080
because I would write applications with 10 to 15

34
00:01:25.080 --> 00:01:29.000
different exception classes that I would then duplicate

35
00:01:29.000 --> 00:01:30.080
into my next micro service

36
00:01:30.080 --> 00:01:32.070
and then in my next micro service.

37
00:01:32.070 --> 00:01:34.090
And they all were slightly different

38
00:01:34.090 --> 00:01:38.020
because of the way that the application itself worked,

39
00:01:38.020 --> 00:01:40.090
but are really all doing the same thing.

40
00:01:40.090 --> 00:01:44.000
Let me show you how much of an improvement this is.

41
00:01:44.000 --> 00:01:46.080
What I'd like to do is jump into our web application here

42
00:01:46.080 --> 00:01:49.030
and open up source main Java

43
00:01:49.030 --> 00:01:51.020
and then our default package here.

44
00:01:51.020 --> 00:01:54.060
We're going to create a new controller class

45
00:01:54.060 --> 00:01:57.040
and this one we're going to call demo controller.

46
00:01:57.040 --> 00:01:58.080
To our demo controller,

47
00:01:58.080 --> 00:02:03.020
let's add a rest controller annotation

48
00:02:03.020 --> 00:02:06.020
in our request mapping annotation.

49
00:02:06.020 --> 00:02:09.000
And we're going to send this one to demo.

50
00:02:09.000 --> 00:02:10.060
And the first thing we're going to do,

51
00:02:10.060 --> 00:02:15.030
is we're going to do a get mapping on 400.

52
00:02:15.030 --> 00:02:18.020
And I'll show you what this is all about here in a moment.

53
00:02:18.020 --> 00:02:22.050
So public string, get400.

54
00:02:22.050 --> 00:02:25.070
Now, back in the day, in order to actually get an exception,

55
00:02:25.070 --> 00:02:30.040
to throw with a 400 using the response status annotation,

56
00:02:30.040 --> 00:02:32.020
we would have to create an exception class

57
00:02:32.020 --> 00:02:33.040
and to that exception class,

58
00:02:33.040 --> 00:02:35.030
we would have to put the response status

59
00:02:35.030 --> 00:02:37.080
and then we would throw it from our method.

60
00:02:37.080 --> 00:02:39.000
Now what you actually can do

61
00:02:39.000 --> 00:02:44.050
is simply throw a response status exception

62
00:02:44.050 --> 00:02:48.030
and you will pass it an HTTP status.

63
00:02:48.030 --> 00:02:51.090
In this case, we're going to do bad request, which is 400.

64
00:02:51.090 --> 00:02:56.060
And now we can put a message that demo through 400.

65
00:02:56.060 --> 00:03:00.020
Let me shrink my window here so it's a little bit clearer

66
00:03:00.020 --> 00:03:04.020
On the screen, that's all there is to that one.

67
00:03:04.020 --> 00:03:07.030
Will do another one just so we can see the differences here.

68
00:03:07.030 --> 00:03:09.090
We'll do a little 409 action

69
00:03:09.090 --> 00:03:14.030
public string get 409.

70
00:03:14.030 --> 00:03:19.080
And we will once again throw a new response status exception

71
00:03:19.080 --> 00:03:24.010
was an HTTP status of conflict.

72
00:03:24.010 --> 00:03:25.070
And we will be a little funny here

73
00:03:25.070 --> 00:03:28.080
and say a little formula 409 action.

74
00:03:28.080 --> 00:03:31.070
Alright, we'll go ahead and start up our application.

75
00:03:31.070 --> 00:03:34.070
Once this gets started we'll jump over to our terminal

76
00:03:34.070 --> 00:03:38.010
and I will once again use my HTTP tool

77
00:03:38.010 --> 00:03:39.070
and it will simply go to local host

78
00:03:39.070 --> 00:03:44.060
8080/demo/400

79
00:03:44.060 --> 00:03:47.040
go ahead and do a little verbose action on that.

80
00:03:47.040 --> 00:03:49.050
And you'll see that we get a bad request

81
00:03:49.050 --> 00:03:51.080
demo through 400 with our message.

82
00:03:51.080 --> 00:03:53.040
So now we have really good control

83
00:03:53.040 --> 00:03:56.060
of the actual output of our status code.

84
00:03:56.060 --> 00:03:58.090
This is very valuable if in your method

85
00:03:58.090 --> 00:04:02.040
you want to send an area code that your application generates,

86
00:04:02.040 --> 00:04:05.050
in addition to the standard HTTP response.

87
00:04:05.050 --> 00:04:06.060
Let's run that method again

88
00:04:06.060 --> 00:04:09.050
but this time we're going to go to 409.

89
00:04:09.050 --> 00:04:12.090
And you'll see indeed, our messages changed as expected.

90
00:04:12.090 --> 00:04:14.080
I cannot tell you how much time

91
00:04:14.080 --> 00:04:17.040
this single feature alone will save me,

92
00:04:17.040 --> 00:04:20.060
especially in creating five to 10 runtime exceptions

93
00:04:20.060 --> 00:04:23.000
for my application to handle all of the bad

94
00:04:23.000 --> 00:04:26.070
request situations and all the conflict situations

95
00:04:26.070 --> 00:04:28.050
and the list goes on and on.

96
00:04:28.050 --> 00:04:30.040
So really consider using this great addition

97
00:04:30.040 --> 00:04:32.000
to the spring framework.

