WEBVTT
1
00:00:00.060 --> 00:00:03.020
- [Instructor] A big part of the Spring 5.0 improvements

2
00:00:03.020 --> 00:00:04.090
come around the testing,

3
00:00:04.090 --> 00:00:08.090
specifically around the utilization of JUnit 5 Jupiter.

4
00:00:08.090 --> 00:00:09.080
With Spring 5,

5
00:00:09.080 --> 00:00:12.040
the JUnit 5 or JUnit Jupiter

6
00:00:12.040 --> 00:00:15.040
brings both programming and extension models,

7
00:00:15.040 --> 00:00:20.020
and we get all of that support within Spring Test context.

8
00:00:20.020 --> 00:00:23.060
The @RunWith annotation is no longer really supported.

9
00:00:23.060 --> 00:00:27.030
Instead we're now going with the @ExtendsWith annotation.

10
00:00:27.030 --> 00:00:29.020
And as such, there is a new class.

11
00:00:29.020 --> 00:00:30.080
Instead of the JUnit 4 runner,

12
00:00:30.080 --> 00:00:34.040
there is now a SpringExtension.class.

13
00:00:34.040 --> 00:00:37.030
Now, this provides full support for TestContext

14
00:00:37.030 --> 00:00:39.090
and all of its previous feature set.

15
00:00:39.090 --> 00:00:42.040
We've also had several annotations that were added

16
00:00:42.040 --> 00:00:44.080
to make your life just a little bit easier.

17
00:00:44.080 --> 00:00:47.030
The first is the SpringJUnitConfig,

18
00:00:47.030 --> 00:00:51.010
and really this is just a composition of two annotations,

19
00:00:51.010 --> 00:00:53.080
the @ExtendWith for SpringExtension class,

20
00:00:53.080 --> 00:00:55.080
and that's the Jupiter component,

21
00:00:55.080 --> 00:00:57.040
and the @ContextConfiguration,

22
00:00:57.040 --> 00:00:59.020
and that was the Spring component

23
00:00:59.020 --> 00:01:02.040
that allowed you to specify your application context

24
00:01:02.040 --> 00:01:04.030
that you wanted to be loaded

25
00:01:04.030 --> 00:01:07.020
during the running of your JUnit test.

26
00:01:07.020 --> 00:01:08.070
Now, this gives us the ability to configure

27
00:01:08.070 --> 00:01:10.090
the application context within JUnit

28
00:01:10.090 --> 00:01:13.070
and let it all be run with the ExtendWith

29
00:01:13.070 --> 00:01:15.050
SpringExtension class.

30
00:01:15.050 --> 00:01:19.000
So we get all of that with just one simple annotation.

31
00:01:19.000 --> 00:01:21.080
And it gets a little bit better in the web role,

32
00:01:21.080 --> 00:01:24.040
where now we have a composition of three parts.

33
00:01:24.040 --> 00:01:26.080
So we get both of the parts from SpringJUnitConfig

34
00:01:26.080 --> 00:01:28.090
that we just solved.

35
00:01:28.090 --> 00:01:33.010
In addition, we get the WebApplicationContext annotation.

36
00:01:33.010 --> 00:01:36.060
Now, this provides a servlet context to our tests,

37
00:01:36.060 --> 00:01:37.090
which can be very valuable

38
00:01:37.090 --> 00:01:39.090
when you're doing integration tests

39
00:01:39.090 --> 00:01:42.030
of the full stack of your application

40
00:01:42.030 --> 00:01:45.080
within the confines of a JUnit running locally.

41
00:01:45.080 --> 00:01:48.010
This is really powerful in these integration tests

42
00:01:48.010 --> 00:01:50.070
where we don't want to reach out to a remote server.

43
00:01:50.070 --> 00:01:52.000
We want to run it all locally

44
00:01:52.000 --> 00:01:55.000
with the proper servlet context.

45
00:01:55.000 --> 00:01:56.060
We also get the addition

46
00:01:56.060 --> 00:01:58.080
of conditional running of our tests,

47
00:01:58.080 --> 00:02:00.080
and the benefit here is that we can use

48
00:02:00.080 --> 00:02:04.090
the all-familiar Spring Expression Language to do our work.

49
00:02:04.090 --> 00:02:06.060
So we get two annotations here,

50
00:02:06.060 --> 00:02:08.060
EnabledIf and DisabledIf,

51
00:02:08.060 --> 00:02:11.080
and you can see what those are for just by the names.

52
00:02:11.080 --> 00:02:13.060
The conditionals there can be anything,

53
00:02:13.060 --> 00:02:16.010
including in Spring Expression Language,

54
00:02:16.010 --> 00:02:18.020
which allows us to look at properties

55
00:02:18.020 --> 00:02:20.060
and other values within the ecosystem

56
00:02:20.060 --> 00:02:23.000
and determine if we should run the test or not.

57
00:02:23.000 --> 00:02:25.090
Things like profiles are really powerful here.

58
00:02:25.090 --> 00:02:27.080
Now, this can be applied at a method level

59
00:02:27.080 --> 00:02:29.010
or at a class level,

60
00:02:29.010 --> 00:02:30.060
so if we have an entire class

61
00:02:30.060 --> 00:02:32.090
that we don't want to run if we're on a Mac,

62
00:02:32.090 --> 00:02:34.090
for instance, we can do that.

63
00:02:34.090 --> 00:02:37.000
Or an entire class that we want to run

64
00:02:37.000 --> 00:02:38.010
if we're in this condition,

65
00:02:38.010 --> 00:02:40.000
or just an individual test,

66
00:02:40.000 --> 00:02:42.030
that conditional running becomes very powerful

67
00:02:42.030 --> 00:02:45.000
in those situations.

