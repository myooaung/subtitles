WEBVTT
1
00:00:00.050 --> 00:00:01.040
- [Instructor] In Spring Boot two,

2
00:00:01.040 --> 00:00:03.010
there's some pretty significant changes

3
00:00:03.010 --> 00:00:06.000
to the configuration system in addition to

4
00:00:06.000 --> 00:00:09.040
many of the configuration properties being changed.

5
00:00:09.040 --> 00:00:10.040
One of the things to note

6
00:00:10.040 --> 00:00:12.090
is the way that environment is bound.

7
00:00:12.090 --> 00:00:14.080
The binding mechanism, for instance,

8
00:00:14.080 --> 00:00:18.090
for @ConfigurationProperties has been completely overhauled.

9
00:00:18.090 --> 00:00:20.000
Now for the average user,

10
00:00:20.000 --> 00:00:23.000
this isn't going to provide a lot of changes,

11
00:00:23.000 --> 00:00:24.040
but you may see some changes

12
00:00:24.040 --> 00:00:27.030
if you are writing custom starters.

13
00:00:27.030 --> 00:00:28.050
The rules around binding

14
00:00:28.050 --> 00:00:30.060
have become a little bit more strict,

15
00:00:30.060 --> 00:00:31.080
and those are really designed

16
00:00:31.080 --> 00:00:34.070
to help you maintain your contract.

17
00:00:34.070 --> 00:00:38.070
Now one of the new changes is the ability to do API binding,

18
00:00:38.070 --> 00:00:42.030
so you get access to that API, that binding API,

19
00:00:42.030 --> 00:00:44.030
from anywhere within your code,

20
00:00:44.030 --> 00:00:47.090
not just within configuration properties.

21
00:00:47.090 --> 00:00:50.070
Now some of those property file rule changes

22
00:00:50.070 --> 00:00:51.060
and how they work

23
00:00:51.060 --> 00:00:55.030
is that every property is now converted to all lowercase.

24
00:00:55.030 --> 00:00:58.010
Special characters are removed.

25
00:00:58.010 --> 00:01:00.020
You can define lists of properties,

26
00:01:00.020 --> 00:01:02.090
so if you have a property that there isn't a list expected,

27
00:01:02.090 --> 00:01:05.060
you can provide those with traditional array notation,

28
00:01:05.060 --> 00:01:08.010
which is the open square bracket,

29
00:01:08.010 --> 00:01:10.020
a number, and then the closed square bracket.

30
00:01:10.020 --> 00:01:12.050
It's a zero-based index.

31
00:01:12.050 --> 00:01:13.070
Or you can simply provide

32
00:01:13.070 --> 00:01:16.030
a comma-separated content list

33
00:01:16.030 --> 00:01:19.000
and have that mapped into a list, as well.

34
00:01:19.000 --> 00:01:20.060
Now if you're not using property files,

35
00:01:20.060 --> 00:01:22.030
but instead using YAML,

36
00:01:22.030 --> 00:01:25.010
you're going to have very similar results.

37
00:01:25.010 --> 00:01:26.080
So, the similar practice with the way

38
00:01:26.080 --> 00:01:28.000
the property files works

39
00:01:28.000 --> 00:01:31.020
as far as the case and special characters,

40
00:01:31.020 --> 00:01:33.070
but you also get standard YAML formatted lists,

41
00:01:33.070 --> 00:01:36.090
which is the little hyphen in front of the line.

42
00:01:36.090 --> 00:01:39.010
You do not get the square bracket notation,

43
00:01:39.010 --> 00:01:42.010
but that's okay because YAML provides its own way.

44
00:01:42.010 --> 00:01:45.020
You do have support for comma-separated lists still,

45
00:01:45.020 --> 00:01:47.010
if you need to use that.

46
00:01:47.010 --> 00:01:50.010
Now I mentioned a moment ago about this binding API,

47
00:01:50.010 --> 00:01:52.080
and I just want to talk a little bit about this.

48
00:01:52.080 --> 00:01:54.040
This provides a mechanism

49
00:01:54.040 --> 00:01:57.080
for binding properties directly into your code,

50
00:01:57.080 --> 00:02:01.070
so if, for instance, you want to provide a list of values

51
00:02:01.070 --> 00:02:03.090
as configuration property,

52
00:02:03.090 --> 00:02:05.080
you can very easily create a class

53
00:02:05.080 --> 00:02:08.000
and bind those to that class

54
00:02:08.000 --> 00:02:10.020
through the traditional configuration properties

55
00:02:10.020 --> 00:02:12.070
or through this binding API.

56
00:02:12.070 --> 00:02:15.070
I actually kind of like the idea of binding API

57
00:02:15.070 --> 00:02:18.040
because then I can see it in my code.

58
00:02:18.040 --> 00:02:21.040
Now this supports single values as well as lists,

59
00:02:21.040 --> 00:02:23.080
and you still get a converter support.

60
00:02:23.080 --> 00:02:25.000
And this is really powerful

61
00:02:25.000 --> 00:02:26.080
when you're dealing with things like duration,

62
00:02:26.080 --> 00:02:30.030
or other traditional standardized formats,

63
00:02:30.030 --> 00:02:34.020
so for instance 10s becomes 10 seconds in a duration.

64
00:02:34.020 --> 00:02:35.090
There's several converters built in

65
00:02:35.090 --> 00:02:37.080
outside of lists and duration.

66
00:02:37.080 --> 00:02:40.000
Take a look at that in the documentation

67
00:02:40.000 --> 00:02:41.080
and it'll give you an idea of how

68
00:02:41.080 --> 00:02:44.010
this binding API can help you.

69
00:02:44.010 --> 00:02:45.090
Now, configuration is one of those things

70
00:02:45.090 --> 00:02:48.090
that we tend to set once and never look at again,

71
00:02:48.090 --> 00:02:52.030
so it's not really that critical for an upgrade path

72
00:02:52.030 --> 00:02:54.020
unless you run into issues,

73
00:02:54.020 --> 00:02:56.060
which is why I wanted to talk about these

74
00:02:56.060 --> 00:02:58.090
because if you had things that were previously accepted

75
00:02:58.090 --> 00:03:01.060
that have now been excluded based on the rule changes,

76
00:03:01.060 --> 00:03:03.060
it's important to make note of that

77
00:03:03.060 --> 00:03:08.000
and to be aware as you're doing your upgrade from 1.5 to 2.0

