WEBVTT

00:04.380 --> 00:10.400
Previously we changed the index page here to use pto instead of my ask you a lie.

00:10.800 --> 00:17.210
Let's do the same with the individual article page.

00:17.220 --> 00:22.800
The first thing we're doing in the article page is getting the database connection using the get d.b.

00:22.830 --> 00:30.650
function which returns my Eskew allied database connection object in the index page that we changed

00:30.650 --> 00:34.970
to use PDA although we create a new database object.

00:35.100 --> 00:39.480
Then Karl they get canned method on it to get the connection.

00:39.480 --> 00:40.560
So that's copy this

00:43.740 --> 00:45.400
and replace the my.

00:45.400 --> 00:46.330
ESKEW a lifeline

00:49.440 --> 00:51.000
to use this class.

00:51.000 --> 00:57.900
We need to require the file where the class is defined as we don't need this database include anymore

00:58.400 --> 01:06.710
as this is where they get dbe function is we can replace this line to require the Database class instead.

01:08.950 --> 01:15.700
Once we have the connection Will Carling they get article function which is defined in the includes

01:15.790 --> 01:20.590
article that P HP P file here.

01:20.590 --> 01:27.400
First we're creating a string variable that contains the ESC U L and as we using a prepared statement

01:27.670 --> 01:36.250
we're inserting the idea of the article that we want with a place holder in my esky Well I place holders

01:36.280 --> 01:37.820
in prepared statements.

01:37.840 --> 01:47.950
Question mark characters in PD so you can use question marks as place holders too but you can also use

01:48.010 --> 01:50.070
named parameters.

01:50.080 --> 01:55.060
This is one of the advantages pdl has over my esky Well I.

01:56.780 --> 02:04.190
So let's change this from a question mark to a named parameter which is a colon followed by a label

02:04.220 --> 02:12.290
of your choice using named parameters makes the ESC u l much easier to read especially if you have several

02:12.290 --> 02:15.320
parameters in it.

02:15.320 --> 02:18.090
Then as with my ESC you a lie.

02:18.120 --> 02:25.640
We prepare the statement by calling the prepare method on the connection object passing in the Eskew

02:25.640 --> 02:27.000
L string.

02:29.430 --> 02:34.560
Next we're not going to check if the statement is false as if there's an error.

02:34.680 --> 02:43.330
An exception will be thrown which will deal with later so we can remove this.

02:44.990 --> 02:47.540
Like that.

02:47.540 --> 02:55.730
Next we need to bind a value to the parameter in the ESC u l string in PD So we call the bind value

02:55.730 --> 03:06.050
method on the statement object passing in the named parameter the value and the type.

03:06.050 --> 03:12.440
This is also where it's easier with named parameters as it's easier to see the value you're assigning

03:12.680 --> 03:14.310
to each perimeter.

03:17.590 --> 03:28.520
As father datatype this is one of these pdl class Constance billion integer string and so on.

03:29.090 --> 03:30.870
The I.D. is an integer.

03:31.040 --> 03:40.640
So we use that class constant to execute to Pedia prepared statement we call the execute method on the

03:40.640 --> 03:42.980
statement object.

03:43.970 --> 03:48.140
Then if this returns true we need to get the results.

03:50.420 --> 03:52.750
This is also easier in PD 0.

03:52.880 --> 03:57.220
Then in my Eskew ally we can replace these two.

03:57.230 --> 04:08.630
My Escuela aligns with one line of pdl where we call the fetch method on the statement object.

04:08.630 --> 04:13.810
This clearly shows the basic steps of a prepared statement.

04:14.150 --> 04:15.680
Prepare.

04:15.680 --> 04:16.650
Execute.

04:16.790 --> 04:20.660
Fetch.

04:20.660 --> 04:28.850
As with my esky Well I code we want an associative array of data so we pass in the fetch a SAQ class

04:28.880 --> 04:30.150
constant.

04:32.540 --> 04:33.620
Like that.

04:37.480 --> 04:39.190
Let's try that out.

04:39.250 --> 04:46.260
If I click on an article to view the individual article page then this works just as before.

04:46.950 --> 04:53.770
Let's see what happens if I supply an I.D. of a rijkaard that doesn't exist.

04:54.730 --> 04:59.930
We no longer get the article not found message that we did before.

05:02.220 --> 05:05.800
This is because the pdaf fetch method returns false.

05:05.820 --> 05:14.790
If no records are found but were checking for it being null in the article script we can simplify this

05:14.790 --> 05:25.930
code by changing this if and swapping the if and else blocks like that.

05:26.010 --> 05:33.490
Now if the article variable contains anything other than false are null the data will be displayed.

05:33.750 --> 05:40.110
Otherwise we'll get the not found message.

05:40.260 --> 05:44.120
So now if we have a valid I.D. We see the details.

05:44.370 --> 05:48.550
But if we don't we get the not found message.
