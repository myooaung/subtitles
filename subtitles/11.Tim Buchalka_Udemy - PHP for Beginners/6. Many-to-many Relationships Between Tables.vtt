WEBVTT

00:05.580 --> 00:09.900
Sometimes a one to many relationship isn't enough.

00:10.160 --> 00:16.500
In some cases you need to be able to have multiple records on both sides of a relationship.

00:16.550 --> 00:24.800
For example an article can be related to in many categories and a category can be related to many articles

00:26.360 --> 00:29.540
to model a Many to Many relationship between tables.

00:29.540 --> 00:31.690
We need to add another table.

00:31.730 --> 00:35.200
This is sometimes referred to as a join table.

00:35.620 --> 00:43.670
There are many to many relationship is basically two one to many relationships via the join table.

00:44.880 --> 00:51.990
Let's add a table to our database to model a Many to Many relationship between the article and the category

00:51.990 --> 00:53.350
tables.

00:53.400 --> 00:58.890
We'll call it Article category and we'll give it to columns.

01:01.360 --> 01:09.520
The first column is a foreign key to the article table called Article idae which is an integer.

01:09.970 --> 01:18.670
The second column is a foreign key to the category table called category idae which is also an integer.

01:18.750 --> 01:20.090
Our quick save.

01:20.680 --> 01:22.430
And there's the table.

01:24.470 --> 01:30.490
In order to uniquely identify each row of a table we need a primary key.

01:30.620 --> 01:36.490
In other tables we've added an integer i.e. D column as this is a join table.

01:36.500 --> 01:38.500
This isn't necessary though.

01:38.900 --> 01:42.130
We can create an index on two columns.

01:43.970 --> 01:49.330
Make it primary and select both columns in the table.

01:52.170 --> 01:59.550
This primary key will uniquely identify every row of this table every row being the combination of an

01:59.610 --> 02:02.280
article and a category.

02:04.860 --> 02:09.710
Next we can add the foreign key constraints to this table.

02:09.750 --> 02:16.550
First the article idae is a foreign key to the article table and the idae column.

02:18.010 --> 02:19.770
Then the category idae.

02:21.330 --> 02:25.690
Is a foreign key to the category table and the I.D. column there.

02:26.890 --> 02:35.480
Will Change the constraints to cascade because if an article is deleted we want any corresponding records

02:35.500 --> 02:38.410
in the join table to be deleted too.

02:38.500 --> 02:40.760
And likewise for categories.

02:41.920 --> 02:42.980
Our quick save.

02:44.210 --> 02:47.180
And that completes the join table.

02:50.270 --> 02:55.690
Let's insert some data as we've defined foreign key relationships.

02:55.790 --> 03:00.350
We can select the articles and the categories in lists.

03:00.380 --> 03:03.890
I'll go ahead and add various regards.

03:10.990 --> 03:17.260
Now that we have a many to many relationship between the article and category tables we can remove the

03:17.260 --> 03:23.720
category idae foreign key from the article table before we can remove this column.

03:23.800 --> 03:30.650
First we need to drop the foreign key constraint which we do in relation view by clicking on drop.

03:34.590 --> 03:38.820
Then we can do the same with the category idae field.

03:45.650 --> 03:50.470
To select data joining the tables in a Many to Many relationship.

03:50.480 --> 03:53.620
First we join one table to the join table.

03:53.720 --> 03:56.690
Just like in a one to many relationship.

03:58.630 --> 04:07.150
Then we add a second j'aime joining the second table to the join table the join key word refers to the

04:07.150 --> 04:09.270
most recently mentioned table.

04:14.130 --> 04:20.490
So with this esky you l will select all the articles and their corresponding categories joining them

04:20.730 --> 04:23.320
via the article category joined table.

04:26.090 --> 04:28.070
As with the one to many join.

04:28.070 --> 04:33.740
This is a full j'aime we only get results for those articles that have a category.

04:36.370 --> 04:43.450
If we change these to left joins then we get all the articles.

04:43.480 --> 04:46.450
Those with categories and those without.

04:47.890 --> 04:50.340
Note how some data is repeated.

04:50.530 --> 04:56.820
For example this article the peers twice because it's related to more than one category.

04:58.220 --> 04:58.610
I'll sell.

04:58.610 --> 05:04.850
This category appears more than once because it's related to more than one article.

05:10.000 --> 05:15.390
We can get the data for one article by adding a where clause on the article.

05:19.040 --> 05:24.120
If the article has no categories then we get one rijkaard in the resultset.

05:26.640 --> 05:32.270
If we change the article idae to one that has more than one category.

05:34.250 --> 05:42.020
When we execute this esky Well we get multiple Ricardos with the article details repeated but one row

05:42.170 --> 05:43.570
for each category.
