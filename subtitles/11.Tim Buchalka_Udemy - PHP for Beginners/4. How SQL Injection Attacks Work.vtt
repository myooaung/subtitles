WEBVTT

00:04.410 --> 00:11.190
To insert a ricahrd into the database we're using the esky well insert into statement and we're building

00:11.190 --> 00:19.130
the Eskew L string by directly inserting values coming from a farm submission in the post array.

00:19.320 --> 00:27.330
This is fine if we trust the data coming from the farm but a user could type absolutely anything into

00:27.330 --> 00:32.920
this farm and the value will be directly inserted into the ask you L statement.

00:33.300 --> 00:40.650
For example let's try putting a single quote in here and submitting the farm.

00:40.650 --> 00:46.180
We get an ask you l syntax error simply by typing in a single quote.

00:46.230 --> 00:51.060
We've broken the code that runs when this farm is submitted.

00:53.050 --> 00:55.170
Let's go through what happened.

00:55.210 --> 01:00.740
This is a simplified version of the ESC you l insert into statement we're using.

01:01.090 --> 01:08.570
We're concatenating three strings together including a variable to form a complete esky wealth statement.

01:09.130 --> 01:11.840
We're assuming that the variable is a string.

01:12.010 --> 01:16.310
So we're surrounding it by single quotes in the ask you well.

01:17.170 --> 01:24.050
Let's look at what the resulting esky Well string is for different values of the variable.

01:24.430 --> 01:29.070
If the variable is empty this is the resulting escudo String.

01:29.320 --> 01:34.860
Which is valid if the variable contains a simple string.

01:34.870 --> 01:42.360
This is the resulting esky Well this is also valid.

01:42.470 --> 01:50.510
However if the variable contains a single quote like this this is the resulting Eskew L string.

01:50.530 --> 01:52.480
This isn't valid.

01:52.510 --> 01:58.660
This is because the database server assumes the quote that's come from the variable is actually one

01:58.660 --> 02:04.530
of the quotes that goes around the string after that quote.

02:04.630 --> 02:09.360
It expects a closing bracket but instead there's the rest of the variable.

02:09.370 --> 02:12.630
This is what cast the error we saw.

02:15.990 --> 02:18.680
Let's look at a more dangerous example.

02:18.990 --> 02:25.770
Both my ESC U L and a movie D B contain a database called my esky well that contains all the information

02:25.770 --> 02:30.280
about users permissions and so on.

02:30.720 --> 02:38.640
There's a table called a user in this database that contains all the information about the users of

02:38.640 --> 02:40.420
the database server.

02:40.470 --> 02:47.310
Here we can see the root user and the user we created earlier for our application.

02:47.310 --> 02:52.430
As you can see the password is stored as a hash which is a way of encrypting it.

02:52.500 --> 02:55.270
However it's not a very secure hash.

02:55.320 --> 02:58.560
For example if we copy the text of this password

03:01.800 --> 03:09.330
and then search online for my Eskew L password cracker Here's one.

03:12.390 --> 03:17.310
If we paste the hashed password value and submit the farm.

03:19.620 --> 03:27.560
Then we get the result which is secret which is what I've set the boot password to on the server.

03:27.810 --> 03:31.640
So how is this related to Escuela injection.

03:33.500 --> 03:41.120
This esky Well statements will select the password column of the user table where the use is root and

03:41.120 --> 03:44.600
limit the results to just one rijkaard.

03:44.630 --> 03:49.990
If we run this we get the hashed root user password.

03:53.280 --> 04:00.720
Let's go back to our app Let's add a line to print out the ESC U L statement that we're executing like

04:00.720 --> 04:01.800
that.

04:01.800 --> 04:08.520
And just for the purposes of this demo and connecting to the database from HP using the root user instead

04:08.520 --> 04:18.600
of the one we created then in the browser I'm going to put some Eskew L into the title field and submit

04:18.630 --> 04:21.720
the farm.

04:21.780 --> 04:29.120
This is the esky Well that was executed and a rijkaard was inserted with idea 3 0 3.

04:32.170 --> 04:38.080
If we look at this rijkaard we can see that the content column contains the hashed password for the

04:38.080 --> 04:41.870
root user.

04:42.340 --> 04:46.330
What's more we don't need to have access to p p madmen to see this.

04:46.390 --> 04:51.330
We can see it here on the index page and on the individual article page.

04:53.880 --> 04:55.960
So what happened.

04:56.190 --> 05:00.720
This is the ESC Eskew else statement in our code.

05:00.750 --> 05:08.280
This is the value I put in the title column which is what ends up in the post title array element content

05:08.310 --> 05:13.090
and published at are both empty strings.

05:13.140 --> 05:15.920
This is the resulting Eskew L string.

05:19.990 --> 05:24.050
Instead of inserting a string value for the title column I insert it.

05:24.070 --> 05:30.820
ESC u l by closing the string with a single quote and adding the values for another rijkaard at the

05:30.820 --> 05:31.950
end.

05:32.650 --> 05:38.760
We saw earlier how you can insert more than one record at once with the insert into statement.

05:38.770 --> 05:46.140
This is called a sub query and what this returns is what is inserted into this field.

05:46.270 --> 05:47.950
What we just did was ransom.

05:47.950 --> 05:53.240
ESC Eskew L of our choosing on the server and view the results in the browser.

05:53.620 --> 05:58.770
No need to have access to the database server are P 8 p.m. and admin at all.

05:58.780 --> 06:01.340
We did it all from a web browser.

06:01.390 --> 06:03.780
This is called esky well injection.

06:03.890 --> 06:07.450
And as you can see it can be very dangerous.

06:07.450 --> 06:11.320
It's easy to avoid it though which will then next.
