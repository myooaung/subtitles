WEBVTT

00:05.280 --> 00:11.790
When we submit a farm with one or more invalid fields we're re displaying any data we entered in the

00:11.790 --> 00:12.770
farm.

00:15.530 --> 00:22.230
We're doing this by echoing out the value from the farm in the value attribute of the input element.

00:25.100 --> 00:31.940
If we insert a simple string into the value attribute when the browser passes the H to AML the value

00:31.940 --> 00:38.440
of the attribute is everything from the first double quote character to the next one.

00:40.280 --> 00:46.610
If we insert a value that contains a double quote we end the value attribute.

00:46.610 --> 00:51.860
So everything after that is taken as astm Owl and not the attributes value.

00:52.160 --> 00:56.580
And this allows us to insert code into the rest of the astm l..

00:56.750 --> 01:00.100
At best this will just break the layout.

01:00.110 --> 01:04.980
At worst someone could inject some code to attack our site.

01:08.260 --> 01:15.370
If I put this cold in the textarea input of our farm and then submit the form I can make this message

01:15.370 --> 01:16.250
appear.

01:16.420 --> 01:23.470
This is using javascript which is code that runs in the browser will see more of this later on.

01:23.470 --> 01:28.340
What's important is that I have managed to run some arbitrary code on the site.

01:28.810 --> 01:33.300
I could use this to get access to cookies plugins and so on.

01:33.310 --> 01:37.320
This isn't known as a cross-site scripting R X s s attack.

01:40.550 --> 01:41.690
In H T M Al.

01:41.690 --> 01:46.130
Double quotes and greater than and less than characters have meaning.

01:46.130 --> 01:50.180
They used to start and end tags and their attributes.

01:50.180 --> 01:57.110
So what happens if we want to display one of these characters and avoid it being interpreted as such.

01:58.750 --> 02:01.100
We use h.t. email entities.

02:01.270 --> 02:06.730
These are special codes that begin with an ampersand and end with a semicolon.

02:06.730 --> 02:13.750
For example if we put this htl entity in our next term L. the browser will display a double quote character

02:13.770 --> 02:15.370
on screen.

02:15.790 --> 02:19.280
This one for a less than character and so on.

02:22.070 --> 02:27.770
So when we print out a value that might contain one of these characters like a double quote We need

02:27.770 --> 02:32.350
to replace those characters with their corresponding age to male entities.

02:35.340 --> 02:39.310
Fortunately P HP has just the function to do that.

02:39.370 --> 02:46.480
The team special charms function will convert any of these special characters into a steamer entities.

02:49.280 --> 02:54.740
So whenever we want to print out a value that could contain one of these characters we need to use the

02:54.740 --> 02:58.370
H to mail special chars function.

02:58.820 --> 03:03.850
If we do that we can avoid the problems with inserted code.

03:06.750 --> 03:14.220
So now if we try and insert some code by submitting a value with a double quote in it the code isn't

03:14.220 --> 03:20.660
inserted and the value is reading spading the farm input as expected.

03:21.120 --> 03:27.360
If we view the sarce we can see the special characters that have be converted into their corresponding

03:27.390 --> 03:29.200
AIST female entities.

03:32.760 --> 03:37.620
So we fixed the code injection vulnerability with the new article farm.

03:39.070 --> 03:45.440
But let's add a new article that contains some h.t. email code like that.

03:46.110 --> 03:56.310
If we go to the index page that h.t. AML is being interpreted by the browser the same on the individual

03:56.310 --> 03:58.010
article page.

03:58.170 --> 04:03.530
If we can inject some simple astm email it would be possible to inject something more complex.

04:03.660 --> 04:07.020
Even some javascript code as we saw earlier.

04:09.280 --> 04:16.540
So we need to use the to make special charge function here to whenever we display a value that is untrusted.

04:16.530 --> 04:21.800
So add it to the title and also to the content.

04:22.660 --> 04:30.580
We dont need to use it when we display the idea as this is always going to be an integer.

04:30.830 --> 04:32.670
We will do the same here.

04:34.980 --> 04:36.780
In the article page.

04:40.080 --> 04:47.280
So now in the index page and the article page the value is displayed as we entered it when we inserted

04:47.280 --> 04:49.280
the new article.

04:49.290 --> 04:53.000
It's very important wherever you are displaying untrusted data.

04:53.190 --> 04:59.520
In other words data that comes from a third party to use the astm else special chars function to avoid

04:59.550 --> 05:02.340
exposing your site to code injection.
