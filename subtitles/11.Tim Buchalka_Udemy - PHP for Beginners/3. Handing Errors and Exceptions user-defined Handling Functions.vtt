WEBVTT

00:05.950 --> 00:10.540
An error occurs when something goes wrong in our code.

00:10.680 --> 00:14.830
For example if I try and divide a number by zero.

00:17.680 --> 00:21.010
When I run this code we get an error message.

00:23.450 --> 00:25.600
Let's look at another example.

00:27.000 --> 00:35.300
Here I am trying to create a new date time object but I'm passing in an invalid date and time string.

00:37.610 --> 00:42.880
When I run this code we get another error message this time an exception.

00:46.100 --> 00:53.770
P P provides both errors and exceptions for handling errors which can be slightly confusing.

00:54.310 --> 01:00.280
Errors are generally used foul language level errors like syntax errors.

01:00.280 --> 01:05.680
Exceptions are the errors you get when using classes and objects.

01:05.860 --> 01:12.340
Earlier on we looked at how we can use exceptions to handle errors by wrapping code that could cause

01:12.340 --> 01:18.860
an error in a try block and dealing with that in a corresponding cat block.

01:20.560 --> 01:22.770
And the MP 8 p 7.

01:23.410 --> 01:24.790
We can now use try.

01:24.800 --> 01:28.320
Catch blocks for error objects too.

01:31.580 --> 01:39.850
Let's wrap this code in a try catch block and print out the details of the exception.

01:44.230 --> 01:51.970
With this we can catch the problem and deal with it if we don't write code to handle errors and exceptions

01:52.290 --> 01:55.030
then our code will stop working.

01:57.520 --> 02:04.810
If we know an error could occur in our code and we have no control over it for example trying to read

02:04.810 --> 02:10.930
a file then we should use the try catch block to handle this possibility.

02:11.200 --> 02:17.520
However as we write more and more code there will undoubtedly be places where errors could occur that

02:17.530 --> 02:21.260
we haven't handled and we don't want to have to put try.

02:21.270 --> 02:25.320
Catch blocks all over the place unnecessarily.

02:27.990 --> 02:31.420
The solution to this is to define custom handlers.

02:31.620 --> 02:37.680
The will catch and deal with any previously on cart errors and exceptions.

02:37.680 --> 02:45.930
We can do this by passing a function to the set error handler function and to these set exception handler

02:45.930 --> 02:47.930
function for exceptions.

02:49.480 --> 02:53.220
First let's create an error handler.

02:53.740 --> 03:02.200
We have to pass in a function with these arguments which are all data regarding the error.

03:05.470 --> 03:10.360
Let's create an error handle of function with those arguments.

03:10.660 --> 03:13.980
And for now just print out the error message.

03:16.410 --> 03:20.490
Will Karl set error handler with this function name.

03:22.030 --> 03:24.610
And will change the code that causes the error.

03:24.610 --> 03:25.900
Back to the first.

03:25.930 --> 03:27.630
Divide by zero error.

03:27.810 --> 03:30.330
Also removing the try catch block.

03:35.080 --> 03:39.970
When we run this code we get the message from the error handler function.

03:43.160 --> 03:46.080
Let's do the same for exceptions.

03:46.160 --> 03:50.390
The parameter to this function is just an exception object.

03:53.490 --> 03:57.070
So let's add an exception handler function.

03:57.840 --> 04:07.730
Print out the message from the Exception object and Karl set exception handler with this function.

04:08.970 --> 04:13.300
Let's also change this code so the line that through an exception.

04:18.150 --> 04:23.300
When we run this code we get the message from the Exception handle a function.

04:27.590 --> 04:34.960
Normally inside the error and Exception handling functions you do more than this for example displaying

04:34.970 --> 04:39.310
detailed error information logging the errors and so on.

04:39.860 --> 04:46.490
So instead of having to deal with this in two places the easiest thing to do is to convert the errors

04:46.760 --> 04:48.150
into exceptions.

04:48.350 --> 04:52.850
Then everything is handled by the exception handler function.

04:55.630 --> 05:01.270
P HP has the error exception class specifically for this purpose.

05:04.170 --> 05:13.140
So in the error handler all we do is throw a new error exception object passing in the details of the

05:13.140 --> 05:15.640
error to the object constructor.

05:18.460 --> 05:24.310
If I change the erroneous code back to the line that previously caused the error.

05:27.390 --> 05:32.920
Now when we run this code the exception handler deals with it instead.
