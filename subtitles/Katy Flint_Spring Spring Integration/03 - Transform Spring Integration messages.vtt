WEBVTT
1
00:00:00.006 --> 00:00:01.008
- [Instructor] As we have learned,

2
00:00:01.008 --> 00:00:04.000
transformers modify a message

3
00:00:04.000 --> 00:00:06.000
so that it can meet the contractual

4
00:00:06.000 --> 00:00:09.006
or the type expectations of a consumer.

5
00:00:09.006 --> 00:00:12.006
Let us now build a transforming end point together.

6
00:00:12.006 --> 00:00:15.004
We'll initialize our project files for this lesson

7
00:00:15.004 --> 00:00:20.003
using git, check out, 03_03b.

8
00:00:20.003 --> 00:00:24.005
So our dashboard application depends on a backend rest API

9
00:00:24.005 --> 00:00:26.007
for client status data points.

10
00:00:26.007 --> 00:00:30.000
Our goal in this lesson is to leverage Spring integration,

11
00:00:30.000 --> 00:00:34.000
to convert raw API JSON structured data,

12
00:00:34.000 --> 00:00:37.003
like you typically receive from a rest API response,

13
00:00:37.003 --> 00:00:41.005
into our native domain business tier.

14
00:00:41.005 --> 00:00:43.006
Let's depart from our typical order of things

15
00:00:43.006 --> 00:00:45.008
and start in our service layer this time,

16
00:00:45.008 --> 00:00:48.000
instead of in our configuration.

17
00:00:48.000 --> 00:00:52.005
In line 53, that is where we're simulating a rest API call.

18
00:00:52.005 --> 00:00:56.000
Notice there, that we are formatting a domain object,

19
00:00:56.000 --> 00:01:00.000
so that we can send it into the message flow in line 59.

20
00:01:00.000 --> 00:01:02.008
This complexity is what we want to get rid of.

21
00:01:02.008 --> 00:01:04.006
What we've got for this lesson

22
00:01:04.006 --> 00:01:07.004
is a simulated rest API call

23
00:01:07.004 --> 00:01:10.000
that in our case gives us a string,

24
00:01:10.000 --> 00:01:13.004
a string that's structured as raw JSON.

25
00:01:13.004 --> 00:01:16.005
Let's pipe this to the system out,

26
00:01:16.005 --> 00:01:19.004
so we can first get a feel for what we're looking at

27
00:01:19.004 --> 00:01:22.006
in terms of this API return data.

28
00:01:22.006 --> 00:01:24.005
With a system out print line in place,

29
00:01:24.005 --> 00:01:27.009
I'm going to start the application.

30
00:01:27.009 --> 00:01:30.001
And now in the bottom of your screen,

31
00:01:30.001 --> 00:01:32.008
you will see the API JSON data

32
00:01:32.008 --> 00:01:35.003
that we're simulating in the application.

33
00:01:35.003 --> 00:01:37.002
Notice how it's giving us different data points

34
00:01:37.002 --> 00:01:38.004
each time it comes in?

35
00:01:38.004 --> 00:01:41.002
This is all kind of mocked out for us.

36
00:01:41.002 --> 00:01:44.005
So this is the JSON data that we're working with.

37
00:01:44.005 --> 00:01:48.006
Now, let's go to our XML configuration file

38
00:01:48.006 --> 00:01:49.009
and I'll show you how this works.

39
00:01:49.009 --> 00:01:51.001
The first thing we're going to do

40
00:01:51.001 --> 00:01:55.002
is we're going to create a direct channel.

41
00:01:55.002 --> 00:01:56.003
And this channel is where

42
00:01:56.003 --> 00:02:01.001
we will send our raw API JSON data.

43
00:02:01.001 --> 00:02:09.009
Let's call it ID equals raw API JSON channel.

44
00:02:09.009 --> 00:02:12.000
Now, if we were to start this application right now,

45
00:02:12.000 --> 00:02:13.000
we would throw an error,

46
00:02:13.000 --> 00:02:17.003
because we declared a channel that has no subscribers,

47
00:02:17.003 --> 00:02:19.007
but we're going to take care of that by

48
00:02:19.007 --> 00:02:22.005
configuring a response to this channel

49
00:02:22.005 --> 00:02:25.006
in the form of a JSON objects transformer.

50
00:02:25.006 --> 00:02:29.000
The input channel for our transformation will be

51
00:02:29.000 --> 00:02:30.009
the channel we just created.

52
00:02:30.009 --> 00:02:33.009
Copy and paste to ensure no errors.

53
00:02:33.009 --> 00:02:36.005
We need to give it an outcome put channel,

54
00:02:36.005 --> 00:02:39.007
which will be our status monitor channel,

55
00:02:39.007 --> 00:02:44.006
that our application is depending on so heavily.

56
00:02:44.006 --> 00:02:46.009
And the object that we're going to transform

57
00:02:46.009 --> 00:02:49.007
our JSON string into,

58
00:02:49.007 --> 00:02:54.005
will be our domain object that we've been using all along,

59
00:02:54.005 --> 00:03:00.006
which is found in packaged util app support status.

60
00:03:00.006 --> 00:03:02.008
So what Spring integration is going to do for us here

61
00:03:02.008 --> 00:03:06.002
is when input comes into the raw API JSON channel,

62
00:03:06.002 --> 00:03:08.007
it's going to automatically transform it for us,

63
00:03:08.007 --> 00:03:11.009
put it out in the form of an app support status object,

64
00:03:11.009 --> 00:03:14.005
and pipe that to our status monitor channel.

65
00:03:14.005 --> 00:03:16.000
Now, what remains for us to do

66
00:03:16.000 --> 00:03:18.006
is go into this status monitor service

67
00:03:18.006 --> 00:03:22.000
and do the simplification.

68
00:03:22.000 --> 00:03:25.007
We need to get a handle on the new channel we just created,

69
00:03:25.007 --> 00:03:29.005
so let's do that by getting it from the context manager,

70
00:03:29.005 --> 00:03:39.004
and the name of our channel again is raw API JSON channel.

71
00:03:39.004 --> 00:03:41.002
Now that we've got a handle on that channel,

72
00:03:41.002 --> 00:03:42.009
we're prepared to do a send to it,

73
00:03:42.009 --> 00:03:46.008
so instead of sending to the status monitor channel,

74
00:03:46.008 --> 00:03:50.006
we're going to send to,

75
00:03:50.006 --> 00:03:54.000
what did we call this?

76
00:03:54.000 --> 00:03:58.000
We're going to send to the API input channel.

77
00:03:58.000 --> 00:04:00.001
This should start feeling familiar to you by now.

78
00:04:00.001 --> 00:04:02.001
We're going to send to that channel a message.

79
00:04:02.001 --> 00:04:06.004
We're going to use message builder to build it with payload.

80
00:04:06.004 --> 00:04:07.009
And our payload now will be our,

81
00:04:07.009 --> 00:04:10.004
simply our raw JSON string.

82
00:04:10.004 --> 00:04:12.005
And we created the message,

83
00:04:12.005 --> 00:04:14.009
build the message.

84
00:04:14.009 --> 00:04:16.003
That's it.

85
00:04:16.003 --> 00:04:19.002
Now we're no longer sending to the status monitor channel.

86
00:04:19.002 --> 00:04:22.005
We're letting Spring do that for us.

87
00:04:22.005 --> 00:04:25.001
We're no longer needing to create

88
00:04:25.001 --> 00:04:27.005
this domain object ourselves.

89
00:04:27.005 --> 00:04:30.004
Instead, the JSON that you see in the console below

90
00:04:30.004 --> 00:04:32.007
is what's going directly to the channel.

91
00:04:32.007 --> 00:04:36.000
Now let's start our server and see what we get.

92
00:04:36.000 --> 00:04:38.001
What's really interesting and kind of a running theme here

93
00:04:38.001 --> 00:04:39.009
is what we don't have to change.

94
00:04:39.009 --> 00:04:41.003
By leaving everything intact

95
00:04:41.003 --> 00:04:44.000
and providing a new entry point into the flow,

96
00:04:44.000 --> 00:04:46.001
we don't have to touch our filters and our handlers,

97
00:04:46.001 --> 00:04:48.008
which are already type checking for that domain object.

98
00:04:48.008 --> 00:04:51.005
Our view processing doesn't have to change.

99
00:04:51.005 --> 00:04:53.006
And any of our message flow consumers downstream

100
00:04:53.006 --> 00:04:59.009
are completely unchanged.

101
00:04:59.009 --> 00:05:01.008
So when we have a running application,

102
00:05:01.008 --> 00:05:04.000
we'll go into the user interface

103
00:05:04.000 --> 00:05:06.006
and prove out that it works.

104
00:05:06.006 --> 00:05:09.006
And let's look at the user interface and confirm.

105
00:05:09.006 --> 00:05:10.006
There in the lower left,

106
00:05:10.006 --> 00:05:13.001
especially under the power usage section,

107
00:05:13.001 --> 00:05:15.001
you will see data updating,

108
00:05:15.001 --> 00:05:19.000
proving that our message flow is working as we expect.

