WEBVTT
1
00:00:00.005 --> 00:00:02.006
- [Instructor] In our time together during this course,

2
00:00:02.006 --> 00:00:04.007
we have covered a lot of ground.

3
00:00:04.007 --> 00:00:07.000
You have learned the foundational principles

4
00:00:07.000 --> 00:00:09.006
of spring integration from both a theoretical

5
00:00:09.006 --> 00:00:12.002
and a hands-on perspective.

6
00:00:12.002 --> 00:00:14.006
There is much more to explore.

7
00:00:14.006 --> 00:00:17.007
If you are curious to learn more or you are in the place

8
00:00:17.007 --> 00:00:20.008
of building a spring integration implementation yourself,

9
00:00:20.008 --> 00:00:24.009
here are some additional topics you should be aware of.

10
00:00:24.009 --> 00:00:27.005
Protocol-specific endpoints.

11
00:00:27.005 --> 00:00:30.008
There is significant variety in the endpoint implementations

12
00:00:30.008 --> 00:00:34.007
for each of the external system connectivity protocols.

13
00:00:34.007 --> 00:00:39.003
We have looked at JDBC, Twitter, and HTTP together.

14
00:00:39.003 --> 00:00:41.001
And the general principles we have learned

15
00:00:41.001 --> 00:00:43.000
will get you started on the path.

16
00:00:43.000 --> 00:00:45.004
However, a degree of research will be required

17
00:00:45.004 --> 00:00:48.005
for you to fully implement a specific protocol connection

18
00:00:48.005 --> 00:00:51.003
for your system and to understand all of the options

19
00:00:51.003 --> 00:00:53.003
that are available to you.

20
00:00:53.003 --> 00:00:55.001
Annotations.

21
00:00:55.001 --> 00:00:57.009
While annotation-based configuration is a core

22
00:00:57.009 --> 00:01:00.008
spring framework feature and not necessarily

23
00:01:00.008 --> 00:01:04.008
an advanced topic, we did not cover it in this course.

24
00:01:04.008 --> 00:01:08.006
All of the spring integration XML configuration options

25
00:01:08.006 --> 00:01:13.004
that we used in our lessons have an annotation corollary.

26
00:01:13.004 --> 00:01:15.006
Error handling is not a trivial undertaking

27
00:01:15.006 --> 00:01:18.006
for asynchronous designs, which do dominate

28
00:01:18.006 --> 00:01:20.005
the spring integration landscape.

29
00:01:20.005 --> 00:01:23.001
This is because when processing is done asynchronously,

30
00:01:23.001 --> 00:01:26.000
the concept of throwing an exception up the call stack

31
00:01:26.000 --> 00:01:28.006
is not effective since there are multiple points

32
00:01:28.006 --> 00:01:31.007
of processing and multiple call stacks in play.

33
00:01:31.007 --> 00:01:34.004
Spring integration leverages channels to give plenty

34
00:01:34.004 --> 00:01:37.001
of custom error handling options.

35
00:01:37.001 --> 00:01:38.008
Channel interceptors.

36
00:01:38.008 --> 00:01:40.001
In our discussion of channels,

37
00:01:40.001 --> 00:01:42.001
we skipped this powerful feature.

38
00:01:42.001 --> 00:01:43.009
Channel interceptors provide a way

39
00:01:43.009 --> 00:01:47.002
to capture meaningful information about the messages

40
00:01:47.002 --> 00:01:49.005
passing through the system in a lifecycle

41
00:01:49.005 --> 00:01:51.009
type of event callback.

42
00:01:51.009 --> 00:01:54.009
Endpoint roles allow you to group, start,

43
00:01:54.009 --> 00:01:57.003
and stop endpoints by role.

44
00:01:57.003 --> 00:02:00.001
This feature is useful in clustering and load balancing

45
00:02:00.001 --> 00:02:02.002
types of situations.

46
00:02:02.002 --> 00:02:04.005
If you have a need to gain performance metrics

47
00:02:04.005 --> 00:02:06.005
on your messaging framework, the system

48
00:02:06.005 --> 00:02:08.009
management feature allows you to capture runtime

49
00:02:08.009 --> 00:02:11.007
integration metrics such as channel send rates

50
00:02:11.007 --> 00:02:13.006
and error counts.

51
00:02:13.006 --> 00:02:15.008
In the event you are building a highly reactive

52
00:02:15.008 --> 00:02:19.001
event-based system, you will want to explore the points

53
00:02:19.001 --> 00:02:22.001
of integration that spring integration provides

54
00:02:22.001 --> 00:02:26.004
to the Java 9 Reactive Streams SPI, which is woven

55
00:02:26.004 --> 00:02:29.005
into various parts of the spring integration framework.

56
00:02:29.005 --> 00:02:31.006
Finally, an important overall principle

57
00:02:31.006 --> 00:02:34.003
that I want to communicate is that when working

58
00:02:34.003 --> 00:02:36.002
with spring integration in the real world,

59
00:02:36.002 --> 00:02:38.007
you are likely to be rather close to the guts

60
00:02:38.007 --> 00:02:40.009
of the technical architecture design.

61
00:02:40.009 --> 00:02:42.008
It will be essential for you to understand

62
00:02:42.008 --> 00:02:46.000
software architectural principles and how they intersect

63
00:02:46.000 --> 00:02:47.003
with spring integration.

64
00:02:47.003 --> 00:02:49.003
For that, I recommend delving into the "Enterprise

65
00:02:49.003 --> 00:02:51.004
"Integration Patterns" publication

66
00:02:51.004 --> 00:02:54.000
that we have referenced throughout this course.

