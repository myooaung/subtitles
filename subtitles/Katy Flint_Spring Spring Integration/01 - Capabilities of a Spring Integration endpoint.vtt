WEBVTT
1
00:00:00.005 --> 00:00:02.008
- [Instructor] Moving our focus now to endpoints,

2
00:00:02.008 --> 00:00:05.007
we will start, as usual, with a description

3
00:00:05.007 --> 00:00:08.009
of the endpoint as Enterprise Integration Pattern.

4
00:00:08.009 --> 00:00:10.005
Then we will explore specific

5
00:00:10.005 --> 00:00:13.001
endpoint types and implementations.

6
00:00:13.001 --> 00:00:15.003
Recall our core patterns of producer

7
00:00:15.003 --> 00:00:19.002
and consumer as representatives of our business processes

8
00:00:19.002 --> 00:00:21.004
and our messaging framework represented

9
00:00:21.004 --> 00:00:23.008
by messages and channels.

10
00:00:23.008 --> 00:00:26.007
With that context in mind, it is a short step

11
00:00:26.007 --> 00:00:30.002
to understand the endpoint as the conceptual interface

12
00:00:30.002 --> 00:00:33.007
between the business processes and the messaging framework,

13
00:00:33.007 --> 00:00:36.008
as implementation and endpoint is a component,

14
00:00:36.008 --> 00:00:40.005
or a collection of components, that manipulate a message

15
00:00:40.005 --> 00:00:44.008
and make it consumable by the overall business process.

16
00:00:44.008 --> 00:00:47.002
It is important to understand that endpoint

17
00:00:47.002 --> 00:00:50.003
is a very broad descriptor of behavior.

18
00:00:50.003 --> 00:00:52.008
In mapping the Enterprise Integration Pattern

19
00:00:52.008 --> 00:00:57.004
of endpoint to specific Spring Integration implementations,

20
00:00:57.004 --> 00:00:59.002
different publications and teachings

21
00:00:59.002 --> 00:01:01.006
make different delineations.

22
00:01:01.006 --> 00:01:03.002
To organize our learning,

23
00:01:03.002 --> 00:01:06.001
I put forward an understanding of the endpoint

24
00:01:06.001 --> 00:01:09.002
as any processing logic that sits

25
00:01:09.002 --> 00:01:12.005
between a channel and the domain business process.

26
00:01:12.005 --> 00:01:14.006
This diagram shows endpoints

27
00:01:14.006 --> 00:01:17.009
in relationship to the other core patterns we have studied,

28
00:01:17.009 --> 00:01:20.005
namely channels and messages,

29
00:01:20.005 --> 00:01:24.006
where the orange boundaries here represent endpoints.

30
00:01:24.006 --> 00:01:27.001
What is deceptive about this diagram

31
00:01:27.001 --> 00:01:29.001
is that the variety of sub patterns

32
00:01:29.001 --> 00:01:32.003
and specialized implementations that are required

33
00:01:32.003 --> 00:01:35.002
in order to create a robust messaging framework

34
00:01:35.002 --> 00:01:37.009
is very large, much larger than

35
00:01:37.009 --> 00:01:41.007
that small orange rectangle suggests.

36
00:01:41.007 --> 00:01:44.001
So let's break down the complexity.

37
00:01:44.001 --> 00:01:46.005
In Spring Integration, there is one set

38
00:01:46.005 --> 00:01:48.007
of endpoint functionalities that propagate

39
00:01:48.007 --> 00:01:52.008
from a common interface, that of Message Handler.

40
00:01:52.008 --> 00:01:55.007
Message Handler is a lightweight interface

41
00:01:55.007 --> 00:01:58.000
that defines a single method contract

42
00:01:58.000 --> 00:02:00.002
for handling a message.

43
00:02:00.002 --> 00:02:03.007
That method name is handle message.

44
00:02:03.007 --> 00:02:06.005
The functionalities in this lineage all apply

45
00:02:06.005 --> 00:02:09.000
logical decisions to messages

46
00:02:09.000 --> 00:02:11.004
at the emerging end of a channel.

47
00:02:11.004 --> 00:02:13.008
Filters decide whether or not a message

48
00:02:13.008 --> 00:02:15.008
should be passed along or dropped.

49
00:02:15.008 --> 00:02:18.003
A filter is constructed with injection

50
00:02:18.003 --> 00:02:22.004
of a message selector, which supplies the filtering logic,

51
00:02:22.004 --> 00:02:25.004
that is the select discard instructions.

52
00:02:25.004 --> 00:02:27.002
Filter implementations are bundled

53
00:02:27.002 --> 00:02:32.007
in the org.springframework.integration.filter package.

54
00:02:32.007 --> 00:02:36.001
In an upcoming lesson we will implement a filter.

55
00:02:36.001 --> 00:02:38.003
Transformers modify a message

56
00:02:38.003 --> 00:02:40.004
so that you can meet the contractual,

57
00:02:40.004 --> 00:02:44.000
that is the type, expectations of a consumer.

58
00:02:44.000 --> 00:02:46.001
To make a Transforming Handler,

59
00:02:46.001 --> 00:02:49.008
you inject the transformation instructions on construction.

60
00:02:49.008 --> 00:02:52.000
In the org.springframework

61
00:02:52.000 --> 00:02:54.008
.integration.transformation package,

62
00:02:54.008 --> 00:02:57.008
you will find implementations that allow you to do things

63
00:02:57.008 --> 00:03:01.001
like transform payloads between data types

64
00:03:01.001 --> 00:03:05.008
to serialize unserialized payloads, enrich payloads,

65
00:03:05.008 --> 00:03:10.003
or message headers with additional information, et cetera.

66
00:03:10.003 --> 00:03:13.007
In an upcoming lesson we will implement a transformer.

67
00:03:13.007 --> 00:03:17.003
Routers consume messages from a message channel

68
00:03:17.003 --> 00:03:20.001
and forward to one or more different message channels

69
00:03:20.001 --> 00:03:22.003
depending on a set of conditions.

70
00:03:22.003 --> 00:03:27.001
Package org.springframework.integration.router

71
00:03:27.001 --> 00:03:30.002
supplies implementations for routing based on criteria

72
00:03:30.002 --> 00:03:33.002
such as payload type, recipient list,

73
00:03:33.002 --> 00:03:35.003
header values, and errors.

74
00:03:35.003 --> 00:03:38.000
And finally, Spring Integration supplies

75
00:03:38.000 --> 00:03:41.008
the capability to split or aggregate messages.

76
00:03:41.008 --> 00:03:44.005
Stored in respectively named packages,

77
00:03:44.005 --> 00:03:47.003
these complimentary handlers partition a message

78
00:03:47.003 --> 00:03:50.008
into several parts or combine multiple messages

79
00:03:50.008 --> 00:03:54.000
into a single message, sending the resulting message

80
00:03:54.000 --> 00:03:57.000
to be processed independently.

81
00:03:57.000 --> 00:03:59.002
Aggregators depend on correlation data

82
00:03:59.002 --> 00:04:02.002
that are embedded within message headers.

83
00:04:02.002 --> 00:04:04.000
Now let's move on from handlers

84
00:04:04.000 --> 00:04:07.000
to discuss three other Enterprise Integration Patterns

85
00:04:07.000 --> 00:04:09.002
that can also be thought of as subpatterns

86
00:04:09.002 --> 00:04:10.006
to the endpoint.

87
00:04:10.006 --> 00:04:12.008
Within a Spring Integration context,

88
00:04:12.008 --> 00:04:14.006
what these three patterns have in common

89
00:04:14.006 --> 00:04:17.009
is that they are used extensively in the work of connecting

90
00:04:17.009 --> 00:04:21.003
with protocols outside of the Java Virtual Machine,

91
00:04:21.003 --> 00:04:24.003
that is, to external distributed systems.

92
00:04:24.003 --> 00:04:26.000
The Service Activator is

93
00:04:26.000 --> 00:04:28.005
both an Enterprise Integration Pattern

94
00:04:28.005 --> 00:04:31.009
and a specific Spring Integration implementation.

95
00:04:31.009 --> 00:04:35.007
It is used to connect a message channel to a service layer.

96
00:04:35.007 --> 00:04:38.004
The Adapter Pattern is one of the earliest patterns

97
00:04:38.004 --> 00:04:41.004
to emerge in the software mainstream vernacular.

98
00:04:41.004 --> 00:04:44.005
In its classic form, an adapter allows the interface

99
00:04:44.005 --> 00:04:48.005
of an existing class to be used as a different interface.

100
00:04:48.005 --> 00:04:50.009
In the context of enterprise messaging,

101
00:04:50.009 --> 00:04:53.006
adapters are used to interface protocols

102
00:04:53.006 --> 00:04:56.006
and distributed systems, one to another.

103
00:04:56.006 --> 00:04:59.001
The Enterprise Gateway Pattern specializes

104
00:04:59.001 --> 00:05:02.009
in separating a message framework from the application code,

105
00:05:02.009 --> 00:05:04.004
encapsulating the framework

106
00:05:04.004 --> 00:05:06.008
from the core application business logic

107
00:05:06.008 --> 00:05:08.003
so that the latter can be made

108
00:05:08.003 --> 00:05:11.001
completely unaware of the dependency.

109
00:05:11.001 --> 00:05:14.000
Adapters and gateways will come into sharper focus

110
00:05:14.000 --> 00:05:16.008
in future lessons when we focus our attention

111
00:05:16.008 --> 00:05:20.000
on external distributed message exchanges.

