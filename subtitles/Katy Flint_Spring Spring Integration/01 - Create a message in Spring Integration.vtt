WEBVTT
1
00:00:00.005 --> 00:00:02.001
- [Instructor] Let's talk about messages.

2
00:00:02.001 --> 00:00:03.006
We will have a look at the message

3
00:00:03.006 --> 00:00:06.007
as enterprise integration pattern and also as a

4
00:00:06.007 --> 00:00:09.005
specific Spring integration component.

5
00:00:09.005 --> 00:00:10.009
We will spend most of our time

6
00:00:10.009 --> 00:00:13.001
in this lesson making some code.

7
00:00:13.001 --> 00:00:15.006
We should think of a message as a discrete unit

8
00:00:15.006 --> 00:00:18.003
of information exchanged by participants

9
00:00:18.003 --> 00:00:21.000
in the business logic of an application.

10
00:00:21.000 --> 00:00:23.002
The enterprise integration message pattern

11
00:00:23.002 --> 00:00:26.007
emphasizes strict encapsulation and statelessness.

12
00:00:26.007 --> 00:00:28.008
This makes for a component that is useful

13
00:00:28.008 --> 00:00:32.001
across synchronous and asynchronous contexts.

14
00:00:32.001 --> 00:00:35.004
Messages are very often purposed to communicate data,

15
00:00:35.004 --> 00:00:39.004
commands, or events, and they typically fulfill a contract

16
00:00:39.004 --> 00:00:41.006
between a sender and receiver.

17
00:00:41.006 --> 00:00:43.008
As a pattern, a message may be supported

18
00:00:43.008 --> 00:00:46.003
by contextual meta information.

19
00:00:46.003 --> 00:00:48.008
This is comparable to an envelope for a letter

20
00:00:48.008 --> 00:00:51.003
to ensure transport fulfillment.

21
00:00:51.003 --> 00:00:54.005
As the most granular Spring integration component,

22
00:00:54.005 --> 00:00:58.000
the message directly supports these design qualities.

23
00:00:58.000 --> 00:01:00.001
Here is a summary of the message interface

24
00:01:00.001 --> 00:01:03.003
implemented by every Spring integration message.

25
00:01:03.003 --> 00:01:06.003
Note that this message type is a composite.

26
00:01:06.003 --> 00:01:10.007
It holds a map type that contains header-key value pairs

27
00:01:10.007 --> 00:01:13.003
and a generically typed payload that contains

28
00:01:13.003 --> 00:01:15.008
the contents of the message, itself.

29
00:01:15.008 --> 00:01:17.009
It is important to know that once a message

30
00:01:17.009 --> 00:01:20.006
is instantiated it is immutable.

31
00:01:20.006 --> 00:01:22.008
This quality fulfills, quite strictly,

32
00:01:22.008 --> 00:01:24.005
the encapsulation aspects

33
00:01:24.005 --> 00:01:27.000
of the enterprise integration pattern.

34
00:01:27.000 --> 00:01:29.001
A final point here, is that Spring provides

35
00:01:29.001 --> 00:01:31.007
a MessageBuilder utility class.

36
00:01:31.007 --> 00:01:34.002
It is highly recommended to use a builder

37
00:01:34.002 --> 00:01:36.003
in order to create your message objects

38
00:01:36.003 --> 00:01:39.000
instead of creating them from scratch.

39
00:01:39.000 --> 00:01:41.000
A major benefit of doing this is that Spring

40
00:01:41.000 --> 00:01:43.006
will automatically take care of setting those correct

41
00:01:43.006 --> 00:01:46.007
message headers for us, which would be an undertaking

42
00:01:46.007 --> 00:01:49.002
if we were to do this manually.

43
00:01:49.002 --> 00:01:51.003
This is much easier to see than to explain

44
00:01:51.003 --> 00:01:54.007
and so let's have a look at this in action.

45
00:01:54.007 --> 00:01:56.009
Inside our code editor we will update our

46
00:01:56.009 --> 00:02:04.003
project source code by using git checkout O2_O1b.

47
00:02:04.003 --> 00:02:05.004
That will make sure we're looking

48
00:02:05.004 --> 00:02:07.007
at the source files for this lesson.

49
00:02:07.007 --> 00:02:11.006
With that done, let's orient ourselves for just a moment.

50
00:02:11.006 --> 00:02:13.008
The entry point for our web application

51
00:02:13.008 --> 00:02:16.003
is found in Source, main, java,

52
00:02:16.003 --> 00:02:18.003
Dashboard application.

53
00:02:18.003 --> 00:02:22.001
The main method on line 26 is our run point.

54
00:02:22.001 --> 00:02:25.002
At line 29, we initialize the workhorse

55
00:02:25.002 --> 00:02:27.009
of the application, Dashboard manager.

56
00:02:27.009 --> 00:02:29.008
The Dashboard manager is where most

57
00:02:29.008 --> 00:02:32.006
of our work together will take place.

58
00:02:32.006 --> 00:02:36.003
Opening Dashboard manager, look to line 42

59
00:02:36.003 --> 00:02:38.003
to see that this method is passing

60
00:02:38.003 --> 00:02:41.002
a software build identifier to the view

61
00:02:41.002 --> 00:02:45.006
by setting a property on a DAO, a data access object.

62
00:02:45.006 --> 00:02:48.008
This looks in the browser like that software build label

63
00:02:48.008 --> 00:02:50.005
there, in the tech support component

64
00:02:50.005 --> 00:02:52.006
of the user interface.

65
00:02:52.006 --> 00:02:54.007
What we want to do instead, is to capture

66
00:02:54.007 --> 00:02:57.006
the software runtime status into an object

67
00:02:57.006 --> 00:03:00.006
that we can use for messaging to multiple consumers,

68
00:03:00.006 --> 00:03:02.003
including not only the view,

69
00:03:02.003 --> 00:03:04.005
but also a backend support service.

70
00:03:04.005 --> 00:03:07.000
In order to achieve this, let's first construct

71
00:03:07.000 --> 00:03:10.004
a runtime status Payload object.

72
00:03:10.004 --> 00:03:13.000
We're going to use a custom domain object

73
00:03:13.000 --> 00:03:20.004
that we've used for this purpose.

74
00:03:20.004 --> 00:03:22.002
And the constructor for this object

75
00:03:22.002 --> 00:03:26.008
wants a property string, and it also wants a date.

76
00:03:26.008 --> 00:03:29.004
So let's supply that to our domain object.

77
00:03:29.004 --> 00:03:32.003
And now that we have a payload, let's create a message

78
00:03:32.003 --> 00:03:33.007
and learn about MessageBuilder

79
00:03:33.007 --> 00:03:37.002
by unpeeling this like an onion.

80
00:03:37.002 --> 00:03:40.002
The MessageBuilder utility class

81
00:03:40.002 --> 00:03:43.001
gives us three construction objects.

82
00:03:43.001 --> 00:03:46.006
We can create a message from another message.

83
00:03:46.006 --> 00:03:49.006
We can create a message by passing in a customer set

84
00:03:49.006 --> 00:03:52.004
of message headers, if we need to do that for some reason.

85
00:03:52.004 --> 00:03:54.003
But what we're going to do right now, is simply create

86
00:03:54.003 --> 00:03:56.001
a message with a payload.

87
00:03:56.001 --> 00:03:57.009
And we're going to use the Payload object

88
00:03:57.009 --> 00:03:59.006
that we just created.

89
00:03:59.006 --> 00:04:03.003
Once we've given our Payload object to our MessageBuilder,

90
00:04:03.003 --> 00:04:06.002
we need to fire the build method

91
00:04:06.002 --> 00:04:08.006
and we will have a message.

92
00:04:08.006 --> 00:04:11.001
In order to use our message, we need to get a handle on it,

93
00:04:11.001 --> 00:04:16.001
so let's type our return message as a generic message type.

94
00:04:16.001 --> 00:04:19.006
A generic message is kind of the workhorse

95
00:04:19.006 --> 00:04:23.008
base implementation of the message interface.

96
00:04:23.008 --> 00:04:27.005
And we will use that as a return type for MessageBuilder.

97
00:04:27.005 --> 00:04:29.002
And there we have a message that we can pass

98
00:04:29.002 --> 00:04:30.009
around and use at will.

99
00:04:30.009 --> 00:04:33.009
I would like to show you one more thing

100
00:04:33.009 --> 00:04:35.007
before we close this lesson.

101
00:04:35.007 --> 00:04:37.004
Do you remember in the slide deck we talked

102
00:04:37.004 --> 00:04:40.002
about message headers?

103
00:04:40.002 --> 00:04:43.002
This MessageBuilder class gives us the ability

104
00:04:43.002 --> 00:04:45.007
using the set method to set all kinds

105
00:04:45.007 --> 00:04:48.003
of custom headers on this message:

106
00:04:48.003 --> 00:04:51.001
Error channels, Reply channels, custom headers.

107
00:04:51.001 --> 00:04:53.001
We don't have time to learn about all of those things

108
00:04:53.001 --> 00:04:55.003
but it's important to know that this is available

109
00:04:55.003 --> 00:04:58.000
because remember, a message is immutable once it's created.

110
00:04:58.000 --> 00:05:00.004
So if you need to do anything with those headers,

111
00:05:00.004 --> 00:05:02.005
this is the point at which you want to do that.

112
00:05:02.005 --> 00:05:04.002
And this is where we will end this lesson.

113
00:05:04.002 --> 00:05:07.009
We have a plain old JAVA object, a generic message.

114
00:05:07.009 --> 00:05:10.003
It's all dressed up but it's got nowhere to go

115
00:05:10.003 --> 00:05:11.007
because we need to make a channel

116
00:05:11.007 --> 00:05:13.004
to make that really useful.

117
00:05:13.004 --> 00:05:14.008
And that's what we're going to learn about

118
00:05:14.008 --> 00:05:16.000
in the next lesson.

