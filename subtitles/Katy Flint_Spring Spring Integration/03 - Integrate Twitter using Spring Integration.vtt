WEBVTT
1
00:00:00.005 --> 00:00:02.007
- [Instructor] Social media has become an important part

2
00:00:02.007 --> 00:00:04.007
of business-to-consumer communication.

3
00:00:04.007 --> 00:00:07.007
So let's build a Twitter connection endpoint together.

4
00:00:07.007 --> 00:00:09.004
Initialize the project files

5
00:00:09.004 --> 00:00:15.009
by running git checkout 04_03b.

6
00:00:15.009 --> 00:00:16.008
Now, for this lesson,

7
00:00:16.008 --> 00:00:19.001
we want to display a corporate newsfeed

8
00:00:19.001 --> 00:00:20.006
that is published on Twitter

9
00:00:20.006 --> 00:00:23.005
to our local consumer dashboard.

10
00:00:23.005 --> 00:00:26.003
There's a bit of a lift that a developer needs to do

11
00:00:26.003 --> 00:00:29.004
if you're following along with this code at home

12
00:00:29.004 --> 00:00:33.005
in that you need to create a developer account at Twitter.

13
00:00:33.005 --> 00:00:34.006
And the reason you need to do that

14
00:00:34.006 --> 00:00:38.002
is because in our application properties file,

15
00:00:38.002 --> 00:00:40.002
they're in lines 7 through 10,

16
00:00:40.002 --> 00:00:43.009
you will need to fill in your own consumerKey,

17
00:00:43.009 --> 00:00:47.004
consumerSecret, accessToken and accessTokenSecret.

18
00:00:47.004 --> 00:00:49.007
You can obtain those from Twitter

19
00:00:49.007 --> 00:00:51.007
by creating a free developer account

20
00:00:51.007 --> 00:00:54.009
and instructions are at developer.twitter.com.

21
00:00:54.009 --> 00:00:56.005
Once you have done that,

22
00:00:56.005 --> 00:01:01.003
and filled in your own OAuth keys and tokens,

23
00:01:01.003 --> 00:01:04.007
then you can go to application.xml.

24
00:01:04.007 --> 00:01:10.009
In line 41, uncomment the Twitter feed configuration file

25
00:01:10.009 --> 00:01:12.008
so that we can import it and run it.

26
00:01:12.008 --> 00:01:15.004
If those properties are not properly filled out,

27
00:01:15.004 --> 00:01:17.003
this will throw an error.

28
00:01:17.003 --> 00:01:18.001
So having done that,

29
00:01:18.001 --> 00:01:20.005
we're ready to go right into twitter.xml.

30
00:01:20.005 --> 00:01:24.000
That's our Spring integration configuration file.

31
00:01:24.000 --> 00:01:25.008
And go ahead and configure

32
00:01:25.008 --> 00:01:29.003
our integration inbound channel adapter.

33
00:01:29.003 --> 00:01:34.007
We're using the int-twitter namespace.

34
00:01:34.007 --> 00:01:37.001
Notice that there are a number of options here

35
00:01:37.001 --> 00:01:38.008
inside this namespace.

36
00:01:38.008 --> 00:01:41.006
We have options specializing in direct message,

37
00:01:41.006 --> 00:01:45.004
DM, searches and posts, mention searches and posts,

38
00:01:45.004 --> 00:01:47.003
inbound and outbound adapters.

39
00:01:47.003 --> 00:01:49.000
The high-level thing to note here

40
00:01:49.000 --> 00:01:51.006
is that these inbound adapters are specialized

41
00:01:51.006 --> 00:01:55.001
to read from Twitter and return results on a channel,

42
00:01:55.001 --> 00:01:57.003
while the outbound adapters are specialized

43
00:01:57.003 --> 00:02:00.000
to write to Twitter and report the result

44
00:02:00.000 --> 00:02:01.002
on a reply channel.

45
00:02:01.002 --> 00:02:02.009
For this lesson, we're going to configure

46
00:02:02.009 --> 00:02:06.007
a search-inbound-channel-adapter.

47
00:02:06.007 --> 00:02:12.001
Let's give our adapter ID TwitterPoller.

48
00:02:12.001 --> 00:02:16.007
Our twitter-template will be called twitterAuth

49
00:02:16.007 --> 00:02:20.001
and that refers to the bean that we have established

50
00:02:20.001 --> 00:02:21.008
in line 21.

51
00:02:21.008 --> 00:02:25.004
That bean is what reads the OAuth tokens

52
00:02:25.004 --> 00:02:28.004
that we configured in application.properties

53
00:02:28.004 --> 00:02:30.006
that we discussed a few minutes ago.

54
00:02:30.006 --> 00:02:32.005
So we have our id, our twitter-template,

55
00:02:32.005 --> 00:02:35.001
which gives our authentication credentials.

56
00:02:35.001 --> 00:02:39.000
Our query is simply going to be a Twitter query

57
00:02:39.000 --> 00:02:41.002
that you can run on the web.

58
00:02:41.002 --> 00:02:46.000
Let's make this tailored to our backend corporate presence,

59
00:02:46.000 --> 00:02:48.003
which is KinetEco.

60
00:02:48.003 --> 00:02:50.000
This is a live Twitter feed

61
00:02:50.000 --> 00:02:53.003
that will be compatible with the KinetEco fictional brand

62
00:02:53.003 --> 00:02:56.003
that has a public Twitter account.

63
00:02:56.003 --> 00:02:57.002
So that's our query.

64
00:02:57.002 --> 00:03:01.004
The channel that we are going to return our results on

65
00:03:01.004 --> 00:03:04.005
is our updateNotificationQueueChannel,

66
00:03:04.005 --> 00:03:07.003
which is already in use and being pipelined

67
00:03:07.003 --> 00:03:10.001
into the application for other purposes.

68
00:03:10.001 --> 00:03:11.003
We're going to piggyback on this

69
00:03:11.003 --> 00:03:14.005
and also use the updateNotificationQueue.

70
00:03:14.005 --> 00:03:19.002
And as we did before with the JDBC configuration,

71
00:03:19.002 --> 00:03:23.000
we're going to set our auto-startup to be false

72
00:03:23.000 --> 00:03:28.003
because we want to control when this polling begins.

73
00:03:28.003 --> 00:03:30.000
Finally, having mentioned poller,

74
00:03:30.000 --> 00:03:34.004
we're going to go ahead and set up a poller mechanism

75
00:03:34.004 --> 00:03:37.006
so that this automatically is going out to Twitter,

76
00:03:37.006 --> 00:03:40.008
finding results, returning it to our application

77
00:03:40.008 --> 00:03:41.009
without our application having

78
00:03:41.009 --> 00:03:46.009
to manage the thread management of doing the poll ourselves.

79
00:03:46.009 --> 00:03:48.009
We'll do a our fixed-rate

80
00:03:48.009 --> 00:03:50.004
or normally, you might do something

81
00:03:50.004 --> 00:03:51.008
like every 10 minutes maybe

82
00:03:51.008 --> 00:03:54.004
but we're going to do every seven seconds.

83
00:03:54.004 --> 00:03:57.009
And let's give max-messages-per-poll,

84
00:03:57.009 --> 00:04:00.003
let's just set that at one.

85
00:04:00.003 --> 00:04:02.006
Okay, we close our poller element,

86
00:04:02.006 --> 00:04:06.009
which is inside our search-inbound-channel-adapter element.

87
00:04:06.009 --> 00:04:11.009
Id, query, channel, auto-startup.

88
00:04:11.009 --> 00:04:14.003
And that should do it

89
00:04:14.003 --> 00:04:17.005
for configuring our Twitter poll.

90
00:04:17.005 --> 00:04:19.008
And we uncommented, so we're importing.

91
00:04:19.008 --> 00:04:21.006
Now, the last thing I want to explain

92
00:04:21.006 --> 00:04:24.006
is what we've done in our ViewService.

93
00:04:24.006 --> 00:04:28.006
The updateNotificationQueueChannel there in line 20

94
00:04:28.006 --> 00:04:31.006
is already being consumed in our ViewService.

95
00:04:31.006 --> 00:04:33.004
We're going to add a capability

96
00:04:33.004 --> 00:04:37.008
to pull a tweet off of that channel.

97
00:04:37.008 --> 00:04:40.000
And for fun, we're putting the system out,

98
00:04:40.000 --> 00:04:43.000
we're printing the news, the payload of the tweet we pull in

99
00:04:43.000 --> 00:04:44.006
but then ultimately, what we're going to see

100
00:04:44.006 --> 00:04:48.007
is these latest tweets reflected on our consumer dashboard.

101
00:04:48.007 --> 00:04:51.003
So let's start our application and see what we get.

102
00:04:51.003 --> 00:04:52.005
And there you notice at the bottom,

103
00:04:52.005 --> 00:04:54.003
we have pulled in one tweet

104
00:04:54.003 --> 00:04:57.002
from our live demo corporate presence

105
00:04:57.002 --> 00:04:59.008
and if we go out to our user interface,

106
00:04:59.008 --> 00:05:01.002
we can see those getting reflected

107
00:05:01.002 --> 00:05:03.006
in the upper right-hand component

108
00:05:03.006 --> 00:05:05.003
of our dashboard, kinetECO News.

109
00:05:05.003 --> 00:05:06.001
So well done.

110
00:05:06.001 --> 00:05:09.004
We have built a simple Twitter inbound channel adapter

111
00:05:09.004 --> 00:05:13.000
and are polling a live Twitter feed for corporate news.

