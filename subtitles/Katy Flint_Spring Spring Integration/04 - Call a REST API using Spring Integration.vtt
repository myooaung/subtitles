WEBVTT
1
00:00:00.005 --> 00:00:03.007
- [Instructor] Rest is a common HTTP based technique

2
00:00:03.007 --> 00:00:05.008
for serving an externally hosted

3
00:00:05.008 --> 00:00:09.004
application programming interface or API.

4
00:00:09.004 --> 00:00:13.004
Let us build a rest API connection end point together.

5
00:00:13.004 --> 00:00:16.001
We will initialize the lesson files for this lesson

6
00:00:16.001 --> 00:00:21.005
using get checkout 04_04B.

7
00:00:21.005 --> 00:00:23.000
For several code lessons now,

8
00:00:23.000 --> 00:00:27.004
we have relied on a Java util timer implementation

9
00:00:27.004 --> 00:00:29.005
embedded in one of our service classes

10
00:00:29.005 --> 00:00:34.003
in order to simulate an HTTP rest API call and response

11
00:00:34.003 --> 00:00:36.009
so that we could focus on learning other things.

12
00:00:36.009 --> 00:00:39.009
In this lesson, we will transform that mock setup

13
00:00:39.009 --> 00:00:42.007
into a real HTTP interaction

14
00:00:42.007 --> 00:00:46.007
backed by our own applications embedded tomcat web server

15
00:00:46.007 --> 00:00:49.003
which is provided by spring boot.

16
00:00:49.003 --> 00:00:53.001
Notice here in line 39 of our status monitor service,

17
00:00:53.001 --> 00:00:56.008
we have a timer task that ultimately puts a message

18
00:00:56.008 --> 00:01:01.004
onto an API input channel down here in line 52.

19
00:01:01.004 --> 00:01:03.003
This message makes it sway from there

20
00:01:03.003 --> 00:01:06.001
through the core application message pipeline

21
00:01:06.001 --> 00:01:09.004
that is specified in status monitor, dot XML.

22
00:01:09.004 --> 00:01:12.007
Let's pipe in to that same API input channel

23
00:01:12.007 --> 00:01:17.005
in this lesson using an HTTP gateway configuration.

24
00:01:17.005 --> 00:01:22.000
Let's navigate to HTTP-API.XML.

25
00:01:22.000 --> 00:01:24.004
This is where this particular message flow

26
00:01:24.004 --> 00:01:25.008
will be configured.

27
00:01:25.008 --> 00:01:27.007
And the first thing I want to do is draw your attention

28
00:01:27.007 --> 00:01:32.004
to the schema version here in line 12 of this XML file.

29
00:01:32.004 --> 00:01:36.001
Now typically, when you specify a schema,

30
00:01:36.001 --> 00:01:39.001
you don't really need to specify that version number

31
00:01:39.001 --> 00:01:42.003
because you typically get the most recent one

32
00:01:42.003 --> 00:01:44.004
when you don't specify a version number.

33
00:01:44.004 --> 00:01:47.001
However, in this particular case, I did notice

34
00:01:47.001 --> 00:01:50.007
that I needed to specify the five dash two version

35
00:01:50.007 --> 00:01:54.001
of the spring integration HTTP schema

36
00:01:54.001 --> 00:01:56.004
in order to get the latest version.

37
00:01:56.004 --> 00:01:57.009
So that's worth noting.

38
00:01:57.009 --> 00:02:01.002
Now let's get underway and build our gateway.

39
00:02:01.002 --> 00:02:02.009
We start in a typical fashion

40
00:02:02.009 --> 00:02:06.006
using the INT hyphen HTTP namespace

41
00:02:06.006 --> 00:02:09.005
again, that we drew in there in line 12.

42
00:02:09.005 --> 00:02:10.007
And what we're going to do here

43
00:02:10.007 --> 00:02:14.005
is we're going to configure an outbound gateway.

44
00:02:14.005 --> 00:02:16.009
Now, before we go further, I want to make a distinction here

45
00:02:16.009 --> 00:02:20.005
between the inbound gateway and the outbound gateway.

46
00:02:20.005 --> 00:02:25.001
An outbound gateway is, in the HTTP context,

47
00:02:25.001 --> 00:02:27.004
going to be specialized on the client side

48
00:02:27.004 --> 00:02:28.007
which is what we're doing.

49
00:02:28.007 --> 00:02:32.001
We're wanting to send request and receive responses.

50
00:02:32.001 --> 00:02:34.003
That's typical client activity.

51
00:02:34.003 --> 00:02:39.000
An inbound gateway in the INT hyphen HTTP namespace

52
00:02:39.000 --> 00:02:41.001
is what you would use on the server side.

53
00:02:41.001 --> 00:02:43.000
If we were using spring integration

54
00:02:43.000 --> 00:02:46.001
in order to serve our API,

55
00:02:46.001 --> 00:02:47.003
we would use an inbound gateway

56
00:02:47.003 --> 00:02:50.001
to receive requests and produce responses.

57
00:02:50.001 --> 00:02:51.002
That's an important distinction

58
00:02:51.002 --> 00:02:53.003
between the inbound and outbound gateway

59
00:02:53.003 --> 00:02:55.007
here in the HTTP context.

60
00:02:55.007 --> 00:02:58.000
Okay, so we're going to configure an outbound gateway,

61
00:02:58.000 --> 00:02:59.004
and let's do this a piece at a time.

62
00:02:59.004 --> 00:03:01.004
First as we've become accustomed to,

63
00:03:01.004 --> 00:03:04.007
we need to give it a name, an ID rather.

64
00:03:04.007 --> 00:03:07.006
In our case, let's call it API gateway.

65
00:03:07.006 --> 00:03:10.006
And the next thing I want to show you is the reply channel.

66
00:03:10.006 --> 00:03:13.002
The reply channel, we're going to configure

67
00:03:13.002 --> 00:03:17.001
is the very same channel that we were formerly using

68
00:03:17.001 --> 00:03:22.003
in status monitor service, and that is API input channel.

69
00:03:22.003 --> 00:03:24.004
That is the channel that our application is going to be

70
00:03:24.004 --> 00:03:29.004
listening on in order to receive these inputs from the API.

71
00:03:29.004 --> 00:03:32.000
Let's give ourselves a reply timeout

72
00:03:32.000 --> 00:03:35.002
of a very generous five seconds.

73
00:03:35.002 --> 00:03:37.007
Let's give an expected response type,

74
00:03:37.007 --> 00:03:41.001
Java dot lang dot string will do us here.

75
00:03:41.001 --> 00:03:44.000
That's going to be a common one, another common choice

76
00:03:44.000 --> 00:03:48.001
you might end up selecting as a JSON object.

77
00:03:48.001 --> 00:03:50.001
Of course, we need to give a URL.

78
00:03:50.001 --> 00:03:53.001
What the API URL we're calling,

79
00:03:53.001 --> 00:04:00.006
like I mentioned is our internal application local host 9090

80
00:04:00.006 --> 00:04:03.004
and we've got a path API configured

81
00:04:03.004 --> 00:04:08.008
to respond to this call, HTTP method, GET.

82
00:04:08.008 --> 00:04:10.009
Okay, now, here's the interesting part,

83
00:04:10.009 --> 00:04:13.000
is the request channel.

84
00:04:13.000 --> 00:04:16.004
This being a gateway, it's a two way communication.

85
00:04:16.004 --> 00:04:19.005
This gateway expect to send its messages to a channel

86
00:04:19.005 --> 00:04:22.006
and to receive its messages from a channel.

87
00:04:22.006 --> 00:04:24.008
We are going to have to create a new channel

88
00:04:24.008 --> 00:04:27.000
in order to accommodate this need.

89
00:04:27.000 --> 00:04:29.007
And the way we're going to set this up is kind of interesting.

90
00:04:29.007 --> 00:04:33.000
Let's call it a polling signal channel,

91
00:04:33.000 --> 00:04:34.005
which is a curious, sort of name,

92
00:04:34.005 --> 00:04:37.004
and I'm going to explain why we named it that in just a moment.

93
00:04:37.004 --> 00:04:41.007
Okay, that configures our core outbound gateway itself.

94
00:04:41.007 --> 00:04:44.002
So what we're wanting to do here is we're wanting to set up

95
00:04:44.002 --> 00:04:48.002
a poll that spring integration manages all by itself,

96
00:04:48.002 --> 00:04:50.004
that our application doesn't have to manage.

97
00:04:50.004 --> 00:04:52.009
What we need to do is we need to create a request channel

98
00:04:52.009 --> 00:04:57.005
that is specifically designed to trigger the API request.

99
00:04:57.005 --> 00:04:59.009
And the way we're going to do that is

100
00:04:59.009 --> 00:05:03.008
we're going to configure a direct channel,

101
00:05:03.008 --> 00:05:06.002
similar to ones we've used before.

102
00:05:06.002 --> 00:05:09.007
We're going to call this channel polling signal channel.

103
00:05:09.007 --> 00:05:12.000
And that's it, we're giving it no more configuration.

104
00:05:12.000 --> 00:05:15.000
The polling signal channel that we're configuring here

105
00:05:15.000 --> 00:05:17.003
is the request channel that we're calling here

106
00:05:17.003 --> 00:05:19.006
in our gateway, polling signal channel.

107
00:05:19.006 --> 00:05:22.005
Now here's where the polling magic is going to happen.

108
00:05:22.005 --> 00:05:24.001
Again, in the integration namespace,

109
00:05:24.001 --> 00:05:26.007
we're going to configure an inbound channel adapter,

110
00:05:26.007 --> 00:05:30.003
call it our API polar.

111
00:05:30.003 --> 00:05:32.008
And the channel that we're going to be polling

112
00:05:32.008 --> 00:05:38.006
to is the channel we just built, polling signal channel.

113
00:05:38.006 --> 00:05:39.009
And this is an interesting technique

114
00:05:39.009 --> 00:05:41.002
that we haven't done yet.

115
00:05:41.002 --> 00:05:44.004
We're going to spring extension language expression

116
00:05:44.004 --> 00:05:47.007
to create a dummy message.

117
00:05:47.007 --> 00:05:49.007
Stick with me and I'll explain that further.

118
00:05:49.007 --> 00:05:53.008
Let's give our auto startup value here to be false

119
00:05:53.008 --> 00:05:56.002
because we need our application to initialize this

120
00:05:56.002 --> 00:05:57.005
when it's ready.

121
00:05:57.005 --> 00:06:00.004
And this is what we've been driving toward this whole time.

122
00:06:00.004 --> 00:06:04.005
We're going to give this inbound channel adapter a polar.

123
00:06:04.005 --> 00:06:06.008
Let's give it a fixed rate.

124
00:06:06.008 --> 00:06:09.009
How about every three seconds?

125
00:06:09.009 --> 00:06:13.002
Okay, now, let me back up and explain what's happening here.

126
00:06:13.002 --> 00:06:15.009
We've given our inbound channel adapter a polar.

127
00:06:15.009 --> 00:06:18.001
That polar is going to run every three seconds.

128
00:06:18.001 --> 00:06:21.006
And this polar is going to cause our inbound channel adapter

129
00:06:21.006 --> 00:06:25.004
to send a dummy message, while it's a real message

130
00:06:25.004 --> 00:06:27.005
but we're not going to be consuming the message.

131
00:06:27.005 --> 00:06:30.006
It's an empty message, the payload is just an empty string.

132
00:06:30.006 --> 00:06:33.009
That's going to put a message on our polling signal channel,

133
00:06:33.009 --> 00:06:35.004
there in line 16.

134
00:06:35.004 --> 00:06:39.001
And the message being sent on that polling signal channel

135
00:06:39.001 --> 00:06:44.000
will signal our outbound gateway to invoke our API call,

136
00:06:44.000 --> 00:06:45.006
and the response will come back

137
00:06:45.006 --> 00:06:48.007
into the application on the API input channel.

138
00:06:48.007 --> 00:06:51.000
This is the quintessential way to create

139
00:06:51.000 --> 00:06:55.001
a spring integration managed polar for an API service.

140
00:06:55.001 --> 00:06:57.007
Now, finally, this is all the spring integration

141
00:06:57.007 --> 00:06:59.008
configuration we need to do.

142
00:06:59.008 --> 00:07:02.002
Let's get in here and take some

143
00:07:02.002 --> 00:07:05.001
of our scaffolding away that we no longer need.

144
00:07:05.001 --> 00:07:07.001
One of the things I love more than building code

145
00:07:07.001 --> 00:07:11.001
is taking code out that is no longer needed.

146
00:07:11.001 --> 00:07:15.000
We get to take away that utility method.

147
00:07:15.000 --> 00:07:18.002
We get to take away our timer task.

148
00:07:18.002 --> 00:07:22.003
We don't have to start this timer task any longer.

149
00:07:22.003 --> 00:07:27.002
This simulated rest API call, we take out.

150
00:07:27.002 --> 00:07:30.000
It has been moved someplace else.

151
00:07:30.000 --> 00:07:33.003
So all of this scaffolding goes away.

152
00:07:33.003 --> 00:07:35.002
And then here in the dashboard manager,

153
00:07:35.002 --> 00:07:40.003
all we need to do is create a way to start that API polar.

154
00:07:40.003 --> 00:07:45.008
If you'll recall, in line 21 of our XML configuration,

155
00:07:45.008 --> 00:07:48.000
we asked the application to give us

156
00:07:48.000 --> 00:07:49.004
an explicit start for that polar.

157
00:07:49.004 --> 00:07:51.006
So that's what we're doing here in line 64.

158
00:07:51.006 --> 00:07:55.008
Alright, we've taken configuration away.

159
00:07:55.008 --> 00:07:59.008
And let's put a system out message here

160
00:07:59.008 --> 00:08:02.008
on our API return payload.

161
00:08:02.008 --> 00:08:04.007
So we can see something in the console

162
00:08:04.007 --> 00:08:07.001
and let's give it a start.

163
00:08:07.001 --> 00:08:09.004
Starting our application now.

164
00:08:09.004 --> 00:08:12.005
The first thing we should see when we boot up is an error.

165
00:08:12.005 --> 00:08:15.006
What did we get wrong here?

166
00:08:15.006 --> 00:08:20.007
Okay, we have a typo here in our schema URL specification.

167
00:08:20.007 --> 00:08:23.002
I used a hyphen instead of a dot.

168
00:08:23.002 --> 00:08:25.002
Let's correct that and start the app again

169
00:08:25.002 --> 00:08:28.006
and I think that will solve it.

170
00:08:28.006 --> 00:08:30.002
Okay, looks like we have a clean start.

171
00:08:30.002 --> 00:08:32.003
Okay, what we see there in the console

172
00:08:32.003 --> 00:08:38.004
is our API responding with this JSON formatted string.

173
00:08:38.004 --> 00:08:41.008
Now, when we go out to our user interface,

174
00:08:41.008 --> 00:08:44.006
we're going to see like before

175
00:08:44.006 --> 00:08:46.004
in the lower left hand corner for example,

176
00:08:46.004 --> 00:08:48.001
in the power usage grid.

177
00:08:48.001 --> 00:08:51.002
These account credits to date are changing

178
00:08:51.002 --> 00:08:55.006
and those are now coming from a real live HTTP interaction.

179
00:08:55.006 --> 00:08:59.000
So we've built a client side rest API interaction

180
00:08:59.000 --> 00:09:01.004
using an HTTP outbound gateway

181
00:09:01.004 --> 00:09:03.009
and piped the response into our application's

182
00:09:03.009 --> 00:09:06.002
core message flow that we're now seeing

183
00:09:06.002 --> 00:09:08.000
live on the user interface.

