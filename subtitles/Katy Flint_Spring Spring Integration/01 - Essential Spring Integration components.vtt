WEBVTT
1
00:00:00.005 --> 00:00:01.008
- [Instructor] Let's take an overview

2
00:00:01.008 --> 00:00:04.006
of Essential Spring Integration components.

3
00:00:04.006 --> 00:00:07.004
We will also explore some application design patterns

4
00:00:07.004 --> 00:00:09.006
that Spring Integration upholds.

5
00:00:09.006 --> 00:00:13.004
The most fundamental component of any messaging framework,

6
00:00:13.004 --> 00:00:15.009
including of course, Spring Integration,

7
00:00:15.009 --> 00:00:20.005
but also any homegrown or language specialized framework,

8
00:00:20.005 --> 00:00:22.009
is the message itself.

9
00:00:22.009 --> 00:00:25.004
We should think of a message as a discreet unit

10
00:00:25.004 --> 00:00:28.003
of information exchanged by participants

11
00:00:28.003 --> 00:00:31.001
in the business logic of an application.

12
00:00:31.001 --> 00:00:34.006
In Spring Integration, the message channel is the component

13
00:00:34.006 --> 00:00:37.005
that is responsible for transmitting messages.

14
00:00:37.005 --> 00:00:40.000
A channel can be compared to a conduit,

15
00:00:40.000 --> 00:00:42.002
or a pathway, or a pipe.

16
00:00:42.002 --> 00:00:45.000
The essential point is that when we have components

17
00:00:45.000 --> 00:00:47.008
of an application that need to share information,

18
00:00:47.008 --> 00:00:50.009
it is the channel that transmits the information

19
00:00:50.009 --> 00:00:52.008
in the form of a message.

20
00:00:52.008 --> 00:00:56.002
An endpoint is made up of one or more components.

21
00:00:56.002 --> 00:00:58.000
And it manages message delivery

22
00:00:58.000 --> 00:01:01.008
in a way that meets the design needs of the application.

23
00:01:01.008 --> 00:01:04.004
Endpoints act as a conceptual interface

24
00:01:04.004 --> 00:01:05.008
between the messaging framework

25
00:01:05.008 --> 00:01:08.008
and the core application functionality.

26
00:01:08.008 --> 00:01:12.002
The term end point is a broad descriptor of behavior.

27
00:01:12.002 --> 00:01:15.002
In fact, the role of endpoint in Spring Integration

28
00:01:15.002 --> 00:01:18.000
is fulfilled by a wide variety of interfaces

29
00:01:18.000 --> 00:01:19.007
and implementations.

30
00:01:19.007 --> 00:01:21.003
Finally, we should not overlook

31
00:01:21.003 --> 00:01:23.006
naming the Java Virtual Machine itself

32
00:01:23.006 --> 00:01:27.004
as an essential component in a Spring Integration project.

33
00:01:27.004 --> 00:01:29.008
Being interested in delivering integrations

34
00:01:29.008 --> 00:01:32.005
between network enterprise components

35
00:01:32.005 --> 00:01:35.004
we must consider the boundaries of the JVM runtime

36
00:01:35.004 --> 00:01:39.001
as an essential delineation in the overall system.

37
00:01:39.001 --> 00:01:41.004
Messages, channels, and endpoints

38
00:01:41.004 --> 00:01:44.004
are all under consideration in the industry standard book,

39
00:01:44.004 --> 00:01:46.008
Enterprise Integration Patterns.

40
00:01:46.008 --> 00:01:48.002
This book has been seminal

41
00:01:48.002 --> 00:01:51.002
in the software industry trend over the past decade

42
00:01:51.002 --> 00:01:55.003
toward distributed message-based application architectures.

43
00:01:55.003 --> 00:01:57.009
Spring Integration is explicit in its promotion

44
00:01:57.009 --> 00:02:01.002
of best practices as set forth in this book.

45
00:02:01.002 --> 00:02:03.009
Using interface contractual definitions,

46
00:02:03.009 --> 00:02:07.002
and also explicit out of the box implementations,

47
00:02:07.002 --> 00:02:09.005
Spring Integration helps the Java developer

48
00:02:09.005 --> 00:02:12.003
uphold best software design practices

49
00:02:12.003 --> 00:02:16.007
in a message-based microservice distributed context.

50
00:02:16.007 --> 00:02:18.009
Let's set up the rest of our learning in this course

51
00:02:18.009 --> 00:02:20.001
by reviewing three more

52
00:02:20.001 --> 00:02:22.005
important software design principles.

53
00:02:22.005 --> 00:02:25.006
Loosely coupled describes the case where the dependencies

54
00:02:25.006 --> 00:02:27.003
of every component are loose

55
00:02:27.003 --> 00:02:30.004
and contractual rather than hardwired.

56
00:02:30.004 --> 00:02:31.008
This makes things swappable

57
00:02:31.008 --> 00:02:33.008
and allows for low-risk responsiveness

58
00:02:33.008 --> 00:02:37.002
to changing requirements and external constraints.

59
00:02:37.002 --> 00:02:39.003
Separation of concerns is a by-product

60
00:02:39.003 --> 00:02:41.005
of a loosely coupled system

61
00:02:41.005 --> 00:02:44.001
and means that the responsibilities of each component

62
00:02:44.001 --> 00:02:46.009
are clearly delineated and enforced.

63
00:02:46.009 --> 00:02:49.001
This allows for excellent system qualities

64
00:02:49.001 --> 00:02:52.003
like design clarity, and testing efficiency.

65
00:02:52.003 --> 00:02:54.006
And when you achieve number one and two,

66
00:02:54.006 --> 00:02:56.004
the third follows closely,

67
00:02:56.004 --> 00:02:59.003
reuse and portability allows the development team

68
00:02:59.003 --> 00:03:02.000
to package and reuse their Spring Integration

69
00:03:02.000 --> 00:03:04.002
implementations in ways that support

70
00:03:04.002 --> 00:03:07.000
the entire enterprise over time.

