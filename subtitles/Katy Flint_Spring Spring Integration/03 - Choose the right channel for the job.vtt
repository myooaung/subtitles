WEBVTT
1
00:00:00.005 --> 00:00:01.005
- [Instructor] Now let's go further

2
00:00:01.005 --> 00:00:04.001
on the topic of message channels.

3
00:00:04.001 --> 00:00:05.006
Let's have a look at the channel

4
00:00:05.006 --> 00:00:07.008
as an enterprise integration pattern,

5
00:00:07.008 --> 00:00:09.005
then we'll return to spring integration

6
00:00:09.005 --> 00:00:12.003
and end the lesson with the code implementation.

7
00:00:12.003 --> 00:00:14.004
As we have learned, a subscribable model

8
00:00:14.004 --> 00:00:17.000
allows a consumer to listen for interesting events

9
00:00:17.000 --> 00:00:18.003
by subscription.

10
00:00:18.003 --> 00:00:20.008
It is sometimes referred to as an event driven

11
00:00:20.008 --> 00:00:23.004
or broadcast model of communication.

12
00:00:23.004 --> 00:00:25.008
The sibling, the pollable model,

13
00:00:25.008 --> 00:00:28.001
requires a consumer to explicitly ask

14
00:00:28.001 --> 00:00:30.000
for the latest messages.

15
00:00:30.000 --> 00:00:31.008
A queue is not a communication model

16
00:00:31.008 --> 00:00:34.004
but rather a data structure that stores messages

17
00:00:34.004 --> 00:00:37.004
for retrieval in a specific predetermined order.

18
00:00:37.004 --> 00:00:40.000
Let's talk for a minute about channels theoretically,

19
00:00:40.000 --> 00:00:43.001
in the context of enterprise integration patterns.

20
00:00:43.001 --> 00:00:44.008
The best way I know how to do this,

21
00:00:44.008 --> 00:00:48.001
is to read a direct quote from the publication itself.

22
00:00:48.001 --> 00:00:50.005
A messaging system manages messaging

23
00:00:50.005 --> 00:00:54.000
the way a database system manages data persistence.

24
00:00:54.000 --> 00:00:57.000
Just as an administrator must populate the database

25
00:00:57.000 --> 00:00:59.006
with the schema for an applications data,

26
00:00:59.006 --> 00:01:02.005
that administrator must configure the messaging system

27
00:01:02.005 --> 00:01:05.008
with the channels that define the paths of communication,

28
00:01:05.008 --> 00:01:08.002
between the application components.

29
00:01:08.002 --> 00:01:09.007
The implication of this statement

30
00:01:09.007 --> 00:01:12.007
is that channels themselves have not only the capacity,

31
00:01:12.007 --> 00:01:16.002
but also the responsibility to influence the behavior

32
00:01:16.002 --> 00:01:18.003
of the application as a whole.

33
00:01:18.003 --> 00:01:20.009
You will often hear channels compared to plumbing pipes,

34
00:01:20.009 --> 00:01:23.005
or post office boxes or other things.

35
00:01:23.005 --> 00:01:26.000
Every comparison has its advantages.

36
00:01:26.000 --> 00:01:29.009
I like the comparison to streets in a well-organized town.

37
00:01:29.009 --> 00:01:32.009
There is a small set really of behaviors you can do

38
00:01:32.009 --> 00:01:35.000
or not do on a street.

39
00:01:35.000 --> 00:01:36.008
You can modulate your speed,

40
00:01:36.008 --> 00:01:39.001
travel only in certain directions,

41
00:01:39.001 --> 00:01:41.007
give priority to traffic on other streets,

42
00:01:41.007 --> 00:01:44.002
perhaps not walk or not drive.

43
00:01:44.002 --> 00:01:46.003
And these options, though simple and few,

44
00:01:46.003 --> 00:01:47.009
have a big collective impact

45
00:01:47.009 --> 00:01:50.002
on the quality of life in a town,

46
00:01:50.002 --> 00:01:52.008
depending on how they're applied and combined.

47
00:01:52.008 --> 00:01:55.008
In the same way, channels have just a few options

48
00:01:55.008 --> 00:01:57.005
for configuration.

49
00:01:57.005 --> 00:02:00.009
Must our message transmission be subscribable or pollable?

50
00:02:00.009 --> 00:02:03.002
Must it be able to queue messages?

51
00:02:03.002 --> 00:02:05.009
Must it be friendly to asynchronous conditions?

52
00:02:05.009 --> 00:02:07.009
Are there logical transactional boundaries

53
00:02:07.009 --> 00:02:09.007
that we need to manage?

54
00:02:09.007 --> 00:02:12.001
You can see how, each of these conditions

55
00:02:12.001 --> 00:02:13.009
alone is straightforward,

56
00:02:13.009 --> 00:02:16.005
matrix as a connected system,

57
00:02:16.005 --> 00:02:19.002
they have a big impact on the livability.

58
00:02:19.002 --> 00:02:21.005
That is to say the scalability,

59
00:02:21.005 --> 00:02:24.004
you can see how, though each of these conditions alone

60
00:02:24.004 --> 00:02:27.007
is straightforward, matrix as a connected system

61
00:02:27.007 --> 00:02:30.003
they have a big impact on the livability,

62
00:02:30.003 --> 00:02:33.001
that is to say the scalability, reliability,

63
00:02:33.001 --> 00:02:35.005
and portability of an application.

64
00:02:35.005 --> 00:02:37.006
These four architectural characteristics,

65
00:02:37.006 --> 00:02:40.004
inform the class implementations in the package

66
00:02:40.004 --> 00:02:45.000
org.springframework.integration.channel.

67
00:02:45.000 --> 00:02:47.003
Though we do not have time to discuss all of these

68
00:02:47.003 --> 00:02:49.004
in detail, it is useful to get a feel

69
00:02:49.004 --> 00:02:51.008
for the options that are available to you.

70
00:02:51.008 --> 00:02:54.008
DirectChannel, PublishedSubscribedChannel,

71
00:02:54.008 --> 00:02:58.004
and FixedSubscriberChannel, all implement the subscriber

72
00:02:58.004 --> 00:03:02.002
that is the event driven, reactive model of communication.

73
00:03:02.002 --> 00:03:04.000
They differ in the number of subscribers

74
00:03:04.000 --> 00:03:05.000
that they can service,

75
00:03:05.000 --> 00:03:07.005
and in their transactional capabilities.

76
00:03:07.005 --> 00:03:10.000
We coded an example of a DirectChannel,

77
00:03:10.000 --> 00:03:12.005
and we're going to look at a PublishSubscribeChannel

78
00:03:12.005 --> 00:03:13.008
in the next lesson.

79
00:03:13.008 --> 00:03:16.009
QueueChannel, PriorityChannel, RendezvousChannel

80
00:03:16.009 --> 00:03:20.008
and ExecutorChannel are all pollable implementations.

81
00:03:20.008 --> 00:03:23.009
They support varying capabilities around queuing,

82
00:03:23.009 --> 00:03:26.002
message recipients, transactional boundaries

83
00:03:26.002 --> 00:03:28.001
and asynchronicity.

84
00:03:28.001 --> 00:03:31.001
We will code a QueueChannel in a future lesson.

85
00:03:31.001 --> 00:03:33.001
Finally, the FluxChannel bakes and support

86
00:03:33.001 --> 00:03:35.005
for Java's reactive streams library.

87
00:03:35.005 --> 00:03:37.001
Now that we've taken a bird's-eye view

88
00:03:37.001 --> 00:03:39.001
of these very useful channel classes,

89
00:03:39.001 --> 00:03:41.000
let's jump back into our code work

90
00:03:41.000 --> 00:03:44.003
and build a pollable QueueChannel.

91
00:03:44.003 --> 00:03:46.008
As before let's start by focusing our files

92
00:03:46.008 --> 00:03:48.006
on the current lesson code

93
00:03:48.006 --> 00:03:54.007
which would be get checkout 02 underscore 03 B.

94
00:03:54.007 --> 00:03:56.006
What we want to do here is provide a way

95
00:03:56.006 --> 00:03:59.001
for our tech support service to monitor

96
00:03:59.001 --> 00:04:03.002
and then notify the user when a software update is required.

97
00:04:03.002 --> 00:04:06.003
A pollable model we'll let our application process

98
00:04:06.003 --> 00:04:07.009
post notifications at will

99
00:04:07.009 --> 00:04:10.005
and as we have the resources available.

100
00:04:10.005 --> 00:04:14.000
Since polling is an ask for the latest news type of model

101
00:04:14.000 --> 00:04:17.005
instead of an event reaction type of model.

102
00:04:17.005 --> 00:04:20.002
Having said that as before, let's start

103
00:04:20.002 --> 00:04:21.004
with our declaration.

104
00:04:21.004 --> 00:04:23.006
Here in tech support XML,

105
00:04:23.006 --> 00:04:28.002
META-INF spring integration, tech support XML.

106
00:04:28.002 --> 00:04:30.007
Now configuring this channel

107
00:04:30.007 --> 00:04:32.006
is going to look very much like

108
00:04:32.006 --> 00:04:35.005
our direct channel that we configured in the last lesson

109
00:04:35.005 --> 00:04:37.002
up in line 14.

110
00:04:37.002 --> 00:04:39.000
We're going to use the same element

111
00:04:39.000 --> 00:04:43.000
from the INF namespace, that is channel,

112
00:04:43.000 --> 00:04:52.005
give it an ID of let's say update notification QueueChannel

113
00:04:52.005 --> 00:04:53.007
but there's one important difference

114
00:04:53.007 --> 00:04:56.005
with the direct channel that we configured in line 14.

115
00:04:56.005 --> 00:05:02.005
And that will be the addition of property called queue.

116
00:05:02.005 --> 00:05:05.002
That's what makes this a pollable QueueChannel.

117
00:05:05.002 --> 00:05:08.005
We're going to supply one attribute value

118
00:05:08.005 --> 00:05:10.009
we're going to give our queue a capacity of five

119
00:05:10.009 --> 00:05:14.000
meaning it can hold no more than five messages at a time.

120
00:05:14.000 --> 00:05:18.000
So with that done, let's go use this channel

121
00:05:18.000 --> 00:05:20.000
starting with the tech support service.

122
00:05:20.000 --> 00:05:23.003
Tech support services designed to send notifications

123
00:05:23.003 --> 00:05:25.004
into our pollable channel queue.

124
00:05:25.004 --> 00:05:27.003
Like before we're getting a handle

125
00:05:27.003 --> 00:05:30.000
on our channel inside our service,

126
00:05:30.000 --> 00:05:34.005
it's going to look like this pollable channel.

127
00:05:34.005 --> 00:05:36.002
We're getting a reference to our channel

128
00:05:36.002 --> 00:05:41.009
by looking into the spring configuration.

129
00:05:41.009 --> 00:05:45.009
And in order to do that, we need the name of our bean

130
00:05:45.009 --> 00:05:53.005
which we named let's copy and paste this to be error free.

131
00:05:53.005 --> 00:05:57.003
That should do the trick, cast it to a pollable channel.

132
00:05:57.003 --> 00:05:59.002
And then all we need to do is down here

133
00:05:59.002 --> 00:06:04.004
in our check currency version, send a message.

134
00:06:04.004 --> 00:06:08.001
We've done this before to recall that send requires

135
00:06:08.001 --> 00:06:10.009
at least one parameter of a message.

136
00:06:10.009 --> 00:06:12.001
Like before we're going to use

137
00:06:12.001 --> 00:06:14.004
our message builder utility class.

138
00:06:14.004 --> 00:06:17.003
We'll use it with payload option

139
00:06:17.003 --> 00:06:20.001
instead of having a domain specific payload here

140
00:06:20.001 --> 00:06:24.001
a nice shortcut is that we can just give it a string.

141
00:06:24.001 --> 00:06:28.001
Let's say application update required.

142
00:06:28.001 --> 00:06:33.003
And one final thing here, we'll build our message

143
00:06:33.003 --> 00:06:35.000
that creates the message that we're looking for

144
00:06:35.000 --> 00:06:40.001
and we're going to add to the send method, a timeout.

145
00:06:40.001 --> 00:06:44.000
This means that if the queue is at capacity

146
00:06:44.000 --> 00:06:47.006
the sender will not block waiting for capacity.

147
00:06:47.006 --> 00:06:51.009
If it can't receive it, it will drop the message and go on.

148
00:06:51.009 --> 00:06:54.009
That's what we want in our particular case.

149
00:06:54.009 --> 00:06:57.009
So now we've got a handle on our pollable channel

150
00:06:57.009 --> 00:07:01.000
and we're sending a message and all that remains

151
00:07:01.000 --> 00:07:04.003
for us to prove this out is to go into review service

152
00:07:04.003 --> 00:07:06.003
and sort of do the same thing in reverse

153
00:07:06.003 --> 00:07:09.008
except for that we are receiving a message here.

154
00:07:09.008 --> 00:07:11.000
Here in our view service

155
00:07:11.000 --> 00:07:13.004
in our check for notifications method,

156
00:07:13.004 --> 00:07:15.001
we're going to receive a method

157
00:07:15.001 --> 00:07:19.006
that means we're going to pull the channel for notifications.

158
00:07:19.006 --> 00:07:22.009
The methods we have available to us here.

159
00:07:22.009 --> 00:07:27.003
What we want to take is this receive with a timeout

160
00:07:27.003 --> 00:07:28.009
because we don't want to block

161
00:07:28.009 --> 00:07:30.007
if there's nothing to receive.

162
00:07:30.007 --> 00:07:33.006
The receive method of update notification channel

163
00:07:33.006 --> 00:07:36.004
will give us an instance of a message

164
00:07:36.004 --> 00:07:42.002
and we want to capture, that import that,

165
00:07:42.002 --> 00:07:43.004
and then what we're going to do

166
00:07:43.004 --> 00:07:47.004
is if the messages is at null,

167
00:07:47.004 --> 00:07:50.008
we're going to update the view with a notice to the user

168
00:07:50.008 --> 00:07:55.006
that they need to update their software.

169
00:07:55.006 --> 00:07:56.007
And the way we do that

170
00:07:56.007 --> 00:07:59.004
is we're going to use the message we just created.

171
00:07:59.004 --> 00:08:03.004
We're going to get the payload, put that out as a string.

172
00:08:03.004 --> 00:08:05.002
And then that will go to the user interface

173
00:08:05.002 --> 00:08:08.003
telling the user that they need to get new software.

174
00:08:08.003 --> 00:08:09.003
One thing to note here

175
00:08:09.003 --> 00:08:12.008
is that since we timed out our receive

176
00:08:12.008 --> 00:08:15.008
on a thousand, which is equivalent of one second,

177
00:08:15.008 --> 00:08:18.000
this message might end up being null.

178
00:08:18.000 --> 00:08:20.005
And that's why this message check to see if it's,

179
00:08:20.005 --> 00:08:24.000
if we actually have a message is very important.

180
00:08:24.000 --> 00:08:26.009
So let's run our application now

181
00:08:26.009 --> 00:08:29.003
and see if it compiles, runs

182
00:08:29.003 --> 00:08:32.007
and gives us what we're thinking we're going to see.

183
00:08:32.007 --> 00:08:33.007
That looks pretty good

184
00:08:33.007 --> 00:08:36.002
let's go out to our browser.

185
00:08:36.002 --> 00:08:39.000
And as you saw, we got a notice here in the browser

186
00:08:39.000 --> 00:08:41.003
saying that an application update is required

187
00:08:41.003 --> 00:08:42.009
and that's what we were looking to see.

188
00:08:42.009 --> 00:08:44.005
We've now configured our second channel

189
00:08:44.005 --> 00:08:45.008
and asynchronous QueueChannel

190
00:08:45.008 --> 00:08:48.000
that uses a pollable model of communication.

