WEBVTT
1
00:00:00.005 --> 00:00:03.001
- [Instructor] Let's move into the topic of channels.

2
00:00:03.001 --> 00:00:06.006
This is the first of two lessons on channels.

3
00:00:06.006 --> 00:00:09.003
We will begin with foundational concepts.

4
00:00:09.003 --> 00:00:11.001
Then discuss the MessageChannel

5
00:00:11.001 --> 00:00:13.005
as a Spring integration component.

6
00:00:13.005 --> 00:00:16.007
We will end the lesson with a code implementation.

7
00:00:16.007 --> 00:00:18.003
Let's us define a producer.

8
00:00:18.003 --> 00:00:21.003
We can think of a producer as a business process

9
00:00:21.003 --> 00:00:23.003
that has information to communicate

10
00:00:23.003 --> 00:00:24.007
to a larger system.

11
00:00:24.007 --> 00:00:26.008
Its counterpart, a consumer,

12
00:00:26.008 --> 00:00:28.004
is a business process that needs

13
00:00:28.004 --> 00:00:30.000
to receive information

14
00:00:30.000 --> 00:00:33.000
in order to do its business processing work.

15
00:00:33.000 --> 00:00:36.003
And a channel? Well, a channel is a couple of things.

16
00:00:36.003 --> 00:00:39.006
Let's start by defining a channel conceptually

17
00:00:39.006 --> 00:00:42.000
as a conduit for transmitting messages

18
00:00:42.000 --> 00:00:45.002
between producers and consumers.

19
00:00:45.002 --> 00:00:49.000
Producers and consumers share information encapsulated

20
00:00:49.000 --> 00:00:50.005
in message objects

21
00:00:50.005 --> 00:00:53.001
that are transmitted via channels.

22
00:00:53.001 --> 00:00:55.004
Channels are concerned with transmission.

23
00:00:55.004 --> 00:00:57.000
To advance this particular lesson,

24
00:00:57.000 --> 00:00:59.005
let's be more specific and define a channel

25
00:00:59.005 --> 00:01:00.007
as an implementation

26
00:01:00.007 --> 00:01:04.004
of the Spring framework MessageChannel interface.

27
00:01:04.004 --> 00:01:06.005
There are many out-of-the-box implementations

28
00:01:06.005 --> 00:01:09.002
of MessageChannel that you can and will employ

29
00:01:09.002 --> 00:01:11.002
within Spring integration.

30
00:01:11.002 --> 00:01:13.007
We're going to look at some of these later.

31
00:01:13.007 --> 00:01:15.001
All of them though inherit

32
00:01:15.001 --> 00:01:17.004
from either the SubscribableChannel

33
00:01:17.004 --> 00:01:20.000
or the PollableChannel interface,

34
00:01:20.000 --> 00:01:22.001
both of which in turn inherit

35
00:01:22.001 --> 00:01:26.002
from the all-important MessageChannel interface.

36
00:01:26.002 --> 00:01:28.006
The MessageChannel interface guarantees

37
00:01:28.006 --> 00:01:33.002
that every channel has the capacity to send messages.

38
00:01:33.002 --> 00:01:37.002
In turn, Subscribable and Pollable interfaces

39
00:01:37.002 --> 00:01:40.001
both guarantee that every channel has the capacity

40
00:01:40.001 --> 00:01:42.006
to deliver messages.

41
00:01:42.006 --> 00:01:44.002
Later we will talk in some details

42
00:01:44.002 --> 00:01:45.005
about the differences between Subscribable

43
00:01:45.005 --> 00:01:48.004
and Pollable models of communication.

44
00:01:48.004 --> 00:01:50.002
They are substantive.

45
00:01:50.002 --> 00:01:53.000
Right now, let's focus on the SubscribableChannel

46
00:01:53.000 --> 00:01:55.002
and let's learn about its characteristics

47
00:01:55.002 --> 00:01:58.001
through the process of making one ourselves.

48
00:01:58.001 --> 00:01:59.008
In our code editor together,

49
00:01:59.008 --> 00:02:01.002
let's have a first look

50
00:02:01.002 --> 00:02:03.008
at making a Spring integration channel.

51
00:02:03.008 --> 00:02:04.008
Let's get our bearings

52
00:02:04.008 --> 00:02:07.003
by looking at where we're starting here.

53
00:02:07.003 --> 00:02:11.004
For starters, we want to check out our source code

54
00:02:11.004 --> 00:02:13.002
for this lesson

55
00:02:13.002 --> 00:02:17.001
and that would be git checkout 02_02b.

56
00:02:17.001 --> 00:02:20.002
Once that's done in the starter application,

57
00:02:20.002 --> 00:02:22.003
what you'll see in the user interface,

58
00:02:22.003 --> 00:02:23.009
which is the web browser,

59
00:02:23.009 --> 00:02:27.009
is in the Tech Support section of our grid dashboard.

60
00:02:27.009 --> 00:02:31.002
We notice that the Software Build notice to the user

61
00:02:31.002 --> 00:02:33.003
is at this time undetermined.

62
00:02:33.003 --> 00:02:34.009
And what we're going to do in this lesson

63
00:02:34.009 --> 00:02:37.005
is we're going to configure a Spring integration channel

64
00:02:37.005 --> 00:02:40.005
that pipes the software build out to the user,

65
00:02:40.005 --> 00:02:42.002
the correct software build.

66
00:02:42.002 --> 00:02:43.004
So let's get under way.

67
00:02:43.004 --> 00:02:47.006
Let's stop our application from running.

68
00:02:47.006 --> 00:02:49.005
And the first thing we want to do

69
00:02:49.005 --> 00:02:55.007
is go to our Spring integration configuration files

70
00:02:55.007 --> 00:02:58.002
that we've got here in the resources META-INF folder.

71
00:02:58.002 --> 00:02:59.008
We've got them stored under integration.

72
00:02:59.008 --> 00:03:04.001
And let's pull up the tech-support.xml integration file.

73
00:03:04.001 --> 00:03:05.007
And this is the super fun thing.

74
00:03:05.007 --> 00:03:07.006
I just love how simple this is to do.

75
00:03:07.006 --> 00:03:10.008
We're going to use the integration name space.

76
00:03:10.008 --> 00:03:13.008
Declare an integration colon channel.

77
00:03:13.008 --> 00:03:15.007
Give it an id.

78
00:03:15.007 --> 00:03:19.002
Let's call it techSupportChannel.

79
00:03:19.002 --> 00:03:21.006
Close the element and that's it.

80
00:03:21.006 --> 00:03:22.008
We have now created

81
00:03:22.008 --> 00:03:25.004
our very first Spring integration channel.

82
00:03:25.004 --> 00:03:27.005
Let's learn about what we have created.

83
00:03:27.005 --> 00:03:29.003
Let's go to DashboardManager.

84
00:03:29.003 --> 00:03:33.000
And now that we have a channel, we need to consume it.

85
00:03:33.000 --> 00:03:35.004
So here in the InitializeTechSupport method,

86
00:03:35.004 --> 00:03:38.006
we left off creating a generic message

87
00:03:38.006 --> 00:03:39.007
and now what we're going to do

88
00:03:39.007 --> 00:03:41.004
is we're going to send that message

89
00:03:41.004 --> 00:03:43.009
over the channel that we just configured

90
00:03:43.009 --> 00:03:45.008
in tech-support.xml.

91
00:03:45.008 --> 00:03:47.004
The way we're going to do that in this example

92
00:03:47.004 --> 00:03:49.001
is we're going to go out to the Spring context

93
00:03:49.001 --> 00:03:50.006
and pull in a bean

94
00:03:50.006 --> 00:03:53.008
and get a handle on our channel in that fashion.

95
00:03:53.008 --> 00:03:55.003
Now, the first thing to know

96
00:03:55.003 --> 00:03:59.001
is that very simple channel that we implemented

97
00:03:59.001 --> 00:04:01.004
where it just said int:channel,

98
00:04:01.004 --> 00:04:02.008
what that gives us in Spring

99
00:04:02.008 --> 00:04:05.001
is something called a DirectChannel.

100
00:04:05.001 --> 00:04:07.008
A DirectChannel has specific qualities

101
00:04:07.008 --> 00:04:09.005
and what a DirectChannel is going to give us

102
00:04:09.005 --> 00:04:15.009
is a single synchronous single-threaded communication pipe.

103
00:04:15.009 --> 00:04:19.006
Let's finish getting our bean configured

104
00:04:19.006 --> 00:04:22.006
and we called that channel techSupportChannel

105
00:04:22.006 --> 00:04:25.003
in our XML configuration file.

106
00:04:25.003 --> 00:04:29.009
And now that we've got a handle on this techSupportChannel,

107
00:04:29.009 --> 00:04:32.003
this is also quite fun.

108
00:04:32.003 --> 00:04:35.005
All we need to do is send this message

109
00:04:35.005 --> 00:04:38.004
that we created in the last lesson.

110
00:04:38.004 --> 00:04:39.005
So just a recap.

111
00:04:39.005 --> 00:04:42.000
We went out to our Spring integration context,

112
00:04:42.000 --> 00:04:43.003
we got a handle on the DirectChannel

113
00:04:43.003 --> 00:04:47.003
that we configured here called techSupportChannel.

114
00:04:47.003 --> 00:04:50.004
And we're using that channel to send a message.

115
00:04:50.004 --> 00:04:54.003
Now, a sent message is no use without a receiving end.

116
00:04:54.003 --> 00:04:57.007
In fact, if we try to compile this application right now,

117
00:04:57.007 --> 00:04:58.008
it would not compile.

118
00:04:58.008 --> 00:05:01.000
It would give us a message delivery exception

119
00:05:01.000 --> 00:05:02.005
because we don't have a subscription

120
00:05:02.005 --> 00:05:04.005
to listen for the message.

121
00:05:04.005 --> 00:05:07.009
So let's go up here into the initializeView method

122
00:05:07.009 --> 00:05:12.003
and let's get a handle on the very same channel.

123
00:05:12.003 --> 00:05:16.001
I'm going to cut and paste here for expedience.

124
00:05:16.001 --> 00:05:19.001
And now on this channel,

125
00:05:19.001 --> 00:05:21.002
this is a SubscribableChannel

126
00:05:21.002 --> 00:05:25.000
and so the method we have at our disposal is subscribe.

127
00:05:25.000 --> 00:05:27.009
The final thing to know about this channel implementation

128
00:05:27.009 --> 00:05:29.005
is in order to subscribe to it,

129
00:05:29.005 --> 00:05:33.001
we need a message handler interface.

130
00:05:33.001 --> 00:05:36.000
We will cover message handlers in a future lesson.

131
00:05:36.000 --> 00:05:38.003
For now, just know that that message handler interface

132
00:05:38.003 --> 00:05:40.006
is what's going to pipe the message itself out

133
00:05:40.006 --> 00:05:42.001
to our user interface.

134
00:05:42.001 --> 00:05:44.007
Basically it's handling the message it receives

135
00:05:44.007 --> 00:05:47.009
when the subscribe comes in with a message.

136
00:05:47.009 --> 00:05:51.008
So I believe that's all we need to do

137
00:05:51.008 --> 00:05:56.007
in order to now see our results on our user interface.

138
00:05:56.007 --> 00:05:59.003
Just to recap, we got a handle on our message.

139
00:05:59.003 --> 00:06:01.000
We sent a message

140
00:06:01.000 --> 00:06:03.002
in the initializeView portion,

141
00:06:03.002 --> 00:06:05.003
we subscribed to the same message

142
00:06:05.003 --> 00:06:08.000
and that message handler's going to pipe the message out

143
00:06:08.000 --> 00:06:09.005
to the interface.

144
00:06:09.005 --> 00:06:14.003
Let's start our application.

145
00:06:14.003 --> 00:06:16.006
Hooray, we started without incident.

146
00:06:16.006 --> 00:06:18.006
Let's load our user interface again

147
00:06:18.006 --> 00:06:20.009
and as we see now in the Tech Support section,

148
00:06:20.009 --> 00:06:24.005
the software build indeed has a meaningful identifier.

149
00:06:24.005 --> 00:06:26.008
So now we have configured our first channel,

150
00:06:26.008 --> 00:06:28.005
a DirectChannel that uses

151
00:06:28.005 --> 00:06:32.000
the subscribable event-based model of communication.

