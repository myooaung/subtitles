WEBVTT
1
00:00:00.005 --> 00:00:01.008
- [Instructor] Let's learn how to configure

2
00:00:01.008 --> 00:00:03.008
a Spring Integration message flow

3
00:00:03.008 --> 00:00:05.007
and how to integrate that message flow

4
00:00:05.007 --> 00:00:07.008
into a larger Spring application.

5
00:00:07.008 --> 00:00:09.004
Now configuring a message flow in Spring Integration

6
00:00:09.004 --> 00:00:11.008
looks a whole lot like configuring

7
00:00:11.008 --> 00:00:14.000
any other project component in Spring.

8
00:00:14.000 --> 00:00:16.008
You can use XML configuration files

9
00:00:16.008 --> 00:00:20.002
for an externalized metadata type of approach,

10
00:00:20.002 --> 00:00:23.001
or you can use inline Java based annotations.

11
00:00:23.001 --> 00:00:25.006
Both approaches have their pros and cons

12
00:00:25.006 --> 00:00:28.000
with trade-offs that are the same for Spring Integration

13
00:00:28.000 --> 00:00:30.006
as they are for Spring in general.

14
00:00:30.006 --> 00:00:33.005
In this training course, we will use XML exclusively

15
00:00:33.005 --> 00:00:35.006
for our dependency injection configuration

16
00:00:35.006 --> 00:00:37.008
because it gives us a more centralized

17
00:00:37.008 --> 00:00:40.003
and accessible way to visualize our structure

18
00:00:40.003 --> 00:00:42.007
with fewer files to flip through.

19
00:00:42.007 --> 00:00:44.008
Here is an example of a Spring integration

20
00:00:44.008 --> 00:00:46.006
configuration file.

21
00:00:46.006 --> 00:00:49.002
Notice the inclusion of the integration schema

22
00:00:49.002 --> 00:00:51.000
here in the outer beans element,

23
00:00:51.000 --> 00:00:53.005
along with namespace specific elements

24
00:00:53.005 --> 00:00:56.006
such as channels and end points.

25
00:00:56.006 --> 00:01:00.000
It is a common need to integrate your modular message flows

26
00:01:00.000 --> 00:01:02.008
into a larger parent Spring application.

27
00:01:02.008 --> 00:01:05.004
And Spring gives several options for doing this,

28
00:01:05.004 --> 00:01:07.005
including application properties,

29
00:01:07.005 --> 00:01:12.003
command line arguments, inline coding and XML imports.

30
00:01:12.003 --> 00:01:13.007
I favor import statements

31
00:01:13.007 --> 00:01:16.005
to at least get your development ball rolling.

32
00:01:16.005 --> 00:01:18.008
Let's go into our code editor now.

33
00:01:18.008 --> 00:01:20.003
I am using IntelliJ,

34
00:01:20.003 --> 00:01:22.008
and have look at our application

35
00:01:22.008 --> 00:01:24.002
that we're building together.

36
00:01:24.002 --> 00:01:26.007
This application is called Dashboard.

37
00:01:26.007 --> 00:01:30.000
At this point mostly it's a boiler plate spring boot app,

38
00:01:30.000 --> 00:01:32.008
and let's make sure that we are checking out

39
00:01:32.008 --> 00:01:35.008
the code for this exercise.

40
00:01:35.008 --> 00:01:38.006
Now running our Spring boot application

41
00:01:38.006 --> 00:01:40.000
looks something like this.

42
00:01:40.000 --> 00:01:43.008
It's a simulated dashboard in which we have four components,

43
00:01:43.008 --> 00:01:49.001
a grid status, KinetECO news, power usage and tech support.

44
00:01:49.001 --> 00:01:52.005
This dashboard simulates a consumer power grid dashboard

45
00:01:52.005 --> 00:01:54.007
and each of these four elements of the dashboard

46
00:01:54.007 --> 00:01:57.008
corresponds to a Spring Integration message flow

47
00:01:57.008 --> 00:01:59.009
that we're going to build together.

48
00:01:59.009 --> 00:02:01.006
Our challenge in this exercise

49
00:02:01.006 --> 00:02:05.009
is to integrate into our Spring boot application,

50
00:02:05.009 --> 00:02:08.002
that is already running.

51
00:02:08.002 --> 00:02:11.004
We want to integrate the four message flow components

52
00:02:11.004 --> 00:02:13.004
that we're going to build together.

53
00:02:13.004 --> 00:02:15.004
Let's have a look first

54
00:02:15.004 --> 00:02:20.004
at our springbootapplication.XML file.

55
00:02:20.004 --> 00:02:22.009
This file is a typical

56
00:02:22.009 --> 00:02:25.009
Spring application configuration file.

57
00:02:25.009 --> 00:02:28.005
There you see between lines 11 and 22

58
00:02:28.005 --> 00:02:31.003
are our configuration for our application.

59
00:02:31.003 --> 00:02:32.007
And the challenge we have

60
00:02:32.007 --> 00:02:36.000
is we have four message flow integrations

61
00:02:36.000 --> 00:02:39.003
that we want to incorporate into the parent.

62
00:02:39.003 --> 00:02:42.006
Let's have a look for instance, at gridstatus.XML.

63
00:02:42.006 --> 00:02:45.007
This configuration file is a Spring Integration

64
00:02:45.007 --> 00:02:46.009
configuration file.

65
00:02:46.009 --> 00:02:51.005
Notice in line five, the integration namespace import.

66
00:02:51.005 --> 00:02:52.008
That's really important to use

67
00:02:52.008 --> 00:02:54.003
because at runtime it prevents conflicts

68
00:02:54.003 --> 00:02:57.008
between elements that may be named the same

69
00:02:57.008 --> 00:02:59.004
across different packages.

70
00:02:59.004 --> 00:03:02.009
However, there's also a really excellent motivation

71
00:03:02.009 --> 00:03:05.006
for a developer to use namespaces,

72
00:03:05.006 --> 00:03:09.009
which is that you can leverage the IDE's capability

73
00:03:09.009 --> 00:03:11.003
when you use that namespace.

74
00:03:11.003 --> 00:03:14.004
I-N-T to show us right there dynamically,

75
00:03:14.004 --> 00:03:16.009
all of the Spring Integration elements that are available

76
00:03:16.009 --> 00:03:20.004
to us in this configuration file.

77
00:03:20.004 --> 00:03:22.000
Right now we're not actually doing that,

78
00:03:22.000 --> 00:03:23.009
but I wanted to point that out to you

79
00:03:23.009 --> 00:03:25.008
and emphasize the importance of using

80
00:03:25.008 --> 00:03:28.001
the Spring Integration namespace.

81
00:03:28.001 --> 00:03:30.000
The other thing I want to draw your attention to,

82
00:03:30.000 --> 00:03:32.004
is in this gridstatus.XML file,

83
00:03:32.004 --> 00:03:35.002
we have a test bean configured

84
00:03:35.002 --> 00:03:38.004
and we've called it test message flow imports.

85
00:03:38.004 --> 00:03:42.003
We're going to ensure that we get this message flow

86
00:03:42.003 --> 00:03:43.008
properly integrated.

87
00:03:43.008 --> 00:03:45.000
So let's do that together.

88
00:03:45.000 --> 00:03:47.000
Let's go into our unit tests.

89
00:03:47.000 --> 00:03:50.000
It's in a file called dashboard application tests

90
00:03:50.000 --> 00:03:51.005
and let's configure a test.

91
00:03:51.005 --> 00:03:57.001
And this test is going to load our application context.

92
00:03:57.001 --> 00:04:01.008
This would be our Spring boot application parent context,

93
00:04:01.008 --> 00:04:05.004
the application.XML file that we looked at a moment ago.

94
00:04:05.004 --> 00:04:08.006
And then here in the try block we're going to load up

95
00:04:08.006 --> 00:04:12.004
that context and we're going to try to pull in

96
00:04:12.004 --> 00:04:15.001
that test bean that we have configured

97
00:04:15.001 --> 00:04:19.006
inside the message flow configuration file.

98
00:04:19.006 --> 00:04:22.004
Now, in order to make this test run properly,

99
00:04:22.004 --> 00:04:24.008
we need to go into our parent configuration

100
00:04:24.008 --> 00:04:30.001
fileapplication.XML and use a typical XML import statement

101
00:04:30.001 --> 00:04:34.000
to bring in the grid status file.

102
00:04:34.000 --> 00:04:35.009
And we're going to qualify it with the sub-directory

103
00:04:35.009 --> 00:04:37.005
that it lives in.

104
00:04:37.005 --> 00:04:40.008
Close our element while we're at it.

105
00:04:40.008 --> 00:04:42.005
Let's just do the other three

106
00:04:42.005 --> 00:04:47.002
so that we have all four message flows imported.

107
00:04:47.002 --> 00:04:48.007
Now we believe we have imported

108
00:04:48.007 --> 00:04:51.008
all of our four Spring Integration message flows

109
00:04:51.008 --> 00:04:54.004
into our Spring boot parent application.

110
00:04:54.004 --> 00:04:57.008
Let's prove it by attempting to run this test

111
00:04:57.008 --> 00:05:00.008
that we set up.

112
00:05:00.008 --> 00:05:02.009
Our test is running, hooray.

113
00:05:02.009 --> 00:05:03.007
We got success.

114
00:05:03.007 --> 00:05:06.004
Our message flows, our Spring Integration message flows

115
00:05:06.004 --> 00:05:08.004
are now imported into our Spring boot

116
00:05:08.004 --> 00:05:10.000
parent application context.

