WEBVTT
1
00:00:00.005 --> 00:00:02.005
- [Instructor] One very compelling reason to use

2
00:00:02.005 --> 00:00:04.001
the Spring Integration framework

3
00:00:04.001 --> 00:00:07.007
for your Java-based messaging needs is the rich library

4
00:00:07.007 --> 00:00:10.006
of implementations allowing you to quickly connect

5
00:00:10.006 --> 00:00:13.006
your Java application to a very wide variety

6
00:00:13.006 --> 00:00:15.003
of external systems.

7
00:00:15.003 --> 00:00:18.005
There are approximately 28 different out of the box

8
00:00:18.005 --> 00:00:21.002
endpoints available, letting you cross the Java

9
00:00:21.002 --> 00:00:24.001
virtual machine runtime boundaries using best

10
00:00:24.001 --> 00:00:26.004
messaging practices and, best of all,

11
00:00:26.004 --> 00:00:28.006
code that you don't have to write.

12
00:00:28.006 --> 00:00:30.007
As we have mentioned, these external endpoints

13
00:00:30.007 --> 00:00:33.007
are supported heavily by the adapter and gateway

14
00:00:33.007 --> 00:00:36.004
enterprise integration patterns.

15
00:00:36.004 --> 00:00:38.002
It is worth noting that in this course,

16
00:00:38.002 --> 00:00:41.001
we use a broad definition of the term endpoint.

17
00:00:41.001 --> 00:00:43.007
However, sometimes when you hear the term endpoint

18
00:00:43.007 --> 00:00:46.003
used in the context of Spring Integration,

19
00:00:46.003 --> 00:00:48.007
it will be more circumscribed to these two

20
00:00:48.007 --> 00:00:50.008
particular types of connector.

21
00:00:50.008 --> 00:00:53.002
Under Spring Integration implementation,

22
00:00:53.002 --> 00:00:57.004
adapters notably support one-direction message flow.

23
00:00:57.004 --> 00:01:00.009
So in and out channel adaptation requires two

24
00:01:00.009 --> 00:01:04.002
adapter configurations, one for each end of the channel.

25
00:01:04.002 --> 00:01:08.009
Adapters connect a single consumer or producer to a channel.

26
00:01:08.009 --> 00:01:12.007
The general rule is that inbound adapters add configuration

27
00:01:12.007 --> 00:01:16.001
to the send end of a channel and outbound adapters

28
00:01:16.001 --> 00:01:19.004
add configuration to the receiving end of a channel.

29
00:01:19.004 --> 00:01:22.003
Gateways on the other hand are bi-directional.

30
00:01:22.003 --> 00:01:24.008
Their special purpose is to altogether hide

31
00:01:24.008 --> 00:01:26.008
messaging framework implementation

32
00:01:26.008 --> 00:01:29.006
from the Java application business logic.

33
00:01:29.006 --> 00:01:33.003
In general, inbound gateways configure the server side

34
00:01:33.003 --> 00:01:36.000
of an interaction while outbound gateways

35
00:01:36.000 --> 00:01:37.008
configure the client side.

36
00:01:37.008 --> 00:01:40.006
This chart gives a sample of the transport protocols

37
00:01:40.006 --> 00:01:42.009
that Spring Integration supports.

38
00:01:42.009 --> 00:01:47.001
From file system interaction to MongoDB and WebSockets,

39
00:01:47.001 --> 00:01:50.001
most if not all common connectivity needs

40
00:01:50.001 --> 00:01:53.000
are not only supported but completely implemented

41
00:01:53.000 --> 00:01:54.006
in Spring Integration.

42
00:01:54.006 --> 00:01:57.001
In our upcoming lessons, we are going to study

43
00:01:57.001 --> 00:02:00.005
an HTTP connection, a JDBC connection,

44
00:02:00.005 --> 00:02:02.005
and a Twitter external connection.

45
00:02:02.005 --> 00:02:05.000
So let's get to some code and explore adapter

46
00:02:05.000 --> 00:02:07.000
and gateway endpoints by building three

47
00:02:07.000 --> 00:02:09.000
of these external connections together.

