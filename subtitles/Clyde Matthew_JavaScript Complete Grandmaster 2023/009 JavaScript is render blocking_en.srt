1
00:00:00,390 --> 00:00:06,720
Let's now understand how to eliminate unnecessary JavaScript from affecting the critical rendering path.

2
00:00:07,260 --> 00:00:08,460
Remember what our goal is?

3
00:00:08,730 --> 00:00:13,980
Our goal is to deliver above the fold content as quickly as possible to the user.

4
00:00:14,400 --> 00:00:16,079
Just remember that that's our goal.

5
00:00:16,470 --> 00:00:23,520
So if we only need JavaScript further down our page below the fold below what the user can see, then

6
00:00:23,520 --> 00:00:28,290
we don't want those resources taking up critical rendering path performance space.

7
00:00:28,500 --> 00:00:29,640
Do we know?

8
00:00:30,090 --> 00:00:37,170
Unlike CCS, the browser doesn't need to download and pass all JavaScript resources to render the page,

9
00:00:37,500 --> 00:00:43,980
so it's not technically a required step, although most modern web sites do actually require JavaScript

10
00:00:43,980 --> 00:00:45,450
for above the fold experience.

11
00:00:45,960 --> 00:00:52,200
But when your browser hits a script tag, the page rendering process is paused and it's paused until

12
00:00:52,200 --> 00:00:54,180
after the JavaScript is executed.

13
00:00:54,660 --> 00:01:00,390
And the reason the page rendering is paused is because JavaScript has the power to manipulate the Dom

14
00:01:00,390 --> 00:01:01,320
and the CSS.

15
00:01:02,220 --> 00:01:03,030
We've been through this.

16
00:01:03,030 --> 00:01:05,700
We know this, but let's look at this visually.

17
00:01:06,000 --> 00:01:10,430
We know that your browser starts passing your HMO and what happens when it hits a script.

18
00:01:11,490 --> 00:01:15,180
That's right, the parser has to go and fetch that JavaScript file.

19
00:01:15,570 --> 00:01:21,150
It then has to also execute a JavaScript file, and during that whole process, the parser is paused.

20
00:01:21,480 --> 00:01:26,880
We've seen it and only after execution of JavaScript, as does your HMO parser continue.

21
00:01:27,420 --> 00:01:31,380
And once that is finished, the Dom Content Loaded event occurs.

22
00:01:33,770 --> 00:01:35,430
OK, so what are we going to be doing now?

23
00:01:35,630 --> 00:01:40,490
Well, we're going to be looking at ways of how to improve our critical rendering path performance,

24
00:01:40,790 --> 00:01:45,590
and when we look at these ways, you need to try and think, Well, what is we optimizing?

25
00:01:45,770 --> 00:01:48,320
So let's think about what all we can optimize.

26
00:01:49,470 --> 00:01:54,750
Well, there's many different metrics we can look at, but the one that I think we should look at when

27
00:01:54,750 --> 00:02:01,190
testing these different methods is the first meaningful paint that is the first thing that we want our

28
00:02:01,200 --> 00:02:06,060
use to see when they land on the page and kind of be what we consider the first meanings of paint.

29
00:02:06,840 --> 00:02:09,720
So it's almost like we want that to happen as quickly as possible.

30
00:02:09,900 --> 00:02:11,610
So let's go through these different methods.

31
00:02:12,030 --> 00:02:13,260
It's code up examples.

32
00:02:13,260 --> 00:02:18,540
And then while we're doing it, let's keep track of the time that it's taken for us to reach these critical

33
00:02:18,900 --> 00:02:21,720
rendering path milestones, for example, the face paint.

34
00:02:22,350 --> 00:02:26,100
I'll also include the dome concentrated event because this is interesting.

35
00:02:26,610 --> 00:02:31,110
And then let's also put the load of it in there so we can kind of just copy times, process different

36
00:02:31,110 --> 00:02:31,500
methods.

37
00:02:31,710 --> 00:02:35,970
And I just want to say, you know, there is not one solution that's all you know.

38
00:02:36,300 --> 00:02:38,040
And a lot of people just want a quick fix.

39
00:02:38,040 --> 00:02:42,270
If there was a quick fix would be brilliant because in one way it can just be applied to everything.

40
00:02:42,900 --> 00:02:48,690
But it's just like if someone comes to you and says was, you know, can you build a beautiful website?

41
00:02:49,050 --> 00:02:49,950
It's always relative.

42
00:02:49,950 --> 00:02:51,210
There's always different aspects to it.

43
00:02:51,210 --> 00:02:56,700
We've seen you have a shopping website, you can have an automobile website, you have a booking system.

44
00:02:57,700 --> 00:03:03,160
You know, you can have a chat room, and just my answer is to that person will depends on kind of what

45
00:03:03,160 --> 00:03:03,790
side you want.

46
00:03:04,240 --> 00:03:06,880
And it's the same here without optimizing our code.

47
00:03:06,880 --> 00:03:07,690
It depends what you want.

48
00:03:07,690 --> 00:03:12,850
You could do depends how big your jobs with files are, how many scripts you have, how many images,

49
00:03:13,130 --> 00:03:18,940
resources, etc., etc. So we just going to go to a very simple example, but it'll get you thinking

50
00:03:18,940 --> 00:03:20,380
about the process and how it works.

51
00:03:20,440 --> 00:03:21,340
So I hope you enjoy it.

52
00:03:21,640 --> 00:03:22,750
Well, let's get into our first one.

53
00:03:22,940 --> 00:03:23,440
As you know.

