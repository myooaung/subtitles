1
00:00:00,300 --> 00:00:02,250
All right, let's get into some examples.

2
00:00:02,430 --> 00:00:03,990
Let me show you how dates work.

3
00:00:04,200 --> 00:00:12,150
So now the first thing is let's create a new object that instantiate or calls the JavaScript date object,

4
00:00:12,630 --> 00:00:14,740
and I'm going to make comments here so you can follow along.

5
00:00:14,770 --> 00:00:16,440
So here we're going to create a variable with

6
00:00:17,850 --> 00:00:23,010
the current time. So let's just say, let "now" equal 

7
00:00:23,580 --> 00:00:24,450
new Date().

8
00:00:25,610 --> 00:00:32,020
What I'm going to do quickly, is I'm just going to start Quokka, so we don't have to console this to

9
00:00:32,060 --> 00:00:34,820
a browser. And now let's just see what "now" is. 

10
00:00:35,150 --> 00:00:35,760
So there you go.

11
00:00:38,370 --> 00:00:39,180
How cool is this?

12
00:00:40,420 --> 00:00:42,490
We have eight pieces of information here.

13
00:00:49,660 --> 00:00:57,730
And remember, I said that time starts from 1st of January 1970, and that any time now is just how

14
00:00:57,730 --> 00:00:59,470
many milliseconds have passed since then.

15
00:01:00,310 --> 00:01:01,160
What do I mean by that?

16
00:01:01,570 --> 00:01:02,170
Let me show you.

17
00:01:03,510 --> 00:01:05,550
Let's get the current timestamp.

18
00:01:07,830 --> 00:01:10,530
Let's console.log our time, which is "now".

19
00:01:12,100 --> 00:01:17,890
There's an inbuilt method, remember how we were saying that these JavaScript date objects come with

20
00:01:17,890 --> 00:01:19,150
a whole lot of inbuilt methods?

21
00:01:19,780 --> 00:01:21,400
Well, one of them is getTime().

22
00:01:23,720 --> 00:01:24,810
There you go, there you have it.

23
00:01:25,230 --> 00:01:29,790
That's how many milliseconds have passed since  1970.

24
00:01:30,060 --> 00:01:30,630
But hang on.

25
00:01:30,900 --> 00:01:36,960
Before we go further, there's just one thing which you may have noticed ... this "new" keyword.

26
00:01:37,650 --> 00:01:39,120
Did you notice that new keyword?

27
00:01:39,450 --> 00:01:41,580
Well, when you use the new keyword in JavaScript,

28
00:01:41,910 --> 00:01:44,160
you're creating a new object.

29
00:01:44,910 --> 00:01:47,070
And yes, initially it's just going to be a blank object.

30
00:01:47,070 --> 00:01:47,940
But that object

31
00:01:48,970 --> 00:01:51,530
will inherit its prototype from somewhere else.

32
00:01:51,550 --> 00:01:54,010
We're going to get onto prototypes later, so don't stress too much yet.

33
00:01:54,580 --> 00:02:01,330
All that "new" keyword means is that it's creating a new object and that the "this" keyword points to that newly

34
00:02:01,420 --> 00:02:02,260
created object.

35
00:02:02,710 --> 00:02:04,450
Well, what if we didn't use the new keyword?

36
00:02:05,710 --> 00:02:06,280
Good question.

37
00:02:06,670 --> 00:02:11,650
If you don't use a new keyword, you'll be fooled because the date that you create without the new keyword

38
00:02:12,190 --> 00:02:13,180
would just be a string.

39
00:02:14,050 --> 00:02:16,810
What I mean by that is you wont' have access to any properties or methods.

40
00:02:17,530 --> 00:02:18,400
Let me show you what I mean.

41
00:02:19,090 --> 00:02:20,980
So let's now delete all this.

42
00:02:23,230 --> 00:02:28,360
And let's create a date, one with no new keyword and the other one the proper way with the new keyword.

43
00:02:28,570 --> 00:02:35,470
So let date1 equal Date() with no new keyword, and let date2 equal new Date().

44
00:02:36,600 --> 00:02:37,620
Let's see what they look like.

45
00:02:40,510 --> 00:02:42,160
And like I said, they're going to look the same.

46
00:02:43,390 --> 00:02:45,400
date1 and date2. 

47
00:02:46,790 --> 00:02:53,120
You can tell they look exactly the same, but we know they are not the same.

48
00:02:54,050 --> 00:02:55,100
And how do we test this?

49
00:02:55,940 --> 00:02:57,200
Remember the typeof

50
00:02:58,520 --> 00:02:58,670
method.

51
00:03:00,190 --> 00:03:02,230
So we can just go console

52
00:03:03,590 --> 00:03:04,250
dot log,

53
00:03:05,310 --> 00:03:07,080
typeof(date1).

54
00:03:07,680 --> 00:03:08,190
It's a string.

55
00:03:09,420 --> 00:03:12,930
And if we copy this down and try it on date2, it's an object.

56
00:03:14,250 --> 00:03:17,010
And this is the point I'm trying to make. When you're working with dates,

57
00:03:17,310 --> 00:03:19,410
make sure you remember the new keyword.

58
00:03:19,710 --> 00:03:20,670
Why is it important?

59
00:03:20,700 --> 00:03:24,450
Well, if you're wanting to access properties or methods, you won't be able to.

60
00:03:24,540 --> 00:03:25,440
It's just a string.

61
00:03:25,740 --> 00:03:26,280
Let's have a look.

62
00:03:26,280 --> 00:03:27,060
I'll show you what I mean.

63
00:03:32,530 --> 00:03:38,500
Remember how on the previous example, we showed the getTime() method and that produced the number of milliseconds

64
00:03:38,510 --> 00:03:39,550
since 1970.

65
00:03:40,060 --> 00:03:41,590
That was a method that we accessed.

66
00:03:43,020 --> 00:03:44,870
Do you think we can do it here, if it's a string?

67
00:03:45,840 --> 00:03:46,410
Let's see.

68
00:03:52,520 --> 00:03:55,430
And we get an error: date1 getTime is not a function.

69
00:03:55,460 --> 00:04:00,380
So if in doubt, let's just use the "new" keyword when working with dates.

70
00:04:00,800 --> 00:04:04,040
And I just want to give you another quick summary on the new keyword.

71
00:04:05,750 --> 00:04:07,070
All right, very quick recap.

72
00:04:07,070 --> 00:04:08,030
We've seen that

73
00:04:08,180 --> 00:04:10,780
to start working with the date object,

74
00:04:10,790 --> 00:04:12,800
you must use the new keyword.

75
00:04:13,550 --> 00:04:16,250
And this just means a new empty object is created.

76
00:04:17,459 --> 00:04:21,450
And the object will inherit all properties from the Date prototype.

77
00:04:22,230 --> 00:04:26,110
That's why you and I could access the getTime method.

78
00:04:26,580 --> 00:04:27,910
We didn't write that method.

79
00:04:27,930 --> 00:04:29,880
We could just access it straight out of the box

80
00:04:29,880 --> 00:04:31,800
and that is because we used that "new" keyword.

81
00:04:32,280 --> 00:04:38,670
And the last thing that I did mention is that the "this" keyword is bound to this new object that you create.

82
00:04:38,920 --> 00:04:42,840
We're going to have a whole bonus section on this, but just bear in mind, this is what it does.

83
00:04:43,590 --> 00:04:44,160
Let's move on.

