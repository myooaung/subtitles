WEBVTT
1
00:00:00.240 --> 00:00:06.750
The moment we have all been waiting for ... where does JavaScript fit in? Whether or not you are a JavaScript

2
00:00:06.750 --> 00:00:11.400
programmer, most web pages have HTML, CSS and JavaScript.

3
00:00:11.880 --> 00:00:17.370
And that's why we need to understand how JavaScript fits into the whole Critical Rendering Path process.

4
00:00:17.760 --> 00:00:23.790
We know that JavaScript can modify the style and the content of a page, and of course, the style relates

5
00:00:23.790 --> 00:00:27.320
to the CSSOM. The content relates to the, that's right, 

6
00:00:27.360 --> 00:00:30.870
the DOM. Let's look at a simple case first.

7
00:00:30.870 --> 00:00:33.530
I don't want to jump into complicated JavaScript just yet.

8
00:00:33.540 --> 00:00:35.250
I want us to just take a step back.

9
00:00:36.090 --> 00:00:38.910
Let's create a very simple HTML page.

10
00:00:39.300 --> 00:00:42.000
We've got a head section and we've got a body section.

11
00:00:42.180 --> 00:00:42.780
That's it.

12
00:00:43.290 --> 00:00:45.600
And the body section just contains (the text) Hello World.

13
00:00:45.720 --> 00:00:47.280
So, a very simple page.

14
00:00:47.460 --> 00:00:48.450
Nothing too fancy.
(swoosh sound)

15
00:00:48.660 --> 00:00:54.680
We know that the bytes have to be converted to characters, to tokens, to nodes, and the DOM is constructed.

16
00:00:54.690 --> 00:00:55.320
We know that.

17
00:00:55.680 --> 00:01:01.770
And we also know when the browser hits this link tag and it references that style.css file, that a request

18
00:01:01.770 --> 00:01:07.380
is made to fetch the "style.css" file, and the CSSOM process can begin. 

19
00:01:08.070 --> 00:01:15.150
And this is important, that I want to drive home ... both the CSSOM and the DOM happen asynchronously!

20
00:01:15.720 --> 00:01:17.190
And it's logical, right?

21
00:01:17.430 --> 00:01:22.830
Doesn't that make sense? Both the DOM and the CSSOM are being created, but one doesn't have to wait for

22
00:01:22.830 --> 00:01:23.160
the other.

23
00:01:23.160 --> 00:01:27.990
Remember, we've always been saying throughout this whole time that these two structures are completely

24
00:01:27.990 --> 00:01:28.710
independent.

25
00:01:29.100 --> 00:01:30.230
So that's the starting point.

26
00:01:30.240 --> 00:01:31.320
Wrap your head around that.

27
00:01:31.710 --> 00:01:33.630
And now let's look at JavaScript.

28
00:01:33.960 --> 00:01:40.740
We've got our DOM and we've got our JavaScript .js file. And this JavaScript file does nothing ... initially.

29
00:01:40.920 --> 00:01:43.110
Right? We know this.

30
00:01:43.410 --> 00:01:48.630
So if we look at our HTML example here, your parser is going to go through line by line.

31
00:01:48.660 --> 00:01:50.700
It's going to parse "!DOCTYPE html".

32
00:01:51.090 --> 00:01:56.370
It's going to then parse the UTF-8 encoding type, converting those bytes into characters.

33
00:01:57.210 --> 00:01:59.370
It's going to continue to parse line by line.

34
00:01:59.390 --> 00:02:08.009
It makes sense. When your parser then hits that link to your styles.css file, the CSSOM process

35
00:02:08.009 --> 00:02:12.150
is gonna begin. Makes sense. But then the DOM is going to continue going.

36
00:02:12.810 --> 00:02:14.790
It's going to then hit the script tag ... BOOM. 

37
00:02:15.570 --> 00:02:19.740
And what's going to happen now? Well, now the DOM is going to be paused.

38
00:02:20.100 --> 00:02:21.690
That means there's no more parsing.

39
00:02:21.690 --> 00:02:24.810
It means there is no more DOM construction.

40
00:02:25.380 --> 00:02:28.580
It's paused. It's put on hold. Your parser,

41
00:02:28.680 --> 00:02:31.950
your JavaScript engine, is then going to interpret that .js file.

42
00:02:32.400 --> 00:02:34.770
In our case, it's going to be executed -

43
00:02:35.040 --> 00:02:40.220
alert('hi') is going to be shown to the screen and only then can the DOM construction continue.
(explosion sound)

44
00:02:40.890 --> 00:02:46.470
The parser will then go through each line and parse the document. And the bytes will be converted to characters, to

45
00:02:46.470 --> 00:02:49.320
tokens, to nodes, and the DOM will finally be rendered.

46
00:02:49.740 --> 00:02:56.850
So as I'm sure you can already tell, JavaScript is render blocking, and it makes sense. It blocks

47
00:02:56.850 --> 00:03:03.150
the rendering of the DOM because in many instances, our JavaScript can actually alter the DOM and it

48
00:03:03.150 --> 00:03:04.740
can even alter the CSSOM.

49
00:03:05.280 --> 00:03:09.330
But more on how JavaScript affects the CSSOM, next.

