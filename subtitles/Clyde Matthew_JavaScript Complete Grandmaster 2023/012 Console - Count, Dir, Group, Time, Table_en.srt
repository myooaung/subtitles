1
00:00:00,910 --> 00:00:03,790
Okidoki, let's see "console.count" in action.

2
00:00:05,030 --> 00:00:08,740
So let's go to the most simple case, console.count.

3
00:00:09,310 --> 00:00:12,040
And this is the fun thing with JavaScript, you can just start typing and go for it.

4
00:00:12,070 --> 00:00:13,060
You won't break anything.

5
00:00:13,720 --> 00:00:15,310
console.count().

6
00:00:16,760 --> 00:00:21,320
console.count().
How many times do you think it's going to show?

7
00:00:21,470 --> 00:00:22,130
Of course, three.

8
00:00:22,400 --> 00:00:24,290
So let's click enter and let's see.

9
00:00:25,100 --> 00:00:29,780
Default text because we haven't provided any parameters and it's showed you how many times it's been

10
00:00:29,780 --> 00:00:30,650
called - three times.

11
00:00:32,110 --> 00:00:36,700
What's a more practical example, well, let's say you got some function call, okay, and this is a

12
00:00:36,700 --> 00:00:39,490
"for-loop", so don't worry yet, we're going to get into this later as well,

13
00:00:40,150 --> 00:00:43,300
let's just say I, we're going to call this thing 5 times.

14
00:00:44,620 --> 00:00:51,750
And then we call console.count() and we can pass in a parameter, you can write anything in here and

15
00:00:51,820 --> 00:00:53,560
lets say, "I have been called".

16
00:00:54,980 --> 00:00:56,660
If I push enter now, what do you think's going to happen?

17
00:00:58,010 --> 00:01:02,210
Yeah, it's going to be called 5 times, and it uses the text that you've put in here to cool call it up.

18
00:01:02,480 --> 00:01:05,480
So that's console.count.

19
00:01:06,770 --> 00:01:10,430
OK, what's another important console method you need to be aware of?

20
00:01:11,840 --> 00:01:14,330
Oh, and I almost forgot about this

21
00:01:14,690 --> 00:01:18,710
it's console.dir(). You have console.log()

22
00:01:19,710 --> 00:01:26,040
but console.dir(), and I know it's going to sound weird, it prints the JavaScript representation

23
00:01:26,580 --> 00:01:33,180
of the object to the console, whereas console.log(), on the other hand, prints the HTML representation

24
00:01:33,180 --> 00:01:33,870
of that object.

25
00:01:34,260 --> 00:01:34,770
What do I mean?

26
00:01:35,460 --> 00:01:39,210
Well, you can see on the current screen, we've got Google open.

27
00:01:39,480 --> 00:01:46,350
If I console.log the document, and remember what the document was? That's right, the document is the 

28
00:01:46,350 --> 00:01:47,060
page itself.

29
00:01:47,070 --> 00:01:51,390
So if I go console.log() and I log the document

30
00:01:53,210 --> 00:01:53,870
what's going to happen?

31
00:01:54,500 --> 00:01:59,180
Well, what's cool is it gives me the actual document and you can see when I hover over it

32
00:02:00,080 --> 00:02:05,190
this Chrome console highlights the area, the relevant area. I can open it up.

33
00:02:05,420 --> 00:02:06,950
I've got the heading, I've got the body.

34
00:02:07,460 --> 00:02:10,650
I can look at the whole HTML structure here.

35
00:02:12,630 --> 00:02:16,620
But say I don't want that. Say I want to know what methods and objects are available on this from

36
00:02:16,620 --> 00:02:17,640
a JavaScript point of view.

37
00:02:17,850 --> 00:02:23,290
Well, console.log doesn't cut it, and that's where you type console.dir().

38
00:02:24,330 --> 00:02:25,560
And I can do the same thing.

39
00:02:26,920 --> 00:02:27,670
Let's look at that.

40
00:02:28,450 --> 00:02:29,170
Looks the same.

41
00:02:29,860 --> 00:02:31,690
Look what happens when I open it. How cool is this?

42
00:02:32,440 --> 00:02:34,210
You can see all the methods

43
00:02:35,670 --> 00:02:40,500
and properties available from a JavaScript point of view on all of this. You've got click events you can 

44
00:02:40,500 --> 00:02:44,430
add to it, which we're going to get into later, keydowns & all of that kind of stuff.

45
00:02:45,390 --> 00:02:52,590
So that's another important thing you need to be aware of with console. It's a nice little tip that, um, not many people know of.

46
00:02:53,670 --> 00:02:54,800
Alright, what else is there?

47
00:02:54,870 --> 00:02:55,680
What else is there?

48
00:02:55,860 --> 00:02:59,370
Oh yes, there's table which is quite cool - console.table().

49
00:03:00,000 --> 00:03:02,070
Let's give you an example quickly.

50
00:03:02,400 --> 00:03:03,810
console.table().

51
00:03:03,810 --> 00:03:08,040
If I just execute table, nothing's going to happen because the table needs a list.

52
00:03:08,640 --> 00:03:12,390
If you think about a visual representation of the table, well, you need data.

53
00:03:12,900 --> 00:03:17,130
So in JavaScript, what we refer to as giving data is it's called an Array.

54
00:03:17,130 --> 00:03:21,330
It's called an Array of data. And you enclose an Array in square brackets.

55
00:03:21,780 --> 00:03:22,590
I'll show you what I mean.

56
00:03:23,040 --> 00:03:28,530
So console.table(), open square bracket and let's go 1,

57
00:03:30,100 --> 00:03:30,550
2

58
00:03:32,090 --> 00:03:35,210
3, should we do one more? Let's do one more. 4. 

59
00:03:35,660 --> 00:03:41,570
Close square bracket. Execute. And how cool is that. It literally shows you a table.

60
00:03:44,080 --> 00:03:51,220
You can even be more practical with it, say we want to display an object.

61
00:03:51,370 --> 00:03:52,090
What do I mean by that?

62
00:03:52,120 --> 00:03:53,950
Well, don't worry too much about the code.

63
00:03:54,430 --> 00:03:56,560
Just understand the concept of what we're trying to do here.

64
00:03:56,560 --> 00:04:00,350
So let's say we we we want a dog name.

65
00:04:02,230 --> 00:04:04,180
Okay, the first name is Paw.

66
00:04:04,600 --> 00:04:05,920
And I don't know,

67
00:04:05,920 --> 00:04:11,590
the second name , the surname is Patrol.

68
00:04:15,910 --> 00:04:17,200
So now we've got the dogName (object).

69
00:04:17,980 --> 00:04:19,329
What about if we want that displayed?

70
00:04:19,390 --> 00:04:22,870
Well, OK, first question is you're probably saying, well, let's just console.log() it. 

71
00:04:22,870 --> 00:04:25,330
Let's console.log dogName and that's cool.

72
00:04:25,360 --> 00:04:31,570
You can see it displays it as an object to us, but the other way is that table method.

73
00:04:32,050 --> 00:04:33,550
So let's go dogName.

74
00:04:35,280 --> 00:04:35,940
How cool is that?

75
00:04:36,540 --> 00:04:39,060
It lays it out for you, with the name and the property.

76
00:04:40,510 --> 00:04:46,270
Name and the value, sorry, the name and the value. So that's console.table(). Another one we can look

77
00:04:46,270 --> 00:04:46,520
at,

78
00:04:46,540 --> 00:04:48,520
let's just clear this console,

79
00:04:48,520 --> 00:04:50,960
another one we can look at is console.group().

80
00:04:50,980 --> 00:04:55,060
And what happens is sometimes, you can already see how fill the screen is getting, 

81
00:04:55,420 --> 00:05:01,720
you get too many logs, and you want to group a specific category of logs together so you don't have

82
00:05:01,720 --> 00:05:02,590
them all over the place.

83
00:05:02,710 --> 00:05:03,490
How do we do that?

84
00:05:03,520 --> 00:05:06,040
Well, that's from console.group().

85
00:05:07,150 --> 00:05:08,170
Let me show you an example.

86
00:05:09,160 --> 00:05:12,250
So say we want a group dogs.

87
00:05:14,890 --> 00:05:17,500
Think about the "group" as the group heading,

88
00:05:17,710 --> 00:05:21,010
so we want to call it "Dogs" and within there we want to console.log(),

89
00:05:21,670 --> 00:05:22,280
I don't know,

90
00:05:23,140 --> 00:05:25,360
an Irish Wolfhound.

91
00:05:26,850 --> 00:05:27,280
OK.

92
00:05:28,080 --> 00:05:32,760
And we want to console.log a Sausage Dog.

93
00:05:35,130 --> 00:05:40,260
If I push return now, can you see how awesome that is, it has literally grouped them. And you can collapse it.

94
00:05:40,710 --> 00:05:44,220
So if I open it, I can see my Irish Wolfhound and Sausage Dog. 

95
00:05:44,670 --> 00:05:47,700
And did you notice how when I clicked enter it (the console) automatically expanded it?

96
00:05:48,210 --> 00:05:54,810
Well, we can stop that. If we do what we did before but you go groupCollapsed(), and now we hit enter

97
00:05:55,650 --> 00:05:56,640
it literally collapses it 

98
00:05:56,710 --> 00:05:57,960
by default, it doesn't open it

99
00:05:57,960 --> 00:05:59,040
by default.

100
00:05:59,580 --> 00:06:01,310
What about if I put lists within lists?

101
00:06:01,560 --> 00:06:04,040
Well, the awesome thing is with groups, you can do that.

102
00:06:04,200 --> 00:06:05,540
You can make a list within a list.

103
00:06:06,150 --> 00:06:07,020
Let's see how that's done.

104
00:06:07,440 --> 00:06:11,250
OK, so let's say we want a list of animals and within the animals, we've got cats and dogs.

105
00:06:11,700 --> 00:06:16,860
So we go console.groupCollapsed, and 

106
00:06:17,920 --> 00:06:21,060
let's call the main group "Animals", animals.

107
00:06:22,660 --> 00:06:24,520
Now, we want dogs.

108
00:06:25,060 --> 00:06:28,210
So let's do dogs, console.log

109
00:06:28,510 --> 00:06:29,890
Let's do ... uh, sorry,

110
00:06:30,040 --> 00:06:30,370
group()

111
00:06:31,750 --> 00:06:33,100
Let's have a heading called "Dogs".

112
00:06:34,670 --> 00:06:35,930
And then we want to do the same.

113
00:06:36,110 --> 00:06:40,090
We want to console.log() Irish Wolfhound.

114
00:06:43,060 --> 00:06:46,030
And we want to console.log() a

115
00:06:47,440 --> 00:06:48,520
Sausage Dog.

116
00:06:50,090 --> 00:06:56,420
Now, let's say we want to end that group -  console.groupEnd().

117
00:06:57,960 --> 00:07:00,510
And now we want cats. 

118
00:07:01,760 --> 00:07:02,960
So let's go "Cats". 

119
00:07:04,590 --> 00:07:11,760
And what's a cat? Si, simese, Siamese.

120
00:07:14,400 --> 00:07:16,470
And it's ... oh where did it go? 

121
00:07:17,200 --> 00:07:18,810
Ooo, don't know where it went, but its back. 

122
00:07:20,020 --> 00:07:24,180
And let's do one more console.log(), what's another cat?

123
00:07:24,760 --> 00:07:31,210
Rag Doll, No, Rag, Ragdoll, I think that's one.

124
00:07:32,110 --> 00:07:32,480
Okay.

125
00:07:32,860 --> 00:07:37,450
And then we can do a console.groupEnd.

126
00:07:38,730 --> 00:07:40,560
Now what's going to happen when I execute this? Check this.

127
00:07:42,950 --> 00:07:44,340
Hey, where did it go?

128
00:07:52,760 --> 00:07:57,590
GroupCollapsed, animals, group dogs, group end, 

129
00:07:59,760 --> 00:08:01,260
Why hasn't this worked?

130
00:08:07,920 --> 00:08:09,280
Oh, now its worked.

131
00:08:09,810 --> 00:08:14,540
Okay, don't know what happened there. But there is your group of animals, which is at the very top level.

132
00:08:14,540 --> 00:08:14,740
If you 

133
00:08:14,740 --> 00:08:17,840
open that up, you got dogs and cats. So that's console.group().

134
00:08:18,310 --> 00:08:21,730
One more I want to show you this console.time().

135
00:08:22,270 --> 00:08:28,810
It's similar to the group method in that you need like an opening and closing call in order for

136
00:08:28,810 --> 00:08:30,520
the browser to know when it starts and finishes.

137
00:08:30,520 --> 00:08:32,380
So it just helps you measure time.

138
00:08:32,650 --> 00:08:36,130
So say you've got a function and you want to optimize your website to go super quick.

139
00:08:36,400 --> 00:08:40,210
You want to know how long it takes for it to do a certain event, you can use console.time(). 

140
00:08:40,659 --> 00:08:41,830
Let me give you an example.

141
00:08:42,159 --> 00:08:44,710
Let's say console.time(), 

142
00:08:45,010 --> 00:08:47,440
it's a math timer, for example.

143
00:08:47,650 --> 00:08:47,890
All right.

144
00:08:48,670 --> 00:08:51,070
And let's say we want a console.log() 

145
00:08:52,360 --> 00:08:55,590
some random number times another really big number.

146
00:08:56,330 --> 00:08:56,860
OK.

147
00:08:57,220 --> 00:09:03,490
And we want to measure how long that took. So we go console.timeEnd

148
00:09:04,360 --> 00:09:04,870
end.

149
00:09:05,440 --> 00:09:10,900
And here, bear in mind, just just better this in mind, 

150
00:09:12,030 --> 00:09:17,040
the description has to match the start description, because you think you might have multiple times going

151
00:09:17,040 --> 00:09:22,800
on, so you want to make sure that this heading matches, that heading. And let's push return.

152
00:09:23,370 --> 00:09:24,390
Bob's Your Uncle.

153
00:09:24,420 --> 00:09:25,650
That is how long it took.

154
00:09:26,930 --> 00:09:33,330
That's the result, sorry. This this it's a massive number. But this here is the result of your timer 

155
00:09:33,330 --> 00:09:33,580
call.

156
00:09:33,940 --> 00:09:41,360
That's how long it took. It took 0.34 milliseconds to complete. At this point you're head is probably exploding. 

157
00:09:42,380 --> 00:09:47,690
And that's good, because what you've learnt is that the console object is powerful. You've got group methods

158
00:09:47,690 --> 00:09:49,100
on it, you've got time methods on it,

159
00:09:49,120 --> 00:09:51,290
You've got assertions, you have warnings, info etc

160
00:09:51,710 --> 00:09:56,270
There's a lot you can do on just the console object, and not many people know that. So it's gonna

161
00:09:56,270 --> 00:09:56,900
put you ahead.

162
00:09:58,180 --> 00:10:02,410
But for you and I, by far the most important is console.log, and we're going to see that a

163
00:10:02,410 --> 00:10:02,680
lot.

164
00:10:02,950 --> 00:10:04,000
So let's continue with the course.

