WEBVTT
1
00:00:00.270 --> 00:00:03.360
You've already seen a lot of examples of us using variables.

2
00:00:04.140 --> 00:00:08.580
But before we move on, I just want you to understand identifiers.

3
00:00:09.860 --> 00:00:15.980
Don't get intimidated with the terminology. All an identifier is, this it's a name. It's the name that

4
00:00:15.980 --> 00:00:21.200
we give a variable, function or property. But there's certain rules around identifiers.

5
00:00:21.200 --> 00:00:24.500
We can't just name our variables anything we want.

6
00:00:25.070 --> 00:00:28.700
We've got to be careful how we structure it and the syntax we use.

7
00:00:29.450 --> 00:00:33.770
For example, identifiers have to consist of letters and numbers.

8
00:00:34.340 --> 00:00:37.460
We can't use symbols. And think about it,

9
00:00:37.460 --> 00:00:39.080
look at your keyboard numbers now.

10
00:00:39.980 --> 00:00:45.680
All of them have operation meaning. You've got the brackets for nine and zero,

11
00:00:45.710 --> 00:00:47.720
you've got the multiplication sign on eight,

12
00:00:48.260 --> 00:00:50.000
you've got the ampersand sign for seven,

13
00:00:50.000 --> 00:00:51.200
the power sign on six,

14
00:00:51.770 --> 00:00:56.540
so we can't use any of these symbols because when the parser comes across those symbols, it interprets

15
00:00:56.540 --> 00:00:58.730
them in a very structured and ordered way.

16
00:01:00.050 --> 00:01:05.150
We can, however, use the dollar sign or underscore when naming a variable - that is open to us.

17
00:01:06.320 --> 00:01:11.420
The other thing with identifiers is that we can't begin our variable name with a number.

18
00:01:12.330 --> 00:01:15.120
So then how do we name our variables and what is the best practice?

19
00:01:16.110 --> 00:01:21.390
Well, the convention that I like, and it's probably the most popular, is what's known as cameCase,

20
00:01:22.230 --> 00:01:25.110
except for class names and const variables.

21
00:01:25.830 --> 00:01:29.670
Although you can, the industry standard is that you structure those a different way.

22
00:01:29.670 --> 00:01:34.740
So when you come across a variable in code that's just all capitals, for example, you'll immediately

23
00:01:34.740 --> 00:01:36.960
know that that's a "const" variable.

24
00:01:38.170 --> 00:01:41.800
For example, const PI = 3.142. 

25
00:01:42.100 --> 00:01:44.620
You wouldn't expect in your code to ever change it.

26
00:01:45.400 --> 00:01:52.300
And that's why the identifier would be all caps on a const, in this case capital P and a capital I.

27
00:01:53.730 --> 00:01:57.660
You also need to be aware that variable names are case sensitive.

28
00:01:58.970 --> 00:02:04.910
This means that if we define a variable called myvariable, all lowercase, and we make that equal to

29
00:02:04.910 --> 00:02:05.270
one.

30
00:02:06.110 --> 00:02:11.720
And we do the same thing with another variable, but we use camelCase and we assign that the value two.

31
00:02:12.590 --> 00:02:14.450
These are two distinct variables.

32
00:02:14.480 --> 00:02:16.130
They are not equal to same thing.

33
00:02:18.050 --> 00:02:23.660
And last but not least, identifiers must not consist of reserved keywords.

34
00:02:24.410 --> 00:02:30.050
We know that we've been using reserved keywords all the time with JavaScript. You've seen alert, prompt

35
00:02:30.440 --> 00:02:31.430
console.log, etc.

36
00:02:32.240 --> 00:02:36.440
We can't be using these to define variable names because then the interpreter is not going to know what's

37
00:02:36.440 --> 00:02:36.890
going on.

38
00:02:38.380 --> 00:02:44.590
Reserve keywords are just words in the JavaScript language that have in-built functionality, they

39
00:02:44.590 --> 00:02:47.710
have been predefined by the programmers of JavaScript for us.

40
00:02:48.640 --> 00:02:50.650
And here are some examples on the screen.

41
00:02:51.070 --> 00:02:52.150
These are not exhaustive.

42
00:02:52.150 --> 00:02:54.370
There are hundreds of reserved keywords.

43
00:02:54.910 --> 00:02:58.060
So just don't use these when defining your own variable.

44
00:02:58.960 --> 00:03:00.580
Let's move on.

