1
00:00:00,180 --> 00:00:04,890
Great, we've seen a diagram of the whole tree structure of prototypes, and at the very top was no,

2
00:00:05,340 --> 00:00:06,210
let me just prove it to you.

3
00:00:06,510 --> 00:00:11,470
This creates an array, so relate a equal and in theory.

4
00:00:12,650 --> 00:00:15,980
How can I prove that this inherits from the right prototype?

5
00:00:16,800 --> 00:00:18,690
Well, it's just got a dot.

6
00:00:18,860 --> 00:00:19,670
It's protein.

7
00:00:21,190 --> 00:00:23,560
Should be equal to the array.

8
00:00:25,520 --> 00:00:29,720
Which is built in JavaScript, and that should be equal to the right prototype.

9
00:00:29,840 --> 00:00:31,400
I'd expect this to be true.

10
00:00:31,710 --> 00:00:32,210
But see?

11
00:00:33,870 --> 00:00:35,580
A wholesome set.

12
00:00:35,850 --> 00:00:36,450
It is true.

13
00:00:36,720 --> 00:00:38,550
But what about the array prototype?

14
00:00:38,790 --> 00:00:40,110
I would expect that to be the.

15
00:00:40,980 --> 00:00:43,320
That's right, the global object prototype.

16
00:00:43,890 --> 00:00:50,160
So if we go a and we access the prototype, we know that's already now the ray prototype.

17
00:00:51,390 --> 00:00:54,630
So they lose contact now, the photo of the array prototype.

18
00:00:54,960 --> 00:00:58,470
So we go we access the proton again.

19
00:01:01,090 --> 00:01:04,120
But now, bear in mind, this is the photo of the array prototype.

20
00:01:05,379 --> 00:01:07,540
What would you expect to happen now?

21
00:01:08,680 --> 00:01:13,630
Well, I'd expect us to be the object prototype, which if I consolidate of looks like exactly what

22
00:01:13,630 --> 00:01:16,360
it is and I can prove it to you, we can call it up again.

23
00:01:17,140 --> 00:01:21,100
So that should be equal to the object prototype.

24
00:01:22,890 --> 00:01:25,620
I would expect this to be true, and it is true.

25
00:01:26,550 --> 00:01:27,150
I'm luckier.

26
00:01:28,050 --> 00:01:28,400
Cool.

27
00:01:28,810 --> 00:01:35,490
Now remember how we say that ends it now because the object prototype its product is now well.

28
00:01:36,440 --> 00:01:45,050
Improve that, so it's take the array, its excess, its protein, which we know is the array prototype,

29
00:01:45,740 --> 00:01:52,100
then we're going to we're going to reference its protein, which is their race protein, which is the

30
00:01:52,100 --> 00:01:54,470
object prototype who gets confusing.

31
00:01:55,070 --> 00:02:00,560
And lastly, we want to excise the promoter of that object prototype.

32
00:02:03,220 --> 00:02:04,540
Which we would expect to be No.

33
00:02:05,990 --> 00:02:06,650
And it is.

34
00:02:06,920 --> 00:02:07,670
So there you have it.

35
00:02:07,790 --> 00:02:13,270
We've just proven that we starting with an array that we've created at the very top it's proto references

36
00:02:13,280 --> 00:02:16,510
array prototype, which is why we've got push, pump, slice.

37
00:02:16,520 --> 00:02:24,890
All these other methods attached to it that day references the object prototype and the object prototype

38
00:02:24,890 --> 00:02:26,060
is the king.

39
00:02:26,660 --> 00:02:33,260
There is no higher project, which is why when you access a prototype that you get no hope, it's making

40
00:02:33,260 --> 00:02:33,770
sense.

41
00:02:33,860 --> 00:02:37,280
Well done for getting through this bonus section, but let's continue with the course.

