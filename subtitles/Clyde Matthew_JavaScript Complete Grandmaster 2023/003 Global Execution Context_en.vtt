WEBVTT
1
00:00:00.450 --> 00:00:07.750
OK, so we need to understand the execution context, and all that means is where we are in our code.

2
00:00:08.760 --> 00:00:14.640
And I know that may sound simple, but once you start having nested methods and objects within objects

3
00:00:14.640 --> 00:00:18.630
and then function calls within those, it actually starts getting a bit complicated.

4
00:00:19.080 --> 00:00:20.400
So we need to take a step back.

5
00:00:20.400 --> 00:00:27.330
We need to understand how the JavaScript engine executes functions and how specifically it executes

6
00:00:27.690 --> 00:00:28.500
nested functions.

7
00:00:28.500 --> 00:00:31.950
When you've got functions within other functions, what happens which once executed first?

8
00:00:32.700 --> 00:00:34.500
This is why this topic is so important.

9
00:00:34.780 --> 00:00:37.380
But let's take a step back right at the beginning.

10
00:00:37.410 --> 00:00:40.260
We mentioned JavaScript is a scripting language.

11
00:00:40.890 --> 00:00:44.730
Remember, it's interpreted, and this means there's no compilation.

12
00:00:45.150 --> 00:00:50.220
The interpreter, on the other hand, reads the code line by line and then it executes it.

13
00:00:50.670 --> 00:00:51.840
And the environment.

14
00:00:52.140 --> 00:00:54.210
And that's just another fancy word for scope.

15
00:00:54.720 --> 00:01:02.340
The scope in which the line is being evaluated in is known as the execution context, and JavaScript

16
00:01:02.340 --> 00:01:03.480
is clever.

17
00:01:03.720 --> 00:01:09.210
So the JavaScript runtime keeps a stack of these execution context.

18
00:01:09.780 --> 00:01:10.860
Why is this deck?

19
00:01:11.100 --> 00:01:15.210
Well, you're not just going to have one function in your code or you're going to have multiple functions,

20
00:01:15.510 --> 00:01:19.440
and when you're executing one function, you may have another function that's being executed within

21
00:01:19.440 --> 00:01:19.590
it.

22
00:01:19.860 --> 00:01:22.470
That's why you have to have a stack of execution context.

23
00:01:22.480 --> 00:01:23.400
You can't just have one.

24
00:01:23.610 --> 00:01:24.410
It won't work.

25
00:01:24.420 --> 00:01:27.900
It'll make your website and platform very inefficient.

26
00:01:28.770 --> 00:01:35.070
The execution context at the top of the stack is the one currently being executed or no dearth.

27
00:01:35.070 --> 00:01:35.850
It makes sense.

28
00:01:35.880 --> 00:01:42.990
The one at the top is the one that's being run and the object that this refers to, it's going to change

29
00:01:42.990 --> 00:01:45.510
every time that execution context changes.

30
00:01:46.020 --> 00:01:49.130
OK, so you kind of with me at the moment, you understand.

31
00:01:49.140 --> 00:01:51.180
Yes, OK, there's an execution context.

32
00:01:51.180 --> 00:01:52.850
My code has to be executed somewhere.

33
00:01:53.250 --> 00:01:58.080
There's a stack because it's going to be quite a lot of code and something's got to execute before other

34
00:01:58.080 --> 00:01:59.000
things occur.

35
00:01:59.010 --> 00:01:59.670
That makes it.

36
00:02:00.660 --> 00:02:05.100
But now let's dive into the execution context in a little bit more detail.

