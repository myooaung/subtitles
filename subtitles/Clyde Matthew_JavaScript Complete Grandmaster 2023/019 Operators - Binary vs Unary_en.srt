1
00:00:00,330 --> 00:00:06,870
Before we get into coercion, I just want to explain Operators to you. In particular I wanna be discussing

2
00:00:06,870 --> 00:00:07,560
unary

3
00:00:07,800 --> 00:00:10,230
vs binary operators.

4
00:00:11,850 --> 00:00:19,590
And I wanna draw your attention to the plus "+" sign, the "+" unary operator. When that's placed in

5
00:00:19,590 --> 00:00:20,520
front of a value,

6
00:00:21,150 --> 00:00:24,050
it (the JS parser) tries to convert that value, whatever it is, into a number.

7
00:00:24,690 --> 00:00:27,350
So you can understand if that value is already a number,

8
00:00:27,360 --> 00:00:33,750
it's going to do nothing, but if it's not a number, it's going to try and convert that value into

9
00:00:33,750 --> 00:00:34,160
a number.

10
00:00:34,440 --> 00:00:38,100
And that really is the only difference between a unary operator and a binary operator.

11
00:00:38,520 --> 00:00:40,530
Let me show you exactly what I mean.

12
00:00:44,520 --> 00:00:48,690
I'm just going to be using Visual Studio Code here, similar to what I did last time.

13
00:00:51,470 --> 00:00:51,890
With Quokka. Okay.

14
00:00:55,190 --> 00:00:56,120
So let's start.

15
00:00:56,330 --> 00:00:58,550
Let's go a = 1.  

16
00:00:59,330 --> 00:01:04,879
And if I console.log(+a), it's just going to return 1.

17
00:01:06,350 --> 00:01:08,510
What about if we go "let b = -1"?

18
00:01:09,770 --> 00:01:17,330
And I console.log(+b)? Again, it's just negative one. And all this means is that really we don't

19
00:01:17,330 --> 00:01:22,220
really need the unary operator here at all.

20
00:01:22,310 --> 00:01:24,560
We could get rid of it, and it would just be the same thing.

21
00:01:24,560 --> 00:01:25,550
There is no difference.

22
00:01:26,510 --> 00:01:32,030
But remember what I said, if it's placed in front of a value that's not a number, it will

23
00:01:32,030 --> 00:01:33,140
convert that to a number.

24
00:01:34,190 --> 00:01:35,720
So let me give you an example.

25
00:01:35,750 --> 00:01:37,820
let c = true.

26
00:01:39,270 --> 00:01:41,190
And we're going to get into coercion soon,

27
00:01:41,550 --> 00:01:47,970
just understand that intuitively, you'd think true is 1 and false is 0.

28
00:01:49,100 --> 00:01:55,820
So we console.log, and if we console.log(c), we get true, which is what you see.

29
00:01:57,430 --> 00:02:03,040
But if we put the plus + unary operator in front of "c", it will coerce that to a number, which is 1.

30
00:02:04,150 --> 00:02:05,350
And we can do the same thing,

31
00:02:05,380 --> 00:02:07,600
another example is a string.

32
00:02:07,870 --> 00:02:10,870
Lets define an empty string and let's

33
00:02:10,870 --> 00:02:12,900
console.log(+d). 

34
00:02:13,750 --> 00:02:16,900
And because it's an empty string, it coerces it to 0.

35
00:02:18,630 --> 00:02:25,680
And if you're really sharp, you would have picked up that this unary operator is exactly the same as Number. Remember,

36
00:02:25,680 --> 00:02:27,660
JavaScript also gave us the Number function.

37
00:02:30,810 --> 00:02:33,060
Let's say e = false

38
00:02:34,930 --> 00:02:36,040
and we console.log(e).

39
00:02:37,400 --> 00:02:38,440
It'll just give us false.

40
00:02:38,740 --> 00:02:39,310
You know that.

41
00:02:40,560 --> 00:02:42,720
But what about if I go Number.

42
00:02:47,610 --> 00:02:52,830
It'll give us zero. And that is exactly the same as if I didn't do that,

43
00:02:52,950 --> 00:02:54,060
and I just put the "+" here.

44
00:02:55,910 --> 00:02:59,900
So actually, the + unary operator just gives us a bit of a shortcut, which is awesome.

45
00:03:00,560 --> 00:03:02,330
And let me show you why practically it's cool.

46
00:03:03,150 --> 00:03:07,340
Let's say we've got 10 apples, but we put it in a string.

47
00:03:09,450 --> 00:03:15,990
And let's say we've got 5 pears in a string, and you wanted to add these together.

48
00:03:17,340 --> 00:03:18,600
Apples, plus

49
00:03:20,180 --> 00:03:20,570
pears.

50
00:03:22,580 --> 00:03:29,360
Now, the normal binary operator "+" will try and concatenate these two things, it will combine these

51
00:03:29,360 --> 00:03:30,800
two things as strings.

52
00:03:31,310 --> 00:03:35,910
So you've got here, an answer that looks to be 105, but it's actually not 105,

53
00:03:35,930 --> 00:03:40,970
it's a 10 and a 5 that have just been placed together because JavaScript thinks they are strings - its text.

54
00:03:41,960 --> 00:03:48,350
So to get around that, we just need to place the unary operator in front of the apples and in front of

55
00:03:48,350 --> 00:03:48,830
the pears.

56
00:03:49,880 --> 00:03:53,390
And JavaScript knows now to interpret those as numbers.

57
00:03:53,390 --> 00:03:54,830
It's coerced them into numbers.

58
00:03:55,040 --> 00:03:57,920
And if you didn't want to do this way, and you wanted to do it the long way, 

59
00:03:58,930 --> 00:04:01,600
you'd have to literally write Number, open bracket,

60
00:04:01,900 --> 00:04:02,380
pears.

61
00:04:04,030 --> 00:04:05,320
And you'd have to do the same with apples.

62
00:04:06,010 --> 00:04:06,490
Number.

63
00:04:09,040 --> 00:04:09,950
It's just a lot longer.

64
00:04:10,250 --> 00:04:13,280
So, using the plus "+"  unary operator saves us time.

65
00:04:14,810 --> 00:04:16,339
Let's get onto ... coercion.

