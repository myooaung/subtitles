WEBVTT
1
00:00:01.020 --> 00:00:10.080
Let's quickly go over (1) null, (2) undefined and (3) NaN.  Firstly, null. Null is just a reference, it points to an

2
00:00:10.080 --> 00:00:12.240
empty or invalid object.

3
00:00:12.450 --> 00:00:18.240
Now I'm going to show you a few things in Visual Studio Code, and I'm going to be using a plugin or

4
00:00:18.240 --> 00:00:21.050
a piece of software called Quokka.

5
00:00:21.210 --> 00:00:25.500
And it just allows us to see immediate JavaScript results instead of having to console.log it (in the browser) all the

6
00:00:25.500 --> 00:00:28.590
time, which we can do in JSBin or even Google Chrome.

7
00:00:28.950 --> 00:00:35.460
What I'm talking about is if you click on Extensions, just type "quokka" and there it is - Live Scratchpad

8
00:00:35.460 --> 00:00:41.040
for JavaScript. Install that, and then you push Ctr+Shift+P to bring up the menu, and you can

9
00:00:41.040 --> 00:00:43.470
just search for Quokka:New File.

10
00:00:46.670 --> 00:00:49.910
It's a JavaScript file, and now we can start typing JavaScript. How cool is this?

11
00:00:50.540 --> 00:00:52.030
OK, so let's get into null.

12
00:00:52.400 --> 00:00:55.910
There is a bit of a bug in JavaScript because remember, null is a primitive value.

13
00:00:56.270 --> 00:01:01.550
But if you go to typeof, let's just console.log typeof

14
00:01:03.600 --> 00:01:08.550
null, it actually comes back as an object, and that's weird.

15
00:01:08.640 --> 00:01:12.860
It should come back as the type "null", because null is an stand-alone primitive data type.

16
00:01:13.350 --> 00:01:16.200
But anyway, that's just a JavaScript bug.

17
00:01:16.470 --> 00:01:21.210
And the fact that we can see "object" here, that is what Quokka is doing - it's allowing us to see the immediate results

18
00:01:21.210 --> 00:01:24.150
instead of us having to go to the console, open it up and have a look.

19
00:01:24.780 --> 00:01:26.150
So it's just convenient for testing.

20
00:01:26.680 --> 00:01:36.240
The other thing with null, is that in basic maths null is always coerced to the number zero in JavaScript. So, here is an

21
00:01:36.240 --> 00:01:39.450
example. console.log, let's just go 1 + null. 

22
00:01:39.450 --> 00:01:40.830
It's 1. 

23
00:01:41.790 --> 00:01:43.470
We can go five plus null.

24
00:01:43.470 --> 00:01:44.400
It's 5.

25
00:01:44.490 --> 00:01:48.570
What about null less ten? It's just -10. 

26
00:01:49.320 --> 00:01:52.230
So you can see null is just being replaced by the number zero.

27
00:01:53.040 --> 00:02:00.300
And then one more thing about null is if you negate null and you'll see later more details of how this

28
00:02:00.300 --> 00:02:00.750
works,

29
00:02:00.750 --> 00:02:05.130
but negation is just something that's opposite of true,

30
00:02:05.580 --> 00:02:07.930
so that's the exclamation mark!

31
00:02:07.980 --> 00:02:10.560
So if we negate null, we get true.

32
00:02:11.770 --> 00:02:16.660
But what's kind of weird is if we go null, is that equal to false,

33
00:02:17.680 --> 00:02:18.520
it's also not true.

34
00:02:18.730 --> 00:02:21.170
So it's, you know, its a bid odd. 

35
00:02:21.580 --> 00:02:22.750
You just got to learn how to deal with it.

36
00:02:22.750 --> 00:02:25.090
But I mean, if you negate null, you do get true. 

37
00:02:26.360 --> 00:02:29.750
OK, and one more example of null, I know you're probably over this.

38
00:02:31.940 --> 00:02:39.230
Say we had a person object, let person, and we're going to get into objects in, like shortly, in

39
00:02:39.230 --> 00:02:40.250
the next section,

40
00:02:40.940 --> 00:02:44.510
let person be name Wally

41
00:02:47.160 --> 00:02:47.910
age

42
00:02:48.960 --> 00:02:49.970
go 41.

43
00:02:51.520 --> 00:02:56.350
If you just type our "person", Quokka actually allows you to see what your object is, quite handy.

44
00:02:58.370 --> 00:03:03.980
What we could do, is we could actually make person equal null if we wanted to erase all that data.

45
00:03:04.520 --> 00:03:06.380
Now when you type out "person", 

46
00:03:08.570 --> 00:03:09.890
it has literally going to null.

47
00:03:11.190 --> 00:03:14.250
So that's null. Let's now get on to the second data-type 

48
00:03:14.280 --> 00:03:17.010
that I want to chat to you about, and that is ... undefined.

49
00:03:20.300 --> 00:03:25.910
Firstly, let me illustrate what about if we console.log "a", and we haven't even defined "a" yet, we haven't

50
00:03:25.910 --> 00:03:28.280
put it in speech marks, so its not text. 

51
00:03:28.340 --> 00:03:29.480
It's not like we're doing this (see typing on screen).

52
00:03:31.920 --> 00:03:35.490
This would be valid if we just put it in quotation marks,

53
00:03:35.660 --> 00:03:37.760
it'll literally give us back "a".

54
00:03:37.770 --> 00:03:38.970
But here we're not saying its a string.

55
00:03:39.120 --> 00:03:40.320
Here, we're saying it's a variable,

56
00:03:40.320 --> 00:03:44.670
because we're just placing a without quotation marks.

57
00:03:45.240 --> 00:03:49.740
You're going to get a TypeReference error thrown to you from JavaScript, and that's going to throw you

58
00:03:49.740 --> 00:03:51.300
an error saying that "a" is not defined. 

59
00:03:51.690 --> 00:03:52.770
Well, of course it's not defined.

60
00:03:52.770 --> 00:03:53.820
We haven't said what it is.

61
00:03:54.420 --> 00:03:56.760
So let's define "a". Let's go variable a.

62
00:03:58.120 --> 00:03:59.890
And here you can see the undefined.

63
00:04:00.730 --> 00:04:07.300
And the reason it's undefined is that we've initiated a variable called a, but it doesn't have a value

64
00:04:07.300 --> 00:04:07.590
yet.

65
00:04:08.170 --> 00:04:13.270
It's like you getting a car without a color.

66
00:04:14.340 --> 00:04:19.380
So your car is kind of undefined, you haven't yet initiated it with a color.

67
00:04:19.410 --> 00:04:21.690
You haven't yet assigned it with a color.

68
00:04:22.110 --> 00:04:24.390
And what about doing maths with undefined?

69
00:04:25.730 --> 00:04:32.600
Well, it's not going to work. Um, let's try and do "a +  10", you just gonna get (returned) "Not a Number". 

70
00:04:33.380 --> 00:04:37.240
Remember with null, we could do math operations.

71
00:04:37.250 --> 00:04:39.610
It (null) would just be translated into zero.

72
00:04:39.980 --> 00:04:40.340
Here

73
00:04:40.820 --> 00:04:43.520
you are not allowed doing that. It will always just give you NaN.

74
00:04:44.330 --> 00:04:49.250
The next question you're probably asking is, "is null the same as undefined?". Well, you can already tell they're a little

75
00:04:49.250 --> 00:04:49.760
bit different.

76
00:04:50.540 --> 00:04:53.930
But from a value point of view, JavaScript actually does treat them the same.

77
00:04:54.110 --> 00:04:56.860
And I'll prove that to you now. Let's get rid of this,

78
00:04:56.870 --> 00:04:58.850
let's get rid of that.

79
00:04:58.850 --> 00:04:59.690
And let's go

80
00:05:01.120 --> 00:05:05.740
console.log null equals undefined. And you get returned true.

81
00:05:07.080 --> 00:05:14.760
But with double equals, it tests values. In JavaScript, if you put three equals, it actually tests the

82
00:05:14.760 --> 00:05:16.950
type as well, and you can see that that is false.

83
00:05:18.430 --> 00:05:23.880
Of course it's false - we know that null and undefined are different, they are different primitive value types.

84
00:05:24.550 --> 00:05:25.930
So they are not equal to each other.

85
00:05:26.740 --> 00:05:31.930
And finally, third topic, NaN. Let's quickly chat about that. 

86
00:05:32.350 --> 00:05:42.430
Firstly, NaN is a property of the global window Number object. NaN is the same as Number.NaN

87
00:05:42.430 --> 00:05:43.330
those two are exactly the same.

88
00:05:44.330 --> 00:05:48.170
And by definition, NaN stands for "not a number". 

89
00:05:48.800 --> 00:05:53.960
And it just means something that cannot be represented as a number. Here's an example.

90
00:05:54.970 --> 00:05:55.840
console.log

91
00:05:57.380 --> 00:05:58.100
sausage

92
00:05:59.470 --> 00:06:00.100
times 10.

93
00:06:01.210 --> 00:06:03.760
That doesn't make any sense at all.

94
00:06:03.850 --> 00:06:05.720
And that's why it produces NaN.

95
00:06:06.040 --> 00:06:06.640
Not a number.

96
00:06:07.450 --> 00:06:11.010
And remember how I said that NaN is part of the Number object?

97
00:06:13.670 --> 00:06:17.750
Well, if we go typeof(NaN), its a number. 

98
00:06:18.710 --> 00:06:21.200
And we just saw that before, when it was part of the Number object.

99
00:06:21.710 --> 00:06:23.180
And one more thing with NaN.

100
00:06:24.200 --> 00:06:26.450
It's considered to be unordered.

101
00:06:26.990 --> 00:06:33.680
That means it cannot be less than, it cannot be greater than, it cannot be equal to ANYTHING, even itself, which

102
00:06:33.680 --> 00:06:34.550
is a bit strange.

103
00:06:35.180 --> 00:06:41.560
But have a look here. Let me prove that to you now. NaN is less than one, is false. 

104
00:06:45.000 --> 00:06:45.960
What about greater than one?

105
00:06:47.480 --> 00:06:47.930
False. 

106
00:06:49.020 --> 00:06:52.080
What about if it is equal to itself?

107
00:06:55.070 --> 00:06:56.720
False! Isn't that strange?

108
00:06:57.920 --> 00:06:59.030
I find that very strange.

109
00:06:59.840 --> 00:07:03.680
If it's never equal to itself, how do you ever test whether something is not a number?

110
00:07:04.280 --> 00:07:09.200
Luckily, JavaScript has provided us with an inbuilt function called isNaN().

111
00:07:09.800 --> 00:07:17.660
So how that works is, console.log(isNan(NaN)), and there you go,

112
00:07:18.440 --> 00:07:19.190
that is true.

113
00:07:19.730 --> 00:07:22.650
And that, my friends, is NaN.

114
00:07:23.690 --> 00:07:30.380
And now for a quick summary. Let's just go over those three things very quickly again.

115
00:07:30.680 --> 00:07:31.130
One.

116
00:07:31.730 --> 00:07:33.320
Null. Null,

117
00:07:33.440 --> 00:07:35.030
we saw, is a primitive data-type

118
00:07:35.030 --> 00:07:39.380
although JavaScript has a bug because when you go typeof(null), it tells you it's an object. 

119
00:07:40.590 --> 00:07:47.790
And when you perform arithmetic operations on null, it translates null to zero. And you can treat

120
00:07:47.790 --> 00:07:48.960
that as a zero number.

121
00:07:49.710 --> 00:07:51.180
Null just means nothing.

122
00:07:52.290 --> 00:08:00.450
That's null. Two, undefined. Undefined as we saw is when you declare a variable, but you haven't yet

123
00:08:00.450 --> 00:08:09.390
assigned it a value. And undefined you cannot use in maths, it'll just become an NaN - not a number. 

124
00:08:10.200 --> 00:08:13.930
Which brings us to "not a number". Not a number is, as what it says,

125
00:08:13.950 --> 00:08:17.830
it's something that cannot be converted into a number.

126
00:08:18.480 --> 00:08:25.740
And luckily for us, JavaScript has provided us with an inbuilt function called isNan(), which allows

127
00:08:25.740 --> 00:08:31.830
us, which allows you and I, to actually test whether the value we're working with is a number or not.

128
00:08:32.520 --> 00:08:33.210
I hope this helps.

129
00:08:33.270 --> 00:08:33.870
Let's move on.

