WEBVTT
1
00:00:00.060 --> 00:00:03.900
Before we get into the nitty gritty around prototypes, I just thought, well, let's start with an

2
00:00:03.900 --> 00:00:08.910
example, so you can start getting a sense as to why we need prototypes and a high level what they are.

3
00:00:09.060 --> 00:00:14.970
So let's say we are a food restaurant and we want to display recipes for different types of food.

4
00:00:15.120 --> 00:00:16.290
How do we go about doing this?

5
00:00:16.590 --> 00:00:18.660
Well, let's start by creating a food object.

6
00:00:25.410 --> 00:00:29.820
And I'm just going to create an object by object literal syntax, because it's the most simple, and

7
00:00:29.820 --> 00:00:33.960
now I want to instantiate a object with certain values when I initialize it.

8
00:00:34.110 --> 00:00:37.860
And we already seen how to do this at a previous one of the previous lectures.

9
00:00:38.670 --> 00:00:42.120
So we're going to create our own init function that we can call.

10
00:00:46.160 --> 00:00:51.290
And this is just going to sit the type of food to the top, we passed into the function, so nothing

11
00:00:51.290 --> 00:00:53.060
to complicated they at all.

12
00:01:01.570 --> 00:01:03.850
And then we want to create a recipe method.

13
00:01:05.550 --> 00:01:06.840
Which, again, will be a function.

14
00:01:07.940 --> 00:01:10.700
And in our case, we won't write our full recipes.

15
00:01:11.120 --> 00:01:13.580
We just going to console.log this.

16
00:01:14.780 --> 00:01:15.710
Is a.

17
00:01:17.570 --> 00:01:18.740
The recipe for.

18
00:01:21.820 --> 00:01:22.390
This time.

19
00:01:26.990 --> 00:01:28.610
And this is fine, we've done our object.

20
00:01:29.060 --> 00:01:30.500
So let's not say we've got doughnuts.

21
00:01:38.330 --> 00:01:40.780
Is saying his type is not defined, oh, of course.

22
00:01:48.100 --> 00:01:50.830
In this function, in this init function, we have to pass.

23
00:01:52.070 --> 00:01:56.420
Typekit is an argument which in this case is going to be doughnuts, and it's going to set the time

24
00:01:56.630 --> 00:02:05.660
on this food object as donuts snowy of initialized as food object, defining its type as donuts.

25
00:02:06.470 --> 00:02:11.990
So when we execute this recipe function, I would expect the console.log to show this is a recipe for

26
00:02:11.990 --> 00:02:12.470
donuts.

27
00:02:13.010 --> 00:02:14.180
So let's see if that works.

28
00:02:14.510 --> 00:02:16.640
Food and we execute recipe.

29
00:02:17.060 --> 00:02:21.860
And remember to execute the function, you have to have parentheses and there you go.

30
00:02:21.890 --> 00:02:23.270
This is a recipe for donuts.

31
00:02:23.570 --> 00:02:23.930
Cool.

32
00:02:24.050 --> 00:02:25.250
All is well and good.

33
00:02:25.760 --> 00:02:28.280
But what happens now if we don't just have donuts?

34
00:02:28.640 --> 00:02:31.910
What about if we want to create a whole list of different types of food?

35
00:02:32.390 --> 00:02:33.050
What can we do?

36
00:02:33.620 --> 00:02:37.670
And this is way object not to create comes into play.

37
00:02:40.600 --> 00:02:48.880
And in the previous section, we went through object to create to, let's say, doughnuts equals object

38
00:02:48.880 --> 00:02:51.630
dot to create an as its prototype.

39
00:02:51.790 --> 00:02:53.500
We are now going to pass food.

40
00:02:56.020 --> 00:02:58.660
Donate now, be initialized.

41
00:03:02.350 --> 00:03:07.240
And to prove that it's all worked, doughnuts can access the recipe function.

42
00:03:08.550 --> 00:03:13.830
And this is a recipe for donuts, and the power of this is that we can create different types of foods.

43
00:03:14.460 --> 00:03:16.440
So let's create, I don't know, orange.

44
00:03:17.760 --> 00:03:21.660
Object of Create also posted food.

45
00:03:23.230 --> 00:03:26.500
As this prototype now, orange can be initialized.

46
00:03:29.670 --> 00:03:31.500
And again, orange.

47
00:03:34.200 --> 00:03:35.370
His access to the method.

48
00:03:37.260 --> 00:03:38.010
And then you have it.

49
00:03:38.430 --> 00:03:42.600
This is a recipe for donuts, and this orange one says this is a recipe for oranges.

50
00:03:43.260 --> 00:03:48.270
I just want to ask you a question now when we use object to create what you think is happening.

51
00:03:48.900 --> 00:03:55.020
Do you think it's creating a brand new food object or is it just referencing the original food object?

52
00:03:56.110 --> 00:03:56.740
What do you think?

53
00:03:57.700 --> 00:03:58.300
Well, let's see.

54
00:03:59.740 --> 00:04:01.090
Let's just move our code around.

55
00:04:01.210 --> 00:04:03.970
Let's create these two objects at the top.

56
00:04:04.330 --> 00:04:07.990
The other thing I want to do is just delete these function calls quickly.

57
00:04:10.010 --> 00:04:17.120
OK, so what we've done now is we've created a doughnut and an orange fly object that creates pulsing

58
00:04:17.120 --> 00:04:19.399
in the food object as its prototype.

59
00:04:20.410 --> 00:04:24.850
Now, what we want to do is I want to change this food object.

60
00:04:25.750 --> 00:04:30.760
So if doughnuts in Orange, which is creating a copy of food, it would have created a copy at this

61
00:04:30.760 --> 00:04:31.150
point.

62
00:04:31.380 --> 00:04:33.160
Online 11 in line 12.

63
00:04:33.820 --> 00:04:35.950
But now in line 14, we're going to amend it.

64
00:04:36.040 --> 00:04:38.170
We need that food recipe.

65
00:04:39.680 --> 00:04:40.940
And that's a main function.

66
00:04:42.770 --> 00:04:50.050
It's console.log at an unlisted capital, it now not say you are now eating.

67
00:04:50.720 --> 00:04:52.550
You are now eating.

68
00:04:57.050 --> 00:05:00.980
This time, and because we want capitals, this is going to be the case.

69
00:05:07.410 --> 00:05:08.670
So what do you think would happen?

70
00:05:09.810 --> 00:05:12.900
Let's actually put these in its functions at the top as well.

71
00:05:13.260 --> 00:05:17.280
What do you think would happen now when I go and execute that recipe function?

72
00:05:18.480 --> 00:05:20.680
Is it going to console.log this original?

73
00:05:20.700 --> 00:05:26.130
This is a recipe in small case or what is it going to go and console.log the uppercase you are now eating

74
00:05:26.520 --> 00:05:27.330
this type of food?

75
00:05:27.690 --> 00:05:28.590
What do you think will happen?

76
00:05:29.970 --> 00:05:35.520
Well, I'll tell you that I expect this latest console.log to be cancelled out to the street and the

77
00:05:35.520 --> 00:05:41.250
reason is that object to create doesn't create a new copy of an object at OIST references.

78
00:05:41.760 --> 00:05:43.200
The overall prototype.

79
00:05:43.200 --> 00:05:44.790
The original food object.

80
00:05:45.790 --> 00:05:51.610
So when we go doughnuts and we got a recipe and we execute that function, there you go.

81
00:05:52.300 --> 00:05:53.610
It's all in capitals.

82
00:05:53.620 --> 00:05:57.190
You're now eating doughnuts and we can do the same with oranges.

83
00:05:57.400 --> 00:05:59.470
Orange dot recipe.

84
00:06:00.910 --> 00:06:02.510
You're not eating oranges.

85
00:06:03.610 --> 00:06:04.690
So what is this telling us?

86
00:06:04.720 --> 00:06:10.750
Take a step back, this is telling us that object not create creates a new into object for donuts and

87
00:06:10.750 --> 00:06:14.060
for orange, and that the food object is only fallback.

88
00:06:14.680 --> 00:06:20.080
If doughnut to orange don't have the property within themselves, they will fall back and look in the

89
00:06:20.080 --> 00:06:21.220
food object.

90
00:06:21.500 --> 00:06:27.310
But the important thing to remember is that doughnut and orange will only use the food object if they

91
00:06:27.310 --> 00:06:29.140
cannot find the property within themselves.

92
00:06:29.770 --> 00:06:30.600
Improve this team.

93
00:06:31.330 --> 00:06:34.810
I just want to get rid of orange and all of this.

94
00:06:34.920 --> 00:06:36.010
Let's just get rid of orange.

95
00:06:37.380 --> 00:06:39.180
Orange, let's get rid of the food.

96
00:06:41.570 --> 00:06:42.470
Let's get rid of Orange.

97
00:06:43.350 --> 00:06:46.890
OK, so at this point, if I go and console, log out doughnuts.

98
00:06:49.320 --> 00:06:52.950
You can see that doughnut heads the type of property of doughnuts.

99
00:06:53.640 --> 00:06:58.800
And that's because of that init function within the food object where we assigned a property called

100
00:06:58.800 --> 00:07:00.360
type to this object.

101
00:07:01.290 --> 00:07:02.280
So you with me so far?

102
00:07:03.200 --> 00:07:04.490
So now if.

103
00:07:05.680 --> 00:07:07.180
It's just getting to that function call.

104
00:07:07.870 --> 00:07:12.280
So remember what I said, I said that if the doughnut has its own property, it's not going to go and

105
00:07:12.280 --> 00:07:13.690
look to the food object.

106
00:07:14.320 --> 00:07:16.270
It's almost like the food object as a fallback.

107
00:07:16.450 --> 00:07:20.170
So let's now put a type of property on the food object itself.

108
00:07:20.920 --> 00:07:23.080
So food can have type and that can be anything.

109
00:07:24.090 --> 00:07:25.650
Blah blah blah.

110
00:07:26.580 --> 00:07:30.240
What do you think is going to happen now when I run the risk b function on donuts?

111
00:07:31.080 --> 00:07:32.540
Do you think it's going to console.log?

112
00:07:32.550 --> 00:07:36.270
This is a recipe for donuts or this is a recipe for blah blah blah.

113
00:07:38.280 --> 00:07:43.230
Well, as we would expect, we would expect the doughnut to look at its own type property.

114
00:07:44.640 --> 00:07:47.570
Doesn't need to resort as a full back to the food.

115
00:07:48.360 --> 00:07:52.890
It's got its own time, so I'd expect the console to say this is a recipe for donuts.

116
00:07:54.000 --> 00:07:56.940
Let's see if that's right recipe.

117
00:07:58.510 --> 00:08:00.670
We consider this is a recipe for doughnuts.

118
00:08:01.060 --> 00:08:01.730
So there you have it.

119
00:08:01.760 --> 00:08:04.030
This is an introduction to Prototype's how they work.

120
00:08:04.030 --> 00:08:08.890
You can kind of view them as just a fullback, and we can prove here that food is actually a prototype

121
00:08:08.890 --> 00:08:09.400
of doughnuts.

122
00:08:09.430 --> 00:08:14.050
How will JavaScript has given us the if prototype of made it straight out of the box?

123
00:08:15.040 --> 00:08:17.730
So we need to do his console.log.

124
00:08:18.370 --> 00:08:24.040
The X is our food object is proto type of.

125
00:08:24.790 --> 00:08:26.620
And is it a prototype of doughnut?

126
00:08:28.230 --> 00:08:28.870
There you have it.

127
00:08:30.810 --> 00:08:31.920
It resorts to truth.

128
00:08:32.190 --> 00:08:36.750
So that tells us that food is actually a prototype of doughnuts, which makes sense because that's what

129
00:08:36.750 --> 00:08:39.750
the objeto create means it does when we pass food as its prototype.

130
00:08:40.870 --> 00:08:43.900
But enough said let's get into prototypes in more detail.

