1
00:00:03,020 --> 00:00:05,960
Working with dates can be rather complicated.

2
00:00:06,620 --> 00:00:09,920
And trust me, developers have felt the pain.

3
00:00:10,550 --> 00:00:14,870
And before we get further, I just want to say that in this section, we are going to be ignoring third

4
00:00:14,870 --> 00:00:19,550
party libraries like Moment.js that help us when working with dates.

5
00:00:19,560 --> 00:00:21,660
And the reason is, I want you to understand JavaScript.

6
00:00:21,710 --> 00:00:27,680
This course isn't about third party packages, and in any event, it'll help you understand dates at

7
00:00:27,680 --> 00:00:28,130
its core.

8
00:00:28,580 --> 00:00:31,310
So when you're working with third party libraries (later), it'll help you in any event.

9
00:00:32,060 --> 00:00:32,780
Let's get into it.

10
00:00:33,590 --> 00:00:35,990
A date in JavaScript is an object.

11
00:00:36,770 --> 00:00:41,300
Remember how we had the two data-types in JavaScript? We had primitive, which is just another word for

12
00:00:41,300 --> 00:00:42,860
simple like strings and numbers.

13
00:00:43,700 --> 00:00:44,870
And then we had an object.

14
00:00:44,870 --> 00:00:46,160
We had a complex data type.

15
00:00:47,310 --> 00:00:52,800
Well, that fits into this bucket, and date represents a moment in time.

16
00:00:53,640 --> 00:01:02,430
So even though it's named date, we do use it to handle time. And to instantiate, to access this object

17
00:01:02,430 --> 00:01:03,130
called date,

18
00:01:04,019 --> 00:01:08,130
we have to call it by using the "new" keyword and we go "new Date()".

19
00:01:08,730 --> 00:01:10,890
And we normally put this into a variable.

20
00:01:11,460 --> 00:01:15,360
And this creates a date object that points to the current moment in time.

21
00:01:16,600 --> 00:01:24,640
And just in case you were wondering, for computers, the beginning of time is 1st of January 1970 and

22
00:01:24,640 --> 00:01:27,880
all dates are expressed in milliseconds since this time.

23
00:01:29,150 --> 00:01:31,950
But hang on ...
(record scratch)
Whaaaaat?

24
00:01:33,440 --> 00:01:36,950
Why is the 1st of January 1970 the beginning of time?

25
00:01:37,550 --> 00:01:42,350
Well, let me first point out the JavaScript is not the only language with this nuance.

26
00:01:43,250 --> 00:01:50,540
Java, Python and a plethora of others also start their time on the 1st of January 1970.

27
00:01:51,020 --> 00:01:55,760
When you start Googling these things, you're going to see some people say that that's the birthday

28
00:01:55,760 --> 00:01:56,360
of Unix.

29
00:01:57,080 --> 00:01:58,130
That's simply not true.

30
00:01:58,760 --> 00:02:00,020
Why do we know it's not true?

31
00:02:00,380 --> 00:02:03,430
Because there were operating systems before 1970.

32
00:02:03,440 --> 00:02:06,530
In fact, in the 1960s, we already had rough versions of it.

33
00:02:07,620 --> 00:02:15,120
So the reason that it's 1970 is that it was just a ... thumb 
suck from the engineers designing the operating

34
00:02:15,120 --> 00:02:20,610
system. They needed a start date of time and they just decided what better date than the New Year's

35
00:02:20,610 --> 00:02:22,350
Day of 1970.

36
00:02:24,190 --> 00:02:28,030
Something else that's very interesting is on a 32 bit system,

37
00:02:28,630 --> 00:02:35,030
numbers can be represented from (swoosh) all the way to (swoosh).

38
00:02:37,620 --> 00:02:42,540
These are large numbers. What it means is that our time span is limited.

39
00:02:43,230 --> 00:02:46,920
What do I mean by that? Well, the negative numbers goes back in time.

40
00:02:47,550 --> 00:02:48,870
Call it pre-history.

41
00:02:49,530 --> 00:02:51,150
The positive numbers go forward in time.

42
00:02:51,390 --> 00:02:52,260
Call it the future.

43
00:02:53,940 --> 00:02:55,560
Based on these numbers,

44
00:02:56,850 --> 00:03:00,300
pre-history dates all the way back to 1901.

45
00:03:01,510 --> 00:03:02,440
What about the future?

46
00:03:03,370 --> 00:03:05,790
Well, it only goes to 2038.

47
00:03:06,250 --> 00:03:06,730
Oh, no.

48
00:03:07,090 --> 00:03:09,940
Does this mean the world's going to come to an end in 2038?

49
00:03:10,750 --> 00:03:11,290
I hope not.

50
00:03:12,040 --> 00:03:14,980
But it is known as the year 2038 problem.

51
00:03:15,610 --> 00:03:16,780
So how do we fix this?

52
00:03:16,960 --> 00:03:22,210
Well, computers are already coming up with 64 bit operating systems, and that just means we're going

53
00:03:22,210 --> 00:03:23,650
to be able to push out that future date.

54
00:03:23,740 --> 00:03:25,180
So I don't think it's too much of a concern.

55
00:03:25,330 --> 00:03:27,520
I just thought it's a bit of interesting knowledge for you.

56
00:03:27,880 --> 00:03:28,510
Let's continue.

