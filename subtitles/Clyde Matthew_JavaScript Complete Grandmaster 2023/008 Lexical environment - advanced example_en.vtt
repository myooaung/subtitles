WEBVTT
1
00:00:00.390 --> 00:00:02.590
By now, you know that I'm a fan of examples.

2
00:00:02.730 --> 00:00:06.480
So let's get into one to understand how this lexical environment works.

3
00:00:07.470 --> 00:00:08.970
Let's say we've got code.

4
00:00:09.230 --> 00:00:11.010
So let's understand how this code works.

5
00:00:11.400 --> 00:00:15.120
I've blurred out the law statement and it's just when we're going to execute this function.

6
00:00:15.420 --> 00:00:17.160
But for now, we haven't executed this.

7
00:00:17.190 --> 00:00:19.890
We've just declared all these variables and functions.

8
00:00:20.370 --> 00:00:22.230
So what's gonna happen in the creation phase?

9
00:00:22.570 --> 00:00:28.170
Or remember, what we said at global execution contexts is going to be created.

10
00:00:28.650 --> 00:00:30.660
There was one at the beginning lectures we looked at.

11
00:00:31.110 --> 00:00:33.840
But remember, now we digging deeper into what this means.

12
00:00:33.870 --> 00:00:36.600
What does a global execution context contain?

13
00:00:37.680 --> 00:00:40.170
Well, we've seen it contains two environments.

14
00:00:40.590 --> 00:00:43.380
The lexical environment and the variable environment.

15
00:00:43.650 --> 00:00:45.720
And in all practical purposes, they're the same.

16
00:00:46.040 --> 00:00:48.480
But there's a few subtle differences which we discussed.

17
00:00:48.870 --> 00:00:50.880
Let's look at the lexical environment.

18
00:00:51.630 --> 00:00:56.820
Remember, each lexical environment holds three pieces of information, the environment record.

19
00:00:57.330 --> 00:01:01.910
And here it's just going to be variables defined violate and concept, which is A and B..

20
00:01:02.430 --> 00:01:03.540
And it's gonna be the function.

21
00:01:03.780 --> 00:01:08.040
It's the first thing that's also going to hold an outer reference to the Aalto environment.

22
00:01:08.400 --> 00:01:10.290
And here are the outer environment is now.

23
00:01:10.560 --> 00:01:11.280
Why is it now?

24
00:01:11.610 --> 00:01:12.210
We'll think about it.

25
00:01:12.210 --> 00:01:14.880
We are really in the global execution context.

26
00:01:15.120 --> 00:01:17.070
So there is nothing outside of it.

27
00:01:17.310 --> 00:01:18.090
That's why it's not.

28
00:01:18.270 --> 00:01:20.340
And what is this binding gonna be?

29
00:01:20.970 --> 00:01:21.810
Hundred percent.

30
00:01:22.170 --> 00:01:23.910
It's going to be the global object.

31
00:01:24.630 --> 00:01:25.920
I hope this is making sense.

32
00:01:26.610 --> 00:01:28.800
And what about the variable environment?

33
00:01:28.890 --> 00:01:29.730
What's gonna happen then?

34
00:01:30.660 --> 00:01:35.640
Well, again, each environment holds three pieces of information here.

35
00:01:35.790 --> 00:01:39.690
The environment records gonna be dealing with the var Keywood.

36
00:01:39.780 --> 00:01:43.380
That's the only difference between the variable environment and the lexical environment.

37
00:01:44.220 --> 00:01:45.900
So C is gonna be undefined.

38
00:01:46.680 --> 00:01:50.070
The outer environment is still going to be referencing null.

39
00:01:50.100 --> 00:01:53.160
And that this binding is still going to be referencing the global object.

40
00:01:54.440 --> 00:01:55.860
Would you know what's interesting with this?

41
00:01:55.950 --> 00:01:57.030
And I hope you picked it up.

42
00:01:57.450 --> 00:02:03.300
Can you notice the difference between the variable C and the variable A and B, unlike variables declared

43
00:02:03.320 --> 00:02:09.720
with for which all staff with the value of undefined late and contact variables are not initialized

44
00:02:09.720 --> 00:02:12.000
until the definition is evaluated.

45
00:02:12.750 --> 00:02:19.040
And this just means accessing the variables before the initialization will result in a reference area.

46
00:02:19.710 --> 00:02:21.600
So it's quite an important distinction we've just picked up.

47
00:02:22.770 --> 00:02:23.280
Okay, cool.

48
00:02:23.310 --> 00:02:24.630
So we've done the creation phase.

49
00:02:25.410 --> 00:02:26.040
What's next?

50
00:02:26.370 --> 00:02:26.900
Well, that's right.

51
00:02:26.940 --> 00:02:34.860
The execution phase of this context, of this execution context and all that does is it assigns values

52
00:02:34.950 --> 00:02:35.970
to the variables.

53
00:02:36.540 --> 00:02:40.980
So A and B of the value of twenty and thirty fairly C stays undefined.

54
00:02:41.010 --> 00:02:42.710
Because we've never signed it a value.

55
00:02:43.650 --> 00:02:43.840
Okay.

56
00:02:43.950 --> 00:02:44.980
So far, so good.

57
00:02:45.080 --> 00:02:49.140
But what happens now when we execute the function?

58
00:02:49.680 --> 00:02:53.550
Well, remember what we said, that the two types of execution context.

59
00:02:53.580 --> 00:02:54.810
The first was a global one.

60
00:02:54.840 --> 00:02:56.990
And it's done automatically when we write code.

61
00:02:57.000 --> 00:02:58.110
And we just saw that now.

62
00:02:58.770 --> 00:03:00.630
But now we've executed a function.

63
00:03:00.660 --> 00:03:03.000
So what's the second type of execution context?

64
00:03:04.250 --> 00:03:11.810
Yes, a functional execution context, and this will be at the top of the stack and again, each execution

65
00:03:11.810 --> 00:03:17.090
context within it has a lexical environment and a variable environment.

66
00:03:17.570 --> 00:03:19.310
And what's in this lexical environment?

67
00:03:20.060 --> 00:03:24.290
Well, here we have our function in the environment record.

68
00:03:24.320 --> 00:03:27.640
We've got our function top, which in this case is decorative.

69
00:03:28.220 --> 00:03:31.700
We've got arguments and we have an index of arguments.

70
00:03:31.790 --> 00:03:33.140
The first argument is 10.

71
00:03:33.140 --> 00:03:36.560
The second argument is 20, and it also stores this length properly.

72
00:03:36.950 --> 00:03:42.260
Now, when we look at a reference to the outer environment, look at this and this makes sense.

73
00:03:42.670 --> 00:03:48.760
It's not null anymore because now he's sitting on top of the stack and there is an outer lexical environment

74
00:03:48.760 --> 00:03:49.250
to reference.

75
00:03:49.280 --> 00:03:51.170
And that is the global lexical environment.

76
00:03:51.740 --> 00:03:58.550
And when it gets to this binding, that this binding will also be referencing the global object in this

77
00:03:58.550 --> 00:04:00.990
instance or for using strict mode would be undefined.

78
00:04:02.240 --> 00:04:06.140
And the variable environment pretty much has the same things.

79
00:04:06.440 --> 00:04:07.820
I don't have to go over those again.

80
00:04:08.450 --> 00:04:12.320
And very similar to what we just saw, the global execution context.

81
00:04:12.410 --> 00:04:17.149
It's going to go through the execution phase and that's where the signs of values and variables and

82
00:04:17.149 --> 00:04:18.140
executes the function.

83
00:04:18.589 --> 00:04:20.550
I really hope this is starting to sink in.

84
00:04:21.170 --> 00:04:26.060
And for the sake of completeness and even for making this sink in more, let's do a few examples together.

85
00:04:26.090 --> 00:04:28.970
Let's start getting more comfortable with how this all works.

