1
00:00:00,360 --> 00:00:03,270
I know approvato and prototype are confused often.

2
00:00:03,430 --> 00:00:08,670
So that's why I wanted to dedicate another example just to help solidify your understanding of these

3
00:00:08,670 --> 00:00:09,630
two concepts.

4
00:00:09,900 --> 00:00:10,500
Let's have a look.

5
00:00:10,600 --> 00:00:15,300
The first thing I want to show you is protein and the school and the school project and the school and

6
00:00:15,300 --> 00:00:15,630
the school.

7
00:00:16,470 --> 00:00:17,490
Let's see how that works.

8
00:00:18,000 --> 00:00:19,710
Let's define the use of our website.

9
00:00:22,040 --> 00:00:27,650
It's just say it's got one property, which is false, and that is, is this person a member or not?

10
00:00:30,120 --> 00:00:31,750
Now, let's create a guest user.

11
00:00:35,380 --> 00:00:38,530
And say the issues user has a name of Wally.

12
00:00:43,460 --> 00:00:48,410
Now what all prototypes we've kind of seen, the prototypes are just referencing another object and

13
00:00:48,410 --> 00:00:53,210
allows one object to use properties and methods define on another object.

14
00:00:53,390 --> 00:00:54,100
That's what it is.

15
00:00:54,110 --> 00:00:55,310
It's almost like delegation.

16
00:00:55,850 --> 00:01:01,100
So let's now take our guest user and set its prototype to the user object.

17
00:01:02,030 --> 00:01:04,670
One way to do that is we can access the global object.

18
00:01:07,820 --> 00:01:15,830
We can use an inbuilt method called prototype of and we want to set the prototype of this user to user.

19
00:01:18,230 --> 00:01:25,880
Now, this means our guest user automatically has access to the member property, and if we consolidate

20
00:01:25,880 --> 00:01:30,260
lock out, we get false, which is what we sit on the main user object.

21
00:01:30,710 --> 00:01:31,420
So this is fine.

22
00:01:31,430 --> 00:01:34,340
This is intuitive and this is what prototypes are all about.

23
00:01:34,790 --> 00:01:42,290
If we console.log guest user out to the screen and we open up its object, we get this photo here,

24
00:01:42,590 --> 00:01:46,790
which is an object and we open it up and then object.

25
00:01:47,060 --> 00:01:49,220
You can see now has a property of no false.

26
00:01:50,030 --> 00:01:56,240
So this protein is actually referencing the exact same object of user.

27
00:01:57,850 --> 00:02:00,370
And in fact, it's not creating a replica of it.

28
00:02:00,610 --> 00:02:03,280
It is literally the same object.

29
00:02:04,000 --> 00:02:11,530
So it just means if I go now and I change user, if I change the user and add a property called age.

30
00:02:14,760 --> 00:02:19,350
It's actually now going to have updated the proto-Earth biggest user ID to prove it.

31
00:02:20,520 --> 00:02:27,840
All we have to do is go to use this user and let's just console.log this protocol up to the screen directly.

32
00:02:29,660 --> 00:02:30,230
There you go.

33
00:02:30,380 --> 00:02:36,260
It's updated, it's Friday, which is now an object consisting of both member and age.

34
00:02:36,710 --> 00:02:39,890
OK, so that's pretty kind of intuitive, right?

35
00:02:40,640 --> 00:02:42,400
What about prototype?

36
00:02:42,650 --> 00:02:43,460
What is that about?

37
00:02:43,790 --> 00:02:45,590
OK, well, let's start having a look.

38
00:02:46,220 --> 00:02:47,450
Let me just clear the console.

39
00:02:48,710 --> 00:02:51,290
This creates an empty function.

40
00:02:51,500 --> 00:02:53,030
This will help illustrate prototypes.

41
00:02:53,900 --> 00:02:55,280
It's a function call.

42
00:02:55,580 --> 00:02:56,690
And this just says empty.

43
00:02:58,370 --> 00:03:04,550
Then on this call function, it's safe to prototype and let's set the prototype.

44
00:03:04,680 --> 00:03:06,200
This is called property of sound.

45
00:03:06,290 --> 00:03:07,580
We can make it whatever we want.

46
00:03:07,970 --> 00:03:10,850
And let's say that sound has a value of through.

47
00:03:11,870 --> 00:03:14,320
OK, this is the first time we've defined our object.

48
00:03:14,360 --> 00:03:18,890
Second step to construct functions is that we have to call it by using the new keyword.

49
00:03:19,700 --> 00:03:25,460
So let's just define my call equals new call.

50
00:03:26,750 --> 00:03:30,740
And then we know that Michael has access to the sound property.

51
00:03:31,460 --> 00:03:33,590
And remember what the new key word does here.

52
00:03:33,680 --> 00:03:39,590
This is why I just want to emphasize it once again, the new keyword creates an empty object.

53
00:03:40,070 --> 00:03:41,690
Just a simple object.

54
00:03:42,170 --> 00:03:48,770
It will then encounter that call function and relook at that call functions prototype and to set the

55
00:03:48,770 --> 00:03:51,590
properties of the newly created object to be that prototype.

56
00:03:51,950 --> 00:03:57,770
Then what I'll do is I'll pass in the newly created object into the call function, and then this keyword

57
00:03:57,770 --> 00:04:00,620
will point to itself the my call object.

58
00:04:02,360 --> 00:04:09,020
That's kind of what happens in the background, and this is the only reason why this prototype property

59
00:04:09,170 --> 00:04:10,870
exists, it exists.

60
00:04:10,870 --> 00:04:15,440
So when we use the new keyword, it's able to sit the proto of the newly created object.

61
00:04:15,680 --> 00:04:16,430
We kind of get us.

62
00:04:16,760 --> 00:04:17,589
Let me prove it to you.

63
00:04:18,019 --> 00:04:22,190
Let's take our Michael and its console look at prior to.

64
00:04:23,660 --> 00:04:25,190
What would you expect to see?

65
00:04:25,250 --> 00:04:30,500
What is its price to remember what we said, it's proto will be the prototype.

66
00:04:30,500 --> 00:04:31,880
We sit on the function call.

67
00:04:32,570 --> 00:04:34,880
And it is it sound from.

68
00:04:35,570 --> 00:04:38,510
But do you think our call is going to have its own prototype?

69
00:04:41,210 --> 00:04:41,900
Let's have a look.

70
00:04:42,650 --> 00:04:43,460
Prototype.

71
00:04:45,120 --> 00:04:49,080
Undefined, it doesn't have a prototype, and this is the point I'm trying to make.

72
00:04:49,590 --> 00:04:53,110
Only functions as prototypes, and it's only there.

73
00:04:53,310 --> 00:04:58,470
So when we use the new keyword, it can set the prototype of that to the prototype of the function and

74
00:04:58,470 --> 00:05:01,990
functions, automatically get prototypes and show you another example.

75
00:05:01,990 --> 00:05:03,420
Let's create a function called bike.

76
00:05:05,540 --> 00:05:08,930
And let's go back to prototype.

77
00:05:10,330 --> 00:05:10,960
There you go.

78
00:05:11,110 --> 00:05:15,460
Its prototype is an object, it does have a prototype, this is the point I'm trying to make.

79
00:05:15,730 --> 00:05:16,600
What about objects?

80
00:05:17,200 --> 00:05:18,630
Objects don't have prototype.

81
00:05:18,640 --> 00:05:20,830
It's only these functions for these scenarios.

82
00:05:21,620 --> 00:05:22,810
Can you give you another example?

83
00:05:23,530 --> 00:05:23,890
Lit.

84
00:05:25,090 --> 00:05:26,070
I'm trying to think of another.

85
00:05:26,100 --> 00:05:28,660
We've used car we used like this used jet.

86
00:05:28,960 --> 00:05:31,000
And let's just say that is an empty object.

87
00:05:31,690 --> 00:05:33,070
Does it have a prototype?

88
00:05:34,230 --> 00:05:39,840
No doesn't have a prototype because it's not a function, but it does have protein.

89
00:05:41,690 --> 00:05:46,580
But ways that project from Limit will first show you that it has a protein protein.

90
00:05:47,880 --> 00:05:50,460
These it's protest, what protest is that?

91
00:05:51,300 --> 00:05:55,800
And we had to come from all defining an object like this is the same as us.

92
00:05:55,800 --> 00:05:58,620
Going legit equals new object.

93
00:05:58,920 --> 00:06:02,130
So what it's doing and we've used the new keyword here.

94
00:06:02,610 --> 00:06:03,510
This is a function.

95
00:06:04,680 --> 00:06:12,000
And remember, the Kroto of G8 is going to be set to the prototype of this global object.

96
00:06:12,910 --> 00:06:14,140
So it's no surprise.

97
00:06:15,220 --> 00:06:20,800
The G8 does have a protocol, and I can prove that it's a global object is what we can do is we can

98
00:06:20,800 --> 00:06:21,130
go.

99
00:06:22,940 --> 00:06:24,020
On so long.

100
00:06:25,210 --> 00:06:27,310
Jade Trotter.

101
00:06:28,760 --> 00:06:32,530
Does it equal the object prototype?

102
00:06:34,360 --> 00:06:40,450
And it's true it does equal now exactly the same thing, it's referencing that prototype of the global

103
00:06:40,450 --> 00:06:40,900
object.

104
00:06:41,560 --> 00:06:46,990
And this means and I know it's going to sound very strange, but this means the actual global object

105
00:06:47,770 --> 00:06:48,550
is a function.

106
00:06:49,460 --> 00:06:51,830
I improve it's a function by executing it.

107
00:06:52,490 --> 00:06:54,220
You got a function.

108
00:06:55,870 --> 00:06:56,370
Amazing.

109
00:06:57,040 --> 00:07:02,080
So to recap and the school and the school proto and the school and the school is available and objects,

110
00:07:02,080 --> 00:07:06,160
and all that's doing is it's referencing the prototype of another object.

111
00:07:06,340 --> 00:07:12,310
It's all under school and the school and the school and the school is in prototype, which we've just

112
00:07:12,310 --> 00:07:12,610
seen.

113
00:07:12,730 --> 00:07:19,010
Well, that is only available on functions, and it only exists because we like using the new hewould

114
00:07:19,120 --> 00:07:19,530
crew.

115
00:07:19,630 --> 00:07:21,850
I hope this is starting to make sense.

116
00:07:22,330 --> 00:07:23,800
But don't worry if it is confusing.

117
00:07:23,800 --> 00:07:26,980
I mean, a lot of people struggle with these concepts in JavaScript.

118
00:07:27,340 --> 00:07:28,240
Let's continue.

