WEBVTT
1
00:00:00.120 --> 00:00:06.100
Who can be with the bear with me, because now we're going to actually finish writing our callback function.

2
00:00:06.120 --> 00:00:11.580
And before we do, we got to know what it is we want to do again and remember how the for each is a

3
00:00:11.580 --> 00:00:15.630
loop, meaning we need to know how much we need to loop.

4
00:00:15.630 --> 00:00:17.280
Otherwise it's just going to go indefinitely.

5
00:00:17.400 --> 00:00:23.010
In our example, we've defined an array with three items milk, honey and sugar.

6
00:00:24.360 --> 00:00:26.250
So the first thing is, how do we access this?

7
00:00:26.400 --> 00:00:30.000
And the most obvious answer is to use this keyword.

8
00:00:30.180 --> 00:00:31.650
But what will this refer to?

9
00:00:31.650 --> 00:00:33.490
The easiest way?

10
00:00:33.510 --> 00:00:35.670
Again, it's just to console.log it out.

11
00:00:35.700 --> 00:00:37.440
I'll show you a few ways to test what this is.

12
00:00:38.070 --> 00:00:39.540
But this is the most intuitive way.

13
00:00:39.630 --> 00:00:41.230
And let's see what it is.

14
00:00:41.290 --> 00:00:42.930
So let's clear the console and it's running.

15
00:00:44.070 --> 00:00:50.780
We've console.log this to the screen, and this is the era we can see that milk, honey and sugar,

16
00:00:50.790 --> 00:00:52.200
and it contains three items.

17
00:00:52.380 --> 00:00:53.020
So that's cool.

18
00:00:53.160 --> 00:00:56.610
We know that another way to check what this is.

19
00:00:57.660 --> 00:01:02.100
And this define it in a variable that say, let, let's just call it length lane.

20
00:01:02.100 --> 00:01:05.820
Full length equals this length.

21
00:01:06.510 --> 00:01:11.430
And what we can do especially and this is what's fun when working in the Sauces tab with our own farm,

22
00:01:11.790 --> 00:01:13.790
we can put a breakpoint here.

23
00:01:14.730 --> 00:01:17.310
And what you can do, then, is you can run this function.

24
00:01:17.370 --> 00:01:18.090
So let's run it.

25
00:01:19.190 --> 00:01:20.570
Sorry, let's refresh first.

26
00:01:21.050 --> 00:01:25.760
Clear the console, and now let's put a breakpoint here, and let's run it.

27
00:01:27.380 --> 00:01:29.840
What it's going to do is it's going to stop our code at this point.

28
00:01:30.210 --> 00:01:35.990
And what's interesting here and we want to look at is the scope section within DevTools.

29
00:01:37.060 --> 00:01:42.880
And you can see that Lynn is currently undefined, right, because we've paused it affords executed

30
00:01:42.880 --> 00:01:43.390
this line.

31
00:01:43.810 --> 00:01:46.430
But as soon as we step over and we execute this line.

32
00:01:47.530 --> 00:01:48.130
There you go.

33
00:01:48.460 --> 00:01:55.060
Lynn is equal to three, so we can see here that this is pointing to the array.

34
00:01:55.060 --> 00:01:57.460
And even if a hover over it, this is called DevTools is.

35
00:01:57.460 --> 00:01:59.260
It shows you what this is referring to.

36
00:01:59.830 --> 00:02:04.450
So that's why we can access the in-built length method on this array.

37
00:02:05.050 --> 00:02:05.670
Awesome, right?

38
00:02:05.700 --> 00:02:06.100
Okay.

39
00:02:06.280 --> 00:02:08.620
So we've established that we've got the length property.

40
00:02:09.039 --> 00:02:10.300
Let's remove that breakpoint.

41
00:02:11.440 --> 00:02:13.660
And let's just continue to execute our code.

42
00:02:14.080 --> 00:02:19.360
And we all done and dusted the final leg is to loop through.

43
00:02:21.180 --> 00:02:21.630
Our.

44
00:02:21.870 --> 00:02:22.320
All right.

45
00:02:23.010 --> 00:02:27.090
And of course, we can just use the traditional fully variable.

46
00:02:27.120 --> 00:02:28.380
I started zero.

47
00:02:29.160 --> 00:02:34.470
And we're going to fly this loop as long as I is less than length.

48
00:02:36.340 --> 00:02:40.870
And each time it iterates through this function, we're going to increase either one.

49
00:02:41.200 --> 00:02:41.710
We know this.

50
00:02:41.710 --> 00:02:44.200
This is the standard for loop that we all know and love.

51
00:02:44.230 --> 00:02:51.520
And now what we're wanting to do is define our callback function goes, Yeah, and remember what arguments

52
00:02:51.520 --> 00:02:54.850
are callback function took I right to take three arguments.

53
00:02:55.270 --> 00:02:59.650
So we're going to call out callback function and we are going to give it three arguments.

54
00:03:00.070 --> 00:03:05.800
Three arguments are the item, which is the array, and we can access the actual item so we have to

55
00:03:05.800 --> 00:03:06.970
pass in the index number.

56
00:03:07.750 --> 00:03:10.840
The second argument is the index itself.

57
00:03:12.030 --> 00:03:16.110
And the third argument, remember, ha, see, we don't really need it, but we can in this instance,

58
00:03:16.110 --> 00:03:17.580
just for completeness sake.

59
00:03:17.850 --> 00:03:18.750
We have to end this.

60
00:03:18.750 --> 00:03:21.180
We have to actually pass in there itself.

61
00:03:22.110 --> 00:03:22.920
How cool is this?

62
00:03:22.920 --> 00:03:23.970
We pretty much done that.

63
00:03:24.360 --> 00:03:27.030
So what happens is we can use this for each method.

64
00:03:27.630 --> 00:03:34.200
We remember that the function takes three arguments the item, the index, and we just called it argument

65
00:03:34.200 --> 00:03:38.220
this and now we can do things with them as we please.

66
00:03:38.430 --> 00:03:46.500
In our instance, let's just console.log item index and all this just so you can see that it is working

67
00:03:46.500 --> 00:03:47.190
as expected.

68
00:03:47.430 --> 00:03:48.390
Let's run this function.

69
00:03:49.660 --> 00:03:54.640
The ego, you've just created our own folly fool, and it's working as expected.

70
00:03:54.670 --> 00:03:55.880
How awesome is this?

71
00:03:55.900 --> 00:03:57.820
But there's one more thing we have to do, isn't it?

72
00:03:57.970 --> 00:04:01.150
Remember when we looked at this, we was that it was one of these tapes.

73
00:04:01.150 --> 00:04:02.920
Wasn't it native support for each?

74
00:04:03.550 --> 00:04:04.240
Remember this?

75
00:04:04.250 --> 00:04:06.940
We had to this keyword in this code.

76
00:04:07.240 --> 00:04:09.640
This is the standard involved for each method.

77
00:04:16.200 --> 00:04:19.360
You've.

78
00:04:28.510 --> 00:04:33.550
And that this referred to the window object that we could pass in a second argument in that example

79
00:04:33.550 --> 00:04:38.410
we looked at, we passed in the array one and we used that so that this cubic.

80
00:04:40.450 --> 00:04:41.530
How would we do that here?

81
00:04:41.680 --> 00:04:45.460
I want you to think about it, and then I'll show you in the next lecture how to do that.

