1
00:00:00,150 --> 00:00:05,580
Let's finish for the final part of our plentiful and that is to fix this, this issue.

2
00:00:07,290 --> 00:00:10,830
So to make things easier, let me just delete previous console log.

3
00:00:12,100 --> 00:00:15,760
And I just want to show you if we console.log this to the screen.

4
00:00:17,010 --> 00:00:21,030
What would you expect to happen, what do you think is going to be shown on the console?

5
00:00:21,270 --> 00:00:21,990
Well, let's have a look.

6
00:00:22,980 --> 00:00:23,910
Let's run the function.

7
00:00:25,010 --> 00:00:27,510
And then you go to the window object.

8
00:00:27,530 --> 00:00:28,380
Why is this?

9
00:00:28,460 --> 00:00:29,600
And what's even more weird?

10
00:00:30,470 --> 00:00:31,860
This just kills console again.

11
00:00:31,910 --> 00:00:36,260
What's even more weird is we put a break here and we start executing this.

12
00:00:36,800 --> 00:00:40,550
Let's run the function and look at these local variables again.

13
00:00:40,910 --> 00:00:41,260
OK.

14
00:00:41,330 --> 00:00:41,830
The scope.

15
00:00:42,680 --> 00:00:43,880
I'm going to step through our code.

16
00:00:44,120 --> 00:00:45,110
We get to the array.

17
00:00:46,540 --> 00:00:50,890
Now we get to the for each function, so it's going to hop into our custom check, it's going to check

18
00:00:50,890 --> 00:00:53,080
whether the callbacks, not a function, it's going to pass that.

19
00:00:53,990 --> 00:00:55,550
And this is what's interesting, right?

20
00:00:56,120 --> 00:01:02,150
That this I hover over that when I use this keyword within the call, it refers to the right.

21
00:01:03,220 --> 00:01:09,760
But when we get outside, when we get to this console log, it actually refers to the window object.

22
00:01:10,270 --> 00:01:11,950
If I continue to execute this.

23
00:01:13,750 --> 00:01:16,300
We going we stepping through now at this console.log.

24
00:01:16,780 --> 00:01:22,120
We outside the side of the for each function, and now we're now hover over that.

25
00:01:22,840 --> 00:01:25,270
You can see that this face to the window object.

26
00:01:25,360 --> 00:01:32,560
How weird is this doesn't make sense unless you know JavaScript because it does make sense, and I'll

27
00:01:32,560 --> 00:01:33,820
show you why in a second.

28
00:01:34,330 --> 00:01:39,430
But before I show you and get into the nitty gritty of it, just take a step back and look at the different

29
00:01:39,430 --> 00:01:44,350
ways we've just executed functions when we executed for each.

30
00:01:45,430 --> 00:01:47,230
We did that as a method.

31
00:01:47,650 --> 00:01:49,810
We executed it as a method.

32
00:01:50,830 --> 00:01:55,420
That's when we actually execute the function, a callback function, look how we do it.

33
00:01:56,960 --> 00:01:58,700
It's right, it's a regular function.

34
00:01:59,180 --> 00:02:03,050
We're not accessing a method before we call it, we just executing that function.

35
00:02:03,320 --> 00:02:08,509
And it may seem on the surface that that's a very subtle difference, but it turns out the subtle difference

36
00:02:08,630 --> 00:02:09,830
causes profound effects.

37
00:02:09,830 --> 00:02:10,639
But they may show you why.

38
00:02:10,669 --> 00:02:13,880
Let me just jump to the other screen quickly and show you why this happens.

39
00:02:14,140 --> 00:02:15,350
Oh, I feel your pain.

40
00:02:15,350 --> 00:02:18,080
I know it can be difficult to get you hit around this and what?

41
00:02:18,080 --> 00:02:20,300
It should refer to different areas of your code.

42
00:02:20,300 --> 00:02:24,740
But this is just a very quick, high level overview of this and why it's doing what it's doing.

43
00:02:24,740 --> 00:02:29,220
This is taken an example, and this creates an array with three values in it.

44
00:02:29,240 --> 00:02:30,440
Don't cat and mouse.

45
00:02:31,040 --> 00:02:35,390
And let's just say not our code yet one that we've been working with with our coliform.

46
00:02:35,690 --> 00:02:38,900
And you'll notice when we go and execute that for each method.

47
00:02:39,020 --> 00:02:42,350
As I just said previously, that function is being called as a method.

48
00:02:42,890 --> 00:02:49,760
So we know this in this instance, the confusing, but we all know that this will refer to the array

49
00:02:49,760 --> 00:02:50,540
in this instance.

50
00:02:51,650 --> 00:02:57,200
But when we get our callback function, this is where things get very interesting because JavaScript

51
00:02:57,200 --> 00:03:02,150
handles this very specifically when it comes to calling functions and how they're called.

52
00:03:02,780 --> 00:03:09,680
When we pass a function to the for each method of the array, the value of this is the global object

53
00:03:09,680 --> 00:03:10,130
window.

54
00:03:10,580 --> 00:03:14,450
In other words, IT function will be a method of the object window.

55
00:03:15,110 --> 00:03:17,330
And this is just the way that JavaScript works.

56
00:03:17,600 --> 00:03:23,240
When you have a function that's not being called as a method, then by default, that function is actually

57
00:03:23,240 --> 00:03:29,390
a method of the window object or whatever the global object is, depending on your JavaScript environment.

58
00:03:29,390 --> 00:03:33,270
For example, if you're running a node, the global object isn't the window object.

59
00:03:33,290 --> 00:03:35,810
It's called ironically global.

60
00:03:36,380 --> 00:03:42,380
So we can say that it's kind of like the full each callback method is calling window, not callback.

61
00:03:42,680 --> 00:03:47,390
And that's why when you use this, it's referring to whatever call that callback.

62
00:03:47,390 --> 00:03:52,370
In this case, the window, the window object who accessed this at a very high level.

63
00:03:53,180 --> 00:03:54,410
What's going on in the background?

64
00:03:54,410 --> 00:03:57,590
But the question you probably asking now is, OK, cool, I understand.

65
00:03:57,590 --> 00:03:59,360
But how do we fix the problem?

66
00:03:59,360 --> 00:04:01,340
How do we define what this should refer to?

67
00:04:01,370 --> 00:04:05,090
What about if I wanted this to avert my array, not the window object?

68
00:04:05,600 --> 00:04:08,570
And as it turns out, it's a very simple solution to that.

69
00:04:08,870 --> 00:04:09,560
Let's check it out.

