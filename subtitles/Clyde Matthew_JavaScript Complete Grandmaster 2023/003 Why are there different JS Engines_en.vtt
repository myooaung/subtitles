WEBVTT
1
00:00:02.070 --> 00:00:09.240
To put it very simply, a JavaScript engine is just a program that executes JavaScript code.

2
00:00:10.080 --> 00:00:15.270
The engine, which is embedded in the browser, "reads", and in coding talk 

3
00:00:15.270 --> 00:00:18.000
we just use the word "parses" instead of "reads",

4
00:00:18.690 --> 00:00:21.660
so the engine parses the JavaScript, the script.

5
00:00:22.260 --> 00:00:27.870
It then converts or compiles the script to machine language, and then the machine code runs and it

6
00:00:27.870 --> 00:00:28.890
runs pretty quick.

7
00:00:30.000 --> 00:00:34.050
And the engine applies optimizations on every stage of the process.

8
00:00:34.350 --> 00:00:39.870
It even watches the script as it runs, analyzes the data that flows through it and applies optimizations

9
00:00:39.870 --> 00:00:41.820
to the machine's code based on that knowledge.

10
00:00:42.690 --> 00:00:50.430
And at the end, scripts are quite fast, and you and I have the advantage of Google, Apple and various

11
00:00:50.430 --> 00:00:56.850
others spending millions upon hundreds of millions of dollars developing really fast engines.

12
00:00:57.840 --> 00:01:02.760
And as with most things in the programming community, there's not just one engine.

13
00:01:03.420 --> 00:01:10.530
They are multiple engines out there and each engine, each JavaScript engine, implements a version of

14
00:01:10.530 --> 00:01:11.190
ECMAScript.

15
00:01:11.580 --> 00:01:14.550
And we already know that JavaScript implements that standard.

16
00:01:15.030 --> 00:01:18.360
This means as ECMAScript evolves, so do the engines.

17
00:01:19.410 --> 00:01:25.620
And the reason why they are so many different engines is that each one is designed to work with a different

18
00:01:25.620 --> 00:01:29.280
browser, headless browser, run runtime like Node etc.

19
00:01:30.650 --> 00:01:32.510
Whoa! I just said headless browser.

20
00:01:33.140 --> 00:01:37.100
You probably familiar with a browser, but what's a headless browser?

21
00:01:37.730 --> 00:01:40.940
Well, it's actually a browser without a graphic user interface.

22
00:01:41.600 --> 00:01:44.780
They are useful for running automated tests against your web products.

23
00:01:45.200 --> 00:01:49.940
And where does Node fit into all of this, into the different servers? Node is an asynchronous event

24
00:01:49.940 --> 00:01:53.030
driven framework that allows you to use JavaScript on the server side.

25
00:01:53.480 --> 00:01:58.790
And since they are JavaScript driven tools, they have to be powered by a JavaScript engine.

26
00:01:59.720 --> 00:02:02.180
We know we've got different JavaScript engines.

27
00:02:02.210 --> 00:02:04.880
The question we have is ... which one should we learn?

28
00:02:05.150 --> 00:02:09.139
So here's a quick summary of what engines are used for JavaScript.

29
00:02:10.570 --> 00:02:19.390
And as you can see, V8 is used for Node and Chrome, and because of that reason, I want us to quickly

30
00:02:19.420 --> 00:02:22.600
expand a little on the V8 engine.

