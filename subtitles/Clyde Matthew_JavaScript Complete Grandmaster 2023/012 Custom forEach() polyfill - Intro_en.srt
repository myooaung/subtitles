1
00:00:00,120 --> 00:00:02,100
Great, we know what a fool each does.

2
00:00:02,580 --> 00:00:09,270
Now what I want you to do is assume our browser has no idea what a fool is, say that it's not natively

3
00:00:09,270 --> 00:00:15,060
supported by our browser, so therefore we want to build a poly full on our array prototype.

4
00:00:15,950 --> 00:00:20,390
The first step is going to be actually writing at the beginning of our code, and it was going to look

5
00:00:20,390 --> 00:00:21,080
something like this.

6
00:00:22,070 --> 00:00:27,410
And let me just point out it is on the prototype of our array object.

7
00:00:28,010 --> 00:00:33,530
Then we want to define the for each method we can call it whatever we want, but for our purposes,

8
00:00:33,530 --> 00:00:39,350
I want us to call it for each and we putting it on the prototype of the JavaScript array global object.

9
00:00:39,920 --> 00:00:41,750
We know for each is a method.

10
00:00:41,750 --> 00:00:46,370
That's why we've got the function keyword and that for each method takes two arguments.

11
00:00:46,550 --> 00:00:48,860
The first argument it takes is a callback.

12
00:00:49,970 --> 00:00:56,810
And remember that callback that takes three arguments, it takes the item, the index and the right.

13
00:00:57,320 --> 00:00:58,600
I don't often use the right.

14
00:00:58,610 --> 00:01:03,170
That's why we were only concentrating on the item and the index, but it does actually take three arguments.

15
00:01:03,860 --> 00:01:10,730
And the first thing that we need to test for in our poly form in our custom code is that callback has

16
00:01:10,730 --> 00:01:11,420
to be a function.

17
00:01:12,050 --> 00:01:15,830
It has to be a function that takes these items as its inputs.

18
00:01:16,460 --> 00:01:21,020
So let's switch over to the console and let's start writing our first bit of code.

