WEBVTT
1
00:00:00.090 --> 00:00:06.300
We've looked at the execution context, but before we can start looking at examples, we and we will

2
00:00:06.300 --> 00:00:08.970
look at an example in this actual lecture.

3
00:00:09.450 --> 00:00:14.430
You need to understand a stack because remember how said with a functional execution context, it can

4
00:00:14.430 --> 00:00:16.160
be more than one lane.

5
00:00:16.170 --> 00:00:19.050
It brings in questions about what is a stack and how does it work.

6
00:00:19.320 --> 00:00:26.040
So that's what this brief explanation is about what is an execution stack when it's just a stack, a

7
00:00:26.160 --> 00:00:26.520
list.

8
00:00:26.970 --> 00:00:31.140
It's a list of all the execution contexts that have been created.

9
00:00:31.710 --> 00:00:37.140
The execution stack is known as a calling stack in other languages, so it's awesome is that once you've

10
00:00:37.140 --> 00:00:41.220
nailed this down, you'll be able to understand other languages work as well.

11
00:00:41.550 --> 00:00:44.130
Now, in the engine runs through your code.

12
00:00:44.820 --> 00:00:47.310
It creates a global execution context.

13
00:00:47.310 --> 00:00:54.210
We've already seen this, and when the engine finds a function, it creates a new execution context.

14
00:00:54.480 --> 00:01:01.140
In particular, it creates a functional execution context, and it will push this execution context

15
00:01:01.410 --> 00:01:02.580
to the top of the stack.

16
00:01:03.240 --> 00:01:09.060
And then the JavaScript engine will execute the function whose execution context is at the top of the

17
00:01:09.060 --> 00:01:09.420
stack.

18
00:01:09.660 --> 00:01:13.740
This makes sense, but nothing makes more sense than what's an example.

19
00:01:14.280 --> 00:01:15.060
So let's have a look.

20
00:01:16.210 --> 00:01:18.970
Let's start by saying we've got some JavaScript code.

21
00:01:19.330 --> 00:01:22.960
But before it's even run, let's just say it's even an empty file.

22
00:01:23.560 --> 00:01:24.310
What's going to happen?

23
00:01:25.320 --> 00:01:26.100
Well, that's right.

24
00:01:26.370 --> 00:01:29.310
A global execution context will be created.

25
00:01:29.880 --> 00:01:31.800
And what will this word refer to?

26
00:01:32.190 --> 00:01:36.030
Yes, this will be bound to the global execution context.

27
00:01:36.720 --> 00:01:37.890
This is very intuitive.

28
00:01:37.920 --> 00:01:39.030
It's very simple, right?

29
00:01:39.960 --> 00:01:43.040
It's why I don't need all these fancy words and executions.

30
00:01:43.050 --> 00:01:46.740
Decks and contexts intimidate you once you've got it.

31
00:01:46.830 --> 00:01:47.970
It's actually quite simple.

32
00:01:47.970 --> 00:01:49.530
We just need to look at it piece by piece.

33
00:01:50.140 --> 00:01:52.170
Okay, and now let's write out a function.

34
00:01:52.650 --> 00:01:56.490
We're going to call our function one within function one.

35
00:01:56.490 --> 00:02:01.140
We in a log a statement then, and this is where it's going to get a bit tricky.

36
00:02:01.150 --> 00:02:05.640
We're going to execute another function called to scene.

37
00:02:06.240 --> 00:02:08.940
After that, we're going to console.log another statement.

38
00:02:10.120 --> 00:02:13.540
What's going to happen at this point in terms of execution stakes?

39
00:02:14.110 --> 00:02:16.300
Well, nothing, because nothing needs to be executed.

40
00:02:16.330 --> 00:02:17.950
We've only defined the function here.

41
00:02:17.950 --> 00:02:20.320
Remember, we haven't executed dysfunction.

42
00:02:21.560 --> 00:02:28.130
OK, let's get onto function to then function, too is just going to console.log a statement.

43
00:02:28.760 --> 00:02:31.550
What's going to happen in terms of execution contexts?

44
00:02:32.150 --> 00:02:32.810
Well, that's right.

45
00:02:32.840 --> 00:02:33.230
Nothing.

46
00:02:33.800 --> 00:02:34.140
Why?

47
00:02:34.160 --> 00:02:35.990
Because we haven't invoked our function.

48
00:02:36.110 --> 00:02:37.820
We've just defined it once again.

49
00:02:39.020 --> 00:02:44.750
OK, so at this point, everything's making seeds and the this keyword are still pointing to the global

50
00:02:44.750 --> 00:02:46.040
execution context.

51
00:02:46.700 --> 00:02:50.090
But let's now execute function one.

52
00:02:50.810 --> 00:02:52.550
This is going to do something now.

53
00:02:53.000 --> 00:02:53.760
What's it going to do?

54
00:02:54.470 --> 00:02:56.660
Well, in function, one is executed.

55
00:02:56.900 --> 00:03:00.650
It's going to create a function execution context.

56
00:03:00.770 --> 00:03:05.180
Remember, we've been through this and it's going to push down the global execution context.

57
00:03:06.140 --> 00:03:09.800
So no one is going to be executed on top of the stack.

58
00:03:10.310 --> 00:03:14.120
So JavaScript is going to run whatever at the very top of the stack.

59
00:03:14.600 --> 00:03:16.820
So the first thing JavaScript is going to do is do what?

60
00:03:17.360 --> 00:03:19.310
Yes, it's going to execute the console.

61
00:03:19.310 --> 00:03:22.640
Don't log statement, then what is it going to do?

62
00:03:23.860 --> 00:03:26.500
Oh, yes, it's going to reach to.

63
00:03:27.650 --> 00:03:30.410
And now it's going to execute function, too.

64
00:03:31.340 --> 00:03:33.920
So what does that mean in terms of execution context?

65
00:03:34.880 --> 00:03:36.320
Yep, you guessed it.

66
00:03:36.410 --> 00:03:39.070
It's going to go to the top of the stack.

67
00:03:39.080 --> 00:03:40.400
Everything else be pushed down.

68
00:03:40.580 --> 00:03:42.690
And remember what it means to be at the top of the stack.

69
00:03:42.710 --> 00:03:46.580
It means that that is the function that JavaScript is going to currently be executing.

70
00:03:47.000 --> 00:03:50.120
So the next step is going to be for what it's right.

71
00:03:50.120 --> 00:03:53.990
It's going to be for JavaScript to execute console dialog.

72
00:03:54.440 --> 00:03:57.200
It's going to run that statement and that statement is complete.

73
00:03:57.410 --> 00:04:00.950
What's going to happen will function Tuesday when it's finished.

74
00:04:01.610 --> 00:04:03.830
So it's going to be thrown off the stack function.

75
00:04:03.830 --> 00:04:08.190
One is at the top of the stack and the JavaScript engine knows exactly where it was before.

76
00:04:08.660 --> 00:04:14.690
So now it's going to go to the console.log statement, its third statement and the that function will

77
00:04:14.690 --> 00:04:15.640
be finished.

78
00:04:15.650 --> 00:04:21.290
That will be done and it'll be thrown off the stack and we're going to be left with the global execution

79
00:04:21.290 --> 00:04:21.860
context.

80
00:04:22.670 --> 00:04:27.590
So if we summarize and take a step back, what console.log statements would you expect to see on the

81
00:04:27.590 --> 00:04:32.720
screen in what order or when it hits function, one that's going to be at the top of the stack that

82
00:04:32.720 --> 00:04:38.870
will be shown, then the console log within function two is going to be locked to the screen because

83
00:04:38.870 --> 00:04:41.420
that is going to now be at the top of the stack.

84
00:04:42.540 --> 00:04:46.830
When function two's finished function, one's going to remain and it's going to continue to execute

85
00:04:46.830 --> 00:04:52.560
and it's going to execute the search console that long, it's hard to expect to see console log one,

86
00:04:52.560 --> 00:04:56.130
console load three and then only console.log to print it to the screen.

87
00:04:56.700 --> 00:04:58.200
Hope this is making sense.

88
00:04:58.500 --> 00:05:00.800
I hope you're having fun, but don't stop.

89
00:05:00.810 --> 00:05:01.710
There's a lot more to learn.

