WEBVTT
1
00:00:00.240 --> 00:00:03.180
We're kind of understanding how Visual Studio Code fits in.

2
00:00:03.210 --> 00:00:04.260
Where we write our code.

3
00:00:04.680 --> 00:00:09.510
And you just saw that we put script tags within the body tag of our HTML and we just wrote JavaScript.

4
00:00:10.470 --> 00:00:13.950
Is this the most optimal way? Where do we actually put our JavaScript?

5
00:00:14.700 --> 00:00:18.510
In other words, after I've typed JavaScript, where in my code do I place it?

6
00:00:19.020 --> 00:00:21.480
Eventually, it's gotta be in your HTML, right?

7
00:00:21.660 --> 00:00:24.000
Otherwise, how is your browser ever going to read it?

8
00:00:24.450 --> 00:00:26.890
So that's the most obvious answer - it has to be in your HTML.

9
00:00:26.910 --> 00:00:31.800
But then the question is, will what's the most optimal way for including it in your HTML?

10
00:00:32.630 --> 00:00:33.420
Okay.

11
00:00:33.810 --> 00:00:35.550
And this is where it gets interesting.

12
00:00:36.120 --> 00:00:40.770
In broad terms, there are two places you can include your JavaScript code.

13
00:00:41.070 --> 00:00:47.910
You can include your code (1) inline and (2) you can include your JavaScript code from an external file.

14
00:00:48.390 --> 00:00:49.830
Well, what's better and what does that mean?

15
00:00:50.460 --> 00:00:56.400
Well, firstly inline, all that means is that you literally placing your JavaScript code within your

16
00:00:56.400 --> 00:00:57.810
HTML that you write.

17
00:00:58.140 --> 00:00:59.130
You just saw us use it now, where

18
00:00:59.130 --> 00:01:04.349
I put the script tags and I wrote JavaScript in the HTML document itself.

19
00:01:05.530 --> 00:01:11.140
And within inline, you can either put the JavaScript in the head or in the body. The other place

20
00:01:11.140 --> 00:01:14.710
you can put your JavaScript code is in an external file.

21
00:01:14.920 --> 00:01:19.780
And this is by far the better approach. You'll see later

22
00:01:19.780 --> 00:01:25.600
when your JavaScript starts getting complicated, you want to separate your JavaScript into its own

23
00:01:25.840 --> 00:01:26.440
file.

24
00:01:26.590 --> 00:01:30.970
It's going to be a lot easier for you to follow and to manage, and with complicated websites, you're

25
00:01:30.970 --> 00:01:32.440
going to have many JavaScript files.

26
00:01:33.480 --> 00:01:33.900
Great.

27
00:01:34.050 --> 00:01:39.150
So we've determined that they are two broad categories of how you can include your JavaScript code in

28
00:01:39.150 --> 00:01:39.840
your web page.

29
00:01:40.140 --> 00:01:42.000
It's (1) inline and (2) external.

30
00:01:42.420 --> 00:01:47.040
Inline has two categories, so you could say stepping back there are 3 broad places you can put your JavaScript

31
00:01:47.040 --> 00:01:49.890
code. By far the best is external.

32
00:01:52.030 --> 00:01:59.020
Something I briefly want to discuss is how do you include your JavaScript code in your HTML?

33
00:01:59.860 --> 00:02:06.850
The first thing you need to know is that all JavaScript has to be inserted between the script tag.

34
00:02:07.360 --> 00:02:11.260
It's all fair and well to say we need a script tag, but where do we put the script tag?

35
00:02:12.540 --> 00:02:19.970
Well, think about your HTML page that gets loaded. All browsers have to start with an HTML file,

36
00:02:19.980 --> 00:02:22.290
this is where they start parsing your whole website,

37
00:02:22.740 --> 00:02:27.570
so you need to include your script tags somewhere within this document.

38
00:02:28.350 --> 00:02:31.650
And don't worry too much now about where exactly we put it

39
00:02:31.650 --> 00:02:37.380
just realize there's two broad categories of places you can put your script. No matter what form you

40
00:02:37.380 --> 00:02:41.550
use, whether it's inline or an external file, regardless

41
00:02:41.820 --> 00:02:46.470
you have to have script tags somewhere within this HTML file.

42
00:02:47.870 --> 00:02:48.990
And what does it look like?

43
00:02:49.010 --> 00:02:54.230
Well, let's assume you wanting to just write very basic JavaScript and you wanting to put it all within

44
00:02:54.230 --> 00:02:55.040
your HTML.

45
00:02:56.100 --> 00:02:57.000
What do we need first?

46
00:02:57.090 --> 00:02:57.610
Well, that's right, 

47
00:02:57.630 --> 00:03:00.030
we have to have the script tags.

48
00:03:01.340 --> 00:03:05.420
And your JavaScript code is written in between those two script tags.

49
00:03:07.400 --> 00:03:08.840
And why do we need script tags?

50
00:03:09.200 --> 00:03:15.170
Well, just think about it like this, when the browser sees that script tag, it knows that the code

51
00:03:15.170 --> 00:03:17.270
between them is JavaScript.

52
00:03:17.810 --> 00:03:20.420
That is the default behavior of all modern browsers.

53
00:03:20.900 --> 00:03:25.760
So that's inline JavaScript, where you write your code in between the two script tags and you have

54
00:03:25.760 --> 00:03:28.070
to include it somewhere within your HTML file.

55
00:03:28.700 --> 00:03:33.240
The second way you can write JavaScript is in an external file, and it's not scary.

56
00:03:33.260 --> 00:03:35.570
All it is, is it's a separate file.

57
00:03:35.570 --> 00:03:41.340
You create another file that doesn't include your HTML, it just includes your JavaScript, and you just reference

58
00:03:41.340 --> 00:03:44.060
that file from your HTML document.

59
00:03:44.990 --> 00:03:48.500
Because remember, your script tags have to be in your HTML document somewhere.

60
00:03:49.130 --> 00:03:56.150
So here's what it looks like when you reference an external file. And here's some interesting knowledge.

61
00:03:57.170 --> 00:04:02.990
Did you know that if you do include JavaScript between the script tags and you reference an external

62
00:04:02.990 --> 00:04:07.490
file, the code between script tags will be ignored.

63
00:04:08.260 --> 00:04:13.160
It would be pointless you putting it there because you've told the browser that when it encounters a script

64
00:04:13.160 --> 00:04:17.180
tag, it must interpret JavaScript from a file.

65
00:04:17.810 --> 00:04:25.250
And what file is that? Well, in our case, we've called it main.js, and you'll see this in the course

66
00:04:25.250 --> 00:04:26.960
that you can call that file whatever you like.

67
00:04:27.410 --> 00:04:33.530
And the default behavior is that the browser will look for that main.js file in the same directory,

68
00:04:34.070 --> 00:04:38.660
that means in the same folder structure where your index.html file is found.

69
00:04:40.220 --> 00:04:40.850
Let's move on.

