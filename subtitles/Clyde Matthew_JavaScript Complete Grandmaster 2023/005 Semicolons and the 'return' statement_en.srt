1
00:00:00,460 --> 00:00:10,660
Semicolons. Let's try and related it to English again. In English, a written paragraph is made up of many

2
00:00:10,930 --> 00:00:11,620
sentences.

3
00:00:12,640 --> 00:00:17,800
We don't talk like this in programming languages. In JavaScript, instead of a paragraph,

4
00:00:18,520 --> 00:00:27,910
we have a program, and instead of a sentence, we have statements. So we could replace that whole statement

5
00:00:27,910 --> 00:00:30,160
with this: In JavaScript,

6
00:00:30,550 --> 00:00:32,890
a program is made up of many statements.

7
00:00:32,890 --> 00:00:37,270
Just like in English, a paragraph is made up of many sentences.

8
00:00:38,570 --> 00:00:46,790
In English, a sentence ends with a full stop. In JavaScript, each statement ends with a semicolon.

9
00:00:47,930 --> 00:00:58,190
Now JavaScript has a very kind of C-like syntax, and you might see and you will see lots of code samples

10
00:00:58,190 --> 00:01:00,890
that feature semicolons at the end of each line.

11
00:01:01,730 --> 00:01:08,030
But please don't get me wrong, semicolons are not mandatory, and JavaScript doesn't have a problem

12
00:01:08,030 --> 00:01:09,440
with code that does not use them.

13
00:01:10,310 --> 00:01:15,830
And in my experience, many modern developers, especially those coming from languages that don't require

14
00:01:15,830 --> 00:01:19,130
semicolons, have started to avoid using them.

15
00:01:20,380 --> 00:01:24,490
Now, not to say that there won't be any consequences of you not using them.

16
00:01:24,970 --> 00:01:31,060
You just need to avoid doing strange things like typing statements and turning things on different lines,

17
00:01:31,420 --> 00:01:36,970
then it will mess up the execution, but 99.9% of the time, you'll be fine.

18
00:01:37,990 --> 00:01:43,420
What do I mean when I say you need to just be careful with semicolons - that only works 99.9%

19
00:01:43,420 --> 00:01:44,230
of the time?

20
00:01:45,240 --> 00:01:45,840
Well,

21
00:01:47,260 --> 00:01:48,790
there's nothing better than with an example.

22
00:01:48,970 --> 00:01:49,600
Let me show you.

23
00:01:49,760 --> 00:01:51,790
So let's go to, I dunno, JSBin.

24
00:01:54,050 --> 00:01:55,190
JSBin.

25
00:01:59,290 --> 00:02:00,940
This is how easy these programs are.

26
00:02:02,190 --> 00:02:09,750
I've just selected the JavaScript tab and let me show you what I mean by having to be careful with semicolons.

27
00:02:09,770 --> 00:02:12,750
So if we have a function, let's just call it test.

28
00:02:13,920 --> 00:02:15,150
And that function does nothing.

29
00:02:15,630 --> 00:02:16,950
And we 

30
00:02:20,450 --> 00:02:23,180
write to the document, and we execute the function.

31
00:02:24,270 --> 00:02:28,290
And we're going to get into functions later. Just now realize in order to execute a function, you need

32
00:02:28,560 --> 00:02:30,180
2 curly braces,

33
00:02:30,660 --> 00:02:35,430
so that's why we had to write test, which is what we've called our function, and we've had to put the

34
00:02:35,430 --> 00:02:36,480
two brackets around it.

35
00:02:37,910 --> 00:02:40,250
You can see here on the screen, it's undefined.

36
00:02:41,370 --> 00:02:43,470
Now, let me get rid of these semicolons.

37
00:02:45,010 --> 00:02:49,870
And you can see we still have undefined, there's no other syntax errors that are coming up.

38
00:02:50,170 --> 00:02:51,550
But this is important for you to know.

39
00:02:51,670 --> 00:02:55,690
Firstly, every function in JavaScript has to return something.

40
00:02:56,530 --> 00:03:01,180
In this case, our function that we've named "test" returns absolutely nothing.

41
00:03:01,750 --> 00:03:07,210
And what that means in JavaScript when it returns nothing, is that it returns undefined, which is

42
00:03:07,210 --> 00:03:10,000
what we've written on the screen here, which is what you can see.

43
00:03:11,080 --> 00:03:13,930
So let's now say that it returns something.

44
00:03:14,500 --> 00:03:15,740
So let's go within our function,

45
00:03:15,770 --> 00:03:22,000
and you can imagine on a complex website that we've got complicated code, we've got function calls,

46
00:03:22,000 --> 00:03:25,000
callbacks and then at the very end it returns something.

47
00:03:25,000 --> 00:03:26,860
And let's say in this case, it returns "true". 

48
00:03:29,200 --> 00:03:34,180
So you can see, when we write that out, the result is true, which is what we would expect.

49
00:03:35,020 --> 00:03:35,580
What about if

50
00:03:35,590 --> 00:03:39,640
the result is "1 + 5"? Well, we would expect

51
00:03:39,640 --> 00:03:40,060
six.

52
00:03:40,870 --> 00:03:48,250
But this is why I'm saying you just got to be careful of whitespaces & semicolons, sometimes. Let's say I put

53
00:03:48,250 --> 00:03:49,180
this on a new line.

54
00:03:52,530 --> 00:03:58,680
Your first intuition might be thinking, well, JavaScript doesn't care about whitespace, so we could

55
00:03:58,680 --> 00:04:03,840
do this. But you can't do that, because what JavaScript interprets this as being is it interprets it

56
00:04:03,840 --> 00:04:07,170
being this when it sees that return word.

57
00:04:07,830 --> 00:04:10,980
So just be careful. It's something to watch out for.

