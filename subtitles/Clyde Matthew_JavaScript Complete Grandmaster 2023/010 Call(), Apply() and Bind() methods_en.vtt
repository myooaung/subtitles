WEBVTT
1
00:00:00.330 --> 00:00:01.800
Now I want to get into some examples.

2
00:00:02.100 --> 00:00:05.610
Firstly, I want to look at cool and apply it very similar to each other.

3
00:00:05.670 --> 00:00:07.470
They are immediately invoked.

4
00:00:07.620 --> 00:00:11.610
They just differ slightly in how you pass through arguments.

5
00:00:11.640 --> 00:00:12.510
Let me show you what I mean.

6
00:00:13.080 --> 00:00:15.450
So here we're going to be looking at cool.

7
00:00:17.270 --> 00:00:18.460
And lot.

8
00:00:19.600 --> 00:00:23.500
And it startles by airing a function.

9
00:00:28.150 --> 00:00:32.430
And this is a very simple function, all it does is it adds numbers.

10
00:00:33.100 --> 00:00:33.730
There's a catch.

11
00:00:34.510 --> 00:00:35.710
It's console.log.

12
00:00:36.330 --> 00:00:38.320
A a c that's.

13
00:00:39.150 --> 00:00:40.680
The C plus this.

14
00:00:41.580 --> 00:00:43.830
D, what do you think would happen here?

15
00:00:44.730 --> 00:00:47.850
Remember how we've been through in previous lectures, coercion?

16
00:00:48.940 --> 00:00:51.250
What's going to happen here, Wolf, that see?

17
00:00:52.420 --> 00:00:53.590
That's Ed one and two.

18
00:00:54.370 --> 00:00:56.770
The result is going to be in a not a no.

19
00:00:57.370 --> 00:00:57.850
Why?

20
00:00:58.030 --> 00:01:04.480
Because we adding a number to something that doesn't exist, this does see is what if we remove this

21
00:01:04.480 --> 00:01:07.650
function just further down and we go, this takes.

22
00:01:12.650 --> 00:01:13.970
It's control of the Senate.

23
00:01:18.200 --> 00:01:23.540
We get a value of undefined because we haven't defined what is just doesn't make sense.

24
00:01:24.050 --> 00:01:30.560
So you can't add a number an undefined is going to give you in a n great that makes sense for the moment.

25
00:01:30.950 --> 00:01:32.140
So how do we use apply?

26
00:01:32.180 --> 00:01:33.050
How do we use coal?

27
00:01:33.990 --> 00:01:41.450
Remember what I said that you can use these mechanics to manually tell the engine what this should refer

28
00:01:41.450 --> 00:01:41.630
to.

29
00:01:42.110 --> 00:01:52.100
All I want to do here is let's create a new object with properties, with properties C and D, so listed

30
00:01:52.100 --> 00:01:52.820
are object.

31
00:01:53.960 --> 00:01:54.950
Has two properties.

32
00:01:55.790 --> 00:01:56.950
And that's make that team.

33
00:01:57.690 --> 00:01:59.000
Indeed, it's my between.

34
00:02:01.370 --> 00:02:07.700
When we execute this function, this end one and two, we wanting to tell JavaScript that we wanted

35
00:02:07.700 --> 00:02:10.160
this keyword to refer to this object.

36
00:02:11.150 --> 00:02:11.960
How do we do that?

37
00:02:13.380 --> 00:02:14.730
Well, let's use.

38
00:02:16.030 --> 00:02:17.950
The cool method.

39
00:02:19.870 --> 00:02:21.670
So how do we use the cool method?

40
00:02:21.850 --> 00:02:26.360
Well, the first thing we need to do is we need to call our function.

41
00:02:26.380 --> 00:02:27.670
We want to execute ED.

42
00:02:28.510 --> 00:02:31.780
Now we want it executed via the call method.

43
00:02:31.990 --> 00:02:37.310
And you can really see my ideas picked it up and it defines it tells you what it does.

44
00:02:37.360 --> 00:02:43.960
In this instance, my saying that it calls a method of an object substituting another object for the

45
00:02:43.960 --> 00:02:44.680
current object.

46
00:02:45.370 --> 00:02:51.730
I know it's very witty, but all we wanting to do is we're going to call the first parameter we need

47
00:02:51.730 --> 00:02:52.330
to pass in.

48
00:02:52.330 --> 00:02:53.680
Here is the object.

49
00:02:53.680 --> 00:02:56.800
We want this to refer to which in our cases object.

50
00:02:57.710 --> 00:03:02.270
And then the next two parameters are what we have to pass into our function, which in this case is

51
00:03:02.270 --> 00:03:08.480
a and b, which we suppose was one and two, and boom, it works.

52
00:03:08.870 --> 00:03:17.150
That's concealed logged the number 53 to the console, which is 20 plus 10, which is CND plus one and

53
00:03:17.150 --> 00:03:17.450
two.

54
00:03:18.200 --> 00:03:22.310
So it works, and we can do the same thing by using.

55
00:03:26.270 --> 00:03:30.980
Again, we start off by calling the function we want to execute.

56
00:03:32.120 --> 00:03:40.280
Now we want to apply the apply method in the first argument is the object we want this to refer to,

57
00:03:40.280 --> 00:03:41.210
which is o'bagy.

58
00:03:41.660 --> 00:03:47.690
But now, instead of passing each argument via comma separated lists, we have to put it in an array.

59
00:03:48.170 --> 00:03:48.950
It's the only difference.

60
00:03:49.760 --> 00:03:53.630
Now we loaded out and again we get console logged up.

61
00:03:53.760 --> 00:03:54.350
33.

62
00:03:54.920 --> 00:03:58.670
So you can see the many ways in JavaScript to do exactly the same thing.

63
00:03:59.680 --> 00:04:00.880
All is awesome.

64
00:04:01.390 --> 00:04:05.590
But what about By-nd, who find is an interesting one?

65
00:04:05.710 --> 00:04:09.970
It works very similar to call an apply, but it's not invoked immediately.

66
00:04:10.510 --> 00:04:18.220
Instead, Biden returns a function with this bond already, and because of this find is useful when

67
00:04:18.220 --> 00:04:19.940
we don't know all the arguments up front.

68
00:04:19.959 --> 00:04:21.910
We only get to know them later on in our code.

69
00:04:22.820 --> 00:04:26.290
Well, let me give you an example of how by-nd works and help you understand a lot better.

70
00:04:27.470 --> 00:04:28.630
So let's delete all this code.

71
00:04:29.530 --> 00:04:33.300
And now let me write a comment here saying using find.

72
00:04:33.880 --> 00:04:35.680
Let's start off by saying we've got a user.

73
00:04:37.480 --> 00:04:41.710
And this user in his account has a balance of zero.

74
00:04:43.540 --> 00:04:49.690
And we wanted to find a method on this user where we can display these details and display the balance.

75
00:04:53.900 --> 00:04:56.150
And this function, I just want to pass through.

76
00:04:56.450 --> 00:05:01.220
I don't know the user's first name, last name and age.

77
00:05:03.580 --> 00:05:07.360
And then we went to console.log to the screen with tinted literal syntax.

78
00:05:10.980 --> 00:05:11.820
First name.

79
00:05:13.530 --> 00:05:15.270
Last name is.

80
00:05:16.410 --> 00:05:16.890
Age.

81
00:05:18.330 --> 00:05:23.460
Is that how many years old and has a balance of.

82
00:05:25.290 --> 00:05:26.910
This balance.

83
00:05:30.490 --> 00:05:34.660
The first thing I want you to bear in mind is that within this function, call first name, last name,

84
00:05:34.660 --> 00:05:40.060
age, we don't have to use of this keyword because we really have that variable available to us right

85
00:05:40.060 --> 00:05:40.750
from the function.

86
00:05:41.200 --> 00:05:45.170
When we come to balance, we have to use this keyword.

87
00:05:45.190 --> 00:05:51.880
This is why this keyword becomes important, because this we already know we declared in an object is

88
00:05:51.880 --> 00:05:54.700
going to refer to the user object.

89
00:05:55.360 --> 00:05:55.990
We know that.

90
00:05:56.080 --> 00:06:00.610
So it's going to be referring to this balance of, yeah, makes sense.

91
00:06:01.690 --> 00:06:02.020
Great.

92
00:06:02.630 --> 00:06:05.080
But let's say this user wants to top up his balance.

93
00:06:05.260 --> 00:06:09.400
So let's just have another object called top top up.

94
00:06:09.730 --> 00:06:10.240
Then it's.

95
00:06:12.730 --> 00:06:16.510
And this tapas balance has a large balance of one hundred.

96
00:06:19.110 --> 00:06:20.340
Great, so you with me so far.

97
00:06:20.850 --> 00:06:24.990
Now it's access the user and just execute the show.

98
00:06:25.780 --> 00:06:26.290
Function.

99
00:06:28.590 --> 00:06:29.700
Two names, John.

100
00:06:30.800 --> 00:06:34.100
Go and say he's aged 35.

101
00:06:35.080 --> 00:06:36.580
What is console.log to the screen?

102
00:06:37.390 --> 00:06:40.000
Well, it's all good, John Doe's 34s.

103
00:06:41.630 --> 00:06:47.840
Is thirty five years old and has a balance of zero.

104
00:06:48.950 --> 00:06:49.430
Awesome.

105
00:06:49.430 --> 00:06:50.540
So so far, so good.

106
00:06:50.880 --> 00:06:53.080
Images Zoom answers can fit in one screen.

107
00:06:53.090 --> 00:06:53.540
There go.

108
00:06:55.000 --> 00:06:57.910
But now what about if we want to use top up balance instead?

109
00:06:58.780 --> 00:07:01.750
We want to do this to refer to top up villains.

110
00:07:02.710 --> 00:07:05.290
Well, yes, you're probably thinking we can use cool and we can.

111
00:07:06.460 --> 00:07:07.260
I'll show you how.

112
00:07:07.530 --> 00:07:08.590
Remember how we use coal?

113
00:07:08.710 --> 00:07:10.420
We have the access object.

114
00:07:12.040 --> 00:07:18.410
We want to execute the show function, but in this instance, we want to call it referencing top up

115
00:07:18.410 --> 00:07:20.880
balance is this key word.

116
00:07:21.730 --> 00:07:24.310
And then again, we've got a pass in John.

117
00:07:29.260 --> 00:07:30.120
And he's 35.

118
00:07:31.590 --> 00:07:35.550
And it's just delete this previous call, so we don't get confused.

119
00:07:35.760 --> 00:07:36.400
And there you go.

120
00:07:36.420 --> 00:07:39.500
John Doe's 35 years old and a balance of 100.

121
00:07:40.110 --> 00:07:40.610
Awesome.

122
00:07:40.620 --> 00:07:47.310
So we've used it by the call method and this is fine if we know that his name is John is surnames.

123
00:07:47.310 --> 00:07:49.140
Jones age 35 immediately.

124
00:07:49.140 --> 00:07:51.000
But sometimes and remember, that's what I said.

125
00:07:51.690 --> 00:07:56.640
It's awesome using the by-nd keyword when we don't always know what the arguments are going to be.

126
00:07:57.750 --> 00:07:58.080
So.

127
00:07:59.180 --> 00:08:00.350
How would we use Bond?

128
00:08:00.470 --> 00:08:06.500
Well, remember what we said, Biden returns a function, so let's define a variable called let.

129
00:08:07.440 --> 00:08:09.120
Bind user equal.

130
00:08:09.210 --> 00:08:11.510
And this is how we use Bond again.

131
00:08:11.820 --> 00:08:13.170
We call the use object.

132
00:08:13.710 --> 00:08:15.570
We now want to execute the show function.

133
00:08:16.230 --> 00:08:20.190
Now we want to use Bine and we want to bind top up balance.

134
00:08:22.440 --> 00:08:23.630
So let's delete this call.

135
00:08:24.120 --> 00:08:25.050
We don't get confused.

136
00:08:26.410 --> 00:08:26.710
Great.

137
00:08:26.770 --> 00:08:34.510
Now you can imagine you can do extra function calls, you can do a lot more code here, so more code

138
00:08:34.510 --> 00:08:37.900
here, you can do more things code here.

139
00:08:38.850 --> 00:08:42.240
And maybe only then do we have the user name and his age.

140
00:08:42.570 --> 00:08:50.160
So what we can easily do now is we can call the bond user, but we can post and John, we can pass in

141
00:08:50.610 --> 00:08:50.990
though.

142
00:08:52.280 --> 00:08:54.280
And we can pass in his age of 35.

143
00:08:55.830 --> 00:09:02.880
And Uche Shaka Laka, we have done as John Doe is 35 years old and he has a balance of 100.

144
00:09:03.270 --> 00:09:04.860
And this is why buy-in is useful.

145
00:09:05.010 --> 00:09:06.510
It gives us more flexibility.

146
00:09:07.050 --> 00:09:10.620
I hope this section has been really informative and fun.

