1
00:00:01,430 --> 00:00:06,890
Before we move on to other code, I want to jump back to the console object that we were dealing with

2
00:00:06,890 --> 00:00:12,390
previously because it really is something that you will encounter all the time in JavaScript.

3
00:00:12,410 --> 00:00:15,290
So I want you to really have a solid understanding of what it is.

4
00:00:16,309 --> 00:00:21,770
We know that the console object is primarily used to log text and other data to the screen.

5
00:00:22,130 --> 00:00:26,810
Okay, we've seen some of that, and many properties on the console object.

6
00:00:27,500 --> 00:00:30,770
And the most popular we've been through is logging stuff to the screen.

7
00:00:31,900 --> 00:00:37,510
And remember, to execute a function, you have to use parentheses, so that's why we always go

8
00:00:37,510 --> 00:00:42,790
console.log(), and within the parentheses we included a string literal.

9
00:00:43,710 --> 00:00:47,220
But console.log is not the only method available to us.

10
00:00:47,400 --> 00:00:51,000
There are four categories of output you can generate in JavaScript.

11
00:00:52,270 --> 00:00:57,700
It's console.log(), console.info(), console.warn() and console.error().

12
00:00:58,150 --> 00:01:02,490
So, let's quickly go over some of these so that we can get some flavor as to the differences between them.

13
00:01:02,500 --> 00:01:07,180
So let's get into some more awesome console methods that you may find useful.

14
00:01:07,960 --> 00:01:10,660
So let's type here console

15
00:01:10,660 --> 00:01:11,690
console.log(). 

16
00:01:11,740 --> 00:01:14,730
We've already seen dog, let's say "log dog"

17
00:01:16,280 --> 00:01:18,050
just because it rhymes.

18
00:01:18,710 --> 00:01:23,690
Another pro tip is if you don't wanna execute this code but you want to keep writing JavaScript, you can push shift

19
00:01:23,930 --> 00:01:25,820
enter, okay. It goes to the next line. 

20
00:01:26,450 --> 00:01:28,910
Now, let's try our hand at info.

21
00:01:30,350 --> 00:01:32,930
Let's say info info.

22
00:01:35,000 --> 00:01:35,630
That's now do

23
00:01:36,900 --> 00:01:37,350
warn.

24
00:01:43,730 --> 00:01:45,770
And the last one is ... error.

25
00:01:53,830 --> 00:02:00,910
And, you can tell they all work exactly the same way - you just pass one argument to all of these,

26
00:02:00,910 --> 00:02:01,510
one or more,

27
00:02:01,900 --> 00:02:07,570
we've just passed one argument, which means that we can just pass one string of text into each one and

28
00:02:07,570 --> 00:02:08,100
then they will both,

29
00:02:08,370 --> 00:02:12,370
they will all print to the screen, but in different ways, which is what you'll see now.

30
00:02:14,430 --> 00:02:14,760
Here you go. 

31
00:02:16,590 --> 00:02:23,370
Now you might be thinking, "well what is the visual difference in representation between console.log 

32
00:02:23,820 --> 00:02:25,410
and console.info?"

33
00:02:26,100 --> 00:02:31,230
You can see that warning and error clearly have different visual references, which is useful for you and I because

34
00:02:31,500 --> 00:02:36,600
in different parts of your code, you might want to have different kinds of warnings, which is why that's

35
00:02:36,600 --> 00:02:39,570
awesome, but there's not really any difference between those two.

36
00:02:39,750 --> 00:02:43,820
And yes, you are right, there isn't a difference between those two in the console. But you don't

37
00:02:43,830 --> 00:02:45,930
only use error messages in the console.

38
00:02:46,110 --> 00:02:50,060
You can also use error messages with Node and you can use it with ESLint.

39
00:02:50,070 --> 00:02:51,120
As all ESLint is,

40
00:02:51,120 --> 00:02:53,820
by  the way, is it's a program that checks your code.

41
00:02:54,980 --> 00:03:00,890
So what I'm trying to get at is within those pieces of software, it will come up with different colors

42
00:03:00,890 --> 00:03:02,360
or it can come up as different colors.

43
00:03:02,930 --> 00:03:07,620
So you may want to use it in those scenarios, but for our purposes, it doesn't matter.

44
00:03:07,640 --> 00:03:11,810
And 99% of the time you're probably going to use console.log anyway.

