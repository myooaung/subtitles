1
00:00:00,210 --> 00:00:04,410
Now, before we move on, we're just going to have a quick look at the types of functions.

2
00:00:04,890 --> 00:00:05,910
Remember what objects?

3
00:00:05,910 --> 00:00:08,670
There were different ways to create an objects with little rules.

4
00:00:08,670 --> 00:00:10,890
We had constructors, we had to create method.

5
00:00:10,890 --> 00:00:11,640
We had the class.

6
00:00:12,210 --> 00:00:13,260
Well, the same with functions.

7
00:00:13,260 --> 00:00:15,690
We've got different ways to create a function.

8
00:00:16,200 --> 00:00:22,590
But what's nicer is that here it's a bit more simple because there are only two ways to define a function

9
00:00:22,590 --> 00:00:23,430
in JavaScript.

10
00:00:23,970 --> 00:00:26,790
We've got a declaration and we have an expression.

11
00:00:28,360 --> 00:00:32,920
The declaration we've been seeing often through our examples is when we have the function key word,

12
00:00:33,460 --> 00:00:35,020
then we have the name of our function.

13
00:00:35,020 --> 00:00:40,810
He had to say, Hi, we've got the parentheses, we pass in the parameter and then we've got the curly

14
00:00:40,810 --> 00:00:42,980
braces where we actually define our function here.

15
00:00:43,000 --> 00:00:46,300
We just defining high name by using template literals.

16
00:00:46,840 --> 00:00:48,430
So that's a function declaration.

17
00:00:48,640 --> 00:00:50,860
Well, how would we write the same function?

18
00:00:51,190 --> 00:00:53,350
But using a function expression?

19
00:00:54,460 --> 00:01:01,000
Well, yeah, you can see how some ladies we just define a variable called say hi and we assign that

20
00:01:01,270 --> 00:01:01,870
the function.

21
00:01:02,470 --> 00:01:07,060
You can see in both instances we have to use the function keyword.

22
00:01:07,480 --> 00:01:09,820
These these arrows and text, which we're going to get on to.

23
00:01:09,820 --> 00:01:15,070
But before we get onto that, you can see the traditional way to create both functions meant that we

24
00:01:15,070 --> 00:01:16,510
had to use the function keyword.

25
00:01:17,650 --> 00:01:20,290
So let's just dive into these in a bit more detail.

26
00:01:20,440 --> 00:01:25,180
We've got a function declaration on the left and we've got a function expression on the right and the

27
00:01:25,180 --> 00:01:26,290
meaning of both.

28
00:01:26,290 --> 00:01:28,750
These functions are exactly the same.

29
00:01:29,290 --> 00:01:34,630
And by that, I just mean that both create a function and they stole that function in a variable.

30
00:01:35,050 --> 00:01:37,210
Yeah, we've called the variable so high.

31
00:01:38,020 --> 00:01:41,650
So then you're probably asking, well, then why have one method over the other?

32
00:01:41,660 --> 00:01:48,010
And the answer is there's a more subtle difference, and that difference is the timing of when the function

33
00:01:48,010 --> 00:01:48,640
is created.

34
00:01:49,640 --> 00:01:56,000
And a function can be created immediately or later, and with a function declaration, it's created

35
00:01:56,000 --> 00:01:58,400
immediately and with a functional expression.

36
00:01:58,400 --> 00:02:00,410
It's only created when it's called.

37
00:02:01,620 --> 00:02:05,610
And I'm going to show you examples of what this means in the next election, so don't worry if you don't

38
00:02:05,610 --> 00:02:07,080
fully understand what this means now.

39
00:02:07,330 --> 00:02:09,030
But just had a very, very high level.

40
00:02:09,120 --> 00:02:13,860
It just means with the function declaration, you can actually call the function even though you've

41
00:02:13,860 --> 00:02:15,480
defined it later on in your code.

42
00:02:16,290 --> 00:02:19,800
OK, but now let's look at function, expressions and a little bit more detail.

43
00:02:20,010 --> 00:02:23,910
The first thing you'll notice is that you can store the function in a variable.

44
00:02:24,390 --> 00:02:25,470
We've called it say hi.

45
00:02:26,100 --> 00:02:31,710
And the other thing to bear in mind is that with function expressions, do you notice how we don't give

46
00:02:31,710 --> 00:02:33,060
the actual function a name?

47
00:02:33,660 --> 00:02:37,980
Look at the function declaration when we say function, and we followed it by the function name called

48
00:02:37,980 --> 00:02:38,490
say hi.

49
00:02:39,740 --> 00:02:47,600
Yeah, we just define a function well in programming jargon that's just known as an anonymous function.

50
00:02:47,780 --> 00:02:49,280
It's just a function without a name.

51
00:02:49,580 --> 00:02:52,220
We kind of have given it a name because we put it in a variable.

52
00:02:52,280 --> 00:02:56,210
But we haven't directly given the function a name like we have with a function declaration.

53
00:02:56,930 --> 00:03:03,620
And one of the other massive advantages with a function expression is an iffy and again, Duncan intimidated

54
00:03:03,620 --> 00:03:04,550
by these weird words.

55
00:03:04,550 --> 00:03:09,710
All that means is that when you want to use a function, once you often do it via a method called ifie,

56
00:03:09,830 --> 00:03:12,590
immediately invoked function expression.

57
00:03:12,920 --> 00:03:17,630
That's what it stands for, and I don't want to be getting into immediately invoked function expressions

58
00:03:17,630 --> 00:03:18,200
right now.

59
00:03:18,200 --> 00:03:22,640
But if you're anything like me, you're going to want to be curious as to what this actually means for

60
00:03:22,640 --> 00:03:24,170
the sake of scratching that itch.

61
00:03:24,470 --> 00:03:30,380
Let me just give you a quick example say we have a paragraph element with an idea of taste in our HTML,

62
00:03:30,650 --> 00:03:37,220
and all we want to do is we want JavaScript to run code that places a string called a yay in that paragraph.

63
00:03:37,490 --> 00:03:38,720
How do we go about doing that?

64
00:03:39,080 --> 00:03:41,930
Well, of course, we first need to start off with a script tech.

65
00:03:42,410 --> 00:03:45,320
Then let's define a function expression.

66
00:03:45,410 --> 00:03:47,110
We are not doing a declaration here.

67
00:03:47,120 --> 00:03:48,560
We're doing a function expression.

68
00:03:48,950 --> 00:03:54,500
We're going to access JavaScript Document Object, which is your overall web page.

69
00:03:55,100 --> 00:04:00,320
And then on that document, we automatically get access to a gate element by ID method.

70
00:04:01,070 --> 00:04:06,440
The ID we want to get is taste and then we want to changes in the HTML to yeah.

71
00:04:06,950 --> 00:04:07,550
So there you go.

72
00:04:07,550 --> 00:04:09,080
There's our function expression.

73
00:04:09,860 --> 00:04:12,140
We closed the script tag and we done.

74
00:04:12,140 --> 00:04:15,020
But the problem with this is we haven't called this function heavy.

75
00:04:15,530 --> 00:04:17,269
We've now just defined a function expression.

76
00:04:17,810 --> 00:04:23,210
So with an immediately invoked function expression, we want to tell the engine to run this immediately

77
00:04:23,390 --> 00:04:24,200
automatically.

78
00:04:24,710 --> 00:04:31,670
How we go about doing that will all you have to do is you have to close your code in parentheses and

79
00:04:31,670 --> 00:04:36,860
then you go, you've told JavaScript this is an iffy and to execute a function, remember what we had

80
00:04:36,860 --> 00:04:37,190
to do?

81
00:04:37,640 --> 00:04:38,210
That's right.

82
00:04:38,210 --> 00:04:42,540
We had to follow that function by parentheses, and it's the same thing with an iffy.

83
00:04:43,160 --> 00:04:46,550
So you follow the function with parentheses and Bob's your uncle.

84
00:04:46,910 --> 00:04:50,030
You've just created your first self invoking function.

85
00:04:50,690 --> 00:04:56,390
So let me show you a few examples now practical examples of the differences between an expression and

86
00:04:56,390 --> 00:04:57,620
a function declaration.

