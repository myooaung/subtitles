WEBVTT
1
00:00:01.160 --> 00:00:06.680
We've looked at compiled code, we've looked at interpreted code, but there is a third way of doing

2
00:00:06.680 --> 00:00:08.540
this, which is a bit of both.

3
00:00:08.870 --> 00:00:14.060
Instead of the compile model where all the work is done upfront, it can be a little bit inflexible,

4
00:00:14.750 --> 00:00:19.540
or the interpreted model where all the work is done on the receiving end, but it can be a little bit slower.

5
00:00:19.550 --> 00:00:20.960
We kind of do half and half.

6
00:00:22.010 --> 00:00:24.830
So what do I mean by this? Well, I kind of mean that upfront

7
00:00:24.830 --> 00:00:29.570
we compile it part of the way to what's called an intermediate language.

8
00:00:29.810 --> 00:00:36.770
And this takes it as far along the way to machine code as it can get while still being portable, often

9
00:00:36.770 --> 00:00:37.550
across platforms.

10
00:00:38.360 --> 00:00:42.260
You can then distribute this, sending it to the people who need to run it, and each person who runs it

11
00:00:42.260 --> 00:00:46.490
takes the last step to convert it into machine code on their computers.

12
00:00:48.430 --> 00:00:54.400
An intermediate language is also sometimes referred to as a Just-In-Time or JIT Compilation, and

13
00:00:54.400 --> 00:00:56.920
it sometimes also goes by the name of Bytecode.

