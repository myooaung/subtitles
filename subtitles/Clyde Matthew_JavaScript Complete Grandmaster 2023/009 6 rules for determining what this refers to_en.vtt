WEBVTT
1
00:00:00.150 --> 00:00:00.550
Wow.

2
00:00:00.780 --> 00:00:02.820
Okay, we've gone through a lot with this.

3
00:00:03.240 --> 00:00:08.970
And now I just want to give you quick tips on trying to find out what this all referred to.

4
00:00:09.690 --> 00:00:14.820
Number one, the value of this is usually determined by the execution context.

5
00:00:15.420 --> 00:00:20.340
We think about that when you started to think about what is this where I am in my code, what's going

6
00:00:20.340 --> 00:00:20.580
on?

7
00:00:21.150 --> 00:00:21.990
That's rule number one.

8
00:00:22.080 --> 00:00:22.830
Important rule.

9
00:00:23.430 --> 00:00:27.900
Rule number two, in the global scope, this will refer to the window object.

10
00:00:28.200 --> 00:00:31.430
Let's have a look at an example quickly in the global context.

11
00:00:31.470 --> 00:00:33.540
This refers to the window object.

12
00:00:33.660 --> 00:00:38.940
We know this if we just yank Google Chrome's console and we type this.

13
00:00:39.810 --> 00:00:40.710
What do you think would happen?

14
00:00:41.580 --> 00:00:42.180
Well, there we go.

15
00:00:42.390 --> 00:00:44.430
We get the window object.

16
00:00:44.640 --> 00:00:52.710
And if we console log this, is that the same as the window we get to, which makes sense.

17
00:00:53.400 --> 00:00:58.320
Remember how we've been saying that the value of this is usually determined by how function is called?

18
00:00:59.070 --> 00:01:01.680
Well, if we define a function in the global scope.

19
00:01:02.880 --> 00:01:06.690
What do you think will happen when we console.log this?

20
00:01:10.230 --> 00:01:12.630
Now, when we run this function, what do you think would happen?

21
00:01:13.780 --> 00:01:16.660
Will its environment is being run in the global context.

22
00:01:17.350 --> 00:01:24.010
So I would expect this to point to the global context because the value of this is reference by how

23
00:01:24.010 --> 00:01:24.850
functions cool.

24
00:01:25.780 --> 00:01:27.070
So if we run this function.

25
00:01:28.710 --> 00:01:31.860
We get the window object, which is awesome, it's what we expected.

26
00:01:32.730 --> 00:01:38.760
Number three, this is set to the closest parent object when used within an object.

27
00:01:39.420 --> 00:01:41.580
Oh, let's have another look at an example.

28
00:01:42.690 --> 00:01:47.910
What do we mean when we say that this is set to the closest parent object when used within an object?

29
00:01:48.480 --> 00:01:49.680
Let's have a look at an example.

30
00:01:50.700 --> 00:01:52.440
You should say this is example one.

31
00:01:53.910 --> 00:01:55.200
Late dog equal.

32
00:01:55.410 --> 00:01:57.150
So here we defining an object.

33
00:01:57.840 --> 00:02:00.690
Let's give the dog a name of, I don't know, it's delta.

34
00:02:02.320 --> 00:02:06.370
And it's also put a method on this dog where the dog can make a sound.

35
00:02:07.560 --> 00:02:12.210
And we're just going to console.log template literals, and we going to say.

36
00:02:15.890 --> 00:02:18.740
The name of the dog goes, woof, woof.

37
00:02:19.910 --> 00:02:20.660
Pretty straightforward.

38
00:02:20.810 --> 00:02:22.100
I think you haven't seen before.

39
00:02:22.820 --> 00:02:26.840
And if we execute this function, we would expect to see.

40
00:02:27.770 --> 00:02:29.420
The result, if we just switch on.

41
00:02:30.980 --> 00:02:31.670
And there you go.

42
00:02:32.830 --> 00:02:37.480
Live or I'm sorry, we need this keyword.

43
00:02:38.320 --> 00:02:38.980
So there you go.

44
00:02:39.190 --> 00:02:44.290
Delta goes will fourth, but what's interesting is what about if we console this out to the screen?

45
00:02:46.260 --> 00:02:48.330
And we can get rid of the Liberals.

46
00:02:50.490 --> 00:02:56.220
And what you see here is that what's concealed load to the screen is the actual object itself.

47
00:02:57.330 --> 00:03:01.590
It's got the name property in the wolf function and this is the point I'm trying to prove.

48
00:03:02.070 --> 00:03:06.720
This refers to the parent object, which is dog.

49
00:03:06.750 --> 00:03:07.950
How awesome is this?

50
00:03:07.980 --> 00:03:11.130
But before we continue, I just want to drive this point home even more.

51
00:03:11.700 --> 00:03:13.320
What about within this dog object?

52
00:03:13.860 --> 00:03:15.510
Let's just leave that function call.

53
00:03:16.470 --> 00:03:17.900
What about within this dog object?

54
00:03:17.910 --> 00:03:20.070
Now we define assisted.

55
00:03:21.680 --> 00:03:22.850
What do you think is going to happen now?

56
00:03:23.330 --> 00:03:26.280
And this this dog is going to have a name of Yemen.

57
00:03:27.770 --> 00:03:31.010
And this dog is also going to have a function called Wolf.

58
00:03:34.110 --> 00:03:37.020
And this is going to console.log Typekit literals.

59
00:03:40.570 --> 00:03:41.290
This name.

60
00:03:42.160 --> 00:03:42.640
Goes.

61
00:03:47.530 --> 00:03:49.690
So now we've got an object called dog.

62
00:03:50.020 --> 00:03:53.090
It's got a sister object called sister dog.

63
00:03:53.110 --> 00:03:56.470
I know it seems weird, but what's going to happen when we console the second one?

64
00:03:56.470 --> 00:03:57.730
This is the dog's console.

65
00:03:58.860 --> 00:04:00.500
What is this going to refer to?

66
00:04:00.690 --> 00:04:08.670
Remember what we said references the closest parent object, which in this case is Sister Dog said I

67
00:04:08.670 --> 00:04:17.160
would expect the second console to console log gamma goes was not Delta goes was it's ever look, let's

68
00:04:17.160 --> 00:04:17.730
see if we right.

69
00:04:17.970 --> 00:04:26.220
So if we now execute dog and we exist, this is the dog and we xs the wolf method on it.

70
00:04:26.280 --> 00:04:27.300
What do you think would happen?

71
00:04:28.680 --> 00:04:29.220
Well, here we go.

72
00:04:29.730 --> 00:04:32.010
Gemma goes, woof, woof.

73
00:04:32.070 --> 00:04:32.760
Point proven.

74
00:04:33.240 --> 00:04:33.840
Let's move on.

75
00:04:35.820 --> 00:04:42.900
Full, when the new keyword is used, this is bound to the newly created object again.

76
00:04:43.380 --> 00:04:44.730
Let's have a look at an example.

77
00:04:45.900 --> 00:04:50.760
Remember when we have to use a new keyword, it's right with the constructor function.

78
00:04:51.180 --> 00:04:53.160
So let's define the constructor function.

79
00:04:53.220 --> 00:04:54.180
Let's call it person.

80
00:04:56.560 --> 00:04:59.050
And they'd say we'd taken a first name and the last name.

81
00:05:01.910 --> 00:05:07.460
We have to have the opening curly bracket, and now we want to set this first name to be the first name

82
00:05:07.460 --> 00:05:08.600
we passed into the function.

83
00:05:09.140 --> 00:05:13.370
And this last name to be the last name we passed into the function.

84
00:05:14.520 --> 00:05:20.340
And then what I want to do now, just to prove my point is let's console.log this, that this keyword.

85
00:05:22.460 --> 00:05:27.020
What about if we try and execute this without the new keyword, if I just execute personnel straight

86
00:05:27.020 --> 00:05:27.500
off the bat?

87
00:05:27.890 --> 00:05:32.540
Remember how we said that the value of this is determined by how function is called?

88
00:05:32.690 --> 00:05:34.580
We have the functions in the global scope.

89
00:05:34.730 --> 00:05:39.800
So if you guessed that this would be the global object, you would be correct in this instance.

90
00:05:40.370 --> 00:05:41.030
I'll agree with you.

91
00:05:41.240 --> 00:05:42.590
It's execute person.

92
00:05:43.220 --> 00:05:43.940
And there you go.

93
00:05:44.090 --> 00:05:47.030
We see console.log to screen the window object.

94
00:05:47.240 --> 00:05:53.750
But what happens when we use the new keyword or something else happens, doesn't it, that this is going

95
00:05:53.750 --> 00:05:58.010
to reference now the newly created object, not the global object?

96
00:05:58.430 --> 00:05:59.150
I'll prove it to you.

97
00:06:00.150 --> 00:06:08.540
Let Mary equal new person first name can be Mary, whose second name can be changed.

98
00:06:10.240 --> 00:06:11.260
Why execute this?

99
00:06:11.850 --> 00:06:17.050
What's console.log to the screen is not the global object anymore, the actual person object.

100
00:06:17.620 --> 00:06:22.870
The newly created object that we've created, which in this case is Mary great hope that makes sense.

101
00:06:24.390 --> 00:06:31.080
Five area functions don't find this, and I won't show you an example now of this because we thought

102
00:06:31.080 --> 00:06:36.150
we literally did it in the previous section when we were looking at functions and error functions and

103
00:06:36.150 --> 00:06:42.240
lost, which we haven't gone over, which are well, now we can choose what this refers to explicitly.

104
00:06:42.660 --> 00:06:46.170
It's almost like going into manual mode on your camera.

105
00:06:46.590 --> 00:06:48.180
You know, I love photography.

106
00:06:48.180 --> 00:06:49.140
I love taking photos.

107
00:06:49.470 --> 00:06:53.340
And sometimes when you know what you're doing, you just want to take over.

108
00:06:53.490 --> 00:06:55.860
You want to take over that steering wheel and do what you want.

109
00:06:56.010 --> 00:06:58.530
And it's the same with using coal.

110
00:06:58.530 --> 00:07:00.090
Find and apply methods.

111
00:07:00.180 --> 00:07:05.340
Let me show you how those work quickly, but these are the six foot high level rules that you should

112
00:07:05.340 --> 00:07:11.100
think about when you're struggling with this, or you wanting to understand in what context you're currently

113
00:07:11.100 --> 00:07:11.250
in.

114
00:07:11.580 --> 00:07:12.480
Hope it makes sense.

115
00:07:13.050 --> 00:07:13.620
Let's move on.

