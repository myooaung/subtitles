WEBVTT
1
00:00:00.090 --> 00:00:04.380
Just before we start building our for, you need to understand what it is we building and in order to

2
00:00:04.380 --> 00:00:09.000
understand what it is we building, obviously we need to understand what the full each method is meant

3
00:00:09.000 --> 00:00:18.390
to accomplish at its core for each method is just the way to loop through your array, and iOS six introduced

4
00:00:18.390 --> 00:00:19.740
the array for each method.

5
00:00:20.220 --> 00:00:22.260
What you do is you call this method on your right.

6
00:00:22.410 --> 00:00:27.330
And when you do, you have to pass in the callback function to run on each iteration of the loop.

7
00:00:28.050 --> 00:00:33.270
And just in case you're wondering, a callback is just a function that is only executed after another

8
00:00:33.270 --> 00:00:36.750
function is finished executing, hence the word callback.

9
00:00:37.410 --> 00:00:43.470
OK, so we know the for each method requires us to pass in a callback function, and this callback function

10
00:00:43.860 --> 00:00:45.900
exists two main arguments.

11
00:00:46.620 --> 00:00:51.120
Well, actually, it accepts three arguments, but the third argument is an array that you wanting to

12
00:00:51.120 --> 00:00:51.900
iterate through.

13
00:00:52.110 --> 00:00:53.400
So I've never had to use it.

14
00:00:53.730 --> 00:00:58.710
So I'm just going to concentrate on the two main arguments that you pass into this callback function.

15
00:00:59.250 --> 00:01:01.920
The first is the value of the current item in the loop.

16
00:01:02.310 --> 00:01:06.450
And the second is the index of that item, and you can name these variables.

17
00:01:06.720 --> 00:01:12.000
Anything you want, that is what the callback function is going to take and we going to have to build

18
00:01:12.000 --> 00:01:15.360
this dynamically from the beginning, which you'll see in a moment.

19
00:01:16.370 --> 00:01:22.250
And just taking a step back, just remember that the for each method is a method applied to the array

20
00:01:22.280 --> 00:01:22.940
prototype.

21
00:01:22.970 --> 00:01:26.180
We saw this when we had to see whether it's natively supported.

22
00:01:26.180 --> 00:01:34.160
We accept the array prototype for each method and for each is just a way for us to get through an array.

23
00:01:34.460 --> 00:01:39.680
And JavaScript is a very curious beast because there are so many different ways to accomplish the same

24
00:01:39.680 --> 00:01:40.120
task.

25
00:01:40.130 --> 00:01:44.930
And it's also awesome like that because as developers, it gives us a lot of flexibility to use what

26
00:01:44.930 --> 00:01:45.860
we think is best.

27
00:01:46.190 --> 00:01:52.370
What this means is that the for each method is not just the only method we can use to loop through arrays.

28
00:01:53.240 --> 00:01:55.400
We've also got the full method.

29
00:01:55.520 --> 00:01:59.510
We've got four and we've got four of and we've even got others.

30
00:01:59.990 --> 00:02:04.790
But the for each method does come with a little caveat it only works on arrays.

31
00:02:05.210 --> 00:02:12.230
So if you actually want to count or you wanting to access loops on an object, then the for each probably

32
00:02:12.230 --> 00:02:13.760
isn't going to be your friend.

33
00:02:14.270 --> 00:02:20.780
And the other thing with four is that some developers argue that it's suffers performance issues, a.k.a.

34
00:02:20.780 --> 00:02:21.290
it's low.

35
00:02:21.920 --> 00:02:24.890
And if this is a concern to you, then you can get around that.

36
00:02:24.890 --> 00:02:30.050
You can use libraries like Mohnish, and I don't want us to get into LearnDash now, but it's basically

37
00:02:30.050 --> 00:02:35.360
just a utility library in JavaScript that lets us do a lot of common things, such as looping through

38
00:02:35.360 --> 00:02:39.200
arrays and the codes written in a way that's very, very efficient.

39
00:02:39.200 --> 00:02:41.120
Performance efficient, very fast.

40
00:02:41.630 --> 00:02:46.100
OK, well, if you're anything like me, reading a bunch of words on a screen isn't really helping to

41
00:02:46.100 --> 00:02:47.630
understand what a fool it is.

42
00:02:47.870 --> 00:02:53.480
So before we start building our for, let me just show you what a fool is by showing you an example,

43
00:02:53.660 --> 00:02:57.770
and then we can dive straight into it by building our very own poly form.

44
00:02:57.980 --> 00:02:59.270
Let's just look at a quick example.

