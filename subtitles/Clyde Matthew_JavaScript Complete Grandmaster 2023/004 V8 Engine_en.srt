1
00:00:00,730 --> 00:00:03,250
We know what an engine is, what it's meant to do.

2
00:00:03,700 --> 00:00:05,770
So what's the engine that we should be looking at?

3
00:00:06,730 --> 00:00:13,600
Well, you could say that there are 2 major engines that are interesting. And why do I say 2? Well, because they're

4
00:00:13,600 --> 00:00:15,130
both leveraged by NativeScript.

5
00:00:15,430 --> 00:00:21,220
And these two engines are 1) WebKit's JavaScriptCore and 2) Google's V8 Engine.

6
00:00:21,520 --> 00:00:25,840
Now, I don't really want to get into JavaScriptCore because it is an engine that handles code a bit

7
00:00:25,840 --> 00:00:26,380
differently.

8
00:00:26,650 --> 00:00:31,600
The one that I think we must concentrate on is V8 because this is very powerful when it comes to Node

9
00:00:31,600 --> 00:00:34,300
and JavaScript and it is really an awesome engine.

10
00:00:35,470 --> 00:00:42,550
Google built the V8 engine. It's written in C++, and it also compiles and executes JavaScript

11
00:00:42,730 --> 00:00:46,330
source code. And the engine is used inside Google Chrome.

12
00:00:47,680 --> 00:00:55,150
Unlike the rest of the engines, however, V8 is also used for the popular Node.js runtime.

13
00:00:57,560 --> 00:01:02,870
V8 was first designed to increase the performance of JavaScript execution inside the web browsers

14
00:01:03,530 --> 00:01:07,310
and in order to obtain speed, because speed is everything you can agree with me,

15
00:01:08,070 --> 00:01:14,750
V8 translates JavaScript code into more efficient machine code instead of just using a normal interpreter.

16
00:01:15,140 --> 00:01:20,960
It actually compiles the code into machine code at execution by implementing a Just-In-Time compiler

17
00:01:21,320 --> 00:01:27,860
like a lot of modern JavaScript engines do, such as SpiderMonkey or Rhino, which is Mozilla's engine by

18
00:01:27,860 --> 00:01:28,160
the way.

19
00:01:28,880 --> 00:01:34,490
The main difference here, though, is that V8 doesn't produce bytecode or any intermediate code.

20
00:01:35,390 --> 00:01:39,860
It actually translates JavaScript into machine code

21
00:01:40,460 --> 00:01:48,650
directly. And what's really cool about V8 is it can be embedded into any C++ application, and this

22
00:01:48,650 --> 00:01:55,070
makes it incredibly powerful because C++ was designed to talk with your machine and to do server side

23
00:01:55,070 --> 00:01:55,640
tasks.

24
00:01:56,270 --> 00:01:59,420
And as we know, JavaScript came from a beginning

25
00:01:59,500 --> 00:02:01,100
where it was only designed for browsers.

26
00:02:01,850 --> 00:02:09,470
So what this means is you can take your JavaScript, run it through the V8 engine, or your C++ program, and

27
00:02:09,470 --> 00:02:13,490
you can literally convert that into machine code on the fly.

28
00:02:13,910 --> 00:02:15,560
How awesome is that?

