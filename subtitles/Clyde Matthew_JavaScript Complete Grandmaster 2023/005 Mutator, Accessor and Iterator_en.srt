1
00:00:00,420 --> 00:00:03,210
We have three broad categories of meetings on arrays.

2
00:00:03,510 --> 00:00:05,220
Let's have a look at an example of each of them.

3
00:00:06,190 --> 00:00:09,160
So as we just did in the lecture, let's look at mutate.

4
00:00:10,260 --> 00:00:10,800
Mrs.

5
00:00:12,330 --> 00:00:15,240
And remember, these methods alter the original array.

6
00:00:15,420 --> 00:00:20,490
So let's create an array, let's just call it members for lack of a better word, and let's has five,

7
00:00:20,490 --> 00:00:22,380
10, 50 in that array.

8
00:00:22,680 --> 00:00:25,590
And let's use the push method.

9
00:00:25,920 --> 00:00:31,020
The push method is a mutating method, and it's push the number 20 on this.

10
00:00:31,740 --> 00:00:34,620
It's console log numbers.

11
00:00:36,100 --> 00:00:36,430
Whoosh.

12
00:00:36,880 --> 00:00:44,410
And it says here in my IDs, really giving me a tootsie that returns the new length of the array and

13
00:00:44,410 --> 00:00:46,120
it's pushed the number 20 onto this.

14
00:00:47,130 --> 00:00:54,000
Now the race is going to have length for so an I console.log up numbers, it's going to have four numbers

15
00:00:54,000 --> 00:00:57,990
now it has affected the actual original rate.

16
00:00:58,330 --> 00:00:59,700
What's another example?

17
00:00:59,700 --> 00:01:01,020
Let's work with colors.

18
00:01:01,800 --> 00:01:03,390
Let's say the original.

19
00:01:05,069 --> 00:01:07,260
Colours of blue and green.

20
00:01:08,370 --> 00:01:13,200
But let's say someone else comes along and wants to create amended colours, but they want to start

21
00:01:13,200 --> 00:01:15,510
off with these colours is like the base point.

22
00:01:16,500 --> 00:01:23,640
So let's say the mandate comes along and they want to use the original as a starting point, but they

23
00:01:23,640 --> 00:01:25,620
want to push another colony red.

24
00:01:26,280 --> 00:01:32,070
Now, when a console.log original artist speak to only see blue and green, then I'm sure as a guest

25
00:01:32,070 --> 00:01:35,220
that's when I log in arts and actually has now read.

26
00:01:35,760 --> 00:01:40,350
So with this mutation, with this push, mean it does affect the original right.

27
00:01:40,380 --> 00:01:44,700
Just be careful with it because you might mess up original data that you weren't intending to do.

28
00:01:45,000 --> 00:01:47,310
Another method is access and methods.

29
00:01:47,550 --> 00:01:50,550
Let's have a look at that now quickly, and you just copy this up here.

30
00:01:52,150 --> 00:01:57,340
It's good, and to top it all again and being lazy and just call this excessive.

31
00:01:58,770 --> 00:02:03,720
An excess of methods, a nice because it allows us not to manipulate the original array, but to create

32
00:02:03,720 --> 00:02:06,270
a copy of the original array and then manipulate that.

33
00:02:07,050 --> 00:02:08,310
It's quite cool to have a look at.

34
00:02:08,310 --> 00:02:11,430
Let's define an array of names and it, said John.

35
00:02:13,340 --> 00:02:13,970
Wally.

36
00:02:15,280 --> 00:02:16,210
And Cindy.

37
00:02:17,330 --> 00:02:24,050
Now, one access and method available to us is known as slice and slice just returns a specified portion

38
00:02:24,050 --> 00:02:24,680
of the array.

39
00:02:25,850 --> 00:02:26,570
Show you what I mean.

40
00:02:26,570 --> 00:02:26,900
No.

41
00:02:27,800 --> 00:02:30,740
So let's just say coffee equals names.

42
00:02:30,860 --> 00:02:32,060
It's our original array.

43
00:02:32,630 --> 00:02:38,780
We want to access a slice method, and you can see my ID is already telling us what the two arguments

44
00:02:38,780 --> 00:02:38,990
are.

45
00:02:38,990 --> 00:02:45,110
The start is the beginning of the specified portion of the range end, which specifies when there needs

46
00:02:45,110 --> 00:02:45,470
to end.

47
00:02:46,860 --> 00:02:50,110
So let's just return, say we want to return just Wally and Cindy.

48
00:02:50,130 --> 00:02:52,710
We didn't want to involve John in all of this.

49
00:02:53,430 --> 00:02:54,840
So here we can start at one.

50
00:02:57,890 --> 00:02:59,510
And end at three.

51
00:03:00,850 --> 00:03:05,680
Now, if we console.log that out, we've got Wally and Cindy uncles.

52
00:03:05,890 --> 00:03:08,290
But I mean, if I console.log up names.

53
00:03:09,740 --> 00:03:13,820
Names has kept its original form of having three people in it.

54
00:03:14,180 --> 00:03:15,380
There's an excessive method.

55
00:03:15,920 --> 00:03:21,500
What about a iterator metered iterator method, as we said, just iterates through an array and allows

56
00:03:21,500 --> 00:03:25,800
you to do things with a certain value each time and iterate through that array.

57
00:03:26,690 --> 00:03:30,650
It's a bit of a mouthful, but again, it's much easier to understand with an example.

58
00:03:32,400 --> 00:03:36,000
So let's give you an example here of an iterator method.

59
00:03:40,300 --> 00:03:45,520
And a very popular one that you are going to be using, and I'll probably even do a whole section on

60
00:03:45,520 --> 00:03:52,570
it, if not a whole section, definitely one or two full on episodes is the map method.

61
00:03:52,690 --> 00:03:55,480
Now there's a lot we can talk about with the map methods.

62
00:03:55,480 --> 00:03:56,110
I'm not going to do it.

63
00:03:56,210 --> 00:03:59,920
I'm just going to show you very briefly how it works and when it's right, admitted meet.

64
00:04:02,930 --> 00:04:05,540
And let's create an array of animals.

65
00:04:07,170 --> 00:04:08,820
And let's just say we've got a dog.

66
00:04:10,040 --> 00:04:10,610
And a cat.

67
00:04:11,980 --> 00:04:19,850
I want to make it too long, and now I just want to create a it's a right, an animal iterator.

68
00:04:20,000 --> 00:04:23,060
Let's just call it animal iterator.

69
00:04:24,520 --> 00:04:29,350
And we can access all our original array, and we're going to use this map method.

70
00:04:29,710 --> 00:04:30,150
OK?

71
00:04:30,700 --> 00:04:38,230
And as you can see in my I.D., this map method calls a callback function on each element of an array

72
00:04:38,230 --> 00:04:39,460
and by element of an array.

73
00:04:39,460 --> 00:04:41,590
We just saying the dog in the cat.

74
00:04:41,590 --> 00:04:43,420
In this case, those are called elements.

75
00:04:44,410 --> 00:04:51,160
So a function is going to be called returning a dog and returning a cat, etc etc.

76
00:04:52,820 --> 00:04:55,880
Don't worry about callback functions yet, we're going to get into these things later.

77
00:04:58,370 --> 00:05:03,360
So the first argument in this map method is the callback function.

78
00:05:03,380 --> 00:05:05,450
You can even see that in my I.D., it's telling.

79
00:05:06,530 --> 00:05:09,830
So let's define callback function that takes the element.

80
00:05:11,450 --> 00:05:13,070
Which in our case, is an animal.

81
00:05:13,400 --> 00:05:15,290
It's a type of animal type.

82
00:05:16,750 --> 00:05:19,600
And they must do something with the animal type.

83
00:05:21,090 --> 00:05:23,160
So in our case, this just console.log.

84
00:05:24,660 --> 00:05:29,530
The statement that's used template literals and it say, I don't know.

85
00:05:29,590 --> 00:05:32,760
And we are dealing with a.

86
00:05:33,830 --> 00:05:37,400
And then you can literally take that animal on.

87
00:05:39,400 --> 00:05:39,750
Who?

88
00:05:40,330 --> 00:05:41,440
And look at what's just happened.

89
00:05:41,560 --> 00:05:44,800
You can see the console says we're dealing with a dog, we're dealing with a cat.

90
00:05:44,900 --> 00:05:46,280
So that's what the map makes.

91
00:05:46,360 --> 00:05:46,870
It does.

92
00:05:47,470 --> 00:05:49,810
It takes each element of your right.

93
00:05:50,380 --> 00:05:54,160
So in the first iteration, on the first loop, it's going to take dog.

94
00:05:54,580 --> 00:05:59,680
It's going to put that dog into that callback function, and it's going to name that it's going to put

95
00:05:59,680 --> 00:06:02,230
that dog into a variable called animal type.

96
00:06:03,070 --> 00:06:05,620
And then we just do whatever we please will it?

97
00:06:05,620 --> 00:06:09,520
In this case, we've just done a simple console log message of that animal type.

98
00:06:10,030 --> 00:06:11,800
But this doesn't affect the original array.

99
00:06:11,950 --> 00:06:16,480
If I type animals, we've still got our dog and cat are nothing to it.

100
00:06:16,480 --> 00:06:20,080
It's just a method that allows us to iterate through an array.

101
00:06:20,350 --> 00:06:21,400
We've gone through a lot.

102
00:06:22,180 --> 00:06:22,950
We've gone through a lot.

103
00:06:22,960 --> 00:06:23,410
Well done.

104
00:06:23,680 --> 00:06:24,940
Hope is starting to make sense.

105
00:06:25,120 --> 00:06:25,810
See you soon.

