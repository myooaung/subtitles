WEBVTT
1
00:00:00.180 --> 00:00:07.950
It's another way to create an object is with the object got to create method using object that creates

2
00:00:08.100 --> 00:00:12.600
creates a new object, but it uses another object as its prototype.

3
00:00:13.680 --> 00:00:14.250
What do I mean?

4
00:00:15.780 --> 00:00:20.160
We will not be getting into politics now because I want us to keep focused.

5
00:00:20.760 --> 00:00:25.110
We are going to have a whole section of bonus section on prototypes and I'm going to be taking you through

6
00:00:25.110 --> 00:00:25.260
it.

7
00:00:26.370 --> 00:00:31.410
Just in case you've got the itch, you can think of a prototype as an object from which other objects

8
00:00:31.410 --> 00:00:33.510
can borrow properties and methods they need.

9
00:00:35.690 --> 00:00:40.430
I just wanted to show you what a prototype is before we move on, because otherwise I know it's like

10
00:00:40.430 --> 00:00:43.520
me, I'm going to be itching, not understanding, and I'm going to want to know.

11
00:00:43.640 --> 00:00:44.990
So I thought, let me just quickly show you.

12
00:00:45.770 --> 00:00:47.720
So let's create a constructor function.

13
00:00:49.290 --> 00:00:50.460
And it's cool that person.

14
00:00:51.900 --> 00:00:53.900
And it should say this name equals one he.

15
00:00:56.590 --> 00:00:58.940
And remember the second step to construct a function?

16
00:00:58.990 --> 00:01:04.030
That's right, we define a new variable and we instantiate that object.

17
00:01:04.660 --> 00:01:08.560
So let's create a user and it say that equals new person.

18
00:01:11.150 --> 00:01:14.210
So look at this user name is Wally.

19
00:01:14.660 --> 00:01:18.740
We know that because it's used the constructor function, it's already set it up for it.

20
00:01:19.580 --> 00:01:22.730
But if I just log, use it to the screen, look good.

21
00:01:22.730 --> 00:01:30.170
We get we get this person object was a property value name value p.

22
00:01:31.090 --> 00:01:31.780
Makes sense.

23
00:01:32.350 --> 00:01:36.040
If I open up this object to this, we get a product.

24
00:01:37.460 --> 00:01:45.830
Property, and if I open that up, we get a constructor function that points to this person object that

25
00:01:45.830 --> 00:01:47.960
we've defined, that is our constructor function.

26
00:01:48.590 --> 00:01:50.450
And then it's got this other proto property.

27
00:01:52.380 --> 00:01:54.010
That's what I mean by prototypes.

28
00:01:54.390 --> 00:02:01.410
This object user has inherited certain methods and properties because we've defined a constructor function.

29
00:02:01.530 --> 00:02:02.680
Don't get too confused yet.

30
00:02:02.700 --> 00:02:04.500
Like I said, we're going to have a whole bonus section.

31
00:02:04.770 --> 00:02:08.039
Just wanted to quickly show you kind of what I mean when we're talking about prototypes.

32
00:02:08.070 --> 00:02:09.220
Let's get back into the ledger.

33
00:02:10.050 --> 00:02:15.630
The cool thing with object tocreate is that you can create an object without having to define a constructor

34
00:02:15.630 --> 00:02:16.080
function.

35
00:02:16.890 --> 00:02:19.530
This means you don't need the new keyword.

36
00:02:20.550 --> 00:02:21.960
So how do we create it?

37
00:02:22.570 --> 00:02:24.540
Well, it takes two arguments.

38
00:02:25.200 --> 00:02:28.080
It takes a prototype argument, which is mandatory.

39
00:02:28.080 --> 00:02:35.130
We have to put in something because you have to tell your newly created object way to inherit its prototype

40
00:02:35.130 --> 00:02:35.460
from.

41
00:02:35.970 --> 00:02:39.690
And the second argument is optional where you can define properties.

42
00:02:40.200 --> 00:02:41.550
Let's have a look at a few examples.

