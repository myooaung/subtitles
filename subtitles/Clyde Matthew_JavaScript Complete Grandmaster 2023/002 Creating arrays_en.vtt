WEBVTT
1
00:00:00.460 --> 00:00:06.460
And just as with objects, there is not only one way to create an array, but in general, we only look

2
00:00:06.460 --> 00:00:07.990
at two ways to create an array.

3
00:00:08.680 --> 00:00:13.600
We look at an array literal and that's just using opening and closing square brackets.

4
00:00:14.290 --> 00:00:16.540
And the second way is to use an array constructor.

5
00:00:17.290 --> 00:00:20.020
And yes, we put to use the new keyword there as well.

6
00:00:20.680 --> 00:00:22.300
Let's have a look at a few examples.

7
00:00:22.900 --> 00:00:25.870
What better way to learn, then examples?

8
00:00:26.770 --> 00:00:29.230
So let's start looking at the different ways to create arrays.

9
00:00:31.140 --> 00:00:36.090
So first, let's use the array literal, and this is the easiest way to create an array.

10
00:00:37.050 --> 00:00:42.320
And the most simple array is it's just called a A4 array.

11
00:00:43.620 --> 00:00:46.680
And if we console.log art, you can see we've got an array.

12
00:00:46.920 --> 00:00:48.510
How easy is that?

13
00:00:49.050 --> 00:00:53.250
We can also create an array with values.

14
00:00:54.660 --> 00:01:00.450
So let's define a variable called animals, and it's defined different values, dog.

15
00:01:02.050 --> 00:01:03.610
Cat and mouse.

16
00:01:04.480 --> 00:01:06.400
And if we consalvo that to the screen.

17
00:01:08.210 --> 00:01:13.130
Sharon has to use console log in this case and just type animals, and there we go.

18
00:01:13.190 --> 00:01:17.960
We can array with dog, cat and mouse and remember how he said an array is an object.

19
00:01:18.050 --> 00:01:21.260
And we went further by saying, you can even put objects within an array.

20
00:01:21.990 --> 00:01:23.510
Let's show an example of that.

21
00:01:24.080 --> 00:01:26.120
So let's call our people.

22
00:01:27.390 --> 00:01:31.710
And remember, with an array, you have to have opening and closing square brackets.

23
00:01:32.860 --> 00:01:35.130
Now we want to put objects into this array.

24
00:01:36.290 --> 00:01:37.700
How do we define an object?

25
00:01:38.970 --> 00:01:39.690
That's right.

26
00:01:39.870 --> 00:01:40.260
With.

27
00:01:41.920 --> 00:01:43.060
Curly braces.

28
00:01:44.610 --> 00:01:47.490
And let's just say name because Wally.

29
00:01:49.510 --> 00:01:50.560
And it's just another one.

30
00:01:51.970 --> 00:01:53.620
That's cool, this when, John.

31
00:01:55.970 --> 00:01:57.080
And let's do one more.

32
00:01:57.380 --> 00:01:58.340
And name her.

33
00:01:58.370 --> 00:01:58.820
Cindy.

34
00:02:01.010 --> 00:02:03.320
And if we counsel people out.

35
00:02:04.630 --> 00:02:05.160
There we go.

36
00:02:05.710 --> 00:02:11.050
You can see it's an array because it's enclosed within square brackets and it's got these objects within

37
00:02:11.050 --> 00:02:11.230
it.

38
00:02:11.500 --> 00:02:11.920
OK.

39
00:02:12.100 --> 00:02:13.450
That is a very literal.

40
00:02:13.690 --> 00:02:14.560
Let's now see.

41
00:02:15.560 --> 00:02:22.370
Array constructor, and with the array constructor, you have to use JavaScript built in array objects

42
00:02:22.370 --> 00:02:25.970
and you have to call it with the new keyword, let me show you what I mean.

43
00:02:26.660 --> 00:02:30.050
So let's define house and it's use the way to do.

44
00:02:30.740 --> 00:02:33.710
Now you just need to put it in the values in this constructor.

45
00:02:34.520 --> 00:02:41.630
So I don't know the three bedroom colors read and it's got three bathrooms.

46
00:02:42.640 --> 00:02:48.880
If we console this out, we should see an array with opening and closing square brackets with these

47
00:02:48.880 --> 00:02:49.750
venues within it.

48
00:02:50.850 --> 00:02:55.800
So you got these house and these the opening closing square brackets and the the values in it, just

49
00:02:55.800 --> 00:02:56.670
as we would expect.

50
00:02:56.820 --> 00:03:01.830
But using their array, constructor can cause weird results.

51
00:03:02.250 --> 00:03:03.330
Let me show you an example.

52
00:03:04.720 --> 00:03:07.900
If you wanting to do an array of numbers, it's pretty straightforward.

53
00:03:08.920 --> 00:03:09.550
You're right.

54
00:03:09.700 --> 00:03:11.980
And this just have numbers five and 10.

55
00:03:13.430 --> 00:03:20.270
And if we console.log this out, I would expect to see an array with values five and 10.

56
00:03:20.300 --> 00:03:20.870
You've got it.

57
00:03:21.950 --> 00:03:24.200
And we do see that in this instance.

58
00:03:24.680 --> 00:03:30.020
But if we just wanted to have an array with one number, it causes weird results.

59
00:03:30.110 --> 00:03:30.800
Have a look at this.

60
00:03:31.840 --> 00:03:37.960
So let's say we've got a new record figures, and we just want that to be the number seven.

61
00:03:39.230 --> 00:03:45.160
If we console.log that up, what would you expect to see what expect to see an array with just the number

62
00:03:45.160 --> 00:03:45.520
seven?

63
00:03:46.640 --> 00:03:48.890
But in this case, it's actually going to give us something different.

64
00:03:48.980 --> 00:03:54.230
It's going to give us an entire interior with seven empty blank spots.

65
00:03:54.710 --> 00:03:55.400
I'll show you what I mean.

66
00:03:56.450 --> 00:03:57.020
Figures.

67
00:03:57.590 --> 00:03:58.130
And it is.

68
00:03:59.430 --> 00:04:04.170
Hasn't given us what we expect it, so for me, I just tend to use the right lateral approach, it's

69
00:04:04.170 --> 00:04:05.820
very intuitive, very easy.

70
00:04:06.090 --> 00:04:09.270
Like I said, there's never one right way to do something in JavaScript.

71
00:04:09.450 --> 00:04:14.010
There's so many different things you can do, and depending on your situation, you may want to use

72
00:04:14.010 --> 00:04:14.550
one of the other.

