1
00:00:00,120 --> 00:00:04,150
In the old school way, how was this problem resolved?

2
00:00:04,170 --> 00:00:06,150
And the answer is drum roll.

3
00:00:09,040 --> 00:00:14,140
And the problem of having to reload pages every time you can't into a speech from a server, the way

4
00:00:14,140 --> 00:00:20,590
that that problem was solved was by technologies allowing web pages to request smaller chunks of data

5
00:00:20,590 --> 00:00:28,240
like HTML, eczema or Jason, or even just plain text, and allowing these browsers to then only display

6
00:00:28,240 --> 00:00:31,450
their text or that resource or their daughter we needed.

7
00:00:31,810 --> 00:00:32,920
And how do we achieve this?

8
00:00:32,950 --> 00:00:35,110
What kind of technologies can we use?

9
00:00:35,800 --> 00:00:40,110
Well, we can use many APIs, such as XML, hp request.

10
00:00:40,120 --> 00:00:41,920
This is the heart of Ajax.

11
00:00:41,920 --> 00:00:43,690
This is where it all began.

12
00:00:44,200 --> 00:00:50,440
We've got new ones such as the fetch API, and these techniques are known as using Ajax.

13
00:00:51,040 --> 00:00:53,500
And can you guess what Ajax stands for?

14
00:00:54,070 --> 00:00:54,910
I'll give you a clue.

15
00:00:56,410 --> 00:01:01,490
That's right, it stands for asynchronous JavaScript and Exmouth.

16
00:01:02,290 --> 00:01:10,420
And as I just mentioned originally, it mainly used the example a sheet of object to request ex email

17
00:01:10,420 --> 00:01:14,560
data, hence the word and Ajax that extends, for example.

18
00:01:14,950 --> 00:01:20,080
But these days, don't stress about eczema because you're more likely to use the same object the eczema

19
00:01:20,130 --> 00:01:22,810
LHP request object or the feature API.

20
00:01:22,840 --> 00:01:26,500
Both of those, we're going to be using him to fetch JSON, not eczema.

21
00:01:26,500 --> 00:01:27,640
Alex emails old school.

22
00:01:27,910 --> 00:01:31,220
But the results are still the same way that we fetch Ajax, H.

23
00:01:31,240 --> 00:01:36,610
Jamaal, Jason or even plain text, and this is why the term Ajax has stuck around.

24
00:01:37,360 --> 00:01:41,770
But if you're anything like me, you probably want to see this visually anime trial.

25
00:01:41,800 --> 00:01:42,580
Let me do my best.

26
00:01:43,840 --> 00:01:46,840
Yeah, you've got your browser and your server, just like we had before.

27
00:01:47,050 --> 00:01:50,260
And in the middle, we've got this technology called Ajax.

28
00:01:50,770 --> 00:01:51,760
And how does this help us?

29
00:01:51,790 --> 00:01:56,830
Well, your browser now sends a request, but it doesn't send it to the server directly.

30
00:01:56,830 --> 00:01:58,510
It sends it via Ajax.

31
00:01:59,020 --> 00:02:03,010
Ajax then sends and http request in the background.

32
00:02:03,610 --> 00:02:08,680
The server does its job, does its business, and then it sends and HTP responds.

33
00:02:09,190 --> 00:02:12,310
And then Ajax provides that data to the browser.

34
00:02:12,850 --> 00:02:20,260
But what is so awesome is that whole process of the HTTP request and the response, you guessed it,

35
00:02:20,410 --> 00:02:25,030
it happens in the background without us having to wait for page reloads.

36
00:02:25,420 --> 00:02:26,380
How awesome that.

37
00:02:28,180 --> 00:02:29,980
But wait, there's more.

38
00:02:31,380 --> 00:02:33,240
To speed things up even further.

39
00:02:33,510 --> 00:02:39,690
Most sites today also store assets and data on your own computer's hard drive on your computer's database.

40
00:02:40,680 --> 00:02:42,180
And how does this work?

41
00:02:42,180 --> 00:02:42,500
Well.

42
00:02:42,720 --> 00:02:47,460
Very simplistically at a high level, what happens is when you request a website for the very first

43
00:02:47,460 --> 00:02:53,010
time, a lot of those assets that are from the server will be stored on your computer in a database,

44
00:02:53,430 --> 00:03:00,030
meaning that next time you visit that same site on subsequent visits, you are able to use local versions

45
00:03:00,030 --> 00:03:03,060
of the data instead of downloading fresh copies all the time.

46
00:03:03,210 --> 00:03:09,300
And it also means that content is only reloaded from the server when they thought on the server has

47
00:03:09,300 --> 00:03:09,900
been updated.

48
00:03:10,200 --> 00:03:10,920
So how does this look?

49
00:03:11,920 --> 00:03:17,710
Well, your browser cannot request data from a database, your computer will then ask, does daughter

50
00:03:17,710 --> 00:03:18,850
need to be updated?

51
00:03:19,000 --> 00:03:21,190
Has Dot have been updated on the server?

52
00:03:21,640 --> 00:03:26,920
If it hasn't, the simple solution is it can just send that data straight back to your browser.

53
00:03:27,130 --> 00:03:30,310
This results in a very fast load paging time.

54
00:03:30,580 --> 00:03:31,390
This is awesome.

55
00:03:31,390 --> 00:03:32,920
This is why many sites you visit.

56
00:03:33,310 --> 00:03:34,540
It's almost instantaneous.

57
00:03:35,260 --> 00:03:38,620
OK, but now say that the data does need to be updated.

58
00:03:38,800 --> 00:03:39,810
What's going to happen next?

59
00:03:40,150 --> 00:03:44,020
Well, the first check your computer has to do is Well, are you online or not?

60
00:03:44,560 --> 00:03:45,610
Let's say you're not online.

61
00:03:45,730 --> 00:03:50,290
Well, in that case, unfortunately, the database is just going to send you the data it has, and you're

62
00:03:50,290 --> 00:03:52,720
still going to be looking at outdated data.

63
00:03:52,990 --> 00:03:53,380
Cool.

64
00:03:53,410 --> 00:03:54,910
I think we've got that under wraps.

65
00:03:55,330 --> 00:04:02,320
What about now if your computer is online, the database is going to send a request to Ajax to this

66
00:04:02,320 --> 00:04:03,970
technology piece sitting in the middle.

67
00:04:04,330 --> 00:04:07,150
Ajax will then send an HTTP request to the server.

68
00:04:07,570 --> 00:04:09,610
The server will do its business.

69
00:04:10,030 --> 00:04:13,330
It's going to send an HTP response when it's ready.

70
00:04:13,810 --> 00:04:20,500
Ajax will store the data in the database, but now it's updated data and that will be sent back to your

71
00:04:20,500 --> 00:04:20,890
browser.

72
00:04:21,700 --> 00:04:27,640
So I know the screen looks a bit funky right now, and there's a lot on there, but I hope you're gaining

73
00:04:27,640 --> 00:04:31,120
an understanding of how this all works at a very high level, at least.

74
00:04:31,360 --> 00:04:33,820
We're going to get into more detail shortly, though, so be with me.

