1
00:00:00,870 --> 00:00:05,970
We've had a look, an example, but let's dive a bit more into prototypes and what they actually are,

2
00:00:05,970 --> 00:00:08,280
so becomes very intuitive for you.

3
00:00:08,760 --> 00:00:11,460
Prototype is just a reference to another object.

4
00:00:11,760 --> 00:00:12,390
That's all it is.

5
00:00:13,350 --> 00:00:19,830
And remember, JavaScript is a prototype based language, so this means that all JavaScript objects,

6
00:00:19,830 --> 00:00:22,800
inherent properties and methods from a prototype.

7
00:00:23,520 --> 00:00:26,490
What I mean will take dates, take a rate?

8
00:00:27,180 --> 00:00:30,230
What about even a custom object that we create user?

9
00:00:30,870 --> 00:00:34,710
Well, they will inherit from the associated prototypes.

10
00:00:35,190 --> 00:00:35,910
If they have one.

11
00:00:36,840 --> 00:00:43,560
And all those prototypes, in turn, will inherit from the overall arching JavaScript object prototype.

12
00:00:44,160 --> 00:00:50,760
Remember, we've even used that object that enable JavaScript object many times in our examples.

13
00:00:51,730 --> 00:00:52,770
This is still a bit fuzzy.

14
00:00:53,220 --> 00:00:57,300
Well, let me quickly should over to the console, and I'll show you what this prototype looks like.

15
00:00:57,720 --> 00:01:03,120
OK, so remember we see the array inherits from the array prototype, and that in turn inherits from

16
00:01:03,120 --> 00:01:05,260
the overarching object prototype.

17
00:01:05,280 --> 00:01:05,850
That's have a look.

18
00:01:06,600 --> 00:01:09,160
So this just creates a numbers, right?

19
00:01:11,220 --> 00:01:17,460
And it's log up numbers we can see at the moment, it's an entire day, but if we open this up and we

20
00:01:17,490 --> 00:01:20,670
dig deep into JavaScript construct, what do we see?

21
00:01:22,410 --> 00:01:27,600
We'll remember how the Rays have this built in links properties, that's no surprise, but look, it's

22
00:01:27,600 --> 00:01:31,380
got this protein and the school and the school protocol and the school and the school.

23
00:01:31,920 --> 00:01:34,560
And it's inheriting from the array prototype.

24
00:01:34,800 --> 00:01:40,740
And if we open this up, in turn, we get a whole lot of methods that we can access straight out of

25
00:01:40,740 --> 00:01:41,130
the box.

26
00:01:42,820 --> 00:01:50,110
And if we scroll to the bottom, we can see that this array prototype inherits from the object prototype,

27
00:01:50,680 --> 00:01:51,490
which is what that is.

28
00:01:52,060 --> 00:01:52,840
How cool is this?

29
00:01:52,840 --> 00:01:55,210
And this is one our numbers here.

30
00:01:56,500 --> 00:02:01,870
And say we just define it as one to nine hundred and five.

31
00:02:03,210 --> 00:02:05,550
This is why we can access things like sort.

32
00:02:07,380 --> 00:02:10,199
Like, we didn't have to Typekit we can just do it right out of the box.

33
00:02:10,530 --> 00:02:16,770
And that's why it's because we got access to these prototypes, these methods and properties on our

34
00:02:16,770 --> 00:02:18,690
array from somewhere else.

35
00:02:19,770 --> 00:02:20,400
It's cool, right?

36
00:02:20,460 --> 00:02:21,990
What about if creates an object?

37
00:02:22,140 --> 00:02:24,240
So late, Obi Jay Equal.

38
00:02:26,080 --> 00:02:26,800
The object.

39
00:02:28,400 --> 00:02:33,290
And if we console.log out this object, yes, it's an empty object, but if we look at its JavaScript

40
00:02:33,350 --> 00:02:36,920
construct, we can see it's inheriting from the prototype object.

41
00:02:38,230 --> 00:02:40,540
Over starting to make sense, let's move on.

