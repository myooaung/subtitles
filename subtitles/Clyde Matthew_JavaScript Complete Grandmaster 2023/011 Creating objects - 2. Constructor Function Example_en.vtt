WEBVTT
1
00:00:00.120 --> 00:00:01.770
Constructor functions.

2
00:00:02.040 --> 00:00:03.150
Let's see a few examples.

3
00:00:03.300 --> 00:00:07.290
Let's just call this constructor functions.

4
00:00:09.170 --> 00:00:10.460
Let's start off with an example.

5
00:00:10.670 --> 00:00:13.700
Remember what the first step is in creating a constructor function?

6
00:00:13.970 --> 00:00:16.880
It's to define your actual object.

7
00:00:17.330 --> 00:00:18.500
So let's define the object.

8
00:00:19.370 --> 00:00:20.280
Let's actually go here.

9
00:00:20.300 --> 00:00:20.900
Step one.

10
00:00:23.330 --> 00:00:24.410
Find the object.

11
00:00:25.690 --> 00:00:29.650
And to define the object, we need to name it, let's call it a motorbike object.

12
00:00:30.130 --> 00:00:33.580
And do you notice that I included a capital, M Capital later?

13
00:00:33.940 --> 00:00:35.350
That's two standard convention.

14
00:00:35.380 --> 00:00:40.720
So when you and I are going through code and we see a capital later, we know immediately that it's

15
00:00:40.720 --> 00:00:44.590
an object and it was constructed via the constructor function.

16
00:00:45.520 --> 00:00:51.970
And let's say the motorbike has color and a year when it was made.

17
00:00:55.030 --> 00:00:56.770
That's actually also sort of yearly.

18
00:00:57.070 --> 00:00:58.600
This has put name names in color.

19
00:00:58.780 --> 00:00:59.530
Name and color.

20
00:01:00.830 --> 00:01:09.020
And what are we going to do is that when we create an object, we want to define properties on it immediately

21
00:01:09.050 --> 00:01:09.770
when we create.

22
00:01:10.550 --> 00:01:16.730
So that's why we want to make this name and this name will be the name of the object we actually create

23
00:01:16.730 --> 00:01:17.150
later.

24
00:01:17.810 --> 00:01:22.670
And we want to make that equal to what we passed in the function in the constructor, which in this

25
00:01:22.670 --> 00:01:23.330
case is name.

26
00:01:24.410 --> 00:01:26.900
So we also want this color to be color.

27
00:01:28.370 --> 00:01:29.150
That's step one.

28
00:01:29.780 --> 00:01:30.980
You remember what step two was.

29
00:01:34.060 --> 00:01:38.470
Step two was to call the function.

30
00:01:42.220 --> 00:01:49.030
With the new hewould, so let's do that, let's define a variable that's called a variable.

31
00:01:50.230 --> 00:01:50.950
My bike.

32
00:01:51.610 --> 00:01:53.380
And let's say that equals new.

33
00:01:54.370 --> 00:01:54.940
Motorbike.

34
00:01:56.310 --> 00:02:00.300
And we've seen above that it requires two arguments, a name and a color.

35
00:02:01.110 --> 00:02:04.920
So let's say the bike is a Yamaha and it's black.

36
00:02:06.930 --> 00:02:11.970
And just take a step back, just understand what it is we've done here, the first step was to define

37
00:02:11.970 --> 00:02:15.390
our object, and you can kind of think of it as a blueprint.

38
00:02:16.320 --> 00:02:23.130
And we've said in our blueprint, when this is cool, it's going to be cold with two arguments a name

39
00:02:23.130 --> 00:02:23.580
and a color.

40
00:02:23.620 --> 00:02:29.640
We want the new variables name to be equal to the name we foster it and the new variables, color to

41
00:02:29.640 --> 00:02:30.810
be the color we foster it.

42
00:02:32.670 --> 00:02:39.090
And then on step two, we've actually instantiated that object, we've called it was the new keyword.

43
00:02:39.870 --> 00:02:41.820
Now if we console.log off my bike.

44
00:02:43.760 --> 00:02:47.810
We've got a name, a property name called Yamaha and a color code Black.

45
00:02:48.470 --> 00:02:49.310
How awesome is it?

46
00:02:49.610 --> 00:02:53.810
This is automatically done it for us because we've used a constructor function.

47
00:02:54.560 --> 00:03:01.040
And what do you think will happen if we console log the time of my bike?

48
00:03:02.650 --> 00:03:03.490
Well, it's an object.

49
00:03:04.060 --> 00:03:07.300
Of course, it's an object, we're dealing with the creation of objects here.

50
00:03:07.750 --> 00:03:13.710
But now before we move on, there's another way we can create an object using a constructor function

51
00:03:13.720 --> 00:03:17.620
that is using JavaScript in enabled object constructor.

52
00:03:18.550 --> 00:03:19.010
That's.

53
00:03:19.150 --> 00:03:20.640
I'll just be open and honest now.

54
00:03:20.650 --> 00:03:25.330
It's a bit more cumbersome, takes longer to write, and I'd much prefer something like this.

55
00:03:26.050 --> 00:03:28.330
But for the sake of completeness, let me show you how it works.

56
00:03:29.790 --> 00:03:35.520
So this is now using Java scripts enabled objects.

57
00:03:36.480 --> 00:03:37.140
Constructed.

58
00:03:42.760 --> 00:03:43.510
Let's do that now.

59
00:03:43.930 --> 00:03:48.250
And for the sake of being exciting, let's don't use the motorbike we bought of that now.

60
00:03:48.430 --> 00:03:49.690
Let's do a person object.

61
00:03:50.330 --> 00:03:52.270
Let me just zoom in a bit late person.

62
00:03:52.900 --> 00:03:54.400
Equal new object.

63
00:03:55.660 --> 00:03:57.460
They touch that object.

64
00:03:58.030 --> 00:04:00.430
There's a method built into JavaScript itself.

65
00:04:00.820 --> 00:04:03.760
It's an object constructor, and I'll prove it to you by.

66
00:04:05.270 --> 00:04:08.870
Console looking person, you can see it's an object.

67
00:04:08.990 --> 00:04:10.520
And if we go type of.

68
00:04:13.270 --> 00:04:13.690
Person.

69
00:04:16.970 --> 00:04:21.560
You see that it is an object, so an object has been created, but now the pain with this is that to

70
00:04:21.560 --> 00:04:23.750
ED methods and properties, we have to do it manually.

71
00:04:24.740 --> 00:04:28.850
So to add a name, we would go person, not name who's only.

72
00:04:31.810 --> 00:04:33.910
This is not age equals thirty five.

73
00:04:34.260 --> 00:04:40.720
Now when you console.log it, the object is getting meat, but it's a pain, it's a pain that we have

74
00:04:40.720 --> 00:04:41.650
to do that manually.

75
00:04:42.340 --> 00:04:47.200
So if it's such a pain doing it manually, how would we do this exact same thing using the constructor

76
00:04:47.210 --> 00:04:48.760
function we did above with the motorbike?

77
00:04:50.140 --> 00:04:51.310
Why don't you pause the video?

78
00:04:51.430 --> 00:04:54.340
Have a go and see if you can get.

79
00:04:55.910 --> 00:04:56.420
U.S..

80
00:05:02.950 --> 00:05:06.430
OK, let's do this using a constructor function.

81
00:05:08.110 --> 00:05:14.120
Same as above, but with a structure function and you'll see how much more intuitive and easy it is.

82
00:05:14.140 --> 00:05:15.970
What's the first step with the constructor function?

83
00:05:16.750 --> 00:05:17.240
That's right.

84
00:05:17.260 --> 00:05:18.400
You've got to define the object.

85
00:05:18.910 --> 00:05:21.220
So let's define it as person.

86
00:05:23.950 --> 00:05:30.550
And person's going to take a name and an age, and this name will be name and this age.

87
00:05:31.550 --> 00:05:32.130
Will be age.

88
00:05:35.810 --> 00:05:42.200
Now we want to create a user in the above example we call that use a person, so let's say this person

89
00:05:42.200 --> 00:05:43.040
two that comes along.

90
00:05:44.140 --> 00:05:48.820
And all we need to do now, and this is a second step to the constructor function, do you remember

91
00:05:48.820 --> 00:05:49.270
what it was?

92
00:05:50.200 --> 00:05:50.710
That's right.

93
00:05:50.800 --> 00:05:53.680
Just calling that definition with the new keyword.

94
00:05:54.010 --> 00:05:57.850
So we say this is a new person and it requires two arguments.

95
00:05:58.030 --> 00:06:02.770
A name, let's call it money and an age.

96
00:06:03.250 --> 00:06:04.260
Say thirty five.

97
00:06:06.240 --> 00:06:14.610
And if I console.log person to it's a military really assigned to property names, name and age to this

98
00:06:14.610 --> 00:06:17.060
object, how cool this.

99
00:06:17.070 --> 00:06:21.190
I hope you're having as much fun as I am, but we are not done yet.

100
00:06:21.210 --> 00:06:22.170
That is the good news.

101
00:06:22.390 --> 00:06:23.360
So I'll see.

