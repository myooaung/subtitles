1
00:00:00,270 --> 00:00:06,480
This section on functions would not be complete if we didn't discuss aero functions, air functions

2
00:00:06,480 --> 00:00:11,940
or just a concise way, a quick way to define function expressions.

3
00:00:12,480 --> 00:00:17,940
And it's one of the most practical changes introduced by year six or year 2015.

4
00:00:18,510 --> 00:00:26,610
And the way I like to see it is that it introduces two major benefits benefit number one, which is

5
00:00:26,610 --> 00:00:28,230
the most intuitive and obvious one.

6
00:00:28,710 --> 00:00:30,080
It's just shorter to right.

7
00:00:30,210 --> 00:00:32,759
It takes us less time, and it's easier.

8
00:00:33,210 --> 00:00:35,310
Let's take our say hi function expression.

9
00:00:35,340 --> 00:00:36,480
We know how that's written.

10
00:00:36,750 --> 00:00:44,280
We've seen this before, so you can see with error syntax, we're taking double parentheses and we put

11
00:00:44,280 --> 00:00:45,570
all the arguments in there.

12
00:00:45,600 --> 00:00:50,940
We used the arrow syntax and then we define our code in the curly braces.

13
00:00:51,450 --> 00:00:53,050
So it's very similar to the old way.

14
00:00:53,070 --> 00:00:54,090
It's just a little bit quicker.

15
00:00:54,910 --> 00:01:00,670
But depending on what we want to do with our code, we can even simplify it further.

16
00:01:01,480 --> 00:01:07,960
For example, if you have no parameters meaning we not wanting to pass in variables or arguments, then

17
00:01:07,960 --> 00:01:08,620
you can do this.

18
00:01:11,380 --> 00:01:12,490
Let me show you an example.

19
00:01:13,030 --> 00:01:18,610
If you don't have parameters creating function expressions, why the error syntax is super simple.

20
00:01:19,150 --> 00:01:19,720
Let's have a look.

21
00:01:20,470 --> 00:01:22,510
Let's define a variable called say hi.

22
00:01:23,320 --> 00:01:27,520
And now ordinarily we would have to now include the keyword function.

23
00:01:27,520 --> 00:01:28,090
Yeah, wouldn't we?

24
00:01:28,990 --> 00:01:30,280
But not with error syntax.

25
00:01:30,370 --> 00:01:31,210
That's what's so cool.

26
00:01:31,210 --> 00:01:33,280
We can just have opening closing brackets.

27
00:01:35,790 --> 00:01:39,570
We now have to include the Arrow syntax.

28
00:01:41,050 --> 00:01:44,690
And then we have opening and closing curly brackets once again.

29
00:01:45,340 --> 00:01:47,320
And this is just going to console.log.

30
00:01:48,450 --> 00:01:48,930
Heidi?

31
00:01:51,970 --> 00:01:54,310
And now what have I done wrong here?

32
00:01:54,990 --> 00:01:59,590
For the record's console.log, say hi.

33
00:02:00,950 --> 00:02:01,400
There you go.

34
00:02:01,490 --> 00:02:03,110
And if I execute, say hi.

35
00:02:05,720 --> 00:02:07,320
It console lungs, Heidi.

36
00:02:07,640 --> 00:02:08,630
No problem with that.

37
00:02:09,169 --> 00:02:12,140
But we don't even have to have the opening closing brackets do.

38
00:02:12,740 --> 00:02:15,170
We could just have to underscore it's another example.

39
00:02:15,180 --> 00:02:20,720
So let's go, let me say by equal and yeah, you just have to underscore.

40
00:02:21,850 --> 00:02:28,360
Can't be much simpler than that, cannot have the errors and text the opening and closing curly brackets.

41
00:02:29,020 --> 00:02:30,760
And yeah, we're just going to console.log.

42
00:02:32,410 --> 00:02:32,950
Finally.

43
00:02:38,330 --> 00:02:42,920
And that's said, if we execute dysfunction expression, we get by body.

44
00:02:46,040 --> 00:02:51,170
Or if you have one parameter in the opening brackets or even optional, you don't even have to have

45
00:02:51,170 --> 00:02:51,980
opening brackets.

46
00:02:53,330 --> 00:02:54,530
Did me show you another example?

47
00:02:55,840 --> 00:02:58,960
Okey, dokey, what about if you only have one parameter?

48
00:02:59,800 --> 00:03:07,420
Well, it's very simple, it's define a variable again called say hi, remember or narrowly now we would

49
00:03:07,420 --> 00:03:12,250
need the function keyword, but because we're using error syntax, we're replacing, that was the error.

50
00:03:13,210 --> 00:03:13,930
So what do we do?

51
00:03:14,270 --> 00:03:19,030
Well, when you've got one parameter, you don't even need opening and closing parentheses.

52
00:03:20,170 --> 00:03:24,460
You can just write the argument and use the error syntax.

53
00:03:24,910 --> 00:03:27,610
And again, opening closing curly brackets.

54
00:03:28,510 --> 00:03:32,560
And then now or we want to dos console.log and we'll use template literals.

55
00:03:33,670 --> 00:03:34,210
Hi.

56
00:03:37,180 --> 00:03:37,540
Name.

57
00:03:43,730 --> 00:03:44,310
There you go.

58
00:03:44,330 --> 00:03:49,340
We've literally done it, we've replaced the whole complicated and cumbersome way of function expressions

59
00:03:49,340 --> 00:03:52,880
into one line, and we can console.log this out.

60
00:03:54,230 --> 00:03:55,130
To see if it works.

61
00:03:56,990 --> 00:04:03,650
And this is undefined, oh, we forgot to pass in a name we passed in the name of Wally and says, Hi,

62
00:04:03,650 --> 00:04:03,980
Wally.

63
00:04:04,190 --> 00:04:05,090
So we know that works.

64
00:04:08,130 --> 00:04:14,370
And the most simple way we can do that is if we are only returning an expression, we don't even have

65
00:04:14,370 --> 00:04:15,960
to have the curly braces.

66
00:04:16,829 --> 00:04:21,120
Let's have a look at a quick example of what that looks like who.

67
00:04:21,690 --> 00:04:26,910
And now if you are returning an expression only, you don't even need curly brackets.

68
00:04:27,120 --> 00:04:28,380
How insane is that?

69
00:04:29,160 --> 00:04:30,330
Let me give you another example.

70
00:04:30,900 --> 00:04:36,600
So let's say we have a function expression and we have a we're going to put that into variable could

71
00:04:36,600 --> 00:04:36,960
end.

72
00:04:38,020 --> 00:04:41,900
Now, ordinarily would need to put function, we don't have to put function because we're using arrows

73
00:04:41,920 --> 00:04:44,380
and text say we've got two arguments.

74
00:04:44,620 --> 00:04:50,170
Number one and number two and all we wanting to do now is we wanting to return the addition of these

75
00:04:50,170 --> 00:04:50,350
two.

76
00:04:50,470 --> 00:04:55,150
So you and I both know ordinarily we would put it in curly brackets and we can.

77
00:04:55,630 --> 00:05:01,030
But the point is with arrows and decks, we can do away with that because now we're just returning an

78
00:05:01,030 --> 00:05:01,450
expression.

79
00:05:01,540 --> 00:05:04,300
We are returning number one plus.

80
00:05:06,290 --> 00:05:10,150
I'm too, and I mean, that is just so elegant, isn't it?

81
00:05:10,240 --> 00:05:11,500
It's beautiful, it's like art.

82
00:05:12,310 --> 00:05:17,410
And if we execute this function and we pass in one and two, we get back three.

83
00:05:17,950 --> 00:05:18,490
There you go.

84
00:05:18,520 --> 00:05:19,170
There you have it.

85
00:05:19,210 --> 00:05:22,300
The arrow index is much, much easier to use.

86
00:05:24,730 --> 00:05:29,770
OK, so those are some some tactical differences with the arrows and text, but now something a bit

87
00:05:29,770 --> 00:05:32,140
more meaningful benefit number two.

88
00:05:33,200 --> 00:05:36,520
There's no binding of this keyword.

89
00:05:37,270 --> 00:05:42,430
This is so crucial the error of function does not bind this.

90
00:05:43,580 --> 00:05:45,200
And of course, this is theory.

91
00:05:45,440 --> 00:05:48,140
Let me show you exactly what this means.

