WEBVTT
1
00:00:00.120 --> 00:00:03.780
Function expressions, on the one hand, function declarations on the other.

2
00:00:04.560 --> 00:00:08.880
This can get quite confusing, so I just thought you might throw some examples at you.

3
00:00:09.210 --> 00:00:14.580
Let's first look at a function declaration because that's what we used to function declaration.

4
00:00:14.880 --> 00:00:19.380
And let's just have a functional dog that console logs sound.

5
00:00:20.160 --> 00:00:22.140
What's the first step with the function declaration?

6
00:00:26.840 --> 00:00:32.360
We have to tell JavaScript that we're about to define a function, then we need to call our function

7
00:00:32.360 --> 00:00:32.750
something.

8
00:00:32.750 --> 00:00:33.650
So let's call it Doug.

9
00:00:33.770 --> 00:00:39.020
We need the parentheses because we may want to post arguments to later and then we define our code in

10
00:00:39.020 --> 00:00:40.340
the curly braces.

11
00:00:42.070 --> 00:00:46.050
They say sound equals Wolf.

12
00:00:47.870 --> 00:00:52.040
And then all we want to do is want a console log the sound to the screen.

13
00:00:53.830 --> 00:00:57.400
And to execute or to invoke this function, what do we need to do?

14
00:00:58.270 --> 00:00:58.810
That's right.

15
00:00:58.810 --> 00:01:03.370
We need to use our same name and they include parentheses.

16
00:01:04.269 --> 00:01:06.160
And then you go console logs.

17
00:01:06.460 --> 00:01:06.740
What's?

18
00:01:08.670 --> 00:01:11.940
So this is a function declaration, we've been seeing a lot of function declarations.

19
00:01:12.510 --> 00:01:15.420
We should be comfortable with that banner, but what about a function expression?

20
00:01:15.570 --> 00:01:16.320
Well, let's have a look.

21
00:01:16.830 --> 00:01:18.990
Function function?

22
00:01:20.250 --> 00:01:20.810
Expression.

23
00:01:21.210 --> 00:01:27.750
Well, the biggest syntactical difference in how it looks is that we're putting it into a variable and

24
00:01:27.750 --> 00:01:29.160
it's an anonymous function.

25
00:01:29.400 --> 00:01:30.060
Let's have a look.

26
00:01:30.070 --> 00:01:31.620
So let's define kit.

27
00:01:32.880 --> 00:01:34.260
And that can be a function.

28
00:01:35.410 --> 00:01:40.120
But now, in this case, bear in mind, we haven't called our function anything, and that's why it's

29
00:01:40.120 --> 00:01:43.390
called an anonymous function in the function declaration above.

30
00:01:43.930 --> 00:01:47.080
We had function and then we called our function dog.

31
00:01:47.860 --> 00:01:53.740
Yeah, we just have a function that we are assigning it to a variable called cat.

32
00:01:54.280 --> 00:01:55.510
So it's almost the same thing.

33
00:01:55.600 --> 00:01:58.420
It's just structured a bit differently.

34
00:01:58.480 --> 00:02:00.250
And let's do the same thing later.

35
00:02:00.420 --> 00:02:01.750
Some equal.

36
00:02:02.840 --> 00:02:03.980
M..

37
00:02:05.520 --> 00:02:08.220
And we want to console log the song.

38
00:02:09.479 --> 00:02:10.289
Nothing new there.

39
00:02:10.650 --> 00:02:15.690
And to execute a function expression again, we just use the name of our variable.

40
00:02:16.440 --> 00:02:18.900
And we close it in parentheses M..

41
00:02:21.060 --> 00:02:21.300
Whoo!

42
00:02:21.510 --> 00:02:24.930
So then you probably thinking, okay, cool, they both look kind of similar.

43
00:02:25.410 --> 00:02:26.490
I feel the same.

44
00:02:27.000 --> 00:02:30.990
Why have to waste to declare a function as in this?

45
00:02:30.990 --> 00:02:32.250
Just any more confusion?

46
00:02:32.400 --> 00:02:33.000
Well, it isn't.

47
00:02:33.020 --> 00:02:33.540
It isn't.

48
00:02:33.540 --> 00:02:35.670
It depends what you want to do with these functions.

49
00:02:35.880 --> 00:02:41.340
And like we just said in the lecture, the main difference is the timing of when you can use these functions.

50
00:02:41.850 --> 00:02:42.420
Let me show you.

51
00:02:43.550 --> 00:02:44.600
So this just scroll down.

52
00:02:48.280 --> 00:02:52.380
The Nimmi just say timing is the main difference.

53
00:02:53.070 --> 00:02:58.500
So function declarations can be used in the entire scope.

54
00:02:58.890 --> 00:03:02.070
And what I mean by that, let's just say function.

55
00:03:03.030 --> 00:03:04.410
Declarations.

56
00:03:05.560 --> 00:03:09.460
Can be used in its entire scope.

57
00:03:09.670 --> 00:03:12.880
And yeah, we're just going to be dealing with the global scope.

58
00:03:15.630 --> 00:03:16.680
And I'll show you an example.

59
00:03:17.760 --> 00:03:22.890
This just returned I'll say hi function and said if we want to pass in the user's name and just console,

60
00:03:22.890 --> 00:03:24.600
log the welcome message.

61
00:03:25.700 --> 00:03:30.440
So the first step with the function declaration is to tell JavaScript recreating a function by the function

62
00:03:30.440 --> 00:03:33.770
keyword we call it, say hi.

63
00:03:34.100 --> 00:03:35.390
We call it whatever we want.

64
00:03:35.390 --> 00:03:37.700
In this instance, we want to pass in a name.

65
00:03:37.880 --> 00:03:40.400
And then we write our code in between these curly braces.

66
00:03:40.460 --> 00:03:45.230
And all we want to do here is we want a console log and we're going to use template literals and we're

67
00:03:45.230 --> 00:03:46.310
just going to say hi.

68
00:03:49.970 --> 00:03:50.840
Reasonable function.

69
00:03:51.780 --> 00:03:53.640
And let's invoke the function.

70
00:03:54.030 --> 00:03:54.900
Let's see what happens.

71
00:03:56.290 --> 00:03:58.870
Say hi and we pass in, Tom.

72
00:04:00.230 --> 00:04:02.480
And yes, it's going to console.log, hi, Tom.

73
00:04:03.080 --> 00:04:09.860
But let me ask you this, what happens if we executed that function before we even started the function?

74
00:04:10.100 --> 00:04:10.820
What's going to happen?

75
00:04:12.720 --> 00:04:18.810
Well, look at the comment, function declarations can be used in its entire scope here global.

76
00:04:19.440 --> 00:04:22.980
So if we move the say item to the top.

77
00:04:24.720 --> 00:04:30.180
It's going to work because the possum, when it hits this function, when it's passing the file, even

78
00:04:30.180 --> 00:04:35.750
before it's executed and rendered it to the screen, it's going to have already stored the same high

79
00:04:35.760 --> 00:04:36.180
function.

80
00:04:36.360 --> 00:04:38.710
It's going to know exactly what its function is.

81
00:04:38.710 --> 00:04:43.850
So when you go and call it, even before we've defined it in our code, it will be valid code.

82
00:04:44.100 --> 00:04:47.610
What happens with function, expressions or function expressions?

83
00:04:47.610 --> 00:04:51.600
Function expressions are only accessible.

84
00:04:52.570 --> 00:04:58.250
And usable when it is defined and what I mean by this.

85
00:04:58.270 --> 00:05:03.010
Well, let's create exactly the same function instead of say, hi, let's just call it say by.

86
00:05:05.160 --> 00:05:06.900
So we going to say say bye.

87
00:05:08.380 --> 00:05:12.610
Equals function, an anonymous function, because now we have a name dysfunction.

88
00:05:14.130 --> 00:05:15.450
It's going to be passed in the name.

89
00:05:17.730 --> 00:05:20.160
And here we just want to console log.

90
00:05:21.250 --> 00:05:24.880
Using template literals by and they name.

91
00:05:26.000 --> 00:05:27.650
Again, a very simple function.

92
00:05:29.120 --> 00:05:32.060
And if you wanting to execute, say by.

93
00:05:33.380 --> 00:05:34.310
With the word Tom.

94
00:05:35.790 --> 00:05:41.190
It works everything at this point works, and you wouldn't have any preference to use one or the other

95
00:05:41.190 --> 00:05:41.970
in this scenario.

96
00:05:42.540 --> 00:05:47.820
But what happens if we execute or we try and execute, say by the fall?

97
00:05:47.820 --> 00:05:51.150
We've declared the variable before we declare the function.

98
00:05:52.950 --> 00:05:53.620
Let's have a look.

99
00:05:53.640 --> 00:05:54.360
Let's move this up.

100
00:05:55.540 --> 00:06:01.030
And look, we're being straight in Iraq, say by is not defined, and that is the point I'm trying to

101
00:06:01.030 --> 00:06:01.710
make with this.

102
00:06:01.720 --> 00:06:06.070
We cannot access function expressions before it is declared.

103
00:06:06.370 --> 00:06:07.270
Just won't let us happen.

104
00:06:07.390 --> 00:06:07.930
I don't know.

105
00:06:07.960 --> 00:06:09.520
It just won't just got to deal with it.

106
00:06:09.730 --> 00:06:10.130
Cool.

107
00:06:10.150 --> 00:06:11.740
And let's carry on.

