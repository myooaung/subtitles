1
00:00:00,120 --> 00:00:04,440
All right, so the question we had in the last picture was, how do we solve this problem?

2
00:00:04,440 --> 00:00:07,830
How do we stop JavaScript from blocking the rendering process?

3
00:00:08,130 --> 00:00:09,060
Well, there are a few ways.

4
00:00:09,360 --> 00:00:11,890
Let's start at the most simple and obvious.

5
00:00:12,360 --> 00:00:17,490
If you've ever taken a we've designed one or one course, this is going to be very familiar to you.

6
00:00:17,940 --> 00:00:24,330
We just placed links to external scripts at the bottom of our atrium health body, and placing links

7
00:00:24,330 --> 00:00:29,760
at the bottom of your page is very similar, if not identical to what you would get.

8
00:00:29,760 --> 00:00:35,940
If you actually listened for the DOM Content loaded event and only ran your JavaScript, then I'll show

9
00:00:35,940 --> 00:00:36,180
you more.

10
00:00:36,180 --> 00:00:43,320
What I mean later, while placing JavaScript resources at the bottom of the HMO remains a standard based

11
00:00:43,320 --> 00:00:43,770
practice.

12
00:00:44,220 --> 00:00:50,370
This method by itself can be suboptimal for eliminating render blocking scripts from the critical path.

13
00:00:51,030 --> 00:00:51,820
Why is this?

14
00:00:52,440 --> 00:00:54,690
Remember what it is we try and do here.

15
00:00:54,990 --> 00:01:00,060
We try to display content above the fold as quickly as possible.

16
00:01:00,480 --> 00:01:06,660
So when the user lands on your website, he sees Boom exactly what you want him to see and everything

17
00:01:06,660 --> 00:01:08,910
below the fold below the screen.

18
00:01:08,940 --> 00:01:12,930
It can kind of happen in the background without the user even knowing before he scrolls down on the

19
00:01:12,930 --> 00:01:16,710
page, whether with his finger on a phone or scroll ball at the mouse, right?

20
00:01:16,770 --> 00:01:18,090
That's what we're trying to achieve.

21
00:01:18,210 --> 00:01:23,820
But placing our JavaScript at the bottom of our file still means that we have to wait for that to be

22
00:01:23,820 --> 00:01:28,740
executed before the final render can occur, you know, and sometimes you want that.

23
00:01:28,740 --> 00:01:34,170
Sometimes you want to pause the rendering process for very critical JavaScript resources and in that

24
00:01:34,170 --> 00:01:36,720
case, continue to put your JavaScript files at the bottom.

25
00:01:36,900 --> 00:01:42,000
It is good in that instance, but sometimes for non-critical resources that can wait.

26
00:01:42,720 --> 00:01:49,320
Why not delay the execution so immediately, the user can see that rendered content on the screen and

27
00:01:49,330 --> 00:01:51,450
in the background before you even scrolls.

28
00:01:51,810 --> 00:01:53,670
You can then continue to build your site.

29
00:01:53,910 --> 00:01:54,300
Cool.

30
00:01:55,050 --> 00:01:56,220
Hope it's making sense.

31
00:01:56,500 --> 00:01:57,030
It's enough.

32
00:01:59,490 --> 00:02:05,220
So, like I said, every step of the way, I want us to start assessing performance at three major milestones

33
00:02:05,220 --> 00:02:07,620
in the critical rendering path process one.

34
00:02:08,070 --> 00:02:11,630
I want to assess where the dumb content loaded event fires to.

35
00:02:11,640 --> 00:02:16,470
I want us to look at where the first meaningful paint occurs and three, I want us to look at the unknown

36
00:02:16,470 --> 00:02:21,120
of it, which is when all the resources have been faced and executed and done and fired.

37
00:02:21,240 --> 00:02:25,620
Now you remember in one of our previous examples, we had this quote in the background.

38
00:02:25,620 --> 00:02:27,300
I don't want to recode everything.

39
00:02:27,390 --> 00:02:30,540
Just to recap, it's very, very simple age html file here.

40
00:02:30,900 --> 00:02:32,970
We've just got hit a thanks.

41
00:02:34,310 --> 00:02:40,750
Then we've got our script tanks and we've got our first in line scripts and console.log in line one,

42
00:02:40,760 --> 00:02:42,380
we then have an external script.

43
00:02:43,770 --> 00:02:48,750
To remind you, let's just look at that is we just change the H to Taylor style to red.

44
00:02:48,960 --> 00:02:49,700
That's what we do.

45
00:02:49,710 --> 00:02:52,410
And then we console.log external one to the screen.

46
00:02:52,890 --> 00:02:54,840
So they our external one script.

47
00:02:55,830 --> 00:03:01,470
We've got another in-line script, and then we've got a full scrub tank again referencing an external

48
00:03:01,470 --> 00:03:05,140
file, and this external file just changes the H.

49
00:03:05,340 --> 00:03:12,600
Three tank and we change its color to blue and within just console.log to the screen, external to simple

50
00:03:12,750 --> 00:03:13,170
nothing.

51
00:03:13,170 --> 00:03:14,490
We I mean, we've been through this example.

52
00:03:14,490 --> 00:03:19,190
We know what it's all about, and then we've got our final in line script, which just console logs

53
00:03:19,200 --> 00:03:21,150
in line three simple.

54
00:03:22,050 --> 00:03:27,060
So this is our default approach where we place our JavaScript at the bottom of the page, and let's

55
00:03:27,060 --> 00:03:28,920
just now get those Tom of of--it's.

56
00:03:30,000 --> 00:03:30,840
Do you remember how to do it?

57
00:03:33,030 --> 00:03:35,090
Mulaney pulls a video, think love.

58
00:03:49,700 --> 00:03:53,540
I hope you gave it a good guy that it's it together, so let's.

59
00:03:54,810 --> 00:03:55,830
Fire up our site.

60
00:03:56,550 --> 00:03:57,720
Now we go make sense.

61
00:03:58,080 --> 00:04:02,850
The first thing I can see is that our external files have worked correctly and if we go back to our

62
00:04:02,850 --> 00:04:03,210
code.

63
00:04:04,250 --> 00:04:05,930
What would we expect to see in the console?

64
00:04:06,380 --> 00:04:12,290
Well, the first thing is that we know that the JavaScript execution happens synchronously, so when

65
00:04:12,290 --> 00:04:15,650
the browser hits the first script tag, everything else falls in line.

66
00:04:15,650 --> 00:04:21,320
One should be console.log to the screen at then hits our external one, the JS file.

67
00:04:22,270 --> 00:04:27,430
And then at pause, everything below it, and it will console.log external one to the screen possible,

68
00:04:27,430 --> 00:04:30,640
then hit the next crop tank, which is just console logging in line two.

69
00:04:30,910 --> 00:04:33,430
It'll then hit the external to the JS file.

70
00:04:33,580 --> 00:04:41,020
And finally, the possible hit the lost script tank, which just console logs in line three to the screen.

71
00:04:41,680 --> 00:04:50,590
So expect the solution to be what that's right in line one external one in line to external two and

72
00:04:50,590 --> 00:04:51,250
inline three.

73
00:04:52,090 --> 00:04:54,220
So if we go here and we inspect our document.

74
00:04:55,500 --> 00:04:56,730
And we go to the console.

75
00:04:57,750 --> 00:05:02,670
In line, one external one in line to external two and in line three.

76
00:05:03,330 --> 00:05:07,200
So this is all making sense now to get those time metrics.

77
00:05:07,230 --> 00:05:12,480
Let's go to the Performance tab and let's start profiling this process.

78
00:05:12,990 --> 00:05:13,680
So let's do that.

79
00:05:16,820 --> 00:05:17,500
And there we go.

80
00:05:19,580 --> 00:05:22,010
What I want to do now is I want to go on to the event log.

81
00:05:23,100 --> 00:05:26,760
And what's really cause we've got this full term, so we don't have to go and scroll down everywhere,

82
00:05:26,760 --> 00:05:29,530
we can just go cool, what is the dumb content loaded event?

83
00:05:30,000 --> 00:05:33,330
And we can see that happens at one hundred and sixty seven milliseconds.

84
00:05:33,390 --> 00:05:38,400
Have you got that one hundred and sixty seven point nine milliseconds?

85
00:05:39,000 --> 00:05:42,250
That's how long it took to fire the dumb Clinton loaded event.

86
00:05:42,270 --> 00:05:42,810
Remember that?

87
00:05:42,810 --> 00:05:43,140
No.

88
00:05:44,370 --> 00:05:47,430
Now, the meaningful paint will again.

89
00:05:48,740 --> 00:05:51,020
It's really handy because we can just like paint on the screen.

90
00:05:51,170 --> 00:05:52,040
How long did that take?

91
00:05:52,220 --> 00:05:57,710
Well, if you click on this paint activity, you can see in the right hand side of the page that it

92
00:05:57,710 --> 00:05:59,960
actually gives you a display of what that paint did.

93
00:05:59,990 --> 00:06:03,220
Well, I'm actually in the way, so let me just remove myself quickly.

94
00:06:03,960 --> 00:06:08,270
OK, maybe you can see that better now that the right part of the screen and zoom in a little bit.

95
00:06:08,990 --> 00:06:09,620
Can you see it?

96
00:06:10,340 --> 00:06:13,430
So there's not the paint we want because no color has been changed.

97
00:06:13,450 --> 00:06:13,880
It hasn't.

98
00:06:14,270 --> 00:06:15,110
What about the next one?

99
00:06:16,190 --> 00:06:21,110
The next one is only executed the very first external one JavaScript file, so it's still not quite

100
00:06:21,110 --> 00:06:21,560
what we want.

101
00:06:22,220 --> 00:06:26,640
If we go on to the last point, we can see that that's exactly what we want the user to see.

102
00:06:26,660 --> 00:06:29,420
We wanted to see the black header one tank.

103
00:06:29,720 --> 00:06:32,890
We want to hit it to to be changed to red and hit a three tablet.

104
00:06:33,710 --> 00:06:34,880
So how long did that take?

105
00:06:35,210 --> 00:06:37,970
Two hundred point four milliseconds OK.

106
00:06:38,900 --> 00:06:39,770
Remember that number?

107
00:06:40,430 --> 00:06:47,270
And lastly, I want us to look at the load of it, and you just zoom out changing and you can see if

108
00:06:47,270 --> 00:06:52,550
we look at our main tab, you can kind of see the load event happened at roughly just the full 300 milliseconds

109
00:06:52,640 --> 00:06:54,230
because there are a lot of load events that happen.

110
00:06:54,230 --> 00:06:59,750
Bear in mind that this isn't the final load when we fail to for this, the loss of event loads that

111
00:06:59,750 --> 00:07:03,740
are happening, like when the jobs report gets executed, when your pulse is finished, all that kind

112
00:07:03,740 --> 00:07:04,070
of stuff.

113
00:07:04,070 --> 00:07:11,300
So the one that we are interested in is this event out here, 281 point four milliseconds, you mean

114
00:07:11,300 --> 00:07:13,850
just a up, so you can see here.

115
00:07:14,450 --> 00:07:15,510
Can you see it there?

116
00:07:16,590 --> 00:07:21,290
You mean just do this and then make the smaller lift us up and then you can see it.

117
00:07:21,470 --> 00:07:21,980
There you go.

118
00:07:22,130 --> 00:07:26,960
There's the event load at two hundred and eighty one point four milliseconds if you got that cool.

