1
00:00:00,480 --> 00:00:05,430
OK, so let's start by showing you what the for each method does.

2
00:00:05,760 --> 00:00:06,900
Let's open up Chrome again.

3
00:00:08,090 --> 00:00:10,940
And you can see we've even got our previous example still on the screen.

4
00:00:11,150 --> 00:00:15,530
I'm going to be cutting this in real time with you and to prove that you need just medication us off

5
00:00:15,530 --> 00:00:16,450
just second.

6
00:00:16,470 --> 00:00:17,570
Second, just give me a second.

7
00:00:19,070 --> 00:00:19,670
And there we go.

8
00:00:19,700 --> 00:00:20,060
All right.

9
00:00:20,120 --> 00:00:21,170
So here I am with you.

10
00:00:21,170 --> 00:00:25,540
I'm coding in real time, and I just want to show you what the for each method is meant to do.

11
00:00:25,580 --> 00:00:27,250
And I want to give you an example.

12
00:00:27,260 --> 00:00:28,480
It isn't so easy.

13
00:00:28,490 --> 00:00:32,630
You know, I can just use an array and we just loop through the rain console, load those items, but

14
00:00:32,640 --> 00:00:33,080
always try.

15
00:00:33,080 --> 00:00:37,760
And I mean, I think you get the point now, especially with this course that you understand at a high

16
00:00:37,760 --> 00:00:43,400
level of JavaScript is so let's let's create two arrays and we take all the elements in the one array

17
00:00:43,400 --> 00:00:47,120
and we pushed them into the second array yeasted, something a bit more different.

18
00:00:48,050 --> 00:00:50,030
So the first step is let's create another file.

19
00:00:50,570 --> 00:00:51,280
Another snippet.

20
00:00:51,710 --> 00:00:53,540
And it's just cool that for each.

21
00:00:55,650 --> 00:00:58,830
Now, the first thing I want to do is create an array.

22
00:00:59,490 --> 00:01:00,930
Let's just call it array one.

23
00:01:04,290 --> 00:01:07,200
And let's just have this full of food, let's just say milk.

24
00:01:09,220 --> 00:01:09,670
And he.

25
00:01:11,290 --> 00:01:12,900
And I don't know, shouldn't.

26
00:01:14,530 --> 00:01:18,760
It create an array to and at this stage, it's just an empty array.

27
00:01:19,120 --> 00:01:23,770
The next step is, you guessed it, let's create a for each loop.

28
00:01:23,980 --> 00:01:24,580
Let's do it.

29
00:01:25,030 --> 00:01:27,130
So let's access array one.

30
00:01:28,400 --> 00:01:34,670
And on this array, one, we should have access to the for each method natively because we know that

31
00:01:34,670 --> 00:01:39,590
every era on our Brasa has a prototype and their prototype has the for each method.

32
00:01:41,770 --> 00:01:46,020
And remember what the for each method took, what was the argument rigged to provide innocent?

33
00:01:46,910 --> 00:01:47,510
That's right.

34
00:01:48,310 --> 00:01:51,910
The callback function so has provided a callback function.

35
00:01:53,640 --> 00:01:58,470
The callback function took two arguments, well, actually two three, remember, but the third one

36
00:01:58,470 --> 00:02:00,990
I just want to ignore for our purposes, it takes two.

37
00:02:01,620 --> 00:02:04,800
And the first argument is the actual item in the array.

38
00:02:05,100 --> 00:02:07,590
And for argument's sake, let's you and I just call that item.

39
00:02:07,590 --> 00:02:08,699
We can call whatever we want.

40
00:02:09,389 --> 00:02:12,930
And the second item we passed in this function is the index.

41
00:02:13,170 --> 00:02:16,260
And again, for simplicity, let's just call it index.

42
00:02:16,800 --> 00:02:23,250
Now what this allows us to do is that this for each method is going to iterate over one and each time

43
00:02:23,250 --> 00:02:28,500
it iterate over the array one, it's going to take each item in that array and it's going to throw us

44
00:02:28,500 --> 00:02:30,090
back an item in an index.

45
00:02:30,390 --> 00:02:31,580
What do we want to do with that?

46
00:02:31,590 --> 00:02:34,680
Will it push the item into the new array array two?

47
00:02:35,130 --> 00:02:36,850
So let's access Array two.

48
00:02:37,560 --> 00:02:40,980
Let's push each item into this array and others push me.

49
00:02:40,990 --> 00:02:46,080
That is very similar to the four each in that it's on the array prototype, meaning we have access to

50
00:02:46,080 --> 00:02:47,730
it natively straight out of the box.

51
00:02:48,060 --> 00:02:49,620
We're going to use template literals here.

52
00:02:50,970 --> 00:02:52,440
And we're going to access the item.

53
00:02:53,930 --> 00:02:56,300
We should say has been added.

54
00:02:58,950 --> 00:02:59,760
As no.

55
00:03:00,710 --> 00:03:05,870
And they will also access the index, and then the last thing I want to do is I want to show you what

56
00:03:05,870 --> 00:03:06,800
this array looks like.

57
00:03:07,430 --> 00:03:10,220
So let's run this function by pushing control.

58
00:03:10,220 --> 00:03:10,580
Enter.

59
00:03:10,940 --> 00:03:11,690
And there we go.

60
00:03:11,870 --> 00:03:13,760
We can see what the result is on the screen.

61
00:03:13,790 --> 00:03:18,320
Milk has been added as nO0 and he's been enters number one and should have been added as number two.

62
00:03:18,650 --> 00:03:20,660
And of course, we can even improve on this code.

63
00:03:20,670 --> 00:03:24,540
We know that the new and improved way of doing things is the error syntax.

64
00:03:24,570 --> 00:03:26,060
You can get rid of the keyword function.

65
00:03:27,060 --> 00:03:30,960
And we can put arrows and ticks over here and we can run it again.

66
00:03:31,830 --> 00:03:36,060
Sorry, we have to refresh to refresh our code, let's clear the console and let's run it.

67
00:03:37,690 --> 00:03:38,150
Here we go.

68
00:03:38,170 --> 00:03:42,280
We had exactly the same result, but now we're using the new and improved aero syntax.

69
00:03:42,700 --> 00:03:48,160
Before we move on is one more thing I need to mention with this for each method, and that is what is

70
00:03:48,310 --> 00:03:49,930
this referring to?

71
00:03:50,140 --> 00:03:55,990
Well, one way of testing what this refers to is let's just console.log it out, console.log this.

72
00:03:57,680 --> 00:04:01,160
And again, just to refresh, it's clear the console and its right.

73
00:04:03,030 --> 00:04:08,610
What this tells us is that the this keyword is currently referring to the window object.

74
00:04:09,080 --> 00:04:12,270
And this makes sense, and we're going to get into this in more detail later.

75
00:04:12,270 --> 00:04:14,670
So I don't want to hop on why this happens now.

76
00:04:14,700 --> 00:04:15,960
I'm going to be talking about that.

77
00:04:15,960 --> 00:04:17,130
So just hang on for that.

78
00:04:17,279 --> 00:04:21,950
But with this, for each method, it actually takes two arguments.

79
00:04:21,959 --> 00:04:27,300
The first argument was the callback function, which we've done, but the second argument over here.

80
00:04:27,550 --> 00:04:31,680
It's also interesting that lets us define what we want this to point to.

81
00:04:32,310 --> 00:04:38,100
So for example, if we wanted this 2.0 array one, we could just pass array one into the second argument.

82
00:04:39,340 --> 00:04:43,030
OK, let's refresh, let's clear this console in this run, this again.

83
00:05:02,740 --> 00:05:08,230
We still referring to the winter object, this is a nuance of error syntax if we fall back to old function

84
00:05:09,130 --> 00:05:09,610
keyword.

85
00:05:10,510 --> 00:05:11,590
And we get rid of the error.

86
00:05:12,610 --> 00:05:14,290
And now we do exactly the same thing.

87
00:05:15,040 --> 00:05:15,960
We run this again.

88
00:05:16,850 --> 00:05:20,990
The we got we get this referring to the actual array.

89
00:05:21,140 --> 00:05:26,060
Okay, so just bear that in mind with the error syntax, it really does handle the word this differently.

90
00:05:26,630 --> 00:05:29,660
But as the for each method is just shown, it two arguments.

91
00:05:29,660 --> 00:05:31,270
First argument is the core function.

92
00:05:31,280 --> 00:05:34,910
The second argument is what you want this to refer to.

93
00:05:34,910 --> 00:05:39,530
But if you are using that, you have to fall back to the old way of writing a function.

94
00:05:39,740 --> 00:05:46,520
Q I know that's a lot, but you doing so on this continue and get into writing our very own poly.

