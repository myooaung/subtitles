1
00:00:00,530 --> 00:00:06,650
OK, so here we are, and I want us to start coding together, but I want us to go step by step slowly,

2
00:00:06,650 --> 00:00:07,730
slowly catch a monkey.

3
00:00:09,050 --> 00:00:14,810
The first thing we mentioned is that this index of existence on two data types in JavaScript and the

4
00:00:14,810 --> 00:00:17,990
first item type we are looking at is the array semi.

5
00:00:17,990 --> 00:00:24,920
Prove it to you before we go further in our coding when a console log all its just console dir.

6
00:00:25,430 --> 00:00:30,080
The array object if we openness and we look at its prototype.

7
00:00:31,620 --> 00:00:35,050
There is an index of method.

8
00:00:35,400 --> 00:00:36,000
Here we go.

9
00:00:36,540 --> 00:00:37,170
Can you see it?

10
00:00:38,840 --> 00:00:44,720
So now I've just proven to you that it does exist on the array, the global array object in JavaScript.

11
00:00:45,320 --> 00:00:46,400
That's where it comes from.

12
00:00:47,090 --> 00:00:47,480
All right.

13
00:00:47,570 --> 00:00:48,980
Now let's go to our coding editor.

14
00:00:49,550 --> 00:00:55,610
I've just got a blank JS file open here and I'm running Qualcomm quick is very useful, by the way.

15
00:00:56,090 --> 00:00:58,850
There is a useful I keep saying it, but it is very good.

16
00:00:59,570 --> 00:01:03,020
OK, the first thing I want to kind of get across to use one is an array.

17
00:01:03,350 --> 00:01:07,190
Well, firstly, let's create an array and we use it by the square brackets here.

18
00:01:07,190 --> 00:01:11,900
And I just want to say I am the first element.

19
00:01:13,990 --> 00:01:21,940
And the second element and you guessed it, I am the third element, see how we go.

20
00:01:21,940 --> 00:01:24,790
We've created an array, we've used those square brackets.

21
00:01:25,690 --> 00:01:31,900
And how do we access arrays will first thing I want to mention is that JavaScript arrays Osiris created

22
00:01:32,380 --> 00:01:33,310
what I mean by that.

23
00:01:33,310 --> 00:01:38,380
I just mean that the first element of an array is always indexed at zero.

24
00:01:39,970 --> 00:01:47,620
And the lost element can always be found at the index that's equal to the value of the Erase Links property

25
00:01:48,070 --> 00:01:48,850
minus one.

26
00:01:49,420 --> 00:01:50,320
Let me show you what I mean.

27
00:01:50,830 --> 00:01:58,750
So let's console log our array and remember how I said that it's zero indexed.

28
00:01:58,900 --> 00:02:02,530
So to access the first item in the array, we Typekit zero.

29
00:02:03,130 --> 00:02:07,270
I'm the first element, and of course, we can do that for the next item, right?

30
00:02:07,390 --> 00:02:09,460
We can go zero, one and two.

31
00:02:09,940 --> 00:02:12,430
I'm the first on the second on the third element.

32
00:02:13,840 --> 00:02:14,460
That makes sense.

33
00:02:14,970 --> 00:02:19,920
And the other thing I want to mention is that every Ray has a length property, so if we console.log

34
00:02:19,920 --> 00:02:27,480
out our array and we access this property called links, we know that our array has three items.

35
00:02:27,810 --> 00:02:30,660
So a very handy tip when it comes to coding.

36
00:02:31,290 --> 00:02:32,550
And I'm even going to comment here.

37
00:02:33,300 --> 00:02:35,910
We can always access.

38
00:02:37,130 --> 00:02:38,270
The last item.

39
00:02:39,560 --> 00:02:48,740
In an array like this, and this is very, very useful, so please remember this before I type out the

40
00:02:48,740 --> 00:02:50,990
solution, just think about what it is we've just done.

41
00:02:51,890 --> 00:02:57,950
We know the raised length is three, and if you look at that console just above, we know we've assessed

42
00:02:57,950 --> 00:03:02,690
the lost item by using array and the index two.

43
00:03:03,650 --> 00:03:07,550
Because remember, JavaScript arrays are always indexed at zero.

44
00:03:07,970 --> 00:03:14,930
So we know the lost item in the array is that array length, which is three minus one, which gets us

45
00:03:14,930 --> 00:03:15,380
to two.

46
00:03:16,370 --> 00:03:21,770
So all I'm trying to say is to access the lost item and array, all we have to do is access our array.

47
00:03:22,340 --> 00:03:28,910
And now if you don't know what the link is, it's very handy to access the link property, which in

48
00:03:28,910 --> 00:03:31,970
this case is undefined because there is no fourth item in the array.

49
00:03:32,360 --> 00:03:33,800
So you always minus one.

50
00:03:34,520 --> 00:03:35,270
Does that make sense?

51
00:03:35,660 --> 00:03:36,200
I hope so.

52
00:03:36,470 --> 00:03:39,320
And I hope you sign to get a more intuitive feel about how arrays work.

53
00:03:39,890 --> 00:03:41,180
The other thing I want to mention.

54
00:03:41,570 --> 00:03:43,040
Let's just delete this man.

55
00:03:43,040 --> 00:03:44,480
I hate deleting stuff sometimes.

56
00:03:44,720 --> 00:03:49,070
Have you spent so long to try and get a point across and then I just delete it?

57
00:03:49,250 --> 00:03:51,560
It's a bit sad, man up, dude.

58
00:03:51,680 --> 00:03:52,000
All right.

59
00:03:52,010 --> 00:03:55,190
But anyway, let's create a new right one, two and three.

60
00:03:55,680 --> 00:04:01,820
The other thing I want to just mention with arrays that are quite peculiar is that you cannot use the

61
00:04:01,830 --> 00:04:03,920
dot notation to access items.

62
00:04:04,160 --> 00:04:05,270
This is an important point.

63
00:04:05,300 --> 00:04:11,870
So for example, if we console.log our array and we try and get the first item, it's not going to let

64
00:04:11,870 --> 00:04:12,410
us do it.

65
00:04:12,650 --> 00:04:14,690
We actually get a syntax error.

66
00:04:14,960 --> 00:04:15,980
So just bear that in mind.

67
00:04:16,160 --> 00:04:19,500
And it's not, you know, there's nothing special about this.

68
00:04:19,519 --> 00:04:23,870
In fact, JavaScript properties that begin with a digit can never be referenced.

69
00:04:23,870 --> 00:04:27,860
The documentation must voice assistant using bracket notation.

70
00:04:28,190 --> 00:04:29,600
It's just a nuance of JavaScript.

71
00:04:29,600 --> 00:04:30,170
Don't worry.

72
00:04:30,660 --> 00:04:34,240
OK, but you are probably wondering why I don't want to learn about arrays.

73
00:04:34,250 --> 00:04:38,360
We are on the topic of index of and you are 100 percent correct.

74
00:04:38,390 --> 00:04:41,360
I just wanted to kind of get you familiar with arrays before we jump into it.

75
00:04:42,260 --> 00:04:42,650
OK.

76
00:04:43,340 --> 00:04:49,910
The point I want to make with index of is that it returns the first index at which a given element can

77
00:04:49,910 --> 00:04:51,950
be found in the array.

78
00:04:52,670 --> 00:04:56,510
If it doesn't exist in the array, negative one is returned.

79
00:04:57,380 --> 00:04:58,370
What do I mean?

80
00:04:58,520 --> 00:05:04,490
Will lead us to find an array called animals, and it's got a warthog.

81
00:05:05,300 --> 00:05:06,470
It's got a giraffe.

82
00:05:07,740 --> 00:05:13,020
And it says, got a buffalo and it say it's got a lion.

83
00:05:14,510 --> 00:05:15,590
How does it work?

84
00:05:15,980 --> 00:05:20,960
Well, let's look, it's console.log so we can actually see the result of what we're producing.

85
00:05:21,080 --> 00:05:26,960
The first thing in order to access our index is to access an array and array.

86
00:05:26,960 --> 00:05:29,240
We're going to access is our animals.

87
00:05:29,270 --> 00:05:29,650
All right.

88
00:05:30,290 --> 00:05:35,270
We want to now access the index of method, which is inbuilt into all arrays.

89
00:05:36,050 --> 00:05:37,460
And let's search for target.

90
00:05:37,970 --> 00:05:39,350
What would you expect to see?

91
00:05:39,620 --> 00:05:41,720
We is warthog located.

92
00:05:43,160 --> 00:05:45,590
That's right, it's located at index zero.

93
00:05:45,740 --> 00:05:49,880
Remember, JavaScript arrays are always indexed at base zero.

94
00:05:50,630 --> 00:05:52,490
So if we try and find talk.

95
00:05:53,990 --> 00:05:57,710
We can see returned to us is zero.

96
00:05:59,320 --> 00:06:00,250
That makes a lot of sense.

97
00:06:00,670 --> 00:06:02,230
And I'm just going to duplicate this code.

98
00:06:02,660 --> 00:06:04,270
Let's now search for Buffalo.

99
00:06:04,420 --> 00:06:06,460
What do you think the index number there to be?

100
00:06:07,180 --> 00:06:07,700
That's right.

101
00:06:07,720 --> 00:06:10,530
I would expect no to see if that's right.

102
00:06:11,690 --> 00:06:16,050
You know, what I want to do is let search for dog.

103
00:06:16,480 --> 00:06:17,890
What do you think's going to happen with dog?

104
00:06:18,970 --> 00:06:22,960
Well, as I mentioned, if it's not found negative, one is returned to us.

105
00:06:23,500 --> 00:06:24,990
Who does that make sense?

106
00:06:25,510 --> 00:06:28,420
So just remember, negative one means it's not harmful.

107
00:06:28,870 --> 00:06:33,550
And the last thing I want to mention just before we move on is that the index of method compares elements

108
00:06:33,550 --> 00:06:36,670
in your way using strict equality.

109
00:06:37,210 --> 00:06:40,990
In other words, using the same method used by the triple equals sign.

110
00:06:41,530 --> 00:06:42,280
Just remember that.

111
00:06:43,180 --> 00:06:43,500
Cool.

112
00:06:43,600 --> 00:06:48,310
Okay, Clyde, this is all well and good, but we are only using one argument in this index other way.

113
00:06:48,340 --> 00:06:51,310
I want to use both, and I want to understand it in more detail.

114
00:06:51,460 --> 00:06:55,330
Well, it is good to hear my fellow student list delete all these consoles.

115
00:06:56,170 --> 00:07:01,720
Let's now look for this warthog animal, but let's tell our index of that.

116
00:07:01,740 --> 00:07:08,620
We only want to start in the second item in our array, a.k.a. from index one onwards.

117
00:07:09,250 --> 00:07:10,360
What do you think will happen then?

118
00:07:11,690 --> 00:07:16,730
So let's go to our second argument in this method, and it's said we wanted to start from the second

119
00:07:16,730 --> 00:07:17,660
item in their aim.

120
00:07:19,190 --> 00:07:25,580
Well, of course, it doesn't exist because we know we look looking from giraffe onwards and there is

121
00:07:25,580 --> 00:07:27,020
no warthog, the.

122
00:07:28,300 --> 00:07:31,270
Let's look at another example that's now look at Buffalo.

123
00:07:32,680 --> 00:07:38,960
And install our index automated to search from, say, the third item in the.

124
00:07:39,280 --> 00:07:43,810
Number two, and in this case, it does return our index number.

125
00:07:43,900 --> 00:07:46,510
So it's very, very cool and we know it does exist.

126
00:07:46,840 --> 00:07:48,280
This is kind of holistic.

127
00:07:48,280 --> 00:07:50,680
An argument works that kind of making sense.

128
00:07:51,370 --> 00:07:51,890
I hope so.

129
00:07:51,910 --> 00:07:55,480
We worked a lot of the raise, but now I want to jump back to the later and I want us to look at the

130
00:07:55,540 --> 00:07:59,890
second data type where we can start using this index of method.

