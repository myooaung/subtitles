1
00:00:01,040 --> 00:00:06,860
I want us to look at instantiation versus the singleton approach and a bit more detail and in a way

2
00:00:06,860 --> 00:00:07,820
that you can understand.

3
00:00:08,119 --> 00:00:14,060
We've already seen one of the main differences is that with a constructor function, you can instantiate

4
00:00:14,060 --> 00:00:18,440
as many objects as you like and each object will be independent.

5
00:00:18,950 --> 00:00:20,660
It'll be a brand new object.

6
00:00:20,840 --> 00:00:26,960
However, with object literal syntax when you go and create an object, it always references the same

7
00:00:26,990 --> 00:00:28,360
original object.

8
00:00:28,370 --> 00:00:31,250
And this is known in the programming industry and you can google it.

9
00:00:32,470 --> 00:00:33,460
Singleton.

10
00:00:36,160 --> 00:00:39,040
Object literal syntax, you're literally creating a singleton.

11
00:00:39,370 --> 00:00:45,400
All it means is that an object can only be instantiated once and that any references to that object

12
00:00:45,400 --> 00:00:48,550
in the future, even if anyone still refers to the same object.

13
00:00:48,580 --> 00:00:49,480
Let me show you what I mean.

14
00:00:49,840 --> 00:00:55,090
So here we're going to be creating a constructor versus literal.

15
00:00:57,450 --> 00:00:59,460
And let's first look at a constructive function.

16
00:01:01,130 --> 00:01:01,640
OK, cool.

17
00:01:01,670 --> 00:01:02,300
Let's get into it.

18
00:01:02,870 --> 00:01:04,519
Let's create a person object.

19
00:01:04,670 --> 00:01:09,200
And let's assume we want to give certain default values to this person object.

20
00:01:09,350 --> 00:01:14,930
For example, let's say that we want the membership status to be false.

21
00:01:15,440 --> 00:01:19,190
And then only once the user goes through the whole signup process does it actually become true.

22
00:01:20,090 --> 00:01:24,680
It's also give it a default name, and let's even put an a in the image show you what I mean.

23
00:01:25,040 --> 00:01:28,370
So let's created by the constructor function and remember what the two steps are.

24
00:01:28,370 --> 00:01:29,120
What's the first step?

25
00:01:30,470 --> 00:01:35,030
It's right, the first step is to define our object using the function keyword.

26
00:01:35,390 --> 00:01:37,610
The second step is to call that object.

27
00:01:37,850 --> 00:01:41,360
So let's do the first step and that is to define object.

28
00:01:42,080 --> 00:01:43,640
Let's just call our object person.

29
00:01:47,200 --> 00:01:51,490
Let's say this membership status is false.

30
00:01:52,490 --> 00:01:56,630
And we'll say this name is just give a default name of only.

31
00:02:00,570 --> 00:02:05,160
And now let's just put in a message as well to make it more interesting, and let's call this method

32
00:02:05,310 --> 00:02:05,700
talk.

33
00:02:10,500 --> 00:02:15,180
And in this method, let's just console log and we'll use template literals.

34
00:02:15,300 --> 00:02:18,270
We've been through this before, we know what these are and we'll just say.

35
00:02:19,890 --> 00:02:20,340
The.

36
00:02:21,580 --> 00:02:23,500
Membership status.

37
00:02:24,650 --> 00:02:25,130
Of.

38
00:02:27,500 --> 00:02:29,120
This person's name is.

39
00:02:33,180 --> 00:02:34,920
This membership status.

40
00:02:39,520 --> 00:02:40,250
So there we have it.

41
00:02:40,270 --> 00:02:43,480
We have a constructive function object all set up, ready to go.

42
00:02:43,720 --> 00:02:45,070
You remember what the second step was?

43
00:02:45,070 --> 00:02:46,560
How do we how do we access this?

44
00:02:46,570 --> 00:02:47,830
How do we create a new object?

45
00:02:47,950 --> 00:02:48,400
That's right.

46
00:02:48,400 --> 00:02:49,420
We instantiated.

47
00:02:50,260 --> 00:02:55,360
You need to instantiate the object before you can use it.

48
00:02:55,480 --> 00:03:00,150
And let's say a user comes in our sorts and for lack of a better word, let's just call in person one

49
00:03:00,310 --> 00:03:01,300
because new.

50
00:03:02,420 --> 00:03:08,360
Person, and now it's cool as we have access to all these objects, we've seen this before in our example

51
00:03:08,900 --> 00:03:12,050
says I just console one person one and we access the top method.

52
00:03:12,950 --> 00:03:14,450
We go console logs.

53
00:03:14,630 --> 00:03:20,410
The membership status of Wally is false and this is straight out of the box as what's really cool about

54
00:03:20,420 --> 00:03:21,370
constructor functions.

55
00:03:21,380 --> 00:03:24,890
But let me show you the difference is now, because that's what this list is all about.

56
00:03:25,010 --> 00:03:26,900
Let's say a second person comes along.

57
00:03:27,530 --> 00:03:34,670
Lake Person two equals new person, and let's say this person two goes through the registration process

58
00:03:34,670 --> 00:03:35,750
and he changes his name.

59
00:03:37,560 --> 00:03:38,800
And his name isn't Wally.

60
00:03:39,490 --> 00:03:40,120
It's John.

61
00:03:42,050 --> 00:03:42,980
When you get rid of this.

62
00:03:47,270 --> 00:03:51,530
Each person will be, and this is the crux of it, unique.

63
00:03:53,140 --> 00:03:55,030
So if we go person one to talk.

64
00:03:56,050 --> 00:03:58,420
We've got a membership status of what is false.

65
00:03:59,380 --> 00:04:03,610
But now, if we got person to dot org, what do you expect would happen?

66
00:04:08,860 --> 00:04:09,400
That's right.

67
00:04:09,790 --> 00:04:15,190
The membership status of John was false, and now we've literally created two different objects that

68
00:04:15,190 --> 00:04:16,209
are independent from each other.

69
00:04:16,660 --> 00:04:21,910
I can even go and person two and I can go person two memberships that are say they go through the whole

70
00:04:21,910 --> 00:04:25,450
membership, they pay their membership fees and now their membership status is true.

71
00:04:26,930 --> 00:04:28,430
You've got two distinct objects.

72
00:04:28,520 --> 00:04:29,270
How causes?

73
00:04:30,030 --> 00:04:34,100
And now you're probably wondering, okay, cool constructor functions, you've got it like it's making

74
00:04:34,100 --> 00:04:37,880
sense, but how as object literal syntax work?

75
00:04:38,050 --> 00:04:43,130
Well, initially, let me show you what I mean by the fact that object literal syntax creates a singleton

76
00:04:43,700 --> 00:04:44,130
campus.

77
00:04:44,530 --> 00:04:45,590
Let's create now.

78
00:04:48,230 --> 00:04:50,450
Latrell Centex approach.

79
00:04:54,380 --> 00:04:56,570
And let's start defining our object.

80
00:04:58,630 --> 00:05:00,250
We've got a person we've got.

81
00:05:01,280 --> 00:05:04,220
Membership status.

82
00:05:05,430 --> 00:05:07,830
And we're going to set that to false as the initial value.

83
00:05:08,490 --> 00:05:13,020
We've got a name which we're going to say to Wally is the initial value and we've got our talk function.

84
00:05:15,360 --> 00:05:18,780
We'll talk method, and all that does is console looks.

85
00:05:20,920 --> 00:05:23,590
The membership status of.

86
00:05:24,930 --> 00:05:27,030
This name is.

87
00:05:29,270 --> 00:05:29,660
This.

88
00:05:30,870 --> 00:05:31,800
Their mission status.

89
00:05:32,310 --> 00:05:32,940
So there you have it.

90
00:05:32,970 --> 00:05:37,460
These are object literal object that we've just created, but how is this different to the first?

91
00:05:37,470 --> 00:05:38,040
I'm interested.

92
00:05:38,520 --> 00:05:41,460
Well, let's comment all of this out, so we don't get confused.

93
00:05:42,450 --> 00:05:43,080
It's just common.

94
00:05:43,350 --> 00:05:46,560
Everything else the and start looking at this house is different.

95
00:05:47,130 --> 00:05:51,720
Well, the first difference is that we can use this object straight off the bat.

96
00:05:51,750 --> 00:05:53,550
We don't have to instantiate it first.

97
00:05:53,730 --> 00:05:54,590
Let me show you what I mean.

98
00:05:54,600 --> 00:05:57,720
So this person, we can access a talk method directly.

99
00:05:58,350 --> 00:05:59,820
We don't have to go person.

100
00:05:59,820 --> 00:06:02,880
One equals new person with the object, literal syntax.

101
00:06:02,880 --> 00:06:03,990
We can use it straight away.

102
00:06:04,080 --> 00:06:06,150
And what I mean by this is a singleton.

103
00:06:06,850 --> 00:06:07,560
Let me show you.

104
00:06:08,370 --> 00:06:12,210
Say we wanted to create Tom that uses this object.

105
00:06:12,600 --> 00:06:13,830
Construct how we do it.

106
00:06:14,050 --> 00:06:18,670
Well, you can't just call person the same way we did with the constructor function.

107
00:06:18,690 --> 00:06:21,840
We can't just say it tongue equals new person.

108
00:06:22,290 --> 00:06:23,750
It's going to throw an era.

109
00:06:23,750 --> 00:06:25,710
And you know, we see a person is not a constructor.

110
00:06:25,770 --> 00:06:27,480
It's literally told us we are doing it.

111
00:06:27,600 --> 00:06:30,120
But what about just saying, well, if Tom equals?

112
00:06:31,150 --> 00:06:31,600
Person.

113
00:06:32,470 --> 00:06:34,060
OK, so it looks like we can do that.

114
00:06:34,270 --> 00:06:36,230
That's console.log, Tom.

115
00:06:36,850 --> 00:06:39,160
And it has accessed all those properties and methods.

116
00:06:39,520 --> 00:06:39,930
Cool.

117
00:06:39,940 --> 00:06:42,380
It's all good, but let's try to change Tom's name.

118
00:06:42,400 --> 00:06:44,320
Let's say Tom, his name.

119
00:06:44,920 --> 00:06:46,510
And you guessed, this is Tom.

120
00:06:47,490 --> 00:06:50,260
And now let's create a second person, second person comes along.

121
00:06:50,760 --> 00:06:51,240
Sydney.

122
00:06:52,950 --> 00:06:54,570
And Cindy says, OK, who?

123
00:06:55,720 --> 00:06:59,140
Cindy's name is Cindy.

124
00:07:02,110 --> 00:07:06,760
What do you think's going to happen, not when we access the top method on top men and talk method on

125
00:07:06,760 --> 00:07:07,090
Cindy?

126
00:07:07,120 --> 00:07:09,130
Well, let me first do the talk meter on Cindy.

127
00:07:09,140 --> 00:07:10,390
It's more intuitive talk.

128
00:07:12,160 --> 00:07:15,290
You need just console.log this oxygen infused Vega.

129
00:07:15,450 --> 00:07:18,460
So Cindy says the membership status of Cindy is false.

130
00:07:18,480 --> 00:07:20,070
It makes sense.

131
00:07:20,100 --> 00:07:22,380
What about if I access the talk methadone, Tom?

132
00:07:24,680 --> 00:07:31,590
Tom, talk, I know it seems the membership status of Cindy is false, says still referring to Cindy.

133
00:07:31,880 --> 00:07:34,220
And this is the point I'm trying to make with object.

134
00:07:34,220 --> 00:07:37,880
Literal syntax is that it's always working with the original object.

135
00:07:38,330 --> 00:07:41,750
So any change you do here will affect that original object.

136
00:07:42,290 --> 00:07:44,760
Let me just drive this point home by giving you one more quick.

137
00:07:44,780 --> 00:07:53,360
A quick example with the literal notation you are always dealing with the same object.

138
00:07:53,990 --> 00:07:54,260
Ding.

139
00:07:54,260 --> 00:07:54,800
Ding, ding.

140
00:07:54,890 --> 00:07:55,610
Singleton.

141
00:07:56,950 --> 00:07:59,350
It creates an original object.

142
00:08:01,090 --> 00:08:03,850
With name, virginal, simple.

143
00:08:06,090 --> 00:08:10,470
Now, let's create a clone and then just equals the original object.

144
00:08:11,570 --> 00:08:13,940
And this clone, we want to give a name of Clone.

145
00:08:16,590 --> 00:08:18,810
So all we've done now is we've taken the original object.

146
00:08:19,260 --> 00:08:20,700
We've created a new variable.

147
00:08:20,940 --> 00:08:22,770
You mean, just comment all these aren't.

148
00:08:23,970 --> 00:08:25,200
So we don't get confused.

149
00:08:29,470 --> 00:08:30,130
Original.

150
00:08:31,770 --> 00:08:32,280
There you go.

151
00:08:32,760 --> 00:08:37,140
So all we trying to do here just take a step back as we've created an original object called original

152
00:08:37,140 --> 00:08:42,090
and we've given in the name of original reasoning to find a new variable that is that object.

153
00:08:42,100 --> 00:08:46,860
So you'd almost think intuitively what should happen is you've created a brand new object in memory

154
00:08:46,860 --> 00:08:48,960
space that references a brand new object.

155
00:08:49,530 --> 00:08:53,820
Then on that brand new object that we think has been created, we give it a new name of time.

156
00:08:53,850 --> 00:08:59,430
So now you think that the two objects in memory one with the name turn one with the name original but

157
00:08:59,430 --> 00:09:00,710
with object literal syntax?

158
00:09:00,720 --> 00:09:02,340
This is a point that doesn't happen this way.

159
00:09:02,970 --> 00:09:04,640
It references the same object.

160
00:09:04,680 --> 00:09:13,370
So if I want to access the original object and console it and look at that, its name has now been changed

161
00:09:13,380 --> 00:09:20,490
to Clone who this has been very importantly, to fight few tickets and very few people understand the

162
00:09:20,650 --> 00:09:21,810
differences between the two.

163
00:09:22,170 --> 00:09:24,390
It's continue because I do want to show you one more example.

