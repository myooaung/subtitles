WEBVTT
1
00:00:00.240 --> 00:00:06.540
To determine whether the full each method exists on our browser, we can use the console, we can write

2
00:00:06.600 --> 00:00:07.470
a bit of JavaScript.

3
00:00:08.010 --> 00:00:09.420
So let's open up Chrome.

4
00:00:11.210 --> 00:00:14.570
Which is what I'm doing here, and let's access the console.

5
00:00:20.420 --> 00:00:24.020
And very few people are going to know this, so call this a protest.

6
00:00:24.410 --> 00:00:25.730
They are two different places.

7
00:00:25.730 --> 00:00:28.040
We can write JavaScript within Chrome.

8
00:00:28.490 --> 00:00:36.020
The first and most obvious places in the console, for example, we can console log Hi Wally, and as

9
00:00:36.020 --> 00:00:38.600
we would expect, that would return high quality to the console.

10
00:00:38.900 --> 00:00:43.610
This is where most people go to write JavaScript, but it can be cumbersome because we have to execute

11
00:00:43.610 --> 00:00:45.980
each line of code line by line.

12
00:00:46.850 --> 00:00:51.560
There's a better way, a more fun and intuitive, and a just a better way.

13
00:00:52.130 --> 00:00:52.790
Where do we go?

14
00:00:53.600 --> 00:00:54.890
Well, on the source's tab.

15
00:00:57.180 --> 00:01:00.870
And within the Sources tab, we can create what they call a new snippet.

16
00:01:01.770 --> 00:01:04.530
And we can call a file anything, let's call it.

17
00:01:05.640 --> 00:01:07.740
Native support tastes.

18
00:01:08.780 --> 00:01:13.400
Because that's what we're doing now, how do we test whether the for each method exists?

19
00:01:13.430 --> 00:01:17.990
Well, the first thing you need to know is that the for each method exists on the prototype of every

20
00:01:17.990 --> 00:01:19.100
single array.

21
00:01:19.640 --> 00:01:26.240
What this means is that when we create an array automatically has access to all the methods and properties

22
00:01:26.240 --> 00:01:30.470
attached to that prototype, of which one of them should be the for each method.

23
00:01:31.280 --> 00:01:37.670
So let's just test whether the for each returns undefined because if it does return undefined, it means

24
00:01:37.670 --> 00:01:40.670
that it doesn't have support for a browser doesn't know what it is.

25
00:01:41.820 --> 00:01:45.870
So one way to do this, and in many ways, I understand that I'm just doing a quick and dirty method.

26
00:01:46.530 --> 00:01:48.540
We access the array object.

27
00:01:49.410 --> 00:01:51.120
We access its prototype.

28
00:01:52.100 --> 00:01:58.460
And on that prototype, it should be a for each method if it is natively supported, and that should

29
00:01:58.460 --> 00:02:00.170
not return undefined.

30
00:02:00.470 --> 00:02:03.500
And if it does return undefined, we know that it doesn't exist.

31
00:02:04.160 --> 00:02:06.400
Now there are two ways we can run this JavaScript.

32
00:02:06.410 --> 00:02:10.880
You can push, control, enter on your keyboard or we can click the place on.

33
00:02:11.270 --> 00:02:12.500
So I'm just going to click the place on.

34
00:02:14.330 --> 00:02:15.020
And there we go.

35
00:02:15.530 --> 00:02:16.670
It returns true.

36
00:02:17.030 --> 00:02:20.150
It means that the for each is not equal to undefined.

37
00:02:20.570 --> 00:02:25.910
And there you have it that we've just confirmed that the four each is natively supported on my current

38
00:02:25.910 --> 00:02:27.200
version of Chrome.

39
00:02:29.360 --> 00:02:35.600
OK, so we've seen our browser does support the for each method, it's on every single array that we

40
00:02:35.600 --> 00:02:38.330
create and it's on the prototype of the array.

41
00:02:38.660 --> 00:02:45.020
But in order to illustrate what a polypill is, let's just pretend that our browser is so old that it

42
00:02:45.020 --> 00:02:47.150
doesn't know the for each function.

43
00:02:47.540 --> 00:02:49.940
So going forward, just put that at the back of your mind.

44
00:02:49.940 --> 00:02:56.330
Let's just pretend that it actually is undefined before each method so it doesn't exist on our browser.

45
00:02:56.930 --> 00:02:57.230
Cool.

46
00:02:57.260 --> 00:02:58.610
I think that's enough of this lecture.

47
00:02:58.610 --> 00:03:03.490
We've gone through a lot in a short space of time and the next feature, let's start building this party

48
00:03:03.510 --> 00:03:03.710
for.

