1
00:00:00,300 --> 00:00:04,980
This might be a little bit advanced, but I believe, I believe you guys can do it.

2
00:00:05,220 --> 00:00:12,180
It's interesting in the sense that we're going to be using a debugger tool in Chrome to ascertain whether

3
00:00:12,180 --> 00:00:14,940
our variables are local or globally scoped.

4
00:00:15,630 --> 00:00:16,500
How cool is this?

5
00:00:17,220 --> 00:00:21,090
So let's quickly create something that we can test our variables in.

6
00:00:22,050 --> 00:00:27,750
Well, let's start with an HTML document, a standard template. And let's start writing our JavaScript.

7
00:00:27,930 --> 00:00:30,720
Remember, JavaScript has to be inserted within script tags.

8
00:00:33,780 --> 00:00:37,800
And now let's define a variable called age, let's make that equal 3.

9
00:00:39,120 --> 00:00:40,470
And we know this is a string (OOOPS).

10
00:00:45,210 --> 00:00:50,370
And we know this is a number. And we would expect this to be a global variable.

11
00:00:50,550 --> 00:00:51,390
So let's say

12
00:00:52,710 --> 00:00:56,160
a global variable with type

13
00:00:57,160 --> 00:00:57,520
number.

14
00:00:58,780 --> 00:00:59,920
Now, let's create a function.

15
00:01:01,820 --> 00:01:04,640
And let's just call it scope() for lack of a better word.

16
00:01:05,660 --> 00:01:07,490
And let's create another variable now.

17
00:01:09,210 --> 00:01:11,280
But let's make this a string and say it's "young".

18
00:01:14,300 --> 00:01:17,810
And take a step back, what scope do you think this would have?

19
00:01:19,390 --> 00:01:20,390
Hope you said local.

20
00:01:21,890 --> 00:01:22,520
Local

21
00:01:23,670 --> 00:01:25,320
variable with type

22
00:01:27,940 --> 00:01:28,360
string.

23
00:01:31,230 --> 00:01:32,610
And now I'm going to get more complicated.

24
00:01:32,790 --> 00:01:33,510
Let's create

25
00:01:37,940 --> 00:01:38,360
a block.

26
00:01:41,260 --> 00:01:45,040
And let's create yet another variable. For the age this time, let's call it "old". 

27
00:01:48,720 --> 00:01:50,010
And in isolation

28
00:01:51,180 --> 00:01:53,770
what would this IF block be? What scope would that be?

29
00:01:55,330 --> 00:02:00,910
Yes, it would be a local scope, it would be a local block scope to be specific.

30
00:02:01,570 --> 00:02:03,820
This should be a local block

31
00:02:04,480 --> 00:02:07,560
scope variable with type String.

32
00:02:10,490 --> 00:02:18,440
And to test it, we can console log age over here. Outside this IF statement, outside that block, we can

33
00:02:18,440 --> 00:02:19,850
console.log age.

34
00:02:22,270 --> 00:02:23,770
And outside everything

35
00:02:25,060 --> 00:02:26,950
we can console.log age.

36
00:02:29,960 --> 00:02:34,970
And remember, to execute a function we have to call its name, which we've called scope, with brackets.

37
00:02:36,720 --> 00:02:42,090
Now you might be sitting there wondering, how do we know whether our variables are locally or globally

38
00:02:42,090 --> 00:02:46,080
scoped? And if it's even locally scoped, how do we know whether its function scoped or block scoped?

39
00:02:47,110 --> 00:02:50,260
Well, one way is to just use theory, sit down and figure it out.

40
00:02:50,890 --> 00:02:52,870
But the other ways to use Google DevTools.

41
00:02:53,470 --> 00:02:57,880
But before we get into DevTools, I just want you and I to think about each one individually.

42
00:02:58,840 --> 00:03:00,400
The first age on the screen,

43
00:03:02,230 --> 00:03:03,730
that I'd expect to be global.

44
00:03:05,980 --> 00:03:09,340
We've defined that age outside everything.

45
00:03:09,700 --> 00:03:10,990
Then we get to the function.

46
00:03:11,650 --> 00:03:17,140
So when we define new age equals "young", I would expect that to only be available in function.

47
00:03:17,860 --> 00:03:22,690
And then when we nest another block within that function, that age equals "old".

48
00:03:22,690 --> 00:03:26,920
I would expect that to be only locally available within that block.

49
00:03:28,480 --> 00:03:29,440
Does it kind of make sense?

50
00:03:30,130 --> 00:03:32,440
So how do we see this in DevTools?

51
00:03:33,600 --> 00:03:38,190
Well, there is another keyword in JavaScript, and that is "debugger". When you put that in your code and the

52
00:03:38,190 --> 00:03:44,130
interpreter comes across it, it literally pauses the execution of JavaScript and it defines the variables

53
00:03:44,130 --> 00:03:44,520
for you.

54
00:03:45,180 --> 00:03:46,080
Let's see it in action.

55
00:03:46,740 --> 00:03:47,970
So where do we want to put these?

56
00:03:47,970 --> 00:03:49,800
Well, let's say on the first age.

57
00:03:51,280 --> 00:03:54,980
On the global level, we want the debugger to stop execution.

58
00:03:55,000 --> 00:03:56,350
We wanna see what that age is.

59
00:03:57,220 --> 00:03:59,560
Then we get into the function. We defined

60
00:03:59,560 --> 00:04:00,460
age equals "young".

61
00:04:00,700 --> 00:04:02,080
Let's see at this point

62
00:04:04,210 --> 00:04:10,780
what scope that age has. And then when we get into the second nested block, let's do the same thing.

63
00:04:12,600 --> 00:04:17,370
All we've gotta do now is start the server, and we should be able to see the results in the browser.

64
00:04:17,970 --> 00:04:23,350
And we've got a blank screen, and you'd expect a blank screen because we haven't defined any HTML. So, it makes

65
00:04:23,370 --> 00:04:23,570
sense.

66
00:04:23,970 --> 00:04:27,720
What we interested in now, though, is the JavaScript and those variables.

67
00:04:28,770 --> 00:04:31,670
And this time, we're not going to be looking at the Console tab.

68
00:04:32,830 --> 00:04:35,410
We're going to be looking at the Sources tab.

69
00:04:36,860 --> 00:04:39,990
So, let's go into Sources. And as soon as we refresh,

70
00:04:40,010 --> 00:04:41,360
let me just make this a bit wider,

71
00:04:42,490 --> 00:04:48,290
as soon as we refresh, I would expect that debugger to kick in. Let's refresh the page. 

72
00:04:49,010 --> 00:04:50,750
And there, we've hit our first debugger.

73
00:04:51,500 --> 00:04:56,780
And at this point, we've defined age within the script, which is global and you can see on the right

74
00:04:56,780 --> 00:04:57,950
that's exactly what's happened.

75
00:05:00,780 --> 00:05:03,960
It's got a "Scope" tab, and we can see the scope of our variables.

76
00:05:05,750 --> 00:05:09,350
And remember how I said the interpreter executes code from top to bottom?

77
00:05:09,980 --> 00:05:13,940
Well, this means that it's going to skip over this function for now because we haven't executed the

78
00:05:13,940 --> 00:05:14,330
function.

79
00:05:14,510 --> 00:05:19,760
This is only defining the function and it should hit this console.log age expression.

80
00:05:21,170 --> 00:05:22,130
Let's see if that happens.

81
00:05:23,120 --> 00:05:26,480
And it does. It hits the console.log age expression.

82
00:05:27,480 --> 00:05:29,670
And at this point in time, what is age?

83
00:05:32,090 --> 00:05:32,730
That's right.

84
00:05:32,750 --> 00:05:35,630
It's the global age, it's the number 3.

85
00:05:36,530 --> 00:05:42,080
So when we step over this and it executes and we just tab over to our Console tab, there's the number

86
00:05:42,080 --> 00:05:42,380
3.

87
00:05:43,440 --> 00:05:44,660
But let's go back to our Sources tab.

88
00:05:44,660 --> 00:05:46,790
Let's continue. Now,

89
00:05:46,820 --> 00:05:49,940
it's hit this scope function and it's going to execute the function.

90
00:05:51,290 --> 00:05:52,700
So let's execute the function.

91
00:05:53,090 --> 00:05:56,750
So here, it's hit age equals "young".

92
00:05:57,840 --> 00:06:03,060
But look what it's done within the Scope tab, it's actually created a local variable.

93
00:06:03,510 --> 00:06:06,810
And at this point, the variable is still undefined.

94
00:06:07,170 --> 00:06:09,660
Remember, you need to declare a variable.

95
00:06:10,050 --> 00:06:11,430
Then it gets initialized.

96
00:06:11,460 --> 00:06:13,440
And this is what it's done here, its initialized,

97
00:06:14,070 --> 00:06:18,450
but it hasn't yet been assigned a value - that comes in the next step.

98
00:06:21,550 --> 00:06:22,180
Step down.

99
00:06:23,020 --> 00:06:29,500
We stop at our debugger. Now it's assigned a value to the variable, and that is "young".

100
00:06:31,280 --> 00:06:36,950
Let's continue, let's go into this IF block. I would expect the debugger to stop now at the age again.

101
00:06:40,760 --> 00:06:41,860
That's exactly what it's done.

102
00:06:42,430 --> 00:06:47,800
I hope you're starting to feel how cool this is. This is awesome, and you're probably actually understanding

103
00:06:47,800 --> 00:06:48,010
this.

104
00:06:49,330 --> 00:06:53,650
Very few people do. So well done. So now we've hit this IF block.

105
00:06:54,190 --> 00:06:57,880
We've got the next "age", which we've defined as "old". Again,

106
00:06:58,240 --> 00:07:00,340
it's been initialized, but not yet assigned a value.

107
00:07:00,640 --> 00:07:01,540
But now it's been assigned.

108
00:07:02,780 --> 00:07:04,730
Age is the value "old".

109
00:07:06,410 --> 00:07:10,580
Now, when we hit this console.log age, we are still within this block.

110
00:07:11,300 --> 00:07:16,910
So at this point in time in our code, we have access to the block variable, the local variable and

111
00:07:16,910 --> 00:07:18,620
the global variable. How cool is that? 

112
00:07:19,280 --> 00:07:20,480
So, let's keep going down.

113
00:07:22,580 --> 00:07:27,600
When we hit this console.log age, it's gonna console.log "old"

114
00:07:27,700 --> 00:07:30,200
I would expect, because we're within this block.

115
00:07:30,890 --> 00:07:36,770
So we step over that, let's head over to our Console, and there's "old". So it's working.

116
00:07:37,430 --> 00:07:38,600
We go to our Sources tab.

117
00:07:39,080 --> 00:07:40,910
Now we're hitting console log age.

118
00:07:40,910 --> 00:07:42,860
But at this point in our code, look what's happened.

119
00:07:43,400 --> 00:07:47,140
Our scope block doesn't have a block variable anymore.

120
00:07:48,580 --> 00:07:50,470
It only has local and global.

121
00:07:50,740 --> 00:07:53,350
And at the moment, we're in the local scope because that's at the top.

122
00:07:55,240 --> 00:07:57,460
So our age is defined as "young".

123
00:07:58,600 --> 00:07:59,860
SJOE, this blows my mind.

124
00:08:00,220 --> 00:08:00,610
Cool

125
00:08:00,790 --> 00:08:02,500
let's continue, so let me step over this. 

126
00:08:03,250 --> 00:08:05,590
I would expect "young" to have been consoled.

127
00:08:06,470 --> 00:08:08,020
That's exactly what's happened.

128
00:08:08,590 --> 00:08:10,630
So I hope this was a nice little bonus for you.

129
00:08:10,660 --> 00:08:18,190
(music starts)
I hope this sets you on the path to using the debugger tools to understand globally, locally function 

130
00:08:18,190 --> 00:08:19,200
scoped and block scoped variables.

131
00:08:28,390 --> 00:08:28,800
(music continues)

