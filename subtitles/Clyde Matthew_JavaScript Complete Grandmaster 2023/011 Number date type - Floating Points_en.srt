1
00:00:00,330 --> 00:00:01,260
What about Numbers?

2
00:00:02,400 --> 00:00:07,830
Well, you've got two broad categories of programming languages. You've got statically typed languages and then

3
00:00:07,830 --> 00:00:13,140
you've got JavaScript, which is dynamic and flexible. With statically typed languages,

4
00:00:13,980 --> 00:00:15,780
they have different types of numbers.

5
00:00:17,040 --> 00:00:22,260
They have to store numbers in different ways. In Java,

6
00:00:22,680 --> 00:00:25,740
you've got bytes and integers,

7
00:00:26,670 --> 00:00:32,640
you've got doubles and floats. In the programming language of C, you've got char and you've got long.

8
00:00:33,480 --> 00:00:37,680
Oh, it just gets so confusing and you have to understand the differences between all these different

9
00:00:37,680 --> 00:00:41,190
types of numbers in order to know what to use in the most optimal way.

10
00:00:42,830 --> 00:00:50,060
The good news is that JavaScript only has one type of number, and that number is called a floating

11
00:00:50,270 --> 00:00:51,470
point number.

12
00:00:51,560 --> 00:00:52,280
It's called a float.

13
00:00:53,090 --> 00:00:56,480
A float just means that it's a number that can have decimals.

14
00:00:57,350 --> 00:01:01,820
So the important thing you must just bear in mind is that internally, JavaScript just has one type

15
00:01:02,030 --> 00:01:05,000
for numbers, and that number is a float.

16
00:01:06,690 --> 00:01:09,840
But what exactly is a floating number?

17
00:01:10,500 --> 00:01:15,750
Well, according to the ECMAScript Standard there is only one type of number, and that number is called

18
00:01:15,750 --> 00:01:20,460
a double-precision 64-bit binary value.

19
00:01:21,000 --> 00:01:21,940
That's what the number is.

20
00:01:22,230 --> 00:01:25,410
And this number is used to store both integers and fractions.

21
00:01:26,040 --> 00:01:29,850
And it's the equivalent of a double data type in Java and C. 

22
00:01:31,520 --> 00:01:38,300
So we know JavaScript numbers are always stored as double floating point numbers. And I'm going to

23
00:01:38,300 --> 00:01:45,380
state the rather obvious and that is computer memory is limited, so we can't store numbers with infinite

24
00:01:45,380 --> 00:01:52,760
precision. A number format has to be created to provide accuracy for numbers at different magnitudes.

25
00:01:53,950 --> 00:01:57,280
And this is where floating point numbers come into the picture.

26
00:01:58,630 --> 00:02:05,830
And to best explain what a floating point number is, let's just look at how JavaScript stores your

27
00:02:05,830 --> 00:02:10,000
number. JavaScript code takes two paths to remember your input.

28
00:02:10,780 --> 00:02:14,650
In other words, your number is broken into two categories.

29
00:02:15,550 --> 00:02:21,760
The first category is the actual number, the significant number and the other category is the location

30
00:02:22,270 --> 00:02:24,550
of the decimal or the point.

31
00:02:25,780 --> 00:02:28,390
Let's try and visually represent what that means.

32
00:02:28,510 --> 00:02:32,500
So let's take the number 0.005 as an example.

33
00:02:32,770 --> 00:02:35,200
What's the most significant number in that string?

34
00:02:35,800 --> 00:02:41,020
Well, it's five. And that five is referred to as the significant.

35
00:02:42,070 --> 00:02:49,220
It's the significant number. It's also known as the mantissa. Having that five is not enough.

36
00:02:49,240 --> 00:02:55,240
We need to know where that decimal point belongs and that's where the 10 to the -3 comes

37
00:02:55,240 --> 00:02:55,660
into it.

38
00:02:55,870 --> 00:03:01,000
I've used 10 here, which is base 10, and the need of 3 is known as the exponent.

39
00:03:01,900 --> 00:03:06,520
And what's interesting through all this is that that five, that's significant.

40
00:03:06,850 --> 00:03:12,250
It may represent an integer or number with a fractional part. And bear with me

41
00:03:12,340 --> 00:03:14,470
you are gonna see the relevance of this very shortly.

42
00:03:15,070 --> 00:03:16,690
So we can write this another way.

43
00:03:17,140 --> 00:03:22,540
We can change that 5.0 to 50.0. 

44
00:03:23,380 --> 00:03:27,490
Now, all we need to do is get rid of the -3 exponent and change it with a ...

45
00:03:28,030 --> 00:03:28,780
-4.

46
00:03:29,740 --> 00:03:32,590
And this gets us to the moral of the story, and that is,

47
00:03:32,590 --> 00:03:36,940
the term floating point refers to the fact that the numbers decimal point,

48
00:03:37,150 --> 00:03:39,610
we've just seen that, can float.

49
00:03:40,270 --> 00:03:44,740
You can write it as 5.0 or you can write it as 50.0.

50
00:03:45,790 --> 00:03:50,740
And as we've learned, the original position, the actual number you want to get is indicated by the

51
00:03:50,740 --> 00:03:51,310
exponent.

52
00:03:52,510 --> 00:03:57,040
But this is not to say JavaScript is not weird or that this method is perfect.

53
00:03:57,460 --> 00:04:00,490
Let me show you an example now of why it's not perfect.

