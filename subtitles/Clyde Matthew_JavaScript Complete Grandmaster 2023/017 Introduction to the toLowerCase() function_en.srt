1
00:00:00,360 --> 00:00:06,150
Who I guess what I just did this morning, my very first time I did a yoga session and I'm shattered.

2
00:00:06,300 --> 00:00:12,330
We did this thing called angles cold and the bird of paradise pose through my mind.

3
00:00:12,520 --> 00:00:18,450
So anyway, I'm in a lot of pain right now, but that should not stop us learning about JavaScript.

4
00:00:18,660 --> 00:00:23,340
And very specifically, I want us to learn about this method called to lower case.

5
00:00:24,570 --> 00:00:28,890
It sounds simple, but I just want you to understand exactly how it works, because it's a very, very

6
00:00:28,890 --> 00:00:33,690
useful method provided to us straight out of the box by JavaScript.

7
00:00:33,840 --> 00:00:37,800
Now, although it doesn't take any arguments, it is a super practical method.

8
00:00:38,220 --> 00:00:38,760
Why?

9
00:00:39,150 --> 00:00:47,460
Well, in many cases you want your takes or you want your strings to be case insensitive, a.k.a. you

10
00:00:47,460 --> 00:00:49,940
don't want capital to think whatever it is you're doing.

11
00:00:50,430 --> 00:00:55,530
For example, if you've got a list and a user types in a certain word, sometimes you want to see or

12
00:00:55,530 --> 00:01:01,020
you want to compare whether that word is in the list and you don't want capital to ruin your formulas

13
00:01:01,350 --> 00:01:02,100
in that case.

14
00:01:02,130 --> 00:01:04,470
Why not just convert everything to lowercase?

15
00:01:04,860 --> 00:01:08,070
And in order to do that, we use the two lowercase method.

16
00:01:08,340 --> 00:01:13,560
So without further ado, let's jump into the presentation quickly, and let's start talking about the

17
00:01:13,560 --> 00:01:14,760
two lowercase method.

18
00:01:14,940 --> 00:01:15,450
Enjoy.

19
00:01:16,980 --> 00:01:20,520
So what exactly is this two lowercase method?

20
00:01:21,230 --> 00:01:24,420
Well, very simplistically, all it does, and it's very intuitive.

21
00:01:24,720 --> 00:01:28,080
It converts your text all into lowercase.

22
00:01:28,680 --> 00:01:33,990
In other words, the two lowercase method returns the calling string, the string you've called it on.

23
00:01:34,440 --> 00:01:39,180
It converts it strings value all into lowercase, and I could just stop here.

24
00:01:39,180 --> 00:01:42,420
But I want you to know just a little bit more about this two lowercase method.

25
00:01:42,870 --> 00:01:48,630
Firstly, it is a JavaScript function is provided to us by the JavaScript language.

26
00:01:49,100 --> 00:01:52,950
Second, D does not take any arguments, but don't let that fool you.

27
00:01:52,950 --> 00:01:54,570
It's still a very powerful method.

28
00:01:55,050 --> 00:02:00,660
And what I really want you to understand here and I want to pause on this point, is that the two lowercase

29
00:02:00,660 --> 00:02:04,440
method does not alter the original string.

30
00:02:04,770 --> 00:02:07,770
Instead, it generates a new modified string.

31
00:02:08,100 --> 00:02:10,530
Yes, with all lowercase letters.

32
00:02:11,160 --> 00:02:14,340
Then we hop over to the console and show you what I mean by this.

33
00:02:15,300 --> 00:02:18,760
OK, so we know that the lowercase method does not affect the original string.

34
00:02:18,780 --> 00:02:20,850
I just want to prove it to you now.

35
00:02:21,000 --> 00:02:22,350
How am I going to do that?

36
00:02:22,380 --> 00:02:26,520
Well, let's create a string, and let's just call it sentence original.

37
00:02:27,030 --> 00:02:33,840
And it's just say we make that equal to crazy frogs or just, well, you know, crazy.

38
00:02:34,740 --> 00:02:35,190
How's it?

39
00:02:36,660 --> 00:02:39,030
And then let's create a new sentence.

40
00:02:39,290 --> 00:02:42,150
OK, so let's call it sentence lower.

41
00:02:43,020 --> 00:02:46,500
And here I want us to access our original sentence.

42
00:02:47,400 --> 00:02:49,160
And this is what I want us to do next.

43
00:02:49,170 --> 00:02:52,680
I want us to access the two lower case method.

44
00:02:53,130 --> 00:02:59,400
And what's really awesome is that because we have a string and this sentence original is Typekit string,

45
00:02:59,640 --> 00:03:04,410
we automatically have access to JavaScript to lower case made it onto.

46
00:03:04,410 --> 00:03:07,650
We access that we existed with the dot notation.

47
00:03:08,840 --> 00:03:16,040
And of course, we can just start typing to lowercase and our I.D. already picks up this method so I

48
00:03:16,040 --> 00:03:20,270
can just click tab open and close parentheses to execute that method.

49
00:03:20,870 --> 00:03:22,430
And we are done and dusted.

50
00:03:22,910 --> 00:03:28,610
Now I can open up a browser and we can console.log things to the screen, but I want to use something

51
00:03:28,610 --> 00:03:29,800
called quokka.

52
00:03:31,890 --> 00:03:36,590
If we go to my Extensions tab here and I just start typing Quokka.

53
00:03:38,010 --> 00:03:40,780
You can see I've installed Quokka in my I.D..

54
00:03:40,830 --> 00:03:43,260
It's really, really useful, so highly recommend it.

55
00:03:43,800 --> 00:03:48,530
And all we need to do to run Quokka is we literally call up the search box here.

56
00:03:49,170 --> 00:03:51,210
Push control, shift p on my keyboard.

57
00:03:51,690 --> 00:03:53,820
And I want to start quokka on the current file.

58
00:03:54,120 --> 00:03:59,190
It's just an extra plug in and that allows us to execute JavaScript in real time in this file.

59
00:03:59,640 --> 00:04:00,330
It's all it does.

60
00:04:00,720 --> 00:04:05,870
So here we go, and all I want to do is I want to log out the sentence original.

61
00:04:06,330 --> 00:04:08,750
And you can see the blue ticks there.

62
00:04:08,910 --> 00:04:10,330
That's what's being consoled.

63
00:04:10,360 --> 00:04:12,630
Let's see what's being returned to us by JavaScript.

64
00:04:12,630 --> 00:04:13,860
And this is quokka working.

65
00:04:13,860 --> 00:04:16,649
It just allows us to see our effects in real time.

66
00:04:16,860 --> 00:04:17,730
Very useful.

67
00:04:18,600 --> 00:04:22,740
Now what do you think is going to happen when we return sentence lower?

68
00:04:23,890 --> 00:04:29,560
Well, I'm sure you've probably already guessed us all that's going to happen as we get exactly the

69
00:04:29,560 --> 00:04:31,420
same thing, but all in lower case.

70
00:04:31,750 --> 00:04:33,700
That's what I've managed to prove to you.

71
00:04:33,700 --> 00:04:35,140
Is that our sentence?

72
00:04:35,140 --> 00:04:35,800
Original.

73
00:04:36,850 --> 00:04:40,270
That original sentence that we wrote together is unchanged.

74
00:04:40,660 --> 00:04:46,450
This two lower case means it does not alter that original string.

75
00:04:46,990 --> 00:04:47,380
OK.

76
00:04:47,420 --> 00:04:48,280
Kind of making sense.

77
00:04:48,460 --> 00:04:48,930
I'm sorry.

78
00:04:49,750 --> 00:04:50,470
Let's continue.

79
00:04:52,030 --> 00:04:55,090
OK, also, we've seen that it doesn't alter the original string.

80
00:04:55,390 --> 00:04:57,160
In fact, it generates a new one.

81
00:04:57,700 --> 00:05:00,010
But at this point in time, you still may be scratching your head.

82
00:05:00,010 --> 00:05:02,230
You may be going cool and know it's provided by JavaScript.

83
00:05:02,800 --> 00:05:04,660
But we exactly.

84
00:05:04,870 --> 00:05:05,620
Does it come from?

85
00:05:05,980 --> 00:05:08,440
And the answer to this is Drumroll, please.

86
00:05:09,610 --> 00:05:12,310
That comes from the string object and JavaScript.

87
00:05:12,730 --> 00:05:18,010
And just remember that the string object is a global object for all strings.

88
00:05:18,550 --> 00:05:22,180
Again, let me hop over to the console and just show you where we can find it.

89
00:05:23,990 --> 00:05:25,970
Let's pick up exactly where we left off.

90
00:05:26,160 --> 00:05:28,790
Remember, we wrote the sentence, we converted it to lowercase.

91
00:05:29,420 --> 00:05:33,500
Now I just want to prove to you that it has to be on a string.

92
00:05:33,950 --> 00:05:38,720
So one way to do it is we use the type of operator that's console.log.

93
00:05:39,910 --> 00:05:41,350
And let's go type of.

94
00:05:41,710 --> 00:05:44,050
And we want to look at what our original.

95
00:05:45,500 --> 00:05:52,840
Time is, and we can see what's returned to us by JavaScript is a string type, so we know our sentence

96
00:05:52,850 --> 00:05:58,130
original variable is a string and that is why we could execute this two lowercase method.

97
00:05:58,640 --> 00:06:05,000
But you probably wondering where is this exact method from and how do you see it?

98
00:06:06,050 --> 00:06:07,670
Well, it is very, very simple.

99
00:06:07,740 --> 00:06:09,620
Let's just go and open up a browser.

100
00:06:09,980 --> 00:06:14,270
So I'm just going to right click on my Chrome new incognito.

101
00:06:15,970 --> 00:06:17,410
And let's go to the console cooking.

102
00:06:19,460 --> 00:06:25,260
That's opened up the console museum, and so you can see what's going on, and it's very simple.

103
00:06:25,260 --> 00:06:28,200
All I want to do is I want a console, dirt and dirt.

104
00:06:28,220 --> 00:06:30,020
By the way, is the front to console log.

105
00:06:30,200 --> 00:06:36,080
It gives us whatever we want to do out, but in JSON like format, in a tree like format.

106
00:06:36,740 --> 00:06:41,390
And of course, what I want to do is I want to get JavaScript string object because remember, we know

107
00:06:41,390 --> 00:06:43,580
our original sentence is a string.

108
00:06:44,750 --> 00:06:46,400
So we know of type string.

109
00:06:47,090 --> 00:06:50,500
And if we open up string again, it's not much on here.

110
00:06:50,510 --> 00:06:51,770
We've got links, we've got name.

111
00:06:52,100 --> 00:06:57,710
But what we want to look at is this prototype because it inherits a lot of methods and properties and

112
00:06:57,710 --> 00:06:59,840
because it's a string, its prototype as a string.

113
00:06:59,840 --> 00:07:03,710
Here we get lots of methods and properties from the string type.

114
00:07:04,430 --> 00:07:08,660
And if we scroll down, we should find two lowercase.

115
00:07:09,770 --> 00:07:16,010
And there it is, yes, and here we go, we've literally famished, you know, exactly where it comes

116
00:07:16,010 --> 00:07:16,340
from.

117
00:07:16,700 --> 00:07:17,770
Hope is making sense.

118
00:07:18,050 --> 00:07:18,860
We're not quite done.

119
00:07:18,860 --> 00:07:20,510
So let's jump back into the ledger.

120
00:07:21,660 --> 00:07:26,160
We've seen that it comes from the string object, and I guess it's quite intuitive.

121
00:07:26,340 --> 00:07:34,350
It only works with strings if you try pulse in other data types such as null, undefined or even a number,

122
00:07:34,650 --> 00:07:37,260
the JavaScript parser will throw you in error.

123
00:07:37,440 --> 00:07:38,850
In fact, you'll get a type error.

124
00:07:39,240 --> 00:07:43,170
So just make sure you take the type before passing it into this function.

125
00:07:43,560 --> 00:07:45,060
Otherwise, your app will crash.

126
00:07:45,360 --> 00:07:47,160
What am I talking about?

127
00:07:47,220 --> 00:07:51,330
Well, let me jump over to the console once again, and let's start coding together just to see this

128
00:07:51,330 --> 00:07:51,780
in action.

129
00:07:52,590 --> 00:07:58,680
One last thing before we finish this off, remember we saying that it can only be used on a string type,

130
00:07:59,430 --> 00:08:00,400
so let's scroll up.

131
00:08:00,420 --> 00:08:03,990
We've actually just finished off, be picking up exactly where we left off.

132
00:08:04,500 --> 00:08:05,460
It's clear the console.

133
00:08:06,030 --> 00:08:07,080
So what does this mean?

134
00:08:07,110 --> 00:08:11,940
Well, this means if we have a number, let's just say eighty font and we try and access to lower case.

135
00:08:13,100 --> 00:08:14,120
What do you think is going to happen?

136
00:08:15,020 --> 00:08:19,300
Well, we get a syntax error, invalid or unexpected token.

137
00:08:19,310 --> 00:08:21,980
We can't call the two lowercase method on a number.

138
00:08:22,640 --> 00:08:23,270
Makes sense.

139
00:08:23,780 --> 00:08:25,760
What about kind of an array?

140
00:08:26,030 --> 00:08:30,080
So say we've got a meringue just with one night a minute called.

141
00:08:30,890 --> 00:08:32,600
And we try access to lowercase.

142
00:08:32,600 --> 00:08:33,350
Is it going to work?

143
00:08:34,010 --> 00:08:35,330
No, we get a type error.

144
00:08:36,169 --> 00:08:38,330
We cannot call this function on that.

145
00:08:38,630 --> 00:08:39,799
What about undefined?

146
00:08:40,460 --> 00:08:43,580
Well, if we try and access again, two lowercase.

147
00:08:45,610 --> 00:08:48,100
On undefined, again, it's not going to work.

148
00:08:48,580 --> 00:08:50,500
And what about now, if we try now?

149
00:08:50,830 --> 00:08:51,640
Do you think that'll work?

150
00:08:52,710 --> 00:08:55,660
You know, so this is the point I'm trying to make.

151
00:08:55,690 --> 00:08:59,050
We can only access the two lowercase method on strings.

152
00:09:00,400 --> 00:09:03,490
I hope you're having fun and I'll be learning a lot.

153
00:09:03,490 --> 00:09:08,710
So this is just a little bit more detail on two lowercase method that you might have not known previously.

154
00:09:09,100 --> 00:09:12,130
Keep going, stay motivated, and I'll see you in the next lecture.

