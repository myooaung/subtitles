WEBVTT
1
00:00:00.090 --> 00:00:04.710
We've seen where we can put inline JavaScript, but how does external JavaScript work?

2
00:00:04.860 --> 00:00:06.120
How do you reference it? Well,

3
00:00:06.510 --> 00:00:08.370
it's not that difficult, as you'll see now.

4
00:00:09.060 --> 00:00:14.610
So all that external JavaScript means is that it's being referenced in an external JS file.

5
00:00:15.270 --> 00:00:22.410
So let's take a step back and think about what a typical website's folder structure may look like.

6
00:00:23.800 --> 00:00:25.240
You can have a config file.

7
00:00:26.110 --> 00:00:33.340
You can have your different models, your different API routes, your different views, your About Us

8
00:00:33.340 --> 00:00:40.300
page, you Contact Us page, your Home Page etc and then you've got this folder called "public".

9
00:00:41.380 --> 00:00:44.920
Within this folder structure, you'll have your index.html file.

10
00:00:45.400 --> 00:00:50.650
Your index.html file is the starting point of your entire site, and that's where the browser is going

11
00:00:50.650 --> 00:00:52.510
to start parsing your HTML.

12
00:00:52.510 --> 00:00:56.440
And that's where you need to reference all the JavaScript from.

13
00:00:57.220 --> 00:01:02.050
And then you may have other files within your folder structure, like package.json, which lists

14
00:01:02.050 --> 00:01:05.770
all your dependencies and all your external third party packages.

15
00:01:06.400 --> 00:01:08.920
Don't worry about all of this now, the detail.

16
00:01:08.920 --> 00:01:14.290
Just understand that on a website, you're going to have a structure, a folder structure.

17
00:01:14.290 --> 00:01:16.330
Within this folder structure, you've got a starting point.

18
00:01:16.330 --> 00:01:18.670
That starting point has to be an index.html file.

19
00:01:19.860 --> 00:01:23.730
But let's look now at this public folder in a bit more detail.

20
00:01:24.890 --> 00:01:32.340
Typically that public folder is going to contain your JavaScript and your CSS. And remember how

21
00:01:32.340 --> 00:01:34.500
we had that index.html file?

22
00:01:34.920 --> 00:01:44.120
We have to make sure that that index.html file references that JavaScript. And that's all that

23
00:01:44.140 --> 00:01:45.180
external JavaScript means. 

24
00:01:45.180 --> 00:01:48.390
It just means we can write JavaScript in another file,

25
00:01:49.080 --> 00:01:51.710
we can even place that file in another folder,

26
00:01:51.750 --> 00:01:54.360
here we've placed JavaScript within a folder called "public",

27
00:01:55.550 --> 00:02:01.490
and your index.html still has to have those script tags, but those script tags now have to

28
00:02:01.490 --> 00:02:04.460
reference a JavaScript file that is located elsewhere.

29
00:02:05.880 --> 00:02:06.600
Simple, right?

30
00:02:06.960 --> 00:02:08.570
Once you get it, it's not difficult.

31
00:02:10.780 --> 00:02:15.490
You are probably sick of this code right now, and we are almost done with it, I promise.

32
00:02:15.820 --> 00:02:17.350
There's just one more thing I want to mention.

33
00:02:17.980 --> 00:02:24.310
Remember how we had to wait five seconds in order for this paragraph text to display on a web page.

34
00:02:25.680 --> 00:02:26.580
That was annoying.

35
00:02:27.000 --> 00:02:33.150
Right, and you can imagine if you're a visitor to a website, you don't want to be waiting five seconds

36
00:02:33.150 --> 00:02:35.220
before you start seeing content on the page.

37
00:02:35.670 --> 00:02:36.720
How do we get around this?

38
00:02:37.530 --> 00:02:40.560
Well, one way is

39
00:02:41.970 --> 00:02:43.840
an attribute called async.

40
00:02:44.220 --> 00:02:46.920
Async was introduced in order to solve this very problem.

41
00:02:47.580 --> 00:02:52.650
The only catch with using the async attribute is that you have to reference your JavaScript from another

42
00:02:52.650 --> 00:02:54.690
file, an external file.

43
00:02:55.410 --> 00:03:01.950
So I'll show you now how to do it, just so you can understand how async fits in and what problem it solves.

44
00:03:03.060 --> 00:03:04.740
So let's create an external file

45
00:03:05.310 --> 00:03:10.140
called main.js - you can call it anything you want. And all I'm going to is 

46
00:03:11.750 --> 00:03:13.670
I'm going to cut out all this code,

47
00:03:15.120 --> 00:03:17.280
and I'm going to place it in this new JavaScript file.

48
00:03:17.580 --> 00:03:18.150
That's all I've done.

49
00:03:21.590 --> 00:03:24.530
Remember to reference an external file

50
00:03:24.590 --> 00:03:28.730
you need the source attribute, and we've called it main.js.

51
00:03:30.010 --> 00:03:33.190
And remember what I said, I said we just want async.

52
00:03:33.520 --> 00:03:34.780
The async attribute.

53
00:03:37.070 --> 00:03:38.150
What do you think's going to happen?

54
00:03:39.530 --> 00:03:41.480
This should solve our problem.

55
00:03:41.570 --> 00:03:42.290
Let's have a look.

56
00:03:47.440 --> 00:03:49.960
You see how the text was immediately displayed.

57
00:03:50.680 --> 00:03:51.430
Problem solved.

58
00:03:51.790 --> 00:03:53.710
And you can see the loading has just finished now

59
00:03:54.010 --> 00:03:58.390
and that's when the JavaScript has been fully completed in the console.

