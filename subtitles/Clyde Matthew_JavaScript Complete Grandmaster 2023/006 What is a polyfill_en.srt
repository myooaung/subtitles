1
00:00:00,330 --> 00:00:05,160
Consider this a bonus lecture, because we're going to go on a bit of a tangent, but I think it's very

2
00:00:05,160 --> 00:00:08,490
important to understand and is a very good example of what we've been talking about.

3
00:00:08,820 --> 00:00:13,590
So taking a step back, we've seen that for many years, different browsers have only followed a small

4
00:00:13,590 --> 00:00:17,310
parts of the specifications set by the W3C.

5
00:00:17,550 --> 00:00:24,240
And this meant that browsers had different rules in some browsers, followed certain HTML and CSS code,

6
00:00:24,360 --> 00:00:25,320
and others didn't.

7
00:00:25,620 --> 00:00:26,640
So that's the first problem.

8
00:00:26,640 --> 00:00:31,380
The second problem is we've also got other standards like Ignace script and all all the script.

9
00:00:31,530 --> 00:00:33,730
And of course, the problem again, is twofold.

10
00:00:33,750 --> 00:00:39,900
One, certain browsers don't follow all of ActionScript recommendations and to the script gets updated.

11
00:00:40,050 --> 00:00:43,260
Same as with the W3C specifications.

12
00:00:43,860 --> 00:00:47,850
So over time, new functions and new methods get created.

13
00:00:48,360 --> 00:00:49,090
So what does this mean?

14
00:00:49,110 --> 00:00:53,130
Well, this means all the browsers don't understand the code of the new rules.

15
00:00:53,550 --> 00:00:54,480
Makes sense, right?

16
00:00:54,810 --> 00:00:57,870
And this is why we mentioned polyphenols in the previous lecture.

17
00:00:58,290 --> 00:01:00,960
So what is a polyphenol will at its very core?

18
00:01:01,380 --> 00:01:02,250
It's very simple.

19
00:01:02,680 --> 00:01:05,820
The polyphenols just a piece of code that provides a fallback.

20
00:01:05,820 --> 00:01:09,360
If certain features don't exist within that browser's engine.

21
00:01:10,050 --> 00:01:15,510
In JavaScript, Landis will be in that browser's JavaScript engine, but it doesn't have to be JavaScript.

22
00:01:15,630 --> 00:01:16,380
And this is important.

23
00:01:16,380 --> 00:01:21,420
Many people think of poly falls just for JavaScript, but you also get policies for HTML and CSS code,

24
00:01:21,420 --> 00:01:23,910
which will also get into tiny bit more later.

25
00:01:23,910 --> 00:01:27,930
But we are going to focus on this JavaScript piece because this is what's interesting and this is what's

26
00:01:27,930 --> 00:01:29,640
more complicated when it comes to death.

27
00:01:30,240 --> 00:01:36,600
Now, police also usually follow a pattern, and the pattern starts with a simple question Does the

28
00:01:36,600 --> 00:01:38,160
feature exist within the browser?

29
00:01:38,640 --> 00:01:41,580
And if the answer's yes, well, then we don't need a poly for.

30
00:01:41,820 --> 00:01:47,010
We can just resort to the browser's engine to handle that certain HTML, CSS or JavaScript.

31
00:01:47,580 --> 00:01:48,780
It gets more interesting.

32
00:01:48,810 --> 00:01:55,530
Of course, if the feature doesn't exist within the browser and this is where we have to use a poly

33
00:01:55,530 --> 00:01:55,800
for.

34
00:01:56,840 --> 00:02:02,750
Keeping track of the ever evolving age, HTML five inches is three support in today's way, browsers

35
00:02:02,750 --> 00:02:05,720
can be an overwhelming task and it can be pretty daunting.

36
00:02:06,140 --> 00:02:11,600
Sure, we can all use awesome CSS animations to create some whiz bang effects, but should we?

37
00:02:12,140 --> 00:02:14,540
And which browsers support that certain feature?

38
00:02:14,750 --> 00:02:17,600
And what do we do about all the browsers that don't understand that code?

39
00:02:18,200 --> 00:02:23,750
And of course, this is where Polly Falls come into the picture and the website, and this is just one

40
00:02:23,750 --> 00:02:26,360
of many HTML5, please.

41
00:02:26,870 --> 00:02:32,570
It's useful for finding policies that do a particular job, as Jamal sliced these up as a whole list

42
00:02:32,570 --> 00:02:39,170
of HTML5 elements and SEISS three rules with an overview of browser support and any poly falls for each

43
00:02:39,320 --> 00:02:40,250
elements listed.

44
00:02:41,520 --> 00:02:47,430
Before we move on, I just want to say we did mention Babel as an example of a for not Babel was more

45
00:02:47,430 --> 00:02:49,260
targeted at JavaScript.

46
00:02:49,920 --> 00:02:54,550
To remind you, ActionScript version six was a major update of JavaScript.

47
00:02:54,570 --> 00:03:00,270
They brought new features and lots of some tactical additions, but iOS six was later renamed to iOS

48
00:03:00,270 --> 00:03:01,290
12 15.

49
00:03:01,560 --> 00:03:04,260
And this was just done to reflect the changes in the release cycle.

50
00:03:04,470 --> 00:03:09,240
So when we use Babel, if you want to support Internet Explorer, for example, or you'd like to use

51
00:03:09,240 --> 00:03:14,370
the latest ActionScript features in a browser that doesn't support it yet, then we use Babel, who

52
00:03:14,430 --> 00:03:18,660
I know we're going through a lot, but nothing is better than with an example.

53
00:03:18,870 --> 00:03:20,470
So why don't we build our own file?

54
00:03:20,520 --> 00:03:22,680
Then that'll help you understand how these things work.

55
00:03:23,430 --> 00:03:29,880
And today, let's implement our own poly file for the arrays for each method.

56
00:03:30,690 --> 00:03:34,890
This was introduced in JavaScript one point six or eight script for sedition.

57
00:03:35,370 --> 00:03:41,370
In reality, for each is a very well supported feature today, but I've chosen it more for the fact

58
00:03:41,370 --> 00:03:46,350
that it's fairly simple to reconstruct, and I can walk you through building this party for step by

59
00:03:46,350 --> 00:03:46,650
step.

60
00:03:47,280 --> 00:03:51,840
But I should note at this point that this implementation is by no means going to be fully fledged comprehensive

61
00:03:51,840 --> 00:03:56,850
one that's just going to be a way for you to really solidify understanding of what a Polyvore is.

62
00:03:57,510 --> 00:04:01,320
So if you really wanted to get into the nitty gritty of certain polyphenols for certain functions,

63
00:04:01,560 --> 00:04:04,620
I recommend visiting Mozilla Documentation Network.

64
00:04:04,620 --> 00:04:07,710
Or indeed, I'll put a link at the end of this lecture.

65
00:04:08,490 --> 00:04:14,220
OK, so we've just said we're going to be building our own for each poly full and remember what the

66
00:04:14,220 --> 00:04:15,180
first step was?

67
00:04:15,510 --> 00:04:18,570
What is the first question a polypill has to ask in order for it to be implemented?

68
00:04:19,589 --> 00:04:20,220
That's right.

69
00:04:20,250 --> 00:04:23,100
Does the browser support that feature?

70
00:04:23,370 --> 00:04:28,680
So the first step is let's check to see with for each method is natively supported by our browser.

71
00:04:28,950 --> 00:04:29,640
Let's go have a look.

