WEBVTT
1
00:00:00.210 --> 00:00:05.370
Now, let's get into the "let" keyword. You've seen me write it in my code.

2
00:00:05.400 --> 00:00:08.880
And this is a new way to declare variables.

3
00:00:09.390 --> 00:00:17.820
It was introduced in ES2015 and "let" has scope constraints, which is actually very good because

4
00:00:17.820 --> 00:00:23.140
what that allows you to do is it allows you to define where your variable has meaning and where it doesn't.

5
00:00:23.880 --> 00:00:25.410
And don't worry about scope yet.

6
00:00:25.410 --> 00:00:26.550
We'll chat about that later.

7
00:00:26.910 --> 00:00:29.730
Just know that "let" variables cannot be re-declared.

8
00:00:30.270 --> 00:00:35.910
So let me give you an example. If we write let name equals Wally Smart, and further down our code

9
00:00:35.910 --> 00:00:38.040
we go let name equals Wally Stupid, 

10
00:00:38.670 --> 00:00:43.980
JavaScript is going to give us an error, saying that "name" has already been defined. And this is a good thing,

11
00:00:43.980 --> 00:00:44.240
right?

12
00:00:44.250 --> 00:00:46.770
We don't want our containers getting messed up, and the the same name

13
00:00:46.770 --> 00:00:53.400
containers in our pantry. We should have distinct names for distinct variables, and you'll be a very happy coder.

14
00:00:54.240 --> 00:00:58.890
But this is not to say you can never change the name Wally Smart.

15
00:00:59.490 --> 00:01:03.720
Because with the let keyword, you can still reassign values to variables.

16
00:01:03.930 --> 00:01:09.780
If we just didn't include the word let and we just said name equals Wally Stupid later on in our code,

17
00:01:10.380 --> 00:01:11.820
that would be perfectly valid.

18
00:01:12.630 --> 00:01:14.580
I just want to elaborate.

19
00:01:14.610 --> 00:01:19.590
I deliberately ignored scoping, and I don't want to get into this right now.

20
00:01:19.590 --> 00:01:22.800
It's a more advanced topic, so we're going to be getting into it later.

