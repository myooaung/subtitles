WEBVTT
1
00:00:01.310 --> 00:00:06.910
Before we move on to the next lecture, I just want to compare the var and let key word again quickly,

2
00:00:06.920 --> 00:00:10.070
I want to drive this point home and it will help you with coding, I promise.

3
00:00:13.210 --> 00:00:16.239
Let's define an age

4
00:00:17.760 --> 00:00:19.410
of two.

5
00:00:20.840 --> 00:00:24.890
And remember when I do this with the var keyword, I'm creating a global

6
00:00:27.010 --> 00:00:28.450
scope variable.

7
00:00:30.710 --> 00:00:35.990
Now, this is what I want to do. If the warthog is older than one year old,

8
00:00:36.230 --> 00:00:41.060
I want to console.log to the screen, the equivalent human years of that warthog.

9
00:00:42.160 --> 00:00:48.520
What I mean? Well, a warthog lives for about 18 years, and if we just say a human lives 100 years,

10
00:00:48.520 --> 00:00:52.540
I know that's too long, but just say the average human lives 100 years,

11
00:00:53.230 --> 00:00:58.780
what that means is that for every one warthog year, it's the equivalent 4.72 human

12
00:00:58.780 --> 00:00:59.050
years.

13
00:00:59.740 --> 00:01:02.290
And I just want to console log that to the screen.

14
00:01:03.800 --> 00:01:04.760
So let's say

15
00:01:07.650 --> 00:01:13.120
age is greater than one, because we only want to do this if the warthog is older than one year. And now, 

16
00:01:13.130 --> 00:01:18.630
I want to create a variable which is the human age equivalent, which we said is just going to be the

17
00:01:18.630 --> 00:01:21.930
age of the warthog multiplied by 100,

18
00:01:22.140 --> 00:01:27.750
if we take that as the average lifespan of a human, divided by 18, which is the average lifespan of

19
00:01:27.750 --> 00:01:28.290
a warthog.

20
00:01:30.410 --> 00:01:32.450
And then we want to console.log to the screen

21
00:01:34.190 --> 00:01:37.460
and here I'm going to be using Template Literals. 

22
00:01:42.390 --> 00:01:44.520
A two year warthog 

23
00:01:48.070 --> 00:01:48.520
is

24
00:01:54.710 --> 00:01:57.920
years old in human terms.

25
00:01:59.070 --> 00:02:00.000
And this is what's nice about Quokka, 

26
00:02:00.360 --> 00:02:04.020
you can see the output is immediately being displayed to the right , in blue text.

27
00:02:05.560 --> 00:02:10.570
And this is what I wanna get to now - comparing var versus let. Remember, we said var is only

28
00:02:10.570 --> 00:02:10.990
function scoped. 

29
00:02:11.380 --> 00:02:15.340
So if I try and access humanAge, what do you think will happen here?

30
00:02:18.370 --> 00:02:19.390
humanAge?

31
00:02:22.040 --> 00:02:23.720
Well, this is not a function, is it?

32
00:02:23.840 --> 00:02:24.590
It's just a block.

33
00:02:25.100 --> 00:02:31.250
It's not a function, so I would expect humanAge to be visible everywhere with the var keyword. 

34
00:02:31.250 --> 00:02:31.790
humanAge.

35
00:02:32.390 --> 00:02:35.360
And it is. It's here and it outputs the result to the screen.

36
00:02:36.780 --> 00:02:40.070
But what about if I change this "var" to a "let"?

37
00:02:42.090 --> 00:02:47.800
Well, let is block scoped, so I would expect humanAge to not be defined.

38
00:02:47.820 --> 00:02:51.780
We are unable to use it outside that block.

39
00:02:54.040 --> 00:02:55.330
But you already knew this, didn't you?

40
00:02:56.140 --> 00:03:01.660
So let's step it up a notch, let's try and create a nested block and then let's see what happens.

41
00:03:03.360 --> 00:03:04.270
So, let's delete this.

42
00:03:07.070 --> 00:03:10.520
Let's create a function called variableScope,

43
00:03:11.570 --> 00:03:14.150
for lack of a better word, you can call it anything you want.

44
00:03:16.690 --> 00:03:21.580
And straight off the bat, let's define a variable called "x", and let's make that a number.

45
00:03:23.530 --> 00:03:26.140
Now, what I want to do is create a nested block.

46
00:03:30.370 --> 00:03:36.550
We'll do a simple IF statement that will execute because we're just passing the boolean true. And if it

47
00:03:36.550 --> 00:03:37.180
is true

48
00:03:37.210 --> 00:03:39.250
I wanna create a variable, but get this,

49
00:03:39.340 --> 00:03:41.310
I want the variable name to be the same

50
00:03:41.480 --> 00:03:41.730
"x".

51
00:03:44.130 --> 00:03:46.370
And let's say that must be "Wally". 

52
00:03:50.490 --> 00:03:55.740
This is a string. So you can already see that we've got two variables now that shouldn't technically

53
00:03:55.740 --> 00:03:57.360
be allowed if they were in the same scope.

54
00:03:59.120 --> 00:04:00.740
One's a number. One's a string. 

55
00:04:01.860 --> 00:04:02.850
But let's see what happens.

56
00:04:03.600 --> 00:04:06.990
All I want to do now is console lox "x"

57
00:04:08.390 --> 00:04:09.680
within this block.

58
00:04:10.850 --> 00:04:13.190
Now I want to exit the block,

59
00:04:16.070 --> 00:04:17.810
and I want to console log "x" again.

60
00:04:21.790 --> 00:04:27.790
And the last thing I want to do is console log "x" again, let me just stop Quokka for the moment because

61
00:04:27.790 --> 00:04:31.600
I want you to think about the result here. Console log "x". 

62
00:04:32.760 --> 00:04:37.080
And here's my question to you, and I'll only give you the answer in a few seconds, I want you to pause

63
00:04:37.080 --> 00:04:38.850
the video and think about it.

64
00:04:39.720 --> 00:04:43.290
We've got 3 console logs on the screen.

65
00:04:44.100 --> 00:04:46.650
What will the result of each of those logs be?

66
00:04:47.370 --> 00:04:48.550
Think about scopes.

67
00:04:48.570 --> 00:04:49.800
Think about block scopes.

68
00:04:49.810 --> 00:04:52.020
Think about function scopes.

69
00:04:53.440 --> 00:04:57.180
Pause the video now, give it a go, and then I'll answer the question shortly.
(music starts)

70
00:05:14.330 --> 00:05:15.380
I hope you gave that a go.

71
00:05:15.410 --> 00:05:16.250
I hope you had fun.

72
00:05:16.490 --> 00:05:17.450
I hope you're enjoying it.

73
00:05:18.020 --> 00:05:21.920
And don't be intimidated by this all. I mean, it's fun, you know, and if you don't know the answers,

74
00:05:21.920 --> 00:05:22.860
that's totally fine.

75
00:05:22.880 --> 00:05:24.320
That's why we're doing the course together.

76
00:05:25.600 --> 00:05:34.420
OK, so before I start up Quokka, let's just run through it. We've got a function and remember the let variable

77
00:05:34.420 --> 00:05:36.220
is function scoped.

78
00:05:36.970 --> 00:05:43.000
That means that any variable defined in that function is not accessible outside that function.

79
00:05:44.780 --> 00:05:46.490
That's the first thing I want you to think about.

80
00:05:46.640 --> 00:05:51.710
So this "console.log(x)", is that in the function or out the function? It's out the function. 

81
00:05:52.430 --> 00:05:56.480
So when the parser comes through and it looks at that "x", is it going to find anything?

82
00:05:57.530 --> 00:06:02.840
No, it's not, because that "x" is not found in the global scope.

83
00:06:04.330 --> 00:06:08.230
So I would expect this last console.log to display undefined.

84
00:06:09.510 --> 00:06:10.920
What about the first console?

85
00:06:11.930 --> 00:06:15.060
Well, remember, we said that the let variable is block scoped?

86
00:06:16.250 --> 00:06:23.360
That means you can treat that IF block as its own section of code and only that section can access

87
00:06:24.020 --> 00:06:24.710
that variable.

88
00:06:25.780 --> 00:06:26.680
So what do I mean by that?

89
00:06:26.710 --> 00:06:31.090
Well, we've defined "x" within that scope, and then we've console logged "x".

90
00:06:32.900 --> 00:06:34.740
So I'd expect the "x" to be Wally. 

91
00:06:36.830 --> 00:06:39.740
Now let's go onto the middle console log. 

92
00:06:40.040 --> 00:06:41.690
We've jumped out of that IF block. 

93
00:06:43.760 --> 00:06:46.460
So which block are we in? Well, we're in the function block again.

94
00:06:47.390 --> 00:06:51.530
And that means we have defined "x" as 10, and now we're console logging 10. 

95
00:06:53.480 --> 00:06:55.000
I would expect the result 10.

96
00:06:56.040 --> 00:06:56.910
Let's see if this works.

97
00:06:57.420 --> 00:06:59.060
Let me activate Quokka.

98
00:07:02.710 --> 00:07:03.520
Let's give it a moment.

99
00:07:07.790 --> 00:07:13.010
So you can see Quokka is already saying that "x" is not defined out here, which is what we expected.

100
00:07:13.700 --> 00:07:15.970
The reason why we're not seeing anything excluded here

101
00:07:15.980 --> 00:07:17.300
is we haven't run the function.

102
00:07:17.510 --> 00:07:20.720
And remember to run a function, we have to call the (function) name,

103
00:07:21.830 --> 00:07:23.960
and enclose it in brackets. There you go.

104
00:07:25.900 --> 00:07:28.060
And it's literally given us what we would expect.

105
00:07:28.870 --> 00:07:30.370
Hope its starting to feel intuitive.

106
00:07:31.240 --> 00:07:31.960
Let's continue.

