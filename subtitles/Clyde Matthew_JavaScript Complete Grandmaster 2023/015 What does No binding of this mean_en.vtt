WEBVTT
1
00:00:00.120 --> 00:00:03.930
So what is this keyword all about, what are we what are we doing?

2
00:00:04.320 --> 00:00:05.040
How does it work?

3
00:00:05.220 --> 00:00:07.930
And what does the error syntax solve for us?

4
00:00:07.950 --> 00:00:11.340
What does it mean when it says that there is no binding of this?

5
00:00:11.680 --> 00:00:13.320
Let's have a look at what this all means.

6
00:00:13.710 --> 00:00:15.960
Let's start at a very simple constructor function.

7
00:00:16.290 --> 00:00:29.310
Remember, with a bootstrap to function, the value of this is bound to the newly created object being

8
00:00:29.310 --> 00:00:29.910
created.

9
00:00:30.450 --> 00:00:31.740
And this makes sense, right?

10
00:00:32.100 --> 00:00:35.100
Well, let's create a person constructor function.

11
00:00:36.400 --> 00:00:43.180
Where we sit this name equal fully and remember what the second step was with a constructor function,

12
00:00:43.720 --> 00:00:45.190
it was to use the new keyword.

13
00:00:45.220 --> 00:00:45.760
That's right.

14
00:00:46.060 --> 00:00:49.720
And when we do that, when we say let's use it equals new person.

15
00:00:50.470 --> 00:00:55.210
What we are actually doing is the value of this is being bound to the newly created object.

16
00:00:55.210 --> 00:00:58.150
So that means we refer to this in our function call.

17
00:00:58.720 --> 00:01:02.440
This is referring to the user, the newly created object.

18
00:01:03.510 --> 00:01:10.980
And if we console log use out, we can see that we've now set this name property, which is name of

19
00:01:10.980 --> 00:01:12.360
user to Wally.

20
00:01:12.810 --> 00:01:13.590
So that makes sense.

21
00:01:13.600 --> 00:01:14.340
You know this?

22
00:01:14.820 --> 00:01:16.650
But now let's dig deeper.

23
00:01:16.830 --> 00:01:22.050
Let's now set a timer using set interval.

24
00:01:23.130 --> 00:01:26.070
And sit intervals are in both JavaScript function.

25
00:01:26.190 --> 00:01:27.300
We'll see how it works now.

26
00:01:27.540 --> 00:01:30.810
So let's comment this out so we don't get conflicting variable names.

27
00:01:32.850 --> 00:01:35.490
And again, let's define a person function.

28
00:01:37.430 --> 00:01:41.690
Let's say this first name is Wally.

29
00:01:42.940 --> 00:01:48.640
And now what I want to do is I just want to say for even go and use wisely, I just want to console.log

30
00:01:48.640 --> 00:01:51.130
Hi, everyone second to the console.

31
00:01:51.460 --> 00:01:52.180
How do we do that?

32
00:01:52.360 --> 00:01:54.370
Well, let's define a method called display.

33
00:01:55.720 --> 00:01:59.270
And will make that equal to JavaScript enabled CET interval.

34
00:01:59.290 --> 00:02:03.760
And you can see my I.D. has already picked it up for me set interval.

35
00:02:05.470 --> 00:02:08.710
So how CET interval works as you've got to have parentheses?

36
00:02:08.889 --> 00:02:13.600
And you can see my IDs already saying that the first argument has to be a handler.

37
00:02:14.350 --> 00:02:15.940
In other words, it's going to be a function.

38
00:02:15.940 --> 00:02:17.170
It's called every second.

39
00:02:18.640 --> 00:02:22.570
So this just have a function, let's call it show, if we can call it whatever we want, it actually

40
00:02:22.580 --> 00:02:23.810
doesn't matter in this instance.

41
00:02:24.590 --> 00:02:26.840
And we want to console log to the screen.

42
00:02:27.680 --> 00:02:28.070
All right.

43
00:02:28.850 --> 00:02:30.140
So we're going to do for now.

44
00:02:30.860 --> 00:02:34.580
And the second argument in this set interval function.

45
00:02:35.090 --> 00:02:39.670
And if I just put a comma, my idea really tells me it's the timeout.

46
00:02:40.010 --> 00:02:43.250
It's how many seconds don't want to lapse before this function gets called again.

47
00:02:43.640 --> 00:02:47.420
And this is in milliseconds, so 1000 milliseconds is one second.

48
00:02:48.690 --> 00:02:49.500
And they have it.

49
00:02:49.800 --> 00:02:50.640
He has all function.

50
00:02:50.670 --> 00:02:56.040
What's going to happen, though, when we create a new object and we execute this, let's have a look.

51
00:02:56.580 --> 00:02:58.980
So let's use it equals new person.

52
00:03:00.150 --> 00:03:03.870
And what I'm going to do now actually is I want to put this in Google Chrome's console.

53
00:03:04.350 --> 00:03:06.990
It's just going to be easier for us to see the results of this.

54
00:03:07.200 --> 00:03:09.150
So, yeah, you got as a console.

55
00:03:10.140 --> 00:03:12.690
So all I want to do is I want to copy this function.

56
00:03:13.530 --> 00:03:15.540
Let's go to our console and it's pasted in here.

57
00:03:16.650 --> 00:03:23.220
And what's going to happen now is every second high is going to be displayed to the console.

58
00:03:24.060 --> 00:03:25.650
And you can see that's exactly what's happening.

59
00:03:25.710 --> 00:03:27.000
It's what we would expect.

60
00:03:27.390 --> 00:03:32.850
But what happens if we wanted to display the first name, Wally every second?

61
00:03:32.880 --> 00:03:37.050
Do you think we could do that yet, by the way, in case you're wondering why this is being executed

62
00:03:37.050 --> 00:03:37.770
every second?

63
00:03:37.950 --> 00:03:40.530
Just take a step back and think about what it is we've done.

64
00:03:41.250 --> 00:03:49.170
We've defined a constructive function within the find a new user and we have executed this constructor

65
00:03:49.170 --> 00:03:49.560
function.

66
00:03:50.040 --> 00:03:54.930
The problem is with the set intervals that when the parser goes through it and execute it, it never

67
00:03:54.930 --> 00:03:55.350
stops.

68
00:03:55.620 --> 00:03:57.270
We haven't ever defined it to stop.

69
00:03:57.430 --> 00:03:59.130
Just is going to continue indefinitely.

70
00:04:00.470 --> 00:04:04.970
Anyway, getting back to the points at hand, what happens if we wanted to display not high, but high

71
00:04:04.970 --> 00:04:07.760
quality, so we wanted to access the first name?

72
00:04:08.180 --> 00:04:10.900
Well, your first thought might be okay, cool.

73
00:04:10.910 --> 00:04:19.100
Let's just use template literals and go in console.log and go high and we log up this first name.

74
00:04:20.040 --> 00:04:20.430
Right.

75
00:04:21.060 --> 00:04:25.980
Kind of makes sense that, see, that's copied this function that's got our console again.

76
00:04:26.280 --> 00:04:31.800
Stop this until the console aisle is based on newly created function.

77
00:04:32.820 --> 00:04:33.420
It's going to happen.

78
00:04:34.600 --> 00:04:39.040
Hi, undefined, and this is the point I'm trying to make with function expressions.

79
00:04:39.550 --> 00:04:42.500
This seat interval method is just a normal function.

80
00:04:42.520 --> 00:04:49.450
There's nothing special about it, but what's happening is that this key word is being set to the global

81
00:04:49.690 --> 00:04:50.170
object.

82
00:04:50.650 --> 00:04:53.080
It's not being set to the newly created object.

83
00:04:53.110 --> 00:04:58.420
It almost ignores the current scope it's in, and it just references this as to the global object.

84
00:04:59.020 --> 00:05:00.280
And let me prove this to you now.

85
00:05:00.370 --> 00:05:06.790
Let's go back to our console and now remember how we did that within this function expression that this

86
00:05:06.790 --> 00:05:11.690
key word when we use it, function expression, it's referencing the global object will improve that

87
00:05:11.720 --> 00:05:17.050
you need to prove that you all we need to do is get rid of if she does get rid of the whole console,

88
00:05:18.370 --> 00:05:19.510
it just console.log this.

89
00:05:20.290 --> 00:05:20.800
So we don't.

90
00:05:22.090 --> 00:05:23.080
And it's a copy.

91
00:05:24.120 --> 00:05:28.920
That expression and it's pasted in Google Chrome.

92
00:05:30.780 --> 00:05:38.130
Now what's going to happen, the you guy, this is the window object that's being consoled every second

93
00:05:38.130 --> 00:05:38.850
to the screen.

94
00:05:39.360 --> 00:05:40.560
OK, back to the console.

95
00:05:42.510 --> 00:05:46.560
So we are back in the console and we know what the problem is, we don't want this to be bound to the

96
00:05:46.560 --> 00:05:47.490
global object.

97
00:05:47.850 --> 00:05:49.850
We almost want this.

98
00:05:50.610 --> 00:05:54.390
We're not almost we do want this to be bound to the original context.

99
00:05:54.960 --> 00:05:56.590
We don't want it replaced by anything else.

100
00:05:57.390 --> 00:06:00.390
And that is exactly what we mean when we say the arrow.

101
00:06:00.390 --> 00:06:09.030
Centex does not bind this, so say no, we want this to be bound in its original context.

102
00:06:09.360 --> 00:06:12.140
This is a whole point of an error syntax.

103
00:06:12.690 --> 00:06:19.380
So let me show you instead of having this syntax function, show this replace it with arrow syntax.

104
00:06:19.590 --> 00:06:21.990
So we don't need the function and we don't even need to name it.

105
00:06:22.440 --> 00:06:26.490
All we need is the opening and closing parentheses and the error.

106
00:06:27.400 --> 00:06:29.220
That's the only change we need to make.

107
00:06:29.520 --> 00:06:36.120
Now we copy this function and we paste this in the browser, but this is still going from our previous

108
00:06:36.120 --> 00:06:36.660
example.

109
00:06:37.600 --> 00:06:42.670
It's refresh the page clear the console paste this function in the what's going to happen now.

110
00:06:44.230 --> 00:06:50.350
This is perfect because now we have console logging the newly created user object.

111
00:06:52.090 --> 00:06:53.550
And it's just not this again.

112
00:06:54.560 --> 00:06:57.340
Me refresh the page, clear the console.

113
00:06:58.200 --> 00:06:58.760
We go back.

114
00:06:58.780 --> 00:06:59.170
Yeah.

115
00:06:59.410 --> 00:07:07.420
Now we are able to use literal syntax and we can say, Hi, this first name.

116
00:07:08.510 --> 00:07:09.620
And if we copy this.

117
00:07:12.310 --> 00:07:16.690
I stood in our Brasa, we should get high quality every single second.

118
00:07:17.410 --> 00:07:18.400
How amazing is this?

119
00:07:18.400 --> 00:07:19.720
And I hope that's sunk in.

120
00:07:20.020 --> 00:07:22.360
This is what the Arabs and Texas doing.

121
00:07:23.600 --> 00:07:28.610
If we go back to console, there's just one more thing I want to show you another way to prove that

122
00:07:28.610 --> 00:07:32.540
this is pointing to the person object is within all function expression.

123
00:07:32.570 --> 00:07:33.020
Yeah.

124
00:07:33.560 --> 00:07:39.230
After we define first name, what even before doesn't matter, we can just say, let scope.

125
00:07:42.050 --> 00:07:42.740
Equal this.

126
00:07:44.460 --> 00:07:46.590
In what we can do is we can console log.

127
00:07:49.800 --> 00:07:56.190
Scope equal to this, what do these two equal?

128
00:07:57.090 --> 00:08:01.320
And again, it's copy this that's pasted in our.

129
00:08:02.420 --> 00:08:06.320
Console is just clear at first vested in our console.

130
00:08:06.470 --> 00:08:07.430
And we should get true.

131
00:08:07.850 --> 00:08:08.360
And we do.

132
00:08:09.670 --> 00:08:10.190
So there you go.

133
00:08:10.210 --> 00:08:10.810
There you have it.

134
00:08:10.930 --> 00:08:17.170
We've gone in depth as to what this means and the error syntax and how it impacts the this keyword.

135
00:08:17.740 --> 00:08:18.520
OPV had fun.

