1
00:00:00,510 --> 00:00:05,670
Working with daughter is extremely important when it comes to programming, and a lot of the things

2
00:00:05,670 --> 00:00:10,710
we've been doing at the moment have been us storing data and we've be putting it into objects.

3
00:00:10,710 --> 00:00:14,100
We've been defining variables, we've been creating arrays.

4
00:00:14,730 --> 00:00:16,920
But what about accessing those values?

5
00:00:17,490 --> 00:00:21,990
You know, you can think if you have an application with thousands of users, they're giving you daughter.

6
00:00:22,410 --> 00:00:26,730
But at some point you are going to want to extract their data and display it, to use it, to perform

7
00:00:26,730 --> 00:00:27,720
calculations on it.

8
00:00:28,320 --> 00:00:30,990
And this is way looping becomes vital.

9
00:00:31,830 --> 00:00:35,400
And here we are talking about looping through objects, but just bear in mind.

10
00:00:35,880 --> 00:00:38,370
An array is actually an object as well.

11
00:00:39,060 --> 00:00:41,940
You can loop through objects and you can loop through arrays.

12
00:00:41,940 --> 00:00:48,810
But once you have an array of vanilla array and by vanilla just means you've got a whole string of values.

13
00:00:49,230 --> 00:00:52,530
Once you've got to that point, it becomes very easy to loop through it.

14
00:00:53,430 --> 00:00:58,260
So that's why I wanted to start with objects, a more complicated object that you've defined, how do

15
00:00:58,260 --> 00:00:59,250
we loop through that?

16
00:01:00,660 --> 00:01:05,220
And you'll often find yourselves in a situation where you want to loop through your object.

17
00:01:05,790 --> 00:01:10,890
And the only way to do so before is six was with a four inch loop.

18
00:01:11,370 --> 00:01:17,220
And I'll show you an example of a in new shortly, but let me just say this a better way and then better

19
00:01:17,220 --> 00:01:20,100
ways to convert your object into an array.

20
00:01:20,670 --> 00:01:25,110
And then you can just loop over there because looping over an array is very easy now.

21
00:01:25,620 --> 00:01:28,620
So how can we convert our object into an array?

22
00:01:29,160 --> 00:01:35,490
Well, there are three very popular methods object keys, object values and object entries.

23
00:01:36,300 --> 00:01:42,390
Object or keys creates an array that contains only the property names, a.k.a. the keys of the object.

24
00:01:43,610 --> 00:01:44,810
Object values.

25
00:01:44,930 --> 00:01:46,220
You probably guessed it already.

26
00:01:46,730 --> 00:01:51,620
That creates an array that contains the value of each property within the object.

27
00:01:52,670 --> 00:01:56,840
An object entries just gives you an array, but not this time.

28
00:01:57,140 --> 00:02:02,610
You've got both the key and the value that always creates an array of arrays.

29
00:02:03,230 --> 00:02:05,000
But I'll show you what this means shortly.

30
00:02:05,750 --> 00:02:07,740
OK, so let's take a step back.

31
00:02:07,760 --> 00:02:09,710
We start off with a complicated object.

32
00:02:09,860 --> 00:02:14,930
We then convert that object into an array and we can use one of these three methods that we've just

33
00:02:14,930 --> 00:02:15,950
discussed to do that.

34
00:02:16,580 --> 00:02:21,260
And now we can loop through this array as if it were a normal vanilla array.

35
00:02:21,680 --> 00:02:23,900
And we do this with the.

36
00:02:25,010 --> 00:02:32,780
Full of loot, the full of loop is awesome, and it's a much easier way to loop through elements of

37
00:02:32,780 --> 00:02:33,200
an array.

38
00:02:33,410 --> 00:02:37,250
Let me give you an example and just quickly show you how this full of loop works.

39
00:02:37,610 --> 00:02:42,380
It say we define a whole lot of fruit trees and it is an array.

40
00:02:42,560 --> 00:02:45,140
It's a banana and a manga simple.

41
00:02:45,800 --> 00:02:47,330
So what does a full of loop do?

42
00:02:48,020 --> 00:02:50,960
Well, it's loops through each key.

43
00:02:51,350 --> 00:02:56,660
And what I mean by key here, you key in this case in that array is banana.

44
00:02:57,720 --> 00:03:00,900
On the second iteration, that key is going to be Manga.

45
00:03:02,120 --> 00:03:07,820
For Const. Key, it's going to take the key of the array, but now without us doing anything else on

46
00:03:07,820 --> 00:03:10,910
this for of loop, how does it know to use the fruit keys array?

47
00:03:11,690 --> 00:03:17,330
Well, this way the second argument comes in you have to tell this array Hey, find each key of the

48
00:03:17,330 --> 00:03:18,440
fruit keys array.

49
00:03:19,130 --> 00:03:26,170
Then you open up this full of loop with the curly braces and we can do whatever we want with that key

50
00:03:26,180 --> 00:03:31,580
because we know on each loop that key is going to be in the first instance banana and on the second

51
00:03:31,580 --> 00:03:32,360
instance, mango.

52
00:03:33,050 --> 00:03:38,780
So in this instance, a simple console, low key, we'll just console.log Banana on the first iteration

53
00:03:39,440 --> 00:03:42,620
and then on the second iteration root console Mango.

54
00:03:43,250 --> 00:03:44,840
Let's have a look at some more examples now.

