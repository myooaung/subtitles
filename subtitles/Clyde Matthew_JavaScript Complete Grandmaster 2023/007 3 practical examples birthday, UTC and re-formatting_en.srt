1
00:00:00,330 --> 00:00:02,040
No decision on dates.

2
00:00:02,310 --> 00:00:08,250
I want to just go through some practical examples and some real life things you might encounter, and

3
00:00:08,250 --> 00:00:11,700
you're not going to understand all the pieces, how they fit in, how we extract variables from the

4
00:00:11,700 --> 00:00:12,510
use and all that.

5
00:00:13,140 --> 00:00:14,430
Again, worry about that later.

6
00:00:14,880 --> 00:00:17,910
For now, just understand what it is we're doing and I want you to cut along with me.

7
00:00:18,660 --> 00:00:20,660
So I want to show you three quick examples.

8
00:00:20,730 --> 00:00:22,650
One is, and we've already seen part of it.

9
00:00:22,790 --> 00:00:23,760
It uses birthday.

10
00:00:23,970 --> 00:00:31,130
I want us to display a message to the user only if it's his birthday, you know, it's his birthday.

11
00:00:31,140 --> 00:00:33,940
If you want to that you want to put the guy up a little bit, he said.

12
00:00:34,020 --> 00:00:35,040
How would you do that?

13
00:00:35,160 --> 00:00:39,840
The second thing I want to go through with you is what if we want to use UTC time?

14
00:00:40,560 --> 00:00:47,560
So it's just the world standard in calculating time and clocks in managing that whole process.

15
00:00:47,580 --> 00:00:50,250
What about if you didn't want to use the uses local machines time?

16
00:00:50,520 --> 00:00:53,760
Thirdly, what if you wanted to reformat dates?

17
00:00:53,850 --> 00:00:55,230
Let's look at some of these examples.

18
00:00:55,320 --> 00:01:02,490
Well, let's start with what you want to display iMessage with the users first.

19
00:01:02,570 --> 00:01:03,420
How do we do that?

20
00:01:03,660 --> 00:01:05,430
Was a few things I think we would need.

21
00:01:05,430 --> 00:01:08,310
We would need the current date, the current month.

22
00:01:08,310 --> 00:01:15,600
In the current day, it would need to compare that to the user's birthday day and birthday month.

23
00:01:15,990 --> 00:01:19,860
And if those two are the same, we want to show the message if they're not the same.

24
00:01:20,460 --> 00:01:21,090
We do nothing.

25
00:01:21,210 --> 00:01:24,360
Let's clear this up, and hopefully it makes more sense.

26
00:01:25,230 --> 00:01:27,750
So, yeah, you can see we've got a blank sheet that's not coding.

27
00:01:28,830 --> 00:01:34,620
School this birthday example, the very first thing you need to assume you've got is the birthday details

28
00:01:34,620 --> 00:01:35,250
of the user.

29
00:01:42,490 --> 00:01:44,300
And like before, let's create a variable.

30
00:01:45,550 --> 00:01:46,840
How do we do the dates again?

31
00:01:46,900 --> 00:01:47,390
It's right.

32
00:01:47,390 --> 00:01:52,510
We're got to use the new keyword, the date and yeah, we said we want it to be 1985.

33
00:01:53,410 --> 00:01:56,290
January, which starts at zero in on the 15th.

34
00:01:59,450 --> 00:02:01,000
So that's the USA's birthday.

35
00:02:03,280 --> 00:02:07,570
Now, let's extract the uses month and the use of Birthdays Day.

36
00:02:09,000 --> 00:02:09,930
It's extracts.

37
00:02:11,650 --> 00:02:13,060
Birthday month.

38
00:02:14,060 --> 00:02:14,510
And.

39
00:02:16,870 --> 00:02:19,810
Birthday day, you can use whatever words you want.

40
00:02:20,260 --> 00:02:25,360
I know I'm not the best at using words, so even if you cut in along with me, you can call your variables

41
00:02:25,900 --> 00:02:26,950
more intuitive names.

42
00:02:27,700 --> 00:02:31,180
I'm just going to call mine, use a birthday month.

43
00:02:32,600 --> 00:02:34,160
And we've got the birthday variable.

44
00:02:35,870 --> 00:02:37,340
And remember those date methods?

45
00:02:39,410 --> 00:02:39,950
It months.

46
00:02:41,200 --> 00:02:42,190
This will return.

47
00:02:46,050 --> 00:02:54,630
We'll turn the month of the user's birthday, which is zero, and we can test it by logging it out onto

48
00:02:54,630 --> 00:02:55,050
a log.

49
00:03:00,120 --> 00:03:01,290
And there it is, Sarah.

50
00:03:03,590 --> 00:03:04,370
So we've got the month.

51
00:03:04,490 --> 00:03:07,930
Let's not get the day, use a birthday day.

52
00:03:08,720 --> 00:03:09,760
Let's access again.

53
00:03:10,360 --> 00:03:11,750
Birthday variable.

54
00:03:13,410 --> 00:03:16,080
Dictator, remember, turns the day.

55
00:03:17,440 --> 00:03:19,210
Will return date, thank.

56
00:03:20,960 --> 00:03:21,730
Of birthday.

57
00:03:25,410 --> 00:03:26,910
Which is 15.

58
00:03:29,240 --> 00:03:31,550
And I can prove it to you by logging it out.

59
00:03:32,810 --> 00:03:36,380
And it is 15, so now we've got the user's details.

60
00:03:36,690 --> 00:03:38,420
But now let's get the current date.

61
00:03:42,630 --> 00:03:45,360
And it's cool that now equals new date.

62
00:03:47,810 --> 00:03:49,960
Let's extract the current month and the current date.

63
00:03:53,190 --> 00:03:53,700
Current.

64
00:03:54,560 --> 00:03:58,250
Length equals now eight months.

65
00:04:00,130 --> 00:04:02,620
And to get the day current day.

66
00:04:03,560 --> 00:04:09,590
Excess that now variable, which is stored, which has thawed the now date, and we want to get the

67
00:04:09,590 --> 00:04:09,890
day.

68
00:04:12,160 --> 00:04:16,779
So now we've got the current month, the current day, all we need to do is display a message of those

69
00:04:16,779 --> 00:04:18,880
to match to the user's birthday.

70
00:04:19,510 --> 00:04:20,290
How do we do that?

71
00:04:20,980 --> 00:04:24,850
Well, in JavaScript, you've got an if statement and it's very intuitive.

72
00:04:24,850 --> 00:04:26,080
We're going to get into the latest.

73
00:04:26,080 --> 00:04:29,140
I'm not going to get into it now, but you'll see even the syntax like it makes sense.

74
00:04:29,500 --> 00:04:33,040
So now let's start the section where we display usage.

75
00:04:34,050 --> 00:04:35,400
If the current month.

76
00:04:36,600 --> 00:04:39,570
And De equals the users.

77
00:04:42,320 --> 00:04:43,520
So let's start an if.

78
00:04:44,240 --> 00:04:49,910
And this is built in JavaScript, so we don't have to code all the intricacies behind this statement.

79
00:04:51,080 --> 00:04:57,020
We have to open parentheses and all we have to define the condition, the condition is we want the dates

80
00:04:57,020 --> 00:04:57,440
to match.

81
00:04:58,160 --> 00:04:59,210
So the current month.

82
00:05:01,930 --> 00:05:03,550
We want to make that equal to what?

83
00:05:05,700 --> 00:05:08,040
Well, this right to the user's birthday month.

84
00:05:10,100 --> 00:05:11,960
And we have to use the ampersand here.

85
00:05:12,980 --> 00:05:13,790
What else do we want?

86
00:05:13,820 --> 00:05:19,700
We want the current day to be equal to the user's birthday.

87
00:05:20,480 --> 00:05:23,330
I'm sorry, I put there should be once.

88
00:05:25,740 --> 00:05:30,120
And if this is true, this is what the if statement will do to commerce and we've been through coercion

89
00:05:30,410 --> 00:05:35,700
occurs this whole statement, and if it's true, it will execute the code in the following block.

90
00:05:36,540 --> 00:05:38,910
That is the case we want to console.

91
00:05:39,300 --> 00:05:39,930
Happy.

92
00:05:39,930 --> 00:05:40,570
Happy.

93
00:05:41,540 --> 00:05:42,840
Are you amped?

94
00:05:45,980 --> 00:05:47,270
You are all.

95
00:05:48,590 --> 00:05:49,640
Happy birthday.

96
00:05:51,790 --> 00:05:56,050
But if it's not true, if it's not the USA's birthday, we want to do nothing.

97
00:05:56,380 --> 00:06:01,690
And for the sake of completeness, let's just say console.log, let's do nothing.

98
00:06:04,560 --> 00:06:05,160
It's not.

99
00:06:06,050 --> 00:06:07,580
The USA's birthday.

100
00:06:11,720 --> 00:06:12,050
Who?

101
00:06:12,230 --> 00:06:16,640
OK, so we've been through this whole example, and you can see how it's starting to make seems like

102
00:06:16,640 --> 00:06:20,180
it's going to hopefully get a lot more practical and real for you.

103
00:06:20,780 --> 00:06:21,890
So let's see what's happened here.

104
00:06:21,920 --> 00:06:28,010
The birthday of the user is 1985 that we don't care about.

105
00:06:28,190 --> 00:06:32,960
So we want to know what is his actual birthday, and all we need for that is his month and his day of

106
00:06:32,960 --> 00:06:33,290
birth.

107
00:06:34,040 --> 00:06:36,290
The month is January and the day is 50.

108
00:06:37,280 --> 00:06:38,780
What is the current month now?

109
00:06:39,680 --> 00:06:44,810
We'll show you until log current month.

110
00:06:45,780 --> 00:06:46,920
Current month now.

111
00:06:47,880 --> 00:06:48,450
Is April.

112
00:06:49,570 --> 00:06:51,760
That's why the number three is coming up in the current day.

113
00:06:59,050 --> 00:07:00,400
It's the 14th of April.

114
00:07:01,300 --> 00:07:07,270
So what this means is that when we're looking at that, if Block and the JavaScript engine coerces or

115
00:07:07,270 --> 00:07:13,900
ceases or executes or evaluates that statement, current month equals user's birthday month and current

116
00:07:13,900 --> 00:07:17,050
day equals birthday day, that's good cause to false.

117
00:07:18,220 --> 00:07:24,550
So then all statements are going to be executed, which is why we see that what does get cancelled is

118
00:07:24,550 --> 00:07:25,380
let's do nothing.

119
00:07:25,390 --> 00:07:27,400
It's not the user's birthday.

120
00:07:27,780 --> 00:07:28,630
It makes sense.

121
00:07:29,230 --> 00:07:33,430
But now let's change the user's birthday to match the current month in current day.

122
00:07:33,760 --> 00:07:39,760
Just to illustrate that when it is equal, the console log should be the birthday log.

123
00:07:40,760 --> 00:07:43,130
Let's say it's birthday's April.

124
00:07:44,120 --> 00:07:44,900
On the 14th.

125
00:07:45,020 --> 00:07:48,220
Happy birthday in Chicago.

126
00:07:48,650 --> 00:07:52,520
And we get its happy, happy all you and your old happy birthday.

127
00:07:53,510 --> 00:07:54,200
So there you go.

128
00:07:54,440 --> 00:07:55,910
I hope this is getting more intuitive.

129
00:07:56,090 --> 00:07:57,110
Hope you have a lot of fun.

130
00:07:57,380 --> 00:07:58,280
This is the first one.

131
00:07:58,820 --> 00:08:02,570
The second thing I wanted to show you is the UTC time zone.

132
00:08:02,600 --> 00:08:08,270
What about if we wanted a more accurate way to measure time across all our users across different continents?

133
00:08:09,280 --> 00:08:09,950
Initially, this.

134
00:08:11,260 --> 00:08:12,730
So it's insidious.

135
00:08:13,090 --> 00:08:15,940
So now let's see another get me that we can use to solve their problem.

136
00:08:16,150 --> 00:08:22,630
So remember, get methods of based on users local machine machines time.

137
00:08:23,890 --> 00:08:25,000
To be more accurate.

138
00:08:27,690 --> 00:08:28,350
You may.

139
00:08:29,490 --> 00:08:30,210
One to.

140
00:08:31,630 --> 00:08:34,360
Use UGC to how do we do this?

141
00:08:35,419 --> 00:08:36,530
Well, let me give you an example here.

142
00:08:37,010 --> 00:08:38,120
It's say now.

143
00:08:39,070 --> 00:08:40,809
Is the time now?

144
00:08:43,580 --> 00:08:48,740
And we want to access the hours, my hours now it's 11 o'clock here, live in City.

145
00:08:50,810 --> 00:08:52,490
It's just print time.

146
00:08:52,860 --> 00:08:53,300
Normally.

147
00:08:54,990 --> 00:08:57,600
Console.log now, and I'll get ours.

148
00:08:59,700 --> 00:09:01,350
And you can see it's 11 o'clock in.

149
00:09:03,010 --> 00:09:04,930
But what about if I went to the UTC time?

150
00:09:07,960 --> 00:09:09,400
Let's use UGC to.

151
00:09:10,620 --> 00:09:17,100
Well, it's very simple, because we instantiated the date object by using the new keyword we've got

152
00:09:17,580 --> 00:09:23,840
in methods and properties straight out of the box and instead of using gate hours, we can use get UTC

153
00:09:23,850 --> 00:09:24,120
all.

154
00:09:25,270 --> 00:09:28,270
So this ex is unavailable and get UTC.

155
00:09:29,270 --> 00:09:29,690
Alice.

156
00:09:30,830 --> 00:09:31,340
There you go.

157
00:09:31,740 --> 00:09:33,210
It's nine o'clock UTC time.

158
00:09:33,360 --> 00:09:39,660
There was the second example, the third example was what about if I wanted to reformat dates to show

159
00:09:39,660 --> 00:09:41,820
the user what he said on his machine?

160
00:09:42,150 --> 00:09:42,630
Pretty cool.

161
00:09:44,070 --> 00:09:44,940
So let's get rid of this.

162
00:09:45,480 --> 00:09:49,200
If you want more example, how do we go about reformatting dates?

163
00:09:50,220 --> 00:09:56,580
The internationalization API is very well supported across browsers, and it's not only limited to dates.

164
00:09:56,580 --> 00:09:57,510
This APIs awesome.

165
00:09:57,510 --> 00:10:00,270
We can also modify numbers and strings and currencies.

166
00:10:00,750 --> 00:10:01,710
Let me show you an example.

167
00:10:03,240 --> 00:10:10,320
So again, let's create a variable called now, let's make that equal to 1st of January 2020.

168
00:10:10,890 --> 00:10:15,330
Now, if I console.log the state out the format, it's going to be standard, it's going to be what

169
00:10:15,330 --> 00:10:17,910
the code with the JavaScript engine gives me.

170
00:10:19,160 --> 00:10:23,780
Which is this I don't want this to say, I want it formatted to whatever settings I've got on my computer.

171
00:10:24,050 --> 00:10:25,340
Well, we can do that.

172
00:10:26,360 --> 00:10:32,150
Just say now this is the new date we now need to access the internationalization API.

173
00:10:32,600 --> 00:10:33,290
That's a mouthful.

174
00:10:34,160 --> 00:10:36,260
We do that by the keyword.

175
00:10:37,840 --> 00:10:38,980
I intel.

176
00:10:39,160 --> 00:10:40,560
And what do we went into effect?

177
00:10:40,610 --> 00:10:44,320
I remember I said we can do currencies, no strings, what we want to do the date.

178
00:10:44,920 --> 00:10:48,130
So we want to access the tape date, time format method.

179
00:10:50,720 --> 00:10:53,840
And a method on that object is the format method.

180
00:10:54,530 --> 00:10:58,160
And what do we want to format our date, which is now?

181
00:11:00,890 --> 00:11:02,120
And that's it, that's done.

182
00:11:02,570 --> 00:11:05,840
Let me console.log new date that you got.

183
00:11:06,080 --> 00:11:09,880
So instead of showing that big, long string, I just get twenty twenty first first.

184
00:11:10,730 --> 00:11:11,840
How awesome this.

185
00:11:11,990 --> 00:11:15,860
Okay, so I hope you've had fun in this nation was a bit of a bonus section.

186
00:11:16,190 --> 00:11:17,180
They've got a lot more to cover.

187
00:11:17,960 --> 00:11:20,240
Get em, get a coffee and let's move on.

