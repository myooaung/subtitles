WEBVTT
1
00:00:00.150 --> 00:00:05.790
I've got the console open again, and I want to go through some examples about object to create art

2
00:00:05.790 --> 00:00:07.710
works, what the prototype means.

3
00:00:08.400 --> 00:00:12.450
The first thing you need to know is that the object to create it has to take a prototype.

4
00:00:12.510 --> 00:00:13.860
Remember, took two arguments.

5
00:00:14.430 --> 00:00:15.770
You have to include a prototype.

6
00:00:15.780 --> 00:00:16.710
What happens if we don't?

7
00:00:16.800 --> 00:00:17.460
Well, let's have a look.

8
00:00:19.430 --> 00:00:20.930
It's defined a dog variable.

9
00:00:22.370 --> 00:00:23.900
Objects that create.

10
00:00:25.290 --> 00:00:26.040
What happens now?

11
00:00:27.700 --> 00:00:31.990
We can era type, era object prototype may only be an object or no.

12
00:00:32.710 --> 00:00:35.410
OK, what's the most simple object we can create?

13
00:00:35.860 --> 00:00:36.370
It's doing.

14
00:00:37.590 --> 00:00:38.790
It's clear the console.

15
00:00:40.880 --> 00:00:47.390
It's great, another dog object, but this time they say object or create, and it's just passed now.

16
00:00:48.410 --> 00:00:55.280
Maybe we can either pass null or an object when we pass null and we log our dog that she created an

17
00:00:55.280 --> 00:00:56.040
empty object.

18
00:00:56.060 --> 00:01:00.740
But now when I open this object, we shouldn't have any prototype because we've defined its prototype

19
00:01:00.740 --> 00:01:02.990
as nothing and open it up.

20
00:01:03.800 --> 00:01:05.870
We've got no properties on this object.

21
00:01:06.230 --> 00:01:07.040
No prototype.

22
00:01:07.560 --> 00:01:08.120
Weird, right?

23
00:01:09.260 --> 00:01:09.680
Okay.

24
00:01:11.310 --> 00:01:12.840
But it doesn't mean we can't work with it.

25
00:01:12.990 --> 00:01:16.860
We can work with it, we can go dog name equals fluffy.

26
00:01:17.900 --> 00:01:20.810
Announced name as Fluffy Sioux in a console.log hot dog.

27
00:01:21.710 --> 00:01:26.750
It's only property and values its name, just strength, fluffy, but it would be cool if we can get

28
00:01:26.750 --> 00:01:27.790
even more complicated.

29
00:01:27.800 --> 00:01:29.240
Yet how do we get prototypes?

30
00:01:29.810 --> 00:01:30.940
Let me show you again.

31
00:01:30.950 --> 00:01:31.880
It's clear the console.

32
00:01:32.110 --> 00:01:34.580
Okay, first thing's first remember with object to create.

33
00:01:34.580 --> 00:01:41.330
The first argument you can pass is the prototype, and that prototype, we've learned has to be either

34
00:01:41.330 --> 00:01:43.520
an object or not.

35
00:01:44.120 --> 00:01:45.230
So let's create an object.

36
00:01:45.230 --> 00:01:47.480
So let's just do it with an object literal way.

37
00:01:48.760 --> 00:01:54.390
So let's say dog Friday equals, and let's define the mythical wolf.

38
00:01:55.140 --> 00:02:00.120
And Wolf just needs to console log.

39
00:02:01.580 --> 00:02:02.450
The sound.

40
00:02:05.200 --> 00:02:07.630
We haven't defined sound it, but we will.

41
00:02:07.720 --> 00:02:08.729
You'll see how we'll it.

42
00:02:12.480 --> 00:02:18.750
He got so we used to find a dog proto object that we want to be accessible from any object we use with

43
00:02:18.750 --> 00:02:19.410
this prototype.

44
00:02:19.740 --> 00:02:23.100
So let's create the dog deadly dog equal.

45
00:02:24.520 --> 00:02:29.680
Object create and it's passing in this prototype that we've just created, and we know it's going to

46
00:02:29.680 --> 00:02:31.690
be valid because it is an object.

47
00:02:32.290 --> 00:02:33.190
What's going to happen now?

48
00:02:34.120 --> 00:02:35.680
Well, let's look at a dog.

49
00:02:36.220 --> 00:02:40.720
You can see it's an empty object and it's empty because we haven't defined any names ellipse.

50
00:02:41.380 --> 00:02:42.490
But if we open this up.

51
00:02:44.140 --> 00:02:46.540
We now have a prototype object.

52
00:02:47.110 --> 00:02:52.750
And if we open that up, part of that is this function that we've defined.

53
00:02:52.810 --> 00:02:55.570
How awesome is this cool, right?

54
00:02:55.600 --> 00:03:00.730
You've got a lot more flexibility because you can literally decide where you want prototypes to belong

55
00:03:00.730 --> 00:03:01.510
to which objects.

56
00:03:01.720 --> 00:03:02.290
It's awesome.

57
00:03:03.110 --> 00:03:05.870
And now let's start accessing this wolf method.

58
00:03:06.560 --> 00:03:08.000
Obviously, if you just wolf now.

59
00:03:09.650 --> 00:03:14.780
It's going to come back undefined because we haven't defined this, not sound, we haven't got a sound

60
00:03:14.780 --> 00:03:15.830
property on the dog yet.

61
00:03:16.520 --> 00:03:18.320
Let's say dog sound equals.

62
00:03:21.720 --> 00:03:25.590
Now we should be able to make the call, Doug, not Wolf.

63
00:03:27.020 --> 00:03:28.540
And it goes, Wolf.

64
00:03:28.760 --> 00:03:35.930
But have you really noticed it would have been cool if we could have passed in that sound value when

65
00:03:35.930 --> 00:03:37.610
we actually created the dog object?

66
00:03:38.240 --> 00:03:42.830
Yeah, we had to first create it, then we had to go dog, not sound and sit the property of their dog

67
00:03:43.290 --> 00:03:45.950
to be disarmed, if we could have just done that straight off the bat.

68
00:03:46.250 --> 00:03:47.240
Let's see how to do that.

69
00:03:47.450 --> 00:03:48.390
It's not that difficult.

70
00:03:48.420 --> 00:03:53.210
Remember, with the object create method, we've got the optional parameter and you can pass in its

71
00:03:53.210 --> 00:03:53.600
value.

72
00:03:56.200 --> 00:03:57.970
Well, let's do it, and we show you how it works.

73
00:03:58.810 --> 00:04:01.840
Let's say, Doug, two comes, let's say Cat comes along.

74
00:04:02.950 --> 00:04:03.790
And.

75
00:04:05.390 --> 00:04:08.060
But we've called a dog protest, so let's say Dog two comes along.

76
00:04:08.090 --> 00:04:09.170
Dog two comes along.

77
00:04:10.660 --> 00:04:11.560
We're going to create.

78
00:04:13.870 --> 00:04:17.019
An object, the prototype, we want it to be the dog protein.

79
00:04:18.570 --> 00:04:23.940
But the second argument we want to pass in a property value and you have to do it in the form of an

80
00:04:23.940 --> 00:04:27.630
object, so let's open up the curly braces.

81
00:04:27.930 --> 00:04:33.630
Now we want the property name to be sound, and the syntax might look weird, but you just got to learn

82
00:04:33.630 --> 00:04:36.210
how to comply with the rules of JavaScript.

83
00:04:36.210 --> 00:04:39.750
And that is, we need another object now because you can see a few different properties on this, but

84
00:04:39.750 --> 00:04:40.920
we want its value.

85
00:04:42.040 --> 00:04:44.260
To be bow wow.

86
00:04:45.630 --> 00:04:46.330
Not worthless.

87
00:04:46.350 --> 00:04:48.050
This is a strong dog bow, wow.

88
00:04:48.150 --> 00:04:52.140
Then we can close off the whole object, which is a second argument.

89
00:04:52.350 --> 00:04:54.720
Close the brackets to finish it off and we are done.

90
00:04:56.360 --> 00:05:01.220
We've literally not passed in sound, it's dog to dog to immediately has access to a.

91
00:05:03.390 --> 00:05:05.940
Sorry, that was dog was dog, too, Wolf.

92
00:05:06.330 --> 00:05:07.290
Should get out.

93
00:05:07.650 --> 00:05:08.190
And it is.

94
00:05:08.460 --> 00:05:13.440
So this is object that create you've just learned a whole new way to create an object where you've got

95
00:05:13.440 --> 00:05:17.490
the flexibility to create your own prototypes that you pass through into the object.

