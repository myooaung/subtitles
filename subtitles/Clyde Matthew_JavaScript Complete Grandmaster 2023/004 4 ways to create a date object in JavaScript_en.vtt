WEBVTT
1
00:00:00.180 --> 00:00:03.000
As you guessed it, there's not just one way to create dates.

2
00:00:03.840 --> 00:00:05.670
In fact, there are four ways to create a date.

3
00:00:06.180 --> 00:00:09.660
So let's have a quick look at them. The first way is what we've just done,

4
00:00:09.880 --> 00:00:15.040
where we used "new Date()". And that just gives us the current date and time.

5
00:00:15.860 --> 00:00:16.440
Straightforward hey?

6
00:00:17.340 --> 00:00:23.520
Well, another way to create a date is in parentheses, and that date will be based on the amount of

7
00:00:23.520 --> 00:00:27.300
milliseconds since 1st of January 1970.

8
00:00:28.440 --> 00:00:32.220
The third way to create a date is to put in a date string in parentheses.

9
00:00:32.790 --> 00:00:36.150
And as you guessed it, that'll just give you back the date that you specify.

10
00:00:36.870 --> 00:00:38.790
And you can even be more specific.

11
00:00:39.690 --> 00:00:43.690
You can specify the year, month, day, hour, minute, seconds and milliseconds.

12
00:00:43.980 --> 00:00:47.130
And that'll just give you back the date, again that you specify.

13
00:00:47.700 --> 00:00:49.310
Let's see a few examples now.

14
00:00:50.550 --> 00:00:51.630
Let's see it in action!

15
00:00:52.170 --> 00:00:55.350
So we've seen there are four ways to create a date.

16
00:00:56.840 --> 00:00:58.010
And let's look at each one of them.

17
00:00:58.580 --> 00:01:01.550
Let's say, let date1 equals "new Date()".

18
00:01:03.810 --> 00:01:04.920
And we've seen this before.

19
00:01:05.340 --> 00:01:06.620
This is what we did previously.

20
00:01:06.660 --> 00:01:07.860
So let's log them (the results) out here.

21
00:01:12.440 --> 00:01:16.070
So there it is. "new Date()" just gives us the current date and time.

22
00:01:16.430 --> 00:01:21.650
Let's use the second one, and that is we give the function a timestamp. Let date2 

23
00:01:22.710 --> 00:01:25.050
equals new Date(), let's say zero.

24
00:01:25.890 --> 00:01:27.510
What would you expect when I give it zero?

25
00:01:28.170 --> 00:01:30.360
Remember what the Date means?

26
00:01:30.360 --> 00:01:31.410
It starts from which day?

27
00:01:33.110 --> 00:01:33.680
That's right.

28
00:01:34.070 --> 00:01:41.930
1970, first of January. So if I do zero, it's basically saying move zero from that date, which should

29
00:01:41.930 --> 00:01:42.980
give me that original date.

30
00:01:44.060 --> 00:01:45.320
So let's log it out and see.

31
00:01:47.660 --> 00:01:48.390
And there you go. 

32
00:01:49.250 --> 00:01:52.980
1st of January 1970. What's the third way?

33
00:01:53.000 --> 00:01:56.460
The third ways is we can actually pass a date string.

34
00:01:58.160 --> 00:02:00.080
Date3 equals new date

35
00:02:01.750 --> 00:02:03.610
1 January 

36
00:02:05.470 --> 00:02:06.580
1970.

37
00:02:08.289 --> 00:02:14.650
And we can specify a time just to make it the same - my timezone is different, just to make it the same as what's

38
00:02:14.650 --> 00:02:16.750
displayed here, and log it out.

39
00:02:18.110 --> 00:02:19.100
We get exactly the same.

40
00:02:19.130 --> 00:02:21.170
And finally, let's look at the fourth way.

41
00:02:27.740 --> 00:02:32.090
And this is where we have to pass multiple arguments, and if you miss one, JavaScript is just going

42
00:02:32.090 --> 00:02:33.530
to assume it's a zero.

43
00:02:34.070 --> 00:02:38.480
So the first thing we must specify is the year 1970

44
00:02:39.650 --> 00:02:40.370
and the month.

45
00:02:40.760 --> 00:02:45.620
Now, bear in mind, JavaScript's number system starts at base zero.

46
00:02:45.830 --> 00:02:46.670
It starts at zero.

47
00:02:46.670 --> 00:02:47.810
So January is not 1.

48
00:02:47.960 --> 00:02:51.560
January is zero, and we want it to be the first of January.

49
00:02:51.950 --> 00:02:52.520
The hour.

50
00:02:53.210 --> 00:02:55.010
02 minutes

51
00:02:55.250 --> 00:02:55.940
zero zero.

52
00:02:57.660 --> 00:02:58.980
And it's just specify.

53
00:03:01.050 --> 00:03:01.890
Zero seconds.

54
00:03:02.880 --> 00:03:03.990
Now, if we log this out.

55
00:03:05.380 --> 00:03:07.000
I would expect exactly the same thing.

56
00:03:08.660 --> 00:03:13.580
And we do. I hope you're starting to feel more comfortable with dates. There's something now I just want to mention,

57
00:03:13.580 --> 00:03:16.940
and that is the GET methods and the SET methods, on the Date.

58
00:03:17.330 --> 00:03:17.900
Let's have a look.

