WEBVTT
1
00:00:00.450 --> 00:00:06.000
Coercion is a very important topic in JavaScript, and like I mentioned previously in the introduction

2
00:00:06.000 --> 00:00:10.440
of this course, working with data is extremely important.

3
00:00:10.590 --> 00:00:16.980
That's what we do as developers and an understanding of coercion is crucial to working with data.

4
00:00:18.490 --> 00:00:20.470
So let's just go to the basics, what is coercion?

5
00:00:20.740 --> 00:00:24.320
Well, it's just changing one data type to another data type.

6
00:00:25.670 --> 00:00:28.280
And there are only two types of coercion.

7
00:00:28.850 --> 00:00:36.120
The first type is explicit. And we're going to get into details later, but just so I don't leave you hanging,

8
00:00:36.140 --> 00:00:38.420
here's an example of an explicit coercion.

9
00:00:38.720 --> 00:00:45.950
Remember how we've (previously) typed the Number function and we pass in a value and it converts it to a number? That is us

10
00:00:46.310 --> 00:00:51.630
telling the interpreter to explicitly convert that value into a number.

11
00:00:52.040 --> 00:00:53.090
That's just one example.

12
00:00:53.630 --> 00:00:56.330
The other type of coercion is implicit.

13
00:00:57.080 --> 00:00:59.930
And this just happens automatically by the JavaScript interpreter.

14
00:01:00.350 --> 00:01:04.069
And again, we're going to be seeing examples, but just so you're not left hanging

15
00:01:04.489 --> 00:01:08.030
here are a few examples of what happens automatically by the interpreter.

16
00:01:08.810 --> 00:01:09.080
Ten

17
00:01:09.080 --> 00:01:10.940
divided by string, value equals null.

18
00:01:11.420 --> 00:01:15.950
And when we do an if statement, we normally have a condition and that condition is converted to a

19
00:01:15.950 --> 00:01:16.490
boolean.

20
00:01:17.690 --> 00:01:18.230
OK.

21
00:01:18.290 --> 00:01:25.190
The number one rule you need to understand is that there are only 3 types of coercion.

22
00:01:26.360 --> 00:01:33.590
It's not that difficult, just three types of coercion. You can coerce to a string, to a number or to a boolean.

23
00:01:34.690 --> 00:01:35.230
And that's it.

24
00:01:36.520 --> 00:01:40.360
Let's look at examples of each. First, strings.

25
00:01:41.290 --> 00:01:45.880
Well, let's just start at the basics of combining strings and numbers.

26
00:01:46.900 --> 00:01:52.600
And the way we normally do this is with the + operator. And we've already seen how operators work.

27
00:01:53.470 --> 00:01:59.710
And whenever you use the plus or minus operator, the data types must be the same.

28
00:01:59.980 --> 00:02:02.980
And if they're not the same, coercion will happen.

29
00:02:03.520 --> 00:02:07.870
Let's have a quick look at an example. Here's a few examples on strings.

30
00:02:08.680 --> 00:02:10.539
Let's first deal with implicit

31
00:02:13.770 --> 00:02:15.780
coercion when it comes to strings.

32
00:02:16.530 --> 00:02:24.990
So let's console.log, let's say, "50", and now we know 50 is a string. Say we want to perform a math operation

33
00:02:25.110 --> 00:02:25.800
minus 10.

34
00:02:27.110 --> 00:02:35.690
You can see, the output is 40. So what JavaScript has done in the background is it has automatically coerced

35
00:02:35.690 --> 00:02:42.710
that string into a number. How cool is that! We can do another example console.log

36
00:02:42.800 --> 00:02:47.080
what about "20" divided by two?

37
00:02:48.470 --> 00:02:50.570
It has automatically coerced it, to 10.

38
00:02:52.040 --> 00:02:54.050
What about explicit coercion

39
00:02:57.070 --> 00:02:58.050
when it comes to strings?

40
00:02:59.170 --> 00:03:02.590
Well, what's cool is we know we've got the Number function in JavaScript,

41
00:03:02.620 --> 00:03:08.200
we've also got the String function, so we can go console.log

42
00:03:09.070 --> 00:03:15.490
we can write the String function, and we can pass it a string like "123". How cool is that.

43
00:03:16.460 --> 00:03:17.300
We can do the same.

44
00:03:19.210 --> 00:03:22.240
Let's copy this, let's paste this and do

45
00:03:22.960 --> 00:03:23.280
true.

46
00:03:25.560 --> 00:03:28.200
But what's interesting, and I guess you can't see it on here,

47
00:03:28.680 --> 00:03:34.050
OK, if I go String('123'), this 123 here is actually a string now.

48
00:03:34.080 --> 00:03:37.290
I'll prove it to you. Let's define a variable "a"

49
00:03:38.430 --> 00:03:43.260
and lets go console.log(typeof(a)).

50
00:03:49.450 --> 00:03:51.160
And let's get rid of this console.log.

51
00:03:58.030 --> 00:03:58.870
typeof(a).

52
00:03:59.960 --> 00:04:08.060
So what it's actually done, is it's taken a number and it's coerced it explicitly into a string.

53
00:04:09.030 --> 00:04:10.200
And we've just proven that now.

54
00:04:12.220 --> 00:04:13.510
And it's the same with true.

55
00:04:14.990 --> 00:04:16.060
It's exactly the same here.

56
00:04:16.589 --> 00:04:18.740
let b equals string. 

57
00:04:21.529 --> 00:04:24.230
console.log(typeof(b)).

58
00:04:25.460 --> 00:04:29.270
So you can see, we had a bullion, which we now converted to a string.

59
00:04:31.040 --> 00:04:32.010
We've seen strings.

60
00:04:32.030 --> 00:04:33.320
Now let's look at booleans.

61
00:04:33.440 --> 00:04:35.360
Remember, this is another type of coercion.

62
00:04:35.360 --> 00:04:37.250
There are only 3. We've looked at strings, 

63
00:04:37.280 --> 00:04:42.290
now we're looking at booleans. Booleans cause trouble for many experienced developers

64
00:04:43.040 --> 00:04:44.870
but don't be intimidated by them.

65
00:04:44.900 --> 00:04:48.290
Because once you understand it, again, it's not that difficult.

66
00:04:49.250 --> 00:04:55.100
If you're using loop checks, you'll often need a boolean, or the value will have to be coerced to a

67
00:04:55.220 --> 00:04:55.550
boolean.

68
00:04:56.710 --> 00:05:00.570
Recall that there are only two possible results for a boolean coercion

69
00:05:01.240 --> 00:05:02.260
true or false.

70
00:05:03.360 --> 00:05:06.390
Let's jump over to the machine and have a look at an example.
(swoosh sound)

71
00:05:07.030 --> 00:05:08.190
Let's now look at booleans.

72
00:05:09.360 --> 00:05:13.980
Again, let's start with implicit coercion when it comes to booleans.

73
00:05:14.640 --> 00:05:20.100
And this is relatively straightforward, we can just console log one is greater than two.

74
00:05:21.510 --> 00:05:24.530
And you can see it's automatically coerced that into a booleans. 

75
00:05:25.080 --> 00:05:25.740
Here it's false.

76
00:05:27.030 --> 00:05:28.170
What about if we did

77
00:05:31.540 --> 00:05:35.210
console.log 4 equals 4.

78
00:05:38.170 --> 00:05:38.890
What do you think that'll be?

79
00:05:39.600 --> 00:05:46.160
Well, that's automatically coerced it to true. So you can see here, the JavaScript engine is implicitly coercing all of these

80
00:05:46.160 --> 00:05:48.280
values into booleans, false or true.

81
00:05:48.550 --> 00:05:50.150
And we use this a lot in JavaScript

82
00:05:50.170 --> 00:05:51.730
so it's awesome that you understand it.

83
00:05:52.240 --> 00:05:53.140
What about explicit?

84
00:05:53.740 --> 00:05:57.790
Let's look at example, explicit coercion with booleans.

85
00:05:58.600 --> 00:06:00.930
So we had the Number function for numbers.

86
00:06:00.940 --> 00:06:02.620
We had the String function for strings.

87
00:06:02.620 --> 00:06:07.810
And you guessed it, we've got the Boolean function for booleans.

88
00:06:09.340 --> 00:06:17.140
And let me just say this, I think the easiest way to understand booleans is to get a grasp as to what

89
00:06:17.260 --> 00:06:22.060
"falsy" values, because everything else that's not falsy will evaluate to true.

90
00:06:22.630 --> 00:06:26.050
So here are the falsy values on the screen at the moment.

91
00:06:29.410 --> 00:06:34.410
It's that simple. Anything else would evaluate to true, except for those falsy surveys.

92
00:06:35.400 --> 00:06:36.620
So let's give an example here.

93
00:06:37.640 --> 00:06:41.180
So if we type let a equals Boolean

94
00:06:42.680 --> 00:06:43.070
four.

95
00:06:45.330 --> 00:06:50.840
And we console.log "a", we're going to get true. The number 4 was not one of those falsy values.

96
00:06:50.940 --> 00:06:52.560
If we use one of those falsy values, 

97
00:06:55.280 --> 00:07:00.200
if we use zero, for example, it's going to come out false. And its the same with null and undefined.

98
00:07:00.380 --> 00:07:02.360
Null is false.

99
00:07:03.860 --> 00:07:06.610
Undefined is false.

100
00:07:06.770 --> 00:07:09.440
These are all types of explicit boolean values.

101
00:07:09.950 --> 00:07:10.730
How cool is that?

102
00:07:11.570 --> 00:07:17.600
And now we're finally on to the third type - Numbers. For an explicit conversion

103
00:07:17.930 --> 00:07:19.370
just apply the Number() function.

104
00:07:19.370 --> 00:07:20.170
We've seen this.

105
00:07:20.190 --> 00:07:21.650
We've done this many times before.

106
00:07:23.150 --> 00:07:25.750
But what about implicit coercion when it comes to numbers?

107
00:07:25.760 --> 00:07:28.400
Well, that unfortunately is a little bit more tricky.

108
00:07:28.550 --> 00:07:29.060
Why?

109
00:07:30.460 --> 00:07:32.470
Because it can be triggered in many cases.

110
00:07:33.910 --> 00:07:38.860
Implicit coercion can happen with comparison operators, the unary operator which we've already

111
00:07:38.860 --> 00:07:42.760
seen, bitwise operators, math operators

112
00:07:43.660 --> 00:07:47.170
"sjoe, there's a lot"! But don't be intimidated,

113
00:07:47.200 --> 00:07:51.340
we're going to be going through all of these through the course and you'll start feeling comfortable.

114
00:07:51.340 --> 00:07:54.190
Most of them are very, very intuitive.

115
00:07:55.030 --> 00:07:56.770
Let's have another look at an example.

116
00:07:57.880 --> 00:07:59.110
And now we're on to numbers.

117
00:07:59.980 --> 00:08:00.380
OK.

118
00:08:00.460 --> 00:08:07.090
What's an example of an implicit coercion when it comes to numbers?

119
00:08:07.540 --> 00:08:08.680
Let me give you an example.

120
00:08:08.800 --> 00:08:13.450
Let a equals four greater than three. 

121
00:08:14.320 --> 00:08:15.340
So I've used a string.

122
00:08:16.860 --> 00:08:21.660
What do you think is going to happen. When I console.log "a", we get the answer true.

123
00:08:21.900 --> 00:08:28.110
So what JavaScript has done, is it's implicitly coerced that string into a number. And we've already

124
00:08:28.110 --> 00:08:36.480
seen examples of explicit coercion when it comes to numbers. Let b equals 123. 

125
00:08:38.110 --> 00:08:42.490
And we can console.log Number(b).

126
00:08:43.390 --> 00:08:49.180
And this now is a number. It's coerced this to a number. I hope this is starting to make sense.

127
00:08:49.300 --> 00:08:49.840
Well done.

128
00:08:51.460 --> 00:08:56.110
And we've already covered the three types of coercion: 1) to string 2) to boolean 3) to number

129
00:08:56.740 --> 00:09:01.960
but it wouldn't be quite complete if I just didn't mention equality, because some operations cannot be

130
00:09:01.960 --> 00:09:03.880
run on values of different types.

131
00:09:04.870 --> 00:09:08.890
So behind the scenes, JavaScript runs coercion to make our lives easier.

132
00:09:09.190 --> 00:09:09.880
We know this.

133
00:09:09.880 --> 00:09:10.660
This is what happens.

134
00:09:10.660 --> 00:09:12.010
This is implicit coercion.

135
00:09:12.970 --> 00:09:14.800
This is where the equality comes into it, 

136
00:09:14.800 --> 00:09:20.080
those equality signs. Whenever we compare two values using double == equals sign,

137
00:09:20.860 --> 00:09:23.350
JavaScript will use coercion.

138
00:09:24.400 --> 00:09:26.740
But what about if you don't want JavaScript to coerce?

139
00:09:27.460 --> 00:09:30.640
What about if you actually want to check types between two values?

140
00:09:31.910 --> 00:09:38.480
Well, then you can use what's known as strict equality, and that's using three === equal signs.

141
00:09:40.820 --> 00:09:42.530
Hey, you're probably getting sick of this later.

142
00:09:42.560 --> 00:09:43.070
I'm sorry.

143
00:09:43.190 --> 00:09:45.830
One more, one more, one more quick thing on equality.

144
00:09:46.190 --> 00:09:50.510
Let's just ... I'll just show you the difference between double equal sign and triple equality.

145
00:09:51.530 --> 00:09:54.090
Let's say 'a' equals 40.

146
00:09:54.860 --> 00:09:58.280
And let's say 'b'  equals "40".

147
00:10:00.250 --> 00:10:08.770
One is a string. One is a number, we know that. What happens when we console.log(a == b)?

148
00:10:10.470 --> 00:10:11.340
Well, it equals true.

149
00:10:12.010 --> 00:10:12.680
But do you know why?

150
00:10:15.000 --> 00:10:18.590
Because JavaScript has coerced that "40" string into a number. 

151
00:10:20.240 --> 00:10:22.580
But what happens when you put three equal signs here?

152
00:10:22.730 --> 00:10:24.620
We're going to tell JavaScript not to coerce.

153
00:10:26.250 --> 00:10:29.250
As soon as we do that, it says that they're not equal.

154
00:10:29.700 --> 00:10:33.420
And we know that's right, because this is a string and a is number 

155
00:10:34.260 --> 00:10:35.370
And that's equality for you.

156
00:10:35.670 --> 00:10:36.480
Let's get going.

