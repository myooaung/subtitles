WEBVTT
1
00:00:00.150 --> 00:00:00.750
Functions.

2
00:00:01.080 --> 00:00:02.340
Let's see some examples.

3
00:00:02.650 --> 00:00:04.200
I want to show you two examples now.

4
00:00:04.230 --> 00:00:05.540
One will be relatively simple.

5
00:00:05.550 --> 00:00:09.750
The other one is going to be a bit more complex because now I kind of feel you're getting into it.

6
00:00:09.810 --> 00:00:14.790
I feel like you're ready and I'm going to be structuring files as we would in a real website.

7
00:00:14.970 --> 00:00:19.500
So you can also get a feel as to how we link JavaScript with our HTML.

8
00:00:19.530 --> 00:00:19.860
OK.

9
00:00:19.890 --> 00:00:25.410
Example number one, I just want to have simple text when we click on that text, I want it to be replaced

10
00:00:25.410 --> 00:00:28.380
with other text, and I want to do that by writing a function.

11
00:00:28.860 --> 00:00:32.100
So, yeah, I've just got a blank visual studio code document.

12
00:00:33.620 --> 00:00:38.120
All we need to do now is create a folder and let's call it our project, let's say it's.

13
00:00:39.350 --> 00:00:41.330
Project under no function.

14
00:00:43.360 --> 00:00:45.820
So is the old stuff project function in there?

15
00:00:45.850 --> 00:00:47.050
Let's have an index.

16
00:00:48.350 --> 00:00:53.700
Two months out, because that's where the pastor begins, we have to start here, and this is quite

17
00:00:53.710 --> 00:00:58.450
a standard HTML template in our body that's create a header.

18
00:01:00.340 --> 00:01:01.930
We'll call it function example.

19
00:01:03.380 --> 00:01:04.670
Let's have a paragraph.

20
00:01:06.460 --> 00:01:12.640
This is an example of changing text via a function.

21
00:01:14.870 --> 00:01:17.390
Changing text by using a function.

22
00:01:19.130 --> 00:01:21.890
Great, and if we click on our Go Live server.

23
00:01:23.130 --> 00:01:25.830
And we display this in a website, this is what we see.

24
00:01:25.920 --> 00:01:31.230
Function example, this is an example of changing tastes great, but if I click anyway, nothing happens.

25
00:01:31.650 --> 00:01:34.780
So going back to our text editor, what do we need to do now?

26
00:01:34.830 --> 00:01:38.220
Well, now we need to create a JavaScript file.

27
00:01:39.980 --> 00:01:46.310
And let's say within this big folder structure, we've got another folder all public, and within that

28
00:01:46.640 --> 00:01:48.770
folder you've got your script.

29
00:01:50.490 --> 00:01:51.940
We we write all our JavaScript.

30
00:01:52.300 --> 00:01:55.240
And now I want us to create a function that just replaces taste.

31
00:01:55.510 --> 00:01:58.150
Remember what do we need in order to create a function?

32
00:01:59.100 --> 00:02:03.810
Let's right when told JavaScript that we are writing a function, so we use the function keyword.

33
00:02:04.470 --> 00:02:05.940
Now we need to name our function.

34
00:02:06.960 --> 00:02:10.370
Let's just call it show, because we want to show takes.

35
00:02:11.400 --> 00:02:16.230
Remember, we need the parentheses after the name just in case we want to pass through arguments.

36
00:02:17.450 --> 00:02:21.740
And then we've got to actually write our code in between curly parentheses.

37
00:02:23.200 --> 00:02:26.170
And all we want to do is we want a document not right.

38
00:02:26.770 --> 00:02:27.730
Our function.

39
00:02:29.050 --> 00:02:29.920
Has been.

40
00:02:30.820 --> 00:02:31.600
Invoked.

41
00:02:32.740 --> 00:02:33.280
Well done.

42
00:02:37.120 --> 00:02:37.900
And these are function.

43
00:02:38.320 --> 00:02:40.090
Again, we go back here.

44
00:02:40.750 --> 00:02:47.350
It's not going to work because we haven't yet made the link between our index HTML page, clicking this

45
00:02:47.350 --> 00:02:50.080
paragraph and our JavaScript file.

46
00:02:50.430 --> 00:02:51.190
So let's do that.

47
00:02:51.460 --> 00:02:53.800
Glenn Beck Yeah, it's good, our index file.

48
00:02:54.760 --> 00:03:00.340
And once the process is gone through our entire HMO and all of that is loaded on screen, it's then

49
00:03:00.340 --> 00:03:06.910
going to hit this script take and the script tag is going to reference a JavaScript file.

50
00:03:09.630 --> 00:03:14.670
So it's in the public folder and within the public folder, it's in a file called Script Dot James.

51
00:03:14.910 --> 00:03:17.280
So what's great about this is if we go to our website.

52
00:03:18.640 --> 00:03:23.800
And we refresh still clicking doesn't do anything because we haven't told the browser that when we click,

53
00:03:24.490 --> 00:03:26.120
we want that function to be executed.

54
00:03:26.280 --> 00:03:27.220
Chicken this this is cool.

55
00:03:27.220 --> 00:03:32.440
If we inspect this document and you go to your network tab and we refresh.

56
00:03:33.130 --> 00:03:35.860
You can see that our skip file is being loaded.

57
00:03:36.130 --> 00:03:39.790
If you click on the script file, you actually see our function that we've written within it.

58
00:03:40.210 --> 00:03:42.790
You know, it's just a bit of interesting information for you.

59
00:03:43.330 --> 00:03:47.080
Now let's make the link between thinking this text, and this takes changing.

60
00:03:47.440 --> 00:03:53.980
So if we go back to our editor and we look at this paragraph text, this paragraph is where we want

61
00:03:53.980 --> 00:03:55.480
our JavaScript to be triggered.

62
00:03:56.680 --> 00:04:03.160
What's in here, we can define an on public event, and let's just execute our show function.

63
00:04:03.700 --> 00:04:10.150
Bear in mind that with an unlikely event, anything in these quotation marks is JavaScript, so we don't

64
00:04:10.150 --> 00:04:13.780
even have to wait for and show, for example, there's just an alert.

65
00:04:14.380 --> 00:04:18.160
We can we can write JavaScript directly within these quotation marks.

66
00:04:18.730 --> 00:04:20.230
And if we go back in, we click on.

67
00:04:20.230 --> 00:04:21.279
Here is our alert.

68
00:04:21.880 --> 00:04:22.510
So it's working.

69
00:04:23.350 --> 00:04:26.020
If we go back to our file, we don't want to execute alert.

70
00:04:26.020 --> 00:04:31.060
We actually want to execute our own custom function called show, which is in our JavaScript file over

71
00:04:31.060 --> 00:04:31.480
here.

72
00:04:33.140 --> 00:04:38.810
And if we go here and we click they we go, document or drop, the whole text has been replaced by our

73
00:04:38.810 --> 00:04:40.040
function has been invoked.

74
00:04:40.190 --> 00:04:40.790
Well done.

75
00:04:42.440 --> 00:04:43.820
So I hope this is making sense.

76
00:04:44.750 --> 00:04:47.180
We started with an index HTML file.

77
00:04:47.990 --> 00:04:49.430
We've defined upheld wrath.

78
00:04:49.880 --> 00:04:57.290
We've referenced our JavaScript file in the script tank and on that paragraph, we've defined it.

79
00:04:57.290 --> 00:04:58.190
We need to split.

80
00:04:58.970 --> 00:05:00.800
We want to execute our show function.

81
00:05:00.980 --> 00:05:07.400
And the JavaScript engine knows what the actual function is because it is posted when it hit the script

82
00:05:07.400 --> 00:05:14.330
tag at the bottom and it's going into this file and it's literally stored that function in memory.

83
00:05:15.320 --> 00:05:16.400
How cool is this?

84
00:05:16.580 --> 00:05:17.960
Is it becoming more intuitive?

85
00:05:18.000 --> 00:05:21.800
So why don't we now look at a bit more of a tricky example?

