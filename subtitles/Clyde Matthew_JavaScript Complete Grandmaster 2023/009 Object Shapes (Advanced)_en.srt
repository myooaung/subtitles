1
00:00:14,820 --> 00:00:20,490
We've learned about objects, we've learned about arrays, but this lecture is going to be epic.

2
00:00:20,910 --> 00:00:26,490
But let me start off by saying that all JavaScript engines use the concepts discussed in this lecture

3
00:00:26,730 --> 00:00:28,170
as a way to optimize code.

4
00:00:28,830 --> 00:00:33,930
And as you can see from the hitting, this shapes the different engines cool shape different things.

5
00:00:33,930 --> 00:00:36,930
So when you start doing this, you may come across different terminology.

6
00:00:37,680 --> 00:00:42,690
Some people refer to these as hidden classes, but this is confusing because we've got JavaScript classes,

7
00:00:42,930 --> 00:00:44,300
V8 cores in maps.

8
00:00:44,700 --> 00:00:48,210
But this is also confusing because remember, we use that map iteration.

9
00:00:49,610 --> 00:00:53,000
Others called him types JavaScript core causing structures.

10
00:00:54,060 --> 00:00:58,870
But Spider monkey calls in shapes and just to avoid confusion with other terminology.

11
00:00:58,920 --> 00:01:00,810
I've decided to call them shapes as well.

12
00:01:01,770 --> 00:01:03,000
But anyway, I digress.

13
00:01:03,540 --> 00:01:06,100
We now know how objects are defined in JavaScript.

14
00:01:06,120 --> 00:01:07,110
We've been working with him.

15
00:01:07,350 --> 00:01:09,270
But in this lecture, I want to dive deeper.

16
00:01:10,050 --> 00:01:16,870
I want to discuss how JavaScript engines work with objects looking at what we've done so far with objects.

17
00:01:16,890 --> 00:01:21,990
You've probably already guessed that existing properties is by far the most common task.

18
00:01:22,170 --> 00:01:22,860
What do I mean?

19
00:01:22,880 --> 00:01:27,120
Well, when we have an object, let's just define the user object of the first name and last name.

20
00:01:27,780 --> 00:01:31,710
It's going to be very common for us to query those values.

21
00:01:31,890 --> 00:01:33,600
For example, use a dot first name.

22
00:01:33,600 --> 00:01:37,380
We asking the engine to go and fetch us the first name of this user.

23
00:01:38,070 --> 00:01:43,080
And because of this, it's crucial for JavaScript to make this process as quick as possible.

24
00:01:43,960 --> 00:01:44,630
OK, OK.

25
00:01:44,710 --> 00:01:45,220
You get it.

26
00:01:45,550 --> 00:01:46,960
So what is the shape?

27
00:01:47,740 --> 00:01:49,750
Well, let me say this.

28
00:01:50,140 --> 00:01:54,340
It's common to have multiple objects with the same property names or keys.

29
00:01:54,640 --> 00:01:57,940
For example, let's create a dog and snake object.

30
00:01:58,450 --> 00:02:05,110
For example, let's say we had a dog object, and it's got to these two names type and age.

31
00:02:05,590 --> 00:02:07,720
Now we create a snake object.

32
00:02:08,139 --> 00:02:10,000
And it's also got type an age.

33
00:02:10,810 --> 00:02:14,380
It's intuitive that these two have the same shape.

34
00:02:15,260 --> 00:02:19,580
Those objects have the same keys, and it's only mean machines.

35
00:02:20,270 --> 00:02:23,540
Shapes are just objects that have the same look and feel.

36
00:02:24,260 --> 00:02:27,470
But let's dig deeper to understand what JavaScript does with objects.

37
00:02:27,980 --> 00:02:34,850
So let's create an object with properties X and Y equal value of 10 and 20 when we create these objects.

38
00:02:35,180 --> 00:02:38,840
We know that JavaScript object model is implemented.

39
00:02:39,650 --> 00:02:45,440
Remember, we looked at the JavaScript object model, and all I mean by this is that each object uses

40
00:02:45,440 --> 00:02:47,930
the dictionary data structure we discussed earlier.

41
00:02:48,050 --> 00:02:50,390
It contains the keys as strings.

42
00:02:51,110 --> 00:02:56,810
The keys here are X and Y, and those keys point to their respective property attributes.

43
00:02:57,560 --> 00:03:05,630
Now, when we access the Property X on that object, i.e. we actually type into our code object X or

44
00:03:05,630 --> 00:03:08,640
in the case of all, use object, we type use a dot name.

45
00:03:09,290 --> 00:03:10,010
What's going to happen?

46
00:03:11,080 --> 00:03:16,220
Will the JavaScript engines going to look in the JS object for the key for that X?

47
00:03:17,310 --> 00:03:22,470
And then it's going to load the corresponding property attributes, and then it finally, once it's

48
00:03:22,470 --> 00:03:24,540
done it, it's going to return the value.

49
00:03:26,250 --> 00:03:30,360
You see the very day in square brackets, it's going to return that in the case of X, it's going to

50
00:03:30,360 --> 00:03:33,600
return 10, but these property attributes.

51
00:03:35,450 --> 00:03:36,710
Well, they stored in memory.

52
00:03:38,410 --> 00:03:39,670
Let me ask you another question.

53
00:03:39,910 --> 00:03:43,180
Should we stole these property attributes as part of their JS object?

54
00:03:45,710 --> 00:03:50,510
Before you answer that, let me just say what if we end up creating thousands of objects that have a

55
00:03:50,510 --> 00:03:53,570
similar structure, i.e. that have the same shape?

56
00:03:54,950 --> 00:04:00,140
I'd argued with Wasteful to store the full dictionary, which contains property names and associated

57
00:04:00,140 --> 00:04:02,510
attributes on each face object.

58
00:04:03,440 --> 00:04:03,920
Why?

59
00:04:04,730 --> 00:04:09,740
Because this is going to result in a whole bunch of duplication and unnecessary memory usage.

60
00:04:10,800 --> 00:04:14,610
Of course, we know it wouldn't be efficient to go and duplicate these property attributes for every

61
00:04:14,610 --> 00:04:16,200
single object that has the same shape.

62
00:04:16,800 --> 00:04:18,570
So then what does the JavaScript engine do?

63
00:04:19,110 --> 00:04:24,840
Well, it stores a shape of the object, and it does the separately to the actual object itself.

64
00:04:25,830 --> 00:04:32,640
In this shape, restore all property names and attributes, except for the values, instead of storing

65
00:04:32,640 --> 00:04:38,490
the value property, the shape has to store the offset value that references the JS object so that the

66
00:04:38,490 --> 00:04:40,320
engine knows where to find the value.

67
00:04:41,010 --> 00:04:46,800
And this means that every JavaScript object that has the same shape will point to exactly this one instance.

68
00:04:47,010 --> 00:04:48,360
This one shape instance.

69
00:04:48,510 --> 00:04:51,990
No duplication and no memory leakage.

70
00:04:52,650 --> 00:04:58,110
And because each JavaScript object is unique, you know each item is going to have different values.

71
00:04:58,560 --> 00:05:02,970
That just means that that object only has to store their unique values.

72
00:05:03,570 --> 00:05:04,560
Let me show you what I mean.

73
00:05:04,590 --> 00:05:06,930
So let's get our object with X and Y.

74
00:05:07,940 --> 00:05:13,670
Now, instead of that object storing the keys, it's only going to have its values because those values

75
00:05:13,670 --> 00:05:17,120
are unique to it, so it's only going to store the values 10 and 20.

76
00:05:17,970 --> 00:05:20,760
And that object is going to be pointing to a shape.

77
00:05:21,580 --> 00:05:26,080
And its shape is what's going to be storing the keys and the associated offsets.

78
00:05:27,180 --> 00:05:28,020
Does it make sense?

79
00:05:28,500 --> 00:05:33,660
So we know when you're looking at the shape, the X points to property attributes with an offset of

80
00:05:33,660 --> 00:05:34,020
zero.

81
00:05:34,530 --> 00:05:38,700
And that's why the JavaScript engine is going to know that X has a value of ten.

82
00:05:39,630 --> 00:05:40,630
Why are you confused yet?

83
00:05:41,410 --> 00:05:41,710
Good.

84
00:05:41,860 --> 00:05:42,700
It's part of the journey.

85
00:05:42,730 --> 00:05:43,540
It's part of the journey.

86
00:05:44,080 --> 00:05:47,440
Perhaps this example even be more clear once you have multiple objects.

87
00:05:47,860 --> 00:05:53,170
So let me show you that now we had an object o'bagy that just had X and Y.

88
00:05:53,980 --> 00:05:56,710
Now let's create OBJ one and object two.

89
00:05:56,800 --> 00:05:59,890
So we've got two objects now, the two different values.

90
00:06:00,850 --> 00:06:05,110
And this is probably going to make sense to you now because now we've got two objects and they're both

91
00:06:05,110 --> 00:06:11,320
utterly unique values, but they both point to the same shape because they both have the same shape.

92
00:06:11,650 --> 00:06:12,400
How awesome is us?

93
00:06:13,060 --> 00:06:17,620
And you can already see now that instead of storing that information in both objects as property attributes

94
00:06:17,620 --> 00:06:19,330
is only stored in one shape.

95
00:06:20,360 --> 00:06:24,890
Just remember, even if you're getting confused, not just remember this, no matter how many objects

96
00:06:25,010 --> 00:06:28,220
are hundreds, thousands, millions or billions.

97
00:06:28,820 --> 00:06:34,340
As long as they have the same shape, we only have to tool the shape and property information once.

98
00:06:35,240 --> 00:06:39,290
But so far, we've only seen examples where you have an object in a predefined structure.

99
00:06:40,010 --> 00:06:45,830
We've never had to add properties to it, which of course, begs the question what happens when we add

100
00:06:45,830 --> 00:06:49,160
properties to an object that has already been created?

101
00:06:50,070 --> 00:06:51,150
What happens to the shape?

102
00:06:52,500 --> 00:06:56,290
This is we transition chains and trees come into the picture.

103
00:06:57,350 --> 00:06:58,970
This creates a user object.

104
00:06:59,630 --> 00:07:03,470
And initially, let's just sit it out, so it's empty, it's got no properties.

105
00:07:04,430 --> 00:07:05,180
What is its shape?

106
00:07:06,270 --> 00:07:07,410
Well, its shape is also in.

107
00:07:07,890 --> 00:07:11,820
So at this point in time, the user object is pointing to an empty shape.

108
00:07:12,480 --> 00:07:13,110
Simple, right?

109
00:07:14,290 --> 00:07:18,520
But now let's add a property code name to this object with a value, John.

110
00:07:19,490 --> 00:07:22,610
As soon as you do this, a new shape is going to be created.

111
00:07:23,210 --> 00:07:28,220
The JavaScript engine now transitions to this new shape that contains the property name.

112
00:07:28,790 --> 00:07:32,630
The user object has a value of John as its first offset.

113
00:07:33,500 --> 00:07:35,660
At this point in time, it's actually the only offset.

114
00:07:36,900 --> 00:07:37,740
But let's keep going.

115
00:07:38,660 --> 00:07:46,310
Let's now at a property called Age to the use object and give it a value of 38, you guessed it, another

116
00:07:46,310 --> 00:07:47,420
shape is created.

117
00:07:48,140 --> 00:07:54,230
The JavaScript engine again transitions to this new shape that now contains both name and age.

118
00:07:55,070 --> 00:07:57,610
The property attributes attached to that age.

119
00:07:57,620 --> 00:08:04,700
It tells us that the value for age can be found at the offset one position of our user object, which

120
00:08:04,700 --> 00:08:05,240
makes sense.

121
00:08:06,230 --> 00:08:11,570
And just as a side note, and if why the order in which properties are added to the object does impact

122
00:08:11,570 --> 00:08:17,090
the result in shape, for example, we defined name and then age.

123
00:08:17,720 --> 00:08:23,060
But that's going to result in a different shape than if we had first assigned age 38 and then named

124
00:08:23,060 --> 00:08:23,380
John.

125
00:08:23,810 --> 00:08:24,320
Makes sense.

126
00:08:24,320 --> 00:08:26,120
It's just going to shuffle around all shapes.

127
00:08:28,000 --> 00:08:32,860
In fact, another way to represent this image that you're currently looking at is the following.

128
00:08:33,760 --> 00:08:38,919
As you can see, we don't need to store the full table of property attributes for each shape.

129
00:08:39,580 --> 00:08:42,970
Instead, if we shape only needs to know about the new property it introduces.

130
00:08:44,070 --> 00:08:49,170
For example, in this case, we don't have to sold information about name in the lost shape because

131
00:08:49,170 --> 00:08:50,940
it can be found earlier in the chain.

132
00:08:51,870 --> 00:08:58,200
And to make this work, every shape links back to its previous shape, and this is why it's called a

133
00:08:58,200 --> 00:08:59,160
transition chain.

134
00:08:59,670 --> 00:09:00,380
It's like a chain.

135
00:09:00,390 --> 00:09:04,710
It's like one big chain with a lot of links and all these shapes have links to each other going back.

136
00:09:05,980 --> 00:09:11,410
Now, in our case, what if we want to access the name properly and our use object, which we know is

137
00:09:11,410 --> 00:09:18,010
John, when we write user name, the JavaScript engine is going to look up the property name by first

138
00:09:18,010 --> 00:09:19,780
approaching the age shape.

139
00:09:20,600 --> 00:09:21,020
Why?

140
00:09:21,050 --> 00:09:23,240
Because that's the further down on the chain.

141
00:09:24,110 --> 00:09:28,850
It's not going to find it there, so the engine is going to keep having to walk up the transition chain

142
00:09:28,850 --> 00:09:32,060
until it finds the shape that introduced the name property.

143
00:09:33,000 --> 00:09:33,600
Makes sense.

144
00:09:34,750 --> 00:09:38,130
Okay, now we're almost done, but I want to get a little bit more complicated.

145
00:09:38,490 --> 00:09:42,720
What happens if you have two objects that offers empty and then you place different properties on each

146
00:09:42,720 --> 00:09:42,960
of them?

147
00:09:43,590 --> 00:09:47,880
Well, remember how I said transmission chains and transmission trees?

148
00:09:48,120 --> 00:09:52,740
This is where the trees come into it, because in this case, we're going to have to branch out instead

149
00:09:52,740 --> 00:09:54,450
of having a transmission chain.

150
00:09:54,810 --> 00:09:56,820
We're going to have to have a transmission tree.

151
00:09:57,360 --> 00:09:58,230
Let me show you what I mean.

152
00:09:58,950 --> 00:10:01,050
Let's create a user one object.

153
00:10:01,590 --> 00:10:04,650
First, it's empty, and then we place a property name onto it.

154
00:10:05,190 --> 00:10:10,770
We're going to end up with a JS object called use, the one that contains a single value in this case,

155
00:10:10,770 --> 00:10:11,120
John.

156
00:10:11,910 --> 00:10:14,280
And it's also going to result in how many shapes.

157
00:10:15,430 --> 00:10:20,500
In two ships, that's right, the empty shape and the shape with only a property called name.

158
00:10:21,180 --> 00:10:23,500
Okay, and let's create user to.

159
00:10:24,510 --> 00:10:26,880
Use it to is also going to start with an empty object.

160
00:10:27,120 --> 00:10:29,190
But then let's add a different property called age.

161
00:10:29,610 --> 00:10:31,050
What is the result of all this?

162
00:10:31,830 --> 00:10:35,880
Well, we're going to have two objects, but they're going to be three shapes.

163
00:10:36,720 --> 00:10:42,360
There's going to be two shape chains, one related to user one and another related to user two.

164
00:10:43,230 --> 00:10:47,640
But let me ask you this now, does this mean there's always going to be an anti shape associated with

165
00:10:47,640 --> 00:10:48,360
every object?

166
00:10:49,260 --> 00:10:50,250
No, not at all.

167
00:10:50,910 --> 00:10:52,080
Let me show you another example.

168
00:10:52,350 --> 00:10:52,890
Have a look at.

169
00:10:54,180 --> 00:10:59,110
Let's say we create user one starts off as empty and he's got a name of John.

170
00:10:59,130 --> 00:11:04,260
We know in this instance we can have a giant object with barely John that points to an empty ship that

171
00:11:04,260 --> 00:11:07,650
then transitions to a new shape with the property name of name.

172
00:11:08,430 --> 00:11:14,820
We know this, but let's say we create a second user, but this time we immediately create a property

173
00:11:14,820 --> 00:11:15,720
called name to it.

174
00:11:16,260 --> 00:11:21,750
In this case, we've created an object that immediately has the name property, and this means the JavaScript

175
00:11:21,750 --> 00:11:25,290
engine is not had to start from an empty object and transition to a new one.

176
00:11:25,320 --> 00:11:30,540
It's immediately just gone to the end result, and I'm going to make a very good point here.

177
00:11:31,080 --> 00:11:38,280
This is why object literals can be very good, because this optimization that we've just seen, it shortens

178
00:11:38,280 --> 00:11:45,180
the transmission chain and makes it more efficient to construct objects from liberals who know I want

179
00:11:45,180 --> 00:11:47,130
to get just a little bit more complicated.

180
00:11:47,250 --> 00:11:48,060
Just be with me.

181
00:11:48,090 --> 00:11:48,450
Hold on.

182
00:11:48,450 --> 00:11:48,810
Tight.

183
00:11:49,050 --> 00:11:50,940
Don't stop now.

184
00:11:51,030 --> 00:11:51,780
You're almost done.

185
00:11:51,810 --> 00:11:53,480
This is very useful information.

186
00:11:53,490 --> 00:11:54,210
Very interesting.

187
00:11:54,750 --> 00:11:59,460
Let's create a use object with three properties now name, age and bold.

188
00:11:59,490 --> 00:12:00,420
Let's just say it is ball.

189
00:12:00,420 --> 00:12:02,630
The motto is we learned before fall.

190
00:12:02,640 --> 00:12:04,680
This creates an object with how many shapes.

191
00:12:05,780 --> 00:12:07,730
With four shapes in memory, that's right.

192
00:12:08,270 --> 00:12:14,240
And now to access the property name on that object, the JavaScript engine needs to follow the linked

193
00:12:14,240 --> 00:12:14,600
list.

194
00:12:15,350 --> 00:12:19,370
It's going to have to start with the shape at the very bottom, and it is going to have to work its

195
00:12:19,370 --> 00:12:23,990
way up to the shape that introduced name, which is way at the top.

196
00:12:24,770 --> 00:12:37,640
And as I'm sure you've already case, this is going to be the only scheme if we do this more often,

197
00:12:38,210 --> 00:12:40,340
especially when the objects have a lot of properties.

198
00:12:41,030 --> 00:12:46,310
So to speed up searching for properties, the JavaScript engine adds a shape stable door to structure,

199
00:12:46,970 --> 00:12:52,010
and the shape table is a dictionary mapping property keys to the respective shapes that introduced the

200
00:12:52,010 --> 00:12:52,730
given property.

201
00:12:53,150 --> 00:12:55,940
Here is the shape table and what it looks like.

202
00:12:56,700 --> 00:13:00,840
In effect, it's another kind of dictionary that shortens this whole process.

203
00:13:01,410 --> 00:13:06,600
For example, you can see on the screen at the shaped table will tell the JavaScript engine way to find

204
00:13:06,600 --> 00:13:09,600
these property values in which shape to find these property values.

205
00:13:10,140 --> 00:13:14,040
So when we search for the name, it still starts in the shape, in the later shape.

206
00:13:14,670 --> 00:13:20,670
But the later shape points to shake table and the the JavaScript engine knows to look in which shape

207
00:13:20,670 --> 00:13:21,810
to find that name property.

208
00:13:22,260 --> 00:13:23,280
It's making sense, right?

209
00:13:24,360 --> 00:13:27,060
What cannot believe it?

210
00:13:27,240 --> 00:13:28,200
Are you serious?

211
00:13:28,410 --> 00:13:30,120
Now we've got another shake table.

212
00:13:30,330 --> 00:13:34,260
Oh, I thought the whole reason for shapes was to avoid the old dictionary.

213
00:13:34,260 --> 00:13:34,590
Look up.

214
00:13:34,860 --> 00:13:35,700
Now we've got another one.

215
00:13:36,120 --> 00:13:37,020
I don't think I don't get it.

216
00:13:37,430 --> 00:13:38,700
I guess I'm just going to give up.

217
00:13:40,690 --> 00:13:41,650
No, don't give up.

218
00:13:41,800 --> 00:13:42,700
I know the answer.

219
00:13:42,880 --> 00:13:50,410
And the reason is is that the shake table and these shakes are a means to an end, and that is to enable

220
00:13:50,410 --> 00:13:52,030
in line Kesha's.

221
00:13:54,650 --> 00:14:02,060
Line caches of the true secret behind JavaScript runtime environment makes JavaScript so fast, and

222
00:14:02,060 --> 00:14:06,500
I don't go into too much detail about inline caches because that's a whole topic in and of itself.

223
00:14:07,280 --> 00:14:12,800
But I hope I've given you enough flavor and enough knowledge so you can dig deep into this topic.

224
00:14:13,070 --> 00:14:17,600
This is what interests you, but we're not quite done with this feature because a I want to show you

225
00:14:17,600 --> 00:14:23,780
what a shake table looks like and b I just want to introduce you, but more to the concept of an inline

226
00:14:23,780 --> 00:14:26,980
cache and what it actually means that it's very, very high level.

227
00:14:26,990 --> 00:14:29,000
So just get a coffee.

228
00:14:29,150 --> 00:14:33,110
We've only got one minute left of two minutes left max of this lecture, so hang in there.

229
00:14:33,680 --> 00:14:34,470
Let's get back into.

230
00:14:35,690 --> 00:14:38,450
And I don't want to get into inland caches.

231
00:14:38,660 --> 00:14:42,230
We know that just another whole topic in and of itself that just had a very high level.

232
00:14:42,240 --> 00:14:47,480
This is how I like to think of it, say we create a functional taste that takes in the use user object

233
00:14:47,480 --> 00:14:53,450
and we just console log the user's name out when you execute the function for the first time.

234
00:14:54,050 --> 00:15:00,710
The in-line cache will look up the property name and find that value is stored at offset zero.

235
00:15:01,370 --> 00:15:04,610
Right, because we know the user, one object has the name John.

236
00:15:05,030 --> 00:15:08,450
In this case, it offsets zero when you execute that function.

237
00:15:09,050 --> 00:15:14,870
It's going to find that offset, and the in-line cache will memorize the shape and the offset at which

238
00:15:14,870 --> 00:15:15,800
that property was bombed.

239
00:15:16,640 --> 00:15:22,640
So when you look at the JS function taste, it's going to store that offset zero in that function call.

240
00:15:23,330 --> 00:15:28,940
And what this means is that if the JavaScript engine sees objects with the shape that the inline cache

241
00:15:28,940 --> 00:15:33,890
recorded before it no longer needs to reach out to the property information at all.

242
00:15:34,730 --> 00:15:38,780
Instead, the expense of property information lookup can be skipped entirely.

243
00:15:39,350 --> 00:15:43,220
And this is significantly faster than looking up the property each time.

244
00:15:44,060 --> 00:15:47,750
Let me show you what I mean, so see how we set up the test function.

245
00:15:47,750 --> 00:15:53,000
We've called it on user one and the in-line cache is stored offset zero in the function itself.

246
00:15:54,360 --> 00:15:56,640
Now, when we call it on, use it, too.

247
00:15:57,030 --> 00:15:58,080
What do you think's going to happen?

248
00:15:58,960 --> 00:16:03,970
Well, in this case, the airline cash is going to recognize that it's got the same shape, and instead

249
00:16:03,970 --> 00:16:10,000
of having to look up the property attributes and go to the shade, tables etc etc, it knows it's etc.,

250
00:16:10,540 --> 00:16:16,420
So all it does is it takes it in line cash of zero and it returns eventually from that object.

251
00:16:17,320 --> 00:16:17,860
Cool, right.

252
00:16:18,340 --> 00:16:20,560
But anyway, that's a very high level of inline caches.

253
00:16:20,860 --> 00:16:24,940
You don't have to really understand it too much in depth now, but if you do want to dig deeper, I

254
00:16:24,940 --> 00:16:26,860
hope I've given you enough of a flavor.

255
00:16:27,890 --> 00:16:30,530
Well, this has been a long lecture, so thanks for being with me.

256
00:16:30,560 --> 00:16:31,010
Well done.

257
00:16:31,010 --> 00:16:33,740
If you've got this fall, I just want to recap quickly.

258
00:16:34,130 --> 00:16:40,880
We've learnt how JavaScript engines store objects and arrays and how shapes and inline caches help to

259
00:16:40,880 --> 00:16:43,460
optimize operations on these objects.

260
00:16:44,210 --> 00:16:45,530
And based on this knowledge.

261
00:16:46,010 --> 00:16:47,450
What can we take away from it?

262
00:16:48,320 --> 00:16:51,950
Well, if there's one thing we can take away from this, that's practical.

263
00:16:52,670 --> 00:16:57,710
We must just initialize our objects in the same way so they don't end up having different shapes.

264
00:16:58,490 --> 00:17:05,000
For example, if you want to create a user object, don't create one with a property and name another

265
00:17:05,000 --> 00:17:06,319
one with its name.

266
00:17:06,710 --> 00:17:08,660
Another one of first name.

267
00:17:08,990 --> 00:17:11,690
Another one was first and then a capital in your name.

268
00:17:12,230 --> 00:17:15,599
That's all going to have different shapes, and it's going to make things more complicated and slow

269
00:17:15,630 --> 00:17:16,160
the background.

270
00:17:16,760 --> 00:17:20,240
Rather be consistent in how you initialize your objects.

271
00:17:21,230 --> 00:17:21,520
Cool.

272
00:17:21,530 --> 00:17:23,730
I hope this has been very informative to you.

273
00:17:23,750 --> 00:17:25,310
I had a lot of fun putting it together.

274
00:17:25,670 --> 00:17:29,060
Was quite a complicated topic, and not many people know about it.

275
00:17:29,060 --> 00:17:30,970
So, yeah, enjoy it.

276
00:17:30,980 --> 00:17:32,090
And let's move on.

277
00:17:32,150 --> 00:17:34,550
Let's get into some more JavaScript season.

