1
00:00:00,250 --> 00:00:04,440
Yes, so you've heard that floating point numbers can do weird things.

2
00:00:06,080 --> 00:00:08,420
Let me show you an example that'll just blow your mind.

3
00:00:09,470 --> 00:00:17,330
And before I do, I just want to clarify that this problem is not only JavaScript related, it's actually

4
00:00:17,480 --> 00:00:21,440
going to happen in any programming language that uses floating point numbers.

5
00:00:22,760 --> 00:00:24,200
But now let me show you this quick example.

6
00:00:26,420 --> 00:00:27,800
Here I'm using CodePen.

7
00:00:29,260 --> 00:00:34,600
And I can just double click here because we're not using HTML and CSS, I just want to show you a JavaScript

8
00:00:34,600 --> 00:00:35,170
example.

9
00:00:36,160 --> 00:00:42,490
And let's define a variable "a" that is equal to 0.1 + 0.2.

10
00:00:43,270 --> 00:00:44,380
It couldn't be simpler, right?

11
00:00:45,340 --> 00:00:46,570
What do you think the answer should be?

12
00:00:47,410 --> 00:00:49,120
Well, we know the answer should be 0.3.

13
00:00:49,940 --> 00:00:55,690
But what happens when I console.log this variable a? Let's look at what it produces.

14
00:01:01,680 --> 00:01:07,350
It's almost 0.3, but it's not quite. There is this random digit 4 on the end.

15
00:01:08,770 --> 00:01:09,760
That is crazy.

16
00:01:10,360 --> 00:01:13,930
Let me quickly zip across and show you why this happens.

