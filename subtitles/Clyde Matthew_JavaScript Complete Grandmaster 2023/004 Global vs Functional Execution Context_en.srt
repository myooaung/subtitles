1
00:00:00,240 --> 00:00:02,160
And it ought to lose you with all this theory.

2
00:00:02,280 --> 00:00:03,540
Please, I really don't.

3
00:00:03,719 --> 00:00:09,090
I understand it can be a bit abstract and I mean, the execution context in and of itself is an abstract

4
00:00:09,090 --> 00:00:09,630
concept.

5
00:00:10,080 --> 00:00:14,490
That's an environment with JavaScript code is evaluated and executed.

6
00:00:15,330 --> 00:00:21,180
But if there's one thing you're going to take away from this, just remember whenever any code runs

7
00:00:21,180 --> 00:00:25,980
in JavaScript, it has to be run inside an execution context.

8
00:00:26,640 --> 00:00:29,490
And there are different types of execution contexts.

9
00:00:30,000 --> 00:00:32,700
I'm going to talk about two here, but they are actually three.

10
00:00:32,910 --> 00:00:39,660
The third one is called any vol function execution context, and this is just code that's executed inside

11
00:00:39,660 --> 00:00:44,040
and eval function and that gets its own execution context.

12
00:00:44,370 --> 00:00:49,230
But evil isn't used by JavaScript developers, so I'm just not going to discuss it yet.

13
00:00:49,260 --> 00:00:50,010
It's a bit pointless.

14
00:00:50,490 --> 00:00:58,740
The ones that are important to us are one the global execution context and to the functional execution

15
00:00:58,740 --> 00:00:59,370
context.

16
00:01:00,120 --> 00:01:01,470
Well, that start somewhere.

17
00:01:01,470 --> 00:01:04,050
Let's start with the global execution context.

18
00:01:05,620 --> 00:01:11,080
The first point to note with this is that this is the default base execution context when you go and

19
00:01:11,080 --> 00:01:13,810
create a JavaScript file and you just open it up.

20
00:01:14,050 --> 00:01:14,410
Boom.

21
00:01:14,890 --> 00:01:18,460
That's the global execution context created cool, right?

22
00:01:18,940 --> 00:01:19,660
And it makes sense.

23
00:01:20,260 --> 00:01:25,670
And what else is in the global execution context when you start writing JavaScript, any code?

24
00:01:25,690 --> 00:01:27,910
Not within a function is global.

25
00:01:28,810 --> 00:01:31,600
And what does this global execution context do?

26
00:01:31,690 --> 00:01:32,860
Does one of two things.

27
00:01:33,610 --> 00:01:36,430
One, it creates a global object.

28
00:01:37,120 --> 00:01:40,870
Remember how we've always been accessing the window object?

29
00:01:41,110 --> 00:01:43,000
We've seen it many times throughout this course.

30
00:01:43,590 --> 00:01:48,370
Well, that is the global object and that's created by the global execution context.

31
00:01:48,700 --> 00:01:50,290
And what's the second thing it does?

32
00:01:50,800 --> 00:01:56,320
It sets this to the global object, and we're going to see examples of this shortly.

33
00:01:57,070 --> 00:02:02,980
But the main point that you need to know is the global execution context is that there can be harmony

34
00:02:03,460 --> 00:02:04,330
in each program.

35
00:02:05,270 --> 00:02:05,900
That's right.

36
00:02:06,140 --> 00:02:10,370
They can only be one global execution context in any given program.

37
00:02:11,000 --> 00:02:12,590
That's an important point to remember.

38
00:02:13,310 --> 00:02:13,730
OK.

39
00:02:13,760 --> 00:02:15,470
And that's what global execution contexts.

40
00:02:15,500 --> 00:02:16,640
You've got that nailed.

41
00:02:17,270 --> 00:02:20,630
Now let's move on to the second type of execution context.

42
00:02:21,080 --> 00:02:24,080
And that is functional execution context.

43
00:02:24,650 --> 00:02:30,860
Remember how we just said that there can only be one global execution context of functional execution

44
00:02:30,860 --> 00:02:34,160
context is different because when a function is called.

45
00:02:34,310 --> 00:02:36,770
And remember, what's the programming jargon for that?

46
00:02:36,800 --> 00:02:41,180
It's just invoked when a function is invoked, a new execution context.

47
00:02:41,540 --> 00:02:47,330
In particular, a new functional execution context is created for that function.

48
00:02:48,390 --> 00:02:52,980
So this means that each function has its own unique execution context.

49
00:02:53,670 --> 00:02:55,530
And I just want to stress this again.

50
00:02:55,920 --> 00:03:00,570
There can be lots of functional execution contexts running at the same time.

51
00:03:01,250 --> 00:03:04,200
Yes, we have done a lot, but this is only theory.

52
00:03:04,380 --> 00:03:06,240
Let me show you an example of what this means.

