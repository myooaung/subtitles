WEBVTT
1
00:00:01.280 --> 00:00:04.460
We've done a lot, but we're going to keep going, I don't want us to stop.

2
00:00:04.970 --> 00:00:11.390
And I want to now show you how the browser goes from a source HTML document to displaying a styled and

3
00:00:11.390 --> 00:00:12.860
interactive page in the viewport.

4
00:00:13.100 --> 00:00:19.040
I know we keep referring to this entire process as a rendering process, but the more correct technical

5
00:00:19.040 --> 00:00:22.040
terminology is to call it the critical rendering path.

6
00:00:22.640 --> 00:00:26.840
So right now, I just want us to take a step back, and I want to show you what the critical rendering

7
00:00:26.840 --> 00:00:29.930
path looks like at a very high level bird's eye view.

8
00:00:30.620 --> 00:00:36.440
What is the first step for the first stage involves a browser passing the document your HTML to determine

9
00:00:36.440 --> 00:00:38.870
what will ultimately be rendered onto the page.

10
00:00:39.530 --> 00:00:42.770
The second stage involves the browser performing the actual render.

11
00:00:43.250 --> 00:00:44.070
So how does this look?

12
00:00:44.090 --> 00:00:46.400
So we know we've got a HTML.

13
00:00:46.970 --> 00:00:49.340
This is what you and I are used to writing.

14
00:00:49.940 --> 00:00:50.810
What happens next?

15
00:00:56.500 --> 00:01:04.959
Well, the first step is full of rendering engine to pass the HTML document and convert that code into

16
00:01:05.080 --> 00:01:07.720
dom nodes in a tree called the content tree.

17
00:01:07.930 --> 00:01:10.460
But at the same time, not many people realize this.

18
00:01:10.480 --> 00:01:13.030
The engine will also pass the styled alter.

19
00:01:13.810 --> 00:01:19.240
The styling information, together with the visual instructions in the HTML, will be used to create

20
00:01:19.240 --> 00:01:19.840
another tree.

21
00:01:20.440 --> 00:01:22.780
The C is on tree.

22
00:01:23.790 --> 00:01:31.500
And finally, the Dom Tree and the CSIS entree are combined to form their industry.

23
00:01:32.340 --> 00:01:33.330
So that's our goal.

24
00:01:33.510 --> 00:01:39.570
Our goal is to get from the age HTML, which you see to the industry and to get to that in state.

25
00:01:39.870 --> 00:01:42.840
Both the DOM and this is on have to be created.

26
00:01:43.080 --> 00:01:44.310
And what's our next goal?

27
00:01:44.490 --> 00:01:47.650
Well, the next goal is to actually display that data on a screen.

28
00:01:47.670 --> 00:01:53.220
In our case, we've got an H1 tag called critical rendering path that needs to be displayed onto our

29
00:01:53.220 --> 00:01:53.730
browser.

30
00:01:53.850 --> 00:01:54.630
How does it happen?

31
00:01:55.020 --> 00:02:00.240
We see the first step is to construct the straw in the tree and after the construction of this tree,

32
00:02:00.240 --> 00:02:03.240
it goes through a layout process.

33
00:02:03.810 --> 00:02:09.389
This means giving each node the exact coordinates, which should appear on the screen, and the next

34
00:02:09.389 --> 00:02:11.009
stage is painting.

35
00:02:11.910 --> 00:02:18.090
The render tree will be traversed and each node will be painted using the UI back in layer.

36
00:02:18.540 --> 00:02:22.830
And it's important to understand that this entire process is gradual.

37
00:02:23.460 --> 00:02:28.770
For better user experience, the rendering engine will try to display content on the screen as soon

38
00:02:28.770 --> 00:02:29.340
as possible.

39
00:02:29.610 --> 00:02:34.530
It won't always wait until the HTML was passed before starting to build and lay out the industry.

40
00:02:35.160 --> 00:02:40.020
Parts of the content we passed and displayed while the process continues and the rest of the content

41
00:02:40.020 --> 00:02:41.880
keeps coming from the network.

42
00:02:42.690 --> 00:02:44.190
And just remember what I said?

43
00:02:44.340 --> 00:02:49.650
This whole process is technically called the critical rendering path.

44
00:02:50.280 --> 00:02:54.120
And it's important for us to understand it because it will make us better developers.

