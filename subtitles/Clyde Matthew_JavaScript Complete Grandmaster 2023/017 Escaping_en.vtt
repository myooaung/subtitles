WEBVTT
1
00:00:00.330 --> 00:00:04.350
I hope you're getting used to JavaScript now. You are starting to write a lot.

2
00:00:05.370 --> 00:00:11.790
Let's continue with strings. Something else with strings and you'll see this a lot, is that it has to

3
00:00:11.790 --> 00:00:15.420
be enclosed within double parentheses or just single quotation marks.

4
00:00:16.200 --> 00:00:20.340
If I go variable person equals

5
00:00:21.480 --> 00:00:23.820
"My name is John".

6
00:00:27.090 --> 00:00:32.189
And we just document.write that to the console.

7
00:00:33.940 --> 00:00:37.090
Sorry, let's just get rid of this "click me" button in the HTML.

8
00:00:41.980 --> 00:00:43.430
You can see "My name is John".

9
00:00:43.480 --> 00:00:49.060
What happens, though, if you want this in quotation marks as well?

10
00:00:49.330 --> 00:00:53.470
Well, there are two ways you can do it. #1, you can just have one set of quotation marks in here.

11
00:00:54.780 --> 00:00:55.620
And it does it for you.

12
00:00:56.130 --> 00:00:57.120
You can see the result.

13
00:00:58.320 --> 00:01:03.790
#2 But the other way is what's known as escaping.

14
00:01:03.850 --> 00:01:10.860
JavaScript text and strings can be used to manipulate text. And a string is just any text within quotes.

15
00:01:11.130 --> 00:01:18.180
But when you put a backslash in front of anything, it tells the browser that it must ignore its normal

16
00:01:18.180 --> 00:01:22.140
execution context of treating whatever it is that you put that in front of!

17
00:01:22.530 --> 00:01:23.640
Wow, it's a mouthful.

18
00:01:24.030 --> 00:01:25.610
Let me show you what I mean by that.

19
00:01:26.680 --> 00:01:32.230
If you wanted John to be in its own inverted comments, but you wanted to use double quotation marks,

20
00:01:33.370 --> 00:01:34.270
how would we do that?

21
00:01:35.110 --> 00:01:37.030
Well, you can escape it.

22
00:01:37.120 --> 00:01:38.290
You would use the backslash,

23
00:01:39.480 --> 00:01:41.130
and you can use double quotation marks.

24
00:01:42.960 --> 00:01:45.170
How cool is that?

25
00:01:47.970 --> 00:01:49.950
There you go. Let's get rid of that one.
There you go.

26
00:01:54.220 --> 00:01:55.030
My name is John.

27
00:01:55.870 --> 00:01:57.110
That's called escaping.

28
00:01:57.130 --> 00:02:01.230
Let's find out more about escaping now. Escaping characters,

29
00:02:01.240 --> 00:02:06.010
we've seen how this works in terms of double quotation marks, but we're not limited to that.

30
00:02:06.340 --> 00:02:08.830
So let's just take a step back and go over it again.

31
00:02:09.940 --> 00:02:16.240
Escaping just means that you temporarily exit out of parsing your code the usual way.

32
00:02:16.870 --> 00:02:19.980
So you're just telling the browser to escape that process,

33
00:02:19.990 --> 00:02:21.250
get out of that process.

34
00:02:21.880 --> 00:02:28.330
The backslash as a marker that tells the interpreter that the next characters are special in some way,

35
00:02:28.510 --> 00:02:31.180
that it mustn't interpret those as it normally would.

36
00:02:32.220 --> 00:02:41.610
What these next characters mean is then up to the interpreter. For example, C-style languages use \n

37
00:02:41.610 --> 00:02:45.450
to mean a newline and \t to mean a tab.

38
00:02:46.050 --> 00:02:49.920
And JavaScript 
(boom explosion sound)
and many other languages are very similar in these respects.

39
00:02:50.850 --> 00:02:58.470
So let's take the example "Hello world" and say you want to have "Hello" and "world" on separate lines?

40
00:02:59.460 --> 00:03:00.300
How would we do that?

41
00:03:00.300 --> 00:03:04.860
Well, one way is to put that \n, and "n" just stands for newline.

42
00:03:06.090 --> 00:03:12.990
The interpreter will then see the backslash, and it knows now that the "n" has a special meaning. It

43
00:03:12.990 --> 00:03:16.040
mustn't be taken as the letter "n". Yes, 

44
00:03:16.050 --> 00:03:17.820
so we know "n" has a special meaning,

45
00:03:18.240 --> 00:03:19.530
but what meaning is that?

46
00:03:19.530 --> 00:03:23.070
And in JavaScript that "n" means newline.

47
00:03:24.150 --> 00:03:32.750
In summary, when this result is displayed in the browser, it's not going to be shown as "Hello \n 

48
00:03:32.840 --> 00:03:33.270
\n world".

49
00:03:34.290 --> 00:03:36.660
It will be shown, though, as Hello

50
00:03:37.080 --> 00:03:42.540
and on the next line, you're going to see "world". And this is all escaping is. Again,

51
00:03:42.570 --> 00:03:47.610
don't be intimidated with all the terminology in programming languages. At the crux of it,

52
00:03:47.670 --> 00:03:48.900
it's actually very simple.

