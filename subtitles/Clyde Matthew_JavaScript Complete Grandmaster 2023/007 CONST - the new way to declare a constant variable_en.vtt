WEBVTT
1
00:00:00.120 --> 00:00:06.960
And of course, the cousin of let is const. And this is the most strict way to declare a variable,

2
00:00:06.960 --> 00:00:12.450
and my advice is to use const as much as possible because it gets you to organize your code in a much

3
00:00:12.450 --> 00:00:13.260
more structured way.

4
00:00:13.860 --> 00:00:16.440
Const was introduced at the same time as let.

5
00:00:16.710 --> 00:00:21.110
It's more strict and it's limited to the scope it's declared in.

6
00:00:21.930 --> 00:00:23.760
But this is the important aspect of it.

7
00:00:24.150 --> 00:00:26.610
Its value cannot change.

8
00:00:27.390 --> 00:00:32.610
And like I said, it just results in you being more organized in the way you code.

9
00:00:33.770 --> 00:00:35.180
Let's have a look at an example.

10
00:00:35.990 --> 00:00:41.600
Well, let's say we've got a name of Wally and we use the const keyword. If I try and put the const name

11
00:00:41.600 --> 00:00:42.150
equals WallyBee,

12
00:00:43.520 --> 00:00:44.270
It won't work.

13
00:00:44.270 --> 00:00:45.290
It'll throw me an error.

14
00:00:46.190 --> 00:00:47.390
It was the same as let.

15
00:00:47.510 --> 00:00:49.430
We weren't able to do that with let either.

16
00:00:49.430 --> 00:00:55.580
But with let, remember we could re-assign a value to a variable by just not having the "let" keyword.

17
00:00:55.580 --> 00:00:56.540
We just had the name.

18
00:00:57.900 --> 00:01:04.080
Well, if we try that with const you get an error, which is very, very awesome. And just bear in

19
00:01:04.080 --> 00:01:10.710
mind when you're using const, you must initialize a value. You cannot just type "const name", for example,

20
00:01:11.220 --> 00:01:15.330
you have to assign a value at the same time you initialize it.

21
00:01:16.220 --> 00:01:17.060
Hope that makes sense.

22
00:01:17.090 --> 00:01:17.750
Let's continue.

23
00:01:19.400 --> 00:01:23.960
Just quickly before we move on, I want to show you the differences between var and const when it comes

24
00:01:23.960 --> 00:01:26.270
to reassigning and re-declaring variables.

25
00:01:27.740 --> 00:01:32.570
Firstly, with var let's define a variable called "a" and's let's make that 10.

26
00:01:34.820 --> 00:01:40.700
With var, we had so much flexibility, which you could argue is good, but the flip side is that it

27
00:01:40.700 --> 00:01:43.340
caused a lot of bugs and a lot of errors in your code.

28
00:01:44.310 --> 00:01:49.460
Because var allows you to do whatever you want. Right now, if I type "a"

29
00:01:50.280 --> 00:01:54.480
we would expect 10, because we've declared it as 10, we've assigned the value of 10 to it.

30
00:01:55.740 --> 00:01:57.210
But what happens if I reassign it?

31
00:01:58.540 --> 00:02:01.510
var a equals 15, what's "a" now?

32
00:02:01.960 --> 00:02:06.880
Well, this is where we start muddling up all our variables because now what the parser has actually done

33
00:02:06.880 --> 00:02:10.030
is it's overwritten "a" to 15. 

34
00:02:11.080 --> 00:02:13.900
And you can see that here, we've actually lost our value 10.

35
00:02:14.980 --> 00:02:19.830
That's the one implication of var. The other implication is that we don't even have to re-declare

36
00:02:19.840 --> 00:02:20.070
it.

37
00:02:20.110 --> 00:02:23.500
We can just reassign it by typing "a equals eight". 

38
00:02:24.710 --> 00:02:27.110
Now a equals eight, as you would expect.

39
00:02:27.230 --> 00:02:31.940
Now we've lost the 15! So you can see we can do weird things with var.

40
00:02:32.510 --> 00:02:34.820
We can even go var a equals one.

41
00:02:35.840 --> 00:02:41.180
Then on the next line, we can go var a equals two, and so forth and so on.

42
00:02:43.800 --> 00:02:49.680
And this is where const comes into the picture. Const solves this problem, it makes us be more organized

43
00:02:49.680 --> 00:02:53.970
as coders, helps us to be more structured and to think about the variables we create.

44
00:02:55.610 --> 00:02:57.200
Let's try the same thing with const.

45
00:02:57.860 --> 00:02:58.790
Let's define

46
00:03:00.740 --> 00:03:01.280
the car.

47
00:03:02.880 --> 00:03:03.960
And let's make that car, a

48
00:03:03.990 --> 00:03:04.710
BMW.

49
00:03:07.460 --> 00:03:09.880
If I type car, we should get BMW.

50
00:03:10.070 --> 00:03:11.930
But now we've used the const keyword.

51
00:03:12.620 --> 00:03:16.430
So if I want to now override it and go const car, 

52
00:03:17.760 --> 00:03:18.390
equals

53
00:03:18.630 --> 00:03:19.020
I dunno, 

54
00:03:19.530 --> 00:03:20.220
Toyota.

55
00:03:22.420 --> 00:03:25.750
It literally gives me an Unexpected Identifier.

56
00:03:26.590 --> 00:03:30.460
What about if I just tried to reassign by typing car and doing it this way?

57
00:03:34.560 --> 00:03:41.070
Nope! I get a very similar error. I get an Uncaught TypeError:Assignment to a constant variable.

58
00:03:41.880 --> 00:03:43.980
This is the awesome thing about const.

59
00:03:45.630 --> 00:03:46.290
Let's continue.

