WEBVTT
1
00:00:07.050 --> 00:00:09.360
Who we've come an incredibly long way.

2
00:00:09.450 --> 00:00:10.710
Well done for getting this far.

3
00:00:10.800 --> 00:00:12.010
I hope you've had a lot of fun.

4
00:00:12.030 --> 00:00:13.050
I hope you enjoy it.

5
00:00:13.680 --> 00:00:19.290
But it's now just quickly give a summary of what we've done and where we can place our JavaScript code

6
00:00:19.290 --> 00:00:20.400
to speed things up.

7
00:00:21.150 --> 00:00:24.300
I split it up into six main categories, right?

8
00:00:24.300 --> 00:00:28.770
The most obvious number one is you can place your JavaScript code anywhere, but then you just need

9
00:00:28.770 --> 00:00:33.480
to realize that you're going to be blocking the DOM at the point your partner gets to your script.

10
00:00:33.480 --> 00:00:38.700
And if it's a very simple site that may be perfectly fine and plausible too, we can place our JavaScript

11
00:00:38.700 --> 00:00:43.140
below the main Dom directly above our closing body tank.

12
00:00:43.500 --> 00:00:45.170
This is website 101.

13
00:00:45.180 --> 00:00:50.970
This is what we've all been told to do, and although it's good practice to do this, it might be suboptimal.

14
00:00:50.970 --> 00:00:54.180
And I say that because think about what it is, it's going to be happening.

15
00:00:54.180 --> 00:00:58.920
When you put the JavaScript at the bottom, you would agree with me that before the final, render before

16
00:00:58.920 --> 00:01:00.330
the final paint your screen.

17
00:01:00.720 --> 00:01:04.310
Those JavaScript files have to be executed, don't they?

18
00:01:04.830 --> 00:01:10.050
For those reasons, sometimes placing the JavaScript file directly above your closing body tag isn't

19
00:01:10.050 --> 00:01:12.030
quite the most optimal thing you can do.

20
00:01:12.600 --> 00:01:13.080
Three.

21
00:01:13.500 --> 00:01:18.180
If your JavaScript code doesn't rely on the DOM, we can use that async attribute.

22
00:01:18.600 --> 00:01:23.730
So does this mean will this just means if your code doesn't rely on your dom being loaded and it runs

23
00:01:23.730 --> 00:01:28.410
more as part of team or things for other scripts in your document, then you can place a script at the

24
00:01:28.410 --> 00:01:32.940
top of your page with the async attribute set on it, and your browser will determine when the most

25
00:01:32.940 --> 00:01:37.500
optimal point is for it to execute that file, and it'll featured in the background.

26
00:01:37.500 --> 00:01:44.460
Remember, asynchronously Alcool set and number four with our JavaScript code does rely on our Dom being

27
00:01:44.460 --> 00:01:45.390
fully constructed.

28
00:01:45.630 --> 00:01:52.440
Then we can use defer and the benefit was using defer is that it holds off executing their JavaScript

29
00:01:52.440 --> 00:01:56.280
file just before the moment of Dom content loaded event occurs.

30
00:01:56.790 --> 00:02:01.620
Well, Clyde, you might be asking, isn't this just the same as placing our JavaScript below the Dom

31
00:02:01.620 --> 00:02:03.480
directly above our closing body tag?

32
00:02:04.230 --> 00:02:05.940
And it almost is the same.

33
00:02:05.940 --> 00:02:07.690
That's a very good question, but was deferred.

34
00:02:07.770 --> 00:02:08.699
Remember what we're doing?

35
00:02:09.000 --> 00:02:13.330
We're allowing the browser to fetch JavaScript asynchronously in the background.

36
00:02:13.800 --> 00:02:19.050
So by the time the Dom is fully loaded, the JavaScript file is already there and it can immediately

37
00:02:19.050 --> 00:02:19.620
execute.

38
00:02:19.800 --> 00:02:24.060
Whereas if we just place it above the chosing body tag, remember what happens then?

39
00:02:24.630 --> 00:02:30.450
Well, your browser's poor, so can't reach any other file when it hits such cryptic call number five.

40
00:02:30.450 --> 00:02:35.580
If you really want to be specific and these don't quite give you what you want, then you can build

41
00:02:35.580 --> 00:02:40.260
your own custom load of it and you've obviously got a few different methods.

42
00:02:40.290 --> 00:02:45.030
We've seen that we can add our own event system to the window object called load.

43
00:02:45.120 --> 00:02:45.780
We've done that.

44
00:02:45.780 --> 00:02:48.050
We've seen that's been awesome anyway.

45
00:02:48.060 --> 00:02:54.750
And then the last one is number six and that is preload and preload gives you a lot of flexibility because

46
00:02:54.750 --> 00:03:01.560
it allows you to tell the browser to download and cache a resource like a script or a style sheet as

47
00:03:01.560 --> 00:03:02.580
soon as possible.

48
00:03:03.030 --> 00:03:06.480
So it's very helpful when you need a specific resource.

49
00:03:06.480 --> 00:03:10.890
A few seconds after loading the page and you want to speed up the critical rendering path.

50
00:03:11.580 --> 00:03:12.960
Remember this with the preload?

51
00:03:12.960 --> 00:03:14.430
This is a very important point.

52
00:03:14.640 --> 00:03:20.550
The browser doesn't do anything with the resource after downloading it by using preload.

53
00:03:20.910 --> 00:03:22.470
Scripts aren't executed.

54
00:03:22.560 --> 00:03:24.030
Style sheets aren't applied.

55
00:03:24.450 --> 00:03:29.520
They are just cached so that when something else needs it, it's available immediately.

56
00:03:29.730 --> 00:03:33.060
So think about preloading as literally just pre fitting.

57
00:03:33.090 --> 00:03:37.410
It's you telling the browser, Hey, get this resource as quickly as possible.

58
00:03:37.410 --> 00:03:39.310
So in our code needs it, it's there.

59
00:03:39.940 --> 00:03:41.010
Hope it's making sense.

60
00:03:41.400 --> 00:03:43.890
And again, well done for getting this file.

61
00:03:43.920 --> 00:03:45.030
I'll see you in the next section.

