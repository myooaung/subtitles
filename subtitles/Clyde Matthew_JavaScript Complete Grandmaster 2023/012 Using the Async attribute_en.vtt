WEBVTT
1
00:00:00.530 --> 00:00:02.690
And next, we have async.

2
00:00:03.370 --> 00:00:05.380
Async was introduced by H.

3
00:00:05.390 --> 00:00:11.090
HTML five, but actually came after defer, which we're going to see next, but I want to first talk

4
00:00:11.090 --> 00:00:11.810
about async.

5
00:00:12.500 --> 00:00:14.790
Remember, there are JavaScript files all synchronous.

6
00:00:15.320 --> 00:00:22.340
Well, the async attribute signals to the browser to load JavaScript asynchronously basically is doing

7
00:00:22.340 --> 00:00:28.430
the browser to fetch the script when resources become available, as opposed to just pausing the HMO

8
00:00:28.430 --> 00:00:29.420
passing completely.

9
00:00:29.810 --> 00:00:31.550
Let's now look at what this looks like.

10
00:00:32.360 --> 00:00:36.890
Our HTML parser begins passing out foul line by line.

11
00:00:37.310 --> 00:00:38.870
But this is a cool thing with async.

12
00:00:38.870 --> 00:00:42.110
It doesn't pause the passing when the file is being sent.

13
00:00:42.140 --> 00:00:45.140
The browser can do this with additional resources in the background.

14
00:00:45.680 --> 00:00:50.300
From previous examples, you would have seen it when the browser hits that script tank, it blocks the

15
00:00:50.300 --> 00:00:51.920
browser from doing its thing.

16
00:00:52.370 --> 00:00:56.420
In other words, it stops the browser from becoming responsive and usable.

17
00:00:56.510 --> 00:01:01.730
So by adding this async attribute, we avoid this problem altogether.

18
00:01:01.760 --> 00:01:06.160
The browser can still run separate processes in the background, like fetching files.

19
00:01:06.170 --> 00:01:08.480
We're going to see the shortly, so that's async.

20
00:01:08.690 --> 00:01:09.590
Let's get back into it.

21
00:01:10.770 --> 00:01:17.220
It's only during the execution phase that the possible completely stop, and once that execution is

22
00:01:17.220 --> 00:01:23.340
finished, obviously you can continue passing document and in the dome contain loaded event can fire.

23
00:01:24.420 --> 00:01:29.760
Although this casualness in running your code seems pretty awesome, you must realize that your scripts

24
00:01:29.760 --> 00:01:32.820
marked as async will not always run an order.

25
00:01:33.270 --> 00:01:38.210
So what this means is that you could have a case with several scripts marked with async or run in order

26
00:01:38.250 --> 00:01:41.400
that's different than what they were specified in your markup.

27
00:01:41.640 --> 00:01:47.220
The only guarantee we have when we mark our JavaScript files with async is that they will start running

28
00:01:47.220 --> 00:01:50.940
at some mysterious point before the load event gets fired.

29
00:01:51.810 --> 00:01:57.420
So bear in mind, some of these async scripts can actually be executed before the Dom content loaded

30
00:01:57.420 --> 00:02:01.410
event files and also after the Dom Content Loaded event files.

31
00:02:01.500 --> 00:02:03.810
This is an important point to grasp.

32
00:02:04.440 --> 00:02:10.710
Now I want us to look at async, and let's just start at exactly the same page that we had before,

33
00:02:10.979 --> 00:02:13.040
but now we're not placing JavaScript at the bottom.

34
00:02:13.620 --> 00:02:14.730
So now we're using.

35
00:02:16.080 --> 00:02:20.160
The async attribute and the H1 header, we can just say.

36
00:02:21.190 --> 00:02:27.970
This is using the async and using async is incredibly simple.

37
00:02:28.210 --> 00:02:33.070
All we have to do is add an attribute called the MMMMMMM async.

38
00:02:34.050 --> 00:02:35.040
Very intuitive, right?

39
00:02:35.790 --> 00:02:40.470
So all we have to do is go to our external script tags and we need to add the word async.

40
00:02:43.520 --> 00:02:48.560
And there you go, the signals to the browser that it most features resources in the background, preload

41
00:02:48.560 --> 00:02:48.800
them.

42
00:02:49.070 --> 00:02:51.710
So in our code is ready to execute them daily.

43
00:02:52.100 --> 00:02:53.420
It's all that async does.

44
00:02:53.450 --> 00:02:59.360
And remember, it can start at any time for when the pulse of first starts passing you, Jamal, all

45
00:02:59.360 --> 00:03:00.680
the way to the load of it.

46
00:03:01.230 --> 00:03:02.870
OK, this is what async does.

47
00:03:04.320 --> 00:03:06.780
So let's see what would you expect to happen here?

48
00:03:07.410 --> 00:03:08.100
Let's find out.

49
00:03:09.050 --> 00:03:09.920
Let's load up page.

50
00:03:10.960 --> 00:03:17.200
And what's awesome is that our external one JavaScript file has worked because the heading to tag is

51
00:03:17.200 --> 00:03:23.350
read and our external two files work because the HD tag is blue, so that's very cool.

52
00:03:24.040 --> 00:03:29.320
Now, before we expect our console log, I want you to think about what you would expect to happen.

53
00:03:29.470 --> 00:03:30.640
So let's go back to our file.

54
00:03:32.080 --> 00:03:33.190
What would you expect to happen?

55
00:03:33.880 --> 00:03:35.560
We'll remember what the async does.

56
00:03:36.670 --> 00:03:39.030
The async is for non-critical scripts.

57
00:03:39.040 --> 00:03:46.030
We're trying to improve our copy process, our critical rendering path process and adding this async

58
00:03:46.030 --> 00:03:49.420
attribute tells the browser can fetch the files in the background.

59
00:03:49.960 --> 00:03:53.380
And when it has big capacity, it can execute those files.

60
00:03:53.650 --> 00:03:57.280
So you have no control on exactly when it's going to be executed.

61
00:03:58.790 --> 00:04:04.740
But here it will place these as lower priority than the other scripts in your document, for example,

62
00:04:04.740 --> 00:04:10.610
do you see that in line scripts, the console log in lane one and console log in line two and console

63
00:04:10.610 --> 00:04:11.720
log in line three?

64
00:04:12.710 --> 00:04:19.250
Well, because we've added async, I would expect those in line console logs to be displayed first and

65
00:04:19.250 --> 00:04:20.390
only after that's done.

66
00:04:20.959 --> 00:04:24.110
Will the async scripts get executed, so let's see if that occurred.

67
00:04:24.860 --> 00:04:25.610
I hope I'm right.

68
00:04:25.670 --> 00:04:27.320
Otherwise, it's going to be awkward.

69
00:04:27.590 --> 00:04:28.190
This is awkward.

70
00:04:28.310 --> 00:04:29.630
So let's inspect the documents.

71
00:04:32.190 --> 00:04:38.490
And let's go to the console in line one in line to in line three and an external one, an external to

72
00:04:38.490 --> 00:04:40.320
exactly what I was just expecting.

73
00:04:41.010 --> 00:04:43.230
So this that's all working as expected.

74
00:04:43.230 --> 00:04:44.940
Now let's assess the performance again.

75
00:04:47.060 --> 00:04:50.450
And again, let's start profiling and reloading this page, let's wait.

76
00:04:52.950 --> 00:04:58.680
And now we got the zoom in on the area of importance, and now we can start searching for those events,

77
00:04:58.680 --> 00:05:03.780
right, we can go on to event log and we can look for the dumb content loaded event.

78
00:05:04.650 --> 00:05:05.940
And how long has it taken now?

79
00:05:06.690 --> 00:05:07.320
Less, right?

80
00:05:07.350 --> 00:05:10.210
One hundred and fifty four point three milliseconds?

81
00:05:10.230 --> 00:05:11.520
And what about our paint?

82
00:05:11.880 --> 00:05:13.290
Well, let's look at our paint.

83
00:05:14.360 --> 00:05:16.010
It's the second point here.

84
00:05:16.130 --> 00:05:18.680
Again, you can't see it because I'm in the way.

85
00:05:18.710 --> 00:05:19.970
You mean, just remove myself.

86
00:05:21.380 --> 00:05:21.930
There you go.

87
00:05:21.950 --> 00:05:27.010
You can see that the second paint is the one that has both the red and the blue take.

88
00:05:27.030 --> 00:05:29.210
So we know all our JavaScript has been executed.

89
00:05:29.690 --> 00:05:31.100
Well, how long is this taken?

90
00:05:31.190 --> 00:05:34.370
Let's take in two hundred and twenty five point four milliseconds.

91
00:05:34.580 --> 00:05:39.440
Remember this number and the last one that we want to look at is the load of eight.

92
00:05:40.340 --> 00:05:46.670
And here we can see that it's taken 273 milliseconds to seventy three point eight milliseconds.

93
00:05:47.180 --> 00:05:51.070
A. It's just been cut off on the screen a little bit, but you're just going to have to trust me that

94
00:05:51.080 --> 00:05:52.130
that's exactly what it is.

95
00:05:52.460 --> 00:05:54.290
So again, remember this number?

