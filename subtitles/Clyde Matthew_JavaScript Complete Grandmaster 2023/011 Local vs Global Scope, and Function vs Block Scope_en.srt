1
00:00:00,270 --> 00:00:01,500
Let's take a step back.

2
00:00:02,190 --> 00:00:07,650
JavaScript has two types of scopes - local scope and global scope.

3
00:00:08,610 --> 00:00:16,260
Any variable that can only be used in specific parts of your code has local scope and that intuitively

4
00:00:16,260 --> 00:00:20,990
makes sense, because you can only use that variable in a local piece of code.

5
00:00:21,000 --> 00:00:27,120
You can't use it anyway, it has to be in one spot. And I wish it was just that simple.

6
00:00:27,510 --> 00:00:30,660
But a locally scoped variable comes in two types.

7
00:00:31,140 --> 00:00:34,380
You've got "function" scoped and "block" scoped.

8
00:00:34,710 --> 00:00:37,650
Let me quickly show you an example before we move on in this lecture.

9
00:00:39,120 --> 00:00:44,280
What do I mean when I say that a variable has local scope

10
00:00:45,230 --> 00:00:48,650
and that we have two different types of local scope, "function" scope and "block" scope?

11
00:00:49,370 --> 00:00:50,690
Well, let's have a look at an example.

12
00:00:52,530 --> 00:00:54,960
The first thing we should do is create a function.

13
00:00:56,310 --> 00:00:58,590
And let's call it test for lack of a better word.

14
00:00:59,970 --> 00:01:04,200
And within this function let's define a variable called car.

15
00:01:08,230 --> 00:01:10,780
And all we want to do is console log

16
00:01:11,730 --> 00:01:12,300
this variable.

17
00:01:15,780 --> 00:01:18,870
Now, just take a step back and think about what it is we've just done.

18
00:01:19,530 --> 00:01:26,610
We've created a function called test. Within that function, within that local scope, within that block,

19
00:01:27,480 --> 00:01:29,880
we've defined a variable called car.

20
00:01:32,040 --> 00:01:33,840
What happens when we run this function?

21
00:01:35,880 --> 00:01:40,910
Well, to run a function we just have to call its name with closing brackets, and there we go - it executes. 

22
00:01:40,920 --> 00:01:45,420
And you can see that BMW is console'd to the screen, as we would expect.

23
00:01:46,380 --> 00:01:50,310
But what happens if we wanted to access this car variable outside of the function?

24
00:01:51,980 --> 00:01:53,750
Well, this is what scoping is all about.

25
00:01:56,270 --> 00:01:57,590
It is not possible.

26
00:01:59,140 --> 00:02:00,520
You can see it's not possible.

27
00:02:01,180 --> 00:02:03,380
Car is not defined, we get an error.

28
00:02:04,390 --> 00:02:06,790
And this is because of function scope.

29
00:02:08,009 --> 00:02:09,880
Allright, so we see this doesn't work, but

30
00:02:09,900 --> 00:02:11,820
what about block scope? What do I mean by that?

31
00:02:12,630 --> 00:02:14,070
Well, remember what a block is.

32
00:02:15,020 --> 00:02:16,830
A block is just the curly braces.

33
00:02:17,790 --> 00:02:22,650
It's all a block of code is. So you can actually see a block is a subset of a function.

34
00:02:23,570 --> 00:02:29,390
Because the function requires the curly braces, unless you're using the new Arrow syntax, which we'll

35
00:02:29,390 --> 00:02:30,170
get into later.

36
00:02:30,770 --> 00:02:34,010
Let me give you an example of a blocked scoped variable.

37
00:02:35,090 --> 00:02:38,010
Let's get rid of this and let's just have curly braces.

38
00:02:38,030 --> 00:02:39,200
This is a block.

39
00:02:40,640 --> 00:02:43,790
And now let's define a variable called

40
00:02:45,060 --> 00:02:45,510
animal.

41
00:02:50,470 --> 00:02:55,800
And again, we just want to console that to the screen, no issues there.

42
00:02:55,870 --> 00:02:59,320
But what happens when we want to access that animal outside of the block?

43
00:03:02,310 --> 00:03:04,260
Animal is not defined.

44
00:03:05,380 --> 00:03:07,090
And this is what scoping is all about.

45
00:03:07,270 --> 00:03:08,590
I hope it's starting to make sense.

46
00:03:09,400 --> 00:03:13,000
What's interesting, though, is before the "let" keyword, we only had "var".

47
00:03:14,380 --> 00:03:16,080
And look what happens when we write var.

48
00:03:21,450 --> 00:03:24,360
So now all we've done is we've replaced let with var.

49
00:03:25,320 --> 00:03:26,400
What do you think will happen now?

50
00:03:27,920 --> 00:03:30,350
I would expect animal to also be block scoped.

51
00:03:32,360 --> 00:03:33,020
But it's not.

52
00:03:35,120 --> 00:03:35,690
Look at that.

53
00:03:36,640 --> 00:03:43,960
Warthog is available outside the curly braces when it comes to var, and this is why, before the new

54
00:03:43,960 --> 00:03:49,270
ES6 syntax came in, people referred to JavaScript as a function scoped language.

55
00:03:49,690 --> 00:03:54,400
But that's not the case anymore because now we've got let and const, which means that it's block scoped.

56
00:03:57,340 --> 00:03:57,680
Sjoe!

57
00:03:57,700 --> 00:03:58,360
So we're back.

58
00:03:58,510 --> 00:04:01,030
Well done, we've done locally scoped.

59
00:04:01,960 --> 00:04:03,160
Now let's get onto ...

60
00:04:03,400 --> 00:04:04,240
ding, ding ding 

61
00:04:04,390 --> 00:04:10,300
globally scoped. A variable declared outside of a function or a block,

62
00:04:10,600 --> 00:04:13,510
and all I mean by a block is curly braces,

63
00:04:14,120 --> 00:04:15,340
has global scope.

64
00:04:16,790 --> 00:04:22,520
And something worth pointing out is that this is only true with JavaScript in web browsers. To declare

65
00:04:22,520 --> 00:04:26,390
global variables in Node, you've gotta do things a little bit differently.

66
00:04:26,900 --> 00:04:33,020
But this course isn't a Node course - I just wanted to put it out there. And again, enough talk. Let me

67
00:04:33,020 --> 00:04:35,030
show you a quick example of a global variable.

68
00:04:36,620 --> 00:04:39,420
We've seen examples of globally scoped variables.

69
00:04:39,900 --> 00:04:40,940
Sjoe, that's a mouthful. 

70
00:04:41,270 --> 00:04:45,200
Globally scoped variables. Globally scoped variables. Globally scoped variables. 

71
00:04:46,190 --> 00:04:49,960
We've seen examples of it. Let me just show you another one quickly to drive the point home.

72
00:04:49,970 --> 00:04:53,840
You cannot be too strong on this concept of scope.

73
00:04:55,090 --> 00:04:57,300
So actually you know what I'll do?

74
00:04:57,360 --> 00:04:58,510
Let me just open Quokka. 

75
00:05:02,150 --> 00:05:04,430
Quokka is going. Let's create a variable

76
00:05:09,810 --> 00:05:10,710
with the value pizza.

77
00:05:11,520 --> 00:05:14,670
And now before we go on, just bear in mind that this is a global

78
00:05:15,650 --> 00:05:16,100
variable.

79
00:05:17,060 --> 00:05:18,290
Why is it a global variable?

80
00:05:18,320 --> 00:05:22,340
It's not defined within a function, and it's not defined within curly braces.

81
00:05:22,790 --> 00:05:24,020
It's not defined in a block.

82
00:05:25,200 --> 00:05:31,710
The default then is that this is globally accessible from anywhere in your code. And to prove it,

83
00:05:31,920 --> 00:05:32,820
let's create a function

84
00:05:34,680 --> 00:05:35,010
called

85
00:05:35,280 --> 00:05:36,060
showFood().

86
00:05:37,410 --> 00:05:42,660
And all this does, is it console logs favoriteFood.

87
00:05:45,500 --> 00:05:48,590
Taking a step back, if I just console log favoriteFood,

88
00:05:50,410 --> 00:05:51,700
I would expect to see pizza.

89
00:05:52,720 --> 00:05:53,770
console log

90
00:05:55,350 --> 00:05:59,070
favoriteFood. I'd expect to see pizza, and that's what we see.

91
00:05:59,610 --> 00:06:04,470
And the reason we see this pizza is that all we're doing is we're referencing the global variable directly.

92
00:06:05,370 --> 00:06:08,250
So in effect, there's no need for us to even have had a function.

93
00:06:09,080 --> 00:06:14,980
But has this function worked? Well, remember to execute a function I have to call its name and then enclose

94
00:06:14,990 --> 00:06:15,890
it in brackets.

95
00:06:17,080 --> 00:06:22,780
So I've got to call the name, and then have brackets, and now its executed the function, and you can see the function

96
00:06:22,780 --> 00:06:23,530
executes.

97
00:06:23,620 --> 00:06:29,800
We haven't defined a variable within the function within that scope, but yet the function still knows

98
00:06:29,800 --> 00:06:31,570
what favoriteFood is.

99
00:06:32,590 --> 00:06:36,070
It's pizza. And this is the power of declaring something globally.

100
00:06:36,100 --> 00:06:41,050
And just before we move on, I don't want you to think that you must just declare all of your variables

101
00:06:41,050 --> 00:06:47,260
globally, because the one problem, and it's a big problem with declaring variables globally

102
00:06:48,250 --> 00:06:51,940
is name clashes. When you start defining things globally

103
00:06:52,090 --> 00:06:57,130
what you'll find is that you can start overwriting variables even though they may have been predefined in the browser

104
00:06:57,130 --> 00:06:57,550
already.

105
00:06:58,030 --> 00:06:58,950
Just don't go there.

106
00:06:58,960 --> 00:07:02,050
If you can avoid a global variable, rather do that.

107
00:07:02,410 --> 00:07:05,360
What a lot of coders do if you have to define

108
00:07:05,360 --> 00:07:10,360
a global variable is they create a global object, so they'll, for example, they'll go

109
00:07:10,450 --> 00:07:13,030
let a equals global object.

110
00:07:14,300 --> 00:07:18,050
And then what they do is they attach properties to that object. A dot

111
00:07:19,580 --> 00:07:23,780
favoriteFoodType equals pizza.

112
00:07:25,100 --> 00:07:29,540
And then if you want to access that later in your code, you can just access your global object, which

113
00:07:29,540 --> 00:07:30,710
you always know is a,

114
00:07:31,970 --> 00:07:34,310
with the dot notation you can access all your properties.

115
00:07:36,120 --> 00:07:41,490
And that's all you do. Then you can access ... let me just console log this out so you can actually

116
00:07:41,520 --> 00:07:42,240
see the results.

117
00:07:44,380 --> 00:07:48,640
And there it is. It's actually accessing this pizza, not the first pizza we defined.

118
00:07:48,850 --> 00:07:50,620
Don't worry if you didn't quite understand that.

119
00:07:51,070 --> 00:07:54,970
Well, you know, that's that's more complicated code, which we may get into later in the course.

120
00:07:55,300 --> 00:08:00,460
For now, I want you to understand global scope, local scopes, variables, lets and const. 

121
00:08:03,010 --> 00:08:08,950
And just to end off, remember when dealing with var's, we saw that it was function scoped, meaning

122
00:08:08,950 --> 00:08:13,930
that even if you put a var within curly braces, you can still access that var variable anywhere in your

123
00:08:13,930 --> 00:08:14,200
code.

124
00:08:14,800 --> 00:08:19,960
And because of that reason, JavaScript used to be known as a function scope language, but not anymore,

125
00:08:20,560 --> 00:08:27,700
because with let and const, we've now got block scoping and this sums up the lecture for scoping.

