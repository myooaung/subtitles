1
00:00:00,420 --> 00:00:03,960
And now, I want to just mention coercion.

2
00:00:05,140 --> 00:00:06,670
A very important topic in JavaScript.

3
00:00:07,090 --> 00:00:11,650
What do I mean by coercion? Well, sometimes in JavaScript, what it does, is it's smart and it thinks on our

4
00:00:11,650 --> 00:00:13,030
behalf and it says cool

5
00:00:13,570 --> 00:00:14,760
I'm sure you meant this, 

6
00:00:14,770 --> 00:00:21,160
therefore, let me just fix it for you and then continue the flow of the code aka everything doesn't blow

7
00:00:21,160 --> 00:00:21,430
up.

8
00:00:22,300 --> 00:00:23,470
Let me show you what I mean.

9
00:00:25,580 --> 00:00:32,810
A is 10, let b equal 5, 

10
00:00:32,830 --> 00:00:33,770
but look what we've done.

11
00:00:34,280 --> 00:00:35,210
Can you see what we've done?

12
00:00:35,900 --> 00:00:42,640
We put the 5 within quotation marks, which means JavaScript is going to treat that as a string.

13
00:00:42,950 --> 00:00:43,560
That's a string

14
00:00:43,560 --> 00:00:44,510
we've just defined there.

15
00:00:45,790 --> 00:00:47,800
So what do you think's going to happen when we add

16
00:00:53,220 --> 00:00:53,970
the two  (a & b) together?

17
00:00:56,660 --> 00:00:57,860
Look what JavaScript has done.

18
00:00:59,820 --> 00:01:06,300
It's concatenated, meaning it's combined the 10 and then its slotted the 5 behind it.

19
00:01:06,780 --> 00:01:10,040
So you think that's a 105, but it's not really a 105, is it?

20
00:01:10,110 --> 00:01:11,110
It should be 15.

21
00:01:11,670 --> 00:01:14,190
But we've accidentally put that as the string.

22
00:01:14,870 --> 00:01:20,250
Now, most other languages would have thrown errors here. They would have said you cannot add "a" and "b". But 

23
00:01:20,250 --> 00:01:21,840
JavaScript hasn't done that.

24
00:01:21,930 --> 00:01:25,020
It's actually coerced the two together and put them together.

25
00:01:26,880 --> 00:01:33,240
That's a cool thing about JavaScript, but it also means you need to watch out. What's another example?

26
00:01:33,270 --> 00:01:34,830
Well here, here's a fun one. 

27
00:01:37,110 --> 00:01:38,850
We wanna write to the screen.

28
00:01:39,240 --> 00:01:46,230
What do you think is going to happen when you go "5 < 4 < 3"?

29
00:01:47,730 --> 00:01:49,200
What do you think that's going to display?

30
00:01:51,880 --> 00:01:55,870
Intuitively, I would have thought that would have been false. JavaScript

31
00:01:56,830 --> 00:01:59,920
displays that is true, and let's understand why.

32
00:02:02,080 --> 00:02:08,320
This is where coercion comes into it and operator precedence. So JavaScript within in these brackets

33
00:02:08,320 --> 00:02:10,180
here, operates from left to right.

34
00:02:10,180 --> 00:02:15,580
So first it's going to evaluate "5 < 4" And what is 5 < 4?

35
00:02:17,980 --> 00:02:22,630
What is that going to evaluate to? Well, 5 < 4 is going to evaluate to false. 

36
00:02:23,080 --> 00:02:25,810
So this is going to evaluate to false.

37
00:02:27,260 --> 00:02:28,400
And is false

38
00:02:29,240 --> 00:02:30,260
less than 3?

39
00:02:31,220 --> 00:02:34,520
And this is where coercion comes into play because in JavaScript

40
00:02:36,120 --> 00:02:38,760
true is a 1 and false is a 0.

41
00:02:39,390 --> 00:02:42,360
So is 0 less than 3. The answer is yes.

42
00:02:42,480 --> 00:02:46,710
So it's coerced false into a number 0 and it's given you a result.

43
00:02:47,370 --> 00:02:48,240
So there you have it.

44
00:02:48,450 --> 00:02:50,670
You're starting to understand coercion now as well.

45
00:02:50,680 --> 00:02:53,790
You're understanding that JavaScript executes from left to right.

46
00:02:54,240 --> 00:02:59,580
I really am getting through this fast, guys, but I spent years learning all this, so I really, really

47
00:02:59,580 --> 00:03:01,530
hope this puts you on a path to success.

48
00:03:01,560 --> 00:03:02,250
Let's continue.

