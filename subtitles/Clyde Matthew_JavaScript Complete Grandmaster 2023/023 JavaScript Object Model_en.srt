1
00:00:00,420 --> 00:00:05,220
Now, are we going to be getting into a race shortly and on the topic of objects?

2
00:00:05,610 --> 00:00:10,660
I just want to take a step back and dive a bit deeper into how engines view objects.

3
00:00:10,710 --> 00:00:16,170
It's important because at a very high level, all JavaScript engines work the same way.

4
00:00:17,310 --> 00:00:23,050
There's a Porsche that goes through your code and then there's an interpreter and a compiler that optimizes

5
00:00:23,050 --> 00:00:25,050
that code into machine go.

6
00:00:25,260 --> 00:00:28,150
But now I want to just discuss the JavaScript object.

7
00:00:29,160 --> 00:00:33,670
It's interesting, and we're going to be looking at a few different implementations of this in the upcoming

8
00:00:33,670 --> 00:00:34,050
lectures.

9
00:00:34,050 --> 00:00:39,480
So this is cool more just a very quick intro into the JavaScript object model.

10
00:00:39,480 --> 00:00:42,570
And when I think this button, we're going to dive into the later.

11
00:00:44,540 --> 00:00:50,150
As I mentioned, this is just a quick introduction to the JavaScript object model, and what I mean

12
00:00:50,150 --> 00:00:53,750
is that how does the engine set up an axis object properties?

13
00:00:54,290 --> 00:00:58,970
Because once you start becoming an awesome programmer, you're going to want to understand the intricacies

14
00:00:58,970 --> 00:01:03,920
of objects, how the engine accesses these, you can encounter bugs and now you'll know how to fix them.

15
00:01:04,730 --> 00:01:07,070
So these are good things to know anyway.

16
00:01:07,160 --> 00:01:13,610
The starting point is to know that the script specification essentially defines all objects as dictionaries.

17
00:01:14,150 --> 00:01:20,780
What I mean by that is that you've got keys on each object, and those keys are meant to what's known

18
00:01:20,780 --> 00:01:23,510
as the JavaScript engine is property attributes.

19
00:01:24,700 --> 00:01:30,110
And of course, the easiest thing to do is to start with an example, let's creates an object by the

20
00:01:30,130 --> 00:01:31,360
object literal syntax.

21
00:01:31,990 --> 00:01:35,110
And it just has two properties on it X and Y.

22
00:01:36,070 --> 00:01:37,060
And remember what I said?

23
00:01:37,690 --> 00:01:43,060
The script speak defines as dictionaries, and it maps keys to property attributes.

24
00:01:43,060 --> 00:01:45,640
Will the keys in this instance are X and Y?

25
00:01:46,150 --> 00:01:47,590
It's the name of the property.

26
00:01:47,950 --> 00:01:54,400
Those are the keys and those keys, or each reference to property attributes, and those property attributes

27
00:01:54,400 --> 00:01:56,770
have certain values attached to them.

28
00:01:57,340 --> 00:02:00,760
One is the value of the actual name of the property.

29
00:02:01,210 --> 00:02:03,700
In this case, X has a value of 10.

30
00:02:04,090 --> 00:02:05,500
Y has a value of 20.

31
00:02:06,040 --> 00:02:11,860
These three other properties attached to this rewritable enumerable and configurable.

32
00:02:12,370 --> 00:02:13,060
What do they mean?

33
00:02:13,450 --> 00:02:18,070
We'll just very briefly rewritable just determines whether the property can be reassigned.

34
00:02:18,790 --> 00:02:22,990
Enumerable determines whether the property can be seen in a full in loop.

35
00:02:23,930 --> 00:02:28,460
And as you can see from its variable, this innumerable property is set to true.

36
00:02:28,760 --> 00:02:32,330
And this is because every new property is innumerable by default.

37
00:02:33,370 --> 00:02:36,040
There's an exception to this, but we'll discuss that later.

38
00:02:36,070 --> 00:02:39,730
For now, just know that Enumerable is set to true by default.

39
00:02:40,730 --> 00:02:46,580
And the lost property is configurable, and that determines whether the property can be deleted.

40
00:02:47,990 --> 00:02:53,540
And don't get weirded out by these double brackets, the double square brackets is just how to speak

41
00:02:53,840 --> 00:03:00,320
that it must script specification shows properties that aren't directly exposed by JavaScript.

42
00:03:01,130 --> 00:03:04,280
So you're probably thinking, well, if they're not exposed by JavaScript, can we ever see them?

43
00:03:04,280 --> 00:03:05,730
And the answer is yes, you can.

44
00:03:05,750 --> 00:03:07,400
You can access them with the object.

45
00:03:07,520 --> 00:03:09,470
Get own property descriptor method.

46
00:03:09,740 --> 00:03:11,420
Let me quickly show you how you access these.

47
00:03:12,440 --> 00:03:12,800
OK.

48
00:03:12,830 --> 00:03:16,820
Very quickly, let me show you how we can access these property attributes.

49
00:03:16,820 --> 00:03:20,030
And all right, all configurable in the venue.

50
00:03:20,480 --> 00:03:24,980
Remember how I said we can access these don't get into mid-table the square brackets.

51
00:03:27,480 --> 00:03:32,430
Using the same example we didn't lecture now, let's just define an object, and let's just say existing

52
00:03:33,070 --> 00:03:39,360
instead of having line just have, it's just easier for us if we console.log this object out and we

53
00:03:39,360 --> 00:03:40,170
open it up here.

54
00:03:41,490 --> 00:03:44,390
And you look at its prototype and you look at the constructor.

55
00:03:46,120 --> 00:03:50,200
If you scroll down, you can see that gate owned property descriptor.

56
00:03:50,410 --> 00:03:54,400
There is this method available to all objects we create in JavaScript.

57
00:03:56,240 --> 00:03:56,930
Awesome, right.

58
00:03:57,560 --> 00:03:58,820
So let's use it.

59
00:04:00,460 --> 00:04:06,280
So let's access the global JavaScript object, and then we want to get Owen property descriptor.

60
00:04:07,000 --> 00:04:11,140
Now we've got to define the object, which is o'bagy, and we've got to define the variable that we

61
00:04:11,140 --> 00:04:11,440
want.

62
00:04:11,860 --> 00:04:12,310
And that is.

63
00:04:13,610 --> 00:04:15,800
If we console.log that out, there you go.

64
00:04:15,920 --> 00:04:19,250
You've got your value rightful and usable and configurable.

