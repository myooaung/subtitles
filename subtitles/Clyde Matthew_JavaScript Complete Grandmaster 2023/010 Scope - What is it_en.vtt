WEBVTT
1
00:00:00.610 --> 00:00:02.469
We have been dealing a lot with variables.

2
00:00:02.770 --> 00:00:07.210
And by this stage, you should be starting to feel a lot more comfortable with what they are.

3
00:00:08.230 --> 00:00:11.320
In reality, they're just a container that stores a value.

4
00:00:11.620 --> 00:00:12.520
It's that simple.

5
00:00:13.780 --> 00:00:18.010
And you are going to be running into what's known as scoping issues.

6
00:00:18.790 --> 00:00:23.080
I've skipped over it in previous lectures, stating that it is a more advanced topic.

7
00:00:23.800 --> 00:00:26.920
But you do need to know by scopes, and that's why I thought,

8
00:00:27.130 --> 00:00:29.080
let me just lay it down.

9
00:00:30.070 --> 00:00:31.450
What is scope?

10
00:00:32.290 --> 00:00:37.360
All scope is, is where you can use a variable. And what do I mean by this?

11
00:00:37.360 --> 00:00:37.660
Well,

12
00:00:37.670 --> 00:00:43.900
few minutes ago, I just wrote some code and I want to illustrate what scope is and why it's important

13
00:00:43.900 --> 00:00:45.340
for us to understand how it works.

14
00:00:46.000 --> 00:00:51.670
Let's say we've got a block of code and you've defined a variable at the very top called myName.

15
00:00:52.330 --> 00:00:56.950
Why scope is important is because you and I need to know where we can use that variable.

16
00:00:57.520 --> 00:00:59.200
We've defined the variable globally.

17
00:00:59.920 --> 00:01:00.340
Where can

18
00:01:00.340 --> 00:01:00.850
we use it?

19
00:01:02.250 --> 00:01:05.670
For example, if we had an "if" block,

20
00:01:06.770 --> 00:01:09.710
and we console logged myName, that variable,

21
00:01:10.040 --> 00:01:10.910
would that be valid?

22
00:01:11.420 --> 00:01:12.290
Would it be possible?

23
00:01:13.100 --> 00:01:15.560
What about if we had a "for" block,

24
00:01:16.500 --> 00:01:16.920
a loop?

25
00:01:17.730 --> 00:01:23.040
Would we be able to console.log myName there? Would the interpreter understand what myName is?

26
00:01:23.760 --> 00:01:25.090
Well, let's get more complicated.

27
00:01:25.110 --> 00:01:31.440
What about if we had a function. In this case, let's just call it variableScope() and we execute

28
00:01:31.440 --> 00:01:32.040
that function.

29
00:01:34.170 --> 00:01:37.710
Will that be able to console.log myName, that variable?

30
00:01:38.160 --> 00:01:43.410
And although these examples are console logs, just bear in mind, the code could be anything. It can 

31
00:01:43.410 --> 00:01:46.020
be anything where you use that variable again.

32
00:01:46.650 --> 00:01:48.350
And this is why scope is important.

33
00:01:48.360 --> 00:01:51.210
You need to know where you can use it, where you can access it.

34
00:01:51.450 --> 00:01:53.550
Here we define a global variable.

35
00:01:53.790 --> 00:02:00.180
So you'd expect just intuitively from a global variable, we should be able to use it absolutely anyway.

36
00:02:00.720 --> 00:02:02.750
And you would be  ... corrrrrect.

37
00:02:03.570 --> 00:02:05.090
But this is as simple as it gets.

38
00:02:05.100 --> 00:02:08.729
What about if you go and define variables within your function?

39
00:02:08.820 --> 00:02:10.560
Can you use them outside of the function?

40
00:02:11.490 --> 00:02:14.730
What about if you define it within a block of curly braces?

41
00:02:15.300 --> 00:02:16.640
Can you use it outside of that?

42
00:02:16.650 --> 00:02:19.950
And this is where scoping comes into the picture.

