WEBVTT
1
00:00:00.180 --> 00:00:05.280
We've just seen an example of an execution steak, the process flow, you're starting to feel more comfortable.

2
00:00:05.520 --> 00:00:08.220
I just want to do one more example with you because I thought, why not?

3
00:00:08.570 --> 00:00:11.970
The more examples you can do, the more intuitive this was thought to be.

4
00:00:12.600 --> 00:00:13.440
So let's get into it.

5
00:00:14.040 --> 00:00:16.140
It's great a function called say hi.

6
00:00:17.830 --> 00:00:22.240
And also, he does is first finds a name.

7
00:00:24.000 --> 00:00:24.640
It's lovely.

8
00:00:25.290 --> 00:00:29.700
But now what I'm wanting to do is I'm wanting to actually change this name.

9
00:00:32.950 --> 00:00:40.210
It say the name equals the result of a function call, so that function calls update name.

10
00:00:42.740 --> 00:00:46.910
And then only one thing to do is we're going to console log and we're going to use tempted to drills.

11
00:00:47.450 --> 00:00:51.170
This is the name that has been executed.

12
00:00:52.880 --> 00:00:54.530
And we're just going to insert name.

13
00:00:58.280 --> 00:01:02.600
And we wouldn't be allowed to execute this function right now would get an error message because we've

14
00:01:02.600 --> 00:01:08.000
tried to update name with a function to update name, but the JavaScript engine has no idea what that

15
00:01:08.000 --> 00:01:08.210
is.

16
00:01:09.080 --> 00:01:13.190
For example, if we try and execute it, we're going to get an error message saying update name is not

17
00:01:13.190 --> 00:01:13.630
defined.

18
00:01:13.640 --> 00:01:14.210
We know that.

19
00:01:15.290 --> 00:01:18.280
So now let's define a function called date.

20
00:01:18.640 --> 00:01:18.800
Name.

21
00:01:20.190 --> 00:01:23.490
And we want to return and remember we have to use the return key word.

22
00:01:24.650 --> 00:01:27.920
Did say John Doe or just don't, John.

23
00:01:30.370 --> 00:01:36.310
Now, before execute, say, hi, I want you to tell me what you think the result will be and why.

24
00:01:37.580 --> 00:01:39.740
Remember, we got a look at the execution context.

25
00:01:40.280 --> 00:01:41.360
We got to look at the stack.

26
00:01:41.810 --> 00:01:42.590
What's going to happen?

27
00:01:43.560 --> 00:01:47.800
Let's start looking at it when we get to function, say, hi.

28
00:01:47.820 --> 00:01:48.570
What's going to happen?

29
00:01:50.150 --> 00:01:53.960
Nothing because we've learned declared dysfunction, we haven't executed anything yet.

30
00:01:54.890 --> 00:01:59.450
So the forces going to skip over the whole function, it's going to go to the next function update name,

31
00:01:59.450 --> 00:02:00.110
what's going to happen?

32
00:02:00.650 --> 00:02:05.240
Nothing because it hasn't executed yet, but we're not execute.

33
00:02:05.360 --> 00:02:06.050
Say, hi.

34
00:02:06.890 --> 00:02:07.850
What's going to happen now?

35
00:02:12.440 --> 00:02:13.070
That's right.

36
00:02:13.160 --> 00:02:14.930
It's going to reach the same high function.

37
00:02:16.720 --> 00:02:22.600
The new execution context will be created, then it's going to reach late name equally.

38
00:02:23.020 --> 00:02:23.590
It's fun.

39
00:02:23.770 --> 00:02:24.250
We good.

40
00:02:24.910 --> 00:02:25.660
It's going to move on.

41
00:02:25.840 --> 00:02:29.980
It's going to say name is going to be reassigned to update.

42
00:02:31.150 --> 00:02:33.340
Now it's going to hit update name function.

43
00:02:33.970 --> 00:02:36.250
It's going to now get pushed to the top of the stack.

44
00:02:37.090 --> 00:02:39.580
That's going to be the one that's going to be executed by JavaScript.

45
00:02:41.510 --> 00:02:42.310
Are you with me?

46
00:02:43.010 --> 00:02:43.370
Great.

47
00:02:43.640 --> 00:02:48.230
So it's going to reach that date name function and it's going to return the string John.

48
00:02:48.410 --> 00:02:52.130
And that is going to be assigned to the variable name.

49
00:02:52.970 --> 00:02:54.470
I hope this is starting to make sense.

50
00:02:55.250 --> 00:03:00.110
And then, of course, when we console.log, it's going to use the updated name John.

51
00:03:01.010 --> 00:03:05.600
And as a result, you can see on the screen, this is obviously a very simple example.

52
00:03:05.870 --> 00:03:11.240
But once you start going through the process and start understanding the context in which this was executed,

53
00:03:11.330 --> 00:03:18.560
how the stack works, it becomes a lot more fun and intuitive, and it makes coding just that much better.

54
00:03:19.370 --> 00:03:19.950
It's move on.

