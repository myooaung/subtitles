WEBVTT
1
00:00:00.140 --> 00:00:00.500
Alright, 

2
00:00:00.540 --> 00:00:05.610
you need to wake up now because this topic is extremely important.

3
00:00:06.180 --> 00:00:11.970
This is about data types in JavaScript. And what do I mean by data types?

4
00:00:12.450 --> 00:00:18.720
Data types are the different types of data that JavaScript allows you to work with.

5
00:00:19.380 --> 00:00:21.000
And let's just take a step back.

6
00:00:22.290 --> 00:00:24.450
Imagine an ocean full of bits.

7
00:00:25.650 --> 00:00:29.120
Billions and billions and trillions of them.

8
00:00:29.750 --> 00:00:31.160
(boom sound)
Your computer has billions of bits in memory.

9
00:00:32.740 --> 00:00:34.360
So we've got an ocean full of bits.

10
00:00:34.570 --> 00:00:36.460
That would be a complete mess.

11
00:00:37.060 --> 00:00:39.700
So you want away to organize all these bits.

12
00:00:40.990 --> 00:00:41.780
How do we do that?

13
00:00:41.800 --> 00:00:47.430
Well, let's say we organize them into chunks to make it easier to work with it.

14
00:00:47.440 --> 00:00:49.120
How do we define a chunk?

15
00:00:49.990 --> 00:00:57.490
Well, let's say a chunk represents a piece of information called a value, and values play different

16
00:00:57.490 --> 00:00:59.290
roles, depending on his data type.

17
00:01:00.380 --> 00:01:06.650
So you could almost say you've got this whole bunch of bits in your PC and we're dividing those bits

18
00:01:06.650 --> 00:01:12.920
into different chunks and those chunks are made up of different values, different data types. Some

19
00:01:12.920 --> 00:01:13.820
values are numbers,

20
00:01:13.890 --> 00:01:16.970
others are text, others functions and so on and so on.

21
00:01:18.050 --> 00:01:24.530
Now you might sometimes read and people may tell you that JavaScript is an untyped language, but that's

22
00:01:24.530 --> 00:01:25.390
just incorrect.

23
00:01:26.270 --> 00:01:29.750
You can assign all sorts of different types to variable.

24
00:01:30.500 --> 00:01:32.600
JavaScript does have types.

25
00:01:33.800 --> 00:01:39.470
It's not complicated because JavaScript only has two broad types of data.

26
00:01:40.170 --> 00:01:45.830
(1) Simple data types and (2) Complex data types. And that couldn't be simpler,

27
00:01:45.830 --> 00:01:51.620
let's be honest. There's two data types in JavaScript. In broad categories, it's just simple and complex.

28
00:01:51.950 --> 00:01:57.980
But JavaScript doesn't state it as simple and complex. And this is why I don't want you two get intimidated

29
00:01:57.980 --> 00:01:58.670
with the language.

30
00:01:58.670 --> 00:02:01.520
It's just that they use fancy words to try and intimidate people.

31
00:02:01.520 --> 00:02:03.170
But at the end of the day, this is all it means.

32
00:02:03.890 --> 00:02:13.070
In JavaScript, they refer to simple data types as ... "primitives". And they refer to complex data types as ... "objects".

33
00:02:14.880 --> 00:02:18.480
Let's now see examples of these different types of data types.

34
00:02:20.220 --> 00:02:25.830
So we've seen you get primitive data types, and you get objects or complex data types.

35
00:02:26.610 --> 00:02:29.850
What are some examples of primitive data types? In JavaScript

36
00:02:30.090 --> 00:02:36.060
you can kind of break it down into six high level categories of primitive data types.

37
00:02:36.930 --> 00:02:44.190
You've got Strings, you've got Numbers, you've got Boolean's, you've got Null, you've got Undefined

38
00:02:44.700 --> 00:02:50.280
and you've got a Symbol, which is something introduced by ES6, which we won't worry about right

39
00:02:50.280 --> 00:02:50.580
now.

40
00:02:51.120 --> 00:02:52.290
Complex data types,

41
00:02:52.290 --> 00:02:55.710
You get some of those as well. Object literals is an example.

42
00:02:56.190 --> 00:02:58.200
Arrays is an example,

43
00:02:59.160 --> 00:03:00.540
and other complex functions.

44
00:03:00.870 --> 00:03:01.920
We'll get into those later.

45
00:03:02.840 --> 00:03:09.200
Thre's is a method called typeof in JavaScript, which helps you determine, you guessed it, the type

46
00:03:09.200 --> 00:03:12.550
of the data you're dealing with. Let me show you. 

47
00:03:13.400 --> 00:03:15.220
So let's say a = wally.

48
00:03:17.900 --> 00:03:24.490
Let's say b = 5, let c = true. 
What type is wally?

49
00:03:25.520 --> 00:03:26.660
Yes. Wally is a string -

50
00:03:26.660 --> 00:03:27.320
it's text.

51
00:03:27.650 --> 00:03:28.610
What type is "b"?

52
00:03:28.700 --> 00:03:31.610
"b" is a 5 (a Number), and "c" should be a Boolean.

53
00:03:32.390 --> 00:03:38.870
So what we can do, is we can document.write(typeof(a)).
You can see it's a string.

54
00:03:40.310 --> 00:03:43.490
"b" is a Number, and "c" is a Boolean.

55
00:03:44.270 --> 00:03:50.510
So this is just one example - typeof - that you can see to determine what kind of data type you're

56
00:03:50.510 --> 00:03:51.080
working with.

