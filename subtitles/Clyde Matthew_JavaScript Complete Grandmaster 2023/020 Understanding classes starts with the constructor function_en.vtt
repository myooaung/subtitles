WEBVTT
1
00:00:00.060 --> 00:00:05.220
Before I show you an example of how to create an object by the class syntax, I just want us to talk

2
00:00:05.220 --> 00:00:10.650
about constructor functions and a bit more detail because once you understand our constructor function

3
00:00:10.650 --> 00:00:19.500
works in terms of prototypes, you'll realize that the class syntax is just a syntactical sugar around

4
00:00:19.500 --> 00:00:22.110
a constructor function and show you what I mean.

5
00:00:23.190 --> 00:00:26.700
This just creates a constructor function or person.

6
00:00:28.770 --> 00:00:31.380
Which takes in the first name, last name.

7
00:00:32.040 --> 00:00:32.460
That's it.

8
00:00:33.420 --> 00:00:36.180
And we see this first name to be first name.

9
00:00:37.360 --> 00:00:39.940
This last name, the last name.

10
00:00:41.670 --> 00:00:43.740
And let's have a nickname method.

11
00:00:49.180 --> 00:00:50.950
Where we just console.log.

12
00:00:52.410 --> 00:00:53.760
Using template literals.

13
00:00:55.350 --> 00:00:56.940
This first name.

14
00:01:00.210 --> 00:01:00.690
This.

15
00:01:02.300 --> 00:01:02.810
Boston.

16
00:01:06.030 --> 00:01:06.840
Very intuitive.

17
00:01:06.900 --> 00:01:09.720
You've been through this before, so you know exactly how this works.

18
00:01:10.020 --> 00:01:15.540
And the second step to construct the function is it's right, instantiating the object.

19
00:01:16.110 --> 00:01:21.060
So let's say user equals new, let's say use a one equals new person.

20
00:01:21.480 --> 00:01:22.500
And this is John.

21
00:01:24.020 --> 00:01:24.270
But.

22
00:01:27.600 --> 00:01:29.940
And as you know, we can get the name.

23
00:01:31.960 --> 00:01:34.060
And it should console.log this out to the screen.

24
00:01:34.810 --> 00:01:37.070
There you go, John Doe, you're really familiar with this.

25
00:01:37.180 --> 00:01:38.530
This shouldn't come as a surprise.

26
00:01:38.740 --> 00:01:40.270
This is where it starts getting interesting.

27
00:01:40.930 --> 00:01:43.360
If we've got a user too, that comes along.

28
00:01:46.410 --> 00:01:48.540
And this is Wally.

29
00:01:50.080 --> 00:01:50.710
Warthog.

30
00:01:55.920 --> 00:02:00.120
This looks like it looks good, but behind the scenes, do you know what's actually happening?

31
00:02:00.990 --> 00:02:08.039
We net new keyword is used, JavaScript is literally copying a constructor function or the properties

32
00:02:08.039 --> 00:02:13.560
and methods from the constructor function, and it's placing it onto the new object.

33
00:02:13.560 --> 00:02:14.880
We've created the new variable.

34
00:02:15.420 --> 00:02:19.830
The problem with this is that it's a waste of memory space makes our application slower.

35
00:02:20.070 --> 00:02:24.090
You don't want to be duplicating this get named method, for example.

36
00:02:24.480 --> 00:02:30.990
Once we write at once, why not just have it stored in one place rather than having duplicates and duplicates

37
00:02:31.230 --> 00:02:33.330
hundreds and thousands stored absolutely everywhere.

38
00:02:33.330 --> 00:02:35.760
And every time you use a new keyword, that's the one problem.

39
00:02:35.890 --> 00:02:40.950
But before tell you how to fix this, I just want to show you that every time a function is created

40
00:02:40.950 --> 00:02:47.370
in JavaScript, the engine automatically plays as a prototype property on that function and show you

41
00:02:47.370 --> 00:02:47.880
what I mean.

42
00:02:48.570 --> 00:02:50.730
Let's just copy this so we don't have to write it out again.

43
00:02:50.730 --> 00:02:51.180
Control.

44
00:02:51.190 --> 00:02:55.350
See, I'm just going to open up our console here and paste it in.

45
00:02:56.880 --> 00:02:59.120
So these are function in Google console.

46
00:02:59.170 --> 00:03:04.710
What I'm going to do now is I'm going to go person and I want to show you that it has a prototype property

47
00:03:05.430 --> 00:03:11.760
and that prototype property is the constructor function, which is this whole and structure function

48
00:03:11.760 --> 00:03:12.090
here.

49
00:03:12.990 --> 00:03:18.150
This with a constructor function is an every time you create a new instance of it, it's going to copy

50
00:03:18.300 --> 00:03:20.110
those values onto that new instance.

51
00:03:20.130 --> 00:03:21.020
I can prove that to you.

52
00:03:21.570 --> 00:03:22.980
It's a valid user.

53
00:03:22.980 --> 00:03:25.860
One equals new person just like we did before.

54
00:03:26.520 --> 00:03:27.570
And what do we call him?

55
00:03:27.570 --> 00:03:29.520
John Doe?

56
00:03:32.550 --> 00:03:36.920
When we console.log accuser, we have a look here and we open it up.

57
00:03:38.430 --> 00:03:38.940
Look at this.

58
00:03:40.030 --> 00:03:45.120
This name function, this method has been copied to this object.

59
00:03:46.240 --> 00:03:49.960
And again, it's got the photo object with the constructor function pointing to this.

60
00:03:50.170 --> 00:03:55.090
So you can really see the all duplicates we rewriting, aren't we restoring in memory things that we

61
00:03:55.090 --> 00:03:56.280
don't necessarily have to?

62
00:03:56.740 --> 00:03:59.440
And this brings me to the point of this whole picture.

63
00:03:59.860 --> 00:04:01.300
How do we solve this problem?

64
00:04:02.020 --> 00:04:07.000
Well, what you can do is you can add a prototype onto that function.

65
00:04:07.820 --> 00:04:12.470
And that gets stored once instead of getting duplicated across multiple instances.

66
00:04:12.530 --> 00:04:13.460
Amy, show you what I mean.

67
00:04:13.560 --> 00:04:15.260
So let's go back to our console here.

68
00:04:17.060 --> 00:04:21.560
Now, let's say we've defined user one is John Doe, let's get rid of user two for now.

69
00:04:23.320 --> 00:04:28.660
But now we want to construct a function at another property called age, but we want to do this on the

70
00:04:28.660 --> 00:04:36.820
prototype, so we've got a person prototype because we know each function created in JavaScript automatically

71
00:04:36.820 --> 00:04:39.940
as its prototype property and then we can have an agent.

72
00:04:39.940 --> 00:04:41.170
Let's just say it's thirty five.

73
00:04:41.290 --> 00:04:43.870
You already know we've defined use before we've done this.

74
00:04:44.710 --> 00:04:47.380
But if we now console.log.

75
00:04:50.170 --> 00:04:51.640
Use a one age.

76
00:04:56.850 --> 00:04:58.830
You can see console.log 35.

77
00:04:59.340 --> 00:05:05.370
It's automatically got access to the prototype, so let's cool with this is that now that age property

78
00:05:05.370 --> 00:05:07.510
on the prototype is only stored once in memory.

79
00:05:07.530 --> 00:05:10.020
Have a look at us if we console.log out, use a one.

80
00:05:10.050 --> 00:05:16.110
You don't immediately see the age, you know, which is awesome, but it is going to be attached to

81
00:05:16.110 --> 00:05:16.770
its prototype.

82
00:05:16.920 --> 00:05:17.870
And I'll show you Vietnam.

83
00:05:17.880 --> 00:05:19.320
Let's go back to our console equity.

84
00:05:20.440 --> 00:05:27.970
And we can see here if we go person dot a dot prototype dot age equals thirty five.

85
00:05:28.970 --> 00:05:33.860
And now we console.log, argues again, you can see we don't see age on its immediate properties.

86
00:05:35.200 --> 00:05:40.120
But look at this within its prototype object is the age.

87
00:05:41.390 --> 00:05:43.520
How awesome is this?

88
00:05:44.480 --> 00:05:47.720
So this is now constructor functions, prototypes.

89
00:05:48.850 --> 00:05:54.460
And the like, and now I think you ready to get into the class object syntax.

90
00:05:54.610 --> 00:05:55.240
Let's have a look.

