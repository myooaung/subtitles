WEBVTT
1
00:00:00.330 --> 00:00:02.460
Hey, we are moving on.

2
00:00:02.610 --> 00:00:03.660
We are moving on.

3
00:00:04.019 --> 00:00:07.710
Alright, so now we've got a lot of the theory out the way in this course.

4
00:00:07.800 --> 00:00:10.410
You've already seen that we started writing JavaScript.

5
00:00:10.620 --> 00:00:13.860
Now let's start learning pure JavaScript.

6
00:00:14.460 --> 00:00:18.000
The first thing you need to understand is syntax. And by syntax,

7
00:00:18.000 --> 00:00:23.040
I just mean the grammar of the language, the grammar of JavaScript.

8
00:00:24.000 --> 00:00:27.510
An awesome analogy is bringing it back to English.

9
00:00:28.680 --> 00:00:35.850
We know in English a sentence has to start with a capital letter, quotes or placed inside those 'toikies'

10
00:00:37.140 --> 00:00:42.480
and all sentences must end with a full stop, these are just a few syntax rules around English.

11
00:00:43.710 --> 00:00:45.360
JavaScript is no different to English,

12
00:00:45.840 --> 00:00:47.430
it just has a bit of different rules.

13
00:00:47.700 --> 00:00:48.720
What are some of these rules?

14
00:00:49.530 --> 00:00:54.240
Well, JavaScript doesn't need to be bolded, underlined, italicized or justified.

15
00:00:54.390 --> 00:00:55.500
You can just start typing.

16
00:00:56.420 --> 00:01:04.970
Languages like C have intimidating amounts of curly braces and weird keywords, but luckily for us, JavaScript

17
00:01:04.970 --> 00:01:06.160
is super simple.
(crowd clapping and excited in background)

18
00:01:07.130 --> 00:01:13.730
Before we start delving into more detailed syntax, lemme just give you an example. If we write 

19
00:01:13.730 --> 00:01:19.160
console.log('Hello World'), which we've seen, what would you expect to be displayed on the console?

20
00:01:21.040 --> 00:01:21.790
Well, that's right.

21
00:01:21.820 --> 00:01:27.580
You would expect that takes the string, the string literal to be displayed as Hello World. But what

22
00:01:27.580 --> 00:01:31.360
happens if we don't include that (last) closing bracket?

23
00:01:32.900 --> 00:01:33.620
What do you think now

24
00:01:33.620 --> 00:01:36.170
will happen? Do you think JavaScript will understand what you mean?

25
00:01:37.040 --> 00:01:38.920
No, and this is my point.

26
00:01:38.930 --> 00:01:39.800
It's going to break.

27
00:01:39.920 --> 00:01:46.970
It's going to say that there's been an Uncaught SyntaxError. And this is the great thing and the horrible

28
00:01:46.970 --> 00:01:48.080
thing about programming.

29
00:01:48.080 --> 00:01:54.260
It is very sensitive to every single character that you write. If it doesn't spot that closing tag,

30
00:01:54.650 --> 00:01:57.050
how does JavaScript know what's going on?

31
00:01:58.010 --> 00:02:04.070
JavaScript has been programmed to look for the opening and closing parentheses within a console.log

32
00:02:04.070 --> 00:02:04.550
function.

33
00:02:04.940 --> 00:02:07.040
If it doesn't have it, you will get thrown an error.

34
00:02:07.310 --> 00:02:08.840
Let's look at another example quickly.

35
00:02:11.600 --> 00:02:16.160
Quick example, another one syntax. Let's say we write

36
00:02:19.150 --> 00:02:20.290
"Warthogs are cool".

37
00:02:23.150 --> 00:02:25.730
What do you think should be displayed when I hit the return key now?

38
00:02:27.740 --> 00:02:30.290
Well, it just displays what we gave it.

39
00:02:31.280 --> 00:02:35.600
But what happens if we type the same thing, but I forget to enclose

40
00:02:37.050 --> 00:02:39.440
the speech marks, the closing speech marks?

41
00:02:40.260 --> 00:02:46.770
If I hit the return key now, it throws me an error - an Uncaught SyntaxError: Invalid or unexpected token.

42
00:02:47.940 --> 00:02:49.050
So this is what I'm trying to say,

43
00:02:49.080 --> 00:02:51.270
you need to be conscious of syntax.

