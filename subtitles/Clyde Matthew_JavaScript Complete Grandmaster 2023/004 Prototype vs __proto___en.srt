1
00:00:03,190 --> 00:00:07,450
We've seen that objects have a special hidden property called prototype.

2
00:00:07,900 --> 00:00:10,630
And again, don't be intimidated by those double square brackets.

3
00:00:10,660 --> 00:00:13,780
All that means is that in the specification, it's a hidden property.

4
00:00:14,140 --> 00:00:22,270
And this prototype is either now or it references another object and this other object is called a prototype.

5
00:00:22,930 --> 00:00:24,100
It's a very quick example.

6
00:00:24,100 --> 00:00:25,660
This just creates a use object.

7
00:00:25,840 --> 00:00:27,610
And we've done this many times before.

8
00:00:28,180 --> 00:00:33,580
This user has a name, age and an online status so we can determine whether he's currently on line or

9
00:00:33,580 --> 00:00:33,790
not.

10
00:00:34,510 --> 00:00:40,690
And when we console this out and we see the JavaScript construct, you'll notice we've been seeing prototype

11
00:00:40,930 --> 00:00:43,420
or underscore school and the school proto underscore underscore.

12
00:00:44,250 --> 00:00:50,310
And that prototype references another prototype object, and that other prototype object is an automatic

13
00:00:50,760 --> 00:00:52,560
object hasn't been set up by you and I.

14
00:00:52,920 --> 00:00:55,080
Let's get set up by the JavaScript engine.

15
00:00:56,060 --> 00:01:01,940
And that's exactly why we have these other methods on our objects when we create them straight out of

16
00:01:01,940 --> 00:01:06,560
the box like to string value off and the others that we've even used throughout our examples.

17
00:01:07,230 --> 00:01:09,140
But let's jump deeper into this rabbit hole.

18
00:01:10,250 --> 00:01:17,450
It's not only one type of prototype in JavaScript, and this causes so much confusion, and it is complicated

19
00:01:17,510 --> 00:01:18,970
because it's weird.

20
00:01:18,980 --> 00:01:23,270
It's just, you know, JavaScript, one of those languages that have kind of evolved over the years.

21
00:01:23,690 --> 00:01:29,150
But through all of this is some weird nuances that pop up, and it can be complicated to understand

22
00:01:29,150 --> 00:01:30,470
unless you just break it down.

23
00:01:30,890 --> 00:01:34,070
And hopefully, after this, you'll understand the differences between the two.

24
00:01:34,730 --> 00:01:42,080
OK, so the two prototypes in JavaScript one is the full word prototype and the other one is prototype

25
00:01:42,080 --> 00:01:46,340
in square brackets or what's known as underscore, underscore Kroto.

26
00:01:46,340 --> 00:01:49,640
And the school and the school is look at this prototype.

27
00:01:50,450 --> 00:01:56,060
This is a spatial object that is created as a property of all functions, and this happens automatically

28
00:01:56,060 --> 00:01:56,810
for all functions.

29
00:01:57,200 --> 00:02:02,420
And this is the same object that is pointed to by and the school and the school project and has gone

30
00:02:02,420 --> 00:02:04,430
to school by that other type of prototype.

31
00:02:04,790 --> 00:02:07,790
Which brings me on to the other type of prototype.

32
00:02:08,210 --> 00:02:14,900
This is a hidden property on every object that is created, and it can be accessed in script, using

33
00:02:14,900 --> 00:02:17,810
and school and the school project and the school and the school.

34
00:02:18,410 --> 00:02:20,180
And I know this can be confusing.

35
00:02:20,810 --> 00:02:26,360
So let's just take a step back and let's create an object literal and let's call it food.

36
00:02:26,900 --> 00:02:31,100
Let's set a property called yummy to it, and that yummy has a value of true.

37
00:02:31,490 --> 00:02:34,820
So these are custom food object with one property.

38
00:02:35,390 --> 00:02:38,480
OK, but this time, let's create a constructor function.

39
00:02:38,860 --> 00:02:45,050
Let's call that carrot, and it just sits this color, which is passed into that function as a property

40
00:02:45,050 --> 00:02:46,720
type and all this function does.

41
00:02:46,730 --> 00:02:49,250
This sits a color Typekit to the newly created object.

42
00:02:49,550 --> 00:02:52,310
So now we've got our custom correct function.

43
00:02:52,670 --> 00:02:55,460
Let's set the prototype on this carrot to food.

44
00:02:56,330 --> 00:02:57,710
What do you think is going to happen now?

45
00:02:57,740 --> 00:03:00,200
We're going to create a new variable.

46
00:03:00,410 --> 00:03:01,340
Let's call it carrot.

47
00:03:02,000 --> 00:03:05,570
And we use the new keyword to execute their constructor function.

48
00:03:06,100 --> 00:03:09,440
We'll remember what happens when we use the new keyword.

49
00:03:10,190 --> 00:03:12,800
Well, firstly, it creates a new empty object.

50
00:03:13,550 --> 00:03:16,730
Then it will go and look at the function carrot.

51
00:03:17,770 --> 00:03:23,170
It will then take any prototype on the correct object and see that as the prototype property of the

52
00:03:23,170 --> 00:03:24,610
newly created object.

53
00:03:24,940 --> 00:03:31,870
Lastly, it then feeds the object into the newly created Keret constructor as this keyword and it returns

54
00:03:31,870 --> 00:03:33,760
whatever the function returns.

55
00:03:34,420 --> 00:03:35,560
It's kind of long story short.

56
00:03:35,920 --> 00:03:42,460
All it does is it sets the proto property of the newly created character to the food object.

57
00:03:42,880 --> 00:03:49,120
So taking a step back, what this means is that prototype is a regular property and.

58
00:03:50,560 --> 00:03:55,810
And a school and a school project and a school and a school is the inheritance of character from food.

59
00:03:56,710 --> 00:03:57,880
So look at this diagram.

60
00:03:58,180 --> 00:04:01,630
Let it sink in and then let me show you one more example before we move on.

