1
00:00:00,120 --> 00:00:06,540
In order to understand why 0.1 + 0.2 does not equal 0.3 (exactly), you need to understand

2
00:00:06,720 --> 00:00:07,230
numbers.

3
00:00:08,350 --> 00:00:12,880
And let's start with numbers that you and I understand and we've been brought up with, and that is

4
00:00:12,880 --> 00:00:13,900
in the Base 10.

5
00:00:14,230 --> 00:00:19,090
And all this means is that there are 10 symbols that represent all quantities. And we know this, we've got

6
00:00:19,090 --> 00:00:23,080
10 fingers and this is probably why we've, we've done it this way.

7
00:00:23,710 --> 00:00:27,370
So let's look at our 10 digits, our 10 symbols from zero to nine.

8
00:00:28,540 --> 00:00:34,060
When we say zero, we just mean there's nothing. When we move one placement to the right,

9
00:00:34,600 --> 00:00:36,760
we know that that is 1.

10
00:00:36,940 --> 00:00:38,500
In this case, we have one warthog.

11
00:00:40,060 --> 00:00:47,180
If we move one to the right, we know that represents two warthogs and so forth and so on.

12
00:00:47,680 --> 00:00:49,990
When we get to five, we know it's five warthogs.

13
00:00:50,650 --> 00:00:51,670
When we get to nine,

14
00:00:52,330 --> 00:00:54,100
we know there are nine warthogs.

15
00:00:55,120 --> 00:00:56,170
But what do we do now?

16
00:00:56,530 --> 00:00:57,640
We've run out of digits.

17
00:00:57,940 --> 00:01:04,660
Well, now we just repeat the process, but we separate out the 10s versus the single digits.

18
00:01:05,650 --> 00:01:06,610
So we've got a one.

19
00:01:06,970 --> 00:01:11,550
We've gone through the iteration one whole time. And now we start at zero again.

20
00:01:12,010 --> 00:01:18,010
And that gives us our solution of 10 warthogs, represented by the symbol 1 and a 0.

21
00:01:18,670 --> 00:01:19,750
You and I know it as ten.

22
00:01:20,750 --> 00:01:23,760
And you can represent this in an entirely different way.

23
00:01:23,780 --> 00:01:26,360
Let's take the number 32 for an example.

24
00:01:26,690 --> 00:01:29,990
We know in base 10, we've got symbols that represent each digit.

25
00:01:31,280 --> 00:01:37,040
And as I mentioned before, once you go through one iteration, you move along. So the three we can put

26
00:01:37,040 --> 00:01:40,040
in the "ten's" bracket and the two we can put in the "singles" bracket.

27
00:01:40,970 --> 00:01:48,110
And because we're working with Base 10, you can represent this as 10 to the power of (one times three) and

28
00:01:48,230 --> 00:01:49,520
10 to the power of (zero times two)

29
00:01:49,520 --> 00:01:55,310
To quick side note, anything to the power of zero is equal to one, not zero.

30
00:01:56,280 --> 00:02:04,530
So this is known as the long format, but you're probably thinking "computers don't work in Base 10

31
00:02:04,530 --> 00:02:07,860
format, we know computers only work in binary."

32
00:02:08,250 --> 00:02:15,840
So let's take our 10 digits, our symbols, and let's break it down just to 2, because this is all

33
00:02:15,840 --> 00:02:17,940
the computer works in, a zero and one. 

34
00:02:18,810 --> 00:02:20,250
And now let's start the process again.

35
00:02:20,260 --> 00:02:21,750
How do we represent nothing?

36
00:02:22,290 --> 00:02:25,290
Will this the same as our Base 10 - its just zero.

37
00:02:25,530 --> 00:02:27,600
How do we represent one warthog?

38
00:02:28,320 --> 00:02:29,280
Well, that's also the same.

39
00:02:29,460 --> 00:02:30,330
It's just the number one.

40
00:02:31,360 --> 00:02:32,470
But now what do we do?

41
00:02:32,920 --> 00:02:35,410
Because now we've run out of digits, we've run out of symbols.

42
00:02:36,630 --> 00:02:38,040
Well, we do the same process.

43
00:02:38,070 --> 00:02:44,310
We start a new iteration. So to get to 2 warthogs, it is represented by the numbers 1 and 0.

44
00:02:44,940 --> 00:02:46,080
What about three warthogs?

45
00:02:47,260 --> 00:02:53,110
Well, let's keep going along - a one and a one. Can you see now we've run out of digits again?

46
00:02:53,980 --> 00:02:54,640
No problem.

47
00:02:55,510 --> 00:03:03,640
We start a new iteration - one zero zero would give us four warthogs, and you can literally keep going with

48
00:03:03,640 --> 00:03:05,770
this process to get to higher and higher numbers.

49
00:03:06,340 --> 00:03:09,800
So to recap, in binary zero is represented by zero,

50
00:03:09,840 --> 00:03:17,500
and a one is represented by one. But two is already represented by one and a zero, because we need to scale

51
00:03:17,500 --> 00:03:19,130
up just like in decimals

52
00:03:19,150 --> 00:03:20,710
we did that after the number 9.

53
00:03:21,340 --> 00:03:26,410
And if we continue, three in binary is 11, four is 100, and five is represented by 101, 

54
00:03:26,410 --> 00:03:27,010
and so on.

55
00:03:27,820 --> 00:03:35,350
And this brings us all the way back to our (original) question - why does 0.1 + 0.2 not equal 

56
00:03:35,350 --> 00:03:36,430
0.3 in binary?

57
00:03:36,670 --> 00:03:38,470
This isn't just a JavaScript problem.

58
00:03:38,650 --> 00:03:40,480
This happens in other languages as well.

59
00:03:40,870 --> 00:03:41,860
To find out why,

60
00:03:42,190 --> 00:03:43,580
Let's just recap a little bit.

61
00:03:43,960 --> 00:03:48,640
Remember how we said the ECMAScript standard only recognizes one number type in JavaScript, and that

62
00:03:48,640 --> 00:03:52,750
is the double-precision, 64 bit binary format?

63
00:03:53,620 --> 00:03:55,300
What does this all mean in this context?

64
00:03:56,330 --> 00:04:02,750
Well, let's take another step back. In maths, 0.1 is a rational number. And all I mean by a rational

65
00:04:02,750 --> 00:04:07,820
number is that it's the result of a ratio between two numbers, a one and a 10.

66
00:04:08,180 --> 00:04:12,290
We have no issue with this because maths is typically Base 10. 

67
00:04:12,620 --> 00:04:18,649
So going one divided by 10 is doable in maths, and we know that is represented by 0.1. And we 

68
00:04:18,649 --> 00:04:22,970
can easily calculate numbers like 0.2, which is also two divided by 10.

69
00:04:23,810 --> 00:04:29,390
But what happens with irrational numbers? Irrational numbers on numbers that can't be written with

70
00:04:29,390 --> 00:04:31,250
a finite series of digits.

71
00:04:31,970 --> 00:04:35,030
We cannot measure one third, for example, in Base 10.

72
00:04:36,280 --> 00:04:37,120
What is one third?

73
00:04:38,390 --> 00:04:41,750
Well, it's point three, three, three, three, three, and it just continues on forever.

74
00:04:42,500 --> 00:04:46,790
And think about that - we actually cannot represent this number in Base 10.

75
00:04:47,870 --> 00:04:48,650
Weird right?

76
00:04:49,160 --> 00:04:56,780
But now remember how I said ECMAScript only recognizes one number, the double-precision 64 bit binary

77
00:04:56,960 --> 00:04:59,450
value? Well, when you break that down

78
00:04:59,480 --> 00:05:03,500
it uses different amounts of bits to store different pieces of information.

79
00:05:03,740 --> 00:05:09,290
Remember in the previous lecture, we saw how you had the "significand", you had the "mantissa", the "exponential"

80
00:05:09,590 --> 00:05:10,310
and the "base"?

81
00:05:10,940 --> 00:05:15,830
Well, to cut a long story short, the reddish bits you see on the screen is what stores your actual

82
00:05:15,830 --> 00:05:17,930
number. And it uses 52

83
00:05:17,930 --> 00:05:24,110
bits to store that number. And in Base 10, we just took one and divided it by our base, which is 10.

84
00:05:25,430 --> 00:05:28,100
But with computers, we only have Base 2.

85
00:05:28,370 --> 00:05:34,460
So the first iteration we can do is only divided by two. And with 64-bit

86
00:05:34,640 --> 00:05:43,130
this means we can only keep halving 53 times. And to represent this in a way that I think will make the

87
00:05:43,130 --> 00:05:43,670
penny drop,

88
00:05:43,850 --> 00:05:46,790
and you go, "Oh, I get it". Imagine 

89
00:05:46,790 --> 00:05:51,680
we had this pizza and we could only halve this pizza 53 times.

90
00:05:51,890 --> 00:05:57,620
This is binary, and this is the smallest amount of a sliver we can actually get in binary.

91
00:05:58,100 --> 00:05:59,720
It's the highest level of precision.

92
00:06:00,410 --> 00:06:05,090
Now, once you've halved this 53 times, that slither is going to be tiny, right?

93
00:06:06,090 --> 00:06:07,230
But let me ask you this.

94
00:06:08,400 --> 00:06:13,590
Can you take a certain amount of those slithers, and add them up to get one tenth

95
00:06:13,860 --> 00:06:14,670
exactly?

96
00:06:15,210 --> 00:06:16,170
How about one fifth?

97
00:06:17,170 --> 00:06:19,210
The answer is ... you cannot do it.

98
00:06:19,720 --> 00:06:23,140
It won't give you the exact right answer.

99
00:06:23,950 --> 00:06:25,510
Let's look at the number 0.1.

100
00:06:26,260 --> 00:06:33,970
If you added up all those pizza slithers, immediately less than 0.1 is the number zero point zero

101
00:06:34,090 --> 00:06:35,290
nine nine nine nine nine nine nine nine ...

102
00:06:35,320 --> 00:06:37,750
... one six seven three three two, etc etc.

103
00:06:38,020 --> 00:06:39,130
That's what you see on the screen.

104
00:06:39,970 --> 00:06:45,850
And if you added one more slither (of pizza), you're going to get a number that's slightly more than 0.1.

105
00:06:46,120 --> 00:06:52,600
And the difference between these two numbers is literally the smallest slice that you have to decide

106
00:06:52,600 --> 00:06:58,180
whether to include, which introduces an upward bias or exclude which introduces a downward bias.

107
00:06:59,330 --> 00:07:04,520
The JavaScript parser will prefer the higher number as it's closer to 0.1.

108
00:07:05,540 --> 00:07:08,610
And this process is exactly the same for 0.2.

109
00:07:08,630 --> 00:07:09,920
And what does this mean for us?

110
00:07:09,950 --> 00:07:16,460
Well, it means the result is an approximation of 0.1 and 0.2, and both of them are scaled

111
00:07:16,820 --> 00:07:17,390
upwards.

112
00:07:18,730 --> 00:07:19,720
And this is why

113
00:07:19,750 --> 00:07:23,470
0.1 + 0.2 is slightly higher than what we would expect.

114
00:07:23,950 --> 00:07:29,200
And do you know what's interesting? If you didn't take the higher number of both of those, if the parser

115
00:07:29,200 --> 00:07:35,020
didn't do that and you took the lower of the two, you would actually get a much closer number to the

116
00:07:35,020 --> 00:07:36,780
true answer, which is point two

117
00:07:36,860 --> 00:07:38,220
nine nine nine nine nine nine nine ...

118
00:07:38,260 --> 00:07:41,070
... seven, seven, six nine, etc etc.

119
00:07:41,470 --> 00:07:42,760
But the parser doesn't

120
00:07:42,910 --> 00:07:48,340
that way, the interpreter does scale them both up, and that's why we get point three zero zero zero zero ...

121
00:07:48,490 --> 00:07:48,810
four.

122
00:07:49,300 --> 00:07:51,280
I hope this makes sense. For me 

123
00:07:51,280 --> 00:07:55,120
this was really a "Aha" moment when I came across it.

124
00:07:55,450 --> 00:08:01,180
I think it's interesting, and I hope it helps you understand numbers in JavaScript in more detail.

125
00:08:01,480 --> 00:08:02,650
This is really awesome.

126
00:08:02,800 --> 00:08:03,460
Awesome stuff.

127
00:08:03,760 --> 00:08:04,390
Let's keep going.

