1
00:00:00,300 --> 00:00:03,360
There are turn key word is important to understand.

2
00:00:03,780 --> 00:00:04,290
But why?

3
00:00:04,800 --> 00:00:05,430
Let's have a look.

4
00:00:05,910 --> 00:00:06,920
It creates a function.

5
00:00:06,930 --> 00:00:10,140
It just adds a and b my image credit function.

6
00:00:10,140 --> 00:00:11,820
We need the function keyword.

7
00:00:12,360 --> 00:00:13,530
Now we need to name it.

8
00:00:14,280 --> 00:00:15,180
Let's just call it ED.

9
00:00:15,960 --> 00:00:20,070
Let's add two numbers A and B that will pass into the function.

10
00:00:21,850 --> 00:00:22,540
And look at this.

11
00:00:22,990 --> 00:00:24,010
I'm going to return.

12
00:00:25,650 --> 00:00:28,980
JavaScript understands what this means, and I'm going to explain shortly what it means.

13
00:00:29,520 --> 00:00:31,290
And we can return a plus B.

14
00:00:32,320 --> 00:00:33,910
And if we execute this function.

15
00:00:35,190 --> 00:00:36,120
It's not quicker.

16
00:00:37,330 --> 00:00:39,730
And it's aired five and 10.

17
00:00:41,040 --> 00:00:44,250
And it's console this large console log.

18
00:00:47,340 --> 00:00:53,220
We got it comes up with an onslaught of 15, as we would expect, but what does this return keyword

19
00:00:53,460 --> 00:00:54,120
actually mean?

20
00:00:54,540 --> 00:00:55,290
Let's have a look.

21
00:00:56,190 --> 00:01:02,160
The return keyword simply ends execution and you guessed it, returns a value.

22
00:01:02,970 --> 00:01:04,709
What about if there is no return value?

23
00:01:05,010 --> 00:01:09,960
In that instance, undefined is returned, not now undefined.

24
00:01:10,380 --> 00:01:16,350
And something else to bear in mind is that the return statement is affected by automatic semicolon insertion.

25
00:01:17,070 --> 00:01:17,730
What I mean?

26
00:01:18,120 --> 00:01:19,770
Well, let's take our function example.

27
00:01:19,890 --> 00:01:26,790
We had returns FSP if we had to write return and on a new line, we wrote A-plus B, what's going to

28
00:01:26,790 --> 00:01:27,150
happen?

29
00:01:27,600 --> 00:01:33,510
Will the pasta is going to interpret that as return semicolon and then a plus B semicolon?

30
00:01:34,080 --> 00:01:40,140
And the important point to realize with this is that the eight plus B in this instance will be unreachable.

31
00:01:40,440 --> 00:01:44,790
So how can we return something that's spread across multiple lines?

32
00:01:45,150 --> 00:01:47,910
Well, in that case, you just need to close it in parentheses.

33
00:01:48,330 --> 00:01:49,080
That would work.

34
00:01:49,500 --> 00:01:51,150
Let's have a look at another example quickly.

35
00:01:51,720 --> 00:01:54,810
Alright, so a few more examples on the return keyword.

36
00:01:55,050 --> 00:01:59,760
Remember how we said that when you use the return keyword, it stops the execution of the function?

37
00:01:59,880 --> 00:02:00,720
What does it mean?

38
00:02:01,260 --> 00:02:08,039
Well, that firstly means if we've got other variables we define, Yalitza equals 10, D equals 20 and

39
00:02:08,039 --> 00:02:11,039
we console.log C plus D.

40
00:02:11,430 --> 00:02:15,030
You can really see my I.D. is kind of great off these statements.

41
00:02:15,330 --> 00:02:20,250
And the reason it's great, these answers that these are not going to be executed if we add five and

42
00:02:20,250 --> 00:02:22,350
10 again, it still shows us fifteen.

43
00:02:22,590 --> 00:02:27,990
If we wanted to see both, we would have to then reposition these above the return statement.

44
00:02:28,770 --> 00:02:33,030
Only now does it console.log C plus D and return 15.

45
00:02:33,540 --> 00:02:38,490
And you must always just be careful with the return keyword because if you don't have it, it can cause

46
00:02:38,490 --> 00:02:39,090
weird things.

47
00:02:39,090 --> 00:02:39,660
What I mean?

48
00:02:40,080 --> 00:02:41,160
Well, let's go to plonker.

49
00:02:41,400 --> 00:02:42,210
Remember Palanca?

50
00:02:42,210 --> 00:02:43,530
We haven't used it for a while.

51
00:02:44,840 --> 00:02:51,080
Just on the homepage, and I'm just clicking this new button here, and we can just default to standard

52
00:02:51,320 --> 00:02:54,020
empty HTML, CSS and JavaScript file.

53
00:02:54,170 --> 00:02:56,270
And what's nice about Palanca is on the left.

54
00:02:56,270 --> 00:02:59,210
You can kind of see your project file layout.

55
00:02:59,220 --> 00:03:01,550
You can kind of see your setup, you've got your index file.

56
00:03:02,000 --> 00:03:08,150
And if we click on our index file, you can see it references to JavaScript file within the Lib folder.

57
00:03:09,140 --> 00:03:10,760
So it's just a nice overview for you.

58
00:03:10,760 --> 00:03:12,200
It's nice to see how everything fits in.

59
00:03:12,470 --> 00:03:15,380
But now what I want to do is I want to create in the index file.

60
00:03:15,410 --> 00:03:20,060
This just creates a paragraph with I-D demo.

61
00:03:23,350 --> 00:03:24,220
It's all I'm wanting to do.

62
00:03:25,030 --> 00:03:29,650
And in our JavaScript file, which we know is already referenced in our index file, so we know this

63
00:03:29,650 --> 00:03:31,900
is going to be executed, this define a function.

64
00:03:33,520 --> 00:03:37,510
Called Taste and taste, we're going to pass in a variable name and argument.

65
00:03:38,690 --> 00:03:40,760
Remember how we saw this example earlier?

66
00:03:41,920 --> 00:03:45,070
And yeah, all I want to do is on a right into that paragraph.

67
00:03:46,060 --> 00:03:46,600
Hello.

68
00:03:47,930 --> 00:03:48,290
Name.

69
00:03:50,490 --> 00:03:51,300
It's all we want to do.

70
00:03:52,020 --> 00:03:53,700
So now we've defined our function.

71
00:03:54,480 --> 00:03:55,560
All we need to do now.

72
00:03:55,590 --> 00:03:59,460
Access that paragraph tag and insert this text into it.

73
00:04:00,640 --> 00:04:02,390
So how do we access a pair of tech?

74
00:04:02,500 --> 00:04:07,240
Remember, we start off with the document because that's the overarching application.

75
00:04:07,750 --> 00:04:14,770
We access an inbuilt method on that element by ID. And then we can write whatever we want and signed

76
00:04:14,770 --> 00:04:14,890
it.

77
00:04:15,460 --> 00:04:17,110
So yeah, we're going to start with document.

78
00:04:18,350 --> 00:04:22,640
It element by ID. In this case, the I.D. we said, was demo.

79
00:04:24,420 --> 00:04:27,330
And in there, we want to right within its inner turmoil.

80
00:04:27,660 --> 00:04:30,540
We want to execute this function and let's say the users wisely.

81
00:04:31,350 --> 00:04:32,940
Now all we need to do is preview this.

82
00:04:35,260 --> 00:04:35,700
You can see.

83
00:04:36,080 --> 00:04:40,600
Tanker that was inserted in the index, eight-month-old and they we got undefined.

84
00:04:41,470 --> 00:04:45,220
It's another reason why if you don't have the return key keyword, remember what I said?

85
00:04:45,940 --> 00:04:47,590
It returns undefined.

86
00:04:48,220 --> 00:04:50,020
I've just proven it to you and this is weird.

87
00:04:50,020 --> 00:04:51,640
You think, why is it not returning?

88
00:04:51,910 --> 00:04:52,660
Hello, Wally.

89
00:04:52,840 --> 00:04:56,500
And the reason is, as you guessed, that you need the return.

90
00:04:56,740 --> 00:05:01,780
Key would say, if we now return hello name and it refreshes.

91
00:05:02,200 --> 00:05:03,490
We should get help, Wally.

92
00:05:03,610 --> 00:05:04,180
And we do.

93
00:05:04,420 --> 00:05:04,900
There you go.

94
00:05:05,170 --> 00:05:09,130
And one more example let's just open up Chrome's console.

95
00:05:15,130 --> 00:05:20,680
And he has another example is create a function, let's call a function test for lack of a better word,

96
00:05:21,360 --> 00:05:24,910
and let's just define a dog, and let's say his name is doggy.

97
00:05:26,870 --> 00:05:27,160
OK.

98
00:05:29,380 --> 00:05:32,890
Now, if I run this function, what do you expect to be returned?

99
00:05:33,680 --> 00:05:37,750
Well, we haven't included the return keyword, so yes, I'd expect undefined to be thrown.

100
00:05:38,170 --> 00:05:39,370
And that's exactly what happens.

101
00:05:40,270 --> 00:05:42,070
So what about if we create another function?

102
00:05:42,370 --> 00:05:43,600
Let's just call it Test two.

103
00:05:44,230 --> 00:05:45,720
I know I'm not being very creative here.

104
00:05:45,740 --> 00:05:49,170
The names and it's early dog to equal wolf.

105
00:05:50,140 --> 00:05:50,560
Wolf.

106
00:05:52,620 --> 00:05:57,810
Now, instead of closing and ending the function, let's put in the return keyword and what do we want

107
00:05:57,810 --> 00:05:58,290
returned?

108
00:05:58,320 --> 00:06:02,520
Well, let's just say we want the dog to return the dog to which is its name.

109
00:06:03,670 --> 00:06:06,310
So when I run taste two, what do you think should happen now?

110
00:06:08,270 --> 00:06:11,390
It's right, we should see were fourth Test to.

111
00:06:12,950 --> 00:06:13,520
Woof, woof.

112
00:06:14,480 --> 00:06:20,870
So these were just three quick examples of how the returned keyword can affect the outcome of your function

113
00:06:20,870 --> 00:06:22,500
execution to the speed in a mind.

114
00:06:22,520 --> 00:06:23,810
It's quite an important point to note.

115
00:06:24,020 --> 00:06:24,590
Let's move on.

