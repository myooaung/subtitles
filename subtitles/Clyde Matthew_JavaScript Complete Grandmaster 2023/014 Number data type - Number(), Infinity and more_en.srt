1
00:00:00,330 --> 00:00:04,170
Let's now quickly discuss Numbers in JavaScript.

2
00:00:05,550 --> 00:00:07,800
Number is part of the window object.

3
00:00:08,370 --> 00:00:12,130
Let me prove it to you. If we console.dir(), and remember

4
00:00:12,180 --> 00:00:17,730
in a previous lecture when we were really getting into consoles, we saw what "dir" was. It was just

5
00:00:17,970 --> 00:00:22,530
a way for you to console the JavaScript notation or value. In here,

6
00:00:22,980 --> 00:00:23,670
we're going to pass in

7
00:00:23,670 --> 00:00:24,030
Number.

8
00:00:25,780 --> 00:00:31,840
And if I open up this Number, you can see that there are lots of methods and properties attached to it, and

9
00:00:31,840 --> 00:00:33,130
this wasn't me.

10
00:00:33,160 --> 00:00:34,720
This is native to JavaScript.

11
00:00:34,730 --> 00:00:35,560
This is awesome.

12
00:00:36,010 --> 00:00:37,990
This is what we have right out of the box.

13
00:00:40,360 --> 00:00:47,560
Let me show you this example. Let's define "a" as 13, but let's say 13 is, we've put it in inverted commas,

14
00:00:47,560 --> 00:00:48,550
so it's a string.

15
00:00:50,580 --> 00:00:52,500
I'll prove it to you. If we're go typeof(a), 

16
00:00:53,630 --> 00:00:54,230
it's a string.

17
00:00:56,110 --> 00:00:58,930
But what happens if we use the

18
00:00:58,960 --> 00:01:01,390
Number method? Well, we can go

19
00:01:02,660 --> 00:01:05,750
Let's go let b equals Number, 

20
00:01:06,320 --> 00:01:09,530
and we also pass it a 13 string,

21
00:01:10,990 --> 00:01:12,160
what do you think is going to happen now?

22
00:01:13,480 --> 00:01:18,310
Well, what does Number method does is it converts strings into numbers, if it's possible.

23
00:01:19,330 --> 00:01:22,060
So if I go typeof(b),

24
00:01:22,840 --> 00:01:24,490
I'll be a number.

25
00:01:24,760 --> 00:01:25,540
How cool is that?

26
00:01:25,960 --> 00:01:31,330
So you'll find that during your JavaScript career, you're going to be using Number now and again, because

27
00:01:31,330 --> 00:01:36,040
you're going to want to make sure that whatever value you pass to a function is actually a number.

28
00:01:36,910 --> 00:01:40,240
And what happens if we pass a random string, like dog?

29
00:01:40,360 --> 00:01:43,720
I'd expect some sort of error to occur - that can't be a number.

30
00:01:44,650 --> 00:01:45,540
So let's go

31
00:01:46,820 --> 00:01:47,360
Number(dog).

32
00:01:50,680 --> 00:01:53,830
(wrong buzzer sound)
Ah, that makes sense. NaN - not a number. 

33
00:01:54,100 --> 00:01:58,510
We're going to get into NaN a bit later. I want to show you a few examples now first.

34
00:01:59,140 --> 00:02:00,640
So let's head over to JSBin.

35
00:02:02,830 --> 00:02:08,380
And remember, I said that JavaScript only has one type of number and that is a floating point number?

36
00:02:09,610 --> 00:02:11,430
Well, what do I mean by that? Well have a look here.

37
00:02:12,070 --> 00:02:19,020
Let's let a equal 10, and b equal 10.00.

38
00:02:20,940 --> 00:02:28,310
And this is a cool little tip here. I've defined two variables on the same line without using the "let"

39
00:02:28,500 --> 00:02:31,650
keyword twice. Just a bit of a pro-tip there.

40
00:02:35,510 --> 00:02:38,150
document.write(), so we can see it on the screen.

41
00:02:38,300 --> 00:02:45,680
All I want to show you now is, is a equal to b? And from a JavaScript point of view, there is no difference

42
00:02:45,680 --> 00:02:49,370
between 10 and 10.0000.

43
00:02:49,910 --> 00:02:50,570
They are the same thing.

44
00:02:51,020 --> 00:02:56,120
We can also use the exponential function for large numbers.

45
00:02:57,650 --> 00:03:00,200
Say you're lazy and you wanted to write the number.

46
00:03:00,950 --> 00:03:01,460
I don't know

47
00:03:02,060 --> 00:03:02,750
3000.

48
00:03:03,320 --> 00:03:08,690
What you could do is instead of writing three zero zero zero, you could write three, e, 

49
00:03:09,880 --> 00:03:10,240
three.

50
00:03:13,550 --> 00:03:17,810
Simple. And we can document.write that,

51
00:03:19,010 --> 00:03:20,300
and there's your 3000. 

52
00:03:20,720 --> 00:03:22,250
What else can we do in JavaScript?

53
00:03:22,940 --> 00:03:24,290
We can add numbers together.

54
00:03:26,340 --> 00:03:31,950
Lemme give you another example. Let's that say apples equals 10, and let pears

55
00:03:33,730 --> 00:03:42,080
aqual to five, you can literally add "apples + pears", and the answer should be 15, as we would expect.

56
00:03:42,470 --> 00:03:42,790
Alright.

57
00:03:42,800 --> 00:03:49,250
And then the last thing worth mentioning is infinity. Remember if I go back to this console here, Google

58
00:03:49,250 --> 00:03:51,560
Chrome, and we console this number,

59
00:03:52,190 --> 00:03:52,910
and open it up,

60
00:03:53,270 --> 00:03:55,730
we've got POSITIVE_INFINITY, and

61
00:03:55,730 --> 00:03:57,310
NEGATIVE_INFINITY.

62
00:03:58,360 --> 00:04:01,780
And intuitively, infinity is what, is what you would expect.

63
00:04:02,080 --> 00:04:04,900
It is just an incredibly large number.

64
00:04:05,740 --> 00:04:07,240
So let me give you an example now.

65
00:04:08,580 --> 00:04:12,840
And let's say we've define a bigNumber variable.

66
00:04:13,650 --> 00:04:15,000
By the way, that's a very big number.

67
00:04:15,810 --> 00:04:22,530
And what I'm going to show you now is, let's say, if bigNumber equals

68
00:04:23,740 --> 00:04:24,730
Infinity,

69
00:04:26,480 --> 00:04:30,500
then I want to document.write()

70
00:04:33,570 --> 00:04:38,160
"Let's just say this is Infinity."

71
00:04:39,300 --> 00:04:39,960
And there you go.

72
00:04:39,990 --> 00:04:45,550
I've just proven that in JavaScript, a really large number is going to be treated as the Infinity data-type.

73
00:04:46,290 --> 00:04:51,570
And as you would expect, one plus Infinity will be Infinity and one divided by Infinity is going to

74
00:04:51,570 --> 00:04:52,920
be, zero.

75
00:04:53,490 --> 00:04:54,180
Let me show you.

76
00:05:02,280 --> 00:05:03,180
One plus

77
00:05:04,610 --> 00:05:05,270
Infinity.

78
00:05:11,700 --> 00:05:14,040
It's just Infinity. And,

79
00:05:18,690 --> 00:05:20,730
one divided by Infinity,

80
00:05:21,210 --> 00:05:21,730
is zero.

81
00:05:25,160 --> 00:05:30,350
I hope this is starting to feel more intuitive to you. I hope you're not being intimidated by it, it's just a

82
00:05:30,350 --> 00:05:33,980
number and this is how we work with numbers in JavaScript.

83
00:05:34,400 --> 00:05:34,940
Let's move on.

