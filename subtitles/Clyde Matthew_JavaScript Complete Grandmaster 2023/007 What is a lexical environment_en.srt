1
00:00:00,450 --> 00:00:07,950
You've got to wonder, don't you how does the machine know where to look for all the variables and functions

2
00:00:07,950 --> 00:00:08,970
declared in our code?

3
00:00:09,850 --> 00:00:12,280
And this is what I want to speak about now.

4
00:00:12,970 --> 00:00:15,340
We were looking at the execution context.

5
00:00:15,730 --> 00:00:21,670
We were understanding about the stick and that the execution contexts are placed at the top of the stack

6
00:00:21,670 --> 00:00:25,900
and new execution contexts are created each time a function is called.

7
00:00:26,830 --> 00:00:30,820
But we didn't look deeper into the execution context itself.

8
00:00:31,120 --> 00:00:37,810
So we understand the high level artworks, but the execution context is created in two phases.

9
00:00:38,770 --> 00:00:42,040
One is the creation phase and two is the execution phase.

10
00:00:42,910 --> 00:00:48,880
The execution phase is when all the assignments of those variables are done and the code is finally

11
00:00:48,880 --> 00:00:49,510
executed.

12
00:00:49,510 --> 00:00:50,740
So that is pretty straightforward.

13
00:00:51,250 --> 00:00:54,010
I want us to concentrate on this creation phase.

14
00:00:54,700 --> 00:00:58,980
The creation process has two distinct items.

15
00:00:58,990 --> 00:01:03,250
It has a lexical environment and a variable environment.

16
00:01:03,730 --> 00:01:06,430
Let's first look at the lexical environment.

17
00:01:06,880 --> 00:01:12,340
And before we actually go into detail here, I just want to zip across the coding ed and show you what

18
00:01:12,340 --> 00:01:14,050
I mean by lexical environment.

19
00:01:14,050 --> 00:01:18,730
At least when you learning the theory look kind of help you understand what it is we're talking about.

20
00:01:19,150 --> 00:01:19,630
Have a look.

21
00:01:20,410 --> 00:01:23,620
I really don't want you to freak out about these fancy words.

22
00:01:23,620 --> 00:01:25,030
Lexical environment.

23
00:01:26,200 --> 00:01:27,070
Who cares about that?

24
00:01:27,100 --> 00:01:31,470
Just take a step back or a lexical environment is the scope.

25
00:01:31,480 --> 00:01:36,400
It's another word scope, and you create a scope by the curly brackets.

26
00:01:36,670 --> 00:01:40,150
Let me just shoot over to the code and get it to committee and show you what I mean.

27
00:01:40,180 --> 00:01:43,510
But please, I just I just want to stress that don't be intimidated by all of us.

28
00:01:43,720 --> 00:01:44,470
Take a step back.

29
00:01:44,830 --> 00:01:48,580
Understand what it is we're doing, and it will make complicit.

30
00:01:48,640 --> 00:01:49,480
Let me show you quickly.

31
00:01:50,080 --> 00:01:53,650
So as I was saying, curly brackets define a scope.

32
00:01:55,110 --> 00:01:58,080
So there we go on our screen, we've defined a scope.

33
00:01:58,380 --> 00:01:59,670
You may even zoom in a bit more.

34
00:02:02,550 --> 00:02:06,900
And what's really cool about JavaScript is we can create as many scopes as we want.

35
00:02:07,350 --> 00:02:12,990
For example, we can do this now we've created two scopes to lexical environments.

36
00:02:14,110 --> 00:02:18,400
And we can keep going on more and more and more and more to our heart's content.

37
00:02:18,760 --> 00:02:20,470
But remember the some of these examples of De.

38
00:02:21,190 --> 00:02:22,300
I mean, let's just delete this.

39
00:02:22,300 --> 00:02:23,470
It's getting a bit ridiculous.

40
00:02:23,770 --> 00:02:28,900
And let's console log a variable called X if we haven't yet defined.

41
00:02:29,680 --> 00:02:31,000
Now let's create a scope.

42
00:02:32,240 --> 00:02:38,390
And what about even another scope, and let's define a variable x equal dog.

43
00:02:39,920 --> 00:02:42,110
What do you think's going to happen when we execute this now?

44
00:02:44,190 --> 00:02:48,740
With all the things we've learned with looking at the political environments, remember how we had the

45
00:02:48,740 --> 00:02:54,530
two environments within each context, we had the lexical and we had the variable and the lexical defined

46
00:02:54,680 --> 00:02:56,750
the late in the contest variables.

47
00:02:57,110 --> 00:02:58,190
What do you think will happen here?

48
00:02:58,400 --> 00:03:04,280
Well, from what we've seen, we know that late doesn't get initialized until it's encountered in fancy

49
00:03:04,280 --> 00:03:05,090
programming talk.

50
00:03:05,090 --> 00:03:07,160
This just means it's not going to be hoisted to the top.

51
00:03:07,160 --> 00:03:08,600
I'd expect to see an area.

52
00:03:09,640 --> 00:03:10,630
It's just thought, okay.

53
00:03:12,080 --> 00:03:13,680
And then we go we get an error.

54
00:03:13,730 --> 00:03:14,840
X is not defined.

55
00:03:15,080 --> 00:03:16,370
And what about if we use VAR?

56
00:03:17,610 --> 00:03:25,230
Well, as we're going to be see for sits in an environment called a variable environment, and this

57
00:03:25,230 --> 00:03:28,250
gets assigned a value of undefined Ford's initials.

58
00:03:28,710 --> 00:03:32,310
So if we go for, you'd expect not to see an era.

59
00:03:32,550 --> 00:03:34,770
In fact, I'd expect to see undefined.

60
00:03:36,360 --> 00:03:38,250
And that's what we see, we see undefined.

61
00:03:38,310 --> 00:03:41,610
So you get this, you starting to understand what a lexical environment means.

62
00:03:41,880 --> 00:03:42,930
So let's delete this.

63
00:03:43,590 --> 00:03:46,800
It's God of war and this make this list again.

64
00:03:47,820 --> 00:03:51,750
And then what about if we now define another lexical environment?

65
00:03:52,320 --> 00:04:00,000
So the cool thing with lit is that anything below it, any lexical environment created after it will

66
00:04:00,000 --> 00:04:00,780
be valid could.

67
00:04:01,840 --> 00:04:06,940
So if we go console log X where your dog makes sense, right?

68
00:04:07,210 --> 00:04:08,110
It's all I want to show you.

69
00:04:08,140 --> 00:04:09,090
Let's get back to the lecture.

70
00:04:09,880 --> 00:04:10,840
OK, cool, we back.

71
00:04:11,830 --> 00:04:16,600
So we onto the creation phase of an execution context.

72
00:04:16,640 --> 00:04:23,440
And we know that this involves the creation of a lexical environment and the lexical environment holds

73
00:04:23,440 --> 00:04:26,290
identifier variable mappings.

74
00:04:26,620 --> 00:04:28,060
What I mean by identifier?

75
00:04:28,300 --> 00:04:33,760
Well, that is just the name of the variable of function and the variable within the identifier.

76
00:04:33,760 --> 00:04:38,680
Variable mappings refers to the actual object of value itself.

77
00:04:39,370 --> 00:04:44,440
You'll understand what this means for each lexical environment has three components.

78
00:04:45,460 --> 00:04:47,260
It has the environment to record.

79
00:04:47,890 --> 00:04:56,380
It references the outer environment and it has this binding and it binds this.

80
00:04:56,920 --> 00:04:58,690
Well, let's look at each one of those very quickly.

81
00:04:59,290 --> 00:05:04,060
The environment record is just the place with a variable, and function declarations are stored inside

82
00:05:04,060 --> 00:05:05,140
the lexical environment.

83
00:05:05,560 --> 00:05:06,670
It's not much else to it.

84
00:05:06,670 --> 00:05:08,110
It's quite simple and straightforward.

85
00:05:08,650 --> 00:05:15,040
Now, when we look at the reference to the art environment, that just means that it has access to its

86
00:05:15,040 --> 00:05:16,960
outer lexical environment.

87
00:05:17,440 --> 00:05:23,350
And that means that the JavaScript engine can look for variables inside the Alta environment if they

88
00:05:23,350 --> 00:05:26,260
are not found in the current lexical environment.

89
00:05:27,010 --> 00:05:30,580
And we've also got the this finding in this component.

90
00:05:30,580 --> 00:05:35,320
The value of this is determined or set in the global execution context.

91
00:05:35,740 --> 00:05:37,920
The value of this refers to the global object.

92
00:05:37,930 --> 00:05:40,360
We've seen this in browsers.

93
00:05:40,360 --> 00:05:42,400
That global object is the window object.

94
00:05:42,970 --> 00:05:45,700
And what about in a function execution context?

95
00:05:46,000 --> 00:05:47,380
What happens with the value of this?

96
00:05:47,380 --> 00:05:47,920
What is that?

97
00:05:48,280 --> 00:05:53,680
Well, that depends on how the functions called if it's called by an object referenced in the value

98
00:05:53,680 --> 00:05:55,000
of this asset to that object.

99
00:05:55,600 --> 00:05:59,260
Otherwise, the value of this is going to be the global object or even undefined.

100
00:05:59,440 --> 00:06:00,640
If we're using strict mode.

101
00:06:01,330 --> 00:06:04,810
And finally, we have the variable environment.

102
00:06:05,710 --> 00:06:10,510
It's actually just a copy of the lexical environment and in all practicality.

103
00:06:10,510 --> 00:06:16,390
There is no real difference between the two except when working with with the statements, because when

104
00:06:16,390 --> 00:06:21,970
you work with with statements, it actually modifies the lexical environment, not the variable environment.

105
00:06:22,570 --> 00:06:25,360
But, you know, I don't want to be going into the with statements.

106
00:06:25,360 --> 00:06:30,430
Nine Many developers actually argue you should avoid the word statement altogether for performance reasons,

107
00:06:30,760 --> 00:06:34,360
says such just treat the two as pretty much the same thing.

108
00:06:35,170 --> 00:06:38,590
And although they are pretty much the same thing in iOS six.

109
00:06:38,950 --> 00:06:44,710
One difference between the lexical environment and variable environment component is that in the former

110
00:06:44,710 --> 00:06:52,180
in the lexical environment, we store function declarations and the lit and contact variables, while

111
00:06:52,180 --> 00:06:56,230
in the variable environment we only store the variable VAR.

112
00:06:56,830 --> 00:07:01,300
But again, going forward with coding, you and I should not be using VAR, we should be using latent

113
00:07:01,300 --> 00:07:01,750
content.

114
00:07:02,410 --> 00:07:07,480
But for the sake of understanding it, I am going to throw in a few balls in the upcoming examples.

