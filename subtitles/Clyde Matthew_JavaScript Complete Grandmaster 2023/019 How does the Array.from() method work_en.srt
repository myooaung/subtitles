1
00:00:00,240 --> 00:00:03,330
So what exactly is this of Ray from method all about?

2
00:00:03,540 --> 00:00:10,980
Well, very intuitively and very basically all it does is it creates an array from an array like object

3
00:00:11,160 --> 00:00:13,730
on its object, but I'm not going to get into that now.

4
00:00:14,040 --> 00:00:21,540
Similarly, just like the two lowercase method, the array from Method is a pure JavaScript function.

5
00:00:22,080 --> 00:00:24,990
In fact, it was introduced as part of iOS six.

6
00:00:25,200 --> 00:00:30,540
Yes, six, by the way, was just a major overhaul and upgrade to iOS five.

7
00:00:30,780 --> 00:00:34,680
And you're probably not scratching your head, but you may have already forgotten where does it come

8
00:00:34,680 --> 00:00:34,980
from?

9
00:00:35,340 --> 00:00:39,810
And we just saw it comes from the array object itself.

10
00:00:40,560 --> 00:00:42,570
But these are all things that you already know.

11
00:00:42,900 --> 00:00:44,730
So how does it work?

12
00:00:45,850 --> 00:00:48,590
Well, it's very easy to access this method.

13
00:00:48,610 --> 00:00:53,790
We start off by accessing JavaScript array objects within access.

14
00:00:53,980 --> 00:01:01,270
The from method and the from method takes an argument and its argument is an array like object.

15
00:01:01,450 --> 00:01:06,340
But before we talk more about what it does, it's hop over to the coding editor and let's start seeing

16
00:01:06,340 --> 00:01:11,090
how it works in action before we start getting into more detail on the array from method.

17
00:01:11,110 --> 00:01:13,120
I just want you to understand how it works.

18
00:01:13,870 --> 00:01:15,130
So remember what I said?

19
00:01:15,130 --> 00:01:20,470
It has to be an array like object on editable object in order for us to use this array from method.

20
00:01:21,100 --> 00:01:22,940
So how does it work?

21
00:01:22,960 --> 00:01:25,060
Well, let's define an array like object.

22
00:01:26,320 --> 00:01:31,810
And let's just be very, very simple here, let's just say what, so we know it's a string in this case.

23
00:01:32,110 --> 00:01:34,180
How does the erase from look like?

24
00:01:34,540 --> 00:01:40,600
Well, firstly, I just want to say I have a quicker open, OK, just allows us to run JavaScript real

25
00:01:40,600 --> 00:01:43,570
time in our text editor so we don't have to keep jumping to the browser.

26
00:01:43,760 --> 00:01:46,300
It's just a lot quicker to kind of write up your code.

27
00:01:46,570 --> 00:01:47,650
It's very handy.

28
00:01:48,720 --> 00:01:49,780
Anyway, how does it work?

29
00:01:49,800 --> 00:01:55,420
Well, let's console.log something, and let's access JavaScript array object on there.

30
00:01:55,440 --> 00:01:56,940
We know there's a method called from.

31
00:01:57,330 --> 00:02:00,450
And we wanted to pass in our array like.

32
00:02:01,080 --> 00:02:09,150
And as you can see, it takes our array like object outputs and is converted into an array, which is

33
00:02:09,150 --> 00:02:11,310
really, really awesome.

34
00:02:11,730 --> 00:02:16,230
And you can see our array just consists of each letter in that string.

35
00:02:16,740 --> 00:02:17,070
It's all.

36
00:02:17,070 --> 00:02:17,460
It's done.

37
00:02:17,790 --> 00:02:18,930
It's all back to the lecture.

38
00:02:20,200 --> 00:02:25,750
Cause they're making sense, we looked at a very simple example, but just bear in mind that what does

39
00:02:25,750 --> 00:02:27,850
this array like object mean?

40
00:02:28,480 --> 00:02:35,770
It just means that the object needs to have a length property and indexed elements.

41
00:02:36,550 --> 00:02:37,540
What do I mean by this?

42
00:02:37,570 --> 00:02:41,620
Well, let's hop over to the console again and this just look at exactly what I'm talking about.

43
00:02:42,310 --> 00:02:42,760
All right.

44
00:02:42,760 --> 00:02:48,190
So we've looked at this example here, but how and why does it work?

45
00:02:48,220 --> 00:02:51,910
Remember, the array from Method will not work on everything.

46
00:02:52,450 --> 00:02:58,870
In fact, as the description kind of season as we've spoken about, it only works on array like objects.

47
00:02:59,680 --> 00:03:05,610
And what that means is that the object needs to have a length property and therefore index elements.

48
00:03:05,920 --> 00:03:06,570
What do I mean?

49
00:03:06,580 --> 00:03:11,260
Well, it's got a console, so let me right click on Google Chrome here.

50
00:03:11,770 --> 00:03:13,330
New incognito mode.

51
00:03:14,870 --> 00:03:16,520
And did you go to a console?

52
00:03:19,450 --> 00:03:21,130
So kind of making sense, can you see that?

53
00:03:21,790 --> 00:03:28,200
And remember what we said, let's just define dog or array like object as what?

54
00:03:29,940 --> 00:03:33,660
And we know that the array from is it works on this, we just saw an example of that.

55
00:03:34,050 --> 00:03:34,590
But why?

56
00:03:35,160 --> 00:03:42,240
Well, to show you, let's console out this array like object and I want to look at its protein.

57
00:03:44,100 --> 00:03:49,290
And if we learned this out, we know it is off Typekit Street, and if we open up the string method,

58
00:03:49,680 --> 00:03:52,710
what's awesome is that we've got this Lynx property.

59
00:03:52,920 --> 00:03:56,100
That's what I mean by an array like object.

60
00:03:56,100 --> 00:04:00,210
It has to have this link properly in order for the array from makes it to work.

61
00:04:01,080 --> 00:04:01,710
So there you go.

62
00:04:01,740 --> 00:04:02,640
Hope it's making sense.

63
00:04:02,670 --> 00:04:04,140
Let's jump back into the picture.

64
00:04:04,710 --> 00:04:05,170
Alright.

65
00:04:05,190 --> 00:04:07,440
I hope it's time to kind of make more sense to you.

66
00:04:08,040 --> 00:04:10,920
And remember what I said earlier that it does take more than one argument.

67
00:04:11,280 --> 00:04:17,790
Actually, it can take up to three arguments, can take a map and it can take what you want this to

68
00:04:17,790 --> 00:04:18,360
refer to.

69
00:04:19,079 --> 00:04:21,959
Bear in mind, these arguments are optional.

70
00:04:22,200 --> 00:04:24,510
We don't have to put them into this function at all.

71
00:04:24,870 --> 00:04:31,020
And a lot of people actually combine the this optional argument into that map function itself.

72
00:04:31,290 --> 00:04:34,710
So oftentimes you'll just see two arguments in the array from method.

73
00:04:35,130 --> 00:04:37,970
Anyway, I don't want to go into too much detail about this.

74
00:04:37,980 --> 00:04:40,650
I can quickly show you what the map is all about.

75
00:04:40,660 --> 00:04:44,910
So let's hop over to the text editor again, and let's have a look at how that would work.

76
00:04:45,720 --> 00:04:51,330
Last but not least, let's see how the second argument today array from function works.

77
00:04:51,750 --> 00:04:52,710
What is it all about?

78
00:04:53,100 --> 00:04:57,540
Well, let's delete everything we had on our screen previously, and let's define an array is just say

79
00:04:57,540 --> 00:04:58,920
that our air has a dog.

80
00:04:59,520 --> 00:05:03,120
And you guessed it a cat.

81
00:05:04,070 --> 00:05:04,740
Very simple.

82
00:05:05,430 --> 00:05:07,970
Now what I want to do is I want to define a hand of function.

83
00:05:07,980 --> 00:05:09,930
I want to take everything inside the Syrian.

84
00:05:09,930 --> 00:05:11,820
I want to log something out of the screen.

85
00:05:12,360 --> 00:05:14,700
So let's use JavaScript function keyword.

86
00:05:15,000 --> 00:05:17,280
It's cool that handler, we can call it whatever we want.

87
00:05:17,700 --> 00:05:23,550
The handler is going to take an animal in each case, and all I want to do is I just want to return

88
00:05:23,550 --> 00:05:26,970
a statement and I'm going to be using template literals here.

89
00:05:27,420 --> 00:05:29,490
And all I'm going to say is I'm going to say a.

90
00:05:30,580 --> 00:05:31,060
Animal.

91
00:05:32,630 --> 00:05:34,010
Went walking, walking.

92
00:05:35,560 --> 00:05:36,310
So there you go.

93
00:05:36,610 --> 00:05:37,870
That's nothing too profound.

94
00:05:38,170 --> 00:05:40,690
It is a very, very simple function.

95
00:05:41,620 --> 00:05:42,640
Now, what do I want to do?

96
00:05:42,670 --> 00:05:44,530
Well, let's console.log.

97
00:05:45,640 --> 00:05:52,960
Let's assess the array, the from method we know we want to access this array type.

98
00:05:53,890 --> 00:06:00,250
And as you can see, if we just keep it with one argument literally does not make sense for us to do

99
00:06:00,250 --> 00:06:02,800
so because it is an array already.

100
00:06:02,980 --> 00:06:05,620
So there is no point of creating an array from an array.

101
00:06:06,430 --> 00:06:10,750
It's the second argument that map and I want us to understand.

102
00:06:11,350 --> 00:06:15,580
And the second argument is what we've defined as this hand function.

103
00:06:16,300 --> 00:06:22,180
And then we go, What's returned to us on the screen is a dog walking and a cat went walking.

104
00:06:22,630 --> 00:06:24,070
This is a new arena.

105
00:06:24,430 --> 00:06:31,300
It's created a brand new array, and it's taken each item in the original array posted through our map

106
00:06:31,300 --> 00:06:33,760
function and it's returned to us.

107
00:06:33,760 --> 00:06:37,300
A new array is that kind of makes sense, and that's what it's all about.

108
00:06:37,370 --> 00:06:43,540
Hope you're having fun, and I think by now you kind of have a good, intuitive feel for how this works.

109
00:06:43,900 --> 00:06:44,500
So well done.

110
00:06:44,510 --> 00:06:45,610
I'm very, very impressed.

111
00:06:46,870 --> 00:06:47,360
Here we go.

112
00:06:47,380 --> 00:06:49,360
I hope it's starting to make a bit more sense.

113
00:06:49,390 --> 00:06:54,370
And don't worry, you know, as you come across these in your coding career, you'll start using it

114
00:06:54,370 --> 00:06:56,660
more and more, and it will become a lot more intuitive.

115
00:06:56,680 --> 00:07:03,040
I just wanted you to know about the ray from method because it is and it can be extremely handy.

116
00:07:03,310 --> 00:07:10,180
Which brings me on to the next topic, and that is why do I need to know about the array from me said,

117
00:07:10,180 --> 00:07:12,340
why did I even discuss it in this course?

118
00:07:13,000 --> 00:07:18,610
Well, sometimes we want to work with methods that are only available from the array object.

119
00:07:19,330 --> 00:07:23,320
For example, the for each method is only available on the right object.

120
00:07:23,350 --> 00:07:29,260
And in order to access that method, we sometimes have to convert what we working with in our code into

121
00:07:29,260 --> 00:07:29,800
an array.

122
00:07:30,160 --> 00:07:31,120
Does that kind of make sense?

123
00:07:31,690 --> 00:07:36,080
And over and above this, the array from method is extremely useful.

124
00:07:36,100 --> 00:07:42,940
It allows you to do lots of other things like cloning arrays, removing duplicates, even filling an

125
00:07:42,940 --> 00:07:48,430
array, etc., etc. There are a lot of things you can do, and most definitely, you're going to be

126
00:07:48,430 --> 00:07:50,890
using this when working with Dom collections.

127
00:07:51,220 --> 00:07:52,810
And it brings me back to the first point.

128
00:07:52,810 --> 00:07:56,500
Sometimes we want to use methods that are only available on the array object.

129
00:07:57,040 --> 00:08:01,930
So when you're working with a DOM collection, for example, in H2 multiplication, sometimes we need

130
00:08:01,930 --> 00:08:06,670
to convert that into an array object in order to access methods we want.

131
00:08:07,360 --> 00:08:12,550
So I guess what I'm trying to say is that it comes in handy when you encounter and work with array like

132
00:08:12,550 --> 00:08:13,030
objects.

133
00:08:13,840 --> 00:08:18,250
Hope that is providing a little bit more clarity on what this method does.

134
00:08:18,670 --> 00:08:20,590
Don't worry, we're only just getting into it.

135
00:08:20,740 --> 00:08:24,160
So don't panic if you don't fully understand it yet, it'll come through time.

136
00:08:24,490 --> 00:08:25,900
Hope you enjoyed the school so far.

137
00:08:25,930 --> 00:08:28,840
Hope you stay motivated and I'll see you in the next lecture.

