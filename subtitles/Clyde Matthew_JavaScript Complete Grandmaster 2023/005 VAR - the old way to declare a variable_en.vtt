WEBVTT
1
00:00:00.780 --> 00:00:06.689
We know the theory, but let's see how we actually implement it. Before ES2015,

2
00:00:07.080 --> 00:00:09.400
You had to use the "var" keyword.

3
00:00:09.960 --> 00:00:14.490
And that's why you'll see a lot of JavaScript code with the var keyword. And all you have to do is

4
00:00:14.490 --> 00:00:19.080
put the name of your container, the name of your variable, after the VAR keyword.

5
00:00:19.650 --> 00:00:22.080
Here we've got var name, var balance and var loggedIn.

6
00:00:23.010 --> 00:00:27.450
But just remember, at this stage, we've not yet assign values to these variables.

7
00:00:28.140 --> 00:00:31.260
So the value of each variable will be undefined.

8
00:00:36.360 --> 00:00:42.570
And this brings us on step 2. Remember what step 2 was? that was when you initialized your variable. 

9
00:00:43.140 --> 00:00:47.430
And that means that JavaScript engine assigns the variable to memory.

10
00:00:48.330 --> 00:00:51.180
That's all it means. If you've done nothing else in your code,

11
00:00:51.180 --> 00:00:52.030
you've done nothing more,

12
00:00:52.050 --> 00:00:54.760
you've still just written var name, var balance & var loggedIn. 

13
00:00:55.920 --> 00:01:02.460
And remember when it assigns this to memory, it is going to place an undefined value to each of those

14
00:01:02.460 --> 00:01:04.769
variables because we have not yet assigned a value.

15
00:01:06.690 --> 00:01:14.700
And this brings us to the final and most important step, and that is, assigning a value to a variable.

16
00:01:15.090 --> 00:01:18.510
We use the equals sign as an assignment operator.

17
00:01:18.960 --> 00:01:24.090
And that just means assign Wally Smart to the variable "name".

18
00:01:24.390 --> 00:01:25.350
That's all that that means.
(swoosh sound)

19
00:01:26.430 --> 00:01:31.800
Something I want to show you before we move on is this var keyword that we use to define a variable.

20
00:01:32.310 --> 00:01:33.420
This was the old school way.

21
00:01:33.840 --> 00:01:36.160
But I just want you to understand how it works.

22
00:01:37.530 --> 00:01:38.850
So let's just  open up the Console.

23
00:01:50.170 --> 00:01:57.250
And let's define, using the old school var way. So let's say var 

24
00:02:00.240 --> 00:02:03.840
user is Wally Smart.

25
00:02:06.780 --> 00:02:07.860
This is what's going to happen.

26
00:02:10.229 --> 00:02:17.010
We've now defined this user in the var variable. To call the user, we just have to type it and the computer,

27
00:02:17.250 --> 00:02:20.720
the parser, the browser knows that it's a variable.

28
00:02:20.730 --> 00:02:22.770
It knows the value is Wally Smart.

29
00:02:23.160 --> 00:02:25.320
But this is what's interesting.

30
00:02:25.950 --> 00:02:32.310
Every single variable that you use in your code has either local or global scope.

31
00:02:33.120 --> 00:02:34.950
And like I said, we're going to get into scope later.

32
00:02:34.950 --> 00:02:41.070
All that means is that if it's a global scope, it's visible absolutely everywhere and you can use

33
00:02:41.070 --> 00:02:42.810
that variable everywhere.

34
00:02:43.170 --> 00:02:48.300
If it's locally scoped, that means that you can only use it in limited situations.

35
00:02:49.480 --> 00:02:52.720
With the var keyword, which is what we've done here,

36
00:02:53.470 --> 00:02:59.410
if we're not defining it within a function, it is going to have automatically global scope.

37
00:02:59.860 --> 00:03:00.740
And let me show you this.

38
00:03:00.760 --> 00:03:01.540
This is what's cool.

39
00:03:02.080 --> 00:03:06.910
If we type the "window" object into our console and remember we went over the window object, we went over

40
00:03:06.910 --> 00:03:09.400
the BOM, in one of the previous lectures.

41
00:03:10.760 --> 00:03:11.750
If we open this up.

42
00:03:13.170 --> 00:03:15.150
I would expect us to be able to find user.

43
00:03:20.440 --> 00:03:21.250
And there it is.

44
00:03:22.120 --> 00:03:24.400
There's  our user that we've defined. Wally Smart. 

45
00:03:25.120 --> 00:03:27.670
What that means is that it's available globally.

46
00:03:27.670 --> 00:03:29.800
We can use that absolutely anywhere.

47
00:03:30.160 --> 00:03:34.420
We can even use it in a function and it'll know what it is. Let me show you. 

48
00:03:36.200 --> 00:03:40.390
Now, let's use it in a function, I'll show you that we've got access to this variable called user,

49
00:03:40.630 --> 00:03:41.140
anywhere.

50
00:03:43.470 --> 00:03:46.690
Let's just call the function 'test' for lack of a better word.

51
00:03:47.670 --> 00:03:50.100
And let's console.log user.

52
00:03:55.580 --> 00:04:01.850
Understand what it is we've just done here, we've used a variable user in function. But this function

53
00:04:01.850 --> 00:04:06.380
scope, it's never, we've never defined user, so where is it going to get it from?

54
00:04:06.410 --> 00:04:12.680
Well, it's going to get it from the global scope. And all we have to do is call the function and to

55
00:04:12.680 --> 00:04:13.460
call a function

56
00:04:13.580 --> 00:04:21.870
you just state the function name, which is test, and you have the brackets, and that just means execute.

57
00:04:22.670 --> 00:04:23.720
So let's execute it.

58
00:04:26.880 --> 00:04:27.780
And there you go.

59
00:04:28.110 --> 00:04:32.100
It console logs the user, which in this case is Wally Smart.

60
00:04:32.430 --> 00:04:33.390
Hope it's making sense.

61
00:04:34.170 --> 00:04:39.470
But let's move on to more important ways to declare variables, and that is with the "let" and "const"

62
00:04:39.480 --> 00:04:39.960
keyword.

