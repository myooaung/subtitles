WEBVTT
1
00:00:00.180 --> 00:00:05.760
Now we're going to go and create an object, and we're going to use those methods to convert the object

2
00:00:05.760 --> 00:00:10.710
into Ray like we saw previously, there's three different methods and then we're going to look through

3
00:00:10.710 --> 00:00:12.090
that array using the four of live.

4
00:00:12.330 --> 00:00:14.010
Let's see how it can be done.

5
00:00:14.310 --> 00:00:17.460
First step is let's create an object.

6
00:00:17.700 --> 00:00:21.420
And let's just say our object is a shopping list of fruit.

7
00:00:22.890 --> 00:00:25.260
So let's let our fruit.

8
00:00:27.200 --> 00:00:31.550
Be an object, and I'm just going to be using the object literal syntax for the sake of simplicity.

9
00:00:32.479 --> 00:00:35.630
It's say we've got 12 bananas.

10
00:00:39.340 --> 00:00:40.000
Two carrots.

11
00:00:43.160 --> 00:00:45.020
And seven mangoes.

12
00:00:46.870 --> 00:00:51.190
The console.log our food out there is object with bananas, carrots and mangoes.

13
00:00:51.790 --> 00:00:56.170
How do we start iterating and looking through this data?

14
00:00:56.740 --> 00:00:59.410
Well, the first ways by using object or keys.

15
00:01:01.590 --> 00:01:02.340
We said one.

16
00:01:03.930 --> 00:01:05.489
Object on keys.

17
00:01:06.610 --> 00:01:08.880
Let's define our keys.

18
00:01:09.240 --> 00:01:12.140
Let fruit keys equal.

19
00:01:12.730 --> 00:01:17.620
And now we've put a Java Scripts built in object this object.

20
00:01:21.270 --> 00:01:21.780
He's.

21
00:01:23.060 --> 00:01:27.200
And the parameter we pass into keys is an object fruit.

22
00:01:28.910 --> 00:01:31.910
And if we console.log this out, fruit keys.

23
00:01:33.000 --> 00:01:39.810
We have literally now got an array of our keys, banana, carrots and mangoes that it was so easy to

24
00:01:39.810 --> 00:01:41.790
do and it's awesome to work with.

25
00:01:42.180 --> 00:01:45.120
Let's now see the second method and that is object of values.

26
00:01:46.860 --> 00:01:49.950
So it's a to object failure.

27
00:01:52.160 --> 00:02:00.830
Let fruit values the object, we got to access this JavaScript built in object, and now we've got values

28
00:02:01.400 --> 00:02:05.240
and we pass in the fruit object once again.

29
00:02:05.510 --> 00:02:07.340
And if we console.log this out?

30
00:02:12.690 --> 00:02:14.130
We get the venues, Neal.

31
00:02:14.160 --> 00:02:21.060
This blows my mind how simple this actually is to extract data from objects and how you can see we've

32
00:02:21.060 --> 00:02:26.280
created an array in both instances in object or keys, an object of values.

33
00:02:26.730 --> 00:02:32.070
We've transformed our object fruits into arrays containing the daughter we're interested in.

34
00:02:33.150 --> 00:02:37.680
But now say you once had both the keys and the values.

35
00:02:38.250 --> 00:02:39.090
How do we do that?

36
00:02:39.870 --> 00:02:42.420
Well, that's we object entries comes into the picture.

37
00:02:42.570 --> 00:02:43.140
Let's have a look.

38
00:02:44.640 --> 00:02:45.630
Method three.

39
00:02:47.200 --> 00:02:48.610
Object entries.

40
00:02:49.680 --> 00:02:53.070
So now let's define fruit in trees.

41
00:02:54.090 --> 00:02:57.660
We again have to excise the JavaScript object.

42
00:02:58.740 --> 00:03:00.960
And here we've got entries.

43
00:03:02.420 --> 00:03:05.360
And we pass in the object fruit.

44
00:03:05.600 --> 00:03:06.890
And if we console the South.

45
00:03:09.030 --> 00:03:11.790
We get an array of arrays.

46
00:03:12.210 --> 00:03:18.280
Remember has said that the DOT entries is almost like an array of on arrays, and you can see why not.

47
00:03:18.360 --> 00:03:23.370
Because the overall array consists of smaller arrays of key value piece.

48
00:03:23.820 --> 00:03:24.540
Okay, cool.

49
00:03:24.550 --> 00:03:29.220
But now how do we iterate through this fruit entries and extract both values?

50
00:03:29.430 --> 00:03:30.130
Well, let's have a look.

51
00:03:30.270 --> 00:03:39.780
So if you use object dot entries, you probably want to extract the key value pairs.

52
00:03:41.950 --> 00:03:46.960
And let's do a full of you, full of loops are awesome.

53
00:03:47.830 --> 00:03:53.830
And if we just did this, if we just had fruit of fruit inches, what do you think would happen?

54
00:03:54.530 --> 00:03:57.790
We console log fruit.

55
00:04:00.340 --> 00:04:04.360
Well, that's right, if you guessed it, it's just going to console.log the array because it's going

56
00:04:04.360 --> 00:04:09.360
to take the first element of that overall bigger and console.log that, but what about us?

57
00:04:09.370 --> 00:04:10.130
We want to extract it.

58
00:04:10.150 --> 00:04:16.450
What about if we want to miss it saying you need to buy x bananas, you need to buy two carrots, how

59
00:04:16.450 --> 00:04:17.019
do we do that?

60
00:04:18.380 --> 00:04:18.890
OK.

61
00:04:19.459 --> 00:04:25.460
Well, what's really cool is full of it is this fruit you can split into an array of.

62
00:04:27.220 --> 00:04:30.590
Food, name and food.

63
00:04:30.610 --> 00:04:32.980
No, I mean, you can call whatever you want.

64
00:04:33.640 --> 00:04:34.840
So, yeah, I've just got food.

65
00:04:35.500 --> 00:04:35.940
You know what?

66
00:04:35.950 --> 00:04:37.540
Let me actually make it more intuitive for you.

67
00:04:37.600 --> 00:04:40.060
Food key sort of name.

68
00:04:40.060 --> 00:04:42.940
Let's say that's fruit key and there could be food value.

69
00:04:43.060 --> 00:04:45.340
So you know that the one's a key in the other one's a value.

70
00:04:45.490 --> 00:04:47.020
That's all there is to it.

71
00:04:47.050 --> 00:04:51.280
It's called easy, and now we should be able to console log.

72
00:04:52.610 --> 00:04:57.170
Let's use template literals and say you need to buy.

73
00:05:00.490 --> 00:05:02.020
Fruit venues.

74
00:05:05.860 --> 00:05:07.210
Fruit key.

75
00:05:10.050 --> 00:05:11.550
How cool is this?

76
00:05:11.760 --> 00:05:16.860
And it's console.log you need to buy Tolbert on as you're about to continue to buy seven mangoes.

77
00:05:16.890 --> 00:05:17.650
They have it.

78
00:05:18.390 --> 00:05:24.870
So this was a really in-depth example of taking an object, structuring it out by using object keys,

79
00:05:24.870 --> 00:05:30.420
object values, and we even use object entries to get both the keys and values out of that object.

80
00:05:30.750 --> 00:05:35.190
And then once you've got an array of values, it's so easy to loop through an array because the full

81
00:05:35.190 --> 00:05:39.570
of loot is just very intuitive and it works amazingly well with arrays.

82
00:05:40.790 --> 00:05:41.480
Let's continue.

