WEBVTT
1
00:00:03.320 --> 00:00:06.950
All objects have properties associated with that object.

2
00:00:08.520 --> 00:00:12.540
How do we access a property of the object these two ways?

3
00:00:13.170 --> 00:00:15.300
The ones by using the dot notation?

4
00:00:15.540 --> 00:00:20.850
And then you just state the property name after the Dutch and the other one is square brackets.

5
00:00:21.000 --> 00:00:23.280
And then you can write the property name in between it.

6
00:00:24.740 --> 00:00:25.640
Let me show you what I mean.

7
00:00:27.480 --> 00:00:29.010
Let's start accessing some properties.

8
00:00:34.970 --> 00:00:41.240
Remember how we said dot or square brackets, it's trite, so let's access the object in our case,

9
00:00:41.240 --> 00:00:44.120
it's like, let's say we want to access the make.

10
00:00:47.370 --> 00:00:49.200
And we just have to console.log it.

11
00:00:50.850 --> 00:00:51.570
So look.

12
00:00:55.310 --> 00:00:57.620
There you go is the name of the bike Yemen.

13
00:00:58.190 --> 00:01:00.620
What about using square bracket notation?

14
00:01:01.440 --> 00:01:07.820
It's console.log like open square brackets and its type in the property name, but said We want in color.

15
00:01:10.480 --> 00:01:12.100
Now you got those blue.

16
00:01:13.560 --> 00:01:14.310
What about a method?

17
00:01:14.820 --> 00:01:21.930
It's the same thing, it's execute the method by accessing by using the dot notation.

18
00:01:23.240 --> 00:01:26.900
We've called it sound and not to execute a method.

19
00:01:27.050 --> 00:01:30.350
And we're going to be getting into functions later on in the schools.

20
00:01:30.860 --> 00:01:33.500
But you have to follow it by parentheses.

21
00:01:34.940 --> 00:01:38.180
You go console logs from now.

22
00:01:38.180 --> 00:01:43.460
The other thing I didn't mention in the lecture is that we can use the dot and square notation not only

23
00:01:43.460 --> 00:01:49.580
to access properties and meters, but to also set new properties and to set new methods on the object.

24
00:01:50.150 --> 00:01:50.750
What am I mean?

25
00:01:50.810 --> 00:01:51.410
What is she?

26
00:01:52.110 --> 00:01:56.450
Six new properties on the object.

27
00:01:57.350 --> 00:01:59.240
We can now say bike.

28
00:01:59.390 --> 00:02:00.770
And what property do we want to add?

29
00:02:01.700 --> 00:02:08.630
Let's just say Typekit, and we want the type to display the type of fuel consumption, petrol or diesel

30
00:02:08.870 --> 00:02:11.330
that say this is petrol and let's do the same thing.

31
00:02:11.330 --> 00:02:13.250
But using bracket notation.

32
00:02:13.700 --> 00:02:15.620
And let's say this is the yeah.

33
00:02:18.370 --> 00:02:24.820
We have to close it in a strength, and it's a it's a 2019 model.

34
00:02:24.910 --> 00:02:29.290
We have literally now entered these properties to the black object.

35
00:02:29.830 --> 00:02:33.100
I prove that to you if we just console black art.

36
00:02:33.160 --> 00:02:37.870
You can see we've included Typekit and the Earth with this notation.

37
00:02:38.380 --> 00:02:43.090
And what about if we attach a property to an object, but we don't assign a value, we don't assign

38
00:02:43.090 --> 00:02:43.660
it to value?

39
00:02:44.260 --> 00:02:45.910
Well, in this case, it's not going to be null.

40
00:02:46.160 --> 00:02:47.500
It'll be undefined.

41
00:02:48.100 --> 00:02:49.060
You, me, show you what I mean.

42
00:02:49.090 --> 00:02:50.260
They'd said, we want to put.

43
00:02:51.700 --> 00:02:53.860
The model wanted this, but we leave it like this.

44
00:02:55.400 --> 00:02:58.040
We don't actually assign a value to model on a bike.

45
00:02:58.070 --> 00:03:03.350
What do you think's going to happen if I try and console this console.log bike model?

46
00:03:04.220 --> 00:03:04.850
They have it.

47
00:03:05.030 --> 00:03:06.680
It's undefined, it's not now.

48
00:03:07.340 --> 00:03:09.650
So these are some cool nuances with objects.

49
00:03:10.160 --> 00:03:15.470
But remember, on the previous Lake Charles has said that all objects have properties.

50
00:03:15.650 --> 00:03:19.100
Well, you get some very weird results on the back of this.

51
00:03:19.430 --> 00:03:20.780
Let me show you a few examples.

52
00:03:20.930 --> 00:03:22.040
So let's delete all of this.

53
00:03:23.730 --> 00:03:26.660
And I kind of feels weird because I write all this stuff and then just delete it.

54
00:03:26.700 --> 00:03:29.490
It's like digging a hole only to fill it up again.

55
00:03:29.880 --> 00:03:30.970
But anyway, we're learning.

56
00:03:31.390 --> 00:03:32.220
It's the price we pay.

57
00:03:33.210 --> 00:03:38.340
So let me give you a few examples of what I mean when I say all objects have properties and we can attach

58
00:03:38.340 --> 00:03:40.050
properties to any object.

59
00:03:40.740 --> 00:03:41.670
Let me say here.

60
00:03:42.250 --> 00:03:45.780
Uh, did you say you can edit properties?

61
00:03:47.250 --> 00:03:53.370
To just about anything in JavaScript, and let's just go with example one for final.

62
00:03:55.820 --> 00:04:00.950
This just creates an empty object left empty, be an empty object.

63
00:04:03.810 --> 00:04:08.310
Now, let's attach a property called a M.T.A.

64
00:04:11.210 --> 00:04:17.450
And if we console out empty, we can our property and just bear in mind, that ain't got a nothing until

65
00:04:17.450 --> 00:04:19.910
we assign a value high to their property.

66
00:04:20.300 --> 00:04:23.360
But this is an object and we know we can add properties to objects.

67
00:04:23.360 --> 00:04:25.100
What about if we create an array?

68
00:04:25.220 --> 00:04:27.290
So let's give you another example.

69
00:04:27.380 --> 00:04:29.060
Let's look at the example number two.

70
00:04:30.540 --> 00:04:31.650
It's comment all this at.

71
00:04:33.620 --> 00:04:39.970
Now, let's say we create an empty array, and again, we can put a property on you, empty loyalty

72
00:04:40.040 --> 00:04:40.700
equals.

73
00:04:41.660 --> 00:04:42.050
All right.

74
00:04:43.220 --> 00:04:46.850
And if we console.log that out, that's an array with a property high.

75
00:04:47.420 --> 00:04:51.560
But you've got to be careful with stuff like this because although it can add property to anything in

76
00:04:51.560 --> 00:04:54.530
JavaScript with just about anything doesn't mean we should.

77
00:04:55.040 --> 00:04:57.620
In this instance, it might mess up for loops.

78
00:04:57.800 --> 00:04:58.640
But it gets weirder.

79
00:04:59.090 --> 00:04:59.630
Look at this.

80
00:05:03.300 --> 00:05:04.500
The comment this up again.

81
00:05:05.860 --> 00:05:10.050
And this look at the third example, we can define a function called empty.

82
00:05:13.530 --> 00:05:14.070
Nothing in it.

83
00:05:15.510 --> 00:05:17.670
We can also take a property to that.

84
00:05:21.000 --> 00:05:26.910
And if we log it out, we get a function with the property, we'll say, well, let's make it high to

85
00:05:26.910 --> 00:05:28.260
be consistent with everything else.

86
00:05:28.650 --> 00:05:29.610
How weird is this?

87
00:05:29.640 --> 00:05:33.810
You can just put properties on anything in JavaScript, just about anything.

88
00:05:34.140 --> 00:05:34.800
It's continue.

