WEBVTT
1
00:00:00.210 --> 00:00:02.680
It feels like this policy will never end.

2
00:00:02.850 --> 00:00:03.990
Trust me, it won't.

3
00:00:04.170 --> 00:00:09.690
I'm sick of it, so we're going to make it in the United States and we have fully functional 44.

4
00:00:09.780 --> 00:00:12.240
So we've seen this refers to the global object.

5
00:00:12.240 --> 00:00:15.300
But how do we define what it is that we want it to be?

6
00:00:15.480 --> 00:00:20.250
Well, a simple solution to this is using the pull method.

7
00:00:20.700 --> 00:00:21.720
What is the core method?

8
00:00:21.750 --> 00:00:27.210
Well, again, it's inbuilt into JavaScript, and it just allows us to call the function, call the

9
00:00:27.210 --> 00:00:30.340
method and define what we want this to refer to.

10
00:00:30.600 --> 00:00:31.710
And that's what we want here.

11
00:00:31.770 --> 00:00:35.080
So let me just show you quickly what it is before we go and execute it again.

12
00:00:35.100 --> 00:00:38.880
Let's create a new snippet, and it's just cool this all sense.

13
00:00:40.340 --> 00:00:42.140
And then we show you what the school method does.

14
00:00:42.530 --> 00:00:44.870
Firstly, let's define a function called see.

15
00:00:50.570 --> 00:00:56.180
And if I if he knew to JavaScript, I don't know why, but often when you're doing taste code, you

16
00:00:56.180 --> 00:00:58.850
define few and you define bar.

17
00:00:59.000 --> 00:01:00.530
So you'll see a lot of that going around.

18
00:01:00.710 --> 00:01:05.450
So that's why I just decided to call it food is no special meaning or value behind that word.

19
00:01:05.540 --> 00:01:10.190
And all we want this function to do is we want this function to console log.

20
00:01:10.610 --> 00:01:10.970
This.

21
00:01:12.270 --> 00:01:14.930
And what do you think's going to happen when we execute food?

22
00:01:16.020 --> 00:01:20.730
Is this a function being called on a method or is this a regular function?

23
00:01:21.590 --> 00:01:26.030
But of course, this is a regular function, so the value of this should be the window object.

24
00:01:26.300 --> 00:01:28.010
And let's run this code.

25
00:01:29.000 --> 00:01:31.130
There you go, we can see it's the window object.

26
00:01:31.400 --> 00:01:36.020
And I want to show you how the cool method works and to do that, and it's just to find an object.

27
00:01:36.170 --> 00:01:39.260
It's a lit for equal, an empty object.

28
00:01:40.550 --> 00:01:45.470
Now, let's execute the food function again, but let's do it with the cool method.

29
00:01:45.710 --> 00:01:51.080
So we access the function, we access the natively built cool method.

30
00:01:52.100 --> 00:01:56.690
And the first argument is what we want this to refer to in this case, Bob.

31
00:01:56.780 --> 00:02:00.650
Now, if there were arguments in the food function, we could pass those along, have they not?

32
00:02:00.960 --> 00:02:02.360
So this is a very simple example.

33
00:02:02.730 --> 00:02:04.160
But now what do you think's going to happen?

34
00:02:04.310 --> 00:02:07.430
Well, it's clear counsel and its run al-Kurd.

35
00:02:07.910 --> 00:02:08.690
And there you go.

36
00:02:09.110 --> 00:02:14.660
It's not the window object anymore because we've told the engine when we use this that we wanting to

37
00:02:14.660 --> 00:02:17.090
refer to Bob in this case, the entire object.

38
00:02:17.120 --> 00:02:17.420
Cool.

39
00:02:17.450 --> 00:02:19.160
So that is exactly what the call makes.

40
00:02:19.160 --> 00:02:19.610
It does.

41
00:02:19.880 --> 00:02:23.930
If it's not implemented in our telephone to solve our problem.

42
00:02:24.560 --> 00:02:31.100
So the first thing we have to do is we have to allow for us putting in a second argument into the for

43
00:02:31.100 --> 00:02:32.060
each function call.

44
00:02:32.090 --> 00:02:36.940
You can see at the very top, we've defined that the two arguments are Caldbeck and an argument.

45
00:02:37.430 --> 00:02:41.750
Now, when we don't put in all this, it's just going to return undefined.

46
00:02:41.750 --> 00:02:43.920
It's going to treat that argument as undefined.

47
00:02:43.940 --> 00:02:45.740
And in this case, we've never used it anyway.

48
00:02:45.740 --> 00:02:46.820
So it hasn't really mattered.

49
00:02:47.210 --> 00:02:49.220
But now we actually going to be using it.

50
00:02:49.820 --> 00:02:54.980
So all this and now the next thing we have to do is just change our colbeck slightly because now we're

51
00:02:54.980 --> 00:02:57.280
not just wanting to execute the function directly, are we?

52
00:02:57.800 --> 00:03:00.740
We wanted to access it via the call method.

53
00:03:01.220 --> 00:03:05.930
And remember, the first argument is what we want this to refer to, and that's what we're going to

54
00:03:05.930 --> 00:03:07.040
pass into our call.

55
00:03:07.520 --> 00:03:08.450
Everything else can stay.

56
00:03:08.450 --> 00:03:09.700
The same calls us.

57
00:03:09.960 --> 00:03:15.350
And remember what I said if it's not defined, meaning if we don't pass in an argument, it's just going

58
00:03:15.350 --> 00:03:16.790
to result as undefined.

59
00:03:17.150 --> 00:03:22.010
And this in that instance, which is referred to the global object, which is what we want anyway.

60
00:03:22.130 --> 00:03:23.090
So it solves our problem.

61
00:03:23.240 --> 00:03:25.640
And to prove it to you, let's just make sure it's all working.

62
00:03:25.640 --> 00:03:29.000
It's just say here our console and run our code.

63
00:03:29.570 --> 00:03:30.630
We don't want break points.

64
00:03:30.650 --> 00:03:33.470
Let me remove the breakpoint continued to run our code.

65
00:03:34.510 --> 00:03:36.050
Sorry, I'll get this.

66
00:03:36.890 --> 00:03:39.650
It says here, and this is the nice thing about working in the console.

67
00:03:39.650 --> 00:03:42.170
We get all these errors thrown back at us and we know exactly how to fix it.

68
00:03:42.530 --> 00:03:48.080
Sorry, I put all this as a second argument, but this actually has to refer to something in this instance.

69
00:03:48.080 --> 00:03:51.650
We want our array to be this, not the global object.

70
00:03:51.650 --> 00:03:52.970
So I couldn't put all this.

71
00:03:53.150 --> 00:03:55.610
So let's just give the console again and try and run it.

72
00:03:57.090 --> 00:03:57.900
And then you go.

73
00:03:58.080 --> 00:04:05.100
This now refers to our array who have just blown your mind as much as mine.

74
00:04:05.430 --> 00:04:08.820
And to prove it to you if we remove, all right, we should get the global object again.

75
00:04:09.210 --> 00:04:10.380
So let's delete that.

76
00:04:10.390 --> 00:04:15.990
Not passing anything killer console here, the console and this just run the function and we get back

77
00:04:15.990 --> 00:04:16.880
to our window logic.

78
00:04:16.890 --> 00:04:22.680
We have just created our plentiful and I know this was a bit of a tangent to a bit of a sidestep.

79
00:04:23.310 --> 00:04:26.610
And I just thought, you know what, if you don't understand what the problem is, it's always going

80
00:04:26.610 --> 00:04:27.300
to frustrate you.

81
00:04:27.300 --> 00:04:30.060
So let me just spend a few lectures going over to hope you've enjoyed it.

82
00:04:30.540 --> 00:04:34.120
But let's get onto what this course is really, really about an upcoming.

83
00:04:34.530 --> 00:04:35.880
Hope you've enjoyed spinal section.

84
00:04:36.630 --> 00:04:37.260
It's continuing.

