1
00:00:00,120 --> 00:00:06,030
Welcome to the first lecture on functions, and as we kind of saw with the direction analogy I gave

2
00:00:06,030 --> 00:00:12,330
you, all the function is is a block of code that you can save and reuse later whenever you want.

3
00:00:13,050 --> 00:00:17,220
And as I mentioned previously, functions are the bread and butter of programming.

4
00:00:17,340 --> 00:00:22,590
You have to know how to deal with functions because you do not want to be duplicating code every time

5
00:00:22,590 --> 00:00:24,750
you want to perform a repetitive task.

6
00:00:25,620 --> 00:00:31,680
So what this means is that you write a function once and you can use it as many times in the future

7
00:00:32,070 --> 00:00:34,200
and just isn't a fly on the side.

8
00:00:34,560 --> 00:00:35,790
Remember semicolons?

9
00:00:35,790 --> 00:00:37,350
We did this in the syntax section.

10
00:00:37,650 --> 00:00:43,380
Generally, semicolons are used to separate executable JavaScript statements, but since the function

11
00:00:43,380 --> 00:00:45,150
is not an executable statement.

12
00:00:45,330 --> 00:00:47,940
And by that, I just mean, it's not automatically run.

13
00:00:48,360 --> 00:00:50,100
You have to actually call it to invoke.

14
00:00:50,100 --> 00:00:51,150
It will see that shortly.

15
00:00:51,840 --> 00:00:55,380
And because of this, it's not common to end functions with a semicolon.

16
00:00:55,630 --> 00:00:59,040
Although sometimes you'll even catch me doing it by mistake and other developers.

17
00:00:59,250 --> 00:01:04,200
So it's not the end of the world, but just bear in mind, you don't have to end a function with a semicolon.

18
00:01:04,530 --> 00:01:09,120
And as we just said, functions are not executed immediately.

19
00:01:09,600 --> 00:01:14,820
Yes, you do get if is immediately invoked function expressions, but we're not getting into that now.

20
00:01:15,330 --> 00:01:18,630
In general, functions are not executed immediately.

21
00:01:19,140 --> 00:01:20,670
So how does a function look?

22
00:01:20,670 --> 00:01:22,170
How do we write it down?

23
00:01:23,040 --> 00:01:27,030
Well, firstly, you need to tell JavaScript that you are creating a function.

24
00:01:27,690 --> 00:01:28,560
How do you do that?

25
00:01:28,950 --> 00:01:33,270
Well, the simple answer is that we just use the function keyword.

26
00:01:33,840 --> 00:01:37,530
Now, before I go further, there are a few ways you can create a function in JavaScript.

27
00:01:37,530 --> 00:01:38,370
We're going to look at them.

28
00:01:38,760 --> 00:01:43,440
But no matter which way you use or which have a message you use to create a function.

29
00:01:43,620 --> 00:01:46,950
These general concepts that I'm teaching you now will apply to each different method.

30
00:01:47,280 --> 00:01:52,230
So if you understand what I'm teaching you now, you can apply this to any method of creating a function

31
00:01:52,230 --> 00:01:53,970
and you'll pick it up that much quicker.

32
00:01:54,540 --> 00:01:58,860
So here we're just going to use a function declaration in order to declare function.

33
00:01:59,520 --> 00:02:01,320
We've got the function keyword great.

34
00:02:01,350 --> 00:02:04,800
So now JavaScript knows that we wanted to create a function.

35
00:02:05,960 --> 00:02:09,800
But you'll agree with me that we're probably going to want to create hundreds, if not thousands, of

36
00:02:09,800 --> 00:02:11,090
functions in our application.

37
00:02:11,540 --> 00:02:16,100
For example, you might want to create one function that greets your user when he enters your page.

38
00:02:16,250 --> 00:02:19,400
You might want to create another function that determines whether he's a member or not.

39
00:02:19,640 --> 00:02:24,320
You might want to create another function to determine whether he's deactivating his account or not.

40
00:02:24,320 --> 00:02:27,230
And if he does, you want to give him another message or an alert.

41
00:02:27,920 --> 00:02:32,570
These are different functions, and because of that, you need to distinguish between one function from

42
00:02:32,570 --> 00:02:32,880
another.

43
00:02:32,900 --> 00:02:38,150
You need to know which function to call which function you want to execute, and how do we do this?

44
00:02:38,690 --> 00:02:39,290
Well, that's right.

45
00:02:39,290 --> 00:02:43,670
We need to give our function a name so we know which function to execute when you need it.

46
00:02:44,510 --> 00:02:49,010
And this school, our function test, for argument's sake, now what's the next thing we need?

47
00:02:49,730 --> 00:02:53,990
Well, as you start developing, you'll want to be passing arguments to these functions.

48
00:02:54,800 --> 00:02:58,460
For example, what about if we wanted to give a welcome alert to our user?

49
00:02:58,790 --> 00:03:02,000
We don't want the alert to say high random user.

50
00:03:02,870 --> 00:03:06,200
We would want alert to say something like, Hi John, hi Wally.

51
00:03:06,650 --> 00:03:10,310
And what allows us to do that is we have to pass in arguments.

52
00:03:10,310 --> 00:03:16,790
We have to pass in variables and in order to pass in variables, you need to have parentheses.

53
00:03:17,540 --> 00:03:18,530
And that's it, guys.

54
00:03:18,530 --> 00:03:20,260
You have a function keyword.

55
00:03:20,870 --> 00:03:22,400
We're calling our function test.

56
00:03:22,550 --> 00:03:23,180
It's custom.

57
00:03:23,180 --> 00:03:24,380
We can call it whatever we want.

58
00:03:24,920 --> 00:03:30,890
And then you have to have the parentheses, but now say we want to pass in the user's name.

59
00:03:31,370 --> 00:03:33,470
So let's just put that in a variable called name.

60
00:03:34,160 --> 00:03:38,570
And yes, it goes in between the parentheses and what's the last thing we need to do?

61
00:03:38,900 --> 00:03:43,130
Well, if you just listed at this, then JavaScript wouldn't know what to do.

62
00:03:43,580 --> 00:03:43,910
Great.

63
00:03:43,910 --> 00:03:47,300
We've defined the function we've called a test, but what's it going to do?

64
00:03:48,080 --> 00:03:51,230
Well, at the moment it does nothing, and this is way too curly.

65
00:03:51,230 --> 00:03:54,530
Braces come into it and don't be confused with objects.

66
00:03:54,540 --> 00:03:55,580
This is not an object.

67
00:03:55,580 --> 00:04:01,400
When JavaScript sees that function keyword, it's going to know that those curly braces are just a place

68
00:04:01,400 --> 00:04:07,640
where we define our code, and in programming that place between the curly braces is just called a block.

69
00:04:07,910 --> 00:04:12,890
It's called a block of code, and that's where the meat and the heart of our JavaScript code will live.

70
00:04:13,490 --> 00:04:20,690
Continuing on with our example, let's just alert high name to the user and how are we're going to use

71
00:04:20,690 --> 00:04:23,130
tempted literals, which we've seen in the syntax section?

72
00:04:23,540 --> 00:04:24,170
And that's it.

73
00:04:24,320 --> 00:04:25,910
That is literally how you write a function.

74
00:04:26,210 --> 00:04:27,320
It's not that difficult, right?

75
00:04:27,650 --> 00:04:28,310
It's intuitive.

76
00:04:28,310 --> 00:04:28,910
It's easy.

77
00:04:29,120 --> 00:04:31,010
And best of all, it makes a lot of sense.

78
00:04:31,700 --> 00:04:34,700
But at this point in time, we've only defined a function.

79
00:04:35,120 --> 00:04:35,930
We haven't run it.

80
00:04:36,140 --> 00:04:36,890
We haven't called it.

81
00:04:37,310 --> 00:04:43,850
And in programming languages to run a function is known as invoking or calling that function.

82
00:04:44,360 --> 00:04:46,430
Again, don't get intimidated by these words.

83
00:04:46,490 --> 00:04:48,050
It's all invoking means.

84
00:04:48,560 --> 00:04:51,410
But let's jump in and see how we actually invoke this function.

85
00:04:52,100 --> 00:04:56,750
So as I mentioned, invoking a function just means running it or executing it.

86
00:04:57,530 --> 00:05:01,010
Let's look at our function again function test where we just alert.

87
00:05:01,070 --> 00:05:06,140
I need to remind you that test is just a custom name we gave to our function.

88
00:05:06,140 --> 00:05:07,430
We can call it whatever we want.

89
00:05:08,000 --> 00:05:09,530
And how do we run this function?

90
00:05:10,250 --> 00:05:12,620
Well, we take our name in this case test.

91
00:05:13,400 --> 00:05:17,300
All we do is we follow it by parentheses.

92
00:05:17,810 --> 00:05:19,220
It is that simple.

93
00:05:19,580 --> 00:05:23,390
You are not telling the JavaScript engine to go and run this function.

94
00:05:24,140 --> 00:05:24,690
But hang on.

95
00:05:24,710 --> 00:05:29,540
We did define that this function needs a variable code name, an argument code name.

96
00:05:29,840 --> 00:05:31,220
So let's do that.

97
00:05:31,340 --> 00:05:34,190
Let's just put in name, and that's it.

98
00:05:34,850 --> 00:05:37,100
That is all you do to invoke a function.

99
00:05:37,520 --> 00:05:37,940
Great.

100
00:05:37,970 --> 00:05:42,230
We've covered the theory, but now, as always, let's see some examples.

