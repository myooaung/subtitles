WEBVTT

00:00.480 --> 00:02.390
Welcome, guys and gals, to this lecture.

00:02.400 --> 00:07.080
In this lecture, we are going to learn about a very important concept deployment.

00:07.080 --> 00:12.780
So any enterprise implementation of Kubernetes uses deployment for sure.

00:13.140 --> 00:15.750
So, all right, let's jump into it and learn about it.

00:16.200 --> 00:18.270
So let's start from pods.

00:18.450 --> 00:24.240
So by this time, you guys and gals know like a pod can run a certain container image.

00:24.240 --> 00:32.160
So let's say you want to run a web server, so maybe you are running in Unix version 1.16 in a pod and

00:32.160 --> 00:39.810
to make it highly available, you spin up more pods within Gen X Version 1.16 and then you put all this

00:39.810 --> 00:47.790
pod in a replica set so that one of the pods, if it goes down the replica set will restore it and the

00:47.790 --> 00:49.890
system can achieve higher visibility.

00:50.070 --> 00:57.600
However, what if you want to deploy those engine X version 1.16 to 1.17?

00:57.600 --> 00:58.170
Right.

00:58.620 --> 01:01.140
So replica set cannot really help there.

01:01.410 --> 01:08.760
Replica set is just going to spin up a new pod if a pod goes down to keep it at the desired state.

01:08.760 --> 01:11.700
So that's where deployment comes into play.

01:12.030 --> 01:18.780
So you can think of deployment as another wrapper wrapping around replica set.

01:18.780 --> 01:26.340
So this is a higher level construct than replica set, like a pod wraps around the container and a replica

01:26.340 --> 01:29.100
set wraps around the group of pods.

01:29.100 --> 01:35.520
Similarly, a deployment of the deploy object wraps around a replica set.

01:35.700 --> 01:42.420
So deployment provides declarative updates for pods and replica sets.

01:42.540 --> 01:48.930
So you describe a desired state in a deployment file, and the deployment controller changes the actual

01:48.930 --> 01:52.920
state to the desired state at a controlled rate.

01:53.490 --> 02:00.180
And you can define deployments to create a new replica set or to remove existing deployments and adopt

02:00.180 --> 02:02.400
all their resources with new deployments.

02:03.180 --> 02:07.860
So let's take a look at this with an actual example, and things will become much more clear.

02:08.070 --> 02:08.410
Okay.

02:08.430 --> 02:12.090
So on the left we have the deployment manifest file.

02:12.630 --> 02:16.740
So let's start from the bottom because we want to start from the pod level.

02:16.950 --> 02:24.180
So you can see on the template we have the spec and the container image is engine x fashion 1.16.

02:24.570 --> 02:32.430
So what it's going to do, it is going to create a pod with a version of engine x 1.16 and it is going

02:32.430 --> 02:37.380
to put a label for this part of environment colon test, right?

02:37.380 --> 02:40.740
Because as you can see, the label here says environment, colon test.

02:41.490 --> 02:46.830
Why there are three copies of the pod is because this replicas is set to three.

02:47.130 --> 02:55.440
However, this replica is not only will create three copies of the pod, it will create another Kubernetes

02:55.440 --> 02:58.260
resource called Replica Set.

02:58.260 --> 02:58.500
Right?

02:58.500 --> 03:06.750
So you guys and gals already know this and this replica set, if you see the match labels says environment

03:06.750 --> 03:07.410
test.

03:07.800 --> 03:15.600
So basically this replica set is going to manage pods which has level environment, colon test.

03:15.600 --> 03:21.720
So you can set this replica set is managing these three pods because each of these pod has the label

03:21.720 --> 03:23.940
environment colon test.

03:23.970 --> 03:24.400
Okay.

03:24.420 --> 03:29.640
And now on the top level, we have this kind of deployment.

03:29.640 --> 03:39.810
So what that does is create the deployment object and how does it know that it should manage this replica

03:39.810 --> 03:42.960
set and this this pod?

03:42.990 --> 03:45.240
Well, this goes back to label.

03:45.240 --> 03:47.700
So label is super important.

03:47.700 --> 03:55.380
So you can see under deployment, the labels is environment test and under the template metadata for

03:55.380 --> 03:58.770
the containers, the labels is environment test.

03:58.770 --> 04:06.840
So if the labels match, then this deployment is going to manage this pod and this replica set will

04:06.840 --> 04:14.400
also have its own label and that would be environment colon test, which matches the level of deployment

04:14.400 --> 04:18.240
and that's how the deployment will manage this replica set.

04:19.140 --> 04:22.050
So this actually brings up an interesting point.

04:22.560 --> 04:28.950
So let's say you create a pod outside of this deployment manifest file, right?

04:29.220 --> 04:36.990
Maybe you just use a cube Ctrl command to create a pod with the label environment colon test.

04:36.990 --> 04:42.720
So actually this replica set and this deploy will start managing it.

04:42.720 --> 04:50.580
So let's say you create pods using just imperative cube commands, not through this manifest file,

04:50.580 --> 04:52.770
but just a single standalone command.

04:52.770 --> 04:59.640
Let's say you create a one pod with engine x 1.16 and label environment test.

05:00.000 --> 05:03.540
And then you apply this manifest file.

05:04.080 --> 05:12.390
What's going to happen is this manifest file is going to only deploy two of the pods because since you

05:13.110 --> 05:18.740
already created a pod with this level, this deployment will start managing it.

05:18.750 --> 05:23.850
And since the replica set has three, the desired state is always three.

05:24.210 --> 05:28.860
So this manifest file will just create the remaining of the pods to make it three.

05:29.340 --> 05:35.010
So this manifest file will create two pods, and the one part will be from your standalone command.

05:35.190 --> 05:39.510
So now we talked about how the manifest file works.

05:39.690 --> 05:45.720
So one thing we haven't seen so far in the manifest file is this section, this machine ready, second

05:45.720 --> 05:51.750
stand strategy rolling update, a max search max unavailable and type.

05:52.110 --> 05:53.910
So we're going to come back to that.

05:54.150 --> 05:55.860
Just hold off for a couple of minutes.

05:56.550 --> 05:56.890
Okay.

05:56.910 --> 06:00.960
So replica set restores pod, right?

06:00.960 --> 06:05.850
So this deployment will create a replica set and then it will have three pods.

06:06.060 --> 06:11.970
So even if one pod goes bad, it becomes unavailable or something.

06:12.150 --> 06:17.940
This replica set always has to keep three pods up and running, so this is going to create another pod

06:17.940 --> 06:20.280
and then remove this bad pod.

06:21.600 --> 06:29.010
So like replica set restores pod deployment restores replica set.

06:29.670 --> 06:35.670
So if you try to delete this replica set or this replica set goes bad.

06:36.800 --> 06:42.920
This will restore the replica set with the running parts super fast like.

06:42.920 --> 06:45.050
So we're going to see this in a demo.

06:45.410 --> 06:53.780
Let's say you try to delete this replica set and it will come back within a second.

06:53.930 --> 06:58.580
Okay, so now let's take a look at this section of the manifest file.

06:58.670 --> 07:06.230
So what it does is it defines how you can upgrade your parts.

07:06.800 --> 07:11.660
So let's say you are running in Gen X fashion 1.16, right, in this part.

07:11.900 --> 07:13.370
So I made a change.

07:13.640 --> 07:15.290
If you look at the image.

07:15.500 --> 07:20.870
So I upgraded from Gen X 1.16 to version 1.17.

07:21.110 --> 07:28.490
So this highlighted section defines how the parts will be upgraded.

07:29.060 --> 07:30.530
So let's let's take a look.

07:30.680 --> 07:36.950
So this max stage one defines how many parts it can go above.

07:36.950 --> 07:40.590
Define replicas during rolling update.

07:40.610 --> 07:43.970
So I know that sounds a little complex, but it will it will be clear.

07:43.970 --> 07:44.810
So let's take a look.

07:44.930 --> 07:48.720
So let's say you apply this manifest file.

07:48.740 --> 07:57.050
So what's going to happen is this deployment will create another replica set and it will start managing

07:57.050 --> 07:57.530
it.

07:57.530 --> 08:03.230
And then a new part will come up with engine X Version 1.17.

08:03.990 --> 08:08.220
So see, now there are four copies of the pod running.

08:08.790 --> 08:09.360
Why?

08:09.360 --> 08:11.250
There are four copies allowed.

08:11.280 --> 08:14.930
Because this Max Sarge says one.

08:14.940 --> 08:22.140
So basically there could be four copies of the pod and this new pod will come up with engine x fashion

08:22.140 --> 08:23.370
1.17.

08:23.400 --> 08:29.910
Now we have to remove one of the old pods, which is running in Gen X fashion 1.16.

08:29.910 --> 08:30.420
Right.

08:30.780 --> 08:40.350
However, this mean ready seconds ten means it's going to wait 10 seconds before it takes away an old

08:40.350 --> 08:40.990
pod.

08:41.010 --> 08:48.210
If the new pod is running fine within 10 seconds, then it's going to delete one of the old pod.

08:48.240 --> 08:52.260
Then another new pod will come in with engine x 1.17.

08:52.650 --> 08:55.080
And this is all under a new replica set.

08:55.080 --> 08:55.680
Right.

08:56.370 --> 09:01.040
And then after 10 seconds, another all part will go away.

09:01.050 --> 09:03.090
And then you've got the idea.

09:03.090 --> 09:05.370
Another engine x 1.17.

09:05.460 --> 09:10.980
A pod will come up and after 10 seconds, the last remaining old pod will go away.

09:10.980 --> 09:18.300
And then this new replica set will have these three pods and the original replica set will be empty.

09:18.570 --> 09:24.270
So at this point, you can actually go and delete this replica set and it will be deleted.

09:24.300 --> 09:29.910
However, if you try to delete this new replica set, which has three running pods, this deployment

09:29.910 --> 09:30.900
will restore it.

09:30.930 --> 09:37.020
However, for the original replica set, since it has no pods running that you'll be able to delete

09:37.020 --> 09:38.360
this original replica set.

09:38.370 --> 09:42.500
And the last remaining thing is this Max unavailable zero.

09:42.510 --> 09:44.490
So this is an optional field.

09:44.880 --> 09:51.690
So what it means is maximum number of unavailable pods from the desired state.

09:52.410 --> 09:53.460
So what do I mean?

09:53.970 --> 09:59.870
So desired state is there will be three replicas and the max unavailable is zero.

09:59.880 --> 10:07.260
So the update has to be done in such a way that there is at least three pods running.

10:07.680 --> 10:17.370
So if I put max on available as one, then what that means is maximum unavailable pods taken away from

10:17.370 --> 10:19.100
the desired state is one.

10:19.110 --> 10:25.140
So basically the deployment has to be done in such a way that there are two replicas of the pod always

10:25.140 --> 10:33.080
running y two because desire state is three max unavailable is one, so three minus one is two.

10:33.090 --> 10:36.300
And also we're going to see all of this in a demo.

10:36.600 --> 10:37.780
Pretty nifty stuff.

10:37.800 --> 10:38.280
All right.

10:38.280 --> 10:44.250
So now let's jump into a demo where we're going to see all this stuff in action.

10:44.520 --> 10:46.560
All right, guys and girls join me in the next lecture.
