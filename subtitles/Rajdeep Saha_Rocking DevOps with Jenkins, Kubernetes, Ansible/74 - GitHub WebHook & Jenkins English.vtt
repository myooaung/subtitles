WEBVTT

00:01.940 --> 00:04.190
What's the point of having GitHub?

00:04.220 --> 00:07.340
What is the real world use case for GitHub?

00:07.610 --> 00:13.940
At the end of the day, GitHub will have some sort of repository where the application code for your

00:13.940 --> 00:19.610
project will be stored and any time any code changes in that repository.

00:19.640 --> 00:26.570
Some sort of DevOps tool will pick up the changes and then deploy it in cloud and run your application.

00:26.600 --> 00:29.540
Now, how does that happen behind the scene?

00:29.570 --> 00:35.480
How does Jenkins know that something has been changed in your GitHub repository?

00:35.870 --> 00:44.060
So one approach is Jenkins can keep on invoking GitHub API every few seconds or every few minutes and

00:44.060 --> 00:47.120
check if anything is changed in your repository.

00:47.120 --> 00:53.500
And if something is changed indeed, then they can grab the changes and deploy the change into a OS.

00:53.930 --> 01:02.510
But this method is not efficient because most of the times this API will return stale data and GitHub

01:02.510 --> 01:07.250
server will be bombarded with this kind of API requests.

01:07.250 --> 01:14.390
And the applications such as Jenkins will exceed the API limits depending on how frequently they are

01:14.390 --> 01:15.740
calling this API.

01:15.770 --> 01:18.590
So to solve this, we use Webhook.

01:19.280 --> 01:20.870
What is a webhook?

01:20.900 --> 01:28.040
Instead of jenkins calling the API to the github multiple times in a periodic manner.

01:28.160 --> 01:37.010
GitHub will let Jenkins know when there is a change in the repository and you can determine what kind

01:37.010 --> 01:39.890
of changes will trigger this webhook.

01:39.890 --> 01:46.250
And once Jenkins gets notified, Jenkins job will run with the modified file and deploy the changes

01:46.250 --> 01:47.420
into NWS.

01:47.600 --> 01:52.670
So Webhook is a post call to your application such as Jenkins.

01:52.670 --> 01:58.910
If repository changes and you can determine what kind of changes will trigger this webhook.

01:58.940 --> 02:05.750
It is lightweight and real time, even though I showed just Jenkins in the previous slide.

02:05.750 --> 02:14.180
But you can integrate GitHub with multiple other applications beyond Jenkins such as Discord, Slack,

02:14.210 --> 02:19.070
NWS, code pipeline, and any and all DevOps tools.

02:19.100 --> 02:25.970
All right, so in the next demo, let's see how we can use this GitHub webhook to integrate with Jenkins.
