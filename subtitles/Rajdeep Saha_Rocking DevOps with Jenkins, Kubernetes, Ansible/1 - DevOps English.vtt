WEBVTT

00:00.120 --> 00:01.930
Let's start from the beginning.

00:01.950 --> 00:05.040
What is DevOps and why do we need it?

00:05.250 --> 00:12.030
In this lecture, we're going to take a look at evolution of modern applications and how does DevOps

00:12.030 --> 00:17.160
help there, as well as general practices and benefits of DevOps.

00:17.160 --> 00:23.250
Moreover, we are also going to take a look at some challenges of DevOps and how do you solve them?

00:23.310 --> 00:24.450
Let's get started.

00:24.960 --> 00:31.470
So in the olden days, most applications were running in Monolith, so you'll have different APIs coming

00:31.470 --> 00:38.100
to the API, gateway, a load balancer, and everything gets routed to the single large code base.

00:38.100 --> 00:42.810
The entry function will check the path and execute the logic accordingly.

00:43.200 --> 00:44.610
What was the challenge there?

00:44.620 --> 00:52.740
Since Monolith has this single huge code base, the underlying virtual machine or Amazon EC2 for us

00:52.770 --> 00:55.290
needs to be sizable in this case.

00:55.440 --> 00:57.390
Hm 512 x large.

00:57.840 --> 01:05.460
Even if traffic increases for one of the API or one component for the monolith, there is no way to

01:05.460 --> 01:06.740
scale that part.

01:06.750 --> 01:14.520
As a result, this huge virtual machine needs to go out of scale, and since the traffic only went up

01:14.520 --> 01:21.420
for one of the APIs, the utilization of both of these issues will be subpar and you'll end up paying

01:21.420 --> 01:21.870
more.

01:21.870 --> 01:27.810
Since everything is integrated into the single code base, it will be very difficult for you to work

01:27.810 --> 01:34.830
on a new feature and deliver it without impacting and testing all the other existing features.

01:34.830 --> 01:38.970
That's how the applications evolve to microservices.

01:39.300 --> 01:47.640
In microservices architecture, each API will have its own separate back end and depending on the traffic

01:47.640 --> 01:54.000
and nature of this APIs, you can choose different virtual machines on the back end when the traffic

01:54.000 --> 02:01.740
increases for one component, the backend for that microservice scales up without impacting the back

02:01.740 --> 02:03.420
end of other microservices.

02:03.900 --> 02:10.950
In addition, since everything is running in a separate microservice, it gets very easier to release

02:10.950 --> 02:11.970
new feature.

02:11.970 --> 02:17.220
You could even code different microservices in different programming languages.

02:17.220 --> 02:19.710
We call this feature polyglot.

02:19.740 --> 02:25.020
All right, so microservice is the way to go and the world is moving towards microservice.

02:25.320 --> 02:31.230
But what that means is microservices require frequent implementation.

02:31.680 --> 02:39.180
If you take a look at some of the large enterprises such as Amazon, Coca-Cola, Netflix, they deploy

02:39.180 --> 02:44.460
code every day, in some cases every 12 seconds.

02:44.460 --> 02:47.550
Can traditional deployment keep up with this?

02:47.550 --> 02:48.660
Let's take a look.

02:49.080 --> 02:57.120
With traditional deployment, you have separate teams for developer operations who is in charge of moving

02:57.120 --> 02:58.380
and deploying your code.

02:58.380 --> 03:02.130
So in this flow, the developer checks in the code.

03:02.400 --> 03:09.690
Then what's a little bit for someone to come and build the code, then wait a little bit more to deploy

03:09.690 --> 03:16.980
that code to a test environment where a little bit more for someone to test that code.

03:17.010 --> 03:18.450
You guessed it right.

03:18.450 --> 03:24.360
Wait even more for the operations team to deploy that code to production.

03:24.930 --> 03:31.170
This takes hours or days and a lot of grief for developers and operations.

03:31.170 --> 03:39.180
And in case of a production problem, the whole cycle is repeated and it takes longer to fix the issues.

03:39.180 --> 03:46.740
And in between these hours and days, I'm sure the developer and operation have conversations like this

03:46.740 --> 03:50.220
where a developer asks, When are you going to deploy my code?

03:50.220 --> 03:56.700
And the operation says, When you stop breaking my servers, the developer wants speed.

03:56.700 --> 04:04.230
But if you think from the operation perspective, the developer is deploying a gigantic monolith, probably

04:04.230 --> 04:10.320
after a month of not deploying anything, and that could very well break the servers.

04:10.320 --> 04:15.870
So at the end of the day, both the developer and the operation folks want to do cool stuff.

04:16.230 --> 04:18.990
That's how DevOps was born.

04:19.080 --> 04:25.260
The term DevOps is created by Patrick de Boer in 2009.

04:25.710 --> 04:33.150
DevOps is a combination of cultural philosophies, practices and tools that increases an organization's

04:33.150 --> 04:41.220
ability to deliver applications and services at high velocity, evolving and improving products at a

04:41.220 --> 04:47.490
faster pace than organizations using traditional software development and infrastructure management

04:47.490 --> 04:48.420
processes.

04:48.420 --> 04:55.860
Even though I mentioned cultural philosophies, practices and tools either for good or bad in the interview,

04:55.890 --> 04:59.760
job market is based on tools, so you will be asked more on the.

04:59.890 --> 05:06.160
Google's part under DevOps model development and operation teams are no longer siloed.

05:06.370 --> 05:13.870
Sometimes these two teams are merged into a single team where the engineers work across the entire application

05:13.870 --> 05:18.750
lifecycle, from development and test to deployment to operation.

05:18.760 --> 05:24.420
So going back to our traditional deployment model, how would this look like in DevOps world?

05:24.430 --> 05:29.980
Well, in DevOps world, both the developer and operations will be on the same team.

05:29.980 --> 05:31.600
That's the cultural part.

05:31.600 --> 05:38.410
And the technology and the tools part will be all these checkin code build code deployed to test test

05:38.410 --> 05:41.530
code deployed to prod will be automated.

05:41.530 --> 05:47.230
There will be minimum number of manual interventions as a result.

05:47.260 --> 05:55.690
Whole flow could be done in seconds and in case of errors it is easy to roll back because even the remediation

05:55.690 --> 05:56.770
is automated.

05:56.770 --> 05:59.950
You could even automate the monitoring part.

05:59.980 --> 06:07.840
You can monitor certain critical metrics and in case a metrics crosses a threshold, you can trigger

06:07.840 --> 06:11.010
a rollback to the previous version of the code.

06:11.020 --> 06:13.930
What are some of the general DevOps practices?

06:13.930 --> 06:21.610
The first principle is you need to automate everything, building your code to testing your code, deploying

06:21.610 --> 06:29.350
your code and as well as monitoring and remediation of your application, you should be deploying frequently

06:29.350 --> 06:32.980
rather than one mega deployment in months.

06:33.010 --> 06:41.230
You need to codify every step your infrastructure, application, testing, error handling, etc. And

06:41.230 --> 06:44.560
remember that Rome was not built in a day.

06:44.590 --> 06:47.200
This will take time and that's okay.

06:47.230 --> 06:49.990
It is not an all or nothing approach.

06:49.990 --> 06:57.460
There are organizations where most of the things are done in DevOps, but there are still manual steps

06:57.460 --> 06:58.690
and that's okay.

06:59.080 --> 06:59.650
All right.

06:59.650 --> 07:05.590
Now that you understand the evolution of modern architecture and how DevOps come into play, let's take

07:05.590 --> 07:07.570
a look at some of the DevOps benefits.
