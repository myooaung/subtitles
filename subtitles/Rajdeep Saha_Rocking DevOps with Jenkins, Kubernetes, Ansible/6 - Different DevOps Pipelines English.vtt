WEBVTT

00:02.420 --> 00:07.500
In the last lecture, we learned some of the DevOps tools for each of these DevOps phases.

00:07.520 --> 00:14.450
In this lecture, let's find out how you can use some of these tools to create real world DevOps workflows.

00:14.930 --> 00:20.870
The first workflow we want to look at is a very popular workflow where you have some sort of program

00:20.870 --> 00:25.460
and you want to deploy your program or application code to your environment.

00:25.850 --> 00:32.060
For this example, I'm using the programming language of Java, but the similar flow will be applicable

00:32.060 --> 00:33.800
for any other programming language.

00:33.800 --> 00:40.070
But some of the tools may change based on the programming language you use, and I will call that out.

00:40.870 --> 00:42.130
So let's start from the beginning.

00:42.130 --> 00:45.370
In the author phase, you the almighty developer.

00:45.400 --> 00:55.270
Using a IDE such as Visual Studio code created this Java program and then you check in that code to

00:55.270 --> 00:56.590
a GitHub repository.

00:57.360 --> 01:03.360
Now the most popular DevOps tool, Jenkins, is integrated with GitHub out of the box.

01:03.360 --> 01:05.970
So as soon as you check in your code.

01:06.000 --> 01:13.530
Jenkins gets a trigger and grab your code from the GitHub repository and then builds your code and creates

01:13.530 --> 01:14.730
this jar file.

01:14.760 --> 01:18.420
Then Jenkins run unit testing using J unit.

01:18.450 --> 01:21.050
Now for Java, you use G-Unit unit.

01:21.060 --> 01:26.400
Depending on the programming language, this unique testing framework will change in addition to creating

01:26.400 --> 01:27.450
this jar file.

01:27.480 --> 01:34.020
You can also save this jar file in a factory such as Jfrog or a code artifact.

01:34.640 --> 01:42.530
Then in the testing phase you can run load testing using aperture diameter and when everything is good,

01:42.530 --> 01:52.280
you can use Ansible script to grab the code from Jfrog R2 factory and deploy it into a VMs such as Amazon

01:52.280 --> 01:53.090
EC2.

01:53.780 --> 02:00.800
And finally, in the continuous monitor phase, you can use Cloud Watch to monitor the metrics for both

02:00.800 --> 02:05.480
Amazon EC2 as well as the metrics you create for your application.

02:05.480 --> 02:11.630
So you might be thinking where the heck is cloud formation or terraform in this workflow?

02:11.900 --> 02:17.570
So remember that cloud formation and TerraForm is infrastructure as code.

02:17.750 --> 02:26.060
In the previous example, you actually built and tested and deployed an application code into an ISA

02:26.060 --> 02:26.510
too.

02:27.140 --> 02:33.440
Now you can think of using cloud formation or TerraForm to provision that running.

02:33.440 --> 02:34.790
Easy to say.

02:34.790 --> 02:38.150
For example, you want to provision a WordPress server.

02:38.450 --> 02:42.020
So WordPress actually uses a lamp stack.

02:42.020 --> 02:47.600
So lamp stands for Linux, Apache, MySQL PHP.

02:48.080 --> 02:53.720
So under the hood you need to provision a couple of easy tos along with the MySQL database to run the

02:53.720 --> 02:54.770
WordPress server.

02:55.480 --> 03:02.860
So you can codify all that in your cloud formation or TerraForm and you can check those in into your

03:02.860 --> 03:04.000
GitHub repository.

03:04.210 --> 03:10.960
Similarly, your Jenkins job can get submitted automatically as soon as you checked in your templates,

03:11.380 --> 03:17.080
and that Jenkins job will run the cloud formation or TerraForm create the Amazon.

03:17.080 --> 03:21.370
Easy to bring that WordPress packages and start running it.

03:21.370 --> 03:27.190
But you might be thinking Raj, this WordPress application is an application.

03:27.190 --> 03:29.950
Don't I need to build it and test it?

03:29.980 --> 03:36.820
You would have if you have brought your own application, but WordPress actually gives you the entire

03:36.820 --> 03:40.270
package that you can just download into your C2.

03:40.300 --> 03:44.320
So this is a snippet of the WordPress cloud formation.

03:44.320 --> 03:52.510
As you could see, WordPress tells you that grab this zip file from this WordPress dot org website and

03:52.510 --> 03:55.750
you can copy it on your easy to using cloud formation.

03:55.750 --> 03:58.840
That's why no build or test is needed.

03:58.960 --> 04:03.670
Let's look at another popular example, which is provisioning your Kubernetes cluster.

04:04.000 --> 04:11.020
Now again, remember, provisioning Kubernetes cluster is different than deploying your application

04:11.020 --> 04:12.700
container into that cluster.

04:13.030 --> 04:18.040
Similarly to the previous example, you were going to check in the cloud formation or TerraForm, which

04:18.040 --> 04:25.180
is creating the Kubernetes cluster into a GitHub repository, and a Jenkins job will get submitted automatically

04:25.180 --> 04:29.530
execute the template and bring up your Kubernetes cluster.

04:29.710 --> 04:36.490
So Kubernetes cluster at the end of the day is a combination of control plan and ESI tools running as

04:36.500 --> 04:37.360
worker plan.

04:37.450 --> 04:42.850
And I'm not talking about forget because running easy tools at the worker node is still the most popular

04:42.850 --> 04:44.800
way to run Kubernetes clusters.

04:44.800 --> 04:50.560
So after you run this template, the Kubernetes cluster will be up and running with easy tools.

04:50.560 --> 04:51.040
All right.

04:51.040 --> 04:54.460
So at this point, we have our Kubernetes cluster up and running.

04:54.640 --> 04:59.890
Now, let's look at the workflow where you actually deploy your application to the Kubernetes cluster.

05:00.690 --> 05:03.240
So we are going to learn two different workflow.

05:03.270 --> 05:08.470
The first workflow we are going to learn is the traditional way of deploying to Kubernetes cluster.

05:08.490 --> 05:11.130
But then we are going to look at a newer workflow.

05:11.930 --> 05:18.440
So for this workflow, in the other phase, you write your application program such as Java.

05:18.560 --> 05:25.370
In addition to writing this program, you also need to write a Docker file which can contain arise your

05:25.370 --> 05:26.270
application.

05:26.720 --> 05:32.930
So you check in your application program along with this Docker file into the GitHub repository.

05:33.200 --> 05:40.100
The Jenkins job gets triggered, grabs the application program as well as the Docker file, and then

05:40.100 --> 05:44.330
it creates the container image with your jar file.

05:44.330 --> 05:51.320
Inside this Docker container image, like previously, you can use a unit to run unit testing.

05:51.590 --> 05:57.770
And in addition to creating this container image, you will save this container image into a container

05:57.770 --> 06:03.470
image registry such as Docker Hub or a native Amazon ACR.

06:03.740 --> 06:07.760
Then you can run some testing using aperture diameter.

06:07.790 --> 06:11.840
Again, unit diameter is related to Java.

06:11.840 --> 06:17.780
If you are using Python, you can use PI test, low cost, etc. And if you need to do penetration testing,

06:17.780 --> 06:19.580
you need to use different softwares.

06:19.940 --> 06:21.500
So look up some of the softwares.

06:21.500 --> 06:25.430
It changes based on the application program before your interview.

06:25.430 --> 06:32.270
Now to deploy this container image to the running x cluster, you need another artifact.

06:32.300 --> 06:34.430
We call this the manifest file.

06:34.430 --> 06:40.730
So this manifest file is a YAML file which kind of instructs where to get the container image from,

06:40.730 --> 06:47.510
how many copies of the container should run, etc. And the Kubernetes job that's running this deploy

06:47.510 --> 06:51.920
phase will have the permission to deploy to this running X cluster.

06:52.370 --> 06:59.320
And when this manifest file is run, generally using some sort of cube CTL command such as cube, it'll

06:59.330 --> 07:07.610
apply dash F the name of the manifest file that will grab the saved container image from ACR or Docker

07:07.610 --> 07:11.150
hub and deploy it into this running x cluster.

07:11.510 --> 07:17.540
So I know there is a lot going on here, but as you know, Kubernetes is a little complex and it is

07:17.540 --> 07:19.010
a code on its own.

07:19.340 --> 07:22.040
Now, this is the old way of doing things.

07:22.040 --> 07:25.790
The newest way to deploy to Kubernetes is Gitops.

07:25.790 --> 07:28.550
So let's take a quick sneak peek at that.

07:28.670 --> 07:35.870
So I wanted to show a snippet of this workflow because as you could see, this one does not follow the

07:35.870 --> 07:43.940
traditional model as in order to check, build, test, etc. Gitops is a relatively new concept.

07:43.940 --> 07:50.870
You can use different DevOps concepts such as Jenkins to build the container image update, the Kubernetes

07:50.870 --> 07:58.250
manifest file and the Gitops tool such as Argo CD Flux to deploy your application container to the Kubernetes

07:58.250 --> 07:58.790
cluster.

07:59.710 --> 08:06.250
Don't worry, we are going to go deep into this gitops flow along with doing hands on when we actually

08:06.250 --> 08:10.040
go over Kubernetes real world implementation with Gitops.

08:10.060 --> 08:16.900
But I just wanted to give you the idea that in real world projects, especially recent Kubernetes projects,

08:16.900 --> 08:24.850
you will use traditional DevOps components such as Jenkins, as well as brand new DevOps components

08:24.850 --> 08:29.020
such as Gitops to create these unique workflows.

08:29.290 --> 08:35.860
So at this point, we understood how different DevOps tools can be used for different DevOps phases

08:35.860 --> 08:39.220
and create these different DevOps workflows.

08:39.250 --> 08:44.560
And throughout the course, we are going to explore many different workflows as well as implement it.

08:44.830 --> 08:45.790
All right, folks.

08:45.820 --> 08:47.110
See you in the next lecture.
