WEBVTT

00:01.780 --> 00:08.200
All right, so let's set up this push webhook from our code repository to set up the webhook.

00:08.230 --> 00:12.190
You need to go to the Jenkins dashboard and copy the URL.

00:12.400 --> 00:18.760
Then go to your Kubernetes code repository, click settings, and then select Webhook.

00:18.790 --> 00:23.050
Click add webhook and then give the URL of the Jenkins.

00:23.140 --> 00:28.270
And then you have to add GitHub, dash, webhook, front slash at the end.

00:28.300 --> 00:29.500
This part is important.

00:29.500 --> 00:35.430
If you don't give the front class or this GitHub webhook, it is not going to work under content type,

00:35.440 --> 00:41.560
select application, slash JSON and then select just the push event, click, add webhook.

00:42.130 --> 00:48.100
And now you have to go back to the Jenkins job and tell that triggered that job any time it receives

00:48.100 --> 00:48.850
a webhook.

00:49.210 --> 00:52.340
So go to our build image Jenkins job.

00:52.360 --> 00:59.560
Click configure and then select GitHub hook trigger for Git ACM Pulling Click Save.

00:59.800 --> 01:01.930
All right, everything is set up now.

01:01.930 --> 01:03.330
It should be zero touch.

01:03.340 --> 01:06.760
So let's go to our application code and change something.

01:10.890 --> 01:15.630
I changed the halacha to please subscribe, like and comment on this video.

01:15.660 --> 01:16.440
Thank you.

01:16.800 --> 01:20.200
Let us go down and click Commit changes now.

01:20.220 --> 01:24.270
This should automatically trigger the build image using the webhook.

01:24.720 --> 01:25.530
There you go.

01:26.190 --> 01:27.790
This job got triggered.

01:27.810 --> 01:29.460
It built the image.

01:29.820 --> 01:31.260
Now it's pushing the image.

01:31.290 --> 01:33.540
Now it's triggering the object manifest.

01:33.690 --> 01:34.740
So let's go to the object.

01:34.830 --> 01:35.880
Manifest job.

01:35.910 --> 01:36.580
All right.

01:36.600 --> 01:38.370
This job also got triggered.

01:38.400 --> 01:40.410
All right, this job is complete.

01:40.890 --> 01:45.000
So if we go back to our Docker hub, refresh this.

01:46.750 --> 01:49.360
Now we have a new Docker image with the tag three.

01:49.390 --> 01:54.600
Number two is skipped because I tested with number two before recording this video.

01:54.610 --> 01:59.710
And if we go to the deployment file, this should have the new tag as well.

01:59.740 --> 02:00.510
Here you go.

02:00.520 --> 02:01.990
Test colon three.

02:02.410 --> 02:05.740
Now let's go back to our Argo CD.

02:05.770 --> 02:07.610
This should update as well.

02:07.630 --> 02:10.030
And by the way, you can have different views.

02:10.030 --> 02:14.560
You can have this Kubernetes object view or the network flow view.

02:14.590 --> 02:16.030
I prefer this view.

02:19.070 --> 02:19.460
All right.

02:19.490 --> 02:21.980
Our Argo City detected something changed.

02:22.010 --> 02:25.900
It's terminating the old parts and creating the new pods.

02:25.910 --> 02:33.170
So if I hover my mouse, you can see created the new pods with the tag three and it's terminating the

02:33.170 --> 02:35.390
old pods with tag one.

02:35.420 --> 02:37.700
If we go to our cubes, it'll terminal.

02:38.030 --> 02:40.460
If we run cubes, it'll get pods.

02:40.640 --> 02:44.690
You can see the older pods are terminating and new pods are coming up.

02:44.720 --> 02:46.950
Let's refresh the application page.

02:46.970 --> 02:48.410
Let's refresh this page.

02:49.130 --> 02:49.840
All right.

02:49.850 --> 02:55.730
As expected, the Kubernetes load balancer service is pointing to the updated Docker image with the

02:55.730 --> 02:56.780
updated code.
