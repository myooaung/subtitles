WEBVTT

00:00.120 --> 00:00.780
Welcome back.

00:00.810 --> 00:06.760
Guys and girls, in this video, we are going to compare cloud formation and terraform.

00:06.780 --> 00:08.130
Just a disclaimer.

00:08.550 --> 00:15.090
This is not a full blown TerraForm course, so I'm not going to go too deep into all the points.

00:15.090 --> 00:18.690
However, I did want to include TerraForm for two reasons.

00:18.690 --> 00:25.500
Number one, I wanted to show you guys and girls how a cloud agnostic infrastructure as code works.

00:25.530 --> 00:29.310
Number two, this could come up in interviews.

00:29.640 --> 00:34.530
So I wanted to have you guys a little bit of idea, like sometimes an interview.

00:34.530 --> 00:38.210
If you know the main points, then it helps you a lot.

00:38.220 --> 00:38.690
All right.

00:38.700 --> 00:42.510
With that being said, let's jump into the comparisons.

00:43.140 --> 00:48.960
So cloud formation is a service, so it only works to provision services.

00:49.260 --> 00:53.040
You cannot spin up other cloud providers.

00:53.040 --> 00:55.230
Infrastructure is in cloud formation.

00:55.800 --> 00:57.840
TerraForm is cloud agnostic.

00:58.380 --> 01:08.110
So as we saw, you can use the same template for GCP, Azure, etc. to spin up different infrastructures.

01:08.130 --> 01:13.780
Cloud formation is free and also the support of automation is included within it.

01:14.040 --> 01:17.940
Support TerraForm is open source.

01:18.570 --> 01:23.370
However, there is enterprise version which has some extra features.

01:23.790 --> 01:30.510
It costs some money and then it includes support, a cloud formation, a manager's state of the infrastructure

01:30.510 --> 01:31.770
using the stack.

01:32.130 --> 01:39.510
So if you want to change it outside of the stack, you have drift, detection, tent, set, all that

01:39.510 --> 01:40.140
stuff.

01:40.170 --> 01:44.880
TerraForm a state is stored in local disk by default.

01:45.240 --> 01:48.870
You can use a remote state if you want.

01:48.930 --> 01:51.470
You do have to tweak some stuff a bit though.

01:51.540 --> 01:58.620
Cloud formation can have wet conditions like you can put a wet step in there and it will wait to have

01:58.620 --> 02:00.660
some steps done or something.

02:00.810 --> 02:08.430
A terraform does not have wet conditions, cloud formation not possible to bring existing resources

02:08.430 --> 02:10.140
into existing stack.

02:10.140 --> 02:17.610
Like if you spun up some infrastructure using console and then you want to include it in some existing

02:17.610 --> 02:19.410
stack, that's not possible.

02:19.410 --> 02:23.610
However, terraform you can import existing resources.

02:24.270 --> 02:25.680
So being said that.

02:25.980 --> 02:31.410
So let me tell you guys and girls my personal opinion again this is my personal opinion.

02:31.680 --> 02:34.920
So you always have to consider your your use case.

02:34.920 --> 02:42.150
So between TerraForm and cloud formation, I actually prefer cloud formation because a terraform is

02:42.160 --> 02:46.440
will always play catch up to all the cloud formation announcements.

02:46.440 --> 02:53.340
Like if cloud formation comes out with a new feature and then TerraForm has to code the APIs and have

02:53.340 --> 02:54.750
to play a little bit of catch up.

02:54.750 --> 03:02.010
And also for most of the companies migrating to cloud like the developer community has so much to learn

03:02.010 --> 03:02.610
already.

03:02.610 --> 03:09.750
Like they have to learn like DevOps, they have to learn all the new stuff in NWC or any other cloud.

03:10.320 --> 03:18.390
So I feel like why put one more layer of learning if some company is migrating to us and they teach

03:18.390 --> 03:22.320
their developers cloud formation, that's that's good enough.

03:22.320 --> 03:27.420
Like why teach them terraform if they're not using multi cloud?

03:27.810 --> 03:36.180
And also I actually believe in using cloud native services because all the blog posts that come out

03:36.180 --> 03:43.110
from any cloud companies, not just NWS, they highlight the best practices and then they will give

03:43.110 --> 03:48.570
you a quick setup guide everything using their cloud native services.

03:48.810 --> 03:50.280
So for cloud formation.

03:50.700 --> 03:56.100
So for our course we did custom resources following a blog post and a couple other things here and there.

03:56.100 --> 03:56.580
Right.

03:56.580 --> 04:03.030
So it's easier for the developers like not only it helps them pass the certification exam because cloud

04:03.030 --> 04:06.660
formation is part of those certification exams.

04:06.660 --> 04:13.920
But it's also easier for them to look up existing solutions, talk to other companies and then implement

04:13.920 --> 04:15.930
those in their current projects.

04:16.230 --> 04:20.910
So another factor is so terraform is open source.

04:21.510 --> 04:28.770
So open source is good, but if you work in enterprise, you know, it's painful to use open source

04:29.040 --> 04:36.150
because any new changes that happens in that codebase, the security has to vet it out.

04:36.150 --> 04:36.420
Right.

04:36.840 --> 04:42.960
They have to make sure that no new vulnerabilities have been introduced with the changes in the open

04:42.960 --> 04:43.620
source.

04:43.980 --> 04:46.920
So that kind of adds an extra overhead.

04:46.920 --> 04:54.750
And then if you go to the paid route, so then you have to fork out some money anyway to get the enterprise

04:54.750 --> 04:55.440
support.

04:55.440 --> 04:59.850
So but anyway, again, to reiterate, these are all my personal.

04:59.910 --> 05:02.280
Opinions based on my experience.

05:02.490 --> 05:10.320
However, please consider your use case, your developer best, their knowledge and everything before

05:10.320 --> 05:11.190
you decide.

05:11.220 --> 05:12.300
All right, guys and girls.

05:12.450 --> 05:14.490
Hopefully this comparison was helpful.

05:14.520 --> 05:17.010
I'll see you guys and girls in the next video by.
