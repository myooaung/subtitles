WEBVTT

00:00.090 --> 00:06.450
Jenkins file is an important concept in Jenkins, both for real world projects and in interviews.

00:06.480 --> 00:11.580
In this lecture, we are going to learn what is it and why do we need Jenkins file?

00:11.760 --> 00:17.340
So let's say at this point you have mastered the Jenkins console with plug ins.

00:17.340 --> 00:22.800
If you need to create a job, you know how to search for the plugin, you install the plugin and new

00:22.800 --> 00:25.680
options appear in the Jenkins job console.

00:25.680 --> 00:29.040
You can select it appropriately and your job is done.

00:29.040 --> 00:34.200
But what if you need to create the same job in all your environments?

00:34.440 --> 00:39.150
Also, what if you need to change some of these jobs down the line?

00:39.750 --> 00:47.550
So not only you have to manually create the similar jobs in staging production uot it's also tedious

00:47.550 --> 00:52.080
to go in the console and then change what the job does down the line.

00:52.080 --> 00:54.120
So you are not happy at that part.

00:54.120 --> 00:56.160
That's a lot of manual work.

00:56.340 --> 00:59.040
That's why Jenkins file was born.

00:59.040 --> 01:07.680
Instead of you selecting options in the Jenkins console, you codify what your Jenkins job supposed

01:07.680 --> 01:08.310
to do.

01:08.550 --> 01:12.270
You can think of this as pipeline as code.

01:12.300 --> 01:15.720
This file is named as Jenkins file.

01:15.960 --> 01:23.490
When the Jenkins job is submitted, it simply grabs the Jenkins file from your GitHub repository and

01:23.490 --> 01:24.570
then runs.

01:24.570 --> 01:31.410
So to replicate this Jenkins job, you can either copy the Jenkins file in this repo and just push it

01:31.410 --> 01:38.010
to the different repo for staging and production, or you can point it to the same Jenkins file.

01:38.010 --> 01:40.320
So this is much more efficient.

01:40.320 --> 01:43.020
So let's go over the advantages.

01:43.640 --> 01:47.600
So Jenkins file is pipeline as code for Jenkins job.

01:47.840 --> 01:50.630
This is very similar to infrastructure's code.

01:51.170 --> 01:58.550
So instead of you provisioning infrastructure in console, you use TerraForm or cloud formation, which

01:58.550 --> 02:02.270
tells the cloud provider what infrastructure to provision.

02:02.300 --> 02:05.210
So Jenkins file is exactly like that.

02:05.420 --> 02:10.190
You tell when to run, what plug into use and how to run.

02:10.190 --> 02:17.510
And since at the end of the day, this is a codified file, you can review this like a code, so it

02:17.510 --> 02:20.470
makes it very easier to review your job.

02:20.480 --> 02:27.530
You can code this Jenkins file directly into the Jenkins job, but the best practice is to keep it in

02:27.530 --> 02:29.030
the git repository.

02:29.760 --> 02:33.120
So you can portion control the Jenkins file and rollback.

02:33.120 --> 02:40.560
If something goes wrong, you can audit trail who changed what and it becomes the single source of truth

02:40.560 --> 02:41.850
for the pipeline.

02:41.850 --> 02:48.570
And in case you are replicating the same Jenkins jobs in multiple environment, it reduces the human

02:48.570 --> 02:52.380
error because you are simply copying over the Jenkins file.

02:52.380 --> 02:55.240
That's why Jenkins file is so important.

02:55.260 --> 02:56.910
All right, folks, that's it for this one.

02:56.910 --> 02:58.800
I'll see you guys and girls in the next lecture.
