WEBVTT

00:00.150 --> 00:02.220
Welcome, boys and girls, to another junkies lecture.

00:02.220 --> 00:08.750
In this lecture we are going to learn what is Jenkins Multi Branch Pipeline as well as C++ in action.

00:08.760 --> 00:10.140
All right, let's get started.

00:10.290 --> 00:14.670
Sometimes your project git repository might have more than one branches.

00:14.880 --> 00:19.080
For example, you could have multiple teams working on your applications.

00:19.080 --> 00:19.860
Parallelly.

00:20.160 --> 00:24.400
Or you could have different environment on your git repository.

00:24.420 --> 00:30.180
For example, you could have four different branches main branch for production, staging for staging

00:30.180 --> 00:34.530
environment dev for development and sandbox for sandbox environment.

00:34.950 --> 00:43.050
What if any time a branch is created and changes are pushed to that branch, you want to trigger a separate

00:43.050 --> 00:50.400
Jenkins job, but instead of instrumenting different Jenkins job for different branches, you want to

00:50.400 --> 00:51.240
automate it.

00:51.480 --> 00:58.260
So basically at this point, instead of creating four different Jenkins job, you will create one Jenkins

00:58.260 --> 01:02.310
job, which will point to all the branches in this repository.

01:02.430 --> 01:09.900
And if a new branch gets created, let's say, for load testing, you don't need to go and create another

01:09.900 --> 01:10.680
Jenkins job.

01:10.680 --> 01:17.610
This multi branch Jenkins job will automatically discover the branch and start running only for that

01:17.610 --> 01:18.180
branch.

01:18.330 --> 01:24.480
So one thing that's needed in this setting is each branch should have its separate Jenkins file.

01:24.510 --> 01:29.160
So for example, in this case for Branch Main, we have this Jenkins file.

01:29.250 --> 01:34.890
These Jenkins files are just printing out the name of the branch, let's say in this case, echo main

01:34.890 --> 01:35.490
branch.

01:35.520 --> 01:42.960
So if I go to staging branch, it's saying echo staging branch for dev, it's saying echo dev branch.

01:42.960 --> 01:46.050
And for sandbox, it's saying echo sandbox branch.

01:46.170 --> 01:51.460
But as we see in any Jenkins file, you can code whatever you want in this separate Jenkins file.

01:51.480 --> 01:57.450
So for sandbox, you can spin up specific infrastructure, do some specific code testing.

01:57.450 --> 01:59.360
For Dev, you could do separate things.

01:59.370 --> 02:00.420
You got the idea.

02:00.600 --> 02:05.910
So now let's jump into Jenkins and try to create a multi branch pipeline job.

02:06.600 --> 02:09.420
Click New item give a name.

02:09.450 --> 02:12.750
We'll give the name multi branch test zero one.

02:12.870 --> 02:16.710
So generally we selected a freestyle or pipeline.

02:16.710 --> 02:21.210
So scroll down and here you will see multi branch pipeline.

02:21.210 --> 02:28.980
So click multi branch pipeline, click okay under branch sources select get.

02:29.900 --> 02:32.630
And here you have to give the project repository.

02:32.660 --> 02:38.120
Go back to the GitHub repository and then select the https URL.

02:38.150 --> 02:39.890
Go back to the Jenkins.

02:40.660 --> 02:41.680
Pasteur.

02:42.250 --> 02:45.270
This is a public repository, so we don't need credentials.

02:45.280 --> 02:51.820
So as you could see, this job will automatically discover the branches and it comes from the git plugin.

02:52.180 --> 02:58.570
You can also add additional discovery features such as discover tags, filter by name, etc..

02:59.050 --> 03:03.630
But for this demo I'm just going to keep this as discover branches.

03:03.640 --> 03:07.800
Now build configuration script path is Jenkins file.

03:07.810 --> 03:12.040
So basically it expects each branch to have a Jenkins file.

03:12.610 --> 03:14.110
Now this is the important part.

03:14.140 --> 03:17.050
Scan multi branch pipeline triggers.

03:17.050 --> 03:22.600
First time it will automatically discover the branches and run the Jenkins jobs for those different

03:22.600 --> 03:23.410
branches.

03:23.410 --> 03:28.180
But then you have to select this periodically, if not otherwise, run.

03:28.180 --> 03:34.240
So basically periodically it will go check if additional branches are created and run those.

03:35.080 --> 03:38.620
So for now, I'm just going to set it for 10 minutes.

03:39.620 --> 03:41.540
All right, scroll down.

03:41.570 --> 03:43.130
Click Save.

03:44.660 --> 03:47.640
So you could see it scanning the multi branch.

03:47.660 --> 03:55.010
It found those four branches branch main, branch, sandbox, branch staging and branch dev.

03:55.370 --> 03:59.870
Then it submitted this Jenkins job for all four branches.

03:59.870 --> 04:00.680
Parallelly.

04:00.680 --> 04:06.890
At the same time, you did not need to create four separate Jenkins jobs for each branch.

04:06.920 --> 04:11.830
So if I refresh the page, it ran the job for four different branches.

04:11.840 --> 04:17.960
So if you want to see the output, you can simply click this icon and then go to console output.

04:18.170 --> 04:19.120
Scroll down.

04:19.130 --> 04:21.080
It says Def Branch.

04:21.740 --> 04:25.300
Similarly, it's going to say the same thing for the other branches.

04:25.310 --> 04:29.720
If we go to main console output, scroll down.

04:30.710 --> 04:33.020
It is going to say main branch.

04:33.230 --> 04:36.560
You can also selectively run the job for separate branches.

04:36.560 --> 04:42.530
So for example, if you want to rebuild the job for the sandbox branch, you can just click build now

04:42.530 --> 04:46.520
and it will submit the job for the sandbox branch.

04:48.560 --> 04:50.780
And if I refresh this page.

04:51.500 --> 04:54.800
So I submitted it twice so you could see the last success.

04:54.800 --> 04:58.700
Number three, whereas other branch are still at number one.

04:59.300 --> 05:03.980
So, all right, so let's go back to the repository and create another branch.

05:04.430 --> 05:09.560
Let's say we want to create the branch integration testing from the main branch.

05:10.400 --> 05:13.430
We'll go to the Jenkins file and edit it.

05:14.410 --> 05:17.110
And here we will just put.

05:22.020 --> 05:24.750
All right, let's commit our changes directly.

05:25.110 --> 05:31.590
And then if we go back to the Jenkins job, remember, we set this up as every 10 minutes it's going

05:31.590 --> 05:32.760
to scan.

05:32.760 --> 05:37.710
Or you can scan the multi branch pipeline now and it will go and scan.

05:37.740 --> 05:42.690
One thing to remember is it will automatically detect what is the new branch.

05:42.900 --> 05:48.390
So when it submits for the next time it is only going to submit for the new branch unless something

05:48.390 --> 05:51.000
is changed in the existing branches.

05:51.150 --> 05:51.570
All right.

05:51.570 --> 05:56.640
So I'm going to pause the video and I would let the Jenkins job automatically discover the new branch

05:56.640 --> 05:58.080
and resubmit itself.

05:58.290 --> 05:58.830
All right.

05:58.830 --> 06:00.270
10 minutes have passed.

06:00.420 --> 06:02.010
Let's refresh this page.

06:02.230 --> 06:09.330
And like I said, the job ran only for the new branch integration, testing all the other branches that

06:09.330 --> 06:11.460
did not run because nothing was changed.

06:11.460 --> 06:14.550
And you could tell this by looking at the build number.

06:14.550 --> 06:17.940
Everything else said one one and we manually submitted the sandbox.

06:17.940 --> 06:18.900
So it's three.

06:18.960 --> 06:20.640
Staging is one.

06:20.970 --> 06:26.130
All right, folks, that's how you create and configure a multi branch pipeline.

06:26.190 --> 06:32.940
I wanted to give my input before I end this video, so I worked in a Real World DevOps project and I

06:32.940 --> 06:37.200
interact with a lot of customers where they are running a lot of DevOps pipeline.

06:37.770 --> 06:44.100
So in real world projects, traditional Jenkins pipeline job is used way more than this multi branch

06:44.100 --> 06:45.060
pipeline job.

06:45.570 --> 06:53.250
The reason is no one really keeps different branches under one repository for different environments

06:53.250 --> 06:56.430
because it makes access control very difficult.

06:56.460 --> 07:01.740
You want to have separate access control for your production repository than your DB repository than

07:01.740 --> 07:03.000
your test repository.

07:03.540 --> 07:09.030
Now keeping everything in one repository in multiple branches makes it a little more complicated.

07:09.420 --> 07:16.260
Similarly, on the flip side, the Jenkins job for different environments should have different access

07:16.260 --> 07:17.130
as well.

07:17.490 --> 07:25.170
So having one multi brand job for production test dev integration testing environment means it's way

07:25.170 --> 07:27.630
too much access for one Jenkins job.

07:27.930 --> 07:32.910
So it has the potential to mess up multiple environment if something goes wrong.

07:33.690 --> 07:39.240
But multi branch pipeline is useful if you are testing out something in that test environment and multiple

07:39.240 --> 07:45.720
people are working in different branches and immediately want to test out their changes automatically.

07:45.960 --> 07:49.920
Parallelly before the march, everything into one branch, then it comes in handy.

07:50.700 --> 07:54.870
All right, folks, now you know what is multi branch pipeline and how to use it?

07:54.870 --> 07:56.970
I'll see you guys and girls in the next lecture.
