WEBVTT

00:00.180 --> 00:00.870
At this point.

00:00.870 --> 00:04.860
We went through all the theory of Jenkins jobs and Jenkins file.

00:04.890 --> 00:07.810
Time to put all that theory into action.

00:07.830 --> 00:13.860
In this lecture, we are going to build a Docker container image and push that image to a container

00:13.860 --> 00:16.170
repository such as Docker hub.

00:16.200 --> 00:16.890
All right.

00:16.890 --> 00:17.970
Let's get started.

00:18.600 --> 00:24.030
Before we jump into Jenkins, it is very important to understand the high level flow of Docker build

00:24.030 --> 00:24.840
and push.

00:25.260 --> 00:31.980
So when you, the almighty developer, push your application code along with the Docker file in your

00:31.980 --> 00:39.630
GitHub repository, you need to first build the Docker container image by running this Docker file and

00:39.630 --> 00:42.980
you run this by running the command docker build.

00:42.990 --> 00:47.870
Once Docker build finishes, it creates the container image in the agent.

00:47.880 --> 00:52.560
So if you are running this command in AC two, it's going to create that container image within that

00:52.560 --> 00:53.310
easy too.

00:53.340 --> 00:59.490
At this point, you need to push this container image to a container repository such as Docker hub.

00:59.640 --> 01:06.180
You do that by running the command Docker push, and when you do that, your container image moves to

01:06.180 --> 01:11.340
the container image repository and from there it can be deployed to a Kubernetes cluster.

01:11.370 --> 01:18.570
Now, this Docker push command is not just really Docker push because you need to log in to your container

01:18.570 --> 01:19.500
repository.

01:19.890 --> 01:26.640
So under the hood you need to run Docker login to log in to your Docker hub account, then Docker push

01:26.640 --> 01:31.770
to push the container image and then Docker log out to log out from your repository.

01:32.010 --> 01:35.230
So that's what we are going to do with the Jenkins job.

01:35.250 --> 01:42.960
Let's jump into the Jenkins console and my GitHub repository to understand under the DevOps cause repository

01:42.960 --> 01:50.040
you will see this folder, push docker image, click this and then we have all the necessary artifacts.

01:50.520 --> 01:56.610
This real world project is useful in understanding not just how to build and push container image,

01:56.610 --> 02:01.130
but also how to work with a subfolder in your repository.

02:01.140 --> 02:06.990
Till this point, everything was under the main branch, under the main root folder DevOps course.

02:06.990 --> 02:08.970
But in this case we have a soft folder.

02:09.360 --> 02:14.580
So let's go over the application program and the Docker file and Jenkins file.

02:15.090 --> 02:17.700
The application program is super straightforward.

02:17.700 --> 02:23.250
It's importing the Flask library and then just returning dev hops rocks.

02:23.460 --> 02:27.630
The external dependencies are listed in requirements dot text.

02:27.630 --> 02:35.040
So whatever I put in requirements, dot text needs to be installed within the Docker container image.

02:35.040 --> 02:39.930
So in this case, I'm installing flask version 1.1.1.

02:39.930 --> 02:40.380
All right.

02:40.380 --> 02:42.330
Now let's take a look at the Docker file.

02:42.450 --> 02:49.680
The Docker file is grabbing the standard image of Python 3.8 Slim Buster, creating a slash app wide

02:49.680 --> 02:56.490
directory, copying over the requirements, the text and then running pip install to grab that requirements

02:56.490 --> 03:03.240
dot text packages in this case flask and then copying everything and then starting the container.

03:03.240 --> 03:08.760
Now let's go over the important part that Jenkins file to log in to Docker Hub.

03:08.760 --> 03:11.430
We need the Docker Hub credentials.

03:11.430 --> 03:17.400
The credentials are stored under Docker Hub ID in Jenkins credentials.

03:17.970 --> 03:23.910
So in this case, I'm defining an environment section and I'm saving the Docker hub user ID and password

03:23.910 --> 03:30.480
in this Docker hub underscore creds environment variable note that as soon as you do that, Jenkins

03:30.480 --> 03:38.190
is going to save the user ID inside Docker hub, underscore creds, underscore user or user and the

03:38.190 --> 03:45.600
password with Docker hub underscore creds, underscore p as W you don't need to define these two variables

03:45.600 --> 03:46.380
separately.

03:46.380 --> 03:48.060
Then we have a few stages.

03:48.060 --> 03:50.520
First, we want to clone the repository.

03:50.520 --> 03:52.290
So this part we already know.

03:52.470 --> 03:55.100
So we are just going to do check out sxm.

03:55.230 --> 04:01.350
When you set up your Jenkins job, you have to point the SM to the GitHub repository and whenever you

04:01.350 --> 04:06.390
do check out Sxm, it's going to clone that repository through the Jenkins agent.

04:06.780 --> 04:11.370
Alternatively, you can also give the URL of the repository here.

04:11.370 --> 04:16.590
It does the same thing and we are going to see that as an example in the other reusable projects.

04:17.010 --> 04:23.760
And then I'm just running the LZ Asterix command to show that everything is copied over and then I'm

04:23.760 --> 04:25.380
building the image.

04:25.380 --> 04:29.040
So this is where we need to run Docker, build command.

04:29.040 --> 04:36.390
So we are running S-H and then Docker build and Dusty is tagging the image.

04:37.050 --> 04:38.430
So there are two ways to do this.

04:38.430 --> 04:45.180
So the commented line shows if you want to use the tag latest, then you don't need to put this call

04:45.180 --> 04:47.010
on build number.

04:47.430 --> 04:52.770
But then using latest is not the best practice because you will keep overwriting the image.

04:52.950 --> 04:57.000
And if you do that by mistake, your production workload can suffer.

04:57.960 --> 04:59.940
So the best practice to use a unique tag.

05:00.260 --> 05:07.250
So every time this job runs, this built underscore number is a standard Jenkins provided environment

05:07.250 --> 05:07.930
variable.

05:07.940 --> 05:14.330
You do not need to define it in environment section, so it is going to tag the image with my Docker

05:14.330 --> 05:18.860
hub, user ID and the repository and then the build number.

05:18.860 --> 05:23.360
And this is another important part you have to specify where is the Docker file?

05:23.600 --> 05:26.780
In our case, the Docker file is not under route.

05:26.810 --> 05:29.960
It is under the folder push docker image.

05:29.960 --> 05:37.100
So you have to give dot slash push docker image, front slash and then you have to do Docker logging.

05:37.100 --> 05:38.690
There are two ways to do that.

05:39.110 --> 05:46.070
You can do Docker logging, then the user ID as the Docker hub creates underscore user password.

05:46.070 --> 05:49.340
Docker hub creates password, which is a straightforward way.

05:49.340 --> 05:55.970
But the problem with this is in certain cases this will leave the password visible in the console output

05:55.970 --> 05:59.150
and the logs of the jobs which you don't want to do.

05:59.150 --> 06:01.670
The best practice is to do it this way.

06:01.700 --> 06:08.870
You echo this Docker hub creates password, but it actually is not going to show in the console output.

06:09.170 --> 06:17.120
It is going to grab that password and put it in password dustbin and then you run the Docker login command

06:17.120 --> 06:21.110
with the user ID and then the password that it captured from the echo.

06:21.110 --> 06:23.500
And then comes the Docker Push Command.

06:23.510 --> 06:27.080
If you have used latest, you don't need to put the build number.

06:27.410 --> 06:30.380
I commented this again because this is not the best practice.

06:30.380 --> 06:37.760
You can simply run Docker Push and then the Docker hub, user ID and the repository, but instead we

06:37.760 --> 06:39.440
want to use a specific tag.

06:39.440 --> 06:45.230
So we are running Docker push user ID repository and then the tag.

06:45.590 --> 06:49.670
And once everything is done, it is a best practice to do log out.

06:49.670 --> 06:52.390
So I'm running a sage docker log out.

06:52.400 --> 06:58.580
One thing to keep in mind that let's say a Jenkins job fails in this stage.

06:59.210 --> 07:03.620
So basically the build image is successful, but it fails in the log in.

07:04.040 --> 07:11.960
You cannot restart from this stage y because the Docker push is using the build number.

07:12.320 --> 07:18.470
If you restart the job, it is going to get a new build number and it will try to push something that

07:18.470 --> 07:19.550
doesn't exist.

07:19.550 --> 07:24.620
So for this job, if something fails, you have to fix it and then restart from the top.

07:24.860 --> 07:25.340
All right.

07:25.340 --> 07:29.030
So now let's jump into the Jenkins and then do this in action.

07:29.030 --> 07:34.940
This job does require you to install Docker on your Jenkins agent as well as a couple of plugins.

07:34.940 --> 07:39.350
If you have followed all the videos in the setup section, you are all set.

07:39.350 --> 07:45.350
If not, take a look at the file in this folder and then follow those before you try running this job.

07:45.380 --> 07:48.860
So now let's jump into the Jenkins console and create our job.

07:48.980 --> 07:51.230
All right, let's click new item.

07:51.440 --> 07:55.700
I'm going to name this job as build push image zero one.

07:55.700 --> 07:58.670
You can give any name, select pipeline, click.

07:58.670 --> 08:00.980
Okay, scroll down.

08:00.980 --> 08:04.640
Now Pipeline script is coming from our GitHub repository.

08:04.640 --> 08:09.920
So Pipeline script from FCM under ICM Select Git.

08:09.920 --> 08:12.350
And here you have to give the repository URL.

08:12.350 --> 08:16.910
So I'm going to go back to my repository and then DevOps course.

08:17.660 --> 08:20.150
And then code copy the isotopes.

08:20.180 --> 08:23.360
Go back to Jenkins past the repository.

08:23.720 --> 08:27.500
This is a private repository, so you do have to give that credential.

08:28.430 --> 08:28.990
Okay.

08:29.000 --> 08:29.990
Here we go.

08:31.180 --> 08:35.440
The brand specifies the main branch is named main.

08:35.590 --> 08:37.390
And here is the important part.

08:37.450 --> 08:40.950
The script path points to the Jenkins file.

08:40.960 --> 08:48.190
In our case, the Jenkins file for this project is inside this Push Docker image.

08:48.910 --> 08:50.860
So you have to give the path here.

08:51.340 --> 08:54.280
So instead of just keeping it here, you have to give.

08:55.100 --> 08:57.770
Push doctor image.

08:57.770 --> 09:02.660
So basically the name of the folder and then slash Jenkins file.

09:02.930 --> 09:06.110
Click Save and let me show you my Docker hub.

09:09.130 --> 09:14.290
In Dakar hub Raja to Dakar ID is my user ID and Unsplash the name of the repository.

09:14.290 --> 09:15.610
So Jenkins test.

09:15.640 --> 09:18.340
If I go inside, it's empty.

09:19.060 --> 09:24.400
All right, so now let's go back to the Jenkins job and click Build now.

09:28.340 --> 09:28.940
All right.

09:28.940 --> 09:30.330
Everything ran successfully.

09:30.350 --> 09:31.940
Let's check out the output.

09:32.360 --> 09:34.640
I'm going to go to the console output.

09:34.940 --> 09:40.580
It cloned the repository on the first stage and then it's running the LS command.

09:40.580 --> 09:47.390
So it's showing all the files, the folder files inside the folder and then Docker build.

09:47.630 --> 09:52.760
So it's building the docker and you would see the build number is one because this is the first time

09:52.760 --> 09:56.720
I submitted this job and then it's doing the Docker logging.

09:56.720 --> 10:01.970
Logging succeeded and then we are pushing the Docker container image.

10:01.970 --> 10:04.580
It's showing all the layers of the Docker image.

10:04.610 --> 10:05.240
All right.

10:05.240 --> 10:06.620
It's pushed everything.

10:06.620 --> 10:08.390
Then it's running Docker log out.

10:08.390 --> 10:09.440
So success.

10:09.710 --> 10:13.880
So let's go to our Docker hub and refresh this page.

10:14.390 --> 10:15.170
All right.

10:15.170 --> 10:19.490
Our new container image is here and ready to be deployed.

10:20.180 --> 10:26.420
Now, again, this section is meant to be reusable parts, so I'm not going to show how to grab this

10:26.420 --> 10:33.170
container image and put it in a Kubernetes deployment file, yet that's covered under a real world project

10:33.170 --> 10:34.970
use case in another chapter.

10:35.120 --> 10:36.770
All right, folks, that's it for this one.

10:36.770 --> 10:38.690
I'll see you guys and girls in the next lecture.
