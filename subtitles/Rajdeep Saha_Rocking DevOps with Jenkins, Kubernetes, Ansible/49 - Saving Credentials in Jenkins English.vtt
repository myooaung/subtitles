WEBVTT

00:00.150 --> 00:05.160
A lot of the times your Jenkins job needs to interact with external systems.

00:05.160 --> 00:10.500
For example, your Jenkins job need to grab some code from your GitHub repository.

00:10.530 --> 00:17.160
Sometimes your Jenkins job needs to push a Docker container image to your Docker hub registry, etc.,

00:17.550 --> 00:22.050
and you connect with these external systems using some sort of credentials.

00:22.080 --> 00:28.020
In this lecture, we're going to learn how you can set up credentials in your Jenkins to connect to

00:28.020 --> 00:29.800
different external systems.

00:29.820 --> 00:30.690
All right.

00:30.690 --> 00:31.770
Let's get started.

00:32.160 --> 00:39.000
To set up credentials from your Jenkins console, click manage Jenkins, scroll down.

00:39.000 --> 00:46.290
And then under security, you should see manage credentials, click that and then you should see this

00:46.290 --> 00:49.440
section store's scoped to Jenkins.

00:49.440 --> 00:56.190
This global means whatever credential you are going to store here, all the Jenkins job can use it.

00:56.220 --> 01:02.970
You can use granular domains in case you only want the credentials to be used by certain Jenkins job.

01:03.000 --> 01:07.980
For this demo, we are going to use the global scope, which is the most common scope.

01:08.100 --> 01:13.590
So click this Jenkins and then click global credentials.

01:14.880 --> 01:17.280
And then add credentials.

01:17.610 --> 01:24.630
So for each of those systems such as GitHub, Docker, Hub and others, you need to add the user ID

01:24.630 --> 01:27.480
and password for the systems separately.

01:27.600 --> 01:35.310
And this ID field is an important field because this ID field is what you will use in your Jenkins file

01:35.310 --> 01:37.620
to access these credentials.

01:37.830 --> 01:42.210
So let's start with a very popular system, but little tricky one.

01:42.390 --> 01:43.380
GitHub.

01:43.470 --> 01:50.640
So for GitHub, actually, you don't use your GitHub login email and your GitHub password.

01:51.120 --> 01:56.350
So the user ID for GitHub will actually be your GitHub username.

01:56.370 --> 02:02.370
So I'm showing my GitHub repository page and under my name we have this Sahar Dash.

02:02.490 --> 02:05.740
Rajdeep So that is the GitHub username.

02:05.760 --> 02:13.380
Note that I log into GitHub using my email ID and I cannot use that email ID in Jenkins credential.

02:13.950 --> 02:20.880
Alternatively, you can go to any of your repository and the first part of the repository, for example,

02:20.880 --> 02:26.840
in this case, Sahar Das Rajdeep is the user ID that I need to use in my Jenkins.

02:26.850 --> 02:34.170
So I'm just going to copy this, go back to Jenkins and the username will be the Sahar Das.

02:34.200 --> 02:37.980
Rajdeep I'm going to go to the password in a second.

02:38.010 --> 02:44.970
This ID is the internal GitHub ID using which you can access this credentials.

02:44.970 --> 02:47.610
So I'm just going to name this ID as GitHub.

02:48.360 --> 02:53.990
Now again for the GitHub password, you cannot use your regular GitHub password.

02:54.000 --> 02:57.420
You need to generate a token to be used here.

02:57.930 --> 03:06.450
So to do that, go back to your GitHub from the top right, click this tiny arrow, then go to settings

03:06.450 --> 03:11.970
and then in the settings page, scroll down, click developer settings.

03:12.800 --> 03:16.340
And then click personal access tokens.

03:16.370 --> 03:20.790
Now click generate new token and here you can give a note.

03:20.810 --> 03:26.300
I'm just going to put GitHub with Jenkins job and you can specify an expiration date.

03:26.330 --> 03:28.180
By default, it is 30 days.

03:28.190 --> 03:31.310
You can also put no explanation for this demo.

03:31.310 --> 03:36.080
I'm just going to put seven days and then you have to select the scopes.

03:36.080 --> 03:42.320
So basically you could say this token should be allowed to do this, this, this for the Jenkins integration

03:42.320 --> 03:48.140
select repo and more importantly this admin colon repo underscore hook.

03:48.140 --> 03:52.200
So this will allow the GitHub to invoke a webhook to the Jenkins.

03:52.220 --> 03:57.820
More on that in a letter lecture and then notification that should be sufficient.

03:57.830 --> 03:58.880
Scroll down.

03:59.030 --> 04:01.280
Click Generate token.

04:02.080 --> 04:04.140
So make sure you copy this token.

04:04.150 --> 04:06.970
This will only be shown one time.

04:06.970 --> 04:08.560
You won't be able to see it again.

04:08.680 --> 04:13.180
So go back to the Jenkins and paste that token here.

04:13.540 --> 04:14.830
Scroll down, click.

04:14.830 --> 04:15.460
Okay.

04:15.940 --> 04:23.230
So for other systems like Docker Hub, you can directly use your Docker hub login, username and password.

04:23.260 --> 04:27.100
So I can go back to Jenkins click Add Credentials.

04:27.370 --> 04:31.180
So here I can directly use my Docker hub user ID and password.

04:31.480 --> 04:37.240
Remember this ID field is important, so whenever I want to push something to Docker Hub, I need to

04:37.240 --> 04:39.130
refer to this ID.

04:39.160 --> 04:45.730
So Jenkins will grab the credentials associated with this ID and use it to connect to Docker Hub.

04:45.760 --> 04:49.240
So I'm just going to give the name of this ID as Docker Hub click.

04:49.240 --> 04:49.750
Okay.

04:50.260 --> 04:51.010
All right.

04:51.010 --> 04:54.430
That is how you save credentials in Jenkins.

04:54.430 --> 04:59.620
In a couple of lectures, we are going to use this user ID and password to connect to these external

04:59.620 --> 05:00.340
systems.

05:00.790 --> 05:02.470
All right, folks, that's it for this one.

05:02.470 --> 05:04.780
I'll see you guys and girls in the next lecture by.
