WEBVTT

00:00.090 --> 00:04.080
Let's start our DevOps interview preparation with some basic questions.

00:04.110 --> 00:08.760
As I mentioned before, I'm going to go over the questions and then you should pause the video.

00:08.790 --> 00:12.360
Think of the answers and then go to the answer section.

00:12.360 --> 00:15.710
And for the answers, I'm not going to go through line by line.

00:15.720 --> 00:21.090
I'm just going to give you some pointers because whatever questions I am going over here, I already

00:21.090 --> 00:23.220
covered everything in my lectures.

00:23.340 --> 00:25.560
With that being said, let's get started.

00:27.390 --> 00:34.920
So some of the very common DevOps basic questions that you confess in your interview are What is DevOps?

00:35.040 --> 00:37.630
Mention some benefits of DevOps.

00:37.650 --> 00:41.130
How does DevOps help microservice based projects?

00:41.340 --> 00:44.160
What is the cultural change of DevOps?

00:44.190 --> 00:48.120
Can you explain DevOps phases or the DevOps flow?

00:48.540 --> 00:51.360
Can you name some tools for each phase?

00:51.450 --> 00:52.890
What is CI?

00:52.920 --> 00:54.420
What is KD?

00:54.780 --> 00:59.370
What is the difference between continuous delivery and continuous deployment?

00:59.520 --> 01:02.310
Name a tool to monitor Kubernetes.

01:02.400 --> 01:05.040
What is infrastructure as code?

01:05.220 --> 01:07.890
Name some benefits of ISC.

01:08.370 --> 01:11.580
What are the sequence of commands to run terraform?

01:11.730 --> 01:13.950
What is cloud formation?

01:14.040 --> 01:16.080
What is Jenkins?

01:17.490 --> 01:20.130
What are the types of Jenkin pipelines?

01:20.280 --> 01:22.720
What is the Jenkins Multi Branch pipeline?

01:22.740 --> 01:24.540
When would you use it?

01:24.930 --> 01:27.060
What are Jenkins plug ins?

01:27.090 --> 01:30.810
Name some of the plug ins you have used with Jenkins.

01:30.870 --> 01:33.210
What is Jenkins file?

01:33.240 --> 01:35.760
How do you set up a Jenkins job?

01:36.300 --> 01:39.360
What are parameters in Jenkins?

01:39.390 --> 01:41.610
What is a pipeline trigger?

01:41.640 --> 01:45.090
How do you clone a git repository for Jenkins?

01:45.120 --> 01:47.190
All right, so please pause the video.

01:47.220 --> 01:49.520
Go back to the previous slide if needed.

01:49.530 --> 01:53.070
Think about the answers and then unpause when you are ready.

01:53.400 --> 01:55.590
So the first question what is DevOps?

01:55.620 --> 01:56.850
Check out the DevOps.

01:56.850 --> 01:58.470
What and why lecture.

01:58.770 --> 02:04.910
You can skip the monolith to microservices part that I used to explain the evolution of modern application.

02:04.920 --> 02:06.780
You can directly jump that.

02:06.780 --> 02:09.360
Okay, DevOps automates everything end to end.

02:09.540 --> 02:12.570
It is both cultural as well as technical change.

02:12.570 --> 02:16.920
And then you can mention some benefits of DevOps as well as the general practices.

02:17.160 --> 02:20.550
So the second question tied to the first question mentions some benefits.

02:20.550 --> 02:24.780
So mentioned the benefits pretty straightforward and not much to mention here.

02:25.380 --> 02:29.310
And then how does DevOps help Microsoft's best projects?

02:29.640 --> 02:36.090
So here you can mention that almost all modern applications are done by microservices, and the benefit

02:36.090 --> 02:43.200
of microservice is since they are independent of each other, you can develop new features fast and

02:43.200 --> 02:45.210
you can deploy them frequently.

02:45.210 --> 02:51.090
And you could even mention to impress that some of the large enterprises like Amazon, Netflix, they

02:51.090 --> 02:58.050
deploy their microservices every few minutes and with traditional workflow that is not possible since

02:58.050 --> 03:02.490
with DevOps everything is automated end to end, including the testing.

03:02.490 --> 03:09.720
Using continuous deployment, microservices can be deployed into production without any manual intervention

03:09.720 --> 03:15.300
and you can also end the answer by saying at the end of the day, developers can focus on the business

03:15.300 --> 03:19.710
rather than fixing and maintaining and doing manual tedious tasks.

03:19.710 --> 03:24.390
So it reduces the time to market and helps the business grow.

03:24.690 --> 03:31.200
So every every company, when they interview you, they want to hear how they can grow their business.

03:31.350 --> 03:35.310
So that's a good way to end any answer related to benefits.

03:35.430 --> 03:39.000
Next question What is the cultural change of DevOps?

03:39.090 --> 03:41.380
DevOps brings in two different parts.

03:41.400 --> 03:42.240
One is technical.

03:42.250 --> 03:43.410
Another is cultural.

03:43.890 --> 03:46.890
So we talked about automating end to end different phases.

03:46.890 --> 03:48.550
So those are all technical stuff.

03:48.570 --> 03:56.250
The cultural change is prior to DevOps, the developer and operations used to be in different groups

03:56.250 --> 04:01.620
working in silos with DevOps, developer operation belong to the same team.

04:01.620 --> 04:03.720
Sometimes it is the same person.

04:04.230 --> 04:06.030
So that is the cultural change.

04:06.030 --> 04:13.590
And you can even mention that this actually increases collaboration, communication, professional satisfaction.

04:13.830 --> 04:16.680
Can you explain DevOps phases and flow?

04:16.680 --> 04:24.240
So please make sure you study that lecture where we go over DevOps phases, author, source, build,

04:24.240 --> 04:29.390
test, etc. Make sure you understand what does each phase do?

04:29.400 --> 04:33.540
And if you want to impress the interviewer, you go over the phases.

04:33.540 --> 04:40.860
And then you can say that I have personally implemented this using Kubernetes or EC2, and then you

04:40.860 --> 04:42.270
can explain the flow.

04:42.420 --> 04:47.640
So check out the DevOps workflow lecture and then pick one workflow and then explain it.

04:47.760 --> 04:50.040
Can you name some tools for each phase?

04:50.250 --> 04:57.150
We already covered this in the tools lecture, so have at least one or two tools ready for each phase.

04:57.780 --> 05:04.320
And whenever I get asked this name of the tool kind of questions, I always make it clear which tool

05:04.320 --> 05:06.000
I have personally used.

05:06.600 --> 05:11.880
So basically, let's say I get this question, I would say let's say for the build phase I have extensively

05:11.880 --> 05:12.900
used Jenkins.

05:12.900 --> 05:20.700
But beyond Jenkins, you can also use other tools available such as GitLab Code, build GitHub actions,

05:20.700 --> 05:25.980
etc. In this way, you protect yourself from getting questions you don't know.

05:26.100 --> 05:33.720
If you say for build, you can use git github actions, Jenkins, GitLab, etc. Then the interviewer

05:33.720 --> 05:38.010
might ask OC Can you tell me a couple of challenges with GitHub actions?

05:38.010 --> 05:44.250
And then you have to go and say, Oh, I actually have not used GitHub action, I have only used Jenkins.

05:44.250 --> 05:50.640
So I kind of make it clear which tools I have used so that it kind of streamlines the questions as well.

05:50.970 --> 05:51.810
What is CI?

05:51.840 --> 05:52.640
What is said?

05:52.680 --> 05:59.220
This question is super common almost in all interviews, so make sure you study that lecture.

05:59.220 --> 06:06.990
CI stands for continuous integration, c d stands for either continuous delivery or continuous deployment.

06:07.530 --> 06:11.370
So I'm not going to go through it here, but please, please, please watch that lecture.

06:11.370 --> 06:13.860
It is one of the most common interview questions.

06:14.100 --> 06:16.740
And on that note, I'll make sure you understand.

06:16.840 --> 06:20.470
The difference between continuous delivery and continuous deployment.

06:20.620 --> 06:23.170
Name a tool to monitor Kubernetes.

06:23.350 --> 06:25.570
So this is one of the most popular tools.

06:25.570 --> 06:29.950
So that's why I included this question, even though this is not a Kubernetes cause directly.

06:30.640 --> 06:36.370
So the way you monitor Kubernetes using Prometheus, Prometheus is the open source tool.

06:36.370 --> 06:40.810
And Prometheus just gathers the data in that time series format.

06:40.810 --> 06:47.140
And using Rafinha, you can create metrics on top of those Prometheus data.

06:47.380 --> 06:54.220
Another thing you can keep on your pocket if you are using it is you can also use cloud watch content

06:54.220 --> 06:55.080
or insights.

06:55.090 --> 06:58.990
So what is the advantage of Cloud Watch content or insights of our Prometheus class?

07:00.550 --> 07:05.980
So we cloud rich container insights already gives you some pre-made metrics.

07:05.980 --> 07:08.580
So with graph you have to go define metrics.

07:08.590 --> 07:13.240
Cloud watch container insights gives you the important metrics out of the box so you don't have to go

07:13.240 --> 07:14.260
create those.

07:14.290 --> 07:16.900
Also, cloud watch container metrics.

07:16.900 --> 07:26.230
Even if your system goal grows like crazy and all the metrics and all the data volume increases exponentially.

07:26.500 --> 07:32.470
Amazon going to scale the backend infrastructure of Cloud Watch, whereas if you are running Prometheus

07:32.470 --> 07:38.640
or Gryphon, you have to ensure that they are scaled if you are running your Prometheus server and graph

07:38.650 --> 07:39.340
on a server.

07:40.150 --> 07:45.670
Alternatively, you can use Amazon managed Prometheus, Amazon managed server.

07:45.820 --> 07:51.850
So Amazon manages their but again with the good thing is it gives you a lot of flexibility.

07:51.850 --> 07:57.850
You can import any metrics created by the community, you can even create metrics.

07:57.850 --> 08:02.830
But the disadvantage is you have to ensure those metrics are safe to use.

08:02.830 --> 08:07.570
There is no malicious code and you have to understand how to import metrics, all that stuff.

08:08.050 --> 08:13.900
So if you are going to interview where you expect a lot of Kubernetes questions and make sure that you

08:13.900 --> 08:20.020
study Prometheus, a next question What is infrastructure is called study that lecture.

08:20.260 --> 08:22.750
This is a basic building block of DevOps.

08:22.750 --> 08:30.610
And similarly, interviewer might try to confuse you by saying, Hey, name some benefits or What is

08:30.610 --> 08:31.450
ISC?

08:31.450 --> 08:35.470
So ISC is another way of saying infrastructure as code.

08:35.560 --> 08:43.090
And as I mentioned in the things to learn to get a DevOps job, you should learn at least one infrastructure

08:43.090 --> 08:46.870
as code in detail, either cloud formation or TerraForm.

08:46.960 --> 08:50.470
Next question What are the sequence of commands to run TerraForm?

08:50.470 --> 08:53.700
So check out the TerraForm video on the same note.

08:53.710 --> 08:54.910
What is cloud formation?

08:54.910 --> 08:56.860
Check out the hot formation lecture video.

08:56.890 --> 09:00.190
It will be very similar as what is infrastructure as code.

09:00.190 --> 09:06.370
And whenever someone asks you what is cloud formation, what is DevOps, it is a good idea to memorize

09:06.370 --> 09:07.660
the definition, right?

09:07.660 --> 09:10.210
So you can look up my lecture.

09:10.210 --> 09:16.240
So memorize the first couple of lines where I actually give the definition, or you can google the definition.

09:16.240 --> 09:20.710
What is cloud formation from actual NWS website or what is TerraForm?

09:20.710 --> 09:27.310
And just memorize that first line or first two lines and then you can explain in your own language.

09:27.940 --> 09:34.180
And personally, whenever someone asks me this kind of definition question, after I explain for a minute

09:34.180 --> 09:40.600
or 2 minutes, I always add the benefits like so that the interviewer knows that you are not just like

09:40.600 --> 09:43.330
a robot saying the definition.

09:43.330 --> 09:45.610
So if someone asks me What is cloud formation?

09:45.610 --> 09:50.890
I said, This is cloud formation, and then this is why cloud formation is so useful.

09:50.980 --> 09:56.230
And next, similarly, what is Jenkins give the definition of Jenkins explain a little bit of the use

09:56.230 --> 09:58.120
case as well as the benefits.

09:58.660 --> 10:01.240
What are the types of Jenkins pipelines?

10:01.420 --> 10:08.080
So her interviewer is asking about declarative and scripted pipelines, so make sure you study.

10:08.080 --> 10:09.580
What are those and the differences.

10:09.580 --> 10:11.440
I covered them in separate lectures.

10:11.440 --> 10:16.810
Also, you could be asked on the same line What are different types of Jenkins jobs?

10:16.810 --> 10:21.340
And sometimes folks mix those two things jobs and pipelines.

10:21.490 --> 10:28.120
So different types of Jenkins jobs will be like freestyle jobs, pipeline jobs, a multi branch pipeline.

10:28.570 --> 10:35.050
So make sure that after you answer if if they say what other types of Jenkins pipeline, you quickly

10:35.050 --> 10:41.800
set declarative and scripted pipeline and maybe you can add on depending on the interview that hey,

10:41.800 --> 10:49.000
even under the pipeline, there could be different flavors of pipeline such as regular pipeline, multi

10:49.000 --> 10:52.030
branch pipeline, you can even have freestyle job, etc..

10:52.780 --> 10:55.990
Next question, what is the Jenkins Multi Branch Pipeline?

10:55.990 --> 10:57.550
When would you use it?

10:57.880 --> 11:03.130
So again, I have a separate lecture on that study, that lecture to make sure you got that.

11:03.160 --> 11:04.540
What are Jenkins plug in?

11:04.540 --> 11:07.240
So this is one of the critical features of Jenkins.

11:07.540 --> 11:14.530
So make sure you study the definition again, say the definition, and then give a couple benefits and

11:14.530 --> 11:16.540
name some of the plugins you have used with.

11:16.610 --> 11:17.450
Jenkins.

11:17.780 --> 11:23.030
So have some of the plugin names already mentioned, some of the very, very popular plugins that's

11:23.030 --> 11:26.930
really helpful, such as Docker plugin, GitHub plugin.

11:27.440 --> 11:35.330
So one tactics is so I look up the job description like what other technology the company is using.

11:35.330 --> 11:39.950
So if you see the job description has a lot of stuff about Kubernetes.

11:39.950 --> 11:46.910
So you know, they will be very happy if they hear you have actually used a plugins related to Kubernetes.

11:46.910 --> 11:51.980
So mentioned like Docker plugin, Kubernetes plugin started up a little bit on those.

11:52.310 --> 11:58.730
And similarly, if you see that the job description has a lot of Ansible mentioned, then you could

11:58.730 --> 12:03.200
mention Ansible etc. but have some sort of plugin names ready.

12:03.620 --> 12:04.520
A next question.

12:04.520 --> 12:05.420
Very important one.

12:05.420 --> 12:06.950
What is Jenkins file?

12:07.280 --> 12:09.860
So I have a separate video, a bunch of videos on this.

12:09.860 --> 12:11.780
So please make sure you study that.

12:12.290 --> 12:14.600
How do you set up a Jenkins job?

12:14.780 --> 12:16.190
The interviewer is not looking for.

12:16.190 --> 12:18.800
Okay, you click new item create a job.

12:18.830 --> 12:20.450
INTERVIEWER is looking.

12:20.450 --> 12:22.340
How do you automate a Jenkins job?

12:22.340 --> 12:28.160
So you could say that you can set up a Jenkins job from the console by selecting build actions using

12:28.160 --> 12:32.720
different plugins, but the recommended way to do that is using Jenkins file.

12:33.020 --> 12:40.610
Jenkins file codifies whatever you're trying to do in your Jenkins job and you can put the Jenkins file

12:40.610 --> 12:47.030
in a repository and point the Jenkins job to the repository and you can trigger the Jenkins jobs based

12:47.030 --> 12:54.560
answer periodic time schedule or your GitHub repository can trigger the Jenkins job, and the Jenkins

12:54.560 --> 13:01.640
job will pull that Jenkins file, which serves as the pipeline as code, and then execute your job.

13:01.640 --> 13:03.920
And that's the proper way to do it.

13:04.400 --> 13:06.290
What are parameters study up?

13:06.290 --> 13:09.290
So I have separate lecture and bunch of workflows on this.

13:09.770 --> 13:11.390
What is a pipeline trigger?

13:11.390 --> 13:14.390
So study up different trigger mechanisms.

13:14.390 --> 13:21.200
But again, the what the interviewer is looking for is the polling versus the push mechanism.

13:21.410 --> 13:26.780
So the polling would be the Jenkins job every few minutes or a few seconds.

13:26.950 --> 13:30.650
It needs to pull the GitHub repository and see if there are any changes.

13:30.800 --> 13:32.360
So that is not recommended.

13:32.360 --> 13:34.430
So the ideal way is to use a webhook.

13:34.430 --> 13:41.780
So study up the how GitHub is webhook can push any notification and changes to the Jenkins job and Jenkins

13:41.780 --> 13:45.950
job will automatically get triggered any time that is a change.

13:46.070 --> 13:49.610
And then how do you clone a git repository via jenkins?

13:49.790 --> 13:54.260
So you do this using checkout sxm in Jenkins file.

13:54.260 --> 14:01.760
So Sxm is a special variable which instructs the checkout step to clone the git repository to the appropriate

14:01.760 --> 14:03.910
Jenkins agent archives.

14:04.400 --> 14:07.790
Those were some of the basic DevOps question and answer.

14:07.820 --> 14:10.800
Let's jump into the intermediate question answers.
