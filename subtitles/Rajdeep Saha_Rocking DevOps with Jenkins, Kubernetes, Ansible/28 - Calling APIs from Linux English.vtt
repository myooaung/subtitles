WEBVTT

00:00.150 --> 00:06.060
In this lecture, we are going to learn how can you call an API URL with Linux?

00:06.180 --> 00:07.230
Let's get started.

00:08.010 --> 00:16.470
So the basic networking commands in Linux is ping as a ping sends some packets to an IP or a domain

00:16.470 --> 00:18.990
and tells you whether it's working or not.

00:19.020 --> 00:26.010
So you can ping google.com and you could see it's just sending 32 bytes of packets and checking if it

00:26.010 --> 00:30.300
is receiving any reply and then it gives you a ping statistics.

00:30.540 --> 00:33.780
But the more real world use case is.

00:33.960 --> 00:38.820
Let's say you have an API endpoint and you want to call the API endpoint.

00:39.540 --> 00:45.630
So to do that, you use the curl command call stands for client URL.

00:45.630 --> 00:49.820
So you will run call and then the URL of the API.

00:49.830 --> 00:56.880
In this case, this is the URL of the API and it is going to give a status code to 100 is the okay status

00:56.880 --> 00:59.520
code and also the output content.

00:59.520 --> 01:07.590
Now instead of just directly calling curl, you can run curl using dash v or var both option.

01:07.590 --> 01:11.820
And this is going to give you a little bit more information and this is pretty straightforward.

01:11.820 --> 01:14.100
That's why it's not showing much information.

01:14.100 --> 01:19.620
But if there was something wrong with the network, then it is going to show a little bit more information

01:19.620 --> 01:20.580
with the verbals.

01:20.580 --> 01:26.160
So whenever you do a call and then a URL by default, it is a get call.

01:26.160 --> 01:32.970
But what if you're trying to call the post method of the API URL and with the post method you want to

01:32.970 --> 01:34.830
pass some input data.

01:34.830 --> 01:37.920
So generally you use Postman for this, right?

01:37.920 --> 01:43.560
So you have the URL on the top and in the body you are passing this JSON input.

01:43.560 --> 01:51.030
So this API you specify the operations operation is echo and whatever you pass in the payload, it simply

01:51.030 --> 01:51.960
returns it.

01:52.260 --> 01:59.430
So we are passing this payload, some key one colon, some one some key to colon, some value to and

01:59.430 --> 02:05.190
the API returns the same payload, some key one, some value one, some key to some value too.

02:05.640 --> 02:11.070
And also the JSON, you have to put the content type as application's last JSON.

02:12.040 --> 02:14.410
So how does it look like with the cattle command?

02:14.980 --> 02:21.610
So the cow command four post looks like this Karl dash x and then you have to put the method.

02:22.150 --> 02:27.040
Not that you did not need this forget method because that's what the default method is.

02:27.280 --> 02:35.980
As we put Karl X post and then dash D as in data and here you can just passed the JSON within double

02:35.980 --> 02:40.090
code, but the best way to do that is save the JSON in a file.

02:40.090 --> 02:42.730
So I name the file request dot json.

02:42.730 --> 02:46.480
So you will give does DX add the red name of the file?

02:46.510 --> 02:54.490
You also have to pass this field in the header dash h as in header content, dash type colon application

02:54.490 --> 02:57.070
slash JSON and then your URL.

02:57.280 --> 03:04.990
And as you could see in the request JSON, I'm passing the payload as name cloud with reg location USA

03:04.990 --> 03:07.870
and it is returning simply the same payload.

03:07.900 --> 03:12.580
All right, folks, that's how you call an API endpoint for different methods.

03:12.580 --> 03:13.660
That's it for this one.

03:13.660 --> 03:15.640
I'll see you guys and gals in the next lecture.
