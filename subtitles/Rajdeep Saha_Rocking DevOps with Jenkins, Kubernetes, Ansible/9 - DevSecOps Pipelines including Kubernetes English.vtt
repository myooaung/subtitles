WEBVTT

00:00.180 --> 00:06.090
At this point, we understood what is Devsecops as well as some of the fancy terms such as defence in

00:06.090 --> 00:07.920
depth and shift left.

00:08.130 --> 00:12.390
In this video, let's explore some of that Devsecops workflow.

00:13.530 --> 00:15.120
A couple of things to keep in mind.

00:15.150 --> 00:18.110
Tooling will change based on the application.

00:18.120 --> 00:24.950
For example, you need different tools to scan different codes for different languages, and container

00:24.960 --> 00:28.140
security is different than ESI two security.

00:28.140 --> 00:34.740
So if you are going for a container security related job, you need to study up Kubernetes security

00:34.740 --> 00:37.200
separate than this Devsecops lecture.

00:37.650 --> 00:44.550
Some of the popular workflows we are going to cover in this lecture are infrastructure as code workflow

00:44.610 --> 00:48.990
SC two applications workflow and Kubernetes Applications Workflow.

00:49.380 --> 00:53.370
We already know the cloud formation and TerraForm DevOps workflow.

00:53.400 --> 00:54.390
Let's take a look.

00:54.390 --> 00:57.630
How does this workflow look like with Devsecops?

00:58.220 --> 01:04.880
So always think about what are the components or areas which can be vulnerable to attacks.

01:05.600 --> 01:11.810
So in this case, your templates return in either cloud formation or TerraForm could have a security

01:11.810 --> 01:18.850
vulnerability such as your infrastructure as code might be using too permissive security group.

01:18.860 --> 01:23.210
Maybe you are spinning up a C and you are giving access to everyone.

01:23.210 --> 01:32.690
Maybe you are hard coding the S-H key material, etc. So in your DevOps toolchain from Jenkins you can

01:32.690 --> 01:34.190
scan the template.

01:34.580 --> 01:41.420
So a couple of sample tools are CFM, NAC, Trend Micro Cloud one, conformity NWS, Cloud Formation

01:41.420 --> 01:50.510
Guard, etc. So these tools will scan your template and find out any vulnerability if you are indeed

01:50.510 --> 01:52.000
provisioning an in-situ.

01:52.010 --> 01:59.000
So you have to use the army in your cloud formation or TerraForm template so you can invoke Amazon Inspector

01:59.000 --> 02:06.980
to scan the army to ensure it is conforming to your security standards and all these tools if an Amazon

02:06.980 --> 02:10.880
inspector, etc. can be invoked via shell commands.

02:11.270 --> 02:16.370
So at the end of the day, you can invoke these tools and then you can scan the findings.

02:16.370 --> 02:23.750
And if the findings find something vulnerable, you can halt the pipeline and send a notification to

02:23.750 --> 02:24.470
the user.

02:24.470 --> 02:29.840
And in the monitor phase you can use a config to monitor the resources.

02:29.840 --> 02:33.320
So if anything deviates, you can generate a lot.

02:33.350 --> 02:34.810
There are a bunch of tools here.

02:34.820 --> 02:41.810
You can use narcos to monitor, networking, etc. So let's talk about defense in depth.

02:41.960 --> 02:44.540
So this goes one level deeper.

02:44.540 --> 02:50.300
If you are using ESI to load balancer, you have to think about how are these issues exposed?

02:50.630 --> 02:57.310
So you need to use a private subnet for ESI tools, you need to use NWS, WAF, shield, etc. You need

02:57.350 --> 03:04.070
to ensure you have authentication authorization and note that the tools like KF and NAG comes with some

03:04.070 --> 03:09.830
predefined checks and you can always add additional checks on top.

03:09.860 --> 03:12.860
Now let's go to traditional ESI to workflow.

03:12.860 --> 03:18.620
So in this workflow, your application is running within easy to deploy it via Ansible.

03:18.620 --> 03:23.240
And we went through this pipeline in detail on our DevOps pipeline video.

03:23.240 --> 03:24.650
So check that lecture out.

03:24.650 --> 03:28.850
So here, what are the components that your application could be vulnerable to?

03:29.120 --> 03:32.000
So the first and foremost, the actual application code.

03:32.000 --> 03:38.390
So in the build phase before the code is compiled, you can run static code analysis and you can also

03:38.390 --> 03:42.350
check if you are using a secrets manager with appropriate CMS.

03:42.350 --> 03:50.360
Some of the super popular scanning tools for your code could be sonar, cube, GR audit, etc. Again,

03:50.360 --> 03:55.370
you can invoke all these using shell commands during the testing phase.

03:55.370 --> 04:01.910
You can run penetration testing or DDOS testing and then during the monitor phase, you need to run

04:01.910 --> 04:03.800
dynamic testing and analysis.

04:03.800 --> 04:10.400
So basically some process need to dynamically check in your code in case some packages are vulnerable

04:10.400 --> 04:12.470
or some configuration got changed.

04:12.860 --> 04:19.760
Sample tools for this could be Zap, Astra, Invicta, etc. And if you are running your code on ESI

04:19.760 --> 04:28.070
too, you can use RW config and cloud trail to monitor host configuration, any changes, etc. and create

04:28.070 --> 04:30.980
an alarm in case a deviation occurs.

04:30.980 --> 04:35.040
And for defense in depth, a lot of the stuff stays similar.

04:35.060 --> 04:43.280
Always think how is the application exposed and then add as many layers of defense as you can use private

04:43.280 --> 04:47.690
subnet swap shield or ten or zee, etc..

04:47.720 --> 04:51.770
All right, so let's move on to Kubernetes Gitops DevOps workflow.

04:51.770 --> 04:53.960
So some of the components stays the same.

04:53.960 --> 04:59.990
For example, in the build phase, you still need to do static or analysis on your application code.

05:00.530 --> 05:06.050
But with Kubernetes, the input to the build phase is your code as well as the Docker file.

05:06.470 --> 05:12.410
So you have to ensure that the root user is not running your Docker container.

05:12.410 --> 05:13.610
That's the default.

05:13.610 --> 05:19.820
You always should switch the user from root to an application user, and then there are tools to check

05:19.820 --> 05:25.430
that, such as Dako headland that you can invoke from your DevOps pipeline.

05:25.430 --> 05:33.740
Also with container image, you get your best image, so you always should run the ACR enhanced scan

05:33.740 --> 05:36.170
for code and operating system package.

05:36.650 --> 05:43.070
So ACL enhanced comes into play when you are saving your container image in Amazon Elastic Container

05:43.070 --> 05:43.790
Registry.

05:44.390 --> 05:53.030
But if you are using some third party registry such as Jfrog Docker Hub, you can use open source scanning

05:53.060 --> 05:54.890
tools such as Claire.

05:54.890 --> 06:02.000
And if you are running your containers on EC2 and if you are provisioning the Kubernetes cluster as

06:02.000 --> 06:04.850
well, then you need to scan the Kubernetes worker.

06:04.990 --> 06:07.330
Is it a mine with Amazon Inspector?

06:08.040 --> 06:14.970
And then for testing for critical events, you should run penetration testing and for monitoring.

06:14.970 --> 06:18.390
You should run dynamic scan on running containers.

06:18.690 --> 06:25.410
Some of the tools that help you do that is Prisma, Cloud, Snake, etc. You should run queue bench

06:25.410 --> 06:28.950
periodically for Kubernetes configuration scan.

06:29.220 --> 06:32.910
You should analyze Kubernetes control plan logs.

06:32.910 --> 06:39.150
You should automatically code on node and pods if necessary in case there is a vulnerability.

06:39.150 --> 06:45.090
Again, Kubernetes security is a huge area that could be a separate course on its own.

06:45.690 --> 06:51.450
But since Kubernetes is very popular, some of the other pointers in case you are going for a Kubernetes

06:51.450 --> 06:56.580
security job, always think of Kubernetes security on different components.

06:56.580 --> 07:03.330
So it starts with image security and then the infrastructure security or the host security where your

07:03.330 --> 07:04.710
containers are running.

07:05.010 --> 07:08.400
Then think about running port and runtime security.

07:08.520 --> 07:10.710
Think about network security.

07:10.710 --> 07:13.740
And then finally audit and forensics.

07:14.480 --> 07:17.930
So this is the link in case you are running Kubernetes on Amazon.

07:17.930 --> 07:22.490
In case as you check out this X Security Best Practices Guide.

07:22.490 --> 07:27.470
If you are running Kubernetes in other cloud, they have similar best practices.

07:27.470 --> 07:31.820
So check them out before going for the Kubernetes security interview.

07:31.850 --> 07:32.420
All right.

07:32.420 --> 07:33.590
That's it for this lecture.

07:33.590 --> 07:36.200
I'll see you guys and girls in the next lecture by.
