WEBVTT

00:00.120 --> 00:02.100
All right, so let's jump into DevOps.

00:02.100 --> 00:04.170
Advanced Interview Question Answers.

00:04.680 --> 00:07.730
What DevOps tool have you used extensively?

00:07.740 --> 00:10.470
Tell me some challenges you have first with it.

00:10.950 --> 00:14.540
How does Jenkins fit into a cloud computing environment?

00:14.550 --> 00:22.740
Explain with an example why use cloud formation when you can directly call APIs from Jenkins file to

00:22.740 --> 00:24.960
provisioning resources?

00:25.800 --> 00:29.610
How do you implement security in your DevOps pipeline?

00:30.120 --> 00:34.620
What is the advantage of using Docker engines instead of ESI two?

00:35.610 --> 00:40.050
How will you migrate a traditional organization to DevOps?

00:40.320 --> 00:41.970
All right, folks, pause the video.

00:42.000 --> 00:43.170
Think about the answers.

00:43.170 --> 00:45.690
And then on pause to check the answers.

00:45.780 --> 00:46.260
All right.

00:46.260 --> 00:50.100
Question number one What DevOps tool have you used extensively?

00:50.130 --> 00:52.350
Tell me some challenges that you have faced.

00:52.500 --> 00:58.200
So obviously, this is testing that you actually have some hands on experience and not just theoretical.

00:58.590 --> 01:04.230
Hopefully at this point, you went through all the Jenkins lecture and some of the critical workflows.

01:04.230 --> 01:07.920
So some of the challenges of Jenkins are the plugins.

01:07.920 --> 01:12.870
If you are using open source plugins, they could have security vulnerabilities as well as they could

01:12.870 --> 01:14.160
go out of date.

01:14.760 --> 01:21.720
So in that case, if you are relying heavily on a certain plugin, you could be facing some challenges

01:21.720 --> 01:22.200
there.

01:22.650 --> 01:26.010
Another big challenge of Jenkins is cost optimization.

01:26.100 --> 01:31.770
So if you are running Jenkins on is to even if there is nothing to build or test, Jenkins will keep

01:31.770 --> 01:33.240
running on easy too.

01:33.240 --> 01:35.790
And you'll be paying the full price of the EC2.

01:35.790 --> 01:42.630
And whenever you mention some challenges, always ensure you also mention the solution of the workaround

01:42.840 --> 01:47.520
that shows that you actually researched and solved the problem.

01:47.760 --> 01:52.080
No one likes when you just mentioned the problem because that's the easy part.

01:52.080 --> 01:59.040
So for the plugin, you could say that your team actually writes critical plugins in that way.

01:59.250 --> 02:04.800
They are secure and approved to be used and there is no risk for the cost optimization.

02:04.800 --> 02:11.040
You could say that initially your team was running on easy too, but recently you can run Jenkins on

02:11.700 --> 02:12.150
target.

02:12.150 --> 02:15.660
So far that is a much cost efficient and easy to it.

02:15.660 --> 02:18.280
Scales in more cost efficiently as well.

02:18.300 --> 02:19.560
There is a blog on this.

02:19.560 --> 02:23.790
I'm going to put the blog on the screen so you can go and study about it.

02:23.820 --> 02:28.710
Next question How does Jenkins fit into a cloud computing environment?

02:28.830 --> 02:36.570
Explain with an example, you could say that you can run Jenkins on any cloud as well as provisioned

02:36.570 --> 02:38.430
any cloud infrastructure.

02:38.550 --> 02:45.120
So you could give an example that Jenkins kept up with technological evolution in the beginning.

02:45.120 --> 02:52.350
Jenkins could only be run in virtual machines such as ESI, too, but now you can run Jenkins in Docker,

02:52.350 --> 02:56.880
container, Kubernetes, or even forget in a serverless way.

02:57.150 --> 03:03.720
And from within the Jenkins, you can provision any services or any other cloud services.

03:04.020 --> 03:06.420
So the Jenkins might be running on ESI too.

03:06.420 --> 03:11.970
And let's say you want to provision another easy to or you want to deploy some code on to AC to provisioning

03:11.970 --> 03:18.720
Kubernetes cluster, etc. You could do all that from Jenkins and then you can give a specific example

03:18.720 --> 03:20.220
of a Jenkins workflow.

03:20.250 --> 03:27.250
Maybe you could talk about the workflow or how you could use cloud formation from Jenkins to provisioning

03:27.300 --> 03:28.620
a resource.

03:28.650 --> 03:30.060
Next question.

03:30.090 --> 03:37.920
Why use confirmation when you can directly call APIs from Jenkins file to provisioning cloud resources?

03:38.640 --> 03:46.050
So just to elaborate, so when I say call it API, I mean, let's say you want to create a S3 bucket

03:46.050 --> 03:51.630
so you can invoke it as S3, create bucket or meg bucket.

03:51.900 --> 04:00.300
Similarly for Lambda, you can do it as lambda create function, etc. Instead of codifying it in cloud

04:00.300 --> 04:07.710
formation, you should always use cloud formation because in case something fails, it becomes very

04:07.710 --> 04:12.420
difficult to troubleshoot if you are using APIs directly.

04:12.450 --> 04:19.770
Also, cloud formation gives a bunch of additional features such as drift detection in case someone

04:19.770 --> 04:24.930
changes the resources without going through infrastructure called cloud formation.

04:24.930 --> 04:29.430
Can detect that and send alarms it can do change set.

04:29.580 --> 04:34.530
Let's say you already defined some ESI tools and then you are changing something.

04:34.530 --> 04:42.390
Maybe you are updating the easy to type or deleting something before actually implementing that change.

04:42.390 --> 04:47.040
Cloud formation can show you the impact of running this change.

04:47.040 --> 04:48.570
So we call it change set.

04:48.570 --> 04:53.760
It's going to show you that if you run this, these resources will be deleted, this resources will

04:53.760 --> 05:00.900
be created, this will be updated, etc. And this could be used to either go forward with the changes

05:00.900 --> 05:01.500
or not.

05:01.890 --> 05:05.850
All this functionality is not possible if you are using it APIs.

05:05.940 --> 05:13.560
Also, cloud formation enables you to replicate the infrastructure into other regions.

05:13.560 --> 05:19.230
So if you want to codify everything in an API, that becomes very tedious, number one.

05:19.230 --> 05:25.080
Number two, you cannot really put conditions and other ways to select certain things.

05:25.250 --> 05:26.720
Using a spice.

05:26.720 --> 05:31.910
But in cloud formation you could put logic like if the environment is dev.

05:31.940 --> 05:35.120
Use a smaller instance if it is a production.

05:35.150 --> 05:42.020
Use a bigger instance and you can take those and run into different accounts and replicate.

05:42.080 --> 05:44.180
Much more easier than using it.

05:44.480 --> 05:46.580
API is directly from Jenkins file.

05:46.970 --> 05:47.870
Next question.

05:47.870 --> 05:51.180
How do you implement security in your DevOps pipeline?

05:51.230 --> 05:57.060
So I have a separate lecture on Devsecops, so make sure you study that next question.

05:57.080 --> 06:00.950
What is the advantage of using docker engines instead of EC2?

06:00.980 --> 06:07.730
Again, I have a separate hands on lecture on this, but in high level, each workload can be dependent

06:07.730 --> 06:11.660
on different version of your python or underlying softwares.

06:12.080 --> 06:18.410
With EC2, you have to insure the EC2 has all those proper versioned packages.

06:18.890 --> 06:19.910
Docker Container.

06:19.910 --> 06:25.370
You define your environment and you run your application in Docker agents with the tools you need,

06:25.370 --> 06:27.590
so it makes it much more easier.

06:27.590 --> 06:33.110
So there is no challenge down the line that, hey, my test environment had this version of the Python

06:33.260 --> 06:39.740
production has this version, but I changed and tested everything in test and now it's failing in production

06:39.740 --> 06:41.140
because of different version.

06:41.150 --> 06:48.050
With Docker agent, you can specify the exact version that will be run in production, so that makes

06:48.050 --> 06:49.280
it much more easier.

06:49.490 --> 06:54.710
Next question How will you migrate a traditional organization to DevOps?

06:55.100 --> 07:00.740
If you are going for a DevOps engineer job, then you will probably not ask this question.

07:00.860 --> 07:07.790
But if you are going for a tech lead or going for a DevOps architect or team lead kind of position,

07:07.790 --> 07:13.730
then you will get this question because generally for DevOps engineer jobs, you will be asked more

07:13.730 --> 07:14.870
tactical questions.

07:15.170 --> 07:21.080
But this how do you migrate a traditional organization to DevOps kind of tests, your strategic thinking,

07:21.080 --> 07:26.570
whether can you go a little bit higher and move organizations to DevOps?

07:26.930 --> 07:33.080
These are the high level steps using which you can adopt DevOps in your organization.

07:33.620 --> 07:37.550
First stages, you have to select a proof of concept.

07:38.420 --> 07:44.120
So basically you should select an existing project that you will implement DevOps for.

07:44.840 --> 07:48.740
It's very important that it's not a do or die project.

07:49.010 --> 07:54.620
Like if you fail to implement DevOps on this project, it should not be that, okay, DevOps is bad.

07:54.620 --> 08:00.680
We are not going to adopt DevOps, so make sure not to select a critical project so that you can have

08:00.680 --> 08:06.820
breathing room for experiments but make sure it is representative of the actual workloads.

08:06.830 --> 08:13.910
Let's say you have a lot of Kubernetes, select a project which runs some low priority microservices.

08:13.910 --> 08:20.120
So if you are able to do this with that project, you can scale it to other critical microservices.

08:20.120 --> 08:22.910
Second thing is establish a center of excellence.

08:22.910 --> 08:28.100
So this could be done either through cloud center of Excellence or a separate DevOps center of excellence.

08:28.100 --> 08:35.750
So what this team will do is during the proof of concept, it will work with the application team and

08:35.750 --> 08:41.330
it will standardize tools and best practices because there are so many DevOps tools out there, it will

08:41.330 --> 08:44.510
be impossible for you if you keep on changing the tool.

08:44.810 --> 08:51.650
So this team will actually evaluate all those different DevOps tools and say, All right, for now we

08:51.650 --> 09:00.830
are standardizing on Jenkins Algo, KD, Ansible, etc. and they will also create examples with best

09:00.830 --> 09:01.730
practices.

09:01.820 --> 09:06.230
So let's say you are deploying a microservice into Kubernetes.

09:06.230 --> 09:11.240
This team, along with this proof of concept development team, create the pipeline.

09:11.240 --> 09:17.990
They will generate the Jenkins file and the other artifacts, and it will put it in a sharable repository

09:18.290 --> 09:23.000
so that any other teams can grab it and then run with it.

09:23.070 --> 09:30.800
Next thing is you need to scale your learnings whenever you need to migrate folks to DevOps or Cloud.

09:30.800 --> 09:34.340
So this is relevant for cloud migration as well.

09:34.340 --> 09:38.810
There are always three main components people process and technology.

09:39.050 --> 09:45.860
So process and technology is easier because they are well defined people is the hard part because you

09:45.860 --> 09:47.420
will face resistance.

09:47.420 --> 09:54.170
Some folks will say, Oh, this center of excellence chose Jenkins, but GitHub actions is better,

09:54.170 --> 09:54.410
right?

09:54.410 --> 09:56.720
So there will always be resistance.

09:56.750 --> 10:02.540
Only way to reduce the resistance, you have to educate people and give examples.

10:03.140 --> 10:06.380
What are some of the examples of process and technology?

10:06.380 --> 10:08.450
Because people is pretty self-evident.

10:08.930 --> 10:15.470
So some of the process you need to define is cost control, incident management, securing workload,

10:15.470 --> 10:17.780
etc. For your organization.

10:17.780 --> 10:25.160
You need to identify the critical processes and then you have to define or give example of process.

10:25.250 --> 10:26.630
As he was in technology.

10:26.720 --> 10:33.440
So you have to show how can you use infrastructure as code, as part of incident management so that

10:33.440 --> 10:34.680
there is no human error?

10:34.700 --> 10:37.130
How will you use ICD?

10:37.160 --> 10:42.770
How will you use content orchestration such as Kubernetes, with DevOps, etc.?

10:42.770 --> 10:44.250
And it is a good idea.

10:44.270 --> 10:45.220
I did this.

10:45.230 --> 10:49.730
It's better if a application team comes and talks to other application teams.

10:49.760 --> 10:55.670
I was part of the Cloud Center of Excellence and generally if it's just me going and talking to all

10:55.670 --> 10:59.780
the application teams, they kind of see this as like a ballsy move.

11:00.140 --> 11:06.380
What I did was after I moved one of the proof of concept projects, working with actual application

11:06.380 --> 11:09.740
to production, I will bring that team with me.

11:09.750 --> 11:15.680
I will I will do like some town hall or something or workshop, and I will bring the application team

11:15.680 --> 11:20.840
and they talk about how they migrated from traditional deployment to DevOps.

11:20.870 --> 11:22.740
What are some of the challenges they face?

11:22.760 --> 11:27.080
Some learnings and where to go get their templates.

11:27.380 --> 11:29.120
That actually helped a lot.

11:29.330 --> 11:31.300
And the last stage is mass migration.

11:31.310 --> 11:38.330
Once you scale it out, other folks are coming and attending your workshops, presentations, etc. and

11:38.330 --> 11:42.830
then the company starts to migrate in a bigger fashion.

11:43.310 --> 11:43.760
All right.

11:43.760 --> 11:46.730
So these are the high level steps of adopting DevOps.

11:46.790 --> 11:49.820
All right, folks, that's the advanced interview question.

11:49.820 --> 11:50.630
Answer for DevOps.

11:50.660 --> 11:51.600
That's it for this one.

11:51.620 --> 11:53.720
I'll see you in the next lecture by.
