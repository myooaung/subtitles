WEBVTT

00:00.090 --> 00:06.930
In this lecture, we're going to learn about Dev's phases as well as some of the critical terminology

00:06.930 --> 00:11.220
in DevOps, CI, CD and CD.

00:11.430 --> 00:17.670
I have put CD twice and that's intentional and that will become clear as we go through the lecture.

00:17.730 --> 00:18.600
All right.

00:18.600 --> 00:19.680
Let's get started.

00:20.790 --> 00:26.610
So at this point, we understand the high level automated workflow of DevOps, but there are formal

00:26.610 --> 00:28.500
phases for this workflow.

00:28.950 --> 00:35.340
The first DevOps phase is OTR, where you, the almighty developer, write code.

00:35.760 --> 00:42.150
The next phase is called source, where you check in the source code in some sort of code repository

00:42.150 --> 00:43.280
such as GitHub.

00:43.290 --> 00:44.070
The next.

00:44.070 --> 00:51.330
And one of the most critical phase of DevOps is build, where your code gets compiled and the artifacts

00:51.330 --> 00:55.080
gets created as well as unit testing is done.

00:55.380 --> 01:01.060
So one example of build could be your code got compiled and a zip file got created.

01:01.080 --> 01:08.310
If you are creating a lambda function or your java code got compiled and a jar file got created, so

01:08.310 --> 01:11.840
on, so forth, the next phase is test phase.

01:11.850 --> 01:18.720
So in the build phase you just run unit testing, but in the test phase you will run integration testing,

01:18.720 --> 01:22.410
load testing, UI testing and penetration testing.

01:22.860 --> 01:29.280
And the next phase is deploy where you deploy the artifacts in your environments in addition to these

01:29.280 --> 01:30.510
formal phases.

01:30.600 --> 01:32.850
The other phase is monitoring.

01:32.850 --> 01:40.590
In this continuous monitoring phase, you will utilize logs, metrics and traces to continuously monitor

01:40.590 --> 01:41.610
your application.

01:41.610 --> 01:46.480
And if an error is detected, the remediation should also be automated.

01:46.500 --> 01:52.890
Now that's the ideal end state, but it's okay if sometimes you need manual investigation to fix the

01:52.890 --> 01:53.350
error.

01:53.370 --> 01:58.140
Remediation could be as simple as rolling back to the previous version of the code, which could be

01:58.140 --> 01:59.430
automated easily.

01:59.430 --> 02:06.120
But if you need deeper investigation and then action, then using the output of this monitoring phase,

02:06.120 --> 02:12.030
the appropriate teams can be alerted automatically and then they investigate and fix the issue.

02:12.060 --> 02:16.710
Now let's look into the critical term CI, CD and CD.

02:16.740 --> 02:25.500
So the first three phases author, source and build is known as continuous integration or CI.

02:25.530 --> 02:32.070
Now the next terminology, continuous delivery or CD extends the concept of continuous integration with

02:32.070 --> 02:33.270
continuous delivery.

02:33.270 --> 02:38.970
As soon as the developer checks in the code, the code gets built, unit tested, and then goes through

02:38.970 --> 02:44.460
integration testing, load testing, API testing, whatever testing is appropriate for your project

02:44.460 --> 02:47.850
and then is ready to be deployed to the environment.

02:48.000 --> 02:52.860
Now notice this person with a laptop which says manual approval.

02:52.860 --> 03:00.480
So with continuous delivery you still require a manual approval to deploy your code to production.

03:00.480 --> 03:08.310
So the next evolution of CD or continuous delivery is continuous deployment, which is also termed as

03:08.340 --> 03:12.120
CD with continuous deployment source build.

03:12.120 --> 03:17.520
Test deploy is fully automated without any manual approval.

03:17.820 --> 03:24.210
So as soon as the code is checked in, it will get built, tested and deployed to production.

03:24.210 --> 03:26.730
You don't need any human approval.

03:26.730 --> 03:32.670
So you might be thinking, what if I have a problem with my code on that get deployed with continuous

03:32.670 --> 03:33.510
deployment?

03:33.630 --> 03:37.800
Well, that's where rigorous automated testing comes into play.

03:38.040 --> 03:45.120
If any of the automated testing fails, either the unit testing fails or integration load UI penetration

03:45.120 --> 03:46.110
testing fails.

03:46.110 --> 03:50.940
You can stop the pipeline and send an automated alert to the developer.

03:51.210 --> 03:58.290
Also note that during these test phases you can specify if 90% of the test cases pass, you are okay

03:58.290 --> 04:03.300
to deploy in certain projects, you need 100% of the test cases passed.

04:03.300 --> 04:06.330
So keep these two different CDs in mind.

04:06.330 --> 04:09.320
Continuous delivery versus continuous deployment.

04:09.330 --> 04:12.000
It is a hot topic in the interviews.

04:12.000 --> 04:16.920
Also note that both the CDs extend only up to the deploy phase.

04:16.920 --> 04:21.110
Monitoring phase is out of this CI or CD phase.

04:21.120 --> 04:25.350
That's why I have colored it differently than the other five phases.

04:25.440 --> 04:32.160
This author source build, test and deploy it instrumented in an automated fashion.

04:32.160 --> 04:39.810
Even with the human approval is termed as pipeline or sicced pipeline, you will have different pipelines

04:39.810 --> 04:41.250
for different environments.

04:41.250 --> 04:46.590
For example, you could have a separate pipeline for development, environment, stage environment and

04:46.590 --> 04:47.820
prod environment.

04:47.850 --> 04:54.300
One thing to keep in mind as this is not set in stone, you don't need every phase in every environment.

04:54.300 --> 04:59.760
For example, for your project you might determine that you need testing is sufficient for.

05:00.020 --> 05:06.060
Loving the environment, so you might not have the separate test phase for your dev environment pipeline.

05:06.080 --> 05:12.260
In some cases, you might not need to rebuild your code again in the project environment and you might

05:12.260 --> 05:19.220
decide to use the artifact generated from the stage build and use it in the production environment.

05:19.220 --> 05:22.510
So there are no hard and fast recommendation here.

05:22.520 --> 05:24.970
You need to decide based on your project.

05:24.980 --> 05:30.830
All right, now that we understand the DevOps phases, let's take a look at some of the important DevOps

05:30.830 --> 05:31.490
tools.
