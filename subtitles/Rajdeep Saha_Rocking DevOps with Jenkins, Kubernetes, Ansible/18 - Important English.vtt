WEBVTT

00:01.860 --> 00:02.820
All right.

00:02.820 --> 00:06.360
Our very first gift along with GitHub demo.

00:06.390 --> 00:10.710
Let's start by creating a new folder where we will do all the work.

00:11.370 --> 00:18.390
To do that, I'll run make directory command and I'll create this folder named Hello from Git.

00:18.420 --> 00:20.350
Then I will seed into it.

00:20.370 --> 00:25.330
If I open this folder in Windows Explorer or in Mac, this folder is empty.

00:25.350 --> 00:26.970
There's nothing special about it.

00:26.970 --> 00:32.910
It is not being tracked by git to enable git tracking, auditing, all that good stuff.

00:32.910 --> 00:34.350
Our version control system.

00:34.350 --> 00:38.820
We have to run this git init command inside this folder.

00:38.820 --> 00:45.420
It gives us this message initialized empty git repository and the name of the folder and you can also

00:45.420 --> 00:50.720
see a hidden folder named Dot Git appeared inside our folder.

00:50.730 --> 00:55.650
From now on, whatever we do inside this folder can be tracked by Git.

00:55.650 --> 01:02.910
It is not needed to know what goes on inside this hidden dot git folder because that is implementation

01:02.910 --> 01:09.240
details and subject to change after you run this git init command staging area and local repository

01:09.240 --> 01:12.000
are created and they are currently both empty.

01:12.030 --> 01:15.510
Now let's create our very first file in this folder.

01:15.600 --> 01:19.560
To do that, we will run code file one.

01:20.040 --> 01:23.850
This creates this file and opens up the file in the editor.

01:25.750 --> 01:32.980
We'll just type in hello world from Git press control se to save the file and if we come back to command

01:32.980 --> 01:42.100
line and type git status it shows no commits yet and untracked file.

01:42.100 --> 01:45.790
So at this point everything is in the workspace.

01:45.790 --> 01:53.710
To add this file to the index or staging area, we have to run our git add command so we'll run git

01:53.710 --> 01:55.930
add and the name of the file.

01:55.960 --> 02:04.330
And now if we run git status again it says no commits yet and it says changes to be committed.

02:04.330 --> 02:14.620
New file file one another command that you will run frequently along with git status is git log git

02:14.620 --> 02:21.880
log displays all the previous commits along with the date timestamp, etc. Commit is the most important

02:21.880 --> 02:22.690
part of git.

02:22.690 --> 02:27.580
All the git tracking, auditing and all the details of who changed the code.

02:27.580 --> 02:31.180
Everything gets started after you commit your file.

02:31.360 --> 02:40.690
So let's run the commit command so we will run git commit file 1-m our very first commit press enter

02:40.690 --> 02:45.850
and it says one file changed now let's run git log again.

02:47.380 --> 02:48.100
Aha.

02:48.130 --> 02:57.010
Now it displays a unique commit ID number for this commit along with who did the commit as well as the

02:57.010 --> 02:58.300
email address.

02:58.690 --> 03:02.200
It also displays the timestamp with the comment.

03:02.200 --> 03:09.100
If you recall, this name and email address were set as part of the global configuration setting that

03:09.100 --> 03:10.720
we did in the last lecture.

03:10.720 --> 03:15.520
At this point, file one is in the local repository.

03:15.520 --> 03:20.770
Now let's complete the flow and push this to our GitHub repository.

03:21.130 --> 03:24.880
I'm in my GitHub profile page to create a repository.

03:24.880 --> 03:28.810
Go to this repository tab and then click new.

03:29.410 --> 03:37.720
I'll give the name Hello from Git, I'll keep everything as is scroll down click create repository and

03:37.720 --> 03:43.840
you will notice GitHub also displays the commands that's required to push your changes.

03:43.840 --> 03:45.700
This is super handy.

03:45.700 --> 03:47.650
We already did up to this part.

03:47.650 --> 03:53.110
We run getting it git add and git commit to push our changes to GitHub.

03:53.110 --> 03:56.830
We need to run this three remaining commands.

03:56.830 --> 04:02.200
Don't worry too much about this git branch dash am and git remote add command.

04:02.200 --> 04:03.550
They are part of branching.

04:03.550 --> 04:06.640
We are going to learn about branching in couple lectures.

04:06.640 --> 04:08.500
For now I'm just going to copy this.

04:08.500 --> 04:14.320
Three commands, go back to our Visual Studio code and pass those and press enter.

04:14.320 --> 04:19.930
If you are doing this for the first time, you might be asked to provide your GitHub username and password.

04:19.930 --> 04:21.790
So enter those when prompted.

04:21.790 --> 04:23.080
Let's press enter.

04:23.080 --> 04:24.190
All right.

04:24.190 --> 04:28.420
Seems like our changes have been pushed to our GitHub repository.

04:28.420 --> 04:30.010
Let's go check it out.

04:30.010 --> 04:32.440
I'm going to reload this page.

04:32.440 --> 04:33.100
Here we go.

04:33.100 --> 04:39.250
You can see the file one is in our GitHub repository along with the commit comment.

04:39.400 --> 04:47.770
If you want to see the details, you can click this commit link and then click this blue ID number and

04:47.770 --> 04:55.780
it is going to show what change, what file is added, etc. Also note that when you run get push along

04:55.780 --> 05:03.100
with the file, the same commit ID from the local desktop gets pushed to the remote GitHub repository.

05:03.130 --> 05:05.890
All right, first demo in our books.

05:05.890 --> 05:13.060
Now let's do some further changes and see how you see the differences and add more files to get.

05:13.060 --> 05:13.750
All right.

05:13.750 --> 05:15.340
Let's jump into the next demo.
