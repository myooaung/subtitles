WEBVTT

00:00.090 --> 00:02.340
Welcome, girls and girls, to this lecture.

00:02.370 --> 00:10.320
Well, so at this point, you guys and girls know Kubernetes is the most popular container orchestrator.

00:10.680 --> 00:12.210
But what is it?

00:12.240 --> 00:15.540
What are the components and what do they do?

00:15.660 --> 00:21.030
In this lecture, we're going to understand what is Kubernetes?

00:21.060 --> 00:23.280
All right, let's get started.

00:23.280 --> 00:30.180
Let's start with the application, because at the end of the day, the reason Kubernetes exists is to

00:30.180 --> 00:32.670
run your precious application.

00:33.330 --> 00:40.710
So you package your code configuration dependencies, runtime engine, and you created Docker image

00:40.710 --> 00:42.120
or container image.

00:42.120 --> 00:47.700
And when you run this image, it creates this beautiful container.

00:48.330 --> 00:51.000
So where does this container run?

00:51.000 --> 00:52.340
In Kubernetes.

00:52.350 --> 00:56.780
So Kubernetes is node hosts your containers.

00:56.790 --> 01:01.890
You can think node as a physical or a virtual server.

01:01.920 --> 01:03.760
For example, Amazon is it.

01:03.760 --> 01:07.170
You can work as a node when you run Kubernetes in a W.

01:07.230 --> 01:13.800
S, typically you have one or more nodes running container for one or more applications.

01:13.800 --> 01:17.520
So your container runs on this work or nodes.

01:17.520 --> 01:25.560
However, somebody or something needs to manage this process, such as which container should go to

01:25.560 --> 01:33.180
which node, how many copies of the container should run, does this cluster need more nodes, etc.?

01:33.180 --> 01:38.880
And that is the job of Kubernetes master, also known as control plan.

01:38.880 --> 01:42.000
So Control Plan has a lot in its plate.

01:42.000 --> 01:44.760
So control plan has multiple components.

01:44.760 --> 01:46.770
Who does this functionalities?

01:46.770 --> 01:47.820
Let's take a look.

01:47.850 --> 01:50.190
The first component is ETD.

01:50.220 --> 01:57.030
As container gets loaded into nodes, you need to have a database which serves which container is going

01:57.030 --> 02:04.380
to which nodes, what time they are getting loaded, etc., etc. is a consistent and highly available

02:04.380 --> 02:09.180
key value store that saves all this critical cluster information.

02:09.180 --> 02:11.550
Next is Cube Scheduler.

02:11.940 --> 02:18.780
Cube Scheduler is a control plan component that schedules your container into proper nodes.

02:18.780 --> 02:25.830
It takes multiple factors in the scheduling decisions, such as resource requirements of the container,

02:25.920 --> 02:35.010
a policy constants, data, locality, inter workload, interference, etc. Next one is cube controller

02:35.010 --> 02:35.940
manager.

02:35.970 --> 02:41.760
This component ensures proper state of cluster components.

02:42.210 --> 02:45.420
Pretty sure I confused you guys and gals there.

02:45.420 --> 02:50.370
You guys and gals are probably going, What the heck is this date thing?

02:50.430 --> 02:55.950
All right, let's take a look because this will come up in your conversations or your interviews.

02:55.980 --> 03:01.710
Kubernetes cluster state is nothing but a specific configuration.

03:01.710 --> 03:06.990
Let's say your Kubernetes cluster is supposed to run with three nodes.

03:06.990 --> 03:11.730
So we could say the desired state is three nodes.

03:11.730 --> 03:20.610
But let's say for some reason one node goes down, so the current state becomes two nodes, so the desired

03:20.610 --> 03:23.850
state and current state is no longer equal.

03:23.850 --> 03:25.350
So what's going to happen?

03:25.380 --> 03:32.370
Cube controller manager will jump into action and it is going to observe that the desired state is not

03:32.370 --> 03:39.420
equal to current state and it is going to bring up one more node to make the current state equals to

03:39.420 --> 03:40.440
desired state.

03:40.440 --> 03:42.750
But who specifies state?

03:42.780 --> 03:50.040
Who tells Kubernetes Master that I need this many nodes, I need this many copies of my container running?

03:50.040 --> 03:51.750
Well, you do.

03:51.780 --> 03:57.870
You tell Kubernetes master what state you want using manifest file.

03:57.870 --> 04:05.550
Let's say, for example, in the manifest file you can say, hey, run six copies of my container image.

04:05.550 --> 04:12.150
You're going to post that to the Kubernetes master, and the cube control manager is going to observe

04:12.150 --> 04:12.720
that.

04:12.720 --> 04:13.410
All right.

04:13.410 --> 04:18.690
Desire state six containers, current state zero containers.

04:18.690 --> 04:28.200
So it is going to work with cube scheduler and schedule six container on the nodes and make this state

04:28.200 --> 04:29.850
equal to current state.

04:29.850 --> 04:30.450
All right.

04:30.450 --> 04:38.970
So now we know that you using manifest file can specify a state, but how do you interact with Kubernetes

04:38.970 --> 04:39.780
master?

04:39.780 --> 04:45.960
The cube scheduler, the cube controller manager they are not exposed outside of the cluster.

04:45.960 --> 04:50.790
So you communicate with cube API server.

04:50.880 --> 04:58.020
So this API server is a component of the Kubernetes control plan that exposes the Kubernetes API.

04:58.050 --> 05:02.490
You can think of it as frontend of the Kubernetes control plan.

05:02.490 --> 05:11.040
So any time you need to specify a state or you to change some existing state, you always interact with

05:11.040 --> 05:19.170
this cube API server and then the other components behind the scenes jump into action and make the desire

05:19.200 --> 05:21.300
state and current state equal.

05:21.330 --> 05:21.770
Okay.

05:21.780 --> 05:29.610
So at this point, we know about the four components seed, scheduler, controller, manager and API

05:29.610 --> 05:30.360
server.

05:30.360 --> 05:36.000
So these four components are running in the control plan or Kubernetes master.

05:36.000 --> 05:38.820
Now let's take a look at the node.

05:38.820 --> 05:45.300
So to run your container, the node needs to have container runtime.

05:45.300 --> 05:47.910
Engine container runtime is the software.

05:48.070 --> 05:51.130
That is responsible for running containers.

05:51.820 --> 06:00.220
Kubernetes supports several container runtimes such as container rd creo frac d and of course the most

06:00.220 --> 06:01.980
popular docker.

06:01.990 --> 06:08.770
So until this point we learned about the four control plan components that help running your container

06:08.770 --> 06:17.470
into the nodes, but something needs to run in the node as well besides the containers because the master

06:17.470 --> 06:19.540
needs to communicate with the node.

06:19.570 --> 06:24.670
The master needs to tell the node, Hey, run a container in this node.

06:24.670 --> 06:30.880
And as the master monitors the node, something needs to send back to the master if everything is going

06:30.880 --> 06:32.290
okay or not.

06:32.290 --> 06:35.140
So that's what Cube does.

06:35.170 --> 06:40.650
A cube bullet is an agent that runs on each node in the cluster.

06:40.660 --> 06:43.900
It makes sure that containers are running okay.

06:43.900 --> 06:49.960
If something goes wrong, if reports back to the master and at the same time, if the master wants to

06:49.960 --> 06:55.270
schedule a container in the nodes, it communicates that via the cube led.

06:55.270 --> 07:00.120
All right, so master communicates with the node using cube let.

07:00.520 --> 07:04.330
But what about node to node communication?

07:04.570 --> 07:11.140
Let's say you are running your database in this node and your application server in this node.

07:11.140 --> 07:19.450
How would the database server and the application server communicate with each other that is done using

07:19.450 --> 07:20.800
Q proxy.

07:20.800 --> 07:26.530
So Q proxy is a network proxy that runs on each node in your cluster.

07:26.560 --> 07:29.890
It maintains network rules are nodes.

07:29.890 --> 07:37.240
This network rules allow network communication to your container from inside or outside of your cluster.

07:37.240 --> 07:45.670
So to sum it all up, Kubernetes has two main components master or control plan and worker nodes or

07:45.670 --> 07:46.690
data plan.

07:46.690 --> 07:54.790
The full control plan components are SDA, cube, controller, manager, cube scheduler and Cube API

07:54.790 --> 08:01.150
server, and the node components are cube litt container runtime and cube proxy.

08:01.150 --> 08:06.490
Also, we are going to look at a lot of these components in detail in subsequent lecture.

08:06.490 --> 08:10.810
This is just a 30,000 feet overview of Kubernetes.

08:10.810 --> 08:18.280
So before end this lecture, I just wanted to go over one lingo that I found confusing when I started

08:18.280 --> 08:19.570
my Kubernetes journey.

08:19.570 --> 08:24.760
So a lot of time you will hear K eight instead of Kubernetes.

08:24.760 --> 08:29.800
The reason is there are eight letters between K and S in Kubernetes.

08:29.800 --> 08:34.480
That's why sometimes people lovingly call it kids.

08:34.510 --> 08:36.850
All right, guys and girls, that is the lecture.

08:36.850 --> 08:39.550
I'll see you in the next lecture by.
