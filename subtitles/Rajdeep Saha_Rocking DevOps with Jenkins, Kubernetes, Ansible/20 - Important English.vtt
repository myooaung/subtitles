WEBVTT

00:00.090 --> 00:05.460
One of the most important concept in Git and GitHub is branching and merging.

00:05.490 --> 00:07.620
So let's try to understand this concepts.

00:08.340 --> 00:13.650
Let's say you have a project running, you have a bunch of files committed in both local repository

00:13.650 --> 00:15.390
and remote repository.

00:15.660 --> 00:22.320
Then a team member comes and she's saying, I'm working on a new feature feature one in Real World Project.

00:22.350 --> 00:29.430
You need a mechanism for her to work separately so that it doesn't impact the file one, which is running

00:29.430 --> 00:30.090
fine.

00:30.120 --> 00:33.720
So to do that, you use branches.

00:33.900 --> 00:39.480
So when you push a changes to the repository, by default a branch is created.

00:39.510 --> 00:41.910
That branch is called master.

00:42.270 --> 00:44.770
To work on additional features.

00:44.790 --> 00:47.720
You can create separate branches.

00:47.730 --> 00:52.860
So in this case, she can create this branch named feature one.

00:52.860 --> 00:58.200
She can make all her changes in this branch, and then someone can review the changes.

00:58.200 --> 01:03.990
And if everything is fine, then march to the master branch using a pull request.

01:04.170 --> 01:06.610
Now let's not get ahead of ourselves.

01:06.630 --> 01:11.100
Let's understand in detail how branching works in local.

01:11.100 --> 01:14.680
And then we're going to take a look at an actual example with GitHub.

01:14.700 --> 01:21.870
When you create a folder in your local desktop and then you commit a file, let's say file one git automatically

01:21.870 --> 01:30.390
creates this branch called master and this diagram represents the git history graph or git branch graph.

01:30.420 --> 01:33.070
You will see this in real world projects as well.

01:33.090 --> 01:36.850
The circle signifies the commit ID for each comment.

01:36.870 --> 01:43.470
So in this case we have one circle because so far we have only committed once in the branch master to

01:43.470 --> 01:45.080
create a branch.

01:45.090 --> 01:49.090
You run this command gate branch and the name of the branch.

01:49.110 --> 01:54.870
In this case we are working on feature one, so we are running Git branch feature one and the branch

01:54.870 --> 01:56.310
will be created.

01:56.580 --> 02:03.420
Now note that the branch feature one is just looking at the same commit id.

02:03.450 --> 02:05.700
So a couple of important things to remember.

02:05.730 --> 02:11.580
Branch can only be created from existing branch by default.

02:11.580 --> 02:15.800
Branch master is created and you are sitting on the master branch.

02:15.810 --> 02:22.530
So whenever you run this git branch feature one, the new branch is created and it looks at the latest

02:22.530 --> 02:28.200
commit ID in the master branch and branches are just references to commit.

02:28.230 --> 02:30.020
No code is copied.

02:30.030 --> 02:36.300
That's why when you create different branches, git does it super fast compared to other version control

02:36.300 --> 02:36.920
system.

02:36.930 --> 02:41.190
When you create a branch, a whole bunch of code gets copied, which is not the case.

02:41.190 --> 02:47.800
Forget when you have two different branches, you need to switch branches and work on different features.

02:47.820 --> 02:55.590
How do you know which branch you are on currently that is determined by this pointer called Head.

02:55.620 --> 03:03.000
You can switch branches by running the command git switch name of the branch or you could do git check

03:03.000 --> 03:04.680
out name of the branch.

03:04.830 --> 03:08.070
Git switch is more appropriate for switching branches.

03:08.070 --> 03:11.400
So that's the command we are going to use throughout this course.

03:11.400 --> 03:20.130
So let's say you switch branch to feature one, you modified file one and you added a new file index.html

03:20.160 --> 03:25.200
you commit to feature one branch and all of this is happening in local repository.

03:25.200 --> 03:30.540
So how would the gate history graph look after doing all these changes?

03:31.130 --> 03:37.770
So at this point, the feature one branch will move one comet ahead of the master branch.

03:37.790 --> 03:44.530
This new circle is the comet ID for modified file one and indexed HTML.

03:44.720 --> 03:51.910
What this means is if you are at the branch master and look at file one, you will see the older file.

03:51.920 --> 03:57.710
But if you are sitting in the branch feature one and look at the file one, you will see the modified

03:57.710 --> 04:00.410
file one as well as indexed HTML.

04:00.440 --> 04:06.950
If you want Master Branch to stay up to date with this changes, you need to switch the head to Master

04:06.950 --> 04:13.850
Branch and you do this by running git switch master which brings the head down to the master and then

04:13.850 --> 04:17.440
you run the command get merge feature one.

04:17.450 --> 04:22.940
Basically the command is get merge and then give the name of the branch where there are additional commits

04:22.940 --> 04:27.620
and then those changes will be merged into the branch that you are sitting on.

04:27.650 --> 04:31.480
You do not need to give the name of the branch that you are sitting on.

04:31.490 --> 04:35.840
That's why we did not give the name master and get merge, which are one command.

04:36.290 --> 04:44.150
Once you run this command, the branch master will move ahead and it will look at the latest comment.

04:44.450 --> 04:50.270
Note that this just made the master branch move to look at the latest comet ID.

04:50.360 --> 04:57.320
This is called a fast forward merge and this is only possible because no changes were made on Master

04:57.320 --> 04:57.830
Branch.

04:57.860 --> 05:05.090
All it did was move the master branch to look at the latest comet ID and match with feature one branch.

05:05.270 --> 05:09.670
But what if there are changes in multiple branches?

05:09.680 --> 05:17.060
So going back to the previous scenario, while you made the change in feature one branch, you may switch

05:17.060 --> 05:21.660
back to master and do a change in the master branch as well.

05:21.680 --> 05:24.980
In this case, you committed file two in the master branch.

05:25.250 --> 05:29.570
So now the master branch and feature one branch is out of sync.

05:29.600 --> 05:31.680
How are we going to merge the changes?

05:31.700 --> 05:33.090
So let's think about it.

05:33.110 --> 05:35.210
Changes made on both branches.

05:35.360 --> 05:38.900
Just moving the branch to look at the new commit.

05:38.900 --> 05:41.090
ID won't do merge.

05:41.090 --> 05:48.230
So previously all we did was moving the branch master to look at the new commit ID for feature one branch.

05:48.260 --> 05:51.680
Let's say we do that, but that doesn't solve it, right?

05:51.680 --> 05:57.740
Because then the branch master and feature one both looking at the commit ID for modified file one and

05:57.740 --> 06:03.830
index.html, and none of them are looking for the commit ID for file two, which is not correct.

06:05.050 --> 06:10.840
Similarly if you just move the branch feature one to look at the latest commit ID for Master Branch,

06:10.840 --> 06:15.090
then you leave the modified file one in that HTML comet.

06:15.100 --> 06:25.120
So to solve it we do recursive three way march we run get switch master and then we run get merge feature

06:25.120 --> 06:25.840
one.

06:25.840 --> 06:33.250
And what that would do is it will combine the comet ID for file two and comet ID for modified file one

06:33.250 --> 06:39.160
and index.html and it will create a new comet ID for this merge.

06:39.160 --> 06:47.680
It is named three way march because it uses three comets to generate this march, comet ID, the two

06:47.680 --> 06:50.740
branch tapes and their common ancestor.

06:50.740 --> 06:55.690
Sometimes it will be called recursive merge, sometimes it will be called three way march.

06:55.690 --> 06:57.040
But don't get confused.

06:57.040 --> 06:58.210
They are the same thing.

06:58.210 --> 07:06.370
So good news is Gitte will automatically choose whether to run a fast forward march or a three way march.

07:06.370 --> 07:12.760
You do not need to tell it which one to choose and once you merge all the changes to the master branch,

07:12.760 --> 07:14.440
you delete the feature branch.

07:14.440 --> 07:21.640
You do this by running gate branch, dash dx as in delete and the name of the branch you want to delete.

07:21.910 --> 07:24.910
So now a brainteaser for you guys and girls.

07:24.910 --> 07:30.280
Let's say the head is in the branch master and this is the current branch graph.

07:30.640 --> 07:40.690
Now if I run the command get switch feature one and then get branch feature to which commit ID the blue

07:40.690 --> 07:46.240
one or the orange one will feature two branch look at and where does the head go?

07:46.880 --> 07:48.980
Pause the video and think for a minute.

07:49.580 --> 07:50.270
All right.

07:50.360 --> 07:55.160
So when you do get switch feature one, the head goes to feature one.

07:55.160 --> 07:58.700
So currently you are sitting at the branch feature one.

07:58.700 --> 08:01.760
And then when you run, get a branch feature.

08:01.760 --> 08:09.860
To remember, a branch is always a copy of an existing commit since you were sitting at the branch feature

08:09.860 --> 08:16.850
one the feature two branch will be looking at the latest commit ID from feature one and creating new

08:16.850 --> 08:23.270
branch does not change the head unless you explicitly switch to the new branch.

08:23.270 --> 08:29.570
Another alternate way of doing this would be get branch feature to specify feature one.

08:29.570 --> 08:35.960
So basically Git branch, give the name of the new branch and then the old branch to reference.

08:35.960 --> 08:42.770
In this method the new branch will be created, but the head will still be sitting at the master branch

08:42.770 --> 08:46.160
to do changes in the branch feature one or feature two.

08:46.190 --> 08:50.450
You do need to explicitly switch the head to feature one or feature two.

08:50.690 --> 08:57.260
Now that we understand how branching and merging works in your local, let's take a look at how this

08:57.260 --> 08:58.970
looks with remote GitHub.
