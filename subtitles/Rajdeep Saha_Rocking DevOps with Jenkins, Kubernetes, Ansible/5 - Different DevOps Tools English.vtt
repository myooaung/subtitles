WEBVTT

00:02.440 --> 00:09.190
At this point, we understand each of the DevOps phases as well as CI, CD and CD.

00:09.430 --> 00:14.050
In this lecture, let's look at some of the relevant tools for each of these phases.

00:15.150 --> 00:21.810
To write your code in the interface, you can use popular IDs such as Visual Studio code running on

00:21.810 --> 00:23.010
your local desktop.

00:23.340 --> 00:27.960
If you want to stick with Native Web Services, you can use A.W. Cloud nine.

00:28.170 --> 00:31.770
Then in the source files, you check in your code to a code repository.

00:31.980 --> 00:35.400
The most popular code repository out there is GitHub.

00:35.580 --> 00:38.760
The native NWS service is a code commit.

00:39.520 --> 00:43.690
Then the most critical phase in Davos pipeline build phase.

00:44.380 --> 00:48.240
You can use Jenkins or NetWare as tool.

00:48.260 --> 00:55.480
It could build and you can use any popular testing frameworks such as Johnny or Pi Test to run your

00:55.480 --> 00:56.440
unit testing.

00:56.650 --> 01:04.000
Similarly for the testing phase, Jenkins or a code build can invoke different testing tools.

01:04.150 --> 01:07.780
So there are many testing tools available for different kinds of testing.

01:07.990 --> 01:15.370
A couple of examples could be for Java load testing, tool generator and for Python load testing tool

01:15.370 --> 01:16.210
low cost.

01:16.660 --> 01:21.870
And keep in mind that for penetration testing, UI testing, all this tooling will change.

01:21.880 --> 01:27.940
So if you know what area you are interviewing for, so look up the appropriate testing tools in that

01:27.940 --> 01:31.660
area before your interview for the deploy phase, you can use.

01:31.660 --> 01:36.070
Jenkins or you could use native service could deploy.

01:36.190 --> 01:42.760
So even though the monitoring phase is not part of the formal RSD pipeline, I have included it here

01:42.760 --> 01:48.580
because it is becoming very popular in interview when it comes to monitoring all of us.

01:48.580 --> 01:53.410
Think about three different things logs, metrics and traces.

01:53.440 --> 02:01.300
If you want to use native as tool, you can use Amazon Cloud Watch, Cloud Watch services for both logs

02:01.300 --> 02:02.710
as well as metrics.

02:02.980 --> 02:05.680
So you can send your application logs to Cloud Watch.

02:05.680 --> 02:10.750
And all the application metrics as well as system metrics can be done in Cloud Watch.

02:10.780 --> 02:15.150
It is x ray is the native service for tracing.

02:15.160 --> 02:18.460
I have also included a couple of tools for Kubernetes.

02:18.460 --> 02:25.300
For Kubernetes, if you want to use it as a tool, you can keep using cloud watch and OS x ray.

02:25.300 --> 02:28.000
They are supported with elastic Kubernetes services.

02:28.240 --> 02:34.600
If you prefer open source tool, you can use Prometheus and graph for metrics.

02:34.600 --> 02:38.080
So basically Prometheus gathers all the metrics data.

02:38.080 --> 02:42.190
Then you use graphs to create dashboards or metrics.

02:42.190 --> 02:49.750
On top of that data for logging you can use fluent bit, so foo and bit is a daemon set that collects

02:49.750 --> 02:57.430
the logs for your Kubernetes and then it can send the logs to either Cloud Watch or Splunk or any other

02:57.430 --> 02:59.470
third party logging tools.

02:59.470 --> 03:05.920
So make sure to study up on Prometheus graph and fluent bit if you are going for Kubernetes interviews.

03:05.920 --> 03:13.870
So all these phases build, test and deploy needs to be orchestrated together as in as soon as someone

03:13.870 --> 03:20.980
checks in a code, you want to trigger the build test, deploy one after another automatically.

03:21.220 --> 03:29.140
So you could do that using Jenkins or if you want to use native WC to NWS code pipeline is the service

03:29.140 --> 03:30.010
to do that.

03:30.220 --> 03:30.760
All right.

03:30.760 --> 03:34.720
So those are some of the popular DevOps tools for each of these phases.

03:34.720 --> 03:40.900
Now let's take a look at different DevOps workflows for different applications.
