WEBVTT

00:01.840 --> 00:02.620
At this point.

00:02.620 --> 00:09.910
File one is in your working area, staging area, local repository and GitHub remote repository.

00:09.940 --> 00:17.410
You notice that you misspelled the word hello in that file and you want to fix it and you fix this line.

00:17.410 --> 00:19.510
And you also added these two lines.

00:19.540 --> 00:24.040
Git is better with GitHub and learn git and s to get a great job.

00:24.040 --> 00:30.370
So you save this file and before you move this change to the staging area, you want to see the difference

00:30.370 --> 00:31.690
between the files.

00:31.720 --> 00:35.110
You do that by running git diff command.

00:35.140 --> 00:42.100
Git diff command shows the difference between the files in your working area and staging area.

00:42.460 --> 00:45.100
Let's dive deep to understand the output.

00:45.280 --> 00:52.240
The first line shows that it is comparing the same file file one in two different places.

00:52.270 --> 00:59.530
The second line shows the metadata and internal indexes that Git is using to run this compare command.

00:59.530 --> 01:03.010
This line is not really relevant to understand the differences.

01:03.010 --> 01:12.520
The three minuses denotes that a slash file one is the original file and three places denote that B

01:12.520 --> 01:13.240
slash file.

01:13.240 --> 01:14.890
One is the new file.

01:14.890 --> 01:17.710
The actual difference is easy to understand.

01:17.710 --> 01:23.110
The deleted lines are shown in red and added lines are shown in green.

01:23.110 --> 01:29.620
As we can see, the line hello world from Git is removed and three new lines have been added to this

01:29.620 --> 01:30.220
file.

01:30.250 --> 01:34.030
This section shows the summary of changes.

01:34.180 --> 01:36.760
This is divided into two area.

01:36.760 --> 01:44.950
The minus denotes that this section is for the original file and plus determines that this section is

01:44.950 --> 01:46.840
for the change file.

01:46.870 --> 01:55.630
Please note that this minus one or plus one does not mean that one line has been deleted and one line

01:55.630 --> 01:56.830
have been added.

01:56.830 --> 02:03.760
The first number denotes that what's the line number that the change is from, and the second number

02:03.760 --> 02:06.550
shows the number of lines impacted.

02:06.940 --> 02:15.400
So for the original file, it shows that changes started from line one and since the old file only had

02:15.400 --> 02:22.900
one line, it doesn't show minus one, comma one, but the new file has more than one line, so it shows

02:22.900 --> 02:24.070
plus one.

02:24.070 --> 02:30.910
As in the new file changes start at line number one and then starting from line number one.

02:30.910 --> 02:33.040
Three lines have been impacted.

02:33.040 --> 02:37.270
Since this file is small, you are only seeing this one section.

02:37.270 --> 02:44.890
But if this file was a large one and you changed in multiple areas of the file, this section will replicate

02:44.890 --> 02:48.910
with appropriate starting line number and number of lines impacted.

02:48.910 --> 02:55.330
It is not always easy to use this command line to show the differences, but later on we want to use

02:55.330 --> 02:57.370
some of the tools to see this.

02:57.370 --> 03:03.400
Also, we will see how the differences is shown in GitHub, which is a little bit easier to understand.

03:03.400 --> 03:08.530
Coming back to this file, we are happy with our changes, so I'm going to add this file to staging

03:08.530 --> 03:09.160
area.

03:09.340 --> 03:16.180
So if I run git diff again, there should be no differences because the same file now exists in both

03:16.180 --> 03:18.310
working area and staging area.

03:18.430 --> 03:25.030
As expected, there are no differences now to see the differences between the staging area and local

03:25.030 --> 03:25.930
repository.

03:25.930 --> 03:30.460
You run the command git diff dash dash staged.

03:30.460 --> 03:35.920
We are happy with the differences so we are going to commit this file to local repository and when you

03:35.920 --> 03:40.390
commit it also shows a summary that one file have been changed.

03:40.390 --> 03:43.480
There have been three insertion and one deletion.

03:43.480 --> 03:47.650
Now I'm going to add another file file to to the working area.

03:47.650 --> 03:51.400
So I added this two lines and I save file two.

03:51.400 --> 03:55.870
So let's add this file to staging area by running git add command.

03:55.870 --> 04:02.320
And at this point we are going to run git diff does dash stage to see the differences between staging

04:02.320 --> 04:04.420
area and local repository.

04:04.840 --> 04:06.670
So there are no differences in file one.

04:06.670 --> 04:12.790
So it doesn't show anything about file one here and it shows that it's comparing file two in two different

04:12.790 --> 04:15.100
places, same things apply.

04:15.130 --> 04:23.350
Only thing to note is this line minus minus minus means is denoting the original file slash dev slash

04:23.350 --> 04:26.080
null means there are no original files.

04:26.080 --> 04:27.430
It is a new file.

04:27.430 --> 04:35.800
And then in the summary section -0 comma zero means the original file has no lines plus one comma two

04:35.800 --> 04:42.040
means the new file changes start at line one and there are two lines of changes and the actual changes

04:42.040 --> 04:44.710
are shown in these two green lines.

04:44.710 --> 04:49.270
I'm going to commit this file and then we're going to push this to our remote repository.

04:50.620 --> 04:52.210
To push the changes.

04:52.210 --> 04:59.860
I'm going to click code, copy the HTTPS link, go back to my Visual Studio code and run, get push

05:01.000 --> 05:02.890
and then dice replace link.

05:03.160 --> 05:05.140
All right, changes are pushed.

05:05.150 --> 05:09.910
Let's go back to our GitHub repository to see the changes visually.

05:09.910 --> 05:16.420
I mean, my GitHub repository, if I refresh this page, the changes are propagated now to see the commits,

05:16.420 --> 05:21.970
click this three commits icon and to see the differences related to a particular comment.

05:21.970 --> 05:28.300
Click the actual commit and it shows the differences in file one with little bit easier to understand

05:28.300 --> 05:30.970
format, but the same concepts apply.

05:31.000 --> 05:33.910
The blue color shows the summary of changes.

05:33.910 --> 05:37.510
Red is deleted lines and green is added line.

05:37.630 --> 05:43.390
All right, folks, this is how you check the differences before you implement your code changes.

05:43.510 --> 05:44.740
That's it for this one.

05:44.740 --> 05:46.660
I'll see you guys and girls in the next lecture.
