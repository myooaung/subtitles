WEBVTT

00:01.520 --> 00:02.400
I have this file.

00:02.420 --> 00:05.370
Hello, world dot pi sitting in the master branch.

00:05.390 --> 00:10.520
If I run the git branch command, you will see there is only one branch master.

00:10.520 --> 00:15.500
And if I run git log, dash, dash one line, you will see there's only one comet.

00:16.430 --> 00:23.090
At this point, I'm going to create a branch feature one and note that currently the head is sitting

00:23.090 --> 00:24.080
at the master.

00:24.080 --> 00:31.040
So when I run this Git branch feature one, this new branch will look at the latest comment from the

00:31.040 --> 00:32.340
branch master.

00:32.360 --> 00:38.510
If we run Git branch again you will see we have two branches but the head is still sitting at the master

00:38.510 --> 00:40.550
to switch the head to the feature.

00:40.550 --> 00:47.300
One branch we need to run git switch command let's run git switch feature one if we run get branch again

00:47.300 --> 00:51.500
you will see the asterisks or the head has moved to feature one branch.

00:51.680 --> 00:54.890
If I run git log does dash one line again.

00:55.100 --> 01:00.380
It is going to show you that the head is at the feature one branch and both the feature one and Master

01:00.380 --> 01:02.780
Branch is looking at the same commit.

01:02.780 --> 01:08.480
Now while we are sitting at the feature one branch, let's change this program as well as add another

01:08.480 --> 01:09.110
file.

01:09.110 --> 01:10.310
All right, so I change this.

01:10.310 --> 01:11.270
Hello, all file.

01:11.300 --> 01:12.770
I'm going to save this file.

01:12.770 --> 01:16.340
I'm also going to add another file while I'm at the feature one branch.

01:17.710 --> 01:18.160
All right.

01:18.160 --> 01:21.970
I created and saved this test python txt file.

01:22.000 --> 01:26.620
Now I'm going to add and commit this to files in the feature one branch.

01:26.650 --> 01:29.560
To do that I run git add dot.

01:29.560 --> 01:35.580
That means anything that's changed updated in my current folder will be added to the staging area.

01:35.590 --> 01:37.120
Let's commit these changes.

01:37.630 --> 01:38.110
All right.

01:38.110 --> 01:45.550
So at this point, if we run git log again so you can see the head is still at the feature one branch,

01:45.550 --> 01:50.730
but feature one branch has moved ahead, one commit of master.

01:50.740 --> 01:58.030
Now while we are sitting at the feature one branch, let's run git branch command again git branch feature

01:58.030 --> 01:58.630
too.

01:58.630 --> 02:04.990
So this will create a new branch named feature two which commit do you folks think feature two will

02:04.990 --> 02:05.740
look at?

02:05.740 --> 02:07.480
I hope you forgot it.

02:07.570 --> 02:13.660
Remember that branch is nothing but references to a commit since the head is sitting at the feature

02:13.660 --> 02:17.410
one commit feature two will simply look at this comment.

02:17.410 --> 02:24.420
So if we run git log dash dash one line again as expected, head is sitting at feature one, both feature

02:24.430 --> 02:29.650
one feature two branch looking at the latest commit while master is one commit behind.

02:29.650 --> 02:35.530
So at this point I want to merge the changes from feature one to the master branch.

02:35.530 --> 02:36.670
How do I do that?

02:36.670 --> 02:43.960
I switch back to the master branch by running git switch master and I simply run git merge feature one.

02:43.960 --> 02:49.960
This will be a fast forward merge, so the master branch will simply move to look at the latest commit.

02:49.990 --> 02:52.780
No new commit IDs will be added.

02:52.780 --> 02:53.920
Let's check it out.

02:54.220 --> 02:56.320
Let's run git log one line again.

02:56.650 --> 03:00.490
As expected, no new commit ids have been added.

03:00.520 --> 03:07.420
Now all the branches master feature two feature one is looking at the latest commit ID with the head

03:07.420 --> 03:09.100
sitting at the master branch.

03:09.100 --> 03:13.090
At this point I'm going to switch to feature two branch and make some changes.

03:15.220 --> 03:17.890
And I'm going to add and commit these changes.

03:23.100 --> 03:27.990
And I'm also going to switch back to Master Branch and do some further changes.

03:31.240 --> 03:33.430
And I'm going to add another file.

03:36.240 --> 03:38.750
I created this log file txt.

03:38.820 --> 03:40.350
So I'm going to add and commit.

03:40.350 --> 03:42.120
This changes from the master branch.

03:44.860 --> 03:51.760
So before we merge the changes from feature two to this master, there will be situations where some

03:51.760 --> 03:56.860
branches are merged like feature one and some branches are not merged.

03:56.890 --> 03:58.000
How could you tell?

03:58.030 --> 04:00.340
You could tell by running this command.

04:00.370 --> 04:07.420
Get branch dash dash merged will show you the branches that have been marched to the master in this

04:07.420 --> 04:07.660
case.

04:07.660 --> 04:10.870
Feature one and get branch dash dash.

04:10.870 --> 04:12.650
No merged command.

04:12.670 --> 04:18.220
We'll show you the branches that have not been marched to the branch where the head is at currently,

04:18.220 --> 04:19.290
which is master.

04:19.300 --> 04:22.230
When you run just git log command.

04:22.240 --> 04:28.660
It shows you the log for the branch you are currently sitting on to see the logs for all the branches.

04:28.660 --> 04:31.750
Use this git log, dash, dash, all option.

04:31.750 --> 04:38.050
And then with this dash dash one line I want to see the short end log and dash dash graph will give

04:38.050 --> 04:40.420
you somewhat a graphical representation.

04:40.420 --> 04:44.710
So if we run this as expected, head is currently at the master.

04:44.710 --> 04:51.400
Master Branch is looking at this commit and there is a diverging branch feature to feature two.

04:51.400 --> 04:53.680
Branch is looking at this commit.

04:54.130 --> 05:01.300
Now if I run the merge command, this will be a three way march and it will create an additional commit

05:01.300 --> 05:01.840
id.

05:01.870 --> 05:03.090
Let's check it out.

05:03.100 --> 05:05.170
I'm running git merge feature.

05:05.170 --> 05:10.690
Two changes are merged, so I'm going to run the same git log command again.

05:10.690 --> 05:16.990
We have a new commit id and the changes from feature to branch has been merged into the master branch.

05:16.990 --> 05:23.770
I'm sure you guys and gals are wondering what if I changed the same file from these two different branches?

05:23.770 --> 05:25.690
How can it merge then?

05:25.690 --> 05:31.860
Well, that would create a march conflict and we will learn about March conflict in a letter lecture.

05:31.870 --> 05:33.730
All right, folks, that's it for this one.

05:33.730 --> 05:35.500
I'll see you guys and gals in the next one.
