WEBVTT

00:00.090 --> 00:04.650
In this lecture, we are going to learn how you can convert a scripted pipeline.

00:04.650 --> 00:06.620
Jenkins file to a declarative pipeline.

00:06.630 --> 00:10.650
Jenkins File Declarative pipeline is relatively new concept.

00:10.650 --> 00:16.620
So in real world projects, you might have some Jenkins file, which is in scripted pipeline, and when

00:16.620 --> 00:20.400
you need to convert them, you don't need to refactor everything.

00:20.400 --> 00:25.410
I'm going to show you the easy and effective way for this hands on example.

00:25.410 --> 00:31.680
I'm going to build and push container image artifacts, programs and the example.

00:31.680 --> 00:35.380
So please make sure you watch that lecture before watching this one.

00:35.400 --> 00:37.890
With that being said, let's jump into the lecture.

00:38.340 --> 00:45.540
So at this point, we have this push docker image folder where we have the application program in API,

00:45.570 --> 00:47.760
Docker file requirements, dot text.

00:47.760 --> 00:53.700
Like I said, watch the previous lecture building and pushing container image to go over those files.

00:54.180 --> 01:00.210
So we have the Jenkins files that creates the container image and pushes to the Docker hub.

01:00.570 --> 01:08.520
But let's say you are working in a little bit older project and you have a scripted pipeline to build

01:08.520 --> 01:10.470
and push the content image.

01:11.010 --> 01:15.480
So those artifacts are within the scripted to pipeline folder.

01:15.750 --> 01:22.740
So the scripted Jenkins file is the scripted Jenkins file and the converted one is in pipeline.

01:23.190 --> 01:26.520
But let's open this files in Visual Studio code.

01:26.760 --> 01:33.720
So on the left we have the declarative pipeline to build and push the container image that we already

01:33.720 --> 01:37.500
know on the right is the scripted pipeline.

01:37.740 --> 01:42.870
So on the top we have this environmental section which is grabbing the credentials from the Jenkins

01:42.870 --> 01:49.680
credential with the ID Docker hub, and then it's cloning the repository, building the image, logging

01:49.680 --> 01:52.830
into Docker hub and then pushing the Docker container image.

01:53.190 --> 02:00.720
More importantly, it is using Linux commands, Docker build, Docker logging and Docker push to do

02:00.720 --> 02:01.620
all this.

02:01.800 --> 02:05.820
Now let's say you don't have this Jenkins file on the left.

02:05.820 --> 02:11.490
Your project is a little older and all you have is the file on the right, which is a script Jenkins

02:11.490 --> 02:11.970
file.

02:12.060 --> 02:16.320
You could tell it is a scripted file because there is no pipeline section.

02:16.320 --> 02:17.880
That is this node section.

02:17.880 --> 02:21.030
We have stage and there is no steps.

02:21.210 --> 02:26.940
And you could see all these groovy scripts in it, such as app equal to Docker that build Docker that

02:26.940 --> 02:30.210
with registry, it's not using the Linux commands.

02:30.510 --> 02:36.840
And your project manager says, Hey, can you convert this script to Jenkins file to declare the pipeline

02:36.840 --> 02:41.610
so we can restart it from particular stage and some other advantages?

02:41.610 --> 02:48.510
So it will be very tedious to convert the file from the right to the file on the left if you did not

02:48.510 --> 02:54.840
have the file on the left, because then for this building image you need to search what command to

02:54.840 --> 02:59.250
put in, what plugin you need, what things you need to run and etc..

02:59.250 --> 03:06.840
So to convert it easily, you can use the script section of declarative pipeline.

03:07.020 --> 03:13.620
So using the script section you can use groovy script commands, so let's go over it.

03:13.980 --> 03:16.770
So on the right we are doing clone repositories.

03:16.770 --> 03:18.000
This one stays the same.

03:18.000 --> 03:21.780
Just check out the CM then build image.

03:21.810 --> 03:28.410
Instead of converting it to a linux command which is Docker built, you can just copy the exact same

03:28.410 --> 03:32.760
thing and paste it inside the script section.

03:33.420 --> 03:40.260
And again, this project Docker ID is my Docker hub user ID Jenkins test is the repository name and

03:40.260 --> 03:42.480
all my application program.

03:42.480 --> 03:47.700
Docker file is within this subfolder push docker image in my GitHub repository.

03:47.700 --> 03:49.050
So you have to give the path.

03:49.080 --> 03:52.830
If everything is under the root, you don't need to give this parameter.

03:52.830 --> 03:55.890
You can just ignore this, you can delete this part.

03:55.890 --> 04:04.080
And then for the Docker push, note that I am not grabbing any credentials from GitHub using environment

04:04.080 --> 04:04.770
section.

04:05.250 --> 04:12.600
If we are using width registry, it supports fetching the user ID and password directly in this parameter

04:12.600 --> 04:13.260
itself.

04:13.260 --> 04:20.280
So you have to pass the ID where the Docker hub is already password is saved in Jenkins credentials,

04:20.280 --> 04:26.220
you have to give the URL for the Docker hub and then the command is apt push along with the tag.

04:26.220 --> 04:29.670
I'm going to use environment dot build, underscore number.

04:30.030 --> 04:31.890
So this is a standard environment variable.

04:31.890 --> 04:34.770
It is going to grab the build number for the Jenkins job.

04:35.010 --> 04:35.670
All right.

04:35.670 --> 04:40.500
Now that we understand the Jenkins file, let's jump into the Jenkins console and create the Jenkins

04:40.500 --> 04:41.040
job.

04:41.370 --> 04:41.940
All right.

04:41.940 --> 04:43.890
I'm in my trusty Jenkins console.

04:43.890 --> 04:45.480
Click New Item.

04:45.810 --> 04:51.360
I'll give the name scripted to Pipeline, even though technically I should give scripted to declarative.

04:51.360 --> 04:55.170
But Declarative Pipeline also called US Pipeline Script.

04:55.440 --> 04:58.830
I mean, it's a little bit confusing, but hey, that's on Jenkins.

04:59.040 --> 04:59.910
All right, click pipe.

05:00.000 --> 05:00.490
Line.

05:01.020 --> 05:01.320
Click.

05:01.320 --> 05:02.040
Okay.

05:02.750 --> 05:03.740
Scroll down.

05:03.770 --> 05:04.970
Pipeline script.

05:06.030 --> 05:12.390
Pipeline script from ICM, click get give the repository URL for the repository.

05:12.390 --> 05:14.090
This is a private repository.

05:14.100 --> 05:16.380
Select GitHub user password.

05:16.560 --> 05:20.190
Now the script path is where our Jenkins file is.

05:20.190 --> 05:25.890
So this is under this folder scripted underscore to underscore pipeline and then pipeline underscore

05:25.890 --> 05:26.940
Jenkins file.

05:26.940 --> 05:31.050
So let's go back to the Jenkins job and the script path will be like this.

05:31.230 --> 05:34.260
Also, you need to change the master to Main.

05:34.830 --> 05:39.630
Okay, I wish Jenkins change this by now because all the new GitHub repository is made.

05:39.870 --> 05:41.370
All right, click Save.

05:42.210 --> 05:46.380
And also my Docker hub repository is empty.

05:47.010 --> 05:50.220
Let's go back to the job and then build now.

05:50.730 --> 05:51.810
All right.

05:52.020 --> 05:53.850
It's completed successfully.

05:53.850 --> 05:56.190
Let's check out the console output.

05:56.760 --> 06:01.110
So it cloned the git repository and then it is starting the build step.

06:01.110 --> 06:06.570
Remember, we put this under echo command and it is building the Docker image.

06:06.570 --> 06:16.320
So you could see even though we put a Docker dot built as a groovy syntax, but under the hood it is

06:16.320 --> 06:20.130
actually running the Unix docker build dash DT Command.

06:20.610 --> 06:27.780
So if you want in the second phase, you can convert the script section to directly Linux commands.

06:27.780 --> 06:30.600
And then the next step is Docker push.

06:30.600 --> 06:34.860
So it's going to grab the credentials and then do app push.

06:34.860 --> 06:40.950
So if we go back again, it's going to convert those into the Linux commands under the hood.

06:40.950 --> 06:48.690
So it ran Docker logging, logging succeeded and then it does a Docker tag and then Docker push the

06:48.690 --> 06:49.440
registry.

06:49.830 --> 06:54.090
If we go back to my Docker hub and then refresh the page.

06:55.100 --> 06:55.800
Here we go.

06:55.820 --> 06:57.980
We have the darker continent image.

06:58.070 --> 06:58.490
All right.

06:58.490 --> 07:04.970
So the important part is if you have a scripted pipeline like on the right and you want to create a

07:04.970 --> 07:11.360
declarative pipeline, you can copy whatever is in there using the script section.

07:11.360 --> 07:14.270
And once you run it, it is going to give you the Linux command.

07:14.270 --> 07:18.740
And if you change it directly to those Linux commands, you could do that as well.

07:19.370 --> 07:21.370
All right, folks, that's it for this one.

07:21.380 --> 07:23.180
I'll see you guys and girls in the next lecture.
