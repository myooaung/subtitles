WEBVTT

00:00.120 --> 00:03.540
Security is a critical component of modern applications.

00:03.600 --> 00:07.620
This created a new concept called Devsecops.

00:07.650 --> 00:12.900
In this lecture, we are going to learn what is Devsecops and why do we need it.

00:13.830 --> 00:20.670
At this point, we learned that DevOps enables you to deploy your applications at rapid pace.

00:20.970 --> 00:25.270
In some cases, your applications can be deployed in seconds.

00:25.290 --> 00:31.170
Now, if you think about traditional security checks, for those of you who have worked before, DevOps

00:31.170 --> 00:37.380
was a thing, you know, after your code was written, it needed to be reviewed by someone to see if

00:37.380 --> 00:38.550
there is any problem.

00:38.550 --> 00:45.180
You would run some static analysis tool and then during testing phase, a testing group is going to

00:45.180 --> 00:48.660
come and do some penetration testing and all that stuff.

00:48.900 --> 00:54.120
In DevOps, there is no time for traditional way of doing security checks.

00:54.120 --> 00:59.760
You cannot wait for some manual checks and balances to run before you can deploy.

00:59.790 --> 01:03.810
That will reduce the time to market for your application.

01:03.810 --> 01:07.860
So you need to integrate security with DevOps.

01:08.100 --> 01:14.400
So when it comes to integrating security with DevOps, it follows the same DevOps principle.

01:14.550 --> 01:16.350
Remember the DevOps principle?

01:16.380 --> 01:19.010
Automate everything, codify everything.

01:19.020 --> 01:27.090
Similarly, instead of manual security processes, you have to automate the security processes in case

01:27.090 --> 01:28.170
of a problem.

01:28.170 --> 01:34.800
You need to auto remediate the security errors and you have to codify the security processes.

01:35.410 --> 01:37.850
Hence Devsecops was born.

01:37.870 --> 01:46.090
Devsecops means implementing security in your DevOps pipeline, so let's understand it in a little bit

01:46.090 --> 01:46.960
deeper level.

01:47.670 --> 01:53.280
So when we talk about security, what are the security components in a modern application?

01:53.880 --> 01:56.840
Everything starts with infrastructure as code.

01:56.850 --> 02:03.510
So you need to think about securing that infrastructure as code, such as maybe you are using a security

02:03.510 --> 02:05.730
group which is too permissive.

02:06.150 --> 02:10.050
You are using a non secure army with your easy to.

02:11.070 --> 02:16.830
Then you need to think about code security, so you need to run some static code analysis.

02:16.860 --> 02:22.740
This part is also known as fast or static application security testing.

02:23.070 --> 02:29.570
Maybe you have left your code vulnerable to attacks, so static code analysis is going to detect all

02:29.580 --> 02:30.750
those vulnerabilities.

02:30.750 --> 02:34.470
So a lot of you probably are familiar with static code analysis.

02:34.470 --> 02:40.260
So if you think from the DevOps perspective, you are still going to run the same static core analysis,

02:40.260 --> 02:47.100
but all it means is you need to automate this analysis rather than someone manually triggering it and

02:47.100 --> 02:49.500
then notifying you if there is a vulnerability.

02:49.500 --> 02:56.400
Moving along with the code security, you should not be hard coding password, hot coding skills, etc.

02:56.490 --> 02:59.580
Maybe you are poorly managing secrets.

02:59.580 --> 03:05.430
And finally, maybe your code is vulnerable to SQL injection, cross-site scripting, etc..

03:05.430 --> 03:11.670
Another example of security in your code could be maybe you are using some vulnerable packages.

03:11.700 --> 03:19.560
Now, moving on to the dynamic security, this one is also known as DEST or dynamic application security

03:19.560 --> 03:20.400
testing.

03:20.400 --> 03:25.260
Static code analysis means the code is not implemented yet.

03:25.260 --> 03:31.920
Generally, static code analysis is run before the code is compiled, whereas the dynamic security comes

03:31.920 --> 03:35.820
into play when the code is deployed and running your application.

03:35.820 --> 03:39.360
So maybe when you deployed your code, everything was great.

03:39.360 --> 03:43.380
But down the line one of the packages, some vulnerability was found.

03:43.380 --> 03:48.930
So you need to have some sort of way to detect those vulnerability on the running applications.

03:49.380 --> 03:55.950
And you are running your code on some sort of operating system used in Easy to Miss.

03:55.950 --> 03:59.910
Maybe some of the packages became vulnerable for the operating system.

03:59.910 --> 04:04.620
So you need to have a way to detect those vulnerable packages and auto to remediate.

04:04.650 --> 04:06.810
Kubernetes is super popular right now.

04:06.810 --> 04:12.750
So I just want to go over some of the areas that comes into play for Kubernetes security.

04:13.200 --> 04:18.600
So one superpower of Kubernetes is, since it is open source, it is very flexible.

04:18.600 --> 04:22.140
You can adopt any open source tools and run with it.

04:22.140 --> 04:25.470
But then the downside is there are more attack areas.

04:25.710 --> 04:29.610
So Kubernetes, you need to worry about the security of your image.

04:29.970 --> 04:34.020
Can someone escalate the privilege and attack the underlying host?

04:34.260 --> 04:38.130
Can someone run the Docker container in root mode?

04:38.400 --> 04:43.440
You have to think about the host security host, as in where your pods are running.

04:43.710 --> 04:51.090
One example could be easy to worker nodes, so you need to worry about Cisco bench noncompliance reports

04:51.090 --> 04:52.980
or vulnerable mines.

04:52.980 --> 04:56.370
You want to think about pod and runtime security.

04:56.670 --> 05:03.600
Maybe your port security group is too open, the network policy may be too permissive, etc. Remember

05:03.600 --> 05:10.770
that all devsecops means that all the security areas that you already know with traditional security

05:10.770 --> 05:13.050
model, you just need to automate it.

05:13.890 --> 05:18.990
So a couple of fancy terms you need to know for interviews as well as in your projects.

05:19.350 --> 05:22.260
The first term is defense in depth.

05:22.800 --> 05:31.740
Defence in depth means you need to apply security in all layers so it makes it harder for the attacker

05:31.740 --> 05:33.360
to abuse your system.

05:33.540 --> 05:39.330
So if we take a look at an example, let's say this is a traditional three tier application with the

05:39.330 --> 05:46.140
front end, the back end and the database, you need to think about the ways this system can get attacked.

05:46.140 --> 05:49.920
So the public facing elastic load balancer can be attacked.

05:49.920 --> 05:51.270
So how do you secure that?

05:51.270 --> 05:58.290
You integrate a web application firewall or a blue shield and then some sort of frontend code is running

05:58.290 --> 06:02.820
in a jar file running within easy to that could get attacked.

06:02.820 --> 06:07.140
So how do you secure that you use proper security group.

06:07.290 --> 06:09.720
This should be running in private subnet.

06:09.720 --> 06:15.600
You should be running dynamic analysis tools and then the internal load balancer could get attacked.

06:15.600 --> 06:21.780
So make sure all of the traffic coming from these front DC tools can come to this load balancer.

06:22.200 --> 06:26.610
Similarly, the backend could get attacked, so you have to put measures for that.

06:27.090 --> 06:29.970
You are accessing some sort of database from your code.

06:30.240 --> 06:35.850
So that means there is some user ID password involved, so that could get compromised.

06:35.850 --> 06:37.170
So how do you prevent that?

06:37.170 --> 06:44.640
So you should use key encrypted secrets manager rather than saving user ID and password in plaintext

06:44.640 --> 06:47.460
in your repository or in a config file.

06:47.700 --> 06:53.700
Similarly, your database is one of the most important things in your application that could get attacked.

06:53.700 --> 06:55.410
How do you protect against that?

06:55.410 --> 07:03.240
You should encrypt your database with some sort of customer managed CMS keys and then only give access

07:03.240 --> 07:06.750
for those keys onto the roles of those easy tools.

07:07.230 --> 07:10.550
So note that we are not just applying the.

07:11.300 --> 07:13.490
In just one area, such as database.

07:13.490 --> 07:19.670
Since database is the most critical component of your system, if someone tries to attack the database,

07:19.790 --> 07:25.700
that hacker needs to go through all these layers the first load balancer, then the core, the second

07:25.700 --> 07:28.190
load balancer, then the backend code, etc..

07:28.940 --> 07:31.700
So that's what we mean by defense in depth.

07:31.790 --> 07:38.420
Similarly, when you are implementing Devsecops, you need to put security in all layers.

07:38.420 --> 07:45.170
So all these components such as provisioning a load balancer, provisioning EC2, creating a database,

07:45.170 --> 07:49.660
accessing database from the code, they could all be automated.

07:49.670 --> 07:53.380
So how would a defense in depth look like in Devsecops?

07:53.390 --> 07:58.580
So what that means is when you are provisioning your load balancer, make sure it is integrated with

07:58.580 --> 08:01.190
WAF and Blue Shield.

08:01.460 --> 08:07.160
Similarly, when you are creating your issues, make sure the security groups are not permissive, etc.

08:07.160 --> 08:11.030
and we are going to go through some tools that will help you automate this stuff.

08:11.060 --> 08:14.270
The second fancy term is shift left.

08:14.970 --> 08:21.420
So left means starting off a process to the right means end stage of a process.

08:21.420 --> 08:25.140
So typical development lifecycle will be coded first.

08:25.140 --> 08:28.950
The new build it, test it, deploy it and monitor it.

08:29.460 --> 08:35.470
So what shift left means is start integrating security from early phase.

08:35.490 --> 08:41.280
So if we go back to the previous example, if you think about it, in that traditional project model

08:41.280 --> 08:49.200
before Devsecops, the most time security will get engaged is when something is running.

08:49.200 --> 08:54.360
So you deploy your application and then some vulnerability came up and then security will jump in and

08:54.360 --> 08:55.170
try to fix it.

08:55.170 --> 09:02.700
So in the shift left Devsecops world, you integrate security measures as well as remediate before the

09:02.700 --> 09:04.080
application is deployed.

09:04.080 --> 09:09.000
So for example, before you deploy your application, you need to build and test your application.

09:09.240 --> 09:16.650
So you integrate some measures that detect vulnerability and halt the pipeline if some vulnerability

09:16.650 --> 09:17.550
is detected.

09:17.550 --> 09:23.820
And even before building and testing when you are coding, there should be some measures that automatically

09:23.820 --> 09:27.120
scans your code and detect vulnerability.

09:27.120 --> 09:27.540
All right.

09:27.540 --> 09:33.020
Now that we understand what is devsecops and why we need it, let's take a look at some of the dipstick

09:33.030 --> 09:34.250
ops pipelines.
