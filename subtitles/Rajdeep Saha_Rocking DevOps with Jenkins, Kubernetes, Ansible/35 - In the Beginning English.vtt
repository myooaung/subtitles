WEBVTT

00:00.120 --> 00:02.210
Welcome, guys and girls, to this lecture.

00:02.220 --> 00:06.930
In this lecture, we're going to answer the million dollar question.

00:06.930 --> 00:09.960
What is Docker container?

00:10.380 --> 00:10.920
All right.

00:10.920 --> 00:14.910
Let's try to understand this with an actual example.

00:15.360 --> 00:23.430
So you are the almighty happy developer and you develop some code for your project in development environment

00:23.640 --> 00:30.150
and the runtime engine for your development environment is Python 3.8 and you are importing a couple

00:30.150 --> 00:34.260
of dependencies, maybe requests and maybe kitchen sink.

00:34.260 --> 00:39.990
And you also have a configuration file with the DNS Tavis Name and the database connection.

00:40.170 --> 00:43.800
So everything works great in the development environment.

00:44.100 --> 00:47.760
Then you move your code to the test environment.

00:47.910 --> 00:53.850
In the test environment, the runtime engine is Python 3.6.

00:53.850 --> 01:01.050
So one of your code dependency works, but the other one, maybe the kitchen sink one breaks and your

01:01.050 --> 01:04.530
configuration file the format, it also works.

01:04.530 --> 01:09.600
So you are thinking, all right, I need to change the code a little bit.

01:09.600 --> 01:11.280
I guess that's okay.

01:11.910 --> 01:17.460
Then one fine day your code gets moved into prod.

01:17.460 --> 01:21.480
So prod runtime engine generally is always behind.

01:21.480 --> 01:29.730
So in prod your company is running Python 2.7, so they're both of your dependencies.

01:29.730 --> 01:37.650
Break the configuration file breaks and basically your code is crashing and burning at this point.

01:38.100 --> 01:41.820
So you are thinking, why did I take this job?

01:42.210 --> 01:46.170
So at this point, there are two kinds of developers.

01:46.200 --> 01:47.640
No judgment here.

01:47.640 --> 01:52.200
One kind of developer says, Hey, it worked fine in Dev.

01:52.230 --> 01:54.210
It's not working in production.

01:54.210 --> 01:57.360
Not my problem, it's the operations problem.

01:57.360 --> 02:02.100
The other kind of developers think it works on my machine.

02:02.100 --> 02:04.470
It works on development environment.

02:04.650 --> 02:14.160
What if I can package whatever my code needs to run in any environment and then ship that whole package

02:14.160 --> 02:15.810
into production?

02:15.810 --> 02:23.040
So one of the developer who thought like this is Solomon Hikes and that's how Docker Container was born

02:23.040 --> 02:24.630
in 2013.

02:24.630 --> 02:26.220
So what is a container?

02:26.310 --> 02:34.320
A container is an atomic self contained package of software that includes everything it needs to run

02:34.320 --> 02:39.360
code, runtime, libraries, packages, etc..

02:39.480 --> 02:47.340
Before we go further, a lot of the folks are confused about the term Docker image versus container,

02:47.340 --> 02:48.870
so let's clear it up.

02:49.020 --> 02:57.390
So once you package your code configuration dependencies and runtime engine, you create a Docker image,

02:57.420 --> 03:00.270
also known as container image.

03:00.300 --> 03:07.860
At this point, your application is not running, you just have the image of your application.

03:08.310 --> 03:14.730
And when you run the Docker image or container image, it creates a container.

03:14.850 --> 03:17.070
So let's understand the big picture.

03:17.070 --> 03:19.290
So this slide is very important.

03:19.290 --> 03:21.420
Make sure you understand the flow.

03:21.690 --> 03:27.630
So in the beginning you have your app, maybe it's running Java or Python or any other language.

03:27.990 --> 03:33.870
And then we have this file called Docker file, which Docker arises your app.

03:33.870 --> 03:40.950
So this Docker file basically says my application needs this dependencies, this configuration, this

03:40.950 --> 03:41.910
runtime.

03:41.910 --> 03:46.980
It also has a command to create the Docker image for your application.

03:47.220 --> 03:52.590
So once you have the Docker image, you have to save the Docker image somewhere.

03:52.800 --> 03:55.290
So that is called repository.

03:55.290 --> 04:03.660
So this is very similar to when you save your jar file for your Java application in a repository.

04:03.660 --> 04:10.590
So a couple of popular Docker image repository are Docker hub and Elastic Container Registry.

04:10.620 --> 04:14.820
Then your Docker image gets deployed into container.

04:14.820 --> 04:19.440
So this is when your app starts running inside the container.

04:19.440 --> 04:28.200
So one thing to note at this point, you can really run your application as container in any platform

04:28.200 --> 04:30.060
that supports Docker.

04:30.510 --> 04:35.070
So one of the most popular platform to run your container is Kubernetes.

04:35.070 --> 04:37.890
And Kubernetes has different flavors.

04:37.890 --> 04:43.980
So we of course, has Amazon X, which is the most popular, and we also have Google Kubernetes engine.

04:44.130 --> 04:51.570
But since Kubernetes is open source, you can install Kubernetes on vanilla ESI tools and run your container

04:51.570 --> 04:52.170
there.

04:52.500 --> 04:54.090
And that's not it.

04:54.090 --> 04:59.640
You can run into any Kubernetes cluster implementation even on prem.

04:59.940 --> 05:02.970
So this also comes up a lot in interviews.

05:02.970 --> 05:10.170
And also this is important to understand what is the difference between virtual machine such as AC tools

05:10.170 --> 05:12.150
versus containers?

05:12.510 --> 05:21.600
So containers and virtual machines have some similarity in resource isolation, but it functions differently.

05:21.600 --> 05:26.460
So virtual machines are an abstraction of physical hardware.

05:26.460 --> 05:36.480
Turning one server into many servers, the hypervisor allows multiple VMs to run on a single machine.

05:36.720 --> 05:45.420
But here the VM has your application, the libraries and runtimes, but it also has to have a guest

05:45.420 --> 05:47.010
operating system.

05:47.010 --> 05:53.100
And this guest operating system takes up tens of gigabytes of space.

05:53.490 --> 05:57.780
Also, this operating system can be slow to boot.

05:57.780 --> 06:06.210
So now if we take a look into container, containers are an abstraction at the application layer that

06:06.210 --> 06:11.400
packages code and dependencies together, multiple containers can run.

06:11.510 --> 06:17.270
On the same machine and share the operating system kernel with other containers.

06:17.780 --> 06:26.030
So since in this case we don't need to package up a guest operating system into our container, it takes

06:26.030 --> 06:29.190
way less space than your VM.

06:29.210 --> 06:36.800
So that's why even though the size of the underlying server is same for these two diagrams, I have

06:36.800 --> 06:40.460
put way more containers than the VM.

06:40.610 --> 06:43.940
So what are some of the advantages of Docker container?

06:44.420 --> 06:49.250
So since you are packaging everything you need to run your code.

06:49.460 --> 06:51.830
It is platform independent.

06:51.830 --> 06:55.430
It's truly build it once and run it anywhere.

06:55.460 --> 06:58.890
So let's go back to our side developer.

06:58.910 --> 07:07.100
So instead of him just deploying the code in different environment with different runtime engines.

07:07.130 --> 07:08.960
Now he got smarter.

07:08.990 --> 07:10.890
He packaged his code.

07:10.910 --> 07:18.440
His runtime engine, which is Python 3.8, his dependencies and any other necessary components into

07:18.440 --> 07:19.490
a Docker image.

07:19.490 --> 07:26.150
And that Docker image runs seamlessly in dev test and production.

07:26.510 --> 07:29.000
So his life is great again.

07:29.330 --> 07:37.040
OC Going back to the advantages of Docker container, next advantage is better resource utilization

07:37.370 --> 07:41.520
since containers do not require a separate operating system.

07:41.540 --> 07:45.330
They use much less resources than VMM.

07:45.350 --> 07:52.700
This makes it possible to run many more containers than VMs on a single server, and since containers

07:52.700 --> 07:59.870
have a higher utilisation level with regards to underlying hardware, you require less hardware resulting

07:59.870 --> 08:02.330
in a reduction of costs.

08:02.360 --> 08:06.060
Next advantage is application isolation.

08:06.080 --> 08:11.890
Although containers run on the same server, they are isolated from each other.

08:11.900 --> 08:19.970
If one application crashes, other containers will keep running flawlessly and don't experience any

08:19.970 --> 08:21.380
technical problems.

08:22.050 --> 08:30.690
This isolation also decreases security risks if one application is hacked or breached by malware.

08:30.840 --> 08:36.600
Any negative effects will not spread to the other running containers.

08:36.630 --> 08:42.150
Containers are fast to create, replicate or destroy.

08:42.800 --> 08:50.720
As mentioned before, containers are lightweight and start very, very quickly because they do not need

08:50.720 --> 08:52.400
an operating system boot.

08:52.430 --> 08:57.770
What this means is your application can scale very, very quickly.

08:57.770 --> 09:03.230
The last but not the least advantage is container orchestration.

09:03.230 --> 09:04.900
Problem is solved.

09:04.910 --> 09:11.780
There are many great container orchestrator available today in the market that does a lot of heavy lifting,

09:11.780 --> 09:14.780
allowing you to focus on the business.

09:14.780 --> 09:17.750
Which brings us to the next question.

09:17.750 --> 09:21.350
What the heck is container orchestrator?

09:21.440 --> 09:26.930
All right, guys and girls join me in the next lecture to find answer to that question.
