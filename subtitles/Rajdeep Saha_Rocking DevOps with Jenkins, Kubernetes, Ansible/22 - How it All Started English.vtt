WEBVTT

00:00.090 --> 00:02.390
Welcome, guys and girls, to this lecture.

00:02.400 --> 00:07.550
In this lecture, we are going to learn about infrastructure as code.

00:07.560 --> 00:09.720
So let's start from the beginning.

00:09.720 --> 00:17.670
In not so olden days, everyone was running in data center and you are probably thinking, I want to

00:17.670 --> 00:19.260
fly in the cloud.

00:19.260 --> 00:26.430
And then thankfully cloud got invented and people like you and me started learning it.

00:26.430 --> 00:29.850
And this is how things went in the beginning.

00:29.850 --> 00:37.140
And almighty developer logs into the management console in one of their account and start spinning up

00:37.140 --> 00:37.460
a w.

00:37.470 --> 00:41.940
S infrastructure like AC two ideas lambda.

00:41.940 --> 00:49.290
And that was pretty powerful and the developer was feeling good until the boss said, Hey, that was

00:49.290 --> 00:50.460
just one account.

00:50.460 --> 00:55.710
Can you spin up the same infrastructure in the rest of the 99 accounts?

00:55.710 --> 01:02.730
So that is pretty painful to log into the console for all the accounts for the enterprise and spin up

01:02.730 --> 01:04.350
all the stuff manually.

01:04.350 --> 01:09.270
And also it is very easy to mess something up in the console.

01:09.270 --> 01:14.970
If you forget to click something, forget to select the right option from the top down.

01:14.970 --> 01:17.100
Your infrastructure could be messed up.

01:17.100 --> 01:23.130
So at this point, the developer was probably saying, I just want to code cool stuff.

01:23.130 --> 01:26.280
So say hello to infrastructure as code.

01:26.730 --> 01:33.870
So instead of the developer going to the management console and spinning all this infrastructure manually,

01:34.020 --> 01:38.160
he or she writes some code to provision the infrastructure.

01:38.700 --> 01:46.710
So this code will look something like, hey, spin one easy to with this configuration, spin one Amazon

01:46.710 --> 01:53.640
ideas with this kind of parameters and this kind of configuration and spin it up to Lambda with this

01:53.640 --> 01:55.380
much memory, this much time out.

01:55.380 --> 01:56.670
And this is the code.

01:56.670 --> 01:58.500
So that's how infrastructure is.

01:58.500 --> 01:59.970
Code was born.

01:59.970 --> 02:05.850
So it is a process of provisioning and managing infrastructure using code.

02:05.850 --> 02:09.540
It is human readable and machine consumable.

02:10.170 --> 02:12.840
Since this is machine consumable.

02:12.840 --> 02:21.720
What that means is you can rerun the same code in multiple accounts and spin up the same infrastructure

02:21.840 --> 02:28.950
without you going into the console of all these accounts and spinning things up manually in a w.

02:28.950 --> 02:34.350
S, there are two services which lets you codify your infrastructure.

02:34.350 --> 02:42.360
One is cloud formation and the newest one is a w CDK or a W s cloud development kit.

02:42.390 --> 02:45.720
We are going to learn about both of these in this course.

02:45.720 --> 02:48.930
So what are some of the benefits of infrastructure code?

02:48.930 --> 02:57.060
First is visibility as infrastructure as code serves as a very clear reference of what resources are

02:57.060 --> 03:00.030
on your account and what their settings are.

03:00.060 --> 03:07.110
You don't have to navigate to the console to check the parameters and all the different settings.

03:07.290 --> 03:11.700
It makes it very easy to track and manage infrastructure.

03:11.730 --> 03:13.530
Next is stability.

03:13.530 --> 03:20.400
If you accidentally change the wrong setting or delete the wrong resource using the console, you can

03:20.400 --> 03:21.390
break things.

03:21.390 --> 03:27.240
But infrastructure is code is a piece of code, so you can fashion control it.

03:27.240 --> 03:35.070
Using Git, you can have proper branching strategy, you can review it and then standardize the template.

03:35.100 --> 03:39.540
It helps prevent those kind of accidental mess ups.

03:39.540 --> 03:44.700
One of the most important benefit of infrastructure code is scalability.

03:44.700 --> 03:50.160
With infrastructure as code, you can write it once and reuse it many times.

03:50.160 --> 03:58.020
This means that one well written template can be used as the basis for multiple services in multiple

03:58.020 --> 04:02.220
regions, making it much easier to horizontally scale.

04:02.220 --> 04:09.390
Next benefit is security, since infrastructure as code gives you a unified template for how to deploy

04:09.390 --> 04:10.590
your architecture.

04:10.590 --> 04:18.810
If you create one well secured architecture, you can reuse it multiple times and you know that each

04:18.810 --> 04:22.380
deployed function is following the same settings.

04:22.380 --> 04:25.800
Also, infrastructure as code is transactional.

04:25.800 --> 04:34.410
What that means is it not only creates resources on your account, but also works for them to stabilize

04:34.410 --> 04:35.730
while they start.

04:35.820 --> 04:42.330
It verifies that provisioning was successful and if there is a failure, it can gracefully roll the

04:42.330 --> 04:45.900
infrastructure back to a past non good state.

04:46.080 --> 04:49.650
Basically based on the results of the previous transactions.

04:49.650 --> 04:51.960
You can tell it what to do next.

04:51.960 --> 04:58.650
Now that we understand what is infrastructure as code and some of its benefits, let's take a look at

04:58.650 --> 04:59.910
a cloud formation.

05:00.110 --> 05:01.350
In our next lecture.

05:01.370 --> 05:03.760
All right, guys and girls join me in the next lecture.
