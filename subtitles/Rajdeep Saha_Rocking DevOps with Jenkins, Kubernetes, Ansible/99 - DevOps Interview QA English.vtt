WEBVTT

00:00.180 --> 00:00.810
All right.

00:00.810 --> 00:05.580
So now at this point, we went through the basic question answer in this lecture, we're going to go

00:05.580 --> 00:09.150
through the DevOps interview question answer for moderate level.

00:09.720 --> 00:16.590
So one difference you would see from basic to moderate to advanced is not just for DevOps, for any

00:16.590 --> 00:18.600
other cloud interview or any interview.

00:18.930 --> 00:22.020
Basic questions deal with the definition so they will.

00:22.050 --> 00:24.510
Most of the questions will be like, what is this?

00:24.990 --> 00:26.130
What does what?

00:26.130 --> 00:28.170
What is the command for this right?

00:28.170 --> 00:29.520
Or What are the benefits?

00:29.610 --> 00:36.150
As you go to moderate and advanced, there will be more scenario based questions like How would you

00:36.150 --> 00:37.410
do this?

00:37.410 --> 00:41.580
Or like, how would you convert from this to this?

00:41.580 --> 00:46.170
Or How would you migrate applications from on prem to cloud, etc.?

00:46.170 --> 00:53.310
So moderate and advanced question kind of tests that you actually have hands on experience and not just

00:53.310 --> 00:54.570
theoretical experience.

00:54.900 --> 00:55.290
All right.

00:55.290 --> 00:58.890
With that being said, let's go through the moderate questions.

01:01.350 --> 01:03.420
I mentioned some challenges of DevOps.

01:03.420 --> 01:05.250
How would you solve them?

01:05.700 --> 01:10.530
Can you explain me the automated flow of provisioning resources?

01:10.800 --> 01:13.610
Do you recommend cloud formation or TerraForm?

01:13.620 --> 01:14.430
Why?

01:15.040 --> 01:18.640
How can you perform automated testing in DevOps?

01:19.060 --> 01:20.470
What is Jenkins?

01:20.470 --> 01:20.980
Urgent.

01:21.010 --> 01:24.040
Give me some examples of different agents.

01:24.460 --> 01:28.300
How do you store credentials in Jenkins securely?

01:28.540 --> 01:32.050
What are some ways to trigger a Jenkins job?

01:32.470 --> 01:37.360
I want to trigger my Jenkins job as soon as I check in my code in GitHub.

01:37.390 --> 01:39.160
How can you achieve that?

01:39.580 --> 01:43.720
How will you pass values from one Jenkins job to another?

01:44.400 --> 01:47.790
Tell me some examples of Jenkins environment variables.

01:48.180 --> 01:50.850
What is Jenkins Post section?

01:50.850 --> 01:53.850
In which cases should I use it?

01:54.590 --> 01:59.210
What is the difference between Jenkins file and cloud formation or TerraForm?

02:00.260 --> 02:04.070
Explain the workflow to provision a Kubernetes cluster.

02:04.910 --> 02:05.600
Explain.

02:05.600 --> 02:10.340
How will you implement a microservice to Kubernetes cluster using a pipeline?

02:12.690 --> 02:18.480
What is the easiest way to convert a Jenkins scripted job to pipeline job?

02:18.810 --> 02:22.770
What is the difference between Jenkins DSL and pipeline?

02:23.310 --> 02:26.490
Can you tell me the components of a Jenkins file?

02:26.910 --> 02:30.540
How will you troubleshoot a failed Jenkins job?

02:30.960 --> 02:35.790
How do you define and pass parameters from one Jenkins job to another?

02:36.270 --> 02:41.040
How to create a backup copy of the files for your Jenkins.

02:41.610 --> 02:45.780
How will you implement manual approval in a Jenkins pipeline?

02:46.470 --> 02:47.860
What is gitops?

02:47.880 --> 02:50.700
What are the advantages of Gitops?

02:50.730 --> 02:51.600
All right.

02:51.600 --> 02:57.000
Like I said before, please pause the video, go through the questions and think of the answers.

02:57.000 --> 03:02.430
Mark down the questions that you are not able to answer or you are not satisfied with your answer.

03:02.430 --> 03:06.060
Then on pause, then go through the notes on the answers.

03:06.390 --> 03:06.930
All right.

03:06.930 --> 03:09.810
Question number one mentioned some challenges of DevOps.

03:09.810 --> 03:11.400
How would you solve them?

03:11.730 --> 03:15.430
We have a separate lecture for this, so make sure you study that.

03:15.450 --> 03:17.880
Generally, DevOps has a two challenges.

03:17.880 --> 03:22.770
One is the technical side, where the landscape changes so rapidly.

03:22.770 --> 03:25.140
Every month, new DevOps tool comes up.

03:25.140 --> 03:27.300
It is very difficult to keep up.

03:27.480 --> 03:32.430
And the cultural side is since now the developer and operation is the same person.

03:32.430 --> 03:39.720
And if some person was a developer before and now he or she is forced to do support as well, they might

03:39.720 --> 03:40.590
not like this.

03:41.010 --> 03:44.250
Also check out the video for how you are going to solve them.

03:44.460 --> 03:50.100
So whenever you get an interview question about challenges, it's very important that you mention how

03:50.100 --> 03:51.750
can you solve those challenges?

03:51.960 --> 03:53.730
Next question can you explain me?

03:53.730 --> 04:00.900
The automated flow of provisioning is resources very important not just for interviews as well as your

04:00.900 --> 04:02.790
real world projects.

04:03.030 --> 04:09.570
So make sure you check out the lecture of how to implement cloud formation with Jenkins and understand

04:09.570 --> 04:10.170
the flow.

04:11.870 --> 04:13.940
Do you recommend cloud formation or TerraForm?

04:13.940 --> 04:14.630
Why?

04:14.660 --> 04:21.290
These are the questions where there are no definite answer because there are pros and cons of both.

04:21.320 --> 04:26.390
So what the interviewer is looking for is that you have given some thought or you have actually used

04:26.390 --> 04:27.500
one or the other.

04:28.010 --> 04:32.990
So you could say like cloud formation is a is native infrastructures code.

04:32.990 --> 04:36.110
So it provides supports if anything breaks.

04:36.170 --> 04:38.120
Cloud formation is quite stable.

04:38.420 --> 04:42.110
If you have a cloud formation from a couple years back, it will still run.

04:42.110 --> 04:47.480
It's backward compatible and it is deeply integrated with other tools.

04:47.840 --> 04:53.630
For example, a service catalog, if you want to standardize some templates, very easy to do that with

04:53.690 --> 04:54.650
cloud formation.

04:55.220 --> 04:58.280
TerraForm, on the other hand, is cloud agnostic.

04:58.280 --> 05:04.010
So you can run the same TerraForm script in multiple clouds with minimal changes.

05:04.010 --> 05:08.160
But then the problem is TerraForm is not backward compatible.

05:08.180 --> 05:15.650
This is one of the thing about TerraForm with new version changes, TerraForm Change how it should be

05:15.650 --> 05:17.210
coded, which is kind of painful.

05:17.210 --> 05:22.160
So if you have a terraform from a couple of years back and you want to run it now, chances are it's

05:22.160 --> 05:23.200
not going to run.

05:23.210 --> 05:25.910
How can you perform automated testing in DevOps?

05:25.910 --> 05:30.710
So I have a separate video on that, so make sure to check it out.

05:31.640 --> 05:32.150
What?

05:32.150 --> 05:33.140
Is Jenkins urgent.

05:33.170 --> 05:35.390
Give me some examples of different agents.

05:35.390 --> 05:39.760
So make sure you study different Jenkins file components.

05:39.770 --> 05:40.070
Right.

05:40.070 --> 05:43.700
So Agent is one of the components such as note etc..

05:44.060 --> 05:45.260
So you can give some examples.

05:45.260 --> 05:51.860
Some of the different Jenkins agents could be just a regular easy to load or docker container image,

05:51.860 --> 05:52.610
etc..

05:52.610 --> 05:54.740
How do you store credentials in Jenkins?

05:54.740 --> 05:55.520
Securely?

05:55.640 --> 05:56.900
I have a separate lecture.

05:56.900 --> 06:02.570
Jenkins has a separate credential section, so make sure you go through that video.

06:03.290 --> 06:06.320
What are some ways to trigger a Jenkins job?

06:06.320 --> 06:13.850
So the most popular way is are periodic checking and GitHub webhook and then expect some follow up questions

06:13.850 --> 06:16.250
or pros and cons of either.

06:16.250 --> 06:17.510
Watch that lecture.

06:17.660 --> 06:21.440
I want to trigger my Jenkins job as soon as I check in my code in GitHub.

06:21.440 --> 06:22.760
How can you achieve that?

06:23.150 --> 06:27.770
So basically, interviewer wants to know about GitHub web hooks.

06:28.130 --> 06:34.400
So instead of you pulling the repository using webhook, anytime something changes in the repository,

06:34.400 --> 06:39.260
GitHub can send it to the Jenkins job and your job will get submitted.

06:39.260 --> 06:41.870
And that's how most of the Real World Project works.

06:42.230 --> 06:46.670
Next question How will you pass values from one Jenkins job to another?

06:47.210 --> 06:51.980
It's a very practical question, so make sure you watch that lecture.

06:52.010 --> 06:59.570
This is also explained in detail in the Kubernetes workflow, where one job creates the new Docker container

06:59.570 --> 07:08.420
image, tags it with a unique tag, and then pass those tags to the next job, which updates the manifest

07:08.420 --> 07:09.830
file for the Kubernetes.

07:09.860 --> 07:10.700
Next question.

07:10.700 --> 07:13.520
Tell me some examples of Jenkins and environment variables.

07:13.520 --> 07:17.270
So you we use the environment variables throughout course.

07:17.480 --> 07:20.420
Some of the popular ones are build number.

07:20.420 --> 07:24.290
So every time you submit a Jenkins job, it gets a unique build number.

07:24.770 --> 07:30.410
So the environment variable for that is build, underscore, number, build, underscore, ID, build,

07:30.420 --> 07:36.410
underscore, attack, build, underscore, URL, etc. and even jenkins underscore URL.

07:36.920 --> 07:39.440
So help some of these examples handy.

07:39.470 --> 07:41.180
What is Jenkins post section?

07:41.180 --> 07:42.980
In which case should I use it?

07:43.310 --> 07:45.380
So check out the lecture for that.

07:45.800 --> 07:51.290
So Jenkins post can be for the whole Jenkins job or a particular section.

07:51.300 --> 07:53.000
So study up on those.

07:53.000 --> 07:56.750
What is the difference between Jenkins file and cloud formation or TerraForm?

07:57.260 --> 07:59.000
So this is a good question.

07:59.000 --> 08:05.600
So basically interviewer wants to know if you have the high level understanding of different infrastructure

08:05.600 --> 08:08.960
as codes as well as pipeline as code.

08:09.600 --> 08:18.630
So Jenkins file codifies what the Jenkins job needs to do and cloud formation or TerraForm codifies

08:18.630 --> 08:21.300
provisioning infrastructure in the cloud.

08:21.960 --> 08:29.220
You can use cloud formation or terraform inside Jenkins file, but the opposite is not true.

08:29.250 --> 08:36.450
You could give an example that if you want to provision, let's say Amazon EC2 API, Gateway Lambda,

08:36.450 --> 08:42.810
you can put everything in a cloud formation or TerraForm template and you can put the command to run

08:42.810 --> 08:47.520
those templates inside the Jenkins file and use the Jenkins file in a Jenkins job.

08:47.520 --> 08:51.870
And then if the interviewer wants to know what is the difference between cloud formation and TerraForm,

08:51.870 --> 08:52.950
I'll recover that.

08:52.950 --> 08:54.300
So check that question out.

08:54.330 --> 08:57.070
Explain the workflow to provisioning Kubernetes cluster.

08:57.090 --> 08:59.580
Super important right now.

08:59.580 --> 09:06.060
Kubernetes is super hot, so make sure you go through the Kubernetes Jenkins workflow.

09:06.090 --> 09:06.360
When?

09:06.360 --> 09:11.430
How will you implement a microservice to Kubernetes cluster using a pipeline?

09:11.520 --> 09:15.390
So this question obviously requires some Kubernetes knowledge.

09:15.390 --> 09:22.110
The interviewer is assuming that you know how to create a microservice in the Kubernetes world, and

09:22.110 --> 09:28.470
then specifically for the DevOps app that the interviewer is expecting that you know how to deploy that

09:28.470 --> 09:30.360
microservice to Kubernetes.

09:30.360 --> 09:35.970
So we have been through this in detail using the Kubernetes Gitops chapter.

09:35.970 --> 09:43.290
So study that if the interviewer does not mention Kubernetes and says, how will you implement a microservice

09:43.290 --> 09:45.630
to use using a pipeline?

09:45.630 --> 09:48.630
So remember that microservice can run on easy too.

09:48.660 --> 09:50.190
It can run on lambda.

09:50.790 --> 09:55.770
So if you are not confident with Kubernetes and the interviewer kind of keeps it open, then you could

09:55.770 --> 09:58.680
say, Yeah, I will provision AC too.

09:58.680 --> 10:05.070
And using Ansible I will deploy my software and based on different microservice I can have different

10:05.070 --> 10:07.260
order, scaling group, etc..

10:07.320 --> 10:08.400
So next question.

10:08.400 --> 10:12.210
What is the easiest way to convert a Jenkins script job to pipeline job?

10:12.210 --> 10:14.460
So pipeline job is newer.

10:14.700 --> 10:19.890
It it has advantages like you can restart from any stage, etc..

10:20.460 --> 10:26.490
I have a separate lecture on this to convert the Jenkins files from the scripted job to pipeline job.

10:26.490 --> 10:29.110
And if you want to record it, it's very tedious.

10:29.130 --> 10:31.770
Instead, you should use the script section.

10:31.770 --> 10:35.520
So check out the example I have given a next question.

10:35.520 --> 10:38.280
What is the difference between Jenkins DSL and Pipeline?

10:38.280 --> 10:39.780
I have separate lecture on that.

10:39.780 --> 10:40.800
Check that out.

10:40.800 --> 10:45.300
Can you tell me components of a Jenkins file so you could see like this part?

10:45.330 --> 10:50.880
This one is important because you could be asked in a way that what is the agent?

10:50.880 --> 10:56.310
What is a node, what is the post section or interviewer can ask you, can you tell me components of

10:56.310 --> 10:59.250
a Jenkins file and make sure you understand the structure?

10:59.250 --> 11:04.290
So go through those lectures, name the structures and go over the important components.

11:04.530 --> 11:08.550
Next question How will you troubleshoot a failed Jenkins job?

11:08.550 --> 11:11.970
So here you have to say that I will go to the console.

11:12.000 --> 11:17.040
Output of the job console output will have the error message.

11:17.040 --> 11:23.010
And ideally my job should be a pipeline job divided into different stages.

11:23.010 --> 11:30.360
And depending on the nature of the workflow, I can restart from that particular stage or I can restart

11:30.510 --> 11:31.560
from the top.

11:31.830 --> 11:36.390
And sometimes the problem could be outside of the Jenkins job.

11:36.390 --> 11:41.310
So let's say I submitted a cloud formation and the cloud formation failed.

11:41.400 --> 11:46.770
And the Jenkins job console is going to give us some error message that that step failed.

11:46.770 --> 11:54.840
But for deeper investigation, I need to go to a console and the cloud formation and check out the cloud

11:54.840 --> 11:58.710
formation output and the related resources in OS to troubleshoot.

11:59.190 --> 12:03.840
But the first starting point will always be the console output of Jenkins.

12:04.470 --> 12:08.730
Next question How do you define and pass parameters from one Jenkins job to another?

12:09.180 --> 12:13.710
Very similar to how you pass values from one Jenkins job to another.

12:13.710 --> 12:21.450
Check out the Kubernetes workflow video or I have a separate lecture on this on the commonly used Jenkins

12:21.450 --> 12:22.380
example as well.

12:22.380 --> 12:23.340
So check it out.

12:23.370 --> 12:28.170
Next question how to create a backup copy of the files for your Jenkins.

12:28.170 --> 12:34.260
So when you want to think of backups of Jenkins, so it is basically the build jobs that you have created,

12:34.260 --> 12:38.640
the configuration, the node configurations, build, history, etc..

12:38.670 --> 12:42.690
So Jenkins at the end of the day runs on some kind of infrastructure.

12:42.690 --> 12:52.560
So if you are running Jenkins on EC2, so it's basically being backed up on the EBS of the EC2 and all

12:52.560 --> 12:53.460
this information.

12:53.460 --> 12:59.550
The build history configuration is saved in the folder called Jenkins Underscore Home.

12:59.550 --> 13:05.100
So these Jenkins underscore home will point to a actual directory.

13:05.280 --> 13:09.180
So I showed this when you are going to Jenkins console in an easy to.

13:09.270 --> 13:12.330
It will be saved in a particular directory.

13:12.330 --> 13:19.230
If you run Jenkins in local, it will be saved in a local folder, etc. So at the end of the day, you

13:19.230 --> 13:27.090
need to take backup of that folder so you could run like a cron job which goes and periodically backs

13:27.090 --> 13:28.530
up that folder.

13:29.040 --> 13:36.360
On a higher level, you can even back up the EBS where the Jenkins is installed and running using it

13:36.780 --> 13:39.030
as backup tools like NWS backup.

13:39.630 --> 13:45.060
Or you could use a backup plugin in Jenkins.

13:45.510 --> 13:52.200
Personally, I like the answers that where you go and take a backup using a crunch job or use that as

13:52.200 --> 13:53.640
backup to backup the abs.

13:53.640 --> 14:00.700
And then if the virtual machine crashes, you can use that backup to create new easy tools.

14:00.720 --> 14:05.460
Next question How will you implement manual approval in the Jenkins pipeline?

14:05.550 --> 14:08.970
And you do that using the input command in Jenkins file.

14:08.970 --> 14:10.350
So I have a separate lecture on that.

14:10.350 --> 14:11.490
So check it out.

14:11.730 --> 14:12.630
Last question.

14:12.630 --> 14:13.670
What is Gitops?

14:13.680 --> 14:15.500
What are the advantages of Gitops?

14:15.510 --> 14:19.580
So now Gitops is coming more and more in the DevOps.

14:19.590 --> 14:21.750
Again, I have a separate chapter on this.

14:21.750 --> 14:28.020
If your job has anything to do with Kubernetes, you must study this right?

14:28.020 --> 14:31.710
Because this is the newest way to deploy into Kubernetes.

14:31.710 --> 14:38.460
The traditional way of deploying to Kubernetes, using Jenkins all the way or even using GitLab all

14:38.460 --> 14:42.840
the way is getting kind of old and deprecated.

14:43.050 --> 14:50.340
I assume with the next few years, Gitops will replace all continuous delivery or continuous deployment

14:50.340 --> 14:51.810
part for Kubernetes.

14:52.260 --> 14:53.000
All right, folks.

14:53.010 --> 14:55.260
So those are the moderate answers.

14:55.620 --> 14:59.730
So now in the next lecture, let's jump into the advanced question answer.
