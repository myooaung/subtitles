WEBVTT

00:01.920 --> 00:06.930
At this point, we understand the high level flow of distributed version control system.

00:07.200 --> 00:09.750
Let's take a closer look at the gate workflow.

00:09.780 --> 00:16.680
This lecture is pretty important because we will go over the core gate commands that you will use throughout

00:16.680 --> 00:19.560
the course as well as your real world projects.

00:19.590 --> 00:23.130
For simplicity, we are just going to take one developer.

00:23.130 --> 00:28.260
So the left part where there is local repository, it actually looks like this.

00:28.260 --> 00:33.600
So everything on the left of the dotted line is in the user's local machine.

00:33.600 --> 00:35.610
So there are three distinct areas.

00:35.610 --> 00:37.380
First is workspace.

00:37.380 --> 00:44.580
So workspace you can think of as the local folder where the user is creating or modifying the code in

00:44.580 --> 00:46.320
this case, file one.

00:46.320 --> 00:52.530
Then we have this index or staging area where the changes need to be staged.

00:52.530 --> 00:58.290
As the name suggests, the staging area will closely mimic the local repository.

00:58.290 --> 01:03.330
This will become clear in a minute and then we have the local repository.

01:03.330 --> 01:09.210
Once you are done changing the file, you run this command git add name of the file.

01:09.210 --> 01:14.880
Once you run this command, the file will be added to the index or staging area.

01:14.880 --> 01:18.480
So at this point the file one is staged.

01:18.480 --> 01:26.820
Once you are ready to move this file to local repository, you will run the commit command, get commit

01:26.850 --> 01:31.980
name of the file and then minus M and then a comment.

01:31.980 --> 01:38.730
This comment is quite important because in your audit tracking log comments for each change will be

01:38.730 --> 01:39.480
displayed.

01:39.480 --> 01:45.150
Once this git commit command is executed, the file will be moved to local repository.

01:45.150 --> 01:52.770
And finally, to move the file to the remote repository, you run a push command such as git push and

01:52.770 --> 01:57.060
that will move the file from the local repository to GitHub.

01:57.480 --> 02:05.940
Now note that even though this file has been now moved to remote repository, the staging area still

02:05.940 --> 02:07.080
has the file.

02:07.110 --> 02:15.510
As we said, the name staging should mimic the production as much as possible, since the local repository

02:15.510 --> 02:20.220
and remote repository both has the file, so does the staging area.

02:20.370 --> 02:26.790
So let's say this user now modifies file one, adds file two and file three.

02:26.790 --> 02:31.710
So when the user runs, get add file 15253.

02:31.740 --> 02:41.190
Alternatively, you can run git add minus a that means all that will stage all new modified and deleted

02:41.190 --> 02:41.790
files.

02:41.790 --> 02:44.790
I'm going to come to this deleted part in a minute.

02:44.790 --> 02:52.680
So once this comment is run, the staging area will have the modified file one, file two and file three,

02:52.680 --> 03:00.240
and then the user runs git commit file one file to file three minus m added new feature one.

03:00.240 --> 03:05.520
Alternatively you can just run git commit minus M added new feature one.

03:05.520 --> 03:08.940
In this case all the change file will be picked up.

03:08.940 --> 03:15.510
So once this command is run, the changes will be moved from the staging to the local repository.

03:15.510 --> 03:21.060
And finally, when you run git push, all the changes will be moved to the remote repository.

03:21.060 --> 03:29.500
Now let's say you removed file three from your local workspace, then you run git add file one or get

03:29.580 --> 03:34.680
add dash here even though you are saying git add file one.

03:34.680 --> 03:41.070
But since the file one is removed from the workspace by executing this command, that will actually

03:41.070 --> 03:43.620
remove the file from the staging area.

03:43.620 --> 03:50.160
And furthermore, if you run git commit minus M and then a comment that will remove the file from the

03:50.160 --> 03:51.420
local repository.

03:51.420 --> 03:56.070
And then when you run git push that will remove it from the remote repository.

03:56.460 --> 04:00.600
There are other ways to remove files rather than doing through git add.

04:00.600 --> 04:01.950
But keep this in mind.

04:01.950 --> 04:06.360
You might get this asked in your interview because this is kind of a trick question.

04:06.360 --> 04:14.520
Also, each commit will have their separate ID full snapshot along with details for audit.

04:14.610 --> 04:20.100
We are going to take a detailed look at the audit log when we do the demo next, there's another way

04:20.100 --> 04:24.960
to add files to the local repository skipping the index or staging area.

04:24.960 --> 04:34.680
You can run git commit dash a dash m and then a comment or git come a dash am that will skip the staging

04:34.680 --> 04:38.430
area and the file will be added directly to the local repository.

04:38.430 --> 04:41.400
However, this is not recommended.

04:41.400 --> 04:44.760
All right, let's jump into our very first git demo.
