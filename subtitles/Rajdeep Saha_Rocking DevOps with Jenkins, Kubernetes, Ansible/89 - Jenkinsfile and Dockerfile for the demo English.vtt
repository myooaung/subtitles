WEBVTT

00:02.180 --> 00:04.580
Let's go over the GitHub repositories first.

00:04.580 --> 00:09.500
This is the Kubernetes code repository where we have our application code and Docker file.

00:09.530 --> 00:12.170
Our application code is API.

00:12.200 --> 00:17.900
It is a very simple Python program which is importing the library flask and just returning.

00:17.900 --> 00:19.010
Hello Docker.

00:19.010 --> 00:26.450
The file requirements text lists the external library flask and in this case we are specifically using

00:26.450 --> 00:29.450
the version 1.1.1 the Docker file.

00:29.450 --> 00:33.560
Docker eases that Python program and creates a container image.

00:33.560 --> 00:40.340
It is using the best Python 3.8 Docker image and then it's copying over the requirement file running

00:40.340 --> 00:42.290
a pip install of the flask.

00:42.290 --> 00:46.060
Then it is running the Python program, accepting incoming connections.

00:46.070 --> 00:48.290
Now let's go over the Jenkins file.

00:48.290 --> 00:53.930
So this Jenkins file is for the job, which is creating the Docker container image.

00:53.930 --> 01:01.100
So the first stage it clones this repository into the Jenkins environment and then it builds the Docker

01:01.100 --> 01:01.970
container image.

01:01.970 --> 01:07.550
So basically it looks for a Docker file in the repository that it just cloned and then runs that Docker

01:07.550 --> 01:07.970
file.

01:07.970 --> 01:14.900
This large 80 Docker ID is the account ID in my Docker hub repository and test is the repository name.

01:14.900 --> 01:19.520
If I go to my Docker hub, you can see this repository is currently empty.

01:19.520 --> 01:26.720
This step does not push the container image yet the next edge is just a dummy placeholder.

01:26.720 --> 01:29.810
So in this step you can run some unit testing.

01:29.810 --> 01:33.560
In the next stage is where I push the image to Docker Hub.

01:33.560 --> 01:39.680
So you give the Earl of the Docker Hub the next part, Docker Hub is not a standard keyword.

01:39.680 --> 01:48.050
Jenkins Jobs will go to the saved credential and grab the credentials saved under ID Docker Hub and

01:48.050 --> 01:51.980
use that user ID and password to push this container image.

01:51.980 --> 01:59.480
So if I switch to my Jenkins, you can see under credentials I have this ID Docker hub and I have my

01:59.480 --> 02:02.750
Docker hub, user ID and password saved under here.

02:02.750 --> 02:09.110
We will go over this when we set up our Jenkins environment and we push this container image with the

02:09.110 --> 02:11.840
tag of build number of this job.

02:11.840 --> 02:18.030
So as you keep pushing more code changes that these Jenkins jobs will keep resubmitting itself with

02:18.030 --> 02:23.210
the new build number and that will be used as the tag for the new container images.

02:23.360 --> 02:30.920
Note that this EMV dot build underscore number is a standard variable and that is available readily

02:30.920 --> 02:32.210
in any Jenkins job.

02:32.210 --> 02:38.240
You don't need to define this variable anywhere, and in the last stage we trigger another Jenkins job

02:38.240 --> 02:45.740
to update the deployment file and the name of this job is Update Manifest and we are updating the deployment

02:45.740 --> 02:49.250
file with the build number from this job.

02:49.250 --> 02:56.000
So we have to pass this bill number and we are passing that bill number into a parameter called Docker

02:56.000 --> 03:03.380
tag to this job and update manifest job will use this Docker tag parameter to update the deployment

03:03.380 --> 03:03.830
file.

03:03.830 --> 03:05.780
We are going to see that in a minute.

03:05.780 --> 03:08.480
This is the Kubernetes manifest repository.

03:08.480 --> 03:14.450
So this repository has the deployment file and Jenkins file for the Jenkins job to update the deployment.

03:14.600 --> 03:21.050
So if we go to the deployment YAML, the container image is referencing to the latest tag.

03:21.080 --> 03:26.660
It doesn't matter because if I go to my Docker hub, this repository is empty.

03:26.690 --> 03:33.020
First time we run our Jenkins job, it is going to update this tag and in the next step we are creating

03:33.020 --> 03:37.400
a load balancer service to talk to the container by default.

03:37.400 --> 03:41.960
Flask application runs on the target port 5000 in the container.

03:41.960 --> 03:46.330
So that's why the URL of the load balancer will be using port eight for you.

03:46.340 --> 03:51.260
But it is redirecting the traffic to the port 5000 of the container.

03:51.260 --> 03:56.810
I have opened the Jenkins file for updating the deployment file on the right with the deployment demo

03:56.810 --> 03:57.590
on the left.

03:57.590 --> 03:59.330
So the first step is very similar.

03:59.330 --> 04:06.020
It clones this repository in the Jenkins environment and the second stage it updates the file, so it

04:06.020 --> 04:11.390
sets the git config user, user email and user name for the commit history.

04:11.390 --> 04:18.440
And then I'm running a cat deployment of HTML to show you how it is before we change and then we run

04:18.440 --> 04:22.700
this SED command to change this container image.

04:22.700 --> 04:30.770
This seed command is using the symbol plus as the delimiter because we cannot use the default front

04:30.770 --> 04:34.160
slash because our container image has from slash.

04:34.160 --> 04:35.810
So said don't work.

04:35.960 --> 04:44.180
So said dash I dash I means it is going to do in place replace in the file itself instead of creating

04:44.180 --> 04:45.080
a new file.

04:45.080 --> 04:52.550
And then I'm looking for the line which has raj large 80 docker id slash test dot asterisks mean anything

04:52.550 --> 05:01.160
afterwards in the line is fine and I'm replacing that with Roger T Docker IDs last test colon.

05:01.900 --> 05:03.060
Hour tag.

05:03.070 --> 05:09.670
Remember, Doctor Tag is the parameter that this Jenkins job will accept as an input from the other

05:09.670 --> 05:10.570
Jenkins job.

05:10.570 --> 05:16.570
And I'm doing this change on the deployment YAML file and then I'm displaying the deployment file again

05:16.570 --> 05:17.410
to show you.

05:17.410 --> 05:21.600
And then I'm running git add and git commit and get push.

05:21.610 --> 05:24.220
So now let's go over the first line.

05:24.220 --> 05:25.890
In the first line.

05:25.900 --> 05:35.350
Note that this credential ID GitHub is fetching the credentials saved under the ID GitHub from the Jenkins

05:35.350 --> 05:36.460
credentials.

05:36.640 --> 05:42.040
If I switch to my Jenkins, you will see the ID GitHub has my GitHub credentials.

05:42.040 --> 05:48.310
Remember that the password of the GitHub should be your token and not the password.

05:48.310 --> 05:55.120
So we'll go over it when we set up Jenkins and after it features that username and password, it runs

05:55.120 --> 06:00.520
the git push command for this Kubernetes manifest repo and updates the deployment file.

06:00.730 --> 06:04.330
All right, so now let's jump into Jenkins and set up the jobs.
