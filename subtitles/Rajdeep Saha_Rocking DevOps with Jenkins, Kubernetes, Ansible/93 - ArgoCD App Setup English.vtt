WEBVTT

00:02.250 --> 00:07.500
Now we are going to set up the Argos CD part and before we do anything we are running cubes.

00:07.500 --> 00:12.960
It'll get parts in our Kubernetes cluster and as you can see, no parts are running.

00:13.560 --> 00:20.610
Now let's go back to the Argo City console and to point this GITOPS Argo CD to our Kubernetes manifest

00:20.610 --> 00:24.360
repository and deploy this app click new app.

00:24.510 --> 00:30.750
You can give any application name, but I'm going to give the same name as I used in deployment, which

00:30.750 --> 00:36.480
is Flask Demo Project Default Sync Policy Automatic.

00:36.480 --> 00:43.110
What it does is Argo CD will check every 3 minutes with the GitHub repository and check the state of

00:43.110 --> 00:47.010
the cluster and if it is out of sync, it will apply it automatically.

00:47.010 --> 00:51.870
If you select manual, you need to manually sync it for all these other options.

00:51.870 --> 00:55.520
You can hover over the question mark and they're pretty self-explanatory.

00:55.770 --> 00:59.610
We are going to keep everything as is and in the repository URL.

00:59.610 --> 01:03.660
You have to point this to our Kubernetes manifest repo.

01:03.690 --> 01:11.430
So we are in Kubernetes manifest repo, get the APC URL, go back to Argo City, paste it here.

01:11.430 --> 01:16.470
And if you kept your manifest files in a folder inside that repo, you have to give that name of the

01:16.470 --> 01:17.760
folder as part.

01:17.760 --> 01:23.160
But since in our case everything is under the root directory in the GitHub repository, we are just

01:23.160 --> 01:30.180
going to give dot slash as the current folder and then the destination determines which Kubernetes cluster

01:30.180 --> 01:31.590
it is going to deploy to.

01:31.620 --> 01:34.230
So this is a cool thing about Gitops.

01:34.410 --> 01:40.500
You can run GitHub in one cluster and you can deploy this to any other Kubernetes cluster.

01:40.620 --> 01:46.590
If this Gitops is running in the same cluster as you are deploying this application to, then you just

01:46.590 --> 01:52.920
select this Kubernetes dot, default dot as we see, and we want to deploy this application in the default

01:52.920 --> 01:57.900
namespace, keep everything as is, and then click this create button.

01:57.990 --> 01:59.910
It actually deployed the application.

01:59.910 --> 02:03.180
If you click this, it is going to show you the flow.

02:03.210 --> 02:04.980
It created this load balancer.

02:04.980 --> 02:08.430
And then behind the load balancer there are three pods.

02:08.430 --> 02:13.620
So if we go back to our terminal and now run cubes, it'll get pods.

02:13.620 --> 02:18.570
We should see three pods running to get the load balancer are run cubes.

02:18.570 --> 02:23.330
It'll get as we see and it should give us the load balancer URL.

02:23.790 --> 02:28.650
Not that it will take a couple of minutes for us to provisioned load balancer.

02:28.650 --> 02:30.210
So I'm going to copy this.

02:30.540 --> 02:35.400
Go back to my chrome, open a new tab, pass the URL, press enter.

02:35.850 --> 02:36.900
There you go.

02:36.900 --> 02:40.110
It is accessing the flask application and it's showing.

02:40.110 --> 02:41.100
Hello, Docker.

02:41.430 --> 02:48.150
So now only thing left is to automatically trigger the Jenkins job whenever I push my python code to

02:48.150 --> 02:48.990
the repository.
