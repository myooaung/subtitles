WEBVTT

00:02.980 --> 00:06.870
All right, now let's automate this job using GitHub, WebEx.

00:07.030 --> 00:16.120
So go to your GitHub repository, click settings, and then click Webhook and then add Webhook.

00:16.150 --> 00:20.320
The payload URL will be the URL of the Jenkins.

00:20.470 --> 00:28.060
So go back to your Jenkins and go to Dashboard and whatever URL you get in the dashboard, just copy

00:28.060 --> 00:31.600
that and in the payload URL just past that.

00:31.600 --> 00:37.630
And then at the end you have to add GitHub, dash, webhook, slash.

00:37.720 --> 00:38.920
This part is important.

00:38.920 --> 00:43.690
If you don't give this GitHub dash webhook or the front slash, it will give an error.

00:43.690 --> 00:50.310
And then in the content type, select application's less JSON and you have option to send just the push

00:50.350 --> 00:55.420
event, send me everything or you can select individual events for this demo.

00:55.450 --> 00:59.770
We are just going to send the push events click add webhook.

01:00.590 --> 01:06.500
Now, this is the one part where GitHub is going to send to Jenkins.

01:06.830 --> 01:12.810
Now, in the Jenkins, you have to go and tell to trigger the job if it receives the webhook.

01:12.830 --> 01:16.760
So to do that, we go back to our run CFD zero one job.

01:17.270 --> 01:20.800
Click Configure and under build triggers.

01:20.810 --> 01:24.680
Select GitHub Hook Trigger for Git ACM pulling.

01:25.370 --> 01:32.750
Alternatively, you can also pull steam in a pre-defined cron schedule that will check the GitHub repository

01:32.750 --> 01:33.620
periodically.

01:33.770 --> 01:40.220
But the most DevOps way of doing things is to kick this automatically as soon as you receive the webhook.

01:40.700 --> 01:41.210
All right.

01:41.210 --> 01:42.260
So if the job.

01:43.300 --> 01:49.630
Now what we are going to do is change the Jenkins file and push the changes and that should trigger

01:49.630 --> 01:52.730
this Jenkins job without us submitting it manually.

01:52.750 --> 01:55.150
I'm going to edit the Jenkins file.

01:55.840 --> 02:01.900
In addition to printing out the content of the cloud formation file, we're also running this Cloud

02:01.900 --> 02:08.440
Formation Command, which is going to create a stack with the name S3 Bucket and run our cloud formation.

02:08.440 --> 02:11.590
And we are running this in US West to region.

02:12.700 --> 02:14.230
Scroll down for me.

02:14.230 --> 02:19.180
Changes that set that should fire our Jenkins job.

02:20.080 --> 02:25.840
As we could see, number two got submitted automatically without us clicking build now.

02:26.260 --> 02:28.270
All right, it completed successfully.

02:28.270 --> 02:31.510
I'm going to click that console output.

02:31.690 --> 02:38.320
So now it shows the content of the file as well as it submitted this cloud formation stack.

02:38.740 --> 02:40.630
And this is the name of the stack.

02:40.930 --> 02:47.890
So let's go to our console and find out this stack, the topmost cloud formation stack, S3 bucket is

02:47.890 --> 02:49.150
what we submitted.

02:49.150 --> 02:50.140
Create complete.

02:50.170 --> 02:51.550
Let's go to output.

02:51.550 --> 02:54.640
So it's showing the name of the bucket as S3 bucket.

02:54.880 --> 03:00.160
All right, folks, for this lecture, we learned how to integrate your GitHub repository with Jenkins

03:00.160 --> 03:03.480
jobs, both manually as well as automatically.

03:03.490 --> 03:04.590
That's it for this one.

03:04.600 --> 03:06.100
Join me in the next lecture.
