WEBVTT

00:00.120 --> 00:03.360
Let's start with our good old DevOps.

00:04.100 --> 00:08.330
How does the secede flow for Kubernetes look like?

00:08.360 --> 00:15.650
Your developer checks in the code in a code repository such as GitHub or S code Commit.

00:15.830 --> 00:20.980
When we talk about codes for Kubernetes, we mainly mean two things.

00:20.990 --> 00:24.950
First, the Docker file, which defines the container image.

00:25.040 --> 00:32.300
Second, the manifest which defines the deployment, scaling and other configuration for your application.

00:32.510 --> 00:36.710
Once the code is checked in, a build process starts.

00:36.740 --> 00:39.090
In this example, we are using a W.

00:39.170 --> 00:47.000
S Code build, which builds the Docker container image and pushes the image to an image repository such

00:47.000 --> 00:48.680
as Amazon ACR.

00:48.680 --> 00:54.950
And then this code build deploys the manifest file into a running Kubernetes cluster.

00:54.980 --> 01:03.620
In this case, Amazon has the step one, two and three is CI or continuous integration, and step four

01:03.650 --> 01:06.080
is CD or continuous deployment.

01:06.660 --> 01:09.630
But what if things go wrong?

01:09.660 --> 01:16.670
Maybe you have a hands on guy in your team with access to life cluster and he just runs a bunch of cute

01:16.770 --> 01:22.470
little play commands and changes the number of replicas or even the content or image.

01:22.500 --> 01:30.600
Furthermore, maybe he deletes some of the running softwares in the cluster, such as Datadog, simply

01:30.600 --> 01:33.540
because he does not like dogs.

01:33.870 --> 01:38.880
How would you go back to the stable previous date for the cluster?

01:39.210 --> 01:49.590
You have to rerun the seed part to deploy the manifests again to the running cluster, but only if someone

01:49.590 --> 01:51.740
detects something is wrong.

01:51.750 --> 01:58.500
If someone changed the number of replicas and the container image to a previous version or even delete

01:58.500 --> 01:59.430
Datadog.

01:59.460 --> 02:01.870
Your application might not fail.

02:01.890 --> 02:08.700
Also, rerunning CD components is tedious, sometimes manual and error prone.

02:09.090 --> 02:16.380
And if something goes wrong during the CD, it's really stressful to restart the DevOps pipeline.

02:16.530 --> 02:19.350
Hence Gitops were born.

02:19.380 --> 02:22.290
If you think about it, traditional secede flow.

02:22.290 --> 02:31.380
For X, it's more of a push model where the US could build is pushing the deployment and the manifest

02:31.380 --> 02:34.200
files to the Kubernetes cluster.

02:34.710 --> 02:41.310
Now let's take a look at Gitops, which is more of a push plus pull model.

02:41.400 --> 02:49.630
With Gitops, the C.I. part remains the same, so the developer checks in the code in a code repository.

02:49.650 --> 02:58.350
The container image is built and gets pushed into a repository, but the CD or continuous deployment

02:58.350 --> 03:00.210
part is different.

03:00.450 --> 03:10.440
In this case, in the Kubernetes cluster, a software constantly run and checks with the repository.

03:10.470 --> 03:15.140
Hence the term git and keeps the cluster in sync.

03:15.150 --> 03:17.040
But what does this actually mean?

03:17.070 --> 03:20.200
I'm pretty sure you guys and gals are still not clear.

03:20.220 --> 03:22.140
So let's take a look at that.

03:22.470 --> 03:31.020
Let's say the Catman is back and CD is being done by Gitops tool, for example, flux.

03:31.230 --> 03:37.950
So the Catman went ahead and deleted the other parts and let's say also change some of the deployment

03:37.950 --> 03:38.970
configuration.

03:39.120 --> 03:47.880
But remember, the Gitops tool is constantly checking with deployment manifest files or helm charts

03:47.880 --> 03:49.010
in GitHub.

03:49.020 --> 03:59.340
So it immediately detects that the state of the cluster deviated from the desired state defined in git

03:59.340 --> 04:07.860
and flux will immediately and automatically revert the Kubernetes cluster to the state as defined in

04:07.860 --> 04:12.300
the manifest file or the chart file defined in the git.

04:12.300 --> 04:15.320
So it will immediately restore the Datadog port.

04:15.360 --> 04:22.590
It will revert back the number of replicas, the container image or any other changes that this person

04:22.590 --> 04:23.620
has done.

04:23.640 --> 04:29.070
The state of the cluster is defined by whatever is defined in Git.

04:29.100 --> 04:33.660
That's why we say Git becomes the single source of truth.

04:33.900 --> 04:42.720
It sends a lot to appropriate team with the audit trails and this team removes unnecessary access from

04:42.720 --> 04:46.350
Catman so that only gitops can make changes.

04:46.380 --> 04:52.650
By the way, I'm explaining this Gitops concept when something has went wrong, like this person went

04:52.650 --> 04:54.160
and deleted some pods.

04:54.180 --> 05:00.120
But in actual world Gitops is used for your regular software delivery and software release as well.

05:00.150 --> 05:05.820
Because if you think about it, all you need to do is update the deployment for the new code with the

05:05.820 --> 05:12.100
new Docker image and Gitops will grab that deployment file or the helm chart and deploy those changes.

05:12.120 --> 05:16.650
We are going to see that in action when you go over the Real World demo.

05:17.400 --> 05:22.770
Currently Gitops can be done by either Flux or Argo.

05:23.250 --> 05:30.600
So in summary, Gitops periodically syncs the running cluster with the desired state defined in GitHub

05:30.600 --> 05:33.570
or other code repositories based on Git.

05:33.600 --> 05:42.600
It works with both vanilla manifest files such as deployment, YAML, file, HPA, etc. or it works

05:42.600 --> 05:44.130
with helm charts as well.

05:44.250 --> 05:53.100
This enables reduced learning curve than DevOps because the CD part is being done using Kubernetes constructs.

05:53.100 --> 05:58.020
So the team does not need to learn the CD with traditional DevOps tool.

05:58.230 --> 06:04.800
And it also increases security because CI and CD permissions are separated.

06:04.800 --> 06:07.380
And also there are less number of components.

06:07.380 --> 06:10.740
But Gitops does not mean getting rid of DevOps.

06:10.770 --> 06:15.240
As we saw, the CI part is still being done with DevOps.

06:15.270 --> 06:20.320
Also, Gitops only works with a running Kubernetes cluster.

06:20.340 --> 06:26.760
The DevOps CD still needs to be used to spin up the cluster for the first time.

06:26.790 --> 06:33.570
Once that cluster is up, Gitops can be used to create other Kubernetes clusters.

06:34.050 --> 06:40.050
All right, folks, now let's do a real world gitops project where we get our hands dirty and understand

06:40.050 --> 06:41.520
this in a deeper level.

06:41.550 --> 06:42.930
All right, see you in the next lecture.
