WEBVTT

00:01.940 --> 00:04.700
What is it and why do you need it?

00:04.740 --> 00:07.020
Git is a version control system.

00:07.040 --> 00:12.250
Before we jump into understanding what is a fashion control system, let's take a look at the life.

00:12.260 --> 00:14.720
Before there was a fashion control system.

00:14.810 --> 00:20.900
So you have your application server where your code will be running and you will have a developer with

00:20.900 --> 00:28.700
some sort of a folder with the name version 1.0 with a code inside it, and this code is deployed in

00:28.700 --> 00:29.440
the server.

00:29.450 --> 00:33.230
So now the server is running code version 1.0.

00:33.800 --> 00:37.710
Now our team member comes in and said, I have a great idea.

00:37.730 --> 00:39.100
Send me your code.

00:39.110 --> 00:46.220
So this team member will have a folder named version 2.0 where he saved his version of the code and

00:46.220 --> 00:49.250
this code is deployed into the server.

00:49.580 --> 00:54.590
But what if his code is not properly tested and crashed and burned?

00:54.590 --> 01:02.210
The server rolling back to version 1.0 is super painful now because there is no centralized mechanism

01:02.210 --> 01:06.810
to do it because everything is maintained in this kind of folder structure.

01:06.830 --> 01:09.680
So in this case, rollback is time consuming.

01:09.680 --> 01:16.610
There is no audit tracking, such as there is no way to know which team member did exactly what changes

01:16.610 --> 01:21.090
in the application code and it is not scalable for large teams.

01:21.110 --> 01:26.360
Hence version control system were born with version control system.

01:26.360 --> 01:33.740
There will be a special database called repository and developers, instead of pushing their code directly

01:33.740 --> 01:39.740
to the application server will push their code to this repository and the code will be deployed from

01:39.740 --> 01:42.260
this repository to the application server.

01:42.290 --> 01:48.770
If another team member comes in and wants to work on the code instead of requesting the other team member,

01:48.770 --> 01:56.150
he can fetch the code from this repository and then modify it, have a new version, and then push this

01:56.150 --> 01:59.630
new version, version 2.0 to this repository.

01:59.630 --> 02:05.600
And after this version 2.0 gets deployed in the server, even if something goes wrong with a single

02:05.600 --> 02:11.200
command or a click, this repository can roll back the code to the previous version.

02:11.210 --> 02:15.770
So Git is a version control system and that's why it was born.

02:15.770 --> 02:17.330
So why Git?

02:17.450 --> 02:19.550
Because it is distributed.

02:19.640 --> 02:25.400
So when you talk about version control systems, there are two different kinds centralized fashion control

02:25.400 --> 02:28.670
system and distributed version control system.

02:28.670 --> 02:34.910
With centralized version control system, there will be a centralized repository and all the developers

02:34.910 --> 02:36.180
will connect to it.

02:36.200 --> 02:42.560
The challenge with centralized repositories this repository is a single point of failure and it requires

02:42.560 --> 02:44.120
constant connectivity.

02:44.120 --> 02:50.390
Some example of centralized repository function control systems are subversion and endeavor.

02:50.390 --> 02:55.490
In contrary to this, in a distributed fashion control system such as Git.

02:55.490 --> 03:02.750
In addition to having a remote repository, each team member will also have a local repository which

03:02.750 --> 03:09.860
is in their local machine, and they can do all their work, even push their changes to this local repository.

03:09.860 --> 03:15.530
Once they are happy with their changes in their local repository, they can push all their changes to

03:15.530 --> 03:17.030
this remote repository.

03:17.030 --> 03:23.150
Even if you lose the connectivity to the remote repository, it doesn't impact your work because all

03:23.150 --> 03:26.870
you need to do is push your changes to the local repository.

03:26.870 --> 03:31.640
And once connectivity comes up, that change can be pushed to the remote repository.

03:31.640 --> 03:36.500
So for distributed version control system, each developer has a local copy.

03:36.530 --> 03:42.800
It is more scalable than centralized because each team member is working separately with their local

03:42.800 --> 03:43.670
repository.

03:43.670 --> 03:49.130
Some example of distributed version control system is mercurial and gate.

03:49.130 --> 03:56.870
So going back to our version control system features who I get it is distributed, it is performant,

03:56.900 --> 04:03.590
it has detailed audit tracking, it shows which developer did exactly what changes and when.

04:03.710 --> 04:07.250
Git is also open source, which means it is free.

04:07.250 --> 04:14.000
Some of the real world use cases of git are Kubernetes, Gitops, Jenkins integration and other DevOps

04:14.000 --> 04:22.220
tools and various other repository is built on this git such as GitHub, GitLab could commit, etc.

04:22.400 --> 04:29.300
So one thing which is very important to remember is git is not same as Git Hub.
