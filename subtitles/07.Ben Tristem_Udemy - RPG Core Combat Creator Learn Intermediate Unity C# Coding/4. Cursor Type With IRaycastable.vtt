WEBVTT
1
00:00:04.800 --> 00:00:06.270
Hello and welcome in this lecture.

2
00:00:06.270 --> 00:00:11.970
We are going to be making the components themselves actually report what kind of cursor they want.

3
00:00:11.970 --> 00:00:16.070
So we still have the attack cursor if we hover over an enemy.

4
00:00:16.060 --> 00:00:22.560
But now if we hover over a pickup we get a new pickup cursor that is being reported by that component

5
00:00:22.560 --> 00:00:23.520
itself.

6
00:00:23.520 --> 00:00:26.830
Let's dive in and see how we can achieve this.

7
00:00:26.850 --> 00:00:33.150
So what we'd like to do is have an recast cast ball decide what kind of cursor it is going to be so

8
00:00:33.150 --> 00:00:35.730
that we have the right sorts of cursor affords.

9
00:00:35.940 --> 00:00:40.680
Now to do this we're gonna have to add in another method and the job of that method is going to be to

10
00:00:40.680 --> 00:00:46.620
return the type of cursor that we need for this particular right countable.

11
00:00:46.740 --> 00:00:52.110
Now to do that we're going to have to return the type of cursor type which is going to be an error for

12
00:00:52.110 --> 00:00:57.270
now but we'll fix it in a second so type will be the return type and we'll just call the method get

13
00:00:57.450 --> 00:01:01.050
cursor type and it doesn't need to take any arguments.

14
00:01:01.080 --> 00:01:08.230
All it's going to do is very basically ask that request for what type of cursor should I be giving you.

15
00:01:08.400 --> 00:01:14.990
Now what we've got to do here is extract that cursor type which currently I believe lives in the player

16
00:01:15.000 --> 00:01:16.900
controller.

17
00:01:16.920 --> 00:01:23.420
So if we look in the player controller we have the cursor type enum which is inside the player controller.

18
00:01:23.550 --> 00:01:32.220
And if I cut that out I want to put it in to our recast Bill namespace the same namespace as I write

19
00:01:32.250 --> 00:01:33.650
Haskell so let's have a look.

20
00:01:33.780 --> 00:01:42.740
We have got our control and we want to add to control a cursor type dot.

21
00:01:42.750 --> 00:01:43.850
So yes.

22
00:01:43.980 --> 00:01:47.210
And then to this file I can just paste our E name.

23
00:01:47.220 --> 00:01:51.290
Now I do want it to be actually inside namespace.

24
00:01:51.390 --> 00:01:56.280
So it's going to be namespace RPG dot control and it's gonna be the cursor type.

25
00:01:56.280 --> 00:02:03.900
So this enum is now standalone and I'm going to make a public enum because we want it to be usable in

26
00:02:03.900 --> 00:02:06.110
public methods.

27
00:02:06.330 --> 00:02:12.090
So the cursor type can now successfully be used in AI right Castile.

28
00:02:12.120 --> 00:02:19.710
So your challenge is going to be to show the correct cursor on the basis of this new addition into our

29
00:02:19.740 --> 00:02:24.690
ray Castille so implement the interface and all the classes that are currently implementing it such

30
00:02:24.690 --> 00:02:30.930
as the pick and combat et cetera then get the correct cursor in the player controller using the interface

31
00:02:31.590 --> 00:02:38.100
and make any changes necessary to allow the pickup cursor to be different post video and have a go at

32
00:02:38.100 --> 00:02:41.070
this challenge okay.

33
00:02:41.070 --> 00:02:41.640
Welcome back.

34
00:02:41.640 --> 00:02:46.560
So let's dive in and first of all see where we might be getting some errors.

35
00:02:46.560 --> 00:02:54.600
For example I would expect that our weapon pick up is giving us an error because the IRA Cassel doesn't

36
00:02:54.990 --> 00:02:57.500
include everything it doesn't implements everything.

37
00:02:57.510 --> 00:03:02.480
So let's implement the interface fully and it should give us this get cursor type.

38
00:03:02.700 --> 00:03:08.110
And now we have to do is very simply return the cursor type that we want to have here.

39
00:03:08.250 --> 00:03:13.060
And as it's a weapon pickup we want a cursor type dot pickup.

40
00:03:13.200 --> 00:03:17.130
But notice we do not have a dot pickup it's giving us an error.

41
00:03:17.220 --> 00:03:19.910
So I can't do a controlled dot to generate the enum member.

42
00:03:19.910 --> 00:03:22.560
You could also do it manually if you go and have a look you enum.

43
00:03:22.560 --> 00:03:25.640
Now it has added pickup to the end of the list.

44
00:03:25.680 --> 00:03:31.300
So it's another cursor type that we could add configuration and cursor setup for.

45
00:03:31.500 --> 00:03:32.150
That's good.

46
00:03:32.160 --> 00:03:32.580
Cool.

47
00:03:32.580 --> 00:03:36.400
So we've got an get cursor type working on pickup.

48
00:03:36.480 --> 00:03:39.570
And as for using it in the play control dot see yes.

49
00:03:39.900 --> 00:03:44.980
Well currently we're setting just the cursor type of combat when we interact with the component.

50
00:03:45.060 --> 00:03:49.080
What we really want to do here is query the right testable for the cursor type.

51
00:03:49.080 --> 00:03:50.100
They actually want.

52
00:03:50.100 --> 00:03:55.830
So right Constable dots and then get cursor type should just return as the cursor type that we want

53
00:03:55.860 --> 00:04:00.810
and we can set that one whenever a component can handle the particular recast.

54
00:04:00.810 --> 00:04:05.840
So the other place that I know we're gonna have a problem is with our combat target.

55
00:04:05.850 --> 00:04:13.080
So let's go over to the combat target and I've just refreshed with doing a control shift P and reload

56
00:04:13.080 --> 00:04:19.290
window because I was getting a bit funny not not really having intelligence working properly.

57
00:04:19.290 --> 00:04:25.110
So I'm going to go ahead and implement the interface but I write Castile just to add in the get cursor

58
00:04:25.560 --> 00:04:28.890
and I'm going to go ahead and return.

59
00:04:28.890 --> 00:04:39.610
This time it's going to be cursor type cursor type dots and then it's going to be combat so with the

60
00:04:39.610 --> 00:04:46.630
combat targets cursor type set and also with the weapon pick up I think has fixed our to recast pools

61
00:04:47.080 --> 00:04:53.740
and that should mean that if I go ahead and hit play when I hover over the enemy I get the attack cursor

62
00:04:54.160 --> 00:04:55.840
and I hover over the movement area.

63
00:04:55.840 --> 00:05:01.100
I get the movement cursor if I hover over the pickups though I get the X which is not quite what I want.

64
00:05:01.210 --> 00:05:04.390
Hover over UI I get UI so that's all good.

65
00:05:04.390 --> 00:05:10.250
Now the one thing is hovering over the pickups which I don't think currently is looking good.

66
00:05:10.270 --> 00:05:18.990
So what I want to do is go into my player prefab and go and find the player controller.

67
00:05:19.970 --> 00:05:26.300
And I want to add a new mapping in here so I'm going to duplicate it from combat and the mapping is

68
00:05:26.300 --> 00:05:33.100
gonna be for the pickup and then we're gonna go and find ourselves an asset that we want for cursor.

69
00:05:33.140 --> 00:05:41.630
So I'm going to go in to the pixel curses cursor folder and have a look at what we've got in terms of

70
00:05:41.630 --> 00:05:43.580
things that look like pickups.

71
00:05:43.580 --> 00:05:48.560
So there's quite a few here I'm just gonna bring it out into icon view so we can see a little bit more

72
00:05:48.560 --> 00:05:52.900
clearly so the one I'm gonna choose is that this little brief.

73
00:05:52.920 --> 00:06:01.610
KC one song going to select the player go down two again to the mappings and I'm gonna put this little

74
00:06:01.610 --> 00:06:03.560
briefcase a one over the pickup.

75
00:06:03.560 --> 00:06:09.680
So now what should happen is if I go ahead and hit play and hover over pickups I get a different pickup

76
00:06:09.710 --> 00:06:16.730
icon as opposed to the attack icon so to recap what we've done is we've given the components a way of

77
00:06:16.730 --> 00:06:23.810
reporting what kind of cursor they require so that we can add extra curses quite easily just by basically

78
00:06:24.380 --> 00:06:29.220
changing the enum and changing the class that we are implementing it with.

79
00:06:29.300 --> 00:06:34.640
This would allow us for example to do curses for opening doors if we had a door component that responds

80
00:06:34.940 --> 00:06:41.570
to the irate cast but then we can easily add another door into the enum and have a curse type for that

81
00:06:41.570 --> 00:06:41.810
C.

82
00:06:41.820 --> 00:06:46.630
There's even a cursor here for your door so you could try that as a challenge for yourselves.

83
00:06:46.700 --> 00:06:51.200
Now in the next lecture we're going to look at a weird issue that you might come up against.

84
00:06:51.290 --> 00:06:57.260
If you have one Ray Haskell object in front of another and you actually end up clicking on the item

85
00:06:57.290 --> 00:06:58.880
that's behind rather in front.

86
00:06:58.880 --> 00:07:03.370
So we can look at Ray cast sorting and why that problem comes up in the first place.

87
00:07:03.380 --> 00:07:04.190
See in that lecture.
