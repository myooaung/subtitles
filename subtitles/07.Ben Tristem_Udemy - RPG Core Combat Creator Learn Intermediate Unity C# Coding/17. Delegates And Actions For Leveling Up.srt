1
00:00:04,270 --> 00:00:08,470
So in this lecture we're going to be carrying on from where we left off in the last one to use events

2
00:00:08,830 --> 00:00:15,220
and delegates in order to notify base that's when experience changes so it can change the level and

3
00:00:15,220 --> 00:00:19,990
in turn show some cool particle effects and other things to the player.

4
00:00:20,010 --> 00:00:26,960
Let's dive in so what I want to do is actually create a delegate that we're going to use it's going

5
00:00:26,960 --> 00:00:31,170
to have a void return type and a no arguments.

6
00:00:31,220 --> 00:00:40,880
And it's going to be experience gained delegates like so and it's gonna be an event because we want

7
00:00:40,880 --> 00:00:45,540
to prevent overwriting by other classes and then we have the.

8
00:00:45,730 --> 00:00:51,100
We're going to call it on experience gained like so.

9
00:00:51,380 --> 00:00:59,030
And this we can call when gain experience is called so on experience gained parentheses and that's going

10
00:00:59,030 --> 00:01:01,990
to cool everything in that delegate list.

11
00:01:02,030 --> 00:01:08,940
Now notice that we often very often use delegates they have a void return type and no arguments.

12
00:01:08,960 --> 00:01:14,870
So actually in C sharp they make this super easy by having the action and action is a predefined delegate

13
00:01:14,870 --> 00:01:20,210
with no return type and it is included in system so you need to have the system namespace.

14
00:01:20,210 --> 00:01:25,580
So instead of declaring this delegate let me just comment it out we can just go ahead and use action

15
00:01:25,640 --> 00:01:26,460
instead.

16
00:01:26,510 --> 00:01:30,690
And action is exactly the same as this delegate is just got a different name.

17
00:01:30,710 --> 00:01:35,210
It's called action instead of experience gained delegate and that tends to be a lot easier to read as

18
00:01:35,210 --> 00:01:40,040
well because you often have to name these delegates for the specific use case they're being used for

19
00:01:40,490 --> 00:01:42,490
and there's a lot of repetition going on.

20
00:01:42,490 --> 00:01:46,760
So I like to use action because it's just really clear what's going on there.

21
00:01:47,060 --> 00:01:53,390
And we did in fact use action in our example for the fake playable director you might recall.

22
00:01:53,390 --> 00:01:55,940
So now we haven't got this on stuff done.

23
00:01:55,940 --> 00:02:03,740
Instead we have got dot and noticed we've even gotten out using an event it is has got the thunderbolt

24
00:02:03,830 --> 00:02:05,730
symbol in our autocomplete.

25
00:02:05,750 --> 00:02:10,730
So we're going to do on experience gained and then we have to register for the thing that we want to

26
00:02:10,730 --> 00:02:13,970
do which is actually everything in this update method.

27
00:02:13,970 --> 00:02:20,510
So we want to do is rename this update method to update level and that won't get called every update

28
00:02:20,510 --> 00:02:25,190
now but we will call it on experience gained so little mini challenge for you.

29
00:02:25,190 --> 00:02:30,240
I'd just like you to see if you can remember how to subscribe to this delegate.

30
00:02:30,260 --> 00:02:36,350
There's something you've done before OK so we do a plus equals and then the update level and notice

31
00:02:36,360 --> 00:02:38,130
we don't put any parentheses here.

32
00:02:38,250 --> 00:02:41,960
Don't make that mistake because we don't want to be calling update level.

33
00:02:42,090 --> 00:02:48,130
We wants to be adding update level the method to this list of methods on experience gained.

34
00:02:48,300 --> 00:02:49,290
So that's what we're gonna do.

35
00:02:49,290 --> 00:02:50,900
We're gonna remove all this on stuff.

36
00:02:50,900 --> 00:02:53,070
Done test malarkey.

37
00:02:53,070 --> 00:02:57,870
And if you haven't been following along up to this point this is a good point to go and catch up and

38
00:02:57,960 --> 00:02:59,520
make your code reflect this.

39
00:02:59,880 --> 00:03:07,440
So again what we're doing is we're having over an experience we have got this event which has got action

40
00:03:07,440 --> 00:03:12,850
type which we know is basically saying it's functions that return void and take no arguments.

41
00:03:12,870 --> 00:03:18,870
It's called unexperienced game that is being called over in gain experience and then we're subscribing

42
00:03:18,870 --> 00:03:20,390
to it in base.

43
00:03:20,380 --> 00:03:26,850
That's where we are subscribing the update level to the unexperienced game notification and then that

44
00:03:26,850 --> 00:03:29,890
is when we are count recalculating our level.

45
00:03:29,910 --> 00:03:36,870
Now there will be a bit of a bug at this stage which happens when you have a save file that is restoring

46
00:03:36,900 --> 00:03:43,340
the experience points and you've got some experience points to restore then you will notice that sometimes

47
00:03:43,350 --> 00:03:50,700
and they're in some weird conditions the level will not be correctly updated when you load the game.

48
00:03:50,700 --> 00:03:51,890
Now don't worry about this.

49
00:03:51,900 --> 00:03:54,720
We will be dealing with it in the next lecture.

50
00:03:54,750 --> 00:03:57,720
But for now I go and kill this guard.

51
00:03:57,960 --> 00:04:04,080
Then what we should get is that when he's dead the experience points go up in the very same moment the

52
00:04:04,080 --> 00:04:10,770
level is recalculated as well it's not being recalculated every update is just being recalculated every

53
00:04:10,770 --> 00:04:13,350
time the experience points get changed.

54
00:04:14,040 --> 00:04:14,330
Okay.

55
00:04:14,340 --> 00:04:21,270
So in summary what we've come up with in this lecture is a system by which we can recalculate the level

56
00:04:21,270 --> 00:04:23,340
every time the experience points change.

57
00:04:23,340 --> 00:04:28,890
And also if we have a look at the console we get a notification every time that happens and in the process

58
00:04:28,920 --> 00:04:33,740
we have learnt about delegates which again are a list of pointers to methods.

59
00:04:33,870 --> 00:04:37,210
Multiple things and they can be called by something.

60
00:04:37,380 --> 00:04:42,000
And it's a good way of doing an inversion of dependency we've had events which are protection on delegate

61
00:04:42,000 --> 00:04:43,050
instances.

62
00:04:43,050 --> 00:04:48,540
And then we have action which is a predefined delegate which is very useful and we'll be using all the

63
00:04:48,540 --> 00:04:49,460
time.

64
00:04:49,590 --> 00:04:57,150
So quickly before I go there is this weird bug where if I add to the script execution order the health

65
00:04:57,150 --> 00:05:05,970
script and the base stats script then if I make it such that the health script runs before the base

66
00:05:05,970 --> 00:05:12,150
starts script and hit apply what you're gonna notice if I go ahead and hit play and first of all I think

67
00:05:12,150 --> 00:05:18,180
I have to make sure I delete any save files and I might have around but if I've got no save file it

68
00:05:18,180 --> 00:05:20,670
will give me this index out of bounds error.

69
00:05:20,670 --> 00:05:22,050
What's going on there.

70
00:05:22,050 --> 00:05:27,630
Well the problem is that our current level is set to zero unless it has been initialized in start.

71
00:05:27,750 --> 00:05:36,450
And if we try and use the current level before we get to start in base stats for example if we're trying

72
00:05:36,450 --> 00:05:42,600
to set the health points here in start of health then we are essentially going to be using that default

73
00:05:42,630 --> 00:05:47,160
value which is not a good default value that current level of 0 is not a good default value.

74
00:05:47,160 --> 00:05:53,210
So what we're going to do is make sure that if we are getting the level the current level has been initialized

75
00:05:53,210 --> 00:05:54,600
and we can do this fairly easily.

76
00:05:54,750 --> 00:06:00,480
And you could challenge yourself to figure out how but the way we can do it is to say if our current

77
00:06:00,480 --> 00:06:06,840
level isn't initialized which one way of saying that is that it is less than 1 basically is an invalid

78
00:06:06,840 --> 00:06:07,230
level.

79
00:06:07,230 --> 00:06:12,660
If our current level is less than 1 then what we want to do is we want to just go ahead and calculate

80
00:06:12,690 --> 00:06:13,970
what the current level should be.

81
00:06:13,970 --> 00:06:20,670
So we can just call calculate level like so and then we'll update the current level and make sure that

82
00:06:20,730 --> 00:06:24,600
it is cached and ready for the next time we call get level.

83
00:06:24,600 --> 00:06:29,700
So this just makes sure we prime our pump and we have the current level set now to finish off.

84
00:06:29,700 --> 00:06:35,350
I'm just going to go back into the into projects and fix up the script execution order.

85
00:06:35,430 --> 00:06:40,530
I want to first of all check that it's working so before I do the script execution order we can see

86
00:06:40,560 --> 00:06:45,900
that I can actually start playing this time but also I want to go ahead and remove any changes that

87
00:06:45,900 --> 00:06:48,090
I made to the script execution order we don't need them.

88
00:06:48,360 --> 00:06:52,740
And generally speaking I don't like fixing bugs by imposing a script execution order.

89
00:06:52,800 --> 00:06:55,180
It's better to fix things in the code.

90
00:06:55,290 --> 00:07:01,170
So as I said in the next lecture we are going to be looking at fixing this weird bug that arises with

91
00:07:01,170 --> 00:07:03,900
experience being restored from safe so you that.
