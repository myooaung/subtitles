WEBVTT
1
00:00:04.330 --> 00:00:05.100
Hello and welcome.

2
00:00:05.110 --> 00:00:10.660
In this lecture we're going to be using our new knowledge of race conditions in order to diagnose a

3
00:00:10.660 --> 00:00:12.240
potential race condition.

4
00:00:12.310 --> 00:00:15.120
Force it to happen and then fix it.

5
00:00:15.130 --> 00:00:21.890
Let's dive in and see what that race condition is so I want to show how a seemingly harmless change

6
00:00:21.890 --> 00:00:25.880
can actually cause you quite a bit of headache and race conditions.

7
00:00:25.880 --> 00:00:33.290
So for example down here in restore states we are using a get components to get hold of an NAF mesh

8
00:00:33.370 --> 00:00:34.020
agent.

9
00:00:34.250 --> 00:00:39.740
Now quite harmlessly you might say why don't I just go ahead and do NAF mesh agent dot enabled.

10
00:00:39.740 --> 00:00:44.990
I've already got it cached so I might as well just go and replace it with nav mesh at night dot enabled.

11
00:00:45.170 --> 00:00:50.630
And in fact here I recently learned something quite cool which is you don't have to do this.

12
00:00:50.650 --> 00:00:53.450
Enable disable to get round the nav mesh.

13
00:00:53.450 --> 00:01:00.320
You can do an ambush agent dot move instead and that will apply the relative movement to the current

14
00:01:00.320 --> 00:01:06.620
position so we could do that instead to get as back to the position.

15
00:01:06.760 --> 00:01:10.210
But I'm going to leave it like this for now just cause I don't want to mess with too many things at

16
00:01:10.210 --> 00:01:11.520
the same time.

17
00:01:11.530 --> 00:01:16.170
So with that aside we'd say well Kate that seems pretty reasonable right.

18
00:01:16.180 --> 00:01:22.600
That we should be able to use and nav mesh agent because it's set up in 0 set up in start.

19
00:01:22.600 --> 00:01:23.400
So that's not great.

20
00:01:23.410 --> 00:01:24.940
It should be set up in a wake.

21
00:01:24.940 --> 00:01:31.450
So if we were to set it up in a week as we should be doing because we should have all our state ready

22
00:01:31.750 --> 00:01:33.410
by the time we get to start.

23
00:01:33.430 --> 00:01:40.590
So we'll move these two things over to awake and you might say OK we should be golden now.

24
00:01:40.630 --> 00:01:43.150
So let me challenge you to find that race.

25
00:01:43.150 --> 00:01:50.920
So where is other places that restore state could be called and cannot race with a weak pose video and

26
00:01:50.920 --> 00:01:53.880
see if you can find that race car.

27
00:01:53.890 --> 00:01:55.770
Welcome back so quick.

28
00:01:55.780 --> 00:01:57.010
An early challenge.

29
00:01:57.010 --> 00:02:05.560
So the other places that we might be calling restore state so be we can right click on it and do a Find

30
00:02:05.560 --> 00:02:10.810
all references to find all the places where restore state is now a lot of these where it's implemented.

31
00:02:10.810 --> 00:02:18.300
But there are some where it is being called and one place is being called is the safer BL entity.

32
00:02:18.430 --> 00:02:23.650
And you can see the safe balances a being called in restore state so we can go up the tree find all

33
00:02:23.650 --> 00:02:29.050
references to that and say that's being called in the safe system restore state.

34
00:02:29.050 --> 00:02:32.010
So let's go and find all references to that.

35
00:02:32.020 --> 00:02:37.480
So this restore state in the save system is being called in two places.

36
00:02:37.480 --> 00:02:43.320
One is in load here and the other one is just after load last seen.

37
00:02:43.420 --> 00:02:48.490
So it could investigate both if we wanted to first let's look at this load find all references to that

38
00:02:48.490 --> 00:02:56.830
load takes us up to the saving system wrap her up another level find all references is going to tell

39
00:02:56.830 --> 00:03:02.920
us that it's being done with the load key that it can't happen in a week or it could be happening in

40
00:03:02.920 --> 00:03:06.930
the portal and it's happening after we've done a load seen async.

41
00:03:07.000 --> 00:03:13.160
Now we know that after load seen icing has yield returned after we go to the next line in this code

42
00:03:13.190 --> 00:03:16.470
routine all the awakes in the scene must have been called.

43
00:03:16.480 --> 00:03:20.980
So that can't race with awakes because all the awakes will have happened already.

44
00:03:21.010 --> 00:03:23.950
So that line of investigation has led us nowhere.

45
00:03:23.950 --> 00:03:31.360
Let's go back using the back button to other places where we might have restored state says final references

46
00:03:31.360 --> 00:03:36.070
to restore state and as we said there was a load last seen.

47
00:03:36.190 --> 00:03:40.350
If we do find all references of load last scene where does that get called.

48
00:03:40.470 --> 00:03:48.630
Gets called in the saving wrapper which itself is an iron numerator which itself gets called in awake

49
00:03:48.720 --> 00:03:49.490
all.

50
00:03:49.510 --> 00:03:51.190
So could that possibly race.

51
00:03:51.190 --> 00:03:57.840
Well let's go back down to load the last scene and see restore state is being called here.

52
00:03:57.840 --> 00:04:01.310
It is being called after a yield return load seeing async.

53
00:04:01.450 --> 00:04:03.770
But notice this is inside an if statement.

54
00:04:03.790 --> 00:04:12.160
So if this if statement is not true we will not be yield returning the async which means that restore

55
00:04:12.160 --> 00:04:16.070
state could be getting called in awake huh.

56
00:04:16.300 --> 00:04:22.990
Which means that we could have a race condition here because we might get restore state called in mover

57
00:04:23.020 --> 00:04:30.970
all the way down and hierarchy of calls it might get and called in mover without a nav mesh set.

58
00:04:31.090 --> 00:04:32.140
So that's no good.

59
00:04:32.170 --> 00:04:33.750
We don't want that sort of stuff to happen.

60
00:04:34.090 --> 00:04:39.100
So the way I'm going to fix this and note in my challenge I didn't say I want you to fix this.

61
00:04:39.100 --> 00:04:41.200
I wanted to show you how we can fix it.

62
00:04:41.200 --> 00:04:48.680
We are going to move this yield return so that it always gets called before we restore state.

63
00:04:48.700 --> 00:04:56.230
Now this is going to mean that we are doing an extra reload of the scene but realistically in game when

64
00:04:56.230 --> 00:05:01.210
you're really playing this game you will always be coming from a loading scene from a menu scene.

65
00:05:01.210 --> 00:05:06.520
So you're going to have to do that load anyway so there's no real harm in the fact that we're doing

66
00:05:06.580 --> 00:05:12.910
a reload here just to make sure that we have got ourselves after an awake but before a start.

67
00:05:12.910 --> 00:05:18.460
That's the idea is this restore state needs to happen after all the quakes have happened but before

68
00:05:18.550 --> 00:05:21.250
any of the starts have started.

69
00:05:21.250 --> 00:05:22.060
So that's the point.

70
00:05:22.090 --> 00:05:22.300
OK.

71
00:05:22.360 --> 00:05:28.330
So the restore state that's happening now what we want is a build index.

72
00:05:28.660 --> 00:05:35.380
And if we don't have the last scene build index in our state file.

73
00:05:35.380 --> 00:05:40.570
Now if you didn't take the savings section or skipped it then just follow along with this bet and just

74
00:05:40.570 --> 00:05:42.680
make the changes that I make basically.

75
00:05:42.760 --> 00:05:49.630
So if we don't have a last scene saved in the save file then we need to give it a default scene.

76
00:05:49.630 --> 00:05:51.850
And that should just be the currently active scene.

77
00:05:51.970 --> 00:05:57.700
So we're gonna do is I'm going to bring this build index outside of the if statement and I'm going to

78
00:05:57.700 --> 00:06:05.440
set it from the scene manager get active scene build index and then if we do have that build index saved

79
00:06:05.920 --> 00:06:08.680
then we can go ahead and restore it from that instead.

80
00:06:08.680 --> 00:06:13.630
So just overwriting the building next value and then the scene manager is going to load whichever one

81
00:06:13.630 --> 00:06:14.920
of those two came through.

82
00:06:14.920 --> 00:06:20.170
So whether it's the current scene it's just gonna reload it or whether it was the last scene that we

83
00:06:20.170 --> 00:06:22.880
had in the save file case.

84
00:06:22.890 --> 00:06:27.600
So with that done let's just type in and check that I project is still running after the change we've

85
00:06:27.600 --> 00:06:31.650
made it does look like it is and we're not getting any race conditions.

86
00:06:31.740 --> 00:06:37.710
Now if you really want to tax the race conditions then I would say the way to do that is to go and mess

87
00:06:37.710 --> 00:06:42.900
with your build order so we're gonna go to the project settings and what we want to have we want to

88
00:06:42.900 --> 00:06:44.700
find the mover down here.

89
00:06:44.730 --> 00:06:50.670
So go and find your movie script bring it into the build order and then we also want to bring into the

90
00:06:50.670 --> 00:06:51.490
build order.

91
00:06:51.570 --> 00:06:57.600
Basically the saving wrapper but actually really funny because it's being spawned by our persistent

92
00:06:57.630 --> 00:07:04.410
object spawner if I want to make it happen earlier than they move as a wake then I actually have to

93
00:07:04.410 --> 00:07:07.670
go and get the persistent object spawner instead.

94
00:07:07.740 --> 00:07:12.640
So whatever is instantiating it we'll call the awakes right there and then.

95
00:07:12.750 --> 00:07:15.930
So that's why I need to get the persistent object born basically.

96
00:07:15.930 --> 00:07:21.810
So I'm going to say I want persistent object spawner to happen before the movie script which should

97
00:07:21.810 --> 00:07:22.830
trigger the race condition.

98
00:07:22.830 --> 00:07:23.090
Right.

99
00:07:23.100 --> 00:07:28.470
Because if we go to the mover and we're saying we'd expect awake to have been called by the time we

100
00:07:28.470 --> 00:07:32.190
get restore then this shouldn't work hopefully.

101
00:07:32.190 --> 00:07:34.180
But now it should because we fixed it.

102
00:07:34.200 --> 00:07:39.600
So let's go ahead and see really I should have done this before to get a repo condition and make sure

103
00:07:39.600 --> 00:07:47.140
that we're getting the error first OK so it's working but let's just check that if I set this back to

104
00:07:47.140 --> 00:07:52.530
how it was like so and just go ahead and hit play.

105
00:07:52.720 --> 00:07:58.660
I'd expect this to give me a null reference error so I do need to be saving it restoring it from a save

106
00:07:58.660 --> 00:07:59.890
file that we've got.

107
00:07:59.920 --> 00:08:02.000
That's an null reference error.

108
00:08:02.050 --> 00:08:04.180
So now I can put this back.

109
00:08:04.420 --> 00:08:10.420
So this is the fixed code and let's go ahead and try that one more time and this time we got no no error

110
00:08:10.450 --> 00:08:15.490
in spite of the fact that we have deliberately manipulated the persistent object spawn as a wake to

111
00:08:15.490 --> 00:08:17.260
happen before the move.

112
00:08:17.280 --> 00:08:21.500
Now that means I'm fairly happy that we fixed that race condition.

113
00:08:21.500 --> 00:08:26.260
And I'm just gonna go to the script execution order and remove those two overrides we really don't need

114
00:08:26.260 --> 00:08:26.910
them there.

115
00:08:27.860 --> 00:08:28.830
So that's it.

116
00:08:28.850 --> 00:08:34.310
Race condition fixed in this lecture we've basically managed to make sure that we get and restore state

117
00:08:34.310 --> 00:08:39.430
callbacks these ones down here always called after awake.

118
00:08:39.440 --> 00:08:40.870
But before start.

119
00:08:40.880 --> 00:08:47.420
So in Start we can rely on a state that was restored but in a wake we can or rather in the store state

120
00:08:47.420 --> 00:08:52.100
we can be happy that everything in awake has already been called all the state in the class that can

121
00:08:52.100 --> 00:08:57.770
be set up has already been set up cool stuff in the next lecture we're going to be going through all

122
00:08:57.770 --> 00:09:04.550
of our classes and evaluating our use of start and awake as against the guidelines that we mentioned

123
00:09:04.580 --> 00:09:09.540
in the last lecture to make sure we're gonna be super safe against race conditions in the future.

124
00:09:09.590 --> 00:09:10.030
See you.
