WEBVTT
1
00:00:04.720 --> 00:00:05.650
Hello and welcome.

2
00:00:05.680 --> 00:00:11.530
In this lecture we are going to be moving to a more generic Ira Castile interface that will allow us

3
00:00:11.620 --> 00:00:17.670
to handle the Guard and the pickups in the same way so this guard if I hover over him.

4
00:00:17.770 --> 00:00:19.210
He has an attack cursor.

5
00:00:19.210 --> 00:00:23.470
The pickup also has an attack cursor but if I click on them they do fundamentally different things I

6
00:00:23.470 --> 00:00:25.510
can pick up the pickup by clicking on it.

7
00:00:25.550 --> 00:00:26.670
Why attack the guard.

8
00:00:26.750 --> 00:00:33.010
He will actually be attacked and this is entirely being handled by the components on those game objects

9
00:00:33.070 --> 00:00:34.100
in the world.

10
00:00:34.120 --> 00:00:42.610
So let's dive in and see how we can achieve that so we would like to be able to have a generic system

11
00:00:42.670 --> 00:00:44.960
for interacting with components.

12
00:00:44.980 --> 00:00:49.870
Ultimately what we want is to be able to interact with these weapon pickups but actually it will also

13
00:00:49.870 --> 00:00:56.560
be useful for things like combat where we're interacting with essentially an enemy components or maybe

14
00:00:56.620 --> 00:01:00.360
with a combat target component which we already have.

15
00:01:00.370 --> 00:01:05.480
So the way we're gonna do this is as follows we're gonna be using an interface called Ray Castille.

16
00:01:05.560 --> 00:01:08.300
But let me show you how this is going to look.

17
00:01:08.320 --> 00:01:14.730
So imagine we have these three objects in a scene and we do a ray cast through all three of them.

18
00:01:14.740 --> 00:01:16.240
Now what do we expect to happen.

19
00:01:16.270 --> 00:01:24.100
Well first of all we hit this object over here and it is a game object obviously and it has these components

20
00:01:24.160 --> 00:01:29.200
two of which are implementing the eye Ray Cassel interface.

21
00:01:29.200 --> 00:01:30.040
So what do we do.

22
00:01:30.070 --> 00:01:37.360
Well first of all we say Hang on does the first ray Cassel handle this type of hit.

23
00:01:37.360 --> 00:01:38.590
Can it handle it right now.

24
00:01:38.590 --> 00:01:42.900
For example is it enabled or is it close enough is it within range.

25
00:01:42.910 --> 00:01:46.360
Is the mouse down all those kinds of things can it can take into account.

26
00:01:46.360 --> 00:01:47.200
We just need to ask.

27
00:01:47.200 --> 00:01:48.820
Can you handle this Ray cast.

28
00:01:48.850 --> 00:01:51.380
If not we'll give something else a chance.

29
00:01:51.400 --> 00:01:54.150
So we then go down to the next Ray Casper on the same game object.

30
00:01:54.160 --> 00:01:55.630
Maybe that can't handle it.

31
00:01:55.630 --> 00:01:59.280
So we then look at the next thing in our ray cast list.

32
00:01:59.560 --> 00:02:00.870
Again look at its components.

33
00:02:00.880 --> 00:02:02.980
Maybe it's just got one Ray Cassel this time.

34
00:02:02.980 --> 00:02:04.200
So we just ask that one.

35
00:02:04.210 --> 00:02:05.990
Maybe that can't handle it either.

36
00:02:06.010 --> 00:02:10.610
Finally we go on to our last object here and it doesn't have any Ray constables.

37
00:02:10.630 --> 00:02:14.150
So we can completely ignore it and not ask it anything.

38
00:02:14.230 --> 00:02:17.100
So that's going to be the process to do this.

39
00:02:17.110 --> 00:02:24.430
We're going to need a ray Castille class that is going to behave in that way going to allow us to optionally

40
00:02:24.430 --> 00:02:25.720
handle things.

41
00:02:25.850 --> 00:02:34.810
So I'm gonna go and do this over in the scripts control and I'm going to add a new C sharp script called

42
00:02:34.930 --> 00:02:43.330
I Ray Castille remember the prefix AI is for interfaces and we're gonna go in and replace the contents

43
00:02:43.330 --> 00:02:44.640
with an interface.

44
00:02:44.660 --> 00:02:46.400
And so it's going to be interface.

45
00:02:46.480 --> 00:02:51.190
And to use that general interface to populate this out public is what it chooses and I think that's

46
00:02:51.190 --> 00:02:52.770
about right now.

47
00:02:52.780 --> 00:02:53.770
What do I want in here.

48
00:02:53.770 --> 00:03:02.130
I want a method called handle Ray cast like so we won't take any arguments for the moment but we want

49
00:03:02.130 --> 00:03:07.830
to bear in mind that we may actually need to pass in some arguments later on you might need to think

50
00:03:07.830 --> 00:03:12.630
we might need to think about that and obviously we don't put an implementation in here because it's

51
00:03:12.630 --> 00:03:15.270
just the interface is just that contract.

52
00:03:15.900 --> 00:03:19.580
So how would we go about using AI Ray Cassel now.

53
00:03:19.590 --> 00:03:26.610
Well I'm going to create a new function in update just before we interact with combat saying if interact

54
00:03:27.390 --> 00:03:36.170
with components and that's going to be where we deal with the ray constables and if it can interact

55
00:03:36.170 --> 00:03:39.430
with the component then we're just gonna go ahead and return right there and then.

56
00:03:39.960 --> 00:03:43.700
So let's go ahead and generate that method.

57
00:03:43.730 --> 00:03:44.160
All right.

58
00:03:44.180 --> 00:03:51.920
Ray can interact with components and what we said it's going to have to do is it's going to have to

59
00:03:52.310 --> 00:03:58.130
recast through the world getting all of the ray cast hits which we've done before such as Interact with

60
00:03:58.130 --> 00:03:59.090
combat.

61
00:03:59.090 --> 00:04:02.590
We're gonna go over all the hits and get the game objects.

62
00:04:02.690 --> 00:04:06.590
So let's just have a look at the slide again and go through get all the game objects and then we're

63
00:04:06.590 --> 00:04:11.700
gonna get all the components on the game objects that implements AI Ray Castille.

64
00:04:11.840 --> 00:04:12.850
So let's give this a shot.

65
00:04:12.880 --> 00:04:21.140
So we're going through all the hits first of all then we are going to do a hit dot game and see can

66
00:04:21.140 --> 00:04:25.700
we do just a hit dot transformer or something to get a component on it.

67
00:04:25.700 --> 00:04:31.940
And then we can do a get component in fact components we want to get all the ray cesspools remember

68
00:04:32.450 --> 00:04:34.770
and we going to be using a I recast ball.

69
00:04:34.790 --> 00:04:42.650
Now I haven't actually put Ray Cassel in a namespace so let's do a namespace for RPG dot control.

70
00:04:42.740 --> 00:04:49.320
So that is kind of restricted here to this control interface and that's where we're gonna get the components

71
00:04:49.670 --> 00:04:56.060
for AI Ray Castille and I'm gonna store this in a variable the AI Ray Constable array it's gonna be

72
00:04:57.940 --> 00:05:03.100
and I'll just call this the Ray caster balls and we can put semicolon on the end of the line.

73
00:05:03.160 --> 00:05:08.910
Okay so now what we want to do is do again another for each over this time.

74
00:05:08.950 --> 00:05:19.150
I Ray Castille call it Ray Castille in the Ray cast balls all kind of superfluous here.

75
00:05:19.450 --> 00:05:26.860
Then we're gonna do this for each loop over that and what we're going to do is there may be no Ray castles

76
00:05:26.890 --> 00:05:31.780
for example on the last component but that's okay because this for each loop will just not execute the

77
00:05:31.780 --> 00:05:33.180
body at any point.

78
00:05:33.190 --> 00:05:38.290
So what we're gonna attempt to do is see if the ray Cassel can actually handle this recast.

79
00:05:38.290 --> 00:05:45.160
So we're gonna say if Ray casts of all dots handle Ray cast quite simply not passing into any arguments

80
00:05:45.160 --> 00:05:50.080
at the moment then what we're going to do is return true.

81
00:05:50.080 --> 00:05:52.700
We're also going to want to set the cursor.

82
00:05:52.720 --> 00:05:56.440
So for now I'm just going to set the combat cursor.

83
00:05:56.440 --> 00:06:02.350
We will look at setting specific different types of cursor set by the ray Castille later on but for

84
00:06:02.350 --> 00:06:04.570
now we're just going to use the combat cursor.

85
00:06:04.570 --> 00:06:11.530
And finally if we get through every ray Castille and every game object that we have hit and nothing

86
00:06:11.530 --> 00:06:14.890
has handled the Ray cast then we can return false.

87
00:06:14.890 --> 00:06:20.790
There were no Ray Cassel objects through this particular Ray and we haven't set the cursor either.

88
00:06:21.550 --> 00:06:27.520
So I'm going to show you how we can use this approach to set a cursor on the weapon pick up and allow

89
00:06:27.520 --> 00:06:34.000
us to click on weapon pickups in order to pick them up and then we're going to reapply this to combat.

90
00:06:34.030 --> 00:06:41.950
So first of all we have got our own trigger into where we are doing this equip weapon and then hiding

91
00:06:41.950 --> 00:06:43.610
it for a certain amount of time.

92
00:06:43.630 --> 00:06:45.250
Now I'm going to pull this out.

93
00:06:45.250 --> 00:06:52.000
I'm going to extract the method here and just call that pickup because basically what we're saying is

94
00:06:52.180 --> 00:07:00.190
we are asking the on trigger enter to pick up from that player by the way if at this stage you feel

95
00:07:00.190 --> 00:07:01.540
like you could try and implement.

96
00:07:01.540 --> 00:07:05.440
I'm Ray Cassel yourself do pose video and give that a go as a challenge to yourself.

97
00:07:05.440 --> 00:07:10.060
Slightly more advanced so I'm not offering that up as a challenge for everyone.

98
00:07:10.060 --> 00:07:11.670
Now the arguments for pickup.

99
00:07:11.680 --> 00:07:17.650
Actually I want fighter to come in as the argument to pick up so I'm going to take this other dot get

100
00:07:17.650 --> 00:07:18.280
fighter.

101
00:07:18.370 --> 00:07:24.370
Cut that out and I'm gonna stick that in pickup instead it's in the argument for pickup we're going

102
00:07:24.370 --> 00:07:33.280
to calculate it and then I'm going to change the parameter to the pickup method to be the fighter and

103
00:07:33.280 --> 00:07:39.480
that's what we're going to use when doing fighter dot equip so that's equipping the weapon.

104
00:07:39.520 --> 00:07:41.340
Okay so that makes sense.

105
00:07:41.350 --> 00:07:44.410
Now we want to implement that I constables.

106
00:07:44.430 --> 00:07:45.630
So do I.

107
00:07:45.640 --> 00:07:50.400
Ray Castille notice it's not there because it's part of a different namespace.

108
00:07:50.410 --> 00:07:52.690
So we're gonna have to add control in here.

109
00:07:53.020 --> 00:07:56.170
So we're going to depend on control rather than the other way round.

110
00:07:56.170 --> 00:08:01.330
So this is a dependency inversion because we gonna be adding more systems like weapon pickups.

111
00:08:01.330 --> 00:08:06.970
I want the dependency to go that way and then I don't have to go in and edit my control classes every

112
00:08:06.970 --> 00:08:14.060
time I add something new that can be interacted with so this right Constable is gonna need to be implemented.

113
00:08:14.070 --> 00:08:19.660
I'm going to implement the interface go down to where is happening and you notice what I want to do

114
00:08:19.660 --> 00:08:21.050
is call pickup.

115
00:08:21.070 --> 00:08:24.480
In fact what I want to do is call pick up if the mouse is down.

116
00:08:24.490 --> 00:08:25.720
So let's do that.

117
00:08:25.750 --> 00:08:31.780
Inputs don't get mouse button down and we just want mouse button zero.

118
00:08:31.780 --> 00:08:36.410
So if mouse button 0 is down with clicking We want to be picking up this weapon.

119
00:08:36.400 --> 00:08:40.270
So I want to be calling pickup but I don't have a fighter to call it out.

120
00:08:40.270 --> 00:08:44.280
Now I could say well just get the player go and do it on the player.

121
00:08:44.290 --> 00:08:45.970
But I think that's a little bit messy.

122
00:08:45.970 --> 00:08:51.610
So what I'm going to do is I'm gonna go to the AI right castles and just have it tell us the player

123
00:08:51.610 --> 00:09:00.640
controller that is calling this so I'm gonna call it the calling controller in the arguments for handle

124
00:09:00.640 --> 00:09:05.500
right cast and we're gonna have to pull that across to a weapon pickup so that it now respects the new

125
00:09:05.500 --> 00:09:06.640
interface.

126
00:09:06.640 --> 00:09:13.030
But now with this calling controller which is a component on the player that is called this we can now

127
00:09:13.030 --> 00:09:20.260
do a calling controller dot get components and we can get the fighter component there and then so we

128
00:09:20.260 --> 00:09:24.100
can get the fighter component we can do the pickup right there when we're clicking.

129
00:09:24.100 --> 00:09:31.780
Now the important thing to note here is that basically if we are hovering over a pickup we should always

130
00:09:31.780 --> 00:09:37.560
be allowed to pick it up so very simply we can just return true.

131
00:09:37.650 --> 00:09:40.230
In this case we can say yes you are.

132
00:09:40.230 --> 00:09:46.050
I'm handling this recast if you have hit me which is a game object that handles weapon pickups.

133
00:09:46.050 --> 00:09:46.980
I am handling it.

134
00:09:46.980 --> 00:09:51.090
You can't do any other things like try and walk to the terrain.

135
00:09:51.090 --> 00:09:56.520
So let's give this a shot and see whether this working well before that I need to go into play controller

136
00:09:56.550 --> 00:09:59.370
and make the new interface be respected.

137
00:09:59.370 --> 00:10:04.950
So I'm just going to pass in this into handle right cast because we are the player controller so that

138
00:10:04.950 --> 00:10:06.460
types should match.

139
00:10:06.470 --> 00:10:08.250
Now let's try it out in the game.

140
00:10:08.250 --> 00:10:13.740
If there are no more errors I should be able to hover over a pickup and you see I've got my attacking

141
00:10:13.920 --> 00:10:18.560
cursor if I click on the pickup while I move over there as well.

142
00:10:18.570 --> 00:10:22.370
But I did pick it up straight away that was the first thing that happened.

143
00:10:22.500 --> 00:10:29.310
So it seems to be working is now that we are able to control and interact with these components using

144
00:10:29.310 --> 00:10:31.150
the eye rake habitable.

145
00:10:31.170 --> 00:10:36.810
So now you might notice that the code in interactive component is actually very similar with the code

146
00:10:36.840 --> 00:10:40.140
in interact with combat with a few differences.

147
00:10:40.140 --> 00:10:46.650
Now what I want you to do as your challenge is to take this interact with combat and eliminate it completely.

148
00:10:46.650 --> 00:10:49.580
Basically by using the combat target class.

149
00:10:49.610 --> 00:10:56.130
So we've got a combat target Yes currently not doing very much but it is on all of the things that are

150
00:10:56.130 --> 00:10:57.530
a combat target.

151
00:10:57.540 --> 00:11:04.980
So what I'd like to do is make this into an irate caster ball and make it handle the body of this interact

152
00:11:04.980 --> 00:11:10.290
with combat so that if we can attack the fight with the fighter then we should.

153
00:11:10.290 --> 00:11:11.310
And so on and so forth.

154
00:11:11.310 --> 00:11:17.440
So basically moving this code into the IRA bill so that it can be used as interact with component pulls

155
00:11:17.510 --> 00:11:20.260
a video and have a go OK.

156
00:11:20.260 --> 00:11:21.080
Welcome back.

157
00:11:21.100 --> 00:11:27.730
So we're going to start off by implementing I Ray testable in the combat target we're going to need

158
00:11:27.730 --> 00:11:37.610
to include RPG control we're going to need to implement the handle recast method and then we're going

159
00:11:37.610 --> 00:11:39.860
to pull across this code.

160
00:11:39.860 --> 00:11:45.680
So the first thing you'll notice inside the body of the for each loop is that we basically this is what

161
00:11:45.680 --> 00:11:46.690
we're doing.

162
00:11:46.790 --> 00:11:48.960
That's what we want to have as the result.

163
00:11:48.980 --> 00:11:54.020
So I'm going to cut that out and put it in handle recast instead.

164
00:11:54.050 --> 00:11:56.110
Now I'm gonna get some errors obviously.

165
00:11:56.120 --> 00:11:57.440
So the first thing is set cursor.

166
00:11:57.440 --> 00:12:02.020
I'm not gonna be doing that here that's going to be done outside in the play controller.

167
00:12:02.030 --> 00:12:07.250
I am going to be returning true if some of this stuff is the case and otherwise I'm going to be returning

168
00:12:07.250 --> 00:12:08.400
false.

169
00:12:08.420 --> 00:12:10.670
So let's consider this through a little bit.

170
00:12:10.670 --> 00:12:16.940
First of all we don't have a hit dot transform but that's okay because actually this combats target

171
00:12:16.940 --> 00:12:20.300
right here is the combat target we want.

172
00:12:20.300 --> 00:12:21.170
It's the target.

173
00:12:21.170 --> 00:12:22.690
So we don't need to do this.

174
00:12:22.700 --> 00:12:24.120
We don't need to do the null check.

175
00:12:24.130 --> 00:12:29.990
It's already happened for us in that code is calling the irate festivals.

176
00:12:30.170 --> 00:12:32.910
Next thing we're doing a get component fighter.

177
00:12:32.960 --> 00:12:38.060
Now we don't want to get the component fighter of the target.

178
00:12:38.060 --> 00:12:41.150
We want to get the component fighter of the calling controller.

179
00:12:41.150 --> 00:12:47.260
So we're doing calling controller dot get component fighter dot can attack this target.

180
00:12:47.300 --> 00:12:49.250
And basically there's target again wherever we're seeing.

181
00:12:49.250 --> 00:12:50.780
Target is just us.

182
00:12:50.810 --> 00:12:56.340
So we're just getting the game object we're saying can the calling controller attack us basically.

183
00:12:56.360 --> 00:13:02.000
And if it cannot attack us for whatever reason maybe we're dead then we actually just need to return

184
00:13:02.000 --> 00:13:07.260
false out of here we need to say no we cannot handle this right cast.

185
00:13:07.280 --> 00:13:09.740
How about if the mouse is down.

186
00:13:09.740 --> 00:13:15.410
Well then we aren't going to actually do the attack on again where the attack is going to be done on

187
00:13:15.410 --> 00:13:16.920
the current game object.

188
00:13:17.060 --> 00:13:18.290
And who's doing the attacking.

189
00:13:18.290 --> 00:13:22.990
It's the calling controller so calling controllers fighter can attack us basically.

190
00:13:23.180 --> 00:13:28.250
And then the return at the end is going to stay true because we've already eliminated the case that

191
00:13:28.250 --> 00:13:32.460
we aren't able to do so hopefully that all makes sense.

192
00:13:32.460 --> 00:13:34.160
I'm going to save up my files.

193
00:13:34.170 --> 00:13:41.040
I'm going to actually remove interact with combat altogether out of this play controller file and I'm

194
00:13:41.040 --> 00:13:46.860
going to remove it from updates because as you can see it's all being handled inside interact with component

195
00:13:46.860 --> 00:13:47.080
now.

196
00:13:47.100 --> 00:13:51.870
Just a side note notice that we can't do the same thing with interact with movement it fundamentally

197
00:13:51.870 --> 00:13:53.340
works in a different way.

198
00:13:53.370 --> 00:13:59.190
We are recasting down onto the nav mesh essentially and we might want to do more clever stuff with that

199
00:13:59.190 --> 00:14:00.400
too.

200
00:14:00.420 --> 00:14:04.160
Basically the problem here is that the nav mesh does not have a component that we can make.

201
00:14:04.200 --> 00:14:05.050
I recast Bill.

202
00:14:05.070 --> 00:14:08.010
So that has to be kept separate.

203
00:14:08.010 --> 00:14:12.720
So now if we launch up the game you can see that if we hover over our guard we've got an attack cursor

204
00:14:12.720 --> 00:14:13.650
hover over our pick up.

205
00:14:13.650 --> 00:14:16.580
We also have an attack curse we'll fix that in the next lecture.

206
00:14:16.740 --> 00:14:19.930
But if I click on my God I will go ahead and attack him.

207
00:14:20.100 --> 00:14:22.070
As per we were doing before.

208
00:14:22.100 --> 00:14:23.640
So all the functionality is the same.

209
00:14:23.640 --> 00:14:28.300
But now we're using a more decoupled system via the I rake testable.

210
00:14:28.380 --> 00:14:34.770
Now as I mentioned already during this lecture we are going to go into the next lecture to change our

211
00:14:34.770 --> 00:14:38.220
curses depending on which objects we're hovering over.

212
00:14:38.250 --> 00:14:43.920
So that for example the hovering over the guard is going to give me the attackers are hovering over

213
00:14:43.920 --> 00:14:46.860
a pickup can give me a pickup a specific cursor.

214
00:14:47.280 --> 00:14:48.750
So I will see you in that lecture.
