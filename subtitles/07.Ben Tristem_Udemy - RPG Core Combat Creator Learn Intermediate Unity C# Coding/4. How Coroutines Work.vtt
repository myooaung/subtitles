WEBVTT
1
00:00:04.260 --> 00:00:04.850
Hey folks.

2
00:00:04.860 --> 00:00:07.600
And welcome to another video with my face in.

3
00:00:07.680 --> 00:00:14.370
This is because I am going to take you over a recap of what it is that we're doing with co routines.

4
00:00:14.370 --> 00:00:18.560
You've probably used car routines before you may have used them as a bit of kind of magical syntax.

5
00:00:18.570 --> 00:00:22.310
And I want to take you up on why that magical syntax works.

6
00:00:22.440 --> 00:00:22.840
OK.

7
00:00:22.860 --> 00:00:28.650
Let's dive in and have a look at lists and arrays and enumerators.

8
00:00:28.680 --> 00:00:28.950
OK.

9
00:00:28.960 --> 00:00:30.000
What's why.

10
00:00:30.000 --> 00:00:31.110
Why do I want to start with this.

11
00:00:31.710 --> 00:00:33.900
Because these are the building blocks of teens now.

12
00:00:33.990 --> 00:00:39.150
Just put courage teens to the side for a minute now because you're not going to understand why I'm talking

13
00:00:39.150 --> 00:00:42.170
about these until I bring it back round.

14
00:00:42.180 --> 00:00:44.370
So let's just talk about I new writers.

15
00:00:44.370 --> 00:00:46.520
What are they why do they exist.

16
00:00:46.590 --> 00:00:52.350
So you've seen I enumerators probably in the context of current teens before but we're going to be using

17
00:00:52.350 --> 00:00:53.770
them differently.

18
00:00:53.850 --> 00:00:56.790
They're the way we're going to be using them as more like lists and arrays.

19
00:00:56.790 --> 00:01:04.410
Now if lists and arrays were Pringles then lists and arrays would be Pringles in a bowl where you can

20
00:01:04.410 --> 00:01:08.640
pick any Pringle that you want from the bowl of Pringles.

21
00:01:08.640 --> 00:01:15.180
On the other hand the Pringles in a tube are like an iron numerator you can only take the top most Pringle

22
00:01:15.180 --> 00:01:17.190
at any given time.

23
00:01:17.190 --> 00:01:22.110
Now this might seem like a loony idea and you might be going why is Sam rambling on about Pringles.

24
00:01:22.110 --> 00:01:24.670
Well Rick thought it was a good idea so blame it on him.

25
00:01:24.690 --> 00:01:26.530
He thought it was a good good analogy.

26
00:01:27.000 --> 00:01:33.780
So the idea is how you can access these less than arrays you can access any way you like iron numerator

27
00:01:33.840 --> 00:01:34.880
is an interface.

28
00:01:34.920 --> 00:01:37.620
And it is restricted to the ways you can access it.

29
00:01:37.620 --> 00:01:39.000
So in fact it is an interface.

30
00:01:39.000 --> 00:01:44.610
As I said and we've used interfaces before and they look the numerator interface basically looks like

31
00:01:44.610 --> 00:01:45.380
this.

32
00:01:45.530 --> 00:01:48.300
It allows you to get the current object.

33
00:01:48.300 --> 00:01:52.890
So this is a getter by the way there's a house written inside an interface is basically just like a

34
00:01:52.890 --> 00:01:53.430
property.

35
00:01:53.430 --> 00:02:00.480
So you do dot current and it gets you the current item in the numerator basically the top most Pringle

36
00:02:01.050 --> 00:02:06.420
and then you can call move to next which basically takes the Pringle out of the packet and consumes

37
00:02:06.420 --> 00:02:13.140
it and you go NOM NOM NOM very tasty and then you add the currents will be the next Pringle on the top

38
00:02:13.140 --> 00:02:13.920
of the pile.

39
00:02:14.100 --> 00:02:20.940
And this you'll notice returns a boolean once it return a boolean because if there are no more Pringles

40
00:02:20.940 --> 00:02:25.220
in the tube when you remove one then it's going to return false.

41
00:02:25.230 --> 00:02:27.960
Basically it's going to say I cannot take anymore Pringles out this tube.

42
00:02:27.960 --> 00:02:28.620
It's empty.

43
00:02:28.650 --> 00:02:30.210
You need to buy another Pringle cheap.

44
00:02:30.990 --> 00:02:37.230
So how do we use I enumerators when not talking about Pringles.

45
00:02:37.230 --> 00:02:43.510
So this is my hungry child function carrying on with the analogy that we had previously.

46
00:02:43.710 --> 00:02:50.880
We're going to have an iron numerator that returns types of Pringle so it returns a Pringle class single

47
00:02:50.940 --> 00:02:51.760
Pringle class.

48
00:02:51.810 --> 00:02:56.330
So we've got this Pringles tube we're calling The get Pringles method to do that.

49
00:02:56.340 --> 00:02:58.930
I'm going to talk about what that is and in a second.

50
00:02:59.220 --> 00:03:03.770
And what we can do is we can do a while loop over the Pringles tube.

51
00:03:03.870 --> 00:03:10.050
So this is a bit like doing it for each Pringle in an in in enemies.

52
00:03:10.050 --> 00:03:12.840
For each Pringle and brindle tube is what I mean to say that.

53
00:03:13.080 --> 00:03:20.700
And while we say basic while we have more Pringles in the tube we move next we try and take a Pringle

54
00:03:20.730 --> 00:03:26.850
out of the tube and then we can get the current Pringle which is the one at the top and we can eat that

55
00:03:26.850 --> 00:03:27.270
Pringles.

56
00:03:27.270 --> 00:03:33.690
So that's how I animators work basically allowing us to pop items off that Pringles tube as it were

57
00:03:34.740 --> 00:03:37.010
now how do we build the Pringles.

58
00:03:37.010 --> 00:03:38.970
Because we've got this get Pringles function.

59
00:03:38.970 --> 00:03:40.420
How do we return an iron numerator.

60
00:03:40.420 --> 00:03:48.300
Well this is one straightforward way is that we can take just a list create a list of Pringles first

61
00:03:48.300 --> 00:03:49.230
and foremost.

62
00:03:49.380 --> 00:03:56.550
We can iterate create a full loop in this case and bring a full loop of 1000 and I can create new Pringle

63
00:03:56.580 --> 00:03:59.250
I can stamp a serial number on the Pringle.

64
00:03:59.250 --> 00:04:07.500
This will be important later on and I can add the Pringle to the Pringles tube list and then at the

65
00:04:07.500 --> 00:04:13.440
end of my function I can turn a list into an iron numerator because if you think about it a list is

66
00:04:13.530 --> 00:04:19.860
more powerful than an iron numerator and can definitely implement the iron numerator interface so you

67
00:04:19.860 --> 00:04:25.080
can just convert it into an iron numerator and then it just get access it gets accessed one by one so

68
00:04:25.380 --> 00:04:27.080
this is all well and good.

69
00:04:27.090 --> 00:04:31.800
That's if you want to build your entire set of Pringles before you start.

70
00:04:31.800 --> 00:04:38.610
But one of the really cool things about iron numerator is that it allows you to lazily build Pringles.

71
00:04:38.610 --> 00:04:43.110
So we're going to talk about yield return and how it can make us allow us to create essentially an infinite

72
00:04:43.110 --> 00:04:44.240
Pringles tube.

73
00:04:44.340 --> 00:04:51.090
So the get Pringles method let's start in the same way it still returns an iron numerator which contains

74
00:04:51.090 --> 00:04:53.160
Pringles basically.

75
00:04:53.160 --> 00:04:54.080
And how do we do this.

76
00:04:54.110 --> 00:04:59.940
Well still got that full loop of creating 1000 Pringles but instead we create that new Pringle we stamp

77
00:04:59.940 --> 00:05:04.260
the serial number as before but we yield return the Pringle.

78
00:05:04.260 --> 00:05:11.220
That's the one item and what's going on here is that when we yield return we are then waiting for the

79
00:05:11.220 --> 00:05:15.420
code that called us to call move next.

80
00:05:15.420 --> 00:05:21.180
And then it will carry on executing this loop but it only executes up to the first yield return until

81
00:05:21.180 --> 00:05:22.890
move next is cool is pretty cool.

82
00:05:22.990 --> 00:05:28.170
It's actually pausing this function Midway as we are executing it basically.

83
00:05:28.200 --> 00:05:36.570
So it's quite cool piece of C sharp language feature so let's what I've done here is I've unrolled the

84
00:05:36.570 --> 00:05:42.810
loop so you can see that we've got the get Pringles and we're doing a move next get current Pringle

85
00:05:42.840 --> 00:05:44.840
Eat Move next get current Pringle eat.

86
00:05:44.850 --> 00:05:50.440
So this would go on and on but for now we've just unrolled it three times and similarly we've unroll

87
00:05:50.440 --> 00:05:51.470
the loop three times here.

88
00:05:51.480 --> 00:05:54.870
So let's just have a look at what the execution flow would be doing.

89
00:05:54.900 --> 00:06:01.440
So first of all we execute to the move next and nothing has happened inside get Pringles then we call

90
00:06:01.440 --> 00:06:02.040
move next.

91
00:06:02.040 --> 00:06:03.700
So it goes to get Pringles.

92
00:06:03.700 --> 00:06:06.990
No sir it didn't do it when we could get Pringles initially.

93
00:06:07.050 --> 00:06:13.890
It's doing it now when we called move next it executes down to the first yield return and then returns

94
00:06:14.250 --> 00:06:21.270
execution flow back to the hungry child function where we proceed to get the current Pringle and eat

95
00:06:21.270 --> 00:06:27.900
it and go to the next move next which then goes and notice it doesn't start from the top of the function

96
00:06:27.930 --> 00:06:35.160
but starts from where we left off from this yield return it goes and carries on executing and it's remembered

97
00:06:35.580 --> 00:06:39.010
all of the variables what stage all the variables were at.

98
00:06:39.060 --> 00:06:43.760
Which is pretty neat little trick and go back and so on and so forth.

99
00:06:43.770 --> 00:06:51.050
Now what could happen at any point is the hungry child could get bored and run off and the AI in numerator

100
00:06:51.090 --> 00:06:55.660
or the get Pringles method would remember where we left off which is pretty cool.

101
00:06:55.800 --> 00:07:02.850
And if the child came back and continued consuming at a later date then we would be none the wiser in

102
00:07:02.850 --> 00:07:07.590
this method we would just have waited longer but we would have carried on remembering all the state

103
00:07:07.650 --> 00:07:08.370
that we were in.

104
00:07:08.400 --> 00:07:10.050
So that's pretty cool.

105
00:07:10.050 --> 00:07:15.570
And you'll notice that that's something something what like some types of method that we want to write

106
00:07:15.570 --> 00:07:19.920
we want to be able to pause and wait for two seconds for example.

107
00:07:19.920 --> 00:07:28.080
So that is what unity have realised is that you can use this iron numerator sat up with yield returns

108
00:07:28.440 --> 00:07:36.210
to create yourself very cool functionality with cow routines so let's have a recap of what the functionality

109
00:07:36.210 --> 00:07:38.240
of car routines actually is.

110
00:07:38.250 --> 00:07:46.330
So you need to call start co routine on a method that has a return type of iron numerator.

111
00:07:46.380 --> 00:07:54.030
And now you can see that this iron numerator is really just a Pringles tube full of these kinds of instructions

112
00:07:54.090 --> 00:07:59.310
telling it to wait for seconds wait for fixed update and wait for seconds.

113
00:07:59.310 --> 00:08:04.620
So what's going on on Unity's end why has it got it set up like this.

114
00:08:05.190 --> 00:08:10.560
Well this is kind of simplified version of how coatings might work on the engine side.

115
00:08:10.560 --> 00:08:16.400
So unity would keep a list of iron numerator enumerators the core routines and the call this the coating

116
00:08:16.410 --> 00:08:24.660
directory and start a new stock her routine would look something like this basically we add it to the

117
00:08:24.660 --> 00:08:25.280
directory.

118
00:08:25.320 --> 00:08:31.110
That's all that is all start carotene does it adds it to the data directory but every update unity is

119
00:08:31.110 --> 00:08:37.770
going to check through all of the running coatings all the courage teens in that directory and is going

120
00:08:37.770 --> 00:08:47.250
to say has it is it ready has executed enough so it's going to look at the current top value so that's

121
00:08:47.250 --> 00:08:52.950
going to be something like a wait for seconds instruction and say have I waited already two seconds

122
00:08:52.950 --> 00:08:55.290
since this instruction was returned to me.

123
00:08:55.290 --> 00:09:01.410
If so if we have waited enough then we can call move next on the coating and the side effect of that

124
00:09:01.710 --> 00:09:05.390
is that it's going to execute the code after the yield return.

125
00:09:05.400 --> 00:09:08.210
So it's going to execute the code after the wait for seconds.

126
00:09:08.210 --> 00:09:12.860
So it does exactly what we wanted to do wait for seconds and then moves on.

127
00:09:12.870 --> 00:09:14.940
So that's basically the idea.

128
00:09:14.970 --> 00:09:19.580
It kind of goes and calls move next when we have waited enough.

129
00:09:19.590 --> 00:09:24.240
And obviously unity has more complexity than this because you can wait for all sorts of things like

130
00:09:24.240 --> 00:09:25.870
fixed update and so on and so forth.

131
00:09:25.980 --> 00:09:29.270
But this is the crux of how they are working.

132
00:09:29.430 --> 00:09:36.600
So I would like to challenge you to have a little think about why we use I enumerators think of at least

133
00:09:36.660 --> 00:09:42.600
in multiple use cases a couple of one of which is going to be the coatings of course explain the carotene

134
00:09:42.660 --> 00:09:49.200
use case but think of some others as well what other use cases can you think of for I enumerators and

135
00:09:49.200 --> 00:09:53.650
what makes I enumerate is good for this particular use case that you're thinking up.

136
00:09:53.850 --> 00:10:00.210
This is the end of the video now and I would like you to go to the share link and share your answers

137
00:10:00.300 --> 00:10:02.690
to this iron numerator challenge.

138
00:10:02.730 --> 00:10:06.780
And I look forward to seeing you in the next lecture where we'll actually be using these co routines

139
00:10:07.110 --> 00:10:09.530
to run code between levels.

140
00:10:09.720 --> 00:10:10.410
I will see that.
