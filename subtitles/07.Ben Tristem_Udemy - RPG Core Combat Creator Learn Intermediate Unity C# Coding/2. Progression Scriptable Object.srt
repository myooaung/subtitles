1
00:00:04,490 --> 00:00:05,840
Hello and welcome in this lecture.

2
00:00:05,840 --> 00:00:10,060
We're gonna be creating a scriptural object asset called a progression.

3
00:00:10,070 --> 00:00:13,490
And as you can see from this progression it's laid out hierarchically.

4
00:00:13,490 --> 00:00:18,190
So we have multiple character classes which I can expand in and out.

5
00:00:18,380 --> 00:00:23,500
And these current classes have a property called the character class and that is a dropdown list here.

6
00:00:23,630 --> 00:00:29,630
And then we have a health element which is actually itself an array and contains all the different health

7
00:00:29,690 --> 00:00:35,570
at different levels so we can look at this spreadsheet basically and say hey I've got a player and he's

8
00:00:35,570 --> 00:00:37,960
a level two so he should have 100 health.

9
00:00:38,000 --> 00:00:40,220
That's what we're gonna be solving in this lecture.

10
00:00:40,220 --> 00:00:44,030
Let's dive in and see how we can use the scriptural object system to achieve that.

11
00:00:44,870 --> 00:00:49,970
So in our progression design that we've got here we've currently got our base stats but it needs to

12
00:00:49,970 --> 00:00:54,830
point to a progression asset which is going to be a scripts will object and that's gonna be the subject

13
00:00:54,890 --> 00:00:56,300
of this lecture.

14
00:00:56,330 --> 00:00:58,480
So let's dive in and create one.

15
00:00:58,520 --> 00:01:02,330
I'm going to go to the scripts folder to the stats folder within it.

16
00:01:02,510 --> 00:01:11,300
Create a new script in here and you see sharp scripts and I'm going to call this a progression and then

17
00:01:11,300 --> 00:01:17,170
this progression I'm going to go ahead and open up and actually replace the contents of this file entirely.

18
00:01:17,360 --> 00:01:22,100
What I want to do is I want to have a script object so I'm going to use the autocomplete here in Visual

19
00:01:22,100 --> 00:01:23,470
Studio to do that.

20
00:01:23,690 --> 00:01:28,790
And it's giving me that obviously it's called progression and I can create a new progression by going

21
00:01:28,850 --> 00:01:30,920
into the RPG project menu.

22
00:01:30,920 --> 00:01:33,850
So let's just go ahead and see how that looks.

23
00:01:33,860 --> 00:01:34,870
Is that what I want.

24
00:01:34,970 --> 00:01:41,750
If I go over I'm going to create my progression actually in the roots of the game folder and I'll put

25
00:01:41,750 --> 00:01:42,940
it in core.

26
00:01:42,950 --> 00:01:47,780
So in core I'm going to go ahead and create a RPG project progression.

27
00:01:47,810 --> 00:01:50,790
So is that what we want no weapons is at the top level here.

28
00:01:50,930 --> 00:01:57,850
I'm going to have stats and then new progression in here.

29
00:01:57,860 --> 00:02:04,820
Like so let's have a look if that looks better it's going to right click menu here create stats new

30
00:02:04,820 --> 00:02:05,420
progression.

31
00:02:05,420 --> 00:02:10,110
Okay so we've got ourselves our progression asset we're only gonna be needing one.

32
00:02:10,130 --> 00:02:14,900
In actual fact because everything is going to go ahead and point at that progression access.

33
00:02:14,930 --> 00:02:16,610
So that's how I can look.

34
00:02:16,610 --> 00:02:21,470
Well if we go to our base stats it's going to point to it just by having a serialized field that's as

35
00:02:21,470 --> 00:02:23,410
easy as what we need.

36
00:02:23,420 --> 00:02:30,410
So we're going to do a progression type for this field and we'll just call this the progression that

37
00:02:30,410 --> 00:02:31,930
we want it to point to.

38
00:02:31,930 --> 00:02:39,110
Now I'm going to start off with this as no just to avoid any compilation complaints and warnings.

39
00:02:39,140 --> 00:02:47,990
So if I now want to hook this up I need to go to the characters and the root character which has this

40
00:02:47,990 --> 00:02:49,280
base stats on it.

41
00:02:49,580 --> 00:02:51,550
And where is that based at.

42
00:02:51,550 --> 00:02:52,100
Here it is.

43
00:02:52,160 --> 00:02:53,840
And I can hook it up to the progression.

44
00:02:53,840 --> 00:02:59,900
We've only got one and every single character in our game is automatically going to use that whether

45
00:02:59,900 --> 00:03:05,480
it's an enemy in Archer a player that's already been hooked up with just this one variable in this one

46
00:03:05,480 --> 00:03:08,880
prefab that's the power of prefab variants for you.

47
00:03:08,900 --> 00:03:11,290
So we're going to go over and just have a look.

48
00:03:11,330 --> 00:03:17,900
Obviously our progression is looking pretty plain at the moment it doesn't have anything like what we

49
00:03:17,900 --> 00:03:20,960
are intending it to look like over here in the design.

50
00:03:21,080 --> 00:03:26,200
So to do that we're gonna need to go down on kind of multiple levels because we don't want to do arrays

51
00:03:26,210 --> 00:03:33,380
of stuff that contains health contains damage also contains the class that we want and to do that there

52
00:03:33,380 --> 00:03:41,180
is a feature that's really handy in unity which is that you can use any old class in a serialized field

53
00:03:41,240 --> 00:03:42,860
with a few conditions.

54
00:03:42,860 --> 00:03:49,550
So for example I want a list of the character classes in here the character classes being this whole

55
00:03:49,550 --> 00:03:55,630
thing the health the health at each level and also which character class I currently am.

56
00:03:55,640 --> 00:04:04,390
So I'm going to create a class within a class which you can do by the way called the progression character

57
00:04:05,580 --> 00:04:06,290
class.

58
00:04:06,420 --> 00:04:12,790
Like so just as differentiate it from the e num that is the character class and in here we can do whatever

59
00:04:12,810 --> 00:04:13,200
we like.

60
00:04:13,200 --> 00:04:19,550
We could have some ints called value and I'm going to get that default three.

61
00:04:19,710 --> 00:04:24,710
We could have a string called name and I'm going to default of Hello.

62
00:04:24,750 --> 00:04:27,530
And just this is for sake of argument.

63
00:04:27,690 --> 00:04:36,620
Now why want to do is I want to create a serialized field in progression of type progression character

64
00:04:36,620 --> 00:04:42,620
class and then I can just call this the character class like so.

65
00:04:43,430 --> 00:04:49,100
And what's gonna happen here is if we go over to have a look in our progression scripts will object

66
00:04:49,430 --> 00:04:51,800
should change as soon as the compilation is done.

67
00:04:51,950 --> 00:04:52,940
Except it isn't.

68
00:04:53,000 --> 00:04:53,870
And why is that.

69
00:04:53,870 --> 00:04:58,230
If I go and have a look at my console there's not much of use in there either.

70
00:04:58,760 --> 00:05:05,400
But the key is that this class here is not marked as something that unity knows how to serialize.

71
00:05:05,450 --> 00:05:14,590
Now the way we can do this is simply to put a system dot serialize a ball as an annotation on this class.

72
00:05:14,600 --> 00:05:19,120
Now if we head back to that progression asset wait for it to update.

73
00:05:19,130 --> 00:05:23,900
You can see that it's got this character class in here but there's nothing in there.

74
00:05:23,900 --> 00:05:30,050
Now the other thing you have to do is make these variables public and in this case we aren't going to

75
00:05:30,050 --> 00:05:33,800
worry with annotations you'd think that you could do serialized field.

76
00:05:33,800 --> 00:05:39,500
But let me show you that because we're using a different set of annotations here we're using the C sharp

77
00:05:39,500 --> 00:05:39,950
annotations.

78
00:05:39,950 --> 00:05:41,110
I don't think that works.

79
00:05:41,120 --> 00:05:46,240
We go back over to have a look at the refreshed set things on it.

80
00:05:46,250 --> 00:05:46,950
It works.

81
00:05:46,960 --> 00:05:48,920
Sara ice field on value works as well.

82
00:05:49,010 --> 00:05:53,410
So let's just go with serialized field but we do have to put this annotation here.

83
00:05:53,510 --> 00:05:58,450
If you comment that out nothing's going to show up in here at all.

84
00:05:58,450 --> 00:05:59,110
There you go.

85
00:05:59,110 --> 00:06:03,670
So we gotta have system dot serialized bool just to tell unity that this is a class that it can use

86
00:06:03,670 --> 00:06:09,100
in a serialized field and then it can have serialized fields within it that it can then display in the

87
00:06:09,100 --> 00:06:09,580
editor.

88
00:06:10,180 --> 00:06:15,120
So we've got this character class which inside it has this value and has this name.

89
00:06:15,190 --> 00:06:18,760
So it's time for a challenge for you to create this progression.

90
00:06:18,760 --> 00:06:19,930
Scripts will object.

91
00:06:19,950 --> 00:06:24,690
It's a bit of a tricky challenge but hopefully you feel up to it and want to give it a try.

92
00:06:24,700 --> 00:06:31,360
So the progression as I said is going to be in these levels we're going to have many levels for our

93
00:06:31,360 --> 00:06:32,370
character classes.

94
00:06:32,380 --> 00:06:37,280
So we've already said that we've got this class progression Character Stats.

95
00:06:37,300 --> 00:06:42,520
How can we do a serialized field that has potentially multiple entries in here it could have three it

96
00:06:42,520 --> 00:06:43,480
could have 10.

97
00:06:43,600 --> 00:06:46,130
We could keep adding them next.

98
00:06:46,360 --> 00:06:52,090
You want to have a way for that character class to identify that it is a grunt or it's for a player

99
00:06:52,120 --> 00:06:57,400
or for a mage and then you're going to want to have the different fields which at the moment we're just

100
00:06:57,400 --> 00:07:01,600
going to deal with health and each level within health itself.

101
00:07:01,600 --> 00:07:07,360
So which class is this Which class is this cat's class you're going to want to think about this character

102
00:07:07,360 --> 00:07:13,420
class and how we can have multiple of those in the progression and then only health and ours.

103
00:07:13,420 --> 00:07:13,930
Interesting.

104
00:07:13,930 --> 00:07:17,430
Don't worry about damage just yet you can do damage for extra credit if you want to now.

105
00:07:17,440 --> 00:07:21,580
But we're not going to use it for a little while we're going to change how it's done later on so maybe

106
00:07:21,580 --> 00:07:23,070
don't invest too much there.

107
00:07:23,230 --> 00:07:26,020
And how will you do multiple levels.

108
00:07:26,020 --> 00:07:30,910
So just thinking about this multiple stuff in serialized fields just does that ring any bells.

109
00:07:31,050 --> 00:07:36,920
If it doesn't ring any bells I'll give you the hint that you should use arrays basically.

110
00:07:36,940 --> 00:07:41,950
So you should do an array of the progression character classes and you should do an array of whatever

111
00:07:41,950 --> 00:07:42,790
type it is.

112
00:07:42,790 --> 00:07:47,890
For example for health it's going to be a float should do an array for health supposed video and have

113
00:07:47,890 --> 00:07:56,420
a go OK so with those two hints hopefully they have elucidated that we should do the character classes

114
00:07:56,480 --> 00:08:00,140
in here and just to avoid any compilation errors.

115
00:08:00,140 --> 00:08:01,800
I'm going to set this to no.

116
00:08:01,970 --> 00:08:03,650
And then what do we want in here.

117
00:08:03,650 --> 00:08:05,800
Obviously not value a name for the character class.

118
00:08:05,810 --> 00:08:07,270
That was a bit of a decoy.

119
00:08:07,280 --> 00:08:15,830
What we do want however is a serialized field called the character class whereas this character class

120
00:08:16,080 --> 00:08:17,110
I'm not in a namespace.

121
00:08:17,120 --> 00:08:18,020
That's why it's not showing up.

122
00:08:18,020 --> 00:08:18,850
Fantastic.

123
00:08:18,890 --> 00:08:27,170
So I can just pull this out and do a namespace of RPG stats and paste the whole class back in.

124
00:08:27,170 --> 00:08:33,290
So now we should have access to the character class which I'm just going to call the character class

125
00:08:34,200 --> 00:08:41,370
like so and then we're going to have a serialized field for the health and we know the health is a float

126
00:08:42,170 --> 00:08:48,020
but then we also know that we want a different value of health for each level of health.

127
00:08:48,020 --> 00:08:53,360
So what I'm going to do here is I'm going to add in making just that float an array of floats.

128
00:08:53,360 --> 00:08:56,720
So the health has multiple levels now.

129
00:08:57,260 --> 00:09:01,380
I work with Rick basically to get this hierarchy set up this way.

130
00:09:01,520 --> 00:09:06,200
But if you prefer a different hierarchy you might want to do it slightly differently and I'll explain

131
00:09:06,200 --> 00:09:07,130
in a bit.

132
00:09:07,130 --> 00:09:12,200
So let's start off with three character classes the first one I'm going to set to the player second

133
00:09:12,200 --> 00:09:16,430
one to the grunt and the third one is going to be the mage.

134
00:09:16,490 --> 00:09:21,560
So then what we're going to see is that we've got health under here with size zero.

135
00:09:21,560 --> 00:09:26,720
So currently there are no levels for the player to have but I could set this up to be five different

136
00:09:26,720 --> 00:09:29,840
levels and we can say hey at level.

137
00:09:29,840 --> 00:09:33,850
Okay so element zero will say is Level 1 Let's just go for that convention.

138
00:09:33,860 --> 00:09:38,390
There's no real easy way of changing this you can do custom that isn't the done thing it's worth it.

139
00:09:38,390 --> 00:09:41,290
So all say let level Element Zero is Level 1.

140
00:09:41,430 --> 00:09:48,350
So we can start off with know 50 health then we're gonna go up to 100 health then maybe 200 health maybe

141
00:09:48,350 --> 00:09:53,310
then 400 health and then I'd know 700 health or something like that.

142
00:09:53,360 --> 00:09:55,370
That is the idea of a progression.

143
00:09:55,370 --> 00:10:00,080
Now I talked to Rick and he said it was most convenient for him to be thinking about one character class

144
00:10:00,080 --> 00:10:05,030
and then thinking about one particular element and how that element progressed.

145
00:10:05,060 --> 00:10:10,700
You might disagree you might say well it's easier for me to go into a particular level and think about

146
00:10:10,760 --> 00:10:16,760
all of the different classes and what all their different characteristics would be in that case what

147
00:10:16,760 --> 00:10:22,090
you'd want to do is just switch things around and hopefully this gives you the flexibility to do that

148
00:10:22,100 --> 00:10:31,340
you might do that by creating an array of different progression character levels for example that could

149
00:10:31,340 --> 00:10:38,120
be a new class that you set up and that class itself can contain an array of the character classes and

150
00:10:38,120 --> 00:10:42,950
then this float wouldn't have to be an array because you've already got an array at the top level so

151
00:10:42,950 --> 00:10:47,030
you can think about how you can change around this to suit your own needs.

152
00:10:47,030 --> 00:10:52,420
It doesn't have to be done exactly this way but the important thing is that we end up with one skeptical

153
00:10:52,460 --> 00:10:55,090
object that can contain all the details.

154
00:10:55,220 --> 00:10:57,210
We want great stuff.

155
00:10:57,230 --> 00:11:04,100
So we've overview how we can use C realizable classes in fact classes within classes and we've seen

156
00:11:04,100 --> 00:11:11,240
how we can use the serialized file system serialized or annotation to allow us to put a class nest classes

157
00:11:11,270 --> 00:11:16,060
within classes inside the inspector in unity in the next lecture.

158
00:11:16,070 --> 00:11:22,940
We're gonna be looking at how we can get the health component to ready being ready for getting in the

159
00:11:22,940 --> 00:11:26,170
progression data from progression and from base stats.

160
00:11:26,240 --> 00:11:26,770
See you there.
