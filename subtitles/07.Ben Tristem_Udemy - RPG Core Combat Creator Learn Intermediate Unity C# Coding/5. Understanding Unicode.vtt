WEBVTT
1
00:00:04.440 --> 00:00:09.900
Hello and welcome in this lecture we are going to be learning how to write into our save file and how

2
00:00:09.900 --> 00:00:14.700
we can convert text into binary so that it can be written into a file.

3
00:00:14.700 --> 00:00:17.000
Let's dive right in.

4
00:00:17.110 --> 00:00:19.120
So now that we have a file we want to save too.

5
00:00:19.150 --> 00:00:24.520
We actually need to have the ability to write to that file and this can be achieved using some C sharp

6
00:00:24.580 --> 00:00:25.400
API.

7
00:00:25.540 --> 00:00:31.660
In particular we're looking at the file dots open API which is going to do what it sounds like it's

8
00:00:31.660 --> 00:00:38.410
going to take a file path and it's going to open that file into something that we can write into as

9
00:00:38.410 --> 00:00:44.620
you can see here the thing that is returned is called a file stream and a stream is a lot like an iron

10
00:00:44.620 --> 00:00:49.000
numerator in the sense that it's a bit like a Pringles tube except that this time we can put Pringles

11
00:00:49.000 --> 00:00:50.920
into the tube as well as take them out.

12
00:00:50.920 --> 00:00:55.120
So that's what we're going to be doing in order to write to our file.

13
00:00:55.120 --> 00:00:58.890
But first we want to extract this path variable.

14
00:00:58.900 --> 00:01:05.620
So I'm going to highlight it and then introduce a new local for this and I'm going to call the local

15
00:01:05.620 --> 00:01:08.110
variable path like so.

16
00:01:08.530 --> 00:01:09.930
And then that is what we're going to.

17
00:01:09.950 --> 00:01:12.400
I can open the path but notice there is another argument here.

18
00:01:12.400 --> 00:01:13.770
It is a file mode.

19
00:01:13.780 --> 00:01:14.410
What is this.

20
00:01:14.440 --> 00:01:22.360
File mode is an enum which allows us to tell the basically the operating system how we want to operate

21
00:01:22.360 --> 00:01:24.480
on this file do we want to append to it.

22
00:01:24.470 --> 00:01:31.930
Do we wants to create a new file to create create new open and open or create.

23
00:01:31.930 --> 00:01:32.670
And so on and so forth.

24
00:01:32.680 --> 00:01:39.460
What we're gonna do is we're gonna use create basically what the create mode does is specified in this

25
00:01:39.460 --> 00:01:42.540
documentation linked against your resources.

26
00:01:42.580 --> 00:01:48.910
So here it says create and it creates a new file and if the file already exists it will be overwritten.

27
00:01:48.910 --> 00:01:50.350
That's what we want to be doing.

28
00:01:50.350 --> 00:01:53.290
We want to be overwriting our save file whenever we save.

29
00:01:53.290 --> 00:01:58.030
Now notice the difference between this and create new create new on the other hand says if the file

30
00:01:58.030 --> 00:01:59.590
already exists it throws an exception.

31
00:01:59.590 --> 00:02:03.370
So this really wants to create make sure that there was no file there before.

32
00:02:03.760 --> 00:02:08.480
We are happy with the former approach file mode dot create.

33
00:02:08.890 --> 00:02:13.990
And then as mentioned that the return type is the file stream data type.

34
00:02:13.990 --> 00:02:20.580
And I'm just going to call this the stream for now and assign the value coming out from file open.

35
00:02:20.650 --> 00:02:21.370
What is the stream.

36
00:02:21.370 --> 00:02:22.210
What can we do with it.

37
00:02:22.210 --> 00:02:24.610
Well there are a few methods of interest.

38
00:02:24.640 --> 00:02:25.440
Let's have a look at them.

39
00:02:25.450 --> 00:02:27.470
We have got things like right.

40
00:02:27.550 --> 00:02:29.240
We have got right byte.

41
00:02:29.590 --> 00:02:34.600
And we have got things like read as well so we can read and we can read a bite.

42
00:02:34.600 --> 00:02:37.120
Now why are we talking about reading bytes.

43
00:02:37.120 --> 00:02:38.680
For example why why is that.

44
00:02:38.680 --> 00:02:41.650
If I wants to write a text file why can't I just write text.

45
00:02:41.650 --> 00:02:47.090
Well because as far as files are concerned the contents of a file is just binary.

46
00:02:47.090 --> 00:02:53.740
There's no such thing as a text file or a binary file that is just conventions of how we format text

47
00:02:53.860 --> 00:02:58.640
in a text file it is usually using an encoding we'll get to that in just a second.

48
00:02:58.780 --> 00:03:04.960
But basically any file is just made up of binary which is why we can write to it or read from it as

49
00:03:04.960 --> 00:03:07.840
bytes which are basically eight bits.

50
00:03:07.840 --> 00:03:13.240
Now there's one more thing we have to do with things like file stream because they are what is known

51
00:03:13.270 --> 00:03:20.560
as an unmanaged resource that's a bit of a fancy way of saying that it's not automatically going to

52
00:03:20.560 --> 00:03:25.750
be cleared up for us or at least not at that particular given time.

53
00:03:25.750 --> 00:03:29.420
So we want to be clear about when this gets cleared up.

54
00:03:29.440 --> 00:03:35.650
So at the end whenever you're using a file stream you should remember to try and close it well not try

55
00:03:35.650 --> 00:03:39.750
to but always close your file streams when you are using them.

56
00:03:39.760 --> 00:03:45.410
There's a few reasons for this but one of the primary ones is that whenever you ask to open a file it

57
00:03:45.430 --> 00:03:49.220
is making a request to the operating system to open that file for you.

58
00:03:49.360 --> 00:03:57.670
And the operating system allocates a file handle for you and that file handle does not get removed until

59
00:03:57.730 --> 00:03:58.840
you hit close.

60
00:03:58.840 --> 00:04:04.270
So if you are constantly opening files opening files then these file handles are building up on the

61
00:04:04.270 --> 00:04:09.490
operating system side and eventually the operating system will say say nope you've reached your maximum

62
00:04:09.520 --> 00:04:10.590
number of file handles.

63
00:04:10.600 --> 00:04:11.730
You can't have any more.

64
00:04:11.740 --> 00:04:16.120
And so you'll get an error as if you sort of like having run out of memory.

65
00:04:16.120 --> 00:04:20.440
So it's always important to clean up address all because we don't want to run out of memory or whatever

66
00:04:20.500 --> 00:04:22.930
other resource we might be using.

67
00:04:22.990 --> 00:04:26.950
So let's have a go and see if we can write something into the file stream.

68
00:04:26.950 --> 00:04:28.490
We're going to write in a bite.

69
00:04:28.580 --> 00:04:34.300
I'm going to do a right bite which is going to take in a bite value we've never used this before in

70
00:04:34.300 --> 00:04:36.190
C sharp for many of us.

71
00:04:36.190 --> 00:04:40.420
And so it's interesting what is a bike value well you can just use a number.

72
00:04:40.450 --> 00:04:48.280
So I could say 102 for example and it's going to convert this hundred and two into its binary value

73
00:04:48.700 --> 00:04:52.360
and it's going to save that in to the file.

74
00:04:52.360 --> 00:04:59.410
So we should end up with a file if we save that contains whatever the byte value of 102 actually is.

75
00:04:59.410 --> 00:05:03.760
So I'm gonna go ahead and reload or it's automatically reloaded.

76
00:05:03.760 --> 00:05:10.900
Let's go ahead and hit the save button in the editor and I'm going to go ahead and open up this file

77
00:05:11.740 --> 00:05:12.880
in Visual Studio.

78
00:05:12.900 --> 00:05:18.880
So I'm going to copy the path and go to visual studio code and open file so I'm gonna navigate to the

79
00:05:18.880 --> 00:05:26.860
persistent data folder and access the save file like so and you can see that the character in here has

80
00:05:26.860 --> 00:05:32.310
been represented as f for whatever reason why has that been represented as f.

81
00:05:32.460 --> 00:05:37.750
Well this is the point at which I tell you that there is no such thing as text in a binary system in

82
00:05:37.840 --> 00:05:38.650
in a computer.

83
00:05:38.650 --> 00:05:43.870
Computer does not understand what text is but there are conventions for representing it in binary and

84
00:05:43.870 --> 00:05:48.580
you've probably heard of some of them such as ASCII for example you've probably heard of ASCII codes.

85
00:05:48.580 --> 00:05:53.230
Well this is what they mean basically it is a mapping between characters as you can see here like the

86
00:05:53.230 --> 00:06:00.490
character capsule a and a particular binary value so you can see there's various things in here various

87
00:06:00.490 --> 00:06:01.960
values along this table.

88
00:06:01.960 --> 00:06:06.760
What we're interested in here the decimal value which then gets converted into a binary number but basically

89
00:06:06.760 --> 00:06:14.440
we're saying that the binary number represented by 65 that binary number that represents 65 is a where

90
00:06:14.500 --> 00:06:18.660
as the lower letter lowercase letter A is ninety seven.

91
00:06:19.180 --> 00:06:26.350
So that we can test out by having a look we've printed out f and what is lowercase f lowercase F is

92
00:06:26.490 --> 00:06:27.270
102.

93
00:06:27.340 --> 00:06:30.250
Exactly what I wrote out in the bytes.

94
00:06:30.280 --> 00:06:30.540
Okay.

95
00:06:30.730 --> 00:06:31.570
So that's great.

96
00:06:31.600 --> 00:06:33.760
There is actually what's going on here.

97
00:06:33.760 --> 00:06:39.890
You can see what encoding is being used in Visual Studio code by going down to the bottom right and

98
00:06:39.900 --> 00:06:41.450
you see here where it says UTF 8.

99
00:06:41.460 --> 00:06:43.010
That's what is going to default to.

100
00:06:43.140 --> 00:06:47.790
You can swap it to other things in here choose re-open with encoding for example and you can choose

101
00:06:48.090 --> 00:06:52.530
myriad different types of encoding which are just different versions of this table.

102
00:06:52.560 --> 00:06:58.620
So if I went to reopen with encoding and I chose ASCII I don't think I can choose ASCII actually.

103
00:06:58.680 --> 00:07:04.800
And the reason for that is actually UTF 8 is a superset of ASCII is ASCII.

104
00:07:04.950 --> 00:07:11.580
Plus basically with lots of extended codes here we've got a very limited character set but in UTF 8

105
00:07:11.610 --> 00:07:16.290
what you can do is you can have all the same characters if we look down here the Latin capital letter

106
00:07:16.320 --> 00:07:24.630
A is forty one as hexadecimal and if we have a look here in our hexadecimal characters then a is 41

107
00:07:24.660 --> 00:07:31.920
so they're matching up but the cool thing about UTF 8 is that if you scroll on down here we have actually

108
00:07:31.920 --> 00:07:39.240
got certain characters that take up more than one byte so if you wanted to have an A with an accent

109
00:07:39.240 --> 00:07:43.270
on it there's actually represented by two bytes rather than just one.

110
00:07:43.500 --> 00:07:45.460
We could actually do that.

111
00:07:45.570 --> 00:07:46.350
Let's give it a go.

112
00:07:46.350 --> 00:07:49.440
So we're going to use the hexadecimal version of the number.

113
00:07:49.440 --> 00:07:54.900
Now if you're not sure about what binary in hexadecimal and decimal are then take a look at this article

114
00:07:54.900 --> 00:07:58.560
in your resources that should help you understand what the differences are.

115
00:07:58.560 --> 00:08:06.060
Now I can write hexadecimal in C sharp by starting with 0 x and then the hexadecimal character codes

116
00:08:06.090 --> 00:08:09.120
which is C3 like so.

117
00:08:09.150 --> 00:08:15.150
So that is going to write a byte which is going to be hexadecimal C3 and then I'm going to write hexadecimal

118
00:08:15.330 --> 00:08:22.380
80 which should in theory these two bytes give us the accented capital A.

119
00:08:22.440 --> 00:08:28.170
So let's go and try that out pop over to the scene wait for it reload hit save and then go and have

120
00:08:28.170 --> 00:08:32.720
a look at our save file and sure enough there is one character there even though there are two bytes

121
00:08:32.730 --> 00:08:35.550
and that's because we're using the UTF 8 encoding.

122
00:08:35.550 --> 00:08:38.010
Down here in Visual Studio code.

123
00:08:38.010 --> 00:08:43.020
So your challenge is going to be to write to this file and we're going to do a little bit of variation

124
00:08:43.020 --> 00:08:44.140
on the usual hello world.

125
00:08:44.160 --> 00:08:49.140
We're going to write all our Moondog with the upside down exclamation point at the beginning here.

126
00:08:49.170 --> 00:08:51.980
Now all our Mundo is hello world in Spanish.

127
00:08:52.140 --> 00:08:58.230
And I choose it because it has a quirky character in it and that means we have to use UTF 8 in order

128
00:08:58.260 --> 00:08:59.710
to write out this message.

129
00:09:00.000 --> 00:09:02.610
So you're going to write about one bite at a time.

130
00:09:02.610 --> 00:09:06.740
Initially use the reference included and that's the child.

131
00:09:06.780 --> 00:09:12.840
That's the main challenge and if you want a bonus you can also see if you can use a byte array instead

132
00:09:12.840 --> 00:09:15.580
of calling write byte repeatedly.

133
00:09:15.780 --> 00:09:19.060
Pause the video and have a go okay.

134
00:09:19.060 --> 00:09:20.050
Welcome back.

135
00:09:20.050 --> 00:09:21.670
So let's give this a shot.

136
00:09:21.760 --> 00:09:26.080
I might speed through this because it's going to involve me going back and forth between this table

137
00:09:26.080 --> 00:09:27.430
quite a lot.

138
00:09:27.430 --> 00:09:33.700
So the first thing is I have this inverted exclamation point it is here in my uni UTF 8 character table

139
00:09:33.700 --> 00:09:38.350
that is linked and we can see that it is going to be C followed by a 1.

140
00:09:38.410 --> 00:09:45.620
So start with C2 followed by a 1 being the binary values in hexadecimal.

141
00:09:45.730 --> 00:09:49.960
That should give us the inverted exclamation point and then I'm going to speed on through the rest

142
00:09:58.090 --> 00:10:02.580
so if like me you got a little bit bored copying and pasting from a table repeatedly then you might

143
00:10:02.620 --> 00:10:04.490
have only got as far as all the.

144
00:10:04.660 --> 00:10:07.210
The important thing is that you've tried it out a little bit.

145
00:10:07.240 --> 00:10:12.880
I got bored quite quickly to be honest and I just want to show you that this encoding can be done much

146
00:10:12.880 --> 00:10:14.550
more easily if by code.

147
00:10:14.560 --> 00:10:21.820
So if we do encoding dot UTF 8 that's going to use the UTF 8 encoding and I would just include the right

148
00:10:21.820 --> 00:10:28.840
namespace here what's namespace is it's using sys dot text is the one we want so encoding dot UTF 8

149
00:10:29.200 --> 00:10:36.490
and then we can do get bytes which takes in the string so I can then type in the old Mundo from my slides

150
00:10:36.800 --> 00:10:41.980
to copy over the bytes here because I don't actually have this key on my keyboard so when I'm on the

151
00:10:43.100 --> 00:10:49.190
like so and then we are going to get the UTF 8 encoding from this what is the return type is a byte

152
00:10:49.280 --> 00:10:55.400
array so byte array which I'm going to call bytes and then we need to write this array so you could

153
00:10:55.400 --> 00:11:02.540
do this as a full loop or we can use the right method which takes the byte array and funnily enough

154
00:11:02.600 --> 00:11:04.910
for reasons that we're not gonna go into too much.

155
00:11:04.910 --> 00:11:10.640
Also you have to tell it where to start reading from that byte Ray and where to finish reading from

156
00:11:10.640 --> 00:11:14.170
the binary which is just gonna be the bytes dot length like so.

157
00:11:14.180 --> 00:11:18.140
So there's reasons for that but we're not gonna go into too much detail as to why that is.

158
00:11:18.230 --> 00:11:22.950
So now I can remove all these write bytes and we can go ahead and try it out.

159
00:11:23.000 --> 00:11:28.520
So saving once the project reloaded and then go to save and you can see that it is successfully written

160
00:11:28.520 --> 00:11:32.510
in UTF 8 in to this save file.

161
00:11:32.690 --> 00:11:37.670
So I've learned a lot in this lecture hopefully now you know how to open files how to write to them

162
00:11:37.670 --> 00:11:43.160
and how to convert text in to binary so that it can be written into a file.

163
00:11:43.280 --> 00:11:47.750
Next lecture we're going to be doing the inverse of this and reading from the file see you there.
