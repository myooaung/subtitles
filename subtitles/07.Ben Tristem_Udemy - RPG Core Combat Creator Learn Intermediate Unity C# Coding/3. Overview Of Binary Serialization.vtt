WEBVTT
1
00:00:04.510 --> 00:00:05.710
Hello and welcome in this lecture.

2
00:00:05.710 --> 00:00:11.950
We're going to be looking at what is serialization and why do we need it anyway so serialization is

3
00:00:11.950 --> 00:00:19.060
the process of taking all the state and important data that you've got in your game or in your program

4
00:00:19.090 --> 00:00:25.760
or whatever it is you're doing and turning it into binary just zeros and ones.

5
00:00:25.840 --> 00:00:31.410
And the idea here is that once it's in binary we can send it over the network.

6
00:00:31.420 --> 00:00:33.460
We can save it into a file.

7
00:00:33.460 --> 00:00:38.530
We can do all sorts of things with it and just store it or keep it or transfer it do whatever we need

8
00:00:38.530 --> 00:00:39.370
to do with it.

9
00:00:39.520 --> 00:00:43.070
And then at a later date maybe our application is closed.

10
00:00:43.090 --> 00:00:46.070
Maybe we've even downloaded an update to our application.

11
00:00:46.090 --> 00:00:47.850
So the code is no longer the same.

12
00:00:48.490 --> 00:00:55.510
But if we had agreed on the format with which we transferred our code state in its various objects that

13
00:00:55.510 --> 00:01:01.210
point to one another we'd agreed on the format in which we transfer that into binary bits.

14
00:01:01.210 --> 00:01:06.520
Then we can do a d serialization which goes the other way from the binary bits to convert them back

15
00:01:06.910 --> 00:01:12.520
into C sharp objects and types and references and so on and so forth.

16
00:01:12.550 --> 00:01:14.100
So this why do we need it.

17
00:01:14.110 --> 00:01:19.420
The idea here is that we need to have a way of converting all the state of our game that's important

18
00:01:19.420 --> 00:01:24.700
such as the character's health might be this block here and the plate location in the game might be

19
00:01:24.700 --> 00:01:25.440
this block here.

20
00:01:25.570 --> 00:01:31.330
We need to convert that into binary so that then we can take this binary and put it in a file because

21
00:01:31.390 --> 00:01:37.420
files basically on a file system only contain binary and you just have different ways of reading that.

22
00:01:37.420 --> 00:01:40.870
Now you might say there are text files but that's just a special version of binary.

23
00:01:40.870 --> 00:01:42.150
We'll talk about that later.

24
00:01:42.280 --> 00:01:47.980
But it is a special version of binary that certain text editors all agree on and can read the binary

25
00:01:48.010 --> 00:01:50.200
but it's still binary under the hood.

26
00:01:50.440 --> 00:01:55.840
So let's before we talk about serialization we need to go back a step to something very fundamental

27
00:01:55.840 --> 00:01:57.530
which is how do we count.

28
00:01:57.550 --> 00:02:02.350
Let's sit down children and figure out how we count first we start with zero because we're programmers

29
00:02:02.680 --> 00:02:11.590
and we go 0 1 2 and 3 and so on until we reach 9 at which point we run out of numbers to write with.

30
00:02:11.590 --> 00:02:14.480
We've only got numbers for zero to nine.

31
00:02:14.500 --> 00:02:16.330
How do we carry on writing here.

32
00:02:16.600 --> 00:02:23.830
Well some clever folks over in India developed a system called the now called the Arabic numerals in

33
00:02:23.830 --> 00:02:30.270
fact which is to say hey why don't we just write a number over to the left here.

34
00:02:30.280 --> 00:02:34.470
And you notice it's to the left which might look backwards and I'll explain why in a second.

35
00:02:34.540 --> 00:02:41.950
So if we put this number over here that actually takes on the value of 10 and is one number higher than

36
00:02:41.950 --> 00:02:42.790
nine.

37
00:02:42.790 --> 00:02:48.090
And we put this zero here to mark that we are one place along.

38
00:02:48.100 --> 00:02:53.510
So we use places to denote digits that we don't have which is quite a clever system.

39
00:02:53.560 --> 00:03:01.180
And the idea here is that it's backwards because it's an Arabic numeral and in Arabic you right from

40
00:03:01.180 --> 00:03:02.140
right to left.

41
00:03:02.140 --> 00:03:07.240
So actually it's interesting that we use it in a kind of backwards system because that's where it originated

42
00:03:07.240 --> 00:03:08.050
from.

43
00:03:08.050 --> 00:03:13.360
So then we carry on counting in this place over here in this column we carry on going and we carry on

44
00:03:13.360 --> 00:03:19.840
going until we reach like ninety nine at which point we run it out again in this left hand column.

45
00:03:19.840 --> 00:03:26.320
We run out of digits or run out of characters to write this with and so we resort to adding yet another

46
00:03:26.320 --> 00:03:27.370
column.

47
00:03:27.370 --> 00:03:32.560
Now there's a little bit of a system appearing here because what we've got is that everything in this

48
00:03:32.560 --> 00:03:38.530
column is worth one so it's 1 times 2 it's 1 times 9.

49
00:03:38.590 --> 00:03:40.500
And everything in this column is worth 10.

50
00:03:40.510 --> 00:03:44.340
So it's nine times 10 90 plus 9.

51
00:03:44.350 --> 00:03:46.270
So 90 plus 999.

52
00:03:46.390 --> 00:03:52.150
And obviously this is just seemed obvious to you because we're so used to counting in decimal and hundred

53
00:03:52.300 --> 00:03:57.050
so one times 100 if it was to be 200 and so on and so forth so we've got the hundreds columns the tenth

54
00:03:57.050 --> 00:03:58.010
columns of one's column.

55
00:03:58.120 --> 00:04:01.580
You probably notice this is probably revision for most of you I hope.

56
00:04:01.630 --> 00:04:08.050
Now how about if we did hexadecimal Now what does hexadecimal mean hexane is the Greek word for 16 so

57
00:04:08.110 --> 00:04:15.730
hexadecimal is also hexadecimal is the Greek word for sex 16 and so we're counting in chunks of 16.

58
00:04:15.790 --> 00:04:20.620
Now if we go from zero all the way to nine what do we do now.

59
00:04:20.620 --> 00:04:25.740
Well what we do is we invent a new character in this case in hexadecimal we typically you start using

60
00:04:25.750 --> 00:04:26.260
the alphabet.

61
00:04:26.260 --> 00:04:34.550
So we go A B and so on until we reach F which has the value of 15 again remember nine is not 10.

62
00:04:34.560 --> 00:04:41.140
We've counted decimal but we've only got digits to 9 because 0 counts as well we've got 16 digits here

63
00:04:41.140 --> 00:04:44.430
we've got from 0 to F in count that in your head if you like.

64
00:04:44.470 --> 00:04:51.190
Now what happens next is exactly the same as in the decimal system we go over to 1 0 but I'm being careful

65
00:04:51.190 --> 00:04:54.320
not to say 10 because this is no longer 10.

66
00:04:54.490 --> 00:04:55.770
This is 1 0.

67
00:04:55.900 --> 00:04:59.050
And this actually has the value of 16.

68
00:04:59.320 --> 00:05:05.990
So that's the interesting thing because it's one more than F which was 15 and we carry on along this

69
00:05:05.990 --> 00:05:10.380
path until we get to F F which has a much larger value.

70
00:05:10.460 --> 00:05:14.320
And the next one after F F is 1 0 0.

71
00:05:14.360 --> 00:05:18.500
So how what does one zero zero actually end up equaling.

72
00:05:18.590 --> 00:05:19.780
Well we can think about it.

73
00:05:19.790 --> 00:05:21.960
We've got 16 lots of numbers down here.

74
00:05:22.010 --> 00:05:28.550
Every time we add one on this column we have to have done another 16.

75
00:05:28.550 --> 00:05:34.670
And we can do that up to 16 times because we've got the best first time which is zero essentially in

76
00:05:34.670 --> 00:05:35.400
this column.

77
00:05:35.540 --> 00:05:40.450
And then this f down here which is the 15th 16th time that we've done it.

78
00:05:40.460 --> 00:05:46.910
So it's 16 times 16 times which means that this value here is going to be 16 squared.

79
00:05:47.030 --> 00:05:52.340
So you've got one sixteen and sixteen squared are gonna be our columns and you just do 16 squared multiplied

80
00:05:52.340 --> 00:06:00.390
by one or 16 multiplied by 15 and plus 15 will give you the value in this column here.

81
00:06:00.410 --> 00:06:06.010
So that's what hexadecimal is and how it relates pretty much in exactly the same way it's a binary.

82
00:06:06.050 --> 00:06:12.590
It's a it's accounting system like decimal we that we had now the binary system is super simple it's

83
00:06:12.590 --> 00:06:15.020
the simplest counting system you could come up with.

84
00:06:15.170 --> 00:06:20.330
We start with zero and then we've got the character one as two characters in our binary counting system

85
00:06:20.780 --> 00:06:23.310
and instantly we run out of characters.

86
00:06:23.330 --> 00:06:30.140
So we had to use the next decimal place or the next binary place and we've got 1 0 which now represents

87
00:06:30.140 --> 00:06:32.350
3 and represents 2 Sorry.

88
00:06:32.360 --> 00:06:34.850
And then 1 1 which represents 3.

89
00:06:34.880 --> 00:06:39.750
And then we run out of decimal places again and we have to create a new place.

90
00:06:39.980 --> 00:06:46.720
So following on from before the columns here are two to the zero which is 1 by the way.

91
00:06:46.760 --> 00:06:50.840
2 to the 1 which is 2 and 2 to the 2 which is 4.

92
00:06:50.840 --> 00:06:59.030
So this now gives us the value of 4 because it's 4 times 1 0 times 2 and 0 times 1.

93
00:06:59.060 --> 00:07:03.470
And so we can go on and this will be this decimal place will be 2 to the 3.

94
00:07:03.470 --> 00:07:09.350
This won't be 2 to the 4 and so on and so on and so on until you get very very large numbers.

95
00:07:09.470 --> 00:07:15.200
Now the very large numbers are a problem because I have no idea how to read this number and say What

96
00:07:15.200 --> 00:07:19.430
on earth it is and it is very hard to write tax on writing 0 1 0 1 0 1.

97
00:07:19.430 --> 00:07:28.250
So we have often erm abbreviation because in hexadecimal we have one digit can be from zero to sixteen

98
00:07:28.640 --> 00:07:38.660
sixteen digits and 6 0 to 15 16 digits and in binary four bits can also have 16 different values.

99
00:07:38.660 --> 00:07:45.950
So we can do a direct conversion into hexadecimal like so where we say hey this value maps to this hexadecimal

100
00:07:45.950 --> 00:07:51.770
number this one match this hexadecimal number and the resultant number funnily enough ends up being

101
00:07:51.770 --> 00:07:56.540
exactly the same if you converted both of these numbers into their decimal counterpart parts they would

102
00:07:56.540 --> 00:07:58.110
be exactly the same number.

103
00:07:58.160 --> 00:08:02.270
So we often use the hexadecimal bits just because there's more characters there.

104
00:08:02.300 --> 00:08:11.570
So it's a much more compact way of writing things if I write 2 3 6 4 b 3 0 E F E 2 4 is much shorter

105
00:08:11.570 --> 00:08:13.990
than writing all of this long binary thing.

106
00:08:14.060 --> 00:08:17.160
OK so that is the aside on counting now.

107
00:08:17.270 --> 00:08:22.970
Why do we go through all of that because that's what the computer's doing when it is using integers

108
00:08:23.000 --> 00:08:24.100
and so on and so forth.

109
00:08:24.110 --> 00:08:30.230
So a byte will start off by defining a by is 8 bits and bytes is actually a type in C sharp if you want

110
00:08:30.230 --> 00:08:37.520
to it use it but don't really recommend it and all it can represent is zero to two hundred and fifty

111
00:08:37.520 --> 00:08:39.270
six fifty five basically.

112
00:08:39.290 --> 00:08:46.880
So there's 256 different values that it can have and that is the result of being two to the eight basically

113
00:08:46.880 --> 00:08:48.470
two to the power of eight.

114
00:08:48.770 --> 00:08:50.420
And you can work that out for yourself.

115
00:08:50.420 --> 00:08:51.560
You've got a pocket calculator.

116
00:08:51.950 --> 00:08:59.180
Otherwise an int is what we typically use and that's actually 32 bits or 4 bytes and that can have much

117
00:08:59.180 --> 00:09:04.790
much larger values that can go typically on a range from what not typically definitely on a range from

118
00:09:04.790 --> 00:09:12.150
minus this to billion all the way to positive 2 billion and that's quite a big range.

119
00:09:12.150 --> 00:09:17.540
So then we also have these you ints which are just the ones that don't have the minus signs which means

120
00:09:17.540 --> 00:09:21.850
they can go to bigger numbers but they only start at zero and so on and so forth.

121
00:09:21.950 --> 00:09:28.460
We've also got floating points which is used for things with a decimal point to give us the ability

122
00:09:28.460 --> 00:09:33.920
to range from really small numbers to very very large numbers but always keeping the same number of

123
00:09:33.920 --> 00:09:35.800
precision in decimal places.

124
00:09:35.810 --> 00:09:39.830
So float is a single precision floating point number.

125
00:09:39.950 --> 00:09:40.750
And what does that mean.

126
00:09:40.760 --> 00:09:46.870
That means that we've only got precision to between six and nine decimal digits.

127
00:09:46.910 --> 00:09:55.220
And so if it was if we were writing out pi then we'd be three point one four and only 6 digits whereas

128
00:09:55.280 --> 00:10:01.820
a double precision floating point number is 64 bit which gives a lot more precision and means that we

129
00:10:01.820 --> 00:10:06.870
can do anything from 15 to 17 digits of precision.

130
00:10:06.870 --> 00:10:09.900
Now this is very useful in scientific computation.

131
00:10:09.900 --> 00:10:15.240
Not so useful in game development which is why we are always using floats and in fact consumer grade

132
00:10:15.240 --> 00:10:22.530
hardware is far faster at doing floating point operations and very slow at doing double precision operations

133
00:10:22.530 --> 00:10:28.590
whereas if you get Quattro graphics cards then you can be doing stuff with double precision much much

134
00:10:28.590 --> 00:10:34.290
quicker but that's typically for different workloads scientific workloads and precision engineering

135
00:10:34.290 --> 00:10:38.040
workloads and not something that we typically use on a game.

136
00:10:38.040 --> 00:10:40.310
So these are some of the primitive types.

137
00:10:40.350 --> 00:10:42.040
How about some more.

138
00:10:42.090 --> 00:10:44.100
If I wanted to make something more complicated.

139
00:10:44.100 --> 00:10:47.100
Well that's when you should just start putting these things together.

140
00:10:47.130 --> 00:10:50.180
So you start saying hey I've got a vector.

141
00:10:50.190 --> 00:10:52.170
It's got three floats in it.

142
00:10:52.230 --> 00:10:59.880
Well then in that case I can store these three floats by serialization into a series of bytes which

143
00:10:59.880 --> 00:11:02.130
are as you said they are eight bits.

144
00:11:02.130 --> 00:11:08.100
So here a float takes up four bytes and you can see the screen float represents these four bytes here

145
00:11:08.550 --> 00:11:12.120
and the red float represents these four bytes and so on.

146
00:11:12.120 --> 00:11:15.900
So you end up with a total of 12 bytes of data.

147
00:11:15.900 --> 00:11:20.670
So clearly this was an overview and it went really quickly we're going to try and understand this now

148
00:11:20.670 --> 00:11:23.820
through the following learning journey through a series of lectures.

149
00:11:23.820 --> 00:11:28.620
First of all we're going to learn how we can write binary into files to figure out you know what we're

150
00:11:28.620 --> 00:11:29.970
doing in the first place.

151
00:11:30.150 --> 00:11:33.710
Then we are going to see how text is rope and binary.

152
00:11:33.710 --> 00:11:34.590
I haven't talked about that.

153
00:11:34.600 --> 00:11:37.760
Well I've talked about its numbers so far and you might be saying hey what about text.

154
00:11:38.010 --> 00:11:42.900
Well we've got some representation some mapping basically from numbers into text that allow us to do

155
00:11:42.900 --> 00:11:48.480
that and we'll learn all about those and then we're going to learn how we can manually serialize manually

156
00:11:48.480 --> 00:11:54.690
take data floating points ints and stuff like that and turn them into binary so that we can stick them

157
00:11:54.690 --> 00:12:00.570
in our files and then we're going to learn how to use the built in C sharp serialization that does all

158
00:12:00.570 --> 00:12:05.280
of this magically behind the scenes for us and we don't have to worry about the binary anymore but at

159
00:12:05.280 --> 00:12:09.370
least we knew what was behind the scenes and we've got a good strong grounding.

160
00:12:09.390 --> 00:12:12.900
So let's dive into the next lecture where we will get started.
