WEBVTT
1
00:00:04.560 --> 00:00:05.940
Hello and welcome in this lecture.

2
00:00:05.940 --> 00:00:11.850
We're gonna be demystifying and nested prefabs and variant prefabs as we're and we're going to set up

3
00:00:11.880 --> 00:00:16.860
a hierarchy of prefab so that we've got a character at the root and then enemy which is a child of the

4
00:00:16.860 --> 00:00:21.900
character and basically inherits all its properties from that and player which is also a child of the

5
00:00:21.900 --> 00:00:24.180
character we're going to see how that's possible.

6
00:00:24.300 --> 00:00:25.760
And how does that actually work.

7
00:00:25.770 --> 00:00:31.860
And we're going to demystify what actually is going on inside these files so we're going to open up

8
00:00:32.190 --> 00:00:38.880
the play a prefab and have a look at the text layout and see what all these weird properties actually

9
00:00:38.880 --> 00:00:39.660
mean.

10
00:00:39.660 --> 00:00:40.790
Let's dive in and find out.

11
00:00:42.810 --> 00:00:49.530
So what I want to achieve is to get a shared base between the enemy and the player which means that

12
00:00:49.560 --> 00:00:55.500
we can share a lot of the configurations of the components because what it means to be a player and

13
00:00:55.500 --> 00:00:57.300
what it means to be an enemy is very similar.

14
00:00:57.300 --> 00:01:03.450
If I open the play a prefab we do expect our enemy to be able to move to have a nav mesh agent to have

15
00:01:03.450 --> 00:01:04.460
an animator.

16
00:01:04.560 --> 00:01:08.580
So have some sort of control script not the player control script so here they differ but to have a

17
00:01:08.580 --> 00:01:11.840
fighter probably as well and they have an action scheduler.

18
00:01:12.330 --> 00:01:16.530
So all these things are kind of in common between the two.

19
00:01:16.530 --> 00:01:20.730
Now they might have different configuration parameters but it would be useful for them to have some

20
00:01:20.730 --> 00:01:26.160
sort of shared base where if I decide I need a new component I can decide that it can go both on the

21
00:01:26.160 --> 00:01:28.020
enemy and on the player.

22
00:01:28.030 --> 00:01:33.780
That's gonna be very helpful for us going forward and it kind of unifies these two bits and pieces.

23
00:01:33.900 --> 00:01:39.570
Now the approach I want to use for this is a new approach with it two thousand eighteen point three

24
00:01:39.810 --> 00:01:48.720
which allows us to do prefab variance it's basically a different part of the whole nested prefabs system.

25
00:01:48.810 --> 00:01:50.730
And let me explain how this works.

26
00:01:50.730 --> 00:01:53.940
So what is a prefab in the first place.

27
00:01:53.940 --> 00:01:57.320
This is true of before we had nested prefabs as well.

28
00:01:57.330 --> 00:02:01.020
So everything I'm saying here is has been true all the way across.

29
00:02:01.050 --> 00:02:03.940
And I'll tell you when it's or when it's going to be new stuff.

30
00:02:04.380 --> 00:02:10.920
So a prefab is a essentially a collection of game objects but it's more than just a collection of game

31
00:02:10.920 --> 00:02:11.310
objects.

32
00:02:11.310 --> 00:02:15.900
If we go and open up say I play a prefab you can see it's this collection of game objects it's got a

33
00:02:15.900 --> 00:02:20.730
hierarchy if I click on any one of the game objects it's got a bunch of components and it's properties.

34
00:02:20.730 --> 00:02:27.390
So that tells us that each game object has got a bunch of components under it and under each component

35
00:02:27.420 --> 00:02:32.340
you've got a bunch of property overrides you might not override the default property or you might in

36
00:02:32.340 --> 00:02:36.990
which case you've got the property override there in the prefab and I just want to convince you that

37
00:02:36.990 --> 00:02:43.050
this is actually the case by the way you can open a prefab if you've got serialized the text on in your

38
00:02:43.050 --> 00:02:48.780
preferences in unity you can open a prefab in Visual Studio code because it is just a text editor and

39
00:02:48.780 --> 00:02:54.030
you can see the text that makes up a prefab it's completely demystifies it you can see that there are

40
00:02:54.090 --> 00:02:59.100
game objects in here we can see that the game objects got a bunch of components under it.

41
00:02:59.100 --> 00:03:03.090
Here these notes that they're references which are a bit weird but if I select one you can see that

42
00:03:03.090 --> 00:03:06.570
it's highlighting where there's another reference here and you can see that this actually the transform

43
00:03:06.570 --> 00:03:07.460
component.

44
00:03:07.470 --> 00:03:14.940
This one down here is a mesh renderer component this one here is to do a mono behaviour and its moral

45
00:03:14.940 --> 00:03:22.050
behaviour doesn't tell us which script it is but if I look at this m script good and if I just search

46
00:03:22.050 --> 00:03:28.490
for that in my project you need to Onyx glued the files so that's on the dot dot dot menu in.

47
00:03:28.520 --> 00:03:32.490
So if I search the whole project the way I search the whole project by the way was controller shift

48
00:03:32.550 --> 00:03:40.050
F shouldn't I should tell you that and also the dot dot dot and then remove this little cog which just

49
00:03:40.050 --> 00:03:45.480
stops it from filtering to certain types of files and you'll notice that what that's showing is it's

50
00:03:45.540 --> 00:03:49.650
showing that this grid is in the mover dot c s dot matter.

51
00:03:49.740 --> 00:03:54.270
So what that's saying is that this mono behaviour is actually them on the move a dot c s so we've got

52
00:03:54.270 --> 00:04:01.170
a component we've got a game object that's got lots of components and in that move a dot yes you can

53
00:04:01.170 --> 00:04:07.620
see that somewhere in here where we don't have it on mover but on one of our other mono behaviours I'm

54
00:04:07.620 --> 00:04:12.800
sure we've got some properties somewhere down here on this one we've got the weapon range properties

55
00:04:12.800 --> 00:04:18.600
set to two so you can see that what I'm saying is true we've got a bunch of game objects with components

56
00:04:18.600 --> 00:04:23.370
underneath and properties on each component but you might be asking me Hey Sam I thought you said there

57
00:04:23.370 --> 00:04:28.410
was hierarchy as well in a prefab if we go and look in the Unity Editor there's this hierarchy over

58
00:04:28.410 --> 00:04:31.980
here in the prefab Why is that not showing up in the file.

59
00:04:32.010 --> 00:04:37.550
Well actually it is because some components in the prefab are actually transforms.

60
00:04:37.560 --> 00:04:43.530
So these game objects are transforms and part of their property of a transform is actually knowing who

61
00:04:43.530 --> 00:04:44.960
its parent is.

62
00:04:44.970 --> 00:04:47.630
So for example Game Object 1 has no parents.

63
00:04:47.640 --> 00:04:54.810
So it's the root object in the prefab however game object too has transformed to but its parent is transform

64
00:04:54.810 --> 00:04:58.670
one so that means it's a child of object one.

65
00:04:58.710 --> 00:05:03.840
And similarly with object three is a child of object too so you end up with a hierarchy where you've

66
00:05:03.840 --> 00:05:10.170
got object one at the top then object to is a sub object and then object three is a sub object of that.

67
00:05:10.170 --> 00:05:15.300
That's how hierarchies work in prefabs and we can have a look at this we can see this for ourselves

68
00:05:15.840 --> 00:05:21.670
if we look at a particular transform actually we won't see it very easily in here because the player

69
00:05:21.690 --> 00:05:26.970
prefab hasn't got anything under it but if I quickly just added an empty game object you notice that

70
00:05:26.970 --> 00:05:34.270
empty game object has got to transform on its and we've just gone ahead and added something to our file.

71
00:05:34.440 --> 00:05:39.980
But this game object and they guess this is the new game object I believe.

72
00:05:39.980 --> 00:05:44.630
And it's got this transform and it's transforms parent.

73
00:05:44.630 --> 00:05:45.420
They get em.

74
00:05:45.450 --> 00:05:48.220
Father is this component.

75
00:05:48.280 --> 00:05:54.920
And if I search the file control F for that component you can see it's the root objects transform.

76
00:05:55.220 --> 00:06:00.350
So you can start to see how this actually really demystifies these dot prefab files.

77
00:06:00.350 --> 00:06:01.850
They're not just magical.

78
00:06:01.850 --> 00:06:08.830
They actually are just this collection of game objects components and properties as simple as that.

79
00:06:08.830 --> 00:06:14.560
Now what's new is what they've introduced in 2000 eighteen point three called nested prefabs.

80
00:06:14.570 --> 00:06:20.600
And what this allows us to do is it allows us to say hey instead of putting a game object in here I'm

81
00:06:20.600 --> 00:06:25.490
going to put a prefab instance in here and that prefab instance is actually going to reference another

82
00:06:25.490 --> 00:06:27.700
prefab and we've already done this.

83
00:06:27.700 --> 00:06:34.340
You may not have registered quite that we've done this but this character Knights soldier none of this

84
00:06:34.370 --> 00:06:40.300
information these game objects this at the components that it has none of this resides in our player

85
00:06:40.310 --> 00:06:43.610
prefab it is all linked to from the player prefab.

86
00:06:43.610 --> 00:06:49.400
So if I go to the bottom of the player prefab or near the bottom there is this prefab instance and the

87
00:06:49.400 --> 00:06:57.700
prefab instance actually links off to a different file let me see if I can find this somewhere in here.

88
00:06:57.780 --> 00:07:02.810
Here was at the bottom of these all these properties and I'll tell you about what those are in a second

89
00:07:03.110 --> 00:07:08.510
but we've got this file I.D. And this grid and I think the grid is the one we've been looking for and

90
00:07:08.510 --> 00:07:11.950
sure enough there's this good on the prefab dot meter.

91
00:07:11.970 --> 00:07:18.530
So that is the link to the character Knight's prefab and it hasn't actually included all the data from

92
00:07:18.530 --> 00:07:22.210
the prefab but we do have this list of modifications.

93
00:07:22.220 --> 00:07:28.460
So that is basically saying if you wanted to change the property add a component add a game object to

94
00:07:28.460 --> 00:07:30.960
this prefab then you do it in the list of modifications.

95
00:07:31.100 --> 00:07:37.970
And that's where we've been seeing stuff like if I go to this character and night soldier then I could

96
00:07:37.970 --> 00:07:42.670
go in here for example I could change its rotation if I wanted to.

97
00:07:44.180 --> 00:07:49.280
I think that's not a good example because it's on the route but I could remove the animator for example

98
00:07:49.550 --> 00:07:53.640
we remove the Animator component on Hicks we've actually got an animator at the top level.

99
00:07:53.810 --> 00:07:59.060
So we don't actually need one here on Captain nights soldier and you can see there's this little blue

100
00:07:59.060 --> 00:08:03.800
line next to it which means that it's a modification in the current prefab but not in the prefab were

101
00:08:03.800 --> 00:08:04.790
pointing to.

102
00:08:04.790 --> 00:08:11.840
So if I were to right click on this and I can look at the remove component that's the action that we've

103
00:08:11.840 --> 00:08:16.570
done in this prefab and you can see I could apply it to the prefab it's coming from.

104
00:08:16.580 --> 00:08:22.280
So that would basically move it from the list of modifications into the prefab itself.

105
00:08:22.280 --> 00:08:30.380
So that's the really cool thing about nesting now variants are very much the same as nesting except

106
00:08:30.950 --> 00:08:38.210
here with a variant we're saying that the whole prefab is really just a pointer to a different prefab

107
00:08:38.270 --> 00:08:40.220
with a list of modifications.

108
00:08:40.250 --> 00:08:41.300
Why is that ever useful.

109
00:08:41.300 --> 00:08:47.600
Well this is exactly useful in the case that we're looking at the case of we want to have a base character

110
00:08:47.600 --> 00:08:51.140
class and then an enemy which is a character.

111
00:08:51.140 --> 00:08:57.920
So it is just a character prefab with a bunch of different modifications to the enemy prefab for example.

112
00:08:58.190 --> 00:09:01.320
Very cool that we can actually do this.

113
00:09:01.400 --> 00:09:03.730
So how do we create a variant.

114
00:09:03.740 --> 00:09:10.730
Well what we do is we go over into the Unity project viewer and we select an existing prefab and you

115
00:09:10.730 --> 00:09:17.720
right click it and you can go to create and then prefab variant like so and this creates a very you

116
00:09:17.720 --> 00:09:18.400
can name.

117
00:09:18.400 --> 00:09:24.090
So I'm going to call it play a modified like so.

118
00:09:24.390 --> 00:09:30.060
And what I can then do is I can open the play a modified prefab you can see that the root object is

119
00:09:30.060 --> 00:09:35.490
blue to identify the fact that the whole thing kind of inherits from a different prefab so I can actually

120
00:09:35.490 --> 00:09:41.940
go visit the player prefab from within my player modified but I can make modifications here so I could

121
00:09:41.940 --> 00:09:46.680
say Actually I want this player modified to have a speed of seven and you can see that this property

122
00:09:46.680 --> 00:09:52.410
gets highlighted in blue by right click I can go to apply it to prefab a player basically very much

123
00:09:52.410 --> 00:09:57.000
the same as the Knesset prefabs and applying it one level further up and I just want to show you this

124
00:09:57.000 --> 00:09:59.160
can keep going levels and levels deep.

125
00:09:59.160 --> 00:10:04.200
So this play a modified I could create a prefab variants off of this I could open up the prefab variance

126
00:10:04.200 --> 00:10:09.410
of that and I could go and change its speed to eight for example.

127
00:10:09.510 --> 00:10:15.690
Now if I click on speed you can see it says Do you want to apply it to the player prefab modified or

128
00:10:15.720 --> 00:10:20.760
the player prefab and the player prefab so do you want to go one level up or two levels up.

129
00:10:20.760 --> 00:10:27.910
So this becomes very interesting it's kind of you've got this inheritance of properties among your your

130
00:10:27.930 --> 00:10:29.160
characters.

131
00:10:29.160 --> 00:10:34.800
So what I want us to do is the following just to get your hands dirty.

132
00:10:34.810 --> 00:10:39.220
We're going to create a character based class based prefab.

133
00:10:39.220 --> 00:10:40.860
You're gonna rename the player to character.

134
00:10:40.870 --> 00:10:42.880
That's gonna be our base for now.

135
00:10:42.880 --> 00:10:45.530
Then you're going to make a two variants.

136
00:10:45.550 --> 00:10:49.230
One is gonna be for the enemy and one is gonna be for the player named as such.

137
00:10:49.240 --> 00:10:53.410
You might need to rename the current enemy prefab to something like enemy old because in the next lecture

138
00:10:53.410 --> 00:10:57.420
we're gonna be trying to achieve the same setup as we have now.

139
00:10:57.430 --> 00:11:02.320
So pause the video and have a go at setting up this with the character at the roots and the enemies

140
00:11:02.350 --> 00:11:07.500
and players basically as variants of that character okay.

141
00:11:07.500 --> 00:11:08.530
Welcome back.

142
00:11:08.550 --> 00:11:17.430
We can do this very quickly so these modified players I'm going to delete I'm going to rename this player

143
00:11:18.120 --> 00:11:24.390
to character and then I'm going to create one variants create their prefab variant and I'm going to

144
00:11:24.390 --> 00:11:25.890
call that player.

145
00:11:25.890 --> 00:11:29.390
That's where we're gonna make all our player specific changes and then the enemy.

146
00:11:29.400 --> 00:11:35.850
I'm going to rename currently to enemy old and create another variant off of character by selecting

147
00:11:35.850 --> 00:11:39.450
it going to create prefab variants and calling that one enemy.

148
00:11:39.450 --> 00:11:43.540
So that's where we'll make all the modifications specific to the enemy.

149
00:11:43.650 --> 00:11:48.660
Hopefully that's slightly clearer about prefab variance and nested prefabs and how cool they really

150
00:11:48.660 --> 00:11:54.810
are and that we've demystified a little bit the format of those prefabs by having a look at the text

151
00:11:54.870 --> 00:12:00.570
editor and the next lecture we're going to clean this up so that the player and enemy really do reflect

152
00:12:00.780 --> 00:12:02.330
what they mean and what they are.
