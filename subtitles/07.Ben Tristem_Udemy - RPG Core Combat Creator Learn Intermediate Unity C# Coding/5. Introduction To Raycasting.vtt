WEBVTT
1
00:00:04.210 --> 00:00:05.340
Hello again in this video.

2
00:00:05.340 --> 00:00:10.360
We're going to be implementing the first part of recasting so that when we click anywhere in our game

3
00:00:10.660 --> 00:00:14.050
we shoot out a ray from the camera to the point that we've clicked.

4
00:00:14.050 --> 00:00:18.790
We're going to visualize that with a debug line so that we can see exactly where it is that our right

5
00:00:18.790 --> 00:00:21.630
is shooting so let's jump in and start right casting.

6
00:00:21.700 --> 00:00:22.060
Okay.

7
00:00:22.070 --> 00:00:26.290
I'd like to start by articulating the problem and solution the problem we have is that we need to click

8
00:00:26.530 --> 00:00:32.890
somewhere and have our player move to that position but move there in 3D space and we can move our mouse

9
00:00:32.890 --> 00:00:34.380
Mouse around in 2D space.

10
00:00:34.390 --> 00:00:38.990
But how do we know that we're trying to say walk just under the tree over there.

11
00:00:39.010 --> 00:00:40.790
All we know is where we are in 2D space.

12
00:00:40.900 --> 00:00:44.020
And the solution to that is using Ray casting.

13
00:00:44.020 --> 00:00:45.340
So what is Ray casting.

14
00:00:45.340 --> 00:00:52.540
It's the process of shooting an invisible ray from a point in a space specified direction to detect

15
00:00:52.540 --> 00:00:55.410
whether any colliders lay in the path of that Ray.

16
00:00:55.420 --> 00:01:00.190
So in other words to visualize that we start our ray at a particular point for us.

17
00:01:00.190 --> 00:01:05.500
We're doing that right in front of the camera or at the camera's origin point and we're shooting a ray

18
00:01:05.500 --> 00:01:07.670
which is like our frickin laser beam.

19
00:01:07.810 --> 00:01:13.480
If you'd like to look at it that way and that right is going to collide somewhere and it'll be interesting

20
00:01:13.480 --> 00:01:18.190
in the future for us to know where did it collide because that's where we want the player to walk or

21
00:01:18.190 --> 00:01:22.610
that might be where we want the player to go loot a dead body or to attack an enemy.

22
00:01:22.810 --> 00:01:24.120
So that's the important part of it.

23
00:01:24.160 --> 00:01:30.640
And out of these the two main things we're interested in is what's the location the vector 3 so that

24
00:01:30.730 --> 00:01:31.830
X Y Z.

25
00:01:31.840 --> 00:01:34.460
These these are the three aspects of our vector three.

26
00:01:34.630 --> 00:01:40.570
So we know the starting location the origin and we need to know the direction So what direction we're

27
00:01:40.570 --> 00:01:46.150
facing and if we go back and look in our game over here we can see that when we look at our main camera

28
00:01:46.360 --> 00:01:52.030
and I'm just going to change the size of the icon by going click on gizmos and up the top on 3D icons

29
00:01:52.030 --> 00:01:52.980
just reduce that.

30
00:01:52.980 --> 00:01:55.920
So my camera icons not so quite so massive.

31
00:01:56.080 --> 00:02:03.100
And so we can see if I scroll the way in this point just here where my x y z x y z gizmo is just at

32
00:02:03.100 --> 00:02:05.260
that point right in there is the origin.

33
00:02:05.260 --> 00:02:08.000
That's where we're shooting our right from wrong to shoot our ray from.

34
00:02:08.080 --> 00:02:13.740
And then if I change my window a little bit here you'll see that we have the cameras near clipping planes

35
00:02:13.750 --> 00:02:15.400
so this box just in here.

36
00:02:15.430 --> 00:02:17.620
If I roll it around a bit you'll see it a bit easier.

37
00:02:17.620 --> 00:02:22.740
This is where we're going to shoot the laser from and into that camera's near clipping plane.

38
00:02:22.740 --> 00:02:28.450
So let me just draw this a little bit and grab my pen and start scribbling on the screen so you can

39
00:02:28.450 --> 00:02:31.770
see this just here on the camera.

40
00:02:31.770 --> 00:02:37.510
The camera's near clipping plane relates to what we are going to see as a play on our screen and because

41
00:02:37.510 --> 00:02:42.730
I've got this we'd kind of tall and skinny stretch on my game window at the moment.

42
00:02:42.730 --> 00:02:46.300
That's why these two look like that.

43
00:02:46.300 --> 00:02:48.040
And because we're in Free Aspect mode as well.

44
00:02:48.250 --> 00:02:55.810
And so if we start from the origin just here and we move our mouse to say just there on the screen then

45
00:02:55.810 --> 00:03:01.060
we're going to shoot a ray from that point to that point and wherever it intersects a collision which

46
00:03:01.060 --> 00:03:05.410
might be just there we know that that is the point that the plane was looking to click at.

47
00:03:05.410 --> 00:03:08.260
So that might correspond to say there on the screen.

48
00:03:08.260 --> 00:03:10.020
So that's how we're calculated.

49
00:03:10.090 --> 00:03:15.700
That's how we're getting that the plane should be moving to that point and to do that we need a couple

50
00:03:15.700 --> 00:03:18.130
of nifty methods that are going to show you in a moment.

51
00:03:18.130 --> 00:03:26.020
Once I clear my screen we're going to do two cool things one is using debug dot draw ray which is where

52
00:03:26.020 --> 00:03:30.370
we need to know the start and we need to know the direction we can also change the color if we want

53
00:03:30.400 --> 00:03:36.580
a couple of other things but mostly the start and the direction as well as the camera dot screen point

54
00:03:36.580 --> 00:03:40.570
to Ray and I'm giving you the link to both of these if you want to read up on them a little bit more.

55
00:03:40.660 --> 00:03:44.170
But these are the two methods we're going to be using so back over into unity.

56
00:03:44.170 --> 00:03:48.700
Let's start our fire up our scripts our movie script.

57
00:03:48.700 --> 00:03:53.480
Actually you know what I just saw sample scene is still called sample scene and changes to sandbox are

58
00:03:53.500 --> 00:03:59.650
right click rename call it sandbox you can leave it a sample scene if you want but on it to be known

59
00:03:59.650 --> 00:04:05.950
as sandbox I'm going say which is control s or command s and then now we'll find our scripts open up

60
00:04:05.950 --> 00:04:12.700
move up and within here we want to create a variable which is going to be of type Ray and we'll call

61
00:04:12.700 --> 00:04:13.330
it last.

62
00:04:13.330 --> 00:04:13.780
Right.

63
00:04:13.780 --> 00:04:18.850
So make yourself a new line of type Ray and it will be lost right.

64
00:04:18.850 --> 00:04:19.550
Why is it lost.

65
00:04:19.550 --> 00:04:26.530
RAY Well it's the last ray that we've shot at at the screen so just recognizing the fact that each time

66
00:04:26.530 --> 00:04:32.380
we create a new ray the old one is gone and we don't need to keep a connection to that anymore reference

67
00:04:32.380 --> 00:04:37.510
it anymore it's the last ray that we've shot and within update we will create ourselves an if statement

68
00:04:37.600 --> 00:04:43.540
if and then we're looking for input capital I input dot net how is it a little micro challenge for you

69
00:04:43.540 --> 00:04:48.820
how do we know if we have clicked the left mouse button if you know how to do that just filling the

70
00:04:48.820 --> 00:05:00.260
rest of this that's going to be get mouse button down and it is button zero usually and then we've gone

71
00:05:00.260 --> 00:05:07.070
out to double parentheses and then on our next line Kelly prices we need to say last ray that we've

72
00:05:07.070 --> 00:05:15.030
created a variable to sub here last ray equals now how do we get our camera if you remember that little

73
00:05:15.030 --> 00:05:19.890
micro challenge for you again to test your memory if you've done this in our other courses we're going

74
00:05:19.890 --> 00:05:25.710
to be looking for camera dot main camera dot main is our main camera and then again using the method

75
00:05:25.710 --> 00:05:33.690
I mentioned before a screen point to Ray and where are we looking for.

76
00:05:33.690 --> 00:05:39.650
Well pretty cool we've got input dot mouse position okay.

77
00:05:39.830 --> 00:05:48.110
And then finally we can use debug dot draw Ray and the starting point for this will be last ray dot

78
00:05:48.200 --> 00:05:55.290
origin so the origin of our camera comma lost Ray dot direction.

79
00:05:55.400 --> 00:05:56.930
What are these things already made for us.

80
00:05:56.930 --> 00:06:03.890
Now we want to make the visualization of this quite long so I'm going to times this by 100 but this

81
00:06:03.890 --> 00:06:06.850
means that our ray will be drawn way off into the distance.

82
00:06:06.850 --> 00:06:12.320
So now we click play and you can see as I click in various points on the screen you can see that this

83
00:06:12.320 --> 00:06:13.780
ray is being shot out.

84
00:06:13.790 --> 00:06:15.560
Let me just move the camera around a little bit.

85
00:06:15.560 --> 00:06:21.140
You can see the ray is being shot to correspond to where I've clicked on the screen so going from the

86
00:06:21.170 --> 00:06:23.600
camera to our terrain.

87
00:06:23.920 --> 00:06:24.350
Okay.

88
00:06:24.360 --> 00:06:27.380
So that's the first step in Ray casting visualizing the ray.

89
00:06:27.380 --> 00:06:32.120
Next up we want to say well this is the point that we want to move our player to and just a reminder

90
00:06:32.120 --> 00:06:36.800
if you've got any questions at all about what we've covered in this video what is Ray casting in general

91
00:06:36.800 --> 00:06:40.980
if you're confused or even if you just want to summarize your understanding of what's going on.

92
00:06:41.030 --> 00:06:47.120
Please do throw your questions into the Q and A into our community forum so that we can help you out

93
00:06:47.120 --> 00:06:48.580
and make sure that you don't get stuck.

94
00:06:48.590 --> 00:06:50.980
So great work in this video and I'll see you in the next video.
