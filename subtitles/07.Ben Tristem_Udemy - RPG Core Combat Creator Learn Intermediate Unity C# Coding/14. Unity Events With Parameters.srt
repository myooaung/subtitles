1
00:00:04,440 --> 00:00:05,760
Hello and welcome internet show.

2
00:00:05,760 --> 00:00:12,090
We're gonna be looking at how we can create unity events that actually pass through some data such as

3
00:00:12,090 --> 00:00:14,560
the amount of damage that has been taken.

4
00:00:14,580 --> 00:00:19,890
We're going to be doing that to allow us to spawn the damaged text with the correct amount of damage.

5
00:00:19,890 --> 00:00:26,220
So if I grab my sword dive on into battle you can see if I get hits I'm getting twelves and eights from

6
00:00:26,220 --> 00:00:27,930
the different types of arrow.

7
00:00:27,930 --> 00:00:33,420
And if I hit you with my sword I'm doing 14 damage each time and you can see more people are attacking

8
00:00:33,420 --> 00:00:33,840
me.

9
00:00:33,840 --> 00:00:37,680
I'm getting loads of text sporting above my head and eventually die.

10
00:00:37,680 --> 00:00:39,750
So let's dive in and see how we can use it.

11
00:00:39,780 --> 00:00:41,920
Unity events in that way.

12
00:00:42,990 --> 00:00:49,320
So the final piece of this puzzle is going to be to get our damaged text to display the actual damage

13
00:00:49,380 --> 00:00:50,460
that the enemy took.

14
00:00:50,460 --> 00:00:54,750
As you can see we've got these print statements that do it but we aren't currently able to do it in

15
00:00:54,840 --> 00:01:01,510
that damage text because we have no way of passing that argument through a unity event.

16
00:01:01,560 --> 00:01:03,000
So how do we do that.

17
00:01:03,000 --> 00:01:05,220
In fact let's just have a look at the situation we're in.

18
00:01:05,220 --> 00:01:13,320
If we go to our characters prefab then you can see that at the moment in our health script we are hooking

19
00:01:13,320 --> 00:01:15,740
up to that spawn function.

20
00:01:15,840 --> 00:01:22,260
But we are passing a constant 13 value what we want to happen is that that take damage event actually

21
00:01:22,260 --> 00:01:25,560
comes with the damage that was being dealt.

22
00:01:25,590 --> 00:01:29,820
Now unity events do have a way of tackling this but it's slightly convoluted.

23
00:01:29,820 --> 00:01:35,850
So let me show you if we go over to our health script you'll see that the unity event can actually take

24
00:01:35,850 --> 00:01:42,960
a generic argument very much like an action delegate did as well so we could say this takes a float

25
00:01:43,020 --> 00:01:49,040
argument with it and this would all look just fine but if you go over into the inspector you're going

26
00:01:49,040 --> 00:01:50,330
to notice something.

27
00:01:50,340 --> 00:01:55,920
Well first of all it's saying that the invoke needs to take an event which needs to take a float which

28
00:01:55,920 --> 00:01:56,550
currently doesn't.

29
00:01:56,550 --> 00:02:02,280
So that's quite easy or we need it to do is take the damage as the float in there to make sure that

30
00:02:02,280 --> 00:02:04,650
you update that in your code as well.

31
00:02:04,650 --> 00:02:11,370
And then basically what that's going to do is remove that serialize field.

32
00:02:11,370 --> 00:02:13,110
Why is it removing a serious field.

33
00:02:13,110 --> 00:02:19,530
Well the reason is that serialized fields in Unity can't really handle generics like this as special

34
00:02:19,530 --> 00:02:21,480
cases for lists.

35
00:02:21,480 --> 00:02:24,570
But in general you have a class that has some generics in it.

36
00:02:24,570 --> 00:02:26,790
It's not going to work as a serialized field.

37
00:02:26,790 --> 00:02:35,440
So what we have to do is quite simply that we need to create a subclass of this unity event float.

38
00:02:35,700 --> 00:02:39,030
And I'm just going to do this here inside of the health class.

39
00:02:39,150 --> 00:02:41,070
But you could do outside if you wanted to.

40
00:02:41,070 --> 00:02:51,370
So we're going to do a public class and I'm going to call it the take damage event like so and that

41
00:02:51,370 --> 00:02:59,500
is just going to inherit from the unity event that takes a single float like so.

42
00:02:59,680 --> 00:03:02,920
And then the body of our class we're just going to leave empty.

43
00:03:02,920 --> 00:03:06,660
So I'll just leave no space between these two brackets.

44
00:03:06,680 --> 00:03:08,470
Now this take damage event.

45
00:03:08,470 --> 00:03:13,240
We want to use instead of the type for take damage.

46
00:03:13,240 --> 00:03:20,500
So that basically this is almost the same as saying that we are having a serious field of the unity

47
00:03:20,500 --> 00:03:23,440
event that has the float generic.

48
00:03:23,560 --> 00:03:25,810
But we this actually works.

49
00:03:25,810 --> 00:03:26,900
That's the difference.

50
00:03:26,900 --> 00:03:30,640
Because sterilized field can work with a simple class like this.

51
00:03:30,670 --> 00:03:35,090
Now if we go back over into unity and just have a look.

52
00:03:35,140 --> 00:03:36,610
It's still not popping up.

53
00:03:36,820 --> 00:03:46,300
And the reason it's not popping let's see if there's any hints to this in the console here I'm not particularly

54
00:03:46,300 --> 00:03:47,500
being helpful here.

55
00:03:47,530 --> 00:03:49,330
So the console is not helping.

56
00:03:49,390 --> 00:03:56,590
But the reason is that we've got this serialized field but this class is not marked as itself system

57
00:03:56,590 --> 00:03:57,280
not serialized.

58
00:03:57,310 --> 00:04:00,700
So let's just add the annotation of system dot serialize.

59
00:04:01,300 --> 00:04:05,010
So that just make sure that the take damage event can indeed be serialized.

60
00:04:05,010 --> 00:04:08,740
So let's hop on over and see and see and see whether it's going to show up now.

61
00:04:08,800 --> 00:04:15,500
Our event in here so once it's reloaded it has indeed shown up with this list.

62
00:04:15,500 --> 00:04:16,910
Now how do we go about binding it.

63
00:04:16,910 --> 00:04:18,220
Well many challenge for you.

64
00:04:18,220 --> 00:04:27,200
Have a go and see if you can bind it such that the actual float value is going to be used when spawning

65
00:04:27,640 --> 00:04:29,780
pools billion have a go OK.

66
00:04:29,810 --> 00:04:33,170
So we're going to go hit the ad button and see what happens.

67
00:04:33,170 --> 00:04:39,080
I'm just going to follow the same process I did before and if I go to functions go to damage spawner

68
00:04:39,140 --> 00:04:41,630
and just select the spawn.

69
00:04:41,630 --> 00:04:45,610
You can see that it's working the same way as before I have to enter the float Valley.

70
00:04:45,630 --> 00:04:51,740
That's because if you go to that function dropdown one more time and have a look at the damage tech

71
00:04:51,740 --> 00:04:56,960
spawner you'll notice there's actually two sections in this dropdown there is one which has the dynamic

72
00:04:56,960 --> 00:05:00,050
float and one which has static parameters.

73
00:05:00,260 --> 00:05:07,130
So the dynamic floats if you select spawn that is under the dynamic float section then you'll notice

74
00:05:07,250 --> 00:05:09,730
that static area goes away.

75
00:05:09,740 --> 00:05:16,940
And now it's using the float from take damage in the float parameter or argument of spawn.

76
00:05:16,940 --> 00:05:23,150
So if you go ahead and hit play now what we should be seeing is that I go and deal some damage to the

77
00:05:23,150 --> 00:05:27,440
enemy and the damage value should be correct.

78
00:05:27,440 --> 00:05:30,320
I think that is actually 13 is the damage I'm doing.

79
00:05:30,350 --> 00:05:30,650
Yes.

80
00:05:30,650 --> 00:05:37,120
Because if he goes and attacks me I get damage of eight and I attack him I do damage of 13.

81
00:05:37,150 --> 00:05:41,330
If I change my weapon do I also get different damage amounts.

82
00:05:41,330 --> 00:05:43,730
Yes I do damage a 14 instead.

83
00:05:43,730 --> 00:05:51,260
So you can see that now actually we are being able to show the correct amount by passing it through

84
00:05:51,260 --> 00:05:52,630
the unity event.

85
00:05:52,700 --> 00:05:57,290
And to summarize we just had to do that little bit of a convolution We couldn't use the unity event

86
00:05:57,860 --> 00:06:03,710
chevrons float directly because serialize field doesn't really allow us to use generics.

87
00:06:03,710 --> 00:06:10,880
So we had to create a serialized will subclass of it so that we could just use that as the type instead.

88
00:06:11,720 --> 00:06:15,880
So that wraps up a little mini series on the damaged text.

89
00:06:15,890 --> 00:06:22,280
And now you can see that if I dive on into battle and start to get hit by volleys of arrows that the

90
00:06:22,280 --> 00:06:29,150
damage text is showing up above my head above the enemy's heads as I attack them and everything is working

91
00:06:29,150 --> 00:06:31,150
perfectly.

92
00:06:31,160 --> 00:06:33,860
Next we're going to be looking at health balls see that.
