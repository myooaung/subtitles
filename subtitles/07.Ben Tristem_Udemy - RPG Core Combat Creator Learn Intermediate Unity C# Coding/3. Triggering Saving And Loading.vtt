WEBVTT
1
00:00:04.430 --> 00:00:09.140
Hello and welcome and this lecture we're gonna be binding the saving and loading of our save system

2
00:00:09.500 --> 00:00:11.440
to the S and L keys.

3
00:00:11.450 --> 00:00:15.380
So if I hit l It is going to trigger loading from our safe system.

4
00:00:15.380 --> 00:00:21.890
And if I hit s is gonna trigger saving you can see I got a log message telling me where my save files

5
00:00:21.890 --> 00:00:28.360
actually gone to and this is going to be all achieved through having a persistent prefab to deal with

6
00:00:28.370 --> 00:00:31.010
saving in the same way as we have that for the fader.

7
00:00:31.010 --> 00:00:35.850
Now let's dive in and see the particulars of why we want this approach.

8
00:00:36.110 --> 00:00:43.250
Our saving system we currently have the saving system will talk to the different entities in our scene

9
00:00:43.250 --> 00:00:45.020
which we do not currently have any entities in our scene.

10
00:00:45.020 --> 00:00:46.870
But this is what it's going to look like.

11
00:00:47.060 --> 00:00:52.290
And at the moment the saving system doesn't exist and asking where should exist how should exist.

12
00:00:52.280 --> 00:00:59.840
Well what I'm proposing is that the saving system should exist inside of a saving prefab and we already

13
00:00:59.840 --> 00:01:07.540
have a mechanism in place for us to have this prefab spawned and maintained across different scenes.

14
00:01:07.640 --> 00:01:14.450
Namely if we go and have a look in game core we've got our persistent objects prefab which gets spawned

15
00:01:14.540 --> 00:01:16.070
already has a fader in it.

16
00:01:16.370 --> 00:01:22.130
We can add an extra object to this as well and that's going to be the saving prefab.

17
00:01:22.160 --> 00:01:27.500
So the saving prefab needs something though in order to drive it because at the moment it exposes this

18
00:01:27.500 --> 00:01:29.220
API to save and to load.

19
00:01:29.360 --> 00:01:32.630
But there's nothing in our game that tells it to save or load.

20
00:01:32.630 --> 00:01:35.510
Now at this time I don't want to go creating any UI.

21
00:01:35.510 --> 00:01:38.500
So what I'm gonna do is I'm just going to bind some keys to it.

22
00:01:38.510 --> 00:01:42.900
We're just gonna buy an S and L to do saving and loading respectively.

23
00:01:43.070 --> 00:01:47.790
And that is going to require us just to introduce another component which is gonna be this saving wrapper.

24
00:01:47.790 --> 00:01:49.040
Now it's gonna be our code.

25
00:01:49.050 --> 00:01:55.580
It's going to live outside of the saving folder and it is going to be responsible just for doing those

26
00:01:55.640 --> 00:01:59.750
little bits of maintenance and admin on our saving system.

27
00:02:00.060 --> 00:02:02.390
Basically telling it when it should act.

28
00:02:02.390 --> 00:02:08.750
The word wrapper in this context means that it wraps around the saving system providing a higher level

29
00:02:08.750 --> 00:02:16.380
of abstraction to the rest of your game and that includes giving you things like key bindings.

30
00:02:16.520 --> 00:02:18.320
So that's what we're gonna go ahead and create.

31
00:02:18.350 --> 00:02:20.710
Let's first of all create our game object.

32
00:02:20.720 --> 00:02:28.160
So I am going to rather our prefab I'm going to right click on persistent objects and go to 3D objects

33
00:02:28.250 --> 00:02:31.220
and just create in fact just create empty.

34
00:02:31.280 --> 00:02:40.730
So I'm going to rename this object to saving instead and I'm gonna pull it across in two game core section

35
00:02:40.880 --> 00:02:46.010
and I'm going to open up the prefab directly so that I'm editing inside that second prefab so we know

36
00:02:46.250 --> 00:02:50.840
that this stuff is going to be spawned once and only once and we'll stay alive between scenes.

37
00:02:50.840 --> 00:02:55.620
Now inside this saving prefab what I want to do is go ahead and add some components.

38
00:02:55.700 --> 00:03:00.860
So I'm gonna go ahead and add first of all the saving system which is going to be the core of things

39
00:03:00.860 --> 00:03:02.010
going on here.

40
00:03:02.390 --> 00:03:05.990
And then I want to also create a saving wrapper.

41
00:03:06.080 --> 00:03:10.840
Now the saving wrapper I'm going to put in scene management is all really about scene management and

42
00:03:10.970 --> 00:03:12.120
even if it's saving.

43
00:03:12.320 --> 00:03:20.510
So I'm gonna go ahead and create a C sharp script called Saving wrapper like so and we can open it up

44
00:03:20.600 --> 00:03:22.190
in Visual Studio code.

45
00:03:22.190 --> 00:03:25.550
So the first thing I want to do is put this in a namespace.

46
00:03:25.550 --> 00:03:33.660
So I'll take my saving wrapper Cut it out and do a namespace RPG dot scene management and I'm going

47
00:03:33.660 --> 00:03:36.860
to paste in the saving wrapper in there.

48
00:03:36.860 --> 00:03:41.300
Now the next thing saving wrap is going to have to do is it currently doesn't have anything and that

49
00:03:41.300 --> 00:03:42.350
it needs to do on start.

50
00:03:42.350 --> 00:03:48.680
So I'm going to remove that but an update is where we're going to want to bind our keys or listen for

51
00:03:48.680 --> 00:03:49.850
our key events.

52
00:03:49.910 --> 00:03:56.300
So I'm going to show you how we're going to do the load API call and then let you do the saving API

53
00:03:56.300 --> 00:03:56.600
calls.

54
00:03:56.600 --> 00:04:03.460
So the first thing is we do and if inputs dots get key down.

55
00:04:03.530 --> 00:04:05.910
So that's getting where the key has gone down this frame.

56
00:04:05.930 --> 00:04:12.170
We're going to do the key code dots and in this case I'm going to use key code L for load and then I'm

57
00:04:12.170 --> 00:04:15.140
going to call to a load method which we do not yet have.

58
00:04:15.620 --> 00:04:22.160
So let's optimistically put it in there and then I can create it with a control dots generate method

59
00:04:22.520 --> 00:04:24.250
create my private method there.

60
00:04:24.530 --> 00:04:36.270
And what we're going to want to do in this load method is to call to the saving system and tell it to

61
00:04:36.270 --> 00:04:40.860
load and for that we're going to need some information.

62
00:04:40.860 --> 00:04:49.230
So first of all to get the saving system we want to do a get component saving system and to get to the

63
00:04:49.230 --> 00:04:53.840
saving system we need to actually use the saving namespace.

64
00:04:53.850 --> 00:05:00.320
So let's go ahead and do that top of the class I'm going to use RPG dot saving.

65
00:05:00.370 --> 00:05:05.610
So it's top of the file rather than top the class and we're gonna do a saving system.

66
00:05:05.610 --> 00:05:09.990
So we're trying to get the components saving system and with that saving system.

67
00:05:10.020 --> 00:05:16.200
What we want to call is the load method and we know that the load method takes a string which is the

68
00:05:16.200 --> 00:05:17.010
save file.

69
00:05:17.010 --> 00:05:19.890
Now what is that save file going to be.

70
00:05:19.890 --> 00:05:25.260
Well in this case we're gonna keep things super simple we're just going to use a same name for everything.

71
00:05:25.260 --> 00:05:27.210
So we're only going to use one save file.

72
00:05:27.600 --> 00:05:31.720
So what I can do is I can create a concept string at the top of the file.

73
00:05:31.740 --> 00:05:41.880
So it's going to be const string save file or if call it's a default save file in fact we're going to

74
00:05:41.880 --> 00:05:51.500
set this to just be safe simple like that and I can then pass that in as the arguments to our load methods

75
00:05:51.510 --> 00:05:55.620
put a semi cut on the end of the line and I can remove the comment now that we are doing it's pretty

76
00:05:55.620 --> 00:05:56.270
easy to read.

77
00:05:56.290 --> 00:05:57.610
That's clearly what it's doing.

78
00:05:57.720 --> 00:06:03.720
So now I also want to remove this comment from line 13 we know what update is we don't need to be told

79
00:06:03.720 --> 00:06:05.040
every time.

80
00:06:05.070 --> 00:06:11.070
So now what I would like you to do is to do the exact same thing with saving calling to the saving method

81
00:06:11.160 --> 00:06:17.910
of the saving system on a key press so a video and have a go I'm not gonna put up a challenge slide.

82
00:06:17.910 --> 00:06:22.790
I think the definition is fairly straightforward and have a go okay.

83
00:06:22.790 --> 00:06:23.480
Welcome back.

84
00:06:23.480 --> 00:06:30.180
So I'm just gonna go ahead and do another if statement and update which is going to do the inputs to

85
00:06:30.230 --> 00:06:37.730
get key down and it is going to do key code dot s this time for saving because I'm gonna be able to

86
00:06:37.730 --> 00:06:43.030
remember that one fairly easily and we're gonna call to a save method again which I have not set up.

87
00:06:43.030 --> 00:06:48.410
Now the reason I'm doing this not in line and splitting it out is because later on we're going to want

88
00:06:48.440 --> 00:06:54.080
these saving rapid things to be called from elsewhere in our code potentially when moving between portals

89
00:06:54.350 --> 00:06:54.850
intent.

90
00:06:54.860 --> 00:06:55.850
That's coming up.

91
00:06:55.850 --> 00:06:58.160
And that is what we.

92
00:06:58.280 --> 00:07:02.580
The reason I'm putting them out separately now you might not you might think it's a bit early optimization

93
00:07:02.600 --> 00:07:06.040
and it is but that's because I know what's coming up next.

94
00:07:06.050 --> 00:07:11.660
So basically very much the same thing I've done there is we've done a get component saving system and

95
00:07:11.660 --> 00:07:17.180
we've called Dot save on it instead of DOT load and we're still using that default save file as the

96
00:07:17.180 --> 00:07:18.140
arguments are saved.

97
00:07:18.140 --> 00:07:20.360
Tell it where it should be saving to.

98
00:07:20.570 --> 00:07:25.580
Now what I want to show you is if we go over into the code there's not much that tells us it's so saving

99
00:07:25.580 --> 00:07:29.750
and loading at the moment so we don't have any save the entities we don't have any components that are

100
00:07:29.960 --> 00:07:34.550
implementing I saved Bell so there's no way that our system knows about the state that we have in our

101
00:07:34.550 --> 00:07:40.160
game it's not magical it can't figure that out for us we have to tell it but one way that we can know

102
00:07:40.160 --> 00:07:47.480
that our saving binding is working is if I go into the game and hit s well then it isn't going to work

103
00:07:47.480 --> 00:07:50.250
until I put the saving wrapper on to our prefab.

104
00:07:50.270 --> 00:07:51.740
So let's make sure that we do that.

105
00:07:51.740 --> 00:07:55.720
So I'm gonna go to game core and saving.

106
00:07:55.790 --> 00:08:01.060
And in here as well as saving system we need the saving wrapper on this prefab.

107
00:08:01.070 --> 00:08:07.790
My mistake says go ahead and hit save now and go to our console and you can see that it said that it's

108
00:08:07.790 --> 00:08:10.070
saving to this particular file.

109
00:08:10.070 --> 00:08:14.140
Now you can go ahead and have a look in your file system and see where it has been saved.

110
00:08:14.210 --> 00:08:20.320
And in fact you can even click on this log message and copy the path to use rather than navigating all

111
00:08:20.320 --> 00:08:26.600
that way you'll be able see that there is a site save dot save file and that is where the data is going

112
00:08:26.600 --> 00:08:27.520
to be put at the moment.

113
00:08:27.530 --> 00:08:32.450
You should see that the size of that file is absolutely minuscule but it will grow when we have more

114
00:08:32.450 --> 00:08:36.920
data and now seeing more characters and so on and so forth more levels and so on.

115
00:08:36.950 --> 00:08:42.290
So in the next lecture we are going to be looking at actually getting some state into that save file.

116
00:08:42.290 --> 00:08:46.640
We're going to figure out how we can expose the state from our components which the mover and health

117
00:08:47.390 --> 00:08:50.170
using our Icesave rules and assign salable entities.

118
00:08:50.180 --> 00:08:51.620
So I'll see you in that lecture.
