1
00:00:04,470 --> 00:00:05,210
Hello and welcome.

2
00:00:05,220 --> 00:00:11,880
In this lecture we're going to be fixing a bug so that when we play we always reliably have the level

3
00:00:11,910 --> 00:00:17,640
that was last saved rather than sometimes it not getting calculated as is currently the case.

4
00:00:17,670 --> 00:00:21,540
Let's dive in and see why that bug is happening and how we can fix it.

5
00:00:22,790 --> 00:00:28,970
So let's see how to reproduce this bug I'm starting from a completely clean slate here with no state

6
00:00:29,000 --> 00:00:32,540
whatsoever so I'm going to show you how we can create the state that will reproduce it.

7
00:00:32,570 --> 00:00:39,500
So if I go and kill this God and then once he's dead I'm going to go ahead and save so you can say I've

8
00:00:39,500 --> 00:00:44,810
got 10 experience points and level two calculated from the experience points I'll save this and then

9
00:00:45,050 --> 00:00:47,040
exits and restart the game.

10
00:00:47,210 --> 00:00:54,840
And what we will see is that my experience points are still 10 but the level this time hasn't been recalculated

11
00:00:54,840 --> 00:00:57,500
yet and is stuck at one.

12
00:00:57,510 --> 00:01:01,320
Now what will actually happen is sometimes this will happen.

13
00:01:01,320 --> 00:01:07,410
But actually if I were to start from a different scene so I'll start from the sandbox to scene instead

14
00:01:08,000 --> 00:01:13,350
and I go ahead and hit play then our code and then the saving system is going to load up scene one because

15
00:01:13,350 --> 00:01:19,680
that's the last scene we were saved in and noticed that this time actually the level was correctly calculated.

16
00:01:19,770 --> 00:01:21,180
So what's going on here.

17
00:01:21,420 --> 00:01:26,730
Well you can go ahead and try and debug this for yourself particularly.

18
00:01:26,730 --> 00:01:34,860
I think what you're going to need to do is put some print statements in the start of base stats and

19
00:01:35,250 --> 00:01:40,130
in the restore of experience and see what's happening which ones getting called first.

20
00:01:40,130 --> 00:01:44,730
In each instance now if you go ahead and do that I'm not gonna do it on screen but imagine that you

21
00:01:44,730 --> 00:01:47,340
had gone ahead and done that process.

22
00:01:47,340 --> 00:01:52,600
You will see that in the case where our level is not getting updated.

23
00:01:52,740 --> 00:01:59,010
We are actually restoring the state of the experience points after start which means that we've already

24
00:01:59,010 --> 00:02:04,560
calculated the level and we're not going to recalculate the level until experience has changed again.

25
00:02:04,560 --> 00:02:06,210
So that's a bit of a problem.

26
00:02:06,240 --> 00:02:13,190
And in general also weird because we thought that start usually gets called after the restore state.

27
00:02:13,200 --> 00:02:14,340
So what's going on there.

28
00:02:14,880 --> 00:02:21,780
Well if we dig into it a little bit what you're going to notice is that in some cases this is true because

29
00:02:21,900 --> 00:02:24,220
the restore state is getting called in a wake.

30
00:02:24,240 --> 00:02:28,890
And if we look very specifically at some of the cases here.

31
00:02:28,890 --> 00:02:35,640
So we've got our savings system and what's going on with the savings system is when we've got load last

32
00:02:35,640 --> 00:02:41,580
seen so that's what we just did we were in a different scene and it loaded us into Scene 1 what it was

33
00:02:41,580 --> 00:02:46,910
doing is it was saying hey look the scene that was last saved is different.

34
00:02:46,950 --> 00:02:49,290
So and it's not the one that's currently loaded.

35
00:02:49,290 --> 00:02:56,400
So go ahead and load that with a load scene async and because this is in a car routine that yield returns

36
00:02:56,430 --> 00:03:03,450
when the scene has finished loading and that actually in terms of timeline is after all the awakes have

37
00:03:03,450 --> 00:03:04,810
been called in the scene.

38
00:03:04,920 --> 00:03:06,870
But before all the starts.

39
00:03:06,870 --> 00:03:12,570
So essentially it's like being called on a wake or just after a wake that we will have restore state

40
00:03:12,570 --> 00:03:20,070
called however if that isn't the case then it's going to depend when load last seen was called.

41
00:03:20,070 --> 00:03:24,210
And I just want to point out actually if you go through a portal the same sort of stuff is happening.

42
00:03:24,300 --> 00:03:29,700
We've got load seen async happening and obviously all the awakes will be called but starts won't have

43
00:03:29,700 --> 00:03:30,650
been called yet.

44
00:03:30,840 --> 00:03:37,500
And then we're loading from the saving wrapper so we're loading the scene at this stage again just after

45
00:03:37,500 --> 00:03:37,860
a wake.

46
00:03:37,890 --> 00:03:40,130
But before all the starts have been called.

47
00:03:40,290 --> 00:03:45,400
However if we have a look at our saving wrapper we have got the load.

48
00:03:45,420 --> 00:03:49,240
Last scene is happening inside start.

49
00:03:49,260 --> 00:03:56,610
So this means that depending on the order of execution of your scripts and this start method might be

50
00:03:56,610 --> 00:04:04,380
called after the start method of base stats which means that our state is going to be restored after

51
00:04:04,380 --> 00:04:07,700
we have calculated the level which is no good at all.

52
00:04:07,710 --> 00:04:13,710
So pause for a mini challenge here where I just wanted to see if you can figure out how to fix it so

53
00:04:13,710 --> 00:04:20,130
that START is always called after ask date has been restored post video and have a go OK.

54
00:04:20,380 --> 00:04:24,100
So what we're gonna have to do is we're going to have to call all of this.

55
00:04:24,190 --> 00:04:29,560
I enumerated this code routine is going to need to be called in awake instead of start so I'm going

56
00:04:29,560 --> 00:04:38,890
to rename the iron numerator to load last seen instead like so and we're going to cool this iron numerator

57
00:04:38,980 --> 00:04:40,590
in the awake method.

58
00:04:40,600 --> 00:04:46,930
So let's create an awake method GET OUR curly brackets on different lines curly braces on different

59
00:04:46,930 --> 00:04:54,730
lines and then we are going to do a start co routine with the carotene of load.

60
00:04:54,730 --> 00:04:58,270
Last scene we'll start the load last seen carotene.

61
00:04:58,420 --> 00:05:01,090
Now hopefully that should fix our bug.

62
00:05:01,270 --> 00:05:08,540
We go in it to the original sandbox so that we're actually circumventing the loading of any scenes I

63
00:05:08,550 --> 00:05:08,700
see.

64
00:05:08,710 --> 00:05:11,960
That was the problem that we were going into load last seen.

65
00:05:12,010 --> 00:05:17,230
It was happening immediately immediately restoring because it didn't have to load the scene because

66
00:05:17,230 --> 00:05:18,810
we were already in the correct scene.

67
00:05:18,850 --> 00:05:25,720
So if I go ahead and hit play now then you'll notice that my level is correct it has been calculated

68
00:05:25,720 --> 00:05:31,420
correctly because start has been called after restore and you can go and put log messages in it to verify

69
00:05:31,420 --> 00:05:33,330
that you understand that and then everything's working.

70
00:05:33,390 --> 00:05:42,930
OK so to summarize in this lecture what we have learnt we have learnt that we want our start and restore

71
00:05:42,960 --> 00:05:44,700
to happen in a predictable order.

72
00:05:44,820 --> 00:05:52,020
We want restore to happen before start so that in start we can rely on the state having been restored

73
00:05:52,050 --> 00:05:53,900
and we've got the state already set up.

74
00:05:53,940 --> 00:05:55,230
That's the first thing we learned.

75
00:05:55,230 --> 00:06:06,150
The second thing we learnt is that our function called load seen async finishes or yield returns after

76
00:06:06,150 --> 00:06:07,920
everything has been awoken.

77
00:06:07,920 --> 00:06:13,860
But before all this starts have been called which is great because that's what we need in order to have

78
00:06:13,920 --> 00:06:17,580
restore state happen before all the starts.

79
00:06:17,580 --> 00:06:24,300
But we also saw that we had a problem where we were actually calling this sometimes in start which was

80
00:06:24,300 --> 00:06:30,750
no good and meant that order was unpredictable with base stats and we fixed that so in the next lecture

81
00:06:30,750 --> 00:06:35,620
we're going to be looking at how we can use instead of having this print statement called levelled up.

82
00:06:35,760 --> 00:06:43,230
We're going to be looking at how we can have another event to allow us to do things and also spawn spawn

83
00:06:43,290 --> 00:06:45,480
some particle effects see that.
