WEBVTT
1
00:00:04.310 --> 00:00:04.960
Hello and welcome.

2
00:00:04.970 --> 00:00:12.320
In this lecture we are going to be replacing at code to get start with code that does a dictionary look

3
00:00:12.320 --> 00:00:13.720
up instead.

4
00:00:13.730 --> 00:00:18.590
And we're going to build that dictionary look up and then use it and get standards why it's hidden from

5
00:00:18.590 --> 00:00:20.480
you because that's gonna be your challenge solutions.

6
00:00:20.480 --> 00:00:21.920
I don't want to spoil things.

7
00:00:21.950 --> 00:00:24.660
Let's dive in and see how this works.

8
00:00:26.140 --> 00:00:31.030
So if you're like me you might be getting a little bit concerned about the performance of this gets

9
00:00:31.030 --> 00:00:32.140
that function.

10
00:00:32.140 --> 00:00:38.440
Now usually I don't talk about optimizing things too early but here I'm really seeing a problem might

11
00:00:38.590 --> 00:00:43.190
arise in the future not in my project but in your projects.

12
00:00:43.240 --> 00:00:50.860
Reason being we have got two for each loops and they are each just expensively going over everything

13
00:00:50.950 --> 00:00:53.500
in the character classes and the stats.

14
00:00:53.500 --> 00:00:58.360
So if you have a really long progression with lots of character classes and under each character class

15
00:00:58.360 --> 00:01:04.700
you've got a myriad of stats then this whole operation could take you quite a long time.

16
00:01:04.900 --> 00:01:05.880
So that's not ideal.

17
00:01:05.880 --> 00:01:11.310
That's not what we want and it wouldn't be a problem if we were doing it once or twice in the game.

18
00:01:11.350 --> 00:01:17.020
But the problem is in health display we're actually getting percentage and get percentage calls get

19
00:01:17.020 --> 00:01:17.430
stats.

20
00:01:17.440 --> 00:01:22.690
So that's happening every single update and expensive operation every update that's a no no.

21
00:01:22.690 --> 00:01:27.550
So we want to have a look at how we could optimize this and the key to this is going to be to use a

22
00:01:27.550 --> 00:01:29.880
dictionary as a look up table.

23
00:01:30.070 --> 00:01:32.980
Now what do I mean by lookup table.

24
00:01:32.980 --> 00:01:39.580
I mean that we basically want to say here's my character class then here's my stat and here's my level

25
00:01:39.580 --> 00:01:41.290
please return me an integer.

26
00:01:41.310 --> 00:01:46.830
So it's a multi-level look up but it's still a look up we're trying to look up by these values.

27
00:01:46.900 --> 00:01:51.880
So unfortunately we can't use dictionary is in building ask critical objects.

28
00:01:51.880 --> 00:01:55.860
It's just not a serialized ball type by Unity's standard a serialization.

29
00:01:56.230 --> 00:02:00.270
So we have to build our dictionary after the fact.

30
00:02:00.460 --> 00:02:02.740
And what's that dictionary going to look like.

31
00:02:02.770 --> 00:02:06.550
Well let's just have a look at what we're looking up by shall we.

32
00:02:06.550 --> 00:02:09.760
So first of all we are looking up by the character class.

33
00:02:09.760 --> 00:02:14.710
That's the whole purpose of this first for each loop is that we're looking for this progression class

34
00:02:14.770 --> 00:02:16.790
that has a particular character class.

35
00:02:16.900 --> 00:02:23.110
So we know that in our dictionary the first key is going to be the character class.

36
00:02:23.230 --> 00:02:28.570
Then what we can do is we can nest another dictionary inside it to do a secondary look up and what's

37
00:02:28.570 --> 00:02:32.450
the key if that one's going to be well what's the next thing that we're looking up by.

38
00:02:32.560 --> 00:02:37.090
We're looking up by the progression stat note by the stat itself.

39
00:02:37.120 --> 00:02:39.850
So the static num is the next thing in the dictionary.

40
00:02:39.850 --> 00:02:42.070
And then what are we looking up by we're looking.

41
00:02:42.100 --> 00:02:46.560
By this integer but we don't need to use a dictionary to look up by integer.

42
00:02:46.570 --> 00:02:54.190
It's perfectly performance to look up in an array by integer so we can just have a float array in here

43
00:02:54.190 --> 00:02:58.880
to look up by then that can be exactly the float array that we've got already.

44
00:02:58.900 --> 00:03:01.650
So that is the type we are going to go for.

45
00:03:01.660 --> 00:03:07.120
Now you say it's not particularly happy with it at the moment because what we've got to do is do a using

46
00:03:07.540 --> 00:03:12.030
System dot collections dot generic.

47
00:03:12.060 --> 00:03:18.040
So that's going to allow us to use the dictionary class and then I might just need to have one more

48
00:03:18.040 --> 00:03:25.360
Chevron there and then a variable names so I'm gonna be calling this the look up table like so and it's

49
00:03:25.360 --> 00:03:28.040
going to start off as being No.

50
00:03:28.930 --> 00:03:30.470
But we do want to build.

51
00:03:31.060 --> 00:03:35.470
So what we're gonna do is we're gonna comment about the current code that we've got for doing our look

52
00:03:35.470 --> 00:03:35.650
up.

53
00:03:35.650 --> 00:03:40.150
So instead of doing that we're gonna do something else and that's gonna be the subject of your challenge

54
00:03:40.150 --> 00:03:48.260
in a second but it's gonna create a method called Build look up and this build look up method is if

55
00:03:48.260 --> 00:03:52.640
we go ahead and generate the method for build look up it's gonna be a void method.

56
00:03:52.650 --> 00:03:57.390
And at the beginning we're just basically gonna say if we already have a look up table.

57
00:03:57.390 --> 00:04:05.430
So if it is not no then we can return basically because we want to build the look up only if it hasn't

58
00:04:05.430 --> 00:04:06.500
been built before.

59
00:04:06.510 --> 00:04:11.100
So this is what's going to give us the savings because obviously if every time we it gets that we are

60
00:04:11.100 --> 00:04:13.690
building the look up it won't be any more performance.

61
00:04:13.710 --> 00:04:19.830
But if every time we are getting start we only build the look up the first time then that is going to

62
00:04:19.830 --> 00:04:20.610
be helpful.

63
00:04:21.180 --> 00:04:22.500
So how are we going to build the look up.

64
00:04:22.510 --> 00:04:28.290
Well if you're feeling confident and you think you can build the look up and do the get stat implementation

65
00:04:28.290 --> 00:04:35.220
for the lookup table then by all means be my guest and go ahead otherwise follow along with the how

66
00:04:35.220 --> 00:04:39.210
I'm going to build the look up and that should give you some clues for how we're going to replace get

67
00:04:39.210 --> 00:04:45.970
stat OK so the core of our lookup table the core of the operation is going to be that we have to go

68
00:04:45.970 --> 00:04:53.620
through all of the character classes in our list putting the key into here and then creating a new dictionary

69
00:04:53.620 --> 00:04:54.790
to go into here.

70
00:04:55.360 --> 00:05:00.490
So that's what I'm gonna do first of all is the for each loop and that for each loop is going to go

71
00:05:00.490 --> 00:05:04.990
over what is it gonna go over the progression cache plans that I'm just gonna copy that for loop that

72
00:05:04.990 --> 00:05:05.700
we've got up here.

73
00:05:05.830 --> 00:05:07.670
Because it's exactly the same one.

74
00:05:07.840 --> 00:05:10.210
And now there's two things we want to have.

75
00:05:10.210 --> 00:05:11.950
We've got the key already.

76
00:05:11.950 --> 00:05:16.500
That's basically going to be the progression class dots whatever it is.

77
00:05:16.720 --> 00:05:20.410
But we also want to be building a dictionary in here.

78
00:05:20.440 --> 00:05:23.250
So let's have a look at what that dictionary is.

79
00:05:23.260 --> 00:05:24.190
That's this one here.

80
00:05:24.190 --> 00:05:25.200
This type.

81
00:05:25.300 --> 00:05:28.710
So we want a dictionary of this type to go inside our dictionary.

82
00:05:28.720 --> 00:05:32.490
So let's create the outside dictionary too because we want to create our lookup tables.

83
00:05:32.500 --> 00:05:36.020
We've already said that is null because we haven't returned.

84
00:05:36.040 --> 00:05:40.750
So the look up table is going to be equal to a dictionary of this type.

85
00:05:40.780 --> 00:05:44.880
So I need to do new dictionary of this type and then empty just like that.

86
00:05:44.880 --> 00:05:46.930
So that's a new empty dictionary.

87
00:05:47.020 --> 00:05:51.920
And then what we're going to wanted to do inside this for each loop is something in the following base

88
00:05:51.920 --> 00:05:59.290
we won't do a look up table and then the key as we know is going to be the progression class Dot's character

89
00:05:59.290 --> 00:06:02.440
class and that's going to be equal to what.

90
00:06:02.620 --> 00:06:09.520
Well it's gonna be equal to a stat look up table like so.

91
00:06:10.050 --> 00:06:15.210
And what's the type of the stat lookup table Well it's just this dictionary inside the dictionary.

92
00:06:15.330 --> 00:06:18.850
So we'll put that out that type out in a front.

93
00:06:18.850 --> 00:06:27.440
We can do a new dictionary of this type and I can just use in this case because they're such long variables

94
00:06:27.450 --> 00:06:30.270
the such long types the dictionary types.

95
00:06:30.480 --> 00:06:32.790
I'm just using a var up in front.

96
00:06:32.850 --> 00:06:39.060
So we'll ask stat lookup table and that's basically what we're going to set our look up equal to.

97
00:06:39.060 --> 00:06:43.290
But don't forget we need to actually populate that stat look up table as well.

98
00:06:43.290 --> 00:06:49.020
So we're going to do that between setting here and actually creating it and how we're going to do that

99
00:06:49.020 --> 00:06:49.660
well again.

100
00:06:49.710 --> 00:06:50.640
Same process here.

101
00:06:50.640 --> 00:06:54.510
We're going to do a for each loop and by the way if at any point you think you can handle the rest of

102
00:06:54.510 --> 00:06:57.920
this build look up do pause the video and have a go.

103
00:06:58.170 --> 00:07:03.090
What we're gonna do is a for each loop over this progression where instead of progression carriage counts

104
00:07:03.090 --> 00:07:05.790
we're gonna go over the stats instead.

105
00:07:05.790 --> 00:07:09.110
So again we've got a for each loop just like this one up here.

106
00:07:09.240 --> 00:07:16.660
So I'm going to copy that that's what we're going over these stats inside a particular progression class

107
00:07:16.670 --> 00:07:22.760
we're currently in and we want to be building up assets that look up table very much in the same way

108
00:07:22.760 --> 00:07:29.510
so what's gonna go in the stat lookup table we know that the key needs to be a stats a particular stat

109
00:07:29.540 --> 00:07:35.090
so we look at this progression stat and say OK tell me what your stat is and that's gonna be the key

110
00:07:35.150 --> 00:07:38.060
to our lookup table and then what's the value going to be.

111
00:07:38.060 --> 00:07:40.930
Well it's just going to be this float array of levels.

112
00:07:40.970 --> 00:07:48.630
So it's going to be the progression stat dot levels like so and that pretty much works it out.

113
00:07:48.630 --> 00:07:53.500
So at the end of this we've got a look up table that has been built from scratch.

114
00:07:53.610 --> 00:08:00.270
We have gone over each character class that we've got and added in a stat lookup table the stat lookup

115
00:08:00.270 --> 00:08:06.120
table is in turn built by going over all the stats we've got within the progression class and using

116
00:08:06.120 --> 00:08:06.650
the key.

117
00:08:06.720 --> 00:08:14.620
The progression stack as the key and the levels is then the variable that we want to create so here

118
00:08:14.620 --> 00:08:17.920
is your change for the lecture to complete get stat.

119
00:08:17.950 --> 00:08:22.810
You're going to use the look up dictionary obviously in order to do it and you're basically going to

120
00:08:22.810 --> 00:08:24.040
need very little code.

121
00:08:24.040 --> 00:08:26.050
Hopefully if he can do it right.

122
00:08:26.290 --> 00:08:29.520
And don't worry about any missing key errors at this point.

123
00:08:29.530 --> 00:08:34.830
Just do the simplest approach possible using that look up dictionary pause video and have a go.

124
00:08:36.380 --> 00:08:36.680
Okay.

125
00:08:36.680 --> 00:08:37.220
Welcome back.

126
00:08:37.250 --> 00:08:43.250
So hopefully from the structure of our dictionary it should be fairly easy to use.

127
00:08:43.400 --> 00:08:46.270
In fact all we need to do is in a single line.

128
00:08:46.280 --> 00:08:52.850
We can use our lookup table to say Okay first of all we want to look up by the character class.

129
00:08:52.850 --> 00:08:56.520
Secondly we want to look up by the start.

130
00:08:56.570 --> 00:08:59.710
And thirdly we want to look up by the level.

131
00:08:59.720 --> 00:09:01.840
It's really that simple.

132
00:09:01.850 --> 00:09:02.930
That should be enough.

133
00:09:02.930 --> 00:09:08.570
If I had the right spelling a start with lowercase you can see the type is correct and that should be

134
00:09:08.600 --> 00:09:09.620
enough.

135
00:09:09.920 --> 00:09:17.360
But remember that we had already got this set up where we were doing a check of the level length and

136
00:09:17.450 --> 00:09:20.150
I was fine if you didn't do this in the challenge.

137
00:09:20.150 --> 00:09:24.090
But what I want to do is just make sure that's included as well.

138
00:09:24.140 --> 00:09:32.450
So what I'm going to do is take out here the floats array that is going to be the levels and so we're

139
00:09:32.450 --> 00:09:34.560
going to stop one step short here.

140
00:09:34.580 --> 00:09:40.010
We're just going to do the character class then the start have a levels come out of here and then I

141
00:09:40.010 --> 00:09:41.510
want to do is just check.

142
00:09:41.570 --> 00:09:49.520
So we're going gonna have an if the progression start whereas it progression stat note levels levels

143
00:09:49.610 --> 00:09:57.220
dot length and then what we saying that if it's less than level then we should continue.

144
00:09:57.220 --> 00:10:03.460
So that's the wrong case and so we're going to say if it's less than level what are we going to do we're

145
00:10:03.460 --> 00:10:05.030
going to do a return.

146
00:10:05.050 --> 00:10:09.670
And in this case we were just returning zero so I'm gonna do the same thing.

147
00:10:09.700 --> 00:10:14.380
Basically we're returning zero because we would default through until we reached zero here.

148
00:10:14.530 --> 00:10:20.320
So we'll just return zero base level DOT length less than level means that we don't have a level for

149
00:10:20.320 --> 00:10:28.060
this we retain zero and otherwise we're going to just look out for that level's level like so and return

150
00:10:28.090 --> 00:10:29.350
that instead.

151
00:10:29.350 --> 00:10:32.760
Now I can delete this commented out code because it's now redundant.

152
00:10:32.860 --> 00:10:34.240
Actually that reads much nicer.

153
00:10:34.240 --> 00:10:39.040
This gets that is much more easy and the build look up yet it's a bit more complicated but we know what

154
00:10:39.040 --> 00:10:41.410
it's doing now because we've actually built it.

155
00:10:41.410 --> 00:10:45.310
Let's go over into the editor and just check that this is actually working as we intend actually go

156
00:10:45.310 --> 00:10:50.410
ahead and play and if we're getting 100 percent for our health then we should be doing all right.

157
00:10:50.440 --> 00:10:52.210
It's using get start to do that.

158
00:10:52.210 --> 00:10:58.440
Now you can see there is some out of bounds errors here and the reason for that you must been screaming

159
00:10:58.440 --> 00:10:59.170
at screens.

160
00:10:59.170 --> 00:11:03.180
Well I didn't copy across is that we need to level minus one in here.

161
00:11:03.180 --> 00:11:05.450
Otherwise this logic kind of falls short.

162
00:11:05.550 --> 00:11:06.750
So let's try it again.

163
00:11:06.750 --> 00:11:09.330
Recycle the game and play again.

164
00:11:09.330 --> 00:11:14.490
And sure enough 100 percent now but no errors can go on beat this guy and it's all work in the same

165
00:11:14.490 --> 00:11:16.820
as check my experience reward comes through.

166
00:11:16.890 --> 00:11:21.270
Yes everything is working but hopefully this time it is now working more performance because we're using

167
00:11:21.270 --> 00:11:26.730
a dictionary that we only build once next lecture we will be doing a levelling up.

168
00:11:26.730 --> 00:11:27.240
See you that.
