1
00:00:04,530 --> 00:00:06,140
Hello and welcome in this lecture.

2
00:00:06,210 --> 00:00:10,860
We are gonna get civilising again so that the character's position gets remembered but not just that

3
00:00:11,250 --> 00:00:15,930
all of the enemy's positions are also going to be remembered that's the benefit of this saleable entity

4
00:00:15,960 --> 00:00:16,360
system.

5
00:00:16,650 --> 00:00:22,260
So now if I hit load I go back to my previous safe game which is here where my enemies were already

6
00:00:22,260 --> 00:00:27,260
starting to beat me up and that is a location that was saved in my previous save.

7
00:00:27,270 --> 00:00:29,700
So that's what we're going to achieve in this lecture.

8
00:00:29,730 --> 00:00:32,920
Let's dive in and see how so.

9
00:00:32,930 --> 00:00:37,940
You've been patient and been waiting a long time to get back to having our civilization working again.

10
00:00:37,940 --> 00:00:41,600
Now this is actually pretty easy now we've done this before.

11
00:00:41,600 --> 00:00:46,790
We've been able to capture the state the location of our character so I'm just gonna very quickly go

12
00:00:46,790 --> 00:00:50,650
through that same process I'm going gonna remove my log message from capture state.

13
00:00:51,200 --> 00:00:53,140
And here I'm in saleable entity dots.

14
00:00:53,180 --> 00:00:53,780
Yes by the way.

15
00:00:54,350 --> 00:00:58,130
And remember that saved blends tears on all the characters players and enemy included.

16
00:00:58,130 --> 00:01:01,430
So it is able to save all of those in one go.

17
00:01:01,460 --> 00:01:07,020
Now before we dive any further I want to address why we're returning object type in capture state.

18
00:01:07,040 --> 00:01:13,610
This means that we don't have to be as dark down to what type is actually returned here as long as it's

19
00:01:13,610 --> 00:01:14,750
serialized Bill.

20
00:01:14,810 --> 00:01:16,400
Let's revise what this means.

21
00:01:16,400 --> 00:01:22,550
You remember back in the combat section we introduced the AI action interface which was a super type

22
00:01:22,610 --> 00:01:24,260
for the mover and The Fighter.

23
00:01:24,260 --> 00:01:29,990
So whenever we used an AI action we could substitute either the mover or the fighter into it and use

24
00:01:29,990 --> 00:01:31,130
it in its place.

25
00:01:31,130 --> 00:01:35,870
Well object is exactly the same as that object is the root object for pretty much everything.

26
00:01:35,870 --> 00:01:41,090
So you can return anything that you like including a serialized ball vector 3 or a dictionary which

27
00:01:41,090 --> 00:01:46,290
are both serialized ball and so we can turn those into binary in our files.

28
00:01:46,410 --> 00:01:51,770
What we're gonna do is we're gonna grab the stake that we want which is the transformed position so

29
00:01:51,770 --> 00:02:03,380
transform dot position but you will remember that at this stage we are not able to serialize transform

30
00:02:03,380 --> 00:02:03,840
that position.

31
00:02:03,840 --> 00:02:09,000
So if I were just to return that from capture state it would go into the dictionary at the top level

32
00:02:09,630 --> 00:02:12,900
but then it would be not serialized born we'd get an error.

33
00:02:13,080 --> 00:02:20,240
So what we have to do is we have to wrap this in our new serialize and what's it called serialized bool

34
00:02:20,250 --> 00:02:21,360
vector 3.

35
00:02:21,390 --> 00:02:26,460
So if we wrap it in these serialized vector three create a new one from the transformed opposition vector

36
00:02:26,820 --> 00:02:29,210
then that will be able to serialize.

37
00:02:29,250 --> 00:02:34,890
So this is where I'm going to ask you straight away to do a challenge because we've got this restored

38
00:02:34,950 --> 00:02:40,530
state method that is empty and we have done this before in a previous lecture.

39
00:02:40,530 --> 00:02:47,340
So you should be able to be fully equipped to try and restore this state so as we said I've done it

40
00:02:47,340 --> 00:02:53,820
before and we first thing I do is going to have to cast state to serialize vector three Why is that.

41
00:02:53,940 --> 00:03:00,150
Because it comes in as this generic state object because the saving system that has called us doesn't

42
00:03:00,150 --> 00:03:04,790
know what type this is because we've told it that in here.

43
00:03:04,800 --> 00:03:07,610
But as you can see the return type of capture state was object.

44
00:03:07,740 --> 00:03:12,900
So we know that it's a serialized Bill back three because that's what we've returned to capture state.

45
00:03:12,900 --> 00:03:18,840
So in restore state we are going to restore and see reliable back to three so we need to cast.

46
00:03:19,170 --> 00:03:24,030
Now obviously this could go wrong if a previous version of your application were capturing something

47
00:03:24,030 --> 00:03:28,500
different if you had been capturing I don't know a float at this level.

48
00:03:28,500 --> 00:03:35,570
And then you open a safe file from the old version of your game then the restore state will not will

49
00:03:35,580 --> 00:03:39,510
be a float not as a reliable vector 3 so your new code will actually fail.

50
00:03:39,650 --> 00:03:43,120
But as I said at the moment we're just gonna get around that by deleting safe files.

51
00:03:43,140 --> 00:03:49,680
So for now it is safe to do a cast and then you are going to move your player to the location of the

52
00:03:49,680 --> 00:03:52,470
serial visible vector three remember how we've done that before.

53
00:03:52,680 --> 00:03:54,600
And then a couple of bonuses for you.

54
00:03:54,630 --> 00:03:59,370
Is there any gotchas to do with movement that we've encountered before that if we move our characters

55
00:03:59,370 --> 00:04:01,800
sometimes it glitches out and doesn't move properly.

56
00:04:01,810 --> 00:04:08,550
Have a think about that when we were moving our player to the starting location of the transition points

57
00:04:08,550 --> 00:04:09,920
of those portals.

58
00:04:09,930 --> 00:04:16,950
Was there any gotchas and another bonus for you to stop our character from running to the location that

59
00:04:16,950 --> 00:04:17,850
was previously set.

60
00:04:17,850 --> 00:04:23,430
How can we cancel that current action post a video and have a go okay.

61
00:04:23,430 --> 00:04:24,270
Welcome back.

62
00:04:24,270 --> 00:04:29,060
So the first thing we can do is we gonna do this cast and I'm gonna remove the print statement so we

63
00:04:29,070 --> 00:04:36,850
are going to want to save a serialized vector 3 and we'll just call this the position and we're going

64
00:04:36,850 --> 00:04:41,650
to wants to cast two serialized vector three from our state object.

65
00:04:41,650 --> 00:04:45,410
We know the state object should be of type C realizable vector 3.

66
00:04:45,460 --> 00:04:46,390
So that's the caster.

67
00:04:46,930 --> 00:04:53,290
Now this position we know we can do a two vector to get it to whatever we want and we want to update

68
00:04:53,350 --> 00:04:55,900
and transform dot position.

69
00:04:56,130 --> 00:05:03,040
So transform the opposition is going to be equal to position dot to vector because we need to convert

70
00:05:03,040 --> 00:05:07,050
it into a real unity vector not this serialized vector that we've got now.

71
00:05:07,090 --> 00:05:07,880
That's okay.

72
00:05:07,930 --> 00:05:10,760
But as I said there is that problem with the nav mesh.

73
00:05:10,780 --> 00:05:21,310
So if we do a get component nav mesh agent and then we want to enabled it to be false on that so that

74
00:05:21,310 --> 00:05:27,250
we disable it first and I'm gonna have to include a namespace here the unity engine A.I. for the nav

75
00:05:27,250 --> 00:05:32,620
mesh agent and then we're just setting enable to false because we know that moving it sometimes causes

76
00:05:32,620 --> 00:05:33,060
glitches.

77
00:05:33,070 --> 00:05:35,890
If we've got enough mesh agents enabled there's also trying to move things.

78
00:05:36,610 --> 00:05:40,200
So that's what we're going to do to position and a player.

79
00:05:40,270 --> 00:05:43,890
And then finally we also want to cancel the current action.

80
00:05:43,900 --> 00:05:52,560
So that's going to be a component action scheduler and we're gonna need the right namespace for it.

81
00:05:52,560 --> 00:05:54,570
It's going to need RPG cool.

82
00:05:54,990 --> 00:06:01,810
And so the action schedule we're going to do a dot and then we are going to do a cancel current action.

83
00:06:01,920 --> 00:06:07,440
So if we were moving to a certain point where we restore the point restore the state we're no longer

84
00:06:07,530 --> 00:06:09,200
doing that current action.

85
00:06:09,360 --> 00:06:12,350
Now you're seeing the there start to be a problem here right.

86
00:06:12,360 --> 00:06:17,970
This saleable entity which is part of the saving system which is a low level dependency for a lot of

87
00:06:17,970 --> 00:06:23,610
different classes is suddenly having all these dependencies on our RPG core.

88
00:06:23,610 --> 00:06:27,510
It's having dependencies on the unity engine to a I.

89
00:06:27,510 --> 00:06:30,960
These are dependencies which I'd argue it doesn't need.

90
00:06:30,960 --> 00:06:35,850
We could invert these dependencies that's going to be the subject of subsequent lectures but for now

91
00:06:35,880 --> 00:06:37,850
let's see whether this is enough.

92
00:06:38,010 --> 00:06:43,510
Let's dive devote to the Unity Editor and hit play and see if we can save and load our character.

93
00:06:43,540 --> 00:06:45,120
Okay so I'm going up to a location.

94
00:06:45,120 --> 00:06:46,450
I'm gonna hit save.

95
00:06:46,500 --> 00:06:52,590
I'm going to go to another location I'm going to hit load and we go back to our location and we have

96
00:06:52,590 --> 00:06:55,580
ended up pause and stopping our movement.

97
00:06:55,590 --> 00:07:01,650
So our movement has changed and what's also different now is that all our enemies have a saleable entity

98
00:07:01,650 --> 00:07:01,950
too.

99
00:07:01,950 --> 00:07:08,910
So if I get them to chase me and I go and save at this point and then I carry on then we should be able

100
00:07:08,910 --> 00:07:14,280
to load back and we both go back to that location that we had before previously it was just our character

101
00:07:14,310 --> 00:07:15,390
that was going back.

102
00:07:15,390 --> 00:07:16,830
Now it's the enemy as well.

103
00:07:16,830 --> 00:07:24,920
Now I'm seeing some some issues here with some errors around and nav mesh set stopped and I think this

104
00:07:24,920 --> 00:07:30,500
is happening just because of the order of our operations we're calling cancel just after we've disabled

105
00:07:30,510 --> 00:07:36,500
an mesh agent and it hasn't been enabled again so we could re enabled enough mesh agent just after we've

106
00:07:36,500 --> 00:07:42,730
done a transform update so I can set and able to true again so that we can do our cancel operation happily.

107
00:07:42,740 --> 00:07:44,980
Let's go ahead and hit play and see if we can do that.

108
00:07:44,990 --> 00:07:49,970
If I go and load we're back here with a cactus beating us up but there are no errors this time.

109
00:07:49,970 --> 00:07:52,220
Fantastic okay.

110
00:07:52,250 --> 00:07:57,590
So in this lecture we have got back to serialized but with an added bonus that now we are also serialized

111
00:07:57,590 --> 00:07:59,700
in the position of our enemies.

112
00:07:59,720 --> 00:08:05,750
There is a drawback here however because I have got the position of the enemies if I go ahead and load

113
00:08:05,780 --> 00:08:07,760
here's my enemy positions.

114
00:08:07,760 --> 00:08:16,310
But if I were to go ahead and go into a different scene here it's going to go into my transition scene

115
00:08:16,970 --> 00:08:26,300
and if I were to save this state and then come across in it to my enemies where the main action is if

116
00:08:26,300 --> 00:08:31,070
I go ahead and hit load here you will notice that it's saying there's not a key present in the dictionary

117
00:08:31,070 --> 00:08:33,350
and we didn't load back the enemies.

118
00:08:33,350 --> 00:08:33,890
Why was that.

119
00:08:33,950 --> 00:08:39,350
That's because when I was in the other scene the dictionary from that scene completely overrode all

120
00:08:39,350 --> 00:08:42,350
the state that we had about this scene that I'm currently in.

121
00:08:42,830 --> 00:08:43,930
So that's not good.

122
00:08:43,940 --> 00:08:49,070
We want to be able to have both of those ones have the information from the first scene and the second

123
00:08:49,070 --> 00:08:53,480
scene both in our safe file so that's going to be the subject of the next lecture and I'll see that.
