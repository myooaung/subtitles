1
00:00:04,380 --> 00:00:05,100
Hello and welcome.

2
00:00:05,130 --> 00:00:07,960
In this lecture we are going to be implementing agro.

3
00:00:08,010 --> 00:00:14,880
So if I attack an enemy from a distance then they will come and chase me down if I cause them to hemorrhage.

4
00:00:14,880 --> 00:00:17,560
They get angry about it and want to come and hurt me.

5
00:00:17,610 --> 00:00:23,070
So let's dive in and see how we can implement that in the enemy Ali.

6
00:00:23,410 --> 00:00:31,180
So we really want to have a situation where if I try to attack an enemy from a distance with a range

7
00:00:31,180 --> 00:00:37,870
weapon the enemy doesn't just sit there and take the damage we want to have some sort of aggro behavior

8
00:00:37,870 --> 00:00:43,750
as it's commonly called which basically is just code for saying that the enemy enemy gets aggravated

9
00:00:43,780 --> 00:00:46,850
when you attack them and tries to attack you back.

10
00:00:47,020 --> 00:00:52,900
Now the logical place to start looking at this behavior is in the A.I. controllers.

11
00:00:52,930 --> 00:00:58,600
Let's head over to the our controller and usually I always start from the top with classes to try and

12
00:00:58,600 --> 00:01:00,280
review how things go.

13
00:01:00,280 --> 00:01:05,620
I'm going to skip forward a little bit to review from the update method because I think in the update

14
00:01:05,620 --> 00:01:09,580
method it really makes it clear what the A.I. controller is doing now.

15
00:01:09,910 --> 00:01:16,720
This A.I. controller basically either is in an attack behavior a suspicion behavior or a patrol behavior.

16
00:01:17,020 --> 00:01:19,420
And that is based on the current state.

17
00:01:19,420 --> 00:01:25,960
So if it is in range of the player and it can attack said player it will attack by preference.

18
00:01:25,990 --> 00:01:31,450
Otherwise it's going to be suspicious if the time since it last saw the player is less than this configured

19
00:01:31,450 --> 00:01:36,070
suspicion time otherwise it's going to go back to its patrolling behavior.

20
00:01:36,070 --> 00:01:39,470
Now where can we insert some sort of aggro in here now.

21
00:01:39,490 --> 00:01:42,880
I think aggro is basically just an attack behavior.

22
00:01:43,060 --> 00:01:49,840
And that means that we want to configure when we are in and attack behavior we essentially want to say

23
00:01:50,380 --> 00:01:57,250
either I'm in range of the player or I am have been aggravated and I can attack that plan.

24
00:01:57,550 --> 00:02:04,600
Now basically I think that we can do that by changing this method that currently does is in range of

25
00:02:04,600 --> 00:02:11,500
player to saying am I aggravated basically your aggravated in two conditions one you're very close to

26
00:02:11,500 --> 00:02:17,410
the player in which case area like that you're an enemy you want to go and attack them or you have recently

27
00:02:17,440 --> 00:02:23,680
been aggravated by them that could be by the fact that they've attacked you or it could be by the fact

28
00:02:23,680 --> 00:02:27,530
that one of your mates got attacked and are going to deal with that in the next lecture.

29
00:02:27,640 --> 00:02:32,150
But for now we're just going to deal with the case where you yourself have got attacked.

30
00:02:32,320 --> 00:02:39,200
So we are going to create a method a public method that allows us to aggravate an A.I. and we're gonna

31
00:02:39,220 --> 00:02:42,070
call that when we attack the A.I..

32
00:02:42,490 --> 00:02:44,020
So let's try that.

33
00:02:44,020 --> 00:02:53,340
I'm going to put this under updates and I'm going to have a public void aggravate and the context for

34
00:02:53,340 --> 00:02:56,040
this is that I'm going to leave empty for now.

35
00:02:56,040 --> 00:03:03,560
But the context for this is that if I go over to an enemy prefab what I want to be able to do is hook

36
00:03:03,560 --> 00:03:06,910
up the event that we've got from our health component.

37
00:03:06,910 --> 00:03:09,310
So the health components got a take damage event.

38
00:03:09,480 --> 00:03:17,670
I could go and add a new event here drag in an enemy game object and go to the A.I. controller as a

39
00:03:17,670 --> 00:03:19,680
function and slightly aggravate function.

40
00:03:19,710 --> 00:03:22,680
So if we take damage we have been aggravated.

41
00:03:22,680 --> 00:03:29,690
And that means we will start basically replying to this is attacking range as true.

42
00:03:29,700 --> 00:03:34,530
So actually let's rename that as well instead of is attack in range of player.

43
00:03:34,530 --> 00:03:42,130
We can change this too is aggravated like so now of course that's not what it currently does.

44
00:03:42,130 --> 00:03:48,130
So what we need is a timeout because you could have aggravation as a boolean but I'm going to have it

45
00:03:48,130 --> 00:03:49,340
as something that cools down.

46
00:03:49,420 --> 00:03:54,220
So if you are aggravated you aggravates for so many seconds and then eventually it wears off.

47
00:03:54,220 --> 00:03:56,430
So we've done lots of times before.

48
00:03:56,440 --> 00:04:01,220
So actually I want you to go ahead and implement that the behavior that we want.

49
00:04:01,240 --> 00:04:11,880
Is that the aggravate sets the timer and inhere down in our is aggravated we basically check whether

50
00:04:12,060 --> 00:04:17,580
that time has expired yet and if it hasn't expired yet then we are aggravated.

51
00:04:17,580 --> 00:04:22,950
So check aggravated in here.

52
00:04:23,090 --> 00:04:27,720
So post video and have a go at setting up such a timeout in a controller.

53
00:04:28,070 --> 00:04:34,130
And for reference you can have a look at times such as time since the last so plan was video on how

54
00:04:34,130 --> 00:04:39,810
to go okay So time's this last supplier where are we using this.

55
00:04:39,840 --> 00:04:42,000
We are updating it in the times.

56
00:04:42,330 --> 00:04:48,480
We are checking that it's less than the suspicious time an update and we are resetting it in the attack

57
00:04:48,480 --> 00:04:49,100
behavior.

58
00:04:49,110 --> 00:04:56,580
So let's go and add it first of all which is up here on line 29 and line 30 we've got some timers let's

59
00:04:56,580 --> 00:05:06,220
add another float time since aggravated and we are starting off at math f infinity to basically say

60
00:05:06,550 --> 00:05:09,430
the time since we last aggravated is basically never.

61
00:05:09,670 --> 00:05:12,970
So then we want to in app update timers.

62
00:05:13,210 --> 00:05:15,840
We want to make sure that we're adding to this.

63
00:05:15,840 --> 00:05:22,370
So the timer is constantly growing remember that we do growing timers because of floating point numbers.

64
00:05:23,050 --> 00:05:30,890
And then we got and time since aggravated at some point we had to reset it and that is in aggravate.

65
00:05:30,940 --> 00:05:32,770
So at times it's aggravated is zero.

66
00:05:32,770 --> 00:05:41,950
Once you have been aggravated logically then we want to is aggravated we need to do a check here and

67
00:05:41,950 --> 00:05:48,880
basically what we're saying is we either return true because the distance is less than the chase distance

68
00:05:49,930 --> 00:05:53,730
or so boolean or double bar symbol.

69
00:05:53,740 --> 00:05:58,720
Then what we're going to do is that the time since aggravated is less than and this is where we need

70
00:05:58,720 --> 00:06:01,230
to introduce a new configuration variable.

71
00:06:01,300 --> 00:06:09,040
So we've got a suspicion time I'm going to duplicate that to create an aggro cooldown time

72
00:06:11,750 --> 00:06:16,580
and I'm going to have that start off just a bit more than suspicion time at five seconds.

73
00:06:16,580 --> 00:06:22,440
So the aggro cooldown time is what we want to use when we're checking whether we are aggravated or not.

74
00:06:22,460 --> 00:06:28,490
So if the time since aggravated is less than the agro cooldown time then we are aggravated or we're

75
00:06:28,490 --> 00:06:31,850
aggravated if the distance to the player is less than the chase distance.

76
00:06:31,850 --> 00:06:37,490
So let's see if that has our desired behavior and remembering that I have hooked up here already in

77
00:06:37,490 --> 00:06:41,750
the enemy prefab that our take damage calls aggravate.

78
00:06:41,750 --> 00:06:44,900
So that if we damage our enemy he is getting aggravated.

79
00:06:44,930 --> 00:06:54,160
Let's go ahead and hit play and I'm going to pick up the fireball weapon over here to go and attack

80
00:06:54,190 --> 00:06:55,930
one of these enemies so I attack this enemy.

81
00:06:55,930 --> 00:06:59,950
And when he takes damage he starts running towards me to attack me.

82
00:06:59,950 --> 00:07:03,700
But obviously he doesn't make it in time because my fireballs are too powerful for him.

83
00:07:03,700 --> 00:07:09,340
But at least it doesn't look like he's standing there defense and defenseless while I'm trying to attack

84
00:07:09,340 --> 00:07:09,810
him.

85
00:07:10,000 --> 00:07:16,060
Now in the next lecture I would like to achieve is if I attack somebody.

86
00:07:16,120 --> 00:07:19,870
Well this guy over here his mates over here on the right.

87
00:07:19,930 --> 00:07:23,770
Well he should be coming over and attacking me to within a certain radius.

88
00:07:23,770 --> 00:07:30,340
He should be able to notify the Band of Brothers around him that I am in range and that I should be

89
00:07:30,400 --> 00:07:31,290
attacked.

90
00:07:31,360 --> 00:07:33,870
So I'll see you in that lecture to see how it's done.
