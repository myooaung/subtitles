1
00:00:04,540 --> 00:00:05,440
Hello and welcome.

2
00:00:05,440 --> 00:00:11,890
In this two part lecture we are going to be making it so that our state between scenes is saved independently

3
00:00:11,890 --> 00:00:13,390
and doesn't overwrite each other.

4
00:00:13,420 --> 00:00:20,710
So if I have my gods saved here on the grid on the bridge in this scene I go over into a different scene

5
00:00:21,100 --> 00:00:26,380
and I can go ahead and save in this scene as well so that if I load in this scene I go back to the state

6
00:00:26,890 --> 00:00:28,060
for this scene.

7
00:00:28,060 --> 00:00:33,670
And if I go back to my first scene and load there then I'm back on the bridge with those gods punching

8
00:00:33,670 --> 00:00:34,120
me.

9
00:00:34,120 --> 00:00:39,760
So that's the idea of the next two lectures let's dive in and see what the restrictions are and how

10
00:00:39,760 --> 00:00:47,330
it's done so let's have a look at why we have this multiple scene saving problem.

11
00:00:47,520 --> 00:00:53,930
This is our list of your ideas from scene one and from scene to an imaginary list as it were.

12
00:00:54,000 --> 00:00:59,200
What happens when we decide to save and scene one is that we serialize these new ideas into the save

13
00:00:59,200 --> 00:01:02,840
fall so the save file ends up containing this list of ideas.

14
00:01:03,060 --> 00:01:07,960
In the second scene if we go in we loaded up and we save in there.

15
00:01:08,040 --> 00:01:13,740
Then what's gonna happen is this list comes in and completely overrides our Save File which means that

16
00:01:13,740 --> 00:01:20,760
if we go back to Scene 1 and try to decentralize to it we no longer have any new ideas that match up.

17
00:01:20,760 --> 00:01:27,760
So we try to load for example this first item and we find no state in the save file that matches this

18
00:01:28,010 --> 00:01:34,170
idea which is a problem because now we have lost state save file has no longer remembering things about

19
00:01:34,170 --> 00:01:35,740
Scene 1.

20
00:01:35,790 --> 00:01:36,960
So what do we do.

21
00:01:36,960 --> 00:01:40,720
Well the way that we would solve this is instead to merge scenes.

22
00:01:40,720 --> 00:01:45,540
So I've got two slightly shorter lists of EU ideas hair and color coded for Scene 1 and Scene 2.

23
00:01:45,960 --> 00:01:52,500
Now what happens is we serialized first the first scene and then in the second scene once we serialized

24
00:01:52,500 --> 00:01:54,390
that once we're saving in the second scene.

25
00:01:54,390 --> 00:01:57,480
We get a second list of new ideas in here.

26
00:01:57,480 --> 00:02:03,210
Now the good thing about this is that we emerge these two together we didn't take the save file and

27
00:02:03,210 --> 00:02:03,810
overwrite it.

28
00:02:03,810 --> 00:02:08,410
We took the old contents of the safe file and we added to it and then saved it back in.

29
00:02:08,430 --> 00:02:14,300
So what happens is if we go back to Scene 1 we now have as well as the extra new ideas from Scene 2.

30
00:02:14,310 --> 00:02:19,860
We do have the ideas and the state from scene one so we can DC realize that this is what we're going

31
00:02:19,860 --> 00:02:20,610
to aim for.

32
00:02:20,760 --> 00:02:28,860
But before we head towards this we have got to try and make this a little bit of a nicer class to work

33
00:02:28,860 --> 00:02:29,480
with.

34
00:02:29,520 --> 00:02:31,510
Now there's two ways in which I'm gonna do this.

35
00:02:31,530 --> 00:02:34,200
It's going to be to update these two methods.

36
00:02:34,200 --> 00:02:41,880
First of all so that's one thing and then the other thing is in here we have our restore state takes

37
00:02:41,880 --> 00:02:44,000
an object we do casting in here.

38
00:02:44,160 --> 00:02:45,600
I'm gonna take that.

39
00:02:45,600 --> 00:02:49,050
So we don't have to do any casting in our restore state.

40
00:02:49,050 --> 00:02:54,510
So the first thing is to refactor these methods because at the moment they're quite hard to read.

41
00:02:54,510 --> 00:02:58,660
They're doing a few things and I would like to make this easier.

42
00:02:58,680 --> 00:03:02,920
One of the things they're doing here is they're doing all this file writing stuff.

43
00:03:03,000 --> 00:03:05,010
So here's what I think the end should look like it should be.

44
00:03:05,010 --> 00:03:12,470
Save File and that should it take in the file that we want to save to this one here at the top.

45
00:03:12,470 --> 00:03:17,250
The save file and it should take in the state that we capture.

46
00:03:17,280 --> 00:03:20,450
So it's going to take this capture state here.

47
00:03:20,700 --> 00:03:21,890
That should be the end.

48
00:03:21,930 --> 00:03:26,550
Basically that's what we should aim to have at the end of this I'm going to comment out our current

49
00:03:26,550 --> 00:03:28,480
code and you can use that for reference.

50
00:03:28,590 --> 00:03:31,370
So I'm just gonna go ahead and generate this method.

51
00:03:31,380 --> 00:03:40,480
The Save File method and unrest and cut it and I'm going to pay state just above and capture state here.

52
00:03:40,570 --> 00:03:43,590
So fantastic.

53
00:03:43,600 --> 00:03:47,590
Now how do we want this load to work.

54
00:03:47,590 --> 00:03:48,330
I'm going to comment.

55
00:03:48,350 --> 00:03:56,320
Our current load and basically it should work in a very similar way that but invert it because we've

56
00:03:56,320 --> 00:04:01,780
got our restore state that needs to take the state from the file so we're going to restore state from

57
00:04:01,900 --> 00:04:08,410
a load file method that is going to take our save file has the argument so you can see how they are

58
00:04:08,410 --> 00:04:14,260
similar these two methods but they're kind of flipped around and it really tells us at the top level

59
00:04:14,500 --> 00:04:19,360
how load and save is working how it's a two step process you get the stuff from the file you restore

60
00:04:19,630 --> 00:04:26,590
the state so we're going to implement this load state as well by generating this method and that means

61
00:04:26,620 --> 00:04:28,960
it's ready for you to do your challenge.

62
00:04:28,960 --> 00:04:34,840
So I would like you to implement the save file and load file methods take that attack commented code

63
00:04:34,870 --> 00:04:40,750
and use it and then you're going to look at the return values and save file Load File and the arguments

64
00:04:40,750 --> 00:04:46,270
you've got coming in to make sure that you provide the right stuff and then make it work like it was

65
00:04:46,270 --> 00:04:46,840
doing before.

66
00:04:46,840 --> 00:04:49,630
So pause the video and have a go at completing this refactor.

67
00:04:50,710 --> 00:04:51,160
Okay.

68
00:04:51,160 --> 00:04:51,730
Welcome back.

69
00:04:51,820 --> 00:04:53,340
So let's have a look.

70
00:04:53,380 --> 00:04:55,450
First of all this Load File business.

71
00:04:55,450 --> 00:05:02,140
I'm gonna take all this comments in code and put it in to our Load File method and I'm going to um comments

72
00:05:02,170 --> 00:05:03,880
what we've got in here and see what's working.

73
00:05:04,210 --> 00:05:07,060
So we've got our save file coming in that works fine.

74
00:05:07,060 --> 00:05:11,710
The only thing we've not got working fine is it's not returning anything out of Load File we want it

75
00:05:11,710 --> 00:05:12,800
to return the state.

76
00:05:12,910 --> 00:05:19,480
So instead of doing restore state here which is now happening out at this load function level we want

77
00:05:19,480 --> 00:05:24,610
to just return the stuff that was D serialized from the stream.

78
00:05:24,610 --> 00:05:28,680
So if we go ahead and just return what's de serialize from the stream that should do the trick.

79
00:05:28,690 --> 00:05:29,770
Fantastic.

80
00:05:29,770 --> 00:05:31,380
Now the save file very similar.

81
00:05:31,380 --> 00:05:37,980
I'm just going to take this commented out code and I am going to stick it in the line.

82
00:05:37,990 --> 00:05:45,130
They file for me in the save file method and I'm going to uncommon the code and see what the matter

83
00:05:45,130 --> 00:05:45,400
is.

84
00:05:45,400 --> 00:05:49,450
So what's going on at the moment is we've got this object called V.

85
00:05:49,450 --> 00:05:50,710
Let's give this a better name.

86
00:05:50,710 --> 00:05:54,130
I'm going to call this the state instead.

87
00:05:54,280 --> 00:05:57,520
And what do we want to do with the state we're currently not using it.

88
00:05:57,580 --> 00:06:00,040
We don't have to return anything out save file so that's fine.

89
00:06:00,310 --> 00:06:04,420
But we're calling capture state in here which we don't need to do because the state has already been

90
00:06:04,420 --> 00:06:09,460
captured into this object that is being passed into safe farm method.

91
00:06:09,460 --> 00:06:14,080
So I can just replace this capture state with the state that we've already captured and that makes it

92
00:06:14,080 --> 00:06:17,570
nice and readable nice and reusable too.

93
00:06:17,590 --> 00:06:24,910
Now one thing I would like to do to make this just a little bit better even is when we've got this state

94
00:06:25,000 --> 00:06:30,340
we're currently passing the state around as an object and basically the most generic type that we could

95
00:06:30,340 --> 00:06:34,670
have and then we're having to cast that in the restore state.

96
00:06:34,690 --> 00:06:40,270
Now what I want to do is actually be more honest about what our state is at a higher level so that when

97
00:06:40,270 --> 00:06:44,110
we are trying to load from a file that's the type we want to return.

98
00:06:44,110 --> 00:06:49,980
So I'm going to change the return type of load file to this dictionary String object type instead.

99
00:06:50,380 --> 00:06:56,440
And I'm also going to change the type that we take into restore state to the dictionary String object.

100
00:06:56,440 --> 00:07:03,520
So that now I don't have to cast in restore state and I can just use this state dictionary directly

101
00:07:03,580 --> 00:07:04,150
like so.

102
00:07:04,630 --> 00:07:06,030
And that should be good.

103
00:07:06,070 --> 00:07:12,340
Now the other thing the other problem we've got now is that load file is trying to return this thing

104
00:07:12,340 --> 00:07:17,190
that is decentralised and it's not sure whether that's a dictionary or not.

105
00:07:17,230 --> 00:07:18,720
So that's what we've got to do here.

106
00:07:18,730 --> 00:07:23,950
We've got a cast to a dictionary and this is a quite long time so I'm always going to copy and paste

107
00:07:23,950 --> 00:07:31,480
it and we're just going to cast to that dictionary object of going from string to object and let's see

108
00:07:31,540 --> 00:07:33,400
if we can now understand what this is doing.

109
00:07:33,400 --> 00:07:40,150
So if I have a look at the load system what's going on is a load file we are loading out a dictionary

110
00:07:40,300 --> 00:07:48,430
from string to object type and then that state is being used to restore the state which also as it happens

111
00:07:48,460 --> 00:07:52,660
takes a dictionary from string to object and that works great.

112
00:07:52,660 --> 00:07:55,800
Now we could also do that for consistency sake.

113
00:07:55,810 --> 00:08:02,410
Now with our capture state and save file so let's just be really consistent here that the save file

114
00:08:02,470 --> 00:08:04,520
is going to take in.

115
00:08:04,680 --> 00:08:09,370
It could still take in an object but we're just going to make it more specific that it's going to take

116
00:08:09,370 --> 00:08:14,590
in a dictionary from string to object in fact actually let's just leave it as object.

117
00:08:14,600 --> 00:08:19,220
It could save whatever it likes it doesn't matter at the save file level.

118
00:08:19,390 --> 00:08:27,160
But for our capture state we're going to turn that round so that the object it returns has to be a dictionary

119
00:08:27,160 --> 00:08:31,510
from string to object type which is actually already what it returns.

120
00:08:31,540 --> 00:08:39,430
So that was quite easy to do so let's just hop back over to the Unity Editor and check that this is

121
00:08:39,490 --> 00:08:46,690
working as it was before if I go ahead move hit save move away and hit load bam we go back to where

122
00:08:46,690 --> 00:08:49,650
we were before so we haven't changed any of the functionality now.

123
00:08:49,690 --> 00:08:55,420
I'll see you in part two where we'll actually do the changing so we're merging these two save files.
