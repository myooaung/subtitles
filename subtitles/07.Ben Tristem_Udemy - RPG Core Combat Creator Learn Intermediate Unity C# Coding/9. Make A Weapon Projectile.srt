1
00:00:04,390 --> 00:00:09,280
Hello again in this video and making a projectile fly at the player which is using a debug mechanism

2
00:00:09,280 --> 00:00:14,410
of just dragging in and saying the target is the player and also just dropping a projectile in the world

3
00:00:14,410 --> 00:00:17,290
we're not spawning it from the bow yet we'll do then in upcoming videos.

4
00:00:17,290 --> 00:00:22,420
But now we can have an arrow bam shoot at the player and then do some weird wiggly things because it's

5
00:00:22,420 --> 00:00:26,070
not not destroying itself yet and not decreasing health.

6
00:00:26,080 --> 00:00:28,840
But this will be the start of our Arrow Functionality.

7
00:00:28,840 --> 00:00:30,430
Let's jump in to get started.

8
00:00:30,430 --> 00:00:34,000
Let's start first by grabbing our arrow asset that we can use for our project.

9
00:00:34,020 --> 00:00:39,110
I've given you this as a download for this lecture grab simple arrow drag it on in.

10
00:00:39,220 --> 00:00:42,640
That should be going to game dev TV assets import.

11
00:00:42,730 --> 00:00:46,490
We can see simple arrow piece there get a simple arrow head on.

12
00:00:46,510 --> 00:00:47,890
Doing well thanks Rick.

13
00:00:47,890 --> 00:00:50,080
Okay first sign of insanity talking to yourself.

14
00:00:50,080 --> 00:00:54,100
But we have our arrow that we can use for our creating our game object.

15
00:00:54,100 --> 00:00:58,990
So I'm going to jump over into game scroll down a little bit here make myself a new folder.

16
00:00:59,020 --> 00:01:03,090
So create folder for Jack tiles.

17
00:01:03,250 --> 00:01:09,700
Now scene I'm going to make a new game object create empty we will call this arrow proof Jack dial.

18
00:01:09,760 --> 00:01:16,750
Excellent dragged that down to make it a prefab into my projectiles folder open up the arrow projectile

19
00:01:17,020 --> 00:01:24,130
and let's see where is the arrow we just brought in this the prefab the simple arrow prefab drag that

20
00:01:24,130 --> 00:01:29,740
under arrow projectile and we have ourselves a simple arrow now it's pointing up in the air I think

21
00:01:29,740 --> 00:01:30,240
I want out.

22
00:01:30,250 --> 00:01:35,680
Well first of all let's learn our lesson by resetting the transform and I can see my senior fly zoom

23
00:01:35,680 --> 00:01:40,570
in side note I'm going to change my camera in a minute when we get back into the scene but I want to

24
00:01:40,570 --> 00:01:46,660
have my arrows starting lying down so do it at a minus 90 I think there were guys so just generally

25
00:01:46,900 --> 00:01:52,810
laying flat in the scene Okay we have our projectile at scroll down to our scripts folder find combat

26
00:01:52,810 --> 00:02:01,060
right click Create a new C sharp script I'll call this projectile excellent and then click on Arrow

27
00:02:01,090 --> 00:02:07,090
projectile again drag over our projectile script so that since there is a component on the prefab good

28
00:02:07,090 --> 00:02:13,780
looking pretty sharp now as the arrow in our scene welcome arrow I mentioned camera a second ago I haven't

29
00:02:13,780 --> 00:02:18,760
been out to put my finger on it my friends but finally I have it's so hard to show you what's going

30
00:02:18,760 --> 00:02:23,680
on with my character because we're so zoomed out so it might not be best when we finally play the game

31
00:02:23,710 --> 00:02:29,380
but I'm going to turn my camera distance down to say it live and maybe even ten okay so that when I'm

32
00:02:29,560 --> 00:02:33,550
demonstrating to you what's going on in the build and in the game while we're teaching you can actually

33
00:02:33,550 --> 00:02:39,100
see it we don't have to squint at our screens to see that there is an arrow there after all.

34
00:02:39,100 --> 00:02:41,650
I guess so how we gonna go about making our arrow move.

35
00:02:41,650 --> 00:02:46,900
Well you might know the answer already but I'll just recap First of all we have two simple steps and

36
00:02:46,900 --> 00:02:52,150
we need to do on each frame an update the first step is to make the projectile look at the target so

37
00:02:52,150 --> 00:02:57,220
it's heading in the correct direction and then we move it in the forward direction so if its forward

38
00:02:57,220 --> 00:03:02,110
is this way because it's pointing at the target in this case the player is going to move in that particular

39
00:03:02,110 --> 00:03:07,320
direction each frame and this is going to be the structure of the challenge I have for you now that

40
00:03:07,360 --> 00:03:13,300
we have our projectile scripts sitting on our projectile I would like for you to move the arrow projectile

41
00:03:14,050 --> 00:03:19,600
so use transform don't look at to look at the target who is the target well you can make the target

42
00:03:19,630 --> 00:03:24,760
whoever you like I suggest you make it the player for the moment and then to use transform dot translate

43
00:03:24,850 --> 00:03:30,400
to move to the target and remember a couple of things here don't forget to use time not delta time so

44
00:03:30,400 --> 00:03:35,740
that we have frame rate independent and to expose a variable so that we can tune the speed mostly for

45
00:03:35,740 --> 00:03:40,780
our play testing so we can have the arrow going super slowly so that we can see that it actually works.

46
00:03:40,780 --> 00:03:41,920
So that's your challenge.

47
00:03:41,920 --> 00:03:46,880
Give it your best shot and I'll see you back here when you're done okay over into our projectile script.

48
00:03:46,900 --> 00:03:52,630
Fire that up have a look at what's going on here I think I'm going to get rid of stocks I don't need

49
00:03:52,630 --> 00:03:59,380
that but we will keep update and expose a couple of variables top serialize field and this I'm going

50
00:03:59,380 --> 00:04:05,290
to make a target so the target needs a trance form and I'll just call this target we've done this a

51
00:04:05,290 --> 00:04:10,660
few times read our code already know initialize that at now just so we know that there is none at the

52
00:04:10,660 --> 00:04:16,120
start and the compiler doesn't get too cranky with us if we forget to put something in then we need

53
00:04:16,150 --> 00:04:22,480
a second serialized field this will be for our speed of the projectile I'll make this a float and we'll

54
00:04:22,480 --> 00:04:29,170
call it speed and we'll initialize that one now with an update we are going to do a couple of things

55
00:04:29,170 --> 00:04:33,700
in here first of all I'm just gonna protect against null so that if we don't have a target we don't

56
00:04:33,700 --> 00:04:42,060
get ourselves into a situation if Target equals equals no we simply return okay protect against now.

57
00:04:42,190 --> 00:04:50,380
Now we want to say transform dot look at as I showed you in the challenge and we look at the target

58
00:04:50,440 --> 00:04:59,470
dot position and second we are going to use the second thing I told you transform dot trends late and

59
00:04:59,470 --> 00:05:04,120
here I'm going to use vector three dot forward and if you're not familiar with vector three dot forward

60
00:05:04,120 --> 00:05:09,700
you can have a look at the Unity documentation for that essentially manipulate a game object's position

61
00:05:09,730 --> 00:05:16,060
on the z axis of the transform in world space and move it forward on the z axis is the description that

62
00:05:16,060 --> 00:05:19,810
we've got here for vector three forward and then I'm going to multiply that.

63
00:05:19,810 --> 00:05:28,220
Remember this is per frame by speed and then multiply it per frame by time dot delta time okay.

64
00:05:28,270 --> 00:05:31,630
How do you go with that did that challenge make sense maybe the vector three forward threw you a little

65
00:05:31,630 --> 00:05:35,030
bit or maybe you did it in a slightly different way which is totally cool.

66
00:05:35,050 --> 00:05:40,750
One of the important things is to get the job done and not get hung up on doing it exactly the way Sam

67
00:05:40,750 --> 00:05:41,620
and I do.

68
00:05:41,740 --> 00:05:43,840
If we do it slightly differently that is fine.

69
00:05:43,840 --> 00:05:44,680
So let's see if this works.

70
00:05:44,680 --> 00:05:50,300
Now jump back over into our game we've got our arrow projectile that I've dropped into the world.

71
00:05:50,500 --> 00:05:51,850
It currently has no target.

72
00:05:51,850 --> 00:05:58,190
So we've set the target to be player boink and speed of one should be nice and slow my camera zoomed

73
00:05:58,190 --> 00:06:03,680
in so you should see me as I run around let's see if it actually chases me okay it's going backwards

74
00:06:03,680 --> 00:06:04,260
for a start.

75
00:06:04,260 --> 00:06:08,990
So that's something which is noteworthy we rotated it the wrong way but it's moving.

76
00:06:08,990 --> 00:06:15,190
Let's go back into my prefab that I thought I so cleverly rotating but I was not very cleverly rotating

77
00:06:15,200 --> 00:06:18,000
was I arrow projectile.

78
00:06:18,170 --> 00:06:24,650
You can see from our vector three forward it was saying what in terms of the blue.

79
00:06:24,650 --> 00:06:29,690
Let's see what in terms of the blue it's saying the blue axis of transforming world space so basically

80
00:06:29,690 --> 00:06:30,850
we just got that back to front.

81
00:06:30,860 --> 00:06:34,220
I had it correct on the right axis but pointing the wrong way.

82
00:06:34,220 --> 00:06:35,830
So it's click on our simple arrow.

83
00:06:35,920 --> 00:06:39,650
So instead of minus 90 we want to do that well probably plus 90.

84
00:06:39,650 --> 00:06:40,020
Okay.

85
00:06:40,040 --> 00:06:41,180
See how that goes.

86
00:06:41,180 --> 00:06:47,330
Save this up back over into our game click on play we'll see which way our arrows pointing this time

87
00:06:48,750 --> 00:06:49,160
okay.

88
00:06:49,160 --> 00:06:52,120
It looks like it's pointing towards us success.

89
00:06:52,120 --> 00:06:57,460
Once it's shot it's gonna go very fast out at us it's gonna look I think pretty good.

90
00:06:57,460 --> 00:07:03,850
Just grab the arrow projectile move it away a little bit over there see what happens if we change the

91
00:07:03,850 --> 00:07:08,710
speed to say we'll make it eight and then click on play just to make sure it's behaving like an arrow

92
00:07:08,710 --> 00:07:15,640
should and bounce yes it does it shoots straight at us now it shooting straight at our feet Why is that.

93
00:07:15,640 --> 00:07:21,850
Well if you click on the player click on the player and see that the players access here it's point

94
00:07:21,850 --> 00:07:24,460
of interest it's pivot is at the feet.

95
00:07:24,490 --> 00:07:30,190
So that is the transform information that's been given to our arrow it's looking at our feet.

96
00:07:30,400 --> 00:07:36,050
So let's resolve that by saying we want you to look at where probably in the middle of the player you

97
00:07:36,050 --> 00:07:37,000
know right in the chest.

98
00:07:37,000 --> 00:07:39,940
So it's good kind of what's that critical mass.

99
00:07:39,940 --> 00:07:42,640
No it's solid mass Central Mass Central Mass.

100
00:07:42,640 --> 00:07:44,060
I think that's the terminology.

101
00:07:44,060 --> 00:07:46,010
So I want to aim for the guts basically.

102
00:07:46,040 --> 00:07:47,270
So how are we going to do that.

103
00:07:47,330 --> 00:07:52,750
Jump back over into our script here and so you know update instead of target position let's return.

104
00:07:52,750 --> 00:07:56,290
We need to get the position we're going for and get the location.

105
00:07:56,290 --> 00:08:06,070
So I'll create a new method called get a location jump down below and create this would be private.

106
00:08:06,070 --> 00:08:11,890
Now we need to return a vector three because we need a particular point in space that we're aiming at.

107
00:08:11,890 --> 00:08:17,530
So to be evicted three and this will be called Get aim location.

108
00:08:17,530 --> 00:08:18,910
What is in here.

109
00:08:18,910 --> 00:08:21,130
First of all we want to use what.

110
00:08:21,130 --> 00:08:27,790
To know how to attack a particular entity the player for example so the player I've clicked on here

111
00:08:27,790 --> 00:08:32,350
already has a capsule collider and we know the capsule collider is most likely going to be the same

112
00:08:32,350 --> 00:08:35,080
height as the player or the enemy or whatever entity it's on.

113
00:08:35,080 --> 00:08:40,330
So we use the capsule collider we'll make ourselves a new variable which be a time capsule collider

114
00:08:40,630 --> 00:08:45,500
that we'll call target track it target Capshaw.

115
00:08:45,790 --> 00:08:51,520
I think that's built right and that's going to equal target don't get component which component we're

116
00:08:51,520 --> 00:08:52,150
looking for.

117
00:08:52,150 --> 00:08:55,010
It's the capsule Collider.

118
00:08:55,240 --> 00:09:01,570
And then once we have that capsule collider we need to return our vector 3 so let's return the target

119
00:09:01,990 --> 00:09:04,990
dot position and we're going to add to this.

120
00:09:05,680 --> 00:09:07,240
We're going to add to this the high.

121
00:09:07,270 --> 00:09:12,400
But I'm going to halve the height so be the height of the capsule collider divided by two so we get

122
00:09:12,400 --> 00:09:13,280
in the middle here.

123
00:09:13,450 --> 00:09:19,600
I easily have shorthand again use vector 3D Dot up and if you wanna know what vector three dot up is

124
00:09:19,600 --> 00:09:20,960
I've given you a link to this as well.

125
00:09:21,040 --> 00:09:26,950
It's just a shorthand way of saying vector 3 0 which is on the x 1 which is on the Y and 0 which is

126
00:09:26,950 --> 00:09:27,430
on the Z.

127
00:09:27,430 --> 00:09:32,320
So basically it's giving us an upwards of 1 a y value of 1.

128
00:09:32,320 --> 00:09:39,640
We write it vector three up in shorthand and we multiply this by the target capsule dot height divided

129
00:09:39,640 --> 00:09:40,600
by two.

130
00:09:40,620 --> 00:09:41,860
So we want to get it roughly in the middle.

131
00:09:41,860 --> 00:09:44,850
You can make a little bit higher a little bit lower if you wish.

132
00:09:44,860 --> 00:09:48,100
So this is adding just on the y axis.

133
00:09:48,100 --> 00:09:51,270
This is why we're placing a vector three so it's adding on the y axis.

134
00:09:51,370 --> 00:09:57,770
We're not adding one we're adding whatever 1 times the capsule height is divided by two.

135
00:09:57,790 --> 00:10:01,900
So let's just quickly look at this I know some people be asking I'm not exactly sure what's going on

136
00:10:01,900 --> 00:10:02,350
here.

137
00:10:02,440 --> 00:10:05,350
So we click on the player we see the height is one point seven nine.

138
00:10:05,350 --> 00:10:10,750
We're getting half of that value because we're dividing it by two and we're adding that to the to the

139
00:10:10,750 --> 00:10:18,130
y value of the targets vector three that we're interested in using as our aim location.

140
00:10:18,220 --> 00:10:23,020
And lastly to make sure we don't have any issues if the target doesn't have a capsule collider let's

141
00:10:23,020 --> 00:10:24,070
protect against that.

142
00:10:24,070 --> 00:10:28,880
If targets capsule equals equals.

143
00:10:28,910 --> 00:10:34,020
Now then we'll just return the position because we might not know the capsule Collider.

144
00:10:34,020 --> 00:10:40,230
We don't want that to break the whole projectile or just return the target dock position as we did before.

145
00:10:40,260 --> 00:10:43,840
If it does have a capsule collider then we're gonna return target opposition.

146
00:10:43,890 --> 00:10:49,430
Plus this offset to increase it based upon the capsule colliders height.

147
00:10:49,440 --> 00:10:54,330
Right now it's safe that jump back over into Unity have projectile here I'm just gonna turn the speed

148
00:10:54,330 --> 00:10:57,510
of the projectile down again so we can see it in slow motion.

149
00:10:57,630 --> 00:11:00,570
Make sure we know exactly what's going for it down to 3.

150
00:11:00,630 --> 00:11:05,790
Click on play and we'll see where the arrow brb.

151
00:11:05,980 --> 00:11:07,550
Bam right in the guts.

152
00:11:07,570 --> 00:11:07,890
Okay.

153
00:11:07,900 --> 00:11:08,650
Pretty happy with that.

154
00:11:08,650 --> 00:11:12,940
It's not really intended to be a homing missile but you could make it that if that was your desire.

155
00:11:12,940 --> 00:11:18,430
But we have a projectile that we can give to our archers so that I can shoot at us which will be doing

156
00:11:18,430 --> 00:11:23,620
an upcoming videos actually launching our projectile blink so we can shoot at each other get great work

157
00:11:23,650 --> 00:11:24,670
and I'll see you again soon.
