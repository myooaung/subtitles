1
00:00:04,180 --> 00:00:05,140
Hello again in this video.

2
00:00:05,140 --> 00:00:08,590
We're going to fix an issue that I mentioned previously that I think is a bit broken when we kill an

3
00:00:08,590 --> 00:00:09,300
enemy.

4
00:00:09,310 --> 00:00:13,840
You can see that is capsule colliders sticking around if I get in a position where that capsule collider

5
00:00:13,840 --> 00:00:18,970
is in front of another enemy if I'm clicking there I can actually click through to get to the other

6
00:00:18,970 --> 00:00:19,600
enemy.

7
00:00:19,600 --> 00:00:22,840
So that's something that's going to cause a bunch of issues and frustration for the player when they're

8
00:00:22,840 --> 00:00:24,700
getting there saying why can't I click on a guy.

9
00:00:24,700 --> 00:00:25,980
So let's fix that.

10
00:00:26,080 --> 00:00:31,090
And what I'm going to do is give this to as a big advanced challenge right from the get go.

11
00:00:31,090 --> 00:00:34,690
So our goal is to ensure recast is not blocked by the dead enemy.

12
00:00:34,690 --> 00:00:41,080
And here are some hints in terms of what you can do so within the fight I don't see a script create

13
00:00:41,110 --> 00:00:48,500
a can attack method that returns true if the target is valid and the target is not dead.

14
00:00:48,530 --> 00:00:53,860
So that's the can attack that we want to do before we attack we want to say can we attack and then remember

15
00:00:53,860 --> 00:00:58,630
that the health component is the place that knows if something is dead when we're looking here and saying

16
00:00:58,900 --> 00:00:59,980
is the target dead or not.

17
00:00:59,980 --> 00:01:03,800
Then there is a way for us to return whether the target is dead or not.

18
00:01:03,800 --> 00:01:07,210
And that's in the health component and in the player controller script.

19
00:01:07,210 --> 00:01:10,920
We need to check if can attack returns falls.

20
00:01:10,990 --> 00:01:13,040
Then we continue in our cast.

21
00:01:13,040 --> 00:01:14,860
Hit for each loop.

22
00:01:14,920 --> 00:01:15,150
OK.

23
00:01:15,160 --> 00:01:19,130
So there's some explanation if that doesn't quite make sense or it seems to advance.

24
00:01:19,150 --> 00:01:20,490
No worries we'll go through it together.

25
00:01:20,500 --> 00:01:22,140
But give it your best shot.

26
00:01:22,150 --> 00:01:24,430
Again it's another one of those logic ones get in there.

27
00:01:24,430 --> 00:01:25,660
Have a look at your code.

28
00:01:25,660 --> 00:01:27,280
This is the end of the section.

29
00:01:27,280 --> 00:01:32,710
So this is a good chance for you to really show that you understand your code and how it's working at

30
00:01:32,710 --> 00:01:33,340
the moment.

31
00:01:33,340 --> 00:01:37,540
So take that on I'll see you back here in a moment OK.

32
00:01:37,570 --> 00:01:43,570
So I'm going to open up Visual Studio code I'm looking in the fighter dot CSI and play a controller.

33
00:01:43,570 --> 00:01:46,130
They'll be my two scripts for this video.

34
00:01:46,220 --> 00:01:47,370
Physical in fighter.

35
00:01:47,400 --> 00:01:48,280
I'm going to create.

36
00:01:48,280 --> 00:01:50,140
Down down just above.

37
00:01:50,140 --> 00:01:50,920
Attack on a.

38
00:01:50,920 --> 00:01:52,890
Create a new method which will be public.

39
00:01:52,900 --> 00:02:00,480
And I want to return a ball and we'll call it can attack and in here we are passing in combat.

40
00:02:00,480 --> 00:02:01,460
Target.

41
00:02:01,680 --> 00:02:06,670
Combat target and we'll call this combat target.

42
00:02:06,750 --> 00:02:07,050
Combat.

43
00:02:07,050 --> 00:02:08,130
Target combat target.

44
00:02:08,750 --> 00:02:13,380
And as I mentioned this is something we'll be calling in play a controller which we'll get to in a moment.

45
00:02:13,380 --> 00:02:15,990
So now curly braces here.

46
00:02:15,990 --> 00:02:17,970
First of all I want to get the health component.

47
00:02:17,970 --> 00:02:23,710
I'm going to store this as a variable so health target to to test.

48
00:02:23,720 --> 00:02:27,920
So I've type health and we'll call this target to test.

49
00:02:27,950 --> 00:02:29,630
It's going to equal combat.

50
00:02:29,630 --> 00:02:30,510
Target.

51
00:02:30,630 --> 00:02:36,430
Get component what component we're getting here while we're getting the health component parentheses

52
00:02:36,430 --> 00:02:37,090
semicolon.

53
00:02:37,120 --> 00:02:37,380
Okay.

54
00:02:37,390 --> 00:02:40,150
Now that we've got the health component what can we do.

55
00:02:40,150 --> 00:02:42,580
Well this is where we're going to return.

56
00:02:42,640 --> 00:02:45,010
We need to return true or false what are we on return here.

57
00:02:45,010 --> 00:02:53,850
Well we will return target to test is not equal to now.

58
00:02:53,970 --> 00:02:59,010
Sorry if targeted test is not now and the target is not dead.

59
00:02:59,010 --> 00:03:02,920
So we'll say not in here first of all not exclamation mark.

60
00:03:03,030 --> 00:03:08,330
Target to test don't.

61
00:03:08,340 --> 00:03:14,490
Now what's the method that lets us return whether something's dead or not he's dead.

62
00:03:14,490 --> 00:03:17,430
Parentheses and semicolon.

63
00:03:17,430 --> 00:03:23,990
So save that and head over into our player control of scripts and we're looking at the behavior within

64
00:03:23,990 --> 00:03:24,900
our for each loop.

65
00:03:24,910 --> 00:03:28,260
Yes this is our ray cost hit and we're saying cycle through.

66
00:03:28,260 --> 00:03:33,030
So with an hour for each go through all of the things that we're hitting with our ray cost and when

67
00:03:33,030 --> 00:03:38,040
I think I'll do is instead of checking if the target is null here I'm going to take if the target is

68
00:03:38,040 --> 00:03:40,600
noticed back over to our fighter script when check it.

69
00:03:40,620 --> 00:03:42,150
The target is null.

70
00:03:42,210 --> 00:03:44,920
Within 10 attack I think that's a better place for it.

71
00:03:44,920 --> 00:03:49,560
Second delete if Target is no continue and create.

72
00:03:49,560 --> 00:03:53,880
If we want to say if we can't attack.

73
00:03:53,910 --> 00:03:56,550
So if not sorry.

74
00:03:56,590 --> 00:04:00,200
Exclamation mark get component fighter.

75
00:04:00,250 --> 00:04:06,190
Because this is within our fighter script that we've just fought a class we've just created this parentheses

76
00:04:06,220 --> 00:04:14,770
dot can attack and we're interested in target which is our combat target just in the line above.

77
00:04:14,770 --> 00:04:19,950
So if not so in other words if we can't attack then what do we do.

78
00:04:19,960 --> 00:04:26,290
Well Kelly braces we say continue continues one of those confusing things takes me a while sometimes.

79
00:04:26,410 --> 00:04:31,480
Continue doesn't mean continue on down the page continue means continue within our for each loop so

80
00:04:31,480 --> 00:04:32,530
go to the next hit.

81
00:04:32,560 --> 00:04:40,270
So now though as if the can attack is returning false then go on to the next thing and I mentioned I

82
00:04:40,270 --> 00:04:42,050
was taking out my null check.

83
00:04:42,120 --> 00:04:47,920
I'm going to go back over my fighter script within here within can attack the very first thing I'm doing

84
00:04:47,920 --> 00:04:56,920
here is just add an if statement if combat target that's its combat target that's being passed in equals

85
00:04:56,950 --> 00:04:57,850
equals no.

86
00:04:58,680 --> 00:05:02,910
So if it's now then return false.

87
00:05:04,450 --> 00:05:09,420
And is pretty in couple of spaces in here because that's my preference for my curly braces.

88
00:05:09,580 --> 00:05:11,200
So now play a controller we're saying.

89
00:05:11,230 --> 00:05:15,880
If not so in other words if it's returning false for can attack then we continue.

90
00:05:15,880 --> 00:05:18,140
In other words don't try to do anything with it.

91
00:05:18,220 --> 00:05:19,520
What are we doing in our.

92
00:05:19,520 --> 00:05:24,030
We're saying if the combat target is no then return false.

93
00:05:24,030 --> 00:05:28,690
If it's the terrain or something else we've clicked on and then we're looking at the health component

94
00:05:28,720 --> 00:05:30,970
and within that we're saying let us know.

95
00:05:30,970 --> 00:05:33,510
Is this character if we've clicked on a character.

96
00:05:33,640 --> 00:05:34,550
Is it dead.

97
00:05:34,600 --> 00:05:39,910
If it's dead return false returning false in play a controller is going to continue through our for

98
00:05:39,910 --> 00:05:46,120
each loop and not go into the other actions that we could take in terms of attacking that particular

99
00:05:46,120 --> 00:05:46,740
enemy.

100
00:05:48,020 --> 00:05:53,060
Okay so before we celebrate too much let's save all these up and jump back over into unity.

101
00:05:53,060 --> 00:05:56,780
Make sure that we're not getting the issue that we had before might just reposition that guy a little

102
00:05:56,780 --> 00:06:05,110
bit because he wasn't perfect in his demonstration before put you just there get rid of the game give

103
00:06:05,110 --> 00:06:09,860
him a couple of smacks in the midriff and then can I still click.

104
00:06:09,870 --> 00:06:16,000
You can see that I clicked just in the bit that the collider was in front of and he's hitting cool great.

105
00:06:16,010 --> 00:06:17,900
No problems at all.

106
00:06:18,280 --> 00:06:18,730
OK.

107
00:06:18,740 --> 00:06:22,790
That's fixed one more thing that I thought was either broken or distracting when nearly done with this

108
00:06:22,790 --> 00:06:23,360
section.

109
00:06:23,380 --> 00:06:25,240
I will see you in the next video.
