WEBVTT
1
00:00:04.760 --> 00:00:05.740
Hello and welcome.

2
00:00:05.750 --> 00:00:11.930
This lecture is about getting to the first stage of our fighting system fighting input where if we let

3
00:00:11.930 --> 00:00:18.070
me clear the log if we click on an enemy capsule then it prints out a love message and this log message

4
00:00:18.070 --> 00:00:22.720
is actually coming from a fighter component on the player.

5
00:00:22.730 --> 00:00:29.350
So that's the starting point where we're going to actually start and a procedure to attack the there

6
00:00:29.420 --> 00:00:33.440
component that the enemy here from and a player.

7
00:00:33.440 --> 00:00:37.670
This is the starting point getting that input to the fighter component so let's dive in and see how

8
00:00:37.670 --> 00:00:38.390
it's done.

9
00:00:39.450 --> 00:00:42.920
So at the moment we've got an enemy but we have no way of attacking it.

10
00:00:43.500 --> 00:00:50.830
So what we want to do is introduce both a component for combat for us to be able to fight.

11
00:00:51.150 --> 00:00:56.310
And for us to be able to activate that component by clicking on the enemy.

12
00:00:56.490 --> 00:01:02.910
So the logical place for a component for us to do this same fighting is going to be on the player itself.

13
00:01:03.240 --> 00:01:05.010
And we're going to need a new script for that.

14
00:01:05.100 --> 00:01:09.030
So I'm going to go ahead and create a new file a new folder first of all.

15
00:01:09.030 --> 00:01:16.490
So let's go into the scripts and create a folder there and it's going to be called combat and under

16
00:01:16.490 --> 00:01:24.290
that I am going to create a C sharp script called fighter dot c s and in there I am going to create

17
00:01:24.320 --> 00:01:26.120
a model behavior.

18
00:01:26.120 --> 00:01:31.660
I'm going to use the snippet in V.S. code and I'm going to stick that in a namespace.

19
00:01:31.670 --> 00:01:37.920
Now we started this good practice of using namespace as I'm going to create a namespace for and we use

20
00:01:37.920 --> 00:01:41.820
the snippet RPG dot combat.

21
00:01:41.870 --> 00:01:43.430
So that's created a new name.

22
00:01:43.430 --> 00:01:47.830
Basically we have it before and I can put my fighter script in there.

23
00:01:48.140 --> 00:01:49.930
Once our fighter going to do.

24
00:01:49.940 --> 00:01:51.910
Well it's public API at the moment.

25
00:01:52.340 --> 00:01:53.800
Let's just keep it simple.

26
00:01:53.900 --> 00:02:01.070
It's going to attack something it's going to take nothing return void and it's going to attack.

27
00:02:01.070 --> 00:02:07.760
And at the moment because we don't have anything that it can actually do I'm going to just print something

28
00:02:07.760 --> 00:02:14.750
out and be like Hey Ya take that you short squat peasant something like that.

29
00:02:15.260 --> 00:02:20.930
So there's going be obviously gonna be proper functionality in here that involves moving to the target

30
00:02:21.350 --> 00:02:25.540
and then actually playing attack animations doing damage all that stuff.

31
00:02:25.550 --> 00:02:28.950
That's where it's going to reside in this fighter class.

32
00:02:29.330 --> 00:02:29.900
So.

33
00:02:29.920 --> 00:02:32.740
Well let's go ahead and add this onto the player while we're at it.

34
00:02:32.750 --> 00:02:38.710
So I'll go into the play a prefab and add a component called fighter.

35
00:02:38.890 --> 00:02:43.660
So now we've got a fighter a mover and a player controller all on this player.

36
00:02:43.780 --> 00:02:50.970
So that seems to be making some what some sense now we have to enable it to actually click on this object.

37
00:02:51.010 --> 00:02:54.130
How is it going to know that this is an object that we can attack.

38
00:02:54.160 --> 00:02:57.670
Well for that we're going to create a another script.

39
00:02:57.670 --> 00:03:04.810
Also in combat also in the combat namespace because it's all to do with that combat behavior and it's

40
00:03:04.810 --> 00:03:10.570
going to be what are we going to call it the combat target perhaps

41
00:03:13.340 --> 00:03:14.090
for now.

42
00:03:14.270 --> 00:03:18.170
Because the important thing is that it just allows us to target things for combat.

43
00:03:18.710 --> 00:03:25.960
So I'm going to create a model behavior again and I'm going to stick this in a namespace called RPG

44
00:03:25.960 --> 00:03:26.700
or combat.

45
00:03:26.750 --> 00:03:31.290
See this time it's also completing it because it's not the first time I've created this namespace and

46
00:03:31.290 --> 00:03:35.370
then I'll put the combat target in there which at the moment is just going to have no functionality

47
00:03:35.370 --> 00:03:43.050
it's full it's going to serve as a place holder for us to to know that this thing this capsule this

48
00:03:43.110 --> 00:03:45.540
enemy capsule is something we can attack.

49
00:03:45.540 --> 00:03:46.900
So I'm going to add the component.

50
00:03:46.920 --> 00:03:52.950
It's going to be the combat target again and again I'm going to apply that to the enemy prefab as well

51
00:03:52.950 --> 00:03:54.500
so added component applied to prefab.

52
00:03:55.380 --> 00:03:59.940
Obviously you could open up the prefab Ed and do that directly that way as well.

53
00:04:00.640 --> 00:04:01.040
OK.

54
00:04:01.050 --> 00:04:05.010
So enough of that we won't actually get on with doing something.

55
00:04:05.220 --> 00:04:11.730
This player controller needs to call to that fighter method in order for us to actually start that whole

56
00:04:11.730 --> 00:04:14.040
process of attacking the enemy.

57
00:04:14.190 --> 00:04:14.820
How we gonna do that.

58
00:04:14.850 --> 00:04:22.250
Well at the moment the play controller is only doing well it's only doing movement based stuff.

59
00:04:22.330 --> 00:04:26.290
In fact we can make that really explicit by selecting everything that's in it update and you can either

60
00:04:26.290 --> 00:04:34.180
hit the light bulb or you can hit control period and it'll give us some options here in this case it's

61
00:04:34.180 --> 00:04:36.950
extract method and that's what we want to do.

62
00:04:36.970 --> 00:04:42.570
I want to extract a strategy it's a new method it calls a new method and I can rename that with F2 and

63
00:04:42.570 --> 00:04:49.480
I'm gonna call it interact with movement like so.

64
00:04:49.540 --> 00:04:54.820
So we've got a new method in updates every update we interact with movement which involves getting the

65
00:04:54.820 --> 00:04:59.560
cursor and moving and getting the whether the mouse button is down and moving to the cursor basically

66
00:05:00.270 --> 00:05:09.500
what we want to do is add in a new function in here which is going to be interact with combat like so

67
00:05:09.620 --> 00:05:10.880
obviously that's not created yet.

68
00:05:10.880 --> 00:05:17.240
So again with the little light bulb or with controlled dot control period you can generate the method

69
00:05:17.510 --> 00:05:19.710
automatically and they go.

70
00:05:19.760 --> 00:05:22.120
We've got a interact with combat.

71
00:05:22.190 --> 00:05:25.460
Now what is it we want to do here at this point.

72
00:05:25.460 --> 00:05:32.600
Well I think what we want to do is recast but there is a little bit of a thing that we should look out

73
00:05:32.600 --> 00:05:33.300
for.

74
00:05:33.320 --> 00:05:42.410
For example what if if I'm playing Let's just try and set up a scenario here where if I take this capsule

75
00:05:42.440 --> 00:05:46.990
and I put him a little bit behind the tree so that he's just about poking out.

76
00:05:47.360 --> 00:05:51.330
See if I can see that in the game move over.

77
00:05:51.630 --> 00:05:56.050
It's not working because of my my code in here they interact with combat.

78
00:05:56.070 --> 00:06:03.260
This shouldn't throw anything if I want it to actually be able to run let's try that again.

79
00:06:03.260 --> 00:06:05.200
So I'm going to move over here.

80
00:06:05.240 --> 00:06:11.570
The tree will be able to obscure where I'm going but I can still click to move as you can see.

81
00:06:11.570 --> 00:06:19.160
So what we want to do is if even if there's something obscuring it when we click on the capsule it should

82
00:06:19.700 --> 00:06:22.080
attack it because that's high priority right.

83
00:06:22.100 --> 00:06:24.500
Even if we can't see it we want to be able to attack it.

84
00:06:24.500 --> 00:06:26.630
So how does that work.

85
00:06:26.720 --> 00:06:31.190
Because currently our right cast will return the first thing it hits from the camera.

86
00:06:31.220 --> 00:06:39.020
Well one way of doing this is using a very similar function to the physics Reich has called Physics.

87
00:06:39.560 --> 00:06:48.600
If I can type correctly in physics top Reich asked all now this signature as it says here I is.

88
00:06:48.890 --> 00:06:49.520
There's a few of them.

89
00:06:49.520 --> 00:06:50.480
There's eight of them.

90
00:06:50.540 --> 00:06:56.360
They can do recast all with vectors but there is one that takes in a Ray I think just a rake.

91
00:06:56.390 --> 00:07:01.130
This one the last one takes in just a ray very much the same as our physic Ray CAS but instead of having

92
00:07:01.130 --> 00:07:07.250
an out parameter for the hit result what it does have is a list of hit results so it returns all the

93
00:07:07.250 --> 00:07:13.070
things it hit it gets carries ongoing going it's like a bullet with a lot of strength that just passes

94
00:07:13.070 --> 00:07:18.290
through all of its targets and keep is a very you know it's an accountant bullet because it keeps track

95
00:07:18.290 --> 00:07:19.880
of who it hit as it went along.

96
00:07:19.910 --> 00:07:27.390
So the idea here is we have this rake has to hit results so let's do recast hit erase what's gonna be

97
00:07:27.390 --> 00:07:33.830
coming out of this and then we'll just call this the hits and then what we were passing in is the ray.

98
00:07:33.840 --> 00:07:39.630
Now we have to produce the ray basically in exactly the same way as we were doing and moved the cursor.

99
00:07:39.630 --> 00:07:46.320
So because it's exactly the same and I'd like it to be exactly the same I'm going to select the code

100
00:07:46.350 --> 00:07:55.160
that generates the ray and I'm going to extract it so extract method like so and it has automatically

101
00:07:55.170 --> 00:08:01.410
noticed this is quite cool it has automatically called it get Ray because I think it's done that but

102
00:08:01.410 --> 00:08:05.490
either based on the type or based on the name of the variable.

103
00:08:05.570 --> 00:08:07.290
And that's pretty cool and quite clever.

104
00:08:07.290 --> 00:08:10.700
I just want to tweak it a little bit rather than calling it get round going to call it the get mouse

105
00:08:10.710 --> 00:08:11.370
right.

106
00:08:11.430 --> 00:08:17.370
So it's obvious that it's the ray based on the mouse position and the other little tweak we can do now

107
00:08:17.400 --> 00:08:20.270
because this variable is practically just noise.

108
00:08:20.290 --> 00:08:25.260
Now if I select the variable and hit control dot again he can see that there's quite a lot that visual

109
00:08:25.260 --> 00:08:30.630
studio code can do for us it is in line this temporary asking me to inline the temporary variable which

110
00:08:30.630 --> 00:08:36.190
basically means it goes and replaces the variable in that recast which is pretty cool.

111
00:08:36.190 --> 00:08:37.240
Pretty handy.

112
00:08:37.240 --> 00:08:38.700
And now that means that I can do this.

113
00:08:38.700 --> 00:08:44.220
Get mouse Ray in our ray cast all and the result coming back from it.

114
00:08:44.230 --> 00:08:51.550
After I put my SIM card on the end of the line is going to be a list of hits and I can for each loop

115
00:08:51.610 --> 00:08:52.320
over those.

116
00:08:52.330 --> 00:08:56.800
So if you've not come across a for each loop before we probably have come across a for each loop.

117
00:08:56.800 --> 00:08:58.260
I hope if you haven't.

118
00:08:58.570 --> 00:09:00.100
It's pretty straightforward.

119
00:09:00.100 --> 00:09:06.160
It is a loop very much like a for loop any sort of loop where it will execute the code in the block

120
00:09:06.400 --> 00:09:08.350
for every item in a list of items.

121
00:09:08.350 --> 00:09:15.580
So we're gonna do a for each of recast hit and call and call that single item a hit in the collection

122
00:09:15.580 --> 00:09:16.750
which is going to be the hits.

123
00:09:16.870 --> 00:09:20.020
So for each hit in hits it makes quite low sense.

124
00:09:20.020 --> 00:09:23.200
This code block is going to run for each hit.

125
00:09:23.200 --> 00:09:30.250
So this is the place where we can do something with those hits we can see whether we have hit a combat

126
00:09:30.250 --> 00:09:33.660
component and if so we can start attacking it.

127
00:09:33.670 --> 00:09:38.470
So this is where I recommend you read up on the documentation for recast hit to see how you can get

128
00:09:38.920 --> 00:09:41.220
hold of the object that was hit.

129
00:09:41.230 --> 00:09:47.020
Maybe you can get hold of the game object maybe you can get hold of a component on the game object which

130
00:09:47.020 --> 00:09:52.240
will allow you to then get hold of the combat component something along those lines and the end game

131
00:09:52.270 --> 00:09:56.420
is going to be this challenge to call the attack function in our fighter component.

132
00:09:56.440 --> 00:10:01.240
So you are going to find the results that have a combat target.

133
00:10:01.270 --> 00:10:07.200
So you're going to need to do a get component check whether it has a combat target that sort thing.

134
00:10:07.420 --> 00:10:10.740
Then you gonna call attack function in fighter.

135
00:10:10.990 --> 00:10:18.220
So you've got fighter as a sibling component call attack function with on that and test it.

136
00:10:18.280 --> 00:10:23.800
Test it out see if you can click on target and get the right mod message.

137
00:10:23.800 --> 00:10:25.420
Hit pause and try it out.

138
00:10:27.200 --> 00:10:33.610
Okay so the key here is that when you look at the properties that come back from hit you can do this

139
00:10:33.610 --> 00:10:39.130
with the autocomplete or you can do this by looking at the documentation.

140
00:10:39.160 --> 00:10:40.190
There are a few things.

141
00:10:40.210 --> 00:10:44.570
You've got the rigid body component you could use that you could use the collider component.

142
00:10:44.620 --> 00:10:51.340
I think what I'm going to go and use because you might not have a rigid body basically all the transform

143
00:10:51.690 --> 00:10:54.000
the transform would work just as well.

144
00:10:54.250 --> 00:11:00.040
The transform of the rigid body or collider that was hit so because that works with either a rigid body

145
00:11:00.040 --> 00:11:05.200
or Oracle I don't kind of inclined to go with him transform and then we can do a get component because

146
00:11:05.200 --> 00:11:10.480
it is transform is a component remember and you can do get component on any component which gets all

147
00:11:10.480 --> 00:11:15.760
the siblings or look through all the siblings and then what we're gonna do is look for the combat target.

148
00:11:15.760 --> 00:11:21.970
Notice this isn't coming up even if I type it out in full let's not just slow autocomplete.

149
00:11:22.060 --> 00:11:26.140
Let me just give you a mini challenge to figure out why do you think that's not coming up.

150
00:11:26.140 --> 00:11:29.430
Just have a think about it and you might have guessed it.

151
00:11:29.500 --> 00:11:34.960
Basically we haven't included the combat namespace so we are going to have to also include as well of

152
00:11:34.960 --> 00:11:36.630
movement the combat means namespace.

153
00:11:36.630 --> 00:11:38.640
You can see this is getting quite heavy.

154
00:11:38.680 --> 00:11:43.020
The player controller is already getting many dependencies and you can think ahead a little bit.

155
00:11:43.030 --> 00:11:47.350
If we had dialogue and so on being spawned this way it's going to depend on a lot of things.

156
00:11:47.350 --> 00:11:50.710
Don't worry we'll sort that out later down the line we won't switch out just now.

157
00:11:50.710 --> 00:11:55.860
So what we're going to have back here is a combat transform or target.

158
00:11:55.870 --> 00:12:03.950
Sorry and I'm just gonna call it the targets like so and what we need to do is check if it's null.

159
00:12:03.950 --> 00:12:10.230
So if the target is now what I'm gonna do is continue.

160
00:12:10.430 --> 00:12:14.720
What does continue do might be a keyword you've never seen before we might might've seen return you

161
00:12:14.720 --> 00:12:15.720
might seem break.

162
00:12:15.770 --> 00:12:20.660
Maybe you haven't seen the either of that one either break we probably seen return continue is basically

163
00:12:20.660 --> 00:12:27.770
a keyword that says carry on with this loop skip the rest of this body of the loop and go on to the

164
00:12:27.770 --> 00:12:36.440
next item basically which means that everything after this line in the full body will inherently be

165
00:12:36.440 --> 00:12:37.300
not no.

166
00:12:37.370 --> 00:12:41.300
Because if it was no it would have carried on with the next iteration of the loop.

167
00:12:41.300 --> 00:12:46.170
So it's another way of doing a god for inside a for loop.

168
00:12:46.220 --> 00:12:49.540
So what we're gonna do here is we can do a target.

169
00:12:49.550 --> 00:12:51.110
I mean actually gonna use target here.

170
00:12:51.140 --> 00:12:56.060
That's a good point that we just did this to make sure we're filtering and making sure this hit result

171
00:12:56.150 --> 00:13:00.820
is only on something that was a combat target.

172
00:13:00.830 --> 00:13:11.750
So what I want to do now is if we have our inputs dots get mouse button like so then what we going to

173
00:13:11.750 --> 00:13:16.440
do I'll get mouse button down in fact because I don't want to be able to hold down I don't want down

174
00:13:16.450 --> 00:13:19.350
to attack on a click and start me attacking process.

175
00:13:19.430 --> 00:13:27.650
So if the mouse button 0 is down then what we're going to do is we are going to get our sibling component

176
00:13:28.920 --> 00:13:36.790
called the fighter and we're going to call attack on that like so and just one more thing.

177
00:13:36.800 --> 00:13:46.210
I think what we can do here is in that fighter component we can have the combat target as an argument

178
00:13:46.240 --> 00:13:47.110
to it.

179
00:13:47.110 --> 00:13:51.700
We're not doing much with it at the moment but that's okay.

180
00:13:51.700 --> 00:13:54.160
And we can just pass that in for later.

181
00:13:54.160 --> 00:13:59.470
Don't worry if you didn't do that I'm just thinking ahead that we're gonna need to know who we are actually

182
00:13:59.470 --> 00:14:02.010
trying to attack when we start the attacking process.

183
00:14:02.560 --> 00:14:04.190
So let's try it out.

184
00:14:04.240 --> 00:14:10.060
Hit play and if I hit the capsule they go take that you short squat peasant.

185
00:14:10.210 --> 00:14:14.830
Only when I hit the capsule so I clicked multiple times it comes up multiple times.

186
00:14:14.920 --> 00:14:15.370
Great.

187
00:14:15.400 --> 00:14:20.260
So we've got our broadcasting happening on to a component and we're being able to detect this happening

188
00:14:20.260 --> 00:14:26.320
to a component and then we're calling a function on our fighter method which is the starting point of

189
00:14:26.650 --> 00:14:29.270
really getting the ball rolling here with attacking.

190
00:14:29.290 --> 00:14:32.790
So I'll see you in then etc. where it will be progressing this fighting system.
