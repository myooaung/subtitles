1
00:00:04,660 --> 00:00:08,850
So at the moment we've got a bit of a design issue with Aggie your ideas.

2
00:00:08,980 --> 00:00:14,530
If for example instead of dropping new enemies into my scene from the prefabs because I don't want to

3
00:00:14,530 --> 00:00:18,720
necessarily every time have to go and find the prefab folder I wanted to do the following.

4
00:00:18,730 --> 00:00:22,840
What if I took this enemy and just wanted to duplicate him around the scene a little bit.

5
00:00:22,840 --> 00:00:25,400
That seems harmless enough surely I can do that.

6
00:00:25,450 --> 00:00:27,190
At least that's what your designer might think.

7
00:00:27,310 --> 00:00:31,120
And that designer might even be you but look at all these enemies.

8
00:00:31,120 --> 00:00:33,440
If I select them all and have a look at their new ideas.

9
00:00:33,580 --> 00:00:38,590
It's all identical each one of them has exactly the same year you I.D. overwrite and that is the same

10
00:00:38,590 --> 00:00:40,940
override as the enemy I copied it from.

11
00:00:40,990 --> 00:00:43,560
So that's what we're going to be fixing in this lecture.

12
00:00:43,570 --> 00:00:52,840
Let's dive in OK so what we want to be able to do is figure out whether or not the idea that we have

13
00:00:52,840 --> 00:00:58,930
generated here is unique because what happened when we were duplicating is that that unique identifier

14
00:00:58,960 --> 00:01:00,700
was copied along with it.

15
00:01:00,760 --> 00:01:02,280
Now it's no longer no.

16
00:01:02,320 --> 00:01:06,740
So in update we don't have to worry or at least that's what our code thinks.

17
00:01:07,150 --> 00:01:10,490
But it isn't unique because we've duplicated it from something else.

18
00:01:10,510 --> 00:01:15,430
So what we really want to do here is on line 49 basically an update of the salable entity.

19
00:01:15,760 --> 00:01:23,650
We want to say if it's null or empty Sure go ahead and generate a unique identifier but also if it is

20
00:01:24,040 --> 00:01:25,950
a not unique thing.

21
00:01:26,290 --> 00:01:31,410
So I'm going to create a method is unique because I generally think in positives I could create a method.

22
00:01:31,420 --> 00:01:35,490
This is not unique but it's easier to write the methods usually in positives.

23
00:01:35,500 --> 00:01:44,370
So I'm going to put a knot is unique and what we're going to do is we're going to pass it the property

24
00:01:44,400 --> 00:01:46,060
dot string value.

25
00:01:46,060 --> 00:01:50,580
Now this is obviously not being created yet so I'm going to use visual studios generate methods to go

26
00:01:50,580 --> 00:01:52,380
ahead and create this saleable entity thing.

27
00:01:53,190 --> 00:01:58,710
And what it's gonna done is it's created a is unique that returns bool private and takes a string which

28
00:01:58,710 --> 00:02:00,960
is calling string value.

29
00:02:01,060 --> 00:02:06,310
I'm going to go ahead and rename string value to candidate because it is the candidate that we're checking

30
00:02:06,310 --> 00:02:07,800
for uniqueness.

31
00:02:07,870 --> 00:02:12,040
Now I'm not gonna go ahead and fill this out just yet because I want to do an overview of the methods

32
00:02:12,040 --> 00:02:14,660
we could take to solving this problem.

33
00:02:14,680 --> 00:02:19,450
So what we've got is a scene full of salable entities or a world full of stable entities and we want

34
00:02:19,450 --> 00:02:23,950
to check whether a you I.D. on a particular safe and entity is unique.

35
00:02:23,950 --> 00:02:25,000
What's an easy way of doing this.

36
00:02:25,000 --> 00:02:27,790
Well we could go ahead and do a find game object of type.

37
00:02:27,790 --> 00:02:33,090
Get all the safe balances iterate through all of them and say hey all the ones that aren't me.

38
00:02:33,190 --> 00:02:35,260
Do you have a different unique identifier.

39
00:02:35,260 --> 00:02:37,210
If not I need to regenerate mine.

40
00:02:37,330 --> 00:02:43,750
Now this is seems okay except that it's quite expensive to do a fine game objects of type to begin with

41
00:02:44,050 --> 00:02:49,180
but also every saleable entity will be doing that every frame.

42
00:02:49,180 --> 00:02:55,960
So we're going to have to do find game objects of type for every saleable entity every frame and it's

43
00:02:55,960 --> 00:02:59,700
going to just get more and more expensive the more stable entities we have to check.

44
00:02:59,710 --> 00:03:01,770
So this is not a good way.

45
00:03:01,900 --> 00:03:05,410
What we want to be able to do instead is have a more efficient way.

46
00:03:05,410 --> 00:03:12,460
So what I'm gonna do is introduce a dictionary components or a dictionary data structure where the salable

47
00:03:12,460 --> 00:03:14,070
entities will register themselves.

48
00:03:14,080 --> 00:03:19,150
They will put their new ideas in the dictionary and they will point back to the stable entity in question

49
00:03:19,150 --> 00:03:23,650
so that we can check that things are up to date and check that we're not talking about ourself you know

50
00:03:23,650 --> 00:03:27,310
who is this item in the dictionary and this will be much more efficient.

51
00:03:27,310 --> 00:03:32,050
You can check this every frame no problem because the dictionary is quite easy to keep up to date and

52
00:03:32,050 --> 00:03:33,410
very efficient.

53
00:03:33,460 --> 00:03:35,520
So that's what we're going to go ahead and introduce.

54
00:03:35,530 --> 00:03:38,620
Now where should this dictionary live now.

55
00:03:38,650 --> 00:03:44,020
It could live on the scene but we're going to forget to put it in places and it's also could potentially

56
00:03:44,020 --> 00:03:47,020
want to check for uniqueness between scenes.

57
00:03:47,020 --> 00:03:53,010
So what I'm gonna go with as the simplest solution is to create a static dictionary which remember statics

58
00:03:53,020 --> 00:03:54,730
live for the lifetime of the application.

59
00:03:54,730 --> 00:03:56,220
So we have to be very careful with them.

60
00:03:56,230 --> 00:03:59,890
They even live between scenes and we're going to see it as an issue with that later on.

61
00:04:00,370 --> 00:04:02,330
So I'm gonna go ahead and create a dictionary.

62
00:04:02,350 --> 00:04:08,890
It's going to be from the string type which is the unique identifier to the saleable entity which has

63
00:04:08,890 --> 00:04:19,350
that identity to fire and I'm going to call this the global look up just for simplicity and I'm going

64
00:04:19,350 --> 00:04:23,600
to do a new dictionary salable entity right at the beginning.

65
00:04:23,610 --> 00:04:25,840
So we've got a dictionary to begin with.

66
00:04:26,040 --> 00:04:30,870
And then what we're going to want to do with this static dictionary is we're going to want to update

67
00:04:30,870 --> 00:04:30,960
it.

68
00:04:30,960 --> 00:04:32,300
That's the first thing.

69
00:04:32,310 --> 00:04:33,240
So have a little think.

70
00:04:33,330 --> 00:04:36,990
There's not gonna be any big challenge just a few mini changes throughout this lecture by the way.

71
00:04:37,010 --> 00:04:38,670
It's quite in-depth.

72
00:04:38,670 --> 00:04:41,900
So have a little think where do we want to update this.

73
00:04:41,940 --> 00:04:48,930
Now you could update it in a start method but what happens if the game designer just goes and manually

74
00:04:48,930 --> 00:04:53,100
changes the serialized property that unique identifier.

75
00:04:53,100 --> 00:04:57,260
Well then your start method won't update the dictionary and the dictionary won't stay up to date.

76
00:04:57,270 --> 00:05:02,580
So I'm actually going to updated every single update and I'm gonna do this after an if statement that

77
00:05:02,580 --> 00:05:09,990
has changed the value of the unique identifier just so that we have the latest version.

78
00:05:09,990 --> 00:05:12,470
Basically we have the latest identifier in here.

79
00:05:12,600 --> 00:05:22,410
So it's going to be the global look up and it is going to I'm going to add in a key the property string

80
00:05:22,410 --> 00:05:27,740
value and set its value to this to point to the current saleable entity.

81
00:05:27,750 --> 00:05:31,900
So now global look up hasn't got values in it.

82
00:05:32,100 --> 00:05:34,230
We want to go ahead and implement is unique.

83
00:05:34,230 --> 00:05:37,190
Now if you feel confident and want to try and implement is unique.

84
00:05:37,380 --> 00:05:39,930
Do by all means go ahead and give it a go.

85
00:05:40,020 --> 00:05:42,440
But basically we want to do a couple of things.

86
00:05:42,480 --> 00:05:51,210
We want to have a first of all check that the key exists in the dictionary.

87
00:05:51,570 --> 00:05:57,180
And if it does exist in the dictionary we want to check that it is not pointing to ourselves.

88
00:05:57,180 --> 00:05:59,790
So those are the two main things if you do want to take this on a challenge.

89
00:05:59,790 --> 00:06:02,250
Those are the two things to check in is unique.

90
00:06:02,250 --> 00:06:05,920
And then there are some edge cases we'll tackle afterwards okay.

91
00:06:05,930 --> 00:06:06,840
So let's have a go.

92
00:06:06,890 --> 00:06:11,260
Now you may have had to look through the documentation to check whether a key exists in a dictionary.

93
00:06:11,270 --> 00:06:16,810
So what I'm gonna do is I'm going to put an if statement in here and we're going to say that.

94
00:06:16,810 --> 00:06:23,670
Does that does it exist in dictionary global look up dot contains key and this returns a boolean whether

95
00:06:23,670 --> 00:06:24,770
that if the key exists.

96
00:06:24,770 --> 00:06:27,520
So we're gonna check for the candidate key.

97
00:06:27,540 --> 00:06:30,260
We're going to say there's this global look up contain the key.

98
00:06:30,260 --> 00:06:32,660
What happens if it does contain the key.

99
00:06:32,660 --> 00:06:35,060
Well if it does contain the key we want to go on.

100
00:06:35,210 --> 00:06:38,120
But if it doesn't contain the key we already know that we can return.

101
00:06:38,120 --> 00:06:45,050
So if it doesn't contain the key then we want to return true because we know that there is no other

102
00:06:45,050 --> 00:06:49,800
key in this dictionary so no other saleable entity has got this key already.

103
00:06:49,850 --> 00:06:50,330
Perfect.

104
00:06:50,770 --> 00:06:51,080
Okay.

105
00:06:51,110 --> 00:06:53,320
So we can return true.

106
00:06:53,330 --> 00:06:56,840
And our default is going to be returning false.

107
00:06:57,200 --> 00:07:00,760
Otherwise then we want to say is it pointing to ourselves.

108
00:07:00,770 --> 00:07:03,780
If it's pointing to ourselves again we can return true.

109
00:07:03,780 --> 00:07:06,160
Otherwise we're going to go on to return false.

110
00:07:06,170 --> 00:07:15,990
So let's look if the global look up candidate is actually equal to this.

111
00:07:16,010 --> 00:07:17,460
So is the current game object.

112
00:07:17,460 --> 00:07:24,970
Then again we can return true because this just means that the candidate is US so there's nobody else.

113
00:07:24,980 --> 00:07:28,400
It's just us which means that it's fine we are unique.

114
00:07:28,460 --> 00:07:29,090
That's what we want.

115
00:07:29,120 --> 00:07:31,310
So this is already a good system.

116
00:07:31,340 --> 00:07:36,070
Hopefully if we go back over to our game and have a look at the enemies that we had duplicated and had

117
00:07:36,100 --> 00:07:40,610
duplicate your ideas we have a look at each of them you can see that they you you ideas have actually

118
00:07:40,940 --> 00:07:42,570
been saved.

119
00:07:42,680 --> 00:07:45,260
Now there is a deficiency again with this approach.

120
00:07:45,260 --> 00:07:53,590
If we go over to a second scene the sandbox scene then we got unsafe changes or combat.

121
00:07:53,630 --> 00:07:54,910
Why that is in a second.

122
00:07:54,950 --> 00:07:57,950
If I go back to the main site sandbox and don't save.

123
00:07:58,590 --> 00:08:00,640
You'll notice that we've got changes here too.

124
00:08:00,740 --> 00:08:05,360
And actually if you went through and looked through all these guards you'll see that they you you ideas

125
00:08:05,360 --> 00:08:09,770
have changed for some reason why have all the guards changed their ideas.

126
00:08:09,770 --> 00:08:11,150
That doesn't make any sense.

127
00:08:11,180 --> 00:08:16,640
The reason as I warned you is because this dictionary actually exists for the entire lifetime of the

128
00:08:16,640 --> 00:08:19,800
application and that includes between loading scenes.

129
00:08:19,850 --> 00:08:25,850
So when we loaded the scene the sandbox scene the first time round the guards all put themselves faithfully

130
00:08:25,850 --> 00:08:26,870
into the dictionary.

131
00:08:26,990 --> 00:08:33,170
Then we unloaded the scene all those guards saved all entities got deleted but their allocations in

132
00:08:33,170 --> 00:08:34,640
the dictionary did not go away.

133
00:08:34,640 --> 00:08:39,560
They stayed in the dictionary which means when we loaded the sandbox scene a second time and the guards

134
00:08:39,750 --> 00:08:42,410
are new saved balance fees that have been created.

135
00:08:42,440 --> 00:08:47,960
They pop up all of a sudden they go to the dictionary and say hey my unique identifier is already taken.

136
00:08:47,960 --> 00:08:53,450
What's going on I need to regenerate one but actually they don't realize that it has been taken by an

137
00:08:53,540 --> 00:08:57,140
item by several entity that has been destroyed with a previous scene.

138
00:08:57,140 --> 00:09:03,920
So an easy way to get around this is to check whether the item in this dictionary has been deleted already

139
00:09:04,160 --> 00:09:06,590
and if it's been deleted we can remove it from the dictionary.

140
00:09:06,650 --> 00:09:07,670
So how do we do that.

141
00:09:07,730 --> 00:09:09,320
Well in unity it's quite simple.

142
00:09:09,320 --> 00:09:15,740
All you have to do is check whether the item is equal to null and there's actually some special overrides

143
00:09:15,740 --> 00:09:19,430
and magic going on to make this work in unity but we don't mind.

144
00:09:19,430 --> 00:09:20,000
That's fine.

145
00:09:20,090 --> 00:09:25,640
So we're going to do a global lookup candidate and if it's equal to null it means that it has been deleted

146
00:09:26,000 --> 00:09:30,200
in in Unity's idea anyway it has been destroyed.

147
00:09:30,380 --> 00:09:35,360
Which means that we no longer interested in it has been deleted it could be from a previous scene it

148
00:09:35,360 --> 00:09:38,030
could be ourselves in a different iteration.

149
00:09:38,060 --> 00:09:42,410
So what we're going to do is we're going to remove it from the global look up so global look up Dutch

150
00:09:42,590 --> 00:09:49,780
remove candidate and then because we removed it is now empty in the dictionary so we can happily return

151
00:09:49,900 --> 00:09:51,790
True from is unique.

152
00:09:51,790 --> 00:09:57,870
We know that now it is unique because any objects that were in the dictionary were already know.

153
00:09:58,080 --> 00:10:04,720
OK so that is hopefully going to fix our issue if I go back to sandbox 2 and then don't save and then

154
00:10:04,720 --> 00:10:07,090
go back to sandbox 1 and don't save.

155
00:10:07,120 --> 00:10:13,030
Now you can see there are no changes in sandbox 1 all the enemies have kept their original new ideas

156
00:10:13,030 --> 00:10:19,510
that we had saved in the sandbox so I'm pretty happy that that is what we want now there is finally

157
00:10:19,510 --> 00:10:20,830
one more thing.

158
00:10:20,830 --> 00:10:26,950
Little edge case I don't know whether where or when this could come up but for example the global look

159
00:10:26,950 --> 00:10:30,230
up candidate could in theory.

160
00:10:30,280 --> 00:10:37,330
So the item the saleable entity that it points to could actually not have the EU I.D. that we're looking

161
00:10:37,330 --> 00:10:43,030
for it could have got out of date and I think one case where this could happen is if you updated it

162
00:10:43,390 --> 00:10:50,980
in the editor and then the global I.D. would go ahead and create a new global I.D. look up in the dictionary

163
00:10:50,980 --> 00:10:55,430
table but the old look up would also still be there pointing to it.

164
00:10:55,600 --> 00:10:57,370
So we can now clear that up.

165
00:10:57,460 --> 00:11:04,260
We can say hey why don't we take this unique identifier once I get a method get unique identifier.

166
00:11:04,840 --> 00:11:11,350
So we're gonna get the unique identifier of the item that we looked up from candidate and if it's actually

167
00:11:11,350 --> 00:11:14,170
not equal to the candidate.

168
00:11:14,260 --> 00:11:15,710
So something's gone wrong.

169
00:11:15,730 --> 00:11:20,160
Look up is now not up to date it's not pointing to the right value.

170
00:11:20,200 --> 00:11:25,350
Then again we want to remove it from the lock up because it is no longer this line of the dictionary

171
00:11:25,350 --> 00:11:26,440
is no longer up to date.

172
00:11:26,440 --> 00:11:30,880
We remove it and we can again return true because we know that it's free.

173
00:11:31,800 --> 00:11:32,130
Okay.

174
00:11:32,160 --> 00:11:33,540
So that pretty much covers it.

175
00:11:33,540 --> 00:11:35,780
Now there is one thing I would like to do.

176
00:11:35,940 --> 00:11:42,360
The AB player at the moment has a uniquely generated idea which is fine but what I'd like to have happen

177
00:11:42,480 --> 00:11:46,700
is that the all the state of the player is shared between scenes.

178
00:11:46,710 --> 00:11:49,730
So what we can do there is actually give him a unique idea.

179
00:11:49,740 --> 00:11:54,780
So if I go to the player's prefab and where we currently don't have a unique identifier that doesn't

180
00:11:54,780 --> 00:12:02,280
get generated in prefabs we can manually put in the player unique identifier which means that in every

181
00:12:02,280 --> 00:12:06,380
scene that we put the player he is going to have the same unique identifier.

182
00:12:06,390 --> 00:12:12,160
Just need to go over to the sandbox and revert his identifier so his identifies now player.

183
00:12:12,240 --> 00:12:19,240
If I go over to sandbox to save my original sandbox and go and find the player again I want him to have.

184
00:12:19,500 --> 00:12:24,060
He's already got a reverted unique identifier and now because no players are ever in the same scene

185
00:12:24,060 --> 00:12:29,180
at the same time it doesn't matter that they're unique identifiers are actually the same.

186
00:12:29,220 --> 00:12:34,890
So what's gonna happen is when you load sandbox 2 it's going to get the state the health and all those

187
00:12:34,890 --> 00:12:40,810
kinds of things that were shared with sandbox 1 talking of health in the next lecture.

188
00:12:40,840 --> 00:12:41,800
That's what we're gonna work on.

189
00:12:41,800 --> 00:12:45,130
We're going to work on making health save itself as well.

190
00:12:45,130 --> 00:12:45,570
See you that.
