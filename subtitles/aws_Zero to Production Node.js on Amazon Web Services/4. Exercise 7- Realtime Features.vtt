WEBVTT
1
00:00:03.654 --> 00:00:07.002
The issue that I have right now with the application,

2
00:00:07.002 --> 00:00:09.340
which will be labeled Exercise 7,

3
00:00:09.340 --> 00:00:15.526
is to update the todo list when a new todo is added via websocket.

4
00:00:15.526 --> 00:00:15.959
So,

5
00:00:15.959 --> 00:00:21.631
the way that the Vue application works right now is it appears that

6
00:00:21.631 --> 00:00:25.618
todo items are added to the database in real-time,

7
00:00:25.618 --> 00:00:28.789
but really what happens is we add them to an array,

8
00:00:28.789 --> 00:00:30.894
the array gets rendered in our interface,

9
00:00:30.894 --> 00:00:34.200
and then we make a request to the server which

10
00:00:34.200 --> 00:00:37.299
actually persists it to the database.

11
00:00:37.299 --> 00:00:37.600
So,

12
00:00:37.600 --> 00:00:41.817
the challenge that I would like to pose for all of you is to

13
00:00:41.817 --> 00:00:46.068
create a socket connection between the todo client and the

14
00:00:46.068 --> 00:00:48.960
server and whenever a new todo is added,

15
00:00:48.960 --> 00:00:52.408
and right now we can do it for an add,

16
00:00:52.408 --> 00:00:56.860
if you want to try to implement it for an update too that's totally fine,

17
00:00:56.860 --> 00:01:01.714
but we won't immediately add the todo list item to the

18
00:01:01.714 --> 00:01:04.042
array associated with the Vue component.

19
00:01:04.042 --> 00:01:06.620
We'll actually make a request to the server,

20
00:01:06.620 --> 00:01:09.184
save it in the database like we are right now,

21
00:01:09.184 --> 00:01:12.610
and then when the todo list item has been successfully saved,

22
00:01:12.610 --> 00:01:16.683
we will emit an event from the server to the client containing the

23
00:01:16.683 --> 00:01:21.736
saved todo list item which then will be added to the array and then

24
00:01:21.736 --> 00:01:23.687
represented in our user interface.

25
00:01:23.687 --> 00:01:28.120
So it'll be only when the todo list item has actually been persisted

26
00:01:28.120 --> 00:01:30.640
that it'll be displayed in the user interface,

27
00:01:30.640 --> 00:01:34.918
which hopefully should be pretty close to real-time.

28
00:01:34.918 --> 00:01:39.538
So after lunch, we're going to take a crack at that.

29
00:01:39.538 --> 00:01:44.506
And, yeah, that should be a good time and give you a chance to dig into Socket.

30
00:01:44.506 --> 00:01:45.465
IO a little bit.

31
00:01:45.465 --> 00:01:49.613
The challenge here is going to be how you structure your Socket.

32
00:01:49.613 --> 00:01:50.602
IO code.

33
00:01:50.602 --> 00:01:51.096
So,

34
00:01:51.096 --> 00:01:56.227
right here we kind of have everything in the same file and

35
00:01:56.227 --> 00:01:59.476
access to the HTTP server and all that jazz.

36
00:01:59.476 --> 00:02:00.070
But generally speaking,

37
00:02:00.070 --> 00:02:04.863
that's not the way you're going to want to handle it in your application.

38
00:02:04.863 --> 00:02:09.081
So, much as we have this webapp.

39
00:02:09.081 --> 00:02:14.598
js file, which kind of creates a reusable Express application,

40
00:02:14.598 --> 00:02:19.939
we're probably going to want to create another file which manages Socket.

41
00:02:19.939 --> 00:02:21.191
IO related data.

42
00:02:21.191 --> 00:02:24.113
As a little bit of a spoiler,

43
00:02:24.113 --> 00:02:28.875
probably what you're going to want to do is in a module,

44
00:02:28.875 --> 00:02:32.039
create an object which exports one function,

45
00:02:32.039 --> 00:02:38.341
which is a connection handler, which will be used by the socket server.

46
00:02:38.341 --> 00:02:42.113
So if I bring up this simple example,

47
00:02:42.113 --> 00:02:45.705
you probably want to create a module which has this function,

48
00:02:45.705 --> 00:02:51.677
which will be called every time a new socket connects to the application.

49
00:02:51.677 --> 00:02:54.227
That module, for the sake of argument,

50
00:02:54.227 --> 00:02:58.403
should probably create like a global registry of sockets of all the

51
00:02:58.403 --> 00:03:01.015
sockets that are currently connected to the system,

52
00:03:01.015 --> 00:03:04.090
and then that module should probably have another function

53
00:03:04.090 --> 00:03:08.822
which will allow the controllers to emit messages to all the

54
00:03:08.822 --> 00:03:09.954
currently connected sockets.

55
00:03:09.954 --> 00:03:15.331
So, you're going to be creating a CommonJS module that exports two functions.

56
00:03:15.331 --> 00:03:17.824
One is going to handle incoming socket connections,

57
00:03:17.824 --> 00:03:23.032
and the other is going to be used by controllers to emit

58
00:03:23.032 --> 00:03:26.003
messages to the currently connected sockets.

59
00:03:26.003 --> 00:03:28.572
And again, because that's a decent amount of code,

60
00:03:28.572 --> 00:03:32.335
I thought I would at least prime the pump a little bit with what I

61
00:03:32.335 --> 00:03:34.889
think would probably be a reasonable implementation.

62
00:03:34.889 --> 00:03:37.647
So, we'll break now for lunch,

63
00:03:37.647 --> 00:03:42.029
and then we'll take another half hour on top of that to tackle the challenge,

64
00:03:42.029 --> 00:03:47.438
and then we'll come back and look at the solution at 1:30 along with the Vue.

65
00:03:47.438 --> 00:03:48.795
js solution.

66
00:03:48.795 --> 00:03:49.588
I've got a quick question.

67
00:03:49.588 --> 00:03:50.403
Yeah.

68
00:03:50.403 --> 00:03:53.391
It seems like the whole Socket.

69
00:03:53.391 --> 00:04:00.595
IO kind of template is much cleaner than messaging, than a RESTful interface.

70
00:04:00.595 --> 00:04:04.075
I mean, what's the tradeoff between them?

71
00:04:04.075 --> 00:04:05.346
I know that Socket.

72
00:04:05.346 --> 00:04:06.934
IO is a lot faster.

73
00:04:06.934 --> 00:04:12.332
Between a RESTful interface and a socket connection?

74
00:04:12.332 --> 00:04:17.930
I mean it's kind of about the kind of client that you expect to connect.

75
00:04:17.930 --> 00:04:21.159
It's possible to do like authentication with websocket

76
00:04:21.159 --> 00:04:25.721
connections if that's something you want to do.

77
00:04:25.721 --> 00:04:31.711
But yeah, other than exposing an API that can be used by all kinds of clients,

78
00:04:31.711 --> 00:04:34.328
like not every kind of client can create a socket

79
00:04:34.328 --> 00:04:37.140
connection to your server and like create read,

80
00:04:37.140 --> 00:04:39.142
update, delete operations that way,

81
00:04:39.142 --> 00:04:42.361
having a RESTful interface is probably more accessible.

82
00:04:42.361 --> 00:04:43.170
But yeah,

83
00:04:43.170 --> 00:04:47.720
you could certainly architect your system in such a way where most of your

84
00:04:47.720 --> 00:04:51.190
average crud operations happen over a websocket if you want.

85
00:04:51.190 --> 00:04:56.055
If you're controlling both ends of the pipe, sockets would be efficient?

86
00:04:56.055 --> 00:04:57.476
Potentially, yeah.

87
00:04:57.476 --> 00:05:00.319
It's certainly is faster,

88
00:05:00.319 --> 00:05:06.182
but the support for like authentication especially is a little

89
00:05:06.182 --> 00:05:10.030
more fiddly with websockets than it is with REST.

90
00:05:10.030 --> 00:05:10.830
With REST,

91
00:05:10.830 --> 00:05:16.395
you have cookies where you can store authentication tokens and by default,

92
00:05:16.395 --> 00:05:20.819
you don't get that with a websocket connection.

93
00:05:20.819 --> 00:05:24.607
Like there are other modules you can use to get that type of functionality,

94
00:05:24.607 --> 00:05:32.000
but there's no reason why you couldn't implement a lot of your services over websockets if you wanted to.

