WEBVTT
1
00:00:04.381 --> 00:00:06.579
For those of you who haven't maybe seen Express before,

2
00:00:06.579 --> 00:00:10.502
I'm just going to do a very brief demo of some of the key things that you'll

3
00:00:10.502 --> 00:00:17.382
want to accomplish when you're building an Express application.

4
00:00:17.382 --> 00:00:17.744
So,

5
00:00:17.744 --> 00:00:23.169
I'm just going to do one from scratch to kind of demonstrate how Express works.

6
00:00:23.169 --> 00:00:26.719
And here in this directory I've actually already downloaded the Express

7
00:00:26.719 --> 00:00:31.730
module so I can write Node program that's going to using it.

8
00:00:31.730 --> 00:00:34.609
So, I'm going to create a new file, index.

9
00:00:34.609 --> 00:00:38.286
js, which is going to be our simple Express application,

10
00:00:38.286 --> 00:00:41.639
and I'm going to open that up,

11
00:00:41.639 --> 00:00:48.640
and in my text editor here I'm going to be able to require the Express module.

12
00:00:48.640 --> 00:00:50.757
And I'm going to repeat some things that if you've been doing

13
00:00:50.757 --> 00:00:53.034
Node for a while you probably already know,

14
00:00:53.034 --> 00:00:54.638
so I apologize for that,

15
00:00:54.638 --> 00:00:57.619
but there are lots of folks in the room and online who

16
00:00:57.619 --> 00:00:59.319
some of this stuff might be new.

17
00:00:59.319 --> 00:01:01.705
So I'll break it down as best as I can,

18
00:01:01.705 --> 00:01:05.329
and feel free to shoot in any questions that you have along the way.

19
00:01:05.329 --> 00:01:10.765
So the first thing I'm going to do is require Express as a CommonJS module.

20
00:01:10.765 --> 00:01:15.637
And the way that --- and this is the modularization

21
00:01:15.637 --> 00:01:19.352
mechanism provided natively in Node.

22
00:01:19.352 --> 00:01:20.266
js.

23
00:01:20.266 --> 00:01:25.694
And if we could in the text editor too, if we can bump some _____.

24
00:01:25.694 --> 00:01:26.806
Sure thing.

25
00:01:26.806 --> 00:01:31.255
I could probably go a little bit bigger.

26
00:01:31.255 --> 00:01:33.132
Thank you.

27
00:01:33.132 --> 00:01:37.602
Alright, so there is a global function in a Node program called require,

28
00:01:37.602 --> 00:01:43.528
and when I pass in the name, it's going to try to find a module of that name.

29
00:01:43.528 --> 00:01:46.833
So if it's just a string like this, like express,

30
00:01:46.833 --> 00:01:50.927
it's going to reference the Node module path,

31
00:01:50.927 --> 00:01:53.811
and the way that that is resolved is in a couple of ways.

32
00:01:53.811 --> 00:01:58.757
First locally, here in this directory, if there is a node_modules folder,

33
00:01:58.757 --> 00:02:02.074
it's going to look in here and say like,

34
00:02:02.074 --> 00:02:05.754
oh, there's something called express in this node_modules folder,

35
00:02:05.754 --> 00:02:09.724
so I'm going to load that module from there.

36
00:02:09.724 --> 00:02:13.477
And after that, if it doesn't find express in a local node_modules folder,

37
00:02:13.477 --> 00:02:17.046
it'll actually start walking up the folders up above

38
00:02:17.046 --> 00:02:20.156
that looking for Node modules, and failing that,

39
00:02:20.156 --> 00:02:23.376
it will look for globally installed Node modules.

40
00:02:23.376 --> 00:02:30.035
So if you installed Express globally, it will require that version of the module.

41
00:02:30.035 --> 00:02:34.553
If you want to require local modules that you've created,

42
00:02:34.553 --> 00:02:38.427
which will do here in a second, there's a slightly different syntax for that.

43
00:02:38.427 --> 00:02:45.091
But now I've created this express object, which represents the Express library.

44
00:02:45.091 --> 00:02:50.142
And I'm going to create an application just using the express constructor,

45
00:02:50.142 --> 00:02:53.151
or express builder, I would say.

46
00:02:53.151 --> 00:02:55.618
It's not really a constructor function.

47
00:02:55.618 --> 00:02:57.262
And with that application,

48
00:02:57.262 --> 00:03:01.113
I can start defining routes to handle incoming HTTP requests,

49
00:03:01.113 --> 00:03:04.736
or I can start configuring middleware.

50
00:03:04.736 --> 00:03:08.849
But before I do that,

51
00:03:08.849 --> 00:03:15.917
the express module does have the capacity to start like a built-in HTTP server,

52
00:03:15.917 --> 00:03:18.889
which we'll do on port 3000.

53
00:03:18.889 --> 00:03:22.101
So that'll actually start listening for requests.

54
00:03:22.101 --> 00:03:26.504
Typically you don't use the built-in HTTP server like this,

55
00:03:26.504 --> 00:03:30.078
but for demonstration purposes we'll do that.

56
00:03:30.078 --> 00:03:35.005
And there's a couple ways where I can define handlers in my application.

57
00:03:35.005 --> 00:03:35.969
And app.

58
00:03:35.969 --> 00:03:42.716
use is a way that I can define a middleware function for my application.

59
00:03:42.716 --> 00:03:48.448
So use expects a function as an argument,

60
00:03:48.448 --> 00:03:53.585
and a middleware function will have arity of three,

61
00:03:53.585 --> 00:03:59.212
so it'll take three arguments, which is going to be the request,

62
00:03:59.212 --> 00:04:01.129
the response, and next.

63
00:04:01.129 --> 00:04:04.852
And next is a callback function that is going to be

64
00:04:04.852 --> 00:04:09.190
called to continue on processing the request after the

65
00:04:09.190 --> 00:04:11.404
middleware has finished executing.

66
00:04:11.404 --> 00:04:12.807
So in this case,

67
00:04:12.807 --> 00:04:17.281
a common use case for a middleware is to like check for an

68
00:04:17.281 --> 00:04:20.364
authenticated user and then add that user's information to the

69
00:04:20.364 --> 00:04:23.145
current request for downstream processing.

70
00:04:23.145 --> 00:04:27.676
So I could say request.

71
00:04:27.676 --> 00:04:34.925
user = name Kevin or something like that.

72
00:04:34.925 --> 00:04:37.318
Maybe I would check the cookies associated with the

73
00:04:37.318 --> 00:04:39.220
request and get some data there,

74
00:04:39.220 --> 00:04:43.871
but I would do some processing on the request and/or the response,

75
00:04:43.871 --> 00:04:47.733
and then whenever I'm done executing that logic,

76
00:04:47.733 --> 00:04:54.378
I'll just call next, and then the request will continue processing.

77
00:04:54.378 --> 00:04:57.267
And then when I want to handle specific --- uh yes, question.

78
00:04:57.267 --> 00:05:01.483
Is there a meaningful difference between declaring your

79
00:05:01.483 --> 00:05:05.590
app variable using a let versus a var?

80
00:05:05.590 --> 00:05:08.451
The difference with let is block scope.

81
00:05:08.451 --> 00:05:12.805
It's essentially the scope in which the variable is declared.

82
00:05:12.805 --> 00:05:14.190
So with var,

83
00:05:14.190 --> 00:05:18.386
the scope is always going to be like whatever the

84
00:05:18.386 --> 00:05:20.734
enclosing meaning of this would be.

85
00:05:20.734 --> 00:05:24.967
So like if this code were to execute in the browser outside of a function scope,

86
00:05:24.967 --> 00:05:30.015
if I did var app, that would declare the app variable globally.

87
00:05:30.015 --> 00:05:33.266
Let declares variables within the scope of a block.

88
00:05:33.266 --> 00:05:38.970
So in this case, this method is visible to my entire application,

89
00:05:38.970 --> 00:05:42.837
but if it was declared within an if block or some other

90
00:05:42.837 --> 00:05:44.437
kind of block within the application,

91
00:05:44.437 --> 00:05:47.882
it would be only scoped --- it would only be visible within that block.

92
00:05:47.882 --> 00:05:51.186
So you can basically use it in place of var,

93
00:05:51.186 --> 00:05:54.232
and it usually means what you want it to mean,

94
00:05:54.232 --> 00:05:59.614
which is declare this variable inside the current block scope.

95
00:05:59.614 --> 00:05:59.931
So,

96
00:05:59.931 --> 00:06:03.412
and the const is for variables that you do not ---

97
00:06:03.412 --> 00:06:06.368
that you don't expect to change.

98
00:06:06.368 --> 00:06:09.712
They should be immutable, essentially.

99
00:06:09.712 --> 00:06:13.283
So, we create the application, we define some middleware,

100
00:06:13.283 --> 00:06:20.282
and then we can handle specific HTTP methods on the application as well.

101
00:06:20.282 --> 00:06:23.517
So when a browser makes a request to our web application,

102
00:06:23.517 --> 00:06:26.436
that's an HTTP get request.

103
00:06:26.436 --> 00:06:31.690
So on our application object, I can say get.

104
00:06:31.690 --> 00:06:35.821
Whenever there's a get request to /hello in my web application,

105
00:06:35.821 --> 00:06:37.597
I want to execute some logic.

106
00:06:37.597 --> 00:06:38.782
And in this case,

107
00:06:38.782 --> 00:06:45.858
I'm just going to create a callback function with a request and response.

108
00:06:45.858 --> 00:06:48.504
Technically, I don't even need these other parens,

109
00:06:48.504 --> 00:06:52.735
but it's a hard habit to break, and I'm probably not ever going to use it,

110
00:06:52.735 --> 00:06:55.542
never going to break it I don't think.

111
00:06:55.542 --> 00:07:03.457
But at this point, I'm probably going to render an actual response to this route.

112
00:07:03.457 --> 00:07:07.268
So, now I'm going to say response.

113
00:07:07.268 --> 00:07:10.535
send, and by --- and response.

114
00:07:10.535 --> 00:07:13.232
send will send back different content types depending on

115
00:07:13.232 --> 00:07:15.453
the kind of object that you pass it.

116
00:07:15.453 --> 00:07:17.170
If you pass it a string,

117
00:07:17.170 --> 00:07:20.708
it will assume that you're trying to send HTML back to the client.

118
00:07:20.708 --> 00:07:22.537
If you pass it a JavaScript object,

119
00:07:22.537 --> 00:07:26.707
it'll serialize it to JSON and assume you want to send JSON back to the client.

120
00:07:26.707 --> 00:07:34.144
So in this case, I'm going to send back a string that says Hello request.

121
00:07:34.144 --> 00:07:35.182
user.

122
00:07:35.182 --> 00:07:36.221
name,

123
00:07:36.221 --> 00:07:45.766
and it's going to use that value which was defined in the

124
00:07:45.766 --> 00:07:50.020
middleware to actually insert that name into the HTML

125
00:07:50.020 --> 00:07:52.689
response that I'm sending back.

126
00:07:52.689 --> 00:07:57.103
And this is another newish feature that I won't beat in,

127
00:07:57.103 --> 00:08:01.494
but it's possible to do string interpolation in this version of Node

128
00:08:01.494 --> 00:08:04.660
using the backticks rather than the single ticks.

129
00:08:04.660 --> 00:08:10.120
So, it's just one of those niceties that is snuck into the language recently.

130
00:08:10.120 --> 00:08:16.603
So if I save that up and run the program --- No.

131
00:08:16.603 --> 00:08:19.439
Oh yeah, I'm actually already running something on port 3000.

132
00:08:19.439 --> 00:08:21.386
That would be why.

133
00:08:21.386 --> 00:08:27.806
Okay, so now I have a little Express application running on port 3000,

134
00:08:27.806 --> 00:08:33.893
and if I visit hello in the browser, I see Hello Kevin,

135
00:08:33.893 --> 00:08:40.177
which is based on the result of that middleware stack that I defined.

136
00:08:40.177 --> 00:08:40.649
Now,

137
00:08:40.649 --> 00:08:45.364
the way --- and typically if you as an application

138
00:08:45.364 --> 00:08:47.413
developer are creating your own middleware,

139
00:08:47.413 --> 00:08:50.494
you don't probably want to define middleware in this way.

140
00:08:50.494 --> 00:08:56.584
Most of the middleware that you see that you'll use from npm or elsewhere in

141
00:08:56.584 --> 00:09:00.369
the ecosystem will actually define a constructor function,

142
00:09:00.369 --> 00:09:05.253
which returns a function that you can use as middleware.

143
00:09:05.253 --> 00:09:07.358
So in this case,

144
00:09:07.358 --> 00:09:14.164
I'll just demonstrate that technique really quickly by creating a new file.

145
00:09:14.164 --> 00:09:16.662
We'll call it middleware.

146
00:09:16.662 --> 00:09:17.286
js.

147
00:09:17.286 --> 00:09:21.543
And the --- and in this case,

148
00:09:21.543 --> 00:09:28.883
I'm going create a function that's going to accept some arguments and

149
00:09:28.883 --> 00:09:33.816
then produce a middleware function as a response.

150
00:09:33.816 --> 00:09:37.272
So, I'm going to do a function called create,

151
00:09:37.272 --> 00:09:41.422
and it'll accept an argument like a username.

152
00:09:41.422 --> 00:09:49.639
And this create function is itself going to return a function,

153
00:09:49.639 --> 00:10:01.132
which will be the actual middleware that we --- that's actually not necessary.

154
00:10:01.132 --> 00:10:01.764
So,

155
00:10:01.764 --> 00:10:06.669
this will be the actual middleware function that you

156
00:10:06.669 --> 00:10:08.531
can mount in your application.

157
00:10:08.531 --> 00:10:15.244
So, if we copy over kind of what we did here, we get request.

158
00:10:15.244 --> 00:10:15.724
user.

159
00:10:15.724 --> 00:10:16.203
name.

160
00:10:16.203 --> 00:10:22.677
So we put that processing logic inside of this middleware function,

161
00:10:22.677 --> 00:10:24.856
excuse me, just do that,

162
00:10:24.856 --> 00:10:30.878
but now instead of like hard coding the name that we send back,

163
00:10:30.878 --> 00:10:36.130
we'll just pass in the username that was configured here.

164
00:10:36.130 --> 00:10:37.117
And in this way,

165
00:10:37.117 --> 00:10:39.091
you can essentially parameterize the creation of your

166
00:10:39.091 --> 00:10:42.049
middleware so you can have middleware behave differently

167
00:10:42.049 --> 00:10:44.606
based on the arguments that are passed in.

168
00:10:44.606 --> 00:10:50.150
So typically, this is how you're going to want to construct some middleware.

169
00:10:50.150 --> 00:10:54.898
And then to actually make that create function the

170
00:10:54.898 --> 00:10:56.951
public interface to my module,

171
00:10:56.951 --> 00:11:02.963
I will assign that function that I just created to module.

172
00:11:02.963 --> 00:11:03.587
exports.

173
00:11:03.587 --> 00:11:13.619
So now I can require my own middleware by passing in a relative

174
00:11:13.619 --> 00:11:16.366
path to the module that I'd like to require.

175
00:11:16.366 --> 00:11:20.601
So, in this case, it's going to be in the same directory,

176
00:11:20.601 --> 00:11:22.630
and it was called middleware.

177
00:11:22.630 --> 00:11:25.982
So, I'm going to require that middleware function,

178
00:11:25.982 --> 00:11:32.725
and now, rather than having the function in line there,

179
00:11:32.725 --> 00:11:38.042
I'm going to say --- I'm going to change up my

180
00:11:38.042 --> 00:11:39.940
middleware to pass in a different name.

181
00:11:39.940 --> 00:11:44.238
And now, if I kill that process and restart it,

182
00:11:44.238 --> 00:11:46.902
go back out to my server,

183
00:11:46.902 --> 00:11:52.055
I have a parameterized middleware that does something slightly different.

184
00:11:52.055 --> 00:11:54.518
So again, if you're developing your own middleware,

185
00:11:54.518 --> 00:11:58.365
that's typically the way that you're going to structure it with a

186
00:11:58.365 --> 00:12:02.355
factory function that will create --- that will in fact return a

187
00:12:02.355 --> 00:12:06.979
function based on the parameters that you pass in.

188
00:12:06.979 --> 00:12:07.390
Alright,

189
00:12:07.390 --> 00:12:11.505
any questions on Express or middleware right away before we

190
00:12:11.505 --> 00:12:19.000
keep trucking or things that you'd like further information on before we try it ourselves?

