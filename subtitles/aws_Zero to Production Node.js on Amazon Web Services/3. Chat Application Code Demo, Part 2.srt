1
00:00:03,801 --> 00:00:06,859
Now we're ready to start adding in the Socket.

2
00:00:06,859 --> 00:00:08,036
IO pieces.

3
00:00:08,036 --> 00:00:13,744
So, on the server, we're going to create the Socket.

4
00:00:13,744 --> 00:00:18,639
IO object that's going to allow us to manage incoming WebSocket connections.

5
00:00:18,639 --> 00:00:26,675
So, we're going to create this IO object by requiring Socket.

6
00:00:26,675 --> 00:00:27,406
IO.

7
00:00:27,406 --> 00:00:31,927
And then to that, we're going to pass in the HTTP server that we just created,

8
00:00:31,927 --> 00:00:34,072
and that's going to allow Socket.

9
00:00:34,072 --> 00:00:38,095
IO to serve up the client-side JavaScript that we'll be using here

10
00:00:38,095 --> 00:00:41,737
in a second in addition to a few other bits.

11
00:00:41,737 --> 00:00:44,190
And, next, with that IO object,

12
00:00:44,190 --> 00:00:48,625
we're going to be listening for a connection event.

13
00:00:48,625 --> 00:00:52,001
So, whenever a new WebSocket connects,

14
00:00:52,001 --> 00:00:59,036
this function is going to be called with that socket.

15
00:00:59,036 --> 00:01:07,617
So, for now I'll just console.

16
00:01:07,617 --> 00:01:11,908
log socket connected.

17
00:01:11,908 --> 00:01:12,155
And,

18
00:01:12,155 --> 00:01:16,162
we'll start doing some more interesting stuff with that socket here in a minute.

19
00:01:16,162 --> 00:01:18,464
So that is the server-side component.

20
00:01:18,464 --> 00:01:23,369
Now on the client-side because --- one of the things Socket.

21
00:01:23,369 --> 00:01:27,099
IO provides us is like a dynamic script tag.

22
00:01:27,099 --> 00:01:32,515
So this route that I'm about to type in the source here is

23
00:01:32,515 --> 00:01:35,557
actually going to be generated by Socket.

24
00:01:35,557 --> 00:01:38,534
IO because this isn't a route that we created.

25
00:01:38,534 --> 00:01:42,593
So it's just going to be socket.

26
00:01:42,593 --> 00:01:43,173
io/socket.

27
00:01:43,173 --> 00:01:43,753
io.

28
00:01:43,753 --> 00:01:44,333
js.

29
00:01:44,333 --> 00:01:46,144
So that's going to load up a Socket.

30
00:01:46,144 --> 00:01:50,105
IO JavaScript object for us to start working with on the client-side.

31
00:01:50,105 --> 00:01:52,977
And then in my script tag here,

32
00:01:52,977 --> 00:01:56,216
this is where we'll write all the logic for our chat application,

33
00:01:56,216 --> 00:01:59,408
I'm just going to create a new instance of Socket.

34
00:01:59,408 --> 00:02:01,911
IO here on the client as well.

35
00:02:01,911 --> 00:02:03,955
We'll just call that socket,

36
00:02:03,955 --> 00:02:09,404
and then we'll use the window-scoped IO object to initialize it,

37
00:02:09,404 --> 00:02:15,298
which is what we get when we include that script tag.

38
00:02:15,298 --> 00:02:17,700
So I'll save that up.

39
00:02:17,700 --> 00:02:19,100
And I'll kill my server.

40
00:02:19,100 --> 00:02:22,808
And I'll actually run the script with nodemon so we

41
00:02:22,808 --> 00:02:26,884
don't have to restart it every time.

42
00:02:26,884 --> 00:02:29,620
And if we refresh the page, go back out here,

43
00:02:29,620 --> 00:02:32,529
we should have our message that the socket was connected.

44
00:02:32,529 --> 00:02:36,405
So now we have a connection between the client and the server.

45
00:02:36,405 --> 00:02:41,280
And now we can start doing some interesting stuff with it.

46
00:02:41,280 --> 00:02:49,001
So, the first bit that I think we'll do, we'll start off on the client-side.

47
00:02:49,001 --> 00:02:52,094
We can use the client-side socket connection to emit

48
00:02:52,094 --> 00:02:54,583
events that will be received on the server.

49
00:02:54,583 --> 00:02:58,459
So I'm going to say socket.

50
00:02:58,459 --> 00:02:59,751
emit message.

51
00:02:59,751 --> 00:03:02,755
And in addition to Socket.

52
00:03:02,755 --> 00:03:05,694
IO, maybe I'll just, for good measure,

53
00:03:05,694 --> 00:03:11,406
grab a version of jQuery to help me grab some stuff out of the DOM.

54
00:03:11,406 --> 00:03:12,937
So for that message,

55
00:03:12,937 --> 00:03:18,544
I'm going to actually grab the current value of the form field.

56
00:03:18,544 --> 00:03:19,264
So,

57
00:03:19,264 --> 00:03:27,165
I'm going to emit the message and then the second --- so the

58
00:03:27,165 --> 00:03:29,986
message is kind of the event that other sockets can listen for

59
00:03:29,986 --> 00:03:31,697
and the server can listen for,

60
00:03:31,697 --> 00:03:34,397
and the second argument is essentially the data value

61
00:03:34,397 --> 00:03:36,948
that you want to send along with it.

62
00:03:36,948 --> 00:03:41,447
So, for the input of the chat object,

63
00:03:41,447 --> 00:03:47,033
I'm just going to grab the current value of that.

64
00:03:47,033 --> 00:03:53,929
And that's going to be enough logic to emit the current value of that.

65
00:03:53,929 --> 00:03:58,497
We also want to wrap that in an event handler,

66
00:03:58,497 --> 00:04:08,523
so we have that send button, so on click.

67
00:04:08,523 --> 00:04:13,458
That's when we want to grab the current value of that.

68
00:04:13,458 --> 00:04:20,114
And we'll emit that value back to the server.

69
00:04:20,114 --> 00:04:29,950
And then we'll also reset the value of like our local chat box back to null.

70
00:04:29,950 --> 00:04:33,870
So, that'll be kind of the send part of the equation here.

71
00:04:33,870 --> 00:04:38,894
Then back on the server to actually listen for that incoming event,

72
00:04:38,894 --> 00:04:43,174
we're going to listen for an event on that socket object that

73
00:04:43,174 --> 00:04:47,782
we get when somebody connects to the server.

74
00:04:47,782 --> 00:04:53,799
So, when that socket receives a message event,

75
00:04:53,799 --> 00:05:03,034
we are going to execute this logic on the server.

76
00:05:03,034 --> 00:05:04,111
And for now,

77
00:05:04,111 --> 00:05:10,027
we'll just acknowledge that we got it by writing that out to the console.

78
00:05:10,027 --> 00:05:15,273
And again, if everything went according to plan,

79
00:05:15,273 --> 00:05:22,124
we'll send some messages, and hopefully out here --- oh,

80
00:05:22,124 --> 00:05:22,809
no!

81
00:05:22,809 --> 00:05:23,814
Missing handler.

82
00:05:23,814 --> 00:05:26,325
Console is not a function.

83
00:05:26,325 --> 00:05:28,750
Oops, oh yeah, console.

84
00:05:28,750 --> 00:05:29,356
log.

85
00:05:29,356 --> 00:05:34,812
That would be a more effective thing to try.

86
00:05:34,812 --> 00:05:37,235
So we'll send that.

87
00:05:37,235 --> 00:05:40,263
And then here we go,

88
00:05:40,263 --> 00:05:48,643
we have some messages being emitted in real-time from the client to the server.

89
00:05:48,643 --> 00:05:51,892
Now we've implemented one half of this,

90
00:05:51,892 --> 00:05:57,726
but what we haven't done is send this out to any other connected client.

91
00:05:57,726 --> 00:05:58,185
So,

92
00:05:58,185 --> 00:06:05,091
what we can do when we want to send a message to every other socket

93
00:06:05,091 --> 00:06:08,882
that's currently connected is use the IO object,

94
00:06:08,882 --> 00:06:12,316
this guy that we created here,

95
00:06:12,316 --> 00:06:20,719
and use a method called emit to fire off a message on that

96
00:06:20,719 --> 00:06:23,534
object that will be received by every client.

97
00:06:23,534 --> 00:06:25,274
So, it's very similar, actually,

98
00:06:25,274 --> 00:06:30,313
to what we did on the client-side emitting that event.

99
00:06:30,313 --> 00:06:37,253
So we're going to emit a message event,

100
00:06:37,253 --> 00:06:45,332
and then we'll just relay that message that we just got.

101
00:06:45,332 --> 00:06:50,292
Alright, so, now after we emit that to every connected socket,

102
00:06:50,292 --> 00:06:55,458
up here on the client, we're going to have another event handler here,

103
00:06:55,458 --> 00:06:59,140
so on that message event.

104
00:06:59,140 --> 00:07:08,541
This is going to be fired every time a message event is emitted from the server.

105
00:07:08,541 --> 00:07:14,108
And what we want to do is on that unordered list that we had,

106
00:07:14,108 --> 00:07:17,933
just append a list item to it.

107
00:07:17,933 --> 00:07:22,304
So for that, what do we call that?

108
00:07:22,304 --> 00:07:23,744
Messages.

109
00:07:23,744 --> 00:07:35,263
We'll actually start by creating a li, oops,

110
00:07:35,263 --> 00:07:39,396
li =, create a li item,

111
00:07:39,396 --> 00:07:42,840
and we'll set the text of that to be the message

112
00:07:42,840 --> 00:07:46,288
that we got back from the server.

113
00:07:46,288 --> 00:07:51,223
And then, we'll append that list item to the messages.

114
00:07:51,223 --> 00:07:57,203
So now what should be happening is we'll emit a message from the client,

115
00:07:57,203 --> 00:07:59,007
it will be received on the server,

116
00:07:59,007 --> 00:08:04,370
and then the server will emit that message back to every other connected client.

117
00:08:04,370 --> 00:08:13,779
So, let's reload and see if that is indeed what we experience.

118
00:08:13,779 --> 00:08:18,008
So it looks like we have a very crappy real-time chat

119
00:08:18,008 --> 00:08:19,667
application running in the browser.

120
00:08:19,667 --> 00:08:20,305
And now,

121
00:08:20,305 --> 00:08:25,712
one other tool that is a constant companion for me and for many other

122
00:08:25,712 --> 00:08:31,779
developers that work with webhooks or have to expose their local development

123
00:08:31,779 --> 00:08:37,406
machines to the internet is a little tool called ngrok.

124
00:08:37,406 --> 00:08:42,623
And ngrok basically allows my laptop to get a

125
00:08:42,623 --> 00:08:46,037
publically addressable URL on the internet.

126
00:08:46,037 --> 00:08:51,095
So, this will allow all of your to test my application along with me.

127
00:08:51,095 --> 00:08:58,825
So this tool I'll call ngrok http, and we'll want to expose port 3000.

128
00:08:58,825 --> 00:09:10,840
And then I'll reserve the subdomain of frontendmasters.

129
00:09:10,840 --> 00:09:16,153
So now, if you go to frontendmasters.

130
00:09:16,153 --> 00:09:16,912
ngrok.

131
00:09:16,912 --> 00:09:24,563
io, we should see that interface that we just saw.

132
00:09:24,563 --> 00:09:29,191
And I'll start sending some messages.

133
00:09:29,191 --> 00:09:29,942
And hopefully,

134
00:09:29,942 --> 00:09:35,751
some of you out there will start sending some messages back to us as well.

135
00:09:35,751 --> 00:09:39,855
Try to keep it PG-13, this is a family show.

136
00:09:39,855 --> 00:09:43,607
Alright, so we got some folks coming in here.

137
00:09:43,607 --> 00:09:48,103
So, there we have, again, the magic of Socket.

138
00:09:48,103 --> 00:09:50,601
IO for all to see.

139
00:09:50,601 --> 00:09:53,828
Certainly something that I'm sure folks have seen before,

140
00:09:53,828 --> 00:09:58,279
but in just a tiny amount of code, a few lines in the client,

141
00:09:58,279 --> 00:10:08,000
a few lines on the server, we were able to create this real-time interface for our application.

