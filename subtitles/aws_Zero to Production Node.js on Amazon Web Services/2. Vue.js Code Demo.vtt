WEBVTT
1
00:00:03.654 --> 00:00:05.537
So rather than tell you about it,

2
00:00:05.537 --> 00:00:09.923
I thought I would write a little code to kind of demonstrate some of the

3
00:00:09.923 --> 00:00:14.129
key features of the framework that we're already taking advantage of in the

4
00:00:14.129 --> 00:00:18.230
TODO application in kind of a smaller chunk.

5
00:00:18.230 --> 00:00:26.840
So, I'll drop the JSFiddle here into the chat after we get through things here.

6
00:00:26.840 --> 00:00:32.467
But, I'm going to write a little bit of code here in this fiddle.

7
00:00:32.467 --> 00:00:34.936
I'm loading in Vue from npmcdn.

8
00:00:34.936 --> 00:00:35.347
com,

9
00:00:35.347 --> 00:00:40.050
which is actually kind of a nifty tool for loading in

10
00:00:40.050 --> 00:00:42.656
npm modules into your front-end code,

11
00:00:42.656 --> 00:00:47.707
especially in situations like this where you're wiping up a fiddle.

12
00:00:47.707 --> 00:00:49.671
So in any case,

13
00:00:49.671 --> 00:00:53.921
all I've started off with here is having Vue loaded

14
00:00:53.921 --> 00:00:55.876
in onto the global window scope,

15
00:00:55.876 --> 00:01:00.400
and then I've got a HTML element that I'm going to

16
00:01:00.400 --> 00:01:03.060
essentially bind my Vue component to.

17
00:01:03.060 --> 00:01:06.135
So, I'm going to create a new Vue.

18
00:01:06.135 --> 00:01:08.441
And what I'm going to endeavor,

19
00:01:08.441 --> 00:01:14.720
to do is to create a todo list interface which will show up in the

20
00:01:14.720 --> 00:01:18.073
lower right-hand corner of the screen over here.

21
00:01:18.073 --> 00:01:21.111
So, when I create a component, a Vue component,

22
00:01:21.111 --> 00:01:24.643
I'm going to bind it to an individual element,

23
00:01:24.643 --> 00:01:29.714
and here I pass in a selector for that component element.

24
00:01:29.714 --> 00:01:35.380
And, the first thing I'm probably going to want for my Vue is some kind of input,

25
00:01:35.380 --> 00:01:38.151
like a text field input,

26
00:01:38.151 --> 00:01:45.088
that's going to be the place where I actually type in my todo list item,

27
00:01:45.088 --> 00:01:48.611
and then I'll have a button --- hang on,

28
00:01:48.611 --> 00:01:50.884
I'll make this a little bigger.

29
00:01:50.884 --> 00:01:58.125
I'll have a button that you'll click to actually add the todo item.

30
00:01:58.125 --> 00:01:59.007
And then,

31
00:01:59.007 --> 00:02:05.634
I'll probably have an unordered list here of all the items on my todo list.

32
00:02:05.634 --> 00:02:10.512
So if I reload the page, I've got my user interface,

33
00:02:10.512 --> 00:02:15.058
but it doesn't actually do anything just yet.

34
00:02:15.058 --> 00:02:19.680
So the first bit that I'm going to do is declare a

35
00:02:19.680 --> 00:02:22.071
data attribute of my Vue component.

36
00:02:22.071 --> 00:02:27.239
So, this data attribute, when you declare it up front like this,

37
00:02:27.239 --> 00:02:32.585
basically allows Vue to monitor these properties of this data object.

38
00:02:32.585 --> 00:02:38.190
So if you make any changes to the properties of this object,

39
00:02:38.190 --> 00:02:41.348
those will update any user interface elements that

40
00:02:41.348 --> 00:02:43.249
are bound to those attributes.

41
00:02:43.249 --> 00:02:49.318
So, in this case, I'm going to create a data element for the todos,

42
00:02:49.318 --> 00:02:58.386
and maybe I'll seed it with one todo list item like get the milk,

43
00:02:58.386 --> 00:03:01.780
or something like that.

44
00:03:01.780 --> 00:03:04.608
So I've got --- oops, that's not what I wanted.

45
00:03:04.608 --> 00:03:05.796
I wanted that.

46
00:03:05.796 --> 00:03:10.534
So, I've got a Vue component with some basic data in it,

47
00:03:10.534 --> 00:03:15.511
and now I need to render that out to my user interface here.

48
00:03:15.511 --> 00:03:22.665
So, the way in which you do that in Vue is with an HTML directive,

49
00:03:22.665 --> 00:03:24.871
most of which for Vue.

50
00:03:24.871 --> 00:03:27.518
js are prefixed with a v-.

51
00:03:27.518 --> 00:03:34.687
And there's a directive called v-for which will loop over an array within

52
00:03:34.687 --> 00:03:39.222
your data model and output some template based on that.

53
00:03:39.222 --> 00:03:47.910
So, for todo in todos, which is this element of my data object down here,

54
00:03:47.910 --> 00:03:49.634
I'm going to render a list item,

55
00:03:49.634 --> 00:03:52.756
and then I'm going to use the double mustaches to

56
00:03:52.756 --> 00:03:56.208
output some data from my model.

57
00:03:56.208 --> 00:03:59.192
Then I'm just going to output todo.

58
00:03:59.192 --> 00:03:59.618
text.

59
00:03:59.618 --> 00:04:04.920
And when I reload that, I now get my list item updating.

60
00:04:04.920 --> 00:04:09.738
Now I need to kind of wire up my user interface here,

61
00:04:09.738 --> 00:04:12.205
such that I can enter a new todo list item,

62
00:04:12.205 --> 00:04:15.241
click the button, and something is going to happen.

63
00:04:15.241 --> 00:04:17.332
So for that, I'm going to do a couple of things.

64
00:04:17.332 --> 00:04:23.153
I'm going to bind the value of the input field to a

65
00:04:23.153 --> 00:04:25.984
property of my underlying data model.

66
00:04:25.984 --> 00:04:32.404
And the way that I do that in Vue is with this v-model directive.

67
00:04:32.404 --> 00:04:37.580
And I'm going to say I want to bind the value of this input

68
00:04:37.580 --> 00:04:40.571
field with a model field called newTodo,

69
00:04:40.571 --> 00:04:42.372
which doesn't yet exist,

70
00:04:42.372 --> 00:04:50.562
so I'm going to come down here and add that to my data model.

71
00:04:50.562 --> 00:04:56.489
And I'll initialize that to just be an empty string.

72
00:04:56.489 --> 00:05:02.074
And then to actually make it such that I can add new todo items,

73
00:05:02.074 --> 00:05:05.530
I have to make this button do something as well.

74
00:05:05.530 --> 00:05:10.269
There's also a directive for that, for binding event handlers on your HTML,

75
00:05:10.269 --> 00:05:13.427
and that directive is called v-on.

76
00:05:13.427 --> 00:05:16.058
And then after a colon,

77
00:05:16.058 --> 00:05:20.958
you can pass in the name of a DOM event that you're interested in binding.

78
00:05:20.958 --> 00:05:30.246
So v-on:click is going to be a model method that we haven't defined yet.

79
00:05:30.246 --> 00:05:31.726
We'll just call add.

80
00:05:31.726 --> 00:05:35.726
Now we need to go down here, back to our component,

81
00:05:35.726 --> 00:05:40.110
and in addition to tracking the element and the data associated with it,

82
00:05:40.110 --> 00:05:44.293
we're going to create some methods on our object,

83
00:05:44.293 --> 00:05:49.129
and we're going to create one called add.

84
00:05:49.129 --> 00:05:53.969
And what that add function is going to do,

85
00:05:53.969 --> 00:05:59.790
it's going to push a new item into our list of todos.

86
00:05:59.790 --> 00:06:06.308
So in this case, the text is going to be the current value of this.

87
00:06:06.308 --> 00:06:06.746
newTodo.

88
00:06:06.746 --> 00:06:11.813
So we're going to add that to our list of todos,

89
00:06:11.813 --> 00:06:16.488
and then we'll also blank out our newTodo item,

90
00:06:16.488 --> 00:06:19.949
setting that back to a blank string.

91
00:06:19.949 --> 00:06:30.163
So if I run that, I should be able to come over here and say new todo item,

92
00:06:30.163 --> 00:06:37.308
and click Enter, and it looks like by and large my little todo list is working.

93
00:06:37.308 --> 00:06:37.740
So,

94
00:06:37.740 --> 00:06:42.930
again what I think is really neat about this is with what

95
00:06:42.930 --> 00:06:47.154
is a very small amount of code and not having to change how

96
00:06:47.154 --> 00:06:49.681
I render my page very much,

97
00:06:49.681 --> 00:06:54.953
I get this really powerful data binding mechanism and event

98
00:06:54.953 --> 00:06:58.887
handling in this component which is pretty much completely

99
00:06:58.887 --> 00:07:01.864
decoupled from my HTML markup.

100
00:07:01.864 --> 00:07:06.626
So, there's lots more that Vue can do.

101
00:07:06.626 --> 00:07:10.180
For the exercise that I'm about to turn you loose on,

102
00:07:10.180 --> 00:07:13.844
you're going to want to definitely check out Vue's excellent guide,

103
00:07:13.844 --> 00:07:17.524
which kind of takes you through a lot of the core concepts you're going to

104
00:07:17.524 --> 00:07:29.084
need to learn to get up to speed on developing with Vue.

105
00:07:29.084 --> 00:07:29.794
And as always,

106
00:07:29.794 --> 00:07:33.638
we like to bring up the alternative slide here because there are always a

107
00:07:33.638 --> 00:07:36.962
million ways to do everything in the JavaScript world.

108
00:07:36.962 --> 00:07:39.804
We already kind of went over them.

109
00:07:39.804 --> 00:07:43.051
All of them are great alternatives to use.

110
00:07:43.051 --> 00:07:46.328
I explained some of the reasoning behind like why I'm kind of

111
00:07:46.328 --> 00:07:51.067
high on Vue because I feel like the value that it provides me

112
00:07:51.067 --> 00:07:55.262
is very high relative to what it asks of me in terms of how I

113
00:07:55.262 --> 00:08:00.728
structure my application, in terms of how many dependencies I need to load in.

114
00:08:00.728 --> 00:08:06.306
So, I think Vue is nice combination of features and weight.

115
00:08:06.306 --> 00:08:09.063
But, these other frameworks up here are also awesome.

116
00:08:09.063 --> 00:08:11.831
React is taking over the world.

117
00:08:11.831 --> 00:08:15.522
React Native is a really cool project especially.

118
00:08:15.522 --> 00:08:17.938
Ember does a lot of things really well.

119
00:08:17.938 --> 00:08:24.654
Backbone was kind of my previous go to for a lighter weight MVC-type thing.

120
00:08:24.654 --> 00:08:30.000
So all of these, totally awesome, you should use them if you like them if it makes you happy.

