WEBVTT
1
00:00:03.860 --> 00:00:08.167
So we'll take 20 minutes or so to go through that.

2
00:00:08.167 --> 00:00:12.511
We'll take a look at what this code could look like,

3
00:00:12.511 --> 00:00:16.229
and then we'll finish up with any questions or deeper dives into any of

4
00:00:16.229 --> 00:00:20.741
the topics that we covered over the last couple of days.

5
00:00:20.741 --> 00:00:21.326
Alright,

6
00:00:21.326 --> 00:00:27.172
so we'll at least go over the basic configuration in

7
00:00:27.172 --> 00:00:29.310
tracking the initial page view.

8
00:00:29.310 --> 00:00:35.217
And then the custom event tracking would happen within the guts of your Vue.

9
00:00:35.217 --> 00:00:38.459
js application as you're selecting different filters,

10
00:00:38.459 --> 00:00:42.541
if you're interested in tracking like which todos are

11
00:00:42.541 --> 00:00:43.907
being clicked and things like that.

12
00:00:43.907 --> 00:00:46.724
We'll kind of focus on the page view one right now.

13
00:00:46.724 --> 00:00:53.973
So, the first thing that you would need to do is npm intall universal-analytics,

14
00:00:53.973 --> 00:00:59.283
and then we would create a visitor,

15
00:00:59.283 --> 00:01:02.879
which we would have to propagate to other pieces of our application.

16
00:01:02.879 --> 00:01:07.816
So, we create a new visitor object with ua,

17
00:01:07.816 --> 00:01:13.087
and then we would pass in the tracking code that we created when we

18
00:01:13.087 --> 00:01:15.554
signed up for a new Google Analytics account.

19
00:01:15.554 --> 00:01:17.325
I actually already had one,

20
00:01:17.325 --> 00:01:22.198
so I just created a new property which gives me a

21
00:01:22.198 --> 00:01:26.486
tracking ID that I can use in my code.

22
00:01:26.486 --> 00:01:31.778
So I'm going to copy that and plop that guy right in there.

23
00:01:31.778 --> 00:01:41.770
Now, once I do that, the signature to actually track a page view is visitor.

24
00:01:41.770 --> 00:01:49.027
pageview and then we would pass in the current page being viewed.

25
00:01:49.027 --> 00:01:51.260
I think the default, if you don't pass one in,

26
00:01:51.260 --> 00:01:54.781
is just trying to get the location of the current page.

27
00:01:54.781 --> 00:01:58.089
But you could do something like window.

28
00:01:58.089 --> 00:01:58.992
location.

29
00:01:58.992 --> 00:02:05.315
href to pass in the current page.

30
00:02:05.315 --> 00:02:08.001
And then the event, the way that this particular API is set up,

31
00:02:08.001 --> 00:02:12.484
the event won't actually fire until you hit send.

32
00:02:12.484 --> 00:02:16.768
And then that will actually initially send off the page view to Google

33
00:02:16.768 --> 00:02:20.731
Analytics to track that event in your application.

34
00:02:20.731 --> 00:02:21.183
Now,

35
00:02:21.183 --> 00:02:27.006
the way that you would probably approach adding this to the router for

36
00:02:27.006 --> 00:02:30.217
the application is having this router function take,

37
00:02:30.217 --> 00:02:36.244
in addition to the Vue app as a parameter,

38
00:02:36.244 --> 00:02:39.460
also this visitor object.

39
00:02:39.460 --> 00:02:46.375
So if we go to the routes, in addition to taking the app,

40
00:02:46.375 --> 00:02:50.999
we'll accept a visitor as an argument.

41
00:02:50.999 --> 00:02:58.889
And then for each of those we'll configure the router to send a page

42
00:02:58.889 --> 00:03:03.408
view event when any of these routes are reached.

43
00:03:03.408 --> 00:03:03.933
So,

44
00:03:03.933 --> 00:03:08.974
within each of these in addition to setting this property on

45
00:03:08.974 --> 00:03:13.521
the Vue app that's going to be a part of the Vue model for the

46
00:03:13.521 --> 00:03:17.702
visibility of the current todos, we'll also call visitor.

47
00:03:17.702 --> 00:03:25.941
pageview and then we'll pass in / visibility,

48
00:03:25.941 --> 00:03:32.017
which is the shorthand for the slug that we're seeing.

49
00:03:32.017 --> 00:03:36.187
So we'll track all of those different filters as an

50
00:03:36.187 --> 00:03:38.528
individual page view in our application.

51
00:03:38.528 --> 00:03:39.657
And once again,

52
00:03:39.657 --> 00:03:44.685
we'll have to immediately hit send to actually send that off to Google.

53
00:03:44.685 --> 00:03:46.344
So in a single page application,

54
00:03:46.344 --> 00:03:49.240
this is typically what you would do if you are

55
00:03:49.240 --> 00:03:50.842
handling routing on the client-side.

56
00:03:50.842 --> 00:03:53.776
You'll need to manually send those page view events to

57
00:03:53.776 --> 00:03:56.056
Google or else every visit to your site,

58
00:03:56.056 --> 00:03:58.016
even if it's a single page application,

59
00:03:58.016 --> 00:04:00.824
will appear as if it was only a single page view when in fact they

60
00:04:00.824 --> 00:04:05.601
might be viewing multiple pages within your spa.

61
00:04:05.601 --> 00:04:07.951
So that's the basics of page views.

62
00:04:07.951 --> 00:04:11.204
And then also with that visitor object within your

63
00:04:11.204 --> 00:04:15.074
JavaScript that's going to be handling events for button

64
00:04:15.074 --> 00:04:17.902
clicks and other user-created events,

65
00:04:17.902 --> 00:04:22.058
you have the capacity to create those custom events,

66
00:04:22.058 --> 00:04:26.213
which you can then use in your Google Analytics reporting later on.

67
00:04:26.213 --> 00:04:29.587
But, that's pretty much all there is to it.

68
00:04:29.587 --> 00:04:32.933
The only bit that you probably are going to want to do,

69
00:04:32.933 --> 00:04:36.353
and that was part of the GitHub issue,

70
00:04:36.353 --> 00:04:41.520
was to only execute this logic if you're in production.

71
00:04:41.520 --> 00:04:45.728
So there's a couple ways you could do that,

72
00:04:45.728 --> 00:04:49.830
but probably the easiest is in the Vue.

73
00:04:49.830 --> 00:04:54.851
We already have some logic here that is conditionally

74
00:04:54.851 --> 00:05:01.966
executed based on the current environment,

75
00:05:01.966 --> 00:05:07.240
so inside this same conditional,

76
00:05:07.240 --> 00:05:16.624
we could place some additional JavaScript that would maybe just set like window.

77
00:05:16.624 --> 00:05:23.815
environmentType = production, or something like that.

78
00:05:23.815 --> 00:05:28.957
So we would conditionally create that JavaScript in our

79
00:05:28.957 --> 00:05:31.767
application and set that JavaScript property such that we

80
00:05:31.767 --> 00:05:34.714
could access it from our client-side code.

81
00:05:34.714 --> 00:05:38.976
So now, like say in our app.

82
00:05:38.976 --> 00:05:44.584
js, before we actually go to the trouble of creating this visitor,

83
00:05:44.584 --> 00:05:51.046
we could do a check, so if window.

84
00:05:51.046 --> 00:05:55.525
environmentType == production,

85
00:05:55.525 --> 00:06:03.897
then you would actually go through and create the visitor,

86
00:06:03.897 --> 00:06:07.251
otherwise you wouldn't because you won't want to

87
00:06:07.251 --> 00:06:09.881
track that stuff in development mode.

88
00:06:09.881 --> 00:06:11.948
Once you actually do get this implemented,

89
00:06:11.948 --> 00:06:18.388
there is a delay before the data starts coming into Google Analytics.

90
00:06:18.388 --> 00:06:20.596
It says it can be up to a couple of hours.

91
00:06:20.596 --> 00:06:25.560
In my experience, it can be anything from a few minutes to a couple hours.

92
00:06:25.560 --> 00:06:28.486
So it'll be kind of dependent on how things are moving

93
00:06:28.486 --> 00:06:30.830
through the Google tubes on a given day.

94
00:06:30.830 --> 00:06:36.056
But it could take quite some time before the data starts showing up.

95
00:06:36.056 --> 00:06:36.618
So,

96
00:06:36.618 --> 00:06:42.116
that is a one handy way to implement Google Analytics and

97
00:06:42.116 --> 00:06:49.000
integrate it within the rest of your JavaScript. if you're building a JavaScript application in this way.

