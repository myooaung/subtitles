1
00:00:03,761 --> 00:00:07,740
If you want to build something similar, the Socket.

2
00:00:07,740 --> 00:00:12,342
IO documentation is actually fairly good on this front.

3
00:00:12,342 --> 00:00:16,096
So if you just go to socket.

4
00:00:16,096 --> 00:00:19,314
io, and click on Getting Started,

5
00:00:19,314 --> 00:00:22,993
you can do pretty much what I'm about to do here by going through this

6
00:00:22,993 --> 00:00:30,089
tutorial in setting up a basic chat application.

7
00:00:30,089 --> 00:00:32,631
So, what we're going to need to do to use Socket.

8
00:00:32,631 --> 00:00:37,780
IO --- I'll use it in a simple sort of stand-alone project first,

9
00:00:37,780 --> 00:00:42,351
and then I'll pose a challenge to the group to integrate Socket.

10
00:00:42,351 --> 00:00:44,648
IO in our TODO list application as well.

11
00:00:44,648 --> 00:00:47,500
So, first thing we're going to need to do,

12
00:00:47,500 --> 00:00:51,157
we already have, if memory serves,

13
00:00:51,157 --> 00:00:56,302
we have an Express module installed in this directory.

14
00:00:56,302 --> 00:00:58,286
Yep, there we go.

15
00:00:58,286 --> 00:01:01,263
But we don't yet have Socket.

16
00:01:01,263 --> 00:01:01,759
IO.

17
00:01:01,759 --> 00:01:07,784
So I'm going to install that now.

18
00:01:07,784 --> 00:01:09,505
And Socket.

19
00:01:09,505 --> 00:01:14,717
IO works alongside pretty much every node web framework.

20
00:01:14,717 --> 00:01:20,626
It requires an HTTP server instance to do things like serve up the client-side

21
00:01:20,626 --> 00:01:27,827
interface JavaScript to the browser and a few other bits.

22
00:01:27,827 --> 00:01:31,043
And I'll show you how to kind of set that up on the server-side first.

23
00:01:31,043 --> 00:01:34,290
So, if we open this up,

24
00:01:34,290 --> 00:01:39,902
this is the simple Express example that we looked at yesterday

25
00:01:39,902 --> 00:01:43,325
that showed us the basics of creating middleware.

26
00:01:43,325 --> 00:01:49,556
And in that application, we let Express create an HTTP server for us,

27
00:01:49,556 --> 00:01:54,342
but in this instance, we're actually not going to be doing that.

28
00:01:54,342 --> 00:02:05,476
So, let's go ahead and require the HTTP module from core node.

29
00:02:05,476 --> 00:02:09,427
And, we're also going to require the Socket.

30
00:02:09,427 --> 00:02:10,415
IO module.

31
00:02:10,415 --> 00:02:16,739
We're actually just going to create --- I'll require that,

32
00:02:16,739 --> 00:02:19,075
we'll actually require that here in a little bit.

33
00:02:19,075 --> 00:02:23,563
So now instead of calling listen on our Express app

34
00:02:23,563 --> 00:02:29,323
after we create our Express app, we're going to create an HTTP server.

35
00:02:29,323 --> 00:02:46,516
(Creating) And then, we're going to have that server listen on port 3000.

36
00:02:46,516 --> 00:02:53,580
And this time we'll pass in a little function that's going to say that our

37
00:02:53,580 --> 00:03:00,200
server is running just so we know that it's working fine.

38
00:03:00,200 --> 00:03:03,624
Alright, so we have our server there.

39
00:03:03,624 --> 00:03:07,779
Now that we have our Express application set up,

40
00:03:07,779 --> 00:03:12,783
we're also going to serve up some static assets so we can see

41
00:03:12,783 --> 00:03:15,468
what's happening on the HTML side of things.

42
00:03:15,468 --> 00:03:22,317
So we're going to use the built-in Express static server.

43
00:03:22,317 --> 00:03:22,814
And,

44
00:03:22,814 --> 00:03:28,777
we're going to server up the public directory which has yet to

45
00:03:28,777 --> 00:03:32,822
be created from within the current directory.

46
00:03:32,822 --> 00:03:35,978
So if there's any HTML, CSS, JavaScript,

47
00:03:35,978 --> 00:03:41,035
other assets, they'll be loaded from this public folder.

48
00:03:41,035 --> 00:03:45,941
Here, let me just pull this up.

49
00:03:45,941 --> 00:03:57,504
(Typing) Alright, so once we get that piece all set up,

50
00:03:57,504 --> 00:04:00,254
we have our regular, old Express app.

51
00:04:00,254 --> 00:04:05,723
Now we need to --- let's maybe start by creating that HTML

52
00:04:05,723 --> 00:04:09,059
application next that will be using the Socket.

53
00:04:09,059 --> 00:04:11,144
IO stuff on the client-side.

54
00:04:11,144 --> 00:04:17,004
So we'll create an index.

55
00:04:17,004 --> 00:04:18,176
html.

56
00:04:18,176 --> 00:04:27,332
And we'll just have some basic markup here,

57
00:04:27,332 --> 00:04:35,909
maybe an unordered list which will have our messages.

58
00:04:35,909 --> 00:04:50,307
And then we'll have a form or maybe even just an input type text.

59
00:04:50,307 --> 00:04:54,511
And then this is going to be the way in which users are going to interact

60
00:04:54,511 --> 00:04:59,206
with our application by typing in some chat messages.

61
00:04:59,206 --> 00:05:11,138
And then we'll have a button to actually send that message out to some folks.

62
00:05:11,138 --> 00:05:15,256
Alright, so we have our basic Express app running here.

63
00:05:15,256 --> 00:05:18,808
We actually don't need any of this anymore.

64
00:05:18,808 --> 00:05:25,652
And, if we've done everything correctly, we should have an Express app running.

65
00:05:25,652 --> 00:05:31,778
Oh yeah, we already have one running on port 3000 over here.

66
00:05:31,778 --> 00:05:32,164
Alright,

67
00:05:32,164 --> 00:05:43,000
so we should have a server running on port 3000 that just has basic HTML UI here that eventually will become a chat application.

