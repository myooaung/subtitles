1
00:00:09,500 --> 00:00:12,075
Now I'm going to talk a little bit about a few tools that we

2
00:00:12,075 --> 00:00:17,968
found really useful in monitoring and sort of preparing our

3
00:00:17,968 --> 00:00:19,871
applications for production.

4
00:00:19,871 --> 00:00:24,500
The two aspects that I'm going to focus on and give you a little

5
00:00:24,500 --> 00:00:29,830
demo of this afternoon are a load testing tool called Locust and

6
00:00:29,830 --> 00:00:34,202
an error tracking service that lots of teens use at Twilio

7
00:00:34,202 --> 00:00:35,658
actually called Rollbar,

8
00:00:35,658 --> 00:00:43,115
which will take exceptions in our application and put them in a

9
00:00:43,115 --> 00:00:46,337
service that will notify us if bad things happen in our

10
00:00:46,337 --> 00:00:48,990
application while it's running in production.

11
00:00:48,990 --> 00:00:51,016
So I'll do a quick demo of Locust,

12
00:00:51,016 --> 00:00:55,266
and then I'll turn you all loose on starting to add in some error

13
00:00:55,266 --> 00:00:57,752
handling in our application on the server-side,

14
00:00:57,752 --> 00:01:01,732
which we haven't actually done yet, if you might have noticed.

15
00:01:01,732 --> 00:01:06,385
So, the first thing I'm going to show you is a tool called Locust.

16
00:01:06,385 --> 00:01:10,732
There are load testing tools for just about every platform.

17
00:01:10,732 --> 00:01:15,561
This particular one is a Python-based tool that I've

18
00:01:15,561 --> 00:01:19,093
favored because it's relatively easy to use,

19
00:01:19,093 --> 00:01:22,634
it gives really good reporting output and is

20
00:01:22,634 --> 00:01:26,697
configurable through a web interface, which I'll show you here in a second.

21
00:01:26,697 --> 00:01:29,277
It's got a large community around it,

22
00:01:29,277 --> 00:01:33,385
and it allows you using Python code to actually simulate

23
00:01:33,385 --> 00:01:37,526
different types of usage scenarios on your website.

24
00:01:37,526 --> 00:01:41,103
So the flexibility of the configuration,

25
00:01:41,103 --> 00:01:42,704
and the maturity of the tool,

26
00:01:42,704 --> 00:01:46,461
as well as sort of the general usability are some reasons why I

27
00:01:46,461 --> 00:01:49,382
favor it over other things that are out there.

28
00:01:49,382 --> 00:01:53,617
The production monitoring tool we're going to take a look at is called Rollbar.

29
00:01:53,617 --> 00:01:58,677
It's a third-party service whose API you integrate into your application.

30
00:01:58,677 --> 00:02:02,524
And when handled exceptions are raised,

31
00:02:02,524 --> 00:02:10,384
you can send that exception data to this service and it'll send out

32
00:02:10,384 --> 00:02:14,850
notifications to whatever provider you happen to have configured.

33
00:02:14,850 --> 00:02:15,757
At Twilio,

34
00:02:15,757 --> 00:02:20,670
we use PagerDuty to create a schedule of folks that are response for

35
00:02:20,670 --> 00:02:23,662
responding to issues and outages on the website.

36
00:02:23,662 --> 00:02:28,011
So Rollbar does server-side stuff too?

37
00:02:28,011 --> 00:02:28,933
It's fully server-side.

38
00:02:28,933 --> 00:02:32,761
I mean yeah I think you might be able to do client-side,

39
00:02:32,761 --> 00:02:36,335
but we only use it for the server-side.

40
00:02:36,335 --> 00:02:38,335
You can use TrackJS on the client-side.

41
00:02:38,335 --> 00:02:40,982
I know you can use TrackJS on the client-side.

42
00:02:40,982 --> 00:02:46,438
Minor plug for our hometown hero, Todd Gardner.

43
00:02:46,438 --> 00:02:47,427
But yeah,

44
00:02:47,427 --> 00:02:52,372
so Rollbar is used across many services at Twilio to

45
00:02:52,372 --> 00:02:54,824
notify folks that things are going wrong,

46
00:02:54,824 --> 00:02:58,276
and it's something that I've really come to enjoy.

47
00:02:58,276 --> 00:03:02,756
If you have identifying information about a user at

48
00:03:02,756 --> 00:03:05,840
the time an exception is thrown, you can,

49
00:03:05,840 --> 00:03:07,382
in your Rollbar output,

50
00:03:07,382 --> 00:03:12,956
see which user and exception was generated from the origin.

51
00:03:12,956 --> 00:03:14,132
If you have Rollbar configured correctly,

52
00:03:14,132 --> 00:03:17,080
you can get a lot of very useful information about

53
00:03:17,080 --> 00:03:19,706
any exception in your application.

54
00:03:19,706 --> 00:03:22,198
So, definitely worth checking out,

55
00:03:22,198 --> 00:03:30,000
and it integrates very nicely with Express applications, as you will find out when you check out the exercise.

