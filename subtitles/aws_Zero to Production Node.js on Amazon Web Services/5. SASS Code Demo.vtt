WEBVTT
1
00:00:03.850 --> 00:00:08.755
The other bit that I was going to show is just a few minor features of SCSS.

2
00:00:08.755 --> 00:00:15.597
So here is the very simple CSS that we have for the application.

3
00:00:15.597 --> 00:00:21.148
Most of the styling for the todomvc application is provided by some

4
00:00:21.148 --> 00:00:26.329
external style sheets that we don't necessarily care about.

5
00:00:26.329 --> 00:00:31.941
Those are actually located here in the base and index style sheets.

6
00:00:31.941 --> 00:00:34.378
All of the different implementations of todomvc,

7
00:00:34.378 --> 00:00:41.859
of which there are many by the way, I don't know if I called that out yesterday,

8
00:00:41.859 --> 00:00:44.292
but if you're interested in seeing like the same application

9
00:00:44.292 --> 00:00:49.699
implemented across multiple frameworks, you can head out todomvc.

10
00:00:49.699 --> 00:00:53.261
com and kind of compare and contrast different approaches to this.

11
00:00:53.261 --> 00:00:57.954
So is this the place where I got the code if you

12
00:00:57.954 --> 00:00:59.910
haven't navigated out there already.

13
00:00:59.910 --> 00:01:06.335
So in our case, we actually don't have a lot of custom CSS yet,

14
00:01:06.335 --> 00:01:09.726
but some of the features that Sass provides you that you

15
00:01:09.726 --> 00:01:13.700
wouldn't necessarily have otherwise are the ability to create

16
00:01:13.700 --> 00:01:17.619
variables and mixins and to nest your CSS,

17
00:01:17.619 --> 00:01:24.364
which is actually one of the things that I find most useful.

18
00:01:24.364 --> 00:01:32.592
So, if our server --- let's go ahead and run our server.

19
00:01:32.592 --> 00:01:34.966
Oh, come on now.

20
00:01:34.966 --> 00:01:36.153
Unexpected character.

21
00:01:36.153 --> 00:01:52.309
Oh yeah, I didn't back out the JavaScript changes, so let's do that.

22
00:01:52.309 --> 00:01:55.908
Okay, super!

23
00:01:55.908 --> 00:01:58.346
Alright, so here's our todo application.

24
00:01:58.346 --> 00:01:59.971
As you can see,

25
00:01:59.971 --> 00:02:06.898
I was spamming in quite a few entries into the todo list earlier on.

26
00:02:06.898 --> 00:02:09.556
But when I'm writing my CSS code,

27
00:02:09.556 --> 00:02:15.225
I'm usually kind of concerned about the structure of my HTML.

28
00:02:15.225 --> 00:02:22.149
So I have this section where all of my todos are,

29
00:02:22.149 --> 00:02:25.854
I have this unordered list with all my todos,

30
00:02:25.854 --> 00:02:31.525
and I'm use to being able to write HTML in a nice nested structure like this,

31
00:02:31.525 --> 00:02:37.118
and Sass lets me write CSS in that nested structure as well.

32
00:02:37.118 --> 00:02:38.344
So in here,

33
00:02:38.344 --> 00:02:45.115
let's say I wanted to add some styling to the list items in my main class.

34
00:02:45.115 --> 00:02:45.581
So,

35
00:02:45.581 --> 00:02:51.774
I can come in here and write a selector for the main div

36
00:02:51.774 --> 00:02:55.473
much like you would in Vanilla CSS,

37
00:02:55.473 --> 00:03:04.601
and what I could do if I wanted to target the list items of this list,

38
00:03:04.601 --> 00:03:10.123
I could write a selector that went something like this.

39
00:03:10.123 --> 00:03:14.990
So for the unordered, excuse me, the unordered list items,

40
00:03:14.990 --> 00:03:19.638
these are the CSS classes I would like to apply.

41
00:03:19.638 --> 00:03:23.510
But that's not super dry because if I also wanted to

42
00:03:23.510 --> 00:03:25.933
style the unordered list itself,

43
00:03:25.933 --> 00:03:32.237
I'd have to another CSS declaration up there to do that.

44
00:03:32.237 --> 00:03:37.532
So one of the nice things that you can do in Sass is nest those declarations.

45
00:03:37.532 --> 00:03:46.107
So, within the main div I'm going to add some styles to the ul.

46
00:03:46.107 --> 00:03:49.277
Let's say --- this might break the layout,

47
00:03:49.277 --> 00:03:54.444
but I'll add a nice big padding all the way around the unordered list,

48
00:03:54.444 --> 00:04:01.440
and then for the list items I'm going to change the font-style

49
00:04:01.440 --> 00:04:08.938
obviously to Comic Sans MS to class it up a little bit.

50
00:04:08.938 --> 00:04:13.432
So our tooling found the changes to the Sass,

51
00:04:13.432 --> 00:04:17.494
automatically recompiled, and if I come back out here,

52
00:04:17.494 --> 00:04:20.741
looks like I needed to be more specific with my list item styling,

53
00:04:20.741 --> 00:04:25.621
but I've got my big padding around the ul.

54
00:04:25.621 --> 00:04:30.568
Obviously, we could just do that.

55
00:04:30.568 --> 00:04:32.168
I won't actually fix it.

56
00:04:32.168 --> 00:04:36.566
I just saw a tweet that important is kind of like

57
00:04:36.566 --> 00:04:39.274
importing ants --- Importing ants.

58
00:04:39.274 --> 00:04:40.995
--- into CSS.

59
00:04:40.995 --> 00:04:44.083
In fact, it must not be li, like there are probably --- oh,

60
00:04:44.083 --> 00:04:49.187
there's another div in here called the view and an input.

61
00:04:49.187 --> 00:04:54.514
And oh, it's a label, so I don't know if it's cascading down that far.

62
00:04:54.514 --> 00:04:57.405
So, maybe if I did the label.

63
00:04:57.405 --> 00:05:01.534
I just have to see it in Comic Sans now.

64
00:05:01.534 --> 00:05:02.161
I have to get my fix.

65
00:05:02.161 --> 00:05:08.053
Actually, it's because of your CSS properties use font-style.

66
00:05:08.053 --> 00:05:11.028
Font-family, oh yeah.

67
00:05:11.028 --> 00:05:14.003
There we go.

68
00:05:14.003 --> 00:05:20.944
Ooh there we go, much better, yes.

69
00:05:20.944 --> 00:05:21.409
So,

70
00:05:21.409 --> 00:05:26.987
that's one of my favorite features is that you can keep your

71
00:05:26.987 --> 00:05:31.987
CSS much drier by nesting it in this way.

72
00:05:31.987 --> 00:05:38.326
And let's say now that we've decided that Comic Sans is

73
00:05:38.326 --> 00:05:42.438
clearly the best font for this application,

74
00:05:42.438 --> 00:05:45.316
and we want to apply it globally,

75
00:05:45.316 --> 00:05:51.905
we can create a variable called appFont or something like that

76
00:05:51.905 --> 00:05:58.502
and essentially set that equal to this string.

77
00:05:58.502 --> 00:06:02.470
So we can use this Comic Sans MS font-family declaration,

78
00:06:02.470 --> 00:06:08.051
and we can use that variable here as the appFont.

79
00:06:08.051 --> 00:06:14.630
We could also say for our, I believe it's an h1, I'll double check.

80
00:06:14.630 --> 00:06:22.490
Let's say for the h1 in our application I want to do the same thing.

81
00:06:22.490 --> 00:06:27.211
I want to use the appFont font-family.

82
00:06:27.211 --> 00:06:30.646
So if I come out here and refresh, that is actually quite a bit better.

83
00:06:30.646 --> 00:06:35.259
I think they should've done that to begin with.

84
00:06:35.259 --> 00:06:38.101
So a few bits there are really useful.

85
00:06:38.101 --> 00:06:42.593
And let's say like your CSS is getting a little crazy.

86
00:06:42.593 --> 00:06:48.106
You feel the need to break it up a little bit.

87
00:06:48.106 --> 00:06:53.442
If you want to import CSS into regular CSS style sheets,

88
00:06:53.442 --> 00:06:55.981
there's one and only one place you can do that,

89
00:06:55.981 --> 00:06:59.383
which is at the top of the CSS file,

90
00:06:59.383 --> 00:07:05.643
and you can't do that nested within other CSS declarations.

91
00:07:05.643 --> 00:07:10.942
But what we can do with Sass is move this content

92
00:07:10.942 --> 00:07:13.355
out to something called a partial,

93
00:07:13.355 --> 00:07:16.904
which by convention is a file --- as a file name,

94
00:07:16.904 --> 00:07:21.564
we prefix it with an underscore.

95
00:07:21.564 --> 00:07:25.446
We could call this _main.

96
00:07:25.446 --> 00:07:26.223
scss.

97
00:07:26.223 --> 00:07:35.884
And here in that Sass file I can have these declarations.

98
00:07:35.884 --> 00:07:39.646
And not necessarily that you would structure it in this way,

99
00:07:39.646 --> 00:07:47.743
but now rather than declaring them in line,

100
00:07:47.743 --> 00:07:53.815
I can actually include the main.

101
00:07:53.815 --> 00:07:54.827
scss.

102
00:07:54.827 --> 00:07:56.566
Is that underscoring it?

103
00:07:56.566 --> 00:08:02.938
The underscore is conventional, it denotes a Sass file as a partial,

104
00:08:02.938 --> 00:08:07.406
and when you do the include,

105
00:08:07.406 --> 00:08:14.108
like you don't actually need to include the underscore.

106
00:08:14.108 --> 00:08:18.280
Include expected identifier was.

107
00:08:18.280 --> 00:08:19.322
What?

108
00:08:19.322 --> 00:08:23.494
Oh, you know what?

109
00:08:23.494 --> 00:08:25.731
I think I just goofed this up.

110
00:08:25.731 --> 00:08:27.968
I don't think I need the parentheses.

111
00:08:27.968 --> 00:08:33.453
I think I can just do that.

112
00:08:33.453 --> 00:08:39.721
Or maybe do I not even need that?

113
00:08:39.721 --> 00:08:42.980
I might have to --- what's that?

114
00:08:42.980 --> 00:08:45.487
Is it include or import?

115
00:08:45.487 --> 00:08:53.100
I thought it was include, and I think I do need the quotes.

116
00:08:53.100 --> 00:08:56.058
Yeah, I think it might be import.

117
00:08:56.058 --> 00:08:57.749
Yeah, there we go.

118
00:08:57.749 --> 00:09:02.224
Yeah, it's the danger of doing it live that's for sure.

119
00:09:02.224 --> 00:09:09.327
So now if I refresh my page, I still have my same stylings there.

120
00:09:09.327 --> 00:09:13.703
So, you can include like nested CSS in this way as well.

121
00:09:13.703 --> 00:09:17.885
So basically it gives your application CSS an entirely new

122
00:09:17.885 --> 00:09:23.428
bag of tricks that it didn't have before.

123
00:09:23.428 --> 00:09:28.869
What is it that's actually monitoring the Sass files and compiling it to CSS?

124
00:09:28.869 --> 00:09:30.072
Yeah, right on.

125
00:09:30.072 --> 00:09:31.676
So, in our Gruntfile,

126
00:09:31.676 --> 00:09:37.582
the default task which runs like the development app server is this one,

127
00:09:37.582 --> 00:09:39.045
the default task,

128
00:09:39.045 --> 00:09:43.425
and what's going to do is it's initially going to compile our Sass

129
00:09:43.425 --> 00:09:45.478
and run our JavaScript code through Browserify,

130
00:09:45.478 --> 00:09:47.852
like right away when we launch it,

131
00:09:47.852 --> 00:09:52.102
and then it's going to launch this task concurrent:dev,

132
00:09:52.102 --> 00:09:53.995
and that's going to do two things.

133
00:09:53.995 --> 00:09:56.464
It's going launch two tasks, one of which is nodemon,

134
00:09:56.464 --> 00:09:59.936
which is going to watch for changes to our server-side JavaScript,

135
00:09:59.936 --> 00:10:04.315
and the other is this guy.

136
00:10:04.315 --> 00:10:05.421
Where is concurrent?

137
00:10:05.421 --> 00:10:07.265
Where did I define that?

138
00:10:07.265 --> 00:10:08.026
Here we go.

139
00:10:08.026 --> 00:10:11.577
So, here's were we defined like the tasks that we want to run concurrently.

140
00:10:11.577 --> 00:10:12.668
One of them is watch,

141
00:10:12.668 --> 00:10:16.163
which is going to recompile our Sass in our front-end JavaScript,

142
00:10:16.163 --> 00:10:21.522
and then the other one is nodemon.

143
00:10:21.522 --> 00:10:21.950
So,

144
00:10:21.950 --> 00:10:25.370
it's really Grunt that's in the background watching

145
00:10:25.370 --> 00:10:28.371
for changes to your Sass files.

146
00:10:28.371 --> 00:10:30.799
Yeah, it's a Grunt plugin called watch.

147
00:10:30.799 --> 00:10:36.053
It's one of the --- it's in the contrib package here.

148
00:10:36.053 --> 00:10:45.000
So this watch plugin has that capability. It can run tasks when a certain condition is true.

