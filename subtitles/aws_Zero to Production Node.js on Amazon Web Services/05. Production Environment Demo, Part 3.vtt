WEBVTT
1
00:00:04.023 --> 00:00:06.249
There's a lot of different configuration options here,

2
00:00:06.249 --> 00:00:08.490
which I'll get into in a little bit.

3
00:00:08.490 --> 00:00:11.016
But now that we have the security group created,

4
00:00:11.016 --> 00:00:15.562
I'm going to go ahead and create an Amazon RDS instance

5
00:00:15.562 --> 00:00:20.595
to associate with this environment.

6
00:00:20.595 --> 00:00:25.272
So it is possible to create an RDS instance within the

7
00:00:25.272 --> 00:00:27.660
Elastic Beanstalk administrative interface,

8
00:00:27.660 --> 00:00:33.455
but they recommend against doing that for a production configuration

9
00:00:33.455 --> 00:00:36.594
because environments are not necessarily durable,

10
00:00:36.594 --> 00:00:42.206
like they do get created and deleted with more frequency.

11
00:00:42.206 --> 00:00:45.306
So the typical way that you're instructed to set this up is to

12
00:00:45.306 --> 00:00:49.994
create an RDS instance independently and then add it to the

13
00:00:49.994 --> 00:00:53.676
security group associated with your Elastic Beanstalk EC2

14
00:00:53.676 --> 00:00:57.107
instances so they can talk to each other.

15
00:00:57.107 --> 00:01:00.418
So that's what we're going to do right now.

16
00:01:00.418 --> 00:01:08.777
So, we'll scroll down on the console home page and go to RDS,

17
00:01:08.777 --> 00:01:15.348
and we'll go down to Instances, and we are going to Launch a DB Instance.

18
00:01:15.348 --> 00:01:18.858
And in this case, we are going to choose Prosgres,

19
00:01:18.858 --> 00:01:27.908
and to stay in the Free Tier we'll use this Dev/Test version of Postgres.

20
00:01:27.908 --> 00:01:30.596
And then the other handy option here is Only show options

21
00:01:30.596 --> 00:01:34.008
that are eligible for the Free Tier.

22
00:01:34.008 --> 00:01:41.161
So for just messing around, it's good to check that out.

23
00:01:41.161 --> 00:01:50.239
And we can leave the defaults here for the most part.

24
00:01:50.239 --> 00:02:01.086
So the Database Instance Identifier, we will call Todos or todomvc,

25
00:02:01.086 --> 00:02:02.619
it doesn't really matter,

26
00:02:02.619 --> 00:02:08.388
and then we're going to configure a username and password for our database.

27
00:02:08.388 --> 00:02:14.186
Now in this case, because our database isn't open to the world,

28
00:02:14.186 --> 00:02:17.743
these aren't necessarily super secret squirrel values,

29
00:02:17.743 --> 00:02:26.222
so I'm going to choose awsuser and awspassword for these values.

30
00:02:26.222 --> 00:02:41.532
(Working) And now I'm going to select the security

31
00:02:41.532 --> 00:02:44.983
group to add this instance to.

32
00:02:44.983 --> 00:02:47.085
I can leave those default settings,

33
00:02:47.085 --> 00:02:52.323
but I need to be able to choose the security group

34
00:02:52.323 --> 00:02:56.384
associated with my eb instance.

35
00:02:56.384 --> 00:03:00.303
So, let's see, awseb security group.

36
00:03:00.303 --> 00:03:04.223
I forget what it actually was.

37
00:03:04.223 --> 00:03:08.243
Let me go to my output here.

38
00:03:08.243 --> 00:03:15.113
Might have to go refresh my memory on which one that was.

39
00:03:15.113 --> 00:03:17.956
And as we can see,

40
00:03:17.956 --> 00:03:22.133
our environment is degraded right now because it's under configured,

41
00:03:22.133 --> 00:03:24.987
and we still need to do a few things.

42
00:03:24.987 --> 00:03:28.435
I'm going to go in here, go into my instance configuration,

43
00:03:28.435 --> 00:03:39.476
and see that security group is like something that looks like that,

44
00:03:39.476 --> 00:03:40.396
x2iaq.

45
00:03:40.396 --> 00:03:42.297
And we don't want the load balancer security group.

46
00:03:42.297 --> 00:03:46.543
We want the Elastic Beanstalk security group because it's those EC2

47
00:03:46.543 --> 00:03:51.609
instances that need to actually talk to the database.

48
00:03:51.609 --> 00:03:53.818
And now these values matter.

49
00:03:53.818 --> 00:03:58.302
If you remember like the database name that we have

50
00:03:58.302 --> 00:04:01.085
configured by default in our configuration,

51
00:04:01.085 --> 00:04:03.629
I believe is just called todos,

52
00:04:03.629 --> 00:04:09.157
so that's what we're going to call it in our actual application as well.

53
00:04:09.157 --> 00:04:11.768
We can leave the default port,

54
00:04:11.768 --> 00:04:17.681
and a lot of these other options we can tweak a little bit,

55
00:04:17.681 --> 00:04:21.488
but right now we can launch our instance.

56
00:04:21.488 --> 00:04:25.955
And it is going to take a few minutes.

57
00:04:25.955 --> 00:04:27.522
That is not a lie.

58
00:04:27.522 --> 00:04:29.716
So that instance is being spun up.

59
00:04:29.716 --> 00:04:32.312
It's going to be added to the security group that our

60
00:04:32.312 --> 00:04:35.622
Elastic Beanstalk application can access.

61
00:04:35.622 --> 00:04:38.697
So while that's happening,

62
00:04:38.697 --> 00:04:43.515
let's head back into the console for Elastic Beanstalk and do some

63
00:04:43.515 --> 00:04:47.147
configuration that we needed to take care of anyway.

64
00:04:47.147 --> 00:04:53.732
So, for the --- at the software level, there's a couple things we need to do.

65
00:04:53.732 --> 00:04:58.765
So the software configuration refers to the actual Linux operating

66
00:04:58.765 --> 00:05:01.381
environment that our application is executing in,

67
00:05:01.381 --> 00:05:07.897
and there's some other properties that we can tweak in here that'll be useful.

68
00:05:07.897 --> 00:05:09.672
So, for a Node.

69
00:05:09.672 --> 00:05:10.559
js instance,

70
00:05:10.559 --> 00:05:14.669
you have the option of using either NGINX or Apache

71
00:05:14.669 --> 00:05:16.633
as a proxy server for your Node.

72
00:05:16.633 --> 00:05:20.043
js application, or you can use no proxy server at all,

73
00:05:20.043 --> 00:05:22.720
but probably you do want to have that.

74
00:05:22.720 --> 00:05:28.024
And then you can specify which Node version you'd like to run on your instances,

75
00:05:28.024 --> 00:05:31.620
and the most recent version of Node that you can elect

76
00:05:31.620 --> 00:05:33.867
for your instance right now is 6.

77
00:05:33.867 --> 00:05:34.187
2.

78
00:05:34.187 --> 00:05:34.506
2.

79
00:05:34.506 --> 00:05:39.056
There's a listing of this in the documentation that you can refer to.

80
00:05:39.056 --> 00:05:44.636
So we'll update that to the latest Node version that we can.

81
00:05:44.636 --> 00:05:49.404
We'll leave this blank because we have an npm start script,

82
00:05:49.404 --> 00:05:51.802
which is going to specify the command which

83
00:05:51.802 --> 00:05:54.008
actually launches our web application.

84
00:05:54.008 --> 00:05:57.980
And now when we scroll down a little bit.

85
00:05:57.980 --> 00:06:01.053
There are a couple of pieces that we do want to configure.

86
00:06:01.053 --> 00:06:08.905
So one of the things we want to make sure we do is have our static assets

87
00:06:08.905 --> 00:06:14.900
served by NGINX rather than Node because NGINX is going to do a much

88
00:06:14.900 --> 00:06:18.164
faster and better job of serving those up for us.

89
00:06:18.164 --> 00:06:23.653
So we are going to map the static path so any incoming HTTP

90
00:06:23.653 --> 00:06:28.823
requests that go to /static will be mapped to a virtual

91
00:06:28.823 --> 00:06:30.722
directory within our application.

92
00:06:30.722 --> 00:06:33.935
In this case, that's going to be the public directory,

93
00:06:33.935 --> 00:06:37.547
which is generated by our glup, or excuse me,

94
00:06:37.547 --> 00:06:38.751
our Grunt tasks.

95
00:06:38.751 --> 00:06:42.037
So, we're going to go ahead and add that.

96
00:06:42.037 --> 00:06:44.958
And we also need a couple environment variables.

97
00:06:44.958 --> 00:06:49.747
So we are actually going to be populating our RDS connection string here,

98
00:06:49.747 --> 00:06:52.053
but we don't have that quite yet.

99
00:06:52.053 --> 00:06:56.255
So, what we'll do for now is configure a few other bits we need.

100
00:06:56.255 --> 00:07:00.721
Number one is we need to create an environment variable

101
00:07:00.721 --> 00:07:05.858
indicating that our NODE_ENV is production.

102
00:07:05.858 --> 00:07:11.115
We also need to indicate that for npm they only --- npm should only

103
00:07:11.115 --> 00:07:15.053
install the direct dependencies of our project,

104
00:07:15.053 --> 00:07:17.304
not the dev dependencies.

105
00:07:17.304 --> 00:07:20.467
They don't need to install all the Grunt crap that

106
00:07:20.467 --> 00:07:22.049
we need for local development.

107
00:07:22.049 --> 00:07:23.939
They just need the production dependencies.

108
00:07:23.939 --> 00:07:37.646
So, I'm going to specify NPM_CONFIG_PRODUCTION equals true.

109
00:07:37.646 --> 00:07:45.617
And then just as a placeholder I'm going to put in RDS_CONNECTION_URL,

110
00:07:45.617 --> 00:07:49.704
and that's going to be the actual database connection

111
00:07:49.704 --> 00:07:54.791
string for the Prostgres database that we just kicked off

112
00:07:54.791 --> 00:07:58.515
the creation of a little while ago.

113
00:07:58.515 --> 00:08:04.717
So let's go over here and view our database instances and see how we're doing.

114
00:08:04.717 --> 00:08:10.622
So it looks like our instance is not quite created yet.

115
00:08:10.622 --> 00:08:13.545
So we don't have an endpoint for it as yet.

116
00:08:13.545 --> 00:08:16.253
So once it's actually created,

117
00:08:16.253 --> 00:08:21.458
we'll have an endpoint that our Elastic Beanstalk application

118
00:08:21.458 --> 00:08:25.702
can actually address in this application.

119
00:08:25.702 --> 00:08:30.717
So, hasn't been created yet, so we'll check back here in a little bit.

120
00:08:30.717 --> 00:08:36.379
But for now we'll apply those configuration changes,

121
00:08:36.379 --> 00:08:41.495
and whenever we change the configuration like this,

122
00:08:41.495 --> 00:08:46.285
the environment is going to start an update.

123
00:08:46.285 --> 00:08:49.763
So, if you only have one instance,

124
00:08:49.763 --> 00:08:55.122
then Elastic Beanstalk will spin up another instance and begin the update,

125
00:08:55.122 --> 00:08:59.647
and then once the update is complete, it'll start accepting all of the traffic,

126
00:08:59.647 --> 00:09:06.859
and then other instances that need to be updated will be updated after that.

127
00:09:06.859 --> 00:09:12.994
Yeah, so this is going down.

128
00:09:12.994 --> 00:09:21.174
We'll check in again on our RDS instance.

129
00:09:21.174 --> 00:09:22.283
Still creating.

130
00:09:22.283 --> 00:09:30.412
Alright, so once we have the RDS URL that we can add to our configuration,

131
00:09:30.412 --> 00:09:35.320
we are going to be mostly ready to actually deploy.

132
00:09:35.320 --> 00:09:48.850
So to get ready for that, we're going to run the grunt collect_static command.

133
00:09:48.850 --> 00:09:50.824
What's going on?

134
00:09:50.824 --> 00:09:54.114
Unable to find local grunt.

135
00:09:54.114 --> 00:09:57.861
Oh yeah, we need to npm install.

136
00:09:57.861 --> 00:10:02.788
Alright, so these steps that are actually preparing the application,

137
00:10:02.788 --> 00:10:06.743
in our case, happen on a continuous integration server.

138
00:10:06.743 --> 00:10:10.432
So when we push a commit to master,

139
00:10:10.432 --> 00:10:15.941
our CI server is going to create all of our static assets

140
00:10:15.941 --> 00:10:21.355
and do whatever command line functions are necessary to get

141
00:10:21.355 --> 00:10:24.522
our application ready to deploy.

142
00:10:24.522 --> 00:10:31.840
And then we'll actually zip up a deployment artifact that we will

143
00:10:31.840 --> 00:10:35.015
send to Elastic Beanstalk from our CI server.

144
00:10:35.015 --> 00:10:36.715
We'll send that to S3,

145
00:10:36.715 --> 00:10:41.139
and then we will kick off a deploy of that artifact that we created.

146
00:10:41.139 --> 00:10:41.906
In our case,

147
00:10:41.906 --> 00:10:46.734
we're going to be doing the creation of the zip file right here on my laptop,

148
00:10:46.734 --> 00:10:50.320
but typically what you would do is set up a continuous integration server

149
00:10:50.320 --> 00:10:54.671
that would actually execute all of these tasks for you.

150
00:10:54.671 --> 00:10:56.507
So we're doing the npm install,

151
00:10:56.507 --> 00:11:00.377
getting all of this ready so we can execute our Grunt task

152
00:11:00.377 --> 00:11:04.911
to create our static assets and the public directory where

153
00:11:04.911 --> 00:11:09.988
all of those will be held.

154
00:11:09.988 --> 00:11:17.469
So, while that's happening, we can check back in on RDS land.

155
00:11:17.469 --> 00:11:20.645
So it's backing up, which means it's pretty close.

156
00:11:20.645 --> 00:11:22.314
That's good.

157
00:11:22.314 --> 00:11:26.487
Alright, and while that's happening,

158
00:11:26.487 --> 00:11:34.634
there is one last piece of configuration that we need to do.

159
00:11:34.634 --> 00:11:47.900
We're going to go into our EC2 configuration.

160
00:11:47.900 --> 00:11:54.508
(Working) Let's see, where is this?

161
00:11:54.508 --> 00:11:58.468
Clusters, Task Definitions, Repositories.

162
00:11:58.468 --> 00:12:01.290
Oh wait, that's ECS, not EC2.

163
00:12:01.290 --> 00:12:03.641
That is for Docker containers.

164
00:12:03.641 --> 00:12:08.455
I'm not interested in Docker containers right now.

165
00:12:08.455 --> 00:12:08.788
Alright,

166
00:12:08.788 --> 00:12:13.222
so we're going to go into our Security Group configuration for our

167
00:12:13.222 --> 00:12:17.632
EC2 instances and look for some security groups.

168
00:12:17.632 --> 00:12:24.575
So, we have two security groups that were created for our todomvc application.

169
00:12:24.575 --> 00:12:31.282
One was created for our Elastic Load Balancer configuration,

170
00:12:31.282 --> 00:12:35.222
and one is created for our EC2 instances.

171
00:12:35.222 --> 00:12:46.627
So I'm going to take a look at this one.

172
00:12:46.627 --> 00:12:50.455
And yep, I think that's the security group we're looking for.

173
00:12:50.455 --> 00:12:53.728
Now I need to go over here to the Inbound tab.

174
00:12:53.728 --> 00:12:56.750
I see a lot of heads and hands here.

175
00:12:56.750 --> 00:12:57.421
I know.

176
00:12:57.421 --> 00:13:05.975
I feel your pain, but the initial setup is definitely where most of the pain is.

177
00:13:05.975 --> 00:13:12.202
So, what we're going to do is Edit inbound rules,

178
00:13:12.202 --> 00:13:18.254
and we already have a rule that's going to allow HTTP requests on port 80 to

179
00:13:18.254 --> 00:13:21.804
go into the --- to be accepted for this security group.

180
00:13:21.804 --> 00:13:28.253
We're going to add a rule, it's going to be for PostgresSQL,

181
00:13:28.253 --> 00:13:34.154
and we are are going to put in the security group again for our eb instance,

182
00:13:34.154 --> 00:13:43.014
so that's going to be this one, this AWSEBSecurityGroup.

183
00:13:43.014 --> 00:13:48.646
And we'll hit Save.

184
00:13:48.646 --> 00:13:54.277
This is being recorded.

185
00:13:54.277 --> 00:13:55.207
Don't worry.

186
00:13:55.207 --> 00:13:58.927
You can go back and check it out.

187
00:13:58.927 --> 00:14:10.659
Alright, so now let's see if we have our RDS instance ready to go.

188
00:14:10.659 --> 00:14:13.691
Awesome, it looks like it is available.

189
00:14:13.691 --> 00:14:17.941
So now if we go to the configuration details,

190
00:14:17.941 --> 00:14:24.031
we can see we actually have an endpoint for it,

191
00:14:24.031 --> 00:14:24.859
which is great.

192
00:14:24.859 --> 00:14:35.000
That means we can configure an environment variable in our EC2 instances which contain the connection string for the database.

