1
00:00:04,301 --> 00:00:11,760
The exercise that we were just working on was to integrate Rollbar

2
00:00:11,760 --> 00:00:15,284
into our error handling process for our application.

3
00:00:15,284 --> 00:00:22,156
Now, I did sort of a quick and dirty solution so I can show you what happens.

4
00:00:22,156 --> 00:00:24,551
But, Rollbar does provide a Node.

5
00:00:24,551 --> 00:00:31,471
js module that you can include in your application so you npm install rollbar.

6
00:00:31,471 --> 00:00:35,507
And, if you're doing an application based on Express,

7
00:00:35,507 --> 00:00:41,321
they have a connect middleware that you can plug in after the

8
00:00:41,321 --> 00:00:47,674
rest of your routes have been defined and it will pass off all

9
00:00:47,674 --> 00:00:53,148
the data that it can glean from the request off to Rollbar

10
00:00:53,148 --> 00:00:55,284
whenever an exception is thrown.

11
00:00:55,284 --> 00:01:00,751
So, I have my errorHandler here and my disposable account ID,

12
00:01:00,751 --> 00:01:02,801
which I'll terminate shortly.

13
00:01:02,801 --> 00:01:07,968
But I also have introduced a route in the application

14
00:01:07,968 --> 00:01:11,699
which I intend to throw an exception.

15
00:01:11,699 --> 00:01:19,908
So, when I open up my browser and hit error,

16
00:01:19,908 --> 00:01:21,550
in development,

17
00:01:21,550 --> 00:01:25,613
Express will actually show me the stack trace here in the browser.

18
00:01:25,613 --> 00:01:28,230
In production mode it won't do that.

19
00:01:28,230 --> 00:01:31,580
But I've generated an error, I got a stack trace,

20
00:01:31,580 --> 00:01:33,949
and I need to know what's going on.

21
00:01:33,949 --> 00:01:40,907
So, I'm going to head over to Rollbar and look in my Dashboard.

22
00:01:40,907 --> 00:01:43,762
And I've just signed up for this account so I have a lot of todo items.

23
00:01:43,762 --> 00:01:47,348
I can invite more people to my team, set up deploy tracking,

24
00:01:47,348 --> 00:01:49,221
which is actually super useful.

25
00:01:49,221 --> 00:01:51,095
When you do a deploy,

26
00:01:51,095 --> 00:01:56,703
you can possibly correlate errors to a particular deployment.

27
00:01:56,703 --> 00:02:00,268
There's lots of different stuff you can do.

28
00:02:00,268 --> 00:02:01,237
But on the Dashboard,

29
00:02:01,237 --> 00:02:05,406
I can see what errors have occurred from my application over the last 24 hours.

30
00:02:05,406 --> 00:02:09,133
So I can see I sent like the Hello World message

31
00:02:09,133 --> 00:02:13,917
during the onboarding experience, and now I'm starting to get an actual error.

32
00:02:13,917 --> 00:02:19,235
So if I click on that, I can see the status of that issue.

33
00:02:19,235 --> 00:02:23,487
It's actually possible to have your team resolve issues through Rollbar.

34
00:02:23,487 --> 00:02:26,285
We don't actually use Rollbar for that.

35
00:02:26,285 --> 00:02:29,869
We use PagerDuty to actually track down who is

36
00:02:29,869 --> 00:02:32,697
responsible for closing out an issue,

37
00:02:32,697 --> 00:02:36,253
but there are some workflow possibilities there.

38
00:02:36,253 --> 00:02:37,431
And if we scroll down,

39
00:02:37,431 --> 00:02:40,948
we get the entire trace back from our application showing us

40
00:02:40,948 --> 00:02:45,300
the error happened on line 37 of webapp.

41
00:02:45,300 --> 00:02:45,844
js.

42
00:02:45,844 --> 00:02:50,893
So it helps us to understand where the error occurred.

43
00:02:50,893 --> 00:02:54,095
It'll tell us when all the occurrences have been so we get a timestamp,

44
00:02:54,095 --> 00:02:58,545
the browser that generated it, the operating system if available,

45
00:02:58,545 --> 00:03:01,413
the route, which of our servers it came from,

46
00:03:01,413 --> 00:03:04,301
so if we're running the application on multiple servers,

47
00:03:04,301 --> 00:03:08,855
we can help track down the precise box that it came from,

48
00:03:08,855 --> 00:03:13,433
and we can glean a couple other bits from this.

49
00:03:13,433 --> 00:03:15,735
If we had a logged in user,

50
00:03:15,735 --> 00:03:18,572
we could configure our Rollbar integration to actually send

51
00:03:18,572 --> 00:03:21,220
the account information or some kind of account identifier

52
00:03:21,220 --> 00:03:23,648
for our user to Rollbar as well.

53
00:03:23,648 --> 00:03:25,474
So we could say,

54
00:03:25,474 --> 00:03:30,111
account 1234 just experienced this error in the production environment,

55
00:03:30,111 --> 00:03:33,563
like maybe we need to follow up.

56
00:03:33,563 --> 00:03:36,766
We can see some graphs about like the browser and OS.

57
00:03:36,766 --> 00:03:41,611
If you have deployments configured, you can see those deployments.

58
00:03:41,611 --> 00:03:45,386
You can see what the potentially suspicious deployment

59
00:03:45,386 --> 00:03:48,577
would be and other similar errors.

60
00:03:48,577 --> 00:03:52,718
Now, when one of these things happens,

61
00:03:52,718 --> 00:03:57,262
where the value of this comes in is the notification scheme

62
00:03:57,262 --> 00:03:59,835
because if an error happens and nobody is listening,

63
00:03:59,835 --> 00:04:04,278
then it doesn't really matter how effectively you log it.

64
00:04:04,278 --> 00:04:09,495
So, on a personal and on a project level,

65
00:04:09,495 --> 00:04:13,895
you can configure different notification channels.

66
00:04:13,895 --> 00:04:17,945
The only one that's active by default is email,

67
00:04:17,945 --> 00:04:21,921
but you can notify yourself of errors in many,

68
00:04:21,921 --> 00:04:24,967
many different ways as you can see.

69
00:04:24,967 --> 00:04:30,300
Again, the one we like to use is PagerDuty because PagerDuty has,

70
00:04:30,300 --> 00:04:33,314
itself, some very robust notification capabilities,

71
00:04:33,314 --> 00:04:38,360
and it can alert an entire chain of command essentially and escalate at

72
00:04:38,360 --> 00:04:42,367
each level if one person doesn't answer the page.

73
00:04:42,367 --> 00:04:51,785
So we usually have Rollbar pass through to PagerDuty when necessary.

74
00:04:51,785 --> 00:04:56,923
Any questions on Rollbar?

75
00:04:56,923 --> 00:04:58,161
A very simple integration.

76
00:04:58,161 --> 00:05:02,545
There's more data that you can send to help diagnose your errors,

77
00:05:02,545 --> 00:05:05,882
but very easy to get set up.

78
00:05:05,882 --> 00:05:10,630
Definitely recommend it if you're looking for a service like this one.

79
00:05:10,630 --> 00:05:12,201
It lets you know when bad stuff is happening.

80
00:05:12,201 --> 00:05:16,267
It's just one part of a notification scheme.

81
00:05:16,267 --> 00:05:20,557
The other things that you'll want to look at configuring are maybe a

82
00:05:20,557 --> 00:05:25,097
Pingdom configuration that'll check your servers from the outside

83
00:05:25,097 --> 00:05:28,800
world to ensure that they remain accessible.

84
00:05:28,800 --> 00:05:33,676
You can check the HTML that's coming back to ensure it's doing what you expect.

85
00:05:33,676 --> 00:05:37,779
And then with Elastic Beanstalk if you're running Beanstalk,

86
00:05:37,779 --> 00:05:42,505
there are some configurations around notifications as well.

87
00:05:42,505 --> 00:05:49,573
You can set up such that when certain events happen on your instances,

88
00:05:49,573 --> 00:05:51,542
you can see that happen.

89
00:05:51,542 --> 00:05:55,481
As you can see, since the load has died down,

90
00:05:55,481 --> 00:05:59,718
the other two instances that got spun up have been terminated,

91
00:05:59,718 --> 00:06:04,557
so I'm back down to my single instance.

92
00:06:04,557 --> 00:06:11,143
But here in Monitoring, you can dig into the data coming out of your instances,

93
00:06:11,143 --> 00:06:19,780
and then with the alarms, you can see any alarm configuration you have.

94
00:06:19,780 --> 00:06:26,167
So for like CPU utilization, let's see, if I click on this little alarm,

95
00:06:26,167 --> 00:06:34,626
we can send out a notification for if the CPU goes over a certain level,

96
00:06:34,626 --> 00:06:40,496
and we can specify an email address that gets that.

97
00:06:40,496 --> 00:06:45,057
There are also other services Amazon provides that are more robust,

98
00:06:45,057 --> 00:06:46,094
like CloudWatch,

99
00:06:46,094 --> 00:06:53,000
that can do more notifications about happenings going on inside your AWS account.

