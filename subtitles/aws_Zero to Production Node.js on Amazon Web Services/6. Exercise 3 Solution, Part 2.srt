1
00:00:03,870 --> 00:00:10,856
Now we should be able to start using the model with this new property.

2
00:00:10,856 --> 00:00:16,421
So the first thing I might try is to run my tests,

3
00:00:16,421 --> 00:00:21,046
npm test, and it does actually successfully create a TODO item,

4
00:00:21,046 --> 00:00:33,545
but I might sort of modify that to also add in a completed flag.

5
00:00:33,545 --> 00:00:41,820
So, in addition to creating a todo with the title Text,

6
00:00:41,820 --> 00:00:47,992
I think I actually want completed there,

7
00:00:47,992 --> 00:00:48,971
right?

8
00:00:48,971 --> 00:00:49,950
Right!

9
00:00:49,950 --> 00:00:53,711
I'm going to create a todo with both the title and the completed,

10
00:00:53,711 --> 00:01:01,598
and I'll add another assertion there that says todo.

11
00:01:01,598 --> 00:01:05,103
completed should equal false.

12
00:01:05,103 --> 00:01:09,834
And there's a bunch of ways to do that assertion, but that one works okay.

13
00:01:09,834 --> 00:01:15,903
But this is one way for me to just quick verify that the table has been sort

14
00:01:15,903 --> 00:01:20,378
of updated and the model is kind of doing what I expect.

15
00:01:20,378 --> 00:01:24,097
These are fairly shallow tests again, but it's the first step.

16
00:01:24,097 --> 00:01:29,980
Now what I need to do is update my REST API endpoints to actually

17
00:01:29,980 --> 00:01:32,171
update these properties on the models as well.

18
00:01:32,171 --> 00:01:36,687
So for that I'm going to open up my Todo routes,

19
00:01:36,687 --> 00:01:42,024
and for both the update and the create operation I'm going to have to

20
00:01:42,024 --> 00:01:48,031
accept another parameter for the completed flag essentially.

21
00:01:48,031 --> 00:01:53,326
So for an update, we'll do this first.

22
00:01:53,326 --> 00:01:58,620
I'm going to look for a request body.

23
00:01:58,620 --> 00:02:05,873
Or excuse me, I'm actually going to do that after my 404 check.

24
00:02:05,873 --> 00:02:06,274
So,

25
00:02:06,274 --> 00:02:11,089
I'm going to set the completed property of my model to be

26
00:02:11,089 --> 00:02:16,150
equal to the result of a Boolean check.

27
00:02:16,150 --> 00:02:18,279
So if request.

28
00:02:18,279 --> 00:02:18,988
body.

29
00:02:18,988 --> 00:02:21,559
completed equals the string true,

30
00:02:21,559 --> 00:02:27,613
that's going to set completed to be true for all other values of that component

31
00:02:27,613 --> 00:02:32,278
that is going to be --- that's going to evaluate to false.

32
00:02:32,278 --> 00:02:33,626
There's other ways to do this.

33
00:02:33,626 --> 00:02:36,614
This is a fairly quick and dirty implementation,

34
00:02:36,614 --> 00:02:40,843
but it's one way to make that piece happen.

35
00:02:40,843 --> 00:02:47,338
And then in my create I'm going to do something similar.

36
00:02:47,338 --> 00:02:50,494
So, in this case, oops,

37
00:02:50,494 --> 00:02:56,624
I'm going to set that completed property again based on

38
00:02:56,624 --> 00:03:02,391
the result of that Boolean comparison, whether or not it's true,

39
00:03:02,391 --> 00:03:06,095
and then it should be updated in my database accordingly.

40
00:03:06,095 --> 00:03:13,470
So those are the two like REST API endpoints I need to update.

41
00:03:13,470 --> 00:03:16,374
Now I'm going to run my application and make sure that my

42
00:03:16,374 --> 00:03:20,735
REST API is doing what I feel it should do.

43
00:03:20,735 --> 00:03:24,370
So I'll start up the dev server,

44
00:03:24,370 --> 00:03:29,037
and now you can verify this using cURL or whatever HTTP client you want.

45
00:03:29,037 --> 00:03:33,360
Like I said, I'm kind of a fan of Postman, so I'm going to do it that way.

46
00:03:33,360 --> 00:03:37,057
So if I start off by sending a GET to my input,

47
00:03:37,057 --> 00:03:40,841
I can see that I have all of my todos in the database,

48
00:03:40,841 --> 00:03:44,811
but for most of them the completed attribute is set to null.

49
00:03:44,811 --> 00:03:49,511
So let's create a new one with that attribute in place.

50
00:03:49,511 --> 00:03:54,324
So, in addition to the body, the title, excuse me,

51
00:03:54,324 --> 00:03:59,336
I'm going to pass in a completed string,

52
00:03:59,336 --> 00:04:03,722
and I'll initially set it to false.

53
00:04:03,722 --> 00:04:08,454
And I created that value in the database, so completed is set to false.

54
00:04:08,454 --> 00:04:15,951
I could create another one set to true, send that in,

55
00:04:15,951 --> 00:04:21,862
and then, again, if it's anything but the string true,

56
00:04:21,862 --> 00:04:25,177
it's going to default to false.

57
00:04:25,177 --> 00:04:29,970
So now if I list those items in the database,

58
00:04:29,970 --> 00:04:37,961
the most recently created ones are there with their proper values.

59
00:04:37,961 --> 00:04:47,094
And I can test the update by changing the --- by using the PUT.

60
00:04:47,094 --> 00:04:52,855
PUT is the operation that I'm using to update the models.

61
00:04:52,855 --> 00:05:00,077
And in this case, the title is going to be whatever I want that to be,

62
00:05:00,077 --> 00:05:03,739
and completed is going to be true.

63
00:05:03,739 --> 00:05:10,347
I can send that, and once again I can see like id 11 has been updated,

64
00:05:10,347 --> 00:05:14,242
but that had one already, so let's do like maybe id #2.

65
00:05:14,242 --> 00:05:31,986
(Working) And hit Send, and then that's been updated as well.

66
00:05:31,986 --> 00:05:39,688
Alright, so I've --- once again, the steps were creating a migration,

67
00:05:39,688 --> 00:05:40,342
handling, adding,

68
00:05:40,342 --> 00:05:45,852
and removing the column whether or not we're migrating the database up or down.

69
00:05:45,852 --> 00:05:47,781
After we did that,

70
00:05:47,781 --> 00:05:52,515
we updated our actual Todo model to have the

71
00:05:52,515 --> 00:05:56,350
property that we added to the database.

72
00:05:56,350 --> 00:05:58,734
We updated our test,

73
00:05:58,734 --> 00:06:05,370
and then we updated our Express controller logic to take advantage

74
00:06:05,370 --> 00:06:10,350
of that new property which wasn't there before.

75
00:06:10,350 --> 00:06:10,616
Cool!

76
00:06:10,616 --> 00:06:12,477
Any questions on any of that code?

77
00:06:12,477 --> 00:06:17,031
It is --- there were a number of steps there that you had to discover,

78
00:06:17,031 --> 00:06:21,163
so not surprised that a good chunk of people --- yeah,

79
00:06:21,163 --> 00:06:28,207
there was definitely a lot to grok there if you haven't done it before.

80
00:06:28,207 --> 00:06:30,623
Anybody in the chat?

81
00:06:30,623 --> 00:06:42,404
Maybe we'll give them a chance to --- Okay,

82
00:06:42,404 --> 00:06:46,172
if you have any other questions on the Sequelize side of things,

83
00:06:46,172 --> 00:06:48,395
I'd be happy to answer them.

84
00:06:48,395 --> 00:06:50,989
Sequelize is a fairly full featured ORM.

85
00:06:50,989 --> 00:06:58,507
It can do complex relationships and can use database-specific

86
00:06:58,507 --> 00:07:01,655
features like JSON fields and Postgres.

87
00:07:01,655 --> 00:07:04,892
So if you're interested in digging deeper,

88
00:07:04,892 --> 00:07:12,000
it's definitely going to be your best bet for an ORM if you're not going to go with the driver, a driver directly.

