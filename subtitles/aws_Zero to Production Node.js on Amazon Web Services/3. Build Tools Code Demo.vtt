WEBVTT
1
00:00:04.336 --> 00:00:05.002
So at this point,

2
00:00:05.002 --> 00:00:08.764
I'd like to do a quick demo of how you create scripts

3
00:00:08.764 --> 00:00:13.017
that run in both of these environments.

4
00:00:13.017 --> 00:00:13.661
So,

5
00:00:13.661 --> 00:00:22.657
I'll start off by doing a run-through of the tests for the application that

6
00:00:22.657 --> 00:00:28.381
we already have to demonstrate some built-in npm scripts.

7
00:00:28.381 --> 00:00:30.964
So, first, oops,

8
00:00:30.964 --> 00:00:39.572
I'm going to pull down all those tasty bug fixes

9
00:00:39.572 --> 00:00:43.130
that you guys worked so hard on.

10
00:00:43.130 --> 00:00:46.727
And now if I come back out here,

11
00:00:46.727 --> 00:00:49.904
let's move this back down to a single column and see

12
00:00:49.904 --> 00:00:54.568
if we can blow it up a little bit.

13
00:00:54.568 --> 00:01:00.203
Oh wait, not that one, this one.

14
00:01:00.203 --> 00:01:05.673
Alright, so the ones that we have in our project right now are the npm start,

15
00:01:05.673 --> 00:01:10.321
which executes our server process, then we also have this guy,

16
00:01:10.321 --> 00:01:11.490
npm test,

17
00:01:11.490 --> 00:01:18.752
which is another one of those conventional bits that npm knows to execute.

18
00:01:18.752 --> 00:01:23.748
And in this case, we're setting the current Node environment to test,

19
00:01:23.748 --> 00:01:26.838
which is going to change our application's configuration a little bit.

20
00:01:26.838 --> 00:01:32.018
Mostly I think it just hits the test database rather than the development one.

21
00:01:32.018 --> 00:01:38.353
It's going to run a command called mocha, which is a testing framework for Node.

22
00:01:38.353 --> 00:01:44.533
js, and it's going to run all of the tests in this test directory.

23
00:01:44.533 --> 00:01:49.362
Now if we go out to the terminal here and execute mocha,

24
00:01:49.362 --> 00:01:52.561
we can see that the mocha command isn't found,

25
00:01:52.561 --> 00:01:57.034
like it isn't installed globally, it's not on the system path,

26
00:01:57.034 --> 00:02:00.880
but if I run npm test, --- No!

27
00:02:00.880 --> 00:02:02.010
What's that?

28
00:02:02.010 --> 00:02:04.270
Server model is db.

29
00:02:04.270 --> 00:02:09.905
So I have a problem with my --- problem with the test.

30
00:02:09.905 --> 00:02:11.858
Clearly I haven't run them enough lately.

31
00:02:11.858 --> 00:02:14.292
Going to have to fix that.

32
00:02:14.292 --> 00:02:21.329
But what did happen is the mocha command was run being passed this argument.

33
00:02:21.329 --> 00:02:27.391
So, the npm scripts, in addition to whatever is on the system path normally,

34
00:02:27.391 --> 00:02:30.448
will also look another place for binary commands.

35
00:02:30.448 --> 00:02:36.333
So if I look in the node_modules directory, there's this subdirectory called.

36
00:02:36.333 --> 00:02:36.951
bin,

37
00:02:36.951 --> 00:02:42.436
and that contains all of the potential command line functions

38
00:02:42.436 --> 00:02:46.882
that were installed by any of my local packages.

39
00:02:46.882 --> 00:02:52.222
So here is that mocha command which will invoke the test

40
00:02:52.222 --> 00:02:56.322
harness which I clearly have to fix.

41
00:02:56.322 --> 00:02:56.726
So,

42
00:02:56.726 --> 00:03:03.096
a npm script is a way that you can run a script using a locally installed

43
00:03:03.096 --> 00:03:07.698
Node module so that somebody who wants to run that task doesn't have to

44
00:03:07.698 --> 00:03:10.065
install your command line utility globally,

45
00:03:10.065 --> 00:03:11.518
which is kind of gross.

46
00:03:11.518 --> 00:03:14.132
All they have to do is clone your repository,

47
00:03:14.132 --> 00:03:15.647
run npm whatever,

48
00:03:15.647 --> 00:03:20.914
and all of the command line utilities that are necessary to execute

49
00:03:20.914 --> 00:03:23.599
those scripts will automatically be added to the path,

50
00:03:23.599 --> 00:03:28.905
but not pollute the global system path.

51
00:03:28.905 --> 00:03:36.300
So that's the primary benefit of using the npm scripts.

52
00:03:36.300 --> 00:03:39.714
So in addition to these scripts in the package.

53
00:03:39.714 --> 00:03:45.031
json, we have the ability to create Grunt tasks.

54
00:03:45.031 --> 00:03:50.159
Now the sort of conventional location for

55
00:03:50.159 --> 00:03:54.138
configuration of Grunt is in a Gruntfile.

56
00:03:54.138 --> 00:03:58.539
js at the root directory of your application,

57
00:03:58.539 --> 00:04:05.228
and within this directory when the grunt command is executed will load up

58
00:04:05.228 --> 00:04:09.792
different tasks that our Grunt task runner can perform.

59
00:04:09.792 --> 00:04:15.173
So we have browserify and sass targets, which we'll talk about tomorrow,

60
00:04:15.173 --> 00:04:21.504
but we also have a couple of bits that we've already been using,

61
00:04:21.504 --> 00:04:26.805
which is this watch and nodemon command.

62
00:04:26.805 --> 00:04:31.518
So, watch is a third-party module that's available for Grunt,

63
00:04:31.518 --> 00:04:35.173
and you can say that --- you can basically specify different targets

64
00:04:35.173 --> 00:04:38.943
within this that will watch this set of files.

65
00:04:38.943 --> 00:04:43.479
So in this case, if any of our browser JavaScript changes,

66
00:04:43.479 --> 00:04:45.401
we'll execute the browserify task.

67
00:04:45.401 --> 00:04:50.563
And in this case, if any of our Sass files changes,

68
00:04:50.563 --> 00:04:54.736
we will execute the sass:dev task.

69
00:04:54.736 --> 00:04:56.842
We also have the nodemon task, and nodemon,

70
00:04:56.842 --> 00:04:59.170
even if you install it globally standalone,

71
00:04:59.170 --> 00:05:04.223
it's a really useful utility for monitoring a Node process.

72
00:05:04.223 --> 00:05:08.411
And if JavaScript files change within the directory that Node process was run,

73
00:05:08.411 --> 00:05:12.165
you can automatically restart that Node process.

74
00:05:12.165 --> 00:05:14.936
So it's a very handy development tool that will I'm sure

75
00:05:14.936 --> 00:05:19.853
be in your belt if it isn't already, but there's also a Grunt plugin for it.

76
00:05:19.853 --> 00:05:23.401
So in this case, we pass in the script that we would like to execute,

77
00:05:23.401 --> 00:05:27.753
and then by default nodemon will monitor the entire current

78
00:05:27.753 --> 00:05:29.836
directory for changes to JavaScript files.

79
00:05:29.836 --> 00:05:34.253
But in this case, we told it to ignore the node_modules folder,

80
00:05:34.253 --> 00:05:38.702
so we don't care about any changes to the dependencies.

81
00:05:38.702 --> 00:05:40.118
We ignore the public folder,

82
00:05:40.118 --> 00:05:43.747
which is where Grunt will put our compiled static assets.

83
00:05:43.747 --> 00:05:48.616
And then we also ignore any browser-specific JavaScript because

84
00:05:48.616 --> 00:05:53.229
that's not going to impact server code at all.

85
00:05:53.229 --> 00:05:56.003
And then down here at the bottom, we have this concurrent task,

86
00:05:56.003 --> 00:06:00.954
which is again another third-party plugin which will run these two tasks,

87
00:06:00.954 --> 00:06:02.621
nodemon and watch,

88
00:06:02.621 --> 00:06:07.385
concurrently so that we can both recompile our static

89
00:06:07.385 --> 00:06:11.768
assets and watch our server-side code for changes at the

90
00:06:11.768 --> 00:06:14.966
same time when we run this task.

91
00:06:14.966 --> 00:06:18.196
Because otherwise, unless a task returns something,

92
00:06:18.196 --> 00:06:21.980
Grunt won't move on to the next task.

93
00:06:21.980 --> 00:06:25.640
So in this case, if we want both of these tasks to execute concurrently,

94
00:06:25.640 --> 00:06:30.146
we have to use this special module to make them run at the same time.

95
00:06:30.146 --> 00:06:34.505
And then down here is where we actually configure Grunt

96
00:06:34.505 --> 00:06:39.537
to load in those third-party tasks, so we have grunt-sass and browserify,

97
00:06:39.537 --> 00:06:43.730
we also have watch, and nodemon, and concurrent,

98
00:06:43.730 --> 00:06:46.522
and then we also have shell,

99
00:06:46.522 --> 00:06:52.336
which just executes shell commands which is a fairly simple bit to do.

100
00:06:52.336 --> 00:06:56.785
And then we --- the default command is what happens when

101
00:06:56.785 --> 00:06:59.107
you just run Grunt with no arguments.

102
00:06:59.107 --> 00:07:00.062
And in our case,

103
00:07:00.062 --> 00:07:03.865
what we want to do is first we want to compile --- like this is like essentially

104
00:07:03.865 --> 00:07:06.151
the way that we provided to run our development web server.

105
00:07:06.151 --> 00:07:09.648
So what we're going to do first is we're going to compile a

106
00:07:09.648 --> 00:07:11.347
development version of our style sheets,

107
00:07:11.347 --> 00:07:14.194
we're going to run our JavaScripts through Browserify,

108
00:07:14.194 --> 00:07:19.687
and then we're going to start up both our watch and our nodemon tasks so that we

109
00:07:19.687 --> 00:07:25.216
can continually recompile and rerun our Node app as we run.

110
00:07:25.216 --> 00:07:29.715
And we also have some custom tasks, which are just collections of other tasks.

111
00:07:29.715 --> 00:07:31.008
So this collect_static task,

112
00:07:31.008 --> 00:07:34.579
which you had to run eventually to get your local

113
00:07:34.579 --> 00:07:38.119
development environment to work, runs, and init_static task,

114
00:07:38.119 --> 00:07:43.048
which we'll look at in a second, and then it runs the sass task,

115
00:07:43.048 --> 00:07:45.471
but it's for dist rather than dev,

116
00:07:45.471 --> 00:07:48.459
which will actually minify the output at CSS as well,

117
00:07:48.459 --> 00:07:53.276
and then we have the browserify task there as well.

118
00:07:53.276 --> 00:07:56.786
And this init_static task, if you're paying very,

119
00:07:56.786 --> 00:07:57.607
very close attention,

120
00:07:57.607 --> 00:08:01.698
you might notice has not been defined anywhere in our Gruntfile.

121
00:08:01.698 --> 00:08:05.149
That's because it's a custom task that we wrote.

122
00:08:05.149 --> 00:08:09.178
So what we can do is tell Grunt to look for more tasks

123
00:08:09.178 --> 00:08:12.063
in another directory that we specify.

124
00:08:12.063 --> 00:08:12.744
So in this case,

125
00:08:12.744 --> 00:08:15.419
we're going to say that our custom tasks are going to be

126
00:08:15.419 --> 00:08:20.227
located potentially in our bin/tasks directory.

127
00:08:20.227 --> 00:08:27.202
So if we expand that, we can see that we have this custom Grunt task here.

128
00:08:27.202 --> 00:08:31.916
The exports for a function here, it got a little sloppy.

129
00:08:31.916 --> 00:08:37.082
I forgot my const up at the top there for my module requires.

130
00:08:37.082 --> 00:08:38.270
Apologies there.

131
00:08:38.270 --> 00:08:44.734
But we have a custom task here, so we call registerTask,

132
00:08:44.734 --> 00:08:45.258
init_static,

133
00:08:45.258 --> 00:08:52.611
we include a basic description of that task in case anybody runs grunt help,

134
00:08:52.611 --> 00:08:57.086
and then we have the actual function which executes,

135
00:08:57.086 --> 00:09:02.208
which is going to destroy the public directory if it already exists,

136
00:09:02.208 --> 00:09:05.695
recreate it, copy over the static,

137
00:09:05.695 --> 00:09:10.264
like the unmodified static assets from our src directory,

138
00:09:10.264 --> 00:09:15.857
and then copy those over as a part of that task.

139
00:09:15.857 --> 00:09:21.594
So, you can do any kind of functionality this way.

140
00:09:21.594 --> 00:09:23.380
For instance, like we in our workshop,

141
00:09:23.380 --> 00:09:25.747
we're going to being using the Elastic Beanstalk

142
00:09:25.747 --> 00:09:28.256
command line utility directly to deploy,

143
00:09:28.256 --> 00:09:32.891
but for our application we have Grunt tasks that manage lots of

144
00:09:32.891 --> 00:09:37.732
different parts of the deploy process for us using the AWS,

145
00:09:37.732 --> 00:09:42.611
SDK for Node, and sometimes the Elastic Beanstalk command line utility directly.

146
00:09:42.611 --> 00:09:46.249
So using --- so that's one of the things I like about Grunt is

147
00:09:46.249 --> 00:09:49.321
just a general purpose task runner for Node code,

148
00:09:49.321 --> 00:09:59.783
so we use it for all kinds of stuff as a result there.

149
00:09:59.783 --> 00:10:10.329
Any questions on npm scripts or Grunt tasks?

150
00:10:10.329 --> 00:10:10.718
Yeah, question go ahead.

151
00:10:10.718 --> 00:10:18.424
Question, when you do the grunt load npm tasks --- Oh yeah, let me go there.

152
00:10:18.424 --> 00:10:23.937
--- does it automatically include all the grunt-sass,

153
00:10:23.937 --> 00:10:33.240
grunt-broswerify things when you do a grunt without any parameters?

154
00:10:33.240 --> 00:10:36.121
So when you do a grunt without any parameters,

155
00:10:36.121 --> 00:10:40.266
what's going to happen is Grunt is going to look for a task called default.

156
00:10:40.266 --> 00:10:46.341
And in this case, I specified the default task to be like these other tasks,

157
00:10:46.341 --> 00:10:48.949
like the sass task, the browserify task,

158
00:10:48.949 --> 00:10:50.440
and the concurrent tasks.

159
00:10:50.440 --> 00:10:53.824
And the way that Grunt acquires those abilities is

160
00:10:53.824 --> 00:10:56.717
through these lines of code here.

161
00:10:56.717 --> 00:11:01.423
We register these additional task types from npm.

162
00:11:01.423 --> 00:11:06.969
Like we've installed a grunt-sass plugin and a grunt-browserify plugin.

163
00:11:06.969 --> 00:11:08.207
And in the initConfig,

164
00:11:08.207 --> 00:11:14.122
which is this --- which is usually the first part of a Gruntfile that you see,

165
00:11:14.122 --> 00:11:18.146
this is where we configure all of those plugins.

166
00:11:18.146 --> 00:11:22.125
So here's configuration for browserify, for sass,

167
00:11:22.125 --> 00:11:26.447
for watch, nodemon, and the rest of them.

168
00:11:26.447 --> 00:11:31.679
So after you type grunt, look for that default task.

169
00:11:31.679 --> 00:11:33.883
Then it executes this list of tasks,

170
00:11:33.883 --> 00:11:38.307
which it knows how to do because we loaded those tasks from npm here

171
00:11:38.307 --> 00:11:46.288
and configured how they should operate up here.

172
00:11:46.288 --> 00:11:48.113
A few people are asking for your slides.

173
00:11:48.113 --> 00:11:49.200
Yeah, sure thing.

174
00:11:49.200 --> 00:11:54.440
I can --- I'll just like create a PDF and maybe check it into the GitHub repo.

175
00:11:54.440 --> 00:11:58.708
Perfect.

176
00:11:58.708 --> 00:12:03.978
So we'll do that as soon as we can after we break down here.

177
00:12:03.978 --> 00:12:10.378
Other questions before we move on, on the Grunt or npm stuff?

178
00:12:10.378 --> 00:12:16.756
Is there a good online resource for finding the different available Grunt

179
00:12:16.756 --> 00:12:20.692
modules that are npm modules that we might want to include?

180
00:12:20.692 --> 00:12:25.292
The Grunt site does have a number of them that you might find interesting.

181
00:12:25.292 --> 00:12:28.053
Also, the npm package registry.

182
00:12:28.053 --> 00:12:31.366
So if you go the npmjs.

183
00:12:31.366 --> 00:12:34.968
org and just search for grunt,

184
00:12:34.968 --> 00:12:43.100
there's --- you can kind of search for the kind of stuff you're looking for.

185
00:12:43.100 --> 00:12:45.099
That's not going to probably lend too much,

186
00:12:45.099 --> 00:12:50.949
but like let's say I want to find like grunt webpack,

187
00:12:50.949 --> 00:12:55.580
like this is what you would use if you wanted to do webpack

188
00:12:55.580 --> 00:12:57.818
stuff from the context of your Gruntfile.

189
00:12:57.818 --> 00:13:01.133
So like usually if you search for like grunt whatever,

190
00:13:01.133 --> 00:13:03.555
that's one of the reasons why I still use it,

191
00:13:03.555 --> 00:13:05.157
if I search for grunt whatever,

192
00:13:05.157 --> 00:13:12.211
there's like a 90% chance I find something that kind of does what I need to do.

193
00:13:12.211 --> 00:13:14.568
Grunt website has a plugin search that will --- I

194
00:13:14.568 --> 00:13:17.956
think it just goes over npm as well.

195
00:13:17.956 --> 00:13:19.425
Yeah, Yeah.

196
00:13:19.425 --> 00:13:21.055
And you don't have to type grunt.

197
00:13:21.055 --> 00:13:22.403
Exactly.

198
00:13:22.403 --> 00:13:25.098
Even better.

199
00:13:25.098 --> 00:13:30.002
Some people are saying that they sent your PR to fix the tests.

200
00:13:30.002 --> 00:13:31.687
Oh nice, nice.

201
00:13:31.687 --> 00:13:32.810
Appreciate that.

202
00:13:32.810 --> 00:13:40.000
I'll go take a look after we get working. I bet I'll be able to merge it down right away.

