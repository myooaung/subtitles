1
00:00:10,085 --> 00:00:12,713
We've got two more big meaty sections here this

2
00:00:12,713 --> 00:00:14,864
afternoon before I turn you loose.

3
00:00:14,864 --> 00:00:18,633
The first is digging into the data tier of the

4
00:00:18,633 --> 00:00:21,591
application that we've been looking at today.

5
00:00:21,591 --> 00:00:25,491
And the --- in this case, we're actually going be looking at how to use Node.

6
00:00:25,491 --> 00:00:27,700
js with a relational database.

7
00:00:27,700 --> 00:00:28,142
Anyway,

8
00:00:28,142 --> 00:00:38,791
so the stack we're going to look at is one that's actually less heralded in

9
00:00:38,791 --> 00:00:43,947
Node because most of the NoSQL databases out there are,

10
00:00:43,947 --> 00:00:46,945
because they sort of natively speak JSON,

11
00:00:46,945 --> 00:00:51,034
they end up being a really good fit for Node.

12
00:00:51,034 --> 00:00:51,443
js.

13
00:00:51,443 --> 00:00:55,000
But for certain use cases, there are, you know,

14
00:00:55,000 --> 00:00:58,432
a relational database does make a lot of sense,

15
00:00:58,432 --> 00:01:02,033
and particularly Postgres is actually a really feature-rich relational database,

16
00:01:02,033 --> 00:01:07,119
which can do a lot of interesting stuff that JavaScript can take advantage of,

17
00:01:07,119 --> 00:01:12,302
particularly with its JSON fields allowing you within a table

18
00:01:12,302 --> 00:01:17,116
to have a rich query --- or like an unstructured queryable

19
00:01:17,116 --> 00:01:19,985
column with JSON data embedded in it.

20
00:01:19,985 --> 00:01:23,703
So, Postgres still a really great choice for Node.

21
00:01:23,703 --> 00:01:28,690
js development, and specifically, it allows us to use RDS,

22
00:01:28,690 --> 00:01:33,815
which is the managed relational database service from

23
00:01:33,815 --> 00:01:37,658
Amazon which is very performant, highly available,

24
00:01:37,658 --> 00:01:39,098
all those things.

25
00:01:39,098 --> 00:01:42,572
So if you're going to be using a relational database of any kind with Node.

26
00:01:42,572 --> 00:01:46,994
js, the chances are you're probably going to go one of two routes.

27
00:01:46,994 --> 00:01:50,294
You're going to either use a driver for your database directly,

28
00:01:50,294 --> 00:01:56,431
so just use PG or Postgres or a MySQL driver directly,

29
00:01:56,431 --> 00:02:00,523
maybe execute raw SQL against it or maybe use a SQL builder.

30
00:02:00,523 --> 00:02:03,419
But if you're using a ORM in Node.

31
00:02:03,419 --> 00:02:05,953
js, you're probably going to use Sequelize.

32
00:02:05,953 --> 00:02:12,244
Sequelize is definitely the most feature-rich ORM that's out there for Node.

33
00:02:12,244 --> 00:02:13,292
js today.

34
00:02:13,292 --> 00:02:13,593
So,

35
00:02:13,593 --> 00:02:16,605
if you're looking for the type of experience that you

36
00:02:16,605 --> 00:02:18,483
might've enjoyed with say Active Record,

37
00:02:18,483 --> 00:02:20,376
which is kind of, for me,

38
00:02:20,376 --> 00:02:23,454
like the gold standard to which I will compare all ORMs,

39
00:02:23,454 --> 00:02:29,159
it definitely has its problems, but I feel like it's a great piece of software,

40
00:02:29,159 --> 00:02:33,804
it's probably the closest you're going to get to that in the Node.

41
00:02:33,804 --> 00:02:34,519
js world.

42
00:02:34,519 --> 00:02:39,527
That said, this is another situation where if you choose to use Sequelize,

43
00:02:39,527 --> 00:02:44,239
the support that you're going to find out there on the Interwebs is not awesome,

44
00:02:44,239 --> 00:02:47,549
like there aren't a lot of tutorials, there aren't a lot of resources,

45
00:02:47,549 --> 00:02:50,435
there aren't a lot of sample apps that have been built using Sequelize,

46
00:02:50,435 --> 00:02:56,373
so you're going to be a little bit in the wilderness if you use Sequelize.

47
00:02:56,373 --> 00:02:58,468
The documentation is pretty okay,

48
00:02:58,468 --> 00:03:03,775
but there are a lot of things that go unsaid that you occasionally

49
00:03:03,775 --> 00:03:07,686
have to dive into the source to figure it out.

50
00:03:07,686 --> 00:03:09,045
But all that said,

51
00:03:09,045 --> 00:03:14,356
it definitely is of all the ORMs out there on top of a relational database,

52
00:03:14,356 --> 00:03:17,894
I think it's definitely the creme de la creme.

53
00:03:17,894 --> 00:03:21,672
But yeah, as I mentioned, isn't SQL for old people?

54
00:03:21,672 --> 00:03:25,771
Like shouldn't we be using NoSQL databases?

55
00:03:25,771 --> 00:03:28,059
And there's some reasons why you might want to consider

56
00:03:28,059 --> 00:03:30,321
going with a NoSQL database for Node,

57
00:03:30,321 --> 00:03:34,439
mostly because the support for NoSQL databases in Node is much better,

58
00:03:34,439 --> 00:03:37,208
like there's a lot more folks using those technologies,

59
00:03:37,208 --> 00:03:41,456
a lot more resources available, and the libraries are a little bit better.

60
00:03:41,456 --> 00:03:43,876
For instance, like Mongoose, which is the ODM,

61
00:03:43,876 --> 00:03:49,459
the Object Document Mapper, for MongoDB I think is particularly good.

62
00:03:49,459 --> 00:03:54,976
But the main reason that I've gone with SQL is that Postgres

63
00:03:54,976 --> 00:03:58,026
itself is an awesome feature-rich database,

64
00:03:58,026 --> 00:04:03,013
and RDS was a good choice within our Amazon-centric ecosystem.

65
00:04:03,013 --> 00:04:08,045
It was going to be the best data store solution for us.

66
00:04:08,045 --> 00:04:16,000
So the opportunity to go with RDS was definitely a driving factor in making that choice.

