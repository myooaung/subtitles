WEBVTT
1

00:00:00.000  -->  00:00:07.259
Hello and welcome to your very first

2

00:00:07.259  -->  00:00:09.929
tutorial on R programming. This is

3

00:00:09.929  -->  00:00:12.300
Kirill Eremenko and I am super excited

4

00:00:12.300  -->  00:00:14.580
to have you here, and today we're talking

5

00:00:14.580  -->  00:00:18.480
about the data types in R. Now we are

6

00:00:18.480  -->  00:00:21.510
going to cover five main data types

7

00:00:21.510  -->  00:00:23.490
which are also called the atomic data

8

00:00:23.490  -->  00:00:26.310
types in R. So let's get started right

9

00:00:26.310  -->  00:00:27.000
away,

10

00:00:27.000  -->  00:00:30.449
ok I've got my window, R studio window

11

00:00:30.449  -->  00:00:33.300
open here and at the top on the left,

12

00:00:33.300  -->  00:00:34.469
this is where we're going to write our

13

00:00:34.469  -->  00:00:37.559
code. So if you don't see this windows so

14

00:00:37.559  -->  00:00:39.719
over this part of the window here in the

15

00:00:39.719  -->  00:00:41.760
top left for instance it looks like this

16

00:00:41.760  -->  00:00:44.040
you only see the console and these other

17

00:00:44.040  -->  00:00:45.629
two windows then all we have to do is

18

00:00:45.629  -->  00:00:47.730
click this button up in the top left

19

00:00:47.730  -->  00:00:50.700
corner to create a new R script. So

20

00:00:50.700  -->  00:00:52.379
let's go ahead and do that and now we

21

00:00:52.379  -->  00:00:54.449
have this new R script where we

22

00:00:54.449  -->  00:00:56.190
will be writing our code.

23

00:00:56.190  -->  00:00:59.430
Alright so let's start with the integer

24

00:00:59.430  -->  00:01:02.160
datatype so I'm going to put a hashtag

25

00:01:02.160  -->  00:01:05.970
and hashtagging R stands for comment and

26

00:01:05.970  -->  00:01:08.070
why that is is because I want to type in

27

00:01:08.070  -->  00:01:10.920
something that doesn't that shouldn't

28

00:01:10.920  -->  00:01:13.080
affect the code and execution of the

29

00:01:13.080  -->  00:01:14.580
code. Now I'm going to go into my

30

00:01:14.580  -->  00:01:16.710
settings here and I'm using a Mac here

31

00:01:16.710  -->  00:01:19.080
but if you're using Windows then

32

00:01:19.080  -->  00:01:21.270
everything should be quite similar and

33

00:01:21.270  -->  00:01:23.700
we've already done the layout of our

34

00:01:23.700  -->  00:01:25.830
code but what I want to do is I just want to

35

00:01:25.830  -->  00:01:27.780
increase the font size, so we can see

36

00:01:27.780  -->  00:01:31.590
everything a bit better on the recording.

37

00:01:31.590  -->  00:01:33.960
So there we go, so I want to create an

38

00:01:33.960  -->  00:01:36.390
integer. I'm going to start by giving the

39

00:01:36.390  -->  00:01:38.250
variable name, the name is going to be X

40

00:01:38.250  -->  00:01:40.799
and then I'm going to put triangle

41

00:01:40.799  -->  00:01:43.710
bracket facing towards X so kind of

42

00:01:43.710  -->  00:01:47.820
like a less than sign and then a minus.

43

00:01:47.820  -->  00:01:50.009
So this creates an arrow, there we go

44

00:01:50.009  -->  00:01:51.720
that's the arrow that we've created with

45

00:01:51.720  -->  00:01:54.810
these two symbols and in R, this is

46

00:01:54.810  -->  00:01:56.820
the assignment operator and I want to

47

00:01:56.820  -->  00:02:00.780
assign X the value of two so it will be

48

00:02:00.780  -->  00:02:03.450
an integer of tube but in R and we'll

49

00:02:03.450  -->  00:02:05.130
get to this in a second

50

00:02:05.130  -->  00:02:07.140
in order to make sure that this is going

51

00:02:07.140  -->  00:02:08.459
to be an integer we have to put a

52

00:02:08.459  -->  00:02:11.250
capital L afterwards. Once again, we'll

53

00:02:11.250  -->  00:02:13.200
get back to that in a second let's just

54

00:02:13.200  -->  00:02:13.550
run

55

00:02:13.550  -->  00:02:15.200
this code for now. So in order to run

56

00:02:15.200  -->  00:02:17.030
this code, all you have to do is keep

57

00:02:17.030  -->  00:02:19.790
your cursor or keep this line

58

00:02:19.790  -->  00:02:22.430
selected basically you see this vertical

59

00:02:22.430  -->  00:02:24.500
align a blinking that means I'm on this

60

00:02:24.500  -->  00:02:27.560
current line and press control enter if

61

00:02:27.560  -->  00:02:30.050
you are on a windows or command return on

62

00:02:30.050  -->  00:02:32.390
a mac and as you can see what happened

63

00:02:32.390  -->  00:02:36.200
is this code has been copied into the

64

00:02:36.200  -->  00:02:39.350
console and has been executed and what

65

00:02:39.350  -->  00:02:43.250
we have now is a new variable in the

66

00:02:43.250  -->  00:02:45.860
global environment over here, so X and

67

00:02:45.860  -->  00:02:48.860
the value is 2L and now we're going to

68

00:02:48.860  -->  00:02:52.490
check what actual type does X have and

69

00:02:52.490  -->  00:02:54.800
in order to check the type all you

70

00:02:54.800  -->  00:02:57.740
have to do is type in type of and then

71

00:02:57.740  -->  00:03:00.380
in brackets put in the value that you

72

00:03:00.380  -->  00:03:03.170
want to check. So let's execute that, so

73

00:03:03.170  -->  00:03:05.210
once again I'm going to click command

74

00:03:05.210  -->  00:03:08.120
return on my mac and here this code

75

00:03:08.120  -->  00:03:10.190
now has been copied to the console and

76

00:03:10.190  -->  00:03:13.250
now we can see that it is an integer.

77

00:03:13.250  -->  00:03:14.900
Alright so we've created our first

78

00:03:14.900  -->  00:03:16.700
integer, once again we'll get back to

79

00:03:16.700  -->  00:03:19.790
this L in a second. Alright let's have

80

00:03:19.790  -->  00:03:23.300
a look at the next type which is the a

81

00:03:23.300  -->  00:03:26.090
double type and double just basically

82

00:03:26.090  -->  00:03:27.980
means anything with a decimal point, so

83

00:03:27.980  -->  00:03:31.070
we're going to say double here so this

84

00:03:31.070  -->  00:03:33.350
is going to be our comment. So basically

85

00:03:33.350  -->  00:03:35.300
anything with a hashtag at the start is

86

00:03:35.300  -->  00:03:36.709
completely ignored. I know we're

87

00:03:36.709  -->  00:03:38.870
executing line-by-line but still if you

88

00:03:38.870  -->  00:03:40.760
want to save your file later and you

89

00:03:40.760  -->  00:03:42.380
don't want to get any warnings and then

90

00:03:42.380  -->  00:03:45.530
you should put hashtag before anything

91

00:03:45.530  -->  00:03:47.690
that shouldn't be looked at all the

92

00:03:47.690  -->  00:03:49.190
isn't part of your code.

93

00:03:49.190  -->  00:03:50.720
Alright so now we're going to create a

94

00:03:50.720  -->  00:03:53.450
double variable, so let's call it y and

95

00:03:53.450  -->  00:03:55.250
then we'll put once again the assignment

96

00:03:55.250  -->  00:03:56.840
operator and we'll give it a value of

97

00:03:56.840  -->  00:04:00.170
2.5, so it has a decimal point and once

98

00:04:00.170  -->  00:04:02.270
again let's execute this line, first

99

00:04:02.270  -->  00:04:04.760
command return on the mac and there you

100

00:04:04.760  -->  00:04:07.459
go we've got this code was copied here

101

00:04:07.459  -->  00:04:10.400
and has been executed as you can see and

102

00:04:10.400  -->  00:04:12.739
right away we've got a new variable here

103

00:04:12.739  -->  00:04:15.019
with a new value and now let's have a

104

00:04:15.019  -->  00:04:19.880
look at the type of Y. Type of Y,

105

00:04:19.880  -->  00:04:21.919
alright so let's execute this line now.

106

00:04:21.919  -->  00:04:24.530
As you can see, it has been copied over

107

00:04:24.530  -->  00:04:27.230
here and executing that line what the

108

00:04:27.230  -->  00:04:29.600
council return wasn't double. So now we

109

00:04:29.600  -->  00:04:31.700
have two variables, one is an integer and

110

00:04:31.700  -->  00:04:33.980
one is a double.

111

00:04:33.980  -->  00:04:37.550
Ok so now we can discuss this L symbol,

112

00:04:37.550  -->  00:04:39.350
so why do we have to put an L? Why can't

113

00:04:39.350  -->  00:04:43.640
we just say X arrow 2. Well the reason

114

00:04:43.640  -->  00:04:47.690
is because by default R will decide

115

00:04:47.690  -->  00:04:50.330
for you how it should store the data and

116

00:04:50.330  -->  00:04:53.510
all operations in R, all the medic

117

00:04:53.510  -->  00:04:56.210
operations are always conducted on a

118

00:04:56.210  -->  00:04:57.560
double level because it makes sense

119

00:04:57.560  -->  00:04:59.810
right if you're going to add like a

120

00:04:59.810  -->  00:05:01.790
double variable so something that

121

00:05:01.790  -->  00:05:03.350
has decimal points and something that

122

00:05:03.350  -->  00:05:05.960
doesn't have decimal point then the result

123

00:05:05.960  -->  00:05:07.940
of the operation might actually have

124

00:05:07.940  -->  00:05:11.960
decimal point so it's logical that any

125

00:05:11.960  -->  00:05:14.510
operations are conducted with numbers

126

00:05:14.510  -->  00:05:16.790
that have decimal points so that's why

127

00:05:16.790  -->  00:05:19.580
it's better for R to store anything as

128

00:05:19.580  -->  00:05:21.530
double. So if you don't put an L here, so

129

00:05:21.530  -->  00:05:23.600
let's go here, let's delete that and

130

00:05:23.600  -->  00:05:25.700
let's rerun this line so we will

131

00:05:25.700  -->  00:05:28.370
basically override our existing variable

132

00:05:28.370  -->  00:05:31.490
X over here. So I'm going to press command

133

00:05:31.490  -->  00:05:34.580
return and now this variable has been

134

00:05:34.580  -->  00:05:37.100
created again and it is just X is just

135

00:05:37.100  -->  00:05:39.890
2 not a 2L anymore. Now if we check type

136

00:05:39.890  -->  00:05:42.260
of X, you'll see that it's a double so

137

00:05:42.260  -->  00:05:45.680
basically R by default will store your

138

00:05:45.680  -->  00:05:49.580
integer variable, this single X variable

139

00:05:49.580  -->  00:05:52.010
as a double. Just because it is

140

00:05:52.010  -->  00:05:53.660
anticipating that you will require

141

00:05:53.660  -->  00:05:55.700
arithmetic operations in the future so

142

00:05:55.700  -->  00:05:57.560
and because they're going to be run in

143

00:05:57.560  -->  00:06:00.860
double mode. Anyway, it's just easier for

144

00:06:00.860  -->  00:06:02.780
R to store that variable like that

145

00:06:02.780  -->  00:06:04.940
right away. So if you know for instance

146

00:06:04.940  -->  00:06:06.860
that you're not going to be running

147

00:06:06.860  -->  00:06:08.930
arithmetic operations and for example

148

00:06:08.930  -->  00:06:11.210
this variable is just used as a category

149

00:06:11.210  -->  00:06:15.230
or as you're giving sequences to

150

00:06:15.230  -->  00:06:17.480
something like like the first, second,

151

00:06:17.480  -->  00:06:18.650
third, you're never going to be adding

152

00:06:18.650  -->  00:06:19.790
them or you're never going to be

153

00:06:19.790  -->  00:06:21.530
creating, running of arithmetic

154

00:06:21.530  -->  00:06:23.330
operations and then you can just put an

155

00:06:23.330  -->  00:06:25.760
L here and that will tell R that it is

156

00:06:25.760  -->  00:06:27.680
definitely an integer and you want to

157

00:06:27.680  -->  00:06:30.860
store as an integer. Alright we've done

158

00:06:30.860  -->  00:06:33.590
two, we've got three more to go.

159

00:06:33.590  -->  00:06:35.300
Ok so what's the next one, the next one

160

00:06:35.300  -->  00:06:36.980
is complex. We won't be stopping on

161

00:06:36.980  -->  00:06:37.969
complex

162

00:06:37.969  -->  00:06:40.939
for too long but because it is a data

163

00:06:40.939  -->  00:06:43.249
type in R, I thought it's worth

164

00:06:43.249  -->  00:06:45.379
mentioning mentioning so let's say 2, 3

165

00:06:45.379  -->  00:06:49.069
plus 2I, so if you've done math like a

166

00:06:49.069  -->  00:06:50.689
bit sophisticated math then you'll know

167

00:06:50.689  -->  00:06:52.789
what complex numbers are. If you don't,

168

00:06:52.789  -->  00:06:55.159
don't really worry about it. We won't be

169

00:06:55.159  -->  00:06:56.599
dealing with them. I'm just going to show

170

00:06:56.599  -->  00:06:59.569
you how they work here so zed is a

171

00:06:59.569  -->  00:07:02.899
complex number. It's 3+2I and if you want

172

00:07:02.899  -->  00:07:06.649
to check type of zed, you'll see that it

173

00:07:06.649  -->  00:07:09.949
is indeed complex. Alright, once again we

174

00:07:09.949  -->  00:07:11.479
won't be stopping that for too long

175

00:07:11.479  -->  00:07:13.879
so let's move on to the remaining two.

176

00:07:13.879  -->  00:07:17.179
The remaining two are character that's

177

00:07:17.179  -->  00:07:21.499
number one and let's create a character. So

178

00:07:21.499  -->  00:07:23.119
we're going to call this variable, I'm

179

00:07:23.119  -->  00:07:24.919
going to make some space here and we're

180

00:07:24.919  -->  00:07:27.259
going to call this variable A and inside

181

00:07:27.259  -->  00:07:31.159
A we want to put some text or let's say

182

00:07:31.159  -->  00:07:33.019
we want to put a letter. When I put the

183

00:07:33.019  -->  00:07:35.839
letter H, so to put a letter in to

184

00:07:35.839  -->  00:07:38.209
variable, you need to put quotation marks

185

00:07:38.209  -->  00:07:40.069
and as you could see so I'm going to

186

00:07:40.069  -->  00:07:42.289
really redo that again as you can see as

187

00:07:42.289  -->  00:07:44.869
soon as I press the single quo..

188

00:07:44.869  -->  00:07:47.929
the double quotations symbol

189

00:07:47.929  -->  00:07:50.300
once R conveniently, R studio

190

00:07:50.300  -->  00:07:52.699
conveniently creates a second one for me

191

00:07:52.699  -->  00:07:55.459
so I don't have to, I won't forget to

192

00:07:55.459  -->  00:07:57.319
close my quotation marks and then I can

193

00:07:57.319  -->  00:08:00.199
put a letter inside here. As you can see

194

00:08:00.199  -->  00:08:01.489
it's been highlighted in a different

195

00:08:01.489  -->  00:08:04.249
color and now I can check type of A,

196

00:08:04.249  -->  00:08:07.099
right? So what you'll see if I just run

197

00:08:07.099  -->  00:08:09.499
type of A right now, I'll get an error.

198

00:08:09.499  -->  00:08:12.079
Type of A, object A not found and that's

199

00:08:12.079  -->  00:08:14.839
because I haven't created this variable

200

00:08:14.839  -->  00:08:16.789
yet here so you can't even see it here

201

00:08:16.789  -->  00:08:19.489
because I forgot to run this line and

202

00:08:19.489  -->  00:08:22.610
that is because R will only execute

203

00:08:22.610  -->  00:08:25.099
the lines that you tell it to run. So

204

00:08:25.099  -->  00:08:28.489
first, let's run this line and now we can

205

00:08:28.489  -->  00:08:31.939
check type of A, as you can see it is a

206

00:08:31.939  -->  00:08:33.199
character.

207

00:08:33.199  -->  00:08:34.759
Alright, so that's how you basically

208

00:08:34.759  -->  00:08:37.099
store any kind of letters, texts and so

209

00:08:37.099  -->  00:08:40.009
on and finally we're coming a two of the

210

00:08:40.009  -->  00:08:42.559
last data type that we'll be looking at and that

211

00:08:42.559  -->  00:08:43.879
is logical.

212

00:08:43.879  -->  00:08:46.579
So in order to create a logical variable,

213

00:08:46.579  -->  00:08:48.769
let's first give it a name, let's say it'll be

214

00:08:48.769  -->  00:08:51.500
Q. That'll be the name of all variable

215

00:08:51.500  -->  00:08:53.390
by the way, you don't have to limit

216

00:08:53.390  -->  00:08:55.490
yourself at just one letter for the

217

00:08:55.490  -->  00:08:58.040
variable so let's say it will be Q1 for

218

00:08:58.040  -->  00:09:00.710
instance and here we'll assign it a

219

00:09:00.710  -->  00:09:03.500
value of true. So logical variables are

220

00:09:03.500  -->  00:09:06.860
basically either true or false and here

221

00:09:06.860  -->  00:09:08.810
we're going to assign value of true and

222

00:09:08.810  -->  00:09:10.550
for true we'll just use the letter T

223

00:09:10.550  -->  00:09:14.630
and now we'll type type of Q1. First, we'll

224

00:09:14.630  -->  00:09:17.060
run this line and as you can see now we

225

00:09:17.060  -->  00:09:20.270
have variable here true and now we'll

226

00:09:20.270  -->  00:09:21.800
run this line as you can see it's

227

00:09:21.800  -->  00:09:22.580
logical.

228

00:09:22.580  -->  00:09:24.470
By the way, there are other ways you can

229

00:09:24.470  -->  00:09:26.270
create logical variable so for instance

230

00:09:26.270  -->  00:09:31.370
you could say Q2 is not true so you can

231

00:09:31.370  -->  00:09:34.670
do true or you can do F or you can type

232

00:09:34.670  -->  00:09:36.170
in the whole world but it has to be in

233

00:09:36.170  -->  00:09:39.950
caps so Q2 is false and now we'll be

234

00:09:39.950  -->  00:09:44.540
tired of typing type of Q2. Check

235

00:09:44.540  -->  00:09:46.880
that as well it's also logical so that's

236

00:09:46.880  -->  00:09:49.640
how you create illogical variables.

237

00:09:49.640  -->  00:09:51.740
Alright so that brings us to the end of

238

00:09:51.740  -->  00:09:52.700
this tutorial.

239

00:09:52.700  -->  00:09:54.290
Hope you enjoyed it. Have a play around

240

00:09:54.290  -->  00:09:56.450
with that. Try experimenting, creating

241

00:09:56.450  -->  00:09:58.370
your own couple of variables just to

242

00:09:58.370  -->  00:10:00.140
make sure you understand how the

243

00:10:00.140  -->  00:10:02.300
different types work and I look forward

244

00:10:02.300  -->  00:10:04.580
to seeing an next time. Until then, happy

245

00:10:04.580  -->  00:10:15.450
coding.
