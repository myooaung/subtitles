WEBVTT
1

00:00:00.000  -->  00:00:07.259
Hello and welcome back to the course on

2

00:00:07.259  -->  00:00:09.150
R programming. Today we're talking

3

00:00:09.150  -->  00:00:11.610
about basic operations of data frame.

4

00:00:11.610  -->  00:00:13.830
Ok so we already know the dollar sign

5

00:00:13.830  -->  00:00:16.859
and that will come in handy today, that's

6

00:00:16.859  -->  00:00:17.880
a good start.

7

00:00:17.880  -->  00:00:20.699
Let's look at what we can do with a data

8

00:00:20.699  -->  00:00:22.320
frame so here I'll just type in

9

00:00:22.320  -->  00:00:27.119
basic operations with a data frame. So I'm

10

00:00:27.119  -->  00:00:28.710
just gonna say DF.

11

00:00:28.710  -->  00:00:30.599
Alright so what we're going to start

12

00:00:30.599  -->  00:00:32.730
with? Well we're going to start with the

13

00:00:32.730  -->  00:00:35.489
most probably common thing that you

14

00:00:35.489  -->  00:00:37.230
might want to do for data frame is

15

00:00:37.230  -->  00:00:38.820
subsetting so we already know about

16

00:00:38.820  -->  00:00:41.280
subsetting from matrices right and some

17

00:00:41.280  -->  00:00:43.350
of those things we know or probably all

18

00:00:43.350  -->  00:00:45.450
them will come in handy today, so let's

19

00:00:45.450  -->  00:00:48.539
say we want to look at stats but we will

20

00:00:48.539  -->  00:00:50.399
look at only the first 10 rows, how

21

00:00:50.399  -->  00:00:52.079
would we do it? Would say that, it's a

22

00:00:52.079  -->  00:00:53.940
stats and then it would say in square

23

00:00:53.940  -->  00:00:56.910
brackets 1 to 10 comma nothing right

24

00:00:56.910  -->  00:00:59.879
that means the first 10 rows and all of

25

00:00:59.879  -->  00:01:01.379
the columns because there's nothing here,

26

00:01:01.379  -->  00:01:04.170
to run that you'll see we've got 10 rows

27

00:01:04.170  -->  00:01:07.530
and all the columns right? So I could have,

28

00:01:07.530  -->  00:01:09.840
that is, let's type in a comment

29

00:01:09.840  -->  00:01:12.540
subsetting. I could have done a similar

30

00:01:12.540  -->  00:01:14.100
thing, I could have said stats and I

31

00:01:14.100  -->  00:01:16.530
would have, I could have said the third to the

32

00:01:16.530  -->  00:01:19.950
ninth comma nothing right or another one

33

00:01:19.950  -->  00:01:22.470
that we are where you know is we want to

34

00:01:22.470  -->  00:01:23.880
look at specific rows. We want to look at the

35

00:01:23.880  -->  00:01:26.640
fourth row and the hundredth row comma

36

00:01:26.640  -->  00:01:27.540
nothing.

37

00:01:27.540  -->  00:01:29.939
See we've got the fourth and hundred and

38

00:01:29.939  -->  00:01:32.640
you can see that every time the numbers

39

00:01:32.640  -->  00:01:34.829
of the rows are maintained or they're

40

00:01:34.829  -->  00:01:37.079
preserved so that preserves the

41

00:01:37.079  -->  00:01:39.329
structure of the data set so basically

42

00:01:39.329  -->  00:01:42.240
you it doesn't change to one and two

43

00:01:42.240  -->  00:01:44.820
it stays for 400 so then you can know

44

00:01:44.820  -->  00:01:46.860
where they where these rows came from in

45

00:01:46.860  -->  00:01:48.180
the original data set.

46

00:01:48.180  -->  00:01:50.250
Alright so that's subsetting and now

47

00:01:50.250  -->  00:01:52.079
let's remember one thing that we talked

48

00:01:52.079  -->  00:01:55.290
about previously is let's say remember, remember

49

00:01:55.290  -->  00:01:58.500
how the square brackets were right? Let's

50

00:01:58.500  -->  00:02:02.040
type in some examples. Let's say we want

51

00:02:02.040  -->  00:02:04.049
to look at stats and we only want to

52

00:02:04.049  -->  00:02:06.299
look at the first row right? If we run

53

00:02:06.299  -->  00:02:09.450
that, yep we get the first row and what

54

00:02:09.450  -->  00:02:10.770
do we get here? We'll remember in a

55

00:02:10.770  -->  00:02:12.750
matrix and we extracted just one row

56

00:02:12.750  -->  00:02:13.500
what it would

57

00:02:13.500  -->  00:02:16.830
do is it would get rid of the name here

58

00:02:16.830  -->  00:02:19.470
and it would drop a dimension basically

59

00:02:19.470  -->  00:02:22.230
turn the row into a vector right? Does

60

00:02:22.230  -->  00:02:24.570
that happen in a data frame? It doesn't

61

00:02:24.570  -->  00:02:26.310
look like it because the row number is

62

00:02:26.310  -->  00:02:28.020
still here, so it looks like this is

63

00:02:28.020  -->  00:02:30.209
still a data frame so let's quickly

64

00:02:30.209  -->  00:02:32.459
check that. We have a function is data

65

00:02:32.459  -->  00:02:34.470
frame they're pretty straightforward all

66

00:02:34.470  -->  00:02:37.170
these functions is and then dot whatever

67

00:02:37.170  -->  00:02:39.660
you're asking about and so if you run

68

00:02:39.660  -->  00:02:41.250
that, you'll see that it's true.

69

00:02:41.250  -->  00:02:44.250
So in a matrix, if you extract one row, it

70

00:02:44.250  -->  00:02:46.860
will turn into a vector. In a data frame

71

00:02:46.860  -->  00:02:49.590
issue, if you extract one row it stays as

72

00:02:49.590  -->  00:02:51.930
a data frame, so there's no need for

73

00:02:51.930  -->  00:02:54.239
that secret parameter that we know about

74

00:02:54.239  -->  00:02:57.270
drop falls right? So let's look at another

75

00:02:57.270  -->  00:02:58.860
example, let's say we want to extract

76

00:02:58.860  -->  00:03:01.140
stats and we want to extract just the

77

00:03:01.140  -->  00:03:04.080
first column, so in this case what are

78

00:03:04.080  -->  00:03:06.120
extracting, we're extracting a country name

79

00:03:06.120  -->  00:03:08.040
and this time it looks like this is no

80

00:03:08.040  -->  00:03:10.350
longer a data frame, looks like this is a

81

00:03:10.350  -->  00:03:12.480
vector that has been printed for us out

82

00:03:12.480  -->  00:03:15.600
into multiple lines right? So let's

83

00:03:15.600  -->  00:03:17.730
quickly check, is this a data frame?

84

00:03:17.730  -->  00:03:22.410
So just to be sure and close that, so you

85

00:03:22.410  -->  00:03:24.690
can see that it's not a data frame

86

00:03:24.690  -->  00:03:27.330
anymore. So if we want to preserve it as

87

00:03:27.330  -->  00:03:28.590
a data frame, what we're going to do

88

00:03:28.590  -->  00:03:30.540
we're going to say stats and then we're

89

00:03:30.540  -->  00:03:32.730
going to say comma 1 and then we'll say

90

00:03:32.730  -->  00:03:35.970
comma drop equals false. That way the

91

00:03:35.970  -->  00:03:37.769
dimension won't be dropped and if you run

92

00:03:37.769  -->  00:03:40.920
that, you can see that this is now a data

93

00:03:40.920  -->  00:03:45.540
frame and it just has one column, so same

94

00:03:45.540  -->  00:03:47.310
thing we can confirm that this is a data

95

00:03:47.310  -->  00:03:50.010
frame by just simply running that is

96

00:03:50.010  -->  00:03:52.079
different function, run that you can see

97

00:03:52.079  -->  00:03:54.720
that now it's true it is a data frame.

98

00:03:54.720  -->  00:03:56.489
Ok that's important to remember because

99

00:03:56.489  -->  00:03:59.670
so it's the same concept of dimensions

100

00:03:59.670  -->  00:04:01.320
be dropped but it only applies when

101

00:04:01.320  -->  00:04:03.390
you're extracting a column, so always

102

00:04:03.390  -->  00:04:05.730
check that just to make sure that you

103

00:04:05.730  -->  00:04:08.010
are working with what you want. Now what

104

00:04:08.010  -->  00:04:09.360
we're going to do is we're going to look

105

00:04:09.360  -->  00:04:12.780
at some mathematical operations so let's

106

00:04:12.780  -->  00:04:15.209
say we want to look at let's check out

107

00:04:15.209  -->  00:04:17.370
our data frame we can see that we've got

108

00:04:17.370  -->  00:04:19.229
two numeric values. Let's just multiply

109

00:04:19.229  -->  00:04:21.299
them, I know it just makes no sense to

110

00:04:21.299  -->  00:04:24.060
multiply birth rate by internet users

111

00:04:24.060  -->  00:04:26.670
but just to prove a point that we can do

112

00:04:26.670  -->  00:04:29.070
that let's check it out. So we'll say,

113

00:04:29.070  -->  00:04:32.220
stats dollar sign, this is adult sign

114

00:04:32.220  -->  00:04:36.240
coming in handy, birth rate multiply by stats, dollar

115

00:04:36.240  -->  00:04:39.090
sign, internet users right? So if I run

116

00:04:39.090  -->  00:04:41.460
that, we'll get the result of that in a

117

00:04:41.460  -->  00:04:44.280
vector, same thing I can add, subtract,

118

00:04:44.280  -->  00:04:47.970
multiply. Let's let's add these two. Now

119

00:04:47.970  -->  00:04:49.560
we've got the addition of the two,

120

00:04:49.560  -->  00:04:52.680
alright so pretty useless operation

121

00:04:52.680  -->  00:04:55.440
right now because they you can't, there's no

122

00:04:55.440  -->  00:04:57.510
point in doing it but it's good to know

123

00:04:57.510  -->  00:04:58.620
that you can do that.

124

00:04:58.620  -->  00:05:00.570
The next thing I want to show you and

125

00:05:00.570  -->  00:05:01.860
this is we're still on the topic of

126

00:05:01.860  -->  00:05:03.900
basic operations with data frames is

127

00:05:03.900  -->  00:05:05.910
adding a column. So you might want to add

128

00:05:05.910  -->  00:05:08.820
a column to your data frame right? So

129

00:05:08.820  -->  00:05:10.560
how would you do that?

130

00:05:10.560  -->  00:05:11.670
Well let's look at our data frame,

131

00:05:11.670  -->  00:05:13.920
you can see that here it's got only five

132

00:05:13.920  -->  00:05:16.080
columns, to add a column, what I would

133

00:05:16.080  -->  00:05:18.120
do is I would say it's very simple, I would say

134

00:05:18.120  -->  00:05:19.860
stats and then I'll just pretend that

135

00:05:19.860  -->  00:05:21.180
the column is already there. I would say

136

00:05:21.180  -->  00:05:24.210
stats, dollar sign and let's call the

137

00:05:24.210  -->  00:05:26.730
column my calc right? For my

138

00:05:26.730  -->  00:05:29.220
super-awesome calculation which has no

139

00:05:29.220  -->  00:05:31.200
meaning and I'll just copy this in here

140

00:05:31.200  -->  00:05:33.900
and then I'll run this line and now if I

141

00:05:33.900  -->  00:05:36.060
run head stats, you'll see that now I have

142

00:05:36.060  -->  00:05:38.790
this extra column, where it has the

143

00:05:38.790  -->  00:05:41.100
values have been multiplied and take

144

00:05:41.100  -->  00:05:42.720
note here that these are still

145

00:05:42.720  -->  00:05:44.820
vectorized operation so everything we're

146

00:05:44.820  -->  00:05:48.630
doing is happening on that fundamental

147

00:05:48.630  -->  00:05:51.360
rule that everything is a vector and

148

00:05:51.360  -->  00:05:52.950
everything is happening in vectorized

149

00:05:52.950  -->  00:05:55.200
form so when you multiply birth rate by

150

00:05:55.200  -->  00:05:57.420
internet users it, R knows that you

151

00:05:57.420  -->  00:05:58.830
want to multiply this value by this

152

00:05:58.830  -->  00:06:01.320
value and gets gives you that value. Then

153

00:06:01.320  -->  00:06:03.000
this value is multiplied by this value

154

00:06:03.000  -->  00:06:06.750
you get that value, so a vector is multiplied by a

155

00:06:06.750  -->  00:06:08.610
vector. Everything's happening

156

00:06:08.610  -->  00:06:10.890
in vectorized form and that's why

157

00:06:10.890  -->  00:06:13.530
vectorize operations are so important in

158

00:06:13.530  -->  00:06:16.590
R. Alright, so that's how you add a column.

159

00:06:16.590  -->  00:06:19.260
Now I wanted to actually test your

160

00:06:19.260  -->  00:06:22.020
knowledge, test of knowledge.

161

00:06:22.020  -->  00:06:25.770
Let's say I want to add a column stats

162

00:06:25.770  -->  00:06:28.800
right XYZ but I'll add a column with

163

00:06:28.800  -->  00:06:31.680
only a vector that only has five value

164

00:06:31.680  -->  00:06:33.870
so I'm going to add a vector of five

165

00:06:33.870  -->  00:06:37.140
values into a matrix or internal frame

166

00:06:37.140  -->  00:06:39.940
that has a hundred and ninety-five rows.

167

00:06:39.940  -->  00:06:42.130
What will happen now? Can you tell me

168

00:06:42.130  -->  00:06:44.470
what will happen? So will there be an

169

00:06:44.470  -->  00:06:45.280
error?

170

00:06:45.280  -->  00:06:48.010
Well there isn't an error, why isn't

171

00:06:48.010  -->  00:06:48.940
there an error?

172

00:06:48.940  -->  00:06:51.160
Let's check it out. If you look at head

173

00:06:51.160  -->  00:06:54.850
stats what you'll see is 1,2,3,4,5,1. What

174

00:06:54.850  -->  00:06:56.290
is that one stand for? What does that

175

00:06:56.290  -->  00:06:57.010
mean?

176

00:06:57.010  -->  00:06:58.690
Let's look at a few more, let's say head

177

00:06:58.690  -->  00:07:01.660
stats n=10. What you can see is

178

00:07:01.660  -->  00:07:06.010
1,2,3,4,5,1,2,3,4,5 and I guarantee if you type

179

00:07:06.010  -->  00:07:08.500
in more, 12 let's say. It just keeps going

180

00:07:08.500  -->  00:07:10.750
1,2 so what happened here is the vector

181

00:07:10.750  -->  00:07:13.900

182
1:5 was recycled and we talked about

183

00:07:13.900  -->  00:07:16.510
this way back I think it was in section

184

00:07:16.510  -->  00:07:19.300
2, that when you try to perform an

185

00:07:19.300  -->  00:07:21.430
operation where vectors in sufficient

186

00:07:21.430  -->  00:07:23.980
length it gets recycled right? But the

187

00:07:23.980  -->  00:07:26.170
important thing is that this vector or

188

00:07:26.170  -->  00:07:28.510
this vector has to be a multiple of this

189

00:07:28.510  -->  00:07:30.790
vector. So if for instance I type in here

190

00:07:30.790  -->  00:07:34.390

191
1:4 right which 195 is not a multiple

192

00:07:34.390  -->  00:07:37.480
of four around that you'll see I'll get

193

00:07:37.480  -->  00:07:39.880
an error, because R can't recycle that

194

00:07:39.880  -->  00:07:42.160
vector and it's telling you about that. So

195

00:07:42.160  -->  00:07:44.530
there you go, that's just a blast from the

196

00:07:44.530  -->  00:07:46.690
past or a test of your knowledge and

197

00:07:46.690  -->  00:07:48.490
just make sure you remember about

198

00:07:48.490  -->  00:07:51.130
recycling of vectors and vectorized

199

00:07:51.130  -->  00:07:53.290
operations because that can occur

200

00:07:53.290  -->  00:07:55.570
sometimes without you even intending it

201

00:07:55.570  -->  00:07:58.810
on or remembering about it. So now the

202

00:07:58.810  -->  00:08:00.790
last thing we want to look at is remove

203

00:08:00.790  -->  00:08:03.190
a column, how do you remove a column? Now

204

00:08:03.190  -->  00:08:05.950
that I have these columns stats,

205

00:08:05.950  -->  00:08:08.230
let's look at head stats, how do I

206

00:08:08.230  -->  00:08:10.660
remove these columns that I don't want? It's

207

00:08:10.660  -->  00:08:13.510
very simple, you say stats dollar sign

208

00:08:13.510  -->  00:08:16.060
and then the column name and all you have

209

00:08:16.060  -->  00:08:18.040
to do is assign it the value of null.

210

00:08:18.040  -->  00:08:20.320
Remember how we got used to get rid of

211

00:08:20.320  -->  00:08:23.169
names in named objects? Similar concept

212

00:08:23.169  -->  00:08:26.530
and let's get another one here we will

213

00:08:26.530  -->  00:08:29.860
say XYZ, let's get rid of it and now if I check

214

00:08:29.860  -->  00:08:33.490
out head stats, you'll see that no more

215

00:08:33.490  -->  00:08:36.010
columns. That's, there are a couple of ways

216

00:08:36.010  -->  00:08:37.419
to get rid of columns and R but this

217

00:08:37.419  -->  00:08:39.729
is by far the fastest and easiest one so

218

00:08:39.729  -->  00:08:41.800
let's just stick to that one and you

219

00:08:41.800  -->  00:08:43.870
will learn new ways. We do that quite a

220

00:08:43.870  -->  00:08:45.790
lot in this course like I show you the

221

00:08:45.790  -->  00:08:48.460
main concept and you will pick up other

222

00:08:48.460  -->  00:08:50.680
concepts as you go along as you get to

223

00:08:50.680  -->  00:08:52.030
know the language better, I don't want to

224

00:08:52.030  -->  00:08:53.130
bombard and overwhelm

225

00:08:53.130  -->  00:08:55.350
you with all this information. We're just

226

00:08:55.350  -->  00:08:57.990
learning, we're on a journey right? We're

227

00:08:57.990  -->  00:08:59.610
in journey and we're learning what we

228

00:08:59.610  -->  00:09:01.440
need to go through this journey and have

229

00:09:01.440  -->  00:09:04.590
fun and make it exciting, so if you want

230

00:09:04.590  -->  00:09:06.360
to get rid of a column just use this way,

231

00:09:06.360  -->  00:09:08.760
it's the fastest and easiest one to use.

232

00:09:08.760  -->  00:09:10.530
Alright,

233

00:09:10.530  -->  00:09:11.700
that brings us to the end of today's

234

00:09:11.700  -->  00:09:13.740
tutorial. I hope you enjoyed these

235

00:09:13.740  -->  00:09:15.870
basic operations with data frames. As you

236

00:09:15.870  -->  00:09:18.210
can see we're slowly getting building

237

00:09:18.210  -->  00:09:19.830
this knowledge on data frames and

238

00:09:19.830  -->  00:09:22.380
in this tutorial I actually encourage you

239

00:09:22.380  -->  00:09:25.470
to take a break and actually practice

240

00:09:25.470  -->  00:09:26.970
what you've learned,

241

00:09:26.970  -->  00:09:29.130
do some of your operations switch some

242

00:09:29.130  -->  00:09:30.690
imagination on, try some different

243

00:09:30.690  -->  00:09:34.140
operations here, mathematical operators

244

00:09:34.140  -->  00:09:36.240
and so on. So just practice this stuff

245

00:09:36.240  -->  00:09:39.030
and let that knowledge sink in and I'll

246

00:09:39.030  -->  00:09:40.290
see you in the next tutorial,

247

00:09:40.290  -->  00:09:52.440
until then happy coding.
