WEBVTT
1
00:00:05.170 --> 00:00:08.960
Hello and welcome back to the advanced course on our programming.

2
00:00:08.970 --> 00:00:15.490
Today we're talking about a new member of the family of functions we're talking about supply.

3
00:00:15.510 --> 00:00:15.910
All right.

4
00:00:15.930 --> 00:00:20.110
So first things first what do we do when we have a new function.

5
00:00:20.160 --> 00:00:22.250
We ask the question.

6
00:00:22.350 --> 00:00:24.800
Right so let's have a look here.

7
00:00:24.810 --> 00:00:25.130
All right.

8
00:00:25.140 --> 00:00:32.430
So let's zoom in and we are back at this same help page that we had for Elle apply apply a function

9
00:00:32.430 --> 00:00:39.100
of a list or vector you can say l applies here and that is because supply is very very similar to apply

10
00:00:39.120 --> 00:00:39.620
.

11
00:00:39.660 --> 00:00:43.620
In fact supply and we can read through it.

12
00:00:43.620 --> 00:00:51.000
Here you can see that supply is a user friendly version and wrapper of L apply by default or returning

13
00:00:51.000 --> 00:00:53.390
a vector or Matrix.

14
00:00:53.490 --> 00:00:59.640
So that is the essence of supply and that's why it has the word s is because it the letter S is because

15
00:00:59.670 --> 00:01:04.730
it is a simpler version of L plates simplifies the output.

16
00:01:04.740 --> 00:01:11.280
So basically supply is like calling l apply and then seeing if the output can be turned into a vector

17
00:01:11.310 --> 00:01:14.690
or a matrix rather than keeping it as a list.

18
00:01:14.820 --> 00:01:24.390
And as we will see just now the supply function is very very very convenient in terms of producing deliverables

19
00:01:24.480 --> 00:01:26.480
and presentable results.

20
00:01:26.490 --> 00:01:28.060
So let's get started.

21
00:01:28.320 --> 00:01:30.730
Here is our weather list right.

22
00:01:30.740 --> 00:01:32.160
And what are we going to do.

23
00:01:32.550 --> 00:01:36.860
Well let's start by looking at some of the examples that we've already kind of work with.

24
00:01:36.870 --> 00:01:40.050
And then seeing how they translate into a supply.

25
00:01:40.290 --> 00:01:46.810
So we're going to say average high temperature in Fahrenheit for July.

26
00:01:46.830 --> 00:01:49.910
How would we find it would say move play.

27
00:01:49.950 --> 00:01:50.240
Right.

28
00:01:50.240 --> 00:01:52.260
So this is something we've talked about before.

29
00:01:52.330 --> 00:01:58.590
I would say weather and then we would say okay we want to extract something so that's going to be our

30
00:01:58.770 --> 00:02:03.420
square brackets operator then we want the average high temperature Fahrenheit.

31
00:02:03.420 --> 00:02:05.300
So that's the first row.

32
00:02:05.610 --> 00:02:08.100
And July is our seventh month.

33
00:02:08.130 --> 00:02:10.700
So we're going to say seven here.

34
00:02:10.830 --> 00:02:12.760
These are optional parameters right.

35
00:02:12.960 --> 00:02:20.270
So if on this line there we go we've got that average high temperatures for every city in July.

36
00:02:20.310 --> 00:02:26.400
And you can spot check say Houston July 94 just in July 94.

37
00:02:26.730 --> 00:02:33.660
OK but now what will happen if I do exactly the same thing but instead of elderlies say as supply what

38
00:02:33.660 --> 00:02:34.760
do you think will happen.

39
00:02:35.070 --> 00:02:39.810
Well do you notice that these values are kind of there in a list.

40
00:02:39.810 --> 00:02:40.050
Right.

41
00:02:40.060 --> 00:02:41.880
But they could totally be in a vector.

42
00:02:41.880 --> 00:02:45.670
There's only four of them they could just be lined up in a victual as well as supply will do.

43
00:02:45.720 --> 00:02:47.580
So I just replaced one letter.

44
00:02:47.740 --> 00:02:49.010
We run this line.

45
00:02:49.260 --> 00:02:52.980
And as you can see we've got a beautiful named vector.

46
00:02:53.070 --> 00:02:54.810
So the supply function.

47
00:02:54.810 --> 00:03:00.930
What it did is instead of returning a list like apply it put the values into a vector just to simplify

48
00:03:00.930 --> 00:03:01.620
things.

49
00:03:01.650 --> 00:03:08.860
So if you want the very strict approach then apply will always return a list like you expect.

50
00:03:08.880 --> 00:03:09.290
Yes.

51
00:03:09.390 --> 00:03:14.670
And as supply is so useful that can understand what to expect from a supply.

52
00:03:14.670 --> 00:03:21.300
It's just that it depending on what process you run here what kind of information extraction you run

53
00:03:21.660 --> 00:03:24.390
in marriage and a vector or a matrix.

54
00:03:24.390 --> 00:03:27.570
All right so now let's have a look at another example.

55
00:03:27.570 --> 00:03:36.450
We're going to look at average high Fahrenheit for a last quarter let's say not last quarter let's say

56
00:03:36.450 --> 00:03:39.470
fourth quarter part last three months of the year.

57
00:03:39.480 --> 00:03:40.790
So we'll say I'll apply.

58
00:03:40.830 --> 00:03:49.650
Same thing whether then extract so square brackets first row and then we will say the months 10 11 and

59
00:03:49.650 --> 00:03:50.570
12.

60
00:03:50.760 --> 00:03:57.600
If I run that you can see here Chicago October November December showing them December New York Houston

61
00:03:57.600 --> 00:03:58.730
San Francisco.

62
00:03:59.160 --> 00:03:59.520
All right.

63
00:03:59.520 --> 00:04:04.860
So what would apply do in this case because you know you can't really put them into a vector right.

64
00:04:04.860 --> 00:04:06.210
What would supply it.

65
00:04:06.470 --> 00:04:08.450
Well let's have a look.

66
00:04:08.730 --> 00:04:12.100
As supply has put them into a beautiful matrix.

67
00:04:12.240 --> 00:04:15.740
So how convenient is that instead of reading through all this information.

68
00:04:15.850 --> 00:04:17.970
Where got the name of the city at the top.

69
00:04:17.970 --> 00:04:22.110
Then you've got the name of the man you've got the values and then it repeats again.

70
00:04:22.230 --> 00:04:27.390
Here you actually just have names of the cities and the months going down and you can quickly look up

71
00:04:27.390 --> 00:04:32.450
the information you're after and you can also compare them side by side because Chicago and New York

72
00:04:32.460 --> 00:04:38.220
Houston San Francisco or you can kopeck October November and December and see how the temperatures are

73
00:04:38.220 --> 00:04:39.690
slowly dropping.

74
00:04:39.990 --> 00:04:44.280
Very very convenient way of presenting information.

75
00:04:44.280 --> 00:04:46.470
Let's have a look at another example.

76
00:04:46.470 --> 00:04:54.400
All right so let's say something we've also worked with El apply whether this is going to be great.

77
00:04:55.060 --> 00:04:55.600
Means.

78
00:04:55.710 --> 00:04:56.600
Right.

79
00:04:56.640 --> 00:05:02.490
So this is what we've talked about and this is remember that when we're getting closer to deliverable

80
00:05:02.500 --> 00:05:06.930
one when there is already in one list we can really kind of compare it.

81
00:05:07.060 --> 00:05:10.060
But at the same time we can get it to be even better.

82
00:05:10.060 --> 00:05:18.880
So let's say as apply whether that means instead of applying for that boiler now it's actually all in

83
00:05:18.880 --> 00:05:19.920
one matrix.

84
00:05:19.930 --> 00:05:25.140
And just to make it really pretty which is going to run this matrix Yes we're going to run the whole

85
00:05:25.140 --> 00:05:26.440
result the whole matrix.

86
00:05:26.440 --> 00:05:29.700
We're going to round it to two decimal points.

87
00:05:29.920 --> 00:05:34.020
So if far on that you can see here same thing but just run it.

88
00:05:34.190 --> 00:05:41.470
We've got the cities and we've got the averages of every single row so basically we went from where

89
00:05:41.480 --> 00:05:48.700
it was where I was whether there is or whether we went from this from all this information with five

90
00:05:48.690 --> 00:05:57.150
rows and 12 columns with all of this what we just did is because we as roll means we used supply on

91
00:05:57.210 --> 00:06:03.840
whether a ball in the road means of all of these rows or so the means of the rows for every single matrix

92
00:06:04.300 --> 00:06:10.360
and then as supply put them into matrix for us like that instead of a list which would apply would do

93
00:06:10.380 --> 00:06:10.580
.

94
00:06:10.700 --> 00:06:16.410
And then we just rounded it and now we have this amazing information just what we were after.

95
00:06:16.480 --> 00:06:22.650
So very easy to compare so we can compare the hours of sunshine and we can say r.k San Francisco got

96
00:06:22.650 --> 00:06:25.470
them on sunshine days of precipitation.

97
00:06:25.480 --> 00:06:30.460
Most are in New York which are the new average precipitation in inches.

98
00:06:30.510 --> 00:06:34.480
Houston highest average low Fahrenheit temperature.

99
00:06:34.480 --> 00:06:35.520
So which one is the lowest.

100
00:06:35.520 --> 00:06:41.640
Here for the three point twenty five Chicago seems like the coldest city average high.

101
00:06:41.780 --> 00:06:45.550
We've got Houston seventy nine point sixty seven the hottest city.

102
00:06:45.750 --> 00:06:46.320
All right.

103
00:06:46.320 --> 00:06:46.770
Beautiful.

104
00:06:46.770 --> 00:06:51.420
So this is going to be our deliverable one deliverable one.

105
00:06:51.510 --> 00:06:52.230
Awesome.

106
00:06:52.230 --> 00:06:56.810
We're just going to say awesome like that because it is ready it is ready too.

107
00:06:56.860 --> 00:07:00.450
It's presentable and somebody can actually go and work with it.

108
00:07:00.450 --> 00:07:04.740
So another example as supply is quite a propell function.

109
00:07:04.750 --> 00:07:06.970
So we're going to have another example.

110
00:07:06.970 --> 00:07:08.010
All right.

111
00:07:08.010 --> 00:07:10.260
So here we are going to look at this.

112
00:07:10.250 --> 00:07:15.030
Remember we stopped here a little while to temporary fluctuations temperature will improve.

113
00:07:15.030 --> 00:07:16.680
So let's see if we can improve.

114
00:07:16.690 --> 00:07:17.960
So what do we do here.

115
00:07:17.980 --> 00:07:19.350
Let's just go through this again.

116
00:07:19.600 --> 00:07:20.800
Weather is our list.

117
00:07:20.810 --> 00:07:27.020
We're applying apply so iterating through the components of a list and applying this function where

118
00:07:27.030 --> 00:07:32.710
we taking the first row minus the second row and dividing it all by second row.

119
00:07:32.700 --> 00:07:34.910
So we're normalizing by second row.

120
00:07:34.930 --> 00:07:40.620
If I run that you can see that this is how much it temperature fluctuates from the minimum.

121
00:07:40.620 --> 00:07:46.980
So the average minimum for that month across many many years to the max seventy 78 percent fluctuation

122
00:07:46.990 --> 00:07:49.670
20 percent 25 29 and so on.

123
00:07:49.950 --> 00:07:55.570
So once again this was very close to what we want in the deliverable because it's already in a list

124
00:07:55.560 --> 00:07:55.590
.

125
00:07:55.600 --> 00:07:58.340
It's already very conveniently packed.

126
00:07:58.410 --> 00:08:00.930
So technically we could analyze it already.

127
00:08:01.020 --> 00:08:09.980
But if we just change this to supply instead of L apply and run it where do we get much easier.

128
00:08:10.000 --> 00:08:11.830
You will have to agree on this one.

129
00:08:11.910 --> 00:08:13.970
It looks amazing.

130
00:08:14.190 --> 00:08:19.180
So one thing is trying to compare this across to different cities.

131
00:08:19.180 --> 00:08:24.750
The other thing is just this wonderful matrix where you've got all the months you've got the cities

132
00:08:25.140 --> 00:08:31.110
and you've got all of the fluctuations in temperature so you can see it in San Francisco right away

133
00:08:31.120 --> 00:08:31.350
.

134
00:08:31.360 --> 00:08:34.170
Fluctuations aren't that high in Houston.

135
00:08:34.170 --> 00:08:36.210
It goes all the way up to 47.

136
00:08:36.220 --> 00:08:39.250
So in January in winter months the fluctuations are high.

137
00:08:39.250 --> 00:08:44.370
Then they slowly drop off during the summer months and then they pick up again in New York.

138
00:08:44.370 --> 00:08:46.660
What do we have a similar picture.

139
00:08:46.650 --> 00:08:50.660
We've got high fluctuations in winter low fluctuations in summer months.

140
00:08:50.760 --> 00:08:55.020
And then finally Chicago we've got the highest fluctuations over here.

141
00:08:55.120 --> 00:08:59.920
Once again looks like temperature fluctuations are the highest in winter across the board except for

142
00:08:59.910 --> 00:09:01.130
San Francisco.

143
00:09:01.330 --> 00:09:08.110
And also you can see that Chicago has got some of the craziest temperature fluctuations especially around

144
00:09:08.320 --> 00:09:10.510
that January period.

145
00:09:10.950 --> 00:09:13.750
And once again this is in Fahrenheit.

146
00:09:13.990 --> 00:09:14.480
All right.

147
00:09:14.520 --> 00:09:15.720
So there we go.

148
00:09:15.730 --> 00:09:20.100
This is going to be our deliverable too.

149
00:09:20.350 --> 00:09:21.030
Awesome.

150
00:09:21.370 --> 00:09:28.010
And to finish off with today's Tauriel what I want to show you was by the way just this is going be

151
00:09:28.020 --> 00:09:33.130
like confirmation that air supply is a version of Al apply.

152
00:09:33.190 --> 00:09:38.710
So apply what we're going to do which is actually going to copy Romains this one here.

153
00:09:38.940 --> 00:09:40.330
So we're going to copy that.

154
00:09:40.380 --> 00:09:43.240
And so far on that is the matrix right.

155
00:09:43.440 --> 00:09:44.240
Gives us a matrix.

156
00:09:44.290 --> 00:09:52.460
If I say simplify equals false and I run that you'll see it'll give me a list.

157
00:09:52.770 --> 00:09:56.550
That is because you're telling it not to simplify the result.

158
00:09:56.830 --> 00:09:59.720
And that is same as l apply.

159
00:09:59.980 --> 00:10:05.640
Well technically if you check the core question mark for a supply you will notice that there is another

160
00:10:05.830 --> 00:10:08.610
component here that you have to fix up.

161
00:10:08.640 --> 00:10:10.000
It was talking about here.

162
00:10:10.000 --> 00:10:13.290
So simplify false and use name false.

163
00:10:13.300 --> 00:10:15.720
So then it'll be same as ellabella.

164
00:10:15.730 --> 00:10:22.740
So basically you need to add another one which is use Daut names equals false for completeness of the

165
00:10:22.750 --> 00:10:25.120
picture for that to be identical applied.

166
00:10:25.240 --> 00:10:30.180
But basically that proves the point that supply is a version of L apply.

167
00:10:30.180 --> 00:10:34.920
It just simplifies the result and if you tell it not to simplify the result then you will pretty much

168
00:10:34.920 --> 00:10:36.650
get the same as l applied.

169
00:10:36.850 --> 00:10:44.010
OK so that brings us to the end of just a Tauriel about this very powerful function and very convenient

170
00:10:44.010 --> 00:10:47.790
function as supply which helps simplify results.

171
00:10:47.800 --> 00:10:48.820
Hope you enjoyed this one.

172
00:10:48.850 --> 00:10:51.340
And I look forward see you next time.

173
00:10:51.370 --> 00:10:54.360
Until then happy coding.
