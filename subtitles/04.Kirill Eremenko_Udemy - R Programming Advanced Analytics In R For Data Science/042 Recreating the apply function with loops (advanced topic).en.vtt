WEBVTT
1
00:00:05.670 --> 00:00:10.360
Hello and welcome back to the advanced course on our programming in the press tural we learned about

2
00:00:10.350 --> 00:00:18.240
the Apply function and how to use it in our So we had quite a few examples of how it can be convenient

3
00:00:18.300 --> 00:00:22.350
to apply certain functions to your whole matrix.

4
00:00:22.430 --> 00:00:23.640
And in one go.

5
00:00:23.850 --> 00:00:29.070
And today we were actually going to concrete that in today we're going to have a tutorial that is not

6
00:00:29.070 --> 00:00:35.280
so much tailored to achieving what we need to achieve in this section but it's rather very fundamental

7
00:00:35.280 --> 00:00:37.440
and conceptual in its nature.

8
00:00:37.440 --> 00:00:42.850
We're going to talk about how to recreate the Apply function using loops.

9
00:00:42.870 --> 00:00:50.100
So you see I decided to bring this up because normally this is not discussed in materials courses trainings

10
00:00:50.100 --> 00:00:50.930
on our probing.

11
00:00:50.940 --> 00:00:59.340
But personally I find that this is incredibly valuable because that for me coming from a C C++ type

12
00:00:59.340 --> 00:01:04.050
of background and a skill and so on the play functions were very alien.

13
00:01:04.050 --> 00:01:08.490
You don't normally come across them or anything similar to them in other programming languages.

14
00:01:08.610 --> 00:01:14.190
And knowing those other methods that are used to or that I use in other programming languages like loops

15
00:01:14.370 --> 00:01:19.470
I have to admit but it made me procrastinate back in the day of learning are because this was so different

16
00:01:19.470 --> 00:01:19.490
.

17
00:01:19.500 --> 00:01:26.970
And until I actually sat down and understood how these apply functions work through loops until then

18
00:01:27.090 --> 00:01:29.820
it was kind of like very very different for me.

19
00:01:29.820 --> 00:01:35.250
So that's what I want to do today I want to show you how to recreate the Apply function with loops and

20
00:01:35.250 --> 00:01:37.960
hopefully it click in your head as well.

21
00:01:38.100 --> 00:01:43.740
So let's go ahead and do this this won't take long but it will have immense value especially if you're

22
00:01:43.740 --> 00:01:47.260
coming from a programming background into our.

23
00:01:47.310 --> 00:01:48.790
All right so there is Chicago.

24
00:01:48.840 --> 00:01:50.580
There's our matrix.

25
00:01:50.580 --> 00:01:58.040
So what we're going to do now is we're going to find the means of every row and method number one is

26
00:01:58.050 --> 00:02:00.090
going to be via loops.

27
00:02:00.090 --> 00:02:05.090
So let's assume we forgot everything about the Apply function we don't know that it exists right.

28
00:02:05.130 --> 00:02:07.070
So we've just started learning our.

29
00:02:07.320 --> 00:02:09.060
And we know a bit about loops.

30
00:02:09.060 --> 00:02:10.230
How would we do it.

31
00:02:10.470 --> 00:02:16.720
Well we would loop through all of these rows one by one and we would find the average of a show.

32
00:02:16.720 --> 00:02:17.950
So go ahead and do that.

33
00:02:18.000 --> 00:02:23.400
First things first we would create a vector which would be the area where we put the output I would

34
00:02:23.400 --> 00:02:27.650
call it output output and would fill it with no meaning.

35
00:02:27.660 --> 00:02:35.130
We're preparing an empty vector because inside a loop you need somewhere to put your results there would

36
00:02:35.160 --> 00:02:36.030
create a loop.

37
00:02:36.030 --> 00:02:41.990
So I'd say for I in 1 2 5 or we are cheating here a little bit because we already know that there's

38
00:02:42.000 --> 00:02:42.850
five rows.

39
00:02:42.900 --> 00:02:47.770
Ideally you would put in something like number of rows of this matrix.

40
00:02:47.880 --> 00:02:51.150
But let's leave it at 1 to 5 just to make things easier.

41
00:02:51.240 --> 00:02:57.550
And here we are going to run the cycle or the loop and what we want is for.

42
00:02:57.840 --> 00:03:04.080
So I is going to be our iterator is going to go from 1 to 5 and for every I what we want to do is we

43
00:03:04.080 --> 00:03:08.370
want to look at the mean right to the average of each row.

44
00:03:08.370 --> 00:03:09.930
So how do we get to a row.

45
00:03:10.050 --> 00:03:15.750
If hypothetically we wanted to look at the first row of this matrix What would you say we would say

46
00:03:16.290 --> 00:03:22.050
Chicago square brackets and one common nothing so far unless I get just the first draw right.

47
00:03:22.050 --> 00:03:26.930
So 32 36 46 59 32 36 46 59.

48
00:03:27.150 --> 00:03:31.660
So now if I run this this will give me that average of this first row.

49
00:03:31.980 --> 00:03:33.980
But now I know that I'm doing this in a loop.

50
00:03:33.990 --> 00:03:38.540
So it's like iterating over and over and over so it's going one two three four or five.

51
00:03:38.700 --> 00:03:40.700
So in the first iteration.

52
00:03:40.710 --> 00:03:44.670
Yes indeed I will need the first row but then in the second iteration only the second row.

53
00:03:44.670 --> 00:03:46.590
So how do I get this to the second row.

54
00:03:46.620 --> 00:03:51.380
Knowing that I will be iterating Well Sibyl I just replaced this one with an eye.

55
00:03:51.780 --> 00:03:57.030
And that way whatever I's equal to that of roll will get here and so in the first iteration of the first

56
00:03:57.030 --> 00:03:59.940
row second will be the second row and so on.

57
00:04:00.300 --> 00:04:05.050
And then what you want to do is you want to place this result in the output.

58
00:04:05.060 --> 00:04:11.590
So it's output and it'll have an index right into the index will also match.

59
00:04:11.610 --> 00:04:16.190
So the first element of the output will be the average for the first row.

60
00:04:16.200 --> 00:04:19.900
The second element of the output will be the average for the second row and so on.

61
00:04:20.100 --> 00:04:25.270
And so that's what's going to give us the results so far on this well altogether.

62
00:04:25.530 --> 00:04:27.540
Now you can see that it's finished.

63
00:04:27.540 --> 00:04:30.570
We don't see anything so let's have a look at the result output.

64
00:04:30.660 --> 00:04:33.340
So we humans are going to type Let's see what we have.

65
00:04:33.340 --> 00:04:33.750
All right.

66
00:04:33.790 --> 00:04:34.570
Around that.

67
00:04:34.710 --> 00:04:36.850
So we got that we've got the averages.

68
00:04:36.930 --> 00:04:41.940
Now what we want to do is we want to change this into a named vector right because we don't know what

69
00:04:42.000 --> 00:04:47.070
is an average for what like we do know the order here but does nothing tell us the order here.

70
00:04:47.070 --> 00:04:51.380
So we want to add these names as the names of this vector.

71
00:04:51.690 --> 00:04:58.590
So let's go ahead and do that final step will say names of output is going to be row names of Chicago

72
00:04:58.680 --> 00:05:02.320
in to borrow them from the Chicago matrix.

73
00:05:02.500 --> 00:05:05.130
And now if we look at output you'll see that.

74
00:05:05.130 --> 00:05:11.510
Now we do have a named vector and we know that the average So the average of the average high temperature

75
00:05:11.550 --> 00:05:13.870
Fahrenheit is 59 by three.

76
00:05:13.890 --> 00:05:17.390
This is forty three point twenty five three point twenty five and so on.

77
00:05:17.400 --> 00:05:22.210
So this is how much code we had to write to do it via loops.

78
00:05:22.230 --> 00:05:27.090
Now we're going to do it method number two via apply.

79
00:05:27.210 --> 00:05:27.690
Right.

80
00:05:27.690 --> 00:05:30.180
So how are we going to do it.

81
00:05:30.180 --> 00:05:30.990
Very simple.

82
00:05:30.990 --> 00:05:36.720
We already know how to do it or just say apply which matrix we are applying this to Chicago obviously

83
00:05:37.220 --> 00:05:40.100
or we're applying it to the rows or circles to the rows.

84
00:05:40.170 --> 00:05:47.340
And what are applying we we're applying the mean run that done as the results are identical absolutely

85
00:05:47.340 --> 00:05:48.290
identical.

86
00:05:48.390 --> 00:05:51.050
But this took one line of code.

87
00:05:51.300 --> 00:06:00.330
This took one two three four five six seven lines of code and that's is the main difference that these

88
00:06:00.330 --> 00:06:02.420
functions are just shorter.

89
00:06:02.670 --> 00:06:11.760
They're faster because our is just designed that way and they allow you to create very interesting code

90
00:06:11.820 --> 00:06:17.640
very quickly so this is a huge advantage of this programming language and it should be used of course

91
00:06:17.640 --> 00:06:21.120
you can still go through the loop method and cycles and everything.

92
00:06:21.120 --> 00:06:26.300
But generally speaking nobody who knows our well and uses it on a daily basis.

93
00:06:26.310 --> 00:06:33.000
Nobody does this because pretty much anything you can create a for loop can be created with apply or

94
00:06:33.060 --> 00:06:36.120
another one of those functions from the Apply family.

95
00:06:36.150 --> 00:06:42.960
So I hope you enjoy this tutorial and it does kind of add some value to your conceptual understanding

96
00:06:42.990 --> 00:06:44.730
of programming in our.

97
00:06:44.730 --> 00:06:48.050
And also specifically apply family functions.

98
00:06:48.090 --> 00:06:54.990
So whenever we're talking about apply apply a supply or any other function down in this further down

99
00:06:54.990 --> 00:07:01.530
in the section scores just try to also remember what we talked about here and kind of picture oh how

100
00:07:01.530 --> 00:07:03.030
would this look like in loops.

101
00:07:03.030 --> 00:07:07.700
OK now I understand what the specific function is achieving.

102
00:07:07.770 --> 00:07:12.690
And that way to do it a couple times it will become second nature and you don't even have to think about

103
00:07:12.690 --> 00:07:13.450
loops anymore.

104
00:07:13.500 --> 00:07:16.130
You'll just literally see right away what's going on.

105
00:07:16.140 --> 00:07:18.860
It will help you really grasp these concepts.

106
00:07:19.140 --> 00:07:23.610
All right so that brings us to the end of this tutorial and maybe play around with that.

107
00:07:23.700 --> 00:07:25.950
Try a different example try an example.

108
00:07:25.950 --> 00:07:30.570
Another one of the examples that we had over here and tried to see if you can recreate it and I look

109
00:07:30.570 --> 00:07:33.860
forward to seeing you on the next natural until then happy coding
