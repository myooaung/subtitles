WEBVTT
1
00:00:01.705 --> 00:00:02.194
So far,

2
00:00:02.194 --> 00:00:06.091
we've shown you how a binding API can offer you a really easy way of

3
00:00:06.091 --> 00:00:08.973
mapping your POJOs to their equivalent JSON structure.

4
00:00:08.973 --> 00:00:11.769
But in the real world, things are rarely so easy.

5
00:00:11.769 --> 00:00:15.293
You may find that you have a POJO in your application that is a

6
00:00:15.293 --> 00:00:17.032
slightly different structure to the JSON,

7
00:00:17.032 --> 00:00:21.263
but still want a benefit form the ease of use of a binding API.

8
00:00:21.263 --> 00:00:23.732
Don't worry, like a fine Savile Row tailor,

9
00:00:23.732 --> 00:00:27.839
Jackson will allow you to customize the way these things fit together.

10
00:00:27.839 --> 00:00:31.434
The first assumption that we want to break free of the

11
00:00:31.434 --> 00:00:33.782
requirements for our POJO to be mutable.

12
00:00:33.782 --> 00:00:37.114
Immutability is an increasingly common pattern in the Java ecosystem.

13
00:00:37.114 --> 00:00:40.522
And it means that once the object is being created,

14
00:00:40.522 --> 00:00:42.452
it's state cannot be modified.

15
00:00:42.452 --> 00:00:46.202
This reduces the scope for bugs in our application.

16
00:00:46.202 --> 00:00:49.036
A practical implication of this in JSON binding terms is that immutable

17
00:00:49.036 --> 00:00:52.600
objects don't have setters and should make their fields final.

18
00:00:52.600 --> 00:00:55.438
If the fields are final, and you have no setters,

19
00:00:55.438 --> 00:00:57.164
how will Jackson construct your object?

20
00:00:57.164 --> 00:01:00.908
Well the best way of solving this problem is to create a constructor that

21
00:01:00.908 --> 00:01:05.725
sets all the fields to your immutable object and tells Jackson to use that

22
00:01:05.725 --> 00:01:07.988
constructor with the @JsonCreator annotation.

23
00:01:07.988 --> 00:01:11.006
Each parameter must correspond to a property in the

24
00:01:11.006 --> 00:01:12.683
JSON object that you're deserializing.

25
00:01:12.683 --> 00:01:15.161
In order to tell Jackson what the name of that field is,

26
00:01:15.161 --> 00:01:17.711
you should use the @JsonProperty annotation.

27
00:01:17.711 --> 00:01:18.354
Awesome!

28
00:01:18.354 --> 00:01:22.187
Now we're consuming JSON into immutable POJOs.

29
00:01:22.187 --> 00:01:25.983
Renaming is another common binding task that can be done

30
00:01:25.983 --> 00:01:28.204
declaratively with annotations in Jackson.

31
00:01:28.204 --> 00:01:33.269
Let's suppose you're consuming JSON where you have a property named name.

32
00:01:33.269 --> 00:01:34.059
Over time,

33
00:01:34.059 --> 00:01:37.012
your development team decides that this isn't a very readable

34
00:01:37.012 --> 00:01:40.799
or appropriate name and it decides the application's POJO

35
00:01:40.799 --> 00:01:43.322
property should be applicantName.

36
00:01:43.322 --> 00:01:46.354
But you still want to bind the JSON with the same format as

37
00:01:46.354 --> 00:01:48.519
before so as not to break your wire format.

38
00:01:48.519 --> 00:01:48.763
Well,

39
00:01:48.763 --> 00:01:52.020
you can just put the @JsonProperty annotation onto either the

40
00:01:52.020 --> 00:01:55.276
getter or setter or the field of the POJO.

41
00:01:55.276 --> 00:01:57.981
And this tells Jackson to set the JSON property with

42
00:01:57.981 --> 00:01:59.910
the name specified by the annotation.

43
00:01:59.910 --> 00:02:00.227
Similarly,

44
00:02:00.227 --> 00:02:03.990
sometimes you may have some fields in your Java POJO that you

45
00:02:03.990 --> 00:02:06.205
don't want to be set for JSON bindings.

46
00:02:06.205 --> 00:02:08.697
Perhaps these contain data structures that are not

47
00:02:08.697 --> 00:02:11.341
serialized or you want to keep secret, for example,

48
00:02:11.341 --> 00:02:12.766
a field storing a password.

49
00:02:12.766 --> 00:02:17.496
This is where Jackson's @JsonIgnore annotation comes in.

50
00:02:17.496 --> 00:02:21.086
Simply add this to a setter or a getter and Jackson won't complain if the

51
00:02:21.086 --> 00:02:24.516
jobs field is missing or being used by another setter.

52
00:02:24.516 --> 00:02:28.339
Finally, let's take a look at the pattern for transforming properties.

53
00:02:28.339 --> 00:02:32.116
Maybe you're storing data internally in your object in one data structure,

54
00:02:32.116 --> 00:02:36.074
but only want to use a JSON array for the serialized format.

55
00:02:36.074 --> 00:02:38.717
You can write a setter that builds up the internal data

56
00:02:38.717 --> 00:02:39.983
structure from the serialized format.

57
00:02:39.983 --> 00:02:43.295
For example here, we're taking a list of jobs for our loan application,

58
00:02:43.295 --> 00:02:47.527
but the internal data structure is a map where it creates the key from the

59
00:02:47.527 --> 00:02:51.753
title of the job and its value is the job object itself.

60
00:02:51.753 --> 00:02:54.852
This transformation approach of writing custom setter works fine for

61
00:02:54.852 --> 00:02:57.444
individual fields that may have a different representation.

62
00:02:57.444 --> 00:03:01.225
Sometimes you may want to have a different representation entirely.

63
00:03:01.225 --> 00:03:03.671
For example, if you take a LocalDate object in Java,

64
00:03:03.671 --> 00:03:06.484
such as 21st of May 1984, I want to represent it in JSON,

65
00:03:06.484 --> 00:03:09.932
then you may wish to use a string representation using the

66
00:03:09.932 --> 00:03:12.963
ISO 8601 standard for data formatting.

67
00:03:12.963 --> 00:03:15.527
You don't have to write a custom setter for every

68
00:03:15.527 --> 00:03:16.809
LocalDate field in your application.

69
00:03:16.809 --> 00:03:17.210
Thankfully,

70
00:03:17.210 --> 00:03:22.140
Jackson offers a way of writing custom deserializers for fields for given types.

71
00:03:22.140 --> 00:03:24.791
It includes one for LocalDate in its library.

72
00:03:24.791 --> 00:03:26.457
In order to register the custom deserializer,

73
00:03:26.457 --> 00:03:28.319
you need to create a Jackson module,

74
00:03:28.319 --> 00:03:31.007
which is like a registry for deserializers and

75
00:03:31.007 --> 00:03:34.075
associated deserializer object for the type.

76
00:03:34.075 --> 00:03:42.000
This module may now be registered with your ObjectMapper, and hey, presto, readable LocalDate objects.

