WEBVTT
1
00:00:01.959 --> 00:00:05.717
Let's look at JSON in a little bit more detail now, shall we?

2
00:00:05.717 --> 00:00:08.992
Firstly, JSON itself is a standard.

3
00:00:08.992 --> 00:00:11.721
It's defined by RFC 4627.

4
00:00:11.721 --> 00:00:14.518
Being a standard is really good because it means you can have a strong

5
00:00:14.518 --> 00:00:18.413
expectation of compatibility between different systems that use JSON.

6
00:00:18.413 --> 00:00:21.042
You know that JSON produced by your Java server can

7
00:00:21.042 --> 00:00:22.835
be read by a JavaScript website,

8
00:00:22.835 --> 00:00:26.546
or maybe even another server written in Python or C++.

9
00:00:26.546 --> 00:00:29.177
The JSON itself is representing an object tree.

10
00:00:29.177 --> 00:00:32.922
It's just as fun as a Christmas tree, but a lot more useful.

11
00:00:32.922 --> 00:00:36.302
So just like a plain Java object, it can reference other objects,

12
00:00:36.302 --> 00:00:38.768
and those are children within its structure.

13
00:00:38.768 --> 00:00:44.123
It also means that each JSON object maps nicely to a Java object.

14
00:00:44.123 --> 00:00:47.240
You don't have a problem that interacting with something like SQL does

15
00:00:47.240 --> 00:00:49.760
where there's an object relational impedance mismatch.

16
00:00:49.760 --> 00:00:52.882
It's usually pretty obvious and pretty simple to map types and

17
00:00:52.882 --> 00:00:55.277
concepts between JSON and your Java code.

18
00:00:55.277 --> 00:00:57.106
Now, enough of this theory.

19
00:00:57.106 --> 00:01:00.033
It's time to see some JSON in action.

20
00:01:00.033 --> 00:01:03.341
I'm going to live code a simple JSON document that will

21
00:01:03.341 --> 00:01:07.170
represent an application for a bank loan and we'll see the

22
00:01:07.170 --> 00:01:09.322
structure of that JSON formatted document.

23
00:01:09.322 --> 00:01:12.553
That will help you understand the syntax and style of what we'll be

24
00:01:12.553 --> 00:01:15.434
producing with Java code in the upcoming modules.

25
00:01:15.434 --> 00:01:18.601
It's also helpful to know from a testing and debugging perspective

26
00:01:18.601 --> 00:01:22.055
that you can just handcraft and edit a JSON document even if

27
00:01:22.055 --> 00:01:26.427
they're normally produced by your code.

28
00:01:26.427 --> 00:01:27.300
To begin with,

29
00:01:27.300 --> 00:01:31.046
let's take a look at the different kinds of information that we

30
00:01:31.046 --> 00:01:34.817
would like to encode in our example JSON object,

31
00:01:34.817 --> 00:01:37.355
which is going to be a request for a bank loan.

32
00:01:37.355 --> 00:01:43.156
The first thing we want to have is the bank loan's customer name,

33
00:01:43.156 --> 00:01:46.694
so, the name of the customer who will be applying for this bank loan.

34
00:01:46.694 --> 00:01:49.924
Then there might be some information about the purpose of the loan.

35
00:01:49.924 --> 00:01:50.880
What's it going to be used for?

36
00:01:50.880 --> 00:01:53.096
Then we want to have a series of details about the

37
00:01:53.096 --> 00:01:55.344
financial matters of the loan itself.

38
00:01:55.344 --> 00:01:59.289
These details will include the amount of money the loan is going to

39
00:01:59.289 --> 00:02:02.782
require and the start and end dates of the loan.

40
00:02:02.782 --> 00:02:04.185
Finally, we have the job section,

41
00:02:04.185 --> 00:02:07.047
which will be a list of different jobs or sources of income.

42
00:02:07.047 --> 00:02:10.800
So for each job, we need to know what the title is of that job,

43
00:02:10.800 --> 00:02:12.623
how much money it's making, it's income,

44
00:02:12.623 --> 00:02:15.914
and finally the number of years that the person has

45
00:02:15.914 --> 00:02:17.523
worked actively at that role.

46
00:02:17.523 --> 00:02:22.112
Now we're going to create this bank loan document in a file to begin with.

47
00:02:22.112 --> 00:02:25.243
Often you don't manually edit JSON and put them in files anyway,

48
00:02:25.243 --> 00:02:27.616
but if you do happen to have JSON in a file,

49
00:02:27.616 --> 00:02:27.978
the.

50
00:02:27.978 --> 00:02:31.236
json extension is often the standard extension to use.

51
00:02:31.236 --> 00:02:34.825
And this is going to encode all the information about our bank loan.

52
00:02:34.825 --> 00:02:38.287
Every JSON object starts with a pair of braces,

53
00:02:38.287 --> 00:02:41.110
little squiggly braces just like a Java method.

54
00:02:41.110 --> 00:02:43.113
And that's just a syntactic delimiter.

55
00:02:43.113 --> 00:02:46.708
Within those braces lie the fields themselves.

56
00:02:46.708 --> 00:02:48.886
So each field has a name.

57
00:02:48.886 --> 00:02:54.545
And here, our first field is going to be the name of the customer.

58
00:02:54.545 --> 00:02:59.385
So the name name is double quoted and then there's a

59
00:02:59.385 --> 00:03:00.997
colon and then there's the value.

60
00:03:00.997 --> 00:03:05.457
So the name of the person who's applying for this loan is Mrs Joan Smith.

61
00:03:05.457 --> 00:03:08.305
At the end of the name value pair,

62
00:03:08.305 --> 00:03:12.897
we will put a little comma in order to separate that from

63
00:03:12.897 --> 00:03:15.949
the next field in the JSON document.

64
00:03:15.949 --> 00:03:22.013
And the next field here is the purpose of the loan.

65
00:03:22.013 --> 00:03:23.421
And in Mrs Joan Smith's case,

66
00:03:23.421 --> 00:03:26.430
the purpose of the loan is to build an extension on

67
00:03:26.430 --> 00:03:28.694
a house that she already owns.

68
00:03:28.694 --> 00:03:32.579
Again, this one also has a comma at the end.

69
00:03:32.579 --> 00:03:32.827
Now,

70
00:03:32.827 --> 00:03:35.800
both of the two fields that we have seen already have been

71
00:03:35.800 --> 00:03:37.453
fields where the values are strings.

72
00:03:37.453 --> 00:03:40.866
And as we're going to see with our loanDetails field,

73
00:03:40.866 --> 00:03:43.782
that's not necessarily the case.

74
00:03:43.782 --> 00:03:47.277
We could have a field whose value itself is another

75
00:03:47.277 --> 00:03:49.156
JSON object nested within it.

76
00:03:49.156 --> 00:03:51.124
In order to do that,

77
00:03:51.124 --> 00:03:54.709
our JSON object has those squiggly braces again at the

78
00:03:54.709 --> 00:03:57.927
beginning and end of the object, so just like the parent,

79
00:03:57.927 --> 00:04:01.615
and follows the same syntactic rules as a parent JSON object would do.

80
00:04:01.615 --> 00:04:04.466
It just happens to be nested within the parent.

81
00:04:04.466 --> 00:04:06.515
Our loanDetails object has a few different fields.

82
00:04:06.515 --> 00:04:10.241
Firstly, the amount of money the people want to borrow,

83
00:04:10.241 --> 00:04:13.091
$10000, and then there are these startDate and endDate.

84
00:04:13.091 --> 00:04:16.791
So it's going to start at the beginning of 2018 and we're going to end

85
00:04:16.791 --> 00:04:23.545
the loan or it'll be paid off by the start of 2023,

86
00:04:23.545 --> 00:04:25.796
so 5 years later.

87
00:04:25.796 --> 00:04:28.695
What's interesting here is that whilst we've seen strings

88
00:04:28.695 --> 00:04:31.074
as being the predominant encoding types,

89
00:04:31.074 --> 00:04:34.111
we can actually also use numbers here.

90
00:04:34.111 --> 00:04:35.602
So we're going to make that $10000 a string,

91
00:04:35.602 --> 00:04:38.885
but it's really a number, so why not use a number.

92
00:04:38.885 --> 00:04:41.787
JSON supports numbers, both integer and floating point,

93
00:04:41.787 --> 00:04:43.796
and you can just directly write them as values.

94
00:04:43.796 --> 00:04:47.669
It's one of the primitive types of the data encoding.

95
00:04:47.669 --> 00:04:51.532
Another thing that you can also use as a JSON value is null.

96
00:04:51.532 --> 00:04:54.531
Now we're going to try and avoid it as much as possible in this course,

97
00:04:54.531 --> 00:04:58.702
but null is used as a way of representing a field that could be there,

98
00:04:58.702 --> 00:05:01.103
but perhaps is missing for some reason or another.

99
00:05:01.103 --> 00:05:05.486
Just in the same way as you would use null in Java.

100
00:05:05.486 --> 00:05:07.622
Now we've seen strings, we've seen numbers,

101
00:05:07.622 --> 00:05:09.682
we've seen JSON objects, we've seen null,

102
00:05:09.682 --> 00:05:13.429
but the final type of value that we're going to see to be

103
00:05:13.429 --> 00:05:16.265
used in a JSON object field is an array.

104
00:05:16.265 --> 00:05:18.086
We have our list of jobs,

105
00:05:18.086 --> 00:05:22.563
so we need to have a way of representing multiple different jobs that this

106
00:05:22.563 --> 00:05:25.654
person could be doing because people do multiple jobs.

107
00:05:25.654 --> 00:05:27.646
Joan, in fact, does multiple jobs.

108
00:05:27.646 --> 00:05:31.128
And here we're going to use the array syntax beginning and ending

109
00:05:31.128 --> 00:05:35.725
with square braces in order to represent those jobs.

110
00:05:35.725 --> 00:05:36.539
To begin with,

111
00:05:36.539 --> 00:05:41.059
let's just write out the titles for each of the jobs that Joan does

112
00:05:41.059 --> 00:05:47.227
because it's perfectly valid to write a string object within a JSON

113
00:05:47.227 --> 00:05:50.873
field or within a JSON array here.

114
00:05:50.873 --> 00:05:52.835
So Joan has a freelance development role,

115
00:05:52.835 --> 00:05:55.049
so she does some self-employed development work,

116
00:05:55.049 --> 00:05:59.881
she's got a part-time job as an employee at a company,

117
00:05:59.881 --> 00:06:08.012
and she also has some income as a Pluralsight author of one of our courses here.

118
00:06:08.012 --> 00:06:13.598
Admittedly, Joan Smith is really not a real person,

119
00:06:13.598 --> 00:06:20.483
but let's carry on going with this pretense.

120
00:06:20.483 --> 00:06:21.327
that contains strings,

121
00:06:21.327 --> 00:06:25.747
but we use it to show the different forms of information that

122
00:06:25.747 --> 00:06:31.373
our job's spec has within the document.

123
00:06:31.373 --> 00:06:34.806
So for example, here, we're going to have the title,

124
00:06:34.806 --> 00:06:39.201
the annualIncome, and the years that Joan is active.

125
00:06:39.201 --> 00:06:42.148
So for her freelance developer role,

126
00:06:42.148 --> 00:06:47.686
she had an annual income of 18000 pounds a year and she was active for 3 years.

127
00:06:47.686 --> 00:06:48.510
What's really,

128
00:06:48.510 --> 00:06:52.835
really important to recognize here is that you can just carry

129
00:06:52.835 --> 00:06:55.514
on nesting these objects within an array.

130
00:06:55.514 --> 00:07:01.856
So, again, we can have a second JSON object for her part-time developer role.

131
00:07:01.856 --> 00:07:08.892
So $40000 a year and here we're going to have 8 years active.

132
00:07:08.892 --> 00:07:12.166
It's really nice the way these JSON objects compose because they compose

133
00:07:12.166 --> 00:07:17.773
arbitrary so you can have an object that contains an array,

134
00:07:17.773 --> 00:07:18.917
that contains objects,

135
00:07:18.917 --> 00:07:23.041
and one of those could contain another array that will store as an object.

136
00:07:23.041 --> 00:07:26.233
We can have an object in an object in an object in an object.

137
00:07:26.233 --> 00:07:31.057
It just depends upon how you want to model your data, the types or compose.

138
00:07:31.057 --> 00:07:34.696
So just to recap, we can have fields with names.

139
00:07:34.696 --> 00:07:37.059
Those fields could have values which are strings.

140
00:07:37.059 --> 00:07:40.434
They can have values which are JSON objects.

141
00:07:40.434 --> 00:07:43.241
They can have values which are JSON arrays,

142
00:07:43.241 --> 00:07:47.868
and also they can have values which are numbers as well.

143
00:07:47.868 --> 00:07:49.782
Within those JSON arrays,

144
00:07:49.782 --> 00:07:58.000
you can have any of the aforementioned type including other JSON objects. Fantastic!

