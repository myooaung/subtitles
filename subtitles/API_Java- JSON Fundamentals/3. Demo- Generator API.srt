1
00:00:01,867 --> 00:00:05,320
By now, I'm sure you've had enough of evaluating anti-patterns.

2
00:00:05,320 --> 00:00:08,310
Let's look at a better approach of producing JSON than

3
00:00:08,310 --> 00:00:13,087
string concatenation or formatting, a generator API.

4
00:00:13,087 --> 00:00:17,129
The Jackson generator API is a way of producing JSON where the programmer

5
00:00:17,129 --> 00:00:21,375
explicitly creates JSON for the values you want to encode.

6
00:00:21,375 --> 00:00:27,196
So you call a series of methods saying things like writefields, writearray, etc.

7
00:00:27,196 --> 00:00:28,829
There's no automatic conversion here,

8
00:00:28,829 --> 00:00:32,604
just a simple lightweight API that puts you in full control.

9
00:00:32,604 --> 00:00:35,461
Again, in order to see how this works,

10
00:00:35,461 --> 00:00:39,764
we'll talk through the same loan application to JSON code,

11
00:00:39,764 --> 00:00:41,915
but using a generator API.

12
00:00:41,915 --> 00:00:43,892
In order to create a generator,

13
00:00:43,892 --> 00:00:50,708
we need to begin with by thinking about how do we get a JsonFactory.

14
00:00:50,708 --> 00:00:54,572
We're going to create a JsonFactory.

15
00:00:54,572 --> 00:00:56,819
And this was a factory object that will allow us to

16
00:00:56,819 --> 00:00:58,854
create the generator object itself.

17
00:00:58,854 --> 00:01:02,650
So we're going to create a generator.

18
00:01:02,650 --> 00:01:07,048
A generator needs to wrap some underlying output system.

19
00:01:07,048 --> 00:01:11,392
So we could wrap a writer, wrap an outputStream, you can use a file.

20
00:01:11,392 --> 00:01:14,137
There are different options for what you want to write around.

21
00:01:14,137 --> 00:01:17,858
And here, we're just going to wrap up System.

22
00:01:17,858 --> 00:01:19,925
out and create a generator.

23
00:01:19,925 --> 00:01:22,523
That means whatever method calls we make on the generator

24
00:01:22,523 --> 00:01:24,621
will eventually get delegated to System.

25
00:01:24,621 --> 00:01:26,826
out as the objects being produced.

26
00:01:26,826 --> 00:01:32,502
So let's start here by writing the start of an object.

27
00:01:32,502 --> 00:01:34,351
So when you have a generator API,

28
00:01:34,351 --> 00:01:37,645
you make method calls on the generator itself in

29
00:01:37,645 --> 00:01:40,495
order to produce corresponding JSON.

30
00:01:40,495 --> 00:01:44,725
So we've got things like writeStart of an object,

31
00:01:44,725 --> 00:01:48,848
writeEnd of an object, and then we can.

32
00:01:48,848 --> 00:01:49,409
flush.

33
00:01:49,409 --> 00:01:52,774
If we just run this code,

34
00:01:52,774 --> 00:01:57,592
we see here that we have produced our generator API object.

35
00:01:57,592 --> 00:02:00,996
This here is just the toString of our loan application that we saw earlier,

36
00:02:00,996 --> 00:02:02,659
so we can ignore that for now.

37
00:02:02,659 --> 00:02:05,728
This is where the interesting JSON version of the object will come.

38
00:02:05,728 --> 00:02:09,432
So we need to write a few fields here for the loan application.

39
00:02:09,432 --> 00:02:13,122
We can write different fields by calling these different write methods.

40
00:02:13,122 --> 00:02:18,529
In order to write a field here, you have to write it in a type-specific way.

41
00:02:18,529 --> 00:02:28,096
So you have to say something like writeStringField of the name and the value,

42
00:02:28,096 --> 00:02:37,267
and then we need to write another one here for those two values.

43
00:02:37,267 --> 00:02:41,588
And if we rerun this code, we can see, for example now,

44
00:02:41,588 --> 00:02:44,857
we've got the name of the person and the purposeOfLoan.

45
00:02:44,857 --> 00:02:46,247
Now by default,

46
00:02:46,247 --> 00:02:50,359
our JSON generator will format the value that's output

47
00:02:50,359 --> 00:02:52,786
in the most compact manner possible.

48
00:02:52,786 --> 00:02:54,444
So it won't pretty print it at all.

49
00:02:54,444 --> 00:02:56,589
It will just write it out as fast as possible.

50
00:02:56,589 --> 00:02:58,669
But actually, we have complete control out of that.

51
00:02:58,669 --> 00:03:03,205
So we can say set a pretty printer and we use the DefaultPrettyPrinter.

52
00:03:03,205 --> 00:03:06,900
So the pretty printer is just a way of customizing the formatting of the output,

53
00:03:06,900 --> 00:03:10,409
and we can see now that we have a much better,

54
00:03:10,409 --> 00:03:14,453
a more interesting output that's easier to read by pretty printing it.

55
00:03:14,453 --> 00:03:18,736
So we've got those two basic fields in.

56
00:03:18,736 --> 00:03:27,048
We also need to write out another thing here, which is the loanDetails object.

57
00:03:27,048 --> 00:03:28,016
Create that method.

58
00:03:28,016 --> 00:03:30,596
I'm going to parse this generator down here,

59
00:03:30,596 --> 00:03:34,310
so we're going to take that generator.

60
00:03:34,310 --> 00:03:39,393
Here we need to first of all write the field.

61
00:03:39,393 --> 00:03:44,945
Then we're going to write the field name here for the loanDetails object.

62
00:03:44,945 --> 00:03:48,058
And I need to throw an IOException because potentially

63
00:03:48,058 --> 00:03:51,573
your generator can be delegating to another stream that

64
00:03:51,573 --> 00:03:54,872
could also throw an IOException, so it will throw an IOException.

65
00:03:54,872 --> 00:03:59,369
Then, we need to write to the startObject.

66
00:03:59,369 --> 00:04:02,946
Then we need to write to the end of the object at the end.

67
00:04:02,946 --> 00:04:07,366
And in between those two things, we are going to write a few fields in.

68
00:04:07,366 --> 00:04:11,051
So we need to write a number field here for the amount

69
00:04:11,051 --> 00:04:13,309
of money in the loanDetails object.

70
00:04:13,309 --> 00:04:19,831
And this is one of the interesting things about the generator API is type-safe.

71
00:04:19,831 --> 00:04:22,787
So that writeNumberField object is overloaded.

72
00:04:22,787 --> 00:04:27,375
And in fact, if we look at the overloads here,

73
00:04:27,375 --> 00:04:31,396
we have lots of different overloads with different numeric types.

74
00:04:31,396 --> 00:04:32,466
So you can only.

75
00:04:32,466 --> 00:04:36,099
writeNumberField as a value and that ensures that it gets the right formatting.

76
00:04:36,099 --> 00:04:39,286
So, for example, strings, when you write them out as JSON,

77
00:04:39,286 --> 00:04:41,751
have to be formatted with double quotes around them,

78
00:04:41,751 --> 00:04:42,912
numbers don't.

79
00:04:42,912 --> 00:04:49,323
So this helps you remove one of those classes of errors

80
00:04:49,323 --> 00:04:54,766
that we saw earlier in terms of the typo.

81
00:04:54,766 --> 00:04:57,608
So I'm just going to.

82
00:04:57,608 --> 00:05:04,139
toString that startDate for now, and also, the same thing with the endDate.

83
00:05:04,139 --> 00:05:08,342
If we just see what that code looks like now,

84
00:05:08,342 --> 00:05:12,340
we can see we've got our loanDetails object within there.

85
00:05:12,340 --> 00:05:14,617
Nicely formatted, nicely set up.

86
00:05:14,617 --> 00:05:19,360
And finally, we're going to say toJsonString loanApplication.

87
00:05:19,360 --> 00:05:20,365
getJobs.

88
00:05:20,365 --> 00:05:28,409
And we need to write another method here.

89
00:05:28,409 --> 00:05:35,588
It's going to take a list of jobs as a parameter.

90
00:05:35,588 --> 00:05:39,882
Firstly, again, we need to write the fieldName here.

91
00:05:39,882 --> 00:05:43,033
This is another subfield within our parent object,

92
00:05:43,033 --> 00:05:48,951
and then we're going to write out the array for the

93
00:05:48,951 --> 00:05:50,728
different jobs,. writeStartArray.

94
00:05:50,728 --> 00:05:54,265
Now we saw earlier when we had objects, we have StartObject and EndObject.

95
00:05:54,265 --> 00:05:59,315
Arrays, in JSON, because they start and end with square brackets,

96
00:05:59,315 --> 00:06:02,397
they need to be formatted to start and end appropriately.

97
00:06:02,397 --> 00:06:05,393
So we have a different method call here to start the array and

98
00:06:05,393 --> 00:06:07,638
end the array rather than starting the object.

99
00:06:07,638 --> 00:06:12,369
Now at this point, I want to take each job.

100
00:06:12,369 --> 00:06:14,270
In my jobs array, I want to write some output.

101
00:06:14,270 --> 00:06:21,696
So I want to write the start of an object this time,

102
00:06:21,696 --> 00:06:33,728
write the end of the object, and let's write a stringField for each job title.

103
00:06:33,728 --> 00:06:34,302
And then,

104
00:06:34,302 --> 00:06:36,883
we want to write a number for the annualIncome

105
00:06:36,883 --> 00:06:38,707
because obviously that's a number.

106
00:06:38,707 --> 00:06:40,629
It's an amount of money.

107
00:06:40,629 --> 00:06:41,822
And then finally,

108
00:06:41,822 --> 00:06:46,992
we also want to write a number field for the number of yearsActive.

109
00:06:46,992 --> 00:06:53,702
I think you get the point at this point.

110
00:06:53,702 --> 00:07:01,651
And if we rerun that code, we can see that we've got all our jobs down here,

111
00:07:01,651 --> 00:07:06,886
and the whole correctly formatted JSON approach.

112
00:07:06,886 --> 00:07:11,073
Well the generator API was better than writing JSON serialization code by hand.

113
00:07:11,073 --> 00:07:12,574
It gave us an abstraction.

114
00:07:12,574 --> 00:07:15,277
This meant it was less susceptible to small errors.

115
00:07:15,277 --> 00:07:20,657
We wouldn't, for example, be producing JSON that lacked matching brackets.

116
00:07:20,657 --> 00:07:24,147
It also meant that it was less work to update or maintain the code in question.

117
00:07:24,147 --> 00:07:27,209
When we want to add or remove a field from an object,

118
00:07:27,209 --> 00:07:30,243
we just add or remove a writeField method call rather

119
00:07:30,243 --> 00:07:31,920
than the whole formatting operation.

120
00:07:31,920 --> 00:07:36,283
The generator API though was an improvement on handwritten code,

121
00:07:36,283 --> 00:07:39,618
isn't the peak of humanities endeavors in the JSON sphere.

122
00:07:39,618 --> 00:07:42,229
We can actually simplify this code even more,

123
00:07:42,229 --> 00:07:51,000
or in a way, remove it all together, and that's what the third approach you'll learn about today uses.

