WEBVTT
1
00:00:01.906 --> 00:00:04.929
So let's talk about what differentiates a DOM API from

2
00:00:04.929 --> 00:00:07.765
the binding and SAX APIs that you'll encounter in the

3
00:00:07.765 --> 00:00:11.998
next two modules of this course, and why you want to use one in the first place.

4
00:00:11.998 --> 00:00:15.215
So first thing to say, and I cannot emphasis this enough,

5
00:00:15.215 --> 00:00:17.930
is that you don't want to write your own JSON parser.

6
00:00:17.930 --> 00:00:20.311
It seems so simple when you look at JSON.

7
00:00:20.311 --> 00:00:22.777
It's really pretty simple syntax and it shouldn't

8
00:00:22.777 --> 00:00:24.586
take too long to write a parser,

9
00:00:24.586 --> 00:00:28.642
but there are three good reasons why you don't want to do this.

10
00:00:28.642 --> 00:00:28.944
Firstly,

11
00:00:28.944 --> 00:00:31.969
you'll hit weird bugs in your JSON parser for some

12
00:00:31.969 --> 00:00:35.941
input that you haven't tested against, but crops in production.

13
00:00:35.941 --> 00:00:38.916
Errors, they'll be fixed in standard JSON parser.

14
00:00:38.916 --> 00:00:41.741
Now I'm not saying that libraries Jackson don't have bugs in,

15
00:00:41.741 --> 00:00:44.833
but they're less likely to have them in than a custom library.

16
00:00:44.833 --> 00:00:45.824
Secondly, performance.

17
00:00:45.824 --> 00:00:50.640
Existing parsers will have been tuned and optimized over time and work

18
00:00:50.640 --> 00:00:53.363
will have gone into them that you don't have to do.

19
00:00:53.363 --> 00:00:55.810
You may not need to be the fastest web app in the West,

20
00:00:55.810 --> 00:00:58.638
but it's always good to know that you aren't burning extra

21
00:00:58.638 --> 00:01:01.269
CPU cycles that aren't needed when it didn't take any of your

22
00:01:01.269 --> 00:01:03.163
own time to do the optimization.

23
00:01:03.163 --> 00:01:03.579
Finally,

24
00:01:03.579 --> 00:01:06.996
most Java developers have plenty of work to do

25
00:01:06.996 --> 00:01:08.840
without adding anything else to it.

26
00:01:08.840 --> 00:01:12.917
Productivity is key to achieving business goals and the more time

27
00:01:12.917 --> 00:01:15.272
you get to spend solving relevant problems,

28
00:01:15.272 --> 00:01:15.934
the better.

29
00:01:15.934 --> 00:01:18.087
Now DOM stands for document object model,

30
00:01:18.087 --> 00:01:21.609
which is the style of JSON API we're using.

31
00:01:21.609 --> 00:01:24.960
It's sometimes called a tree-style API.

32
00:01:24.960 --> 00:01:28.610
The idea with a DOM API is that it uses an object graph to

33
00:01:28.610 --> 00:01:30.624
represent the JSON document that's being parsed.

34
00:01:30.624 --> 00:01:34.363
So you parse a JSON document, invert it into an in-memory series of objects,

35
00:01:34.363 --> 00:01:38.193
you can then operate on them, and then pretty print them back out as JSON.

36
00:01:38.193 --> 00:01:41.471
Alternatively, you can just parse the document and operate on it directly.

37
00:01:41.471 --> 00:01:50.000
DOM-style APIs are sometimes referred to as document trees, or just tree-style APIs for short.

