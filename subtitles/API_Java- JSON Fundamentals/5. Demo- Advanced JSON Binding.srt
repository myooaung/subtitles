1
00:00:02,118 --> 00:00:02,457
Okay,

2
00:00:02,457 --> 00:00:05,504
it's time to take the five different patterns of

3
00:00:05,504 --> 00:00:07,532
transformation that we've encountered so far,

4
00:00:07,532 --> 00:00:10,987
the Awkward Squad, and put them together in a complete demo.

5
00:00:10,987 --> 00:00:14,530
We will write out an immutable version of our loanApplication class,

6
00:00:14,530 --> 00:00:18,862
and define a customized version of it using the different patterns in

7
00:00:18,862 --> 00:00:24,509
order to show off the power of Jackson's binding API.

8
00:00:24,509 --> 00:00:31,366
So let's look through our trick here examples, our advanced binding examples.

9
00:00:31,366 --> 00:00:34,404
So, these are situations where our basic,

10
00:00:34,404 --> 00:00:37,146
just rely on the convention to work,

11
00:00:37,146 --> 00:00:40,937
binding approach won't work anymore and we need to use a few annotations,

12
00:00:40,937 --> 00:00:42,373
so a declarative approach.

13
00:00:42,373 --> 00:00:45,537
We've seen some of the example annotations on the slides,

14
00:00:45,537 --> 00:00:49,225
but I think it's helpful to walk through a more concrete example to see

15
00:00:49,225 --> 00:00:51,775
why you would use these things and what circumstances.

16
00:00:51,775 --> 00:00:53,326
So let's start off.

17
00:00:53,326 --> 00:00:57,981
What I have here is an ObjectMapper and we've got a TransformedLoanApplication.

18
00:00:57,981 --> 00:01:02,044
And the TransformedLoanApplication has a loanDetails object in that

19
00:01:02,044 --> 00:01:04,867
has a LocalDate for its startDate and its endDate.

20
00:01:04,867 --> 00:01:08,689
Now if you remember we saw from our first example, I used a string.

21
00:01:08,689 --> 00:01:12,149
And I used a string because otherwise you get this exception here.

22
00:01:12,149 --> 00:01:15,306
It says InvalidDefinitionException, java.

23
00:01:15,306 --> 00:01:16,095
time.

24
00:01:16,095 --> 00:01:16,884
LocalTime.

25
00:01:16,884 --> 00:01:20,094
So this is basically telling you I don't know how to

26
00:01:20,094 --> 00:01:21,553
deal with your LocalTime field.

27
00:01:21,553 --> 00:01:24,635
I don't know how to convert that from a string into a LocalDate object.

28
00:01:24,635 --> 00:01:26,029
What do we do?

29
00:01:26,029 --> 00:01:29,164
Conveniently, you can register a module on your ObjectMapper.

30
00:01:29,164 --> 00:01:31,775
Now a module is a set of different things that can be used with

31
00:01:31,775 --> 00:01:34,758
Jackson to manage the deserialization approach.

32
00:01:34,758 --> 00:01:37,139
We can, in fact, use a JavaTimeModule.

33
00:01:37,139 --> 00:01:41,636
This is a built-in module that simply defines a bunch of

34
00:01:41,636 --> 00:01:44,439
deserialization properties for different fields that are

35
00:01:44,439 --> 00:01:46,955
included in the Java 8 date and time library,

36
00:01:46,955 --> 00:01:48,121
which is where Java.

37
00:01:48,121 --> 00:01:48,413
Time.

38
00:01:48,413 --> 00:01:49,579
LocalDate is coming from.

39
00:01:49,579 --> 00:01:53,566
We can see it works and that's the result of the toString on

40
00:01:53,566 --> 00:01:56,000
the LocalDate object being printed back out.

41
00:01:56,000 --> 00:01:58,985
But you can, in fact, create your own modules.

42
00:01:58,985 --> 00:02:02,928
So I'm going to create a local variable called module here,

43
00:02:02,928 --> 00:02:06,471
which is going to be a SimpleModule,

44
00:02:06,471 --> 00:02:10,496
which is just a built-in implementation of the module interface that

45
00:02:10,496 --> 00:02:14,100
will let you register deserializers in Jackson.

46
00:02:14,100 --> 00:02:17,429
So we've got a LocalDateDeserializer.

47
00:02:17,429 --> 00:02:19,084
You can implement your own deserializers as well,

48
00:02:19,084 --> 00:02:22,153
it's just a matter of implementing an interface.

49
00:02:22,153 --> 00:02:24,955
And we will instantiate that.

50
00:02:24,955 --> 00:02:29,163
So if I just take the DateTimeFormatter and use the ISO_LOCAL_DATE format,

51
00:02:29,163 --> 00:02:32,824
then I can add a deserializer to the SimpleModule to say

52
00:02:32,824 --> 00:02:34,586
that anything of the type LocalDate,

53
00:02:34,586 --> 00:02:37,421
you can use the localDateDeserializer to deserialize it.

54
00:02:37,421 --> 00:02:40,943
Then I register that module, and again, it works.

55
00:02:40,943 --> 00:02:44,926
If you just want the built-in Java date and time API,

56
00:02:44,926 --> 00:02:46,290
you can just use that JavaTimeModule,

57
00:02:46,290 --> 00:02:49,616
but it's useful to know that you can customize this and

58
00:02:49,616 --> 00:02:52,755
implement your own deserializers should you want to.

59
00:02:52,755 --> 00:02:54,437
So let's break down a little bit further.

60
00:02:54,437 --> 00:02:56,803
We've got our TransformedLoanApplication.

61
00:02:56,803 --> 00:02:57,629
So this parsing okay,

62
00:02:57,629 --> 00:03:00,747
but I think what I'm going to do is simulate a few different problems

63
00:03:00,747 --> 00:03:03,119
that you might encounter and how we solve them.

64
00:03:03,119 --> 00:03:08,179
So for a start, suppose someone who is maintaining this class decides well,

65
00:03:08,179 --> 00:03:10,052
name isn't a very descriptive field name,

66
00:03:10,052 --> 00:03:12,284
so I'm going to rename that to applicantName.

67
00:03:12,284 --> 00:03:15,689
And I'm going to rename the getters and setters as well.

68
00:03:15,689 --> 00:03:19,825
I'm going to exclude string and non-code files, but I've basically done that.

69
00:03:19,825 --> 00:03:20,963
So, that seems good.

70
00:03:20,963 --> 00:03:22,343
It's still a name.

71
00:03:22,343 --> 00:03:25,102
So we run our code and what happens?

72
00:03:25,102 --> 00:03:28,301
Well, at run time, we get this exception.

73
00:03:28,301 --> 00:03:30,604
It says look, unrecognized field name.

74
00:03:30,604 --> 00:03:32,076
Not marked an applicantName.

75
00:03:32,076 --> 00:03:35,294
We kind of saw this example earlier as one of the problems that you

76
00:03:35,294 --> 00:03:36,763
might encounter with using a binding approach,

77
00:03:36,763 --> 00:03:39,080
but here we're going to actually solve it.

78
00:03:39,080 --> 00:03:43,395
So the way you solve it is you put a @JsonProperty

79
00:03:43,395 --> 00:03:47,112
annotation and call it a name.

80
00:03:47,112 --> 00:03:51,602
So if we rerun this code, we can see it now works.

81
00:03:51,602 --> 00:03:51,868
Brilliant!

82
00:03:51,868 --> 00:03:53,462
I put there on the field.

83
00:03:53,462 --> 00:03:55,854
You can choose to put it on the field.

84
00:03:55,854 --> 00:03:58,946
You can also put it on the getter or the setter as well.

85
00:03:58,946 --> 00:04:01,696
That will work equally well.

86
00:04:01,696 --> 00:04:03,346
There we go.

87
00:04:03,346 --> 00:04:05,760
And we've got applicantName, Mrs Joan Smith.

88
00:04:05,760 --> 00:04:08,178
So the next thing after renaming the applicantName is

89
00:04:08,178 --> 00:04:10,125
I'm going to refactor my jobs field.

90
00:04:10,125 --> 00:04:14,646
So it might be the case that we want to be able to look up jobs by name

91
00:04:14,646 --> 00:04:16,967
rather than just have a complete list of the jobs.

92
00:04:16,967 --> 00:04:22,375
So let's change that field to say a map from string to Job that's called jobs.

93
00:04:22,375 --> 00:04:24,827
And we'll import the map.

94
00:04:24,827 --> 00:04:25,136
Brilliant!

95
00:04:25,136 --> 00:04:28,533
But the problem is we have our getters and setters here,

96
00:04:28,533 --> 00:04:31,441
which are still using the old approach.

97
00:04:31,441 --> 00:04:35,333
They're still using the list to get and set the jobs.

98
00:04:35,333 --> 00:04:36,542
So let's modify this.

99
00:04:36,542 --> 00:04:39,691
So we can use these getters and setters with the JSON to bind the

100
00:04:39,691 --> 00:04:43,353
fields in and do a transformation from the data structure we see in the

101
00:04:43,353 --> 00:04:44,953
JSON to what we're going to store internally.

102
00:04:44,953 --> 00:04:50,842
So what I'm going to do here is I need to return the values of our jobs map,

103
00:04:50,842 --> 00:04:52,920
which is a collection of job.

104
00:04:52,920 --> 00:04:56,572
But our method for getJobs takes a list so I'm going to wrap that

105
00:04:56,572 --> 00:04:58,492
up in an ArrayList so it's the correct type.

106
00:04:58,492 --> 00:05:01,381
Then we have a setter for the jobs.

107
00:05:01,381 --> 00:05:01,742
Okay.

108
00:05:01,742 --> 00:05:05,175
So the setter for the jobs is a List of Job and that

109
00:05:05,175 --> 00:05:06,647
needs to be converted to a map.

110
00:05:06,647 --> 00:05:10,194
So what we want to do here is just use some of the nice Java 8 code

111
00:05:10,194 --> 00:05:12,909
so we can just stream those jobs and collect,

112
00:05:12,909 --> 00:05:14,187
and there's a nice toMap function.

113
00:05:14,187 --> 00:05:15,677
So what are we going to do?

114
00:05:15,677 --> 00:05:20,766
We're going to map them by the name, which is the title of the job,

115
00:05:20,766 --> 00:05:23,531
and the other parameter here is a function to convert the value,

116
00:05:23,531 --> 00:05:26,065
which we don't want to do so I'm just going to say

117
00:05:26,065 --> 00:05:28,684
take that job and put it in the map.

118
00:05:28,684 --> 00:05:29,014
Okay.

119
00:05:29,014 --> 00:05:34,167
Now, if I go back to the main method here and rerun this,

120
00:05:34,167 --> 00:05:39,909
we can see Part Time Developer = Job, Freelance Developer = Job,

121
00:05:39,909 --> 00:05:43,574
that's the toString output of the map object and it's

122
00:05:43,574 --> 00:05:45,633
being converted by the setters.

123
00:05:45,633 --> 00:05:47,224
But let's evolve this a little bit more.

124
00:05:47,224 --> 00:05:51,771
I don't actually want to call my getJobs and setJobs getJobs and setJobs

125
00:05:51,771 --> 00:05:54,637
because it's not really modifying the underlying value.

126
00:05:54,637 --> 00:06:02,090
What I really want to do is say something like getJobsJson and setJobsJson.

127
00:06:02,090 --> 00:06:04,920
So if I run that code, boom!

128
00:06:04,920 --> 00:06:09,932
We have a bunch of things saying look, I don't know about your jobs property,

129
00:06:09,932 --> 00:06:11,202
I only know about jobsJson.

130
00:06:11,202 --> 00:06:13,828
So again, to fix this problem,

131
00:06:13,828 --> 00:06:18,731
we can add a @JsonProperty field saying jobs for our getter and our setter.

132
00:06:18,731 --> 00:06:21,485
You might find this will work depending on what version of Jackson

133
00:06:21,485 --> 00:06:23,721
you use for just one of the getter or setter,

134
00:06:23,721 --> 00:06:26,309
but I'm going to use it on both here.

135
00:06:26,309 --> 00:06:28,126
We're back to things working.

136
00:06:28,126 --> 00:06:28,489
Lovely!

137
00:06:28,489 --> 00:06:29,216
Now finally,

138
00:06:29,216 --> 00:06:33,216
you might also want to have a getter for the jobs and the setter for

139
00:06:33,216 --> 00:06:36,143
the jobs that just deal with the regular map objects.

140
00:06:36,143 --> 00:06:39,004
And if you use this, you'll find with modern Jackson,

141
00:06:39,004 --> 00:06:42,344
it just works out that even though those are getters and setters

142
00:06:42,344 --> 00:06:45,415
because you have a named JsonProperty called jobs that actually

143
00:06:45,415 --> 00:06:48,718
uses these getters and setters to do the transformation rather than

144
00:06:48,718 --> 00:06:50,410
the ones with the same names.

145
00:06:50,410 --> 00:06:51,576
So it overrides them.

146
00:06:51,576 --> 00:06:53,616
If you want to be really explicit,

147
00:06:53,616 --> 00:06:57,620
there's also a JsonIgnore that can be used and says definitively

148
00:06:57,620 --> 00:07:00,174
just ignore this getter and setter method.

149
00:07:00,174 --> 00:07:01,898
And that can, in fact,

150
00:07:01,898 --> 00:07:04,660
be used on any getter and setter method if perhaps

151
00:07:04,660 --> 00:07:06,042
there's data you want to hide.

152
00:07:06,042 --> 00:07:06,459
Cool!

153
00:07:06,459 --> 00:07:08,126
So that's our TransformedLoanApplication.

154
00:07:08,126 --> 00:07:10,276
We've gone through a few different problems and

155
00:07:10,276 --> 00:07:12,157
shown how we can get around them.

156
00:07:12,157 --> 00:07:15,729
But, let's take a slightly different approach,

157
00:07:15,729 --> 00:07:18,280
and this is an ImmutableLoanApplication.

158
00:07:18,280 --> 00:07:20,570
So we've got an ImmutableLoanApplication here.

159
00:07:20,570 --> 00:07:22,407
And the ImmutableLoanApplication is the same,

160
00:07:22,407 --> 00:07:24,998
but it doesn't have any setters, only getters,

161
00:07:24,998 --> 00:07:29,770
and it has final fields and the fields are instantiated in the constructor.

162
00:07:29,770 --> 00:07:31,896
So, how does that work?

163
00:07:31,896 --> 00:07:36,601
Well, first of all, convert that over to saying ImmutableLoanApplication.

164
00:07:36,601 --> 00:07:40,110
And I'm going to rename that local variable and rerun this

165
00:07:40,110 --> 00:07:43,051
code just to prove to you that it does work.

166
00:07:43,051 --> 00:07:43,339
Boom!

167
00:07:43,339 --> 00:07:43,627
Lovely!

168
00:07:43,627 --> 00:07:44,322
It does.

169
00:07:44,322 --> 00:07:47,452
Okay, so how does that work for the ImmutableLoanApplication?

170
00:07:47,452 --> 00:07:47,727
Well,

171
00:07:47,727 --> 00:07:50,480
we've got these properties here that we've annotated each of

172
00:07:50,480 --> 00:07:52,039
the parameters on the constructor with.

173
00:07:52,039 --> 00:07:55,880
So we've said the name is the name, the purposeOfLoan is the purposeOfLoan,

174
00:07:55,880 --> 00:07:56,561
etc., etc.

175
00:07:56,561 --> 00:07:58,482
Now, these aren't actually necessary.

176
00:07:58,482 --> 00:08:05,256
If I remove one of them, and rerun this code, boom, huge exception.

177
00:08:05,256 --> 00:08:06,984
Argument 0 has no property name.

178
00:08:06,984 --> 00:08:09,287
So we don't really know what to do.

179
00:08:09,287 --> 00:08:09,708
Okay.

180
00:08:09,708 --> 00:08:10,551
Lovely stuff.

181
00:08:10,551 --> 00:08:14,763
So let's put that back in and call it name.

182
00:08:14,763 --> 00:08:18,855
Now technically, this JsonCreator annotation isn't necessary.

183
00:08:18,855 --> 00:08:24,647
Some older versions of Jackson required you to have an @JsonCreator annotation.

184
00:08:24,647 --> 00:08:27,418
Some older versions of Jackson required you to have a JsonCreator

185
00:08:27,418 --> 00:08:31,105
annotation in order to say which constructor was to be used,

186
00:08:31,105 --> 00:08:32,767
but that's not necessary anymore.

187
00:08:32,767 --> 00:08:33,099
Okay.

188
00:08:33,099 --> 00:08:36,087
It's sometimes still useful to have it there just to be

189
00:08:36,087 --> 00:08:37,981
clear and just to make the convention clear.

190
00:08:37,981 --> 00:08:45,000
But there we go, immutable Jackson deserialization. Brilliant!

