WEBVTT
1
00:00:01.870 --> 00:00:05.205
A third approach is a binding API.

2
00:00:05.205 --> 00:00:09.181
JSON binding produces serialized JSON from Java objects by

3
00:00:09.181 --> 00:00:11.664
inspecting the structure of the object.

4
00:00:11.664 --> 00:00:14.269
So whenever it encounters a field in a Java object,

5
00:00:14.269 --> 00:00:18.604
it writes out the appropriate JSON field definition.

6
00:00:18.604 --> 00:00:19.366
For consistency,

7
00:00:19.366 --> 00:00:24.251
we're going to produce the same loan application as we had in module

8
00:00:24.251 --> 00:00:27.189
1 and the two previous JSON serialization demos.

9
00:00:27.189 --> 00:00:29.626
This time, we're going to use the binding API.

10
00:00:29.626 --> 00:00:32.018
I'm going to say we're going to use the API.

11
00:00:32.018 --> 00:00:35.024
It's not really an API in the traditional sense.

12
00:00:35.024 --> 00:00:38.051
We can't write code using the API in order to emit JSON.

13
00:00:38.051 --> 00:00:42.460
We'll just be handing out objects over to a binding API that will

14
00:00:42.460 --> 00:00:46.714
inspect the object and write it out as JSON for us.

15
00:00:46.714 --> 00:00:51.802
So the binding API with Jackson is an API that will just inspect your

16
00:00:51.802 --> 00:00:54.681
Java objects and convert them directly to JSON,

17
00:00:54.681 --> 00:00:58.058
taking advantage of the fact that the Java object structure is

18
00:00:58.058 --> 00:00:59.999
also reflective of a JSON object structure.

19
00:00:59.999 --> 00:01:02.238
So in order to start this process,

20
00:01:02.238 --> 00:01:05.117
we need to create an object called an ObjectMapper.

21
00:01:05.117 --> 00:01:09.352
An ObjectMapper is an object that is capable of doing

22
00:01:09.352 --> 00:01:12.308
mapping between Java objects and JSON.

23
00:01:12.308 --> 00:01:18.084
We can create a writer here, which is an object that will do the writing.

24
00:01:18.084 --> 00:01:21.250
So a mapper can deal with reading and writing and a writer can do writing.

25
00:01:21.250 --> 00:01:24.455
So going from Java to JSON, reading being JSON to Java.

26
00:01:24.455 --> 00:01:26.126
We'll look at that later.

27
00:01:26.126 --> 00:01:31.495
And the binding API approach will be just to take that objectWriter and write

28
00:01:31.495 --> 00:01:34.704
the value that we're passing in here to an output stream.

29
00:01:34.704 --> 00:01:39.311
So what we're going to do is we're going to write into System.

30
00:01:39.311 --> 00:01:41.642
out, parsing the loanApplication in,

31
00:01:41.642 --> 00:01:46.414
and we'll just see the value written out to the end.

32
00:01:46.414 --> 00:01:49.365
So we've got this produced JSON value from it,

33
00:01:49.365 --> 00:01:51.559
just straight from this three lines of code,

34
00:01:51.559 --> 00:01:52.382
nice and simple.

35
00:01:52.382 --> 00:01:55.844
Now obviously, we want to have a read of what's going on with this output value,

36
00:01:55.844 --> 00:02:00.539
so we will say take a writer with a pretty printer,

37
00:02:00.539 --> 00:02:03.234
just the same pretty printer concept that we saw earlier.

38
00:02:03.234 --> 00:02:07.826
And this gives us a JSON object that has lots of fields and we

39
00:02:07.826 --> 00:02:09.762
can see what the value of those fields are.

40
00:02:09.762 --> 00:02:12.843
So we can see the name is the same, the purposeOfLoan is the same.

41
00:02:12.843 --> 00:02:14.933
The things that are weird and different,

42
00:02:14.933 --> 00:02:19.249
however, are this startDate and this endDate,

43
00:02:19.249 --> 00:02:21.628
okay, because those have been converted.

44
00:02:21.628 --> 00:02:25.087
They've inspected the local date objects that we've been using to

45
00:02:25.087 --> 00:02:27.967
represent those things and passing very complicated representations

46
00:02:27.967 --> 00:02:31.873
out here that we don't want to use.

47
00:02:31.873 --> 00:02:33.489
Now, don't worry about that for now.

48
00:02:33.489 --> 00:02:37.068
When we come onto the section about consuming JSON with a binding API,

49
00:02:37.068 --> 00:02:40.570
we'll show you how you can customize this output and input

50
00:02:40.570 --> 00:02:43.813
because it works the same way and fix that problem.

51
00:02:43.813 --> 00:02:46.054
But for now, we've just shown a very, very,

52
00:02:46.054 --> 00:02:51.054
very quick and simple way of producing JSON objects using this ObjectWriter.

53
00:02:51.054 --> 00:02:54.478
And the other thing to remember is you can also writeValue

54
00:02:54.478 --> 00:02:56.428
wrapping up multiple different sources of output.

55
00:02:56.428 --> 00:02:59.728
You could take an OutputStream, a file, and DataOutput,

56
00:02:59.728 --> 00:03:05.366
just like we saw with the earlier example of a JSON

57
00:03:05.366 --> 00:03:12.478
generator and we can write a value as a string.

58
00:03:12.478 --> 00:03:15.479
We then assign this string to a variable,

59
00:03:15.479 --> 00:03:22.958
producing a jsonString, and then printing out the jsonString at the end.

60
00:03:22.958 --> 00:03:23.413
Lovely like that.

61
00:03:23.413 --> 00:03:25.897
So that would give you an option if you want to do something different

62
00:03:25.897 --> 00:03:29.213
with your jsonString other than write it into a stream.

63
00:03:29.213 --> 00:03:29.854
For example,

64
00:03:29.854 --> 00:03:37.000
maybe you want to put that jsonString into a document storage system. Fantastic.

