WEBVTT
1
00:00:00.984 --> 00:00:04.166
Our second demo application uses the ObjectMapper and JSON

2
00:00:04.166 --> 00:00:06.147
parser inside a more real-world application.

3
00:00:06.147 --> 00:00:09.909
We're using the servlet API in order to write a really simple

4
00:00:09.909 --> 00:00:11.447
server-side application that processing JSON.

5
00:00:11.447 --> 00:00:16.898
It does this by wrapping an ObjectMapper within a servlet and also receiving

6
00:00:16.898 --> 00:00:20.860
a JSON document that's being posted to it and processing it in order to

7
00:00:20.860 --> 00:00:23.393
validate some input about the loan application.

8
00:00:23.393 --> 00:00:24.289
Now in module 7,

9
00:00:24.289 --> 00:00:27.905
we'll talk more about how to integrate JSON within other application frameworks,

10
00:00:27.905 --> 00:00:30.571
such as Spring and JAX-RS.

11
00:00:30.571 --> 00:00:33.496
And these offer a simpler integration path and are a

12
00:00:33.496 --> 00:00:35.240
lot neater than the servlet API,

13
00:00:35.240 --> 00:00:38.419
but this is a nice simple way of getting us started.

14
00:00:38.419 --> 00:00:41.369
So we're going to take a little look at this more realistic application.

15
00:00:41.369 --> 00:00:43.269
So it's more realistic in the sense that we've got

16
00:00:43.269 --> 00:00:45.321
a little web server on the go.

17
00:00:45.321 --> 00:00:47.045
And as our SimpleJettyService.

18
00:00:47.045 --> 00:00:51.906
run method shows us, we're going to run a little server on port 8000,

19
00:00:51.906 --> 00:00:52.848
an HTTP server,

20
00:00:52.848 --> 00:00:55.497
and we're going to send any request through to this servlet

21
00:00:55.497 --> 00:00:58.255
that we're taking here to set things up.

22
00:00:58.255 --> 00:01:01.422
This DomBankApplicationServlet is going to use the DOM API,

23
00:01:01.422 --> 00:01:05.222
or the tree mode if you prefer that terminology API from Jackson,

24
00:01:05.222 --> 00:01:08.274
and we're going to receive a request for this bank loan.

25
00:01:08.274 --> 00:01:10.252
We are going to process the bank loan.

26
00:01:10.252 --> 00:01:13.234
So we need to extract the amount of money and the

27
00:01:13.234 --> 00:01:15.033
total income from the bank loan.

28
00:01:15.033 --> 00:01:18.515
And if the amount of money that wants to be borrowed is less than or

29
00:01:18.515 --> 00:01:22.114
equal to three times the size of the totalIncome,

30
00:01:22.114 --> 00:01:24.113
we are going to approve.

31
00:01:24.113 --> 00:01:24.335
Otherwise,

32
00:01:24.335 --> 00:01:26.776
we're going to deny the application and we're going to use

33
00:01:26.776 --> 00:01:30.814
HTTP status codes and respond with a couple of strings to say

34
00:01:30.814 --> 00:01:32.379
whether we approve or deny it.

35
00:01:32.379 --> 00:01:33.116
So a very,

36
00:01:33.116 --> 00:01:35.532
very simple web service for looking at the business

37
00:01:35.532 --> 00:01:37.101
logic of this bank application.

38
00:01:37.101 --> 00:01:37.427
So,

39
00:01:37.427 --> 00:01:40.692
we're going to start off just like before by creating

40
00:01:40.692 --> 00:01:42.567
a field for the ObjectMapper here.

41
00:01:42.567 --> 00:01:45.886
Now it's worth noting that if you're using the servlet API

42
00:01:45.886 --> 00:01:48.097
and you create an ObjectMapper like this,

43
00:01:48.097 --> 00:01:50.289
it will be shared between different threads.

44
00:01:50.289 --> 00:01:53.043
So, that's safe to do with the ObjectMapper class,

45
00:01:53.043 --> 00:01:55.673
but there's potential for a lot of contention there.

46
00:01:55.673 --> 00:01:58.112
And we're just going to leave it in the field for now because it's a very,

47
00:01:58.112 --> 00:02:00.191
very simple service that we're going to use here.

48
00:02:00.191 --> 00:02:03.430
The first thing we need to do is parse in the JSON document,

49
00:02:03.430 --> 00:02:05.323
so let's use the readTree API.

50
00:02:05.323 --> 00:02:09.520
And we need to get the input from the HTTP request.

51
00:02:09.520 --> 00:02:10.011
So,

52
00:02:10.011 --> 00:02:15.815
let's get the InputStream from the HttpServletRequest and read that into a tree.

53
00:02:15.815 --> 00:02:18.594
So I'm going to call that the loanApplication.

54
00:02:18.594 --> 00:02:22.569
Then we need to write a couple of methods here, that local variable final.

55
00:02:22.569 --> 00:02:28.567
And our little methods need to calculate the totalIncome.

56
00:02:28.567 --> 00:02:34.785
We're going to say getTotalIncome from the loanApplication.

57
00:02:34.785 --> 00:02:42.594
And I'm also going to say get the amount here.

58
00:02:42.594 --> 00:02:44.372
So let's start with the amount.

59
00:02:44.372 --> 00:02:46.743
Now the amount is within the loanDetails object.

60
00:02:46.743 --> 00:02:50.970
So I need to take that loanApplication, look up a field by its name,

61
00:02:50.970 --> 00:02:52.569
which is what the.

62
00:02:52.569 --> 00:02:55.368
get method on a JsonNode gives us.

63
00:02:55.368 --> 00:02:58.876
As I say, JsonNodes are a bit like a map of key value pairs here.

64
00:02:58.876 --> 00:03:02.357
So we're going to get out the loanDetails object.

65
00:03:02.357 --> 00:03:05.091
Then, from within the loanDetails object,

66
00:03:05.091 --> 00:03:10.083
firstly I want to check if that loanDetails object is not null

67
00:03:10.083 --> 00:03:13.825
because if it was a missing field it would return null.

68
00:03:13.825 --> 00:03:18.109
And if it's not null, I'm going to get the amountNode out.

69
00:03:18.109 --> 00:03:21.579
So take the loanDetails object and.

70
00:03:21.579 --> 00:03:23.602
get the amount string out.

71
00:03:23.602 --> 00:03:26.132
And that's going to be the amountNode.

72
00:03:26.132 --> 00:03:28.881
And then the amountNode will have a numeric value and so

73
00:03:28.881 --> 00:03:31.414
I'm going to return that amountNode.

74
00:03:31.414 --> 00:03:32.008
asDouble.

75
00:03:32.008 --> 00:03:37.402
When we looked at a string earlier to convert it, that's.

76
00:03:37.402 --> 00:03:39.562
asDouble to convert it to a number.

77
00:03:39.562 --> 00:03:43.011
Now our loanApplication, given the totalIncome is a little bit trickier.

78
00:03:43.011 --> 00:03:48.899
So what we need to do is here take that loanApplication and we

79
00:03:48.899 --> 00:03:53.178
want to look up the value in it called jobs.

80
00:03:53.178 --> 00:03:59.096
And that's going to give us another JsonNode back for the jobs.

81
00:03:59.096 --> 00:04:04.553
And if the jobs is not null, we are going to look through it.

82
00:04:04.553 --> 00:04:07.646
I'm just going to use an old school for loop here to

83
00:04:07.646 --> 00:04:11.737
loop over it because we can also, especially if it's an array,

84
00:04:11.737 --> 00:04:16.169
the jobs field within our application, just to remind you what this looks like,

85
00:04:16.169 --> 00:04:20.680
we're going to loop over that array and those indexed because it's a JSON array,

86
00:04:20.680 --> 00:04:21.336
you see.

87
00:04:21.336 --> 00:04:23.095
So we can look up that as well.

88
00:04:23.095 --> 00:04:24.194
And we'll also use the.

89
00:04:24.194 --> 00:04:25.074
get method via index.

90
00:04:25.074 --> 00:04:26.874
So this is a job within that array.

91
00:04:26.874 --> 00:04:32.560
And what we all want to do is within that job we want to get the

92
00:04:32.560 --> 00:04:37.533
annualIncome field and also get that as a double.

93
00:04:37.533 --> 00:04:43.256
So, here we want to say totalIncome if 0,

94
00:04:43.256 --> 00:04:48.942
totalIncome += to the annualIncome, and then return the totalIncome at the end.

95
00:04:48.942 --> 00:04:50.051
So that's the next step.

96
00:04:50.051 --> 00:04:55.466
I'm just going to, for the purposes of this request so you can see it,

97
00:04:55.466 --> 00:04:58.886
take the response, get the outputStream,

98
00:04:58.886 --> 00:05:06.464
and say print out TotalIncome = totalIncome.

99
00:05:06.464 --> 00:05:09.677
We probably want that new line terminated as well.

100
00:05:09.677 --> 00:05:11.971
And, Amount is equal to amount.

101
00:05:11.971 --> 00:05:15.795
Then we're going to have to do some processing here.

102
00:05:15.795 --> 00:05:21.383
So our business logic was if the amount was less than or

103
00:05:21.383 --> 00:05:23.402
equal to three times the totalIncome,

104
00:05:23.402 --> 00:05:27.754
that's how we decided that sounded like a reasonable request for a loan,

105
00:05:27.754 --> 00:05:31.017
then we need to set the response code.

106
00:05:31.017 --> 00:05:34.976
So take that response, set the status code to.

107
00:05:34.976 --> 00:05:44.675
SC_OK and take that outputStream and print with it Approved.

108
00:05:44.675 --> 00:05:49.844
Otherwise, we're going to take that response and set the status to be.

109
00:05:49.844 --> 00:05:50.738
SC_FORBIDDEN.

110
00:05:50.738 --> 00:05:56.103
And then we'll take the outputStream.

111
00:05:56.103 --> 00:05:57.891
println Denied.

112
00:05:57.891 --> 00:05:58.282
Right.

113
00:05:58.282 --> 00:06:02.194
So here's where the test of our code comes in.

114
00:06:02.194 --> 00:06:04.374
I'm going to load up that little JettyServer.

115
00:06:04.374 --> 00:06:07.645
Then I'm going to flip over to my command line here.

116
00:06:07.645 --> 00:06:11.993
And in my command line, I've got a little post-bank-loan script.

117
00:06:11.993 --> 00:06:15.066
This comes with your project that you can download.

118
00:06:15.066 --> 00:06:18.149
And that does a curl POST to the local thing.

119
00:06:18.149 --> 00:06:20.876
So what this basically says is take the file I'm going to

120
00:06:20.876 --> 00:06:25.367
provide as an argument and send it to the localhost on port

121
00:06:25.367 --> 00:06:27.386
8000 as an application/json file.

122
00:06:27.386 --> 00:06:29.537
So, if I post my bank_loan.

123
00:06:29.537 --> 00:06:33.677
json file, which is the same one as we've seen earlier,

124
00:06:33.677 --> 00:06:37.791
we see my TotalIncome is 71000 pounds a year,

125
00:06:37.791 --> 00:06:41.108
the Amount is 10000 pounds, and we've Approved the request.

126
00:06:41.108 --> 00:06:47.756
Now, if I look at the bad_loan file, which is also Joan Smith,

127
00:06:47.756 --> 00:06:51.093
who's trying to build an extension to a house,

128
00:06:51.093 --> 00:06:52.205
but this bad_loan.

129
00:06:52.205 --> 00:06:55.738
json file has no jobs associated with it,

130
00:06:55.738 --> 00:07:01.216
and we run that same code, we can see TotalIncome is 0,

131
00:07:01.216 --> 00:07:03.062
Amount was 10000, Denied.

132
00:07:03.062 --> 00:07:10.000
Fantastic! And that was all using the DOM API.

