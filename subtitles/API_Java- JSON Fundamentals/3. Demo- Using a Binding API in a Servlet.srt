1
00:00:01,959 --> 00:00:03,971
Now, it's time for our second demo.

2
00:00:03,971 --> 00:00:08,343
In this demo, you'll see how we integrate the binding API into a servlet.

3
00:00:08,343 --> 00:00:12,398
Our servlet will do the same work as the servlet in the previous section.

4
00:00:12,398 --> 00:00:15,229
That's to say it'll approve or deny the loan application,

5
00:00:15,229 --> 00:00:18,673
but this time it'll use the binding style of API so you can see the

6
00:00:18,673 --> 00:00:23,082
difference between that and the DOM style of API.

7
00:00:23,082 --> 00:00:27,609
So let's do a little bit more of a real-world realistic example.

8
00:00:27,609 --> 00:00:32,079
This is the same example that we did with the DOM API of building a

9
00:00:32,079 --> 00:00:37,254
servlet that will approve or reject loan applications.

10
00:00:37,254 --> 00:00:38,332
This time, however,

11
00:00:38,332 --> 00:00:41,974
we're going to use the binding approach rather than the DOM

12
00:00:41,974 --> 00:00:43,768
approach in order to evaluate the input.

13
00:00:43,768 --> 00:00:47,632
So our servlet starts off by implementing the doPost method.

14
00:00:47,632 --> 00:00:51,018
We have an ObjectMapper, which our servlet will use.

15
00:00:51,018 --> 00:00:52,601
And we'll call.

16
00:00:52,601 --> 00:00:54,712
readValue parsing the BasicLoanApplication.

17
00:00:54,712 --> 00:00:58,409
class literal in as a parameter and it taking the

18
00:00:58,409 --> 00:01:01,130
InputStream of the servlet request as its input.

19
00:01:01,130 --> 00:01:04,703
So that will deserialize the JSON value we get sent and

20
00:01:04,703 --> 00:01:07,182
give us a POJO from that JSON input.

21
00:01:07,182 --> 00:01:09,519
We want to calculate the totalIncome of people,

22
00:01:09,519 --> 00:01:12,995
so we can just use the streams API from Java 8 or

23
00:01:12,995 --> 00:01:14,723
later in order to calculate that.

24
00:01:14,723 --> 00:01:15,991
We'll take our loanApplication object,

25
00:01:15,991 --> 00:01:18,788
we'll get the list of jobs that we have in there,

26
00:01:18,788 --> 00:01:21,286
we'll stream them, we'll map each job into its income,

27
00:01:21,286 --> 00:01:22,692
and just call the sum on that.

28
00:01:22,692 --> 00:01:24,855
So that's the totalIncome of the person applying for a loan.

29
00:01:24,855 --> 00:01:28,731
And then we get the amount that they want to apply for by giving the

30
00:01:28,731 --> 00:01:31,645
loanDetails object and getting the amount out of that.

31
00:01:31,645 --> 00:01:33,516
Then finally, we will evaluate that.

32
00:01:33,516 --> 00:01:36,428
So if the loan is less than or equal to three times the totalIncome,

33
00:01:36,428 --> 00:01:39,932
we'll give an OK for the servlet response and we'll tell them it's approved.

34
00:01:39,932 --> 00:01:41,337
Otherwise, we will deny it.

35
00:01:41,337 --> 00:01:42,742
So that nice and simple.

36
00:01:42,742 --> 00:01:44,099
Let's see that code in action.

37
00:01:44,099 --> 00:01:47,637
I have a little main method at the bottom that just loads

38
00:01:47,637 --> 00:01:51,528
this up and runs it on a localhost port.

39
00:01:51,528 --> 00:01:53,226
So, we'll just to remind you,

40
00:01:53,226 --> 00:01:57,214
this is the same post-bank-loan script that we had in the previous section,

41
00:01:57,214 --> 00:02:02,608
which is basically saying post a file to the localhost of port 8000

42
00:02:02,608 --> 00:02:05,659
setting the content type as application/json.

43
00:02:05,659 --> 00:02:09,376
So, this is just to prove to you that the servlet really works.

44
00:02:09,376 --> 00:02:11,590
And I will provide a bank_loan.

45
00:02:11,590 --> 00:02:12,329
json file,

46
00:02:12,329 --> 00:02:17,521
which is the same one that we've been using all the way through so far.

47
00:02:17,521 --> 00:02:18,743
Post it through.

48
00:02:18,743 --> 00:02:19,558
That's approved.

49
00:02:19,558 --> 00:02:21,595
I've also got my bad_loan.

50
00:02:21,595 --> 00:02:24,692
json where the person applying for the loan doesn't have any jobs,

51
00:02:24,692 --> 00:02:27,152
and thus doesn't have any income.

52
00:02:27,152 --> 00:02:34,000
So if we post the bad_loan, we're denied. Servlet works.

