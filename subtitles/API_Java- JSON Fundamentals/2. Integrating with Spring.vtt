WEBVTT
1
00:00:01.238 --> 00:00:04.330
Okay, so let's take a look at Spring.

2
00:00:04.330 --> 00:00:06.263
With neither Spring nor JAX-RS,

3
00:00:06.263 --> 00:00:09.692
we're trying to provide a fully-fledged training course on the framework.

4
00:00:09.692 --> 00:00:11.462
That's out of the scope here.

5
00:00:11.462 --> 00:00:14.715
We're just trying to explain how you can integrate JSON with

6
00:00:14.715 --> 00:00:17.938
these frameworks and will attempt to explain any background

7
00:00:17.938 --> 00:00:20.804
knowledge on the topic required.

8
00:00:20.804 --> 00:00:22.130
What is Spring?

9
00:00:22.130 --> 00:00:26.548
Spring started out life as an inversion of control container.

10
00:00:26.548 --> 00:00:30.753
A bit like a dependency injection framework on steroids.

11
00:00:30.753 --> 00:00:31.449
Over time,

12
00:00:31.449 --> 00:00:34.930
it's evolved to be a broader and more powerful general

13
00:00:34.930 --> 00:00:38.180
application framework with support for web,

14
00:00:38.180 --> 00:00:40.346
batch, and reactive programming.

15
00:00:40.346 --> 00:00:44.161
At the moment, Spring is incredibly popular.

16
00:00:44.161 --> 00:00:47.562
Probably the most popular web application and web

17
00:00:47.562 --> 00:00:49.875
service framework in the Java ecosystem.

18
00:00:49.875 --> 00:00:54.361
That's why we're going to cover a specific example of how to work

19
00:00:54.361 --> 00:00:57.452
with Spring because it's what so many people use.

20
00:00:57.452 --> 00:00:58.408
In this section,

21
00:00:58.408 --> 00:01:01.829
we'll look specifically at how you integrate JSON with Spring

22
00:01:01.829 --> 00:01:06.182
rather than how we use Spring framework as a whole.

23
00:01:06.182 --> 00:01:08.614
So, how are we using Spring?

24
00:01:08.614 --> 00:01:09.830
In this section,

25
00:01:09.830 --> 00:01:13.455
we'll cover a similar service example to the previous

26
00:01:13.455 --> 00:01:15.460
sections where we've used servlets.

27
00:01:15.460 --> 00:01:19.286
Users will post a bank loan application to our service,

28
00:01:19.286 --> 00:01:24.754
and we'll provide a result that either approves or denies the bank loan.

29
00:01:24.754 --> 00:01:27.759
The code examples here all use Spring Boot,

30
00:01:27.759 --> 00:01:32.642
which is a rapid application development version of Spring that

31
00:01:32.642 --> 00:01:35.419
takes a convention over configuration approach.

32
00:01:35.419 --> 00:01:39.009
The basic annotations that we use here are actually all

33
00:01:39.009 --> 00:01:41.471
applicable in Spring web projects as well.

34
00:01:41.471 --> 00:01:45.206
It's just we're using Spring Boot to run the demo application because

35
00:01:45.206 --> 00:01:47.943
it's a popular and useful way of bootstrapping,

36
00:01:47.943 --> 00:01:51.201
thus the name, a Spring project.

37
00:01:51.201 --> 00:01:54.311
So the first thing to note about building web service using

38
00:01:54.311 --> 00:01:57.441
Spring is it takes the approach of using annotations to declare

39
00:01:57.441 --> 00:02:00.218
how a class implements a web service.

40
00:02:00.218 --> 00:02:04.995
The framework itself takes this annotated class and exposes it as a web service,

41
00:02:04.995 --> 00:02:07.729
generating a lot of code for you on the fly so you

42
00:02:07.729 --> 00:02:09.043
don't have to write it yourself.

43
00:02:09.043 --> 00:02:13.571
The @RestController annotation tells Spring that the class in

44
00:02:13.571 --> 00:02:17.380
question is a controller class for a web service.

45
00:02:17.380 --> 00:02:20.886
So doing an HTTP request will result in the

46
00:02:20.886 --> 00:02:23.406
invocation of a method on this class.

47
00:02:23.406 --> 00:02:27.520
The @RequestMapping annotation tells Spring that a given method

48
00:02:27.520 --> 00:02:31.218
should be called when an HTTP request comes in.

49
00:02:31.218 --> 00:02:36.808
Its value describes the URL that should map to the Java method in question.

50
00:02:36.808 --> 00:02:40.554
The method = POST parameter to this annotation shown here

51
00:02:40.554 --> 00:02:44.166
tells Spring that this method should only be invoked when

52
00:02:44.166 --> 00:02:45.964
it's an HTTP POST request.

53
00:02:45.964 --> 00:02:48.683
This approach is a higher level,

54
00:02:48.683 --> 00:02:51.737
more declarative alternative to something like servlets,

55
00:02:51.737 --> 00:02:55.599
and ultimately Spring Boot itself can deploy onto a

56
00:02:55.599 --> 00:02:58.490
servlet container and produce a servlet.

57
00:02:58.490 --> 00:03:02.525
Now you know the basics of how web services in Spring are written,

58
00:03:02.525 --> 00:03:05.218
we can focus on how to integrate JSON with them.

59
00:03:05.218 --> 00:03:08.587
First, let's take a look at consuming JSON.

60
00:03:08.587 --> 00:03:11.431
In the Spring web annotation world,

61
00:03:11.431 --> 00:03:14.980
remote procedure calls map to local method calls.

62
00:03:14.980 --> 00:03:19.446
So the values that you receive from systems that call your

63
00:03:19.446 --> 00:03:22.230
web service come as method parameters.

64
00:03:22.230 --> 00:03:26.386
If you want to deserialize the body of an HTTP POST request as JSON,

65
00:03:26.386 --> 00:03:32.449
you can simply provide an annotation to a method parameter called @RequestBody,

66
00:03:32.449 --> 00:03:32.954
simple.

67
00:03:32.954 --> 00:03:37.338
Spring will deserialize this value from a JSON input through convention

68
00:03:37.338 --> 00:03:40.848
rather than having to be explicitly told to do so.

69
00:03:40.848 --> 00:03:43.895
Okay, so consuming JSON was very simple.

70
00:03:43.895 --> 00:03:45.636
What about producing JSON?

71
00:03:45.636 --> 00:03:46.049
Well,

72
00:03:46.049 --> 00:03:48.939
there are several different approaches to producing

73
00:03:48.939 --> 00:03:51.473
JSON from a Spring web service.

74
00:03:51.473 --> 00:03:54.724
Spring includes an ApplicationResponse class which can take

75
00:03:54.724 --> 00:03:59.007
a POJO as a payload and Spring will automatically emit JSON

76
00:03:59.007 --> 00:04:01.355
from that POJO as a result.

77
00:04:01.355 --> 00:04:04.366
Alternatively, not shown in the example on this slide,

78
00:04:04.366 --> 00:04:08.383
is to just return the POJO directly from your method and annotate

79
00:04:08.383 --> 00:04:12.775
the method or the return type with @ResponseBody,

80
00:04:12.775 --> 00:04:17.209
which tells Spring to use that as the body of the response,

81
00:04:17.209 --> 00:04:19.069
as it says on the tin.

82
00:04:19.069 --> 00:04:22.894
You can also put a parameter on your method with the HttpServletResponse type

83
00:04:22.894 --> 00:04:27.710
and Spring will inject the appropriate value for your request.

84
00:04:27.710 --> 00:04:31.920
You can then use this for producing JSON with a non-binding API.

85
00:04:31.920 --> 00:04:42.000
A similar approach can be used with HttpServletRequest should you want to use a streaming-style parsing approach.

