1
00:00:01,802 --> 00:00:02,043
Wow!

2
00:00:02,043 --> 00:00:03,246
If you've come this far,

3
00:00:03,246 --> 00:00:06,068
you've probably learned a lot in terms of the binding style

4
00:00:06,068 --> 00:00:08,343
of API for working with JSON in Java.

5
00:00:08,343 --> 00:00:11,979
Let's wrap up some conclusions and analyze when you would

6
00:00:11,979 --> 00:00:14,355
use binding compared to the other APIs.

7
00:00:14,355 --> 00:00:17,781
I think the best way of looking at these different JSON

8
00:00:17,781 --> 00:00:20,488
consuming APIs is in terms of pros and cons.

9
00:00:20,488 --> 00:00:21,976
Like many questions in life,

10
00:00:21,976 --> 00:00:26,368
the answer to which JSON consuming approach is best is really,

11
00:00:26,368 --> 00:00:27,166
it depends.

12
00:00:27,166 --> 00:00:28,528
On the plus side,

13
00:00:28,528 --> 00:00:32,789
a binding API is a very simple way to consume JSON as it

14
00:00:32,789 --> 00:00:34,597
only involves one or two method calls.

15
00:00:34,597 --> 00:00:37,952
It avoids duplicating the declaration of your object structuring

16
00:00:37,952 --> 00:00:41,699
between the POJO and the Java mapping by just using the structure of

17
00:00:41,699 --> 00:00:44,282
the POJO to understand how to do the mapping.

18
00:00:44,282 --> 00:00:44,599
Finally,

19
00:00:44,599 --> 00:00:47,769
it's usually pretty easy to map different domain objects with

20
00:00:47,769 --> 00:00:51,625
annotations as common patterns are easily supported.

21
00:00:51,625 --> 00:00:55,527
On the downside, it's not the most performant way of mapping JSON.

22
00:00:55,527 --> 00:01:00,189
That's with a SAX-based or streaming API that we'll see in the next section.

23
00:01:00,189 --> 00:01:03,050
It can be a lot faster and less memory hungry.

24
00:01:03,050 --> 00:01:04,890
It's also a bit less flexible.

25
00:01:04,890 --> 00:01:05,504
For example,

26
00:01:05,504 --> 00:01:08,003
if you're deserialization needs actual logic to support

27
00:01:08,003 --> 00:01:09,581
multiple different versions of JSON,

28
00:01:09,581 --> 00:01:13,710
then it's usually better to use the DOM API compared with the binding API.

29
00:01:13,710 --> 00:01:16,726
In conclusion, I love the binding API.

30
00:01:16,726 --> 00:01:20,622
It's really simple, it's commonly used, and it's generally great.

31
00:01:20,622 --> 00:01:24,107
But I do want to caveat that this is not always the best choice.

32
00:01:24,107 --> 00:01:28,078
Sometimes its limitations can become a problem both in terms

33
00:01:28,078 --> 00:01:30,900
of flexibility and in terms of performance.

34
00:01:30,900 --> 00:01:33,695
If optimal performance at the expense of complexity is

35
00:01:33,695 --> 00:01:42,000
your next goal when consuming JSON, then our next module covers the fastest parsing API of all.

