WEBVTT
1
00:00:02.008 --> 00:00:04.493
Right, it's time to demonstrate these features.

2
00:00:04.493 --> 00:00:05.260
In this demo,

3
00:00:05.260 --> 00:00:07.818
you're going to see the POJO that corresponds to the

4
00:00:07.818 --> 00:00:09.579
loan application JSON document.

5
00:00:09.579 --> 00:00:15.729
Then we'll use the Jackson API to bind the JSON document input into the POJO.

6
00:00:15.729 --> 00:00:18.932
This will make the API usage within Jackson clear.

7
00:00:18.932 --> 00:00:23.076
It will also make the conventions the POJO has to follow apparent.

8
00:00:23.076 --> 00:00:28.279
You will also see what kinds of errors can occur.

9
00:00:28.279 --> 00:00:33.735
Okay, so let's describe the structure of our POJO here,

10
00:00:33.735 --> 00:00:36.463
our plain old Java object.

11
00:00:36.463 --> 00:00:36.707
Now,

12
00:00:36.707 --> 00:00:39.145
the basic loan application that we're going to use for

13
00:00:39.145 --> 00:00:43.754
deserialization here has a name, it has a purposeOfLoan,

14
00:00:43.754 --> 00:00:48.461
it has a loanDetails field, and it has a jobs list.

15
00:00:48.461 --> 00:00:53.019
And each of these different fields has a getter and a setter,

16
00:00:53.019 --> 00:00:55.724
which follow the Java naming conventions,

17
00:00:55.724 --> 00:00:58.697
getName for returning and reading the name,

18
00:00:58.697 --> 00:01:00.648
setName for writing the name.

19
00:01:00.648 --> 00:01:03.584
This BasicLoanDetails object that we'll see within

20
00:01:03.584 --> 00:01:06.795
it also has the same conventions, an amount,

21
00:01:06.795 --> 00:01:10.746
the startDate, and an endDate, and getter and setters for each of these values.

22
00:01:10.746 --> 00:01:14.891
Now you may notice that when it comes to the dates here,

23
00:01:14.891 --> 00:01:17.173
I'm just using strings to represent dates because

24
00:01:17.173 --> 00:01:18.771
we're using strings in the JSON.

25
00:01:18.771 --> 00:01:19.761
Don't worry about that.

26
00:01:19.761 --> 00:01:21.781
That's not an inherent limitation to this approach.

27
00:01:21.781 --> 00:01:24.355
We'll see how to solve that in the next section.

28
00:01:24.355 --> 00:01:29.030
If we want to take our BasicLoanApplication and have a way of

29
00:01:29.030 --> 00:01:35.469
consuming a JSON file into this object, then we need to first of all,

30
00:01:35.469 --> 00:01:40.940
like pretty much everything else, start off with an ObjectMapper.

31
00:01:40.940 --> 00:01:42.803
Now we've got our ObjectMapper, it's very,

32
00:01:42.803 --> 00:01:46.213
very, very simple, incredibly simple to do the binding.

33
00:01:46.213 --> 00:01:47.954
We just call the.

34
00:01:47.954 --> 00:01:48.824
readValue method.

35
00:01:48.824 --> 00:01:50.281
And the first argument of.

36
00:01:50.281 --> 00:01:52.611
readValue is a source where the JSON is.

37
00:01:52.611 --> 00:01:54.633
So that could be a DataInput, a JsonParser,

38
00:01:54.633 --> 00:01:57.293
it could just be a string, it could be an InputStream,

39
00:01:57.293 --> 00:01:58.207
all sorts of things.

40
00:01:58.207 --> 00:02:00.812
Here we're going to use the file, the BANK_LOAN_FILE,

41
00:02:00.812 --> 00:02:03.734
and then you just need to use the class literal,

42
00:02:03.734 --> 00:02:08.145
the Java class literal, in order to say what type to read it back out as.

43
00:02:08.145 --> 00:02:14.333
So the class literal in this case would be BasicLoanApplication.

44
00:02:14.333 --> 00:02:14.952
class.

45
00:02:14.952 --> 00:02:18.067
Then, we can assign that to a field here.

46
00:02:18.067 --> 00:02:21.497
I'm just going to reformat that so it's a little bit easier to read.

47
00:02:21.497 --> 00:02:23.470
We take our loanApplication, we do the.

48
00:02:23.470 --> 00:02:24.726
readValue on the BasicLoanApplication.

49
00:02:24.726 --> 00:02:28.834
class literal, then we instantiate it to a local variable.

50
00:02:28.834 --> 00:02:31.576
And just to show you what's been read in here,

51
00:02:31.576 --> 00:02:33.495
I'm going to print out that loanApplication.

52
00:02:33.495 --> 00:02:38.265
Let's run the code, and we'll see on the command line what's gotten printed out.

53
00:02:38.265 --> 00:02:41.938
Here is the toString method of the loanApplication,

54
00:02:41.938 --> 00:02:43.316
the BasicLoanApplication object.

55
00:02:43.316 --> 00:02:44.646
It set the name, the purposeOfLoan.

56
00:02:44.646 --> 00:02:48.786
I mean you can see all these fields are filled in and everything works.

57
00:02:48.786 --> 00:02:49.635
Lovely and incredibly simple.

58
00:02:49.635 --> 00:02:51.862
It was just really this one line of code, this.

59
00:02:51.862 --> 00:02:52.126
readValue.

60
00:02:52.126 --> 00:02:55.845
You have to be a little bit aware here of what's going on.

61
00:02:55.845 --> 00:02:59.529
In the BasicLoanApplication class, we had some getters and setters.

62
00:02:59.529 --> 00:03:00.319
Now technically,

63
00:03:00.319 --> 00:03:06.243
we can actually remove the setters and Jackson will do a bit of magic

64
00:03:06.243 --> 00:03:09.853
here and it will deserialize those values any way.

65
00:03:09.853 --> 00:03:13.157
Even though you have a private field for the name,

66
00:03:13.157 --> 00:03:16.071
it's using reflection under the hood to make that field accessible

67
00:03:16.071 --> 00:03:18.593
and being able to set the value into that name.

68
00:03:18.593 --> 00:03:22.167
So quite cool, but I don't really believe in cool code myself.

69
00:03:22.167 --> 00:03:23.204
I believe in simple code.

70
00:03:23.204 --> 00:03:25.372
It's better to have the getters and setters here and

71
00:03:25.372 --> 00:03:26.644
stick with the Java convention.

72
00:03:26.644 --> 00:03:30.609
Make it easier to understand for people coming in and maintaining your code.

73
00:03:30.609 --> 00:03:35.628
The other thing to be aware of is the naming is really important here.

74
00:03:35.628 --> 00:03:38.426
So if I take that applicantName and I rename it,

75
00:03:38.426 --> 00:03:43.168
including the getters and the setters, so now everything says applicantName.

76
00:03:43.168 --> 00:03:45.885
And I go back to my ConsumingWithBindingApi example,

77
00:03:45.885 --> 00:03:49.526
and I rerun this, I'm going to get a huge error.

78
00:03:49.526 --> 00:03:49.852
Okay.

79
00:03:49.852 --> 00:03:50.830
Here we go.

80
00:03:50.830 --> 00:03:52.581
What does that error tell me?

81
00:03:52.581 --> 00:03:54.331
It's an unrecognized field called name.

82
00:03:54.331 --> 00:03:55.781
That was the name from the JSON file.

83
00:03:55.781 --> 00:03:57.670
I only know about the properties loanDetails,

84
00:03:57.670 --> 00:03:59.637
applicantName, jobs, and purposeOfLoan.

85
00:03:59.637 --> 00:04:02.266
So you have to make sure here that you get the name the field

86
00:04:02.266 --> 00:04:04.977
exactly the same in your Java code and your JSON code.

87
00:04:04.977 --> 00:04:08.184
There are ways you can get around that that we'll just see in a little bit.

88
00:04:08.184 --> 00:04:16.000
But again, if you can do it, it's best to do it. Binding API, nice and simple.

