WEBVTT
1
00:00:01.219 --> 00:00:05.625
So we saw that Spring made it very easy to integrate

2
00:00:05.625 --> 00:00:08.029
JSON into its API with annotations.

3
00:00:08.029 --> 00:00:12.165
But it's not the only system that offers such capabilities.

4
00:00:12.165 --> 00:00:16.070
A more lightweight and standardized approach is offered by JAX-RS,

5
00:00:16.070 --> 00:00:18.427
which is what we'll be looking at here.

6
00:00:18.427 --> 00:00:22.886
So JAX-RS is the official standard for what its

7
00:00:22.886 --> 00:00:25.364
designers call RESTful web services.

8
00:00:25.364 --> 00:00:28.265
Now REST, or representation of state transfer,

9
00:00:28.265 --> 00:00:33.292
is an approach for dealing with server-side objects and treating them

10
00:00:33.292 --> 00:00:37.435
as resources that can be manipulated over URLs.

11
00:00:37.435 --> 00:00:43.116
Most people don't implement by the book web services using JAX-RS.

12
00:00:43.116 --> 00:00:48.915
They kind of use it for JSON plus HTTP as a communication protocol.

13
00:00:48.915 --> 00:00:50.812
Now, despite the confusing name,

14
00:00:50.812 --> 00:00:56.364
JAX-RS is a useful system that helps us build official services.

15
00:00:56.364 --> 00:01:01.947
In fact, it's included in the official Java EE or Jakarta EE,

16
00:01:01.947 --> 00:01:04.755
these days, standard from version 6.

17
00:01:04.755 --> 00:01:05.694
0 onwards.

18
00:01:05.694 --> 00:01:10.429
Being a standard, JAX-RS doesn't have one implementation.

19
00:01:10.429 --> 00:01:13.986
Apache, CXF, RESTEasy, WebSphere, and WebLogic,

20
00:01:13.986 --> 00:01:18.145
and many others offer implementations for its approach.

21
00:01:18.145 --> 00:01:22.525
In these examples, we will be using the reference implementation, Jersey.

22
00:01:22.525 --> 00:01:26.527
It is very popular as an alternative to Spring web and

23
00:01:26.527 --> 00:01:30.411
offers a similar set of benefits, a declarative,

24
00:01:30.411 --> 00:01:35.869
annotation-driven approach to web services that are easily integrated with JSON.

25
00:01:35.869 --> 00:01:39.376
It's also used by the popular Dropwizard framework that

26
00:01:39.376 --> 00:01:43.020
integrates Jersey with Jackson for you.

27
00:01:43.020 --> 00:01:45.671
So, in order to write web services with Jersey,

28
00:01:45.671 --> 00:01:48.731
you need to take a similar approach to Spring web.

29
00:01:48.731 --> 00:01:52.433
The class that you receive the method invocations on is

30
00:01:52.433 --> 00:01:58.227
annotated with an @Path annotation, taking the URL to bind it to as a parameter.

31
00:01:58.227 --> 00:02:01.812
If you want a method to receive an HTTP POST request,

32
00:02:01.812 --> 00:02:04.760
then simply use an @POST annotation.

33
00:02:04.760 --> 00:02:10.046
As mentioned earlier, we won't be going over the full API of JAX-RS here,

34
00:02:10.046 --> 00:02:13.773
just the minimal amount of information required to

35
00:02:13.773 --> 00:02:16.525
understand how JSON integrates with it.

36
00:02:16.525 --> 00:02:19.920
Okay, so how do we consume JSON with Jersey?

37
00:02:19.920 --> 00:02:24.735
Again, like Spring, the approach taken is to annotate methods declaratively.

38
00:02:24.735 --> 00:02:25.255
In Jersey,

39
00:02:25.255 --> 00:02:28.374
you need to be a little bit more explicit than in Spring

40
00:02:28.374 --> 00:02:30.295
about what is consumed and produced.

41
00:02:30.295 --> 00:02:31.896
It's still pretty easy though.

42
00:02:31.896 --> 00:02:38.792
Simply add an @Consumes annotation to tell Jersey what the MediaType is to use,

43
00:02:38.792 --> 00:02:42.415
so, APPLICATION_JSON in the case of JSON.

44
00:02:42.415 --> 00:02:46.684
This will bind the body from your POST request to a parameter.

45
00:02:46.684 --> 00:02:52.044
So here we've got a loanApplication parameter on the public API method and that

46
00:02:52.044 --> 00:02:57.280
gets deserialized from the JSON in the POST requests body.

47
00:02:57.280 --> 00:02:59.660
For producing JSON, it's also very easy.

48
00:02:59.660 --> 00:03:05.133
This time you use an @Produces annotation instead of a @Consumes annotation.

49
00:03:05.133 --> 00:03:09.911
The annotation takes the MediaType, again, as a parameter to work with.

50
00:03:09.911 --> 00:03:12.293
So we've used APPLICATION_JSON here.

51
00:03:12.293 --> 00:03:17.548
Jersey, itself, contains its own response class that your method should return.

52
00:03:17.548 --> 00:03:21.352
The Response object has a method to set the body to return.

53
00:03:21.352 --> 00:03:30.000
That body can be a Java POJO. And if you set the MediaType correctly, it will get serialized to JSON.

