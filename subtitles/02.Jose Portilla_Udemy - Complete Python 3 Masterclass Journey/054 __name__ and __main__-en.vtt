WEBVTT
1

00:00:00.680 --> 00:00:04.640

Let's finish off by discussing the name variable and the mainstream.



2

00:00:05.630 --> 00:00:09.940

Often in larger scripts you will see this line of code at the bottom of them.



3

00:00:10.020 --> 00:00:16.460

It will say if name is equal to Main with two underscores in the beginning and at the end of these variables



4

00:00:16.520 --> 00:00:22.180

and strings this line of code is designed to help in the case where function calls are coming from when



5

00:00:22.180 --> 00:00:24.350

working with all pulled up by scripts.



6

00:00:24.350 --> 00:00:26.740

Let's explore that statement a little further.



7

00:00:27.820 --> 00:00:32.680

Sometimes when you are importing from a module you would like to know whether a modules function is



8

00:00:32.680 --> 00:00:38.770

being used as an import or if the original the Paice file you're working with already has that function



9

00:00:38.860 --> 00:00:39.760

play.



10

00:00:39.760 --> 00:00:46.450

So for example if you run a script file at the command line and you notice that you're calling some



11

00:00:46.450 --> 00:00:48.000

function called Hello.



12

00:00:48.250 --> 00:00:53.710

You would like to know whether hello has been imported from another script or if Hello was defined in



13

00:00:53.710 --> 00:00:56.460

the script that you're actually running in in order to do that.



14

00:00:56.470 --> 00:01:04.070

You can use this line of code if name is equal to mean when your script is run by passing it as a command



15

00:01:04.070 --> 00:01:09.920

to the Python interpreter such as Python my script that pi all the code that is the indentation level



16

00:01:09.920 --> 00:01:11.590

0 gets executed.



17

00:01:11.720 --> 00:01:16.310

That is to say all the functions in the classes get defined but none of their code actually gets ran



18

00:01:18.110 --> 00:01:25.190

name or underscore underscore name underscore underscore is a built in variable in Python which evaluates



19

00:01:25.190 --> 00:01:27.590

to the name of the current module.



20

00:01:27.590 --> 00:01:35.060

However if a module is being run directly then that name variable is set to the string underscore underscore



21

00:01:35.060 --> 00:01:36.980

main underscore underscore.



22

00:01:37.070 --> 00:01:42.770

This allows you to test whether your script is being run directly or it's being imported by something



23

00:01:42.770 --> 00:01:43.380

else.



24

00:01:43.490 --> 00:01:50.410

By testing if the name that is that built in variable of the current module is equal to the string main.



25

00:01:50.600 --> 00:01:54.590

Let's explore this idea further with an example for this example.



26

00:01:54.590 --> 00:01:58.940

I've created two dot PI scripts one PI and then two that pi.



27

00:01:58.940 --> 00:02:03.640

So let's go ahead and add some code to these in one PI.



28

00:02:03.650 --> 00:02:09.220

I'm going to create a function called funk and it's just going to print out the following.



29

00:02:09.380 --> 00:02:17.090

It will say func in one PI and then I'm going to say print.



30

00:02:17.260 --> 00:02:24.870

And this is a top level print statement so I will just say top level print statements.



31

00:02:26.030 --> 00:02:33.920

In one PI and then I will say if and notice here subline will actually complete this for us bullets



32

00:02:33.920 --> 00:02:37.750

type it out manually if name.



33

00:02:37.790 --> 00:02:46.490

So if that Bilton name variable is equal to underscore underscore mean underscore underscore colon prints



34

00:02:47.320 --> 00:02:47.970

1.



35

00:02:48.020 --> 00:02:54.400

Pi is being run directly and then we'll say.



36

00:02:54.450 --> 00:02:55.810

Else.



37

00:02:56.060 --> 00:02:58.070

Prince 1.



38

00:02:58.080 --> 00:03:02.110

Pi is being run in.



39

00:03:02.430 --> 00:03:06.450

In another module then we're going to save that.



40

00:03:06.480 --> 00:03:10.770

And now let's go to to the high and inside of two that pi.



41

00:03:10.800 --> 00:03:22.910

We are going to import the one module and then I will print out top level in to pi.



42

00:03:23.130 --> 00:03:33.120

And then I will call that function from the one module and then I will say if that name variable is



43

00:03:33.120 --> 00:03:43.680

equal to the string Maine Prince to that pi is being run directly



44

00:03:46.480 --> 00:03:55.330

else I'm going to Prince to that pi is being imported into an other module.



45

00:03:56.670 --> 00:04:01.260

So we're going to save both for these files and quickly review them.



46

00:04:01.260 --> 00:04:03.380

So what I have in one pie.



47

00:04:03.450 --> 00:04:04.880

I've defined the function.



48

00:04:05.160 --> 00:04:11.940

And if we run one that paid directly then I have a top level print statement in one pie and then I have



49

00:04:11.940 --> 00:04:14.980

this check if my name variable is equal to main.



50

00:04:15.180 --> 00:04:17.830

Then I know that one is being run directly.



51

00:04:17.830 --> 00:04:21.190

Otherwise one pie is being run in some other module.



52

00:04:22.730 --> 00:04:29.240

Into that pie I have imported the one module I'm going to print out top level print statement to that



53

00:04:29.240 --> 00:04:29.850

pi.



54

00:04:30.110 --> 00:04:36.050

I will execute the function from 1 and then I will say if the name variables equal to Main then I know



55

00:04:36.050 --> 00:04:41.990

that the two that pi is being run directly or otherwise to the pie's being imported into another module.



56

00:04:42.260 --> 00:04:45.350

So let's open up our command line and run these scripts.



57

00:04:45.350 --> 00:04:49.050

Let's begin by running one up high.



58

00:04:49.140 --> 00:04:52.950

So we will say Python 1. PI and note what happens here.



59

00:04:52.980 --> 00:04:59.570

I get a top level print statement in one that pi and one that pi is being run directly because the name



60

00:04:59.930 --> 00:05:05.570

variable in one PI was equal to mean because I ran one PI directly.



61

00:05:05.570 --> 00:05:10.090

Now let's see what happens when I run to the PI.



62

00:05:10.200 --> 00:05:14.480

We still get the toplevel print statement and one PI because it's being imported.



63

00:05:14.700 --> 00:05:18.790

But now I see that one that pi is being run in another module.



64

00:05:19.020 --> 00:05:25.940

Then I get the top level print statement into that pi and then I call phunk from the one that pi.



65

00:05:26.040 --> 00:05:28.870

And then I know that too that Pye's being run directly.



66

00:05:28.890 --> 00:05:35.940

So this allows us to realize whether we're calling modules from another dot PI script or if we're running



67

00:05:35.940 --> 00:05:38.460

that module file directly.



68

00:05:38.460 --> 00:05:40.800

Now often you'll see people do the following.



69

00:05:40.800 --> 00:05:46.690

They'll still use this if name is equal to mean but to use it more as an organization for their code.



70

00:05:46.770 --> 00:05:51.300

So what they end up doing is they define lots of functions or classes here so you can think here lots



71

00:05:51.300 --> 00:05:56.680

more functions and then at the very bottom they have their logic for execution.



72

00:05:56.690 --> 00:06:05.510

So they get rid of this L statement and then they say something like prints all my code to run and then



73

00:06:05.510 --> 00:06:08.380

they just call functions here func etc..



74

00:06:08.450 --> 00:06:13.400

So this is a really common way to organize code without postscripts where you define a bunch of things



75

00:06:13.400 --> 00:06:19.430

above this line and then you say all right if I'm running the stop PI file directly I'm going to execute



76

00:06:19.490 --> 00:06:22.030

a lot of the functions that I had up here.



77

00:06:22.040 --> 00:06:27.140

So this is really common to see and in most cases this is actually how you're going to see this.



78

00:06:27.170 --> 00:06:32.810

If name is equal to main line being used which is why when you're just beginning to learn about Python



79

00:06:33.120 --> 00:06:37.940

and you doing some Google searches you'll come across this line a lot and it can be confusing at first



80

00:06:38.210 --> 00:06:42.380

because you have to learn about modules you have to learn about builtin variables and what's actually



81

00:06:42.380 --> 00:06:43.300

going on.



82

00:06:43.310 --> 00:06:49.630

Hopefully this comparison of 1. Pi and the two pi script make it clear how this is actually working.



83

00:06:49.820 --> 00:06:55.310

But realistically when you search for examples online you're going to be going to see it used in this



84

00:06:55.310 --> 00:07:00.790

fashion where you see lots of functions get defined and then you say if the name variable is built into



85

00:07:00.800 --> 00:07:05.660

main meaning I'm running this stop by script directly run a bunch of my functions and execute some sort



86

00:07:05.660 --> 00:07:07.250

of code logic.



87

00:07:07.250 --> 00:07:07.930

All right.



88

00:07:08.270 --> 00:07:09.300

We'll see you at the next lesson.



