1
00:00:00,410 --> 00:00:07,610
In this lesson we'll be discussing lambda expressions map and filter map and filter are built in functions

2
00:00:07,610 --> 00:00:12,700
in Python that allow you to efficiently apply functions to every element in the list.

3
00:00:12,890 --> 00:00:18,530
Land expressions are useful in this context because they also allow you to create functionality without

4
00:00:18,530 --> 00:00:21,860
the full formal syntax of a normal Python function.

5
00:00:21,860 --> 00:00:29,800
Let's open up a Jupiter notebook and explore these functions in lambda expressions.

6
00:00:29,800 --> 00:00:32,500
Let's begin by talking about the map function.

7
00:00:32,500 --> 00:00:38,350
The map function allows you to map a function to an iterable object that is to say you can quickly call

8
00:00:38,350 --> 00:00:43,180
the same function to every single item in an iterable such as a list.

9
00:00:43,260 --> 00:00:49,590
For example let's create our own function called Square which simply takes in a number we'll call numb

10
00:00:50,280 --> 00:00:56,490
and returns that same number to the power of two or squared.

11
00:00:56,570 --> 00:01:05,390
Now if we had a list called my number or my numbers and it was numbers 1 2 3 4 5 and I wanted to apply

12
00:01:05,390 --> 00:01:10,420
this function to every single item in this list and then create a new list out of it.

13
00:01:10,460 --> 00:01:15,440
One option would be to create a for loop create a new list and then with a for loop go through every

14
00:01:15,440 --> 00:01:21,770
single number in that list and then append the new result to a new list or the other alternative is

15
00:01:21,800 --> 00:01:30,730
I could map my function so I could call map pasand my function and then pass my iterable or my list.

16
00:01:30,860 --> 00:01:36,260
And if you do shift tab here on this function let's make sure we spell or function correctly.

17
00:01:36,260 --> 00:01:40,960
If you do shift tab you'll see that it takes in a funk and some iterable.

18
00:01:41,000 --> 00:01:47,000
And then it has creates a map object so it makes an iterator that computes the function using arguments

19
00:01:47,000 --> 00:01:48,730
from each of the intervals.

20
00:01:48,980 --> 00:01:53,110
So let's go ahead and explore this if we actually want to see the results.

21
00:01:53,120 --> 00:01:55,230
Notice it has a map object here.

22
00:01:55,490 --> 00:02:02,380
So I can say for item in map print the item.

23
00:02:02,410 --> 00:02:06,840
So this is essentially generating every single square of this list.

24
00:02:06,850 --> 00:02:11,350
So it's applying this function square to every single number in this list.

25
00:02:11,350 --> 00:02:15,380
One two three four five results in 1 4 9 16 25.

26
00:02:15,580 --> 00:02:24,830
If you just wanted the actual list result you could just pass in this map function into the list and

27
00:02:24,830 --> 00:02:27,140
then you get the list backout itself.

28
00:02:27,200 --> 00:02:32,510
So the functions can be as complex as you want as long as they just return a single item that you can

29
00:02:32,540 --> 00:02:34,250
easily map to.

30
00:02:34,460 --> 00:02:39,100
So for example let's create a more complex function function called splicer.

31
00:02:39,200 --> 00:02:40,730
It takes in some string.

32
00:02:40,730 --> 00:02:46,470
Call it my string and it's the length of the string happens to be odd.

33
00:02:46,490 --> 00:02:50,590
So we check the length of the string Matu is equal to zero.

34
00:02:50,630 --> 00:02:52,860
Then we return this.

35
00:02:52,880 --> 00:02:55,490
Even the word even or the string even.

36
00:02:55,790 --> 00:02:56,190
Else.

37
00:02:56,210 --> 00:02:59,130
Let's go ahead and return the first character of the string.

38
00:02:59,420 --> 00:03:04,170
So I'll say my string 0 is a more complex function but it works just the same.

39
00:03:04,190 --> 00:03:15,720
We can have a list called my names or we have a B B will say C C C and then D D D D and we can say show

40
00:03:15,720 --> 00:03:16,390
me the list.

41
00:03:16,410 --> 00:03:23,540
When you map the splicer function to my names and you can see we get back a even C..

42
00:03:23,550 --> 00:03:28,260
Even so it's just returning back even if the length of the string was even.

43
00:03:28,290 --> 00:03:30,230
Or just the first letter of the string.

44
00:03:30,270 --> 00:03:35,250
If it's odd numbered in length and notice what we're doing here this is something interesting we are

45
00:03:35,250 --> 00:03:37,080
just passing in the function itself.

46
00:03:37,080 --> 00:03:42,030
We are not calling the function so we're not actually calling the function or executing.

47
00:03:42,030 --> 00:03:43,860
Instead we just pass in the function.

48
00:03:43,890 --> 00:03:49,350
And the reason for that is because map itself is going to be doing the calling so we don't want to have

49
00:03:49,350 --> 00:03:50,230
princes here.

50
00:03:50,250 --> 00:03:52,180
Otherwise you'll get an error instead.

51
00:03:52,280 --> 00:03:55,300
What you want to do is just pass the function itself.

52
00:03:55,320 --> 00:03:59,040
So keep that in mind as you use the map function.

53
00:03:59,040 --> 00:04:04,950
Let's now move on to discussing the filter function the filter function is similar to the map function

54
00:04:05,340 --> 00:04:10,770
except instead of applying that function to every single element in the array and then returning the

55
00:04:10,770 --> 00:04:11,560
result.

56
00:04:11,670 --> 00:04:15,420
Instead you're only going to apply functions that return a boolean value.

57
00:04:15,420 --> 00:04:16,520
True or false.

58
00:04:16,620 --> 00:04:22,400
And then you're going to filter out the iterable list by the elements that return true when passed into

59
00:04:22,410 --> 00:04:23,760
the function.

60
00:04:23,760 --> 00:04:25,860
So let's explain this through an example.

61
00:04:25,950 --> 00:04:34,590
We will say our function is check even and it takes in a number and then it's going to return that number

62
00:04:35,090 --> 00:04:38,080
to equals zero.

63
00:04:38,150 --> 00:04:45,170
So what that means is if I call my function on a number such as 10 it's going to return true because

64
00:04:45,170 --> 00:04:46,390
it's an even number.

65
00:04:46,580 --> 00:04:51,440
If I passed it on an odd number it's going to return false so all this function does is that returns

66
00:04:51,470 --> 00:04:52,550
a boolean value.

67
00:04:52,550 --> 00:04:55,820
True or false if the numbers even are not.

68
00:04:55,820 --> 00:05:02,640
Now imagine I have a list of numbers such as numbers and will say this is 1 2 3 4 5 6.

69
00:05:02,690 --> 00:05:07,210
So I only want the values where this returns true.

70
00:05:07,640 --> 00:05:15,770
Well what I can do is I can use the filter function pass in my function that returns a boolean value

71
00:05:16,190 --> 00:05:18,730
and then pass in my iterable object the numbers.

72
00:05:18,950 --> 00:05:24,340
And then if I like to see the results I can pass this whole thing into the list function and there.

73
00:05:24,350 --> 00:05:26,570
Now I only see that even numbers.

74
00:05:26,570 --> 00:05:32,530
So the idea filter is that you pass in a function that returns boolean values true or false.

75
00:05:32,690 --> 00:05:38,630
And then you in some iterable almost always a list and then you filter out the results and you only

76
00:05:38,630 --> 00:05:45,010
get the values or the elements in this list that return true when passed into this function.

77
00:05:45,020 --> 00:05:47,060
So that's how the filter function works.

78
00:05:47,780 --> 00:05:50,940
And finally let's discuss the land the expression.

79
00:05:50,960 --> 00:05:56,300
It's a very useful tool and sometimes for beginners it's a bit confusing because it's just presented

80
00:05:56,330 --> 00:06:02,920
plainly at first instead of showing you how we derive the land expression what the land expression does.

81
00:06:02,930 --> 00:06:06,220
It allows you to create what are called anonymous functions.

82
00:06:06,260 --> 00:06:11,490
And this basically means that we can quickly make ad hoc functions without needing to properly defined

83
00:06:11,490 --> 00:06:14,240
the function using the keyword.

84
00:06:14,360 --> 00:06:20,510
So Lanzas body is essentially just a single expression instead of a block of statements to show you

85
00:06:20,510 --> 00:06:22,640
how we derive de-link lambda expression.

86
00:06:22,670 --> 00:06:26,790
Let's first start off by creating an example function.

87
00:06:27,170 --> 00:06:31,890
So just like any other function we start off with that the key word the name of the function and the

88
00:06:31,890 --> 00:06:41,070
parameters it takes in we say result is equal to numb to the power of two and then we return that result.

89
00:06:41,090 --> 00:06:49,820
So here we have our square function and if we call Square we get back 16 so square of four is 16.

90
00:06:50,240 --> 00:06:56,050
Now we can simplify this further because technically I don't need to save this result right here.

91
00:06:56,270 --> 00:07:04,010
So I'm going to simplify this by getting rid of this assignment of result and then cutting this and

92
00:07:04,010 --> 00:07:05,310
pasting it here.

93
00:07:05,630 --> 00:07:07,150
And let's delete this line.

94
00:07:07,610 --> 00:07:11,180
And now if I run this again let's run it now on three.

95
00:07:11,210 --> 00:07:13,850
It still works three times three is nine.

96
00:07:14,180 --> 00:07:17,150
And in fact we can actually simplify this further.

97
00:07:17,240 --> 00:07:20,360
You could technically write this all on one line.

98
00:07:20,360 --> 00:07:25,610
It's definitely not recommended given the syntax of Python or the convention of using whitespace but

99
00:07:25,700 --> 00:07:27,560
this technically still works.

100
00:07:27,710 --> 00:07:31,160
If I run this again passen another number such as two.

101
00:07:31,310 --> 00:07:33,150
I still get the result of four.

102
00:07:33,170 --> 00:07:37,750
So here I'm saying the square of this number returned the number squared.

103
00:07:37,760 --> 00:07:40,930
This is the format of a lamb the expression.

104
00:07:41,000 --> 00:07:47,630
So the land expression what it does is it gets rid of DPF because you don't need that special key word

105
00:07:47,630 --> 00:07:48,270
anymore.

106
00:07:48,470 --> 00:07:54,240
And it also gets rid of the name of the function because the intention is to only use it once.

107
00:07:54,500 --> 00:08:00,040
And since you know it's a function that has to return something you also get rid of the return keyword

108
00:08:00,860 --> 00:08:05,680
and then so that Python knows that this whole thing is a land expression at the very beginning of it.

109
00:08:05,690 --> 00:08:10,110
You say lambda numb and then numb to the power of two.

110
00:08:10,310 --> 00:08:13,610
So this is the form of a lammed expression.

111
00:08:13,670 --> 00:08:15,850
So why would you need a land expression.

112
00:08:15,860 --> 00:08:21,820
We'll take a look at these functions right here such as filter and map in map.

113
00:08:21,830 --> 00:08:28,370
We were applying functions that were the find with DPF like square and splicer and unfilter we were

114
00:08:28,390 --> 00:08:32,700
defining functions as well the earth and then applying them to iterable.

115
00:08:33,020 --> 00:08:39,920
Imagine in a very long script you were only going to do this filter command or this map command once

116
00:08:40,460 --> 00:08:46,460
if you're only going to do it once on an iterable it may not make sense to go through the entire effort

117
00:08:46,610 --> 00:08:49,010
of finding a function with a name.

118
00:08:49,010 --> 00:08:55,400
Instead you may just want to pasan a one time anonymous expression and that is the land expression.

119
00:08:55,460 --> 00:08:59,420
And the reason it's called Anonymous is because we never really gave a name.

120
00:08:59,600 --> 00:09:04,500
Always said it was land and then the expression and it essentially has a one time use case.

121
00:09:04,730 --> 00:09:07,170
So I could do the following.

122
00:09:07,250 --> 00:09:10,990
I can say map the land expression we just created.

123
00:09:11,150 --> 00:09:13,800
Say lambda num colon.

124
00:09:14,020 --> 00:09:15,530
Number two the power of two.

125
00:09:15,530 --> 00:09:20,850
And we're going to map that land expression to symbolist and let's go ahead and pass in a list.

126
00:09:20,880 --> 00:09:27,680
One two three and then we're going to transform this to a list so we can see the results in here we

127
00:09:27,680 --> 00:09:30,090
can see 1 4 9.

128
00:09:30,110 --> 00:09:32,630
And remember that we can call these variables whatever we want.

129
00:09:32,630 --> 00:09:37,560
So this could have been X and X the power of two.

130
00:09:37,610 --> 00:09:39,950
And if we run this we get back the exact same result.

131
00:09:39,950 --> 00:09:42,770
So it's really up to you what to call this variable.

132
00:09:42,770 --> 00:09:47,660
Just as it's up to you what to call these variables inside these function calls.

133
00:09:47,660 --> 00:09:53,210
So if you just begin seeing land expressions like this right off the bat it may be confusing at first

134
00:09:53,660 --> 00:09:59,030
but I think seeing it from the derivation of a function makes it a lot easier to understand.

135
00:09:59,920 --> 00:10:03,590
Let's go through a couple of more examples of land expressions.

136
00:10:03,670 --> 00:10:09,400
So let's review that land the expression format for trying to filter even numbers.

137
00:10:09,400 --> 00:10:18,340
So we will say filter in the land the expression is taking in an n and then it's returning whether or

138
00:10:18,340 --> 00:10:21,260
not and Mattu is equal to zero.

139
00:10:21,880 --> 00:10:30,520
And then we apply that to some list so we'll say one two three four five and we'll pass this and transform

140
00:10:30,520 --> 00:10:36,010
it into a list so that we can see the results and it only returns that even numbers 2 and 4.

141
00:10:36,040 --> 00:10:40,900
So that's the land expression for the function we created up here called check even.

142
00:10:40,950 --> 00:10:44,380
And we can see that we can basically create the land expression right here.

143
00:10:44,380 --> 00:10:51,330
If we just get rid of this pass and lambda get rid of that print C's get rid of this return.

144
00:10:51,470 --> 00:10:53,410
There is the land expression that we just created.

145
00:10:53,530 --> 00:10:58,480
So if we take a look at this scroll down here that's the exact same thing except freezing and it's that

146
00:10:58,480 --> 00:10:59,160
of them.

147
00:10:59,170 --> 00:11:01,870
But again you can call this variable whatever you want.

148
00:11:02,350 --> 00:11:06,700
Let's see how you create lambda expression for grabbing the first character in a string.

149
00:11:07,090 --> 00:11:13,020
You would say lambda the string and then return the first element in that string.

150
00:11:13,090 --> 00:11:18,370
So that would be a way of growing the first character in a string if you want to reverse a string you

151
00:11:18,370 --> 00:11:25,210
could do a say lambda take in the string and using slicing notation that we discussed earlier you could

152
00:11:25,210 --> 00:11:26,310
do something like that.

153
00:11:26,310 --> 00:11:31,420
That reverses a string and you can even pass multiple arguments into a lambda expression.

154
00:11:31,420 --> 00:11:37,000
Again you can keep in mind that not every single function can be translated into lambda expression nor

155
00:11:37,000 --> 00:11:41,580
should you try to redefine every single function as a lamb expression.

156
00:11:41,800 --> 00:11:47,260
If you ever find yourself having difficulty transforming something into a lambda expression just go

157
00:11:47,260 --> 00:11:49,220
ahead and use the function format.

158
00:11:49,390 --> 00:11:55,300
It's really almost always just as efficient to create the full function instead of trying to boggle

159
00:11:55,300 --> 00:11:58,840
your mind getting the land expression to work.

160
00:11:58,960 --> 00:12:05,160
But as an example of a land expression that takes in two variables you could say lambda x com a y.

161
00:12:05,200 --> 00:12:07,280
So those are the two parameters it takes in.

162
00:12:07,390 --> 00:12:13,600
And then you could say X plus Y and that would be an example of a land expression that takes in more

163
00:12:13,600 --> 00:12:14,610
than one argument.

164
00:12:16,310 --> 00:12:21,500
And that's more useful for other libraries that you may be working with outside of the built in libraries

165
00:12:21,500 --> 00:12:23,050
for Python.

166
00:12:23,060 --> 00:12:27,150
All right that's it for land expression's map and filter functions.

167
00:12:27,320 --> 00:12:28,820
We'll see you at the next lesson.

