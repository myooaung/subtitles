WEBVTT
1

00:00:00.840 --> 00:00:05.550

Welcomer crew it's time for you to begin your first lesson by starting off with the basics.



2

00:00:05.610 --> 00:00:10.440

While these ideas may seem simple they're fundamental enough though we should quickly go over them before



3

00:00:10.440 --> 00:00:12.550

tackling more complex topics.



4

00:00:12.570 --> 00:00:16.230

We'll begin by discussing the very basics of working with numbers in Python.



5

00:00:16.500 --> 00:00:22.050

That should be pretty straightforward to start off numbers and Python have two main forms.



6

00:00:22.210 --> 00:00:27.790

It's either integers those are whole numbers such as one two three one hundred two hundred etc..



7

00:00:27.940 --> 00:00:29.610

Or floating point numbers.



8

00:00:29.680 --> 00:00:33.730

Those are numbers with decimal points such as 4.3 5.6.



9

00:00:33.730 --> 00:00:35.070

You get the idea.



10

00:00:35.110 --> 00:00:38.210

Python can perform basic math operations easily.



11

00:00:38.230 --> 00:00:42.610

Let's begin your training by opening up the Jupiter notebook and discussing these ideas further.



12

00:00:45.910 --> 00:00:49.840

As we just mentioned there are two main types of numbers that is integers.



13

00:00:49.840 --> 00:00:51.390

Number those are whole numbers.



14

00:00:51.430 --> 00:00:55.570

So if I have 100 or 10 or 1 Those are all integers.



15

00:00:55.690 --> 00:01:00.660

You can easily check the type of an object using the type function t y p e.



16

00:01:00.910 --> 00:01:04.300

Open and close parentheses passen the object you want to check.



17

00:01:04.300 --> 00:01:10.240

In this case I'll pass and 100 that we were on shift enter and I can say how i n t indicating an integer



18

00:01:10.330 --> 00:01:11.170

type.



19

00:01:11.170 --> 00:01:13.940

Let's try passing in ten point two.



20

00:01:14.230 --> 00:01:15.630

That's a floating point number.



21

00:01:15.670 --> 00:01:18.090

So we get back to type float.



22

00:01:18.340 --> 00:01:21.860

Something to notice though is if I passen type.



23

00:01:21.850 --> 00:01:23.690

One hundred point zero.



24

00:01:24.010 --> 00:01:26.760

That's also a floating point number.



25

00:01:27.100 --> 00:01:33.200

And also notice that if I type in 100 Dot I don't actually need to indicate a zero there.



26

00:01:33.430 --> 00:01:39.160

For Python to recognize that this is a floating point number so one hundred point zero and 100 points



27

00:01:39.220 --> 00:01:42.280

or 100 dot those are both floating point numbers.



28

00:01:42.460 --> 00:01:45.310

Integers can't have any decimal points.



29

00:01:45.310 --> 00:01:49.950

Now you may have expected Python that could perform basic arithmetic quite easily.



30

00:01:49.960 --> 00:01:55.540

There is addition which you can easily do with just a plus sign one plus one run shift center and you



31

00:01:55.540 --> 00:01:57.010

get back the result too.



32

00:01:57.100 --> 00:01:58.210

You can do subtraction.



33

00:01:58.210 --> 00:02:01.170

So one hundred minus one gets you ninety nine.



34

00:02:01.180 --> 00:02:02.020

That's just the dash.



35

00:02:02.050 --> 00:02:04.490

Multiplication is if an asterisk.



36

00:02:04.510 --> 00:02:13.250

So you say too strict to that's multiplication division is a simple forward slash three divided by two.



37

00:02:13.390 --> 00:02:14.600

That's 1.5.



38

00:02:14.800 --> 00:02:18.070

Note here that division always returns floats.



39

00:02:18.070 --> 00:02:21.930

So even when we say 1 divided by 1 that is equal to 1.



40

00:02:21.940 --> 00:02:28.230

If you ever perform division in python that's going to return back a float point zero if you want to



41

00:02:28.230 --> 00:02:28.530

do.



42

00:02:28.530 --> 00:02:30.130

Powers are exponents.



43

00:02:30.180 --> 00:02:36.810

That's two asterisks in a row to Asterix Actrix 3 is 2 to the power of three.



44

00:02:37.080 --> 00:02:39.660

And you actually don't need the spacing there.



45

00:02:39.660 --> 00:02:42.550

It's up to you stylistically you can't perform that.



46

00:02:42.810 --> 00:02:50.070

And if you want to you could also do things like square roots so you could do for Asterix to the power



47

00:02:50.070 --> 00:02:51.180

of one half.



48

00:02:51.180 --> 00:02:55.320

Mathematically that's actually the same thing as taking the square root of 4.



49

00:02:55.320 --> 00:02:58.020

Now we'll discuss more math operations later on.



50

00:02:58.020 --> 00:03:04.370

In fact Python actually has an entire math library for more complex feature of mathematics.



51

00:03:04.440 --> 00:03:09.330

Now that we understand the basics arithmetic Let's finally discuss order of operations.



52

00:03:09.330 --> 00:03:13.990

If you ever need to indicate order of operations you can use parentheses as I've done here.



53

00:03:14.100 --> 00:03:17.340

So let's dive into this example a little further.



54

00:03:17.340 --> 00:03:24.000

Imagine that had one plus two times 1000 plus one.



55

00:03:24.000 --> 00:03:25.970

Well what do you expect the result to be.



56

00:03:26.160 --> 00:03:31.440

In this case it's going to be 2002 because the multiplication is going to happen first due to order



57

00:03:31.440 --> 00:03:35.130

of operations and then we'll add in one on both ends.



58

00:03:35.130 --> 00:03:40.440

But let's imagine you wanted one plus two to happen first and then one thousand plus one Tapin and then



59

00:03:40.440 --> 00:03:42.920

you wanted those two results to be multiplied.



60

00:03:42.930 --> 00:03:46.180

Well you can use parentheses to indicate order of operations.



61

00:03:46.530 --> 00:03:53.090

One plus two multiplied by one thousand plus one.



62

00:03:53.120 --> 00:03:59.130

And now when I run this you can see the result is three thousand three or three times 1001.



63

00:03:59.300 --> 00:04:02.350

Let's now discuss the variable assignments.



64

00:04:02.360 --> 00:04:08.420

You can assign variable names in order to keep track of objects in either your script or your notebook



65

00:04:08.510 --> 00:04:11.150

or whatever development environment you're using.



66

00:04:11.180 --> 00:04:16.070

We'll start off with a simple example will say a is equal to two.



67

00:04:16.280 --> 00:04:19.900

And now I've assigned to the variable a.



68

00:04:20.060 --> 00:04:22.130

So if I check the type of a.



69

00:04:22.520 --> 00:04:23.770

It brings back an integer.



70

00:04:23.780 --> 00:04:30.860

Since a is 2 and then I can do something like a plus 3 and if I run that I get back 5 because two plus



71

00:04:30.860 --> 00:04:33.070

three is five.



72

00:04:33.080 --> 00:04:39.450

I can also do another assignment such as B is equal to 3 and then interact with variables such as a



73

00:04:39.450 --> 00:04:47.350

plus b important to note here is that I can do a re-assignment so I can say a is equal to 100.



74

00:04:47.580 --> 00:04:55.230

And now if I say just ask for a return back it's no longer two but now it's 100 and if I say a plus



75

00:04:55.230 --> 00:04:58.830

b Now I get back 103.



76

00:04:58.940 --> 00:05:02.140

Now you can also reassign the same variable.



77

00:05:02.150 --> 00:05:04.670

So what does this actually look like.



78

00:05:04.670 --> 00:05:12.920

If I take a look at a rumor that is 100 I can do a re-assignment referencing the same variable.



79

00:05:12.920 --> 00:05:17.400

So now I'm going to indicate that a is equal to a plus a.



80

00:05:17.570 --> 00:05:23.950

Since a is currently one hundred I should expect the result of a to be reassigned to 200.



81

00:05:23.990 --> 00:05:27.140

Meaning if I run this and I ask for a back.



82

00:05:27.140 --> 00:05:29.050

It is now 200.



83

00:05:29.090 --> 00:05:31.910

If I run this cell more than one time.



84

00:05:31.910 --> 00:05:35.410

So notice my in operator it says number 25.



85

00:05:35.570 --> 00:05:37.070

If I were to run this again.



86

00:05:37.190 --> 00:05:43.840

So now it's 27 and then ask for a AY's now 400 because it's 200 plus 200.



87

00:05:44.030 --> 00:05:48.560

And every time you run this you're going to keep adding onto that re-assignment.



88

00:05:48.560 --> 00:05:52.250

So a notebook settings you want to be careful and try to organize your code.



89

00:05:52.370 --> 00:05:55.790

That cell should be run in order from top down.



90

00:05:55.790 --> 00:06:00.560

If you're running a PI script you don't have to worry about this because you'll basically be running



91

00:06:00.560 --> 00:06:05.290

your entire script every time you run your PI script at your command line.



92

00:06:05.300 --> 00:06:12.870

Finally let's work through a simple example of variable assignments We'll start off by creating a message



93

00:06:13.470 --> 00:06:21.130

and let's say our message is the sequence 1 1 1 or the number 111 then we'll create another variable



94

00:06:21.520 --> 00:06:23.520

called hash code.



95

00:06:23.720 --> 00:06:28.990

And notice here what's happening with the word hash hash is being highlighted green.



96

00:06:29.210 --> 00:06:35.060

If you ever see a variable name being highlighted that indicates that it's actually a special keyword



97

00:06:35.300 --> 00:06:40.280

that's built into Python so you'll probably want to choose a different name.



98

00:06:40.310 --> 00:06:45.120

So if you start doing things like list or as TR.



99

00:06:45.140 --> 00:06:47.360

Notice how they're being especially highlighted.



100

00:06:47.360 --> 00:06:53.200

That means those are already pre-built in keywords in Python and you should avoid reassigning those.



101

00:06:53.210 --> 00:07:00.530

So instead of just saying hash I'm going to say underscore code and this use of underscore to separate



102

00:07:00.830 --> 00:07:06.620

words in your variable names is known as snake casing or snake case.



103

00:07:06.620 --> 00:07:13.370

There's also camel case where you can do something like hash and then the next word has a capital letter



104

00:07:13.790 --> 00:07:15.500

for variable names in Python.



105

00:07:15.590 --> 00:07:20.310

Try to use snake casing that is separating the words out with underscores.



106

00:07:20.450 --> 00:07:26.480

Later on when we learn about more complex topics such as object oriented programming we'll see that



107

00:07:26.580 --> 00:07:33.410

there is a given convention for naming and Cambell casing and snake casing Havner particular moments



108

00:07:33.650 --> 00:07:34.990

right now for variable names.



109

00:07:35.060 --> 00:07:37.050

Try to keep it with a snake case.



110

00:07:37.070 --> 00:07:40.580

That is the use of those underscores the separate words.



111

00:07:40.700 --> 00:07:48.820

So I will say my hash code is one two three four five and let's say I want to create a secret message



112

00:07:48.850 --> 00:07:52.100

for another agent out in the field to discover.



113

00:07:52.520 --> 00:08:00.780

Well I will say secret message is going to be equal to my message multiplied by my hash code.



114

00:08:01.660 --> 00:08:09.340

And then I can send my secret message and I can use tab to autocomplete this I can send that secret



115

00:08:09.340 --> 00:08:16.820

message out to the agent and if they know the hash code to get back the real message we can say real



116

00:08:16.820 --> 00:08:19.720

message is the secret message.



117

00:08:19.730 --> 00:08:29.140

Notice my tab auto completion divided by the hash code that they knew and then they can see that the



118

00:08:29.140 --> 00:08:32.000

real message was like we said 1 1.



119

00:08:32.020 --> 00:08:39.030

Now again notice that whenever you perform division your number gets converted to a floating point number.



120

00:08:39.310 --> 00:08:45.970

OK that was actually a very basic example of something called encryption or you try to encrypt an original



121

00:08:45.970 --> 00:08:49.680

message using some sort of secret key.



122

00:08:49.780 --> 00:08:52.780

Later on we'll learn about much better ways of doing this.



123

00:08:52.780 --> 00:08:57.560

This is just a very simple example of variable assignment OK.



124

00:08:57.660 --> 00:08:58.830

Excellent work recruit.



125

00:08:58.860 --> 00:09:01.900

It's time to move on to other basic Python data types.



