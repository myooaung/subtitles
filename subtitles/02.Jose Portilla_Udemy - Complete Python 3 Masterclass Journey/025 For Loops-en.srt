1
00:00:00,620 --> 00:00:01,290
Welcome back.

2
00:00:01,310 --> 00:00:07,680
It's time to learn about four loops many objects in Python are what we call iterable.

3
00:00:07,720 --> 00:00:10,600
That means we can iterate over every element in the object.

4
00:00:10,600 --> 00:00:15,450
For example iterating over every elements in a list or every character in a string.

5
00:00:15,730 --> 00:00:16,750
We can use to say.

6
00:00:16,840 --> 00:00:22,230
Along with four loops in order to execute a block of code for every iteration.

7
00:00:22,400 --> 00:00:24,230
For example we can say we have.

8
00:00:24,230 --> 00:00:27,770
My list is equal to a list of 3 integers 1 2 and 3.

9
00:00:27,980 --> 00:00:34,010
And the for loop will then say for item in my list colon execute some block code such as printing out

10
00:00:34,100 --> 00:00:35,750
every item in that list.

11
00:00:36,840 --> 00:00:39,660
Notice how he created a temporary variable name called item.

12
00:00:39,660 --> 00:00:45,180
If you go back to this example we can see here in white we have item this variable name is actually

13
00:00:45,180 --> 00:00:48,290
completely arbitrary and it's up to you to decide.

14
00:00:48,330 --> 00:00:52,560
Let's go ahead and explore some more examples of four loops with different object types.

15
00:00:59,230 --> 00:01:01,930
Let's begin by recreating that example we just saw.

16
00:01:01,950 --> 00:01:05,400
We'll create a list of four items here.

17
00:01:06,640 --> 00:01:08,350
And then we're going to iterate through it.

18
00:01:08,380 --> 00:01:14,860
We will see used keyword for and then we can make up some variable names such as and U-M them and then

19
00:01:14,860 --> 00:01:19,150
we use a keyword in and then whatever the variable or iterable object is.

20
00:01:19,150 --> 00:01:26,170
In this case my list colon and then we have the block of code execute for every single item or number

21
00:01:26,170 --> 00:01:27,090
in that list.

22
00:01:27,190 --> 00:01:32,080
So we can say prints numb and then we can see here one two three four.

23
00:01:32,110 --> 00:01:34,080
It's printed every number in that list.

24
00:01:34,240 --> 00:01:39,520
But keep in mind as a reminder this variable name is completely up to you so we can say something like

25
00:01:40,000 --> 00:01:46,540
made up and I can replace this with made up and I can see I get the same result.

26
00:01:46,540 --> 00:01:50,680
So we could just put in a bunch of words here and as long as they match up.

27
00:01:50,680 --> 00:01:53,050
So copy and paste that in here.

28
00:01:53,050 --> 00:01:56,500
Notice if I run this again I get the exact same results.

29
00:01:57,950 --> 00:02:00,680
Because you can choose whatever variable name you want.

30
00:02:00,710 --> 00:02:04,940
You should always try to choose something that's related to the actual variable here and using numbers

31
00:02:04,940 --> 00:02:09,860
so I might as well call my variable and U-M short for numbers.

32
00:02:09,860 --> 00:02:11,610
And here again and get the same results.

33
00:02:11,660 --> 00:02:17,750
Now a really common question that recruit's often have is how can we print's all of this out in a single

34
00:02:17,750 --> 00:02:18,600
line.

35
00:02:18,620 --> 00:02:22,880
Will the prince function actually has an extra parameter he can provide which is.

36
00:02:22,910 --> 00:02:30,260
And then you can say at the end equal to a space and then run this and instead of ending with a new

37
00:02:30,260 --> 00:02:33,350
line it will end up with a space between everything.

38
00:02:33,350 --> 00:02:36,450
So here we have everything printed out in one line.

39
00:02:36,690 --> 00:02:44,390
I also know that even if I say Fortnum in my list I don't actually have to do anything with this number

40
00:02:44,390 --> 00:02:45,320
in that list.

41
00:02:45,530 --> 00:02:53,130
Previously if we take a look back at our original example I was printing out every number in that list.

42
00:02:53,160 --> 00:02:59,090
I can just do something for every number in that list such as print out hello and then I will see Hello.

43
00:02:59,090 --> 00:03:00,550
Printed out four times.

44
00:03:00,570 --> 00:03:03,990
I technically don't really need to use this variable in the list.

45
00:03:04,020 --> 00:03:07,590
If I do want to use it then I can just reference it inside of my FOR loop.

46
00:03:08,240 --> 00:03:10,060
So it's a for loop with a list.

47
00:03:10,080 --> 00:03:14,500
It works really Similarly with a string except instead of every element in a list.

48
00:03:14,520 --> 00:03:20,180
We're iterating through every character in a string so I can say something like four letter in.

49
00:03:20,460 --> 00:03:30,010
This is a string Prince letter and here I can see I'm printing out every single character and that includes

50
00:03:30,010 --> 00:03:34,170
the spaces as well as any sort of punctuation I have here.

51
00:03:34,180 --> 00:03:35,150
This is a string.

52
00:03:35,200 --> 00:03:40,320
I'm printing out every single character so I can iterate over this and again just to make it very clear.

53
00:03:40,450 --> 00:03:43,040
I don't technically need to use that temporary variable.

54
00:03:43,060 --> 00:03:44,610
I could just say print hello.

55
00:03:44,770 --> 00:03:47,020
And then a for every single character in the string.

56
00:03:47,080 --> 00:03:49,610
It's going to print out Hello hello hello.

57
00:03:49,720 --> 00:03:51,490
So those are for loops with strings.

58
00:03:51,670 --> 00:04:01,120
We can also use them with couples so I can say TUPE or terp is equal to one two three four and this

59
00:04:01,120 --> 00:04:06,380
will pretty much work exactly like a list for and in top prints.

60
00:04:06,570 --> 00:04:09,350
And then I can see one two three four.

61
00:04:09,580 --> 00:04:15,280
Now something that's a little bit unique in concern of temples or tuples and for loops is the fact that

62
00:04:15,280 --> 00:04:16,710
we can use tuple in packing.

63
00:04:16,750 --> 00:04:28,150
So I'm going to create a list of tuples So we will say list of tuples or Toups and then say one two

64
00:04:28,930 --> 00:04:36,970
three four comma five WIPs five six seven eight.

65
00:04:37,110 --> 00:04:39,630
And then finally nine ten.

66
00:04:39,660 --> 00:04:42,420
So what I have here I have a list.

67
00:04:42,420 --> 00:04:48,070
So notice the square brackets and then inside of this list I have pairs of tuples.

68
00:04:48,210 --> 00:04:57,260
So what I can actually do is say for item in my list of Toops prints out the item.

69
00:04:57,260 --> 00:05:01,460
So I would expect to get each of these tuples printed out in Python.

70
00:05:01,460 --> 00:05:03,650
I can use something called tuple and packing.

71
00:05:03,710 --> 00:05:07,680
And this really only works when you have an iterable list of tuples.

72
00:05:07,850 --> 00:05:14,110
But I can instead of just saying a single item formatted as if there were tuples there so I can say

73
00:05:15,280 --> 00:05:24,040
Item 1 comma item 2 and then here I will actually print out item 1 that I will print out.

74
00:05:24,070 --> 00:05:27,670
Item 2 and then I will print a new line.

75
00:05:29,460 --> 00:05:34,060
And then notice what happens here I get one two three four five six seven eight.

76
00:05:34,230 --> 00:05:40,530
So you can use this sort of formatting when you know that the iterable object is a list of tuples and

77
00:05:40,800 --> 00:05:46,620
lots of built in functions as well as lots of outside libraries of Python tend to return results in

78
00:05:46,620 --> 00:05:51,980
a list of tuple format which is why you'll often see this sort of tuple and packing the final no.

79
00:05:51,990 --> 00:05:56,850
I want to make here in regards to tuple and packing is that it actually doesn't require the use of parentheses

80
00:05:56,850 --> 00:05:57,400
here.

81
00:05:57,540 --> 00:06:00,390
You could just do something like this for item 1 comma.

82
00:06:00,390 --> 00:06:06,900
Item two enlisted troops run this and you get the exact same thing and recall that we can call this

83
00:06:06,900 --> 00:06:07,560
whatever we want.

84
00:06:07,560 --> 00:06:15,580
We can say and one and two and we could also just print out and one and not even worry about end to

85
00:06:15,950 --> 00:06:19,410
end here we can say all the odd numbers 1 3 5 7 9.

86
00:06:19,410 --> 00:06:25,890
So if you see this sort of syntax it's just too blunt packing meaning this is a list of tuples and you're

87
00:06:25,900 --> 00:06:31,670
unpacking them so you can deal with the actual elements inside those tuples individually.

88
00:06:31,670 --> 00:06:34,660
Let's go ahead to discuss for loops of dictionaries to do that.

89
00:06:34,680 --> 00:06:45,420
We'll create a simple dictionary will say de key of a value of one key of B value of two and then say

90
00:06:45,480 --> 00:06:46,030
oops.

91
00:06:47,230 --> 00:06:51,400
A key of C has a value of 3.

92
00:06:51,500 --> 00:06:57,860
So there's our simple dictionary if we say for item in dictionary.

93
00:06:58,010 --> 00:07:02,960
Andy excuse me print the item.

94
00:07:02,960 --> 00:07:08,630
Notice what happens I only get back the keys and there's a really important thing to remember here is

95
00:07:08,630 --> 00:07:14,780
that dictionaries do not retain any order so you can't expect this to print out the keys in any particular

96
00:07:14,780 --> 00:07:16,820
order or dictionary is really small here.

97
00:07:16,820 --> 00:07:20,700
So we see that it's actually printing them out in the same order that we find it in.

98
00:07:20,750 --> 00:07:25,150
But in general this is not going to retain any sort of order as we discussed.

99
00:07:25,190 --> 00:07:28,970
If you want order you're going to need a list or a tuple.

100
00:07:28,970 --> 00:07:31,070
So we can see here it's printing out the keys.

101
00:07:31,190 --> 00:07:37,940
If we wanted to specify in particular we only want the keys we could also say keys and this would be

102
00:07:37,940 --> 00:07:45,050
the exact same result if we actually wanted the items we could say items.

103
00:07:45,530 --> 00:07:46,760
And then I can get the tuples.

104
00:07:46,760 --> 00:07:51,260
So as we just mentioned we have this sort of tuple and packing situation meaning it could do something

105
00:07:51,260 --> 00:08:03,280
like key value and print out key and print out value and get A1 B to C 3.

106
00:08:03,330 --> 00:08:08,670
So that's a really common example of tuple and packing in other common way you see people iterating

107
00:08:08,670 --> 00:08:09,400
with four loops.

108
00:08:09,420 --> 00:08:11,420
A dictionary is something like this.

109
00:08:11,580 --> 00:08:18,010
They'll say for K in the Remember keys were the default iteration of a dictionary.

110
00:08:18,050 --> 00:08:22,400
They can print out d of k.

111
00:08:22,860 --> 00:08:24,700
Oops forgot to print

112
00:08:27,470 --> 00:08:31,370
and then we will actually see the key values themselves.

113
00:08:31,370 --> 00:08:36,950
Now going through a for loop in a dictionary always remember that you're not going to get any sort of

114
00:08:36,950 --> 00:08:39,010
particular order.

115
00:08:39,020 --> 00:08:42,390
Finally I want to mention the continued keyword.

116
00:08:42,450 --> 00:08:47,790
So the continue keyword can be a bit tricky to see its usefulness but it allows you to continue with

117
00:08:47,790 --> 00:08:53,100
the top level loop and it's essentially the opposite of the break keyword we saw when discussing wild

118
00:08:53,100 --> 00:08:57,840
loops and it usually takes some time when you're beginning before you realize a good situation to use

119
00:08:57,840 --> 00:08:58,300
it in.

120
00:08:58,470 --> 00:09:01,440
But let's discuss a very simple example.

121
00:09:01,440 --> 00:09:10,810
I will say four letter in code Prince letter.

122
00:09:11,080 --> 00:09:14,320
So here I am printing out c o d e.

123
00:09:14,650 --> 00:09:19,240
Let's say I wanted to not print out the letter D.

124
00:09:19,480 --> 00:09:29,720
I could say if a letter is equal to the then just continue and that's the key word here.

125
00:09:29,720 --> 00:09:32,800
Continue means just go along and don't do anything.

126
00:09:32,990 --> 00:09:37,600
So it allows you to continue with the toplevel loop without actually executing.

127
00:09:37,610 --> 00:09:42,830
So then when I run this notice it says if the letter is equal to d just continue and that's going to

128
00:09:42,830 --> 00:09:47,900
basically skip back and come back here to the next letter which happens to be e and it continues on

129
00:09:47,900 --> 00:09:51,010
printing that letter when you're beginning programming in Python.

130
00:09:51,020 --> 00:09:55,760
You're really not going to use the continue keyword that often but just keep in mind it's there in case

131
00:09:55,760 --> 00:09:58,490
you ever find yourself needing it in the future.

132
00:09:58,490 --> 00:09:59,980
That's the basics of for loops.

133
00:09:59,990 --> 00:10:01,490
Again you just say for.

134
00:10:01,700 --> 00:10:06,890
You choose what of temporary variable name you want in and then whatever the object you're iterating

135
00:10:06,980 --> 00:10:11,200
and you'll perform this block of code for every iteration.

136
00:10:11,220 --> 00:10:12,470
I'll see you at the next lesson recruit.

