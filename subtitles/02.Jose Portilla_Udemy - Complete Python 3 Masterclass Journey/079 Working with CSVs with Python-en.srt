1
00:00:01,430 --> 00:00:02,500
Welcome back agent.

2
00:00:02,590 --> 00:00:08,400
Let's discuss how to work with CSB files since the orange mission left you with a c a c file and some

3
00:00:08,400 --> 00:00:09,380
instructions.

4
00:00:09,420 --> 00:00:15,790
We can actually learn how to use Python's built in CXXVI module in order to work with that file.

5
00:00:15,850 --> 00:00:19,170
Cxxvi stands for comma separated variables.

6
00:00:19,170 --> 00:00:24,390
This basically implies that the information the file has columns and rows in this sort of format where

7
00:00:24,390 --> 00:00:31,060
you have columns in each column is separated by a comma and then you have rows following that same format.

8
00:00:32,410 --> 00:00:38,920
However keep in mind that many delimiters or separators can be used such as semi-colons tabs or even

9
00:00:38,920 --> 00:00:44,830
pipe operator symbols and that basically just indicates that you don't need to have strictly commas.

10
00:00:44,830 --> 00:00:50,610
Sometimes people use these other types of separators and another word for that is a delimiter.

11
00:00:50,710 --> 00:00:55,690
CSP files are commonly associate of Excel but Python has a built in library that can work with them

12
00:00:55,690 --> 00:00:56,650
as well.

13
00:00:56,650 --> 00:01:02,340
Let's explore this further.

14
00:01:02,490 --> 00:01:06,430
The first thing we're going to do is check our notebook location.

15
00:01:06,480 --> 00:01:13,090
We want to make sure that we're in the same location as our yellow machine file or folder.

16
00:01:13,170 --> 00:01:18,600
So make sure that when you run PWT in a cell it reports back that you're in this yellow mission working

17
00:01:18,600 --> 00:01:19,920
of CACP files.

18
00:01:19,920 --> 00:01:23,880
That way you can open the example that see every file in the same way we are.

19
00:01:23,970 --> 00:01:25,890
If you're located somewhere else in your computer.

20
00:01:25,920 --> 00:01:32,060
Just make sure you passen the entire file path to your example Dotsie s v file.

21
00:01:32,070 --> 00:01:35,260
Ok this is just reading in C files in order to do that.

22
00:01:35,340 --> 00:01:46,660
We need to import CXXVI and then we open the actual C every file will say open exampled C S V and then

23
00:01:46,660 --> 00:01:53,550
you should be able to see that this data is a textile wrapper and the name example CACP mode are now

24
00:01:54,100 --> 00:01:59,920
the next steps would be to use the C S V dot reader function on the data and then try to create a list

25
00:01:59,980 --> 00:02:01,300
out of that data.

26
00:02:01,300 --> 00:02:07,210
However sometimes that may induce an error because maybe you have some different types of symbols that

27
00:02:07,210 --> 00:02:14,890
Python gets confused by for instance the symbol in an email address like at gmail dot com may confuse

28
00:02:14,890 --> 00:02:18,250
Python and I'll show you an example of what I mean by that.

29
00:02:18,730 --> 00:02:27,540
So let's say you opened up your CSP file and you're going to say CSP data is equal to CSFB.

30
00:02:27,580 --> 00:02:38,500
Reader data and then you're going to try to make a list out of this data see the data you'll get a Unicode

31
00:02:38,590 --> 00:02:39,580
decode error.

32
00:02:39,850 --> 00:02:45,970
And this is a very common error to get when trying to open either text files or CSP files and it often

33
00:02:45,970 --> 00:02:46,930
looks something like this.

34
00:02:46,930 --> 00:02:50,920
Kodak can't decode bytes and it gives you some sort of weird code here.

35
00:02:50,980 --> 00:02:54,240
And then in position and then some sort of position.

36
00:02:54,250 --> 00:03:00,070
Basically what that means is there's some character where Python doesn't know how to interpret it without

37
00:03:00,430 --> 00:03:02,150
indicating the encoding.

38
00:03:02,350 --> 00:03:06,250
And this could be anything as simple as an at symbol like in an email.

39
00:03:06,340 --> 00:03:12,940
Or it could be more complex like maybe you're trying to import some sort of Russian text file or some

40
00:03:13,000 --> 00:03:14,860
other language where the alphabet is different.

41
00:03:14,860 --> 00:03:16,810
Maybe it's in Chinese or Japanese.

42
00:03:16,870 --> 00:03:22,970
In that case you may need to provide an encoding parameter for most cases of English text.

43
00:03:23,020 --> 00:03:27,620
You can in code with UTF Dash 8 that show you how to do that.

44
00:03:27,880 --> 00:03:33,160
We're going to say data is equal to open and we're going to again open that same example at c as we

45
00:03:33,160 --> 00:03:40,890
file but this time will add in the encoding parameter and say UTF Dash 8.

46
00:03:40,940 --> 00:03:42,230
So if you ever get this error.

47
00:03:42,290 --> 00:03:45,140
Go ahead and try encoding UTF Dash 8.

48
00:03:45,230 --> 00:03:50,030
If this still fails then you're probably going to want to do a little bit of searching on stack overflow

49
00:03:50,450 --> 00:03:56,510
and give a little more detail about what your actual file looks like because it may have Russian characters

50
00:03:56,510 --> 00:04:02,370
Japanese characters Chinese characters and sometimes this encoding won't work for that.

51
00:04:02,930 --> 00:04:06,690
Then we're going to say CSB data is equal to CSB.

52
00:04:07,160 --> 00:04:16,850
Reader data and then all of this in the same cell we will say data lines is equal to list of CSP data.

53
00:04:17,390 --> 00:04:21,190
And then with the encoding we were able to successfully read in that data.

54
00:04:21,200 --> 00:04:28,450
So let's take a look at what data lines looks like and you notice here it's quite large so you'll get

55
00:04:28,540 --> 00:04:30,730
a lot of output in this.

56
00:04:30,720 --> 00:04:32,840
So let's look at the first couple lines.

57
00:04:34,820 --> 00:04:42,700
By using slice notation and we see here that we have a list of lists and typically in a cxxviii file

58
00:04:42,880 --> 00:04:48,850
the first line of the CSC file is known as a header and that basically just contains the information

59
00:04:48,850 --> 00:04:50,980
about what each column represents.

60
00:04:50,980 --> 00:04:56,110
For example we can see we have an ID column a first name a last name and e-mail gender IP address and

61
00:04:56,110 --> 00:05:03,730
city and keep in mind all this information is fake so let's print this out in a format that looks a

62
00:05:03,730 --> 00:05:06,820
little more in line with what the CC file format looks like.

63
00:05:06,820 --> 00:05:13,670
We can say for line in data lines and we'll just do the first few lines so it will use slice notation

64
00:05:13,670 --> 00:05:14,600
there.

65
00:05:14,720 --> 00:05:22,660
Print out line so if I take a look at this and it can zoom out here just a little bit so we can see

66
00:05:22,660 --> 00:05:24,500
the actual structure.

67
00:05:24,670 --> 00:05:32,380
I see now that data lines is essentially a list of lists where each list indicates after the first one

68
00:05:32,380 --> 00:05:34,710
which is the header the actual rows.

69
00:05:34,720 --> 00:05:42,540
So essentially it's a list of all the rows so I could say more appropriately for row in data lines.

70
00:05:42,550 --> 00:05:44,350
Prints row.

71
00:05:44,620 --> 00:05:46,320
And this is your CSP file.

72
00:05:46,330 --> 00:05:48,520
Now it in Python's memory.

73
00:05:49,420 --> 00:05:52,800
So let's imagine that I only want to grab all the e-mails.

74
00:05:52,810 --> 00:05:54,610
And again these are all fake emails.

75
00:05:54,730 --> 00:05:56,200
What it could do is this.

76
00:05:56,210 --> 00:05:58,220
We zoom back in here.

77
00:05:58,630 --> 00:06:08,670
I could say all e-mails is an empty list and then four line and data lines.

78
00:06:08,730 --> 00:06:11,120
And let's just do one through 15 here.

79
00:06:11,130 --> 00:06:17,530
The reason for that is because I'm going to skip the header so I'm skipping 0 so start at 1 and then

80
00:06:17,530 --> 00:06:26,270
go slice to 15 and say all e-mails appends line.

81
00:06:26,290 --> 00:06:28,570
And then I can say three.

82
00:06:28,630 --> 00:06:35,380
So again let's make this a little clear by calling this row and then saying row here.

83
00:06:35,380 --> 00:06:41,680
So all I'm saying is go through this list of list and grab the elements index 3 which is the e-mail

84
00:06:41,770 --> 00:06:45,160
we go 0 1 2 3.

85
00:06:45,160 --> 00:06:52,570
We can see we have the e-mails there and that's easier to see here on the letter 0 1 2 3 is the e-mail.

86
00:06:52,690 --> 00:06:57,210
So if I run this and then I see all e-mails.

87
00:06:57,490 --> 00:07:02,560
Boom I have all the e-mails for the first couple of rows there and I can do the same thing with full

88
00:07:02,560 --> 00:07:03,060
names.

89
00:07:03,070 --> 00:07:10,560
So if I wanted full names something I could do a save for row and data lines 1 through 15 or have the

90
00:07:10,560 --> 00:07:12,710
first name and last name separate in.

91
00:07:12,780 --> 00:07:13,860
So let's do the following.

92
00:07:13,860 --> 00:07:22,240
Let's say first is equal to row at index position 1 and last to row.

93
00:07:22,400 --> 00:07:23,730
Expedition 2.

94
00:07:24,000 --> 00:07:29,050
And then there full name is equal to.

95
00:07:29,300 --> 00:07:38,790
Well let's just say name is equal to first space concatenated together with last and then we'll say

96
00:07:38,790 --> 00:07:40,260
full names.

97
00:07:40,290 --> 00:07:44,450
A pen name we run that.

98
00:07:44,610 --> 00:07:49,860
And then let's check for names and we get back a list of full names.

99
00:07:49,860 --> 00:07:54,030
So hopefully you get the idea here of how to work with CSC files in Python.

100
00:07:54,030 --> 00:07:56,440
The main idea is that eventually you'll get it.

101
00:07:56,640 --> 00:08:01,350
As a list of all the rows and then you can just do whatever you want with all the control flow you already

102
00:08:01,500 --> 00:08:09,510
understand the CSB module also allows you to quickly either create a new file or append that to an existing

103
00:08:09,510 --> 00:08:10,220
file.

104
00:08:10,470 --> 00:08:12,640
Let's quickly go over how to do that.

105
00:08:12,690 --> 00:08:17,220
The first thing you can do is say file to output.

106
00:08:17,220 --> 00:08:23,730
So basically our new file is equal to open and we're going to make up some CSP names so go ahead and

107
00:08:24,090 --> 00:08:27,640
just make up some new name or whatever you want.

108
00:08:27,860 --> 00:08:36,880
And then we will say with the W and then we'll also indicate that New Line is equal to an empty string.

109
00:08:36,890 --> 00:08:43,280
So notice there is no space there and that's going to allow us to overwrite the default which is the

110
00:08:43,280 --> 00:08:45,030
new line is like this.

111
00:08:45,380 --> 00:08:50,780
So that makes more sense for every file that we just have a blank newline so we don't get confused because

112
00:08:50,780 --> 00:08:56,690
it's not really like a normal text file because we want rows all together no new lines.

113
00:08:56,690 --> 00:09:06,970
So we're going to create that file to output and then say CSP underscore writer is equal to CSFB the

114
00:09:07,050 --> 00:09:11,030
writer instead of that reader passen the file to output variable.

115
00:09:11,160 --> 00:09:14,560
And then this is where we denote our delimiter.

116
00:09:14,790 --> 00:09:19,860
So the delimiter at connectedly be whatever you want but you should try to stick to camos because those

117
00:09:19,860 --> 00:09:22,990
are the most common.

118
00:09:23,200 --> 00:09:30,160
And once your CFC writer is ready to go you can call the right row method off of it meaning off of CSFB

119
00:09:30,160 --> 00:09:33,900
writer call write row.

120
00:09:34,720 --> 00:09:39,560
And this is where you just pasan an example list of what you want the road to look like maybe.

121
00:09:39,600 --> 00:09:49,060
Well the first one let's make it the columns so call 1 column 2 then column 3 and there you go just

122
00:09:49,060 --> 00:09:49,400
wrote that.

123
00:09:49,420 --> 00:09:54,000
Also just a fresh row if you want to do multiple at once.

124
00:09:54,070 --> 00:10:00,610
You can use right rows plural and then this just allows you to pass in a list of lists.

125
00:10:00,790 --> 00:10:06,570
So maybe we want one to three and then four five six.

126
00:10:06,570 --> 00:10:11,790
So if you run that you just wrote column one column to call three then one to three for the next row

127
00:10:11,790 --> 00:10:13,750
and then four five six for the row after that.

128
00:10:13,880 --> 00:10:19,770
When you're writing you can just take the file to output that you created that variable and close it

129
00:10:19,770 --> 00:10:20,150
off.

130
00:10:21,170 --> 00:10:26,870
So keep in mind that creates a brand new file and if you already had a CSP file of this name it would

131
00:10:26,870 --> 00:10:32,290
have completely overwritten it if you wanted to just append to an existing CACP file.

132
00:10:32,390 --> 00:10:34,180
Then you use the a read mode.

133
00:10:34,280 --> 00:10:35,240
So show me how to do that.

134
00:10:35,240 --> 00:10:40,730
We already have this file or here that has the header column one column to column three and then two

135
00:10:40,730 --> 00:10:42,510
rows one two three four five six.

136
00:10:42,620 --> 00:10:46,870
Let's add in the another row that says 7 8 9 to this.

137
00:10:46,890 --> 00:10:54,900
So we open up our existing file which is called make up new CSP and I'm going to open it with the a

138
00:10:55,350 --> 00:10:56,870
mode that is a pen.

139
00:10:56,880 --> 00:11:03,950
So I'm appending new lines to this see we file and I also say new lines have an empty string.

140
00:11:05,010 --> 00:11:12,550
Then once I've done that I can read the find my CXXVI writer as writer on this file.

141
00:11:13,770 --> 00:11:17,460
So C is v the writer on that file whatever we happen to call it.

142
00:11:17,580 --> 00:11:25,610
Last time we happened to call it file to output but now we're calling f and then say CSP writer right.

143
00:11:25,630 --> 00:11:26,650
Arrau.

144
00:11:26,920 --> 00:11:30,230
And here you can just pretty much put whatever you want we'll say 789.

145
00:11:30,940 --> 00:11:34,890
And there we just appended something new to write rule.

146
00:11:34,960 --> 00:11:37,060
And if you're done with it then you can close it.

147
00:11:38,670 --> 00:11:40,580
OK that's really it for the basics.

148
00:11:40,620 --> 00:11:42,960
And that's because espies themselves are pretty basic.

149
00:11:42,960 --> 00:11:49,020
There's really only two mentions I think of the columns or the rows and by getting a list of lists you

150
00:11:49,020 --> 00:11:50,570
already know how to do all of that.

151
00:11:50,970 --> 00:11:54,830
All right let's have a very quick review of CSC module.

152
00:11:54,960 --> 00:12:01,080
So you just open up your CSB file and if necessary if you get a Unicode decode error you open it up

153
00:12:01,080 --> 00:12:08,970
with an encoding try you TFF 8 then by calling the c file or the C module called reader on that data

154
00:12:09,330 --> 00:12:11,320
and then pass it to a list.

155
00:12:11,340 --> 00:12:16,260
And now you have a list of all the rows and you can do whatever you want that using for loops or whatever

156
00:12:16,260 --> 00:12:17,530
method you prefer.

157
00:12:17,760 --> 00:12:22,860
If you want to create a new file go ahead and just open up some make up some new name for us as we file

158
00:12:23,080 --> 00:12:25,850
with W set new line to an empty string.

159
00:12:26,040 --> 00:12:27,510
Create the writer object.

160
00:12:27,510 --> 00:12:32,100
Make sure you know what your delimiter is going to be and then you can write either a single row or

161
00:12:32,100 --> 00:12:33,230
write pleuro rows.

162
00:12:33,300 --> 00:12:36,700
You can close the file if you want to add new information to us.

163
00:12:36,760 --> 00:12:42,720
So as we file it's very much the same thing except you have the mode is equal to a Instead of equal

164
00:12:42,720 --> 00:12:42,990
to.

165
00:12:42,990 --> 00:12:43,440
There'll be two.

