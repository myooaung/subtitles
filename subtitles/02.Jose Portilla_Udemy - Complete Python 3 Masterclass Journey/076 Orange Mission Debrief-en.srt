1
00:00:00,900 --> 00:00:05,850
Excellent work on completing your mission agent Let's quickly go over a de-brief things so others can

2
00:00:05,850 --> 00:00:12,280
see how you are able to accomplish your tasks.

3
00:00:12,280 --> 00:00:19,540
The first thing we needed to do was to unzip the file to do that we can easily just import s h u till

4
00:00:20,500 --> 00:00:23,050
and then call unpack archive function.

5
00:00:23,050 --> 00:00:31,650
From that we will say unpack archive and then put in the actual zip file location.

6
00:00:31,720 --> 00:00:33,620
In this case we'll say Mission orange files.

7
00:00:33,700 --> 00:00:40,210
And then the Unzip me for instructions and let's go ahead and then give it a location to be placed then

8
00:00:40,860 --> 00:00:46,200
we'll say we'll just put it in the extracted

9
00:00:49,360 --> 00:00:54,150
content and then finally we can clarify that it's a zip file.

10
00:00:55,430 --> 00:01:00,490
So if you run this you should now be able to see the extracted content and we can check this by saying.

11
00:01:00,500 --> 00:01:10,020
Import os and then saying OS list directory and you'll see here that if we keep going down we can see

12
00:01:10,110 --> 00:01:15,630
the extracted content that we just created so that directory now exists.

13
00:01:15,630 --> 00:01:16,210
All right.

14
00:01:16,350 --> 00:01:20,010
Let's not check to see what files are in the extracted content.

15
00:01:21,010 --> 00:01:29,470
We're going to say OS that list victory and we'll actually then pass in the extracted content so we

16
00:01:29,470 --> 00:01:32,360
can see what's inside of that.

17
00:01:32,470 --> 00:01:37,070
And here we can see there's five four instructions that text 1 3 and 2.

18
00:01:37,300 --> 00:01:40,440
Let's open this instruction is that text and see what's inside of it.

19
00:01:41,500 --> 00:01:49,110
It will say f open and we're going to pass in the extracted content and then instructions that text

20
00:01:49,320 --> 00:01:51,820
and we can just use tab autocomplete to do this.

21
00:01:51,840 --> 00:01:59,930
Let's read this file and say F dot read lines so we can see everything.

22
00:02:00,040 --> 00:02:00,680
All right.

23
00:02:00,940 --> 00:02:06,040
So it says if you're reading this and let's actually print out all these lines so let's do this again.

24
00:02:06,350 --> 00:02:13,610
Open this file and then say lines and then for line and lines.

25
00:02:14,400 --> 00:02:16,620
Prints line.

26
00:02:16,920 --> 00:02:20,630
So if you're reading this we were able to successfully decipher from the blog post in the Goldblatt's

27
00:02:20,630 --> 00:02:25,420
Web site to find this link which led us to that zip file after unzipping the file.

28
00:02:25,440 --> 00:02:31,050
We had this instruction text file and if you take a look at the other folders there's actually random

29
00:02:31,050 --> 00:02:32,310
text files in them.

30
00:02:32,490 --> 00:02:39,810
So instead of 5 4 1 3 and 2 there are random text files and hidden within these text files are two links

31
00:02:39,900 --> 00:02:44,600
and we need to be able to use regular expressions to find the URL links which lead to the next phase

32
00:02:44,670 --> 00:02:47,820
as you go through every text file programmatically.

33
00:02:48,120 --> 00:02:53,220
One of these links is going to lead to a CSP file and another to a set of instructions for that CSP

34
00:02:53,220 --> 00:02:58,010
file and it tells us that the links are going to be in this form of your URL.

35
00:02:58,110 --> 00:03:04,020
It will be a dry dog Google dot com open and some sort of ID notices how we have alphanumerics So there's

36
00:03:04,020 --> 00:03:10,080
numbers letters and underscores and we have a p.s. and then we also have some sort of Google doc so

37
00:03:10,300 --> 00:03:15,490
the docs thought Google dot com document and then some sort of alphanumerics.

38
00:03:15,540 --> 00:03:17,910
So we have starts with HTP.

39
00:03:17,970 --> 00:03:19,580
And then a series of characters.

40
00:03:19,710 --> 00:03:24,630
So we'll be able to use this information for our regular expressions by realizing that inside of these

41
00:03:24,630 --> 00:03:30,330
files we're looking for something that starts with us then we'll download that CSP file and follow the

42
00:03:30,330 --> 00:03:30,830
instructions.

43
00:03:30,840 --> 00:03:32,580
And the other link for next steps.

44
00:03:32,580 --> 00:03:34,150
So let's see if we can do this.

45
00:03:35,320 --> 00:03:40,510
The first thing you want to do is figure out a regular expression pattern that works for finding the

46
00:03:40,510 --> 00:03:49,480
sort of links something that starts of HTP us so import regular expressions and let's create our test

47
00:03:49,480 --> 00:03:50,830
phrases.

48
00:03:51,610 --> 00:03:54,370
So a test phrase one will be this first link here

49
00:04:00,960 --> 00:04:07,060
and then test phrase to will be the other link.

50
00:04:07,060 --> 00:04:12,920
So we're going to be using these as test strings and then we'll check different patterns against them.

51
00:04:13,180 --> 00:04:20,960
And if we are successfully able to grab and this entire ordeal from the pattern or using the pattern

52
00:04:20,980 --> 00:04:28,580
I should say we'll be able to see that we will be able to grab the pattern within any text file.

53
00:04:28,670 --> 00:04:30,960
Now we realize the pattern does start with age.

54
00:04:31,220 --> 00:04:34,770
So let's check if that works we'll say our.

55
00:04:35,000 --> 00:04:46,580
And we're just looking for H.T. CPS Colin forward slash forward slash So if we say test we'll say our

56
00:04:46,610 --> 00:04:55,210
E find all and we're looking for the pattern inside of the test phrase when you run this command you'll

57
00:04:55,210 --> 00:04:58,090
see that there's basically just HGT.

58
00:04:58,180 --> 00:05:01,040
And none of the actual remaining URLs there.

59
00:05:01,360 --> 00:05:09,130
So we need to add a group of characters to look for after HTC B-S and there's many many ways you could

60
00:05:09,130 --> 00:05:14,830
write a regular expression for this but one way to think about it is just HSDPA us Colin forward slash

61
00:05:14,830 --> 00:05:20,340
forward slash and then just grouped together using these square brackets or braces.

62
00:05:20,500 --> 00:05:26,350
And then if a plus sign were looking for any number one or more of the following say we'll look for

63
00:05:26,350 --> 00:05:28,590
dashes we can see there's a dash right here.

64
00:05:28,750 --> 00:05:31,300
There's also question marks and four slashes.

65
00:05:31,300 --> 00:05:34,950
So we'll say the following question marks forward slashes.

66
00:05:35,020 --> 00:05:43,820
There's also underscores there's equal signs and we can put a period for a wildcard necessary.

67
00:05:43,840 --> 00:05:52,700
And then finally we can say something like backslash W and let's run this now and see if we find it.

68
00:05:52,700 --> 00:05:53,790
So here we go.

69
00:05:53,960 --> 00:05:57,730
If I add a bunch of stuff here basically say look for any combination of these.

70
00:05:57,730 --> 00:06:03,040
After HTP us I see I have now the fool you are l and it matches up here.

71
00:06:03,230 --> 00:06:07,230
Let's try it with test phrase to make sure it also works.

72
00:06:07,400 --> 00:06:11,270
And if we run that we also see that we get back the full URL.

73
00:06:11,600 --> 00:06:12,980
So that's working well.

74
00:06:12,980 --> 00:06:21,650
Now what we need to do is basically go through every single text file and search it for the actual pattern.

75
00:06:21,650 --> 00:06:23,890
So let's make a function we can call.

76
00:06:24,020 --> 00:06:26,890
So we can't call this pattern easily.

77
00:06:27,170 --> 00:06:35,610
We'll create a function called search that takes in a file and the pattern we'll be using here is equal

78
00:06:35,610 --> 00:06:39,080
to what we just wrote a peer.

79
00:06:39,240 --> 00:06:44,210
So say pattern is equal to this and this actually doesn't really need to be a parameter in your search

80
00:06:44,210 --> 00:06:45,180
function.

81
00:06:45,380 --> 00:06:46,610
We'll open the file

82
00:06:50,550 --> 00:06:54,060
open the file will just read the file.

83
00:06:54,130 --> 00:06:59,240
That way we don't accidentally edit it then we will say the text is equal to the read.

84
00:06:59,250 --> 00:07:08,620
So read this as a string and then if our esearch pattern text basically indicating if I have a match

85
00:07:08,650 --> 00:07:09,440
object.

86
00:07:09,580 --> 00:07:12,690
So keep in mind that objects can actually be used as booleans.

87
00:07:13,030 --> 00:07:15,170
So lots of ways you could write up this logic.

88
00:07:15,370 --> 00:07:25,270
You're going to return our search pattern and then text else we'll just return a blank string.

89
00:07:27,010 --> 00:07:29,000
So what this function is going to do.

90
00:07:29,110 --> 00:07:31,140
It's going to accept a file.

91
00:07:31,300 --> 00:07:37,180
It's going to open that file read that file and then it's just going to search for the pattern in that

92
00:07:37,180 --> 00:07:38,240
file sex.

93
00:07:38,260 --> 00:07:41,000
And if it finds one it's going to return the pattern itself.

94
00:07:41,140 --> 00:07:43,000
Basically the result that you are.

95
00:07:43,150 --> 00:07:45,550
If not it'll just return an empty string.

96
00:07:45,550 --> 00:07:51,640
Now we need to do is use OS walk to walk through all the files here because if we come back up here

97
00:07:51,670 --> 00:07:58,270
notice there's one two three four five files and each of those five folders really and each of those

98
00:07:58,270 --> 00:08:02,610
folders contains many random text files that we need to look through.

99
00:08:02,680 --> 00:08:04,020
So we'll do the following.

100
00:08:04,650 --> 00:08:16,560
We'll say import os have my results as an empty list and we'll say for folder sub folders files an OS

101
00:08:16,710 --> 00:08:21,240
walk and I'm going to walk through the extracted content that I have here.

102
00:08:21,260 --> 00:08:24,090
So let's scroll up where we actually extract that.

103
00:08:24,190 --> 00:08:26,680
It's right here at the extracted content.

104
00:08:26,680 --> 00:08:34,800
So we'll just copy this come back down here and say oh just walk through that extract the contents then

105
00:08:34,800 --> 00:08:38,950
for f in files.

106
00:08:39,140 --> 00:08:45,470
I need to define the full path so the full path to that file is going to be equal to the folder it's

107
00:08:45,470 --> 00:08:49,260
in plus time on a Windows computer right now.

108
00:08:49,280 --> 00:08:53,120
Backslash backslash plus F.

109
00:08:53,280 --> 00:08:58,640
So what this is saying is construct the entire file path to that file.

110
00:08:58,650 --> 00:09:02,150
Otherwise you'll get an error when you're trying to open it.

111
00:09:02,290 --> 00:09:10,530
Because what I'm going to do is say my findings are what everyone to call this variable is equal to

112
00:09:10,560 --> 00:09:14,120
search on the full path of that file.

113
00:09:15,840 --> 00:09:20,690
And then I'm going to append my findings.

114
00:09:20,710 --> 00:09:20,980
All right.

115
00:09:20,980 --> 00:09:23,160
So let's break down what we're doing here.

116
00:09:23,380 --> 00:09:28,630
We're using the OS walk function to walk through the extracted content of the zip file.

117
00:09:28,690 --> 00:09:33,170
If you take a look at the extract that content it's just a bunch of random text files.

118
00:09:33,310 --> 00:09:40,900
And if we look through each of these files in order to construct the entire full file path so that we

119
00:09:40,900 --> 00:09:46,030
can open it when we call the open function here we're going to grab the name of the folder we're currently

120
00:09:46,030 --> 00:09:51,880
in then because I'm on a Windows computer and going to add two backslashes here on a Mac or Linux you

121
00:09:51,880 --> 00:09:57,490
just add a single forward slash and then I will add the actual file name that constructs the full path

122
00:09:57,580 --> 00:10:01,380
of the file which is what I'm going to pass into my search function.

123
00:10:01,390 --> 00:10:07,780
Now my search function here is just going to open that file read the text and then do a regular expression

124
00:10:07,780 --> 00:10:08,480
search.

125
00:10:08,710 --> 00:10:17,140
And if the search name is confusing you can say search for pattern and then down here I could just call

126
00:10:17,140 --> 00:10:19,640
this search pattern.

127
00:10:19,670 --> 00:10:21,920
This is going to search for pattern in that full path.

128
00:10:21,940 --> 00:10:25,820
Those are my findings that I'm going to append my findings to the results.

129
00:10:25,840 --> 00:10:26,460
So let's run this.

130
00:10:26,470 --> 00:10:27,590
See if it works.

131
00:10:27,640 --> 00:10:29,170
Looks like it worked.

132
00:10:29,370 --> 00:10:35,450
And I will say for all my results because if we look at the length of results it's going to be 121.

133
00:10:35,470 --> 00:10:37,870
But a lot of these are just empty.

134
00:10:37,870 --> 00:10:40,240
So let's take a look at the first ten.

135
00:10:40,270 --> 00:10:41,900
One of them we have a match object right away.

136
00:10:41,910 --> 00:10:43,900
But others are just empty strings.

137
00:10:43,900 --> 00:10:55,520
So let's actually say for our in results if the R is not equal to an empty string go ahead and Prince

138
00:10:56,540 --> 00:11:02,040
the results so we can say our group because remember if you have a match object which is our Here it's

139
00:11:02,050 --> 00:11:03,380
saving match objects.

140
00:11:03,380 --> 00:11:06,610
You can just group it together to actually ground your l.

141
00:11:06,800 --> 00:11:10,100
So we're going to run this and we see now we have three links here.

142
00:11:10,100 --> 00:11:11,270
So let's check them out.

143
00:11:11,420 --> 00:11:16,340
We'll open each of these and see if we actually find them.

144
00:11:16,350 --> 00:11:22,320
So one of them was not found because it's actually if you take a look at it it's the example link that

145
00:11:22,320 --> 00:11:27,450
was shown here in the instructions which is not an actual functional link but if we take a look at the

146
00:11:27,450 --> 00:11:32,760
other two looks like we have instructions for downloading the CSP file so we can go ahead and read this

147
00:11:32,760 --> 00:11:33,890
for our next mission.

148
00:11:34,050 --> 00:11:39,690
And the other one is the CSB file itself meaning we'll need to learn how to work of files for the next

149
00:11:39,690 --> 00:11:41,010
mission.

150
00:11:41,010 --> 00:11:42,150
Excellent work so far.

151
00:11:42,150 --> 00:11:49,020
Agent Let's quickly have an overview of the entire de-briefing So to begin with you were given this

152
00:11:49,140 --> 00:11:52,690
zip file that you had to unzip once you unzip it.

153
00:11:52,770 --> 00:11:57,740
You were able to realize that there is an instruction text file and if you read the instructions text

154
00:11:57,740 --> 00:12:03,180
file it basically tells you the inside of these other folders or many other text files and inside of

155
00:12:03,180 --> 00:12:09,570
one of those are are your links and you need to find two of them that are in this format a drive link

156
00:12:09,660 --> 00:12:16,040
and a box link you were given the hint that they start with HTP s colon slash slash.

157
00:12:16,080 --> 00:12:19,010
However if you just look for that you'll just fine.

158
00:12:19,470 --> 00:12:23,880
So you can do is use regular expressions to basically indicate that you're looking for anything that

159
00:12:23,880 --> 00:12:25,580
follows HTP as.

160
00:12:25,740 --> 00:12:29,910
One of the tricks they had to realize though was it's not just technically all alphanumerics There's

161
00:12:29,910 --> 00:12:33,970
also question marks and equal signs and dashes to include there.

162
00:12:34,020 --> 00:12:37,720
So we created our pattern and then we had this find all.

163
00:12:37,740 --> 00:12:39,550
So we can actually grab the Arel.

164
00:12:39,780 --> 00:12:45,620
We create a function that when given a file it searches and returns the pattern or the match object

165
00:12:45,690 --> 00:12:48,710
or an empty string the pending of it finds the pattern match up.

166
00:12:48,900 --> 00:12:54,420
Then we used OS walk to walk through all those text files and then if we found something we went ahead

167
00:12:54,510 --> 00:13:01,830
and appended it to our findings something else you could do here is only append if the findings was

168
00:13:01,860 --> 00:13:03,120
non-empty string.

169
00:13:03,270 --> 00:13:04,700
So we could do here is also the following.

170
00:13:04,700 --> 00:13:10,110
Could it say if findings are not equal to an empty string

171
00:13:13,160 --> 00:13:14,970
then append it.

172
00:13:15,020 --> 00:13:18,830
So if I were to run this again and then check the link for my results.

173
00:13:18,830 --> 00:13:25,970
Now I only have three and I can just check my results for the links themselves and then go for match

174
00:13:26,350 --> 00:13:32,130
in results prints match and then group the result itself.

175
00:13:32,130 --> 00:13:34,660
So I can get those actual links and those actual links.

176
00:13:34,800 --> 00:13:38,910
One of them was the instructions link which is not open to anything.

177
00:13:38,970 --> 00:13:44,690
The other ones are the link for the download CXXVI the instructions as well as the CSP file itself.

178
00:13:44,700 --> 00:13:45,310
OK.

179
00:13:45,360 --> 00:13:46,430
Excellent work.

180
00:13:46,440 --> 00:13:48,090
We'll see you later in the field.

