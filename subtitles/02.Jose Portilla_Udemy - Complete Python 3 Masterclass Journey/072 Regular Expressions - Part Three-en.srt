1
00:00:00,870 --> 00:00:05,260
Welcome back agent to finish off our discussion on regular expression syntax.

2
00:00:05,430 --> 00:00:08,130
We're going to discuss just a few more useful methods.

3
00:00:08,160 --> 00:00:10,980
You may find yourself using out in the field.

4
00:00:10,980 --> 00:00:13,770
First off let's discuss the OR operator.

5
00:00:13,950 --> 00:00:17,030
Sometimes you're going to want to search for multiple terms.

6
00:00:17,070 --> 00:00:19,550
You can use the OR operator to do this.

7
00:00:19,680 --> 00:00:25,770
For example if we say our search and then the pattern we want to search for is a string.

8
00:00:26,040 --> 00:00:31,660
For instance just the string cat and we say search the actual string.

9
00:00:31,660 --> 00:00:33,790
The cat is here.

10
00:00:33,790 --> 00:00:41,180
If you run this we get a match for cat but if it says the dog is here as you expect we don't get a match.

11
00:00:41,230 --> 00:00:44,040
What if we wanted to search for cat or dog.

12
00:00:44,260 --> 00:00:46,850
In that case we can use the pipe operator.

13
00:00:47,200 --> 00:00:48,970
So the pipe operator looks like that.

14
00:00:49,090 --> 00:00:55,990
And that stands for or meaning we can search for cat or dog and then we'll get a match if there's a

15
00:00:55,990 --> 00:00:59,670
dog there or if there's a cat there.

16
00:00:59,710 --> 00:01:01,350
So that's the OR operator.

17
00:01:01,570 --> 00:01:07,450
There's also a wild card operator and the wild card acts as a placement that will match any character

18
00:01:07,450 --> 00:01:13,670
place there so please find all to show you an example of the wild card operator.

19
00:01:13,870 --> 00:01:22,240
First I'm just going to search for the string 80 or at and I'll search for the string The Cat In The

20
00:01:22,240 --> 00:01:22,840
Hat.

21
00:01:24,320 --> 00:01:31,450
Sat there Senatus I have three matches of at cat hat and sat.

22
00:01:31,700 --> 00:01:36,860
But what if I actually wanted to grab the actual letter in front of a T.

23
00:01:36,980 --> 00:01:39,310
In that case I can provide a period.

24
00:01:39,470 --> 00:01:46,760
And that stands for a wild card meaning any thing here any wild card there attached to a tee.

25
00:01:46,850 --> 00:01:51,540
And then when I run this I get back cat hat and sat.

26
00:01:51,560 --> 00:01:55,490
So again the period can act as a wild card for you.

27
00:01:55,490 --> 00:01:58,970
So notice how we're really only matching the first three letters.

28
00:01:58,970 --> 00:02:02,920
But if we had something longer for instance such as Splatt.

29
00:02:03,200 --> 00:02:07,450
So the cat in the hat will say went splat.

30
00:02:07,550 --> 00:02:10,210
What I could do is add more wild cards.

31
00:02:10,820 --> 00:02:15,340
So now I have let's say up to three wild cards here.

32
00:02:15,440 --> 00:02:17,250
So the cat in the hat went splat.

33
00:02:17,320 --> 00:02:19,750
So S P L A T.

34
00:02:19,820 --> 00:02:24,860
But keep in mind these wild card characters are also going to grab other letters and other spaces.

35
00:02:24,860 --> 00:02:32,210
So if I were to run this I get back E-Space cat E-Space hat and then the full splat.

36
00:02:32,270 --> 00:02:37,580
And the reason I'm grabbing E-Space is because the wildcard characters are counting the stuff that comes

37
00:02:37,580 --> 00:02:39,410
before this first letter.

38
00:02:39,410 --> 00:02:46,390
So it's also counting this space and this e as well was this space and this e for the cat and the hat.

39
00:02:46,490 --> 00:02:52,160
So keep that in mind as you use wildcard characters the period if you want more control you'll want

40
00:02:52,160 --> 00:02:55,700
to use the character identifier as we discussed earlier.

41
00:02:55,700 --> 00:02:59,010
Again period essentially just a wildcard.

42
00:02:59,030 --> 00:02:59,510
All right.

43
00:02:59,870 --> 00:03:07,640
Let's finally discuss starts with and ends with so we can use this this carrot symbol showing just the

44
00:03:07,640 --> 00:03:08,030
second.

45
00:03:08,030 --> 00:03:11,430
We'll say our Eve find all.

46
00:03:11,420 --> 00:03:19,030
And if I want to find everything that starts with the number what I can do is in the K this carrot symbol

47
00:03:19,030 --> 00:03:24,390
or two power symbol that's just shift number 6 and then type in what I'm looking for.

48
00:03:24,400 --> 00:03:34,090
So what this indicates is that the string I'm searching through starts with a number so say 1 is a number.

49
00:03:34,950 --> 00:03:42,570
And this returns a match for one because the entire text itself starts with the actual digit.

50
00:03:42,570 --> 00:03:48,270
Keep in mind this is only for the entire text not for a number randomly inside of this.

51
00:03:48,270 --> 00:03:55,140
So if I say the two is a number I'm not going to get any matches here because it's only searching if

52
00:03:55,140 --> 00:03:58,140
the entire text itself starts of a number.

53
00:03:58,140 --> 00:04:02,510
So if I say two is the number then I find my match for two.

54
00:04:02,580 --> 00:04:04,660
Similarly I can say ends with.

55
00:04:04,800 --> 00:04:07,500
And the way you do that is sort of a carrot symbol.

56
00:04:07,830 --> 00:04:12,530
You just at the end of this pattern put a dollar sign that says ends with.

57
00:04:12,540 --> 00:04:21,420
So if I say two is number I don't get a match but if I say the number is 2 then I do get a match.

58
00:04:21,420 --> 00:04:29,710
So again dollar sign for ends with And then this card or power to sign for starts with.

59
00:04:29,710 --> 00:04:32,860
And then there's also ways you can use exclusion.

60
00:04:32,860 --> 00:04:39,670
So to exclude characters we again we use this symbol but we use it in conjunction with a set of brackets.

61
00:04:39,670 --> 00:04:44,830
So let's make a couple of our cells here so we don't get confused by the earlier syntax.

62
00:04:44,830 --> 00:04:50,590
I'm going to create a phrase called there are three numbers.

63
00:04:51,420 --> 00:04:55,050
34 is not a number inside 5.

64
00:04:55,080 --> 00:04:58,380
This sentence.

65
00:04:58,520 --> 00:04:58,750
OK.

66
00:04:58,760 --> 00:05:04,550
So here I have a phrase it seems like just random numbers placed inside the sentence.

67
00:05:04,550 --> 00:05:10,840
What I want to do is find or get back everything that isn't a number in this sentence.

68
00:05:10,850 --> 00:05:17,350
So I want to exclude digits or exclude numbers the format for that is the following.

69
00:05:17,600 --> 00:05:25,970
You'll see your pattern is equal to and use inside of square brackets just like you would for a kind

70
00:05:25,970 --> 00:05:27,390
of a python list.

71
00:05:27,590 --> 00:05:29,290
Say whatever you want to exclude.

72
00:05:29,360 --> 00:05:34,000
So in this case I want to exclude digits.

73
00:05:34,200 --> 00:05:35,700
So look at the syntax here.

74
00:05:35,730 --> 00:05:41,760
I have square braces or square brackets this symbol and then backslash lowercase D.

75
00:05:41,790 --> 00:05:48,360
So that just says exclude any digits so anything that matches with this character that the fire and

76
00:05:48,360 --> 00:05:58,410
that if I say find all in and I put a phrase here I'm going to get back a list of every single character

77
00:05:58,470 --> 00:06:00,400
that was not a number.

78
00:06:00,690 --> 00:06:02,300
So I see there are.

79
00:06:02,400 --> 00:06:06,540
And then there's no number there numbers inside this sentence.

80
00:06:06,870 --> 00:06:14,520
And what we can do is if we actually want to get the words back together I can at a plus sign to the

81
00:06:14,520 --> 00:06:20,460
end of this because remember a plus sign if we look back at our quantifiers It just says occurs one

82
00:06:20,490 --> 00:06:23,920
or more times.

83
00:06:23,940 --> 00:06:27,670
So this is a nice way of regular expression to quickly remove things.

84
00:06:27,780 --> 00:06:29,480
So let's run these lines again.

85
00:06:29,820 --> 00:06:37,810
And I can see there are excluded essentially these groups of numbers there are numbers inside this sentence.

86
00:06:37,830 --> 00:06:38,310
All right.

87
00:06:38,310 --> 00:06:41,180
So why would you use this exclusion syntax.

88
00:06:41,190 --> 00:06:45,210
This is a really common way to get rid of punctuation from a sentence.

89
00:06:46,390 --> 00:06:51,340
So we will say test underscore a phrase is equal to.

90
00:06:51,340 --> 00:06:58,410
This is a string exclamation point but it has punctuation period.

91
00:06:58,480 --> 00:07:00,520
How can we remove it.

92
00:07:00,520 --> 00:07:01,940
Question mark.

93
00:07:02,530 --> 00:07:05,320
Well we can do is the following will say r e.

94
00:07:05,900 --> 00:07:06,430
Fine.

95
00:07:06,440 --> 00:07:16,920
All and inside of this we're going to say square brackets this symbol.

96
00:07:16,970 --> 00:07:22,430
And now I can add things I want to exclude So I'm going to just put them in the same order so I can

97
00:07:22,430 --> 00:07:25,360
say I want to exclude an exclamation point.

98
00:07:25,490 --> 00:07:31,630
I want to exclude it period and I want to exclude a question mark and then I can add a plus sign.

99
00:07:31,820 --> 00:07:34,350
So I just want to exclude those wherever they occur.

100
00:07:34,550 --> 00:07:37,870
And then I will say test phrase.

101
00:07:38,450 --> 00:07:39,530
And now I get back the list.

102
00:07:39,530 --> 00:07:40,460
This is a string.

103
00:07:40,460 --> 00:07:44,530
Notice how it's essentially being split on any punctuation but it has punctuation.

104
00:07:44,530 --> 00:07:45,930
How can we remove it.

105
00:07:46,040 --> 00:07:48,490
So there's no longer any punctuation there.

106
00:07:48,950 --> 00:07:55,710
And something else we can do is add a space here so that it will end up removing the spaces.

107
00:07:56,360 --> 00:08:03,410
And then I get back a list of all the words meaning if I say this is clean

108
00:08:08,010 --> 00:08:13,440
the now clean is all these words and I can then join them.

109
00:08:13,440 --> 00:08:21,290
So I will say join clean and I'll join them all with the space itself and then I get back.

110
00:08:21,290 --> 00:08:23,060
This is a string but it has punctuation.

111
00:08:23,060 --> 00:08:24,280
How can we remove it.

112
00:08:24,560 --> 00:08:30,860
So these are some more complex tasks you can use with regular expressions and obviously you can see

113
00:08:30,860 --> 00:08:33,750
here how this quickly can get very hard to read.

114
00:08:33,780 --> 00:08:39,170
So always break down regular expression pattern codes in order to try to help yourself understand what's

115
00:08:39,170 --> 00:08:40,080
actually happening.

116
00:08:42,060 --> 00:08:45,990
We're going to show you two more useful things you can use for regular expressions.

117
00:08:46,050 --> 00:08:50,830
And one of them is actually these brackets are braces here these square brackets.

118
00:08:50,970 --> 00:08:56,340
And that actually is basically just for grouping things together in the context of this carit symbol

119
00:08:56,370 --> 00:08:58,840
essentially says group these things for exclusion.

120
00:08:59,040 --> 00:09:01,910
But you can also use them grouping for inclusion.

121
00:09:01,920 --> 00:09:04,130
So let's show a couple of examples of that.

122
00:09:04,230 --> 00:09:17,730
We're going to create some text that says only find the hyphen dash words in this sentence.

123
00:09:18,290 --> 00:09:27,200
But you do not know how long dash ish they are.

124
00:09:27,200 --> 00:09:28,300
OK so we have this text.

125
00:09:28,310 --> 00:09:33,890
And basically the main point is text is that I have hyphen dash words and then later on I also have

126
00:09:34,370 --> 00:09:40,730
in-dash words but note here how I don't know how many letters are before and how many letters are after

127
00:09:40,730 --> 00:09:41,790
this dash.

128
00:09:41,810 --> 00:09:45,300
So my main task is given this piece of text.

129
00:09:45,440 --> 00:09:50,040
Go ahead and find words to have a hyphen or a dash in the middle of them.

130
00:09:50,060 --> 00:09:51,120
So how would I do that.

131
00:09:51,350 --> 00:09:59,390
Well the general pattern idea would be a group of alphanumeric words or characters dash and then some

132
00:09:59,390 --> 00:10:02,310
other group of alphanumeric characters.

133
00:10:02,320 --> 00:10:07,900
So the way we do that is by filling out the following pattern the pattern is going to be

134
00:10:10,510 --> 00:10:18,680
braces and then inside these braces I will say backslash w and then I'll add a plus sign there.

135
00:10:18,860 --> 00:10:25,020
And what this indicates is just a group of backslash lowercase W..

136
00:10:25,070 --> 00:10:30,520
So remember back from our character in the fires lowercase W. is just an alphanumeric.

137
00:10:30,530 --> 00:10:32,220
So it's basically looking for a group.

138
00:10:32,270 --> 00:10:38,400
Alphanumerics And remember of the plus where it's essentially saying occurs one or more times

139
00:10:41,490 --> 00:10:43,950
so we can check for this pattern.

140
00:10:44,010 --> 00:10:53,060
We'll say are either find all and then we'll pass in the pattern passed in the text and it finds back

141
00:10:53,180 --> 00:10:56,510
any groups of alphanumerics.

142
00:10:56,540 --> 00:11:01,730
Now if I want to find the hyphenated words I'll say a group of alphanumerics that occurs one or more

143
00:11:01,730 --> 00:11:02,770
times.

144
00:11:02,880 --> 00:11:10,970
Dash and then another group of alphanumerics that occurs one or more times and then I can get back the

145
00:11:10,970 --> 00:11:12,460
actual hyphenated words.

146
00:11:13,360 --> 00:11:20,020
Now if we were to remove these actual braces so that it looks like this you would get back the same

147
00:11:20,020 --> 00:11:20,740
results.

148
00:11:20,740 --> 00:11:30,070
However some programmers because this looks hard to read they like two separate groups using this brace

149
00:11:30,070 --> 00:11:34,840
notation and the notation also allows you to kind of combine things together.

150
00:11:35,020 --> 00:11:41,380
So maybe you're looking for a word and then some digits for some reason you can use those braces to

151
00:11:41,380 --> 00:11:43,670
do this sort of grouping syntax.

152
00:11:43,670 --> 00:11:45,080
So just keep that in mind.

153
00:11:45,280 --> 00:11:49,120
Out in the field you see sometimes people using braces like this.

154
00:11:49,120 --> 00:11:55,030
Often you'll see braces used in these sort of exclusions statements but they can also be used for inclusion

155
00:11:56,580 --> 00:12:01,680
and then you can also use parentheses for multiple options so multiple options for matching you can

156
00:12:01,680 --> 00:12:04,220
use print to list out these options.

157
00:12:04,320 --> 00:12:08,300
So I'm going to copy and paste some code here pretty quickly.

158
00:12:09,190 --> 00:12:14,630
Just from the note book that goes along with this video and we say text is equal to.

159
00:12:14,640 --> 00:12:18,240
Hello would you like some catfish text to says hello.

160
00:12:18,240 --> 00:12:21,630
Would you like to take a cat nap and then text 3 says hello.

161
00:12:21,630 --> 00:12:23,990
Have you seen this cat or pillar.

162
00:12:24,000 --> 00:12:29,420
So that is how all of these start with cat and then it says Fish Napp pillar.

163
00:12:29,520 --> 00:12:37,710
So if you wanted to kind of find the different options what you could do is say search cats and then

164
00:12:37,710 --> 00:12:41,320
you can use parentheses to kind of group together multiple options.

165
00:12:41,550 --> 00:12:48,160
So will say fish Napp and then you could say Klaw.

166
00:12:48,260 --> 00:12:49,700
So let's see how this works.

167
00:12:49,910 --> 00:12:51,530
Will say text.

168
00:12:51,680 --> 00:12:54,160
So when I run the finds cat fish.

169
00:12:54,220 --> 00:13:03,220
So that was the first instance of that and then if I say text 2 it says catnap and if I say text 3 it

170
00:13:03,220 --> 00:13:06,740
doesn't find anything because I didn't say basically or pillar.

171
00:13:06,790 --> 00:13:10,060
So I'm going to copy this and put that in there.

172
00:13:10,100 --> 00:13:10,880
Or pillar.

173
00:13:10,920 --> 00:13:13,820
Now if I checked text 3 it finds the match.

174
00:13:14,020 --> 00:13:19,540
So all this is doing is allowing you to basically combine that or statement we saw earlier with other

175
00:13:19,540 --> 00:13:23,690
pieces of text and provide multiple options.

176
00:13:23,700 --> 00:13:29,790
That's the basics of regular expressions and you can check out the documentation page on regular expressions

177
00:13:29,820 --> 00:13:31,890
in the Python official documentation.

178
00:13:31,890 --> 00:13:34,400
It's linked to you at the bottom of the notebook.

179
00:13:34,470 --> 00:13:36,430
For more information or regular expressions.

180
00:13:36,540 --> 00:13:41,550
Again it can definitely very quickly get into some very complex looking syntax that is difficult to

181
00:13:41,550 --> 00:13:46,510
read but always remember just the basics where the main idea is you have some sort of character that

182
00:13:46,530 --> 00:13:51,480
the fire and then attached to it some sort of quantifier if necessary.

183
00:13:51,480 --> 00:13:52,360
All right.

184
00:13:52,500 --> 00:13:54,170
Best of luck out there in the field agent.

185
00:13:54,180 --> 00:13:55,440
I hope this was helpful for you.

