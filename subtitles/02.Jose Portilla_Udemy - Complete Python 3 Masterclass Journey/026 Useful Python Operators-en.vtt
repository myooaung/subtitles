WEBVTT
1

00:00:00.480 --> 00:00:03.300

Welcome back to this discussion on useful operators.



2

00:00:04.250 --> 00:00:08.780

There are many useful operators and built in functions that we haven't really had a chance to discuss



3

00:00:08.780 --> 00:00:09.420

yet.



4

00:00:09.470 --> 00:00:13.940

This lesson is going to serve as that chance to catch up and explain these few concepts that didn't



5

00:00:13.940 --> 00:00:19.070

really fit perfectly into the other previous topics we'll discuss useful operations as well as some



6

00:00:19.070 --> 00:00:20.220

built in functions.



7

00:00:20.390 --> 00:00:27.960

Let's open up a Jupiter notebook and show you what we're talking about.



8

00:00:28.000 --> 00:00:32.110

The first thing that we're going to discuss is the range function and the range function allows you



9

00:00:32.110 --> 00:00:34.420

to quickly generate a list of integers.



10

00:00:34.420 --> 00:00:37.180

This comes in handy a lot so take note of how to use it.



11

00:00:37.420 --> 00:00:45.100

Let's imagine that I want to iterate through a list of 100 so 100 integers from 0 to 100.



12

00:00:45.100 --> 00:00:52.230

Well one option would just be to say for number or numb in and then I would have to create that list.



13

00:00:52.240 --> 00:00:53.700

One two three.



14

00:00:53.830 --> 00:00:56.090

All the way to 100.



15

00:00:56.140 --> 00:00:57.550

That's a lot of typing for me to do.



16

00:00:57.550 --> 00:01:03.730

So instead of doing that what I can use is the range function and the range function takes in your starting



17

00:01:03.730 --> 00:01:10.240

index and then the index you want to go up to and recall from slicing we went up to an index but did



18

00:01:10.240 --> 00:01:10.980

not include it.



19

00:01:11.050 --> 00:01:16.540

So if I want to print out the numbers from 0 to 10 I'm going to go up to 11.



20

00:01:16.710 --> 00:01:26.060

That is not including 11 so 0 1 2 3 4 5 6 7 8 9 10 up to 11 and then I'm going to print the number and



21

00:01:26.100 --> 00:01:31.800

here it can see 0 1 2 3 etc. all the way to 10 and similar to slicing.



22

00:01:31.800 --> 00:01:34.310

There's actually a step argument we can provide as well.



23

00:01:34.350 --> 00:01:40.590

So if we want to just go and jumps of two I can provide a third argument to and that's the upsized So



24

00:01:40.590 --> 00:01:47.580

this is a way to quickly get even numbers or if I wanted for example to take a step size of 5 and go



25

00:01:48.090 --> 00:01:55.470

all the way to 100 I could do from 0 up to that including 101 in of 5 Preta all the numbers.



26

00:01:55.470 --> 00:02:01.880

So now I can see I've printed out five five 10 15 20 etc. all the way to 100.



27

00:02:01.980 --> 00:02:03.950

So that's really useful for iterating.



28

00:02:04.180 --> 00:02:07.740

And what is really nice about this is that it's actually a generator.



29

00:02:07.770 --> 00:02:10.830

So this is not saving a list in memory.



30

00:02:10.830 --> 00:02:13.270

It's basically just saving out a formula.



31

00:02:13.320 --> 00:02:14.570

And the previous number.



32

00:02:14.700 --> 00:02:19.650

So it remembers that you're starting at 0 and it needs to add 5 to get to the next number instead of



33

00:02:19.650 --> 00:02:25.080

having to save a huge list and memory that way in case this is a really large number maybe 10 million



34

00:02:25.080 --> 00:02:26.130

or 100 million.



35

00:02:26.180 --> 00:02:33.960

It's not saving 100 million elements in memory instead it's saving the formula go from 0 5 up to whatever



36

00:02:33.960 --> 00:02:35.190

number this is.



37

00:02:35.190 --> 00:02:40.150

So because this is what we call a generator and it's essentially saving that formula.



38

00:02:40.410 --> 00:02:46.270

If we actually just call range by itself let's make this number a little more manageable.



39

00:02:47.050 --> 00:02:49.610

And we'll go ahead and delete the step size.



40

00:02:49.650 --> 00:02:55.110

If we just say range 0 to 10 and hit enter here we just get back range 0 to 10.



41

00:02:55.140 --> 00:02:59.450

And if I try to print this out I will get the exact same thing.



42

00:02:59.460 --> 00:03:04.450

Range is worth 10 if I actually want to get a list and generate the full list.



43

00:03:04.470 --> 00:03:10.740

I will need to transform this by passing it into list and notice the amount of princes I'm using here.



44

00:03:10.740 --> 00:03:13.440

One is for range the starting and the ending.



45

00:03:13.440 --> 00:03:18.360

So this would be 0 3 9 and then we see the list and then we see print.



46

00:03:18.550 --> 00:03:21.750

And now I can see 0 up to but not including 10.



47

00:03:21.750 --> 00:03:22.940

So then I get nine.



48

00:03:23.220 --> 00:03:25.590

That's the range function it's very useful.



49

00:03:25.750 --> 00:03:30.660

Another very useful function especially for for loops is the enumerate function.



50

00:03:30.680 --> 00:03:39.540

Let's say we are going to iterate through a string we say four letter N and then I will say A B C D



51

00:03:39.600 --> 00:03:40.210

E.



52

00:03:42.260 --> 00:03:45.350

Print the letter.



53

00:03:45.350 --> 00:03:47.530

So here you see A B C D E.



54

00:03:47.540 --> 00:03:52.470

Imagine that I also want to print the index that corresponds to each of these letters.



55

00:03:52.580 --> 00:04:01.310

What I could do is the following I could say index is equal to zero and then say prints a letter and



56

00:04:01.310 --> 00:04:13.860

I will actually use some formatting here I will say that's index curly braces the letter is curly braces



57

00:04:14.700 --> 00:04:23.850

and the string say that format and I'm going to essentially inject the index the letter and then off



58

00:04:23.850 --> 00:04:29.370

of index I'm going to set that equal to index plus 1.



59

00:04:29.400 --> 00:04:35.020

So what I have here it says at index 0 of the letters A One letters B etc..



60

00:04:35.040 --> 00:04:37.620

So I start off with the index being equal to zero.



61

00:04:37.860 --> 00:04:44.520

And then for every letter in the string ABC the E and going to be using print formatting to print out



62

00:04:44.520 --> 00:04:46.980

the index and the letter variable.



63

00:04:47.130 --> 00:04:52.330

And then once this is printed I will go ahead and add one to the index and as quick no.



64

00:04:52.620 --> 00:04:54.500

Since this sort of action is really common.



65

00:04:54.540 --> 00:05:00.100

Adding one or subtracting one or even multiplying a variable by its previous value.



66

00:05:00.150 --> 00:05:06.220

The shorthand for a variable is equal to the variable plus it's some other value is the following.



67

00:05:06.210 --> 00:05:12.120

Instead of saying index equal to index plus 1 I could just say plus equals and that's actually the exact



68

00:05:12.120 --> 00:05:13.070

same thing.



69

00:05:13.420 --> 00:05:15.870

So then when I run that I get back the same result.



70

00:05:15.870 --> 00:05:17.640

So that's a shorthand.



71

00:05:17.690 --> 00:05:19.590

Now there's even a better way of doing this.



72

00:05:19.620 --> 00:05:22.780

And that uses the enumerate function that I was just discussing.



73

00:05:22.800 --> 00:05:25.480

So let's see how we could do this with enumeration.



74

00:05:25.870 --> 00:05:31.380

How we'll say for and then we'll will use tuple in packing that we discussed earlier and there is essentially



75

00:05:31.410 --> 00:05:38.490

a count variable return than this as well as a letter or whatever you happen to choose as a temporary



76

00:05:38.490 --> 00:05:39.660

variable name.



77

00:05:39.660 --> 00:05:48.690

And then we can say enumerates a b c d e and then I could essentially use the exact same thing.



78

00:05:48.690 --> 00:05:54.380

So I will copy this case this and we can actually instead of using count we can use index.



79

00:05:54.600 --> 00:05:57.660

Again you can call these variable names whatever you want.



80

00:05:57.660 --> 00:06:01.400

And then when we run this we get back the exact same result.



81

00:06:01.410 --> 00:06:03.910

So what is actually happening with enumerate.



82

00:06:04.080 --> 00:06:12.100

Well let's grab it and pass it into a list so we can see the result will say list pasand enumerate ABC



83

00:06:13.050 --> 00:06:13.680

run that.



84

00:06:13.680 --> 00:06:14.710

And notice what's happening.



85

00:06:14.710 --> 00:06:22.220

It's generating a list of tuples where the first item in the tuple is a numerical count.



86

00:06:22.290 --> 00:06:26.760

This sort of operation is really common as you begin to program in Python where you're going to want



87

00:06:26.760 --> 00:06:33.300

to not only iterate through some sort of list or string or any sort of iterable object but you're also



88

00:06:33.300 --> 00:06:39.490

going to want to keep a count of where you are at and enumerate is a very convenient way to do that.



89

00:06:39.660 --> 00:06:45.030

And especially when combined with tuple and packing you have a really powerful piece of code all nicely



90

00:06:45.030 --> 00:06:46.020

in one line.



91

00:06:46.110 --> 00:06:51.690

So if the numerate function you're able to create a list of tuples where the first item in the tuple



92

00:06:51.900 --> 00:06:58.800

is the count of what stage you're at the iterable and then the second item is iterable itself.



93

00:06:58.800 --> 00:07:03.180

So you could also do enumerate with not just a string but you could also do a list.



94

00:07:03.570 --> 00:07:12.800

So you could say a b c run that and you would get the exact same thing.



95

00:07:12.800 --> 00:07:17.520

So notice that this works for any sort of iterable object you get back an index of the letter.



96

00:07:17.630 --> 00:07:22.630

And it works the same way as you begin to learn more about Python you'll start to realize that this



97

00:07:22.630 --> 00:07:28.010

sort of list of tuple format is actually really useful and maybe you're going to have multiple lists



98

00:07:28.310 --> 00:07:34.100

that you want to zip together or join together in this sort of format where you can do that easily with



99

00:07:34.100 --> 00:07:35.770

the zip function.



100

00:07:35.840 --> 00:07:37.580

So I will create two lists here.



101

00:07:37.700 --> 00:07:46.490

My last one which is going to be the numbers 1 2 3 4 5 and then I will create my list too which will



102

00:07:46.490 --> 00:07:53.500

be a series of letters we will say A B C D and we want to make sure they match up so good.



103

00:07:54.550 --> 00:08:03.970

So right now I have my list one and my list too if I want to join these together in order to have tuples



104

00:08:04.240 --> 00:08:15.080

of these pairs one a to b three See what I could do is use the zip function and say my list 1 my list



105

00:08:15.190 --> 00:08:15.810

too.



106

00:08:16.100 --> 00:08:17.660

And then I can actually iterate through this.



107

00:08:17.660 --> 00:08:26.550

So now I can say for item in Ziph my list on my list to print the item and notice what happens here.



108

00:08:26.570 --> 00:08:30.880

It's actually creating a list of tuples based off these lists.



109

00:08:30.880 --> 00:08:39.840

And let's imagine if I'd said zip up my list to my list to then I would just get a B B C C C C what



110

00:08:39.840 --> 00:08:47.310

I can also do is if I just want the list itself I can transform the result of that list or that zip



111

00:08:47.310 --> 00:08:51.680

function by passing and list again zip.



112

00:08:51.690 --> 00:08:58.380

All it does is essentially acting like a zipper on a jacket and zipping together these lists.



113

00:08:58.380 --> 00:09:03.170

You'll want to keep in mind though if you have more items in one list.



114

00:09:03.300 --> 00:09:04.770

So let's make my list one.



115

00:09:04.770 --> 00:09:06.700

Longer than my list too.



116

00:09:06.740 --> 00:09:13.010

And if we try to run this here you'll only go as far as the shorter list so you won't get an error but



117

00:09:13.020 --> 00:09:17.730

you'll only go as far as the shorter list so when it's zipping up it's going to cut off anything else



118

00:09:17.780 --> 00:09:19.590

in the other list that's longer.



119

00:09:19.590 --> 00:09:24.190

Keep that in mind as you use the zip function the next.



120

00:09:24.190 --> 00:09:26.940

Operator we're going to discuss the in operator.



121

00:09:27.020 --> 00:09:34.100

We've already seen the in operator here in the context of a for loop but you can also use it just outside



122

00:09:34.100 --> 00:09:37.450

of a for loop to check for something being inside a list.



123

00:09:37.640 --> 00:09:47.810

So we can say X in the list 1 to 3 and it will all turn back a boolean false because the string x is



124

00:09:47.810 --> 00:09:49.010

not in this list.



125

00:09:49.400 --> 00:09:59.500

And we can also check if X is and this list will say a comma B come a C and this returns false.



126

00:09:59.510 --> 00:10:01.410

But let's change one of these to be x.



127

00:10:01.730 --> 00:10:03.580

And now we can see it's true.



128

00:10:03.580 --> 00:10:09.180

It actually also works for any iterable object and they all work for strings as well so we can say a



129

00:10:09.190 --> 00:10:12.430

b c d e that returns false.



130

00:10:12.640 --> 00:10:19.220

Will say is X an A C X and we get back true.



131

00:10:19.510 --> 00:10:26.710

Essentially it's kind of a shorthand of a quick for loop check to see if this object is in any of the



132

00:10:26.710 --> 00:10:33.040

iterable elements of a string or a list or really a sort of iterable sequence.



133

00:10:33.040 --> 00:10:34.990

So again that's the in operator.



134

00:10:34.990 --> 00:10:40.990

Hopefully you can see how it's related to the in operator use in a for loop such as sucking If something



135

00:10:41.290 --> 00:10:44.050

is in some iterable object.



136

00:10:44.050 --> 00:10:49.060

Next up we want to discuss the min and max function that is going to lie to quickly check the minimum



137

00:10:49.120 --> 00:10:50.880

or maximum of a list.



138

00:10:51.220 --> 00:11:00.030

So if I create a list 10 20 30 40 100 I can use mine.



139

00:11:00.030 --> 00:11:06.520

Notice how their syntax highlighting there that can grow quickly the minimum of a list or can say grab



140

00:11:06.520 --> 00:11:14.390

the maximum of a list and it turns back 100 Python also comes with a built in random library.



141

00:11:14.390 --> 00:11:17.360

There's lots of functions including the random library.



142

00:11:17.420 --> 00:11:21.950

We're just going to show you two useful functions for now and that is the shuffle function as well as



143

00:11:21.950 --> 00:11:28.490

the random integer function and to import particular functions from the a random library.



144

00:11:28.850 --> 00:11:38.420

You can say from random imports and then if you hit tab here you should be able to see a bunch of options



145

00:11:39.070 --> 00:11:40.380

that you can import.



146

00:11:40.400 --> 00:11:46.870

We're going to import shuffle from the random library we'll save from random import shuffle.



147

00:11:47.330 --> 00:11:54.060

And this means now that we imported shuffle function from the random library that's built into Python.



148

00:11:54.290 --> 00:12:00.280

We'll discuss this syntax and a lot more detail when discussing creating your own modules or own packages.



149

00:12:01.080 --> 00:12:06.490

For now let's go ahead and see how we can use this shuffle library shuffle allows you to shuffle the



150

00:12:06.490 --> 00:12:09.630

list in place meaning it's not going to return anything.



151

00:12:09.640 --> 00:12:12.360

Instead it's going to affect the lists that you pass into it.



152

00:12:12.370 --> 00:12:19.450

So before I actually run this I'm going to show you my list which is an order and then I'm going to



153

00:12:19.450 --> 00:12:26.620

call shuffle on my list and the shuffle is happening in place meaning if I check my list again it's



154

00:12:26.620 --> 00:12:29.430

been permanently shuffled into some other order.



155

00:12:29.620 --> 00:12:35.830

And then I can also reshuffle it again my list and it's not going to be shuffled in some other random



156

00:12:35.830 --> 00:12:36.600

order.



157

00:12:36.610 --> 00:12:39.360

So now 20 10 40 100 etc..



158

00:12:39.370 --> 00:12:41.190

So that's how you can use shuffle.



159

00:12:41.440 --> 00:12:50.500

The other function we want to show you from random is the rand I.A. or random integer function and you



160

00:12:50.500 --> 00:12:57.040

can import that as well and say it ran I.A. and this returns a random integer in range a to b which



161

00:12:57.030 --> 00:12:58.970

include in both end points.



162

00:12:59.020 --> 00:13:05.890

So I can grab a random number from 0 to 100 and then I'll return a number from 0 to 100.



163

00:13:05.890 --> 00:13:07.380

Here I could see 30.



164

00:13:07.420 --> 00:13:14.140

Let's go ahead and run it again 53 46 and you can keep running this and you'll get random numbers and



165

00:13:14.140 --> 00:13:18.250

you can make the range even larger to make it more obvious that they're random.



166

00:13:18.250 --> 00:13:24.670

For now let's wrap up our discussion by quickly discussing comparison operators and logical operators.



167

00:13:24.670 --> 00:13:29.350

We've already talked about comparison operators but it's formally just go over them.



168

00:13:29.560 --> 00:13:33.990

Comparison operators like to compare two objects so I can say is one less than two.



169

00:13:34.090 --> 00:13:36.070

And I get back a boolean value.



170

00:13:36.070 --> 00:13:38.420

More importantly we can also check for equality.



171

00:13:38.440 --> 00:13:41.590

Second check is one equal to one that returns true.



172

00:13:42.320 --> 00:13:47.690

You have to also has to be the same data type so I can say is the string one equal to the integer 1.



173

00:13:47.750 --> 00:13:54.760

And that will return false and for inequality it's going to be exclamation mark or exclamation point



174

00:13:55.010 --> 00:13:59.850

equals and then that's not equal to 1 not equal to 2.



175

00:13:59.870 --> 00:14:00.670

Well that's true.



176

00:14:00.670 --> 00:14:02.320

It is not equal to two.



177

00:14:02.330 --> 00:14:07.160

So those are comparison operators and you can look back at the previous lessons to see what we discussed



178

00:14:07.160 --> 00:14:11.370

about other things such as greater than less than greater than or equal to etc..



179

00:14:11.750 --> 00:14:17.500

But let's imagine that we now know about comparison operators but want to combine multiple comparisons.



180

00:14:17.630 --> 00:14:20.350

We can use logical operators in order to do that.



181

00:14:20.540 --> 00:14:26.170

And there's essentially three major logical operators there is the and key word the or key word.



182

00:14:26.180 --> 00:14:27.780

And then the not key word.



183

00:14:27.860 --> 00:14:37.310

Let's start off by looking at and sort of say one is equal to one and two is equal to two.



184

00:14:37.340 --> 00:14:38.720

Now when I run the cell I get back.



185

00:14:38.720 --> 00:14:39.320

True.



186

00:14:39.320 --> 00:14:41.010

So what's actually happening here.



187

00:14:41.060 --> 00:14:48.320

The end keyword requires that both statements be true in order for it to return true.



188

00:14:48.350 --> 00:14:52.680

So let's make one of these false by saying two is not equal to two.



189

00:14:52.880 --> 00:14:55.540

And when I run this I get back false.



190

00:14:55.610 --> 00:14:57.370

So that's the and keyword.



191

00:14:57.560 --> 00:14:59.960

And you can also keep adding on more.



192

00:14:59.960 --> 00:15:02.250

So we can say and three to three.



193

00:15:02.600 --> 00:15:06.520

So if we change this to all be equal we end up getting true.



194

00:15:06.570 --> 00:15:11.510

However we should be careful to stack up to many of these especially because it makes your code a lot



195

00:15:11.510 --> 00:15:15.780

longer and it's then becomes more difficult to track out your logic.



196

00:15:15.800 --> 00:15:17.380

So that's the key word.



197

00:15:17.380 --> 00:15:19.930

There's also the or key word in this case.



198

00:15:19.970 --> 00:15:22.580

It's going to need one of the statements to be true.



199

00:15:22.820 --> 00:15:30.320

So we can say is one equal to 1 or is two not equal to 2.



200

00:15:30.680 --> 00:15:36.590

And this returns true because the first one happens to be true even though this second one is not true.



201

00:15:37.100 --> 00:15:43.570

So to make it more obvious is if we say is one equal to one or two equal to 100 He only needs one of



202

00:15:43.570 --> 00:15:45.770

these conditions to be true to operate.



203

00:15:45.770 --> 00:15:51.350

Finally we have the knot's operator and the not operator can be thought of as reversing the boolean



204

00:15:51.350 --> 00:15:52.820

it's given.



205

00:15:52.900 --> 00:16:00.550

So if we have one is equal to one that returns true if we write the key word not in front of it it will



206

00:16:00.550 --> 00:16:01.580

say false.



207

00:16:01.660 --> 00:16:05.290

Essentially reversing the boolean it's given.



208

00:16:05.290 --> 00:16:08.380

So let's show you a more realistic example of when you may want to use this.



209

00:16:08.560 --> 00:16:12.780

We will say answer is equal to no.



210

00:16:12.890 --> 00:16:22.910

And then we'll say if one is equal to 1 and not answer equal to yes.



211

00:16:23.950 --> 00:16:28.040

Prince success.



212

00:16:28.240 --> 00:16:32.830

So when I read this I see success because what's actually happening here I'm checking this condition



213

00:16:32.830 --> 00:16:33.680

first.



214

00:16:33.730 --> 00:16:35.180

If one is equal to 1.



215

00:16:35.200 --> 00:16:36.500

Well that happens to be true.



216

00:16:36.640 --> 00:16:38.490

And the answer is not equal to.



217

00:16:38.500 --> 00:16:39.140

Yes.



218

00:16:39.220 --> 00:16:40.460

That I predict success.



219

00:16:40.510 --> 00:16:41.480

The answer was no.



220

00:16:41.670 --> 00:16:43.500

I get back success in other way.



221

00:16:43.500 --> 00:16:49.100

Do this is instead of using a keyword just to use an exclamation mark.



222

00:16:49.350 --> 00:16:50.700

And that's the exact same thing.



223

00:16:52.930 --> 00:16:56.190

All right those are a bunch of operators that you may find yourself using.



224

00:16:56.200 --> 00:16:58.980

Hopefully they were helpful to you in your studies.



225

00:16:58.990 --> 00:17:00.790

Thanks and we'll see you at the next lesson.



