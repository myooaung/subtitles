1
00:00:01,290 --> 00:00:06,950
Welcome back agent Let's discuss encryption and hashing the intelligence from the last mission.

2
00:00:06,950 --> 00:00:14,360
From the images led to an encrypted message Python can be used to perform cryptographic encryption to

3
00:00:14,360 --> 00:00:15,910
understand encryption in general.

4
00:00:15,950 --> 00:00:22,840
We first need to understand hashing a hash function is any function that is used to map data of an arbitrary

5
00:00:22,840 --> 00:00:25,930
size to data of a fixed size.

6
00:00:25,930 --> 00:00:31,300
Let's look at a very simple example where the hash function is performing the Maat operator with two

7
00:00:31,600 --> 00:00:38,390
on the length of a string so on the left hand side we have just any arbitrary string to the string can

8
00:00:38,390 --> 00:00:41,130
be as large as you want or a smaller as you want.

9
00:00:41,150 --> 00:00:45,240
Here we have just a few small examples and then we pass it through a hash function.

10
00:00:45,290 --> 00:00:50,900
In this case the hash function is just take the length of the string and then Matu and get the result.

11
00:00:50,960 --> 00:00:52,190
And that basically just checks.

12
00:00:52,190 --> 00:00:55,990
Is there an even number of characters or an odd number of characters in the string.

13
00:00:56,120 --> 00:01:01,130
And no matter how big the string is the past to this hash function you're always going to get one of

14
00:01:01,130 --> 00:01:04,400
two results either a 1 or 0 1 0.

15
00:01:04,400 --> 00:01:08,210
In the case that there was an even number of characters in the string and one in the case that there

16
00:01:08,210 --> 00:01:09,940
was an odd number of characters.

17
00:01:09,980 --> 00:01:15,230
So now we can take an arbitrary string of any size pass it through this hash function and get back a

18
00:01:15,230 --> 00:01:17,270
fixed size result.

19
00:01:17,270 --> 00:01:20,360
Now notice something important here we cannot go backwards.

20
00:01:20,360 --> 00:01:25,330
This is a one way hash function because I can't just give you a result of 1 or 0.

21
00:01:25,400 --> 00:01:29,950
And the hash function itself and then expect you to figure out what the arbitrary string was.

22
00:01:30,050 --> 00:01:37,780
On the other end now a one way cryptographic hash function is more complex than what we just saw because

23
00:01:37,780 --> 00:01:42,470
it must be able to provide a unique hash for any information passed to it.

24
00:01:42,550 --> 00:01:45,920
Previously we saw here that we have repeated hashes ones and zeros.

25
00:01:45,930 --> 00:01:51,780
But the cryptographic hash has to be unique for any arbitrary data that is passed to it.

26
00:01:51,790 --> 00:01:55,070
So that's quite harder of a problem to solve.

27
00:01:55,960 --> 00:01:58,740
And the ideal hash function actually has three main properties.

28
00:01:58,750 --> 00:02:00,880
And this is for cryptographic hash functions.

29
00:02:01,120 --> 00:02:05,710
The first property it should have is that it should be extremely easy to calculate the hash for any

30
00:02:05,710 --> 00:02:06,640
given data.

31
00:02:06,640 --> 00:02:07,630
It can't take forever.

32
00:02:07,630 --> 00:02:11,800
Otherwise it's basically a useless hash function because we're going to be waiting all day for it to

33
00:02:11,800 --> 00:02:12,850
compute the hash.

34
00:02:12,850 --> 00:02:16,080
So the first one is it has to be quite fast.

35
00:02:16,120 --> 00:02:20,980
The second one is that it has to be extremely computationally difficult to calculate the alphanumeric

36
00:02:20,980 --> 00:02:26,780
text that has a given hash that is it must be really really hard to go from the unique hash.

37
00:02:26,890 --> 00:02:33,040
Knowing the hash function to go back to the arbitrary data and the third one is that has to be extremely

38
00:02:33,040 --> 00:02:37,240
unlikely that two slightly different messages will have the same hash.

39
00:02:37,330 --> 00:02:43,980
These three components are the main properties that a cryptographic hash function must have.

40
00:02:43,990 --> 00:02:49,280
Now there are many cryptographic hash functions that exist and the five SH A Blake.

41
00:02:49,480 --> 00:02:55,000
There's tons of them and many older hash functions have actually been deemed insecure due to discoveries

42
00:02:55,000 --> 00:02:59,590
of what are known as collision attacks where different arbitrary data inputs are discovered to have

43
00:02:59,590 --> 00:03:01,200
the same hashed output.

44
00:03:01,210 --> 00:03:06,340
Remember one of the key components of a cryptographic hash function is that any arbitrary piece of data

45
00:03:06,370 --> 00:03:09,520
that you pass into it has to have its own unique hash.

46
00:03:11,320 --> 00:03:17,510
The s h a secure hash algorithm is a set of standard hash functions developed by the NSA.

47
00:03:17,560 --> 00:03:22,120
These hash functions are essentially just mathematical formulas to follow and they're open to the public.

48
00:03:22,120 --> 00:03:27,290
And in fact the latest secure hash algorithms are discovered through open competitions.

49
00:03:27,640 --> 00:03:32,200
Now the Wikipedia on cryptographic hash functions is a great resource for learning about the latest

50
00:03:32,200 --> 00:03:35,440
developments as well as the various algorithms available.

51
00:03:35,500 --> 00:03:40,060
And we'll be discussing the various algorithms available in the cryptographic libraries we use later

52
00:03:40,060 --> 00:03:42,490
on.

53
00:03:42,500 --> 00:03:47,240
So now that we understand cryptographic caching that is just a one way hash of grabbing arbitrary data

54
00:03:47,600 --> 00:03:50,980
passing it through the hash function and getting some unique hash out of it.

55
00:03:51,110 --> 00:03:56,630
We're going to now discuss encryption and decryption encryption differs from hashing because the message

56
00:03:56,630 --> 00:03:58,580
needs to be able to be decrypted.

57
00:03:58,580 --> 00:04:04,050
That is we have to actually go backwards to decrypt an encrypted a message usually a key is required.

58
00:04:05,620 --> 00:04:11,650
In cryptography a cipher is an algorithm for performing encryption and decryption and typically ciphers

59
00:04:11,650 --> 00:04:12,640
require a key.

60
00:04:12,640 --> 00:04:16,450
This key is then only known by two parties the sender and receiver.

61
00:04:16,450 --> 00:04:22,000
And this actually allows for the message to be beamed publicly but only readable by its intended recipient.

62
00:04:23,520 --> 00:04:24,630
So that would look something like this.

63
00:04:24,630 --> 00:04:26,030
We have some original message.

64
00:04:26,040 --> 00:04:27,150
Let's say hello.

65
00:04:27,270 --> 00:04:32,820
And we create some cryptographic cipher with a particular key and that will end up producing an encrypted

66
00:04:32,820 --> 00:04:37,560
message so we can send that encrypted message through public means because it doesn't really matter

67
00:04:37,560 --> 00:04:42,660
to us if anyone sees an encrypted message because they can only decrypt that if they know the key.

68
00:04:42,660 --> 00:04:47,080
So keep in mind this all depends on keeping that private key secret.

69
00:04:47,250 --> 00:04:52,770
And there's other ideas that span from this such as private public key encryption that actually solve

70
00:04:52,770 --> 00:04:58,440
some of these problems of allowing yourself to expose a public version of the key and then holding a

71
00:04:58,440 --> 00:04:59,670
private key yourself.

72
00:04:59,880 --> 00:05:04,160
But for our purposes we just need to have the idea that we have some original message.

73
00:05:04,320 --> 00:05:06,930
We create a cipher using some private key.

74
00:05:07,050 --> 00:05:08,250
We have an encrypted message.

75
00:05:08,250 --> 00:05:12,020
And then if someone wants to decrypt that message that is go back to the original message.

76
00:05:12,090 --> 00:05:14,300
They just need to know the key for the cipher.

77
00:05:15,750 --> 00:05:21,600
To explore all of these concepts in python we have to install the cryptography library to do so.

78
00:05:21,600 --> 00:05:27,090
Go to your command line and type out Pipp install cryptography and install the cryptography library.

79
00:05:27,090 --> 00:05:30,520
Up next we're going to explore these concepts in code in Python.

80
00:05:30,660 --> 00:05:31,530
We'll see you there agent.

