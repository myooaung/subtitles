1
00:00:01,120 --> 00:00:02,030
Welcome back.

2
00:00:02,050 --> 00:00:09,360
Let's quickly discuss how to debug with Python and also how to use the built in date time library Python

3
00:00:09,360 --> 00:00:12,880
comes with a powerful debugger that can help you find mistakes in your code.

4
00:00:12,930 --> 00:00:18,870
We can see a trace that allows us to essentially stop our code at any point hold it on pause and then

5
00:00:18,870 --> 00:00:21,660
decide and explore variables and operations.

6
00:00:21,660 --> 00:00:24,870
We're also going to discuss Python's they time capabilities.

7
00:00:24,930 --> 00:00:27,660
Let's load up a notebook and see how these libraries work.

8
00:00:31,850 --> 00:00:41,900
Let's imagine that we have three variables X as a string one Y as an integer 2 and then Z as the integer

9
00:00:41,900 --> 00:00:45,820
3 and maybe later on you have hundreds of lines of code.

10
00:00:45,920 --> 00:00:53,520
And somewhere along those lines you say result is equal to Y plus Z.

11
00:00:53,810 --> 00:00:58,040
And then you print out the results and then couple hundred lines down.

12
00:00:58,280 --> 00:01:07,520
You say OK result is equal to Y plus X and then you get this type error and maybe you get another error

13
00:01:07,580 --> 00:01:09,180
that you really can't hurt it.

14
00:01:09,200 --> 00:01:12,630
This one's a little easier to interpret it says integer plus string.

15
00:01:12,650 --> 00:01:16,400
So you know one of these is an integer and one of these is string that maybe you're also having trouble

16
00:01:16,400 --> 00:01:17,670
telling which is which.

17
00:01:17,840 --> 00:01:23,840
So if you have hundreds of lines of code it's going to be really hard to try to find where your error

18
00:01:23,900 --> 00:01:24,700
is occurring.

19
00:01:24,920 --> 00:01:30,310
And in order to solve this issue we can initiate a trace using the debugger module.

20
00:01:30,590 --> 00:01:38,070
So this the first thing we need to do is import Python debugger or PDB.

21
00:01:38,540 --> 00:01:40,890
And then let's set up the situation again.

22
00:01:41,150 --> 00:01:46,730
So we'll have ex-secret to this one string Weikel a to z is equal to three.

23
00:01:46,850 --> 00:01:50,330
And then let's just say there's lots more code here.

24
00:01:50,330 --> 00:01:56,210
So hundreds of lines and then we'll say result is equal to Y plus Z.

25
00:01:56,210 --> 00:02:01,510
And then we print out the results and then somewhere along the line we have a lot more code.

26
00:02:01,550 --> 00:02:06,890
So more and more code and then we're going to see a trace here.

27
00:02:06,890 --> 00:02:11,420
We say PDB and then we call the set trace method.

28
00:02:11,420 --> 00:02:21,840
Open and close parentheses and then you have lots more code and then will say your result is equal to

29
00:02:22,650 --> 00:02:28,300
Y plus X and then we're going to print that new result.

30
00:02:28,490 --> 00:02:30,210
Let's make sure it's underscore.

31
00:02:30,300 --> 00:02:31,540
There we go.

32
00:02:31,560 --> 00:02:33,590
Let's take a look at what we have set up here.

33
00:02:33,600 --> 00:02:35,890
I have my three variables defined.

34
00:02:36,000 --> 00:02:37,730
We can imagine there's lots more code.

35
00:02:37,740 --> 00:02:42,440
I have some sort of operation and then I have lots more code and we're going to comment out the set

36
00:02:42,480 --> 00:02:44,170
trace for right now.

37
00:02:44,230 --> 00:02:47,610
Then we have lots more code and then we try new result and print the new result.

38
00:02:47,610 --> 00:02:52,620
If I run the cell I get some sort of type error and it tells me hey your type errors happening at this

39
00:02:52,620 --> 00:02:53,210
line.

40
00:02:53,310 --> 00:02:54,480
Line 17.

41
00:02:54,510 --> 00:03:00,360
We're used to having a new result is equal to Y plus X and I'm getting this type error but maybe I have

42
00:03:00,360 --> 00:03:04,530
so much code here that I'm really unsure what Y is and what x is.

43
00:03:04,680 --> 00:03:10,320
And when you're starting off programming what you sometimes do is in order to debug you just printout

44
00:03:10,650 --> 00:03:16,680
maybe type of x over here and then you print out type of Y.

45
00:03:16,830 --> 00:03:22,380
And this is a way for debugging for beginners since they need to print out a bunch of statements and

46
00:03:22,380 --> 00:03:24,030
see what is actually what.

47
00:03:24,240 --> 00:03:27,780
So then when they run this code they see oh it was a string integer.

48
00:03:27,780 --> 00:03:30,480
They look back and they say oh x was that string.

49
00:03:30,480 --> 00:03:32,120
So that's the problem.

50
00:03:32,130 --> 00:03:36,530
However it's much easier to use a trace.

51
00:03:36,570 --> 00:03:41,430
So we're going to uncomment this line and have Python debugger said trace.

52
00:03:41,580 --> 00:03:48,390
And what this does is it runs all the code above that trace command and then allows you to pause and

53
00:03:48,390 --> 00:03:50,550
have an interaction with a python shell.

54
00:03:50,820 --> 00:03:52,370
So we're going to run this.

55
00:03:53,040 --> 00:03:59,220
And here we can see the python debugger and now I can type variables out as if they were or defined

56
00:03:59,250 --> 00:03:59,830
in a shell.

57
00:03:59,880 --> 00:04:06,720
So I can type in X and it gives me back X and I can see here it's a string or it can type Y and it gives

58
00:04:06,720 --> 00:04:13,990
me back to here or I can say what is the type of x enter and it tells me class String.

59
00:04:14,160 --> 00:04:19,320
And this is a much easier way to play around if your variables and check what's happening.

60
00:04:19,350 --> 00:04:20,640
You can even do operations here.

61
00:04:20,670 --> 00:04:27,870
You can do something like Z plus y enter and it will tell you the result is 5.

62
00:04:27,870 --> 00:04:33,900
So you can both check variables do operations all as if you had a python shell open right in the Meleager

63
00:04:33,940 --> 00:04:34,850
code.

64
00:04:34,890 --> 00:04:39,900
This allows you to interact with the variables that you've already defined instead of having to add

65
00:04:39,900 --> 00:04:44,190
in a bunch of print statements and it saves you a lot of time because now you don't need to search your

66
00:04:44,190 --> 00:04:50,820
code and kind of discover where the problems are instead you can't interactively set a trace and then

67
00:04:50,820 --> 00:04:52,400
work with your code there.

68
00:04:52,560 --> 00:04:58,300
And when you want to finally end this you can just type and quit and it will quit the python debugger.

69
00:04:58,350 --> 00:04:59,550
So that's how this works.

70
00:04:59,550 --> 00:05:04,530
You can see we have the kind of quick command but it allows you to set a trace and then play around

71
00:05:04,530 --> 00:05:07,550
with all the variables as if you had a shell open there.

72
00:05:07,560 --> 00:05:10,920
Now there's a lot more functionality for the python debugger but definitely the one you're going to

73
00:05:10,920 --> 00:05:14,400
be using the most is this set trace functionality.

74
00:05:14,400 --> 00:05:18,920
So keep it in mind next time you find yourself having a bug that's hard to find.

75
00:05:20,020 --> 00:05:22,270
Let's now discuss date time objects.

76
00:05:22,270 --> 00:05:28,410
And this basically just shows you how to work with basic dates and times in Python in order to create

77
00:05:28,410 --> 00:05:35,880
a date or time you need to import that time library and then you can say something like is equal to

78
00:05:35,910 --> 00:05:40,660
date time time and then you pasand the hour.

79
00:05:40,660 --> 00:05:42,250
And this is a 24 hour clock.

80
00:05:42,400 --> 00:05:47,850
The minutes 15 minutes and then we can pass in seconds and if you want you can even pass an micro-seconds

81
00:05:47,880 --> 00:05:49,530
but we won't do that for now.

82
00:05:49,530 --> 00:05:53,880
So we can show you what happens if you don't pass them and you have this date time object so if you

83
00:05:53,880 --> 00:05:58,350
say type C it's the state time the time object.

84
00:05:58,350 --> 00:06:06,110
Meaning that it's indicating a time and we can grab the hour off of that time or the minutes or the

85
00:06:06,120 --> 00:06:12,030
seconds and you can even grab microseconds off of this if you don't define the micro-seconds when you

86
00:06:12,030 --> 00:06:13,500
created the state time object.

87
00:06:13,570 --> 00:06:17,580
They'll just default to zero and it's the same for not defining seconds.

88
00:06:17,580 --> 00:06:22,500
So if we were to tick off the second and then rerun this it would end up saying seconds is equal to

89
00:06:22,500 --> 00:06:22,910
zero.

90
00:06:22,950 --> 00:06:24,930
And micro-seconds is equal to zero.

91
00:06:25,200 --> 00:06:29,880
If you want to get the current date then you can use a data object.

92
00:06:29,910 --> 00:06:36,520
So that's going to be similarly date time except instead of saying time you'll say that date.

93
00:06:36,870 --> 00:06:41,510
And then if you want you can define a date using year month day.

94
00:06:41,790 --> 00:06:51,450
So you can do something like 20 18 months is 10 days 11 and then you have this date object.

95
00:06:51,610 --> 00:06:58,270
Or if you want today's date you can say date time dates and then say today run that and that will grab

96
00:06:58,360 --> 00:07:01,290
the dates off of your computer's operating system.

97
00:07:01,420 --> 00:07:04,810
So I'll say 2018 January 18th.

98
00:07:04,810 --> 00:07:13,480
And if you want the date time that is both the date and the time we can say date time date time and

99
00:07:13,480 --> 00:07:17,980
then say now and that grabs both the dates and the time information.

100
00:07:17,980 --> 00:07:24,490
So here we can see the date information and then here is the time information hour minute second and

101
00:07:24,490 --> 00:07:26,220
then micro-seconds.

102
00:07:26,290 --> 00:07:32,890
So there's both time objects which is just the time there's a date object which is the month the year

103
00:07:32,980 --> 00:07:39,490
and the day itself and the date time are checks which is both the day and the actual time.

104
00:07:39,490 --> 00:07:42,580
So let's quickly show you an example of how you could time your code.

105
00:07:42,700 --> 00:07:47,020
Because most often you're going to be interested in using this library if you're trying to figure out

106
00:07:47,020 --> 00:07:49,080
what's the most efficient way to do something.

107
00:07:49,390 --> 00:07:59,480
And the way to do that let's say you had a list comprehensions saying results x squared for X and range

108
00:08:00,970 --> 00:08:05,340
and let's make this a larger number we'll say 10000.

109
00:08:05,540 --> 00:08:09,150
So I want to know how long did it take to actually create that result.

110
00:08:09,170 --> 00:08:20,060
What I can do is create an initial time stamp is equal to zero and say date time that's date time now

111
00:08:20,960 --> 00:08:32,060
and then right after we run results I'm going to say one is equal to date time that date time now and

112
00:08:32,060 --> 00:08:40,880
then when I can do is say that the difference is equal to date time at point 1 minus the time initial

113
00:08:40,880 --> 00:08:42,020
at t 0.

114
00:08:42,530 --> 00:08:49,550
And if I check out my different my different subject if I can check out the micro-seconds and it took

115
00:08:49,550 --> 00:08:53,730
a total of four thousand fourteen microseconds for this result to run.

116
00:08:53,900 --> 00:08:56,960
And if you check out seconds it's going to be zero.

117
00:08:56,990 --> 00:09:01,640
Because it's not a long enough time for it to actually measure it out in seconds.

118
00:09:01,670 --> 00:09:06,320
So it only took in this case 4000 14 microseconds.

119
00:09:06,320 --> 00:09:08,870
Now this number may be different depending on your computer.

120
00:09:09,080 --> 00:09:12,620
And if you make this number too small for example if you just make it 10.

121
00:09:12,650 --> 00:09:17,360
This is going to run so fast that it's likely your computer won't be able to actually catch how fast

122
00:09:17,410 --> 00:09:18,140
that it.

123
00:09:18,200 --> 00:09:23,330
So we're going to run this and see if we can catch the difference and looks like it was 5 0 2 microseconds

124
00:09:23,350 --> 00:09:28,400
So keep in mind depending on how fast your computer is if this number is too small it may just say zero

125
00:09:28,400 --> 00:09:28,930
here.

126
00:09:29,090 --> 00:09:34,430
In my case my computer was able to catch it because it took some time but that's something to know if

127
00:09:34,430 --> 00:09:36,050
you're having really fast operations.

128
00:09:36,080 --> 00:09:38,070
It won't really make a difference timing them.

129
00:09:38,090 --> 00:09:41,940
Instead you can run them multiple times and stiff objects.

130
00:09:41,990 --> 00:09:48,820
If we check it out it's a time delta object which is essentially just the difference between due to

131
00:09:48,840 --> 00:09:50,210
date time objects.

132
00:09:50,450 --> 00:09:55,910
And that's really it for that date type module so as a review off of date time you have time objects

133
00:09:55,920 --> 00:09:59,130
you can create which indicate hours minutes.

134
00:09:59,150 --> 00:10:05,590
Second some micro-seconds you have data objects you can create which has years the month and the day.

135
00:10:05,780 --> 00:10:10,850
And then you have date time objects and a lot of people tend to work with date time objects because

136
00:10:10,910 --> 00:10:14,270
if they don't want the time information they can just default it to zero.

137
00:10:14,600 --> 00:10:20,280
So we have the Year of the month the day and then hours minutes seconds microseconds.

138
00:10:20,300 --> 00:10:26,160
And this allows you to quickly time your code so you can test which block of code is more efficient.

139
00:10:26,240 --> 00:10:27,530
We'll see you at the next lesson recruit.

