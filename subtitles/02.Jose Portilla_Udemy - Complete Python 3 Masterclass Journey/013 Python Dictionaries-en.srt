1
00:00:00,240 --> 00:00:07,400
Welcome back recruit now it's time to discuss another python basic object which is a dictionary dictionaries

2
00:00:07,460 --> 00:00:11,120
are an ordered mappings for storing objects.

3
00:00:11,120 --> 00:00:16,730
Previously we saw how we could use a python list to store objects in an ordered sequence such as storing

4
00:00:16,820 --> 00:00:23,120
integers or strings in order dictionaries however use a key value pairing instead.

5
00:00:23,210 --> 00:00:31,880
This key value pair allows users to quickly grab objects without needing to know an index location dictionaries.

6
00:00:31,900 --> 00:00:33,150
As far as their syntax.

7
00:00:33,190 --> 00:00:38,590
Use curly braces and colons to signify the keys and their associated values so you'll have a set of

8
00:00:38,590 --> 00:00:40,990
curly braces at the very outside.

9
00:00:40,990 --> 00:00:45,020
And then you have key colon and then the value that goes with it.

10
00:00:45,040 --> 00:00:51,910
Here we're showing strings as the values but you can also have dictionaries numbers lists as the values

11
00:00:51,910 --> 00:00:56,230
themselves and then we separate each key value pair with a comma.

12
00:00:56,230 --> 00:01:03,420
Now you may be asking yourself when do I choose a list and when do I choose a dictionary to put it simply.

13
00:01:03,440 --> 00:01:08,270
Dictionaries are have objects being retrieved by their key name.

14
00:01:08,300 --> 00:01:10,610
That is if you want to grab a value number one.

15
00:01:10,640 --> 00:01:14,550
Then you just passen the key that's associated with that value.

16
00:01:14,570 --> 00:01:20,330
That may seem really convenient but the issue here is that the way the key value mapping works is dictionaries

17
00:01:20,660 --> 00:01:27,250
remain unordered and you can actually sort them if you wanted to be able to sort.

18
00:01:27,290 --> 00:01:33,350
Maybe you want to reverse or organize your actual objects then you would need to use a list because

19
00:01:33,410 --> 00:01:38,480
objects there are retrieved by their in that location and because there are lists that means you can

20
00:01:38,720 --> 00:01:42,250
have an order sequence that can be index sliced or sorted.

21
00:01:42,320 --> 00:01:44,070
So it's basically a tradeoff here.

22
00:01:44,090 --> 00:01:46,800
Dictionaries allow you to retrieve by key name.

23
00:01:46,910 --> 00:01:53,750
However you can't really sort them list apply to retrieve by location and then the added benefit is

24
00:01:53,750 --> 00:01:56,540
that you can index slice or sort the list.

25
00:01:56,810 --> 00:01:59,830
Let's explore these concepts further in a Jupiter notebook.

26
00:02:04,140 --> 00:02:06,680
Let's start off by creating a dictionary will name it.

27
00:02:06,680 --> 00:02:07,490
Variable.

28
00:02:08,360 --> 00:02:15,770
We have a curly braces and then we create a key will have key one just string and then the value will

29
00:02:15,770 --> 00:02:17,460
say value 1.

30
00:02:17,900 --> 00:02:20,190
Then comma for another key value pair.

31
00:02:20,420 --> 00:02:30,280
So key to and then value to then if I want to retrieve values I can just use their associated key so

32
00:02:30,280 --> 00:02:33,750
I can Massin key one to return value to.

33
00:02:33,910 --> 00:02:39,330
Or if I wanted a value to then I could just passen key to and grab value too.

34
00:02:39,520 --> 00:02:43,700
If I ever want to add a new key item or key value pair.

35
00:02:43,720 --> 00:02:47,240
All I have to do is call my dictionary variable.

36
00:02:47,470 --> 00:02:53,970
Create some new key and then set that equal to whatever item I want to pasan.

37
00:02:54,010 --> 00:02:59,920
So I'll just pass on a new string here called new item and then if I check out my dictionary have key

38
00:02:59,980 --> 00:03:04,630
one value one key to value to key new item.

39
00:03:04,630 --> 00:03:06,390
Now I want to make it really clear here.

40
00:03:06,400 --> 00:03:11,920
Dictionaries are an ordered and this may not be clear at first with smaller dictionaries because it

41
00:03:11,920 --> 00:03:15,970
seems like you're just adding in new key item pairs in order.

42
00:03:15,970 --> 00:03:20,860
So let's show an example to really prove to you that dictionaries are unordered mappings.

43
00:03:20,890 --> 00:03:26,440
When you add in Nuki item pairs you're not guaranteed to know the location of them which is why index

44
00:03:26,480 --> 00:03:32,080
things or slicing is really invalid for dictionaries that concept doesn't really make sense for key

45
00:03:32,080 --> 00:03:37,540
value pairs because we're not going to know their actual order going to create a new dictionary.

46
00:03:37,540 --> 00:03:45,830
Here where I have keyway and its value is number one key and its value is in number two.

47
00:03:46,240 --> 00:03:53,980
So if I take a look at my dictionary as to one and then Zia's to two I'm going to create a new key called

48
00:03:53,980 --> 00:03:56,990
new and then set it to the values zero.

49
00:03:57,370 --> 00:04:02,710
And now if I look in my dictionary when it reports it back it's not reporting it back in the order that

50
00:04:02,710 --> 00:04:06,690
I added the key isn't just reporting back the actual key value mappings.

51
00:04:06,730 --> 00:04:09,510
A One News arrow and Z2.

52
00:04:09,580 --> 00:04:15,670
So hopefully this makes it pretty clear to you that the dictionary is an unordered mapping and you are

53
00:04:15,670 --> 00:04:18,970
losing the ability to sort or call of indexing.

54
00:04:19,000 --> 00:04:22,640
If you need that ability you'll need to use a list.

55
00:04:22,690 --> 00:04:26,870
I should also mention that dictionaries are very flexible in the data types they can hold.

56
00:04:26,980 --> 00:04:32,350
So to prove that to you I'm going to make a larger dictionary here we'll have the first key just be

57
00:04:32,530 --> 00:04:38,540
K-1 and keys are just always strings and then the values can be quite flexible so we can see here at

58
00:04:38,550 --> 00:04:41,880
10 that value will have key 2.

59
00:04:41,980 --> 00:04:50,920
Will give it stringy a string as another value and then create another key K-3 and we can even have

60
00:04:51,990 --> 00:04:52,760
a list here.

61
00:04:52,770 --> 00:04:53,760
One two three.

62
00:04:54,180 --> 00:05:00,030
And then we can even have a dictionary inside of a dictionary so we can say K-4 is equal to another

63
00:05:00,030 --> 00:05:08,290
dictionary inside matched with the number 100 or now I can see kind of a complex dictionary.

64
00:05:08,290 --> 00:05:10,790
So let's take a look at what all the keys are holding.

65
00:05:11,010 --> 00:05:13,990
So one is holding the number 10.

66
00:05:14,390 --> 00:05:19,820
K-2 is holding a string called stree K-3 is holding a list.

67
00:05:19,850 --> 00:05:29,270
One two three and K four is holding we'll which we just call K-4 is holding another dictionary and I

68
00:05:29,270 --> 00:05:36,650
can actually stack key value call so if I wanted to grab the number 100 I could type an inside here

69
00:05:36,830 --> 00:05:38,390
and grab the number 100.

70
00:05:38,390 --> 00:05:41,200
Keep in mind that you will get an error if you ask for a key.

71
00:05:41,200 --> 00:05:43,490
That is not present in the dictionary.

72
00:05:43,490 --> 00:05:48,560
For instance if we ask for loops which we know is definitely not a key in this dictionary you'll get

73
00:05:48,560 --> 00:05:54,410
that key error and hopefully this error is pretty obvious that just saying key error it can't find that

74
00:05:54,560 --> 00:05:56,810
key inside your dictionary.

75
00:05:56,810 --> 00:06:01,330
Let's show you a more realistic example of when you would use a dictionary.

76
00:06:01,550 --> 00:06:06,920
As you may already know every United States president has a Secret Service code name that's assigned

77
00:06:06,920 --> 00:06:07,600
to them.

78
00:06:07,910 --> 00:06:13,690
So we're going to create a codenames dictionary and we'll have curly braces here.

79
00:06:15,080 --> 00:06:19,500
Obama's code name was renegade and you can check out the notebook.

80
00:06:19,520 --> 00:06:22,730
That's associate of this lecture for the source on this.

81
00:06:22,730 --> 00:06:26,380
And then Bush's code name was trail blazer.

82
00:06:26,380 --> 00:06:26,680
What's

83
00:06:32,140 --> 00:06:37,390
Reagan's code name was Rawhide.

84
00:06:37,740 --> 00:06:44,130
And then Fort's code name was passkey.

85
00:06:44,290 --> 00:06:49,120
And notice here I can actually type this out over multiple lines because it's all being contained within

86
00:06:49,120 --> 00:06:51,160
these curly braces.

87
00:06:51,160 --> 00:06:55,730
Remember that you are going to need these commas here to separate out the key value pairs.

88
00:06:55,930 --> 00:07:01,720
So now that we run this let's imagine that I quickly wanted to know what the code name was for President

89
00:07:01,720 --> 00:07:02,410
Ford.

90
00:07:02,740 --> 00:07:05,360
Well then we would just passen code names.

91
00:07:05,610 --> 00:07:09,370
Pasand the Ford key and I would quickly get back his code name.

92
00:07:09,370 --> 00:07:12,200
So here's a pretty good example of why I would use a dictionary.

93
00:07:12,350 --> 00:07:18,340
Basically any time you want to quickly store information where key value pairs make sense maybe you

94
00:07:18,340 --> 00:07:20,430
want the populations of countries.

95
00:07:20,800 --> 00:07:31,000
So you say USA it's population in millions is about 323 million population of Germany is about 83 million.

96
00:07:31,630 --> 00:07:41,060
And we can say population of India is like 1.3 billion souls say 1000 324 million.

97
00:07:41,230 --> 00:07:46,450
And then if you quickly wanted to know well what's the population and millions of the United States.

98
00:07:46,450 --> 00:07:49,590
You can just use a dictionary to quickly retrieve that information.

99
00:07:49,630 --> 00:07:54,670
This sort of data structure makes a lot more sense than using a list which essentially just the ordered

100
00:07:54,670 --> 00:07:55,930
sequence.

101
00:07:55,930 --> 00:08:02,020
Finally I want to discuss some key methods that are available to you off a dictionary and that is if

102
00:08:02,020 --> 00:08:09,110
we look at this dictionary population actually let's look at the codenames dictionary you look at the

103
00:08:09,110 --> 00:08:10,120
code names dictionary.

104
00:08:10,190 --> 00:08:12,800
And I want to know all the keys in that dictionary.

105
00:08:12,800 --> 00:08:17,470
I can run keys and get back Obama Bush Reagan Ford if I wanted to.

106
00:08:19,450 --> 00:08:21,610
All the values of the dictionary.

107
00:08:22,030 --> 00:08:23,770
Then I get back the actual values.

108
00:08:23,770 --> 00:08:26,190
Notice here is not telling me what keys are associated.

109
00:08:26,190 --> 00:08:27,010
What values.

110
00:08:27,070 --> 00:08:34,130
If I wanted that connection what I could do is say code names and then call items.

111
00:08:34,480 --> 00:08:41,350
And that gives you back this object where in what's called a tuple or Tapazole the actual matching Obama

112
00:08:41,350 --> 00:08:43,780
renegade Bush trailblazer et cetera.

113
00:08:44,140 --> 00:08:45,550
So great work so far.

114
00:08:45,550 --> 00:08:47,830
We're actually almost done if your basic boot camp.

115
00:08:47,830 --> 00:08:52,870
You just need to learn about sets working with files and you'll be ready for your first field readiness

116
00:08:52,870 --> 00:08:53,770
exam.

117
00:08:53,770 --> 00:08:54,730
I'll see you at the next lesson.

