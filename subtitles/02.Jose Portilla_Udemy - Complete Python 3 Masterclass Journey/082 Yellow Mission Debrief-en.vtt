WEBVTT
1

00:00:01.120 --> 00:00:06.090

Excellent work Agent Let's quickly have a de-briefing over how you completed your last mission



2

00:00:10.430 --> 00:00:12.560

based on intelligence from the Orange mission.



3

00:00:12.560 --> 00:00:14.250

You had two links.



4

00:00:14.330 --> 00:00:21.020

One was a download link for a CSP file which you downloaded and also in instructions for that see as



5

00:00:21.020 --> 00:00:29.780

we file and it looks like we had to find the next link by concatenating all the characters of the third



6

00:00:29.780 --> 00:00:35.340

column of that CACP file and inside of that that will give us a link to a PDF file.



7

00:00:35.450 --> 00:00:40.250

And there's an email address hidden somewhere in that document of that pedia file we needed to find



8

00:00:40.250 --> 00:00:46.700

the e-mail address and send an e-mail to it allowing us to receive a reply with further instructions.



9

00:00:46.700 --> 00:00:48.490

Let's see how we could do this with Python.



10

00:00:50.810 --> 00:00:54.020

So first let's grab that CSP file.



11

00:00:55.740 --> 00:01:02.790

We will say F is equal to open and instead of yellow mission files we have that download link that cxxviii



12

00:01:03.360 --> 00:01:04.880

and we will go ahead and read it.



13

00:01:06.530 --> 00:01:13.010

And we'll say see underscore read physical to CSFB reader and in order to do this we'll need to import



14

00:01:13.460 --> 00:01:14.460

the CXXVI module.



15

00:01:14.470 --> 00:01:23.630

So let's do that import CXXVI and then we'll call F and then the next thing we can do is say Web sites



16

00:01:24.620 --> 00:01:28.880

is equal to an empty string and we want to read in the third column.



17

00:01:28.880 --> 00:01:37.700

So the third column is going to be indexed to meaning or say for row in C read will take our Web site



18

00:01:38.240 --> 00:01:46.620

and then we will concatenate the information wrote to and then if we Cheka take a look at that Web site



19

00:01:46.680 --> 00:01:48.960

we now have a new link.



20

00:01:49.020 --> 00:01:52.800

So let's copy this and go to it in the browser.



21

00:01:53.820 --> 00:01:59.370

So if we go to it in the browser it looks like we have a PDA file called contact e-mail information



22

00:01:59.940 --> 00:02:03.720

and it seems to be just a bunch of Lauren ipsum text.



23

00:02:03.840 --> 00:02:06.700

And somewhere there's contact information.



24

00:02:06.930 --> 00:02:10.210

So we need to find the e-mail within this.



25

00:02:10.320 --> 00:02:12.350

So we already know how to work with P.F. files.



26

00:02:12.570 --> 00:02:15.040

Let's see if we can use that.



27

00:02:15.120 --> 00:02:18.230

The first thing we need to realize is to search for an e-mail.



28

00:02:18.240 --> 00:02:20.560

We need to use regular expressions.



29

00:02:20.970 --> 00:02:23.490

So we're going to import our e.



30

00:02:24.180 --> 00:02:35.960

And then let's have a test string that says this is a test string to practice our irregular expressions



31

00:02:36.290 --> 00:02:45.500

and then e-mail example at test come no handle



32

00:02:48.920 --> 00:02:49.360

OK.



33

00:02:49.490 --> 00:02:52.140

So there's lots of different patterns we could decide on.



34

00:02:52.310 --> 00:02:58.980

But basically what we want to do is a series of alphanumerics and then possibly underscores or wildcards



35

00:02:59.150 --> 00:03:07.630

or dashes then at and then another series of alphanumerics wildcards or possible dashes.



36

00:03:07.640 --> 00:03:17.770

So the way we're going to do this is we will say our pattern is equal to and we'll say backslash W for



37

00:03:17.770 --> 00:03:24.010

alphanumerics and then just in case there's underscores or any other sort of dashes we'll include those



38

00:03:24.010 --> 00:03:31.180

in the group and then we'll say the at symbol and we'll do something very similar for everything else



39

00:03:31.180 --> 00:03:32.990

that could possibly be accurate.



40

00:03:33.950 --> 00:03:35.680

So we'll have that as our pattern.



41

00:03:35.780 --> 00:03:42.940

And let's use the search on our test text to see if it works.



42

00:03:43.000 --> 00:03:47.370

And it looks like we're getting example at just t instead of dot com.



43

00:03:47.380 --> 00:03:49.240

So let's work on this a little bit.



44

00:03:49.240 --> 00:03:53.480

We need to add a plus sign there and there we go we can grab the rest of it.



45

00:03:53.710 --> 00:03:57.350

So it looks like this pattern is working for us in order to grab e-mails.



46

00:03:57.370 --> 00:04:03.720

So let's open up the pedia file and go through all the text of the pages and see if we can find emails.



47

00:04:03.760 --> 00:04:08.000

And the other thing we can do that would be simpler is the search for just the at symbol.



48

00:04:08.080 --> 00:04:15.180

But then that would also pick up things like handle so import my PDA to



49

00:04:18.070 --> 00:04:26.290

and will say physical to open yellow machine files and we have this contact e-mail information PBF and



50

00:04:26.290 --> 00:04:37.790

we'll open it with read binary and we'll say or PTF is PTF file reader.



51

00:04:38.700 --> 00:04:41.120

And let's take a look at the number of pages we have.



52

00:04:41.430 --> 00:04:43.080

So we have 61 pages.



53

00:04:43.260 --> 00:04:49.050

Let's go ahead and make a for loop that goes through these pages and looks for things that look like



54

00:04:49.050 --> 00:04:54.390

this some sort of group of characters alphanumerics the at symbol and then another group of alphanumerics



55

00:04:55.900 --> 00:05:07.820

will say for an in range PTF pages the page will be equal to PTF get the page



56

00:05:10.710 --> 00:05:15.960

at that current index the actual page text will be that page.



57

00:05:15.980 --> 00:05:19.630

And then we will extract the text from it.



58

00:05:20.840 --> 00:05:29.540

And then we'll check for our actual match will say match is equal to our e search and let's grab our



59

00:05:29.540 --> 00:05:30.710

actual pattern here.



60

00:05:30.830 --> 00:05:35.400

Well we can just type in pattern and then type in the page text.



61

00:05:36.560 --> 00:05:44.500

And I will say if there's a match go ahead and print match group and remember match that group just



62

00:05:44.500 --> 00:05:47.010

returns the actual match itself.



63

00:05:47.020 --> 00:05:50.740

Alternatively instead of printing them out we could have saved them as a list.



64

00:05:50.770 --> 00:05:57.810

So let's run through this and it looks like after going through everything we have some hidden links



65

00:05:57.810 --> 00:06:00.130

here that don't seem to be e-mail addresses.



66

00:06:00.270 --> 00:06:01.640

But this one definitely looks familiar.



67

00:06:01.660 --> 00:06:04.000

Looks like info at the gold books Dot com.



68

00:06:04.140 --> 00:06:09.390

And recall that the gold books Dot Com was the very first web site we encountered during the web scraping.



69

00:06:09.510 --> 00:06:15.210

So it looks like it's a good idea to try to send email to info at the gold books Dot Com and see if



70

00:06:15.210 --> 00:06:17.460

we can figure out where this all leads.



71

00:06:17.460 --> 00:06:20.270

In order to send an e-mail to infer the gold bugs that.



72

00:06:20.460 --> 00:06:25.370

Let's go ahead and begin to learn about how to send and receive emails with Python.



73

00:06:25.380 --> 00:06:25.950

We'll see you there.



74

00:06:25.950 --> 00:06:27.900

Agent excellent work so far.



