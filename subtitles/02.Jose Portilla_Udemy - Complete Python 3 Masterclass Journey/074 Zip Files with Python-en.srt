1
00:00:00,830 --> 00:00:01,980
Welcome back agent.

2
00:00:02,300 --> 00:00:08,410
Let's quickly discuss how to work with zip files with Python as you know the results of the previous

3
00:00:08,410 --> 00:00:11,200
read Mission left you with a zip file.

4
00:00:11,470 --> 00:00:18,460
Fortunately Python's zip file and S H you till modules support working with zip files.

5
00:00:18,620 --> 00:00:20,560
There's basically two different approaches.

6
00:00:20,600 --> 00:00:26,560
The ZIP File module allows for first creating a zip archive and then adding individual files to it.

7
00:00:26,570 --> 00:00:31,820
It's kind of similar to creating a file and then writing lines to it except you create zip archive and

8
00:00:31,820 --> 00:00:38,120
then you add separate files to that zip archive the issue module allows for quickly compressing an entire

9
00:00:38,120 --> 00:00:43,310
directory into a zip archive as well as unpacking that archive later on.

10
00:00:43,490 --> 00:00:47,570
More likely than not you're going to be using that second approach because it's more similar to what

11
00:00:47,570 --> 00:00:54,140
you're used to based on just a normal graphical interface of a computer where you right click on a folder

12
00:00:54,140 --> 00:01:01,110
or directory and then zip it or you right click on the zip file and then unpack it or unzip it somewhere.

13
00:01:01,250 --> 00:01:06,470
Let's explore these modules use cases with zip files and show you quickly how easy it is to work with

14
00:01:06,470 --> 00:01:12,750
zip files in Python.

15
00:01:12,780 --> 00:01:17,570
The first thing we're going to need to do is actually create some files to compress to do that.

16
00:01:17,580 --> 00:01:25,260
We're going to very quickly open some new files that don't exist yet and we'll do this with the right

17
00:01:25,320 --> 00:01:28,830
plus that way we can actually write some stuff to them.

18
00:01:28,830 --> 00:01:34,500
So I'll say all right and then say here is some text and then we'll close this file.

19
00:01:36,940 --> 00:01:42,580
Then we're going to do the exact same thing except we're going to rename this to two that we've created

20
00:01:43,080 --> 00:01:44,590
to text files.

21
00:01:44,590 --> 00:01:51,720
Now the next step is to import the zip file library meaning we'll import zip file and this is already

22
00:01:51,720 --> 00:01:57,120
built into Python and you can use that to compress folders or files and to compress all the files in

23
00:01:57,120 --> 00:02:02,130
a folder you could use the OS the walk method and iterate this process but let's first describe the

24
00:02:02,130 --> 00:02:04,600
very basics first.

25
00:02:04,620 --> 00:02:08,060
What you do is you create some sort of compressed file.

26
00:02:08,430 --> 00:02:16,080
So we say comp underscore file is a variable you call the zip file and then you call the Capitol zip

27
00:02:16,080 --> 00:02:24,450
file off of this whoops and you allow yourself to create the name of whatever the compressed zip file

28
00:02:24,450 --> 00:02:25,500
is going to be.

29
00:02:25,560 --> 00:02:33,800
So you can say whatever you want this to be my compressed info zip and then you create that with the

30
00:02:33,840 --> 00:02:35,140
right method.

31
00:02:35,700 --> 00:02:41,860
So now we've created a empty zip file and we can compress things into this zip file.

32
00:02:41,880 --> 00:02:46,500
So I already created two text files remember and you file that text and you file to that text.

33
00:02:46,500 --> 00:02:51,420
Let's go ahead and write these into that zip file and then we do that is the following say comp.

34
00:02:51,450 --> 00:02:54,890
Underscore file and then you write to the zip file.

35
00:02:54,960 --> 00:02:57,910
You give it the file path or whatever you want to write to it.

36
00:02:58,230 --> 00:03:05,430
So for example you file that text and then you indicate your compressed types or how you actually want

37
00:03:05,430 --> 00:03:06,820
to compress this.

38
00:03:06,840 --> 00:03:14,680
Now we're going to use a built in compression type in the zip file which is good for most purposes which

39
00:03:14,780 --> 00:03:15,280
is zip.

40
00:03:15,330 --> 00:03:17,580
Underscore the flat is in all caps.

41
00:03:17,580 --> 00:03:23,220
So you can run that and let's copy and paste this line and run it again except this time we're going

42
00:03:23,220 --> 00:03:25,590
to do this for the other text file.

43
00:03:26,310 --> 00:03:30,990
And then once you've written all your text files and compress them into a zip file you go ahead and

44
00:03:30,990 --> 00:03:39,770
close that zip file and that's the basic way to use the zip file library for actually writing to a zip

45
00:03:39,770 --> 00:03:40,550
file.

46
00:03:40,550 --> 00:03:45,350
So this method's idea is to first create the zip file that's empty and then you would write individual

47
00:03:45,350 --> 00:03:48,490
files to them and compress them as you go along.

48
00:03:48,500 --> 00:03:54,320
Now that we've written to the zip file the next step would be to extract from the zip file and the way

49
00:03:54,320 --> 00:03:57,910
you do that is pretty similar to actually reading a normal file.

50
00:03:58,160 --> 00:04:08,690
You say whatever zip object you have you call zip file zip file and then you passen whatever file is

51
00:04:08,810 --> 00:04:09,380
compressed.

52
00:04:09,380 --> 00:04:16,640
So in this case it's my compressed info that zip and will only be reading the zip file and there's different

53
00:04:16,640 --> 00:04:23,150
methods you can use here if you just want to grab everything what you can do is say extract all and

54
00:04:23,210 --> 00:04:25,450
make up a folder name where it's going to go.

55
00:04:25,610 --> 00:04:31,210
So you can say extracted content and it's going to extract everything there.

56
00:04:31,730 --> 00:04:34,300
So later on you could check and you'll have a folder there.

57
00:04:34,460 --> 00:04:40,160
If you only wanted to extract an individual file the way you would do that is very similarly you would

58
00:04:40,160 --> 00:04:46,340
say zip object except in this case you would just say extract and then whatever file you want it to

59
00:04:46,340 --> 00:04:47,060
extract.

60
00:04:47,240 --> 00:04:54,620
So for instance I know there's new file that Texian there so I can extract that one and it extracts

61
00:04:54,620 --> 00:04:55,800
it from the zip file.

62
00:04:55,940 --> 00:05:00,110
Decompresses it and saves it to wherever this notebook is happens to be.

63
00:05:00,110 --> 00:05:03,770
So those are really all the methods you need to know when dealing with the zip file.

64
00:05:03,770 --> 00:05:09,510
You create a zip file with write mode and then you write individual files to it as you compress them.

65
00:05:09,620 --> 00:05:10,370
Then you close it.

66
00:05:10,430 --> 00:05:15,020
If you ever want to extract everything you just open it in read mode and then you can either extract

67
00:05:15,080 --> 00:05:18,100
everything or you can extract individual files.

68
00:05:18,110 --> 00:05:25,580
Finally let's discuss how to use the s h you still module in order to archive or extract zip files and

69
00:05:25,580 --> 00:05:27,780
actually supports a variety of formats.

70
00:05:27,800 --> 00:05:34,190
It's a little easier to use than the zip file method just because you can quickly extract or zip up

71
00:05:34,190 --> 00:05:37,390
an entire directory instead of doing it line by line.

72
00:05:37,460 --> 00:05:42,170
But keep in mind that file definitely has these methods as well because it can extract everything at

73
00:05:42,170 --> 00:05:47,710
once using extract all billets but see to do this the first thing you need to do is say import s h you

74
00:05:47,710 --> 00:05:54,560
still and then there's essentially just two commands make archive and unpack archive.

75
00:05:54,780 --> 00:05:56,440
We can say s h that you tell.

76
00:05:56,500 --> 00:06:00,230
And if we want to make an archive there's three main parameters.

77
00:06:00,270 --> 00:06:03,110
The first one is the output file name.

78
00:06:03,170 --> 00:06:05,970
In this case you just passing whatever you want the file to be called.

79
00:06:06,050 --> 00:06:10,800
You can say my new compressed file or whatever you want to call it.

80
00:06:11,300 --> 00:06:14,980
And then the second parameter is the actual method you're going to be using.

81
00:06:15,020 --> 00:06:22,520
And there's only a few acceptable strings but there's zip Tar Tar Tar and X Zaatar.

82
00:06:22,580 --> 00:06:26,450
You can check the documentation for information about all those but those are essentially just different

83
00:06:26,450 --> 00:06:29,170
extensions for zipping things together.

84
00:06:29,360 --> 00:06:30,390
We'll stick with zip.

85
00:06:30,430 --> 00:06:35,930
So you pass it in as a string and like I said this could be something like TJR or GZ Taar in case you

86
00:06:35,930 --> 00:06:37,510
need that particular format.

87
00:06:37,730 --> 00:06:43,220
And then you in the directory to zip up and remember that it needs to be a directory not just a single

88
00:06:43,220 --> 00:06:44,050
file.

89
00:06:44,420 --> 00:06:50,450
So in this case I know that there's a directory in the same location as this notebook called I believe

90
00:06:50,450 --> 00:06:52,220
my example folder.

91
00:06:52,220 --> 00:06:52,990
There it is.

92
00:06:53,210 --> 00:06:58,860
So we'll go ahead and just zip up my example folder and then if you run that it just created a mine

93
00:06:58,860 --> 00:07:03,310
you compressed and note here it says zip because that's what we provide.

94
00:07:03,310 --> 00:07:04,460
Here's a second parameter.

95
00:07:04,550 --> 00:07:09,320
You don't need to say that zip when you do it in this first parameter.

96
00:07:09,320 --> 00:07:11,950
Finally let's discuss how to unpack the archive.

97
00:07:11,990 --> 00:07:17,780
It's quite simple you just say sh you till and then you unpack the archive will you have to be aware

98
00:07:17,780 --> 00:07:19,350
of here for the unpacking.

99
00:07:19,460 --> 00:07:25,730
The order is a little different than what we had earlier at least the parameter names are a little different.

100
00:07:25,730 --> 00:07:30,950
You just passen the file name the extraction directory and then the format.

101
00:07:30,950 --> 00:07:31,760
And if you expand this.

102
00:07:31,760 --> 00:07:36,290
Ill tell you the file names the name of the archive itself which you already established is mine you

103
00:07:36,290 --> 00:07:37,580
compressed that zip.

104
00:07:37,580 --> 00:07:45,500
So let's pass that in mind you compressed zip and then the other parameters want to do is the extraction

105
00:07:45,500 --> 00:07:48,150
directory is just the name that you make up.

106
00:07:48,150 --> 00:07:56,410
So you can say my extracted content and then finally it wants the format it was in.

107
00:07:56,420 --> 00:07:59,340
So it could just tell it it was in zip format.

108
00:07:59,420 --> 00:08:00,110
We run that.

109
00:08:00,110 --> 00:08:04,460
And now if you take a look at your computer you should have the extracted content in this folder you

110
00:08:04,460 --> 00:08:07,900
just created at the same location that this notebook isn't.

111
00:08:07,970 --> 00:08:12,020
Again pretty simple approaches for both of them but this one tends to be a little more convenient because

112
00:08:12,020 --> 00:08:16,190
you can quickly archive and unpack archives which just a single line of code.

113
00:08:16,190 --> 00:08:16,540
All right.

114
00:08:16,550 --> 00:08:20,750
Agent you should not have all the skills necessary to pass the orange mission.

115
00:08:20,750 --> 00:08:21,690
Best of luck.

