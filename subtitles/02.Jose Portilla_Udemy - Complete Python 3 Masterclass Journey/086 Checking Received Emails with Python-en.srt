1
00:00:00,940 --> 00:00:02,110
Welcome back agent.

2
00:00:02,140 --> 00:00:08,410
Now that we know how to send e-mails let's review how we can use Python to view received e-mails to

3
00:00:08,410 --> 00:00:10,060
view received e-mails of Python.

4
00:00:10,060 --> 00:00:14,830
We can use the built in IMAP live and email libraries in Python.

5
00:00:14,830 --> 00:00:18,660
The IMAP lib library has a special syntax for searching your inbox.

6
00:00:20,040 --> 00:00:25,080
There's a table like this in the notebook corresponding to this lesson but basically the idea is that

7
00:00:25,080 --> 00:00:30,420
there are particular keywords and then there's definitions that refer to those keywords and you'll be

8
00:00:30,420 --> 00:00:37,470
able to search your inbox for particular emails such as checking emails by date so you have keywords

9
00:00:37,470 --> 00:00:42,240
like before date on a date or since day checking emails based on who sent them.

10
00:00:42,240 --> 00:00:46,960
So from some sort of e-mail or hoost you sent them to to some e-mail.

11
00:00:47,100 --> 00:00:49,350
You can also check by s.c or BCSC.

12
00:00:49,350 --> 00:00:54,690
So a carbon copy or blind carbon copy you can also check by the subject string the body string or just

13
00:00:54,780 --> 00:01:00,170
any text string and you can also return emails based if you've seen them or you haven't seen them.

14
00:01:00,210 --> 00:01:05,380
If you answer them or if you haven't answered them and also deleted or undelete messages as long as

15
00:01:06,030 --> 00:01:10,510
as long as they still exist in your trash bin a certain e-mail providers will automatically erase everything

16
00:01:10,520 --> 00:01:12,640
or trashman after 30 days.

17
00:01:12,690 --> 00:01:17,070
So you can see here that there's a lot of keywords and functionality built in to what we're going to

18
00:01:17,070 --> 00:01:20,670
be using before beginning this discussion.

19
00:01:20,670 --> 00:01:24,870
Go ahead and send yourself a test e-mail with some sort of unique subject line that you will be able

20
00:01:24,870 --> 00:01:27,040
to remember and search for using Python.

21
00:01:27,210 --> 00:01:31,540
Or you can simply use the last e-mail that you sent yourself from the previous lesson.

22
00:01:31,620 --> 00:01:36,790
Let's begin exploring checking received e-mails of Python by loading up a Jupiter notebook.

23
00:01:36,930 --> 00:01:43,710
The first thing we're going to do is import the IMAP lib library that's built into Python and we'll

24
00:01:43,710 --> 00:01:45,070
create an instance of it.

25
00:01:45,540 --> 00:01:50,460
And you can call this variable whatever you want but a lot of times people call it capital M and will

26
00:01:50,460 --> 00:02:00,390
say IMAP lib and then call IMAP for S S L and then we'll pass in the IMAP server for Gmail which is

27
00:02:00,510 --> 00:02:08,910
IMAP gmail dot com and then we need to grab our password and email.

28
00:02:09,230 --> 00:02:21,360
So to do that you can either use input or get pass it will say that our email is equal to get pass get

29
00:02:21,360 --> 00:02:32,510
pass email and then we'll also grab our actual password for the email get pass get pass and remember

30
00:02:32,510 --> 00:02:35,570
for Gmail users this is your app password.

31
00:02:35,570 --> 00:02:36,710
So let's run this.

32
00:02:36,800 --> 00:02:44,270
Well go ahead enter your e-mail for whatever you happen to be using.

33
00:02:44,510 --> 00:02:46,390
And then you can also put in your password.

34
00:02:46,400 --> 00:02:48,730
In this case I'm putting in the app password.

35
00:02:49,220 --> 00:02:50,120
Let's now connect.

36
00:02:50,120 --> 00:02:55,480
We can say that log in and we'll pass an email and password.

37
00:02:56,450 --> 00:03:02,000
Run that and you should be able to log in you should see some sort of authenticated success message

38
00:03:02,000 --> 00:03:02,870
there.

39
00:03:02,870 --> 00:03:07,800
Once you've done that you'll be able to type in that list as a method.

40
00:03:07,880 --> 00:03:12,500
Run them and you can see everything that you can check in your particular email.

41
00:03:12,500 --> 00:03:14,120
Typically you'll be checking your inbox.

42
00:03:14,120 --> 00:03:20,270
You can also see you can check personal receipts sent trash things labeled travel or work drafts important

43
00:03:20,330 --> 00:03:26,480
sent mail spam start trash so there's lots of different options different flags that Gmail or other

44
00:03:26,480 --> 00:03:28,190
e-mail providers have for you.

45
00:03:28,260 --> 00:03:35,220
We're going to select the most common one which is your inbox meaning we'll say em select and we'll

46
00:03:35,270 --> 00:03:43,120
passen inbox run that and then it should say ok and some sort of connection number to your inbox your

47
00:03:43,120 --> 00:03:45,680
number will likely be different than mine here.

48
00:03:46,030 --> 00:03:49,810
And then now that we've connected to our mail we're going to be able to search for it using the specialized

49
00:03:49,810 --> 00:03:51,430
syntax of IMAP.

50
00:03:51,430 --> 00:03:57,910
Now the next step after we've logged in is to actually search our inbox and this is the sort of syntax

51
00:03:57,940 --> 00:04:01,560
you can use to specify what messages you're looking for.

52
00:04:01,690 --> 00:04:06,020
In our case we will attempt to search for that e-mail that we just sent earlier.

53
00:04:06,040 --> 00:04:14,970
That was a subject line new test Python so we say type and data to basically doing tuple and packing

54
00:04:15,340 --> 00:04:21,760
because the actual search function that we call is going to return a tuple and you passen none as the

55
00:04:21,760 --> 00:04:22,970
first argument.

56
00:04:23,290 --> 00:04:27,510
And then the second argument is actual string that uses this sort of code.

57
00:04:27,640 --> 00:04:36,700
So you can say for instance before and then format a date such as 0 1 November 2000 and this will essentially

58
00:04:36,700 --> 00:04:41,400
search or e-mail and return back everything sent before 0 1 November 2000.

59
00:04:41,440 --> 00:04:46,440
Or you could do on a certain day or since a certain day you can do from a certain string.

60
00:04:46,450 --> 00:04:55,870
So for example you could say from user at example dot com and maybe didn't know who the actual user

61
00:04:55,870 --> 00:04:56,300
was.

62
00:04:56,320 --> 00:05:03,220
At this example dotcom do you think you could say just from example and it will search for all the e-mail

63
00:05:03,220 --> 00:05:06,670
addresses from and see if the string example is in there.

64
00:05:06,690 --> 00:05:12,200
Do you think you can do that we're going to be doing a search by subject to notice how these keywords

65
00:05:12,200 --> 00:05:17,970
are capitalized will say subject and then inside of this string will have another substring.

66
00:05:17,990 --> 00:05:20,900
And this will be the actual string worth checking for.

67
00:05:20,900 --> 00:05:25,660
So the subject line that we passed and last time was new test Python.

68
00:05:25,730 --> 00:05:27,100
So that's what we're going to be searching here.

69
00:05:27,110 --> 00:05:29,310
Notice how it's a string inside of a string.

70
00:05:29,610 --> 00:05:33,270
And let's run this and see what we get.

71
00:05:33,770 --> 00:05:36,380
If you select type it should say OK.

72
00:05:36,470 --> 00:05:39,520
And if you have data it should have some sort of number.

73
00:05:39,560 --> 00:05:44,140
If you don't have any sort of number returned here it means it didn't find any messages.

74
00:05:44,210 --> 00:05:49,730
If you have multiple numbers here in a list that means it found more than one message that relates to

75
00:05:49,730 --> 00:05:52,670
whatever search term you were looking for.

76
00:05:52,700 --> 00:05:56,980
So this unique ID is the ID that references the actual email.

77
00:05:56,990 --> 00:05:59,360
We don't have the email itself yet to do that.

78
00:05:59,360 --> 00:06:01,830
We now need to fetch the actual data.

79
00:06:01,910 --> 00:06:09,260
So if we take a look at the first item in this list it's this unique ID so we will say ID is equal to

80
00:06:09,290 --> 00:06:16,230
also email ID email ID is equal to that item in the list and then will say results.

81
00:06:16,510 --> 00:06:26,040
Email underscore data is equal to m and then we end up fetching that particular email id and then for

82
00:06:26,070 --> 00:06:32,310
a second argument we need to pass in a protocol and the call for that is a string with parentheses are

83
00:06:32,350 --> 00:06:35,980
f c 8 to 2.

84
00:06:36,020 --> 00:06:41,630
Now that we've actually fetched the e-mail data we can take a look at the e-mail data and it's basically

85
00:06:41,630 --> 00:06:43,820
going to be a bit of a sloppy mess.

86
00:06:43,830 --> 00:06:46,900
There's lots of information here the e-mails.

87
00:06:46,910 --> 00:06:51,230
But if you take a look down here we can see that we have the subject and we actually have the message

88
00:06:51,230 --> 00:06:51,910
we sent.

89
00:06:51,950 --> 00:06:52,210
Hello.

90
00:06:52,220 --> 00:06:55,940
This is a test and this is all within a list within some tuples.

91
00:06:55,970 --> 00:06:58,840
So we just want to grab the actual message itself.

92
00:06:58,970 --> 00:07:02,290
So we're going to do is index for it.

93
00:07:03,600 --> 00:07:04,400
We'll type out.

94
00:07:04,460 --> 00:07:09,360
Email is equal to e-mail data and it's index position.

95
00:07:09,360 --> 00:07:13,110
You may need to play around for this but in our case it's at 0 1.

96
00:07:13,110 --> 00:07:15,360
So that's the raw e-mail itself.

97
00:07:15,360 --> 00:07:23,800
And we want the raw email string we'll type out raw e-mail string is equal to this raw e-mail and we're

98
00:07:23,800 --> 00:07:25,350
going to need to decode it.

99
00:07:25,360 --> 00:07:29,670
And the reason for that is because there may be symbols such as the at symbol which is confusing the

100
00:07:29,680 --> 00:07:30,890
python sometimes.

101
00:07:30,970 --> 00:07:36,820
So we want to clarify that we're going to decode it UTF 8 encoding and then once we've done that we

102
00:07:36,820 --> 00:07:40,660
can use the built in e-mail library to help parse that string.

103
00:07:40,800 --> 00:07:47,250
We will import e-mail and this e-mail library helps grab the actual message from a stream.

104
00:07:48,070 --> 00:07:52,180
And the syntax is it still a bit strange but it looks like this.

105
00:07:52,180 --> 00:07:59,040
You say email message and then from the e-mail that we just imported we'll type out message from.

106
00:07:59,180 --> 00:08:05,010
In this case we're grabbing the message from a string and then we in that raw email string that we just

107
00:08:05,010 --> 00:08:05,730
created.

108
00:08:07,110 --> 00:08:12,890
And then once we've done that we need to do the following the actual email message object here.

109
00:08:12,910 --> 00:08:22,290
If we take a look at it it's this iterator and what we need to do is say for every part in the e-mail

110
00:08:22,290 --> 00:08:24,770
message the walk.

111
00:08:24,870 --> 00:08:38,520
So you can kind of walk through this email message object if part dot get content type is equal to text

112
00:08:38,560 --> 00:08:39,970
forwards slash plain

113
00:08:42,840 --> 00:08:58,020
then body is equal to parts dot get payload and say the code is equal to true and then prints the body.

114
00:08:58,020 --> 00:09:03,570
Now this is quite complicated but the reason this is complicated is because we're basically going from

115
00:09:03,570 --> 00:09:09,760
that rostering email message and trying to get rid of all the other information that came in through

116
00:09:09,760 --> 00:09:11,010
the e-mail data.

117
00:09:11,010 --> 00:09:15,420
There's a lot of different ways you could decide to look through the subject once you have the sexual

118
00:09:15,450 --> 00:09:16,800
e-mail data yourself.

119
00:09:16,980 --> 00:09:19,020
It's optional to use this e-mail library.

120
00:09:19,020 --> 00:09:24,030
Sometimes people feel that it's more of a hassle to use this e-mail library rather make their own custom

121
00:09:24,030 --> 00:09:25,940
script to grab that e-mail data.

122
00:09:25,980 --> 00:09:30,540
And if you're dealing with e-mails that look the same every time maybe it's from some API service it

123
00:09:30,540 --> 00:09:34,080
might make sense to not use the sexual e-mail library that's built in.

124
00:09:34,290 --> 00:09:35,650
But if you do want to use e-mail.

125
00:09:35,690 --> 00:09:42,090
BILTON once you have the raw e-mail string from your actual e-mail data after you've decoded it he typed

126
00:09:42,090 --> 00:09:46,680
out e-mail message from string and then you save for part an e-mail message walk.

127
00:09:46,860 --> 00:09:52,180
If the car get Content-Type which basically asks Hey what is the content type of the part.

128
00:09:52,250 --> 00:09:58,440
And if it's equal to text for Slash plain meaning it's plain text you grab the payload of that part

129
00:09:58,500 --> 00:10:01,810
decoding it and then that's the actual variable that we want to see.

130
00:10:01,860 --> 00:10:06,900
So if we print this out we should be able to see the actual body of the message which is hello this

131
00:10:06,900 --> 00:10:11,760
is a test and this be indicates that it's a byte stream just because the way we read in that e-mail

132
00:10:11,930 --> 00:10:12,870
data.

133
00:10:13,140 --> 00:10:18,000
Keep in mind this sort of content type check text forward slash plane.

134
00:10:18,150 --> 00:10:21,610
That's if you only expect just plain text.

135
00:10:21,630 --> 00:10:26,060
Well you could also do is maybe expect text slash HVM mail.

136
00:10:26,280 --> 00:10:27,150
And that's really common.

137
00:10:27,150 --> 00:10:30,420
If someone has provided a link inside of the e-mail.

138
00:10:30,690 --> 00:10:35,750
So if you expect another link to be in the e-mail that was sent to you you may want to check for text

139
00:10:35,750 --> 00:10:40,750
forward slash HVM L instead of text forward slash plane OK.

140
00:10:40,940 --> 00:10:44,500
That's it for the basics of checking your received e-mail with Python.

141
00:10:44,660 --> 00:10:47,180
Let's quickly go over all the steps.

142
00:10:47,180 --> 00:10:49,720
All you have to do is import IMAP lib.

143
00:10:49,730 --> 00:10:55,850
Make the connection to your IMAP server so it's IMAP that gmail dot com or I'm up at yahoo dot com depending

144
00:10:55,850 --> 00:10:58,200
on what your actual domain provider is.

145
00:10:58,280 --> 00:11:02,090
Then grab your email and password log in.

146
00:11:02,090 --> 00:11:06,590
You can see a list of options but typically you'll be searching your inbox and then using the special

147
00:11:06,590 --> 00:11:12,160
syntax code you search for whatever you're looking for whether it's a particular subject whether it's

148
00:11:12,400 --> 00:11:16,160
a particular email it's from a date that it was sent on you get back.

149
00:11:16,160 --> 00:11:21,960
The type and data and the data recall is just a list of actual email ids.

150
00:11:22,070 --> 00:11:27,410
Once you have the e-mail IDs you need to fetch them and here are fetching a senior or email id and we

151
00:11:27,420 --> 00:11:32,870
passen this protocol for fetching it and then we have the email data and it's kind of up to you what

152
00:11:32,870 --> 00:11:35,440
you want to do at that point because it's a bit of a mess.

153
00:11:35,450 --> 00:11:40,190
But one way you can deal with it is using this email library and then using this lock functionality

154
00:11:40,460 --> 00:11:43,160
to check for particular content types.

155
00:11:43,160 --> 00:11:44,490
All right that's it.

156
00:11:44,570 --> 00:11:45,800
It's time for your mission.

157
00:11:45,800 --> 00:11:46,880
Best of luck on Agent.

