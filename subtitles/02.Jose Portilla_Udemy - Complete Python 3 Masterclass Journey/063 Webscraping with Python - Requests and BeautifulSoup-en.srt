1
00:00:01,190 --> 00:00:06,140
Welcome back agents in order to complete your first mission you're going to need to understand how to

2
00:00:06,140 --> 00:00:08,510
perform web scraping with Python.

3
00:00:09,930 --> 00:00:15,770
To which group of python we need to understand the basic concept of how a general basic web site works.

4
00:00:16,030 --> 00:00:21,760
When a browser loads the Web site the user gets to see what is known as the front end of the Web site.

5
00:00:21,880 --> 00:00:26,440
When we discuss the front end of the web what we're really talking about is the part of the web that

6
00:00:26,440 --> 00:00:28,340
you can see and interact with.

7
00:00:28,470 --> 00:00:35,050
And the main components of the front end of a web page are the HCM l the CSSA and the javascript.

8
00:00:35,050 --> 00:00:40,420
When discussing the back end and those are things like interactions of a database how the application

9
00:00:40,420 --> 00:00:41,960
actually stores its data.

10
00:00:42,250 --> 00:00:47,620
For our purposes we're generally going to be web scraping from the front end of a Web site to get the

11
00:00:47,620 --> 00:00:53,080
back and informational Web site you will need to use what's known as an API or application programming

12
00:00:53,110 --> 00:00:55,400
interface to perform web scraping.

13
00:00:55,400 --> 00:00:58,510
However we're really just dealing with the front end components.

14
00:00:58,580 --> 00:01:05,830
Again the H team L C Ss and Javascript mail is used to create the basic structure and content of what

15
00:01:05,830 --> 00:01:13,540
page CSSA is used for the design and style of a web page basically telling where HDMI elements are placed

16
00:01:13,600 --> 00:01:15,030
and what they look like.

17
00:01:15,070 --> 00:01:22,000
Javascript is used to define the interactive elements of a web page for effective basic web scraping.

18
00:01:22,000 --> 00:01:26,780
We actually only really need to understand the basics of team L and C Ss.

19
00:01:26,890 --> 00:01:33,540
Python can view T.M. and C Ss elements programmatically and then extract information from the Web site.

20
00:01:33,550 --> 00:01:36,620
Let's explore HTL and see SS in a little more detail.

21
00:01:36,730 --> 00:01:40,680
Since that's what we're really going to be working with with Python and web scraping.

22
00:01:42,240 --> 00:01:48,410
HVM else stands for hypertext markup language and is present on pretty much every Web site on the Internet.

23
00:01:48,470 --> 00:01:54,320
You can right click on any website and select View page source to view an example of what the HTML actually

24
00:01:54,320 --> 00:01:55,380
looks like.

25
00:01:55,400 --> 00:01:58,820
Let's see a small example of each team of code here I can see.

26
00:01:58,820 --> 00:02:05,210
I've loaded up Google dot com and I've searched for Python I can right click on this and select View

27
00:02:05,210 --> 00:02:10,310
page source and this will load up the actual Tim L and we can see here.

28
00:02:10,320 --> 00:02:15,320
For such a complex web site this HTL file is huge and has a lot of information.

29
00:02:15,330 --> 00:02:20,490
Python is going to be able to read this information and find certain key components you're looking for

30
00:02:20,730 --> 00:02:24,900
based on elements and style tags which is what we're going to be learning about.

31
00:02:25,200 --> 00:02:31,080
Let's start by looking at a much smaller and simpler example of HCM L instead of such a large one such

32
00:02:31,080 --> 00:02:32,490
as the one present on Google.

33
00:02:32,610 --> 00:02:39,030
Here's our smaller h tim l file and it has several main components that are present in basically all

34
00:02:39,030 --> 00:02:46,230
major Web sites is each team all files and we start off with this doc type H.T. male and female documents

35
00:02:46,230 --> 00:02:51,240
will always start with this type declaration and it just lets the browser know that the file itself

36
00:02:51,300 --> 00:02:53,170
is an HTML file.

37
00:02:53,340 --> 00:02:58,320
Then we have the component blocks of the H.T. mail file and those are going to be placed between the

38
00:02:58,380 --> 00:03:00,120
opening tag for each team.

39
00:03:00,360 --> 00:03:05,760
And the closing type for each T.M. and you can see that the closing tag has that forward slash to differentiate

40
00:03:05,760 --> 00:03:07,600
it from the opening tag.

41
00:03:07,800 --> 00:03:13,680
Then we have meta data and script connections and those will be placed in the head block of the HVM

42
00:03:13,810 --> 00:03:14,670
file.

43
00:03:14,670 --> 00:03:20,130
And this is where you can provide things like the title of the web page links to CSSA files or links

44
00:03:20,130 --> 00:03:21,680
to javascript files.

45
00:03:21,750 --> 00:03:27,840
In this particular head tag we can see that we have a title block and the title tag block defines the

46
00:03:27,840 --> 00:03:33,350
title of the web page and the title of the page is what's actually showing up when you visit a Web site.

47
00:03:33,360 --> 00:03:37,750
You can look at your tab in your browser and all have some text there.

48
00:03:37,890 --> 00:03:39,210
That's the actual title.

49
00:03:40,790 --> 00:03:46,660
Than in between the opening and closing body tags are the blocks that will be visible to the site visitor

50
00:03:47,350 --> 00:03:50,200
and headings are defined with an H tag.

51
00:03:50,200 --> 00:03:55,300
So we have H-1 through age 6 where the number represents the size of the headings so you have these

52
00:03:55,300 --> 00:03:55,930
heading tags.

53
00:03:55,930 --> 00:03:59,120
Here we can see Web site hetter is an H1 tag.

54
00:03:59,350 --> 00:04:02,020
Essentially it's kind of larger more bold text.

55
00:04:02,080 --> 00:04:07,960
And then we have paragraph tags and paragraph tags were defined by that p tag and essentially just a

56
00:04:07,960 --> 00:04:09,850
normal text on the Web site.

57
00:04:09,850 --> 00:04:13,840
Now there's a lot more tags than just these there's the a tag for hyperlinks.

58
00:04:13,990 --> 00:04:19,690
The table tab for tables are for table rows tiddy for table columns and much more.

59
00:04:19,690 --> 00:04:25,420
All you really need to understand is that there are tags associated with the actual content on a web

60
00:04:25,420 --> 00:04:26,220
page.

61
00:04:26,230 --> 00:04:31,960
So if we wanted to extract text some paragraph we would need to figure out what tag it was associated

62
00:04:31,960 --> 00:04:32,460
with it.

63
00:04:32,470 --> 00:04:41,040
In this case the p or paragraph tag now is discuss S. S. S. S. S. S. stands for cascading style sheets

64
00:04:41,130 --> 00:04:48,240
and it truly what gives style to a Web site and CSSA uses tags to define what each T.M. elements will

65
00:04:48,240 --> 00:04:52,720
be styled so few example see it says.

66
00:04:52,720 --> 00:04:54,770
Tags are an ID tag.

67
00:04:54,910 --> 00:05:01,080
And this is a tag that stands for a single element in the T.M. and it should be unique in the HTML document.

68
00:05:01,120 --> 00:05:03,430
Then you also have class tags.

69
00:05:03,580 --> 00:05:09,250
And those are tags used to define a general style to be linked to multiple HTML tags so let's actually

70
00:05:09,250 --> 00:05:11,550
get an idea of what this looks like.

71
00:05:12,950 --> 00:05:19,460
If we take a look back at a very basic Tim L. script where each team l file you can see that now in

72
00:05:19,460 --> 00:05:23,540
the head block we've added this stylesheets link.

73
00:05:23,570 --> 00:05:30,320
So with this link tag does it basically saying that the relationship is a style sheets or ECAC sheet

74
00:05:30,800 --> 00:05:34,050
and Tref says Where'd actually find the sheet.

75
00:05:34,100 --> 00:05:41,250
In this case this file happens to be called styles Dotsie SS and then we can see that we actually have

76
00:05:41,250 --> 00:05:42,350
an ID tag.

77
00:05:42,360 --> 00:05:50,280
Now on that Petrof in the H.T. L So the H team L was the paragraph saying some text and we've added

78
00:05:50,430 --> 00:05:56,100
some information here and read where we say ID is equal to Para 2 or whatever you want to call that

79
00:05:56,100 --> 00:06:05,160
ID that tells the T.M. that this particular text should be styled in whatever format the ID P-A are

80
00:06:05,160 --> 00:06:08,130
a to happens to be styled in.

81
00:06:08,400 --> 00:06:12,100
So that styles that CSSA file would look something like this.

82
00:06:12,150 --> 00:06:19,350
It would say hash tag parit to basically indicating that it's a unique ID and then it would have a list

83
00:06:19,410 --> 00:06:23,890
of different stylings to apply to that text some text here.

84
00:06:24,180 --> 00:06:30,190
So we can make it the color red or we can make it a different font family or different size 6 cetera.

85
00:06:30,210 --> 00:06:31,720
So there's lots of options there.

86
00:06:31,980 --> 00:06:38,110
All things having to do with the design and style whether you want to align to the left or to the right.

87
00:06:38,120 --> 00:06:44,000
So again we have for each team all file we link it to some other file that's a stylesheet and then the

88
00:06:44,000 --> 00:06:49,190
style sheet has rules of what the actual design should look like what color should be what font family

89
00:06:49,220 --> 00:06:53,800
etc. and we can link them through this link tag.

90
00:06:53,900 --> 00:06:59,660
And then on the actual elements we want to style we can provide them with an ID so the ID you should

91
00:06:59,660 --> 00:07:06,240
only be using it once in each team M-file that you can imagine that you had multiple things you wanted

92
00:07:06,240 --> 00:07:08,600
to style with the same styling.

93
00:07:08,610 --> 00:07:11,370
In that case you're going to use a class.

94
00:07:11,370 --> 00:07:17,160
So here we can see that we have a class tag inside of this h team l elements some text and some other

95
00:07:17,160 --> 00:07:18,040
text.

96
00:07:18,060 --> 00:07:25,110
So previously the IED was used for just a single unique element in the female that you want to style.

97
00:07:25,200 --> 00:07:30,790
Maybe you wanted to change the certain font or a certain color of just one element in the team file

98
00:07:31,080 --> 00:07:35,500
but if you're going to be using things repeatedly what you can do is select a class.

99
00:07:35,580 --> 00:07:40,470
So we've made a class called cool and it's going to perform some styling wherever the class happens

100
00:07:40,470 --> 00:07:44,690
to be inserted into the sexual HTML file.

101
00:07:44,880 --> 00:07:50,140
So then if you look to the style DSS file for class it starts with a period.

102
00:07:50,220 --> 00:07:55,590
So it's a period cool and then you would see some color red or some font family and some other styling

103
00:07:55,590 --> 00:07:57,270
choices whatever you wanted.

104
00:07:57,270 --> 00:08:05,750
The main idea being that class is used more than once and that ID tags are used only once uniquely.

105
00:08:05,850 --> 00:08:11,060
So in a realistic situation a Web site's going to have many many tags in it and it CSSA file.

106
00:08:11,070 --> 00:08:16,950
Here we were just seeing examples with a single class or a single ID and it's going to include classes

107
00:08:16,950 --> 00:08:19,930
IDs and general tags for main HTL elements.

108
00:08:19,950 --> 00:08:25,650
Maybe it's just going to style all paragraph tags are all table tags in the HVM L.

109
00:08:25,710 --> 00:08:27,200
So what does that actually look like.

110
00:08:27,210 --> 00:08:30,640
Well if you can have a CSSA file that looks something like this.

111
00:08:30,930 --> 00:08:38,670
So that top block of code P basically indicates that all paragraph tags in the h him l file are going

112
00:08:38,670 --> 00:08:43,710
to be read they're going to have a font family and they're going to be a font size of 160 percent larger

113
00:08:43,710 --> 00:08:44,920
than the other text.

114
00:08:45,090 --> 00:08:48,690
Then you may have some class so it's going to be period some class name.

115
00:08:48,700 --> 00:08:52,770
The other side on that is going to be some color associated with it.

116
00:08:52,770 --> 00:08:54,480
Font family font size.

117
00:08:54,480 --> 00:08:59,570
And there's many many types of styles you can add in your C Ss sheets.

118
00:08:59,790 --> 00:09:03,680
And then for IDS it's going to be hash tags some ID name.

119
00:09:03,720 --> 00:09:05,680
And then again a bunch of stylings.

120
00:09:05,940 --> 00:09:10,170
So what do you actually need to know someone using Python to web scrape.

121
00:09:10,170 --> 00:09:14,100
Well you don't need to know all the details of everything we discussed here because you only really

122
00:09:14,100 --> 00:09:18,650
need to know those when you're actually building a website where you're trying to scrape information

123
00:09:18,650 --> 00:09:25,230
of what awful web site you just need to understand how things look to Python when it's reading the HVM

124
00:09:25,230 --> 00:09:33,510
I'll file and when the html file it's going to look at things such as a class or tags or maybe even

125
00:09:33,510 --> 00:09:39,840
an ID and you're going to be able to use that in your python script in order to grab information off

126
00:09:39,840 --> 00:09:46,640
the front end of a Web site in order to build a quick understanding of how each team elsea SS are connected.

127
00:09:46,650 --> 00:09:49,210
We're going to be using this Web site code Penda.

128
00:09:49,260 --> 00:09:55,500
I know that allows you to quickly write up H team L C Ss and Javascript and see a quick little rendering

129
00:09:55,530 --> 00:09:59,610
of what they would look like if you were to save these files and run them in your browser.

130
00:09:59,670 --> 00:10:03,440
So we're going to copy and paste the html file we were first working with.

131
00:10:03,450 --> 00:10:09,120
So it's a very basic H.T. mail file and we can see here we end up getting a web site header and some

132
00:10:09,120 --> 00:10:15,130
paragraph down here when we render it web site or in some paragraph if we wanted to add in more elements

133
00:10:15,130 --> 00:10:16,240
to the HD.

134
00:10:16,530 --> 00:10:18,290
There could just be more element tags.

135
00:10:18,300 --> 00:10:21,260
So another simple one would be another paragraph.

136
00:10:21,270 --> 00:10:29,520
So some more text and we would close off that tag and then we see some more text get rendered down here.

137
00:10:29,580 --> 00:10:31,890
Now let's imagine we wanted to style this.

138
00:10:32,010 --> 00:10:34,320
In that case we would need a CSSA sheet.

139
00:10:34,410 --> 00:10:39,020
And the way code pen works it automatically links the CSSA to this H.T. mail.

140
00:10:39,120 --> 00:10:45,600
But typically you would see up here in the head block some sort of link tag telling the HTL the actual

141
00:10:45,600 --> 00:10:48,430
directory of where to find the CSSA file.

142
00:10:48,480 --> 00:10:49,960
In this case we don't need that because.

143
00:10:49,980 --> 00:10:52,630
Because the way cotinine works they're linked together.

144
00:10:53,010 --> 00:10:59,550
Let's imagine that we want to color Web site hetter read the way it'll work and see assess as you find

145
00:10:59,640 --> 00:11:00,980
whatever tag it's called.

146
00:11:00,990 --> 00:11:03,940
In this case it's H-1.

147
00:11:04,190 --> 00:11:11,180
And then you have open and closed curly braces then you can add in all the different styles you want

148
00:11:11,180 --> 00:11:12,750
to change.

149
00:11:12,770 --> 00:11:17,040
So there's a whole list of these and you can Google search to figure out what different stylings there

150
00:11:17,050 --> 00:11:21,740
are available but let's say we wanted to change this to the color red it would look like this for the

151
00:11:21,740 --> 00:11:25,580
syntax and then we'd see here that the Web site header is red.

152
00:11:25,580 --> 00:11:31,820
Now keep in mind because I'm just using the straight h team l tag and C Ss anything that has the same

153
00:11:31,940 --> 00:11:38,300
block h one or the same tag H-1 it's going to be colored red to show you what I mean by that.

154
00:11:38,450 --> 00:11:40,160
Let's change H-1 to B.

155
00:11:40,250 --> 00:11:46,060
P And I can see every single paragraph block has been changed to look red.

156
00:11:46,370 --> 00:11:47,740
We may not actually want that.

157
00:11:47,750 --> 00:11:51,400
Maybe we only want one specific block to be read.

158
00:11:51,560 --> 00:11:55,040
In that case I can create an ID for this specific block.

159
00:11:55,040 --> 00:12:04,730
We can say ID is equal to my block and then over here in the C Ss we indicate ID through the use of

160
00:12:04,730 --> 00:12:08,510
this hash tag and then it has to have the same name my block.

161
00:12:08,510 --> 00:12:12,030
And then we'll make it really clear by making the color blue.

162
00:12:12,290 --> 00:12:17,870
And we can see here now some paragraph is blue and the other paragraph has not been affected.

163
00:12:18,700 --> 00:12:22,800
Let's imagine that we want to make multiple things blue.

164
00:12:23,050 --> 00:12:30,460
And we wanted to do it across multiple team tag types so multiple h ones multiple P's etc. so all we

165
00:12:30,460 --> 00:12:34,060
can do is create a class set of ID.

166
00:12:34,060 --> 00:12:39,750
We're going to have the same class and then let's just make the class name kind of short.

167
00:12:39,940 --> 00:12:42,690
So we'll say P Why is the class.

168
00:12:42,910 --> 00:12:52,160
And then we're going to copy this and put it both under H1 P as well as this and we can see we're going

169
00:12:52,160 --> 00:12:58,810
to now in the C Ss say Dot to indicate class and then put in the class name.

170
00:12:59,090 --> 00:13:00,640
And now since is the color blue.

171
00:13:00,650 --> 00:13:06,500
If we look back down here we have everything the Web site hetter some paragraph and some more text all

172
00:13:06,500 --> 00:13:07,880
the color blue.

173
00:13:07,970 --> 00:13:15,560
Again the main idea being that you can link in IDS classes or even just use the tag to style HVM T.M.

174
00:13:15,620 --> 00:13:18,600
elements based off your CSSA script.

175
00:13:18,620 --> 00:13:23,390
Now to web scrape with python we can use the beautiful soup and request libraries.

176
00:13:23,420 --> 00:13:25,940
These are external libraries outside of Python.

177
00:13:26,120 --> 00:13:30,800
And that means you need to install them with either Konda install or Pipp install at your command line

178
00:13:31,620 --> 00:13:33,770
so directly at your command line.

179
00:13:33,890 --> 00:13:41,570
Go ahead and type in Pipp install requests and then hit Enter let it install Pippin's Thall l x m l

180
00:13:42,080 --> 00:13:43,410
l x m l.

181
00:13:43,520 --> 00:13:45,800
That's another library that we're going to be using.

182
00:13:45,920 --> 00:13:49,430
And then you can Pippin's thought B-S for that since for beautiful soup.

183
00:13:49,430 --> 00:13:55,700
For now I ask you using an anaconda distribution where you can do is use Konda install instead of Pipp

184
00:13:55,760 --> 00:13:56,610
install.

185
00:13:57,020 --> 00:14:01,340
So again open up your command line and make sure you've installed these libraries in order to actually

186
00:14:01,340 --> 00:14:02,930
perform web scraping.

187
00:14:02,930 --> 00:14:07,820
Up next we're going to work through some realistic examples of web scrapin of Python so we can actually

188
00:14:07,820 --> 00:14:10,740
apply the theory that we learned here to practice.

189
00:14:10,760 --> 00:14:11,570
We'll see you there.

