WEBVTT
1

00:00:00.510 --> 00:00:05.190

Excellent work on your last mission agent Let's have a quick debriefing and discuss how you accomplish



2

00:00:05.190 --> 00:00:05.820

your tasks



3

00:00:10.260 --> 00:00:16.380

intelligence gathered from the last mission left us with an encrypted message as well as a file containing



4

00:00:16.380 --> 00:00:21.490

some text and what appears to be latitude and longitude coordinates somehow.



5

00:00:21.570 --> 00:00:28.500

The actual decryption key for this encrypted message is hidden as information inside of this text file.



6

00:00:28.800 --> 00:00:33.900

Let's see if I plotting out the latitude and longitude coordinates we're able to make out that key will



7

00:00:33.900 --> 00:00:36.480

also notice that there's a lot of information that we don't need here.



8

00:00:36.480 --> 00:00:38.200

We don't really need any of this text.



9

00:00:38.250 --> 00:00:40.390

We just want the actual numbers themselves.



10

00:00:40.410 --> 00:00:45.330

So we're going to need to use regular expressions to actually read in the text file and then grab the



11

00:00:45.600 --> 00:00:48.050

latitude and longitude coordinates.



12

00:00:48.060 --> 00:00:54.830

We'll start off by importing our E for regular expressions and then we will open that file.



13

00:00:54.840 --> 00:01:05.510

Here we have it saved as Message new pen text and we will say text is equal to f thought read.



14

00:01:05.640 --> 00:01:11.340

Now if I take a look at the text we now have a string containing all the text and what we want to do



15

00:01:11.400 --> 00:01:14.390

is just grab the latitudes and longitudes.



16

00:01:14.580 --> 00:01:21.090

If we take a look at the pattern in this actual text it seems we want a series of digits followed by



17

00:01:21.090 --> 00:01:27.600

a period followed by another series of digits then a comma then another series of digits a period and



18

00:01:27.600 --> 00:01:28.650

then another comma.



19

00:01:28.950 --> 00:01:32.550

And it also looks like the second series of digits has a negative.



20

00:01:32.550 --> 00:01:37.440

So let's actually create a pattern that can help us find that will comment this text out and create



21

00:01:37.440 --> 00:01:43.400

a pattern the pattern we're looking for was a series of digits.



22

00:01:43.420 --> 00:01:47.940

So in braces we'll say backslash D plus.



23

00:01:47.980 --> 00:01:54.740

So that in the case one or more digits followed by a period and then we want one or more digits again.



24

00:01:54.790 --> 00:02:02.940

So we'll say embraces backslash D plus then a comma then what appears to be a negative sign.



25

00:02:02.940 --> 00:02:10.380

Another backward series of digits one or more another period and then backward series of digits one



26

00:02:10.410 --> 00:02:11.250

or more.



27

00:02:11.580 --> 00:02:17.220

So using that as our pattern let's say that the result is equal to find all



28

00:02:19.990 --> 00:02:23.710

using our pattern on the text we just created.



29

00:02:23.710 --> 00:02:31.000

And if we take a look at our results now we have a list where each item in the list is this string with



30

00:02:31.000 --> 00:02:33.260

the latitude and longitude coordinates.



31

00:02:33.310 --> 00:02:38.980

So we still need to actually grab the individual latitude and longitude and we can do that by basically



32

00:02:38.980 --> 00:02:45.130

splitting up every element in the string because if we take a look at one of the results for instance



33

00:02:45.130 --> 00:02:49.160

the first one it's a string right here meaning we could split it on the comma.



34

00:02:49.180 --> 00:02:56.340

You could say splits on the comma and there we have now the latitude and longitude in a list.



35

00:02:56.410 --> 00:02:58.450

So let's do this using a for loop.



36

00:02:58.850 --> 00:03:04.610

We will say Lat's is equal to an empty list and lungs is equal to an empty list.



37

00:03:05.110 --> 00:03:13.480

Then for s in results we will say lat longs is equal to estopped split.



38

00:03:16.300 --> 00:03:24.500

So we'll split that actual elements on the comma and then we will append that new Latz.



39

00:03:24.510 --> 00:03:25.780

And we want to make it into a float.



40

00:03:25.780 --> 00:03:29.760

So we'll cast it as a float and then we'll do the same thing for longs.



41

00:03:29.760 --> 00:03:37.500

We'll say longs and let's make sure that we don't overwrite that say singalongs there lungs a pen the



42

00:03:37.500 --> 00:03:43.460

float of long run that and then we take a look at Latz and longitudes.



43

00:03:43.470 --> 00:03:45.070

There now the floating point numbers.



44

00:03:45.090 --> 00:03:47.980

Now take a look at lungs and there we have it.



45

00:03:48.010 --> 00:03:52.530

There's many other ways we could have done this but this one is pretty straightforward just using regular



46

00:03:52.530 --> 00:03:58.530

expression to grab the actual coordinates and then using a for loop to grab the individual components



47

00:03:58.650 --> 00:04:00.480

and passing them as floats.



48

00:04:00.480 --> 00:04:05.140

Once we have that we're ready to actually plot out our results just like we did last time.



49

00:04:05.190 --> 00:04:17.860

We're going to say from Boca I know import output file and show then from Bocca thought models import



50

00:04:18.880 --> 00:04:25.850

Geum map plot the GM map options the column data source.



51

00:04:26.010 --> 00:04:28.630

We can actually use tab autocomplete to help us out here.



52

00:04:28.680 --> 00:04:36.070

We'll import circle range 1 and then we can import other tools if we want such as the pan tool



53

00:04:38.990 --> 00:04:45.190

the wheel zoom tool and also the box select tool.



54

00:04:45.190 --> 00:04:51.970

And if we zoom out here so we can see everything because to just start doing this on another line box



55

00:04:52.630 --> 00:04:54.060

select tool.



56

00:04:54.220 --> 00:04:56.080

And if you go over multiple lines and import.



57

00:04:56.110 --> 00:05:00.340

You can just wrap them in parentheses as such.



58

00:05:00.340 --> 00:05:02.620

So that is all the imports we need for the models.



59

00:05:02.680 --> 00:05:13.090

And let's start off with our map options will say map options is equal to map options Latta's equal



60

00:05:13.090 --> 00:05:19.530

to zero lng as equal to zero and then say zoom is equal to 3.



61

00:05:19.700 --> 00:05:21.670

And again you can play around these options.



62

00:05:21.680 --> 00:05:29.250

It's just the initial starting point of the map we create then we will plot out the actual map g map



63

00:05:29.260 --> 00:05:40.900

plot will give range one d to x range and we will do the same for y range.



64

00:05:40.950 --> 00:05:48.630

The and then we'll pass in the map options equal to the map options we just created that creates or



65

00:05:48.630 --> 00:05:49.110

plot.



66

00:05:49.230 --> 00:05:53.510

And then we can set the title of our plot.



67

00:05:53.550 --> 00:05:54.330

This is optional.



68

00:05:54.330 --> 00:06:05.420

You don't really need this set of title such as the key then it's time to actually provide the API key.



69

00:06:05.640 --> 00:06:14.950

We will say plot's API underscore key is equal to input API key and this is where you need to go get



70

00:06:14.950 --> 00:06:19.120

your API key so recall you come to this page on Google Maps API.



71

00:06:19.180 --> 00:06:22.180

Click get a key and it will eventually give you your key.



72

00:06:22.270 --> 00:06:24.750

Or you can just create a new project and get another key.



73

00:06:24.760 --> 00:06:26.140

So I'm going to do that now.



74

00:06:26.140 --> 00:06:27.540

Let me get my key.



75

00:06:27.610 --> 00:06:35.680

Once we provided the API key we can move along and declare our source for the actual column data so



76

00:06:35.680 --> 00:06:43.060

the column data source is equal to data then dictionary call where Latz is equal to the last list we



77

00:06:43.060 --> 00:06:48.310

created and L-1 is created to or matched up with the long list we created.



78

00:06:48.670 --> 00:06:52.490

So we can run that and whip's let's make sure we have all of this in the same cell.



79

00:06:52.750 --> 00:07:07.850

We will say circle is equal to circle Exelon Y is equal to lat size is equal to 10 Phil color is equal



80

00:07:07.850 --> 00:07:09.390

to red.



81

00:07:09.580 --> 00:07:12.610

And here you can mess around with alpha or line colors.



82

00:07:12.670 --> 00:07:14.970

We'll just leave it as that for now.



83

00:07:15.140 --> 00:07:19.580

Then we're going to add those actual circle glyphs to this plot.



84

00:07:19.770 --> 00:07:25.840

But in the kitting source and then circle and then once we've done that we can add the tools to move



85

00:07:25.840 --> 00:07:27.360

around in the plot.



86

00:07:27.360 --> 00:07:39.200

We will say plot add tools we can add the pan tool the wheels zoom tool and the box select tool and



87

00:07:39.200 --> 00:07:49.550

then we can have our output file GM map plot t m l and then finally we can show the actual plot so running



88

00:07:49.550 --> 00:07:51.200

this let's see what we get.



89

00:07:52.970 --> 00:07:58.020

So looks like there are some points appear if we end up moving along and zoom in a little bit.



90

00:07:58.040 --> 00:08:00.240

It says here the key is truth.



91

00:08:00.260 --> 00:08:06.250

So that's a five letter word in all capital that we can use to try to decrypt that message.



92

00:08:06.290 --> 00:08:14.120

So let's decrypt that final message we'll come back to the notebook we will import hash lib and we'll



93

00:08:14.120 --> 00:08:25.380

also say from cryptography Fernet import Fernet and then let's create our keyword because the previous



94

00:08:25.380 --> 00:08:26.160

documents said.



95

00:08:26.190 --> 00:08:33.810

Use the keyword as a byte string and then pass it through the S.H. 3 256 bit hashing algorithm.



96

00:08:34.210 --> 00:08:48.870

Meaning our key will be hash lib SHK three 256 bit keyword will import base 64 so we can get it in the



97

00:08:48.870 --> 00:08:56.690

correct format for our actual cryptography key will grab the bytes by getting the key digest as we did



98

00:08:56.690 --> 00:08:57.320

before.



99

00:08:58.580 --> 00:09:08.850

And then we will create the key base 64 you are all safe and code the key bytes.



100

00:09:08.990 --> 00:09:15.650

Once we run that we should have our actual Fernet key there we have it and then we will create a custom



101

00:09:15.650 --> 00:09:27.600

cipher using this key our custom cypher is equal to Free-Net pass in our key then we will grab our message.



102

00:09:27.630 --> 00:09:30.420

We're going to just copy and paste it from up above.



103

00:09:30.840 --> 00:09:36.300

Well grab this copy it come down here paste it in.



104

00:09:36.300 --> 00:09:39.330

Run this and now it's time to decrypt our message.



105

00:09:39.330 --> 00:09:46.050

We will call our custom cipher decrypt and then passing the message we want to decrypt and then we have



106

00:09:46.050 --> 00:09:49.510

now a link to a Google document which we can check out.



107

00:09:49.530 --> 00:09:51.000

Congratulations on your last mission.



108

00:09:51.000 --> 00:09:53.250

Agent you've done excellent work for the Institute.



