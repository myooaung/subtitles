1
00:00:00,390 --> 00:00:07,650
Let's now discuss error handling and exceptions errors are bound to happen in your code especially when

2
00:00:07,650 --> 00:00:11,560
someone else ends up using it in an unexpected way.

3
00:00:11,580 --> 00:00:16,570
We can use error handling in an attempt to plan for possible errors that may occur in your code.

4
00:00:17,760 --> 00:00:23,460
For example if we were to try to write to a file that was only opened in the our reader mode then an

5
00:00:23,490 --> 00:00:28,170
error occurs and the script will just stop running completely because you need to open a file.

6
00:00:28,200 --> 00:00:30,960
He writes permission in order to write to it.

7
00:00:30,990 --> 00:00:33,720
Now what if we actually wanted the script to continue.

8
00:00:33,720 --> 00:00:36,180
In that case we can use the try except.

9
00:00:36,210 --> 00:00:41,920
And finally keywords to catch errors create a block of code that will run in case an error happens.

10
00:00:42,120 --> 00:00:44,720
And then finally run the rest of the script that way.

11
00:00:44,760 --> 00:00:50,180
Even if an error happens your script can't account for it and then continue on.

12
00:00:50,220 --> 00:00:57,160
Let's explore how the syntax works in a notebook.

13
00:00:57,160 --> 00:00:59,820
Let's begin by discussing the try except.

14
00:00:59,850 --> 00:01:03,610
Else statements put together and then later on we'll introduce the keyboard.

15
00:01:03,610 --> 00:01:07,690
Finally So here we have our tri key word.

16
00:01:07,820 --> 00:01:13,340
And underneath this tricky word is the block of code that you expect might induce an error.

17
00:01:13,520 --> 00:01:18,380
And as we've previously discussed this could be something like trying to open a file with only read

18
00:01:18,380 --> 00:01:22,310
permissions and then you try to write to it and you make it an error.

19
00:01:22,310 --> 00:01:26,870
So if you try to do that a particular exception is going to occur and to give you an idea of what this

20
00:01:26,870 --> 00:01:31,740
looks like if you've ever tried to for instance say one plus two.

21
00:01:31,750 --> 00:01:34,370
So I'm trying to add an integer to a string.

22
00:01:34,370 --> 00:01:36,440
Notice here we have type error.

23
00:01:36,440 --> 00:01:42,600
So we have a special exception code type error and then it has some sort of explanatory text to non-supported

24
00:01:42,620 --> 00:01:47,010
operation for addition with integer and string.

25
00:01:47,250 --> 00:01:51,060
And you can go to documentation under the exceptions list.

26
00:01:51,060 --> 00:01:52,420
So this is Dachs Python.

27
00:01:52,440 --> 00:01:55,440
Or three slushed library slash exceptions.

28
00:01:55,440 --> 00:01:57,760
And there's an entire list of built in exceptions here.

29
00:01:57,780 --> 00:01:59,590
Assertions are actually error.

30
00:01:59,670 --> 00:02:00,700
Import error.

31
00:02:00,750 --> 00:02:06,120
OS error and you can scroll down and you can see all these particular types of errors and what the except

32
00:02:06,210 --> 00:02:10,750
blocks like to do is try to catch certain exceptions.

33
00:02:10,800 --> 00:02:16,680
So for instance if there's a particular exception here such as exception one then we're going to execute

34
00:02:16,680 --> 00:02:17,910
this block.

35
00:02:17,910 --> 00:02:23,210
And then finally we can have an else statement where if there is no exception then we execute this block.

36
00:02:23,250 --> 00:02:25,110
So let's see this simple example.

37
00:02:25,110 --> 00:02:27,960
We're going to try to do the following here.

38
00:02:27,960 --> 00:02:34,760
We're going to try to add an integer to a string and then we're going to say except now we're going

39
00:02:34,760 --> 00:02:38,230
to accept this type error.

40
00:02:38,360 --> 00:02:40,340
So we'll say except the type error.

41
00:02:41,300 --> 00:02:50,440
And if that happens we're going to print out a statement saying you are not adding the correct things

42
00:02:52,400 --> 00:02:53,040
together.

43
00:02:53,210 --> 00:02:59,570
And this sort of print statement really helps out when you have other people using your code because

44
00:02:59,570 --> 00:03:05,750
sometimes these airlines don't give enough of a description and your print statements can do that.

45
00:03:05,780 --> 00:03:08,190
Or your print functions can do that much better.

46
00:03:09,310 --> 00:03:10,170
And then we're going to say.

47
00:03:10,210 --> 00:03:16,270
Else Prince everything ran smoothly.

48
00:03:16,300 --> 00:03:22,390
So if I run this and now we see the print that statement you're not adding the correct things together

49
00:03:22,990 --> 00:03:26,020
that means our script didn't actually break completely.

50
00:03:26,020 --> 00:03:31,750
Instead we accepted that we had a type error here and then we printed out you're not at in the correct

51
00:03:31,750 --> 00:03:37,180
things together and this is a nice message for someone who's trying to use your code and they realize

52
00:03:37,360 --> 00:03:39,550
oh I'm not adding the correct things together.

53
00:03:39,700 --> 00:03:42,940
So you may be thinking well if I know there's going to be an error beforehand.

54
00:03:42,940 --> 00:03:45,230
Why would I not just fix the error.

55
00:03:45,520 --> 00:03:48,430
Well maybe this too is actually an input statement.

56
00:03:48,490 --> 00:03:49,450
Maybe it's something like.

57
00:03:49,450 --> 00:03:52,950
Result is equal to input.

58
00:03:53,290 --> 00:04:01,150
Please enter a number and then we were trying to cast that number as an integer.

59
00:04:01,290 --> 00:04:06,380
So something like this happens then maybe someone types in the wrong thing like the letter A.

60
00:04:06,600 --> 00:04:13,540
So if we were just trying to get this code by itself and we were to run it here so I do shift enter

61
00:04:13,810 --> 00:04:15,890
Please enter a number of Antar letter here.

62
00:04:16,090 --> 00:04:17,520
Then I get a value error.

63
00:04:17,520 --> 00:04:20,350
So it says value error in that invalid literal.

64
00:04:20,410 --> 00:04:25,450
So I can grab this error code and say except type error you're not doing the correct things together

65
00:04:25,870 --> 00:04:34,060
or that I can also add a new exception called value error and instead of saying invalid literal for

66
00:04:34,060 --> 00:04:44,110
base 10 are what I'm going to say is hey make sure you supply a number.

67
00:04:44,270 --> 00:04:47,430
So now when I run this it's going to say Please enter a number.

68
00:04:47,590 --> 00:04:51,280
And if I hit three then it says everything ran smoothly.

69
00:04:51,290 --> 00:04:56,630
However if I try running this again and I input something like y it says hey make sure you supply a

70
00:04:56,630 --> 00:04:57,340
number.

71
00:04:57,350 --> 00:04:59,810
So now you get a very nice looking script.

72
00:04:59,810 --> 00:05:06,110
And even if the user is using it incorrectly you get some results that make a cleaner outlook versus

73
00:05:06,110 --> 00:05:13,520
these value errors which are sometimes hard to understand errors Now you may also be wondering do I

74
00:05:13,520 --> 00:05:16,300
have to memorize every single type of built in exception.

75
00:05:16,460 --> 00:05:17,990
Well you definitely do not.

76
00:05:18,020 --> 00:05:25,060
In fact you can just have a single accept statement with no exception code and then you can just say

77
00:05:25,080 --> 00:05:29,030
Prince Hey an error occurred.

78
00:05:29,170 --> 00:05:31,750
And this basically says just catch any exception.

79
00:05:31,750 --> 00:05:36,730
So if I run this again and input the letter R It says Hey an error occurred.

80
00:05:36,730 --> 00:05:40,540
That way you don't need to worry about memorizing every single exception that's possible.

81
00:05:40,540 --> 00:05:45,250
But what's nice about the alternative is sometimes you may want certain print statements or even certain

82
00:05:45,250 --> 00:05:48,880
blocks of code to execute in case a certain exception occurs.

83
00:05:50,560 --> 00:05:54,030
So now let's look at another example of trying to open a file.

84
00:05:54,040 --> 00:06:02,650
We're going to say Try and we will say f open a test file and we will do it with right permissions.

85
00:06:02,870 --> 00:06:04,760
So that is w permissions.

86
00:06:05,820 --> 00:06:08,880
Then we're going to write test write this

87
00:06:11,730 --> 00:06:23,320
and then we will say except and we'll try to accept an I O error or let's just accept any error so we'll

88
00:06:23,320 --> 00:06:28,790
say except and then we're going to prints Hey an error happened.

89
00:06:30,450 --> 00:06:31,170
And then we'll say.

90
00:06:31,170 --> 00:06:32,180
Else.

91
00:06:32,210 --> 00:06:39,670
Prince everything worked so if we come back here and there run this.

92
00:06:39,730 --> 00:06:41,490
It says everything works.

93
00:06:41,500 --> 00:06:48,390
However if I were to change this to our So read mode and I try to write to it and then I run this again.

94
00:06:48,400 --> 00:06:52,870
It says Hey an error happened because I didn't have the right permissions and if I were just to try

95
00:06:52,870 --> 00:06:58,510
to run these two blocks instead without the use of that try block of code then I just would have gotten

96
00:06:58,600 --> 00:07:00,900
unsupported operation not rideable.

97
00:07:00,940 --> 00:07:06,700
So notice here how my Except allow scripts to continue running even if you have errors that happen in

98
00:07:06,700 --> 00:07:07,490
them.

99
00:07:08,050 --> 00:07:09,640
Now we have try.

100
00:07:09,700 --> 00:07:17,500
Except an else but maybe you want the try block of code to run the accept statement to run and something

101
00:07:17,500 --> 00:07:19,390
else to keep going after both.

102
00:07:19,390 --> 00:07:22,340
Try and accept have been triggered in that case.

103
00:07:22,360 --> 00:07:28,720
You can use the finally keyword and the finally key word we will always execute even after there's an

104
00:07:28,720 --> 00:07:29,640
exception.

105
00:07:29,860 --> 00:07:33,390
So we can write here finally.

106
00:07:34,360 --> 00:07:43,010
Always run this block of code so let's run that again and you can see here that we have try.

107
00:07:43,070 --> 00:07:44,780
So we try to run this code.

108
00:07:44,900 --> 00:07:46,720
We print Hey an error happen.

109
00:07:46,730 --> 00:07:49,240
And then finally we execute this block of code.

110
00:07:49,460 --> 00:07:50,350
So this is different than.

111
00:07:50,350 --> 00:07:53,880
Else because elf's only occurred if everything actually worked.

112
00:07:53,900 --> 00:07:58,290
And here finally this is going to run regardless of things working or not working.

113
00:07:58,430 --> 00:08:03,800
And you can see here if I changed this back to W meaning the try block should work anyways.

114
00:08:03,860 --> 00:08:08,720
And I try to run this then I don't get the exception but my finally block still prints.

115
00:08:08,990 --> 00:08:10,760
So that's how you can use try except.

116
00:08:10,770 --> 00:08:14,540
And finally keywords when you're trying to handle errors.

117
00:08:14,750 --> 00:08:15,950
Excellent work so far.

118
00:08:15,950 --> 00:08:17,370
We'll see you at the next lesson.

