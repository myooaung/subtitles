WEBVTT
1
00:00:05.510 --> 00:00:06.860
So welcome back, guys.

2
00:00:07.230 --> 00:00:11.610
Now, next, we will going to discuss the concept of recursive dependency.

3
00:00:12.590 --> 00:00:19.250
So let us first discuss the prerequisite knowledge required in order to understand the concept of recursive

4
00:00:19.250 --> 00:00:19.970
dependency.

5
00:00:20.420 --> 00:00:26.990
So there are two types of usage of a structure, the pointer usage and the complete usage.

6
00:00:27.380 --> 00:00:32.570
So now let us try to understand that how a structure can be used in two different ways.

7
00:00:32.580 --> 00:00:37.100
That is point of usage and complete usage with the help of an example.

8
00:00:38.930 --> 00:00:45.290
So consider a structure below so you can see that it is a simple structure with four members.

9
00:00:45.560 --> 00:00:47.260
The first is the name of the employer.

10
00:00:47.480 --> 00:00:54.230
The second member is the employee I.D. The third member is actually the information about designation

11
00:00:54.230 --> 00:00:55.030
of the employee.

12
00:00:55.520 --> 00:01:00.050
So designation is actually the structure which is defined somewhere else.

13
00:01:00.320 --> 00:01:05.960
Here you can assume that designation is some structure which contains some set of fields.

14
00:01:06.500 --> 00:01:06.890
Right?

15
00:01:07.160 --> 00:01:11.160
Similarly, occupation is some structure which contains some set of fields.

16
00:01:12.170 --> 00:01:21.050
So now here you can see that the structure employee has two special members which are actually reference

17
00:01:21.050 --> 00:01:22.730
to the other type of structures.

18
00:01:26.160 --> 00:01:33.240
Now, the way the designation is structure has been used inside this structure is called as complete

19
00:01:33.240 --> 00:01:34.770
usage of this structure.

20
00:01:35.700 --> 00:01:36.120
Right.

21
00:01:37.020 --> 00:01:43.410
And the way the occupational structure has been used inside the employee structure is called point of

22
00:01:43.410 --> 00:01:43.950
usage.

23
00:01:44.520 --> 00:01:44.860
Right.

24
00:01:45.210 --> 00:01:47.520
So now what is the difference between the two?

25
00:01:50.720 --> 00:01:53.090
Of course, the difference seems to be obvious.

26
00:01:56.320 --> 00:02:03.170
Now, let us go through these two points, a compiler must know the complete size of the structure at

27
00:02:03.170 --> 00:02:04.980
the compile time, right?

28
00:02:05.200 --> 00:02:09.120
So a compiler will pass this structure from top to bottom.

29
00:02:09.400 --> 00:02:16.540
And if the compiler is able to calculate the complete size of this structure, which is equal to the

30
00:02:16.540 --> 00:02:23.470
size of each individual field of this structure, then the compiler will be able to compile the definition

31
00:02:23.470 --> 00:02:24.370
of this structure.

32
00:02:24.820 --> 00:02:25.180
Right.

33
00:02:25.420 --> 00:02:33.460
And this is what the point is, that compiler must know the size of each individual fields of the structure

34
00:02:33.460 --> 00:02:35.320
definition it is compiling.

35
00:02:35.530 --> 00:02:35.970
Right.

36
00:02:37.330 --> 00:02:44.410
So if I now ask you one question that what is the size of this structure and of course, please ignore

37
00:02:44.410 --> 00:02:50.230
the petting bites, then you will see that the size of this structure is 32 bites, right.

38
00:02:50.710 --> 00:02:51.960
Then unsigned end.

39
00:02:51.970 --> 00:02:55.450
That does let us suppose that the size of unsigned into four bites.

40
00:02:56.170 --> 00:02:56.560
Right.

41
00:02:56.800 --> 00:03:02.470
And let us suppose that the size of designation, a structure, let's say 20 bites, for example.

42
00:03:02.950 --> 00:03:03.340
Right.

43
00:03:03.730 --> 00:03:07.120
And let us say that it is a 32 bit machine.

44
00:03:07.510 --> 00:03:11.740
Therefore, the size of all the point, the variables will going to be for whites.

45
00:03:13.990 --> 00:03:20.290
So please remember that on a 32 bit machine, the size of all point, the variables are four bytes.

46
00:03:20.710 --> 00:03:22.600
It doesn't matter at that point.

47
00:03:22.600 --> 00:03:24.730
The variable is of what type.

48
00:03:25.480 --> 00:03:28.480
If it is a pointer variable, then it will be a four bytes.

49
00:03:28.840 --> 00:03:34.450
Similarly, on a 64 bit machine, the size of a pointer variable is always eight bytes.

50
00:03:36.530 --> 00:03:43.250
So here you can see that the compiler knows the size of each individual member feels of the structure,

51
00:03:43.250 --> 00:03:51.470
and therefore the compiler will be able to compile the definition of this structure and apply here.

52
00:03:51.590 --> 00:03:58.520
I have assumed that the definition of structure designation is already seen by the compiler.

53
00:04:00.770 --> 00:04:05.630
And therefore, the compiler knows that the size of designation, a structure is 20 bytes.

54
00:04:06.380 --> 00:04:10.250
Now we are in a position to discuss the concept of recursive dependency.

55
00:04:12.750 --> 00:04:20.519
So now going forward, so let us discuss the concept of recourse of dependency with the help of an example,

56
00:04:20.970 --> 00:04:28.830
suppose you have a source file a Nazi and inside that file, you have defined two structures that implies

57
00:04:28.830 --> 00:04:31.130
structure and the occupation structure.

58
00:04:31.690 --> 00:04:38.850
Right now, when the compiler compiles the source file, the compiler passes the file from top to bottom.

59
00:04:39.510 --> 00:04:39.900
Right.

60
00:04:40.350 --> 00:04:47.100
So when the compiler compiles this employee structure, it will find that the size of the first member

61
00:04:47.100 --> 00:04:48.360
field is 32 bytes.

62
00:04:48.750 --> 00:04:51.090
The size of a second member field is full of bytes.

63
00:04:51.540 --> 00:04:53.760
But what is the size of this field?

64
00:04:55.140 --> 00:04:55.430
Right.

65
00:04:55.800 --> 00:05:02.850
The compiler has not yet seen the definition of a structured employee, so the compiler would not know

66
00:05:02.850 --> 00:05:04.780
the size of this occupation field.

67
00:05:06.030 --> 00:05:11.880
It means that the compiler will not be able to compile this file and it will report an error.

68
00:05:14.040 --> 00:05:18.630
Similarly, the same problem exists with the structure occupation.

69
00:05:19.020 --> 00:05:24.720
When the compiler compiles this structure definition, it will compile the first member field and it

70
00:05:24.720 --> 00:05:27.810
will know that the size of this field is 32 bytes.

71
00:05:28.020 --> 00:05:30.210
The size of a second field is four bytes.

72
00:05:31.020 --> 00:05:35.230
But what is the size of this field, which is of type employer?

73
00:05:37.500 --> 00:05:45.310
So the root cause of the entire problem is that that the compiler must see the definition of occupation

74
00:05:45.330 --> 00:05:49.070
a structure before the definition of the structure employer.

75
00:05:49.740 --> 00:05:55.370
Now let us try to scrap the position of the structure definition in a while.

76
00:05:55.770 --> 00:05:56.430
Don't see.

77
00:05:57.030 --> 00:06:01.650
So now you can see that the definition of structured occupation comes first.

78
00:06:01.800 --> 00:06:08.640
And after that the definition of a structure employee comes in the source while the compiler again compiles

79
00:06:08.640 --> 00:06:10.390
this file from top to bottom.

80
00:06:10.920 --> 00:06:15.990
Now the compiler compiles this structure definition field by field.

81
00:06:17.160 --> 00:06:22.530
So it will compile this field, it will compile this field because it already knows the size of this

82
00:06:22.530 --> 00:06:22.910
field.

83
00:06:23.370 --> 00:06:25.610
But now the compiler is stuck here.

84
00:06:25.950 --> 00:06:32.820
It will say that, hey, I have not yet encountered the definition of structure employee, so I don't

85
00:06:32.820 --> 00:06:35.270
know what is the size of this field.

86
00:06:35.880 --> 00:06:42.120
So again, your compilation fields, so you can see the correlation between these two version of source

87
00:06:42.120 --> 00:06:47.010
files because the two structure definitions are dependent on one another.

88
00:06:47.010 --> 00:06:53.790
Recursively that is, the implied structure is dependent on occupational structure and occupation.

89
00:06:53.790 --> 00:06:56.250
The structure is dependent on employer structure.

90
00:06:56.700 --> 00:07:02.580
So in whatever order you define the definition of these two structures in a source file, you will not

91
00:07:02.580 --> 00:07:04.580
be able to compile your program.

92
00:07:05.580 --> 00:07:08.780
So this is a kind of chicken or egg problem, right?

93
00:07:11.360 --> 00:07:17.210
So I would suggest you to write a simple source file and define the definition of these two structures

94
00:07:17.210 --> 00:07:20.660
in the way I have done and try to compile your program.

95
00:07:22.860 --> 00:07:28.050
So let me show you the demonstration so you can see that on the right hand side, I have defined the

96
00:07:28.050 --> 00:07:32.400
two structures exactly the same way that we have discussed just now.

97
00:07:33.590 --> 00:07:40.880
So I'm trying to compile this file on the left hand side, and you can see that the compiler will report

98
00:07:40.880 --> 00:07:42.670
an error, right?

99
00:07:43.010 --> 00:07:49.610
So you can see that the compiler is complaining in line number five that is in this line that the field

100
00:07:49.610 --> 00:07:52.150
or C has incomplete type.

101
00:07:52.700 --> 00:07:59.500
It means that the size of the data type of field O.S.S. is not known to the compiler.

102
00:08:00.260 --> 00:08:01.790
It simply means this.

103
00:08:03.820 --> 00:08:11.360
In other words, the compiler has not yet seen the structure definition of the structure, O.S.S. underscore

104
00:08:11.380 --> 00:08:11.740
de.

105
00:08:13.770 --> 00:08:20.520
So please remember, if you encountered a compilation error such as this, that is field something,

106
00:08:20.520 --> 00:08:22.860
something has incomplete type.

107
00:08:23.930 --> 00:08:31.340
It means that the compiler is not aware of the structure which you are trying to use as a member field

108
00:08:31.340 --> 00:08:33.179
within another structure.

109
00:08:34.010 --> 00:08:38.690
So I hope I'm able to explain the problem of recursive dependency.

110
00:08:39.030 --> 00:08:42.230
And now let us discuss the solution of this problem.

