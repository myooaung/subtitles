WEBVTT
1
00:00:05.270 --> 00:00:11.840
So, guys, now going forward now, let us discuss the solution to the problem of duplicate inclusion

2
00:00:11.840 --> 00:00:14.210
of how to file, which we had discussed.

3
00:00:14.960 --> 00:00:19.640
So now doing a little recap here, we had the same set of her file.

4
00:00:19.650 --> 00:00:22.220
That is a dot edge and B dot edge.

5
00:00:22.520 --> 00:00:25.730
And following is the definition of these two header files.

6
00:00:27.630 --> 00:00:33.660
So these are exactly the same header files which we had discussed last time, and the developer wrote

7
00:00:33.660 --> 00:00:40.260
application dot seesaws file and let us call this file as was one of application dot seesaws file.

8
00:00:40.710 --> 00:00:47.310
So version one of Application Dawsey is actually the code which was written by the programmer or developer.

9
00:00:48.090 --> 00:00:54.780
Now, if you remember that when you apply the tax substitution on this source file, we ended up in

10
00:00:54.780 --> 00:00:55.930
compilation error.

11
00:00:56.320 --> 00:00:56.650
Why?

12
00:00:56.880 --> 00:01:04.739
Because the inclusion of header file without at leads to the duplicate inclusion of how to file a dot

13
00:01:04.739 --> 00:01:06.660
edge because of it.

14
00:01:06.660 --> 00:01:14.670
In the final code, which the compiler compiles, there was a duplicate declaration of this, some function.

15
00:01:17.720 --> 00:01:20.270
So the last time our did not compile.

16
00:01:21.290 --> 00:01:28.280
Now, of course, the developer cannot prevent from having including Bidart at because maybe the developer

17
00:01:28.490 --> 00:01:35.690
wants to make use of minimum function or multiply function, which is provided by header file, dot

18
00:01:35.690 --> 00:01:36.110
edge.

19
00:01:36.650 --> 00:01:42.030
Therefore, the developer has no choice other than to include both the header finds.

20
00:01:42.470 --> 00:01:48.440
Now let us see that how preprocessing directives can prevent the problem of duplicate inclusion of high

21
00:01:48.440 --> 00:01:49.010
profile.

22
00:01:50.030 --> 00:01:57.130
So of course, there is no need to make any changes in application doxy file as a solution to this problem.

23
00:01:57.140 --> 00:02:04.640
The changes needs to be made in headlines, so the content of the header file needs to be sandwiched

24
00:02:04.910 --> 00:02:11.300
between hash, if not defined and the corresponding hash and if preprocessing directive.

25
00:02:12.310 --> 00:02:20.050
Similarly, if we don't ask her to file just a sandwich, the entire content of her to file in between

26
00:02:20.050 --> 00:02:26.170
has, if not defined, preprocessing directive and the corresponding hash and if preprocessing directive.

27
00:02:27.850 --> 00:02:34.360
So this is a technique which we use in order to avoid the problem of duplicate inclusion of --

28
00:02:34.360 --> 00:02:35.980
in C and C++.

29
00:02:37.500 --> 00:02:43.350
So now let us see that what is the impact of including these preprocessing directives in the beginning

30
00:02:43.350 --> 00:02:45.130
and end of the head of fines?

31
00:02:46.470 --> 00:02:52.060
So now giving the revised definition of how to file a dot at and B dot edge.

32
00:02:52.350 --> 00:02:57.450
Let us now apply the tax substitution in the similar way that we applied before.

33
00:03:00.440 --> 00:03:07.130
So you can see that in the first pass, the preprocessing directive has included what it is replaced

34
00:03:07.130 --> 00:03:14.120
by the content of IDOT Eternal File and the preprocessing directive has include retaught ads is replaced

35
00:03:14.120 --> 00:03:16.820
by the content of read authoritative file.

36
00:03:17.420 --> 00:03:22.910
And of course, this has to find is replaced by its definition in the source file.

37
00:03:24.230 --> 00:03:30.380
So what we obtained after the Texas student passed one is the version two of the source file.

38
00:03:30.890 --> 00:03:36.800
Now, this version two of the source file still contains one has include a statement.

39
00:03:37.250 --> 00:03:43.850
So, again, apply the tax substitution pass to and we will get the version three of application doxy

40
00:03:43.850 --> 00:03:44.600
source file.

41
00:03:46.160 --> 00:03:51.830
So you can see that in version three of the source file, this statement is replaced by the content

42
00:03:51.830 --> 00:03:56.090
of it, by the content of a lot at file.

43
00:03:56.810 --> 00:04:02.240
Now in version three of the source, while there is more hash, include preprocessing DirecTV anywhere.

44
00:04:03.110 --> 00:04:07.030
So remember, this is the version three of application dot source file.

45
00:04:07.370 --> 00:04:13.970
And now going forward, this is the version three of application dot source file, which we have continued

46
00:04:13.970 --> 00:04:15.290
from the previous slide.

47
00:04:15.650 --> 00:04:23.360
Now, as a final step of tax substitution fees, we will now process all the conditional pre processing

48
00:04:23.360 --> 00:04:25.270
directives from top to bottom.

49
00:04:26.000 --> 00:04:31.670
So as a result of processing conditional pre processing directives, there will be some part of the

50
00:04:31.670 --> 00:04:37.880
code which will be completely automated out and will not be a part of final compiler will code.

51
00:04:40.340 --> 00:04:46.160
So now let us process all the pre processing directives from top to bottom, so the first line is that

52
00:04:46.580 --> 00:04:53.540
if not defined simply now, of course, there is no simply the compiler has seen yet as it is a first

53
00:04:53.540 --> 00:04:54.730
line of the source file.

54
00:04:55.160 --> 00:04:59.360
Therefore, this condition will be true and the compiler will define the symbol.

55
00:05:00.020 --> 00:05:02.300
So this line will be a part of the code.

56
00:05:03.790 --> 00:05:07.450
Similarly, this line will be a part of the court and this line also.

57
00:05:09.090 --> 00:05:14.610
In the same way the compiler has not yet seen the symbol be, therefore this condition will be true.

58
00:05:14.860 --> 00:05:23.280
Not the compiler has defined the symbol B now the compiler has defined the symbol B, now this condition

59
00:05:23.280 --> 00:05:24.410
will be false.

60
00:05:24.420 --> 00:05:30.600
Y It is false because the compiler has already defined the symbol e therefore this condition will be

61
00:05:30.600 --> 00:05:31.140
false.

62
00:05:31.410 --> 00:05:33.480
This will not be a part of code.

63
00:05:35.330 --> 00:05:35.800
Right.

64
00:05:37.090 --> 00:05:39.710
So going forward, this will be a part of the court.

65
00:05:39.730 --> 00:05:42.880
This will be a part of the court and this will be a part of the court.

66
00:05:44.060 --> 00:05:50.780
So the remaining lines in this file will obviously be a part of the court now after preprocessing all

67
00:05:50.780 --> 00:05:53.970
the conditional preprocessing directives from top to bottom.

68
00:05:54.290 --> 00:05:57.880
Now remove all the statements, which starts with hash.

69
00:05:58.490 --> 00:06:03.380
So the final code that you get is the version four of application doxy file.

70
00:06:04.990 --> 00:06:11.260
And you can see that in this final version of Application Daudzai file, there is exactly one declaration

71
00:06:11.260 --> 00:06:12.430
of some function.

72
00:06:13.300 --> 00:06:19.510
And therefore, discord is compiling a record so file Airnorth as has been prevented from including

73
00:06:19.510 --> 00:06:21.930
in application multiple times.

74
00:06:21.970 --> 00:06:22.390
Why?

75
00:06:22.600 --> 00:06:26.530
Because of hash, if not defined preprocessing directives.

76
00:06:27.950 --> 00:06:35.360
So now make a rule from now for the rest of your life that whenever you write a high profile, make

77
00:06:35.360 --> 00:06:42.440
it as a principle of your life, that you always sandwich the entire content of the header file with

78
00:06:42.440 --> 00:06:45.080
hash, if not defined preprocessing detective.

79
00:06:47.170 --> 00:06:52.720
In fact, in the production court, if you write a how to file without using this technique, you will

80
00:06:52.720 --> 00:06:56.740
be definitely reprimanded by your manager or your court review will.

81
00:06:59.240 --> 00:07:05.210
So now you can see that it really doesn't matter how many times you have to include the same, had to

82
00:07:05.210 --> 00:07:11.690
file directly or indirectly in the same source file, this technique will prevent the inclusion of same

83
00:07:11.690 --> 00:07:17.120
high profile multiple times in the source file, and the accord will always compile.

84
00:07:18.910 --> 00:07:28.000
So let us summarize this solution so you can see that this is the final version of sorts, while then

85
00:07:28.180 --> 00:07:33.590
the header file was not sandwich's to using hash, if not defined prepossessing directive.

86
00:07:34.090 --> 00:07:39.040
And in this final version of source file, there were duplicate declaration of the function some.

87
00:07:39.520 --> 00:07:44.010
And because of this, the compilation of application Darsey file failed.

88
00:07:44.770 --> 00:07:50.950
But in the second case, we have application doxy file in which there is exactly one declaration of

89
00:07:50.950 --> 00:07:51.550
this function.

90
00:07:51.550 --> 00:07:58.270
Some it is because in the had a file, we have used the technique of pre processing directives to prevent

91
00:07:58.270 --> 00:08:02.920
the duplicate inclusion of her defiance and therefore this court combine's.

92
00:08:04.120 --> 00:08:10.600
So this shows the comparison between the final version of Application C file van preprocessing directive

93
00:08:10.600 --> 00:08:16.870
technique was not used and when preprocessing directive technique was used to prevent the duplicate

94
00:08:16.870 --> 00:08:18.360
inclusion of hydrofoil.

95
00:08:19.450 --> 00:08:25.540
So make a principle of your life that you would like to have a file starting with hash, if not define

96
00:08:25.750 --> 00:08:27.850
and ending with hash and if.

