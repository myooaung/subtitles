WEBVTT
1
00:00:05.450 --> 00:00:12.110
So, guys, now, having understood the concept of Beijing, now we are in a position to revisit again

2
00:00:12.560 --> 00:00:21.950
and revise the memory allocation to a process, so operating system allocates our free memory to or

3
00:00:21.950 --> 00:00:25.190
from a process in the universe of paid sites.

4
00:00:26.210 --> 00:00:31.820
Now, throughout this course, we have assumed that the size of a page is four zero nine six bytes.

5
00:00:32.600 --> 00:00:40.910
So operating system always allocates or free the memory to or from the process in the units of page

6
00:00:40.910 --> 00:00:41.540
size.

7
00:00:41.540 --> 00:00:49.130
That is, operating system assigns or reclaim back Whelchel memory in the units of four zero nine six

8
00:00:49.130 --> 00:00:49.670
bytes.

9
00:00:50.540 --> 00:00:53.430
So now it seems a little contradictory.

10
00:00:54.110 --> 00:01:01.700
So if your process invokes, for example, mallock 12, that is your process is trying to claim 12 bites

11
00:01:01.700 --> 00:01:03.550
of memory from the operating system.

12
00:01:04.400 --> 00:01:11.270
So the question is that that does operating system allocates 12 plus MB's bytes.

13
00:01:11.540 --> 00:01:13.700
Now, what does MB's recall?

14
00:01:13.710 --> 00:01:16.160
There was something called Matter Block.

15
00:01:16.730 --> 00:01:17.190
Right.

16
00:01:18.380 --> 00:01:24.950
So if you have gone through the section of memory management, you should be able to recall that operating

17
00:01:24.950 --> 00:01:33.500
system allocates you an additional memory called matter block, along with the memory that is requested

18
00:01:34.100 --> 00:01:35.450
using Mellark function.

19
00:01:36.700 --> 00:01:37.130
Right.

20
00:01:37.420 --> 00:01:41.580
So I expect you that you recall the concept of mental block.

21
00:01:43.600 --> 00:01:50.530
So going forward, supposedly a process, request, trial by itself, memory to be used from the operating

22
00:01:50.530 --> 00:01:51.040
system.

23
00:01:51.430 --> 00:01:58.510
So your operating system allocates trial plus matter, block size bytes of memory, or as I said in

24
00:01:58.510 --> 00:02:04.130
this point, that operating system allocates speed, size, bytes of memory to the process.

25
00:02:04.960 --> 00:02:10.039
So we have a question that how much memory is actually assigned to a process.

26
00:02:12.070 --> 00:02:20.940
So the answer is the operating system allocates the precise amount of memory to be used by the process.

27
00:02:21.220 --> 00:02:29.140
But out of these four zero nine six bytes, only 12 plus MB's bytes of the memory is actually allocated

28
00:02:29.440 --> 00:02:31.150
to a process to be used.

29
00:02:31.900 --> 00:02:36.370
So now let us dive deep into this and see what actually happens.

30
00:02:36.910 --> 00:02:43.990
So when you process request 12 bytes of memory using Malot function, operating system allocates four

31
00:02:43.990 --> 00:02:47.740
zero nine six bytes of actual memory to your process.

32
00:02:48.160 --> 00:02:48.580
Right.

33
00:02:49.390 --> 00:02:56.170
So allocation means that the HEAP segment is extended by amount equal to zero nine six bytes.

34
00:02:57.280 --> 00:03:04.180
And as soon as your operating system allocates virtual memory, it also creates a corresponding physical

35
00:03:04.180 --> 00:03:04.660
page.

36
00:03:05.920 --> 00:03:13.840
And out of those four zero nine six bytes of memory, only Clell plus ambitious bytes of memory is assigned

37
00:03:13.840 --> 00:03:14.880
to your process.

38
00:03:15.550 --> 00:03:21.310
So the amount of memory that is remaining is Bates's minus 12 plus MBS.

39
00:03:21.850 --> 00:03:25.270
And this amount of virtual memory is cached by G.

40
00:03:25.280 --> 00:03:27.390
Lipsey Malac implementation.

41
00:03:27.940 --> 00:03:35.950
That is the mallock function actually Estrellas the virtual page that has been assigned to your process

42
00:03:36.350 --> 00:03:43.720
and from that virtual page, only 12 plus MBS bytes of memory the Marlock provides to your process to

43
00:03:43.720 --> 00:03:44.320
be used.

44
00:03:44.980 --> 00:03:51.670
So suppose the diagram on the right hand side of the screen represents a virtual page which has been

45
00:03:51.670 --> 00:03:53.620
just assigned to a process.

46
00:03:54.550 --> 00:03:58.390
So the size of this virtual page is four zero nine six bytes.

47
00:03:59.230 --> 00:03:59.650
Right.

48
00:04:00.040 --> 00:04:09.490
And out of these four zero nine six bytes, 12 plus MB's bytes of virtual memory has been used to satisfy

49
00:04:09.490 --> 00:04:10.960
Mallacoota and request.

50
00:04:11.860 --> 00:04:16.579
And the remaining portion of this virtual page is still available to be used.

51
00:04:17.769 --> 00:04:24.080
So next time, when a process request more memory, it invokes Mallock 20, right.

52
00:04:25.090 --> 00:04:32.170
So Mellark checks that if it has a virtual page which has unassigned virtual addresses to meet the new

53
00:04:32.170 --> 00:04:32.890
request.

54
00:04:33.370 --> 00:04:39.690
If yes, then 12 plus MB's bytes are assigned from remaining portion of the virtual page.

55
00:04:40.300 --> 00:04:40.600
Right.

56
00:04:41.020 --> 00:04:48.910
So suppose the process invokes Malafronte right and you can see that mallock function still keeps track

57
00:04:48.910 --> 00:04:54.520
of this virtual page and finds that it still has a lot of space to be used.

58
00:04:55.660 --> 00:05:04.410
So the Mallott function will again allocate 20 plus MBS bytes of virtual memory to a process.

59
00:05:05.890 --> 00:05:06.430
Right.

60
00:05:06.850 --> 00:05:12.250
And this 20 plus MBS by itself memory will be assigned from the same virtual page.

61
00:05:13.330 --> 00:05:21.220
So the Mallott function will continue to assign memory to a process until this virtual page is completely

62
00:05:21.220 --> 00:05:22.000
exhausted.

63
00:05:22.690 --> 00:05:30.730
So after satisfying my Latrelle and Mallock 20 request by a process memory that is remaining in a virtual

64
00:05:30.730 --> 00:05:37.450
page will be equal to its size minus 12, minus 20 minus to implement best Biton.

65
00:05:37.480 --> 00:05:38.260
What's your page?

66
00:05:38.500 --> 00:05:38.830
Right.

67
00:05:39.280 --> 00:05:41.860
So this is the amount of memory that is still remaining.

68
00:05:42.610 --> 00:05:49.750
And in case virtual pens do not have enough memory left to satisfy that process, request Mallak request

69
00:05:49.750 --> 00:05:55.450
operating system again to assign another brand new virtual page altogether.

70
00:05:56.950 --> 00:05:59.170
So a diagram for a thousand words.

71
00:05:59.320 --> 00:06:03.910
So let's discuss all these points with the help of a diagram in the next slide.

