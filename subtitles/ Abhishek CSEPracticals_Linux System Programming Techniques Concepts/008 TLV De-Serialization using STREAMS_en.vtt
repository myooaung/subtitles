WEBVTT
1
00:00:04.970 --> 00:00:13.070
So, guys, next, let us discuss serializing that Alby's serializing really means creating the Alby's,

2
00:00:13.730 --> 00:00:17.390
so the data structure, that is the last buffer.

3
00:00:17.570 --> 00:00:22.390
Our streams will help us to create the pelvis very easily.

4
00:00:22.820 --> 00:00:23.930
Let us see how.

5
00:00:25.430 --> 00:00:31.750
So let us take an example that the deal with that we will going to create is shown in the diagram here.

6
00:00:32.750 --> 00:00:40.190
So let us see how we can prepare the will exactly like this using serializer buffer.

7
00:00:41.390 --> 00:00:43.400
So let us take an example.

8
00:00:43.880 --> 00:00:45.880
So let us have a code walk quickly.

9
00:00:45.920 --> 00:00:48.230
This is a very simple code walk.

10
00:00:49.310 --> 00:00:51.290
So initialize the serialize buffer.

11
00:00:51.990 --> 00:00:52.780
Very simple.

12
00:00:53.480 --> 00:00:59.310
Right now, the first value that you need to put in the TRV is the value 132.

13
00:01:00.140 --> 00:01:06.620
So just take the variable which stores the value 132 and call the Serialize data function.

14
00:01:07.490 --> 00:01:14.270
The first argument to this Serialize data function is the pointer to the stream data structure, and

15
00:01:14.270 --> 00:01:19.820
the second argument is a pointer to the data which you want to copy in the daily.

16
00:01:20.300 --> 00:01:24.530
And the last argument is the number of bytes that you want to copy.

17
00:01:25.040 --> 00:01:32.240
So remember in the U.S. that the type is one byte and the PLB Lent is one byte, therefore we have specified

18
00:01:32.240 --> 00:01:33.080
here one.

19
00:01:34.010 --> 00:01:39.740
So when you call this API serialized data, it will copy the value one thirty two in the serialized

20
00:01:39.740 --> 00:01:40.160
buffer.

21
00:01:41.170 --> 00:01:41.530
Right.

22
00:01:42.990 --> 00:01:53.030
So the value 132 has been copied, industrialized by the next, we need to copy the value 20, so assign

23
00:01:53.040 --> 00:02:01.140
the value 20 to the variable data and then call this API and copy the value 20 industrialized buffer

24
00:02:01.590 --> 00:02:02.450
in the same way.

25
00:02:03.550 --> 00:02:10.630
Right, so 20 will be copied the next, do you want to copy the IP address in the civilized buffer?

26
00:02:11.470 --> 00:02:18.940
So just take a variable and assign the value which you want to copy and simply serialize the data so

27
00:02:18.940 --> 00:02:23.370
you can see that the rest of the fields are filled in exactly the same manner.

28
00:02:24.590 --> 00:02:27.710
That is serialized data can place any type of data.

29
00:02:27.740 --> 00:02:36.030
It doesn't matter whether the data type is character or number or integer, nothing serialized data.

30
00:02:36.050 --> 00:02:42.230
The second argument is just a pointer to the memory location, which contains the data to be copied

31
00:02:42.470 --> 00:02:42.860
into.

32
00:02:44.570 --> 00:02:44.920
Right.

33
00:02:45.740 --> 00:02:50.530
So you can see that your serialized buffer is now taking the shape of a daily.

34
00:02:52.020 --> 00:02:52.390
Right.

35
00:02:52.740 --> 00:03:02.040
So in the end, your SITILIDES buffer has actually turned into TRV and you can send the content of your

36
00:03:02.050 --> 00:03:04.470
Cirillo's buffer using sockets.

37
00:03:06.150 --> 00:03:13.740
So the exact pointer to the memory, which actually contains the serialized data, is pointed by the

38
00:03:13.740 --> 00:03:20.440
stream at be pointer and the actual size of the deal with that is prepared.

39
00:03:20.460 --> 00:03:23.200
Is the stream arrow next value?

40
00:03:23.850 --> 00:03:24.210
Right.

41
00:03:24.690 --> 00:03:32.680
So not that here it is, not stream arrow size value, but it is the stream arrow next.

42
00:03:32.700 --> 00:03:36.880
That is the actual data that is present in the serialized buffer.

43
00:03:37.800 --> 00:03:44.160
So when we send the content of the serialized buffer using any mechanism such as socket, so on the

44
00:03:44.160 --> 00:03:51.900
receiving machine, the actual data that will be received will be this entire chunk of data or the Elvie.

45
00:03:52.260 --> 00:03:59.100
So the receiving machine will going to receive the content exactly in the same format as shown in this

46
00:03:59.250 --> 00:03:59.910
diagram.

47
00:04:01.460 --> 00:04:08.450
On the receiving machine, let us try to understand that how the stream data structure can help us to

48
00:04:08.450 --> 00:04:13.000
decode the reality that is received on the receiving machine.

49
00:04:16.040 --> 00:04:21.680
So on the receiving machine, when we received that, the Elvy, we will read the content of the PLB,

50
00:04:22.880 --> 00:04:25.640
this process is called decimalization.

51
00:04:27.380 --> 00:04:35.360
So you can see that as soon as you receive a date on the receiving machine, you copy the entire data

52
00:04:35.360 --> 00:04:37.580
in the serialize buffer.

53
00:04:39.020 --> 00:04:46.310
Right, and now after copying the data in the serialized buffer, we can invoke the D.C. utilized data.

54
00:04:47.510 --> 00:04:54.320
To copy the individual units in the PLB into the respective application variables.

55
00:04:55.770 --> 00:05:03.600
So let us say that we have received that they'll be on the receiving machine and the content of all

56
00:05:03.600 --> 00:05:09.570
the and the entirety, Alvie is copied as it is into the serialized buffer.

57
00:05:10.590 --> 00:05:13.390
So serializable will look like this.

58
00:05:13.410 --> 00:05:20.550
That is the point of the Cirillo's buffer will point to the start of the data and the next value will

59
00:05:20.550 --> 00:05:21.100
be zero.

60
00:05:21.960 --> 00:05:26.070
Now we will start reading this serialized buffer by.

61
00:05:27.080 --> 00:05:35.090
Invoking the D.C. Data API, so you can see that the first argument to this API is the pointer to the

62
00:05:35.090 --> 00:05:40.370
memory location in which we need to copy the data from the serialized buffer.

63
00:05:41.210 --> 00:05:44.050
The second argument is the serializable for itself.

64
00:05:44.870 --> 00:05:50.810
And the third argument is the number of bytes which we want to copy from the serialized buffer to the

65
00:05:51.680 --> 00:05:52.830
to the destination.

66
00:05:53.720 --> 00:06:01.880
So simply we can use multiple copy the data from the serialized buffer to the destination.

67
00:06:02.450 --> 00:06:04.210
So be an extra variable is zero.

68
00:06:04.640 --> 00:06:10.670
It means that we are copying from the start of the serialized buffer and how many bytes we are copying.

69
00:06:10.680 --> 00:06:12.610
We are copying these many bytes.

70
00:06:13.190 --> 00:06:21.920
So after copying, just set the next increment to the next value by the size of the.

71
00:06:22.900 --> 00:06:28.650
Data that we have read from the Cirillo's buffer, so let us take an example.

72
00:06:29.730 --> 00:06:36.810
Let us say that we need to read four bytes from the serialised buffer, so take a variable unsigned

73
00:06:37.170 --> 00:06:41.670
destination and simply invoke the API DC release data.

74
00:06:43.180 --> 00:06:45.280
Right, and past the point of.

75
00:06:47.100 --> 00:06:52.470
To the best variable that is in this variable, we will going to copy the data past the point of the

76
00:06:52.470 --> 00:06:56.910
serialised buffer and pass the number of bytes that you want to copy.

77
00:06:58.320 --> 00:06:58.650
Right.

78
00:06:59.250 --> 00:07:03.390
So after this call, your less buffer will look something like this.

79
00:07:04.080 --> 00:07:10.830
The next member of the serialized buffer will be pointing to the fourth bite in the serialized buffer

80
00:07:10.980 --> 00:07:18.480
because the byte number from zero to four have already been read from the serialized buffer.

81
00:07:20.100 --> 00:07:27.090
And now, once again, if you invoke the D.C. data API again, you are trying to read for bytes of the

82
00:07:27.090 --> 00:07:28.740
data from the serialised buffer.

83
00:07:29.900 --> 00:07:39.410
So the next member of the civilized buffer will be shifted to the elite, bite into the civilized buffer,

84
00:07:39.830 --> 00:07:45.350
meaning that it bites of data has been read from the serialized buffer.

85
00:07:46.220 --> 00:07:52.970
So every time you keep on invoking these rules that apply on the serialized buffer, this next member

86
00:07:52.970 --> 00:08:02.030
of the serialized buffer will keep on incrementing and it will increment by the size of the data that

87
00:08:02.030 --> 00:08:04.550
you have read from the serialized buffer.

88
00:08:06.580 --> 00:08:11.770
Right, so you can see that it is like more or less resemble to the typewriter.

89
00:08:13.010 --> 00:08:19.220
In this case, we instead of writing the return to the serialized buffer, we are reading the data from

90
00:08:19.220 --> 00:08:25.400
the serialized buffer and whatever chunk of data we read from the serialized buffer, we copy that data

91
00:08:25.400 --> 00:08:28.700
into our application specific variables.

92
00:08:29.330 --> 00:08:36.169
So this is called this utilization of the Elvis that is having received the TRV on the receiving machine.

93
00:08:37.700 --> 00:08:45.260
We can copy the entirety Alvie into the Cirillo's buffer and then using the DC data API, we can copy

94
00:08:45.260 --> 00:08:51.830
the 12 units or 12 data one by one into our local application.

95
00:08:51.830 --> 00:08:53.420
Specific variables.

96
00:08:54.810 --> 00:09:00.540
So that's all with the concept of deal, we hope you enjoyed the concept of dearly.

97
00:09:01.080 --> 00:09:01.970
Thank you, guys.

