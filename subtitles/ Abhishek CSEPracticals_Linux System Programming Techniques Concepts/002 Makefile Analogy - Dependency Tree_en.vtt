WEBVTT
1
00:00:05.540 --> 00:00:13.130
So, guys, before diving deep into writing our own McFly, let us understand the concept of dependent's

2
00:00:13.130 --> 00:00:13.630
history.

3
00:00:14.120 --> 00:00:17.480
So Makefile works on the concept of dependency tree.

4
00:00:17.900 --> 00:00:23.260
Now let us understand the concept of dependent's tree with the help of an analogy.

5
00:00:23.780 --> 00:00:27.500
So suppose you want to have a delicious meal, right?

6
00:00:27.890 --> 00:00:33.110
And your delicious meal is composed of four components.

7
00:00:33.620 --> 00:00:38.160
That is chicken curry, chapatti, cooked rice and wine.

8
00:00:38.750 --> 00:00:45.910
So if you have all these four components in your dinner plate, then you will have a delicious meal.

9
00:00:46.400 --> 00:00:52.780
Right now, each of these four components in tones are composed of subcomponents.

10
00:00:53.300 --> 00:00:59.210
For example, chicken curry is composed of raw chicken, onions and chicken bottom right.

11
00:00:59.480 --> 00:01:02.810
You need these raw materials in order to prepare chicken curry.

12
00:01:03.830 --> 00:01:09.140
Similarly, you can prepare chapatti only if you have wheat flour and some water, right?

13
00:01:09.650 --> 00:01:13.840
Similarly, for to have a cooked rice, you need raw rice and some water.

14
00:01:14.570 --> 00:01:14.990
Right.

15
00:01:15.620 --> 00:01:20.600
So you can see that in order to have your delicious meal, you need to have these four components.

16
00:01:20.840 --> 00:01:25.310
And each of these four component in turn is dependent of subcomponents.

17
00:01:25.970 --> 00:01:29.430
So you can see that this diagram takes the shape of a tree.

18
00:01:29.840 --> 00:01:31.700
Let us call that root of the tree.

19
00:01:31.700 --> 00:01:34.010
That is the delicious meal is at level zero.

20
00:01:34.340 --> 00:01:39.590
The components at level one is the components, which is a prerequisite to have a delicious meal.

21
00:01:40.130 --> 00:01:46.250
And the components at level two are the subcomponents which are required to prepare each of the components

22
00:01:46.250 --> 00:01:47.450
present in level one.

23
00:01:49.200 --> 00:01:56.040
So this diagram is actually called a dependency tree, where each component is actually dependent on

24
00:01:56.040 --> 00:01:58.890
subcomponent present at a lower levels.

25
00:01:59.460 --> 00:02:05.220
So now let us go through certain points regarding this dependency tree so you can see here that the

26
00:02:05.220 --> 00:02:12.000
level and element cannot be prepared unless all its immediate descendants element at level and plus

27
00:02:12.000 --> 00:02:12.960
one are available.

28
00:02:13.290 --> 00:02:13.700
Right.

29
00:02:13.920 --> 00:02:19.190
So you cannot prepare chicken curry unless you have raw chicken, onions and chicken powder available.

30
00:02:19.890 --> 00:02:20.280
Right.

31
00:02:21.180 --> 00:02:28.020
And you cannot have a delicious meal unless you have all the components at level one ready in your dinner

32
00:02:28.020 --> 00:02:28.570
plate.

33
00:02:29.280 --> 00:02:36.240
So this statement simply means that an element which is present at level end cannot be prepared unless

34
00:02:36.240 --> 00:02:38.850
all of its prerequisite elements.

35
00:02:40.160 --> 00:02:48.620
That is subcomponent present at 11 and plus one are available, then the second point is that root element

36
00:02:48.620 --> 00:02:51.290
is the ultimate target that we want to prepare.

37
00:02:51.740 --> 00:02:54.440
So in this dependancy tree, this is the root.

38
00:02:55.250 --> 00:02:58.880
So the ultimate target that we want to prepare is the delicious meal.

39
00:03:00.410 --> 00:03:06.040
The third point is that preparation of the recipe takes place from bottom to up in the tree.

40
00:03:06.620 --> 00:03:07.080
Right.

41
00:03:07.100 --> 00:03:09.890
And that is pretty much obvious from this dependency tree.

42
00:03:11.330 --> 00:03:19.010
If element at level end is changed or updated, all ancestors from level and minus one up to root of

43
00:03:19.010 --> 00:03:20.720
the tree needs to be updated.

44
00:03:21.440 --> 00:03:24.800
Now, you can correlate this point with this analogy.

45
00:03:25.160 --> 00:03:31.760
Let's say that suppose I replace this chicken powder with another kind of powder which has another flavor

46
00:03:31.760 --> 00:03:32.490
altogether.

47
00:03:33.170 --> 00:03:40.400
So if I replace this chicken powder, then obviously the taste of your chicken curry will change, right?

48
00:03:40.810 --> 00:03:42.790
It will not be the same as before.

49
00:03:43.250 --> 00:03:46.520
And because your chicken cut it is has been changed.

50
00:03:47.390 --> 00:03:52.820
The delicious meal that you are having today is entirely different from the delicious meal that you

51
00:03:52.820 --> 00:03:53.690
had yesterday.

52
00:03:55.970 --> 00:04:03.050
So we can see that if there is a change in a component, that that change is propagated along the same

53
00:04:03.050 --> 00:04:05.810
branch up to the root of the dependency tree.

54
00:04:07.320 --> 00:04:12.930
If it is the chicken powder, does that impact anyway, the taste of your chapatis?

55
00:04:13.710 --> 00:04:14.510
No, right.

56
00:04:14.940 --> 00:04:19.329
Does that impact in any way the taste or flavor of your cockatrice?

57
00:04:19.740 --> 00:04:20.899
Absolutely not.

58
00:04:21.329 --> 00:04:21.769
Right.

59
00:04:23.950 --> 00:04:31.150
So this points is that element at level and is changed or updated, all ancestors from the level and

60
00:04:31.150 --> 00:04:35.890
minus one up to the root of the tree needs to be updated.

61
00:04:36.520 --> 00:04:38.620
Now, why I'm discussing this analogy.

62
00:04:38.890 --> 00:04:44.380
I'm discussing this analogy because the makefile exactly works as part of this analogy.

63
00:04:45.190 --> 00:04:52.900
In Makefile, the delicious meal corresponds to the final executable or library that you want to prepare.

64
00:04:54.040 --> 00:04:59.830
The level one components corresponds to the dependent object file on external libraries

65
00:05:02.320 --> 00:05:08.710
because you create final executable or library out of the object file or external library's.

66
00:05:10.070 --> 00:05:18.800
And your level to components corresponds to source files, because from these sorts files, only you

67
00:05:18.800 --> 00:05:21.060
create object files.

68
00:05:21.650 --> 00:05:29.120
So next we will do an assignment on Makefile and we will try to correlate that how Makefile works exactly

69
00:05:29.120 --> 00:05:30.650
as part of this analogy.

