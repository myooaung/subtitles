WEBVTT
1
00:00:06.960 --> 00:00:13.380
So, guys, we have already discussed the implementation of steps from one to four, now let us see

2
00:00:13.380 --> 00:00:20.220
that what are the changes we need to do in our application seesaws file so that our application would

3
00:00:20.220 --> 00:00:25.260
be able to harness the benefits of programmable doubly linked list library.

4
00:00:26.550 --> 00:00:33.370
So you can see that I am in this directory that is library designing, programmable lab slash search

5
00:00:33.420 --> 00:00:34.140
callbacks.

6
00:00:35.400 --> 00:00:39.160
In this directory path, you can open the file application doxy.

7
00:00:39.690 --> 00:00:40.090
Right?

8
00:00:40.350 --> 00:00:42.860
So this file represents our application.

9
00:00:43.530 --> 00:00:50.180
So I have not made any changes in this source file except some changes in the main function.

10
00:00:50.760 --> 00:00:57.990
So you can see that in our main functions, like before we have created we have created three student

11
00:00:57.990 --> 00:00:58.620
records.

12
00:00:59.040 --> 00:00:59.460
Right.

13
00:00:59.700 --> 00:01:05.280
And in order to store these three student records, we have created a link list.

14
00:01:05.880 --> 00:01:10.980
Now we will register the matching function for the student structure with the library.

15
00:01:11.550 --> 00:01:17.130
We will do this by calling the function register key match callback function, which we have already

16
00:01:17.130 --> 00:01:19.290
implemented in our library.

17
00:01:20.070 --> 00:01:21.450
So what will this function do?

18
00:01:22.230 --> 00:01:27.480
This function will tell the library to make use of this matching function.

19
00:01:28.740 --> 00:01:37.230
In order to locate the entrusted data while traversing over a list, right, and after that, as usual,

20
00:01:37.230 --> 00:01:40.960
we add all the student objects in our library.

21
00:01:41.610 --> 00:01:49.410
Now you can see that in this line we can simply invoke the function, dial and search by keep right

22
00:01:49.620 --> 00:01:56.460
and pass the pointer to the link list in which we need to locate the intrusted data and pass the key

23
00:01:56.460 --> 00:01:59.490
value based on which we need to locate the data.

24
00:02:00.090 --> 00:02:00.450
Right.

25
00:02:00.780 --> 00:02:05.230
So this function will take care in order to locate the correct data.

26
00:02:05.850 --> 00:02:14.010
And of course, behind the scenes, the library will make use of this key matching function in order

27
00:02:14.010 --> 00:02:17.040
to find the interesting data in the linked list.

28
00:02:18.410 --> 00:02:26.570
Right, so you can see that the things have been simplified and the logic is now being executed on the

29
00:02:26.570 --> 00:02:29.340
liability side instead of application side.

30
00:02:30.500 --> 00:02:32.100
Do you see any for loop here?

31
00:02:32.450 --> 00:02:32.750
No.

32
00:02:32.750 --> 00:02:33.220
Right.

33
00:02:34.280 --> 00:02:39.860
Exact same explanation applies to the list holding the employer's data.

34
00:02:41.060 --> 00:02:48.710
So the takeaway is that we have offloaded the search operation to the library, aside from the application

35
00:02:48.710 --> 00:02:49.220
site.

36
00:02:51.280 --> 00:02:58.030
It is our library that is attracting over all the notes of the list and for each record that is held

37
00:02:58.030 --> 00:02:59.650
by the linked list.

38
00:03:00.310 --> 00:03:06.670
The library is making use of this key matching function in order to locate the entrusted data based

39
00:03:06.670 --> 00:03:07.600
on a key value.

40
00:03:08.770 --> 00:03:16.780
So in other words, we have programmed the library and we have thought that this library how to locate

41
00:03:16.780 --> 00:03:19.240
the entrusted data based on a key.

