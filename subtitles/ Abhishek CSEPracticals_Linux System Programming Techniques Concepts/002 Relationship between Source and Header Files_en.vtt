WEBVTT
1
00:00:05.280 --> 00:00:11.760
So welcome back, guys, in this module, we will going to study that, how should one plan his or her

2
00:00:11.760 --> 00:00:18.160
project and how should he organize his project files in the form of her profile and source file?

3
00:00:18.810 --> 00:00:26.970
So in C or C++, we usually organize our code whether the code represent an application or whether the

4
00:00:26.970 --> 00:00:28.600
code represent a liability.

5
00:00:28.830 --> 00:00:31.920
We usually organize our code in two types of files.

6
00:00:32.220 --> 00:00:34.530
That is how to file and source file.

7
00:00:36.260 --> 00:00:42.380
Now, the clear question that arises is that that what should be the content of header file and what

8
00:00:42.380 --> 00:00:44.190
should be the content of source file?

9
00:00:44.930 --> 00:00:51.300
So how to file usually contains editing, which needs to be exposed to other source files.

10
00:00:51.740 --> 00:00:59.240
So just remember this mantra, how the file should contain anything which needs to be exposed or shared

11
00:00:59.540 --> 00:01:05.180
by several source files now that anything could be structured definitions.

12
00:01:06.790 --> 00:01:13.210
There could be constants or enumerations, mackerels, function declarations.

13
00:01:13.240 --> 00:01:19.450
Now remember how the file must contain function declarations of those functions, which needs to be

14
00:01:19.450 --> 00:01:21.400
shared among several source files.

15
00:01:22.090 --> 00:01:28.110
Now, if you have a question that what is the difference between function declaration and function definition?

16
00:01:28.300 --> 00:01:34.780
So let me explain that whenever you declare a function, you would just write it like this.

17
00:01:35.290 --> 00:01:37.060
It is function declaration.

18
00:01:37.450 --> 00:01:43.060
Various function definition means that you are also specifying the logic of the function.

19
00:01:43.930 --> 00:01:45.720
This is called function definition.

20
00:01:46.240 --> 00:01:53.080
So how the file contains only function declaration and how the file never contain function definitions

21
00:01:53.470 --> 00:01:56.950
unless the function is a static in line function.

22
00:01:57.820 --> 00:02:04.840
So in case of how the file just learned a mantra that anything which needs to be exposed are shared

23
00:02:05.530 --> 00:02:12.910
to several other source files, then that particular things needs to be specified in the files.

24
00:02:14.280 --> 00:02:21.900
Now coming to the source files, actual implementation of logic as functions whose declarations are

25
00:02:21.900 --> 00:02:23.490
present in her files.

26
00:02:23.880 --> 00:02:32.010
So in source, while you should specify the function definition, that is actual implementation of logic

27
00:02:32.010 --> 00:02:33.770
as functions, right.

28
00:02:34.020 --> 00:02:39.420
So this thing that is function definition usually becomes a part of sorts once.

29
00:02:41.690 --> 00:02:48.590
So in case of source files just learned this mantra by heart, that is anything which need not to be

30
00:02:48.590 --> 00:02:51.290
exposed to other source files.

31
00:02:52.330 --> 00:02:59.380
Is always specified in the source file, so you can see on this diagram that header file is actually

32
00:02:59.590 --> 00:03:07.960
a content provider to source files held a file simply says that his source files.

33
00:03:08.140 --> 00:03:11.080
I have this this this following information for you.

34
00:03:11.290 --> 00:03:12.990
Please use this information.

35
00:03:13.390 --> 00:03:16.150
Now, that information could be structure definition's.

36
00:03:16.270 --> 00:03:24.940
It could be constants or enumeration macros, function declarations or starting in line function C files.

37
00:03:25.240 --> 00:03:30.910
Our source file has to include the header files by hash, including the header files.

38
00:03:31.120 --> 00:03:38.170
C files actually inherit the information from the head of file and that information then becomes a part

39
00:03:38.170 --> 00:03:39.790
of that particular source file.

40
00:03:40.450 --> 00:03:44.210
So Source File simply says that he had a file.

41
00:03:44.230 --> 00:03:45.400
Thank you very much.

42
00:03:45.610 --> 00:03:48.110
We will use what you provide to us.

43
00:03:48.970 --> 00:03:55.720
So for example, if suppose this had to file contains the structure definition s and suppose there are

44
00:03:55.720 --> 00:04:02.350
three source files which actually has to include this particular header file, then this is structure

45
00:04:02.350 --> 00:04:07.690
definition s will be inherited by all these sorts files.

46
00:04:08.110 --> 00:04:14.500
It means that the structure definition s is defined three times in two different source files.

47
00:04:16.079 --> 00:04:23.550
Same goes with every other type of information, be it constant enumeration mackerels, function declaration

48
00:04:23.580 --> 00:04:25.480
are standing in line functions.

49
00:04:25.890 --> 00:04:29.550
So this is the relationship between header file and source files.

50
00:04:30.650 --> 00:04:37.410
Now, going forward, I see that often students find it difficult to understand the purpose of --.

51
00:04:38.000 --> 00:04:44.720
Therefore, I have put in an extra effort to actually try to explain the concept and purpose of her

52
00:04:44.720 --> 00:04:45.160
file.

53
00:04:46.010 --> 00:04:52.850
So had the file simply says to the developer, developer means a programmer who is using the header

54
00:04:52.850 --> 00:04:55.370
file, which is written by somebody else.

55
00:04:56.460 --> 00:05:02.700
High profile simply says to the developer that here developer, I have the declaration of all these

56
00:05:02.700 --> 00:05:11.190
functions whose definitions is defined in some other source file, use them using the prototype our

57
00:05:11.190 --> 00:05:13.260
signatures that I am telling you.

58
00:05:13.530 --> 00:05:19.590
And yes, do not dare to see the internal implementation of these functions in source files.

59
00:05:21.000 --> 00:05:25.460
So the entire essence of the header file is captured in this dialogue.

60
00:05:26.860 --> 00:05:34.310
A header file conveys that what is there to be used by you and you should not bother how it is done.

61
00:05:35.290 --> 00:05:43.450
A developer of an application who wishes to use doubly linked list in his application must need to have

62
00:05:43.450 --> 00:05:50.760
an access to deal a lot as File Nardiello, but it is a header file of the link list, right?

63
00:05:51.100 --> 00:05:59.470
So if a developer has an access to the edge header file, he can include this file in his application

64
00:05:59.470 --> 00:05:59.860
called.

65
00:06:01.710 --> 00:06:09.150
And after including this deal, not as file and his application called a developer can make a call to

66
00:06:09.150 --> 00:06:12.190
functions, which is declared in this file.

67
00:06:12.750 --> 00:06:19.300
Remember, the definition of those functions has to be present in the corresponding Delal Doxy file.

68
00:06:20.070 --> 00:06:24.600
So developer do not need to see what is there in the file.

69
00:06:25.710 --> 00:06:32.520
So it is equivalent to like eating a tasty pre cooked meal without knowing how it was cooked.

70
00:06:33.090 --> 00:06:40.440
So all information that developers need to have is to make use of inkless library in his application

71
00:06:40.680 --> 00:06:45.660
without actually worry to know how bad this library internally works.

72
00:06:46.140 --> 00:06:51.880
In fact, you use it all the time in the simplest C program that you have ever written.

73
00:06:52.050 --> 00:06:59.080
You also have to include a standard header files, like a study I ordered that our memory dart at.

74
00:06:59.550 --> 00:07:07.050
So by including these standard -- in your application, you are actually using the functions

75
00:07:07.050 --> 00:07:14.430
whose declarations are present in these files without actually letting the internal implementation of

76
00:07:14.580 --> 00:07:16.210
those standard functions.

77
00:07:16.590 --> 00:07:20.910
Have you ever bothered that how my function has been implemented?

78
00:07:21.420 --> 00:07:21.780
Right.

79
00:07:22.050 --> 00:07:28.260
You have never bothered you have never bothered about how free function or parental function has been

80
00:07:28.260 --> 00:07:29.070
implemented.

81
00:07:29.670 --> 00:07:30.000
Right.

82
00:07:30.420 --> 00:07:32.520
So this is the purpose of hydrofoil.

83
00:07:33.620 --> 00:07:41.360
That is make things available to you without letting you worry about how those things were built or

84
00:07:41.360 --> 00:07:42.230
implemented.

