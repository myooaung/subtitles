WEBVTT
1
00:00:05.030 --> 00:00:10.070
So, guys, going forward now, you can see that I have written some piece of code on the right hand

2
00:00:10.070 --> 00:00:10.520
side.

3
00:00:11.120 --> 00:00:15.470
So this is a very simple C-code and we will try to understand that.

4
00:00:15.470 --> 00:00:22.310
What part of the C code is installed in what fragment of the virtual address space that I have drawn

5
00:00:22.310 --> 00:00:23.330
on the left hand side.

6
00:00:23.870 --> 00:00:30.170
So let us call the record as a process B and on the left hand side, this is the actual address space

7
00:00:30.170 --> 00:00:31.250
of A, process B.

8
00:00:32.290 --> 00:00:39.400
So let us see line by line that what the essence of this program are actually stored in what fragment

9
00:00:39.400 --> 00:00:40.750
of this virtual memory.

10
00:00:41.740 --> 00:00:48.730
So the first is actually the global variable, right, and it is initialized, so therefore it will

11
00:00:48.730 --> 00:00:52.890
going to be stored in the initialized data fragment of this virtual memory.

12
00:00:53.410 --> 00:00:53.770
Right.

13
00:00:54.220 --> 00:00:58.960
Second one is, again, a global variable, but it is not initialized by the programmer.

14
00:00:59.530 --> 00:01:04.860
So this global variable will be stored in the initialize data fragment of this virtual memory.

15
00:01:05.560 --> 00:01:10.920
The operating system knows that the programmer has not initialized this global variable.

16
00:01:11.320 --> 00:01:17.980
Therefore, before the execution of this program actually starts, the operating system initializes

17
00:01:17.980 --> 00:01:23.440
all the variables which are stored in this initialized data fragment with zero.

18
00:01:24.490 --> 00:01:24.860
Right.

19
00:01:25.630 --> 00:01:32.080
So if the program do not explicitly initialized this global variable, then the operating system will

20
00:01:32.080 --> 00:01:38.740
take the responsibility to initialize the initialized global variable before the execution of the program

21
00:01:38.740 --> 00:01:39.340
starts.

22
00:01:40.530 --> 00:01:47.340
Now, the next thing is the invocation of the function mean here is a function which is actually invoked

23
00:01:47.340 --> 00:01:48.570
by the operating system.

24
00:01:50.330 --> 00:01:57.770
So whenever a function call is invoked, some kind of metadata is always stored in the stack memory.

25
00:01:58.610 --> 00:02:04.490
Now, this metadata is nothing, but it is the arguments which are passed to the function, plus the

26
00:02:04.490 --> 00:02:06.240
local variables of the function.

27
00:02:06.830 --> 00:02:12.770
So we have discussed in the previous slide that whenever there is a function invocation, there is always

28
00:02:12.770 --> 00:02:15.830
some useful data which is stored in the stack memory.

29
00:02:16.370 --> 00:02:22.040
That useful data actually makes the execution of the function which is being invoked possible.

30
00:02:23.050 --> 00:02:29.200
So do not worry, we will going to discuss in detail that exactly what metadata is actually stored in

31
00:02:29.200 --> 00:02:32.530
the stack memory when a function is invoked.

32
00:02:34.110 --> 00:02:39.090
Then in the next line, you can see that we have a local variable and we know that the local variable

33
00:02:39.090 --> 00:02:43.660
of a function is always stored in the stack memory, right.

34
00:02:44.040 --> 00:02:50.790
Similarly, Canstar, my name is equal to Abhishek is again a local variable and it will be stored in

35
00:02:50.790 --> 00:02:55.170
the stock memory along with the value, not static.

36
00:02:55.170 --> 00:02:56.930
Variables are special variables.

37
00:02:57.150 --> 00:03:01.340
It doesn't matter whether they are local variable or they are global variable.

38
00:03:01.590 --> 00:03:07.470
They will always be going to stay in the initialized data fragment or an initialized data fragment,

39
00:03:07.680 --> 00:03:12.520
depending whether the programmer has initialized or not initialized static variables.

40
00:03:13.530 --> 00:03:18.600
So in this case, the programmer has initialized the static variable and therefore it will be saved

41
00:03:18.600 --> 00:03:21.070
in the initialized data fragment of natural memory.

42
00:03:22.090 --> 00:03:27.680
Now, next available is appointed time variable, and this variable is actually a local variable.

43
00:03:27.700 --> 00:03:30.410
Therefore, it will be saved in the stock memory.

44
00:03:31.150 --> 00:03:36.820
Now, in the next line, the program is actually requesting dynamic memory from the operating system

45
00:03:37.000 --> 00:03:38.360
of six hundred bytes.

46
00:03:38.860 --> 00:03:43.510
So as we know that all the dynamic memory allocation is done from the hip region.

47
00:03:44.020 --> 00:03:44.380
Right.

48
00:03:44.800 --> 00:03:51.070
So this memory will be assigned from the hip region of this working memory and therefore this heap memory

49
00:03:51.070 --> 00:03:57.550
region, which is shown in white color, will grow in the upper direction and it will expand by 100

50
00:03:57.550 --> 00:03:58.060
bytes.

51
00:03:58.810 --> 00:04:02.260
So these hundred bytes will be claimed from the heat memory region.

52
00:04:05.130 --> 00:04:10.320
Now, the next statement in this example is the invocation of some function for.

53
00:04:11.680 --> 00:04:18.640
Now, we already know that function in location results in serving some metadata in the stack memory,

54
00:04:19.630 --> 00:04:22.840
so we will save some metadata in this stack mummery.

55
00:04:23.470 --> 00:04:30.430
So not that more the content you save in the stack memory, that stack memory will grow from Harad towards

56
00:04:30.440 --> 00:04:31.320
lower address.

57
00:04:31.660 --> 00:04:32.050
Right.

58
00:04:32.200 --> 00:04:35.370
Because you are saving more and more content to the stack memory.

59
00:04:35.950 --> 00:04:42.970
And now when you compile this program, the compiler will generate an assembly code followed by a machine

60
00:04:42.970 --> 00:04:43.290
code.

61
00:04:44.050 --> 00:04:49.210
So the assembly code of this program will be saved in the code section of this Whelchel memory.

62
00:04:49.690 --> 00:04:55.030
And note that this code memory is actually read only memory that does one.

63
00:04:55.030 --> 00:05:02.350
It is written with the assembly code of a process you cannot alter or modify code section of the memory

64
00:05:02.350 --> 00:05:03.510
at any cost.

65
00:05:04.710 --> 00:05:09.610
So now to summarize, what is the virtual address space of the process?

66
00:05:10.590 --> 00:05:15.570
So the virtual address, the space of the process B is nothing, but it is the summation of the code

67
00:05:15.570 --> 00:05:22.900
section that is good memory plus data section, which is both initialized and initialized the heap memory

68
00:05:22.920 --> 00:05:29.250
region, which is shown in white color, that stack memory, which is shown in this red color and the

69
00:05:29.250 --> 00:05:30.600
command line arguments.

70
00:05:31.140 --> 00:05:37.740
So all of this region of what will address the space defines the what will address the space of a process.

71
00:05:38.580 --> 00:05:45.300
A process can access the content stored at any address which belong to any of these fragments of the

72
00:05:45.530 --> 00:05:51.790
will address the space, the memory region, which is not yet assigned to a process, is actually a

73
00:05:51.810 --> 00:05:53.580
memory region which is available.

74
00:05:53.940 --> 00:06:01.500
And if a process tries to make an attempt to actually access the address A which belongs to this unclaimed

75
00:06:01.500 --> 00:06:07.650
heap memory region, then the operating system will kill the process with the error segmentation fault.

76
00:06:09.440 --> 00:06:17.180
Similarly, if a process try to access the address B and that memory of the process has not grown to

77
00:06:17.180 --> 00:06:24.740
include the address B, then any attempt to access the content at Address B will result in segmentation

78
00:06:24.740 --> 00:06:25.220
fault.

79
00:06:26.140 --> 00:06:31.300
So this is how the virtual memory of the process is organized by the operating system.

80
00:06:33.500 --> 00:06:39.140
Now, let us summarize what we have discussed so far, so let us discuss that important fragment of

81
00:06:39.140 --> 00:06:40.520
the world show that was the space.

82
00:06:40.940 --> 00:06:48.650
So the Human Region One program allocate memory at runtime using Kalac or Mallak system call the memory

83
00:06:48.650 --> 00:06:55.400
gets allocated in the prison, then some more memory need to be allocated, use Kellock or Marlock function

84
00:06:55.640 --> 00:06:58.670
than he grows upwards as shown in the diagram.

85
00:06:59.770 --> 00:07:06.170
Similarly, we have a stark memory stuck memory is used to store local vegetables, past arguments to

86
00:07:06.170 --> 00:07:11.980
the function along with the return address of the instruction, which will be executed after the function

87
00:07:11.980 --> 00:07:12.970
call is over.

88
00:07:14.610 --> 00:07:19.230
So need not worry, we will going to study this in pretty much detail in the coming sleights.

89
00:07:19.800 --> 00:07:25.470
So a new STAC frame news actually means a new function needs to be added.

90
00:07:25.470 --> 00:07:29.810
As a result of newly called function, the stack grows downwards.

91
00:07:30.210 --> 00:07:35.670
So the main purpose of the static memory is that it supports procedure calls and processes and returns.

92
00:07:36.210 --> 00:07:38.000
And then is the data segment.

93
00:07:38.190 --> 00:07:39.060
The data segment.

94
00:07:39.060 --> 00:07:44.270
Part of the family is a memory which is used to store global and static vegetables.

95
00:07:44.700 --> 00:07:50.640
And as we know, that data segment is again splitting up into two parts the initialized data segment

96
00:07:50.640 --> 00:07:52.260
and the initialized data segment.

97
00:07:53.040 --> 00:07:59.100
And one important distinction that you can make here is that stack memory girls from Hodda address to

98
00:07:59.100 --> 00:07:59.970
lower address.

99
00:08:00.330 --> 00:08:02.550
So you can see that this is a static memory.

100
00:08:02.760 --> 00:08:09.030
And as you push more content to the stack memory, it grows from Harad towards laboratories, whereas

101
00:08:09.030 --> 00:08:13.950
on the other hand, keep memory grows from lowriders towards high retros.

102
00:08:15.220 --> 00:08:22.090
So the discussion that we have done so far is actually very important from interview perspective, the

103
00:08:22.100 --> 00:08:28.030
memory out of a Lennix process is OSDD from freshens up to 10 years of experience.

104
00:08:28.390 --> 00:08:34.570
And it is asked almost every time when you apply for the interview, especially in the domain of system

105
00:08:34.570 --> 00:08:36.850
programming or Carnot programming.

106
00:08:37.820 --> 00:08:44.750
In fact, the concept that we have discussed so far is actually a very much part of our undergraduate

107
00:08:44.750 --> 00:08:49.010
curriculum and therefore these questions are also asked from flesh.

