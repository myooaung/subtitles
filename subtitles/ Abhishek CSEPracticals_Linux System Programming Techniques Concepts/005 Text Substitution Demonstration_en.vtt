WEBVTT
1
00:00:05.300 --> 00:00:12.590
So, guys, let me show you the demonstration of tax substitution so you can see that in this directory,

2
00:00:12.590 --> 00:00:16.100
I have to have to file a dot edge and B dot edge.

3
00:00:16.550 --> 00:00:20.060
And I have an application file that is Abdelrazik.

4
00:00:21.080 --> 00:00:28.220
So you can see that the content of header file a dot at is exactly the same as what we discussed in

5
00:00:28.220 --> 00:00:29.130
the slide.

6
00:00:29.660 --> 00:00:36.370
Then on the window, on the right hand side, you can see the content of Bidart, a channel file.

7
00:00:37.160 --> 00:00:43.900
So you can see that it is the content or B dot edge header file in the second window and the third window

8
00:00:43.940 --> 00:00:49.040
we have application dot c file which is actually written by the programmer.

9
00:00:49.310 --> 00:00:52.890
That is, it is the worst run of application dot c file.

10
00:00:53.570 --> 00:00:59.840
Now on the final window that is in the fourth window, I will show you how to do tax substitution on

11
00:00:59.840 --> 00:01:02.660
application dot c file for that.

12
00:01:02.660 --> 00:01:13.490
Just use the compiler DCC and use minus E switch and specify application dot seesaws file and the output

13
00:01:13.490 --> 00:01:17.350
file should be the file with eye extension.

14
00:01:17.930 --> 00:01:18.210
Right.

15
00:01:18.560 --> 00:01:26.060
So using this command that is C minus E, we can apply the text substitution on the source file application

16
00:01:26.060 --> 00:01:33.920
dot C and the final version of file after text substitution will be the file app dot I.

17
00:01:34.730 --> 00:01:39.800
You can see that we have finished with the text substitution and now let us see that.

18
00:01:39.800 --> 00:01:42.200
What is there an app that I file.

19
00:01:43.370 --> 00:01:49.220
So you can see that all the lines, which starts with the hash, you can safely ignore all these lines

20
00:01:49.550 --> 00:01:56.690
and you can see that what remains in this file is exactly the same, which we obtained after applying

21
00:01:56.690 --> 00:01:59.210
all the tax substitution on the source file.

22
00:02:01.200 --> 00:02:08.550
So you can see that and the third window that is in this window, it is the version of the APRC file

23
00:02:08.550 --> 00:02:15.630
which was written by the programmer and in the fourth window, it is the version of source file after

24
00:02:15.630 --> 00:02:17.880
applying all the text substitution.

25
00:02:18.780 --> 00:02:25.230
So you can see that in the source file, there is no has to find, there is no hash includes and the

26
00:02:25.230 --> 00:02:29.190
macro uses has been replaced by their actual definitions.

27
00:02:29.540 --> 00:02:36.930
So you can always use minus E suich of the compiler DCC in order to see the version of the source file

28
00:02:37.110 --> 00:02:41.260
immediately after text substitution has been performed on it.

29
00:02:41.910 --> 00:02:49.110
Remember, that compiler has not yet started compiling this final version of source file and therefore

30
00:02:49.110 --> 00:02:52.030
it will not throw you any compilation error.

31
00:02:53.040 --> 00:03:00.000
Compiler throws the compiler schnatter when it actually compiles the source file, and we have not yet

32
00:03:00.000 --> 00:03:01.300
compiled the source file.

33
00:03:01.950 --> 00:03:07.590
We have simply subjected to our source file only to text substitution.

