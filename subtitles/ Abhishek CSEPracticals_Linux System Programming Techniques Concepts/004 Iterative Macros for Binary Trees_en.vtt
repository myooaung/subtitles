WEBVTT
1
00:00:05.550 --> 00:00:06.960
So welcome back, guys.

2
00:00:07.410 --> 00:00:11.990
Now let us discuss one more example of writing and iterative macro.

3
00:00:12.630 --> 00:00:19.740
Now, in this example, we will learn how to write Ateret a macro to iterate over binary search trees

4
00:00:20.370 --> 00:00:20.730
write.

5
00:00:22.160 --> 00:00:29.240
So this will make you realize that how powerful and necessary is writing it to make macros for walking

6
00:00:29.450 --> 00:00:37.280
over data structures so fast, you should know the algorithm to iterate over a binary substrate in in

7
00:00:37.280 --> 00:00:38.180
order sequence.

8
00:00:38.840 --> 00:00:45.380
Now, I'm sure a short recursive program that you must have learned in your academics must be crossing

9
00:00:45.380 --> 00:00:45.950
your mind.

10
00:00:46.670 --> 00:00:48.900
So here is a little surprise for you.

11
00:00:49.650 --> 00:00:54.930
Assume that each of the three has a pointer to its parent, right?

12
00:00:55.280 --> 00:01:02.930
So because of this assumption that is each node of a tree also has a pointer to its parent, there is

13
00:01:02.930 --> 00:01:10.850
absolutely no need to write any recursive function to ETrade or all the nodes of a binary stream.

14
00:01:11.960 --> 00:01:19.670
So whenever in a tree data structure A. has a pointer to its parent, you can easily implement any non

15
00:01:19.670 --> 00:01:26.210
recursive logic or what created a structure that isn't being that recursive logic performs very poorly

16
00:01:26.210 --> 00:01:29.570
as compared to equivalent Ateret of logic.

17
00:01:31.010 --> 00:01:38.810
So let us suppose that the falling structure represents a node of a tree, so you can see that as usual,

18
00:01:38.820 --> 00:01:42.230
you have a pointer to the left node, you have a pointer to the right node.

19
00:01:42.410 --> 00:01:47.080
But also there is additional pointer which points to the parent of a node.

20
00:01:47.420 --> 00:01:50.600
And of course, you have a member which is towards the data.

21
00:01:52.810 --> 00:01:59.740
So simply, this structure represents the node of a binary sastry, and this data structure simply represents

22
00:01:59.740 --> 00:02:06.340
a tree, and in order to have an access to the entire tree, all you need is a pointer to the root of

23
00:02:06.340 --> 00:02:06.820
the tree.

24
00:02:08.050 --> 00:02:14.500
So now I expect you that you at least know already how to insert a node in a binary sastry.

25
00:02:15.480 --> 00:02:21.750
So now we need to do some homework before we could write an iterative macro to iterate over a binary

26
00:02:21.750 --> 00:02:22.410
South Street.

27
00:02:24.400 --> 00:02:31.120
So remember, the iterative macro that we were going to write will be non recursive algorithm, which

28
00:02:31.120 --> 00:02:35.620
will be used to iterate over all the nodes of a binary search street.

29
00:02:36.220 --> 00:02:41.830
I understand that you can write a recursive algorithm to iterate over all the nodes of a binary search

30
00:02:41.840 --> 00:02:42.220
street.

31
00:02:43.150 --> 00:02:50.650
But as I illustrated that we will not going to write any recursive logic because recursive functions

32
00:02:50.890 --> 00:02:55.400
performs very poorly as compared to equivalent iterative logic.

33
00:02:56.290 --> 00:03:03.940
So your iterative macro must facilitate to iterate over all the nodes of a binary sastry using Falu

34
00:03:04.150 --> 00:03:06.610
instead of any recursive logic.

35
00:03:08.260 --> 00:03:14.000
So going forward, you can see on the right hand side I have drawn a sample binary South Stream.

36
00:03:14.590 --> 00:03:19.030
So our goal is that given a binary sastry right.

37
00:03:19.030 --> 00:03:25.030
A macro to iterate in in order sequence over all the words of a binary south street.

38
00:03:25.570 --> 00:03:26.010
Right.

39
00:03:26.500 --> 00:03:30.050
And we need to obey or respect the following constraint.

40
00:03:30.670 --> 00:03:33.490
You are not allowed to write any recursive logic.

41
00:03:33.940 --> 00:03:39.250
You should be able to start iteration from any starting node of a binary stream.

42
00:03:40.180 --> 00:03:41.500
Every node in a binary.

43
00:03:41.500 --> 00:03:44.710
Sastry also has a pointer to its parent.

44
00:03:45.550 --> 00:03:53.020
We need to implement Abilio Macro so our macro would look something like this that is outraged by the

45
00:03:53.020 --> 00:03:53.440
results.

46
00:03:53.450 --> 00:04:01.030
Rebegin, pass the pointer to the tree data structure and pass the pointer to the node of a tree initially

47
00:04:01.030 --> 00:04:02.080
initialized to null.

48
00:04:02.470 --> 00:04:03.700
And this macro.

49
00:04:03.720 --> 00:04:10.960
Should I turn it over all the nodes of a binary sastry each time setting this tree node point to point

50
00:04:11.380 --> 00:04:13.380
to a node of a binary search tree.

51
00:04:14.350 --> 00:04:21.670
So inside this loop you can perform any customized processing you would want to perform on a node of

52
00:04:21.670 --> 00:04:22.720
a binary such tree.

53
00:04:23.980 --> 00:04:26.730
So you want to try before we discuss the approach.

54
00:04:27.580 --> 00:04:34.450
So before going forward and see the solution, I would like you to give it a try that how you would

55
00:04:34.450 --> 00:04:36.150
implement this macro.

56
00:04:36.730 --> 00:04:43.660
Remember, the principles of implementing this macro is also the same as in case of link list, which

57
00:04:43.660 --> 00:04:45.150
we have already discussed.

58
00:04:45.760 --> 00:04:51.730
So in the next slide we will discuss the approach to implement the macro outrate binary search tree

59
00:04:51.730 --> 00:04:52.180
begin.

60
00:04:52.660 --> 00:04:53.020
Right.

