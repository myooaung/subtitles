WEBVTT
1
00:00:05.250 --> 00:00:12.090
So, guys, now let us discuss next how virtual addresses are mapped to physical addresses, so that

2
00:00:12.090 --> 00:00:14.850
is discussed virtual addresses to physical address mapping.

3
00:00:15.690 --> 00:00:21.570
So on the right hand side, you can see a diagram which represents a process in execution.

4
00:00:22.530 --> 00:00:28.230
So we already know that process, what trilateral space is, split it up into various segments.

5
00:00:28.740 --> 00:00:33.810
The Bottommost is the code segment, followed by a data segment followed by Heap's segment.

6
00:00:34.290 --> 00:00:41.100
And then you have an empty space which is reserved for growth and then followed by a stack segment which

7
00:00:41.100 --> 00:00:42.090
grows downwards.

8
00:00:43.050 --> 00:00:48.810
Now, let us suppose that during the course of execution of a process, your process requests 20 bites

9
00:00:48.810 --> 00:00:50.450
of memory using my lock.

10
00:00:50.940 --> 00:00:53.970
So let us suppose that mallock return some address.

11
00:00:54.750 --> 00:01:00.810
So if the address that is indicated by BTR points to address location said this.

12
00:01:01.740 --> 00:01:02.100
Right.

13
00:01:02.550 --> 00:01:07.950
So this address will be some address in Heap's segment of the process, which will address the space.

14
00:01:08.700 --> 00:01:15.180
So you can see in the diagram on the right hand side that Ahepe segment has expanded by 20 bytes and

15
00:01:15.180 --> 00:01:19.320
the starting at the end of the story Bytes is the address, which is written by mallock.

16
00:01:21.690 --> 00:01:24.980
So the content of the speech out of trouble will be disastrous.

17
00:01:25.930 --> 00:01:30.890
No, suppose your program invokes a right opposition to this memory location.

18
00:01:31.590 --> 00:01:36.500
So let's say that you are simply writing string to this address.

19
00:01:37.170 --> 00:01:44.430
So as soon as you perform any write or read our position on this virtual address, what happens on the

20
00:01:44.430 --> 00:01:51.630
operating system that this virtual address is converted into corresponding physical address by Amamou

21
00:01:52.560 --> 00:01:55.080
Amamou stands for Memory Management Unit.

22
00:01:55.080 --> 00:01:59.910
And the concept of what what's your address to physical address is called paging.

23
00:02:01.020 --> 00:02:06.030
So you can see that is a component which resides in the operating system.

24
00:02:06.420 --> 00:02:13.710
And for every virtual address that is generated by running process, Amamou, Comverse, this virtual

25
00:02:13.710 --> 00:02:20.490
atlas and corresponding physical address, not by definition physical address is nothing, but it is

26
00:02:20.700 --> 00:02:27.690
a location of a bite on a physical memory, not your physical memory is nothing, but it is the realm.

27
00:02:29.340 --> 00:02:33.750
So it is the actual physical hardware memory which is installed in your system.

28
00:02:34.080 --> 00:02:40.760
And every bit of this physical memory has a physical address which is constant and it never changes.

29
00:02:41.490 --> 00:02:47.940
So constitutes the virtual address that is generated by running process into its corresponding physical

30
00:02:47.940 --> 00:02:48.480
address.

31
00:02:49.020 --> 00:02:53.570
And the right operation is actually performed on this physical address.

32
00:02:54.090 --> 00:03:01.620
So it means that the data is actually written into the physical memory, what that virtual memory do

33
00:03:01.620 --> 00:03:03.000
not stored any data.

34
00:03:03.660 --> 00:03:09.390
At the end of the day, the data will be written in the physical memory at the address, which is mapped

35
00:03:09.390 --> 00:03:11.280
from the corresponding virtual address.

36
00:03:12.120 --> 00:03:17.010
So never, ever say that is written in the virtual memory, nor that is wrong.

37
00:03:17.730 --> 00:03:20.720
Any data always resides in the physical memory.

38
00:03:21.540 --> 00:03:23.340
Which memory is a concept?

39
00:03:23.460 --> 00:03:30.090
What your memory is not a real memory or it is not an actual piece of hardware that can store your data.

40
00:03:30.930 --> 00:03:34.970
At the end of the day, the data needs to be stored in the physical memory.

41
00:03:35.580 --> 00:03:37.740
So there's a slide at a very high level.

42
00:03:37.740 --> 00:03:42.920
We have discussed the role of memory in the preceding slides or lectures.

43
00:03:42.930 --> 00:03:43.910
We will discuss that.

44
00:03:43.920 --> 00:03:48.690
How does translation from Watson address to physical address actually happens?

45
00:03:49.140 --> 00:03:54.090
For now, just choose a random physical address and a random virtual address.

46
00:03:54.870 --> 00:03:58.200
So actual data or content is written on the physical memory.

47
00:03:58.350 --> 00:04:01.340
Virtual memory do not contain any data.

48
00:04:03.210 --> 00:04:10.350
So same goes with any address which belongs to the process stack memory or any address which belongs

49
00:04:10.350 --> 00:04:12.120
to the data segment of the process.

50
00:04:13.080 --> 00:04:19.100
In fact, any virtual address which belongs to the virtual space of the process undergoes through the

51
00:04:19.110 --> 00:04:24.060
paging and maps to an actual physical address on the main memory.

52
00:04:24.960 --> 00:04:29.550
So in this example, I have taken an address which belongs to the heap segment of the process.

53
00:04:30.180 --> 00:04:35.640
But the mapping of which will address to physical address applies to any what's your address, which

54
00:04:35.640 --> 00:04:39.250
belongs to any portion of the process which will address the space.

55
00:04:39.930 --> 00:04:43.920
This virtual address could be an address which belongs to the Heap segment of the process.

56
00:04:44.310 --> 00:04:48.420
This virtual address could be an address which belong to the data.

57
00:04:48.420 --> 00:04:51.720
Segment of the process are called Segment of the Process.

58
00:04:53.250 --> 00:04:55.440
So now let's try to visualize.

59
00:04:56.490 --> 00:05:03.120
The relationship between the virtual and physical address, with the help of an analogy, consider virtual

60
00:05:03.120 --> 00:05:10.500
address as keys so you have some keys and consider virtual address that belongs to the process.

61
00:05:10.890 --> 00:05:13.560
Does space as some sort of keys.

62
00:05:14.130 --> 00:05:19.630
Now, if you have keys that there has to be lockers in which you can keep your data items.

63
00:05:20.130 --> 00:05:29.190
So consider lockers as actual storage on physical memory will process data is actually capped and consider

64
00:05:29.200 --> 00:05:34.980
the memory management unit as a mechanism which maps that which key belongs to which locker.

65
00:05:37.080 --> 00:05:42.850
So again and again, I'm emphasizing what memory do not contain any data.

66
00:05:43.380 --> 00:05:50.190
It is the physical memory which eventually stores the data, which is just a mechanism which takes you

67
00:05:50.190 --> 00:05:54.630
to the actual location in the physical memory with the help of paging.

68
00:05:55.930 --> 00:06:03.040
So this clearly explain the relationship between virtual address, the physical address and the Beijing,

69
00:06:03.040 --> 00:06:10.150
which acts as a bridge between virtual address and physical address and facilitate mapping from virtual

70
00:06:10.150 --> 00:06:11.650
address to physical address.

