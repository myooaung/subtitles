WEBVTT
1
00:00:05.190 --> 00:00:06.630
So, guys, welcome back.

2
00:00:06.870 --> 00:00:13.470
Next, we will going to understand the stark corruption so that corruption is a situation where we cut

3
00:00:13.470 --> 00:00:18.960
corrupt the data of a stack frame by copying the data more than the memory limits.

4
00:00:19.590 --> 00:00:22.280
So let us understand this with the help of an example.

5
00:00:23.100 --> 00:00:25.740
So let us suppose that you have a very simple program.

6
00:00:26.070 --> 00:00:31.140
And in this program you have a main function which in turn invokes the function for.

7
00:00:32.710 --> 00:00:38.020
And you can see that the argument that we are passing to the function is the argument which you pass

8
00:00:38.020 --> 00:00:46.750
as a command line argument and you can see in this function, we are simply creating an eddy of size

9
00:00:46.750 --> 00:00:51.350
12 bytes and we are copying that string, which is as an argument to this eddy.

10
00:00:51.850 --> 00:00:52.720
So that's all.

11
00:00:53.560 --> 00:01:01.180
So now let us see that how this small piece of code can demonstrate the situation of state corruption.

12
00:01:02.050 --> 00:01:10.090
So now if I ask you to draw the call stack of these two functions, that is mean and full, then you

13
00:01:10.090 --> 00:01:11.370
should draw this diagram.

14
00:01:11.980 --> 00:01:14.680
So you have a stack frame of the main function.

15
00:01:14.950 --> 00:01:18.460
Following that, there is a stack frame of the function full.

16
00:01:19.150 --> 00:01:23.860
And you can see that here is the argument that is pushed into the stack frame or the function fule,

17
00:01:24.670 --> 00:01:29.950
followed by a return address of the color and the best pointer value of the color function.

18
00:01:30.490 --> 00:01:33.460
Now, again, you don't need to understand what is best point, though.

19
00:01:33.470 --> 00:01:36.490
We will shortly going to discuss this in detail.

20
00:01:36.820 --> 00:01:42.520
And after that you have the local ADDAE, which occupies 12 bytes in the stack frame.

21
00:01:43.900 --> 00:01:47.140
So notice the layout of an ad in the stack frame.

22
00:01:48.630 --> 00:01:54.960
The index zero element of the array will have the lowest address and the last element of the array will

23
00:01:54.960 --> 00:02:00.510
have the highest address in the stack memory, so says the size of the area is 12 bytes.

24
00:02:00.690 --> 00:02:04.590
So here that will occupy 12 sites of memory in the stack frame.

25
00:02:05.820 --> 00:02:11.820
Now, suppose you invoke this function and you pass the command line argument, the following string.

26
00:02:12.990 --> 00:02:16.430
Now you can notice that this string has 20 characters.

27
00:02:16.800 --> 00:02:19.710
It means that the size of this string is 20 bytes.

28
00:02:20.490 --> 00:02:20.880
Right.

29
00:02:21.510 --> 00:02:29.300
So basically what you are doing that you are copying 20 bytes of a string in a 12 bit of buffer and

30
00:02:29.310 --> 00:02:34.860
you are not even checking whether the buffer in which you are copying that string is sufficient enough

31
00:02:34.860 --> 00:02:36.390
to hold a string or not.

32
00:02:37.380 --> 00:02:44.310
So this is the snapshot of the stack manually when you have not yet copied the string to this buffer.

33
00:02:45.520 --> 00:02:45.910
Right.

34
00:02:46.360 --> 00:02:53.830
So this is before copy, but the moment this instruction has executed and the string that you parsed

35
00:02:53.830 --> 00:02:59.980
as an argument has been copied into this buffer, then the strike frame would look something like this.

36
00:03:00.820 --> 00:03:05.670
So you can see that the string gets copied in the stack, mammary as follows.

37
00:03:06.490 --> 00:03:13.360
So you can see that the legal memory into which you were allowed to copy the string was only 12 bytes.

38
00:03:13.960 --> 00:03:17.440
Right, because it was the size of the local added.

39
00:03:18.980 --> 00:03:24.660
But since you have copied 20 bytes of data, therefore you have copied eight bytes extra.

40
00:03:25.250 --> 00:03:31.710
So basically by copying eight bytes of data extra, you have corrupted the return address and the base

41
00:03:31.730 --> 00:03:34.900
pointer value, which was stored in this stack frame.

42
00:03:36.080 --> 00:03:41.540
So these values will get corrupted, corrupted means it is overwritten by the user data.

43
00:03:42.230 --> 00:03:48.380
Now, remember that return address and the best point of value is the information which is required

44
00:03:48.380 --> 00:03:53.870
by the function to resume its execution when the call returns.

45
00:03:56.330 --> 00:04:02.270
But now, since the Connely itself has corrupted the return address and base point or value of the corner,

46
00:04:02.570 --> 00:04:09.950
therefore when the quality function returns will not nor the return address and its base point of value

47
00:04:10.250 --> 00:04:13.950
because they are overwritten by some junk or garbage.

48
00:04:14.600 --> 00:04:19.870
So it is for this reason that when the quality function returns, this program will crash.

49
00:04:20.660 --> 00:04:22.220
And now we know the reason that.

50
00:04:22.220 --> 00:04:23.500
Why did this program crash?

51
00:04:23.810 --> 00:04:29.360
This program crashed because we have corrupted the return address and the best point of value which

52
00:04:29.360 --> 00:04:37.850
was stored in the stack fame by copying larger string into a smaller buffer which could not accommodate

53
00:04:37.850 --> 00:04:39.080
that string size.

54
00:04:39.650 --> 00:04:46.220
So this is one example which illustrates that how the stack can be corrupted and when Stack gets corrupted

55
00:04:46.370 --> 00:04:49.070
than any undefined behavior can happen.

