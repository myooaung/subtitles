WEBVTT
1
00:00:05.860 --> 00:00:12.040
So, guys, you can see the content of the makefile that I have written, right, and you can see that

2
00:00:12.040 --> 00:00:18.550
in this makefile, I have written down all the rules that we have discussed so far as it is, it's a

3
00:00:18.550 --> 00:00:19.960
complete copy paste.

4
00:00:21.070 --> 00:00:25.300
I have simply copy pasted all the rules that we have discussed in this makefile.

5
00:00:25.600 --> 00:00:25.990
Right.

6
00:00:26.350 --> 00:00:31.240
So you can see that in the first line just to specify the final product that you want to prepare.

7
00:00:31.600 --> 00:00:35.700
In our case, we want to prepare the final product, which is executable.

8
00:00:36.040 --> 00:00:38.880
So the name of the executable is simply XY.

9
00:00:39.820 --> 00:00:41.860
Not that the target is not a keyword.

10
00:00:41.860 --> 00:00:43.740
You can write anything that you want here.

11
00:00:44.080 --> 00:00:49.080
For example, you can specify the final product column YUXI Right.

12
00:00:49.390 --> 00:00:52.840
And after that I specify all the rules one by one.

13
00:00:53.650 --> 00:00:58.090
Right now you must be thinking that in what order should you specify these rules?

14
00:00:58.780 --> 00:01:06.490
So just to let you know that Makefile execution do not happen line by line, from top to bottom, rules

15
00:01:06.550 --> 00:01:11.080
do not execute in the order they are specified in the Makefile.

16
00:01:11.440 --> 00:01:18.320
In fact, rules execute as per the LDAP first search traversal of a dependency tree.

17
00:01:18.850 --> 00:01:25.330
Now, if you recall that that first search algorithm to traverse a tree, then you will going to understand

18
00:01:25.330 --> 00:01:28.800
that Thol Rules will going to execute in a makefile.

19
00:01:29.890 --> 00:01:31.150
For the information.

20
00:01:31.150 --> 00:01:35.380
This Dadfar search is also called post cover of a tree.

21
00:01:37.040 --> 00:01:44.690
So the McDouall will do so in the very first line, the Magpul will come to know that we want to create

22
00:01:44.690 --> 00:01:47.270
a final product whose name is EXI.

23
00:01:47.750 --> 00:01:53.900
So the Magpul will search among the list of rules in this makefile and try to locate the rule whose

24
00:01:53.900 --> 00:01:55.120
name is EXI.

25
00:01:55.490 --> 00:01:57.230
So such a rule is this one.

26
00:01:57.230 --> 00:02:00.590
That is line number two because here we have the rule name.

27
00:02:01.160 --> 00:02:01.530
Right.

28
00:02:02.840 --> 00:02:09.289
So the Makefile will now see that what are the components required in order to create the final product.

29
00:02:10.280 --> 00:02:17.480
So the Magpul will know that it has to create mainboard or object file followed by Licalsi, not a static

30
00:02:17.480 --> 00:02:18.080
liberi.

31
00:02:18.710 --> 00:02:19.080
Right.

32
00:02:19.310 --> 00:02:26.030
So as a result now the make Poolesville search in the list of rules and try to locate the rule which

33
00:02:26.030 --> 00:02:29.620
is responsible to prepare mainboard or object file.

34
00:02:29.990 --> 00:02:31.670
So such a rule is this one.

35
00:02:32.940 --> 00:02:33.320
Right.

36
00:02:34.570 --> 00:02:41.770
So the magpul will execute this rule because it is dependent on a source file and source file is already

37
00:02:41.770 --> 00:02:43.040
an existing entity.

38
00:02:43.660 --> 00:02:51.310
So the military will execute this rule first after this rule, execution is complete when the or object

39
00:02:51.310 --> 00:02:52.900
file will be available.

40
00:02:53.290 --> 00:02:59.510
Now, the next rule that the Magpul will find to locate is the rule which will prepare Licalsi, not

41
00:02:59.530 --> 00:03:00.630
a static library.

42
00:03:01.030 --> 00:03:08.260
So such a rule is this one that is in line before so many people will now see that on what component's

43
00:03:08.260 --> 00:03:10.210
is the loop considered?

44
00:03:10.210 --> 00:03:12.200
A static liability is dependent.

45
00:03:12.580 --> 00:03:18.070
So clearly we know that in order to create a static library, we should have all the dependent object

46
00:03:18.070 --> 00:03:18.610
files.

47
00:03:19.060 --> 00:03:19.470
Right?

48
00:03:20.590 --> 00:03:25.840
So the believe will now see that it has to prepare Matt or object file.

49
00:03:25.990 --> 00:03:32.370
So now it will search in a list of rules which prepare strict math, not all as a final product.

50
00:03:32.800 --> 00:03:35.710
So such a rule is this one, right?

51
00:03:35.950 --> 00:03:39.730
So the second rule that will be executed will be this rule.

52
00:03:40.720 --> 00:03:46.840
Similarly, McDouall will now try to locate a rule which prepares common, underscore my thought or

53
00:03:46.840 --> 00:03:48.440
object file as a final product.

54
00:03:49.000 --> 00:03:52.000
So such a rule is this one right?

55
00:03:52.960 --> 00:03:59.320
In the similar way, the make tool will try to locate a rule which will prepare complex underscored

56
00:03:59.910 --> 00:04:02.080
object file as a final product.

57
00:04:02.410 --> 00:04:07.260
And such a rule is this one right?

58
00:04:07.480 --> 00:04:09.910
So you can see the order of execution of the rule.

59
00:04:11.020 --> 00:04:17.050
So you can see the order of execution of this rule really is not dependent in the order in which they

60
00:04:17.050 --> 00:04:18.880
are specified in the makefile.

61
00:04:21.130 --> 00:04:27.160
Now, after the execution of rule number four, all the components which are required to prepare Lipka

62
00:04:27.610 --> 00:04:31.420
Astatke Liablity will be ready and available, right.

63
00:04:31.600 --> 00:04:39.670
So the McDouall will now going to execute this rule number five and until execution of rule number five,

64
00:04:39.850 --> 00:04:42.910
Licalsi Dot Astatke Liablity will be available.

65
00:04:44.390 --> 00:04:51.440
Now, coming back to the mic pool had started from that is preparation of executable file.

66
00:04:52.910 --> 00:05:00.410
So the components which are required to build final file are not only considered all right and after

67
00:05:00.410 --> 00:05:06.100
the execution of all these five rules, both of these components are now available to the make tool.

68
00:05:06.380 --> 00:05:06.690
Right.

69
00:05:07.040 --> 00:05:12.560
So because all the components are available, therefore make Poolesville execute rule number six.

70
00:05:13.660 --> 00:05:18.700
And after the execution of rule number six, the final executable is created.

71
00:05:20.450 --> 00:05:23.750
So now let us run this makefile and verify whether.

72
00:05:25.320 --> 00:05:34.680
This rules execute in the order in which we have discussed so now so now I'm in this directory and I

73
00:05:34.680 --> 00:05:38.520
have this makefile, which we have just discussed.

74
00:05:39.000 --> 00:05:43.350
So in order to run this makefile, you simply run the command make.

75
00:05:45.080 --> 00:05:49.940
And you can see that the rules execute exactly in the order in which we had discussed.

76
00:05:51.570 --> 00:05:57.440
And you can see that the final product that is created by this makefile is a final executable, right.

77
00:05:57.630 --> 00:06:03.960
And you can see that just before the final executable was created, Licalsi Dot Astatke Liablity was

78
00:06:03.960 --> 00:06:04.920
also created.

79
00:06:05.790 --> 00:06:08.070
So this is how Makefile works.

80
00:06:08.610 --> 00:06:16.920
So one thing to note here is that I have specified an additional rule here with name clean in Makefile.

81
00:06:16.920 --> 00:06:20.340
We always have to specify a rule called clean.

82
00:06:20.880 --> 00:06:26.030
This rule is used to actually delete everything that was built by this make file.

83
00:06:26.640 --> 00:06:32.670
So you should clean up all the object files, all the libraries and all the executable in this rule

84
00:06:32.670 --> 00:06:33.480
using Autum.

85
00:06:33.480 --> 00:06:33.900
Come on.

86
00:06:34.950 --> 00:06:43.560
So to execute this rule, you simply run, make and provide the ruling and it will run the clean rule.

87
00:06:45.820 --> 00:06:53.290
In fact, you can specify any rule which you have, which you have mentioned in the Makefile, for example,

88
00:06:53.440 --> 00:07:00.430
you want to create only the static liablity, so specify the rule name after the command.

89
00:07:00.430 --> 00:07:07.160
And this will and this will build only Licalsi as a final product.

90
00:07:08.050 --> 00:07:15.040
You can see that there is no executable created because we wanted to create only Licalsi dot a as a

91
00:07:15.040 --> 00:07:16.960
final product by specifying.

92
00:07:17.950 --> 00:07:20.180
The ruling came after the make come on.

93
00:07:21.280 --> 00:07:26.410
Also note that in one directory there has to be only and only one make file.

94
00:07:26.740 --> 00:07:28.830
You cannot create multiple make files.

95
00:07:28.840 --> 00:07:31.570
Add in a single directory.

96
00:07:32.840 --> 00:07:33.310
Right.

97
00:07:33.320 --> 00:07:39.020
So here you cannot create another makefile and there has to be only one makefile in one directory.

98
00:07:40.160 --> 00:07:46.430
So I hope I'm able to explain to you the core concept of writing Makefile and henceforward whenever

99
00:07:46.430 --> 00:07:52.070
you write your programs, which involve multiple source files and linking with multiple libraries,

100
00:07:52.220 --> 00:07:56.840
you are always advised to write make files in order to build your programs.

