WEBVTT
1
00:00:07.640 --> 00:00:08.960
So welcome back, guys.

2
00:00:09.020 --> 00:00:14.840
Now in this section of the courts, we're going to cover bitmaps, so bitmap is nothing, but it is

3
00:00:14.840 --> 00:00:16.160
an array of bits.

4
00:00:16.700 --> 00:00:21.950
So you must be thinking that since it is not original structure that is available to us in our programming

5
00:00:21.950 --> 00:00:25.190
language, how can we create an aerial bits?

6
00:00:25.580 --> 00:00:28.670
So that's what we are going to understand in this section of the course.

7
00:00:29.570 --> 00:00:34.320
So let's say you have a person which comes with a theatre ticket and the ticket to have a seat.

8
00:00:34.340 --> 00:00:35.810
No, but just 13.

9
00:00:36.200 --> 00:00:38.960
And let's say that the capacity of the theater is 28.

10
00:00:38.960 --> 00:00:43.550
That is, maximum number of persons that can be seated in a theater is 28.

11
00:00:44.150 --> 00:00:50.930
So as soon as this person enters into the theater, the theater authority marks the corresponding seat

12
00:00:51.620 --> 00:00:52.430
as a result.

13
00:00:52.790 --> 00:00:58.100
So what is the appropriate way to keep track of the seats which are reserved or not?

14
00:00:58.760 --> 00:01:02.360
So simply, you can take a bitmap, which is an array a bit.

15
00:01:02.780 --> 00:01:03.800
And since the person?

16
00:01:03.800 --> 00:01:04.310
No.

17
00:01:04.819 --> 00:01:12.110
And since the person with ticket number 13 has arrived, you can mark the bit number 13 in this area

18
00:01:12.140 --> 00:01:12.860
as one.

19
00:01:13.490 --> 00:01:13.910
All right.

20
00:01:15.390 --> 00:01:23.790
So instead of taking an array of bullets and we already know that bullying takes a size of four bites

21
00:01:23.790 --> 00:01:31.500
on most compilers and programming languages, so it would have taken a lot more memory to you if you

22
00:01:31.500 --> 00:01:38.070
had declared an edit, a Boolean, and instead if you take an array of bits, then you would see a lot

23
00:01:38.070 --> 00:01:38.670
more memory.

24
00:01:38.850 --> 00:01:43.620
In fact, the memory consumption of your program was reduced from X to X by eight.

25
00:01:44.160 --> 00:01:47.730
If instead of creating an of Boolean, you create an error beds.

26
00:01:49.380 --> 00:01:54.510
To keep track of 28 seats, you need a bowling alley of size 28.

27
00:01:55.230 --> 00:02:02.850
So 28 in the size of the bowling, the pipe is four bytes, so to comes two hundred and twelve bytes.

28
00:02:04.440 --> 00:02:09.720
Whereas if you are taking a bet, any and all you need is 28 bits.

29
00:02:10.289 --> 00:02:15.660
So 28, which is not even four bytes, so you can see how much size you see.

30
00:02:16.620 --> 00:02:22.200
So going farther, memory is always allocated in units of bytes and not bits.

31
00:02:22.980 --> 00:02:27.720
So you need to create a rapid API which work on byte addressable memory.

32
00:02:28.020 --> 00:02:31.470
Byte addressable memory means every bite has an address.

33
00:02:31.980 --> 00:02:36.010
But your program should be able to perform the operation at the bit level.

34
00:02:36.510 --> 00:02:38.400
So let us try to understand this point.

35
00:02:38.940 --> 00:02:45.090
So when your program and walks on my log column, your program is allocated for bytes of memory.

36
00:02:45.420 --> 00:02:51.270
You have never seen any system call or any kind of API, which allocates a memory in units of bits.

37
00:02:51.900 --> 00:02:57.960
So as soon as your program invokes familiar calls, a four by memory, which is represented by a snapshot

38
00:02:57.960 --> 00:03:04.110
one is assigned to your program and your program can read and write into these memory locations.

39
00:03:05.460 --> 00:03:11.610
What we are looking to do is that this form of memory, which is allocated to your program, should

40
00:03:11.610 --> 00:03:15.390
be treated as an array of 32 bits.

41
00:03:15.930 --> 00:03:22.110
So Snapshot two represents the same chunk of memory that is the same memory as a snapshot one.

42
00:03:22.500 --> 00:03:31.530
But your program should have wrapper APIs so that it sees this for byte of memory as 32 bit of memory.

43
00:03:32.250 --> 00:03:32.670
All right.

44
00:03:32.940 --> 00:03:37.950
Your program should be able to access each an individual bit of this war by memory.

45
00:03:38.370 --> 00:03:40.340
So, for example, if I ask you that.

46
00:03:40.590 --> 00:03:46.320
Go to index number 18 and set the bed to one that in your program should be able to go to the index

47
00:03:46.320 --> 00:03:48.450
number 18 and set to submit to one.

48
00:03:49.200 --> 00:03:57.000
All right, so your program request and release the memory in units of bytes, but your program treats

49
00:03:57.000 --> 00:04:00.180
those bytes of memory as an array of bits.

50
00:04:00.630 --> 00:04:07.230
In fact, you need to create an illusion through wrapper APIs using which you can read byte addressable

51
00:04:07.230 --> 00:04:09.210
memory at the bit level.

52
00:04:10.620 --> 00:04:11.700
So going further?

53
00:04:13.500 --> 00:04:16.050
So how to create any of size and bits?

54
00:04:16.290 --> 00:04:20.370
So for that, we can create a data structure which represents a bitmap.

55
00:04:21.029 --> 00:04:26.550
This guy to start with is a pointer to the memory, which is byte addressable.

56
00:04:26.940 --> 00:04:33.540
That is, it is a chunk of memory which is returned by Malak or Kalak calls, and every size represents

57
00:04:33.540 --> 00:04:34.950
the number of beds.

58
00:04:35.490 --> 00:04:41.520
So for example, let's say if an is equal to forty five, then your program must block at least six

59
00:04:41.520 --> 00:04:42.630
bytes of memory.

60
00:04:43.080 --> 00:04:48.720
And within the six bytes off memory, a program must be able to access each and every individual bits

61
00:04:49.080 --> 00:04:51.480
from index location zero to forty four.

62
00:04:52.650 --> 00:04:53.070
All right.

63
00:04:53.790 --> 00:04:55.740
So this is what we are looking to achieve.

64
00:04:56.730 --> 00:04:59.980
So going further, how will you malloc this data structure?

65
00:05:00.630 --> 00:05:01.380
So simple.

66
00:05:01.830 --> 00:05:08.610
First of all, you need to calculate how many bytes you need to Malaak in order to satisfy your need

67
00:05:08.610 --> 00:05:09.570
of end bits.

68
00:05:10.350 --> 00:05:12.390
This you can compute using this formula.

69
00:05:13.020 --> 00:05:19.350
Then you can block the memory to represent your bitmap, and then you can log the memory in units of

70
00:05:19.380 --> 00:05:20.130
bytes.

71
00:05:21.480 --> 00:05:26.050
And it is this memory which you need to treat it as an array of bits.

72
00:05:26.610 --> 00:05:31.740
And this addresses member will hold the size of the array in terms of number of bits.

73
00:05:32.460 --> 00:05:36.000
So basically, this data structure represents an array of bits.

