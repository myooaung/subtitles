WEBVTT
1
00:00:05.680 --> 00:00:06.970
So welcome back, guys.

2
00:00:07.480 --> 00:00:12.910
Next, we will going to discuss streams, so what are streams?

3
00:00:13.180 --> 00:00:20.970
A stream is a data structure which is used to create the Elvis as well as data structure.

4
00:00:20.980 --> 00:00:25.910
Help us to decode or read that Elvis at the receiving machines.

5
00:00:26.560 --> 00:00:34.120
So creating a Thirlby is called serialisation of the data, whereas decoding that the Elvis or reading

6
00:00:34.120 --> 00:00:37.690
the tea Elvis is called the serialization of the data.

7
00:00:39.200 --> 00:00:41.570
So this data structure is called stream.

8
00:00:43.910 --> 00:00:49.610
So this extreme resembles to a typewriter that is like in a typewriter.

9
00:00:49.640 --> 00:00:54.200
We start with the next line when there is no space left in the current line.

10
00:00:54.530 --> 00:01:02.120
Similarly, in the stream, we keep on feeding the data in the buffer until the buffer is complete and

11
00:01:02.120 --> 00:01:09.440
when there is no more space in the buffer to accommodate new data, then we double the size of the buffer.

12
00:01:10.040 --> 00:01:13.550
So you will understand it more in the coming slides.

13
00:01:14.690 --> 00:01:20.380
For now, just understand that stream data structure works exactly same as a typewriter.

14
00:01:23.730 --> 00:01:32.950
So extreme data structure is also called as serialized buffer, so it is a very simple data structure.

15
00:01:32.970 --> 00:01:38.190
You can see that the stream data structure or serialized buffer can be defined as follows.

16
00:01:39.090 --> 00:01:42.410
So it's a pointer to the buffer which actually stored the data.

17
00:01:42.900 --> 00:01:51.150
And it is the size of the buffer and it points to the byte number in the buffer will the next data will

18
00:01:51.150 --> 00:01:53.610
be copied in the buffer.

19
00:01:54.390 --> 00:02:01.860
So let us try to visualize the functioning of this data structure so you can see that this is data structure

20
00:02:01.860 --> 00:02:02.870
has three members.

21
00:02:04.080 --> 00:02:10.889
So you can see that we have a memory buffer and B points to the start of the memory buffer.

22
00:02:11.940 --> 00:02:20.370
The buffer is filled with data from BI to zero to the byte number indicated by next.

23
00:02:21.510 --> 00:02:21.880
Right.

24
00:02:22.230 --> 00:02:30.150
So this much greater portion of this memory is filled with data, whereas the green portion of this

25
00:02:30.150 --> 00:02:37.560
memory is the available memory and you can see the size of the entire buffer is represented by size.

26
00:02:38.600 --> 00:02:38.940
Right.

27
00:02:39.230 --> 00:02:43.550
So these are the three members which represents the civilized buffer or streams.

28
00:02:45.470 --> 00:02:52.850
B is a pointer to the start of the buffer size is the actual size of the entire buffer and next points

29
00:02:52.850 --> 00:02:55.490
to the end of the data in the buffer.

30
00:02:56.330 --> 00:03:01.190
When new data will come, it will be copied in this Pseudolus buffer.

31
00:03:02.510 --> 00:03:11.300
From the next position, so let us discuss some APIs that is related to the operations of serialized

32
00:03:11.300 --> 00:03:11.780
buffer.

33
00:03:12.650 --> 00:03:20.570
The first API is the in serialized buffer, so this API does nothing, but it only initializes the serialized

34
00:03:20.570 --> 00:03:20.990
buffer.

35
00:03:22.690 --> 00:03:30.280
So you can see inside this function, we take the memory which represents this data structure, and

36
00:03:30.280 --> 00:03:35.900
we again take the memory which actually stores the data in the serialized buffer.

37
00:03:36.550 --> 00:03:43.360
So by default, the size of the memory which distorts the actual data, we have taken it as hundred

38
00:03:43.360 --> 00:03:43.810
bytes.

39
00:03:44.750 --> 00:03:52.250
And therefore, the size field is initialise 200, because we have taken the default size of this buffer

40
00:03:52.250 --> 00:03:59.940
as hundred bytes, therefore sizes initialise two hundred and the next field is initialized to zero.

41
00:03:59.960 --> 00:04:01.640
That is the starting of the buffer.

42
00:04:02.750 --> 00:04:04.850
So the usage of this API is very simple.

43
00:04:05.090 --> 00:04:13.340
Just declare a pointer to the SITILIDES buffer and simply call the init civilized buffer API with the

44
00:04:13.340 --> 00:04:14.580
address of the pointer.

45
00:04:15.380 --> 00:04:23.390
So this pointer will be updated and it will point to the serialized buffer object after initialize buffer

46
00:04:23.390 --> 00:04:24.590
API is called.

47
00:04:28.830 --> 00:04:35.970
So this is the buffer that will be returned when intact, civilized buffer is called, you can see that

48
00:04:35.970 --> 00:04:42.890
the buffer pointer points to the start of the memory buffer and the next feel points to zero.

49
00:04:44.010 --> 00:04:52.020
That is the next data that will be copied in this buffer will be copied from the zero white and the

50
00:04:52.020 --> 00:04:54.010
default size of the buffer is 100.

51
00:04:54.750 --> 00:04:58.000
That is the center memory chunk is of 100 bytes.

52
00:04:58.710 --> 00:05:03.570
So this is the serialized buffer that you get after calling the init serialized buffer.

53
00:05:04.810 --> 00:05:06.550
So looks pretty much simple.

54
00:05:08.800 --> 00:05:16.450
Now, let us discuss the API, which is called to put the data inside the serialised buffer, right.

55
00:05:16.720 --> 00:05:19.490
So you can see the signature of this API.

56
00:05:19.510 --> 00:05:25.630
Is that the first argument is the pointer to the serialized buffer into which you are going to place

57
00:05:25.630 --> 00:05:26.180
the data.

58
00:05:27.040 --> 00:05:31.900
The second argument is a pointer to any data which you want to copy in the civilized buffer.

59
00:05:33.280 --> 00:05:33.620
Right.

60
00:05:34.180 --> 00:05:36.230
So this stereotype is of character.

61
00:05:37.180 --> 00:05:42.220
And the last argument is the number of whites that you want to copy in the serialized buffer.

62
00:05:43.990 --> 00:05:50.260
So let's say we have the new data, some new memory, or we have some useful data that is placed in

63
00:05:50.260 --> 00:05:55.120
this memory chunk and let the size of this data is invite.

64
00:05:55.720 --> 00:06:01.570
And we have a pointer, say, data, which points to the start of this new data.

65
00:06:02.380 --> 00:06:10.530
Now, our goal of this serialized data is to place this new data inside the civilise before.

66
00:06:11.380 --> 00:06:19.810
Now, at this point of time, you can see that the state of the serialized buffer is such that the next

67
00:06:19.810 --> 00:06:21.250
number of bytes.

68
00:06:22.780 --> 00:06:26.980
Are already occupied in the serializable floor by the data.

69
00:06:28.140 --> 00:06:32.700
Because your next is set to hear.

70
00:06:34.270 --> 00:06:39.710
Because the next value is set to this memory location inside the serialised buffer.

71
00:06:40.360 --> 00:06:42.760
So next is nothing, but it is the offset.

72
00:06:43.830 --> 00:06:45.450
Inside the buffer.

73
00:06:48.050 --> 00:06:53.600
Right, so any data which will be copied into the serialized buffer will be copied from the byte number

74
00:06:53.600 --> 00:06:56.120
represented by next new.

75
00:06:58.140 --> 00:06:58.740
Right.

76
00:06:59.070 --> 00:07:05.610
So when we will copy this new data into the civilized buffer, you can see it will be copied from the.

77
00:07:06.690 --> 00:07:14.940
Next bite, no, and because we have copied the new data, the next value should be updated to point

78
00:07:15.750 --> 00:07:19.560
to the start of the available memory inside the buffer.

79
00:07:21.000 --> 00:07:21.370
Right.

80
00:07:21.840 --> 00:07:26.670
So you can see it is pretty much looks like a typewriter, you keep on copying the data in the buffer

81
00:07:27.660 --> 00:07:35.460
and you keep on updating the next value to point to the last bite of occupied data in the civilized

82
00:07:35.460 --> 00:07:35.940
buffer.

83
00:07:37.770 --> 00:07:38.130
Right.

84
00:07:38.550 --> 00:07:42.010
So I request you to go through this entire logic.

85
00:07:42.030 --> 00:07:47.150
This is very much pretty much simple logic, right?

86
00:07:49.360 --> 00:07:55.630
So the things to note here is that if there is no space to accommodate a new data industrialized buffer,

87
00:07:56.080 --> 00:08:00.850
we double the size of the entire buffer while preserving the existing data.

88
00:08:01.810 --> 00:08:03.730
So this is existing content.

89
00:08:04.180 --> 00:08:11.650
We achieved this using real system which changes the size of the allocated memory.

90
00:08:13.470 --> 00:08:20.130
But at the same time, preserves that data, which is present in that memory, so we achieved this using

91
00:08:20.430 --> 00:08:21.810
a lock system called.

92
00:08:23.580 --> 00:08:23.940
Right.

93
00:08:25.050 --> 00:08:31.530
So just like in a typewriter, when you are not left with any space in the current line, you go to

94
00:08:31.530 --> 00:08:38.520
the next line in case of the serializable for when you are not left with any available space to accommodate

95
00:08:38.520 --> 00:08:40.210
any new external data.

96
00:08:40.950 --> 00:08:43.169
Then we double the size of the buffer.

