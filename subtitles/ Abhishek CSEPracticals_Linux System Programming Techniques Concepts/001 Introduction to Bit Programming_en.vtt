WEBVTT
1
00:00:07.350 --> 00:00:08.640
So welcome back, guys.

2
00:00:09.030 --> 00:00:15.120
Now in this section of the course, we're going to understand the concept of births and how we can manipulate

3
00:00:15.480 --> 00:00:17.160
the mammary at the board level.

4
00:00:17.940 --> 00:00:23.910
So most programming languages provide developers to manipulate memory at the finest granularity level

5
00:00:23.910 --> 00:00:24.720
of one bite.

6
00:00:25.530 --> 00:00:31.950
That is, the mainstream programming languages like C, C++, Java Python provides the data type of

7
00:00:31.950 --> 00:00:38.100
the smaller size, which is in type the size of the cardinal type we already know is one bite.

8
00:00:39.180 --> 00:00:45.510
So in the mainstream programming languages such as C, C++, Java, you cannot have a data type whose

9
00:00:45.510 --> 00:00:47.460
size is a smaller than one byte.

10
00:00:48.720 --> 00:00:55.770
So it simply means that your program cannot manipulate memory less than one byte using primitive or

11
00:00:55.770 --> 00:00:57.300
inbuilt genotypes.

12
00:00:58.590 --> 00:01:05.700
But sometimes there arises some problem statement, which requires us to manipulate memory at a bit

13
00:01:05.700 --> 00:01:07.620
level instead of byte level.

14
00:01:08.430 --> 00:01:15.210
So a bit is nothing, but it is either zero or one virales logical operators to manipulate memory at

15
00:01:15.210 --> 00:01:15.930
the bit level.

16
00:01:16.260 --> 00:01:23.820
So use case of being able to manipulate the memory at the bit level is that that we use a Boolean type

17
00:01:23.820 --> 00:01:28.140
data type to see yes or no in any mainstream programming.

18
00:01:28.140 --> 00:01:33.840
Language and size of the Boolean is four bytes on most compilers and most programming language.

19
00:01:34.680 --> 00:01:40.650
So since Boolean data type is associated only with two types of responses that it is either yes or no,

20
00:01:41.070 --> 00:01:42.930
it is either on or off.

21
00:01:43.440 --> 00:01:50.220
So why not just use a bit to track Abule instead of Sense, which also has two states that is either

22
00:01:50.220 --> 00:01:51.510
a to zero or one?

23
00:01:53.100 --> 00:01:59.220
So but manipulation makes tracking of a set of Boolean very easy, and we were going to see this shortly.

24
00:01:59.730 --> 00:02:05.310
So it is actually very important from the interview perspective that you are often asked questions in

25
00:02:05.310 --> 00:02:09.780
which you are tested that whether you are able to manipulate the memory at the board level or not.

26
00:02:10.289 --> 00:02:17.160
In other words, you are tested whether you know, better programming or not in the field of system

27
00:02:17.160 --> 00:02:24.090
programming and in embedded systems able to manipulate the memory and the level is very essential and

28
00:02:24.090 --> 00:02:24.840
important.

29
00:02:25.410 --> 00:02:32.550
So in this section, we will do some interactions as an exercise on bit manipulation because bit programming

30
00:02:32.550 --> 00:02:35.700
forms are very important part of the interview process.

31
00:02:36.990 --> 00:02:41.970
We will also convert certain questions which are often asked in the interview on which programming.

32
00:02:43.440 --> 00:02:49.710
So before we proceed further in this course, please memorize the Boolean algebra concepts, such as

33
00:02:49.710 --> 00:02:52.740
the concept of an R and not operators.

34
00:02:53.220 --> 00:02:57.990
You must have learned some Boolean algebra in your school or academics, and there you must have learned

35
00:02:57.990 --> 00:03:05.610
the concept of engaged Argueta and not get so mainstream programming languages such as C R C++ provide

36
00:03:05.610 --> 00:03:07.680
some in-built Bitwise operators.

37
00:03:08.130 --> 00:03:12.630
That is, these are those operators which can be used to manipulate memory at the level.

38
00:03:13.920 --> 00:03:18.430
So every data type is stored in the computer's memory in terms of bits.

39
00:03:18.450 --> 00:03:23.280
That is, every data is stored in the computer's memory in the sequence of bits.

40
00:03:24.060 --> 00:03:29.760
So, for example, do you have a 16 bit integer a whose value is one two three four in the computer's

41
00:03:29.760 --> 00:03:30.390
memory?

42
00:03:30.780 --> 00:03:39.000
You just convert this decimal number into binary format and whatever binary number you get, simply

43
00:03:39.000 --> 00:03:45.060
visualize that that particular binary number is stored in the computer's memory in the following format.

44
00:03:45.480 --> 00:03:51.300
You have the most significant bit at the left and the law a significant bit on the right.

45
00:03:51.780 --> 00:03:54.810
Here left means the lower side of the memory address.

46
00:03:55.140 --> 00:04:01.780
So this array of zeros and ones actually represents the snapshot of a part of computer memory, which

47
00:04:01.860 --> 00:04:05.850
stores the integer number one two three four in the binary format.

48
00:04:06.570 --> 00:04:10.530
And since it is computer memory, therefore it would claim to have some address.

49
00:04:11.160 --> 00:04:15.610
Let's say the starting address of this computer's memory is nothing, let's say two thousand.

50
00:04:17.370 --> 00:04:23.490
I have just taken a random number, and since this variable is a 16 bit variable, which means that

51
00:04:23.490 --> 00:04:25.740
the size of this variable is two bytes.

52
00:04:26.400 --> 00:04:30.450
Therefore, the ending address of this chunk of memory would going to be two thousand.

53
00:04:30.450 --> 00:04:39.660
To remember, every bite has an address so many times in the interview process, I have asked the students

54
00:04:39.660 --> 00:04:43.860
to print the number into its equivalent binary form.

55
00:04:44.370 --> 00:04:50.070
And to my surprise, what they start doing is that they start converting the number one two three four

56
00:04:50.070 --> 00:04:52.020
into its equal and binary format.

57
00:04:52.890 --> 00:04:55.070
So let's say we have a number one two three four.

58
00:04:55.080 --> 00:05:00.530
They implement the logic to convert decimal number to binary number and whatever by the number.

59
00:05:00.540 --> 00:05:06.420
The guy at the store, those sequence of bits into an.

60
00:05:06.610 --> 00:05:14.030
Added, And then they print the area, so it simply means that that they do not have the clarity that

61
00:05:14.030 --> 00:05:21.620
every data that is supported by the programming language, whether it is U.N. 16 or whether it is a

62
00:05:21.620 --> 00:05:26.930
string or whatever it is, Kyle, at the end of the day, it is stored in the computer's memory as a

63
00:05:26.930 --> 00:05:28.010
sequence of bits.

64
00:05:29.660 --> 00:05:35.270
So you do not convert anything into its binary form, it is stored in the computer's memory already

65
00:05:35.270 --> 00:05:36.290
in the binary form.

66
00:05:36.950 --> 00:05:45.200
All you need to do is that to manipulate this memory, which is referenced by the variable of type unsigned

67
00:05:45.200 --> 00:05:46.100
in 16.

68
00:05:47.550 --> 00:05:47.970
All right.

69
00:05:48.510 --> 00:05:54.840
So address of the wearable is nothing, but it is two thousand that does this particular address.

70
00:05:57.160 --> 00:06:02.530
So using bit level programming, you can manipulate the individual bits of this chunk of memory.

71
00:06:03.070 --> 00:06:11.050
For example, if I ask you to change this particular birds from one to zero, then using bit level programming,

72
00:06:11.050 --> 00:06:12.070
you can do that.

73
00:06:13.480 --> 00:06:20.290
So every data type, whether it is under 16 or whether it is cat, a star or whether it is string in

74
00:06:20.290 --> 00:06:28.720
C++ or whether it is user defined or die, or whether it is double or whether it is flawed.

75
00:06:28.720 --> 00:06:34.000
At the end of the day, all information is stored in the computer's memory as a sequence of bits.

76
00:06:34.870 --> 00:06:37.090
The more significant bit has the lower address.

77
00:06:37.090 --> 00:06:44.440
In this case, we assume that the starting address of this chunk of memory is 2000, whereas the least

78
00:06:44.440 --> 00:06:49.570
significant bit resides at the heart address, which is the address 2002.

79
00:06:50.170 --> 00:06:50.620
All right.

80
00:06:51.190 --> 00:06:58.690
Always try to visualize the computer's memory as an array of bytes, and every bite has an address as

81
00:06:58.690 --> 00:07:04.120
we move towards right, the address of the memory locations increases.

82
00:07:04.690 --> 00:07:07.930
So always strive to visualize the computer's memory in this way.

83
00:07:08.620 --> 00:07:15.430
Here also, we are assigning the lower address that is 2000 to the more significant bit of this chunk

84
00:07:15.430 --> 00:07:22.780
of memory, and we are assigning the lower address that is 2002 to the least significant bit of this

85
00:07:22.780 --> 00:07:23.710
chunk of memory.

86
00:07:23.830 --> 00:07:30.310
Second point that I would like to bring out is that memory is byte addressable.

87
00:07:33.060 --> 00:07:37.770
It simply means that every bite of the memory will going to have an address.

88
00:07:38.190 --> 00:07:42.450
Bits don't have addresses, it's the bite that have addresses.

89
00:07:43.050 --> 00:07:43.440
All right.

90
00:07:43.890 --> 00:07:51.360
So if the starting address of this chunk of memory, we'd say two thousand, then count it bits from

91
00:07:51.360 --> 00:07:55.680
the starting position that is one two three four five six seven eight.

92
00:07:56.310 --> 00:08:04.200
So starting position of this particular bed would have an adverse 2001 because these Edwards comprises

93
00:08:04.200 --> 00:08:05.310
of one bites.

94
00:08:07.350 --> 00:08:07.790
All right.

95
00:08:08.160 --> 00:08:11.010
So every bite of a memory has an address.

96
00:08:11.400 --> 00:08:16.800
If somebody ask you that here, what is the address of this particular bed in our memory?

97
00:08:17.280 --> 00:08:20.940
The answer is simple that it do not have any address.

98
00:08:21.630 --> 00:08:24.930
Bits do not have addresses, only bytes have addresses.

99
00:08:24.960 --> 00:08:25.470
All right.

100
00:08:26.430 --> 00:08:33.059
Similarly, if there is one more bit here, let's say one, then two thousand two would be the starting

101
00:08:33.059 --> 00:08:34.530
address of that bit.

102
00:08:35.400 --> 00:08:35.789
All right.

103
00:08:38.370 --> 00:08:44.370
So now going further, the and operate on the program language is often represented by the ampersand

104
00:08:44.370 --> 00:08:44.760
sign.

105
00:08:45.030 --> 00:08:49.400
The order operator is often represented by this street pipe sign.

106
00:08:49.950 --> 00:08:56.040
The complement operator are also called the nugget operator is represented by this tilde.

107
00:08:56.400 --> 00:09:02.250
So, for example, if it is represented in the computer memory as one zero one, then tilde a would

108
00:09:02.250 --> 00:09:03.780
going to be zero one zero.

109
00:09:04.350 --> 00:09:04.830
All right.

110
00:09:05.040 --> 00:09:08.880
So this is called complement operator or negate operator.

111
00:09:09.120 --> 00:09:12.270
It simply flips the bits in the computer's memory.

112
00:09:12.540 --> 00:09:14.820
Then the next operator is the Zaa operator.

113
00:09:15.690 --> 00:09:18.240
XLR operator is represented by the symbol.

114
00:09:18.810 --> 00:09:22.560
So essentially, we are performing the zone operation between A and B.

115
00:09:24.990 --> 00:09:30.450
Then we have shift operators and there are two types of shift operators the right shift operator and

116
00:09:30.450 --> 00:09:31.620
the left shift operator.

117
00:09:32.520 --> 00:09:38.070
Right shifting of the operator means that you are dividing an integer number by two.

118
00:09:38.940 --> 00:09:39.150
Four.

119
00:09:39.300 --> 00:09:48.660
For example, if it is 16 and if you perform right shift operator on this number by one, then 16 is

120
00:09:48.660 --> 00:09:54.390
represented in the computer's memory as one, followed by a four zeros.

121
00:09:54.780 --> 00:09:55.230
All right.

122
00:09:55.950 --> 00:10:02.640
So if you perform right, shift on the variable e, then the birds which represented represented in

123
00:10:02.640 --> 00:10:07.500
the computer's memory would get shifted by one position two words right?

124
00:10:08.190 --> 00:10:13.170
So this pattern of birds will now become one, followed by three zeros.

125
00:10:13.860 --> 00:10:19.680
That is, you can visualize it like like all these other birds have shifted towards the right by one

126
00:10:19.680 --> 00:10:20.280
position.

127
00:10:21.030 --> 00:10:21.450
All right.

128
00:10:22.620 --> 00:10:24.690
Similarly, we have a left shift operator.

129
00:10:24.690 --> 00:10:33.570
If you perform a left shift on the variable E, then from this bit pattern, you can visualize as if

130
00:10:33.570 --> 00:10:37.750
this sequence of bits have been shifted towards left by one position.

131
00:10:38.250 --> 00:10:43.620
So the resultant bit pattern would become one, followed by four zero again.

132
00:10:44.550 --> 00:10:51.060
That is, if we get the horizontal pattern because we have perform right shift and then left shift.

133
00:10:51.670 --> 00:10:52.110
All right.

134
00:10:54.500 --> 00:10:59.900
So if you notice right, shifting of an integer variable means that we are dividing the variable by

135
00:10:59.900 --> 00:11:00.380
two.

136
00:11:03.470 --> 00:11:10.340
So this represented 16, this would represent it because we have right shifted it, whereas this would

137
00:11:10.340 --> 00:11:13.940
again represent 16 because we have left shifted it.

138
00:11:14.450 --> 00:11:14.900
All right.

139
00:11:16.130 --> 00:11:18.170
So guys, there is a little homework for you.

140
00:11:18.710 --> 00:11:23.150
So please browse the internet and learn about these operators if you are not already familiar.

141
00:11:23.630 --> 00:11:27.920
We shall be going to learn some advanced learning in this course regarding bit programming.

142
00:11:28.430 --> 00:11:29.470
And isn't homework?

143
00:11:29.480 --> 00:11:34.990
Just pick up a pen and paper and write a table for C is equal to SRB.

144
00:11:35.720 --> 00:11:38.600
We are a b and C represent bits.

145
00:11:39.440 --> 00:11:42.590
So now in the next lecture we do, we will discuss something more about.

146
00:11:42.590 --> 00:11:43.700
This is our operator.

147
00:11:44.180 --> 00:11:45.170
This is our operator.

148
00:11:45.170 --> 00:11:46.820
Require some special attention.

