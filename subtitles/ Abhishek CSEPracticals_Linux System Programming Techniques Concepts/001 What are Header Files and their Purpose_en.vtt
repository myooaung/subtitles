WEBVTT
1
00:00:05.850 --> 00:00:12.560
So welcome back, guys, in this module, we will going to learn exactly how header file works.

2
00:00:13.440 --> 00:00:20.460
So if we understand exactly how header file works, we shall be able to save ourselves from various

3
00:00:20.460 --> 00:00:21.570
compilation errors.

4
00:00:22.230 --> 00:00:26.160
We shall be able to organize and design our projects better.

5
00:00:26.490 --> 00:00:32.570
That is, we will be able to organize our head of file and source file in a better way.

6
00:00:33.380 --> 00:00:38.430
I have seen even experienced programmer who have experienced close to four years.

7
00:00:38.820 --> 00:00:43.170
I'm not clear about how exactly header file works, right?

8
00:00:44.100 --> 00:00:51.600
So therefore I have decided to include a topic on header file all together in course how the files are

9
00:00:51.600 --> 00:00:53.150
non-competition units.

10
00:00:53.400 --> 00:01:00.910
So remember, the term non-competition units means that compiler do not actually compile the head of

11
00:01:00.910 --> 00:01:01.560
files.

12
00:01:02.580 --> 00:01:02.970
Right?

13
00:01:04.550 --> 00:01:11.960
So remember, hydrofoils are non-competition units, but you still see Syntex error if you write something

14
00:01:11.960 --> 00:01:13.270
wrong in the header file.

15
00:01:14.060 --> 00:01:21.800
So if you see syntax error, it simply means that compiler boxes are compile the header file also.

16
00:01:22.100 --> 00:01:28.370
Now, it is something that is contradicting with my first statement that header files are non-competition

17
00:01:28.370 --> 00:01:28.820
units.

18
00:01:29.600 --> 00:01:34.900
So we will understand this point when we will know exactly how header file looks.

19
00:01:35.390 --> 00:01:42.350
Now coming to the inclusion of header finds, inclusion of the header file means hash, including the

20
00:01:42.350 --> 00:01:44.150
header file in your source file.

21
00:01:44.720 --> 00:01:51.530
Now if you have ever written USSI program, you must have hash include the standard or non-standard

22
00:01:51.530 --> 00:01:54.020
header file in your C file.

23
00:01:56.050 --> 00:02:01.210
So has including the head of fine in the source file is called inclusion of her fine.

24
00:02:01.780 --> 00:02:07.330
No inclusion of of file simply works by following these three fundamental steps.

25
00:02:08.520 --> 00:02:11.930
The first one is the recursive text substitution method.

26
00:02:13.640 --> 00:02:21.020
In the second run, simply replace the hash include had a dot at a statement by the content of had a

27
00:02:21.020 --> 00:02:22.590
dot which had the file.

28
00:02:23.540 --> 00:02:29.000
So if in your source file you're writing a statement such as hash include had a dot edge.

29
00:02:29.210 --> 00:02:36.190
So doing the compilation process, the compiler replaced this entire statement with the content of the

30
00:02:36.190 --> 00:02:37.370
dot ahead of time.

31
00:02:38.300 --> 00:02:45.500
Now the question arises that had a dot, as had the file itself can contain either hash included statement.

32
00:02:46.070 --> 00:02:52.790
Now, if this is the case, then simply replace the nested hash included statements by the content of

33
00:02:52.790 --> 00:02:54.080
the respective head of file.

34
00:02:54.710 --> 00:03:01.700
So has to include b underscore how that statement will be replaced by the contents of B underscored

35
00:03:01.710 --> 00:03:03.380
had each had a file.

36
00:03:04.280 --> 00:03:11.030
So you can see that the replacement of hash include detective by the corresponding head of file is recursive

37
00:03:11.030 --> 00:03:11.750
INM.

38
00:03:13.190 --> 00:03:18.620
We will going to understand this point with the help of an example more collaboratively in the next

39
00:03:18.620 --> 00:03:19.220
slide.

40
00:03:20.720 --> 00:03:27.770
Now these three points that is recursive text substitution method and replacing the hash include detective

41
00:03:27.950 --> 00:03:30.280
with the corresponding head of content.

42
00:03:30.470 --> 00:03:35.830
Help us to achieve these two basic principles of C and C++ language.

43
00:03:36.530 --> 00:03:41.410
The first one is that defined the structure definition first before use.

44
00:03:41.870 --> 00:03:45.320
Let us call this principle as defined and use thumb rule.

45
00:03:45.740 --> 00:03:51.170
And the second principle is that declare the function prototype first before use.

46
00:03:51.500 --> 00:03:58.490
So let us call this principle as declare and use thumb rule so you can see that first rule is specific

47
00:03:58.490 --> 00:04:02.660
to structures where a second rule is specific to functions.

48
00:04:03.530 --> 00:04:08.180
We will going to have a discussion on these two timbrell in detail in the coming sleights.

49
00:04:08.870 --> 00:04:15.500
Now let us discuss in detail that how the inclusion of header file in the source file actually works

50
00:04:15.500 --> 00:04:16.190
in detail.

