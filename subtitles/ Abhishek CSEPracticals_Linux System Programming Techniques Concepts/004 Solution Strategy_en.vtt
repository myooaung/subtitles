WEBVTT
1
00:00:05.160 --> 00:00:08.320
So now let us discuss the solution to the problem that we discussed.

2
00:00:08.700 --> 00:00:12.420
So now let us try to understand how to define or pick pointers.

3
00:00:12.810 --> 00:00:19.500
So in order to define the structure, which is more of a linked list in our case as opaque to external

4
00:00:19.500 --> 00:00:23.450
world here, external world is the application seesaws file.

5
00:00:23.490 --> 00:00:29.730
In our example, we were going to define that structure definition in libraries, source file rather

6
00:00:29.730 --> 00:00:30.660
than header file.

7
00:00:31.290 --> 00:00:37.770
The intent is not to expose the structure definition to the outside world, so outside world would never

8
00:00:37.770 --> 00:00:39.900
know its internal member details.

9
00:00:40.230 --> 00:00:45.020
So now let us try to see with the help of an example how to accomplish this.

10
00:00:45.720 --> 00:00:52.140
So going forward, continuing with the same example, we have linked list, Etchberger file and the

11
00:00:52.140 --> 00:00:53.530
source file of the linked list.

12
00:00:53.970 --> 00:01:01.050
So what we will going to do is that we will going to create an alias in order to access the Lord of

13
00:01:01.050 --> 00:01:02.730
a linked list in the header file.

14
00:01:03.120 --> 00:01:07.460
It is always convenient to define an alias of a structure.

15
00:01:07.770 --> 00:01:08.110
Right.

16
00:01:09.120 --> 00:01:16.080
And note that we also discussed that in your application dot seesaws file opaque structures do not allow

17
00:01:16.080 --> 00:01:20.030
to write you size of operator on the opaque structure.

18
00:01:20.430 --> 00:01:28.380
It means that you cannot mallock the memory in this application doxie source file for our opaque structure,

19
00:01:28.530 --> 00:01:30.220
which is a list of a..

20
00:01:30.900 --> 00:01:38.100
So it simply means that your file also has to provide a mechanism to the application, not source file,

21
00:01:38.550 --> 00:01:40.950
regarding how to mallock a new node.

22
00:01:41.190 --> 00:01:48.600
And it is for this reason that we have provided a public API to allocate a memory for a node of a list.

23
00:01:49.830 --> 00:01:56.130
Right, because you cannot in walk size of operator in application seesaws file, and hence you cannot

24
00:01:56.130 --> 00:02:00.570
write mallock and passing the size of a node of a linked list.

25
00:02:00.780 --> 00:02:07.980
Right now you can see that EnLink, the start of her file, we have removed the definition of a node

26
00:02:07.980 --> 00:02:08.800
of a linked list.

27
00:02:09.090 --> 00:02:14.490
In fact, we will going to move the definition of a node of a link list from the head of file to the

28
00:02:14.490 --> 00:02:15.310
source file.

29
00:02:15.870 --> 00:02:16.230
Right.

30
00:02:16.470 --> 00:02:20.130
So in the source, while we were going to provide the definition of a..

31
00:02:20.130 --> 00:02:20.940
Of a link list.

32
00:02:21.220 --> 00:02:21.630
Right.

33
00:02:22.210 --> 00:02:28.320
And since this is a new public API whose prototype we have defined in the high profile, we need to

34
00:02:28.320 --> 00:02:32.300
provide the implementation of this API in the source file.

35
00:02:32.790 --> 00:02:33.180
Right.

36
00:02:33.390 --> 00:02:34.590
And we are done.

37
00:02:36.790 --> 00:02:39.560
Now, let us see an application doxie source file.

38
00:02:39.580 --> 00:02:47.230
How were you going to make use of our link list so simply you can create an order of a link list by

39
00:02:47.230 --> 00:02:53.310
using mallock new API, which is provided by the library, and you can create another node of the link

40
00:02:53.320 --> 00:02:55.670
list using the same mallock new node API.

41
00:02:55.960 --> 00:02:56.340
Right.

42
00:02:56.800 --> 00:03:03.880
And finally, you can invoke another public API link list in session in order to insert node two after

43
00:03:03.880 --> 00:03:05.350
node one in the link list.

44
00:03:05.620 --> 00:03:06.020
Right.

45
00:03:06.250 --> 00:03:12.850
So throughout this code, we have never attempted to access any internal member of a note of a link

46
00:03:12.910 --> 00:03:13.210
list.

47
00:03:13.390 --> 00:03:20.530
It simply means that if you tried to write your own implementation of inserting a node in a linked list

48
00:03:20.530 --> 00:03:27.010
or an implementation which requires you to access the internal member of a node of a link list, you

49
00:03:27.010 --> 00:03:28.060
cannot do so.

50
00:03:28.330 --> 00:03:34.960
Any attempt to access any internal member of a node of a linked list in application doxies source file

51
00:03:34.960 --> 00:03:36.490
will give you a compilation error.

52
00:03:37.600 --> 00:03:42.170
Now, if you try to understand that, why it works like this way.

53
00:03:42.580 --> 00:03:48.940
So what you need to do is that you simply stick to the basics and you will get the answer to the question

54
00:03:49.090 --> 00:03:52.150
as why opaque pointers work this way.

55
00:03:52.810 --> 00:03:56.390
Apply to substitution on application doxie source file.

56
00:03:56.980 --> 00:04:02.980
When I say tax substitution, simply replace the content of the linked list attached to the file with

57
00:04:02.980 --> 00:04:04.530
the content of this file.

58
00:04:05.140 --> 00:04:05.460
Right.

59
00:04:06.400 --> 00:04:13.060
So assume that this line has been replaced by the entire content of this link list, dot etc file in

60
00:04:13.060 --> 00:04:14.710
application, doxy source file.

61
00:04:15.190 --> 00:04:21.970
Now if the compiler compiles this file from top to bottom, then I ask you one question.

62
00:04:22.240 --> 00:04:28.180
Does the compiler ever sees the complete definition of the structure of a node of the legalist?

63
00:04:28.840 --> 00:04:30.250
The answer is no.

64
00:04:30.400 --> 00:04:36.790
Compiler never sees the definition of L'il underscore node underscore t structure because the definition

65
00:04:36.790 --> 00:04:41.350
of this structure is present in the source file and not in the header file.

66
00:04:42.220 --> 00:04:49.690
So it simply means that compiler never knew what members are there in node of a link list and therefore

67
00:04:49.690 --> 00:04:54.810
you can never access any member of a node of the linked list in application doxy source file.

68
00:04:55.390 --> 00:05:00.790
And since Compiler never knows the details about the internal members of a node of a link list, the

69
00:05:00.790 --> 00:05:04.600
compiler also never knows the size of a node of a linked list.

70
00:05:04.780 --> 00:05:10.300
So it simply means that you cannot invoke size of operator on the Lord of a linked list.

71
00:05:11.110 --> 00:05:16.900
If you want, you can try out writing this code and try to access the internal members of a node of

72
00:05:16.900 --> 00:05:22.540
a link list or try to compute the size of a node of a linked list in your application DARZI source file

73
00:05:22.690 --> 00:05:27.910
and you will see that you will get the compiler error called incomplete definition.

74
00:05:30.310 --> 00:05:33.260
So this is the compiler error that you will get.

75
00:05:34.810 --> 00:05:41.590
So I choose to add this topic in discourse because this is one of the interview questions that are often

76
00:05:41.590 --> 00:05:47.500
asked, and it is a very less known topic to the especially to the students.

77
00:05:51.110 --> 00:05:51.310
And.

