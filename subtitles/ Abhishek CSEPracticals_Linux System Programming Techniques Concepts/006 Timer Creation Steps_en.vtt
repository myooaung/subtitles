WEBVTT
1
00:00:06.780 --> 00:00:11.950
So, guys, now let us discuss the time, create API using which we usually create a timer.

2
00:00:12.690 --> 00:00:16.810
So now let us discuss sumptuary regarding timer creation.

3
00:00:17.250 --> 00:00:24.150
I want to cover as many military as possible so that we can quickly see things in action while implementing

4
00:00:24.150 --> 00:00:24.810
our tamers.

5
00:00:25.290 --> 00:00:29.580
We can quickly move towards hitting the keyboard and see things in action.

6
00:00:30.150 --> 00:00:33.720
So we will start with this API that has time or underscore create.

7
00:00:33.870 --> 00:00:34.320
Right?

8
00:00:36.080 --> 00:00:41.540
You can see that this API accepts three arguments, the first argument is the type of timer that you

9
00:00:41.540 --> 00:00:47.780
are creating now, Linux operating system, our politics API allows you to create different types of

10
00:00:47.780 --> 00:00:48.330
Clymer's.

11
00:00:48.800 --> 00:00:56.240
So I think that the discussions of different types of timers is actually not very valuable here.

12
00:00:56.960 --> 00:01:03.320
So I will show you the demonstration by implementing the real type of timers because there are other

13
00:01:03.320 --> 00:01:04.190
types of timers.

14
00:01:04.190 --> 00:01:07.460
But those timers are not that extensively used.

15
00:01:07.850 --> 00:01:14.480
And the type of time works which wants its applications in most scenarios are in most common deployments

16
00:01:14.480 --> 00:01:15.700
is the real timeline.

17
00:01:17.560 --> 00:01:23.530
So as the first argument, we need to pause constant value, which represents that what type of time

18
00:01:23.530 --> 00:01:31.900
we want to create the second parameters actually allows the developer or programmer to specify various

19
00:01:31.900 --> 00:01:34.180
parameters which controls the timers.

20
00:01:34.540 --> 00:01:34.960
Right.

21
00:01:35.860 --> 00:01:39.150
We will shortly discuss in detail that what are those parameters?

22
00:01:39.400 --> 00:01:42.080
And the third argument is a pointer to the timer.

23
00:01:42.350 --> 00:01:42.760
Right.

24
00:01:45.630 --> 00:01:52.560
The API returns zero on success, otherwise it returns minus one on error and the global variable error

25
00:01:52.560 --> 00:01:55.930
number is set to represent what kind of error has occurred.

26
00:01:56.280 --> 00:02:00.600
Now, this global variable is defined in file error, no doubt ATCH.

27
00:02:00.840 --> 00:02:04.210
And you can always print this number using percentages.

28
00:02:04.210 --> 00:02:06.180
Deformable specified, right?

29
00:02:08.199 --> 00:02:15.040
So in case the time of create returns minus one, you can see that what caused the error by printing

30
00:02:15.040 --> 00:02:15.520
this error?

31
00:02:15.530 --> 00:02:16.360
No credible.

32
00:02:17.490 --> 00:02:23.220
Now, let us discuss this controlling parameters of the timer so this controlling parameters of the

33
00:02:23.220 --> 00:02:27.840
timer is represented by data structure event, right?

34
00:02:29.370 --> 00:02:35.610
Now, within the status structures, there are three members whose value we need to specify the first

35
00:02:35.610 --> 00:02:38.630
member is a Sig e.V. notifier function.

36
00:02:39.000 --> 00:02:43.230
So it is the timer callback function pointer, which we need to pass here.

37
00:02:44.040 --> 00:02:48.240
When the timer expires, it does this function which will be going to be invoked.

38
00:02:48.420 --> 00:02:48.840
Right.

39
00:02:49.110 --> 00:02:54.990
And when this function will going to be invoked, then it also makes sense to pass some argument to

40
00:02:54.990 --> 00:02:55.710
this function.

41
00:02:56.100 --> 00:03:00.900
That argument is specified by second parameter of this are structure.

42
00:03:02.890 --> 00:03:11.620
That is sick environmental value, not signal value pointer, right, and this memo points to the address

43
00:03:11.920 --> 00:03:16.810
of the chunk of memory, which will be paused as an argument to this time, a callback function.

44
00:03:17.140 --> 00:03:17.550
Right.

45
00:03:19.270 --> 00:03:26.320
So it is the applications responsibility to allocate memory and put any relevant data in that memory

46
00:03:26.650 --> 00:03:34.590
and initialize this particular member of this EVP data structures with that memory address.

47
00:03:34.810 --> 00:03:35.220
Right.

48
00:03:38.010 --> 00:03:47.340
And the third, as IGB Notifier member is always hardcoded to this constant right as IGB under Scottrade,

49
00:03:47.880 --> 00:03:53.490
by specifying this constant, we are actually asking the colonel to launch a timer.

50
00:03:53.500 --> 00:03:55.860
Tried to invoke the timer.

51
00:03:55.860 --> 00:03:57.260
Carlebach right.

52
00:03:58.850 --> 00:04:04.970
There are actually other ways using which the colonel can invoke the callback function, not necessarily

53
00:04:04.970 --> 00:04:11.300
through the expiration of the timer, but also it can invoke in other ways what are those other ways

54
00:04:11.300 --> 00:04:20.060
that is not important for discussion here, because we are dealing with timers now coming to this callback

55
00:04:20.060 --> 00:04:20.620
function.

56
00:04:21.079 --> 00:04:24.460
What should be the prototype or signature of this callback function?

57
00:04:24.950 --> 00:04:26.730
There should be some prototype, right.

58
00:04:27.260 --> 00:04:32.090
So the prototype of this callback function is fixed and it should be this.

59
00:04:32.600 --> 00:04:35.420
That is the function should return nothing that is wiped.

60
00:04:36.230 --> 00:04:39.590
And the argument to this function is a data type union.

61
00:04:39.860 --> 00:04:50.180
Well, right now, I understand that having hearing of these new data structures like union sequel are

62
00:04:50.210 --> 00:04:51.150
sick even.

63
00:04:51.170 --> 00:04:58.250
It is something that tends to create some uneasiness, but not that these dual structures are very simple

64
00:04:58.250 --> 00:05:02.410
to use, for example, and seek even data structures.

65
00:05:02.420 --> 00:05:05.450
All you need to do is to initialize these three members.

66
00:05:05.600 --> 00:05:05.960
Right.

67
00:05:06.380 --> 00:05:07.700
Similarly for unions.

68
00:05:07.970 --> 00:05:09.290
Well, there are structures.

69
00:05:09.290 --> 00:05:13.100
All you need to do is to access this member.

70
00:05:13.100 --> 00:05:15.410
That is as I value pointer.

71
00:05:15.530 --> 00:05:15.950
Right?

72
00:05:17.680 --> 00:05:24.670
So actually, Elgort, Sevele Pintor is the same address of this argument, right, because at the end

73
00:05:24.670 --> 00:05:32.380
of the day, our goal was that to invoke the application, a specific callback function fule with the

74
00:05:32.380 --> 00:05:36.700
user defined Aerostructures, which is represented by this argument.

75
00:05:36.970 --> 00:05:37.440
Right.

76
00:05:39.130 --> 00:05:45.550
So time a callback is actually a generic wrapper or application callback here for is an application,

77
00:05:45.550 --> 00:05:51.550
a specific callback, whereas time out and a callback is a generic callback, which has a predefined

78
00:05:51.550 --> 00:05:52.210
prototype.

79
00:05:54.120 --> 00:06:02.250
And the argument which this time a callback function accepts is the actual argument which is parsed

80
00:06:02.250 --> 00:06:03.990
to the callback function for.

81
00:06:06.170 --> 00:06:15.020
So here, if you had past here, the accuracy is zero X F.P. than a Daudzai, well, BTR would store

82
00:06:15.020 --> 00:06:17.750
zero X Abdeh, right.

83
00:06:18.680 --> 00:06:23.780
So now let us spend some more time in discussing the theory and then we will start implementation of

84
00:06:23.780 --> 00:06:24.570
our timeline.

85
00:06:26.060 --> 00:06:30.370
Now, the next thing that we need is a way to specify the expiration of the timer.

86
00:06:30.560 --> 00:06:31.010
Right?

87
00:06:31.340 --> 00:06:38.300
That does after starting the timer, how many seconds or nanoseconds we want our timer to expire or

88
00:06:38.300 --> 00:06:38.930
fire.

89
00:06:41.140 --> 00:06:48.820
So far, there's the standards provide us the data structure, I timer's back again on new data structures,

90
00:06:48.820 --> 00:06:50.990
which probably you haven't heard of.

91
00:06:51.700 --> 00:06:55.350
So this data structures is only used to specify the time.

92
00:06:56.140 --> 00:07:02.950
If you see the definition of this data structure, it again contains only two members, the I.T. interval

93
00:07:02.950 --> 00:07:04.050
and its value.

94
00:07:04.540 --> 00:07:04.980
Right.

95
00:07:07.050 --> 00:07:12.780
These do it well, and it will do Mamasan, again of data by times back.

96
00:07:13.870 --> 00:07:20.530
So now it's a time for us to see the definition of times packed in a structure which is nothing, but

97
00:07:20.530 --> 00:07:23.920
it is again a collection of two members.

98
00:07:24.940 --> 00:07:30.520
The first member represents a time in seconds and the second member represents time in nanoseconds.

99
00:07:30.730 --> 00:07:33.400
Right for standards.

100
00:07:33.400 --> 00:07:41.740
Provide us the facility to specify the expiration time of the timer in the granularity of nanoseconds.

101
00:07:42.960 --> 00:07:49.290
So now let me discuss that, how this item, a spectator structure, is used to specify the expiration

102
00:07:49.650 --> 00:07:51.150
interval of the timer.

103
00:07:52.680 --> 00:08:01.310
So if I just initialized this data structure to as follows that history has taught its value, dot TV

104
00:08:01.330 --> 00:08:07.670
second is equal to five and taught it value dot TV nanosecond equal to zero.

105
00:08:07.980 --> 00:08:08.450
Right.

106
00:08:11.360 --> 00:08:18.170
It simply means that the expiration of our timer is set to five seconds, that is after starting the

107
00:08:18.170 --> 00:08:21.480
timer, our timer will fire up to five seconds.

108
00:08:22.610 --> 00:08:24.200
So this is what it value.

109
00:08:24.200 --> 00:08:31.580
Does setting the expiration timer, setting that expiration time interval for the timer, it's interval.

110
00:08:31.580 --> 00:08:35.620
We will going to discuss when we will actually implement the timer along the way.

111
00:08:35.840 --> 00:08:36.270
Right.

112
00:08:37.400 --> 00:08:40.130
So let us deafer the discussion of it interval.

113
00:08:42.679 --> 00:08:47.750
So once we have a specified blacksploitation time interval for the timer now, the last step that is

114
00:08:47.750 --> 00:08:50.500
remaining is actually to arm the timer.

115
00:08:50.510 --> 00:08:52.700
That is the start the timer.

116
00:08:52.970 --> 00:08:53.370
Right.

117
00:08:53.750 --> 00:08:56.990
For that, we are given an API timer set time.

118
00:08:57.500 --> 00:09:02.120
Just pass the points to the timer that we have just configured past.

119
00:09:02.120 --> 00:09:09.920
The second argument as Nalpas, the third argument as the address of this timer specifications and pass

120
00:09:09.920 --> 00:09:11.530
that last argument as null.

121
00:09:11.960 --> 00:09:19.160
The argument, which I say that positons zero or null needs no discussion because our goal is to understand

122
00:09:19.160 --> 00:09:23.210
how to implement the timer based programs, our time with the state machine.

123
00:09:24.080 --> 00:09:30.980
Also, the arguments which we are skipping are actually optional arguments are and do not require a

124
00:09:30.980 --> 00:09:34.750
mandatory discussion in order to understand how Taimur works.

125
00:09:36.370 --> 00:09:41.620
So now I know it's quite a boring and too much of a theory, so let us put all the pieces together and

126
00:09:41.620 --> 00:09:43.390
write our demo program.

127
00:09:43.750 --> 00:09:44.140
Right.

