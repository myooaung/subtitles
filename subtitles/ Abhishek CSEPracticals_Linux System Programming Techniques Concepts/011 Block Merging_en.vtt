WEBVTT
1
00:00:05.760 --> 00:00:07.080
So welcome back, guys.

2
00:00:07.440 --> 00:00:14.340
Now let us discuss our next concept on block merging now, block merging is exactly opposite to block

3
00:00:14.340 --> 00:00:14.950
splitting.

4
00:00:15.450 --> 00:00:20.340
So consider the snapshot of the heap mamady segment as shown in this diagram.

5
00:00:20.970 --> 00:00:21.340
Right.

6
00:00:22.530 --> 00:00:29.520
Suppose the process issues the request to free the block of memory, which is pointed by point or two.

7
00:00:30.720 --> 00:00:33.830
That is, the process wants to free this data block.

8
00:00:34.590 --> 00:00:35.050
Right.

9
00:00:36.950 --> 00:00:42.920
So operating system now knows from the matter in that it has to flee and bytes of memory.

10
00:00:43.520 --> 00:00:49.820
So the heat memory segment, after freeing this 10 bites of memory, would look something like this.

11
00:00:50.990 --> 00:00:58.430
So whenever the operating system frees the day to block the operating system, runs the following algorithm

12
00:00:58.820 --> 00:01:05.750
that is all consecutive three blocks must be matched together to form a bigger free block.

13
00:01:06.410 --> 00:01:13.550
So you can see that in the second snapshot of this heap memory segment, the 10 byte data block and

14
00:01:13.550 --> 00:01:19.140
six by data block are actually consecutive blocks and they are free.

15
00:01:19.820 --> 00:01:25.400
So the operating system will merge these two blocks together to form a bigger block.

16
00:01:25.880 --> 00:01:31.550
So you can see that this stand by itself memory and the six by itself memory is muzz together.

17
00:01:31.880 --> 00:01:37.970
And of course, because these two blocks are massed together, we would not need this matter block.

18
00:01:38.600 --> 00:01:44.450
So the memory occupied by this matter block is also mosed to the free memory.

19
00:01:44.900 --> 00:01:51.440
So the total size of the block, which is formed after merging two consecutive blocks, will be 22 bytes

20
00:01:51.440 --> 00:01:52.330
in this case.

21
00:01:53.780 --> 00:02:01.880
So you can see that 10 bite of data block, which was pointed by the pointer BTR two is freed and Mosed

22
00:02:01.880 --> 00:02:10.850
with six byte of data block, which was free to form a single 22 bytes of three data block.

23
00:02:11.690 --> 00:02:16.490
So total number of blocks are reduced from six to five in this block list.

24
00:02:17.060 --> 00:02:19.490
So this concept is called block merging.

25
00:02:20.760 --> 00:02:27.510
And what is the use of block merging if you had the second snapshot of the Heap mammaries segment and

26
00:02:27.510 --> 00:02:33.060
suppose the process had issues, the Mallak request for size 20 bytes.

27
00:02:33.630 --> 00:02:34.030
Right.

28
00:02:34.950 --> 00:02:43.350
So the memory segment in the second diagram has to raise its BRG printer forwards in order to satisfy

29
00:02:43.350 --> 00:02:46.710
the request of these 20 bytes of memory to the process.

30
00:02:47.340 --> 00:02:53.670
But because we have performed block merging on this heap memory segment to get the third snapshot of

31
00:02:53.670 --> 00:03:00.410
the memory segment, you can see that the third heap memory segment need not to raise its breakpoint

32
00:03:00.450 --> 00:03:07.380
further because it has a free data block which can satisfy the request of 20 bytes from the process.

33
00:03:08.540 --> 00:03:16.970
So block mulching prevents the unnecessary expansion of heat memory segment so you can see that your

34
00:03:16.980 --> 00:03:24.020
Marlock function should take care of block splitting block margin expansion of the heat memory segment

35
00:03:24.020 --> 00:03:31.640
in case there is no available free data block to satisfy the request and also adjusting these pointers

36
00:03:31.640 --> 00:03:34.850
in case of block splitting and block merging.

37
00:03:35.630 --> 00:03:39.320
So your Malac function should handle all these scenarios.

