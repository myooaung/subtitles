WEBVTT
1
00:00:05.670 --> 00:00:07.030
So welcome back, guys.

2
00:00:07.380 --> 00:00:11.520
Now, next, let us discuss the memory layout of our Linux process.

3
00:00:12.000 --> 00:00:18.450
So memory let out of a process is a diagrammatic representation of the processes, memory, layout and

4
00:00:18.450 --> 00:00:20.700
Linux or Unix operating system.

5
00:00:21.300 --> 00:00:26.820
Memory layout of a process helps us to understand that whole process.

6
00:00:26.820 --> 00:00:31.040
Whelchel memory works during the course of execution of a process.

7
00:00:31.560 --> 00:00:39.030
So therefore it is important for us to understand that how memory of a Linux process is organized by

8
00:00:39.030 --> 00:00:44.610
the operating system so that we can understand the advanced concepts that we were going to discuss in

9
00:00:44.610 --> 00:00:45.260
this module.

10
00:00:45.900 --> 00:00:51.340
So let us see that how memory layout of a process looks like for a Linux process.

11
00:00:52.140 --> 00:00:57.540
Now note that the discussion that we are doing is specific to Linux or Unix like operating system.

12
00:00:58.850 --> 00:01:05.060
If you talk about a process that is running on the Windows operating system, then the memory out of

13
00:01:05.060 --> 00:01:10.650
a process on Windows machine could be entirely different than what we were going to discuss here.

14
00:01:11.480 --> 00:01:15.670
So you can see that on the left hand side, I have drawn some beautiful diagram.

15
00:01:16.310 --> 00:01:20.900
So this is actually the layout of a typical Linux process.

16
00:01:21.680 --> 00:01:26.690
You can see that means that higher address and elements laboratories.

17
00:01:27.110 --> 00:01:27.500
Right.

18
00:01:28.320 --> 00:01:28.890
So lower.

19
00:01:28.890 --> 00:01:32.990
That just means, for example, let us say that the lower address is six.

20
00:01:33.170 --> 00:01:35.390
So the higher address could be 160.

21
00:01:35.870 --> 00:01:39.250
So the addresses decreases downwards, right.

22
00:01:40.280 --> 00:01:48.100
So this diagram actually represents the entire Whelchel address space of our system, as you can see

23
00:01:48.120 --> 00:01:50.970
that this diagram represents the entire virtual memory.

24
00:01:51.620 --> 00:01:58.100
So the Linux process, when it starts its execution, the Linux process, assumes that the entire virtual

25
00:01:58.100 --> 00:02:01.700
address, a space of a system, is available for its use.

26
00:02:03.240 --> 00:02:08.699
Now you can see that this virtual address space is actually fragmented into different parts.

27
00:02:09.270 --> 00:02:15.310
For example, the bottommost part is called the code than the initialized data, than initialized data.

28
00:02:15.540 --> 00:02:17.320
Then comes the HEB segment.

29
00:02:17.550 --> 00:02:20.070
Then there is no man's land region.

30
00:02:20.070 --> 00:02:25.320
That is, it is the amount of virtual memory which is available to be used by the process.

31
00:02:25.560 --> 00:02:31.080
And then you can see that it is a static memory which is there at the top of multilateralists space.

32
00:02:32.430 --> 00:02:37.020
And very top of the world to that space is dedicated to command line arguments.

33
00:02:37.590 --> 00:02:44.610
So now let us discuss that exactly what type of data each of these fragment of the virtual addresses

34
00:02:44.620 --> 00:02:46.620
space actually stores.

35
00:02:47.750 --> 00:02:54.620
So please remember that we are discussing this virtual space in the context of a given process be so

36
00:02:54.620 --> 00:02:58.500
let us say that you have a process B and it is executing on the machine.

37
00:02:59.060 --> 00:03:05.090
So now let us discuss that in the context of this process, be what is the data that will be stored

38
00:03:05.090 --> 00:03:09.020
in these different different fragments of this virtual address, the space.

39
00:03:10.070 --> 00:03:16.250
So let us start with the code section, you can see that code section is a memory which is dedicated

40
00:03:16.250 --> 00:03:21.020
to store the compile process assembly code in the text format.

41
00:03:22.060 --> 00:03:29.290
So when you compile a program, it generates an assembly code and after that next level of code that

42
00:03:29.290 --> 00:03:31.070
is generated is the machine code.

43
00:03:31.780 --> 00:03:32.150
Right.

44
00:03:32.620 --> 00:03:38.890
So it does this assembly code, which is stored in this code section of this, which will address the

45
00:03:38.890 --> 00:03:39.460
space.

46
00:03:40.000 --> 00:03:46.600
So assembly code is the lowest level code, which is understandable by human being once the code is

47
00:03:46.600 --> 00:03:48.220
translated into machine code.

48
00:03:48.370 --> 00:03:54.730
Then this machine code is only understood by the processor or CPU and it does not understandable by

49
00:03:54.740 --> 00:03:55.540
the human being.

50
00:03:56.260 --> 00:04:01.690
So it is this assembly code which is eventually saved in the code section of this virtual memory of

51
00:04:01.690 --> 00:04:06.250
a process that the next fragment is the initialized data.

52
00:04:07.060 --> 00:04:13.780
So it is a part of virtual memory, of a process which distorts the process, initialized global and

53
00:04:13.780 --> 00:04:14.950
static variables.

54
00:04:15.370 --> 00:04:15.690
Right.

55
00:04:16.120 --> 00:04:20.019
So when you write a program, you must have declared certain global variables.

56
00:04:20.920 --> 00:04:25.720
And there is a condition that those global variables must be initialized with some value.

57
00:04:26.320 --> 00:04:32.590
Similarly, you can have static variables and static variables should be initialized with some value.

58
00:04:33.160 --> 00:04:35.980
Now, remember, these are static variables, maybe global.

59
00:04:36.340 --> 00:04:42.380
That is, they are not declared inside any function or these are static variable could be local.

60
00:04:42.730 --> 00:04:45.860
That is, they are declared inside a particular function.

61
00:04:46.430 --> 00:04:52.450
So static variable, it doesn't matter whether they are global or local to some function, as long as

62
00:04:52.450 --> 00:04:58.240
you initialize the static variables, these are static variables will be saved in the initialized data

63
00:04:58.240 --> 00:04:59.940
fragment of this virtual memory.

64
00:05:00.820 --> 00:05:05.350
Global variables, on the other hand, are the variables which are declared outside the function.

65
00:05:05.920 --> 00:05:11.470
And if they are initialized by the programmer, then they are given the space in the initialized data

66
00:05:11.470 --> 00:05:13.190
fragment of this virtual memory.

67
00:05:13.630 --> 00:05:17.200
So don't worry, people are going to understand this with the help of an example.

68
00:05:18.280 --> 00:05:24.250
Then the term memory region of this rochell address space is a memory which is called an initialized

69
00:05:24.250 --> 00:05:25.100
data segment.

70
00:05:25.480 --> 00:05:28.070
It is also abbreviated as best.

71
00:05:29.170 --> 00:05:33.130
Now it's a homework for you to Google and find the full form of BBSes.

72
00:05:34.510 --> 00:05:41.620
So initialise data is a family fragment which distorts the process and initialised global and static

73
00:05:41.620 --> 00:05:48.670
variables, ripe fixed memory means that you cannot actually define more global variables or static

74
00:05:48.670 --> 00:05:51.240
variables during the time of a process.

75
00:05:51.550 --> 00:05:51.900
Right.

76
00:05:52.540 --> 00:05:55.570
It is something that you do while writing a program.

77
00:05:57.100 --> 00:06:04.150
The fourth fragment or region of this virtual family is the reason, so all that dynamic memory allocation

78
00:06:04.150 --> 00:06:07.010
is actually dedicated to this hip region.

79
00:06:07.660 --> 00:06:14.800
So you must have written a C program and you must have created a dynamic memory using Mallock or Kalac

80
00:06:14.800 --> 00:06:15.610
system calls.

81
00:06:16.180 --> 00:06:22.780
So all the memory that your process requests during runtime from the operating system is called dynamic

82
00:06:22.780 --> 00:06:27.640
memory, and all that dynamic memory is actually allocated to this prison.

83
00:06:29.310 --> 00:06:36.120
So when you process requests more and more of dynamic memory from the operating system, this hip region

84
00:06:36.120 --> 00:06:41.180
actually expands and grows towards the top of this virtual memory space.

85
00:06:41.910 --> 00:06:46.440
So not that this happens and grows from lower addressed towards higher address.

86
00:06:47.080 --> 00:06:47.450
Right.

87
00:06:48.480 --> 00:06:53.340
And then this big portion, you can see that it is a no man's land.

88
00:06:53.580 --> 00:07:00.540
It means that this region represents the total system, available memory that he needs and expands or

89
00:07:00.540 --> 00:07:03.600
shrinks when the process mallock of the memory.

90
00:07:03.960 --> 00:07:04.380
Right.

91
00:07:04.710 --> 00:07:09.510
So, as I said, if we have process request more and more dynamic memory from the operating system,

92
00:07:09.840 --> 00:07:15.780
it is this portion of this virtual memory that will be used up by the process.

93
00:07:17.400 --> 00:07:23.790
Then comes the stock portion of this virtual memory, so that stock memory is the memory that is assigned

94
00:07:23.790 --> 00:07:28.280
for process execution, it cannot grow beyond a certain limit.

95
00:07:28.290 --> 00:07:30.840
So you can see that this line is a barrier.

96
00:07:31.410 --> 00:07:34.880
It means that the stock memory cannot grow beyond this barrier.

97
00:07:35.190 --> 00:07:36.600
Otherwise, what will happen?

98
00:07:37.320 --> 00:07:40.120
The heap memory on a stock memory can collapse.

99
00:07:41.220 --> 00:07:47.520
So the Linux operating system has put an upper limit on that stack memory beyond which that stock memory

100
00:07:47.520 --> 00:07:48.360
cannot grow.

101
00:07:49.790 --> 00:07:56.540
So what are the contents of the stack memory for a process, which is an execution that stack memory

102
00:07:56.540 --> 00:08:03.900
is used to store all the local variables of all the functions that has been stacked on top of the other.

103
00:08:04.100 --> 00:08:05.990
For example, you have a function run.

104
00:08:06.230 --> 00:08:10.280
It calls the function to and it calls the function three.

105
00:08:10.820 --> 00:08:11.220
Right.

106
00:08:11.810 --> 00:08:14.980
So each of these functions would have their own local variables.

107
00:08:15.320 --> 00:08:18.800
So all those local variables will be stored in the stack memory.

108
00:08:19.490 --> 00:08:23.290
Similarly, each of these functions will have their own arguments past.

109
00:08:23.840 --> 00:08:27.680
So all of these arguments will also be saved in this stack memory.

110
00:08:28.190 --> 00:08:28.600
Right.

111
00:08:28.910 --> 00:08:35.480
And then there is a concept of return address and corners infl, which will also be saved in this stack

112
00:08:35.480 --> 00:08:35.900
memory.

113
00:08:36.559 --> 00:08:42.770
So we're going to discuss in detail that exactly what is stored in the stack memory when the process

114
00:08:42.770 --> 00:08:43.520
executes.

115
00:08:44.780 --> 00:08:51.230
So here the take of it is that that that stack memory is used to store certain data whenever the function

116
00:08:51.230 --> 00:08:53.360
one makes a call to the function to.

117
00:08:53.990 --> 00:09:00.110
In other words, we say that stack memory is a memory which actually makes the execution of a program

118
00:09:00.320 --> 00:09:00.950
possible.

119
00:09:02.490 --> 00:09:03.780
And then finally.

120
00:09:08.040 --> 00:09:13.980
You can see that at the top we have come on line arguments, so the money that is allocated to the command

121
00:09:13.980 --> 00:09:19.680
line arguments when you run your program is the mamady which is assigned from the highest address of

122
00:09:19.680 --> 00:09:21.060
this virtual memory space.

123
00:09:21.840 --> 00:09:28.020
So you can see that when your program startup's execution by default, it be supplied with two arguments.

124
00:09:28.020 --> 00:09:30.020
That is IRGC and RGV.

125
00:09:30.240 --> 00:09:30.600
Right.

126
00:09:30.900 --> 00:09:33.050
So these are the arguments of the main function.

127
00:09:34.860 --> 00:09:42.180
So the memory space to these arguments is assigned to the top of the at the top of this trilateral space.

128
00:09:43.890 --> 00:09:51.690
So now I have explained this virtual memory lay out for A given process B and in the context of the

129
00:09:51.690 --> 00:09:57.780
process B, now you understand that what are the different fragments of this virtual memory are and

130
00:09:57.780 --> 00:10:00.110
what those fragments actually stores?

131
00:10:01.050 --> 00:10:06.600
Now, let us take one small example to illustrate the point that we have discussed in this slight.

