WEBVTT
1
00:00:05.530 --> 00:00:12.340
So, guys, now going forward now, let us discuss the rules for declaring and then using the functions

2
00:00:12.340 --> 00:00:12.990
and the code.

3
00:00:14.080 --> 00:00:20.890
So remember that when a compiler compiles the source files, it must first see the declaration of a

4
00:00:20.890 --> 00:00:23.790
function first and then its usage.

5
00:00:24.220 --> 00:00:26.030
So usage means the function call.

6
00:00:26.500 --> 00:00:30.730
So let us call this rule as declare and use timbrell.

7
00:00:32.100 --> 00:00:36.710
So as we discussed that the compiler compiles the source file from top to bottom.

8
00:00:37.680 --> 00:00:45.060
So while passing the file from top to bottom, the compiler must see the declaration of a function first

9
00:00:45.360 --> 00:00:47.430
and then the use of the function.

10
00:00:48.210 --> 00:00:51.840
So let us call it as declare and use thumb rule.

11
00:00:52.230 --> 00:01:00.330
The second point is that compiler do not consider at all the function definition while compiling the

12
00:01:00.330 --> 00:01:01.120
source file.

13
00:01:01.680 --> 00:01:08.190
So here, compiling all the source files means creating the object files out of those source files.

14
00:01:09.150 --> 00:01:11.690
Now what exactly function definition is?

15
00:01:11.940 --> 00:01:15.500
So let us try to understand this point with the help of an example.

16
00:01:16.290 --> 00:01:18.700
Suppose you have a source while a Nazi.

17
00:01:19.230 --> 00:01:22.830
Now you need to tell me whether this source file will compile or not.

18
00:01:24.510 --> 00:01:31.170
So now let us try to understand whether this source file Albie's declare and use Timboon with respect

19
00:01:31.170 --> 00:01:31.890
to the function.

20
00:01:33.060 --> 00:01:38.700
So here you can see that the first line of the source file simply declare the function.

21
00:01:40.380 --> 00:01:44.760
So declaration of the function means the prototype or signature of the function.

22
00:01:46.100 --> 00:01:52.370
Right after that, there is a definition of the function, definition of the function means the actual

23
00:01:52.370 --> 00:01:54.980
implementation of the logic of a function.

24
00:01:56.080 --> 00:01:56.480
Right.

25
00:01:56.740 --> 00:02:03.820
So this denotes the definition of a function and then in the end of the swords, while there is a use

26
00:02:03.820 --> 00:02:08.710
of this function, use of the function means the invocation of this function.

27
00:02:09.310 --> 00:02:15.730
So when the compiler will pass this source file from top to bottom, it will encounter the declaration

28
00:02:15.730 --> 00:02:19.760
of the function first and then it will encounter the use of the function.

29
00:02:21.070 --> 00:02:26.590
So it means that the thumb rule, declare and use is perfectly obeyed.

30
00:02:27.130 --> 00:02:30.230
So this source while will compile without any problem.

31
00:02:31.360 --> 00:02:33.520
Now, let us take another example.

32
00:02:33.880 --> 00:02:40.030
Suppose you have written Puzo's file Adewusi and we don't see so in BNC sorts.

33
00:02:40.030 --> 00:02:45.730
While there is a declaration of the function, then there is a definition of the function and then there

34
00:02:45.730 --> 00:02:47.170
is a use of the function.

35
00:02:47.590 --> 00:02:51.330
So B doxies source file completely obeys the rule.

36
00:02:51.910 --> 00:02:54.650
So be doxies source file perfectly compiles.

37
00:02:55.090 --> 00:03:00.670
In fact, there is no difference between Brazzi source file and this a Doxey source file.

38
00:03:01.660 --> 00:03:05.170
Now coming to the second file, that is a Doxey source.

39
00:03:05.170 --> 00:03:09.790
While in this file the programmer wishes to invoke the function fule.

40
00:03:10.390 --> 00:03:16.630
So what he needs to do, he needs to include the declaration of the function first, followed by the

41
00:03:16.630 --> 00:03:17.640
use of the function.

42
00:03:18.760 --> 00:03:21.010
So you can see that in this source file.

43
00:03:21.010 --> 00:03:24.320
Also, Autum Rule is perfectly obeyed.

44
00:03:25.180 --> 00:03:30.430
Therefore, this Erzsi source file also compiles without any issues.

45
00:03:31.780 --> 00:03:39.580
But one point that you can make out from this air doxy source file is that that compiler do not consider

46
00:03:39.580 --> 00:03:43.020
the function definition while compiling the source file.

47
00:03:43.420 --> 00:03:49.720
So you can see that when the compiler compiles this source file, you can see that in this source file

48
00:03:49.720 --> 00:03:51.580
there is no function definition at all.

49
00:03:54.190 --> 00:04:03.250
And it is perfectly OK to consider a situation where you have written a function in certain sorts file

50
00:04:03.670 --> 00:04:08.120
and you wish to invoke that particular function in another source file.

51
00:04:08.650 --> 00:04:13.110
So will you be writing the definition of this function 10 times in different source?

52
00:04:13.870 --> 00:04:17.690
I think that will be the most stupid thing that we will ever do.

53
00:04:18.730 --> 00:04:25.510
So function definitions, that is the actual implementation of the function must be present in exactly

54
00:04:25.510 --> 00:04:27.340
one and one source file.

55
00:04:27.700 --> 00:04:30.250
And this source file could be any source file.

56
00:04:31.030 --> 00:04:37.090
When the compiler compiles the source file and create an object files, the compiler do not even look

57
00:04:37.090 --> 00:04:38.930
for function definitions at all.

58
00:04:40.120 --> 00:04:45.910
So even if you do not define the function definition in any of the words file, you're all the source.

59
00:04:45.910 --> 00:04:52.660
While we are going to compile perfectly provided that you have obeyed the same rule, the realm of function

60
00:04:52.660 --> 00:04:55.790
definition will kick in during linking phase.

61
00:04:56.740 --> 00:05:01.930
We will discuss this linking in pretty much detail in the coming modules.

62
00:05:04.120 --> 00:05:11.320
Now, coming to one more example here, you can see that I have been to see file and eight or C file

63
00:05:11.590 --> 00:05:17.530
and in this be seesaws file, I have declaration of the function followed by usage of the function,

64
00:05:17.710 --> 00:05:19.710
followed by a definition of the function.

65
00:05:20.050 --> 00:05:22.430
So is the rule obeyed here?

66
00:05:22.570 --> 00:05:24.020
The answer is yes.

67
00:05:24.190 --> 00:05:25.440
So this file compiles.

68
00:05:25.440 --> 00:05:32.770
Quite frankly, all I need to concern is that whether declaration of the function comes before the usage

69
00:05:32.770 --> 00:05:36.060
of the function, if it is so, then the file will compile.

70
00:05:37.000 --> 00:05:42.850
Similarly, in the source file a C file, there is a declaration of the function followed by use of

71
00:05:42.850 --> 00:05:47.080
the function and therefore a doxy file also compiles perfectly.

72
00:05:47.590 --> 00:05:52.400
So the fact that definition of the function is present or not really does not matter.

73
00:05:52.720 --> 00:05:58.090
In case if you are compiling the source file and creating an object files out of them.

74
00:06:00.500 --> 00:06:07.760
So now going forward now, let us take one more example, suppose you are given a high profile idot

75
00:06:07.760 --> 00:06:14.150
edge in which there is a declaration of the function full and you are giving a source file in which

76
00:06:14.150 --> 00:06:16.220
there is a definition of the function full.

77
00:06:16.760 --> 00:06:21.790
Now, this source file that is a Dorsey has include the header file, a dot edge.

78
00:06:22.310 --> 00:06:26.900
So the thumb rule that is declaration followed by a definition is followed.

79
00:06:27.990 --> 00:06:30.750
Right, because when you apply tax substitution.

80
00:06:31.810 --> 00:06:38.500
This has to include a dot edge statement will be replaced by the declaration of the function through.

81
00:06:40.600 --> 00:06:47.470
Now, suppose there is a developer who wants to make use of dysfunction full in his application, so

82
00:06:47.470 --> 00:06:51.520
the developer is writing a separate file called BNC source file.

83
00:06:52.360 --> 00:06:59.640
So far, the developer to correctly make use of the external function for here should obey this thumb

84
00:06:59.650 --> 00:07:00.060
rule.

85
00:07:00.490 --> 00:07:08.110
So he should be careful that he provides the declaration of the function first, followed by usage.

86
00:07:08.440 --> 00:07:10.800
So the thumb rule is followed, right.

87
00:07:11.320 --> 00:07:14.920
So this Bidart seesaws file perfectly compiles.

88
00:07:16.710 --> 00:07:24.120
Now the developer uses another approach, he has include a dot at sorts while followed by the use of

89
00:07:24.120 --> 00:07:24.730
the function.

90
00:07:25.740 --> 00:07:32.970
So this be the source file again perfectly compiles, because when you apply tax substitution, this

91
00:07:32.970 --> 00:07:34.250
has to include a dot.

92
00:07:34.270 --> 00:07:38.640
That statement will be replaced by the declaration of the function fule.

93
00:07:39.150 --> 00:07:41.180
So the thumb rule is still followed.

94
00:07:42.240 --> 00:07:50.340
And the third approach is that that the developer directly make use of the function without mentioning

95
00:07:50.340 --> 00:07:52.960
or providing the declaration of the function.

96
00:07:53.640 --> 00:07:54.000
Right.

97
00:07:54.300 --> 00:07:56.820
And this is something which violates the rule.

98
00:07:57.150 --> 00:07:59.280
So this source file will not compile.

99
00:08:01.190 --> 00:08:07.100
In fact, it will compile, but it will give you a warning and during the linking phase, that warning

100
00:08:07.100 --> 00:08:10.320
will get translated into error.

101
00:08:11.060 --> 00:08:17.810
So the takeaway from this lecture is that that always take care to mention the declaration of the function

102
00:08:17.990 --> 00:08:20.060
before actually using the function.

103
00:08:20.060 --> 00:08:26.840
And the source, while not declaration of the function, can be provided either by explicitly specifying

104
00:08:26.840 --> 00:08:33.590
the declaration of the function or has including the header file, which in turn contains the declaration

105
00:08:33.590 --> 00:08:34.280
of the function.

106
00:08:35.539 --> 00:08:42.049
So either approach you pick the angle should be that declaration of the function must come before the

107
00:08:42.049 --> 00:08:44.690
use of the function in the source file.

