WEBVTT
1
00:00:06.090 --> 00:00:11.510
So, guys, now we will discuss the solution of the problem that we had discussed in the previous lecture

2
00:00:11.550 --> 00:00:19.080
video, so the solution will be the delegation of application responsibility to library, right.

3
00:00:20.350 --> 00:00:25.510
So delegation means of looting that is giving your share of work to somebody else.

4
00:00:26.530 --> 00:00:34.590
So the cleaner approach is to delegate the responsibility of searching a particular record in a library

5
00:00:34.840 --> 00:00:37.270
by key to the library itself.

6
00:00:37.900 --> 00:00:38.200
Right.

7
00:00:38.650 --> 00:00:45.670
So this way we need to write search logic at only one place in library could we took a look in a linked

8
00:00:45.670 --> 00:00:52.180
list library record and we saw that we wrote such logic in the application Nazi source file.

9
00:00:52.990 --> 00:00:53.330
Right.

10
00:00:53.590 --> 00:00:59.830
So the solution will be that instead of writing a search, logic and application code, we should write

11
00:00:59.830 --> 00:01:01.780
such logic in the library code.

12
00:01:02.770 --> 00:01:10.330
So application needs to teach the English library how to match the application record, which is hold

13
00:01:10.330 --> 00:01:13.940
by a note of a link list with a given key.

14
00:01:15.490 --> 00:01:20.860
The reason being that linked list is actually blind towards application data.

15
00:01:21.910 --> 00:01:28.720
The data type of application data that is being called by doubly linked list is actually of type Wildstar.

16
00:01:30.850 --> 00:01:37.150
So it means that relentless need to be taught by the application, how to manipulate the application

17
00:01:37.150 --> 00:01:37.640
data.

18
00:01:38.200 --> 00:01:43.330
So we do this by writing matching functions whose prototypes are given below.

19
00:01:44.440 --> 00:01:50.860
So this is the matching function for the structure student and this is the matching function for a structured

20
00:01:50.860 --> 00:01:51.370
employee.

21
00:01:52.210 --> 00:01:58.930
So you need to write as many matching functions as the number of linked list that is being used by application

22
00:01:58.930 --> 00:02:02.080
to hold the structures of different types.

23
00:02:02.920 --> 00:02:08.050
In our case, we have two types of data structures that is a student and employee and therefore we need

24
00:02:08.050 --> 00:02:09.880
to write two matching functions.

25
00:02:10.400 --> 00:02:13.420
You can see that the return type of this matching function is input.

26
00:02:13.990 --> 00:02:20.950
That is, we will return zero if the object that is the first pointer matches with the key and you can

27
00:02:20.950 --> 00:02:23.000
return minus one if it do not match.

28
00:02:23.620 --> 00:02:30.040
So let us discuss the implementation of these two functions and you can find the relevant source code

29
00:02:30.040 --> 00:02:30.850
in this part.

30
00:02:31.950 --> 00:02:39.360
So discussing the source code, you can see that I am in this directory that is such callbacks and in

31
00:02:39.360 --> 00:02:42.840
this directory I will open application dot seesaws file.

32
00:02:44.070 --> 00:02:47.130
So this is the same source file that we discussed last time.

33
00:02:48.530 --> 00:02:55.400
The only difference is that that in the source, while I have added two matching functions, right,

34
00:02:55.760 --> 00:02:59.270
match a student record bickie and match employee record bickie.

35
00:02:59.990 --> 00:03:05.210
So the first argument to this function is a pointer to the object of type of student.

36
00:03:06.080 --> 00:03:12.480
And it is for this reason that in the first line I typecast the data into the student type pointer.

37
00:03:13.850 --> 00:03:16.240
The second argument to this function is a key.

38
00:03:16.400 --> 00:03:20.120
So in our case, the key is just a wrong number, right?

39
00:03:21.230 --> 00:03:28.100
So here we are just matching that if the student loan number is equal to Darcie, then Tansu otherwise

40
00:03:28.100 --> 00:03:28.990
return minus one.

41
00:03:29.690 --> 00:03:33.840
So you can see that this matching function is quite simple and straightforward.

42
00:03:34.430 --> 00:03:38.740
The same follows with matching function that is written for implied structure.

43
00:03:40.720 --> 00:03:48.160
So these matching functions simply say is that whether a particular object of their type C student has

44
00:03:48.160 --> 00:03:49.610
the following key or not.

45
00:03:50.230 --> 00:03:52.910
So this function simply says true or false.

46
00:03:53.710 --> 00:03:58.880
So not that these functions are implemented in application doxie source file.

47
00:03:59.200 --> 00:04:04.960
That is, it is the application responsibility to provide the implementation of these matching functions.

48
00:04:05.530 --> 00:04:06.790
Now, next, let us see that.

49
00:04:06.790 --> 00:04:10.750
How can we use these matching functions to meet our objective?

50
00:04:11.740 --> 00:04:13.200
So now going forward.

51
00:04:13.600 --> 00:04:16.160
So let us discuss the solution step by step.

52
00:04:16.990 --> 00:04:21.329
So the first step is that you need to implement the matching functions.

53
00:04:21.730 --> 00:04:25.470
So we have already discussed the implementation of these two matching functions.

54
00:04:26.020 --> 00:04:31.930
We will call these two matching function as callbacks because we will be using function pointer in order

55
00:04:31.930 --> 00:04:33.760
to make use of these two functions.

56
00:04:34.630 --> 00:04:35.000
Right.

57
00:04:35.890 --> 00:04:40.160
So note that the signature of these two functions must be generated.

58
00:04:40.660 --> 00:04:46.370
So we made the signature of these two functions generating by using argument of type Wildstar.

59
00:04:46.900 --> 00:04:53.110
So remember and see, whenever it comes to write generic programming, you always need to make use of

60
00:04:53.110 --> 00:04:53.950
Wildstar.

61
00:04:55.130 --> 00:05:01.580
So you can see that the prototype, our signature of these two functions are application agnostic,

62
00:05:02.120 --> 00:05:02.500
right?

63
00:05:04.340 --> 00:05:11.630
We have not used any application specific date type as an argument or return type of these two functions.

64
00:05:12.940 --> 00:05:18.820
Now, in the second step, we were going to define a callback function pointer and doubly linked list

65
00:05:18.820 --> 00:05:19.700
library code.

66
00:05:20.410 --> 00:05:25.540
So remember, our structure, which defines the linked list, was something like that.

67
00:05:26.290 --> 00:05:32.770
Now we will introduce a new member in this class structure, and this new member is actually a function

68
00:05:32.770 --> 00:05:33.300
pointer.

69
00:05:34.030 --> 00:05:40.570
So you can see that this function pointer is compatible to hold the address of the functions which are

70
00:05:40.570 --> 00:05:44.650
defined in step one because the prototype matches.

71
00:05:45.990 --> 00:05:53.520
So this member of the list will going to hold the address of one of these callbacks, so if you open

72
00:05:53.760 --> 00:06:04.140
the L.L. Dot edge file, you will see that I have to find a new member, which is a function pointer

73
00:06:04.140 --> 00:06:09.550
inside the structure, the underscore T, which represents our linked list.

74
00:06:10.800 --> 00:06:14.370
So this was the step number two going forward.

75
00:06:14.970 --> 00:06:21.630
In step number three, you need to add a new function to your doubly linked list library and provide

76
00:06:21.630 --> 00:06:24.050
its implementation and source file.

77
00:06:24.060 --> 00:06:30.060
That is the little dot C, so the prototype or the signature of the function is register key.

78
00:06:30.060 --> 00:06:31.320
Match callback.

79
00:06:31.830 --> 00:06:32.190
Right.

80
00:06:32.550 --> 00:06:36.360
The first argument to this function is a pointer to your DoubleLine list.

81
00:06:36.930 --> 00:06:42.240
And the second argument to this function is a pointer to the callbacks that you have just written in

82
00:06:42.240 --> 00:06:42.900
step one.

83
00:06:43.900 --> 00:06:51.280
So let us discuss how we have implemented dysfunction in our library so you can see that here is the

84
00:06:51.280 --> 00:06:59.860
prototype that I have provided in header file and the implementation of this function is provided in

85
00:06:59.860 --> 00:07:00.760
Sourcefire.

86
00:07:03.150 --> 00:07:09.000
So this is Daniel Ã–tzi, and you can see that the implementation of this function is fairly, very simple,

87
00:07:09.510 --> 00:07:15.660
this function simply restores the function pointer, which is provided as second document into the key

88
00:07:15.660 --> 00:07:19.470
match member of the linked list, which is actually a function pointer.

89
00:07:20.960 --> 00:07:30.200
Right, so the application would make use of this function to tell the library that here library here

90
00:07:30.200 --> 00:07:34.790
is the key matching function for data structure student, right.

91
00:07:35.060 --> 00:07:37.760
So this function will be invoked by the application.

92
00:07:37.970 --> 00:07:43.220
And as an argument to this function, the application will provide the function pointer.

93
00:07:43.670 --> 00:07:49.400
This function pointer will be then stored by the library in its key match function pointer member.

94
00:07:49.820 --> 00:07:56.840
So this way you can see that application is actually giving some tools to the library in order to perform

95
00:07:56.840 --> 00:07:59.570
some application specific operations.

96
00:08:00.260 --> 00:08:06.680
Now, having done the step number three in step number four, we need to add a new Generex such function

97
00:08:06.680 --> 00:08:07.580
in the library.

98
00:08:08.120 --> 00:08:13.670
This function can be used to search any application data which is hauled by the list.

99
00:08:14.510 --> 00:08:20.690
So the prototype of this function has to be generic because this function will be used by the application

100
00:08:20.810 --> 00:08:24.090
in order to such a particular record in the list.

101
00:08:24.770 --> 00:08:30.080
So the first argument of this function is a linked list, and the second argument to this function is

102
00:08:30.080 --> 00:08:35.780
the key based on which the intrusted record will be located in this list.

103
00:08:36.590 --> 00:08:39.830
So now let us discuss that, how we have implemented this function.

104
00:08:43.090 --> 00:08:50.320
So, again, I am an seesaws file, and in this source file, you can see that here is the function

105
00:08:51.100 --> 00:08:52.520
dial search by key.

106
00:08:53.290 --> 00:08:56.850
So the first argument to this function is a pointer to the list.

107
00:08:56.860 --> 00:09:03.130
And the second argument to this function is a key based on which are interested record will be located

108
00:09:03.130 --> 00:09:04.260
in this list.

109
00:09:04.810 --> 00:09:12.130
So you can see that we have implemented the same search algorithm in this function search on what it

110
00:09:12.210 --> 00:09:15.450
means, the way we locate a record list.

111
00:09:15.970 --> 00:09:22.210
Now, remember, in order to locate an interested record in a linked list, the library has to match

112
00:09:22.210 --> 00:09:29.890
the key that is provided as an input with the key of the data, which is hosted by the node of the list.

113
00:09:30.430 --> 00:09:33.790
So this is done in this line right now.

114
00:09:33.790 --> 00:09:41.740
The List library is making use of this key match function in order to see whether the given key matches

115
00:09:41.740 --> 00:09:48.010
with the given the card, the record that is held by the linked list is the first member to this key

116
00:09:48.010 --> 00:09:48.650
match function.

117
00:09:49.600 --> 00:09:53.890
So this is the application data, which is hold by the note of the list.

118
00:09:54.580 --> 00:10:00.550
And the second document is the key, which is provided by the application to locate and entrusted the

119
00:10:00.550 --> 00:10:00.940
card.

120
00:10:02.110 --> 00:10:09.460
So you can see that the essence here is that that the library is making use of function, which is provided

121
00:10:09.460 --> 00:10:16.840
by the application in order to determine whether a particular record matches with the key provided by

122
00:10:16.840 --> 00:10:18.320
the application or not.

123
00:10:19.450 --> 00:10:25.540
So you can see that we have implemented a search algorithm which is generic and it will work for all

124
00:10:25.540 --> 00:10:27.820
the data types and all data structures.

125
00:10:29.270 --> 00:10:36.980
Now coming back to our slide, so this was the step number four in stop number five after creating a

126
00:10:37.370 --> 00:10:44.210
linked list, an application, we need to register the appropriate callback function with the list and

127
00:10:44.210 --> 00:10:44.890
we are done.

128
00:10:45.530 --> 00:10:51.860
So now let us go through the example and let us see in totality that what we have achieved by following

129
00:10:51.860 --> 00:10:53.690
the stop number from one to five.

