WEBVTT
1
00:00:05.620 --> 00:00:11.800
So, guys, now finally, let us formulate our problem statement, that is what are all those questions,

2
00:00:11.800 --> 00:00:15.840
whose answers we are willing to find in this section of the course?

3
00:00:16.300 --> 00:00:21.190
So you can see on the right hand side, I have drawn a Mahmoudi region of a process.

4
00:00:21.820 --> 00:00:28.090
So let us say that your process, our program claims Tronto by itself mummery using mallock function

5
00:00:28.840 --> 00:00:32.020
so the hip region will expand by 20 bite's.

6
00:00:33.480 --> 00:00:40.860
Also, notice that this starting address of this 20 bytes of memory will be saved in this point, already

7
00:00:40.880 --> 00:00:41.580
will be one.

8
00:00:43.160 --> 00:00:48.950
Now, your process claims 10 bytes of memory, then your process claims again time bytes of memory.

9
00:00:49.190 --> 00:00:55.960
And again, the process claims 15 bytes of memory and finally process claims 20 by itself memory.

10
00:00:56.420 --> 00:01:01.700
So you can see that as your process claims more and more memory using mallock function.

11
00:01:01.850 --> 00:01:09.240
The heap memory just keeps on expanding from lower addressed towards higher address, the breakpoint

12
00:01:09.240 --> 00:01:11.450
that finally settles at disposition.

13
00:01:11.960 --> 00:01:16.850
Now, let us suppose that your program wants to free this 10 bytes of memory.

14
00:01:18.120 --> 00:01:23.910
Right so far that your program calls free with a point of poetry as an argument.

15
00:01:25.370 --> 00:01:32.090
Now, there are certain questions which should cross your mind, how operating system would know how

16
00:01:32.090 --> 00:01:40.280
much mahmudi to free up in walking this free call, you can see that in this free call we are only passing

17
00:01:40.280 --> 00:01:42.290
the value of the pointer P3.

18
00:01:42.800 --> 00:01:48.270
That is this address, but we are not passing how much size we should free.

19
00:01:49.370 --> 00:01:53.230
You can see that the size of this mammary block was standpipes.

20
00:01:54.710 --> 00:01:58.970
So obviously the operating system should free only 10 bytes of memory.

21
00:01:59.780 --> 00:02:03.370
But in this free call, we are not passing 10 as an argument.

22
00:02:03.590 --> 00:02:04.010
Right.

23
00:02:04.370 --> 00:02:10.880
So it means that the operating system needs to keep track somewhere that for every malac, what was

24
00:02:10.880 --> 00:02:14.210
the amount of byte it assigned to the process?

25
00:02:15.290 --> 00:02:21.710
Second question is that how operating system organizes the memory blocks, which is assigned by the

26
00:02:21.710 --> 00:02:28.960
mallock function operating system needs to know that P3 is associated with 10 bytes of block of memory.

27
00:02:29.210 --> 00:02:29.610
Right.

28
00:02:29.990 --> 00:02:37.820
So you can see that P three was that starting address of 10 bytes of block of memory and three P three

29
00:02:37.820 --> 00:02:43.140
calls should really is only 10 bytes of memory, not more and not less than that.

30
00:02:45.020 --> 00:02:49.970
So how operating system ensures that P3 is a valid memory address, right.

31
00:02:50.330 --> 00:02:54.470
It is also possible that you can invoke free call with some random address.

32
00:02:54.920 --> 00:02:58.550
So operating system should be in a position to detect that.

33
00:02:58.550 --> 00:03:04.340
The address that you have passed to the free call is actually the address, which was written by one

34
00:03:04.340 --> 00:03:07.550
of the Malakal, which was invoked previously.

35
00:03:08.470 --> 00:03:15.680
In second, you are allowed to pass only those addresses which were returned by Mallock or Kalac functions.

36
00:03:16.240 --> 00:03:22.620
So let us understand the concept of memory block management to find our answers to these questions.

37
00:03:23.170 --> 00:03:30.490
So basically, we want to understand how memory management is done by Linux operating system, and that

38
00:03:30.490 --> 00:03:33.490
is the main goal of this section of the course.

