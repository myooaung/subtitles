WEBVTT
1
00:00:07.180 --> 00:00:12.220
So, guys, now let's discuss the algorithm, all the steps involved in parent matching.

2
00:00:12.970 --> 00:00:18.960
So to start with, let us take this as the input, a string as an example and this base with Burton

3
00:00:18.970 --> 00:00:25.240
as an example for demonstration, we already know that this input string do not match against this base,

4
00:00:25.240 --> 00:00:25.870
but pattern.

5
00:00:26.770 --> 00:00:33.190
So to start with for a given base pattern, we need to compute two things.

6
00:00:33.940 --> 00:00:37.570
The first thing is called masks, and the second thing is called template.

7
00:00:38.230 --> 00:00:46.210
So in order to compute mask from the base pattern, we need to follow two rules replace all the bits

8
00:00:46.210 --> 00:00:51.340
to be masked by one and replace altogether bits by zero.

9
00:00:52.000 --> 00:00:57.130
So here you can see that all the bits which needs to be masked to be replaced by one.

10
00:00:57.790 --> 00:00:59.200
So here are the bits to be masked.

11
00:00:59.210 --> 00:01:01.450
Is this one and the last bit?

12
00:01:01.990 --> 00:01:08.650
So write it down like this and the don't care bits needs to be replaced by zero.

13
00:01:09.460 --> 00:01:09.880
All right.

14
00:01:10.180 --> 00:01:12.610
So this is the mask value that we have got.

15
00:01:15.120 --> 00:01:17.730
The second thing that we need to compute is the template.

16
00:01:18.180 --> 00:01:21.990
And in order to compute template, we need to follow only one rule.

17
00:01:22.530 --> 00:01:27.510
And the rule is that that in the best bit pattern, replace all the tone curves by zero.

18
00:01:28.050 --> 00:01:31.560
So the template value that we get is one zero zero one.

19
00:01:32.730 --> 00:01:34.200
Let's take one more example.

20
00:01:34.530 --> 00:01:40.440
Suppose this is the base bit paradigm, and we need to compute mask and template from this base, but

21
00:01:40.440 --> 00:01:40.940
pattern.

22
00:01:42.060 --> 00:01:47.550
So mask value can be obtained by applying these tools taps on this base pattern.

23
00:01:47.880 --> 00:01:54.570
So you will find that the mask value that is opt in is the following bit pattern replace all the bits,

24
00:01:54.570 --> 00:01:59.790
which needs a match by one and replace all the don't care bits by zero.

25
00:02:01.540 --> 00:02:07.600
Similarly, you can compute template from this base, but padam and the template will come out to be

26
00:02:07.600 --> 00:02:13.240
the following bit pattern replace all the don't care bits by zero as simple as that.

27
00:02:14.230 --> 00:02:14.680
All right.

28
00:02:15.340 --> 00:02:20.320
So from a given based pattern, you need to compare two things the mask and the template.

29
00:02:20.800 --> 00:02:26.440
Once you computed the mask and the template, then you need to apply this algorithm.

30
00:02:26.810 --> 00:02:29.330
Whatever input pattern you receive.

31
00:02:29.560 --> 00:02:35.500
All you need to match, perform and operation with the mask and whatever result you got, it should

32
00:02:35.500 --> 00:02:37.360
be equal to the template.

33
00:02:37.780 --> 00:02:43.810
If this condition is satisfied and the pattern is masked, otherwise the pattern is not masked.

34
00:02:44.140 --> 00:02:51.070
I leave it as an exercise for you to apply this algorithm or this condition on these to input the string

35
00:02:51.310 --> 00:02:55.690
and try to match these input the string against this particular bit pattern.

36
00:02:56.200 --> 00:03:01.030
And you will find that the first input, the string matches that as the second input, the string do

37
00:03:01.030 --> 00:03:01.900
not matches.

38
00:03:02.380 --> 00:03:06.400
So that is not much to discuss any further in this, but pattern matching concept.

