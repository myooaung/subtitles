WEBVTT
1
00:00:05.750 --> 00:00:09.090
So, guys, now let us summarize what we have done so far.

2
00:00:09.770 --> 00:00:16.780
We have just got our list library by registering the key match back to how to search the application

3
00:00:16.790 --> 00:00:22.910
of specific data, which is being held by the doubly linked list library and depending on the key.

4
00:00:24.740 --> 00:00:31.700
All application developer need to write a key match callback for the data type, which will be maintained

5
00:00:31.700 --> 00:00:33.950
by the library, right.

6
00:00:34.250 --> 00:00:41.120
So, for example, we wrote key match callback functions, one for a student and another one for employee

7
00:00:41.120 --> 00:00:41.840
structures.

8
00:00:42.950 --> 00:00:46.880
We have nicely delegated the search operation onto the library.

9
00:00:47.150 --> 00:00:47.480
Right.

10
00:00:47.720 --> 00:00:54.710
So now it is the library which is iterating over a linked list and trying to locate the intrusted data

11
00:00:54.860 --> 00:00:55.900
based on a key.

12
00:00:56.450 --> 00:01:03.260
And we don't have to write such logic on the application side again and again for different type of

13
00:01:03.260 --> 00:01:04.099
structures.

14
00:01:04.879 --> 00:01:12.650
Library performance applications, specific operation Soheir application specific operation means comparing

15
00:01:12.650 --> 00:01:16.620
the data that is being held by the node of a linked list with the key.

16
00:01:17.240 --> 00:01:20.680
So it is an application, a specific operation, right?

17
00:01:20.840 --> 00:01:27.110
So Library performs application, a specific application by invoking application specific functions

18
00:01:27.110 --> 00:01:28.710
through generate callbacks.

19
00:01:29.180 --> 00:01:35.650
So have you written any application specific court in our library that is not agnolotti?

20
00:01:36.080 --> 00:01:37.120
Answer is no.

21
00:01:37.340 --> 00:01:43.940
We have not written any application of specific code in our library and therefore our libraries still

22
00:01:43.940 --> 00:01:46.400
continue to be application agnostic.

23
00:01:47.000 --> 00:01:47.390
Right?

24
00:01:47.630 --> 00:01:49.460
We have not violated this rule.

25
00:01:50.180 --> 00:01:53.360
So an industry, you will find this technique everywhere.

26
00:01:54.080 --> 00:02:01.160
But in my experience, I have noticed that students don't make use of callbacks in this way and they

27
00:02:01.160 --> 00:02:08.030
keep on implementing such operation again and again for different instances of data structure, such

28
00:02:08.030 --> 00:02:10.039
as doubly linked list that they are using.

29
00:02:10.490 --> 00:02:15.650
And we already know that this leads to code duplication and unmaintainable code.

30
00:02:16.610 --> 00:02:24.980
So let us see how we can apply the same concept to provide intelligence to our library so that now application

31
00:02:24.980 --> 00:02:27.770
can insert the data in sorted order.

32
00:02:27.980 --> 00:02:31.930
And for that we need to register a comparison callback.

33
00:02:32.510 --> 00:02:33.860
So let us discuss next.

34
00:02:33.860 --> 00:02:35.390
How can we achieve this goal?

