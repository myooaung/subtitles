WEBVTT
1
00:00:07.500 --> 00:00:13.580
So, guys, now next, let us discuss how to write outrated macro to iterate over a linked list.

2
00:00:14.070 --> 00:00:21.930
So in this slide, I have shown you the example which illustrate the outrated macro to iterate over

3
00:00:21.930 --> 00:00:22.580
a linked list.

4
00:00:22.980 --> 00:00:26.150
So the name of the macro is outrate list begin.

5
00:00:26.340 --> 00:00:26.750
Right.

6
00:00:27.030 --> 00:00:30.120
And you can see that this macro accepts the argument.

7
00:00:30.510 --> 00:00:36.720
The first argument is a pointer to the linked list, and the second argument is a pointer which points

8
00:00:36.720 --> 00:00:38.220
to the node of a link list.

9
00:00:39.330 --> 00:00:46.320
So to initialize with this node pointer will be initialized to null before making a call to this iterative

10
00:00:46.320 --> 00:00:46.860
macro.

11
00:00:48.730 --> 00:00:55.090
It will be the responsibility of this iterative macro to set this nought point or two unmowed of a linked

12
00:00:55.090 --> 00:01:04.720
list and at this point or to point to a next node of a link list every time this iterative macro move

13
00:01:04.720 --> 00:01:06.040
to the next iteration.

14
00:01:06.670 --> 00:01:13.540
Now, as I mentioned earlier, that alternative macros are nothing, but they are just a fancy wrapper

15
00:01:13.570 --> 00:01:14.690
over for loop.

16
00:01:15.280 --> 00:01:15.610
Right.

17
00:01:16.210 --> 00:01:21.500
So you can see that implementation of this iterative macro is fairly simple and straightforward.

18
00:01:22.060 --> 00:01:26.860
First of all, I have taken a pointer which points to the head of a linked list.

19
00:01:27.190 --> 00:01:27.580
Right.

20
00:01:27.880 --> 00:01:32.920
And then I simply write a for loop to outrage over the entire linked list.

21
00:01:33.940 --> 00:01:42.160
Now, I expect you here to analyze this for loop and see that this for loop is very obvious and facilitate

22
00:01:42.160 --> 00:01:45.220
us to I tripped over each node of a link list.

23
00:01:46.980 --> 00:01:56.310
So you can see this democracy in action in the file library, designing ignitor democracy patch in this

24
00:01:56.330 --> 00:02:00.990
high, I have defined the implementation of this idea of democracy.

25
00:02:02.040 --> 00:02:09.690
Also, if you apply the tax substitution carefully, you will see that this iterative Macklowe expands

26
00:02:09.690 --> 00:02:15.550
into Umair for loop in the source file to ETrade over a list.

27
00:02:16.020 --> 00:02:24.270
So now I live it as an exercise to you to apply the tax substitution over this iterative macro and see

28
00:02:24.270 --> 00:02:26.010
that in the source file.

29
00:02:26.010 --> 00:02:31.500
What is the equivalent code which you get after the tax substitution has been done?

30
00:02:33.150 --> 00:02:40.860
Now, you already know how to see a seesaws file only after tax substitution has been performed on that

31
00:02:40.860 --> 00:02:42.120
particular source file.

32
00:02:43.140 --> 00:02:48.840
Let me discuss in brief that how tax substitution for iterative mackerels happens.

33
00:02:49.850 --> 00:02:54.320
You can see that the macro that you have defined is the one in the white box.

34
00:02:56.000 --> 00:03:02.420
And the definition of this, the macro is the one in the bigger box below, right?

35
00:03:04.440 --> 00:03:11.940
So in your source file, whenever you write the iterative macro, that is the one in the white box.

36
00:03:13.510 --> 00:03:22.150
Aftertax substitution, this makeable, will be replaced by the following C-code right now, you can

37
00:03:22.150 --> 00:03:29.710
see that the tag substitution of this iterative macro will introduce these open places, right?

38
00:03:30.250 --> 00:03:36.880
So you need to make arrangement in order to balance out these parentheses so that your code combines.

39
00:03:37.870 --> 00:03:44.680
So it is for this reason that you need a complimentary macro which will take care to balance the parentheses.

40
00:03:45.370 --> 00:03:52.990
So you can see that this macro that is outrate list and will be replaced by these two parentheses in

41
00:03:52.990 --> 00:03:55.690
your source file, After-Tax Substitution.

42
00:03:56.830 --> 00:04:03.610
So I try to macros are actually needs to be written in pairs, the biggest macro and the corresponding

43
00:04:03.610 --> 00:04:06.060
and macro will form up here.

44
00:04:06.430 --> 00:04:06.850
Right.

45
00:04:07.090 --> 00:04:13.720
And we write the and the macro because we need to balance out the parentheses, which were introduced

46
00:04:13.720 --> 00:04:14.800
by a big macro.

47
00:04:15.960 --> 00:04:24.330
Also, one aspect that I would like to emphasize on this item macro is that that this idea of macro

48
00:04:24.330 --> 00:04:29.820
provides you a facility to iterate over a linked list in a safe manner.

49
00:04:30.390 --> 00:04:31.650
Now, what does that mean?

50
00:04:32.280 --> 00:04:38.340
That means that this macro will allow you to iterate over a long list.

51
00:04:38.670 --> 00:04:46.350
And while you are processing the current node of a long list, you can actually delete and flee that

52
00:04:46.350 --> 00:04:48.150
particular node on the fly.

53
00:04:48.990 --> 00:04:54.450
So you can see that the highlighted line is responsible to make this iterative macro.

54
00:04:54.780 --> 00:04:56.340
Adelheid, see if MOOP.

55
00:04:58.520 --> 00:05:05.480
So a loop is set to be, Adelheid, safe if you can delete a current node of our data structure while

56
00:05:05.480 --> 00:05:08.500
iterating over the data structure within that loop.

57
00:05:10.580 --> 00:05:16.280
So let us try to understand this with the help of an example, suppose you have a link list in which

58
00:05:16.280 --> 00:05:20.110
you have certain numbers like one, two, three and four.

59
00:05:20.510 --> 00:05:22.400
So assume that it is a linked list.

60
00:05:22.750 --> 00:05:23.090
Right.

61
00:05:23.540 --> 00:05:31.430
And now I ask you one question that you are outraged over this link list and delete all the nodes which

62
00:05:31.430 --> 00:05:32.900
have evil numbers.

63
00:05:34.490 --> 00:05:41.360
So when I tripped over this link list and suppose your current Naude points to the node number two.

64
00:05:43.570 --> 00:05:50.440
So now this iterative macro will allow you to actually delete this particular node and actually free

65
00:05:50.440 --> 00:05:57.070
the memory of this particular node in the next iteration, you will still be able to process the node

66
00:05:57.070 --> 00:06:04.510
number three, the reason being that the pointer to the next node of a linked list is already cast in

67
00:06:04.510 --> 00:06:06.460
advance in another variable.

68
00:06:07.710 --> 00:06:08.100
Right.

69
00:06:08.490 --> 00:06:16.110
So when the body of this Falu finishes its hydration, you can see that in this part of the for loop,

70
00:06:16.770 --> 00:06:24.050
which is the hydration part, we simply copy the next note pointer of a link list, which is naughtily

71
00:06:24.060 --> 00:06:26.930
in this case to the current pointer.

72
00:06:27.240 --> 00:06:27.680
Right.

73
00:06:27.930 --> 00:06:33.090
And then we process this current load within the body of this outrated mackerel.

74
00:06:34.880 --> 00:06:41.840
And then immediately, we again cash the pointer to the next node of a link list and now in this case,

75
00:06:41.840 --> 00:06:48.110
the underscore mode underscore point, there is a variable which will point to the node number four

76
00:06:48.110 --> 00:06:49.040
of a linked list.

77
00:06:50.000 --> 00:06:58.160
So because we already cache the pointer to the next node of a linked list in advance, this iterative

78
00:06:58.160 --> 00:07:04.970
macro will allow us to delete and free the current node, which is being processed in the current iteration

79
00:07:05.150 --> 00:07:06.020
in the loop.

80
00:07:06.680 --> 00:07:13.340
So from now on, always develop a habit of writing, delete, save iterative macros.

81
00:07:14.330 --> 00:07:20.840
So you can see that I have implemented this iterative macro in our daily dot etc file.

82
00:07:22.040 --> 00:07:22.490
Right.

83
00:07:23.030 --> 00:07:30.350
So you can see that this is how we write the code in the header file and we implement the macros.

84
00:07:31.100 --> 00:07:37.520
Now if you want to see how to make use of this iterative macro in the source file so you can see that

85
00:07:37.520 --> 00:07:40.060
I'm an application dot, so it's fine.

86
00:07:40.460 --> 00:07:46.950
And if you remember that in this application dot seesaws file, I wrote a function which will print

87
00:07:46.950 --> 00:07:49.220
the student database write.

88
00:07:51.470 --> 00:07:57.830
So you can see that I have commented out the old guard, that is the traditional way of iterating over

89
00:07:57.830 --> 00:08:05.060
a linked list, representing a student database, and underneath I have used I try to micro instate

90
00:08:05.060 --> 00:08:10.580
in order to iterate over the entire linked list constituting student database.

91
00:08:10.850 --> 00:08:17.840
And then I'm printing each note of a linked list, one by one by calling the function student details.

92
00:08:19.790 --> 00:08:27.470
So you can see that instead of writing this legacy, all the code for iterating over a link list, now

93
00:08:27.470 --> 00:08:33.789
I'm using Iterative Macroom, which we have just discussed in order to iterate over our linked list.

94
00:08:34.960 --> 00:08:39.640
And then process each note of the linked list within the body of this iterative macro.

95
00:08:41.770 --> 00:08:49.480
So you can see that now your coat looks more stupid and it is always good that you are caught, looks

96
00:08:49.480 --> 00:08:54.540
stupid because a stupid coat requires no brain to understand it.

97
00:08:55.850 --> 00:09:01.430
So whenever in your application you need to outrate over any link list, you can simply make use of

98
00:09:01.430 --> 00:09:07.730
this iterative macro positive the pointer to the link list, because the pointer to the node of a linked

99
00:09:07.730 --> 00:09:14.660
list initialized to null, of course, and this iterative macro will take the responsibility to allow

100
00:09:14.660 --> 00:09:20.900
you to iterate and process each node of our linked list that you are iterating on.

101
00:09:21.970 --> 00:09:27.510
So we have discussed our first item to move, which will allow you to iterate over a linked list.

102
00:09:27.730 --> 00:09:33.760
Now, next, let us discuss how to write a letter to macro, which will allow you to iterate over binary

103
00:09:33.760 --> 00:09:40.270
search trees because tree is another data structures, which is very prevalent and most commonly used

104
00:09:40.270 --> 00:09:43.320
data structure to store application data.

