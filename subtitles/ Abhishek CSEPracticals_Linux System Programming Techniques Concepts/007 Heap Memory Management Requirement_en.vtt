WEBVTT
1
00:00:05.450 --> 00:00:09.420
So, guys, straightaway let us discuss the heat memory management.

2
00:00:10.160 --> 00:00:16.460
We will discuss the concepts and implementation behind heat memory management done by the Linux operating

3
00:00:16.460 --> 00:00:16.930
system.

4
00:00:17.660 --> 00:00:22.070
So let us suppose that you are given a huge chunk of contiguous memory.

5
00:00:23.190 --> 00:00:29.280
So remember, the heat memory segment is a contiguous memory, which represents the process which will

6
00:00:29.280 --> 00:00:31.150
address the space, right.

7
00:00:31.800 --> 00:00:35.150
So heat memory is a part of process which will address the space.

8
00:00:35.400 --> 00:00:41.800
And you can see that this horizontal slab represents our deep memory segment of a process.

9
00:00:42.690 --> 00:00:47.730
You can see that on the left hand side, that left leftmost address is the lower address.

10
00:00:48.150 --> 00:00:54.200
And the rightmost address of this heat memory segment is the highest address of this heap segment.

11
00:00:54.750 --> 00:01:01.250
So the requirement is that the process should be able to allocate its smaller chunks of memory as the

12
00:01:01.260 --> 00:01:03.990
requested size from this heat memory segment.

13
00:01:04.410 --> 00:01:04.819
Right.

14
00:01:05.190 --> 00:01:06.410
And whenever needed.

15
00:01:07.050 --> 00:01:13.620
And this is how standard Marlock function works using mallock function, the process request and a number

16
00:01:13.620 --> 00:01:17.760
of bytes from the operating system whenever the process desires.

17
00:01:18.660 --> 00:01:25.920
Similarly, process should be able to return back those smaller chunks of memory which it had requested

18
00:01:26.190 --> 00:01:34.380
back to the heat memory segment and process is not bound to return those smaller chunks of memory in

19
00:01:34.380 --> 00:01:35.910
any particular sequence.

20
00:01:36.540 --> 00:01:42.750
It can return the smaller chunks of memory which it had requested in any sequence it wants.

21
00:01:43.140 --> 00:01:46.810
And this is how standard free function works, right?

22
00:01:47.970 --> 00:01:54.320
And the third requirement is that you are not allowed to use any supporting data structures for heat

23
00:01:54.360 --> 00:01:56.190
memory management of a process.

24
00:01:56.670 --> 00:02:03.570
The reason is that if operating system uses and is supporting data structures, that those data structures

25
00:02:03.570 --> 00:02:08.320
would in turn need separate memory, which is not available to you.

26
00:02:08.729 --> 00:02:12.750
So here you can see that this is a kind of chicken and egg problem.

27
00:02:13.440 --> 00:02:17.390
To manage a memory of a process, you need additional memory.

28
00:02:17.730 --> 00:02:18.150
Right?

29
00:02:18.450 --> 00:02:24.180
And for that additional memory, you again need some data structures to manage that original memory.

30
00:02:24.570 --> 00:02:26.250
So it's a chicken and egg problem.

31
00:02:27.030 --> 00:02:33.510
So operating system is not allowed to use any other supporting data structures in order to manage the

32
00:02:33.510 --> 00:02:35.700
heap memory segment of a process.

33
00:02:36.270 --> 00:02:38.610
We will see how operating system does that.

34
00:02:39.810 --> 00:02:46.380
So let us see how operating system at a lower level implement the following schemes that we have just

35
00:02:46.380 --> 00:02:47.010
discussed.

