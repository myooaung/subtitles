WEBVTT
1
00:00:08.070 --> 00:00:13.380
So, guys, now in this lecture, we will we will going to learn how to use bits as bullet flats.

2
00:00:14.130 --> 00:00:16.710
So to start with, let us take an example.

3
00:00:17.220 --> 00:00:23.640
So let us take our variable E, which is nothing but an unsigned 16 bit variable and let us assign the

4
00:00:23.640 --> 00:00:25.470
value just one to this variable.

5
00:00:26.190 --> 00:00:32.040
So the memory representation of this variable a, which is initialized to one, would look something

6
00:00:32.040 --> 00:00:32.700
like this.

7
00:00:33.300 --> 00:00:39.480
You can see all the bits are set to zero, except the least significant bit is initialized to one.

8
00:00:40.230 --> 00:00:43.620
So this is how one is represented in the computer's memory.

9
00:00:44.370 --> 00:00:51.270
Similarly, if the variable value is changed to two, you can see that the second least significant

10
00:00:51.270 --> 00:00:52.860
bit is set to one.

11
00:00:53.280 --> 00:00:56.040
Whereas the rest of all the bits is set to zero.

12
00:00:56.370 --> 00:01:01.500
And I presume that you are already familiar how to convert the decimal number to its equal and binary

13
00:01:01.500 --> 00:01:01.950
form.

14
00:01:02.370 --> 00:01:09.990
You will find that two is represented in the binary form with having second least significant bit value

15
00:01:09.990 --> 00:01:10.920
equal to one.

16
00:01:11.340 --> 00:01:13.890
Whereas rest of the bits is set to zero.

17
00:01:14.400 --> 00:01:20.370
And the same goes with value for the third least, significant bit will be one, whereas the rest of

18
00:01:20.370 --> 00:01:21.660
the bits will be zero.

19
00:01:22.470 --> 00:01:22.950
All right.

20
00:01:23.250 --> 00:01:30.630
So you can notice the pattern that as long as the value of eight is a power of two, only one bit in

21
00:01:30.630 --> 00:01:34.380
the memory is set, whereas the rest of the bits is set to zero.

22
00:01:35.310 --> 00:01:39.330
So, for example, it can be represented as to rest of the power three.

23
00:01:40.560 --> 00:01:46.500
In other words, in the left shift notation, it can be represented as one left shaped by three.

24
00:01:46.980 --> 00:01:52.380
So it simply means that the third least significant bit in the computer's memory would going to be one

25
00:01:52.800 --> 00:01:59.550
the starting with the position as zero one two three four five up to 15.

26
00:02:01.110 --> 00:02:01.560
All right.

27
00:02:02.400 --> 00:02:08.610
So the takeaway from this discussion is that but as long as the value of a variable is a pure power

28
00:02:08.610 --> 00:02:15.900
of two, then in the binary representation of this number, only one bit that is exactly one bit will

29
00:02:15.900 --> 00:02:19.020
be said, whereas the rest of the bits will be zero.

30
00:02:19.530 --> 00:02:27.060
So using this concept, let us now see that how a single 16 bit variable can be used to track multiple

31
00:02:27.060 --> 00:02:28.140
Boolean attributes.

32
00:02:28.710 --> 00:02:34.320
So let us say, for example, we have a student and we need to track certain properties of the student,

33
00:02:34.320 --> 00:02:35.880
which are of Boolean nature.

34
00:02:36.330 --> 00:02:41.520
For example, whether the student is a native citizen or not, whether the student is male or female,

35
00:02:41.790 --> 00:02:47.700
is the student graduate, is the student postgraduate, etc., etc. You can see that all these seven

36
00:02:47.700 --> 00:02:51.570
questions can be answered in either yes or no.

37
00:02:52.140 --> 00:02:57.420
So let us define the bits which represent each of these seven attributes of the student.

38
00:02:58.050 --> 00:03:02.760
So, for example, let me has to find the constant student native citizen flag.

39
00:03:03.390 --> 00:03:08.610
He had every presence, the flag, and I'm giving it a value as simple as one.

40
00:03:09.060 --> 00:03:13.920
Now, coming to the second attribute of the student, we need to track whether the student is male or

41
00:03:13.920 --> 00:03:14.490
female.

42
00:03:14.910 --> 00:03:19.940
So for that, we were going to define the second bit position, which is nothing but to.

43
00:03:22.140 --> 00:03:28.320
Similarly, is the student graduate for back, we were going to define a constant which represents the

44
00:03:28.320 --> 00:03:33.600
third position, and this is nothing, but it is simple for all right.

45
00:03:34.530 --> 00:03:42.000
And using the same approach, we continue to define the constant value for all of the attributes of

46
00:03:42.000 --> 00:03:42.660
the student.

47
00:03:42.840 --> 00:03:49.260
And if you notice the pattern, all of these constants represent the pure power of two.

48
00:03:50.570 --> 00:03:51.020
All right.

49
00:03:52.640 --> 00:03:57.830
This is it, this is 16, this is 32 and this is 64.

50
00:04:00.750 --> 00:04:05.730
So having said that, on the left hand side, we defined.

51
00:04:07.170 --> 00:04:12.660
The birds, which represent each of the attributes of the student and each of these bird flags is a

52
00:04:12.660 --> 00:04:13.500
power of two.

53
00:04:14.340 --> 00:04:22.200
Now in your program, let us suppose that you get an information in your program that Alex is a native

54
00:04:22.200 --> 00:04:30.180
U.S. citizen as well as Alex is a male as well as Alex has a dual membership as well as Alex is not

55
00:04:30.180 --> 00:04:31.500
a postgraduate, a student.

56
00:04:32.190 --> 00:04:40.230
So in order to keep track of all these Boolean status of the student, Alex, you simply take a under

57
00:04:40.240 --> 00:04:41.490
16 flag.

58
00:04:42.240 --> 00:04:44.250
Now here I am taking a 16 bit flack.

59
00:04:44.250 --> 00:04:50.700
But but if you don't have to track more than it works, then you are free to take you into it.

60
00:04:51.660 --> 00:04:52.770
It will also.

61
00:04:53.580 --> 00:04:54.000
All right.

62
00:04:55.200 --> 00:05:02.430
And if you need to track more than 16 beds, then you can take you in to 32 bit variable also.

63
00:05:03.540 --> 00:05:07.440
So here initially, this flag value is initialized to zero.

64
00:05:07.860 --> 00:05:12.210
So the MAMOUDOU representation of this variable will have all the bit set to zero.

65
00:05:13.020 --> 00:05:20.460
Now, if I say that Alex is a native, you as a citizen, you simply perform the operation of this flag

66
00:05:20.880 --> 00:05:24.000
with the variable, not the value of this variable is one.

67
00:05:24.450 --> 00:05:30.360
So in this binary representation of this variable Alex flag, the big one will be set.

68
00:05:30.990 --> 00:05:38.280
Similarly, if you need to track that the student Alex is a male and the value of the male flag is simply

69
00:05:38.280 --> 00:05:40.110
the second least significant bit.

70
00:05:40.740 --> 00:05:45.690
So you again perform the same operation with the flag male.

71
00:05:46.290 --> 00:05:52.800
And after this operation, the second bit in the variable flag that is Alex Flag will be set to one.

72
00:05:53.700 --> 00:05:59.280
Similarly, if you come to know that Alex has a dual membership, then you simply performed all the

73
00:05:59.350 --> 00:06:00.840
operation of this flag.

74
00:06:01.020 --> 00:06:03.630
So here you have a flag suffix.

75
00:06:04.410 --> 00:06:11.880
So after performing this operation, the bit number six will be set to one in the variable Alex flag.

76
00:06:12.300 --> 00:06:18.450
And finally, if you come to know that Alex is not a postgraduate, then you need to perform this operation

77
00:06:18.450 --> 00:06:25.710
on the variable Alex, which result in the 3rd bit of the variable Alex flag to set to zero.

78
00:06:27.000 --> 00:06:33.000
So here I'm simply setting the bit number three to zero.

79
00:06:33.750 --> 00:06:35.570
So here you have zero one two.

80
00:06:35.580 --> 00:06:38.820
Three separate number three will be set to zero, which is already zero.

81
00:06:39.570 --> 00:06:39.990
All right.

82
00:06:40.650 --> 00:06:47.010
So you can see that in the same flag variable, which is of you and 16, you are able to keep track

83
00:06:47.010 --> 00:06:49.680
of multiple Boolean attributes of the data structure.

84
00:06:50.280 --> 00:06:56.130
Each bit of this flag variable represents some Boolean attribute of a student.

85
00:06:56.700 --> 00:07:05.010
So having gone through this exercise, we are in a position to define sort of macros which will be used

86
00:07:05.010 --> 00:07:09.810
to set the bed on side, set the bed and checking is the bridge set or not?

87
00:07:10.380 --> 00:07:11.130
You can assume.

88
00:07:11.130 --> 00:07:22.350
And as you end up, 32 bit number and bit flag is an integer, which is a power of two and set, but

89
00:07:22.380 --> 00:07:28.320
is a macro rule which should set the and at the bit in the variable end to one.

90
00:07:29.990 --> 00:07:30.440
All right.

91
00:07:31.970 --> 00:07:38.930
Similarly unsaid, it is the opposite of Sudbury and isbut set simply test whether this particular bed

92
00:07:38.930 --> 00:07:42.260
is set in this variable and or not.

93
00:07:43.310 --> 00:07:52.280
So you need to define a while it's all adds and this high profile, you should call up all these definitions

94
00:07:52.280 --> 00:07:57.800
and keep it safe for your other assignments and projects that aren't going further.

95
00:07:59.420 --> 00:08:05.900
In several conditions, you have to initialize a given variable M to the largest possible value that

96
00:08:06.080 --> 00:08:06.680
can hold.

97
00:08:07.700 --> 00:08:14.000
In that case, you can simply initialize the value end by using the hexadecimal notation.

98
00:08:14.990 --> 00:08:19.130
So here are all the 16 bits of the variable and is set to one.

99
00:08:19.670 --> 00:08:22.580
We are setting all the 16 bits of the variable and two.

100
00:08:23.960 --> 00:08:26.660
Here we are specifying the hexadecimal value.

101
00:08:27.200 --> 00:08:35.900
Alternatively, you can also write to you in 16 and is equal to sixty five thousand five hundred and

102
00:08:35.900 --> 00:08:36.590
thirty five.

103
00:08:37.070 --> 00:08:41.870
This is nothing, but it is the decimal equivalent to this hexadecimal representation.

104
00:08:42.409 --> 00:08:42.830
All right.

105
00:08:43.549 --> 00:08:48.230
For F is equal to sixty five thousand five hundred and thirty five in the decimal form.

106
00:08:49.570 --> 00:08:56.020
So after this initialization, the memory representation of the number and would have all the bits at

107
00:08:56.020 --> 00:08:56.440
one.

108
00:08:57.250 --> 00:09:04.810
All right, then it's a homework for you that to write a macro in your file, but solved attach to write

109
00:09:04.810 --> 00:09:08.230
a macro which can toggle dot and at the bit in the no end.

110
00:09:09.100 --> 00:09:09.550
All right.

111
00:09:10.780 --> 00:09:13.120
So if the bet was zero, it should convert to one.

112
00:09:13.120 --> 00:09:15.490
If the bet was one, it should convert to zero.

113
00:09:16.210 --> 00:09:20.590
Here it is again, any value, which is a power of two.

114
00:09:21.670 --> 00:09:22.150
All right.

115
00:09:22.690 --> 00:09:24.100
So this is a homework for you.

116
00:09:24.910 --> 00:09:33.700
So for example, if I invoke this macro toggle bed with value end, whose binary representation at this

117
00:09:33.700 --> 00:09:42.490
point of time is shown by this diagram and the bet flag that I parsed here, let's suppose it is to

118
00:09:42.490 --> 00:09:43.440
restore the power.

119
00:09:44.200 --> 00:09:44.780
Five.

120
00:09:45.670 --> 00:09:51.940
So it simply means that you are about to toggle the number five and the memory representation of the

121
00:09:51.940 --> 00:09:52.260
number.

122
00:09:52.270 --> 00:10:00.310
And so in this diagram, the fifth bit will be this one, and it should toggle this four to one.

123
00:10:01.300 --> 00:10:01.720
All right.

124
00:10:02.320 --> 00:10:10.390
Then again, if I asked you how to perform the complement of a 16 bit and signing number, so in order

125
00:10:10.390 --> 00:10:17.680
to perform the compliment, you have two ways other you perform the Zahau operation with f f f f r you

126
00:10:17.680 --> 00:10:20.350
simply use tilde operator.

127
00:10:21.550 --> 00:10:29.260
In order to compute the complement of a number and complement means all the bets in the no end would

128
00:10:29.260 --> 00:10:30.160
got tangled.

129
00:10:30.940 --> 00:10:31.420
All right.

130
00:10:33.530 --> 00:10:39.770
So keep all these operations on the bit in mind and ride it safely somewhere, because in the interview,

131
00:10:39.770 --> 00:10:45.500
you will be asked questions which require you to use the combination of these macros in order to solve

132
00:10:45.500 --> 00:10:46.100
the problem.

133
00:10:47.630 --> 00:10:48.110
All right.

134
00:10:50.030 --> 00:10:54.860
And another thing is that that bit operations are most frequently asked questions and their interviews.

135
00:10:54.860 --> 00:10:56.810
So this is a very important lecture.

136
00:10:57.440 --> 00:10:59.780
So following this lecture we do is an assignment.

137
00:10:59.930 --> 00:11:07.700
I have prepared a good amount of questions on bet operations and you are required to solve all those

138
00:11:07.700 --> 00:11:13.670
questions that will give you a hands-on on how to do questions, which involves bit level programming.

139
00:11:15.280 --> 00:11:20.050
Some of these questions are the questions which are frequently asked in the interviews, so do the assignment

140
00:11:20.050 --> 00:11:22.240
religiously that follows this lecture radio.

