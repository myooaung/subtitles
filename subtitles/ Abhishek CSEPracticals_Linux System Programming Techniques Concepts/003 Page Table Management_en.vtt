WEBVTT
1
00:00:05.280 --> 00:00:06.770
So welcome back, guys.

2
00:00:07.290 --> 00:00:14.010
Now, continuing with the discussion of mamady management in case of multithreaded process and this

3
00:00:14.010 --> 00:00:20.910
lecture video, we're going to focus on the management of beds, tables of a process when a process

4
00:00:20.910 --> 00:00:27.660
create a new thread so you can see you have a process of virtual memory snapshot on the left hand side

5
00:00:27.660 --> 00:00:28.680
and the right hand side.

6
00:00:29.580 --> 00:00:36.180
The virtual memory snapshot on the left hand side is a snapshot of a process in execution, whereas

7
00:00:36.180 --> 00:00:42.570
virtual memory snapshot on the right hand side is a snapshot when the process has actually created a

8
00:00:42.570 --> 00:00:43.280
new trend.

9
00:00:44.550 --> 00:00:51.240
So not that we are talking about the same process be and virtual memory snapshot on the right hand side

10
00:00:51.750 --> 00:00:54.630
will be the snapshot of the virtual memory of A process.

11
00:00:54.630 --> 00:00:57.840
B, then the process B has created a new trend.

12
00:00:58.890 --> 00:01:05.459
The second diagram is not a separate virtual memory, but it is a snapshot or instance of a virtual

13
00:01:05.459 --> 00:01:08.910
memory when the process B has created a new trend.

14
00:01:09.750 --> 00:01:15.540
Now we already know that process virtual space is fragmented into virtual pages.

15
00:01:16.230 --> 00:01:23.160
So you can see when the process was executing and and when it did not create any thread, then you can

16
00:01:23.160 --> 00:01:28.820
see that following will be the fragmentation of the virtual memory of the process being right.

17
00:01:29.370 --> 00:01:33.960
This part of the virtual memory of the process B was not used.

18
00:01:34.740 --> 00:01:41.550
But since the process has now created a new tragedy, therefore there will be two additional virtual

19
00:01:41.550 --> 00:01:43.230
pages that will be used.

20
00:01:43.910 --> 00:01:49.260
Those virtual pages will be the virtual piece, number 13 and virtual page number 12.

21
00:01:51.640 --> 00:01:59.240
So this word just corresponds to the additional STAC memory that will be used by a newly created threat.

22
00:01:59.800 --> 00:02:07.270
Now, when the process had not created a threat, then following is the representation of a stable of

23
00:02:07.270 --> 00:02:08.139
A process B.

24
00:02:10.169 --> 00:02:18.510
Now, this acts denote any frame number, so you can see that virtual page number from zero to five

25
00:02:18.510 --> 00:02:22.970
of A Process B maps to the corresponding physical page number.

26
00:02:23.220 --> 00:02:29.690
And let us assume that these physical pages are loaded in some frames in the main memory.

27
00:02:30.450 --> 00:02:33.780
Now, which frame in the main memory is not important.

28
00:02:34.080 --> 00:02:38.730
This X does denote some relevant frame number of the main memory.

29
00:02:40.900 --> 00:02:47.860
And since after virtual page number five, no more virtual pages has been allocated to the process.

30
00:02:48.550 --> 00:02:56.820
So you can see that the page table entries corresponding to virtual page number from six to 13 are empty.

31
00:02:57.400 --> 00:02:57.780
Right.

32
00:02:58.090 --> 00:02:59.620
So these are empty.

33
00:03:02.040 --> 00:03:04.290
And corresponding to the virtual page No.

34
00:03:04.290 --> 00:03:12.650
P 14 and 15, which is used as a stack memory for the execution of a process, we have page table entries,

35
00:03:13.290 --> 00:03:13.720
right.

36
00:03:14.130 --> 00:03:21.210
So this is the page table description of A Process B in execution when the process B had not created

37
00:03:21.210 --> 00:03:22.050
any thread.

38
00:03:23.220 --> 00:03:28.800
Now let us discuss what will be the modification in the Pens table of a process P one.

39
00:03:28.800 --> 00:03:30.480
It had created a new thread.

40
00:03:31.080 --> 00:03:37.440
Now, on the right hand side is the snapshot of the virtual memory of A Process B after third creation.

41
00:03:38.190 --> 00:03:43.020
So forming is the best table of A process B after creation.

42
00:03:43.890 --> 00:03:49.560
Now, can you spot the difference between earlier page table and the second page table?

43
00:03:51.120 --> 00:03:58.020
The only difference that you can see is that in the second page table, there are two additional entries

44
00:03:58.020 --> 00:04:04.950
corresponding to virtual page number 12 and virtual page number 13, because these two virtual pages

45
00:04:04.950 --> 00:04:12.900
were assigned by the operating system to a process B to be used as a stack memory for the execution

46
00:04:12.900 --> 00:04:13.790
of a new trend.

47
00:04:14.910 --> 00:04:20.910
So corresponding to these virtual pages, physical pages are created and loaded in some frame number

48
00:04:21.750 --> 00:04:22.710
in mind memory.

49
00:04:24.160 --> 00:04:31.330
Other than that, there is no difference between the two page table snapshots, no, but these are not

50
00:04:31.330 --> 00:04:31.790
different.

51
00:04:31.790 --> 00:04:37.470
This table, the second table is the updated version of the first page table.

52
00:04:37.480 --> 00:04:41.290
That is when the Brussels B has created a new thread.

53
00:04:41.560 --> 00:04:46.800
Then how the page table would look like that is represented by the second page table.

54
00:04:47.860 --> 00:04:54.310
So you can see that there is only one page table to be used by a thread as well as the process.

55
00:04:54.640 --> 00:05:00.580
If the process creates more number of threads than those additional threads will continue to access

56
00:05:00.580 --> 00:05:01.840
the same page table.

57
00:05:03.220 --> 00:05:08.200
A thread can access any address that belongs to this piece table.

58
00:05:08.500 --> 00:05:15.430
Of course, the exception is that that a thread should not access watcha pages that belong to the stack

59
00:05:15.460 --> 00:05:18.040
memory of other threads or process.

60
00:05:18.730 --> 00:05:24.730
So it means that a newly created thread must not exist anywhere to an address that belongs to the virtual

61
00:05:24.730 --> 00:05:26.560
page number 14 and 15.

62
00:05:27.160 --> 00:05:33.610
And similarly, a process B must not access any virtual address that belong to the virtual page number

63
00:05:33.610 --> 00:05:35.190
12 and 13.

64
00:05:35.920 --> 00:05:41.520
The reason being that stuck memory is private to a process or a threat.

65
00:05:42.790 --> 00:05:49.900
Otherwise, you can see that a threat or a process can access any virtual address that belongs to any

66
00:05:50.140 --> 00:05:53.710
valid virtual page number that is assigned to a process.

67
00:05:55.070 --> 00:06:02.390
So now let us summarize what we have just learned, so a newly created thread shares the same virtual

68
00:06:02.390 --> 00:06:04.860
memory as that of a patent process.

69
00:06:05.480 --> 00:06:12.800
There is absolutely no separate virtual memory that is created exclusively for a new threat, a new

70
00:06:12.800 --> 00:06:15.010
threat, access the same page table.

71
00:06:15.090 --> 00:06:19.420
Also, there is no new space to be created for a new threat.

72
00:06:20.510 --> 00:06:28.760
Now, let us suppose that a tragedy performs some right operation at virtual Atlas V with this virtual

73
00:06:28.760 --> 00:06:34.680
Atlas V belongs to the Heap segment or data segment of a process virtual space.

74
00:06:35.600 --> 00:06:40.940
Now, some changes are visible to any other thread or process.

75
00:06:41.270 --> 00:06:41.710
Right.

76
00:06:42.050 --> 00:06:47.990
And the reason is that there is only one page table which is shared by all the threads and apparent

77
00:06:47.990 --> 00:06:48.650
process.

78
00:06:50.240 --> 00:06:56.600
So any modification that is made to the Heap's segment or a segment of our process watch all across

79
00:06:56.600 --> 00:07:02.300
the space, that modification will be visible to all of the threads are process.

80
00:07:03.110 --> 00:07:10.580
Virtual pages, which belongs to New Trad's tech memory, are created upon creation of new thread and

81
00:07:10.580 --> 00:07:17.570
corresponding physical pages are created by the operating system and are loaded in some frame number

82
00:07:17.570 --> 00:07:25.640
in the main memory as per the page replacement algorithm that shares the same piece table as that of

83
00:07:25.640 --> 00:07:34.910
a patent process be except new virtual pages to physical pages mapping that is created for new tech

84
00:07:34.910 --> 00:07:36.520
memory for a new trend.

85
00:07:36.920 --> 00:07:37.320
Right.

86
00:07:37.760 --> 00:07:44.510
So we already saw that when a new threat is created, operating system create new virtual pages as well

87
00:07:44.510 --> 00:07:47.660
as new physical pages for the new threat.

88
00:07:49.500 --> 00:07:57.960
And the mapping between these two new virtual pages to physical pages is updated in the midst of a process.

