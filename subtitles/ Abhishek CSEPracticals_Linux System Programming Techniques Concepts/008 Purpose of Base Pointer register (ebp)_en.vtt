WEBVTT
1
00:00:06.280 --> 00:00:12.530
So, guys, now let us try to understand that what is the significance and use of baseball to register?

2
00:00:13.810 --> 00:00:17.650
We very well understand the use of IP and speed as a start.

3
00:00:17.650 --> 00:00:22.790
But what actually is register why it is that and what is the use of this register?

4
00:00:23.320 --> 00:00:27.880
So from the previous example, we have the stack of function as shown here.

5
00:00:30.330 --> 00:00:30.700
Right.

6
00:00:30.870 --> 00:00:37.440
So it means that the function is currently executing and in the stack memory, the falling stock frame

7
00:00:37.440 --> 00:00:40.650
of the function F is already priced into the stack memory.

8
00:00:41.740 --> 00:00:49.300
So you can see that by definition, the value of this point to register is 60 because here at 60, the

9
00:00:49.300 --> 00:00:52.490
best point to register the value of the function is saved.

10
00:00:53.200 --> 00:00:59.220
And of course, the value of stack pointer register is always points to the bottom of the stack memory.

11
00:00:59.800 --> 00:01:07.300
So when the frame is an execution, SBP register value is used as a reference by the function to access

12
00:01:07.300 --> 00:01:10.450
all local variables and local arguments of the frame.

13
00:01:10.900 --> 00:01:11.240
Right.

14
00:01:11.740 --> 00:01:18.040
So when the function executes, it has to access its local variables as well as the arguments which

15
00:01:18.040 --> 00:01:20.020
aspires to the function by the caller.

16
00:01:20.890 --> 00:01:28.360
So as I mentioned here, this point, the register is used as a reference to access all local variables

17
00:01:28.360 --> 00:01:32.480
and local arguments of the current frame, which is in execution.

18
00:01:33.010 --> 00:01:35.950
So let's start to understand this with the help of an example.

19
00:01:36.400 --> 00:01:40.060
You can see here that the best point registered value is sixty.

20
00:01:41.080 --> 00:01:47.980
So SBP plus zero, that is the content of SBP Register is actually the address where Collard's base

21
00:01:47.980 --> 00:01:49.510
point to value saved.

22
00:01:49.990 --> 00:01:56.620
So accessing the value which is stored at address is stored in EBP register will give you it before.

23
00:01:58.540 --> 00:02:03.220
Right, which is the address where Class-Based Point, the registered value is saved.

24
00:02:03.880 --> 00:02:09.039
Now if you add four to this SBP registered value, you will get the atmosphere.

25
00:02:09.039 --> 00:02:15.610
Carlos next instruction address is stored, so 60 plus four will give you a sixty four.

26
00:02:15.610 --> 00:02:22.570
It means that by adding food to the registered value of BP, you will get the address of the instruction

27
00:02:22.750 --> 00:02:27.670
from which the caller needs to resume its execution when it returns.

28
00:02:28.210 --> 00:02:34.360
Now, if you add it to this base point, the registered value, you will get the address where argument

29
00:02:34.360 --> 00:02:37.090
one is saved in the stack mummery.

30
00:02:37.390 --> 00:02:38.350
That is 60 plus.

31
00:02:38.350 --> 00:02:42.640
It will give you sixty eight and sixty eight is the address of that argument.

32
00:02:42.640 --> 00:02:46.210
One function if two is stored in the stack memory.

33
00:02:46.750 --> 00:02:52.240
Similarly, you can get the address of your argument too is saved in the stack memory.

34
00:02:52.810 --> 00:02:58.630
Similarly, if you subtract from this point the registered value, you will get the address of local

35
00:02:58.630 --> 00:03:00.440
variables of the current function.

36
00:03:01.000 --> 00:03:07.090
So how do you get the address of local variable whereto because 60 minus one, which will give you fifty

37
00:03:07.090 --> 00:03:10.810
six or fifty six, is the address of local variable value.

38
00:03:11.230 --> 00:03:17.710
Similarly, if you subtract it, you will get the address where local variable where one is stored in

39
00:03:17.710 --> 00:03:18.490
the stack memory.

40
00:03:19.030 --> 00:03:25.960
So you can see that C.P.U accesses all of the data of current stack frame in execution through SBP registered

41
00:03:25.960 --> 00:03:31.300
value thus far a frame to execute its instructions.

42
00:03:31.600 --> 00:03:34.090
SBP value must be set correctly.

43
00:03:34.660 --> 00:03:41.680
SBP by definition is the address where at this point that address is saved in the stack frame.

44
00:03:42.010 --> 00:03:46.600
And remember, the best pointer is also called as frame pointer.

45
00:03:47.710 --> 00:03:55.680
So when call returns, caller must restore the value of SBP register to point to location where callers

46
00:03:55.680 --> 00:03:59.740
scholars based pointer address is stored in the stack frame.

47
00:04:00.160 --> 00:04:06.400
So we will going to understand this point when we were going to have a detailed discussion on understanding

48
00:04:06.400 --> 00:04:09.340
the mechanism how cauli function returns.

