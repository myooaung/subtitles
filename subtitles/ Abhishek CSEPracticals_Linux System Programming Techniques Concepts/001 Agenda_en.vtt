WEBVTT
1
00:00:05.720 --> 00:00:12.050
So, guys, welcome back in this section, we will going to study in detail the memory management and

2
00:00:12.050 --> 00:00:14.790
Linux, so let us go through the agenda.

3
00:00:15.920 --> 00:00:20.960
So in this section, we will going to study memory management and Linux on two fronts.

4
00:00:21.530 --> 00:00:28.420
We are going to study how memory is managed by the operating system, and we will study that how heap

5
00:00:28.430 --> 00:00:32.509
memory of a running process is managed by by the operating system.

6
00:00:33.110 --> 00:00:39.560
So when it comes to the stack memory, the stack memory plays a vital role when a procedure is called

7
00:00:39.710 --> 00:00:41.720
and when a processor is returned.

8
00:00:42.410 --> 00:00:47.360
So suppose you have a function one and support function one makes a call to the function too.

9
00:00:47.810 --> 00:00:53.570
So this is called procedure call and then function to complete its execution.

10
00:00:53.570 --> 00:00:58.130
And when it returns to function one function, one presumes its execution.

11
00:00:58.400 --> 00:00:59.960
This is called procedure return.

12
00:01:00.770 --> 00:01:05.740
So please know that procedure call and procedure return is supported by the stack memory.

13
00:01:06.470 --> 00:01:11.750
So it is the stack memory which makes the procedure, call and procedure a written possible.

14
00:01:13.700 --> 00:01:20.060
So we will see that stack memory management is done when a procedure is called and when a procedure

15
00:01:20.060 --> 00:01:28.700
is written, when it comes to the memory, the heat memory plays a vital role in locating a memory to

16
00:01:28.700 --> 00:01:32.670
a process and allocating a memory from a process.

17
00:01:33.230 --> 00:01:39.020
So we already know that a process invokes Maalox and some call in order to claim the memory from the

18
00:01:39.020 --> 00:01:39.880
operating system.

19
00:01:40.430 --> 00:01:47.300
And contrary to this, a process makes a call to the filesystem call in order to release a memory back

20
00:01:47.300 --> 00:01:48.350
to the operating system.

21
00:01:49.250 --> 00:01:51.130
So who will go on to study in detail?

22
00:01:51.260 --> 00:01:58.130
That whole operating system manages the memory process, request the memory from the operating system,

23
00:01:58.130 --> 00:02:04.790
using mallock, using mallock or similar system calls, and how operating system keeps a track of all

24
00:02:04.790 --> 00:02:11.210
the memory that is assigned to a process and how operating system actually releases the memory back

25
00:02:11.210 --> 00:02:14.260
to the memory region going forward.

26
00:02:14.600 --> 00:02:19.420
The concepts like paging demand, paging, et cetera, are out of the scope of this course.

27
00:02:19.940 --> 00:02:24.680
So you should check the operating system cause for this purpose, right?

28
00:02:25.430 --> 00:02:32.480
We will only going to focus on the science behind memory management when the process is in a state of

29
00:02:32.630 --> 00:02:37.430
execution and therefore we have a splitted this module into two parts.

30
00:02:37.610 --> 00:02:43.170
First, we will going to study the stack memory management and after that we will going to study, hyp

31
00:02:43.220 --> 00:02:44.220
memory management.

32
00:02:44.750 --> 00:02:49.760
Also note that this topic of discussion is of great importance from interview perspective.

33
00:02:50.420 --> 00:02:56.840
Asking the question on memory management in Linux is one of the most favorite and pet questions that

34
00:02:56.840 --> 00:02:58.550
is asked in the interviews.

35
00:02:59.430 --> 00:03:05.610
And if you really are putting forth system programming jobs in the domain of Linux system programming

36
00:03:05.610 --> 00:03:12.330
are driver programming or kernel programming, then it is not possible that you are not asked a question

37
00:03:12.330 --> 00:03:13.080
on this topic.

