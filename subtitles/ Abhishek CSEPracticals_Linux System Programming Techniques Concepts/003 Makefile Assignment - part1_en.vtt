WEBVTT
1
00:00:05.660 --> 00:00:11.960
So, guys, we will going to discuss one example using which we will going to learn how to write our

2
00:00:11.960 --> 00:00:13.090
very first big file.

3
00:00:13.790 --> 00:00:19.530
So you need to go to this direct report that is Liberdade designing slash makefile assignment.

4
00:00:19.970 --> 00:00:26.030
So on this slide, I have shown the directory structure, which is present inside the directory makefile

5
00:00:26.060 --> 00:00:26.750
assignment.

6
00:00:27.650 --> 00:00:31.970
So you can see that this directory intown contains three other directories.

7
00:00:31.970 --> 00:00:37.810
That is that is Common Matha directory, complex math directory and trig math victory.

8
00:00:38.600 --> 00:00:42.460
You have three other directories inside Makefile assignment directory.

9
00:00:42.830 --> 00:00:43.240
Right.

10
00:00:43.760 --> 00:00:48.560
And along with this directress, you have one source file called Endorsee.

11
00:00:49.100 --> 00:00:52.220
And this source file, the main function is implemented.

12
00:00:52.520 --> 00:00:58.280
And because we have a source file in which main function is implemented, it is desirable that we need

13
00:00:58.280 --> 00:00:59.870
to create an executable.

14
00:01:00.320 --> 00:01:06.860
And inside the same directory we have a make file and it is this make file that we need to right now.

15
00:01:06.860 --> 00:01:12.830
If you look at each of these directories that is inside the directory common underscore, Matt, you

16
00:01:12.830 --> 00:01:14.750
have one source file and had a file.

17
00:01:15.140 --> 00:01:22.040
Now I urge you to open this common underscore math doxie source file and see that I have really implemented

18
00:01:22.040 --> 00:01:28.130
very obvious mathematical functions, such as add, subtract, multiply or divide two numbers.

19
00:01:29.720 --> 00:01:35.450
In fact, I can show you one of the source file so you can see that inside the source file.

20
00:01:35.450 --> 00:01:37.880
I have simply implemented these functions.

21
00:01:38.660 --> 00:01:39.050
Right.

22
00:01:39.680 --> 00:01:46.580
Similarly, if you go and open complex underscore Mathlouthi file, you will find very simple functions

23
00:01:46.580 --> 00:01:48.770
to add or subtract to complex numbers.

24
00:01:49.370 --> 00:01:52.280
Similarly, under the directory tree underscore math.

25
00:01:53.030 --> 00:01:56.540
There is a file click, underscore math, dot see and underscore math.

26
00:01:56.540 --> 00:02:02.120
Not at this source file implements very obvious trigonometric functions.

27
00:02:02.870 --> 00:02:10.190
So if you just have a quick look in each of these sorts file, you will be able to understand the functionality

28
00:02:10.190 --> 00:02:12.020
provided each of these source file.

29
00:02:13.190 --> 00:02:16.980
So our goal is to understand how to write this particular make file.

30
00:02:17.600 --> 00:02:23.930
This makefile will create an executable as well as a library which is required to create an executable.

31
00:02:24.800 --> 00:02:32.300
So our ultimate goal as a part of this assignment is to write this particular make file and this makefile

32
00:02:32.300 --> 00:02:36.740
will take and input the source file and had a file that we have.

33
00:02:37.220 --> 00:02:43.220
So you can see that we have common underscore maddog source file complex underscore math, tazi source

34
00:02:43.220 --> 00:02:49.240
file and trig underscore math dot seesaws file along with main source file.

35
00:02:50.000 --> 00:02:50.410
Right.

36
00:02:50.570 --> 00:02:53.350
And we also have the corresponding header files.

37
00:02:54.350 --> 00:03:00.830
So this source file and files is the raw material which is taken as an input by this makefile, and

38
00:03:00.830 --> 00:03:03.620
eventually we will going to create one executable.

39
00:03:04.400 --> 00:03:06.290
Why are we creating an executable?

40
00:03:06.290 --> 00:03:10.430
Because we have a source file may not see in which there is a main function.

41
00:03:11.120 --> 00:03:15.440
Whenever you have a source file in which there is a main function, it means that you need to create

42
00:03:15.440 --> 00:03:20.510
an executable because the execution of the executable starts from mean.

43
00:03:21.440 --> 00:03:28.400
And the second end product that we need to create is a library called Licalsi, not a this library will

44
00:03:28.400 --> 00:03:35.120
going to encapsulate all the mathematical functionalities that is provided by government, underscore

45
00:03:35.120 --> 00:03:41.860
my orthodoxy, source file complex, underscore matador's seesaws file and trache, underscore my orthodoxy

46
00:03:41.880 --> 00:03:42.480
source file.

47
00:03:42.920 --> 00:03:49.130
So we were going to have a library which will going to provide a developer all the mathematical functionalities

48
00:03:49.370 --> 00:03:50.270
that we have.

49
00:03:51.340 --> 00:03:57.790
So now let us discuss that, how does the department's history of Flip considered a static liablity,

50
00:03:57.790 --> 00:04:01.230
would look like so going forward?

51
00:04:01.660 --> 00:04:07.660
So let us suppose that we want to create a library, Licalsi today, which will be a collection of all

52
00:04:07.660 --> 00:04:12.050
mathematical functions defined in all the source file that we have.

53
00:04:13.060 --> 00:04:18.430
So the final dish of the delicious meal that we will going to prepare is the Licalsi Dorte.

54
00:04:19.300 --> 00:04:24.880
Now, going by the analogy of a delicious meal, what are the prerequisite components which is required

55
00:04:24.880 --> 00:04:26.400
to prepare lipgloss?

56
00:04:26.470 --> 00:04:28.120
It's not a static library.

57
00:04:28.750 --> 00:04:33.420
Now we know that we create a library out of all the object files.

58
00:04:34.000 --> 00:04:41.080
So here we need all the object files as a prerequisite component in order to prepare Licalsi, not a

59
00:04:41.170 --> 00:04:42.280
static library.

60
00:04:45.590 --> 00:04:52.460
So liabilities are created out of object files of source funds and of course, the object files are

61
00:04:52.460 --> 00:04:55.750
created out of source files, right.

62
00:04:56.510 --> 00:05:02.000
So you can see that the dependency tree to prepare Licalsi, not a static library, is pretty much simple

63
00:05:02.000 --> 00:05:04.190
and straightforward, right.

64
00:05:07.190 --> 00:05:13.340
We have source file at the bottom level of this dependency tree from the source file, we will going

65
00:05:13.340 --> 00:05:19.460
to create object files and once we have all the object files, then we will be in the position to create

66
00:05:19.460 --> 00:05:21.830
our final static library.

67
00:05:21.830 --> 00:05:23.120
Licalsi dot a.

68
00:05:24.610 --> 00:05:31.690
So let us discuss step by step, how can we write Makefile in order to create our final dish that is

69
00:05:31.960 --> 00:05:35.530
Licalsi dot a static library as an end product.

