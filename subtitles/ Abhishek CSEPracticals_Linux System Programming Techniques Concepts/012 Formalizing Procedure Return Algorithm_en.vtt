WEBVTT
1
00:00:05.670 --> 00:00:13.710
So, guys, now let us formally describe the procedure written algorithm calling function F redounds

2
00:00:13.710 --> 00:00:16.920
the following steps takes place in the given sequence.

3
00:00:17.490 --> 00:00:23.580
So in the first step, the function set the return value of the COLLY in the extra.

4
00:00:24.660 --> 00:00:27.600
Now, this is something new, which we did not discussed earlier.

5
00:00:28.620 --> 00:00:35.940
Now X Register is a special register which is used to store the value which is written by the function.

6
00:00:36.540 --> 00:00:42.600
So suppose you have a call function, suppose in full and suppose this function return six.

7
00:00:43.980 --> 00:00:50.250
Right, so the value which is written by this function that is six will be saved in the special register

8
00:00:50.250 --> 00:00:57.840
called Extra Register, when the code of function resumes its execution, the color function reads the

9
00:00:57.840 --> 00:01:04.200
value of X register in order to obtain the value returned by the function.

10
00:01:04.920 --> 00:01:12.000
So remember, X Register is a special register which is dedicated to store the value written by the

11
00:01:12.300 --> 00:01:12.840
function.

12
00:01:14.370 --> 00:01:20.310
So when the calling function returns, the first thing that the calling function does is to set its

13
00:01:20.310 --> 00:01:23.520
return value into the X register.

14
00:01:24.770 --> 00:01:32.540
Then in the second step function, increase the stack pointer by the amount equal to size of all local

15
00:01:32.540 --> 00:01:34.660
variables of the frame, right?

16
00:01:34.970 --> 00:01:40.970
So this really is the local stack memory, which is assigned to the local variables of the quality function.

17
00:01:42.510 --> 00:01:48.330
In other words, we are freeing up the stack memory, which was occupied by all the local variables

18
00:01:48.330 --> 00:01:49.470
of the quality function.

19
00:01:50.780 --> 00:01:57.920
Then in the third step, the calling function restored the content of base point to register such that

20
00:01:57.920 --> 00:02:03.320
the best point to register stores, the address of callers stack frame.

21
00:02:03.800 --> 00:02:04.220
Right.

22
00:02:04.640 --> 00:02:12.110
And after doing this, the calling function pop out the previous frames based pointer from the stack

23
00:02:12.110 --> 00:02:12.590
mummery.

24
00:02:12.890 --> 00:02:19.280
Once the caller base pointer is restored in the base pointer, register with then pop out the base pointer

25
00:02:19.280 --> 00:02:23.830
value which is stored in Cawley's stack frame using pop operation.

26
00:02:24.620 --> 00:02:30.860
Then in the step four, we simply restored the value of instruction point to register to point to the

27
00:02:30.860 --> 00:02:31.910
return address.

28
00:02:33.650 --> 00:02:40.880
Now, not that return address was saved in the stack frame, right, and after copping this return address

29
00:02:40.880 --> 00:02:47.120
until the instruction point, the register will simply pop this return address from the Stack Mummery.

30
00:02:48.040 --> 00:02:54.400
So as soon as we copy the return address value into the instruction point to register, we give the

31
00:02:54.400 --> 00:03:00.920
control back to the calling function and this is achieved by the following assembly code.

32
00:03:01.720 --> 00:03:07.900
So once the return address of the call function is restored in the instruction point to register, we

33
00:03:07.900 --> 00:03:15.850
then pop out the safe return address from the memory and now in step four, since we have given the

34
00:03:15.850 --> 00:03:18.310
control back to the calling function.

35
00:03:18.490 --> 00:03:25.720
So henceforth it is the responsibility of the function to pop out all the arguments that it has passed

36
00:03:25.900 --> 00:03:29.580
onto the stack memory when it invoked the quali function.

37
00:03:29.980 --> 00:03:38.740
And finally the function reads the value which is stored in X register and resume its execution from

38
00:03:39.130 --> 00:03:41.280
the immediate next instruction.

39
00:03:41.680 --> 00:03:47.320
The address of the immediate next instruction can be obtained by adding one to the instruction point

40
00:03:47.320 --> 00:03:48.010
to register.

41
00:03:48.670 --> 00:03:51.420
So you can see that this is how procedures are written.

42
00:03:51.430 --> 00:03:55.200
Algorithm can be described as a six step algorithm.

43
00:03:55.870 --> 00:04:02.200
So in step three, we restore the value of base pointer register and step number four, we restore the

44
00:04:02.200 --> 00:04:06.520
value of instruction pointer register and the value of.

45
00:04:07.420 --> 00:04:14.050
Stack pointer register is restored automatically after popping out all the arguments that was passed

46
00:04:14.200 --> 00:04:17.050
into the Cawley's start frame by the caller.

