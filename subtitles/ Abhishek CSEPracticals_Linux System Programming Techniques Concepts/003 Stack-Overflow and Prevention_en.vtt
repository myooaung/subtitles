WEBVTT
1
00:00:05.880 --> 00:00:07.350
So welcome back, guys.

2
00:00:07.380 --> 00:00:10.550
Next, we will going to discuss the concept of stack overflow.

3
00:00:11.130 --> 00:00:17.220
So actually it is not a concept, but it is an Arab condition and we will see that when this condition

4
00:00:17.220 --> 00:00:17.670
happen.

5
00:00:18.720 --> 00:00:24.870
So if you write a program such that there is a long chain of function calls, you can cause stack overflow.

6
00:00:25.740 --> 00:00:31.860
So stack overflow is a situation when program stack grows beyond the maximum stack size.

7
00:00:32.460 --> 00:00:39.600
So you can see in this example, suppose you write a program such that the program causes chain of function

8
00:00:39.600 --> 00:00:40.200
calls.

9
00:00:40.980 --> 00:00:48.690
Now, if this chain of function calls happen to grow such that it crosses the maximum stack size limit,

10
00:00:48.990 --> 00:00:52.320
then that condition will be called as stack overflow.

11
00:00:53.850 --> 00:01:01.020
So recursive functions often cause stack overflow, so you can see that if you happen to write a recursive

12
00:01:01.020 --> 00:01:09.960
function and if that particular recursive function happens to bloat that stack memory such that that

13
00:01:09.960 --> 00:01:16.230
the call stack grows beyond the maximum stack size limit, then those recursive functions can cause

14
00:01:16.230 --> 00:01:17.230
stack overflow.

15
00:01:18.540 --> 00:01:24.660
So it is for this reason that you are strongly discouraged to write any recursive function in the industry

16
00:01:25.500 --> 00:01:32.670
to see STAC memory maximum size on your machine, just run the command limit minus S and it will show

17
00:01:32.670 --> 00:01:34.880
you the stack memory in megabytes.

18
00:01:36.240 --> 00:01:38.040
So keep this stack overflow.

19
00:01:38.040 --> 00:01:39.300
Tom in mind.

20
00:01:39.300 --> 00:01:46.110
You can be asked straight away to explain what is a stack overflow and when does this happen.

21
00:01:47.820 --> 00:01:50.640
And what can you do to prevent a stack overflow?

22
00:01:51.940 --> 00:01:54.590
So in order to prevent stack overflow.

23
00:01:54.700 --> 00:01:58.390
One solution is that that you should not write recursive function.

24
00:01:59.170 --> 00:02:06.970
Another thing that can cause a stack overflow is that that the declaration of large arrays, for example,

25
00:02:06.970 --> 00:02:14.830
if you try to declare an array within R function and let the size of the Adibi six six two thousand

26
00:02:14.830 --> 00:02:15.400
bytes.

27
00:02:16.450 --> 00:02:23.520
So remember, now we understand that any local vegetable or local area occupies that space in the stack

28
00:02:23.650 --> 00:02:25.070
frame of that function.

29
00:02:25.570 --> 00:02:31.300
So you have to start over consuming six thousand bytes, meaning that the stack frame of the function

30
00:02:31.300 --> 00:02:36.220
in which this area is declared will be at least six thousand bytes.

31
00:02:38.180 --> 00:02:45.380
So this increases the chances for the stack mamady to completely exhausted and cause stack overflow.

32
00:02:48.090 --> 00:02:53.920
So in the industry, you are not allowed to create these large AdÃ¨s within a function.

33
00:02:54.840 --> 00:03:00.660
So now we have to point out that what you should do in order to prevent stack overflow first, do not

34
00:03:00.660 --> 00:03:01.840
write recursive function.

35
00:03:02.010 --> 00:03:06.960
Second, do not declare do not declare large local areas within a function.

