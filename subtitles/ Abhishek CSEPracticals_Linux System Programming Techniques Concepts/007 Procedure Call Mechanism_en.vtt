WEBVTT
1
00:00:05.810 --> 00:00:07.100
So welcome back, guys.

2
00:00:07.490 --> 00:00:12.980
Now let us discuss one complete example which illustrates the concept and mechanism of procedure.

3
00:00:12.980 --> 00:00:15.010
Call through this example.

4
00:00:15.020 --> 00:00:20.690
We will understand the role of all these three registers that we just discussed and how these three

5
00:00:20.690 --> 00:00:24.140
register makes the procedure call mechanism feasible.

6
00:00:25.280 --> 00:00:30.790
So let us suppose that in our example, we have three functions function F one in walks, function F

7
00:00:30.800 --> 00:00:32.990
two, function afta to walks, function after.

8
00:00:33.650 --> 00:00:40.760
So here you can see that we have a function F one and function F one invokes the function after you

9
00:00:40.760 --> 00:00:47.020
can see that the address of the instruction which invokes the function F two is one zero zero two.

10
00:00:47.060 --> 00:00:48.620
That is hexadecimal when you.

11
00:00:50.400 --> 00:00:56.160
Similarly, you have function afta and inside this function, after you have certain computations and

12
00:00:56.160 --> 00:01:03.030
eventually function AFTA invokes function F three using instruction, using instruction whose address

13
00:01:03.030 --> 00:01:04.620
is two zero zero four.

14
00:01:06.060 --> 00:01:09.300
So remember, every instruction also has to address.

15
00:01:10.740 --> 00:01:16.200
And finally, we have a function three which do not involve any other function and it just perform its

16
00:01:16.200 --> 00:01:17.940
local computation and returns.

17
00:01:18.780 --> 00:01:25.860
So now let us discuss that at the instant when function F one was executing, how was it a stack frame

18
00:01:25.860 --> 00:01:26.660
looked like?

19
00:01:27.090 --> 00:01:31.230
So you can see in this diagram I have shown the stack frame of the function F one.

20
00:01:31.620 --> 00:01:37.020
The numbers which are written on the left hand side actually represents the address of the stack memory,

21
00:01:37.230 --> 00:01:38.820
which decreases downwards.

22
00:01:39.150 --> 00:01:39.570
Right.

23
00:01:40.410 --> 00:01:45.630
And you can see that in this stack frame of function, one, we have first pushed the arguments of the

24
00:01:45.630 --> 00:01:47.370
function, one in the reverse order.

25
00:01:48.270 --> 00:01:51.250
Then we have the return address of the function zero.

26
00:01:51.450 --> 00:01:54.930
Now let us suppose that function zero is the color of the function one.

27
00:01:55.680 --> 00:02:01.740
And the next thing that is installed in the stack memory of frame F one is the best pointer of the value

28
00:02:01.740 --> 00:02:03.820
of the function, which is function zero.

29
00:02:04.680 --> 00:02:10.560
And finally, in this stack frame of function F1, we have the local variables of function F one.

30
00:02:11.920 --> 00:02:17.920
So you can see that this diagram actually represents the complete stack frame of the function EF1 one

31
00:02:18.250 --> 00:02:20.260
function F one was an execution.

32
00:02:21.310 --> 00:02:26.970
So EIB, that is the register which sterols the address of the executed construction.

33
00:02:27.580 --> 00:02:31.240
So IP is the address of instruction in execution.

34
00:02:31.570 --> 00:02:38.530
Since F1 is currently executing, Hans IP will install the address of instruction which is being executed.

35
00:02:39.510 --> 00:02:44.320
IP keeps on incrementing as subsequent instructions are executed.

36
00:02:44.650 --> 00:02:45.010
Right.

37
00:02:45.250 --> 00:02:49.550
So IP is registered with the address of the instruction which is being executed.

38
00:02:49.930 --> 00:02:55.030
So IP will store the address of this instruction that this instruction than this instruction and so

39
00:02:55.030 --> 00:02:55.340
on.

40
00:02:56.440 --> 00:03:03.280
So when the frame F1 was in a state of execution, the value of IP stores, the address of that instruction

41
00:03:03.280 --> 00:03:04.770
which is currently executed.

42
00:03:05.260 --> 00:03:08.430
But what about the value of SBP and E.S.P?

43
00:03:08.920 --> 00:03:12.010
So remind the definition of SBP and E.S.P.

44
00:03:12.310 --> 00:03:15.250
SBP is a register which stores the address.

45
00:03:16.200 --> 00:03:22.590
Of the current stack frame, their best pointed to the value of the column function was saved.

46
00:03:23.040 --> 00:03:28.820
So you can see in this diagram that the best pointer registered value of the function is saved him.

47
00:03:29.340 --> 00:03:34.130
So what is the address in which this base pointer value is saved that addresses it before?

48
00:03:34.470 --> 00:03:39.930
Therefore, when the function F one was in a state of execution, the value of this pointer register

49
00:03:39.930 --> 00:03:40.840
will be eighty four.

50
00:03:42.030 --> 00:03:43.890
Similarly, apply the definition.

51
00:03:44.220 --> 00:03:48.200
E.S.P is a pointer which always points to the bottom of the stack memory.

52
00:03:48.630 --> 00:03:54.240
Now, at this point of time, the bottommost frame in the stack memory is the stack frame of the function.

53
00:03:54.240 --> 00:03:58.470
EF1 and therefore E.S.P value will be the bottommost address.

54
00:03:58.470 --> 00:04:00.330
That is the Atlas seventy six.

55
00:04:00.870 --> 00:04:06.870
Now let us suppose that the function F one has triggered or invoked the function F to write.

56
00:04:07.080 --> 00:04:13.050
So the address of the instruction which is responsible to invoke the function F two is one zero zero

57
00:04:13.050 --> 00:04:13.380
two.

58
00:04:14.700 --> 00:04:20.610
So when the function F1 invokes the function F to, the very first thing that will happen is to push

59
00:04:20.790 --> 00:04:27.360
the arguments of the function f to understand memory so we can see that we are now setting up the static

60
00:04:27.360 --> 00:04:28.890
frame of the function F two.

61
00:04:29.190 --> 00:04:34.050
And you can see that the very first thing that we have done is to push the arguments of the function

62
00:04:34.050 --> 00:04:36.840
F two in the reverse order in the stack memory.

63
00:04:38.380 --> 00:04:45.080
Now, I will ask one question when the function afterwards invoke what was the value of IP register,

64
00:04:45.940 --> 00:04:46.210
right?

65
00:04:46.570 --> 00:04:52.810
The value of IP register will be one zero zero two because it was this instruction which caused the

66
00:04:52.810 --> 00:04:54.430
invocation of the function F to.

67
00:04:54.880 --> 00:05:00.130
Therefore, the current instruction which was executing is the instruction with address one zero zero

68
00:05:00.130 --> 00:05:00.430
two.

69
00:05:00.790 --> 00:05:03.950
And it has this value which is stored in IP.

70
00:05:04.150 --> 00:05:10.000
So the next thing that we will going to do is to restore the old value of instruction pointer in this

71
00:05:10.000 --> 00:05:11.770
stack frame of function F two.

72
00:05:12.850 --> 00:05:16.460
So here you can see that we have stored one zero zero two.

73
00:05:16.480 --> 00:05:21.340
That is the value of instruction pointer register in the stack memory of frame after.

74
00:05:22.770 --> 00:05:27.710
Now, the next thing is to stir the base point to registered value of the collar function.

75
00:05:28.620 --> 00:05:36.120
Now, at this point of time, SBP Register stauss the atrocity for therefore we will store the caller's

76
00:05:36.120 --> 00:05:39.960
best point of registered value into the stock memory of the frame after.

77
00:05:40.410 --> 00:05:46.630
So we can see that the old value of this point to register that is eighty four is copied into the stack

78
00:05:46.680 --> 00:05:53.790
memory of the frame F2 and now as a final step, local convertible of the current frame will be pushed

79
00:05:53.790 --> 00:05:54.870
into the stack memory.

80
00:05:55.170 --> 00:06:01.290
So let us assume that this represents the local variable of the frame F2 and you can see that the local

81
00:06:01.290 --> 00:06:04.340
variables are the last thing that is pushed into the stack memory.

82
00:06:05.160 --> 00:06:11.100
Now the frame which is at the top of the stack is the frame F2 and we should set up the best to register

83
00:06:11.100 --> 00:06:14.760
value and Stackpole to register value as per the current frame.

84
00:06:15.700 --> 00:06:23.440
So baseball will now going to store 60 because at this address, the caller's base, pointless to value,

85
00:06:23.440 --> 00:06:30.280
is saved in that stack frame of function after so going by the definition based on the register will

86
00:06:30.280 --> 00:06:37.030
be updated to store the address will respond to registered value of the caller function is stored in

87
00:06:37.030 --> 00:06:38.110
the current stack frame.

88
00:06:38.830 --> 00:06:44.440
So it will be updated to 60 because 60 is the address will be able to register.

89
00:06:44.450 --> 00:06:50.320
The value of the caller function is saved in the current stack frame and now the address of the top

90
00:06:50.320 --> 00:06:51.960
of the stack is 52.

91
00:06:52.150 --> 00:06:56.170
Therefore, E.S.P Register will be updated to store the address 52.

92
00:06:56.980 --> 00:07:01.150
So you can see that the green and orange slabs are four byte each.

93
00:07:01.240 --> 00:07:05.410
So you can see this is for Byte and this is for byte on a 32 bit system.

94
00:07:05.890 --> 00:07:12.940
If it was 64 bit system than these green and orange slabs would have been eight bytes.

95
00:07:13.330 --> 00:07:21.100
So green and orange slabs are four byte each and are used to store historical data that is called frames

96
00:07:21.100 --> 00:07:21.930
information.

97
00:07:22.480 --> 00:07:27.790
This information helps the caller to resume its execution when called returns.

98
00:07:28.630 --> 00:07:36.070
So we will see that how the content of Orient and Glena Slab of the function is used by the caller function

99
00:07:36.070 --> 00:07:40.390
to resume its execution when calling function returns.

100
00:07:41.670 --> 00:07:48.780
So when caller invokes the calling function, the current value of SBP and EIP are saved in the stack

101
00:07:48.780 --> 00:07:49.770
frame, right?

102
00:07:49.980 --> 00:07:56.760
So you see that as soon as quality function is involved in the stack frame of the function, we copy

103
00:07:56.760 --> 00:08:01.430
the IP and SBP register values in the stack frame of the calling function.

104
00:08:01.860 --> 00:08:10.710
And as soon as we copy the IP and SBP Register Values, SBP and IP registers are updated as protocol

105
00:08:10.710 --> 00:08:11.600
is a static frame.

106
00:08:11.960 --> 00:08:12.300
Right.

107
00:08:12.480 --> 00:08:18.270
So first we copy the old value of SBP and IP into the stack frame of the function.

108
00:08:18.520 --> 00:08:25.620
And immediately after copying these values, we update these registers with the new values as per the

109
00:08:25.620 --> 00:08:27.410
stack frame of the function.

110
00:08:28.260 --> 00:08:31.230
So to be more clear, let us see one more example.

111
00:08:31.410 --> 00:08:37.059
Suppose the function F to execute and finally execute the instruction to zero zero four.

112
00:08:37.559 --> 00:08:42.840
So as a result of execution of instruction to 004 function, F three will be invoked.

113
00:08:43.230 --> 00:08:49.650
That means now we need to push that static frame of the function F3 into the stack memory so you can

114
00:08:49.650 --> 00:08:54.930
see that first we will push the arguments that is to the function F three to the stack memory.

115
00:08:55.470 --> 00:08:55.830
Right.

116
00:08:57.040 --> 00:09:04.420
Now, when the function after he was involved, IP content was to 004, so Scoppetta content of IP register

117
00:09:04.420 --> 00:09:06.650
and to the stack memory of the function of three.

118
00:09:07.090 --> 00:09:10.360
Next, we need to copy the value of this point to register.

119
00:09:10.690 --> 00:09:14.550
So at this point of time, the best part is to value content 60.

120
00:09:14.920 --> 00:09:18.130
So just copy the value of 60 into the stack frame of the function.

121
00:09:18.250 --> 00:09:18.610
Three.

122
00:09:19.030 --> 00:09:19.380
Right.

123
00:09:20.050 --> 00:09:23.800
And now as a final step, the local variables of the function F3.

124
00:09:24.220 --> 00:09:24.600
Right.

125
00:09:24.850 --> 00:09:31.000
And now we will update the best pointer register value and the stack pointers to value to point to the

126
00:09:31.000 --> 00:09:33.150
new stack frame of the function F3.

127
00:09:33.730 --> 00:09:40.450
So you can see that in this entire mechanism, the value of three registers, that is IPB and E.S.P

128
00:09:40.690 --> 00:09:45.190
keeps on updating as the new stack frame is posted to the stack.

129
00:09:46.150 --> 00:09:51.870
Also, note that the callers SBP IP are saved into the Cawley's stack frame.

130
00:09:52.990 --> 00:09:59.260
And, of course, the E.S.P that always stores the address, which is at the bottom of the stack mummery.

