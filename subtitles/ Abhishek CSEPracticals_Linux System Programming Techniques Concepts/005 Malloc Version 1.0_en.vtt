WEBVTT
1
00:00:05.260 --> 00:00:11.350
So, guys, now we have understood the concept of BRG, and as we are getting some calls now, we are

2
00:00:11.350 --> 00:00:17.360
in a position that we can now try out the most basic implementation of Malot function.

3
00:00:18.670 --> 00:00:26.440
So now we know that we use Mallock or Kalac like functions to allocate dynamic memory to our program

4
00:00:26.440 --> 00:00:27.420
from the hip region.

5
00:00:27.760 --> 00:00:28.120
Right.

6
00:00:28.690 --> 00:00:34.850
So Mallock or Kalac are actually not our system calls, but they are functions provided by standard

7
00:00:34.900 --> 00:00:35.630
celebrity.

8
00:00:36.130 --> 00:00:42.760
Now, here, one point to note here is that you should know the difference between system call and a

9
00:00:42.760 --> 00:00:43.690
normal function.

10
00:00:45.220 --> 00:00:47.020
It's OK if you know it.

11
00:00:47.020 --> 00:00:50.050
It's absolutely OK if you do not know it.

12
00:00:50.650 --> 00:00:57.040
We are going to have a discussion on system calls and how do they differ from normal functions later

13
00:00:57.040 --> 00:00:57.870
in discourse.

14
00:00:58.030 --> 00:00:59.080
So do not worry.

15
00:00:59.860 --> 00:01:05.500
So Madlock or Kellock like functions are actually wrapper over as Bierko system call.

16
00:01:05.860 --> 00:01:06.250
Right?

17
00:01:06.490 --> 00:01:14.590
So Malakai internally invoke Esbati to claim the memory from the Heap segment and the return value of

18
00:01:14.590 --> 00:01:19.470
Mallock or Kalac functions is actually the address of break pointer.

19
00:01:19.750 --> 00:01:20.170
Right.

20
00:01:20.500 --> 00:01:26.290
So it does this breakpoint point value which is written by the Mallock or kellock like functions.

21
00:01:28.540 --> 00:01:34.000
So let us now discuss a very simple implementation of mallock, which you could think of.

22
00:01:35.110 --> 00:01:39.360
So as I said, mallock is a rapper over as Bierko system called.

23
00:01:40.060 --> 00:01:44.170
So the most basic implementation of mallock is something like this.

24
00:01:44.770 --> 00:01:45.190
Right.

25
00:01:45.880 --> 00:01:53.650
So you can see that, first of all, we cash the value of olbrycht pointer and the pointer will be right.

26
00:01:53.860 --> 00:02:02.230
And using second call to sparkies system, can we actually expand the heap region by the amount of bytes

27
00:02:02.230 --> 00:02:03.870
which is parsed as an argument?

28
00:02:04.060 --> 00:02:04.450
Right.

29
00:02:05.410 --> 00:02:12.610
So in other words, we have used as Bierko system called to allocate dynamic memory from the hip region

30
00:02:12.610 --> 00:02:13.540
to the process.

31
00:02:14.350 --> 00:02:20.320
And finally, we simply return the old breakpoint of value, which we cashed in our whether it will

32
00:02:20.320 --> 00:02:20.680
be.

33
00:02:21.950 --> 00:02:28.550
So you can see that this is the most basic implementation of mallock, which you could think of using

34
00:02:28.550 --> 00:02:29.870
as we are a system called.

35
00:02:31.020 --> 00:02:38.370
So guys here you can see as a demonstration here is a short program which demonstrate the use of Esbati

36
00:02:38.370 --> 00:02:43.470
system call, we have just discussed the discussion of our own mallock function.

37
00:02:43.890 --> 00:02:51.060
So here you can see that we have implemented our own malac function and because our own mallock function

38
00:02:51.060 --> 00:02:53.900
do not conflict with the standard Madlock function.

39
00:02:54.150 --> 00:02:58.890
Therefore, I have renamed armi log function as XML log right.

40
00:02:59.280 --> 00:03:02.070
And the corresponding free function as X free.

41
00:03:03.540 --> 00:03:08.420
So here you can see that it is a very simple demonstration in this program.

42
00:03:08.430 --> 00:03:11.050
I'm simply requesting 20 bytes of memory.

43
00:03:11.640 --> 00:03:19.290
Now you already know the implementation of our XML log function that it simply raises the pointer from

44
00:03:19.290 --> 00:03:24.020
lower address towards higher address by amount, equal to 20 bytes.

45
00:03:24.660 --> 00:03:32.610
So our XML log function simply adjusts the pointer to point to the address in the memory segment, which

46
00:03:32.610 --> 00:03:36.900
is 20 bytes higher than its previous position in the second line.

47
00:03:36.930 --> 00:03:39.980
We are simply copying some data in this case.

48
00:03:39.990 --> 00:03:44.760
Hello in the memory location, which is written by an XML log function.

49
00:03:45.250 --> 00:03:45.660
Right.

50
00:03:45.990 --> 00:03:51.570
And then we are verifying by simply printing our data and then we are freeing the memory.

51
00:03:52.230 --> 00:03:58.950
Now let us discuss the implementation of X Free so you can see that the implementation of our free function

52
00:03:58.950 --> 00:04:00.390
is very simple.

53
00:04:02.240 --> 00:04:10.490
The x ray function simply does exactly opposite to the x mallock function by using Esbati system called

54
00:04:10.820 --> 00:04:18.200
other X free function simply lowers down the break pointer from its current position to point to a lower

55
00:04:18.200 --> 00:04:20.490
address in the memory segment.

56
00:04:21.110 --> 00:04:27.500
So in the SB aka system call, if you pass the negative argument, it means that you are lowering the

57
00:04:27.500 --> 00:04:32.610
brake pointer from higher address to lower address in the heat memory segment.

58
00:04:33.230 --> 00:04:38.270
So if you simply compile this program and run, it will simply walk.

59
00:04:42.320 --> 00:04:44.090
And see it just fine.

60
00:04:49.030 --> 00:04:56.080
So from this example, I wanted to illustrate that claiming a memory from Heat Memory segment is just

61
00:04:56.080 --> 00:05:03.580
a matter of calling as Biraki system call and simply freeing the memory by the process is just a matter

62
00:05:03.790 --> 00:05:07.470
of calling as Bayaka system call with negative argument.

63
00:05:08.140 --> 00:05:14.320
In other words, if you raise the breakpoint or value from lower Atlus to higher address, it means

64
00:05:14.320 --> 00:05:17.120
that you are expanding your heat memory segment.

65
00:05:17.590 --> 00:05:22.750
In other words, your process is claiming more memory from its what will address the space.

66
00:05:23.720 --> 00:05:30.500
So this is how he mamady segment, expands and shrinks, using as Bierko system called with positive

67
00:05:30.500 --> 00:05:31.870
and negative arguments.

68
00:05:32.540 --> 00:05:38.660
But the main deviation that you can notice here is that you have to call your X free function with the

69
00:05:38.660 --> 00:05:40.610
number of bytes that you want to free.

70
00:05:42.060 --> 00:05:48.480
But in reality, when you free the memory using standard free function, you pass the address of the

71
00:05:48.480 --> 00:05:50.820
block of memory, which you want to free.

72
00:05:52.340 --> 00:05:56.950
Right, remembering the number of bytes of each block is not feasible.

73
00:05:58.090 --> 00:06:05.890
This free simply freeze the topmost block of memory, which is present in the memory segment, because

74
00:06:05.890 --> 00:06:13.060
it lowers down the brake pointer from its current position to the next lower address, this x3 do not

75
00:06:13.060 --> 00:06:19.420
free the block of memory from the Heap segment, which is somewhere in the middle of the Heap memory

76
00:06:19.420 --> 00:06:20.020
segment.

77
00:06:21.250 --> 00:06:29.170
Right, for example, this X free cannot free this block of memory, which is often bitts, so as we

78
00:06:29.170 --> 00:06:36.360
progress into this section, we will discuss the actual implementation of log function and step by step,

79
00:06:36.370 --> 00:06:42.010
we will dive deep into how actual my log function and actual free function works.

80
00:06:42.310 --> 00:06:48.430
In fact, towards the end of this section of the course, you will have a good project which demands

81
00:06:48.430 --> 00:06:55.510
you to implement your own mallock and free function, whose complexity and functionality would be as

82
00:06:55.510 --> 00:06:58.960
close as possible to the standard Moluccan free function.

83
00:07:00.270 --> 00:07:07.020
So stay tuned and let us discuss in detail the management of memory segment by the operating system.

