WEBVTT
1
00:00:06.120 --> 00:00:12.840
So, guys, going forward now, let us discuss the text substitution with the help of an example, suppose

2
00:00:12.840 --> 00:00:19.230
we have to have the phys ed attach and we it you can see that in the file.

3
00:00:19.890 --> 00:00:24.900
I have to find a macro max to get the maximum of two integers.

4
00:00:25.230 --> 00:00:30.560
And there is a function called some who's probably has been declared in this idiot.

5
00:00:30.570 --> 00:00:31.500
Not of time.

6
00:00:32.159 --> 00:00:38.880
Now coming to another high profile B dot edge in this header file we have has included the header file,

7
00:00:38.880 --> 00:00:45.960
a dot that we have defined, a macro minimum B, which is used to find a minimum of two integers.

8
00:00:46.980 --> 00:00:51.910
And finally, we have declared the prototype of another function multiply.

9
00:00:52.590 --> 00:00:55.400
So you can see that these two had files a notice.

10
00:00:55.410 --> 00:00:58.320
And we thought that are fairly, very simple and easy.

11
00:00:59.490 --> 00:01:04.110
Now suppose you are a programmer and you are writing a file application dot.

12
00:01:04.110 --> 00:01:12.180
See, now you want to make use of these functions and macros which are defined in a dot and we don't

13
00:01:12.420 --> 00:01:13.070
have to file.

14
00:01:13.680 --> 00:01:18.360
So as a programmer, you decided to include the header file without edge.

15
00:01:20.620 --> 00:01:29.020
So remember, this is the WASM number one of application doxie file, and it is this C file which actually

16
00:01:29.020 --> 00:01:31.810
programa right by using his own hands.

17
00:01:33.230 --> 00:01:41.600
So you can see that in the C file there is a use of the macro square X and there is another function

18
00:01:41.600 --> 00:01:46.800
which is declared as well as defined in this application, doxy source file.

19
00:01:47.630 --> 00:01:56.060
Now going further now let us apply the text substitution on preprocessing directive has to include and

20
00:01:56.060 --> 00:01:56.930
has defined.

21
00:01:57.950 --> 00:02:05.930
So you can see that this is application see file, but it is version to Rozental means that this file

22
00:02:05.930 --> 00:02:13.510
has been obtained by applying the text substitution on Virgin, one of application doxy file numbers.

23
00:02:13.580 --> 00:02:20.870
And two is different from the version run in the respect that this statement that is has include B dot

24
00:02:20.870 --> 00:02:25.340
at is replaced by the contents of the file p dot x.

25
00:02:25.940 --> 00:02:27.910
So this is the substitution.

26
00:02:28.880 --> 00:02:31.210
So you can see that and B dot at.

27
00:02:31.220 --> 00:02:32.450
There are two statements.

28
00:02:32.720 --> 00:02:39.180
These three statements are replaced as it is in version two of application dot c file.

29
00:02:40.040 --> 00:02:46.620
So we obtain version two of application dot C of the first pass of text substitution.

30
00:02:47.120 --> 00:02:55.460
You can also see that in version two of application dot C file, the square X has been substituted by

31
00:02:55.460 --> 00:02:56.470
its definition.

32
00:02:56.960 --> 00:03:00.320
That is a square X is replaced by X into X.

33
00:03:01.650 --> 00:03:08.670
Now, in version two of application file, there is still one occurrence of hash include preprocessing

34
00:03:08.670 --> 00:03:09.300
directive.

35
00:03:11.560 --> 00:03:17.800
So, again, the compiler will apply the text substitution on version two of application dot c file

36
00:03:18.130 --> 00:03:22.000
to eventually obtain the entry of application doxy file.

37
00:03:22.870 --> 00:03:28.720
So version three of application dot c file is different from version two of application or C file.

38
00:03:28.960 --> 00:03:36.760
In the respect that this statement that is has include a dot that has been replaced by the actual content

39
00:03:36.760 --> 00:03:38.390
of a dot as defined.

40
00:03:39.010 --> 00:03:45.640
So you can see that in a file there are only two statements and therefore these two statements has been

41
00:03:45.640 --> 00:03:48.880
replaced in version three of application dot see file.

42
00:03:49.810 --> 00:03:56.980
So version three of Application Dot File is the actual source file, which is obtained after applying

43
00:03:56.980 --> 00:03:59.890
the tax substitution method for the second time.

44
00:04:01.210 --> 00:04:07.990
Now, because we are running out of the space on this slide, so continuing from the next slide we have

45
00:04:07.990 --> 00:04:13.690
here was three of application dot file, which we are carrying over from the previous slide.

46
00:04:14.940 --> 00:04:21.519
Now you can see that there is no hash include preprocessing detective left in this country of application,

47
00:04:21.519 --> 00:04:29.300
Nazi file and all the macro's usage in this source file has been replaced by their actual definition.

48
00:04:29.700 --> 00:04:33.720
That is a square X was already replaced by X into X.

49
00:04:34.350 --> 00:04:41.700
So as the final step of text substitution, the compiler simply removes all the has defined lines from

50
00:04:41.700 --> 00:04:42.660
the source file.

51
00:04:44.280 --> 00:04:51.870
Why it removes this has defined lines, because this has defined macro's, have been already substituted

52
00:04:52.020 --> 00:04:55.330
wherever they have been used in the rest of the source file.

53
00:04:56.850 --> 00:05:02.310
So the final version of Application Doxy file, which is often is actually version four.

54
00:05:02.740 --> 00:05:10.610
And you can see that this is a very schatzi file as compared to actually what Programa wrote as was

55
00:05:10.770 --> 00:05:12.930
one of application doxy file.

56
00:05:13.560 --> 00:05:19.740
Now you can see that in this application doxy file that is not has defined preprocessing directive that

57
00:05:19.740 --> 00:05:22.040
is not has include preprocessing directive.

58
00:05:22.350 --> 00:05:26.130
So it means that the compiler is done with the text substitution.

59
00:05:26.550 --> 00:05:33.420
And now the next thing that the compiler will do is to actually start compiling version four of source

60
00:05:33.420 --> 00:05:34.980
file application Dorsi.

61
00:05:36.210 --> 00:05:42.960
So you can see that version four of application dot seesaws file is actually the final compilation unit,

62
00:05:43.140 --> 00:05:45.060
which the compiler will compile.

63
00:05:46.520 --> 00:05:53.660
So from this example, we understand that Hull compiler performs text substitution on a source file

64
00:05:54.020 --> 00:06:00.380
in multiple passes, and after performing all the text substitution, the final version of the source

65
00:06:00.380 --> 00:06:06.050
file is actually the file, which the compiler can consider for an actual compilation.

66
00:06:06.950 --> 00:06:13.130
Also, note that there will be no has defined and no hash include preprocessing directive in the final

67
00:06:13.130 --> 00:06:17.630
version of application dot c file with the compiler will eventually compile.

